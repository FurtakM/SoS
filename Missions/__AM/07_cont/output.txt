// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// Init ;
   8: CALL 44 0 0
// DebugMode ;
  12: CALL 265 0 0
// AnimateTrees ( true ) ;
  16: LD_INT 1
  18: PPUSH
  19: CALL_OW 573
// CreateNature ;
  23: CALL 1568 0 0
// PrepareRussians ;
  27: CALL 4578 0 0
// PrepareAmericans ;
  31: CALL 3448 0 0
// Action ;
  35: CALL 8692 0 0
// SaveForQuickRestart ;
  39: CALL_OW 22
// end ;
  43: END
// export debug ; export mission_prev_prefix , mission_prefix ; export buildings_counter , time_to_end , can_end , must_end , kill_counter ; function Init ; begin
  44: LD_INT 0
  46: PPUSH
// debug := false ;
  47: LD_ADDR_EXP 1
  51: PUSH
  52: LD_INT 0
  54: ST_TO_ADDR
// mission_prefix := 07c_ ;
  55: LD_ADDR_EXP 3
  59: PUSH
  60: LD_STRING 07c_
  62: ST_TO_ADDR
// mission_prev_prefix := 07_ ;
  63: LD_ADDR_EXP 2
  67: PUSH
  68: LD_STRING 07_
  70: ST_TO_ADDR
// buildings_counter := 0 ;
  71: LD_ADDR_EXP 4
  75: PUSH
  76: LD_INT 0
  78: ST_TO_ADDR
// time_to_end := [ [ 32 32$00 , 29 29$00 , 26 26$00 , 23 23$00 ] [ Difficulty ] , [ 38 38$00 , 36 36$00 , 34 34$00 , 32 32$00 ] [ Difficulty ] , [ 43 43$00 , 41 41$00 , 39 39$00 , 37 37$00 ] [ Difficulty ] ] ;
  79: LD_ADDR_EXP 5
  83: PUSH
  84: LD_INT 67200
  86: PUSH
  87: LD_INT 60900
  89: PUSH
  90: LD_INT 54600
  92: PUSH
  93: LD_INT 48300
  95: PUSH
  96: EMPTY
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: PUSH
 102: LD_OWVAR 67
 106: ARRAY
 107: PUSH
 108: LD_INT 79800
 110: PUSH
 111: LD_INT 75600
 113: PUSH
 114: LD_INT 71400
 116: PUSH
 117: LD_INT 67200
 119: PUSH
 120: EMPTY
 121: LIST
 122: LIST
 123: LIST
 124: LIST
 125: PUSH
 126: LD_OWVAR 67
 130: ARRAY
 131: PUSH
 132: LD_INT 90300
 134: PUSH
 135: LD_INT 86100
 137: PUSH
 138: LD_INT 81900
 140: PUSH
 141: LD_INT 77700
 143: PUSH
 144: EMPTY
 145: LIST
 146: LIST
 147: LIST
 148: LIST
 149: PUSH
 150: LD_OWVAR 67
 154: ARRAY
 155: PUSH
 156: EMPTY
 157: LIST
 158: LIST
 159: LIST
 160: ST_TO_ADDR
// can_end := false ;
 161: LD_ADDR_EXP 6
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// must_end := false ;
 169: LD_ADDR_EXP 7
 173: PUSH
 174: LD_INT 0
 176: ST_TO_ADDR
// kill_counter := 0 ;
 177: LD_ADDR_EXP 8
 181: PUSH
 182: LD_INT 0
 184: ST_TO_ADDR
// end ;
 185: LD_VAR 0 1
 189: RET
// every 0 0$01 trigger not debug do
 190: LD_EXP 1
 194: NOT
 195: IFFALSE 264
 197: GO 199
 199: DISABLE
// begin enable ;
 200: ENABLE
// if not must_end then
 201: LD_EXP 7
 205: NOT
 206: IFFALSE 227
// display_strings := [ #Am07-1 , tick ] else
 208: LD_ADDR_OWVAR 47
 212: PUSH
 213: LD_STRING #Am07-1
 215: PUSH
 216: LD_OWVAR 1
 220: PUSH
 221: EMPTY
 222: LIST
 223: LIST
 224: ST_TO_ADDR
 225: GO 264
// display_strings := [ #Am07-1 , tick , #Am07-2 , time_to_end [ 3 ] - tick ] ;
 227: LD_ADDR_OWVAR 47
 231: PUSH
 232: LD_STRING #Am07-1
 234: PUSH
 235: LD_OWVAR 1
 239: PUSH
 240: LD_STRING #Am07-2
 242: PUSH
 243: LD_EXP 5
 247: PUSH
 248: LD_INT 3
 250: ARRAY
 251: PUSH
 252: LD_OWVAR 1
 256: MINUS
 257: PUSH
 258: EMPTY
 259: LIST
 260: LIST
 261: LIST
 262: LIST
 263: ST_TO_ADDR
// end ;
 264: END
// function DebugMode ; var i ; begin
 265: LD_INT 0
 267: PPUSH
 268: PPUSH
// if not debug then
 269: LD_EXP 1
 273: NOT
 274: IFFALSE 278
// exit ;
 276: GO 293
// Difficulty := 4 ;
 278: LD_ADDR_OWVAR 67
 282: PUSH
 283: LD_INT 4
 285: ST_TO_ADDR
// FogOff ( 1 ) ;
 286: LD_INT 1
 288: PPUSH
 289: CALL_OW 344
// end ;
 293: LD_VAR 0 1
 297: RET
// every 3 trigger debug do var i , filter ;
 298: LD_EXP 1
 302: IFFALSE 391
 304: GO 306
 306: DISABLE
 307: LD_INT 0
 309: PPUSH
 310: PPUSH
// begin enable ;
 311: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 500 ] ] ] ) ;
 312: LD_ADDR_VAR 0 2
 316: PUSH
 317: LD_INT 22
 319: PUSH
 320: LD_INT 1
 322: PUSH
 323: EMPTY
 324: LIST
 325: LIST
 326: PUSH
 327: LD_INT 3
 329: PUSH
 330: LD_INT 24
 332: PUSH
 333: LD_INT 500
 335: PUSH
 336: EMPTY
 337: LIST
 338: LIST
 339: PUSH
 340: EMPTY
 341: LIST
 342: LIST
 343: PUSH
 344: EMPTY
 345: LIST
 346: LIST
 347: PPUSH
 348: CALL_OW 69
 352: ST_TO_ADDR
// if not filter then
 353: LD_VAR 0 2
 357: NOT
 358: IFFALSE 362
// exit ;
 360: GO 391
// for i in filter do
 362: LD_ADDR_VAR 0 1
 366: PUSH
 367: LD_VAR 0 2
 371: PUSH
 372: FOR_IN
 373: IFFALSE 389
// SetLives ( i , 1000 ) ;
 375: LD_VAR 0 1
 379: PPUSH
 380: LD_INT 1000
 382: PPUSH
 383: CALL_OW 234
 387: GO 372
 389: POP
 390: POP
// end ;
 391: PPOPN 2
 393: END
// every 0 0$1 trigger kill_counter >= 20 do
 394: LD_EXP 8
 398: PUSH
 399: LD_INT 20
 401: GREATEREQUAL
 402: IFFALSE 414
 404: GO 406
 406: DISABLE
// SetAchievement ( ACH_HITMAN ) ;
 407: LD_STRING ACH_HITMAN
 409: PPUSH
 410: CALL_OW 543
 414: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] ] ) >= 3 do
 415: LD_INT 22
 417: PUSH
 418: LD_INT 1
 420: PUSH
 421: EMPTY
 422: LIST
 423: LIST
 424: PUSH
 425: LD_INT 23
 427: PUSH
 428: LD_INT 3
 430: PUSH
 431: EMPTY
 432: LIST
 433: LIST
 434: PUSH
 435: LD_INT 21
 437: PUSH
 438: LD_INT 2
 440: PUSH
 441: EMPTY
 442: LIST
 443: LIST
 444: PUSH
 445: EMPTY
 446: LIST
 447: LIST
 448: LIST
 449: PPUSH
 450: CALL_OW 69
 454: PUSH
 455: LD_INT 3
 457: GREATEREQUAL
 458: IFFALSE 470
 460: GO 462
 462: DISABLE
// SetAchievement ( ACH_TANKACE ) ;
 463: LD_STRING ACH_TANKACE
 465: PPUSH
 466: CALL_OW 543
 470: END
// every 0 0$1 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) = 0 do
 471: LD_INT 2
 473: PUSH
 474: LD_INT 30
 476: PUSH
 477: LD_INT 0
 479: PUSH
 480: EMPTY
 481: LIST
 482: LIST
 483: PUSH
 484: LD_INT 30
 486: PUSH
 487: LD_INT 1
 489: PUSH
 490: EMPTY
 491: LIST
 492: LIST
 493: PUSH
 494: EMPTY
 495: LIST
 496: LIST
 497: LIST
 498: PPUSH
 499: CALL_OW 69
 503: PUSH
 504: LD_INT 0
 506: EQUAL
 507: IFFALSE 519
 509: GO 511
 511: DISABLE
// SetAchievement ( ACH_COMMANDO ) ; end_of_file
 512: LD_STRING ACH_COMMANDO
 514: PPUSH
 515: CALL_OW 543
 519: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 520: LD_INT 0
 522: PPUSH
// uc_side := side ;
 523: LD_ADDR_OWVAR 20
 527: PUSH
 528: LD_VAR 0 1
 532: ST_TO_ADDR
// uc_nation := nation ;
 533: LD_ADDR_OWVAR 21
 537: PUSH
 538: LD_VAR 0 2
 542: ST_TO_ADDR
// vc_chassis := chassis ;
 543: LD_ADDR_OWVAR 37
 547: PUSH
 548: LD_VAR 0 3
 552: ST_TO_ADDR
// vc_engine := engine ;
 553: LD_ADDR_OWVAR 39
 557: PUSH
 558: LD_VAR 0 4
 562: ST_TO_ADDR
// vc_control := control ;
 563: LD_ADDR_OWVAR 38
 567: PUSH
 568: LD_VAR 0 5
 572: ST_TO_ADDR
// vc_weapon := weapon ;
 573: LD_ADDR_OWVAR 40
 577: PUSH
 578: LD_VAR 0 6
 582: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 583: LD_ADDR_OWVAR 41
 587: PUSH
 588: LD_VAR 0 7
 592: ST_TO_ADDR
// result := CreateVehicle ;
 593: LD_ADDR_VAR 0 8
 597: PUSH
 598: CALL_OW 45
 602: ST_TO_ADDR
// end ;
 603: LD_VAR 0 8
 607: RET
// export function GetRandom ( sex ) ; var i , filter ; begin
 608: LD_INT 0
 610: PPUSH
 611: PPUSH
 612: PPUSH
// filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam ] ;
 613: LD_ADDR_VAR 0 4
 617: PUSH
 618: LD_INT 22
 620: PUSH
 621: LD_INT 1
 623: PUSH
 624: EMPTY
 625: LIST
 626: LIST
 627: PUSH
 628: LD_INT 21
 630: PUSH
 631: LD_INT 1
 633: PUSH
 634: EMPTY
 635: LIST
 636: LIST
 637: PUSH
 638: LD_INT 50
 640: PUSH
 641: EMPTY
 642: LIST
 643: PUSH
 644: EMPTY
 645: LIST
 646: LIST
 647: LIST
 648: PPUSH
 649: CALL_OW 69
 653: PUSH
 654: LD_EXP 9
 658: PUSH
 659: LD_EXP 10
 663: PUSH
 664: LD_EXP 11
 668: PUSH
 669: LD_EXP 12
 673: PUSH
 674: LD_EXP 13
 678: PUSH
 679: LD_EXP 14
 683: PUSH
 684: LD_EXP 15
 688: PUSH
 689: LD_EXP 16
 693: PUSH
 694: LD_EXP 18
 698: PUSH
 699: LD_EXP 17
 703: PUSH
 704: EMPTY
 705: LIST
 706: LIST
 707: LIST
 708: LIST
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: LIST
 714: LIST
 715: DIFF
 716: ST_TO_ADDR
// if not filter then
 717: LD_VAR 0 4
 721: NOT
 722: IFFALSE 726
// exit ;
 724: GO 753
// result := UnitFilter ( filter , [ f_sex , sex ] ) ;
 726: LD_ADDR_VAR 0 2
 730: PUSH
 731: LD_VAR 0 4
 735: PPUSH
 736: LD_INT 26
 738: PUSH
 739: LD_VAR 0 1
 743: PUSH
 744: EMPTY
 745: LIST
 746: LIST
 747: PPUSH
 748: CALL_OW 72
 752: ST_TO_ADDR
// end ;
 753: LD_VAR 0 2
 757: RET
// export function SayX ( units , ident ) ; var i ; begin
 758: LD_INT 0
 760: PPUSH
 761: PPUSH
// result := false ;
 762: LD_ADDR_VAR 0 3
 766: PUSH
 767: LD_INT 0
 769: ST_TO_ADDR
// if not units then
 770: LD_VAR 0 1
 774: NOT
 775: IFFALSE 779
// exit ;
 777: GO 833
// for i in units do
 779: LD_ADDR_VAR 0 4
 783: PUSH
 784: LD_VAR 0 1
 788: PUSH
 789: FOR_IN
 790: IFFALSE 831
// if IsOk ( i ) then
 792: LD_VAR 0 4
 796: PPUSH
 797: CALL_OW 302
 801: IFFALSE 829
// begin Say ( i , ident ) ;
 803: LD_VAR 0 4
 807: PPUSH
 808: LD_VAR 0 2
 812: PPUSH
 813: CALL_OW 88
// result := i ;
 817: LD_ADDR_VAR 0 3
 821: PUSH
 822: LD_VAR 0 4
 826: ST_TO_ADDR
// break ;
 827: GO 831
// end ;
 829: GO 789
 831: POP
 832: POP
// end ;
 833: LD_VAR 0 3
 837: RET
// export function GoToAnotherTower ( un , b , x , y ) ; var i , filter , barracks , side ; begin
 838: LD_INT 0
 840: PPUSH
 841: PPUSH
 842: PPUSH
 843: PPUSH
 844: PPUSH
// if not un or not IsOk ( un ) then
 845: LD_VAR 0 1
 849: NOT
 850: PUSH
 851: LD_VAR 0 1
 855: PPUSH
 856: CALL_OW 302
 860: NOT
 861: OR
 862: IFFALSE 866
// exit ;
 864: GO 1173
// side := GetSide ( un ) ;
 866: LD_ADDR_VAR 0 9
 870: PUSH
 871: LD_VAR 0 1
 875: PPUSH
 876: CALL_OW 255
 880: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_not , [ f_tag , 7 ] ] , [ f_ok ] , [ f_empty ] ] ) diff b ;
 881: LD_ADDR_VAR 0 7
 885: PUSH
 886: LD_INT 22
 888: PUSH
 889: LD_VAR 0 9
 893: PUSH
 894: EMPTY
 895: LIST
 896: LIST
 897: PUSH
 898: LD_INT 30
 900: PUSH
 901: LD_INT 32
 903: PUSH
 904: EMPTY
 905: LIST
 906: LIST
 907: PUSH
 908: LD_INT 3
 910: PUSH
 911: LD_INT 120
 913: PUSH
 914: LD_INT 7
 916: PUSH
 917: EMPTY
 918: LIST
 919: LIST
 920: PUSH
 921: EMPTY
 922: LIST
 923: LIST
 924: PUSH
 925: LD_INT 50
 927: PUSH
 928: EMPTY
 929: LIST
 930: PUSH
 931: LD_INT 58
 933: PUSH
 934: EMPTY
 935: LIST
 936: PUSH
 937: EMPTY
 938: LIST
 939: LIST
 940: LIST
 941: LIST
 942: LIST
 943: PPUSH
 944: CALL_OW 69
 948: PUSH
 949: LD_VAR 0 2
 953: DIFF
 954: ST_TO_ADDR
// barracks := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_barracks ] ] ) ;
 955: LD_ADDR_VAR 0 8
 959: PUSH
 960: LD_INT 22
 962: PUSH
 963: LD_VAR 0 9
 967: PUSH
 968: EMPTY
 969: LIST
 970: LIST
 971: PUSH
 972: LD_INT 30
 974: PUSH
 975: LD_INT 5
 977: PUSH
 978: EMPTY
 979: LIST
 980: LIST
 981: PUSH
 982: EMPTY
 983: LIST
 984: LIST
 985: PPUSH
 986: CALL_OW 69
 990: ST_TO_ADDR
// if not filter then
 991: LD_VAR 0 7
 995: NOT
 996: IFFALSE 1086
// begin if barracks then
 998: LD_VAR 0 8
1002: IFFALSE 1065
// for i in barracks do
1004: LD_ADDR_VAR 0 6
1008: PUSH
1009: LD_VAR 0 8
1013: PUSH
1014: FOR_IN
1015: IFFALSE 1063
// begin if UnitsInside ( i ) < 6 and IsOk ( i ) then
1017: LD_VAR 0 6
1021: PPUSH
1022: CALL_OW 313
1026: PUSH
1027: LD_INT 6
1029: LESS
1030: PUSH
1031: LD_VAR 0 6
1035: PPUSH
1036: CALL_OW 302
1040: AND
1041: IFFALSE 1061
// begin ComEnterUnit ( un , i ) ;
1043: LD_VAR 0 1
1047: PPUSH
1048: LD_VAR 0 6
1052: PPUSH
1053: CALL_OW 120
// exit ;
1057: POP
1058: POP
1059: GO 1173
// end ; end ;
1061: GO 1014
1063: POP
1064: POP
// ComMoveXY ( un , x , y ) ;
1065: LD_VAR 0 1
1069: PPUSH
1070: LD_VAR 0 3
1074: PPUSH
1075: LD_VAR 0 4
1079: PPUSH
1080: CALL_OW 111
// end else
1084: GO 1173
// begin filter := SortByDistanceUnit ( un , filter , true , true ) ;
1086: LD_ADDR_VAR 0 7
1090: PUSH
1091: LD_VAR 0 1
1095: PPUSH
1096: LD_VAR 0 7
1100: PPUSH
1101: LD_INT 1
1103: PPUSH
1104: LD_INT 1
1106: PPUSH
1107: CALL 37772 0 4
1111: ST_TO_ADDR
// if filter then
1112: LD_VAR 0 7
1116: IFFALSE 1154
// begin SetTag ( filter [ 1 ] , 7 ) ;
1118: LD_VAR 0 7
1122: PUSH
1123: LD_INT 1
1125: ARRAY
1126: PPUSH
1127: LD_INT 7
1129: PPUSH
1130: CALL_OW 109
// ComEnterUnit ( un , filter [ 1 ] ) ;
1134: LD_VAR 0 1
1138: PPUSH
1139: LD_VAR 0 7
1143: PUSH
1144: LD_INT 1
1146: ARRAY
1147: PPUSH
1148: CALL_OW 120
// end else
1152: GO 1173
// ComMoveXY ( un , x , y ) ;
1154: LD_VAR 0 1
1158: PPUSH
1159: LD_VAR 0 3
1163: PPUSH
1164: LD_VAR 0 4
1168: PPUSH
1169: CALL_OW 111
// end ; end ;
1173: LD_VAR 0 5
1177: RET
// export function BaseNeedEnergy ( base ) ; var i , tmp ; begin
1178: LD_INT 0
1180: PPUSH
1181: PPUSH
1182: PPUSH
// if not base then
1183: LD_VAR 0 1
1187: NOT
1188: IFFALSE 1192
// exit ;
1190: GO 1250
// tmp := GetEnergy ( GetBase ( base ) ) ;
1192: LD_ADDR_VAR 0 4
1196: PUSH
1197: LD_VAR 0 1
1201: PPUSH
1202: CALL_OW 274
1206: PPUSH
1207: CALL_OW 278
1211: ST_TO_ADDR
// if tmp [ 1 ] > tmp [ 4 ] then
1212: LD_VAR 0 4
1216: PUSH
1217: LD_INT 1
1219: ARRAY
1220: PUSH
1221: LD_VAR 0 4
1225: PUSH
1226: LD_INT 4
1228: ARRAY
1229: GREATER
1230: IFFALSE 1242
// result := true else
1232: LD_ADDR_VAR 0 2
1236: PUSH
1237: LD_INT 1
1239: ST_TO_ADDR
1240: GO 1250
// result := false ;
1242: LD_ADDR_VAR 0 2
1246: PUSH
1247: LD_INT 0
1249: ST_TO_ADDR
// end ;
1250: LD_VAR 0 2
1254: RET
// export function FilterPeople ( side ) ; begin
1255: LD_INT 0
1257: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] ] ) ;
1258: LD_ADDR_VAR 0 2
1262: PUSH
1263: LD_INT 22
1265: PUSH
1266: LD_VAR 0 1
1270: PUSH
1271: EMPTY
1272: LIST
1273: LIST
1274: PUSH
1275: LD_INT 21
1277: PUSH
1278: LD_INT 1
1280: PUSH
1281: EMPTY
1282: LIST
1283: LIST
1284: PUSH
1285: EMPTY
1286: LIST
1287: LIST
1288: PPUSH
1289: CALL_OW 69
1293: ST_TO_ADDR
// end ;
1294: LD_VAR 0 2
1298: RET
// export function FilterDrivers ( side ) ; begin
1299: LD_INT 0
1301: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_outside ] ] ] ) ;
1302: LD_ADDR_VAR 0 2
1306: PUSH
1307: LD_INT 22
1309: PUSH
1310: LD_VAR 0 1
1314: PUSH
1315: EMPTY
1316: LIST
1317: LIST
1318: PUSH
1319: LD_INT 3
1321: PUSH
1322: LD_INT 56
1324: PUSH
1325: EMPTY
1326: LIST
1327: PUSH
1328: EMPTY
1329: LIST
1330: LIST
1331: PUSH
1332: EMPTY
1333: LIST
1334: LIST
1335: PPUSH
1336: CALL_OW 69
1340: ST_TO_ADDR
// end ;
1341: LD_VAR 0 2
1345: RET
// export function FilterPeopleArea ( side , area ) ; begin
1346: LD_INT 0
1348: PPUSH
// result := FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ;
1349: LD_ADDR_VAR 0 3
1353: PUSH
1354: LD_VAR 0 2
1358: PPUSH
1359: LD_INT 22
1361: PUSH
1362: LD_INT 1
1364: PUSH
1365: EMPTY
1366: LIST
1367: LIST
1368: PUSH
1369: LD_INT 21
1371: PUSH
1372: LD_INT 1
1374: PUSH
1375: EMPTY
1376: LIST
1377: LIST
1378: PUSH
1379: EMPTY
1380: LIST
1381: LIST
1382: PPUSH
1383: CALL_OW 70
1387: ST_TO_ADDR
// end ;
1388: LD_VAR 0 3
1392: RET
// export function FilterDriversArea ( side , area ) ; var i , tmp ; begin
1393: LD_INT 0
1395: PPUSH
1396: PPUSH
1397: PPUSH
// tmp := FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) ;
1398: LD_ADDR_VAR 0 5
1402: PUSH
1403: LD_VAR 0 2
1407: PPUSH
1408: LD_INT 22
1410: PUSH
1411: LD_INT 1
1413: PUSH
1414: EMPTY
1415: LIST
1416: LIST
1417: PUSH
1418: LD_INT 21
1420: PUSH
1421: LD_INT 2
1423: PUSH
1424: EMPTY
1425: LIST
1426: LIST
1427: PUSH
1428: LD_INT 3
1430: PUSH
1431: LD_INT 58
1433: PUSH
1434: EMPTY
1435: LIST
1436: PUSH
1437: EMPTY
1438: LIST
1439: LIST
1440: PUSH
1441: EMPTY
1442: LIST
1443: LIST
1444: LIST
1445: PPUSH
1446: CALL_OW 70
1450: ST_TO_ADDR
// result := [ ] ;
1451: LD_ADDR_VAR 0 3
1455: PUSH
1456: EMPTY
1457: ST_TO_ADDR
// if not tmp then
1458: LD_VAR 0 5
1462: NOT
1463: IFFALSE 1467
// exit ;
1465: GO 1519
// for i in tmp do
1467: LD_ADDR_VAR 0 4
1471: PUSH
1472: LD_VAR 0 5
1476: PUSH
1477: FOR_IN
1478: IFFALSE 1503
// result := result union IsDrivenBy ( i ) ;
1480: LD_ADDR_VAR 0 3
1484: PUSH
1485: LD_VAR 0 3
1489: PUSH
1490: LD_VAR 0 4
1494: PPUSH
1495: CALL_OW 311
1499: UNION
1500: ST_TO_ADDR
1501: GO 1477
1503: POP
1504: POP
// result := result diff 0 ;
1505: LD_ADDR_VAR 0 3
1509: PUSH
1510: LD_VAR 0 3
1514: PUSH
1515: LD_INT 0
1517: DIFF
1518: ST_TO_ADDR
// end ;
1519: LD_VAR 0 3
1523: RET
// export function FilterBuildings ( side ) ; begin
1524: LD_INT 0
1526: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
1527: LD_ADDR_VAR 0 2
1531: PUSH
1532: LD_INT 22
1534: PUSH
1535: LD_VAR 0 1
1539: PUSH
1540: EMPTY
1541: LIST
1542: LIST
1543: PUSH
1544: LD_INT 21
1546: PUSH
1547: LD_INT 3
1549: PUSH
1550: EMPTY
1551: LIST
1552: LIST
1553: PUSH
1554: EMPTY
1555: LIST
1556: LIST
1557: PPUSH
1558: CALL_OW 69
1562: ST_TO_ADDR
// end ;
1563: LD_VAR 0 2
1567: RET
// export function CreateNature ; var i , animal , nat_area ; begin
1568: LD_INT 0
1570: PPUSH
1571: PPUSH
1572: PPUSH
1573: PPUSH
// uc_side = 0 ;
1574: LD_ADDR_OWVAR 20
1578: PUSH
1579: LD_INT 0
1581: ST_TO_ADDR
// uc_nation = 0 ;
1582: LD_ADDR_OWVAR 21
1586: PUSH
1587: LD_INT 0
1589: ST_TO_ADDR
// nat_area := wildArea ;
1590: LD_ADDR_VAR 0 4
1594: PUSH
1595: LD_INT 3
1597: ST_TO_ADDR
// InitHc ;
1598: CALL_OW 19
// for i = 1 to 4 do
1602: LD_ADDR_VAR 0 2
1606: PUSH
1607: DOUBLE
1608: LD_INT 1
1610: DEC
1611: ST_TO_ADDR
1612: LD_INT 4
1614: PUSH
1615: FOR_TO
1616: IFFALSE 1671
// begin hc_class = 18 ;
1618: LD_ADDR_OWVAR 28
1622: PUSH
1623: LD_INT 18
1625: ST_TO_ADDR
// hc_gallery =  ;
1626: LD_ADDR_OWVAR 33
1630: PUSH
1631: LD_STRING 
1633: ST_TO_ADDR
// hc_face_number = 1 ;
1634: LD_ADDR_OWVAR 34
1638: PUSH
1639: LD_INT 1
1641: ST_TO_ADDR
// animal := CreateHuman ;
1642: LD_ADDR_VAR 0 3
1646: PUSH
1647: CALL_OW 44
1651: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
1652: LD_VAR 0 3
1656: PPUSH
1657: LD_VAR 0 4
1661: PPUSH
1662: LD_INT 0
1664: PPUSH
1665: CALL_OW 49
// end ;
1669: GO 1615
1671: POP
1672: POP
// for i = 1 to 6 do
1673: LD_ADDR_VAR 0 2
1677: PUSH
1678: DOUBLE
1679: LD_INT 1
1681: DEC
1682: ST_TO_ADDR
1683: LD_INT 6
1685: PUSH
1686: FOR_TO
1687: IFFALSE 1758
// begin hc_class = class_tiger ;
1689: LD_ADDR_OWVAR 28
1693: PUSH
1694: LD_INT 14
1696: ST_TO_ADDR
// hc_gallery =  ;
1697: LD_ADDR_OWVAR 33
1701: PUSH
1702: LD_STRING 
1704: ST_TO_ADDR
// hc_agressivity = Rand ( 0 , 10 ) ;
1705: LD_ADDR_OWVAR 35
1709: PUSH
1710: LD_INT 0
1712: PPUSH
1713: LD_INT 10
1715: PPUSH
1716: CALL_OW 12
1720: ST_TO_ADDR
// hc_face_number = 3 ;
1721: LD_ADDR_OWVAR 34
1725: PUSH
1726: LD_INT 3
1728: ST_TO_ADDR
// animal := CreateHuman ;
1729: LD_ADDR_VAR 0 3
1733: PUSH
1734: CALL_OW 44
1738: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
1739: LD_VAR 0 3
1743: PPUSH
1744: LD_VAR 0 4
1748: PPUSH
1749: LD_INT 0
1751: PPUSH
1752: CALL_OW 49
// end ;
1756: GO 1686
1758: POP
1759: POP
// for i = 1 to 2 do
1760: LD_ADDR_VAR 0 2
1764: PUSH
1765: DOUBLE
1766: LD_INT 1
1768: DEC
1769: ST_TO_ADDR
1770: LD_INT 2
1772: PUSH
1773: FOR_TO
1774: IFFALSE 1837
// begin hc_class = 21 ;
1776: LD_ADDR_OWVAR 28
1780: PUSH
1781: LD_INT 21
1783: ST_TO_ADDR
// hc_gallery =  ;
1784: LD_ADDR_OWVAR 33
1788: PUSH
1789: LD_STRING 
1791: ST_TO_ADDR
// hc_agressivity = 0 ;
1792: LD_ADDR_OWVAR 35
1796: PUSH
1797: LD_INT 0
1799: ST_TO_ADDR
// hc_face_number = 5 ;
1800: LD_ADDR_OWVAR 34
1804: PUSH
1805: LD_INT 5
1807: ST_TO_ADDR
// animal := CreateHuman ;
1808: LD_ADDR_VAR 0 3
1812: PUSH
1813: CALL_OW 44
1817: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
1818: LD_VAR 0 3
1822: PPUSH
1823: LD_VAR 0 4
1827: PPUSH
1828: LD_INT 0
1830: PPUSH
1831: CALL_OW 49
// end ;
1835: GO 1773
1837: POP
1838: POP
// for i = 1 to 6 do
1839: LD_ADDR_VAR 0 2
1843: PUSH
1844: DOUBLE
1845: LD_INT 1
1847: DEC
1848: ST_TO_ADDR
1849: LD_INT 6
1851: PUSH
1852: FOR_TO
1853: IFFALSE 1908
// begin hc_class = 13 ;
1855: LD_ADDR_OWVAR 28
1859: PUSH
1860: LD_INT 13
1862: ST_TO_ADDR
// hc_gallery =  ;
1863: LD_ADDR_OWVAR 33
1867: PUSH
1868: LD_STRING 
1870: ST_TO_ADDR
// hc_face_number = 4 ;
1871: LD_ADDR_OWVAR 34
1875: PUSH
1876: LD_INT 4
1878: ST_TO_ADDR
// animal := CreateHuman ;
1879: LD_ADDR_VAR 0 3
1883: PUSH
1884: CALL_OW 44
1888: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
1889: LD_VAR 0 3
1893: PPUSH
1894: LD_VAR 0 4
1898: PPUSH
1899: LD_INT 0
1901: PPUSH
1902: CALL_OW 49
// end ;
1906: GO 1852
1908: POP
1909: POP
// for i = 1 to 2 do
1910: LD_ADDR_VAR 0 2
1914: PUSH
1915: DOUBLE
1916: LD_INT 1
1918: DEC
1919: ST_TO_ADDR
1920: LD_INT 2
1922: PUSH
1923: FOR_TO
1924: IFFALSE 1983
// begin hc_class = 20 ;
1926: LD_ADDR_OWVAR 28
1930: PUSH
1931: LD_INT 20
1933: ST_TO_ADDR
// hc_gallery =  ;
1934: LD_ADDR_OWVAR 33
1938: PUSH
1939: LD_STRING 
1941: ST_TO_ADDR
// hc_face_number = 2 ;
1942: LD_ADDR_OWVAR 34
1946: PUSH
1947: LD_INT 2
1949: ST_TO_ADDR
// animal := CreateHuman ;
1950: LD_ADDR_VAR 0 3
1954: PUSH
1955: CALL_OW 44
1959: ST_TO_ADDR
// PlaceUnitXYR ( animal , 101 , 37 , 3 , false ) ;
1960: LD_VAR 0 3
1964: PPUSH
1965: LD_INT 101
1967: PPUSH
1968: LD_INT 37
1970: PPUSH
1971: LD_INT 3
1973: PPUSH
1974: LD_INT 0
1976: PPUSH
1977: CALL_OW 50
// end ;
1981: GO 1923
1983: POP
1984: POP
// for i = 1 to 1 do
1985: LD_ADDR_VAR 0 2
1989: PUSH
1990: DOUBLE
1991: LD_INT 1
1993: DEC
1994: ST_TO_ADDR
1995: LD_INT 1
1997: PUSH
1998: FOR_TO
1999: IFFALSE 2046
// begin vc_chassis := 31 ;
2001: LD_ADDR_OWVAR 37
2005: PUSH
2006: LD_INT 31
2008: ST_TO_ADDR
// vc_control := control_rider ;
2009: LD_ADDR_OWVAR 38
2013: PUSH
2014: LD_INT 4
2016: ST_TO_ADDR
// animal := CreateVehicle ;
2017: LD_ADDR_VAR 0 3
2021: PUSH
2022: CALL_OW 45
2026: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
2027: LD_VAR 0 3
2031: PPUSH
2032: LD_VAR 0 4
2036: PPUSH
2037: LD_INT 0
2039: PPUSH
2040: CALL_OW 49
// end ;
2044: GO 1998
2046: POP
2047: POP
// end ;
2048: LD_VAR 0 1
2052: RET
// export function NearbyTowerHasEnergy ( unit ) ; var i , tmp , energy ; begin
2053: LD_INT 0
2055: PPUSH
2056: PPUSH
2057: PPUSH
2058: PPUSH
// result := [ ] ;
2059: LD_ADDR_VAR 0 2
2063: PUSH
2064: EMPTY
2065: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( unit ) ] , [ f_dist , unit , 15 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) ;
2066: LD_ADDR_VAR 0 4
2070: PUSH
2071: LD_INT 81
2073: PUSH
2074: LD_VAR 0 1
2078: PPUSH
2079: CALL_OW 255
2083: PUSH
2084: EMPTY
2085: LIST
2086: LIST
2087: PUSH
2088: LD_INT 91
2090: PUSH
2091: LD_VAR 0 1
2095: PUSH
2096: LD_INT 15
2098: PUSH
2099: EMPTY
2100: LIST
2101: LIST
2102: LIST
2103: PUSH
2104: LD_INT 2
2106: PUSH
2107: LD_INT 30
2109: PUSH
2110: LD_INT 32
2112: PUSH
2113: EMPTY
2114: LIST
2115: LIST
2116: PUSH
2117: LD_INT 30
2119: PUSH
2120: LD_INT 33
2122: PUSH
2123: EMPTY
2124: LIST
2125: LIST
2126: PUSH
2127: EMPTY
2128: LIST
2129: LIST
2130: LIST
2131: PUSH
2132: EMPTY
2133: LIST
2134: LIST
2135: LIST
2136: PPUSH
2137: CALL_OW 69
2141: ST_TO_ADDR
// if not tmp then
2142: LD_VAR 0 4
2146: NOT
2147: IFFALSE 2151
// exit ;
2149: GO 2220
// for i in tmp do
2151: LD_ADDR_VAR 0 3
2155: PUSH
2156: LD_VAR 0 4
2160: PUSH
2161: FOR_IN
2162: IFFALSE 2218
// begin energy := GetEnergy ( GetBase ( i ) ) ;
2164: LD_ADDR_VAR 0 5
2168: PUSH
2169: LD_VAR 0 3
2173: PPUSH
2174: CALL_OW 274
2178: PPUSH
2179: CALL_OW 278
2183: ST_TO_ADDR
// if energy [ 4 ] > energy [ 1 ] then
2184: LD_VAR 0 5
2188: PUSH
2189: LD_INT 4
2191: ARRAY
2192: PUSH
2193: LD_VAR 0 5
2197: PUSH
2198: LD_INT 1
2200: ARRAY
2201: GREATER
2202: IFFALSE 2216
// begin result := i ;
2204: LD_ADDR_VAR 0 2
2208: PUSH
2209: LD_VAR 0 3
2213: ST_TO_ADDR
// break ;
2214: GO 2218
// end ; end ;
2216: GO 2161
2218: POP
2219: POP
// end ;
2220: LD_VAR 0 2
2224: RET
// export function GetTurretWeaponBase ( tower ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
2225: LD_INT 0
2227: PPUSH
2228: PPUSH
2229: PPUSH
2230: PPUSH
2231: PPUSH
2232: PPUSH
2233: PPUSH
2234: PPUSH
2235: PPUSH
2236: PPUSH
2237: PPUSH
2238: PPUSH
2239: PPUSH
2240: PPUSH
2241: PPUSH
2242: PPUSH
// result := false ;
2243: LD_ADDR_VAR 0 2
2247: PUSH
2248: LD_INT 0
2250: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
2251: LD_VAR 0 1
2255: NOT
2256: PUSH
2257: LD_VAR 0 1
2261: PPUSH
2262: CALL_OW 266
2266: PUSH
2267: LD_INT 32
2269: PUSH
2270: LD_INT 33
2272: PUSH
2273: EMPTY
2274: LIST
2275: LIST
2276: IN
2277: NOT
2278: OR
2279: IFFALSE 2283
// exit ;
2281: GO 3443
// nat := GetNation ( tower ) ;
2283: LD_ADDR_VAR 0 11
2287: PUSH
2288: LD_VAR 0 1
2292: PPUSH
2293: CALL_OW 248
2297: ST_TO_ADDR
// side := GetSide ( tower ) ;
2298: LD_ADDR_VAR 0 15
2302: PUSH
2303: LD_VAR 0 1
2307: PPUSH
2308: CALL_OW 255
2312: ST_TO_ADDR
// x := GetX ( tower ) ;
2313: LD_ADDR_VAR 0 9
2317: PUSH
2318: LD_VAR 0 1
2322: PPUSH
2323: CALL_OW 250
2327: ST_TO_ADDR
// y := GetY ( tower ) ;
2328: LD_ADDR_VAR 0 10
2332: PUSH
2333: LD_VAR 0 1
2337: PPUSH
2338: CALL_OW 251
2342: ST_TO_ADDR
// if not x or not y then
2343: LD_VAR 0 9
2347: NOT
2348: PUSH
2349: LD_VAR 0 10
2353: NOT
2354: OR
2355: IFFALSE 2359
// exit ;
2357: GO 3443
// weapon := 0 ;
2359: LD_ADDR_VAR 0 17
2363: PUSH
2364: LD_INT 0
2366: ST_TO_ADDR
// fac_list := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun ] ;
2367: LD_ADDR_VAR 0 16
2371: PUSH
2372: LD_INT 42
2374: PUSH
2375: LD_INT 43
2377: PUSH
2378: LD_INT 44
2380: PUSH
2381: LD_INT 46
2383: PUSH
2384: EMPTY
2385: LIST
2386: LIST
2387: LIST
2388: LIST
2389: ST_TO_ADDR
// if not fac_list then
2390: LD_VAR 0 16
2394: NOT
2395: IFFALSE 2399
// exit ;
2397: GO 3443
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
2399: LD_ADDR_VAR 0 4
2403: PUSH
2404: LD_INT 4
2406: PUSH
2407: LD_INT 5
2409: PUSH
2410: LD_INT 9
2412: PUSH
2413: LD_INT 10
2415: PUSH
2416: LD_INT 6
2418: PUSH
2419: LD_INT 7
2421: PUSH
2422: LD_INT 11
2424: PUSH
2425: EMPTY
2426: LIST
2427: LIST
2428: LIST
2429: LIST
2430: LIST
2431: LIST
2432: LIST
2433: PUSH
2434: LD_INT 27
2436: PUSH
2437: LD_INT 28
2439: PUSH
2440: LD_INT 26
2442: PUSH
2443: LD_INT 30
2445: PUSH
2446: EMPTY
2447: LIST
2448: LIST
2449: LIST
2450: LIST
2451: PUSH
2452: LD_INT 43
2454: PUSH
2455: LD_INT 44
2457: PUSH
2458: LD_INT 46
2460: PUSH
2461: LD_INT 45
2463: PUSH
2464: LD_INT 47
2466: PUSH
2467: LD_INT 49
2469: PUSH
2470: EMPTY
2471: LIST
2472: LIST
2473: LIST
2474: LIST
2475: LIST
2476: LIST
2477: PUSH
2478: EMPTY
2479: LIST
2480: LIST
2481: LIST
2482: PUSH
2483: LD_VAR 0 11
2487: ARRAY
2488: ST_TO_ADDR
// for i in list do
2489: LD_ADDR_VAR 0 7
2493: PUSH
2494: LD_VAR 0 4
2498: PUSH
2499: FOR_IN
2500: IFFALSE 2533
// if not i in fac_list then
2502: LD_VAR 0 7
2506: PUSH
2507: LD_VAR 0 16
2511: IN
2512: NOT
2513: IFFALSE 2531
// list := list diff i ;
2515: LD_ADDR_VAR 0 4
2519: PUSH
2520: LD_VAR 0 4
2524: PUSH
2525: LD_VAR 0 7
2529: DIFF
2530: ST_TO_ADDR
2531: GO 2499
2533: POP
2534: POP
// if not list then
2535: LD_VAR 0 4
2539: NOT
2540: IFFALSE 2544
// exit ;
2542: GO 3443
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
2544: LD_VAR 0 11
2548: PUSH
2549: LD_INT 3
2551: EQUAL
2552: PUSH
2553: LD_INT 49
2555: PUSH
2556: LD_VAR 0 4
2560: IN
2561: AND
2562: PUSH
2563: LD_INT 31
2565: PPUSH
2566: LD_VAR 0 15
2570: PPUSH
2571: CALL_OW 321
2575: PUSH
2576: LD_INT 2
2578: EQUAL
2579: AND
2580: IFFALSE 2640
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
2582: LD_INT 22
2584: PUSH
2585: LD_VAR 0 15
2589: PUSH
2590: EMPTY
2591: LIST
2592: LIST
2593: PUSH
2594: LD_INT 35
2596: PUSH
2597: LD_INT 49
2599: PUSH
2600: EMPTY
2601: LIST
2602: LIST
2603: PUSH
2604: LD_INT 91
2606: PUSH
2607: LD_VAR 0 1
2611: PUSH
2612: LD_INT 10
2614: PUSH
2615: EMPTY
2616: LIST
2617: LIST
2618: LIST
2619: PUSH
2620: EMPTY
2621: LIST
2622: LIST
2623: LIST
2624: PPUSH
2625: CALL_OW 69
2629: NOT
2630: IFFALSE 2640
// weapon := ru_time_lapser ;
2632: LD_ADDR_VAR 0 17
2636: PUSH
2637: LD_INT 49
2639: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
2640: LD_VAR 0 11
2644: PUSH
2645: LD_INT 1
2647: PUSH
2648: LD_INT 2
2650: PUSH
2651: EMPTY
2652: LIST
2653: LIST
2654: IN
2655: PUSH
2656: LD_INT 11
2658: PUSH
2659: LD_VAR 0 4
2663: IN
2664: PUSH
2665: LD_INT 30
2667: PUSH
2668: LD_VAR 0 4
2672: IN
2673: OR
2674: AND
2675: PUSH
2676: LD_INT 6
2678: PPUSH
2679: LD_VAR 0 15
2683: PPUSH
2684: CALL_OW 321
2688: PUSH
2689: LD_INT 2
2691: EQUAL
2692: AND
2693: IFFALSE 2858
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
2695: LD_INT 22
2697: PUSH
2698: LD_VAR 0 15
2702: PUSH
2703: EMPTY
2704: LIST
2705: LIST
2706: PUSH
2707: LD_INT 2
2709: PUSH
2710: LD_INT 35
2712: PUSH
2713: LD_INT 11
2715: PUSH
2716: EMPTY
2717: LIST
2718: LIST
2719: PUSH
2720: LD_INT 35
2722: PUSH
2723: LD_INT 30
2725: PUSH
2726: EMPTY
2727: LIST
2728: LIST
2729: PUSH
2730: EMPTY
2731: LIST
2732: LIST
2733: LIST
2734: PUSH
2735: LD_INT 91
2737: PUSH
2738: LD_VAR 0 1
2742: PUSH
2743: LD_INT 18
2745: PUSH
2746: EMPTY
2747: LIST
2748: LIST
2749: LIST
2750: PUSH
2751: EMPTY
2752: LIST
2753: LIST
2754: LIST
2755: PPUSH
2756: CALL_OW 69
2760: NOT
2761: PUSH
2762: LD_INT 22
2764: PUSH
2765: LD_VAR 0 15
2769: PUSH
2770: EMPTY
2771: LIST
2772: LIST
2773: PUSH
2774: LD_INT 2
2776: PUSH
2777: LD_INT 30
2779: PUSH
2780: LD_INT 32
2782: PUSH
2783: EMPTY
2784: LIST
2785: LIST
2786: PUSH
2787: LD_INT 30
2789: PUSH
2790: LD_INT 33
2792: PUSH
2793: EMPTY
2794: LIST
2795: LIST
2796: PUSH
2797: EMPTY
2798: LIST
2799: LIST
2800: LIST
2801: PUSH
2802: LD_INT 91
2804: PUSH
2805: LD_VAR 0 1
2809: PUSH
2810: LD_INT 12
2812: PUSH
2813: EMPTY
2814: LIST
2815: LIST
2816: LIST
2817: PUSH
2818: EMPTY
2819: LIST
2820: LIST
2821: LIST
2822: PUSH
2823: EMPTY
2824: LIST
2825: PPUSH
2826: CALL_OW 69
2830: PUSH
2831: LD_INT 2
2833: GREATER
2834: AND
2835: IFFALSE 2858
// weapon := [ us_radar , ar_radar ] [ nat ] ;
2837: LD_ADDR_VAR 0 17
2841: PUSH
2842: LD_INT 11
2844: PUSH
2845: LD_INT 30
2847: PUSH
2848: EMPTY
2849: LIST
2850: LIST
2851: PUSH
2852: LD_VAR 0 11
2856: ARRAY
2857: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
2858: LD_VAR 0 17
2862: NOT
2863: PUSH
2864: LD_INT 40
2866: PPUSH
2867: LD_VAR 0 15
2871: PPUSH
2872: CALL_OW 321
2876: PUSH
2877: LD_INT 2
2879: EQUAL
2880: AND
2881: PUSH
2882: LD_INT 7
2884: PUSH
2885: LD_VAR 0 4
2889: IN
2890: PUSH
2891: LD_INT 28
2893: PUSH
2894: LD_VAR 0 4
2898: IN
2899: OR
2900: PUSH
2901: LD_INT 45
2903: PUSH
2904: LD_VAR 0 4
2908: IN
2909: OR
2910: AND
2911: IFFALSE 3165
// begin hex := GetHexInfo ( x , y ) ;
2913: LD_ADDR_VAR 0 3
2917: PUSH
2918: LD_VAR 0 9
2922: PPUSH
2923: LD_VAR 0 10
2927: PPUSH
2928: CALL_OW 546
2932: ST_TO_ADDR
// if hex [ 1 ] then
2933: LD_VAR 0 3
2937: PUSH
2938: LD_INT 1
2940: ARRAY
2941: IFFALSE 2945
// exit ;
2943: GO 3443
// height := hex [ 2 ] ;
2945: LD_ADDR_VAR 0 14
2949: PUSH
2950: LD_VAR 0 3
2954: PUSH
2955: LD_INT 2
2957: ARRAY
2958: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
2959: LD_ADDR_VAR 0 13
2963: PUSH
2964: LD_INT 0
2966: PUSH
2967: LD_INT 2
2969: PUSH
2970: LD_INT 3
2972: PUSH
2973: LD_INT 5
2975: PUSH
2976: EMPTY
2977: LIST
2978: LIST
2979: LIST
2980: LIST
2981: ST_TO_ADDR
// for i in tmp do
2982: LD_ADDR_VAR 0 7
2986: PUSH
2987: LD_VAR 0 13
2991: PUSH
2992: FOR_IN
2993: IFFALSE 3163
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
2995: LD_ADDR_VAR 0 8
2999: PUSH
3000: LD_VAR 0 9
3004: PPUSH
3005: LD_VAR 0 7
3009: PPUSH
3010: LD_INT 5
3012: PPUSH
3013: CALL_OW 272
3017: PUSH
3018: LD_VAR 0 10
3022: PPUSH
3023: LD_VAR 0 7
3027: PPUSH
3028: LD_INT 5
3030: PPUSH
3031: CALL_OW 273
3035: PUSH
3036: EMPTY
3037: LIST
3038: LIST
3039: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
3040: LD_VAR 0 8
3044: PUSH
3045: LD_INT 1
3047: ARRAY
3048: PPUSH
3049: LD_VAR 0 8
3053: PUSH
3054: LD_INT 2
3056: ARRAY
3057: PPUSH
3058: CALL_OW 488
3062: IFFALSE 3161
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
3064: LD_ADDR_VAR 0 3
3068: PUSH
3069: LD_VAR 0 8
3073: PUSH
3074: LD_INT 1
3076: ARRAY
3077: PPUSH
3078: LD_VAR 0 8
3082: PUSH
3083: LD_INT 2
3085: ARRAY
3086: PPUSH
3087: CALL_OW 546
3091: ST_TO_ADDR
// if hex [ 1 ] then
3092: LD_VAR 0 3
3096: PUSH
3097: LD_INT 1
3099: ARRAY
3100: IFFALSE 3104
// continue ;
3102: GO 2992
// h := hex [ 2 ] ;
3104: LD_ADDR_VAR 0 12
3108: PUSH
3109: LD_VAR 0 3
3113: PUSH
3114: LD_INT 2
3116: ARRAY
3117: ST_TO_ADDR
// if h + 7 < height then
3118: LD_VAR 0 12
3122: PUSH
3123: LD_INT 7
3125: PLUS
3126: PUSH
3127: LD_VAR 0 14
3131: LESS
3132: IFFALSE 3161
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
3134: LD_ADDR_VAR 0 17
3138: PUSH
3139: LD_INT 7
3141: PUSH
3142: LD_INT 28
3144: PUSH
3145: LD_INT 45
3147: PUSH
3148: EMPTY
3149: LIST
3150: LIST
3151: LIST
3152: PUSH
3153: LD_VAR 0 11
3157: ARRAY
3158: ST_TO_ADDR
// break ;
3159: GO 3163
// end ; end ; end ;
3161: GO 2992
3163: POP
3164: POP
// end ; if not weapon then
3165: LD_VAR 0 17
3169: NOT
3170: IFFALSE 3325
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
3172: LD_ADDR_VAR 0 4
3176: PUSH
3177: LD_VAR 0 4
3181: PUSH
3182: LD_INT 11
3184: PUSH
3185: LD_INT 30
3187: PUSH
3188: LD_INT 49
3190: PUSH
3191: EMPTY
3192: LIST
3193: LIST
3194: LIST
3195: DIFF
3196: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , tower , 6 ] , [ f_not , [ f_bweapon , 0 ] ] ] ) ;
3197: LD_ADDR_VAR 0 13
3201: PUSH
3202: LD_INT 22
3204: PUSH
3205: LD_VAR 0 15
3209: PUSH
3210: EMPTY
3211: LIST
3212: LIST
3213: PUSH
3214: LD_INT 91
3216: PUSH
3217: LD_VAR 0 1
3221: PUSH
3222: LD_INT 6
3224: PUSH
3225: EMPTY
3226: LIST
3227: LIST
3228: LIST
3229: PUSH
3230: LD_INT 3
3232: PUSH
3233: LD_INT 35
3235: PUSH
3236: LD_INT 0
3238: PUSH
3239: EMPTY
3240: LIST
3241: LIST
3242: PUSH
3243: EMPTY
3244: LIST
3245: LIST
3246: PUSH
3247: EMPTY
3248: LIST
3249: LIST
3250: LIST
3251: PPUSH
3252: CALL_OW 69
3256: ST_TO_ADDR
// for i in tmp do
3257: LD_ADDR_VAR 0 7
3261: PUSH
3262: LD_VAR 0 13
3266: PUSH
3267: FOR_IN
3268: IFFALSE 3293
// list := list diff GetBWeapon ( i ) ;
3270: LD_ADDR_VAR 0 4
3274: PUSH
3275: LD_VAR 0 4
3279: PUSH
3280: LD_VAR 0 7
3284: PPUSH
3285: CALL_OW 269
3289: DIFF
3290: ST_TO_ADDR
3291: GO 3267
3293: POP
3294: POP
// if list then
3295: LD_VAR 0 4
3299: IFFALSE 3325
// weapon := list [ rand ( 1 , list ) ] ;
3301: LD_ADDR_VAR 0 17
3305: PUSH
3306: LD_VAR 0 4
3310: PUSH
3311: LD_INT 1
3313: PPUSH
3314: LD_VAR 0 4
3318: PPUSH
3319: CALL_OW 12
3323: ARRAY
3324: ST_TO_ADDR
// end ; if weapon then
3325: LD_VAR 0 17
3329: IFFALSE 3443
// begin tmp := CostOfWeapon ( weapon ) ;
3331: LD_ADDR_VAR 0 13
3335: PUSH
3336: LD_VAR 0 17
3340: PPUSH
3341: CALL_OW 451
3345: ST_TO_ADDR
// j := GetBase ( tower ) ;
3346: LD_ADDR_VAR 0 8
3350: PUSH
3351: LD_VAR 0 1
3355: PPUSH
3356: CALL_OW 274
3360: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
3361: LD_VAR 0 8
3365: PPUSH
3366: LD_INT 1
3368: PPUSH
3369: CALL_OW 275
3373: PUSH
3374: LD_VAR 0 13
3378: PUSH
3379: LD_INT 1
3381: ARRAY
3382: GREATEREQUAL
3383: PUSH
3384: LD_VAR 0 8
3388: PPUSH
3389: LD_INT 2
3391: PPUSH
3392: CALL_OW 275
3396: PUSH
3397: LD_VAR 0 13
3401: PUSH
3402: LD_INT 2
3404: ARRAY
3405: GREATEREQUAL
3406: AND
3407: PUSH
3408: LD_VAR 0 8
3412: PPUSH
3413: LD_INT 3
3415: PPUSH
3416: CALL_OW 275
3420: PUSH
3421: LD_VAR 0 13
3425: PUSH
3426: LD_INT 3
3428: ARRAY
3429: GREATEREQUAL
3430: AND
3431: IFFALSE 3443
// result := weapon ;
3433: LD_ADDR_VAR 0 2
3437: PUSH
3438: LD_VAR 0 17
3442: ST_TO_ADDR
// end ; end ; end_of_file
3443: LD_VAR 0 2
3447: RET
// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Khatam , Kikuchi , Harisson ; export function PrepareAmericans ; var i , team , others , veh , m ; begin
3448: LD_INT 0
3450: PPUSH
3451: PPUSH
3452: PPUSH
3453: PPUSH
3454: PPUSH
3455: PPUSH
// uc_side := 1 ;
3456: LD_ADDR_OWVAR 20
3460: PUSH
3461: LD_INT 1
3463: ST_TO_ADDR
// uc_nation := 1 ;
3464: LD_ADDR_OWVAR 21
3468: PUSH
3469: LD_INT 1
3471: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , mission_prev_prefix ) ;
3472: LD_ADDR_EXP 9
3476: PUSH
3477: LD_STRING JMM
3479: PPUSH
3480: LD_EXP 1
3484: NOT
3485: PPUSH
3486: LD_EXP 2
3490: PPUSH
3491: CALL 32200 0 3
3495: ST_TO_ADDR
// team := [ JMM ] ;
3496: LD_ADDR_VAR 0 3
3500: PUSH
3501: LD_EXP 9
3505: PUSH
3506: EMPTY
3507: LIST
3508: ST_TO_ADDR
// if LoadVariable ( BrownIn07 , debug ) then
3509: LD_STRING BrownIn07
3511: PPUSH
3512: LD_EXP 1
3516: PPUSH
3517: CALL_OW 30
3521: IFFALSE 3547
// Brown := PrepareUnit ( Brown , ( not debug ) , mission_prev_prefix ) ;
3523: LD_ADDR_EXP 10
3527: PUSH
3528: LD_STRING Brown
3530: PPUSH
3531: LD_EXP 1
3535: NOT
3536: PPUSH
3537: LD_EXP 2
3541: PPUSH
3542: CALL 32200 0 3
3546: ST_TO_ADDR
// if Brown then
3547: LD_EXP 10
3551: IFFALSE 3569
// team := team ^ Brown ;
3553: LD_ADDR_VAR 0 3
3557: PUSH
3558: LD_VAR 0 3
3562: PUSH
3563: LD_EXP 10
3567: ADD
3568: ST_TO_ADDR
// if LoadVariable ( DonaldsonIn07 , debug ) then
3569: LD_STRING DonaldsonIn07
3571: PPUSH
3572: LD_EXP 1
3576: PPUSH
3577: CALL_OW 30
3581: IFFALSE 3607
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , mission_prev_prefix ) ;
3583: LD_ADDR_EXP 11
3587: PUSH
3588: LD_STRING Donaldson
3590: PPUSH
3591: LD_EXP 1
3595: NOT
3596: PPUSH
3597: LD_EXP 2
3601: PPUSH
3602: CALL 32200 0 3
3606: ST_TO_ADDR
// if Donaldson then
3607: LD_EXP 11
3611: IFFALSE 3629
// team := team ^ Donaldson ;
3613: LD_ADDR_VAR 0 3
3617: PUSH
3618: LD_VAR 0 3
3622: PUSH
3623: LD_EXP 11
3627: ADD
3628: ST_TO_ADDR
// if LoadVariable ( BobbyIn07 , debug ) then
3629: LD_STRING BobbyIn07
3631: PPUSH
3632: LD_EXP 1
3636: PPUSH
3637: CALL_OW 30
3641: IFFALSE 3667
// Bobby := PrepareUnit ( Bobby , ( not debug ) , mission_prev_prefix ) ;
3643: LD_ADDR_EXP 12
3647: PUSH
3648: LD_STRING Bobby
3650: PPUSH
3651: LD_EXP 1
3655: NOT
3656: PPUSH
3657: LD_EXP 2
3661: PPUSH
3662: CALL 32200 0 3
3666: ST_TO_ADDR
// if Bobby then
3667: LD_EXP 12
3671: IFFALSE 3689
// team := team ^ Bobby ;
3673: LD_ADDR_VAR 0 3
3677: PUSH
3678: LD_VAR 0 3
3682: PUSH
3683: LD_EXP 12
3687: ADD
3688: ST_TO_ADDR
// if LoadVariable ( CyrusIn07 , debug ) then
3689: LD_STRING CyrusIn07
3691: PPUSH
3692: LD_EXP 1
3696: PPUSH
3697: CALL_OW 30
3701: IFFALSE 3727
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , mission_prev_prefix ) ;
3703: LD_ADDR_EXP 13
3707: PUSH
3708: LD_STRING Cyrus
3710: PPUSH
3711: LD_EXP 1
3715: NOT
3716: PPUSH
3717: LD_EXP 2
3721: PPUSH
3722: CALL 32200 0 3
3726: ST_TO_ADDR
// if Cyrus then
3727: LD_EXP 13
3731: IFFALSE 3749
// team := team ^ Cyrus ;
3733: LD_ADDR_VAR 0 3
3737: PUSH
3738: LD_VAR 0 3
3742: PUSH
3743: LD_EXP 13
3747: ADD
3748: ST_TO_ADDR
// if LoadVariable ( LisaIn07 , debug ) then
3749: LD_STRING LisaIn07
3751: PPUSH
3752: LD_EXP 1
3756: PPUSH
3757: CALL_OW 30
3761: IFFALSE 3787
// Lisa := PrepareUnit ( Lisa , ( not debug ) , mission_prev_prefix ) ;
3763: LD_ADDR_EXP 14
3767: PUSH
3768: LD_STRING Lisa
3770: PPUSH
3771: LD_EXP 1
3775: NOT
3776: PPUSH
3777: LD_EXP 2
3781: PPUSH
3782: CALL 32200 0 3
3786: ST_TO_ADDR
// if Lisa then
3787: LD_EXP 14
3791: IFFALSE 3809
// team := team ^ Lisa ;
3793: LD_ADDR_VAR 0 3
3797: PUSH
3798: LD_VAR 0 3
3802: PUSH
3803: LD_EXP 14
3807: ADD
3808: ST_TO_ADDR
// if LoadVariable ( GladstoneIn07 , debug ) then
3809: LD_STRING GladstoneIn07
3811: PPUSH
3812: LD_EXP 1
3816: PPUSH
3817: CALL_OW 30
3821: IFFALSE 3847
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , mission_prev_prefix ) ;
3823: LD_ADDR_EXP 16
3827: PUSH
3828: LD_STRING Gladstone
3830: PPUSH
3831: LD_EXP 1
3835: NOT
3836: PPUSH
3837: LD_EXP 2
3841: PPUSH
3842: CALL 32200 0 3
3846: ST_TO_ADDR
// if Gladstone then
3847: LD_EXP 16
3851: IFFALSE 3869
// team := team ^ Gladstone ;
3853: LD_ADDR_VAR 0 3
3857: PUSH
3858: LD_VAR 0 3
3862: PUSH
3863: LD_EXP 16
3867: ADD
3868: ST_TO_ADDR
// if LoadVariable ( KhatamIn07 , debug ) then
3869: LD_STRING KhatamIn07
3871: PPUSH
3872: LD_EXP 1
3876: PPUSH
3877: CALL_OW 30
3881: IFFALSE 3907
// Khatam := PrepareUnit ( Khatam , ( not debug ) , mission_prev_prefix ) ;
3883: LD_ADDR_EXP 17
3887: PUSH
3888: LD_STRING Khatam
3890: PPUSH
3891: LD_EXP 1
3895: NOT
3896: PPUSH
3897: LD_EXP 2
3901: PPUSH
3902: CALL 32200 0 3
3906: ST_TO_ADDR
// if Khatam then
3907: LD_EXP 17
3911: IFFALSE 3929
// team := team ^ Khatam ;
3913: LD_ADDR_VAR 0 3
3917: PUSH
3918: LD_VAR 0 3
3922: PUSH
3923: LD_EXP 17
3927: ADD
3928: ST_TO_ADDR
// others := CreateCharacterSet ( 07_others ) ;
3929: LD_ADDR_VAR 0 4
3933: PUSH
3934: LD_STRING 07_others
3936: PPUSH
3937: CALL_OW 31
3941: ST_TO_ADDR
// if others then
3942: LD_VAR 0 4
3946: IFFALSE 3964
// team := team ^ others ;
3948: LD_ADDR_VAR 0 3
3952: PUSH
3953: LD_VAR 0 3
3957: PUSH
3958: LD_VAR 0 4
3962: ADD
3963: ST_TO_ADDR
// if debug then
3964: LD_EXP 1
3968: IFFALSE 4042
// begin InitHc ;
3970: CALL_OW 19
// for i = 1 to 4 do
3974: LD_ADDR_VAR 0 2
3978: PUSH
3979: DOUBLE
3980: LD_INT 1
3982: DEC
3983: ST_TO_ADDR
3984: LD_INT 4
3986: PUSH
3987: FOR_TO
3988: IFFALSE 4040
// begin PrepareHuman ( false , [ 1 , 3 ] [ Rand ( 1 , 2 ) ] , 4 ) ;
3990: LD_INT 0
3992: PPUSH
3993: LD_INT 1
3995: PUSH
3996: LD_INT 3
3998: PUSH
3999: EMPTY
4000: LIST
4001: LIST
4002: PUSH
4003: LD_INT 1
4005: PPUSH
4006: LD_INT 2
4008: PPUSH
4009: CALL_OW 12
4013: ARRAY
4014: PPUSH
4015: LD_INT 4
4017: PPUSH
4018: CALL_OW 380
// team := team ^ CreateHuman ;
4022: LD_ADDR_VAR 0 3
4026: PUSH
4027: LD_VAR 0 3
4031: PUSH
4032: CALL_OW 44
4036: ADD
4037: ST_TO_ADDR
// end ;
4038: GO 3987
4040: POP
4041: POP
// end ; m := 0 ;
4042: LD_ADDR_VAR 0 6
4046: PUSH
4047: LD_INT 0
4049: ST_TO_ADDR
// for i in team do
4050: LD_ADDR_VAR 0 2
4054: PUSH
4055: LD_VAR 0 3
4059: PUSH
4060: FOR_IN
4061: IFFALSE 4268
// if GetClass ( i ) = 3 then
4063: LD_VAR 0 2
4067: PPUSH
4068: CALL_OW 257
4072: PUSH
4073: LD_INT 3
4075: EQUAL
4076: IFFALSE 4224
// begin m := m + 1 ;
4078: LD_ADDR_VAR 0 6
4082: PUSH
4083: LD_VAR 0 6
4087: PUSH
4088: LD_INT 1
4090: PLUS
4091: ST_TO_ADDR
// veh := PrepareTank ( 1 , 1 , [ us_medium_wheeled , us_medium_tracked , us_medium_wheeled , us_light_wheeled ] [ m mod 4 + 1 ] , engine_solar , control_manual , [ us_gatling_gun , us_double_gun , us_light_gun , us_radar ] [ m mod 4 + 1 ] , 60 ) ;
4092: LD_ADDR_VAR 0 5
4096: PUSH
4097: LD_INT 1
4099: PPUSH
4100: LD_INT 1
4102: PPUSH
4103: LD_INT 2
4105: PUSH
4106: LD_INT 3
4108: PUSH
4109: LD_INT 2
4111: PUSH
4112: LD_INT 1
4114: PUSH
4115: EMPTY
4116: LIST
4117: LIST
4118: LIST
4119: LIST
4120: PUSH
4121: LD_VAR 0 6
4125: PUSH
4126: LD_INT 4
4128: MOD
4129: PUSH
4130: LD_INT 1
4132: PLUS
4133: ARRAY
4134: PPUSH
4135: LD_INT 2
4137: PPUSH
4138: LD_INT 1
4140: PPUSH
4141: LD_INT 4
4143: PUSH
4144: LD_INT 5
4146: PUSH
4147: LD_INT 3
4149: PUSH
4150: LD_INT 11
4152: PUSH
4153: EMPTY
4154: LIST
4155: LIST
4156: LIST
4157: LIST
4158: PUSH
4159: LD_VAR 0 6
4163: PUSH
4164: LD_INT 4
4166: MOD
4167: PUSH
4168: LD_INT 1
4170: PLUS
4171: ARRAY
4172: PPUSH
4173: LD_INT 60
4175: PPUSH
4176: CALL 520 0 7
4180: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
4181: LD_VAR 0 5
4185: PPUSH
4186: LD_INT 2
4188: PPUSH
4189: CALL_OW 233
// PlaceUnitArea ( veh , startArea , false ) ;
4193: LD_VAR 0 5
4197: PPUSH
4198: LD_INT 1
4200: PPUSH
4201: LD_INT 0
4203: PPUSH
4204: CALL_OW 49
// PlaceHumanInUnit ( i , veh ) ;
4208: LD_VAR 0 2
4212: PPUSH
4213: LD_VAR 0 5
4217: PPUSH
4218: CALL_OW 52
// end else
4222: GO 4266
// begin if GetClass ( i ) = 2 then
4224: LD_VAR 0 2
4228: PPUSH
4229: CALL_OW 257
4233: PUSH
4234: LD_INT 2
4236: EQUAL
4237: IFFALSE 4251
// SetClass ( i , 1 ) ;
4239: LD_VAR 0 2
4243: PPUSH
4244: LD_INT 1
4246: PPUSH
4247: CALL_OW 336
// PlaceUnitArea ( i , startArea , false ) ;
4251: LD_VAR 0 2
4255: PPUSH
4256: LD_INT 1
4258: PPUSH
4259: LD_INT 0
4261: PPUSH
4262: CALL_OW 49
// end ;
4266: GO 4060
4268: POP
4269: POP
// uc_side := 4 ;
4270: LD_ADDR_OWVAR 20
4274: PUSH
4275: LD_INT 4
4277: ST_TO_ADDR
// Harisson := PrepareUnit ( Harisson , false ,  ) ;
4278: LD_ADDR_EXP 19
4282: PUSH
4283: LD_STRING Harisson
4285: PPUSH
4286: LD_INT 0
4288: PPUSH
4289: LD_STRING 
4291: PPUSH
4292: CALL 32200 0 3
4296: ST_TO_ADDR
// PrepareScout ;
4297: CALL 4306 0 0
// end ;
4301: LD_VAR 0 1
4305: RET
// function PrepareScout ; var ape ; begin
4306: LD_INT 0
4308: PPUSH
4309: PPUSH
// uc_side := 4 ;
4310: LD_ADDR_OWVAR 20
4314: PUSH
4315: LD_INT 4
4317: ST_TO_ADDR
// uc_nation := 1 ;
4318: LD_ADDR_OWVAR 21
4322: PUSH
4323: LD_INT 1
4325: ST_TO_ADDR
// if LoadVariable ( FrankIn06 , 0 ) then
4326: LD_STRING FrankIn06
4328: PPUSH
4329: LD_INT 0
4331: PPUSH
4332: CALL_OW 30
4336: IFFALSE 4353
// Frank := CreateCharacter ( 06c_Frank ) else
4338: LD_ADDR_EXP 15
4342: PUSH
4343: LD_STRING 06c_Frank
4345: PPUSH
4346: CALL_OW 34
4350: ST_TO_ADDR
4351: GO 4393
// if LoadVariable ( FrankInDelta , 0 ) then
4353: LD_STRING FrankInDelta
4355: PPUSH
4356: LD_INT 0
4358: PPUSH
4359: CALL_OW 30
4363: IFFALSE 4380
// Frank := CreateCharacter ( 05_Frank ) else
4365: LD_ADDR_EXP 15
4369: PUSH
4370: LD_STRING 05_Frank
4372: PPUSH
4373: CALL_OW 34
4377: ST_TO_ADDR
4378: GO 4393
// Frank := CreateCharacter ( 04_Frank ) ;
4380: LD_ADDR_EXP 15
4384: PUSH
4385: LD_STRING 04_Frank
4387: PPUSH
4388: CALL_OW 34
4392: ST_TO_ADDR
// if Frank then
4393: LD_EXP 15
4397: IFFALSE 4530
// begin PlaceUnitArea ( Frank , scoutArea , false ) ;
4399: LD_EXP 15
4403: PPUSH
4404: LD_INT 2
4406: PPUSH
4407: LD_INT 0
4409: PPUSH
4410: CALL_OW 49
// SetClass ( Frank , 1 ) ;
4414: LD_EXP 15
4418: PPUSH
4419: LD_INT 1
4421: PPUSH
4422: CALL_OW 336
// uc_side := 0 ;
4426: LD_ADDR_OWVAR 20
4430: PUSH
4431: LD_INT 0
4433: ST_TO_ADDR
// uc_nation := 0 ;
4434: LD_ADDR_OWVAR 21
4438: PUSH
4439: LD_INT 0
4441: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 0 ) ;
4442: LD_INT 0
4444: PPUSH
4445: LD_INT 12
4447: PPUSH
4448: LD_INT 0
4450: PPUSH
4451: CALL_OW 380
// ape := CreateHuman ;
4455: LD_ADDR_VAR 0 2
4459: PUSH
4460: CALL_OW 44
4464: ST_TO_ADDR
// PlaceUnitXYR ( ape , GetX ( Frank ) , GetY ( Frank ) , 5 , false ) ;
4465: LD_VAR 0 2
4469: PPUSH
4470: LD_EXP 15
4474: PPUSH
4475: CALL_OW 250
4479: PPUSH
4480: LD_EXP 15
4484: PPUSH
4485: CALL_OW 251
4489: PPUSH
4490: LD_INT 5
4492: PPUSH
4493: LD_INT 0
4495: PPUSH
4496: CALL_OW 50
// ComTurnUnit ( ape , Frank ) ;
4500: LD_VAR 0 2
4504: PPUSH
4505: LD_EXP 15
4509: PPUSH
4510: CALL_OW 119
// ComTurnUnit ( Frank , ape ) ;
4514: LD_EXP 15
4518: PPUSH
4519: LD_VAR 0 2
4523: PPUSH
4524: CALL_OW 119
// exit ;
4528: GO 4573
// end ; Kikuchi := PrepareUnit ( Yamoko , false ,  ) ;
4530: LD_ADDR_EXP 18
4534: PUSH
4535: LD_STRING Yamoko
4537: PPUSH
4538: LD_INT 0
4540: PPUSH
4541: LD_STRING 
4543: PPUSH
4544: CALL 32200 0 3
4548: ST_TO_ADDR
// PlaceUnitArea ( Kikuchi , scoutArea , false ) ;
4549: LD_EXP 18
4553: PPUSH
4554: LD_INT 2
4556: PPUSH
4557: LD_INT 0
4559: PPUSH
4560: CALL_OW 49
// ComHold ( Kikuchi ) ;
4564: LD_EXP 18
4568: PPUSH
4569: CALL_OW 140
// end ; end_of_file
4573: LD_VAR 0 1
4577: RET
// export ru_rebuild_list ; export function PrepareRussians ; var i , j , r , un , skill , filter , tmp , dep_list , lab_list , fac_list , breastworks_list , bunker_list , turret_list , weapons_list , personel_counter ; begin
4578: LD_INT 0
4580: PPUSH
4581: PPUSH
4582: PPUSH
4583: PPUSH
4584: PPUSH
4585: PPUSH
4586: PPUSH
4587: PPUSH
4588: PPUSH
4589: PPUSH
4590: PPUSH
4591: PPUSH
4592: PPUSH
4593: PPUSH
4594: PPUSH
4595: PPUSH
// ru_rebuild_list := [ ] ;
4596: LD_ADDR_EXP 20
4600: PUSH
4601: EMPTY
4602: ST_TO_ADDR
// uc_side := 3 ;
4603: LD_ADDR_OWVAR 20
4607: PUSH
4608: LD_INT 3
4610: ST_TO_ADDR
// uc_nation := 3 ;
4611: LD_ADDR_OWVAR 21
4615: PUSH
4616: LD_INT 3
4618: ST_TO_ADDR
// if Difficulty > 1 then
4619: LD_OWVAR 67
4623: PUSH
4624: LD_INT 1
4626: GREATER
4627: IFFALSE 4794
// begin bc_type := b_breastwork ;
4629: LD_ADDR_OWVAR 42
4633: PUSH
4634: LD_INT 31
4636: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 78 , 74 , 2 ) ;
4637: LD_INT 78
4639: PPUSH
4640: LD_INT 74
4642: PPUSH
4643: LD_INT 2
4645: PPUSH
4646: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 171 , 193 , 4 ) ;
4650: LD_INT 171
4652: PPUSH
4653: LD_INT 193
4655: PPUSH
4656: LD_INT 4
4658: PPUSH
4659: CALL_OW 47
// bc_type := b_turret ;
4663: LD_ADDR_OWVAR 42
4667: PUSH
4668: LD_INT 33
4670: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 129 , 96 , 3 ) ;
4671: LD_INT 129
4673: PPUSH
4674: LD_INT 96
4676: PPUSH
4677: LD_INT 3
4679: PPUSH
4680: CALL_OW 47
// if Difficulty > 2 then
4684: LD_OWVAR 67
4688: PUSH
4689: LD_INT 2
4691: GREATER
4692: IFFALSE 4763
// begin RemoveUnit ( HexInfo ( 83 , 141 ) ) ;
4694: LD_INT 83
4696: PPUSH
4697: LD_INT 141
4699: PPUSH
4700: CALL_OW 428
4704: PPUSH
4705: CALL_OW 64
// RemoveUnit ( HexInfo ( 78 , 133 ) ) ;
4709: LD_INT 78
4711: PPUSH
4712: LD_INT 133
4714: PPUSH
4715: CALL_OW 428
4719: PPUSH
4720: CALL_OW 64
// CreateAndPlaceBuildingXYD ( 83 , 141 , 2 ) ;
4724: LD_INT 83
4726: PPUSH
4727: LD_INT 141
4729: PPUSH
4730: LD_INT 2
4732: PPUSH
4733: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 78 , 133 , 2 ) ;
4737: LD_INT 78
4739: PPUSH
4740: LD_INT 133
4742: PPUSH
4743: LD_INT 2
4745: PPUSH
4746: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 145 , 112 , 3 ) ;
4750: LD_INT 145
4752: PPUSH
4753: LD_INT 112
4755: PPUSH
4756: LD_INT 3
4758: PPUSH
4759: CALL_OW 47
// end ; if Difficulty > 3 then
4763: LD_OWVAR 67
4767: PUSH
4768: LD_INT 3
4770: GREATER
4771: IFFALSE 4794
// begin bc_type := b_bunker ;
4773: LD_ADDR_OWVAR 42
4777: PUSH
4778: LD_INT 32
4780: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 44 , 50 , 4 ) ;
4781: LD_INT 44
4783: PPUSH
4784: LD_INT 50
4786: PPUSH
4787: LD_INT 4
4789: PPUSH
4790: CALL_OW 47
// end ; end ; dep_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
4794: LD_ADDR_VAR 0 9
4798: PUSH
4799: LD_INT 22
4801: PUSH
4802: LD_INT 3
4804: PUSH
4805: EMPTY
4806: LIST
4807: LIST
4808: PUSH
4809: LD_INT 2
4811: PUSH
4812: LD_INT 30
4814: PUSH
4815: LD_INT 0
4817: PUSH
4818: EMPTY
4819: LIST
4820: LIST
4821: PUSH
4822: LD_INT 30
4824: PUSH
4825: LD_INT 1
4827: PUSH
4828: EMPTY
4829: LIST
4830: LIST
4831: PUSH
4832: EMPTY
4833: LIST
4834: LIST
4835: LIST
4836: PUSH
4837: EMPTY
4838: LIST
4839: LIST
4840: PPUSH
4841: CALL_OW 69
4845: ST_TO_ADDR
// lab_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
4846: LD_ADDR_VAR 0 10
4850: PUSH
4851: LD_INT 22
4853: PUSH
4854: LD_INT 3
4856: PUSH
4857: EMPTY
4858: LIST
4859: LIST
4860: PUSH
4861: LD_INT 2
4863: PUSH
4864: LD_INT 30
4866: PUSH
4867: LD_INT 6
4869: PUSH
4870: EMPTY
4871: LIST
4872: LIST
4873: PUSH
4874: LD_INT 30
4876: PUSH
4877: LD_INT 7
4879: PUSH
4880: EMPTY
4881: LIST
4882: LIST
4883: PUSH
4884: LD_INT 30
4886: PUSH
4887: LD_INT 8
4889: PUSH
4890: EMPTY
4891: LIST
4892: LIST
4893: PUSH
4894: EMPTY
4895: LIST
4896: LIST
4897: LIST
4898: LIST
4899: PUSH
4900: EMPTY
4901: LIST
4902: LIST
4903: PPUSH
4904: CALL_OW 69
4908: ST_TO_ADDR
// fac_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) ;
4909: LD_ADDR_VAR 0 11
4913: PUSH
4914: LD_INT 22
4916: PUSH
4917: LD_INT 3
4919: PUSH
4920: EMPTY
4921: LIST
4922: LIST
4923: PUSH
4924: LD_INT 30
4926: PUSH
4927: LD_INT 3
4929: PUSH
4930: EMPTY
4931: LIST
4932: LIST
4933: PUSH
4934: EMPTY
4935: LIST
4936: LIST
4937: PPUSH
4938: CALL_OW 69
4942: ST_TO_ADDR
// breastworks_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) ;
4943: LD_ADDR_VAR 0 12
4947: PUSH
4948: LD_INT 22
4950: PUSH
4951: LD_INT 3
4953: PUSH
4954: EMPTY
4955: LIST
4956: LIST
4957: PUSH
4958: LD_INT 30
4960: PUSH
4961: LD_INT 31
4963: PUSH
4964: EMPTY
4965: LIST
4966: LIST
4967: PUSH
4968: EMPTY
4969: LIST
4970: LIST
4971: PPUSH
4972: CALL_OW 69
4976: ST_TO_ADDR
// bunker_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) ;
4977: LD_ADDR_VAR 0 13
4981: PUSH
4982: LD_INT 22
4984: PUSH
4985: LD_INT 3
4987: PUSH
4988: EMPTY
4989: LIST
4990: LIST
4991: PUSH
4992: LD_INT 30
4994: PUSH
4995: LD_INT 32
4997: PUSH
4998: EMPTY
4999: LIST
5000: LIST
5001: PUSH
5002: EMPTY
5003: LIST
5004: LIST
5005: PPUSH
5006: CALL_OW 69
5010: ST_TO_ADDR
// turret_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_turret ] ] ) ;
5011: LD_ADDR_VAR 0 14
5015: PUSH
5016: LD_INT 22
5018: PUSH
5019: LD_INT 3
5021: PUSH
5022: EMPTY
5023: LIST
5024: LIST
5025: PUSH
5026: LD_INT 30
5028: PUSH
5029: LD_INT 33
5031: PUSH
5032: EMPTY
5033: LIST
5034: LIST
5035: PUSH
5036: EMPTY
5037: LIST
5038: LIST
5039: PPUSH
5040: CALL_OW 69
5044: ST_TO_ADDR
// weapons_list := [ [ ru_heavy_machine_gun , 5 ] , [ ru_gatling_gun , 50 ] , [ ru_gun , 30 ] , [ ru_heavy_gun , 15 ] ] ;
5045: LD_ADDR_VAR 0 15
5049: PUSH
5050: LD_INT 42
5052: PUSH
5053: LD_INT 5
5055: PUSH
5056: EMPTY
5057: LIST
5058: LIST
5059: PUSH
5060: LD_INT 43
5062: PUSH
5063: LD_INT 50
5065: PUSH
5066: EMPTY
5067: LIST
5068: LIST
5069: PUSH
5070: LD_INT 44
5072: PUSH
5073: LD_INT 30
5075: PUSH
5076: EMPTY
5077: LIST
5078: LIST
5079: PUSH
5080: LD_INT 46
5082: PUSH
5083: LD_INT 15
5085: PUSH
5086: EMPTY
5087: LIST
5088: LIST
5089: PUSH
5090: EMPTY
5091: LIST
5092: LIST
5093: LIST
5094: LIST
5095: ST_TO_ADDR
// personel_counter := [ 0 , 4 , 6 , 3 ] ;
5096: LD_ADDR_VAR 0 16
5100: PUSH
5101: LD_INT 0
5103: PUSH
5104: LD_INT 4
5106: PUSH
5107: LD_INT 6
5109: PUSH
5110: LD_INT 3
5112: PUSH
5113: EMPTY
5114: LIST
5115: LIST
5116: LIST
5117: LIST
5118: ST_TO_ADDR
// skill := [ 4 , 5 , 6 , 7 ] [ Difficulty ] ;
5119: LD_ADDR_VAR 0 6
5123: PUSH
5124: LD_INT 4
5126: PUSH
5127: LD_INT 5
5129: PUSH
5130: LD_INT 6
5132: PUSH
5133: LD_INT 7
5135: PUSH
5136: EMPTY
5137: LIST
5138: LIST
5139: LIST
5140: LIST
5141: PUSH
5142: LD_OWVAR 67
5146: ARRAY
5147: ST_TO_ADDR
// SetBName ( ru_dep_main , am_tukh ) ;
5148: LD_INT 16
5150: PPUSH
5151: LD_STRING am_tukh
5153: PPUSH
5154: CALL_OW 500
// for i in FilterAllUnits ( [ f_type , unit_building ] ) do
5158: LD_ADDR_VAR 0 2
5162: PUSH
5163: LD_INT 21
5165: PUSH
5166: LD_INT 3
5168: PUSH
5169: EMPTY
5170: LIST
5171: LIST
5172: PPUSH
5173: CALL_OW 69
5177: PUSH
5178: FOR_IN
5179: IFFALSE 5216
// SetBLevel ( i , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
5181: LD_VAR 0 2
5185: PPUSH
5186: LD_INT 4
5188: PUSH
5189: LD_INT 5
5191: PUSH
5192: LD_INT 6
5194: PUSH
5195: LD_INT 7
5197: PUSH
5198: EMPTY
5199: LIST
5200: LIST
5201: LIST
5202: LIST
5203: PUSH
5204: LD_OWVAR 67
5208: ARRAY
5209: PPUSH
5210: CALL_OW 241
5214: GO 5178
5216: POP
5217: POP
// for i in dep_list do
5218: LD_ADDR_VAR 0 2
5222: PUSH
5223: LD_VAR 0 9
5227: PUSH
5228: FOR_IN
5229: IFFALSE 5273
// begin SetResourceType ( GetBase ( i ) , mat_cans , 1000 ) ;
5231: LD_VAR 0 2
5235: PPUSH
5236: CALL_OW 274
5240: PPUSH
5241: LD_INT 1
5243: PPUSH
5244: LD_INT 1000
5246: PPUSH
5247: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 1000 ) ;
5251: LD_VAR 0 2
5255: PPUSH
5256: CALL_OW 274
5260: PPUSH
5261: LD_INT 2
5263: PPUSH
5264: LD_INT 1000
5266: PPUSH
5267: CALL_OW 277
// end ;
5271: GO 5228
5273: POP
5274: POP
// InitHc ;
5275: CALL_OW 19
// tmp := bunker_list * [ 45 , 60 , 75 , 80 ] [ Difficulty ] div 100 ;
5279: LD_ADDR_VAR 0 8
5283: PUSH
5284: LD_VAR 0 13
5288: PUSH
5289: LD_INT 45
5291: PUSH
5292: LD_INT 60
5294: PUSH
5295: LD_INT 75
5297: PUSH
5298: LD_INT 80
5300: PUSH
5301: EMPTY
5302: LIST
5303: LIST
5304: LIST
5305: LIST
5306: PUSH
5307: LD_OWVAR 67
5311: ARRAY
5312: MUL
5313: PUSH
5314: LD_INT 100
5316: DIV
5317: ST_TO_ADDR
// personel_counter := Replace ( personel_counter , 1 , tmp ) ;
5318: LD_ADDR_VAR 0 16
5322: PUSH
5323: LD_VAR 0 16
5327: PPUSH
5328: LD_INT 1
5330: PPUSH
5331: LD_VAR 0 8
5335: PPUSH
5336: CALL_OW 1
5340: ST_TO_ADDR
// tmp := [ ] ;
5341: LD_ADDR_VAR 0 8
5345: PUSH
5346: EMPTY
5347: ST_TO_ADDR
// for i in bunker_list do
5348: LD_ADDR_VAR 0 2
5352: PUSH
5353: LD_VAR 0 13
5357: PUSH
5358: FOR_IN
5359: IFFALSE 5455
// if i mod 10 + 1 < tmp then
5361: LD_VAR 0 2
5365: PUSH
5366: LD_INT 10
5368: MOD
5369: PUSH
5370: LD_INT 1
5372: PLUS
5373: PUSH
5374: LD_VAR 0 8
5378: LESS
5379: IFFALSE 5424
// tmp := Insert ( tmp , i mod rand ( 3 , 5 ) + 1 , i ) else
5381: LD_ADDR_VAR 0 8
5385: PUSH
5386: LD_VAR 0 8
5390: PPUSH
5391: LD_VAR 0 2
5395: PUSH
5396: LD_INT 3
5398: PPUSH
5399: LD_INT 5
5401: PPUSH
5402: CALL_OW 12
5406: MOD
5407: PUSH
5408: LD_INT 1
5410: PLUS
5411: PPUSH
5412: LD_VAR 0 2
5416: PPUSH
5417: CALL_OW 2
5421: ST_TO_ADDR
5422: GO 5453
// tmp := Insert ( tmp , tmp + 1 , i ) ;
5424: LD_ADDR_VAR 0 8
5428: PUSH
5429: LD_VAR 0 8
5433: PPUSH
5434: LD_VAR 0 8
5438: PUSH
5439: LD_INT 1
5441: PLUS
5442: PPUSH
5443: LD_VAR 0 2
5447: PPUSH
5448: CALL_OW 2
5452: ST_TO_ADDR
5453: GO 5358
5455: POP
5456: POP
// bunker_list := tmp ;
5457: LD_ADDR_VAR 0 13
5461: PUSH
5462: LD_VAR 0 8
5466: ST_TO_ADDR
// for i in bunker_list ^ turret_list do
5467: LD_ADDR_VAR 0 2
5471: PUSH
5472: LD_VAR 0 13
5476: PUSH
5477: LD_VAR 0 14
5481: ADD
5482: PUSH
5483: FOR_IN
5484: IFFALSE 5507
// PlaceWeaponTurret ( i , GetTurretWeaponBase ( i ) ) ;
5486: LD_VAR 0 2
5490: PPUSH
5491: LD_VAR 0 2
5495: PPUSH
5496: CALL 2225 0 1
5500: PPUSH
5501: CALL_OW 431
5505: GO 5483
5507: POP
5508: POP
// while ( personel_counter [ 1 ] ) do
5509: LD_VAR 0 16
5513: PUSH
5514: LD_INT 1
5516: ARRAY
5517: IFFALSE 5625
// begin i := rand ( 1 , bunker_list ) ;
5519: LD_ADDR_VAR 0 2
5523: PUSH
5524: LD_INT 1
5526: PPUSH
5527: LD_VAR 0 13
5531: PPUSH
5532: CALL_OW 12
5536: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
5537: LD_INT 0
5539: PPUSH
5540: LD_INT 1
5542: PPUSH
5543: LD_VAR 0 6
5547: PPUSH
5548: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , bunker_list [ i ] ) ;
5552: CALL_OW 44
5556: PPUSH
5557: LD_VAR 0 13
5561: PUSH
5562: LD_VAR 0 2
5566: ARRAY
5567: PPUSH
5568: CALL_OW 52
// bunker_list := Delete ( bunker_list , i ) ;
5572: LD_ADDR_VAR 0 13
5576: PUSH
5577: LD_VAR 0 13
5581: PPUSH
5582: LD_VAR 0 2
5586: PPUSH
5587: CALL_OW 3
5591: ST_TO_ADDR
// personel_counter := Replace ( personel_counter , 1 , personel_counter [ 1 ] - 1 ) ;
5592: LD_ADDR_VAR 0 16
5596: PUSH
5597: LD_VAR 0 16
5601: PPUSH
5602: LD_INT 1
5604: PPUSH
5605: LD_VAR 0 16
5609: PUSH
5610: LD_INT 1
5612: ARRAY
5613: PUSH
5614: LD_INT 1
5616: MINUS
5617: PPUSH
5618: CALL_OW 1
5622: ST_TO_ADDR
// end ;
5623: GO 5509
// for i = 1 to personel_counter [ 2 ] do
5625: LD_ADDR_VAR 0 2
5629: PUSH
5630: DOUBLE
5631: LD_INT 1
5633: DEC
5634: ST_TO_ADDR
5635: LD_VAR 0 16
5639: PUSH
5640: LD_INT 2
5642: ARRAY
5643: PUSH
5644: FOR_TO
5645: IFFALSE 5676
// begin PrepareHuman ( false , 2 , skill ) ;
5647: LD_INT 0
5649: PPUSH
5650: LD_INT 2
5652: PPUSH
5653: LD_VAR 0 6
5657: PPUSH
5658: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , ru_dep_main ) ;
5662: CALL_OW 44
5666: PPUSH
5667: LD_INT 16
5669: PPUSH
5670: CALL_OW 52
// end ;
5674: GO 5644
5676: POP
5677: POP
// for i = 1 to personel_counter [ 3 ] do
5678: LD_ADDR_VAR 0 2
5682: PUSH
5683: DOUBLE
5684: LD_INT 1
5686: DEC
5687: ST_TO_ADDR
5688: LD_VAR 0 16
5692: PUSH
5693: LD_INT 3
5695: ARRAY
5696: PUSH
5697: FOR_TO
5698: IFFALSE 5745
// begin PrepareHuman ( false , 3 , skill ) ;
5700: LD_INT 0
5702: PPUSH
5703: LD_INT 3
5705: PPUSH
5706: LD_VAR 0 6
5710: PPUSH
5711: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , fac_list [ i mod 2 + 1 ] ) ;
5715: CALL_OW 44
5719: PPUSH
5720: LD_VAR 0 11
5724: PUSH
5725: LD_VAR 0 2
5729: PUSH
5730: LD_INT 2
5732: MOD
5733: PUSH
5734: LD_INT 1
5736: PLUS
5737: ARRAY
5738: PPUSH
5739: CALL_OW 52
// end ;
5743: GO 5697
5745: POP
5746: POP
// for i = 1 to personel_counter [ 4 ] do
5747: LD_ADDR_VAR 0 2
5751: PUSH
5752: DOUBLE
5753: LD_INT 1
5755: DEC
5756: ST_TO_ADDR
5757: LD_VAR 0 16
5761: PUSH
5762: LD_INT 4
5764: ARRAY
5765: PUSH
5766: FOR_TO
5767: IFFALSE 5804
// begin PrepareHuman ( false , 4 , skill ) ;
5769: LD_INT 0
5771: PPUSH
5772: LD_INT 4
5774: PPUSH
5775: LD_VAR 0 6
5779: PPUSH
5780: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , lab_list [ 1 ] ) ;
5784: CALL_OW 44
5788: PPUSH
5789: LD_VAR 0 10
5793: PUSH
5794: LD_INT 1
5796: ARRAY
5797: PPUSH
5798: CALL_OW 52
// end ;
5802: GO 5766
5804: POP
5805: POP
// for i in breastworks_list do
5806: LD_ADDR_VAR 0 2
5810: PUSH
5811: LD_VAR 0 12
5815: PUSH
5816: FOR_IN
5817: IFFALSE 5929
// begin r := GetDir ( i ) ;
5819: LD_ADDR_VAR 0 4
5823: PUSH
5824: LD_VAR 0 2
5828: PPUSH
5829: CALL_OW 254
5833: ST_TO_ADDR
// if r > 3 then
5834: LD_VAR 0 4
5838: PUSH
5839: LD_INT 3
5841: GREATER
5842: IFFALSE 5860
// r := r - 3 else
5844: LD_ADDR_VAR 0 4
5848: PUSH
5849: LD_VAR 0 4
5853: PUSH
5854: LD_INT 3
5856: MINUS
5857: ST_TO_ADDR
5858: GO 5874
// r := r + 3 ;
5860: LD_ADDR_VAR 0 4
5864: PUSH
5865: LD_VAR 0 4
5869: PUSH
5870: LD_INT 3
5872: PLUS
5873: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
5874: LD_INT 0
5876: PPUSH
5877: LD_INT 1
5879: PPUSH
5880: LD_VAR 0 6
5884: PPUSH
5885: CALL_OW 380
// un := CreateHuman ;
5889: LD_ADDR_VAR 0 5
5893: PUSH
5894: CALL_OW 44
5898: ST_TO_ADDR
// SetDir ( un , r ) ;
5899: LD_VAR 0 5
5903: PPUSH
5904: LD_VAR 0 4
5908: PPUSH
5909: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
5913: LD_VAR 0 5
5917: PPUSH
5918: LD_VAR 0 2
5922: PPUSH
5923: CALL_OW 52
// end ;
5927: GO 5816
5929: POP
5930: POP
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) ;
5931: LD_ADDR_VAR 0 8
5935: PUSH
5936: LD_INT 22
5938: PUSH
5939: LD_INT 3
5941: PUSH
5942: EMPTY
5943: LIST
5944: LIST
5945: PUSH
5946: LD_INT 25
5948: PUSH
5949: LD_INT 3
5951: PUSH
5952: EMPTY
5953: LIST
5954: LIST
5955: PUSH
5956: EMPTY
5957: LIST
5958: LIST
5959: PPUSH
5960: CALL_OW 69
5964: ST_TO_ADDR
// r := [ 4 , 5 , 6 , 6 ] [ Difficulty ] ;
5965: LD_ADDR_VAR 0 4
5969: PUSH
5970: LD_INT 4
5972: PUSH
5973: LD_INT 5
5975: PUSH
5976: LD_INT 6
5978: PUSH
5979: LD_INT 6
5981: PUSH
5982: EMPTY
5983: LIST
5984: LIST
5985: LIST
5986: LIST
5987: PUSH
5988: LD_OWVAR 67
5992: ARRAY
5993: ST_TO_ADDR
// for i = 1 to r do
5994: LD_ADDR_VAR 0 2
5998: PUSH
5999: DOUBLE
6000: LD_INT 1
6002: DEC
6003: ST_TO_ADDR
6004: LD_VAR 0 4
6008: PUSH
6009: FOR_TO
6010: IFFALSE 6183
// begin un := PrepareTank ( 3 , 3 , [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked ] [ i mod 3 + 1 ] , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_machine_gun ] [ i mod 3 + 1 ] , 100 ) ;
6012: LD_ADDR_VAR 0 5
6016: PUSH
6017: LD_INT 3
6019: PPUSH
6020: LD_INT 3
6022: PPUSH
6023: LD_INT 22
6025: PUSH
6026: LD_INT 22
6028: PUSH
6029: LD_INT 24
6031: PUSH
6032: EMPTY
6033: LIST
6034: LIST
6035: LIST
6036: PUSH
6037: LD_VAR 0 2
6041: PUSH
6042: LD_INT 3
6044: MOD
6045: PUSH
6046: LD_INT 1
6048: PLUS
6049: ARRAY
6050: PPUSH
6051: LD_INT 1
6053: PPUSH
6054: LD_INT 1
6056: PPUSH
6057: LD_INT 43
6059: PUSH
6060: LD_INT 44
6062: PUSH
6063: LD_INT 42
6065: PUSH
6066: EMPTY
6067: LIST
6068: LIST
6069: LIST
6070: PUSH
6071: LD_VAR 0 2
6075: PUSH
6076: LD_INT 3
6078: MOD
6079: PUSH
6080: LD_INT 1
6082: PLUS
6083: ARRAY
6084: PPUSH
6085: LD_INT 100
6087: PPUSH
6088: CALL 520 0 7
6092: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
6093: LD_VAR 0 5
6097: PPUSH
6098: LD_INT 0
6100: PPUSH
6101: LD_INT 5
6103: PPUSH
6104: CALL_OW 12
6108: PPUSH
6109: CALL_OW 233
// PlaceUnitArea ( un , parkingArea , false ) ;
6113: LD_VAR 0 5
6117: PPUSH
6118: LD_INT 5
6120: PPUSH
6121: LD_INT 0
6123: PPUSH
6124: CALL_OW 49
// if i > tmp - 2 then
6128: LD_VAR 0 2
6132: PUSH
6133: LD_VAR 0 8
6137: PUSH
6138: LD_INT 2
6140: MINUS
6141: GREATER
6142: IFFALSE 6146
// continue ;
6144: GO 6009
// ComExitBuilding ( tmp [ i ] ) ;
6146: LD_VAR 0 8
6150: PUSH
6151: LD_VAR 0 2
6155: ARRAY
6156: PPUSH
6157: CALL_OW 122
// AddComEnterUnit ( tmp [ i ] , un ) ;
6161: LD_VAR 0 8
6165: PUSH
6166: LD_VAR 0 2
6170: ARRAY
6171: PPUSH
6172: LD_VAR 0 5
6176: PPUSH
6177: CALL_OW 180
// end ;
6181: GO 6009
6183: POP
6184: POP
// end ;
6185: LD_VAR 0 1
6189: RET
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) do var i , filter , tmp , engs , enemy ;
6190: LD_INT 22
6192: PUSH
6193: LD_INT 3
6195: PUSH
6196: EMPTY
6197: LIST
6198: LIST
6199: PUSH
6200: LD_INT 25
6202: PUSH
6203: LD_INT 2
6205: PUSH
6206: EMPTY
6207: LIST
6208: LIST
6209: PUSH
6210: EMPTY
6211: LIST
6212: LIST
6213: PPUSH
6214: CALL_OW 69
6218: IFFALSE 6950
6220: GO 6222
6222: DISABLE
6223: LD_INT 0
6225: PPUSH
6226: PPUSH
6227: PPUSH
6228: PPUSH
6229: PPUSH
// begin enable ;
6230: ENABLE
// filter := FilterUnitsInArea ( baseArea , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
6231: LD_ADDR_VAR 0 2
6235: PUSH
6236: LD_INT 6
6238: PPUSH
6239: LD_INT 3
6241: PUSH
6242: LD_INT 24
6244: PUSH
6245: LD_INT 1000
6247: PUSH
6248: EMPTY
6249: LIST
6250: LIST
6251: PUSH
6252: EMPTY
6253: LIST
6254: LIST
6255: PUSH
6256: LD_INT 21
6258: PUSH
6259: LD_INT 3
6261: PUSH
6262: EMPTY
6263: LIST
6264: LIST
6265: PUSH
6266: EMPTY
6267: LIST
6268: LIST
6269: PPUSH
6270: CALL_OW 70
6274: ST_TO_ADDR
// engs := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
6275: LD_ADDR_VAR 0 4
6279: PUSH
6280: LD_INT 22
6282: PUSH
6283: LD_INT 3
6285: PUSH
6286: EMPTY
6287: LIST
6288: LIST
6289: PUSH
6290: LD_INT 25
6292: PUSH
6293: LD_INT 2
6295: PUSH
6296: EMPTY
6297: LIST
6298: LIST
6299: PUSH
6300: EMPTY
6301: LIST
6302: LIST
6303: PPUSH
6304: CALL_OW 69
6308: ST_TO_ADDR
// if not filter and not ru_rebuild_list then
6309: LD_VAR 0 2
6313: NOT
6314: PUSH
6315: LD_EXP 20
6319: NOT
6320: AND
6321: IFFALSE 6391
// begin for i in engs do
6323: LD_ADDR_VAR 0 1
6327: PUSH
6328: LD_VAR 0 4
6332: PUSH
6333: FOR_IN
6334: IFFALSE 6389
// if GetLives ( i ) = 1000 and not HasTask ( i ) and not IsInUnit ( i ) then
6336: LD_VAR 0 1
6340: PPUSH
6341: CALL_OW 256
6345: PUSH
6346: LD_INT 1000
6348: EQUAL
6349: PUSH
6350: LD_VAR 0 1
6354: PPUSH
6355: CALL_OW 314
6359: NOT
6360: AND
6361: PUSH
6362: LD_VAR 0 1
6366: PPUSH
6367: CALL_OW 310
6371: NOT
6372: AND
6373: IFFALSE 6387
// ComEnterUnit ( i , ru_dep_main ) ;
6375: LD_VAR 0 1
6379: PPUSH
6380: LD_INT 16
6382: PPUSH
6383: CALL_OW 120
6387: GO 6333
6389: POP
6390: POP
// end ; if UnitFilter ( engs , [ f_not , [ f_lives , 650 ] ] ) then
6391: LD_VAR 0 4
6395: PPUSH
6396: LD_INT 3
6398: PUSH
6399: LD_INT 24
6401: PUSH
6402: LD_INT 650
6404: PUSH
6405: EMPTY
6406: LIST
6407: LIST
6408: PUSH
6409: EMPTY
6410: LIST
6411: LIST
6412: PPUSH
6413: CALL_OW 72
6417: IFFALSE 6510
// begin tmp := UnitFilter ( engs , [ f_not , [ f_lives , 650 ] ] ) ;
6419: LD_ADDR_VAR 0 3
6423: PUSH
6424: LD_VAR 0 4
6428: PPUSH
6429: LD_INT 3
6431: PUSH
6432: LD_INT 24
6434: PUSH
6435: LD_INT 650
6437: PUSH
6438: EMPTY
6439: LIST
6440: LIST
6441: PUSH
6442: EMPTY
6443: LIST
6444: LIST
6445: PPUSH
6446: CALL_OW 72
6450: ST_TO_ADDR
// for i in tmp do
6451: LD_ADDR_VAR 0 1
6455: PUSH
6456: LD_VAR 0 3
6460: PUSH
6461: FOR_IN
6462: IFFALSE 6508
// if not IsInArea ( i , mainBaseArea ) then
6464: LD_VAR 0 1
6468: PPUSH
6469: LD_INT 14
6471: PPUSH
6472: CALL_OW 308
6476: NOT
6477: IFFALSE 6506
// begin ComMoveXY ( i , 129 , 125 ) ;
6479: LD_VAR 0 1
6483: PPUSH
6484: LD_INT 129
6486: PPUSH
6487: LD_INT 125
6489: PPUSH
6490: CALL_OW 111
// AddComWait ( i , 0 0$30 ) ;
6494: LD_VAR 0 1
6498: PPUSH
6499: LD_INT 1050
6501: PPUSH
6502: CALL_OW 202
// end ;
6506: GO 6461
6508: POP
6509: POP
// end ; engs := UnitFilter ( engs , [ f_lives , 650 ] ) ;
6510: LD_ADDR_VAR 0 4
6514: PUSH
6515: LD_VAR 0 4
6519: PPUSH
6520: LD_INT 24
6522: PUSH
6523: LD_INT 650
6525: PUSH
6526: EMPTY
6527: LIST
6528: LIST
6529: PPUSH
6530: CALL_OW 72
6534: ST_TO_ADDR
// if not engs then
6535: LD_VAR 0 4
6539: NOT
6540: IFFALSE 6544
// exit ;
6542: GO 6950
// if filter then
6544: LD_VAR 0 2
6548: IFFALSE 6807
// begin for i in engs do
6550: LD_ADDR_VAR 0 1
6554: PUSH
6555: LD_VAR 0 4
6559: PUSH
6560: FOR_IN
6561: IFFALSE 6585
// if IsInUnit ( i ) then
6563: LD_VAR 0 1
6567: PPUSH
6568: CALL_OW 310
6572: IFFALSE 6583
// ComExitBuilding ( i ) ;
6574: LD_VAR 0 1
6578: PPUSH
6579: CALL_OW 122
6583: GO 6560
6585: POP
6586: POP
// wait ( 3 ) ;
6587: LD_INT 3
6589: PPUSH
6590: CALL_OW 67
// if filter >= 2 and engs >= 2 then
6594: LD_VAR 0 2
6598: PUSH
6599: LD_INT 2
6601: GREATEREQUAL
6602: PUSH
6603: LD_VAR 0 4
6607: PUSH
6608: LD_INT 2
6610: GREATEREQUAL
6611: AND
6612: IFFALSE 6760
// begin for i = 1 to engs / 2 do
6614: LD_ADDR_VAR 0 1
6618: PUSH
6619: DOUBLE
6620: LD_INT 1
6622: DEC
6623: ST_TO_ADDR
6624: LD_VAR 0 4
6628: PUSH
6629: LD_INT 2
6631: DIVREAL
6632: PUSH
6633: FOR_TO
6634: IFFALSE 6680
// if not HasTask ( engs [ i ] ) then
6636: LD_VAR 0 4
6640: PUSH
6641: LD_VAR 0 1
6645: ARRAY
6646: PPUSH
6647: CALL_OW 314
6651: NOT
6652: IFFALSE 6678
// ComRepairBuilding ( engs [ i ] , filter [ 1 ] ) ;
6654: LD_VAR 0 4
6658: PUSH
6659: LD_VAR 0 1
6663: ARRAY
6664: PPUSH
6665: LD_VAR 0 2
6669: PUSH
6670: LD_INT 1
6672: ARRAY
6673: PPUSH
6674: CALL_OW 130
6678: GO 6633
6680: POP
6681: POP
// for i = engs / 2 + 1 to engs do
6682: LD_ADDR_VAR 0 1
6686: PUSH
6687: DOUBLE
6688: LD_VAR 0 4
6692: PUSH
6693: LD_INT 2
6695: DIVREAL
6696: PUSH
6697: LD_INT 1
6699: PLUS
6700: DEC
6701: ST_TO_ADDR
6702: LD_VAR 0 4
6706: PUSH
6707: FOR_TO
6708: IFFALSE 6756
// if not HasTask ( engs [ i ] ) then
6710: LD_VAR 0 4
6714: PUSH
6715: LD_VAR 0 1
6719: ARRAY
6720: PPUSH
6721: CALL_OW 314
6725: NOT
6726: IFFALSE 6754
// ComRepairBuilding ( engs [ i ] , filter [ filter ] ) ;
6728: LD_VAR 0 4
6732: PUSH
6733: LD_VAR 0 1
6737: ARRAY
6738: PPUSH
6739: LD_VAR 0 2
6743: PUSH
6744: LD_VAR 0 2
6748: ARRAY
6749: PPUSH
6750: CALL_OW 130
6754: GO 6707
6756: POP
6757: POP
// end else
6758: GO 6807
// for i in engs do
6760: LD_ADDR_VAR 0 1
6764: PUSH
6765: LD_VAR 0 4
6769: PUSH
6770: FOR_IN
6771: IFFALSE 6805
// if not HasTask ( i ) then
6773: LD_VAR 0 1
6777: PPUSH
6778: CALL_OW 314
6782: NOT
6783: IFFALSE 6803
// ComRepairBuilding ( i , filter [ 1 ] ) ;
6785: LD_VAR 0 1
6789: PPUSH
6790: LD_VAR 0 2
6794: PUSH
6795: LD_INT 1
6797: ARRAY
6798: PPUSH
6799: CALL_OW 130
6803: GO 6770
6805: POP
6806: POP
// end ; enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
6807: LD_ADDR_VAR 0 5
6811: PUSH
6812: LD_INT 81
6814: PUSH
6815: LD_INT 3
6817: PUSH
6818: EMPTY
6819: LIST
6820: LIST
6821: PPUSH
6822: CALL_OW 69
6826: ST_TO_ADDR
// if ru_rebuild_list and not filter then
6827: LD_EXP 20
6831: PUSH
6832: LD_VAR 0 2
6836: NOT
6837: AND
6838: IFFALSE 6950
// begin ComExitBuilding ( engs ) ;
6840: LD_VAR 0 4
6844: PPUSH
6845: CALL_OW 122
// if GetDistUnitXY ( NearestUnitToXY ( enemy , ru_rebuild_list [ 2 ] , ru_rebuild_list [ 3 ] ) , ru_rebuild_list [ 2 ] , ru_rebuild_list [ 3 ] ) > 10 then
6849: LD_VAR 0 5
6853: PPUSH
6854: LD_EXP 20
6858: PUSH
6859: LD_INT 2
6861: ARRAY
6862: PPUSH
6863: LD_EXP 20
6867: PUSH
6868: LD_INT 3
6870: ARRAY
6871: PPUSH
6872: CALL_OW 73
6876: PPUSH
6877: LD_EXP 20
6881: PUSH
6882: LD_INT 2
6884: ARRAY
6885: PPUSH
6886: LD_EXP 20
6890: PUSH
6891: LD_INT 3
6893: ARRAY
6894: PPUSH
6895: CALL_OW 297
6899: PUSH
6900: LD_INT 10
6902: GREATER
6903: IFFALSE 6950
// ComBuild ( engs , ru_rebuild_list [ 1 ] , ru_rebuild_list [ 2 ] , ru_rebuild_list [ 3 ] , ru_rebuild_list [ 4 ] ) ;
6905: LD_VAR 0 4
6909: PPUSH
6910: LD_EXP 20
6914: PUSH
6915: LD_INT 1
6917: ARRAY
6918: PPUSH
6919: LD_EXP 20
6923: PUSH
6924: LD_INT 2
6926: ARRAY
6927: PPUSH
6928: LD_EXP 20
6932: PUSH
6933: LD_INT 3
6935: ARRAY
6936: PPUSH
6937: LD_EXP 20
6941: PUSH
6942: LD_INT 4
6944: ARRAY
6945: PPUSH
6946: CALL_OW 145
// end ; end ;
6950: PPOPN 5
6952: END
// every 0 0$1 trigger GetLives ( ru_dep_main ) < 250 do var i , tmp ;
6953: LD_INT 16
6955: PPUSH
6956: CALL_OW 256
6960: PUSH
6961: LD_INT 250
6963: LESS
6964: IFFALSE 7154
6966: GO 6968
6968: DISABLE
6969: LD_INT 0
6971: PPUSH
6972: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_class , 1 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ;
6973: LD_ADDR_VAR 0 2
6977: PUSH
6978: LD_INT 22
6980: PUSH
6981: LD_INT 3
6983: PUSH
6984: EMPTY
6985: LIST
6986: LIST
6987: PUSH
6988: LD_INT 2
6990: PUSH
6991: LD_INT 25
6993: PUSH
6994: LD_INT 1
6996: PUSH
6997: EMPTY
6998: LIST
6999: LIST
7000: PUSH
7001: LD_INT 25
7003: PUSH
7004: LD_INT 3
7006: PUSH
7007: EMPTY
7008: LIST
7009: LIST
7010: PUSH
7011: LD_INT 25
7013: PUSH
7014: LD_INT 4
7016: PUSH
7017: EMPTY
7018: LIST
7019: LIST
7020: PUSH
7021: EMPTY
7022: LIST
7023: LIST
7024: LIST
7025: LIST
7026: PUSH
7027: EMPTY
7028: LIST
7029: LIST
7030: PPUSH
7031: CALL_OW 69
7035: ST_TO_ADDR
// ComExitBuilding ( tmp ) ;
7036: LD_VAR 0 2
7040: PPUSH
7041: CALL_OW 122
// wait ( 3 ) ;
7045: LD_INT 3
7047: PPUSH
7048: CALL_OW 67
// ComMoveXY ( tmp , 156 , 211 ) ;
7052: LD_VAR 0 2
7056: PPUSH
7057: LD_INT 156
7059: PPUSH
7060: LD_INT 211
7062: PPUSH
7063: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
7067: LD_INT 35
7069: PPUSH
7070: CALL_OW 67
// for i in tmp do
7074: LD_ADDR_VAR 0 1
7078: PUSH
7079: LD_VAR 0 2
7083: PUSH
7084: FOR_IN
7085: IFFALSE 7145
// if IsInArea ( i , escapeArea ) then
7087: LD_VAR 0 1
7091: PPUSH
7092: LD_INT 15
7094: PPUSH
7095: CALL_OW 308
7099: IFFALSE 7128
// begin RemoveUnit ( i ) ;
7101: LD_VAR 0 1
7105: PPUSH
7106: CALL_OW 64
// tmp := tmp diff i ;
7110: LD_ADDR_VAR 0 2
7114: PUSH
7115: LD_VAR 0 2
7119: PUSH
7120: LD_VAR 0 1
7124: DIFF
7125: ST_TO_ADDR
// end else
7126: GO 7143
// ComMoveXY ( i , 156 , 211 ) ;
7128: LD_VAR 0 1
7132: PPUSH
7133: LD_INT 156
7135: PPUSH
7136: LD_INT 211
7138: PPUSH
7139: CALL_OW 111
7143: GO 7084
7145: POP
7146: POP
// until not tmp ;
7147: LD_VAR 0 2
7151: NOT
7152: IFFALSE 7067
// end ;
7154: PPOPN 2
7156: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do var i , tmp , doc ;
7157: LD_INT 22
7159: PUSH
7160: LD_INT 3
7162: PUSH
7163: EMPTY
7164: LIST
7165: LIST
7166: PUSH
7167: LD_INT 25
7169: PUSH
7170: LD_INT 4
7172: PUSH
7173: EMPTY
7174: LIST
7175: LIST
7176: PUSH
7177: EMPTY
7178: LIST
7179: LIST
7180: PPUSH
7181: CALL_OW 69
7185: IFFALSE 7439
7187: GO 7189
7189: DISABLE
7190: LD_INT 0
7192: PPUSH
7193: PPUSH
7194: PPUSH
// begin enable ;
7195: ENABLE
// tmp := FilterUnitsInArea ( mainBaseArea , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
7196: LD_ADDR_VAR 0 2
7200: PUSH
7201: LD_INT 14
7203: PPUSH
7204: LD_INT 22
7206: PUSH
7207: LD_INT 3
7209: PUSH
7210: EMPTY
7211: LIST
7212: LIST
7213: PUSH
7214: LD_INT 21
7216: PUSH
7217: LD_INT 1
7219: PUSH
7220: EMPTY
7221: LIST
7222: LIST
7223: PUSH
7224: LD_INT 3
7226: PUSH
7227: LD_INT 24
7229: PUSH
7230: LD_INT 1000
7232: PUSH
7233: EMPTY
7234: LIST
7235: LIST
7236: PUSH
7237: EMPTY
7238: LIST
7239: LIST
7240: PUSH
7241: EMPTY
7242: LIST
7243: LIST
7244: LIST
7245: PPUSH
7246: CALL_OW 70
7250: ST_TO_ADDR
// doc := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) ;
7251: LD_ADDR_VAR 0 3
7255: PUSH
7256: LD_INT 22
7258: PUSH
7259: LD_INT 3
7261: PUSH
7262: EMPTY
7263: LIST
7264: LIST
7265: PUSH
7266: LD_INT 25
7268: PUSH
7269: LD_INT 4
7271: PUSH
7272: EMPTY
7273: LIST
7274: LIST
7275: PUSH
7276: EMPTY
7277: LIST
7278: LIST
7279: PPUSH
7280: CALL_OW 69
7284: ST_TO_ADDR
// if not doc then
7285: LD_VAR 0 3
7289: NOT
7290: IFFALSE 7294
// exit ;
7292: GO 7439
// if not tmp then
7294: LD_VAR 0 2
7298: NOT
7299: IFFALSE 7390
// begin if not IsInUnit ( doc [ 1 ] ) then
7301: LD_VAR 0 3
7305: PUSH
7306: LD_INT 1
7308: ARRAY
7309: PPUSH
7310: CALL_OW 310
7314: NOT
7315: IFFALSE 7388
// ComEnterUnit ( doc , FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) [ 1 ] ) ;
7317: LD_VAR 0 3
7321: PPUSH
7322: LD_INT 22
7324: PUSH
7325: LD_INT 3
7327: PUSH
7328: EMPTY
7329: LIST
7330: LIST
7331: PUSH
7332: LD_INT 2
7334: PUSH
7335: LD_INT 30
7337: PUSH
7338: LD_INT 6
7340: PUSH
7341: EMPTY
7342: LIST
7343: LIST
7344: PUSH
7345: LD_INT 30
7347: PUSH
7348: LD_INT 7
7350: PUSH
7351: EMPTY
7352: LIST
7353: LIST
7354: PUSH
7355: LD_INT 30
7357: PUSH
7358: LD_INT 8
7360: PUSH
7361: EMPTY
7362: LIST
7363: LIST
7364: PUSH
7365: EMPTY
7366: LIST
7367: LIST
7368: LIST
7369: LIST
7370: PUSH
7371: EMPTY
7372: LIST
7373: LIST
7374: PPUSH
7375: CALL_OW 69
7379: PUSH
7380: LD_INT 1
7382: ARRAY
7383: PPUSH
7384: CALL_OW 120
// exit ;
7388: GO 7439
// end ; if IsInUnit ( doc [ 1 ] ) then
7390: LD_VAR 0 3
7394: PUSH
7395: LD_INT 1
7397: ARRAY
7398: PPUSH
7399: CALL_OW 310
7403: IFFALSE 7414
// ComExitBuilding ( doc ) ;
7405: LD_VAR 0 3
7409: PPUSH
7410: CALL_OW 122
// wait ( 3 ) ;
7414: LD_INT 3
7416: PPUSH
7417: CALL_OW 67
// ComHeal ( doc , tmp [ 1 ] ) ;
7421: LD_VAR 0 3
7425: PPUSH
7426: LD_VAR 0 2
7430: PUSH
7431: LD_INT 1
7433: ARRAY
7434: PPUSH
7435: CALL_OW 128
// end ;
7439: PPOPN 3
7441: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) do var i , tmp , attacking , areas , area , mech ;
7442: LD_INT 22
7444: PUSH
7445: LD_INT 3
7447: PUSH
7448: EMPTY
7449: LIST
7450: LIST
7451: PUSH
7452: LD_INT 25
7454: PUSH
7455: LD_INT 3
7457: PUSH
7458: EMPTY
7459: LIST
7460: LIST
7461: PUSH
7462: EMPTY
7463: LIST
7464: LIST
7465: PPUSH
7466: CALL_OW 69
7470: PUSH
7471: LD_INT 22
7473: PUSH
7474: LD_INT 3
7476: PUSH
7477: EMPTY
7478: LIST
7479: LIST
7480: PUSH
7481: LD_INT 21
7483: PUSH
7484: LD_INT 2
7486: PUSH
7487: EMPTY
7488: LIST
7489: LIST
7490: PUSH
7491: EMPTY
7492: LIST
7493: LIST
7494: PPUSH
7495: CALL_OW 69
7499: AND
7500: IFFALSE 8259
7502: GO 7504
7504: DISABLE
7505: LD_INT 0
7507: PPUSH
7508: PPUSH
7509: PPUSH
7510: PPUSH
7511: PPUSH
7512: PPUSH
// begin enable ;
7513: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) ;
7514: LD_ADDR_VAR 0 2
7518: PUSH
7519: LD_INT 22
7521: PUSH
7522: LD_INT 3
7524: PUSH
7525: EMPTY
7526: LIST
7527: LIST
7528: PUSH
7529: LD_INT 21
7531: PUSH
7532: LD_INT 2
7534: PUSH
7535: EMPTY
7536: LIST
7537: LIST
7538: PUSH
7539: LD_INT 3
7541: PUSH
7542: LD_INT 58
7544: PUSH
7545: EMPTY
7546: LIST
7547: PUSH
7548: EMPTY
7549: LIST
7550: LIST
7551: PUSH
7552: EMPTY
7553: LIST
7554: LIST
7555: LIST
7556: PPUSH
7557: CALL_OW 69
7561: ST_TO_ADDR
// areas := [ sectorAlpha , sectorBeta , sectorDelta , mainBaseArea ] ;
7562: LD_ADDR_VAR 0 4
7566: PUSH
7567: LD_INT 10
7569: PUSH
7570: LD_INT 11
7572: PUSH
7573: LD_INT 12
7575: PUSH
7576: LD_INT 14
7578: PUSH
7579: EMPTY
7580: LIST
7581: LIST
7582: LIST
7583: LIST
7584: ST_TO_ADDR
// area := 0 ;
7585: LD_ADDR_VAR 0 5
7589: PUSH
7590: LD_INT 0
7592: ST_TO_ADDR
// attacking := false ;
7593: LD_ADDR_VAR 0 3
7597: PUSH
7598: LD_INT 0
7600: ST_TO_ADDR
// for i in tmp do
7601: LD_ADDR_VAR 0 1
7605: PUSH
7606: LD_VAR 0 2
7610: PUSH
7611: FOR_IN
7612: IFFALSE 8040
// begin if GetDistUnits ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) < 10 and not HasTask ( i ) and not GetTag ( i ) and GetLives ( i ) > 650 then
7614: LD_VAR 0 1
7618: PPUSH
7619: LD_INT 22
7621: PUSH
7622: LD_INT 1
7624: PUSH
7625: EMPTY
7626: LIST
7627: LIST
7628: PPUSH
7629: CALL_OW 69
7633: PPUSH
7634: LD_VAR 0 1
7638: PPUSH
7639: CALL_OW 74
7643: PPUSH
7644: CALL_OW 296
7648: PUSH
7649: LD_INT 10
7651: LESS
7652: PUSH
7653: LD_VAR 0 1
7657: PPUSH
7658: CALL_OW 314
7662: NOT
7663: AND
7664: PUSH
7665: LD_VAR 0 1
7669: PPUSH
7670: CALL_OW 110
7674: NOT
7675: AND
7676: PUSH
7677: LD_VAR 0 1
7681: PPUSH
7682: CALL_OW 256
7686: PUSH
7687: LD_INT 650
7689: GREATER
7690: AND
7691: IFFALSE 7735
// begin ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
7693: LD_VAR 0 1
7697: PPUSH
7698: LD_INT 22
7700: PUSH
7701: LD_INT 1
7703: PUSH
7704: EMPTY
7705: LIST
7706: LIST
7707: PPUSH
7708: CALL_OW 69
7712: PPUSH
7713: LD_VAR 0 1
7717: PPUSH
7718: CALL_OW 74
7722: PPUSH
7723: CALL_OW 115
// attacking := true ;
7727: LD_ADDR_VAR 0 3
7731: PUSH
7732: LD_INT 1
7734: ST_TO_ADDR
// end ; if not GetTag ( i ) and GetLives ( i ) < 650 and GetType ( i ) = unit_vehicle then
7735: LD_VAR 0 1
7739: PPUSH
7740: CALL_OW 110
7744: NOT
7745: PUSH
7746: LD_VAR 0 1
7750: PPUSH
7751: CALL_OW 256
7755: PUSH
7756: LD_INT 650
7758: LESS
7759: AND
7760: PUSH
7761: LD_VAR 0 1
7765: PPUSH
7766: CALL_OW 247
7770: PUSH
7771: LD_INT 2
7773: EQUAL
7774: AND
7775: IFFALSE 7804
// begin SetTag ( i , 1 ) ;
7777: LD_VAR 0 1
7781: PPUSH
7782: LD_INT 1
7784: PPUSH
7785: CALL_OW 109
// ComMoveXY ( i , 130 , 139 ) ;
7789: LD_VAR 0 1
7793: PPUSH
7794: LD_INT 130
7796: PPUSH
7797: LD_INT 139
7799: PPUSH
7800: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 130 , 139 ) < 6 then
7804: LD_VAR 0 1
7808: PPUSH
7809: CALL_OW 110
7813: PUSH
7814: LD_INT 1
7816: EQUAL
7817: PUSH
7818: LD_VAR 0 1
7822: PPUSH
7823: LD_INT 130
7825: PPUSH
7826: LD_INT 139
7828: PPUSH
7829: CALL_OW 297
7833: PUSH
7834: LD_INT 6
7836: LESS
7837: AND
7838: IFFALSE 7852
// SetTag ( i , 2 ) ;
7840: LD_VAR 0 1
7844: PPUSH
7845: LD_INT 2
7847: PPUSH
7848: CALL_OW 109
// if GetTag ( i ) = 2 then
7852: LD_VAR 0 1
7856: PPUSH
7857: CALL_OW 110
7861: PUSH
7862: LD_INT 2
7864: EQUAL
7865: IFFALSE 8000
// begin if GetLives ( i ) = 1000 then
7867: LD_VAR 0 1
7871: PPUSH
7872: CALL_OW 256
7876: PUSH
7877: LD_INT 1000
7879: EQUAL
7880: IFFALSE 7896
// SetTag ( i , 3 ) else
7882: LD_VAR 0 1
7886: PPUSH
7887: LD_INT 3
7889: PPUSH
7890: CALL_OW 109
7894: GO 8000
// if IsDrivenBy ( i ) then
7896: LD_VAR 0 1
7900: PPUSH
7901: CALL_OW 311
7905: IFFALSE 8000
// begin mech := IsDrivenBy ( i ) ;
7907: LD_ADDR_VAR 0 6
7911: PUSH
7912: LD_VAR 0 1
7916: PPUSH
7917: CALL_OW 311
7921: ST_TO_ADDR
// if not See ( 1 , mech ) and GetLives ( mech ) < 1000 then
7922: LD_INT 1
7924: PPUSH
7925: LD_VAR 0 6
7929: PPUSH
7930: CALL_OW 292
7934: NOT
7935: PUSH
7936: LD_VAR 0 6
7940: PPUSH
7941: CALL_OW 256
7945: PUSH
7946: LD_INT 1000
7948: LESS
7949: AND
7950: IFFALSE 7964
// SetLives ( mech , 1000 ) ;
7952: LD_VAR 0 6
7956: PPUSH
7957: LD_INT 1000
7959: PPUSH
7960: CALL_OW 234
// if not See ( 1 , i ) then
7964: LD_INT 1
7966: PPUSH
7967: LD_VAR 0 1
7971: PPUSH
7972: CALL_OW 292
7976: NOT
7977: IFFALSE 7991
// SetFuel ( i , 100 ) ;
7979: LD_VAR 0 1
7983: PPUSH
7984: LD_INT 100
7986: PPUSH
7987: CALL_OW 240
// ComRepairVehicleAndReturn ( mech ) ;
7991: LD_VAR 0 6
7995: PPUSH
7996: CALL 71349 0 1
// end ; end ; if GetTag ( i ) = 3 and IsDrivenBy ( i ) then
8000: LD_VAR 0 1
8004: PPUSH
8005: CALL_OW 110
8009: PUSH
8010: LD_INT 3
8012: EQUAL
8013: PUSH
8014: LD_VAR 0 1
8018: PPUSH
8019: CALL_OW 311
8023: AND
8024: IFFALSE 8038
// SetTag ( i , 0 ) ;
8026: LD_VAR 0 1
8030: PPUSH
8031: LD_INT 0
8033: PPUSH
8034: CALL_OW 109
// end ;
8038: GO 7611
8040: POP
8041: POP
// if attacking then
8042: LD_VAR 0 3
8046: IFFALSE 8050
// exit ;
8048: GO 8259
// if can_end and tmp then
8050: LD_EXP 6
8054: PUSH
8055: LD_VAR 0 2
8059: AND
8060: IFFALSE 8115
// begin for i in tmp do
8062: LD_ADDR_VAR 0 1
8066: PUSH
8067: LD_VAR 0 2
8071: PUSH
8072: FOR_IN
8073: IFFALSE 8111
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
8075: LD_VAR 0 1
8079: PPUSH
8080: LD_INT 22
8082: PUSH
8083: LD_INT 1
8085: PUSH
8086: EMPTY
8087: LIST
8088: LIST
8089: PPUSH
8090: CALL_OW 69
8094: PPUSH
8095: LD_VAR 0 1
8099: PPUSH
8100: CALL_OW 74
8104: PPUSH
8105: CALL_OW 115
8109: GO 8072
8111: POP
8112: POP
// exit ;
8113: GO 8259
// end ; for i in areas do
8115: LD_ADDR_VAR 0 1
8119: PUSH
8120: LD_VAR 0 4
8124: PUSH
8125: FOR_IN
8126: IFFALSE 8163
// if FilterUnitsInArea ( i , [ f_side , 1 ] ) then
8128: LD_VAR 0 1
8132: PPUSH
8133: LD_INT 22
8135: PUSH
8136: LD_INT 1
8138: PUSH
8139: EMPTY
8140: LIST
8141: LIST
8142: PPUSH
8143: CALL_OW 70
8147: IFFALSE 8161
// begin area := i ;
8149: LD_ADDR_VAR 0 5
8153: PUSH
8154: LD_VAR 0 1
8158: ST_TO_ADDR
// break ;
8159: GO 8163
// end ;
8161: GO 8125
8163: POP
8164: POP
// if area then
8165: LD_VAR 0 5
8169: IFFALSE 8259
// begin for i in tmp do
8171: LD_ADDR_VAR 0 1
8175: PUSH
8176: LD_VAR 0 2
8180: PUSH
8181: FOR_IN
8182: IFFALSE 8257
// begin if GetTag ( i ) then
8184: LD_VAR 0 1
8188: PPUSH
8189: CALL_OW 110
8193: IFFALSE 8197
// continue ;
8195: GO 8181
// if GetFuel ( i ) < 33 then
8197: LD_VAR 0 1
8201: PPUSH
8202: CALL_OW 261
8206: PUSH
8207: LD_INT 33
8209: LESS
8210: IFFALSE 8224
// SetFuel ( i , 33 ) ;
8212: LD_VAR 0 1
8216: PPUSH
8217: LD_INT 33
8219: PPUSH
8220: CALL_OW 240
// if not IsInArea ( i , area ) then
8224: LD_VAR 0 1
8228: PPUSH
8229: LD_VAR 0 5
8233: PPUSH
8234: CALL_OW 308
8238: NOT
8239: IFFALSE 8255
// ComMoveToArea ( i , area ) ;
8241: LD_VAR 0 1
8245: PPUSH
8246: LD_VAR 0 5
8250: PPUSH
8251: CALL_OW 113
// end ;
8255: GO 8181
8257: POP
8258: POP
// end ; end ;
8259: PPOPN 6
8261: END
// every 15 15$00 trigger Difficulty > 1 do var i , j , un , veh , time , count ;
8262: LD_OWVAR 67
8266: PUSH
8267: LD_INT 1
8269: GREATER
8270: IFFALSE 8555
8272: GO 8274
8274: DISABLE
8275: LD_INT 0
8277: PPUSH
8278: PPUSH
8279: PPUSH
8280: PPUSH
8281: PPUSH
8282: PPUSH
// begin uc_side := 3 ;
8283: LD_ADDR_OWVAR 20
8287: PUSH
8288: LD_INT 3
8290: ST_TO_ADDR
// uc_nation := 3 ;
8291: LD_ADDR_OWVAR 21
8295: PUSH
8296: LD_INT 3
8298: ST_TO_ADDR
// time := [ 9 9$00 , 7 7$00 , 6 6$00 , 5 5$30 ] [ Difficulty ] ;
8299: LD_ADDR_VAR 0 5
8303: PUSH
8304: LD_INT 18900
8306: PUSH
8307: LD_INT 14700
8309: PUSH
8310: LD_INT 12600
8312: PUSH
8313: LD_INT 11550
8315: PUSH
8316: EMPTY
8317: LIST
8318: LIST
8319: LIST
8320: LIST
8321: PUSH
8322: LD_OWVAR 67
8326: ARRAY
8327: ST_TO_ADDR
// count := [ 2 , 2 , 3 , 3 ] [ Difficulty ] ;
8328: LD_ADDR_VAR 0 6
8332: PUSH
8333: LD_INT 2
8335: PUSH
8336: LD_INT 2
8338: PUSH
8339: LD_INT 3
8341: PUSH
8342: LD_INT 3
8344: PUSH
8345: EMPTY
8346: LIST
8347: LIST
8348: LIST
8349: LIST
8350: PUSH
8351: LD_OWVAR 67
8355: ARRAY
8356: ST_TO_ADDR
// for i = 1 to count do
8357: LD_ADDR_VAR 0 1
8361: PUSH
8362: DOUBLE
8363: LD_INT 1
8365: DEC
8366: ST_TO_ADDR
8367: LD_VAR 0 6
8371: PUSH
8372: FOR_TO
8373: IFFALSE 8553
// begin wait ( time ) ;
8375: LD_VAR 0 5
8379: PPUSH
8380: CALL_OW 67
// for j = 1 to rand ( 1 , Difficulty ) do
8384: LD_ADDR_VAR 0 2
8388: PUSH
8389: DOUBLE
8390: LD_INT 1
8392: DEC
8393: ST_TO_ADDR
8394: LD_INT 1
8396: PPUSH
8397: LD_OWVAR 67
8401: PPUSH
8402: CALL_OW 12
8406: PUSH
8407: FOR_TO
8408: IFFALSE 8549
// begin veh := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_machine_gun ] [ i mod 3 + 1 ] , 80 ) ;
8410: LD_ADDR_VAR 0 4
8414: PUSH
8415: LD_INT 3
8417: PPUSH
8418: LD_INT 3
8420: PPUSH
8421: LD_INT 22
8423: PPUSH
8424: LD_INT 1
8426: PPUSH
8427: LD_INT 1
8429: PPUSH
8430: LD_INT 43
8432: PUSH
8433: LD_INT 44
8435: PUSH
8436: LD_INT 42
8438: PUSH
8439: EMPTY
8440: LIST
8441: LIST
8442: LIST
8443: PUSH
8444: LD_VAR 0 1
8448: PUSH
8449: LD_INT 3
8451: MOD
8452: PUSH
8453: LD_INT 1
8455: PLUS
8456: ARRAY
8457: PPUSH
8458: LD_INT 80
8460: PPUSH
8461: CALL 520 0 7
8465: ST_TO_ADDR
// PlaceUnitArea ( veh , southArea , false ) ;
8466: LD_VAR 0 4
8470: PPUSH
8471: LD_INT 13
8473: PPUSH
8474: LD_INT 0
8476: PPUSH
8477: CALL_OW 49
// PrepareHuman ( false , 3 , [ 4 , 5 , 5 ] [ Difficulty ] ) ;
8481: LD_INT 0
8483: PPUSH
8484: LD_INT 3
8486: PPUSH
8487: LD_INT 4
8489: PUSH
8490: LD_INT 5
8492: PUSH
8493: LD_INT 5
8495: PUSH
8496: EMPTY
8497: LIST
8498: LIST
8499: LIST
8500: PUSH
8501: LD_OWVAR 67
8505: ARRAY
8506: PPUSH
8507: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
8511: CALL_OW 44
8515: PPUSH
8516: LD_VAR 0 4
8520: PPUSH
8521: CALL_OW 52
// wait ( 0 0$01 ) ;
8525: LD_INT 35
8527: PPUSH
8528: CALL_OW 67
// ComMoveXY ( veh , 143 , 143 ) ;
8532: LD_VAR 0 4
8536: PPUSH
8537: LD_INT 143
8539: PPUSH
8540: LD_INT 143
8542: PPUSH
8543: CALL_OW 111
// end ;
8547: GO 8407
8549: POP
8550: POP
// end ;
8551: GO 8372
8553: POP
8554: POP
// end ;
8555: PPOPN 6
8557: END
// every 8 8$00 do var i , un , time ;
8558: GO 8560
8560: DISABLE
8561: LD_INT 0
8563: PPUSH
8564: PPUSH
8565: PPUSH
// begin time := [ 3 3$00 , 1 1$00 , 0 0$30 ] ;
8566: LD_ADDR_VAR 0 3
8570: PUSH
8571: LD_INT 6300
8573: PUSH
8574: LD_INT 2100
8576: PUSH
8577: LD_INT 1050
8579: PUSH
8580: EMPTY
8581: LIST
8582: LIST
8583: LIST
8584: ST_TO_ADDR
// wait ( time ) ;
8585: LD_VAR 0 3
8589: PPUSH
8590: CALL_OW 67
// uc_side := 3 ;
8594: LD_ADDR_OWVAR 20
8598: PUSH
8599: LD_INT 3
8601: ST_TO_ADDR
// uc_nation := 3 ;
8602: LD_ADDR_OWVAR 21
8606: PUSH
8607: LD_INT 3
8609: ST_TO_ADDR
// for i = 1 to 2 do
8610: LD_ADDR_VAR 0 1
8614: PUSH
8615: DOUBLE
8616: LD_INT 1
8618: DEC
8619: ST_TO_ADDR
8620: LD_INT 2
8622: PUSH
8623: FOR_TO
8624: IFFALSE 8687
// begin PrepareHuman ( false , 1 , 4 ) ;
8626: LD_INT 0
8628: PPUSH
8629: LD_INT 1
8631: PPUSH
8632: LD_INT 4
8634: PPUSH
8635: CALL_OW 380
// un := CreateHuman ;
8639: LD_ADDR_VAR 0 2
8643: PUSH
8644: CALL_OW 44
8648: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_dep_main ) ;
8649: LD_VAR 0 2
8653: PPUSH
8654: LD_INT 16
8656: PPUSH
8657: CALL_OW 52
// ComExitBuilding ( un ) ;
8661: LD_VAR 0 2
8665: PPUSH
8666: CALL_OW 122
// AddComAgressiveMove ( un , 41 , 76 ) ;
8670: LD_VAR 0 2
8674: PPUSH
8675: LD_INT 41
8677: PPUSH
8678: LD_INT 76
8680: PPUSH
8681: CALL_OW 174
// end ;
8685: GO 8623
8687: POP
8688: POP
// end ; end_of_file
8689: PPOPN 3
8691: END
// export function Action ; begin
8692: LD_INT 0
8694: PPUSH
// CenterNowOnXY ( 28 , 3 ) ;
8695: LD_INT 28
8697: PPUSH
8698: LD_INT 3
8700: PPUSH
8701: CALL_OW 86
// PlaceSeeing ( 41 , 76 , 1 , 10 ) ;
8705: LD_INT 41
8707: PPUSH
8708: LD_INT 76
8710: PPUSH
8711: LD_INT 1
8713: PPUSH
8714: LD_INT 10
8716: PPUSH
8717: CALL_OW 330
// RemoveSeeing ( 41 , 76 , 1 ) ;
8721: LD_INT 41
8723: PPUSH
8724: LD_INT 76
8726: PPUSH
8727: LD_INT 1
8729: PPUSH
8730: CALL_OW 331
// InGameOn ;
8734: CALL_OW 8
// SayRadio ( Harisson , D2-Har-1 ) ;
8738: LD_EXP 19
8742: PPUSH
8743: LD_STRING D2-Har-1
8745: PPUSH
8746: CALL_OW 94
// InGameOff ;
8750: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
8754: LD_STRING M1
8756: PPUSH
8757: CALL_OW 337
// end ;
8761: LD_VAR 0 1
8765: RET
// every 0 0$1 trigger buildings_counter > 1 do var un ;
8766: LD_EXP 4
8770: PUSH
8771: LD_INT 1
8773: GREATER
8774: IFFALSE 8865
8776: GO 8778
8778: DISABLE
8779: LD_INT 0
8781: PPUSH
// begin un := GetRandom ( sex_male ) [ 1 ] ;
8782: LD_ADDR_VAR 0 1
8786: PUSH
8787: LD_INT 1
8789: PPUSH
8790: CALL 608 0 1
8794: PUSH
8795: LD_INT 1
8797: ARRAY
8798: ST_TO_ADDR
// Say ( un , D2a-Sol1-1 ) ;
8799: LD_VAR 0 1
8803: PPUSH
8804: LD_STRING D2a-Sol1-1
8806: PPUSH
8807: CALL_OW 88
// if not un then
8811: LD_VAR 0 1
8815: NOT
8816: IFFALSE 8847
// begin un := GetRandom ( sex_female ) [ 1 ] ;
8818: LD_ADDR_VAR 0 1
8822: PUSH
8823: LD_INT 2
8825: PPUSH
8826: CALL 608 0 1
8830: PUSH
8831: LD_INT 1
8833: ARRAY
8834: ST_TO_ADDR
// Say ( un , D2a-FSol1-1 ) ;
8835: LD_VAR 0 1
8839: PPUSH
8840: LD_STRING D2a-FSol1-1
8842: PPUSH
8843: CALL_OW 88
// end ; if Khatam then
8847: LD_EXP 17
8851: IFFALSE 8865
// Say ( Khatam , D3b-Khat-3 ) ;
8853: LD_EXP 17
8857: PPUSH
8858: LD_STRING D3b-Khat-3
8860: PPUSH
8861: CALL_OW 88
// end ;
8865: PPOPN 1
8867: END
// every 0 0$1 trigger Frank and not Kikuchi and FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , Frank , 7 ] ] ) and IsOk ( Frank ) and not InBattle ( 1 ) and not InBattle ( 4 ) do var i , ape ;
8868: LD_EXP 15
8872: PUSH
8873: LD_EXP 18
8877: NOT
8878: AND
8879: PUSH
8880: LD_INT 22
8882: PUSH
8883: LD_INT 1
8885: PUSH
8886: EMPTY
8887: LIST
8888: LIST
8889: PUSH
8890: LD_INT 91
8892: PUSH
8893: LD_EXP 15
8897: PUSH
8898: LD_INT 7
8900: PUSH
8901: EMPTY
8902: LIST
8903: LIST
8904: LIST
8905: PUSH
8906: EMPTY
8907: LIST
8908: LIST
8909: PPUSH
8910: CALL_OW 69
8914: AND
8915: PUSH
8916: LD_EXP 15
8920: PPUSH
8921: CALL_OW 302
8925: AND
8926: PUSH
8927: LD_INT 1
8929: PPUSH
8930: CALL_OW 463
8934: NOT
8935: AND
8936: PUSH
8937: LD_INT 4
8939: PPUSH
8940: CALL_OW 463
8944: NOT
8945: AND
8946: IFFALSE 9533
8948: GO 8950
8950: DISABLE
8951: LD_INT 0
8953: PPUSH
8954: PPUSH
// begin InGameOn ;
8955: CALL_OW 8
// ape := FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) ;
8959: LD_ADDR_VAR 0 2
8963: PUSH
8964: LD_INT 22
8966: PUSH
8967: LD_INT 0
8969: PUSH
8970: EMPTY
8971: LIST
8972: LIST
8973: PUSH
8974: LD_INT 25
8976: PUSH
8977: LD_INT 12
8979: PUSH
8980: EMPTY
8981: LIST
8982: LIST
8983: PUSH
8984: EMPTY
8985: LIST
8986: LIST
8987: PPUSH
8988: CALL_OW 69
8992: ST_TO_ADDR
// ape := NearestUnitToUnit ( ape , Frank ) ;
8993: LD_ADDR_VAR 0 2
8997: PUSH
8998: LD_VAR 0 2
9002: PPUSH
9003: LD_EXP 15
9007: PPUSH
9008: CALL_OW 74
9012: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_dist , Frank , 20 ] ] ) do
9013: LD_ADDR_VAR 0 1
9017: PUSH
9018: LD_INT 22
9020: PUSH
9021: LD_INT 1
9023: PUSH
9024: EMPTY
9025: LIST
9026: LIST
9027: PUSH
9028: LD_INT 21
9030: PUSH
9031: LD_INT 1
9033: PUSH
9034: EMPTY
9035: LIST
9036: LIST
9037: PUSH
9038: LD_INT 91
9040: PUSH
9041: LD_EXP 15
9045: PUSH
9046: LD_INT 20
9048: PUSH
9049: EMPTY
9050: LIST
9051: LIST
9052: LIST
9053: PUSH
9054: EMPTY
9055: LIST
9056: LIST
9057: LIST
9058: PPUSH
9059: CALL_OW 69
9063: PUSH
9064: FOR_IN
9065: IFFALSE 9083
// ComTurnUnit ( i , Frank ) ;
9067: LD_VAR 0 1
9071: PPUSH
9072: LD_EXP 15
9076: PPUSH
9077: CALL_OW 119
9081: GO 9064
9083: POP
9084: POP
// SetSide ( Frank , 1 ) ;
9085: LD_EXP 15
9089: PPUSH
9090: LD_INT 1
9092: PPUSH
9093: CALL_OW 235
// ComMoveUnit ( JMM , Frank ) ;
9097: LD_EXP 9
9101: PPUSH
9102: LD_EXP 15
9106: PPUSH
9107: CALL_OW 112
// AddComTurnUnit ( JMM , Frank ) ;
9111: LD_EXP 9
9115: PPUSH
9116: LD_EXP 15
9120: PPUSH
9121: CALL_OW 179
// CenterOnUnits ( Frank ) ;
9125: LD_EXP 15
9129: PPUSH
9130: CALL_OW 85
// Say ( Frank , D3a-Frank-1 ) ;
9134: LD_EXP 15
9138: PPUSH
9139: LD_STRING D3a-Frank-1
9141: PPUSH
9142: CALL_OW 88
// ComMoveXY ( ape , 42 , 78 ) ;
9146: LD_VAR 0 2
9150: PPUSH
9151: LD_INT 42
9153: PPUSH
9154: LD_INT 78
9156: PPUSH
9157: CALL_OW 111
// AddComTurnUnit ( ape , Frank ) ;
9161: LD_VAR 0 2
9165: PPUSH
9166: LD_EXP 15
9170: PPUSH
9171: CALL_OW 179
// if Lisa then
9175: LD_EXP 14
9179: IFFALSE 9193
// Say ( Lisa , D3a-Lisa-1 ) ;
9181: LD_EXP 14
9185: PPUSH
9186: LD_STRING D3a-Lisa-1
9188: PPUSH
9189: CALL_OW 88
// Say ( JMM , D3a-JMM-1 ) ;
9193: LD_EXP 9
9197: PPUSH
9198: LD_STRING D3a-JMM-1
9200: PPUSH
9201: CALL_OW 88
// if Cyrus then
9205: LD_EXP 13
9209: IFFALSE 9223
// Say ( Cyrus , D3a-Cyrus-1 ) ;
9211: LD_EXP 13
9215: PPUSH
9216: LD_STRING D3a-Cyrus-1
9218: PPUSH
9219: CALL_OW 88
// if GetRandom ( sex_male ) then
9223: LD_INT 1
9225: PPUSH
9226: CALL 608 0 1
9230: IFFALSE 9251
// Say ( GetRandom ( sex_male ) [ 1 ] , D3a-Sol1-1 ) ;
9232: LD_INT 1
9234: PPUSH
9235: CALL 608 0 1
9239: PUSH
9240: LD_INT 1
9242: ARRAY
9243: PPUSH
9244: LD_STRING D3a-Sol1-1
9246: PPUSH
9247: CALL_OW 88
// if GetRandom ( sex_female ) then
9251: LD_INT 2
9253: PPUSH
9254: CALL 608 0 1
9258: IFFALSE 9279
// Say ( GetRandom ( sex_female ) [ 1 ] , D3a-FSol1-1 ) ;
9260: LD_INT 2
9262: PPUSH
9263: CALL 608 0 1
9267: PUSH
9268: LD_INT 1
9270: ARRAY
9271: PPUSH
9272: LD_STRING D3a-FSol1-1
9274: PPUSH
9275: CALL_OW 88
// if Gladstone then
9279: LD_EXP 16
9283: IFFALSE 9297
// Say ( Gladstone , D3a-Glad-1 ) ;
9285: LD_EXP 16
9289: PPUSH
9290: LD_STRING D3a-Glad-1
9292: PPUSH
9293: CALL_OW 88
// ComMoveXY ( ape , 60 , 113 ) ;
9297: LD_VAR 0 2
9301: PPUSH
9302: LD_INT 60
9304: PPUSH
9305: LD_INT 113
9307: PPUSH
9308: CALL_OW 111
// Say ( Frank , D3a-Frank-2 ) ;
9312: LD_EXP 15
9316: PPUSH
9317: LD_STRING D3a-Frank-2
9319: PPUSH
9320: CALL_OW 88
// ComTurnUnit ( Frank , JMM ) ;
9324: LD_EXP 15
9328: PPUSH
9329: LD_EXP 9
9333: PPUSH
9334: CALL_OW 119
// Say ( JMM , D3a-JMM-2 ) ;
9338: LD_EXP 9
9342: PPUSH
9343: LD_STRING D3a-JMM-2
9345: PPUSH
9346: CALL_OW 88
// RevealFogArea ( 1 , spotArea ) ;
9350: LD_INT 1
9352: PPUSH
9353: LD_INT 4
9355: PPUSH
9356: CALL_OW 332
// CenterOnXY ( 85 , 134 ) ;
9360: LD_INT 85
9362: PPUSH
9363: LD_INT 134
9365: PPUSH
9366: CALL_OW 84
// Say ( Frank , D3a-Frank-3 ) ;
9370: LD_EXP 15
9374: PPUSH
9375: LD_STRING D3a-Frank-3
9377: PPUSH
9378: CALL_OW 88
// Wait ( 0 0$01 ) ;
9382: LD_INT 35
9384: PPUSH
9385: CALL_OW 67
// CenterOnXY ( 166 , 136 ) ;
9389: LD_INT 166
9391: PPUSH
9392: LD_INT 136
9394: PPUSH
9395: CALL_OW 84
// Say ( JMM , D3a-JMM-3 ) ;
9399: LD_EXP 9
9403: PPUSH
9404: LD_STRING D3a-JMM-3
9406: PPUSH
9407: CALL_OW 88
// Wait ( 0 0$01 ) ;
9411: LD_INT 35
9413: PPUSH
9414: CALL_OW 67
// CenterNowOnUnits ( Frank ) ;
9418: LD_EXP 15
9422: PPUSH
9423: CALL_OW 87
// Say ( Frank , D3a-Frank-4 ) ;
9427: LD_EXP 15
9431: PPUSH
9432: LD_STRING D3a-Frank-4
9434: PPUSH
9435: CALL_OW 88
// if Lisa then
9439: LD_EXP 14
9443: IFFALSE 9457
// Say ( Lisa , D3a-Lisa-4 ) ;
9445: LD_EXP 14
9449: PPUSH
9450: LD_STRING D3a-Lisa-4
9452: PPUSH
9453: CALL_OW 88
// Say ( JMM , D3a-JMM-4 ) ;
9457: LD_EXP 9
9461: PPUSH
9462: LD_STRING D3a-JMM-4
9464: PPUSH
9465: CALL_OW 88
// Say ( Frank , D3a-Frank-5 ) ;
9469: LD_EXP 15
9473: PPUSH
9474: LD_STRING D3a-Frank-5
9476: PPUSH
9477: CALL_OW 88
// Say ( JMM , D3a-JMM-5 ) ;
9481: LD_EXP 9
9485: PPUSH
9486: LD_STRING D3a-JMM-5
9488: PPUSH
9489: CALL_OW 88
// Say ( Frank , D3a-Frank-6 ) ;
9493: LD_EXP 15
9497: PPUSH
9498: LD_STRING D3a-Frank-6
9500: PPUSH
9501: CALL_OW 88
// Say ( JMM , D3a-JMM-6 ) ;
9505: LD_EXP 9
9509: PPUSH
9510: LD_STRING D3a-JMM-6
9512: PPUSH
9513: CALL_OW 88
// Say ( Frank , D3a-Frank-7 ) ;
9517: LD_EXP 15
9521: PPUSH
9522: LD_STRING D3a-Frank-7
9524: PPUSH
9525: CALL_OW 88
// InGameOff ;
9529: CALL_OW 9
// end ;
9533: PPOPN 2
9535: END
// every 0 0$1 trigger Kikuchi and not Frank and FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , Kikuchi , 7 ] ] ) and IsOk ( Kikuchi ) and not InBattle ( 1 ) and not InBattle ( 4 ) do
9536: LD_EXP 18
9540: PUSH
9541: LD_EXP 15
9545: NOT
9546: AND
9547: PUSH
9548: LD_INT 22
9550: PUSH
9551: LD_INT 1
9553: PUSH
9554: EMPTY
9555: LIST
9556: LIST
9557: PUSH
9558: LD_INT 91
9560: PUSH
9561: LD_EXP 18
9565: PUSH
9566: LD_INT 7
9568: PUSH
9569: EMPTY
9570: LIST
9571: LIST
9572: LIST
9573: PUSH
9574: EMPTY
9575: LIST
9576: LIST
9577: PPUSH
9578: CALL_OW 69
9582: AND
9583: PUSH
9584: LD_EXP 18
9588: PPUSH
9589: CALL_OW 302
9593: AND
9594: PUSH
9595: LD_INT 1
9597: PPUSH
9598: CALL_OW 463
9602: NOT
9603: AND
9604: PUSH
9605: LD_INT 4
9607: PPUSH
9608: CALL_OW 463
9612: NOT
9613: AND
9614: IFFALSE 9794
9616: GO 9618
9618: DISABLE
// begin InGameOn ;
9619: CALL_OW 8
// ComTurnUnit ( JMM , Kikuchi ) ;
9623: LD_EXP 9
9627: PPUSH
9628: LD_EXP 18
9632: PPUSH
9633: CALL_OW 119
// ComTurnUnit ( Kikuchi , JMM ) ;
9637: LD_EXP 18
9641: PPUSH
9642: LD_EXP 9
9646: PPUSH
9647: CALL_OW 119
// CenterOnUnits ( Kikuchi ) ;
9651: LD_EXP 18
9655: PPUSH
9656: CALL_OW 85
// Say ( Kikuchi , D3b-Yam-1 ) ;
9660: LD_EXP 18
9664: PPUSH
9665: LD_STRING D3b-Yam-1
9667: PPUSH
9668: CALL_OW 88
// Say ( JMM , D3b-JMM-1 ) ;
9672: LD_EXP 9
9676: PPUSH
9677: LD_STRING D3b-JMM-1
9679: PPUSH
9680: CALL_OW 88
// RevealFogArea ( 1 , spotArea ) ;
9684: LD_INT 1
9686: PPUSH
9687: LD_INT 4
9689: PPUSH
9690: CALL_OW 332
// CenterOnXY ( 85 , 134 ) ;
9694: LD_INT 85
9696: PPUSH
9697: LD_INT 134
9699: PPUSH
9700: CALL_OW 84
// Say ( Kikuchi , D3b-Yam-2 ) ;
9704: LD_EXP 18
9708: PPUSH
9709: LD_STRING D3b-Yam-2
9711: PPUSH
9712: CALL_OW 88
// Wait ( 0 0$01 ) ;
9716: LD_INT 35
9718: PPUSH
9719: CALL_OW 67
// Say ( JMM , D3b-JMM-2 ) ;
9723: LD_EXP 9
9727: PPUSH
9728: LD_STRING D3b-JMM-2
9730: PPUSH
9731: CALL_OW 88
// CenterOnXY ( 166 , 136 ) ;
9735: LD_INT 166
9737: PPUSH
9738: LD_INT 136
9740: PPUSH
9741: CALL_OW 84
// Say ( Kikuchi , D3b-Yam-3 ) ;
9745: LD_EXP 18
9749: PPUSH
9750: LD_STRING D3b-Yam-3
9752: PPUSH
9753: CALL_OW 88
// CenterNowOnUnits ( JMM ) ;
9757: LD_EXP 9
9761: PPUSH
9762: CALL_OW 87
// Say ( JMM , D3b-JMM-3a ) ;
9766: LD_EXP 9
9770: PPUSH
9771: LD_STRING D3b-JMM-3a
9773: PPUSH
9774: CALL_OW 88
// SetSide ( Kikuchi , 1 ) ;
9778: LD_EXP 18
9782: PPUSH
9783: LD_INT 1
9785: PPUSH
9786: CALL_OW 235
// InGameOff ;
9790: CALL_OW 9
// end ;
9794: END
// every 0 0$1 trigger FilterUnitsInArea ( massDamageArea , [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] ] ) do var un , x , tw , i ;
9795: LD_INT 7
9797: PPUSH
9798: LD_INT 22
9800: PUSH
9801: LD_INT 1
9803: PUSH
9804: EMPTY
9805: LIST
9806: LIST
9807: PUSH
9808: LD_INT 3
9810: PUSH
9811: LD_INT 24
9813: PUSH
9814: LD_INT 1000
9816: PUSH
9817: EMPTY
9818: LIST
9819: LIST
9820: PUSH
9821: EMPTY
9822: LIST
9823: LIST
9824: PUSH
9825: EMPTY
9826: LIST
9827: LIST
9828: PPUSH
9829: CALL_OW 70
9833: IFFALSE 10289
9835: GO 9837
9837: DISABLE
9838: LD_INT 0
9840: PPUSH
9841: PPUSH
9842: PPUSH
9843: PPUSH
// begin repeat wait ( 0 0$1 ) ;
9844: LD_INT 35
9846: PPUSH
9847: CALL_OW 67
// un := FilterUnitsInArea ( massDamageArea , [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
9851: LD_ADDR_VAR 0 1
9855: PUSH
9856: LD_INT 7
9858: PPUSH
9859: LD_INT 22
9861: PUSH
9862: LD_INT 1
9864: PUSH
9865: EMPTY
9866: LIST
9867: LIST
9868: PUSH
9869: LD_INT 3
9871: PUSH
9872: LD_INT 24
9874: PUSH
9875: LD_INT 1000
9877: PUSH
9878: EMPTY
9879: LIST
9880: LIST
9881: PUSH
9882: EMPTY
9883: LIST
9884: LIST
9885: PUSH
9886: EMPTY
9887: LIST
9888: LIST
9889: PPUSH
9890: CALL_OW 70
9894: ST_TO_ADDR
// if not un then
9895: LD_VAR 0 1
9899: NOT
9900: IFFALSE 9904
// continue ;
9902: GO 9844
// tw := NearbyTowerHasEnergy ( un [ 1 ] ) ;
9904: LD_ADDR_VAR 0 3
9908: PUSH
9909: LD_VAR 0 1
9913: PUSH
9914: LD_INT 1
9916: ARRAY
9917: PPUSH
9918: CALL 2053 0 1
9922: ST_TO_ADDR
// until tw ;
9923: LD_VAR 0 3
9927: IFFALSE 9844
// DialogueOn ;
9929: CALL_OW 6
// CenterNowOnUnits ( tw ) ;
9933: LD_VAR 0 3
9937: PPUSH
9938: CALL_OW 87
// if Lisa then
9942: LD_EXP 14
9946: IFFALSE 9974
// begin Say ( Lisa , D5-Lisa-1 ) ;
9948: LD_EXP 14
9952: PPUSH
9953: LD_STRING D5-Lisa-1
9955: PPUSH
9956: CALL_OW 88
// Say ( JMM , D5-JMM-1a ) ;
9960: LD_EXP 9
9964: PPUSH
9965: LD_STRING D5-JMM-1a
9967: PPUSH
9968: CALL_OW 88
// end else
9972: GO 9986
// Say ( JMM , D5-JMM-1 ) ;
9974: LD_EXP 9
9978: PPUSH
9979: LD_STRING D5-JMM-1
9981: PPUSH
9982: CALL_OW 88
// DialogueOff ;
9986: CALL_OW 7
// while ( true ) do
9990: LD_INT 1
9992: IFFALSE 10048
// begin wait ( 0 0$01 ) ;
9994: LD_INT 35
9996: PPUSH
9997: CALL_OW 67
// x := FilterUnitsExceptArea ( northElectro , [ [ f_btype , b_oil_power ] , [ f_see , 1 ] ] ) ;
10001: LD_ADDR_VAR 0 2
10005: PUSH
10006: LD_INT 8
10008: PPUSH
10009: LD_INT 30
10011: PUSH
10012: LD_INT 26
10014: PUSH
10015: EMPTY
10016: LIST
10017: LIST
10018: PUSH
10019: LD_INT 101
10021: PUSH
10022: LD_INT 1
10024: PUSH
10025: EMPTY
10026: LIST
10027: LIST
10028: PUSH
10029: EMPTY
10030: LIST
10031: LIST
10032: PPUSH
10033: CALL_OW 71
10037: ST_TO_ADDR
// if x then
10038: LD_VAR 0 2
10042: IFFALSE 10046
// break ;
10044: GO 10048
// end ;
10046: GO 9990
// CenterOnUnits ( x [ 1 ] ) ;
10048: LD_VAR 0 2
10052: PUSH
10053: LD_INT 1
10055: ARRAY
10056: PPUSH
10057: CALL_OW 85
// if Frank and GetSide ( Frank ) = 1 then
10061: LD_EXP 15
10065: PUSH
10066: LD_EXP 15
10070: PPUSH
10071: CALL_OW 255
10075: PUSH
10076: LD_INT 1
10078: EQUAL
10079: AND
10080: IFFALSE 10096
// Say ( Frank , D5a-Frank-1 ) else
10082: LD_EXP 15
10086: PPUSH
10087: LD_STRING D5a-Frank-1
10089: PPUSH
10090: CALL_OW 88
10094: GO 10150
// if Kikuchi and GetSide ( Kikuchi ) = 1 then
10096: LD_EXP 18
10100: PUSH
10101: LD_EXP 18
10105: PPUSH
10106: CALL_OW 255
10110: PUSH
10111: LD_INT 1
10113: EQUAL
10114: AND
10115: IFFALSE 10131
// Say ( Kikuchi , D5a-Yam-1 ) else
10117: LD_EXP 18
10121: PPUSH
10122: LD_STRING D5a-Yam-1
10124: PPUSH
10125: CALL_OW 88
10129: GO 10150
// Say ( GetRandom ( sex_male ) [ 1 ] , D5a-Sol1-1 ) ;
10131: LD_INT 1
10133: PPUSH
10134: CALL 608 0 1
10138: PUSH
10139: LD_INT 1
10141: ARRAY
10142: PPUSH
10143: LD_STRING D5a-Sol1-1
10145: PPUSH
10146: CALL_OW 88
// Say ( JMM , D5a-JMM-1 ) ;
10150: LD_EXP 9
10154: PPUSH
10155: LD_STRING D5a-JMM-1
10157: PPUSH
10158: CALL_OW 88
// if Cyrus then
10162: LD_EXP 13
10166: IFFALSE 10180
// Say ( Cyrus , D5a-Cyrus-1 ) ;
10168: LD_EXP 13
10172: PPUSH
10173: LD_STRING D5a-Cyrus-1
10175: PPUSH
10176: CALL_OW 88
// x := false ;
10180: LD_ADDR_VAR 0 2
10184: PUSH
10185: LD_INT 0
10187: ST_TO_ADDR
// while ( true ) do
10188: LD_INT 1
10190: IFFALSE 10277
// begin wait ( 0 0$01 ) ;
10192: LD_INT 35
10194: PPUSH
10195: CALL_OW 67
// for i in FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) diff ru_dep_west do
10199: LD_ADDR_VAR 0 4
10203: PUSH
10204: LD_INT 2
10206: PUSH
10207: LD_INT 30
10209: PUSH
10210: LD_INT 0
10212: PUSH
10213: EMPTY
10214: LIST
10215: LIST
10216: PUSH
10217: LD_INT 30
10219: PUSH
10220: LD_INT 1
10222: PUSH
10223: EMPTY
10224: LIST
10225: LIST
10226: PUSH
10227: EMPTY
10228: LIST
10229: LIST
10230: LIST
10231: PPUSH
10232: CALL_OW 69
10236: PUSH
10237: LD_INT 1
10239: DIFF
10240: PUSH
10241: FOR_IN
10242: IFFALSE 10265
// if BaseNeedEnergy ( i ) then
10244: LD_VAR 0 4
10248: PPUSH
10249: CALL 1178 0 1
10253: IFFALSE 10263
// x := true ;
10255: LD_ADDR_VAR 0 2
10259: PUSH
10260: LD_INT 1
10262: ST_TO_ADDR
10263: GO 10241
10265: POP
10266: POP
// if x then
10267: LD_VAR 0 2
10271: IFFALSE 10275
// break ;
10273: GO 10277
// end ;
10275: GO 10188
// Say ( JMM , D5b-JMM-1 ) ;
10277: LD_EXP 9
10281: PPUSH
10282: LD_STRING D5b-JMM-1
10284: PPUSH
10285: CALL_OW 88
// end ;
10289: PPOPN 4
10291: END
// every 0 0$1 trigger time_to_end [ 1 ] < tick or FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) < 10 do
10292: LD_EXP 5
10296: PUSH
10297: LD_INT 1
10299: ARRAY
10300: PUSH
10301: LD_OWVAR 1
10305: LESS
10306: PUSH
10307: LD_INT 22
10309: PUSH
10310: LD_INT 3
10312: PUSH
10313: EMPTY
10314: LIST
10315: LIST
10316: PUSH
10317: LD_INT 21
10319: PUSH
10320: LD_INT 3
10322: PUSH
10323: EMPTY
10324: LIST
10325: LIST
10326: PUSH
10327: EMPTY
10328: LIST
10329: LIST
10330: PPUSH
10331: CALL_OW 69
10335: PUSH
10336: LD_INT 10
10338: LESS
10339: OR
10340: IFFALSE 10540
10342: GO 10344
10344: DISABLE
// begin if not IsDead ( ru_dep_main ) then
10345: LD_INT 16
10347: PPUSH
10348: CALL_OW 301
10352: NOT
10353: IFFALSE 10376
// begin SayRadio ( Harisson , D3b-Har-3 ) ;
10355: LD_EXP 19
10359: PPUSH
10360: LD_STRING D3b-Har-3
10362: PPUSH
10363: CALL_OW 94
// ChangeMissionObjectives ( M2a ) ;
10367: LD_STRING M2a
10369: PPUSH
10370: CALL_OW 337
// end else
10374: GO 10395
// begin SayRadio ( Harisson , D3b-Har-3a ) ;
10376: LD_EXP 19
10380: PPUSH
10381: LD_STRING D3b-Har-3a
10383: PPUSH
10384: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
10388: LD_STRING M2
10390: PPUSH
10391: CALL_OW 337
// end ; can_end := true ;
10395: LD_ADDR_EXP 6
10399: PUSH
10400: LD_INT 1
10402: ST_TO_ADDR
// SetAreaMapShow ( endArea , 1 ) ;
10403: LD_INT 9
10405: PPUSH
10406: LD_INT 1
10408: PPUSH
10409: CALL_OW 424
// Wait ( 0 0$02 ) ;
10413: LD_INT 70
10415: PPUSH
10416: CALL_OW 67
// if Lisa then
10420: LD_EXP 14
10424: IFFALSE 10438
// Say ( Lisa , D3b-Lisa ) ;
10426: LD_EXP 14
10430: PPUSH
10431: LD_STRING D3b-Lisa
10433: PPUSH
10434: CALL_OW 88
// if Bobby then
10438: LD_EXP 12
10442: IFFALSE 10456
// Say ( Bobby , D3b-Bobby-3 ) ;
10444: LD_EXP 12
10448: PPUSH
10449: LD_STRING D3b-Bobby-3
10451: PPUSH
10452: CALL_OW 88
// if Cyrus then
10456: LD_EXP 13
10460: IFFALSE 10474
// Say ( Cyrus , D3b-Cyrus-3 ) ;
10462: LD_EXP 13
10466: PPUSH
10467: LD_STRING D3b-Cyrus-3
10469: PPUSH
10470: CALL_OW 88
// if Frank and GetSide ( Frank ) = 1 then
10474: LD_EXP 15
10478: PUSH
10479: LD_EXP 15
10483: PPUSH
10484: CALL_OW 255
10488: PUSH
10489: LD_INT 1
10491: EQUAL
10492: AND
10493: IFFALSE 10507
// Say ( Frank , D3b-Frank-3 ) ;
10495: LD_EXP 15
10499: PPUSH
10500: LD_STRING D3b-Frank-3
10502: PPUSH
10503: CALL_OW 88
// if Kikuchi and GetSide ( Kikuchi ) = 1 then
10507: LD_EXP 18
10511: PUSH
10512: LD_EXP 18
10516: PPUSH
10517: CALL_OW 255
10521: PUSH
10522: LD_INT 1
10524: EQUAL
10525: AND
10526: IFFALSE 10540
// Say ( Kikuchi , D3b-Yam-4 ) ;
10528: LD_EXP 18
10532: PPUSH
10533: LD_STRING D3b-Yam-4
10535: PPUSH
10536: CALL_OW 88
// end ;
10540: END
// every 0 0$1 trigger time_to_end [ 2 ] < tick do
10541: LD_EXP 5
10545: PUSH
10546: LD_INT 2
10548: ARRAY
10549: PUSH
10550: LD_OWVAR 1
10554: LESS
10555: IFFALSE 10587
10557: GO 10559
10559: DISABLE
// begin SayRadio ( Harisson , D4-Har-1 ) ;
10560: LD_EXP 19
10564: PPUSH
10565: LD_STRING D4-Har-1
10567: PPUSH
10568: CALL_OW 94
// ChangeMissionObjectives ( M3 ) ;
10572: LD_STRING M3
10574: PPUSH
10575: CALL_OW 337
// must_end := true ;
10579: LD_ADDR_EXP 7
10583: PUSH
10584: LD_INT 1
10586: ST_TO_ADDR
// end ;
10587: END
// every 0 0$01 trigger time_to_end [ 3 ] < tick do
10588: LD_EXP 5
10592: PUSH
10593: LD_INT 3
10595: ARRAY
10596: PUSH
10597: LD_OWVAR 1
10601: LESS
10602: IFFALSE 10633
10604: GO 10606
10606: DISABLE
// begin if not IsDead ( ru_dep_main ) then
10607: LD_INT 16
10609: PPUSH
10610: CALL_OW 301
10614: NOT
10615: IFFALSE 10626
// YouLost ( TimeOut1 ) else
10617: LD_STRING TimeOut1
10619: PPUSH
10620: CALL_OW 104
10624: GO 10633
// YouLost ( TimeOut2 ) ;
10626: LD_STRING TimeOut2
10628: PPUSH
10629: CALL_OW 104
// end ;
10633: END
// every 0 0$1 trigger IsInArea ( JMM , endArea ) and can_end do var wait_on , i , tmp , m1 , m2 , m3 ;
10634: LD_EXP 9
10638: PPUSH
10639: LD_INT 9
10641: PPUSH
10642: CALL_OW 308
10646: PUSH
10647: LD_EXP 6
10651: AND
10652: IFFALSE 11752
10654: GO 10656
10656: DISABLE
10657: LD_INT 0
10659: PPUSH
10660: PPUSH
10661: PPUSH
10662: PPUSH
10663: PPUSH
10664: PPUSH
// begin wait_on := false ;
10665: LD_ADDR_VAR 0 1
10669: PUSH
10670: LD_INT 0
10672: ST_TO_ADDR
// if FilterPeople ( 1 ) + 0 > ( FilterPeopleArea ( 1 , endArea ) ^ FilterDriversArea ( 1 , endArea ) ) + 0 then
10673: LD_INT 1
10675: PPUSH
10676: CALL 1255 0 1
10680: PUSH
10681: LD_INT 0
10683: PLUS
10684: PUSH
10685: LD_INT 1
10687: PPUSH
10688: LD_INT 9
10690: PPUSH
10691: CALL 1346 0 2
10695: PUSH
10696: LD_INT 1
10698: PPUSH
10699: LD_INT 9
10701: PPUSH
10702: CALL 1393 0 2
10706: ADD
10707: PUSH
10708: LD_INT 0
10710: PLUS
10711: GREATER
10712: IFFALSE 10761
// case Query ( Q1 ) of 1 :
10714: LD_STRING Q1
10716: PPUSH
10717: CALL_OW 97
10721: PUSH
10722: LD_INT 1
10724: DOUBLE
10725: EQUAL
10726: IFTRUE 10730
10728: GO 10741
10730: POP
// wait_on := true ; 2 :
10731: LD_ADDR_VAR 0 1
10735: PUSH
10736: LD_INT 1
10738: ST_TO_ADDR
10739: GO 10761
10741: LD_INT 2
10743: DOUBLE
10744: EQUAL
10745: IFTRUE 10749
10747: GO 10760
10749: POP
// wait_on := false ; end ;
10750: LD_ADDR_VAR 0 1
10754: PUSH
10755: LD_INT 0
10757: ST_TO_ADDR
10758: GO 10761
10760: POP
// repeat wait ( 0 0$01 ) ;
10761: LD_INT 35
10763: PPUSH
10764: CALL_OW 67
// until ( not wait_on ) or ( FilterPeople ( 1 ) + 0 ) = ( FilterPeopleArea ( 1 , endArea ) ^ FilterDriversArea ( 1 , endArea ) ) + 0 ;
10768: LD_VAR 0 1
10772: NOT
10773: PUSH
10774: LD_INT 1
10776: PPUSH
10777: CALL 1255 0 1
10781: PUSH
10782: LD_INT 0
10784: PLUS
10785: PUSH
10786: LD_INT 1
10788: PPUSH
10789: LD_INT 9
10791: PPUSH
10792: CALL 1346 0 2
10796: PUSH
10797: LD_INT 1
10799: PPUSH
10800: LD_INT 9
10802: PPUSH
10803: CALL 1393 0 2
10807: ADD
10808: PUSH
10809: LD_INT 0
10811: PLUS
10812: EQUAL
10813: OR
10814: IFFALSE 10761
// DialogueOn ;
10816: CALL_OW 6
// CenterNowOnUnits ( JMM ) ;
10820: LD_EXP 9
10824: PPUSH
10825: CALL_OW 87
// Say ( JMM , D6-JMM-1 ) ;
10829: LD_EXP 9
10833: PPUSH
10834: LD_STRING D6-JMM-1
10836: PPUSH
10837: CALL_OW 88
// SayRadio ( Harisson , D6-Har-1 ) ;
10841: LD_EXP 19
10845: PPUSH
10846: LD_STRING D6-Har-1
10848: PPUSH
10849: CALL_OW 94
// Say ( JMM , D6-JMM-2 ) ;
10853: LD_EXP 9
10857: PPUSH
10858: LD_STRING D6-JMM-2
10860: PPUSH
10861: CALL_OW 88
// SayRadio ( Harisson , D6-Har-2 ) ;
10865: LD_EXP 19
10869: PPUSH
10870: LD_STRING D6-Har-2
10872: PPUSH
10873: CALL_OW 94
// Say ( JMM , D6-JMM-3 ) ;
10877: LD_EXP 9
10881: PPUSH
10882: LD_STRING D6-JMM-3
10884: PPUSH
10885: CALL_OW 88
// SayRadio ( Harisson , D6-Har-3 ) ;
10889: LD_EXP 19
10893: PPUSH
10894: LD_STRING D6-Har-3
10896: PPUSH
10897: CALL_OW 94
// Say ( JMM , D6-JMM-4 ) ;
10901: LD_EXP 9
10905: PPUSH
10906: LD_STRING D6-JMM-4
10908: PPUSH
10909: CALL_OW 88
// SayRadio ( Harisson , D6-Har-4 ) ;
10913: LD_EXP 19
10917: PPUSH
10918: LD_STRING D6-Har-4
10920: PPUSH
10921: CALL_OW 94
// Say ( JMM , D6-JMM-5 ) ;
10925: LD_EXP 9
10929: PPUSH
10930: LD_STRING D6-JMM-5
10932: PPUSH
10933: CALL_OW 88
// DialogueOff ;
10937: CALL_OW 7
// m1 := false ;
10941: LD_ADDR_VAR 0 4
10945: PUSH
10946: LD_INT 0
10948: ST_TO_ADDR
// m2 := false ;
10949: LD_ADDR_VAR 0 5
10953: PUSH
10954: LD_INT 0
10956: ST_TO_ADDR
// m3 := false ;
10957: LD_ADDR_VAR 0 6
10961: PUSH
10962: LD_INT 0
10964: ST_TO_ADDR
// tmp := FilterBuildings ( 3 ) ;
10965: LD_ADDR_VAR 0 3
10969: PUSH
10970: LD_INT 3
10972: PPUSH
10973: CALL 1524 0 1
10977: ST_TO_ADDR
// if tmp >= 35 then
10978: LD_VAR 0 3
10982: PUSH
10983: LD_INT 35
10985: GREATEREQUAL
10986: IFFALSE 11023
// begin AddMedal ( Destroy1 , - 1 ) ;
10988: LD_STRING Destroy1
10990: PPUSH
10991: LD_INT 1
10993: NEG
10994: PPUSH
10995: CALL_OW 101
// AddMedal ( Destroy2 , - 1 ) ;
10999: LD_STRING Destroy2
11001: PPUSH
11002: LD_INT 1
11004: NEG
11005: PPUSH
11006: CALL_OW 101
// AddMedal ( Destroy3 , - 1 ) ;
11010: LD_STRING Destroy3
11012: PPUSH
11013: LD_INT 1
11015: NEG
11016: PPUSH
11017: CALL_OW 101
// end else
11021: GO 11134
// begin AddMedal ( Destroy1 , 1 ) ;
11023: LD_STRING Destroy1
11025: PPUSH
11026: LD_INT 1
11028: PPUSH
11029: CALL_OW 101
// m1 := true ;
11033: LD_ADDR_VAR 0 4
11037: PUSH
11038: LD_INT 1
11040: ST_TO_ADDR
// if tmp >= 25 then
11041: LD_VAR 0 3
11045: PUSH
11046: LD_INT 25
11048: GREATEREQUAL
11049: IFFALSE 11075
// begin AddMedal ( Destroy2 , - 1 ) ;
11051: LD_STRING Destroy2
11053: PPUSH
11054: LD_INT 1
11056: NEG
11057: PPUSH
11058: CALL_OW 101
// AddMedal ( Destroy3 , - 1 ) ;
11062: LD_STRING Destroy3
11064: PPUSH
11065: LD_INT 1
11067: NEG
11068: PPUSH
11069: CALL_OW 101
// end else
11073: GO 11134
// begin AddMedal ( Destroy2 , 1 ) ;
11075: LD_STRING Destroy2
11077: PPUSH
11078: LD_INT 1
11080: PPUSH
11081: CALL_OW 101
// m2 := true ;
11085: LD_ADDR_VAR 0 5
11089: PUSH
11090: LD_INT 1
11092: ST_TO_ADDR
// if tmp >= 15 then
11093: LD_VAR 0 3
11097: PUSH
11098: LD_INT 15
11100: GREATEREQUAL
11101: IFFALSE 11116
// AddMedal ( Destroy3 , - 1 ) else
11103: LD_STRING Destroy3
11105: PPUSH
11106: LD_INT 1
11108: NEG
11109: PPUSH
11110: CALL_OW 101
11114: GO 11134
// begin AddMedal ( Destroy3 , 1 ) ;
11116: LD_STRING Destroy3
11118: PPUSH
11119: LD_INT 1
11121: PPUSH
11122: CALL_OW 101
// m3 := true ;
11126: LD_ADDR_VAR 0 6
11130: PUSH
11131: LD_INT 1
11133: ST_TO_ADDR
// end ; end ; end ; if tick <= 32 32$00 then
11134: LD_OWVAR 1
11138: PUSH
11139: LD_INT 67200
11141: LESSEQUAL
11142: IFFALSE 11151
// SetAchievement ( ACH_ASPEED_7 ) ;
11144: LD_STRING ACH_ASPEED_7
11146: PPUSH
11147: CALL_OW 543
// if m1 and m2 and m3 and Difficulty >= 3 then
11151: LD_VAR 0 4
11155: PUSH
11156: LD_VAR 0 5
11160: AND
11161: PUSH
11162: LD_VAR 0 6
11166: AND
11167: PUSH
11168: LD_OWVAR 67
11172: PUSH
11173: LD_INT 3
11175: GREATEREQUAL
11176: AND
11177: IFFALSE 11189
// SetAchievementEX ( ACH_AMER , 7 ) ;
11179: LD_STRING ACH_AMER
11181: PPUSH
11182: LD_INT 7
11184: PPUSH
11185: CALL_OW 564
// GiveMedals ( MAIN ) ;
11189: LD_STRING MAIN
11191: PPUSH
11192: CALL_OW 102
// tmp := FilterPeopleArea ( 1 , endArea ) union FilterDriversArea ( 1 , endArea ) ;
11196: LD_ADDR_VAR 0 3
11200: PUSH
11201: LD_INT 1
11203: PPUSH
11204: LD_INT 9
11206: PPUSH
11207: CALL 1346 0 2
11211: PUSH
11212: LD_INT 1
11214: PPUSH
11215: LD_INT 9
11217: PPUSH
11218: CALL 1393 0 2
11222: UNION
11223: ST_TO_ADDR
// RewardPeople ( tmp ) ;
11224: LD_VAR 0 3
11228: PPUSH
11229: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
11233: LD_EXP 9
11237: PPUSH
11238: LD_EXP 3
11242: PUSH
11243: LD_STRING JMM
11245: STR
11246: PPUSH
11247: CALL_OW 38
// if Brown in tmp then
11251: LD_EXP 10
11255: PUSH
11256: LD_VAR 0 3
11260: IN
11261: IFFALSE 11281
// SaveCharacters ( Brown , mission_prefix & Brown ) ;
11263: LD_EXP 10
11267: PPUSH
11268: LD_EXP 3
11272: PUSH
11273: LD_STRING Brown
11275: STR
11276: PPUSH
11277: CALL_OW 38
// if Donaldson in tmp then
11281: LD_EXP 11
11285: PUSH
11286: LD_VAR 0 3
11290: IN
11291: IFFALSE 11311
// SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
11293: LD_EXP 11
11297: PPUSH
11298: LD_EXP 3
11302: PUSH
11303: LD_STRING Donaldson
11305: STR
11306: PPUSH
11307: CALL_OW 38
// if Bobby in tmp then
11311: LD_EXP 12
11315: PUSH
11316: LD_VAR 0 3
11320: IN
11321: IFFALSE 11341
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
11323: LD_EXP 12
11327: PPUSH
11328: LD_EXP 3
11332: PUSH
11333: LD_STRING Bobby
11335: STR
11336: PPUSH
11337: CALL_OW 38
// if Cyrus in tmp then
11341: LD_EXP 13
11345: PUSH
11346: LD_VAR 0 3
11350: IN
11351: IFFALSE 11371
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
11353: LD_EXP 13
11357: PPUSH
11358: LD_EXP 3
11362: PUSH
11363: LD_STRING Cyrus
11365: STR
11366: PPUSH
11367: CALL_OW 38
// if Lisa in tmp then
11371: LD_EXP 14
11375: PUSH
11376: LD_VAR 0 3
11380: IN
11381: IFFALSE 11401
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
11383: LD_EXP 14
11387: PPUSH
11388: LD_EXP 3
11392: PUSH
11393: LD_STRING Lisa
11395: STR
11396: PPUSH
11397: CALL_OW 38
// if Frank in tmp then
11401: LD_EXP 15
11405: PUSH
11406: LD_VAR 0 3
11410: IN
11411: IFFALSE 11431
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
11413: LD_EXP 15
11417: PPUSH
11418: LD_EXP 3
11422: PUSH
11423: LD_STRING Frank
11425: STR
11426: PPUSH
11427: CALL_OW 38
// if Gladstone in tmp then
11431: LD_EXP 16
11435: PUSH
11436: LD_VAR 0 3
11440: IN
11441: IFFALSE 11461
// SaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
11443: LD_EXP 16
11447: PPUSH
11448: LD_EXP 3
11452: PUSH
11453: LD_STRING Gladstone
11455: STR
11456: PPUSH
11457: CALL_OW 38
// if Khatam in tmp then
11461: LD_EXP 17
11465: PUSH
11466: LD_VAR 0 3
11470: IN
11471: IFFALSE 11491
// SaveCharacters ( Khatam , mission_prefix & Khatam ) ;
11473: LD_EXP 17
11477: PPUSH
11478: LD_EXP 3
11482: PUSH
11483: LD_STRING Khatam
11485: STR
11486: PPUSH
11487: CALL_OW 38
// if Kikuchi in tmp then
11491: LD_EXP 18
11495: PUSH
11496: LD_VAR 0 3
11500: IN
11501: IFFALSE 11521
// SaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
11503: LD_EXP 18
11507: PPUSH
11508: LD_EXP 3
11512: PUSH
11513: LD_STRING Kikuchi
11515: STR
11516: PPUSH
11517: CALL_OW 38
// SaveCharacters ( tmp diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam ] , mission_prefix & others ) ;
11521: LD_VAR 0 3
11525: PUSH
11526: LD_EXP 9
11530: PUSH
11531: LD_EXP 10
11535: PUSH
11536: LD_EXP 11
11540: PUSH
11541: LD_EXP 12
11545: PUSH
11546: LD_EXP 13
11550: PUSH
11551: LD_EXP 14
11555: PUSH
11556: LD_EXP 15
11560: PUSH
11561: LD_EXP 16
11565: PUSH
11566: LD_EXP 18
11570: PUSH
11571: LD_EXP 17
11575: PUSH
11576: EMPTY
11577: LIST
11578: LIST
11579: LIST
11580: LIST
11581: LIST
11582: LIST
11583: LIST
11584: LIST
11585: LIST
11586: LIST
11587: DIFF
11588: PPUSH
11589: LD_EXP 3
11593: PUSH
11594: LD_STRING others
11596: STR
11597: PPUSH
11598: CALL_OW 38
// SaveVariable ( tick , 07_time ) ;
11602: LD_OWVAR 1
11606: PPUSH
11607: LD_STRING 07_time
11609: PPUSH
11610: CALL_OW 39
// tmp := [ ] ;
11614: LD_ADDR_VAR 0 3
11618: PUSH
11619: EMPTY
11620: ST_TO_ADDR
// for i in FilterUnitsInArea ( endArea , [ [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_vehicle ] ] ] ) do
11621: LD_ADDR_VAR 0 2
11625: PUSH
11626: LD_INT 9
11628: PPUSH
11629: LD_INT 22
11631: PUSH
11632: LD_INT 1
11634: PUSH
11635: EMPTY
11636: LIST
11637: LIST
11638: PUSH
11639: LD_INT 23
11641: PUSH
11642: LD_INT 1
11644: PUSH
11645: EMPTY
11646: LIST
11647: LIST
11648: PUSH
11649: LD_INT 21
11651: PUSH
11652: LD_INT 2
11654: PUSH
11655: EMPTY
11656: LIST
11657: LIST
11658: PUSH
11659: EMPTY
11660: LIST
11661: LIST
11662: LIST
11663: PUSH
11664: EMPTY
11665: LIST
11666: PPUSH
11667: CALL_OW 70
11671: PUSH
11672: FOR_IN
11673: IFFALSE 11734
// tmp := tmp ^ [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ;
11675: LD_ADDR_VAR 0 3
11679: PUSH
11680: LD_VAR 0 3
11684: PUSH
11685: LD_VAR 0 2
11689: PPUSH
11690: CALL_OW 265
11694: PUSH
11695: LD_VAR 0 2
11699: PPUSH
11700: CALL_OW 262
11704: PUSH
11705: LD_VAR 0 2
11709: PPUSH
11710: CALL_OW 263
11714: PUSH
11715: LD_VAR 0 2
11719: PPUSH
11720: CALL_OW 264
11724: PUSH
11725: EMPTY
11726: LIST
11727: LIST
11728: LIST
11729: LIST
11730: ADD
11731: ST_TO_ADDR
11732: GO 11672
11734: POP
11735: POP
// SaveVariable ( tmp , 07_vehicles ) ;
11736: LD_VAR 0 3
11740: PPUSH
11741: LD_STRING 07_vehicles
11743: PPUSH
11744: CALL_OW 39
// YouWin ;
11748: CALL_OW 103
// end ; end_of_file
11752: PPOPN 6
11754: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
11755: LD_VAR 0 1
11759: PPUSH
11760: CALL 27911 0 1
// if un = JMM then
11764: LD_VAR 0 1
11768: PUSH
11769: LD_EXP 9
11773: EQUAL
11774: IFFALSE 11783
// YouLost ( JMM ) ;
11776: LD_STRING JMM
11778: PPUSH
11779: CALL_OW 104
// if GetType ( un ) = unit_building then
11783: LD_VAR 0 1
11787: PPUSH
11788: CALL_OW 247
11792: PUSH
11793: LD_INT 3
11795: EQUAL
11796: IFFALSE 11812
// buildings_counter := buildings_counter + 1 ;
11798: LD_ADDR_EXP 4
11802: PUSH
11803: LD_EXP 4
11807: PUSH
11808: LD_INT 1
11810: PLUS
11811: ST_TO_ADDR
// if un in FilterUnitsInArea ( baseArea , [ f_or , [ f_btype , b_turret ] , [ f_btype , b_bunker ] ] ) then
11812: LD_VAR 0 1
11816: PUSH
11817: LD_INT 6
11819: PPUSH
11820: LD_INT 2
11822: PUSH
11823: LD_INT 30
11825: PUSH
11826: LD_INT 33
11828: PUSH
11829: EMPTY
11830: LIST
11831: LIST
11832: PUSH
11833: LD_INT 30
11835: PUSH
11836: LD_INT 32
11838: PUSH
11839: EMPTY
11840: LIST
11841: LIST
11842: PUSH
11843: EMPTY
11844: LIST
11845: LIST
11846: LIST
11847: PPUSH
11848: CALL_OW 70
11852: IN
11853: IFFALSE 11912
// ru_rebuild_list := ru_rebuild_list ^ [ GetBType ( un ) , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ;
11855: LD_ADDR_EXP 20
11859: PUSH
11860: LD_EXP 20
11864: PUSH
11865: LD_VAR 0 1
11869: PPUSH
11870: CALL_OW 266
11874: PUSH
11875: LD_VAR 0 1
11879: PPUSH
11880: CALL_OW 250
11884: PUSH
11885: LD_VAR 0 1
11889: PPUSH
11890: CALL_OW 251
11894: PUSH
11895: LD_VAR 0 1
11899: PPUSH
11900: CALL_OW 254
11904: PUSH
11905: EMPTY
11906: LIST
11907: LIST
11908: LIST
11909: LIST
11910: ADD
11911: ST_TO_ADDR
// if un = ru_dep_main then
11912: LD_VAR 0 1
11916: PUSH
11917: LD_INT 16
11919: EQUAL
11920: IFFALSE 11929
// ChangeMissionObjectives ( M1a ) ;
11922: LD_STRING M1a
11924: PPUSH
11925: CALL_OW 337
// if GetType ( un ) = unit_human and GetSide ( un ) = 3 then
11929: LD_VAR 0 1
11933: PPUSH
11934: CALL_OW 247
11938: PUSH
11939: LD_INT 1
11941: EQUAL
11942: PUSH
11943: LD_VAR 0 1
11947: PPUSH
11948: CALL_OW 255
11952: PUSH
11953: LD_INT 3
11955: EQUAL
11956: AND
11957: IFFALSE 11973
// kill_counter := kill_counter + 1 ;
11959: LD_ADDR_EXP 8
11963: PUSH
11964: LD_EXP 8
11968: PUSH
11969: LD_INT 1
11971: PLUS
11972: ST_TO_ADDR
// end ;
11973: PPOPN 1
11975: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
11976: LD_VAR 0 1
11980: PPUSH
11981: LD_VAR 0 2
11985: PPUSH
11986: CALL 28031 0 2
// end ;
11990: PPOPN 2
11992: END
// on UnitGoesToRed ( un ) do begin if GetBType ( un ) = b_bunker and GetTag ( un ) = 7 then
11993: LD_VAR 0 1
11997: PPUSH
11998: CALL_OW 266
12002: PUSH
12003: LD_INT 32
12005: EQUAL
12006: PUSH
12007: LD_VAR 0 1
12011: PPUSH
12012: CALL_OW 110
12016: PUSH
12017: LD_INT 7
12019: EQUAL
12020: AND
12021: IFFALSE 12035
// SetTag ( un , 0 ) ;
12023: LD_VAR 0 1
12027: PPUSH
12028: LD_INT 0
12030: PPUSH
12031: CALL_OW 109
// end ;
12035: PPOPN 1
12037: END
// on BuildingStarted ( b , builder ) do var i ;
12038: LD_INT 0
12040: PPUSH
// begin if GetSide ( b ) = 3 then
12041: LD_VAR 0 1
12045: PPUSH
12046: CALL_OW 255
12050: PUSH
12051: LD_INT 3
12053: EQUAL
12054: IFFALSE 12094
// for i = 1 to 4 do
12056: LD_ADDR_VAR 0 3
12060: PUSH
12061: DOUBLE
12062: LD_INT 1
12064: DEC
12065: ST_TO_ADDR
12066: LD_INT 4
12068: PUSH
12069: FOR_TO
12070: IFFALSE 12092
// ru_rebuild_list := Delete ( ru_rebuild_list , 1 ) ;
12072: LD_ADDR_EXP 20
12076: PUSH
12077: LD_EXP 20
12081: PPUSH
12082: LD_INT 1
12084: PPUSH
12085: CALL_OW 3
12089: ST_TO_ADDR
12090: GO 12069
12092: POP
12093: POP
// end ;
12094: PPOPN 3
12096: END
// on BuildingComplete ( b ) do if GetBType ( b ) in [ b_bunker , b_turret ] then
12097: LD_VAR 0 1
12101: PPUSH
12102: CALL_OW 266
12106: PUSH
12107: LD_INT 32
12109: PUSH
12110: LD_INT 33
12112: PUSH
12113: EMPTY
12114: LIST
12115: LIST
12116: IN
12117: IFFALSE 12131
// ComPlaceWeapon ( b , ru_gatling_gun ) ;
12119: LD_VAR 0 1
12123: PPUSH
12124: LD_INT 43
12126: PPUSH
12127: CALL_OW 148
12131: PPOPN 1
12133: END
// on LeaveBuilding ( b , un ) do begin if b in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) then
12134: LD_VAR 0 1
12138: PUSH
12139: LD_INT 22
12141: PUSH
12142: LD_INT 3
12144: PUSH
12145: EMPTY
12146: LIST
12147: LIST
12148: PUSH
12149: LD_INT 2
12151: PUSH
12152: LD_INT 30
12154: PUSH
12155: LD_INT 31
12157: PUSH
12158: EMPTY
12159: LIST
12160: LIST
12161: PUSH
12162: LD_INT 30
12164: PUSH
12165: LD_INT 32
12167: PUSH
12168: EMPTY
12169: LIST
12170: LIST
12171: PUSH
12172: EMPTY
12173: LIST
12174: LIST
12175: LIST
12176: PUSH
12177: EMPTY
12178: LIST
12179: LIST
12180: PPUSH
12181: CALL_OW 69
12185: IN
12186: IFFALSE 12208
// GoToAnotherTower ( un , b , 134 , 136 ) ;
12188: LD_VAR 0 2
12192: PPUSH
12193: LD_VAR 0 1
12197: PPUSH
12198: LD_INT 134
12200: PPUSH
12201: LD_INT 136
12203: PPUSH
12204: CALL 838 0 4
// end ;
12208: PPOPN 2
12210: END
// on EnterBuilding ( b , un ) do begin if b in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) then
12211: LD_VAR 0 1
12215: PUSH
12216: LD_INT 22
12218: PUSH
12219: LD_INT 3
12221: PUSH
12222: EMPTY
12223: LIST
12224: LIST
12225: PUSH
12226: LD_INT 30
12228: PUSH
12229: LD_INT 32
12231: PUSH
12232: EMPTY
12233: LIST
12234: LIST
12235: PUSH
12236: EMPTY
12237: LIST
12238: LIST
12239: PPUSH
12240: CALL_OW 69
12244: IN
12245: IFFALSE 12259
// SetTag ( b , 0 ) ;
12247: LD_VAR 0 1
12251: PPUSH
12252: LD_INT 0
12254: PPUSH
12255: CALL_OW 109
// end ; end_of_file end_of_file
12259: PPOPN 2
12261: END
// every 0 0$1 do
12262: GO 12264
12264: DISABLE
// begin enable ;
12265: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
12266: LD_STRING updateTimer(
12268: PUSH
12269: LD_OWVAR 1
12273: STR
12274: PUSH
12275: LD_STRING );
12277: STR
12278: PPUSH
12279: CALL_OW 559
// end ;
12283: END
// export function SOS_MapStart ( ) ; begin
12284: LD_INT 0
12286: PPUSH
// if streamModeActive then
12287: LD_EXP 21
12291: IFFALSE 12300
// DefineStreamItems ( true ) ;
12293: LD_INT 1
12295: PPUSH
12296: CALL 13954 0 1
// UpdateFactoryWaypoints ( ) ;
12300: CALL 26815 0 0
// UpdateWarehouseGatheringPoints ( ) ;
12304: CALL 27072 0 0
// end ;
12308: LD_VAR 0 1
12312: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
12313: LD_INT 0
12315: PPUSH
// if p2 = hack_mode then
12316: LD_VAR 0 2
12320: PUSH
12321: LD_INT 100
12323: EQUAL
12324: IFFALSE 13327
// begin if not StreamModeActive then
12326: LD_EXP 21
12330: NOT
12331: IFFALSE 12341
// StreamModeActive := true ;
12333: LD_ADDR_EXP 21
12337: PUSH
12338: LD_INT 1
12340: ST_TO_ADDR
// if p3 = 0 then
12341: LD_VAR 0 3
12345: PUSH
12346: LD_INT 0
12348: EQUAL
12349: IFFALSE 12355
// InitStreamMode ;
12351: CALL 13490 0 0
// if p3 = 1 then
12355: LD_VAR 0 3
12359: PUSH
12360: LD_INT 1
12362: EQUAL
12363: IFFALSE 12373
// sRocket := true ;
12365: LD_ADDR_EXP 26
12369: PUSH
12370: LD_INT 1
12372: ST_TO_ADDR
// if p3 = 2 then
12373: LD_VAR 0 3
12377: PUSH
12378: LD_INT 2
12380: EQUAL
12381: IFFALSE 12391
// sSpeed := true ;
12383: LD_ADDR_EXP 25
12387: PUSH
12388: LD_INT 1
12390: ST_TO_ADDR
// if p3 = 3 then
12391: LD_VAR 0 3
12395: PUSH
12396: LD_INT 3
12398: EQUAL
12399: IFFALSE 12409
// sEngine := true ;
12401: LD_ADDR_EXP 27
12405: PUSH
12406: LD_INT 1
12408: ST_TO_ADDR
// if p3 = 4 then
12409: LD_VAR 0 3
12413: PUSH
12414: LD_INT 4
12416: EQUAL
12417: IFFALSE 12427
// sSpec := true ;
12419: LD_ADDR_EXP 24
12423: PUSH
12424: LD_INT 1
12426: ST_TO_ADDR
// if p3 = 5 then
12427: LD_VAR 0 3
12431: PUSH
12432: LD_INT 5
12434: EQUAL
12435: IFFALSE 12445
// sLevel := true ;
12437: LD_ADDR_EXP 28
12441: PUSH
12442: LD_INT 1
12444: ST_TO_ADDR
// if p3 = 6 then
12445: LD_VAR 0 3
12449: PUSH
12450: LD_INT 6
12452: EQUAL
12453: IFFALSE 12463
// sArmoury := true ;
12455: LD_ADDR_EXP 29
12459: PUSH
12460: LD_INT 1
12462: ST_TO_ADDR
// if p3 = 7 then
12463: LD_VAR 0 3
12467: PUSH
12468: LD_INT 7
12470: EQUAL
12471: IFFALSE 12481
// sRadar := true ;
12473: LD_ADDR_EXP 30
12477: PUSH
12478: LD_INT 1
12480: ST_TO_ADDR
// if p3 = 8 then
12481: LD_VAR 0 3
12485: PUSH
12486: LD_INT 8
12488: EQUAL
12489: IFFALSE 12499
// sBunker := true ;
12491: LD_ADDR_EXP 31
12495: PUSH
12496: LD_INT 1
12498: ST_TO_ADDR
// if p3 = 9 then
12499: LD_VAR 0 3
12503: PUSH
12504: LD_INT 9
12506: EQUAL
12507: IFFALSE 12517
// sHack := true ;
12509: LD_ADDR_EXP 32
12513: PUSH
12514: LD_INT 1
12516: ST_TO_ADDR
// if p3 = 10 then
12517: LD_VAR 0 3
12521: PUSH
12522: LD_INT 10
12524: EQUAL
12525: IFFALSE 12535
// sFire := true ;
12527: LD_ADDR_EXP 33
12531: PUSH
12532: LD_INT 1
12534: ST_TO_ADDR
// if p3 = 11 then
12535: LD_VAR 0 3
12539: PUSH
12540: LD_INT 11
12542: EQUAL
12543: IFFALSE 12553
// sRefresh := true ;
12545: LD_ADDR_EXP 34
12549: PUSH
12550: LD_INT 1
12552: ST_TO_ADDR
// if p3 = 12 then
12553: LD_VAR 0 3
12557: PUSH
12558: LD_INT 12
12560: EQUAL
12561: IFFALSE 12571
// sExp := true ;
12563: LD_ADDR_EXP 35
12567: PUSH
12568: LD_INT 1
12570: ST_TO_ADDR
// if p3 = 13 then
12571: LD_VAR 0 3
12575: PUSH
12576: LD_INT 13
12578: EQUAL
12579: IFFALSE 12589
// sDepot := true ;
12581: LD_ADDR_EXP 36
12585: PUSH
12586: LD_INT 1
12588: ST_TO_ADDR
// if p3 = 14 then
12589: LD_VAR 0 3
12593: PUSH
12594: LD_INT 14
12596: EQUAL
12597: IFFALSE 12607
// sFlag := true ;
12599: LD_ADDR_EXP 37
12603: PUSH
12604: LD_INT 1
12606: ST_TO_ADDR
// if p3 = 15 then
12607: LD_VAR 0 3
12611: PUSH
12612: LD_INT 15
12614: EQUAL
12615: IFFALSE 12625
// sKamikadze := true ;
12617: LD_ADDR_EXP 45
12621: PUSH
12622: LD_INT 1
12624: ST_TO_ADDR
// if p3 = 16 then
12625: LD_VAR 0 3
12629: PUSH
12630: LD_INT 16
12632: EQUAL
12633: IFFALSE 12643
// sTroll := true ;
12635: LD_ADDR_EXP 46
12639: PUSH
12640: LD_INT 1
12642: ST_TO_ADDR
// if p3 = 17 then
12643: LD_VAR 0 3
12647: PUSH
12648: LD_INT 17
12650: EQUAL
12651: IFFALSE 12661
// sSlow := true ;
12653: LD_ADDR_EXP 47
12657: PUSH
12658: LD_INT 1
12660: ST_TO_ADDR
// if p3 = 18 then
12661: LD_VAR 0 3
12665: PUSH
12666: LD_INT 18
12668: EQUAL
12669: IFFALSE 12679
// sLack := true ;
12671: LD_ADDR_EXP 48
12675: PUSH
12676: LD_INT 1
12678: ST_TO_ADDR
// if p3 = 19 then
12679: LD_VAR 0 3
12683: PUSH
12684: LD_INT 19
12686: EQUAL
12687: IFFALSE 12697
// sTank := true ;
12689: LD_ADDR_EXP 50
12693: PUSH
12694: LD_INT 1
12696: ST_TO_ADDR
// if p3 = 20 then
12697: LD_VAR 0 3
12701: PUSH
12702: LD_INT 20
12704: EQUAL
12705: IFFALSE 12715
// sRemote := true ;
12707: LD_ADDR_EXP 51
12711: PUSH
12712: LD_INT 1
12714: ST_TO_ADDR
// if p3 = 21 then
12715: LD_VAR 0 3
12719: PUSH
12720: LD_INT 21
12722: EQUAL
12723: IFFALSE 12733
// sPowell := true ;
12725: LD_ADDR_EXP 52
12729: PUSH
12730: LD_INT 1
12732: ST_TO_ADDR
// if p3 = 22 then
12733: LD_VAR 0 3
12737: PUSH
12738: LD_INT 22
12740: EQUAL
12741: IFFALSE 12751
// sTeleport := true ;
12743: LD_ADDR_EXP 55
12747: PUSH
12748: LD_INT 1
12750: ST_TO_ADDR
// if p3 = 23 then
12751: LD_VAR 0 3
12755: PUSH
12756: LD_INT 23
12758: EQUAL
12759: IFFALSE 12769
// sOilTower := true ;
12761: LD_ADDR_EXP 57
12765: PUSH
12766: LD_INT 1
12768: ST_TO_ADDR
// if p3 = 24 then
12769: LD_VAR 0 3
12773: PUSH
12774: LD_INT 24
12776: EQUAL
12777: IFFALSE 12787
// sShovel := true ;
12779: LD_ADDR_EXP 58
12783: PUSH
12784: LD_INT 1
12786: ST_TO_ADDR
// if p3 = 25 then
12787: LD_VAR 0 3
12791: PUSH
12792: LD_INT 25
12794: EQUAL
12795: IFFALSE 12805
// sSheik := true ;
12797: LD_ADDR_EXP 59
12801: PUSH
12802: LD_INT 1
12804: ST_TO_ADDR
// if p3 = 26 then
12805: LD_VAR 0 3
12809: PUSH
12810: LD_INT 26
12812: EQUAL
12813: IFFALSE 12823
// sEarthquake := true ;
12815: LD_ADDR_EXP 61
12819: PUSH
12820: LD_INT 1
12822: ST_TO_ADDR
// if p3 = 27 then
12823: LD_VAR 0 3
12827: PUSH
12828: LD_INT 27
12830: EQUAL
12831: IFFALSE 12841
// sAI := true ;
12833: LD_ADDR_EXP 62
12837: PUSH
12838: LD_INT 1
12840: ST_TO_ADDR
// if p3 = 28 then
12841: LD_VAR 0 3
12845: PUSH
12846: LD_INT 28
12848: EQUAL
12849: IFFALSE 12859
// sCargo := true ;
12851: LD_ADDR_EXP 65
12855: PUSH
12856: LD_INT 1
12858: ST_TO_ADDR
// if p3 = 29 then
12859: LD_VAR 0 3
12863: PUSH
12864: LD_INT 29
12866: EQUAL
12867: IFFALSE 12877
// sDLaser := true ;
12869: LD_ADDR_EXP 66
12873: PUSH
12874: LD_INT 1
12876: ST_TO_ADDR
// if p3 = 30 then
12877: LD_VAR 0 3
12881: PUSH
12882: LD_INT 30
12884: EQUAL
12885: IFFALSE 12895
// sExchange := true ;
12887: LD_ADDR_EXP 67
12891: PUSH
12892: LD_INT 1
12894: ST_TO_ADDR
// if p3 = 31 then
12895: LD_VAR 0 3
12899: PUSH
12900: LD_INT 31
12902: EQUAL
12903: IFFALSE 12913
// sFac := true ;
12905: LD_ADDR_EXP 68
12909: PUSH
12910: LD_INT 1
12912: ST_TO_ADDR
// if p3 = 32 then
12913: LD_VAR 0 3
12917: PUSH
12918: LD_INT 32
12920: EQUAL
12921: IFFALSE 12931
// sPower := true ;
12923: LD_ADDR_EXP 69
12927: PUSH
12928: LD_INT 1
12930: ST_TO_ADDR
// if p3 = 33 then
12931: LD_VAR 0 3
12935: PUSH
12936: LD_INT 33
12938: EQUAL
12939: IFFALSE 12949
// sRandom := true ;
12941: LD_ADDR_EXP 70
12945: PUSH
12946: LD_INT 1
12948: ST_TO_ADDR
// if p3 = 34 then
12949: LD_VAR 0 3
12953: PUSH
12954: LD_INT 34
12956: EQUAL
12957: IFFALSE 12967
// sShield := true ;
12959: LD_ADDR_EXP 71
12963: PUSH
12964: LD_INT 1
12966: ST_TO_ADDR
// if p3 = 35 then
12967: LD_VAR 0 3
12971: PUSH
12972: LD_INT 35
12974: EQUAL
12975: IFFALSE 12985
// sTime := true ;
12977: LD_ADDR_EXP 72
12981: PUSH
12982: LD_INT 1
12984: ST_TO_ADDR
// if p3 = 36 then
12985: LD_VAR 0 3
12989: PUSH
12990: LD_INT 36
12992: EQUAL
12993: IFFALSE 13003
// sTools := true ;
12995: LD_ADDR_EXP 73
12999: PUSH
13000: LD_INT 1
13002: ST_TO_ADDR
// if p3 = 101 then
13003: LD_VAR 0 3
13007: PUSH
13008: LD_INT 101
13010: EQUAL
13011: IFFALSE 13021
// sSold := true ;
13013: LD_ADDR_EXP 38
13017: PUSH
13018: LD_INT 1
13020: ST_TO_ADDR
// if p3 = 102 then
13021: LD_VAR 0 3
13025: PUSH
13026: LD_INT 102
13028: EQUAL
13029: IFFALSE 13039
// sDiff := true ;
13031: LD_ADDR_EXP 39
13035: PUSH
13036: LD_INT 1
13038: ST_TO_ADDR
// if p3 = 103 then
13039: LD_VAR 0 3
13043: PUSH
13044: LD_INT 103
13046: EQUAL
13047: IFFALSE 13057
// sFog := true ;
13049: LD_ADDR_EXP 42
13053: PUSH
13054: LD_INT 1
13056: ST_TO_ADDR
// if p3 = 104 then
13057: LD_VAR 0 3
13061: PUSH
13062: LD_INT 104
13064: EQUAL
13065: IFFALSE 13075
// sReset := true ;
13067: LD_ADDR_EXP 43
13071: PUSH
13072: LD_INT 1
13074: ST_TO_ADDR
// if p3 = 105 then
13075: LD_VAR 0 3
13079: PUSH
13080: LD_INT 105
13082: EQUAL
13083: IFFALSE 13093
// sSun := true ;
13085: LD_ADDR_EXP 44
13089: PUSH
13090: LD_INT 1
13092: ST_TO_ADDR
// if p3 = 106 then
13093: LD_VAR 0 3
13097: PUSH
13098: LD_INT 106
13100: EQUAL
13101: IFFALSE 13111
// sTiger := true ;
13103: LD_ADDR_EXP 40
13107: PUSH
13108: LD_INT 1
13110: ST_TO_ADDR
// if p3 = 107 then
13111: LD_VAR 0 3
13115: PUSH
13116: LD_INT 107
13118: EQUAL
13119: IFFALSE 13129
// sBomb := true ;
13121: LD_ADDR_EXP 41
13125: PUSH
13126: LD_INT 1
13128: ST_TO_ADDR
// if p3 = 108 then
13129: LD_VAR 0 3
13133: PUSH
13134: LD_INT 108
13136: EQUAL
13137: IFFALSE 13147
// sWound := true ;
13139: LD_ADDR_EXP 49
13143: PUSH
13144: LD_INT 1
13146: ST_TO_ADDR
// if p3 = 109 then
13147: LD_VAR 0 3
13151: PUSH
13152: LD_INT 109
13154: EQUAL
13155: IFFALSE 13165
// sBetray := true ;
13157: LD_ADDR_EXP 53
13161: PUSH
13162: LD_INT 1
13164: ST_TO_ADDR
// if p3 = 110 then
13165: LD_VAR 0 3
13169: PUSH
13170: LD_INT 110
13172: EQUAL
13173: IFFALSE 13183
// sContamin := true ;
13175: LD_ADDR_EXP 54
13179: PUSH
13180: LD_INT 1
13182: ST_TO_ADDR
// if p3 = 111 then
13183: LD_VAR 0 3
13187: PUSH
13188: LD_INT 111
13190: EQUAL
13191: IFFALSE 13201
// sOil := true ;
13193: LD_ADDR_EXP 56
13197: PUSH
13198: LD_INT 1
13200: ST_TO_ADDR
// if p3 = 112 then
13201: LD_VAR 0 3
13205: PUSH
13206: LD_INT 112
13208: EQUAL
13209: IFFALSE 13219
// sStu := true ;
13211: LD_ADDR_EXP 60
13215: PUSH
13216: LD_INT 1
13218: ST_TO_ADDR
// if p3 = 113 then
13219: LD_VAR 0 3
13223: PUSH
13224: LD_INT 113
13226: EQUAL
13227: IFFALSE 13237
// sBazooka := true ;
13229: LD_ADDR_EXP 63
13233: PUSH
13234: LD_INT 1
13236: ST_TO_ADDR
// if p3 = 114 then
13237: LD_VAR 0 3
13241: PUSH
13242: LD_INT 114
13244: EQUAL
13245: IFFALSE 13255
// sMortar := true ;
13247: LD_ADDR_EXP 64
13251: PUSH
13252: LD_INT 1
13254: ST_TO_ADDR
// if p3 = 115 then
13255: LD_VAR 0 3
13259: PUSH
13260: LD_INT 115
13262: EQUAL
13263: IFFALSE 13273
// sRanger := true ;
13265: LD_ADDR_EXP 74
13269: PUSH
13270: LD_INT 1
13272: ST_TO_ADDR
// if p3 = 116 then
13273: LD_VAR 0 3
13277: PUSH
13278: LD_INT 116
13280: EQUAL
13281: IFFALSE 13291
// sComputer := true ;
13283: LD_ADDR_EXP 75
13287: PUSH
13288: LD_INT 1
13290: ST_TO_ADDR
// if p3 = 117 then
13291: LD_VAR 0 3
13295: PUSH
13296: LD_INT 117
13298: EQUAL
13299: IFFALSE 13309
// s30 := true ;
13301: LD_ADDR_EXP 76
13305: PUSH
13306: LD_INT 1
13308: ST_TO_ADDR
// if p3 = 118 then
13309: LD_VAR 0 3
13313: PUSH
13314: LD_INT 118
13316: EQUAL
13317: IFFALSE 13327
// s60 := true ;
13319: LD_ADDR_EXP 77
13323: PUSH
13324: LD_INT 1
13326: ST_TO_ADDR
// end ; if p2 = stream_mode then
13327: LD_VAR 0 2
13331: PUSH
13332: LD_INT 101
13334: EQUAL
13335: IFFALSE 13463
// begin case p3 of 1 :
13337: LD_VAR 0 3
13341: PUSH
13342: LD_INT 1
13344: DOUBLE
13345: EQUAL
13346: IFTRUE 13350
13348: GO 13357
13350: POP
// hHackUnlimitedResources ; 2 :
13351: CALL 25561 0 0
13355: GO 13463
13357: LD_INT 2
13359: DOUBLE
13360: EQUAL
13361: IFTRUE 13365
13363: GO 13372
13365: POP
// hHackSetLevel10 ; 3 :
13366: CALL 25694 0 0
13370: GO 13463
13372: LD_INT 3
13374: DOUBLE
13375: EQUAL
13376: IFTRUE 13380
13378: GO 13387
13380: POP
// hHackSetLevel10YourUnits ; 4 :
13381: CALL 25779 0 0
13385: GO 13463
13387: LD_INT 4
13389: DOUBLE
13390: EQUAL
13391: IFTRUE 13395
13393: GO 13402
13395: POP
// hHackInvincible ; 5 :
13396: CALL 26227 0 0
13400: GO 13463
13402: LD_INT 5
13404: DOUBLE
13405: EQUAL
13406: IFTRUE 13410
13408: GO 13417
13410: POP
// hHackInvisible ; 6 :
13411: CALL 26338 0 0
13415: GO 13463
13417: LD_INT 6
13419: DOUBLE
13420: EQUAL
13421: IFTRUE 13425
13423: GO 13432
13425: POP
// hHackChangeYourSide ; 7 :
13426: CALL 26395 0 0
13430: GO 13463
13432: LD_INT 7
13434: DOUBLE
13435: EQUAL
13436: IFTRUE 13440
13438: GO 13447
13440: POP
// hHackChangeUnitSide ; 8 :
13441: CALL 26437 0 0
13445: GO 13463
13447: LD_INT 8
13449: DOUBLE
13450: EQUAL
13451: IFTRUE 13455
13453: GO 13462
13455: POP
// hHackFog ; end ;
13456: CALL 26538 0 0
13460: GO 13463
13462: POP
// end ; end ;
13463: LD_VAR 0 7
13467: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
13468: GO 13470
13470: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
13471: LD_STRING initStreamRollete();
13473: PPUSH
13474: CALL_OW 559
// InitStreamMode ;
13478: CALL 13490 0 0
// DefineStreamItems ( false ) ;
13482: LD_INT 0
13484: PPUSH
13485: CALL 13954 0 1
// end ;
13489: END
// function InitStreamMode ; begin
13490: LD_INT 0
13492: PPUSH
// streamModeActive := false ;
13493: LD_ADDR_EXP 21
13497: PUSH
13498: LD_INT 0
13500: ST_TO_ADDR
// normalCounter := 36 ;
13501: LD_ADDR_EXP 22
13505: PUSH
13506: LD_INT 36
13508: ST_TO_ADDR
// hardcoreCounter := 18 ;
13509: LD_ADDR_EXP 23
13513: PUSH
13514: LD_INT 18
13516: ST_TO_ADDR
// sRocket := false ;
13517: LD_ADDR_EXP 26
13521: PUSH
13522: LD_INT 0
13524: ST_TO_ADDR
// sSpeed := false ;
13525: LD_ADDR_EXP 25
13529: PUSH
13530: LD_INT 0
13532: ST_TO_ADDR
// sEngine := false ;
13533: LD_ADDR_EXP 27
13537: PUSH
13538: LD_INT 0
13540: ST_TO_ADDR
// sSpec := false ;
13541: LD_ADDR_EXP 24
13545: PUSH
13546: LD_INT 0
13548: ST_TO_ADDR
// sLevel := false ;
13549: LD_ADDR_EXP 28
13553: PUSH
13554: LD_INT 0
13556: ST_TO_ADDR
// sArmoury := false ;
13557: LD_ADDR_EXP 29
13561: PUSH
13562: LD_INT 0
13564: ST_TO_ADDR
// sRadar := false ;
13565: LD_ADDR_EXP 30
13569: PUSH
13570: LD_INT 0
13572: ST_TO_ADDR
// sBunker := false ;
13573: LD_ADDR_EXP 31
13577: PUSH
13578: LD_INT 0
13580: ST_TO_ADDR
// sHack := false ;
13581: LD_ADDR_EXP 32
13585: PUSH
13586: LD_INT 0
13588: ST_TO_ADDR
// sFire := false ;
13589: LD_ADDR_EXP 33
13593: PUSH
13594: LD_INT 0
13596: ST_TO_ADDR
// sRefresh := false ;
13597: LD_ADDR_EXP 34
13601: PUSH
13602: LD_INT 0
13604: ST_TO_ADDR
// sExp := false ;
13605: LD_ADDR_EXP 35
13609: PUSH
13610: LD_INT 0
13612: ST_TO_ADDR
// sDepot := false ;
13613: LD_ADDR_EXP 36
13617: PUSH
13618: LD_INT 0
13620: ST_TO_ADDR
// sFlag := false ;
13621: LD_ADDR_EXP 37
13625: PUSH
13626: LD_INT 0
13628: ST_TO_ADDR
// sKamikadze := false ;
13629: LD_ADDR_EXP 45
13633: PUSH
13634: LD_INT 0
13636: ST_TO_ADDR
// sTroll := false ;
13637: LD_ADDR_EXP 46
13641: PUSH
13642: LD_INT 0
13644: ST_TO_ADDR
// sSlow := false ;
13645: LD_ADDR_EXP 47
13649: PUSH
13650: LD_INT 0
13652: ST_TO_ADDR
// sLack := false ;
13653: LD_ADDR_EXP 48
13657: PUSH
13658: LD_INT 0
13660: ST_TO_ADDR
// sTank := false ;
13661: LD_ADDR_EXP 50
13665: PUSH
13666: LD_INT 0
13668: ST_TO_ADDR
// sRemote := false ;
13669: LD_ADDR_EXP 51
13673: PUSH
13674: LD_INT 0
13676: ST_TO_ADDR
// sPowell := false ;
13677: LD_ADDR_EXP 52
13681: PUSH
13682: LD_INT 0
13684: ST_TO_ADDR
// sTeleport := false ;
13685: LD_ADDR_EXP 55
13689: PUSH
13690: LD_INT 0
13692: ST_TO_ADDR
// sOilTower := false ;
13693: LD_ADDR_EXP 57
13697: PUSH
13698: LD_INT 0
13700: ST_TO_ADDR
// sShovel := false ;
13701: LD_ADDR_EXP 58
13705: PUSH
13706: LD_INT 0
13708: ST_TO_ADDR
// sSheik := false ;
13709: LD_ADDR_EXP 59
13713: PUSH
13714: LD_INT 0
13716: ST_TO_ADDR
// sEarthquake := false ;
13717: LD_ADDR_EXP 61
13721: PUSH
13722: LD_INT 0
13724: ST_TO_ADDR
// sAI := false ;
13725: LD_ADDR_EXP 62
13729: PUSH
13730: LD_INT 0
13732: ST_TO_ADDR
// sCargo := false ;
13733: LD_ADDR_EXP 65
13737: PUSH
13738: LD_INT 0
13740: ST_TO_ADDR
// sDLaser := false ;
13741: LD_ADDR_EXP 66
13745: PUSH
13746: LD_INT 0
13748: ST_TO_ADDR
// sExchange := false ;
13749: LD_ADDR_EXP 67
13753: PUSH
13754: LD_INT 0
13756: ST_TO_ADDR
// sFac := false ;
13757: LD_ADDR_EXP 68
13761: PUSH
13762: LD_INT 0
13764: ST_TO_ADDR
// sPower := false ;
13765: LD_ADDR_EXP 69
13769: PUSH
13770: LD_INT 0
13772: ST_TO_ADDR
// sRandom := false ;
13773: LD_ADDR_EXP 70
13777: PUSH
13778: LD_INT 0
13780: ST_TO_ADDR
// sShield := false ;
13781: LD_ADDR_EXP 71
13785: PUSH
13786: LD_INT 0
13788: ST_TO_ADDR
// sTime := false ;
13789: LD_ADDR_EXP 72
13793: PUSH
13794: LD_INT 0
13796: ST_TO_ADDR
// sTools := false ;
13797: LD_ADDR_EXP 73
13801: PUSH
13802: LD_INT 0
13804: ST_TO_ADDR
// sSold := false ;
13805: LD_ADDR_EXP 38
13809: PUSH
13810: LD_INT 0
13812: ST_TO_ADDR
// sDiff := false ;
13813: LD_ADDR_EXP 39
13817: PUSH
13818: LD_INT 0
13820: ST_TO_ADDR
// sFog := false ;
13821: LD_ADDR_EXP 42
13825: PUSH
13826: LD_INT 0
13828: ST_TO_ADDR
// sReset := false ;
13829: LD_ADDR_EXP 43
13833: PUSH
13834: LD_INT 0
13836: ST_TO_ADDR
// sSun := false ;
13837: LD_ADDR_EXP 44
13841: PUSH
13842: LD_INT 0
13844: ST_TO_ADDR
// sTiger := false ;
13845: LD_ADDR_EXP 40
13849: PUSH
13850: LD_INT 0
13852: ST_TO_ADDR
// sBomb := false ;
13853: LD_ADDR_EXP 41
13857: PUSH
13858: LD_INT 0
13860: ST_TO_ADDR
// sWound := false ;
13861: LD_ADDR_EXP 49
13865: PUSH
13866: LD_INT 0
13868: ST_TO_ADDR
// sBetray := false ;
13869: LD_ADDR_EXP 53
13873: PUSH
13874: LD_INT 0
13876: ST_TO_ADDR
// sContamin := false ;
13877: LD_ADDR_EXP 54
13881: PUSH
13882: LD_INT 0
13884: ST_TO_ADDR
// sOil := false ;
13885: LD_ADDR_EXP 56
13889: PUSH
13890: LD_INT 0
13892: ST_TO_ADDR
// sStu := false ;
13893: LD_ADDR_EXP 60
13897: PUSH
13898: LD_INT 0
13900: ST_TO_ADDR
// sBazooka := false ;
13901: LD_ADDR_EXP 63
13905: PUSH
13906: LD_INT 0
13908: ST_TO_ADDR
// sMortar := false ;
13909: LD_ADDR_EXP 64
13913: PUSH
13914: LD_INT 0
13916: ST_TO_ADDR
// sRanger := false ;
13917: LD_ADDR_EXP 74
13921: PUSH
13922: LD_INT 0
13924: ST_TO_ADDR
// sComputer := false ;
13925: LD_ADDR_EXP 75
13929: PUSH
13930: LD_INT 0
13932: ST_TO_ADDR
// s30 := false ;
13933: LD_ADDR_EXP 76
13937: PUSH
13938: LD_INT 0
13940: ST_TO_ADDR
// s60 := false ;
13941: LD_ADDR_EXP 77
13945: PUSH
13946: LD_INT 0
13948: ST_TO_ADDR
// end ;
13949: LD_VAR 0 1
13953: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
13954: LD_INT 0
13956: PPUSH
13957: PPUSH
13958: PPUSH
13959: PPUSH
13960: PPUSH
13961: PPUSH
13962: PPUSH
// result := [ ] ;
13963: LD_ADDR_VAR 0 2
13967: PUSH
13968: EMPTY
13969: ST_TO_ADDR
// if campaign_id = 1 then
13970: LD_OWVAR 69
13974: PUSH
13975: LD_INT 1
13977: EQUAL
13978: IFFALSE 17144
// begin case mission_number of 1 :
13980: LD_OWVAR 70
13984: PUSH
13985: LD_INT 1
13987: DOUBLE
13988: EQUAL
13989: IFTRUE 13993
13991: GO 14069
13993: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
13994: LD_ADDR_VAR 0 2
13998: PUSH
13999: LD_INT 2
14001: PUSH
14002: LD_INT 4
14004: PUSH
14005: LD_INT 11
14007: PUSH
14008: LD_INT 12
14010: PUSH
14011: LD_INT 15
14013: PUSH
14014: LD_INT 16
14016: PUSH
14017: LD_INT 22
14019: PUSH
14020: LD_INT 23
14022: PUSH
14023: LD_INT 26
14025: PUSH
14026: EMPTY
14027: LIST
14028: LIST
14029: LIST
14030: LIST
14031: LIST
14032: LIST
14033: LIST
14034: LIST
14035: LIST
14036: PUSH
14037: LD_INT 101
14039: PUSH
14040: LD_INT 102
14042: PUSH
14043: LD_INT 106
14045: PUSH
14046: LD_INT 116
14048: PUSH
14049: LD_INT 117
14051: PUSH
14052: LD_INT 118
14054: PUSH
14055: EMPTY
14056: LIST
14057: LIST
14058: LIST
14059: LIST
14060: LIST
14061: LIST
14062: PUSH
14063: EMPTY
14064: LIST
14065: LIST
14066: ST_TO_ADDR
14067: GO 17142
14069: LD_INT 2
14071: DOUBLE
14072: EQUAL
14073: IFTRUE 14077
14075: GO 14161
14077: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
14078: LD_ADDR_VAR 0 2
14082: PUSH
14083: LD_INT 2
14085: PUSH
14086: LD_INT 4
14088: PUSH
14089: LD_INT 11
14091: PUSH
14092: LD_INT 12
14094: PUSH
14095: LD_INT 15
14097: PUSH
14098: LD_INT 16
14100: PUSH
14101: LD_INT 22
14103: PUSH
14104: LD_INT 23
14106: PUSH
14107: LD_INT 26
14109: PUSH
14110: EMPTY
14111: LIST
14112: LIST
14113: LIST
14114: LIST
14115: LIST
14116: LIST
14117: LIST
14118: LIST
14119: LIST
14120: PUSH
14121: LD_INT 101
14123: PUSH
14124: LD_INT 102
14126: PUSH
14127: LD_INT 105
14129: PUSH
14130: LD_INT 106
14132: PUSH
14133: LD_INT 108
14135: PUSH
14136: LD_INT 116
14138: PUSH
14139: LD_INT 117
14141: PUSH
14142: LD_INT 118
14144: PUSH
14145: EMPTY
14146: LIST
14147: LIST
14148: LIST
14149: LIST
14150: LIST
14151: LIST
14152: LIST
14153: LIST
14154: PUSH
14155: EMPTY
14156: LIST
14157: LIST
14158: ST_TO_ADDR
14159: GO 17142
14161: LD_INT 3
14163: DOUBLE
14164: EQUAL
14165: IFTRUE 14169
14167: GO 14257
14169: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
14170: LD_ADDR_VAR 0 2
14174: PUSH
14175: LD_INT 2
14177: PUSH
14178: LD_INT 4
14180: PUSH
14181: LD_INT 5
14183: PUSH
14184: LD_INT 11
14186: PUSH
14187: LD_INT 12
14189: PUSH
14190: LD_INT 15
14192: PUSH
14193: LD_INT 16
14195: PUSH
14196: LD_INT 22
14198: PUSH
14199: LD_INT 26
14201: PUSH
14202: LD_INT 36
14204: PUSH
14205: EMPTY
14206: LIST
14207: LIST
14208: LIST
14209: LIST
14210: LIST
14211: LIST
14212: LIST
14213: LIST
14214: LIST
14215: LIST
14216: PUSH
14217: LD_INT 101
14219: PUSH
14220: LD_INT 102
14222: PUSH
14223: LD_INT 105
14225: PUSH
14226: LD_INT 106
14228: PUSH
14229: LD_INT 108
14231: PUSH
14232: LD_INT 116
14234: PUSH
14235: LD_INT 117
14237: PUSH
14238: LD_INT 118
14240: PUSH
14241: EMPTY
14242: LIST
14243: LIST
14244: LIST
14245: LIST
14246: LIST
14247: LIST
14248: LIST
14249: LIST
14250: PUSH
14251: EMPTY
14252: LIST
14253: LIST
14254: ST_TO_ADDR
14255: GO 17142
14257: LD_INT 4
14259: DOUBLE
14260: EQUAL
14261: IFTRUE 14265
14263: GO 14361
14265: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
14266: LD_ADDR_VAR 0 2
14270: PUSH
14271: LD_INT 2
14273: PUSH
14274: LD_INT 4
14276: PUSH
14277: LD_INT 5
14279: PUSH
14280: LD_INT 8
14282: PUSH
14283: LD_INT 11
14285: PUSH
14286: LD_INT 12
14288: PUSH
14289: LD_INT 15
14291: PUSH
14292: LD_INT 16
14294: PUSH
14295: LD_INT 22
14297: PUSH
14298: LD_INT 23
14300: PUSH
14301: LD_INT 26
14303: PUSH
14304: LD_INT 36
14306: PUSH
14307: EMPTY
14308: LIST
14309: LIST
14310: LIST
14311: LIST
14312: LIST
14313: LIST
14314: LIST
14315: LIST
14316: LIST
14317: LIST
14318: LIST
14319: LIST
14320: PUSH
14321: LD_INT 101
14323: PUSH
14324: LD_INT 102
14326: PUSH
14327: LD_INT 105
14329: PUSH
14330: LD_INT 106
14332: PUSH
14333: LD_INT 108
14335: PUSH
14336: LD_INT 116
14338: PUSH
14339: LD_INT 117
14341: PUSH
14342: LD_INT 118
14344: PUSH
14345: EMPTY
14346: LIST
14347: LIST
14348: LIST
14349: LIST
14350: LIST
14351: LIST
14352: LIST
14353: LIST
14354: PUSH
14355: EMPTY
14356: LIST
14357: LIST
14358: ST_TO_ADDR
14359: GO 17142
14361: LD_INT 5
14363: DOUBLE
14364: EQUAL
14365: IFTRUE 14369
14367: GO 14481
14369: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
14370: LD_ADDR_VAR 0 2
14374: PUSH
14375: LD_INT 2
14377: PUSH
14378: LD_INT 4
14380: PUSH
14381: LD_INT 5
14383: PUSH
14384: LD_INT 6
14386: PUSH
14387: LD_INT 8
14389: PUSH
14390: LD_INT 11
14392: PUSH
14393: LD_INT 12
14395: PUSH
14396: LD_INT 15
14398: PUSH
14399: LD_INT 16
14401: PUSH
14402: LD_INT 22
14404: PUSH
14405: LD_INT 23
14407: PUSH
14408: LD_INT 25
14410: PUSH
14411: LD_INT 26
14413: PUSH
14414: LD_INT 36
14416: PUSH
14417: EMPTY
14418: LIST
14419: LIST
14420: LIST
14421: LIST
14422: LIST
14423: LIST
14424: LIST
14425: LIST
14426: LIST
14427: LIST
14428: LIST
14429: LIST
14430: LIST
14431: LIST
14432: PUSH
14433: LD_INT 101
14435: PUSH
14436: LD_INT 102
14438: PUSH
14439: LD_INT 105
14441: PUSH
14442: LD_INT 106
14444: PUSH
14445: LD_INT 108
14447: PUSH
14448: LD_INT 109
14450: PUSH
14451: LD_INT 112
14453: PUSH
14454: LD_INT 116
14456: PUSH
14457: LD_INT 117
14459: PUSH
14460: LD_INT 118
14462: PUSH
14463: EMPTY
14464: LIST
14465: LIST
14466: LIST
14467: LIST
14468: LIST
14469: LIST
14470: LIST
14471: LIST
14472: LIST
14473: LIST
14474: PUSH
14475: EMPTY
14476: LIST
14477: LIST
14478: ST_TO_ADDR
14479: GO 17142
14481: LD_INT 6
14483: DOUBLE
14484: EQUAL
14485: IFTRUE 14489
14487: GO 14621
14489: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
14490: LD_ADDR_VAR 0 2
14494: PUSH
14495: LD_INT 2
14497: PUSH
14498: LD_INT 4
14500: PUSH
14501: LD_INT 5
14503: PUSH
14504: LD_INT 6
14506: PUSH
14507: LD_INT 8
14509: PUSH
14510: LD_INT 11
14512: PUSH
14513: LD_INT 12
14515: PUSH
14516: LD_INT 15
14518: PUSH
14519: LD_INT 16
14521: PUSH
14522: LD_INT 20
14524: PUSH
14525: LD_INT 21
14527: PUSH
14528: LD_INT 22
14530: PUSH
14531: LD_INT 23
14533: PUSH
14534: LD_INT 25
14536: PUSH
14537: LD_INT 26
14539: PUSH
14540: LD_INT 30
14542: PUSH
14543: LD_INT 31
14545: PUSH
14546: LD_INT 32
14548: PUSH
14549: LD_INT 36
14551: PUSH
14552: EMPTY
14553: LIST
14554: LIST
14555: LIST
14556: LIST
14557: LIST
14558: LIST
14559: LIST
14560: LIST
14561: LIST
14562: LIST
14563: LIST
14564: LIST
14565: LIST
14566: LIST
14567: LIST
14568: LIST
14569: LIST
14570: LIST
14571: LIST
14572: PUSH
14573: LD_INT 101
14575: PUSH
14576: LD_INT 102
14578: PUSH
14579: LD_INT 105
14581: PUSH
14582: LD_INT 106
14584: PUSH
14585: LD_INT 108
14587: PUSH
14588: LD_INT 109
14590: PUSH
14591: LD_INT 112
14593: PUSH
14594: LD_INT 116
14596: PUSH
14597: LD_INT 117
14599: PUSH
14600: LD_INT 118
14602: PUSH
14603: EMPTY
14604: LIST
14605: LIST
14606: LIST
14607: LIST
14608: LIST
14609: LIST
14610: LIST
14611: LIST
14612: LIST
14613: LIST
14614: PUSH
14615: EMPTY
14616: LIST
14617: LIST
14618: ST_TO_ADDR
14619: GO 17142
14621: LD_INT 7
14623: DOUBLE
14624: EQUAL
14625: IFTRUE 14629
14627: GO 14741
14629: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
14630: LD_ADDR_VAR 0 2
14634: PUSH
14635: LD_INT 2
14637: PUSH
14638: LD_INT 4
14640: PUSH
14641: LD_INT 5
14643: PUSH
14644: LD_INT 7
14646: PUSH
14647: LD_INT 11
14649: PUSH
14650: LD_INT 12
14652: PUSH
14653: LD_INT 15
14655: PUSH
14656: LD_INT 16
14658: PUSH
14659: LD_INT 20
14661: PUSH
14662: LD_INT 21
14664: PUSH
14665: LD_INT 22
14667: PUSH
14668: LD_INT 23
14670: PUSH
14671: LD_INT 25
14673: PUSH
14674: LD_INT 26
14676: PUSH
14677: EMPTY
14678: LIST
14679: LIST
14680: LIST
14681: LIST
14682: LIST
14683: LIST
14684: LIST
14685: LIST
14686: LIST
14687: LIST
14688: LIST
14689: LIST
14690: LIST
14691: LIST
14692: PUSH
14693: LD_INT 101
14695: PUSH
14696: LD_INT 102
14698: PUSH
14699: LD_INT 103
14701: PUSH
14702: LD_INT 105
14704: PUSH
14705: LD_INT 106
14707: PUSH
14708: LD_INT 108
14710: PUSH
14711: LD_INT 112
14713: PUSH
14714: LD_INT 116
14716: PUSH
14717: LD_INT 117
14719: PUSH
14720: LD_INT 118
14722: PUSH
14723: EMPTY
14724: LIST
14725: LIST
14726: LIST
14727: LIST
14728: LIST
14729: LIST
14730: LIST
14731: LIST
14732: LIST
14733: LIST
14734: PUSH
14735: EMPTY
14736: LIST
14737: LIST
14738: ST_TO_ADDR
14739: GO 17142
14741: LD_INT 8
14743: DOUBLE
14744: EQUAL
14745: IFTRUE 14749
14747: GO 14889
14749: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
14750: LD_ADDR_VAR 0 2
14754: PUSH
14755: LD_INT 2
14757: PUSH
14758: LD_INT 4
14760: PUSH
14761: LD_INT 5
14763: PUSH
14764: LD_INT 6
14766: PUSH
14767: LD_INT 7
14769: PUSH
14770: LD_INT 8
14772: PUSH
14773: LD_INT 11
14775: PUSH
14776: LD_INT 12
14778: PUSH
14779: LD_INT 15
14781: PUSH
14782: LD_INT 16
14784: PUSH
14785: LD_INT 20
14787: PUSH
14788: LD_INT 21
14790: PUSH
14791: LD_INT 22
14793: PUSH
14794: LD_INT 23
14796: PUSH
14797: LD_INT 25
14799: PUSH
14800: LD_INT 26
14802: PUSH
14803: LD_INT 30
14805: PUSH
14806: LD_INT 31
14808: PUSH
14809: LD_INT 32
14811: PUSH
14812: LD_INT 36
14814: PUSH
14815: EMPTY
14816: LIST
14817: LIST
14818: LIST
14819: LIST
14820: LIST
14821: LIST
14822: LIST
14823: LIST
14824: LIST
14825: LIST
14826: LIST
14827: LIST
14828: LIST
14829: LIST
14830: LIST
14831: LIST
14832: LIST
14833: LIST
14834: LIST
14835: LIST
14836: PUSH
14837: LD_INT 101
14839: PUSH
14840: LD_INT 102
14842: PUSH
14843: LD_INT 103
14845: PUSH
14846: LD_INT 105
14848: PUSH
14849: LD_INT 106
14851: PUSH
14852: LD_INT 108
14854: PUSH
14855: LD_INT 109
14857: PUSH
14858: LD_INT 112
14860: PUSH
14861: LD_INT 116
14863: PUSH
14864: LD_INT 117
14866: PUSH
14867: LD_INT 118
14869: PUSH
14870: EMPTY
14871: LIST
14872: LIST
14873: LIST
14874: LIST
14875: LIST
14876: LIST
14877: LIST
14878: LIST
14879: LIST
14880: LIST
14881: LIST
14882: PUSH
14883: EMPTY
14884: LIST
14885: LIST
14886: ST_TO_ADDR
14887: GO 17142
14889: LD_INT 9
14891: DOUBLE
14892: EQUAL
14893: IFTRUE 14897
14895: GO 15045
14897: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
14898: LD_ADDR_VAR 0 2
14902: PUSH
14903: LD_INT 2
14905: PUSH
14906: LD_INT 4
14908: PUSH
14909: LD_INT 5
14911: PUSH
14912: LD_INT 6
14914: PUSH
14915: LD_INT 7
14917: PUSH
14918: LD_INT 8
14920: PUSH
14921: LD_INT 11
14923: PUSH
14924: LD_INT 12
14926: PUSH
14927: LD_INT 15
14929: PUSH
14930: LD_INT 16
14932: PUSH
14933: LD_INT 20
14935: PUSH
14936: LD_INT 21
14938: PUSH
14939: LD_INT 22
14941: PUSH
14942: LD_INT 23
14944: PUSH
14945: LD_INT 25
14947: PUSH
14948: LD_INT 26
14950: PUSH
14951: LD_INT 28
14953: PUSH
14954: LD_INT 30
14956: PUSH
14957: LD_INT 31
14959: PUSH
14960: LD_INT 32
14962: PUSH
14963: LD_INT 36
14965: PUSH
14966: EMPTY
14967: LIST
14968: LIST
14969: LIST
14970: LIST
14971: LIST
14972: LIST
14973: LIST
14974: LIST
14975: LIST
14976: LIST
14977: LIST
14978: LIST
14979: LIST
14980: LIST
14981: LIST
14982: LIST
14983: LIST
14984: LIST
14985: LIST
14986: LIST
14987: LIST
14988: PUSH
14989: LD_INT 101
14991: PUSH
14992: LD_INT 102
14994: PUSH
14995: LD_INT 103
14997: PUSH
14998: LD_INT 105
15000: PUSH
15001: LD_INT 106
15003: PUSH
15004: LD_INT 108
15006: PUSH
15007: LD_INT 109
15009: PUSH
15010: LD_INT 112
15012: PUSH
15013: LD_INT 114
15015: PUSH
15016: LD_INT 116
15018: PUSH
15019: LD_INT 117
15021: PUSH
15022: LD_INT 118
15024: PUSH
15025: EMPTY
15026: LIST
15027: LIST
15028: LIST
15029: LIST
15030: LIST
15031: LIST
15032: LIST
15033: LIST
15034: LIST
15035: LIST
15036: LIST
15037: LIST
15038: PUSH
15039: EMPTY
15040: LIST
15041: LIST
15042: ST_TO_ADDR
15043: GO 17142
15045: LD_INT 10
15047: DOUBLE
15048: EQUAL
15049: IFTRUE 15053
15051: GO 15249
15053: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
15054: LD_ADDR_VAR 0 2
15058: PUSH
15059: LD_INT 2
15061: PUSH
15062: LD_INT 4
15064: PUSH
15065: LD_INT 5
15067: PUSH
15068: LD_INT 6
15070: PUSH
15071: LD_INT 7
15073: PUSH
15074: LD_INT 8
15076: PUSH
15077: LD_INT 9
15079: PUSH
15080: LD_INT 10
15082: PUSH
15083: LD_INT 11
15085: PUSH
15086: LD_INT 12
15088: PUSH
15089: LD_INT 13
15091: PUSH
15092: LD_INT 14
15094: PUSH
15095: LD_INT 15
15097: PUSH
15098: LD_INT 16
15100: PUSH
15101: LD_INT 17
15103: PUSH
15104: LD_INT 18
15106: PUSH
15107: LD_INT 19
15109: PUSH
15110: LD_INT 20
15112: PUSH
15113: LD_INT 21
15115: PUSH
15116: LD_INT 22
15118: PUSH
15119: LD_INT 23
15121: PUSH
15122: LD_INT 24
15124: PUSH
15125: LD_INT 25
15127: PUSH
15128: LD_INT 26
15130: PUSH
15131: LD_INT 28
15133: PUSH
15134: LD_INT 30
15136: PUSH
15137: LD_INT 31
15139: PUSH
15140: LD_INT 32
15142: PUSH
15143: LD_INT 36
15145: PUSH
15146: EMPTY
15147: LIST
15148: LIST
15149: LIST
15150: LIST
15151: LIST
15152: LIST
15153: LIST
15154: LIST
15155: LIST
15156: LIST
15157: LIST
15158: LIST
15159: LIST
15160: LIST
15161: LIST
15162: LIST
15163: LIST
15164: LIST
15165: LIST
15166: LIST
15167: LIST
15168: LIST
15169: LIST
15170: LIST
15171: LIST
15172: LIST
15173: LIST
15174: LIST
15175: LIST
15176: PUSH
15177: LD_INT 101
15179: PUSH
15180: LD_INT 102
15182: PUSH
15183: LD_INT 103
15185: PUSH
15186: LD_INT 104
15188: PUSH
15189: LD_INT 105
15191: PUSH
15192: LD_INT 106
15194: PUSH
15195: LD_INT 107
15197: PUSH
15198: LD_INT 108
15200: PUSH
15201: LD_INT 109
15203: PUSH
15204: LD_INT 110
15206: PUSH
15207: LD_INT 111
15209: PUSH
15210: LD_INT 112
15212: PUSH
15213: LD_INT 114
15215: PUSH
15216: LD_INT 116
15218: PUSH
15219: LD_INT 117
15221: PUSH
15222: LD_INT 118
15224: PUSH
15225: EMPTY
15226: LIST
15227: LIST
15228: LIST
15229: LIST
15230: LIST
15231: LIST
15232: LIST
15233: LIST
15234: LIST
15235: LIST
15236: LIST
15237: LIST
15238: LIST
15239: LIST
15240: LIST
15241: LIST
15242: PUSH
15243: EMPTY
15244: LIST
15245: LIST
15246: ST_TO_ADDR
15247: GO 17142
15249: LD_INT 11
15251: DOUBLE
15252: EQUAL
15253: IFTRUE 15257
15255: GO 15461
15257: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
15258: LD_ADDR_VAR 0 2
15262: PUSH
15263: LD_INT 2
15265: PUSH
15266: LD_INT 3
15268: PUSH
15269: LD_INT 4
15271: PUSH
15272: LD_INT 5
15274: PUSH
15275: LD_INT 6
15277: PUSH
15278: LD_INT 7
15280: PUSH
15281: LD_INT 8
15283: PUSH
15284: LD_INT 9
15286: PUSH
15287: LD_INT 10
15289: PUSH
15290: LD_INT 11
15292: PUSH
15293: LD_INT 12
15295: PUSH
15296: LD_INT 13
15298: PUSH
15299: LD_INT 14
15301: PUSH
15302: LD_INT 15
15304: PUSH
15305: LD_INT 16
15307: PUSH
15308: LD_INT 17
15310: PUSH
15311: LD_INT 18
15313: PUSH
15314: LD_INT 19
15316: PUSH
15317: LD_INT 20
15319: PUSH
15320: LD_INT 21
15322: PUSH
15323: LD_INT 22
15325: PUSH
15326: LD_INT 23
15328: PUSH
15329: LD_INT 24
15331: PUSH
15332: LD_INT 25
15334: PUSH
15335: LD_INT 26
15337: PUSH
15338: LD_INT 28
15340: PUSH
15341: LD_INT 30
15343: PUSH
15344: LD_INT 31
15346: PUSH
15347: LD_INT 32
15349: PUSH
15350: LD_INT 34
15352: PUSH
15353: LD_INT 36
15355: PUSH
15356: EMPTY
15357: LIST
15358: LIST
15359: LIST
15360: LIST
15361: LIST
15362: LIST
15363: LIST
15364: LIST
15365: LIST
15366: LIST
15367: LIST
15368: LIST
15369: LIST
15370: LIST
15371: LIST
15372: LIST
15373: LIST
15374: LIST
15375: LIST
15376: LIST
15377: LIST
15378: LIST
15379: LIST
15380: LIST
15381: LIST
15382: LIST
15383: LIST
15384: LIST
15385: LIST
15386: LIST
15387: LIST
15388: PUSH
15389: LD_INT 101
15391: PUSH
15392: LD_INT 102
15394: PUSH
15395: LD_INT 103
15397: PUSH
15398: LD_INT 104
15400: PUSH
15401: LD_INT 105
15403: PUSH
15404: LD_INT 106
15406: PUSH
15407: LD_INT 107
15409: PUSH
15410: LD_INT 108
15412: PUSH
15413: LD_INT 109
15415: PUSH
15416: LD_INT 110
15418: PUSH
15419: LD_INT 111
15421: PUSH
15422: LD_INT 112
15424: PUSH
15425: LD_INT 114
15427: PUSH
15428: LD_INT 116
15430: PUSH
15431: LD_INT 117
15433: PUSH
15434: LD_INT 118
15436: PUSH
15437: EMPTY
15438: LIST
15439: LIST
15440: LIST
15441: LIST
15442: LIST
15443: LIST
15444: LIST
15445: LIST
15446: LIST
15447: LIST
15448: LIST
15449: LIST
15450: LIST
15451: LIST
15452: LIST
15453: LIST
15454: PUSH
15455: EMPTY
15456: LIST
15457: LIST
15458: ST_TO_ADDR
15459: GO 17142
15461: LD_INT 12
15463: DOUBLE
15464: EQUAL
15465: IFTRUE 15469
15467: GO 15689
15469: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
15470: LD_ADDR_VAR 0 2
15474: PUSH
15475: LD_INT 1
15477: PUSH
15478: LD_INT 2
15480: PUSH
15481: LD_INT 3
15483: PUSH
15484: LD_INT 4
15486: PUSH
15487: LD_INT 5
15489: PUSH
15490: LD_INT 6
15492: PUSH
15493: LD_INT 7
15495: PUSH
15496: LD_INT 8
15498: PUSH
15499: LD_INT 9
15501: PUSH
15502: LD_INT 10
15504: PUSH
15505: LD_INT 11
15507: PUSH
15508: LD_INT 12
15510: PUSH
15511: LD_INT 13
15513: PUSH
15514: LD_INT 14
15516: PUSH
15517: LD_INT 15
15519: PUSH
15520: LD_INT 16
15522: PUSH
15523: LD_INT 17
15525: PUSH
15526: LD_INT 18
15528: PUSH
15529: LD_INT 19
15531: PUSH
15532: LD_INT 20
15534: PUSH
15535: LD_INT 21
15537: PUSH
15538: LD_INT 22
15540: PUSH
15541: LD_INT 23
15543: PUSH
15544: LD_INT 24
15546: PUSH
15547: LD_INT 25
15549: PUSH
15550: LD_INT 26
15552: PUSH
15553: LD_INT 27
15555: PUSH
15556: LD_INT 28
15558: PUSH
15559: LD_INT 30
15561: PUSH
15562: LD_INT 31
15564: PUSH
15565: LD_INT 32
15567: PUSH
15568: LD_INT 33
15570: PUSH
15571: LD_INT 34
15573: PUSH
15574: LD_INT 36
15576: PUSH
15577: EMPTY
15578: LIST
15579: LIST
15580: LIST
15581: LIST
15582: LIST
15583: LIST
15584: LIST
15585: LIST
15586: LIST
15587: LIST
15588: LIST
15589: LIST
15590: LIST
15591: LIST
15592: LIST
15593: LIST
15594: LIST
15595: LIST
15596: LIST
15597: LIST
15598: LIST
15599: LIST
15600: LIST
15601: LIST
15602: LIST
15603: LIST
15604: LIST
15605: LIST
15606: LIST
15607: LIST
15608: LIST
15609: LIST
15610: LIST
15611: LIST
15612: PUSH
15613: LD_INT 101
15615: PUSH
15616: LD_INT 102
15618: PUSH
15619: LD_INT 103
15621: PUSH
15622: LD_INT 104
15624: PUSH
15625: LD_INT 105
15627: PUSH
15628: LD_INT 106
15630: PUSH
15631: LD_INT 107
15633: PUSH
15634: LD_INT 108
15636: PUSH
15637: LD_INT 109
15639: PUSH
15640: LD_INT 110
15642: PUSH
15643: LD_INT 111
15645: PUSH
15646: LD_INT 112
15648: PUSH
15649: LD_INT 113
15651: PUSH
15652: LD_INT 114
15654: PUSH
15655: LD_INT 116
15657: PUSH
15658: LD_INT 117
15660: PUSH
15661: LD_INT 118
15663: PUSH
15664: EMPTY
15665: LIST
15666: LIST
15667: LIST
15668: LIST
15669: LIST
15670: LIST
15671: LIST
15672: LIST
15673: LIST
15674: LIST
15675: LIST
15676: LIST
15677: LIST
15678: LIST
15679: LIST
15680: LIST
15681: LIST
15682: PUSH
15683: EMPTY
15684: LIST
15685: LIST
15686: ST_TO_ADDR
15687: GO 17142
15689: LD_INT 13
15691: DOUBLE
15692: EQUAL
15693: IFTRUE 15697
15695: GO 15905
15697: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
15698: LD_ADDR_VAR 0 2
15702: PUSH
15703: LD_INT 1
15705: PUSH
15706: LD_INT 2
15708: PUSH
15709: LD_INT 3
15711: PUSH
15712: LD_INT 4
15714: PUSH
15715: LD_INT 5
15717: PUSH
15718: LD_INT 8
15720: PUSH
15721: LD_INT 9
15723: PUSH
15724: LD_INT 10
15726: PUSH
15727: LD_INT 11
15729: PUSH
15730: LD_INT 12
15732: PUSH
15733: LD_INT 14
15735: PUSH
15736: LD_INT 15
15738: PUSH
15739: LD_INT 16
15741: PUSH
15742: LD_INT 17
15744: PUSH
15745: LD_INT 18
15747: PUSH
15748: LD_INT 19
15750: PUSH
15751: LD_INT 20
15753: PUSH
15754: LD_INT 21
15756: PUSH
15757: LD_INT 22
15759: PUSH
15760: LD_INT 23
15762: PUSH
15763: LD_INT 24
15765: PUSH
15766: LD_INT 25
15768: PUSH
15769: LD_INT 26
15771: PUSH
15772: LD_INT 27
15774: PUSH
15775: LD_INT 28
15777: PUSH
15778: LD_INT 30
15780: PUSH
15781: LD_INT 31
15783: PUSH
15784: LD_INT 32
15786: PUSH
15787: LD_INT 33
15789: PUSH
15790: LD_INT 34
15792: PUSH
15793: LD_INT 36
15795: PUSH
15796: EMPTY
15797: LIST
15798: LIST
15799: LIST
15800: LIST
15801: LIST
15802: LIST
15803: LIST
15804: LIST
15805: LIST
15806: LIST
15807: LIST
15808: LIST
15809: LIST
15810: LIST
15811: LIST
15812: LIST
15813: LIST
15814: LIST
15815: LIST
15816: LIST
15817: LIST
15818: LIST
15819: LIST
15820: LIST
15821: LIST
15822: LIST
15823: LIST
15824: LIST
15825: LIST
15826: LIST
15827: LIST
15828: PUSH
15829: LD_INT 101
15831: PUSH
15832: LD_INT 102
15834: PUSH
15835: LD_INT 103
15837: PUSH
15838: LD_INT 104
15840: PUSH
15841: LD_INT 105
15843: PUSH
15844: LD_INT 106
15846: PUSH
15847: LD_INT 107
15849: PUSH
15850: LD_INT 108
15852: PUSH
15853: LD_INT 109
15855: PUSH
15856: LD_INT 110
15858: PUSH
15859: LD_INT 111
15861: PUSH
15862: LD_INT 112
15864: PUSH
15865: LD_INT 113
15867: PUSH
15868: LD_INT 114
15870: PUSH
15871: LD_INT 116
15873: PUSH
15874: LD_INT 117
15876: PUSH
15877: LD_INT 118
15879: PUSH
15880: EMPTY
15881: LIST
15882: LIST
15883: LIST
15884: LIST
15885: LIST
15886: LIST
15887: LIST
15888: LIST
15889: LIST
15890: LIST
15891: LIST
15892: LIST
15893: LIST
15894: LIST
15895: LIST
15896: LIST
15897: LIST
15898: PUSH
15899: EMPTY
15900: LIST
15901: LIST
15902: ST_TO_ADDR
15903: GO 17142
15905: LD_INT 14
15907: DOUBLE
15908: EQUAL
15909: IFTRUE 15913
15911: GO 16137
15913: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
15914: LD_ADDR_VAR 0 2
15918: PUSH
15919: LD_INT 1
15921: PUSH
15922: LD_INT 2
15924: PUSH
15925: LD_INT 3
15927: PUSH
15928: LD_INT 4
15930: PUSH
15931: LD_INT 5
15933: PUSH
15934: LD_INT 6
15936: PUSH
15937: LD_INT 7
15939: PUSH
15940: LD_INT 8
15942: PUSH
15943: LD_INT 9
15945: PUSH
15946: LD_INT 10
15948: PUSH
15949: LD_INT 11
15951: PUSH
15952: LD_INT 12
15954: PUSH
15955: LD_INT 13
15957: PUSH
15958: LD_INT 14
15960: PUSH
15961: LD_INT 15
15963: PUSH
15964: LD_INT 16
15966: PUSH
15967: LD_INT 17
15969: PUSH
15970: LD_INT 18
15972: PUSH
15973: LD_INT 19
15975: PUSH
15976: LD_INT 20
15978: PUSH
15979: LD_INT 21
15981: PUSH
15982: LD_INT 22
15984: PUSH
15985: LD_INT 23
15987: PUSH
15988: LD_INT 24
15990: PUSH
15991: LD_INT 25
15993: PUSH
15994: LD_INT 26
15996: PUSH
15997: LD_INT 27
15999: PUSH
16000: LD_INT 28
16002: PUSH
16003: LD_INT 29
16005: PUSH
16006: LD_INT 30
16008: PUSH
16009: LD_INT 31
16011: PUSH
16012: LD_INT 32
16014: PUSH
16015: LD_INT 33
16017: PUSH
16018: LD_INT 34
16020: PUSH
16021: LD_INT 36
16023: PUSH
16024: EMPTY
16025: LIST
16026: LIST
16027: LIST
16028: LIST
16029: LIST
16030: LIST
16031: LIST
16032: LIST
16033: LIST
16034: LIST
16035: LIST
16036: LIST
16037: LIST
16038: LIST
16039: LIST
16040: LIST
16041: LIST
16042: LIST
16043: LIST
16044: LIST
16045: LIST
16046: LIST
16047: LIST
16048: LIST
16049: LIST
16050: LIST
16051: LIST
16052: LIST
16053: LIST
16054: LIST
16055: LIST
16056: LIST
16057: LIST
16058: LIST
16059: LIST
16060: PUSH
16061: LD_INT 101
16063: PUSH
16064: LD_INT 102
16066: PUSH
16067: LD_INT 103
16069: PUSH
16070: LD_INT 104
16072: PUSH
16073: LD_INT 105
16075: PUSH
16076: LD_INT 106
16078: PUSH
16079: LD_INT 107
16081: PUSH
16082: LD_INT 108
16084: PUSH
16085: LD_INT 109
16087: PUSH
16088: LD_INT 110
16090: PUSH
16091: LD_INT 111
16093: PUSH
16094: LD_INT 112
16096: PUSH
16097: LD_INT 113
16099: PUSH
16100: LD_INT 114
16102: PUSH
16103: LD_INT 116
16105: PUSH
16106: LD_INT 117
16108: PUSH
16109: LD_INT 118
16111: PUSH
16112: EMPTY
16113: LIST
16114: LIST
16115: LIST
16116: LIST
16117: LIST
16118: LIST
16119: LIST
16120: LIST
16121: LIST
16122: LIST
16123: LIST
16124: LIST
16125: LIST
16126: LIST
16127: LIST
16128: LIST
16129: LIST
16130: PUSH
16131: EMPTY
16132: LIST
16133: LIST
16134: ST_TO_ADDR
16135: GO 17142
16137: LD_INT 15
16139: DOUBLE
16140: EQUAL
16141: IFTRUE 16145
16143: GO 16369
16145: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
16146: LD_ADDR_VAR 0 2
16150: PUSH
16151: LD_INT 1
16153: PUSH
16154: LD_INT 2
16156: PUSH
16157: LD_INT 3
16159: PUSH
16160: LD_INT 4
16162: PUSH
16163: LD_INT 5
16165: PUSH
16166: LD_INT 6
16168: PUSH
16169: LD_INT 7
16171: PUSH
16172: LD_INT 8
16174: PUSH
16175: LD_INT 9
16177: PUSH
16178: LD_INT 10
16180: PUSH
16181: LD_INT 11
16183: PUSH
16184: LD_INT 12
16186: PUSH
16187: LD_INT 13
16189: PUSH
16190: LD_INT 14
16192: PUSH
16193: LD_INT 15
16195: PUSH
16196: LD_INT 16
16198: PUSH
16199: LD_INT 17
16201: PUSH
16202: LD_INT 18
16204: PUSH
16205: LD_INT 19
16207: PUSH
16208: LD_INT 20
16210: PUSH
16211: LD_INT 21
16213: PUSH
16214: LD_INT 22
16216: PUSH
16217: LD_INT 23
16219: PUSH
16220: LD_INT 24
16222: PUSH
16223: LD_INT 25
16225: PUSH
16226: LD_INT 26
16228: PUSH
16229: LD_INT 27
16231: PUSH
16232: LD_INT 28
16234: PUSH
16235: LD_INT 29
16237: PUSH
16238: LD_INT 30
16240: PUSH
16241: LD_INT 31
16243: PUSH
16244: LD_INT 32
16246: PUSH
16247: LD_INT 33
16249: PUSH
16250: LD_INT 34
16252: PUSH
16253: LD_INT 36
16255: PUSH
16256: EMPTY
16257: LIST
16258: LIST
16259: LIST
16260: LIST
16261: LIST
16262: LIST
16263: LIST
16264: LIST
16265: LIST
16266: LIST
16267: LIST
16268: LIST
16269: LIST
16270: LIST
16271: LIST
16272: LIST
16273: LIST
16274: LIST
16275: LIST
16276: LIST
16277: LIST
16278: LIST
16279: LIST
16280: LIST
16281: LIST
16282: LIST
16283: LIST
16284: LIST
16285: LIST
16286: LIST
16287: LIST
16288: LIST
16289: LIST
16290: LIST
16291: LIST
16292: PUSH
16293: LD_INT 101
16295: PUSH
16296: LD_INT 102
16298: PUSH
16299: LD_INT 103
16301: PUSH
16302: LD_INT 104
16304: PUSH
16305: LD_INT 105
16307: PUSH
16308: LD_INT 106
16310: PUSH
16311: LD_INT 107
16313: PUSH
16314: LD_INT 108
16316: PUSH
16317: LD_INT 109
16319: PUSH
16320: LD_INT 110
16322: PUSH
16323: LD_INT 111
16325: PUSH
16326: LD_INT 112
16328: PUSH
16329: LD_INT 113
16331: PUSH
16332: LD_INT 114
16334: PUSH
16335: LD_INT 116
16337: PUSH
16338: LD_INT 117
16340: PUSH
16341: LD_INT 118
16343: PUSH
16344: EMPTY
16345: LIST
16346: LIST
16347: LIST
16348: LIST
16349: LIST
16350: LIST
16351: LIST
16352: LIST
16353: LIST
16354: LIST
16355: LIST
16356: LIST
16357: LIST
16358: LIST
16359: LIST
16360: LIST
16361: LIST
16362: PUSH
16363: EMPTY
16364: LIST
16365: LIST
16366: ST_TO_ADDR
16367: GO 17142
16369: LD_INT 16
16371: DOUBLE
16372: EQUAL
16373: IFTRUE 16377
16375: GO 16513
16377: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
16378: LD_ADDR_VAR 0 2
16382: PUSH
16383: LD_INT 2
16385: PUSH
16386: LD_INT 4
16388: PUSH
16389: LD_INT 5
16391: PUSH
16392: LD_INT 7
16394: PUSH
16395: LD_INT 11
16397: PUSH
16398: LD_INT 12
16400: PUSH
16401: LD_INT 15
16403: PUSH
16404: LD_INT 16
16406: PUSH
16407: LD_INT 20
16409: PUSH
16410: LD_INT 21
16412: PUSH
16413: LD_INT 22
16415: PUSH
16416: LD_INT 23
16418: PUSH
16419: LD_INT 25
16421: PUSH
16422: LD_INT 26
16424: PUSH
16425: LD_INT 30
16427: PUSH
16428: LD_INT 31
16430: PUSH
16431: LD_INT 32
16433: PUSH
16434: LD_INT 33
16436: PUSH
16437: LD_INT 34
16439: PUSH
16440: EMPTY
16441: LIST
16442: LIST
16443: LIST
16444: LIST
16445: LIST
16446: LIST
16447: LIST
16448: LIST
16449: LIST
16450: LIST
16451: LIST
16452: LIST
16453: LIST
16454: LIST
16455: LIST
16456: LIST
16457: LIST
16458: LIST
16459: LIST
16460: PUSH
16461: LD_INT 101
16463: PUSH
16464: LD_INT 102
16466: PUSH
16467: LD_INT 103
16469: PUSH
16470: LD_INT 106
16472: PUSH
16473: LD_INT 108
16475: PUSH
16476: LD_INT 112
16478: PUSH
16479: LD_INT 113
16481: PUSH
16482: LD_INT 114
16484: PUSH
16485: LD_INT 116
16487: PUSH
16488: LD_INT 117
16490: PUSH
16491: LD_INT 118
16493: PUSH
16494: EMPTY
16495: LIST
16496: LIST
16497: LIST
16498: LIST
16499: LIST
16500: LIST
16501: LIST
16502: LIST
16503: LIST
16504: LIST
16505: LIST
16506: PUSH
16507: EMPTY
16508: LIST
16509: LIST
16510: ST_TO_ADDR
16511: GO 17142
16513: LD_INT 17
16515: DOUBLE
16516: EQUAL
16517: IFTRUE 16521
16519: GO 16745
16521: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
16522: LD_ADDR_VAR 0 2
16526: PUSH
16527: LD_INT 1
16529: PUSH
16530: LD_INT 2
16532: PUSH
16533: LD_INT 3
16535: PUSH
16536: LD_INT 4
16538: PUSH
16539: LD_INT 5
16541: PUSH
16542: LD_INT 6
16544: PUSH
16545: LD_INT 7
16547: PUSH
16548: LD_INT 8
16550: PUSH
16551: LD_INT 9
16553: PUSH
16554: LD_INT 10
16556: PUSH
16557: LD_INT 11
16559: PUSH
16560: LD_INT 12
16562: PUSH
16563: LD_INT 13
16565: PUSH
16566: LD_INT 14
16568: PUSH
16569: LD_INT 15
16571: PUSH
16572: LD_INT 16
16574: PUSH
16575: LD_INT 17
16577: PUSH
16578: LD_INT 18
16580: PUSH
16581: LD_INT 19
16583: PUSH
16584: LD_INT 20
16586: PUSH
16587: LD_INT 21
16589: PUSH
16590: LD_INT 22
16592: PUSH
16593: LD_INT 23
16595: PUSH
16596: LD_INT 24
16598: PUSH
16599: LD_INT 25
16601: PUSH
16602: LD_INT 26
16604: PUSH
16605: LD_INT 27
16607: PUSH
16608: LD_INT 28
16610: PUSH
16611: LD_INT 29
16613: PUSH
16614: LD_INT 30
16616: PUSH
16617: LD_INT 31
16619: PUSH
16620: LD_INT 32
16622: PUSH
16623: LD_INT 33
16625: PUSH
16626: LD_INT 34
16628: PUSH
16629: LD_INT 36
16631: PUSH
16632: EMPTY
16633: LIST
16634: LIST
16635: LIST
16636: LIST
16637: LIST
16638: LIST
16639: LIST
16640: LIST
16641: LIST
16642: LIST
16643: LIST
16644: LIST
16645: LIST
16646: LIST
16647: LIST
16648: LIST
16649: LIST
16650: LIST
16651: LIST
16652: LIST
16653: LIST
16654: LIST
16655: LIST
16656: LIST
16657: LIST
16658: LIST
16659: LIST
16660: LIST
16661: LIST
16662: LIST
16663: LIST
16664: LIST
16665: LIST
16666: LIST
16667: LIST
16668: PUSH
16669: LD_INT 101
16671: PUSH
16672: LD_INT 102
16674: PUSH
16675: LD_INT 103
16677: PUSH
16678: LD_INT 104
16680: PUSH
16681: LD_INT 105
16683: PUSH
16684: LD_INT 106
16686: PUSH
16687: LD_INT 107
16689: PUSH
16690: LD_INT 108
16692: PUSH
16693: LD_INT 109
16695: PUSH
16696: LD_INT 110
16698: PUSH
16699: LD_INT 111
16701: PUSH
16702: LD_INT 112
16704: PUSH
16705: LD_INT 113
16707: PUSH
16708: LD_INT 114
16710: PUSH
16711: LD_INT 116
16713: PUSH
16714: LD_INT 117
16716: PUSH
16717: LD_INT 118
16719: PUSH
16720: EMPTY
16721: LIST
16722: LIST
16723: LIST
16724: LIST
16725: LIST
16726: LIST
16727: LIST
16728: LIST
16729: LIST
16730: LIST
16731: LIST
16732: LIST
16733: LIST
16734: LIST
16735: LIST
16736: LIST
16737: LIST
16738: PUSH
16739: EMPTY
16740: LIST
16741: LIST
16742: ST_TO_ADDR
16743: GO 17142
16745: LD_INT 18
16747: DOUBLE
16748: EQUAL
16749: IFTRUE 16753
16751: GO 16901
16753: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
16754: LD_ADDR_VAR 0 2
16758: PUSH
16759: LD_INT 2
16761: PUSH
16762: LD_INT 4
16764: PUSH
16765: LD_INT 5
16767: PUSH
16768: LD_INT 7
16770: PUSH
16771: LD_INT 11
16773: PUSH
16774: LD_INT 12
16776: PUSH
16777: LD_INT 15
16779: PUSH
16780: LD_INT 16
16782: PUSH
16783: LD_INT 20
16785: PUSH
16786: LD_INT 21
16788: PUSH
16789: LD_INT 22
16791: PUSH
16792: LD_INT 23
16794: PUSH
16795: LD_INT 25
16797: PUSH
16798: LD_INT 26
16800: PUSH
16801: LD_INT 30
16803: PUSH
16804: LD_INT 31
16806: PUSH
16807: LD_INT 32
16809: PUSH
16810: LD_INT 33
16812: PUSH
16813: LD_INT 34
16815: PUSH
16816: LD_INT 35
16818: PUSH
16819: LD_INT 36
16821: PUSH
16822: EMPTY
16823: LIST
16824: LIST
16825: LIST
16826: LIST
16827: LIST
16828: LIST
16829: LIST
16830: LIST
16831: LIST
16832: LIST
16833: LIST
16834: LIST
16835: LIST
16836: LIST
16837: LIST
16838: LIST
16839: LIST
16840: LIST
16841: LIST
16842: LIST
16843: LIST
16844: PUSH
16845: LD_INT 101
16847: PUSH
16848: LD_INT 102
16850: PUSH
16851: LD_INT 103
16853: PUSH
16854: LD_INT 106
16856: PUSH
16857: LD_INT 108
16859: PUSH
16860: LD_INT 112
16862: PUSH
16863: LD_INT 113
16865: PUSH
16866: LD_INT 114
16868: PUSH
16869: LD_INT 115
16871: PUSH
16872: LD_INT 116
16874: PUSH
16875: LD_INT 117
16877: PUSH
16878: LD_INT 118
16880: PUSH
16881: EMPTY
16882: LIST
16883: LIST
16884: LIST
16885: LIST
16886: LIST
16887: LIST
16888: LIST
16889: LIST
16890: LIST
16891: LIST
16892: LIST
16893: LIST
16894: PUSH
16895: EMPTY
16896: LIST
16897: LIST
16898: ST_TO_ADDR
16899: GO 17142
16901: LD_INT 19
16903: DOUBLE
16904: EQUAL
16905: IFTRUE 16909
16907: GO 17141
16909: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
16910: LD_ADDR_VAR 0 2
16914: PUSH
16915: LD_INT 1
16917: PUSH
16918: LD_INT 2
16920: PUSH
16921: LD_INT 3
16923: PUSH
16924: LD_INT 4
16926: PUSH
16927: LD_INT 5
16929: PUSH
16930: LD_INT 6
16932: PUSH
16933: LD_INT 7
16935: PUSH
16936: LD_INT 8
16938: PUSH
16939: LD_INT 9
16941: PUSH
16942: LD_INT 10
16944: PUSH
16945: LD_INT 11
16947: PUSH
16948: LD_INT 12
16950: PUSH
16951: LD_INT 13
16953: PUSH
16954: LD_INT 14
16956: PUSH
16957: LD_INT 15
16959: PUSH
16960: LD_INT 16
16962: PUSH
16963: LD_INT 17
16965: PUSH
16966: LD_INT 18
16968: PUSH
16969: LD_INT 19
16971: PUSH
16972: LD_INT 20
16974: PUSH
16975: LD_INT 21
16977: PUSH
16978: LD_INT 22
16980: PUSH
16981: LD_INT 23
16983: PUSH
16984: LD_INT 24
16986: PUSH
16987: LD_INT 25
16989: PUSH
16990: LD_INT 26
16992: PUSH
16993: LD_INT 27
16995: PUSH
16996: LD_INT 28
16998: PUSH
16999: LD_INT 29
17001: PUSH
17002: LD_INT 30
17004: PUSH
17005: LD_INT 31
17007: PUSH
17008: LD_INT 32
17010: PUSH
17011: LD_INT 33
17013: PUSH
17014: LD_INT 34
17016: PUSH
17017: LD_INT 35
17019: PUSH
17020: LD_INT 36
17022: PUSH
17023: EMPTY
17024: LIST
17025: LIST
17026: LIST
17027: LIST
17028: LIST
17029: LIST
17030: LIST
17031: LIST
17032: LIST
17033: LIST
17034: LIST
17035: LIST
17036: LIST
17037: LIST
17038: LIST
17039: LIST
17040: LIST
17041: LIST
17042: LIST
17043: LIST
17044: LIST
17045: LIST
17046: LIST
17047: LIST
17048: LIST
17049: LIST
17050: LIST
17051: LIST
17052: LIST
17053: LIST
17054: LIST
17055: LIST
17056: LIST
17057: LIST
17058: LIST
17059: LIST
17060: PUSH
17061: LD_INT 101
17063: PUSH
17064: LD_INT 102
17066: PUSH
17067: LD_INT 103
17069: PUSH
17070: LD_INT 104
17072: PUSH
17073: LD_INT 105
17075: PUSH
17076: LD_INT 106
17078: PUSH
17079: LD_INT 107
17081: PUSH
17082: LD_INT 108
17084: PUSH
17085: LD_INT 109
17087: PUSH
17088: LD_INT 110
17090: PUSH
17091: LD_INT 111
17093: PUSH
17094: LD_INT 112
17096: PUSH
17097: LD_INT 113
17099: PUSH
17100: LD_INT 114
17102: PUSH
17103: LD_INT 115
17105: PUSH
17106: LD_INT 116
17108: PUSH
17109: LD_INT 117
17111: PUSH
17112: LD_INT 118
17114: PUSH
17115: EMPTY
17116: LIST
17117: LIST
17118: LIST
17119: LIST
17120: LIST
17121: LIST
17122: LIST
17123: LIST
17124: LIST
17125: LIST
17126: LIST
17127: LIST
17128: LIST
17129: LIST
17130: LIST
17131: LIST
17132: LIST
17133: LIST
17134: PUSH
17135: EMPTY
17136: LIST
17137: LIST
17138: ST_TO_ADDR
17139: GO 17142
17141: POP
// end else
17142: GO 17373
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
17144: LD_ADDR_VAR 0 2
17148: PUSH
17149: LD_INT 1
17151: PUSH
17152: LD_INT 2
17154: PUSH
17155: LD_INT 3
17157: PUSH
17158: LD_INT 4
17160: PUSH
17161: LD_INT 5
17163: PUSH
17164: LD_INT 6
17166: PUSH
17167: LD_INT 7
17169: PUSH
17170: LD_INT 8
17172: PUSH
17173: LD_INT 9
17175: PUSH
17176: LD_INT 10
17178: PUSH
17179: LD_INT 11
17181: PUSH
17182: LD_INT 12
17184: PUSH
17185: LD_INT 13
17187: PUSH
17188: LD_INT 14
17190: PUSH
17191: LD_INT 15
17193: PUSH
17194: LD_INT 16
17196: PUSH
17197: LD_INT 17
17199: PUSH
17200: LD_INT 18
17202: PUSH
17203: LD_INT 19
17205: PUSH
17206: LD_INT 20
17208: PUSH
17209: LD_INT 21
17211: PUSH
17212: LD_INT 22
17214: PUSH
17215: LD_INT 23
17217: PUSH
17218: LD_INT 24
17220: PUSH
17221: LD_INT 25
17223: PUSH
17224: LD_INT 26
17226: PUSH
17227: LD_INT 27
17229: PUSH
17230: LD_INT 28
17232: PUSH
17233: LD_INT 29
17235: PUSH
17236: LD_INT 30
17238: PUSH
17239: LD_INT 31
17241: PUSH
17242: LD_INT 32
17244: PUSH
17245: LD_INT 33
17247: PUSH
17248: LD_INT 34
17250: PUSH
17251: LD_INT 35
17253: PUSH
17254: LD_INT 36
17256: PUSH
17257: EMPTY
17258: LIST
17259: LIST
17260: LIST
17261: LIST
17262: LIST
17263: LIST
17264: LIST
17265: LIST
17266: LIST
17267: LIST
17268: LIST
17269: LIST
17270: LIST
17271: LIST
17272: LIST
17273: LIST
17274: LIST
17275: LIST
17276: LIST
17277: LIST
17278: LIST
17279: LIST
17280: LIST
17281: LIST
17282: LIST
17283: LIST
17284: LIST
17285: LIST
17286: LIST
17287: LIST
17288: LIST
17289: LIST
17290: LIST
17291: LIST
17292: LIST
17293: LIST
17294: PUSH
17295: LD_INT 101
17297: PUSH
17298: LD_INT 102
17300: PUSH
17301: LD_INT 103
17303: PUSH
17304: LD_INT 104
17306: PUSH
17307: LD_INT 105
17309: PUSH
17310: LD_INT 106
17312: PUSH
17313: LD_INT 107
17315: PUSH
17316: LD_INT 108
17318: PUSH
17319: LD_INT 109
17321: PUSH
17322: LD_INT 110
17324: PUSH
17325: LD_INT 111
17327: PUSH
17328: LD_INT 112
17330: PUSH
17331: LD_INT 113
17333: PUSH
17334: LD_INT 114
17336: PUSH
17337: LD_INT 115
17339: PUSH
17340: LD_INT 116
17342: PUSH
17343: LD_INT 117
17345: PUSH
17346: LD_INT 118
17348: PUSH
17349: EMPTY
17350: LIST
17351: LIST
17352: LIST
17353: LIST
17354: LIST
17355: LIST
17356: LIST
17357: LIST
17358: LIST
17359: LIST
17360: LIST
17361: LIST
17362: LIST
17363: LIST
17364: LIST
17365: LIST
17366: LIST
17367: LIST
17368: PUSH
17369: EMPTY
17370: LIST
17371: LIST
17372: ST_TO_ADDR
// if result then
17373: LD_VAR 0 2
17377: IFFALSE 18163
// begin normal :=  ;
17379: LD_ADDR_VAR 0 5
17383: PUSH
17384: LD_STRING 
17386: ST_TO_ADDR
// hardcore :=  ;
17387: LD_ADDR_VAR 0 6
17391: PUSH
17392: LD_STRING 
17394: ST_TO_ADDR
// active :=  ;
17395: LD_ADDR_VAR 0 7
17399: PUSH
17400: LD_STRING 
17402: ST_TO_ADDR
// for i = 1 to normalCounter do
17403: LD_ADDR_VAR 0 8
17407: PUSH
17408: DOUBLE
17409: LD_INT 1
17411: DEC
17412: ST_TO_ADDR
17413: LD_EXP 22
17417: PUSH
17418: FOR_TO
17419: IFFALSE 17520
// begin tmp := 0 ;
17421: LD_ADDR_VAR 0 3
17425: PUSH
17426: LD_STRING 0
17428: ST_TO_ADDR
// if result [ 1 ] then
17429: LD_VAR 0 2
17433: PUSH
17434: LD_INT 1
17436: ARRAY
17437: IFFALSE 17502
// if result [ 1 ] [ 1 ] = i then
17439: LD_VAR 0 2
17443: PUSH
17444: LD_INT 1
17446: ARRAY
17447: PUSH
17448: LD_INT 1
17450: ARRAY
17451: PUSH
17452: LD_VAR 0 8
17456: EQUAL
17457: IFFALSE 17502
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
17459: LD_ADDR_VAR 0 2
17463: PUSH
17464: LD_VAR 0 2
17468: PPUSH
17469: LD_INT 1
17471: PPUSH
17472: LD_VAR 0 2
17476: PUSH
17477: LD_INT 1
17479: ARRAY
17480: PPUSH
17481: LD_INT 1
17483: PPUSH
17484: CALL_OW 3
17488: PPUSH
17489: CALL_OW 1
17493: ST_TO_ADDR
// tmp := 1 ;
17494: LD_ADDR_VAR 0 3
17498: PUSH
17499: LD_STRING 1
17501: ST_TO_ADDR
// end ; normal := normal & tmp ;
17502: LD_ADDR_VAR 0 5
17506: PUSH
17507: LD_VAR 0 5
17511: PUSH
17512: LD_VAR 0 3
17516: STR
17517: ST_TO_ADDR
// end ;
17518: GO 17418
17520: POP
17521: POP
// for i = 1 to hardcoreCounter do
17522: LD_ADDR_VAR 0 8
17526: PUSH
17527: DOUBLE
17528: LD_INT 1
17530: DEC
17531: ST_TO_ADDR
17532: LD_EXP 23
17536: PUSH
17537: FOR_TO
17538: IFFALSE 17643
// begin tmp := 0 ;
17540: LD_ADDR_VAR 0 3
17544: PUSH
17545: LD_STRING 0
17547: ST_TO_ADDR
// if result [ 2 ] then
17548: LD_VAR 0 2
17552: PUSH
17553: LD_INT 2
17555: ARRAY
17556: IFFALSE 17625
// if result [ 2 ] [ 1 ] = 100 + i then
17558: LD_VAR 0 2
17562: PUSH
17563: LD_INT 2
17565: ARRAY
17566: PUSH
17567: LD_INT 1
17569: ARRAY
17570: PUSH
17571: LD_INT 100
17573: PUSH
17574: LD_VAR 0 8
17578: PLUS
17579: EQUAL
17580: IFFALSE 17625
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
17582: LD_ADDR_VAR 0 2
17586: PUSH
17587: LD_VAR 0 2
17591: PPUSH
17592: LD_INT 2
17594: PPUSH
17595: LD_VAR 0 2
17599: PUSH
17600: LD_INT 2
17602: ARRAY
17603: PPUSH
17604: LD_INT 1
17606: PPUSH
17607: CALL_OW 3
17611: PPUSH
17612: CALL_OW 1
17616: ST_TO_ADDR
// tmp := 1 ;
17617: LD_ADDR_VAR 0 3
17621: PUSH
17622: LD_STRING 1
17624: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
17625: LD_ADDR_VAR 0 6
17629: PUSH
17630: LD_VAR 0 6
17634: PUSH
17635: LD_VAR 0 3
17639: STR
17640: ST_TO_ADDR
// end ;
17641: GO 17537
17643: POP
17644: POP
// if isGameLoad then
17645: LD_VAR 0 1
17649: IFFALSE 18124
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
17651: LD_ADDR_VAR 0 4
17655: PUSH
17656: LD_EXP 26
17660: PUSH
17661: LD_EXP 25
17665: PUSH
17666: LD_EXP 27
17670: PUSH
17671: LD_EXP 24
17675: PUSH
17676: LD_EXP 28
17680: PUSH
17681: LD_EXP 29
17685: PUSH
17686: LD_EXP 30
17690: PUSH
17691: LD_EXP 31
17695: PUSH
17696: LD_EXP 32
17700: PUSH
17701: LD_EXP 33
17705: PUSH
17706: LD_EXP 34
17710: PUSH
17711: LD_EXP 35
17715: PUSH
17716: LD_EXP 36
17720: PUSH
17721: LD_EXP 37
17725: PUSH
17726: LD_EXP 45
17730: PUSH
17731: LD_EXP 46
17735: PUSH
17736: LD_EXP 47
17740: PUSH
17741: LD_EXP 48
17745: PUSH
17746: LD_EXP 50
17750: PUSH
17751: LD_EXP 51
17755: PUSH
17756: LD_EXP 52
17760: PUSH
17761: LD_EXP 55
17765: PUSH
17766: LD_EXP 57
17770: PUSH
17771: LD_EXP 58
17775: PUSH
17776: LD_EXP 59
17780: PUSH
17781: LD_EXP 61
17785: PUSH
17786: LD_EXP 62
17790: PUSH
17791: LD_EXP 65
17795: PUSH
17796: LD_EXP 66
17800: PUSH
17801: LD_EXP 67
17805: PUSH
17806: LD_EXP 68
17810: PUSH
17811: LD_EXP 69
17815: PUSH
17816: LD_EXP 70
17820: PUSH
17821: LD_EXP 71
17825: PUSH
17826: LD_EXP 72
17830: PUSH
17831: LD_EXP 73
17835: PUSH
17836: LD_EXP 38
17840: PUSH
17841: LD_EXP 39
17845: PUSH
17846: LD_EXP 42
17850: PUSH
17851: LD_EXP 43
17855: PUSH
17856: LD_EXP 44
17860: PUSH
17861: LD_EXP 40
17865: PUSH
17866: LD_EXP 41
17870: PUSH
17871: LD_EXP 49
17875: PUSH
17876: LD_EXP 53
17880: PUSH
17881: LD_EXP 54
17885: PUSH
17886: LD_EXP 56
17890: PUSH
17891: LD_EXP 60
17895: PUSH
17896: LD_EXP 63
17900: PUSH
17901: LD_EXP 64
17905: PUSH
17906: LD_EXP 74
17910: PUSH
17911: LD_EXP 75
17915: PUSH
17916: LD_EXP 76
17920: PUSH
17921: LD_EXP 77
17925: PUSH
17926: EMPTY
17927: LIST
17928: LIST
17929: LIST
17930: LIST
17931: LIST
17932: LIST
17933: LIST
17934: LIST
17935: LIST
17936: LIST
17937: LIST
17938: LIST
17939: LIST
17940: LIST
17941: LIST
17942: LIST
17943: LIST
17944: LIST
17945: LIST
17946: LIST
17947: LIST
17948: LIST
17949: LIST
17950: LIST
17951: LIST
17952: LIST
17953: LIST
17954: LIST
17955: LIST
17956: LIST
17957: LIST
17958: LIST
17959: LIST
17960: LIST
17961: LIST
17962: LIST
17963: LIST
17964: LIST
17965: LIST
17966: LIST
17967: LIST
17968: LIST
17969: LIST
17970: LIST
17971: LIST
17972: LIST
17973: LIST
17974: LIST
17975: LIST
17976: LIST
17977: LIST
17978: LIST
17979: LIST
17980: LIST
17981: ST_TO_ADDR
// tmp :=  ;
17982: LD_ADDR_VAR 0 3
17986: PUSH
17987: LD_STRING 
17989: ST_TO_ADDR
// for i = 1 to normalCounter do
17990: LD_ADDR_VAR 0 8
17994: PUSH
17995: DOUBLE
17996: LD_INT 1
17998: DEC
17999: ST_TO_ADDR
18000: LD_EXP 22
18004: PUSH
18005: FOR_TO
18006: IFFALSE 18042
// begin if flags [ i ] then
18008: LD_VAR 0 4
18012: PUSH
18013: LD_VAR 0 8
18017: ARRAY
18018: IFFALSE 18040
// tmp := tmp & i & ; ;
18020: LD_ADDR_VAR 0 3
18024: PUSH
18025: LD_VAR 0 3
18029: PUSH
18030: LD_VAR 0 8
18034: STR
18035: PUSH
18036: LD_STRING ;
18038: STR
18039: ST_TO_ADDR
// end ;
18040: GO 18005
18042: POP
18043: POP
// for i = 1 to hardcoreCounter do
18044: LD_ADDR_VAR 0 8
18048: PUSH
18049: DOUBLE
18050: LD_INT 1
18052: DEC
18053: ST_TO_ADDR
18054: LD_EXP 23
18058: PUSH
18059: FOR_TO
18060: IFFALSE 18106
// begin if flags [ normalCounter + i ] then
18062: LD_VAR 0 4
18066: PUSH
18067: LD_EXP 22
18071: PUSH
18072: LD_VAR 0 8
18076: PLUS
18077: ARRAY
18078: IFFALSE 18104
// tmp := tmp & ( 100 + i ) & ; ;
18080: LD_ADDR_VAR 0 3
18084: PUSH
18085: LD_VAR 0 3
18089: PUSH
18090: LD_INT 100
18092: PUSH
18093: LD_VAR 0 8
18097: PLUS
18098: STR
18099: PUSH
18100: LD_STRING ;
18102: STR
18103: ST_TO_ADDR
// end ;
18104: GO 18059
18106: POP
18107: POP
// if tmp then
18108: LD_VAR 0 3
18112: IFFALSE 18124
// active := tmp ;
18114: LD_ADDR_VAR 0 7
18118: PUSH
18119: LD_VAR 0 3
18123: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
18124: LD_STRING getStreamItemsFromMission("
18126: PUSH
18127: LD_VAR 0 5
18131: STR
18132: PUSH
18133: LD_STRING ","
18135: STR
18136: PUSH
18137: LD_VAR 0 6
18141: STR
18142: PUSH
18143: LD_STRING ","
18145: STR
18146: PUSH
18147: LD_VAR 0 7
18151: STR
18152: PUSH
18153: LD_STRING ")
18155: STR
18156: PPUSH
18157: CALL_OW 559
// end else
18161: GO 18170
// ToLua ( getStreamItemsFromMission("","","") ) ;
18163: LD_STRING getStreamItemsFromMission("","","")
18165: PPUSH
18166: CALL_OW 559
// end ;
18170: LD_VAR 0 2
18174: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
18175: LD_EXP 21
18179: PUSH
18180: LD_EXP 26
18184: AND
18185: IFFALSE 18309
18187: GO 18189
18189: DISABLE
18190: LD_INT 0
18192: PPUSH
18193: PPUSH
// begin enable ;
18194: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
18195: LD_ADDR_VAR 0 2
18199: PUSH
18200: LD_INT 22
18202: PUSH
18203: LD_OWVAR 2
18207: PUSH
18208: EMPTY
18209: LIST
18210: LIST
18211: PUSH
18212: LD_INT 2
18214: PUSH
18215: LD_INT 34
18217: PUSH
18218: LD_INT 7
18220: PUSH
18221: EMPTY
18222: LIST
18223: LIST
18224: PUSH
18225: LD_INT 34
18227: PUSH
18228: LD_INT 45
18230: PUSH
18231: EMPTY
18232: LIST
18233: LIST
18234: PUSH
18235: LD_INT 34
18237: PUSH
18238: LD_INT 28
18240: PUSH
18241: EMPTY
18242: LIST
18243: LIST
18244: PUSH
18245: LD_INT 34
18247: PUSH
18248: LD_INT 47
18250: PUSH
18251: EMPTY
18252: LIST
18253: LIST
18254: PUSH
18255: EMPTY
18256: LIST
18257: LIST
18258: LIST
18259: LIST
18260: LIST
18261: PUSH
18262: EMPTY
18263: LIST
18264: LIST
18265: PPUSH
18266: CALL_OW 69
18270: ST_TO_ADDR
// if not tmp then
18271: LD_VAR 0 2
18275: NOT
18276: IFFALSE 18280
// exit ;
18278: GO 18309
// for i in tmp do
18280: LD_ADDR_VAR 0 1
18284: PUSH
18285: LD_VAR 0 2
18289: PUSH
18290: FOR_IN
18291: IFFALSE 18307
// begin SetLives ( i , 0 ) ;
18293: LD_VAR 0 1
18297: PPUSH
18298: LD_INT 0
18300: PPUSH
18301: CALL_OW 234
// end ;
18305: GO 18290
18307: POP
18308: POP
// end ;
18309: PPOPN 2
18311: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
18312: LD_EXP 21
18316: PUSH
18317: LD_EXP 27
18321: AND
18322: IFFALSE 18406
18324: GO 18326
18326: DISABLE
18327: LD_INT 0
18329: PPUSH
18330: PPUSH
// begin enable ;
18331: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
18332: LD_ADDR_VAR 0 2
18336: PUSH
18337: LD_INT 22
18339: PUSH
18340: LD_OWVAR 2
18344: PUSH
18345: EMPTY
18346: LIST
18347: LIST
18348: PUSH
18349: LD_INT 32
18351: PUSH
18352: LD_INT 3
18354: PUSH
18355: EMPTY
18356: LIST
18357: LIST
18358: PUSH
18359: EMPTY
18360: LIST
18361: LIST
18362: PPUSH
18363: CALL_OW 69
18367: ST_TO_ADDR
// if not tmp then
18368: LD_VAR 0 2
18372: NOT
18373: IFFALSE 18377
// exit ;
18375: GO 18406
// for i in tmp do
18377: LD_ADDR_VAR 0 1
18381: PUSH
18382: LD_VAR 0 2
18386: PUSH
18387: FOR_IN
18388: IFFALSE 18404
// begin SetLives ( i , 0 ) ;
18390: LD_VAR 0 1
18394: PPUSH
18395: LD_INT 0
18397: PPUSH
18398: CALL_OW 234
// end ;
18402: GO 18387
18404: POP
18405: POP
// end ;
18406: PPOPN 2
18408: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
18409: LD_EXP 21
18413: PUSH
18414: LD_EXP 24
18418: AND
18419: IFFALSE 18512
18421: GO 18423
18423: DISABLE
18424: LD_INT 0
18426: PPUSH
// begin enable ;
18427: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
18428: LD_ADDR_VAR 0 1
18432: PUSH
18433: LD_INT 22
18435: PUSH
18436: LD_OWVAR 2
18440: PUSH
18441: EMPTY
18442: LIST
18443: LIST
18444: PUSH
18445: LD_INT 2
18447: PUSH
18448: LD_INT 25
18450: PUSH
18451: LD_INT 5
18453: PUSH
18454: EMPTY
18455: LIST
18456: LIST
18457: PUSH
18458: LD_INT 25
18460: PUSH
18461: LD_INT 9
18463: PUSH
18464: EMPTY
18465: LIST
18466: LIST
18467: PUSH
18468: LD_INT 25
18470: PUSH
18471: LD_INT 8
18473: PUSH
18474: EMPTY
18475: LIST
18476: LIST
18477: PUSH
18478: EMPTY
18479: LIST
18480: LIST
18481: LIST
18482: LIST
18483: PUSH
18484: EMPTY
18485: LIST
18486: LIST
18487: PPUSH
18488: CALL_OW 69
18492: PUSH
18493: FOR_IN
18494: IFFALSE 18510
// begin SetClass ( i , 1 ) ;
18496: LD_VAR 0 1
18500: PPUSH
18501: LD_INT 1
18503: PPUSH
18504: CALL_OW 336
// end ;
18508: GO 18493
18510: POP
18511: POP
// end ;
18512: PPOPN 1
18514: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
18515: LD_EXP 21
18519: PUSH
18520: LD_EXP 25
18524: AND
18525: PUSH
18526: LD_OWVAR 65
18530: PUSH
18531: LD_INT 7
18533: LESS
18534: AND
18535: IFFALSE 18549
18537: GO 18539
18539: DISABLE
// begin enable ;
18540: ENABLE
// game_speed := 7 ;
18541: LD_ADDR_OWVAR 65
18545: PUSH
18546: LD_INT 7
18548: ST_TO_ADDR
// end ;
18549: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
18550: LD_EXP 21
18554: PUSH
18555: LD_EXP 28
18559: AND
18560: IFFALSE 18762
18562: GO 18564
18564: DISABLE
18565: LD_INT 0
18567: PPUSH
18568: PPUSH
18569: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
18570: LD_ADDR_VAR 0 3
18574: PUSH
18575: LD_INT 81
18577: PUSH
18578: LD_OWVAR 2
18582: PUSH
18583: EMPTY
18584: LIST
18585: LIST
18586: PUSH
18587: LD_INT 21
18589: PUSH
18590: LD_INT 1
18592: PUSH
18593: EMPTY
18594: LIST
18595: LIST
18596: PUSH
18597: EMPTY
18598: LIST
18599: LIST
18600: PPUSH
18601: CALL_OW 69
18605: ST_TO_ADDR
// if not tmp then
18606: LD_VAR 0 3
18610: NOT
18611: IFFALSE 18615
// exit ;
18613: GO 18762
// if tmp > 5 then
18615: LD_VAR 0 3
18619: PUSH
18620: LD_INT 5
18622: GREATER
18623: IFFALSE 18635
// k := 5 else
18625: LD_ADDR_VAR 0 2
18629: PUSH
18630: LD_INT 5
18632: ST_TO_ADDR
18633: GO 18645
// k := tmp ;
18635: LD_ADDR_VAR 0 2
18639: PUSH
18640: LD_VAR 0 3
18644: ST_TO_ADDR
// for i := 1 to k do
18645: LD_ADDR_VAR 0 1
18649: PUSH
18650: DOUBLE
18651: LD_INT 1
18653: DEC
18654: ST_TO_ADDR
18655: LD_VAR 0 2
18659: PUSH
18660: FOR_TO
18661: IFFALSE 18760
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
18663: LD_VAR 0 3
18667: PUSH
18668: LD_VAR 0 1
18672: ARRAY
18673: PPUSH
18674: LD_VAR 0 1
18678: PUSH
18679: LD_INT 4
18681: MOD
18682: PUSH
18683: LD_INT 1
18685: PLUS
18686: PPUSH
18687: CALL_OW 259
18691: PUSH
18692: LD_INT 10
18694: LESS
18695: IFFALSE 18758
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
18697: LD_VAR 0 3
18701: PUSH
18702: LD_VAR 0 1
18706: ARRAY
18707: PPUSH
18708: LD_VAR 0 1
18712: PUSH
18713: LD_INT 4
18715: MOD
18716: PUSH
18717: LD_INT 1
18719: PLUS
18720: PPUSH
18721: LD_VAR 0 3
18725: PUSH
18726: LD_VAR 0 1
18730: ARRAY
18731: PPUSH
18732: LD_VAR 0 1
18736: PUSH
18737: LD_INT 4
18739: MOD
18740: PUSH
18741: LD_INT 1
18743: PLUS
18744: PPUSH
18745: CALL_OW 259
18749: PUSH
18750: LD_INT 1
18752: PLUS
18753: PPUSH
18754: CALL_OW 237
18758: GO 18660
18760: POP
18761: POP
// end ;
18762: PPOPN 3
18764: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
18765: LD_EXP 21
18769: PUSH
18770: LD_EXP 29
18774: AND
18775: IFFALSE 18795
18777: GO 18779
18779: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
18780: LD_INT 4
18782: PPUSH
18783: LD_OWVAR 2
18787: PPUSH
18788: LD_INT 0
18790: PPUSH
18791: CALL_OW 324
18795: END
// every 0 0$1 trigger StreamModeActive and sShovel do
18796: LD_EXP 21
18800: PUSH
18801: LD_EXP 58
18805: AND
18806: IFFALSE 18826
18808: GO 18810
18810: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
18811: LD_INT 19
18813: PPUSH
18814: LD_OWVAR 2
18818: PPUSH
18819: LD_INT 0
18821: PPUSH
18822: CALL_OW 324
18826: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
18827: LD_EXP 21
18831: PUSH
18832: LD_EXP 30
18836: AND
18837: IFFALSE 18939
18839: GO 18841
18841: DISABLE
18842: LD_INT 0
18844: PPUSH
18845: PPUSH
// begin enable ;
18846: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
18847: LD_ADDR_VAR 0 2
18851: PUSH
18852: LD_INT 22
18854: PUSH
18855: LD_OWVAR 2
18859: PUSH
18860: EMPTY
18861: LIST
18862: LIST
18863: PUSH
18864: LD_INT 2
18866: PUSH
18867: LD_INT 34
18869: PUSH
18870: LD_INT 11
18872: PUSH
18873: EMPTY
18874: LIST
18875: LIST
18876: PUSH
18877: LD_INT 34
18879: PUSH
18880: LD_INT 30
18882: PUSH
18883: EMPTY
18884: LIST
18885: LIST
18886: PUSH
18887: EMPTY
18888: LIST
18889: LIST
18890: LIST
18891: PUSH
18892: EMPTY
18893: LIST
18894: LIST
18895: PPUSH
18896: CALL_OW 69
18900: ST_TO_ADDR
// if not tmp then
18901: LD_VAR 0 2
18905: NOT
18906: IFFALSE 18910
// exit ;
18908: GO 18939
// for i in tmp do
18910: LD_ADDR_VAR 0 1
18914: PUSH
18915: LD_VAR 0 2
18919: PUSH
18920: FOR_IN
18921: IFFALSE 18937
// begin SetLives ( i , 0 ) ;
18923: LD_VAR 0 1
18927: PPUSH
18928: LD_INT 0
18930: PPUSH
18931: CALL_OW 234
// end ;
18935: GO 18920
18937: POP
18938: POP
// end ;
18939: PPOPN 2
18941: END
// every 0 0$1 trigger StreamModeActive and sBunker do
18942: LD_EXP 21
18946: PUSH
18947: LD_EXP 31
18951: AND
18952: IFFALSE 18972
18954: GO 18956
18956: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
18957: LD_INT 32
18959: PPUSH
18960: LD_OWVAR 2
18964: PPUSH
18965: LD_INT 0
18967: PPUSH
18968: CALL_OW 324
18972: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
18973: LD_EXP 21
18977: PUSH
18978: LD_EXP 32
18982: AND
18983: IFFALSE 19164
18985: GO 18987
18987: DISABLE
18988: LD_INT 0
18990: PPUSH
18991: PPUSH
18992: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
18993: LD_ADDR_VAR 0 2
18997: PUSH
18998: LD_INT 22
19000: PUSH
19001: LD_OWVAR 2
19005: PUSH
19006: EMPTY
19007: LIST
19008: LIST
19009: PUSH
19010: LD_INT 33
19012: PUSH
19013: LD_INT 3
19015: PUSH
19016: EMPTY
19017: LIST
19018: LIST
19019: PUSH
19020: EMPTY
19021: LIST
19022: LIST
19023: PPUSH
19024: CALL_OW 69
19028: ST_TO_ADDR
// if not tmp then
19029: LD_VAR 0 2
19033: NOT
19034: IFFALSE 19038
// exit ;
19036: GO 19164
// side := 0 ;
19038: LD_ADDR_VAR 0 3
19042: PUSH
19043: LD_INT 0
19045: ST_TO_ADDR
// for i := 1 to 8 do
19046: LD_ADDR_VAR 0 1
19050: PUSH
19051: DOUBLE
19052: LD_INT 1
19054: DEC
19055: ST_TO_ADDR
19056: LD_INT 8
19058: PUSH
19059: FOR_TO
19060: IFFALSE 19108
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
19062: LD_OWVAR 2
19066: PUSH
19067: LD_VAR 0 1
19071: NONEQUAL
19072: PUSH
19073: LD_OWVAR 2
19077: PPUSH
19078: LD_VAR 0 1
19082: PPUSH
19083: CALL_OW 81
19087: PUSH
19088: LD_INT 2
19090: EQUAL
19091: AND
19092: IFFALSE 19106
// begin side := i ;
19094: LD_ADDR_VAR 0 3
19098: PUSH
19099: LD_VAR 0 1
19103: ST_TO_ADDR
// break ;
19104: GO 19108
// end ;
19106: GO 19059
19108: POP
19109: POP
// if not side then
19110: LD_VAR 0 3
19114: NOT
19115: IFFALSE 19119
// exit ;
19117: GO 19164
// for i := 1 to tmp do
19119: LD_ADDR_VAR 0 1
19123: PUSH
19124: DOUBLE
19125: LD_INT 1
19127: DEC
19128: ST_TO_ADDR
19129: LD_VAR 0 2
19133: PUSH
19134: FOR_TO
19135: IFFALSE 19162
// if Prob ( 60 ) then
19137: LD_INT 60
19139: PPUSH
19140: CALL_OW 13
19144: IFFALSE 19160
// SetSide ( i , side ) ;
19146: LD_VAR 0 1
19150: PPUSH
19151: LD_VAR 0 3
19155: PPUSH
19156: CALL_OW 235
19160: GO 19134
19162: POP
19163: POP
// end ;
19164: PPOPN 3
19166: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
19167: LD_EXP 21
19171: PUSH
19172: LD_EXP 34
19176: AND
19177: IFFALSE 19296
19179: GO 19181
19181: DISABLE
19182: LD_INT 0
19184: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
19185: LD_ADDR_VAR 0 1
19189: PUSH
19190: LD_INT 22
19192: PUSH
19193: LD_OWVAR 2
19197: PUSH
19198: EMPTY
19199: LIST
19200: LIST
19201: PUSH
19202: LD_INT 21
19204: PUSH
19205: LD_INT 1
19207: PUSH
19208: EMPTY
19209: LIST
19210: LIST
19211: PUSH
19212: LD_INT 3
19214: PUSH
19215: LD_INT 23
19217: PUSH
19218: LD_INT 0
19220: PUSH
19221: EMPTY
19222: LIST
19223: LIST
19224: PUSH
19225: EMPTY
19226: LIST
19227: LIST
19228: PUSH
19229: EMPTY
19230: LIST
19231: LIST
19232: LIST
19233: PPUSH
19234: CALL_OW 69
19238: PUSH
19239: FOR_IN
19240: IFFALSE 19294
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
19242: LD_VAR 0 1
19246: PPUSH
19247: CALL_OW 257
19251: PUSH
19252: LD_INT 1
19254: PUSH
19255: LD_INT 2
19257: PUSH
19258: LD_INT 3
19260: PUSH
19261: LD_INT 4
19263: PUSH
19264: EMPTY
19265: LIST
19266: LIST
19267: LIST
19268: LIST
19269: IN
19270: IFFALSE 19292
// SetClass ( un , rand ( 1 , 4 ) ) ;
19272: LD_VAR 0 1
19276: PPUSH
19277: LD_INT 1
19279: PPUSH
19280: LD_INT 4
19282: PPUSH
19283: CALL_OW 12
19287: PPUSH
19288: CALL_OW 336
19292: GO 19239
19294: POP
19295: POP
// end ;
19296: PPOPN 1
19298: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
19299: LD_EXP 21
19303: PUSH
19304: LD_EXP 33
19308: AND
19309: IFFALSE 19388
19311: GO 19313
19313: DISABLE
19314: LD_INT 0
19316: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
19317: LD_ADDR_VAR 0 1
19321: PUSH
19322: LD_INT 22
19324: PUSH
19325: LD_OWVAR 2
19329: PUSH
19330: EMPTY
19331: LIST
19332: LIST
19333: PUSH
19334: LD_INT 21
19336: PUSH
19337: LD_INT 3
19339: PUSH
19340: EMPTY
19341: LIST
19342: LIST
19343: PUSH
19344: EMPTY
19345: LIST
19346: LIST
19347: PPUSH
19348: CALL_OW 69
19352: ST_TO_ADDR
// if not tmp then
19353: LD_VAR 0 1
19357: NOT
19358: IFFALSE 19362
// exit ;
19360: GO 19388
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
19362: LD_VAR 0 1
19366: PUSH
19367: LD_INT 1
19369: PPUSH
19370: LD_VAR 0 1
19374: PPUSH
19375: CALL_OW 12
19379: ARRAY
19380: PPUSH
19381: LD_INT 100
19383: PPUSH
19384: CALL_OW 234
// end ;
19388: PPOPN 1
19390: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
19391: LD_EXP 21
19395: PUSH
19396: LD_EXP 35
19400: AND
19401: IFFALSE 19499
19403: GO 19405
19405: DISABLE
19406: LD_INT 0
19408: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19409: LD_ADDR_VAR 0 1
19413: PUSH
19414: LD_INT 22
19416: PUSH
19417: LD_OWVAR 2
19421: PUSH
19422: EMPTY
19423: LIST
19424: LIST
19425: PUSH
19426: LD_INT 21
19428: PUSH
19429: LD_INT 1
19431: PUSH
19432: EMPTY
19433: LIST
19434: LIST
19435: PUSH
19436: EMPTY
19437: LIST
19438: LIST
19439: PPUSH
19440: CALL_OW 69
19444: ST_TO_ADDR
// if not tmp then
19445: LD_VAR 0 1
19449: NOT
19450: IFFALSE 19454
// exit ;
19452: GO 19499
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
19454: LD_VAR 0 1
19458: PUSH
19459: LD_INT 1
19461: PPUSH
19462: LD_VAR 0 1
19466: PPUSH
19467: CALL_OW 12
19471: ARRAY
19472: PPUSH
19473: LD_INT 1
19475: PPUSH
19476: LD_INT 4
19478: PPUSH
19479: CALL_OW 12
19483: PPUSH
19484: LD_INT 3000
19486: PPUSH
19487: LD_INT 9000
19489: PPUSH
19490: CALL_OW 12
19494: PPUSH
19495: CALL_OW 492
// end ;
19499: PPOPN 1
19501: END
// every 0 0$1 trigger StreamModeActive and sDepot do
19502: LD_EXP 21
19506: PUSH
19507: LD_EXP 36
19511: AND
19512: IFFALSE 19532
19514: GO 19516
19516: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
19517: LD_INT 1
19519: PPUSH
19520: LD_OWVAR 2
19524: PPUSH
19525: LD_INT 0
19527: PPUSH
19528: CALL_OW 324
19532: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
19533: LD_EXP 21
19537: PUSH
19538: LD_EXP 37
19542: AND
19543: IFFALSE 19626
19545: GO 19547
19547: DISABLE
19548: LD_INT 0
19550: PPUSH
19551: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
19552: LD_ADDR_VAR 0 2
19556: PUSH
19557: LD_INT 22
19559: PUSH
19560: LD_OWVAR 2
19564: PUSH
19565: EMPTY
19566: LIST
19567: LIST
19568: PUSH
19569: LD_INT 21
19571: PUSH
19572: LD_INT 3
19574: PUSH
19575: EMPTY
19576: LIST
19577: LIST
19578: PUSH
19579: EMPTY
19580: LIST
19581: LIST
19582: PPUSH
19583: CALL_OW 69
19587: ST_TO_ADDR
// if not tmp then
19588: LD_VAR 0 2
19592: NOT
19593: IFFALSE 19597
// exit ;
19595: GO 19626
// for i in tmp do
19597: LD_ADDR_VAR 0 1
19601: PUSH
19602: LD_VAR 0 2
19606: PUSH
19607: FOR_IN
19608: IFFALSE 19624
// SetBLevel ( i , 10 ) ;
19610: LD_VAR 0 1
19614: PPUSH
19615: LD_INT 10
19617: PPUSH
19618: CALL_OW 241
19622: GO 19607
19624: POP
19625: POP
// end ;
19626: PPOPN 2
19628: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
19629: LD_EXP 21
19633: PUSH
19634: LD_EXP 38
19638: AND
19639: IFFALSE 19750
19641: GO 19643
19643: DISABLE
19644: LD_INT 0
19646: PPUSH
19647: PPUSH
19648: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19649: LD_ADDR_VAR 0 3
19653: PUSH
19654: LD_INT 22
19656: PUSH
19657: LD_OWVAR 2
19661: PUSH
19662: EMPTY
19663: LIST
19664: LIST
19665: PUSH
19666: LD_INT 25
19668: PUSH
19669: LD_INT 1
19671: PUSH
19672: EMPTY
19673: LIST
19674: LIST
19675: PUSH
19676: EMPTY
19677: LIST
19678: LIST
19679: PPUSH
19680: CALL_OW 69
19684: ST_TO_ADDR
// if not tmp then
19685: LD_VAR 0 3
19689: NOT
19690: IFFALSE 19694
// exit ;
19692: GO 19750
// un := tmp [ rand ( 1 , tmp ) ] ;
19694: LD_ADDR_VAR 0 2
19698: PUSH
19699: LD_VAR 0 3
19703: PUSH
19704: LD_INT 1
19706: PPUSH
19707: LD_VAR 0 3
19711: PPUSH
19712: CALL_OW 12
19716: ARRAY
19717: ST_TO_ADDR
// if Crawls ( un ) then
19718: LD_VAR 0 2
19722: PPUSH
19723: CALL_OW 318
19727: IFFALSE 19738
// ComWalk ( un ) ;
19729: LD_VAR 0 2
19733: PPUSH
19734: CALL_OW 138
// SetClass ( un , class_sniper ) ;
19738: LD_VAR 0 2
19742: PPUSH
19743: LD_INT 5
19745: PPUSH
19746: CALL_OW 336
// end ;
19750: PPOPN 3
19752: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
19753: LD_EXP 21
19757: PUSH
19758: LD_EXP 39
19762: AND
19763: PUSH
19764: LD_OWVAR 67
19768: PUSH
19769: LD_INT 4
19771: LESS
19772: AND
19773: IFFALSE 19792
19775: GO 19777
19777: DISABLE
// begin Difficulty := Difficulty + 1 ;
19778: LD_ADDR_OWVAR 67
19782: PUSH
19783: LD_OWVAR 67
19787: PUSH
19788: LD_INT 1
19790: PLUS
19791: ST_TO_ADDR
// end ;
19792: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
19793: LD_EXP 21
19797: PUSH
19798: LD_EXP 40
19802: AND
19803: IFFALSE 19906
19805: GO 19807
19807: DISABLE
19808: LD_INT 0
19810: PPUSH
// begin for i := 1 to 5 do
19811: LD_ADDR_VAR 0 1
19815: PUSH
19816: DOUBLE
19817: LD_INT 1
19819: DEC
19820: ST_TO_ADDR
19821: LD_INT 5
19823: PUSH
19824: FOR_TO
19825: IFFALSE 19904
// begin uc_nation := nation_nature ;
19827: LD_ADDR_OWVAR 21
19831: PUSH
19832: LD_INT 0
19834: ST_TO_ADDR
// uc_side := 0 ;
19835: LD_ADDR_OWVAR 20
19839: PUSH
19840: LD_INT 0
19842: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19843: LD_ADDR_OWVAR 29
19847: PUSH
19848: LD_INT 12
19850: PUSH
19851: LD_INT 12
19853: PUSH
19854: EMPTY
19855: LIST
19856: LIST
19857: ST_TO_ADDR
// hc_agressivity := 20 ;
19858: LD_ADDR_OWVAR 35
19862: PUSH
19863: LD_INT 20
19865: ST_TO_ADDR
// hc_class := class_tiger ;
19866: LD_ADDR_OWVAR 28
19870: PUSH
19871: LD_INT 14
19873: ST_TO_ADDR
// hc_gallery :=  ;
19874: LD_ADDR_OWVAR 33
19878: PUSH
19879: LD_STRING 
19881: ST_TO_ADDR
// hc_name :=  ;
19882: LD_ADDR_OWVAR 26
19886: PUSH
19887: LD_STRING 
19889: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
19890: CALL_OW 44
19894: PPUSH
19895: LD_INT 0
19897: PPUSH
19898: CALL_OW 51
// end ;
19902: GO 19824
19904: POP
19905: POP
// end ;
19906: PPOPN 1
19908: END
// every 0 0$1 trigger StreamModeActive and sBomb do
19909: LD_EXP 21
19913: PUSH
19914: LD_EXP 41
19918: AND
19919: IFFALSE 19928
19921: GO 19923
19923: DISABLE
// StreamSibBomb ;
19924: CALL 19929 0 0
19928: END
// export function StreamSibBomb ; var i , x , y ; begin
19929: LD_INT 0
19931: PPUSH
19932: PPUSH
19933: PPUSH
19934: PPUSH
// result := false ;
19935: LD_ADDR_VAR 0 1
19939: PUSH
19940: LD_INT 0
19942: ST_TO_ADDR
// for i := 1 to 16 do
19943: LD_ADDR_VAR 0 2
19947: PUSH
19948: DOUBLE
19949: LD_INT 1
19951: DEC
19952: ST_TO_ADDR
19953: LD_INT 16
19955: PUSH
19956: FOR_TO
19957: IFFALSE 20156
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
19959: LD_ADDR_VAR 0 3
19963: PUSH
19964: LD_INT 10
19966: PUSH
19967: LD_INT 20
19969: PUSH
19970: LD_INT 30
19972: PUSH
19973: LD_INT 40
19975: PUSH
19976: LD_INT 50
19978: PUSH
19979: LD_INT 60
19981: PUSH
19982: LD_INT 70
19984: PUSH
19985: LD_INT 80
19987: PUSH
19988: LD_INT 90
19990: PUSH
19991: LD_INT 100
19993: PUSH
19994: LD_INT 110
19996: PUSH
19997: LD_INT 120
19999: PUSH
20000: LD_INT 130
20002: PUSH
20003: LD_INT 140
20005: PUSH
20006: LD_INT 150
20008: PUSH
20009: EMPTY
20010: LIST
20011: LIST
20012: LIST
20013: LIST
20014: LIST
20015: LIST
20016: LIST
20017: LIST
20018: LIST
20019: LIST
20020: LIST
20021: LIST
20022: LIST
20023: LIST
20024: LIST
20025: PUSH
20026: LD_INT 1
20028: PPUSH
20029: LD_INT 15
20031: PPUSH
20032: CALL_OW 12
20036: ARRAY
20037: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
20038: LD_ADDR_VAR 0 4
20042: PUSH
20043: LD_INT 10
20045: PUSH
20046: LD_INT 20
20048: PUSH
20049: LD_INT 30
20051: PUSH
20052: LD_INT 40
20054: PUSH
20055: LD_INT 50
20057: PUSH
20058: LD_INT 60
20060: PUSH
20061: LD_INT 70
20063: PUSH
20064: LD_INT 80
20066: PUSH
20067: LD_INT 90
20069: PUSH
20070: LD_INT 100
20072: PUSH
20073: LD_INT 110
20075: PUSH
20076: LD_INT 120
20078: PUSH
20079: LD_INT 130
20081: PUSH
20082: LD_INT 140
20084: PUSH
20085: LD_INT 150
20087: PUSH
20088: EMPTY
20089: LIST
20090: LIST
20091: LIST
20092: LIST
20093: LIST
20094: LIST
20095: LIST
20096: LIST
20097: LIST
20098: LIST
20099: LIST
20100: LIST
20101: LIST
20102: LIST
20103: LIST
20104: PUSH
20105: LD_INT 1
20107: PPUSH
20108: LD_INT 15
20110: PPUSH
20111: CALL_OW 12
20115: ARRAY
20116: ST_TO_ADDR
// if ValidHex ( x , y ) then
20117: LD_VAR 0 3
20121: PPUSH
20122: LD_VAR 0 4
20126: PPUSH
20127: CALL_OW 488
20131: IFFALSE 20154
// begin result := [ x , y ] ;
20133: LD_ADDR_VAR 0 1
20137: PUSH
20138: LD_VAR 0 3
20142: PUSH
20143: LD_VAR 0 4
20147: PUSH
20148: EMPTY
20149: LIST
20150: LIST
20151: ST_TO_ADDR
// break ;
20152: GO 20156
// end ; end ;
20154: GO 19956
20156: POP
20157: POP
// if result then
20158: LD_VAR 0 1
20162: IFFALSE 20222
// begin ToLua ( playSibBomb() ) ;
20164: LD_STRING playSibBomb()
20166: PPUSH
20167: CALL_OW 559
// wait ( 0 0$14 ) ;
20171: LD_INT 490
20173: PPUSH
20174: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
20178: LD_VAR 0 1
20182: PUSH
20183: LD_INT 1
20185: ARRAY
20186: PPUSH
20187: LD_VAR 0 1
20191: PUSH
20192: LD_INT 2
20194: ARRAY
20195: PPUSH
20196: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
20200: LD_VAR 0 1
20204: PUSH
20205: LD_INT 1
20207: ARRAY
20208: PPUSH
20209: LD_VAR 0 1
20213: PUSH
20214: LD_INT 2
20216: ARRAY
20217: PPUSH
20218: CALL_OW 429
// end ; end ;
20222: LD_VAR 0 1
20226: RET
// every 0 0$1 trigger StreamModeActive and sReset do
20227: LD_EXP 21
20231: PUSH
20232: LD_EXP 43
20236: AND
20237: IFFALSE 20249
20239: GO 20241
20241: DISABLE
// YouLost (  ) ;
20242: LD_STRING 
20244: PPUSH
20245: CALL_OW 104
20249: END
// every 0 0$1 trigger StreamModeActive and sFog do
20250: LD_EXP 21
20254: PUSH
20255: LD_EXP 42
20259: AND
20260: IFFALSE 20274
20262: GO 20264
20264: DISABLE
// FogOff ( your_side ) ;
20265: LD_OWVAR 2
20269: PPUSH
20270: CALL_OW 344
20274: END
// every 0 0$1 trigger StreamModeActive and sSun do
20275: LD_EXP 21
20279: PUSH
20280: LD_EXP 44
20284: AND
20285: IFFALSE 20313
20287: GO 20289
20289: DISABLE
// begin solar_recharge_percent := 0 ;
20290: LD_ADDR_OWVAR 79
20294: PUSH
20295: LD_INT 0
20297: ST_TO_ADDR
// wait ( 5 5$00 ) ;
20298: LD_INT 10500
20300: PPUSH
20301: CALL_OW 67
// solar_recharge_percent := 100 ;
20305: LD_ADDR_OWVAR 79
20309: PUSH
20310: LD_INT 100
20312: ST_TO_ADDR
// end ;
20313: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
20314: LD_EXP 21
20318: PUSH
20319: LD_EXP 45
20323: AND
20324: IFFALSE 20563
20326: GO 20328
20328: DISABLE
20329: LD_INT 0
20331: PPUSH
20332: PPUSH
20333: PPUSH
// begin tmp := [ ] ;
20334: LD_ADDR_VAR 0 3
20338: PUSH
20339: EMPTY
20340: ST_TO_ADDR
// for i := 1 to 6 do
20341: LD_ADDR_VAR 0 1
20345: PUSH
20346: DOUBLE
20347: LD_INT 1
20349: DEC
20350: ST_TO_ADDR
20351: LD_INT 6
20353: PUSH
20354: FOR_TO
20355: IFFALSE 20460
// begin uc_nation := nation_nature ;
20357: LD_ADDR_OWVAR 21
20361: PUSH
20362: LD_INT 0
20364: ST_TO_ADDR
// uc_side := 0 ;
20365: LD_ADDR_OWVAR 20
20369: PUSH
20370: LD_INT 0
20372: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
20373: LD_ADDR_OWVAR 29
20377: PUSH
20378: LD_INT 12
20380: PUSH
20381: LD_INT 12
20383: PUSH
20384: EMPTY
20385: LIST
20386: LIST
20387: ST_TO_ADDR
// hc_agressivity := 20 ;
20388: LD_ADDR_OWVAR 35
20392: PUSH
20393: LD_INT 20
20395: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
20396: LD_ADDR_OWVAR 28
20400: PUSH
20401: LD_INT 17
20403: ST_TO_ADDR
// hc_gallery :=  ;
20404: LD_ADDR_OWVAR 33
20408: PUSH
20409: LD_STRING 
20411: ST_TO_ADDR
// hc_name :=  ;
20412: LD_ADDR_OWVAR 26
20416: PUSH
20417: LD_STRING 
20419: ST_TO_ADDR
// un := CreateHuman ;
20420: LD_ADDR_VAR 0 2
20424: PUSH
20425: CALL_OW 44
20429: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
20430: LD_VAR 0 2
20434: PPUSH
20435: LD_INT 1
20437: PPUSH
20438: CALL_OW 51
// tmp := tmp ^ un ;
20442: LD_ADDR_VAR 0 3
20446: PUSH
20447: LD_VAR 0 3
20451: PUSH
20452: LD_VAR 0 2
20456: ADD
20457: ST_TO_ADDR
// end ;
20458: GO 20354
20460: POP
20461: POP
// repeat wait ( 0 0$1 ) ;
20462: LD_INT 35
20464: PPUSH
20465: CALL_OW 67
// for un in tmp do
20469: LD_ADDR_VAR 0 2
20473: PUSH
20474: LD_VAR 0 3
20478: PUSH
20479: FOR_IN
20480: IFFALSE 20554
// begin if IsDead ( un ) then
20482: LD_VAR 0 2
20486: PPUSH
20487: CALL_OW 301
20491: IFFALSE 20511
// begin tmp := tmp diff un ;
20493: LD_ADDR_VAR 0 3
20497: PUSH
20498: LD_VAR 0 3
20502: PUSH
20503: LD_VAR 0 2
20507: DIFF
20508: ST_TO_ADDR
// continue ;
20509: GO 20479
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
20511: LD_VAR 0 2
20515: PPUSH
20516: LD_INT 3
20518: PUSH
20519: LD_INT 22
20521: PUSH
20522: LD_INT 0
20524: PUSH
20525: EMPTY
20526: LIST
20527: LIST
20528: PUSH
20529: EMPTY
20530: LIST
20531: LIST
20532: PPUSH
20533: CALL_OW 69
20537: PPUSH
20538: LD_VAR 0 2
20542: PPUSH
20543: CALL_OW 74
20547: PPUSH
20548: CALL_OW 115
// end ;
20552: GO 20479
20554: POP
20555: POP
// until not tmp ;
20556: LD_VAR 0 3
20560: NOT
20561: IFFALSE 20462
// end ;
20563: PPOPN 3
20565: END
// every 0 0$1 trigger StreamModeActive and sTroll do
20566: LD_EXP 21
20570: PUSH
20571: LD_EXP 46
20575: AND
20576: IFFALSE 20630
20578: GO 20580
20580: DISABLE
// begin ToLua ( displayTroll(); ) ;
20581: LD_STRING displayTroll();
20583: PPUSH
20584: CALL_OW 559
// wait ( 3 3$00 ) ;
20588: LD_INT 6300
20590: PPUSH
20591: CALL_OW 67
// ToLua ( hideTroll(); ) ;
20595: LD_STRING hideTroll();
20597: PPUSH
20598: CALL_OW 559
// wait ( 1 1$00 ) ;
20602: LD_INT 2100
20604: PPUSH
20605: CALL_OW 67
// ToLua ( displayTroll(); ) ;
20609: LD_STRING displayTroll();
20611: PPUSH
20612: CALL_OW 559
// wait ( 1 1$00 ) ;
20616: LD_INT 2100
20618: PPUSH
20619: CALL_OW 67
// ToLua ( hideTroll(); ) ;
20623: LD_STRING hideTroll();
20625: PPUSH
20626: CALL_OW 559
// end ;
20630: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
20631: LD_EXP 21
20635: PUSH
20636: LD_EXP 47
20640: AND
20641: IFFALSE 20704
20643: GO 20645
20645: DISABLE
20646: LD_INT 0
20648: PPUSH
// begin p := 0 ;
20649: LD_ADDR_VAR 0 1
20653: PUSH
20654: LD_INT 0
20656: ST_TO_ADDR
// repeat game_speed := 1 ;
20657: LD_ADDR_OWVAR 65
20661: PUSH
20662: LD_INT 1
20664: ST_TO_ADDR
// wait ( 0 0$1 ) ;
20665: LD_INT 35
20667: PPUSH
20668: CALL_OW 67
// p := p + 1 ;
20672: LD_ADDR_VAR 0 1
20676: PUSH
20677: LD_VAR 0 1
20681: PUSH
20682: LD_INT 1
20684: PLUS
20685: ST_TO_ADDR
// until p >= 60 ;
20686: LD_VAR 0 1
20690: PUSH
20691: LD_INT 60
20693: GREATEREQUAL
20694: IFFALSE 20657
// game_speed := 4 ;
20696: LD_ADDR_OWVAR 65
20700: PUSH
20701: LD_INT 4
20703: ST_TO_ADDR
// end ;
20704: PPOPN 1
20706: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
20707: LD_EXP 21
20711: PUSH
20712: LD_EXP 48
20716: AND
20717: IFFALSE 20863
20719: GO 20721
20721: DISABLE
20722: LD_INT 0
20724: PPUSH
20725: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20726: LD_ADDR_VAR 0 1
20730: PUSH
20731: LD_INT 22
20733: PUSH
20734: LD_OWVAR 2
20738: PUSH
20739: EMPTY
20740: LIST
20741: LIST
20742: PUSH
20743: LD_INT 2
20745: PUSH
20746: LD_INT 30
20748: PUSH
20749: LD_INT 0
20751: PUSH
20752: EMPTY
20753: LIST
20754: LIST
20755: PUSH
20756: LD_INT 30
20758: PUSH
20759: LD_INT 1
20761: PUSH
20762: EMPTY
20763: LIST
20764: LIST
20765: PUSH
20766: EMPTY
20767: LIST
20768: LIST
20769: LIST
20770: PUSH
20771: EMPTY
20772: LIST
20773: LIST
20774: PPUSH
20775: CALL_OW 69
20779: ST_TO_ADDR
// if not depot then
20780: LD_VAR 0 1
20784: NOT
20785: IFFALSE 20789
// exit ;
20787: GO 20863
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
20789: LD_ADDR_VAR 0 2
20793: PUSH
20794: LD_VAR 0 1
20798: PUSH
20799: LD_INT 1
20801: PPUSH
20802: LD_VAR 0 1
20806: PPUSH
20807: CALL_OW 12
20811: ARRAY
20812: PPUSH
20813: CALL_OW 274
20817: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
20818: LD_VAR 0 2
20822: PPUSH
20823: LD_INT 1
20825: PPUSH
20826: LD_INT 0
20828: PPUSH
20829: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
20833: LD_VAR 0 2
20837: PPUSH
20838: LD_INT 2
20840: PPUSH
20841: LD_INT 0
20843: PPUSH
20844: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
20848: LD_VAR 0 2
20852: PPUSH
20853: LD_INT 3
20855: PPUSH
20856: LD_INT 0
20858: PPUSH
20859: CALL_OW 277
// end ;
20863: PPOPN 2
20865: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
20866: LD_EXP 21
20870: PUSH
20871: LD_EXP 49
20875: AND
20876: IFFALSE 20973
20878: GO 20880
20880: DISABLE
20881: LD_INT 0
20883: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20884: LD_ADDR_VAR 0 1
20888: PUSH
20889: LD_INT 22
20891: PUSH
20892: LD_OWVAR 2
20896: PUSH
20897: EMPTY
20898: LIST
20899: LIST
20900: PUSH
20901: LD_INT 21
20903: PUSH
20904: LD_INT 1
20906: PUSH
20907: EMPTY
20908: LIST
20909: LIST
20910: PUSH
20911: LD_INT 3
20913: PUSH
20914: LD_INT 23
20916: PUSH
20917: LD_INT 0
20919: PUSH
20920: EMPTY
20921: LIST
20922: LIST
20923: PUSH
20924: EMPTY
20925: LIST
20926: LIST
20927: PUSH
20928: EMPTY
20929: LIST
20930: LIST
20931: LIST
20932: PPUSH
20933: CALL_OW 69
20937: ST_TO_ADDR
// if not tmp then
20938: LD_VAR 0 1
20942: NOT
20943: IFFALSE 20947
// exit ;
20945: GO 20973
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
20947: LD_VAR 0 1
20951: PUSH
20952: LD_INT 1
20954: PPUSH
20955: LD_VAR 0 1
20959: PPUSH
20960: CALL_OW 12
20964: ARRAY
20965: PPUSH
20966: LD_INT 200
20968: PPUSH
20969: CALL_OW 234
// end ;
20973: PPOPN 1
20975: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
20976: LD_EXP 21
20980: PUSH
20981: LD_EXP 50
20985: AND
20986: IFFALSE 21065
20988: GO 20990
20990: DISABLE
20991: LD_INT 0
20993: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
20994: LD_ADDR_VAR 0 1
20998: PUSH
20999: LD_INT 22
21001: PUSH
21002: LD_OWVAR 2
21006: PUSH
21007: EMPTY
21008: LIST
21009: LIST
21010: PUSH
21011: LD_INT 21
21013: PUSH
21014: LD_INT 2
21016: PUSH
21017: EMPTY
21018: LIST
21019: LIST
21020: PUSH
21021: EMPTY
21022: LIST
21023: LIST
21024: PPUSH
21025: CALL_OW 69
21029: ST_TO_ADDR
// if not tmp then
21030: LD_VAR 0 1
21034: NOT
21035: IFFALSE 21039
// exit ;
21037: GO 21065
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
21039: LD_VAR 0 1
21043: PUSH
21044: LD_INT 1
21046: PPUSH
21047: LD_VAR 0 1
21051: PPUSH
21052: CALL_OW 12
21056: ARRAY
21057: PPUSH
21058: LD_INT 60
21060: PPUSH
21061: CALL_OW 234
// end ;
21065: PPOPN 1
21067: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
21068: LD_EXP 21
21072: PUSH
21073: LD_EXP 51
21077: AND
21078: IFFALSE 21177
21080: GO 21082
21082: DISABLE
21083: LD_INT 0
21085: PPUSH
21086: PPUSH
// begin enable ;
21087: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
21088: LD_ADDR_VAR 0 1
21092: PUSH
21093: LD_INT 22
21095: PUSH
21096: LD_OWVAR 2
21100: PUSH
21101: EMPTY
21102: LIST
21103: LIST
21104: PUSH
21105: LD_INT 61
21107: PUSH
21108: EMPTY
21109: LIST
21110: PUSH
21111: LD_INT 33
21113: PUSH
21114: LD_INT 2
21116: PUSH
21117: EMPTY
21118: LIST
21119: LIST
21120: PUSH
21121: EMPTY
21122: LIST
21123: LIST
21124: LIST
21125: PPUSH
21126: CALL_OW 69
21130: ST_TO_ADDR
// if not tmp then
21131: LD_VAR 0 1
21135: NOT
21136: IFFALSE 21140
// exit ;
21138: GO 21177
// for i in tmp do
21140: LD_ADDR_VAR 0 2
21144: PUSH
21145: LD_VAR 0 1
21149: PUSH
21150: FOR_IN
21151: IFFALSE 21175
// if IsControledBy ( i ) then
21153: LD_VAR 0 2
21157: PPUSH
21158: CALL_OW 312
21162: IFFALSE 21173
// ComUnlink ( i ) ;
21164: LD_VAR 0 2
21168: PPUSH
21169: CALL_OW 136
21173: GO 21150
21175: POP
21176: POP
// end ;
21177: PPOPN 2
21179: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
21180: LD_EXP 21
21184: PUSH
21185: LD_EXP 52
21189: AND
21190: IFFALSE 21330
21192: GO 21194
21194: DISABLE
21195: LD_INT 0
21197: PPUSH
21198: PPUSH
// begin ToLua ( displayPowell(); ) ;
21199: LD_STRING displayPowell();
21201: PPUSH
21202: CALL_OW 559
// uc_side := 0 ;
21206: LD_ADDR_OWVAR 20
21210: PUSH
21211: LD_INT 0
21213: ST_TO_ADDR
// uc_nation := 2 ;
21214: LD_ADDR_OWVAR 21
21218: PUSH
21219: LD_INT 2
21221: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
21222: LD_ADDR_OWVAR 37
21226: PUSH
21227: LD_INT 14
21229: ST_TO_ADDR
// vc_engine := engine_siberite ;
21230: LD_ADDR_OWVAR 39
21234: PUSH
21235: LD_INT 3
21237: ST_TO_ADDR
// vc_control := control_apeman ;
21238: LD_ADDR_OWVAR 38
21242: PUSH
21243: LD_INT 5
21245: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
21246: LD_ADDR_OWVAR 40
21250: PUSH
21251: LD_INT 29
21253: ST_TO_ADDR
// un := CreateVehicle ;
21254: LD_ADDR_VAR 0 2
21258: PUSH
21259: CALL_OW 45
21263: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21264: LD_VAR 0 2
21268: PPUSH
21269: LD_INT 1
21271: PPUSH
21272: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
21276: LD_INT 35
21278: PPUSH
21279: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
21283: LD_VAR 0 2
21287: PPUSH
21288: LD_INT 22
21290: PUSH
21291: LD_OWVAR 2
21295: PUSH
21296: EMPTY
21297: LIST
21298: LIST
21299: PPUSH
21300: CALL_OW 69
21304: PPUSH
21305: LD_VAR 0 2
21309: PPUSH
21310: CALL_OW 74
21314: PPUSH
21315: CALL_OW 115
// until IsDead ( un ) ;
21319: LD_VAR 0 2
21323: PPUSH
21324: CALL_OW 301
21328: IFFALSE 21276
// end ;
21330: PPOPN 2
21332: END
// every 0 0$1 trigger StreamModeActive and sStu do
21333: LD_EXP 21
21337: PUSH
21338: LD_EXP 60
21342: AND
21343: IFFALSE 21359
21345: GO 21347
21347: DISABLE
// begin ToLua ( displayStucuk(); ) ;
21348: LD_STRING displayStucuk();
21350: PPUSH
21351: CALL_OW 559
// ResetFog ;
21355: CALL_OW 335
// end ;
21359: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
21360: LD_EXP 21
21364: PUSH
21365: LD_EXP 53
21369: AND
21370: IFFALSE 21511
21372: GO 21374
21374: DISABLE
21375: LD_INT 0
21377: PPUSH
21378: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
21379: LD_ADDR_VAR 0 2
21383: PUSH
21384: LD_INT 22
21386: PUSH
21387: LD_OWVAR 2
21391: PUSH
21392: EMPTY
21393: LIST
21394: LIST
21395: PUSH
21396: LD_INT 21
21398: PUSH
21399: LD_INT 1
21401: PUSH
21402: EMPTY
21403: LIST
21404: LIST
21405: PUSH
21406: EMPTY
21407: LIST
21408: LIST
21409: PPUSH
21410: CALL_OW 69
21414: ST_TO_ADDR
// if not tmp then
21415: LD_VAR 0 2
21419: NOT
21420: IFFALSE 21424
// exit ;
21422: GO 21511
// un := tmp [ rand ( 1 , tmp ) ] ;
21424: LD_ADDR_VAR 0 1
21428: PUSH
21429: LD_VAR 0 2
21433: PUSH
21434: LD_INT 1
21436: PPUSH
21437: LD_VAR 0 2
21441: PPUSH
21442: CALL_OW 12
21446: ARRAY
21447: ST_TO_ADDR
// SetSide ( un , 0 ) ;
21448: LD_VAR 0 1
21452: PPUSH
21453: LD_INT 0
21455: PPUSH
21456: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
21460: LD_VAR 0 1
21464: PPUSH
21465: LD_OWVAR 3
21469: PUSH
21470: LD_VAR 0 1
21474: DIFF
21475: PPUSH
21476: LD_VAR 0 1
21480: PPUSH
21481: CALL_OW 74
21485: PPUSH
21486: CALL_OW 115
// wait ( 0 0$20 ) ;
21490: LD_INT 700
21492: PPUSH
21493: CALL_OW 67
// SetSide ( un , your_side ) ;
21497: LD_VAR 0 1
21501: PPUSH
21502: LD_OWVAR 2
21506: PPUSH
21507: CALL_OW 235
// end ;
21511: PPOPN 2
21513: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
21514: LD_EXP 21
21518: PUSH
21519: LD_EXP 54
21523: AND
21524: IFFALSE 21630
21526: GO 21528
21528: DISABLE
21529: LD_INT 0
21531: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21532: LD_ADDR_VAR 0 1
21536: PUSH
21537: LD_INT 22
21539: PUSH
21540: LD_OWVAR 2
21544: PUSH
21545: EMPTY
21546: LIST
21547: LIST
21548: PUSH
21549: LD_INT 2
21551: PUSH
21552: LD_INT 30
21554: PUSH
21555: LD_INT 0
21557: PUSH
21558: EMPTY
21559: LIST
21560: LIST
21561: PUSH
21562: LD_INT 30
21564: PUSH
21565: LD_INT 1
21567: PUSH
21568: EMPTY
21569: LIST
21570: LIST
21571: PUSH
21572: EMPTY
21573: LIST
21574: LIST
21575: LIST
21576: PUSH
21577: EMPTY
21578: LIST
21579: LIST
21580: PPUSH
21581: CALL_OW 69
21585: ST_TO_ADDR
// if not depot then
21586: LD_VAR 0 1
21590: NOT
21591: IFFALSE 21595
// exit ;
21593: GO 21630
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
21595: LD_VAR 0 1
21599: PUSH
21600: LD_INT 1
21602: ARRAY
21603: PPUSH
21604: CALL_OW 250
21608: PPUSH
21609: LD_VAR 0 1
21613: PUSH
21614: LD_INT 1
21616: ARRAY
21617: PPUSH
21618: CALL_OW 251
21622: PPUSH
21623: LD_INT 70
21625: PPUSH
21626: CALL_OW 495
// end ;
21630: PPOPN 1
21632: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
21633: LD_EXP 21
21637: PUSH
21638: LD_EXP 55
21642: AND
21643: IFFALSE 21854
21645: GO 21647
21647: DISABLE
21648: LD_INT 0
21650: PPUSH
21651: PPUSH
21652: PPUSH
21653: PPUSH
21654: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
21655: LD_ADDR_VAR 0 5
21659: PUSH
21660: LD_INT 22
21662: PUSH
21663: LD_OWVAR 2
21667: PUSH
21668: EMPTY
21669: LIST
21670: LIST
21671: PUSH
21672: LD_INT 21
21674: PUSH
21675: LD_INT 1
21677: PUSH
21678: EMPTY
21679: LIST
21680: LIST
21681: PUSH
21682: EMPTY
21683: LIST
21684: LIST
21685: PPUSH
21686: CALL_OW 69
21690: ST_TO_ADDR
// if not tmp then
21691: LD_VAR 0 5
21695: NOT
21696: IFFALSE 21700
// exit ;
21698: GO 21854
// for i in tmp do
21700: LD_ADDR_VAR 0 1
21704: PUSH
21705: LD_VAR 0 5
21709: PUSH
21710: FOR_IN
21711: IFFALSE 21852
// begin d := rand ( 0 , 5 ) ;
21713: LD_ADDR_VAR 0 4
21717: PUSH
21718: LD_INT 0
21720: PPUSH
21721: LD_INT 5
21723: PPUSH
21724: CALL_OW 12
21728: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
21729: LD_ADDR_VAR 0 2
21733: PUSH
21734: LD_VAR 0 1
21738: PPUSH
21739: CALL_OW 250
21743: PPUSH
21744: LD_VAR 0 4
21748: PPUSH
21749: LD_INT 3
21751: PPUSH
21752: LD_INT 12
21754: PPUSH
21755: CALL_OW 12
21759: PPUSH
21760: CALL_OW 272
21764: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
21765: LD_ADDR_VAR 0 3
21769: PUSH
21770: LD_VAR 0 1
21774: PPUSH
21775: CALL_OW 251
21779: PPUSH
21780: LD_VAR 0 4
21784: PPUSH
21785: LD_INT 3
21787: PPUSH
21788: LD_INT 12
21790: PPUSH
21791: CALL_OW 12
21795: PPUSH
21796: CALL_OW 273
21800: ST_TO_ADDR
// if ValidHex ( x , y ) then
21801: LD_VAR 0 2
21805: PPUSH
21806: LD_VAR 0 3
21810: PPUSH
21811: CALL_OW 488
21815: IFFALSE 21850
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
21817: LD_VAR 0 1
21821: PPUSH
21822: LD_VAR 0 2
21826: PPUSH
21827: LD_VAR 0 3
21831: PPUSH
21832: LD_INT 3
21834: PPUSH
21835: LD_INT 6
21837: PPUSH
21838: CALL_OW 12
21842: PPUSH
21843: LD_INT 1
21845: PPUSH
21846: CALL_OW 483
// end ;
21850: GO 21710
21852: POP
21853: POP
// end ;
21854: PPOPN 5
21856: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
21857: LD_EXP 21
21861: PUSH
21862: LD_EXP 56
21866: AND
21867: IFFALSE 21961
21869: GO 21871
21871: DISABLE
21872: LD_INT 0
21874: PPUSH
21875: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
21876: LD_ADDR_VAR 0 2
21880: PUSH
21881: LD_INT 22
21883: PUSH
21884: LD_OWVAR 2
21888: PUSH
21889: EMPTY
21890: LIST
21891: LIST
21892: PUSH
21893: LD_INT 32
21895: PUSH
21896: LD_INT 1
21898: PUSH
21899: EMPTY
21900: LIST
21901: LIST
21902: PUSH
21903: LD_INT 21
21905: PUSH
21906: LD_INT 2
21908: PUSH
21909: EMPTY
21910: LIST
21911: LIST
21912: PUSH
21913: EMPTY
21914: LIST
21915: LIST
21916: LIST
21917: PPUSH
21918: CALL_OW 69
21922: ST_TO_ADDR
// if not tmp then
21923: LD_VAR 0 2
21927: NOT
21928: IFFALSE 21932
// exit ;
21930: GO 21961
// for i in tmp do
21932: LD_ADDR_VAR 0 1
21936: PUSH
21937: LD_VAR 0 2
21941: PUSH
21942: FOR_IN
21943: IFFALSE 21959
// SetFuel ( i , 0 ) ;
21945: LD_VAR 0 1
21949: PPUSH
21950: LD_INT 0
21952: PPUSH
21953: CALL_OW 240
21957: GO 21942
21959: POP
21960: POP
// end ;
21961: PPOPN 2
21963: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
21964: LD_EXP 21
21968: PUSH
21969: LD_EXP 57
21973: AND
21974: IFFALSE 22040
21976: GO 21978
21978: DISABLE
21979: LD_INT 0
21981: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
21982: LD_ADDR_VAR 0 1
21986: PUSH
21987: LD_INT 22
21989: PUSH
21990: LD_OWVAR 2
21994: PUSH
21995: EMPTY
21996: LIST
21997: LIST
21998: PUSH
21999: LD_INT 30
22001: PUSH
22002: LD_INT 29
22004: PUSH
22005: EMPTY
22006: LIST
22007: LIST
22008: PUSH
22009: EMPTY
22010: LIST
22011: LIST
22012: PPUSH
22013: CALL_OW 69
22017: ST_TO_ADDR
// if not tmp then
22018: LD_VAR 0 1
22022: NOT
22023: IFFALSE 22027
// exit ;
22025: GO 22040
// DestroyUnit ( tmp [ 1 ] ) ;
22027: LD_VAR 0 1
22031: PUSH
22032: LD_INT 1
22034: ARRAY
22035: PPUSH
22036: CALL_OW 65
// end ;
22040: PPOPN 1
22042: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
22043: LD_EXP 21
22047: PUSH
22048: LD_EXP 59
22052: AND
22053: IFFALSE 22182
22055: GO 22057
22057: DISABLE
22058: LD_INT 0
22060: PPUSH
// begin uc_side := 0 ;
22061: LD_ADDR_OWVAR 20
22065: PUSH
22066: LD_INT 0
22068: ST_TO_ADDR
// uc_nation := nation_arabian ;
22069: LD_ADDR_OWVAR 21
22073: PUSH
22074: LD_INT 2
22076: ST_TO_ADDR
// hc_gallery :=  ;
22077: LD_ADDR_OWVAR 33
22081: PUSH
22082: LD_STRING 
22084: ST_TO_ADDR
// hc_name :=  ;
22085: LD_ADDR_OWVAR 26
22089: PUSH
22090: LD_STRING 
22092: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
22093: LD_INT 1
22095: PPUSH
22096: LD_INT 11
22098: PPUSH
22099: LD_INT 10
22101: PPUSH
22102: CALL_OW 380
// un := CreateHuman ;
22106: LD_ADDR_VAR 0 1
22110: PUSH
22111: CALL_OW 44
22115: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
22116: LD_VAR 0 1
22120: PPUSH
22121: LD_INT 1
22123: PPUSH
22124: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
22128: LD_INT 35
22130: PPUSH
22131: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
22135: LD_VAR 0 1
22139: PPUSH
22140: LD_INT 22
22142: PUSH
22143: LD_OWVAR 2
22147: PUSH
22148: EMPTY
22149: LIST
22150: LIST
22151: PPUSH
22152: CALL_OW 69
22156: PPUSH
22157: LD_VAR 0 1
22161: PPUSH
22162: CALL_OW 74
22166: PPUSH
22167: CALL_OW 115
// until IsDead ( un ) ;
22171: LD_VAR 0 1
22175: PPUSH
22176: CALL_OW 301
22180: IFFALSE 22128
// end ;
22182: PPOPN 1
22184: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
22185: LD_EXP 21
22189: PUSH
22190: LD_EXP 61
22194: AND
22195: IFFALSE 22207
22197: GO 22199
22199: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
22200: LD_STRING earthquake(getX(game), 0, 32)
22202: PPUSH
22203: CALL_OW 559
22207: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
22208: LD_EXP 21
22212: PUSH
22213: LD_EXP 62
22217: AND
22218: IFFALSE 22309
22220: GO 22222
22222: DISABLE
22223: LD_INT 0
22225: PPUSH
// begin enable ;
22226: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
22227: LD_ADDR_VAR 0 1
22231: PUSH
22232: LD_INT 22
22234: PUSH
22235: LD_OWVAR 2
22239: PUSH
22240: EMPTY
22241: LIST
22242: LIST
22243: PUSH
22244: LD_INT 21
22246: PUSH
22247: LD_INT 2
22249: PUSH
22250: EMPTY
22251: LIST
22252: LIST
22253: PUSH
22254: LD_INT 33
22256: PUSH
22257: LD_INT 3
22259: PUSH
22260: EMPTY
22261: LIST
22262: LIST
22263: PUSH
22264: EMPTY
22265: LIST
22266: LIST
22267: LIST
22268: PPUSH
22269: CALL_OW 69
22273: ST_TO_ADDR
// if not tmp then
22274: LD_VAR 0 1
22278: NOT
22279: IFFALSE 22283
// exit ;
22281: GO 22309
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
22283: LD_VAR 0 1
22287: PUSH
22288: LD_INT 1
22290: PPUSH
22291: LD_VAR 0 1
22295: PPUSH
22296: CALL_OW 12
22300: ARRAY
22301: PPUSH
22302: LD_INT 1
22304: PPUSH
22305: CALL_OW 234
// end ;
22309: PPOPN 1
22311: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
22312: LD_EXP 21
22316: PUSH
22317: LD_EXP 63
22321: AND
22322: IFFALSE 22463
22324: GO 22326
22326: DISABLE
22327: LD_INT 0
22329: PPUSH
22330: PPUSH
22331: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22332: LD_ADDR_VAR 0 3
22336: PUSH
22337: LD_INT 22
22339: PUSH
22340: LD_OWVAR 2
22344: PUSH
22345: EMPTY
22346: LIST
22347: LIST
22348: PUSH
22349: LD_INT 25
22351: PUSH
22352: LD_INT 1
22354: PUSH
22355: EMPTY
22356: LIST
22357: LIST
22358: PUSH
22359: EMPTY
22360: LIST
22361: LIST
22362: PPUSH
22363: CALL_OW 69
22367: ST_TO_ADDR
// if not tmp then
22368: LD_VAR 0 3
22372: NOT
22373: IFFALSE 22377
// exit ;
22375: GO 22463
// un := tmp [ rand ( 1 , tmp ) ] ;
22377: LD_ADDR_VAR 0 2
22381: PUSH
22382: LD_VAR 0 3
22386: PUSH
22387: LD_INT 1
22389: PPUSH
22390: LD_VAR 0 3
22394: PPUSH
22395: CALL_OW 12
22399: ARRAY
22400: ST_TO_ADDR
// if Crawls ( un ) then
22401: LD_VAR 0 2
22405: PPUSH
22406: CALL_OW 318
22410: IFFALSE 22421
// ComWalk ( un ) ;
22412: LD_VAR 0 2
22416: PPUSH
22417: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
22421: LD_VAR 0 2
22425: PPUSH
22426: LD_INT 9
22428: PPUSH
22429: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
22433: LD_INT 28
22435: PPUSH
22436: LD_OWVAR 2
22440: PPUSH
22441: LD_INT 2
22443: PPUSH
22444: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
22448: LD_INT 29
22450: PPUSH
22451: LD_OWVAR 2
22455: PPUSH
22456: LD_INT 2
22458: PPUSH
22459: CALL_OW 322
// end ;
22463: PPOPN 3
22465: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
22466: LD_EXP 21
22470: PUSH
22471: LD_EXP 64
22475: AND
22476: IFFALSE 22587
22478: GO 22480
22480: DISABLE
22481: LD_INT 0
22483: PPUSH
22484: PPUSH
22485: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22486: LD_ADDR_VAR 0 3
22490: PUSH
22491: LD_INT 22
22493: PUSH
22494: LD_OWVAR 2
22498: PUSH
22499: EMPTY
22500: LIST
22501: LIST
22502: PUSH
22503: LD_INT 25
22505: PUSH
22506: LD_INT 1
22508: PUSH
22509: EMPTY
22510: LIST
22511: LIST
22512: PUSH
22513: EMPTY
22514: LIST
22515: LIST
22516: PPUSH
22517: CALL_OW 69
22521: ST_TO_ADDR
// if not tmp then
22522: LD_VAR 0 3
22526: NOT
22527: IFFALSE 22531
// exit ;
22529: GO 22587
// un := tmp [ rand ( 1 , tmp ) ] ;
22531: LD_ADDR_VAR 0 2
22535: PUSH
22536: LD_VAR 0 3
22540: PUSH
22541: LD_INT 1
22543: PPUSH
22544: LD_VAR 0 3
22548: PPUSH
22549: CALL_OW 12
22553: ARRAY
22554: ST_TO_ADDR
// if Crawls ( un ) then
22555: LD_VAR 0 2
22559: PPUSH
22560: CALL_OW 318
22564: IFFALSE 22575
// ComWalk ( un ) ;
22566: LD_VAR 0 2
22570: PPUSH
22571: CALL_OW 138
// SetClass ( un , class_mortar ) ;
22575: LD_VAR 0 2
22579: PPUSH
22580: LD_INT 8
22582: PPUSH
22583: CALL_OW 336
// end ;
22587: PPOPN 3
22589: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
22590: LD_EXP 21
22594: PUSH
22595: LD_EXP 65
22599: AND
22600: IFFALSE 22744
22602: GO 22604
22604: DISABLE
22605: LD_INT 0
22607: PPUSH
22608: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
22609: LD_ADDR_VAR 0 2
22613: PUSH
22614: LD_INT 22
22616: PUSH
22617: LD_OWVAR 2
22621: PUSH
22622: EMPTY
22623: LIST
22624: LIST
22625: PUSH
22626: LD_INT 21
22628: PUSH
22629: LD_INT 2
22631: PUSH
22632: EMPTY
22633: LIST
22634: LIST
22635: PUSH
22636: LD_INT 2
22638: PUSH
22639: LD_INT 34
22641: PUSH
22642: LD_INT 12
22644: PUSH
22645: EMPTY
22646: LIST
22647: LIST
22648: PUSH
22649: LD_INT 34
22651: PUSH
22652: LD_INT 51
22654: PUSH
22655: EMPTY
22656: LIST
22657: LIST
22658: PUSH
22659: LD_INT 34
22661: PUSH
22662: LD_INT 32
22664: PUSH
22665: EMPTY
22666: LIST
22667: LIST
22668: PUSH
22669: EMPTY
22670: LIST
22671: LIST
22672: LIST
22673: LIST
22674: PUSH
22675: EMPTY
22676: LIST
22677: LIST
22678: LIST
22679: PPUSH
22680: CALL_OW 69
22684: ST_TO_ADDR
// if not tmp then
22685: LD_VAR 0 2
22689: NOT
22690: IFFALSE 22694
// exit ;
22692: GO 22744
// for i in tmp do
22694: LD_ADDR_VAR 0 1
22698: PUSH
22699: LD_VAR 0 2
22703: PUSH
22704: FOR_IN
22705: IFFALSE 22742
// if GetCargo ( i , mat_artifact ) = 0 then
22707: LD_VAR 0 1
22711: PPUSH
22712: LD_INT 4
22714: PPUSH
22715: CALL_OW 289
22719: PUSH
22720: LD_INT 0
22722: EQUAL
22723: IFFALSE 22740
// SetCargo ( i , mat_siberit , 100 ) ;
22725: LD_VAR 0 1
22729: PPUSH
22730: LD_INT 3
22732: PPUSH
22733: LD_INT 100
22735: PPUSH
22736: CALL_OW 290
22740: GO 22704
22742: POP
22743: POP
// end ;
22744: PPOPN 2
22746: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
22747: LD_EXP 21
22751: PUSH
22752: LD_EXP 66
22756: AND
22757: IFFALSE 22940
22759: GO 22761
22761: DISABLE
22762: LD_INT 0
22764: PPUSH
22765: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22766: LD_ADDR_VAR 0 2
22770: PUSH
22771: LD_INT 22
22773: PUSH
22774: LD_OWVAR 2
22778: PUSH
22779: EMPTY
22780: LIST
22781: LIST
22782: PPUSH
22783: CALL_OW 69
22787: ST_TO_ADDR
// if not tmp then
22788: LD_VAR 0 2
22792: NOT
22793: IFFALSE 22797
// exit ;
22795: GO 22940
// for i := 1 to 2 do
22797: LD_ADDR_VAR 0 1
22801: PUSH
22802: DOUBLE
22803: LD_INT 1
22805: DEC
22806: ST_TO_ADDR
22807: LD_INT 2
22809: PUSH
22810: FOR_TO
22811: IFFALSE 22938
// begin uc_side := your_side ;
22813: LD_ADDR_OWVAR 20
22817: PUSH
22818: LD_OWVAR 2
22822: ST_TO_ADDR
// uc_nation := nation_american ;
22823: LD_ADDR_OWVAR 21
22827: PUSH
22828: LD_INT 1
22830: ST_TO_ADDR
// vc_chassis := us_morphling ;
22831: LD_ADDR_OWVAR 37
22835: PUSH
22836: LD_INT 5
22838: ST_TO_ADDR
// vc_engine := engine_siberite ;
22839: LD_ADDR_OWVAR 39
22843: PUSH
22844: LD_INT 3
22846: ST_TO_ADDR
// vc_control := control_computer ;
22847: LD_ADDR_OWVAR 38
22851: PUSH
22852: LD_INT 3
22854: ST_TO_ADDR
// vc_weapon := us_double_laser ;
22855: LD_ADDR_OWVAR 40
22859: PUSH
22860: LD_INT 10
22862: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
22863: LD_VAR 0 2
22867: PUSH
22868: LD_INT 1
22870: ARRAY
22871: PPUSH
22872: CALL_OW 310
22876: NOT
22877: IFFALSE 22924
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
22879: CALL_OW 45
22883: PPUSH
22884: LD_VAR 0 2
22888: PUSH
22889: LD_INT 1
22891: ARRAY
22892: PPUSH
22893: CALL_OW 250
22897: PPUSH
22898: LD_VAR 0 2
22902: PUSH
22903: LD_INT 1
22905: ARRAY
22906: PPUSH
22907: CALL_OW 251
22911: PPUSH
22912: LD_INT 12
22914: PPUSH
22915: LD_INT 1
22917: PPUSH
22918: CALL_OW 50
22922: GO 22936
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
22924: CALL_OW 45
22928: PPUSH
22929: LD_INT 1
22931: PPUSH
22932: CALL_OW 51
// end ;
22936: GO 22810
22938: POP
22939: POP
// end ;
22940: PPOPN 2
22942: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
22943: LD_EXP 21
22947: PUSH
22948: LD_EXP 67
22952: AND
22953: IFFALSE 23175
22955: GO 22957
22957: DISABLE
22958: LD_INT 0
22960: PPUSH
22961: PPUSH
22962: PPUSH
22963: PPUSH
22964: PPUSH
22965: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22966: LD_ADDR_VAR 0 6
22970: PUSH
22971: LD_INT 22
22973: PUSH
22974: LD_OWVAR 2
22978: PUSH
22979: EMPTY
22980: LIST
22981: LIST
22982: PUSH
22983: LD_INT 21
22985: PUSH
22986: LD_INT 1
22988: PUSH
22989: EMPTY
22990: LIST
22991: LIST
22992: PUSH
22993: LD_INT 3
22995: PUSH
22996: LD_INT 23
22998: PUSH
22999: LD_INT 0
23001: PUSH
23002: EMPTY
23003: LIST
23004: LIST
23005: PUSH
23006: EMPTY
23007: LIST
23008: LIST
23009: PUSH
23010: EMPTY
23011: LIST
23012: LIST
23013: LIST
23014: PPUSH
23015: CALL_OW 69
23019: ST_TO_ADDR
// if not tmp then
23020: LD_VAR 0 6
23024: NOT
23025: IFFALSE 23029
// exit ;
23027: GO 23175
// s1 := rand ( 1 , 4 ) ;
23029: LD_ADDR_VAR 0 2
23033: PUSH
23034: LD_INT 1
23036: PPUSH
23037: LD_INT 4
23039: PPUSH
23040: CALL_OW 12
23044: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
23045: LD_ADDR_VAR 0 4
23049: PUSH
23050: LD_VAR 0 6
23054: PUSH
23055: LD_INT 1
23057: ARRAY
23058: PPUSH
23059: LD_VAR 0 2
23063: PPUSH
23064: CALL_OW 259
23068: ST_TO_ADDR
// if s1 = 1 then
23069: LD_VAR 0 2
23073: PUSH
23074: LD_INT 1
23076: EQUAL
23077: IFFALSE 23097
// s2 := rand ( 2 , 4 ) else
23079: LD_ADDR_VAR 0 3
23083: PUSH
23084: LD_INT 2
23086: PPUSH
23087: LD_INT 4
23089: PPUSH
23090: CALL_OW 12
23094: ST_TO_ADDR
23095: GO 23105
// s2 := 1 ;
23097: LD_ADDR_VAR 0 3
23101: PUSH
23102: LD_INT 1
23104: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
23105: LD_ADDR_VAR 0 5
23109: PUSH
23110: LD_VAR 0 6
23114: PUSH
23115: LD_INT 1
23117: ARRAY
23118: PPUSH
23119: LD_VAR 0 3
23123: PPUSH
23124: CALL_OW 259
23128: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
23129: LD_VAR 0 6
23133: PUSH
23134: LD_INT 1
23136: ARRAY
23137: PPUSH
23138: LD_VAR 0 2
23142: PPUSH
23143: LD_VAR 0 5
23147: PPUSH
23148: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
23152: LD_VAR 0 6
23156: PUSH
23157: LD_INT 1
23159: ARRAY
23160: PPUSH
23161: LD_VAR 0 3
23165: PPUSH
23166: LD_VAR 0 4
23170: PPUSH
23171: CALL_OW 237
// end ;
23175: PPOPN 6
23177: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
23178: LD_EXP 21
23182: PUSH
23183: LD_EXP 68
23187: AND
23188: IFFALSE 23267
23190: GO 23192
23192: DISABLE
23193: LD_INT 0
23195: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
23196: LD_ADDR_VAR 0 1
23200: PUSH
23201: LD_INT 22
23203: PUSH
23204: LD_OWVAR 2
23208: PUSH
23209: EMPTY
23210: LIST
23211: LIST
23212: PUSH
23213: LD_INT 30
23215: PUSH
23216: LD_INT 3
23218: PUSH
23219: EMPTY
23220: LIST
23221: LIST
23222: PUSH
23223: EMPTY
23224: LIST
23225: LIST
23226: PPUSH
23227: CALL_OW 69
23231: ST_TO_ADDR
// if not tmp then
23232: LD_VAR 0 1
23236: NOT
23237: IFFALSE 23241
// exit ;
23239: GO 23267
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
23241: LD_VAR 0 1
23245: PUSH
23246: LD_INT 1
23248: PPUSH
23249: LD_VAR 0 1
23253: PPUSH
23254: CALL_OW 12
23258: ARRAY
23259: PPUSH
23260: LD_INT 1
23262: PPUSH
23263: CALL_OW 234
// end ;
23267: PPOPN 1
23269: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
23270: LD_EXP 21
23274: PUSH
23275: LD_EXP 69
23279: AND
23280: IFFALSE 23392
23282: GO 23284
23284: DISABLE
23285: LD_INT 0
23287: PPUSH
23288: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
23289: LD_ADDR_VAR 0 2
23293: PUSH
23294: LD_INT 22
23296: PUSH
23297: LD_OWVAR 2
23301: PUSH
23302: EMPTY
23303: LIST
23304: LIST
23305: PUSH
23306: LD_INT 2
23308: PUSH
23309: LD_INT 30
23311: PUSH
23312: LD_INT 27
23314: PUSH
23315: EMPTY
23316: LIST
23317: LIST
23318: PUSH
23319: LD_INT 30
23321: PUSH
23322: LD_INT 26
23324: PUSH
23325: EMPTY
23326: LIST
23327: LIST
23328: PUSH
23329: LD_INT 30
23331: PUSH
23332: LD_INT 28
23334: PUSH
23335: EMPTY
23336: LIST
23337: LIST
23338: PUSH
23339: EMPTY
23340: LIST
23341: LIST
23342: LIST
23343: LIST
23344: PUSH
23345: EMPTY
23346: LIST
23347: LIST
23348: PPUSH
23349: CALL_OW 69
23353: ST_TO_ADDR
// if not tmp then
23354: LD_VAR 0 2
23358: NOT
23359: IFFALSE 23363
// exit ;
23361: GO 23392
// for i in tmp do
23363: LD_ADDR_VAR 0 1
23367: PUSH
23368: LD_VAR 0 2
23372: PUSH
23373: FOR_IN
23374: IFFALSE 23390
// SetLives ( i , 1 ) ;
23376: LD_VAR 0 1
23380: PPUSH
23381: LD_INT 1
23383: PPUSH
23384: CALL_OW 234
23388: GO 23373
23390: POP
23391: POP
// end ;
23392: PPOPN 2
23394: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
23395: LD_EXP 21
23399: PUSH
23400: LD_EXP 70
23404: AND
23405: IFFALSE 23692
23407: GO 23409
23409: DISABLE
23410: LD_INT 0
23412: PPUSH
23413: PPUSH
23414: PPUSH
// begin i := rand ( 1 , 7 ) ;
23415: LD_ADDR_VAR 0 1
23419: PUSH
23420: LD_INT 1
23422: PPUSH
23423: LD_INT 7
23425: PPUSH
23426: CALL_OW 12
23430: ST_TO_ADDR
// case i of 1 :
23431: LD_VAR 0 1
23435: PUSH
23436: LD_INT 1
23438: DOUBLE
23439: EQUAL
23440: IFTRUE 23444
23442: GO 23454
23444: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
23445: LD_STRING earthquake(getX(game), 0, 32)
23447: PPUSH
23448: CALL_OW 559
23452: GO 23692
23454: LD_INT 2
23456: DOUBLE
23457: EQUAL
23458: IFTRUE 23462
23460: GO 23476
23462: POP
// begin ToLua ( displayStucuk(); ) ;
23463: LD_STRING displayStucuk();
23465: PPUSH
23466: CALL_OW 559
// ResetFog ;
23470: CALL_OW 335
// end ; 3 :
23474: GO 23692
23476: LD_INT 3
23478: DOUBLE
23479: EQUAL
23480: IFTRUE 23484
23482: GO 23588
23484: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
23485: LD_ADDR_VAR 0 2
23489: PUSH
23490: LD_INT 22
23492: PUSH
23493: LD_OWVAR 2
23497: PUSH
23498: EMPTY
23499: LIST
23500: LIST
23501: PUSH
23502: LD_INT 25
23504: PUSH
23505: LD_INT 1
23507: PUSH
23508: EMPTY
23509: LIST
23510: LIST
23511: PUSH
23512: EMPTY
23513: LIST
23514: LIST
23515: PPUSH
23516: CALL_OW 69
23520: ST_TO_ADDR
// if not tmp then
23521: LD_VAR 0 2
23525: NOT
23526: IFFALSE 23530
// exit ;
23528: GO 23692
// un := tmp [ rand ( 1 , tmp ) ] ;
23530: LD_ADDR_VAR 0 3
23534: PUSH
23535: LD_VAR 0 2
23539: PUSH
23540: LD_INT 1
23542: PPUSH
23543: LD_VAR 0 2
23547: PPUSH
23548: CALL_OW 12
23552: ARRAY
23553: ST_TO_ADDR
// if Crawls ( un ) then
23554: LD_VAR 0 3
23558: PPUSH
23559: CALL_OW 318
23563: IFFALSE 23574
// ComWalk ( un ) ;
23565: LD_VAR 0 3
23569: PPUSH
23570: CALL_OW 138
// SetClass ( un , class_mortar ) ;
23574: LD_VAR 0 3
23578: PPUSH
23579: LD_INT 8
23581: PPUSH
23582: CALL_OW 336
// end ; 4 :
23586: GO 23692
23588: LD_INT 4
23590: DOUBLE
23591: EQUAL
23592: IFTRUE 23596
23594: GO 23670
23596: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
23597: LD_ADDR_VAR 0 2
23601: PUSH
23602: LD_INT 22
23604: PUSH
23605: LD_OWVAR 2
23609: PUSH
23610: EMPTY
23611: LIST
23612: LIST
23613: PUSH
23614: LD_INT 30
23616: PUSH
23617: LD_INT 29
23619: PUSH
23620: EMPTY
23621: LIST
23622: LIST
23623: PUSH
23624: EMPTY
23625: LIST
23626: LIST
23627: PPUSH
23628: CALL_OW 69
23632: ST_TO_ADDR
// if not tmp then
23633: LD_VAR 0 2
23637: NOT
23638: IFFALSE 23642
// exit ;
23640: GO 23692
// CenterNowOnUnits ( tmp [ 1 ] ) ;
23642: LD_VAR 0 2
23646: PUSH
23647: LD_INT 1
23649: ARRAY
23650: PPUSH
23651: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
23655: LD_VAR 0 2
23659: PUSH
23660: LD_INT 1
23662: ARRAY
23663: PPUSH
23664: CALL_OW 65
// end ; 5 .. 7 :
23668: GO 23692
23670: LD_INT 5
23672: DOUBLE
23673: GREATEREQUAL
23674: IFFALSE 23682
23676: LD_INT 7
23678: DOUBLE
23679: LESSEQUAL
23680: IFTRUE 23684
23682: GO 23691
23684: POP
// StreamSibBomb ; end ;
23685: CALL 19929 0 0
23689: GO 23692
23691: POP
// end ;
23692: PPOPN 3
23694: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
23695: LD_EXP 21
23699: PUSH
23700: LD_EXP 71
23704: AND
23705: IFFALSE 23861
23707: GO 23709
23709: DISABLE
23710: LD_INT 0
23712: PPUSH
23713: PPUSH
23714: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
23715: LD_ADDR_VAR 0 2
23719: PUSH
23720: LD_INT 81
23722: PUSH
23723: LD_OWVAR 2
23727: PUSH
23728: EMPTY
23729: LIST
23730: LIST
23731: PUSH
23732: LD_INT 2
23734: PUSH
23735: LD_INT 21
23737: PUSH
23738: LD_INT 1
23740: PUSH
23741: EMPTY
23742: LIST
23743: LIST
23744: PUSH
23745: LD_INT 21
23747: PUSH
23748: LD_INT 2
23750: PUSH
23751: EMPTY
23752: LIST
23753: LIST
23754: PUSH
23755: EMPTY
23756: LIST
23757: LIST
23758: LIST
23759: PUSH
23760: EMPTY
23761: LIST
23762: LIST
23763: PPUSH
23764: CALL_OW 69
23768: ST_TO_ADDR
// if not tmp then
23769: LD_VAR 0 2
23773: NOT
23774: IFFALSE 23778
// exit ;
23776: GO 23861
// p := 0 ;
23778: LD_ADDR_VAR 0 3
23782: PUSH
23783: LD_INT 0
23785: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23786: LD_INT 35
23788: PPUSH
23789: CALL_OW 67
// p := p + 1 ;
23793: LD_ADDR_VAR 0 3
23797: PUSH
23798: LD_VAR 0 3
23802: PUSH
23803: LD_INT 1
23805: PLUS
23806: ST_TO_ADDR
// for i in tmp do
23807: LD_ADDR_VAR 0 1
23811: PUSH
23812: LD_VAR 0 2
23816: PUSH
23817: FOR_IN
23818: IFFALSE 23849
// if GetLives ( i ) < 1000 then
23820: LD_VAR 0 1
23824: PPUSH
23825: CALL_OW 256
23829: PUSH
23830: LD_INT 1000
23832: LESS
23833: IFFALSE 23847
// SetLives ( i , 1000 ) ;
23835: LD_VAR 0 1
23839: PPUSH
23840: LD_INT 1000
23842: PPUSH
23843: CALL_OW 234
23847: GO 23817
23849: POP
23850: POP
// until p > 20 ;
23851: LD_VAR 0 3
23855: PUSH
23856: LD_INT 20
23858: GREATER
23859: IFFALSE 23786
// end ;
23861: PPOPN 3
23863: END
// every 0 0$1 trigger StreamModeActive and sTime do
23864: LD_EXP 21
23868: PUSH
23869: LD_EXP 72
23873: AND
23874: IFFALSE 23909
23876: GO 23878
23878: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
23879: LD_INT 28
23881: PPUSH
23882: LD_OWVAR 2
23886: PPUSH
23887: LD_INT 2
23889: PPUSH
23890: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
23894: LD_INT 30
23896: PPUSH
23897: LD_OWVAR 2
23901: PPUSH
23902: LD_INT 2
23904: PPUSH
23905: CALL_OW 322
// end ;
23909: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
23910: LD_EXP 21
23914: PUSH
23915: LD_EXP 73
23919: AND
23920: IFFALSE 24041
23922: GO 23924
23924: DISABLE
23925: LD_INT 0
23927: PPUSH
23928: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
23929: LD_ADDR_VAR 0 2
23933: PUSH
23934: LD_INT 22
23936: PUSH
23937: LD_OWVAR 2
23941: PUSH
23942: EMPTY
23943: LIST
23944: LIST
23945: PUSH
23946: LD_INT 21
23948: PUSH
23949: LD_INT 1
23951: PUSH
23952: EMPTY
23953: LIST
23954: LIST
23955: PUSH
23956: LD_INT 3
23958: PUSH
23959: LD_INT 23
23961: PUSH
23962: LD_INT 0
23964: PUSH
23965: EMPTY
23966: LIST
23967: LIST
23968: PUSH
23969: EMPTY
23970: LIST
23971: LIST
23972: PUSH
23973: EMPTY
23974: LIST
23975: LIST
23976: LIST
23977: PPUSH
23978: CALL_OW 69
23982: ST_TO_ADDR
// if not tmp then
23983: LD_VAR 0 2
23987: NOT
23988: IFFALSE 23992
// exit ;
23990: GO 24041
// for i in tmp do
23992: LD_ADDR_VAR 0 1
23996: PUSH
23997: LD_VAR 0 2
24001: PUSH
24002: FOR_IN
24003: IFFALSE 24039
// begin if Crawls ( i ) then
24005: LD_VAR 0 1
24009: PPUSH
24010: CALL_OW 318
24014: IFFALSE 24025
// ComWalk ( i ) ;
24016: LD_VAR 0 1
24020: PPUSH
24021: CALL_OW 138
// SetClass ( i , 2 ) ;
24025: LD_VAR 0 1
24029: PPUSH
24030: LD_INT 2
24032: PPUSH
24033: CALL_OW 336
// end ;
24037: GO 24002
24039: POP
24040: POP
// end ;
24041: PPOPN 2
24043: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
24044: LD_EXP 21
24048: PUSH
24049: LD_EXP 74
24053: AND
24054: IFFALSE 24342
24056: GO 24058
24058: DISABLE
24059: LD_INT 0
24061: PPUSH
24062: PPUSH
24063: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
24064: LD_OWVAR 2
24068: PPUSH
24069: LD_INT 9
24071: PPUSH
24072: LD_INT 1
24074: PPUSH
24075: LD_INT 1
24077: PPUSH
24078: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
24082: LD_INT 9
24084: PPUSH
24085: LD_OWVAR 2
24089: PPUSH
24090: CALL_OW 343
// uc_side := 9 ;
24094: LD_ADDR_OWVAR 20
24098: PUSH
24099: LD_INT 9
24101: ST_TO_ADDR
// uc_nation := 2 ;
24102: LD_ADDR_OWVAR 21
24106: PUSH
24107: LD_INT 2
24109: ST_TO_ADDR
// hc_name := Dark Warrior ;
24110: LD_ADDR_OWVAR 26
24114: PUSH
24115: LD_STRING Dark Warrior
24117: ST_TO_ADDR
// hc_gallery :=  ;
24118: LD_ADDR_OWVAR 33
24122: PUSH
24123: LD_STRING 
24125: ST_TO_ADDR
// hc_noskilllimit := true ;
24126: LD_ADDR_OWVAR 76
24130: PUSH
24131: LD_INT 1
24133: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
24134: LD_ADDR_OWVAR 31
24138: PUSH
24139: LD_INT 30
24141: PUSH
24142: LD_INT 30
24144: PUSH
24145: LD_INT 30
24147: PUSH
24148: LD_INT 30
24150: PUSH
24151: EMPTY
24152: LIST
24153: LIST
24154: LIST
24155: LIST
24156: ST_TO_ADDR
// un := CreateHuman ;
24157: LD_ADDR_VAR 0 3
24161: PUSH
24162: CALL_OW 44
24166: ST_TO_ADDR
// hc_noskilllimit := false ;
24167: LD_ADDR_OWVAR 76
24171: PUSH
24172: LD_INT 0
24174: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
24175: LD_VAR 0 3
24179: PPUSH
24180: LD_INT 1
24182: PPUSH
24183: CALL_OW 51
// ToLua ( playRanger() ) ;
24187: LD_STRING playRanger()
24189: PPUSH
24190: CALL_OW 559
// p := 0 ;
24194: LD_ADDR_VAR 0 2
24198: PUSH
24199: LD_INT 0
24201: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
24202: LD_INT 35
24204: PPUSH
24205: CALL_OW 67
// p := p + 1 ;
24209: LD_ADDR_VAR 0 2
24213: PUSH
24214: LD_VAR 0 2
24218: PUSH
24219: LD_INT 1
24221: PLUS
24222: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
24223: LD_VAR 0 3
24227: PPUSH
24228: CALL_OW 256
24232: PUSH
24233: LD_INT 1000
24235: LESS
24236: IFFALSE 24250
// SetLives ( un , 1000 ) ;
24238: LD_VAR 0 3
24242: PPUSH
24243: LD_INT 1000
24245: PPUSH
24246: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
24250: LD_VAR 0 3
24254: PPUSH
24255: LD_INT 81
24257: PUSH
24258: LD_OWVAR 2
24262: PUSH
24263: EMPTY
24264: LIST
24265: LIST
24266: PUSH
24267: LD_INT 91
24269: PUSH
24270: LD_VAR 0 3
24274: PUSH
24275: LD_INT 30
24277: PUSH
24278: EMPTY
24279: LIST
24280: LIST
24281: LIST
24282: PUSH
24283: EMPTY
24284: LIST
24285: LIST
24286: PPUSH
24287: CALL_OW 69
24291: PPUSH
24292: LD_VAR 0 3
24296: PPUSH
24297: CALL_OW 74
24301: PPUSH
24302: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
24306: LD_VAR 0 2
24310: PUSH
24311: LD_INT 80
24313: GREATER
24314: PUSH
24315: LD_VAR 0 3
24319: PPUSH
24320: CALL_OW 301
24324: OR
24325: IFFALSE 24202
// if un then
24327: LD_VAR 0 3
24331: IFFALSE 24342
// RemoveUnit ( un ) ;
24333: LD_VAR 0 3
24337: PPUSH
24338: CALL_OW 64
// end ;
24342: PPOPN 3
24344: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
24345: LD_EXP 75
24349: IFFALSE 24465
24351: GO 24353
24353: DISABLE
24354: LD_INT 0
24356: PPUSH
24357: PPUSH
24358: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
24359: LD_ADDR_VAR 0 2
24363: PUSH
24364: LD_INT 81
24366: PUSH
24367: LD_OWVAR 2
24371: PUSH
24372: EMPTY
24373: LIST
24374: LIST
24375: PUSH
24376: LD_INT 21
24378: PUSH
24379: LD_INT 1
24381: PUSH
24382: EMPTY
24383: LIST
24384: LIST
24385: PUSH
24386: EMPTY
24387: LIST
24388: LIST
24389: PPUSH
24390: CALL_OW 69
24394: ST_TO_ADDR
// ToLua ( playComputer() ) ;
24395: LD_STRING playComputer()
24397: PPUSH
24398: CALL_OW 559
// if not tmp then
24402: LD_VAR 0 2
24406: NOT
24407: IFFALSE 24411
// exit ;
24409: GO 24465
// for i in tmp do
24411: LD_ADDR_VAR 0 1
24415: PUSH
24416: LD_VAR 0 2
24420: PUSH
24421: FOR_IN
24422: IFFALSE 24463
// for j := 1 to 4 do
24424: LD_ADDR_VAR 0 3
24428: PUSH
24429: DOUBLE
24430: LD_INT 1
24432: DEC
24433: ST_TO_ADDR
24434: LD_INT 4
24436: PUSH
24437: FOR_TO
24438: IFFALSE 24459
// SetSkill ( i , j , 10 ) ;
24440: LD_VAR 0 1
24444: PPUSH
24445: LD_VAR 0 3
24449: PPUSH
24450: LD_INT 10
24452: PPUSH
24453: CALL_OW 237
24457: GO 24437
24459: POP
24460: POP
24461: GO 24421
24463: POP
24464: POP
// end ;
24465: PPOPN 3
24467: END
// every 0 0$1 trigger s30 do var i , tmp ;
24468: LD_EXP 76
24472: IFFALSE 24541
24474: GO 24476
24476: DISABLE
24477: LD_INT 0
24479: PPUSH
24480: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
24481: LD_ADDR_VAR 0 2
24485: PUSH
24486: LD_INT 22
24488: PUSH
24489: LD_OWVAR 2
24493: PUSH
24494: EMPTY
24495: LIST
24496: LIST
24497: PPUSH
24498: CALL_OW 69
24502: ST_TO_ADDR
// if not tmp then
24503: LD_VAR 0 2
24507: NOT
24508: IFFALSE 24512
// exit ;
24510: GO 24541
// for i in tmp do
24512: LD_ADDR_VAR 0 1
24516: PUSH
24517: LD_VAR 0 2
24521: PUSH
24522: FOR_IN
24523: IFFALSE 24539
// SetLives ( i , 300 ) ;
24525: LD_VAR 0 1
24529: PPUSH
24530: LD_INT 300
24532: PPUSH
24533: CALL_OW 234
24537: GO 24522
24539: POP
24540: POP
// end ;
24541: PPOPN 2
24543: END
// every 0 0$1 trigger s60 do var i , tmp ;
24544: LD_EXP 77
24548: IFFALSE 24617
24550: GO 24552
24552: DISABLE
24553: LD_INT 0
24555: PPUSH
24556: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
24557: LD_ADDR_VAR 0 2
24561: PUSH
24562: LD_INT 22
24564: PUSH
24565: LD_OWVAR 2
24569: PUSH
24570: EMPTY
24571: LIST
24572: LIST
24573: PPUSH
24574: CALL_OW 69
24578: ST_TO_ADDR
// if not tmp then
24579: LD_VAR 0 2
24583: NOT
24584: IFFALSE 24588
// exit ;
24586: GO 24617
// for i in tmp do
24588: LD_ADDR_VAR 0 1
24592: PUSH
24593: LD_VAR 0 2
24597: PUSH
24598: FOR_IN
24599: IFFALSE 24615
// SetLives ( i , 600 ) ;
24601: LD_VAR 0 1
24605: PPUSH
24606: LD_INT 600
24608: PPUSH
24609: CALL_OW 234
24613: GO 24598
24615: POP
24616: POP
// end ;
24617: PPOPN 2
24619: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
24620: LD_INT 0
24622: PPUSH
// case cmd of 301 :
24623: LD_VAR 0 1
24627: PUSH
24628: LD_INT 301
24630: DOUBLE
24631: EQUAL
24632: IFTRUE 24636
24634: GO 24668
24636: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
24637: LD_VAR 0 6
24641: PPUSH
24642: LD_VAR 0 7
24646: PPUSH
24647: LD_VAR 0 8
24651: PPUSH
24652: LD_VAR 0 4
24656: PPUSH
24657: LD_VAR 0 5
24661: PPUSH
24662: CALL 25869 0 5
24666: GO 24789
24668: LD_INT 302
24670: DOUBLE
24671: EQUAL
24672: IFTRUE 24676
24674: GO 24713
24676: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
24677: LD_VAR 0 6
24681: PPUSH
24682: LD_VAR 0 7
24686: PPUSH
24687: LD_VAR 0 8
24691: PPUSH
24692: LD_VAR 0 9
24696: PPUSH
24697: LD_VAR 0 4
24701: PPUSH
24702: LD_VAR 0 5
24706: PPUSH
24707: CALL 25960 0 6
24711: GO 24789
24713: LD_INT 303
24715: DOUBLE
24716: EQUAL
24717: IFTRUE 24721
24719: GO 24758
24721: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
24722: LD_VAR 0 6
24726: PPUSH
24727: LD_VAR 0 7
24731: PPUSH
24732: LD_VAR 0 8
24736: PPUSH
24737: LD_VAR 0 9
24741: PPUSH
24742: LD_VAR 0 4
24746: PPUSH
24747: LD_VAR 0 5
24751: PPUSH
24752: CALL 24794 0 6
24756: GO 24789
24758: LD_INT 304
24760: DOUBLE
24761: EQUAL
24762: IFTRUE 24766
24764: GO 24788
24766: POP
// hHackTeleport ( unit , x , y ) ; end ;
24767: LD_VAR 0 2
24771: PPUSH
24772: LD_VAR 0 4
24776: PPUSH
24777: LD_VAR 0 5
24781: PPUSH
24782: CALL 26553 0 3
24786: GO 24789
24788: POP
// end ;
24789: LD_VAR 0 12
24793: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
24794: LD_INT 0
24796: PPUSH
24797: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
24798: LD_VAR 0 1
24802: PUSH
24803: LD_INT 1
24805: LESS
24806: PUSH
24807: LD_VAR 0 1
24811: PUSH
24812: LD_INT 3
24814: GREATER
24815: OR
24816: PUSH
24817: LD_VAR 0 5
24821: PPUSH
24822: LD_VAR 0 6
24826: PPUSH
24827: CALL_OW 428
24831: OR
24832: IFFALSE 24836
// exit ;
24834: GO 25556
// uc_side := your_side ;
24836: LD_ADDR_OWVAR 20
24840: PUSH
24841: LD_OWVAR 2
24845: ST_TO_ADDR
// uc_nation := nation ;
24846: LD_ADDR_OWVAR 21
24850: PUSH
24851: LD_VAR 0 1
24855: ST_TO_ADDR
// bc_level = 1 ;
24856: LD_ADDR_OWVAR 43
24860: PUSH
24861: LD_INT 1
24863: ST_TO_ADDR
// case btype of 1 :
24864: LD_VAR 0 2
24868: PUSH
24869: LD_INT 1
24871: DOUBLE
24872: EQUAL
24873: IFTRUE 24877
24875: GO 24888
24877: POP
// bc_type := b_depot ; 2 :
24878: LD_ADDR_OWVAR 42
24882: PUSH
24883: LD_INT 0
24885: ST_TO_ADDR
24886: GO 25500
24888: LD_INT 2
24890: DOUBLE
24891: EQUAL
24892: IFTRUE 24896
24894: GO 24907
24896: POP
// bc_type := b_warehouse ; 3 :
24897: LD_ADDR_OWVAR 42
24901: PUSH
24902: LD_INT 1
24904: ST_TO_ADDR
24905: GO 25500
24907: LD_INT 3
24909: DOUBLE
24910: EQUAL
24911: IFTRUE 24915
24913: GO 24926
24915: POP
// bc_type := b_lab ; 4 .. 9 :
24916: LD_ADDR_OWVAR 42
24920: PUSH
24921: LD_INT 6
24923: ST_TO_ADDR
24924: GO 25500
24926: LD_INT 4
24928: DOUBLE
24929: GREATEREQUAL
24930: IFFALSE 24938
24932: LD_INT 9
24934: DOUBLE
24935: LESSEQUAL
24936: IFTRUE 24940
24938: GO 24992
24940: POP
// begin bc_type := b_lab_half ;
24941: LD_ADDR_OWVAR 42
24945: PUSH
24946: LD_INT 7
24948: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
24949: LD_ADDR_OWVAR 44
24953: PUSH
24954: LD_INT 10
24956: PUSH
24957: LD_INT 11
24959: PUSH
24960: LD_INT 12
24962: PUSH
24963: LD_INT 15
24965: PUSH
24966: LD_INT 14
24968: PUSH
24969: LD_INT 13
24971: PUSH
24972: EMPTY
24973: LIST
24974: LIST
24975: LIST
24976: LIST
24977: LIST
24978: LIST
24979: PUSH
24980: LD_VAR 0 2
24984: PUSH
24985: LD_INT 3
24987: MINUS
24988: ARRAY
24989: ST_TO_ADDR
// end ; 10 .. 13 :
24990: GO 25500
24992: LD_INT 10
24994: DOUBLE
24995: GREATEREQUAL
24996: IFFALSE 25004
24998: LD_INT 13
25000: DOUBLE
25001: LESSEQUAL
25002: IFTRUE 25006
25004: GO 25083
25006: POP
// begin bc_type := b_lab_full ;
25007: LD_ADDR_OWVAR 42
25011: PUSH
25012: LD_INT 8
25014: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
25015: LD_ADDR_OWVAR 44
25019: PUSH
25020: LD_INT 10
25022: PUSH
25023: LD_INT 12
25025: PUSH
25026: LD_INT 14
25028: PUSH
25029: LD_INT 13
25031: PUSH
25032: EMPTY
25033: LIST
25034: LIST
25035: LIST
25036: LIST
25037: PUSH
25038: LD_VAR 0 2
25042: PUSH
25043: LD_INT 9
25045: MINUS
25046: ARRAY
25047: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
25048: LD_ADDR_OWVAR 45
25052: PUSH
25053: LD_INT 11
25055: PUSH
25056: LD_INT 15
25058: PUSH
25059: LD_INT 12
25061: PUSH
25062: LD_INT 15
25064: PUSH
25065: EMPTY
25066: LIST
25067: LIST
25068: LIST
25069: LIST
25070: PUSH
25071: LD_VAR 0 2
25075: PUSH
25076: LD_INT 9
25078: MINUS
25079: ARRAY
25080: ST_TO_ADDR
// end ; 14 :
25081: GO 25500
25083: LD_INT 14
25085: DOUBLE
25086: EQUAL
25087: IFTRUE 25091
25089: GO 25102
25091: POP
// bc_type := b_workshop ; 15 :
25092: LD_ADDR_OWVAR 42
25096: PUSH
25097: LD_INT 2
25099: ST_TO_ADDR
25100: GO 25500
25102: LD_INT 15
25104: DOUBLE
25105: EQUAL
25106: IFTRUE 25110
25108: GO 25121
25110: POP
// bc_type := b_factory ; 16 :
25111: LD_ADDR_OWVAR 42
25115: PUSH
25116: LD_INT 3
25118: ST_TO_ADDR
25119: GO 25500
25121: LD_INT 16
25123: DOUBLE
25124: EQUAL
25125: IFTRUE 25129
25127: GO 25140
25129: POP
// bc_type := b_ext_gun ; 17 :
25130: LD_ADDR_OWVAR 42
25134: PUSH
25135: LD_INT 17
25137: ST_TO_ADDR
25138: GO 25500
25140: LD_INT 17
25142: DOUBLE
25143: EQUAL
25144: IFTRUE 25148
25146: GO 25176
25148: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
25149: LD_ADDR_OWVAR 42
25153: PUSH
25154: LD_INT 19
25156: PUSH
25157: LD_INT 23
25159: PUSH
25160: LD_INT 19
25162: PUSH
25163: EMPTY
25164: LIST
25165: LIST
25166: LIST
25167: PUSH
25168: LD_VAR 0 1
25172: ARRAY
25173: ST_TO_ADDR
25174: GO 25500
25176: LD_INT 18
25178: DOUBLE
25179: EQUAL
25180: IFTRUE 25184
25182: GO 25195
25184: POP
// bc_type := b_ext_radar ; 19 :
25185: LD_ADDR_OWVAR 42
25189: PUSH
25190: LD_INT 20
25192: ST_TO_ADDR
25193: GO 25500
25195: LD_INT 19
25197: DOUBLE
25198: EQUAL
25199: IFTRUE 25203
25201: GO 25214
25203: POP
// bc_type := b_ext_radio ; 20 :
25204: LD_ADDR_OWVAR 42
25208: PUSH
25209: LD_INT 22
25211: ST_TO_ADDR
25212: GO 25500
25214: LD_INT 20
25216: DOUBLE
25217: EQUAL
25218: IFTRUE 25222
25220: GO 25233
25222: POP
// bc_type := b_ext_siberium ; 21 :
25223: LD_ADDR_OWVAR 42
25227: PUSH
25228: LD_INT 21
25230: ST_TO_ADDR
25231: GO 25500
25233: LD_INT 21
25235: DOUBLE
25236: EQUAL
25237: IFTRUE 25241
25239: GO 25252
25241: POP
// bc_type := b_ext_computer ; 22 :
25242: LD_ADDR_OWVAR 42
25246: PUSH
25247: LD_INT 24
25249: ST_TO_ADDR
25250: GO 25500
25252: LD_INT 22
25254: DOUBLE
25255: EQUAL
25256: IFTRUE 25260
25258: GO 25271
25260: POP
// bc_type := b_ext_track ; 23 :
25261: LD_ADDR_OWVAR 42
25265: PUSH
25266: LD_INT 16
25268: ST_TO_ADDR
25269: GO 25500
25271: LD_INT 23
25273: DOUBLE
25274: EQUAL
25275: IFTRUE 25279
25277: GO 25290
25279: POP
// bc_type := b_ext_laser ; 24 :
25280: LD_ADDR_OWVAR 42
25284: PUSH
25285: LD_INT 25
25287: ST_TO_ADDR
25288: GO 25500
25290: LD_INT 24
25292: DOUBLE
25293: EQUAL
25294: IFTRUE 25298
25296: GO 25309
25298: POP
// bc_type := b_control_tower ; 25 :
25299: LD_ADDR_OWVAR 42
25303: PUSH
25304: LD_INT 36
25306: ST_TO_ADDR
25307: GO 25500
25309: LD_INT 25
25311: DOUBLE
25312: EQUAL
25313: IFTRUE 25317
25315: GO 25328
25317: POP
// bc_type := b_breastwork ; 26 :
25318: LD_ADDR_OWVAR 42
25322: PUSH
25323: LD_INT 31
25325: ST_TO_ADDR
25326: GO 25500
25328: LD_INT 26
25330: DOUBLE
25331: EQUAL
25332: IFTRUE 25336
25334: GO 25347
25336: POP
// bc_type := b_bunker ; 27 :
25337: LD_ADDR_OWVAR 42
25341: PUSH
25342: LD_INT 32
25344: ST_TO_ADDR
25345: GO 25500
25347: LD_INT 27
25349: DOUBLE
25350: EQUAL
25351: IFTRUE 25355
25353: GO 25366
25355: POP
// bc_type := b_turret ; 28 :
25356: LD_ADDR_OWVAR 42
25360: PUSH
25361: LD_INT 33
25363: ST_TO_ADDR
25364: GO 25500
25366: LD_INT 28
25368: DOUBLE
25369: EQUAL
25370: IFTRUE 25374
25372: GO 25385
25374: POP
// bc_type := b_armoury ; 29 :
25375: LD_ADDR_OWVAR 42
25379: PUSH
25380: LD_INT 4
25382: ST_TO_ADDR
25383: GO 25500
25385: LD_INT 29
25387: DOUBLE
25388: EQUAL
25389: IFTRUE 25393
25391: GO 25404
25393: POP
// bc_type := b_barracks ; 30 :
25394: LD_ADDR_OWVAR 42
25398: PUSH
25399: LD_INT 5
25401: ST_TO_ADDR
25402: GO 25500
25404: LD_INT 30
25406: DOUBLE
25407: EQUAL
25408: IFTRUE 25412
25410: GO 25423
25412: POP
// bc_type := b_solar_power ; 31 :
25413: LD_ADDR_OWVAR 42
25417: PUSH
25418: LD_INT 27
25420: ST_TO_ADDR
25421: GO 25500
25423: LD_INT 31
25425: DOUBLE
25426: EQUAL
25427: IFTRUE 25431
25429: GO 25442
25431: POP
// bc_type := b_oil_power ; 32 :
25432: LD_ADDR_OWVAR 42
25436: PUSH
25437: LD_INT 26
25439: ST_TO_ADDR
25440: GO 25500
25442: LD_INT 32
25444: DOUBLE
25445: EQUAL
25446: IFTRUE 25450
25448: GO 25461
25450: POP
// bc_type := b_siberite_power ; 33 :
25451: LD_ADDR_OWVAR 42
25455: PUSH
25456: LD_INT 28
25458: ST_TO_ADDR
25459: GO 25500
25461: LD_INT 33
25463: DOUBLE
25464: EQUAL
25465: IFTRUE 25469
25467: GO 25480
25469: POP
// bc_type := b_oil_mine ; 34 :
25470: LD_ADDR_OWVAR 42
25474: PUSH
25475: LD_INT 29
25477: ST_TO_ADDR
25478: GO 25500
25480: LD_INT 34
25482: DOUBLE
25483: EQUAL
25484: IFTRUE 25488
25486: GO 25499
25488: POP
// bc_type := b_siberite_mine ; end ;
25489: LD_ADDR_OWVAR 42
25493: PUSH
25494: LD_INT 30
25496: ST_TO_ADDR
25497: GO 25500
25499: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
25500: LD_ADDR_VAR 0 8
25504: PUSH
25505: LD_VAR 0 5
25509: PPUSH
25510: LD_VAR 0 6
25514: PPUSH
25515: LD_VAR 0 3
25519: PPUSH
25520: CALL_OW 47
25524: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
25525: LD_OWVAR 42
25529: PUSH
25530: LD_INT 32
25532: PUSH
25533: LD_INT 33
25535: PUSH
25536: EMPTY
25537: LIST
25538: LIST
25539: IN
25540: IFFALSE 25556
// PlaceWeaponTurret ( b , weapon ) ;
25542: LD_VAR 0 8
25546: PPUSH
25547: LD_VAR 0 4
25551: PPUSH
25552: CALL_OW 431
// end ;
25556: LD_VAR 0 7
25560: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
25561: LD_INT 0
25563: PPUSH
25564: PPUSH
25565: PPUSH
25566: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
25567: LD_ADDR_VAR 0 4
25571: PUSH
25572: LD_INT 22
25574: PUSH
25575: LD_OWVAR 2
25579: PUSH
25580: EMPTY
25581: LIST
25582: LIST
25583: PUSH
25584: LD_INT 2
25586: PUSH
25587: LD_INT 30
25589: PUSH
25590: LD_INT 0
25592: PUSH
25593: EMPTY
25594: LIST
25595: LIST
25596: PUSH
25597: LD_INT 30
25599: PUSH
25600: LD_INT 1
25602: PUSH
25603: EMPTY
25604: LIST
25605: LIST
25606: PUSH
25607: EMPTY
25608: LIST
25609: LIST
25610: LIST
25611: PUSH
25612: EMPTY
25613: LIST
25614: LIST
25615: PPUSH
25616: CALL_OW 69
25620: ST_TO_ADDR
// if not tmp then
25621: LD_VAR 0 4
25625: NOT
25626: IFFALSE 25630
// exit ;
25628: GO 25689
// for i in tmp do
25630: LD_ADDR_VAR 0 2
25634: PUSH
25635: LD_VAR 0 4
25639: PUSH
25640: FOR_IN
25641: IFFALSE 25687
// for j = 1 to 3 do
25643: LD_ADDR_VAR 0 3
25647: PUSH
25648: DOUBLE
25649: LD_INT 1
25651: DEC
25652: ST_TO_ADDR
25653: LD_INT 3
25655: PUSH
25656: FOR_TO
25657: IFFALSE 25683
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
25659: LD_VAR 0 2
25663: PPUSH
25664: CALL_OW 274
25668: PPUSH
25669: LD_VAR 0 3
25673: PPUSH
25674: LD_INT 99999
25676: PPUSH
25677: CALL_OW 277
25681: GO 25656
25683: POP
25684: POP
25685: GO 25640
25687: POP
25688: POP
// end ;
25689: LD_VAR 0 1
25693: RET
// export function hHackSetLevel10 ; var i , j ; begin
25694: LD_INT 0
25696: PPUSH
25697: PPUSH
25698: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
25699: LD_ADDR_VAR 0 2
25703: PUSH
25704: LD_INT 21
25706: PUSH
25707: LD_INT 1
25709: PUSH
25710: EMPTY
25711: LIST
25712: LIST
25713: PPUSH
25714: CALL_OW 69
25718: PUSH
25719: FOR_IN
25720: IFFALSE 25772
// if IsSelected ( i ) then
25722: LD_VAR 0 2
25726: PPUSH
25727: CALL_OW 306
25731: IFFALSE 25770
// begin for j := 1 to 4 do
25733: LD_ADDR_VAR 0 3
25737: PUSH
25738: DOUBLE
25739: LD_INT 1
25741: DEC
25742: ST_TO_ADDR
25743: LD_INT 4
25745: PUSH
25746: FOR_TO
25747: IFFALSE 25768
// SetSkill ( i , j , 10 ) ;
25749: LD_VAR 0 2
25753: PPUSH
25754: LD_VAR 0 3
25758: PPUSH
25759: LD_INT 10
25761: PPUSH
25762: CALL_OW 237
25766: GO 25746
25768: POP
25769: POP
// end ;
25770: GO 25719
25772: POP
25773: POP
// end ;
25774: LD_VAR 0 1
25778: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
25779: LD_INT 0
25781: PPUSH
25782: PPUSH
25783: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
25784: LD_ADDR_VAR 0 2
25788: PUSH
25789: LD_INT 22
25791: PUSH
25792: LD_OWVAR 2
25796: PUSH
25797: EMPTY
25798: LIST
25799: LIST
25800: PUSH
25801: LD_INT 21
25803: PUSH
25804: LD_INT 1
25806: PUSH
25807: EMPTY
25808: LIST
25809: LIST
25810: PUSH
25811: EMPTY
25812: LIST
25813: LIST
25814: PPUSH
25815: CALL_OW 69
25819: PUSH
25820: FOR_IN
25821: IFFALSE 25862
// begin for j := 1 to 4 do
25823: LD_ADDR_VAR 0 3
25827: PUSH
25828: DOUBLE
25829: LD_INT 1
25831: DEC
25832: ST_TO_ADDR
25833: LD_INT 4
25835: PUSH
25836: FOR_TO
25837: IFFALSE 25858
// SetSkill ( i , j , 10 ) ;
25839: LD_VAR 0 2
25843: PPUSH
25844: LD_VAR 0 3
25848: PPUSH
25849: LD_INT 10
25851: PPUSH
25852: CALL_OW 237
25856: GO 25836
25858: POP
25859: POP
// end ;
25860: GO 25820
25862: POP
25863: POP
// end ;
25864: LD_VAR 0 1
25868: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
25869: LD_INT 0
25871: PPUSH
// uc_side := your_side ;
25872: LD_ADDR_OWVAR 20
25876: PUSH
25877: LD_OWVAR 2
25881: ST_TO_ADDR
// uc_nation := nation ;
25882: LD_ADDR_OWVAR 21
25886: PUSH
25887: LD_VAR 0 1
25891: ST_TO_ADDR
// InitHc ;
25892: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
25896: LD_INT 0
25898: PPUSH
25899: LD_VAR 0 2
25903: PPUSH
25904: LD_VAR 0 3
25908: PPUSH
25909: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
25913: LD_VAR 0 4
25917: PPUSH
25918: LD_VAR 0 5
25922: PPUSH
25923: CALL_OW 428
25927: PUSH
25928: LD_INT 0
25930: EQUAL
25931: IFFALSE 25955
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
25933: CALL_OW 44
25937: PPUSH
25938: LD_VAR 0 4
25942: PPUSH
25943: LD_VAR 0 5
25947: PPUSH
25948: LD_INT 1
25950: PPUSH
25951: CALL_OW 48
// end ;
25955: LD_VAR 0 6
25959: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
25960: LD_INT 0
25962: PPUSH
25963: PPUSH
// uc_side := your_side ;
25964: LD_ADDR_OWVAR 20
25968: PUSH
25969: LD_OWVAR 2
25973: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
25974: LD_VAR 0 1
25978: PUSH
25979: LD_INT 1
25981: PUSH
25982: LD_INT 2
25984: PUSH
25985: LD_INT 3
25987: PUSH
25988: LD_INT 4
25990: PUSH
25991: LD_INT 5
25993: PUSH
25994: EMPTY
25995: LIST
25996: LIST
25997: LIST
25998: LIST
25999: LIST
26000: IN
26001: IFFALSE 26013
// uc_nation := nation_american else
26003: LD_ADDR_OWVAR 21
26007: PUSH
26008: LD_INT 1
26010: ST_TO_ADDR
26011: GO 26056
// if chassis in [ 11 , 12 , 13 , 14 ] then
26013: LD_VAR 0 1
26017: PUSH
26018: LD_INT 11
26020: PUSH
26021: LD_INT 12
26023: PUSH
26024: LD_INT 13
26026: PUSH
26027: LD_INT 14
26029: PUSH
26030: EMPTY
26031: LIST
26032: LIST
26033: LIST
26034: LIST
26035: IN
26036: IFFALSE 26048
// uc_nation := nation_arabian else
26038: LD_ADDR_OWVAR 21
26042: PUSH
26043: LD_INT 2
26045: ST_TO_ADDR
26046: GO 26056
// uc_nation := nation_russian ;
26048: LD_ADDR_OWVAR 21
26052: PUSH
26053: LD_INT 3
26055: ST_TO_ADDR
// vc_chassis := chassis ;
26056: LD_ADDR_OWVAR 37
26060: PUSH
26061: LD_VAR 0 1
26065: ST_TO_ADDR
// vc_engine := engine ;
26066: LD_ADDR_OWVAR 39
26070: PUSH
26071: LD_VAR 0 2
26075: ST_TO_ADDR
// vc_control := control ;
26076: LD_ADDR_OWVAR 38
26080: PUSH
26081: LD_VAR 0 3
26085: ST_TO_ADDR
// vc_weapon := weapon ;
26086: LD_ADDR_OWVAR 40
26090: PUSH
26091: LD_VAR 0 4
26095: ST_TO_ADDR
// un := CreateVehicle ;
26096: LD_ADDR_VAR 0 8
26100: PUSH
26101: CALL_OW 45
26105: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
26106: LD_VAR 0 8
26110: PPUSH
26111: LD_INT 0
26113: PPUSH
26114: LD_INT 5
26116: PPUSH
26117: CALL_OW 12
26121: PPUSH
26122: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
26126: LD_VAR 0 8
26130: PPUSH
26131: LD_VAR 0 5
26135: PPUSH
26136: LD_VAR 0 6
26140: PPUSH
26141: LD_INT 1
26143: PPUSH
26144: CALL_OW 48
// end ;
26148: LD_VAR 0 7
26152: RET
// export hInvincible ; every 1 do
26153: GO 26155
26155: DISABLE
// hInvincible := [ ] ;
26156: LD_ADDR_EXP 78
26160: PUSH
26161: EMPTY
26162: ST_TO_ADDR
26163: END
// every 10 do var i ;
26164: GO 26166
26166: DISABLE
26167: LD_INT 0
26169: PPUSH
// begin enable ;
26170: ENABLE
// if not hInvincible then
26171: LD_EXP 78
26175: NOT
26176: IFFALSE 26180
// exit ;
26178: GO 26224
// for i in hInvincible do
26180: LD_ADDR_VAR 0 1
26184: PUSH
26185: LD_EXP 78
26189: PUSH
26190: FOR_IN
26191: IFFALSE 26222
// if GetLives ( i ) < 1000 then
26193: LD_VAR 0 1
26197: PPUSH
26198: CALL_OW 256
26202: PUSH
26203: LD_INT 1000
26205: LESS
26206: IFFALSE 26220
// SetLives ( i , 1000 ) ;
26208: LD_VAR 0 1
26212: PPUSH
26213: LD_INT 1000
26215: PPUSH
26216: CALL_OW 234
26220: GO 26190
26222: POP
26223: POP
// end ;
26224: PPOPN 1
26226: END
// export function hHackInvincible ; var i ; begin
26227: LD_INT 0
26229: PPUSH
26230: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
26231: LD_ADDR_VAR 0 2
26235: PUSH
26236: LD_INT 2
26238: PUSH
26239: LD_INT 21
26241: PUSH
26242: LD_INT 1
26244: PUSH
26245: EMPTY
26246: LIST
26247: LIST
26248: PUSH
26249: LD_INT 21
26251: PUSH
26252: LD_INT 2
26254: PUSH
26255: EMPTY
26256: LIST
26257: LIST
26258: PUSH
26259: EMPTY
26260: LIST
26261: LIST
26262: LIST
26263: PPUSH
26264: CALL_OW 69
26268: PUSH
26269: FOR_IN
26270: IFFALSE 26331
// if IsSelected ( i ) then
26272: LD_VAR 0 2
26276: PPUSH
26277: CALL_OW 306
26281: IFFALSE 26329
// begin if i in hInvincible then
26283: LD_VAR 0 2
26287: PUSH
26288: LD_EXP 78
26292: IN
26293: IFFALSE 26313
// hInvincible := hInvincible diff i else
26295: LD_ADDR_EXP 78
26299: PUSH
26300: LD_EXP 78
26304: PUSH
26305: LD_VAR 0 2
26309: DIFF
26310: ST_TO_ADDR
26311: GO 26329
// hInvincible := hInvincible union i ;
26313: LD_ADDR_EXP 78
26317: PUSH
26318: LD_EXP 78
26322: PUSH
26323: LD_VAR 0 2
26327: UNION
26328: ST_TO_ADDR
// end ;
26329: GO 26269
26331: POP
26332: POP
// end ;
26333: LD_VAR 0 1
26337: RET
// export function hHackInvisible ; var i , j ; begin
26338: LD_INT 0
26340: PPUSH
26341: PPUSH
26342: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
26343: LD_ADDR_VAR 0 2
26347: PUSH
26348: LD_INT 21
26350: PUSH
26351: LD_INT 1
26353: PUSH
26354: EMPTY
26355: LIST
26356: LIST
26357: PPUSH
26358: CALL_OW 69
26362: PUSH
26363: FOR_IN
26364: IFFALSE 26388
// if IsSelected ( i ) then
26366: LD_VAR 0 2
26370: PPUSH
26371: CALL_OW 306
26375: IFFALSE 26386
// ComForceInvisible ( i ) ;
26377: LD_VAR 0 2
26381: PPUSH
26382: CALL_OW 496
26386: GO 26363
26388: POP
26389: POP
// end ;
26390: LD_VAR 0 1
26394: RET
// export function hHackChangeYourSide ; begin
26395: LD_INT 0
26397: PPUSH
// if your_side = 8 then
26398: LD_OWVAR 2
26402: PUSH
26403: LD_INT 8
26405: EQUAL
26406: IFFALSE 26418
// your_side := 0 else
26408: LD_ADDR_OWVAR 2
26412: PUSH
26413: LD_INT 0
26415: ST_TO_ADDR
26416: GO 26432
// your_side := your_side + 1 ;
26418: LD_ADDR_OWVAR 2
26422: PUSH
26423: LD_OWVAR 2
26427: PUSH
26428: LD_INT 1
26430: PLUS
26431: ST_TO_ADDR
// end ;
26432: LD_VAR 0 1
26436: RET
// export function hHackChangeUnitSide ; var i , j ; begin
26437: LD_INT 0
26439: PPUSH
26440: PPUSH
26441: PPUSH
// for i in all_units do
26442: LD_ADDR_VAR 0 2
26446: PUSH
26447: LD_OWVAR 3
26451: PUSH
26452: FOR_IN
26453: IFFALSE 26531
// if IsSelected ( i ) then
26455: LD_VAR 0 2
26459: PPUSH
26460: CALL_OW 306
26464: IFFALSE 26529
// begin j := GetSide ( i ) ;
26466: LD_ADDR_VAR 0 3
26470: PUSH
26471: LD_VAR 0 2
26475: PPUSH
26476: CALL_OW 255
26480: ST_TO_ADDR
// if j = 8 then
26481: LD_VAR 0 3
26485: PUSH
26486: LD_INT 8
26488: EQUAL
26489: IFFALSE 26501
// j := 0 else
26491: LD_ADDR_VAR 0 3
26495: PUSH
26496: LD_INT 0
26498: ST_TO_ADDR
26499: GO 26515
// j := j + 1 ;
26501: LD_ADDR_VAR 0 3
26505: PUSH
26506: LD_VAR 0 3
26510: PUSH
26511: LD_INT 1
26513: PLUS
26514: ST_TO_ADDR
// SetSide ( i , j ) ;
26515: LD_VAR 0 2
26519: PPUSH
26520: LD_VAR 0 3
26524: PPUSH
26525: CALL_OW 235
// end ;
26529: GO 26452
26531: POP
26532: POP
// end ;
26533: LD_VAR 0 1
26537: RET
// export function hHackFog ; begin
26538: LD_INT 0
26540: PPUSH
// FogOff ( true ) ;
26541: LD_INT 1
26543: PPUSH
26544: CALL_OW 344
// end ;
26548: LD_VAR 0 1
26552: RET
// export function hHackTeleport ( unit , x , y ) ; begin
26553: LD_INT 0
26555: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
26556: LD_VAR 0 1
26560: PPUSH
26561: LD_VAR 0 2
26565: PPUSH
26566: LD_VAR 0 3
26570: PPUSH
26571: LD_INT 1
26573: PPUSH
26574: LD_INT 1
26576: PPUSH
26577: CALL_OW 483
// CenterOnXY ( x , y ) ;
26581: LD_VAR 0 2
26585: PPUSH
26586: LD_VAR 0 3
26590: PPUSH
26591: CALL_OW 84
// end ;
26595: LD_VAR 0 4
26599: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
26600: LD_INT 0
26602: PPUSH
26603: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
26604: LD_VAR 0 1
26608: NOT
26609: PUSH
26610: LD_VAR 0 2
26614: PPUSH
26615: LD_VAR 0 3
26619: PPUSH
26620: CALL_OW 488
26624: NOT
26625: OR
26626: PUSH
26627: LD_VAR 0 1
26631: PPUSH
26632: CALL_OW 266
26636: PUSH
26637: LD_INT 3
26639: NONEQUAL
26640: PUSH
26641: LD_VAR 0 1
26645: PPUSH
26646: CALL_OW 247
26650: PUSH
26651: LD_INT 1
26653: EQUAL
26654: NOT
26655: AND
26656: OR
26657: IFFALSE 26661
// exit ;
26659: GO 26810
// if GetType ( factory ) = unit_human then
26661: LD_VAR 0 1
26665: PPUSH
26666: CALL_OW 247
26670: PUSH
26671: LD_INT 1
26673: EQUAL
26674: IFFALSE 26691
// factory := IsInUnit ( factory ) ;
26676: LD_ADDR_VAR 0 1
26680: PUSH
26681: LD_VAR 0 1
26685: PPUSH
26686: CALL_OW 310
26690: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
26691: LD_VAR 0 1
26695: PPUSH
26696: CALL_OW 266
26700: PUSH
26701: LD_INT 3
26703: NONEQUAL
26704: IFFALSE 26708
// exit ;
26706: GO 26810
// if HexInfo ( x , y ) = factory then
26708: LD_VAR 0 2
26712: PPUSH
26713: LD_VAR 0 3
26717: PPUSH
26718: CALL_OW 428
26722: PUSH
26723: LD_VAR 0 1
26727: EQUAL
26728: IFFALSE 26755
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
26730: LD_ADDR_EXP 79
26734: PUSH
26735: LD_EXP 79
26739: PPUSH
26740: LD_VAR 0 1
26744: PPUSH
26745: LD_INT 0
26747: PPUSH
26748: CALL_OW 1
26752: ST_TO_ADDR
26753: GO 26806
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
26755: LD_ADDR_EXP 79
26759: PUSH
26760: LD_EXP 79
26764: PPUSH
26765: LD_VAR 0 1
26769: PPUSH
26770: LD_VAR 0 1
26774: PPUSH
26775: CALL_OW 255
26779: PUSH
26780: LD_VAR 0 1
26784: PUSH
26785: LD_VAR 0 2
26789: PUSH
26790: LD_VAR 0 3
26794: PUSH
26795: EMPTY
26796: LIST
26797: LIST
26798: LIST
26799: LIST
26800: PPUSH
26801: CALL_OW 1
26805: ST_TO_ADDR
// UpdateFactoryWaypoints ;
26806: CALL 26815 0 0
// end ;
26810: LD_VAR 0 4
26814: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
26815: LD_INT 0
26817: PPUSH
26818: PPUSH
26819: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
26820: LD_STRING resetFactoryWaypoint();
26822: PPUSH
26823: CALL_OW 559
// if factoryWaypoints then
26827: LD_EXP 79
26831: IFFALSE 26957
// begin list := PrepareArray ( factoryWaypoints ) ;
26833: LD_ADDR_VAR 0 3
26837: PUSH
26838: LD_EXP 79
26842: PPUSH
26843: CALL 73407 0 1
26847: ST_TO_ADDR
// for i := 1 to list do
26848: LD_ADDR_VAR 0 2
26852: PUSH
26853: DOUBLE
26854: LD_INT 1
26856: DEC
26857: ST_TO_ADDR
26858: LD_VAR 0 3
26862: PUSH
26863: FOR_TO
26864: IFFALSE 26955
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
26866: LD_STRING setFactoryWaypointXY(
26868: PUSH
26869: LD_VAR 0 3
26873: PUSH
26874: LD_VAR 0 2
26878: ARRAY
26879: PUSH
26880: LD_INT 1
26882: ARRAY
26883: STR
26884: PUSH
26885: LD_STRING ,
26887: STR
26888: PUSH
26889: LD_VAR 0 3
26893: PUSH
26894: LD_VAR 0 2
26898: ARRAY
26899: PUSH
26900: LD_INT 2
26902: ARRAY
26903: STR
26904: PUSH
26905: LD_STRING ,
26907: STR
26908: PUSH
26909: LD_VAR 0 3
26913: PUSH
26914: LD_VAR 0 2
26918: ARRAY
26919: PUSH
26920: LD_INT 3
26922: ARRAY
26923: STR
26924: PUSH
26925: LD_STRING ,
26927: STR
26928: PUSH
26929: LD_VAR 0 3
26933: PUSH
26934: LD_VAR 0 2
26938: ARRAY
26939: PUSH
26940: LD_INT 4
26942: ARRAY
26943: STR
26944: PUSH
26945: LD_STRING )
26947: STR
26948: PPUSH
26949: CALL_OW 559
26953: GO 26863
26955: POP
26956: POP
// end ; end ;
26957: LD_VAR 0 1
26961: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
26962: LD_INT 0
26964: PPUSH
// if HexInfo ( x , y ) = warehouse then
26965: LD_VAR 0 2
26969: PPUSH
26970: LD_VAR 0 3
26974: PPUSH
26975: CALL_OW 428
26979: PUSH
26980: LD_VAR 0 1
26984: EQUAL
26985: IFFALSE 27012
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
26987: LD_ADDR_EXP 80
26991: PUSH
26992: LD_EXP 80
26996: PPUSH
26997: LD_VAR 0 1
27001: PPUSH
27002: LD_INT 0
27004: PPUSH
27005: CALL_OW 1
27009: ST_TO_ADDR
27010: GO 27063
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
27012: LD_ADDR_EXP 80
27016: PUSH
27017: LD_EXP 80
27021: PPUSH
27022: LD_VAR 0 1
27026: PPUSH
27027: LD_VAR 0 1
27031: PPUSH
27032: CALL_OW 255
27036: PUSH
27037: LD_VAR 0 1
27041: PUSH
27042: LD_VAR 0 2
27046: PUSH
27047: LD_VAR 0 3
27051: PUSH
27052: EMPTY
27053: LIST
27054: LIST
27055: LIST
27056: LIST
27057: PPUSH
27058: CALL_OW 1
27062: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
27063: CALL 27072 0 0
// end ;
27067: LD_VAR 0 4
27071: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
27072: LD_INT 0
27074: PPUSH
27075: PPUSH
27076: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
27077: LD_STRING resetWarehouseGatheringPoints();
27079: PPUSH
27080: CALL_OW 559
// if warehouseGatheringPoints then
27084: LD_EXP 80
27088: IFFALSE 27214
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
27090: LD_ADDR_VAR 0 3
27094: PUSH
27095: LD_EXP 80
27099: PPUSH
27100: CALL 73407 0 1
27104: ST_TO_ADDR
// for i := 1 to list do
27105: LD_ADDR_VAR 0 2
27109: PUSH
27110: DOUBLE
27111: LD_INT 1
27113: DEC
27114: ST_TO_ADDR
27115: LD_VAR 0 3
27119: PUSH
27120: FOR_TO
27121: IFFALSE 27212
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
27123: LD_STRING setWarehouseGatheringPointXY(
27125: PUSH
27126: LD_VAR 0 3
27130: PUSH
27131: LD_VAR 0 2
27135: ARRAY
27136: PUSH
27137: LD_INT 1
27139: ARRAY
27140: STR
27141: PUSH
27142: LD_STRING ,
27144: STR
27145: PUSH
27146: LD_VAR 0 3
27150: PUSH
27151: LD_VAR 0 2
27155: ARRAY
27156: PUSH
27157: LD_INT 2
27159: ARRAY
27160: STR
27161: PUSH
27162: LD_STRING ,
27164: STR
27165: PUSH
27166: LD_VAR 0 3
27170: PUSH
27171: LD_VAR 0 2
27175: ARRAY
27176: PUSH
27177: LD_INT 3
27179: ARRAY
27180: STR
27181: PUSH
27182: LD_STRING ,
27184: STR
27185: PUSH
27186: LD_VAR 0 3
27190: PUSH
27191: LD_VAR 0 2
27195: ARRAY
27196: PUSH
27197: LD_INT 4
27199: ARRAY
27200: STR
27201: PUSH
27202: LD_STRING )
27204: STR
27205: PPUSH
27206: CALL_OW 559
27210: GO 27120
27212: POP
27213: POP
// end ; end ;
27214: LD_VAR 0 1
27218: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
27219: LD_EXP 80
27223: IFFALSE 27908
27225: GO 27227
27227: DISABLE
27228: LD_INT 0
27230: PPUSH
27231: PPUSH
27232: PPUSH
27233: PPUSH
27234: PPUSH
27235: PPUSH
27236: PPUSH
27237: PPUSH
27238: PPUSH
// begin enable ;
27239: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
27240: LD_ADDR_VAR 0 3
27244: PUSH
27245: LD_EXP 80
27249: PPUSH
27250: CALL 73407 0 1
27254: ST_TO_ADDR
// if not list then
27255: LD_VAR 0 3
27259: NOT
27260: IFFALSE 27264
// exit ;
27262: GO 27908
// for i := 1 to list do
27264: LD_ADDR_VAR 0 1
27268: PUSH
27269: DOUBLE
27270: LD_INT 1
27272: DEC
27273: ST_TO_ADDR
27274: LD_VAR 0 3
27278: PUSH
27279: FOR_TO
27280: IFFALSE 27906
// begin depot := list [ i ] [ 2 ] ;
27282: LD_ADDR_VAR 0 8
27286: PUSH
27287: LD_VAR 0 3
27291: PUSH
27292: LD_VAR 0 1
27296: ARRAY
27297: PUSH
27298: LD_INT 2
27300: ARRAY
27301: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
27302: LD_ADDR_VAR 0 5
27306: PUSH
27307: LD_VAR 0 3
27311: PUSH
27312: LD_VAR 0 1
27316: ARRAY
27317: PUSH
27318: LD_INT 1
27320: ARRAY
27321: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
27322: LD_VAR 0 8
27326: PPUSH
27327: CALL_OW 301
27331: PUSH
27332: LD_VAR 0 5
27336: PUSH
27337: LD_VAR 0 8
27341: PPUSH
27342: CALL_OW 255
27346: NONEQUAL
27347: OR
27348: IFFALSE 27377
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
27350: LD_ADDR_EXP 80
27354: PUSH
27355: LD_EXP 80
27359: PPUSH
27360: LD_VAR 0 8
27364: PPUSH
27365: LD_INT 0
27367: PPUSH
27368: CALL_OW 1
27372: ST_TO_ADDR
// exit ;
27373: POP
27374: POP
27375: GO 27908
// end ; x := list [ i ] [ 3 ] ;
27377: LD_ADDR_VAR 0 6
27381: PUSH
27382: LD_VAR 0 3
27386: PUSH
27387: LD_VAR 0 1
27391: ARRAY
27392: PUSH
27393: LD_INT 3
27395: ARRAY
27396: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
27397: LD_ADDR_VAR 0 7
27401: PUSH
27402: LD_VAR 0 3
27406: PUSH
27407: LD_VAR 0 1
27411: ARRAY
27412: PUSH
27413: LD_INT 4
27415: ARRAY
27416: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
27417: LD_ADDR_VAR 0 9
27421: PUSH
27422: LD_VAR 0 6
27426: PPUSH
27427: LD_VAR 0 7
27431: PPUSH
27432: LD_INT 16
27434: PPUSH
27435: CALL 71995 0 3
27439: ST_TO_ADDR
// if not cratesNearbyPoint then
27440: LD_VAR 0 9
27444: NOT
27445: IFFALSE 27451
// exit ;
27447: POP
27448: POP
27449: GO 27908
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
27451: LD_ADDR_VAR 0 4
27455: PUSH
27456: LD_INT 22
27458: PUSH
27459: LD_VAR 0 5
27463: PUSH
27464: EMPTY
27465: LIST
27466: LIST
27467: PUSH
27468: LD_INT 3
27470: PUSH
27471: LD_INT 60
27473: PUSH
27474: EMPTY
27475: LIST
27476: PUSH
27477: EMPTY
27478: LIST
27479: LIST
27480: PUSH
27481: LD_INT 91
27483: PUSH
27484: LD_VAR 0 8
27488: PUSH
27489: LD_INT 6
27491: PUSH
27492: EMPTY
27493: LIST
27494: LIST
27495: LIST
27496: PUSH
27497: LD_INT 2
27499: PUSH
27500: LD_INT 25
27502: PUSH
27503: LD_INT 2
27505: PUSH
27506: EMPTY
27507: LIST
27508: LIST
27509: PUSH
27510: LD_INT 25
27512: PUSH
27513: LD_INT 16
27515: PUSH
27516: EMPTY
27517: LIST
27518: LIST
27519: PUSH
27520: EMPTY
27521: LIST
27522: LIST
27523: LIST
27524: PUSH
27525: EMPTY
27526: LIST
27527: LIST
27528: LIST
27529: LIST
27530: PPUSH
27531: CALL_OW 69
27535: PUSH
27536: LD_VAR 0 8
27540: PPUSH
27541: CALL_OW 313
27545: PPUSH
27546: LD_INT 3
27548: PUSH
27549: LD_INT 60
27551: PUSH
27552: EMPTY
27553: LIST
27554: PUSH
27555: EMPTY
27556: LIST
27557: LIST
27558: PUSH
27559: LD_INT 2
27561: PUSH
27562: LD_INT 25
27564: PUSH
27565: LD_INT 2
27567: PUSH
27568: EMPTY
27569: LIST
27570: LIST
27571: PUSH
27572: LD_INT 25
27574: PUSH
27575: LD_INT 16
27577: PUSH
27578: EMPTY
27579: LIST
27580: LIST
27581: PUSH
27582: EMPTY
27583: LIST
27584: LIST
27585: LIST
27586: PUSH
27587: EMPTY
27588: LIST
27589: LIST
27590: PPUSH
27591: CALL_OW 72
27595: UNION
27596: ST_TO_ADDR
// if tmp then
27597: LD_VAR 0 4
27601: IFFALSE 27681
// begin tmp := ShrinkArray ( tmp , 3 ) ;
27603: LD_ADDR_VAR 0 4
27607: PUSH
27608: LD_VAR 0 4
27612: PPUSH
27613: LD_INT 3
27615: PPUSH
27616: CALL 69964 0 2
27620: ST_TO_ADDR
// for j in tmp do
27621: LD_ADDR_VAR 0 2
27625: PUSH
27626: LD_VAR 0 4
27630: PUSH
27631: FOR_IN
27632: IFFALSE 27675
// begin if IsInUnit ( j ) then
27634: LD_VAR 0 2
27638: PPUSH
27639: CALL_OW 310
27643: IFFALSE 27654
// ComExit ( j ) ;
27645: LD_VAR 0 2
27649: PPUSH
27650: CALL 70047 0 1
// AddComCollect ( j , x , y ) ;
27654: LD_VAR 0 2
27658: PPUSH
27659: LD_VAR 0 6
27663: PPUSH
27664: LD_VAR 0 7
27668: PPUSH
27669: CALL_OW 177
// end ;
27673: GO 27631
27675: POP
27676: POP
// exit ;
27677: POP
27678: POP
27679: GO 27908
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
27681: LD_ADDR_VAR 0 4
27685: PUSH
27686: LD_INT 22
27688: PUSH
27689: LD_VAR 0 5
27693: PUSH
27694: EMPTY
27695: LIST
27696: LIST
27697: PUSH
27698: LD_INT 91
27700: PUSH
27701: LD_VAR 0 8
27705: PUSH
27706: LD_INT 8
27708: PUSH
27709: EMPTY
27710: LIST
27711: LIST
27712: LIST
27713: PUSH
27714: LD_INT 2
27716: PUSH
27717: LD_INT 34
27719: PUSH
27720: LD_INT 12
27722: PUSH
27723: EMPTY
27724: LIST
27725: LIST
27726: PUSH
27727: LD_INT 34
27729: PUSH
27730: LD_INT 51
27732: PUSH
27733: EMPTY
27734: LIST
27735: LIST
27736: PUSH
27737: LD_INT 34
27739: PUSH
27740: LD_INT 32
27742: PUSH
27743: EMPTY
27744: LIST
27745: LIST
27746: PUSH
27747: LD_INT 34
27749: PUSH
27750: LD_INT 89
27752: PUSH
27753: EMPTY
27754: LIST
27755: LIST
27756: PUSH
27757: EMPTY
27758: LIST
27759: LIST
27760: LIST
27761: LIST
27762: LIST
27763: PUSH
27764: EMPTY
27765: LIST
27766: LIST
27767: LIST
27768: PPUSH
27769: CALL_OW 69
27773: ST_TO_ADDR
// if tmp then
27774: LD_VAR 0 4
27778: IFFALSE 27904
// begin for j in tmp do
27780: LD_ADDR_VAR 0 2
27784: PUSH
27785: LD_VAR 0 4
27789: PUSH
27790: FOR_IN
27791: IFFALSE 27902
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
27793: LD_VAR 0 2
27797: PPUSH
27798: CALL_OW 262
27802: PUSH
27803: LD_INT 3
27805: EQUAL
27806: PUSH
27807: LD_VAR 0 2
27811: PPUSH
27812: CALL_OW 261
27816: PUSH
27817: LD_INT 20
27819: GREATER
27820: OR
27821: PUSH
27822: LD_VAR 0 2
27826: PPUSH
27827: CALL_OW 314
27831: NOT
27832: AND
27833: PUSH
27834: LD_VAR 0 2
27838: PPUSH
27839: CALL_OW 263
27843: PUSH
27844: LD_INT 1
27846: NONEQUAL
27847: PUSH
27848: LD_VAR 0 2
27852: PPUSH
27853: CALL_OW 311
27857: OR
27858: AND
27859: IFFALSE 27900
// begin ComCollect ( j , x , y ) ;
27861: LD_VAR 0 2
27865: PPUSH
27866: LD_VAR 0 6
27870: PPUSH
27871: LD_VAR 0 7
27875: PPUSH
27876: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
27880: LD_VAR 0 2
27884: PPUSH
27885: LD_VAR 0 8
27889: PPUSH
27890: CALL_OW 172
// exit ;
27894: POP
27895: POP
27896: POP
27897: POP
27898: GO 27908
// end ;
27900: GO 27790
27902: POP
27903: POP
// end ; end ;
27904: GO 27279
27906: POP
27907: POP
// end ; end_of_file
27908: PPOPN 9
27910: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
27911: LD_INT 0
27913: PPUSH
27914: PPUSH
27915: PPUSH
27916: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
27917: LD_VAR 0 1
27921: PPUSH
27922: CALL_OW 264
27926: PUSH
27927: LD_INT 91
27929: EQUAL
27930: IFFALSE 28002
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
27932: LD_INT 68
27934: PPUSH
27935: LD_VAR 0 1
27939: PPUSH
27940: CALL_OW 255
27944: PPUSH
27945: CALL_OW 321
27949: PUSH
27950: LD_INT 2
27952: EQUAL
27953: IFFALSE 27965
// eff := 70 else
27955: LD_ADDR_VAR 0 4
27959: PUSH
27960: LD_INT 70
27962: ST_TO_ADDR
27963: GO 27973
// eff := 30 ;
27965: LD_ADDR_VAR 0 4
27969: PUSH
27970: LD_INT 30
27972: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
27973: LD_VAR 0 1
27977: PPUSH
27978: CALL_OW 250
27982: PPUSH
27983: LD_VAR 0 1
27987: PPUSH
27988: CALL_OW 251
27992: PPUSH
27993: LD_VAR 0 4
27997: PPUSH
27998: CALL_OW 495
// end ; end ;
28002: LD_VAR 0 2
28006: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
28007: LD_INT 0
28009: PPUSH
// end ;
28010: LD_VAR 0 4
28014: RET
// export function SOS_Command ( cmd ) ; begin
28015: LD_INT 0
28017: PPUSH
// end ;
28018: LD_VAR 0 2
28022: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
28023: LD_INT 0
28025: PPUSH
// end ;
28026: LD_VAR 0 6
28030: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
28031: LD_INT 0
28033: PPUSH
28034: PPUSH
// if not vehicle or not factory then
28035: LD_VAR 0 1
28039: NOT
28040: PUSH
28041: LD_VAR 0 2
28045: NOT
28046: OR
28047: IFFALSE 28051
// exit ;
28049: GO 28282
// if factoryWaypoints >= factory then
28051: LD_EXP 79
28055: PUSH
28056: LD_VAR 0 2
28060: GREATEREQUAL
28061: IFFALSE 28282
// if factoryWaypoints [ factory ] then
28063: LD_EXP 79
28067: PUSH
28068: LD_VAR 0 2
28072: ARRAY
28073: IFFALSE 28282
// begin if GetControl ( vehicle ) = control_manual then
28075: LD_VAR 0 1
28079: PPUSH
28080: CALL_OW 263
28084: PUSH
28085: LD_INT 1
28087: EQUAL
28088: IFFALSE 28169
// begin driver := IsDrivenBy ( vehicle ) ;
28090: LD_ADDR_VAR 0 4
28094: PUSH
28095: LD_VAR 0 1
28099: PPUSH
28100: CALL_OW 311
28104: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
28105: LD_VAR 0 4
28109: PPUSH
28110: LD_EXP 79
28114: PUSH
28115: LD_VAR 0 2
28119: ARRAY
28120: PUSH
28121: LD_INT 3
28123: ARRAY
28124: PPUSH
28125: LD_EXP 79
28129: PUSH
28130: LD_VAR 0 2
28134: ARRAY
28135: PUSH
28136: LD_INT 4
28138: ARRAY
28139: PPUSH
28140: CALL_OW 171
// AddComExitVehicle ( driver ) ;
28144: LD_VAR 0 4
28148: PPUSH
28149: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
28153: LD_VAR 0 4
28157: PPUSH
28158: LD_VAR 0 2
28162: PPUSH
28163: CALL_OW 180
// end else
28167: GO 28282
// if GetControl ( vehicle ) = control_remote then
28169: LD_VAR 0 1
28173: PPUSH
28174: CALL_OW 263
28178: PUSH
28179: LD_INT 2
28181: EQUAL
28182: IFFALSE 28243
// begin wait ( 0 0$2 ) ;
28184: LD_INT 70
28186: PPUSH
28187: CALL_OW 67
// if Connect ( vehicle ) then
28191: LD_VAR 0 1
28195: PPUSH
28196: CALL 40306 0 1
28200: IFFALSE 28241
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
28202: LD_VAR 0 1
28206: PPUSH
28207: LD_EXP 79
28211: PUSH
28212: LD_VAR 0 2
28216: ARRAY
28217: PUSH
28218: LD_INT 3
28220: ARRAY
28221: PPUSH
28222: LD_EXP 79
28226: PUSH
28227: LD_VAR 0 2
28231: ARRAY
28232: PUSH
28233: LD_INT 4
28235: ARRAY
28236: PPUSH
28237: CALL_OW 171
// end else
28241: GO 28282
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
28243: LD_VAR 0 1
28247: PPUSH
28248: LD_EXP 79
28252: PUSH
28253: LD_VAR 0 2
28257: ARRAY
28258: PUSH
28259: LD_INT 3
28261: ARRAY
28262: PPUSH
28263: LD_EXP 79
28267: PUSH
28268: LD_VAR 0 2
28272: ARRAY
28273: PUSH
28274: LD_INT 4
28276: ARRAY
28277: PPUSH
28278: CALL_OW 171
// end ; end ;
28282: LD_VAR 0 3
28286: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
28287: LD_INT 0
28289: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
28290: LD_VAR 0 1
28294: PUSH
28295: LD_INT 250
28297: EQUAL
28298: PUSH
28299: LD_VAR 0 2
28303: PPUSH
28304: CALL_OW 264
28308: PUSH
28309: LD_INT 81
28311: EQUAL
28312: AND
28313: IFFALSE 28334
// MinerPlaceMine ( unit , x , y ) ;
28315: LD_VAR 0 2
28319: PPUSH
28320: LD_VAR 0 4
28324: PPUSH
28325: LD_VAR 0 5
28329: PPUSH
28330: CALL 30719 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
28334: LD_VAR 0 1
28338: PUSH
28339: LD_INT 251
28341: EQUAL
28342: PUSH
28343: LD_VAR 0 2
28347: PPUSH
28348: CALL_OW 264
28352: PUSH
28353: LD_INT 81
28355: EQUAL
28356: AND
28357: IFFALSE 28378
// MinerDetonateMine ( unit , x , y ) ;
28359: LD_VAR 0 2
28363: PPUSH
28364: LD_VAR 0 4
28368: PPUSH
28369: LD_VAR 0 5
28373: PPUSH
28374: CALL 30994 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
28378: LD_VAR 0 1
28382: PUSH
28383: LD_INT 252
28385: EQUAL
28386: PUSH
28387: LD_VAR 0 2
28391: PPUSH
28392: CALL_OW 264
28396: PUSH
28397: LD_INT 81
28399: EQUAL
28400: AND
28401: IFFALSE 28422
// MinerCreateMinefield ( unit , x , y ) ;
28403: LD_VAR 0 2
28407: PPUSH
28408: LD_VAR 0 4
28412: PPUSH
28413: LD_VAR 0 5
28417: PPUSH
28418: CALL 31411 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
28422: LD_VAR 0 1
28426: PUSH
28427: LD_INT 253
28429: EQUAL
28430: PUSH
28431: LD_VAR 0 2
28435: PPUSH
28436: CALL_OW 257
28440: PUSH
28441: LD_INT 5
28443: EQUAL
28444: AND
28445: IFFALSE 28466
// ComBinocular ( unit , x , y ) ;
28447: LD_VAR 0 2
28451: PPUSH
28452: LD_VAR 0 4
28456: PPUSH
28457: LD_VAR 0 5
28461: PPUSH
28462: CALL 31780 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
28466: LD_VAR 0 1
28470: PUSH
28471: LD_INT 254
28473: EQUAL
28474: PUSH
28475: LD_VAR 0 2
28479: PPUSH
28480: CALL_OW 264
28484: PUSH
28485: LD_INT 99
28487: EQUAL
28488: AND
28489: PUSH
28490: LD_VAR 0 3
28494: PPUSH
28495: CALL_OW 263
28499: PUSH
28500: LD_INT 3
28502: EQUAL
28503: AND
28504: IFFALSE 28520
// HackDestroyVehicle ( unit , selectedUnit ) ;
28506: LD_VAR 0 2
28510: PPUSH
28511: LD_VAR 0 3
28515: PPUSH
28516: CALL 30083 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
28520: LD_VAR 0 1
28524: PUSH
28525: LD_INT 255
28527: EQUAL
28528: PUSH
28529: LD_VAR 0 2
28533: PPUSH
28534: CALL_OW 264
28538: PUSH
28539: LD_INT 14
28541: PUSH
28542: LD_INT 53
28544: PUSH
28545: EMPTY
28546: LIST
28547: LIST
28548: IN
28549: AND
28550: PUSH
28551: LD_VAR 0 4
28555: PPUSH
28556: LD_VAR 0 5
28560: PPUSH
28561: CALL_OW 488
28565: AND
28566: IFFALSE 28590
// CutTreeXYR ( unit , x , y , 12 ) ;
28568: LD_VAR 0 2
28572: PPUSH
28573: LD_VAR 0 4
28577: PPUSH
28578: LD_VAR 0 5
28582: PPUSH
28583: LD_INT 12
28585: PPUSH
28586: CALL 28653 0 4
// if cmd = 256 then
28590: LD_VAR 0 1
28594: PUSH
28595: LD_INT 256
28597: EQUAL
28598: IFFALSE 28619
// SetFactoryWaypoint ( unit , x , y ) ;
28600: LD_VAR 0 2
28604: PPUSH
28605: LD_VAR 0 4
28609: PPUSH
28610: LD_VAR 0 5
28614: PPUSH
28615: CALL 26600 0 3
// if cmd = 257 then
28619: LD_VAR 0 1
28623: PUSH
28624: LD_INT 257
28626: EQUAL
28627: IFFALSE 28648
// SetWarehouseGatheringPoint ( unit , x , y ) ;
28629: LD_VAR 0 2
28633: PPUSH
28634: LD_VAR 0 4
28638: PPUSH
28639: LD_VAR 0 5
28643: PPUSH
28644: CALL 26962 0 3
// end ;
28648: LD_VAR 0 6
28652: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
28653: LD_INT 0
28655: PPUSH
28656: PPUSH
28657: PPUSH
28658: PPUSH
28659: PPUSH
28660: PPUSH
28661: PPUSH
28662: PPUSH
28663: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
28664: LD_VAR 0 1
28668: NOT
28669: PUSH
28670: LD_VAR 0 2
28674: PPUSH
28675: LD_VAR 0 3
28679: PPUSH
28680: CALL_OW 488
28684: NOT
28685: OR
28686: PUSH
28687: LD_VAR 0 4
28691: NOT
28692: OR
28693: IFFALSE 28697
// exit ;
28695: GO 29037
// list := [ ] ;
28697: LD_ADDR_VAR 0 13
28701: PUSH
28702: EMPTY
28703: ST_TO_ADDR
// if x - r < 0 then
28704: LD_VAR 0 2
28708: PUSH
28709: LD_VAR 0 4
28713: MINUS
28714: PUSH
28715: LD_INT 0
28717: LESS
28718: IFFALSE 28730
// min_x := 0 else
28720: LD_ADDR_VAR 0 7
28724: PUSH
28725: LD_INT 0
28727: ST_TO_ADDR
28728: GO 28746
// min_x := x - r ;
28730: LD_ADDR_VAR 0 7
28734: PUSH
28735: LD_VAR 0 2
28739: PUSH
28740: LD_VAR 0 4
28744: MINUS
28745: ST_TO_ADDR
// if y - r < 0 then
28746: LD_VAR 0 3
28750: PUSH
28751: LD_VAR 0 4
28755: MINUS
28756: PUSH
28757: LD_INT 0
28759: LESS
28760: IFFALSE 28772
// min_y := 0 else
28762: LD_ADDR_VAR 0 8
28766: PUSH
28767: LD_INT 0
28769: ST_TO_ADDR
28770: GO 28788
// min_y := y - r ;
28772: LD_ADDR_VAR 0 8
28776: PUSH
28777: LD_VAR 0 3
28781: PUSH
28782: LD_VAR 0 4
28786: MINUS
28787: ST_TO_ADDR
// max_x := x + r ;
28788: LD_ADDR_VAR 0 9
28792: PUSH
28793: LD_VAR 0 2
28797: PUSH
28798: LD_VAR 0 4
28802: PLUS
28803: ST_TO_ADDR
// max_y := y + r ;
28804: LD_ADDR_VAR 0 10
28808: PUSH
28809: LD_VAR 0 3
28813: PUSH
28814: LD_VAR 0 4
28818: PLUS
28819: ST_TO_ADDR
// for _x = min_x to max_x do
28820: LD_ADDR_VAR 0 11
28824: PUSH
28825: DOUBLE
28826: LD_VAR 0 7
28830: DEC
28831: ST_TO_ADDR
28832: LD_VAR 0 9
28836: PUSH
28837: FOR_TO
28838: IFFALSE 28955
// for _y = min_y to max_y do
28840: LD_ADDR_VAR 0 12
28844: PUSH
28845: DOUBLE
28846: LD_VAR 0 8
28850: DEC
28851: ST_TO_ADDR
28852: LD_VAR 0 10
28856: PUSH
28857: FOR_TO
28858: IFFALSE 28951
// begin if not ValidHex ( _x , _y ) then
28860: LD_VAR 0 11
28864: PPUSH
28865: LD_VAR 0 12
28869: PPUSH
28870: CALL_OW 488
28874: NOT
28875: IFFALSE 28879
// continue ;
28877: GO 28857
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
28879: LD_VAR 0 11
28883: PPUSH
28884: LD_VAR 0 12
28888: PPUSH
28889: CALL_OW 351
28893: PUSH
28894: LD_VAR 0 11
28898: PPUSH
28899: LD_VAR 0 12
28903: PPUSH
28904: CALL_OW 554
28908: AND
28909: IFFALSE 28949
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
28911: LD_ADDR_VAR 0 13
28915: PUSH
28916: LD_VAR 0 13
28920: PPUSH
28921: LD_VAR 0 13
28925: PUSH
28926: LD_INT 1
28928: PLUS
28929: PPUSH
28930: LD_VAR 0 11
28934: PUSH
28935: LD_VAR 0 12
28939: PUSH
28940: EMPTY
28941: LIST
28942: LIST
28943: PPUSH
28944: CALL_OW 2
28948: ST_TO_ADDR
// end ;
28949: GO 28857
28951: POP
28952: POP
28953: GO 28837
28955: POP
28956: POP
// if not list then
28957: LD_VAR 0 13
28961: NOT
28962: IFFALSE 28966
// exit ;
28964: GO 29037
// for i in list do
28966: LD_ADDR_VAR 0 6
28970: PUSH
28971: LD_VAR 0 13
28975: PUSH
28976: FOR_IN
28977: IFFALSE 29035
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
28979: LD_VAR 0 1
28983: PPUSH
28984: LD_STRING M
28986: PUSH
28987: LD_VAR 0 6
28991: PUSH
28992: LD_INT 1
28994: ARRAY
28995: PUSH
28996: LD_VAR 0 6
29000: PUSH
29001: LD_INT 2
29003: ARRAY
29004: PUSH
29005: LD_INT 0
29007: PUSH
29008: LD_INT 0
29010: PUSH
29011: LD_INT 0
29013: PUSH
29014: LD_INT 0
29016: PUSH
29017: EMPTY
29018: LIST
29019: LIST
29020: LIST
29021: LIST
29022: LIST
29023: LIST
29024: LIST
29025: PUSH
29026: EMPTY
29027: LIST
29028: PPUSH
29029: CALL_OW 447
29033: GO 28976
29035: POP
29036: POP
// end ;
29037: LD_VAR 0 5
29041: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
29042: LD_EXP 82
29046: NOT
29047: IFFALSE 29097
29049: GO 29051
29051: DISABLE
// begin initHack := true ;
29052: LD_ADDR_EXP 82
29056: PUSH
29057: LD_INT 1
29059: ST_TO_ADDR
// hackTanks := [ ] ;
29060: LD_ADDR_EXP 83
29064: PUSH
29065: EMPTY
29066: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
29067: LD_ADDR_EXP 84
29071: PUSH
29072: EMPTY
29073: ST_TO_ADDR
// hackLimit := 3 ;
29074: LD_ADDR_EXP 85
29078: PUSH
29079: LD_INT 3
29081: ST_TO_ADDR
// hackDist := 12 ;
29082: LD_ADDR_EXP 86
29086: PUSH
29087: LD_INT 12
29089: ST_TO_ADDR
// hackCounter := [ ] ;
29090: LD_ADDR_EXP 87
29094: PUSH
29095: EMPTY
29096: ST_TO_ADDR
// end ;
29097: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
29098: LD_EXP 82
29102: PUSH
29103: LD_INT 34
29105: PUSH
29106: LD_INT 99
29108: PUSH
29109: EMPTY
29110: LIST
29111: LIST
29112: PPUSH
29113: CALL_OW 69
29117: AND
29118: IFFALSE 29371
29120: GO 29122
29122: DISABLE
29123: LD_INT 0
29125: PPUSH
29126: PPUSH
// begin enable ;
29127: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
29128: LD_ADDR_VAR 0 1
29132: PUSH
29133: LD_INT 34
29135: PUSH
29136: LD_INT 99
29138: PUSH
29139: EMPTY
29140: LIST
29141: LIST
29142: PPUSH
29143: CALL_OW 69
29147: PUSH
29148: FOR_IN
29149: IFFALSE 29369
// begin if not i in hackTanks then
29151: LD_VAR 0 1
29155: PUSH
29156: LD_EXP 83
29160: IN
29161: NOT
29162: IFFALSE 29245
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
29164: LD_ADDR_EXP 83
29168: PUSH
29169: LD_EXP 83
29173: PPUSH
29174: LD_EXP 83
29178: PUSH
29179: LD_INT 1
29181: PLUS
29182: PPUSH
29183: LD_VAR 0 1
29187: PPUSH
29188: CALL_OW 1
29192: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
29193: LD_ADDR_EXP 84
29197: PUSH
29198: LD_EXP 84
29202: PPUSH
29203: LD_EXP 84
29207: PUSH
29208: LD_INT 1
29210: PLUS
29211: PPUSH
29212: EMPTY
29213: PPUSH
29214: CALL_OW 1
29218: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
29219: LD_ADDR_EXP 87
29223: PUSH
29224: LD_EXP 87
29228: PPUSH
29229: LD_EXP 87
29233: PUSH
29234: LD_INT 1
29236: PLUS
29237: PPUSH
29238: EMPTY
29239: PPUSH
29240: CALL_OW 1
29244: ST_TO_ADDR
// end ; if not IsOk ( i ) then
29245: LD_VAR 0 1
29249: PPUSH
29250: CALL_OW 302
29254: NOT
29255: IFFALSE 29268
// begin HackUnlinkAll ( i ) ;
29257: LD_VAR 0 1
29261: PPUSH
29262: CALL 29374 0 1
// continue ;
29266: GO 29148
// end ; HackCheckCapturedStatus ( i ) ;
29268: LD_VAR 0 1
29272: PPUSH
29273: CALL 29817 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
29277: LD_ADDR_VAR 0 2
29281: PUSH
29282: LD_INT 81
29284: PUSH
29285: LD_VAR 0 1
29289: PPUSH
29290: CALL_OW 255
29294: PUSH
29295: EMPTY
29296: LIST
29297: LIST
29298: PUSH
29299: LD_INT 33
29301: PUSH
29302: LD_INT 3
29304: PUSH
29305: EMPTY
29306: LIST
29307: LIST
29308: PUSH
29309: LD_INT 91
29311: PUSH
29312: LD_VAR 0 1
29316: PUSH
29317: LD_EXP 86
29321: PUSH
29322: EMPTY
29323: LIST
29324: LIST
29325: LIST
29326: PUSH
29327: LD_INT 50
29329: PUSH
29330: EMPTY
29331: LIST
29332: PUSH
29333: EMPTY
29334: LIST
29335: LIST
29336: LIST
29337: LIST
29338: PPUSH
29339: CALL_OW 69
29343: ST_TO_ADDR
// if not tmp then
29344: LD_VAR 0 2
29348: NOT
29349: IFFALSE 29353
// continue ;
29351: GO 29148
// HackLink ( i , tmp ) ;
29353: LD_VAR 0 1
29357: PPUSH
29358: LD_VAR 0 2
29362: PPUSH
29363: CALL 29510 0 2
// end ;
29367: GO 29148
29369: POP
29370: POP
// end ;
29371: PPOPN 2
29373: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
29374: LD_INT 0
29376: PPUSH
29377: PPUSH
29378: PPUSH
// if not hack in hackTanks then
29379: LD_VAR 0 1
29383: PUSH
29384: LD_EXP 83
29388: IN
29389: NOT
29390: IFFALSE 29394
// exit ;
29392: GO 29505
// index := GetElementIndex ( hackTanks , hack ) ;
29394: LD_ADDR_VAR 0 4
29398: PUSH
29399: LD_EXP 83
29403: PPUSH
29404: LD_VAR 0 1
29408: PPUSH
29409: CALL 37122 0 2
29413: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
29414: LD_EXP 84
29418: PUSH
29419: LD_VAR 0 4
29423: ARRAY
29424: IFFALSE 29505
// begin for i in hackTanksCaptured [ index ] do
29426: LD_ADDR_VAR 0 3
29430: PUSH
29431: LD_EXP 84
29435: PUSH
29436: LD_VAR 0 4
29440: ARRAY
29441: PUSH
29442: FOR_IN
29443: IFFALSE 29469
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
29445: LD_VAR 0 3
29449: PUSH
29450: LD_INT 1
29452: ARRAY
29453: PPUSH
29454: LD_VAR 0 3
29458: PUSH
29459: LD_INT 2
29461: ARRAY
29462: PPUSH
29463: CALL_OW 235
29467: GO 29442
29469: POP
29470: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
29471: LD_ADDR_EXP 84
29475: PUSH
29476: LD_EXP 84
29480: PPUSH
29481: LD_VAR 0 4
29485: PPUSH
29486: EMPTY
29487: PPUSH
29488: CALL_OW 1
29492: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
29493: LD_VAR 0 1
29497: PPUSH
29498: LD_INT 0
29500: PPUSH
29501: CALL_OW 505
// end ; end ;
29505: LD_VAR 0 2
29509: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
29510: LD_INT 0
29512: PPUSH
29513: PPUSH
29514: PPUSH
// if not hack in hackTanks or not vehicles then
29515: LD_VAR 0 1
29519: PUSH
29520: LD_EXP 83
29524: IN
29525: NOT
29526: PUSH
29527: LD_VAR 0 2
29531: NOT
29532: OR
29533: IFFALSE 29537
// exit ;
29535: GO 29812
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
29537: LD_ADDR_VAR 0 2
29541: PUSH
29542: LD_VAR 0 1
29546: PPUSH
29547: LD_VAR 0 2
29551: PPUSH
29552: LD_INT 1
29554: PPUSH
29555: LD_INT 1
29557: PPUSH
29558: CALL 37772 0 4
29562: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
29563: LD_ADDR_VAR 0 5
29567: PUSH
29568: LD_EXP 83
29572: PPUSH
29573: LD_VAR 0 1
29577: PPUSH
29578: CALL 37122 0 2
29582: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
29583: LD_EXP 84
29587: PUSH
29588: LD_VAR 0 5
29592: ARRAY
29593: PUSH
29594: LD_EXP 85
29598: LESS
29599: IFFALSE 29788
// begin for i := 1 to vehicles do
29601: LD_ADDR_VAR 0 4
29605: PUSH
29606: DOUBLE
29607: LD_INT 1
29609: DEC
29610: ST_TO_ADDR
29611: LD_VAR 0 2
29615: PUSH
29616: FOR_TO
29617: IFFALSE 29786
// begin if hackTanksCaptured [ index ] = hackLimit then
29619: LD_EXP 84
29623: PUSH
29624: LD_VAR 0 5
29628: ARRAY
29629: PUSH
29630: LD_EXP 85
29634: EQUAL
29635: IFFALSE 29639
// break ;
29637: GO 29786
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
29639: LD_ADDR_EXP 87
29643: PUSH
29644: LD_EXP 87
29648: PPUSH
29649: LD_VAR 0 5
29653: PPUSH
29654: LD_EXP 87
29658: PUSH
29659: LD_VAR 0 5
29663: ARRAY
29664: PUSH
29665: LD_INT 1
29667: PLUS
29668: PPUSH
29669: CALL_OW 1
29673: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
29674: LD_ADDR_EXP 84
29678: PUSH
29679: LD_EXP 84
29683: PPUSH
29684: LD_VAR 0 5
29688: PUSH
29689: LD_EXP 84
29693: PUSH
29694: LD_VAR 0 5
29698: ARRAY
29699: PUSH
29700: LD_INT 1
29702: PLUS
29703: PUSH
29704: EMPTY
29705: LIST
29706: LIST
29707: PPUSH
29708: LD_VAR 0 2
29712: PUSH
29713: LD_VAR 0 4
29717: ARRAY
29718: PUSH
29719: LD_VAR 0 2
29723: PUSH
29724: LD_VAR 0 4
29728: ARRAY
29729: PPUSH
29730: CALL_OW 255
29734: PUSH
29735: EMPTY
29736: LIST
29737: LIST
29738: PPUSH
29739: CALL 37337 0 3
29743: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
29744: LD_VAR 0 2
29748: PUSH
29749: LD_VAR 0 4
29753: ARRAY
29754: PPUSH
29755: LD_VAR 0 1
29759: PPUSH
29760: CALL_OW 255
29764: PPUSH
29765: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
29769: LD_VAR 0 2
29773: PUSH
29774: LD_VAR 0 4
29778: ARRAY
29779: PPUSH
29780: CALL_OW 141
// end ;
29784: GO 29616
29786: POP
29787: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
29788: LD_VAR 0 1
29792: PPUSH
29793: LD_EXP 84
29797: PUSH
29798: LD_VAR 0 5
29802: ARRAY
29803: PUSH
29804: LD_INT 0
29806: PLUS
29807: PPUSH
29808: CALL_OW 505
// end ;
29812: LD_VAR 0 3
29816: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
29817: LD_INT 0
29819: PPUSH
29820: PPUSH
29821: PPUSH
29822: PPUSH
// if not hack in hackTanks then
29823: LD_VAR 0 1
29827: PUSH
29828: LD_EXP 83
29832: IN
29833: NOT
29834: IFFALSE 29838
// exit ;
29836: GO 30078
// index := GetElementIndex ( hackTanks , hack ) ;
29838: LD_ADDR_VAR 0 4
29842: PUSH
29843: LD_EXP 83
29847: PPUSH
29848: LD_VAR 0 1
29852: PPUSH
29853: CALL 37122 0 2
29857: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
29858: LD_ADDR_VAR 0 3
29862: PUSH
29863: DOUBLE
29864: LD_EXP 84
29868: PUSH
29869: LD_VAR 0 4
29873: ARRAY
29874: INC
29875: ST_TO_ADDR
29876: LD_INT 1
29878: PUSH
29879: FOR_DOWNTO
29880: IFFALSE 30052
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
29882: LD_ADDR_VAR 0 5
29886: PUSH
29887: LD_EXP 84
29891: PUSH
29892: LD_VAR 0 4
29896: ARRAY
29897: PUSH
29898: LD_VAR 0 3
29902: ARRAY
29903: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
29904: LD_VAR 0 5
29908: PUSH
29909: LD_INT 1
29911: ARRAY
29912: PPUSH
29913: CALL_OW 302
29917: NOT
29918: PUSH
29919: LD_VAR 0 5
29923: PUSH
29924: LD_INT 1
29926: ARRAY
29927: PPUSH
29928: CALL_OW 255
29932: PUSH
29933: LD_VAR 0 1
29937: PPUSH
29938: CALL_OW 255
29942: NONEQUAL
29943: OR
29944: IFFALSE 30050
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
29946: LD_VAR 0 5
29950: PUSH
29951: LD_INT 1
29953: ARRAY
29954: PPUSH
29955: CALL_OW 305
29959: PUSH
29960: LD_VAR 0 5
29964: PUSH
29965: LD_INT 1
29967: ARRAY
29968: PPUSH
29969: CALL_OW 255
29973: PUSH
29974: LD_VAR 0 1
29978: PPUSH
29979: CALL_OW 255
29983: EQUAL
29984: AND
29985: IFFALSE 30009
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
29987: LD_VAR 0 5
29991: PUSH
29992: LD_INT 1
29994: ARRAY
29995: PPUSH
29996: LD_VAR 0 5
30000: PUSH
30001: LD_INT 2
30003: ARRAY
30004: PPUSH
30005: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
30009: LD_ADDR_EXP 84
30013: PUSH
30014: LD_EXP 84
30018: PPUSH
30019: LD_VAR 0 4
30023: PPUSH
30024: LD_EXP 84
30028: PUSH
30029: LD_VAR 0 4
30033: ARRAY
30034: PPUSH
30035: LD_VAR 0 3
30039: PPUSH
30040: CALL_OW 3
30044: PPUSH
30045: CALL_OW 1
30049: ST_TO_ADDR
// end ; end ;
30050: GO 29879
30052: POP
30053: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
30054: LD_VAR 0 1
30058: PPUSH
30059: LD_EXP 84
30063: PUSH
30064: LD_VAR 0 4
30068: ARRAY
30069: PUSH
30070: LD_INT 0
30072: PLUS
30073: PPUSH
30074: CALL_OW 505
// end ;
30078: LD_VAR 0 2
30082: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
30083: LD_INT 0
30085: PPUSH
30086: PPUSH
30087: PPUSH
30088: PPUSH
// if not hack in hackTanks then
30089: LD_VAR 0 1
30093: PUSH
30094: LD_EXP 83
30098: IN
30099: NOT
30100: IFFALSE 30104
// exit ;
30102: GO 30189
// index := GetElementIndex ( hackTanks , hack ) ;
30104: LD_ADDR_VAR 0 5
30108: PUSH
30109: LD_EXP 83
30113: PPUSH
30114: LD_VAR 0 1
30118: PPUSH
30119: CALL 37122 0 2
30123: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
30124: LD_ADDR_VAR 0 4
30128: PUSH
30129: DOUBLE
30130: LD_INT 1
30132: DEC
30133: ST_TO_ADDR
30134: LD_EXP 84
30138: PUSH
30139: LD_VAR 0 5
30143: ARRAY
30144: PUSH
30145: FOR_TO
30146: IFFALSE 30187
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
30148: LD_EXP 84
30152: PUSH
30153: LD_VAR 0 5
30157: ARRAY
30158: PUSH
30159: LD_VAR 0 4
30163: ARRAY
30164: PUSH
30165: LD_INT 1
30167: ARRAY
30168: PUSH
30169: LD_VAR 0 2
30173: EQUAL
30174: IFFALSE 30185
// KillUnit ( vehicle ) ;
30176: LD_VAR 0 2
30180: PPUSH
30181: CALL_OW 66
30185: GO 30145
30187: POP
30188: POP
// end ;
30189: LD_VAR 0 3
30193: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
30194: LD_EXP 88
30198: NOT
30199: IFFALSE 30234
30201: GO 30203
30203: DISABLE
// begin initMiner := true ;
30204: LD_ADDR_EXP 88
30208: PUSH
30209: LD_INT 1
30211: ST_TO_ADDR
// minersList := [ ] ;
30212: LD_ADDR_EXP 89
30216: PUSH
30217: EMPTY
30218: ST_TO_ADDR
// minerMinesList := [ ] ;
30219: LD_ADDR_EXP 90
30223: PUSH
30224: EMPTY
30225: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
30226: LD_ADDR_EXP 91
30230: PUSH
30231: LD_INT 5
30233: ST_TO_ADDR
// end ;
30234: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
30235: LD_EXP 88
30239: PUSH
30240: LD_INT 34
30242: PUSH
30243: LD_INT 81
30245: PUSH
30246: EMPTY
30247: LIST
30248: LIST
30249: PPUSH
30250: CALL_OW 69
30254: AND
30255: IFFALSE 30716
30257: GO 30259
30259: DISABLE
30260: LD_INT 0
30262: PPUSH
30263: PPUSH
30264: PPUSH
30265: PPUSH
// begin enable ;
30266: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
30267: LD_ADDR_VAR 0 1
30271: PUSH
30272: LD_INT 34
30274: PUSH
30275: LD_INT 81
30277: PUSH
30278: EMPTY
30279: LIST
30280: LIST
30281: PPUSH
30282: CALL_OW 69
30286: PUSH
30287: FOR_IN
30288: IFFALSE 30360
// begin if not i in minersList then
30290: LD_VAR 0 1
30294: PUSH
30295: LD_EXP 89
30299: IN
30300: NOT
30301: IFFALSE 30358
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
30303: LD_ADDR_EXP 89
30307: PUSH
30308: LD_EXP 89
30312: PPUSH
30313: LD_EXP 89
30317: PUSH
30318: LD_INT 1
30320: PLUS
30321: PPUSH
30322: LD_VAR 0 1
30326: PPUSH
30327: CALL_OW 1
30331: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
30332: LD_ADDR_EXP 90
30336: PUSH
30337: LD_EXP 90
30341: PPUSH
30342: LD_EXP 90
30346: PUSH
30347: LD_INT 1
30349: PLUS
30350: PPUSH
30351: EMPTY
30352: PPUSH
30353: CALL_OW 1
30357: ST_TO_ADDR
// end end ;
30358: GO 30287
30360: POP
30361: POP
// for i := minerMinesList downto 1 do
30362: LD_ADDR_VAR 0 1
30366: PUSH
30367: DOUBLE
30368: LD_EXP 90
30372: INC
30373: ST_TO_ADDR
30374: LD_INT 1
30376: PUSH
30377: FOR_DOWNTO
30378: IFFALSE 30714
// begin if IsLive ( minersList [ i ] ) then
30380: LD_EXP 89
30384: PUSH
30385: LD_VAR 0 1
30389: ARRAY
30390: PPUSH
30391: CALL_OW 300
30395: IFFALSE 30423
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
30397: LD_EXP 89
30401: PUSH
30402: LD_VAR 0 1
30406: ARRAY
30407: PPUSH
30408: LD_EXP 90
30412: PUSH
30413: LD_VAR 0 1
30417: ARRAY
30418: PPUSH
30419: CALL_OW 505
// if not minerMinesList [ i ] then
30423: LD_EXP 90
30427: PUSH
30428: LD_VAR 0 1
30432: ARRAY
30433: NOT
30434: IFFALSE 30438
// continue ;
30436: GO 30377
// for j := minerMinesList [ i ] downto 1 do
30438: LD_ADDR_VAR 0 2
30442: PUSH
30443: DOUBLE
30444: LD_EXP 90
30448: PUSH
30449: LD_VAR 0 1
30453: ARRAY
30454: INC
30455: ST_TO_ADDR
30456: LD_INT 1
30458: PUSH
30459: FOR_DOWNTO
30460: IFFALSE 30710
// begin side := GetSide ( minersList [ i ] ) ;
30462: LD_ADDR_VAR 0 3
30466: PUSH
30467: LD_EXP 89
30471: PUSH
30472: LD_VAR 0 1
30476: ARRAY
30477: PPUSH
30478: CALL_OW 255
30482: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
30483: LD_ADDR_VAR 0 4
30487: PUSH
30488: LD_EXP 90
30492: PUSH
30493: LD_VAR 0 1
30497: ARRAY
30498: PUSH
30499: LD_VAR 0 2
30503: ARRAY
30504: PUSH
30505: LD_INT 1
30507: ARRAY
30508: PPUSH
30509: LD_EXP 90
30513: PUSH
30514: LD_VAR 0 1
30518: ARRAY
30519: PUSH
30520: LD_VAR 0 2
30524: ARRAY
30525: PUSH
30526: LD_INT 2
30528: ARRAY
30529: PPUSH
30530: CALL_OW 428
30534: ST_TO_ADDR
// if not tmp then
30535: LD_VAR 0 4
30539: NOT
30540: IFFALSE 30544
// continue ;
30542: GO 30459
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
30544: LD_VAR 0 4
30548: PUSH
30549: LD_INT 81
30551: PUSH
30552: LD_VAR 0 3
30556: PUSH
30557: EMPTY
30558: LIST
30559: LIST
30560: PPUSH
30561: CALL_OW 69
30565: IN
30566: PUSH
30567: LD_EXP 90
30571: PUSH
30572: LD_VAR 0 1
30576: ARRAY
30577: PUSH
30578: LD_VAR 0 2
30582: ARRAY
30583: PUSH
30584: LD_INT 1
30586: ARRAY
30587: PPUSH
30588: LD_EXP 90
30592: PUSH
30593: LD_VAR 0 1
30597: ARRAY
30598: PUSH
30599: LD_VAR 0 2
30603: ARRAY
30604: PUSH
30605: LD_INT 2
30607: ARRAY
30608: PPUSH
30609: CALL_OW 458
30613: AND
30614: IFFALSE 30708
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
30616: LD_EXP 90
30620: PUSH
30621: LD_VAR 0 1
30625: ARRAY
30626: PUSH
30627: LD_VAR 0 2
30631: ARRAY
30632: PUSH
30633: LD_INT 1
30635: ARRAY
30636: PPUSH
30637: LD_EXP 90
30641: PUSH
30642: LD_VAR 0 1
30646: ARRAY
30647: PUSH
30648: LD_VAR 0 2
30652: ARRAY
30653: PUSH
30654: LD_INT 2
30656: ARRAY
30657: PPUSH
30658: LD_VAR 0 3
30662: PPUSH
30663: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
30667: LD_ADDR_EXP 90
30671: PUSH
30672: LD_EXP 90
30676: PPUSH
30677: LD_VAR 0 1
30681: PPUSH
30682: LD_EXP 90
30686: PUSH
30687: LD_VAR 0 1
30691: ARRAY
30692: PPUSH
30693: LD_VAR 0 2
30697: PPUSH
30698: CALL_OW 3
30702: PPUSH
30703: CALL_OW 1
30707: ST_TO_ADDR
// end ; end ;
30708: GO 30459
30710: POP
30711: POP
// end ;
30712: GO 30377
30714: POP
30715: POP
// end ;
30716: PPOPN 4
30718: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
30719: LD_INT 0
30721: PPUSH
30722: PPUSH
// result := false ;
30723: LD_ADDR_VAR 0 4
30727: PUSH
30728: LD_INT 0
30730: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
30731: LD_VAR 0 1
30735: PPUSH
30736: CALL_OW 264
30740: PUSH
30741: LD_INT 81
30743: EQUAL
30744: NOT
30745: IFFALSE 30749
// exit ;
30747: GO 30989
// index := GetElementIndex ( minersList , unit ) ;
30749: LD_ADDR_VAR 0 5
30753: PUSH
30754: LD_EXP 89
30758: PPUSH
30759: LD_VAR 0 1
30763: PPUSH
30764: CALL 37122 0 2
30768: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
30769: LD_EXP 90
30773: PUSH
30774: LD_VAR 0 5
30778: ARRAY
30779: PUSH
30780: LD_EXP 91
30784: GREATEREQUAL
30785: IFFALSE 30789
// exit ;
30787: GO 30989
// ComMoveXY ( unit , x , y ) ;
30789: LD_VAR 0 1
30793: PPUSH
30794: LD_VAR 0 2
30798: PPUSH
30799: LD_VAR 0 3
30803: PPUSH
30804: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
30808: LD_INT 35
30810: PPUSH
30811: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
30815: LD_VAR 0 1
30819: PPUSH
30820: LD_VAR 0 2
30824: PPUSH
30825: LD_VAR 0 3
30829: PPUSH
30830: CALL 68458 0 3
30834: NOT
30835: PUSH
30836: LD_VAR 0 1
30840: PPUSH
30841: CALL_OW 314
30845: AND
30846: IFFALSE 30850
// exit ;
30848: GO 30989
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
30850: LD_VAR 0 2
30854: PPUSH
30855: LD_VAR 0 3
30859: PPUSH
30860: CALL_OW 428
30864: PUSH
30865: LD_VAR 0 1
30869: EQUAL
30870: PUSH
30871: LD_VAR 0 1
30875: PPUSH
30876: CALL_OW 314
30880: NOT
30881: AND
30882: IFFALSE 30808
// PlaySoundXY ( x , y , PlantMine ) ;
30884: LD_VAR 0 2
30888: PPUSH
30889: LD_VAR 0 3
30893: PPUSH
30894: LD_STRING PlantMine
30896: PPUSH
30897: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
30901: LD_VAR 0 2
30905: PPUSH
30906: LD_VAR 0 3
30910: PPUSH
30911: LD_VAR 0 1
30915: PPUSH
30916: CALL_OW 255
30920: PPUSH
30921: LD_INT 0
30923: PPUSH
30924: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
30928: LD_ADDR_EXP 90
30932: PUSH
30933: LD_EXP 90
30937: PPUSH
30938: LD_VAR 0 5
30942: PUSH
30943: LD_EXP 90
30947: PUSH
30948: LD_VAR 0 5
30952: ARRAY
30953: PUSH
30954: LD_INT 1
30956: PLUS
30957: PUSH
30958: EMPTY
30959: LIST
30960: LIST
30961: PPUSH
30962: LD_VAR 0 2
30966: PUSH
30967: LD_VAR 0 3
30971: PUSH
30972: EMPTY
30973: LIST
30974: LIST
30975: PPUSH
30976: CALL 37337 0 3
30980: ST_TO_ADDR
// result := true ;
30981: LD_ADDR_VAR 0 4
30985: PUSH
30986: LD_INT 1
30988: ST_TO_ADDR
// end ;
30989: LD_VAR 0 4
30993: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
30994: LD_INT 0
30996: PPUSH
30997: PPUSH
30998: PPUSH
// if not unit in minersList then
30999: LD_VAR 0 1
31003: PUSH
31004: LD_EXP 89
31008: IN
31009: NOT
31010: IFFALSE 31014
// exit ;
31012: GO 31406
// index := GetElementIndex ( minersList , unit ) ;
31014: LD_ADDR_VAR 0 6
31018: PUSH
31019: LD_EXP 89
31023: PPUSH
31024: LD_VAR 0 1
31028: PPUSH
31029: CALL 37122 0 2
31033: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
31034: LD_ADDR_VAR 0 5
31038: PUSH
31039: DOUBLE
31040: LD_EXP 90
31044: PUSH
31045: LD_VAR 0 6
31049: ARRAY
31050: INC
31051: ST_TO_ADDR
31052: LD_INT 1
31054: PUSH
31055: FOR_DOWNTO
31056: IFFALSE 31217
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
31058: LD_EXP 90
31062: PUSH
31063: LD_VAR 0 6
31067: ARRAY
31068: PUSH
31069: LD_VAR 0 5
31073: ARRAY
31074: PUSH
31075: LD_INT 1
31077: ARRAY
31078: PUSH
31079: LD_VAR 0 2
31083: EQUAL
31084: PUSH
31085: LD_EXP 90
31089: PUSH
31090: LD_VAR 0 6
31094: ARRAY
31095: PUSH
31096: LD_VAR 0 5
31100: ARRAY
31101: PUSH
31102: LD_INT 2
31104: ARRAY
31105: PUSH
31106: LD_VAR 0 3
31110: EQUAL
31111: AND
31112: IFFALSE 31215
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
31114: LD_EXP 90
31118: PUSH
31119: LD_VAR 0 6
31123: ARRAY
31124: PUSH
31125: LD_VAR 0 5
31129: ARRAY
31130: PUSH
31131: LD_INT 1
31133: ARRAY
31134: PPUSH
31135: LD_EXP 90
31139: PUSH
31140: LD_VAR 0 6
31144: ARRAY
31145: PUSH
31146: LD_VAR 0 5
31150: ARRAY
31151: PUSH
31152: LD_INT 2
31154: ARRAY
31155: PPUSH
31156: LD_VAR 0 1
31160: PPUSH
31161: CALL_OW 255
31165: PPUSH
31166: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
31170: LD_ADDR_EXP 90
31174: PUSH
31175: LD_EXP 90
31179: PPUSH
31180: LD_VAR 0 6
31184: PPUSH
31185: LD_EXP 90
31189: PUSH
31190: LD_VAR 0 6
31194: ARRAY
31195: PPUSH
31196: LD_VAR 0 5
31200: PPUSH
31201: CALL_OW 3
31205: PPUSH
31206: CALL_OW 1
31210: ST_TO_ADDR
// exit ;
31211: POP
31212: POP
31213: GO 31406
// end ; end ;
31215: GO 31055
31217: POP
31218: POP
// for i := minerMinesList [ index ] downto 1 do
31219: LD_ADDR_VAR 0 5
31223: PUSH
31224: DOUBLE
31225: LD_EXP 90
31229: PUSH
31230: LD_VAR 0 6
31234: ARRAY
31235: INC
31236: ST_TO_ADDR
31237: LD_INT 1
31239: PUSH
31240: FOR_DOWNTO
31241: IFFALSE 31404
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
31243: LD_EXP 90
31247: PUSH
31248: LD_VAR 0 6
31252: ARRAY
31253: PUSH
31254: LD_VAR 0 5
31258: ARRAY
31259: PUSH
31260: LD_INT 1
31262: ARRAY
31263: PPUSH
31264: LD_EXP 90
31268: PUSH
31269: LD_VAR 0 6
31273: ARRAY
31274: PUSH
31275: LD_VAR 0 5
31279: ARRAY
31280: PUSH
31281: LD_INT 2
31283: ARRAY
31284: PPUSH
31285: LD_VAR 0 2
31289: PPUSH
31290: LD_VAR 0 3
31294: PPUSH
31295: CALL_OW 298
31299: PUSH
31300: LD_INT 6
31302: LESS
31303: IFFALSE 31402
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
31305: LD_EXP 90
31309: PUSH
31310: LD_VAR 0 6
31314: ARRAY
31315: PUSH
31316: LD_VAR 0 5
31320: ARRAY
31321: PUSH
31322: LD_INT 1
31324: ARRAY
31325: PPUSH
31326: LD_EXP 90
31330: PUSH
31331: LD_VAR 0 6
31335: ARRAY
31336: PUSH
31337: LD_VAR 0 5
31341: ARRAY
31342: PUSH
31343: LD_INT 2
31345: ARRAY
31346: PPUSH
31347: LD_VAR 0 1
31351: PPUSH
31352: CALL_OW 255
31356: PPUSH
31357: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
31361: LD_ADDR_EXP 90
31365: PUSH
31366: LD_EXP 90
31370: PPUSH
31371: LD_VAR 0 6
31375: PPUSH
31376: LD_EXP 90
31380: PUSH
31381: LD_VAR 0 6
31385: ARRAY
31386: PPUSH
31387: LD_VAR 0 5
31391: PPUSH
31392: CALL_OW 3
31396: PPUSH
31397: CALL_OW 1
31401: ST_TO_ADDR
// end ; end ;
31402: GO 31240
31404: POP
31405: POP
// end ;
31406: LD_VAR 0 4
31410: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
31411: LD_INT 0
31413: PPUSH
31414: PPUSH
31415: PPUSH
31416: PPUSH
31417: PPUSH
31418: PPUSH
31419: PPUSH
31420: PPUSH
31421: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
31422: LD_VAR 0 1
31426: PPUSH
31427: CALL_OW 264
31431: PUSH
31432: LD_INT 81
31434: EQUAL
31435: NOT
31436: PUSH
31437: LD_VAR 0 1
31441: PUSH
31442: LD_EXP 89
31446: IN
31447: NOT
31448: OR
31449: IFFALSE 31453
// exit ;
31451: GO 31775
// index := GetElementIndex ( minersList , unit ) ;
31453: LD_ADDR_VAR 0 6
31457: PUSH
31458: LD_EXP 89
31462: PPUSH
31463: LD_VAR 0 1
31467: PPUSH
31468: CALL 37122 0 2
31472: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
31473: LD_ADDR_VAR 0 8
31477: PUSH
31478: LD_EXP 91
31482: PUSH
31483: LD_EXP 90
31487: PUSH
31488: LD_VAR 0 6
31492: ARRAY
31493: MINUS
31494: ST_TO_ADDR
// if not minesFreeAmount then
31495: LD_VAR 0 8
31499: NOT
31500: IFFALSE 31504
// exit ;
31502: GO 31775
// tmp := [ ] ;
31504: LD_ADDR_VAR 0 7
31508: PUSH
31509: EMPTY
31510: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
31511: LD_ADDR_VAR 0 5
31515: PUSH
31516: DOUBLE
31517: LD_INT 1
31519: DEC
31520: ST_TO_ADDR
31521: LD_VAR 0 8
31525: PUSH
31526: FOR_TO
31527: IFFALSE 31722
// begin _d := rand ( 0 , 5 ) ;
31529: LD_ADDR_VAR 0 11
31533: PUSH
31534: LD_INT 0
31536: PPUSH
31537: LD_INT 5
31539: PPUSH
31540: CALL_OW 12
31544: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
31545: LD_ADDR_VAR 0 12
31549: PUSH
31550: LD_INT 2
31552: PPUSH
31553: LD_INT 6
31555: PPUSH
31556: CALL_OW 12
31560: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
31561: LD_ADDR_VAR 0 9
31565: PUSH
31566: LD_VAR 0 2
31570: PPUSH
31571: LD_VAR 0 11
31575: PPUSH
31576: LD_VAR 0 12
31580: PPUSH
31581: CALL_OW 272
31585: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
31586: LD_ADDR_VAR 0 10
31590: PUSH
31591: LD_VAR 0 3
31595: PPUSH
31596: LD_VAR 0 11
31600: PPUSH
31601: LD_VAR 0 12
31605: PPUSH
31606: CALL_OW 273
31610: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
31611: LD_VAR 0 9
31615: PPUSH
31616: LD_VAR 0 10
31620: PPUSH
31621: CALL_OW 488
31625: PUSH
31626: LD_VAR 0 9
31630: PUSH
31631: LD_VAR 0 10
31635: PUSH
31636: EMPTY
31637: LIST
31638: LIST
31639: PUSH
31640: LD_VAR 0 7
31644: IN
31645: NOT
31646: AND
31647: PUSH
31648: LD_VAR 0 9
31652: PPUSH
31653: LD_VAR 0 10
31657: PPUSH
31658: CALL_OW 458
31662: NOT
31663: AND
31664: IFFALSE 31706
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
31666: LD_ADDR_VAR 0 7
31670: PUSH
31671: LD_VAR 0 7
31675: PPUSH
31676: LD_VAR 0 7
31680: PUSH
31681: LD_INT 1
31683: PLUS
31684: PPUSH
31685: LD_VAR 0 9
31689: PUSH
31690: LD_VAR 0 10
31694: PUSH
31695: EMPTY
31696: LIST
31697: LIST
31698: PPUSH
31699: CALL_OW 1
31703: ST_TO_ADDR
31704: GO 31720
// i := i - 1 ;
31706: LD_ADDR_VAR 0 5
31710: PUSH
31711: LD_VAR 0 5
31715: PUSH
31716: LD_INT 1
31718: MINUS
31719: ST_TO_ADDR
// end ;
31720: GO 31526
31722: POP
31723: POP
// for i in tmp do
31724: LD_ADDR_VAR 0 5
31728: PUSH
31729: LD_VAR 0 7
31733: PUSH
31734: FOR_IN
31735: IFFALSE 31773
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
31737: LD_VAR 0 1
31741: PPUSH
31742: LD_VAR 0 5
31746: PUSH
31747: LD_INT 1
31749: ARRAY
31750: PPUSH
31751: LD_VAR 0 5
31755: PUSH
31756: LD_INT 2
31758: ARRAY
31759: PPUSH
31760: CALL 30719 0 3
31764: NOT
31765: IFFALSE 31771
// exit ;
31767: POP
31768: POP
31769: GO 31775
31771: GO 31734
31773: POP
31774: POP
// end ;
31775: LD_VAR 0 4
31779: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
31780: LD_INT 0
31782: PPUSH
31783: PPUSH
31784: PPUSH
31785: PPUSH
31786: PPUSH
31787: PPUSH
31788: PPUSH
// if not GetClass ( unit ) = class_sniper then
31789: LD_VAR 0 1
31793: PPUSH
31794: CALL_OW 257
31798: PUSH
31799: LD_INT 5
31801: EQUAL
31802: NOT
31803: IFFALSE 31807
// exit ;
31805: GO 32195
// dist := 8 ;
31807: LD_ADDR_VAR 0 5
31811: PUSH
31812: LD_INT 8
31814: ST_TO_ADDR
// viewRange := 12 ;
31815: LD_ADDR_VAR 0 7
31819: PUSH
31820: LD_INT 12
31822: ST_TO_ADDR
// side := GetSide ( unit ) ;
31823: LD_ADDR_VAR 0 6
31827: PUSH
31828: LD_VAR 0 1
31832: PPUSH
31833: CALL_OW 255
31837: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
31838: LD_INT 61
31840: PPUSH
31841: LD_VAR 0 6
31845: PPUSH
31846: CALL_OW 321
31850: PUSH
31851: LD_INT 2
31853: EQUAL
31854: IFFALSE 31864
// viewRange := 16 ;
31856: LD_ADDR_VAR 0 7
31860: PUSH
31861: LD_INT 16
31863: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
31864: LD_VAR 0 1
31868: PPUSH
31869: LD_VAR 0 2
31873: PPUSH
31874: LD_VAR 0 3
31878: PPUSH
31879: CALL_OW 297
31883: PUSH
31884: LD_VAR 0 5
31888: GREATER
31889: IFFALSE 31968
// begin ComMoveXY ( unit , x , y ) ;
31891: LD_VAR 0 1
31895: PPUSH
31896: LD_VAR 0 2
31900: PPUSH
31901: LD_VAR 0 3
31905: PPUSH
31906: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
31910: LD_INT 35
31912: PPUSH
31913: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
31917: LD_VAR 0 1
31921: PPUSH
31922: LD_VAR 0 2
31926: PPUSH
31927: LD_VAR 0 3
31931: PPUSH
31932: CALL 68458 0 3
31936: NOT
31937: IFFALSE 31941
// exit ;
31939: GO 32195
// until GetDistUnitXY ( unit , x , y ) < dist ;
31941: LD_VAR 0 1
31945: PPUSH
31946: LD_VAR 0 2
31950: PPUSH
31951: LD_VAR 0 3
31955: PPUSH
31956: CALL_OW 297
31960: PUSH
31961: LD_VAR 0 5
31965: LESS
31966: IFFALSE 31910
// end ; ComTurnXY ( unit , x , y ) ;
31968: LD_VAR 0 1
31972: PPUSH
31973: LD_VAR 0 2
31977: PPUSH
31978: LD_VAR 0 3
31982: PPUSH
31983: CALL_OW 118
// wait ( 5 ) ;
31987: LD_INT 5
31989: PPUSH
31990: CALL_OW 67
// _d := GetDir ( unit ) ;
31994: LD_ADDR_VAR 0 10
31998: PUSH
31999: LD_VAR 0 1
32003: PPUSH
32004: CALL_OW 254
32008: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
32009: LD_ADDR_VAR 0 8
32013: PUSH
32014: LD_VAR 0 1
32018: PPUSH
32019: CALL_OW 250
32023: PPUSH
32024: LD_VAR 0 10
32028: PPUSH
32029: LD_VAR 0 5
32033: PPUSH
32034: CALL_OW 272
32038: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
32039: LD_ADDR_VAR 0 9
32043: PUSH
32044: LD_VAR 0 1
32048: PPUSH
32049: CALL_OW 251
32053: PPUSH
32054: LD_VAR 0 10
32058: PPUSH
32059: LD_VAR 0 5
32063: PPUSH
32064: CALL_OW 273
32068: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32069: LD_VAR 0 8
32073: PPUSH
32074: LD_VAR 0 9
32078: PPUSH
32079: CALL_OW 488
32083: NOT
32084: IFFALSE 32088
// exit ;
32086: GO 32195
// ComAnimCustom ( unit , 1 ) ;
32088: LD_VAR 0 1
32092: PPUSH
32093: LD_INT 1
32095: PPUSH
32096: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
32100: LD_VAR 0 8
32104: PPUSH
32105: LD_VAR 0 9
32109: PPUSH
32110: LD_VAR 0 6
32114: PPUSH
32115: LD_VAR 0 7
32119: PPUSH
32120: CALL_OW 330
// repeat wait ( 1 ) ;
32124: LD_INT 1
32126: PPUSH
32127: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
32131: LD_VAR 0 1
32135: PPUSH
32136: CALL_OW 316
32140: PUSH
32141: LD_VAR 0 1
32145: PPUSH
32146: CALL_OW 314
32150: OR
32151: PUSH
32152: LD_VAR 0 1
32156: PPUSH
32157: CALL_OW 302
32161: NOT
32162: OR
32163: PUSH
32164: LD_VAR 0 1
32168: PPUSH
32169: CALL_OW 301
32173: OR
32174: IFFALSE 32124
// RemoveSeeing ( _x , _y , side ) ;
32176: LD_VAR 0 8
32180: PPUSH
32181: LD_VAR 0 9
32185: PPUSH
32186: LD_VAR 0 6
32190: PPUSH
32191: CALL_OW 331
// end ; end_of_file
32195: LD_VAR 0 4
32199: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
32200: LD_INT 0
32202: PPUSH
32203: PPUSH
// if exist_mode then
32204: LD_VAR 0 2
32208: IFFALSE 32233
// unit := CreateCharacter ( prefix & ident ) else
32210: LD_ADDR_VAR 0 5
32214: PUSH
32215: LD_VAR 0 3
32219: PUSH
32220: LD_VAR 0 1
32224: STR
32225: PPUSH
32226: CALL_OW 34
32230: ST_TO_ADDR
32231: GO 32248
// unit := NewCharacter ( ident ) ;
32233: LD_ADDR_VAR 0 5
32237: PUSH
32238: LD_VAR 0 1
32242: PPUSH
32243: CALL_OW 25
32247: ST_TO_ADDR
// result := unit ;
32248: LD_ADDR_VAR 0 4
32252: PUSH
32253: LD_VAR 0 5
32257: ST_TO_ADDR
// end ;
32258: LD_VAR 0 4
32262: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
32263: LD_INT 0
32265: PPUSH
32266: PPUSH
// if not side or not nation then
32267: LD_VAR 0 1
32271: NOT
32272: PUSH
32273: LD_VAR 0 2
32277: NOT
32278: OR
32279: IFFALSE 32283
// exit ;
32281: GO 33051
// case nation of nation_american :
32283: LD_VAR 0 2
32287: PUSH
32288: LD_INT 1
32290: DOUBLE
32291: EQUAL
32292: IFTRUE 32296
32294: GO 32510
32296: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
32297: LD_ADDR_VAR 0 4
32301: PUSH
32302: LD_INT 35
32304: PUSH
32305: LD_INT 45
32307: PUSH
32308: LD_INT 46
32310: PUSH
32311: LD_INT 47
32313: PUSH
32314: LD_INT 82
32316: PUSH
32317: LD_INT 83
32319: PUSH
32320: LD_INT 84
32322: PUSH
32323: LD_INT 85
32325: PUSH
32326: LD_INT 86
32328: PUSH
32329: LD_INT 1
32331: PUSH
32332: LD_INT 2
32334: PUSH
32335: LD_INT 6
32337: PUSH
32338: LD_INT 15
32340: PUSH
32341: LD_INT 16
32343: PUSH
32344: LD_INT 7
32346: PUSH
32347: LD_INT 12
32349: PUSH
32350: LD_INT 13
32352: PUSH
32353: LD_INT 10
32355: PUSH
32356: LD_INT 14
32358: PUSH
32359: LD_INT 20
32361: PUSH
32362: LD_INT 21
32364: PUSH
32365: LD_INT 22
32367: PUSH
32368: LD_INT 25
32370: PUSH
32371: LD_INT 32
32373: PUSH
32374: LD_INT 27
32376: PUSH
32377: LD_INT 36
32379: PUSH
32380: LD_INT 69
32382: PUSH
32383: LD_INT 39
32385: PUSH
32386: LD_INT 34
32388: PUSH
32389: LD_INT 40
32391: PUSH
32392: LD_INT 48
32394: PUSH
32395: LD_INT 49
32397: PUSH
32398: LD_INT 50
32400: PUSH
32401: LD_INT 51
32403: PUSH
32404: LD_INT 52
32406: PUSH
32407: LD_INT 53
32409: PUSH
32410: LD_INT 54
32412: PUSH
32413: LD_INT 55
32415: PUSH
32416: LD_INT 56
32418: PUSH
32419: LD_INT 57
32421: PUSH
32422: LD_INT 58
32424: PUSH
32425: LD_INT 59
32427: PUSH
32428: LD_INT 60
32430: PUSH
32431: LD_INT 61
32433: PUSH
32434: LD_INT 62
32436: PUSH
32437: LD_INT 80
32439: PUSH
32440: LD_INT 82
32442: PUSH
32443: LD_INT 83
32445: PUSH
32446: LD_INT 84
32448: PUSH
32449: LD_INT 85
32451: PUSH
32452: LD_INT 86
32454: PUSH
32455: EMPTY
32456: LIST
32457: LIST
32458: LIST
32459: LIST
32460: LIST
32461: LIST
32462: LIST
32463: LIST
32464: LIST
32465: LIST
32466: LIST
32467: LIST
32468: LIST
32469: LIST
32470: LIST
32471: LIST
32472: LIST
32473: LIST
32474: LIST
32475: LIST
32476: LIST
32477: LIST
32478: LIST
32479: LIST
32480: LIST
32481: LIST
32482: LIST
32483: LIST
32484: LIST
32485: LIST
32486: LIST
32487: LIST
32488: LIST
32489: LIST
32490: LIST
32491: LIST
32492: LIST
32493: LIST
32494: LIST
32495: LIST
32496: LIST
32497: LIST
32498: LIST
32499: LIST
32500: LIST
32501: LIST
32502: LIST
32503: LIST
32504: LIST
32505: LIST
32506: LIST
32507: ST_TO_ADDR
32508: GO 32975
32510: LD_INT 2
32512: DOUBLE
32513: EQUAL
32514: IFTRUE 32518
32516: GO 32744
32518: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
32519: LD_ADDR_VAR 0 4
32523: PUSH
32524: LD_INT 35
32526: PUSH
32527: LD_INT 45
32529: PUSH
32530: LD_INT 46
32532: PUSH
32533: LD_INT 47
32535: PUSH
32536: LD_INT 82
32538: PUSH
32539: LD_INT 83
32541: PUSH
32542: LD_INT 84
32544: PUSH
32545: LD_INT 85
32547: PUSH
32548: LD_INT 87
32550: PUSH
32551: LD_INT 70
32553: PUSH
32554: LD_INT 1
32556: PUSH
32557: LD_INT 11
32559: PUSH
32560: LD_INT 3
32562: PUSH
32563: LD_INT 4
32565: PUSH
32566: LD_INT 5
32568: PUSH
32569: LD_INT 6
32571: PUSH
32572: LD_INT 15
32574: PUSH
32575: LD_INT 18
32577: PUSH
32578: LD_INT 7
32580: PUSH
32581: LD_INT 17
32583: PUSH
32584: LD_INT 8
32586: PUSH
32587: LD_INT 20
32589: PUSH
32590: LD_INT 21
32592: PUSH
32593: LD_INT 22
32595: PUSH
32596: LD_INT 72
32598: PUSH
32599: LD_INT 26
32601: PUSH
32602: LD_INT 69
32604: PUSH
32605: LD_INT 39
32607: PUSH
32608: LD_INT 40
32610: PUSH
32611: LD_INT 41
32613: PUSH
32614: LD_INT 42
32616: PUSH
32617: LD_INT 43
32619: PUSH
32620: LD_INT 48
32622: PUSH
32623: LD_INT 49
32625: PUSH
32626: LD_INT 50
32628: PUSH
32629: LD_INT 51
32631: PUSH
32632: LD_INT 52
32634: PUSH
32635: LD_INT 53
32637: PUSH
32638: LD_INT 54
32640: PUSH
32641: LD_INT 55
32643: PUSH
32644: LD_INT 56
32646: PUSH
32647: LD_INT 60
32649: PUSH
32650: LD_INT 61
32652: PUSH
32653: LD_INT 62
32655: PUSH
32656: LD_INT 66
32658: PUSH
32659: LD_INT 67
32661: PUSH
32662: LD_INT 68
32664: PUSH
32665: LD_INT 81
32667: PUSH
32668: LD_INT 82
32670: PUSH
32671: LD_INT 83
32673: PUSH
32674: LD_INT 84
32676: PUSH
32677: LD_INT 85
32679: PUSH
32680: LD_INT 87
32682: PUSH
32683: LD_INT 88
32685: PUSH
32686: EMPTY
32687: LIST
32688: LIST
32689: LIST
32690: LIST
32691: LIST
32692: LIST
32693: LIST
32694: LIST
32695: LIST
32696: LIST
32697: LIST
32698: LIST
32699: LIST
32700: LIST
32701: LIST
32702: LIST
32703: LIST
32704: LIST
32705: LIST
32706: LIST
32707: LIST
32708: LIST
32709: LIST
32710: LIST
32711: LIST
32712: LIST
32713: LIST
32714: LIST
32715: LIST
32716: LIST
32717: LIST
32718: LIST
32719: LIST
32720: LIST
32721: LIST
32722: LIST
32723: LIST
32724: LIST
32725: LIST
32726: LIST
32727: LIST
32728: LIST
32729: LIST
32730: LIST
32731: LIST
32732: LIST
32733: LIST
32734: LIST
32735: LIST
32736: LIST
32737: LIST
32738: LIST
32739: LIST
32740: LIST
32741: ST_TO_ADDR
32742: GO 32975
32744: LD_INT 3
32746: DOUBLE
32747: EQUAL
32748: IFTRUE 32752
32750: GO 32974
32752: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
32753: LD_ADDR_VAR 0 4
32757: PUSH
32758: LD_INT 46
32760: PUSH
32761: LD_INT 47
32763: PUSH
32764: LD_INT 1
32766: PUSH
32767: LD_INT 2
32769: PUSH
32770: LD_INT 82
32772: PUSH
32773: LD_INT 83
32775: PUSH
32776: LD_INT 84
32778: PUSH
32779: LD_INT 85
32781: PUSH
32782: LD_INT 86
32784: PUSH
32785: LD_INT 11
32787: PUSH
32788: LD_INT 9
32790: PUSH
32791: LD_INT 20
32793: PUSH
32794: LD_INT 19
32796: PUSH
32797: LD_INT 21
32799: PUSH
32800: LD_INT 24
32802: PUSH
32803: LD_INT 22
32805: PUSH
32806: LD_INT 25
32808: PUSH
32809: LD_INT 28
32811: PUSH
32812: LD_INT 29
32814: PUSH
32815: LD_INT 30
32817: PUSH
32818: LD_INT 31
32820: PUSH
32821: LD_INT 37
32823: PUSH
32824: LD_INT 38
32826: PUSH
32827: LD_INT 32
32829: PUSH
32830: LD_INT 27
32832: PUSH
32833: LD_INT 33
32835: PUSH
32836: LD_INT 69
32838: PUSH
32839: LD_INT 39
32841: PUSH
32842: LD_INT 34
32844: PUSH
32845: LD_INT 40
32847: PUSH
32848: LD_INT 71
32850: PUSH
32851: LD_INT 23
32853: PUSH
32854: LD_INT 44
32856: PUSH
32857: LD_INT 48
32859: PUSH
32860: LD_INT 49
32862: PUSH
32863: LD_INT 50
32865: PUSH
32866: LD_INT 51
32868: PUSH
32869: LD_INT 52
32871: PUSH
32872: LD_INT 53
32874: PUSH
32875: LD_INT 54
32877: PUSH
32878: LD_INT 55
32880: PUSH
32881: LD_INT 56
32883: PUSH
32884: LD_INT 57
32886: PUSH
32887: LD_INT 58
32889: PUSH
32890: LD_INT 59
32892: PUSH
32893: LD_INT 63
32895: PUSH
32896: LD_INT 64
32898: PUSH
32899: LD_INT 65
32901: PUSH
32902: LD_INT 82
32904: PUSH
32905: LD_INT 83
32907: PUSH
32908: LD_INT 84
32910: PUSH
32911: LD_INT 85
32913: PUSH
32914: LD_INT 86
32916: PUSH
32917: EMPTY
32918: LIST
32919: LIST
32920: LIST
32921: LIST
32922: LIST
32923: LIST
32924: LIST
32925: LIST
32926: LIST
32927: LIST
32928: LIST
32929: LIST
32930: LIST
32931: LIST
32932: LIST
32933: LIST
32934: LIST
32935: LIST
32936: LIST
32937: LIST
32938: LIST
32939: LIST
32940: LIST
32941: LIST
32942: LIST
32943: LIST
32944: LIST
32945: LIST
32946: LIST
32947: LIST
32948: LIST
32949: LIST
32950: LIST
32951: LIST
32952: LIST
32953: LIST
32954: LIST
32955: LIST
32956: LIST
32957: LIST
32958: LIST
32959: LIST
32960: LIST
32961: LIST
32962: LIST
32963: LIST
32964: LIST
32965: LIST
32966: LIST
32967: LIST
32968: LIST
32969: LIST
32970: LIST
32971: ST_TO_ADDR
32972: GO 32975
32974: POP
// if state > - 1 and state < 3 then
32975: LD_VAR 0 3
32979: PUSH
32980: LD_INT 1
32982: NEG
32983: GREATER
32984: PUSH
32985: LD_VAR 0 3
32989: PUSH
32990: LD_INT 3
32992: LESS
32993: AND
32994: IFFALSE 33051
// for i in result do
32996: LD_ADDR_VAR 0 5
33000: PUSH
33001: LD_VAR 0 4
33005: PUSH
33006: FOR_IN
33007: IFFALSE 33049
// if GetTech ( i , side ) <> state then
33009: LD_VAR 0 5
33013: PPUSH
33014: LD_VAR 0 1
33018: PPUSH
33019: CALL_OW 321
33023: PUSH
33024: LD_VAR 0 3
33028: NONEQUAL
33029: IFFALSE 33047
// result := result diff i ;
33031: LD_ADDR_VAR 0 4
33035: PUSH
33036: LD_VAR 0 4
33040: PUSH
33041: LD_VAR 0 5
33045: DIFF
33046: ST_TO_ADDR
33047: GO 33006
33049: POP
33050: POP
// end ;
33051: LD_VAR 0 4
33055: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
33056: LD_INT 0
33058: PPUSH
33059: PPUSH
33060: PPUSH
// result := true ;
33061: LD_ADDR_VAR 0 3
33065: PUSH
33066: LD_INT 1
33068: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
33069: LD_ADDR_VAR 0 5
33073: PUSH
33074: LD_VAR 0 2
33078: PPUSH
33079: CALL_OW 480
33083: ST_TO_ADDR
// if not tmp then
33084: LD_VAR 0 5
33088: NOT
33089: IFFALSE 33093
// exit ;
33091: GO 33142
// for i in tmp do
33093: LD_ADDR_VAR 0 4
33097: PUSH
33098: LD_VAR 0 5
33102: PUSH
33103: FOR_IN
33104: IFFALSE 33140
// if GetTech ( i , side ) <> state_researched then
33106: LD_VAR 0 4
33110: PPUSH
33111: LD_VAR 0 1
33115: PPUSH
33116: CALL_OW 321
33120: PUSH
33121: LD_INT 2
33123: NONEQUAL
33124: IFFALSE 33138
// begin result := false ;
33126: LD_ADDR_VAR 0 3
33130: PUSH
33131: LD_INT 0
33133: ST_TO_ADDR
// exit ;
33134: POP
33135: POP
33136: GO 33142
// end ;
33138: GO 33103
33140: POP
33141: POP
// end ;
33142: LD_VAR 0 3
33146: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
33147: LD_INT 0
33149: PPUSH
33150: PPUSH
33151: PPUSH
33152: PPUSH
33153: PPUSH
33154: PPUSH
33155: PPUSH
33156: PPUSH
33157: PPUSH
33158: PPUSH
33159: PPUSH
33160: PPUSH
33161: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
33162: LD_VAR 0 1
33166: NOT
33167: PUSH
33168: LD_VAR 0 1
33172: PPUSH
33173: CALL_OW 257
33177: PUSH
33178: LD_INT 9
33180: NONEQUAL
33181: OR
33182: IFFALSE 33186
// exit ;
33184: GO 33759
// side := GetSide ( unit ) ;
33186: LD_ADDR_VAR 0 9
33190: PUSH
33191: LD_VAR 0 1
33195: PPUSH
33196: CALL_OW 255
33200: ST_TO_ADDR
// tech_space := tech_spacanom ;
33201: LD_ADDR_VAR 0 12
33205: PUSH
33206: LD_INT 29
33208: ST_TO_ADDR
// tech_time := tech_taurad ;
33209: LD_ADDR_VAR 0 13
33213: PUSH
33214: LD_INT 28
33216: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
33217: LD_ADDR_VAR 0 11
33221: PUSH
33222: LD_VAR 0 1
33226: PPUSH
33227: CALL_OW 310
33231: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
33232: LD_VAR 0 11
33236: PPUSH
33237: CALL_OW 247
33241: PUSH
33242: LD_INT 2
33244: EQUAL
33245: IFFALSE 33249
// exit ;
33247: GO 33759
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33249: LD_ADDR_VAR 0 8
33253: PUSH
33254: LD_INT 81
33256: PUSH
33257: LD_VAR 0 9
33261: PUSH
33262: EMPTY
33263: LIST
33264: LIST
33265: PUSH
33266: LD_INT 3
33268: PUSH
33269: LD_INT 21
33271: PUSH
33272: LD_INT 3
33274: PUSH
33275: EMPTY
33276: LIST
33277: LIST
33278: PUSH
33279: EMPTY
33280: LIST
33281: LIST
33282: PUSH
33283: EMPTY
33284: LIST
33285: LIST
33286: PPUSH
33287: CALL_OW 69
33291: ST_TO_ADDR
// if not tmp then
33292: LD_VAR 0 8
33296: NOT
33297: IFFALSE 33301
// exit ;
33299: GO 33759
// if in_unit then
33301: LD_VAR 0 11
33305: IFFALSE 33329
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
33307: LD_ADDR_VAR 0 10
33311: PUSH
33312: LD_VAR 0 8
33316: PPUSH
33317: LD_VAR 0 11
33321: PPUSH
33322: CALL_OW 74
33326: ST_TO_ADDR
33327: GO 33349
// enemy := NearestUnitToUnit ( tmp , unit ) ;
33329: LD_ADDR_VAR 0 10
33333: PUSH
33334: LD_VAR 0 8
33338: PPUSH
33339: LD_VAR 0 1
33343: PPUSH
33344: CALL_OW 74
33348: ST_TO_ADDR
// if not enemy then
33349: LD_VAR 0 10
33353: NOT
33354: IFFALSE 33358
// exit ;
33356: GO 33759
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
33358: LD_VAR 0 11
33362: PUSH
33363: LD_VAR 0 11
33367: PPUSH
33368: LD_VAR 0 10
33372: PPUSH
33373: CALL_OW 296
33377: PUSH
33378: LD_INT 13
33380: GREATER
33381: AND
33382: PUSH
33383: LD_VAR 0 1
33387: PPUSH
33388: LD_VAR 0 10
33392: PPUSH
33393: CALL_OW 296
33397: PUSH
33398: LD_INT 12
33400: GREATER
33401: OR
33402: IFFALSE 33406
// exit ;
33404: GO 33759
// missile := [ 1 ] ;
33406: LD_ADDR_VAR 0 14
33410: PUSH
33411: LD_INT 1
33413: PUSH
33414: EMPTY
33415: LIST
33416: ST_TO_ADDR
// if Researched ( side , tech_space ) then
33417: LD_VAR 0 9
33421: PPUSH
33422: LD_VAR 0 12
33426: PPUSH
33427: CALL_OW 325
33431: IFFALSE 33460
// missile := Replace ( missile , missile + 1 , 2 ) ;
33433: LD_ADDR_VAR 0 14
33437: PUSH
33438: LD_VAR 0 14
33442: PPUSH
33443: LD_VAR 0 14
33447: PUSH
33448: LD_INT 1
33450: PLUS
33451: PPUSH
33452: LD_INT 2
33454: PPUSH
33455: CALL_OW 1
33459: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
33460: LD_VAR 0 9
33464: PPUSH
33465: LD_VAR 0 13
33469: PPUSH
33470: CALL_OW 325
33474: PUSH
33475: LD_VAR 0 10
33479: PPUSH
33480: CALL_OW 255
33484: PPUSH
33485: LD_VAR 0 13
33489: PPUSH
33490: CALL_OW 325
33494: NOT
33495: AND
33496: IFFALSE 33525
// missile := Replace ( missile , missile + 1 , 3 ) ;
33498: LD_ADDR_VAR 0 14
33502: PUSH
33503: LD_VAR 0 14
33507: PPUSH
33508: LD_VAR 0 14
33512: PUSH
33513: LD_INT 1
33515: PLUS
33516: PPUSH
33517: LD_INT 3
33519: PPUSH
33520: CALL_OW 1
33524: ST_TO_ADDR
// if missile < 2 then
33525: LD_VAR 0 14
33529: PUSH
33530: LD_INT 2
33532: LESS
33533: IFFALSE 33537
// exit ;
33535: GO 33759
// x := GetX ( enemy ) ;
33537: LD_ADDR_VAR 0 4
33541: PUSH
33542: LD_VAR 0 10
33546: PPUSH
33547: CALL_OW 250
33551: ST_TO_ADDR
// y := GetY ( enemy ) ;
33552: LD_ADDR_VAR 0 5
33556: PUSH
33557: LD_VAR 0 10
33561: PPUSH
33562: CALL_OW 251
33566: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
33567: LD_ADDR_VAR 0 6
33571: PUSH
33572: LD_VAR 0 4
33576: PUSH
33577: LD_INT 1
33579: NEG
33580: PPUSH
33581: LD_INT 1
33583: PPUSH
33584: CALL_OW 12
33588: PLUS
33589: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
33590: LD_ADDR_VAR 0 7
33594: PUSH
33595: LD_VAR 0 5
33599: PUSH
33600: LD_INT 1
33602: NEG
33603: PPUSH
33604: LD_INT 1
33606: PPUSH
33607: CALL_OW 12
33611: PLUS
33612: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
33613: LD_VAR 0 6
33617: PPUSH
33618: LD_VAR 0 7
33622: PPUSH
33623: CALL_OW 488
33627: NOT
33628: IFFALSE 33650
// begin _x := x ;
33630: LD_ADDR_VAR 0 6
33634: PUSH
33635: LD_VAR 0 4
33639: ST_TO_ADDR
// _y := y ;
33640: LD_ADDR_VAR 0 7
33644: PUSH
33645: LD_VAR 0 5
33649: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
33650: LD_ADDR_VAR 0 3
33654: PUSH
33655: LD_INT 1
33657: PPUSH
33658: LD_VAR 0 14
33662: PPUSH
33663: CALL_OW 12
33667: ST_TO_ADDR
// case i of 1 :
33668: LD_VAR 0 3
33672: PUSH
33673: LD_INT 1
33675: DOUBLE
33676: EQUAL
33677: IFTRUE 33681
33679: GO 33698
33681: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
33682: LD_VAR 0 1
33686: PPUSH
33687: LD_VAR 0 10
33691: PPUSH
33692: CALL_OW 115
33696: GO 33759
33698: LD_INT 2
33700: DOUBLE
33701: EQUAL
33702: IFTRUE 33706
33704: GO 33728
33706: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
33707: LD_VAR 0 1
33711: PPUSH
33712: LD_VAR 0 6
33716: PPUSH
33717: LD_VAR 0 7
33721: PPUSH
33722: CALL_OW 153
33726: GO 33759
33728: LD_INT 3
33730: DOUBLE
33731: EQUAL
33732: IFTRUE 33736
33734: GO 33758
33736: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
33737: LD_VAR 0 1
33741: PPUSH
33742: LD_VAR 0 6
33746: PPUSH
33747: LD_VAR 0 7
33751: PPUSH
33752: CALL_OW 154
33756: GO 33759
33758: POP
// end ;
33759: LD_VAR 0 2
33763: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
33764: LD_INT 0
33766: PPUSH
33767: PPUSH
33768: PPUSH
33769: PPUSH
33770: PPUSH
33771: PPUSH
// if not unit or not building then
33772: LD_VAR 0 1
33776: NOT
33777: PUSH
33778: LD_VAR 0 2
33782: NOT
33783: OR
33784: IFFALSE 33788
// exit ;
33786: GO 33946
// x := GetX ( building ) ;
33788: LD_ADDR_VAR 0 5
33792: PUSH
33793: LD_VAR 0 2
33797: PPUSH
33798: CALL_OW 250
33802: ST_TO_ADDR
// y := GetY ( building ) ;
33803: LD_ADDR_VAR 0 6
33807: PUSH
33808: LD_VAR 0 2
33812: PPUSH
33813: CALL_OW 251
33817: ST_TO_ADDR
// for i = 0 to 5 do
33818: LD_ADDR_VAR 0 4
33822: PUSH
33823: DOUBLE
33824: LD_INT 0
33826: DEC
33827: ST_TO_ADDR
33828: LD_INT 5
33830: PUSH
33831: FOR_TO
33832: IFFALSE 33944
// begin _x := ShiftX ( x , i , 3 ) ;
33834: LD_ADDR_VAR 0 7
33838: PUSH
33839: LD_VAR 0 5
33843: PPUSH
33844: LD_VAR 0 4
33848: PPUSH
33849: LD_INT 3
33851: PPUSH
33852: CALL_OW 272
33856: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
33857: LD_ADDR_VAR 0 8
33861: PUSH
33862: LD_VAR 0 6
33866: PPUSH
33867: LD_VAR 0 4
33871: PPUSH
33872: LD_INT 3
33874: PPUSH
33875: CALL_OW 273
33879: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
33880: LD_VAR 0 7
33884: PPUSH
33885: LD_VAR 0 8
33889: PPUSH
33890: CALL_OW 488
33894: NOT
33895: IFFALSE 33899
// continue ;
33897: GO 33831
// if HexInfo ( _x , _y ) = 0 then
33899: LD_VAR 0 7
33903: PPUSH
33904: LD_VAR 0 8
33908: PPUSH
33909: CALL_OW 428
33913: PUSH
33914: LD_INT 0
33916: EQUAL
33917: IFFALSE 33942
// begin ComMoveXY ( unit , _x , _y ) ;
33919: LD_VAR 0 1
33923: PPUSH
33924: LD_VAR 0 7
33928: PPUSH
33929: LD_VAR 0 8
33933: PPUSH
33934: CALL_OW 111
// exit ;
33938: POP
33939: POP
33940: GO 33946
// end ; end ;
33942: GO 33831
33944: POP
33945: POP
// end ;
33946: LD_VAR 0 3
33950: RET
// export function ScanBase ( side , base_area ) ; begin
33951: LD_INT 0
33953: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
33954: LD_ADDR_VAR 0 3
33958: PUSH
33959: LD_VAR 0 2
33963: PPUSH
33964: LD_INT 81
33966: PUSH
33967: LD_VAR 0 1
33971: PUSH
33972: EMPTY
33973: LIST
33974: LIST
33975: PPUSH
33976: CALL_OW 70
33980: ST_TO_ADDR
// end ;
33981: LD_VAR 0 3
33985: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
33986: LD_INT 0
33988: PPUSH
33989: PPUSH
33990: PPUSH
33991: PPUSH
// result := false ;
33992: LD_ADDR_VAR 0 2
33996: PUSH
33997: LD_INT 0
33999: ST_TO_ADDR
// side := GetSide ( unit ) ;
34000: LD_ADDR_VAR 0 3
34004: PUSH
34005: LD_VAR 0 1
34009: PPUSH
34010: CALL_OW 255
34014: ST_TO_ADDR
// nat := GetNation ( unit ) ;
34015: LD_ADDR_VAR 0 4
34019: PUSH
34020: LD_VAR 0 1
34024: PPUSH
34025: CALL_OW 248
34029: ST_TO_ADDR
// case nat of 1 :
34030: LD_VAR 0 4
34034: PUSH
34035: LD_INT 1
34037: DOUBLE
34038: EQUAL
34039: IFTRUE 34043
34041: GO 34054
34043: POP
// tech := tech_lassight ; 2 :
34044: LD_ADDR_VAR 0 5
34048: PUSH
34049: LD_INT 12
34051: ST_TO_ADDR
34052: GO 34093
34054: LD_INT 2
34056: DOUBLE
34057: EQUAL
34058: IFTRUE 34062
34060: GO 34073
34062: POP
// tech := tech_mortar ; 3 :
34063: LD_ADDR_VAR 0 5
34067: PUSH
34068: LD_INT 41
34070: ST_TO_ADDR
34071: GO 34093
34073: LD_INT 3
34075: DOUBLE
34076: EQUAL
34077: IFTRUE 34081
34079: GO 34092
34081: POP
// tech := tech_bazooka ; end ;
34082: LD_ADDR_VAR 0 5
34086: PUSH
34087: LD_INT 44
34089: ST_TO_ADDR
34090: GO 34093
34092: POP
// if Researched ( side , tech ) then
34093: LD_VAR 0 3
34097: PPUSH
34098: LD_VAR 0 5
34102: PPUSH
34103: CALL_OW 325
34107: IFFALSE 34134
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
34109: LD_ADDR_VAR 0 2
34113: PUSH
34114: LD_INT 5
34116: PUSH
34117: LD_INT 8
34119: PUSH
34120: LD_INT 9
34122: PUSH
34123: EMPTY
34124: LIST
34125: LIST
34126: LIST
34127: PUSH
34128: LD_VAR 0 4
34132: ARRAY
34133: ST_TO_ADDR
// end ;
34134: LD_VAR 0 2
34138: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
34139: LD_INT 0
34141: PPUSH
34142: PPUSH
34143: PPUSH
// if not mines then
34144: LD_VAR 0 2
34148: NOT
34149: IFFALSE 34153
// exit ;
34151: GO 34297
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34153: LD_ADDR_VAR 0 5
34157: PUSH
34158: LD_INT 81
34160: PUSH
34161: LD_VAR 0 1
34165: PUSH
34166: EMPTY
34167: LIST
34168: LIST
34169: PUSH
34170: LD_INT 3
34172: PUSH
34173: LD_INT 21
34175: PUSH
34176: LD_INT 3
34178: PUSH
34179: EMPTY
34180: LIST
34181: LIST
34182: PUSH
34183: EMPTY
34184: LIST
34185: LIST
34186: PUSH
34187: EMPTY
34188: LIST
34189: LIST
34190: PPUSH
34191: CALL_OW 69
34195: ST_TO_ADDR
// for i in mines do
34196: LD_ADDR_VAR 0 4
34200: PUSH
34201: LD_VAR 0 2
34205: PUSH
34206: FOR_IN
34207: IFFALSE 34295
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
34209: LD_VAR 0 4
34213: PUSH
34214: LD_INT 1
34216: ARRAY
34217: PPUSH
34218: LD_VAR 0 4
34222: PUSH
34223: LD_INT 2
34225: ARRAY
34226: PPUSH
34227: CALL_OW 458
34231: NOT
34232: IFFALSE 34236
// continue ;
34234: GO 34206
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
34236: LD_VAR 0 4
34240: PUSH
34241: LD_INT 1
34243: ARRAY
34244: PPUSH
34245: LD_VAR 0 4
34249: PUSH
34250: LD_INT 2
34252: ARRAY
34253: PPUSH
34254: CALL_OW 428
34258: PUSH
34259: LD_VAR 0 5
34263: IN
34264: IFFALSE 34293
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
34266: LD_VAR 0 4
34270: PUSH
34271: LD_INT 1
34273: ARRAY
34274: PPUSH
34275: LD_VAR 0 4
34279: PUSH
34280: LD_INT 2
34282: ARRAY
34283: PPUSH
34284: LD_VAR 0 1
34288: PPUSH
34289: CALL_OW 456
// end ;
34293: GO 34206
34295: POP
34296: POP
// end ;
34297: LD_VAR 0 3
34301: RET
// export function Count ( array ) ; var i ; begin
34302: LD_INT 0
34304: PPUSH
34305: PPUSH
// result := 0 ;
34306: LD_ADDR_VAR 0 2
34310: PUSH
34311: LD_INT 0
34313: ST_TO_ADDR
// for i in array do
34314: LD_ADDR_VAR 0 3
34318: PUSH
34319: LD_VAR 0 1
34323: PUSH
34324: FOR_IN
34325: IFFALSE 34349
// if i then
34327: LD_VAR 0 3
34331: IFFALSE 34347
// result := result + 1 ;
34333: LD_ADDR_VAR 0 2
34337: PUSH
34338: LD_VAR 0 2
34342: PUSH
34343: LD_INT 1
34345: PLUS
34346: ST_TO_ADDR
34347: GO 34324
34349: POP
34350: POP
// end ;
34351: LD_VAR 0 2
34355: RET
// export function IsEmpty ( building ) ; begin
34356: LD_INT 0
34358: PPUSH
// if not building then
34359: LD_VAR 0 1
34363: NOT
34364: IFFALSE 34368
// exit ;
34366: GO 34411
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
34368: LD_ADDR_VAR 0 2
34372: PUSH
34373: LD_VAR 0 1
34377: PUSH
34378: LD_INT 22
34380: PUSH
34381: LD_VAR 0 1
34385: PPUSH
34386: CALL_OW 255
34390: PUSH
34391: EMPTY
34392: LIST
34393: LIST
34394: PUSH
34395: LD_INT 58
34397: PUSH
34398: EMPTY
34399: LIST
34400: PUSH
34401: EMPTY
34402: LIST
34403: LIST
34404: PPUSH
34405: CALL_OW 69
34409: IN
34410: ST_TO_ADDR
// end ;
34411: LD_VAR 0 2
34415: RET
// export function IsNotFull ( building ) ; var places ; begin
34416: LD_INT 0
34418: PPUSH
34419: PPUSH
// if not building then
34420: LD_VAR 0 1
34424: NOT
34425: IFFALSE 34429
// exit ;
34427: GO 34600
// result := false ;
34429: LD_ADDR_VAR 0 2
34433: PUSH
34434: LD_INT 0
34436: ST_TO_ADDR
// places := 0 ;
34437: LD_ADDR_VAR 0 3
34441: PUSH
34442: LD_INT 0
34444: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
34445: LD_VAR 0 1
34449: PPUSH
34450: CALL_OW 266
34454: PUSH
34455: LD_INT 0
34457: DOUBLE
34458: EQUAL
34459: IFTRUE 34517
34461: LD_INT 1
34463: DOUBLE
34464: EQUAL
34465: IFTRUE 34517
34467: LD_INT 6
34469: DOUBLE
34470: EQUAL
34471: IFTRUE 34517
34473: LD_INT 7
34475: DOUBLE
34476: EQUAL
34477: IFTRUE 34517
34479: LD_INT 8
34481: DOUBLE
34482: EQUAL
34483: IFTRUE 34517
34485: LD_INT 4
34487: DOUBLE
34488: EQUAL
34489: IFTRUE 34517
34491: LD_INT 5
34493: DOUBLE
34494: EQUAL
34495: IFTRUE 34517
34497: LD_INT 2
34499: DOUBLE
34500: EQUAL
34501: IFTRUE 34517
34503: LD_INT 3
34505: DOUBLE
34506: EQUAL
34507: IFTRUE 34517
34509: LD_INT 35
34511: DOUBLE
34512: EQUAL
34513: IFTRUE 34517
34515: GO 34528
34517: POP
// places := 6 ; b_bunker , b_breastwork :
34518: LD_ADDR_VAR 0 3
34522: PUSH
34523: LD_INT 6
34525: ST_TO_ADDR
34526: GO 34573
34528: LD_INT 32
34530: DOUBLE
34531: EQUAL
34532: IFTRUE 34542
34534: LD_INT 31
34536: DOUBLE
34537: EQUAL
34538: IFTRUE 34542
34540: GO 34553
34542: POP
// places := 1 ; b_control_tower :
34543: LD_ADDR_VAR 0 3
34547: PUSH
34548: LD_INT 1
34550: ST_TO_ADDR
34551: GO 34573
34553: LD_INT 36
34555: DOUBLE
34556: EQUAL
34557: IFTRUE 34561
34559: GO 34572
34561: POP
// places := 3 ; end ;
34562: LD_ADDR_VAR 0 3
34566: PUSH
34567: LD_INT 3
34569: ST_TO_ADDR
34570: GO 34573
34572: POP
// if places then
34573: LD_VAR 0 3
34577: IFFALSE 34600
// result := UnitsInside ( building ) < places ;
34579: LD_ADDR_VAR 0 2
34583: PUSH
34584: LD_VAR 0 1
34588: PPUSH
34589: CALL_OW 313
34593: PUSH
34594: LD_VAR 0 3
34598: LESS
34599: ST_TO_ADDR
// end ;
34600: LD_VAR 0 2
34604: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
34605: LD_INT 0
34607: PPUSH
34608: PPUSH
34609: PPUSH
34610: PPUSH
// tmp := [ ] ;
34611: LD_ADDR_VAR 0 3
34615: PUSH
34616: EMPTY
34617: ST_TO_ADDR
// list := [ ] ;
34618: LD_ADDR_VAR 0 5
34622: PUSH
34623: EMPTY
34624: ST_TO_ADDR
// for i = 16 to 25 do
34625: LD_ADDR_VAR 0 4
34629: PUSH
34630: DOUBLE
34631: LD_INT 16
34633: DEC
34634: ST_TO_ADDR
34635: LD_INT 25
34637: PUSH
34638: FOR_TO
34639: IFFALSE 34712
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
34641: LD_ADDR_VAR 0 3
34645: PUSH
34646: LD_VAR 0 3
34650: PUSH
34651: LD_INT 22
34653: PUSH
34654: LD_VAR 0 1
34658: PPUSH
34659: CALL_OW 255
34663: PUSH
34664: EMPTY
34665: LIST
34666: LIST
34667: PUSH
34668: LD_INT 91
34670: PUSH
34671: LD_VAR 0 1
34675: PUSH
34676: LD_INT 6
34678: PUSH
34679: EMPTY
34680: LIST
34681: LIST
34682: LIST
34683: PUSH
34684: LD_INT 30
34686: PUSH
34687: LD_VAR 0 4
34691: PUSH
34692: EMPTY
34693: LIST
34694: LIST
34695: PUSH
34696: EMPTY
34697: LIST
34698: LIST
34699: LIST
34700: PUSH
34701: EMPTY
34702: LIST
34703: PPUSH
34704: CALL_OW 69
34708: ADD
34709: ST_TO_ADDR
34710: GO 34638
34712: POP
34713: POP
// for i = 1 to tmp do
34714: LD_ADDR_VAR 0 4
34718: PUSH
34719: DOUBLE
34720: LD_INT 1
34722: DEC
34723: ST_TO_ADDR
34724: LD_VAR 0 3
34728: PUSH
34729: FOR_TO
34730: IFFALSE 34818
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
34732: LD_ADDR_VAR 0 5
34736: PUSH
34737: LD_VAR 0 5
34741: PUSH
34742: LD_VAR 0 3
34746: PUSH
34747: LD_VAR 0 4
34751: ARRAY
34752: PPUSH
34753: CALL_OW 266
34757: PUSH
34758: LD_VAR 0 3
34762: PUSH
34763: LD_VAR 0 4
34767: ARRAY
34768: PPUSH
34769: CALL_OW 250
34773: PUSH
34774: LD_VAR 0 3
34778: PUSH
34779: LD_VAR 0 4
34783: ARRAY
34784: PPUSH
34785: CALL_OW 251
34789: PUSH
34790: LD_VAR 0 3
34794: PUSH
34795: LD_VAR 0 4
34799: ARRAY
34800: PPUSH
34801: CALL_OW 254
34805: PUSH
34806: EMPTY
34807: LIST
34808: LIST
34809: LIST
34810: LIST
34811: PUSH
34812: EMPTY
34813: LIST
34814: ADD
34815: ST_TO_ADDR
34816: GO 34729
34818: POP
34819: POP
// result := list ;
34820: LD_ADDR_VAR 0 2
34824: PUSH
34825: LD_VAR 0 5
34829: ST_TO_ADDR
// end ;
34830: LD_VAR 0 2
34834: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
34835: LD_INT 0
34837: PPUSH
34838: PPUSH
34839: PPUSH
34840: PPUSH
34841: PPUSH
34842: PPUSH
34843: PPUSH
// if not factory then
34844: LD_VAR 0 1
34848: NOT
34849: IFFALSE 34853
// exit ;
34851: GO 35446
// if control = control_apeman then
34853: LD_VAR 0 4
34857: PUSH
34858: LD_INT 5
34860: EQUAL
34861: IFFALSE 34970
// begin tmp := UnitsInside ( factory ) ;
34863: LD_ADDR_VAR 0 8
34867: PUSH
34868: LD_VAR 0 1
34872: PPUSH
34873: CALL_OW 313
34877: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
34878: LD_VAR 0 8
34882: PPUSH
34883: LD_INT 25
34885: PUSH
34886: LD_INT 12
34888: PUSH
34889: EMPTY
34890: LIST
34891: LIST
34892: PPUSH
34893: CALL_OW 72
34897: NOT
34898: IFFALSE 34908
// control := control_manual ;
34900: LD_ADDR_VAR 0 4
34904: PUSH
34905: LD_INT 1
34907: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
34908: LD_ADDR_VAR 0 8
34912: PUSH
34913: LD_VAR 0 1
34917: PPUSH
34918: CALL 34605 0 1
34922: ST_TO_ADDR
// if tmp then
34923: LD_VAR 0 8
34927: IFFALSE 34970
// begin for i in tmp do
34929: LD_ADDR_VAR 0 7
34933: PUSH
34934: LD_VAR 0 8
34938: PUSH
34939: FOR_IN
34940: IFFALSE 34968
// if i [ 1 ] = b_ext_radio then
34942: LD_VAR 0 7
34946: PUSH
34947: LD_INT 1
34949: ARRAY
34950: PUSH
34951: LD_INT 22
34953: EQUAL
34954: IFFALSE 34966
// begin control := control_remote ;
34956: LD_ADDR_VAR 0 4
34960: PUSH
34961: LD_INT 2
34963: ST_TO_ADDR
// break ;
34964: GO 34968
// end ;
34966: GO 34939
34968: POP
34969: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
34970: LD_VAR 0 1
34974: PPUSH
34975: LD_VAR 0 2
34979: PPUSH
34980: LD_VAR 0 3
34984: PPUSH
34985: LD_VAR 0 4
34989: PPUSH
34990: LD_VAR 0 5
34994: PPUSH
34995: CALL_OW 448
34999: IFFALSE 35034
// begin result := [ chassis , engine , control , weapon ] ;
35001: LD_ADDR_VAR 0 6
35005: PUSH
35006: LD_VAR 0 2
35010: PUSH
35011: LD_VAR 0 3
35015: PUSH
35016: LD_VAR 0 4
35020: PUSH
35021: LD_VAR 0 5
35025: PUSH
35026: EMPTY
35027: LIST
35028: LIST
35029: LIST
35030: LIST
35031: ST_TO_ADDR
// exit ;
35032: GO 35446
// end ; _chassis := AvailableChassisList ( factory ) ;
35034: LD_ADDR_VAR 0 9
35038: PUSH
35039: LD_VAR 0 1
35043: PPUSH
35044: CALL_OW 475
35048: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
35049: LD_ADDR_VAR 0 11
35053: PUSH
35054: LD_VAR 0 1
35058: PPUSH
35059: CALL_OW 476
35063: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
35064: LD_ADDR_VAR 0 12
35068: PUSH
35069: LD_VAR 0 1
35073: PPUSH
35074: CALL_OW 477
35078: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
35079: LD_ADDR_VAR 0 10
35083: PUSH
35084: LD_VAR 0 1
35088: PPUSH
35089: CALL_OW 478
35093: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
35094: LD_VAR 0 9
35098: NOT
35099: PUSH
35100: LD_VAR 0 11
35104: NOT
35105: OR
35106: PUSH
35107: LD_VAR 0 12
35111: NOT
35112: OR
35113: PUSH
35114: LD_VAR 0 10
35118: NOT
35119: OR
35120: IFFALSE 35155
// begin result := [ chassis , engine , control , weapon ] ;
35122: LD_ADDR_VAR 0 6
35126: PUSH
35127: LD_VAR 0 2
35131: PUSH
35132: LD_VAR 0 3
35136: PUSH
35137: LD_VAR 0 4
35141: PUSH
35142: LD_VAR 0 5
35146: PUSH
35147: EMPTY
35148: LIST
35149: LIST
35150: LIST
35151: LIST
35152: ST_TO_ADDR
// exit ;
35153: GO 35446
// end ; if not chassis in _chassis then
35155: LD_VAR 0 2
35159: PUSH
35160: LD_VAR 0 9
35164: IN
35165: NOT
35166: IFFALSE 35192
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
35168: LD_ADDR_VAR 0 2
35172: PUSH
35173: LD_VAR 0 9
35177: PUSH
35178: LD_INT 1
35180: PPUSH
35181: LD_VAR 0 9
35185: PPUSH
35186: CALL_OW 12
35190: ARRAY
35191: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
35192: LD_VAR 0 2
35196: PPUSH
35197: LD_VAR 0 3
35201: PPUSH
35202: CALL 35451 0 2
35206: NOT
35207: IFFALSE 35266
// repeat engine := _engine [ 1 ] ;
35209: LD_ADDR_VAR 0 3
35213: PUSH
35214: LD_VAR 0 11
35218: PUSH
35219: LD_INT 1
35221: ARRAY
35222: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
35223: LD_ADDR_VAR 0 11
35227: PUSH
35228: LD_VAR 0 11
35232: PPUSH
35233: LD_INT 1
35235: PPUSH
35236: CALL_OW 3
35240: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
35241: LD_VAR 0 2
35245: PPUSH
35246: LD_VAR 0 3
35250: PPUSH
35251: CALL 35451 0 2
35255: PUSH
35256: LD_VAR 0 11
35260: PUSH
35261: EMPTY
35262: EQUAL
35263: OR
35264: IFFALSE 35209
// if not control in _control then
35266: LD_VAR 0 4
35270: PUSH
35271: LD_VAR 0 12
35275: IN
35276: NOT
35277: IFFALSE 35303
// control := _control [ rand ( 1 , _control ) ] ;
35279: LD_ADDR_VAR 0 4
35283: PUSH
35284: LD_VAR 0 12
35288: PUSH
35289: LD_INT 1
35291: PPUSH
35292: LD_VAR 0 12
35296: PPUSH
35297: CALL_OW 12
35301: ARRAY
35302: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
35303: LD_VAR 0 2
35307: PPUSH
35308: LD_VAR 0 5
35312: PPUSH
35313: CALL 35671 0 2
35317: NOT
35318: IFFALSE 35377
// repeat weapon := _weapon [ 1 ] ;
35320: LD_ADDR_VAR 0 5
35324: PUSH
35325: LD_VAR 0 10
35329: PUSH
35330: LD_INT 1
35332: ARRAY
35333: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
35334: LD_ADDR_VAR 0 10
35338: PUSH
35339: LD_VAR 0 10
35343: PPUSH
35344: LD_INT 1
35346: PPUSH
35347: CALL_OW 3
35351: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
35352: LD_VAR 0 2
35356: PPUSH
35357: LD_VAR 0 5
35361: PPUSH
35362: CALL 35671 0 2
35366: PUSH
35367: LD_VAR 0 10
35371: PUSH
35372: EMPTY
35373: EQUAL
35374: OR
35375: IFFALSE 35320
// result := [ ] ;
35377: LD_ADDR_VAR 0 6
35381: PUSH
35382: EMPTY
35383: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
35384: LD_VAR 0 1
35388: PPUSH
35389: LD_VAR 0 2
35393: PPUSH
35394: LD_VAR 0 3
35398: PPUSH
35399: LD_VAR 0 4
35403: PPUSH
35404: LD_VAR 0 5
35408: PPUSH
35409: CALL_OW 448
35413: IFFALSE 35446
// result := [ chassis , engine , control , weapon ] ;
35415: LD_ADDR_VAR 0 6
35419: PUSH
35420: LD_VAR 0 2
35424: PUSH
35425: LD_VAR 0 3
35429: PUSH
35430: LD_VAR 0 4
35434: PUSH
35435: LD_VAR 0 5
35439: PUSH
35440: EMPTY
35441: LIST
35442: LIST
35443: LIST
35444: LIST
35445: ST_TO_ADDR
// end ;
35446: LD_VAR 0 6
35450: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
35451: LD_INT 0
35453: PPUSH
// if not chassis or not engine then
35454: LD_VAR 0 1
35458: NOT
35459: PUSH
35460: LD_VAR 0 2
35464: NOT
35465: OR
35466: IFFALSE 35470
// exit ;
35468: GO 35666
// case engine of engine_solar :
35470: LD_VAR 0 2
35474: PUSH
35475: LD_INT 2
35477: DOUBLE
35478: EQUAL
35479: IFTRUE 35483
35481: GO 35521
35483: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
35484: LD_ADDR_VAR 0 3
35488: PUSH
35489: LD_INT 11
35491: PUSH
35492: LD_INT 12
35494: PUSH
35495: LD_INT 13
35497: PUSH
35498: LD_INT 14
35500: PUSH
35501: LD_INT 1
35503: PUSH
35504: LD_INT 2
35506: PUSH
35507: LD_INT 3
35509: PUSH
35510: EMPTY
35511: LIST
35512: LIST
35513: LIST
35514: LIST
35515: LIST
35516: LIST
35517: LIST
35518: ST_TO_ADDR
35519: GO 35650
35521: LD_INT 1
35523: DOUBLE
35524: EQUAL
35525: IFTRUE 35529
35527: GO 35591
35529: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
35530: LD_ADDR_VAR 0 3
35534: PUSH
35535: LD_INT 11
35537: PUSH
35538: LD_INT 12
35540: PUSH
35541: LD_INT 13
35543: PUSH
35544: LD_INT 14
35546: PUSH
35547: LD_INT 1
35549: PUSH
35550: LD_INT 2
35552: PUSH
35553: LD_INT 3
35555: PUSH
35556: LD_INT 4
35558: PUSH
35559: LD_INT 5
35561: PUSH
35562: LD_INT 21
35564: PUSH
35565: LD_INT 23
35567: PUSH
35568: LD_INT 22
35570: PUSH
35571: LD_INT 24
35573: PUSH
35574: EMPTY
35575: LIST
35576: LIST
35577: LIST
35578: LIST
35579: LIST
35580: LIST
35581: LIST
35582: LIST
35583: LIST
35584: LIST
35585: LIST
35586: LIST
35587: LIST
35588: ST_TO_ADDR
35589: GO 35650
35591: LD_INT 3
35593: DOUBLE
35594: EQUAL
35595: IFTRUE 35599
35597: GO 35649
35599: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
35600: LD_ADDR_VAR 0 3
35604: PUSH
35605: LD_INT 13
35607: PUSH
35608: LD_INT 14
35610: PUSH
35611: LD_INT 2
35613: PUSH
35614: LD_INT 3
35616: PUSH
35617: LD_INT 4
35619: PUSH
35620: LD_INT 5
35622: PUSH
35623: LD_INT 21
35625: PUSH
35626: LD_INT 22
35628: PUSH
35629: LD_INT 23
35631: PUSH
35632: LD_INT 24
35634: PUSH
35635: EMPTY
35636: LIST
35637: LIST
35638: LIST
35639: LIST
35640: LIST
35641: LIST
35642: LIST
35643: LIST
35644: LIST
35645: LIST
35646: ST_TO_ADDR
35647: GO 35650
35649: POP
// result := ( chassis in result ) ;
35650: LD_ADDR_VAR 0 3
35654: PUSH
35655: LD_VAR 0 1
35659: PUSH
35660: LD_VAR 0 3
35664: IN
35665: ST_TO_ADDR
// end ;
35666: LD_VAR 0 3
35670: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
35671: LD_INT 0
35673: PPUSH
// if not chassis or not weapon then
35674: LD_VAR 0 1
35678: NOT
35679: PUSH
35680: LD_VAR 0 2
35684: NOT
35685: OR
35686: IFFALSE 35690
// exit ;
35688: GO 36750
// case weapon of us_machine_gun :
35690: LD_VAR 0 2
35694: PUSH
35695: LD_INT 2
35697: DOUBLE
35698: EQUAL
35699: IFTRUE 35703
35701: GO 35733
35703: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
35704: LD_ADDR_VAR 0 3
35708: PUSH
35709: LD_INT 1
35711: PUSH
35712: LD_INT 2
35714: PUSH
35715: LD_INT 3
35717: PUSH
35718: LD_INT 4
35720: PUSH
35721: LD_INT 5
35723: PUSH
35724: EMPTY
35725: LIST
35726: LIST
35727: LIST
35728: LIST
35729: LIST
35730: ST_TO_ADDR
35731: GO 36734
35733: LD_INT 3
35735: DOUBLE
35736: EQUAL
35737: IFTRUE 35741
35739: GO 35771
35741: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
35742: LD_ADDR_VAR 0 3
35746: PUSH
35747: LD_INT 1
35749: PUSH
35750: LD_INT 2
35752: PUSH
35753: LD_INT 3
35755: PUSH
35756: LD_INT 4
35758: PUSH
35759: LD_INT 5
35761: PUSH
35762: EMPTY
35763: LIST
35764: LIST
35765: LIST
35766: LIST
35767: LIST
35768: ST_TO_ADDR
35769: GO 36734
35771: LD_INT 11
35773: DOUBLE
35774: EQUAL
35775: IFTRUE 35779
35777: GO 35809
35779: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
35780: LD_ADDR_VAR 0 3
35784: PUSH
35785: LD_INT 1
35787: PUSH
35788: LD_INT 2
35790: PUSH
35791: LD_INT 3
35793: PUSH
35794: LD_INT 4
35796: PUSH
35797: LD_INT 5
35799: PUSH
35800: EMPTY
35801: LIST
35802: LIST
35803: LIST
35804: LIST
35805: LIST
35806: ST_TO_ADDR
35807: GO 36734
35809: LD_INT 4
35811: DOUBLE
35812: EQUAL
35813: IFTRUE 35817
35815: GO 35843
35817: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
35818: LD_ADDR_VAR 0 3
35822: PUSH
35823: LD_INT 2
35825: PUSH
35826: LD_INT 3
35828: PUSH
35829: LD_INT 4
35831: PUSH
35832: LD_INT 5
35834: PUSH
35835: EMPTY
35836: LIST
35837: LIST
35838: LIST
35839: LIST
35840: ST_TO_ADDR
35841: GO 36734
35843: LD_INT 5
35845: DOUBLE
35846: EQUAL
35847: IFTRUE 35851
35849: GO 35877
35851: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
35852: LD_ADDR_VAR 0 3
35856: PUSH
35857: LD_INT 2
35859: PUSH
35860: LD_INT 3
35862: PUSH
35863: LD_INT 4
35865: PUSH
35866: LD_INT 5
35868: PUSH
35869: EMPTY
35870: LIST
35871: LIST
35872: LIST
35873: LIST
35874: ST_TO_ADDR
35875: GO 36734
35877: LD_INT 9
35879: DOUBLE
35880: EQUAL
35881: IFTRUE 35885
35883: GO 35911
35885: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
35886: LD_ADDR_VAR 0 3
35890: PUSH
35891: LD_INT 2
35893: PUSH
35894: LD_INT 3
35896: PUSH
35897: LD_INT 4
35899: PUSH
35900: LD_INT 5
35902: PUSH
35903: EMPTY
35904: LIST
35905: LIST
35906: LIST
35907: LIST
35908: ST_TO_ADDR
35909: GO 36734
35911: LD_INT 7
35913: DOUBLE
35914: EQUAL
35915: IFTRUE 35919
35917: GO 35945
35919: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
35920: LD_ADDR_VAR 0 3
35924: PUSH
35925: LD_INT 2
35927: PUSH
35928: LD_INT 3
35930: PUSH
35931: LD_INT 4
35933: PUSH
35934: LD_INT 5
35936: PUSH
35937: EMPTY
35938: LIST
35939: LIST
35940: LIST
35941: LIST
35942: ST_TO_ADDR
35943: GO 36734
35945: LD_INT 12
35947: DOUBLE
35948: EQUAL
35949: IFTRUE 35953
35951: GO 35979
35953: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
35954: LD_ADDR_VAR 0 3
35958: PUSH
35959: LD_INT 2
35961: PUSH
35962: LD_INT 3
35964: PUSH
35965: LD_INT 4
35967: PUSH
35968: LD_INT 5
35970: PUSH
35971: EMPTY
35972: LIST
35973: LIST
35974: LIST
35975: LIST
35976: ST_TO_ADDR
35977: GO 36734
35979: LD_INT 13
35981: DOUBLE
35982: EQUAL
35983: IFTRUE 35987
35985: GO 36013
35987: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
35988: LD_ADDR_VAR 0 3
35992: PUSH
35993: LD_INT 2
35995: PUSH
35996: LD_INT 3
35998: PUSH
35999: LD_INT 4
36001: PUSH
36002: LD_INT 5
36004: PUSH
36005: EMPTY
36006: LIST
36007: LIST
36008: LIST
36009: LIST
36010: ST_TO_ADDR
36011: GO 36734
36013: LD_INT 14
36015: DOUBLE
36016: EQUAL
36017: IFTRUE 36021
36019: GO 36039
36021: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
36022: LD_ADDR_VAR 0 3
36026: PUSH
36027: LD_INT 4
36029: PUSH
36030: LD_INT 5
36032: PUSH
36033: EMPTY
36034: LIST
36035: LIST
36036: ST_TO_ADDR
36037: GO 36734
36039: LD_INT 6
36041: DOUBLE
36042: EQUAL
36043: IFTRUE 36047
36045: GO 36065
36047: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
36048: LD_ADDR_VAR 0 3
36052: PUSH
36053: LD_INT 4
36055: PUSH
36056: LD_INT 5
36058: PUSH
36059: EMPTY
36060: LIST
36061: LIST
36062: ST_TO_ADDR
36063: GO 36734
36065: LD_INT 10
36067: DOUBLE
36068: EQUAL
36069: IFTRUE 36073
36071: GO 36091
36073: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
36074: LD_ADDR_VAR 0 3
36078: PUSH
36079: LD_INT 4
36081: PUSH
36082: LD_INT 5
36084: PUSH
36085: EMPTY
36086: LIST
36087: LIST
36088: ST_TO_ADDR
36089: GO 36734
36091: LD_INT 22
36093: DOUBLE
36094: EQUAL
36095: IFTRUE 36099
36097: GO 36125
36099: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
36100: LD_ADDR_VAR 0 3
36104: PUSH
36105: LD_INT 11
36107: PUSH
36108: LD_INT 12
36110: PUSH
36111: LD_INT 13
36113: PUSH
36114: LD_INT 14
36116: PUSH
36117: EMPTY
36118: LIST
36119: LIST
36120: LIST
36121: LIST
36122: ST_TO_ADDR
36123: GO 36734
36125: LD_INT 23
36127: DOUBLE
36128: EQUAL
36129: IFTRUE 36133
36131: GO 36159
36133: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
36134: LD_ADDR_VAR 0 3
36138: PUSH
36139: LD_INT 11
36141: PUSH
36142: LD_INT 12
36144: PUSH
36145: LD_INT 13
36147: PUSH
36148: LD_INT 14
36150: PUSH
36151: EMPTY
36152: LIST
36153: LIST
36154: LIST
36155: LIST
36156: ST_TO_ADDR
36157: GO 36734
36159: LD_INT 24
36161: DOUBLE
36162: EQUAL
36163: IFTRUE 36167
36165: GO 36193
36167: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
36168: LD_ADDR_VAR 0 3
36172: PUSH
36173: LD_INT 11
36175: PUSH
36176: LD_INT 12
36178: PUSH
36179: LD_INT 13
36181: PUSH
36182: LD_INT 14
36184: PUSH
36185: EMPTY
36186: LIST
36187: LIST
36188: LIST
36189: LIST
36190: ST_TO_ADDR
36191: GO 36734
36193: LD_INT 30
36195: DOUBLE
36196: EQUAL
36197: IFTRUE 36201
36199: GO 36227
36201: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
36202: LD_ADDR_VAR 0 3
36206: PUSH
36207: LD_INT 11
36209: PUSH
36210: LD_INT 12
36212: PUSH
36213: LD_INT 13
36215: PUSH
36216: LD_INT 14
36218: PUSH
36219: EMPTY
36220: LIST
36221: LIST
36222: LIST
36223: LIST
36224: ST_TO_ADDR
36225: GO 36734
36227: LD_INT 25
36229: DOUBLE
36230: EQUAL
36231: IFTRUE 36235
36233: GO 36253
36235: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
36236: LD_ADDR_VAR 0 3
36240: PUSH
36241: LD_INT 13
36243: PUSH
36244: LD_INT 14
36246: PUSH
36247: EMPTY
36248: LIST
36249: LIST
36250: ST_TO_ADDR
36251: GO 36734
36253: LD_INT 27
36255: DOUBLE
36256: EQUAL
36257: IFTRUE 36261
36259: GO 36279
36261: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
36262: LD_ADDR_VAR 0 3
36266: PUSH
36267: LD_INT 13
36269: PUSH
36270: LD_INT 14
36272: PUSH
36273: EMPTY
36274: LIST
36275: LIST
36276: ST_TO_ADDR
36277: GO 36734
36279: LD_INT 92
36281: DOUBLE
36282: EQUAL
36283: IFTRUE 36287
36285: GO 36313
36287: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
36288: LD_ADDR_VAR 0 3
36292: PUSH
36293: LD_INT 11
36295: PUSH
36296: LD_INT 12
36298: PUSH
36299: LD_INT 13
36301: PUSH
36302: LD_INT 14
36304: PUSH
36305: EMPTY
36306: LIST
36307: LIST
36308: LIST
36309: LIST
36310: ST_TO_ADDR
36311: GO 36734
36313: LD_INT 28
36315: DOUBLE
36316: EQUAL
36317: IFTRUE 36321
36319: GO 36339
36321: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
36322: LD_ADDR_VAR 0 3
36326: PUSH
36327: LD_INT 13
36329: PUSH
36330: LD_INT 14
36332: PUSH
36333: EMPTY
36334: LIST
36335: LIST
36336: ST_TO_ADDR
36337: GO 36734
36339: LD_INT 29
36341: DOUBLE
36342: EQUAL
36343: IFTRUE 36347
36345: GO 36365
36347: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
36348: LD_ADDR_VAR 0 3
36352: PUSH
36353: LD_INT 13
36355: PUSH
36356: LD_INT 14
36358: PUSH
36359: EMPTY
36360: LIST
36361: LIST
36362: ST_TO_ADDR
36363: GO 36734
36365: LD_INT 31
36367: DOUBLE
36368: EQUAL
36369: IFTRUE 36373
36371: GO 36391
36373: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
36374: LD_ADDR_VAR 0 3
36378: PUSH
36379: LD_INT 13
36381: PUSH
36382: LD_INT 14
36384: PUSH
36385: EMPTY
36386: LIST
36387: LIST
36388: ST_TO_ADDR
36389: GO 36734
36391: LD_INT 26
36393: DOUBLE
36394: EQUAL
36395: IFTRUE 36399
36397: GO 36417
36399: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
36400: LD_ADDR_VAR 0 3
36404: PUSH
36405: LD_INT 13
36407: PUSH
36408: LD_INT 14
36410: PUSH
36411: EMPTY
36412: LIST
36413: LIST
36414: ST_TO_ADDR
36415: GO 36734
36417: LD_INT 42
36419: DOUBLE
36420: EQUAL
36421: IFTRUE 36425
36423: GO 36451
36425: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
36426: LD_ADDR_VAR 0 3
36430: PUSH
36431: LD_INT 21
36433: PUSH
36434: LD_INT 22
36436: PUSH
36437: LD_INT 23
36439: PUSH
36440: LD_INT 24
36442: PUSH
36443: EMPTY
36444: LIST
36445: LIST
36446: LIST
36447: LIST
36448: ST_TO_ADDR
36449: GO 36734
36451: LD_INT 43
36453: DOUBLE
36454: EQUAL
36455: IFTRUE 36459
36457: GO 36485
36459: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
36460: LD_ADDR_VAR 0 3
36464: PUSH
36465: LD_INT 21
36467: PUSH
36468: LD_INT 22
36470: PUSH
36471: LD_INT 23
36473: PUSH
36474: LD_INT 24
36476: PUSH
36477: EMPTY
36478: LIST
36479: LIST
36480: LIST
36481: LIST
36482: ST_TO_ADDR
36483: GO 36734
36485: LD_INT 44
36487: DOUBLE
36488: EQUAL
36489: IFTRUE 36493
36491: GO 36519
36493: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
36494: LD_ADDR_VAR 0 3
36498: PUSH
36499: LD_INT 21
36501: PUSH
36502: LD_INT 22
36504: PUSH
36505: LD_INT 23
36507: PUSH
36508: LD_INT 24
36510: PUSH
36511: EMPTY
36512: LIST
36513: LIST
36514: LIST
36515: LIST
36516: ST_TO_ADDR
36517: GO 36734
36519: LD_INT 45
36521: DOUBLE
36522: EQUAL
36523: IFTRUE 36527
36525: GO 36553
36527: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
36528: LD_ADDR_VAR 0 3
36532: PUSH
36533: LD_INT 21
36535: PUSH
36536: LD_INT 22
36538: PUSH
36539: LD_INT 23
36541: PUSH
36542: LD_INT 24
36544: PUSH
36545: EMPTY
36546: LIST
36547: LIST
36548: LIST
36549: LIST
36550: ST_TO_ADDR
36551: GO 36734
36553: LD_INT 49
36555: DOUBLE
36556: EQUAL
36557: IFTRUE 36561
36559: GO 36587
36561: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
36562: LD_ADDR_VAR 0 3
36566: PUSH
36567: LD_INT 21
36569: PUSH
36570: LD_INT 22
36572: PUSH
36573: LD_INT 23
36575: PUSH
36576: LD_INT 24
36578: PUSH
36579: EMPTY
36580: LIST
36581: LIST
36582: LIST
36583: LIST
36584: ST_TO_ADDR
36585: GO 36734
36587: LD_INT 51
36589: DOUBLE
36590: EQUAL
36591: IFTRUE 36595
36593: GO 36621
36595: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
36596: LD_ADDR_VAR 0 3
36600: PUSH
36601: LD_INT 21
36603: PUSH
36604: LD_INT 22
36606: PUSH
36607: LD_INT 23
36609: PUSH
36610: LD_INT 24
36612: PUSH
36613: EMPTY
36614: LIST
36615: LIST
36616: LIST
36617: LIST
36618: ST_TO_ADDR
36619: GO 36734
36621: LD_INT 52
36623: DOUBLE
36624: EQUAL
36625: IFTRUE 36629
36627: GO 36655
36629: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
36630: LD_ADDR_VAR 0 3
36634: PUSH
36635: LD_INT 21
36637: PUSH
36638: LD_INT 22
36640: PUSH
36641: LD_INT 23
36643: PUSH
36644: LD_INT 24
36646: PUSH
36647: EMPTY
36648: LIST
36649: LIST
36650: LIST
36651: LIST
36652: ST_TO_ADDR
36653: GO 36734
36655: LD_INT 53
36657: DOUBLE
36658: EQUAL
36659: IFTRUE 36663
36661: GO 36681
36663: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
36664: LD_ADDR_VAR 0 3
36668: PUSH
36669: LD_INT 23
36671: PUSH
36672: LD_INT 24
36674: PUSH
36675: EMPTY
36676: LIST
36677: LIST
36678: ST_TO_ADDR
36679: GO 36734
36681: LD_INT 46
36683: DOUBLE
36684: EQUAL
36685: IFTRUE 36689
36687: GO 36707
36689: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
36690: LD_ADDR_VAR 0 3
36694: PUSH
36695: LD_INT 23
36697: PUSH
36698: LD_INT 24
36700: PUSH
36701: EMPTY
36702: LIST
36703: LIST
36704: ST_TO_ADDR
36705: GO 36734
36707: LD_INT 47
36709: DOUBLE
36710: EQUAL
36711: IFTRUE 36715
36713: GO 36733
36715: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
36716: LD_ADDR_VAR 0 3
36720: PUSH
36721: LD_INT 23
36723: PUSH
36724: LD_INT 24
36726: PUSH
36727: EMPTY
36728: LIST
36729: LIST
36730: ST_TO_ADDR
36731: GO 36734
36733: POP
// result := ( chassis in result ) ;
36734: LD_ADDR_VAR 0 3
36738: PUSH
36739: LD_VAR 0 1
36743: PUSH
36744: LD_VAR 0 3
36748: IN
36749: ST_TO_ADDR
// end ;
36750: LD_VAR 0 3
36754: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
36755: LD_INT 0
36757: PPUSH
36758: PPUSH
36759: PPUSH
36760: PPUSH
36761: PPUSH
36762: PPUSH
36763: PPUSH
// result := array ;
36764: LD_ADDR_VAR 0 5
36768: PUSH
36769: LD_VAR 0 1
36773: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
36774: LD_VAR 0 1
36778: NOT
36779: PUSH
36780: LD_VAR 0 2
36784: NOT
36785: OR
36786: PUSH
36787: LD_VAR 0 3
36791: NOT
36792: OR
36793: PUSH
36794: LD_VAR 0 2
36798: PUSH
36799: LD_VAR 0 1
36803: GREATER
36804: OR
36805: PUSH
36806: LD_VAR 0 3
36810: PUSH
36811: LD_VAR 0 1
36815: GREATER
36816: OR
36817: IFFALSE 36821
// exit ;
36819: GO 37117
// if direction then
36821: LD_VAR 0 4
36825: IFFALSE 36889
// begin d := 1 ;
36827: LD_ADDR_VAR 0 9
36831: PUSH
36832: LD_INT 1
36834: ST_TO_ADDR
// if i_from > i_to then
36835: LD_VAR 0 2
36839: PUSH
36840: LD_VAR 0 3
36844: GREATER
36845: IFFALSE 36871
// length := ( array - i_from ) + i_to else
36847: LD_ADDR_VAR 0 11
36851: PUSH
36852: LD_VAR 0 1
36856: PUSH
36857: LD_VAR 0 2
36861: MINUS
36862: PUSH
36863: LD_VAR 0 3
36867: PLUS
36868: ST_TO_ADDR
36869: GO 36887
// length := i_to - i_from ;
36871: LD_ADDR_VAR 0 11
36875: PUSH
36876: LD_VAR 0 3
36880: PUSH
36881: LD_VAR 0 2
36885: MINUS
36886: ST_TO_ADDR
// end else
36887: GO 36950
// begin d := - 1 ;
36889: LD_ADDR_VAR 0 9
36893: PUSH
36894: LD_INT 1
36896: NEG
36897: ST_TO_ADDR
// if i_from > i_to then
36898: LD_VAR 0 2
36902: PUSH
36903: LD_VAR 0 3
36907: GREATER
36908: IFFALSE 36928
// length := i_from - i_to else
36910: LD_ADDR_VAR 0 11
36914: PUSH
36915: LD_VAR 0 2
36919: PUSH
36920: LD_VAR 0 3
36924: MINUS
36925: ST_TO_ADDR
36926: GO 36950
// length := ( array - i_to ) + i_from ;
36928: LD_ADDR_VAR 0 11
36932: PUSH
36933: LD_VAR 0 1
36937: PUSH
36938: LD_VAR 0 3
36942: MINUS
36943: PUSH
36944: LD_VAR 0 2
36948: PLUS
36949: ST_TO_ADDR
// end ; if not length then
36950: LD_VAR 0 11
36954: NOT
36955: IFFALSE 36959
// exit ;
36957: GO 37117
// tmp := array ;
36959: LD_ADDR_VAR 0 10
36963: PUSH
36964: LD_VAR 0 1
36968: ST_TO_ADDR
// for i = 1 to length do
36969: LD_ADDR_VAR 0 6
36973: PUSH
36974: DOUBLE
36975: LD_INT 1
36977: DEC
36978: ST_TO_ADDR
36979: LD_VAR 0 11
36983: PUSH
36984: FOR_TO
36985: IFFALSE 37105
// begin for j = 1 to array do
36987: LD_ADDR_VAR 0 7
36991: PUSH
36992: DOUBLE
36993: LD_INT 1
36995: DEC
36996: ST_TO_ADDR
36997: LD_VAR 0 1
37001: PUSH
37002: FOR_TO
37003: IFFALSE 37091
// begin k := j + d ;
37005: LD_ADDR_VAR 0 8
37009: PUSH
37010: LD_VAR 0 7
37014: PUSH
37015: LD_VAR 0 9
37019: PLUS
37020: ST_TO_ADDR
// if k > array then
37021: LD_VAR 0 8
37025: PUSH
37026: LD_VAR 0 1
37030: GREATER
37031: IFFALSE 37041
// k := 1 ;
37033: LD_ADDR_VAR 0 8
37037: PUSH
37038: LD_INT 1
37040: ST_TO_ADDR
// if not k then
37041: LD_VAR 0 8
37045: NOT
37046: IFFALSE 37058
// k := array ;
37048: LD_ADDR_VAR 0 8
37052: PUSH
37053: LD_VAR 0 1
37057: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
37058: LD_ADDR_VAR 0 10
37062: PUSH
37063: LD_VAR 0 10
37067: PPUSH
37068: LD_VAR 0 8
37072: PPUSH
37073: LD_VAR 0 1
37077: PUSH
37078: LD_VAR 0 7
37082: ARRAY
37083: PPUSH
37084: CALL_OW 1
37088: ST_TO_ADDR
// end ;
37089: GO 37002
37091: POP
37092: POP
// array := tmp ;
37093: LD_ADDR_VAR 0 1
37097: PUSH
37098: LD_VAR 0 10
37102: ST_TO_ADDR
// end ;
37103: GO 36984
37105: POP
37106: POP
// result := array ;
37107: LD_ADDR_VAR 0 5
37111: PUSH
37112: LD_VAR 0 1
37116: ST_TO_ADDR
// end ;
37117: LD_VAR 0 5
37121: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
37122: LD_INT 0
37124: PPUSH
37125: PPUSH
// result := 0 ;
37126: LD_ADDR_VAR 0 3
37130: PUSH
37131: LD_INT 0
37133: ST_TO_ADDR
// if not array or not value in array then
37134: LD_VAR 0 1
37138: NOT
37139: PUSH
37140: LD_VAR 0 2
37144: PUSH
37145: LD_VAR 0 1
37149: IN
37150: NOT
37151: OR
37152: IFFALSE 37156
// exit ;
37154: GO 37210
// for i = 1 to array do
37156: LD_ADDR_VAR 0 4
37160: PUSH
37161: DOUBLE
37162: LD_INT 1
37164: DEC
37165: ST_TO_ADDR
37166: LD_VAR 0 1
37170: PUSH
37171: FOR_TO
37172: IFFALSE 37208
// if value = array [ i ] then
37174: LD_VAR 0 2
37178: PUSH
37179: LD_VAR 0 1
37183: PUSH
37184: LD_VAR 0 4
37188: ARRAY
37189: EQUAL
37190: IFFALSE 37206
// begin result := i ;
37192: LD_ADDR_VAR 0 3
37196: PUSH
37197: LD_VAR 0 4
37201: ST_TO_ADDR
// exit ;
37202: POP
37203: POP
37204: GO 37210
// end ;
37206: GO 37171
37208: POP
37209: POP
// end ;
37210: LD_VAR 0 3
37214: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
37215: LD_INT 0
37217: PPUSH
// vc_chassis := chassis ;
37218: LD_ADDR_OWVAR 37
37222: PUSH
37223: LD_VAR 0 1
37227: ST_TO_ADDR
// vc_engine := engine ;
37228: LD_ADDR_OWVAR 39
37232: PUSH
37233: LD_VAR 0 2
37237: ST_TO_ADDR
// vc_control := control ;
37238: LD_ADDR_OWVAR 38
37242: PUSH
37243: LD_VAR 0 3
37247: ST_TO_ADDR
// vc_weapon := weapon ;
37248: LD_ADDR_OWVAR 40
37252: PUSH
37253: LD_VAR 0 4
37257: ST_TO_ADDR
// vc_fuel_battery := fuel ;
37258: LD_ADDR_OWVAR 41
37262: PUSH
37263: LD_VAR 0 5
37267: ST_TO_ADDR
// end ;
37268: LD_VAR 0 6
37272: RET
// export function WantPlant ( unit ) ; var task ; begin
37273: LD_INT 0
37275: PPUSH
37276: PPUSH
// result := false ;
37277: LD_ADDR_VAR 0 2
37281: PUSH
37282: LD_INT 0
37284: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
37285: LD_ADDR_VAR 0 3
37289: PUSH
37290: LD_VAR 0 1
37294: PPUSH
37295: CALL_OW 437
37299: ST_TO_ADDR
// if task then
37300: LD_VAR 0 3
37304: IFFALSE 37332
// if task [ 1 ] [ 1 ] = p then
37306: LD_VAR 0 3
37310: PUSH
37311: LD_INT 1
37313: ARRAY
37314: PUSH
37315: LD_INT 1
37317: ARRAY
37318: PUSH
37319: LD_STRING p
37321: EQUAL
37322: IFFALSE 37332
// result := true ;
37324: LD_ADDR_VAR 0 2
37328: PUSH
37329: LD_INT 1
37331: ST_TO_ADDR
// end ;
37332: LD_VAR 0 2
37336: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
37337: LD_INT 0
37339: PPUSH
37340: PPUSH
37341: PPUSH
37342: PPUSH
// if pos < 1 then
37343: LD_VAR 0 2
37347: PUSH
37348: LD_INT 1
37350: LESS
37351: IFFALSE 37355
// exit ;
37353: GO 37658
// if pos = 1 then
37355: LD_VAR 0 2
37359: PUSH
37360: LD_INT 1
37362: EQUAL
37363: IFFALSE 37396
// result := Replace ( arr , pos [ 1 ] , value ) else
37365: LD_ADDR_VAR 0 4
37369: PUSH
37370: LD_VAR 0 1
37374: PPUSH
37375: LD_VAR 0 2
37379: PUSH
37380: LD_INT 1
37382: ARRAY
37383: PPUSH
37384: LD_VAR 0 3
37388: PPUSH
37389: CALL_OW 1
37393: ST_TO_ADDR
37394: GO 37658
// begin tmp := arr ;
37396: LD_ADDR_VAR 0 6
37400: PUSH
37401: LD_VAR 0 1
37405: ST_TO_ADDR
// s_arr := [ tmp ] ;
37406: LD_ADDR_VAR 0 7
37410: PUSH
37411: LD_VAR 0 6
37415: PUSH
37416: EMPTY
37417: LIST
37418: ST_TO_ADDR
// for i = 1 to pos - 1 do
37419: LD_ADDR_VAR 0 5
37423: PUSH
37424: DOUBLE
37425: LD_INT 1
37427: DEC
37428: ST_TO_ADDR
37429: LD_VAR 0 2
37433: PUSH
37434: LD_INT 1
37436: MINUS
37437: PUSH
37438: FOR_TO
37439: IFFALSE 37484
// begin tmp := tmp [ pos [ i ] ] ;
37441: LD_ADDR_VAR 0 6
37445: PUSH
37446: LD_VAR 0 6
37450: PUSH
37451: LD_VAR 0 2
37455: PUSH
37456: LD_VAR 0 5
37460: ARRAY
37461: ARRAY
37462: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
37463: LD_ADDR_VAR 0 7
37467: PUSH
37468: LD_VAR 0 7
37472: PUSH
37473: LD_VAR 0 6
37477: PUSH
37478: EMPTY
37479: LIST
37480: ADD
37481: ST_TO_ADDR
// end ;
37482: GO 37438
37484: POP
37485: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
37486: LD_ADDR_VAR 0 6
37490: PUSH
37491: LD_VAR 0 6
37495: PPUSH
37496: LD_VAR 0 2
37500: PUSH
37501: LD_VAR 0 2
37505: ARRAY
37506: PPUSH
37507: LD_VAR 0 3
37511: PPUSH
37512: CALL_OW 1
37516: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
37517: LD_ADDR_VAR 0 7
37521: PUSH
37522: LD_VAR 0 7
37526: PPUSH
37527: LD_VAR 0 7
37531: PPUSH
37532: LD_VAR 0 6
37536: PPUSH
37537: CALL_OW 1
37541: ST_TO_ADDR
// for i = s_arr downto 2 do
37542: LD_ADDR_VAR 0 5
37546: PUSH
37547: DOUBLE
37548: LD_VAR 0 7
37552: INC
37553: ST_TO_ADDR
37554: LD_INT 2
37556: PUSH
37557: FOR_DOWNTO
37558: IFFALSE 37642
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
37560: LD_ADDR_VAR 0 6
37564: PUSH
37565: LD_VAR 0 7
37569: PUSH
37570: LD_VAR 0 5
37574: PUSH
37575: LD_INT 1
37577: MINUS
37578: ARRAY
37579: PPUSH
37580: LD_VAR 0 2
37584: PUSH
37585: LD_VAR 0 5
37589: PUSH
37590: LD_INT 1
37592: MINUS
37593: ARRAY
37594: PPUSH
37595: LD_VAR 0 7
37599: PUSH
37600: LD_VAR 0 5
37604: ARRAY
37605: PPUSH
37606: CALL_OW 1
37610: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
37611: LD_ADDR_VAR 0 7
37615: PUSH
37616: LD_VAR 0 7
37620: PPUSH
37621: LD_VAR 0 5
37625: PUSH
37626: LD_INT 1
37628: MINUS
37629: PPUSH
37630: LD_VAR 0 6
37634: PPUSH
37635: CALL_OW 1
37639: ST_TO_ADDR
// end ;
37640: GO 37557
37642: POP
37643: POP
// result := s_arr [ 1 ] ;
37644: LD_ADDR_VAR 0 4
37648: PUSH
37649: LD_VAR 0 7
37653: PUSH
37654: LD_INT 1
37656: ARRAY
37657: ST_TO_ADDR
// end ; end ;
37658: LD_VAR 0 4
37662: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
37663: LD_INT 0
37665: PPUSH
37666: PPUSH
// if not list then
37667: LD_VAR 0 1
37671: NOT
37672: IFFALSE 37676
// exit ;
37674: GO 37767
// i := list [ pos1 ] ;
37676: LD_ADDR_VAR 0 5
37680: PUSH
37681: LD_VAR 0 1
37685: PUSH
37686: LD_VAR 0 2
37690: ARRAY
37691: ST_TO_ADDR
// if not i then
37692: LD_VAR 0 5
37696: NOT
37697: IFFALSE 37701
// exit ;
37699: GO 37767
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
37701: LD_ADDR_VAR 0 1
37705: PUSH
37706: LD_VAR 0 1
37710: PPUSH
37711: LD_VAR 0 2
37715: PPUSH
37716: LD_VAR 0 1
37720: PUSH
37721: LD_VAR 0 3
37725: ARRAY
37726: PPUSH
37727: CALL_OW 1
37731: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
37732: LD_ADDR_VAR 0 1
37736: PUSH
37737: LD_VAR 0 1
37741: PPUSH
37742: LD_VAR 0 3
37746: PPUSH
37747: LD_VAR 0 5
37751: PPUSH
37752: CALL_OW 1
37756: ST_TO_ADDR
// result := list ;
37757: LD_ADDR_VAR 0 4
37761: PUSH
37762: LD_VAR 0 1
37766: ST_TO_ADDR
// end ;
37767: LD_VAR 0 4
37771: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
37772: LD_INT 0
37774: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
37775: LD_ADDR_VAR 0 5
37779: PUSH
37780: LD_VAR 0 1
37784: PPUSH
37785: CALL_OW 250
37789: PPUSH
37790: LD_VAR 0 1
37794: PPUSH
37795: CALL_OW 251
37799: PPUSH
37800: LD_VAR 0 2
37804: PPUSH
37805: LD_VAR 0 3
37809: PPUSH
37810: LD_VAR 0 4
37814: PPUSH
37815: CALL 37825 0 5
37819: ST_TO_ADDR
// end ;
37820: LD_VAR 0 5
37824: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
37825: LD_INT 0
37827: PPUSH
37828: PPUSH
37829: PPUSH
37830: PPUSH
// if not list then
37831: LD_VAR 0 3
37835: NOT
37836: IFFALSE 37840
// exit ;
37838: GO 38228
// result := [ ] ;
37840: LD_ADDR_VAR 0 6
37844: PUSH
37845: EMPTY
37846: ST_TO_ADDR
// for i in list do
37847: LD_ADDR_VAR 0 7
37851: PUSH
37852: LD_VAR 0 3
37856: PUSH
37857: FOR_IN
37858: IFFALSE 38060
// begin tmp := GetDistUnitXY ( i , x , y ) ;
37860: LD_ADDR_VAR 0 9
37864: PUSH
37865: LD_VAR 0 7
37869: PPUSH
37870: LD_VAR 0 1
37874: PPUSH
37875: LD_VAR 0 2
37879: PPUSH
37880: CALL_OW 297
37884: ST_TO_ADDR
// if not result then
37885: LD_VAR 0 6
37889: NOT
37890: IFFALSE 37916
// result := [ [ i , tmp ] ] else
37892: LD_ADDR_VAR 0 6
37896: PUSH
37897: LD_VAR 0 7
37901: PUSH
37902: LD_VAR 0 9
37906: PUSH
37907: EMPTY
37908: LIST
37909: LIST
37910: PUSH
37911: EMPTY
37912: LIST
37913: ST_TO_ADDR
37914: GO 38058
// begin if result [ result ] [ 2 ] < tmp then
37916: LD_VAR 0 6
37920: PUSH
37921: LD_VAR 0 6
37925: ARRAY
37926: PUSH
37927: LD_INT 2
37929: ARRAY
37930: PUSH
37931: LD_VAR 0 9
37935: LESS
37936: IFFALSE 37978
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
37938: LD_ADDR_VAR 0 6
37942: PUSH
37943: LD_VAR 0 6
37947: PPUSH
37948: LD_VAR 0 6
37952: PUSH
37953: LD_INT 1
37955: PLUS
37956: PPUSH
37957: LD_VAR 0 7
37961: PUSH
37962: LD_VAR 0 9
37966: PUSH
37967: EMPTY
37968: LIST
37969: LIST
37970: PPUSH
37971: CALL_OW 2
37975: ST_TO_ADDR
37976: GO 38058
// for j = 1 to result do
37978: LD_ADDR_VAR 0 8
37982: PUSH
37983: DOUBLE
37984: LD_INT 1
37986: DEC
37987: ST_TO_ADDR
37988: LD_VAR 0 6
37992: PUSH
37993: FOR_TO
37994: IFFALSE 38056
// begin if tmp < result [ j ] [ 2 ] then
37996: LD_VAR 0 9
38000: PUSH
38001: LD_VAR 0 6
38005: PUSH
38006: LD_VAR 0 8
38010: ARRAY
38011: PUSH
38012: LD_INT 2
38014: ARRAY
38015: LESS
38016: IFFALSE 38054
// begin result := Insert ( result , j , [ i , tmp ] ) ;
38018: LD_ADDR_VAR 0 6
38022: PUSH
38023: LD_VAR 0 6
38027: PPUSH
38028: LD_VAR 0 8
38032: PPUSH
38033: LD_VAR 0 7
38037: PUSH
38038: LD_VAR 0 9
38042: PUSH
38043: EMPTY
38044: LIST
38045: LIST
38046: PPUSH
38047: CALL_OW 2
38051: ST_TO_ADDR
// break ;
38052: GO 38056
// end ; end ;
38054: GO 37993
38056: POP
38057: POP
// end ; end ;
38058: GO 37857
38060: POP
38061: POP
// if result and not asc then
38062: LD_VAR 0 6
38066: PUSH
38067: LD_VAR 0 4
38071: NOT
38072: AND
38073: IFFALSE 38148
// begin tmp := result ;
38075: LD_ADDR_VAR 0 9
38079: PUSH
38080: LD_VAR 0 6
38084: ST_TO_ADDR
// for i = tmp downto 1 do
38085: LD_ADDR_VAR 0 7
38089: PUSH
38090: DOUBLE
38091: LD_VAR 0 9
38095: INC
38096: ST_TO_ADDR
38097: LD_INT 1
38099: PUSH
38100: FOR_DOWNTO
38101: IFFALSE 38146
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
38103: LD_ADDR_VAR 0 6
38107: PUSH
38108: LD_VAR 0 6
38112: PPUSH
38113: LD_VAR 0 9
38117: PUSH
38118: LD_VAR 0 7
38122: MINUS
38123: PUSH
38124: LD_INT 1
38126: PLUS
38127: PPUSH
38128: LD_VAR 0 9
38132: PUSH
38133: LD_VAR 0 7
38137: ARRAY
38138: PPUSH
38139: CALL_OW 1
38143: ST_TO_ADDR
38144: GO 38100
38146: POP
38147: POP
// end ; tmp := [ ] ;
38148: LD_ADDR_VAR 0 9
38152: PUSH
38153: EMPTY
38154: ST_TO_ADDR
// if mode then
38155: LD_VAR 0 5
38159: IFFALSE 38228
// begin for i = 1 to result do
38161: LD_ADDR_VAR 0 7
38165: PUSH
38166: DOUBLE
38167: LD_INT 1
38169: DEC
38170: ST_TO_ADDR
38171: LD_VAR 0 6
38175: PUSH
38176: FOR_TO
38177: IFFALSE 38216
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
38179: LD_ADDR_VAR 0 9
38183: PUSH
38184: LD_VAR 0 9
38188: PPUSH
38189: LD_VAR 0 7
38193: PPUSH
38194: LD_VAR 0 6
38198: PUSH
38199: LD_VAR 0 7
38203: ARRAY
38204: PUSH
38205: LD_INT 1
38207: ARRAY
38208: PPUSH
38209: CALL_OW 1
38213: ST_TO_ADDR
38214: GO 38176
38216: POP
38217: POP
// result := tmp ;
38218: LD_ADDR_VAR 0 6
38222: PUSH
38223: LD_VAR 0 9
38227: ST_TO_ADDR
// end ; end ;
38228: LD_VAR 0 6
38232: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
38233: LD_INT 0
38235: PPUSH
38236: PPUSH
38237: PPUSH
38238: PPUSH
38239: PPUSH
38240: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
38241: LD_ADDR_VAR 0 5
38245: PUSH
38246: LD_INT 0
38248: PUSH
38249: LD_INT 0
38251: PUSH
38252: LD_INT 0
38254: PUSH
38255: EMPTY
38256: PUSH
38257: EMPTY
38258: LIST
38259: LIST
38260: LIST
38261: LIST
38262: ST_TO_ADDR
// if not x or not y then
38263: LD_VAR 0 2
38267: NOT
38268: PUSH
38269: LD_VAR 0 3
38273: NOT
38274: OR
38275: IFFALSE 38279
// exit ;
38277: GO 39929
// if not range then
38279: LD_VAR 0 4
38283: NOT
38284: IFFALSE 38294
// range := 10 ;
38286: LD_ADDR_VAR 0 4
38290: PUSH
38291: LD_INT 10
38293: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38294: LD_ADDR_VAR 0 8
38298: PUSH
38299: LD_INT 81
38301: PUSH
38302: LD_VAR 0 1
38306: PUSH
38307: EMPTY
38308: LIST
38309: LIST
38310: PUSH
38311: LD_INT 92
38313: PUSH
38314: LD_VAR 0 2
38318: PUSH
38319: LD_VAR 0 3
38323: PUSH
38324: LD_VAR 0 4
38328: PUSH
38329: EMPTY
38330: LIST
38331: LIST
38332: LIST
38333: LIST
38334: PUSH
38335: LD_INT 3
38337: PUSH
38338: LD_INT 21
38340: PUSH
38341: LD_INT 3
38343: PUSH
38344: EMPTY
38345: LIST
38346: LIST
38347: PUSH
38348: EMPTY
38349: LIST
38350: LIST
38351: PUSH
38352: EMPTY
38353: LIST
38354: LIST
38355: LIST
38356: PPUSH
38357: CALL_OW 69
38361: ST_TO_ADDR
// if not tmp then
38362: LD_VAR 0 8
38366: NOT
38367: IFFALSE 38371
// exit ;
38369: GO 39929
// for i in tmp do
38371: LD_ADDR_VAR 0 6
38375: PUSH
38376: LD_VAR 0 8
38380: PUSH
38381: FOR_IN
38382: IFFALSE 39904
// begin points := [ 0 , 0 , 0 ] ;
38384: LD_ADDR_VAR 0 9
38388: PUSH
38389: LD_INT 0
38391: PUSH
38392: LD_INT 0
38394: PUSH
38395: LD_INT 0
38397: PUSH
38398: EMPTY
38399: LIST
38400: LIST
38401: LIST
38402: ST_TO_ADDR
// bpoints := 1 ;
38403: LD_ADDR_VAR 0 10
38407: PUSH
38408: LD_INT 1
38410: ST_TO_ADDR
// case GetType ( i ) of unit_human :
38411: LD_VAR 0 6
38415: PPUSH
38416: CALL_OW 247
38420: PUSH
38421: LD_INT 1
38423: DOUBLE
38424: EQUAL
38425: IFTRUE 38429
38427: GO 39007
38429: POP
// begin if GetClass ( i ) = 1 then
38430: LD_VAR 0 6
38434: PPUSH
38435: CALL_OW 257
38439: PUSH
38440: LD_INT 1
38442: EQUAL
38443: IFFALSE 38464
// points := [ 10 , 5 , 3 ] ;
38445: LD_ADDR_VAR 0 9
38449: PUSH
38450: LD_INT 10
38452: PUSH
38453: LD_INT 5
38455: PUSH
38456: LD_INT 3
38458: PUSH
38459: EMPTY
38460: LIST
38461: LIST
38462: LIST
38463: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
38464: LD_VAR 0 6
38468: PPUSH
38469: CALL_OW 257
38473: PUSH
38474: LD_INT 2
38476: PUSH
38477: LD_INT 3
38479: PUSH
38480: LD_INT 4
38482: PUSH
38483: EMPTY
38484: LIST
38485: LIST
38486: LIST
38487: IN
38488: IFFALSE 38509
// points := [ 3 , 2 , 1 ] ;
38490: LD_ADDR_VAR 0 9
38494: PUSH
38495: LD_INT 3
38497: PUSH
38498: LD_INT 2
38500: PUSH
38501: LD_INT 1
38503: PUSH
38504: EMPTY
38505: LIST
38506: LIST
38507: LIST
38508: ST_TO_ADDR
// if GetClass ( i ) = 5 then
38509: LD_VAR 0 6
38513: PPUSH
38514: CALL_OW 257
38518: PUSH
38519: LD_INT 5
38521: EQUAL
38522: IFFALSE 38543
// points := [ 130 , 5 , 2 ] ;
38524: LD_ADDR_VAR 0 9
38528: PUSH
38529: LD_INT 130
38531: PUSH
38532: LD_INT 5
38534: PUSH
38535: LD_INT 2
38537: PUSH
38538: EMPTY
38539: LIST
38540: LIST
38541: LIST
38542: ST_TO_ADDR
// if GetClass ( i ) = 8 then
38543: LD_VAR 0 6
38547: PPUSH
38548: CALL_OW 257
38552: PUSH
38553: LD_INT 8
38555: EQUAL
38556: IFFALSE 38577
// points := [ 35 , 35 , 30 ] ;
38558: LD_ADDR_VAR 0 9
38562: PUSH
38563: LD_INT 35
38565: PUSH
38566: LD_INT 35
38568: PUSH
38569: LD_INT 30
38571: PUSH
38572: EMPTY
38573: LIST
38574: LIST
38575: LIST
38576: ST_TO_ADDR
// if GetClass ( i ) = 9 then
38577: LD_VAR 0 6
38581: PPUSH
38582: CALL_OW 257
38586: PUSH
38587: LD_INT 9
38589: EQUAL
38590: IFFALSE 38611
// points := [ 20 , 55 , 40 ] ;
38592: LD_ADDR_VAR 0 9
38596: PUSH
38597: LD_INT 20
38599: PUSH
38600: LD_INT 55
38602: PUSH
38603: LD_INT 40
38605: PUSH
38606: EMPTY
38607: LIST
38608: LIST
38609: LIST
38610: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
38611: LD_VAR 0 6
38615: PPUSH
38616: CALL_OW 257
38620: PUSH
38621: LD_INT 12
38623: PUSH
38624: LD_INT 16
38626: PUSH
38627: EMPTY
38628: LIST
38629: LIST
38630: IN
38631: IFFALSE 38652
// points := [ 5 , 3 , 2 ] ;
38633: LD_ADDR_VAR 0 9
38637: PUSH
38638: LD_INT 5
38640: PUSH
38641: LD_INT 3
38643: PUSH
38644: LD_INT 2
38646: PUSH
38647: EMPTY
38648: LIST
38649: LIST
38650: LIST
38651: ST_TO_ADDR
// if GetClass ( i ) = 17 then
38652: LD_VAR 0 6
38656: PPUSH
38657: CALL_OW 257
38661: PUSH
38662: LD_INT 17
38664: EQUAL
38665: IFFALSE 38686
// points := [ 100 , 50 , 75 ] ;
38667: LD_ADDR_VAR 0 9
38671: PUSH
38672: LD_INT 100
38674: PUSH
38675: LD_INT 50
38677: PUSH
38678: LD_INT 75
38680: PUSH
38681: EMPTY
38682: LIST
38683: LIST
38684: LIST
38685: ST_TO_ADDR
// if GetClass ( i ) = 15 then
38686: LD_VAR 0 6
38690: PPUSH
38691: CALL_OW 257
38695: PUSH
38696: LD_INT 15
38698: EQUAL
38699: IFFALSE 38720
// points := [ 10 , 5 , 3 ] ;
38701: LD_ADDR_VAR 0 9
38705: PUSH
38706: LD_INT 10
38708: PUSH
38709: LD_INT 5
38711: PUSH
38712: LD_INT 3
38714: PUSH
38715: EMPTY
38716: LIST
38717: LIST
38718: LIST
38719: ST_TO_ADDR
// if GetClass ( i ) = 14 then
38720: LD_VAR 0 6
38724: PPUSH
38725: CALL_OW 257
38729: PUSH
38730: LD_INT 14
38732: EQUAL
38733: IFFALSE 38754
// points := [ 10 , 0 , 0 ] ;
38735: LD_ADDR_VAR 0 9
38739: PUSH
38740: LD_INT 10
38742: PUSH
38743: LD_INT 0
38745: PUSH
38746: LD_INT 0
38748: PUSH
38749: EMPTY
38750: LIST
38751: LIST
38752: LIST
38753: ST_TO_ADDR
// if GetClass ( i ) = 11 then
38754: LD_VAR 0 6
38758: PPUSH
38759: CALL_OW 257
38763: PUSH
38764: LD_INT 11
38766: EQUAL
38767: IFFALSE 38788
// points := [ 30 , 10 , 5 ] ;
38769: LD_ADDR_VAR 0 9
38773: PUSH
38774: LD_INT 30
38776: PUSH
38777: LD_INT 10
38779: PUSH
38780: LD_INT 5
38782: PUSH
38783: EMPTY
38784: LIST
38785: LIST
38786: LIST
38787: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
38788: LD_VAR 0 1
38792: PPUSH
38793: LD_INT 5
38795: PPUSH
38796: CALL_OW 321
38800: PUSH
38801: LD_INT 2
38803: EQUAL
38804: IFFALSE 38821
// bpoints := bpoints * 1.8 ;
38806: LD_ADDR_VAR 0 10
38810: PUSH
38811: LD_VAR 0 10
38815: PUSH
38816: LD_REAL  1.80000000000000E+0000
38819: MUL
38820: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
38821: LD_VAR 0 6
38825: PPUSH
38826: CALL_OW 257
38830: PUSH
38831: LD_INT 1
38833: PUSH
38834: LD_INT 2
38836: PUSH
38837: LD_INT 3
38839: PUSH
38840: LD_INT 4
38842: PUSH
38843: EMPTY
38844: LIST
38845: LIST
38846: LIST
38847: LIST
38848: IN
38849: PUSH
38850: LD_VAR 0 1
38854: PPUSH
38855: LD_INT 51
38857: PPUSH
38858: CALL_OW 321
38862: PUSH
38863: LD_INT 2
38865: EQUAL
38866: AND
38867: IFFALSE 38884
// bpoints := bpoints * 1.2 ;
38869: LD_ADDR_VAR 0 10
38873: PUSH
38874: LD_VAR 0 10
38878: PUSH
38879: LD_REAL  1.20000000000000E+0000
38882: MUL
38883: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
38884: LD_VAR 0 6
38888: PPUSH
38889: CALL_OW 257
38893: PUSH
38894: LD_INT 5
38896: PUSH
38897: LD_INT 7
38899: PUSH
38900: LD_INT 9
38902: PUSH
38903: EMPTY
38904: LIST
38905: LIST
38906: LIST
38907: IN
38908: PUSH
38909: LD_VAR 0 1
38913: PPUSH
38914: LD_INT 52
38916: PPUSH
38917: CALL_OW 321
38921: PUSH
38922: LD_INT 2
38924: EQUAL
38925: AND
38926: IFFALSE 38943
// bpoints := bpoints * 1.5 ;
38928: LD_ADDR_VAR 0 10
38932: PUSH
38933: LD_VAR 0 10
38937: PUSH
38938: LD_REAL  1.50000000000000E+0000
38941: MUL
38942: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
38943: LD_VAR 0 1
38947: PPUSH
38948: LD_INT 66
38950: PPUSH
38951: CALL_OW 321
38955: PUSH
38956: LD_INT 2
38958: EQUAL
38959: IFFALSE 38976
// bpoints := bpoints * 1.1 ;
38961: LD_ADDR_VAR 0 10
38965: PUSH
38966: LD_VAR 0 10
38970: PUSH
38971: LD_REAL  1.10000000000000E+0000
38974: MUL
38975: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
38976: LD_ADDR_VAR 0 10
38980: PUSH
38981: LD_VAR 0 10
38985: PUSH
38986: LD_VAR 0 6
38990: PPUSH
38991: LD_INT 1
38993: PPUSH
38994: CALL_OW 259
38998: PUSH
38999: LD_REAL  1.15000000000000E+0000
39002: MUL
39003: MUL
39004: ST_TO_ADDR
// end ; unit_vehicle :
39005: GO 39833
39007: LD_INT 2
39009: DOUBLE
39010: EQUAL
39011: IFTRUE 39015
39013: GO 39821
39015: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
39016: LD_VAR 0 6
39020: PPUSH
39021: CALL_OW 264
39025: PUSH
39026: LD_INT 2
39028: PUSH
39029: LD_INT 42
39031: PUSH
39032: LD_INT 24
39034: PUSH
39035: EMPTY
39036: LIST
39037: LIST
39038: LIST
39039: IN
39040: IFFALSE 39061
// points := [ 25 , 5 , 3 ] ;
39042: LD_ADDR_VAR 0 9
39046: PUSH
39047: LD_INT 25
39049: PUSH
39050: LD_INT 5
39052: PUSH
39053: LD_INT 3
39055: PUSH
39056: EMPTY
39057: LIST
39058: LIST
39059: LIST
39060: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
39061: LD_VAR 0 6
39065: PPUSH
39066: CALL_OW 264
39070: PUSH
39071: LD_INT 4
39073: PUSH
39074: LD_INT 43
39076: PUSH
39077: LD_INT 25
39079: PUSH
39080: EMPTY
39081: LIST
39082: LIST
39083: LIST
39084: IN
39085: IFFALSE 39106
// points := [ 40 , 15 , 5 ] ;
39087: LD_ADDR_VAR 0 9
39091: PUSH
39092: LD_INT 40
39094: PUSH
39095: LD_INT 15
39097: PUSH
39098: LD_INT 5
39100: PUSH
39101: EMPTY
39102: LIST
39103: LIST
39104: LIST
39105: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
39106: LD_VAR 0 6
39110: PPUSH
39111: CALL_OW 264
39115: PUSH
39116: LD_INT 3
39118: PUSH
39119: LD_INT 23
39121: PUSH
39122: EMPTY
39123: LIST
39124: LIST
39125: IN
39126: IFFALSE 39147
// points := [ 7 , 25 , 8 ] ;
39128: LD_ADDR_VAR 0 9
39132: PUSH
39133: LD_INT 7
39135: PUSH
39136: LD_INT 25
39138: PUSH
39139: LD_INT 8
39141: PUSH
39142: EMPTY
39143: LIST
39144: LIST
39145: LIST
39146: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
39147: LD_VAR 0 6
39151: PPUSH
39152: CALL_OW 264
39156: PUSH
39157: LD_INT 5
39159: PUSH
39160: LD_INT 27
39162: PUSH
39163: LD_INT 44
39165: PUSH
39166: EMPTY
39167: LIST
39168: LIST
39169: LIST
39170: IN
39171: IFFALSE 39192
// points := [ 14 , 50 , 16 ] ;
39173: LD_ADDR_VAR 0 9
39177: PUSH
39178: LD_INT 14
39180: PUSH
39181: LD_INT 50
39183: PUSH
39184: LD_INT 16
39186: PUSH
39187: EMPTY
39188: LIST
39189: LIST
39190: LIST
39191: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
39192: LD_VAR 0 6
39196: PPUSH
39197: CALL_OW 264
39201: PUSH
39202: LD_INT 6
39204: PUSH
39205: LD_INT 46
39207: PUSH
39208: EMPTY
39209: LIST
39210: LIST
39211: IN
39212: IFFALSE 39233
// points := [ 32 , 120 , 70 ] ;
39214: LD_ADDR_VAR 0 9
39218: PUSH
39219: LD_INT 32
39221: PUSH
39222: LD_INT 120
39224: PUSH
39225: LD_INT 70
39227: PUSH
39228: EMPTY
39229: LIST
39230: LIST
39231: LIST
39232: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
39233: LD_VAR 0 6
39237: PPUSH
39238: CALL_OW 264
39242: PUSH
39243: LD_INT 7
39245: PUSH
39246: LD_INT 28
39248: PUSH
39249: LD_INT 45
39251: PUSH
39252: LD_INT 92
39254: PUSH
39255: EMPTY
39256: LIST
39257: LIST
39258: LIST
39259: LIST
39260: IN
39261: IFFALSE 39282
// points := [ 35 , 20 , 45 ] ;
39263: LD_ADDR_VAR 0 9
39267: PUSH
39268: LD_INT 35
39270: PUSH
39271: LD_INT 20
39273: PUSH
39274: LD_INT 45
39276: PUSH
39277: EMPTY
39278: LIST
39279: LIST
39280: LIST
39281: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
39282: LD_VAR 0 6
39286: PPUSH
39287: CALL_OW 264
39291: PUSH
39292: LD_INT 47
39294: PUSH
39295: EMPTY
39296: LIST
39297: IN
39298: IFFALSE 39319
// points := [ 67 , 45 , 75 ] ;
39300: LD_ADDR_VAR 0 9
39304: PUSH
39305: LD_INT 67
39307: PUSH
39308: LD_INT 45
39310: PUSH
39311: LD_INT 75
39313: PUSH
39314: EMPTY
39315: LIST
39316: LIST
39317: LIST
39318: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
39319: LD_VAR 0 6
39323: PPUSH
39324: CALL_OW 264
39328: PUSH
39329: LD_INT 26
39331: PUSH
39332: EMPTY
39333: LIST
39334: IN
39335: IFFALSE 39356
// points := [ 120 , 30 , 80 ] ;
39337: LD_ADDR_VAR 0 9
39341: PUSH
39342: LD_INT 120
39344: PUSH
39345: LD_INT 30
39347: PUSH
39348: LD_INT 80
39350: PUSH
39351: EMPTY
39352: LIST
39353: LIST
39354: LIST
39355: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
39356: LD_VAR 0 6
39360: PPUSH
39361: CALL_OW 264
39365: PUSH
39366: LD_INT 22
39368: PUSH
39369: EMPTY
39370: LIST
39371: IN
39372: IFFALSE 39393
// points := [ 40 , 1 , 1 ] ;
39374: LD_ADDR_VAR 0 9
39378: PUSH
39379: LD_INT 40
39381: PUSH
39382: LD_INT 1
39384: PUSH
39385: LD_INT 1
39387: PUSH
39388: EMPTY
39389: LIST
39390: LIST
39391: LIST
39392: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
39393: LD_VAR 0 6
39397: PPUSH
39398: CALL_OW 264
39402: PUSH
39403: LD_INT 29
39405: PUSH
39406: EMPTY
39407: LIST
39408: IN
39409: IFFALSE 39430
// points := [ 70 , 200 , 400 ] ;
39411: LD_ADDR_VAR 0 9
39415: PUSH
39416: LD_INT 70
39418: PUSH
39419: LD_INT 200
39421: PUSH
39422: LD_INT 400
39424: PUSH
39425: EMPTY
39426: LIST
39427: LIST
39428: LIST
39429: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
39430: LD_VAR 0 6
39434: PPUSH
39435: CALL_OW 264
39439: PUSH
39440: LD_INT 14
39442: PUSH
39443: LD_INT 53
39445: PUSH
39446: EMPTY
39447: LIST
39448: LIST
39449: IN
39450: IFFALSE 39471
// points := [ 40 , 10 , 20 ] ;
39452: LD_ADDR_VAR 0 9
39456: PUSH
39457: LD_INT 40
39459: PUSH
39460: LD_INT 10
39462: PUSH
39463: LD_INT 20
39465: PUSH
39466: EMPTY
39467: LIST
39468: LIST
39469: LIST
39470: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
39471: LD_VAR 0 6
39475: PPUSH
39476: CALL_OW 264
39480: PUSH
39481: LD_INT 9
39483: PUSH
39484: EMPTY
39485: LIST
39486: IN
39487: IFFALSE 39508
// points := [ 5 , 70 , 20 ] ;
39489: LD_ADDR_VAR 0 9
39493: PUSH
39494: LD_INT 5
39496: PUSH
39497: LD_INT 70
39499: PUSH
39500: LD_INT 20
39502: PUSH
39503: EMPTY
39504: LIST
39505: LIST
39506: LIST
39507: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
39508: LD_VAR 0 6
39512: PPUSH
39513: CALL_OW 264
39517: PUSH
39518: LD_INT 10
39520: PUSH
39521: EMPTY
39522: LIST
39523: IN
39524: IFFALSE 39545
// points := [ 35 , 110 , 70 ] ;
39526: LD_ADDR_VAR 0 9
39530: PUSH
39531: LD_INT 35
39533: PUSH
39534: LD_INT 110
39536: PUSH
39537: LD_INT 70
39539: PUSH
39540: EMPTY
39541: LIST
39542: LIST
39543: LIST
39544: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
39545: LD_VAR 0 6
39549: PPUSH
39550: CALL_OW 265
39554: PUSH
39555: LD_INT 25
39557: EQUAL
39558: IFFALSE 39579
// points := [ 80 , 65 , 100 ] ;
39560: LD_ADDR_VAR 0 9
39564: PUSH
39565: LD_INT 80
39567: PUSH
39568: LD_INT 65
39570: PUSH
39571: LD_INT 100
39573: PUSH
39574: EMPTY
39575: LIST
39576: LIST
39577: LIST
39578: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
39579: LD_VAR 0 6
39583: PPUSH
39584: CALL_OW 263
39588: PUSH
39589: LD_INT 1
39591: EQUAL
39592: IFFALSE 39627
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
39594: LD_ADDR_VAR 0 10
39598: PUSH
39599: LD_VAR 0 10
39603: PUSH
39604: LD_VAR 0 6
39608: PPUSH
39609: CALL_OW 311
39613: PPUSH
39614: LD_INT 3
39616: PPUSH
39617: CALL_OW 259
39621: PUSH
39622: LD_INT 4
39624: MUL
39625: MUL
39626: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
39627: LD_VAR 0 6
39631: PPUSH
39632: CALL_OW 263
39636: PUSH
39637: LD_INT 2
39639: EQUAL
39640: IFFALSE 39691
// begin j := IsControledBy ( i ) ;
39642: LD_ADDR_VAR 0 7
39646: PUSH
39647: LD_VAR 0 6
39651: PPUSH
39652: CALL_OW 312
39656: ST_TO_ADDR
// if j then
39657: LD_VAR 0 7
39661: IFFALSE 39691
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
39663: LD_ADDR_VAR 0 10
39667: PUSH
39668: LD_VAR 0 10
39672: PUSH
39673: LD_VAR 0 7
39677: PPUSH
39678: LD_INT 3
39680: PPUSH
39681: CALL_OW 259
39685: PUSH
39686: LD_INT 3
39688: MUL
39689: MUL
39690: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
39691: LD_VAR 0 6
39695: PPUSH
39696: CALL_OW 264
39700: PUSH
39701: LD_INT 5
39703: PUSH
39704: LD_INT 6
39706: PUSH
39707: LD_INT 46
39709: PUSH
39710: LD_INT 44
39712: PUSH
39713: LD_INT 47
39715: PUSH
39716: LD_INT 45
39718: PUSH
39719: LD_INT 28
39721: PUSH
39722: LD_INT 7
39724: PUSH
39725: LD_INT 27
39727: PUSH
39728: LD_INT 29
39730: PUSH
39731: EMPTY
39732: LIST
39733: LIST
39734: LIST
39735: LIST
39736: LIST
39737: LIST
39738: LIST
39739: LIST
39740: LIST
39741: LIST
39742: IN
39743: PUSH
39744: LD_VAR 0 1
39748: PPUSH
39749: LD_INT 52
39751: PPUSH
39752: CALL_OW 321
39756: PUSH
39757: LD_INT 2
39759: EQUAL
39760: AND
39761: IFFALSE 39778
// bpoints := bpoints * 1.2 ;
39763: LD_ADDR_VAR 0 10
39767: PUSH
39768: LD_VAR 0 10
39772: PUSH
39773: LD_REAL  1.20000000000000E+0000
39776: MUL
39777: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
39778: LD_VAR 0 6
39782: PPUSH
39783: CALL_OW 264
39787: PUSH
39788: LD_INT 6
39790: PUSH
39791: LD_INT 46
39793: PUSH
39794: LD_INT 47
39796: PUSH
39797: EMPTY
39798: LIST
39799: LIST
39800: LIST
39801: IN
39802: IFFALSE 39819
// bpoints := bpoints * 1.2 ;
39804: LD_ADDR_VAR 0 10
39808: PUSH
39809: LD_VAR 0 10
39813: PUSH
39814: LD_REAL  1.20000000000000E+0000
39817: MUL
39818: ST_TO_ADDR
// end ; unit_building :
39819: GO 39833
39821: LD_INT 3
39823: DOUBLE
39824: EQUAL
39825: IFTRUE 39829
39827: GO 39832
39829: POP
// ; end ;
39830: GO 39833
39832: POP
// for j = 1 to 3 do
39833: LD_ADDR_VAR 0 7
39837: PUSH
39838: DOUBLE
39839: LD_INT 1
39841: DEC
39842: ST_TO_ADDR
39843: LD_INT 3
39845: PUSH
39846: FOR_TO
39847: IFFALSE 39900
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
39849: LD_ADDR_VAR 0 5
39853: PUSH
39854: LD_VAR 0 5
39858: PPUSH
39859: LD_VAR 0 7
39863: PPUSH
39864: LD_VAR 0 5
39868: PUSH
39869: LD_VAR 0 7
39873: ARRAY
39874: PUSH
39875: LD_VAR 0 9
39879: PUSH
39880: LD_VAR 0 7
39884: ARRAY
39885: PUSH
39886: LD_VAR 0 10
39890: MUL
39891: PLUS
39892: PPUSH
39893: CALL_OW 1
39897: ST_TO_ADDR
39898: GO 39846
39900: POP
39901: POP
// end ;
39902: GO 38381
39904: POP
39905: POP
// result := Replace ( result , 4 , tmp ) ;
39906: LD_ADDR_VAR 0 5
39910: PUSH
39911: LD_VAR 0 5
39915: PPUSH
39916: LD_INT 4
39918: PPUSH
39919: LD_VAR 0 8
39923: PPUSH
39924: CALL_OW 1
39928: ST_TO_ADDR
// end ;
39929: LD_VAR 0 5
39933: RET
// export function DangerAtRange ( unit , range ) ; begin
39934: LD_INT 0
39936: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
39937: LD_ADDR_VAR 0 3
39941: PUSH
39942: LD_VAR 0 1
39946: PPUSH
39947: CALL_OW 255
39951: PPUSH
39952: LD_VAR 0 1
39956: PPUSH
39957: CALL_OW 250
39961: PPUSH
39962: LD_VAR 0 1
39966: PPUSH
39967: CALL_OW 251
39971: PPUSH
39972: LD_VAR 0 2
39976: PPUSH
39977: CALL 38233 0 4
39981: ST_TO_ADDR
// end ;
39982: LD_VAR 0 3
39986: RET
// export function DangerInArea ( side , area ) ; begin
39987: LD_INT 0
39989: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
39990: LD_ADDR_VAR 0 3
39994: PUSH
39995: LD_VAR 0 2
39999: PPUSH
40000: LD_INT 81
40002: PUSH
40003: LD_VAR 0 1
40007: PUSH
40008: EMPTY
40009: LIST
40010: LIST
40011: PPUSH
40012: CALL_OW 70
40016: ST_TO_ADDR
// end ;
40017: LD_VAR 0 3
40021: RET
// export function IsExtension ( b ) ; begin
40022: LD_INT 0
40024: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
40025: LD_ADDR_VAR 0 2
40029: PUSH
40030: LD_VAR 0 1
40034: PUSH
40035: LD_INT 23
40037: PUSH
40038: LD_INT 20
40040: PUSH
40041: LD_INT 22
40043: PUSH
40044: LD_INT 17
40046: PUSH
40047: LD_INT 24
40049: PUSH
40050: LD_INT 21
40052: PUSH
40053: LD_INT 19
40055: PUSH
40056: LD_INT 16
40058: PUSH
40059: LD_INT 25
40061: PUSH
40062: LD_INT 18
40064: PUSH
40065: EMPTY
40066: LIST
40067: LIST
40068: LIST
40069: LIST
40070: LIST
40071: LIST
40072: LIST
40073: LIST
40074: LIST
40075: LIST
40076: IN
40077: ST_TO_ADDR
// end ;
40078: LD_VAR 0 2
40082: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
40083: LD_INT 0
40085: PPUSH
40086: PPUSH
40087: PPUSH
// result := [ ] ;
40088: LD_ADDR_VAR 0 4
40092: PUSH
40093: EMPTY
40094: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
40095: LD_ADDR_VAR 0 5
40099: PUSH
40100: LD_VAR 0 2
40104: PPUSH
40105: LD_INT 21
40107: PUSH
40108: LD_INT 3
40110: PUSH
40111: EMPTY
40112: LIST
40113: LIST
40114: PPUSH
40115: CALL_OW 70
40119: ST_TO_ADDR
// if not tmp then
40120: LD_VAR 0 5
40124: NOT
40125: IFFALSE 40129
// exit ;
40127: GO 40193
// if checkLink then
40129: LD_VAR 0 3
40133: IFFALSE 40183
// begin for i in tmp do
40135: LD_ADDR_VAR 0 6
40139: PUSH
40140: LD_VAR 0 5
40144: PUSH
40145: FOR_IN
40146: IFFALSE 40181
// if GetBase ( i ) <> base then
40148: LD_VAR 0 6
40152: PPUSH
40153: CALL_OW 274
40157: PUSH
40158: LD_VAR 0 1
40162: NONEQUAL
40163: IFFALSE 40179
// ComLinkToBase ( base , i ) ;
40165: LD_VAR 0 1
40169: PPUSH
40170: LD_VAR 0 6
40174: PPUSH
40175: CALL_OW 169
40179: GO 40145
40181: POP
40182: POP
// end ; result := tmp ;
40183: LD_ADDR_VAR 0 4
40187: PUSH
40188: LD_VAR 0 5
40192: ST_TO_ADDR
// end ;
40193: LD_VAR 0 4
40197: RET
// export function ComComplete ( units , b ) ; var i ; begin
40198: LD_INT 0
40200: PPUSH
40201: PPUSH
// if not units then
40202: LD_VAR 0 1
40206: NOT
40207: IFFALSE 40211
// exit ;
40209: GO 40301
// for i in units do
40211: LD_ADDR_VAR 0 4
40215: PUSH
40216: LD_VAR 0 1
40220: PUSH
40221: FOR_IN
40222: IFFALSE 40299
// if BuildingStatus ( b ) = bs_build then
40224: LD_VAR 0 2
40228: PPUSH
40229: CALL_OW 461
40233: PUSH
40234: LD_INT 1
40236: EQUAL
40237: IFFALSE 40297
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
40239: LD_VAR 0 4
40243: PPUSH
40244: LD_STRING h
40246: PUSH
40247: LD_VAR 0 2
40251: PPUSH
40252: CALL_OW 250
40256: PUSH
40257: LD_VAR 0 2
40261: PPUSH
40262: CALL_OW 251
40266: PUSH
40267: LD_VAR 0 2
40271: PUSH
40272: LD_INT 0
40274: PUSH
40275: LD_INT 0
40277: PUSH
40278: LD_INT 0
40280: PUSH
40281: EMPTY
40282: LIST
40283: LIST
40284: LIST
40285: LIST
40286: LIST
40287: LIST
40288: LIST
40289: PUSH
40290: EMPTY
40291: LIST
40292: PPUSH
40293: CALL_OW 446
40297: GO 40221
40299: POP
40300: POP
// end ;
40301: LD_VAR 0 3
40305: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
40306: LD_INT 0
40308: PPUSH
40309: PPUSH
40310: PPUSH
40311: PPUSH
40312: PPUSH
40313: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
40314: LD_VAR 0 1
40318: NOT
40319: PUSH
40320: LD_VAR 0 1
40324: PPUSH
40325: CALL_OW 263
40329: PUSH
40330: LD_INT 2
40332: NONEQUAL
40333: OR
40334: IFFALSE 40338
// exit ;
40336: GO 40654
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
40338: LD_ADDR_VAR 0 6
40342: PUSH
40343: LD_INT 22
40345: PUSH
40346: LD_VAR 0 1
40350: PPUSH
40351: CALL_OW 255
40355: PUSH
40356: EMPTY
40357: LIST
40358: LIST
40359: PUSH
40360: LD_INT 2
40362: PUSH
40363: LD_INT 30
40365: PUSH
40366: LD_INT 36
40368: PUSH
40369: EMPTY
40370: LIST
40371: LIST
40372: PUSH
40373: LD_INT 34
40375: PUSH
40376: LD_INT 31
40378: PUSH
40379: EMPTY
40380: LIST
40381: LIST
40382: PUSH
40383: EMPTY
40384: LIST
40385: LIST
40386: LIST
40387: PUSH
40388: EMPTY
40389: LIST
40390: LIST
40391: PPUSH
40392: CALL_OW 69
40396: ST_TO_ADDR
// if not tmp then
40397: LD_VAR 0 6
40401: NOT
40402: IFFALSE 40406
// exit ;
40404: GO 40654
// result := [ ] ;
40406: LD_ADDR_VAR 0 2
40410: PUSH
40411: EMPTY
40412: ST_TO_ADDR
// for i in tmp do
40413: LD_ADDR_VAR 0 3
40417: PUSH
40418: LD_VAR 0 6
40422: PUSH
40423: FOR_IN
40424: IFFALSE 40495
// begin t := UnitsInside ( i ) ;
40426: LD_ADDR_VAR 0 4
40430: PUSH
40431: LD_VAR 0 3
40435: PPUSH
40436: CALL_OW 313
40440: ST_TO_ADDR
// if t then
40441: LD_VAR 0 4
40445: IFFALSE 40493
// for j in t do
40447: LD_ADDR_VAR 0 7
40451: PUSH
40452: LD_VAR 0 4
40456: PUSH
40457: FOR_IN
40458: IFFALSE 40491
// result := Replace ( result , result + 1 , j ) ;
40460: LD_ADDR_VAR 0 2
40464: PUSH
40465: LD_VAR 0 2
40469: PPUSH
40470: LD_VAR 0 2
40474: PUSH
40475: LD_INT 1
40477: PLUS
40478: PPUSH
40479: LD_VAR 0 7
40483: PPUSH
40484: CALL_OW 1
40488: ST_TO_ADDR
40489: GO 40457
40491: POP
40492: POP
// end ;
40493: GO 40423
40495: POP
40496: POP
// if not result then
40497: LD_VAR 0 2
40501: NOT
40502: IFFALSE 40506
// exit ;
40504: GO 40654
// mech := result [ 1 ] ;
40506: LD_ADDR_VAR 0 5
40510: PUSH
40511: LD_VAR 0 2
40515: PUSH
40516: LD_INT 1
40518: ARRAY
40519: ST_TO_ADDR
// if result > 1 then
40520: LD_VAR 0 2
40524: PUSH
40525: LD_INT 1
40527: GREATER
40528: IFFALSE 40640
// begin for i = 2 to result do
40530: LD_ADDR_VAR 0 3
40534: PUSH
40535: DOUBLE
40536: LD_INT 2
40538: DEC
40539: ST_TO_ADDR
40540: LD_VAR 0 2
40544: PUSH
40545: FOR_TO
40546: IFFALSE 40638
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
40548: LD_ADDR_VAR 0 4
40552: PUSH
40553: LD_VAR 0 2
40557: PUSH
40558: LD_VAR 0 3
40562: ARRAY
40563: PPUSH
40564: LD_INT 3
40566: PPUSH
40567: CALL_OW 259
40571: PUSH
40572: LD_VAR 0 2
40576: PUSH
40577: LD_VAR 0 3
40581: ARRAY
40582: PPUSH
40583: CALL_OW 432
40587: MINUS
40588: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
40589: LD_VAR 0 4
40593: PUSH
40594: LD_VAR 0 5
40598: PPUSH
40599: LD_INT 3
40601: PPUSH
40602: CALL_OW 259
40606: PUSH
40607: LD_VAR 0 5
40611: PPUSH
40612: CALL_OW 432
40616: MINUS
40617: GREATEREQUAL
40618: IFFALSE 40636
// mech := result [ i ] ;
40620: LD_ADDR_VAR 0 5
40624: PUSH
40625: LD_VAR 0 2
40629: PUSH
40630: LD_VAR 0 3
40634: ARRAY
40635: ST_TO_ADDR
// end ;
40636: GO 40545
40638: POP
40639: POP
// end ; ComLinkTo ( vehicle , mech ) ;
40640: LD_VAR 0 1
40644: PPUSH
40645: LD_VAR 0 5
40649: PPUSH
40650: CALL_OW 135
// end ;
40654: LD_VAR 0 2
40658: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
40659: LD_INT 0
40661: PPUSH
40662: PPUSH
40663: PPUSH
40664: PPUSH
40665: PPUSH
40666: PPUSH
40667: PPUSH
40668: PPUSH
40669: PPUSH
40670: PPUSH
40671: PPUSH
40672: PPUSH
40673: PPUSH
// result := [ ] ;
40674: LD_ADDR_VAR 0 7
40678: PUSH
40679: EMPTY
40680: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
40681: LD_VAR 0 1
40685: PPUSH
40686: CALL_OW 266
40690: PUSH
40691: LD_INT 0
40693: PUSH
40694: LD_INT 1
40696: PUSH
40697: EMPTY
40698: LIST
40699: LIST
40700: IN
40701: NOT
40702: IFFALSE 40706
// exit ;
40704: GO 42340
// if name then
40706: LD_VAR 0 3
40710: IFFALSE 40726
// SetBName ( base_dep , name ) ;
40712: LD_VAR 0 1
40716: PPUSH
40717: LD_VAR 0 3
40721: PPUSH
40722: CALL_OW 500
// base := GetBase ( base_dep ) ;
40726: LD_ADDR_VAR 0 15
40730: PUSH
40731: LD_VAR 0 1
40735: PPUSH
40736: CALL_OW 274
40740: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
40741: LD_ADDR_VAR 0 16
40745: PUSH
40746: LD_VAR 0 1
40750: PPUSH
40751: CALL_OW 255
40755: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
40756: LD_ADDR_VAR 0 17
40760: PUSH
40761: LD_VAR 0 1
40765: PPUSH
40766: CALL_OW 248
40770: ST_TO_ADDR
// if sources then
40771: LD_VAR 0 5
40775: IFFALSE 40822
// for i = 1 to 3 do
40777: LD_ADDR_VAR 0 8
40781: PUSH
40782: DOUBLE
40783: LD_INT 1
40785: DEC
40786: ST_TO_ADDR
40787: LD_INT 3
40789: PUSH
40790: FOR_TO
40791: IFFALSE 40820
// AddResourceType ( base , i , sources [ i ] ) ;
40793: LD_VAR 0 15
40797: PPUSH
40798: LD_VAR 0 8
40802: PPUSH
40803: LD_VAR 0 5
40807: PUSH
40808: LD_VAR 0 8
40812: ARRAY
40813: PPUSH
40814: CALL_OW 276
40818: GO 40790
40820: POP
40821: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
40822: LD_ADDR_VAR 0 18
40826: PUSH
40827: LD_VAR 0 15
40831: PPUSH
40832: LD_VAR 0 2
40836: PPUSH
40837: LD_INT 1
40839: PPUSH
40840: CALL 40083 0 3
40844: ST_TO_ADDR
// InitHc ;
40845: CALL_OW 19
// InitUc ;
40849: CALL_OW 18
// uc_side := side ;
40853: LD_ADDR_OWVAR 20
40857: PUSH
40858: LD_VAR 0 16
40862: ST_TO_ADDR
// uc_nation := nation ;
40863: LD_ADDR_OWVAR 21
40867: PUSH
40868: LD_VAR 0 17
40872: ST_TO_ADDR
// if buildings then
40873: LD_VAR 0 18
40877: IFFALSE 42199
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
40879: LD_ADDR_VAR 0 19
40883: PUSH
40884: LD_VAR 0 18
40888: PPUSH
40889: LD_INT 2
40891: PUSH
40892: LD_INT 30
40894: PUSH
40895: LD_INT 29
40897: PUSH
40898: EMPTY
40899: LIST
40900: LIST
40901: PUSH
40902: LD_INT 30
40904: PUSH
40905: LD_INT 30
40907: PUSH
40908: EMPTY
40909: LIST
40910: LIST
40911: PUSH
40912: EMPTY
40913: LIST
40914: LIST
40915: LIST
40916: PPUSH
40917: CALL_OW 72
40921: ST_TO_ADDR
// if tmp then
40922: LD_VAR 0 19
40926: IFFALSE 40974
// for i in tmp do
40928: LD_ADDR_VAR 0 8
40932: PUSH
40933: LD_VAR 0 19
40937: PUSH
40938: FOR_IN
40939: IFFALSE 40972
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
40941: LD_VAR 0 8
40945: PPUSH
40946: CALL_OW 250
40950: PPUSH
40951: LD_VAR 0 8
40955: PPUSH
40956: CALL_OW 251
40960: PPUSH
40961: LD_VAR 0 16
40965: PPUSH
40966: CALL_OW 441
40970: GO 40938
40972: POP
40973: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
40974: LD_VAR 0 18
40978: PPUSH
40979: LD_INT 2
40981: PUSH
40982: LD_INT 30
40984: PUSH
40985: LD_INT 32
40987: PUSH
40988: EMPTY
40989: LIST
40990: LIST
40991: PUSH
40992: LD_INT 30
40994: PUSH
40995: LD_INT 33
40997: PUSH
40998: EMPTY
40999: LIST
41000: LIST
41001: PUSH
41002: EMPTY
41003: LIST
41004: LIST
41005: LIST
41006: PPUSH
41007: CALL_OW 72
41011: IFFALSE 41099
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
41013: LD_ADDR_VAR 0 8
41017: PUSH
41018: LD_VAR 0 18
41022: PPUSH
41023: LD_INT 2
41025: PUSH
41026: LD_INT 30
41028: PUSH
41029: LD_INT 32
41031: PUSH
41032: EMPTY
41033: LIST
41034: LIST
41035: PUSH
41036: LD_INT 30
41038: PUSH
41039: LD_INT 33
41041: PUSH
41042: EMPTY
41043: LIST
41044: LIST
41045: PUSH
41046: EMPTY
41047: LIST
41048: LIST
41049: LIST
41050: PPUSH
41051: CALL_OW 72
41055: PUSH
41056: FOR_IN
41057: IFFALSE 41097
// begin if not GetBWeapon ( i ) then
41059: LD_VAR 0 8
41063: PPUSH
41064: CALL_OW 269
41068: NOT
41069: IFFALSE 41095
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
41071: LD_VAR 0 8
41075: PPUSH
41076: LD_VAR 0 8
41080: PPUSH
41081: LD_VAR 0 2
41085: PPUSH
41086: CALL 42345 0 2
41090: PPUSH
41091: CALL_OW 431
// end ;
41095: GO 41056
41097: POP
41098: POP
// end ; for i = 1 to personel do
41099: LD_ADDR_VAR 0 8
41103: PUSH
41104: DOUBLE
41105: LD_INT 1
41107: DEC
41108: ST_TO_ADDR
41109: LD_VAR 0 6
41113: PUSH
41114: FOR_TO
41115: IFFALSE 42179
// begin if i > 4 then
41117: LD_VAR 0 8
41121: PUSH
41122: LD_INT 4
41124: GREATER
41125: IFFALSE 41129
// break ;
41127: GO 42179
// case i of 1 :
41129: LD_VAR 0 8
41133: PUSH
41134: LD_INT 1
41136: DOUBLE
41137: EQUAL
41138: IFTRUE 41142
41140: GO 41222
41142: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
41143: LD_ADDR_VAR 0 12
41147: PUSH
41148: LD_VAR 0 18
41152: PPUSH
41153: LD_INT 22
41155: PUSH
41156: LD_VAR 0 16
41160: PUSH
41161: EMPTY
41162: LIST
41163: LIST
41164: PUSH
41165: LD_INT 58
41167: PUSH
41168: EMPTY
41169: LIST
41170: PUSH
41171: LD_INT 2
41173: PUSH
41174: LD_INT 30
41176: PUSH
41177: LD_INT 32
41179: PUSH
41180: EMPTY
41181: LIST
41182: LIST
41183: PUSH
41184: LD_INT 30
41186: PUSH
41187: LD_INT 4
41189: PUSH
41190: EMPTY
41191: LIST
41192: LIST
41193: PUSH
41194: LD_INT 30
41196: PUSH
41197: LD_INT 5
41199: PUSH
41200: EMPTY
41201: LIST
41202: LIST
41203: PUSH
41204: EMPTY
41205: LIST
41206: LIST
41207: LIST
41208: LIST
41209: PUSH
41210: EMPTY
41211: LIST
41212: LIST
41213: LIST
41214: PPUSH
41215: CALL_OW 72
41219: ST_TO_ADDR
41220: GO 41444
41222: LD_INT 2
41224: DOUBLE
41225: EQUAL
41226: IFTRUE 41230
41228: GO 41292
41230: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
41231: LD_ADDR_VAR 0 12
41235: PUSH
41236: LD_VAR 0 18
41240: PPUSH
41241: LD_INT 22
41243: PUSH
41244: LD_VAR 0 16
41248: PUSH
41249: EMPTY
41250: LIST
41251: LIST
41252: PUSH
41253: LD_INT 2
41255: PUSH
41256: LD_INT 30
41258: PUSH
41259: LD_INT 0
41261: PUSH
41262: EMPTY
41263: LIST
41264: LIST
41265: PUSH
41266: LD_INT 30
41268: PUSH
41269: LD_INT 1
41271: PUSH
41272: EMPTY
41273: LIST
41274: LIST
41275: PUSH
41276: EMPTY
41277: LIST
41278: LIST
41279: LIST
41280: PUSH
41281: EMPTY
41282: LIST
41283: LIST
41284: PPUSH
41285: CALL_OW 72
41289: ST_TO_ADDR
41290: GO 41444
41292: LD_INT 3
41294: DOUBLE
41295: EQUAL
41296: IFTRUE 41300
41298: GO 41362
41300: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
41301: LD_ADDR_VAR 0 12
41305: PUSH
41306: LD_VAR 0 18
41310: PPUSH
41311: LD_INT 22
41313: PUSH
41314: LD_VAR 0 16
41318: PUSH
41319: EMPTY
41320: LIST
41321: LIST
41322: PUSH
41323: LD_INT 2
41325: PUSH
41326: LD_INT 30
41328: PUSH
41329: LD_INT 2
41331: PUSH
41332: EMPTY
41333: LIST
41334: LIST
41335: PUSH
41336: LD_INT 30
41338: PUSH
41339: LD_INT 3
41341: PUSH
41342: EMPTY
41343: LIST
41344: LIST
41345: PUSH
41346: EMPTY
41347: LIST
41348: LIST
41349: LIST
41350: PUSH
41351: EMPTY
41352: LIST
41353: LIST
41354: PPUSH
41355: CALL_OW 72
41359: ST_TO_ADDR
41360: GO 41444
41362: LD_INT 4
41364: DOUBLE
41365: EQUAL
41366: IFTRUE 41370
41368: GO 41443
41370: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
41371: LD_ADDR_VAR 0 12
41375: PUSH
41376: LD_VAR 0 18
41380: PPUSH
41381: LD_INT 22
41383: PUSH
41384: LD_VAR 0 16
41388: PUSH
41389: EMPTY
41390: LIST
41391: LIST
41392: PUSH
41393: LD_INT 2
41395: PUSH
41396: LD_INT 30
41398: PUSH
41399: LD_INT 6
41401: PUSH
41402: EMPTY
41403: LIST
41404: LIST
41405: PUSH
41406: LD_INT 30
41408: PUSH
41409: LD_INT 7
41411: PUSH
41412: EMPTY
41413: LIST
41414: LIST
41415: PUSH
41416: LD_INT 30
41418: PUSH
41419: LD_INT 8
41421: PUSH
41422: EMPTY
41423: LIST
41424: LIST
41425: PUSH
41426: EMPTY
41427: LIST
41428: LIST
41429: LIST
41430: LIST
41431: PUSH
41432: EMPTY
41433: LIST
41434: LIST
41435: PPUSH
41436: CALL_OW 72
41440: ST_TO_ADDR
41441: GO 41444
41443: POP
// if i = 1 then
41444: LD_VAR 0 8
41448: PUSH
41449: LD_INT 1
41451: EQUAL
41452: IFFALSE 41563
// begin tmp := [ ] ;
41454: LD_ADDR_VAR 0 19
41458: PUSH
41459: EMPTY
41460: ST_TO_ADDR
// for j in f do
41461: LD_ADDR_VAR 0 9
41465: PUSH
41466: LD_VAR 0 12
41470: PUSH
41471: FOR_IN
41472: IFFALSE 41545
// if GetBType ( j ) = b_bunker then
41474: LD_VAR 0 9
41478: PPUSH
41479: CALL_OW 266
41483: PUSH
41484: LD_INT 32
41486: EQUAL
41487: IFFALSE 41514
// tmp := Insert ( tmp , 1 , j ) else
41489: LD_ADDR_VAR 0 19
41493: PUSH
41494: LD_VAR 0 19
41498: PPUSH
41499: LD_INT 1
41501: PPUSH
41502: LD_VAR 0 9
41506: PPUSH
41507: CALL_OW 2
41511: ST_TO_ADDR
41512: GO 41543
// tmp := Insert ( tmp , tmp + 1 , j ) ;
41514: LD_ADDR_VAR 0 19
41518: PUSH
41519: LD_VAR 0 19
41523: PPUSH
41524: LD_VAR 0 19
41528: PUSH
41529: LD_INT 1
41531: PLUS
41532: PPUSH
41533: LD_VAR 0 9
41537: PPUSH
41538: CALL_OW 2
41542: ST_TO_ADDR
41543: GO 41471
41545: POP
41546: POP
// if tmp then
41547: LD_VAR 0 19
41551: IFFALSE 41563
// f := tmp ;
41553: LD_ADDR_VAR 0 12
41557: PUSH
41558: LD_VAR 0 19
41562: ST_TO_ADDR
// end ; x := personel [ i ] ;
41563: LD_ADDR_VAR 0 13
41567: PUSH
41568: LD_VAR 0 6
41572: PUSH
41573: LD_VAR 0 8
41577: ARRAY
41578: ST_TO_ADDR
// if x = - 1 then
41579: LD_VAR 0 13
41583: PUSH
41584: LD_INT 1
41586: NEG
41587: EQUAL
41588: IFFALSE 41797
// begin for j in f do
41590: LD_ADDR_VAR 0 9
41594: PUSH
41595: LD_VAR 0 12
41599: PUSH
41600: FOR_IN
41601: IFFALSE 41793
// repeat InitHc ;
41603: CALL_OW 19
// if GetBType ( j ) = b_barracks then
41607: LD_VAR 0 9
41611: PPUSH
41612: CALL_OW 266
41616: PUSH
41617: LD_INT 5
41619: EQUAL
41620: IFFALSE 41690
// begin if UnitsInside ( j ) < 3 then
41622: LD_VAR 0 9
41626: PPUSH
41627: CALL_OW 313
41631: PUSH
41632: LD_INT 3
41634: LESS
41635: IFFALSE 41671
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
41637: LD_INT 0
41639: PPUSH
41640: LD_INT 5
41642: PUSH
41643: LD_INT 8
41645: PUSH
41646: LD_INT 9
41648: PUSH
41649: EMPTY
41650: LIST
41651: LIST
41652: LIST
41653: PUSH
41654: LD_VAR 0 17
41658: ARRAY
41659: PPUSH
41660: LD_VAR 0 4
41664: PPUSH
41665: CALL_OW 380
41669: GO 41688
// PrepareHuman ( false , i , skill ) ;
41671: LD_INT 0
41673: PPUSH
41674: LD_VAR 0 8
41678: PPUSH
41679: LD_VAR 0 4
41683: PPUSH
41684: CALL_OW 380
// end else
41688: GO 41707
// PrepareHuman ( false , i , skill ) ;
41690: LD_INT 0
41692: PPUSH
41693: LD_VAR 0 8
41697: PPUSH
41698: LD_VAR 0 4
41702: PPUSH
41703: CALL_OW 380
// un := CreateHuman ;
41707: LD_ADDR_VAR 0 14
41711: PUSH
41712: CALL_OW 44
41716: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41717: LD_ADDR_VAR 0 7
41721: PUSH
41722: LD_VAR 0 7
41726: PPUSH
41727: LD_INT 1
41729: PPUSH
41730: LD_VAR 0 14
41734: PPUSH
41735: CALL_OW 2
41739: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
41740: LD_VAR 0 14
41744: PPUSH
41745: LD_VAR 0 9
41749: PPUSH
41750: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
41754: LD_VAR 0 9
41758: PPUSH
41759: CALL_OW 313
41763: PUSH
41764: LD_INT 6
41766: EQUAL
41767: PUSH
41768: LD_VAR 0 9
41772: PPUSH
41773: CALL_OW 266
41777: PUSH
41778: LD_INT 32
41780: PUSH
41781: LD_INT 31
41783: PUSH
41784: EMPTY
41785: LIST
41786: LIST
41787: IN
41788: OR
41789: IFFALSE 41603
41791: GO 41600
41793: POP
41794: POP
// end else
41795: GO 42177
// for j = 1 to x do
41797: LD_ADDR_VAR 0 9
41801: PUSH
41802: DOUBLE
41803: LD_INT 1
41805: DEC
41806: ST_TO_ADDR
41807: LD_VAR 0 13
41811: PUSH
41812: FOR_TO
41813: IFFALSE 42175
// begin InitHc ;
41815: CALL_OW 19
// if not f then
41819: LD_VAR 0 12
41823: NOT
41824: IFFALSE 41913
// begin PrepareHuman ( false , i , skill ) ;
41826: LD_INT 0
41828: PPUSH
41829: LD_VAR 0 8
41833: PPUSH
41834: LD_VAR 0 4
41838: PPUSH
41839: CALL_OW 380
// un := CreateHuman ;
41843: LD_ADDR_VAR 0 14
41847: PUSH
41848: CALL_OW 44
41852: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41853: LD_ADDR_VAR 0 7
41857: PUSH
41858: LD_VAR 0 7
41862: PPUSH
41863: LD_INT 1
41865: PPUSH
41866: LD_VAR 0 14
41870: PPUSH
41871: CALL_OW 2
41875: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
41876: LD_VAR 0 14
41880: PPUSH
41881: LD_VAR 0 1
41885: PPUSH
41886: CALL_OW 250
41890: PPUSH
41891: LD_VAR 0 1
41895: PPUSH
41896: CALL_OW 251
41900: PPUSH
41901: LD_INT 10
41903: PPUSH
41904: LD_INT 0
41906: PPUSH
41907: CALL_OW 50
// continue ;
41911: GO 41812
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
41913: LD_VAR 0 12
41917: PUSH
41918: LD_INT 1
41920: ARRAY
41921: PPUSH
41922: CALL_OW 313
41926: PUSH
41927: LD_VAR 0 12
41931: PUSH
41932: LD_INT 1
41934: ARRAY
41935: PPUSH
41936: CALL_OW 266
41940: PUSH
41941: LD_INT 32
41943: PUSH
41944: LD_INT 31
41946: PUSH
41947: EMPTY
41948: LIST
41949: LIST
41950: IN
41951: AND
41952: PUSH
41953: LD_VAR 0 12
41957: PUSH
41958: LD_INT 1
41960: ARRAY
41961: PPUSH
41962: CALL_OW 313
41966: PUSH
41967: LD_INT 6
41969: EQUAL
41970: OR
41971: IFFALSE 41991
// f := Delete ( f , 1 ) ;
41973: LD_ADDR_VAR 0 12
41977: PUSH
41978: LD_VAR 0 12
41982: PPUSH
41983: LD_INT 1
41985: PPUSH
41986: CALL_OW 3
41990: ST_TO_ADDR
// if not f then
41991: LD_VAR 0 12
41995: NOT
41996: IFFALSE 42014
// begin x := x + 2 ;
41998: LD_ADDR_VAR 0 13
42002: PUSH
42003: LD_VAR 0 13
42007: PUSH
42008: LD_INT 2
42010: PLUS
42011: ST_TO_ADDR
// continue ;
42012: GO 41812
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
42014: LD_VAR 0 12
42018: PUSH
42019: LD_INT 1
42021: ARRAY
42022: PPUSH
42023: CALL_OW 266
42027: PUSH
42028: LD_INT 5
42030: EQUAL
42031: IFFALSE 42105
// begin if UnitsInside ( f [ 1 ] ) < 3 then
42033: LD_VAR 0 12
42037: PUSH
42038: LD_INT 1
42040: ARRAY
42041: PPUSH
42042: CALL_OW 313
42046: PUSH
42047: LD_INT 3
42049: LESS
42050: IFFALSE 42086
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
42052: LD_INT 0
42054: PPUSH
42055: LD_INT 5
42057: PUSH
42058: LD_INT 8
42060: PUSH
42061: LD_INT 9
42063: PUSH
42064: EMPTY
42065: LIST
42066: LIST
42067: LIST
42068: PUSH
42069: LD_VAR 0 17
42073: ARRAY
42074: PPUSH
42075: LD_VAR 0 4
42079: PPUSH
42080: CALL_OW 380
42084: GO 42103
// PrepareHuman ( false , i , skill ) ;
42086: LD_INT 0
42088: PPUSH
42089: LD_VAR 0 8
42093: PPUSH
42094: LD_VAR 0 4
42098: PPUSH
42099: CALL_OW 380
// end else
42103: GO 42122
// PrepareHuman ( false , i , skill ) ;
42105: LD_INT 0
42107: PPUSH
42108: LD_VAR 0 8
42112: PPUSH
42113: LD_VAR 0 4
42117: PPUSH
42118: CALL_OW 380
// un := CreateHuman ;
42122: LD_ADDR_VAR 0 14
42126: PUSH
42127: CALL_OW 44
42131: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
42132: LD_ADDR_VAR 0 7
42136: PUSH
42137: LD_VAR 0 7
42141: PPUSH
42142: LD_INT 1
42144: PPUSH
42145: LD_VAR 0 14
42149: PPUSH
42150: CALL_OW 2
42154: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
42155: LD_VAR 0 14
42159: PPUSH
42160: LD_VAR 0 12
42164: PUSH
42165: LD_INT 1
42167: ARRAY
42168: PPUSH
42169: CALL_OW 52
// end ;
42173: GO 41812
42175: POP
42176: POP
// end ;
42177: GO 41114
42179: POP
42180: POP
// result := result ^ buildings ;
42181: LD_ADDR_VAR 0 7
42185: PUSH
42186: LD_VAR 0 7
42190: PUSH
42191: LD_VAR 0 18
42195: ADD
42196: ST_TO_ADDR
// end else
42197: GO 42340
// begin for i = 1 to personel do
42199: LD_ADDR_VAR 0 8
42203: PUSH
42204: DOUBLE
42205: LD_INT 1
42207: DEC
42208: ST_TO_ADDR
42209: LD_VAR 0 6
42213: PUSH
42214: FOR_TO
42215: IFFALSE 42338
// begin if i > 4 then
42217: LD_VAR 0 8
42221: PUSH
42222: LD_INT 4
42224: GREATER
42225: IFFALSE 42229
// break ;
42227: GO 42338
// x := personel [ i ] ;
42229: LD_ADDR_VAR 0 13
42233: PUSH
42234: LD_VAR 0 6
42238: PUSH
42239: LD_VAR 0 8
42243: ARRAY
42244: ST_TO_ADDR
// if x = - 1 then
42245: LD_VAR 0 13
42249: PUSH
42250: LD_INT 1
42252: NEG
42253: EQUAL
42254: IFFALSE 42258
// continue ;
42256: GO 42214
// PrepareHuman ( false , i , skill ) ;
42258: LD_INT 0
42260: PPUSH
42261: LD_VAR 0 8
42265: PPUSH
42266: LD_VAR 0 4
42270: PPUSH
42271: CALL_OW 380
// un := CreateHuman ;
42275: LD_ADDR_VAR 0 14
42279: PUSH
42280: CALL_OW 44
42284: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
42285: LD_VAR 0 14
42289: PPUSH
42290: LD_VAR 0 1
42294: PPUSH
42295: CALL_OW 250
42299: PPUSH
42300: LD_VAR 0 1
42304: PPUSH
42305: CALL_OW 251
42309: PPUSH
42310: LD_INT 10
42312: PPUSH
42313: LD_INT 0
42315: PPUSH
42316: CALL_OW 50
// result := result ^ un ;
42320: LD_ADDR_VAR 0 7
42324: PUSH
42325: LD_VAR 0 7
42329: PUSH
42330: LD_VAR 0 14
42334: ADD
42335: ST_TO_ADDR
// end ;
42336: GO 42214
42338: POP
42339: POP
// end ; end ;
42340: LD_VAR 0 7
42344: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
42345: LD_INT 0
42347: PPUSH
42348: PPUSH
42349: PPUSH
42350: PPUSH
42351: PPUSH
42352: PPUSH
42353: PPUSH
42354: PPUSH
42355: PPUSH
42356: PPUSH
42357: PPUSH
42358: PPUSH
42359: PPUSH
42360: PPUSH
42361: PPUSH
42362: PPUSH
// result := false ;
42363: LD_ADDR_VAR 0 3
42367: PUSH
42368: LD_INT 0
42370: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
42371: LD_VAR 0 1
42375: NOT
42376: PUSH
42377: LD_VAR 0 1
42381: PPUSH
42382: CALL_OW 266
42386: PUSH
42387: LD_INT 32
42389: PUSH
42390: LD_INT 33
42392: PUSH
42393: EMPTY
42394: LIST
42395: LIST
42396: IN
42397: NOT
42398: OR
42399: IFFALSE 42403
// exit ;
42401: GO 43512
// nat := GetNation ( tower ) ;
42403: LD_ADDR_VAR 0 12
42407: PUSH
42408: LD_VAR 0 1
42412: PPUSH
42413: CALL_OW 248
42417: ST_TO_ADDR
// side := GetSide ( tower ) ;
42418: LD_ADDR_VAR 0 16
42422: PUSH
42423: LD_VAR 0 1
42427: PPUSH
42428: CALL_OW 255
42432: ST_TO_ADDR
// x := GetX ( tower ) ;
42433: LD_ADDR_VAR 0 10
42437: PUSH
42438: LD_VAR 0 1
42442: PPUSH
42443: CALL_OW 250
42447: ST_TO_ADDR
// y := GetY ( tower ) ;
42448: LD_ADDR_VAR 0 11
42452: PUSH
42453: LD_VAR 0 1
42457: PPUSH
42458: CALL_OW 251
42462: ST_TO_ADDR
// if not x or not y then
42463: LD_VAR 0 10
42467: NOT
42468: PUSH
42469: LD_VAR 0 11
42473: NOT
42474: OR
42475: IFFALSE 42479
// exit ;
42477: GO 43512
// weapon := 0 ;
42479: LD_ADDR_VAR 0 18
42483: PUSH
42484: LD_INT 0
42486: ST_TO_ADDR
// fac_list := [ ] ;
42487: LD_ADDR_VAR 0 17
42491: PUSH
42492: EMPTY
42493: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
42494: LD_ADDR_VAR 0 6
42498: PUSH
42499: LD_VAR 0 1
42503: PPUSH
42504: CALL_OW 274
42508: PPUSH
42509: LD_VAR 0 2
42513: PPUSH
42514: LD_INT 0
42516: PPUSH
42517: CALL 40083 0 3
42521: PPUSH
42522: LD_INT 30
42524: PUSH
42525: LD_INT 3
42527: PUSH
42528: EMPTY
42529: LIST
42530: LIST
42531: PPUSH
42532: CALL_OW 72
42536: ST_TO_ADDR
// if not factories then
42537: LD_VAR 0 6
42541: NOT
42542: IFFALSE 42546
// exit ;
42544: GO 43512
// for i in factories do
42546: LD_ADDR_VAR 0 8
42550: PUSH
42551: LD_VAR 0 6
42555: PUSH
42556: FOR_IN
42557: IFFALSE 42582
// fac_list := fac_list union AvailableWeaponList ( i ) ;
42559: LD_ADDR_VAR 0 17
42563: PUSH
42564: LD_VAR 0 17
42568: PUSH
42569: LD_VAR 0 8
42573: PPUSH
42574: CALL_OW 478
42578: UNION
42579: ST_TO_ADDR
42580: GO 42556
42582: POP
42583: POP
// if not fac_list then
42584: LD_VAR 0 17
42588: NOT
42589: IFFALSE 42593
// exit ;
42591: GO 43512
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
42593: LD_ADDR_VAR 0 5
42597: PUSH
42598: LD_INT 4
42600: PUSH
42601: LD_INT 5
42603: PUSH
42604: LD_INT 9
42606: PUSH
42607: LD_INT 10
42609: PUSH
42610: LD_INT 6
42612: PUSH
42613: LD_INT 7
42615: PUSH
42616: LD_INT 11
42618: PUSH
42619: EMPTY
42620: LIST
42621: LIST
42622: LIST
42623: LIST
42624: LIST
42625: LIST
42626: LIST
42627: PUSH
42628: LD_INT 27
42630: PUSH
42631: LD_INT 28
42633: PUSH
42634: LD_INT 26
42636: PUSH
42637: LD_INT 30
42639: PUSH
42640: EMPTY
42641: LIST
42642: LIST
42643: LIST
42644: LIST
42645: PUSH
42646: LD_INT 43
42648: PUSH
42649: LD_INT 44
42651: PUSH
42652: LD_INT 46
42654: PUSH
42655: LD_INT 45
42657: PUSH
42658: LD_INT 47
42660: PUSH
42661: LD_INT 49
42663: PUSH
42664: EMPTY
42665: LIST
42666: LIST
42667: LIST
42668: LIST
42669: LIST
42670: LIST
42671: PUSH
42672: EMPTY
42673: LIST
42674: LIST
42675: LIST
42676: PUSH
42677: LD_VAR 0 12
42681: ARRAY
42682: ST_TO_ADDR
// list := list isect fac_list ;
42683: LD_ADDR_VAR 0 5
42687: PUSH
42688: LD_VAR 0 5
42692: PUSH
42693: LD_VAR 0 17
42697: ISECT
42698: ST_TO_ADDR
// if not list then
42699: LD_VAR 0 5
42703: NOT
42704: IFFALSE 42708
// exit ;
42706: GO 43512
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
42708: LD_VAR 0 12
42712: PUSH
42713: LD_INT 3
42715: EQUAL
42716: PUSH
42717: LD_INT 49
42719: PUSH
42720: LD_VAR 0 5
42724: IN
42725: AND
42726: PUSH
42727: LD_INT 31
42729: PPUSH
42730: LD_VAR 0 16
42734: PPUSH
42735: CALL_OW 321
42739: PUSH
42740: LD_INT 2
42742: EQUAL
42743: AND
42744: IFFALSE 42804
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
42746: LD_INT 22
42748: PUSH
42749: LD_VAR 0 16
42753: PUSH
42754: EMPTY
42755: LIST
42756: LIST
42757: PUSH
42758: LD_INT 35
42760: PUSH
42761: LD_INT 49
42763: PUSH
42764: EMPTY
42765: LIST
42766: LIST
42767: PUSH
42768: LD_INT 91
42770: PUSH
42771: LD_VAR 0 1
42775: PUSH
42776: LD_INT 10
42778: PUSH
42779: EMPTY
42780: LIST
42781: LIST
42782: LIST
42783: PUSH
42784: EMPTY
42785: LIST
42786: LIST
42787: LIST
42788: PPUSH
42789: CALL_OW 69
42793: NOT
42794: IFFALSE 42804
// weapon := ru_time_lapser ;
42796: LD_ADDR_VAR 0 18
42800: PUSH
42801: LD_INT 49
42803: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
42804: LD_VAR 0 12
42808: PUSH
42809: LD_INT 1
42811: PUSH
42812: LD_INT 2
42814: PUSH
42815: EMPTY
42816: LIST
42817: LIST
42818: IN
42819: PUSH
42820: LD_INT 11
42822: PUSH
42823: LD_VAR 0 5
42827: IN
42828: PUSH
42829: LD_INT 30
42831: PUSH
42832: LD_VAR 0 5
42836: IN
42837: OR
42838: AND
42839: PUSH
42840: LD_INT 6
42842: PPUSH
42843: LD_VAR 0 16
42847: PPUSH
42848: CALL_OW 321
42852: PUSH
42853: LD_INT 2
42855: EQUAL
42856: AND
42857: IFFALSE 43022
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
42859: LD_INT 22
42861: PUSH
42862: LD_VAR 0 16
42866: PUSH
42867: EMPTY
42868: LIST
42869: LIST
42870: PUSH
42871: LD_INT 2
42873: PUSH
42874: LD_INT 35
42876: PUSH
42877: LD_INT 11
42879: PUSH
42880: EMPTY
42881: LIST
42882: LIST
42883: PUSH
42884: LD_INT 35
42886: PUSH
42887: LD_INT 30
42889: PUSH
42890: EMPTY
42891: LIST
42892: LIST
42893: PUSH
42894: EMPTY
42895: LIST
42896: LIST
42897: LIST
42898: PUSH
42899: LD_INT 91
42901: PUSH
42902: LD_VAR 0 1
42906: PUSH
42907: LD_INT 18
42909: PUSH
42910: EMPTY
42911: LIST
42912: LIST
42913: LIST
42914: PUSH
42915: EMPTY
42916: LIST
42917: LIST
42918: LIST
42919: PPUSH
42920: CALL_OW 69
42924: NOT
42925: PUSH
42926: LD_INT 22
42928: PUSH
42929: LD_VAR 0 16
42933: PUSH
42934: EMPTY
42935: LIST
42936: LIST
42937: PUSH
42938: LD_INT 2
42940: PUSH
42941: LD_INT 30
42943: PUSH
42944: LD_INT 32
42946: PUSH
42947: EMPTY
42948: LIST
42949: LIST
42950: PUSH
42951: LD_INT 30
42953: PUSH
42954: LD_INT 33
42956: PUSH
42957: EMPTY
42958: LIST
42959: LIST
42960: PUSH
42961: EMPTY
42962: LIST
42963: LIST
42964: LIST
42965: PUSH
42966: LD_INT 91
42968: PUSH
42969: LD_VAR 0 1
42973: PUSH
42974: LD_INT 12
42976: PUSH
42977: EMPTY
42978: LIST
42979: LIST
42980: LIST
42981: PUSH
42982: EMPTY
42983: LIST
42984: LIST
42985: LIST
42986: PUSH
42987: EMPTY
42988: LIST
42989: PPUSH
42990: CALL_OW 69
42994: PUSH
42995: LD_INT 2
42997: GREATER
42998: AND
42999: IFFALSE 43022
// weapon := [ us_radar , ar_radar ] [ nat ] ;
43001: LD_ADDR_VAR 0 18
43005: PUSH
43006: LD_INT 11
43008: PUSH
43009: LD_INT 30
43011: PUSH
43012: EMPTY
43013: LIST
43014: LIST
43015: PUSH
43016: LD_VAR 0 12
43020: ARRAY
43021: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
43022: LD_VAR 0 18
43026: NOT
43027: PUSH
43028: LD_INT 40
43030: PPUSH
43031: LD_VAR 0 16
43035: PPUSH
43036: CALL_OW 321
43040: PUSH
43041: LD_INT 2
43043: EQUAL
43044: AND
43045: PUSH
43046: LD_INT 7
43048: PUSH
43049: LD_VAR 0 5
43053: IN
43054: PUSH
43055: LD_INT 28
43057: PUSH
43058: LD_VAR 0 5
43062: IN
43063: OR
43064: PUSH
43065: LD_INT 45
43067: PUSH
43068: LD_VAR 0 5
43072: IN
43073: OR
43074: AND
43075: IFFALSE 43329
// begin hex := GetHexInfo ( x , y ) ;
43077: LD_ADDR_VAR 0 4
43081: PUSH
43082: LD_VAR 0 10
43086: PPUSH
43087: LD_VAR 0 11
43091: PPUSH
43092: CALL_OW 546
43096: ST_TO_ADDR
// if hex [ 1 ] then
43097: LD_VAR 0 4
43101: PUSH
43102: LD_INT 1
43104: ARRAY
43105: IFFALSE 43109
// exit ;
43107: GO 43512
// height := hex [ 2 ] ;
43109: LD_ADDR_VAR 0 15
43113: PUSH
43114: LD_VAR 0 4
43118: PUSH
43119: LD_INT 2
43121: ARRAY
43122: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
43123: LD_ADDR_VAR 0 14
43127: PUSH
43128: LD_INT 0
43130: PUSH
43131: LD_INT 2
43133: PUSH
43134: LD_INT 3
43136: PUSH
43137: LD_INT 5
43139: PUSH
43140: EMPTY
43141: LIST
43142: LIST
43143: LIST
43144: LIST
43145: ST_TO_ADDR
// for i in tmp do
43146: LD_ADDR_VAR 0 8
43150: PUSH
43151: LD_VAR 0 14
43155: PUSH
43156: FOR_IN
43157: IFFALSE 43327
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
43159: LD_ADDR_VAR 0 9
43163: PUSH
43164: LD_VAR 0 10
43168: PPUSH
43169: LD_VAR 0 8
43173: PPUSH
43174: LD_INT 5
43176: PPUSH
43177: CALL_OW 272
43181: PUSH
43182: LD_VAR 0 11
43186: PPUSH
43187: LD_VAR 0 8
43191: PPUSH
43192: LD_INT 5
43194: PPUSH
43195: CALL_OW 273
43199: PUSH
43200: EMPTY
43201: LIST
43202: LIST
43203: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
43204: LD_VAR 0 9
43208: PUSH
43209: LD_INT 1
43211: ARRAY
43212: PPUSH
43213: LD_VAR 0 9
43217: PUSH
43218: LD_INT 2
43220: ARRAY
43221: PPUSH
43222: CALL_OW 488
43226: IFFALSE 43325
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
43228: LD_ADDR_VAR 0 4
43232: PUSH
43233: LD_VAR 0 9
43237: PUSH
43238: LD_INT 1
43240: ARRAY
43241: PPUSH
43242: LD_VAR 0 9
43246: PUSH
43247: LD_INT 2
43249: ARRAY
43250: PPUSH
43251: CALL_OW 546
43255: ST_TO_ADDR
// if hex [ 1 ] then
43256: LD_VAR 0 4
43260: PUSH
43261: LD_INT 1
43263: ARRAY
43264: IFFALSE 43268
// continue ;
43266: GO 43156
// h := hex [ 2 ] ;
43268: LD_ADDR_VAR 0 13
43272: PUSH
43273: LD_VAR 0 4
43277: PUSH
43278: LD_INT 2
43280: ARRAY
43281: ST_TO_ADDR
// if h + 7 < height then
43282: LD_VAR 0 13
43286: PUSH
43287: LD_INT 7
43289: PLUS
43290: PUSH
43291: LD_VAR 0 15
43295: LESS
43296: IFFALSE 43325
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
43298: LD_ADDR_VAR 0 18
43302: PUSH
43303: LD_INT 7
43305: PUSH
43306: LD_INT 28
43308: PUSH
43309: LD_INT 45
43311: PUSH
43312: EMPTY
43313: LIST
43314: LIST
43315: LIST
43316: PUSH
43317: LD_VAR 0 12
43321: ARRAY
43322: ST_TO_ADDR
// break ;
43323: GO 43327
// end ; end ; end ;
43325: GO 43156
43327: POP
43328: POP
// end ; if not weapon then
43329: LD_VAR 0 18
43333: NOT
43334: IFFALSE 43394
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
43336: LD_ADDR_VAR 0 5
43340: PUSH
43341: LD_VAR 0 5
43345: PUSH
43346: LD_INT 11
43348: PUSH
43349: LD_INT 30
43351: PUSH
43352: LD_INT 49
43354: PUSH
43355: EMPTY
43356: LIST
43357: LIST
43358: LIST
43359: DIFF
43360: ST_TO_ADDR
// if not list then
43361: LD_VAR 0 5
43365: NOT
43366: IFFALSE 43370
// exit ;
43368: GO 43512
// weapon := list [ rand ( 1 , list ) ] ;
43370: LD_ADDR_VAR 0 18
43374: PUSH
43375: LD_VAR 0 5
43379: PUSH
43380: LD_INT 1
43382: PPUSH
43383: LD_VAR 0 5
43387: PPUSH
43388: CALL_OW 12
43392: ARRAY
43393: ST_TO_ADDR
// end ; if weapon then
43394: LD_VAR 0 18
43398: IFFALSE 43512
// begin tmp := CostOfWeapon ( weapon ) ;
43400: LD_ADDR_VAR 0 14
43404: PUSH
43405: LD_VAR 0 18
43409: PPUSH
43410: CALL_OW 451
43414: ST_TO_ADDR
// j := GetBase ( tower ) ;
43415: LD_ADDR_VAR 0 9
43419: PUSH
43420: LD_VAR 0 1
43424: PPUSH
43425: CALL_OW 274
43429: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
43430: LD_VAR 0 9
43434: PPUSH
43435: LD_INT 1
43437: PPUSH
43438: CALL_OW 275
43442: PUSH
43443: LD_VAR 0 14
43447: PUSH
43448: LD_INT 1
43450: ARRAY
43451: GREATEREQUAL
43452: PUSH
43453: LD_VAR 0 9
43457: PPUSH
43458: LD_INT 2
43460: PPUSH
43461: CALL_OW 275
43465: PUSH
43466: LD_VAR 0 14
43470: PUSH
43471: LD_INT 2
43473: ARRAY
43474: GREATEREQUAL
43475: AND
43476: PUSH
43477: LD_VAR 0 9
43481: PPUSH
43482: LD_INT 3
43484: PPUSH
43485: CALL_OW 275
43489: PUSH
43490: LD_VAR 0 14
43494: PUSH
43495: LD_INT 3
43497: ARRAY
43498: GREATEREQUAL
43499: AND
43500: IFFALSE 43512
// result := weapon ;
43502: LD_ADDR_VAR 0 3
43506: PUSH
43507: LD_VAR 0 18
43511: ST_TO_ADDR
// end ; end ;
43512: LD_VAR 0 3
43516: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
43517: LD_INT 0
43519: PPUSH
43520: PPUSH
// result := true ;
43521: LD_ADDR_VAR 0 3
43525: PUSH
43526: LD_INT 1
43528: ST_TO_ADDR
// if array1 = array2 then
43529: LD_VAR 0 1
43533: PUSH
43534: LD_VAR 0 2
43538: EQUAL
43539: IFFALSE 43599
// begin for i = 1 to array1 do
43541: LD_ADDR_VAR 0 4
43545: PUSH
43546: DOUBLE
43547: LD_INT 1
43549: DEC
43550: ST_TO_ADDR
43551: LD_VAR 0 1
43555: PUSH
43556: FOR_TO
43557: IFFALSE 43595
// if array1 [ i ] <> array2 [ i ] then
43559: LD_VAR 0 1
43563: PUSH
43564: LD_VAR 0 4
43568: ARRAY
43569: PUSH
43570: LD_VAR 0 2
43574: PUSH
43575: LD_VAR 0 4
43579: ARRAY
43580: NONEQUAL
43581: IFFALSE 43593
// begin result := false ;
43583: LD_ADDR_VAR 0 3
43587: PUSH
43588: LD_INT 0
43590: ST_TO_ADDR
// break ;
43591: GO 43595
// end ;
43593: GO 43556
43595: POP
43596: POP
// end else
43597: GO 43607
// result := false ;
43599: LD_ADDR_VAR 0 3
43603: PUSH
43604: LD_INT 0
43606: ST_TO_ADDR
// end ;
43607: LD_VAR 0 3
43611: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
43612: LD_INT 0
43614: PPUSH
43615: PPUSH
// if not array1 or not array2 then
43616: LD_VAR 0 1
43620: NOT
43621: PUSH
43622: LD_VAR 0 2
43626: NOT
43627: OR
43628: IFFALSE 43632
// exit ;
43630: GO 43696
// result := true ;
43632: LD_ADDR_VAR 0 3
43636: PUSH
43637: LD_INT 1
43639: ST_TO_ADDR
// for i = 1 to array1 do
43640: LD_ADDR_VAR 0 4
43644: PUSH
43645: DOUBLE
43646: LD_INT 1
43648: DEC
43649: ST_TO_ADDR
43650: LD_VAR 0 1
43654: PUSH
43655: FOR_TO
43656: IFFALSE 43694
// if array1 [ i ] <> array2 [ i ] then
43658: LD_VAR 0 1
43662: PUSH
43663: LD_VAR 0 4
43667: ARRAY
43668: PUSH
43669: LD_VAR 0 2
43673: PUSH
43674: LD_VAR 0 4
43678: ARRAY
43679: NONEQUAL
43680: IFFALSE 43692
// begin result := false ;
43682: LD_ADDR_VAR 0 3
43686: PUSH
43687: LD_INT 0
43689: ST_TO_ADDR
// break ;
43690: GO 43694
// end ;
43692: GO 43655
43694: POP
43695: POP
// end ;
43696: LD_VAR 0 3
43700: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
43701: LD_INT 0
43703: PPUSH
43704: PPUSH
43705: PPUSH
// pom := GetBase ( fac ) ;
43706: LD_ADDR_VAR 0 5
43710: PUSH
43711: LD_VAR 0 1
43715: PPUSH
43716: CALL_OW 274
43720: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
43721: LD_ADDR_VAR 0 4
43725: PUSH
43726: LD_VAR 0 2
43730: PUSH
43731: LD_INT 1
43733: ARRAY
43734: PPUSH
43735: LD_VAR 0 2
43739: PUSH
43740: LD_INT 2
43742: ARRAY
43743: PPUSH
43744: LD_VAR 0 2
43748: PUSH
43749: LD_INT 3
43751: ARRAY
43752: PPUSH
43753: LD_VAR 0 2
43757: PUSH
43758: LD_INT 4
43760: ARRAY
43761: PPUSH
43762: CALL_OW 449
43766: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43767: LD_ADDR_VAR 0 3
43771: PUSH
43772: LD_VAR 0 5
43776: PPUSH
43777: LD_INT 1
43779: PPUSH
43780: CALL_OW 275
43784: PUSH
43785: LD_VAR 0 4
43789: PUSH
43790: LD_INT 1
43792: ARRAY
43793: GREATEREQUAL
43794: PUSH
43795: LD_VAR 0 5
43799: PPUSH
43800: LD_INT 2
43802: PPUSH
43803: CALL_OW 275
43807: PUSH
43808: LD_VAR 0 4
43812: PUSH
43813: LD_INT 2
43815: ARRAY
43816: GREATEREQUAL
43817: AND
43818: PUSH
43819: LD_VAR 0 5
43823: PPUSH
43824: LD_INT 3
43826: PPUSH
43827: CALL_OW 275
43831: PUSH
43832: LD_VAR 0 4
43836: PUSH
43837: LD_INT 3
43839: ARRAY
43840: GREATEREQUAL
43841: AND
43842: ST_TO_ADDR
// end ;
43843: LD_VAR 0 3
43847: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
43848: LD_INT 0
43850: PPUSH
43851: PPUSH
43852: PPUSH
43853: PPUSH
// pom := GetBase ( building ) ;
43854: LD_ADDR_VAR 0 3
43858: PUSH
43859: LD_VAR 0 1
43863: PPUSH
43864: CALL_OW 274
43868: ST_TO_ADDR
// if not pom then
43869: LD_VAR 0 3
43873: NOT
43874: IFFALSE 43878
// exit ;
43876: GO 44048
// btype := GetBType ( building ) ;
43878: LD_ADDR_VAR 0 5
43882: PUSH
43883: LD_VAR 0 1
43887: PPUSH
43888: CALL_OW 266
43892: ST_TO_ADDR
// if btype = b_armoury then
43893: LD_VAR 0 5
43897: PUSH
43898: LD_INT 4
43900: EQUAL
43901: IFFALSE 43911
// btype := b_barracks ;
43903: LD_ADDR_VAR 0 5
43907: PUSH
43908: LD_INT 5
43910: ST_TO_ADDR
// if btype = b_depot then
43911: LD_VAR 0 5
43915: PUSH
43916: LD_INT 0
43918: EQUAL
43919: IFFALSE 43929
// btype := b_warehouse ;
43921: LD_ADDR_VAR 0 5
43925: PUSH
43926: LD_INT 1
43928: ST_TO_ADDR
// if btype = b_workshop then
43929: LD_VAR 0 5
43933: PUSH
43934: LD_INT 2
43936: EQUAL
43937: IFFALSE 43947
// btype := b_factory ;
43939: LD_ADDR_VAR 0 5
43943: PUSH
43944: LD_INT 3
43946: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
43947: LD_ADDR_VAR 0 4
43951: PUSH
43952: LD_VAR 0 5
43956: PPUSH
43957: LD_VAR 0 1
43961: PPUSH
43962: CALL_OW 248
43966: PPUSH
43967: CALL_OW 450
43971: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43972: LD_ADDR_VAR 0 2
43976: PUSH
43977: LD_VAR 0 3
43981: PPUSH
43982: LD_INT 1
43984: PPUSH
43985: CALL_OW 275
43989: PUSH
43990: LD_VAR 0 4
43994: PUSH
43995: LD_INT 1
43997: ARRAY
43998: GREATEREQUAL
43999: PUSH
44000: LD_VAR 0 3
44004: PPUSH
44005: LD_INT 2
44007: PPUSH
44008: CALL_OW 275
44012: PUSH
44013: LD_VAR 0 4
44017: PUSH
44018: LD_INT 2
44020: ARRAY
44021: GREATEREQUAL
44022: AND
44023: PUSH
44024: LD_VAR 0 3
44028: PPUSH
44029: LD_INT 3
44031: PPUSH
44032: CALL_OW 275
44036: PUSH
44037: LD_VAR 0 4
44041: PUSH
44042: LD_INT 3
44044: ARRAY
44045: GREATEREQUAL
44046: AND
44047: ST_TO_ADDR
// end ;
44048: LD_VAR 0 2
44052: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
44053: LD_INT 0
44055: PPUSH
44056: PPUSH
44057: PPUSH
// pom := GetBase ( building ) ;
44058: LD_ADDR_VAR 0 4
44062: PUSH
44063: LD_VAR 0 1
44067: PPUSH
44068: CALL_OW 274
44072: ST_TO_ADDR
// if not pom then
44073: LD_VAR 0 4
44077: NOT
44078: IFFALSE 44082
// exit ;
44080: GO 44183
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
44082: LD_ADDR_VAR 0 5
44086: PUSH
44087: LD_VAR 0 2
44091: PPUSH
44092: LD_VAR 0 1
44096: PPUSH
44097: CALL_OW 248
44101: PPUSH
44102: CALL_OW 450
44106: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
44107: LD_ADDR_VAR 0 3
44111: PUSH
44112: LD_VAR 0 4
44116: PPUSH
44117: LD_INT 1
44119: PPUSH
44120: CALL_OW 275
44124: PUSH
44125: LD_VAR 0 5
44129: PUSH
44130: LD_INT 1
44132: ARRAY
44133: GREATEREQUAL
44134: PUSH
44135: LD_VAR 0 4
44139: PPUSH
44140: LD_INT 2
44142: PPUSH
44143: CALL_OW 275
44147: PUSH
44148: LD_VAR 0 5
44152: PUSH
44153: LD_INT 2
44155: ARRAY
44156: GREATEREQUAL
44157: AND
44158: PUSH
44159: LD_VAR 0 4
44163: PPUSH
44164: LD_INT 3
44166: PPUSH
44167: CALL_OW 275
44171: PUSH
44172: LD_VAR 0 5
44176: PUSH
44177: LD_INT 3
44179: ARRAY
44180: GREATEREQUAL
44181: AND
44182: ST_TO_ADDR
// end ;
44183: LD_VAR 0 3
44187: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
44188: LD_INT 0
44190: PPUSH
44191: PPUSH
44192: PPUSH
44193: PPUSH
44194: PPUSH
44195: PPUSH
44196: PPUSH
44197: PPUSH
44198: PPUSH
44199: PPUSH
44200: PPUSH
// result := false ;
44201: LD_ADDR_VAR 0 8
44205: PUSH
44206: LD_INT 0
44208: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
44209: LD_VAR 0 5
44213: NOT
44214: PUSH
44215: LD_VAR 0 1
44219: NOT
44220: OR
44221: PUSH
44222: LD_VAR 0 2
44226: NOT
44227: OR
44228: PUSH
44229: LD_VAR 0 3
44233: NOT
44234: OR
44235: IFFALSE 44239
// exit ;
44237: GO 45053
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
44239: LD_ADDR_VAR 0 14
44243: PUSH
44244: LD_VAR 0 1
44248: PPUSH
44249: LD_VAR 0 2
44253: PPUSH
44254: LD_VAR 0 3
44258: PPUSH
44259: LD_VAR 0 4
44263: PPUSH
44264: LD_VAR 0 5
44268: PUSH
44269: LD_INT 1
44271: ARRAY
44272: PPUSH
44273: CALL_OW 248
44277: PPUSH
44278: LD_INT 0
44280: PPUSH
44281: CALL 46286 0 6
44285: ST_TO_ADDR
// if not hexes then
44286: LD_VAR 0 14
44290: NOT
44291: IFFALSE 44295
// exit ;
44293: GO 45053
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
44295: LD_ADDR_VAR 0 17
44299: PUSH
44300: LD_VAR 0 5
44304: PPUSH
44305: LD_INT 22
44307: PUSH
44308: LD_VAR 0 13
44312: PPUSH
44313: CALL_OW 255
44317: PUSH
44318: EMPTY
44319: LIST
44320: LIST
44321: PUSH
44322: LD_INT 2
44324: PUSH
44325: LD_INT 30
44327: PUSH
44328: LD_INT 0
44330: PUSH
44331: EMPTY
44332: LIST
44333: LIST
44334: PUSH
44335: LD_INT 30
44337: PUSH
44338: LD_INT 1
44340: PUSH
44341: EMPTY
44342: LIST
44343: LIST
44344: PUSH
44345: EMPTY
44346: LIST
44347: LIST
44348: LIST
44349: PUSH
44350: EMPTY
44351: LIST
44352: LIST
44353: PPUSH
44354: CALL_OW 72
44358: ST_TO_ADDR
// for i = 1 to hexes do
44359: LD_ADDR_VAR 0 9
44363: PUSH
44364: DOUBLE
44365: LD_INT 1
44367: DEC
44368: ST_TO_ADDR
44369: LD_VAR 0 14
44373: PUSH
44374: FOR_TO
44375: IFFALSE 45051
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44377: LD_ADDR_VAR 0 13
44381: PUSH
44382: LD_VAR 0 14
44386: PUSH
44387: LD_VAR 0 9
44391: ARRAY
44392: PUSH
44393: LD_INT 1
44395: ARRAY
44396: PPUSH
44397: LD_VAR 0 14
44401: PUSH
44402: LD_VAR 0 9
44406: ARRAY
44407: PUSH
44408: LD_INT 2
44410: ARRAY
44411: PPUSH
44412: CALL_OW 428
44416: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
44417: LD_VAR 0 14
44421: PUSH
44422: LD_VAR 0 9
44426: ARRAY
44427: PUSH
44428: LD_INT 1
44430: ARRAY
44431: PPUSH
44432: LD_VAR 0 14
44436: PUSH
44437: LD_VAR 0 9
44441: ARRAY
44442: PUSH
44443: LD_INT 2
44445: ARRAY
44446: PPUSH
44447: CALL_OW 351
44451: PUSH
44452: LD_VAR 0 14
44456: PUSH
44457: LD_VAR 0 9
44461: ARRAY
44462: PUSH
44463: LD_INT 1
44465: ARRAY
44466: PPUSH
44467: LD_VAR 0 14
44471: PUSH
44472: LD_VAR 0 9
44476: ARRAY
44477: PUSH
44478: LD_INT 2
44480: ARRAY
44481: PPUSH
44482: CALL_OW 488
44486: NOT
44487: OR
44488: PUSH
44489: LD_VAR 0 13
44493: PPUSH
44494: CALL_OW 247
44498: PUSH
44499: LD_INT 3
44501: EQUAL
44502: OR
44503: IFFALSE 44509
// exit ;
44505: POP
44506: POP
44507: GO 45053
// if not tmp then
44509: LD_VAR 0 13
44513: NOT
44514: IFFALSE 44518
// continue ;
44516: GO 44374
// result := true ;
44518: LD_ADDR_VAR 0 8
44522: PUSH
44523: LD_INT 1
44525: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
44526: LD_VAR 0 6
44530: PUSH
44531: LD_VAR 0 13
44535: PPUSH
44536: CALL_OW 247
44540: PUSH
44541: LD_INT 2
44543: EQUAL
44544: AND
44545: PUSH
44546: LD_VAR 0 13
44550: PPUSH
44551: CALL_OW 263
44555: PUSH
44556: LD_INT 1
44558: EQUAL
44559: AND
44560: IFFALSE 44724
// begin if IsDrivenBy ( tmp ) then
44562: LD_VAR 0 13
44566: PPUSH
44567: CALL_OW 311
44571: IFFALSE 44575
// continue ;
44573: GO 44374
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
44575: LD_VAR 0 6
44579: PPUSH
44580: LD_INT 3
44582: PUSH
44583: LD_INT 60
44585: PUSH
44586: EMPTY
44587: LIST
44588: PUSH
44589: EMPTY
44590: LIST
44591: LIST
44592: PUSH
44593: LD_INT 3
44595: PUSH
44596: LD_INT 55
44598: PUSH
44599: EMPTY
44600: LIST
44601: PUSH
44602: EMPTY
44603: LIST
44604: LIST
44605: PUSH
44606: EMPTY
44607: LIST
44608: LIST
44609: PPUSH
44610: CALL_OW 72
44614: IFFALSE 44722
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
44616: LD_ADDR_VAR 0 18
44620: PUSH
44621: LD_VAR 0 6
44625: PPUSH
44626: LD_INT 3
44628: PUSH
44629: LD_INT 60
44631: PUSH
44632: EMPTY
44633: LIST
44634: PUSH
44635: EMPTY
44636: LIST
44637: LIST
44638: PUSH
44639: LD_INT 3
44641: PUSH
44642: LD_INT 55
44644: PUSH
44645: EMPTY
44646: LIST
44647: PUSH
44648: EMPTY
44649: LIST
44650: LIST
44651: PUSH
44652: EMPTY
44653: LIST
44654: LIST
44655: PPUSH
44656: CALL_OW 72
44660: PUSH
44661: LD_INT 1
44663: ARRAY
44664: ST_TO_ADDR
// if IsInUnit ( driver ) then
44665: LD_VAR 0 18
44669: PPUSH
44670: CALL_OW 310
44674: IFFALSE 44685
// ComExit ( driver ) ;
44676: LD_VAR 0 18
44680: PPUSH
44681: CALL 70047 0 1
// AddComEnterUnit ( driver , tmp ) ;
44685: LD_VAR 0 18
44689: PPUSH
44690: LD_VAR 0 13
44694: PPUSH
44695: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
44699: LD_VAR 0 18
44703: PPUSH
44704: LD_VAR 0 7
44708: PPUSH
44709: CALL_OW 173
// AddComExitVehicle ( driver ) ;
44713: LD_VAR 0 18
44717: PPUSH
44718: CALL_OW 181
// end ; continue ;
44722: GO 44374
// end ; if not cleaners or not tmp in cleaners then
44724: LD_VAR 0 6
44728: NOT
44729: PUSH
44730: LD_VAR 0 13
44734: PUSH
44735: LD_VAR 0 6
44739: IN
44740: NOT
44741: OR
44742: IFFALSE 45049
// begin if dep then
44744: LD_VAR 0 17
44748: IFFALSE 44884
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
44750: LD_ADDR_VAR 0 16
44754: PUSH
44755: LD_VAR 0 17
44759: PUSH
44760: LD_INT 1
44762: ARRAY
44763: PPUSH
44764: CALL_OW 250
44768: PPUSH
44769: LD_VAR 0 17
44773: PUSH
44774: LD_INT 1
44776: ARRAY
44777: PPUSH
44778: CALL_OW 254
44782: PPUSH
44783: LD_INT 5
44785: PPUSH
44786: CALL_OW 272
44790: PUSH
44791: LD_VAR 0 17
44795: PUSH
44796: LD_INT 1
44798: ARRAY
44799: PPUSH
44800: CALL_OW 251
44804: PPUSH
44805: LD_VAR 0 17
44809: PUSH
44810: LD_INT 1
44812: ARRAY
44813: PPUSH
44814: CALL_OW 254
44818: PPUSH
44819: LD_INT 5
44821: PPUSH
44822: CALL_OW 273
44826: PUSH
44827: EMPTY
44828: LIST
44829: LIST
44830: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
44831: LD_VAR 0 16
44835: PUSH
44836: LD_INT 1
44838: ARRAY
44839: PPUSH
44840: LD_VAR 0 16
44844: PUSH
44845: LD_INT 2
44847: ARRAY
44848: PPUSH
44849: CALL_OW 488
44853: IFFALSE 44884
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
44855: LD_VAR 0 13
44859: PPUSH
44860: LD_VAR 0 16
44864: PUSH
44865: LD_INT 1
44867: ARRAY
44868: PPUSH
44869: LD_VAR 0 16
44873: PUSH
44874: LD_INT 2
44876: ARRAY
44877: PPUSH
44878: CALL_OW 111
// continue ;
44882: GO 44374
// end ; end ; r := GetDir ( tmp ) ;
44884: LD_ADDR_VAR 0 15
44888: PUSH
44889: LD_VAR 0 13
44893: PPUSH
44894: CALL_OW 254
44898: ST_TO_ADDR
// if r = 5 then
44899: LD_VAR 0 15
44903: PUSH
44904: LD_INT 5
44906: EQUAL
44907: IFFALSE 44917
// r := 0 ;
44909: LD_ADDR_VAR 0 15
44913: PUSH
44914: LD_INT 0
44916: ST_TO_ADDR
// for j = r to 5 do
44917: LD_ADDR_VAR 0 10
44921: PUSH
44922: DOUBLE
44923: LD_VAR 0 15
44927: DEC
44928: ST_TO_ADDR
44929: LD_INT 5
44931: PUSH
44932: FOR_TO
44933: IFFALSE 45047
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
44935: LD_ADDR_VAR 0 11
44939: PUSH
44940: LD_VAR 0 13
44944: PPUSH
44945: CALL_OW 250
44949: PPUSH
44950: LD_VAR 0 10
44954: PPUSH
44955: LD_INT 2
44957: PPUSH
44958: CALL_OW 272
44962: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
44963: LD_ADDR_VAR 0 12
44967: PUSH
44968: LD_VAR 0 13
44972: PPUSH
44973: CALL_OW 251
44977: PPUSH
44978: LD_VAR 0 10
44982: PPUSH
44983: LD_INT 2
44985: PPUSH
44986: CALL_OW 273
44990: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
44991: LD_VAR 0 11
44995: PPUSH
44996: LD_VAR 0 12
45000: PPUSH
45001: CALL_OW 488
45005: PUSH
45006: LD_VAR 0 11
45010: PPUSH
45011: LD_VAR 0 12
45015: PPUSH
45016: CALL_OW 428
45020: NOT
45021: AND
45022: IFFALSE 45045
// begin ComMoveXY ( tmp , _x , _y ) ;
45024: LD_VAR 0 13
45028: PPUSH
45029: LD_VAR 0 11
45033: PPUSH
45034: LD_VAR 0 12
45038: PPUSH
45039: CALL_OW 111
// break ;
45043: GO 45047
// end ; end ;
45045: GO 44932
45047: POP
45048: POP
// end ; end ;
45049: GO 44374
45051: POP
45052: POP
// end ;
45053: LD_VAR 0 8
45057: RET
// export function BuildingTechInvented ( side , btype ) ; begin
45058: LD_INT 0
45060: PPUSH
// result := true ;
45061: LD_ADDR_VAR 0 3
45065: PUSH
45066: LD_INT 1
45068: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
45069: LD_VAR 0 2
45073: PUSH
45074: LD_INT 24
45076: DOUBLE
45077: EQUAL
45078: IFTRUE 45088
45080: LD_INT 33
45082: DOUBLE
45083: EQUAL
45084: IFTRUE 45088
45086: GO 45113
45088: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
45089: LD_ADDR_VAR 0 3
45093: PUSH
45094: LD_INT 32
45096: PPUSH
45097: LD_VAR 0 1
45101: PPUSH
45102: CALL_OW 321
45106: PUSH
45107: LD_INT 2
45109: EQUAL
45110: ST_TO_ADDR
45111: GO 45429
45113: LD_INT 20
45115: DOUBLE
45116: EQUAL
45117: IFTRUE 45121
45119: GO 45146
45121: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
45122: LD_ADDR_VAR 0 3
45126: PUSH
45127: LD_INT 6
45129: PPUSH
45130: LD_VAR 0 1
45134: PPUSH
45135: CALL_OW 321
45139: PUSH
45140: LD_INT 2
45142: EQUAL
45143: ST_TO_ADDR
45144: GO 45429
45146: LD_INT 22
45148: DOUBLE
45149: EQUAL
45150: IFTRUE 45160
45152: LD_INT 36
45154: DOUBLE
45155: EQUAL
45156: IFTRUE 45160
45158: GO 45185
45160: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
45161: LD_ADDR_VAR 0 3
45165: PUSH
45166: LD_INT 15
45168: PPUSH
45169: LD_VAR 0 1
45173: PPUSH
45174: CALL_OW 321
45178: PUSH
45179: LD_INT 2
45181: EQUAL
45182: ST_TO_ADDR
45183: GO 45429
45185: LD_INT 30
45187: DOUBLE
45188: EQUAL
45189: IFTRUE 45193
45191: GO 45218
45193: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
45194: LD_ADDR_VAR 0 3
45198: PUSH
45199: LD_INT 20
45201: PPUSH
45202: LD_VAR 0 1
45206: PPUSH
45207: CALL_OW 321
45211: PUSH
45212: LD_INT 2
45214: EQUAL
45215: ST_TO_ADDR
45216: GO 45429
45218: LD_INT 28
45220: DOUBLE
45221: EQUAL
45222: IFTRUE 45232
45224: LD_INT 21
45226: DOUBLE
45227: EQUAL
45228: IFTRUE 45232
45230: GO 45257
45232: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
45233: LD_ADDR_VAR 0 3
45237: PUSH
45238: LD_INT 21
45240: PPUSH
45241: LD_VAR 0 1
45245: PPUSH
45246: CALL_OW 321
45250: PUSH
45251: LD_INT 2
45253: EQUAL
45254: ST_TO_ADDR
45255: GO 45429
45257: LD_INT 16
45259: DOUBLE
45260: EQUAL
45261: IFTRUE 45265
45263: GO 45290
45265: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
45266: LD_ADDR_VAR 0 3
45270: PUSH
45271: LD_INT 84
45273: PPUSH
45274: LD_VAR 0 1
45278: PPUSH
45279: CALL_OW 321
45283: PUSH
45284: LD_INT 2
45286: EQUAL
45287: ST_TO_ADDR
45288: GO 45429
45290: LD_INT 19
45292: DOUBLE
45293: EQUAL
45294: IFTRUE 45304
45296: LD_INT 23
45298: DOUBLE
45299: EQUAL
45300: IFTRUE 45304
45302: GO 45329
45304: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
45305: LD_ADDR_VAR 0 3
45309: PUSH
45310: LD_INT 83
45312: PPUSH
45313: LD_VAR 0 1
45317: PPUSH
45318: CALL_OW 321
45322: PUSH
45323: LD_INT 2
45325: EQUAL
45326: ST_TO_ADDR
45327: GO 45429
45329: LD_INT 17
45331: DOUBLE
45332: EQUAL
45333: IFTRUE 45337
45335: GO 45362
45337: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
45338: LD_ADDR_VAR 0 3
45342: PUSH
45343: LD_INT 39
45345: PPUSH
45346: LD_VAR 0 1
45350: PPUSH
45351: CALL_OW 321
45355: PUSH
45356: LD_INT 2
45358: EQUAL
45359: ST_TO_ADDR
45360: GO 45429
45362: LD_INT 18
45364: DOUBLE
45365: EQUAL
45366: IFTRUE 45370
45368: GO 45395
45370: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
45371: LD_ADDR_VAR 0 3
45375: PUSH
45376: LD_INT 40
45378: PPUSH
45379: LD_VAR 0 1
45383: PPUSH
45384: CALL_OW 321
45388: PUSH
45389: LD_INT 2
45391: EQUAL
45392: ST_TO_ADDR
45393: GO 45429
45395: LD_INT 27
45397: DOUBLE
45398: EQUAL
45399: IFTRUE 45403
45401: GO 45428
45403: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
45404: LD_ADDR_VAR 0 3
45408: PUSH
45409: LD_INT 35
45411: PPUSH
45412: LD_VAR 0 1
45416: PPUSH
45417: CALL_OW 321
45421: PUSH
45422: LD_INT 2
45424: EQUAL
45425: ST_TO_ADDR
45426: GO 45429
45428: POP
// end ;
45429: LD_VAR 0 3
45433: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
45434: LD_INT 0
45436: PPUSH
45437: PPUSH
45438: PPUSH
45439: PPUSH
45440: PPUSH
45441: PPUSH
45442: PPUSH
45443: PPUSH
45444: PPUSH
45445: PPUSH
45446: PPUSH
// result := false ;
45447: LD_ADDR_VAR 0 6
45451: PUSH
45452: LD_INT 0
45454: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
45455: LD_VAR 0 1
45459: NOT
45460: PUSH
45461: LD_VAR 0 1
45465: PPUSH
45466: CALL_OW 266
45470: PUSH
45471: LD_INT 0
45473: PUSH
45474: LD_INT 1
45476: PUSH
45477: EMPTY
45478: LIST
45479: LIST
45480: IN
45481: NOT
45482: OR
45483: PUSH
45484: LD_VAR 0 2
45488: NOT
45489: OR
45490: PUSH
45491: LD_VAR 0 5
45495: PUSH
45496: LD_INT 0
45498: PUSH
45499: LD_INT 1
45501: PUSH
45502: LD_INT 2
45504: PUSH
45505: LD_INT 3
45507: PUSH
45508: LD_INT 4
45510: PUSH
45511: LD_INT 5
45513: PUSH
45514: EMPTY
45515: LIST
45516: LIST
45517: LIST
45518: LIST
45519: LIST
45520: LIST
45521: IN
45522: NOT
45523: OR
45524: PUSH
45525: LD_VAR 0 3
45529: PPUSH
45530: LD_VAR 0 4
45534: PPUSH
45535: CALL_OW 488
45539: NOT
45540: OR
45541: IFFALSE 45545
// exit ;
45543: GO 46281
// side := GetSide ( depot ) ;
45545: LD_ADDR_VAR 0 9
45549: PUSH
45550: LD_VAR 0 1
45554: PPUSH
45555: CALL_OW 255
45559: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
45560: LD_VAR 0 9
45564: PPUSH
45565: LD_VAR 0 2
45569: PPUSH
45570: CALL 45058 0 2
45574: NOT
45575: IFFALSE 45579
// exit ;
45577: GO 46281
// pom := GetBase ( depot ) ;
45579: LD_ADDR_VAR 0 10
45583: PUSH
45584: LD_VAR 0 1
45588: PPUSH
45589: CALL_OW 274
45593: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
45594: LD_ADDR_VAR 0 11
45598: PUSH
45599: LD_VAR 0 2
45603: PPUSH
45604: LD_VAR 0 1
45608: PPUSH
45609: CALL_OW 248
45613: PPUSH
45614: CALL_OW 450
45618: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
45619: LD_VAR 0 10
45623: PPUSH
45624: LD_INT 1
45626: PPUSH
45627: CALL_OW 275
45631: PUSH
45632: LD_VAR 0 11
45636: PUSH
45637: LD_INT 1
45639: ARRAY
45640: GREATEREQUAL
45641: PUSH
45642: LD_VAR 0 10
45646: PPUSH
45647: LD_INT 2
45649: PPUSH
45650: CALL_OW 275
45654: PUSH
45655: LD_VAR 0 11
45659: PUSH
45660: LD_INT 2
45662: ARRAY
45663: GREATEREQUAL
45664: AND
45665: PUSH
45666: LD_VAR 0 10
45670: PPUSH
45671: LD_INT 3
45673: PPUSH
45674: CALL_OW 275
45678: PUSH
45679: LD_VAR 0 11
45683: PUSH
45684: LD_INT 3
45686: ARRAY
45687: GREATEREQUAL
45688: AND
45689: NOT
45690: IFFALSE 45694
// exit ;
45692: GO 46281
// if GetBType ( depot ) = b_depot then
45694: LD_VAR 0 1
45698: PPUSH
45699: CALL_OW 266
45703: PUSH
45704: LD_INT 0
45706: EQUAL
45707: IFFALSE 45719
// dist := 28 else
45709: LD_ADDR_VAR 0 14
45713: PUSH
45714: LD_INT 28
45716: ST_TO_ADDR
45717: GO 45727
// dist := 36 ;
45719: LD_ADDR_VAR 0 14
45723: PUSH
45724: LD_INT 36
45726: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
45727: LD_VAR 0 1
45731: PPUSH
45732: LD_VAR 0 3
45736: PPUSH
45737: LD_VAR 0 4
45741: PPUSH
45742: CALL_OW 297
45746: PUSH
45747: LD_VAR 0 14
45751: GREATER
45752: IFFALSE 45756
// exit ;
45754: GO 46281
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
45756: LD_ADDR_VAR 0 12
45760: PUSH
45761: LD_VAR 0 2
45765: PPUSH
45766: LD_VAR 0 3
45770: PPUSH
45771: LD_VAR 0 4
45775: PPUSH
45776: LD_VAR 0 5
45780: PPUSH
45781: LD_VAR 0 1
45785: PPUSH
45786: CALL_OW 248
45790: PPUSH
45791: LD_INT 0
45793: PPUSH
45794: CALL 46286 0 6
45798: ST_TO_ADDR
// if not hexes then
45799: LD_VAR 0 12
45803: NOT
45804: IFFALSE 45808
// exit ;
45806: GO 46281
// hex := GetHexInfo ( x , y ) ;
45808: LD_ADDR_VAR 0 15
45812: PUSH
45813: LD_VAR 0 3
45817: PPUSH
45818: LD_VAR 0 4
45822: PPUSH
45823: CALL_OW 546
45827: ST_TO_ADDR
// if hex [ 1 ] then
45828: LD_VAR 0 15
45832: PUSH
45833: LD_INT 1
45835: ARRAY
45836: IFFALSE 45840
// exit ;
45838: GO 46281
// height := hex [ 2 ] ;
45840: LD_ADDR_VAR 0 13
45844: PUSH
45845: LD_VAR 0 15
45849: PUSH
45850: LD_INT 2
45852: ARRAY
45853: ST_TO_ADDR
// for i = 1 to hexes do
45854: LD_ADDR_VAR 0 7
45858: PUSH
45859: DOUBLE
45860: LD_INT 1
45862: DEC
45863: ST_TO_ADDR
45864: LD_VAR 0 12
45868: PUSH
45869: FOR_TO
45870: IFFALSE 46200
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
45872: LD_VAR 0 12
45876: PUSH
45877: LD_VAR 0 7
45881: ARRAY
45882: PUSH
45883: LD_INT 1
45885: ARRAY
45886: PPUSH
45887: LD_VAR 0 12
45891: PUSH
45892: LD_VAR 0 7
45896: ARRAY
45897: PUSH
45898: LD_INT 2
45900: ARRAY
45901: PPUSH
45902: CALL_OW 488
45906: NOT
45907: PUSH
45908: LD_VAR 0 12
45912: PUSH
45913: LD_VAR 0 7
45917: ARRAY
45918: PUSH
45919: LD_INT 1
45921: ARRAY
45922: PPUSH
45923: LD_VAR 0 12
45927: PUSH
45928: LD_VAR 0 7
45932: ARRAY
45933: PUSH
45934: LD_INT 2
45936: ARRAY
45937: PPUSH
45938: CALL_OW 428
45942: PUSH
45943: LD_INT 0
45945: GREATER
45946: OR
45947: PUSH
45948: LD_VAR 0 12
45952: PUSH
45953: LD_VAR 0 7
45957: ARRAY
45958: PUSH
45959: LD_INT 1
45961: ARRAY
45962: PPUSH
45963: LD_VAR 0 12
45967: PUSH
45968: LD_VAR 0 7
45972: ARRAY
45973: PUSH
45974: LD_INT 2
45976: ARRAY
45977: PPUSH
45978: CALL_OW 351
45982: OR
45983: IFFALSE 45989
// exit ;
45985: POP
45986: POP
45987: GO 46281
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
45989: LD_ADDR_VAR 0 8
45993: PUSH
45994: LD_VAR 0 12
45998: PUSH
45999: LD_VAR 0 7
46003: ARRAY
46004: PUSH
46005: LD_INT 1
46007: ARRAY
46008: PPUSH
46009: LD_VAR 0 12
46013: PUSH
46014: LD_VAR 0 7
46018: ARRAY
46019: PUSH
46020: LD_INT 2
46022: ARRAY
46023: PPUSH
46024: CALL_OW 546
46028: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
46029: LD_VAR 0 8
46033: PUSH
46034: LD_INT 1
46036: ARRAY
46037: PUSH
46038: LD_VAR 0 8
46042: PUSH
46043: LD_INT 2
46045: ARRAY
46046: PUSH
46047: LD_VAR 0 13
46051: PUSH
46052: LD_INT 2
46054: PLUS
46055: GREATER
46056: OR
46057: PUSH
46058: LD_VAR 0 8
46062: PUSH
46063: LD_INT 2
46065: ARRAY
46066: PUSH
46067: LD_VAR 0 13
46071: PUSH
46072: LD_INT 2
46074: MINUS
46075: LESS
46076: OR
46077: PUSH
46078: LD_VAR 0 8
46082: PUSH
46083: LD_INT 3
46085: ARRAY
46086: PUSH
46087: LD_INT 0
46089: PUSH
46090: LD_INT 8
46092: PUSH
46093: LD_INT 9
46095: PUSH
46096: LD_INT 10
46098: PUSH
46099: LD_INT 11
46101: PUSH
46102: LD_INT 12
46104: PUSH
46105: LD_INT 13
46107: PUSH
46108: LD_INT 16
46110: PUSH
46111: LD_INT 17
46113: PUSH
46114: LD_INT 18
46116: PUSH
46117: LD_INT 19
46119: PUSH
46120: LD_INT 20
46122: PUSH
46123: LD_INT 21
46125: PUSH
46126: EMPTY
46127: LIST
46128: LIST
46129: LIST
46130: LIST
46131: LIST
46132: LIST
46133: LIST
46134: LIST
46135: LIST
46136: LIST
46137: LIST
46138: LIST
46139: LIST
46140: IN
46141: NOT
46142: OR
46143: PUSH
46144: LD_VAR 0 8
46148: PUSH
46149: LD_INT 5
46151: ARRAY
46152: NOT
46153: OR
46154: PUSH
46155: LD_VAR 0 8
46159: PUSH
46160: LD_INT 6
46162: ARRAY
46163: PUSH
46164: LD_INT 1
46166: PUSH
46167: LD_INT 2
46169: PUSH
46170: LD_INT 7
46172: PUSH
46173: LD_INT 9
46175: PUSH
46176: LD_INT 10
46178: PUSH
46179: LD_INT 11
46181: PUSH
46182: EMPTY
46183: LIST
46184: LIST
46185: LIST
46186: LIST
46187: LIST
46188: LIST
46189: IN
46190: NOT
46191: OR
46192: IFFALSE 46198
// exit ;
46194: POP
46195: POP
46196: GO 46281
// end ;
46198: GO 45869
46200: POP
46201: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
46202: LD_VAR 0 9
46206: PPUSH
46207: LD_VAR 0 3
46211: PPUSH
46212: LD_VAR 0 4
46216: PPUSH
46217: LD_INT 20
46219: PPUSH
46220: CALL 38233 0 4
46224: PUSH
46225: LD_INT 4
46227: ARRAY
46228: IFFALSE 46232
// exit ;
46230: GO 46281
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
46232: LD_VAR 0 2
46236: PUSH
46237: LD_INT 29
46239: PUSH
46240: LD_INT 30
46242: PUSH
46243: EMPTY
46244: LIST
46245: LIST
46246: IN
46247: PUSH
46248: LD_VAR 0 3
46252: PPUSH
46253: LD_VAR 0 4
46257: PPUSH
46258: LD_VAR 0 9
46262: PPUSH
46263: CALL_OW 440
46267: NOT
46268: AND
46269: IFFALSE 46273
// exit ;
46271: GO 46281
// result := true ;
46273: LD_ADDR_VAR 0 6
46277: PUSH
46278: LD_INT 1
46280: ST_TO_ADDR
// end ;
46281: LD_VAR 0 6
46285: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
46286: LD_INT 0
46288: PPUSH
46289: PPUSH
46290: PPUSH
46291: PPUSH
46292: PPUSH
46293: PPUSH
46294: PPUSH
46295: PPUSH
46296: PPUSH
46297: PPUSH
46298: PPUSH
46299: PPUSH
46300: PPUSH
46301: PPUSH
46302: PPUSH
46303: PPUSH
46304: PPUSH
46305: PPUSH
46306: PPUSH
46307: PPUSH
46308: PPUSH
46309: PPUSH
46310: PPUSH
46311: PPUSH
46312: PPUSH
46313: PPUSH
46314: PPUSH
46315: PPUSH
46316: PPUSH
46317: PPUSH
46318: PPUSH
46319: PPUSH
46320: PPUSH
46321: PPUSH
46322: PPUSH
46323: PPUSH
46324: PPUSH
46325: PPUSH
46326: PPUSH
46327: PPUSH
46328: PPUSH
46329: PPUSH
46330: PPUSH
46331: PPUSH
46332: PPUSH
46333: PPUSH
46334: PPUSH
46335: PPUSH
46336: PPUSH
46337: PPUSH
46338: PPUSH
46339: PPUSH
46340: PPUSH
46341: PPUSH
46342: PPUSH
46343: PPUSH
46344: PPUSH
46345: PPUSH
// result = [ ] ;
46346: LD_ADDR_VAR 0 7
46350: PUSH
46351: EMPTY
46352: ST_TO_ADDR
// temp_list = [ ] ;
46353: LD_ADDR_VAR 0 9
46357: PUSH
46358: EMPTY
46359: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
46360: LD_VAR 0 4
46364: PUSH
46365: LD_INT 0
46367: PUSH
46368: LD_INT 1
46370: PUSH
46371: LD_INT 2
46373: PUSH
46374: LD_INT 3
46376: PUSH
46377: LD_INT 4
46379: PUSH
46380: LD_INT 5
46382: PUSH
46383: EMPTY
46384: LIST
46385: LIST
46386: LIST
46387: LIST
46388: LIST
46389: LIST
46390: IN
46391: NOT
46392: PUSH
46393: LD_VAR 0 1
46397: PUSH
46398: LD_INT 0
46400: PUSH
46401: LD_INT 1
46403: PUSH
46404: EMPTY
46405: LIST
46406: LIST
46407: IN
46408: PUSH
46409: LD_VAR 0 5
46413: PUSH
46414: LD_INT 1
46416: PUSH
46417: LD_INT 2
46419: PUSH
46420: LD_INT 3
46422: PUSH
46423: EMPTY
46424: LIST
46425: LIST
46426: LIST
46427: IN
46428: NOT
46429: AND
46430: OR
46431: IFFALSE 46435
// exit ;
46433: GO 64826
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
46435: LD_VAR 0 1
46439: PUSH
46440: LD_INT 6
46442: PUSH
46443: LD_INT 7
46445: PUSH
46446: LD_INT 8
46448: PUSH
46449: LD_INT 13
46451: PUSH
46452: LD_INT 12
46454: PUSH
46455: LD_INT 15
46457: PUSH
46458: LD_INT 11
46460: PUSH
46461: LD_INT 14
46463: PUSH
46464: LD_INT 10
46466: PUSH
46467: EMPTY
46468: LIST
46469: LIST
46470: LIST
46471: LIST
46472: LIST
46473: LIST
46474: LIST
46475: LIST
46476: LIST
46477: IN
46478: IFFALSE 46488
// btype = b_lab ;
46480: LD_ADDR_VAR 0 1
46484: PUSH
46485: LD_INT 6
46487: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
46488: LD_VAR 0 6
46492: PUSH
46493: LD_INT 0
46495: PUSH
46496: LD_INT 1
46498: PUSH
46499: LD_INT 2
46501: PUSH
46502: EMPTY
46503: LIST
46504: LIST
46505: LIST
46506: IN
46507: NOT
46508: PUSH
46509: LD_VAR 0 1
46513: PUSH
46514: LD_INT 0
46516: PUSH
46517: LD_INT 1
46519: PUSH
46520: LD_INT 2
46522: PUSH
46523: LD_INT 3
46525: PUSH
46526: LD_INT 6
46528: PUSH
46529: LD_INT 36
46531: PUSH
46532: LD_INT 4
46534: PUSH
46535: LD_INT 5
46537: PUSH
46538: LD_INT 31
46540: PUSH
46541: LD_INT 32
46543: PUSH
46544: LD_INT 33
46546: PUSH
46547: EMPTY
46548: LIST
46549: LIST
46550: LIST
46551: LIST
46552: LIST
46553: LIST
46554: LIST
46555: LIST
46556: LIST
46557: LIST
46558: LIST
46559: IN
46560: NOT
46561: PUSH
46562: LD_VAR 0 6
46566: PUSH
46567: LD_INT 1
46569: EQUAL
46570: AND
46571: OR
46572: PUSH
46573: LD_VAR 0 1
46577: PUSH
46578: LD_INT 2
46580: PUSH
46581: LD_INT 3
46583: PUSH
46584: EMPTY
46585: LIST
46586: LIST
46587: IN
46588: NOT
46589: PUSH
46590: LD_VAR 0 6
46594: PUSH
46595: LD_INT 2
46597: EQUAL
46598: AND
46599: OR
46600: IFFALSE 46610
// mode = 0 ;
46602: LD_ADDR_VAR 0 6
46606: PUSH
46607: LD_INT 0
46609: ST_TO_ADDR
// case mode of 0 :
46610: LD_VAR 0 6
46614: PUSH
46615: LD_INT 0
46617: DOUBLE
46618: EQUAL
46619: IFTRUE 46623
46621: GO 58076
46623: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46624: LD_ADDR_VAR 0 11
46628: PUSH
46629: LD_INT 0
46631: PUSH
46632: LD_INT 0
46634: PUSH
46635: EMPTY
46636: LIST
46637: LIST
46638: PUSH
46639: LD_INT 0
46641: PUSH
46642: LD_INT 1
46644: NEG
46645: PUSH
46646: EMPTY
46647: LIST
46648: LIST
46649: PUSH
46650: LD_INT 1
46652: PUSH
46653: LD_INT 0
46655: PUSH
46656: EMPTY
46657: LIST
46658: LIST
46659: PUSH
46660: LD_INT 1
46662: PUSH
46663: LD_INT 1
46665: PUSH
46666: EMPTY
46667: LIST
46668: LIST
46669: PUSH
46670: LD_INT 0
46672: PUSH
46673: LD_INT 1
46675: PUSH
46676: EMPTY
46677: LIST
46678: LIST
46679: PUSH
46680: LD_INT 1
46682: NEG
46683: PUSH
46684: LD_INT 0
46686: PUSH
46687: EMPTY
46688: LIST
46689: LIST
46690: PUSH
46691: LD_INT 1
46693: NEG
46694: PUSH
46695: LD_INT 1
46697: NEG
46698: PUSH
46699: EMPTY
46700: LIST
46701: LIST
46702: PUSH
46703: LD_INT 1
46705: NEG
46706: PUSH
46707: LD_INT 2
46709: NEG
46710: PUSH
46711: EMPTY
46712: LIST
46713: LIST
46714: PUSH
46715: LD_INT 0
46717: PUSH
46718: LD_INT 2
46720: NEG
46721: PUSH
46722: EMPTY
46723: LIST
46724: LIST
46725: PUSH
46726: LD_INT 1
46728: PUSH
46729: LD_INT 1
46731: NEG
46732: PUSH
46733: EMPTY
46734: LIST
46735: LIST
46736: PUSH
46737: LD_INT 1
46739: PUSH
46740: LD_INT 2
46742: PUSH
46743: EMPTY
46744: LIST
46745: LIST
46746: PUSH
46747: LD_INT 0
46749: PUSH
46750: LD_INT 2
46752: PUSH
46753: EMPTY
46754: LIST
46755: LIST
46756: PUSH
46757: LD_INT 1
46759: NEG
46760: PUSH
46761: LD_INT 1
46763: PUSH
46764: EMPTY
46765: LIST
46766: LIST
46767: PUSH
46768: LD_INT 1
46770: PUSH
46771: LD_INT 3
46773: PUSH
46774: EMPTY
46775: LIST
46776: LIST
46777: PUSH
46778: LD_INT 0
46780: PUSH
46781: LD_INT 3
46783: PUSH
46784: EMPTY
46785: LIST
46786: LIST
46787: PUSH
46788: LD_INT 1
46790: NEG
46791: PUSH
46792: LD_INT 2
46794: PUSH
46795: EMPTY
46796: LIST
46797: LIST
46798: PUSH
46799: EMPTY
46800: LIST
46801: LIST
46802: LIST
46803: LIST
46804: LIST
46805: LIST
46806: LIST
46807: LIST
46808: LIST
46809: LIST
46810: LIST
46811: LIST
46812: LIST
46813: LIST
46814: LIST
46815: LIST
46816: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46817: LD_ADDR_VAR 0 12
46821: PUSH
46822: LD_INT 0
46824: PUSH
46825: LD_INT 0
46827: PUSH
46828: EMPTY
46829: LIST
46830: LIST
46831: PUSH
46832: LD_INT 0
46834: PUSH
46835: LD_INT 1
46837: NEG
46838: PUSH
46839: EMPTY
46840: LIST
46841: LIST
46842: PUSH
46843: LD_INT 1
46845: PUSH
46846: LD_INT 0
46848: PUSH
46849: EMPTY
46850: LIST
46851: LIST
46852: PUSH
46853: LD_INT 1
46855: PUSH
46856: LD_INT 1
46858: PUSH
46859: EMPTY
46860: LIST
46861: LIST
46862: PUSH
46863: LD_INT 0
46865: PUSH
46866: LD_INT 1
46868: PUSH
46869: EMPTY
46870: LIST
46871: LIST
46872: PUSH
46873: LD_INT 1
46875: NEG
46876: PUSH
46877: LD_INT 0
46879: PUSH
46880: EMPTY
46881: LIST
46882: LIST
46883: PUSH
46884: LD_INT 1
46886: NEG
46887: PUSH
46888: LD_INT 1
46890: NEG
46891: PUSH
46892: EMPTY
46893: LIST
46894: LIST
46895: PUSH
46896: LD_INT 1
46898: PUSH
46899: LD_INT 1
46901: NEG
46902: PUSH
46903: EMPTY
46904: LIST
46905: LIST
46906: PUSH
46907: LD_INT 2
46909: PUSH
46910: LD_INT 0
46912: PUSH
46913: EMPTY
46914: LIST
46915: LIST
46916: PUSH
46917: LD_INT 2
46919: PUSH
46920: LD_INT 1
46922: PUSH
46923: EMPTY
46924: LIST
46925: LIST
46926: PUSH
46927: LD_INT 1
46929: NEG
46930: PUSH
46931: LD_INT 1
46933: PUSH
46934: EMPTY
46935: LIST
46936: LIST
46937: PUSH
46938: LD_INT 2
46940: NEG
46941: PUSH
46942: LD_INT 0
46944: PUSH
46945: EMPTY
46946: LIST
46947: LIST
46948: PUSH
46949: LD_INT 2
46951: NEG
46952: PUSH
46953: LD_INT 1
46955: NEG
46956: PUSH
46957: EMPTY
46958: LIST
46959: LIST
46960: PUSH
46961: LD_INT 2
46963: NEG
46964: PUSH
46965: LD_INT 1
46967: PUSH
46968: EMPTY
46969: LIST
46970: LIST
46971: PUSH
46972: LD_INT 3
46974: NEG
46975: PUSH
46976: LD_INT 0
46978: PUSH
46979: EMPTY
46980: LIST
46981: LIST
46982: PUSH
46983: LD_INT 3
46985: NEG
46986: PUSH
46987: LD_INT 1
46989: NEG
46990: PUSH
46991: EMPTY
46992: LIST
46993: LIST
46994: PUSH
46995: EMPTY
46996: LIST
46997: LIST
46998: LIST
46999: LIST
47000: LIST
47001: LIST
47002: LIST
47003: LIST
47004: LIST
47005: LIST
47006: LIST
47007: LIST
47008: LIST
47009: LIST
47010: LIST
47011: LIST
47012: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47013: LD_ADDR_VAR 0 13
47017: PUSH
47018: LD_INT 0
47020: PUSH
47021: LD_INT 0
47023: PUSH
47024: EMPTY
47025: LIST
47026: LIST
47027: PUSH
47028: LD_INT 0
47030: PUSH
47031: LD_INT 1
47033: NEG
47034: PUSH
47035: EMPTY
47036: LIST
47037: LIST
47038: PUSH
47039: LD_INT 1
47041: PUSH
47042: LD_INT 0
47044: PUSH
47045: EMPTY
47046: LIST
47047: LIST
47048: PUSH
47049: LD_INT 1
47051: PUSH
47052: LD_INT 1
47054: PUSH
47055: EMPTY
47056: LIST
47057: LIST
47058: PUSH
47059: LD_INT 0
47061: PUSH
47062: LD_INT 1
47064: PUSH
47065: EMPTY
47066: LIST
47067: LIST
47068: PUSH
47069: LD_INT 1
47071: NEG
47072: PUSH
47073: LD_INT 0
47075: PUSH
47076: EMPTY
47077: LIST
47078: LIST
47079: PUSH
47080: LD_INT 1
47082: NEG
47083: PUSH
47084: LD_INT 1
47086: NEG
47087: PUSH
47088: EMPTY
47089: LIST
47090: LIST
47091: PUSH
47092: LD_INT 1
47094: NEG
47095: PUSH
47096: LD_INT 2
47098: NEG
47099: PUSH
47100: EMPTY
47101: LIST
47102: LIST
47103: PUSH
47104: LD_INT 2
47106: PUSH
47107: LD_INT 1
47109: PUSH
47110: EMPTY
47111: LIST
47112: LIST
47113: PUSH
47114: LD_INT 2
47116: PUSH
47117: LD_INT 2
47119: PUSH
47120: EMPTY
47121: LIST
47122: LIST
47123: PUSH
47124: LD_INT 1
47126: PUSH
47127: LD_INT 2
47129: PUSH
47130: EMPTY
47131: LIST
47132: LIST
47133: PUSH
47134: LD_INT 2
47136: NEG
47137: PUSH
47138: LD_INT 1
47140: NEG
47141: PUSH
47142: EMPTY
47143: LIST
47144: LIST
47145: PUSH
47146: LD_INT 2
47148: NEG
47149: PUSH
47150: LD_INT 2
47152: NEG
47153: PUSH
47154: EMPTY
47155: LIST
47156: LIST
47157: PUSH
47158: LD_INT 2
47160: NEG
47161: PUSH
47162: LD_INT 3
47164: NEG
47165: PUSH
47166: EMPTY
47167: LIST
47168: LIST
47169: PUSH
47170: LD_INT 3
47172: NEG
47173: PUSH
47174: LD_INT 2
47176: NEG
47177: PUSH
47178: EMPTY
47179: LIST
47180: LIST
47181: PUSH
47182: LD_INT 3
47184: NEG
47185: PUSH
47186: LD_INT 3
47188: NEG
47189: PUSH
47190: EMPTY
47191: LIST
47192: LIST
47193: PUSH
47194: EMPTY
47195: LIST
47196: LIST
47197: LIST
47198: LIST
47199: LIST
47200: LIST
47201: LIST
47202: LIST
47203: LIST
47204: LIST
47205: LIST
47206: LIST
47207: LIST
47208: LIST
47209: LIST
47210: LIST
47211: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47212: LD_ADDR_VAR 0 14
47216: PUSH
47217: LD_INT 0
47219: PUSH
47220: LD_INT 0
47222: PUSH
47223: EMPTY
47224: LIST
47225: LIST
47226: PUSH
47227: LD_INT 0
47229: PUSH
47230: LD_INT 1
47232: NEG
47233: PUSH
47234: EMPTY
47235: LIST
47236: LIST
47237: PUSH
47238: LD_INT 1
47240: PUSH
47241: LD_INT 0
47243: PUSH
47244: EMPTY
47245: LIST
47246: LIST
47247: PUSH
47248: LD_INT 1
47250: PUSH
47251: LD_INT 1
47253: PUSH
47254: EMPTY
47255: LIST
47256: LIST
47257: PUSH
47258: LD_INT 0
47260: PUSH
47261: LD_INT 1
47263: PUSH
47264: EMPTY
47265: LIST
47266: LIST
47267: PUSH
47268: LD_INT 1
47270: NEG
47271: PUSH
47272: LD_INT 0
47274: PUSH
47275: EMPTY
47276: LIST
47277: LIST
47278: PUSH
47279: LD_INT 1
47281: NEG
47282: PUSH
47283: LD_INT 1
47285: NEG
47286: PUSH
47287: EMPTY
47288: LIST
47289: LIST
47290: PUSH
47291: LD_INT 1
47293: NEG
47294: PUSH
47295: LD_INT 2
47297: NEG
47298: PUSH
47299: EMPTY
47300: LIST
47301: LIST
47302: PUSH
47303: LD_INT 0
47305: PUSH
47306: LD_INT 2
47308: NEG
47309: PUSH
47310: EMPTY
47311: LIST
47312: LIST
47313: PUSH
47314: LD_INT 1
47316: PUSH
47317: LD_INT 1
47319: NEG
47320: PUSH
47321: EMPTY
47322: LIST
47323: LIST
47324: PUSH
47325: LD_INT 1
47327: PUSH
47328: LD_INT 2
47330: PUSH
47331: EMPTY
47332: LIST
47333: LIST
47334: PUSH
47335: LD_INT 0
47337: PUSH
47338: LD_INT 2
47340: PUSH
47341: EMPTY
47342: LIST
47343: LIST
47344: PUSH
47345: LD_INT 1
47347: NEG
47348: PUSH
47349: LD_INT 1
47351: PUSH
47352: EMPTY
47353: LIST
47354: LIST
47355: PUSH
47356: LD_INT 1
47358: NEG
47359: PUSH
47360: LD_INT 3
47362: NEG
47363: PUSH
47364: EMPTY
47365: LIST
47366: LIST
47367: PUSH
47368: LD_INT 0
47370: PUSH
47371: LD_INT 3
47373: NEG
47374: PUSH
47375: EMPTY
47376: LIST
47377: LIST
47378: PUSH
47379: LD_INT 1
47381: PUSH
47382: LD_INT 2
47384: NEG
47385: PUSH
47386: EMPTY
47387: LIST
47388: LIST
47389: PUSH
47390: EMPTY
47391: LIST
47392: LIST
47393: LIST
47394: LIST
47395: LIST
47396: LIST
47397: LIST
47398: LIST
47399: LIST
47400: LIST
47401: LIST
47402: LIST
47403: LIST
47404: LIST
47405: LIST
47406: LIST
47407: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47408: LD_ADDR_VAR 0 15
47412: PUSH
47413: LD_INT 0
47415: PUSH
47416: LD_INT 0
47418: PUSH
47419: EMPTY
47420: LIST
47421: LIST
47422: PUSH
47423: LD_INT 0
47425: PUSH
47426: LD_INT 1
47428: NEG
47429: PUSH
47430: EMPTY
47431: LIST
47432: LIST
47433: PUSH
47434: LD_INT 1
47436: PUSH
47437: LD_INT 0
47439: PUSH
47440: EMPTY
47441: LIST
47442: LIST
47443: PUSH
47444: LD_INT 1
47446: PUSH
47447: LD_INT 1
47449: PUSH
47450: EMPTY
47451: LIST
47452: LIST
47453: PUSH
47454: LD_INT 0
47456: PUSH
47457: LD_INT 1
47459: PUSH
47460: EMPTY
47461: LIST
47462: LIST
47463: PUSH
47464: LD_INT 1
47466: NEG
47467: PUSH
47468: LD_INT 0
47470: PUSH
47471: EMPTY
47472: LIST
47473: LIST
47474: PUSH
47475: LD_INT 1
47477: NEG
47478: PUSH
47479: LD_INT 1
47481: NEG
47482: PUSH
47483: EMPTY
47484: LIST
47485: LIST
47486: PUSH
47487: LD_INT 1
47489: PUSH
47490: LD_INT 1
47492: NEG
47493: PUSH
47494: EMPTY
47495: LIST
47496: LIST
47497: PUSH
47498: LD_INT 2
47500: PUSH
47501: LD_INT 0
47503: PUSH
47504: EMPTY
47505: LIST
47506: LIST
47507: PUSH
47508: LD_INT 2
47510: PUSH
47511: LD_INT 1
47513: PUSH
47514: EMPTY
47515: LIST
47516: LIST
47517: PUSH
47518: LD_INT 1
47520: NEG
47521: PUSH
47522: LD_INT 1
47524: PUSH
47525: EMPTY
47526: LIST
47527: LIST
47528: PUSH
47529: LD_INT 2
47531: NEG
47532: PUSH
47533: LD_INT 0
47535: PUSH
47536: EMPTY
47537: LIST
47538: LIST
47539: PUSH
47540: LD_INT 2
47542: NEG
47543: PUSH
47544: LD_INT 1
47546: NEG
47547: PUSH
47548: EMPTY
47549: LIST
47550: LIST
47551: PUSH
47552: LD_INT 2
47554: PUSH
47555: LD_INT 1
47557: NEG
47558: PUSH
47559: EMPTY
47560: LIST
47561: LIST
47562: PUSH
47563: LD_INT 3
47565: PUSH
47566: LD_INT 0
47568: PUSH
47569: EMPTY
47570: LIST
47571: LIST
47572: PUSH
47573: LD_INT 3
47575: PUSH
47576: LD_INT 1
47578: PUSH
47579: EMPTY
47580: LIST
47581: LIST
47582: PUSH
47583: EMPTY
47584: LIST
47585: LIST
47586: LIST
47587: LIST
47588: LIST
47589: LIST
47590: LIST
47591: LIST
47592: LIST
47593: LIST
47594: LIST
47595: LIST
47596: LIST
47597: LIST
47598: LIST
47599: LIST
47600: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47601: LD_ADDR_VAR 0 16
47605: PUSH
47606: LD_INT 0
47608: PUSH
47609: LD_INT 0
47611: PUSH
47612: EMPTY
47613: LIST
47614: LIST
47615: PUSH
47616: LD_INT 0
47618: PUSH
47619: LD_INT 1
47621: NEG
47622: PUSH
47623: EMPTY
47624: LIST
47625: LIST
47626: PUSH
47627: LD_INT 1
47629: PUSH
47630: LD_INT 0
47632: PUSH
47633: EMPTY
47634: LIST
47635: LIST
47636: PUSH
47637: LD_INT 1
47639: PUSH
47640: LD_INT 1
47642: PUSH
47643: EMPTY
47644: LIST
47645: LIST
47646: PUSH
47647: LD_INT 0
47649: PUSH
47650: LD_INT 1
47652: PUSH
47653: EMPTY
47654: LIST
47655: LIST
47656: PUSH
47657: LD_INT 1
47659: NEG
47660: PUSH
47661: LD_INT 0
47663: PUSH
47664: EMPTY
47665: LIST
47666: LIST
47667: PUSH
47668: LD_INT 1
47670: NEG
47671: PUSH
47672: LD_INT 1
47674: NEG
47675: PUSH
47676: EMPTY
47677: LIST
47678: LIST
47679: PUSH
47680: LD_INT 1
47682: NEG
47683: PUSH
47684: LD_INT 2
47686: NEG
47687: PUSH
47688: EMPTY
47689: LIST
47690: LIST
47691: PUSH
47692: LD_INT 2
47694: PUSH
47695: LD_INT 1
47697: PUSH
47698: EMPTY
47699: LIST
47700: LIST
47701: PUSH
47702: LD_INT 2
47704: PUSH
47705: LD_INT 2
47707: PUSH
47708: EMPTY
47709: LIST
47710: LIST
47711: PUSH
47712: LD_INT 1
47714: PUSH
47715: LD_INT 2
47717: PUSH
47718: EMPTY
47719: LIST
47720: LIST
47721: PUSH
47722: LD_INT 2
47724: NEG
47725: PUSH
47726: LD_INT 1
47728: NEG
47729: PUSH
47730: EMPTY
47731: LIST
47732: LIST
47733: PUSH
47734: LD_INT 2
47736: NEG
47737: PUSH
47738: LD_INT 2
47740: NEG
47741: PUSH
47742: EMPTY
47743: LIST
47744: LIST
47745: PUSH
47746: LD_INT 3
47748: PUSH
47749: LD_INT 2
47751: PUSH
47752: EMPTY
47753: LIST
47754: LIST
47755: PUSH
47756: LD_INT 3
47758: PUSH
47759: LD_INT 3
47761: PUSH
47762: EMPTY
47763: LIST
47764: LIST
47765: PUSH
47766: LD_INT 2
47768: PUSH
47769: LD_INT 3
47771: PUSH
47772: EMPTY
47773: LIST
47774: LIST
47775: PUSH
47776: EMPTY
47777: LIST
47778: LIST
47779: LIST
47780: LIST
47781: LIST
47782: LIST
47783: LIST
47784: LIST
47785: LIST
47786: LIST
47787: LIST
47788: LIST
47789: LIST
47790: LIST
47791: LIST
47792: LIST
47793: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47794: LD_ADDR_VAR 0 17
47798: PUSH
47799: LD_INT 0
47801: PUSH
47802: LD_INT 0
47804: PUSH
47805: EMPTY
47806: LIST
47807: LIST
47808: PUSH
47809: LD_INT 0
47811: PUSH
47812: LD_INT 1
47814: NEG
47815: PUSH
47816: EMPTY
47817: LIST
47818: LIST
47819: PUSH
47820: LD_INT 1
47822: PUSH
47823: LD_INT 0
47825: PUSH
47826: EMPTY
47827: LIST
47828: LIST
47829: PUSH
47830: LD_INT 1
47832: PUSH
47833: LD_INT 1
47835: PUSH
47836: EMPTY
47837: LIST
47838: LIST
47839: PUSH
47840: LD_INT 0
47842: PUSH
47843: LD_INT 1
47845: PUSH
47846: EMPTY
47847: LIST
47848: LIST
47849: PUSH
47850: LD_INT 1
47852: NEG
47853: PUSH
47854: LD_INT 0
47856: PUSH
47857: EMPTY
47858: LIST
47859: LIST
47860: PUSH
47861: LD_INT 1
47863: NEG
47864: PUSH
47865: LD_INT 1
47867: NEG
47868: PUSH
47869: EMPTY
47870: LIST
47871: LIST
47872: PUSH
47873: LD_INT 1
47875: NEG
47876: PUSH
47877: LD_INT 2
47879: NEG
47880: PUSH
47881: EMPTY
47882: LIST
47883: LIST
47884: PUSH
47885: LD_INT 0
47887: PUSH
47888: LD_INT 2
47890: NEG
47891: PUSH
47892: EMPTY
47893: LIST
47894: LIST
47895: PUSH
47896: LD_INT 1
47898: PUSH
47899: LD_INT 1
47901: NEG
47902: PUSH
47903: EMPTY
47904: LIST
47905: LIST
47906: PUSH
47907: LD_INT 2
47909: PUSH
47910: LD_INT 0
47912: PUSH
47913: EMPTY
47914: LIST
47915: LIST
47916: PUSH
47917: LD_INT 2
47919: PUSH
47920: LD_INT 1
47922: PUSH
47923: EMPTY
47924: LIST
47925: LIST
47926: PUSH
47927: LD_INT 2
47929: PUSH
47930: LD_INT 2
47932: PUSH
47933: EMPTY
47934: LIST
47935: LIST
47936: PUSH
47937: LD_INT 1
47939: PUSH
47940: LD_INT 2
47942: PUSH
47943: EMPTY
47944: LIST
47945: LIST
47946: PUSH
47947: LD_INT 0
47949: PUSH
47950: LD_INT 2
47952: PUSH
47953: EMPTY
47954: LIST
47955: LIST
47956: PUSH
47957: LD_INT 1
47959: NEG
47960: PUSH
47961: LD_INT 1
47963: PUSH
47964: EMPTY
47965: LIST
47966: LIST
47967: PUSH
47968: LD_INT 2
47970: NEG
47971: PUSH
47972: LD_INT 0
47974: PUSH
47975: EMPTY
47976: LIST
47977: LIST
47978: PUSH
47979: LD_INT 2
47981: NEG
47982: PUSH
47983: LD_INT 1
47985: NEG
47986: PUSH
47987: EMPTY
47988: LIST
47989: LIST
47990: PUSH
47991: LD_INT 2
47993: NEG
47994: PUSH
47995: LD_INT 2
47997: NEG
47998: PUSH
47999: EMPTY
48000: LIST
48001: LIST
48002: PUSH
48003: EMPTY
48004: LIST
48005: LIST
48006: LIST
48007: LIST
48008: LIST
48009: LIST
48010: LIST
48011: LIST
48012: LIST
48013: LIST
48014: LIST
48015: LIST
48016: LIST
48017: LIST
48018: LIST
48019: LIST
48020: LIST
48021: LIST
48022: LIST
48023: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48024: LD_ADDR_VAR 0 18
48028: PUSH
48029: LD_INT 0
48031: PUSH
48032: LD_INT 0
48034: PUSH
48035: EMPTY
48036: LIST
48037: LIST
48038: PUSH
48039: LD_INT 0
48041: PUSH
48042: LD_INT 1
48044: NEG
48045: PUSH
48046: EMPTY
48047: LIST
48048: LIST
48049: PUSH
48050: LD_INT 1
48052: PUSH
48053: LD_INT 0
48055: PUSH
48056: EMPTY
48057: LIST
48058: LIST
48059: PUSH
48060: LD_INT 1
48062: PUSH
48063: LD_INT 1
48065: PUSH
48066: EMPTY
48067: LIST
48068: LIST
48069: PUSH
48070: LD_INT 0
48072: PUSH
48073: LD_INT 1
48075: PUSH
48076: EMPTY
48077: LIST
48078: LIST
48079: PUSH
48080: LD_INT 1
48082: NEG
48083: PUSH
48084: LD_INT 0
48086: PUSH
48087: EMPTY
48088: LIST
48089: LIST
48090: PUSH
48091: LD_INT 1
48093: NEG
48094: PUSH
48095: LD_INT 1
48097: NEG
48098: PUSH
48099: EMPTY
48100: LIST
48101: LIST
48102: PUSH
48103: LD_INT 1
48105: NEG
48106: PUSH
48107: LD_INT 2
48109: NEG
48110: PUSH
48111: EMPTY
48112: LIST
48113: LIST
48114: PUSH
48115: LD_INT 0
48117: PUSH
48118: LD_INT 2
48120: NEG
48121: PUSH
48122: EMPTY
48123: LIST
48124: LIST
48125: PUSH
48126: LD_INT 1
48128: PUSH
48129: LD_INT 1
48131: NEG
48132: PUSH
48133: EMPTY
48134: LIST
48135: LIST
48136: PUSH
48137: LD_INT 2
48139: PUSH
48140: LD_INT 0
48142: PUSH
48143: EMPTY
48144: LIST
48145: LIST
48146: PUSH
48147: LD_INT 2
48149: PUSH
48150: LD_INT 1
48152: PUSH
48153: EMPTY
48154: LIST
48155: LIST
48156: PUSH
48157: LD_INT 2
48159: PUSH
48160: LD_INT 2
48162: PUSH
48163: EMPTY
48164: LIST
48165: LIST
48166: PUSH
48167: LD_INT 1
48169: PUSH
48170: LD_INT 2
48172: PUSH
48173: EMPTY
48174: LIST
48175: LIST
48176: PUSH
48177: LD_INT 0
48179: PUSH
48180: LD_INT 2
48182: PUSH
48183: EMPTY
48184: LIST
48185: LIST
48186: PUSH
48187: LD_INT 1
48189: NEG
48190: PUSH
48191: LD_INT 1
48193: PUSH
48194: EMPTY
48195: LIST
48196: LIST
48197: PUSH
48198: LD_INT 2
48200: NEG
48201: PUSH
48202: LD_INT 0
48204: PUSH
48205: EMPTY
48206: LIST
48207: LIST
48208: PUSH
48209: LD_INT 2
48211: NEG
48212: PUSH
48213: LD_INT 1
48215: NEG
48216: PUSH
48217: EMPTY
48218: LIST
48219: LIST
48220: PUSH
48221: LD_INT 2
48223: NEG
48224: PUSH
48225: LD_INT 2
48227: NEG
48228: PUSH
48229: EMPTY
48230: LIST
48231: LIST
48232: PUSH
48233: EMPTY
48234: LIST
48235: LIST
48236: LIST
48237: LIST
48238: LIST
48239: LIST
48240: LIST
48241: LIST
48242: LIST
48243: LIST
48244: LIST
48245: LIST
48246: LIST
48247: LIST
48248: LIST
48249: LIST
48250: LIST
48251: LIST
48252: LIST
48253: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48254: LD_ADDR_VAR 0 19
48258: PUSH
48259: LD_INT 0
48261: PUSH
48262: LD_INT 0
48264: PUSH
48265: EMPTY
48266: LIST
48267: LIST
48268: PUSH
48269: LD_INT 0
48271: PUSH
48272: LD_INT 1
48274: NEG
48275: PUSH
48276: EMPTY
48277: LIST
48278: LIST
48279: PUSH
48280: LD_INT 1
48282: PUSH
48283: LD_INT 0
48285: PUSH
48286: EMPTY
48287: LIST
48288: LIST
48289: PUSH
48290: LD_INT 1
48292: PUSH
48293: LD_INT 1
48295: PUSH
48296: EMPTY
48297: LIST
48298: LIST
48299: PUSH
48300: LD_INT 0
48302: PUSH
48303: LD_INT 1
48305: PUSH
48306: EMPTY
48307: LIST
48308: LIST
48309: PUSH
48310: LD_INT 1
48312: NEG
48313: PUSH
48314: LD_INT 0
48316: PUSH
48317: EMPTY
48318: LIST
48319: LIST
48320: PUSH
48321: LD_INT 1
48323: NEG
48324: PUSH
48325: LD_INT 1
48327: NEG
48328: PUSH
48329: EMPTY
48330: LIST
48331: LIST
48332: PUSH
48333: LD_INT 1
48335: NEG
48336: PUSH
48337: LD_INT 2
48339: NEG
48340: PUSH
48341: EMPTY
48342: LIST
48343: LIST
48344: PUSH
48345: LD_INT 0
48347: PUSH
48348: LD_INT 2
48350: NEG
48351: PUSH
48352: EMPTY
48353: LIST
48354: LIST
48355: PUSH
48356: LD_INT 1
48358: PUSH
48359: LD_INT 1
48361: NEG
48362: PUSH
48363: EMPTY
48364: LIST
48365: LIST
48366: PUSH
48367: LD_INT 2
48369: PUSH
48370: LD_INT 0
48372: PUSH
48373: EMPTY
48374: LIST
48375: LIST
48376: PUSH
48377: LD_INT 2
48379: PUSH
48380: LD_INT 1
48382: PUSH
48383: EMPTY
48384: LIST
48385: LIST
48386: PUSH
48387: LD_INT 2
48389: PUSH
48390: LD_INT 2
48392: PUSH
48393: EMPTY
48394: LIST
48395: LIST
48396: PUSH
48397: LD_INT 1
48399: PUSH
48400: LD_INT 2
48402: PUSH
48403: EMPTY
48404: LIST
48405: LIST
48406: PUSH
48407: LD_INT 0
48409: PUSH
48410: LD_INT 2
48412: PUSH
48413: EMPTY
48414: LIST
48415: LIST
48416: PUSH
48417: LD_INT 1
48419: NEG
48420: PUSH
48421: LD_INT 1
48423: PUSH
48424: EMPTY
48425: LIST
48426: LIST
48427: PUSH
48428: LD_INT 2
48430: NEG
48431: PUSH
48432: LD_INT 0
48434: PUSH
48435: EMPTY
48436: LIST
48437: LIST
48438: PUSH
48439: LD_INT 2
48441: NEG
48442: PUSH
48443: LD_INT 1
48445: NEG
48446: PUSH
48447: EMPTY
48448: LIST
48449: LIST
48450: PUSH
48451: LD_INT 2
48453: NEG
48454: PUSH
48455: LD_INT 2
48457: NEG
48458: PUSH
48459: EMPTY
48460: LIST
48461: LIST
48462: PUSH
48463: EMPTY
48464: LIST
48465: LIST
48466: LIST
48467: LIST
48468: LIST
48469: LIST
48470: LIST
48471: LIST
48472: LIST
48473: LIST
48474: LIST
48475: LIST
48476: LIST
48477: LIST
48478: LIST
48479: LIST
48480: LIST
48481: LIST
48482: LIST
48483: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48484: LD_ADDR_VAR 0 20
48488: PUSH
48489: LD_INT 0
48491: PUSH
48492: LD_INT 0
48494: PUSH
48495: EMPTY
48496: LIST
48497: LIST
48498: PUSH
48499: LD_INT 0
48501: PUSH
48502: LD_INT 1
48504: NEG
48505: PUSH
48506: EMPTY
48507: LIST
48508: LIST
48509: PUSH
48510: LD_INT 1
48512: PUSH
48513: LD_INT 0
48515: PUSH
48516: EMPTY
48517: LIST
48518: LIST
48519: PUSH
48520: LD_INT 1
48522: PUSH
48523: LD_INT 1
48525: PUSH
48526: EMPTY
48527: LIST
48528: LIST
48529: PUSH
48530: LD_INT 0
48532: PUSH
48533: LD_INT 1
48535: PUSH
48536: EMPTY
48537: LIST
48538: LIST
48539: PUSH
48540: LD_INT 1
48542: NEG
48543: PUSH
48544: LD_INT 0
48546: PUSH
48547: EMPTY
48548: LIST
48549: LIST
48550: PUSH
48551: LD_INT 1
48553: NEG
48554: PUSH
48555: LD_INT 1
48557: NEG
48558: PUSH
48559: EMPTY
48560: LIST
48561: LIST
48562: PUSH
48563: LD_INT 1
48565: NEG
48566: PUSH
48567: LD_INT 2
48569: NEG
48570: PUSH
48571: EMPTY
48572: LIST
48573: LIST
48574: PUSH
48575: LD_INT 0
48577: PUSH
48578: LD_INT 2
48580: NEG
48581: PUSH
48582: EMPTY
48583: LIST
48584: LIST
48585: PUSH
48586: LD_INT 1
48588: PUSH
48589: LD_INT 1
48591: NEG
48592: PUSH
48593: EMPTY
48594: LIST
48595: LIST
48596: PUSH
48597: LD_INT 2
48599: PUSH
48600: LD_INT 0
48602: PUSH
48603: EMPTY
48604: LIST
48605: LIST
48606: PUSH
48607: LD_INT 2
48609: PUSH
48610: LD_INT 1
48612: PUSH
48613: EMPTY
48614: LIST
48615: LIST
48616: PUSH
48617: LD_INT 2
48619: PUSH
48620: LD_INT 2
48622: PUSH
48623: EMPTY
48624: LIST
48625: LIST
48626: PUSH
48627: LD_INT 1
48629: PUSH
48630: LD_INT 2
48632: PUSH
48633: EMPTY
48634: LIST
48635: LIST
48636: PUSH
48637: LD_INT 0
48639: PUSH
48640: LD_INT 2
48642: PUSH
48643: EMPTY
48644: LIST
48645: LIST
48646: PUSH
48647: LD_INT 1
48649: NEG
48650: PUSH
48651: LD_INT 1
48653: PUSH
48654: EMPTY
48655: LIST
48656: LIST
48657: PUSH
48658: LD_INT 2
48660: NEG
48661: PUSH
48662: LD_INT 0
48664: PUSH
48665: EMPTY
48666: LIST
48667: LIST
48668: PUSH
48669: LD_INT 2
48671: NEG
48672: PUSH
48673: LD_INT 1
48675: NEG
48676: PUSH
48677: EMPTY
48678: LIST
48679: LIST
48680: PUSH
48681: LD_INT 2
48683: NEG
48684: PUSH
48685: LD_INT 2
48687: NEG
48688: PUSH
48689: EMPTY
48690: LIST
48691: LIST
48692: PUSH
48693: EMPTY
48694: LIST
48695: LIST
48696: LIST
48697: LIST
48698: LIST
48699: LIST
48700: LIST
48701: LIST
48702: LIST
48703: LIST
48704: LIST
48705: LIST
48706: LIST
48707: LIST
48708: LIST
48709: LIST
48710: LIST
48711: LIST
48712: LIST
48713: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48714: LD_ADDR_VAR 0 21
48718: PUSH
48719: LD_INT 0
48721: PUSH
48722: LD_INT 0
48724: PUSH
48725: EMPTY
48726: LIST
48727: LIST
48728: PUSH
48729: LD_INT 0
48731: PUSH
48732: LD_INT 1
48734: NEG
48735: PUSH
48736: EMPTY
48737: LIST
48738: LIST
48739: PUSH
48740: LD_INT 1
48742: PUSH
48743: LD_INT 0
48745: PUSH
48746: EMPTY
48747: LIST
48748: LIST
48749: PUSH
48750: LD_INT 1
48752: PUSH
48753: LD_INT 1
48755: PUSH
48756: EMPTY
48757: LIST
48758: LIST
48759: PUSH
48760: LD_INT 0
48762: PUSH
48763: LD_INT 1
48765: PUSH
48766: EMPTY
48767: LIST
48768: LIST
48769: PUSH
48770: LD_INT 1
48772: NEG
48773: PUSH
48774: LD_INT 0
48776: PUSH
48777: EMPTY
48778: LIST
48779: LIST
48780: PUSH
48781: LD_INT 1
48783: NEG
48784: PUSH
48785: LD_INT 1
48787: NEG
48788: PUSH
48789: EMPTY
48790: LIST
48791: LIST
48792: PUSH
48793: LD_INT 1
48795: NEG
48796: PUSH
48797: LD_INT 2
48799: NEG
48800: PUSH
48801: EMPTY
48802: LIST
48803: LIST
48804: PUSH
48805: LD_INT 0
48807: PUSH
48808: LD_INT 2
48810: NEG
48811: PUSH
48812: EMPTY
48813: LIST
48814: LIST
48815: PUSH
48816: LD_INT 1
48818: PUSH
48819: LD_INT 1
48821: NEG
48822: PUSH
48823: EMPTY
48824: LIST
48825: LIST
48826: PUSH
48827: LD_INT 2
48829: PUSH
48830: LD_INT 0
48832: PUSH
48833: EMPTY
48834: LIST
48835: LIST
48836: PUSH
48837: LD_INT 2
48839: PUSH
48840: LD_INT 1
48842: PUSH
48843: EMPTY
48844: LIST
48845: LIST
48846: PUSH
48847: LD_INT 2
48849: PUSH
48850: LD_INT 2
48852: PUSH
48853: EMPTY
48854: LIST
48855: LIST
48856: PUSH
48857: LD_INT 1
48859: PUSH
48860: LD_INT 2
48862: PUSH
48863: EMPTY
48864: LIST
48865: LIST
48866: PUSH
48867: LD_INT 0
48869: PUSH
48870: LD_INT 2
48872: PUSH
48873: EMPTY
48874: LIST
48875: LIST
48876: PUSH
48877: LD_INT 1
48879: NEG
48880: PUSH
48881: LD_INT 1
48883: PUSH
48884: EMPTY
48885: LIST
48886: LIST
48887: PUSH
48888: LD_INT 2
48890: NEG
48891: PUSH
48892: LD_INT 0
48894: PUSH
48895: EMPTY
48896: LIST
48897: LIST
48898: PUSH
48899: LD_INT 2
48901: NEG
48902: PUSH
48903: LD_INT 1
48905: NEG
48906: PUSH
48907: EMPTY
48908: LIST
48909: LIST
48910: PUSH
48911: LD_INT 2
48913: NEG
48914: PUSH
48915: LD_INT 2
48917: NEG
48918: PUSH
48919: EMPTY
48920: LIST
48921: LIST
48922: PUSH
48923: EMPTY
48924: LIST
48925: LIST
48926: LIST
48927: LIST
48928: LIST
48929: LIST
48930: LIST
48931: LIST
48932: LIST
48933: LIST
48934: LIST
48935: LIST
48936: LIST
48937: LIST
48938: LIST
48939: LIST
48940: LIST
48941: LIST
48942: LIST
48943: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48944: LD_ADDR_VAR 0 22
48948: PUSH
48949: LD_INT 0
48951: PUSH
48952: LD_INT 0
48954: PUSH
48955: EMPTY
48956: LIST
48957: LIST
48958: PUSH
48959: LD_INT 0
48961: PUSH
48962: LD_INT 1
48964: NEG
48965: PUSH
48966: EMPTY
48967: LIST
48968: LIST
48969: PUSH
48970: LD_INT 1
48972: PUSH
48973: LD_INT 0
48975: PUSH
48976: EMPTY
48977: LIST
48978: LIST
48979: PUSH
48980: LD_INT 1
48982: PUSH
48983: LD_INT 1
48985: PUSH
48986: EMPTY
48987: LIST
48988: LIST
48989: PUSH
48990: LD_INT 0
48992: PUSH
48993: LD_INT 1
48995: PUSH
48996: EMPTY
48997: LIST
48998: LIST
48999: PUSH
49000: LD_INT 1
49002: NEG
49003: PUSH
49004: LD_INT 0
49006: PUSH
49007: EMPTY
49008: LIST
49009: LIST
49010: PUSH
49011: LD_INT 1
49013: NEG
49014: PUSH
49015: LD_INT 1
49017: NEG
49018: PUSH
49019: EMPTY
49020: LIST
49021: LIST
49022: PUSH
49023: LD_INT 1
49025: NEG
49026: PUSH
49027: LD_INT 2
49029: NEG
49030: PUSH
49031: EMPTY
49032: LIST
49033: LIST
49034: PUSH
49035: LD_INT 0
49037: PUSH
49038: LD_INT 2
49040: NEG
49041: PUSH
49042: EMPTY
49043: LIST
49044: LIST
49045: PUSH
49046: LD_INT 1
49048: PUSH
49049: LD_INT 1
49051: NEG
49052: PUSH
49053: EMPTY
49054: LIST
49055: LIST
49056: PUSH
49057: LD_INT 2
49059: PUSH
49060: LD_INT 0
49062: PUSH
49063: EMPTY
49064: LIST
49065: LIST
49066: PUSH
49067: LD_INT 2
49069: PUSH
49070: LD_INT 1
49072: PUSH
49073: EMPTY
49074: LIST
49075: LIST
49076: PUSH
49077: LD_INT 2
49079: PUSH
49080: LD_INT 2
49082: PUSH
49083: EMPTY
49084: LIST
49085: LIST
49086: PUSH
49087: LD_INT 1
49089: PUSH
49090: LD_INT 2
49092: PUSH
49093: EMPTY
49094: LIST
49095: LIST
49096: PUSH
49097: LD_INT 0
49099: PUSH
49100: LD_INT 2
49102: PUSH
49103: EMPTY
49104: LIST
49105: LIST
49106: PUSH
49107: LD_INT 1
49109: NEG
49110: PUSH
49111: LD_INT 1
49113: PUSH
49114: EMPTY
49115: LIST
49116: LIST
49117: PUSH
49118: LD_INT 2
49120: NEG
49121: PUSH
49122: LD_INT 0
49124: PUSH
49125: EMPTY
49126: LIST
49127: LIST
49128: PUSH
49129: LD_INT 2
49131: NEG
49132: PUSH
49133: LD_INT 1
49135: NEG
49136: PUSH
49137: EMPTY
49138: LIST
49139: LIST
49140: PUSH
49141: LD_INT 2
49143: NEG
49144: PUSH
49145: LD_INT 2
49147: NEG
49148: PUSH
49149: EMPTY
49150: LIST
49151: LIST
49152: PUSH
49153: EMPTY
49154: LIST
49155: LIST
49156: LIST
49157: LIST
49158: LIST
49159: LIST
49160: LIST
49161: LIST
49162: LIST
49163: LIST
49164: LIST
49165: LIST
49166: LIST
49167: LIST
49168: LIST
49169: LIST
49170: LIST
49171: LIST
49172: LIST
49173: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
49174: LD_ADDR_VAR 0 23
49178: PUSH
49179: LD_INT 0
49181: PUSH
49182: LD_INT 0
49184: PUSH
49185: EMPTY
49186: LIST
49187: LIST
49188: PUSH
49189: LD_INT 0
49191: PUSH
49192: LD_INT 1
49194: NEG
49195: PUSH
49196: EMPTY
49197: LIST
49198: LIST
49199: PUSH
49200: LD_INT 1
49202: PUSH
49203: LD_INT 0
49205: PUSH
49206: EMPTY
49207: LIST
49208: LIST
49209: PUSH
49210: LD_INT 1
49212: PUSH
49213: LD_INT 1
49215: PUSH
49216: EMPTY
49217: LIST
49218: LIST
49219: PUSH
49220: LD_INT 0
49222: PUSH
49223: LD_INT 1
49225: PUSH
49226: EMPTY
49227: LIST
49228: LIST
49229: PUSH
49230: LD_INT 1
49232: NEG
49233: PUSH
49234: LD_INT 0
49236: PUSH
49237: EMPTY
49238: LIST
49239: LIST
49240: PUSH
49241: LD_INT 1
49243: NEG
49244: PUSH
49245: LD_INT 1
49247: NEG
49248: PUSH
49249: EMPTY
49250: LIST
49251: LIST
49252: PUSH
49253: LD_INT 1
49255: NEG
49256: PUSH
49257: LD_INT 2
49259: NEG
49260: PUSH
49261: EMPTY
49262: LIST
49263: LIST
49264: PUSH
49265: LD_INT 0
49267: PUSH
49268: LD_INT 2
49270: NEG
49271: PUSH
49272: EMPTY
49273: LIST
49274: LIST
49275: PUSH
49276: LD_INT 1
49278: PUSH
49279: LD_INT 1
49281: NEG
49282: PUSH
49283: EMPTY
49284: LIST
49285: LIST
49286: PUSH
49287: LD_INT 2
49289: PUSH
49290: LD_INT 0
49292: PUSH
49293: EMPTY
49294: LIST
49295: LIST
49296: PUSH
49297: LD_INT 2
49299: PUSH
49300: LD_INT 1
49302: PUSH
49303: EMPTY
49304: LIST
49305: LIST
49306: PUSH
49307: LD_INT 2
49309: PUSH
49310: LD_INT 2
49312: PUSH
49313: EMPTY
49314: LIST
49315: LIST
49316: PUSH
49317: LD_INT 1
49319: PUSH
49320: LD_INT 2
49322: PUSH
49323: EMPTY
49324: LIST
49325: LIST
49326: PUSH
49327: LD_INT 0
49329: PUSH
49330: LD_INT 2
49332: PUSH
49333: EMPTY
49334: LIST
49335: LIST
49336: PUSH
49337: LD_INT 1
49339: NEG
49340: PUSH
49341: LD_INT 1
49343: PUSH
49344: EMPTY
49345: LIST
49346: LIST
49347: PUSH
49348: LD_INT 2
49350: NEG
49351: PUSH
49352: LD_INT 0
49354: PUSH
49355: EMPTY
49356: LIST
49357: LIST
49358: PUSH
49359: LD_INT 2
49361: NEG
49362: PUSH
49363: LD_INT 1
49365: NEG
49366: PUSH
49367: EMPTY
49368: LIST
49369: LIST
49370: PUSH
49371: LD_INT 2
49373: NEG
49374: PUSH
49375: LD_INT 2
49377: NEG
49378: PUSH
49379: EMPTY
49380: LIST
49381: LIST
49382: PUSH
49383: LD_INT 2
49385: NEG
49386: PUSH
49387: LD_INT 3
49389: NEG
49390: PUSH
49391: EMPTY
49392: LIST
49393: LIST
49394: PUSH
49395: LD_INT 1
49397: NEG
49398: PUSH
49399: LD_INT 3
49401: NEG
49402: PUSH
49403: EMPTY
49404: LIST
49405: LIST
49406: PUSH
49407: LD_INT 1
49409: PUSH
49410: LD_INT 2
49412: NEG
49413: PUSH
49414: EMPTY
49415: LIST
49416: LIST
49417: PUSH
49418: LD_INT 2
49420: PUSH
49421: LD_INT 1
49423: NEG
49424: PUSH
49425: EMPTY
49426: LIST
49427: LIST
49428: PUSH
49429: EMPTY
49430: LIST
49431: LIST
49432: LIST
49433: LIST
49434: LIST
49435: LIST
49436: LIST
49437: LIST
49438: LIST
49439: LIST
49440: LIST
49441: LIST
49442: LIST
49443: LIST
49444: LIST
49445: LIST
49446: LIST
49447: LIST
49448: LIST
49449: LIST
49450: LIST
49451: LIST
49452: LIST
49453: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
49454: LD_ADDR_VAR 0 24
49458: PUSH
49459: LD_INT 0
49461: PUSH
49462: LD_INT 0
49464: PUSH
49465: EMPTY
49466: LIST
49467: LIST
49468: PUSH
49469: LD_INT 0
49471: PUSH
49472: LD_INT 1
49474: NEG
49475: PUSH
49476: EMPTY
49477: LIST
49478: LIST
49479: PUSH
49480: LD_INT 1
49482: PUSH
49483: LD_INT 0
49485: PUSH
49486: EMPTY
49487: LIST
49488: LIST
49489: PUSH
49490: LD_INT 1
49492: PUSH
49493: LD_INT 1
49495: PUSH
49496: EMPTY
49497: LIST
49498: LIST
49499: PUSH
49500: LD_INT 0
49502: PUSH
49503: LD_INT 1
49505: PUSH
49506: EMPTY
49507: LIST
49508: LIST
49509: PUSH
49510: LD_INT 1
49512: NEG
49513: PUSH
49514: LD_INT 0
49516: PUSH
49517: EMPTY
49518: LIST
49519: LIST
49520: PUSH
49521: LD_INT 1
49523: NEG
49524: PUSH
49525: LD_INT 1
49527: NEG
49528: PUSH
49529: EMPTY
49530: LIST
49531: LIST
49532: PUSH
49533: LD_INT 1
49535: NEG
49536: PUSH
49537: LD_INT 2
49539: NEG
49540: PUSH
49541: EMPTY
49542: LIST
49543: LIST
49544: PUSH
49545: LD_INT 0
49547: PUSH
49548: LD_INT 2
49550: NEG
49551: PUSH
49552: EMPTY
49553: LIST
49554: LIST
49555: PUSH
49556: LD_INT 1
49558: PUSH
49559: LD_INT 1
49561: NEG
49562: PUSH
49563: EMPTY
49564: LIST
49565: LIST
49566: PUSH
49567: LD_INT 2
49569: PUSH
49570: LD_INT 0
49572: PUSH
49573: EMPTY
49574: LIST
49575: LIST
49576: PUSH
49577: LD_INT 2
49579: PUSH
49580: LD_INT 1
49582: PUSH
49583: EMPTY
49584: LIST
49585: LIST
49586: PUSH
49587: LD_INT 2
49589: PUSH
49590: LD_INT 2
49592: PUSH
49593: EMPTY
49594: LIST
49595: LIST
49596: PUSH
49597: LD_INT 1
49599: PUSH
49600: LD_INT 2
49602: PUSH
49603: EMPTY
49604: LIST
49605: LIST
49606: PUSH
49607: LD_INT 0
49609: PUSH
49610: LD_INT 2
49612: PUSH
49613: EMPTY
49614: LIST
49615: LIST
49616: PUSH
49617: LD_INT 1
49619: NEG
49620: PUSH
49621: LD_INT 1
49623: PUSH
49624: EMPTY
49625: LIST
49626: LIST
49627: PUSH
49628: LD_INT 2
49630: NEG
49631: PUSH
49632: LD_INT 0
49634: PUSH
49635: EMPTY
49636: LIST
49637: LIST
49638: PUSH
49639: LD_INT 2
49641: NEG
49642: PUSH
49643: LD_INT 1
49645: NEG
49646: PUSH
49647: EMPTY
49648: LIST
49649: LIST
49650: PUSH
49651: LD_INT 2
49653: NEG
49654: PUSH
49655: LD_INT 2
49657: NEG
49658: PUSH
49659: EMPTY
49660: LIST
49661: LIST
49662: PUSH
49663: LD_INT 1
49665: PUSH
49666: LD_INT 2
49668: NEG
49669: PUSH
49670: EMPTY
49671: LIST
49672: LIST
49673: PUSH
49674: LD_INT 2
49676: PUSH
49677: LD_INT 1
49679: NEG
49680: PUSH
49681: EMPTY
49682: LIST
49683: LIST
49684: PUSH
49685: LD_INT 3
49687: PUSH
49688: LD_INT 1
49690: PUSH
49691: EMPTY
49692: LIST
49693: LIST
49694: PUSH
49695: LD_INT 3
49697: PUSH
49698: LD_INT 2
49700: PUSH
49701: EMPTY
49702: LIST
49703: LIST
49704: PUSH
49705: EMPTY
49706: LIST
49707: LIST
49708: LIST
49709: LIST
49710: LIST
49711: LIST
49712: LIST
49713: LIST
49714: LIST
49715: LIST
49716: LIST
49717: LIST
49718: LIST
49719: LIST
49720: LIST
49721: LIST
49722: LIST
49723: LIST
49724: LIST
49725: LIST
49726: LIST
49727: LIST
49728: LIST
49729: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
49730: LD_ADDR_VAR 0 25
49734: PUSH
49735: LD_INT 0
49737: PUSH
49738: LD_INT 0
49740: PUSH
49741: EMPTY
49742: LIST
49743: LIST
49744: PUSH
49745: LD_INT 0
49747: PUSH
49748: LD_INT 1
49750: NEG
49751: PUSH
49752: EMPTY
49753: LIST
49754: LIST
49755: PUSH
49756: LD_INT 1
49758: PUSH
49759: LD_INT 0
49761: PUSH
49762: EMPTY
49763: LIST
49764: LIST
49765: PUSH
49766: LD_INT 1
49768: PUSH
49769: LD_INT 1
49771: PUSH
49772: EMPTY
49773: LIST
49774: LIST
49775: PUSH
49776: LD_INT 0
49778: PUSH
49779: LD_INT 1
49781: PUSH
49782: EMPTY
49783: LIST
49784: LIST
49785: PUSH
49786: LD_INT 1
49788: NEG
49789: PUSH
49790: LD_INT 0
49792: PUSH
49793: EMPTY
49794: LIST
49795: LIST
49796: PUSH
49797: LD_INT 1
49799: NEG
49800: PUSH
49801: LD_INT 1
49803: NEG
49804: PUSH
49805: EMPTY
49806: LIST
49807: LIST
49808: PUSH
49809: LD_INT 1
49811: NEG
49812: PUSH
49813: LD_INT 2
49815: NEG
49816: PUSH
49817: EMPTY
49818: LIST
49819: LIST
49820: PUSH
49821: LD_INT 0
49823: PUSH
49824: LD_INT 2
49826: NEG
49827: PUSH
49828: EMPTY
49829: LIST
49830: LIST
49831: PUSH
49832: LD_INT 1
49834: PUSH
49835: LD_INT 1
49837: NEG
49838: PUSH
49839: EMPTY
49840: LIST
49841: LIST
49842: PUSH
49843: LD_INT 2
49845: PUSH
49846: LD_INT 0
49848: PUSH
49849: EMPTY
49850: LIST
49851: LIST
49852: PUSH
49853: LD_INT 2
49855: PUSH
49856: LD_INT 1
49858: PUSH
49859: EMPTY
49860: LIST
49861: LIST
49862: PUSH
49863: LD_INT 2
49865: PUSH
49866: LD_INT 2
49868: PUSH
49869: EMPTY
49870: LIST
49871: LIST
49872: PUSH
49873: LD_INT 1
49875: PUSH
49876: LD_INT 2
49878: PUSH
49879: EMPTY
49880: LIST
49881: LIST
49882: PUSH
49883: LD_INT 0
49885: PUSH
49886: LD_INT 2
49888: PUSH
49889: EMPTY
49890: LIST
49891: LIST
49892: PUSH
49893: LD_INT 1
49895: NEG
49896: PUSH
49897: LD_INT 1
49899: PUSH
49900: EMPTY
49901: LIST
49902: LIST
49903: PUSH
49904: LD_INT 2
49906: NEG
49907: PUSH
49908: LD_INT 0
49910: PUSH
49911: EMPTY
49912: LIST
49913: LIST
49914: PUSH
49915: LD_INT 2
49917: NEG
49918: PUSH
49919: LD_INT 1
49921: NEG
49922: PUSH
49923: EMPTY
49924: LIST
49925: LIST
49926: PUSH
49927: LD_INT 2
49929: NEG
49930: PUSH
49931: LD_INT 2
49933: NEG
49934: PUSH
49935: EMPTY
49936: LIST
49937: LIST
49938: PUSH
49939: LD_INT 3
49941: PUSH
49942: LD_INT 1
49944: PUSH
49945: EMPTY
49946: LIST
49947: LIST
49948: PUSH
49949: LD_INT 3
49951: PUSH
49952: LD_INT 2
49954: PUSH
49955: EMPTY
49956: LIST
49957: LIST
49958: PUSH
49959: LD_INT 2
49961: PUSH
49962: LD_INT 3
49964: PUSH
49965: EMPTY
49966: LIST
49967: LIST
49968: PUSH
49969: LD_INT 1
49971: PUSH
49972: LD_INT 3
49974: PUSH
49975: EMPTY
49976: LIST
49977: LIST
49978: PUSH
49979: EMPTY
49980: LIST
49981: LIST
49982: LIST
49983: LIST
49984: LIST
49985: LIST
49986: LIST
49987: LIST
49988: LIST
49989: LIST
49990: LIST
49991: LIST
49992: LIST
49993: LIST
49994: LIST
49995: LIST
49996: LIST
49997: LIST
49998: LIST
49999: LIST
50000: LIST
50001: LIST
50002: LIST
50003: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
50004: LD_ADDR_VAR 0 26
50008: PUSH
50009: LD_INT 0
50011: PUSH
50012: LD_INT 0
50014: PUSH
50015: EMPTY
50016: LIST
50017: LIST
50018: PUSH
50019: LD_INT 0
50021: PUSH
50022: LD_INT 1
50024: NEG
50025: PUSH
50026: EMPTY
50027: LIST
50028: LIST
50029: PUSH
50030: LD_INT 1
50032: PUSH
50033: LD_INT 0
50035: PUSH
50036: EMPTY
50037: LIST
50038: LIST
50039: PUSH
50040: LD_INT 1
50042: PUSH
50043: LD_INT 1
50045: PUSH
50046: EMPTY
50047: LIST
50048: LIST
50049: PUSH
50050: LD_INT 0
50052: PUSH
50053: LD_INT 1
50055: PUSH
50056: EMPTY
50057: LIST
50058: LIST
50059: PUSH
50060: LD_INT 1
50062: NEG
50063: PUSH
50064: LD_INT 0
50066: PUSH
50067: EMPTY
50068: LIST
50069: LIST
50070: PUSH
50071: LD_INT 1
50073: NEG
50074: PUSH
50075: LD_INT 1
50077: NEG
50078: PUSH
50079: EMPTY
50080: LIST
50081: LIST
50082: PUSH
50083: LD_INT 1
50085: NEG
50086: PUSH
50087: LD_INT 2
50089: NEG
50090: PUSH
50091: EMPTY
50092: LIST
50093: LIST
50094: PUSH
50095: LD_INT 0
50097: PUSH
50098: LD_INT 2
50100: NEG
50101: PUSH
50102: EMPTY
50103: LIST
50104: LIST
50105: PUSH
50106: LD_INT 1
50108: PUSH
50109: LD_INT 1
50111: NEG
50112: PUSH
50113: EMPTY
50114: LIST
50115: LIST
50116: PUSH
50117: LD_INT 2
50119: PUSH
50120: LD_INT 0
50122: PUSH
50123: EMPTY
50124: LIST
50125: LIST
50126: PUSH
50127: LD_INT 2
50129: PUSH
50130: LD_INT 1
50132: PUSH
50133: EMPTY
50134: LIST
50135: LIST
50136: PUSH
50137: LD_INT 2
50139: PUSH
50140: LD_INT 2
50142: PUSH
50143: EMPTY
50144: LIST
50145: LIST
50146: PUSH
50147: LD_INT 1
50149: PUSH
50150: LD_INT 2
50152: PUSH
50153: EMPTY
50154: LIST
50155: LIST
50156: PUSH
50157: LD_INT 0
50159: PUSH
50160: LD_INT 2
50162: PUSH
50163: EMPTY
50164: LIST
50165: LIST
50166: PUSH
50167: LD_INT 1
50169: NEG
50170: PUSH
50171: LD_INT 1
50173: PUSH
50174: EMPTY
50175: LIST
50176: LIST
50177: PUSH
50178: LD_INT 2
50180: NEG
50181: PUSH
50182: LD_INT 0
50184: PUSH
50185: EMPTY
50186: LIST
50187: LIST
50188: PUSH
50189: LD_INT 2
50191: NEG
50192: PUSH
50193: LD_INT 1
50195: NEG
50196: PUSH
50197: EMPTY
50198: LIST
50199: LIST
50200: PUSH
50201: LD_INT 2
50203: NEG
50204: PUSH
50205: LD_INT 2
50207: NEG
50208: PUSH
50209: EMPTY
50210: LIST
50211: LIST
50212: PUSH
50213: LD_INT 2
50215: PUSH
50216: LD_INT 3
50218: PUSH
50219: EMPTY
50220: LIST
50221: LIST
50222: PUSH
50223: LD_INT 1
50225: PUSH
50226: LD_INT 3
50228: PUSH
50229: EMPTY
50230: LIST
50231: LIST
50232: PUSH
50233: LD_INT 1
50235: NEG
50236: PUSH
50237: LD_INT 2
50239: PUSH
50240: EMPTY
50241: LIST
50242: LIST
50243: PUSH
50244: LD_INT 2
50246: NEG
50247: PUSH
50248: LD_INT 1
50250: PUSH
50251: EMPTY
50252: LIST
50253: LIST
50254: PUSH
50255: EMPTY
50256: LIST
50257: LIST
50258: LIST
50259: LIST
50260: LIST
50261: LIST
50262: LIST
50263: LIST
50264: LIST
50265: LIST
50266: LIST
50267: LIST
50268: LIST
50269: LIST
50270: LIST
50271: LIST
50272: LIST
50273: LIST
50274: LIST
50275: LIST
50276: LIST
50277: LIST
50278: LIST
50279: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
50280: LD_ADDR_VAR 0 27
50284: PUSH
50285: LD_INT 0
50287: PUSH
50288: LD_INT 0
50290: PUSH
50291: EMPTY
50292: LIST
50293: LIST
50294: PUSH
50295: LD_INT 0
50297: PUSH
50298: LD_INT 1
50300: NEG
50301: PUSH
50302: EMPTY
50303: LIST
50304: LIST
50305: PUSH
50306: LD_INT 1
50308: PUSH
50309: LD_INT 0
50311: PUSH
50312: EMPTY
50313: LIST
50314: LIST
50315: PUSH
50316: LD_INT 1
50318: PUSH
50319: LD_INT 1
50321: PUSH
50322: EMPTY
50323: LIST
50324: LIST
50325: PUSH
50326: LD_INT 0
50328: PUSH
50329: LD_INT 1
50331: PUSH
50332: EMPTY
50333: LIST
50334: LIST
50335: PUSH
50336: LD_INT 1
50338: NEG
50339: PUSH
50340: LD_INT 0
50342: PUSH
50343: EMPTY
50344: LIST
50345: LIST
50346: PUSH
50347: LD_INT 1
50349: NEG
50350: PUSH
50351: LD_INT 1
50353: NEG
50354: PUSH
50355: EMPTY
50356: LIST
50357: LIST
50358: PUSH
50359: LD_INT 1
50361: NEG
50362: PUSH
50363: LD_INT 2
50365: NEG
50366: PUSH
50367: EMPTY
50368: LIST
50369: LIST
50370: PUSH
50371: LD_INT 0
50373: PUSH
50374: LD_INT 2
50376: NEG
50377: PUSH
50378: EMPTY
50379: LIST
50380: LIST
50381: PUSH
50382: LD_INT 1
50384: PUSH
50385: LD_INT 1
50387: NEG
50388: PUSH
50389: EMPTY
50390: LIST
50391: LIST
50392: PUSH
50393: LD_INT 2
50395: PUSH
50396: LD_INT 0
50398: PUSH
50399: EMPTY
50400: LIST
50401: LIST
50402: PUSH
50403: LD_INT 2
50405: PUSH
50406: LD_INT 1
50408: PUSH
50409: EMPTY
50410: LIST
50411: LIST
50412: PUSH
50413: LD_INT 2
50415: PUSH
50416: LD_INT 2
50418: PUSH
50419: EMPTY
50420: LIST
50421: LIST
50422: PUSH
50423: LD_INT 1
50425: PUSH
50426: LD_INT 2
50428: PUSH
50429: EMPTY
50430: LIST
50431: LIST
50432: PUSH
50433: LD_INT 0
50435: PUSH
50436: LD_INT 2
50438: PUSH
50439: EMPTY
50440: LIST
50441: LIST
50442: PUSH
50443: LD_INT 1
50445: NEG
50446: PUSH
50447: LD_INT 1
50449: PUSH
50450: EMPTY
50451: LIST
50452: LIST
50453: PUSH
50454: LD_INT 2
50456: NEG
50457: PUSH
50458: LD_INT 0
50460: PUSH
50461: EMPTY
50462: LIST
50463: LIST
50464: PUSH
50465: LD_INT 2
50467: NEG
50468: PUSH
50469: LD_INT 1
50471: NEG
50472: PUSH
50473: EMPTY
50474: LIST
50475: LIST
50476: PUSH
50477: LD_INT 2
50479: NEG
50480: PUSH
50481: LD_INT 2
50483: NEG
50484: PUSH
50485: EMPTY
50486: LIST
50487: LIST
50488: PUSH
50489: LD_INT 1
50491: NEG
50492: PUSH
50493: LD_INT 2
50495: PUSH
50496: EMPTY
50497: LIST
50498: LIST
50499: PUSH
50500: LD_INT 2
50502: NEG
50503: PUSH
50504: LD_INT 1
50506: PUSH
50507: EMPTY
50508: LIST
50509: LIST
50510: PUSH
50511: LD_INT 3
50513: NEG
50514: PUSH
50515: LD_INT 1
50517: NEG
50518: PUSH
50519: EMPTY
50520: LIST
50521: LIST
50522: PUSH
50523: LD_INT 3
50525: NEG
50526: PUSH
50527: LD_INT 2
50529: NEG
50530: PUSH
50531: EMPTY
50532: LIST
50533: LIST
50534: PUSH
50535: EMPTY
50536: LIST
50537: LIST
50538: LIST
50539: LIST
50540: LIST
50541: LIST
50542: LIST
50543: LIST
50544: LIST
50545: LIST
50546: LIST
50547: LIST
50548: LIST
50549: LIST
50550: LIST
50551: LIST
50552: LIST
50553: LIST
50554: LIST
50555: LIST
50556: LIST
50557: LIST
50558: LIST
50559: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
50560: LD_ADDR_VAR 0 28
50564: PUSH
50565: LD_INT 0
50567: PUSH
50568: LD_INT 0
50570: PUSH
50571: EMPTY
50572: LIST
50573: LIST
50574: PUSH
50575: LD_INT 0
50577: PUSH
50578: LD_INT 1
50580: NEG
50581: PUSH
50582: EMPTY
50583: LIST
50584: LIST
50585: PUSH
50586: LD_INT 1
50588: PUSH
50589: LD_INT 0
50591: PUSH
50592: EMPTY
50593: LIST
50594: LIST
50595: PUSH
50596: LD_INT 1
50598: PUSH
50599: LD_INT 1
50601: PUSH
50602: EMPTY
50603: LIST
50604: LIST
50605: PUSH
50606: LD_INT 0
50608: PUSH
50609: LD_INT 1
50611: PUSH
50612: EMPTY
50613: LIST
50614: LIST
50615: PUSH
50616: LD_INT 1
50618: NEG
50619: PUSH
50620: LD_INT 0
50622: PUSH
50623: EMPTY
50624: LIST
50625: LIST
50626: PUSH
50627: LD_INT 1
50629: NEG
50630: PUSH
50631: LD_INT 1
50633: NEG
50634: PUSH
50635: EMPTY
50636: LIST
50637: LIST
50638: PUSH
50639: LD_INT 1
50641: NEG
50642: PUSH
50643: LD_INT 2
50645: NEG
50646: PUSH
50647: EMPTY
50648: LIST
50649: LIST
50650: PUSH
50651: LD_INT 0
50653: PUSH
50654: LD_INT 2
50656: NEG
50657: PUSH
50658: EMPTY
50659: LIST
50660: LIST
50661: PUSH
50662: LD_INT 1
50664: PUSH
50665: LD_INT 1
50667: NEG
50668: PUSH
50669: EMPTY
50670: LIST
50671: LIST
50672: PUSH
50673: LD_INT 2
50675: PUSH
50676: LD_INT 0
50678: PUSH
50679: EMPTY
50680: LIST
50681: LIST
50682: PUSH
50683: LD_INT 2
50685: PUSH
50686: LD_INT 1
50688: PUSH
50689: EMPTY
50690: LIST
50691: LIST
50692: PUSH
50693: LD_INT 2
50695: PUSH
50696: LD_INT 2
50698: PUSH
50699: EMPTY
50700: LIST
50701: LIST
50702: PUSH
50703: LD_INT 1
50705: PUSH
50706: LD_INT 2
50708: PUSH
50709: EMPTY
50710: LIST
50711: LIST
50712: PUSH
50713: LD_INT 0
50715: PUSH
50716: LD_INT 2
50718: PUSH
50719: EMPTY
50720: LIST
50721: LIST
50722: PUSH
50723: LD_INT 1
50725: NEG
50726: PUSH
50727: LD_INT 1
50729: PUSH
50730: EMPTY
50731: LIST
50732: LIST
50733: PUSH
50734: LD_INT 2
50736: NEG
50737: PUSH
50738: LD_INT 0
50740: PUSH
50741: EMPTY
50742: LIST
50743: LIST
50744: PUSH
50745: LD_INT 2
50747: NEG
50748: PUSH
50749: LD_INT 1
50751: NEG
50752: PUSH
50753: EMPTY
50754: LIST
50755: LIST
50756: PUSH
50757: LD_INT 2
50759: NEG
50760: PUSH
50761: LD_INT 2
50763: NEG
50764: PUSH
50765: EMPTY
50766: LIST
50767: LIST
50768: PUSH
50769: LD_INT 2
50771: NEG
50772: PUSH
50773: LD_INT 3
50775: NEG
50776: PUSH
50777: EMPTY
50778: LIST
50779: LIST
50780: PUSH
50781: LD_INT 1
50783: NEG
50784: PUSH
50785: LD_INT 3
50787: NEG
50788: PUSH
50789: EMPTY
50790: LIST
50791: LIST
50792: PUSH
50793: LD_INT 3
50795: NEG
50796: PUSH
50797: LD_INT 1
50799: NEG
50800: PUSH
50801: EMPTY
50802: LIST
50803: LIST
50804: PUSH
50805: LD_INT 3
50807: NEG
50808: PUSH
50809: LD_INT 2
50811: NEG
50812: PUSH
50813: EMPTY
50814: LIST
50815: LIST
50816: PUSH
50817: EMPTY
50818: LIST
50819: LIST
50820: LIST
50821: LIST
50822: LIST
50823: LIST
50824: LIST
50825: LIST
50826: LIST
50827: LIST
50828: LIST
50829: LIST
50830: LIST
50831: LIST
50832: LIST
50833: LIST
50834: LIST
50835: LIST
50836: LIST
50837: LIST
50838: LIST
50839: LIST
50840: LIST
50841: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50842: LD_ADDR_VAR 0 29
50846: PUSH
50847: LD_INT 0
50849: PUSH
50850: LD_INT 0
50852: PUSH
50853: EMPTY
50854: LIST
50855: LIST
50856: PUSH
50857: LD_INT 0
50859: PUSH
50860: LD_INT 1
50862: NEG
50863: PUSH
50864: EMPTY
50865: LIST
50866: LIST
50867: PUSH
50868: LD_INT 1
50870: PUSH
50871: LD_INT 0
50873: PUSH
50874: EMPTY
50875: LIST
50876: LIST
50877: PUSH
50878: LD_INT 1
50880: PUSH
50881: LD_INT 1
50883: PUSH
50884: EMPTY
50885: LIST
50886: LIST
50887: PUSH
50888: LD_INT 0
50890: PUSH
50891: LD_INT 1
50893: PUSH
50894: EMPTY
50895: LIST
50896: LIST
50897: PUSH
50898: LD_INT 1
50900: NEG
50901: PUSH
50902: LD_INT 0
50904: PUSH
50905: EMPTY
50906: LIST
50907: LIST
50908: PUSH
50909: LD_INT 1
50911: NEG
50912: PUSH
50913: LD_INT 1
50915: NEG
50916: PUSH
50917: EMPTY
50918: LIST
50919: LIST
50920: PUSH
50921: LD_INT 1
50923: NEG
50924: PUSH
50925: LD_INT 2
50927: NEG
50928: PUSH
50929: EMPTY
50930: LIST
50931: LIST
50932: PUSH
50933: LD_INT 0
50935: PUSH
50936: LD_INT 2
50938: NEG
50939: PUSH
50940: EMPTY
50941: LIST
50942: LIST
50943: PUSH
50944: LD_INT 1
50946: PUSH
50947: LD_INT 1
50949: NEG
50950: PUSH
50951: EMPTY
50952: LIST
50953: LIST
50954: PUSH
50955: LD_INT 2
50957: PUSH
50958: LD_INT 0
50960: PUSH
50961: EMPTY
50962: LIST
50963: LIST
50964: PUSH
50965: LD_INT 2
50967: PUSH
50968: LD_INT 1
50970: PUSH
50971: EMPTY
50972: LIST
50973: LIST
50974: PUSH
50975: LD_INT 1
50977: PUSH
50978: LD_INT 2
50980: PUSH
50981: EMPTY
50982: LIST
50983: LIST
50984: PUSH
50985: LD_INT 0
50987: PUSH
50988: LD_INT 2
50990: PUSH
50991: EMPTY
50992: LIST
50993: LIST
50994: PUSH
50995: LD_INT 1
50997: NEG
50998: PUSH
50999: LD_INT 1
51001: PUSH
51002: EMPTY
51003: LIST
51004: LIST
51005: PUSH
51006: LD_INT 2
51008: NEG
51009: PUSH
51010: LD_INT 1
51012: NEG
51013: PUSH
51014: EMPTY
51015: LIST
51016: LIST
51017: PUSH
51018: LD_INT 2
51020: NEG
51021: PUSH
51022: LD_INT 2
51024: NEG
51025: PUSH
51026: EMPTY
51027: LIST
51028: LIST
51029: PUSH
51030: LD_INT 2
51032: NEG
51033: PUSH
51034: LD_INT 3
51036: NEG
51037: PUSH
51038: EMPTY
51039: LIST
51040: LIST
51041: PUSH
51042: LD_INT 2
51044: PUSH
51045: LD_INT 1
51047: NEG
51048: PUSH
51049: EMPTY
51050: LIST
51051: LIST
51052: PUSH
51053: LD_INT 3
51055: PUSH
51056: LD_INT 1
51058: PUSH
51059: EMPTY
51060: LIST
51061: LIST
51062: PUSH
51063: LD_INT 1
51065: PUSH
51066: LD_INT 3
51068: PUSH
51069: EMPTY
51070: LIST
51071: LIST
51072: PUSH
51073: LD_INT 1
51075: NEG
51076: PUSH
51077: LD_INT 2
51079: PUSH
51080: EMPTY
51081: LIST
51082: LIST
51083: PUSH
51084: LD_INT 3
51086: NEG
51087: PUSH
51088: LD_INT 2
51090: NEG
51091: PUSH
51092: EMPTY
51093: LIST
51094: LIST
51095: PUSH
51096: EMPTY
51097: LIST
51098: LIST
51099: LIST
51100: LIST
51101: LIST
51102: LIST
51103: LIST
51104: LIST
51105: LIST
51106: LIST
51107: LIST
51108: LIST
51109: LIST
51110: LIST
51111: LIST
51112: LIST
51113: LIST
51114: LIST
51115: LIST
51116: LIST
51117: LIST
51118: LIST
51119: LIST
51120: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51121: LD_ADDR_VAR 0 30
51125: PUSH
51126: LD_INT 0
51128: PUSH
51129: LD_INT 0
51131: PUSH
51132: EMPTY
51133: LIST
51134: LIST
51135: PUSH
51136: LD_INT 0
51138: PUSH
51139: LD_INT 1
51141: NEG
51142: PUSH
51143: EMPTY
51144: LIST
51145: LIST
51146: PUSH
51147: LD_INT 1
51149: PUSH
51150: LD_INT 0
51152: PUSH
51153: EMPTY
51154: LIST
51155: LIST
51156: PUSH
51157: LD_INT 1
51159: PUSH
51160: LD_INT 1
51162: PUSH
51163: EMPTY
51164: LIST
51165: LIST
51166: PUSH
51167: LD_INT 0
51169: PUSH
51170: LD_INT 1
51172: PUSH
51173: EMPTY
51174: LIST
51175: LIST
51176: PUSH
51177: LD_INT 1
51179: NEG
51180: PUSH
51181: LD_INT 0
51183: PUSH
51184: EMPTY
51185: LIST
51186: LIST
51187: PUSH
51188: LD_INT 1
51190: NEG
51191: PUSH
51192: LD_INT 1
51194: NEG
51195: PUSH
51196: EMPTY
51197: LIST
51198: LIST
51199: PUSH
51200: LD_INT 1
51202: NEG
51203: PUSH
51204: LD_INT 2
51206: NEG
51207: PUSH
51208: EMPTY
51209: LIST
51210: LIST
51211: PUSH
51212: LD_INT 0
51214: PUSH
51215: LD_INT 2
51217: NEG
51218: PUSH
51219: EMPTY
51220: LIST
51221: LIST
51222: PUSH
51223: LD_INT 1
51225: PUSH
51226: LD_INT 1
51228: NEG
51229: PUSH
51230: EMPTY
51231: LIST
51232: LIST
51233: PUSH
51234: LD_INT 2
51236: PUSH
51237: LD_INT 0
51239: PUSH
51240: EMPTY
51241: LIST
51242: LIST
51243: PUSH
51244: LD_INT 2
51246: PUSH
51247: LD_INT 1
51249: PUSH
51250: EMPTY
51251: LIST
51252: LIST
51253: PUSH
51254: LD_INT 2
51256: PUSH
51257: LD_INT 2
51259: PUSH
51260: EMPTY
51261: LIST
51262: LIST
51263: PUSH
51264: LD_INT 1
51266: PUSH
51267: LD_INT 2
51269: PUSH
51270: EMPTY
51271: LIST
51272: LIST
51273: PUSH
51274: LD_INT 1
51276: NEG
51277: PUSH
51278: LD_INT 1
51280: PUSH
51281: EMPTY
51282: LIST
51283: LIST
51284: PUSH
51285: LD_INT 2
51287: NEG
51288: PUSH
51289: LD_INT 0
51291: PUSH
51292: EMPTY
51293: LIST
51294: LIST
51295: PUSH
51296: LD_INT 2
51298: NEG
51299: PUSH
51300: LD_INT 1
51302: NEG
51303: PUSH
51304: EMPTY
51305: LIST
51306: LIST
51307: PUSH
51308: LD_INT 1
51310: NEG
51311: PUSH
51312: LD_INT 3
51314: NEG
51315: PUSH
51316: EMPTY
51317: LIST
51318: LIST
51319: PUSH
51320: LD_INT 1
51322: PUSH
51323: LD_INT 2
51325: NEG
51326: PUSH
51327: EMPTY
51328: LIST
51329: LIST
51330: PUSH
51331: LD_INT 3
51333: PUSH
51334: LD_INT 2
51336: PUSH
51337: EMPTY
51338: LIST
51339: LIST
51340: PUSH
51341: LD_INT 2
51343: PUSH
51344: LD_INT 3
51346: PUSH
51347: EMPTY
51348: LIST
51349: LIST
51350: PUSH
51351: LD_INT 2
51353: NEG
51354: PUSH
51355: LD_INT 1
51357: PUSH
51358: EMPTY
51359: LIST
51360: LIST
51361: PUSH
51362: LD_INT 3
51364: NEG
51365: PUSH
51366: LD_INT 1
51368: NEG
51369: PUSH
51370: EMPTY
51371: LIST
51372: LIST
51373: PUSH
51374: EMPTY
51375: LIST
51376: LIST
51377: LIST
51378: LIST
51379: LIST
51380: LIST
51381: LIST
51382: LIST
51383: LIST
51384: LIST
51385: LIST
51386: LIST
51387: LIST
51388: LIST
51389: LIST
51390: LIST
51391: LIST
51392: LIST
51393: LIST
51394: LIST
51395: LIST
51396: LIST
51397: LIST
51398: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
51399: LD_ADDR_VAR 0 31
51403: PUSH
51404: LD_INT 0
51406: PUSH
51407: LD_INT 0
51409: PUSH
51410: EMPTY
51411: LIST
51412: LIST
51413: PUSH
51414: LD_INT 0
51416: PUSH
51417: LD_INT 1
51419: NEG
51420: PUSH
51421: EMPTY
51422: LIST
51423: LIST
51424: PUSH
51425: LD_INT 1
51427: PUSH
51428: LD_INT 0
51430: PUSH
51431: EMPTY
51432: LIST
51433: LIST
51434: PUSH
51435: LD_INT 1
51437: PUSH
51438: LD_INT 1
51440: PUSH
51441: EMPTY
51442: LIST
51443: LIST
51444: PUSH
51445: LD_INT 0
51447: PUSH
51448: LD_INT 1
51450: PUSH
51451: EMPTY
51452: LIST
51453: LIST
51454: PUSH
51455: LD_INT 1
51457: NEG
51458: PUSH
51459: LD_INT 0
51461: PUSH
51462: EMPTY
51463: LIST
51464: LIST
51465: PUSH
51466: LD_INT 1
51468: NEG
51469: PUSH
51470: LD_INT 1
51472: NEG
51473: PUSH
51474: EMPTY
51475: LIST
51476: LIST
51477: PUSH
51478: LD_INT 1
51480: NEG
51481: PUSH
51482: LD_INT 2
51484: NEG
51485: PUSH
51486: EMPTY
51487: LIST
51488: LIST
51489: PUSH
51490: LD_INT 1
51492: PUSH
51493: LD_INT 1
51495: NEG
51496: PUSH
51497: EMPTY
51498: LIST
51499: LIST
51500: PUSH
51501: LD_INT 2
51503: PUSH
51504: LD_INT 0
51506: PUSH
51507: EMPTY
51508: LIST
51509: LIST
51510: PUSH
51511: LD_INT 2
51513: PUSH
51514: LD_INT 1
51516: PUSH
51517: EMPTY
51518: LIST
51519: LIST
51520: PUSH
51521: LD_INT 2
51523: PUSH
51524: LD_INT 2
51526: PUSH
51527: EMPTY
51528: LIST
51529: LIST
51530: PUSH
51531: LD_INT 1
51533: PUSH
51534: LD_INT 2
51536: PUSH
51537: EMPTY
51538: LIST
51539: LIST
51540: PUSH
51541: LD_INT 0
51543: PUSH
51544: LD_INT 2
51546: PUSH
51547: EMPTY
51548: LIST
51549: LIST
51550: PUSH
51551: LD_INT 1
51553: NEG
51554: PUSH
51555: LD_INT 1
51557: PUSH
51558: EMPTY
51559: LIST
51560: LIST
51561: PUSH
51562: LD_INT 2
51564: NEG
51565: PUSH
51566: LD_INT 1
51568: NEG
51569: PUSH
51570: EMPTY
51571: LIST
51572: LIST
51573: PUSH
51574: LD_INT 2
51576: NEG
51577: PUSH
51578: LD_INT 2
51580: NEG
51581: PUSH
51582: EMPTY
51583: LIST
51584: LIST
51585: PUSH
51586: LD_INT 2
51588: NEG
51589: PUSH
51590: LD_INT 3
51592: NEG
51593: PUSH
51594: EMPTY
51595: LIST
51596: LIST
51597: PUSH
51598: LD_INT 2
51600: PUSH
51601: LD_INT 1
51603: NEG
51604: PUSH
51605: EMPTY
51606: LIST
51607: LIST
51608: PUSH
51609: LD_INT 3
51611: PUSH
51612: LD_INT 1
51614: PUSH
51615: EMPTY
51616: LIST
51617: LIST
51618: PUSH
51619: LD_INT 1
51621: PUSH
51622: LD_INT 3
51624: PUSH
51625: EMPTY
51626: LIST
51627: LIST
51628: PUSH
51629: LD_INT 1
51631: NEG
51632: PUSH
51633: LD_INT 2
51635: PUSH
51636: EMPTY
51637: LIST
51638: LIST
51639: PUSH
51640: LD_INT 3
51642: NEG
51643: PUSH
51644: LD_INT 2
51646: NEG
51647: PUSH
51648: EMPTY
51649: LIST
51650: LIST
51651: PUSH
51652: EMPTY
51653: LIST
51654: LIST
51655: LIST
51656: LIST
51657: LIST
51658: LIST
51659: LIST
51660: LIST
51661: LIST
51662: LIST
51663: LIST
51664: LIST
51665: LIST
51666: LIST
51667: LIST
51668: LIST
51669: LIST
51670: LIST
51671: LIST
51672: LIST
51673: LIST
51674: LIST
51675: LIST
51676: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51677: LD_ADDR_VAR 0 32
51681: PUSH
51682: LD_INT 0
51684: PUSH
51685: LD_INT 0
51687: PUSH
51688: EMPTY
51689: LIST
51690: LIST
51691: PUSH
51692: LD_INT 0
51694: PUSH
51695: LD_INT 1
51697: NEG
51698: PUSH
51699: EMPTY
51700: LIST
51701: LIST
51702: PUSH
51703: LD_INT 1
51705: PUSH
51706: LD_INT 0
51708: PUSH
51709: EMPTY
51710: LIST
51711: LIST
51712: PUSH
51713: LD_INT 1
51715: PUSH
51716: LD_INT 1
51718: PUSH
51719: EMPTY
51720: LIST
51721: LIST
51722: PUSH
51723: LD_INT 0
51725: PUSH
51726: LD_INT 1
51728: PUSH
51729: EMPTY
51730: LIST
51731: LIST
51732: PUSH
51733: LD_INT 1
51735: NEG
51736: PUSH
51737: LD_INT 0
51739: PUSH
51740: EMPTY
51741: LIST
51742: LIST
51743: PUSH
51744: LD_INT 1
51746: NEG
51747: PUSH
51748: LD_INT 1
51750: NEG
51751: PUSH
51752: EMPTY
51753: LIST
51754: LIST
51755: PUSH
51756: LD_INT 1
51758: NEG
51759: PUSH
51760: LD_INT 2
51762: NEG
51763: PUSH
51764: EMPTY
51765: LIST
51766: LIST
51767: PUSH
51768: LD_INT 0
51770: PUSH
51771: LD_INT 2
51773: NEG
51774: PUSH
51775: EMPTY
51776: LIST
51777: LIST
51778: PUSH
51779: LD_INT 1
51781: PUSH
51782: LD_INT 1
51784: NEG
51785: PUSH
51786: EMPTY
51787: LIST
51788: LIST
51789: PUSH
51790: LD_INT 2
51792: PUSH
51793: LD_INT 1
51795: PUSH
51796: EMPTY
51797: LIST
51798: LIST
51799: PUSH
51800: LD_INT 2
51802: PUSH
51803: LD_INT 2
51805: PUSH
51806: EMPTY
51807: LIST
51808: LIST
51809: PUSH
51810: LD_INT 1
51812: PUSH
51813: LD_INT 2
51815: PUSH
51816: EMPTY
51817: LIST
51818: LIST
51819: PUSH
51820: LD_INT 0
51822: PUSH
51823: LD_INT 2
51825: PUSH
51826: EMPTY
51827: LIST
51828: LIST
51829: PUSH
51830: LD_INT 1
51832: NEG
51833: PUSH
51834: LD_INT 1
51836: PUSH
51837: EMPTY
51838: LIST
51839: LIST
51840: PUSH
51841: LD_INT 2
51843: NEG
51844: PUSH
51845: LD_INT 0
51847: PUSH
51848: EMPTY
51849: LIST
51850: LIST
51851: PUSH
51852: LD_INT 2
51854: NEG
51855: PUSH
51856: LD_INT 1
51858: NEG
51859: PUSH
51860: EMPTY
51861: LIST
51862: LIST
51863: PUSH
51864: LD_INT 1
51866: NEG
51867: PUSH
51868: LD_INT 3
51870: NEG
51871: PUSH
51872: EMPTY
51873: LIST
51874: LIST
51875: PUSH
51876: LD_INT 1
51878: PUSH
51879: LD_INT 2
51881: NEG
51882: PUSH
51883: EMPTY
51884: LIST
51885: LIST
51886: PUSH
51887: LD_INT 3
51889: PUSH
51890: LD_INT 2
51892: PUSH
51893: EMPTY
51894: LIST
51895: LIST
51896: PUSH
51897: LD_INT 2
51899: PUSH
51900: LD_INT 3
51902: PUSH
51903: EMPTY
51904: LIST
51905: LIST
51906: PUSH
51907: LD_INT 2
51909: NEG
51910: PUSH
51911: LD_INT 1
51913: PUSH
51914: EMPTY
51915: LIST
51916: LIST
51917: PUSH
51918: LD_INT 3
51920: NEG
51921: PUSH
51922: LD_INT 1
51924: NEG
51925: PUSH
51926: EMPTY
51927: LIST
51928: LIST
51929: PUSH
51930: EMPTY
51931: LIST
51932: LIST
51933: LIST
51934: LIST
51935: LIST
51936: LIST
51937: LIST
51938: LIST
51939: LIST
51940: LIST
51941: LIST
51942: LIST
51943: LIST
51944: LIST
51945: LIST
51946: LIST
51947: LIST
51948: LIST
51949: LIST
51950: LIST
51951: LIST
51952: LIST
51953: LIST
51954: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
51955: LD_ADDR_VAR 0 33
51959: PUSH
51960: LD_INT 0
51962: PUSH
51963: LD_INT 0
51965: PUSH
51966: EMPTY
51967: LIST
51968: LIST
51969: PUSH
51970: LD_INT 0
51972: PUSH
51973: LD_INT 1
51975: NEG
51976: PUSH
51977: EMPTY
51978: LIST
51979: LIST
51980: PUSH
51981: LD_INT 1
51983: PUSH
51984: LD_INT 0
51986: PUSH
51987: EMPTY
51988: LIST
51989: LIST
51990: PUSH
51991: LD_INT 1
51993: PUSH
51994: LD_INT 1
51996: PUSH
51997: EMPTY
51998: LIST
51999: LIST
52000: PUSH
52001: LD_INT 0
52003: PUSH
52004: LD_INT 1
52006: PUSH
52007: EMPTY
52008: LIST
52009: LIST
52010: PUSH
52011: LD_INT 1
52013: NEG
52014: PUSH
52015: LD_INT 0
52017: PUSH
52018: EMPTY
52019: LIST
52020: LIST
52021: PUSH
52022: LD_INT 1
52024: NEG
52025: PUSH
52026: LD_INT 1
52028: NEG
52029: PUSH
52030: EMPTY
52031: LIST
52032: LIST
52033: PUSH
52034: LD_INT 1
52036: NEG
52037: PUSH
52038: LD_INT 2
52040: NEG
52041: PUSH
52042: EMPTY
52043: LIST
52044: LIST
52045: PUSH
52046: LD_INT 1
52048: PUSH
52049: LD_INT 1
52051: NEG
52052: PUSH
52053: EMPTY
52054: LIST
52055: LIST
52056: PUSH
52057: LD_INT 2
52059: PUSH
52060: LD_INT 0
52062: PUSH
52063: EMPTY
52064: LIST
52065: LIST
52066: PUSH
52067: LD_INT 2
52069: PUSH
52070: LD_INT 1
52072: PUSH
52073: EMPTY
52074: LIST
52075: LIST
52076: PUSH
52077: LD_INT 1
52079: PUSH
52080: LD_INT 2
52082: PUSH
52083: EMPTY
52084: LIST
52085: LIST
52086: PUSH
52087: LD_INT 0
52089: PUSH
52090: LD_INT 2
52092: PUSH
52093: EMPTY
52094: LIST
52095: LIST
52096: PUSH
52097: LD_INT 1
52099: NEG
52100: PUSH
52101: LD_INT 1
52103: PUSH
52104: EMPTY
52105: LIST
52106: LIST
52107: PUSH
52108: LD_INT 2
52110: NEG
52111: PUSH
52112: LD_INT 0
52114: PUSH
52115: EMPTY
52116: LIST
52117: LIST
52118: PUSH
52119: LD_INT 2
52121: NEG
52122: PUSH
52123: LD_INT 1
52125: NEG
52126: PUSH
52127: EMPTY
52128: LIST
52129: LIST
52130: PUSH
52131: LD_INT 2
52133: NEG
52134: PUSH
52135: LD_INT 2
52137: NEG
52138: PUSH
52139: EMPTY
52140: LIST
52141: LIST
52142: PUSH
52143: LD_INT 2
52145: NEG
52146: PUSH
52147: LD_INT 3
52149: NEG
52150: PUSH
52151: EMPTY
52152: LIST
52153: LIST
52154: PUSH
52155: LD_INT 2
52157: PUSH
52158: LD_INT 1
52160: NEG
52161: PUSH
52162: EMPTY
52163: LIST
52164: LIST
52165: PUSH
52166: LD_INT 3
52168: PUSH
52169: LD_INT 1
52171: PUSH
52172: EMPTY
52173: LIST
52174: LIST
52175: PUSH
52176: LD_INT 1
52178: PUSH
52179: LD_INT 3
52181: PUSH
52182: EMPTY
52183: LIST
52184: LIST
52185: PUSH
52186: LD_INT 1
52188: NEG
52189: PUSH
52190: LD_INT 2
52192: PUSH
52193: EMPTY
52194: LIST
52195: LIST
52196: PUSH
52197: LD_INT 3
52199: NEG
52200: PUSH
52201: LD_INT 2
52203: NEG
52204: PUSH
52205: EMPTY
52206: LIST
52207: LIST
52208: PUSH
52209: EMPTY
52210: LIST
52211: LIST
52212: LIST
52213: LIST
52214: LIST
52215: LIST
52216: LIST
52217: LIST
52218: LIST
52219: LIST
52220: LIST
52221: LIST
52222: LIST
52223: LIST
52224: LIST
52225: LIST
52226: LIST
52227: LIST
52228: LIST
52229: LIST
52230: LIST
52231: LIST
52232: LIST
52233: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52234: LD_ADDR_VAR 0 34
52238: PUSH
52239: LD_INT 0
52241: PUSH
52242: LD_INT 0
52244: PUSH
52245: EMPTY
52246: LIST
52247: LIST
52248: PUSH
52249: LD_INT 0
52251: PUSH
52252: LD_INT 1
52254: NEG
52255: PUSH
52256: EMPTY
52257: LIST
52258: LIST
52259: PUSH
52260: LD_INT 1
52262: PUSH
52263: LD_INT 0
52265: PUSH
52266: EMPTY
52267: LIST
52268: LIST
52269: PUSH
52270: LD_INT 1
52272: PUSH
52273: LD_INT 1
52275: PUSH
52276: EMPTY
52277: LIST
52278: LIST
52279: PUSH
52280: LD_INT 0
52282: PUSH
52283: LD_INT 1
52285: PUSH
52286: EMPTY
52287: LIST
52288: LIST
52289: PUSH
52290: LD_INT 1
52292: NEG
52293: PUSH
52294: LD_INT 0
52296: PUSH
52297: EMPTY
52298: LIST
52299: LIST
52300: PUSH
52301: LD_INT 1
52303: NEG
52304: PUSH
52305: LD_INT 1
52307: NEG
52308: PUSH
52309: EMPTY
52310: LIST
52311: LIST
52312: PUSH
52313: LD_INT 1
52315: NEG
52316: PUSH
52317: LD_INT 2
52319: NEG
52320: PUSH
52321: EMPTY
52322: LIST
52323: LIST
52324: PUSH
52325: LD_INT 0
52327: PUSH
52328: LD_INT 2
52330: NEG
52331: PUSH
52332: EMPTY
52333: LIST
52334: LIST
52335: PUSH
52336: LD_INT 1
52338: PUSH
52339: LD_INT 1
52341: NEG
52342: PUSH
52343: EMPTY
52344: LIST
52345: LIST
52346: PUSH
52347: LD_INT 2
52349: PUSH
52350: LD_INT 1
52352: PUSH
52353: EMPTY
52354: LIST
52355: LIST
52356: PUSH
52357: LD_INT 2
52359: PUSH
52360: LD_INT 2
52362: PUSH
52363: EMPTY
52364: LIST
52365: LIST
52366: PUSH
52367: LD_INT 1
52369: PUSH
52370: LD_INT 2
52372: PUSH
52373: EMPTY
52374: LIST
52375: LIST
52376: PUSH
52377: LD_INT 1
52379: NEG
52380: PUSH
52381: LD_INT 1
52383: PUSH
52384: EMPTY
52385: LIST
52386: LIST
52387: PUSH
52388: LD_INT 2
52390: NEG
52391: PUSH
52392: LD_INT 0
52394: PUSH
52395: EMPTY
52396: LIST
52397: LIST
52398: PUSH
52399: LD_INT 2
52401: NEG
52402: PUSH
52403: LD_INT 1
52405: NEG
52406: PUSH
52407: EMPTY
52408: LIST
52409: LIST
52410: PUSH
52411: LD_INT 2
52413: NEG
52414: PUSH
52415: LD_INT 2
52417: NEG
52418: PUSH
52419: EMPTY
52420: LIST
52421: LIST
52422: PUSH
52423: LD_INT 1
52425: NEG
52426: PUSH
52427: LD_INT 3
52429: NEG
52430: PUSH
52431: EMPTY
52432: LIST
52433: LIST
52434: PUSH
52435: LD_INT 1
52437: PUSH
52438: LD_INT 2
52440: NEG
52441: PUSH
52442: EMPTY
52443: LIST
52444: LIST
52445: PUSH
52446: LD_INT 3
52448: PUSH
52449: LD_INT 2
52451: PUSH
52452: EMPTY
52453: LIST
52454: LIST
52455: PUSH
52456: LD_INT 2
52458: PUSH
52459: LD_INT 3
52461: PUSH
52462: EMPTY
52463: LIST
52464: LIST
52465: PUSH
52466: LD_INT 2
52468: NEG
52469: PUSH
52470: LD_INT 1
52472: PUSH
52473: EMPTY
52474: LIST
52475: LIST
52476: PUSH
52477: LD_INT 3
52479: NEG
52480: PUSH
52481: LD_INT 1
52483: NEG
52484: PUSH
52485: EMPTY
52486: LIST
52487: LIST
52488: PUSH
52489: EMPTY
52490: LIST
52491: LIST
52492: LIST
52493: LIST
52494: LIST
52495: LIST
52496: LIST
52497: LIST
52498: LIST
52499: LIST
52500: LIST
52501: LIST
52502: LIST
52503: LIST
52504: LIST
52505: LIST
52506: LIST
52507: LIST
52508: LIST
52509: LIST
52510: LIST
52511: LIST
52512: LIST
52513: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
52514: LD_ADDR_VAR 0 35
52518: PUSH
52519: LD_INT 0
52521: PUSH
52522: LD_INT 0
52524: PUSH
52525: EMPTY
52526: LIST
52527: LIST
52528: PUSH
52529: LD_INT 0
52531: PUSH
52532: LD_INT 1
52534: NEG
52535: PUSH
52536: EMPTY
52537: LIST
52538: LIST
52539: PUSH
52540: LD_INT 1
52542: PUSH
52543: LD_INT 0
52545: PUSH
52546: EMPTY
52547: LIST
52548: LIST
52549: PUSH
52550: LD_INT 1
52552: PUSH
52553: LD_INT 1
52555: PUSH
52556: EMPTY
52557: LIST
52558: LIST
52559: PUSH
52560: LD_INT 0
52562: PUSH
52563: LD_INT 1
52565: PUSH
52566: EMPTY
52567: LIST
52568: LIST
52569: PUSH
52570: LD_INT 1
52572: NEG
52573: PUSH
52574: LD_INT 0
52576: PUSH
52577: EMPTY
52578: LIST
52579: LIST
52580: PUSH
52581: LD_INT 1
52583: NEG
52584: PUSH
52585: LD_INT 1
52587: NEG
52588: PUSH
52589: EMPTY
52590: LIST
52591: LIST
52592: PUSH
52593: LD_INT 2
52595: PUSH
52596: LD_INT 1
52598: PUSH
52599: EMPTY
52600: LIST
52601: LIST
52602: PUSH
52603: LD_INT 2
52605: NEG
52606: PUSH
52607: LD_INT 1
52609: NEG
52610: PUSH
52611: EMPTY
52612: LIST
52613: LIST
52614: PUSH
52615: EMPTY
52616: LIST
52617: LIST
52618: LIST
52619: LIST
52620: LIST
52621: LIST
52622: LIST
52623: LIST
52624: LIST
52625: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
52626: LD_ADDR_VAR 0 36
52630: PUSH
52631: LD_INT 0
52633: PUSH
52634: LD_INT 0
52636: PUSH
52637: EMPTY
52638: LIST
52639: LIST
52640: PUSH
52641: LD_INT 0
52643: PUSH
52644: LD_INT 1
52646: NEG
52647: PUSH
52648: EMPTY
52649: LIST
52650: LIST
52651: PUSH
52652: LD_INT 1
52654: PUSH
52655: LD_INT 0
52657: PUSH
52658: EMPTY
52659: LIST
52660: LIST
52661: PUSH
52662: LD_INT 1
52664: PUSH
52665: LD_INT 1
52667: PUSH
52668: EMPTY
52669: LIST
52670: LIST
52671: PUSH
52672: LD_INT 0
52674: PUSH
52675: LD_INT 1
52677: PUSH
52678: EMPTY
52679: LIST
52680: LIST
52681: PUSH
52682: LD_INT 1
52684: NEG
52685: PUSH
52686: LD_INT 0
52688: PUSH
52689: EMPTY
52690: LIST
52691: LIST
52692: PUSH
52693: LD_INT 1
52695: NEG
52696: PUSH
52697: LD_INT 1
52699: NEG
52700: PUSH
52701: EMPTY
52702: LIST
52703: LIST
52704: PUSH
52705: LD_INT 1
52707: NEG
52708: PUSH
52709: LD_INT 2
52711: NEG
52712: PUSH
52713: EMPTY
52714: LIST
52715: LIST
52716: PUSH
52717: LD_INT 1
52719: PUSH
52720: LD_INT 2
52722: PUSH
52723: EMPTY
52724: LIST
52725: LIST
52726: PUSH
52727: EMPTY
52728: LIST
52729: LIST
52730: LIST
52731: LIST
52732: LIST
52733: LIST
52734: LIST
52735: LIST
52736: LIST
52737: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
52738: LD_ADDR_VAR 0 37
52742: PUSH
52743: LD_INT 0
52745: PUSH
52746: LD_INT 0
52748: PUSH
52749: EMPTY
52750: LIST
52751: LIST
52752: PUSH
52753: LD_INT 0
52755: PUSH
52756: LD_INT 1
52758: NEG
52759: PUSH
52760: EMPTY
52761: LIST
52762: LIST
52763: PUSH
52764: LD_INT 1
52766: PUSH
52767: LD_INT 0
52769: PUSH
52770: EMPTY
52771: LIST
52772: LIST
52773: PUSH
52774: LD_INT 1
52776: PUSH
52777: LD_INT 1
52779: PUSH
52780: EMPTY
52781: LIST
52782: LIST
52783: PUSH
52784: LD_INT 0
52786: PUSH
52787: LD_INT 1
52789: PUSH
52790: EMPTY
52791: LIST
52792: LIST
52793: PUSH
52794: LD_INT 1
52796: NEG
52797: PUSH
52798: LD_INT 0
52800: PUSH
52801: EMPTY
52802: LIST
52803: LIST
52804: PUSH
52805: LD_INT 1
52807: NEG
52808: PUSH
52809: LD_INT 1
52811: NEG
52812: PUSH
52813: EMPTY
52814: LIST
52815: LIST
52816: PUSH
52817: LD_INT 1
52819: PUSH
52820: LD_INT 1
52822: NEG
52823: PUSH
52824: EMPTY
52825: LIST
52826: LIST
52827: PUSH
52828: LD_INT 1
52830: NEG
52831: PUSH
52832: LD_INT 1
52834: PUSH
52835: EMPTY
52836: LIST
52837: LIST
52838: PUSH
52839: EMPTY
52840: LIST
52841: LIST
52842: LIST
52843: LIST
52844: LIST
52845: LIST
52846: LIST
52847: LIST
52848: LIST
52849: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
52850: LD_ADDR_VAR 0 38
52854: PUSH
52855: LD_INT 0
52857: PUSH
52858: LD_INT 0
52860: PUSH
52861: EMPTY
52862: LIST
52863: LIST
52864: PUSH
52865: LD_INT 0
52867: PUSH
52868: LD_INT 1
52870: NEG
52871: PUSH
52872: EMPTY
52873: LIST
52874: LIST
52875: PUSH
52876: LD_INT 1
52878: PUSH
52879: LD_INT 0
52881: PUSH
52882: EMPTY
52883: LIST
52884: LIST
52885: PUSH
52886: LD_INT 1
52888: PUSH
52889: LD_INT 1
52891: PUSH
52892: EMPTY
52893: LIST
52894: LIST
52895: PUSH
52896: LD_INT 0
52898: PUSH
52899: LD_INT 1
52901: PUSH
52902: EMPTY
52903: LIST
52904: LIST
52905: PUSH
52906: LD_INT 1
52908: NEG
52909: PUSH
52910: LD_INT 0
52912: PUSH
52913: EMPTY
52914: LIST
52915: LIST
52916: PUSH
52917: LD_INT 1
52919: NEG
52920: PUSH
52921: LD_INT 1
52923: NEG
52924: PUSH
52925: EMPTY
52926: LIST
52927: LIST
52928: PUSH
52929: LD_INT 2
52931: PUSH
52932: LD_INT 1
52934: PUSH
52935: EMPTY
52936: LIST
52937: LIST
52938: PUSH
52939: LD_INT 2
52941: NEG
52942: PUSH
52943: LD_INT 1
52945: NEG
52946: PUSH
52947: EMPTY
52948: LIST
52949: LIST
52950: PUSH
52951: EMPTY
52952: LIST
52953: LIST
52954: LIST
52955: LIST
52956: LIST
52957: LIST
52958: LIST
52959: LIST
52960: LIST
52961: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
52962: LD_ADDR_VAR 0 39
52966: PUSH
52967: LD_INT 0
52969: PUSH
52970: LD_INT 0
52972: PUSH
52973: EMPTY
52974: LIST
52975: LIST
52976: PUSH
52977: LD_INT 0
52979: PUSH
52980: LD_INT 1
52982: NEG
52983: PUSH
52984: EMPTY
52985: LIST
52986: LIST
52987: PUSH
52988: LD_INT 1
52990: PUSH
52991: LD_INT 0
52993: PUSH
52994: EMPTY
52995: LIST
52996: LIST
52997: PUSH
52998: LD_INT 1
53000: PUSH
53001: LD_INT 1
53003: PUSH
53004: EMPTY
53005: LIST
53006: LIST
53007: PUSH
53008: LD_INT 0
53010: PUSH
53011: LD_INT 1
53013: PUSH
53014: EMPTY
53015: LIST
53016: LIST
53017: PUSH
53018: LD_INT 1
53020: NEG
53021: PUSH
53022: LD_INT 0
53024: PUSH
53025: EMPTY
53026: LIST
53027: LIST
53028: PUSH
53029: LD_INT 1
53031: NEG
53032: PUSH
53033: LD_INT 1
53035: NEG
53036: PUSH
53037: EMPTY
53038: LIST
53039: LIST
53040: PUSH
53041: LD_INT 1
53043: NEG
53044: PUSH
53045: LD_INT 2
53047: NEG
53048: PUSH
53049: EMPTY
53050: LIST
53051: LIST
53052: PUSH
53053: LD_INT 1
53055: PUSH
53056: LD_INT 2
53058: PUSH
53059: EMPTY
53060: LIST
53061: LIST
53062: PUSH
53063: EMPTY
53064: LIST
53065: LIST
53066: LIST
53067: LIST
53068: LIST
53069: LIST
53070: LIST
53071: LIST
53072: LIST
53073: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
53074: LD_ADDR_VAR 0 40
53078: PUSH
53079: LD_INT 0
53081: PUSH
53082: LD_INT 0
53084: PUSH
53085: EMPTY
53086: LIST
53087: LIST
53088: PUSH
53089: LD_INT 0
53091: PUSH
53092: LD_INT 1
53094: NEG
53095: PUSH
53096: EMPTY
53097: LIST
53098: LIST
53099: PUSH
53100: LD_INT 1
53102: PUSH
53103: LD_INT 0
53105: PUSH
53106: EMPTY
53107: LIST
53108: LIST
53109: PUSH
53110: LD_INT 1
53112: PUSH
53113: LD_INT 1
53115: PUSH
53116: EMPTY
53117: LIST
53118: LIST
53119: PUSH
53120: LD_INT 0
53122: PUSH
53123: LD_INT 1
53125: PUSH
53126: EMPTY
53127: LIST
53128: LIST
53129: PUSH
53130: LD_INT 1
53132: NEG
53133: PUSH
53134: LD_INT 0
53136: PUSH
53137: EMPTY
53138: LIST
53139: LIST
53140: PUSH
53141: LD_INT 1
53143: NEG
53144: PUSH
53145: LD_INT 1
53147: NEG
53148: PUSH
53149: EMPTY
53150: LIST
53151: LIST
53152: PUSH
53153: LD_INT 1
53155: PUSH
53156: LD_INT 1
53158: NEG
53159: PUSH
53160: EMPTY
53161: LIST
53162: LIST
53163: PUSH
53164: LD_INT 1
53166: NEG
53167: PUSH
53168: LD_INT 1
53170: PUSH
53171: EMPTY
53172: LIST
53173: LIST
53174: PUSH
53175: EMPTY
53176: LIST
53177: LIST
53178: LIST
53179: LIST
53180: LIST
53181: LIST
53182: LIST
53183: LIST
53184: LIST
53185: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53186: LD_ADDR_VAR 0 41
53190: PUSH
53191: LD_INT 0
53193: PUSH
53194: LD_INT 0
53196: PUSH
53197: EMPTY
53198: LIST
53199: LIST
53200: PUSH
53201: LD_INT 0
53203: PUSH
53204: LD_INT 1
53206: NEG
53207: PUSH
53208: EMPTY
53209: LIST
53210: LIST
53211: PUSH
53212: LD_INT 1
53214: PUSH
53215: LD_INT 0
53217: PUSH
53218: EMPTY
53219: LIST
53220: LIST
53221: PUSH
53222: LD_INT 1
53224: PUSH
53225: LD_INT 1
53227: PUSH
53228: EMPTY
53229: LIST
53230: LIST
53231: PUSH
53232: LD_INT 0
53234: PUSH
53235: LD_INT 1
53237: PUSH
53238: EMPTY
53239: LIST
53240: LIST
53241: PUSH
53242: LD_INT 1
53244: NEG
53245: PUSH
53246: LD_INT 0
53248: PUSH
53249: EMPTY
53250: LIST
53251: LIST
53252: PUSH
53253: LD_INT 1
53255: NEG
53256: PUSH
53257: LD_INT 1
53259: NEG
53260: PUSH
53261: EMPTY
53262: LIST
53263: LIST
53264: PUSH
53265: LD_INT 1
53267: NEG
53268: PUSH
53269: LD_INT 2
53271: NEG
53272: PUSH
53273: EMPTY
53274: LIST
53275: LIST
53276: PUSH
53277: LD_INT 1
53279: PUSH
53280: LD_INT 1
53282: NEG
53283: PUSH
53284: EMPTY
53285: LIST
53286: LIST
53287: PUSH
53288: LD_INT 2
53290: PUSH
53291: LD_INT 0
53293: PUSH
53294: EMPTY
53295: LIST
53296: LIST
53297: PUSH
53298: LD_INT 2
53300: PUSH
53301: LD_INT 1
53303: PUSH
53304: EMPTY
53305: LIST
53306: LIST
53307: PUSH
53308: LD_INT 2
53310: PUSH
53311: LD_INT 2
53313: PUSH
53314: EMPTY
53315: LIST
53316: LIST
53317: PUSH
53318: LD_INT 1
53320: PUSH
53321: LD_INT 2
53323: PUSH
53324: EMPTY
53325: LIST
53326: LIST
53327: PUSH
53328: LD_INT 1
53330: NEG
53331: PUSH
53332: LD_INT 1
53334: PUSH
53335: EMPTY
53336: LIST
53337: LIST
53338: PUSH
53339: LD_INT 2
53341: NEG
53342: PUSH
53343: LD_INT 0
53345: PUSH
53346: EMPTY
53347: LIST
53348: LIST
53349: PUSH
53350: LD_INT 2
53352: NEG
53353: PUSH
53354: LD_INT 1
53356: NEG
53357: PUSH
53358: EMPTY
53359: LIST
53360: LIST
53361: PUSH
53362: LD_INT 2
53364: NEG
53365: PUSH
53366: LD_INT 2
53368: NEG
53369: PUSH
53370: EMPTY
53371: LIST
53372: LIST
53373: PUSH
53374: LD_INT 2
53376: NEG
53377: PUSH
53378: LD_INT 3
53380: NEG
53381: PUSH
53382: EMPTY
53383: LIST
53384: LIST
53385: PUSH
53386: LD_INT 2
53388: PUSH
53389: LD_INT 1
53391: NEG
53392: PUSH
53393: EMPTY
53394: LIST
53395: LIST
53396: PUSH
53397: LD_INT 3
53399: PUSH
53400: LD_INT 0
53402: PUSH
53403: EMPTY
53404: LIST
53405: LIST
53406: PUSH
53407: LD_INT 3
53409: PUSH
53410: LD_INT 1
53412: PUSH
53413: EMPTY
53414: LIST
53415: LIST
53416: PUSH
53417: LD_INT 3
53419: PUSH
53420: LD_INT 2
53422: PUSH
53423: EMPTY
53424: LIST
53425: LIST
53426: PUSH
53427: LD_INT 3
53429: PUSH
53430: LD_INT 3
53432: PUSH
53433: EMPTY
53434: LIST
53435: LIST
53436: PUSH
53437: LD_INT 2
53439: PUSH
53440: LD_INT 3
53442: PUSH
53443: EMPTY
53444: LIST
53445: LIST
53446: PUSH
53447: LD_INT 2
53449: NEG
53450: PUSH
53451: LD_INT 1
53453: PUSH
53454: EMPTY
53455: LIST
53456: LIST
53457: PUSH
53458: LD_INT 3
53460: NEG
53461: PUSH
53462: LD_INT 0
53464: PUSH
53465: EMPTY
53466: LIST
53467: LIST
53468: PUSH
53469: LD_INT 3
53471: NEG
53472: PUSH
53473: LD_INT 1
53475: NEG
53476: PUSH
53477: EMPTY
53478: LIST
53479: LIST
53480: PUSH
53481: LD_INT 3
53483: NEG
53484: PUSH
53485: LD_INT 2
53487: NEG
53488: PUSH
53489: EMPTY
53490: LIST
53491: LIST
53492: PUSH
53493: LD_INT 3
53495: NEG
53496: PUSH
53497: LD_INT 3
53499: NEG
53500: PUSH
53501: EMPTY
53502: LIST
53503: LIST
53504: PUSH
53505: EMPTY
53506: LIST
53507: LIST
53508: LIST
53509: LIST
53510: LIST
53511: LIST
53512: LIST
53513: LIST
53514: LIST
53515: LIST
53516: LIST
53517: LIST
53518: LIST
53519: LIST
53520: LIST
53521: LIST
53522: LIST
53523: LIST
53524: LIST
53525: LIST
53526: LIST
53527: LIST
53528: LIST
53529: LIST
53530: LIST
53531: LIST
53532: LIST
53533: LIST
53534: LIST
53535: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53536: LD_ADDR_VAR 0 42
53540: PUSH
53541: LD_INT 0
53543: PUSH
53544: LD_INT 0
53546: PUSH
53547: EMPTY
53548: LIST
53549: LIST
53550: PUSH
53551: LD_INT 0
53553: PUSH
53554: LD_INT 1
53556: NEG
53557: PUSH
53558: EMPTY
53559: LIST
53560: LIST
53561: PUSH
53562: LD_INT 1
53564: PUSH
53565: LD_INT 0
53567: PUSH
53568: EMPTY
53569: LIST
53570: LIST
53571: PUSH
53572: LD_INT 1
53574: PUSH
53575: LD_INT 1
53577: PUSH
53578: EMPTY
53579: LIST
53580: LIST
53581: PUSH
53582: LD_INT 0
53584: PUSH
53585: LD_INT 1
53587: PUSH
53588: EMPTY
53589: LIST
53590: LIST
53591: PUSH
53592: LD_INT 1
53594: NEG
53595: PUSH
53596: LD_INT 0
53598: PUSH
53599: EMPTY
53600: LIST
53601: LIST
53602: PUSH
53603: LD_INT 1
53605: NEG
53606: PUSH
53607: LD_INT 1
53609: NEG
53610: PUSH
53611: EMPTY
53612: LIST
53613: LIST
53614: PUSH
53615: LD_INT 1
53617: NEG
53618: PUSH
53619: LD_INT 2
53621: NEG
53622: PUSH
53623: EMPTY
53624: LIST
53625: LIST
53626: PUSH
53627: LD_INT 0
53629: PUSH
53630: LD_INT 2
53632: NEG
53633: PUSH
53634: EMPTY
53635: LIST
53636: LIST
53637: PUSH
53638: LD_INT 1
53640: PUSH
53641: LD_INT 1
53643: NEG
53644: PUSH
53645: EMPTY
53646: LIST
53647: LIST
53648: PUSH
53649: LD_INT 2
53651: PUSH
53652: LD_INT 1
53654: PUSH
53655: EMPTY
53656: LIST
53657: LIST
53658: PUSH
53659: LD_INT 2
53661: PUSH
53662: LD_INT 2
53664: PUSH
53665: EMPTY
53666: LIST
53667: LIST
53668: PUSH
53669: LD_INT 1
53671: PUSH
53672: LD_INT 2
53674: PUSH
53675: EMPTY
53676: LIST
53677: LIST
53678: PUSH
53679: LD_INT 0
53681: PUSH
53682: LD_INT 2
53684: PUSH
53685: EMPTY
53686: LIST
53687: LIST
53688: PUSH
53689: LD_INT 1
53691: NEG
53692: PUSH
53693: LD_INT 1
53695: PUSH
53696: EMPTY
53697: LIST
53698: LIST
53699: PUSH
53700: LD_INT 2
53702: NEG
53703: PUSH
53704: LD_INT 1
53706: NEG
53707: PUSH
53708: EMPTY
53709: LIST
53710: LIST
53711: PUSH
53712: LD_INT 2
53714: NEG
53715: PUSH
53716: LD_INT 2
53718: NEG
53719: PUSH
53720: EMPTY
53721: LIST
53722: LIST
53723: PUSH
53724: LD_INT 2
53726: NEG
53727: PUSH
53728: LD_INT 3
53730: NEG
53731: PUSH
53732: EMPTY
53733: LIST
53734: LIST
53735: PUSH
53736: LD_INT 1
53738: NEG
53739: PUSH
53740: LD_INT 3
53742: NEG
53743: PUSH
53744: EMPTY
53745: LIST
53746: LIST
53747: PUSH
53748: LD_INT 0
53750: PUSH
53751: LD_INT 3
53753: NEG
53754: PUSH
53755: EMPTY
53756: LIST
53757: LIST
53758: PUSH
53759: LD_INT 1
53761: PUSH
53762: LD_INT 2
53764: NEG
53765: PUSH
53766: EMPTY
53767: LIST
53768: LIST
53769: PUSH
53770: LD_INT 3
53772: PUSH
53773: LD_INT 2
53775: PUSH
53776: EMPTY
53777: LIST
53778: LIST
53779: PUSH
53780: LD_INT 3
53782: PUSH
53783: LD_INT 3
53785: PUSH
53786: EMPTY
53787: LIST
53788: LIST
53789: PUSH
53790: LD_INT 2
53792: PUSH
53793: LD_INT 3
53795: PUSH
53796: EMPTY
53797: LIST
53798: LIST
53799: PUSH
53800: LD_INT 1
53802: PUSH
53803: LD_INT 3
53805: PUSH
53806: EMPTY
53807: LIST
53808: LIST
53809: PUSH
53810: LD_INT 0
53812: PUSH
53813: LD_INT 3
53815: PUSH
53816: EMPTY
53817: LIST
53818: LIST
53819: PUSH
53820: LD_INT 1
53822: NEG
53823: PUSH
53824: LD_INT 2
53826: PUSH
53827: EMPTY
53828: LIST
53829: LIST
53830: PUSH
53831: LD_INT 3
53833: NEG
53834: PUSH
53835: LD_INT 2
53837: NEG
53838: PUSH
53839: EMPTY
53840: LIST
53841: LIST
53842: PUSH
53843: LD_INT 3
53845: NEG
53846: PUSH
53847: LD_INT 3
53849: NEG
53850: PUSH
53851: EMPTY
53852: LIST
53853: LIST
53854: PUSH
53855: EMPTY
53856: LIST
53857: LIST
53858: LIST
53859: LIST
53860: LIST
53861: LIST
53862: LIST
53863: LIST
53864: LIST
53865: LIST
53866: LIST
53867: LIST
53868: LIST
53869: LIST
53870: LIST
53871: LIST
53872: LIST
53873: LIST
53874: LIST
53875: LIST
53876: LIST
53877: LIST
53878: LIST
53879: LIST
53880: LIST
53881: LIST
53882: LIST
53883: LIST
53884: LIST
53885: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53886: LD_ADDR_VAR 0 43
53890: PUSH
53891: LD_INT 0
53893: PUSH
53894: LD_INT 0
53896: PUSH
53897: EMPTY
53898: LIST
53899: LIST
53900: PUSH
53901: LD_INT 0
53903: PUSH
53904: LD_INT 1
53906: NEG
53907: PUSH
53908: EMPTY
53909: LIST
53910: LIST
53911: PUSH
53912: LD_INT 1
53914: PUSH
53915: LD_INT 0
53917: PUSH
53918: EMPTY
53919: LIST
53920: LIST
53921: PUSH
53922: LD_INT 1
53924: PUSH
53925: LD_INT 1
53927: PUSH
53928: EMPTY
53929: LIST
53930: LIST
53931: PUSH
53932: LD_INT 0
53934: PUSH
53935: LD_INT 1
53937: PUSH
53938: EMPTY
53939: LIST
53940: LIST
53941: PUSH
53942: LD_INT 1
53944: NEG
53945: PUSH
53946: LD_INT 0
53948: PUSH
53949: EMPTY
53950: LIST
53951: LIST
53952: PUSH
53953: LD_INT 1
53955: NEG
53956: PUSH
53957: LD_INT 1
53959: NEG
53960: PUSH
53961: EMPTY
53962: LIST
53963: LIST
53964: PUSH
53965: LD_INT 1
53967: NEG
53968: PUSH
53969: LD_INT 2
53971: NEG
53972: PUSH
53973: EMPTY
53974: LIST
53975: LIST
53976: PUSH
53977: LD_INT 0
53979: PUSH
53980: LD_INT 2
53982: NEG
53983: PUSH
53984: EMPTY
53985: LIST
53986: LIST
53987: PUSH
53988: LD_INT 1
53990: PUSH
53991: LD_INT 1
53993: NEG
53994: PUSH
53995: EMPTY
53996: LIST
53997: LIST
53998: PUSH
53999: LD_INT 2
54001: PUSH
54002: LD_INT 0
54004: PUSH
54005: EMPTY
54006: LIST
54007: LIST
54008: PUSH
54009: LD_INT 2
54011: PUSH
54012: LD_INT 1
54014: PUSH
54015: EMPTY
54016: LIST
54017: LIST
54018: PUSH
54019: LD_INT 1
54021: PUSH
54022: LD_INT 2
54024: PUSH
54025: EMPTY
54026: LIST
54027: LIST
54028: PUSH
54029: LD_INT 0
54031: PUSH
54032: LD_INT 2
54034: PUSH
54035: EMPTY
54036: LIST
54037: LIST
54038: PUSH
54039: LD_INT 1
54041: NEG
54042: PUSH
54043: LD_INT 1
54045: PUSH
54046: EMPTY
54047: LIST
54048: LIST
54049: PUSH
54050: LD_INT 2
54052: NEG
54053: PUSH
54054: LD_INT 0
54056: PUSH
54057: EMPTY
54058: LIST
54059: LIST
54060: PUSH
54061: LD_INT 2
54063: NEG
54064: PUSH
54065: LD_INT 1
54067: NEG
54068: PUSH
54069: EMPTY
54070: LIST
54071: LIST
54072: PUSH
54073: LD_INT 1
54075: NEG
54076: PUSH
54077: LD_INT 3
54079: NEG
54080: PUSH
54081: EMPTY
54082: LIST
54083: LIST
54084: PUSH
54085: LD_INT 0
54087: PUSH
54088: LD_INT 3
54090: NEG
54091: PUSH
54092: EMPTY
54093: LIST
54094: LIST
54095: PUSH
54096: LD_INT 1
54098: PUSH
54099: LD_INT 2
54101: NEG
54102: PUSH
54103: EMPTY
54104: LIST
54105: LIST
54106: PUSH
54107: LD_INT 2
54109: PUSH
54110: LD_INT 1
54112: NEG
54113: PUSH
54114: EMPTY
54115: LIST
54116: LIST
54117: PUSH
54118: LD_INT 3
54120: PUSH
54121: LD_INT 0
54123: PUSH
54124: EMPTY
54125: LIST
54126: LIST
54127: PUSH
54128: LD_INT 3
54130: PUSH
54131: LD_INT 1
54133: PUSH
54134: EMPTY
54135: LIST
54136: LIST
54137: PUSH
54138: LD_INT 1
54140: PUSH
54141: LD_INT 3
54143: PUSH
54144: EMPTY
54145: LIST
54146: LIST
54147: PUSH
54148: LD_INT 0
54150: PUSH
54151: LD_INT 3
54153: PUSH
54154: EMPTY
54155: LIST
54156: LIST
54157: PUSH
54158: LD_INT 1
54160: NEG
54161: PUSH
54162: LD_INT 2
54164: PUSH
54165: EMPTY
54166: LIST
54167: LIST
54168: PUSH
54169: LD_INT 2
54171: NEG
54172: PUSH
54173: LD_INT 1
54175: PUSH
54176: EMPTY
54177: LIST
54178: LIST
54179: PUSH
54180: LD_INT 3
54182: NEG
54183: PUSH
54184: LD_INT 0
54186: PUSH
54187: EMPTY
54188: LIST
54189: LIST
54190: PUSH
54191: LD_INT 3
54193: NEG
54194: PUSH
54195: LD_INT 1
54197: NEG
54198: PUSH
54199: EMPTY
54200: LIST
54201: LIST
54202: PUSH
54203: EMPTY
54204: LIST
54205: LIST
54206: LIST
54207: LIST
54208: LIST
54209: LIST
54210: LIST
54211: LIST
54212: LIST
54213: LIST
54214: LIST
54215: LIST
54216: LIST
54217: LIST
54218: LIST
54219: LIST
54220: LIST
54221: LIST
54222: LIST
54223: LIST
54224: LIST
54225: LIST
54226: LIST
54227: LIST
54228: LIST
54229: LIST
54230: LIST
54231: LIST
54232: LIST
54233: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54234: LD_ADDR_VAR 0 44
54238: PUSH
54239: LD_INT 0
54241: PUSH
54242: LD_INT 0
54244: PUSH
54245: EMPTY
54246: LIST
54247: LIST
54248: PUSH
54249: LD_INT 0
54251: PUSH
54252: LD_INT 1
54254: NEG
54255: PUSH
54256: EMPTY
54257: LIST
54258: LIST
54259: PUSH
54260: LD_INT 1
54262: PUSH
54263: LD_INT 0
54265: PUSH
54266: EMPTY
54267: LIST
54268: LIST
54269: PUSH
54270: LD_INT 1
54272: PUSH
54273: LD_INT 1
54275: PUSH
54276: EMPTY
54277: LIST
54278: LIST
54279: PUSH
54280: LD_INT 0
54282: PUSH
54283: LD_INT 1
54285: PUSH
54286: EMPTY
54287: LIST
54288: LIST
54289: PUSH
54290: LD_INT 1
54292: NEG
54293: PUSH
54294: LD_INT 0
54296: PUSH
54297: EMPTY
54298: LIST
54299: LIST
54300: PUSH
54301: LD_INT 1
54303: NEG
54304: PUSH
54305: LD_INT 1
54307: NEG
54308: PUSH
54309: EMPTY
54310: LIST
54311: LIST
54312: PUSH
54313: LD_INT 1
54315: NEG
54316: PUSH
54317: LD_INT 2
54319: NEG
54320: PUSH
54321: EMPTY
54322: LIST
54323: LIST
54324: PUSH
54325: LD_INT 1
54327: PUSH
54328: LD_INT 1
54330: NEG
54331: PUSH
54332: EMPTY
54333: LIST
54334: LIST
54335: PUSH
54336: LD_INT 2
54338: PUSH
54339: LD_INT 0
54341: PUSH
54342: EMPTY
54343: LIST
54344: LIST
54345: PUSH
54346: LD_INT 2
54348: PUSH
54349: LD_INT 1
54351: PUSH
54352: EMPTY
54353: LIST
54354: LIST
54355: PUSH
54356: LD_INT 2
54358: PUSH
54359: LD_INT 2
54361: PUSH
54362: EMPTY
54363: LIST
54364: LIST
54365: PUSH
54366: LD_INT 1
54368: PUSH
54369: LD_INT 2
54371: PUSH
54372: EMPTY
54373: LIST
54374: LIST
54375: PUSH
54376: LD_INT 1
54378: NEG
54379: PUSH
54380: LD_INT 1
54382: PUSH
54383: EMPTY
54384: LIST
54385: LIST
54386: PUSH
54387: LD_INT 2
54389: NEG
54390: PUSH
54391: LD_INT 0
54393: PUSH
54394: EMPTY
54395: LIST
54396: LIST
54397: PUSH
54398: LD_INT 2
54400: NEG
54401: PUSH
54402: LD_INT 1
54404: NEG
54405: PUSH
54406: EMPTY
54407: LIST
54408: LIST
54409: PUSH
54410: LD_INT 2
54412: NEG
54413: PUSH
54414: LD_INT 2
54416: NEG
54417: PUSH
54418: EMPTY
54419: LIST
54420: LIST
54421: PUSH
54422: LD_INT 2
54424: NEG
54425: PUSH
54426: LD_INT 3
54428: NEG
54429: PUSH
54430: EMPTY
54431: LIST
54432: LIST
54433: PUSH
54434: LD_INT 2
54436: PUSH
54437: LD_INT 1
54439: NEG
54440: PUSH
54441: EMPTY
54442: LIST
54443: LIST
54444: PUSH
54445: LD_INT 3
54447: PUSH
54448: LD_INT 0
54450: PUSH
54451: EMPTY
54452: LIST
54453: LIST
54454: PUSH
54455: LD_INT 3
54457: PUSH
54458: LD_INT 1
54460: PUSH
54461: EMPTY
54462: LIST
54463: LIST
54464: PUSH
54465: LD_INT 3
54467: PUSH
54468: LD_INT 2
54470: PUSH
54471: EMPTY
54472: LIST
54473: LIST
54474: PUSH
54475: LD_INT 3
54477: PUSH
54478: LD_INT 3
54480: PUSH
54481: EMPTY
54482: LIST
54483: LIST
54484: PUSH
54485: LD_INT 2
54487: PUSH
54488: LD_INT 3
54490: PUSH
54491: EMPTY
54492: LIST
54493: LIST
54494: PUSH
54495: LD_INT 2
54497: NEG
54498: PUSH
54499: LD_INT 1
54501: PUSH
54502: EMPTY
54503: LIST
54504: LIST
54505: PUSH
54506: LD_INT 3
54508: NEG
54509: PUSH
54510: LD_INT 0
54512: PUSH
54513: EMPTY
54514: LIST
54515: LIST
54516: PUSH
54517: LD_INT 3
54519: NEG
54520: PUSH
54521: LD_INT 1
54523: NEG
54524: PUSH
54525: EMPTY
54526: LIST
54527: LIST
54528: PUSH
54529: LD_INT 3
54531: NEG
54532: PUSH
54533: LD_INT 2
54535: NEG
54536: PUSH
54537: EMPTY
54538: LIST
54539: LIST
54540: PUSH
54541: LD_INT 3
54543: NEG
54544: PUSH
54545: LD_INT 3
54547: NEG
54548: PUSH
54549: EMPTY
54550: LIST
54551: LIST
54552: PUSH
54553: EMPTY
54554: LIST
54555: LIST
54556: LIST
54557: LIST
54558: LIST
54559: LIST
54560: LIST
54561: LIST
54562: LIST
54563: LIST
54564: LIST
54565: LIST
54566: LIST
54567: LIST
54568: LIST
54569: LIST
54570: LIST
54571: LIST
54572: LIST
54573: LIST
54574: LIST
54575: LIST
54576: LIST
54577: LIST
54578: LIST
54579: LIST
54580: LIST
54581: LIST
54582: LIST
54583: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54584: LD_ADDR_VAR 0 45
54588: PUSH
54589: LD_INT 0
54591: PUSH
54592: LD_INT 0
54594: PUSH
54595: EMPTY
54596: LIST
54597: LIST
54598: PUSH
54599: LD_INT 0
54601: PUSH
54602: LD_INT 1
54604: NEG
54605: PUSH
54606: EMPTY
54607: LIST
54608: LIST
54609: PUSH
54610: LD_INT 1
54612: PUSH
54613: LD_INT 0
54615: PUSH
54616: EMPTY
54617: LIST
54618: LIST
54619: PUSH
54620: LD_INT 1
54622: PUSH
54623: LD_INT 1
54625: PUSH
54626: EMPTY
54627: LIST
54628: LIST
54629: PUSH
54630: LD_INT 0
54632: PUSH
54633: LD_INT 1
54635: PUSH
54636: EMPTY
54637: LIST
54638: LIST
54639: PUSH
54640: LD_INT 1
54642: NEG
54643: PUSH
54644: LD_INT 0
54646: PUSH
54647: EMPTY
54648: LIST
54649: LIST
54650: PUSH
54651: LD_INT 1
54653: NEG
54654: PUSH
54655: LD_INT 1
54657: NEG
54658: PUSH
54659: EMPTY
54660: LIST
54661: LIST
54662: PUSH
54663: LD_INT 1
54665: NEG
54666: PUSH
54667: LD_INT 2
54669: NEG
54670: PUSH
54671: EMPTY
54672: LIST
54673: LIST
54674: PUSH
54675: LD_INT 0
54677: PUSH
54678: LD_INT 2
54680: NEG
54681: PUSH
54682: EMPTY
54683: LIST
54684: LIST
54685: PUSH
54686: LD_INT 1
54688: PUSH
54689: LD_INT 1
54691: NEG
54692: PUSH
54693: EMPTY
54694: LIST
54695: LIST
54696: PUSH
54697: LD_INT 2
54699: PUSH
54700: LD_INT 1
54702: PUSH
54703: EMPTY
54704: LIST
54705: LIST
54706: PUSH
54707: LD_INT 2
54709: PUSH
54710: LD_INT 2
54712: PUSH
54713: EMPTY
54714: LIST
54715: LIST
54716: PUSH
54717: LD_INT 1
54719: PUSH
54720: LD_INT 2
54722: PUSH
54723: EMPTY
54724: LIST
54725: LIST
54726: PUSH
54727: LD_INT 0
54729: PUSH
54730: LD_INT 2
54732: PUSH
54733: EMPTY
54734: LIST
54735: LIST
54736: PUSH
54737: LD_INT 1
54739: NEG
54740: PUSH
54741: LD_INT 1
54743: PUSH
54744: EMPTY
54745: LIST
54746: LIST
54747: PUSH
54748: LD_INT 2
54750: NEG
54751: PUSH
54752: LD_INT 1
54754: NEG
54755: PUSH
54756: EMPTY
54757: LIST
54758: LIST
54759: PUSH
54760: LD_INT 2
54762: NEG
54763: PUSH
54764: LD_INT 2
54766: NEG
54767: PUSH
54768: EMPTY
54769: LIST
54770: LIST
54771: PUSH
54772: LD_INT 2
54774: NEG
54775: PUSH
54776: LD_INT 3
54778: NEG
54779: PUSH
54780: EMPTY
54781: LIST
54782: LIST
54783: PUSH
54784: LD_INT 1
54786: NEG
54787: PUSH
54788: LD_INT 3
54790: NEG
54791: PUSH
54792: EMPTY
54793: LIST
54794: LIST
54795: PUSH
54796: LD_INT 0
54798: PUSH
54799: LD_INT 3
54801: NEG
54802: PUSH
54803: EMPTY
54804: LIST
54805: LIST
54806: PUSH
54807: LD_INT 1
54809: PUSH
54810: LD_INT 2
54812: NEG
54813: PUSH
54814: EMPTY
54815: LIST
54816: LIST
54817: PUSH
54818: LD_INT 3
54820: PUSH
54821: LD_INT 2
54823: PUSH
54824: EMPTY
54825: LIST
54826: LIST
54827: PUSH
54828: LD_INT 3
54830: PUSH
54831: LD_INT 3
54833: PUSH
54834: EMPTY
54835: LIST
54836: LIST
54837: PUSH
54838: LD_INT 2
54840: PUSH
54841: LD_INT 3
54843: PUSH
54844: EMPTY
54845: LIST
54846: LIST
54847: PUSH
54848: LD_INT 1
54850: PUSH
54851: LD_INT 3
54853: PUSH
54854: EMPTY
54855: LIST
54856: LIST
54857: PUSH
54858: LD_INT 0
54860: PUSH
54861: LD_INT 3
54863: PUSH
54864: EMPTY
54865: LIST
54866: LIST
54867: PUSH
54868: LD_INT 1
54870: NEG
54871: PUSH
54872: LD_INT 2
54874: PUSH
54875: EMPTY
54876: LIST
54877: LIST
54878: PUSH
54879: LD_INT 3
54881: NEG
54882: PUSH
54883: LD_INT 2
54885: NEG
54886: PUSH
54887: EMPTY
54888: LIST
54889: LIST
54890: PUSH
54891: LD_INT 3
54893: NEG
54894: PUSH
54895: LD_INT 3
54897: NEG
54898: PUSH
54899: EMPTY
54900: LIST
54901: LIST
54902: PUSH
54903: EMPTY
54904: LIST
54905: LIST
54906: LIST
54907: LIST
54908: LIST
54909: LIST
54910: LIST
54911: LIST
54912: LIST
54913: LIST
54914: LIST
54915: LIST
54916: LIST
54917: LIST
54918: LIST
54919: LIST
54920: LIST
54921: LIST
54922: LIST
54923: LIST
54924: LIST
54925: LIST
54926: LIST
54927: LIST
54928: LIST
54929: LIST
54930: LIST
54931: LIST
54932: LIST
54933: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54934: LD_ADDR_VAR 0 46
54938: PUSH
54939: LD_INT 0
54941: PUSH
54942: LD_INT 0
54944: PUSH
54945: EMPTY
54946: LIST
54947: LIST
54948: PUSH
54949: LD_INT 0
54951: PUSH
54952: LD_INT 1
54954: NEG
54955: PUSH
54956: EMPTY
54957: LIST
54958: LIST
54959: PUSH
54960: LD_INT 1
54962: PUSH
54963: LD_INT 0
54965: PUSH
54966: EMPTY
54967: LIST
54968: LIST
54969: PUSH
54970: LD_INT 1
54972: PUSH
54973: LD_INT 1
54975: PUSH
54976: EMPTY
54977: LIST
54978: LIST
54979: PUSH
54980: LD_INT 0
54982: PUSH
54983: LD_INT 1
54985: PUSH
54986: EMPTY
54987: LIST
54988: LIST
54989: PUSH
54990: LD_INT 1
54992: NEG
54993: PUSH
54994: LD_INT 0
54996: PUSH
54997: EMPTY
54998: LIST
54999: LIST
55000: PUSH
55001: LD_INT 1
55003: NEG
55004: PUSH
55005: LD_INT 1
55007: NEG
55008: PUSH
55009: EMPTY
55010: LIST
55011: LIST
55012: PUSH
55013: LD_INT 1
55015: NEG
55016: PUSH
55017: LD_INT 2
55019: NEG
55020: PUSH
55021: EMPTY
55022: LIST
55023: LIST
55024: PUSH
55025: LD_INT 0
55027: PUSH
55028: LD_INT 2
55030: NEG
55031: PUSH
55032: EMPTY
55033: LIST
55034: LIST
55035: PUSH
55036: LD_INT 1
55038: PUSH
55039: LD_INT 1
55041: NEG
55042: PUSH
55043: EMPTY
55044: LIST
55045: LIST
55046: PUSH
55047: LD_INT 2
55049: PUSH
55050: LD_INT 0
55052: PUSH
55053: EMPTY
55054: LIST
55055: LIST
55056: PUSH
55057: LD_INT 2
55059: PUSH
55060: LD_INT 1
55062: PUSH
55063: EMPTY
55064: LIST
55065: LIST
55066: PUSH
55067: LD_INT 1
55069: PUSH
55070: LD_INT 2
55072: PUSH
55073: EMPTY
55074: LIST
55075: LIST
55076: PUSH
55077: LD_INT 0
55079: PUSH
55080: LD_INT 2
55082: PUSH
55083: EMPTY
55084: LIST
55085: LIST
55086: PUSH
55087: LD_INT 1
55089: NEG
55090: PUSH
55091: LD_INT 1
55093: PUSH
55094: EMPTY
55095: LIST
55096: LIST
55097: PUSH
55098: LD_INT 2
55100: NEG
55101: PUSH
55102: LD_INT 0
55104: PUSH
55105: EMPTY
55106: LIST
55107: LIST
55108: PUSH
55109: LD_INT 2
55111: NEG
55112: PUSH
55113: LD_INT 1
55115: NEG
55116: PUSH
55117: EMPTY
55118: LIST
55119: LIST
55120: PUSH
55121: LD_INT 1
55123: NEG
55124: PUSH
55125: LD_INT 3
55127: NEG
55128: PUSH
55129: EMPTY
55130: LIST
55131: LIST
55132: PUSH
55133: LD_INT 0
55135: PUSH
55136: LD_INT 3
55138: NEG
55139: PUSH
55140: EMPTY
55141: LIST
55142: LIST
55143: PUSH
55144: LD_INT 1
55146: PUSH
55147: LD_INT 2
55149: NEG
55150: PUSH
55151: EMPTY
55152: LIST
55153: LIST
55154: PUSH
55155: LD_INT 2
55157: PUSH
55158: LD_INT 1
55160: NEG
55161: PUSH
55162: EMPTY
55163: LIST
55164: LIST
55165: PUSH
55166: LD_INT 3
55168: PUSH
55169: LD_INT 0
55171: PUSH
55172: EMPTY
55173: LIST
55174: LIST
55175: PUSH
55176: LD_INT 3
55178: PUSH
55179: LD_INT 1
55181: PUSH
55182: EMPTY
55183: LIST
55184: LIST
55185: PUSH
55186: LD_INT 1
55188: PUSH
55189: LD_INT 3
55191: PUSH
55192: EMPTY
55193: LIST
55194: LIST
55195: PUSH
55196: LD_INT 0
55198: PUSH
55199: LD_INT 3
55201: PUSH
55202: EMPTY
55203: LIST
55204: LIST
55205: PUSH
55206: LD_INT 1
55208: NEG
55209: PUSH
55210: LD_INT 2
55212: PUSH
55213: EMPTY
55214: LIST
55215: LIST
55216: PUSH
55217: LD_INT 2
55219: NEG
55220: PUSH
55221: LD_INT 1
55223: PUSH
55224: EMPTY
55225: LIST
55226: LIST
55227: PUSH
55228: LD_INT 3
55230: NEG
55231: PUSH
55232: LD_INT 0
55234: PUSH
55235: EMPTY
55236: LIST
55237: LIST
55238: PUSH
55239: LD_INT 3
55241: NEG
55242: PUSH
55243: LD_INT 1
55245: NEG
55246: PUSH
55247: EMPTY
55248: LIST
55249: LIST
55250: PUSH
55251: EMPTY
55252: LIST
55253: LIST
55254: LIST
55255: LIST
55256: LIST
55257: LIST
55258: LIST
55259: LIST
55260: LIST
55261: LIST
55262: LIST
55263: LIST
55264: LIST
55265: LIST
55266: LIST
55267: LIST
55268: LIST
55269: LIST
55270: LIST
55271: LIST
55272: LIST
55273: LIST
55274: LIST
55275: LIST
55276: LIST
55277: LIST
55278: LIST
55279: LIST
55280: LIST
55281: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55282: LD_ADDR_VAR 0 47
55286: PUSH
55287: LD_INT 0
55289: PUSH
55290: LD_INT 0
55292: PUSH
55293: EMPTY
55294: LIST
55295: LIST
55296: PUSH
55297: LD_INT 0
55299: PUSH
55300: LD_INT 1
55302: NEG
55303: PUSH
55304: EMPTY
55305: LIST
55306: LIST
55307: PUSH
55308: LD_INT 1
55310: PUSH
55311: LD_INT 0
55313: PUSH
55314: EMPTY
55315: LIST
55316: LIST
55317: PUSH
55318: LD_INT 1
55320: PUSH
55321: LD_INT 1
55323: PUSH
55324: EMPTY
55325: LIST
55326: LIST
55327: PUSH
55328: LD_INT 0
55330: PUSH
55331: LD_INT 1
55333: PUSH
55334: EMPTY
55335: LIST
55336: LIST
55337: PUSH
55338: LD_INT 1
55340: NEG
55341: PUSH
55342: LD_INT 0
55344: PUSH
55345: EMPTY
55346: LIST
55347: LIST
55348: PUSH
55349: LD_INT 1
55351: NEG
55352: PUSH
55353: LD_INT 1
55355: NEG
55356: PUSH
55357: EMPTY
55358: LIST
55359: LIST
55360: PUSH
55361: LD_INT 1
55363: NEG
55364: PUSH
55365: LD_INT 2
55367: NEG
55368: PUSH
55369: EMPTY
55370: LIST
55371: LIST
55372: PUSH
55373: LD_INT 0
55375: PUSH
55376: LD_INT 2
55378: NEG
55379: PUSH
55380: EMPTY
55381: LIST
55382: LIST
55383: PUSH
55384: LD_INT 1
55386: PUSH
55387: LD_INT 1
55389: NEG
55390: PUSH
55391: EMPTY
55392: LIST
55393: LIST
55394: PUSH
55395: LD_INT 2
55397: NEG
55398: PUSH
55399: LD_INT 1
55401: NEG
55402: PUSH
55403: EMPTY
55404: LIST
55405: LIST
55406: PUSH
55407: LD_INT 2
55409: NEG
55410: PUSH
55411: LD_INT 2
55413: NEG
55414: PUSH
55415: EMPTY
55416: LIST
55417: LIST
55418: PUSH
55419: EMPTY
55420: LIST
55421: LIST
55422: LIST
55423: LIST
55424: LIST
55425: LIST
55426: LIST
55427: LIST
55428: LIST
55429: LIST
55430: LIST
55431: LIST
55432: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
55433: LD_ADDR_VAR 0 48
55437: PUSH
55438: LD_INT 0
55440: PUSH
55441: LD_INT 0
55443: PUSH
55444: EMPTY
55445: LIST
55446: LIST
55447: PUSH
55448: LD_INT 0
55450: PUSH
55451: LD_INT 1
55453: NEG
55454: PUSH
55455: EMPTY
55456: LIST
55457: LIST
55458: PUSH
55459: LD_INT 1
55461: PUSH
55462: LD_INT 0
55464: PUSH
55465: EMPTY
55466: LIST
55467: LIST
55468: PUSH
55469: LD_INT 1
55471: PUSH
55472: LD_INT 1
55474: PUSH
55475: EMPTY
55476: LIST
55477: LIST
55478: PUSH
55479: LD_INT 0
55481: PUSH
55482: LD_INT 1
55484: PUSH
55485: EMPTY
55486: LIST
55487: LIST
55488: PUSH
55489: LD_INT 1
55491: NEG
55492: PUSH
55493: LD_INT 0
55495: PUSH
55496: EMPTY
55497: LIST
55498: LIST
55499: PUSH
55500: LD_INT 1
55502: NEG
55503: PUSH
55504: LD_INT 1
55506: NEG
55507: PUSH
55508: EMPTY
55509: LIST
55510: LIST
55511: PUSH
55512: LD_INT 1
55514: NEG
55515: PUSH
55516: LD_INT 2
55518: NEG
55519: PUSH
55520: EMPTY
55521: LIST
55522: LIST
55523: PUSH
55524: LD_INT 0
55526: PUSH
55527: LD_INT 2
55529: NEG
55530: PUSH
55531: EMPTY
55532: LIST
55533: LIST
55534: PUSH
55535: LD_INT 1
55537: PUSH
55538: LD_INT 1
55540: NEG
55541: PUSH
55542: EMPTY
55543: LIST
55544: LIST
55545: PUSH
55546: LD_INT 2
55548: PUSH
55549: LD_INT 0
55551: PUSH
55552: EMPTY
55553: LIST
55554: LIST
55555: PUSH
55556: LD_INT 2
55558: PUSH
55559: LD_INT 1
55561: PUSH
55562: EMPTY
55563: LIST
55564: LIST
55565: PUSH
55566: EMPTY
55567: LIST
55568: LIST
55569: LIST
55570: LIST
55571: LIST
55572: LIST
55573: LIST
55574: LIST
55575: LIST
55576: LIST
55577: LIST
55578: LIST
55579: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
55580: LD_ADDR_VAR 0 49
55584: PUSH
55585: LD_INT 0
55587: PUSH
55588: LD_INT 0
55590: PUSH
55591: EMPTY
55592: LIST
55593: LIST
55594: PUSH
55595: LD_INT 0
55597: PUSH
55598: LD_INT 1
55600: NEG
55601: PUSH
55602: EMPTY
55603: LIST
55604: LIST
55605: PUSH
55606: LD_INT 1
55608: PUSH
55609: LD_INT 0
55611: PUSH
55612: EMPTY
55613: LIST
55614: LIST
55615: PUSH
55616: LD_INT 1
55618: PUSH
55619: LD_INT 1
55621: PUSH
55622: EMPTY
55623: LIST
55624: LIST
55625: PUSH
55626: LD_INT 0
55628: PUSH
55629: LD_INT 1
55631: PUSH
55632: EMPTY
55633: LIST
55634: LIST
55635: PUSH
55636: LD_INT 1
55638: NEG
55639: PUSH
55640: LD_INT 0
55642: PUSH
55643: EMPTY
55644: LIST
55645: LIST
55646: PUSH
55647: LD_INT 1
55649: NEG
55650: PUSH
55651: LD_INT 1
55653: NEG
55654: PUSH
55655: EMPTY
55656: LIST
55657: LIST
55658: PUSH
55659: LD_INT 1
55661: PUSH
55662: LD_INT 1
55664: NEG
55665: PUSH
55666: EMPTY
55667: LIST
55668: LIST
55669: PUSH
55670: LD_INT 2
55672: PUSH
55673: LD_INT 0
55675: PUSH
55676: EMPTY
55677: LIST
55678: LIST
55679: PUSH
55680: LD_INT 2
55682: PUSH
55683: LD_INT 1
55685: PUSH
55686: EMPTY
55687: LIST
55688: LIST
55689: PUSH
55690: LD_INT 2
55692: PUSH
55693: LD_INT 2
55695: PUSH
55696: EMPTY
55697: LIST
55698: LIST
55699: PUSH
55700: LD_INT 1
55702: PUSH
55703: LD_INT 2
55705: PUSH
55706: EMPTY
55707: LIST
55708: LIST
55709: PUSH
55710: EMPTY
55711: LIST
55712: LIST
55713: LIST
55714: LIST
55715: LIST
55716: LIST
55717: LIST
55718: LIST
55719: LIST
55720: LIST
55721: LIST
55722: LIST
55723: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
55724: LD_ADDR_VAR 0 50
55728: PUSH
55729: LD_INT 0
55731: PUSH
55732: LD_INT 0
55734: PUSH
55735: EMPTY
55736: LIST
55737: LIST
55738: PUSH
55739: LD_INT 0
55741: PUSH
55742: LD_INT 1
55744: NEG
55745: PUSH
55746: EMPTY
55747: LIST
55748: LIST
55749: PUSH
55750: LD_INT 1
55752: PUSH
55753: LD_INT 0
55755: PUSH
55756: EMPTY
55757: LIST
55758: LIST
55759: PUSH
55760: LD_INT 1
55762: PUSH
55763: LD_INT 1
55765: PUSH
55766: EMPTY
55767: LIST
55768: LIST
55769: PUSH
55770: LD_INT 0
55772: PUSH
55773: LD_INT 1
55775: PUSH
55776: EMPTY
55777: LIST
55778: LIST
55779: PUSH
55780: LD_INT 1
55782: NEG
55783: PUSH
55784: LD_INT 0
55786: PUSH
55787: EMPTY
55788: LIST
55789: LIST
55790: PUSH
55791: LD_INT 1
55793: NEG
55794: PUSH
55795: LD_INT 1
55797: NEG
55798: PUSH
55799: EMPTY
55800: LIST
55801: LIST
55802: PUSH
55803: LD_INT 2
55805: PUSH
55806: LD_INT 1
55808: PUSH
55809: EMPTY
55810: LIST
55811: LIST
55812: PUSH
55813: LD_INT 2
55815: PUSH
55816: LD_INT 2
55818: PUSH
55819: EMPTY
55820: LIST
55821: LIST
55822: PUSH
55823: LD_INT 1
55825: PUSH
55826: LD_INT 2
55828: PUSH
55829: EMPTY
55830: LIST
55831: LIST
55832: PUSH
55833: LD_INT 0
55835: PUSH
55836: LD_INT 2
55838: PUSH
55839: EMPTY
55840: LIST
55841: LIST
55842: PUSH
55843: LD_INT 1
55845: NEG
55846: PUSH
55847: LD_INT 1
55849: PUSH
55850: EMPTY
55851: LIST
55852: LIST
55853: PUSH
55854: EMPTY
55855: LIST
55856: LIST
55857: LIST
55858: LIST
55859: LIST
55860: LIST
55861: LIST
55862: LIST
55863: LIST
55864: LIST
55865: LIST
55866: LIST
55867: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
55868: LD_ADDR_VAR 0 51
55872: PUSH
55873: LD_INT 0
55875: PUSH
55876: LD_INT 0
55878: PUSH
55879: EMPTY
55880: LIST
55881: LIST
55882: PUSH
55883: LD_INT 0
55885: PUSH
55886: LD_INT 1
55888: NEG
55889: PUSH
55890: EMPTY
55891: LIST
55892: LIST
55893: PUSH
55894: LD_INT 1
55896: PUSH
55897: LD_INT 0
55899: PUSH
55900: EMPTY
55901: LIST
55902: LIST
55903: PUSH
55904: LD_INT 1
55906: PUSH
55907: LD_INT 1
55909: PUSH
55910: EMPTY
55911: LIST
55912: LIST
55913: PUSH
55914: LD_INT 0
55916: PUSH
55917: LD_INT 1
55919: PUSH
55920: EMPTY
55921: LIST
55922: LIST
55923: PUSH
55924: LD_INT 1
55926: NEG
55927: PUSH
55928: LD_INT 0
55930: PUSH
55931: EMPTY
55932: LIST
55933: LIST
55934: PUSH
55935: LD_INT 1
55937: NEG
55938: PUSH
55939: LD_INT 1
55941: NEG
55942: PUSH
55943: EMPTY
55944: LIST
55945: LIST
55946: PUSH
55947: LD_INT 1
55949: PUSH
55950: LD_INT 2
55952: PUSH
55953: EMPTY
55954: LIST
55955: LIST
55956: PUSH
55957: LD_INT 0
55959: PUSH
55960: LD_INT 2
55962: PUSH
55963: EMPTY
55964: LIST
55965: LIST
55966: PUSH
55967: LD_INT 1
55969: NEG
55970: PUSH
55971: LD_INT 1
55973: PUSH
55974: EMPTY
55975: LIST
55976: LIST
55977: PUSH
55978: LD_INT 2
55980: NEG
55981: PUSH
55982: LD_INT 0
55984: PUSH
55985: EMPTY
55986: LIST
55987: LIST
55988: PUSH
55989: LD_INT 2
55991: NEG
55992: PUSH
55993: LD_INT 1
55995: NEG
55996: PUSH
55997: EMPTY
55998: LIST
55999: LIST
56000: PUSH
56001: EMPTY
56002: LIST
56003: LIST
56004: LIST
56005: LIST
56006: LIST
56007: LIST
56008: LIST
56009: LIST
56010: LIST
56011: LIST
56012: LIST
56013: LIST
56014: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56015: LD_ADDR_VAR 0 52
56019: PUSH
56020: LD_INT 0
56022: PUSH
56023: LD_INT 0
56025: PUSH
56026: EMPTY
56027: LIST
56028: LIST
56029: PUSH
56030: LD_INT 0
56032: PUSH
56033: LD_INT 1
56035: NEG
56036: PUSH
56037: EMPTY
56038: LIST
56039: LIST
56040: PUSH
56041: LD_INT 1
56043: PUSH
56044: LD_INT 0
56046: PUSH
56047: EMPTY
56048: LIST
56049: LIST
56050: PUSH
56051: LD_INT 1
56053: PUSH
56054: LD_INT 1
56056: PUSH
56057: EMPTY
56058: LIST
56059: LIST
56060: PUSH
56061: LD_INT 0
56063: PUSH
56064: LD_INT 1
56066: PUSH
56067: EMPTY
56068: LIST
56069: LIST
56070: PUSH
56071: LD_INT 1
56073: NEG
56074: PUSH
56075: LD_INT 0
56077: PUSH
56078: EMPTY
56079: LIST
56080: LIST
56081: PUSH
56082: LD_INT 1
56084: NEG
56085: PUSH
56086: LD_INT 1
56088: NEG
56089: PUSH
56090: EMPTY
56091: LIST
56092: LIST
56093: PUSH
56094: LD_INT 1
56096: NEG
56097: PUSH
56098: LD_INT 2
56100: NEG
56101: PUSH
56102: EMPTY
56103: LIST
56104: LIST
56105: PUSH
56106: LD_INT 1
56108: NEG
56109: PUSH
56110: LD_INT 1
56112: PUSH
56113: EMPTY
56114: LIST
56115: LIST
56116: PUSH
56117: LD_INT 2
56119: NEG
56120: PUSH
56121: LD_INT 0
56123: PUSH
56124: EMPTY
56125: LIST
56126: LIST
56127: PUSH
56128: LD_INT 2
56130: NEG
56131: PUSH
56132: LD_INT 1
56134: NEG
56135: PUSH
56136: EMPTY
56137: LIST
56138: LIST
56139: PUSH
56140: LD_INT 2
56142: NEG
56143: PUSH
56144: LD_INT 2
56146: NEG
56147: PUSH
56148: EMPTY
56149: LIST
56150: LIST
56151: PUSH
56152: EMPTY
56153: LIST
56154: LIST
56155: LIST
56156: LIST
56157: LIST
56158: LIST
56159: LIST
56160: LIST
56161: LIST
56162: LIST
56163: LIST
56164: LIST
56165: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56166: LD_ADDR_VAR 0 53
56170: PUSH
56171: LD_INT 0
56173: PUSH
56174: LD_INT 0
56176: PUSH
56177: EMPTY
56178: LIST
56179: LIST
56180: PUSH
56181: LD_INT 0
56183: PUSH
56184: LD_INT 1
56186: NEG
56187: PUSH
56188: EMPTY
56189: LIST
56190: LIST
56191: PUSH
56192: LD_INT 1
56194: PUSH
56195: LD_INT 0
56197: PUSH
56198: EMPTY
56199: LIST
56200: LIST
56201: PUSH
56202: LD_INT 1
56204: PUSH
56205: LD_INT 1
56207: PUSH
56208: EMPTY
56209: LIST
56210: LIST
56211: PUSH
56212: LD_INT 0
56214: PUSH
56215: LD_INT 1
56217: PUSH
56218: EMPTY
56219: LIST
56220: LIST
56221: PUSH
56222: LD_INT 1
56224: NEG
56225: PUSH
56226: LD_INT 0
56228: PUSH
56229: EMPTY
56230: LIST
56231: LIST
56232: PUSH
56233: LD_INT 1
56235: NEG
56236: PUSH
56237: LD_INT 1
56239: NEG
56240: PUSH
56241: EMPTY
56242: LIST
56243: LIST
56244: PUSH
56245: LD_INT 1
56247: NEG
56248: PUSH
56249: LD_INT 2
56251: NEG
56252: PUSH
56253: EMPTY
56254: LIST
56255: LIST
56256: PUSH
56257: LD_INT 0
56259: PUSH
56260: LD_INT 2
56262: NEG
56263: PUSH
56264: EMPTY
56265: LIST
56266: LIST
56267: PUSH
56268: LD_INT 1
56270: PUSH
56271: LD_INT 1
56273: NEG
56274: PUSH
56275: EMPTY
56276: LIST
56277: LIST
56278: PUSH
56279: LD_INT 2
56281: PUSH
56282: LD_INT 0
56284: PUSH
56285: EMPTY
56286: LIST
56287: LIST
56288: PUSH
56289: LD_INT 2
56291: PUSH
56292: LD_INT 1
56294: PUSH
56295: EMPTY
56296: LIST
56297: LIST
56298: PUSH
56299: LD_INT 2
56301: PUSH
56302: LD_INT 2
56304: PUSH
56305: EMPTY
56306: LIST
56307: LIST
56308: PUSH
56309: LD_INT 1
56311: PUSH
56312: LD_INT 2
56314: PUSH
56315: EMPTY
56316: LIST
56317: LIST
56318: PUSH
56319: LD_INT 0
56321: PUSH
56322: LD_INT 2
56324: PUSH
56325: EMPTY
56326: LIST
56327: LIST
56328: PUSH
56329: LD_INT 1
56331: NEG
56332: PUSH
56333: LD_INT 1
56335: PUSH
56336: EMPTY
56337: LIST
56338: LIST
56339: PUSH
56340: LD_INT 2
56342: NEG
56343: PUSH
56344: LD_INT 0
56346: PUSH
56347: EMPTY
56348: LIST
56349: LIST
56350: PUSH
56351: LD_INT 2
56353: NEG
56354: PUSH
56355: LD_INT 1
56357: NEG
56358: PUSH
56359: EMPTY
56360: LIST
56361: LIST
56362: PUSH
56363: LD_INT 2
56365: NEG
56366: PUSH
56367: LD_INT 2
56369: NEG
56370: PUSH
56371: EMPTY
56372: LIST
56373: LIST
56374: PUSH
56375: EMPTY
56376: LIST
56377: LIST
56378: LIST
56379: LIST
56380: LIST
56381: LIST
56382: LIST
56383: LIST
56384: LIST
56385: LIST
56386: LIST
56387: LIST
56388: LIST
56389: LIST
56390: LIST
56391: LIST
56392: LIST
56393: LIST
56394: LIST
56395: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56396: LD_ADDR_VAR 0 54
56400: PUSH
56401: LD_INT 0
56403: PUSH
56404: LD_INT 0
56406: PUSH
56407: EMPTY
56408: LIST
56409: LIST
56410: PUSH
56411: LD_INT 0
56413: PUSH
56414: LD_INT 1
56416: NEG
56417: PUSH
56418: EMPTY
56419: LIST
56420: LIST
56421: PUSH
56422: LD_INT 1
56424: PUSH
56425: LD_INT 0
56427: PUSH
56428: EMPTY
56429: LIST
56430: LIST
56431: PUSH
56432: LD_INT 1
56434: PUSH
56435: LD_INT 1
56437: PUSH
56438: EMPTY
56439: LIST
56440: LIST
56441: PUSH
56442: LD_INT 0
56444: PUSH
56445: LD_INT 1
56447: PUSH
56448: EMPTY
56449: LIST
56450: LIST
56451: PUSH
56452: LD_INT 1
56454: NEG
56455: PUSH
56456: LD_INT 0
56458: PUSH
56459: EMPTY
56460: LIST
56461: LIST
56462: PUSH
56463: LD_INT 1
56465: NEG
56466: PUSH
56467: LD_INT 1
56469: NEG
56470: PUSH
56471: EMPTY
56472: LIST
56473: LIST
56474: PUSH
56475: LD_INT 1
56477: NEG
56478: PUSH
56479: LD_INT 2
56481: NEG
56482: PUSH
56483: EMPTY
56484: LIST
56485: LIST
56486: PUSH
56487: LD_INT 0
56489: PUSH
56490: LD_INT 2
56492: NEG
56493: PUSH
56494: EMPTY
56495: LIST
56496: LIST
56497: PUSH
56498: LD_INT 1
56500: PUSH
56501: LD_INT 1
56503: NEG
56504: PUSH
56505: EMPTY
56506: LIST
56507: LIST
56508: PUSH
56509: LD_INT 2
56511: PUSH
56512: LD_INT 0
56514: PUSH
56515: EMPTY
56516: LIST
56517: LIST
56518: PUSH
56519: LD_INT 2
56521: PUSH
56522: LD_INT 1
56524: PUSH
56525: EMPTY
56526: LIST
56527: LIST
56528: PUSH
56529: LD_INT 2
56531: PUSH
56532: LD_INT 2
56534: PUSH
56535: EMPTY
56536: LIST
56537: LIST
56538: PUSH
56539: LD_INT 1
56541: PUSH
56542: LD_INT 2
56544: PUSH
56545: EMPTY
56546: LIST
56547: LIST
56548: PUSH
56549: LD_INT 0
56551: PUSH
56552: LD_INT 2
56554: PUSH
56555: EMPTY
56556: LIST
56557: LIST
56558: PUSH
56559: LD_INT 1
56561: NEG
56562: PUSH
56563: LD_INT 1
56565: PUSH
56566: EMPTY
56567: LIST
56568: LIST
56569: PUSH
56570: LD_INT 2
56572: NEG
56573: PUSH
56574: LD_INT 0
56576: PUSH
56577: EMPTY
56578: LIST
56579: LIST
56580: PUSH
56581: LD_INT 2
56583: NEG
56584: PUSH
56585: LD_INT 1
56587: NEG
56588: PUSH
56589: EMPTY
56590: LIST
56591: LIST
56592: PUSH
56593: LD_INT 2
56595: NEG
56596: PUSH
56597: LD_INT 2
56599: NEG
56600: PUSH
56601: EMPTY
56602: LIST
56603: LIST
56604: PUSH
56605: EMPTY
56606: LIST
56607: LIST
56608: LIST
56609: LIST
56610: LIST
56611: LIST
56612: LIST
56613: LIST
56614: LIST
56615: LIST
56616: LIST
56617: LIST
56618: LIST
56619: LIST
56620: LIST
56621: LIST
56622: LIST
56623: LIST
56624: LIST
56625: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56626: LD_ADDR_VAR 0 55
56630: PUSH
56631: LD_INT 0
56633: PUSH
56634: LD_INT 0
56636: PUSH
56637: EMPTY
56638: LIST
56639: LIST
56640: PUSH
56641: LD_INT 0
56643: PUSH
56644: LD_INT 1
56646: NEG
56647: PUSH
56648: EMPTY
56649: LIST
56650: LIST
56651: PUSH
56652: LD_INT 1
56654: PUSH
56655: LD_INT 0
56657: PUSH
56658: EMPTY
56659: LIST
56660: LIST
56661: PUSH
56662: LD_INT 1
56664: PUSH
56665: LD_INT 1
56667: PUSH
56668: EMPTY
56669: LIST
56670: LIST
56671: PUSH
56672: LD_INT 0
56674: PUSH
56675: LD_INT 1
56677: PUSH
56678: EMPTY
56679: LIST
56680: LIST
56681: PUSH
56682: LD_INT 1
56684: NEG
56685: PUSH
56686: LD_INT 0
56688: PUSH
56689: EMPTY
56690: LIST
56691: LIST
56692: PUSH
56693: LD_INT 1
56695: NEG
56696: PUSH
56697: LD_INT 1
56699: NEG
56700: PUSH
56701: EMPTY
56702: LIST
56703: LIST
56704: PUSH
56705: LD_INT 1
56707: NEG
56708: PUSH
56709: LD_INT 2
56711: NEG
56712: PUSH
56713: EMPTY
56714: LIST
56715: LIST
56716: PUSH
56717: LD_INT 0
56719: PUSH
56720: LD_INT 2
56722: NEG
56723: PUSH
56724: EMPTY
56725: LIST
56726: LIST
56727: PUSH
56728: LD_INT 1
56730: PUSH
56731: LD_INT 1
56733: NEG
56734: PUSH
56735: EMPTY
56736: LIST
56737: LIST
56738: PUSH
56739: LD_INT 2
56741: PUSH
56742: LD_INT 0
56744: PUSH
56745: EMPTY
56746: LIST
56747: LIST
56748: PUSH
56749: LD_INT 2
56751: PUSH
56752: LD_INT 1
56754: PUSH
56755: EMPTY
56756: LIST
56757: LIST
56758: PUSH
56759: LD_INT 2
56761: PUSH
56762: LD_INT 2
56764: PUSH
56765: EMPTY
56766: LIST
56767: LIST
56768: PUSH
56769: LD_INT 1
56771: PUSH
56772: LD_INT 2
56774: PUSH
56775: EMPTY
56776: LIST
56777: LIST
56778: PUSH
56779: LD_INT 0
56781: PUSH
56782: LD_INT 2
56784: PUSH
56785: EMPTY
56786: LIST
56787: LIST
56788: PUSH
56789: LD_INT 1
56791: NEG
56792: PUSH
56793: LD_INT 1
56795: PUSH
56796: EMPTY
56797: LIST
56798: LIST
56799: PUSH
56800: LD_INT 2
56802: NEG
56803: PUSH
56804: LD_INT 0
56806: PUSH
56807: EMPTY
56808: LIST
56809: LIST
56810: PUSH
56811: LD_INT 2
56813: NEG
56814: PUSH
56815: LD_INT 1
56817: NEG
56818: PUSH
56819: EMPTY
56820: LIST
56821: LIST
56822: PUSH
56823: LD_INT 2
56825: NEG
56826: PUSH
56827: LD_INT 2
56829: NEG
56830: PUSH
56831: EMPTY
56832: LIST
56833: LIST
56834: PUSH
56835: EMPTY
56836: LIST
56837: LIST
56838: LIST
56839: LIST
56840: LIST
56841: LIST
56842: LIST
56843: LIST
56844: LIST
56845: LIST
56846: LIST
56847: LIST
56848: LIST
56849: LIST
56850: LIST
56851: LIST
56852: LIST
56853: LIST
56854: LIST
56855: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56856: LD_ADDR_VAR 0 56
56860: PUSH
56861: LD_INT 0
56863: PUSH
56864: LD_INT 0
56866: PUSH
56867: EMPTY
56868: LIST
56869: LIST
56870: PUSH
56871: LD_INT 0
56873: PUSH
56874: LD_INT 1
56876: NEG
56877: PUSH
56878: EMPTY
56879: LIST
56880: LIST
56881: PUSH
56882: LD_INT 1
56884: PUSH
56885: LD_INT 0
56887: PUSH
56888: EMPTY
56889: LIST
56890: LIST
56891: PUSH
56892: LD_INT 1
56894: PUSH
56895: LD_INT 1
56897: PUSH
56898: EMPTY
56899: LIST
56900: LIST
56901: PUSH
56902: LD_INT 0
56904: PUSH
56905: LD_INT 1
56907: PUSH
56908: EMPTY
56909: LIST
56910: LIST
56911: PUSH
56912: LD_INT 1
56914: NEG
56915: PUSH
56916: LD_INT 0
56918: PUSH
56919: EMPTY
56920: LIST
56921: LIST
56922: PUSH
56923: LD_INT 1
56925: NEG
56926: PUSH
56927: LD_INT 1
56929: NEG
56930: PUSH
56931: EMPTY
56932: LIST
56933: LIST
56934: PUSH
56935: LD_INT 1
56937: NEG
56938: PUSH
56939: LD_INT 2
56941: NEG
56942: PUSH
56943: EMPTY
56944: LIST
56945: LIST
56946: PUSH
56947: LD_INT 0
56949: PUSH
56950: LD_INT 2
56952: NEG
56953: PUSH
56954: EMPTY
56955: LIST
56956: LIST
56957: PUSH
56958: LD_INT 1
56960: PUSH
56961: LD_INT 1
56963: NEG
56964: PUSH
56965: EMPTY
56966: LIST
56967: LIST
56968: PUSH
56969: LD_INT 2
56971: PUSH
56972: LD_INT 0
56974: PUSH
56975: EMPTY
56976: LIST
56977: LIST
56978: PUSH
56979: LD_INT 2
56981: PUSH
56982: LD_INT 1
56984: PUSH
56985: EMPTY
56986: LIST
56987: LIST
56988: PUSH
56989: LD_INT 2
56991: PUSH
56992: LD_INT 2
56994: PUSH
56995: EMPTY
56996: LIST
56997: LIST
56998: PUSH
56999: LD_INT 1
57001: PUSH
57002: LD_INT 2
57004: PUSH
57005: EMPTY
57006: LIST
57007: LIST
57008: PUSH
57009: LD_INT 0
57011: PUSH
57012: LD_INT 2
57014: PUSH
57015: EMPTY
57016: LIST
57017: LIST
57018: PUSH
57019: LD_INT 1
57021: NEG
57022: PUSH
57023: LD_INT 1
57025: PUSH
57026: EMPTY
57027: LIST
57028: LIST
57029: PUSH
57030: LD_INT 2
57032: NEG
57033: PUSH
57034: LD_INT 0
57036: PUSH
57037: EMPTY
57038: LIST
57039: LIST
57040: PUSH
57041: LD_INT 2
57043: NEG
57044: PUSH
57045: LD_INT 1
57047: NEG
57048: PUSH
57049: EMPTY
57050: LIST
57051: LIST
57052: PUSH
57053: LD_INT 2
57055: NEG
57056: PUSH
57057: LD_INT 2
57059: NEG
57060: PUSH
57061: EMPTY
57062: LIST
57063: LIST
57064: PUSH
57065: EMPTY
57066: LIST
57067: LIST
57068: LIST
57069: LIST
57070: LIST
57071: LIST
57072: LIST
57073: LIST
57074: LIST
57075: LIST
57076: LIST
57077: LIST
57078: LIST
57079: LIST
57080: LIST
57081: LIST
57082: LIST
57083: LIST
57084: LIST
57085: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57086: LD_ADDR_VAR 0 57
57090: PUSH
57091: LD_INT 0
57093: PUSH
57094: LD_INT 0
57096: PUSH
57097: EMPTY
57098: LIST
57099: LIST
57100: PUSH
57101: LD_INT 0
57103: PUSH
57104: LD_INT 1
57106: NEG
57107: PUSH
57108: EMPTY
57109: LIST
57110: LIST
57111: PUSH
57112: LD_INT 1
57114: PUSH
57115: LD_INT 0
57117: PUSH
57118: EMPTY
57119: LIST
57120: LIST
57121: PUSH
57122: LD_INT 1
57124: PUSH
57125: LD_INT 1
57127: PUSH
57128: EMPTY
57129: LIST
57130: LIST
57131: PUSH
57132: LD_INT 0
57134: PUSH
57135: LD_INT 1
57137: PUSH
57138: EMPTY
57139: LIST
57140: LIST
57141: PUSH
57142: LD_INT 1
57144: NEG
57145: PUSH
57146: LD_INT 0
57148: PUSH
57149: EMPTY
57150: LIST
57151: LIST
57152: PUSH
57153: LD_INT 1
57155: NEG
57156: PUSH
57157: LD_INT 1
57159: NEG
57160: PUSH
57161: EMPTY
57162: LIST
57163: LIST
57164: PUSH
57165: LD_INT 1
57167: NEG
57168: PUSH
57169: LD_INT 2
57171: NEG
57172: PUSH
57173: EMPTY
57174: LIST
57175: LIST
57176: PUSH
57177: LD_INT 0
57179: PUSH
57180: LD_INT 2
57182: NEG
57183: PUSH
57184: EMPTY
57185: LIST
57186: LIST
57187: PUSH
57188: LD_INT 1
57190: PUSH
57191: LD_INT 1
57193: NEG
57194: PUSH
57195: EMPTY
57196: LIST
57197: LIST
57198: PUSH
57199: LD_INT 2
57201: PUSH
57202: LD_INT 0
57204: PUSH
57205: EMPTY
57206: LIST
57207: LIST
57208: PUSH
57209: LD_INT 2
57211: PUSH
57212: LD_INT 1
57214: PUSH
57215: EMPTY
57216: LIST
57217: LIST
57218: PUSH
57219: LD_INT 2
57221: PUSH
57222: LD_INT 2
57224: PUSH
57225: EMPTY
57226: LIST
57227: LIST
57228: PUSH
57229: LD_INT 1
57231: PUSH
57232: LD_INT 2
57234: PUSH
57235: EMPTY
57236: LIST
57237: LIST
57238: PUSH
57239: LD_INT 0
57241: PUSH
57242: LD_INT 2
57244: PUSH
57245: EMPTY
57246: LIST
57247: LIST
57248: PUSH
57249: LD_INT 1
57251: NEG
57252: PUSH
57253: LD_INT 1
57255: PUSH
57256: EMPTY
57257: LIST
57258: LIST
57259: PUSH
57260: LD_INT 2
57262: NEG
57263: PUSH
57264: LD_INT 0
57266: PUSH
57267: EMPTY
57268: LIST
57269: LIST
57270: PUSH
57271: LD_INT 2
57273: NEG
57274: PUSH
57275: LD_INT 1
57277: NEG
57278: PUSH
57279: EMPTY
57280: LIST
57281: LIST
57282: PUSH
57283: LD_INT 2
57285: NEG
57286: PUSH
57287: LD_INT 2
57289: NEG
57290: PUSH
57291: EMPTY
57292: LIST
57293: LIST
57294: PUSH
57295: EMPTY
57296: LIST
57297: LIST
57298: LIST
57299: LIST
57300: LIST
57301: LIST
57302: LIST
57303: LIST
57304: LIST
57305: LIST
57306: LIST
57307: LIST
57308: LIST
57309: LIST
57310: LIST
57311: LIST
57312: LIST
57313: LIST
57314: LIST
57315: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57316: LD_ADDR_VAR 0 58
57320: PUSH
57321: LD_INT 0
57323: PUSH
57324: LD_INT 0
57326: PUSH
57327: EMPTY
57328: LIST
57329: LIST
57330: PUSH
57331: LD_INT 0
57333: PUSH
57334: LD_INT 1
57336: NEG
57337: PUSH
57338: EMPTY
57339: LIST
57340: LIST
57341: PUSH
57342: LD_INT 1
57344: PUSH
57345: LD_INT 0
57347: PUSH
57348: EMPTY
57349: LIST
57350: LIST
57351: PUSH
57352: LD_INT 1
57354: PUSH
57355: LD_INT 1
57357: PUSH
57358: EMPTY
57359: LIST
57360: LIST
57361: PUSH
57362: LD_INT 0
57364: PUSH
57365: LD_INT 1
57367: PUSH
57368: EMPTY
57369: LIST
57370: LIST
57371: PUSH
57372: LD_INT 1
57374: NEG
57375: PUSH
57376: LD_INT 0
57378: PUSH
57379: EMPTY
57380: LIST
57381: LIST
57382: PUSH
57383: LD_INT 1
57385: NEG
57386: PUSH
57387: LD_INT 1
57389: NEG
57390: PUSH
57391: EMPTY
57392: LIST
57393: LIST
57394: PUSH
57395: LD_INT 1
57397: NEG
57398: PUSH
57399: LD_INT 2
57401: NEG
57402: PUSH
57403: EMPTY
57404: LIST
57405: LIST
57406: PUSH
57407: LD_INT 0
57409: PUSH
57410: LD_INT 2
57412: NEG
57413: PUSH
57414: EMPTY
57415: LIST
57416: LIST
57417: PUSH
57418: LD_INT 1
57420: PUSH
57421: LD_INT 1
57423: NEG
57424: PUSH
57425: EMPTY
57426: LIST
57427: LIST
57428: PUSH
57429: LD_INT 2
57431: PUSH
57432: LD_INT 0
57434: PUSH
57435: EMPTY
57436: LIST
57437: LIST
57438: PUSH
57439: LD_INT 2
57441: PUSH
57442: LD_INT 1
57444: PUSH
57445: EMPTY
57446: LIST
57447: LIST
57448: PUSH
57449: LD_INT 2
57451: PUSH
57452: LD_INT 2
57454: PUSH
57455: EMPTY
57456: LIST
57457: LIST
57458: PUSH
57459: LD_INT 1
57461: PUSH
57462: LD_INT 2
57464: PUSH
57465: EMPTY
57466: LIST
57467: LIST
57468: PUSH
57469: LD_INT 0
57471: PUSH
57472: LD_INT 2
57474: PUSH
57475: EMPTY
57476: LIST
57477: LIST
57478: PUSH
57479: LD_INT 1
57481: NEG
57482: PUSH
57483: LD_INT 1
57485: PUSH
57486: EMPTY
57487: LIST
57488: LIST
57489: PUSH
57490: LD_INT 2
57492: NEG
57493: PUSH
57494: LD_INT 0
57496: PUSH
57497: EMPTY
57498: LIST
57499: LIST
57500: PUSH
57501: LD_INT 2
57503: NEG
57504: PUSH
57505: LD_INT 1
57507: NEG
57508: PUSH
57509: EMPTY
57510: LIST
57511: LIST
57512: PUSH
57513: LD_INT 2
57515: NEG
57516: PUSH
57517: LD_INT 2
57519: NEG
57520: PUSH
57521: EMPTY
57522: LIST
57523: LIST
57524: PUSH
57525: EMPTY
57526: LIST
57527: LIST
57528: LIST
57529: LIST
57530: LIST
57531: LIST
57532: LIST
57533: LIST
57534: LIST
57535: LIST
57536: LIST
57537: LIST
57538: LIST
57539: LIST
57540: LIST
57541: LIST
57542: LIST
57543: LIST
57544: LIST
57545: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57546: LD_ADDR_VAR 0 59
57550: PUSH
57551: LD_INT 0
57553: PUSH
57554: LD_INT 0
57556: PUSH
57557: EMPTY
57558: LIST
57559: LIST
57560: PUSH
57561: LD_INT 0
57563: PUSH
57564: LD_INT 1
57566: NEG
57567: PUSH
57568: EMPTY
57569: LIST
57570: LIST
57571: PUSH
57572: LD_INT 1
57574: PUSH
57575: LD_INT 0
57577: PUSH
57578: EMPTY
57579: LIST
57580: LIST
57581: PUSH
57582: LD_INT 1
57584: PUSH
57585: LD_INT 1
57587: PUSH
57588: EMPTY
57589: LIST
57590: LIST
57591: PUSH
57592: LD_INT 0
57594: PUSH
57595: LD_INT 1
57597: PUSH
57598: EMPTY
57599: LIST
57600: LIST
57601: PUSH
57602: LD_INT 1
57604: NEG
57605: PUSH
57606: LD_INT 0
57608: PUSH
57609: EMPTY
57610: LIST
57611: LIST
57612: PUSH
57613: LD_INT 1
57615: NEG
57616: PUSH
57617: LD_INT 1
57619: NEG
57620: PUSH
57621: EMPTY
57622: LIST
57623: LIST
57624: PUSH
57625: EMPTY
57626: LIST
57627: LIST
57628: LIST
57629: LIST
57630: LIST
57631: LIST
57632: LIST
57633: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57634: LD_ADDR_VAR 0 60
57638: PUSH
57639: LD_INT 0
57641: PUSH
57642: LD_INT 0
57644: PUSH
57645: EMPTY
57646: LIST
57647: LIST
57648: PUSH
57649: LD_INT 0
57651: PUSH
57652: LD_INT 1
57654: NEG
57655: PUSH
57656: EMPTY
57657: LIST
57658: LIST
57659: PUSH
57660: LD_INT 1
57662: PUSH
57663: LD_INT 0
57665: PUSH
57666: EMPTY
57667: LIST
57668: LIST
57669: PUSH
57670: LD_INT 1
57672: PUSH
57673: LD_INT 1
57675: PUSH
57676: EMPTY
57677: LIST
57678: LIST
57679: PUSH
57680: LD_INT 0
57682: PUSH
57683: LD_INT 1
57685: PUSH
57686: EMPTY
57687: LIST
57688: LIST
57689: PUSH
57690: LD_INT 1
57692: NEG
57693: PUSH
57694: LD_INT 0
57696: PUSH
57697: EMPTY
57698: LIST
57699: LIST
57700: PUSH
57701: LD_INT 1
57703: NEG
57704: PUSH
57705: LD_INT 1
57707: NEG
57708: PUSH
57709: EMPTY
57710: LIST
57711: LIST
57712: PUSH
57713: EMPTY
57714: LIST
57715: LIST
57716: LIST
57717: LIST
57718: LIST
57719: LIST
57720: LIST
57721: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57722: LD_ADDR_VAR 0 61
57726: PUSH
57727: LD_INT 0
57729: PUSH
57730: LD_INT 0
57732: PUSH
57733: EMPTY
57734: LIST
57735: LIST
57736: PUSH
57737: LD_INT 0
57739: PUSH
57740: LD_INT 1
57742: NEG
57743: PUSH
57744: EMPTY
57745: LIST
57746: LIST
57747: PUSH
57748: LD_INT 1
57750: PUSH
57751: LD_INT 0
57753: PUSH
57754: EMPTY
57755: LIST
57756: LIST
57757: PUSH
57758: LD_INT 1
57760: PUSH
57761: LD_INT 1
57763: PUSH
57764: EMPTY
57765: LIST
57766: LIST
57767: PUSH
57768: LD_INT 0
57770: PUSH
57771: LD_INT 1
57773: PUSH
57774: EMPTY
57775: LIST
57776: LIST
57777: PUSH
57778: LD_INT 1
57780: NEG
57781: PUSH
57782: LD_INT 0
57784: PUSH
57785: EMPTY
57786: LIST
57787: LIST
57788: PUSH
57789: LD_INT 1
57791: NEG
57792: PUSH
57793: LD_INT 1
57795: NEG
57796: PUSH
57797: EMPTY
57798: LIST
57799: LIST
57800: PUSH
57801: EMPTY
57802: LIST
57803: LIST
57804: LIST
57805: LIST
57806: LIST
57807: LIST
57808: LIST
57809: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57810: LD_ADDR_VAR 0 62
57814: PUSH
57815: LD_INT 0
57817: PUSH
57818: LD_INT 0
57820: PUSH
57821: EMPTY
57822: LIST
57823: LIST
57824: PUSH
57825: LD_INT 0
57827: PUSH
57828: LD_INT 1
57830: NEG
57831: PUSH
57832: EMPTY
57833: LIST
57834: LIST
57835: PUSH
57836: LD_INT 1
57838: PUSH
57839: LD_INT 0
57841: PUSH
57842: EMPTY
57843: LIST
57844: LIST
57845: PUSH
57846: LD_INT 1
57848: PUSH
57849: LD_INT 1
57851: PUSH
57852: EMPTY
57853: LIST
57854: LIST
57855: PUSH
57856: LD_INT 0
57858: PUSH
57859: LD_INT 1
57861: PUSH
57862: EMPTY
57863: LIST
57864: LIST
57865: PUSH
57866: LD_INT 1
57868: NEG
57869: PUSH
57870: LD_INT 0
57872: PUSH
57873: EMPTY
57874: LIST
57875: LIST
57876: PUSH
57877: LD_INT 1
57879: NEG
57880: PUSH
57881: LD_INT 1
57883: NEG
57884: PUSH
57885: EMPTY
57886: LIST
57887: LIST
57888: PUSH
57889: EMPTY
57890: LIST
57891: LIST
57892: LIST
57893: LIST
57894: LIST
57895: LIST
57896: LIST
57897: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57898: LD_ADDR_VAR 0 63
57902: PUSH
57903: LD_INT 0
57905: PUSH
57906: LD_INT 0
57908: PUSH
57909: EMPTY
57910: LIST
57911: LIST
57912: PUSH
57913: LD_INT 0
57915: PUSH
57916: LD_INT 1
57918: NEG
57919: PUSH
57920: EMPTY
57921: LIST
57922: LIST
57923: PUSH
57924: LD_INT 1
57926: PUSH
57927: LD_INT 0
57929: PUSH
57930: EMPTY
57931: LIST
57932: LIST
57933: PUSH
57934: LD_INT 1
57936: PUSH
57937: LD_INT 1
57939: PUSH
57940: EMPTY
57941: LIST
57942: LIST
57943: PUSH
57944: LD_INT 0
57946: PUSH
57947: LD_INT 1
57949: PUSH
57950: EMPTY
57951: LIST
57952: LIST
57953: PUSH
57954: LD_INT 1
57956: NEG
57957: PUSH
57958: LD_INT 0
57960: PUSH
57961: EMPTY
57962: LIST
57963: LIST
57964: PUSH
57965: LD_INT 1
57967: NEG
57968: PUSH
57969: LD_INT 1
57971: NEG
57972: PUSH
57973: EMPTY
57974: LIST
57975: LIST
57976: PUSH
57977: EMPTY
57978: LIST
57979: LIST
57980: LIST
57981: LIST
57982: LIST
57983: LIST
57984: LIST
57985: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57986: LD_ADDR_VAR 0 64
57990: PUSH
57991: LD_INT 0
57993: PUSH
57994: LD_INT 0
57996: PUSH
57997: EMPTY
57998: LIST
57999: LIST
58000: PUSH
58001: LD_INT 0
58003: PUSH
58004: LD_INT 1
58006: NEG
58007: PUSH
58008: EMPTY
58009: LIST
58010: LIST
58011: PUSH
58012: LD_INT 1
58014: PUSH
58015: LD_INT 0
58017: PUSH
58018: EMPTY
58019: LIST
58020: LIST
58021: PUSH
58022: LD_INT 1
58024: PUSH
58025: LD_INT 1
58027: PUSH
58028: EMPTY
58029: LIST
58030: LIST
58031: PUSH
58032: LD_INT 0
58034: PUSH
58035: LD_INT 1
58037: PUSH
58038: EMPTY
58039: LIST
58040: LIST
58041: PUSH
58042: LD_INT 1
58044: NEG
58045: PUSH
58046: LD_INT 0
58048: PUSH
58049: EMPTY
58050: LIST
58051: LIST
58052: PUSH
58053: LD_INT 1
58055: NEG
58056: PUSH
58057: LD_INT 1
58059: NEG
58060: PUSH
58061: EMPTY
58062: LIST
58063: LIST
58064: PUSH
58065: EMPTY
58066: LIST
58067: LIST
58068: LIST
58069: LIST
58070: LIST
58071: LIST
58072: LIST
58073: ST_TO_ADDR
// end ; 1 :
58074: GO 63971
58076: LD_INT 1
58078: DOUBLE
58079: EQUAL
58080: IFTRUE 58084
58082: GO 60707
58084: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58085: LD_ADDR_VAR 0 11
58089: PUSH
58090: LD_INT 1
58092: NEG
58093: PUSH
58094: LD_INT 3
58096: NEG
58097: PUSH
58098: EMPTY
58099: LIST
58100: LIST
58101: PUSH
58102: LD_INT 0
58104: PUSH
58105: LD_INT 3
58107: NEG
58108: PUSH
58109: EMPTY
58110: LIST
58111: LIST
58112: PUSH
58113: LD_INT 1
58115: PUSH
58116: LD_INT 2
58118: NEG
58119: PUSH
58120: EMPTY
58121: LIST
58122: LIST
58123: PUSH
58124: EMPTY
58125: LIST
58126: LIST
58127: LIST
58128: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58129: LD_ADDR_VAR 0 12
58133: PUSH
58134: LD_INT 2
58136: PUSH
58137: LD_INT 1
58139: NEG
58140: PUSH
58141: EMPTY
58142: LIST
58143: LIST
58144: PUSH
58145: LD_INT 3
58147: PUSH
58148: LD_INT 0
58150: PUSH
58151: EMPTY
58152: LIST
58153: LIST
58154: PUSH
58155: LD_INT 3
58157: PUSH
58158: LD_INT 1
58160: PUSH
58161: EMPTY
58162: LIST
58163: LIST
58164: PUSH
58165: EMPTY
58166: LIST
58167: LIST
58168: LIST
58169: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58170: LD_ADDR_VAR 0 13
58174: PUSH
58175: LD_INT 3
58177: PUSH
58178: LD_INT 2
58180: PUSH
58181: EMPTY
58182: LIST
58183: LIST
58184: PUSH
58185: LD_INT 3
58187: PUSH
58188: LD_INT 3
58190: PUSH
58191: EMPTY
58192: LIST
58193: LIST
58194: PUSH
58195: LD_INT 2
58197: PUSH
58198: LD_INT 3
58200: PUSH
58201: EMPTY
58202: LIST
58203: LIST
58204: PUSH
58205: EMPTY
58206: LIST
58207: LIST
58208: LIST
58209: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58210: LD_ADDR_VAR 0 14
58214: PUSH
58215: LD_INT 1
58217: PUSH
58218: LD_INT 3
58220: PUSH
58221: EMPTY
58222: LIST
58223: LIST
58224: PUSH
58225: LD_INT 0
58227: PUSH
58228: LD_INT 3
58230: PUSH
58231: EMPTY
58232: LIST
58233: LIST
58234: PUSH
58235: LD_INT 1
58237: NEG
58238: PUSH
58239: LD_INT 2
58241: PUSH
58242: EMPTY
58243: LIST
58244: LIST
58245: PUSH
58246: EMPTY
58247: LIST
58248: LIST
58249: LIST
58250: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58251: LD_ADDR_VAR 0 15
58255: PUSH
58256: LD_INT 2
58258: NEG
58259: PUSH
58260: LD_INT 1
58262: PUSH
58263: EMPTY
58264: LIST
58265: LIST
58266: PUSH
58267: LD_INT 3
58269: NEG
58270: PUSH
58271: LD_INT 0
58273: PUSH
58274: EMPTY
58275: LIST
58276: LIST
58277: PUSH
58278: LD_INT 3
58280: NEG
58281: PUSH
58282: LD_INT 1
58284: NEG
58285: PUSH
58286: EMPTY
58287: LIST
58288: LIST
58289: PUSH
58290: EMPTY
58291: LIST
58292: LIST
58293: LIST
58294: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58295: LD_ADDR_VAR 0 16
58299: PUSH
58300: LD_INT 2
58302: NEG
58303: PUSH
58304: LD_INT 3
58306: NEG
58307: PUSH
58308: EMPTY
58309: LIST
58310: LIST
58311: PUSH
58312: LD_INT 3
58314: NEG
58315: PUSH
58316: LD_INT 2
58318: NEG
58319: PUSH
58320: EMPTY
58321: LIST
58322: LIST
58323: PUSH
58324: LD_INT 3
58326: NEG
58327: PUSH
58328: LD_INT 3
58330: NEG
58331: PUSH
58332: EMPTY
58333: LIST
58334: LIST
58335: PUSH
58336: EMPTY
58337: LIST
58338: LIST
58339: LIST
58340: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58341: LD_ADDR_VAR 0 17
58345: PUSH
58346: LD_INT 1
58348: NEG
58349: PUSH
58350: LD_INT 3
58352: NEG
58353: PUSH
58354: EMPTY
58355: LIST
58356: LIST
58357: PUSH
58358: LD_INT 0
58360: PUSH
58361: LD_INT 3
58363: NEG
58364: PUSH
58365: EMPTY
58366: LIST
58367: LIST
58368: PUSH
58369: LD_INT 1
58371: PUSH
58372: LD_INT 2
58374: NEG
58375: PUSH
58376: EMPTY
58377: LIST
58378: LIST
58379: PUSH
58380: EMPTY
58381: LIST
58382: LIST
58383: LIST
58384: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58385: LD_ADDR_VAR 0 18
58389: PUSH
58390: LD_INT 2
58392: PUSH
58393: LD_INT 1
58395: NEG
58396: PUSH
58397: EMPTY
58398: LIST
58399: LIST
58400: PUSH
58401: LD_INT 3
58403: PUSH
58404: LD_INT 0
58406: PUSH
58407: EMPTY
58408: LIST
58409: LIST
58410: PUSH
58411: LD_INT 3
58413: PUSH
58414: LD_INT 1
58416: PUSH
58417: EMPTY
58418: LIST
58419: LIST
58420: PUSH
58421: EMPTY
58422: LIST
58423: LIST
58424: LIST
58425: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58426: LD_ADDR_VAR 0 19
58430: PUSH
58431: LD_INT 3
58433: PUSH
58434: LD_INT 2
58436: PUSH
58437: EMPTY
58438: LIST
58439: LIST
58440: PUSH
58441: LD_INT 3
58443: PUSH
58444: LD_INT 3
58446: PUSH
58447: EMPTY
58448: LIST
58449: LIST
58450: PUSH
58451: LD_INT 2
58453: PUSH
58454: LD_INT 3
58456: PUSH
58457: EMPTY
58458: LIST
58459: LIST
58460: PUSH
58461: EMPTY
58462: LIST
58463: LIST
58464: LIST
58465: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58466: LD_ADDR_VAR 0 20
58470: PUSH
58471: LD_INT 1
58473: PUSH
58474: LD_INT 3
58476: PUSH
58477: EMPTY
58478: LIST
58479: LIST
58480: PUSH
58481: LD_INT 0
58483: PUSH
58484: LD_INT 3
58486: PUSH
58487: EMPTY
58488: LIST
58489: LIST
58490: PUSH
58491: LD_INT 1
58493: NEG
58494: PUSH
58495: LD_INT 2
58497: PUSH
58498: EMPTY
58499: LIST
58500: LIST
58501: PUSH
58502: EMPTY
58503: LIST
58504: LIST
58505: LIST
58506: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58507: LD_ADDR_VAR 0 21
58511: PUSH
58512: LD_INT 2
58514: NEG
58515: PUSH
58516: LD_INT 1
58518: PUSH
58519: EMPTY
58520: LIST
58521: LIST
58522: PUSH
58523: LD_INT 3
58525: NEG
58526: PUSH
58527: LD_INT 0
58529: PUSH
58530: EMPTY
58531: LIST
58532: LIST
58533: PUSH
58534: LD_INT 3
58536: NEG
58537: PUSH
58538: LD_INT 1
58540: NEG
58541: PUSH
58542: EMPTY
58543: LIST
58544: LIST
58545: PUSH
58546: EMPTY
58547: LIST
58548: LIST
58549: LIST
58550: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58551: LD_ADDR_VAR 0 22
58555: PUSH
58556: LD_INT 2
58558: NEG
58559: PUSH
58560: LD_INT 3
58562: NEG
58563: PUSH
58564: EMPTY
58565: LIST
58566: LIST
58567: PUSH
58568: LD_INT 3
58570: NEG
58571: PUSH
58572: LD_INT 2
58574: NEG
58575: PUSH
58576: EMPTY
58577: LIST
58578: LIST
58579: PUSH
58580: LD_INT 3
58582: NEG
58583: PUSH
58584: LD_INT 3
58586: NEG
58587: PUSH
58588: EMPTY
58589: LIST
58590: LIST
58591: PUSH
58592: EMPTY
58593: LIST
58594: LIST
58595: LIST
58596: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
58597: LD_ADDR_VAR 0 23
58601: PUSH
58602: LD_INT 0
58604: PUSH
58605: LD_INT 3
58607: NEG
58608: PUSH
58609: EMPTY
58610: LIST
58611: LIST
58612: PUSH
58613: LD_INT 1
58615: NEG
58616: PUSH
58617: LD_INT 4
58619: NEG
58620: PUSH
58621: EMPTY
58622: LIST
58623: LIST
58624: PUSH
58625: LD_INT 1
58627: PUSH
58628: LD_INT 3
58630: NEG
58631: PUSH
58632: EMPTY
58633: LIST
58634: LIST
58635: PUSH
58636: EMPTY
58637: LIST
58638: LIST
58639: LIST
58640: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
58641: LD_ADDR_VAR 0 24
58645: PUSH
58646: LD_INT 3
58648: PUSH
58649: LD_INT 0
58651: PUSH
58652: EMPTY
58653: LIST
58654: LIST
58655: PUSH
58656: LD_INT 3
58658: PUSH
58659: LD_INT 1
58661: NEG
58662: PUSH
58663: EMPTY
58664: LIST
58665: LIST
58666: PUSH
58667: LD_INT 4
58669: PUSH
58670: LD_INT 1
58672: PUSH
58673: EMPTY
58674: LIST
58675: LIST
58676: PUSH
58677: EMPTY
58678: LIST
58679: LIST
58680: LIST
58681: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
58682: LD_ADDR_VAR 0 25
58686: PUSH
58687: LD_INT 3
58689: PUSH
58690: LD_INT 3
58692: PUSH
58693: EMPTY
58694: LIST
58695: LIST
58696: PUSH
58697: LD_INT 4
58699: PUSH
58700: LD_INT 3
58702: PUSH
58703: EMPTY
58704: LIST
58705: LIST
58706: PUSH
58707: LD_INT 3
58709: PUSH
58710: LD_INT 4
58712: PUSH
58713: EMPTY
58714: LIST
58715: LIST
58716: PUSH
58717: EMPTY
58718: LIST
58719: LIST
58720: LIST
58721: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
58722: LD_ADDR_VAR 0 26
58726: PUSH
58727: LD_INT 0
58729: PUSH
58730: LD_INT 3
58732: PUSH
58733: EMPTY
58734: LIST
58735: LIST
58736: PUSH
58737: LD_INT 1
58739: PUSH
58740: LD_INT 4
58742: PUSH
58743: EMPTY
58744: LIST
58745: LIST
58746: PUSH
58747: LD_INT 1
58749: NEG
58750: PUSH
58751: LD_INT 3
58753: PUSH
58754: EMPTY
58755: LIST
58756: LIST
58757: PUSH
58758: EMPTY
58759: LIST
58760: LIST
58761: LIST
58762: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
58763: LD_ADDR_VAR 0 27
58767: PUSH
58768: LD_INT 3
58770: NEG
58771: PUSH
58772: LD_INT 0
58774: PUSH
58775: EMPTY
58776: LIST
58777: LIST
58778: PUSH
58779: LD_INT 3
58781: NEG
58782: PUSH
58783: LD_INT 1
58785: PUSH
58786: EMPTY
58787: LIST
58788: LIST
58789: PUSH
58790: LD_INT 4
58792: NEG
58793: PUSH
58794: LD_INT 1
58796: NEG
58797: PUSH
58798: EMPTY
58799: LIST
58800: LIST
58801: PUSH
58802: EMPTY
58803: LIST
58804: LIST
58805: LIST
58806: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
58807: LD_ADDR_VAR 0 28
58811: PUSH
58812: LD_INT 3
58814: NEG
58815: PUSH
58816: LD_INT 3
58818: NEG
58819: PUSH
58820: EMPTY
58821: LIST
58822: LIST
58823: PUSH
58824: LD_INT 3
58826: NEG
58827: PUSH
58828: LD_INT 4
58830: NEG
58831: PUSH
58832: EMPTY
58833: LIST
58834: LIST
58835: PUSH
58836: LD_INT 4
58838: NEG
58839: PUSH
58840: LD_INT 3
58842: NEG
58843: PUSH
58844: EMPTY
58845: LIST
58846: LIST
58847: PUSH
58848: EMPTY
58849: LIST
58850: LIST
58851: LIST
58852: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
58853: LD_ADDR_VAR 0 29
58857: PUSH
58858: LD_INT 1
58860: NEG
58861: PUSH
58862: LD_INT 3
58864: NEG
58865: PUSH
58866: EMPTY
58867: LIST
58868: LIST
58869: PUSH
58870: LD_INT 0
58872: PUSH
58873: LD_INT 3
58875: NEG
58876: PUSH
58877: EMPTY
58878: LIST
58879: LIST
58880: PUSH
58881: LD_INT 1
58883: PUSH
58884: LD_INT 2
58886: NEG
58887: PUSH
58888: EMPTY
58889: LIST
58890: LIST
58891: PUSH
58892: LD_INT 1
58894: NEG
58895: PUSH
58896: LD_INT 4
58898: NEG
58899: PUSH
58900: EMPTY
58901: LIST
58902: LIST
58903: PUSH
58904: LD_INT 0
58906: PUSH
58907: LD_INT 4
58909: NEG
58910: PUSH
58911: EMPTY
58912: LIST
58913: LIST
58914: PUSH
58915: LD_INT 1
58917: PUSH
58918: LD_INT 3
58920: NEG
58921: PUSH
58922: EMPTY
58923: LIST
58924: LIST
58925: PUSH
58926: LD_INT 1
58928: NEG
58929: PUSH
58930: LD_INT 5
58932: NEG
58933: PUSH
58934: EMPTY
58935: LIST
58936: LIST
58937: PUSH
58938: LD_INT 0
58940: PUSH
58941: LD_INT 5
58943: NEG
58944: PUSH
58945: EMPTY
58946: LIST
58947: LIST
58948: PUSH
58949: LD_INT 1
58951: PUSH
58952: LD_INT 4
58954: NEG
58955: PUSH
58956: EMPTY
58957: LIST
58958: LIST
58959: PUSH
58960: LD_INT 1
58962: NEG
58963: PUSH
58964: LD_INT 6
58966: NEG
58967: PUSH
58968: EMPTY
58969: LIST
58970: LIST
58971: PUSH
58972: LD_INT 0
58974: PUSH
58975: LD_INT 6
58977: NEG
58978: PUSH
58979: EMPTY
58980: LIST
58981: LIST
58982: PUSH
58983: LD_INT 1
58985: PUSH
58986: LD_INT 5
58988: NEG
58989: PUSH
58990: EMPTY
58991: LIST
58992: LIST
58993: PUSH
58994: EMPTY
58995: LIST
58996: LIST
58997: LIST
58998: LIST
58999: LIST
59000: LIST
59001: LIST
59002: LIST
59003: LIST
59004: LIST
59005: LIST
59006: LIST
59007: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
59008: LD_ADDR_VAR 0 30
59012: PUSH
59013: LD_INT 2
59015: PUSH
59016: LD_INT 1
59018: NEG
59019: PUSH
59020: EMPTY
59021: LIST
59022: LIST
59023: PUSH
59024: LD_INT 3
59026: PUSH
59027: LD_INT 0
59029: PUSH
59030: EMPTY
59031: LIST
59032: LIST
59033: PUSH
59034: LD_INT 3
59036: PUSH
59037: LD_INT 1
59039: PUSH
59040: EMPTY
59041: LIST
59042: LIST
59043: PUSH
59044: LD_INT 3
59046: PUSH
59047: LD_INT 1
59049: NEG
59050: PUSH
59051: EMPTY
59052: LIST
59053: LIST
59054: PUSH
59055: LD_INT 4
59057: PUSH
59058: LD_INT 0
59060: PUSH
59061: EMPTY
59062: LIST
59063: LIST
59064: PUSH
59065: LD_INT 4
59067: PUSH
59068: LD_INT 1
59070: PUSH
59071: EMPTY
59072: LIST
59073: LIST
59074: PUSH
59075: LD_INT 4
59077: PUSH
59078: LD_INT 1
59080: NEG
59081: PUSH
59082: EMPTY
59083: LIST
59084: LIST
59085: PUSH
59086: LD_INT 5
59088: PUSH
59089: LD_INT 0
59091: PUSH
59092: EMPTY
59093: LIST
59094: LIST
59095: PUSH
59096: LD_INT 5
59098: PUSH
59099: LD_INT 1
59101: PUSH
59102: EMPTY
59103: LIST
59104: LIST
59105: PUSH
59106: LD_INT 5
59108: PUSH
59109: LD_INT 1
59111: NEG
59112: PUSH
59113: EMPTY
59114: LIST
59115: LIST
59116: PUSH
59117: LD_INT 6
59119: PUSH
59120: LD_INT 0
59122: PUSH
59123: EMPTY
59124: LIST
59125: LIST
59126: PUSH
59127: LD_INT 6
59129: PUSH
59130: LD_INT 1
59132: PUSH
59133: EMPTY
59134: LIST
59135: LIST
59136: PUSH
59137: EMPTY
59138: LIST
59139: LIST
59140: LIST
59141: LIST
59142: LIST
59143: LIST
59144: LIST
59145: LIST
59146: LIST
59147: LIST
59148: LIST
59149: LIST
59150: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
59151: LD_ADDR_VAR 0 31
59155: PUSH
59156: LD_INT 3
59158: PUSH
59159: LD_INT 2
59161: PUSH
59162: EMPTY
59163: LIST
59164: LIST
59165: PUSH
59166: LD_INT 3
59168: PUSH
59169: LD_INT 3
59171: PUSH
59172: EMPTY
59173: LIST
59174: LIST
59175: PUSH
59176: LD_INT 2
59178: PUSH
59179: LD_INT 3
59181: PUSH
59182: EMPTY
59183: LIST
59184: LIST
59185: PUSH
59186: LD_INT 4
59188: PUSH
59189: LD_INT 3
59191: PUSH
59192: EMPTY
59193: LIST
59194: LIST
59195: PUSH
59196: LD_INT 4
59198: PUSH
59199: LD_INT 4
59201: PUSH
59202: EMPTY
59203: LIST
59204: LIST
59205: PUSH
59206: LD_INT 3
59208: PUSH
59209: LD_INT 4
59211: PUSH
59212: EMPTY
59213: LIST
59214: LIST
59215: PUSH
59216: LD_INT 5
59218: PUSH
59219: LD_INT 4
59221: PUSH
59222: EMPTY
59223: LIST
59224: LIST
59225: PUSH
59226: LD_INT 5
59228: PUSH
59229: LD_INT 5
59231: PUSH
59232: EMPTY
59233: LIST
59234: LIST
59235: PUSH
59236: LD_INT 4
59238: PUSH
59239: LD_INT 5
59241: PUSH
59242: EMPTY
59243: LIST
59244: LIST
59245: PUSH
59246: LD_INT 6
59248: PUSH
59249: LD_INT 5
59251: PUSH
59252: EMPTY
59253: LIST
59254: LIST
59255: PUSH
59256: LD_INT 6
59258: PUSH
59259: LD_INT 6
59261: PUSH
59262: EMPTY
59263: LIST
59264: LIST
59265: PUSH
59266: LD_INT 5
59268: PUSH
59269: LD_INT 6
59271: PUSH
59272: EMPTY
59273: LIST
59274: LIST
59275: PUSH
59276: EMPTY
59277: LIST
59278: LIST
59279: LIST
59280: LIST
59281: LIST
59282: LIST
59283: LIST
59284: LIST
59285: LIST
59286: LIST
59287: LIST
59288: LIST
59289: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
59290: LD_ADDR_VAR 0 32
59294: PUSH
59295: LD_INT 1
59297: PUSH
59298: LD_INT 3
59300: PUSH
59301: EMPTY
59302: LIST
59303: LIST
59304: PUSH
59305: LD_INT 0
59307: PUSH
59308: LD_INT 3
59310: PUSH
59311: EMPTY
59312: LIST
59313: LIST
59314: PUSH
59315: LD_INT 1
59317: NEG
59318: PUSH
59319: LD_INT 2
59321: PUSH
59322: EMPTY
59323: LIST
59324: LIST
59325: PUSH
59326: LD_INT 1
59328: PUSH
59329: LD_INT 4
59331: PUSH
59332: EMPTY
59333: LIST
59334: LIST
59335: PUSH
59336: LD_INT 0
59338: PUSH
59339: LD_INT 4
59341: PUSH
59342: EMPTY
59343: LIST
59344: LIST
59345: PUSH
59346: LD_INT 1
59348: NEG
59349: PUSH
59350: LD_INT 3
59352: PUSH
59353: EMPTY
59354: LIST
59355: LIST
59356: PUSH
59357: LD_INT 1
59359: PUSH
59360: LD_INT 5
59362: PUSH
59363: EMPTY
59364: LIST
59365: LIST
59366: PUSH
59367: LD_INT 0
59369: PUSH
59370: LD_INT 5
59372: PUSH
59373: EMPTY
59374: LIST
59375: LIST
59376: PUSH
59377: LD_INT 1
59379: NEG
59380: PUSH
59381: LD_INT 4
59383: PUSH
59384: EMPTY
59385: LIST
59386: LIST
59387: PUSH
59388: LD_INT 1
59390: PUSH
59391: LD_INT 6
59393: PUSH
59394: EMPTY
59395: LIST
59396: LIST
59397: PUSH
59398: LD_INT 0
59400: PUSH
59401: LD_INT 6
59403: PUSH
59404: EMPTY
59405: LIST
59406: LIST
59407: PUSH
59408: LD_INT 1
59410: NEG
59411: PUSH
59412: LD_INT 5
59414: PUSH
59415: EMPTY
59416: LIST
59417: LIST
59418: PUSH
59419: EMPTY
59420: LIST
59421: LIST
59422: LIST
59423: LIST
59424: LIST
59425: LIST
59426: LIST
59427: LIST
59428: LIST
59429: LIST
59430: LIST
59431: LIST
59432: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
59433: LD_ADDR_VAR 0 33
59437: PUSH
59438: LD_INT 2
59440: NEG
59441: PUSH
59442: LD_INT 1
59444: PUSH
59445: EMPTY
59446: LIST
59447: LIST
59448: PUSH
59449: LD_INT 3
59451: NEG
59452: PUSH
59453: LD_INT 0
59455: PUSH
59456: EMPTY
59457: LIST
59458: LIST
59459: PUSH
59460: LD_INT 3
59462: NEG
59463: PUSH
59464: LD_INT 1
59466: NEG
59467: PUSH
59468: EMPTY
59469: LIST
59470: LIST
59471: PUSH
59472: LD_INT 3
59474: NEG
59475: PUSH
59476: LD_INT 1
59478: PUSH
59479: EMPTY
59480: LIST
59481: LIST
59482: PUSH
59483: LD_INT 4
59485: NEG
59486: PUSH
59487: LD_INT 0
59489: PUSH
59490: EMPTY
59491: LIST
59492: LIST
59493: PUSH
59494: LD_INT 4
59496: NEG
59497: PUSH
59498: LD_INT 1
59500: NEG
59501: PUSH
59502: EMPTY
59503: LIST
59504: LIST
59505: PUSH
59506: LD_INT 4
59508: NEG
59509: PUSH
59510: LD_INT 1
59512: PUSH
59513: EMPTY
59514: LIST
59515: LIST
59516: PUSH
59517: LD_INT 5
59519: NEG
59520: PUSH
59521: LD_INT 0
59523: PUSH
59524: EMPTY
59525: LIST
59526: LIST
59527: PUSH
59528: LD_INT 5
59530: NEG
59531: PUSH
59532: LD_INT 1
59534: NEG
59535: PUSH
59536: EMPTY
59537: LIST
59538: LIST
59539: PUSH
59540: LD_INT 5
59542: NEG
59543: PUSH
59544: LD_INT 1
59546: PUSH
59547: EMPTY
59548: LIST
59549: LIST
59550: PUSH
59551: LD_INT 6
59553: NEG
59554: PUSH
59555: LD_INT 0
59557: PUSH
59558: EMPTY
59559: LIST
59560: LIST
59561: PUSH
59562: LD_INT 6
59564: NEG
59565: PUSH
59566: LD_INT 1
59568: NEG
59569: PUSH
59570: EMPTY
59571: LIST
59572: LIST
59573: PUSH
59574: EMPTY
59575: LIST
59576: LIST
59577: LIST
59578: LIST
59579: LIST
59580: LIST
59581: LIST
59582: LIST
59583: LIST
59584: LIST
59585: LIST
59586: LIST
59587: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
59588: LD_ADDR_VAR 0 34
59592: PUSH
59593: LD_INT 2
59595: NEG
59596: PUSH
59597: LD_INT 3
59599: NEG
59600: PUSH
59601: EMPTY
59602: LIST
59603: LIST
59604: PUSH
59605: LD_INT 3
59607: NEG
59608: PUSH
59609: LD_INT 2
59611: NEG
59612: PUSH
59613: EMPTY
59614: LIST
59615: LIST
59616: PUSH
59617: LD_INT 3
59619: NEG
59620: PUSH
59621: LD_INT 3
59623: NEG
59624: PUSH
59625: EMPTY
59626: LIST
59627: LIST
59628: PUSH
59629: LD_INT 3
59631: NEG
59632: PUSH
59633: LD_INT 4
59635: NEG
59636: PUSH
59637: EMPTY
59638: LIST
59639: LIST
59640: PUSH
59641: LD_INT 4
59643: NEG
59644: PUSH
59645: LD_INT 3
59647: NEG
59648: PUSH
59649: EMPTY
59650: LIST
59651: LIST
59652: PUSH
59653: LD_INT 4
59655: NEG
59656: PUSH
59657: LD_INT 4
59659: NEG
59660: PUSH
59661: EMPTY
59662: LIST
59663: LIST
59664: PUSH
59665: LD_INT 4
59667: NEG
59668: PUSH
59669: LD_INT 5
59671: NEG
59672: PUSH
59673: EMPTY
59674: LIST
59675: LIST
59676: PUSH
59677: LD_INT 5
59679: NEG
59680: PUSH
59681: LD_INT 4
59683: NEG
59684: PUSH
59685: EMPTY
59686: LIST
59687: LIST
59688: PUSH
59689: LD_INT 5
59691: NEG
59692: PUSH
59693: LD_INT 5
59695: NEG
59696: PUSH
59697: EMPTY
59698: LIST
59699: LIST
59700: PUSH
59701: LD_INT 5
59703: NEG
59704: PUSH
59705: LD_INT 6
59707: NEG
59708: PUSH
59709: EMPTY
59710: LIST
59711: LIST
59712: PUSH
59713: LD_INT 6
59715: NEG
59716: PUSH
59717: LD_INT 5
59719: NEG
59720: PUSH
59721: EMPTY
59722: LIST
59723: LIST
59724: PUSH
59725: LD_INT 6
59727: NEG
59728: PUSH
59729: LD_INT 6
59731: NEG
59732: PUSH
59733: EMPTY
59734: LIST
59735: LIST
59736: PUSH
59737: EMPTY
59738: LIST
59739: LIST
59740: LIST
59741: LIST
59742: LIST
59743: LIST
59744: LIST
59745: LIST
59746: LIST
59747: LIST
59748: LIST
59749: LIST
59750: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
59751: LD_ADDR_VAR 0 41
59755: PUSH
59756: LD_INT 0
59758: PUSH
59759: LD_INT 2
59761: NEG
59762: PUSH
59763: EMPTY
59764: LIST
59765: LIST
59766: PUSH
59767: LD_INT 1
59769: NEG
59770: PUSH
59771: LD_INT 3
59773: NEG
59774: PUSH
59775: EMPTY
59776: LIST
59777: LIST
59778: PUSH
59779: LD_INT 1
59781: PUSH
59782: LD_INT 2
59784: NEG
59785: PUSH
59786: EMPTY
59787: LIST
59788: LIST
59789: PUSH
59790: EMPTY
59791: LIST
59792: LIST
59793: LIST
59794: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
59795: LD_ADDR_VAR 0 42
59799: PUSH
59800: LD_INT 2
59802: PUSH
59803: LD_INT 0
59805: PUSH
59806: EMPTY
59807: LIST
59808: LIST
59809: PUSH
59810: LD_INT 2
59812: PUSH
59813: LD_INT 1
59815: NEG
59816: PUSH
59817: EMPTY
59818: LIST
59819: LIST
59820: PUSH
59821: LD_INT 3
59823: PUSH
59824: LD_INT 1
59826: PUSH
59827: EMPTY
59828: LIST
59829: LIST
59830: PUSH
59831: EMPTY
59832: LIST
59833: LIST
59834: LIST
59835: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
59836: LD_ADDR_VAR 0 43
59840: PUSH
59841: LD_INT 2
59843: PUSH
59844: LD_INT 2
59846: PUSH
59847: EMPTY
59848: LIST
59849: LIST
59850: PUSH
59851: LD_INT 3
59853: PUSH
59854: LD_INT 2
59856: PUSH
59857: EMPTY
59858: LIST
59859: LIST
59860: PUSH
59861: LD_INT 2
59863: PUSH
59864: LD_INT 3
59866: PUSH
59867: EMPTY
59868: LIST
59869: LIST
59870: PUSH
59871: EMPTY
59872: LIST
59873: LIST
59874: LIST
59875: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
59876: LD_ADDR_VAR 0 44
59880: PUSH
59881: LD_INT 0
59883: PUSH
59884: LD_INT 2
59886: PUSH
59887: EMPTY
59888: LIST
59889: LIST
59890: PUSH
59891: LD_INT 1
59893: PUSH
59894: LD_INT 3
59896: PUSH
59897: EMPTY
59898: LIST
59899: LIST
59900: PUSH
59901: LD_INT 1
59903: NEG
59904: PUSH
59905: LD_INT 2
59907: PUSH
59908: EMPTY
59909: LIST
59910: LIST
59911: PUSH
59912: EMPTY
59913: LIST
59914: LIST
59915: LIST
59916: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59917: LD_ADDR_VAR 0 45
59921: PUSH
59922: LD_INT 2
59924: NEG
59925: PUSH
59926: LD_INT 0
59928: PUSH
59929: EMPTY
59930: LIST
59931: LIST
59932: PUSH
59933: LD_INT 2
59935: NEG
59936: PUSH
59937: LD_INT 1
59939: PUSH
59940: EMPTY
59941: LIST
59942: LIST
59943: PUSH
59944: LD_INT 3
59946: NEG
59947: PUSH
59948: LD_INT 1
59950: NEG
59951: PUSH
59952: EMPTY
59953: LIST
59954: LIST
59955: PUSH
59956: EMPTY
59957: LIST
59958: LIST
59959: LIST
59960: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
59961: LD_ADDR_VAR 0 46
59965: PUSH
59966: LD_INT 2
59968: NEG
59969: PUSH
59970: LD_INT 2
59972: NEG
59973: PUSH
59974: EMPTY
59975: LIST
59976: LIST
59977: PUSH
59978: LD_INT 2
59980: NEG
59981: PUSH
59982: LD_INT 3
59984: NEG
59985: PUSH
59986: EMPTY
59987: LIST
59988: LIST
59989: PUSH
59990: LD_INT 3
59992: NEG
59993: PUSH
59994: LD_INT 2
59996: NEG
59997: PUSH
59998: EMPTY
59999: LIST
60000: LIST
60001: PUSH
60002: EMPTY
60003: LIST
60004: LIST
60005: LIST
60006: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
60007: LD_ADDR_VAR 0 47
60011: PUSH
60012: LD_INT 2
60014: NEG
60015: PUSH
60016: LD_INT 3
60018: NEG
60019: PUSH
60020: EMPTY
60021: LIST
60022: LIST
60023: PUSH
60024: LD_INT 1
60026: NEG
60027: PUSH
60028: LD_INT 3
60030: NEG
60031: PUSH
60032: EMPTY
60033: LIST
60034: LIST
60035: PUSH
60036: EMPTY
60037: LIST
60038: LIST
60039: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
60040: LD_ADDR_VAR 0 48
60044: PUSH
60045: LD_INT 1
60047: PUSH
60048: LD_INT 2
60050: NEG
60051: PUSH
60052: EMPTY
60053: LIST
60054: LIST
60055: PUSH
60056: LD_INT 2
60058: PUSH
60059: LD_INT 1
60061: NEG
60062: PUSH
60063: EMPTY
60064: LIST
60065: LIST
60066: PUSH
60067: EMPTY
60068: LIST
60069: LIST
60070: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
60071: LD_ADDR_VAR 0 49
60075: PUSH
60076: LD_INT 3
60078: PUSH
60079: LD_INT 1
60081: PUSH
60082: EMPTY
60083: LIST
60084: LIST
60085: PUSH
60086: LD_INT 3
60088: PUSH
60089: LD_INT 2
60091: PUSH
60092: EMPTY
60093: LIST
60094: LIST
60095: PUSH
60096: EMPTY
60097: LIST
60098: LIST
60099: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
60100: LD_ADDR_VAR 0 50
60104: PUSH
60105: LD_INT 2
60107: PUSH
60108: LD_INT 3
60110: PUSH
60111: EMPTY
60112: LIST
60113: LIST
60114: PUSH
60115: LD_INT 1
60117: PUSH
60118: LD_INT 3
60120: PUSH
60121: EMPTY
60122: LIST
60123: LIST
60124: PUSH
60125: EMPTY
60126: LIST
60127: LIST
60128: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
60129: LD_ADDR_VAR 0 51
60133: PUSH
60134: LD_INT 1
60136: NEG
60137: PUSH
60138: LD_INT 2
60140: PUSH
60141: EMPTY
60142: LIST
60143: LIST
60144: PUSH
60145: LD_INT 2
60147: NEG
60148: PUSH
60149: LD_INT 1
60151: PUSH
60152: EMPTY
60153: LIST
60154: LIST
60155: PUSH
60156: EMPTY
60157: LIST
60158: LIST
60159: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
60160: LD_ADDR_VAR 0 52
60164: PUSH
60165: LD_INT 3
60167: NEG
60168: PUSH
60169: LD_INT 1
60171: NEG
60172: PUSH
60173: EMPTY
60174: LIST
60175: LIST
60176: PUSH
60177: LD_INT 3
60179: NEG
60180: PUSH
60181: LD_INT 2
60183: NEG
60184: PUSH
60185: EMPTY
60186: LIST
60187: LIST
60188: PUSH
60189: EMPTY
60190: LIST
60191: LIST
60192: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
60193: LD_ADDR_VAR 0 53
60197: PUSH
60198: LD_INT 1
60200: NEG
60201: PUSH
60202: LD_INT 3
60204: NEG
60205: PUSH
60206: EMPTY
60207: LIST
60208: LIST
60209: PUSH
60210: LD_INT 0
60212: PUSH
60213: LD_INT 3
60215: NEG
60216: PUSH
60217: EMPTY
60218: LIST
60219: LIST
60220: PUSH
60221: LD_INT 1
60223: PUSH
60224: LD_INT 2
60226: NEG
60227: PUSH
60228: EMPTY
60229: LIST
60230: LIST
60231: PUSH
60232: EMPTY
60233: LIST
60234: LIST
60235: LIST
60236: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
60237: LD_ADDR_VAR 0 54
60241: PUSH
60242: LD_INT 2
60244: PUSH
60245: LD_INT 1
60247: NEG
60248: PUSH
60249: EMPTY
60250: LIST
60251: LIST
60252: PUSH
60253: LD_INT 3
60255: PUSH
60256: LD_INT 0
60258: PUSH
60259: EMPTY
60260: LIST
60261: LIST
60262: PUSH
60263: LD_INT 3
60265: PUSH
60266: LD_INT 1
60268: PUSH
60269: EMPTY
60270: LIST
60271: LIST
60272: PUSH
60273: EMPTY
60274: LIST
60275: LIST
60276: LIST
60277: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
60278: LD_ADDR_VAR 0 55
60282: PUSH
60283: LD_INT 3
60285: PUSH
60286: LD_INT 2
60288: PUSH
60289: EMPTY
60290: LIST
60291: LIST
60292: PUSH
60293: LD_INT 3
60295: PUSH
60296: LD_INT 3
60298: PUSH
60299: EMPTY
60300: LIST
60301: LIST
60302: PUSH
60303: LD_INT 2
60305: PUSH
60306: LD_INT 3
60308: PUSH
60309: EMPTY
60310: LIST
60311: LIST
60312: PUSH
60313: EMPTY
60314: LIST
60315: LIST
60316: LIST
60317: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
60318: LD_ADDR_VAR 0 56
60322: PUSH
60323: LD_INT 1
60325: PUSH
60326: LD_INT 3
60328: PUSH
60329: EMPTY
60330: LIST
60331: LIST
60332: PUSH
60333: LD_INT 0
60335: PUSH
60336: LD_INT 3
60338: PUSH
60339: EMPTY
60340: LIST
60341: LIST
60342: PUSH
60343: LD_INT 1
60345: NEG
60346: PUSH
60347: LD_INT 2
60349: PUSH
60350: EMPTY
60351: LIST
60352: LIST
60353: PUSH
60354: EMPTY
60355: LIST
60356: LIST
60357: LIST
60358: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60359: LD_ADDR_VAR 0 57
60363: PUSH
60364: LD_INT 2
60366: NEG
60367: PUSH
60368: LD_INT 1
60370: PUSH
60371: EMPTY
60372: LIST
60373: LIST
60374: PUSH
60375: LD_INT 3
60377: NEG
60378: PUSH
60379: LD_INT 0
60381: PUSH
60382: EMPTY
60383: LIST
60384: LIST
60385: PUSH
60386: LD_INT 3
60388: NEG
60389: PUSH
60390: LD_INT 1
60392: NEG
60393: PUSH
60394: EMPTY
60395: LIST
60396: LIST
60397: PUSH
60398: EMPTY
60399: LIST
60400: LIST
60401: LIST
60402: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60403: LD_ADDR_VAR 0 58
60407: PUSH
60408: LD_INT 2
60410: NEG
60411: PUSH
60412: LD_INT 3
60414: NEG
60415: PUSH
60416: EMPTY
60417: LIST
60418: LIST
60419: PUSH
60420: LD_INT 3
60422: NEG
60423: PUSH
60424: LD_INT 2
60426: NEG
60427: PUSH
60428: EMPTY
60429: LIST
60430: LIST
60431: PUSH
60432: LD_INT 3
60434: NEG
60435: PUSH
60436: LD_INT 3
60438: NEG
60439: PUSH
60440: EMPTY
60441: LIST
60442: LIST
60443: PUSH
60444: EMPTY
60445: LIST
60446: LIST
60447: LIST
60448: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
60449: LD_ADDR_VAR 0 59
60453: PUSH
60454: LD_INT 1
60456: NEG
60457: PUSH
60458: LD_INT 2
60460: NEG
60461: PUSH
60462: EMPTY
60463: LIST
60464: LIST
60465: PUSH
60466: LD_INT 0
60468: PUSH
60469: LD_INT 2
60471: NEG
60472: PUSH
60473: EMPTY
60474: LIST
60475: LIST
60476: PUSH
60477: LD_INT 1
60479: PUSH
60480: LD_INT 1
60482: NEG
60483: PUSH
60484: EMPTY
60485: LIST
60486: LIST
60487: PUSH
60488: EMPTY
60489: LIST
60490: LIST
60491: LIST
60492: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
60493: LD_ADDR_VAR 0 60
60497: PUSH
60498: LD_INT 1
60500: PUSH
60501: LD_INT 1
60503: NEG
60504: PUSH
60505: EMPTY
60506: LIST
60507: LIST
60508: PUSH
60509: LD_INT 2
60511: PUSH
60512: LD_INT 0
60514: PUSH
60515: EMPTY
60516: LIST
60517: LIST
60518: PUSH
60519: LD_INT 2
60521: PUSH
60522: LD_INT 1
60524: PUSH
60525: EMPTY
60526: LIST
60527: LIST
60528: PUSH
60529: EMPTY
60530: LIST
60531: LIST
60532: LIST
60533: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
60534: LD_ADDR_VAR 0 61
60538: PUSH
60539: LD_INT 2
60541: PUSH
60542: LD_INT 1
60544: PUSH
60545: EMPTY
60546: LIST
60547: LIST
60548: PUSH
60549: LD_INT 2
60551: PUSH
60552: LD_INT 2
60554: PUSH
60555: EMPTY
60556: LIST
60557: LIST
60558: PUSH
60559: LD_INT 1
60561: PUSH
60562: LD_INT 2
60564: PUSH
60565: EMPTY
60566: LIST
60567: LIST
60568: PUSH
60569: EMPTY
60570: LIST
60571: LIST
60572: LIST
60573: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
60574: LD_ADDR_VAR 0 62
60578: PUSH
60579: LD_INT 1
60581: PUSH
60582: LD_INT 2
60584: PUSH
60585: EMPTY
60586: LIST
60587: LIST
60588: PUSH
60589: LD_INT 0
60591: PUSH
60592: LD_INT 2
60594: PUSH
60595: EMPTY
60596: LIST
60597: LIST
60598: PUSH
60599: LD_INT 1
60601: NEG
60602: PUSH
60603: LD_INT 1
60605: PUSH
60606: EMPTY
60607: LIST
60608: LIST
60609: PUSH
60610: EMPTY
60611: LIST
60612: LIST
60613: LIST
60614: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
60615: LD_ADDR_VAR 0 63
60619: PUSH
60620: LD_INT 1
60622: NEG
60623: PUSH
60624: LD_INT 1
60626: PUSH
60627: EMPTY
60628: LIST
60629: LIST
60630: PUSH
60631: LD_INT 2
60633: NEG
60634: PUSH
60635: LD_INT 0
60637: PUSH
60638: EMPTY
60639: LIST
60640: LIST
60641: PUSH
60642: LD_INT 2
60644: NEG
60645: PUSH
60646: LD_INT 1
60648: NEG
60649: PUSH
60650: EMPTY
60651: LIST
60652: LIST
60653: PUSH
60654: EMPTY
60655: LIST
60656: LIST
60657: LIST
60658: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60659: LD_ADDR_VAR 0 64
60663: PUSH
60664: LD_INT 1
60666: NEG
60667: PUSH
60668: LD_INT 2
60670: NEG
60671: PUSH
60672: EMPTY
60673: LIST
60674: LIST
60675: PUSH
60676: LD_INT 2
60678: NEG
60679: PUSH
60680: LD_INT 1
60682: NEG
60683: PUSH
60684: EMPTY
60685: LIST
60686: LIST
60687: PUSH
60688: LD_INT 2
60690: NEG
60691: PUSH
60692: LD_INT 2
60694: NEG
60695: PUSH
60696: EMPTY
60697: LIST
60698: LIST
60699: PUSH
60700: EMPTY
60701: LIST
60702: LIST
60703: LIST
60704: ST_TO_ADDR
// end ; 2 :
60705: GO 63971
60707: LD_INT 2
60709: DOUBLE
60710: EQUAL
60711: IFTRUE 60715
60713: GO 63970
60715: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
60716: LD_ADDR_VAR 0 29
60720: PUSH
60721: LD_INT 4
60723: PUSH
60724: LD_INT 0
60726: PUSH
60727: EMPTY
60728: LIST
60729: LIST
60730: PUSH
60731: LD_INT 4
60733: PUSH
60734: LD_INT 1
60736: NEG
60737: PUSH
60738: EMPTY
60739: LIST
60740: LIST
60741: PUSH
60742: LD_INT 5
60744: PUSH
60745: LD_INT 0
60747: PUSH
60748: EMPTY
60749: LIST
60750: LIST
60751: PUSH
60752: LD_INT 5
60754: PUSH
60755: LD_INT 1
60757: PUSH
60758: EMPTY
60759: LIST
60760: LIST
60761: PUSH
60762: LD_INT 4
60764: PUSH
60765: LD_INT 1
60767: PUSH
60768: EMPTY
60769: LIST
60770: LIST
60771: PUSH
60772: LD_INT 3
60774: PUSH
60775: LD_INT 0
60777: PUSH
60778: EMPTY
60779: LIST
60780: LIST
60781: PUSH
60782: LD_INT 3
60784: PUSH
60785: LD_INT 1
60787: NEG
60788: PUSH
60789: EMPTY
60790: LIST
60791: LIST
60792: PUSH
60793: LD_INT 3
60795: PUSH
60796: LD_INT 2
60798: NEG
60799: PUSH
60800: EMPTY
60801: LIST
60802: LIST
60803: PUSH
60804: LD_INT 5
60806: PUSH
60807: LD_INT 2
60809: PUSH
60810: EMPTY
60811: LIST
60812: LIST
60813: PUSH
60814: LD_INT 3
60816: PUSH
60817: LD_INT 3
60819: PUSH
60820: EMPTY
60821: LIST
60822: LIST
60823: PUSH
60824: LD_INT 3
60826: PUSH
60827: LD_INT 2
60829: PUSH
60830: EMPTY
60831: LIST
60832: LIST
60833: PUSH
60834: LD_INT 4
60836: PUSH
60837: LD_INT 3
60839: PUSH
60840: EMPTY
60841: LIST
60842: LIST
60843: PUSH
60844: LD_INT 4
60846: PUSH
60847: LD_INT 4
60849: PUSH
60850: EMPTY
60851: LIST
60852: LIST
60853: PUSH
60854: LD_INT 3
60856: PUSH
60857: LD_INT 4
60859: PUSH
60860: EMPTY
60861: LIST
60862: LIST
60863: PUSH
60864: LD_INT 2
60866: PUSH
60867: LD_INT 3
60869: PUSH
60870: EMPTY
60871: LIST
60872: LIST
60873: PUSH
60874: LD_INT 2
60876: PUSH
60877: LD_INT 2
60879: PUSH
60880: EMPTY
60881: LIST
60882: LIST
60883: PUSH
60884: LD_INT 4
60886: PUSH
60887: LD_INT 2
60889: PUSH
60890: EMPTY
60891: LIST
60892: LIST
60893: PUSH
60894: LD_INT 2
60896: PUSH
60897: LD_INT 4
60899: PUSH
60900: EMPTY
60901: LIST
60902: LIST
60903: PUSH
60904: LD_INT 0
60906: PUSH
60907: LD_INT 4
60909: PUSH
60910: EMPTY
60911: LIST
60912: LIST
60913: PUSH
60914: LD_INT 0
60916: PUSH
60917: LD_INT 3
60919: PUSH
60920: EMPTY
60921: LIST
60922: LIST
60923: PUSH
60924: LD_INT 1
60926: PUSH
60927: LD_INT 4
60929: PUSH
60930: EMPTY
60931: LIST
60932: LIST
60933: PUSH
60934: LD_INT 1
60936: PUSH
60937: LD_INT 5
60939: PUSH
60940: EMPTY
60941: LIST
60942: LIST
60943: PUSH
60944: LD_INT 0
60946: PUSH
60947: LD_INT 5
60949: PUSH
60950: EMPTY
60951: LIST
60952: LIST
60953: PUSH
60954: LD_INT 1
60956: NEG
60957: PUSH
60958: LD_INT 4
60960: PUSH
60961: EMPTY
60962: LIST
60963: LIST
60964: PUSH
60965: LD_INT 1
60967: NEG
60968: PUSH
60969: LD_INT 3
60971: PUSH
60972: EMPTY
60973: LIST
60974: LIST
60975: PUSH
60976: LD_INT 2
60978: PUSH
60979: LD_INT 5
60981: PUSH
60982: EMPTY
60983: LIST
60984: LIST
60985: PUSH
60986: LD_INT 2
60988: NEG
60989: PUSH
60990: LD_INT 3
60992: PUSH
60993: EMPTY
60994: LIST
60995: LIST
60996: PUSH
60997: LD_INT 3
60999: NEG
61000: PUSH
61001: LD_INT 0
61003: PUSH
61004: EMPTY
61005: LIST
61006: LIST
61007: PUSH
61008: LD_INT 3
61010: NEG
61011: PUSH
61012: LD_INT 1
61014: NEG
61015: PUSH
61016: EMPTY
61017: LIST
61018: LIST
61019: PUSH
61020: LD_INT 2
61022: NEG
61023: PUSH
61024: LD_INT 0
61026: PUSH
61027: EMPTY
61028: LIST
61029: LIST
61030: PUSH
61031: LD_INT 2
61033: NEG
61034: PUSH
61035: LD_INT 1
61037: PUSH
61038: EMPTY
61039: LIST
61040: LIST
61041: PUSH
61042: LD_INT 3
61044: NEG
61045: PUSH
61046: LD_INT 1
61048: PUSH
61049: EMPTY
61050: LIST
61051: LIST
61052: PUSH
61053: LD_INT 4
61055: NEG
61056: PUSH
61057: LD_INT 0
61059: PUSH
61060: EMPTY
61061: LIST
61062: LIST
61063: PUSH
61064: LD_INT 4
61066: NEG
61067: PUSH
61068: LD_INT 1
61070: NEG
61071: PUSH
61072: EMPTY
61073: LIST
61074: LIST
61075: PUSH
61076: LD_INT 4
61078: NEG
61079: PUSH
61080: LD_INT 2
61082: NEG
61083: PUSH
61084: EMPTY
61085: LIST
61086: LIST
61087: PUSH
61088: LD_INT 2
61090: NEG
61091: PUSH
61092: LD_INT 2
61094: PUSH
61095: EMPTY
61096: LIST
61097: LIST
61098: PUSH
61099: LD_INT 4
61101: NEG
61102: PUSH
61103: LD_INT 4
61105: NEG
61106: PUSH
61107: EMPTY
61108: LIST
61109: LIST
61110: PUSH
61111: LD_INT 4
61113: NEG
61114: PUSH
61115: LD_INT 5
61117: NEG
61118: PUSH
61119: EMPTY
61120: LIST
61121: LIST
61122: PUSH
61123: LD_INT 3
61125: NEG
61126: PUSH
61127: LD_INT 4
61129: NEG
61130: PUSH
61131: EMPTY
61132: LIST
61133: LIST
61134: PUSH
61135: LD_INT 3
61137: NEG
61138: PUSH
61139: LD_INT 3
61141: NEG
61142: PUSH
61143: EMPTY
61144: LIST
61145: LIST
61146: PUSH
61147: LD_INT 4
61149: NEG
61150: PUSH
61151: LD_INT 3
61153: NEG
61154: PUSH
61155: EMPTY
61156: LIST
61157: LIST
61158: PUSH
61159: LD_INT 5
61161: NEG
61162: PUSH
61163: LD_INT 4
61165: NEG
61166: PUSH
61167: EMPTY
61168: LIST
61169: LIST
61170: PUSH
61171: LD_INT 5
61173: NEG
61174: PUSH
61175: LD_INT 5
61177: NEG
61178: PUSH
61179: EMPTY
61180: LIST
61181: LIST
61182: PUSH
61183: LD_INT 3
61185: NEG
61186: PUSH
61187: LD_INT 5
61189: NEG
61190: PUSH
61191: EMPTY
61192: LIST
61193: LIST
61194: PUSH
61195: LD_INT 5
61197: NEG
61198: PUSH
61199: LD_INT 3
61201: NEG
61202: PUSH
61203: EMPTY
61204: LIST
61205: LIST
61206: PUSH
61207: EMPTY
61208: LIST
61209: LIST
61210: LIST
61211: LIST
61212: LIST
61213: LIST
61214: LIST
61215: LIST
61216: LIST
61217: LIST
61218: LIST
61219: LIST
61220: LIST
61221: LIST
61222: LIST
61223: LIST
61224: LIST
61225: LIST
61226: LIST
61227: LIST
61228: LIST
61229: LIST
61230: LIST
61231: LIST
61232: LIST
61233: LIST
61234: LIST
61235: LIST
61236: LIST
61237: LIST
61238: LIST
61239: LIST
61240: LIST
61241: LIST
61242: LIST
61243: LIST
61244: LIST
61245: LIST
61246: LIST
61247: LIST
61248: LIST
61249: LIST
61250: LIST
61251: LIST
61252: LIST
61253: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
61254: LD_ADDR_VAR 0 30
61258: PUSH
61259: LD_INT 4
61261: PUSH
61262: LD_INT 4
61264: PUSH
61265: EMPTY
61266: LIST
61267: LIST
61268: PUSH
61269: LD_INT 4
61271: PUSH
61272: LD_INT 3
61274: PUSH
61275: EMPTY
61276: LIST
61277: LIST
61278: PUSH
61279: LD_INT 5
61281: PUSH
61282: LD_INT 4
61284: PUSH
61285: EMPTY
61286: LIST
61287: LIST
61288: PUSH
61289: LD_INT 5
61291: PUSH
61292: LD_INT 5
61294: PUSH
61295: EMPTY
61296: LIST
61297: LIST
61298: PUSH
61299: LD_INT 4
61301: PUSH
61302: LD_INT 5
61304: PUSH
61305: EMPTY
61306: LIST
61307: LIST
61308: PUSH
61309: LD_INT 3
61311: PUSH
61312: LD_INT 4
61314: PUSH
61315: EMPTY
61316: LIST
61317: LIST
61318: PUSH
61319: LD_INT 3
61321: PUSH
61322: LD_INT 3
61324: PUSH
61325: EMPTY
61326: LIST
61327: LIST
61328: PUSH
61329: LD_INT 5
61331: PUSH
61332: LD_INT 3
61334: PUSH
61335: EMPTY
61336: LIST
61337: LIST
61338: PUSH
61339: LD_INT 3
61341: PUSH
61342: LD_INT 5
61344: PUSH
61345: EMPTY
61346: LIST
61347: LIST
61348: PUSH
61349: LD_INT 0
61351: PUSH
61352: LD_INT 3
61354: PUSH
61355: EMPTY
61356: LIST
61357: LIST
61358: PUSH
61359: LD_INT 0
61361: PUSH
61362: LD_INT 2
61364: PUSH
61365: EMPTY
61366: LIST
61367: LIST
61368: PUSH
61369: LD_INT 1
61371: PUSH
61372: LD_INT 3
61374: PUSH
61375: EMPTY
61376: LIST
61377: LIST
61378: PUSH
61379: LD_INT 1
61381: PUSH
61382: LD_INT 4
61384: PUSH
61385: EMPTY
61386: LIST
61387: LIST
61388: PUSH
61389: LD_INT 0
61391: PUSH
61392: LD_INT 4
61394: PUSH
61395: EMPTY
61396: LIST
61397: LIST
61398: PUSH
61399: LD_INT 1
61401: NEG
61402: PUSH
61403: LD_INT 3
61405: PUSH
61406: EMPTY
61407: LIST
61408: LIST
61409: PUSH
61410: LD_INT 1
61412: NEG
61413: PUSH
61414: LD_INT 2
61416: PUSH
61417: EMPTY
61418: LIST
61419: LIST
61420: PUSH
61421: LD_INT 2
61423: PUSH
61424: LD_INT 4
61426: PUSH
61427: EMPTY
61428: LIST
61429: LIST
61430: PUSH
61431: LD_INT 2
61433: NEG
61434: PUSH
61435: LD_INT 2
61437: PUSH
61438: EMPTY
61439: LIST
61440: LIST
61441: PUSH
61442: LD_INT 4
61444: NEG
61445: PUSH
61446: LD_INT 0
61448: PUSH
61449: EMPTY
61450: LIST
61451: LIST
61452: PUSH
61453: LD_INT 4
61455: NEG
61456: PUSH
61457: LD_INT 1
61459: NEG
61460: PUSH
61461: EMPTY
61462: LIST
61463: LIST
61464: PUSH
61465: LD_INT 3
61467: NEG
61468: PUSH
61469: LD_INT 0
61471: PUSH
61472: EMPTY
61473: LIST
61474: LIST
61475: PUSH
61476: LD_INT 3
61478: NEG
61479: PUSH
61480: LD_INT 1
61482: PUSH
61483: EMPTY
61484: LIST
61485: LIST
61486: PUSH
61487: LD_INT 4
61489: NEG
61490: PUSH
61491: LD_INT 1
61493: PUSH
61494: EMPTY
61495: LIST
61496: LIST
61497: PUSH
61498: LD_INT 5
61500: NEG
61501: PUSH
61502: LD_INT 0
61504: PUSH
61505: EMPTY
61506: LIST
61507: LIST
61508: PUSH
61509: LD_INT 5
61511: NEG
61512: PUSH
61513: LD_INT 1
61515: NEG
61516: PUSH
61517: EMPTY
61518: LIST
61519: LIST
61520: PUSH
61521: LD_INT 5
61523: NEG
61524: PUSH
61525: LD_INT 2
61527: NEG
61528: PUSH
61529: EMPTY
61530: LIST
61531: LIST
61532: PUSH
61533: LD_INT 3
61535: NEG
61536: PUSH
61537: LD_INT 2
61539: PUSH
61540: EMPTY
61541: LIST
61542: LIST
61543: PUSH
61544: LD_INT 3
61546: NEG
61547: PUSH
61548: LD_INT 3
61550: NEG
61551: PUSH
61552: EMPTY
61553: LIST
61554: LIST
61555: PUSH
61556: LD_INT 3
61558: NEG
61559: PUSH
61560: LD_INT 4
61562: NEG
61563: PUSH
61564: EMPTY
61565: LIST
61566: LIST
61567: PUSH
61568: LD_INT 2
61570: NEG
61571: PUSH
61572: LD_INT 3
61574: NEG
61575: PUSH
61576: EMPTY
61577: LIST
61578: LIST
61579: PUSH
61580: LD_INT 2
61582: NEG
61583: PUSH
61584: LD_INT 2
61586: NEG
61587: PUSH
61588: EMPTY
61589: LIST
61590: LIST
61591: PUSH
61592: LD_INT 3
61594: NEG
61595: PUSH
61596: LD_INT 2
61598: NEG
61599: PUSH
61600: EMPTY
61601: LIST
61602: LIST
61603: PUSH
61604: LD_INT 4
61606: NEG
61607: PUSH
61608: LD_INT 3
61610: NEG
61611: PUSH
61612: EMPTY
61613: LIST
61614: LIST
61615: PUSH
61616: LD_INT 4
61618: NEG
61619: PUSH
61620: LD_INT 4
61622: NEG
61623: PUSH
61624: EMPTY
61625: LIST
61626: LIST
61627: PUSH
61628: LD_INT 2
61630: NEG
61631: PUSH
61632: LD_INT 4
61634: NEG
61635: PUSH
61636: EMPTY
61637: LIST
61638: LIST
61639: PUSH
61640: LD_INT 4
61642: NEG
61643: PUSH
61644: LD_INT 2
61646: NEG
61647: PUSH
61648: EMPTY
61649: LIST
61650: LIST
61651: PUSH
61652: LD_INT 0
61654: PUSH
61655: LD_INT 4
61657: NEG
61658: PUSH
61659: EMPTY
61660: LIST
61661: LIST
61662: PUSH
61663: LD_INT 0
61665: PUSH
61666: LD_INT 5
61668: NEG
61669: PUSH
61670: EMPTY
61671: LIST
61672: LIST
61673: PUSH
61674: LD_INT 1
61676: PUSH
61677: LD_INT 4
61679: NEG
61680: PUSH
61681: EMPTY
61682: LIST
61683: LIST
61684: PUSH
61685: LD_INT 1
61687: PUSH
61688: LD_INT 3
61690: NEG
61691: PUSH
61692: EMPTY
61693: LIST
61694: LIST
61695: PUSH
61696: LD_INT 0
61698: PUSH
61699: LD_INT 3
61701: NEG
61702: PUSH
61703: EMPTY
61704: LIST
61705: LIST
61706: PUSH
61707: LD_INT 1
61709: NEG
61710: PUSH
61711: LD_INT 4
61713: NEG
61714: PUSH
61715: EMPTY
61716: LIST
61717: LIST
61718: PUSH
61719: LD_INT 1
61721: NEG
61722: PUSH
61723: LD_INT 5
61725: NEG
61726: PUSH
61727: EMPTY
61728: LIST
61729: LIST
61730: PUSH
61731: LD_INT 2
61733: PUSH
61734: LD_INT 3
61736: NEG
61737: PUSH
61738: EMPTY
61739: LIST
61740: LIST
61741: PUSH
61742: LD_INT 2
61744: NEG
61745: PUSH
61746: LD_INT 5
61748: NEG
61749: PUSH
61750: EMPTY
61751: LIST
61752: LIST
61753: PUSH
61754: EMPTY
61755: LIST
61756: LIST
61757: LIST
61758: LIST
61759: LIST
61760: LIST
61761: LIST
61762: LIST
61763: LIST
61764: LIST
61765: LIST
61766: LIST
61767: LIST
61768: LIST
61769: LIST
61770: LIST
61771: LIST
61772: LIST
61773: LIST
61774: LIST
61775: LIST
61776: LIST
61777: LIST
61778: LIST
61779: LIST
61780: LIST
61781: LIST
61782: LIST
61783: LIST
61784: LIST
61785: LIST
61786: LIST
61787: LIST
61788: LIST
61789: LIST
61790: LIST
61791: LIST
61792: LIST
61793: LIST
61794: LIST
61795: LIST
61796: LIST
61797: LIST
61798: LIST
61799: LIST
61800: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
61801: LD_ADDR_VAR 0 31
61805: PUSH
61806: LD_INT 0
61808: PUSH
61809: LD_INT 4
61811: PUSH
61812: EMPTY
61813: LIST
61814: LIST
61815: PUSH
61816: LD_INT 0
61818: PUSH
61819: LD_INT 3
61821: PUSH
61822: EMPTY
61823: LIST
61824: LIST
61825: PUSH
61826: LD_INT 1
61828: PUSH
61829: LD_INT 4
61831: PUSH
61832: EMPTY
61833: LIST
61834: LIST
61835: PUSH
61836: LD_INT 1
61838: PUSH
61839: LD_INT 5
61841: PUSH
61842: EMPTY
61843: LIST
61844: LIST
61845: PUSH
61846: LD_INT 0
61848: PUSH
61849: LD_INT 5
61851: PUSH
61852: EMPTY
61853: LIST
61854: LIST
61855: PUSH
61856: LD_INT 1
61858: NEG
61859: PUSH
61860: LD_INT 4
61862: PUSH
61863: EMPTY
61864: LIST
61865: LIST
61866: PUSH
61867: LD_INT 1
61869: NEG
61870: PUSH
61871: LD_INT 3
61873: PUSH
61874: EMPTY
61875: LIST
61876: LIST
61877: PUSH
61878: LD_INT 2
61880: PUSH
61881: LD_INT 5
61883: PUSH
61884: EMPTY
61885: LIST
61886: LIST
61887: PUSH
61888: LD_INT 2
61890: NEG
61891: PUSH
61892: LD_INT 3
61894: PUSH
61895: EMPTY
61896: LIST
61897: LIST
61898: PUSH
61899: LD_INT 3
61901: NEG
61902: PUSH
61903: LD_INT 0
61905: PUSH
61906: EMPTY
61907: LIST
61908: LIST
61909: PUSH
61910: LD_INT 3
61912: NEG
61913: PUSH
61914: LD_INT 1
61916: NEG
61917: PUSH
61918: EMPTY
61919: LIST
61920: LIST
61921: PUSH
61922: LD_INT 2
61924: NEG
61925: PUSH
61926: LD_INT 0
61928: PUSH
61929: EMPTY
61930: LIST
61931: LIST
61932: PUSH
61933: LD_INT 2
61935: NEG
61936: PUSH
61937: LD_INT 1
61939: PUSH
61940: EMPTY
61941: LIST
61942: LIST
61943: PUSH
61944: LD_INT 3
61946: NEG
61947: PUSH
61948: LD_INT 1
61950: PUSH
61951: EMPTY
61952: LIST
61953: LIST
61954: PUSH
61955: LD_INT 4
61957: NEG
61958: PUSH
61959: LD_INT 0
61961: PUSH
61962: EMPTY
61963: LIST
61964: LIST
61965: PUSH
61966: LD_INT 4
61968: NEG
61969: PUSH
61970: LD_INT 1
61972: NEG
61973: PUSH
61974: EMPTY
61975: LIST
61976: LIST
61977: PUSH
61978: LD_INT 4
61980: NEG
61981: PUSH
61982: LD_INT 2
61984: NEG
61985: PUSH
61986: EMPTY
61987: LIST
61988: LIST
61989: PUSH
61990: LD_INT 2
61992: NEG
61993: PUSH
61994: LD_INT 2
61996: PUSH
61997: EMPTY
61998: LIST
61999: LIST
62000: PUSH
62001: LD_INT 4
62003: NEG
62004: PUSH
62005: LD_INT 4
62007: NEG
62008: PUSH
62009: EMPTY
62010: LIST
62011: LIST
62012: PUSH
62013: LD_INT 4
62015: NEG
62016: PUSH
62017: LD_INT 5
62019: NEG
62020: PUSH
62021: EMPTY
62022: LIST
62023: LIST
62024: PUSH
62025: LD_INT 3
62027: NEG
62028: PUSH
62029: LD_INT 4
62031: NEG
62032: PUSH
62033: EMPTY
62034: LIST
62035: LIST
62036: PUSH
62037: LD_INT 3
62039: NEG
62040: PUSH
62041: LD_INT 3
62043: NEG
62044: PUSH
62045: EMPTY
62046: LIST
62047: LIST
62048: PUSH
62049: LD_INT 4
62051: NEG
62052: PUSH
62053: LD_INT 3
62055: NEG
62056: PUSH
62057: EMPTY
62058: LIST
62059: LIST
62060: PUSH
62061: LD_INT 5
62063: NEG
62064: PUSH
62065: LD_INT 4
62067: NEG
62068: PUSH
62069: EMPTY
62070: LIST
62071: LIST
62072: PUSH
62073: LD_INT 5
62075: NEG
62076: PUSH
62077: LD_INT 5
62079: NEG
62080: PUSH
62081: EMPTY
62082: LIST
62083: LIST
62084: PUSH
62085: LD_INT 3
62087: NEG
62088: PUSH
62089: LD_INT 5
62091: NEG
62092: PUSH
62093: EMPTY
62094: LIST
62095: LIST
62096: PUSH
62097: LD_INT 5
62099: NEG
62100: PUSH
62101: LD_INT 3
62103: NEG
62104: PUSH
62105: EMPTY
62106: LIST
62107: LIST
62108: PUSH
62109: LD_INT 0
62111: PUSH
62112: LD_INT 3
62114: NEG
62115: PUSH
62116: EMPTY
62117: LIST
62118: LIST
62119: PUSH
62120: LD_INT 0
62122: PUSH
62123: LD_INT 4
62125: NEG
62126: PUSH
62127: EMPTY
62128: LIST
62129: LIST
62130: PUSH
62131: LD_INT 1
62133: PUSH
62134: LD_INT 3
62136: NEG
62137: PUSH
62138: EMPTY
62139: LIST
62140: LIST
62141: PUSH
62142: LD_INT 1
62144: PUSH
62145: LD_INT 2
62147: NEG
62148: PUSH
62149: EMPTY
62150: LIST
62151: LIST
62152: PUSH
62153: LD_INT 0
62155: PUSH
62156: LD_INT 2
62158: NEG
62159: PUSH
62160: EMPTY
62161: LIST
62162: LIST
62163: PUSH
62164: LD_INT 1
62166: NEG
62167: PUSH
62168: LD_INT 3
62170: NEG
62171: PUSH
62172: EMPTY
62173: LIST
62174: LIST
62175: PUSH
62176: LD_INT 1
62178: NEG
62179: PUSH
62180: LD_INT 4
62182: NEG
62183: PUSH
62184: EMPTY
62185: LIST
62186: LIST
62187: PUSH
62188: LD_INT 2
62190: PUSH
62191: LD_INT 2
62193: NEG
62194: PUSH
62195: EMPTY
62196: LIST
62197: LIST
62198: PUSH
62199: LD_INT 2
62201: NEG
62202: PUSH
62203: LD_INT 4
62205: NEG
62206: PUSH
62207: EMPTY
62208: LIST
62209: LIST
62210: PUSH
62211: LD_INT 4
62213: PUSH
62214: LD_INT 0
62216: PUSH
62217: EMPTY
62218: LIST
62219: LIST
62220: PUSH
62221: LD_INT 4
62223: PUSH
62224: LD_INT 1
62226: NEG
62227: PUSH
62228: EMPTY
62229: LIST
62230: LIST
62231: PUSH
62232: LD_INT 5
62234: PUSH
62235: LD_INT 0
62237: PUSH
62238: EMPTY
62239: LIST
62240: LIST
62241: PUSH
62242: LD_INT 5
62244: PUSH
62245: LD_INT 1
62247: PUSH
62248: EMPTY
62249: LIST
62250: LIST
62251: PUSH
62252: LD_INT 4
62254: PUSH
62255: LD_INT 1
62257: PUSH
62258: EMPTY
62259: LIST
62260: LIST
62261: PUSH
62262: LD_INT 3
62264: PUSH
62265: LD_INT 0
62267: PUSH
62268: EMPTY
62269: LIST
62270: LIST
62271: PUSH
62272: LD_INT 3
62274: PUSH
62275: LD_INT 1
62277: NEG
62278: PUSH
62279: EMPTY
62280: LIST
62281: LIST
62282: PUSH
62283: LD_INT 3
62285: PUSH
62286: LD_INT 2
62288: NEG
62289: PUSH
62290: EMPTY
62291: LIST
62292: LIST
62293: PUSH
62294: LD_INT 5
62296: PUSH
62297: LD_INT 2
62299: PUSH
62300: EMPTY
62301: LIST
62302: LIST
62303: PUSH
62304: EMPTY
62305: LIST
62306: LIST
62307: LIST
62308: LIST
62309: LIST
62310: LIST
62311: LIST
62312: LIST
62313: LIST
62314: LIST
62315: LIST
62316: LIST
62317: LIST
62318: LIST
62319: LIST
62320: LIST
62321: LIST
62322: LIST
62323: LIST
62324: LIST
62325: LIST
62326: LIST
62327: LIST
62328: LIST
62329: LIST
62330: LIST
62331: LIST
62332: LIST
62333: LIST
62334: LIST
62335: LIST
62336: LIST
62337: LIST
62338: LIST
62339: LIST
62340: LIST
62341: LIST
62342: LIST
62343: LIST
62344: LIST
62345: LIST
62346: LIST
62347: LIST
62348: LIST
62349: LIST
62350: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
62351: LD_ADDR_VAR 0 32
62355: PUSH
62356: LD_INT 4
62358: NEG
62359: PUSH
62360: LD_INT 0
62362: PUSH
62363: EMPTY
62364: LIST
62365: LIST
62366: PUSH
62367: LD_INT 4
62369: NEG
62370: PUSH
62371: LD_INT 1
62373: NEG
62374: PUSH
62375: EMPTY
62376: LIST
62377: LIST
62378: PUSH
62379: LD_INT 3
62381: NEG
62382: PUSH
62383: LD_INT 0
62385: PUSH
62386: EMPTY
62387: LIST
62388: LIST
62389: PUSH
62390: LD_INT 3
62392: NEG
62393: PUSH
62394: LD_INT 1
62396: PUSH
62397: EMPTY
62398: LIST
62399: LIST
62400: PUSH
62401: LD_INT 4
62403: NEG
62404: PUSH
62405: LD_INT 1
62407: PUSH
62408: EMPTY
62409: LIST
62410: LIST
62411: PUSH
62412: LD_INT 5
62414: NEG
62415: PUSH
62416: LD_INT 0
62418: PUSH
62419: EMPTY
62420: LIST
62421: LIST
62422: PUSH
62423: LD_INT 5
62425: NEG
62426: PUSH
62427: LD_INT 1
62429: NEG
62430: PUSH
62431: EMPTY
62432: LIST
62433: LIST
62434: PUSH
62435: LD_INT 5
62437: NEG
62438: PUSH
62439: LD_INT 2
62441: NEG
62442: PUSH
62443: EMPTY
62444: LIST
62445: LIST
62446: PUSH
62447: LD_INT 3
62449: NEG
62450: PUSH
62451: LD_INT 2
62453: PUSH
62454: EMPTY
62455: LIST
62456: LIST
62457: PUSH
62458: LD_INT 3
62460: NEG
62461: PUSH
62462: LD_INT 3
62464: NEG
62465: PUSH
62466: EMPTY
62467: LIST
62468: LIST
62469: PUSH
62470: LD_INT 3
62472: NEG
62473: PUSH
62474: LD_INT 4
62476: NEG
62477: PUSH
62478: EMPTY
62479: LIST
62480: LIST
62481: PUSH
62482: LD_INT 2
62484: NEG
62485: PUSH
62486: LD_INT 3
62488: NEG
62489: PUSH
62490: EMPTY
62491: LIST
62492: LIST
62493: PUSH
62494: LD_INT 2
62496: NEG
62497: PUSH
62498: LD_INT 2
62500: NEG
62501: PUSH
62502: EMPTY
62503: LIST
62504: LIST
62505: PUSH
62506: LD_INT 3
62508: NEG
62509: PUSH
62510: LD_INT 2
62512: NEG
62513: PUSH
62514: EMPTY
62515: LIST
62516: LIST
62517: PUSH
62518: LD_INT 4
62520: NEG
62521: PUSH
62522: LD_INT 3
62524: NEG
62525: PUSH
62526: EMPTY
62527: LIST
62528: LIST
62529: PUSH
62530: LD_INT 4
62532: NEG
62533: PUSH
62534: LD_INT 4
62536: NEG
62537: PUSH
62538: EMPTY
62539: LIST
62540: LIST
62541: PUSH
62542: LD_INT 2
62544: NEG
62545: PUSH
62546: LD_INT 4
62548: NEG
62549: PUSH
62550: EMPTY
62551: LIST
62552: LIST
62553: PUSH
62554: LD_INT 4
62556: NEG
62557: PUSH
62558: LD_INT 2
62560: NEG
62561: PUSH
62562: EMPTY
62563: LIST
62564: LIST
62565: PUSH
62566: LD_INT 0
62568: PUSH
62569: LD_INT 4
62571: NEG
62572: PUSH
62573: EMPTY
62574: LIST
62575: LIST
62576: PUSH
62577: LD_INT 0
62579: PUSH
62580: LD_INT 5
62582: NEG
62583: PUSH
62584: EMPTY
62585: LIST
62586: LIST
62587: PUSH
62588: LD_INT 1
62590: PUSH
62591: LD_INT 4
62593: NEG
62594: PUSH
62595: EMPTY
62596: LIST
62597: LIST
62598: PUSH
62599: LD_INT 1
62601: PUSH
62602: LD_INT 3
62604: NEG
62605: PUSH
62606: EMPTY
62607: LIST
62608: LIST
62609: PUSH
62610: LD_INT 0
62612: PUSH
62613: LD_INT 3
62615: NEG
62616: PUSH
62617: EMPTY
62618: LIST
62619: LIST
62620: PUSH
62621: LD_INT 1
62623: NEG
62624: PUSH
62625: LD_INT 4
62627: NEG
62628: PUSH
62629: EMPTY
62630: LIST
62631: LIST
62632: PUSH
62633: LD_INT 1
62635: NEG
62636: PUSH
62637: LD_INT 5
62639: NEG
62640: PUSH
62641: EMPTY
62642: LIST
62643: LIST
62644: PUSH
62645: LD_INT 2
62647: PUSH
62648: LD_INT 3
62650: NEG
62651: PUSH
62652: EMPTY
62653: LIST
62654: LIST
62655: PUSH
62656: LD_INT 2
62658: NEG
62659: PUSH
62660: LD_INT 5
62662: NEG
62663: PUSH
62664: EMPTY
62665: LIST
62666: LIST
62667: PUSH
62668: LD_INT 3
62670: PUSH
62671: LD_INT 0
62673: PUSH
62674: EMPTY
62675: LIST
62676: LIST
62677: PUSH
62678: LD_INT 3
62680: PUSH
62681: LD_INT 1
62683: NEG
62684: PUSH
62685: EMPTY
62686: LIST
62687: LIST
62688: PUSH
62689: LD_INT 4
62691: PUSH
62692: LD_INT 0
62694: PUSH
62695: EMPTY
62696: LIST
62697: LIST
62698: PUSH
62699: LD_INT 4
62701: PUSH
62702: LD_INT 1
62704: PUSH
62705: EMPTY
62706: LIST
62707: LIST
62708: PUSH
62709: LD_INT 3
62711: PUSH
62712: LD_INT 1
62714: PUSH
62715: EMPTY
62716: LIST
62717: LIST
62718: PUSH
62719: LD_INT 2
62721: PUSH
62722: LD_INT 0
62724: PUSH
62725: EMPTY
62726: LIST
62727: LIST
62728: PUSH
62729: LD_INT 2
62731: PUSH
62732: LD_INT 1
62734: NEG
62735: PUSH
62736: EMPTY
62737: LIST
62738: LIST
62739: PUSH
62740: LD_INT 2
62742: PUSH
62743: LD_INT 2
62745: NEG
62746: PUSH
62747: EMPTY
62748: LIST
62749: LIST
62750: PUSH
62751: LD_INT 4
62753: PUSH
62754: LD_INT 2
62756: PUSH
62757: EMPTY
62758: LIST
62759: LIST
62760: PUSH
62761: LD_INT 4
62763: PUSH
62764: LD_INT 4
62766: PUSH
62767: EMPTY
62768: LIST
62769: LIST
62770: PUSH
62771: LD_INT 4
62773: PUSH
62774: LD_INT 3
62776: PUSH
62777: EMPTY
62778: LIST
62779: LIST
62780: PUSH
62781: LD_INT 5
62783: PUSH
62784: LD_INT 4
62786: PUSH
62787: EMPTY
62788: LIST
62789: LIST
62790: PUSH
62791: LD_INT 5
62793: PUSH
62794: LD_INT 5
62796: PUSH
62797: EMPTY
62798: LIST
62799: LIST
62800: PUSH
62801: LD_INT 4
62803: PUSH
62804: LD_INT 5
62806: PUSH
62807: EMPTY
62808: LIST
62809: LIST
62810: PUSH
62811: LD_INT 3
62813: PUSH
62814: LD_INT 4
62816: PUSH
62817: EMPTY
62818: LIST
62819: LIST
62820: PUSH
62821: LD_INT 3
62823: PUSH
62824: LD_INT 3
62826: PUSH
62827: EMPTY
62828: LIST
62829: LIST
62830: PUSH
62831: LD_INT 5
62833: PUSH
62834: LD_INT 3
62836: PUSH
62837: EMPTY
62838: LIST
62839: LIST
62840: PUSH
62841: LD_INT 3
62843: PUSH
62844: LD_INT 5
62846: PUSH
62847: EMPTY
62848: LIST
62849: LIST
62850: PUSH
62851: EMPTY
62852: LIST
62853: LIST
62854: LIST
62855: LIST
62856: LIST
62857: LIST
62858: LIST
62859: LIST
62860: LIST
62861: LIST
62862: LIST
62863: LIST
62864: LIST
62865: LIST
62866: LIST
62867: LIST
62868: LIST
62869: LIST
62870: LIST
62871: LIST
62872: LIST
62873: LIST
62874: LIST
62875: LIST
62876: LIST
62877: LIST
62878: LIST
62879: LIST
62880: LIST
62881: LIST
62882: LIST
62883: LIST
62884: LIST
62885: LIST
62886: LIST
62887: LIST
62888: LIST
62889: LIST
62890: LIST
62891: LIST
62892: LIST
62893: LIST
62894: LIST
62895: LIST
62896: LIST
62897: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
62898: LD_ADDR_VAR 0 33
62902: PUSH
62903: LD_INT 4
62905: NEG
62906: PUSH
62907: LD_INT 4
62909: NEG
62910: PUSH
62911: EMPTY
62912: LIST
62913: LIST
62914: PUSH
62915: LD_INT 4
62917: NEG
62918: PUSH
62919: LD_INT 5
62921: NEG
62922: PUSH
62923: EMPTY
62924: LIST
62925: LIST
62926: PUSH
62927: LD_INT 3
62929: NEG
62930: PUSH
62931: LD_INT 4
62933: NEG
62934: PUSH
62935: EMPTY
62936: LIST
62937: LIST
62938: PUSH
62939: LD_INT 3
62941: NEG
62942: PUSH
62943: LD_INT 3
62945: NEG
62946: PUSH
62947: EMPTY
62948: LIST
62949: LIST
62950: PUSH
62951: LD_INT 4
62953: NEG
62954: PUSH
62955: LD_INT 3
62957: NEG
62958: PUSH
62959: EMPTY
62960: LIST
62961: LIST
62962: PUSH
62963: LD_INT 5
62965: NEG
62966: PUSH
62967: LD_INT 4
62969: NEG
62970: PUSH
62971: EMPTY
62972: LIST
62973: LIST
62974: PUSH
62975: LD_INT 5
62977: NEG
62978: PUSH
62979: LD_INT 5
62981: NEG
62982: PUSH
62983: EMPTY
62984: LIST
62985: LIST
62986: PUSH
62987: LD_INT 3
62989: NEG
62990: PUSH
62991: LD_INT 5
62993: NEG
62994: PUSH
62995: EMPTY
62996: LIST
62997: LIST
62998: PUSH
62999: LD_INT 5
63001: NEG
63002: PUSH
63003: LD_INT 3
63005: NEG
63006: PUSH
63007: EMPTY
63008: LIST
63009: LIST
63010: PUSH
63011: LD_INT 0
63013: PUSH
63014: LD_INT 3
63016: NEG
63017: PUSH
63018: EMPTY
63019: LIST
63020: LIST
63021: PUSH
63022: LD_INT 0
63024: PUSH
63025: LD_INT 4
63027: NEG
63028: PUSH
63029: EMPTY
63030: LIST
63031: LIST
63032: PUSH
63033: LD_INT 1
63035: PUSH
63036: LD_INT 3
63038: NEG
63039: PUSH
63040: EMPTY
63041: LIST
63042: LIST
63043: PUSH
63044: LD_INT 1
63046: PUSH
63047: LD_INT 2
63049: NEG
63050: PUSH
63051: EMPTY
63052: LIST
63053: LIST
63054: PUSH
63055: LD_INT 0
63057: PUSH
63058: LD_INT 2
63060: NEG
63061: PUSH
63062: EMPTY
63063: LIST
63064: LIST
63065: PUSH
63066: LD_INT 1
63068: NEG
63069: PUSH
63070: LD_INT 3
63072: NEG
63073: PUSH
63074: EMPTY
63075: LIST
63076: LIST
63077: PUSH
63078: LD_INT 1
63080: NEG
63081: PUSH
63082: LD_INT 4
63084: NEG
63085: PUSH
63086: EMPTY
63087: LIST
63088: LIST
63089: PUSH
63090: LD_INT 2
63092: PUSH
63093: LD_INT 2
63095: NEG
63096: PUSH
63097: EMPTY
63098: LIST
63099: LIST
63100: PUSH
63101: LD_INT 2
63103: NEG
63104: PUSH
63105: LD_INT 4
63107: NEG
63108: PUSH
63109: EMPTY
63110: LIST
63111: LIST
63112: PUSH
63113: LD_INT 4
63115: PUSH
63116: LD_INT 0
63118: PUSH
63119: EMPTY
63120: LIST
63121: LIST
63122: PUSH
63123: LD_INT 4
63125: PUSH
63126: LD_INT 1
63128: NEG
63129: PUSH
63130: EMPTY
63131: LIST
63132: LIST
63133: PUSH
63134: LD_INT 5
63136: PUSH
63137: LD_INT 0
63139: PUSH
63140: EMPTY
63141: LIST
63142: LIST
63143: PUSH
63144: LD_INT 5
63146: PUSH
63147: LD_INT 1
63149: PUSH
63150: EMPTY
63151: LIST
63152: LIST
63153: PUSH
63154: LD_INT 4
63156: PUSH
63157: LD_INT 1
63159: PUSH
63160: EMPTY
63161: LIST
63162: LIST
63163: PUSH
63164: LD_INT 3
63166: PUSH
63167: LD_INT 0
63169: PUSH
63170: EMPTY
63171: LIST
63172: LIST
63173: PUSH
63174: LD_INT 3
63176: PUSH
63177: LD_INT 1
63179: NEG
63180: PUSH
63181: EMPTY
63182: LIST
63183: LIST
63184: PUSH
63185: LD_INT 3
63187: PUSH
63188: LD_INT 2
63190: NEG
63191: PUSH
63192: EMPTY
63193: LIST
63194: LIST
63195: PUSH
63196: LD_INT 5
63198: PUSH
63199: LD_INT 2
63201: PUSH
63202: EMPTY
63203: LIST
63204: LIST
63205: PUSH
63206: LD_INT 3
63208: PUSH
63209: LD_INT 3
63211: PUSH
63212: EMPTY
63213: LIST
63214: LIST
63215: PUSH
63216: LD_INT 3
63218: PUSH
63219: LD_INT 2
63221: PUSH
63222: EMPTY
63223: LIST
63224: LIST
63225: PUSH
63226: LD_INT 4
63228: PUSH
63229: LD_INT 3
63231: PUSH
63232: EMPTY
63233: LIST
63234: LIST
63235: PUSH
63236: LD_INT 4
63238: PUSH
63239: LD_INT 4
63241: PUSH
63242: EMPTY
63243: LIST
63244: LIST
63245: PUSH
63246: LD_INT 3
63248: PUSH
63249: LD_INT 4
63251: PUSH
63252: EMPTY
63253: LIST
63254: LIST
63255: PUSH
63256: LD_INT 2
63258: PUSH
63259: LD_INT 3
63261: PUSH
63262: EMPTY
63263: LIST
63264: LIST
63265: PUSH
63266: LD_INT 2
63268: PUSH
63269: LD_INT 2
63271: PUSH
63272: EMPTY
63273: LIST
63274: LIST
63275: PUSH
63276: LD_INT 4
63278: PUSH
63279: LD_INT 2
63281: PUSH
63282: EMPTY
63283: LIST
63284: LIST
63285: PUSH
63286: LD_INT 2
63288: PUSH
63289: LD_INT 4
63291: PUSH
63292: EMPTY
63293: LIST
63294: LIST
63295: PUSH
63296: LD_INT 0
63298: PUSH
63299: LD_INT 4
63301: PUSH
63302: EMPTY
63303: LIST
63304: LIST
63305: PUSH
63306: LD_INT 0
63308: PUSH
63309: LD_INT 3
63311: PUSH
63312: EMPTY
63313: LIST
63314: LIST
63315: PUSH
63316: LD_INT 1
63318: PUSH
63319: LD_INT 4
63321: PUSH
63322: EMPTY
63323: LIST
63324: LIST
63325: PUSH
63326: LD_INT 1
63328: PUSH
63329: LD_INT 5
63331: PUSH
63332: EMPTY
63333: LIST
63334: LIST
63335: PUSH
63336: LD_INT 0
63338: PUSH
63339: LD_INT 5
63341: PUSH
63342: EMPTY
63343: LIST
63344: LIST
63345: PUSH
63346: LD_INT 1
63348: NEG
63349: PUSH
63350: LD_INT 4
63352: PUSH
63353: EMPTY
63354: LIST
63355: LIST
63356: PUSH
63357: LD_INT 1
63359: NEG
63360: PUSH
63361: LD_INT 3
63363: PUSH
63364: EMPTY
63365: LIST
63366: LIST
63367: PUSH
63368: LD_INT 2
63370: PUSH
63371: LD_INT 5
63373: PUSH
63374: EMPTY
63375: LIST
63376: LIST
63377: PUSH
63378: LD_INT 2
63380: NEG
63381: PUSH
63382: LD_INT 3
63384: PUSH
63385: EMPTY
63386: LIST
63387: LIST
63388: PUSH
63389: EMPTY
63390: LIST
63391: LIST
63392: LIST
63393: LIST
63394: LIST
63395: LIST
63396: LIST
63397: LIST
63398: LIST
63399: LIST
63400: LIST
63401: LIST
63402: LIST
63403: LIST
63404: LIST
63405: LIST
63406: LIST
63407: LIST
63408: LIST
63409: LIST
63410: LIST
63411: LIST
63412: LIST
63413: LIST
63414: LIST
63415: LIST
63416: LIST
63417: LIST
63418: LIST
63419: LIST
63420: LIST
63421: LIST
63422: LIST
63423: LIST
63424: LIST
63425: LIST
63426: LIST
63427: LIST
63428: LIST
63429: LIST
63430: LIST
63431: LIST
63432: LIST
63433: LIST
63434: LIST
63435: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
63436: LD_ADDR_VAR 0 34
63440: PUSH
63441: LD_INT 0
63443: PUSH
63444: LD_INT 4
63446: NEG
63447: PUSH
63448: EMPTY
63449: LIST
63450: LIST
63451: PUSH
63452: LD_INT 0
63454: PUSH
63455: LD_INT 5
63457: NEG
63458: PUSH
63459: EMPTY
63460: LIST
63461: LIST
63462: PUSH
63463: LD_INT 1
63465: PUSH
63466: LD_INT 4
63468: NEG
63469: PUSH
63470: EMPTY
63471: LIST
63472: LIST
63473: PUSH
63474: LD_INT 1
63476: PUSH
63477: LD_INT 3
63479: NEG
63480: PUSH
63481: EMPTY
63482: LIST
63483: LIST
63484: PUSH
63485: LD_INT 0
63487: PUSH
63488: LD_INT 3
63490: NEG
63491: PUSH
63492: EMPTY
63493: LIST
63494: LIST
63495: PUSH
63496: LD_INT 1
63498: NEG
63499: PUSH
63500: LD_INT 4
63502: NEG
63503: PUSH
63504: EMPTY
63505: LIST
63506: LIST
63507: PUSH
63508: LD_INT 1
63510: NEG
63511: PUSH
63512: LD_INT 5
63514: NEG
63515: PUSH
63516: EMPTY
63517: LIST
63518: LIST
63519: PUSH
63520: LD_INT 2
63522: PUSH
63523: LD_INT 3
63525: NEG
63526: PUSH
63527: EMPTY
63528: LIST
63529: LIST
63530: PUSH
63531: LD_INT 2
63533: NEG
63534: PUSH
63535: LD_INT 5
63537: NEG
63538: PUSH
63539: EMPTY
63540: LIST
63541: LIST
63542: PUSH
63543: LD_INT 3
63545: PUSH
63546: LD_INT 0
63548: PUSH
63549: EMPTY
63550: LIST
63551: LIST
63552: PUSH
63553: LD_INT 3
63555: PUSH
63556: LD_INT 1
63558: NEG
63559: PUSH
63560: EMPTY
63561: LIST
63562: LIST
63563: PUSH
63564: LD_INT 4
63566: PUSH
63567: LD_INT 0
63569: PUSH
63570: EMPTY
63571: LIST
63572: LIST
63573: PUSH
63574: LD_INT 4
63576: PUSH
63577: LD_INT 1
63579: PUSH
63580: EMPTY
63581: LIST
63582: LIST
63583: PUSH
63584: LD_INT 3
63586: PUSH
63587: LD_INT 1
63589: PUSH
63590: EMPTY
63591: LIST
63592: LIST
63593: PUSH
63594: LD_INT 2
63596: PUSH
63597: LD_INT 0
63599: PUSH
63600: EMPTY
63601: LIST
63602: LIST
63603: PUSH
63604: LD_INT 2
63606: PUSH
63607: LD_INT 1
63609: NEG
63610: PUSH
63611: EMPTY
63612: LIST
63613: LIST
63614: PUSH
63615: LD_INT 2
63617: PUSH
63618: LD_INT 2
63620: NEG
63621: PUSH
63622: EMPTY
63623: LIST
63624: LIST
63625: PUSH
63626: LD_INT 4
63628: PUSH
63629: LD_INT 2
63631: PUSH
63632: EMPTY
63633: LIST
63634: LIST
63635: PUSH
63636: LD_INT 4
63638: PUSH
63639: LD_INT 4
63641: PUSH
63642: EMPTY
63643: LIST
63644: LIST
63645: PUSH
63646: LD_INT 4
63648: PUSH
63649: LD_INT 3
63651: PUSH
63652: EMPTY
63653: LIST
63654: LIST
63655: PUSH
63656: LD_INT 5
63658: PUSH
63659: LD_INT 4
63661: PUSH
63662: EMPTY
63663: LIST
63664: LIST
63665: PUSH
63666: LD_INT 5
63668: PUSH
63669: LD_INT 5
63671: PUSH
63672: EMPTY
63673: LIST
63674: LIST
63675: PUSH
63676: LD_INT 4
63678: PUSH
63679: LD_INT 5
63681: PUSH
63682: EMPTY
63683: LIST
63684: LIST
63685: PUSH
63686: LD_INT 3
63688: PUSH
63689: LD_INT 4
63691: PUSH
63692: EMPTY
63693: LIST
63694: LIST
63695: PUSH
63696: LD_INT 3
63698: PUSH
63699: LD_INT 3
63701: PUSH
63702: EMPTY
63703: LIST
63704: LIST
63705: PUSH
63706: LD_INT 5
63708: PUSH
63709: LD_INT 3
63711: PUSH
63712: EMPTY
63713: LIST
63714: LIST
63715: PUSH
63716: LD_INT 3
63718: PUSH
63719: LD_INT 5
63721: PUSH
63722: EMPTY
63723: LIST
63724: LIST
63725: PUSH
63726: LD_INT 0
63728: PUSH
63729: LD_INT 3
63731: PUSH
63732: EMPTY
63733: LIST
63734: LIST
63735: PUSH
63736: LD_INT 0
63738: PUSH
63739: LD_INT 2
63741: PUSH
63742: EMPTY
63743: LIST
63744: LIST
63745: PUSH
63746: LD_INT 1
63748: PUSH
63749: LD_INT 3
63751: PUSH
63752: EMPTY
63753: LIST
63754: LIST
63755: PUSH
63756: LD_INT 1
63758: PUSH
63759: LD_INT 4
63761: PUSH
63762: EMPTY
63763: LIST
63764: LIST
63765: PUSH
63766: LD_INT 0
63768: PUSH
63769: LD_INT 4
63771: PUSH
63772: EMPTY
63773: LIST
63774: LIST
63775: PUSH
63776: LD_INT 1
63778: NEG
63779: PUSH
63780: LD_INT 3
63782: PUSH
63783: EMPTY
63784: LIST
63785: LIST
63786: PUSH
63787: LD_INT 1
63789: NEG
63790: PUSH
63791: LD_INT 2
63793: PUSH
63794: EMPTY
63795: LIST
63796: LIST
63797: PUSH
63798: LD_INT 2
63800: PUSH
63801: LD_INT 4
63803: PUSH
63804: EMPTY
63805: LIST
63806: LIST
63807: PUSH
63808: LD_INT 2
63810: NEG
63811: PUSH
63812: LD_INT 2
63814: PUSH
63815: EMPTY
63816: LIST
63817: LIST
63818: PUSH
63819: LD_INT 4
63821: NEG
63822: PUSH
63823: LD_INT 0
63825: PUSH
63826: EMPTY
63827: LIST
63828: LIST
63829: PUSH
63830: LD_INT 4
63832: NEG
63833: PUSH
63834: LD_INT 1
63836: NEG
63837: PUSH
63838: EMPTY
63839: LIST
63840: LIST
63841: PUSH
63842: LD_INT 3
63844: NEG
63845: PUSH
63846: LD_INT 0
63848: PUSH
63849: EMPTY
63850: LIST
63851: LIST
63852: PUSH
63853: LD_INT 3
63855: NEG
63856: PUSH
63857: LD_INT 1
63859: PUSH
63860: EMPTY
63861: LIST
63862: LIST
63863: PUSH
63864: LD_INT 4
63866: NEG
63867: PUSH
63868: LD_INT 1
63870: PUSH
63871: EMPTY
63872: LIST
63873: LIST
63874: PUSH
63875: LD_INT 5
63877: NEG
63878: PUSH
63879: LD_INT 0
63881: PUSH
63882: EMPTY
63883: LIST
63884: LIST
63885: PUSH
63886: LD_INT 5
63888: NEG
63889: PUSH
63890: LD_INT 1
63892: NEG
63893: PUSH
63894: EMPTY
63895: LIST
63896: LIST
63897: PUSH
63898: LD_INT 5
63900: NEG
63901: PUSH
63902: LD_INT 2
63904: NEG
63905: PUSH
63906: EMPTY
63907: LIST
63908: LIST
63909: PUSH
63910: LD_INT 3
63912: NEG
63913: PUSH
63914: LD_INT 2
63916: PUSH
63917: EMPTY
63918: LIST
63919: LIST
63920: PUSH
63921: EMPTY
63922: LIST
63923: LIST
63924: LIST
63925: LIST
63926: LIST
63927: LIST
63928: LIST
63929: LIST
63930: LIST
63931: LIST
63932: LIST
63933: LIST
63934: LIST
63935: LIST
63936: LIST
63937: LIST
63938: LIST
63939: LIST
63940: LIST
63941: LIST
63942: LIST
63943: LIST
63944: LIST
63945: LIST
63946: LIST
63947: LIST
63948: LIST
63949: LIST
63950: LIST
63951: LIST
63952: LIST
63953: LIST
63954: LIST
63955: LIST
63956: LIST
63957: LIST
63958: LIST
63959: LIST
63960: LIST
63961: LIST
63962: LIST
63963: LIST
63964: LIST
63965: LIST
63966: LIST
63967: ST_TO_ADDR
// end ; end ;
63968: GO 63971
63970: POP
// case btype of b_depot , b_warehouse :
63971: LD_VAR 0 1
63975: PUSH
63976: LD_INT 0
63978: DOUBLE
63979: EQUAL
63980: IFTRUE 63990
63982: LD_INT 1
63984: DOUBLE
63985: EQUAL
63986: IFTRUE 63990
63988: GO 64191
63990: POP
// case nation of nation_american :
63991: LD_VAR 0 5
63995: PUSH
63996: LD_INT 1
63998: DOUBLE
63999: EQUAL
64000: IFTRUE 64004
64002: GO 64060
64004: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
64005: LD_ADDR_VAR 0 9
64009: PUSH
64010: LD_VAR 0 11
64014: PUSH
64015: LD_VAR 0 12
64019: PUSH
64020: LD_VAR 0 13
64024: PUSH
64025: LD_VAR 0 14
64029: PUSH
64030: LD_VAR 0 15
64034: PUSH
64035: LD_VAR 0 16
64039: PUSH
64040: EMPTY
64041: LIST
64042: LIST
64043: LIST
64044: LIST
64045: LIST
64046: LIST
64047: PUSH
64048: LD_VAR 0 4
64052: PUSH
64053: LD_INT 1
64055: PLUS
64056: ARRAY
64057: ST_TO_ADDR
64058: GO 64189
64060: LD_INT 2
64062: DOUBLE
64063: EQUAL
64064: IFTRUE 64068
64066: GO 64124
64068: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
64069: LD_ADDR_VAR 0 9
64073: PUSH
64074: LD_VAR 0 17
64078: PUSH
64079: LD_VAR 0 18
64083: PUSH
64084: LD_VAR 0 19
64088: PUSH
64089: LD_VAR 0 20
64093: PUSH
64094: LD_VAR 0 21
64098: PUSH
64099: LD_VAR 0 22
64103: PUSH
64104: EMPTY
64105: LIST
64106: LIST
64107: LIST
64108: LIST
64109: LIST
64110: LIST
64111: PUSH
64112: LD_VAR 0 4
64116: PUSH
64117: LD_INT 1
64119: PLUS
64120: ARRAY
64121: ST_TO_ADDR
64122: GO 64189
64124: LD_INT 3
64126: DOUBLE
64127: EQUAL
64128: IFTRUE 64132
64130: GO 64188
64132: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
64133: LD_ADDR_VAR 0 9
64137: PUSH
64138: LD_VAR 0 23
64142: PUSH
64143: LD_VAR 0 24
64147: PUSH
64148: LD_VAR 0 25
64152: PUSH
64153: LD_VAR 0 26
64157: PUSH
64158: LD_VAR 0 27
64162: PUSH
64163: LD_VAR 0 28
64167: PUSH
64168: EMPTY
64169: LIST
64170: LIST
64171: LIST
64172: LIST
64173: LIST
64174: LIST
64175: PUSH
64176: LD_VAR 0 4
64180: PUSH
64181: LD_INT 1
64183: PLUS
64184: ARRAY
64185: ST_TO_ADDR
64186: GO 64189
64188: POP
64189: GO 64744
64191: LD_INT 2
64193: DOUBLE
64194: EQUAL
64195: IFTRUE 64205
64197: LD_INT 3
64199: DOUBLE
64200: EQUAL
64201: IFTRUE 64205
64203: GO 64261
64205: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
64206: LD_ADDR_VAR 0 9
64210: PUSH
64211: LD_VAR 0 29
64215: PUSH
64216: LD_VAR 0 30
64220: PUSH
64221: LD_VAR 0 31
64225: PUSH
64226: LD_VAR 0 32
64230: PUSH
64231: LD_VAR 0 33
64235: PUSH
64236: LD_VAR 0 34
64240: PUSH
64241: EMPTY
64242: LIST
64243: LIST
64244: LIST
64245: LIST
64246: LIST
64247: LIST
64248: PUSH
64249: LD_VAR 0 4
64253: PUSH
64254: LD_INT 1
64256: PLUS
64257: ARRAY
64258: ST_TO_ADDR
64259: GO 64744
64261: LD_INT 16
64263: DOUBLE
64264: EQUAL
64265: IFTRUE 64323
64267: LD_INT 17
64269: DOUBLE
64270: EQUAL
64271: IFTRUE 64323
64273: LD_INT 18
64275: DOUBLE
64276: EQUAL
64277: IFTRUE 64323
64279: LD_INT 19
64281: DOUBLE
64282: EQUAL
64283: IFTRUE 64323
64285: LD_INT 22
64287: DOUBLE
64288: EQUAL
64289: IFTRUE 64323
64291: LD_INT 20
64293: DOUBLE
64294: EQUAL
64295: IFTRUE 64323
64297: LD_INT 21
64299: DOUBLE
64300: EQUAL
64301: IFTRUE 64323
64303: LD_INT 23
64305: DOUBLE
64306: EQUAL
64307: IFTRUE 64323
64309: LD_INT 24
64311: DOUBLE
64312: EQUAL
64313: IFTRUE 64323
64315: LD_INT 25
64317: DOUBLE
64318: EQUAL
64319: IFTRUE 64323
64321: GO 64379
64323: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
64324: LD_ADDR_VAR 0 9
64328: PUSH
64329: LD_VAR 0 35
64333: PUSH
64334: LD_VAR 0 36
64338: PUSH
64339: LD_VAR 0 37
64343: PUSH
64344: LD_VAR 0 38
64348: PUSH
64349: LD_VAR 0 39
64353: PUSH
64354: LD_VAR 0 40
64358: PUSH
64359: EMPTY
64360: LIST
64361: LIST
64362: LIST
64363: LIST
64364: LIST
64365: LIST
64366: PUSH
64367: LD_VAR 0 4
64371: PUSH
64372: LD_INT 1
64374: PLUS
64375: ARRAY
64376: ST_TO_ADDR
64377: GO 64744
64379: LD_INT 6
64381: DOUBLE
64382: EQUAL
64383: IFTRUE 64435
64385: LD_INT 7
64387: DOUBLE
64388: EQUAL
64389: IFTRUE 64435
64391: LD_INT 8
64393: DOUBLE
64394: EQUAL
64395: IFTRUE 64435
64397: LD_INT 13
64399: DOUBLE
64400: EQUAL
64401: IFTRUE 64435
64403: LD_INT 12
64405: DOUBLE
64406: EQUAL
64407: IFTRUE 64435
64409: LD_INT 15
64411: DOUBLE
64412: EQUAL
64413: IFTRUE 64435
64415: LD_INT 11
64417: DOUBLE
64418: EQUAL
64419: IFTRUE 64435
64421: LD_INT 14
64423: DOUBLE
64424: EQUAL
64425: IFTRUE 64435
64427: LD_INT 10
64429: DOUBLE
64430: EQUAL
64431: IFTRUE 64435
64433: GO 64491
64435: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
64436: LD_ADDR_VAR 0 9
64440: PUSH
64441: LD_VAR 0 41
64445: PUSH
64446: LD_VAR 0 42
64450: PUSH
64451: LD_VAR 0 43
64455: PUSH
64456: LD_VAR 0 44
64460: PUSH
64461: LD_VAR 0 45
64465: PUSH
64466: LD_VAR 0 46
64470: PUSH
64471: EMPTY
64472: LIST
64473: LIST
64474: LIST
64475: LIST
64476: LIST
64477: LIST
64478: PUSH
64479: LD_VAR 0 4
64483: PUSH
64484: LD_INT 1
64486: PLUS
64487: ARRAY
64488: ST_TO_ADDR
64489: GO 64744
64491: LD_INT 36
64493: DOUBLE
64494: EQUAL
64495: IFTRUE 64499
64497: GO 64555
64499: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
64500: LD_ADDR_VAR 0 9
64504: PUSH
64505: LD_VAR 0 47
64509: PUSH
64510: LD_VAR 0 48
64514: PUSH
64515: LD_VAR 0 49
64519: PUSH
64520: LD_VAR 0 50
64524: PUSH
64525: LD_VAR 0 51
64529: PUSH
64530: LD_VAR 0 52
64534: PUSH
64535: EMPTY
64536: LIST
64537: LIST
64538: LIST
64539: LIST
64540: LIST
64541: LIST
64542: PUSH
64543: LD_VAR 0 4
64547: PUSH
64548: LD_INT 1
64550: PLUS
64551: ARRAY
64552: ST_TO_ADDR
64553: GO 64744
64555: LD_INT 4
64557: DOUBLE
64558: EQUAL
64559: IFTRUE 64581
64561: LD_INT 5
64563: DOUBLE
64564: EQUAL
64565: IFTRUE 64581
64567: LD_INT 34
64569: DOUBLE
64570: EQUAL
64571: IFTRUE 64581
64573: LD_INT 37
64575: DOUBLE
64576: EQUAL
64577: IFTRUE 64581
64579: GO 64637
64581: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
64582: LD_ADDR_VAR 0 9
64586: PUSH
64587: LD_VAR 0 53
64591: PUSH
64592: LD_VAR 0 54
64596: PUSH
64597: LD_VAR 0 55
64601: PUSH
64602: LD_VAR 0 56
64606: PUSH
64607: LD_VAR 0 57
64611: PUSH
64612: LD_VAR 0 58
64616: PUSH
64617: EMPTY
64618: LIST
64619: LIST
64620: LIST
64621: LIST
64622: LIST
64623: LIST
64624: PUSH
64625: LD_VAR 0 4
64629: PUSH
64630: LD_INT 1
64632: PLUS
64633: ARRAY
64634: ST_TO_ADDR
64635: GO 64744
64637: LD_INT 31
64639: DOUBLE
64640: EQUAL
64641: IFTRUE 64687
64643: LD_INT 32
64645: DOUBLE
64646: EQUAL
64647: IFTRUE 64687
64649: LD_INT 33
64651: DOUBLE
64652: EQUAL
64653: IFTRUE 64687
64655: LD_INT 27
64657: DOUBLE
64658: EQUAL
64659: IFTRUE 64687
64661: LD_INT 26
64663: DOUBLE
64664: EQUAL
64665: IFTRUE 64687
64667: LD_INT 28
64669: DOUBLE
64670: EQUAL
64671: IFTRUE 64687
64673: LD_INT 29
64675: DOUBLE
64676: EQUAL
64677: IFTRUE 64687
64679: LD_INT 30
64681: DOUBLE
64682: EQUAL
64683: IFTRUE 64687
64685: GO 64743
64687: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
64688: LD_ADDR_VAR 0 9
64692: PUSH
64693: LD_VAR 0 59
64697: PUSH
64698: LD_VAR 0 60
64702: PUSH
64703: LD_VAR 0 61
64707: PUSH
64708: LD_VAR 0 62
64712: PUSH
64713: LD_VAR 0 63
64717: PUSH
64718: LD_VAR 0 64
64722: PUSH
64723: EMPTY
64724: LIST
64725: LIST
64726: LIST
64727: LIST
64728: LIST
64729: LIST
64730: PUSH
64731: LD_VAR 0 4
64735: PUSH
64736: LD_INT 1
64738: PLUS
64739: ARRAY
64740: ST_TO_ADDR
64741: GO 64744
64743: POP
// temp_list2 = [ ] ;
64744: LD_ADDR_VAR 0 10
64748: PUSH
64749: EMPTY
64750: ST_TO_ADDR
// for i in temp_list do
64751: LD_ADDR_VAR 0 8
64755: PUSH
64756: LD_VAR 0 9
64760: PUSH
64761: FOR_IN
64762: IFFALSE 64814
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
64764: LD_ADDR_VAR 0 10
64768: PUSH
64769: LD_VAR 0 10
64773: PUSH
64774: LD_VAR 0 8
64778: PUSH
64779: LD_INT 1
64781: ARRAY
64782: PUSH
64783: LD_VAR 0 2
64787: PLUS
64788: PUSH
64789: LD_VAR 0 8
64793: PUSH
64794: LD_INT 2
64796: ARRAY
64797: PUSH
64798: LD_VAR 0 3
64802: PLUS
64803: PUSH
64804: EMPTY
64805: LIST
64806: LIST
64807: PUSH
64808: EMPTY
64809: LIST
64810: ADD
64811: ST_TO_ADDR
64812: GO 64761
64814: POP
64815: POP
// result = temp_list2 ;
64816: LD_ADDR_VAR 0 7
64820: PUSH
64821: LD_VAR 0 10
64825: ST_TO_ADDR
// end ;
64826: LD_VAR 0 7
64830: RET
// export function EnemyInRange ( unit , dist ) ; begin
64831: LD_INT 0
64833: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
64834: LD_ADDR_VAR 0 3
64838: PUSH
64839: LD_VAR 0 1
64843: PPUSH
64844: CALL_OW 255
64848: PPUSH
64849: LD_VAR 0 1
64853: PPUSH
64854: CALL_OW 250
64858: PPUSH
64859: LD_VAR 0 1
64863: PPUSH
64864: CALL_OW 251
64868: PPUSH
64869: LD_VAR 0 2
64873: PPUSH
64874: CALL 38233 0 4
64878: PUSH
64879: LD_INT 4
64881: ARRAY
64882: ST_TO_ADDR
// end ;
64883: LD_VAR 0 3
64887: RET
// export function PlayerSeeMe ( unit ) ; begin
64888: LD_INT 0
64890: PPUSH
// result := See ( your_side , unit ) ;
64891: LD_ADDR_VAR 0 2
64895: PUSH
64896: LD_OWVAR 2
64900: PPUSH
64901: LD_VAR 0 1
64905: PPUSH
64906: CALL_OW 292
64910: ST_TO_ADDR
// end ;
64911: LD_VAR 0 2
64915: RET
// export function ReverseDir ( unit ) ; begin
64916: LD_INT 0
64918: PPUSH
// if not unit then
64919: LD_VAR 0 1
64923: NOT
64924: IFFALSE 64928
// exit ;
64926: GO 64951
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
64928: LD_ADDR_VAR 0 2
64932: PUSH
64933: LD_VAR 0 1
64937: PPUSH
64938: CALL_OW 254
64942: PUSH
64943: LD_INT 3
64945: PLUS
64946: PUSH
64947: LD_INT 6
64949: MOD
64950: ST_TO_ADDR
// end ;
64951: LD_VAR 0 2
64955: RET
// export function ReverseArray ( array ) ; var i ; begin
64956: LD_INT 0
64958: PPUSH
64959: PPUSH
// if not array then
64960: LD_VAR 0 1
64964: NOT
64965: IFFALSE 64969
// exit ;
64967: GO 65024
// result := [ ] ;
64969: LD_ADDR_VAR 0 2
64973: PUSH
64974: EMPTY
64975: ST_TO_ADDR
// for i := array downto 1 do
64976: LD_ADDR_VAR 0 3
64980: PUSH
64981: DOUBLE
64982: LD_VAR 0 1
64986: INC
64987: ST_TO_ADDR
64988: LD_INT 1
64990: PUSH
64991: FOR_DOWNTO
64992: IFFALSE 65022
// result := Join ( result , array [ i ] ) ;
64994: LD_ADDR_VAR 0 2
64998: PUSH
64999: LD_VAR 0 2
65003: PPUSH
65004: LD_VAR 0 1
65008: PUSH
65009: LD_VAR 0 3
65013: ARRAY
65014: PPUSH
65015: CALL 69649 0 2
65019: ST_TO_ADDR
65020: GO 64991
65022: POP
65023: POP
// end ;
65024: LD_VAR 0 2
65028: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
65029: LD_INT 0
65031: PPUSH
65032: PPUSH
65033: PPUSH
65034: PPUSH
65035: PPUSH
65036: PPUSH
// if not unit or not hexes then
65037: LD_VAR 0 1
65041: NOT
65042: PUSH
65043: LD_VAR 0 2
65047: NOT
65048: OR
65049: IFFALSE 65053
// exit ;
65051: GO 65176
// dist := 9999 ;
65053: LD_ADDR_VAR 0 5
65057: PUSH
65058: LD_INT 9999
65060: ST_TO_ADDR
// for i = 1 to hexes do
65061: LD_ADDR_VAR 0 4
65065: PUSH
65066: DOUBLE
65067: LD_INT 1
65069: DEC
65070: ST_TO_ADDR
65071: LD_VAR 0 2
65075: PUSH
65076: FOR_TO
65077: IFFALSE 65164
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
65079: LD_ADDR_VAR 0 6
65083: PUSH
65084: LD_VAR 0 1
65088: PPUSH
65089: LD_VAR 0 2
65093: PUSH
65094: LD_VAR 0 4
65098: ARRAY
65099: PUSH
65100: LD_INT 1
65102: ARRAY
65103: PPUSH
65104: LD_VAR 0 2
65108: PUSH
65109: LD_VAR 0 4
65113: ARRAY
65114: PUSH
65115: LD_INT 2
65117: ARRAY
65118: PPUSH
65119: CALL_OW 297
65123: ST_TO_ADDR
// if tdist < dist then
65124: LD_VAR 0 6
65128: PUSH
65129: LD_VAR 0 5
65133: LESS
65134: IFFALSE 65162
// begin hex := hexes [ i ] ;
65136: LD_ADDR_VAR 0 8
65140: PUSH
65141: LD_VAR 0 2
65145: PUSH
65146: LD_VAR 0 4
65150: ARRAY
65151: ST_TO_ADDR
// dist := tdist ;
65152: LD_ADDR_VAR 0 5
65156: PUSH
65157: LD_VAR 0 6
65161: ST_TO_ADDR
// end ; end ;
65162: GO 65076
65164: POP
65165: POP
// result := hex ;
65166: LD_ADDR_VAR 0 3
65170: PUSH
65171: LD_VAR 0 8
65175: ST_TO_ADDR
// end ;
65176: LD_VAR 0 3
65180: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
65181: LD_INT 0
65183: PPUSH
65184: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
65185: LD_VAR 0 1
65189: NOT
65190: PUSH
65191: LD_VAR 0 1
65195: PUSH
65196: LD_INT 21
65198: PUSH
65199: LD_INT 2
65201: PUSH
65202: EMPTY
65203: LIST
65204: LIST
65205: PUSH
65206: LD_INT 23
65208: PUSH
65209: LD_INT 2
65211: PUSH
65212: EMPTY
65213: LIST
65214: LIST
65215: PUSH
65216: EMPTY
65217: LIST
65218: LIST
65219: PPUSH
65220: CALL_OW 69
65224: IN
65225: NOT
65226: OR
65227: IFFALSE 65231
// exit ;
65229: GO 65278
// for i = 1 to 3 do
65231: LD_ADDR_VAR 0 3
65235: PUSH
65236: DOUBLE
65237: LD_INT 1
65239: DEC
65240: ST_TO_ADDR
65241: LD_INT 3
65243: PUSH
65244: FOR_TO
65245: IFFALSE 65276
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
65247: LD_VAR 0 1
65251: PPUSH
65252: CALL_OW 250
65256: PPUSH
65257: LD_VAR 0 1
65261: PPUSH
65262: CALL_OW 251
65266: PPUSH
65267: LD_INT 1
65269: PPUSH
65270: CALL_OW 453
65274: GO 65244
65276: POP
65277: POP
// end ;
65278: LD_VAR 0 2
65282: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
65283: LD_INT 0
65285: PPUSH
65286: PPUSH
65287: PPUSH
65288: PPUSH
65289: PPUSH
65290: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
65291: LD_VAR 0 1
65295: NOT
65296: PUSH
65297: LD_VAR 0 2
65301: NOT
65302: OR
65303: PUSH
65304: LD_VAR 0 1
65308: PPUSH
65309: CALL_OW 314
65313: OR
65314: IFFALSE 65318
// exit ;
65316: GO 65759
// x := GetX ( enemy_unit ) ;
65318: LD_ADDR_VAR 0 7
65322: PUSH
65323: LD_VAR 0 2
65327: PPUSH
65328: CALL_OW 250
65332: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
65333: LD_ADDR_VAR 0 8
65337: PUSH
65338: LD_VAR 0 2
65342: PPUSH
65343: CALL_OW 251
65347: ST_TO_ADDR
// if not x or not y then
65348: LD_VAR 0 7
65352: NOT
65353: PUSH
65354: LD_VAR 0 8
65358: NOT
65359: OR
65360: IFFALSE 65364
// exit ;
65362: GO 65759
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
65364: LD_ADDR_VAR 0 6
65368: PUSH
65369: LD_VAR 0 7
65373: PPUSH
65374: LD_INT 0
65376: PPUSH
65377: LD_INT 4
65379: PPUSH
65380: CALL_OW 272
65384: PUSH
65385: LD_VAR 0 8
65389: PPUSH
65390: LD_INT 0
65392: PPUSH
65393: LD_INT 4
65395: PPUSH
65396: CALL_OW 273
65400: PUSH
65401: EMPTY
65402: LIST
65403: LIST
65404: PUSH
65405: LD_VAR 0 7
65409: PPUSH
65410: LD_INT 1
65412: PPUSH
65413: LD_INT 4
65415: PPUSH
65416: CALL_OW 272
65420: PUSH
65421: LD_VAR 0 8
65425: PPUSH
65426: LD_INT 1
65428: PPUSH
65429: LD_INT 4
65431: PPUSH
65432: CALL_OW 273
65436: PUSH
65437: EMPTY
65438: LIST
65439: LIST
65440: PUSH
65441: LD_VAR 0 7
65445: PPUSH
65446: LD_INT 2
65448: PPUSH
65449: LD_INT 4
65451: PPUSH
65452: CALL_OW 272
65456: PUSH
65457: LD_VAR 0 8
65461: PPUSH
65462: LD_INT 2
65464: PPUSH
65465: LD_INT 4
65467: PPUSH
65468: CALL_OW 273
65472: PUSH
65473: EMPTY
65474: LIST
65475: LIST
65476: PUSH
65477: LD_VAR 0 7
65481: PPUSH
65482: LD_INT 3
65484: PPUSH
65485: LD_INT 4
65487: PPUSH
65488: CALL_OW 272
65492: PUSH
65493: LD_VAR 0 8
65497: PPUSH
65498: LD_INT 3
65500: PPUSH
65501: LD_INT 4
65503: PPUSH
65504: CALL_OW 273
65508: PUSH
65509: EMPTY
65510: LIST
65511: LIST
65512: PUSH
65513: LD_VAR 0 7
65517: PPUSH
65518: LD_INT 4
65520: PPUSH
65521: LD_INT 4
65523: PPUSH
65524: CALL_OW 272
65528: PUSH
65529: LD_VAR 0 8
65533: PPUSH
65534: LD_INT 4
65536: PPUSH
65537: LD_INT 4
65539: PPUSH
65540: CALL_OW 273
65544: PUSH
65545: EMPTY
65546: LIST
65547: LIST
65548: PUSH
65549: LD_VAR 0 7
65553: PPUSH
65554: LD_INT 5
65556: PPUSH
65557: LD_INT 4
65559: PPUSH
65560: CALL_OW 272
65564: PUSH
65565: LD_VAR 0 8
65569: PPUSH
65570: LD_INT 5
65572: PPUSH
65573: LD_INT 4
65575: PPUSH
65576: CALL_OW 273
65580: PUSH
65581: EMPTY
65582: LIST
65583: LIST
65584: PUSH
65585: EMPTY
65586: LIST
65587: LIST
65588: LIST
65589: LIST
65590: LIST
65591: LIST
65592: ST_TO_ADDR
// for i = tmp downto 1 do
65593: LD_ADDR_VAR 0 4
65597: PUSH
65598: DOUBLE
65599: LD_VAR 0 6
65603: INC
65604: ST_TO_ADDR
65605: LD_INT 1
65607: PUSH
65608: FOR_DOWNTO
65609: IFFALSE 65710
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
65611: LD_VAR 0 6
65615: PUSH
65616: LD_VAR 0 4
65620: ARRAY
65621: PUSH
65622: LD_INT 1
65624: ARRAY
65625: PPUSH
65626: LD_VAR 0 6
65630: PUSH
65631: LD_VAR 0 4
65635: ARRAY
65636: PUSH
65637: LD_INT 2
65639: ARRAY
65640: PPUSH
65641: CALL_OW 488
65645: NOT
65646: PUSH
65647: LD_VAR 0 6
65651: PUSH
65652: LD_VAR 0 4
65656: ARRAY
65657: PUSH
65658: LD_INT 1
65660: ARRAY
65661: PPUSH
65662: LD_VAR 0 6
65666: PUSH
65667: LD_VAR 0 4
65671: ARRAY
65672: PUSH
65673: LD_INT 2
65675: ARRAY
65676: PPUSH
65677: CALL_OW 428
65681: PUSH
65682: LD_INT 0
65684: NONEQUAL
65685: OR
65686: IFFALSE 65708
// tmp := Delete ( tmp , i ) ;
65688: LD_ADDR_VAR 0 6
65692: PUSH
65693: LD_VAR 0 6
65697: PPUSH
65698: LD_VAR 0 4
65702: PPUSH
65703: CALL_OW 3
65707: ST_TO_ADDR
65708: GO 65608
65710: POP
65711: POP
// j := GetClosestHex ( unit , tmp ) ;
65712: LD_ADDR_VAR 0 5
65716: PUSH
65717: LD_VAR 0 1
65721: PPUSH
65722: LD_VAR 0 6
65726: PPUSH
65727: CALL 65029 0 2
65731: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
65732: LD_VAR 0 1
65736: PPUSH
65737: LD_VAR 0 5
65741: PUSH
65742: LD_INT 1
65744: ARRAY
65745: PPUSH
65746: LD_VAR 0 5
65750: PUSH
65751: LD_INT 2
65753: ARRAY
65754: PPUSH
65755: CALL_OW 111
// end ;
65759: LD_VAR 0 3
65763: RET
// export function PrepareApemanSoldier ( ) ; begin
65764: LD_INT 0
65766: PPUSH
// uc_nation := 0 ;
65767: LD_ADDR_OWVAR 21
65771: PUSH
65772: LD_INT 0
65774: ST_TO_ADDR
// hc_sex := sex_male ;
65775: LD_ADDR_OWVAR 27
65779: PUSH
65780: LD_INT 1
65782: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
65783: LD_ADDR_OWVAR 28
65787: PUSH
65788: LD_INT 15
65790: ST_TO_ADDR
// hc_gallery :=  ;
65791: LD_ADDR_OWVAR 33
65795: PUSH
65796: LD_STRING 
65798: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
65799: LD_ADDR_OWVAR 31
65803: PUSH
65804: LD_INT 0
65806: PPUSH
65807: LD_INT 3
65809: PPUSH
65810: CALL_OW 12
65814: PUSH
65815: LD_INT 0
65817: PPUSH
65818: LD_INT 3
65820: PPUSH
65821: CALL_OW 12
65825: PUSH
65826: LD_INT 0
65828: PUSH
65829: LD_INT 0
65831: PUSH
65832: EMPTY
65833: LIST
65834: LIST
65835: LIST
65836: LIST
65837: ST_TO_ADDR
// end ;
65838: LD_VAR 0 1
65842: RET
// export function PrepareApemanEngineer ( ) ; begin
65843: LD_INT 0
65845: PPUSH
// uc_nation := 0 ;
65846: LD_ADDR_OWVAR 21
65850: PUSH
65851: LD_INT 0
65853: ST_TO_ADDR
// hc_sex := sex_male ;
65854: LD_ADDR_OWVAR 27
65858: PUSH
65859: LD_INT 1
65861: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
65862: LD_ADDR_OWVAR 28
65866: PUSH
65867: LD_INT 16
65869: ST_TO_ADDR
// hc_gallery :=  ;
65870: LD_ADDR_OWVAR 33
65874: PUSH
65875: LD_STRING 
65877: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
65878: LD_ADDR_OWVAR 31
65882: PUSH
65883: LD_INT 0
65885: PPUSH
65886: LD_INT 3
65888: PPUSH
65889: CALL_OW 12
65893: PUSH
65894: LD_INT 0
65896: PPUSH
65897: LD_INT 3
65899: PPUSH
65900: CALL_OW 12
65904: PUSH
65905: LD_INT 0
65907: PUSH
65908: LD_INT 0
65910: PUSH
65911: EMPTY
65912: LIST
65913: LIST
65914: LIST
65915: LIST
65916: ST_TO_ADDR
// end ;
65917: LD_VAR 0 1
65921: RET
// export function PrepareApeman ( agressivity ) ; begin
65922: LD_INT 0
65924: PPUSH
// uc_side := 0 ;
65925: LD_ADDR_OWVAR 20
65929: PUSH
65930: LD_INT 0
65932: ST_TO_ADDR
// uc_nation := 0 ;
65933: LD_ADDR_OWVAR 21
65937: PUSH
65938: LD_INT 0
65940: ST_TO_ADDR
// hc_sex := sex_male ;
65941: LD_ADDR_OWVAR 27
65945: PUSH
65946: LD_INT 1
65948: ST_TO_ADDR
// hc_class := class_apeman ;
65949: LD_ADDR_OWVAR 28
65953: PUSH
65954: LD_INT 12
65956: ST_TO_ADDR
// hc_gallery :=  ;
65957: LD_ADDR_OWVAR 33
65961: PUSH
65962: LD_STRING 
65964: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
65965: LD_ADDR_OWVAR 35
65969: PUSH
65970: LD_VAR 0 1
65974: NEG
65975: PPUSH
65976: LD_VAR 0 1
65980: PPUSH
65981: CALL_OW 12
65985: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
65986: LD_ADDR_OWVAR 31
65990: PUSH
65991: LD_INT 0
65993: PPUSH
65994: LD_INT 3
65996: PPUSH
65997: CALL_OW 12
66001: PUSH
66002: LD_INT 0
66004: PPUSH
66005: LD_INT 3
66007: PPUSH
66008: CALL_OW 12
66012: PUSH
66013: LD_INT 0
66015: PUSH
66016: LD_INT 0
66018: PUSH
66019: EMPTY
66020: LIST
66021: LIST
66022: LIST
66023: LIST
66024: ST_TO_ADDR
// end ;
66025: LD_VAR 0 2
66029: RET
// export function PrepareTiger ( agressivity ) ; begin
66030: LD_INT 0
66032: PPUSH
// uc_side := 0 ;
66033: LD_ADDR_OWVAR 20
66037: PUSH
66038: LD_INT 0
66040: ST_TO_ADDR
// uc_nation := 0 ;
66041: LD_ADDR_OWVAR 21
66045: PUSH
66046: LD_INT 0
66048: ST_TO_ADDR
// hc_class := class_tiger ;
66049: LD_ADDR_OWVAR 28
66053: PUSH
66054: LD_INT 14
66056: ST_TO_ADDR
// hc_gallery :=  ;
66057: LD_ADDR_OWVAR 33
66061: PUSH
66062: LD_STRING 
66064: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
66065: LD_ADDR_OWVAR 35
66069: PUSH
66070: LD_VAR 0 1
66074: NEG
66075: PPUSH
66076: LD_VAR 0 1
66080: PPUSH
66081: CALL_OW 12
66085: ST_TO_ADDR
// end ;
66086: LD_VAR 0 2
66090: RET
// export function PrepareEnchidna ( ) ; begin
66091: LD_INT 0
66093: PPUSH
// uc_side := 0 ;
66094: LD_ADDR_OWVAR 20
66098: PUSH
66099: LD_INT 0
66101: ST_TO_ADDR
// uc_nation := 0 ;
66102: LD_ADDR_OWVAR 21
66106: PUSH
66107: LD_INT 0
66109: ST_TO_ADDR
// hc_class := class_baggie ;
66110: LD_ADDR_OWVAR 28
66114: PUSH
66115: LD_INT 13
66117: ST_TO_ADDR
// hc_gallery :=  ;
66118: LD_ADDR_OWVAR 33
66122: PUSH
66123: LD_STRING 
66125: ST_TO_ADDR
// end ;
66126: LD_VAR 0 1
66130: RET
// export function PrepareFrog ( ) ; begin
66131: LD_INT 0
66133: PPUSH
// uc_side := 0 ;
66134: LD_ADDR_OWVAR 20
66138: PUSH
66139: LD_INT 0
66141: ST_TO_ADDR
// uc_nation := 0 ;
66142: LD_ADDR_OWVAR 21
66146: PUSH
66147: LD_INT 0
66149: ST_TO_ADDR
// hc_class := class_frog ;
66150: LD_ADDR_OWVAR 28
66154: PUSH
66155: LD_INT 19
66157: ST_TO_ADDR
// hc_gallery :=  ;
66158: LD_ADDR_OWVAR 33
66162: PUSH
66163: LD_STRING 
66165: ST_TO_ADDR
// end ;
66166: LD_VAR 0 1
66170: RET
// export function PrepareFish ( ) ; begin
66171: LD_INT 0
66173: PPUSH
// uc_side := 0 ;
66174: LD_ADDR_OWVAR 20
66178: PUSH
66179: LD_INT 0
66181: ST_TO_ADDR
// uc_nation := 0 ;
66182: LD_ADDR_OWVAR 21
66186: PUSH
66187: LD_INT 0
66189: ST_TO_ADDR
// hc_class := class_fish ;
66190: LD_ADDR_OWVAR 28
66194: PUSH
66195: LD_INT 20
66197: ST_TO_ADDR
// hc_gallery :=  ;
66198: LD_ADDR_OWVAR 33
66202: PUSH
66203: LD_STRING 
66205: ST_TO_ADDR
// end ;
66206: LD_VAR 0 1
66210: RET
// export function PrepareBird ( ) ; begin
66211: LD_INT 0
66213: PPUSH
// uc_side := 0 ;
66214: LD_ADDR_OWVAR 20
66218: PUSH
66219: LD_INT 0
66221: ST_TO_ADDR
// uc_nation := 0 ;
66222: LD_ADDR_OWVAR 21
66226: PUSH
66227: LD_INT 0
66229: ST_TO_ADDR
// hc_class := class_phororhacos ;
66230: LD_ADDR_OWVAR 28
66234: PUSH
66235: LD_INT 18
66237: ST_TO_ADDR
// hc_gallery :=  ;
66238: LD_ADDR_OWVAR 33
66242: PUSH
66243: LD_STRING 
66245: ST_TO_ADDR
// end ;
66246: LD_VAR 0 1
66250: RET
// export function PrepareHorse ( ) ; begin
66251: LD_INT 0
66253: PPUSH
// uc_side := 0 ;
66254: LD_ADDR_OWVAR 20
66258: PUSH
66259: LD_INT 0
66261: ST_TO_ADDR
// uc_nation := 0 ;
66262: LD_ADDR_OWVAR 21
66266: PUSH
66267: LD_INT 0
66269: ST_TO_ADDR
// hc_class := class_horse ;
66270: LD_ADDR_OWVAR 28
66274: PUSH
66275: LD_INT 21
66277: ST_TO_ADDR
// hc_gallery :=  ;
66278: LD_ADDR_OWVAR 33
66282: PUSH
66283: LD_STRING 
66285: ST_TO_ADDR
// end ;
66286: LD_VAR 0 1
66290: RET
// export function PrepareMastodont ( ) ; begin
66291: LD_INT 0
66293: PPUSH
// uc_side := 0 ;
66294: LD_ADDR_OWVAR 20
66298: PUSH
66299: LD_INT 0
66301: ST_TO_ADDR
// uc_nation := 0 ;
66302: LD_ADDR_OWVAR 21
66306: PUSH
66307: LD_INT 0
66309: ST_TO_ADDR
// vc_chassis := class_mastodont ;
66310: LD_ADDR_OWVAR 37
66314: PUSH
66315: LD_INT 31
66317: ST_TO_ADDR
// vc_control := control_rider ;
66318: LD_ADDR_OWVAR 38
66322: PUSH
66323: LD_INT 4
66325: ST_TO_ADDR
// end ;
66326: LD_VAR 0 1
66330: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
66331: LD_INT 0
66333: PPUSH
66334: PPUSH
66335: PPUSH
// uc_side = 0 ;
66336: LD_ADDR_OWVAR 20
66340: PUSH
66341: LD_INT 0
66343: ST_TO_ADDR
// uc_nation = 0 ;
66344: LD_ADDR_OWVAR 21
66348: PUSH
66349: LD_INT 0
66351: ST_TO_ADDR
// InitHc_All ( ) ;
66352: CALL_OW 584
// InitVc ;
66356: CALL_OW 20
// if mastodonts then
66360: LD_VAR 0 6
66364: IFFALSE 66431
// for i = 1 to mastodonts do
66366: LD_ADDR_VAR 0 11
66370: PUSH
66371: DOUBLE
66372: LD_INT 1
66374: DEC
66375: ST_TO_ADDR
66376: LD_VAR 0 6
66380: PUSH
66381: FOR_TO
66382: IFFALSE 66429
// begin vc_chassis := 31 ;
66384: LD_ADDR_OWVAR 37
66388: PUSH
66389: LD_INT 31
66391: ST_TO_ADDR
// vc_control := control_rider ;
66392: LD_ADDR_OWVAR 38
66396: PUSH
66397: LD_INT 4
66399: ST_TO_ADDR
// animal := CreateVehicle ;
66400: LD_ADDR_VAR 0 12
66404: PUSH
66405: CALL_OW 45
66409: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66410: LD_VAR 0 12
66414: PPUSH
66415: LD_VAR 0 8
66419: PPUSH
66420: LD_INT 0
66422: PPUSH
66423: CALL 68566 0 3
// end ;
66427: GO 66381
66429: POP
66430: POP
// if horses then
66431: LD_VAR 0 5
66435: IFFALSE 66502
// for i = 1 to horses do
66437: LD_ADDR_VAR 0 11
66441: PUSH
66442: DOUBLE
66443: LD_INT 1
66445: DEC
66446: ST_TO_ADDR
66447: LD_VAR 0 5
66451: PUSH
66452: FOR_TO
66453: IFFALSE 66500
// begin hc_class := 21 ;
66455: LD_ADDR_OWVAR 28
66459: PUSH
66460: LD_INT 21
66462: ST_TO_ADDR
// hc_gallery :=  ;
66463: LD_ADDR_OWVAR 33
66467: PUSH
66468: LD_STRING 
66470: ST_TO_ADDR
// animal := CreateHuman ;
66471: LD_ADDR_VAR 0 12
66475: PUSH
66476: CALL_OW 44
66480: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66481: LD_VAR 0 12
66485: PPUSH
66486: LD_VAR 0 8
66490: PPUSH
66491: LD_INT 0
66493: PPUSH
66494: CALL 68566 0 3
// end ;
66498: GO 66452
66500: POP
66501: POP
// if birds then
66502: LD_VAR 0 1
66506: IFFALSE 66573
// for i = 1 to birds do
66508: LD_ADDR_VAR 0 11
66512: PUSH
66513: DOUBLE
66514: LD_INT 1
66516: DEC
66517: ST_TO_ADDR
66518: LD_VAR 0 1
66522: PUSH
66523: FOR_TO
66524: IFFALSE 66571
// begin hc_class = 18 ;
66526: LD_ADDR_OWVAR 28
66530: PUSH
66531: LD_INT 18
66533: ST_TO_ADDR
// hc_gallery =  ;
66534: LD_ADDR_OWVAR 33
66538: PUSH
66539: LD_STRING 
66541: ST_TO_ADDR
// animal := CreateHuman ;
66542: LD_ADDR_VAR 0 12
66546: PUSH
66547: CALL_OW 44
66551: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66552: LD_VAR 0 12
66556: PPUSH
66557: LD_VAR 0 8
66561: PPUSH
66562: LD_INT 0
66564: PPUSH
66565: CALL 68566 0 3
// end ;
66569: GO 66523
66571: POP
66572: POP
// if tigers then
66573: LD_VAR 0 2
66577: IFFALSE 66661
// for i = 1 to tigers do
66579: LD_ADDR_VAR 0 11
66583: PUSH
66584: DOUBLE
66585: LD_INT 1
66587: DEC
66588: ST_TO_ADDR
66589: LD_VAR 0 2
66593: PUSH
66594: FOR_TO
66595: IFFALSE 66659
// begin hc_class = class_tiger ;
66597: LD_ADDR_OWVAR 28
66601: PUSH
66602: LD_INT 14
66604: ST_TO_ADDR
// hc_gallery =  ;
66605: LD_ADDR_OWVAR 33
66609: PUSH
66610: LD_STRING 
66612: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
66613: LD_ADDR_OWVAR 35
66617: PUSH
66618: LD_INT 7
66620: NEG
66621: PPUSH
66622: LD_INT 7
66624: PPUSH
66625: CALL_OW 12
66629: ST_TO_ADDR
// animal := CreateHuman ;
66630: LD_ADDR_VAR 0 12
66634: PUSH
66635: CALL_OW 44
66639: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66640: LD_VAR 0 12
66644: PPUSH
66645: LD_VAR 0 8
66649: PPUSH
66650: LD_INT 0
66652: PPUSH
66653: CALL 68566 0 3
// end ;
66657: GO 66594
66659: POP
66660: POP
// if apemans then
66661: LD_VAR 0 3
66665: IFFALSE 66788
// for i = 1 to apemans do
66667: LD_ADDR_VAR 0 11
66671: PUSH
66672: DOUBLE
66673: LD_INT 1
66675: DEC
66676: ST_TO_ADDR
66677: LD_VAR 0 3
66681: PUSH
66682: FOR_TO
66683: IFFALSE 66786
// begin hc_class = class_apeman ;
66685: LD_ADDR_OWVAR 28
66689: PUSH
66690: LD_INT 12
66692: ST_TO_ADDR
// hc_gallery =  ;
66693: LD_ADDR_OWVAR 33
66697: PUSH
66698: LD_STRING 
66700: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
66701: LD_ADDR_OWVAR 35
66705: PUSH
66706: LD_INT 2
66708: NEG
66709: PPUSH
66710: LD_INT 2
66712: PPUSH
66713: CALL_OW 12
66717: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
66718: LD_ADDR_OWVAR 31
66722: PUSH
66723: LD_INT 1
66725: PPUSH
66726: LD_INT 3
66728: PPUSH
66729: CALL_OW 12
66733: PUSH
66734: LD_INT 1
66736: PPUSH
66737: LD_INT 3
66739: PPUSH
66740: CALL_OW 12
66744: PUSH
66745: LD_INT 0
66747: PUSH
66748: LD_INT 0
66750: PUSH
66751: EMPTY
66752: LIST
66753: LIST
66754: LIST
66755: LIST
66756: ST_TO_ADDR
// animal := CreateHuman ;
66757: LD_ADDR_VAR 0 12
66761: PUSH
66762: CALL_OW 44
66766: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66767: LD_VAR 0 12
66771: PPUSH
66772: LD_VAR 0 8
66776: PPUSH
66777: LD_INT 0
66779: PPUSH
66780: CALL 68566 0 3
// end ;
66784: GO 66682
66786: POP
66787: POP
// if enchidnas then
66788: LD_VAR 0 4
66792: IFFALSE 66859
// for i = 1 to enchidnas do
66794: LD_ADDR_VAR 0 11
66798: PUSH
66799: DOUBLE
66800: LD_INT 1
66802: DEC
66803: ST_TO_ADDR
66804: LD_VAR 0 4
66808: PUSH
66809: FOR_TO
66810: IFFALSE 66857
// begin hc_class = 13 ;
66812: LD_ADDR_OWVAR 28
66816: PUSH
66817: LD_INT 13
66819: ST_TO_ADDR
// hc_gallery =  ;
66820: LD_ADDR_OWVAR 33
66824: PUSH
66825: LD_STRING 
66827: ST_TO_ADDR
// animal := CreateHuman ;
66828: LD_ADDR_VAR 0 12
66832: PUSH
66833: CALL_OW 44
66837: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66838: LD_VAR 0 12
66842: PPUSH
66843: LD_VAR 0 8
66847: PPUSH
66848: LD_INT 0
66850: PPUSH
66851: CALL 68566 0 3
// end ;
66855: GO 66809
66857: POP
66858: POP
// if fishes then
66859: LD_VAR 0 7
66863: IFFALSE 66930
// for i = 1 to fishes do
66865: LD_ADDR_VAR 0 11
66869: PUSH
66870: DOUBLE
66871: LD_INT 1
66873: DEC
66874: ST_TO_ADDR
66875: LD_VAR 0 7
66879: PUSH
66880: FOR_TO
66881: IFFALSE 66928
// begin hc_class = 20 ;
66883: LD_ADDR_OWVAR 28
66887: PUSH
66888: LD_INT 20
66890: ST_TO_ADDR
// hc_gallery =  ;
66891: LD_ADDR_OWVAR 33
66895: PUSH
66896: LD_STRING 
66898: ST_TO_ADDR
// animal := CreateHuman ;
66899: LD_ADDR_VAR 0 12
66903: PUSH
66904: CALL_OW 44
66908: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
66909: LD_VAR 0 12
66913: PPUSH
66914: LD_VAR 0 9
66918: PPUSH
66919: LD_INT 0
66921: PPUSH
66922: CALL 68566 0 3
// end ;
66926: GO 66880
66928: POP
66929: POP
// end ;
66930: LD_VAR 0 10
66934: RET
// export function WantHeal ( sci , unit ) ; begin
66935: LD_INT 0
66937: PPUSH
// if GetTaskList ( sci ) > 0 then
66938: LD_VAR 0 1
66942: PPUSH
66943: CALL_OW 437
66947: PUSH
66948: LD_INT 0
66950: GREATER
66951: IFFALSE 67021
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
66953: LD_VAR 0 1
66957: PPUSH
66958: CALL_OW 437
66962: PUSH
66963: LD_INT 1
66965: ARRAY
66966: PUSH
66967: LD_INT 1
66969: ARRAY
66970: PUSH
66971: LD_STRING l
66973: EQUAL
66974: PUSH
66975: LD_VAR 0 1
66979: PPUSH
66980: CALL_OW 437
66984: PUSH
66985: LD_INT 1
66987: ARRAY
66988: PUSH
66989: LD_INT 4
66991: ARRAY
66992: PUSH
66993: LD_VAR 0 2
66997: EQUAL
66998: AND
66999: IFFALSE 67011
// result := true else
67001: LD_ADDR_VAR 0 3
67005: PUSH
67006: LD_INT 1
67008: ST_TO_ADDR
67009: GO 67019
// result := false ;
67011: LD_ADDR_VAR 0 3
67015: PUSH
67016: LD_INT 0
67018: ST_TO_ADDR
// end else
67019: GO 67029
// result := false ;
67021: LD_ADDR_VAR 0 3
67025: PUSH
67026: LD_INT 0
67028: ST_TO_ADDR
// end ;
67029: LD_VAR 0 3
67033: RET
// export function HealTarget ( sci ) ; begin
67034: LD_INT 0
67036: PPUSH
// if not sci then
67037: LD_VAR 0 1
67041: NOT
67042: IFFALSE 67046
// exit ;
67044: GO 67111
// result := 0 ;
67046: LD_ADDR_VAR 0 2
67050: PUSH
67051: LD_INT 0
67053: ST_TO_ADDR
// if GetTaskList ( sci ) then
67054: LD_VAR 0 1
67058: PPUSH
67059: CALL_OW 437
67063: IFFALSE 67111
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
67065: LD_VAR 0 1
67069: PPUSH
67070: CALL_OW 437
67074: PUSH
67075: LD_INT 1
67077: ARRAY
67078: PUSH
67079: LD_INT 1
67081: ARRAY
67082: PUSH
67083: LD_STRING l
67085: EQUAL
67086: IFFALSE 67111
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
67088: LD_ADDR_VAR 0 2
67092: PUSH
67093: LD_VAR 0 1
67097: PPUSH
67098: CALL_OW 437
67102: PUSH
67103: LD_INT 1
67105: ARRAY
67106: PUSH
67107: LD_INT 4
67109: ARRAY
67110: ST_TO_ADDR
// end ;
67111: LD_VAR 0 2
67115: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
67116: LD_INT 0
67118: PPUSH
67119: PPUSH
67120: PPUSH
67121: PPUSH
// if not base_units then
67122: LD_VAR 0 1
67126: NOT
67127: IFFALSE 67131
// exit ;
67129: GO 67218
// result := false ;
67131: LD_ADDR_VAR 0 2
67135: PUSH
67136: LD_INT 0
67138: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
67139: LD_ADDR_VAR 0 5
67143: PUSH
67144: LD_VAR 0 1
67148: PPUSH
67149: LD_INT 21
67151: PUSH
67152: LD_INT 3
67154: PUSH
67155: EMPTY
67156: LIST
67157: LIST
67158: PPUSH
67159: CALL_OW 72
67163: ST_TO_ADDR
// if not tmp then
67164: LD_VAR 0 5
67168: NOT
67169: IFFALSE 67173
// exit ;
67171: GO 67218
// for i in tmp do
67173: LD_ADDR_VAR 0 3
67177: PUSH
67178: LD_VAR 0 5
67182: PUSH
67183: FOR_IN
67184: IFFALSE 67216
// begin result := EnemyInRange ( i , 22 ) ;
67186: LD_ADDR_VAR 0 2
67190: PUSH
67191: LD_VAR 0 3
67195: PPUSH
67196: LD_INT 22
67198: PPUSH
67199: CALL 64831 0 2
67203: ST_TO_ADDR
// if result then
67204: LD_VAR 0 2
67208: IFFALSE 67214
// exit ;
67210: POP
67211: POP
67212: GO 67218
// end ;
67214: GO 67183
67216: POP
67217: POP
// end ;
67218: LD_VAR 0 2
67222: RET
// export function FilterByTag ( units , tag ) ; begin
67223: LD_INT 0
67225: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
67226: LD_ADDR_VAR 0 3
67230: PUSH
67231: LD_VAR 0 1
67235: PPUSH
67236: LD_INT 120
67238: PUSH
67239: LD_VAR 0 2
67243: PUSH
67244: EMPTY
67245: LIST
67246: LIST
67247: PPUSH
67248: CALL_OW 72
67252: ST_TO_ADDR
// end ;
67253: LD_VAR 0 3
67257: RET
// export function IsDriver ( un ) ; begin
67258: LD_INT 0
67260: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
67261: LD_ADDR_VAR 0 2
67265: PUSH
67266: LD_VAR 0 1
67270: PUSH
67271: LD_INT 55
67273: PUSH
67274: EMPTY
67275: LIST
67276: PPUSH
67277: CALL_OW 69
67281: IN
67282: ST_TO_ADDR
// end ;
67283: LD_VAR 0 2
67287: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
67288: LD_INT 0
67290: PPUSH
67291: PPUSH
// list := [ ] ;
67292: LD_ADDR_VAR 0 5
67296: PUSH
67297: EMPTY
67298: ST_TO_ADDR
// case d of 0 :
67299: LD_VAR 0 3
67303: PUSH
67304: LD_INT 0
67306: DOUBLE
67307: EQUAL
67308: IFTRUE 67312
67310: GO 67445
67312: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
67313: LD_ADDR_VAR 0 5
67317: PUSH
67318: LD_VAR 0 1
67322: PUSH
67323: LD_INT 4
67325: MINUS
67326: PUSH
67327: LD_VAR 0 2
67331: PUSH
67332: LD_INT 4
67334: MINUS
67335: PUSH
67336: LD_INT 2
67338: PUSH
67339: EMPTY
67340: LIST
67341: LIST
67342: LIST
67343: PUSH
67344: LD_VAR 0 1
67348: PUSH
67349: LD_INT 3
67351: MINUS
67352: PUSH
67353: LD_VAR 0 2
67357: PUSH
67358: LD_INT 1
67360: PUSH
67361: EMPTY
67362: LIST
67363: LIST
67364: LIST
67365: PUSH
67366: LD_VAR 0 1
67370: PUSH
67371: LD_INT 4
67373: PLUS
67374: PUSH
67375: LD_VAR 0 2
67379: PUSH
67380: LD_INT 4
67382: PUSH
67383: EMPTY
67384: LIST
67385: LIST
67386: LIST
67387: PUSH
67388: LD_VAR 0 1
67392: PUSH
67393: LD_INT 3
67395: PLUS
67396: PUSH
67397: LD_VAR 0 2
67401: PUSH
67402: LD_INT 3
67404: PLUS
67405: PUSH
67406: LD_INT 5
67408: PUSH
67409: EMPTY
67410: LIST
67411: LIST
67412: LIST
67413: PUSH
67414: LD_VAR 0 1
67418: PUSH
67419: LD_VAR 0 2
67423: PUSH
67424: LD_INT 4
67426: PLUS
67427: PUSH
67428: LD_INT 0
67430: PUSH
67431: EMPTY
67432: LIST
67433: LIST
67434: LIST
67435: PUSH
67436: EMPTY
67437: LIST
67438: LIST
67439: LIST
67440: LIST
67441: LIST
67442: ST_TO_ADDR
// end ; 1 :
67443: GO 68143
67445: LD_INT 1
67447: DOUBLE
67448: EQUAL
67449: IFTRUE 67453
67451: GO 67586
67453: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
67454: LD_ADDR_VAR 0 5
67458: PUSH
67459: LD_VAR 0 1
67463: PUSH
67464: LD_VAR 0 2
67468: PUSH
67469: LD_INT 4
67471: MINUS
67472: PUSH
67473: LD_INT 3
67475: PUSH
67476: EMPTY
67477: LIST
67478: LIST
67479: LIST
67480: PUSH
67481: LD_VAR 0 1
67485: PUSH
67486: LD_INT 3
67488: MINUS
67489: PUSH
67490: LD_VAR 0 2
67494: PUSH
67495: LD_INT 3
67497: MINUS
67498: PUSH
67499: LD_INT 2
67501: PUSH
67502: EMPTY
67503: LIST
67504: LIST
67505: LIST
67506: PUSH
67507: LD_VAR 0 1
67511: PUSH
67512: LD_INT 4
67514: MINUS
67515: PUSH
67516: LD_VAR 0 2
67520: PUSH
67521: LD_INT 1
67523: PUSH
67524: EMPTY
67525: LIST
67526: LIST
67527: LIST
67528: PUSH
67529: LD_VAR 0 1
67533: PUSH
67534: LD_VAR 0 2
67538: PUSH
67539: LD_INT 3
67541: PLUS
67542: PUSH
67543: LD_INT 0
67545: PUSH
67546: EMPTY
67547: LIST
67548: LIST
67549: LIST
67550: PUSH
67551: LD_VAR 0 1
67555: PUSH
67556: LD_INT 4
67558: PLUS
67559: PUSH
67560: LD_VAR 0 2
67564: PUSH
67565: LD_INT 4
67567: PLUS
67568: PUSH
67569: LD_INT 5
67571: PUSH
67572: EMPTY
67573: LIST
67574: LIST
67575: LIST
67576: PUSH
67577: EMPTY
67578: LIST
67579: LIST
67580: LIST
67581: LIST
67582: LIST
67583: ST_TO_ADDR
// end ; 2 :
67584: GO 68143
67586: LD_INT 2
67588: DOUBLE
67589: EQUAL
67590: IFTRUE 67594
67592: GO 67723
67594: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
67595: LD_ADDR_VAR 0 5
67599: PUSH
67600: LD_VAR 0 1
67604: PUSH
67605: LD_VAR 0 2
67609: PUSH
67610: LD_INT 3
67612: MINUS
67613: PUSH
67614: LD_INT 3
67616: PUSH
67617: EMPTY
67618: LIST
67619: LIST
67620: LIST
67621: PUSH
67622: LD_VAR 0 1
67626: PUSH
67627: LD_INT 4
67629: PLUS
67630: PUSH
67631: LD_VAR 0 2
67635: PUSH
67636: LD_INT 4
67638: PUSH
67639: EMPTY
67640: LIST
67641: LIST
67642: LIST
67643: PUSH
67644: LD_VAR 0 1
67648: PUSH
67649: LD_VAR 0 2
67653: PUSH
67654: LD_INT 4
67656: PLUS
67657: PUSH
67658: LD_INT 0
67660: PUSH
67661: EMPTY
67662: LIST
67663: LIST
67664: LIST
67665: PUSH
67666: LD_VAR 0 1
67670: PUSH
67671: LD_INT 3
67673: MINUS
67674: PUSH
67675: LD_VAR 0 2
67679: PUSH
67680: LD_INT 1
67682: PUSH
67683: EMPTY
67684: LIST
67685: LIST
67686: LIST
67687: PUSH
67688: LD_VAR 0 1
67692: PUSH
67693: LD_INT 4
67695: MINUS
67696: PUSH
67697: LD_VAR 0 2
67701: PUSH
67702: LD_INT 4
67704: MINUS
67705: PUSH
67706: LD_INT 2
67708: PUSH
67709: EMPTY
67710: LIST
67711: LIST
67712: LIST
67713: PUSH
67714: EMPTY
67715: LIST
67716: LIST
67717: LIST
67718: LIST
67719: LIST
67720: ST_TO_ADDR
// end ; 3 :
67721: GO 68143
67723: LD_INT 3
67725: DOUBLE
67726: EQUAL
67727: IFTRUE 67731
67729: GO 67864
67731: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
67732: LD_ADDR_VAR 0 5
67736: PUSH
67737: LD_VAR 0 1
67741: PUSH
67742: LD_INT 3
67744: PLUS
67745: PUSH
67746: LD_VAR 0 2
67750: PUSH
67751: LD_INT 4
67753: PUSH
67754: EMPTY
67755: LIST
67756: LIST
67757: LIST
67758: PUSH
67759: LD_VAR 0 1
67763: PUSH
67764: LD_INT 4
67766: PLUS
67767: PUSH
67768: LD_VAR 0 2
67772: PUSH
67773: LD_INT 4
67775: PLUS
67776: PUSH
67777: LD_INT 5
67779: PUSH
67780: EMPTY
67781: LIST
67782: LIST
67783: LIST
67784: PUSH
67785: LD_VAR 0 1
67789: PUSH
67790: LD_INT 4
67792: MINUS
67793: PUSH
67794: LD_VAR 0 2
67798: PUSH
67799: LD_INT 1
67801: PUSH
67802: EMPTY
67803: LIST
67804: LIST
67805: LIST
67806: PUSH
67807: LD_VAR 0 1
67811: PUSH
67812: LD_VAR 0 2
67816: PUSH
67817: LD_INT 4
67819: MINUS
67820: PUSH
67821: LD_INT 3
67823: PUSH
67824: EMPTY
67825: LIST
67826: LIST
67827: LIST
67828: PUSH
67829: LD_VAR 0 1
67833: PUSH
67834: LD_INT 3
67836: MINUS
67837: PUSH
67838: LD_VAR 0 2
67842: PUSH
67843: LD_INT 3
67845: MINUS
67846: PUSH
67847: LD_INT 2
67849: PUSH
67850: EMPTY
67851: LIST
67852: LIST
67853: LIST
67854: PUSH
67855: EMPTY
67856: LIST
67857: LIST
67858: LIST
67859: LIST
67860: LIST
67861: ST_TO_ADDR
// end ; 4 :
67862: GO 68143
67864: LD_INT 4
67866: DOUBLE
67867: EQUAL
67868: IFTRUE 67872
67870: GO 68005
67872: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
67873: LD_ADDR_VAR 0 5
67877: PUSH
67878: LD_VAR 0 1
67882: PUSH
67883: LD_VAR 0 2
67887: PUSH
67888: LD_INT 4
67890: PLUS
67891: PUSH
67892: LD_INT 0
67894: PUSH
67895: EMPTY
67896: LIST
67897: LIST
67898: LIST
67899: PUSH
67900: LD_VAR 0 1
67904: PUSH
67905: LD_INT 3
67907: PLUS
67908: PUSH
67909: LD_VAR 0 2
67913: PUSH
67914: LD_INT 3
67916: PLUS
67917: PUSH
67918: LD_INT 5
67920: PUSH
67921: EMPTY
67922: LIST
67923: LIST
67924: LIST
67925: PUSH
67926: LD_VAR 0 1
67930: PUSH
67931: LD_INT 4
67933: PLUS
67934: PUSH
67935: LD_VAR 0 2
67939: PUSH
67940: LD_INT 4
67942: PUSH
67943: EMPTY
67944: LIST
67945: LIST
67946: LIST
67947: PUSH
67948: LD_VAR 0 1
67952: PUSH
67953: LD_VAR 0 2
67957: PUSH
67958: LD_INT 3
67960: MINUS
67961: PUSH
67962: LD_INT 3
67964: PUSH
67965: EMPTY
67966: LIST
67967: LIST
67968: LIST
67969: PUSH
67970: LD_VAR 0 1
67974: PUSH
67975: LD_INT 4
67977: MINUS
67978: PUSH
67979: LD_VAR 0 2
67983: PUSH
67984: LD_INT 4
67986: MINUS
67987: PUSH
67988: LD_INT 2
67990: PUSH
67991: EMPTY
67992: LIST
67993: LIST
67994: LIST
67995: PUSH
67996: EMPTY
67997: LIST
67998: LIST
67999: LIST
68000: LIST
68001: LIST
68002: ST_TO_ADDR
// end ; 5 :
68003: GO 68143
68005: LD_INT 5
68007: DOUBLE
68008: EQUAL
68009: IFTRUE 68013
68011: GO 68142
68013: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
68014: LD_ADDR_VAR 0 5
68018: PUSH
68019: LD_VAR 0 1
68023: PUSH
68024: LD_INT 4
68026: MINUS
68027: PUSH
68028: LD_VAR 0 2
68032: PUSH
68033: LD_INT 1
68035: PUSH
68036: EMPTY
68037: LIST
68038: LIST
68039: LIST
68040: PUSH
68041: LD_VAR 0 1
68045: PUSH
68046: LD_VAR 0 2
68050: PUSH
68051: LD_INT 4
68053: MINUS
68054: PUSH
68055: LD_INT 3
68057: PUSH
68058: EMPTY
68059: LIST
68060: LIST
68061: LIST
68062: PUSH
68063: LD_VAR 0 1
68067: PUSH
68068: LD_INT 4
68070: PLUS
68071: PUSH
68072: LD_VAR 0 2
68076: PUSH
68077: LD_INT 4
68079: PLUS
68080: PUSH
68081: LD_INT 5
68083: PUSH
68084: EMPTY
68085: LIST
68086: LIST
68087: LIST
68088: PUSH
68089: LD_VAR 0 1
68093: PUSH
68094: LD_INT 3
68096: PLUS
68097: PUSH
68098: LD_VAR 0 2
68102: PUSH
68103: LD_INT 4
68105: PUSH
68106: EMPTY
68107: LIST
68108: LIST
68109: LIST
68110: PUSH
68111: LD_VAR 0 1
68115: PUSH
68116: LD_VAR 0 2
68120: PUSH
68121: LD_INT 3
68123: PLUS
68124: PUSH
68125: LD_INT 0
68127: PUSH
68128: EMPTY
68129: LIST
68130: LIST
68131: LIST
68132: PUSH
68133: EMPTY
68134: LIST
68135: LIST
68136: LIST
68137: LIST
68138: LIST
68139: ST_TO_ADDR
// end ; end ;
68140: GO 68143
68142: POP
// result := list ;
68143: LD_ADDR_VAR 0 4
68147: PUSH
68148: LD_VAR 0 5
68152: ST_TO_ADDR
// end ;
68153: LD_VAR 0 4
68157: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
68158: LD_INT 0
68160: PPUSH
68161: PPUSH
68162: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
68163: LD_VAR 0 1
68167: NOT
68168: PUSH
68169: LD_VAR 0 2
68173: PUSH
68174: LD_INT 1
68176: PUSH
68177: LD_INT 2
68179: PUSH
68180: LD_INT 3
68182: PUSH
68183: LD_INT 4
68185: PUSH
68186: EMPTY
68187: LIST
68188: LIST
68189: LIST
68190: LIST
68191: IN
68192: NOT
68193: OR
68194: IFFALSE 68198
// exit ;
68196: GO 68290
// tmp := [ ] ;
68198: LD_ADDR_VAR 0 5
68202: PUSH
68203: EMPTY
68204: ST_TO_ADDR
// for i in units do
68205: LD_ADDR_VAR 0 4
68209: PUSH
68210: LD_VAR 0 1
68214: PUSH
68215: FOR_IN
68216: IFFALSE 68259
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
68218: LD_ADDR_VAR 0 5
68222: PUSH
68223: LD_VAR 0 5
68227: PPUSH
68228: LD_VAR 0 5
68232: PUSH
68233: LD_INT 1
68235: PLUS
68236: PPUSH
68237: LD_VAR 0 4
68241: PPUSH
68242: LD_VAR 0 2
68246: PPUSH
68247: CALL_OW 259
68251: PPUSH
68252: CALL_OW 2
68256: ST_TO_ADDR
68257: GO 68215
68259: POP
68260: POP
// if not tmp then
68261: LD_VAR 0 5
68265: NOT
68266: IFFALSE 68270
// exit ;
68268: GO 68290
// result := SortListByListDesc ( units , tmp ) ;
68270: LD_ADDR_VAR 0 3
68274: PUSH
68275: LD_VAR 0 1
68279: PPUSH
68280: LD_VAR 0 5
68284: PPUSH
68285: CALL_OW 77
68289: ST_TO_ADDR
// end ;
68290: LD_VAR 0 3
68294: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
68295: LD_INT 0
68297: PPUSH
68298: PPUSH
68299: PPUSH
// result := false ;
68300: LD_ADDR_VAR 0 3
68304: PUSH
68305: LD_INT 0
68307: ST_TO_ADDR
// x := GetX ( building ) ;
68308: LD_ADDR_VAR 0 4
68312: PUSH
68313: LD_VAR 0 2
68317: PPUSH
68318: CALL_OW 250
68322: ST_TO_ADDR
// y := GetY ( building ) ;
68323: LD_ADDR_VAR 0 5
68327: PUSH
68328: LD_VAR 0 2
68332: PPUSH
68333: CALL_OW 251
68337: ST_TO_ADDR
// if not building or not x or not y then
68338: LD_VAR 0 2
68342: NOT
68343: PUSH
68344: LD_VAR 0 4
68348: NOT
68349: OR
68350: PUSH
68351: LD_VAR 0 5
68355: NOT
68356: OR
68357: IFFALSE 68361
// exit ;
68359: GO 68453
// if GetTaskList ( unit ) then
68361: LD_VAR 0 1
68365: PPUSH
68366: CALL_OW 437
68370: IFFALSE 68453
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
68372: LD_STRING e
68374: PUSH
68375: LD_VAR 0 1
68379: PPUSH
68380: CALL_OW 437
68384: PUSH
68385: LD_INT 1
68387: ARRAY
68388: PUSH
68389: LD_INT 1
68391: ARRAY
68392: EQUAL
68393: PUSH
68394: LD_VAR 0 4
68398: PUSH
68399: LD_VAR 0 1
68403: PPUSH
68404: CALL_OW 437
68408: PUSH
68409: LD_INT 1
68411: ARRAY
68412: PUSH
68413: LD_INT 2
68415: ARRAY
68416: EQUAL
68417: AND
68418: PUSH
68419: LD_VAR 0 5
68423: PUSH
68424: LD_VAR 0 1
68428: PPUSH
68429: CALL_OW 437
68433: PUSH
68434: LD_INT 1
68436: ARRAY
68437: PUSH
68438: LD_INT 3
68440: ARRAY
68441: EQUAL
68442: AND
68443: IFFALSE 68453
// result := true end ;
68445: LD_ADDR_VAR 0 3
68449: PUSH
68450: LD_INT 1
68452: ST_TO_ADDR
// end ;
68453: LD_VAR 0 3
68457: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
68458: LD_INT 0
68460: PPUSH
// result := false ;
68461: LD_ADDR_VAR 0 4
68465: PUSH
68466: LD_INT 0
68468: ST_TO_ADDR
// if GetTaskList ( unit ) then
68469: LD_VAR 0 1
68473: PPUSH
68474: CALL_OW 437
68478: IFFALSE 68561
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
68480: LD_STRING M
68482: PUSH
68483: LD_VAR 0 1
68487: PPUSH
68488: CALL_OW 437
68492: PUSH
68493: LD_INT 1
68495: ARRAY
68496: PUSH
68497: LD_INT 1
68499: ARRAY
68500: EQUAL
68501: PUSH
68502: LD_VAR 0 2
68506: PUSH
68507: LD_VAR 0 1
68511: PPUSH
68512: CALL_OW 437
68516: PUSH
68517: LD_INT 1
68519: ARRAY
68520: PUSH
68521: LD_INT 2
68523: ARRAY
68524: EQUAL
68525: AND
68526: PUSH
68527: LD_VAR 0 3
68531: PUSH
68532: LD_VAR 0 1
68536: PPUSH
68537: CALL_OW 437
68541: PUSH
68542: LD_INT 1
68544: ARRAY
68545: PUSH
68546: LD_INT 3
68548: ARRAY
68549: EQUAL
68550: AND
68551: IFFALSE 68561
// result := true ;
68553: LD_ADDR_VAR 0 4
68557: PUSH
68558: LD_INT 1
68560: ST_TO_ADDR
// end ; end ;
68561: LD_VAR 0 4
68565: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
68566: LD_INT 0
68568: PPUSH
68569: PPUSH
68570: PPUSH
68571: PPUSH
// if not unit or not area then
68572: LD_VAR 0 1
68576: NOT
68577: PUSH
68578: LD_VAR 0 2
68582: NOT
68583: OR
68584: IFFALSE 68588
// exit ;
68586: GO 68752
// tmp := AreaToList ( area , i ) ;
68588: LD_ADDR_VAR 0 6
68592: PUSH
68593: LD_VAR 0 2
68597: PPUSH
68598: LD_VAR 0 5
68602: PPUSH
68603: CALL_OW 517
68607: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
68608: LD_ADDR_VAR 0 5
68612: PUSH
68613: DOUBLE
68614: LD_INT 1
68616: DEC
68617: ST_TO_ADDR
68618: LD_VAR 0 6
68622: PUSH
68623: LD_INT 1
68625: ARRAY
68626: PUSH
68627: FOR_TO
68628: IFFALSE 68750
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
68630: LD_ADDR_VAR 0 7
68634: PUSH
68635: LD_VAR 0 6
68639: PUSH
68640: LD_INT 1
68642: ARRAY
68643: PUSH
68644: LD_VAR 0 5
68648: ARRAY
68649: PUSH
68650: LD_VAR 0 6
68654: PUSH
68655: LD_INT 2
68657: ARRAY
68658: PUSH
68659: LD_VAR 0 5
68663: ARRAY
68664: PUSH
68665: EMPTY
68666: LIST
68667: LIST
68668: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
68669: LD_VAR 0 7
68673: PUSH
68674: LD_INT 1
68676: ARRAY
68677: PPUSH
68678: LD_VAR 0 7
68682: PUSH
68683: LD_INT 2
68685: ARRAY
68686: PPUSH
68687: CALL_OW 428
68691: PUSH
68692: LD_INT 0
68694: EQUAL
68695: IFFALSE 68748
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
68697: LD_VAR 0 1
68701: PPUSH
68702: LD_VAR 0 7
68706: PUSH
68707: LD_INT 1
68709: ARRAY
68710: PPUSH
68711: LD_VAR 0 7
68715: PUSH
68716: LD_INT 2
68718: ARRAY
68719: PPUSH
68720: LD_VAR 0 3
68724: PPUSH
68725: CALL_OW 48
// result := IsPlaced ( unit ) ;
68729: LD_ADDR_VAR 0 4
68733: PUSH
68734: LD_VAR 0 1
68738: PPUSH
68739: CALL_OW 305
68743: ST_TO_ADDR
// exit ;
68744: POP
68745: POP
68746: GO 68752
// end ; end ;
68748: GO 68627
68750: POP
68751: POP
// end ;
68752: LD_VAR 0 4
68756: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
68757: LD_INT 0
68759: PPUSH
68760: PPUSH
68761: PPUSH
// if not side or side > 8 then
68762: LD_VAR 0 1
68766: NOT
68767: PUSH
68768: LD_VAR 0 1
68772: PUSH
68773: LD_INT 8
68775: GREATER
68776: OR
68777: IFFALSE 68781
// exit ;
68779: GO 68968
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
68781: LD_ADDR_VAR 0 4
68785: PUSH
68786: LD_INT 22
68788: PUSH
68789: LD_VAR 0 1
68793: PUSH
68794: EMPTY
68795: LIST
68796: LIST
68797: PUSH
68798: LD_INT 21
68800: PUSH
68801: LD_INT 3
68803: PUSH
68804: EMPTY
68805: LIST
68806: LIST
68807: PUSH
68808: EMPTY
68809: LIST
68810: LIST
68811: PPUSH
68812: CALL_OW 69
68816: ST_TO_ADDR
// if not tmp then
68817: LD_VAR 0 4
68821: NOT
68822: IFFALSE 68826
// exit ;
68824: GO 68968
// enable_addtolog := true ;
68826: LD_ADDR_OWVAR 81
68830: PUSH
68831: LD_INT 1
68833: ST_TO_ADDR
// AddToLog ( [ ) ;
68834: LD_STRING [
68836: PPUSH
68837: CALL_OW 561
// for i in tmp do
68841: LD_ADDR_VAR 0 3
68845: PUSH
68846: LD_VAR 0 4
68850: PUSH
68851: FOR_IN
68852: IFFALSE 68959
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
68854: LD_STRING [
68856: PUSH
68857: LD_VAR 0 3
68861: PPUSH
68862: CALL_OW 266
68866: STR
68867: PUSH
68868: LD_STRING , 
68870: STR
68871: PUSH
68872: LD_VAR 0 3
68876: PPUSH
68877: CALL_OW 250
68881: STR
68882: PUSH
68883: LD_STRING , 
68885: STR
68886: PUSH
68887: LD_VAR 0 3
68891: PPUSH
68892: CALL_OW 251
68896: STR
68897: PUSH
68898: LD_STRING , 
68900: STR
68901: PUSH
68902: LD_VAR 0 3
68906: PPUSH
68907: CALL_OW 254
68911: STR
68912: PUSH
68913: LD_STRING , 
68915: STR
68916: PUSH
68917: LD_VAR 0 3
68921: PPUSH
68922: LD_INT 1
68924: PPUSH
68925: CALL_OW 268
68929: STR
68930: PUSH
68931: LD_STRING , 
68933: STR
68934: PUSH
68935: LD_VAR 0 3
68939: PPUSH
68940: LD_INT 2
68942: PPUSH
68943: CALL_OW 268
68947: STR
68948: PUSH
68949: LD_STRING ],
68951: STR
68952: PPUSH
68953: CALL_OW 561
// end ;
68957: GO 68851
68959: POP
68960: POP
// AddToLog ( ]; ) ;
68961: LD_STRING ];
68963: PPUSH
68964: CALL_OW 561
// end ;
68968: LD_VAR 0 2
68972: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
68973: LD_INT 0
68975: PPUSH
68976: PPUSH
68977: PPUSH
68978: PPUSH
68979: PPUSH
// if not area or not rate or not max then
68980: LD_VAR 0 1
68984: NOT
68985: PUSH
68986: LD_VAR 0 2
68990: NOT
68991: OR
68992: PUSH
68993: LD_VAR 0 4
68997: NOT
68998: OR
68999: IFFALSE 69003
// exit ;
69001: GO 69192
// while 1 do
69003: LD_INT 1
69005: IFFALSE 69192
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
69007: LD_ADDR_VAR 0 9
69011: PUSH
69012: LD_VAR 0 1
69016: PPUSH
69017: LD_INT 1
69019: PPUSH
69020: CALL_OW 287
69024: PUSH
69025: LD_INT 10
69027: MUL
69028: ST_TO_ADDR
// r := rate / 10 ;
69029: LD_ADDR_VAR 0 7
69033: PUSH
69034: LD_VAR 0 2
69038: PUSH
69039: LD_INT 10
69041: DIVREAL
69042: ST_TO_ADDR
// time := 1 1$00 ;
69043: LD_ADDR_VAR 0 8
69047: PUSH
69048: LD_INT 2100
69050: ST_TO_ADDR
// if amount < min then
69051: LD_VAR 0 9
69055: PUSH
69056: LD_VAR 0 3
69060: LESS
69061: IFFALSE 69079
// r := r * 2 else
69063: LD_ADDR_VAR 0 7
69067: PUSH
69068: LD_VAR 0 7
69072: PUSH
69073: LD_INT 2
69075: MUL
69076: ST_TO_ADDR
69077: GO 69105
// if amount > max then
69079: LD_VAR 0 9
69083: PUSH
69084: LD_VAR 0 4
69088: GREATER
69089: IFFALSE 69105
// r := r / 2 ;
69091: LD_ADDR_VAR 0 7
69095: PUSH
69096: LD_VAR 0 7
69100: PUSH
69101: LD_INT 2
69103: DIVREAL
69104: ST_TO_ADDR
// time := time / r ;
69105: LD_ADDR_VAR 0 8
69109: PUSH
69110: LD_VAR 0 8
69114: PUSH
69115: LD_VAR 0 7
69119: DIVREAL
69120: ST_TO_ADDR
// if time < 0 then
69121: LD_VAR 0 8
69125: PUSH
69126: LD_INT 0
69128: LESS
69129: IFFALSE 69146
// time := time * - 1 ;
69131: LD_ADDR_VAR 0 8
69135: PUSH
69136: LD_VAR 0 8
69140: PUSH
69141: LD_INT 1
69143: NEG
69144: MUL
69145: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
69146: LD_VAR 0 8
69150: PUSH
69151: LD_INT 35
69153: PPUSH
69154: LD_INT 875
69156: PPUSH
69157: CALL_OW 12
69161: PLUS
69162: PPUSH
69163: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
69167: LD_INT 1
69169: PPUSH
69170: LD_INT 5
69172: PPUSH
69173: CALL_OW 12
69177: PPUSH
69178: LD_VAR 0 1
69182: PPUSH
69183: LD_INT 1
69185: PPUSH
69186: CALL_OW 55
// end ;
69190: GO 69003
// end ;
69192: LD_VAR 0 5
69196: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
69197: LD_INT 0
69199: PPUSH
69200: PPUSH
69201: PPUSH
69202: PPUSH
69203: PPUSH
69204: PPUSH
69205: PPUSH
69206: PPUSH
// if not turrets or not factories then
69207: LD_VAR 0 1
69211: NOT
69212: PUSH
69213: LD_VAR 0 2
69217: NOT
69218: OR
69219: IFFALSE 69223
// exit ;
69221: GO 69530
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
69223: LD_ADDR_VAR 0 10
69227: PUSH
69228: LD_INT 5
69230: PUSH
69231: LD_INT 6
69233: PUSH
69234: EMPTY
69235: LIST
69236: LIST
69237: PUSH
69238: LD_INT 2
69240: PUSH
69241: LD_INT 4
69243: PUSH
69244: EMPTY
69245: LIST
69246: LIST
69247: PUSH
69248: LD_INT 3
69250: PUSH
69251: LD_INT 5
69253: PUSH
69254: EMPTY
69255: LIST
69256: LIST
69257: PUSH
69258: EMPTY
69259: LIST
69260: LIST
69261: LIST
69262: PUSH
69263: LD_INT 24
69265: PUSH
69266: LD_INT 25
69268: PUSH
69269: EMPTY
69270: LIST
69271: LIST
69272: PUSH
69273: LD_INT 23
69275: PUSH
69276: LD_INT 27
69278: PUSH
69279: EMPTY
69280: LIST
69281: LIST
69282: PUSH
69283: EMPTY
69284: LIST
69285: LIST
69286: PUSH
69287: LD_INT 42
69289: PUSH
69290: LD_INT 43
69292: PUSH
69293: EMPTY
69294: LIST
69295: LIST
69296: PUSH
69297: LD_INT 44
69299: PUSH
69300: LD_INT 46
69302: PUSH
69303: EMPTY
69304: LIST
69305: LIST
69306: PUSH
69307: LD_INT 45
69309: PUSH
69310: LD_INT 47
69312: PUSH
69313: EMPTY
69314: LIST
69315: LIST
69316: PUSH
69317: EMPTY
69318: LIST
69319: LIST
69320: LIST
69321: PUSH
69322: EMPTY
69323: LIST
69324: LIST
69325: LIST
69326: ST_TO_ADDR
// result := [ ] ;
69327: LD_ADDR_VAR 0 3
69331: PUSH
69332: EMPTY
69333: ST_TO_ADDR
// for i in turrets do
69334: LD_ADDR_VAR 0 4
69338: PUSH
69339: LD_VAR 0 1
69343: PUSH
69344: FOR_IN
69345: IFFALSE 69528
// begin nat := GetNation ( i ) ;
69347: LD_ADDR_VAR 0 7
69351: PUSH
69352: LD_VAR 0 4
69356: PPUSH
69357: CALL_OW 248
69361: ST_TO_ADDR
// weapon := 0 ;
69362: LD_ADDR_VAR 0 8
69366: PUSH
69367: LD_INT 0
69369: ST_TO_ADDR
// if not nat then
69370: LD_VAR 0 7
69374: NOT
69375: IFFALSE 69379
// continue ;
69377: GO 69344
// for j in list [ nat ] do
69379: LD_ADDR_VAR 0 5
69383: PUSH
69384: LD_VAR 0 10
69388: PUSH
69389: LD_VAR 0 7
69393: ARRAY
69394: PUSH
69395: FOR_IN
69396: IFFALSE 69437
// if GetBWeapon ( i ) = j [ 1 ] then
69398: LD_VAR 0 4
69402: PPUSH
69403: CALL_OW 269
69407: PUSH
69408: LD_VAR 0 5
69412: PUSH
69413: LD_INT 1
69415: ARRAY
69416: EQUAL
69417: IFFALSE 69435
// begin weapon := j [ 2 ] ;
69419: LD_ADDR_VAR 0 8
69423: PUSH
69424: LD_VAR 0 5
69428: PUSH
69429: LD_INT 2
69431: ARRAY
69432: ST_TO_ADDR
// break ;
69433: GO 69437
// end ;
69435: GO 69395
69437: POP
69438: POP
// if not weapon then
69439: LD_VAR 0 8
69443: NOT
69444: IFFALSE 69448
// continue ;
69446: GO 69344
// for k in factories do
69448: LD_ADDR_VAR 0 6
69452: PUSH
69453: LD_VAR 0 2
69457: PUSH
69458: FOR_IN
69459: IFFALSE 69524
// begin weapons := AvailableWeaponList ( k ) ;
69461: LD_ADDR_VAR 0 9
69465: PUSH
69466: LD_VAR 0 6
69470: PPUSH
69471: CALL_OW 478
69475: ST_TO_ADDR
// if not weapons then
69476: LD_VAR 0 9
69480: NOT
69481: IFFALSE 69485
// continue ;
69483: GO 69458
// if weapon in weapons then
69485: LD_VAR 0 8
69489: PUSH
69490: LD_VAR 0 9
69494: IN
69495: IFFALSE 69522
// begin result := [ i , weapon ] ;
69497: LD_ADDR_VAR 0 3
69501: PUSH
69502: LD_VAR 0 4
69506: PUSH
69507: LD_VAR 0 8
69511: PUSH
69512: EMPTY
69513: LIST
69514: LIST
69515: ST_TO_ADDR
// exit ;
69516: POP
69517: POP
69518: POP
69519: POP
69520: GO 69530
// end ; end ;
69522: GO 69458
69524: POP
69525: POP
// end ;
69526: GO 69344
69528: POP
69529: POP
// end ;
69530: LD_VAR 0 3
69534: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
69535: LD_INT 0
69537: PPUSH
// if not side or side > 8 then
69538: LD_VAR 0 3
69542: NOT
69543: PUSH
69544: LD_VAR 0 3
69548: PUSH
69549: LD_INT 8
69551: GREATER
69552: OR
69553: IFFALSE 69557
// exit ;
69555: GO 69616
// if not range then
69557: LD_VAR 0 4
69561: NOT
69562: IFFALSE 69573
// range := - 12 ;
69564: LD_ADDR_VAR 0 4
69568: PUSH
69569: LD_INT 12
69571: NEG
69572: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
69573: LD_VAR 0 1
69577: PPUSH
69578: LD_VAR 0 2
69582: PPUSH
69583: LD_VAR 0 3
69587: PPUSH
69588: LD_VAR 0 4
69592: PPUSH
69593: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
69597: LD_VAR 0 1
69601: PPUSH
69602: LD_VAR 0 2
69606: PPUSH
69607: LD_VAR 0 3
69611: PPUSH
69612: CALL_OW 331
// end ;
69616: LD_VAR 0 5
69620: RET
// export function Video ( mode ) ; begin
69621: LD_INT 0
69623: PPUSH
// ingame_video = mode ;
69624: LD_ADDR_OWVAR 52
69628: PUSH
69629: LD_VAR 0 1
69633: ST_TO_ADDR
// interface_hidden = mode ;
69634: LD_ADDR_OWVAR 54
69638: PUSH
69639: LD_VAR 0 1
69643: ST_TO_ADDR
// end ;
69644: LD_VAR 0 2
69648: RET
// export function Join ( array , element ) ; begin
69649: LD_INT 0
69651: PPUSH
// result := Replace ( array , array + 1 , element ) ;
69652: LD_ADDR_VAR 0 3
69656: PUSH
69657: LD_VAR 0 1
69661: PPUSH
69662: LD_VAR 0 1
69666: PUSH
69667: LD_INT 1
69669: PLUS
69670: PPUSH
69671: LD_VAR 0 2
69675: PPUSH
69676: CALL_OW 1
69680: ST_TO_ADDR
// end ;
69681: LD_VAR 0 3
69685: RET
// export function JoinUnion ( array , element ) ; begin
69686: LD_INT 0
69688: PPUSH
// result := array union element ;
69689: LD_ADDR_VAR 0 3
69693: PUSH
69694: LD_VAR 0 1
69698: PUSH
69699: LD_VAR 0 2
69703: UNION
69704: ST_TO_ADDR
// end ;
69705: LD_VAR 0 3
69709: RET
// export function GetBehemoths ( side ) ; begin
69710: LD_INT 0
69712: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
69713: LD_ADDR_VAR 0 2
69717: PUSH
69718: LD_INT 22
69720: PUSH
69721: LD_VAR 0 1
69725: PUSH
69726: EMPTY
69727: LIST
69728: LIST
69729: PUSH
69730: LD_INT 31
69732: PUSH
69733: LD_INT 25
69735: PUSH
69736: EMPTY
69737: LIST
69738: LIST
69739: PUSH
69740: EMPTY
69741: LIST
69742: LIST
69743: PPUSH
69744: CALL_OW 69
69748: ST_TO_ADDR
// end ;
69749: LD_VAR 0 2
69753: RET
// export function Shuffle ( array ) ; var i , index ; begin
69754: LD_INT 0
69756: PPUSH
69757: PPUSH
69758: PPUSH
// result := [ ] ;
69759: LD_ADDR_VAR 0 2
69763: PUSH
69764: EMPTY
69765: ST_TO_ADDR
// if not array then
69766: LD_VAR 0 1
69770: NOT
69771: IFFALSE 69775
// exit ;
69773: GO 69874
// Randomize ;
69775: CALL_OW 10
// for i = array downto 1 do
69779: LD_ADDR_VAR 0 3
69783: PUSH
69784: DOUBLE
69785: LD_VAR 0 1
69789: INC
69790: ST_TO_ADDR
69791: LD_INT 1
69793: PUSH
69794: FOR_DOWNTO
69795: IFFALSE 69872
// begin index := rand ( 1 , array ) ;
69797: LD_ADDR_VAR 0 4
69801: PUSH
69802: LD_INT 1
69804: PPUSH
69805: LD_VAR 0 1
69809: PPUSH
69810: CALL_OW 12
69814: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
69815: LD_ADDR_VAR 0 2
69819: PUSH
69820: LD_VAR 0 2
69824: PPUSH
69825: LD_VAR 0 2
69829: PUSH
69830: LD_INT 1
69832: PLUS
69833: PPUSH
69834: LD_VAR 0 1
69838: PUSH
69839: LD_VAR 0 4
69843: ARRAY
69844: PPUSH
69845: CALL_OW 2
69849: ST_TO_ADDR
// array := Delete ( array , index ) ;
69850: LD_ADDR_VAR 0 1
69854: PUSH
69855: LD_VAR 0 1
69859: PPUSH
69860: LD_VAR 0 4
69864: PPUSH
69865: CALL_OW 3
69869: ST_TO_ADDR
// end ;
69870: GO 69794
69872: POP
69873: POP
// end ;
69874: LD_VAR 0 2
69878: RET
// export function GetBaseMaterials ( base ) ; begin
69879: LD_INT 0
69881: PPUSH
// result := [ 0 , 0 , 0 ] ;
69882: LD_ADDR_VAR 0 2
69886: PUSH
69887: LD_INT 0
69889: PUSH
69890: LD_INT 0
69892: PUSH
69893: LD_INT 0
69895: PUSH
69896: EMPTY
69897: LIST
69898: LIST
69899: LIST
69900: ST_TO_ADDR
// if not base then
69901: LD_VAR 0 1
69905: NOT
69906: IFFALSE 69910
// exit ;
69908: GO 69959
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
69910: LD_ADDR_VAR 0 2
69914: PUSH
69915: LD_VAR 0 1
69919: PPUSH
69920: LD_INT 1
69922: PPUSH
69923: CALL_OW 275
69927: PUSH
69928: LD_VAR 0 1
69932: PPUSH
69933: LD_INT 2
69935: PPUSH
69936: CALL_OW 275
69940: PUSH
69941: LD_VAR 0 1
69945: PPUSH
69946: LD_INT 3
69948: PPUSH
69949: CALL_OW 275
69953: PUSH
69954: EMPTY
69955: LIST
69956: LIST
69957: LIST
69958: ST_TO_ADDR
// end ;
69959: LD_VAR 0 2
69963: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
69964: LD_INT 0
69966: PPUSH
69967: PPUSH
// result := array ;
69968: LD_ADDR_VAR 0 3
69972: PUSH
69973: LD_VAR 0 1
69977: ST_TO_ADDR
// if size >= result then
69978: LD_VAR 0 2
69982: PUSH
69983: LD_VAR 0 3
69987: GREATEREQUAL
69988: IFFALSE 69992
// exit ;
69990: GO 70042
// if size then
69992: LD_VAR 0 2
69996: IFFALSE 70042
// for i := array downto size do
69998: LD_ADDR_VAR 0 4
70002: PUSH
70003: DOUBLE
70004: LD_VAR 0 1
70008: INC
70009: ST_TO_ADDR
70010: LD_VAR 0 2
70014: PUSH
70015: FOR_DOWNTO
70016: IFFALSE 70040
// result := Delete ( result , result ) ;
70018: LD_ADDR_VAR 0 3
70022: PUSH
70023: LD_VAR 0 3
70027: PPUSH
70028: LD_VAR 0 3
70032: PPUSH
70033: CALL_OW 3
70037: ST_TO_ADDR
70038: GO 70015
70040: POP
70041: POP
// end ;
70042: LD_VAR 0 3
70046: RET
// export function ComExit ( unit ) ; var tmp ; begin
70047: LD_INT 0
70049: PPUSH
70050: PPUSH
// if not IsInUnit ( unit ) then
70051: LD_VAR 0 1
70055: PPUSH
70056: CALL_OW 310
70060: NOT
70061: IFFALSE 70065
// exit ;
70063: GO 70125
// tmp := IsInUnit ( unit ) ;
70065: LD_ADDR_VAR 0 3
70069: PUSH
70070: LD_VAR 0 1
70074: PPUSH
70075: CALL_OW 310
70079: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
70080: LD_VAR 0 3
70084: PPUSH
70085: CALL_OW 247
70089: PUSH
70090: LD_INT 2
70092: EQUAL
70093: IFFALSE 70106
// ComExitVehicle ( unit ) else
70095: LD_VAR 0 1
70099: PPUSH
70100: CALL_OW 121
70104: GO 70115
// ComExitBuilding ( unit ) ;
70106: LD_VAR 0 1
70110: PPUSH
70111: CALL_OW 122
// result := tmp ;
70115: LD_ADDR_VAR 0 2
70119: PUSH
70120: LD_VAR 0 3
70124: ST_TO_ADDR
// end ;
70125: LD_VAR 0 2
70129: RET
// export function ComExitAll ( units ) ; var i ; begin
70130: LD_INT 0
70132: PPUSH
70133: PPUSH
// if not units then
70134: LD_VAR 0 1
70138: NOT
70139: IFFALSE 70143
// exit ;
70141: GO 70169
// for i in units do
70143: LD_ADDR_VAR 0 3
70147: PUSH
70148: LD_VAR 0 1
70152: PUSH
70153: FOR_IN
70154: IFFALSE 70167
// ComExit ( i ) ;
70156: LD_VAR 0 3
70160: PPUSH
70161: CALL 70047 0 1
70165: GO 70153
70167: POP
70168: POP
// end ;
70169: LD_VAR 0 2
70173: RET
// export function ResetHc ; begin
70174: LD_INT 0
70176: PPUSH
// InitHc ;
70177: CALL_OW 19
// hc_importance := 0 ;
70181: LD_ADDR_OWVAR 32
70185: PUSH
70186: LD_INT 0
70188: ST_TO_ADDR
// end ;
70189: LD_VAR 0 1
70193: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
70194: LD_INT 0
70196: PPUSH
70197: PPUSH
70198: PPUSH
// _x := ( x1 + x2 ) div 2 ;
70199: LD_ADDR_VAR 0 6
70203: PUSH
70204: LD_VAR 0 1
70208: PUSH
70209: LD_VAR 0 3
70213: PLUS
70214: PUSH
70215: LD_INT 2
70217: DIV
70218: ST_TO_ADDR
// if _x < 0 then
70219: LD_VAR 0 6
70223: PUSH
70224: LD_INT 0
70226: LESS
70227: IFFALSE 70244
// _x := _x * - 1 ;
70229: LD_ADDR_VAR 0 6
70233: PUSH
70234: LD_VAR 0 6
70238: PUSH
70239: LD_INT 1
70241: NEG
70242: MUL
70243: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
70244: LD_ADDR_VAR 0 7
70248: PUSH
70249: LD_VAR 0 2
70253: PUSH
70254: LD_VAR 0 4
70258: PLUS
70259: PUSH
70260: LD_INT 2
70262: DIV
70263: ST_TO_ADDR
// if _y < 0 then
70264: LD_VAR 0 7
70268: PUSH
70269: LD_INT 0
70271: LESS
70272: IFFALSE 70289
// _y := _y * - 1 ;
70274: LD_ADDR_VAR 0 7
70278: PUSH
70279: LD_VAR 0 7
70283: PUSH
70284: LD_INT 1
70286: NEG
70287: MUL
70288: ST_TO_ADDR
// result := [ _x , _y ] ;
70289: LD_ADDR_VAR 0 5
70293: PUSH
70294: LD_VAR 0 6
70298: PUSH
70299: LD_VAR 0 7
70303: PUSH
70304: EMPTY
70305: LIST
70306: LIST
70307: ST_TO_ADDR
// end ;
70308: LD_VAR 0 5
70312: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
70313: LD_INT 0
70315: PPUSH
70316: PPUSH
70317: PPUSH
70318: PPUSH
// task := GetTaskList ( unit ) ;
70319: LD_ADDR_VAR 0 7
70323: PUSH
70324: LD_VAR 0 1
70328: PPUSH
70329: CALL_OW 437
70333: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
70334: LD_VAR 0 7
70338: NOT
70339: PUSH
70340: LD_VAR 0 1
70344: PPUSH
70345: LD_VAR 0 2
70349: PPUSH
70350: CALL_OW 308
70354: NOT
70355: AND
70356: IFFALSE 70360
// exit ;
70358: GO 70478
// if IsInArea ( unit , area ) then
70360: LD_VAR 0 1
70364: PPUSH
70365: LD_VAR 0 2
70369: PPUSH
70370: CALL_OW 308
70374: IFFALSE 70392
// begin ComMoveToArea ( unit , goAway ) ;
70376: LD_VAR 0 1
70380: PPUSH
70381: LD_VAR 0 3
70385: PPUSH
70386: CALL_OW 113
// exit ;
70390: GO 70478
// end ; if task [ 1 ] [ 1 ] <> M then
70392: LD_VAR 0 7
70396: PUSH
70397: LD_INT 1
70399: ARRAY
70400: PUSH
70401: LD_INT 1
70403: ARRAY
70404: PUSH
70405: LD_STRING M
70407: NONEQUAL
70408: IFFALSE 70412
// exit ;
70410: GO 70478
// x := task [ 1 ] [ 2 ] ;
70412: LD_ADDR_VAR 0 5
70416: PUSH
70417: LD_VAR 0 7
70421: PUSH
70422: LD_INT 1
70424: ARRAY
70425: PUSH
70426: LD_INT 2
70428: ARRAY
70429: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
70430: LD_ADDR_VAR 0 6
70434: PUSH
70435: LD_VAR 0 7
70439: PUSH
70440: LD_INT 1
70442: ARRAY
70443: PUSH
70444: LD_INT 3
70446: ARRAY
70447: ST_TO_ADDR
// if InArea ( x , y , area ) then
70448: LD_VAR 0 5
70452: PPUSH
70453: LD_VAR 0 6
70457: PPUSH
70458: LD_VAR 0 2
70462: PPUSH
70463: CALL_OW 309
70467: IFFALSE 70478
// ComStop ( unit ) ;
70469: LD_VAR 0 1
70473: PPUSH
70474: CALL_OW 141
// end ;
70478: LD_VAR 0 4
70482: RET
// export function Abs ( value ) ; begin
70483: LD_INT 0
70485: PPUSH
// result := value ;
70486: LD_ADDR_VAR 0 2
70490: PUSH
70491: LD_VAR 0 1
70495: ST_TO_ADDR
// if value < 0 then
70496: LD_VAR 0 1
70500: PUSH
70501: LD_INT 0
70503: LESS
70504: IFFALSE 70521
// result := value * - 1 ;
70506: LD_ADDR_VAR 0 2
70510: PUSH
70511: LD_VAR 0 1
70515: PUSH
70516: LD_INT 1
70518: NEG
70519: MUL
70520: ST_TO_ADDR
// end ;
70521: LD_VAR 0 2
70525: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
70526: LD_INT 0
70528: PPUSH
70529: PPUSH
70530: PPUSH
70531: PPUSH
70532: PPUSH
70533: PPUSH
70534: PPUSH
70535: PPUSH
// if not unit or not building then
70536: LD_VAR 0 1
70540: NOT
70541: PUSH
70542: LD_VAR 0 2
70546: NOT
70547: OR
70548: IFFALSE 70552
// exit ;
70550: GO 70778
// x := GetX ( building ) ;
70552: LD_ADDR_VAR 0 4
70556: PUSH
70557: LD_VAR 0 2
70561: PPUSH
70562: CALL_OW 250
70566: ST_TO_ADDR
// y := GetY ( building ) ;
70567: LD_ADDR_VAR 0 6
70571: PUSH
70572: LD_VAR 0 2
70576: PPUSH
70577: CALL_OW 251
70581: ST_TO_ADDR
// d := GetDir ( building ) ;
70582: LD_ADDR_VAR 0 8
70586: PUSH
70587: LD_VAR 0 2
70591: PPUSH
70592: CALL_OW 254
70596: ST_TO_ADDR
// r := 4 ;
70597: LD_ADDR_VAR 0 9
70601: PUSH
70602: LD_INT 4
70604: ST_TO_ADDR
// for i := 1 to 5 do
70605: LD_ADDR_VAR 0 10
70609: PUSH
70610: DOUBLE
70611: LD_INT 1
70613: DEC
70614: ST_TO_ADDR
70615: LD_INT 5
70617: PUSH
70618: FOR_TO
70619: IFFALSE 70776
// begin _x := ShiftX ( x , d , r + i ) ;
70621: LD_ADDR_VAR 0 5
70625: PUSH
70626: LD_VAR 0 4
70630: PPUSH
70631: LD_VAR 0 8
70635: PPUSH
70636: LD_VAR 0 9
70640: PUSH
70641: LD_VAR 0 10
70645: PLUS
70646: PPUSH
70647: CALL_OW 272
70651: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
70652: LD_ADDR_VAR 0 7
70656: PUSH
70657: LD_VAR 0 6
70661: PPUSH
70662: LD_VAR 0 8
70666: PPUSH
70667: LD_VAR 0 9
70671: PUSH
70672: LD_VAR 0 10
70676: PLUS
70677: PPUSH
70678: CALL_OW 273
70682: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
70683: LD_VAR 0 5
70687: PPUSH
70688: LD_VAR 0 7
70692: PPUSH
70693: CALL_OW 488
70697: PUSH
70698: LD_VAR 0 5
70702: PPUSH
70703: LD_VAR 0 7
70707: PPUSH
70708: CALL_OW 428
70712: PPUSH
70713: CALL_OW 247
70717: PUSH
70718: LD_INT 3
70720: PUSH
70721: LD_INT 2
70723: PUSH
70724: EMPTY
70725: LIST
70726: LIST
70727: IN
70728: NOT
70729: AND
70730: IFFALSE 70774
// begin ComMoveXY ( unit , _x , _y ) ;
70732: LD_VAR 0 1
70736: PPUSH
70737: LD_VAR 0 5
70741: PPUSH
70742: LD_VAR 0 7
70746: PPUSH
70747: CALL_OW 111
// result := [ _x , _y ] ;
70751: LD_ADDR_VAR 0 3
70755: PUSH
70756: LD_VAR 0 5
70760: PUSH
70761: LD_VAR 0 7
70765: PUSH
70766: EMPTY
70767: LIST
70768: LIST
70769: ST_TO_ADDR
// exit ;
70770: POP
70771: POP
70772: GO 70778
// end ; end ;
70774: GO 70618
70776: POP
70777: POP
// end ;
70778: LD_VAR 0 3
70782: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
70783: LD_INT 0
70785: PPUSH
70786: PPUSH
70787: PPUSH
// result := 0 ;
70788: LD_ADDR_VAR 0 3
70792: PUSH
70793: LD_INT 0
70795: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
70796: LD_VAR 0 1
70800: PUSH
70801: LD_INT 0
70803: LESS
70804: PUSH
70805: LD_VAR 0 1
70809: PUSH
70810: LD_INT 8
70812: GREATER
70813: OR
70814: PUSH
70815: LD_VAR 0 2
70819: PUSH
70820: LD_INT 0
70822: LESS
70823: OR
70824: PUSH
70825: LD_VAR 0 2
70829: PUSH
70830: LD_INT 8
70832: GREATER
70833: OR
70834: IFFALSE 70838
// exit ;
70836: GO 70913
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
70838: LD_ADDR_VAR 0 4
70842: PUSH
70843: LD_INT 22
70845: PUSH
70846: LD_VAR 0 2
70850: PUSH
70851: EMPTY
70852: LIST
70853: LIST
70854: PPUSH
70855: CALL_OW 69
70859: PUSH
70860: FOR_IN
70861: IFFALSE 70911
// begin un := UnitShoot ( i ) ;
70863: LD_ADDR_VAR 0 5
70867: PUSH
70868: LD_VAR 0 4
70872: PPUSH
70873: CALL_OW 504
70877: ST_TO_ADDR
// if GetSide ( un ) = side1 then
70878: LD_VAR 0 5
70882: PPUSH
70883: CALL_OW 255
70887: PUSH
70888: LD_VAR 0 1
70892: EQUAL
70893: IFFALSE 70909
// begin result := un ;
70895: LD_ADDR_VAR 0 3
70899: PUSH
70900: LD_VAR 0 5
70904: ST_TO_ADDR
// exit ;
70905: POP
70906: POP
70907: GO 70913
// end ; end ;
70909: GO 70860
70911: POP
70912: POP
// end ;
70913: LD_VAR 0 3
70917: RET
// export function GetCargoBay ( units ) ; begin
70918: LD_INT 0
70920: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
70921: LD_ADDR_VAR 0 2
70925: PUSH
70926: LD_VAR 0 1
70930: PPUSH
70931: LD_INT 2
70933: PUSH
70934: LD_INT 34
70936: PUSH
70937: LD_INT 12
70939: PUSH
70940: EMPTY
70941: LIST
70942: LIST
70943: PUSH
70944: LD_INT 34
70946: PUSH
70947: LD_INT 51
70949: PUSH
70950: EMPTY
70951: LIST
70952: LIST
70953: PUSH
70954: LD_INT 34
70956: PUSH
70957: LD_INT 32
70959: PUSH
70960: EMPTY
70961: LIST
70962: LIST
70963: PUSH
70964: LD_INT 34
70966: PUSH
70967: LD_INT 89
70969: PUSH
70970: EMPTY
70971: LIST
70972: LIST
70973: PUSH
70974: EMPTY
70975: LIST
70976: LIST
70977: LIST
70978: LIST
70979: LIST
70980: PPUSH
70981: CALL_OW 72
70985: ST_TO_ADDR
// end ;
70986: LD_VAR 0 2
70990: RET
// export function Negate ( value ) ; begin
70991: LD_INT 0
70993: PPUSH
// result := not value ;
70994: LD_ADDR_VAR 0 2
70998: PUSH
70999: LD_VAR 0 1
71003: NOT
71004: ST_TO_ADDR
// end ;
71005: LD_VAR 0 2
71009: RET
// export function Inc ( value ) ; begin
71010: LD_INT 0
71012: PPUSH
// result := value + 1 ;
71013: LD_ADDR_VAR 0 2
71017: PUSH
71018: LD_VAR 0 1
71022: PUSH
71023: LD_INT 1
71025: PLUS
71026: ST_TO_ADDR
// end ;
71027: LD_VAR 0 2
71031: RET
// export function Dec ( value ) ; begin
71032: LD_INT 0
71034: PPUSH
// result := value - 1 ;
71035: LD_ADDR_VAR 0 2
71039: PUSH
71040: LD_VAR 0 1
71044: PUSH
71045: LD_INT 1
71047: MINUS
71048: ST_TO_ADDR
// end ;
71049: LD_VAR 0 2
71053: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
71054: LD_INT 0
71056: PPUSH
71057: PPUSH
71058: PPUSH
71059: PPUSH
71060: PPUSH
71061: PPUSH
71062: PPUSH
71063: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
71064: LD_VAR 0 1
71068: PPUSH
71069: LD_VAR 0 2
71073: PPUSH
71074: CALL_OW 488
71078: NOT
71079: PUSH
71080: LD_VAR 0 3
71084: PPUSH
71085: LD_VAR 0 4
71089: PPUSH
71090: CALL_OW 488
71094: NOT
71095: OR
71096: IFFALSE 71109
// begin result := - 1 ;
71098: LD_ADDR_VAR 0 5
71102: PUSH
71103: LD_INT 1
71105: NEG
71106: ST_TO_ADDR
// exit ;
71107: GO 71344
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
71109: LD_ADDR_VAR 0 12
71113: PUSH
71114: LD_VAR 0 1
71118: PPUSH
71119: LD_VAR 0 2
71123: PPUSH
71124: LD_VAR 0 3
71128: PPUSH
71129: LD_VAR 0 4
71133: PPUSH
71134: CALL 70194 0 4
71138: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
71139: LD_ADDR_VAR 0 11
71143: PUSH
71144: LD_VAR 0 1
71148: PPUSH
71149: LD_VAR 0 2
71153: PPUSH
71154: LD_VAR 0 12
71158: PUSH
71159: LD_INT 1
71161: ARRAY
71162: PPUSH
71163: LD_VAR 0 12
71167: PUSH
71168: LD_INT 2
71170: ARRAY
71171: PPUSH
71172: CALL_OW 298
71176: ST_TO_ADDR
// distance := 9999 ;
71177: LD_ADDR_VAR 0 10
71181: PUSH
71182: LD_INT 9999
71184: ST_TO_ADDR
// for i := 0 to 5 do
71185: LD_ADDR_VAR 0 6
71189: PUSH
71190: DOUBLE
71191: LD_INT 0
71193: DEC
71194: ST_TO_ADDR
71195: LD_INT 5
71197: PUSH
71198: FOR_TO
71199: IFFALSE 71342
// begin _x := ShiftX ( x1 , i , centerDist ) ;
71201: LD_ADDR_VAR 0 7
71205: PUSH
71206: LD_VAR 0 1
71210: PPUSH
71211: LD_VAR 0 6
71215: PPUSH
71216: LD_VAR 0 11
71220: PPUSH
71221: CALL_OW 272
71225: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
71226: LD_ADDR_VAR 0 8
71230: PUSH
71231: LD_VAR 0 2
71235: PPUSH
71236: LD_VAR 0 6
71240: PPUSH
71241: LD_VAR 0 11
71245: PPUSH
71246: CALL_OW 273
71250: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
71251: LD_VAR 0 7
71255: PPUSH
71256: LD_VAR 0 8
71260: PPUSH
71261: CALL_OW 488
71265: NOT
71266: IFFALSE 71270
// continue ;
71268: GO 71198
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
71270: LD_ADDR_VAR 0 9
71274: PUSH
71275: LD_VAR 0 12
71279: PUSH
71280: LD_INT 1
71282: ARRAY
71283: PPUSH
71284: LD_VAR 0 12
71288: PUSH
71289: LD_INT 2
71291: ARRAY
71292: PPUSH
71293: LD_VAR 0 7
71297: PPUSH
71298: LD_VAR 0 8
71302: PPUSH
71303: CALL_OW 298
71307: ST_TO_ADDR
// if tmp < distance then
71308: LD_VAR 0 9
71312: PUSH
71313: LD_VAR 0 10
71317: LESS
71318: IFFALSE 71340
// begin result := i ;
71320: LD_ADDR_VAR 0 5
71324: PUSH
71325: LD_VAR 0 6
71329: ST_TO_ADDR
// distance := tmp ;
71330: LD_ADDR_VAR 0 10
71334: PUSH
71335: LD_VAR 0 9
71339: ST_TO_ADDR
// end ; end ;
71340: GO 71198
71342: POP
71343: POP
// end ;
71344: LD_VAR 0 5
71348: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
71349: LD_INT 0
71351: PPUSH
71352: PPUSH
// if not driver or not IsInUnit ( driver ) then
71353: LD_VAR 0 1
71357: NOT
71358: PUSH
71359: LD_VAR 0 1
71363: PPUSH
71364: CALL_OW 310
71368: NOT
71369: OR
71370: IFFALSE 71374
// exit ;
71372: GO 71464
// vehicle := IsInUnit ( driver ) ;
71374: LD_ADDR_VAR 0 3
71378: PUSH
71379: LD_VAR 0 1
71383: PPUSH
71384: CALL_OW 310
71388: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
71389: LD_VAR 0 1
71393: PPUSH
71394: LD_STRING \
71396: PUSH
71397: LD_INT 0
71399: PUSH
71400: LD_INT 0
71402: PUSH
71403: LD_INT 0
71405: PUSH
71406: LD_INT 0
71408: PUSH
71409: LD_INT 0
71411: PUSH
71412: LD_INT 0
71414: PUSH
71415: EMPTY
71416: LIST
71417: LIST
71418: LIST
71419: LIST
71420: LIST
71421: LIST
71422: LIST
71423: PUSH
71424: LD_STRING E
71426: PUSH
71427: LD_INT 0
71429: PUSH
71430: LD_INT 0
71432: PUSH
71433: LD_VAR 0 3
71437: PUSH
71438: LD_INT 0
71440: PUSH
71441: LD_INT 0
71443: PUSH
71444: LD_INT 0
71446: PUSH
71447: EMPTY
71448: LIST
71449: LIST
71450: LIST
71451: LIST
71452: LIST
71453: LIST
71454: LIST
71455: PUSH
71456: EMPTY
71457: LIST
71458: LIST
71459: PPUSH
71460: CALL_OW 446
// end ;
71464: LD_VAR 0 2
71468: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
71469: LD_INT 0
71471: PPUSH
71472: PPUSH
// if not driver or not IsInUnit ( driver ) then
71473: LD_VAR 0 1
71477: NOT
71478: PUSH
71479: LD_VAR 0 1
71483: PPUSH
71484: CALL_OW 310
71488: NOT
71489: OR
71490: IFFALSE 71494
// exit ;
71492: GO 71584
// vehicle := IsInUnit ( driver ) ;
71494: LD_ADDR_VAR 0 3
71498: PUSH
71499: LD_VAR 0 1
71503: PPUSH
71504: CALL_OW 310
71508: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
71509: LD_VAR 0 1
71513: PPUSH
71514: LD_STRING \
71516: PUSH
71517: LD_INT 0
71519: PUSH
71520: LD_INT 0
71522: PUSH
71523: LD_INT 0
71525: PUSH
71526: LD_INT 0
71528: PUSH
71529: LD_INT 0
71531: PUSH
71532: LD_INT 0
71534: PUSH
71535: EMPTY
71536: LIST
71537: LIST
71538: LIST
71539: LIST
71540: LIST
71541: LIST
71542: LIST
71543: PUSH
71544: LD_STRING E
71546: PUSH
71547: LD_INT 0
71549: PUSH
71550: LD_INT 0
71552: PUSH
71553: LD_VAR 0 3
71557: PUSH
71558: LD_INT 0
71560: PUSH
71561: LD_INT 0
71563: PUSH
71564: LD_INT 0
71566: PUSH
71567: EMPTY
71568: LIST
71569: LIST
71570: LIST
71571: LIST
71572: LIST
71573: LIST
71574: LIST
71575: PUSH
71576: EMPTY
71577: LIST
71578: LIST
71579: PPUSH
71580: CALL_OW 447
// end ;
71584: LD_VAR 0 2
71588: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
71589: LD_INT 0
71591: PPUSH
71592: PPUSH
71593: PPUSH
// tmp := [ ] ;
71594: LD_ADDR_VAR 0 5
71598: PUSH
71599: EMPTY
71600: ST_TO_ADDR
// for i in units do
71601: LD_ADDR_VAR 0 4
71605: PUSH
71606: LD_VAR 0 1
71610: PUSH
71611: FOR_IN
71612: IFFALSE 71650
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
71614: LD_ADDR_VAR 0 5
71618: PUSH
71619: LD_VAR 0 5
71623: PPUSH
71624: LD_VAR 0 5
71628: PUSH
71629: LD_INT 1
71631: PLUS
71632: PPUSH
71633: LD_VAR 0 4
71637: PPUSH
71638: CALL_OW 256
71642: PPUSH
71643: CALL_OW 2
71647: ST_TO_ADDR
71648: GO 71611
71650: POP
71651: POP
// if not tmp then
71652: LD_VAR 0 5
71656: NOT
71657: IFFALSE 71661
// exit ;
71659: GO 71709
// if asc then
71661: LD_VAR 0 2
71665: IFFALSE 71689
// result := SortListByListAsc ( units , tmp ) else
71667: LD_ADDR_VAR 0 3
71671: PUSH
71672: LD_VAR 0 1
71676: PPUSH
71677: LD_VAR 0 5
71681: PPUSH
71682: CALL_OW 76
71686: ST_TO_ADDR
71687: GO 71709
// result := SortListByListDesc ( units , tmp ) ;
71689: LD_ADDR_VAR 0 3
71693: PUSH
71694: LD_VAR 0 1
71698: PPUSH
71699: LD_VAR 0 5
71703: PPUSH
71704: CALL_OW 77
71708: ST_TO_ADDR
// end ;
71709: LD_VAR 0 3
71713: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
71714: LD_INT 0
71716: PPUSH
71717: PPUSH
// task := GetTaskList ( mech ) ;
71718: LD_ADDR_VAR 0 4
71722: PUSH
71723: LD_VAR 0 1
71727: PPUSH
71728: CALL_OW 437
71732: ST_TO_ADDR
// if not task then
71733: LD_VAR 0 4
71737: NOT
71738: IFFALSE 71742
// exit ;
71740: GO 71784
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
71742: LD_ADDR_VAR 0 3
71746: PUSH
71747: LD_VAR 0 4
71751: PUSH
71752: LD_INT 1
71754: ARRAY
71755: PUSH
71756: LD_INT 1
71758: ARRAY
71759: PUSH
71760: LD_STRING r
71762: EQUAL
71763: PUSH
71764: LD_VAR 0 4
71768: PUSH
71769: LD_INT 1
71771: ARRAY
71772: PUSH
71773: LD_INT 4
71775: ARRAY
71776: PUSH
71777: LD_VAR 0 2
71781: EQUAL
71782: AND
71783: ST_TO_ADDR
// end ;
71784: LD_VAR 0 3
71788: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
71789: LD_INT 0
71791: PPUSH
// SetDir ( unit , d ) ;
71792: LD_VAR 0 1
71796: PPUSH
71797: LD_VAR 0 4
71801: PPUSH
71802: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
71806: LD_VAR 0 1
71810: PPUSH
71811: LD_VAR 0 2
71815: PPUSH
71816: LD_VAR 0 3
71820: PPUSH
71821: LD_VAR 0 5
71825: PPUSH
71826: CALL_OW 48
// end ;
71830: LD_VAR 0 6
71834: RET
// export function ToNaturalNumber ( number ) ; begin
71835: LD_INT 0
71837: PPUSH
// result := number div 1 ;
71838: LD_ADDR_VAR 0 2
71842: PUSH
71843: LD_VAR 0 1
71847: PUSH
71848: LD_INT 1
71850: DIV
71851: ST_TO_ADDR
// if number < 0 then
71852: LD_VAR 0 1
71856: PUSH
71857: LD_INT 0
71859: LESS
71860: IFFALSE 71870
// result := 0 ;
71862: LD_ADDR_VAR 0 2
71866: PUSH
71867: LD_INT 0
71869: ST_TO_ADDR
// end ;
71870: LD_VAR 0 2
71874: RET
// export function SortByClass ( units , class ) ; var un ; begin
71875: LD_INT 0
71877: PPUSH
71878: PPUSH
// if not units or not class then
71879: LD_VAR 0 1
71883: NOT
71884: PUSH
71885: LD_VAR 0 2
71889: NOT
71890: OR
71891: IFFALSE 71895
// exit ;
71893: GO 71990
// result := [ ] ;
71895: LD_ADDR_VAR 0 3
71899: PUSH
71900: EMPTY
71901: ST_TO_ADDR
// for un in units do
71902: LD_ADDR_VAR 0 4
71906: PUSH
71907: LD_VAR 0 1
71911: PUSH
71912: FOR_IN
71913: IFFALSE 71988
// if GetClass ( un ) = class then
71915: LD_VAR 0 4
71919: PPUSH
71920: CALL_OW 257
71924: PUSH
71925: LD_VAR 0 2
71929: EQUAL
71930: IFFALSE 71957
// result := Insert ( result , 1 , un ) else
71932: LD_ADDR_VAR 0 3
71936: PUSH
71937: LD_VAR 0 3
71941: PPUSH
71942: LD_INT 1
71944: PPUSH
71945: LD_VAR 0 4
71949: PPUSH
71950: CALL_OW 2
71954: ST_TO_ADDR
71955: GO 71986
// result := Replace ( result , result + 1 , un ) ;
71957: LD_ADDR_VAR 0 3
71961: PUSH
71962: LD_VAR 0 3
71966: PPUSH
71967: LD_VAR 0 3
71971: PUSH
71972: LD_INT 1
71974: PLUS
71975: PPUSH
71976: LD_VAR 0 4
71980: PPUSH
71981: CALL_OW 1
71985: ST_TO_ADDR
71986: GO 71912
71988: POP
71989: POP
// end ;
71990: LD_VAR 0 3
71994: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
71995: LD_INT 0
71997: PPUSH
71998: PPUSH
71999: PPUSH
72000: PPUSH
72001: PPUSH
72002: PPUSH
72003: PPUSH
// result := [ ] ;
72004: LD_ADDR_VAR 0 4
72008: PUSH
72009: EMPTY
72010: ST_TO_ADDR
// if x - r < 0 then
72011: LD_VAR 0 1
72015: PUSH
72016: LD_VAR 0 3
72020: MINUS
72021: PUSH
72022: LD_INT 0
72024: LESS
72025: IFFALSE 72037
// min_x := 0 else
72027: LD_ADDR_VAR 0 8
72031: PUSH
72032: LD_INT 0
72034: ST_TO_ADDR
72035: GO 72053
// min_x := x - r ;
72037: LD_ADDR_VAR 0 8
72041: PUSH
72042: LD_VAR 0 1
72046: PUSH
72047: LD_VAR 0 3
72051: MINUS
72052: ST_TO_ADDR
// if y - r < 0 then
72053: LD_VAR 0 2
72057: PUSH
72058: LD_VAR 0 3
72062: MINUS
72063: PUSH
72064: LD_INT 0
72066: LESS
72067: IFFALSE 72079
// min_y := 0 else
72069: LD_ADDR_VAR 0 7
72073: PUSH
72074: LD_INT 0
72076: ST_TO_ADDR
72077: GO 72095
// min_y := y - r ;
72079: LD_ADDR_VAR 0 7
72083: PUSH
72084: LD_VAR 0 2
72088: PUSH
72089: LD_VAR 0 3
72093: MINUS
72094: ST_TO_ADDR
// max_x := x + r ;
72095: LD_ADDR_VAR 0 9
72099: PUSH
72100: LD_VAR 0 1
72104: PUSH
72105: LD_VAR 0 3
72109: PLUS
72110: ST_TO_ADDR
// max_y := y + r ;
72111: LD_ADDR_VAR 0 10
72115: PUSH
72116: LD_VAR 0 2
72120: PUSH
72121: LD_VAR 0 3
72125: PLUS
72126: ST_TO_ADDR
// for _x = min_x to max_x do
72127: LD_ADDR_VAR 0 5
72131: PUSH
72132: DOUBLE
72133: LD_VAR 0 8
72137: DEC
72138: ST_TO_ADDR
72139: LD_VAR 0 9
72143: PUSH
72144: FOR_TO
72145: IFFALSE 72246
// for _y = min_y to max_y do
72147: LD_ADDR_VAR 0 6
72151: PUSH
72152: DOUBLE
72153: LD_VAR 0 7
72157: DEC
72158: ST_TO_ADDR
72159: LD_VAR 0 10
72163: PUSH
72164: FOR_TO
72165: IFFALSE 72242
// begin if not ValidHex ( _x , _y ) then
72167: LD_VAR 0 5
72171: PPUSH
72172: LD_VAR 0 6
72176: PPUSH
72177: CALL_OW 488
72181: NOT
72182: IFFALSE 72186
// continue ;
72184: GO 72164
// if GetResourceTypeXY ( _x , _y ) then
72186: LD_VAR 0 5
72190: PPUSH
72191: LD_VAR 0 6
72195: PPUSH
72196: CALL_OW 283
72200: IFFALSE 72240
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
72202: LD_ADDR_VAR 0 4
72206: PUSH
72207: LD_VAR 0 4
72211: PPUSH
72212: LD_VAR 0 4
72216: PUSH
72217: LD_INT 1
72219: PLUS
72220: PPUSH
72221: LD_VAR 0 5
72225: PUSH
72226: LD_VAR 0 6
72230: PUSH
72231: EMPTY
72232: LIST
72233: LIST
72234: PPUSH
72235: CALL_OW 1
72239: ST_TO_ADDR
// end ;
72240: GO 72164
72242: POP
72243: POP
72244: GO 72144
72246: POP
72247: POP
// end ;
72248: LD_VAR 0 4
72252: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
72253: LD_INT 0
72255: PPUSH
72256: PPUSH
72257: PPUSH
72258: PPUSH
72259: PPUSH
72260: PPUSH
72261: PPUSH
72262: PPUSH
// if not units then
72263: LD_VAR 0 1
72267: NOT
72268: IFFALSE 72272
// exit ;
72270: GO 72796
// result := UnitFilter ( units , [ f_ok ] ) ;
72272: LD_ADDR_VAR 0 3
72276: PUSH
72277: LD_VAR 0 1
72281: PPUSH
72282: LD_INT 50
72284: PUSH
72285: EMPTY
72286: LIST
72287: PPUSH
72288: CALL_OW 72
72292: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
72293: LD_ADDR_VAR 0 8
72297: PUSH
72298: LD_VAR 0 1
72302: PUSH
72303: LD_INT 1
72305: ARRAY
72306: PPUSH
72307: CALL_OW 255
72311: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
72312: LD_ADDR_VAR 0 10
72316: PUSH
72317: LD_INT 29
72319: PUSH
72320: LD_INT 91
72322: PUSH
72323: LD_INT 49
72325: PUSH
72326: EMPTY
72327: LIST
72328: LIST
72329: LIST
72330: ST_TO_ADDR
// if not result then
72331: LD_VAR 0 3
72335: NOT
72336: IFFALSE 72340
// exit ;
72338: GO 72796
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
72340: LD_ADDR_VAR 0 5
72344: PUSH
72345: LD_INT 81
72347: PUSH
72348: LD_VAR 0 8
72352: PUSH
72353: EMPTY
72354: LIST
72355: LIST
72356: PPUSH
72357: CALL_OW 69
72361: ST_TO_ADDR
// for i in result do
72362: LD_ADDR_VAR 0 4
72366: PUSH
72367: LD_VAR 0 3
72371: PUSH
72372: FOR_IN
72373: IFFALSE 72794
// begin tag := GetTag ( i ) + 1 ;
72375: LD_ADDR_VAR 0 9
72379: PUSH
72380: LD_VAR 0 4
72384: PPUSH
72385: CALL_OW 110
72389: PUSH
72390: LD_INT 1
72392: PLUS
72393: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
72394: LD_ADDR_VAR 0 7
72398: PUSH
72399: LD_VAR 0 4
72403: PPUSH
72404: CALL_OW 250
72408: PPUSH
72409: LD_VAR 0 4
72413: PPUSH
72414: CALL_OW 251
72418: PPUSH
72419: LD_INT 6
72421: PPUSH
72422: CALL 71995 0 3
72426: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
72427: LD_VAR 0 4
72431: PPUSH
72432: CALL_OW 247
72436: PUSH
72437: LD_INT 2
72439: EQUAL
72440: PUSH
72441: LD_VAR 0 7
72445: AND
72446: PUSH
72447: LD_VAR 0 4
72451: PPUSH
72452: CALL_OW 264
72456: PUSH
72457: LD_VAR 0 10
72461: IN
72462: NOT
72463: AND
72464: IFFALSE 72503
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
72466: LD_VAR 0 4
72470: PPUSH
72471: LD_VAR 0 7
72475: PUSH
72476: LD_INT 1
72478: ARRAY
72479: PUSH
72480: LD_INT 1
72482: ARRAY
72483: PPUSH
72484: LD_VAR 0 7
72488: PUSH
72489: LD_INT 1
72491: ARRAY
72492: PUSH
72493: LD_INT 2
72495: ARRAY
72496: PPUSH
72497: CALL_OW 116
72501: GO 72792
// if path > tag then
72503: LD_VAR 0 2
72507: PUSH
72508: LD_VAR 0 9
72512: GREATER
72513: IFFALSE 72721
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
72515: LD_ADDR_VAR 0 6
72519: PUSH
72520: LD_VAR 0 5
72524: PPUSH
72525: LD_INT 91
72527: PUSH
72528: LD_VAR 0 4
72532: PUSH
72533: LD_INT 8
72535: PUSH
72536: EMPTY
72537: LIST
72538: LIST
72539: LIST
72540: PPUSH
72541: CALL_OW 72
72545: ST_TO_ADDR
// if nearEnemy then
72546: LD_VAR 0 6
72550: IFFALSE 72619
// begin if GetWeapon ( i ) = ru_time_lapser then
72552: LD_VAR 0 4
72556: PPUSH
72557: CALL_OW 264
72561: PUSH
72562: LD_INT 49
72564: EQUAL
72565: IFFALSE 72593
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
72567: LD_VAR 0 4
72571: PPUSH
72572: LD_VAR 0 6
72576: PPUSH
72577: LD_VAR 0 4
72581: PPUSH
72582: CALL_OW 74
72586: PPUSH
72587: CALL_OW 112
72591: GO 72617
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
72593: LD_VAR 0 4
72597: PPUSH
72598: LD_VAR 0 6
72602: PPUSH
72603: LD_VAR 0 4
72607: PPUSH
72608: CALL_OW 74
72612: PPUSH
72613: CALL_OW 115
// end else
72617: GO 72719
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
72619: LD_VAR 0 4
72623: PPUSH
72624: LD_VAR 0 2
72628: PUSH
72629: LD_VAR 0 9
72633: ARRAY
72634: PUSH
72635: LD_INT 1
72637: ARRAY
72638: PPUSH
72639: LD_VAR 0 2
72643: PUSH
72644: LD_VAR 0 9
72648: ARRAY
72649: PUSH
72650: LD_INT 2
72652: ARRAY
72653: PPUSH
72654: CALL_OW 297
72658: PUSH
72659: LD_INT 6
72661: GREATER
72662: IFFALSE 72705
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
72664: LD_VAR 0 4
72668: PPUSH
72669: LD_VAR 0 2
72673: PUSH
72674: LD_VAR 0 9
72678: ARRAY
72679: PUSH
72680: LD_INT 1
72682: ARRAY
72683: PPUSH
72684: LD_VAR 0 2
72688: PUSH
72689: LD_VAR 0 9
72693: ARRAY
72694: PUSH
72695: LD_INT 2
72697: ARRAY
72698: PPUSH
72699: CALL_OW 114
72703: GO 72719
// SetTag ( i , tag ) ;
72705: LD_VAR 0 4
72709: PPUSH
72710: LD_VAR 0 9
72714: PPUSH
72715: CALL_OW 109
// end else
72719: GO 72792
// if enemy then
72721: LD_VAR 0 5
72725: IFFALSE 72792
// begin if GetWeapon ( i ) = ru_time_lapser then
72727: LD_VAR 0 4
72731: PPUSH
72732: CALL_OW 264
72736: PUSH
72737: LD_INT 49
72739: EQUAL
72740: IFFALSE 72768
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
72742: LD_VAR 0 4
72746: PPUSH
72747: LD_VAR 0 5
72751: PPUSH
72752: LD_VAR 0 4
72756: PPUSH
72757: CALL_OW 74
72761: PPUSH
72762: CALL_OW 112
72766: GO 72792
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
72768: LD_VAR 0 4
72772: PPUSH
72773: LD_VAR 0 5
72777: PPUSH
72778: LD_VAR 0 4
72782: PPUSH
72783: CALL_OW 74
72787: PPUSH
72788: CALL_OW 115
// end ; end ;
72792: GO 72372
72794: POP
72795: POP
// end ;
72796: LD_VAR 0 3
72800: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
72801: LD_INT 0
72803: PPUSH
72804: PPUSH
72805: PPUSH
// if not unit or IsInUnit ( unit ) then
72806: LD_VAR 0 1
72810: NOT
72811: PUSH
72812: LD_VAR 0 1
72816: PPUSH
72817: CALL_OW 310
72821: OR
72822: IFFALSE 72826
// exit ;
72824: GO 72917
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
72826: LD_ADDR_VAR 0 4
72830: PUSH
72831: LD_VAR 0 1
72835: PPUSH
72836: CALL_OW 250
72840: PPUSH
72841: LD_VAR 0 2
72845: PPUSH
72846: LD_INT 1
72848: PPUSH
72849: CALL_OW 272
72853: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
72854: LD_ADDR_VAR 0 5
72858: PUSH
72859: LD_VAR 0 1
72863: PPUSH
72864: CALL_OW 251
72868: PPUSH
72869: LD_VAR 0 2
72873: PPUSH
72874: LD_INT 1
72876: PPUSH
72877: CALL_OW 273
72881: ST_TO_ADDR
// if ValidHex ( x , y ) then
72882: LD_VAR 0 4
72886: PPUSH
72887: LD_VAR 0 5
72891: PPUSH
72892: CALL_OW 488
72896: IFFALSE 72917
// ComTurnXY ( unit , x , y ) ;
72898: LD_VAR 0 1
72902: PPUSH
72903: LD_VAR 0 4
72907: PPUSH
72908: LD_VAR 0 5
72912: PPUSH
72913: CALL_OW 118
// end ;
72917: LD_VAR 0 3
72921: RET
// export function SeeUnits ( side , units ) ; var i ; begin
72922: LD_INT 0
72924: PPUSH
72925: PPUSH
// result := false ;
72926: LD_ADDR_VAR 0 3
72930: PUSH
72931: LD_INT 0
72933: ST_TO_ADDR
// if not units then
72934: LD_VAR 0 2
72938: NOT
72939: IFFALSE 72943
// exit ;
72941: GO 72988
// for i in units do
72943: LD_ADDR_VAR 0 4
72947: PUSH
72948: LD_VAR 0 2
72952: PUSH
72953: FOR_IN
72954: IFFALSE 72986
// if See ( side , i ) then
72956: LD_VAR 0 1
72960: PPUSH
72961: LD_VAR 0 4
72965: PPUSH
72966: CALL_OW 292
72970: IFFALSE 72984
// begin result := true ;
72972: LD_ADDR_VAR 0 3
72976: PUSH
72977: LD_INT 1
72979: ST_TO_ADDR
// exit ;
72980: POP
72981: POP
72982: GO 72988
// end ;
72984: GO 72953
72986: POP
72987: POP
// end ;
72988: LD_VAR 0 3
72992: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
72993: LD_INT 0
72995: PPUSH
72996: PPUSH
72997: PPUSH
72998: PPUSH
// if not unit or not points then
72999: LD_VAR 0 1
73003: NOT
73004: PUSH
73005: LD_VAR 0 2
73009: NOT
73010: OR
73011: IFFALSE 73015
// exit ;
73013: GO 73105
// dist := 99999 ;
73015: LD_ADDR_VAR 0 5
73019: PUSH
73020: LD_INT 99999
73022: ST_TO_ADDR
// for i in points do
73023: LD_ADDR_VAR 0 4
73027: PUSH
73028: LD_VAR 0 2
73032: PUSH
73033: FOR_IN
73034: IFFALSE 73103
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
73036: LD_ADDR_VAR 0 6
73040: PUSH
73041: LD_VAR 0 1
73045: PPUSH
73046: LD_VAR 0 4
73050: PUSH
73051: LD_INT 1
73053: ARRAY
73054: PPUSH
73055: LD_VAR 0 4
73059: PUSH
73060: LD_INT 2
73062: ARRAY
73063: PPUSH
73064: CALL_OW 297
73068: ST_TO_ADDR
// if tmpDist < dist then
73069: LD_VAR 0 6
73073: PUSH
73074: LD_VAR 0 5
73078: LESS
73079: IFFALSE 73101
// begin result := i ;
73081: LD_ADDR_VAR 0 3
73085: PUSH
73086: LD_VAR 0 4
73090: ST_TO_ADDR
// dist := tmpDist ;
73091: LD_ADDR_VAR 0 5
73095: PUSH
73096: LD_VAR 0 6
73100: ST_TO_ADDR
// end ; end ;
73101: GO 73033
73103: POP
73104: POP
// end ;
73105: LD_VAR 0 3
73109: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
73110: LD_INT 0
73112: PPUSH
// uc_side := side ;
73113: LD_ADDR_OWVAR 20
73117: PUSH
73118: LD_VAR 0 1
73122: ST_TO_ADDR
// uc_nation := 3 ;
73123: LD_ADDR_OWVAR 21
73127: PUSH
73128: LD_INT 3
73130: ST_TO_ADDR
// vc_chassis := 25 ;
73131: LD_ADDR_OWVAR 37
73135: PUSH
73136: LD_INT 25
73138: ST_TO_ADDR
// vc_engine := engine_siberite ;
73139: LD_ADDR_OWVAR 39
73143: PUSH
73144: LD_INT 3
73146: ST_TO_ADDR
// vc_control := control_computer ;
73147: LD_ADDR_OWVAR 38
73151: PUSH
73152: LD_INT 3
73154: ST_TO_ADDR
// vc_weapon := 59 ;
73155: LD_ADDR_OWVAR 40
73159: PUSH
73160: LD_INT 59
73162: ST_TO_ADDR
// result := CreateVehicle ;
73163: LD_ADDR_VAR 0 5
73167: PUSH
73168: CALL_OW 45
73172: ST_TO_ADDR
// SetDir ( result , d ) ;
73173: LD_VAR 0 5
73177: PPUSH
73178: LD_VAR 0 4
73182: PPUSH
73183: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
73187: LD_VAR 0 5
73191: PPUSH
73192: LD_VAR 0 2
73196: PPUSH
73197: LD_VAR 0 3
73201: PPUSH
73202: LD_INT 0
73204: PPUSH
73205: CALL_OW 48
// end ;
73209: LD_VAR 0 5
73213: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
73214: LD_INT 0
73216: PPUSH
73217: PPUSH
73218: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
73219: LD_ADDR_VAR 0 2
73223: PUSH
73224: LD_INT 0
73226: PUSH
73227: LD_INT 0
73229: PUSH
73230: LD_INT 0
73232: PUSH
73233: LD_INT 0
73235: PUSH
73236: EMPTY
73237: LIST
73238: LIST
73239: LIST
73240: LIST
73241: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
73242: LD_VAR 0 1
73246: NOT
73247: PUSH
73248: LD_VAR 0 1
73252: PPUSH
73253: CALL_OW 264
73257: PUSH
73258: LD_INT 12
73260: PUSH
73261: LD_INT 51
73263: PUSH
73264: LD_INT 32
73266: PUSH
73267: LD_INT 89
73269: PUSH
73270: EMPTY
73271: LIST
73272: LIST
73273: LIST
73274: LIST
73275: IN
73276: NOT
73277: OR
73278: IFFALSE 73282
// exit ;
73280: GO 73380
// for i := 1 to 3 do
73282: LD_ADDR_VAR 0 3
73286: PUSH
73287: DOUBLE
73288: LD_INT 1
73290: DEC
73291: ST_TO_ADDR
73292: LD_INT 3
73294: PUSH
73295: FOR_TO
73296: IFFALSE 73378
// begin tmp := GetCargo ( cargo , i ) ;
73298: LD_ADDR_VAR 0 4
73302: PUSH
73303: LD_VAR 0 1
73307: PPUSH
73308: LD_VAR 0 3
73312: PPUSH
73313: CALL_OW 289
73317: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
73318: LD_ADDR_VAR 0 2
73322: PUSH
73323: LD_VAR 0 2
73327: PPUSH
73328: LD_VAR 0 3
73332: PPUSH
73333: LD_VAR 0 4
73337: PPUSH
73338: CALL_OW 1
73342: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
73343: LD_ADDR_VAR 0 2
73347: PUSH
73348: LD_VAR 0 2
73352: PPUSH
73353: LD_INT 4
73355: PPUSH
73356: LD_VAR 0 2
73360: PUSH
73361: LD_INT 4
73363: ARRAY
73364: PUSH
73365: LD_VAR 0 4
73369: PLUS
73370: PPUSH
73371: CALL_OW 1
73375: ST_TO_ADDR
// end ;
73376: GO 73295
73378: POP
73379: POP
// end ;
73380: LD_VAR 0 2
73384: RET
// export function Length ( array ) ; begin
73385: LD_INT 0
73387: PPUSH
// result := array + 0 ;
73388: LD_ADDR_VAR 0 2
73392: PUSH
73393: LD_VAR 0 1
73397: PUSH
73398: LD_INT 0
73400: PLUS
73401: ST_TO_ADDR
// end ;
73402: LD_VAR 0 2
73406: RET
// export function PrepareArray ( array ) ; begin
73407: LD_INT 0
73409: PPUSH
// result := array diff 0 ;
73410: LD_ADDR_VAR 0 2
73414: PUSH
73415: LD_VAR 0 1
73419: PUSH
73420: LD_INT 0
73422: DIFF
73423: ST_TO_ADDR
// if not result [ 1 ] then
73424: LD_VAR 0 2
73428: PUSH
73429: LD_INT 1
73431: ARRAY
73432: NOT
73433: IFFALSE 73453
// result := Delete ( result , 1 ) ;
73435: LD_ADDR_VAR 0 2
73439: PUSH
73440: LD_VAR 0 2
73444: PPUSH
73445: LD_INT 1
73447: PPUSH
73448: CALL_OW 3
73452: ST_TO_ADDR
// end ;
73453: LD_VAR 0 2
73457: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
73458: LD_INT 0
73460: PPUSH
73461: PPUSH
73462: PPUSH
73463: PPUSH
// sibRocketRange := 25 ;
73464: LD_ADDR_VAR 0 6
73468: PUSH
73469: LD_INT 25
73471: ST_TO_ADDR
// result := false ;
73472: LD_ADDR_VAR 0 4
73476: PUSH
73477: LD_INT 0
73479: ST_TO_ADDR
// for i := 0 to 5 do
73480: LD_ADDR_VAR 0 5
73484: PUSH
73485: DOUBLE
73486: LD_INT 0
73488: DEC
73489: ST_TO_ADDR
73490: LD_INT 5
73492: PUSH
73493: FOR_TO
73494: IFFALSE 73561
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
73496: LD_VAR 0 1
73500: PPUSH
73501: LD_VAR 0 5
73505: PPUSH
73506: LD_VAR 0 6
73510: PPUSH
73511: CALL_OW 272
73515: PPUSH
73516: LD_VAR 0 2
73520: PPUSH
73521: LD_VAR 0 5
73525: PPUSH
73526: LD_VAR 0 6
73530: PPUSH
73531: CALL_OW 273
73535: PPUSH
73536: LD_VAR 0 3
73540: PPUSH
73541: CALL_OW 309
73545: IFFALSE 73559
// begin result := true ;
73547: LD_ADDR_VAR 0 4
73551: PUSH
73552: LD_INT 1
73554: ST_TO_ADDR
// exit ;
73555: POP
73556: POP
73557: GO 73563
// end ;
73559: GO 73493
73561: POP
73562: POP
// end ;
73563: LD_VAR 0 4
73567: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
73568: LD_INT 0
73570: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
73571: LD_VAR 0 1
73575: PPUSH
73576: LD_VAR 0 2
73580: PPUSH
73581: LD_INT 0
73583: PPUSH
73584: LD_INT 0
73586: PPUSH
73587: LD_INT 1
73589: PPUSH
73590: LD_INT 0
73592: PPUSH
73593: CALL_OW 587
// end ; end_of_file
73597: LD_VAR 0 3
73601: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
73602: LD_VAR 0 1
73606: PUSH
73607: LD_INT 200
73609: DOUBLE
73610: GREATEREQUAL
73611: IFFALSE 73619
73613: LD_INT 299
73615: DOUBLE
73616: LESSEQUAL
73617: IFTRUE 73621
73619: GO 73653
73621: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
73622: LD_VAR 0 1
73626: PPUSH
73627: LD_VAR 0 2
73631: PPUSH
73632: LD_VAR 0 3
73636: PPUSH
73637: LD_VAR 0 4
73641: PPUSH
73642: LD_VAR 0 5
73646: PPUSH
73647: CALL 28287 0 5
73651: GO 73730
73653: LD_INT 300
73655: DOUBLE
73656: GREATEREQUAL
73657: IFFALSE 73665
73659: LD_INT 399
73661: DOUBLE
73662: LESSEQUAL
73663: IFTRUE 73667
73665: GO 73729
73667: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
73668: LD_VAR 0 1
73672: PPUSH
73673: LD_VAR 0 2
73677: PPUSH
73678: LD_VAR 0 3
73682: PPUSH
73683: LD_VAR 0 4
73687: PPUSH
73688: LD_VAR 0 5
73692: PPUSH
73693: LD_VAR 0 6
73697: PPUSH
73698: LD_VAR 0 7
73702: PPUSH
73703: LD_VAR 0 8
73707: PPUSH
73708: LD_VAR 0 9
73712: PPUSH
73713: LD_VAR 0 10
73717: PPUSH
73718: LD_VAR 0 11
73722: PPUSH
73723: CALL 24620 0 11
73727: GO 73730
73729: POP
// end ;
73730: PPOPN 11
73732: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
73733: LD_VAR 0 1
73737: PPUSH
73738: LD_VAR 0 2
73742: PPUSH
73743: LD_VAR 0 3
73747: PPUSH
73748: LD_VAR 0 4
73752: PPUSH
73753: LD_VAR 0 5
73757: PPUSH
73758: CALL 28023 0 5
// end ; end_of_file
73762: PPOPN 5
73764: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
73765: LD_VAR 0 1
73769: PPUSH
73770: LD_VAR 0 2
73774: PPUSH
73775: LD_VAR 0 3
73779: PPUSH
73780: LD_VAR 0 4
73784: PPUSH
73785: LD_VAR 0 5
73789: PPUSH
73790: LD_VAR 0 6
73794: PPUSH
73795: CALL 12313 0 6
// end ;
73799: PPOPN 6
73801: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
73802: LD_INT 0
73804: PPUSH
// begin if not units then
73805: LD_VAR 0 1
73809: NOT
73810: IFFALSE 73814
// exit ;
73812: GO 73814
// end ;
73814: PPOPN 7
73816: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
73817: CALL 12284 0 0
// end ;
73821: PPOPN 1
73823: END
