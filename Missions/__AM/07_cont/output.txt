// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// Init ;
   8: CALL 44 0 0
// DebugMode ;
  12: CALL 265 0 0
// AnimateTrees ( true ) ;
  16: LD_INT 1
  18: PPUSH
  19: CALL_OW 573
// CreateNature ;
  23: CALL 1543 0 0
// PrepareRussians ;
  27: CALL 4553 0 0
// PrepareAmericans ;
  31: CALL 3423 0 0
// Action ;
  35: CALL 8457 0 0
// SaveForQuickRestart ;
  39: CALL_OW 22
// end ;
  43: END
// export debug ; export mission_prev_prefix , mission_prefix ; export buildings_counter , time_to_end , can_end , must_end , kill_counter ; function Init ; begin
  44: LD_INT 0
  46: PPUSH
// debug := false ;
  47: LD_ADDR_EXP 1
  51: PUSH
  52: LD_INT 0
  54: ST_TO_ADDR
// mission_prefix := 07c_ ;
  55: LD_ADDR_EXP 3
  59: PUSH
  60: LD_STRING 07c_
  62: ST_TO_ADDR
// mission_prev_prefix := 07_ ;
  63: LD_ADDR_EXP 2
  67: PUSH
  68: LD_STRING 07_
  70: ST_TO_ADDR
// buildings_counter := 0 ;
  71: LD_ADDR_EXP 4
  75: PUSH
  76: LD_INT 0
  78: ST_TO_ADDR
// time_to_end := [ [ 32 32$00 , 29 29$00 , 26 26$00 , 25 25$00 ] [ Difficulty ] , [ 38 38$00 , 35 35$00 , 32 32$00 , 31 31$00 ] [ Difficulty ] , [ 44 44$00 , 41 41$00 , 38 38$00 , 37 37$00 ] [ Difficulty ] ] ;
  79: LD_ADDR_EXP 5
  83: PUSH
  84: LD_INT 67200
  86: PUSH
  87: LD_INT 60900
  89: PUSH
  90: LD_INT 54600
  92: PUSH
  93: LD_INT 52500
  95: PUSH
  96: EMPTY
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: PUSH
 102: LD_OWVAR 67
 106: ARRAY
 107: PUSH
 108: LD_INT 79800
 110: PUSH
 111: LD_INT 73500
 113: PUSH
 114: LD_INT 67200
 116: PUSH
 117: LD_INT 65100
 119: PUSH
 120: EMPTY
 121: LIST
 122: LIST
 123: LIST
 124: LIST
 125: PUSH
 126: LD_OWVAR 67
 130: ARRAY
 131: PUSH
 132: LD_INT 92400
 134: PUSH
 135: LD_INT 86100
 137: PUSH
 138: LD_INT 79800
 140: PUSH
 141: LD_INT 77700
 143: PUSH
 144: EMPTY
 145: LIST
 146: LIST
 147: LIST
 148: LIST
 149: PUSH
 150: LD_OWVAR 67
 154: ARRAY
 155: PUSH
 156: EMPTY
 157: LIST
 158: LIST
 159: LIST
 160: ST_TO_ADDR
// can_end := false ;
 161: LD_ADDR_EXP 6
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// must_end := false ;
 169: LD_ADDR_EXP 7
 173: PUSH
 174: LD_INT 0
 176: ST_TO_ADDR
// kill_counter := 0 ;
 177: LD_ADDR_EXP 8
 181: PUSH
 182: LD_INT 0
 184: ST_TO_ADDR
// end ;
 185: LD_VAR 0 1
 189: RET
// every 0 0$01 trigger not debug do
 190: LD_EXP 1
 194: NOT
 195: IFFALSE 264
 197: GO 199
 199: DISABLE
// begin enable ;
 200: ENABLE
// if not must_end then
 201: LD_EXP 7
 205: NOT
 206: IFFALSE 227
// display_strings := [ #Am07-1 , tick ] else
 208: LD_ADDR_OWVAR 47
 212: PUSH
 213: LD_STRING #Am07-1
 215: PUSH
 216: LD_OWVAR 1
 220: PUSH
 221: EMPTY
 222: LIST
 223: LIST
 224: ST_TO_ADDR
 225: GO 264
// display_strings := [ #Am07-1 , tick , #Am07-2 , time_to_end [ 3 ] - tick ] ;
 227: LD_ADDR_OWVAR 47
 231: PUSH
 232: LD_STRING #Am07-1
 234: PUSH
 235: LD_OWVAR 1
 239: PUSH
 240: LD_STRING #Am07-2
 242: PUSH
 243: LD_EXP 5
 247: PUSH
 248: LD_INT 3
 250: ARRAY
 251: PUSH
 252: LD_OWVAR 1
 256: MINUS
 257: PUSH
 258: EMPTY
 259: LIST
 260: LIST
 261: LIST
 262: LIST
 263: ST_TO_ADDR
// end ;
 264: END
// function DebugMode ; var i ; begin
 265: LD_INT 0
 267: PPUSH
 268: PPUSH
// if not debug then
 269: LD_EXP 1
 273: NOT
 274: IFFALSE 278
// exit ;
 276: GO 285
// FogOff ( 1 ) ;
 278: LD_INT 1
 280: PPUSH
 281: CALL_OW 344
// end ;
 285: LD_VAR 0 1
 289: RET
// every 3 trigger debug do var i , filter ;
 290: LD_EXP 1
 294: IFFALSE 383
 296: GO 298
 298: DISABLE
 299: LD_INT 0
 301: PPUSH
 302: PPUSH
// begin enable ;
 303: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 500 ] ] ] ) ;
 304: LD_ADDR_VAR 0 2
 308: PUSH
 309: LD_INT 22
 311: PUSH
 312: LD_INT 1
 314: PUSH
 315: EMPTY
 316: LIST
 317: LIST
 318: PUSH
 319: LD_INT 3
 321: PUSH
 322: LD_INT 24
 324: PUSH
 325: LD_INT 500
 327: PUSH
 328: EMPTY
 329: LIST
 330: LIST
 331: PUSH
 332: EMPTY
 333: LIST
 334: LIST
 335: PUSH
 336: EMPTY
 337: LIST
 338: LIST
 339: PPUSH
 340: CALL_OW 69
 344: ST_TO_ADDR
// if not filter then
 345: LD_VAR 0 2
 349: NOT
 350: IFFALSE 354
// exit ;
 352: GO 383
// for i in filter do
 354: LD_ADDR_VAR 0 1
 358: PUSH
 359: LD_VAR 0 2
 363: PUSH
 364: FOR_IN
 365: IFFALSE 381
// SetLives ( i , 1000 ) ;
 367: LD_VAR 0 1
 371: PPUSH
 372: LD_INT 1000
 374: PPUSH
 375: CALL_OW 234
 379: GO 364
 381: POP
 382: POP
// end ;
 383: PPOPN 2
 385: END
// every 0 0$1 trigger kill_counter >= 20 do
 386: LD_EXP 8
 390: PUSH
 391: LD_INT 20
 393: GREATEREQUAL
 394: IFFALSE 406
 396: GO 398
 398: DISABLE
// SetAchievement ( ACH_HITMAN ) ;
 399: LD_STRING ACH_HITMAN
 401: PPUSH
 402: CALL_OW 543
 406: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] ] ) >= 3 do
 407: LD_INT 22
 409: PUSH
 410: LD_INT 1
 412: PUSH
 413: EMPTY
 414: LIST
 415: LIST
 416: PUSH
 417: LD_INT 23
 419: PUSH
 420: LD_INT 3
 422: PUSH
 423: EMPTY
 424: LIST
 425: LIST
 426: PUSH
 427: LD_INT 21
 429: PUSH
 430: LD_INT 2
 432: PUSH
 433: EMPTY
 434: LIST
 435: LIST
 436: PUSH
 437: EMPTY
 438: LIST
 439: LIST
 440: LIST
 441: PPUSH
 442: CALL_OW 69
 446: PUSH
 447: LD_INT 3
 449: GREATEREQUAL
 450: IFFALSE 462
 452: GO 454
 454: DISABLE
// SetAchievement ( ACH_TANKACE ) ;
 455: LD_STRING ACH_TANKACE
 457: PPUSH
 458: CALL_OW 543
 462: END
// every 0 0$1 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) = 0 do
 463: LD_INT 2
 465: PUSH
 466: LD_INT 30
 468: PUSH
 469: LD_INT 0
 471: PUSH
 472: EMPTY
 473: LIST
 474: LIST
 475: PUSH
 476: LD_INT 30
 478: PUSH
 479: LD_INT 1
 481: PUSH
 482: EMPTY
 483: LIST
 484: LIST
 485: PUSH
 486: EMPTY
 487: LIST
 488: LIST
 489: LIST
 490: PPUSH
 491: CALL_OW 69
 495: PUSH
 496: LD_INT 0
 498: EQUAL
 499: IFFALSE 511
 501: GO 503
 503: DISABLE
// SetAchievement ( ACH_COMMANDO ) ; end_of_file
 504: LD_STRING ACH_COMMANDO
 506: PPUSH
 507: CALL_OW 543
 511: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 512: LD_INT 0
 514: PPUSH
// uc_side := side ;
 515: LD_ADDR_OWVAR 20
 519: PUSH
 520: LD_VAR 0 1
 524: ST_TO_ADDR
// uc_nation := nation ;
 525: LD_ADDR_OWVAR 21
 529: PUSH
 530: LD_VAR 0 2
 534: ST_TO_ADDR
// vc_chassis := chassis ;
 535: LD_ADDR_OWVAR 37
 539: PUSH
 540: LD_VAR 0 3
 544: ST_TO_ADDR
// vc_engine := engine ;
 545: LD_ADDR_OWVAR 39
 549: PUSH
 550: LD_VAR 0 4
 554: ST_TO_ADDR
// vc_control := control ;
 555: LD_ADDR_OWVAR 38
 559: PUSH
 560: LD_VAR 0 5
 564: ST_TO_ADDR
// vc_weapon := weapon ;
 565: LD_ADDR_OWVAR 40
 569: PUSH
 570: LD_VAR 0 6
 574: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 575: LD_ADDR_OWVAR 41
 579: PUSH
 580: LD_VAR 0 7
 584: ST_TO_ADDR
// result := CreateVehicle ;
 585: LD_ADDR_VAR 0 8
 589: PUSH
 590: CALL_OW 45
 594: ST_TO_ADDR
// end ;
 595: LD_VAR 0 8
 599: RET
// export function GetRandom ( sex ) ; var i , filter ; begin
 600: LD_INT 0
 602: PPUSH
 603: PPUSH
 604: PPUSH
// filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam ] ;
 605: LD_ADDR_VAR 0 4
 609: PUSH
 610: LD_INT 22
 612: PUSH
 613: LD_INT 1
 615: PUSH
 616: EMPTY
 617: LIST
 618: LIST
 619: PUSH
 620: LD_INT 21
 622: PUSH
 623: LD_INT 1
 625: PUSH
 626: EMPTY
 627: LIST
 628: LIST
 629: PUSH
 630: LD_INT 50
 632: PUSH
 633: EMPTY
 634: LIST
 635: PUSH
 636: EMPTY
 637: LIST
 638: LIST
 639: LIST
 640: PPUSH
 641: CALL_OW 69
 645: PUSH
 646: LD_EXP 9
 650: PUSH
 651: LD_EXP 10
 655: PUSH
 656: LD_EXP 11
 660: PUSH
 661: LD_EXP 12
 665: PUSH
 666: LD_EXP 13
 670: PUSH
 671: LD_EXP 14
 675: PUSH
 676: LD_EXP 15
 680: PUSH
 681: LD_EXP 16
 685: PUSH
 686: LD_EXP 18
 690: PUSH
 691: LD_EXP 17
 695: PUSH
 696: EMPTY
 697: LIST
 698: LIST
 699: LIST
 700: LIST
 701: LIST
 702: LIST
 703: LIST
 704: LIST
 705: LIST
 706: LIST
 707: DIFF
 708: ST_TO_ADDR
// if not filter then
 709: LD_VAR 0 4
 713: NOT
 714: IFFALSE 718
// exit ;
 716: GO 745
// result := UnitFilter ( filter , [ f_sex , sex ] ) ;
 718: LD_ADDR_VAR 0 2
 722: PUSH
 723: LD_VAR 0 4
 727: PPUSH
 728: LD_INT 26
 730: PUSH
 731: LD_VAR 0 1
 735: PUSH
 736: EMPTY
 737: LIST
 738: LIST
 739: PPUSH
 740: CALL_OW 72
 744: ST_TO_ADDR
// end ;
 745: LD_VAR 0 2
 749: RET
// export function SayX ( units , ident ) ; var i ; begin
 750: LD_INT 0
 752: PPUSH
 753: PPUSH
// result := false ;
 754: LD_ADDR_VAR 0 3
 758: PUSH
 759: LD_INT 0
 761: ST_TO_ADDR
// if not units then
 762: LD_VAR 0 1
 766: NOT
 767: IFFALSE 771
// exit ;
 769: GO 825
// for i in units do
 771: LD_ADDR_VAR 0 4
 775: PUSH
 776: LD_VAR 0 1
 780: PUSH
 781: FOR_IN
 782: IFFALSE 823
// if IsOk ( i ) then
 784: LD_VAR 0 4
 788: PPUSH
 789: CALL_OW 302
 793: IFFALSE 821
// begin Say ( i , ident ) ;
 795: LD_VAR 0 4
 799: PPUSH
 800: LD_VAR 0 2
 804: PPUSH
 805: CALL_OW 88
// result := i ;
 809: LD_ADDR_VAR 0 3
 813: PUSH
 814: LD_VAR 0 4
 818: ST_TO_ADDR
// break ;
 819: GO 823
// end ;
 821: GO 781
 823: POP
 824: POP
// end ;
 825: LD_VAR 0 3
 829: RET
// export function GoToAnotherTower ( un , b , x , y ) ; var i , filter , barracks , side ; begin
 830: LD_INT 0
 832: PPUSH
 833: PPUSH
 834: PPUSH
 835: PPUSH
 836: PPUSH
// if not un or not IsOk ( un ) then
 837: LD_VAR 0 1
 841: NOT
 842: PUSH
 843: LD_VAR 0 1
 847: PPUSH
 848: CALL_OW 302
 852: NOT
 853: OR
 854: IFFALSE 858
// exit ;
 856: GO 1148
// side := GetSide ( un ) ;
 858: LD_ADDR_VAR 0 9
 862: PUSH
 863: LD_VAR 0 1
 867: PPUSH
 868: CALL_OW 255
 872: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_ok ] , [ f_empty ] ] ) diff b ;
 873: LD_ADDR_VAR 0 7
 877: PUSH
 878: LD_INT 22
 880: PUSH
 881: LD_VAR 0 9
 885: PUSH
 886: EMPTY
 887: LIST
 888: LIST
 889: PUSH
 890: LD_INT 30
 892: PUSH
 893: LD_INT 32
 895: PUSH
 896: EMPTY
 897: LIST
 898: LIST
 899: PUSH
 900: LD_INT 50
 902: PUSH
 903: EMPTY
 904: LIST
 905: PUSH
 906: LD_INT 58
 908: PUSH
 909: EMPTY
 910: LIST
 911: PUSH
 912: EMPTY
 913: LIST
 914: LIST
 915: LIST
 916: LIST
 917: PPUSH
 918: CALL_OW 69
 922: PUSH
 923: LD_VAR 0 2
 927: DIFF
 928: ST_TO_ADDR
// barracks := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_barracks ] ] ) ;
 929: LD_ADDR_VAR 0 8
 933: PUSH
 934: LD_INT 22
 936: PUSH
 937: LD_VAR 0 9
 941: PUSH
 942: EMPTY
 943: LIST
 944: LIST
 945: PUSH
 946: LD_INT 30
 948: PUSH
 949: LD_INT 5
 951: PUSH
 952: EMPTY
 953: LIST
 954: LIST
 955: PUSH
 956: EMPTY
 957: LIST
 958: LIST
 959: PPUSH
 960: CALL_OW 69
 964: ST_TO_ADDR
// if not filter then
 965: LD_VAR 0 7
 969: NOT
 970: IFFALSE 1060
// begin ComMoveXY ( un , x , y ) ;
 972: LD_VAR 0 1
 976: PPUSH
 977: LD_VAR 0 3
 981: PPUSH
 982: LD_VAR 0 4
 986: PPUSH
 987: CALL_OW 111
// if barracks then
 991: LD_VAR 0 8
 995: IFFALSE 1058
// for i in barracks do
 997: LD_ADDR_VAR 0 6
1001: PUSH
1002: LD_VAR 0 8
1006: PUSH
1007: FOR_IN
1008: IFFALSE 1056
// begin if UnitsInside ( i ) < 6 and IsOk ( i ) then
1010: LD_VAR 0 6
1014: PPUSH
1015: CALL_OW 313
1019: PUSH
1020: LD_INT 6
1022: LESS
1023: PUSH
1024: LD_VAR 0 6
1028: PPUSH
1029: CALL_OW 302
1033: AND
1034: IFFALSE 1054
// begin AddComEnterUnit ( un , i ) ;
1036: LD_VAR 0 1
1040: PPUSH
1041: LD_VAR 0 6
1045: PPUSH
1046: CALL_OW 180
// exit ;
1050: POP
1051: POP
1052: GO 1148
// end ; end ;
1054: GO 1007
1056: POP
1057: POP
// end else
1058: GO 1148
// begin filter := SortByDistanceUnit ( un , filter , true , true ) ;
1060: LD_ADDR_VAR 0 7
1064: PUSH
1065: LD_VAR 0 1
1069: PPUSH
1070: LD_VAR 0 7
1074: PPUSH
1075: LD_INT 1
1077: PPUSH
1078: LD_INT 1
1080: PPUSH
1081: CALL 35378 0 4
1085: ST_TO_ADDR
// for i in filter do
1086: LD_ADDR_VAR 0 6
1090: PUSH
1091: LD_VAR 0 7
1095: PUSH
1096: FOR_IN
1097: IFFALSE 1146
// if GetTag ( i ) <> 7 then
1099: LD_VAR 0 6
1103: PPUSH
1104: CALL_OW 110
1108: PUSH
1109: LD_INT 7
1111: NONEQUAL
1112: IFFALSE 1144
// begin ComEnterUnit ( un , i ) ;
1114: LD_VAR 0 1
1118: PPUSH
1119: LD_VAR 0 6
1123: PPUSH
1124: CALL_OW 120
// SetTag ( i , 7 ) ;
1128: LD_VAR 0 6
1132: PPUSH
1133: LD_INT 7
1135: PPUSH
1136: CALL_OW 109
// exit ;
1140: POP
1141: POP
1142: GO 1148
// end ;
1144: GO 1096
1146: POP
1147: POP
// end ; end ;
1148: LD_VAR 0 5
1152: RET
// export function BaseNeedEnergy ( base ) ; var i , tmp ; begin
1153: LD_INT 0
1155: PPUSH
1156: PPUSH
1157: PPUSH
// if not base then
1158: LD_VAR 0 1
1162: NOT
1163: IFFALSE 1167
// exit ;
1165: GO 1225
// tmp := GetEnergy ( GetBase ( base ) ) ;
1167: LD_ADDR_VAR 0 4
1171: PUSH
1172: LD_VAR 0 1
1176: PPUSH
1177: CALL_OW 274
1181: PPUSH
1182: CALL_OW 278
1186: ST_TO_ADDR
// if tmp [ 1 ] > tmp [ 4 ] then
1187: LD_VAR 0 4
1191: PUSH
1192: LD_INT 1
1194: ARRAY
1195: PUSH
1196: LD_VAR 0 4
1200: PUSH
1201: LD_INT 4
1203: ARRAY
1204: GREATER
1205: IFFALSE 1217
// result := true else
1207: LD_ADDR_VAR 0 2
1211: PUSH
1212: LD_INT 1
1214: ST_TO_ADDR
1215: GO 1225
// result := false ;
1217: LD_ADDR_VAR 0 2
1221: PUSH
1222: LD_INT 0
1224: ST_TO_ADDR
// end ;
1225: LD_VAR 0 2
1229: RET
// export function FilterPeople ( side ) ; begin
1230: LD_INT 0
1232: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] ] ) ;
1233: LD_ADDR_VAR 0 2
1237: PUSH
1238: LD_INT 22
1240: PUSH
1241: LD_VAR 0 1
1245: PUSH
1246: EMPTY
1247: LIST
1248: LIST
1249: PUSH
1250: LD_INT 21
1252: PUSH
1253: LD_INT 1
1255: PUSH
1256: EMPTY
1257: LIST
1258: LIST
1259: PUSH
1260: EMPTY
1261: LIST
1262: LIST
1263: PPUSH
1264: CALL_OW 69
1268: ST_TO_ADDR
// end ;
1269: LD_VAR 0 2
1273: RET
// export function FilterDrivers ( side ) ; begin
1274: LD_INT 0
1276: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_outside ] ] ] ) ;
1277: LD_ADDR_VAR 0 2
1281: PUSH
1282: LD_INT 22
1284: PUSH
1285: LD_VAR 0 1
1289: PUSH
1290: EMPTY
1291: LIST
1292: LIST
1293: PUSH
1294: LD_INT 3
1296: PUSH
1297: LD_INT 56
1299: PUSH
1300: EMPTY
1301: LIST
1302: PUSH
1303: EMPTY
1304: LIST
1305: LIST
1306: PUSH
1307: EMPTY
1308: LIST
1309: LIST
1310: PPUSH
1311: CALL_OW 69
1315: ST_TO_ADDR
// end ;
1316: LD_VAR 0 2
1320: RET
// export function FilterPeopleArea ( side , area ) ; begin
1321: LD_INT 0
1323: PPUSH
// result := FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ;
1324: LD_ADDR_VAR 0 3
1328: PUSH
1329: LD_VAR 0 2
1333: PPUSH
1334: LD_INT 22
1336: PUSH
1337: LD_INT 1
1339: PUSH
1340: EMPTY
1341: LIST
1342: LIST
1343: PUSH
1344: LD_INT 21
1346: PUSH
1347: LD_INT 1
1349: PUSH
1350: EMPTY
1351: LIST
1352: LIST
1353: PUSH
1354: EMPTY
1355: LIST
1356: LIST
1357: PPUSH
1358: CALL_OW 70
1362: ST_TO_ADDR
// end ;
1363: LD_VAR 0 3
1367: RET
// export function FilterDriversArea ( side , area ) ; var i , tmp ; begin
1368: LD_INT 0
1370: PPUSH
1371: PPUSH
1372: PPUSH
// tmp := FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) ;
1373: LD_ADDR_VAR 0 5
1377: PUSH
1378: LD_VAR 0 2
1382: PPUSH
1383: LD_INT 22
1385: PUSH
1386: LD_INT 1
1388: PUSH
1389: EMPTY
1390: LIST
1391: LIST
1392: PUSH
1393: LD_INT 21
1395: PUSH
1396: LD_INT 2
1398: PUSH
1399: EMPTY
1400: LIST
1401: LIST
1402: PUSH
1403: LD_INT 3
1405: PUSH
1406: LD_INT 58
1408: PUSH
1409: EMPTY
1410: LIST
1411: PUSH
1412: EMPTY
1413: LIST
1414: LIST
1415: PUSH
1416: EMPTY
1417: LIST
1418: LIST
1419: LIST
1420: PPUSH
1421: CALL_OW 70
1425: ST_TO_ADDR
// result := [ ] ;
1426: LD_ADDR_VAR 0 3
1430: PUSH
1431: EMPTY
1432: ST_TO_ADDR
// if not tmp then
1433: LD_VAR 0 5
1437: NOT
1438: IFFALSE 1442
// exit ;
1440: GO 1494
// for i in tmp do
1442: LD_ADDR_VAR 0 4
1446: PUSH
1447: LD_VAR 0 5
1451: PUSH
1452: FOR_IN
1453: IFFALSE 1478
// result := result union IsDrivenBy ( i ) ;
1455: LD_ADDR_VAR 0 3
1459: PUSH
1460: LD_VAR 0 3
1464: PUSH
1465: LD_VAR 0 4
1469: PPUSH
1470: CALL_OW 311
1474: UNION
1475: ST_TO_ADDR
1476: GO 1452
1478: POP
1479: POP
// result := result diff 0 ;
1480: LD_ADDR_VAR 0 3
1484: PUSH
1485: LD_VAR 0 3
1489: PUSH
1490: LD_INT 0
1492: DIFF
1493: ST_TO_ADDR
// end ;
1494: LD_VAR 0 3
1498: RET
// export function FilterBuildings ( side ) ; begin
1499: LD_INT 0
1501: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
1502: LD_ADDR_VAR 0 2
1506: PUSH
1507: LD_INT 22
1509: PUSH
1510: LD_VAR 0 1
1514: PUSH
1515: EMPTY
1516: LIST
1517: LIST
1518: PUSH
1519: LD_INT 21
1521: PUSH
1522: LD_INT 3
1524: PUSH
1525: EMPTY
1526: LIST
1527: LIST
1528: PUSH
1529: EMPTY
1530: LIST
1531: LIST
1532: PPUSH
1533: CALL_OW 69
1537: ST_TO_ADDR
// end ;
1538: LD_VAR 0 2
1542: RET
// export function CreateNature ; var i , animal , nat_area ; begin
1543: LD_INT 0
1545: PPUSH
1546: PPUSH
1547: PPUSH
1548: PPUSH
// uc_side = 0 ;
1549: LD_ADDR_OWVAR 20
1553: PUSH
1554: LD_INT 0
1556: ST_TO_ADDR
// uc_nation = 0 ;
1557: LD_ADDR_OWVAR 21
1561: PUSH
1562: LD_INT 0
1564: ST_TO_ADDR
// nat_area := wildArea ;
1565: LD_ADDR_VAR 0 4
1569: PUSH
1570: LD_INT 3
1572: ST_TO_ADDR
// InitHc ;
1573: CALL_OW 19
// for i = 1 to 4 do
1577: LD_ADDR_VAR 0 2
1581: PUSH
1582: DOUBLE
1583: LD_INT 1
1585: DEC
1586: ST_TO_ADDR
1587: LD_INT 4
1589: PUSH
1590: FOR_TO
1591: IFFALSE 1646
// begin hc_class = 18 ;
1593: LD_ADDR_OWVAR 28
1597: PUSH
1598: LD_INT 18
1600: ST_TO_ADDR
// hc_gallery =  ;
1601: LD_ADDR_OWVAR 33
1605: PUSH
1606: LD_STRING 
1608: ST_TO_ADDR
// hc_face_number = 1 ;
1609: LD_ADDR_OWVAR 34
1613: PUSH
1614: LD_INT 1
1616: ST_TO_ADDR
// animal := CreateHuman ;
1617: LD_ADDR_VAR 0 3
1621: PUSH
1622: CALL_OW 44
1626: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
1627: LD_VAR 0 3
1631: PPUSH
1632: LD_VAR 0 4
1636: PPUSH
1637: LD_INT 0
1639: PPUSH
1640: CALL_OW 49
// end ;
1644: GO 1590
1646: POP
1647: POP
// for i = 1 to 6 do
1648: LD_ADDR_VAR 0 2
1652: PUSH
1653: DOUBLE
1654: LD_INT 1
1656: DEC
1657: ST_TO_ADDR
1658: LD_INT 6
1660: PUSH
1661: FOR_TO
1662: IFFALSE 1733
// begin hc_class = class_tiger ;
1664: LD_ADDR_OWVAR 28
1668: PUSH
1669: LD_INT 14
1671: ST_TO_ADDR
// hc_gallery =  ;
1672: LD_ADDR_OWVAR 33
1676: PUSH
1677: LD_STRING 
1679: ST_TO_ADDR
// hc_agressivity = Rand ( 0 , 10 ) ;
1680: LD_ADDR_OWVAR 35
1684: PUSH
1685: LD_INT 0
1687: PPUSH
1688: LD_INT 10
1690: PPUSH
1691: CALL_OW 12
1695: ST_TO_ADDR
// hc_face_number = 3 ;
1696: LD_ADDR_OWVAR 34
1700: PUSH
1701: LD_INT 3
1703: ST_TO_ADDR
// animal := CreateHuman ;
1704: LD_ADDR_VAR 0 3
1708: PUSH
1709: CALL_OW 44
1713: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
1714: LD_VAR 0 3
1718: PPUSH
1719: LD_VAR 0 4
1723: PPUSH
1724: LD_INT 0
1726: PPUSH
1727: CALL_OW 49
// end ;
1731: GO 1661
1733: POP
1734: POP
// for i = 1 to 2 do
1735: LD_ADDR_VAR 0 2
1739: PUSH
1740: DOUBLE
1741: LD_INT 1
1743: DEC
1744: ST_TO_ADDR
1745: LD_INT 2
1747: PUSH
1748: FOR_TO
1749: IFFALSE 1812
// begin hc_class = 21 ;
1751: LD_ADDR_OWVAR 28
1755: PUSH
1756: LD_INT 21
1758: ST_TO_ADDR
// hc_gallery =  ;
1759: LD_ADDR_OWVAR 33
1763: PUSH
1764: LD_STRING 
1766: ST_TO_ADDR
// hc_agressivity = 0 ;
1767: LD_ADDR_OWVAR 35
1771: PUSH
1772: LD_INT 0
1774: ST_TO_ADDR
// hc_face_number = 5 ;
1775: LD_ADDR_OWVAR 34
1779: PUSH
1780: LD_INT 5
1782: ST_TO_ADDR
// animal := CreateHuman ;
1783: LD_ADDR_VAR 0 3
1787: PUSH
1788: CALL_OW 44
1792: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
1793: LD_VAR 0 3
1797: PPUSH
1798: LD_VAR 0 4
1802: PPUSH
1803: LD_INT 0
1805: PPUSH
1806: CALL_OW 49
// end ;
1810: GO 1748
1812: POP
1813: POP
// for i = 1 to 6 do
1814: LD_ADDR_VAR 0 2
1818: PUSH
1819: DOUBLE
1820: LD_INT 1
1822: DEC
1823: ST_TO_ADDR
1824: LD_INT 6
1826: PUSH
1827: FOR_TO
1828: IFFALSE 1883
// begin hc_class = 13 ;
1830: LD_ADDR_OWVAR 28
1834: PUSH
1835: LD_INT 13
1837: ST_TO_ADDR
// hc_gallery =  ;
1838: LD_ADDR_OWVAR 33
1842: PUSH
1843: LD_STRING 
1845: ST_TO_ADDR
// hc_face_number = 4 ;
1846: LD_ADDR_OWVAR 34
1850: PUSH
1851: LD_INT 4
1853: ST_TO_ADDR
// animal := CreateHuman ;
1854: LD_ADDR_VAR 0 3
1858: PUSH
1859: CALL_OW 44
1863: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
1864: LD_VAR 0 3
1868: PPUSH
1869: LD_VAR 0 4
1873: PPUSH
1874: LD_INT 0
1876: PPUSH
1877: CALL_OW 49
// end ;
1881: GO 1827
1883: POP
1884: POP
// for i = 1 to 2 do
1885: LD_ADDR_VAR 0 2
1889: PUSH
1890: DOUBLE
1891: LD_INT 1
1893: DEC
1894: ST_TO_ADDR
1895: LD_INT 2
1897: PUSH
1898: FOR_TO
1899: IFFALSE 1958
// begin hc_class = 20 ;
1901: LD_ADDR_OWVAR 28
1905: PUSH
1906: LD_INT 20
1908: ST_TO_ADDR
// hc_gallery =  ;
1909: LD_ADDR_OWVAR 33
1913: PUSH
1914: LD_STRING 
1916: ST_TO_ADDR
// hc_face_number = 2 ;
1917: LD_ADDR_OWVAR 34
1921: PUSH
1922: LD_INT 2
1924: ST_TO_ADDR
// animal := CreateHuman ;
1925: LD_ADDR_VAR 0 3
1929: PUSH
1930: CALL_OW 44
1934: ST_TO_ADDR
// PlaceUnitXYR ( animal , 101 , 37 , 3 , false ) ;
1935: LD_VAR 0 3
1939: PPUSH
1940: LD_INT 101
1942: PPUSH
1943: LD_INT 37
1945: PPUSH
1946: LD_INT 3
1948: PPUSH
1949: LD_INT 0
1951: PPUSH
1952: CALL_OW 50
// end ;
1956: GO 1898
1958: POP
1959: POP
// for i = 1 to 1 do
1960: LD_ADDR_VAR 0 2
1964: PUSH
1965: DOUBLE
1966: LD_INT 1
1968: DEC
1969: ST_TO_ADDR
1970: LD_INT 1
1972: PUSH
1973: FOR_TO
1974: IFFALSE 2021
// begin vc_chassis := 31 ;
1976: LD_ADDR_OWVAR 37
1980: PUSH
1981: LD_INT 31
1983: ST_TO_ADDR
// vc_control := control_rider ;
1984: LD_ADDR_OWVAR 38
1988: PUSH
1989: LD_INT 4
1991: ST_TO_ADDR
// animal := CreateVehicle ;
1992: LD_ADDR_VAR 0 3
1996: PUSH
1997: CALL_OW 45
2001: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
2002: LD_VAR 0 3
2006: PPUSH
2007: LD_VAR 0 4
2011: PPUSH
2012: LD_INT 0
2014: PPUSH
2015: CALL_OW 49
// end ;
2019: GO 1973
2021: POP
2022: POP
// end ;
2023: LD_VAR 0 1
2027: RET
// export function NearbyTowerHasEnergy ( unit ) ; var i , tmp , energy ; begin
2028: LD_INT 0
2030: PPUSH
2031: PPUSH
2032: PPUSH
2033: PPUSH
// result := [ ] ;
2034: LD_ADDR_VAR 0 2
2038: PUSH
2039: EMPTY
2040: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( unit ) ] , [ f_dist , unit , 15 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) ;
2041: LD_ADDR_VAR 0 4
2045: PUSH
2046: LD_INT 81
2048: PUSH
2049: LD_VAR 0 1
2053: PPUSH
2054: CALL_OW 255
2058: PUSH
2059: EMPTY
2060: LIST
2061: LIST
2062: PUSH
2063: LD_INT 91
2065: PUSH
2066: LD_VAR 0 1
2070: PUSH
2071: LD_INT 15
2073: PUSH
2074: EMPTY
2075: LIST
2076: LIST
2077: LIST
2078: PUSH
2079: LD_INT 2
2081: PUSH
2082: LD_INT 30
2084: PUSH
2085: LD_INT 32
2087: PUSH
2088: EMPTY
2089: LIST
2090: LIST
2091: PUSH
2092: LD_INT 30
2094: PUSH
2095: LD_INT 33
2097: PUSH
2098: EMPTY
2099: LIST
2100: LIST
2101: PUSH
2102: EMPTY
2103: LIST
2104: LIST
2105: LIST
2106: PUSH
2107: EMPTY
2108: LIST
2109: LIST
2110: LIST
2111: PPUSH
2112: CALL_OW 69
2116: ST_TO_ADDR
// if not tmp then
2117: LD_VAR 0 4
2121: NOT
2122: IFFALSE 2126
// exit ;
2124: GO 2195
// for i in tmp do
2126: LD_ADDR_VAR 0 3
2130: PUSH
2131: LD_VAR 0 4
2135: PUSH
2136: FOR_IN
2137: IFFALSE 2193
// begin energy := GetEnergy ( GetBase ( i ) ) ;
2139: LD_ADDR_VAR 0 5
2143: PUSH
2144: LD_VAR 0 3
2148: PPUSH
2149: CALL_OW 274
2153: PPUSH
2154: CALL_OW 278
2158: ST_TO_ADDR
// if energy [ 4 ] > energy [ 1 ] then
2159: LD_VAR 0 5
2163: PUSH
2164: LD_INT 4
2166: ARRAY
2167: PUSH
2168: LD_VAR 0 5
2172: PUSH
2173: LD_INT 1
2175: ARRAY
2176: GREATER
2177: IFFALSE 2191
// begin result := i ;
2179: LD_ADDR_VAR 0 2
2183: PUSH
2184: LD_VAR 0 3
2188: ST_TO_ADDR
// break ;
2189: GO 2193
// end ; end ;
2191: GO 2136
2193: POP
2194: POP
// end ;
2195: LD_VAR 0 2
2199: RET
// export function GetTurretWeaponBase ( tower ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
2200: LD_INT 0
2202: PPUSH
2203: PPUSH
2204: PPUSH
2205: PPUSH
2206: PPUSH
2207: PPUSH
2208: PPUSH
2209: PPUSH
2210: PPUSH
2211: PPUSH
2212: PPUSH
2213: PPUSH
2214: PPUSH
2215: PPUSH
2216: PPUSH
2217: PPUSH
// result := false ;
2218: LD_ADDR_VAR 0 2
2222: PUSH
2223: LD_INT 0
2225: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
2226: LD_VAR 0 1
2230: NOT
2231: PUSH
2232: LD_VAR 0 1
2236: PPUSH
2237: CALL_OW 266
2241: PUSH
2242: LD_INT 32
2244: PUSH
2245: LD_INT 33
2247: PUSH
2248: EMPTY
2249: LIST
2250: LIST
2251: IN
2252: NOT
2253: OR
2254: IFFALSE 2258
// exit ;
2256: GO 3418
// nat := GetNation ( tower ) ;
2258: LD_ADDR_VAR 0 11
2262: PUSH
2263: LD_VAR 0 1
2267: PPUSH
2268: CALL_OW 248
2272: ST_TO_ADDR
// side := GetSide ( tower ) ;
2273: LD_ADDR_VAR 0 15
2277: PUSH
2278: LD_VAR 0 1
2282: PPUSH
2283: CALL_OW 255
2287: ST_TO_ADDR
// x := GetX ( tower ) ;
2288: LD_ADDR_VAR 0 9
2292: PUSH
2293: LD_VAR 0 1
2297: PPUSH
2298: CALL_OW 250
2302: ST_TO_ADDR
// y := GetY ( tower ) ;
2303: LD_ADDR_VAR 0 10
2307: PUSH
2308: LD_VAR 0 1
2312: PPUSH
2313: CALL_OW 251
2317: ST_TO_ADDR
// if not x or not y then
2318: LD_VAR 0 9
2322: NOT
2323: PUSH
2324: LD_VAR 0 10
2328: NOT
2329: OR
2330: IFFALSE 2334
// exit ;
2332: GO 3418
// weapon := 0 ;
2334: LD_ADDR_VAR 0 17
2338: PUSH
2339: LD_INT 0
2341: ST_TO_ADDR
// fac_list := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun ] ;
2342: LD_ADDR_VAR 0 16
2346: PUSH
2347: LD_INT 42
2349: PUSH
2350: LD_INT 43
2352: PUSH
2353: LD_INT 44
2355: PUSH
2356: LD_INT 46
2358: PUSH
2359: EMPTY
2360: LIST
2361: LIST
2362: LIST
2363: LIST
2364: ST_TO_ADDR
// if not fac_list then
2365: LD_VAR 0 16
2369: NOT
2370: IFFALSE 2374
// exit ;
2372: GO 3418
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
2374: LD_ADDR_VAR 0 4
2378: PUSH
2379: LD_INT 4
2381: PUSH
2382: LD_INT 5
2384: PUSH
2385: LD_INT 9
2387: PUSH
2388: LD_INT 10
2390: PUSH
2391: LD_INT 6
2393: PUSH
2394: LD_INT 7
2396: PUSH
2397: LD_INT 11
2399: PUSH
2400: EMPTY
2401: LIST
2402: LIST
2403: LIST
2404: LIST
2405: LIST
2406: LIST
2407: LIST
2408: PUSH
2409: LD_INT 27
2411: PUSH
2412: LD_INT 28
2414: PUSH
2415: LD_INT 26
2417: PUSH
2418: LD_INT 30
2420: PUSH
2421: EMPTY
2422: LIST
2423: LIST
2424: LIST
2425: LIST
2426: PUSH
2427: LD_INT 43
2429: PUSH
2430: LD_INT 44
2432: PUSH
2433: LD_INT 46
2435: PUSH
2436: LD_INT 45
2438: PUSH
2439: LD_INT 47
2441: PUSH
2442: LD_INT 49
2444: PUSH
2445: EMPTY
2446: LIST
2447: LIST
2448: LIST
2449: LIST
2450: LIST
2451: LIST
2452: PUSH
2453: EMPTY
2454: LIST
2455: LIST
2456: LIST
2457: PUSH
2458: LD_VAR 0 11
2462: ARRAY
2463: ST_TO_ADDR
// for i in list do
2464: LD_ADDR_VAR 0 7
2468: PUSH
2469: LD_VAR 0 4
2473: PUSH
2474: FOR_IN
2475: IFFALSE 2508
// if not i in fac_list then
2477: LD_VAR 0 7
2481: PUSH
2482: LD_VAR 0 16
2486: IN
2487: NOT
2488: IFFALSE 2506
// list := list diff i ;
2490: LD_ADDR_VAR 0 4
2494: PUSH
2495: LD_VAR 0 4
2499: PUSH
2500: LD_VAR 0 7
2504: DIFF
2505: ST_TO_ADDR
2506: GO 2474
2508: POP
2509: POP
// if not list then
2510: LD_VAR 0 4
2514: NOT
2515: IFFALSE 2519
// exit ;
2517: GO 3418
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
2519: LD_VAR 0 11
2523: PUSH
2524: LD_INT 3
2526: EQUAL
2527: PUSH
2528: LD_INT 49
2530: PUSH
2531: LD_VAR 0 4
2535: IN
2536: AND
2537: PUSH
2538: LD_INT 31
2540: PPUSH
2541: LD_VAR 0 15
2545: PPUSH
2546: CALL_OW 321
2550: PUSH
2551: LD_INT 2
2553: EQUAL
2554: AND
2555: IFFALSE 2615
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
2557: LD_INT 22
2559: PUSH
2560: LD_VAR 0 15
2564: PUSH
2565: EMPTY
2566: LIST
2567: LIST
2568: PUSH
2569: LD_INT 35
2571: PUSH
2572: LD_INT 49
2574: PUSH
2575: EMPTY
2576: LIST
2577: LIST
2578: PUSH
2579: LD_INT 91
2581: PUSH
2582: LD_VAR 0 1
2586: PUSH
2587: LD_INT 10
2589: PUSH
2590: EMPTY
2591: LIST
2592: LIST
2593: LIST
2594: PUSH
2595: EMPTY
2596: LIST
2597: LIST
2598: LIST
2599: PPUSH
2600: CALL_OW 69
2604: NOT
2605: IFFALSE 2615
// weapon := ru_time_lapser ;
2607: LD_ADDR_VAR 0 17
2611: PUSH
2612: LD_INT 49
2614: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
2615: LD_VAR 0 11
2619: PUSH
2620: LD_INT 1
2622: PUSH
2623: LD_INT 2
2625: PUSH
2626: EMPTY
2627: LIST
2628: LIST
2629: IN
2630: PUSH
2631: LD_INT 11
2633: PUSH
2634: LD_VAR 0 4
2638: IN
2639: PUSH
2640: LD_INT 30
2642: PUSH
2643: LD_VAR 0 4
2647: IN
2648: OR
2649: AND
2650: PUSH
2651: LD_INT 6
2653: PPUSH
2654: LD_VAR 0 15
2658: PPUSH
2659: CALL_OW 321
2663: PUSH
2664: LD_INT 2
2666: EQUAL
2667: AND
2668: IFFALSE 2833
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
2670: LD_INT 22
2672: PUSH
2673: LD_VAR 0 15
2677: PUSH
2678: EMPTY
2679: LIST
2680: LIST
2681: PUSH
2682: LD_INT 2
2684: PUSH
2685: LD_INT 35
2687: PUSH
2688: LD_INT 11
2690: PUSH
2691: EMPTY
2692: LIST
2693: LIST
2694: PUSH
2695: LD_INT 35
2697: PUSH
2698: LD_INT 30
2700: PUSH
2701: EMPTY
2702: LIST
2703: LIST
2704: PUSH
2705: EMPTY
2706: LIST
2707: LIST
2708: LIST
2709: PUSH
2710: LD_INT 91
2712: PUSH
2713: LD_VAR 0 1
2717: PUSH
2718: LD_INT 18
2720: PUSH
2721: EMPTY
2722: LIST
2723: LIST
2724: LIST
2725: PUSH
2726: EMPTY
2727: LIST
2728: LIST
2729: LIST
2730: PPUSH
2731: CALL_OW 69
2735: NOT
2736: PUSH
2737: LD_INT 22
2739: PUSH
2740: LD_VAR 0 15
2744: PUSH
2745: EMPTY
2746: LIST
2747: LIST
2748: PUSH
2749: LD_INT 2
2751: PUSH
2752: LD_INT 30
2754: PUSH
2755: LD_INT 32
2757: PUSH
2758: EMPTY
2759: LIST
2760: LIST
2761: PUSH
2762: LD_INT 30
2764: PUSH
2765: LD_INT 33
2767: PUSH
2768: EMPTY
2769: LIST
2770: LIST
2771: PUSH
2772: EMPTY
2773: LIST
2774: LIST
2775: LIST
2776: PUSH
2777: LD_INT 91
2779: PUSH
2780: LD_VAR 0 1
2784: PUSH
2785: LD_INT 12
2787: PUSH
2788: EMPTY
2789: LIST
2790: LIST
2791: LIST
2792: PUSH
2793: EMPTY
2794: LIST
2795: LIST
2796: LIST
2797: PUSH
2798: EMPTY
2799: LIST
2800: PPUSH
2801: CALL_OW 69
2805: PUSH
2806: LD_INT 2
2808: GREATER
2809: AND
2810: IFFALSE 2833
// weapon := [ us_radar , ar_radar ] [ nat ] ;
2812: LD_ADDR_VAR 0 17
2816: PUSH
2817: LD_INT 11
2819: PUSH
2820: LD_INT 30
2822: PUSH
2823: EMPTY
2824: LIST
2825: LIST
2826: PUSH
2827: LD_VAR 0 11
2831: ARRAY
2832: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
2833: LD_VAR 0 17
2837: NOT
2838: PUSH
2839: LD_INT 40
2841: PPUSH
2842: LD_VAR 0 15
2846: PPUSH
2847: CALL_OW 321
2851: PUSH
2852: LD_INT 2
2854: EQUAL
2855: AND
2856: PUSH
2857: LD_INT 7
2859: PUSH
2860: LD_VAR 0 4
2864: IN
2865: PUSH
2866: LD_INT 28
2868: PUSH
2869: LD_VAR 0 4
2873: IN
2874: OR
2875: PUSH
2876: LD_INT 45
2878: PUSH
2879: LD_VAR 0 4
2883: IN
2884: OR
2885: AND
2886: IFFALSE 3140
// begin hex := GetHexInfo ( x , y ) ;
2888: LD_ADDR_VAR 0 3
2892: PUSH
2893: LD_VAR 0 9
2897: PPUSH
2898: LD_VAR 0 10
2902: PPUSH
2903: CALL_OW 546
2907: ST_TO_ADDR
// if hex [ 1 ] then
2908: LD_VAR 0 3
2912: PUSH
2913: LD_INT 1
2915: ARRAY
2916: IFFALSE 2920
// exit ;
2918: GO 3418
// height := hex [ 2 ] ;
2920: LD_ADDR_VAR 0 14
2924: PUSH
2925: LD_VAR 0 3
2929: PUSH
2930: LD_INT 2
2932: ARRAY
2933: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
2934: LD_ADDR_VAR 0 13
2938: PUSH
2939: LD_INT 0
2941: PUSH
2942: LD_INT 2
2944: PUSH
2945: LD_INT 3
2947: PUSH
2948: LD_INT 5
2950: PUSH
2951: EMPTY
2952: LIST
2953: LIST
2954: LIST
2955: LIST
2956: ST_TO_ADDR
// for i in tmp do
2957: LD_ADDR_VAR 0 7
2961: PUSH
2962: LD_VAR 0 13
2966: PUSH
2967: FOR_IN
2968: IFFALSE 3138
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
2970: LD_ADDR_VAR 0 8
2974: PUSH
2975: LD_VAR 0 9
2979: PPUSH
2980: LD_VAR 0 7
2984: PPUSH
2985: LD_INT 5
2987: PPUSH
2988: CALL_OW 272
2992: PUSH
2993: LD_VAR 0 10
2997: PPUSH
2998: LD_VAR 0 7
3002: PPUSH
3003: LD_INT 5
3005: PPUSH
3006: CALL_OW 273
3010: PUSH
3011: EMPTY
3012: LIST
3013: LIST
3014: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
3015: LD_VAR 0 8
3019: PUSH
3020: LD_INT 1
3022: ARRAY
3023: PPUSH
3024: LD_VAR 0 8
3028: PUSH
3029: LD_INT 2
3031: ARRAY
3032: PPUSH
3033: CALL_OW 488
3037: IFFALSE 3136
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
3039: LD_ADDR_VAR 0 3
3043: PUSH
3044: LD_VAR 0 8
3048: PUSH
3049: LD_INT 1
3051: ARRAY
3052: PPUSH
3053: LD_VAR 0 8
3057: PUSH
3058: LD_INT 2
3060: ARRAY
3061: PPUSH
3062: CALL_OW 546
3066: ST_TO_ADDR
// if hex [ 1 ] then
3067: LD_VAR 0 3
3071: PUSH
3072: LD_INT 1
3074: ARRAY
3075: IFFALSE 3079
// continue ;
3077: GO 2967
// h := hex [ 2 ] ;
3079: LD_ADDR_VAR 0 12
3083: PUSH
3084: LD_VAR 0 3
3088: PUSH
3089: LD_INT 2
3091: ARRAY
3092: ST_TO_ADDR
// if h + 7 < height then
3093: LD_VAR 0 12
3097: PUSH
3098: LD_INT 7
3100: PLUS
3101: PUSH
3102: LD_VAR 0 14
3106: LESS
3107: IFFALSE 3136
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
3109: LD_ADDR_VAR 0 17
3113: PUSH
3114: LD_INT 7
3116: PUSH
3117: LD_INT 28
3119: PUSH
3120: LD_INT 45
3122: PUSH
3123: EMPTY
3124: LIST
3125: LIST
3126: LIST
3127: PUSH
3128: LD_VAR 0 11
3132: ARRAY
3133: ST_TO_ADDR
// break ;
3134: GO 3138
// end ; end ; end ;
3136: GO 2967
3138: POP
3139: POP
// end ; if not weapon then
3140: LD_VAR 0 17
3144: NOT
3145: IFFALSE 3300
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
3147: LD_ADDR_VAR 0 4
3151: PUSH
3152: LD_VAR 0 4
3156: PUSH
3157: LD_INT 11
3159: PUSH
3160: LD_INT 30
3162: PUSH
3163: LD_INT 49
3165: PUSH
3166: EMPTY
3167: LIST
3168: LIST
3169: LIST
3170: DIFF
3171: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , tower , 6 ] , [ f_not , [ f_bweapon , 0 ] ] ] ) ;
3172: LD_ADDR_VAR 0 13
3176: PUSH
3177: LD_INT 22
3179: PUSH
3180: LD_VAR 0 15
3184: PUSH
3185: EMPTY
3186: LIST
3187: LIST
3188: PUSH
3189: LD_INT 91
3191: PUSH
3192: LD_VAR 0 1
3196: PUSH
3197: LD_INT 6
3199: PUSH
3200: EMPTY
3201: LIST
3202: LIST
3203: LIST
3204: PUSH
3205: LD_INT 3
3207: PUSH
3208: LD_INT 35
3210: PUSH
3211: LD_INT 0
3213: PUSH
3214: EMPTY
3215: LIST
3216: LIST
3217: PUSH
3218: EMPTY
3219: LIST
3220: LIST
3221: PUSH
3222: EMPTY
3223: LIST
3224: LIST
3225: LIST
3226: PPUSH
3227: CALL_OW 69
3231: ST_TO_ADDR
// for i in tmp do
3232: LD_ADDR_VAR 0 7
3236: PUSH
3237: LD_VAR 0 13
3241: PUSH
3242: FOR_IN
3243: IFFALSE 3268
// list := list diff GetBWeapon ( i ) ;
3245: LD_ADDR_VAR 0 4
3249: PUSH
3250: LD_VAR 0 4
3254: PUSH
3255: LD_VAR 0 7
3259: PPUSH
3260: CALL_OW 269
3264: DIFF
3265: ST_TO_ADDR
3266: GO 3242
3268: POP
3269: POP
// if list then
3270: LD_VAR 0 4
3274: IFFALSE 3300
// weapon := list [ rand ( 1 , list ) ] ;
3276: LD_ADDR_VAR 0 17
3280: PUSH
3281: LD_VAR 0 4
3285: PUSH
3286: LD_INT 1
3288: PPUSH
3289: LD_VAR 0 4
3293: PPUSH
3294: CALL_OW 12
3298: ARRAY
3299: ST_TO_ADDR
// end ; if weapon then
3300: LD_VAR 0 17
3304: IFFALSE 3418
// begin tmp := CostOfWeapon ( weapon ) ;
3306: LD_ADDR_VAR 0 13
3310: PUSH
3311: LD_VAR 0 17
3315: PPUSH
3316: CALL_OW 451
3320: ST_TO_ADDR
// j := GetBase ( tower ) ;
3321: LD_ADDR_VAR 0 8
3325: PUSH
3326: LD_VAR 0 1
3330: PPUSH
3331: CALL_OW 274
3335: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
3336: LD_VAR 0 8
3340: PPUSH
3341: LD_INT 1
3343: PPUSH
3344: CALL_OW 275
3348: PUSH
3349: LD_VAR 0 13
3353: PUSH
3354: LD_INT 1
3356: ARRAY
3357: GREATEREQUAL
3358: PUSH
3359: LD_VAR 0 8
3363: PPUSH
3364: LD_INT 2
3366: PPUSH
3367: CALL_OW 275
3371: PUSH
3372: LD_VAR 0 13
3376: PUSH
3377: LD_INT 2
3379: ARRAY
3380: GREATEREQUAL
3381: AND
3382: PUSH
3383: LD_VAR 0 8
3387: PPUSH
3388: LD_INT 3
3390: PPUSH
3391: CALL_OW 275
3395: PUSH
3396: LD_VAR 0 13
3400: PUSH
3401: LD_INT 3
3403: ARRAY
3404: GREATEREQUAL
3405: AND
3406: IFFALSE 3418
// result := weapon ;
3408: LD_ADDR_VAR 0 2
3412: PUSH
3413: LD_VAR 0 17
3417: ST_TO_ADDR
// end ; end ; end_of_file
3418: LD_VAR 0 2
3422: RET
// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Khatam , Kikuchi , Harisson ; export function PrepareAmericans ; var i , team , others , veh , m ; begin
3423: LD_INT 0
3425: PPUSH
3426: PPUSH
3427: PPUSH
3428: PPUSH
3429: PPUSH
3430: PPUSH
// uc_side := 1 ;
3431: LD_ADDR_OWVAR 20
3435: PUSH
3436: LD_INT 1
3438: ST_TO_ADDR
// uc_nation := 1 ;
3439: LD_ADDR_OWVAR 21
3443: PUSH
3444: LD_INT 1
3446: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , mission_prev_prefix ) ;
3447: LD_ADDR_EXP 9
3451: PUSH
3452: LD_STRING JMM
3454: PPUSH
3455: LD_EXP 1
3459: NOT
3460: PPUSH
3461: LD_EXP 2
3465: PPUSH
3466: CALL 29957 0 3
3470: ST_TO_ADDR
// team := [ JMM ] ;
3471: LD_ADDR_VAR 0 3
3475: PUSH
3476: LD_EXP 9
3480: PUSH
3481: EMPTY
3482: LIST
3483: ST_TO_ADDR
// if LoadVariable ( BrownIn07 , debug ) then
3484: LD_STRING BrownIn07
3486: PPUSH
3487: LD_EXP 1
3491: PPUSH
3492: CALL_OW 30
3496: IFFALSE 3522
// Brown := PrepareUnit ( Brown , ( not debug ) , mission_prev_prefix ) ;
3498: LD_ADDR_EXP 10
3502: PUSH
3503: LD_STRING Brown
3505: PPUSH
3506: LD_EXP 1
3510: NOT
3511: PPUSH
3512: LD_EXP 2
3516: PPUSH
3517: CALL 29957 0 3
3521: ST_TO_ADDR
// if Brown then
3522: LD_EXP 10
3526: IFFALSE 3544
// team := team ^ Brown ;
3528: LD_ADDR_VAR 0 3
3532: PUSH
3533: LD_VAR 0 3
3537: PUSH
3538: LD_EXP 10
3542: ADD
3543: ST_TO_ADDR
// if LoadVariable ( DonaldsonIn07 , debug ) then
3544: LD_STRING DonaldsonIn07
3546: PPUSH
3547: LD_EXP 1
3551: PPUSH
3552: CALL_OW 30
3556: IFFALSE 3582
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , mission_prev_prefix ) ;
3558: LD_ADDR_EXP 11
3562: PUSH
3563: LD_STRING Donaldson
3565: PPUSH
3566: LD_EXP 1
3570: NOT
3571: PPUSH
3572: LD_EXP 2
3576: PPUSH
3577: CALL 29957 0 3
3581: ST_TO_ADDR
// if Donaldson then
3582: LD_EXP 11
3586: IFFALSE 3604
// team := team ^ Donaldson ;
3588: LD_ADDR_VAR 0 3
3592: PUSH
3593: LD_VAR 0 3
3597: PUSH
3598: LD_EXP 11
3602: ADD
3603: ST_TO_ADDR
// if LoadVariable ( BobbyIn07 , debug ) then
3604: LD_STRING BobbyIn07
3606: PPUSH
3607: LD_EXP 1
3611: PPUSH
3612: CALL_OW 30
3616: IFFALSE 3642
// Bobby := PrepareUnit ( Bobby , ( not debug ) , mission_prev_prefix ) ;
3618: LD_ADDR_EXP 12
3622: PUSH
3623: LD_STRING Bobby
3625: PPUSH
3626: LD_EXP 1
3630: NOT
3631: PPUSH
3632: LD_EXP 2
3636: PPUSH
3637: CALL 29957 0 3
3641: ST_TO_ADDR
// if Bobby then
3642: LD_EXP 12
3646: IFFALSE 3664
// team := team ^ Bobby ;
3648: LD_ADDR_VAR 0 3
3652: PUSH
3653: LD_VAR 0 3
3657: PUSH
3658: LD_EXP 12
3662: ADD
3663: ST_TO_ADDR
// if LoadVariable ( CyrusIn07 , debug ) then
3664: LD_STRING CyrusIn07
3666: PPUSH
3667: LD_EXP 1
3671: PPUSH
3672: CALL_OW 30
3676: IFFALSE 3702
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , mission_prev_prefix ) ;
3678: LD_ADDR_EXP 13
3682: PUSH
3683: LD_STRING Cyrus
3685: PPUSH
3686: LD_EXP 1
3690: NOT
3691: PPUSH
3692: LD_EXP 2
3696: PPUSH
3697: CALL 29957 0 3
3701: ST_TO_ADDR
// if Cyrus then
3702: LD_EXP 13
3706: IFFALSE 3724
// team := team ^ Cyrus ;
3708: LD_ADDR_VAR 0 3
3712: PUSH
3713: LD_VAR 0 3
3717: PUSH
3718: LD_EXP 13
3722: ADD
3723: ST_TO_ADDR
// if LoadVariable ( LisaIn07 , debug ) then
3724: LD_STRING LisaIn07
3726: PPUSH
3727: LD_EXP 1
3731: PPUSH
3732: CALL_OW 30
3736: IFFALSE 3762
// Lisa := PrepareUnit ( Lisa , ( not debug ) , mission_prev_prefix ) ;
3738: LD_ADDR_EXP 14
3742: PUSH
3743: LD_STRING Lisa
3745: PPUSH
3746: LD_EXP 1
3750: NOT
3751: PPUSH
3752: LD_EXP 2
3756: PPUSH
3757: CALL 29957 0 3
3761: ST_TO_ADDR
// if Lisa then
3762: LD_EXP 14
3766: IFFALSE 3784
// team := team ^ Lisa ;
3768: LD_ADDR_VAR 0 3
3772: PUSH
3773: LD_VAR 0 3
3777: PUSH
3778: LD_EXP 14
3782: ADD
3783: ST_TO_ADDR
// if LoadVariable ( GladstoneIn07 , debug ) then
3784: LD_STRING GladstoneIn07
3786: PPUSH
3787: LD_EXP 1
3791: PPUSH
3792: CALL_OW 30
3796: IFFALSE 3822
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , mission_prev_prefix ) ;
3798: LD_ADDR_EXP 16
3802: PUSH
3803: LD_STRING Gladstone
3805: PPUSH
3806: LD_EXP 1
3810: NOT
3811: PPUSH
3812: LD_EXP 2
3816: PPUSH
3817: CALL 29957 0 3
3821: ST_TO_ADDR
// if Gladstone then
3822: LD_EXP 16
3826: IFFALSE 3844
// team := team ^ Gladstone ;
3828: LD_ADDR_VAR 0 3
3832: PUSH
3833: LD_VAR 0 3
3837: PUSH
3838: LD_EXP 16
3842: ADD
3843: ST_TO_ADDR
// if LoadVariable ( KhatamIn07 , debug ) then
3844: LD_STRING KhatamIn07
3846: PPUSH
3847: LD_EXP 1
3851: PPUSH
3852: CALL_OW 30
3856: IFFALSE 3882
// Khatam := PrepareUnit ( Khatam , ( not debug ) , mission_prev_prefix ) ;
3858: LD_ADDR_EXP 17
3862: PUSH
3863: LD_STRING Khatam
3865: PPUSH
3866: LD_EXP 1
3870: NOT
3871: PPUSH
3872: LD_EXP 2
3876: PPUSH
3877: CALL 29957 0 3
3881: ST_TO_ADDR
// if Khatam then
3882: LD_EXP 17
3886: IFFALSE 3904
// team := team ^ Khatam ;
3888: LD_ADDR_VAR 0 3
3892: PUSH
3893: LD_VAR 0 3
3897: PUSH
3898: LD_EXP 17
3902: ADD
3903: ST_TO_ADDR
// others := CreateCharacterSet ( 07_others ) ;
3904: LD_ADDR_VAR 0 4
3908: PUSH
3909: LD_STRING 07_others
3911: PPUSH
3912: CALL_OW 31
3916: ST_TO_ADDR
// if others then
3917: LD_VAR 0 4
3921: IFFALSE 3939
// team := team ^ others ;
3923: LD_ADDR_VAR 0 3
3927: PUSH
3928: LD_VAR 0 3
3932: PUSH
3933: LD_VAR 0 4
3937: ADD
3938: ST_TO_ADDR
// if debug then
3939: LD_EXP 1
3943: IFFALSE 4017
// begin InitHc ;
3945: CALL_OW 19
// for i = 1 to 4 do
3949: LD_ADDR_VAR 0 2
3953: PUSH
3954: DOUBLE
3955: LD_INT 1
3957: DEC
3958: ST_TO_ADDR
3959: LD_INT 4
3961: PUSH
3962: FOR_TO
3963: IFFALSE 4015
// begin PrepareHuman ( false , [ 1 , 3 ] [ Rand ( 1 , 2 ) ] , 4 ) ;
3965: LD_INT 0
3967: PPUSH
3968: LD_INT 1
3970: PUSH
3971: LD_INT 3
3973: PUSH
3974: EMPTY
3975: LIST
3976: LIST
3977: PUSH
3978: LD_INT 1
3980: PPUSH
3981: LD_INT 2
3983: PPUSH
3984: CALL_OW 12
3988: ARRAY
3989: PPUSH
3990: LD_INT 4
3992: PPUSH
3993: CALL_OW 380
// team := team ^ CreateHuman ;
3997: LD_ADDR_VAR 0 3
4001: PUSH
4002: LD_VAR 0 3
4006: PUSH
4007: CALL_OW 44
4011: ADD
4012: ST_TO_ADDR
// end ;
4013: GO 3962
4015: POP
4016: POP
// end ; m := 0 ;
4017: LD_ADDR_VAR 0 6
4021: PUSH
4022: LD_INT 0
4024: ST_TO_ADDR
// for i in team do
4025: LD_ADDR_VAR 0 2
4029: PUSH
4030: LD_VAR 0 3
4034: PUSH
4035: FOR_IN
4036: IFFALSE 4243
// if GetClass ( i ) = 3 then
4038: LD_VAR 0 2
4042: PPUSH
4043: CALL_OW 257
4047: PUSH
4048: LD_INT 3
4050: EQUAL
4051: IFFALSE 4199
// begin m := m + 1 ;
4053: LD_ADDR_VAR 0 6
4057: PUSH
4058: LD_VAR 0 6
4062: PUSH
4063: LD_INT 1
4065: PLUS
4066: ST_TO_ADDR
// veh := PrepareTank ( 1 , 1 , [ us_medium_wheeled , us_medium_tracked , us_medium_wheeled , us_light_wheeled ] [ m mod 4 + 1 ] , engine_solar , control_manual , [ us_gatling_gun , us_double_gun , us_light_gun , us_radar ] [ m mod 4 + 1 ] , 60 ) ;
4067: LD_ADDR_VAR 0 5
4071: PUSH
4072: LD_INT 1
4074: PPUSH
4075: LD_INT 1
4077: PPUSH
4078: LD_INT 2
4080: PUSH
4081: LD_INT 3
4083: PUSH
4084: LD_INT 2
4086: PUSH
4087: LD_INT 1
4089: PUSH
4090: EMPTY
4091: LIST
4092: LIST
4093: LIST
4094: LIST
4095: PUSH
4096: LD_VAR 0 6
4100: PUSH
4101: LD_INT 4
4103: MOD
4104: PUSH
4105: LD_INT 1
4107: PLUS
4108: ARRAY
4109: PPUSH
4110: LD_INT 2
4112: PPUSH
4113: LD_INT 1
4115: PPUSH
4116: LD_INT 4
4118: PUSH
4119: LD_INT 5
4121: PUSH
4122: LD_INT 3
4124: PUSH
4125: LD_INT 11
4127: PUSH
4128: EMPTY
4129: LIST
4130: LIST
4131: LIST
4132: LIST
4133: PUSH
4134: LD_VAR 0 6
4138: PUSH
4139: LD_INT 4
4141: MOD
4142: PUSH
4143: LD_INT 1
4145: PLUS
4146: ARRAY
4147: PPUSH
4148: LD_INT 60
4150: PPUSH
4151: CALL 512 0 7
4155: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
4156: LD_VAR 0 5
4160: PPUSH
4161: LD_INT 2
4163: PPUSH
4164: CALL_OW 233
// PlaceUnitArea ( veh , startArea , false ) ;
4168: LD_VAR 0 5
4172: PPUSH
4173: LD_INT 1
4175: PPUSH
4176: LD_INT 0
4178: PPUSH
4179: CALL_OW 49
// PlaceHumanInUnit ( i , veh ) ;
4183: LD_VAR 0 2
4187: PPUSH
4188: LD_VAR 0 5
4192: PPUSH
4193: CALL_OW 52
// end else
4197: GO 4241
// begin if GetClass ( i ) = 2 then
4199: LD_VAR 0 2
4203: PPUSH
4204: CALL_OW 257
4208: PUSH
4209: LD_INT 2
4211: EQUAL
4212: IFFALSE 4226
// SetClass ( i , 1 ) ;
4214: LD_VAR 0 2
4218: PPUSH
4219: LD_INT 1
4221: PPUSH
4222: CALL_OW 336
// PlaceUnitArea ( i , startArea , false ) ;
4226: LD_VAR 0 2
4230: PPUSH
4231: LD_INT 1
4233: PPUSH
4234: LD_INT 0
4236: PPUSH
4237: CALL_OW 49
// end ;
4241: GO 4035
4243: POP
4244: POP
// uc_side := 4 ;
4245: LD_ADDR_OWVAR 20
4249: PUSH
4250: LD_INT 4
4252: ST_TO_ADDR
// Harisson := PrepareUnit ( Harisson , false ,  ) ;
4253: LD_ADDR_EXP 19
4257: PUSH
4258: LD_STRING Harisson
4260: PPUSH
4261: LD_INT 0
4263: PPUSH
4264: LD_STRING 
4266: PPUSH
4267: CALL 29957 0 3
4271: ST_TO_ADDR
// PrepareScout ;
4272: CALL 4281 0 0
// end ;
4276: LD_VAR 0 1
4280: RET
// function PrepareScout ; var ape ; begin
4281: LD_INT 0
4283: PPUSH
4284: PPUSH
// uc_side := 4 ;
4285: LD_ADDR_OWVAR 20
4289: PUSH
4290: LD_INT 4
4292: ST_TO_ADDR
// uc_nation := 1 ;
4293: LD_ADDR_OWVAR 21
4297: PUSH
4298: LD_INT 1
4300: ST_TO_ADDR
// if LoadVariable ( FrankIn06 , 0 ) then
4301: LD_STRING FrankIn06
4303: PPUSH
4304: LD_INT 0
4306: PPUSH
4307: CALL_OW 30
4311: IFFALSE 4328
// Frank := CreateCharacter ( 06c_Frank ) else
4313: LD_ADDR_EXP 15
4317: PUSH
4318: LD_STRING 06c_Frank
4320: PPUSH
4321: CALL_OW 34
4325: ST_TO_ADDR
4326: GO 4368
// if LoadVariable ( FrankInDelta , 0 ) then
4328: LD_STRING FrankInDelta
4330: PPUSH
4331: LD_INT 0
4333: PPUSH
4334: CALL_OW 30
4338: IFFALSE 4355
// Frank := CreateCharacter ( 05_Frank ) else
4340: LD_ADDR_EXP 15
4344: PUSH
4345: LD_STRING 05_Frank
4347: PPUSH
4348: CALL_OW 34
4352: ST_TO_ADDR
4353: GO 4368
// Frank := CreateCharacter ( 04_Frank ) ;
4355: LD_ADDR_EXP 15
4359: PUSH
4360: LD_STRING 04_Frank
4362: PPUSH
4363: CALL_OW 34
4367: ST_TO_ADDR
// if Frank then
4368: LD_EXP 15
4372: IFFALSE 4505
// begin PlaceUnitArea ( Frank , scoutArea , false ) ;
4374: LD_EXP 15
4378: PPUSH
4379: LD_INT 2
4381: PPUSH
4382: LD_INT 0
4384: PPUSH
4385: CALL_OW 49
// SetClass ( Frank , 1 ) ;
4389: LD_EXP 15
4393: PPUSH
4394: LD_INT 1
4396: PPUSH
4397: CALL_OW 336
// uc_side := 0 ;
4401: LD_ADDR_OWVAR 20
4405: PUSH
4406: LD_INT 0
4408: ST_TO_ADDR
// uc_nation := 0 ;
4409: LD_ADDR_OWVAR 21
4413: PUSH
4414: LD_INT 0
4416: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 0 ) ;
4417: LD_INT 0
4419: PPUSH
4420: LD_INT 12
4422: PPUSH
4423: LD_INT 0
4425: PPUSH
4426: CALL_OW 380
// ape := CreateHuman ;
4430: LD_ADDR_VAR 0 2
4434: PUSH
4435: CALL_OW 44
4439: ST_TO_ADDR
// PlaceUnitXYR ( ape , GetX ( Frank ) , GetY ( Frank ) , 5 , false ) ;
4440: LD_VAR 0 2
4444: PPUSH
4445: LD_EXP 15
4449: PPUSH
4450: CALL_OW 250
4454: PPUSH
4455: LD_EXP 15
4459: PPUSH
4460: CALL_OW 251
4464: PPUSH
4465: LD_INT 5
4467: PPUSH
4468: LD_INT 0
4470: PPUSH
4471: CALL_OW 50
// ComTurnUnit ( ape , Frank ) ;
4475: LD_VAR 0 2
4479: PPUSH
4480: LD_EXP 15
4484: PPUSH
4485: CALL_OW 119
// ComTurnUnit ( Frank , ape ) ;
4489: LD_EXP 15
4493: PPUSH
4494: LD_VAR 0 2
4498: PPUSH
4499: CALL_OW 119
// exit ;
4503: GO 4548
// end ; Kikuchi := PrepareUnit ( Yamoko , false ,  ) ;
4505: LD_ADDR_EXP 18
4509: PUSH
4510: LD_STRING Yamoko
4512: PPUSH
4513: LD_INT 0
4515: PPUSH
4516: LD_STRING 
4518: PPUSH
4519: CALL 29957 0 3
4523: ST_TO_ADDR
// PlaceUnitArea ( Kikuchi , scoutArea , false ) ;
4524: LD_EXP 18
4528: PPUSH
4529: LD_INT 2
4531: PPUSH
4532: LD_INT 0
4534: PPUSH
4535: CALL_OW 49
// ComHold ( Kikuchi ) ;
4539: LD_EXP 18
4543: PPUSH
4544: CALL_OW 140
// end ; end_of_file
4548: LD_VAR 0 1
4552: RET
// export ru_rebuild_list ; export function PrepareRussians ; var i , j , r , un , skill , filter , tmp , dep_list , lab_list , fac_list , breastworks_list , bunker_list , turret_list , weapons_list , personel_counter ; begin
4553: LD_INT 0
4555: PPUSH
4556: PPUSH
4557: PPUSH
4558: PPUSH
4559: PPUSH
4560: PPUSH
4561: PPUSH
4562: PPUSH
4563: PPUSH
4564: PPUSH
4565: PPUSH
4566: PPUSH
4567: PPUSH
4568: PPUSH
4569: PPUSH
4570: PPUSH
// ru_rebuild_list := [ ] ;
4571: LD_ADDR_EXP 20
4575: PUSH
4576: EMPTY
4577: ST_TO_ADDR
// uc_side := 3 ;
4578: LD_ADDR_OWVAR 20
4582: PUSH
4583: LD_INT 3
4585: ST_TO_ADDR
// uc_nation := 3 ;
4586: LD_ADDR_OWVAR 21
4590: PUSH
4591: LD_INT 3
4593: ST_TO_ADDR
// if Difficulty > 1 then
4594: LD_OWVAR 67
4598: PUSH
4599: LD_INT 1
4601: GREATER
4602: IFFALSE 4738
// begin bc_type := b_breastwork ;
4604: LD_ADDR_OWVAR 42
4608: PUSH
4609: LD_INT 31
4611: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 78 , 74 , 2 ) ;
4612: LD_INT 78
4614: PPUSH
4615: LD_INT 74
4617: PPUSH
4618: LD_INT 2
4620: PPUSH
4621: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 171 , 193 , 4 ) ;
4625: LD_INT 171
4627: PPUSH
4628: LD_INT 193
4630: PPUSH
4631: LD_INT 4
4633: PPUSH
4634: CALL_OW 47
// bc_type := b_turret ;
4638: LD_ADDR_OWVAR 42
4642: PUSH
4643: LD_INT 33
4645: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 129 , 96 , 3 ) ;
4646: LD_INT 129
4648: PPUSH
4649: LD_INT 96
4651: PPUSH
4652: LD_INT 3
4654: PPUSH
4655: CALL_OW 47
// if Difficulty > 2 then
4659: LD_OWVAR 67
4663: PUSH
4664: LD_INT 2
4666: GREATER
4667: IFFALSE 4738
// begin RemoveUnit ( HexInfo ( 83 , 141 ) ) ;
4669: LD_INT 83
4671: PPUSH
4672: LD_INT 141
4674: PPUSH
4675: CALL_OW 428
4679: PPUSH
4680: CALL_OW 64
// RemoveUnit ( HexInfo ( 78 , 133 ) ) ;
4684: LD_INT 78
4686: PPUSH
4687: LD_INT 133
4689: PPUSH
4690: CALL_OW 428
4694: PPUSH
4695: CALL_OW 64
// CreateAndPlaceBuildingXYD ( 83 , 141 , 2 ) ;
4699: LD_INT 83
4701: PPUSH
4702: LD_INT 141
4704: PPUSH
4705: LD_INT 2
4707: PPUSH
4708: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 78 , 133 , 2 ) ;
4712: LD_INT 78
4714: PPUSH
4715: LD_INT 133
4717: PPUSH
4718: LD_INT 2
4720: PPUSH
4721: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 145 , 112 , 3 ) ;
4725: LD_INT 145
4727: PPUSH
4728: LD_INT 112
4730: PPUSH
4731: LD_INT 3
4733: PPUSH
4734: CALL_OW 47
// end ; end ; dep_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
4738: LD_ADDR_VAR 0 9
4742: PUSH
4743: LD_INT 22
4745: PUSH
4746: LD_INT 3
4748: PUSH
4749: EMPTY
4750: LIST
4751: LIST
4752: PUSH
4753: LD_INT 2
4755: PUSH
4756: LD_INT 30
4758: PUSH
4759: LD_INT 0
4761: PUSH
4762: EMPTY
4763: LIST
4764: LIST
4765: PUSH
4766: LD_INT 30
4768: PUSH
4769: LD_INT 1
4771: PUSH
4772: EMPTY
4773: LIST
4774: LIST
4775: PUSH
4776: EMPTY
4777: LIST
4778: LIST
4779: LIST
4780: PUSH
4781: EMPTY
4782: LIST
4783: LIST
4784: PPUSH
4785: CALL_OW 69
4789: ST_TO_ADDR
// lab_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
4790: LD_ADDR_VAR 0 10
4794: PUSH
4795: LD_INT 22
4797: PUSH
4798: LD_INT 3
4800: PUSH
4801: EMPTY
4802: LIST
4803: LIST
4804: PUSH
4805: LD_INT 2
4807: PUSH
4808: LD_INT 30
4810: PUSH
4811: LD_INT 6
4813: PUSH
4814: EMPTY
4815: LIST
4816: LIST
4817: PUSH
4818: LD_INT 30
4820: PUSH
4821: LD_INT 7
4823: PUSH
4824: EMPTY
4825: LIST
4826: LIST
4827: PUSH
4828: LD_INT 30
4830: PUSH
4831: LD_INT 8
4833: PUSH
4834: EMPTY
4835: LIST
4836: LIST
4837: PUSH
4838: EMPTY
4839: LIST
4840: LIST
4841: LIST
4842: LIST
4843: PUSH
4844: EMPTY
4845: LIST
4846: LIST
4847: PPUSH
4848: CALL_OW 69
4852: ST_TO_ADDR
// fac_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) ;
4853: LD_ADDR_VAR 0 11
4857: PUSH
4858: LD_INT 22
4860: PUSH
4861: LD_INT 3
4863: PUSH
4864: EMPTY
4865: LIST
4866: LIST
4867: PUSH
4868: LD_INT 30
4870: PUSH
4871: LD_INT 3
4873: PUSH
4874: EMPTY
4875: LIST
4876: LIST
4877: PUSH
4878: EMPTY
4879: LIST
4880: LIST
4881: PPUSH
4882: CALL_OW 69
4886: ST_TO_ADDR
// breastworks_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) ;
4887: LD_ADDR_VAR 0 12
4891: PUSH
4892: LD_INT 22
4894: PUSH
4895: LD_INT 3
4897: PUSH
4898: EMPTY
4899: LIST
4900: LIST
4901: PUSH
4902: LD_INT 30
4904: PUSH
4905: LD_INT 31
4907: PUSH
4908: EMPTY
4909: LIST
4910: LIST
4911: PUSH
4912: EMPTY
4913: LIST
4914: LIST
4915: PPUSH
4916: CALL_OW 69
4920: ST_TO_ADDR
// bunker_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) ;
4921: LD_ADDR_VAR 0 13
4925: PUSH
4926: LD_INT 22
4928: PUSH
4929: LD_INT 3
4931: PUSH
4932: EMPTY
4933: LIST
4934: LIST
4935: PUSH
4936: LD_INT 30
4938: PUSH
4939: LD_INT 32
4941: PUSH
4942: EMPTY
4943: LIST
4944: LIST
4945: PUSH
4946: EMPTY
4947: LIST
4948: LIST
4949: PPUSH
4950: CALL_OW 69
4954: ST_TO_ADDR
// turret_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_turret ] ] ) ;
4955: LD_ADDR_VAR 0 14
4959: PUSH
4960: LD_INT 22
4962: PUSH
4963: LD_INT 3
4965: PUSH
4966: EMPTY
4967: LIST
4968: LIST
4969: PUSH
4970: LD_INT 30
4972: PUSH
4973: LD_INT 33
4975: PUSH
4976: EMPTY
4977: LIST
4978: LIST
4979: PUSH
4980: EMPTY
4981: LIST
4982: LIST
4983: PPUSH
4984: CALL_OW 69
4988: ST_TO_ADDR
// weapons_list := [ [ ru_heavy_machine_gun , 5 ] , [ ru_gatling_gun , 50 ] , [ ru_gun , 30 ] , [ ru_heavy_gun , 15 ] ] ;
4989: LD_ADDR_VAR 0 15
4993: PUSH
4994: LD_INT 42
4996: PUSH
4997: LD_INT 5
4999: PUSH
5000: EMPTY
5001: LIST
5002: LIST
5003: PUSH
5004: LD_INT 43
5006: PUSH
5007: LD_INT 50
5009: PUSH
5010: EMPTY
5011: LIST
5012: LIST
5013: PUSH
5014: LD_INT 44
5016: PUSH
5017: LD_INT 30
5019: PUSH
5020: EMPTY
5021: LIST
5022: LIST
5023: PUSH
5024: LD_INT 46
5026: PUSH
5027: LD_INT 15
5029: PUSH
5030: EMPTY
5031: LIST
5032: LIST
5033: PUSH
5034: EMPTY
5035: LIST
5036: LIST
5037: LIST
5038: LIST
5039: ST_TO_ADDR
// personel_counter := [ 0 , 4 , 6 , 3 ] ;
5040: LD_ADDR_VAR 0 16
5044: PUSH
5045: LD_INT 0
5047: PUSH
5048: LD_INT 4
5050: PUSH
5051: LD_INT 6
5053: PUSH
5054: LD_INT 3
5056: PUSH
5057: EMPTY
5058: LIST
5059: LIST
5060: LIST
5061: LIST
5062: ST_TO_ADDR
// skill := [ 4 , 5 , 6 , 6 ] [ Difficulty ] ;
5063: LD_ADDR_VAR 0 6
5067: PUSH
5068: LD_INT 4
5070: PUSH
5071: LD_INT 5
5073: PUSH
5074: LD_INT 6
5076: PUSH
5077: LD_INT 6
5079: PUSH
5080: EMPTY
5081: LIST
5082: LIST
5083: LIST
5084: LIST
5085: PUSH
5086: LD_OWVAR 67
5090: ARRAY
5091: ST_TO_ADDR
// SetBName ( ru_dep_main , am_tukh ) ;
5092: LD_INT 16
5094: PPUSH
5095: LD_STRING am_tukh
5097: PPUSH
5098: CALL_OW 500
// for i in FilterAllUnits ( [ f_type , unit_building ] ) do
5102: LD_ADDR_VAR 0 2
5106: PUSH
5107: LD_INT 21
5109: PUSH
5110: LD_INT 3
5112: PUSH
5113: EMPTY
5114: LIST
5115: LIST
5116: PPUSH
5117: CALL_OW 69
5121: PUSH
5122: FOR_IN
5123: IFFALSE 5160
// SetBLevel ( i , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
5125: LD_VAR 0 2
5129: PPUSH
5130: LD_INT 4
5132: PUSH
5133: LD_INT 5
5135: PUSH
5136: LD_INT 6
5138: PUSH
5139: LD_INT 7
5141: PUSH
5142: EMPTY
5143: LIST
5144: LIST
5145: LIST
5146: LIST
5147: PUSH
5148: LD_OWVAR 67
5152: ARRAY
5153: PPUSH
5154: CALL_OW 241
5158: GO 5122
5160: POP
5161: POP
// for i in dep_list do
5162: LD_ADDR_VAR 0 2
5166: PUSH
5167: LD_VAR 0 9
5171: PUSH
5172: FOR_IN
5173: IFFALSE 5217
// begin SetResourceType ( GetBase ( i ) , mat_cans , 1000 ) ;
5175: LD_VAR 0 2
5179: PPUSH
5180: CALL_OW 274
5184: PPUSH
5185: LD_INT 1
5187: PPUSH
5188: LD_INT 1000
5190: PPUSH
5191: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 1000 ) ;
5195: LD_VAR 0 2
5199: PPUSH
5200: CALL_OW 274
5204: PPUSH
5205: LD_INT 2
5207: PPUSH
5208: LD_INT 1000
5210: PPUSH
5211: CALL_OW 277
// end ;
5215: GO 5172
5217: POP
5218: POP
// InitHc ;
5219: CALL_OW 19
// tmp := bunker_list * [ 45 , 60 , 75 , 80 ] [ Difficulty ] div 100 ;
5223: LD_ADDR_VAR 0 8
5227: PUSH
5228: LD_VAR 0 13
5232: PUSH
5233: LD_INT 45
5235: PUSH
5236: LD_INT 60
5238: PUSH
5239: LD_INT 75
5241: PUSH
5242: LD_INT 80
5244: PUSH
5245: EMPTY
5246: LIST
5247: LIST
5248: LIST
5249: LIST
5250: PUSH
5251: LD_OWVAR 67
5255: ARRAY
5256: MUL
5257: PUSH
5258: LD_INT 100
5260: DIV
5261: ST_TO_ADDR
// personel_counter := Replace ( personel_counter , 1 , tmp ) ;
5262: LD_ADDR_VAR 0 16
5266: PUSH
5267: LD_VAR 0 16
5271: PPUSH
5272: LD_INT 1
5274: PPUSH
5275: LD_VAR 0 8
5279: PPUSH
5280: CALL_OW 1
5284: ST_TO_ADDR
// tmp := [ ] ;
5285: LD_ADDR_VAR 0 8
5289: PUSH
5290: EMPTY
5291: ST_TO_ADDR
// for i in bunker_list do
5292: LD_ADDR_VAR 0 2
5296: PUSH
5297: LD_VAR 0 13
5301: PUSH
5302: FOR_IN
5303: IFFALSE 5399
// if i mod 10 + 1 < tmp then
5305: LD_VAR 0 2
5309: PUSH
5310: LD_INT 10
5312: MOD
5313: PUSH
5314: LD_INT 1
5316: PLUS
5317: PUSH
5318: LD_VAR 0 8
5322: LESS
5323: IFFALSE 5368
// tmp := Insert ( tmp , i mod rand ( 3 , 5 ) + 1 , i ) else
5325: LD_ADDR_VAR 0 8
5329: PUSH
5330: LD_VAR 0 8
5334: PPUSH
5335: LD_VAR 0 2
5339: PUSH
5340: LD_INT 3
5342: PPUSH
5343: LD_INT 5
5345: PPUSH
5346: CALL_OW 12
5350: MOD
5351: PUSH
5352: LD_INT 1
5354: PLUS
5355: PPUSH
5356: LD_VAR 0 2
5360: PPUSH
5361: CALL_OW 2
5365: ST_TO_ADDR
5366: GO 5397
// tmp := Insert ( tmp , tmp + 1 , i ) ;
5368: LD_ADDR_VAR 0 8
5372: PUSH
5373: LD_VAR 0 8
5377: PPUSH
5378: LD_VAR 0 8
5382: PUSH
5383: LD_INT 1
5385: PLUS
5386: PPUSH
5387: LD_VAR 0 2
5391: PPUSH
5392: CALL_OW 2
5396: ST_TO_ADDR
5397: GO 5302
5399: POP
5400: POP
// bunker_list := tmp ;
5401: LD_ADDR_VAR 0 13
5405: PUSH
5406: LD_VAR 0 8
5410: ST_TO_ADDR
// for i in bunker_list ^ turret_list do
5411: LD_ADDR_VAR 0 2
5415: PUSH
5416: LD_VAR 0 13
5420: PUSH
5421: LD_VAR 0 14
5425: ADD
5426: PUSH
5427: FOR_IN
5428: IFFALSE 5451
// PlaceWeaponTurret ( i , GetTurretWeaponBase ( i ) ) ;
5430: LD_VAR 0 2
5434: PPUSH
5435: LD_VAR 0 2
5439: PPUSH
5440: CALL 2200 0 1
5444: PPUSH
5445: CALL_OW 431
5449: GO 5427
5451: POP
5452: POP
// while ( personel_counter [ 1 ] ) do
5453: LD_VAR 0 16
5457: PUSH
5458: LD_INT 1
5460: ARRAY
5461: IFFALSE 5569
// begin i := rand ( 1 , bunker_list ) ;
5463: LD_ADDR_VAR 0 2
5467: PUSH
5468: LD_INT 1
5470: PPUSH
5471: LD_VAR 0 13
5475: PPUSH
5476: CALL_OW 12
5480: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
5481: LD_INT 0
5483: PPUSH
5484: LD_INT 1
5486: PPUSH
5487: LD_VAR 0 6
5491: PPUSH
5492: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , bunker_list [ i ] ) ;
5496: CALL_OW 44
5500: PPUSH
5501: LD_VAR 0 13
5505: PUSH
5506: LD_VAR 0 2
5510: ARRAY
5511: PPUSH
5512: CALL_OW 52
// bunker_list := Delete ( bunker_list , i ) ;
5516: LD_ADDR_VAR 0 13
5520: PUSH
5521: LD_VAR 0 13
5525: PPUSH
5526: LD_VAR 0 2
5530: PPUSH
5531: CALL_OW 3
5535: ST_TO_ADDR
// personel_counter := Replace ( personel_counter , 1 , personel_counter [ 1 ] - 1 ) ;
5536: LD_ADDR_VAR 0 16
5540: PUSH
5541: LD_VAR 0 16
5545: PPUSH
5546: LD_INT 1
5548: PPUSH
5549: LD_VAR 0 16
5553: PUSH
5554: LD_INT 1
5556: ARRAY
5557: PUSH
5558: LD_INT 1
5560: MINUS
5561: PPUSH
5562: CALL_OW 1
5566: ST_TO_ADDR
// end ;
5567: GO 5453
// for i = 1 to personel_counter [ 2 ] do
5569: LD_ADDR_VAR 0 2
5573: PUSH
5574: DOUBLE
5575: LD_INT 1
5577: DEC
5578: ST_TO_ADDR
5579: LD_VAR 0 16
5583: PUSH
5584: LD_INT 2
5586: ARRAY
5587: PUSH
5588: FOR_TO
5589: IFFALSE 5620
// begin PrepareHuman ( false , 2 , skill ) ;
5591: LD_INT 0
5593: PPUSH
5594: LD_INT 2
5596: PPUSH
5597: LD_VAR 0 6
5601: PPUSH
5602: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , ru_dep_main ) ;
5606: CALL_OW 44
5610: PPUSH
5611: LD_INT 16
5613: PPUSH
5614: CALL_OW 52
// end ;
5618: GO 5588
5620: POP
5621: POP
// for i = 1 to personel_counter [ 3 ] do
5622: LD_ADDR_VAR 0 2
5626: PUSH
5627: DOUBLE
5628: LD_INT 1
5630: DEC
5631: ST_TO_ADDR
5632: LD_VAR 0 16
5636: PUSH
5637: LD_INT 3
5639: ARRAY
5640: PUSH
5641: FOR_TO
5642: IFFALSE 5689
// begin PrepareHuman ( false , 3 , skill ) ;
5644: LD_INT 0
5646: PPUSH
5647: LD_INT 3
5649: PPUSH
5650: LD_VAR 0 6
5654: PPUSH
5655: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , fac_list [ i mod 2 + 1 ] ) ;
5659: CALL_OW 44
5663: PPUSH
5664: LD_VAR 0 11
5668: PUSH
5669: LD_VAR 0 2
5673: PUSH
5674: LD_INT 2
5676: MOD
5677: PUSH
5678: LD_INT 1
5680: PLUS
5681: ARRAY
5682: PPUSH
5683: CALL_OW 52
// end ;
5687: GO 5641
5689: POP
5690: POP
// for i = 1 to personel_counter [ 4 ] do
5691: LD_ADDR_VAR 0 2
5695: PUSH
5696: DOUBLE
5697: LD_INT 1
5699: DEC
5700: ST_TO_ADDR
5701: LD_VAR 0 16
5705: PUSH
5706: LD_INT 4
5708: ARRAY
5709: PUSH
5710: FOR_TO
5711: IFFALSE 5748
// begin PrepareHuman ( false , 4 , skill ) ;
5713: LD_INT 0
5715: PPUSH
5716: LD_INT 4
5718: PPUSH
5719: LD_VAR 0 6
5723: PPUSH
5724: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , lab_list [ 1 ] ) ;
5728: CALL_OW 44
5732: PPUSH
5733: LD_VAR 0 10
5737: PUSH
5738: LD_INT 1
5740: ARRAY
5741: PPUSH
5742: CALL_OW 52
// end ;
5746: GO 5710
5748: POP
5749: POP
// for i in breastworks_list do
5750: LD_ADDR_VAR 0 2
5754: PUSH
5755: LD_VAR 0 12
5759: PUSH
5760: FOR_IN
5761: IFFALSE 5873
// begin r := GetDir ( i ) ;
5763: LD_ADDR_VAR 0 4
5767: PUSH
5768: LD_VAR 0 2
5772: PPUSH
5773: CALL_OW 254
5777: ST_TO_ADDR
// if r > 3 then
5778: LD_VAR 0 4
5782: PUSH
5783: LD_INT 3
5785: GREATER
5786: IFFALSE 5804
// r := r - 3 else
5788: LD_ADDR_VAR 0 4
5792: PUSH
5793: LD_VAR 0 4
5797: PUSH
5798: LD_INT 3
5800: MINUS
5801: ST_TO_ADDR
5802: GO 5818
// r := r + 3 ;
5804: LD_ADDR_VAR 0 4
5808: PUSH
5809: LD_VAR 0 4
5813: PUSH
5814: LD_INT 3
5816: PLUS
5817: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
5818: LD_INT 0
5820: PPUSH
5821: LD_INT 1
5823: PPUSH
5824: LD_VAR 0 6
5828: PPUSH
5829: CALL_OW 380
// un := CreateHuman ;
5833: LD_ADDR_VAR 0 5
5837: PUSH
5838: CALL_OW 44
5842: ST_TO_ADDR
// SetDir ( un , r ) ;
5843: LD_VAR 0 5
5847: PPUSH
5848: LD_VAR 0 4
5852: PPUSH
5853: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
5857: LD_VAR 0 5
5861: PPUSH
5862: LD_VAR 0 2
5866: PPUSH
5867: CALL_OW 52
// end ;
5871: GO 5760
5873: POP
5874: POP
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) ;
5875: LD_ADDR_VAR 0 8
5879: PUSH
5880: LD_INT 22
5882: PUSH
5883: LD_INT 3
5885: PUSH
5886: EMPTY
5887: LIST
5888: LIST
5889: PUSH
5890: LD_INT 25
5892: PUSH
5893: LD_INT 3
5895: PUSH
5896: EMPTY
5897: LIST
5898: LIST
5899: PUSH
5900: EMPTY
5901: LIST
5902: LIST
5903: PPUSH
5904: CALL_OW 69
5908: ST_TO_ADDR
// r := [ 4 , 5 , 6 , 6 ] [ Difficulty ] ;
5909: LD_ADDR_VAR 0 4
5913: PUSH
5914: LD_INT 4
5916: PUSH
5917: LD_INT 5
5919: PUSH
5920: LD_INT 6
5922: PUSH
5923: LD_INT 6
5925: PUSH
5926: EMPTY
5927: LIST
5928: LIST
5929: LIST
5930: LIST
5931: PUSH
5932: LD_OWVAR 67
5936: ARRAY
5937: ST_TO_ADDR
// for i = 1 to r do
5938: LD_ADDR_VAR 0 2
5942: PUSH
5943: DOUBLE
5944: LD_INT 1
5946: DEC
5947: ST_TO_ADDR
5948: LD_VAR 0 4
5952: PUSH
5953: FOR_TO
5954: IFFALSE 6127
// begin un := PrepareTank ( 3 , 3 , [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked ] [ i mod 3 + 1 ] , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_machine_gun ] [ i mod 3 + 1 ] , 100 ) ;
5956: LD_ADDR_VAR 0 5
5960: PUSH
5961: LD_INT 3
5963: PPUSH
5964: LD_INT 3
5966: PPUSH
5967: LD_INT 22
5969: PUSH
5970: LD_INT 22
5972: PUSH
5973: LD_INT 24
5975: PUSH
5976: EMPTY
5977: LIST
5978: LIST
5979: LIST
5980: PUSH
5981: LD_VAR 0 2
5985: PUSH
5986: LD_INT 3
5988: MOD
5989: PUSH
5990: LD_INT 1
5992: PLUS
5993: ARRAY
5994: PPUSH
5995: LD_INT 1
5997: PPUSH
5998: LD_INT 1
6000: PPUSH
6001: LD_INT 43
6003: PUSH
6004: LD_INT 44
6006: PUSH
6007: LD_INT 42
6009: PUSH
6010: EMPTY
6011: LIST
6012: LIST
6013: LIST
6014: PUSH
6015: LD_VAR 0 2
6019: PUSH
6020: LD_INT 3
6022: MOD
6023: PUSH
6024: LD_INT 1
6026: PLUS
6027: ARRAY
6028: PPUSH
6029: LD_INT 100
6031: PPUSH
6032: CALL 512 0 7
6036: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
6037: LD_VAR 0 5
6041: PPUSH
6042: LD_INT 0
6044: PPUSH
6045: LD_INT 5
6047: PPUSH
6048: CALL_OW 12
6052: PPUSH
6053: CALL_OW 233
// PlaceUnitArea ( un , parkingArea , false ) ;
6057: LD_VAR 0 5
6061: PPUSH
6062: LD_INT 5
6064: PPUSH
6065: LD_INT 0
6067: PPUSH
6068: CALL_OW 49
// if i > tmp - 2 then
6072: LD_VAR 0 2
6076: PUSH
6077: LD_VAR 0 8
6081: PUSH
6082: LD_INT 2
6084: MINUS
6085: GREATER
6086: IFFALSE 6090
// continue ;
6088: GO 5953
// ComExitBuilding ( tmp [ i ] ) ;
6090: LD_VAR 0 8
6094: PUSH
6095: LD_VAR 0 2
6099: ARRAY
6100: PPUSH
6101: CALL_OW 122
// AddComEnterUnit ( tmp [ i ] , un ) ;
6105: LD_VAR 0 8
6109: PUSH
6110: LD_VAR 0 2
6114: ARRAY
6115: PPUSH
6116: LD_VAR 0 5
6120: PPUSH
6121: CALL_OW 180
// end ;
6125: GO 5953
6127: POP
6128: POP
// end ;
6129: LD_VAR 0 1
6133: RET
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) do var i , filter , tmp , engs , enemy ;
6134: LD_INT 22
6136: PUSH
6137: LD_INT 3
6139: PUSH
6140: EMPTY
6141: LIST
6142: LIST
6143: PUSH
6144: LD_INT 25
6146: PUSH
6147: LD_INT 2
6149: PUSH
6150: EMPTY
6151: LIST
6152: LIST
6153: PUSH
6154: EMPTY
6155: LIST
6156: LIST
6157: PPUSH
6158: CALL_OW 69
6162: IFFALSE 6894
6164: GO 6166
6166: DISABLE
6167: LD_INT 0
6169: PPUSH
6170: PPUSH
6171: PPUSH
6172: PPUSH
6173: PPUSH
// begin enable ;
6174: ENABLE
// filter := FilterUnitsInArea ( baseArea , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
6175: LD_ADDR_VAR 0 2
6179: PUSH
6180: LD_INT 6
6182: PPUSH
6183: LD_INT 3
6185: PUSH
6186: LD_INT 24
6188: PUSH
6189: LD_INT 1000
6191: PUSH
6192: EMPTY
6193: LIST
6194: LIST
6195: PUSH
6196: EMPTY
6197: LIST
6198: LIST
6199: PUSH
6200: LD_INT 21
6202: PUSH
6203: LD_INT 3
6205: PUSH
6206: EMPTY
6207: LIST
6208: LIST
6209: PUSH
6210: EMPTY
6211: LIST
6212: LIST
6213: PPUSH
6214: CALL_OW 70
6218: ST_TO_ADDR
// engs := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
6219: LD_ADDR_VAR 0 4
6223: PUSH
6224: LD_INT 22
6226: PUSH
6227: LD_INT 3
6229: PUSH
6230: EMPTY
6231: LIST
6232: LIST
6233: PUSH
6234: LD_INT 25
6236: PUSH
6237: LD_INT 2
6239: PUSH
6240: EMPTY
6241: LIST
6242: LIST
6243: PUSH
6244: EMPTY
6245: LIST
6246: LIST
6247: PPUSH
6248: CALL_OW 69
6252: ST_TO_ADDR
// if not filter and not ru_rebuild_list then
6253: LD_VAR 0 2
6257: NOT
6258: PUSH
6259: LD_EXP 20
6263: NOT
6264: AND
6265: IFFALSE 6335
// begin for i in engs do
6267: LD_ADDR_VAR 0 1
6271: PUSH
6272: LD_VAR 0 4
6276: PUSH
6277: FOR_IN
6278: IFFALSE 6333
// if GetLives ( i ) = 1000 and not HasTask ( i ) and not IsInUnit ( i ) then
6280: LD_VAR 0 1
6284: PPUSH
6285: CALL_OW 256
6289: PUSH
6290: LD_INT 1000
6292: EQUAL
6293: PUSH
6294: LD_VAR 0 1
6298: PPUSH
6299: CALL_OW 314
6303: NOT
6304: AND
6305: PUSH
6306: LD_VAR 0 1
6310: PPUSH
6311: CALL_OW 310
6315: NOT
6316: AND
6317: IFFALSE 6331
// ComEnterUnit ( i , ru_dep_main ) ;
6319: LD_VAR 0 1
6323: PPUSH
6324: LD_INT 16
6326: PPUSH
6327: CALL_OW 120
6331: GO 6277
6333: POP
6334: POP
// end ; if UnitFilter ( engs , [ f_not , [ f_lives , 650 ] ] ) then
6335: LD_VAR 0 4
6339: PPUSH
6340: LD_INT 3
6342: PUSH
6343: LD_INT 24
6345: PUSH
6346: LD_INT 650
6348: PUSH
6349: EMPTY
6350: LIST
6351: LIST
6352: PUSH
6353: EMPTY
6354: LIST
6355: LIST
6356: PPUSH
6357: CALL_OW 72
6361: IFFALSE 6454
// begin tmp := UnitFilter ( engs , [ f_not , [ f_lives , 650 ] ] ) ;
6363: LD_ADDR_VAR 0 3
6367: PUSH
6368: LD_VAR 0 4
6372: PPUSH
6373: LD_INT 3
6375: PUSH
6376: LD_INT 24
6378: PUSH
6379: LD_INT 650
6381: PUSH
6382: EMPTY
6383: LIST
6384: LIST
6385: PUSH
6386: EMPTY
6387: LIST
6388: LIST
6389: PPUSH
6390: CALL_OW 72
6394: ST_TO_ADDR
// for i in tmp do
6395: LD_ADDR_VAR 0 1
6399: PUSH
6400: LD_VAR 0 3
6404: PUSH
6405: FOR_IN
6406: IFFALSE 6452
// if not IsInArea ( i , mainBaseArea ) then
6408: LD_VAR 0 1
6412: PPUSH
6413: LD_INT 14
6415: PPUSH
6416: CALL_OW 308
6420: NOT
6421: IFFALSE 6450
// begin ComMoveXY ( i , 129 , 125 ) ;
6423: LD_VAR 0 1
6427: PPUSH
6428: LD_INT 129
6430: PPUSH
6431: LD_INT 125
6433: PPUSH
6434: CALL_OW 111
// AddComWait ( i , 0 0$30 ) ;
6438: LD_VAR 0 1
6442: PPUSH
6443: LD_INT 1050
6445: PPUSH
6446: CALL_OW 202
// end ;
6450: GO 6405
6452: POP
6453: POP
// end ; engs := UnitFilter ( engs , [ f_lives , 650 ] ) ;
6454: LD_ADDR_VAR 0 4
6458: PUSH
6459: LD_VAR 0 4
6463: PPUSH
6464: LD_INT 24
6466: PUSH
6467: LD_INT 650
6469: PUSH
6470: EMPTY
6471: LIST
6472: LIST
6473: PPUSH
6474: CALL_OW 72
6478: ST_TO_ADDR
// if not engs then
6479: LD_VAR 0 4
6483: NOT
6484: IFFALSE 6488
// exit ;
6486: GO 6894
// if filter then
6488: LD_VAR 0 2
6492: IFFALSE 6751
// begin for i in engs do
6494: LD_ADDR_VAR 0 1
6498: PUSH
6499: LD_VAR 0 4
6503: PUSH
6504: FOR_IN
6505: IFFALSE 6529
// if IsInUnit ( i ) then
6507: LD_VAR 0 1
6511: PPUSH
6512: CALL_OW 310
6516: IFFALSE 6527
// ComExitBuilding ( i ) ;
6518: LD_VAR 0 1
6522: PPUSH
6523: CALL_OW 122
6527: GO 6504
6529: POP
6530: POP
// wait ( 3 ) ;
6531: LD_INT 3
6533: PPUSH
6534: CALL_OW 67
// if filter >= 2 and engs >= 2 then
6538: LD_VAR 0 2
6542: PUSH
6543: LD_INT 2
6545: GREATEREQUAL
6546: PUSH
6547: LD_VAR 0 4
6551: PUSH
6552: LD_INT 2
6554: GREATEREQUAL
6555: AND
6556: IFFALSE 6704
// begin for i = 1 to engs / 2 do
6558: LD_ADDR_VAR 0 1
6562: PUSH
6563: DOUBLE
6564: LD_INT 1
6566: DEC
6567: ST_TO_ADDR
6568: LD_VAR 0 4
6572: PUSH
6573: LD_INT 2
6575: DIVREAL
6576: PUSH
6577: FOR_TO
6578: IFFALSE 6624
// if not HasTask ( engs [ i ] ) then
6580: LD_VAR 0 4
6584: PUSH
6585: LD_VAR 0 1
6589: ARRAY
6590: PPUSH
6591: CALL_OW 314
6595: NOT
6596: IFFALSE 6622
// ComRepairBuilding ( engs [ i ] , filter [ 1 ] ) ;
6598: LD_VAR 0 4
6602: PUSH
6603: LD_VAR 0 1
6607: ARRAY
6608: PPUSH
6609: LD_VAR 0 2
6613: PUSH
6614: LD_INT 1
6616: ARRAY
6617: PPUSH
6618: CALL_OW 130
6622: GO 6577
6624: POP
6625: POP
// for i = engs / 2 + 1 to engs do
6626: LD_ADDR_VAR 0 1
6630: PUSH
6631: DOUBLE
6632: LD_VAR 0 4
6636: PUSH
6637: LD_INT 2
6639: DIVREAL
6640: PUSH
6641: LD_INT 1
6643: PLUS
6644: DEC
6645: ST_TO_ADDR
6646: LD_VAR 0 4
6650: PUSH
6651: FOR_TO
6652: IFFALSE 6700
// if not HasTask ( engs [ i ] ) then
6654: LD_VAR 0 4
6658: PUSH
6659: LD_VAR 0 1
6663: ARRAY
6664: PPUSH
6665: CALL_OW 314
6669: NOT
6670: IFFALSE 6698
// ComRepairBuilding ( engs [ i ] , filter [ filter ] ) ;
6672: LD_VAR 0 4
6676: PUSH
6677: LD_VAR 0 1
6681: ARRAY
6682: PPUSH
6683: LD_VAR 0 2
6687: PUSH
6688: LD_VAR 0 2
6692: ARRAY
6693: PPUSH
6694: CALL_OW 130
6698: GO 6651
6700: POP
6701: POP
// end else
6702: GO 6751
// for i in engs do
6704: LD_ADDR_VAR 0 1
6708: PUSH
6709: LD_VAR 0 4
6713: PUSH
6714: FOR_IN
6715: IFFALSE 6749
// if not HasTask ( i ) then
6717: LD_VAR 0 1
6721: PPUSH
6722: CALL_OW 314
6726: NOT
6727: IFFALSE 6747
// ComRepairBuilding ( i , filter [ 1 ] ) ;
6729: LD_VAR 0 1
6733: PPUSH
6734: LD_VAR 0 2
6738: PUSH
6739: LD_INT 1
6741: ARRAY
6742: PPUSH
6743: CALL_OW 130
6747: GO 6714
6749: POP
6750: POP
// end ; enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
6751: LD_ADDR_VAR 0 5
6755: PUSH
6756: LD_INT 81
6758: PUSH
6759: LD_INT 3
6761: PUSH
6762: EMPTY
6763: LIST
6764: LIST
6765: PPUSH
6766: CALL_OW 69
6770: ST_TO_ADDR
// if ru_rebuild_list and not filter then
6771: LD_EXP 20
6775: PUSH
6776: LD_VAR 0 2
6780: NOT
6781: AND
6782: IFFALSE 6894
// begin ComExitBuilding ( engs ) ;
6784: LD_VAR 0 4
6788: PPUSH
6789: CALL_OW 122
// if GetDistUnitXY ( NearestUnitToXY ( enemy , ru_rebuild_list [ 2 ] , ru_rebuild_list [ 3 ] ) , ru_rebuild_list [ 2 ] , ru_rebuild_list [ 3 ] ) > 10 then
6793: LD_VAR 0 5
6797: PPUSH
6798: LD_EXP 20
6802: PUSH
6803: LD_INT 2
6805: ARRAY
6806: PPUSH
6807: LD_EXP 20
6811: PUSH
6812: LD_INT 3
6814: ARRAY
6815: PPUSH
6816: CALL_OW 73
6820: PPUSH
6821: LD_EXP 20
6825: PUSH
6826: LD_INT 2
6828: ARRAY
6829: PPUSH
6830: LD_EXP 20
6834: PUSH
6835: LD_INT 3
6837: ARRAY
6838: PPUSH
6839: CALL_OW 297
6843: PUSH
6844: LD_INT 10
6846: GREATER
6847: IFFALSE 6894
// ComBuild ( engs , ru_rebuild_list [ 1 ] , ru_rebuild_list [ 2 ] , ru_rebuild_list [ 3 ] , ru_rebuild_list [ 4 ] ) ;
6849: LD_VAR 0 4
6853: PPUSH
6854: LD_EXP 20
6858: PUSH
6859: LD_INT 1
6861: ARRAY
6862: PPUSH
6863: LD_EXP 20
6867: PUSH
6868: LD_INT 2
6870: ARRAY
6871: PPUSH
6872: LD_EXP 20
6876: PUSH
6877: LD_INT 3
6879: ARRAY
6880: PPUSH
6881: LD_EXP 20
6885: PUSH
6886: LD_INT 4
6888: ARRAY
6889: PPUSH
6890: CALL_OW 145
// end ; end ;
6894: PPOPN 5
6896: END
// every 0 0$1 trigger GetLives ( ru_dep_main ) < 250 do var i , tmp ;
6897: LD_INT 16
6899: PPUSH
6900: CALL_OW 256
6904: PUSH
6905: LD_INT 250
6907: LESS
6908: IFFALSE 7098
6910: GO 6912
6912: DISABLE
6913: LD_INT 0
6915: PPUSH
6916: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_class , 1 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ;
6917: LD_ADDR_VAR 0 2
6921: PUSH
6922: LD_INT 22
6924: PUSH
6925: LD_INT 3
6927: PUSH
6928: EMPTY
6929: LIST
6930: LIST
6931: PUSH
6932: LD_INT 2
6934: PUSH
6935: LD_INT 25
6937: PUSH
6938: LD_INT 1
6940: PUSH
6941: EMPTY
6942: LIST
6943: LIST
6944: PUSH
6945: LD_INT 25
6947: PUSH
6948: LD_INT 3
6950: PUSH
6951: EMPTY
6952: LIST
6953: LIST
6954: PUSH
6955: LD_INT 25
6957: PUSH
6958: LD_INT 4
6960: PUSH
6961: EMPTY
6962: LIST
6963: LIST
6964: PUSH
6965: EMPTY
6966: LIST
6967: LIST
6968: LIST
6969: LIST
6970: PUSH
6971: EMPTY
6972: LIST
6973: LIST
6974: PPUSH
6975: CALL_OW 69
6979: ST_TO_ADDR
// ComExitBuilding ( tmp ) ;
6980: LD_VAR 0 2
6984: PPUSH
6985: CALL_OW 122
// wait ( 3 ) ;
6989: LD_INT 3
6991: PPUSH
6992: CALL_OW 67
// ComMoveXY ( tmp , 156 , 211 ) ;
6996: LD_VAR 0 2
7000: PPUSH
7001: LD_INT 156
7003: PPUSH
7004: LD_INT 211
7006: PPUSH
7007: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
7011: LD_INT 35
7013: PPUSH
7014: CALL_OW 67
// for i in tmp do
7018: LD_ADDR_VAR 0 1
7022: PUSH
7023: LD_VAR 0 2
7027: PUSH
7028: FOR_IN
7029: IFFALSE 7089
// if IsInArea ( i , escapeArea ) then
7031: LD_VAR 0 1
7035: PPUSH
7036: LD_INT 15
7038: PPUSH
7039: CALL_OW 308
7043: IFFALSE 7072
// begin RemoveUnit ( i ) ;
7045: LD_VAR 0 1
7049: PPUSH
7050: CALL_OW 64
// tmp := tmp diff i ;
7054: LD_ADDR_VAR 0 2
7058: PUSH
7059: LD_VAR 0 2
7063: PUSH
7064: LD_VAR 0 1
7068: DIFF
7069: ST_TO_ADDR
// end else
7070: GO 7087
// ComMoveXY ( i , 156 , 211 ) ;
7072: LD_VAR 0 1
7076: PPUSH
7077: LD_INT 156
7079: PPUSH
7080: LD_INT 211
7082: PPUSH
7083: CALL_OW 111
7087: GO 7028
7089: POP
7090: POP
// until not tmp ;
7091: LD_VAR 0 2
7095: NOT
7096: IFFALSE 7011
// end ;
7098: PPOPN 2
7100: END
// every 0 0$01 trigger GetLives ( ru_dep_main ) > 250 and FilterAllUnits ( [ [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_outside ] ] ] ) do var i , tmp ;
7101: LD_INT 16
7103: PPUSH
7104: CALL_OW 256
7108: PUSH
7109: LD_INT 250
7111: GREATER
7112: PUSH
7113: LD_INT 22
7115: PUSH
7116: LD_INT 3
7118: PUSH
7119: EMPTY
7120: LIST
7121: LIST
7122: PUSH
7123: LD_INT 25
7125: PUSH
7126: LD_INT 1
7128: PUSH
7129: EMPTY
7130: LIST
7131: LIST
7132: PUSH
7133: LD_INT 56
7135: PUSH
7136: EMPTY
7137: LIST
7138: PUSH
7139: EMPTY
7140: LIST
7141: LIST
7142: LIST
7143: PUSH
7144: EMPTY
7145: LIST
7146: PPUSH
7147: CALL_OW 69
7151: AND
7152: IFFALSE 7264
7154: GO 7156
7156: DISABLE
7157: LD_INT 0
7159: PPUSH
7160: PPUSH
// begin enable ;
7161: ENABLE
// tmp := FilterAllUnits ( [ [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_outside ] , [ f_not , [ f_hastask ] ] ] ] ) ;
7162: LD_ADDR_VAR 0 2
7166: PUSH
7167: LD_INT 22
7169: PUSH
7170: LD_INT 3
7172: PUSH
7173: EMPTY
7174: LIST
7175: LIST
7176: PUSH
7177: LD_INT 25
7179: PUSH
7180: LD_INT 1
7182: PUSH
7183: EMPTY
7184: LIST
7185: LIST
7186: PUSH
7187: LD_INT 56
7189: PUSH
7190: EMPTY
7191: LIST
7192: PUSH
7193: LD_INT 3
7195: PUSH
7196: LD_INT 60
7198: PUSH
7199: EMPTY
7200: LIST
7201: PUSH
7202: EMPTY
7203: LIST
7204: LIST
7205: PUSH
7206: EMPTY
7207: LIST
7208: LIST
7209: LIST
7210: LIST
7211: PUSH
7212: EMPTY
7213: LIST
7214: PPUSH
7215: CALL_OW 69
7219: ST_TO_ADDR
// if not tmp then
7220: LD_VAR 0 2
7224: NOT
7225: IFFALSE 7229
// exit ;
7227: GO 7264
// for i in tmp do
7229: LD_ADDR_VAR 0 1
7233: PUSH
7234: LD_VAR 0 2
7238: PUSH
7239: FOR_IN
7240: IFFALSE 7262
// GoToAnotherTower ( i , 0 , 143 , 143 ) ;
7242: LD_VAR 0 1
7246: PPUSH
7247: LD_INT 0
7249: PPUSH
7250: LD_INT 143
7252: PPUSH
7253: LD_INT 143
7255: PPUSH
7256: CALL 830 0 4
7260: GO 7239
7262: POP
7263: POP
// end ;
7264: PPOPN 2
7266: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do var i , tmp , doc ;
7267: LD_INT 22
7269: PUSH
7270: LD_INT 3
7272: PUSH
7273: EMPTY
7274: LIST
7275: LIST
7276: PUSH
7277: LD_INT 25
7279: PUSH
7280: LD_INT 4
7282: PUSH
7283: EMPTY
7284: LIST
7285: LIST
7286: PUSH
7287: EMPTY
7288: LIST
7289: LIST
7290: PPUSH
7291: CALL_OW 69
7295: IFFALSE 7549
7297: GO 7299
7299: DISABLE
7300: LD_INT 0
7302: PPUSH
7303: PPUSH
7304: PPUSH
// begin enable ;
7305: ENABLE
// tmp := FilterUnitsInArea ( mainBaseArea , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
7306: LD_ADDR_VAR 0 2
7310: PUSH
7311: LD_INT 14
7313: PPUSH
7314: LD_INT 22
7316: PUSH
7317: LD_INT 3
7319: PUSH
7320: EMPTY
7321: LIST
7322: LIST
7323: PUSH
7324: LD_INT 21
7326: PUSH
7327: LD_INT 1
7329: PUSH
7330: EMPTY
7331: LIST
7332: LIST
7333: PUSH
7334: LD_INT 3
7336: PUSH
7337: LD_INT 24
7339: PUSH
7340: LD_INT 1000
7342: PUSH
7343: EMPTY
7344: LIST
7345: LIST
7346: PUSH
7347: EMPTY
7348: LIST
7349: LIST
7350: PUSH
7351: EMPTY
7352: LIST
7353: LIST
7354: LIST
7355: PPUSH
7356: CALL_OW 70
7360: ST_TO_ADDR
// doc := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) ;
7361: LD_ADDR_VAR 0 3
7365: PUSH
7366: LD_INT 22
7368: PUSH
7369: LD_INT 3
7371: PUSH
7372: EMPTY
7373: LIST
7374: LIST
7375: PUSH
7376: LD_INT 25
7378: PUSH
7379: LD_INT 4
7381: PUSH
7382: EMPTY
7383: LIST
7384: LIST
7385: PUSH
7386: EMPTY
7387: LIST
7388: LIST
7389: PPUSH
7390: CALL_OW 69
7394: ST_TO_ADDR
// if not doc then
7395: LD_VAR 0 3
7399: NOT
7400: IFFALSE 7404
// exit ;
7402: GO 7549
// if not tmp then
7404: LD_VAR 0 2
7408: NOT
7409: IFFALSE 7500
// begin if not IsInUnit ( doc [ 1 ] ) then
7411: LD_VAR 0 3
7415: PUSH
7416: LD_INT 1
7418: ARRAY
7419: PPUSH
7420: CALL_OW 310
7424: NOT
7425: IFFALSE 7498
// ComEnterUnit ( doc , FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) [ 1 ] ) ;
7427: LD_VAR 0 3
7431: PPUSH
7432: LD_INT 22
7434: PUSH
7435: LD_INT 3
7437: PUSH
7438: EMPTY
7439: LIST
7440: LIST
7441: PUSH
7442: LD_INT 2
7444: PUSH
7445: LD_INT 30
7447: PUSH
7448: LD_INT 6
7450: PUSH
7451: EMPTY
7452: LIST
7453: LIST
7454: PUSH
7455: LD_INT 30
7457: PUSH
7458: LD_INT 7
7460: PUSH
7461: EMPTY
7462: LIST
7463: LIST
7464: PUSH
7465: LD_INT 30
7467: PUSH
7468: LD_INT 8
7470: PUSH
7471: EMPTY
7472: LIST
7473: LIST
7474: PUSH
7475: EMPTY
7476: LIST
7477: LIST
7478: LIST
7479: LIST
7480: PUSH
7481: EMPTY
7482: LIST
7483: LIST
7484: PPUSH
7485: CALL_OW 69
7489: PUSH
7490: LD_INT 1
7492: ARRAY
7493: PPUSH
7494: CALL_OW 120
// exit ;
7498: GO 7549
// end ; if IsInUnit ( doc [ 1 ] ) then
7500: LD_VAR 0 3
7504: PUSH
7505: LD_INT 1
7507: ARRAY
7508: PPUSH
7509: CALL_OW 310
7513: IFFALSE 7524
// ComExitBuilding ( doc ) ;
7515: LD_VAR 0 3
7519: PPUSH
7520: CALL_OW 122
// wait ( 3 ) ;
7524: LD_INT 3
7526: PPUSH
7527: CALL_OW 67
// ComHeal ( doc , tmp [ 1 ] ) ;
7531: LD_VAR 0 3
7535: PPUSH
7536: LD_VAR 0 2
7540: PUSH
7541: LD_INT 1
7543: ARRAY
7544: PPUSH
7545: CALL_OW 128
// end ;
7549: PPOPN 3
7551: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) do var i , tmp , attacking , areas , area ;
7552: LD_INT 22
7554: PUSH
7555: LD_INT 3
7557: PUSH
7558: EMPTY
7559: LIST
7560: LIST
7561: PUSH
7562: LD_INT 25
7564: PUSH
7565: LD_INT 3
7567: PUSH
7568: EMPTY
7569: LIST
7570: LIST
7571: PUSH
7572: EMPTY
7573: LIST
7574: LIST
7575: PPUSH
7576: CALL_OW 69
7580: PUSH
7581: LD_INT 22
7583: PUSH
7584: LD_INT 3
7586: PUSH
7587: EMPTY
7588: LIST
7589: LIST
7590: PUSH
7591: LD_INT 21
7593: PUSH
7594: LD_INT 2
7596: PUSH
7597: EMPTY
7598: LIST
7599: LIST
7600: PUSH
7601: EMPTY
7602: LIST
7603: LIST
7604: PPUSH
7605: CALL_OW 69
7609: AND
7610: IFFALSE 8024
7612: GO 7614
7614: DISABLE
7615: LD_INT 0
7617: PPUSH
7618: PPUSH
7619: PPUSH
7620: PPUSH
7621: PPUSH
// begin enable ;
7622: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) ;
7623: LD_ADDR_VAR 0 2
7627: PUSH
7628: LD_INT 22
7630: PUSH
7631: LD_INT 3
7633: PUSH
7634: EMPTY
7635: LIST
7636: LIST
7637: PUSH
7638: LD_INT 21
7640: PUSH
7641: LD_INT 2
7643: PUSH
7644: EMPTY
7645: LIST
7646: LIST
7647: PUSH
7648: LD_INT 3
7650: PUSH
7651: LD_INT 58
7653: PUSH
7654: EMPTY
7655: LIST
7656: PUSH
7657: EMPTY
7658: LIST
7659: LIST
7660: PUSH
7661: EMPTY
7662: LIST
7663: LIST
7664: LIST
7665: PPUSH
7666: CALL_OW 69
7670: ST_TO_ADDR
// areas := [ sectorAlpha , sectorBeta , sectorDelta , mainBaseArea ] ;
7671: LD_ADDR_VAR 0 4
7675: PUSH
7676: LD_INT 10
7678: PUSH
7679: LD_INT 11
7681: PUSH
7682: LD_INT 12
7684: PUSH
7685: LD_INT 14
7687: PUSH
7688: EMPTY
7689: LIST
7690: LIST
7691: LIST
7692: LIST
7693: ST_TO_ADDR
// area := 0 ;
7694: LD_ADDR_VAR 0 5
7698: PUSH
7699: LD_INT 0
7701: ST_TO_ADDR
// attacking := false ;
7702: LD_ADDR_VAR 0 3
7706: PUSH
7707: LD_INT 0
7709: ST_TO_ADDR
// for i in tmp do
7710: LD_ADDR_VAR 0 1
7714: PUSH
7715: LD_VAR 0 2
7719: PUSH
7720: FOR_IN
7721: IFFALSE 7807
// if GetDistUnits ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) < 10 then
7723: LD_VAR 0 1
7727: PPUSH
7728: LD_INT 22
7730: PUSH
7731: LD_INT 1
7733: PUSH
7734: EMPTY
7735: LIST
7736: LIST
7737: PPUSH
7738: CALL_OW 69
7742: PPUSH
7743: LD_VAR 0 1
7747: PPUSH
7748: CALL_OW 74
7752: PPUSH
7753: CALL_OW 296
7757: PUSH
7758: LD_INT 10
7760: LESS
7761: IFFALSE 7805
// begin ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
7763: LD_VAR 0 1
7767: PPUSH
7768: LD_INT 22
7770: PUSH
7771: LD_INT 1
7773: PUSH
7774: EMPTY
7775: LIST
7776: LIST
7777: PPUSH
7778: CALL_OW 69
7782: PPUSH
7783: LD_VAR 0 1
7787: PPUSH
7788: CALL_OW 74
7792: PPUSH
7793: CALL_OW 115
// attacking := true ;
7797: LD_ADDR_VAR 0 3
7801: PUSH
7802: LD_INT 1
7804: ST_TO_ADDR
// end ;
7805: GO 7720
7807: POP
7808: POP
// if attacking then
7809: LD_VAR 0 3
7813: IFFALSE 7817
// exit ;
7815: GO 8024
// for i in areas do
7817: LD_ADDR_VAR 0 1
7821: PUSH
7822: LD_VAR 0 4
7826: PUSH
7827: FOR_IN
7828: IFFALSE 7865
// if FilterUnitsInArea ( i , [ f_side , 1 ] ) then
7830: LD_VAR 0 1
7834: PPUSH
7835: LD_INT 22
7837: PUSH
7838: LD_INT 1
7840: PUSH
7841: EMPTY
7842: LIST
7843: LIST
7844: PPUSH
7845: CALL_OW 70
7849: IFFALSE 7863
// begin area := i ;
7851: LD_ADDR_VAR 0 5
7855: PUSH
7856: LD_VAR 0 1
7860: ST_TO_ADDR
// break ;
7861: GO 7865
// end ;
7863: GO 7827
7865: POP
7866: POP
// if area then
7867: LD_VAR 0 5
7871: IFFALSE 8024
// begin for i in tmp do
7873: LD_ADDR_VAR 0 1
7877: PUSH
7878: LD_VAR 0 2
7882: PUSH
7883: FOR_IN
7884: IFFALSE 8022
// begin if GetFuel ( i ) < 33 then
7886: LD_VAR 0 1
7890: PPUSH
7891: CALL_OW 261
7895: PUSH
7896: LD_INT 33
7898: LESS
7899: IFFALSE 7913
// SetFuel ( i , 33 ) ;
7901: LD_VAR 0 1
7905: PPUSH
7906: LD_INT 33
7908: PPUSH
7909: CALL_OW 240
// if GetDistUnits ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) < 10 then
7913: LD_VAR 0 1
7917: PPUSH
7918: LD_INT 22
7920: PUSH
7921: LD_INT 1
7923: PUSH
7924: EMPTY
7925: LIST
7926: LIST
7927: PPUSH
7928: CALL_OW 69
7932: PPUSH
7933: LD_VAR 0 1
7937: PPUSH
7938: CALL_OW 74
7942: PPUSH
7943: CALL_OW 296
7947: PUSH
7948: LD_INT 10
7950: LESS
7951: IFFALSE 7989
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) else
7953: LD_VAR 0 1
7957: PPUSH
7958: LD_INT 22
7960: PUSH
7961: LD_INT 1
7963: PUSH
7964: EMPTY
7965: LIST
7966: LIST
7967: PPUSH
7968: CALL_OW 69
7972: PPUSH
7973: LD_VAR 0 1
7977: PPUSH
7978: CALL_OW 74
7982: PPUSH
7983: CALL_OW 115
7987: GO 8020
// if not IsInArea ( i , area ) then
7989: LD_VAR 0 1
7993: PPUSH
7994: LD_VAR 0 5
7998: PPUSH
7999: CALL_OW 308
8003: NOT
8004: IFFALSE 8020
// ComMoveToArea ( i , area ) ;
8006: LD_VAR 0 1
8010: PPUSH
8011: LD_VAR 0 5
8015: PPUSH
8016: CALL_OW 113
// end ;
8020: GO 7883
8022: POP
8023: POP
// end ; end ;
8024: PPOPN 5
8026: END
// every 15 15$00 trigger Difficulty > 1 do var i , j , un , veh , time , count ;
8027: LD_OWVAR 67
8031: PUSH
8032: LD_INT 1
8034: GREATER
8035: IFFALSE 8320
8037: GO 8039
8039: DISABLE
8040: LD_INT 0
8042: PPUSH
8043: PPUSH
8044: PPUSH
8045: PPUSH
8046: PPUSH
8047: PPUSH
// begin uc_side := 3 ;
8048: LD_ADDR_OWVAR 20
8052: PUSH
8053: LD_INT 3
8055: ST_TO_ADDR
// uc_nation := 3 ;
8056: LD_ADDR_OWVAR 21
8060: PUSH
8061: LD_INT 3
8063: ST_TO_ADDR
// time := [ 9 9$00 , 7 7$00 , 6 6$00 , 5 5$30 ] [ Difficulty ] ;
8064: LD_ADDR_VAR 0 5
8068: PUSH
8069: LD_INT 18900
8071: PUSH
8072: LD_INT 14700
8074: PUSH
8075: LD_INT 12600
8077: PUSH
8078: LD_INT 11550
8080: PUSH
8081: EMPTY
8082: LIST
8083: LIST
8084: LIST
8085: LIST
8086: PUSH
8087: LD_OWVAR 67
8091: ARRAY
8092: ST_TO_ADDR
// count := [ 2 , 2 , 3 , 3 ] [ Difficulty ] ;
8093: LD_ADDR_VAR 0 6
8097: PUSH
8098: LD_INT 2
8100: PUSH
8101: LD_INT 2
8103: PUSH
8104: LD_INT 3
8106: PUSH
8107: LD_INT 3
8109: PUSH
8110: EMPTY
8111: LIST
8112: LIST
8113: LIST
8114: LIST
8115: PUSH
8116: LD_OWVAR 67
8120: ARRAY
8121: ST_TO_ADDR
// for i = 1 to count do
8122: LD_ADDR_VAR 0 1
8126: PUSH
8127: DOUBLE
8128: LD_INT 1
8130: DEC
8131: ST_TO_ADDR
8132: LD_VAR 0 6
8136: PUSH
8137: FOR_TO
8138: IFFALSE 8318
// begin wait ( time ) ;
8140: LD_VAR 0 5
8144: PPUSH
8145: CALL_OW 67
// for j = 1 to rand ( 1 , Difficulty ) do
8149: LD_ADDR_VAR 0 2
8153: PUSH
8154: DOUBLE
8155: LD_INT 1
8157: DEC
8158: ST_TO_ADDR
8159: LD_INT 1
8161: PPUSH
8162: LD_OWVAR 67
8166: PPUSH
8167: CALL_OW 12
8171: PUSH
8172: FOR_TO
8173: IFFALSE 8314
// begin veh := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_machine_gun ] [ i mod 3 + 1 ] , 80 ) ;
8175: LD_ADDR_VAR 0 4
8179: PUSH
8180: LD_INT 3
8182: PPUSH
8183: LD_INT 3
8185: PPUSH
8186: LD_INT 22
8188: PPUSH
8189: LD_INT 1
8191: PPUSH
8192: LD_INT 1
8194: PPUSH
8195: LD_INT 43
8197: PUSH
8198: LD_INT 44
8200: PUSH
8201: LD_INT 42
8203: PUSH
8204: EMPTY
8205: LIST
8206: LIST
8207: LIST
8208: PUSH
8209: LD_VAR 0 1
8213: PUSH
8214: LD_INT 3
8216: MOD
8217: PUSH
8218: LD_INT 1
8220: PLUS
8221: ARRAY
8222: PPUSH
8223: LD_INT 80
8225: PPUSH
8226: CALL 512 0 7
8230: ST_TO_ADDR
// PlaceUnitArea ( veh , southArea , false ) ;
8231: LD_VAR 0 4
8235: PPUSH
8236: LD_INT 13
8238: PPUSH
8239: LD_INT 0
8241: PPUSH
8242: CALL_OW 49
// PrepareHuman ( false , 3 , [ 4 , 5 , 5 ] [ Difficulty ] ) ;
8246: LD_INT 0
8248: PPUSH
8249: LD_INT 3
8251: PPUSH
8252: LD_INT 4
8254: PUSH
8255: LD_INT 5
8257: PUSH
8258: LD_INT 5
8260: PUSH
8261: EMPTY
8262: LIST
8263: LIST
8264: LIST
8265: PUSH
8266: LD_OWVAR 67
8270: ARRAY
8271: PPUSH
8272: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
8276: CALL_OW 44
8280: PPUSH
8281: LD_VAR 0 4
8285: PPUSH
8286: CALL_OW 52
// wait ( 0 0$01 ) ;
8290: LD_INT 35
8292: PPUSH
8293: CALL_OW 67
// ComMoveXY ( veh , 143 , 143 ) ;
8297: LD_VAR 0 4
8301: PPUSH
8302: LD_INT 143
8304: PPUSH
8305: LD_INT 143
8307: PPUSH
8308: CALL_OW 111
// end ;
8312: GO 8172
8314: POP
8315: POP
// end ;
8316: GO 8137
8318: POP
8319: POP
// end ;
8320: PPOPN 6
8322: END
// every 8 8$00 do var i , un , time ;
8323: GO 8325
8325: DISABLE
8326: LD_INT 0
8328: PPUSH
8329: PPUSH
8330: PPUSH
// begin time := [ 3 3$00 , 1 1$00 , 0 0$30 ] ;
8331: LD_ADDR_VAR 0 3
8335: PUSH
8336: LD_INT 6300
8338: PUSH
8339: LD_INT 2100
8341: PUSH
8342: LD_INT 1050
8344: PUSH
8345: EMPTY
8346: LIST
8347: LIST
8348: LIST
8349: ST_TO_ADDR
// wait ( time ) ;
8350: LD_VAR 0 3
8354: PPUSH
8355: CALL_OW 67
// uc_side := 3 ;
8359: LD_ADDR_OWVAR 20
8363: PUSH
8364: LD_INT 3
8366: ST_TO_ADDR
// uc_nation := 3 ;
8367: LD_ADDR_OWVAR 21
8371: PUSH
8372: LD_INT 3
8374: ST_TO_ADDR
// for i = 1 to 2 do
8375: LD_ADDR_VAR 0 1
8379: PUSH
8380: DOUBLE
8381: LD_INT 1
8383: DEC
8384: ST_TO_ADDR
8385: LD_INT 2
8387: PUSH
8388: FOR_TO
8389: IFFALSE 8452
// begin PrepareHuman ( false , 1 , 4 ) ;
8391: LD_INT 0
8393: PPUSH
8394: LD_INT 1
8396: PPUSH
8397: LD_INT 4
8399: PPUSH
8400: CALL_OW 380
// un := CreateHuman ;
8404: LD_ADDR_VAR 0 2
8408: PUSH
8409: CALL_OW 44
8413: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_dep_main ) ;
8414: LD_VAR 0 2
8418: PPUSH
8419: LD_INT 16
8421: PPUSH
8422: CALL_OW 52
// ComExitBuilding ( un ) ;
8426: LD_VAR 0 2
8430: PPUSH
8431: CALL_OW 122
// AddComAgressiveMove ( un , 41 , 76 ) ;
8435: LD_VAR 0 2
8439: PPUSH
8440: LD_INT 41
8442: PPUSH
8443: LD_INT 76
8445: PPUSH
8446: CALL_OW 174
// end ;
8450: GO 8388
8452: POP
8453: POP
// end ; end_of_file
8454: PPOPN 3
8456: END
// export function Action ; begin
8457: LD_INT 0
8459: PPUSH
// CenterNowOnXY ( 28 , 3 ) ;
8460: LD_INT 28
8462: PPUSH
8463: LD_INT 3
8465: PPUSH
8466: CALL_OW 86
// PlaceSeeing ( 41 , 76 , 1 , 10 ) ;
8470: LD_INT 41
8472: PPUSH
8473: LD_INT 76
8475: PPUSH
8476: LD_INT 1
8478: PPUSH
8479: LD_INT 10
8481: PPUSH
8482: CALL_OW 330
// RemoveSeeing ( 41 , 76 , 1 ) ;
8486: LD_INT 41
8488: PPUSH
8489: LD_INT 76
8491: PPUSH
8492: LD_INT 1
8494: PPUSH
8495: CALL_OW 331
// InGameOn ;
8499: CALL_OW 8
// SayRadio ( Harisson , D2-Har-1 ) ;
8503: LD_EXP 19
8507: PPUSH
8508: LD_STRING D2-Har-1
8510: PPUSH
8511: CALL_OW 94
// InGameOff ;
8515: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
8519: LD_STRING M1
8521: PPUSH
8522: CALL_OW 337
// end ;
8526: LD_VAR 0 1
8530: RET
// every 0 0$1 trigger buildings_counter > 1 do var un ;
8531: LD_EXP 4
8535: PUSH
8536: LD_INT 1
8538: GREATER
8539: IFFALSE 8630
8541: GO 8543
8543: DISABLE
8544: LD_INT 0
8546: PPUSH
// begin un := GetRandom ( sex_male ) [ 1 ] ;
8547: LD_ADDR_VAR 0 1
8551: PUSH
8552: LD_INT 1
8554: PPUSH
8555: CALL 600 0 1
8559: PUSH
8560: LD_INT 1
8562: ARRAY
8563: ST_TO_ADDR
// Say ( un , D2a-Sol1-1 ) ;
8564: LD_VAR 0 1
8568: PPUSH
8569: LD_STRING D2a-Sol1-1
8571: PPUSH
8572: CALL_OW 88
// if not un then
8576: LD_VAR 0 1
8580: NOT
8581: IFFALSE 8612
// begin un := GetRandom ( sex_female ) [ 1 ] ;
8583: LD_ADDR_VAR 0 1
8587: PUSH
8588: LD_INT 2
8590: PPUSH
8591: CALL 600 0 1
8595: PUSH
8596: LD_INT 1
8598: ARRAY
8599: ST_TO_ADDR
// Say ( un , D2a-FSol1-1 ) ;
8600: LD_VAR 0 1
8604: PPUSH
8605: LD_STRING D2a-FSol1-1
8607: PPUSH
8608: CALL_OW 88
// end ; if Khatam then
8612: LD_EXP 17
8616: IFFALSE 8630
// Say ( Khatam , D3b-Khat-3 ) ;
8618: LD_EXP 17
8622: PPUSH
8623: LD_STRING D3b-Khat-3
8625: PPUSH
8626: CALL_OW 88
// end ;
8630: PPOPN 1
8632: END
// every 0 0$1 trigger Frank and not Kikuchi and FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , GetX ( Frank ) , GetY ( Frank ) , 7 ] ] ) and not InBattle ( 1 ) and not InBattle ( 4 ) do var i , ape ;
8633: LD_EXP 15
8637: PUSH
8638: LD_EXP 18
8642: NOT
8643: AND
8644: PUSH
8645: LD_INT 22
8647: PUSH
8648: LD_INT 1
8650: PUSH
8651: EMPTY
8652: LIST
8653: LIST
8654: PUSH
8655: LD_INT 92
8657: PUSH
8658: LD_EXP 15
8662: PPUSH
8663: CALL_OW 250
8667: PUSH
8668: LD_EXP 15
8672: PPUSH
8673: CALL_OW 251
8677: PUSH
8678: LD_INT 7
8680: PUSH
8681: EMPTY
8682: LIST
8683: LIST
8684: LIST
8685: LIST
8686: PUSH
8687: EMPTY
8688: LIST
8689: LIST
8690: PPUSH
8691: CALL_OW 69
8695: AND
8696: PUSH
8697: LD_INT 1
8699: PPUSH
8700: CALL_OW 463
8704: NOT
8705: AND
8706: PUSH
8707: LD_INT 4
8709: PPUSH
8710: CALL_OW 463
8714: NOT
8715: AND
8716: IFFALSE 9303
8718: GO 8720
8720: DISABLE
8721: LD_INT 0
8723: PPUSH
8724: PPUSH
// begin InGameOn ;
8725: CALL_OW 8
// ape := FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) ;
8729: LD_ADDR_VAR 0 2
8733: PUSH
8734: LD_INT 22
8736: PUSH
8737: LD_INT 0
8739: PUSH
8740: EMPTY
8741: LIST
8742: LIST
8743: PUSH
8744: LD_INT 25
8746: PUSH
8747: LD_INT 12
8749: PUSH
8750: EMPTY
8751: LIST
8752: LIST
8753: PUSH
8754: EMPTY
8755: LIST
8756: LIST
8757: PPUSH
8758: CALL_OW 69
8762: ST_TO_ADDR
// ape := NearestUnitToUnit ( ape , Frank ) ;
8763: LD_ADDR_VAR 0 2
8767: PUSH
8768: LD_VAR 0 2
8772: PPUSH
8773: LD_EXP 15
8777: PPUSH
8778: CALL_OW 74
8782: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_dist , Frank , 20 ] ] ) do
8783: LD_ADDR_VAR 0 1
8787: PUSH
8788: LD_INT 22
8790: PUSH
8791: LD_INT 1
8793: PUSH
8794: EMPTY
8795: LIST
8796: LIST
8797: PUSH
8798: LD_INT 21
8800: PUSH
8801: LD_INT 1
8803: PUSH
8804: EMPTY
8805: LIST
8806: LIST
8807: PUSH
8808: LD_INT 91
8810: PUSH
8811: LD_EXP 15
8815: PUSH
8816: LD_INT 20
8818: PUSH
8819: EMPTY
8820: LIST
8821: LIST
8822: LIST
8823: PUSH
8824: EMPTY
8825: LIST
8826: LIST
8827: LIST
8828: PPUSH
8829: CALL_OW 69
8833: PUSH
8834: FOR_IN
8835: IFFALSE 8853
// ComTurnUnit ( i , Frank ) ;
8837: LD_VAR 0 1
8841: PPUSH
8842: LD_EXP 15
8846: PPUSH
8847: CALL_OW 119
8851: GO 8834
8853: POP
8854: POP
// SetSide ( Frank , 1 ) ;
8855: LD_EXP 15
8859: PPUSH
8860: LD_INT 1
8862: PPUSH
8863: CALL_OW 235
// ComMoveUnit ( JMM , Frank ) ;
8867: LD_EXP 9
8871: PPUSH
8872: LD_EXP 15
8876: PPUSH
8877: CALL_OW 112
// AddComTurnUnit ( JMM , Frank ) ;
8881: LD_EXP 9
8885: PPUSH
8886: LD_EXP 15
8890: PPUSH
8891: CALL_OW 179
// CenterOnUnits ( Frank ) ;
8895: LD_EXP 15
8899: PPUSH
8900: CALL_OW 85
// Say ( Frank , D3a-Frank-1 ) ;
8904: LD_EXP 15
8908: PPUSH
8909: LD_STRING D3a-Frank-1
8911: PPUSH
8912: CALL_OW 88
// ComMoveXY ( ape , 42 , 78 ) ;
8916: LD_VAR 0 2
8920: PPUSH
8921: LD_INT 42
8923: PPUSH
8924: LD_INT 78
8926: PPUSH
8927: CALL_OW 111
// AddComTurnUnit ( ape , Frank ) ;
8931: LD_VAR 0 2
8935: PPUSH
8936: LD_EXP 15
8940: PPUSH
8941: CALL_OW 179
// if Lisa then
8945: LD_EXP 14
8949: IFFALSE 8963
// Say ( Lisa , D3a-Lisa-1 ) ;
8951: LD_EXP 14
8955: PPUSH
8956: LD_STRING D3a-Lisa-1
8958: PPUSH
8959: CALL_OW 88
// Say ( JMM , D3a-JMM-1 ) ;
8963: LD_EXP 9
8967: PPUSH
8968: LD_STRING D3a-JMM-1
8970: PPUSH
8971: CALL_OW 88
// if Cyrus then
8975: LD_EXP 13
8979: IFFALSE 8993
// Say ( Cyrus , D3a-Cyrus-1 ) ;
8981: LD_EXP 13
8985: PPUSH
8986: LD_STRING D3a-Cyrus-1
8988: PPUSH
8989: CALL_OW 88
// if GetRandom ( sex_male ) then
8993: LD_INT 1
8995: PPUSH
8996: CALL 600 0 1
9000: IFFALSE 9021
// Say ( GetRandom ( sex_male ) [ 1 ] , D3a-Sol1-1 ) ;
9002: LD_INT 1
9004: PPUSH
9005: CALL 600 0 1
9009: PUSH
9010: LD_INT 1
9012: ARRAY
9013: PPUSH
9014: LD_STRING D3a-Sol1-1
9016: PPUSH
9017: CALL_OW 88
// if GetRandom ( sex_female ) then
9021: LD_INT 2
9023: PPUSH
9024: CALL 600 0 1
9028: IFFALSE 9049
// Say ( GetRandom ( sex_female ) [ 1 ] , D3a-FSol1-1 ) ;
9030: LD_INT 2
9032: PPUSH
9033: CALL 600 0 1
9037: PUSH
9038: LD_INT 1
9040: ARRAY
9041: PPUSH
9042: LD_STRING D3a-FSol1-1
9044: PPUSH
9045: CALL_OW 88
// if Gladstone then
9049: LD_EXP 16
9053: IFFALSE 9067
// Say ( Gladstone , D3a-Glad-1 ) ;
9055: LD_EXP 16
9059: PPUSH
9060: LD_STRING D3a-Glad-1
9062: PPUSH
9063: CALL_OW 88
// ComMoveXY ( ape , 60 , 113 ) ;
9067: LD_VAR 0 2
9071: PPUSH
9072: LD_INT 60
9074: PPUSH
9075: LD_INT 113
9077: PPUSH
9078: CALL_OW 111
// Say ( Frank , D3a-Frank-2 ) ;
9082: LD_EXP 15
9086: PPUSH
9087: LD_STRING D3a-Frank-2
9089: PPUSH
9090: CALL_OW 88
// ComTurnUnit ( Frank , JMM ) ;
9094: LD_EXP 15
9098: PPUSH
9099: LD_EXP 9
9103: PPUSH
9104: CALL_OW 119
// Say ( JMM , D3a-JMM-2 ) ;
9108: LD_EXP 9
9112: PPUSH
9113: LD_STRING D3a-JMM-2
9115: PPUSH
9116: CALL_OW 88
// RevealFogArea ( 1 , spotArea ) ;
9120: LD_INT 1
9122: PPUSH
9123: LD_INT 4
9125: PPUSH
9126: CALL_OW 332
// CenterOnXY ( 85 , 134 ) ;
9130: LD_INT 85
9132: PPUSH
9133: LD_INT 134
9135: PPUSH
9136: CALL_OW 84
// Say ( Frank , D3a-Frank-3 ) ;
9140: LD_EXP 15
9144: PPUSH
9145: LD_STRING D3a-Frank-3
9147: PPUSH
9148: CALL_OW 88
// Wait ( 0 0$01 ) ;
9152: LD_INT 35
9154: PPUSH
9155: CALL_OW 67
// CenterOnXY ( 166 , 136 ) ;
9159: LD_INT 166
9161: PPUSH
9162: LD_INT 136
9164: PPUSH
9165: CALL_OW 84
// Say ( JMM , D3a-JMM-3 ) ;
9169: LD_EXP 9
9173: PPUSH
9174: LD_STRING D3a-JMM-3
9176: PPUSH
9177: CALL_OW 88
// Wait ( 0 0$01 ) ;
9181: LD_INT 35
9183: PPUSH
9184: CALL_OW 67
// CenterNowOnUnits ( Frank ) ;
9188: LD_EXP 15
9192: PPUSH
9193: CALL_OW 87
// Say ( Frank , D3a-Frank-4 ) ;
9197: LD_EXP 15
9201: PPUSH
9202: LD_STRING D3a-Frank-4
9204: PPUSH
9205: CALL_OW 88
// if Lisa then
9209: LD_EXP 14
9213: IFFALSE 9227
// Say ( Lisa , D3a-Lisa-4 ) ;
9215: LD_EXP 14
9219: PPUSH
9220: LD_STRING D3a-Lisa-4
9222: PPUSH
9223: CALL_OW 88
// Say ( JMM , D3a-JMM-4 ) ;
9227: LD_EXP 9
9231: PPUSH
9232: LD_STRING D3a-JMM-4
9234: PPUSH
9235: CALL_OW 88
// Say ( Frank , D3a-Frank-5 ) ;
9239: LD_EXP 15
9243: PPUSH
9244: LD_STRING D3a-Frank-5
9246: PPUSH
9247: CALL_OW 88
// Say ( JMM , D3a-JMM-5 ) ;
9251: LD_EXP 9
9255: PPUSH
9256: LD_STRING D3a-JMM-5
9258: PPUSH
9259: CALL_OW 88
// Say ( Frank , D3a-Frank-6 ) ;
9263: LD_EXP 15
9267: PPUSH
9268: LD_STRING D3a-Frank-6
9270: PPUSH
9271: CALL_OW 88
// Say ( JMM , D3a-JMM-6 ) ;
9275: LD_EXP 9
9279: PPUSH
9280: LD_STRING D3a-JMM-6
9282: PPUSH
9283: CALL_OW 88
// Say ( Frank , D3a-Frank-7 ) ;
9287: LD_EXP 15
9291: PPUSH
9292: LD_STRING D3a-Frank-7
9294: PPUSH
9295: CALL_OW 88
// InGameOff ;
9299: CALL_OW 9
// end ;
9303: PPOPN 2
9305: END
// every 0 0$1 trigger Kikuchi and not Frank and FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , GetX ( Kikuchi ) , GetY ( Kikuchi ) , 7 ] ] ) and not InBattle ( 1 ) and not InBattle ( 4 ) do
9306: LD_EXP 18
9310: PUSH
9311: LD_EXP 15
9315: NOT
9316: AND
9317: PUSH
9318: LD_INT 22
9320: PUSH
9321: LD_INT 1
9323: PUSH
9324: EMPTY
9325: LIST
9326: LIST
9327: PUSH
9328: LD_INT 92
9330: PUSH
9331: LD_EXP 18
9335: PPUSH
9336: CALL_OW 250
9340: PUSH
9341: LD_EXP 18
9345: PPUSH
9346: CALL_OW 251
9350: PUSH
9351: LD_INT 7
9353: PUSH
9354: EMPTY
9355: LIST
9356: LIST
9357: LIST
9358: LIST
9359: PUSH
9360: EMPTY
9361: LIST
9362: LIST
9363: PPUSH
9364: CALL_OW 69
9368: AND
9369: PUSH
9370: LD_INT 1
9372: PPUSH
9373: CALL_OW 463
9377: NOT
9378: AND
9379: PUSH
9380: LD_INT 4
9382: PPUSH
9383: CALL_OW 463
9387: NOT
9388: AND
9389: IFFALSE 9569
9391: GO 9393
9393: DISABLE
// begin InGameOn ;
9394: CALL_OW 8
// ComTurnUnit ( JMM , Kikuchi ) ;
9398: LD_EXP 9
9402: PPUSH
9403: LD_EXP 18
9407: PPUSH
9408: CALL_OW 119
// ComTurnUnit ( Kikuchi , JMM ) ;
9412: LD_EXP 18
9416: PPUSH
9417: LD_EXP 9
9421: PPUSH
9422: CALL_OW 119
// CenterOnUnits ( Kikuchi ) ;
9426: LD_EXP 18
9430: PPUSH
9431: CALL_OW 85
// Say ( Kikuchi , D3b-Yam-1 ) ;
9435: LD_EXP 18
9439: PPUSH
9440: LD_STRING D3b-Yam-1
9442: PPUSH
9443: CALL_OW 88
// Say ( JMM , D3b-JMM-1 ) ;
9447: LD_EXP 9
9451: PPUSH
9452: LD_STRING D3b-JMM-1
9454: PPUSH
9455: CALL_OW 88
// RevealFogArea ( 1 , spotArea ) ;
9459: LD_INT 1
9461: PPUSH
9462: LD_INT 4
9464: PPUSH
9465: CALL_OW 332
// CenterOnXY ( 85 , 134 ) ;
9469: LD_INT 85
9471: PPUSH
9472: LD_INT 134
9474: PPUSH
9475: CALL_OW 84
// Say ( Kikuchi , D3b-Yam-2 ) ;
9479: LD_EXP 18
9483: PPUSH
9484: LD_STRING D3b-Yam-2
9486: PPUSH
9487: CALL_OW 88
// Wait ( 0 0$01 ) ;
9491: LD_INT 35
9493: PPUSH
9494: CALL_OW 67
// Say ( JMM , D3b-JMM-2 ) ;
9498: LD_EXP 9
9502: PPUSH
9503: LD_STRING D3b-JMM-2
9505: PPUSH
9506: CALL_OW 88
// CenterOnXY ( 166 , 136 ) ;
9510: LD_INT 166
9512: PPUSH
9513: LD_INT 136
9515: PPUSH
9516: CALL_OW 84
// Say ( Kikuchi , D3b-Yam-3 ) ;
9520: LD_EXP 18
9524: PPUSH
9525: LD_STRING D3b-Yam-3
9527: PPUSH
9528: CALL_OW 88
// CenterNowOnUnits ( JMM ) ;
9532: LD_EXP 9
9536: PPUSH
9537: CALL_OW 87
// Say ( JMM , D3b-JMM-3a ) ;
9541: LD_EXP 9
9545: PPUSH
9546: LD_STRING D3b-JMM-3a
9548: PPUSH
9549: CALL_OW 88
// SetSide ( Kikuchi , 1 ) ;
9553: LD_EXP 18
9557: PPUSH
9558: LD_INT 1
9560: PPUSH
9561: CALL_OW 235
// InGameOff ;
9565: CALL_OW 9
// end ;
9569: END
// every 0 0$1 trigger FilterUnitsInArea ( massDamageArea , [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] ] ) do var un , x , tw , i ;
9570: LD_INT 7
9572: PPUSH
9573: LD_INT 22
9575: PUSH
9576: LD_INT 1
9578: PUSH
9579: EMPTY
9580: LIST
9581: LIST
9582: PUSH
9583: LD_INT 3
9585: PUSH
9586: LD_INT 24
9588: PUSH
9589: LD_INT 1000
9591: PUSH
9592: EMPTY
9593: LIST
9594: LIST
9595: PUSH
9596: EMPTY
9597: LIST
9598: LIST
9599: PUSH
9600: EMPTY
9601: LIST
9602: LIST
9603: PPUSH
9604: CALL_OW 70
9608: IFFALSE 10064
9610: GO 9612
9612: DISABLE
9613: LD_INT 0
9615: PPUSH
9616: PPUSH
9617: PPUSH
9618: PPUSH
// begin repeat wait ( 0 0$1 ) ;
9619: LD_INT 35
9621: PPUSH
9622: CALL_OW 67
// un := FilterUnitsInArea ( massDamageArea , [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
9626: LD_ADDR_VAR 0 1
9630: PUSH
9631: LD_INT 7
9633: PPUSH
9634: LD_INT 22
9636: PUSH
9637: LD_INT 1
9639: PUSH
9640: EMPTY
9641: LIST
9642: LIST
9643: PUSH
9644: LD_INT 3
9646: PUSH
9647: LD_INT 24
9649: PUSH
9650: LD_INT 1000
9652: PUSH
9653: EMPTY
9654: LIST
9655: LIST
9656: PUSH
9657: EMPTY
9658: LIST
9659: LIST
9660: PUSH
9661: EMPTY
9662: LIST
9663: LIST
9664: PPUSH
9665: CALL_OW 70
9669: ST_TO_ADDR
// if not un then
9670: LD_VAR 0 1
9674: NOT
9675: IFFALSE 9679
// continue ;
9677: GO 9619
// tw := NearbyTowerHasEnergy ( un [ 1 ] ) ;
9679: LD_ADDR_VAR 0 3
9683: PUSH
9684: LD_VAR 0 1
9688: PUSH
9689: LD_INT 1
9691: ARRAY
9692: PPUSH
9693: CALL 2028 0 1
9697: ST_TO_ADDR
// until tw ;
9698: LD_VAR 0 3
9702: IFFALSE 9619
// DialogueOn ;
9704: CALL_OW 6
// CenterNowOnUnits ( tw ) ;
9708: LD_VAR 0 3
9712: PPUSH
9713: CALL_OW 87
// if Lisa then
9717: LD_EXP 14
9721: IFFALSE 9749
// begin Say ( Lisa , D5-Lisa-1 ) ;
9723: LD_EXP 14
9727: PPUSH
9728: LD_STRING D5-Lisa-1
9730: PPUSH
9731: CALL_OW 88
// Say ( JMM , D5-JMM-1a ) ;
9735: LD_EXP 9
9739: PPUSH
9740: LD_STRING D5-JMM-1a
9742: PPUSH
9743: CALL_OW 88
// end else
9747: GO 9761
// Say ( JMM , D5-JMM-1 ) ;
9749: LD_EXP 9
9753: PPUSH
9754: LD_STRING D5-JMM-1
9756: PPUSH
9757: CALL_OW 88
// DialogueOff ;
9761: CALL_OW 7
// while ( true ) do
9765: LD_INT 1
9767: IFFALSE 9823
// begin wait ( 0 0$01 ) ;
9769: LD_INT 35
9771: PPUSH
9772: CALL_OW 67
// x := FilterUnitsExceptArea ( northElectro , [ [ f_btype , b_oil_power ] , [ f_see , 1 ] ] ) ;
9776: LD_ADDR_VAR 0 2
9780: PUSH
9781: LD_INT 8
9783: PPUSH
9784: LD_INT 30
9786: PUSH
9787: LD_INT 26
9789: PUSH
9790: EMPTY
9791: LIST
9792: LIST
9793: PUSH
9794: LD_INT 101
9796: PUSH
9797: LD_INT 1
9799: PUSH
9800: EMPTY
9801: LIST
9802: LIST
9803: PUSH
9804: EMPTY
9805: LIST
9806: LIST
9807: PPUSH
9808: CALL_OW 71
9812: ST_TO_ADDR
// if x then
9813: LD_VAR 0 2
9817: IFFALSE 9821
// break ;
9819: GO 9823
// end ;
9821: GO 9765
// CenterOnUnits ( x [ 1 ] ) ;
9823: LD_VAR 0 2
9827: PUSH
9828: LD_INT 1
9830: ARRAY
9831: PPUSH
9832: CALL_OW 85
// if Frank and GetSide ( Frank ) = 1 then
9836: LD_EXP 15
9840: PUSH
9841: LD_EXP 15
9845: PPUSH
9846: CALL_OW 255
9850: PUSH
9851: LD_INT 1
9853: EQUAL
9854: AND
9855: IFFALSE 9871
// Say ( Frank , D5a-Frank-1 ) else
9857: LD_EXP 15
9861: PPUSH
9862: LD_STRING D5a-Frank-1
9864: PPUSH
9865: CALL_OW 88
9869: GO 9925
// if Kikuchi and GetSide ( Kikuchi ) = 1 then
9871: LD_EXP 18
9875: PUSH
9876: LD_EXP 18
9880: PPUSH
9881: CALL_OW 255
9885: PUSH
9886: LD_INT 1
9888: EQUAL
9889: AND
9890: IFFALSE 9906
// Say ( Kikuchi , D5a-Yam-1 ) else
9892: LD_EXP 18
9896: PPUSH
9897: LD_STRING D5a-Yam-1
9899: PPUSH
9900: CALL_OW 88
9904: GO 9925
// Say ( GetRandom ( sex_male ) [ 1 ] , D5a-Sol1-1 ) ;
9906: LD_INT 1
9908: PPUSH
9909: CALL 600 0 1
9913: PUSH
9914: LD_INT 1
9916: ARRAY
9917: PPUSH
9918: LD_STRING D5a-Sol1-1
9920: PPUSH
9921: CALL_OW 88
// Say ( JMM , D5a-JMM-1 ) ;
9925: LD_EXP 9
9929: PPUSH
9930: LD_STRING D5a-JMM-1
9932: PPUSH
9933: CALL_OW 88
// if Cyrus then
9937: LD_EXP 13
9941: IFFALSE 9955
// Say ( Cyrus , D5a-Cyrus-1 ) ;
9943: LD_EXP 13
9947: PPUSH
9948: LD_STRING D5a-Cyrus-1
9950: PPUSH
9951: CALL_OW 88
// x := false ;
9955: LD_ADDR_VAR 0 2
9959: PUSH
9960: LD_INT 0
9962: ST_TO_ADDR
// while ( true ) do
9963: LD_INT 1
9965: IFFALSE 10052
// begin wait ( 0 0$01 ) ;
9967: LD_INT 35
9969: PPUSH
9970: CALL_OW 67
// for i in FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) diff ru_dep_west do
9974: LD_ADDR_VAR 0 4
9978: PUSH
9979: LD_INT 2
9981: PUSH
9982: LD_INT 30
9984: PUSH
9985: LD_INT 0
9987: PUSH
9988: EMPTY
9989: LIST
9990: LIST
9991: PUSH
9992: LD_INT 30
9994: PUSH
9995: LD_INT 1
9997: PUSH
9998: EMPTY
9999: LIST
10000: LIST
10001: PUSH
10002: EMPTY
10003: LIST
10004: LIST
10005: LIST
10006: PPUSH
10007: CALL_OW 69
10011: PUSH
10012: LD_INT 1
10014: DIFF
10015: PUSH
10016: FOR_IN
10017: IFFALSE 10040
// if BaseNeedEnergy ( i ) then
10019: LD_VAR 0 4
10023: PPUSH
10024: CALL 1153 0 1
10028: IFFALSE 10038
// x := true ;
10030: LD_ADDR_VAR 0 2
10034: PUSH
10035: LD_INT 1
10037: ST_TO_ADDR
10038: GO 10016
10040: POP
10041: POP
// if x then
10042: LD_VAR 0 2
10046: IFFALSE 10050
// break ;
10048: GO 10052
// end ;
10050: GO 9963
// Say ( JMM , D5b-JMM-1 ) ;
10052: LD_EXP 9
10056: PPUSH
10057: LD_STRING D5b-JMM-1
10059: PPUSH
10060: CALL_OW 88
// end ;
10064: PPOPN 4
10066: END
// every 0 0$1 trigger time_to_end [ 1 ] < tick do
10067: LD_EXP 5
10071: PUSH
10072: LD_INT 1
10074: ARRAY
10075: PUSH
10076: LD_OWVAR 1
10080: LESS
10081: IFFALSE 10281
10083: GO 10085
10085: DISABLE
// begin if not IsDead ( ru_dep_main ) then
10086: LD_INT 16
10088: PPUSH
10089: CALL_OW 301
10093: NOT
10094: IFFALSE 10117
// begin SayRadio ( Harisson , D3b-Har-3 ) ;
10096: LD_EXP 19
10100: PPUSH
10101: LD_STRING D3b-Har-3
10103: PPUSH
10104: CALL_OW 94
// ChangeMissionObjectives ( M2a ) ;
10108: LD_STRING M2a
10110: PPUSH
10111: CALL_OW 337
// end else
10115: GO 10136
// begin SayRadio ( Harisson , D3b-Har-3a ) ;
10117: LD_EXP 19
10121: PPUSH
10122: LD_STRING D3b-Har-3a
10124: PPUSH
10125: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
10129: LD_STRING M2
10131: PPUSH
10132: CALL_OW 337
// end ; can_end := true ;
10136: LD_ADDR_EXP 6
10140: PUSH
10141: LD_INT 1
10143: ST_TO_ADDR
// SetAreaMapShow ( endArea , 1 ) ;
10144: LD_INT 9
10146: PPUSH
10147: LD_INT 1
10149: PPUSH
10150: CALL_OW 424
// Wait ( 0 0$02 ) ;
10154: LD_INT 70
10156: PPUSH
10157: CALL_OW 67
// if Lisa then
10161: LD_EXP 14
10165: IFFALSE 10179
// Say ( Lisa , D3b-Lisa ) ;
10167: LD_EXP 14
10171: PPUSH
10172: LD_STRING D3b-Lisa
10174: PPUSH
10175: CALL_OW 88
// if Bobby then
10179: LD_EXP 12
10183: IFFALSE 10197
// Say ( Bobby , D3b-Bobby-3 ) ;
10185: LD_EXP 12
10189: PPUSH
10190: LD_STRING D3b-Bobby-3
10192: PPUSH
10193: CALL_OW 88
// if Cyrus then
10197: LD_EXP 13
10201: IFFALSE 10215
// Say ( Cyrus , D3b-Cyrus-3 ) ;
10203: LD_EXP 13
10207: PPUSH
10208: LD_STRING D3b-Cyrus-3
10210: PPUSH
10211: CALL_OW 88
// if Frank and GetSide ( Frank ) = 1 then
10215: LD_EXP 15
10219: PUSH
10220: LD_EXP 15
10224: PPUSH
10225: CALL_OW 255
10229: PUSH
10230: LD_INT 1
10232: EQUAL
10233: AND
10234: IFFALSE 10248
// Say ( Frank , D3b-Frank-3 ) ;
10236: LD_EXP 15
10240: PPUSH
10241: LD_STRING D3b-Frank-3
10243: PPUSH
10244: CALL_OW 88
// if Kikuchi and GetSide ( Kikuchi ) = 1 then
10248: LD_EXP 18
10252: PUSH
10253: LD_EXP 18
10257: PPUSH
10258: CALL_OW 255
10262: PUSH
10263: LD_INT 1
10265: EQUAL
10266: AND
10267: IFFALSE 10281
// Say ( Kikuchi , D3b-Yam-4 ) ;
10269: LD_EXP 18
10273: PPUSH
10274: LD_STRING D3b-Yam-4
10276: PPUSH
10277: CALL_OW 88
// end ;
10281: END
// every 0 0$1 trigger time_to_end [ 2 ] < tick do
10282: LD_EXP 5
10286: PUSH
10287: LD_INT 2
10289: ARRAY
10290: PUSH
10291: LD_OWVAR 1
10295: LESS
10296: IFFALSE 10328
10298: GO 10300
10300: DISABLE
// begin SayRadio ( Harisson , D4-Har-1 ) ;
10301: LD_EXP 19
10305: PPUSH
10306: LD_STRING D4-Har-1
10308: PPUSH
10309: CALL_OW 94
// ChangeMissionObjectives ( M3 ) ;
10313: LD_STRING M3
10315: PPUSH
10316: CALL_OW 337
// must_end := true ;
10320: LD_ADDR_EXP 7
10324: PUSH
10325: LD_INT 1
10327: ST_TO_ADDR
// end ;
10328: END
// every 0 0$01 trigger time_to_end [ 3 ] < tick do
10329: LD_EXP 5
10333: PUSH
10334: LD_INT 3
10336: ARRAY
10337: PUSH
10338: LD_OWVAR 1
10342: LESS
10343: IFFALSE 10374
10345: GO 10347
10347: DISABLE
// begin if not IsDead ( ru_dep_main ) then
10348: LD_INT 16
10350: PPUSH
10351: CALL_OW 301
10355: NOT
10356: IFFALSE 10367
// YouLost ( TimeOut1 ) else
10358: LD_STRING TimeOut1
10360: PPUSH
10361: CALL_OW 104
10365: GO 10374
// YouLost ( TimeOut2 ) ;
10367: LD_STRING TimeOut2
10369: PPUSH
10370: CALL_OW 104
// end ;
10374: END
// every 0 0$1 trigger IsInArea ( JMM , endArea ) and can_end do var wait_on , i , tmp , m1 , m2 , m3 ;
10375: LD_EXP 9
10379: PPUSH
10380: LD_INT 9
10382: PPUSH
10383: CALL_OW 308
10387: PUSH
10388: LD_EXP 6
10392: AND
10393: IFFALSE 11493
10395: GO 10397
10397: DISABLE
10398: LD_INT 0
10400: PPUSH
10401: PPUSH
10402: PPUSH
10403: PPUSH
10404: PPUSH
10405: PPUSH
// begin wait_on := false ;
10406: LD_ADDR_VAR 0 1
10410: PUSH
10411: LD_INT 0
10413: ST_TO_ADDR
// if FilterPeople ( 1 ) + 0 > ( FilterPeopleArea ( 1 , endArea ) ^ FilterDriversArea ( 1 , endArea ) ) + 0 then
10414: LD_INT 1
10416: PPUSH
10417: CALL 1230 0 1
10421: PUSH
10422: LD_INT 0
10424: PLUS
10425: PUSH
10426: LD_INT 1
10428: PPUSH
10429: LD_INT 9
10431: PPUSH
10432: CALL 1321 0 2
10436: PUSH
10437: LD_INT 1
10439: PPUSH
10440: LD_INT 9
10442: PPUSH
10443: CALL 1368 0 2
10447: ADD
10448: PUSH
10449: LD_INT 0
10451: PLUS
10452: GREATER
10453: IFFALSE 10502
// case Query ( Q1 ) of 1 :
10455: LD_STRING Q1
10457: PPUSH
10458: CALL_OW 97
10462: PUSH
10463: LD_INT 1
10465: DOUBLE
10466: EQUAL
10467: IFTRUE 10471
10469: GO 10482
10471: POP
// wait_on := true ; 2 :
10472: LD_ADDR_VAR 0 1
10476: PUSH
10477: LD_INT 1
10479: ST_TO_ADDR
10480: GO 10502
10482: LD_INT 2
10484: DOUBLE
10485: EQUAL
10486: IFTRUE 10490
10488: GO 10501
10490: POP
// wait_on := false ; end ;
10491: LD_ADDR_VAR 0 1
10495: PUSH
10496: LD_INT 0
10498: ST_TO_ADDR
10499: GO 10502
10501: POP
// repeat wait ( 0 0$01 ) ;
10502: LD_INT 35
10504: PPUSH
10505: CALL_OW 67
// until ( not wait_on ) or ( FilterPeople ( 1 ) + 0 ) = ( FilterPeopleArea ( 1 , endArea ) ^ FilterDriversArea ( 1 , endArea ) ) + 0 ;
10509: LD_VAR 0 1
10513: NOT
10514: PUSH
10515: LD_INT 1
10517: PPUSH
10518: CALL 1230 0 1
10522: PUSH
10523: LD_INT 0
10525: PLUS
10526: PUSH
10527: LD_INT 1
10529: PPUSH
10530: LD_INT 9
10532: PPUSH
10533: CALL 1321 0 2
10537: PUSH
10538: LD_INT 1
10540: PPUSH
10541: LD_INT 9
10543: PPUSH
10544: CALL 1368 0 2
10548: ADD
10549: PUSH
10550: LD_INT 0
10552: PLUS
10553: EQUAL
10554: OR
10555: IFFALSE 10502
// DialogueOn ;
10557: CALL_OW 6
// CenterNowOnUnits ( JMM ) ;
10561: LD_EXP 9
10565: PPUSH
10566: CALL_OW 87
// Say ( JMM , D6-JMM-1 ) ;
10570: LD_EXP 9
10574: PPUSH
10575: LD_STRING D6-JMM-1
10577: PPUSH
10578: CALL_OW 88
// SayRadio ( Harisson , D6-Har-1 ) ;
10582: LD_EXP 19
10586: PPUSH
10587: LD_STRING D6-Har-1
10589: PPUSH
10590: CALL_OW 94
// Say ( JMM , D6-JMM-2 ) ;
10594: LD_EXP 9
10598: PPUSH
10599: LD_STRING D6-JMM-2
10601: PPUSH
10602: CALL_OW 88
// SayRadio ( Harisson , D6-Har-2 ) ;
10606: LD_EXP 19
10610: PPUSH
10611: LD_STRING D6-Har-2
10613: PPUSH
10614: CALL_OW 94
// Say ( JMM , D6-JMM-3 ) ;
10618: LD_EXP 9
10622: PPUSH
10623: LD_STRING D6-JMM-3
10625: PPUSH
10626: CALL_OW 88
// SayRadio ( Harisson , D6-Har-3 ) ;
10630: LD_EXP 19
10634: PPUSH
10635: LD_STRING D6-Har-3
10637: PPUSH
10638: CALL_OW 94
// Say ( JMM , D6-JMM-4 ) ;
10642: LD_EXP 9
10646: PPUSH
10647: LD_STRING D6-JMM-4
10649: PPUSH
10650: CALL_OW 88
// SayRadio ( Harisson , D6-Har-4 ) ;
10654: LD_EXP 19
10658: PPUSH
10659: LD_STRING D6-Har-4
10661: PPUSH
10662: CALL_OW 94
// Say ( JMM , D6-JMM-5 ) ;
10666: LD_EXP 9
10670: PPUSH
10671: LD_STRING D6-JMM-5
10673: PPUSH
10674: CALL_OW 88
// DialogueOff ;
10678: CALL_OW 7
// m1 := false ;
10682: LD_ADDR_VAR 0 4
10686: PUSH
10687: LD_INT 0
10689: ST_TO_ADDR
// m2 := false ;
10690: LD_ADDR_VAR 0 5
10694: PUSH
10695: LD_INT 0
10697: ST_TO_ADDR
// m3 := false ;
10698: LD_ADDR_VAR 0 6
10702: PUSH
10703: LD_INT 0
10705: ST_TO_ADDR
// tmp := FilterBuildings ( 3 ) ;
10706: LD_ADDR_VAR 0 3
10710: PUSH
10711: LD_INT 3
10713: PPUSH
10714: CALL 1499 0 1
10718: ST_TO_ADDR
// if tmp >= 35 then
10719: LD_VAR 0 3
10723: PUSH
10724: LD_INT 35
10726: GREATEREQUAL
10727: IFFALSE 10764
// begin AddMedal ( Destroy1 , - 1 ) ;
10729: LD_STRING Destroy1
10731: PPUSH
10732: LD_INT 1
10734: NEG
10735: PPUSH
10736: CALL_OW 101
// AddMedal ( Destroy2 , - 1 ) ;
10740: LD_STRING Destroy2
10742: PPUSH
10743: LD_INT 1
10745: NEG
10746: PPUSH
10747: CALL_OW 101
// AddMedal ( Destroy3 , - 1 ) ;
10751: LD_STRING Destroy3
10753: PPUSH
10754: LD_INT 1
10756: NEG
10757: PPUSH
10758: CALL_OW 101
// end else
10762: GO 10875
// begin AddMedal ( Destroy1 , 1 ) ;
10764: LD_STRING Destroy1
10766: PPUSH
10767: LD_INT 1
10769: PPUSH
10770: CALL_OW 101
// m1 := true ;
10774: LD_ADDR_VAR 0 4
10778: PUSH
10779: LD_INT 1
10781: ST_TO_ADDR
// if tmp >= 25 then
10782: LD_VAR 0 3
10786: PUSH
10787: LD_INT 25
10789: GREATEREQUAL
10790: IFFALSE 10816
// begin AddMedal ( Destroy2 , - 1 ) ;
10792: LD_STRING Destroy2
10794: PPUSH
10795: LD_INT 1
10797: NEG
10798: PPUSH
10799: CALL_OW 101
// AddMedal ( Destroy3 , - 1 ) ;
10803: LD_STRING Destroy3
10805: PPUSH
10806: LD_INT 1
10808: NEG
10809: PPUSH
10810: CALL_OW 101
// end else
10814: GO 10875
// begin AddMedal ( Destroy2 , 1 ) ;
10816: LD_STRING Destroy2
10818: PPUSH
10819: LD_INT 1
10821: PPUSH
10822: CALL_OW 101
// m2 := true ;
10826: LD_ADDR_VAR 0 5
10830: PUSH
10831: LD_INT 1
10833: ST_TO_ADDR
// if tmp >= 15 then
10834: LD_VAR 0 3
10838: PUSH
10839: LD_INT 15
10841: GREATEREQUAL
10842: IFFALSE 10857
// AddMedal ( Destroy3 , - 1 ) else
10844: LD_STRING Destroy3
10846: PPUSH
10847: LD_INT 1
10849: NEG
10850: PPUSH
10851: CALL_OW 101
10855: GO 10875
// begin AddMedal ( Destroy3 , 1 ) ;
10857: LD_STRING Destroy3
10859: PPUSH
10860: LD_INT 1
10862: PPUSH
10863: CALL_OW 101
// m3 := true ;
10867: LD_ADDR_VAR 0 6
10871: PUSH
10872: LD_INT 1
10874: ST_TO_ADDR
// end ; end ; end ; if tick <= 32 32$00 then
10875: LD_OWVAR 1
10879: PUSH
10880: LD_INT 67200
10882: LESSEQUAL
10883: IFFALSE 10892
// SetAchievement ( ACH_ASPEED_7 ) ;
10885: LD_STRING ACH_ASPEED_7
10887: PPUSH
10888: CALL_OW 543
// if m1 and m2 and m3 and Difficulty >= 3 then
10892: LD_VAR 0 4
10896: PUSH
10897: LD_VAR 0 5
10901: AND
10902: PUSH
10903: LD_VAR 0 6
10907: AND
10908: PUSH
10909: LD_OWVAR 67
10913: PUSH
10914: LD_INT 3
10916: GREATEREQUAL
10917: AND
10918: IFFALSE 10930
// SetAchievementEX ( ACH_AMER , 7 ) ;
10920: LD_STRING ACH_AMER
10922: PPUSH
10923: LD_INT 7
10925: PPUSH
10926: CALL_OW 564
// GiveMedals ( MAIN ) ;
10930: LD_STRING MAIN
10932: PPUSH
10933: CALL_OW 102
// tmp := FilterPeopleArea ( 1 , endArea ) union FilterDriversArea ( 1 , endArea ) ;
10937: LD_ADDR_VAR 0 3
10941: PUSH
10942: LD_INT 1
10944: PPUSH
10945: LD_INT 9
10947: PPUSH
10948: CALL 1321 0 2
10952: PUSH
10953: LD_INT 1
10955: PPUSH
10956: LD_INT 9
10958: PPUSH
10959: CALL 1368 0 2
10963: UNION
10964: ST_TO_ADDR
// RewardPeople ( tmp ) ;
10965: LD_VAR 0 3
10969: PPUSH
10970: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
10974: LD_EXP 9
10978: PPUSH
10979: LD_EXP 3
10983: PUSH
10984: LD_STRING JMM
10986: STR
10987: PPUSH
10988: CALL_OW 38
// if Brown in tmp then
10992: LD_EXP 10
10996: PUSH
10997: LD_VAR 0 3
11001: IN
11002: IFFALSE 11022
// SaveCharacters ( Brown , mission_prefix & Brown ) ;
11004: LD_EXP 10
11008: PPUSH
11009: LD_EXP 3
11013: PUSH
11014: LD_STRING Brown
11016: STR
11017: PPUSH
11018: CALL_OW 38
// if Donaldson in tmp then
11022: LD_EXP 11
11026: PUSH
11027: LD_VAR 0 3
11031: IN
11032: IFFALSE 11052
// SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
11034: LD_EXP 11
11038: PPUSH
11039: LD_EXP 3
11043: PUSH
11044: LD_STRING Donaldson
11046: STR
11047: PPUSH
11048: CALL_OW 38
// if Bobby in tmp then
11052: LD_EXP 12
11056: PUSH
11057: LD_VAR 0 3
11061: IN
11062: IFFALSE 11082
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
11064: LD_EXP 12
11068: PPUSH
11069: LD_EXP 3
11073: PUSH
11074: LD_STRING Bobby
11076: STR
11077: PPUSH
11078: CALL_OW 38
// if Cyrus in tmp then
11082: LD_EXP 13
11086: PUSH
11087: LD_VAR 0 3
11091: IN
11092: IFFALSE 11112
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
11094: LD_EXP 13
11098: PPUSH
11099: LD_EXP 3
11103: PUSH
11104: LD_STRING Cyrus
11106: STR
11107: PPUSH
11108: CALL_OW 38
// if Lisa in tmp then
11112: LD_EXP 14
11116: PUSH
11117: LD_VAR 0 3
11121: IN
11122: IFFALSE 11142
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
11124: LD_EXP 14
11128: PPUSH
11129: LD_EXP 3
11133: PUSH
11134: LD_STRING Lisa
11136: STR
11137: PPUSH
11138: CALL_OW 38
// if Frank in tmp then
11142: LD_EXP 15
11146: PUSH
11147: LD_VAR 0 3
11151: IN
11152: IFFALSE 11172
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
11154: LD_EXP 15
11158: PPUSH
11159: LD_EXP 3
11163: PUSH
11164: LD_STRING Frank
11166: STR
11167: PPUSH
11168: CALL_OW 38
// if Gladstone in tmp then
11172: LD_EXP 16
11176: PUSH
11177: LD_VAR 0 3
11181: IN
11182: IFFALSE 11202
// SaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
11184: LD_EXP 16
11188: PPUSH
11189: LD_EXP 3
11193: PUSH
11194: LD_STRING Gladstone
11196: STR
11197: PPUSH
11198: CALL_OW 38
// if Khatam in tmp then
11202: LD_EXP 17
11206: PUSH
11207: LD_VAR 0 3
11211: IN
11212: IFFALSE 11232
// SaveCharacters ( Khatam , mission_prefix & Khatam ) ;
11214: LD_EXP 17
11218: PPUSH
11219: LD_EXP 3
11223: PUSH
11224: LD_STRING Khatam
11226: STR
11227: PPUSH
11228: CALL_OW 38
// if Kikuchi in tmp then
11232: LD_EXP 18
11236: PUSH
11237: LD_VAR 0 3
11241: IN
11242: IFFALSE 11262
// SaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
11244: LD_EXP 18
11248: PPUSH
11249: LD_EXP 3
11253: PUSH
11254: LD_STRING Kikuchi
11256: STR
11257: PPUSH
11258: CALL_OW 38
// SaveCharacters ( tmp diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam ] , mission_prefix & others ) ;
11262: LD_VAR 0 3
11266: PUSH
11267: LD_EXP 9
11271: PUSH
11272: LD_EXP 10
11276: PUSH
11277: LD_EXP 11
11281: PUSH
11282: LD_EXP 12
11286: PUSH
11287: LD_EXP 13
11291: PUSH
11292: LD_EXP 14
11296: PUSH
11297: LD_EXP 15
11301: PUSH
11302: LD_EXP 16
11306: PUSH
11307: LD_EXP 18
11311: PUSH
11312: LD_EXP 17
11316: PUSH
11317: EMPTY
11318: LIST
11319: LIST
11320: LIST
11321: LIST
11322: LIST
11323: LIST
11324: LIST
11325: LIST
11326: LIST
11327: LIST
11328: DIFF
11329: PPUSH
11330: LD_EXP 3
11334: PUSH
11335: LD_STRING others
11337: STR
11338: PPUSH
11339: CALL_OW 38
// SaveVariable ( tick , 07_time ) ;
11343: LD_OWVAR 1
11347: PPUSH
11348: LD_STRING 07_time
11350: PPUSH
11351: CALL_OW 39
// tmp := [ ] ;
11355: LD_ADDR_VAR 0 3
11359: PUSH
11360: EMPTY
11361: ST_TO_ADDR
// for i in FilterUnitsInArea ( endArea , [ [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_vehicle ] ] ] ) do
11362: LD_ADDR_VAR 0 2
11366: PUSH
11367: LD_INT 9
11369: PPUSH
11370: LD_INT 22
11372: PUSH
11373: LD_INT 1
11375: PUSH
11376: EMPTY
11377: LIST
11378: LIST
11379: PUSH
11380: LD_INT 23
11382: PUSH
11383: LD_INT 1
11385: PUSH
11386: EMPTY
11387: LIST
11388: LIST
11389: PUSH
11390: LD_INT 21
11392: PUSH
11393: LD_INT 2
11395: PUSH
11396: EMPTY
11397: LIST
11398: LIST
11399: PUSH
11400: EMPTY
11401: LIST
11402: LIST
11403: LIST
11404: PUSH
11405: EMPTY
11406: LIST
11407: PPUSH
11408: CALL_OW 70
11412: PUSH
11413: FOR_IN
11414: IFFALSE 11475
// tmp := tmp ^ [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ;
11416: LD_ADDR_VAR 0 3
11420: PUSH
11421: LD_VAR 0 3
11425: PUSH
11426: LD_VAR 0 2
11430: PPUSH
11431: CALL_OW 265
11435: PUSH
11436: LD_VAR 0 2
11440: PPUSH
11441: CALL_OW 262
11445: PUSH
11446: LD_VAR 0 2
11450: PPUSH
11451: CALL_OW 263
11455: PUSH
11456: LD_VAR 0 2
11460: PPUSH
11461: CALL_OW 264
11465: PUSH
11466: EMPTY
11467: LIST
11468: LIST
11469: LIST
11470: LIST
11471: ADD
11472: ST_TO_ADDR
11473: GO 11413
11475: POP
11476: POP
// SaveVariable ( tmp , 07_vehicles ) ;
11477: LD_VAR 0 3
11481: PPUSH
11482: LD_STRING 07_vehicles
11484: PPUSH
11485: CALL_OW 39
// YouWin ;
11489: CALL_OW 103
// end ; end_of_file
11493: PPOPN 6
11495: END
// on UnitDestroyed ( un ) do begin if un = JMM then
11496: LD_VAR 0 1
11500: PUSH
11501: LD_EXP 9
11505: EQUAL
11506: IFFALSE 11515
// YouLost ( JMM ) ;
11508: LD_STRING JMM
11510: PPUSH
11511: CALL_OW 104
// if GetType ( un ) = unit_building then
11515: LD_VAR 0 1
11519: PPUSH
11520: CALL_OW 247
11524: PUSH
11525: LD_INT 3
11527: EQUAL
11528: IFFALSE 11544
// buildings_counter := buildings_counter + 1 ;
11530: LD_ADDR_EXP 4
11534: PUSH
11535: LD_EXP 4
11539: PUSH
11540: LD_INT 1
11542: PLUS
11543: ST_TO_ADDR
// if un in FilterUnitsInArea ( baseArea , [ f_or , [ f_btype , b_turret ] , [ f_btype , b_bunker ] ] ) then
11544: LD_VAR 0 1
11548: PUSH
11549: LD_INT 6
11551: PPUSH
11552: LD_INT 2
11554: PUSH
11555: LD_INT 30
11557: PUSH
11558: LD_INT 33
11560: PUSH
11561: EMPTY
11562: LIST
11563: LIST
11564: PUSH
11565: LD_INT 30
11567: PUSH
11568: LD_INT 32
11570: PUSH
11571: EMPTY
11572: LIST
11573: LIST
11574: PUSH
11575: EMPTY
11576: LIST
11577: LIST
11578: LIST
11579: PPUSH
11580: CALL_OW 70
11584: IN
11585: IFFALSE 11644
// ru_rebuild_list := ru_rebuild_list ^ [ GetBType ( un ) , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ;
11587: LD_ADDR_EXP 20
11591: PUSH
11592: LD_EXP 20
11596: PUSH
11597: LD_VAR 0 1
11601: PPUSH
11602: CALL_OW 266
11606: PUSH
11607: LD_VAR 0 1
11611: PPUSH
11612: CALL_OW 250
11616: PUSH
11617: LD_VAR 0 1
11621: PPUSH
11622: CALL_OW 251
11626: PUSH
11627: LD_VAR 0 1
11631: PPUSH
11632: CALL_OW 254
11636: PUSH
11637: EMPTY
11638: LIST
11639: LIST
11640: LIST
11641: LIST
11642: ADD
11643: ST_TO_ADDR
// if un = ru_dep_main then
11644: LD_VAR 0 1
11648: PUSH
11649: LD_INT 16
11651: EQUAL
11652: IFFALSE 11661
// ChangeMissionObjectives ( M1a ) ;
11654: LD_STRING M1a
11656: PPUSH
11657: CALL_OW 337
// if GetType ( un ) = unit_human and GetSide ( un ) = 3 then
11661: LD_VAR 0 1
11665: PPUSH
11666: CALL_OW 247
11670: PUSH
11671: LD_INT 1
11673: EQUAL
11674: PUSH
11675: LD_VAR 0 1
11679: PPUSH
11680: CALL_OW 255
11684: PUSH
11685: LD_INT 3
11687: EQUAL
11688: AND
11689: IFFALSE 11705
// kill_counter := kill_counter + 1 ;
11691: LD_ADDR_EXP 8
11695: PUSH
11696: LD_EXP 8
11700: PUSH
11701: LD_INT 1
11703: PLUS
11704: ST_TO_ADDR
// end ;
11705: PPOPN 1
11707: END
// on UnitGoesToRed ( un ) do begin if GetBType ( un ) = b_bunker and GetTag ( un ) = 7 then
11708: LD_VAR 0 1
11712: PPUSH
11713: CALL_OW 266
11717: PUSH
11718: LD_INT 32
11720: EQUAL
11721: PUSH
11722: LD_VAR 0 1
11726: PPUSH
11727: CALL_OW 110
11731: PUSH
11732: LD_INT 7
11734: EQUAL
11735: AND
11736: IFFALSE 11750
// SetTag ( un , 0 ) ;
11738: LD_VAR 0 1
11742: PPUSH
11743: LD_INT 0
11745: PPUSH
11746: CALL_OW 109
// end ;
11750: PPOPN 1
11752: END
// on BuildingStarted ( b , builder ) do var i ;
11753: LD_INT 0
11755: PPUSH
// begin if GetSide ( b ) = 3 then
11756: LD_VAR 0 1
11760: PPUSH
11761: CALL_OW 255
11765: PUSH
11766: LD_INT 3
11768: EQUAL
11769: IFFALSE 11809
// for i = 1 to 4 do
11771: LD_ADDR_VAR 0 3
11775: PUSH
11776: DOUBLE
11777: LD_INT 1
11779: DEC
11780: ST_TO_ADDR
11781: LD_INT 4
11783: PUSH
11784: FOR_TO
11785: IFFALSE 11807
// ru_rebuild_list := Delete ( ru_rebuild_list , 1 ) ;
11787: LD_ADDR_EXP 20
11791: PUSH
11792: LD_EXP 20
11796: PPUSH
11797: LD_INT 1
11799: PPUSH
11800: CALL_OW 3
11804: ST_TO_ADDR
11805: GO 11784
11807: POP
11808: POP
// end ;
11809: PPOPN 3
11811: END
// on BuildingComplete ( b ) do if GetBType ( b ) in [ b_bunker , b_turret ] then
11812: LD_VAR 0 1
11816: PPUSH
11817: CALL_OW 266
11821: PUSH
11822: LD_INT 32
11824: PUSH
11825: LD_INT 33
11827: PUSH
11828: EMPTY
11829: LIST
11830: LIST
11831: IN
11832: IFFALSE 11846
// ComPlaceWeapon ( b , ru_gatling_gun ) ;
11834: LD_VAR 0 1
11838: PPUSH
11839: LD_INT 43
11841: PPUSH
11842: CALL_OW 148
11846: PPOPN 1
11848: END
// on LeaveBuilding ( b , un ) do begin if b in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) then
11849: LD_VAR 0 1
11853: PUSH
11854: LD_INT 22
11856: PUSH
11857: LD_INT 3
11859: PUSH
11860: EMPTY
11861: LIST
11862: LIST
11863: PUSH
11864: LD_INT 2
11866: PUSH
11867: LD_INT 30
11869: PUSH
11870: LD_INT 31
11872: PUSH
11873: EMPTY
11874: LIST
11875: LIST
11876: PUSH
11877: LD_INT 30
11879: PUSH
11880: LD_INT 32
11882: PUSH
11883: EMPTY
11884: LIST
11885: LIST
11886: PUSH
11887: EMPTY
11888: LIST
11889: LIST
11890: LIST
11891: PUSH
11892: EMPTY
11893: LIST
11894: LIST
11895: PPUSH
11896: CALL_OW 69
11900: IN
11901: IFFALSE 11923
// GoToAnotherTower ( un , b , 143 , 143 ) ;
11903: LD_VAR 0 2
11907: PPUSH
11908: LD_VAR 0 1
11912: PPUSH
11913: LD_INT 143
11915: PPUSH
11916: LD_INT 143
11918: PPUSH
11919: CALL 830 0 4
// end ;
11923: PPOPN 2
11925: END
// on EnterBuilding ( b , un ) do begin if b in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) then
11926: LD_VAR 0 1
11930: PUSH
11931: LD_INT 22
11933: PUSH
11934: LD_INT 3
11936: PUSH
11937: EMPTY
11938: LIST
11939: LIST
11940: PUSH
11941: LD_INT 30
11943: PUSH
11944: LD_INT 32
11946: PUSH
11947: EMPTY
11948: LIST
11949: LIST
11950: PUSH
11951: EMPTY
11952: LIST
11953: LIST
11954: PPUSH
11955: CALL_OW 69
11959: IN
11960: IFFALSE 11974
// SetTag ( b , 0 ) ;
11962: LD_VAR 0 1
11966: PPUSH
11967: LD_INT 0
11969: PPUSH
11970: CALL_OW 109
// end ; end_of_file
11974: PPOPN 2
11976: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
11977: LD_INT 0
11979: PPUSH
// ar_miner := 81 ;
11980: LD_ADDR_EXP 28
11984: PUSH
11985: LD_INT 81
11987: ST_TO_ADDR
// ar_crane := 88 ;
11988: LD_ADDR_EXP 27
11992: PUSH
11993: LD_INT 88
11995: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
11996: LD_ADDR_EXP 22
12000: PUSH
12001: LD_INT 89
12003: ST_TO_ADDR
// us_hack := 99 ;
12004: LD_ADDR_EXP 23
12008: PUSH
12009: LD_INT 99
12011: ST_TO_ADDR
// us_artillery := 97 ;
12012: LD_ADDR_EXP 24
12016: PUSH
12017: LD_INT 97
12019: ST_TO_ADDR
// ar_bio_bomb := 91 ;
12020: LD_ADDR_EXP 25
12024: PUSH
12025: LD_INT 91
12027: ST_TO_ADDR
// ar_mortar := 92 ;
12028: LD_ADDR_EXP 26
12032: PUSH
12033: LD_INT 92
12035: ST_TO_ADDR
// ru_radar := 98 ;
12036: LD_ADDR_EXP 21
12040: PUSH
12041: LD_INT 98
12043: ST_TO_ADDR
// tech_Artillery := 80 ;
12044: LD_ADDR_EXP 29
12048: PUSH
12049: LD_INT 80
12051: ST_TO_ADDR
// tech_RadMat := 81 ;
12052: LD_ADDR_EXP 30
12056: PUSH
12057: LD_INT 81
12059: ST_TO_ADDR
// tech_BasicTools := 82 ;
12060: LD_ADDR_EXP 31
12064: PUSH
12065: LD_INT 82
12067: ST_TO_ADDR
// tech_Cargo := 83 ;
12068: LD_ADDR_EXP 32
12072: PUSH
12073: LD_INT 83
12075: ST_TO_ADDR
// tech_Track := 84 ;
12076: LD_ADDR_EXP 33
12080: PUSH
12081: LD_INT 84
12083: ST_TO_ADDR
// tech_Crane := 85 ;
12084: LD_ADDR_EXP 34
12088: PUSH
12089: LD_INT 85
12091: ST_TO_ADDR
// tech_Bulldozer := 86 ;
12092: LD_ADDR_EXP 35
12096: PUSH
12097: LD_INT 86
12099: ST_TO_ADDR
// tech_Hovercraft := 87 ;
12100: LD_ADDR_EXP 36
12104: PUSH
12105: LD_INT 87
12107: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
12108: LD_ADDR_EXP 37
12112: PUSH
12113: LD_INT 88
12115: ST_TO_ADDR
// class_mastodont := 31 ;
12116: LD_ADDR_EXP 38
12120: PUSH
12121: LD_INT 31
12123: ST_TO_ADDR
// class_horse := 21 ;
12124: LD_ADDR_EXP 39
12128: PUSH
12129: LD_INT 21
12131: ST_TO_ADDR
// end ;
12132: LD_VAR 0 1
12136: RET
// every 1 do
12137: GO 12139
12139: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
12140: CALL 11977 0 0
12144: END
// every 0 0$1 do
12145: GO 12147
12147: DISABLE
// begin enable ;
12148: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
12149: LD_STRING updateTimer(
12151: PUSH
12152: LD_OWVAR 1
12156: STR
12157: PUSH
12158: LD_STRING );
12160: STR
12161: PPUSH
12162: CALL_OW 559
// end ;
12166: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
12167: LD_INT 0
12169: PPUSH
// if p2 = 100 then
12170: LD_VAR 0 2
12174: PUSH
12175: LD_INT 100
12177: EQUAL
12178: IFFALSE 13181
// begin if not StreamModeActive then
12180: LD_EXP 40
12184: NOT
12185: IFFALSE 12195
// StreamModeActive := true ;
12187: LD_ADDR_EXP 40
12191: PUSH
12192: LD_INT 1
12194: ST_TO_ADDR
// if p3 = 0 then
12195: LD_VAR 0 3
12199: PUSH
12200: LD_INT 0
12202: EQUAL
12203: IFFALSE 12209
// InitStreamMode ;
12205: CALL 13341 0 0
// if p3 = 1 then
12209: LD_VAR 0 3
12213: PUSH
12214: LD_INT 1
12216: EQUAL
12217: IFFALSE 12227
// sRocket := true ;
12219: LD_ADDR_EXP 45
12223: PUSH
12224: LD_INT 1
12226: ST_TO_ADDR
// if p3 = 2 then
12227: LD_VAR 0 3
12231: PUSH
12232: LD_INT 2
12234: EQUAL
12235: IFFALSE 12245
// sSpeed := true ;
12237: LD_ADDR_EXP 44
12241: PUSH
12242: LD_INT 1
12244: ST_TO_ADDR
// if p3 = 3 then
12245: LD_VAR 0 3
12249: PUSH
12250: LD_INT 3
12252: EQUAL
12253: IFFALSE 12263
// sEngine := true ;
12255: LD_ADDR_EXP 46
12259: PUSH
12260: LD_INT 1
12262: ST_TO_ADDR
// if p3 = 4 then
12263: LD_VAR 0 3
12267: PUSH
12268: LD_INT 4
12270: EQUAL
12271: IFFALSE 12281
// sSpec := true ;
12273: LD_ADDR_EXP 43
12277: PUSH
12278: LD_INT 1
12280: ST_TO_ADDR
// if p3 = 5 then
12281: LD_VAR 0 3
12285: PUSH
12286: LD_INT 5
12288: EQUAL
12289: IFFALSE 12299
// sLevel := true ;
12291: LD_ADDR_EXP 47
12295: PUSH
12296: LD_INT 1
12298: ST_TO_ADDR
// if p3 = 6 then
12299: LD_VAR 0 3
12303: PUSH
12304: LD_INT 6
12306: EQUAL
12307: IFFALSE 12317
// sArmoury := true ;
12309: LD_ADDR_EXP 48
12313: PUSH
12314: LD_INT 1
12316: ST_TO_ADDR
// if p3 = 7 then
12317: LD_VAR 0 3
12321: PUSH
12322: LD_INT 7
12324: EQUAL
12325: IFFALSE 12335
// sRadar := true ;
12327: LD_ADDR_EXP 49
12331: PUSH
12332: LD_INT 1
12334: ST_TO_ADDR
// if p3 = 8 then
12335: LD_VAR 0 3
12339: PUSH
12340: LD_INT 8
12342: EQUAL
12343: IFFALSE 12353
// sBunker := true ;
12345: LD_ADDR_EXP 50
12349: PUSH
12350: LD_INT 1
12352: ST_TO_ADDR
// if p3 = 9 then
12353: LD_VAR 0 3
12357: PUSH
12358: LD_INT 9
12360: EQUAL
12361: IFFALSE 12371
// sHack := true ;
12363: LD_ADDR_EXP 51
12367: PUSH
12368: LD_INT 1
12370: ST_TO_ADDR
// if p3 = 10 then
12371: LD_VAR 0 3
12375: PUSH
12376: LD_INT 10
12378: EQUAL
12379: IFFALSE 12389
// sFire := true ;
12381: LD_ADDR_EXP 52
12385: PUSH
12386: LD_INT 1
12388: ST_TO_ADDR
// if p3 = 11 then
12389: LD_VAR 0 3
12393: PUSH
12394: LD_INT 11
12396: EQUAL
12397: IFFALSE 12407
// sRefresh := true ;
12399: LD_ADDR_EXP 53
12403: PUSH
12404: LD_INT 1
12406: ST_TO_ADDR
// if p3 = 12 then
12407: LD_VAR 0 3
12411: PUSH
12412: LD_INT 12
12414: EQUAL
12415: IFFALSE 12425
// sExp := true ;
12417: LD_ADDR_EXP 54
12421: PUSH
12422: LD_INT 1
12424: ST_TO_ADDR
// if p3 = 13 then
12425: LD_VAR 0 3
12429: PUSH
12430: LD_INT 13
12432: EQUAL
12433: IFFALSE 12443
// sDepot := true ;
12435: LD_ADDR_EXP 55
12439: PUSH
12440: LD_INT 1
12442: ST_TO_ADDR
// if p3 = 14 then
12443: LD_VAR 0 3
12447: PUSH
12448: LD_INT 14
12450: EQUAL
12451: IFFALSE 12461
// sFlag := true ;
12453: LD_ADDR_EXP 56
12457: PUSH
12458: LD_INT 1
12460: ST_TO_ADDR
// if p3 = 15 then
12461: LD_VAR 0 3
12465: PUSH
12466: LD_INT 15
12468: EQUAL
12469: IFFALSE 12479
// sKamikadze := true ;
12471: LD_ADDR_EXP 64
12475: PUSH
12476: LD_INT 1
12478: ST_TO_ADDR
// if p3 = 16 then
12479: LD_VAR 0 3
12483: PUSH
12484: LD_INT 16
12486: EQUAL
12487: IFFALSE 12497
// sTroll := true ;
12489: LD_ADDR_EXP 65
12493: PUSH
12494: LD_INT 1
12496: ST_TO_ADDR
// if p3 = 17 then
12497: LD_VAR 0 3
12501: PUSH
12502: LD_INT 17
12504: EQUAL
12505: IFFALSE 12515
// sSlow := true ;
12507: LD_ADDR_EXP 66
12511: PUSH
12512: LD_INT 1
12514: ST_TO_ADDR
// if p3 = 18 then
12515: LD_VAR 0 3
12519: PUSH
12520: LD_INT 18
12522: EQUAL
12523: IFFALSE 12533
// sLack := true ;
12525: LD_ADDR_EXP 67
12529: PUSH
12530: LD_INT 1
12532: ST_TO_ADDR
// if p3 = 19 then
12533: LD_VAR 0 3
12537: PUSH
12538: LD_INT 19
12540: EQUAL
12541: IFFALSE 12551
// sTank := true ;
12543: LD_ADDR_EXP 69
12547: PUSH
12548: LD_INT 1
12550: ST_TO_ADDR
// if p3 = 20 then
12551: LD_VAR 0 3
12555: PUSH
12556: LD_INT 20
12558: EQUAL
12559: IFFALSE 12569
// sRemote := true ;
12561: LD_ADDR_EXP 70
12565: PUSH
12566: LD_INT 1
12568: ST_TO_ADDR
// if p3 = 21 then
12569: LD_VAR 0 3
12573: PUSH
12574: LD_INT 21
12576: EQUAL
12577: IFFALSE 12587
// sPowell := true ;
12579: LD_ADDR_EXP 71
12583: PUSH
12584: LD_INT 1
12586: ST_TO_ADDR
// if p3 = 22 then
12587: LD_VAR 0 3
12591: PUSH
12592: LD_INT 22
12594: EQUAL
12595: IFFALSE 12605
// sTeleport := true ;
12597: LD_ADDR_EXP 74
12601: PUSH
12602: LD_INT 1
12604: ST_TO_ADDR
// if p3 = 23 then
12605: LD_VAR 0 3
12609: PUSH
12610: LD_INT 23
12612: EQUAL
12613: IFFALSE 12623
// sOilTower := true ;
12615: LD_ADDR_EXP 76
12619: PUSH
12620: LD_INT 1
12622: ST_TO_ADDR
// if p3 = 24 then
12623: LD_VAR 0 3
12627: PUSH
12628: LD_INT 24
12630: EQUAL
12631: IFFALSE 12641
// sShovel := true ;
12633: LD_ADDR_EXP 77
12637: PUSH
12638: LD_INT 1
12640: ST_TO_ADDR
// if p3 = 25 then
12641: LD_VAR 0 3
12645: PUSH
12646: LD_INT 25
12648: EQUAL
12649: IFFALSE 12659
// sSheik := true ;
12651: LD_ADDR_EXP 78
12655: PUSH
12656: LD_INT 1
12658: ST_TO_ADDR
// if p3 = 26 then
12659: LD_VAR 0 3
12663: PUSH
12664: LD_INT 26
12666: EQUAL
12667: IFFALSE 12677
// sEarthquake := true ;
12669: LD_ADDR_EXP 80
12673: PUSH
12674: LD_INT 1
12676: ST_TO_ADDR
// if p3 = 27 then
12677: LD_VAR 0 3
12681: PUSH
12682: LD_INT 27
12684: EQUAL
12685: IFFALSE 12695
// sAI := true ;
12687: LD_ADDR_EXP 81
12691: PUSH
12692: LD_INT 1
12694: ST_TO_ADDR
// if p3 = 28 then
12695: LD_VAR 0 3
12699: PUSH
12700: LD_INT 28
12702: EQUAL
12703: IFFALSE 12713
// sCargo := true ;
12705: LD_ADDR_EXP 84
12709: PUSH
12710: LD_INT 1
12712: ST_TO_ADDR
// if p3 = 29 then
12713: LD_VAR 0 3
12717: PUSH
12718: LD_INT 29
12720: EQUAL
12721: IFFALSE 12731
// sDLaser := true ;
12723: LD_ADDR_EXP 85
12727: PUSH
12728: LD_INT 1
12730: ST_TO_ADDR
// if p3 = 30 then
12731: LD_VAR 0 3
12735: PUSH
12736: LD_INT 30
12738: EQUAL
12739: IFFALSE 12749
// sExchange := true ;
12741: LD_ADDR_EXP 86
12745: PUSH
12746: LD_INT 1
12748: ST_TO_ADDR
// if p3 = 31 then
12749: LD_VAR 0 3
12753: PUSH
12754: LD_INT 31
12756: EQUAL
12757: IFFALSE 12767
// sFac := true ;
12759: LD_ADDR_EXP 87
12763: PUSH
12764: LD_INT 1
12766: ST_TO_ADDR
// if p3 = 32 then
12767: LD_VAR 0 3
12771: PUSH
12772: LD_INT 32
12774: EQUAL
12775: IFFALSE 12785
// sPower := true ;
12777: LD_ADDR_EXP 88
12781: PUSH
12782: LD_INT 1
12784: ST_TO_ADDR
// if p3 = 33 then
12785: LD_VAR 0 3
12789: PUSH
12790: LD_INT 33
12792: EQUAL
12793: IFFALSE 12803
// sRandom := true ;
12795: LD_ADDR_EXP 89
12799: PUSH
12800: LD_INT 1
12802: ST_TO_ADDR
// if p3 = 34 then
12803: LD_VAR 0 3
12807: PUSH
12808: LD_INT 34
12810: EQUAL
12811: IFFALSE 12821
// sShield := true ;
12813: LD_ADDR_EXP 90
12817: PUSH
12818: LD_INT 1
12820: ST_TO_ADDR
// if p3 = 35 then
12821: LD_VAR 0 3
12825: PUSH
12826: LD_INT 35
12828: EQUAL
12829: IFFALSE 12839
// sTime := true ;
12831: LD_ADDR_EXP 91
12835: PUSH
12836: LD_INT 1
12838: ST_TO_ADDR
// if p3 = 36 then
12839: LD_VAR 0 3
12843: PUSH
12844: LD_INT 36
12846: EQUAL
12847: IFFALSE 12857
// sTools := true ;
12849: LD_ADDR_EXP 92
12853: PUSH
12854: LD_INT 1
12856: ST_TO_ADDR
// if p3 = 101 then
12857: LD_VAR 0 3
12861: PUSH
12862: LD_INT 101
12864: EQUAL
12865: IFFALSE 12875
// sSold := true ;
12867: LD_ADDR_EXP 57
12871: PUSH
12872: LD_INT 1
12874: ST_TO_ADDR
// if p3 = 102 then
12875: LD_VAR 0 3
12879: PUSH
12880: LD_INT 102
12882: EQUAL
12883: IFFALSE 12893
// sDiff := true ;
12885: LD_ADDR_EXP 58
12889: PUSH
12890: LD_INT 1
12892: ST_TO_ADDR
// if p3 = 103 then
12893: LD_VAR 0 3
12897: PUSH
12898: LD_INT 103
12900: EQUAL
12901: IFFALSE 12911
// sFog := true ;
12903: LD_ADDR_EXP 61
12907: PUSH
12908: LD_INT 1
12910: ST_TO_ADDR
// if p3 = 104 then
12911: LD_VAR 0 3
12915: PUSH
12916: LD_INT 104
12918: EQUAL
12919: IFFALSE 12929
// sReset := true ;
12921: LD_ADDR_EXP 62
12925: PUSH
12926: LD_INT 1
12928: ST_TO_ADDR
// if p3 = 105 then
12929: LD_VAR 0 3
12933: PUSH
12934: LD_INT 105
12936: EQUAL
12937: IFFALSE 12947
// sSun := true ;
12939: LD_ADDR_EXP 63
12943: PUSH
12944: LD_INT 1
12946: ST_TO_ADDR
// if p3 = 106 then
12947: LD_VAR 0 3
12951: PUSH
12952: LD_INT 106
12954: EQUAL
12955: IFFALSE 12965
// sTiger := true ;
12957: LD_ADDR_EXP 59
12961: PUSH
12962: LD_INT 1
12964: ST_TO_ADDR
// if p3 = 107 then
12965: LD_VAR 0 3
12969: PUSH
12970: LD_INT 107
12972: EQUAL
12973: IFFALSE 12983
// sBomb := true ;
12975: LD_ADDR_EXP 60
12979: PUSH
12980: LD_INT 1
12982: ST_TO_ADDR
// if p3 = 108 then
12983: LD_VAR 0 3
12987: PUSH
12988: LD_INT 108
12990: EQUAL
12991: IFFALSE 13001
// sWound := true ;
12993: LD_ADDR_EXP 68
12997: PUSH
12998: LD_INT 1
13000: ST_TO_ADDR
// if p3 = 109 then
13001: LD_VAR 0 3
13005: PUSH
13006: LD_INT 109
13008: EQUAL
13009: IFFALSE 13019
// sBetray := true ;
13011: LD_ADDR_EXP 72
13015: PUSH
13016: LD_INT 1
13018: ST_TO_ADDR
// if p3 = 110 then
13019: LD_VAR 0 3
13023: PUSH
13024: LD_INT 110
13026: EQUAL
13027: IFFALSE 13037
// sContamin := true ;
13029: LD_ADDR_EXP 73
13033: PUSH
13034: LD_INT 1
13036: ST_TO_ADDR
// if p3 = 111 then
13037: LD_VAR 0 3
13041: PUSH
13042: LD_INT 111
13044: EQUAL
13045: IFFALSE 13055
// sOil := true ;
13047: LD_ADDR_EXP 75
13051: PUSH
13052: LD_INT 1
13054: ST_TO_ADDR
// if p3 = 112 then
13055: LD_VAR 0 3
13059: PUSH
13060: LD_INT 112
13062: EQUAL
13063: IFFALSE 13073
// sStu := true ;
13065: LD_ADDR_EXP 79
13069: PUSH
13070: LD_INT 1
13072: ST_TO_ADDR
// if p3 = 113 then
13073: LD_VAR 0 3
13077: PUSH
13078: LD_INT 113
13080: EQUAL
13081: IFFALSE 13091
// sBazooka := true ;
13083: LD_ADDR_EXP 82
13087: PUSH
13088: LD_INT 1
13090: ST_TO_ADDR
// if p3 = 114 then
13091: LD_VAR 0 3
13095: PUSH
13096: LD_INT 114
13098: EQUAL
13099: IFFALSE 13109
// sMortar := true ;
13101: LD_ADDR_EXP 83
13105: PUSH
13106: LD_INT 1
13108: ST_TO_ADDR
// if p3 = 115 then
13109: LD_VAR 0 3
13113: PUSH
13114: LD_INT 115
13116: EQUAL
13117: IFFALSE 13127
// sRanger := true ;
13119: LD_ADDR_EXP 93
13123: PUSH
13124: LD_INT 1
13126: ST_TO_ADDR
// if p3 = 116 then
13127: LD_VAR 0 3
13131: PUSH
13132: LD_INT 116
13134: EQUAL
13135: IFFALSE 13145
// sComputer := true ;
13137: LD_ADDR_EXP 94
13141: PUSH
13142: LD_INT 1
13144: ST_TO_ADDR
// if p3 = 117 then
13145: LD_VAR 0 3
13149: PUSH
13150: LD_INT 117
13152: EQUAL
13153: IFFALSE 13163
// s30 := true ;
13155: LD_ADDR_EXP 95
13159: PUSH
13160: LD_INT 1
13162: ST_TO_ADDR
// if p3 = 118 then
13163: LD_VAR 0 3
13167: PUSH
13168: LD_INT 118
13170: EQUAL
13171: IFFALSE 13181
// s60 := true ;
13173: LD_ADDR_EXP 96
13177: PUSH
13178: LD_INT 1
13180: ST_TO_ADDR
// end ; if p2 = 101 then
13181: LD_VAR 0 2
13185: PUSH
13186: LD_INT 101
13188: EQUAL
13189: IFFALSE 13317
// begin case p3 of 1 :
13191: LD_VAR 0 3
13195: PUSH
13196: LD_INT 1
13198: DOUBLE
13199: EQUAL
13200: IFTRUE 13204
13202: GO 13211
13204: POP
// hHackUnlimitedResources ; 2 :
13205: CALL 24913 0 0
13209: GO 13317
13211: LD_INT 2
13213: DOUBLE
13214: EQUAL
13215: IFTRUE 13219
13217: GO 13226
13219: POP
// hHackSetLevel10 ; 3 :
13220: CALL 25046 0 0
13224: GO 13317
13226: LD_INT 3
13228: DOUBLE
13229: EQUAL
13230: IFTRUE 13234
13232: GO 13241
13234: POP
// hHackSetLevel10YourUnits ; 4 :
13235: CALL 25131 0 0
13239: GO 13317
13241: LD_INT 4
13243: DOUBLE
13244: EQUAL
13245: IFTRUE 13249
13247: GO 13256
13249: POP
// hHackInvincible ; 5 :
13250: CALL 25579 0 0
13254: GO 13317
13256: LD_INT 5
13258: DOUBLE
13259: EQUAL
13260: IFTRUE 13264
13262: GO 13271
13264: POP
// hHackInvisible ; 6 :
13265: CALL 25690 0 0
13269: GO 13317
13271: LD_INT 6
13273: DOUBLE
13274: EQUAL
13275: IFTRUE 13279
13277: GO 13286
13279: POP
// hHackChangeYourSide ; 7 :
13280: CALL 25747 0 0
13284: GO 13317
13286: LD_INT 7
13288: DOUBLE
13289: EQUAL
13290: IFTRUE 13294
13292: GO 13301
13294: POP
// hHackChangeUnitSide ; 8 :
13295: CALL 25789 0 0
13299: GO 13317
13301: LD_INT 8
13303: DOUBLE
13304: EQUAL
13305: IFTRUE 13309
13307: GO 13316
13309: POP
// hHackFog ; end ;
13310: CALL 25890 0 0
13314: GO 13317
13316: POP
// end ; end ;
13317: LD_VAR 0 7
13321: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
13322: GO 13324
13324: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
13325: LD_STRING initStreamRollete();
13327: PPUSH
13328: CALL_OW 559
// InitStreamMode ;
13332: CALL 13341 0 0
// DefineStreamItems ( ) ;
13336: CALL 13805 0 0
// end ;
13340: END
// function InitStreamMode ; begin
13341: LD_INT 0
13343: PPUSH
// streamModeActive := false ;
13344: LD_ADDR_EXP 40
13348: PUSH
13349: LD_INT 0
13351: ST_TO_ADDR
// normalCounter := 36 ;
13352: LD_ADDR_EXP 41
13356: PUSH
13357: LD_INT 36
13359: ST_TO_ADDR
// hardcoreCounter := 16 ;
13360: LD_ADDR_EXP 42
13364: PUSH
13365: LD_INT 16
13367: ST_TO_ADDR
// sRocket := false ;
13368: LD_ADDR_EXP 45
13372: PUSH
13373: LD_INT 0
13375: ST_TO_ADDR
// sSpeed := false ;
13376: LD_ADDR_EXP 44
13380: PUSH
13381: LD_INT 0
13383: ST_TO_ADDR
// sEngine := false ;
13384: LD_ADDR_EXP 46
13388: PUSH
13389: LD_INT 0
13391: ST_TO_ADDR
// sSpec := false ;
13392: LD_ADDR_EXP 43
13396: PUSH
13397: LD_INT 0
13399: ST_TO_ADDR
// sLevel := false ;
13400: LD_ADDR_EXP 47
13404: PUSH
13405: LD_INT 0
13407: ST_TO_ADDR
// sArmoury := false ;
13408: LD_ADDR_EXP 48
13412: PUSH
13413: LD_INT 0
13415: ST_TO_ADDR
// sRadar := false ;
13416: LD_ADDR_EXP 49
13420: PUSH
13421: LD_INT 0
13423: ST_TO_ADDR
// sBunker := false ;
13424: LD_ADDR_EXP 50
13428: PUSH
13429: LD_INT 0
13431: ST_TO_ADDR
// sHack := false ;
13432: LD_ADDR_EXP 51
13436: PUSH
13437: LD_INT 0
13439: ST_TO_ADDR
// sFire := false ;
13440: LD_ADDR_EXP 52
13444: PUSH
13445: LD_INT 0
13447: ST_TO_ADDR
// sRefresh := false ;
13448: LD_ADDR_EXP 53
13452: PUSH
13453: LD_INT 0
13455: ST_TO_ADDR
// sExp := false ;
13456: LD_ADDR_EXP 54
13460: PUSH
13461: LD_INT 0
13463: ST_TO_ADDR
// sDepot := false ;
13464: LD_ADDR_EXP 55
13468: PUSH
13469: LD_INT 0
13471: ST_TO_ADDR
// sFlag := false ;
13472: LD_ADDR_EXP 56
13476: PUSH
13477: LD_INT 0
13479: ST_TO_ADDR
// sKamikadze := false ;
13480: LD_ADDR_EXP 64
13484: PUSH
13485: LD_INT 0
13487: ST_TO_ADDR
// sTroll := false ;
13488: LD_ADDR_EXP 65
13492: PUSH
13493: LD_INT 0
13495: ST_TO_ADDR
// sSlow := false ;
13496: LD_ADDR_EXP 66
13500: PUSH
13501: LD_INT 0
13503: ST_TO_ADDR
// sLack := false ;
13504: LD_ADDR_EXP 67
13508: PUSH
13509: LD_INT 0
13511: ST_TO_ADDR
// sTank := false ;
13512: LD_ADDR_EXP 69
13516: PUSH
13517: LD_INT 0
13519: ST_TO_ADDR
// sRemote := false ;
13520: LD_ADDR_EXP 70
13524: PUSH
13525: LD_INT 0
13527: ST_TO_ADDR
// sPowell := false ;
13528: LD_ADDR_EXP 71
13532: PUSH
13533: LD_INT 0
13535: ST_TO_ADDR
// sTeleport := false ;
13536: LD_ADDR_EXP 74
13540: PUSH
13541: LD_INT 0
13543: ST_TO_ADDR
// sOilTower := false ;
13544: LD_ADDR_EXP 76
13548: PUSH
13549: LD_INT 0
13551: ST_TO_ADDR
// sShovel := false ;
13552: LD_ADDR_EXP 77
13556: PUSH
13557: LD_INT 0
13559: ST_TO_ADDR
// sSheik := false ;
13560: LD_ADDR_EXP 78
13564: PUSH
13565: LD_INT 0
13567: ST_TO_ADDR
// sEarthquake := false ;
13568: LD_ADDR_EXP 80
13572: PUSH
13573: LD_INT 0
13575: ST_TO_ADDR
// sAI := false ;
13576: LD_ADDR_EXP 81
13580: PUSH
13581: LD_INT 0
13583: ST_TO_ADDR
// sCargo := false ;
13584: LD_ADDR_EXP 84
13588: PUSH
13589: LD_INT 0
13591: ST_TO_ADDR
// sDLaser := false ;
13592: LD_ADDR_EXP 85
13596: PUSH
13597: LD_INT 0
13599: ST_TO_ADDR
// sExchange := false ;
13600: LD_ADDR_EXP 86
13604: PUSH
13605: LD_INT 0
13607: ST_TO_ADDR
// sFac := false ;
13608: LD_ADDR_EXP 87
13612: PUSH
13613: LD_INT 0
13615: ST_TO_ADDR
// sPower := false ;
13616: LD_ADDR_EXP 88
13620: PUSH
13621: LD_INT 0
13623: ST_TO_ADDR
// sRandom := false ;
13624: LD_ADDR_EXP 89
13628: PUSH
13629: LD_INT 0
13631: ST_TO_ADDR
// sShield := false ;
13632: LD_ADDR_EXP 90
13636: PUSH
13637: LD_INT 0
13639: ST_TO_ADDR
// sTime := false ;
13640: LD_ADDR_EXP 91
13644: PUSH
13645: LD_INT 0
13647: ST_TO_ADDR
// sTools := false ;
13648: LD_ADDR_EXP 92
13652: PUSH
13653: LD_INT 0
13655: ST_TO_ADDR
// sSold := false ;
13656: LD_ADDR_EXP 57
13660: PUSH
13661: LD_INT 0
13663: ST_TO_ADDR
// sDiff := false ;
13664: LD_ADDR_EXP 58
13668: PUSH
13669: LD_INT 0
13671: ST_TO_ADDR
// sFog := false ;
13672: LD_ADDR_EXP 61
13676: PUSH
13677: LD_INT 0
13679: ST_TO_ADDR
// sReset := false ;
13680: LD_ADDR_EXP 62
13684: PUSH
13685: LD_INT 0
13687: ST_TO_ADDR
// sSun := false ;
13688: LD_ADDR_EXP 63
13692: PUSH
13693: LD_INT 0
13695: ST_TO_ADDR
// sTiger := false ;
13696: LD_ADDR_EXP 59
13700: PUSH
13701: LD_INT 0
13703: ST_TO_ADDR
// sBomb := false ;
13704: LD_ADDR_EXP 60
13708: PUSH
13709: LD_INT 0
13711: ST_TO_ADDR
// sWound := false ;
13712: LD_ADDR_EXP 68
13716: PUSH
13717: LD_INT 0
13719: ST_TO_ADDR
// sBetray := false ;
13720: LD_ADDR_EXP 72
13724: PUSH
13725: LD_INT 0
13727: ST_TO_ADDR
// sContamin := false ;
13728: LD_ADDR_EXP 73
13732: PUSH
13733: LD_INT 0
13735: ST_TO_ADDR
// sOil := false ;
13736: LD_ADDR_EXP 75
13740: PUSH
13741: LD_INT 0
13743: ST_TO_ADDR
// sStu := false ;
13744: LD_ADDR_EXP 79
13748: PUSH
13749: LD_INT 0
13751: ST_TO_ADDR
// sBazooka := false ;
13752: LD_ADDR_EXP 82
13756: PUSH
13757: LD_INT 0
13759: ST_TO_ADDR
// sMortar := false ;
13760: LD_ADDR_EXP 83
13764: PUSH
13765: LD_INT 0
13767: ST_TO_ADDR
// sRanger := false ;
13768: LD_ADDR_EXP 93
13772: PUSH
13773: LD_INT 0
13775: ST_TO_ADDR
// sComputer := false ;
13776: LD_ADDR_EXP 94
13780: PUSH
13781: LD_INT 0
13783: ST_TO_ADDR
// s30 := false ;
13784: LD_ADDR_EXP 95
13788: PUSH
13789: LD_INT 0
13791: ST_TO_ADDR
// s60 := false ;
13792: LD_ADDR_EXP 96
13796: PUSH
13797: LD_INT 0
13799: ST_TO_ADDR
// end ;
13800: LD_VAR 0 1
13804: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
13805: LD_INT 0
13807: PPUSH
13808: PPUSH
13809: PPUSH
13810: PPUSH
13811: PPUSH
// result := [ ] ;
13812: LD_ADDR_VAR 0 1
13816: PUSH
13817: EMPTY
13818: ST_TO_ADDR
// if campaign_id = 1 then
13819: LD_OWVAR 69
13823: PUSH
13824: LD_INT 1
13826: EQUAL
13827: IFFALSE 16993
// begin case mission_number of 1 :
13829: LD_OWVAR 70
13833: PUSH
13834: LD_INT 1
13836: DOUBLE
13837: EQUAL
13838: IFTRUE 13842
13840: GO 13918
13842: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
13843: LD_ADDR_VAR 0 1
13847: PUSH
13848: LD_INT 2
13850: PUSH
13851: LD_INT 4
13853: PUSH
13854: LD_INT 11
13856: PUSH
13857: LD_INT 12
13859: PUSH
13860: LD_INT 15
13862: PUSH
13863: LD_INT 16
13865: PUSH
13866: LD_INT 22
13868: PUSH
13869: LD_INT 23
13871: PUSH
13872: LD_INT 26
13874: PUSH
13875: EMPTY
13876: LIST
13877: LIST
13878: LIST
13879: LIST
13880: LIST
13881: LIST
13882: LIST
13883: LIST
13884: LIST
13885: PUSH
13886: LD_INT 101
13888: PUSH
13889: LD_INT 102
13891: PUSH
13892: LD_INT 106
13894: PUSH
13895: LD_INT 116
13897: PUSH
13898: LD_INT 117
13900: PUSH
13901: LD_INT 118
13903: PUSH
13904: EMPTY
13905: LIST
13906: LIST
13907: LIST
13908: LIST
13909: LIST
13910: LIST
13911: PUSH
13912: EMPTY
13913: LIST
13914: LIST
13915: ST_TO_ADDR
13916: GO 16991
13918: LD_INT 2
13920: DOUBLE
13921: EQUAL
13922: IFTRUE 13926
13924: GO 14010
13926: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
13927: LD_ADDR_VAR 0 1
13931: PUSH
13932: LD_INT 2
13934: PUSH
13935: LD_INT 4
13937: PUSH
13938: LD_INT 11
13940: PUSH
13941: LD_INT 12
13943: PUSH
13944: LD_INT 15
13946: PUSH
13947: LD_INT 16
13949: PUSH
13950: LD_INT 22
13952: PUSH
13953: LD_INT 23
13955: PUSH
13956: LD_INT 26
13958: PUSH
13959: EMPTY
13960: LIST
13961: LIST
13962: LIST
13963: LIST
13964: LIST
13965: LIST
13966: LIST
13967: LIST
13968: LIST
13969: PUSH
13970: LD_INT 101
13972: PUSH
13973: LD_INT 102
13975: PUSH
13976: LD_INT 105
13978: PUSH
13979: LD_INT 106
13981: PUSH
13982: LD_INT 108
13984: PUSH
13985: LD_INT 116
13987: PUSH
13988: LD_INT 117
13990: PUSH
13991: LD_INT 118
13993: PUSH
13994: EMPTY
13995: LIST
13996: LIST
13997: LIST
13998: LIST
13999: LIST
14000: LIST
14001: LIST
14002: LIST
14003: PUSH
14004: EMPTY
14005: LIST
14006: LIST
14007: ST_TO_ADDR
14008: GO 16991
14010: LD_INT 3
14012: DOUBLE
14013: EQUAL
14014: IFTRUE 14018
14016: GO 14106
14018: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
14019: LD_ADDR_VAR 0 1
14023: PUSH
14024: LD_INT 2
14026: PUSH
14027: LD_INT 4
14029: PUSH
14030: LD_INT 5
14032: PUSH
14033: LD_INT 11
14035: PUSH
14036: LD_INT 12
14038: PUSH
14039: LD_INT 15
14041: PUSH
14042: LD_INT 16
14044: PUSH
14045: LD_INT 22
14047: PUSH
14048: LD_INT 26
14050: PUSH
14051: LD_INT 36
14053: PUSH
14054: EMPTY
14055: LIST
14056: LIST
14057: LIST
14058: LIST
14059: LIST
14060: LIST
14061: LIST
14062: LIST
14063: LIST
14064: LIST
14065: PUSH
14066: LD_INT 101
14068: PUSH
14069: LD_INT 102
14071: PUSH
14072: LD_INT 105
14074: PUSH
14075: LD_INT 106
14077: PUSH
14078: LD_INT 108
14080: PUSH
14081: LD_INT 116
14083: PUSH
14084: LD_INT 117
14086: PUSH
14087: LD_INT 118
14089: PUSH
14090: EMPTY
14091: LIST
14092: LIST
14093: LIST
14094: LIST
14095: LIST
14096: LIST
14097: LIST
14098: LIST
14099: PUSH
14100: EMPTY
14101: LIST
14102: LIST
14103: ST_TO_ADDR
14104: GO 16991
14106: LD_INT 4
14108: DOUBLE
14109: EQUAL
14110: IFTRUE 14114
14112: GO 14210
14114: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
14115: LD_ADDR_VAR 0 1
14119: PUSH
14120: LD_INT 2
14122: PUSH
14123: LD_INT 4
14125: PUSH
14126: LD_INT 5
14128: PUSH
14129: LD_INT 8
14131: PUSH
14132: LD_INT 11
14134: PUSH
14135: LD_INT 12
14137: PUSH
14138: LD_INT 15
14140: PUSH
14141: LD_INT 16
14143: PUSH
14144: LD_INT 22
14146: PUSH
14147: LD_INT 23
14149: PUSH
14150: LD_INT 26
14152: PUSH
14153: LD_INT 36
14155: PUSH
14156: EMPTY
14157: LIST
14158: LIST
14159: LIST
14160: LIST
14161: LIST
14162: LIST
14163: LIST
14164: LIST
14165: LIST
14166: LIST
14167: LIST
14168: LIST
14169: PUSH
14170: LD_INT 101
14172: PUSH
14173: LD_INT 102
14175: PUSH
14176: LD_INT 105
14178: PUSH
14179: LD_INT 106
14181: PUSH
14182: LD_INT 108
14184: PUSH
14185: LD_INT 116
14187: PUSH
14188: LD_INT 117
14190: PUSH
14191: LD_INT 118
14193: PUSH
14194: EMPTY
14195: LIST
14196: LIST
14197: LIST
14198: LIST
14199: LIST
14200: LIST
14201: LIST
14202: LIST
14203: PUSH
14204: EMPTY
14205: LIST
14206: LIST
14207: ST_TO_ADDR
14208: GO 16991
14210: LD_INT 5
14212: DOUBLE
14213: EQUAL
14214: IFTRUE 14218
14216: GO 14330
14218: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
14219: LD_ADDR_VAR 0 1
14223: PUSH
14224: LD_INT 2
14226: PUSH
14227: LD_INT 4
14229: PUSH
14230: LD_INT 5
14232: PUSH
14233: LD_INT 6
14235: PUSH
14236: LD_INT 8
14238: PUSH
14239: LD_INT 11
14241: PUSH
14242: LD_INT 12
14244: PUSH
14245: LD_INT 15
14247: PUSH
14248: LD_INT 16
14250: PUSH
14251: LD_INT 22
14253: PUSH
14254: LD_INT 23
14256: PUSH
14257: LD_INT 25
14259: PUSH
14260: LD_INT 26
14262: PUSH
14263: LD_INT 36
14265: PUSH
14266: EMPTY
14267: LIST
14268: LIST
14269: LIST
14270: LIST
14271: LIST
14272: LIST
14273: LIST
14274: LIST
14275: LIST
14276: LIST
14277: LIST
14278: LIST
14279: LIST
14280: LIST
14281: PUSH
14282: LD_INT 101
14284: PUSH
14285: LD_INT 102
14287: PUSH
14288: LD_INT 105
14290: PUSH
14291: LD_INT 106
14293: PUSH
14294: LD_INT 108
14296: PUSH
14297: LD_INT 109
14299: PUSH
14300: LD_INT 112
14302: PUSH
14303: LD_INT 116
14305: PUSH
14306: LD_INT 117
14308: PUSH
14309: LD_INT 118
14311: PUSH
14312: EMPTY
14313: LIST
14314: LIST
14315: LIST
14316: LIST
14317: LIST
14318: LIST
14319: LIST
14320: LIST
14321: LIST
14322: LIST
14323: PUSH
14324: EMPTY
14325: LIST
14326: LIST
14327: ST_TO_ADDR
14328: GO 16991
14330: LD_INT 6
14332: DOUBLE
14333: EQUAL
14334: IFTRUE 14338
14336: GO 14470
14338: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
14339: LD_ADDR_VAR 0 1
14343: PUSH
14344: LD_INT 2
14346: PUSH
14347: LD_INT 4
14349: PUSH
14350: LD_INT 5
14352: PUSH
14353: LD_INT 6
14355: PUSH
14356: LD_INT 8
14358: PUSH
14359: LD_INT 11
14361: PUSH
14362: LD_INT 12
14364: PUSH
14365: LD_INT 15
14367: PUSH
14368: LD_INT 16
14370: PUSH
14371: LD_INT 20
14373: PUSH
14374: LD_INT 21
14376: PUSH
14377: LD_INT 22
14379: PUSH
14380: LD_INT 23
14382: PUSH
14383: LD_INT 25
14385: PUSH
14386: LD_INT 26
14388: PUSH
14389: LD_INT 30
14391: PUSH
14392: LD_INT 31
14394: PUSH
14395: LD_INT 32
14397: PUSH
14398: LD_INT 36
14400: PUSH
14401: EMPTY
14402: LIST
14403: LIST
14404: LIST
14405: LIST
14406: LIST
14407: LIST
14408: LIST
14409: LIST
14410: LIST
14411: LIST
14412: LIST
14413: LIST
14414: LIST
14415: LIST
14416: LIST
14417: LIST
14418: LIST
14419: LIST
14420: LIST
14421: PUSH
14422: LD_INT 101
14424: PUSH
14425: LD_INT 102
14427: PUSH
14428: LD_INT 105
14430: PUSH
14431: LD_INT 106
14433: PUSH
14434: LD_INT 108
14436: PUSH
14437: LD_INT 109
14439: PUSH
14440: LD_INT 112
14442: PUSH
14443: LD_INT 116
14445: PUSH
14446: LD_INT 117
14448: PUSH
14449: LD_INT 118
14451: PUSH
14452: EMPTY
14453: LIST
14454: LIST
14455: LIST
14456: LIST
14457: LIST
14458: LIST
14459: LIST
14460: LIST
14461: LIST
14462: LIST
14463: PUSH
14464: EMPTY
14465: LIST
14466: LIST
14467: ST_TO_ADDR
14468: GO 16991
14470: LD_INT 7
14472: DOUBLE
14473: EQUAL
14474: IFTRUE 14478
14476: GO 14590
14478: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
14479: LD_ADDR_VAR 0 1
14483: PUSH
14484: LD_INT 2
14486: PUSH
14487: LD_INT 4
14489: PUSH
14490: LD_INT 5
14492: PUSH
14493: LD_INT 7
14495: PUSH
14496: LD_INT 11
14498: PUSH
14499: LD_INT 12
14501: PUSH
14502: LD_INT 15
14504: PUSH
14505: LD_INT 16
14507: PUSH
14508: LD_INT 20
14510: PUSH
14511: LD_INT 21
14513: PUSH
14514: LD_INT 22
14516: PUSH
14517: LD_INT 23
14519: PUSH
14520: LD_INT 25
14522: PUSH
14523: LD_INT 26
14525: PUSH
14526: EMPTY
14527: LIST
14528: LIST
14529: LIST
14530: LIST
14531: LIST
14532: LIST
14533: LIST
14534: LIST
14535: LIST
14536: LIST
14537: LIST
14538: LIST
14539: LIST
14540: LIST
14541: PUSH
14542: LD_INT 101
14544: PUSH
14545: LD_INT 102
14547: PUSH
14548: LD_INT 103
14550: PUSH
14551: LD_INT 105
14553: PUSH
14554: LD_INT 106
14556: PUSH
14557: LD_INT 108
14559: PUSH
14560: LD_INT 112
14562: PUSH
14563: LD_INT 116
14565: PUSH
14566: LD_INT 117
14568: PUSH
14569: LD_INT 118
14571: PUSH
14572: EMPTY
14573: LIST
14574: LIST
14575: LIST
14576: LIST
14577: LIST
14578: LIST
14579: LIST
14580: LIST
14581: LIST
14582: LIST
14583: PUSH
14584: EMPTY
14585: LIST
14586: LIST
14587: ST_TO_ADDR
14588: GO 16991
14590: LD_INT 8
14592: DOUBLE
14593: EQUAL
14594: IFTRUE 14598
14596: GO 14738
14598: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
14599: LD_ADDR_VAR 0 1
14603: PUSH
14604: LD_INT 2
14606: PUSH
14607: LD_INT 4
14609: PUSH
14610: LD_INT 5
14612: PUSH
14613: LD_INT 6
14615: PUSH
14616: LD_INT 7
14618: PUSH
14619: LD_INT 8
14621: PUSH
14622: LD_INT 11
14624: PUSH
14625: LD_INT 12
14627: PUSH
14628: LD_INT 15
14630: PUSH
14631: LD_INT 16
14633: PUSH
14634: LD_INT 20
14636: PUSH
14637: LD_INT 21
14639: PUSH
14640: LD_INT 22
14642: PUSH
14643: LD_INT 23
14645: PUSH
14646: LD_INT 25
14648: PUSH
14649: LD_INT 26
14651: PUSH
14652: LD_INT 30
14654: PUSH
14655: LD_INT 31
14657: PUSH
14658: LD_INT 32
14660: PUSH
14661: LD_INT 36
14663: PUSH
14664: EMPTY
14665: LIST
14666: LIST
14667: LIST
14668: LIST
14669: LIST
14670: LIST
14671: LIST
14672: LIST
14673: LIST
14674: LIST
14675: LIST
14676: LIST
14677: LIST
14678: LIST
14679: LIST
14680: LIST
14681: LIST
14682: LIST
14683: LIST
14684: LIST
14685: PUSH
14686: LD_INT 101
14688: PUSH
14689: LD_INT 102
14691: PUSH
14692: LD_INT 103
14694: PUSH
14695: LD_INT 105
14697: PUSH
14698: LD_INT 106
14700: PUSH
14701: LD_INT 108
14703: PUSH
14704: LD_INT 109
14706: PUSH
14707: LD_INT 112
14709: PUSH
14710: LD_INT 116
14712: PUSH
14713: LD_INT 117
14715: PUSH
14716: LD_INT 118
14718: PUSH
14719: EMPTY
14720: LIST
14721: LIST
14722: LIST
14723: LIST
14724: LIST
14725: LIST
14726: LIST
14727: LIST
14728: LIST
14729: LIST
14730: LIST
14731: PUSH
14732: EMPTY
14733: LIST
14734: LIST
14735: ST_TO_ADDR
14736: GO 16991
14738: LD_INT 9
14740: DOUBLE
14741: EQUAL
14742: IFTRUE 14746
14744: GO 14894
14746: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
14747: LD_ADDR_VAR 0 1
14751: PUSH
14752: LD_INT 2
14754: PUSH
14755: LD_INT 4
14757: PUSH
14758: LD_INT 5
14760: PUSH
14761: LD_INT 6
14763: PUSH
14764: LD_INT 7
14766: PUSH
14767: LD_INT 8
14769: PUSH
14770: LD_INT 11
14772: PUSH
14773: LD_INT 12
14775: PUSH
14776: LD_INT 15
14778: PUSH
14779: LD_INT 16
14781: PUSH
14782: LD_INT 20
14784: PUSH
14785: LD_INT 21
14787: PUSH
14788: LD_INT 22
14790: PUSH
14791: LD_INT 23
14793: PUSH
14794: LD_INT 25
14796: PUSH
14797: LD_INT 26
14799: PUSH
14800: LD_INT 28
14802: PUSH
14803: LD_INT 30
14805: PUSH
14806: LD_INT 31
14808: PUSH
14809: LD_INT 32
14811: PUSH
14812: LD_INT 36
14814: PUSH
14815: EMPTY
14816: LIST
14817: LIST
14818: LIST
14819: LIST
14820: LIST
14821: LIST
14822: LIST
14823: LIST
14824: LIST
14825: LIST
14826: LIST
14827: LIST
14828: LIST
14829: LIST
14830: LIST
14831: LIST
14832: LIST
14833: LIST
14834: LIST
14835: LIST
14836: LIST
14837: PUSH
14838: LD_INT 101
14840: PUSH
14841: LD_INT 102
14843: PUSH
14844: LD_INT 103
14846: PUSH
14847: LD_INT 105
14849: PUSH
14850: LD_INT 106
14852: PUSH
14853: LD_INT 108
14855: PUSH
14856: LD_INT 109
14858: PUSH
14859: LD_INT 112
14861: PUSH
14862: LD_INT 114
14864: PUSH
14865: LD_INT 116
14867: PUSH
14868: LD_INT 117
14870: PUSH
14871: LD_INT 118
14873: PUSH
14874: EMPTY
14875: LIST
14876: LIST
14877: LIST
14878: LIST
14879: LIST
14880: LIST
14881: LIST
14882: LIST
14883: LIST
14884: LIST
14885: LIST
14886: LIST
14887: PUSH
14888: EMPTY
14889: LIST
14890: LIST
14891: ST_TO_ADDR
14892: GO 16991
14894: LD_INT 10
14896: DOUBLE
14897: EQUAL
14898: IFTRUE 14902
14900: GO 15098
14902: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
14903: LD_ADDR_VAR 0 1
14907: PUSH
14908: LD_INT 2
14910: PUSH
14911: LD_INT 4
14913: PUSH
14914: LD_INT 5
14916: PUSH
14917: LD_INT 6
14919: PUSH
14920: LD_INT 7
14922: PUSH
14923: LD_INT 8
14925: PUSH
14926: LD_INT 9
14928: PUSH
14929: LD_INT 10
14931: PUSH
14932: LD_INT 11
14934: PUSH
14935: LD_INT 12
14937: PUSH
14938: LD_INT 13
14940: PUSH
14941: LD_INT 14
14943: PUSH
14944: LD_INT 15
14946: PUSH
14947: LD_INT 16
14949: PUSH
14950: LD_INT 17
14952: PUSH
14953: LD_INT 18
14955: PUSH
14956: LD_INT 19
14958: PUSH
14959: LD_INT 20
14961: PUSH
14962: LD_INT 21
14964: PUSH
14965: LD_INT 22
14967: PUSH
14968: LD_INT 23
14970: PUSH
14971: LD_INT 24
14973: PUSH
14974: LD_INT 25
14976: PUSH
14977: LD_INT 26
14979: PUSH
14980: LD_INT 28
14982: PUSH
14983: LD_INT 30
14985: PUSH
14986: LD_INT 31
14988: PUSH
14989: LD_INT 32
14991: PUSH
14992: LD_INT 36
14994: PUSH
14995: EMPTY
14996: LIST
14997: LIST
14998: LIST
14999: LIST
15000: LIST
15001: LIST
15002: LIST
15003: LIST
15004: LIST
15005: LIST
15006: LIST
15007: LIST
15008: LIST
15009: LIST
15010: LIST
15011: LIST
15012: LIST
15013: LIST
15014: LIST
15015: LIST
15016: LIST
15017: LIST
15018: LIST
15019: LIST
15020: LIST
15021: LIST
15022: LIST
15023: LIST
15024: LIST
15025: PUSH
15026: LD_INT 101
15028: PUSH
15029: LD_INT 102
15031: PUSH
15032: LD_INT 103
15034: PUSH
15035: LD_INT 104
15037: PUSH
15038: LD_INT 105
15040: PUSH
15041: LD_INT 106
15043: PUSH
15044: LD_INT 107
15046: PUSH
15047: LD_INT 108
15049: PUSH
15050: LD_INT 109
15052: PUSH
15053: LD_INT 110
15055: PUSH
15056: LD_INT 111
15058: PUSH
15059: LD_INT 112
15061: PUSH
15062: LD_INT 114
15064: PUSH
15065: LD_INT 116
15067: PUSH
15068: LD_INT 117
15070: PUSH
15071: LD_INT 118
15073: PUSH
15074: EMPTY
15075: LIST
15076: LIST
15077: LIST
15078: LIST
15079: LIST
15080: LIST
15081: LIST
15082: LIST
15083: LIST
15084: LIST
15085: LIST
15086: LIST
15087: LIST
15088: LIST
15089: LIST
15090: LIST
15091: PUSH
15092: EMPTY
15093: LIST
15094: LIST
15095: ST_TO_ADDR
15096: GO 16991
15098: LD_INT 11
15100: DOUBLE
15101: EQUAL
15102: IFTRUE 15106
15104: GO 15310
15106: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
15107: LD_ADDR_VAR 0 1
15111: PUSH
15112: LD_INT 2
15114: PUSH
15115: LD_INT 3
15117: PUSH
15118: LD_INT 4
15120: PUSH
15121: LD_INT 5
15123: PUSH
15124: LD_INT 6
15126: PUSH
15127: LD_INT 7
15129: PUSH
15130: LD_INT 8
15132: PUSH
15133: LD_INT 9
15135: PUSH
15136: LD_INT 10
15138: PUSH
15139: LD_INT 11
15141: PUSH
15142: LD_INT 12
15144: PUSH
15145: LD_INT 13
15147: PUSH
15148: LD_INT 14
15150: PUSH
15151: LD_INT 15
15153: PUSH
15154: LD_INT 16
15156: PUSH
15157: LD_INT 17
15159: PUSH
15160: LD_INT 18
15162: PUSH
15163: LD_INT 19
15165: PUSH
15166: LD_INT 20
15168: PUSH
15169: LD_INT 21
15171: PUSH
15172: LD_INT 22
15174: PUSH
15175: LD_INT 23
15177: PUSH
15178: LD_INT 24
15180: PUSH
15181: LD_INT 25
15183: PUSH
15184: LD_INT 26
15186: PUSH
15187: LD_INT 28
15189: PUSH
15190: LD_INT 30
15192: PUSH
15193: LD_INT 31
15195: PUSH
15196: LD_INT 32
15198: PUSH
15199: LD_INT 34
15201: PUSH
15202: LD_INT 36
15204: PUSH
15205: EMPTY
15206: LIST
15207: LIST
15208: LIST
15209: LIST
15210: LIST
15211: LIST
15212: LIST
15213: LIST
15214: LIST
15215: LIST
15216: LIST
15217: LIST
15218: LIST
15219: LIST
15220: LIST
15221: LIST
15222: LIST
15223: LIST
15224: LIST
15225: LIST
15226: LIST
15227: LIST
15228: LIST
15229: LIST
15230: LIST
15231: LIST
15232: LIST
15233: LIST
15234: LIST
15235: LIST
15236: LIST
15237: PUSH
15238: LD_INT 101
15240: PUSH
15241: LD_INT 102
15243: PUSH
15244: LD_INT 103
15246: PUSH
15247: LD_INT 104
15249: PUSH
15250: LD_INT 105
15252: PUSH
15253: LD_INT 106
15255: PUSH
15256: LD_INT 107
15258: PUSH
15259: LD_INT 108
15261: PUSH
15262: LD_INT 109
15264: PUSH
15265: LD_INT 110
15267: PUSH
15268: LD_INT 111
15270: PUSH
15271: LD_INT 112
15273: PUSH
15274: LD_INT 114
15276: PUSH
15277: LD_INT 116
15279: PUSH
15280: LD_INT 117
15282: PUSH
15283: LD_INT 118
15285: PUSH
15286: EMPTY
15287: LIST
15288: LIST
15289: LIST
15290: LIST
15291: LIST
15292: LIST
15293: LIST
15294: LIST
15295: LIST
15296: LIST
15297: LIST
15298: LIST
15299: LIST
15300: LIST
15301: LIST
15302: LIST
15303: PUSH
15304: EMPTY
15305: LIST
15306: LIST
15307: ST_TO_ADDR
15308: GO 16991
15310: LD_INT 12
15312: DOUBLE
15313: EQUAL
15314: IFTRUE 15318
15316: GO 15538
15318: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
15319: LD_ADDR_VAR 0 1
15323: PUSH
15324: LD_INT 1
15326: PUSH
15327: LD_INT 2
15329: PUSH
15330: LD_INT 3
15332: PUSH
15333: LD_INT 4
15335: PUSH
15336: LD_INT 5
15338: PUSH
15339: LD_INT 6
15341: PUSH
15342: LD_INT 7
15344: PUSH
15345: LD_INT 8
15347: PUSH
15348: LD_INT 9
15350: PUSH
15351: LD_INT 10
15353: PUSH
15354: LD_INT 11
15356: PUSH
15357: LD_INT 12
15359: PUSH
15360: LD_INT 13
15362: PUSH
15363: LD_INT 14
15365: PUSH
15366: LD_INT 15
15368: PUSH
15369: LD_INT 16
15371: PUSH
15372: LD_INT 17
15374: PUSH
15375: LD_INT 18
15377: PUSH
15378: LD_INT 19
15380: PUSH
15381: LD_INT 20
15383: PUSH
15384: LD_INT 21
15386: PUSH
15387: LD_INT 22
15389: PUSH
15390: LD_INT 23
15392: PUSH
15393: LD_INT 24
15395: PUSH
15396: LD_INT 25
15398: PUSH
15399: LD_INT 26
15401: PUSH
15402: LD_INT 27
15404: PUSH
15405: LD_INT 28
15407: PUSH
15408: LD_INT 30
15410: PUSH
15411: LD_INT 31
15413: PUSH
15414: LD_INT 32
15416: PUSH
15417: LD_INT 33
15419: PUSH
15420: LD_INT 34
15422: PUSH
15423: LD_INT 36
15425: PUSH
15426: EMPTY
15427: LIST
15428: LIST
15429: LIST
15430: LIST
15431: LIST
15432: LIST
15433: LIST
15434: LIST
15435: LIST
15436: LIST
15437: LIST
15438: LIST
15439: LIST
15440: LIST
15441: LIST
15442: LIST
15443: LIST
15444: LIST
15445: LIST
15446: LIST
15447: LIST
15448: LIST
15449: LIST
15450: LIST
15451: LIST
15452: LIST
15453: LIST
15454: LIST
15455: LIST
15456: LIST
15457: LIST
15458: LIST
15459: LIST
15460: LIST
15461: PUSH
15462: LD_INT 101
15464: PUSH
15465: LD_INT 102
15467: PUSH
15468: LD_INT 103
15470: PUSH
15471: LD_INT 104
15473: PUSH
15474: LD_INT 105
15476: PUSH
15477: LD_INT 106
15479: PUSH
15480: LD_INT 107
15482: PUSH
15483: LD_INT 108
15485: PUSH
15486: LD_INT 109
15488: PUSH
15489: LD_INT 110
15491: PUSH
15492: LD_INT 111
15494: PUSH
15495: LD_INT 112
15497: PUSH
15498: LD_INT 113
15500: PUSH
15501: LD_INT 114
15503: PUSH
15504: LD_INT 116
15506: PUSH
15507: LD_INT 117
15509: PUSH
15510: LD_INT 118
15512: PUSH
15513: EMPTY
15514: LIST
15515: LIST
15516: LIST
15517: LIST
15518: LIST
15519: LIST
15520: LIST
15521: LIST
15522: LIST
15523: LIST
15524: LIST
15525: LIST
15526: LIST
15527: LIST
15528: LIST
15529: LIST
15530: LIST
15531: PUSH
15532: EMPTY
15533: LIST
15534: LIST
15535: ST_TO_ADDR
15536: GO 16991
15538: LD_INT 13
15540: DOUBLE
15541: EQUAL
15542: IFTRUE 15546
15544: GO 15754
15546: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
15547: LD_ADDR_VAR 0 1
15551: PUSH
15552: LD_INT 1
15554: PUSH
15555: LD_INT 2
15557: PUSH
15558: LD_INT 3
15560: PUSH
15561: LD_INT 4
15563: PUSH
15564: LD_INT 5
15566: PUSH
15567: LD_INT 8
15569: PUSH
15570: LD_INT 9
15572: PUSH
15573: LD_INT 10
15575: PUSH
15576: LD_INT 11
15578: PUSH
15579: LD_INT 12
15581: PUSH
15582: LD_INT 14
15584: PUSH
15585: LD_INT 15
15587: PUSH
15588: LD_INT 16
15590: PUSH
15591: LD_INT 17
15593: PUSH
15594: LD_INT 18
15596: PUSH
15597: LD_INT 19
15599: PUSH
15600: LD_INT 20
15602: PUSH
15603: LD_INT 21
15605: PUSH
15606: LD_INT 22
15608: PUSH
15609: LD_INT 23
15611: PUSH
15612: LD_INT 24
15614: PUSH
15615: LD_INT 25
15617: PUSH
15618: LD_INT 26
15620: PUSH
15621: LD_INT 27
15623: PUSH
15624: LD_INT 28
15626: PUSH
15627: LD_INT 30
15629: PUSH
15630: LD_INT 31
15632: PUSH
15633: LD_INT 32
15635: PUSH
15636: LD_INT 33
15638: PUSH
15639: LD_INT 34
15641: PUSH
15642: LD_INT 36
15644: PUSH
15645: EMPTY
15646: LIST
15647: LIST
15648: LIST
15649: LIST
15650: LIST
15651: LIST
15652: LIST
15653: LIST
15654: LIST
15655: LIST
15656: LIST
15657: LIST
15658: LIST
15659: LIST
15660: LIST
15661: LIST
15662: LIST
15663: LIST
15664: LIST
15665: LIST
15666: LIST
15667: LIST
15668: LIST
15669: LIST
15670: LIST
15671: LIST
15672: LIST
15673: LIST
15674: LIST
15675: LIST
15676: LIST
15677: PUSH
15678: LD_INT 101
15680: PUSH
15681: LD_INT 102
15683: PUSH
15684: LD_INT 103
15686: PUSH
15687: LD_INT 104
15689: PUSH
15690: LD_INT 105
15692: PUSH
15693: LD_INT 106
15695: PUSH
15696: LD_INT 107
15698: PUSH
15699: LD_INT 108
15701: PUSH
15702: LD_INT 109
15704: PUSH
15705: LD_INT 110
15707: PUSH
15708: LD_INT 111
15710: PUSH
15711: LD_INT 112
15713: PUSH
15714: LD_INT 113
15716: PUSH
15717: LD_INT 114
15719: PUSH
15720: LD_INT 116
15722: PUSH
15723: LD_INT 117
15725: PUSH
15726: LD_INT 118
15728: PUSH
15729: EMPTY
15730: LIST
15731: LIST
15732: LIST
15733: LIST
15734: LIST
15735: LIST
15736: LIST
15737: LIST
15738: LIST
15739: LIST
15740: LIST
15741: LIST
15742: LIST
15743: LIST
15744: LIST
15745: LIST
15746: LIST
15747: PUSH
15748: EMPTY
15749: LIST
15750: LIST
15751: ST_TO_ADDR
15752: GO 16991
15754: LD_INT 14
15756: DOUBLE
15757: EQUAL
15758: IFTRUE 15762
15760: GO 15986
15762: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
15763: LD_ADDR_VAR 0 1
15767: PUSH
15768: LD_INT 1
15770: PUSH
15771: LD_INT 2
15773: PUSH
15774: LD_INT 3
15776: PUSH
15777: LD_INT 4
15779: PUSH
15780: LD_INT 5
15782: PUSH
15783: LD_INT 6
15785: PUSH
15786: LD_INT 7
15788: PUSH
15789: LD_INT 8
15791: PUSH
15792: LD_INT 9
15794: PUSH
15795: LD_INT 10
15797: PUSH
15798: LD_INT 11
15800: PUSH
15801: LD_INT 12
15803: PUSH
15804: LD_INT 13
15806: PUSH
15807: LD_INT 14
15809: PUSH
15810: LD_INT 15
15812: PUSH
15813: LD_INT 16
15815: PUSH
15816: LD_INT 17
15818: PUSH
15819: LD_INT 18
15821: PUSH
15822: LD_INT 19
15824: PUSH
15825: LD_INT 20
15827: PUSH
15828: LD_INT 21
15830: PUSH
15831: LD_INT 22
15833: PUSH
15834: LD_INT 23
15836: PUSH
15837: LD_INT 24
15839: PUSH
15840: LD_INT 25
15842: PUSH
15843: LD_INT 26
15845: PUSH
15846: LD_INT 27
15848: PUSH
15849: LD_INT 28
15851: PUSH
15852: LD_INT 29
15854: PUSH
15855: LD_INT 30
15857: PUSH
15858: LD_INT 31
15860: PUSH
15861: LD_INT 32
15863: PUSH
15864: LD_INT 33
15866: PUSH
15867: LD_INT 34
15869: PUSH
15870: LD_INT 36
15872: PUSH
15873: EMPTY
15874: LIST
15875: LIST
15876: LIST
15877: LIST
15878: LIST
15879: LIST
15880: LIST
15881: LIST
15882: LIST
15883: LIST
15884: LIST
15885: LIST
15886: LIST
15887: LIST
15888: LIST
15889: LIST
15890: LIST
15891: LIST
15892: LIST
15893: LIST
15894: LIST
15895: LIST
15896: LIST
15897: LIST
15898: LIST
15899: LIST
15900: LIST
15901: LIST
15902: LIST
15903: LIST
15904: LIST
15905: LIST
15906: LIST
15907: LIST
15908: LIST
15909: PUSH
15910: LD_INT 101
15912: PUSH
15913: LD_INT 102
15915: PUSH
15916: LD_INT 103
15918: PUSH
15919: LD_INT 104
15921: PUSH
15922: LD_INT 105
15924: PUSH
15925: LD_INT 106
15927: PUSH
15928: LD_INT 107
15930: PUSH
15931: LD_INT 108
15933: PUSH
15934: LD_INT 109
15936: PUSH
15937: LD_INT 110
15939: PUSH
15940: LD_INT 111
15942: PUSH
15943: LD_INT 112
15945: PUSH
15946: LD_INT 113
15948: PUSH
15949: LD_INT 114
15951: PUSH
15952: LD_INT 116
15954: PUSH
15955: LD_INT 117
15957: PUSH
15958: LD_INT 118
15960: PUSH
15961: EMPTY
15962: LIST
15963: LIST
15964: LIST
15965: LIST
15966: LIST
15967: LIST
15968: LIST
15969: LIST
15970: LIST
15971: LIST
15972: LIST
15973: LIST
15974: LIST
15975: LIST
15976: LIST
15977: LIST
15978: LIST
15979: PUSH
15980: EMPTY
15981: LIST
15982: LIST
15983: ST_TO_ADDR
15984: GO 16991
15986: LD_INT 15
15988: DOUBLE
15989: EQUAL
15990: IFTRUE 15994
15992: GO 16218
15994: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
15995: LD_ADDR_VAR 0 1
15999: PUSH
16000: LD_INT 1
16002: PUSH
16003: LD_INT 2
16005: PUSH
16006: LD_INT 3
16008: PUSH
16009: LD_INT 4
16011: PUSH
16012: LD_INT 5
16014: PUSH
16015: LD_INT 6
16017: PUSH
16018: LD_INT 7
16020: PUSH
16021: LD_INT 8
16023: PUSH
16024: LD_INT 9
16026: PUSH
16027: LD_INT 10
16029: PUSH
16030: LD_INT 11
16032: PUSH
16033: LD_INT 12
16035: PUSH
16036: LD_INT 13
16038: PUSH
16039: LD_INT 14
16041: PUSH
16042: LD_INT 15
16044: PUSH
16045: LD_INT 16
16047: PUSH
16048: LD_INT 17
16050: PUSH
16051: LD_INT 18
16053: PUSH
16054: LD_INT 19
16056: PUSH
16057: LD_INT 20
16059: PUSH
16060: LD_INT 21
16062: PUSH
16063: LD_INT 22
16065: PUSH
16066: LD_INT 23
16068: PUSH
16069: LD_INT 24
16071: PUSH
16072: LD_INT 25
16074: PUSH
16075: LD_INT 26
16077: PUSH
16078: LD_INT 27
16080: PUSH
16081: LD_INT 28
16083: PUSH
16084: LD_INT 29
16086: PUSH
16087: LD_INT 30
16089: PUSH
16090: LD_INT 31
16092: PUSH
16093: LD_INT 32
16095: PUSH
16096: LD_INT 33
16098: PUSH
16099: LD_INT 34
16101: PUSH
16102: LD_INT 36
16104: PUSH
16105: EMPTY
16106: LIST
16107: LIST
16108: LIST
16109: LIST
16110: LIST
16111: LIST
16112: LIST
16113: LIST
16114: LIST
16115: LIST
16116: LIST
16117: LIST
16118: LIST
16119: LIST
16120: LIST
16121: LIST
16122: LIST
16123: LIST
16124: LIST
16125: LIST
16126: LIST
16127: LIST
16128: LIST
16129: LIST
16130: LIST
16131: LIST
16132: LIST
16133: LIST
16134: LIST
16135: LIST
16136: LIST
16137: LIST
16138: LIST
16139: LIST
16140: LIST
16141: PUSH
16142: LD_INT 101
16144: PUSH
16145: LD_INT 102
16147: PUSH
16148: LD_INT 103
16150: PUSH
16151: LD_INT 104
16153: PUSH
16154: LD_INT 105
16156: PUSH
16157: LD_INT 106
16159: PUSH
16160: LD_INT 107
16162: PUSH
16163: LD_INT 108
16165: PUSH
16166: LD_INT 109
16168: PUSH
16169: LD_INT 110
16171: PUSH
16172: LD_INT 111
16174: PUSH
16175: LD_INT 112
16177: PUSH
16178: LD_INT 113
16180: PUSH
16181: LD_INT 114
16183: PUSH
16184: LD_INT 116
16186: PUSH
16187: LD_INT 117
16189: PUSH
16190: LD_INT 118
16192: PUSH
16193: EMPTY
16194: LIST
16195: LIST
16196: LIST
16197: LIST
16198: LIST
16199: LIST
16200: LIST
16201: LIST
16202: LIST
16203: LIST
16204: LIST
16205: LIST
16206: LIST
16207: LIST
16208: LIST
16209: LIST
16210: LIST
16211: PUSH
16212: EMPTY
16213: LIST
16214: LIST
16215: ST_TO_ADDR
16216: GO 16991
16218: LD_INT 16
16220: DOUBLE
16221: EQUAL
16222: IFTRUE 16226
16224: GO 16362
16226: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
16227: LD_ADDR_VAR 0 1
16231: PUSH
16232: LD_INT 2
16234: PUSH
16235: LD_INT 4
16237: PUSH
16238: LD_INT 5
16240: PUSH
16241: LD_INT 7
16243: PUSH
16244: LD_INT 11
16246: PUSH
16247: LD_INT 12
16249: PUSH
16250: LD_INT 15
16252: PUSH
16253: LD_INT 16
16255: PUSH
16256: LD_INT 20
16258: PUSH
16259: LD_INT 21
16261: PUSH
16262: LD_INT 22
16264: PUSH
16265: LD_INT 23
16267: PUSH
16268: LD_INT 25
16270: PUSH
16271: LD_INT 26
16273: PUSH
16274: LD_INT 30
16276: PUSH
16277: LD_INT 31
16279: PUSH
16280: LD_INT 32
16282: PUSH
16283: LD_INT 33
16285: PUSH
16286: LD_INT 34
16288: PUSH
16289: EMPTY
16290: LIST
16291: LIST
16292: LIST
16293: LIST
16294: LIST
16295: LIST
16296: LIST
16297: LIST
16298: LIST
16299: LIST
16300: LIST
16301: LIST
16302: LIST
16303: LIST
16304: LIST
16305: LIST
16306: LIST
16307: LIST
16308: LIST
16309: PUSH
16310: LD_INT 101
16312: PUSH
16313: LD_INT 102
16315: PUSH
16316: LD_INT 103
16318: PUSH
16319: LD_INT 106
16321: PUSH
16322: LD_INT 108
16324: PUSH
16325: LD_INT 112
16327: PUSH
16328: LD_INT 113
16330: PUSH
16331: LD_INT 114
16333: PUSH
16334: LD_INT 116
16336: PUSH
16337: LD_INT 117
16339: PUSH
16340: LD_INT 118
16342: PUSH
16343: EMPTY
16344: LIST
16345: LIST
16346: LIST
16347: LIST
16348: LIST
16349: LIST
16350: LIST
16351: LIST
16352: LIST
16353: LIST
16354: LIST
16355: PUSH
16356: EMPTY
16357: LIST
16358: LIST
16359: ST_TO_ADDR
16360: GO 16991
16362: LD_INT 17
16364: DOUBLE
16365: EQUAL
16366: IFTRUE 16370
16368: GO 16594
16370: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
16371: LD_ADDR_VAR 0 1
16375: PUSH
16376: LD_INT 1
16378: PUSH
16379: LD_INT 2
16381: PUSH
16382: LD_INT 3
16384: PUSH
16385: LD_INT 4
16387: PUSH
16388: LD_INT 5
16390: PUSH
16391: LD_INT 6
16393: PUSH
16394: LD_INT 7
16396: PUSH
16397: LD_INT 8
16399: PUSH
16400: LD_INT 9
16402: PUSH
16403: LD_INT 10
16405: PUSH
16406: LD_INT 11
16408: PUSH
16409: LD_INT 12
16411: PUSH
16412: LD_INT 13
16414: PUSH
16415: LD_INT 14
16417: PUSH
16418: LD_INT 15
16420: PUSH
16421: LD_INT 16
16423: PUSH
16424: LD_INT 17
16426: PUSH
16427: LD_INT 18
16429: PUSH
16430: LD_INT 19
16432: PUSH
16433: LD_INT 20
16435: PUSH
16436: LD_INT 21
16438: PUSH
16439: LD_INT 22
16441: PUSH
16442: LD_INT 23
16444: PUSH
16445: LD_INT 24
16447: PUSH
16448: LD_INT 25
16450: PUSH
16451: LD_INT 26
16453: PUSH
16454: LD_INT 27
16456: PUSH
16457: LD_INT 28
16459: PUSH
16460: LD_INT 29
16462: PUSH
16463: LD_INT 30
16465: PUSH
16466: LD_INT 31
16468: PUSH
16469: LD_INT 32
16471: PUSH
16472: LD_INT 33
16474: PUSH
16475: LD_INT 34
16477: PUSH
16478: LD_INT 36
16480: PUSH
16481: EMPTY
16482: LIST
16483: LIST
16484: LIST
16485: LIST
16486: LIST
16487: LIST
16488: LIST
16489: LIST
16490: LIST
16491: LIST
16492: LIST
16493: LIST
16494: LIST
16495: LIST
16496: LIST
16497: LIST
16498: LIST
16499: LIST
16500: LIST
16501: LIST
16502: LIST
16503: LIST
16504: LIST
16505: LIST
16506: LIST
16507: LIST
16508: LIST
16509: LIST
16510: LIST
16511: LIST
16512: LIST
16513: LIST
16514: LIST
16515: LIST
16516: LIST
16517: PUSH
16518: LD_INT 101
16520: PUSH
16521: LD_INT 102
16523: PUSH
16524: LD_INT 103
16526: PUSH
16527: LD_INT 104
16529: PUSH
16530: LD_INT 105
16532: PUSH
16533: LD_INT 106
16535: PUSH
16536: LD_INT 107
16538: PUSH
16539: LD_INT 108
16541: PUSH
16542: LD_INT 109
16544: PUSH
16545: LD_INT 110
16547: PUSH
16548: LD_INT 111
16550: PUSH
16551: LD_INT 112
16553: PUSH
16554: LD_INT 113
16556: PUSH
16557: LD_INT 114
16559: PUSH
16560: LD_INT 116
16562: PUSH
16563: LD_INT 117
16565: PUSH
16566: LD_INT 118
16568: PUSH
16569: EMPTY
16570: LIST
16571: LIST
16572: LIST
16573: LIST
16574: LIST
16575: LIST
16576: LIST
16577: LIST
16578: LIST
16579: LIST
16580: LIST
16581: LIST
16582: LIST
16583: LIST
16584: LIST
16585: LIST
16586: LIST
16587: PUSH
16588: EMPTY
16589: LIST
16590: LIST
16591: ST_TO_ADDR
16592: GO 16991
16594: LD_INT 18
16596: DOUBLE
16597: EQUAL
16598: IFTRUE 16602
16600: GO 16750
16602: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
16603: LD_ADDR_VAR 0 1
16607: PUSH
16608: LD_INT 2
16610: PUSH
16611: LD_INT 4
16613: PUSH
16614: LD_INT 5
16616: PUSH
16617: LD_INT 7
16619: PUSH
16620: LD_INT 11
16622: PUSH
16623: LD_INT 12
16625: PUSH
16626: LD_INT 15
16628: PUSH
16629: LD_INT 16
16631: PUSH
16632: LD_INT 20
16634: PUSH
16635: LD_INT 21
16637: PUSH
16638: LD_INT 22
16640: PUSH
16641: LD_INT 23
16643: PUSH
16644: LD_INT 25
16646: PUSH
16647: LD_INT 26
16649: PUSH
16650: LD_INT 30
16652: PUSH
16653: LD_INT 31
16655: PUSH
16656: LD_INT 32
16658: PUSH
16659: LD_INT 33
16661: PUSH
16662: LD_INT 34
16664: PUSH
16665: LD_INT 35
16667: PUSH
16668: LD_INT 36
16670: PUSH
16671: EMPTY
16672: LIST
16673: LIST
16674: LIST
16675: LIST
16676: LIST
16677: LIST
16678: LIST
16679: LIST
16680: LIST
16681: LIST
16682: LIST
16683: LIST
16684: LIST
16685: LIST
16686: LIST
16687: LIST
16688: LIST
16689: LIST
16690: LIST
16691: LIST
16692: LIST
16693: PUSH
16694: LD_INT 101
16696: PUSH
16697: LD_INT 102
16699: PUSH
16700: LD_INT 103
16702: PUSH
16703: LD_INT 106
16705: PUSH
16706: LD_INT 108
16708: PUSH
16709: LD_INT 112
16711: PUSH
16712: LD_INT 113
16714: PUSH
16715: LD_INT 114
16717: PUSH
16718: LD_INT 115
16720: PUSH
16721: LD_INT 116
16723: PUSH
16724: LD_INT 117
16726: PUSH
16727: LD_INT 118
16729: PUSH
16730: EMPTY
16731: LIST
16732: LIST
16733: LIST
16734: LIST
16735: LIST
16736: LIST
16737: LIST
16738: LIST
16739: LIST
16740: LIST
16741: LIST
16742: LIST
16743: PUSH
16744: EMPTY
16745: LIST
16746: LIST
16747: ST_TO_ADDR
16748: GO 16991
16750: LD_INT 19
16752: DOUBLE
16753: EQUAL
16754: IFTRUE 16758
16756: GO 16990
16758: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
16759: LD_ADDR_VAR 0 1
16763: PUSH
16764: LD_INT 1
16766: PUSH
16767: LD_INT 2
16769: PUSH
16770: LD_INT 3
16772: PUSH
16773: LD_INT 4
16775: PUSH
16776: LD_INT 5
16778: PUSH
16779: LD_INT 6
16781: PUSH
16782: LD_INT 7
16784: PUSH
16785: LD_INT 8
16787: PUSH
16788: LD_INT 9
16790: PUSH
16791: LD_INT 10
16793: PUSH
16794: LD_INT 11
16796: PUSH
16797: LD_INT 12
16799: PUSH
16800: LD_INT 13
16802: PUSH
16803: LD_INT 14
16805: PUSH
16806: LD_INT 15
16808: PUSH
16809: LD_INT 16
16811: PUSH
16812: LD_INT 17
16814: PUSH
16815: LD_INT 18
16817: PUSH
16818: LD_INT 19
16820: PUSH
16821: LD_INT 20
16823: PUSH
16824: LD_INT 21
16826: PUSH
16827: LD_INT 22
16829: PUSH
16830: LD_INT 23
16832: PUSH
16833: LD_INT 24
16835: PUSH
16836: LD_INT 25
16838: PUSH
16839: LD_INT 26
16841: PUSH
16842: LD_INT 27
16844: PUSH
16845: LD_INT 28
16847: PUSH
16848: LD_INT 29
16850: PUSH
16851: LD_INT 30
16853: PUSH
16854: LD_INT 31
16856: PUSH
16857: LD_INT 32
16859: PUSH
16860: LD_INT 33
16862: PUSH
16863: LD_INT 34
16865: PUSH
16866: LD_INT 35
16868: PUSH
16869: LD_INT 36
16871: PUSH
16872: EMPTY
16873: LIST
16874: LIST
16875: LIST
16876: LIST
16877: LIST
16878: LIST
16879: LIST
16880: LIST
16881: LIST
16882: LIST
16883: LIST
16884: LIST
16885: LIST
16886: LIST
16887: LIST
16888: LIST
16889: LIST
16890: LIST
16891: LIST
16892: LIST
16893: LIST
16894: LIST
16895: LIST
16896: LIST
16897: LIST
16898: LIST
16899: LIST
16900: LIST
16901: LIST
16902: LIST
16903: LIST
16904: LIST
16905: LIST
16906: LIST
16907: LIST
16908: LIST
16909: PUSH
16910: LD_INT 101
16912: PUSH
16913: LD_INT 102
16915: PUSH
16916: LD_INT 103
16918: PUSH
16919: LD_INT 104
16921: PUSH
16922: LD_INT 105
16924: PUSH
16925: LD_INT 106
16927: PUSH
16928: LD_INT 107
16930: PUSH
16931: LD_INT 108
16933: PUSH
16934: LD_INT 109
16936: PUSH
16937: LD_INT 110
16939: PUSH
16940: LD_INT 111
16942: PUSH
16943: LD_INT 112
16945: PUSH
16946: LD_INT 113
16948: PUSH
16949: LD_INT 114
16951: PUSH
16952: LD_INT 115
16954: PUSH
16955: LD_INT 116
16957: PUSH
16958: LD_INT 117
16960: PUSH
16961: LD_INT 118
16963: PUSH
16964: EMPTY
16965: LIST
16966: LIST
16967: LIST
16968: LIST
16969: LIST
16970: LIST
16971: LIST
16972: LIST
16973: LIST
16974: LIST
16975: LIST
16976: LIST
16977: LIST
16978: LIST
16979: LIST
16980: LIST
16981: LIST
16982: LIST
16983: PUSH
16984: EMPTY
16985: LIST
16986: LIST
16987: ST_TO_ADDR
16988: GO 16991
16990: POP
// end else
16991: GO 17222
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
16993: LD_ADDR_VAR 0 1
16997: PUSH
16998: LD_INT 1
17000: PUSH
17001: LD_INT 2
17003: PUSH
17004: LD_INT 3
17006: PUSH
17007: LD_INT 4
17009: PUSH
17010: LD_INT 5
17012: PUSH
17013: LD_INT 6
17015: PUSH
17016: LD_INT 7
17018: PUSH
17019: LD_INT 8
17021: PUSH
17022: LD_INT 9
17024: PUSH
17025: LD_INT 10
17027: PUSH
17028: LD_INT 11
17030: PUSH
17031: LD_INT 12
17033: PUSH
17034: LD_INT 13
17036: PUSH
17037: LD_INT 14
17039: PUSH
17040: LD_INT 15
17042: PUSH
17043: LD_INT 16
17045: PUSH
17046: LD_INT 17
17048: PUSH
17049: LD_INT 18
17051: PUSH
17052: LD_INT 19
17054: PUSH
17055: LD_INT 20
17057: PUSH
17058: LD_INT 21
17060: PUSH
17061: LD_INT 22
17063: PUSH
17064: LD_INT 23
17066: PUSH
17067: LD_INT 24
17069: PUSH
17070: LD_INT 25
17072: PUSH
17073: LD_INT 26
17075: PUSH
17076: LD_INT 27
17078: PUSH
17079: LD_INT 28
17081: PUSH
17082: LD_INT 29
17084: PUSH
17085: LD_INT 30
17087: PUSH
17088: LD_INT 31
17090: PUSH
17091: LD_INT 32
17093: PUSH
17094: LD_INT 33
17096: PUSH
17097: LD_INT 34
17099: PUSH
17100: LD_INT 35
17102: PUSH
17103: LD_INT 36
17105: PUSH
17106: EMPTY
17107: LIST
17108: LIST
17109: LIST
17110: LIST
17111: LIST
17112: LIST
17113: LIST
17114: LIST
17115: LIST
17116: LIST
17117: LIST
17118: LIST
17119: LIST
17120: LIST
17121: LIST
17122: LIST
17123: LIST
17124: LIST
17125: LIST
17126: LIST
17127: LIST
17128: LIST
17129: LIST
17130: LIST
17131: LIST
17132: LIST
17133: LIST
17134: LIST
17135: LIST
17136: LIST
17137: LIST
17138: LIST
17139: LIST
17140: LIST
17141: LIST
17142: LIST
17143: PUSH
17144: LD_INT 101
17146: PUSH
17147: LD_INT 102
17149: PUSH
17150: LD_INT 103
17152: PUSH
17153: LD_INT 104
17155: PUSH
17156: LD_INT 105
17158: PUSH
17159: LD_INT 106
17161: PUSH
17162: LD_INT 107
17164: PUSH
17165: LD_INT 108
17167: PUSH
17168: LD_INT 109
17170: PUSH
17171: LD_INT 110
17173: PUSH
17174: LD_INT 111
17176: PUSH
17177: LD_INT 112
17179: PUSH
17180: LD_INT 113
17182: PUSH
17183: LD_INT 114
17185: PUSH
17186: LD_INT 115
17188: PUSH
17189: LD_INT 116
17191: PUSH
17192: LD_INT 117
17194: PUSH
17195: LD_INT 118
17197: PUSH
17198: EMPTY
17199: LIST
17200: LIST
17201: LIST
17202: LIST
17203: LIST
17204: LIST
17205: LIST
17206: LIST
17207: LIST
17208: LIST
17209: LIST
17210: LIST
17211: LIST
17212: LIST
17213: LIST
17214: LIST
17215: LIST
17216: LIST
17217: PUSH
17218: EMPTY
17219: LIST
17220: LIST
17221: ST_TO_ADDR
// if result then
17222: LD_VAR 0 1
17226: IFFALSE 17515
// begin normal :=  ;
17228: LD_ADDR_VAR 0 3
17232: PUSH
17233: LD_STRING 
17235: ST_TO_ADDR
// hardcore :=  ;
17236: LD_ADDR_VAR 0 4
17240: PUSH
17241: LD_STRING 
17243: ST_TO_ADDR
// for i = 1 to normalCounter do
17244: LD_ADDR_VAR 0 5
17248: PUSH
17249: DOUBLE
17250: LD_INT 1
17252: DEC
17253: ST_TO_ADDR
17254: LD_EXP 41
17258: PUSH
17259: FOR_TO
17260: IFFALSE 17361
// begin tmp := 0 ;
17262: LD_ADDR_VAR 0 2
17266: PUSH
17267: LD_STRING 0
17269: ST_TO_ADDR
// if result [ 1 ] then
17270: LD_VAR 0 1
17274: PUSH
17275: LD_INT 1
17277: ARRAY
17278: IFFALSE 17343
// if result [ 1 ] [ 1 ] = i then
17280: LD_VAR 0 1
17284: PUSH
17285: LD_INT 1
17287: ARRAY
17288: PUSH
17289: LD_INT 1
17291: ARRAY
17292: PUSH
17293: LD_VAR 0 5
17297: EQUAL
17298: IFFALSE 17343
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
17300: LD_ADDR_VAR 0 1
17304: PUSH
17305: LD_VAR 0 1
17309: PPUSH
17310: LD_INT 1
17312: PPUSH
17313: LD_VAR 0 1
17317: PUSH
17318: LD_INT 1
17320: ARRAY
17321: PPUSH
17322: LD_INT 1
17324: PPUSH
17325: CALL_OW 3
17329: PPUSH
17330: CALL_OW 1
17334: ST_TO_ADDR
// tmp := 1 ;
17335: LD_ADDR_VAR 0 2
17339: PUSH
17340: LD_STRING 1
17342: ST_TO_ADDR
// end ; normal := normal & tmp ;
17343: LD_ADDR_VAR 0 3
17347: PUSH
17348: LD_VAR 0 3
17352: PUSH
17353: LD_VAR 0 2
17357: STR
17358: ST_TO_ADDR
// end ;
17359: GO 17259
17361: POP
17362: POP
// for i = 1 to hardcoreCounter do
17363: LD_ADDR_VAR 0 5
17367: PUSH
17368: DOUBLE
17369: LD_INT 1
17371: DEC
17372: ST_TO_ADDR
17373: LD_EXP 42
17377: PUSH
17378: FOR_TO
17379: IFFALSE 17484
// begin tmp := 0 ;
17381: LD_ADDR_VAR 0 2
17385: PUSH
17386: LD_STRING 0
17388: ST_TO_ADDR
// if result [ 2 ] then
17389: LD_VAR 0 1
17393: PUSH
17394: LD_INT 2
17396: ARRAY
17397: IFFALSE 17466
// if result [ 2 ] [ 1 ] = 100 + i then
17399: LD_VAR 0 1
17403: PUSH
17404: LD_INT 2
17406: ARRAY
17407: PUSH
17408: LD_INT 1
17410: ARRAY
17411: PUSH
17412: LD_INT 100
17414: PUSH
17415: LD_VAR 0 5
17419: PLUS
17420: EQUAL
17421: IFFALSE 17466
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
17423: LD_ADDR_VAR 0 1
17427: PUSH
17428: LD_VAR 0 1
17432: PPUSH
17433: LD_INT 2
17435: PPUSH
17436: LD_VAR 0 1
17440: PUSH
17441: LD_INT 2
17443: ARRAY
17444: PPUSH
17445: LD_INT 1
17447: PPUSH
17448: CALL_OW 3
17452: PPUSH
17453: CALL_OW 1
17457: ST_TO_ADDR
// tmp := 1 ;
17458: LD_ADDR_VAR 0 2
17462: PUSH
17463: LD_STRING 1
17465: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
17466: LD_ADDR_VAR 0 4
17470: PUSH
17471: LD_VAR 0 4
17475: PUSH
17476: LD_VAR 0 2
17480: STR
17481: ST_TO_ADDR
// end ;
17482: GO 17378
17484: POP
17485: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
17486: LD_STRING getStreamItemsFromMission("
17488: PUSH
17489: LD_VAR 0 3
17493: STR
17494: PUSH
17495: LD_STRING ","
17497: STR
17498: PUSH
17499: LD_VAR 0 4
17503: STR
17504: PUSH
17505: LD_STRING ")
17507: STR
17508: PPUSH
17509: CALL_OW 559
// end else
17513: GO 17522
// ToLua ( getStreamItemsFromMission("","") ) ;
17515: LD_STRING getStreamItemsFromMission("","")
17517: PPUSH
17518: CALL_OW 559
// end ;
17522: LD_VAR 0 1
17526: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
17527: LD_EXP 40
17531: PUSH
17532: LD_EXP 45
17536: AND
17537: IFFALSE 17661
17539: GO 17541
17541: DISABLE
17542: LD_INT 0
17544: PPUSH
17545: PPUSH
// begin enable ;
17546: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
17547: LD_ADDR_VAR 0 2
17551: PUSH
17552: LD_INT 22
17554: PUSH
17555: LD_OWVAR 2
17559: PUSH
17560: EMPTY
17561: LIST
17562: LIST
17563: PUSH
17564: LD_INT 2
17566: PUSH
17567: LD_INT 34
17569: PUSH
17570: LD_INT 7
17572: PUSH
17573: EMPTY
17574: LIST
17575: LIST
17576: PUSH
17577: LD_INT 34
17579: PUSH
17580: LD_INT 45
17582: PUSH
17583: EMPTY
17584: LIST
17585: LIST
17586: PUSH
17587: LD_INT 34
17589: PUSH
17590: LD_INT 28
17592: PUSH
17593: EMPTY
17594: LIST
17595: LIST
17596: PUSH
17597: LD_INT 34
17599: PUSH
17600: LD_INT 47
17602: PUSH
17603: EMPTY
17604: LIST
17605: LIST
17606: PUSH
17607: EMPTY
17608: LIST
17609: LIST
17610: LIST
17611: LIST
17612: LIST
17613: PUSH
17614: EMPTY
17615: LIST
17616: LIST
17617: PPUSH
17618: CALL_OW 69
17622: ST_TO_ADDR
// if not tmp then
17623: LD_VAR 0 2
17627: NOT
17628: IFFALSE 17632
// exit ;
17630: GO 17661
// for i in tmp do
17632: LD_ADDR_VAR 0 1
17636: PUSH
17637: LD_VAR 0 2
17641: PUSH
17642: FOR_IN
17643: IFFALSE 17659
// begin SetLives ( i , 0 ) ;
17645: LD_VAR 0 1
17649: PPUSH
17650: LD_INT 0
17652: PPUSH
17653: CALL_OW 234
// end ;
17657: GO 17642
17659: POP
17660: POP
// end ;
17661: PPOPN 2
17663: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
17664: LD_EXP 40
17668: PUSH
17669: LD_EXP 46
17673: AND
17674: IFFALSE 17758
17676: GO 17678
17678: DISABLE
17679: LD_INT 0
17681: PPUSH
17682: PPUSH
// begin enable ;
17683: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
17684: LD_ADDR_VAR 0 2
17688: PUSH
17689: LD_INT 22
17691: PUSH
17692: LD_OWVAR 2
17696: PUSH
17697: EMPTY
17698: LIST
17699: LIST
17700: PUSH
17701: LD_INT 32
17703: PUSH
17704: LD_INT 3
17706: PUSH
17707: EMPTY
17708: LIST
17709: LIST
17710: PUSH
17711: EMPTY
17712: LIST
17713: LIST
17714: PPUSH
17715: CALL_OW 69
17719: ST_TO_ADDR
// if not tmp then
17720: LD_VAR 0 2
17724: NOT
17725: IFFALSE 17729
// exit ;
17727: GO 17758
// for i in tmp do
17729: LD_ADDR_VAR 0 1
17733: PUSH
17734: LD_VAR 0 2
17738: PUSH
17739: FOR_IN
17740: IFFALSE 17756
// begin SetLives ( i , 0 ) ;
17742: LD_VAR 0 1
17746: PPUSH
17747: LD_INT 0
17749: PPUSH
17750: CALL_OW 234
// end ;
17754: GO 17739
17756: POP
17757: POP
// end ;
17758: PPOPN 2
17760: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
17761: LD_EXP 40
17765: PUSH
17766: LD_EXP 43
17770: AND
17771: IFFALSE 17864
17773: GO 17775
17775: DISABLE
17776: LD_INT 0
17778: PPUSH
// begin enable ;
17779: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
17780: LD_ADDR_VAR 0 1
17784: PUSH
17785: LD_INT 22
17787: PUSH
17788: LD_OWVAR 2
17792: PUSH
17793: EMPTY
17794: LIST
17795: LIST
17796: PUSH
17797: LD_INT 2
17799: PUSH
17800: LD_INT 25
17802: PUSH
17803: LD_INT 5
17805: PUSH
17806: EMPTY
17807: LIST
17808: LIST
17809: PUSH
17810: LD_INT 25
17812: PUSH
17813: LD_INT 9
17815: PUSH
17816: EMPTY
17817: LIST
17818: LIST
17819: PUSH
17820: LD_INT 25
17822: PUSH
17823: LD_INT 8
17825: PUSH
17826: EMPTY
17827: LIST
17828: LIST
17829: PUSH
17830: EMPTY
17831: LIST
17832: LIST
17833: LIST
17834: LIST
17835: PUSH
17836: EMPTY
17837: LIST
17838: LIST
17839: PPUSH
17840: CALL_OW 69
17844: PUSH
17845: FOR_IN
17846: IFFALSE 17862
// begin SetClass ( i , 1 ) ;
17848: LD_VAR 0 1
17852: PPUSH
17853: LD_INT 1
17855: PPUSH
17856: CALL_OW 336
// end ;
17860: GO 17845
17862: POP
17863: POP
// end ;
17864: PPOPN 1
17866: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
17867: LD_EXP 40
17871: PUSH
17872: LD_EXP 44
17876: AND
17877: PUSH
17878: LD_OWVAR 65
17882: PUSH
17883: LD_INT 7
17885: LESS
17886: AND
17887: IFFALSE 17901
17889: GO 17891
17891: DISABLE
// begin enable ;
17892: ENABLE
// game_speed := 7 ;
17893: LD_ADDR_OWVAR 65
17897: PUSH
17898: LD_INT 7
17900: ST_TO_ADDR
// end ;
17901: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
17902: LD_EXP 40
17906: PUSH
17907: LD_EXP 47
17911: AND
17912: IFFALSE 18114
17914: GO 17916
17916: DISABLE
17917: LD_INT 0
17919: PPUSH
17920: PPUSH
17921: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
17922: LD_ADDR_VAR 0 3
17926: PUSH
17927: LD_INT 81
17929: PUSH
17930: LD_OWVAR 2
17934: PUSH
17935: EMPTY
17936: LIST
17937: LIST
17938: PUSH
17939: LD_INT 21
17941: PUSH
17942: LD_INT 1
17944: PUSH
17945: EMPTY
17946: LIST
17947: LIST
17948: PUSH
17949: EMPTY
17950: LIST
17951: LIST
17952: PPUSH
17953: CALL_OW 69
17957: ST_TO_ADDR
// if not tmp then
17958: LD_VAR 0 3
17962: NOT
17963: IFFALSE 17967
// exit ;
17965: GO 18114
// if tmp > 5 then
17967: LD_VAR 0 3
17971: PUSH
17972: LD_INT 5
17974: GREATER
17975: IFFALSE 17987
// k := 5 else
17977: LD_ADDR_VAR 0 2
17981: PUSH
17982: LD_INT 5
17984: ST_TO_ADDR
17985: GO 17997
// k := tmp ;
17987: LD_ADDR_VAR 0 2
17991: PUSH
17992: LD_VAR 0 3
17996: ST_TO_ADDR
// for i := 1 to k do
17997: LD_ADDR_VAR 0 1
18001: PUSH
18002: DOUBLE
18003: LD_INT 1
18005: DEC
18006: ST_TO_ADDR
18007: LD_VAR 0 2
18011: PUSH
18012: FOR_TO
18013: IFFALSE 18112
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
18015: LD_VAR 0 3
18019: PUSH
18020: LD_VAR 0 1
18024: ARRAY
18025: PPUSH
18026: LD_VAR 0 1
18030: PUSH
18031: LD_INT 4
18033: MOD
18034: PUSH
18035: LD_INT 1
18037: PLUS
18038: PPUSH
18039: CALL_OW 259
18043: PUSH
18044: LD_INT 10
18046: LESS
18047: IFFALSE 18110
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
18049: LD_VAR 0 3
18053: PUSH
18054: LD_VAR 0 1
18058: ARRAY
18059: PPUSH
18060: LD_VAR 0 1
18064: PUSH
18065: LD_INT 4
18067: MOD
18068: PUSH
18069: LD_INT 1
18071: PLUS
18072: PPUSH
18073: LD_VAR 0 3
18077: PUSH
18078: LD_VAR 0 1
18082: ARRAY
18083: PPUSH
18084: LD_VAR 0 1
18088: PUSH
18089: LD_INT 4
18091: MOD
18092: PUSH
18093: LD_INT 1
18095: PLUS
18096: PPUSH
18097: CALL_OW 259
18101: PUSH
18102: LD_INT 1
18104: PLUS
18105: PPUSH
18106: CALL_OW 237
18110: GO 18012
18112: POP
18113: POP
// end ;
18114: PPOPN 3
18116: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
18117: LD_EXP 40
18121: PUSH
18122: LD_EXP 48
18126: AND
18127: IFFALSE 18147
18129: GO 18131
18131: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
18132: LD_INT 4
18134: PPUSH
18135: LD_OWVAR 2
18139: PPUSH
18140: LD_INT 0
18142: PPUSH
18143: CALL_OW 324
18147: END
// every 0 0$1 trigger StreamModeActive and sShovel do
18148: LD_EXP 40
18152: PUSH
18153: LD_EXP 77
18157: AND
18158: IFFALSE 18178
18160: GO 18162
18162: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
18163: LD_INT 19
18165: PPUSH
18166: LD_OWVAR 2
18170: PPUSH
18171: LD_INT 0
18173: PPUSH
18174: CALL_OW 324
18178: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
18179: LD_EXP 40
18183: PUSH
18184: LD_EXP 49
18188: AND
18189: IFFALSE 18291
18191: GO 18193
18193: DISABLE
18194: LD_INT 0
18196: PPUSH
18197: PPUSH
// begin enable ;
18198: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
18199: LD_ADDR_VAR 0 2
18203: PUSH
18204: LD_INT 22
18206: PUSH
18207: LD_OWVAR 2
18211: PUSH
18212: EMPTY
18213: LIST
18214: LIST
18215: PUSH
18216: LD_INT 2
18218: PUSH
18219: LD_INT 34
18221: PUSH
18222: LD_INT 11
18224: PUSH
18225: EMPTY
18226: LIST
18227: LIST
18228: PUSH
18229: LD_INT 34
18231: PUSH
18232: LD_INT 30
18234: PUSH
18235: EMPTY
18236: LIST
18237: LIST
18238: PUSH
18239: EMPTY
18240: LIST
18241: LIST
18242: LIST
18243: PUSH
18244: EMPTY
18245: LIST
18246: LIST
18247: PPUSH
18248: CALL_OW 69
18252: ST_TO_ADDR
// if not tmp then
18253: LD_VAR 0 2
18257: NOT
18258: IFFALSE 18262
// exit ;
18260: GO 18291
// for i in tmp do
18262: LD_ADDR_VAR 0 1
18266: PUSH
18267: LD_VAR 0 2
18271: PUSH
18272: FOR_IN
18273: IFFALSE 18289
// begin SetLives ( i , 0 ) ;
18275: LD_VAR 0 1
18279: PPUSH
18280: LD_INT 0
18282: PPUSH
18283: CALL_OW 234
// end ;
18287: GO 18272
18289: POP
18290: POP
// end ;
18291: PPOPN 2
18293: END
// every 0 0$1 trigger StreamModeActive and sBunker do
18294: LD_EXP 40
18298: PUSH
18299: LD_EXP 50
18303: AND
18304: IFFALSE 18324
18306: GO 18308
18308: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
18309: LD_INT 32
18311: PPUSH
18312: LD_OWVAR 2
18316: PPUSH
18317: LD_INT 0
18319: PPUSH
18320: CALL_OW 324
18324: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
18325: LD_EXP 40
18329: PUSH
18330: LD_EXP 51
18334: AND
18335: IFFALSE 18516
18337: GO 18339
18339: DISABLE
18340: LD_INT 0
18342: PPUSH
18343: PPUSH
18344: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
18345: LD_ADDR_VAR 0 2
18349: PUSH
18350: LD_INT 22
18352: PUSH
18353: LD_OWVAR 2
18357: PUSH
18358: EMPTY
18359: LIST
18360: LIST
18361: PUSH
18362: LD_INT 33
18364: PUSH
18365: LD_INT 3
18367: PUSH
18368: EMPTY
18369: LIST
18370: LIST
18371: PUSH
18372: EMPTY
18373: LIST
18374: LIST
18375: PPUSH
18376: CALL_OW 69
18380: ST_TO_ADDR
// if not tmp then
18381: LD_VAR 0 2
18385: NOT
18386: IFFALSE 18390
// exit ;
18388: GO 18516
// side := 0 ;
18390: LD_ADDR_VAR 0 3
18394: PUSH
18395: LD_INT 0
18397: ST_TO_ADDR
// for i := 1 to 8 do
18398: LD_ADDR_VAR 0 1
18402: PUSH
18403: DOUBLE
18404: LD_INT 1
18406: DEC
18407: ST_TO_ADDR
18408: LD_INT 8
18410: PUSH
18411: FOR_TO
18412: IFFALSE 18460
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
18414: LD_OWVAR 2
18418: PUSH
18419: LD_VAR 0 1
18423: NONEQUAL
18424: PUSH
18425: LD_OWVAR 2
18429: PPUSH
18430: LD_VAR 0 1
18434: PPUSH
18435: CALL_OW 81
18439: PUSH
18440: LD_INT 2
18442: EQUAL
18443: AND
18444: IFFALSE 18458
// begin side := i ;
18446: LD_ADDR_VAR 0 3
18450: PUSH
18451: LD_VAR 0 1
18455: ST_TO_ADDR
// break ;
18456: GO 18460
// end ;
18458: GO 18411
18460: POP
18461: POP
// if not side then
18462: LD_VAR 0 3
18466: NOT
18467: IFFALSE 18471
// exit ;
18469: GO 18516
// for i := 1 to tmp do
18471: LD_ADDR_VAR 0 1
18475: PUSH
18476: DOUBLE
18477: LD_INT 1
18479: DEC
18480: ST_TO_ADDR
18481: LD_VAR 0 2
18485: PUSH
18486: FOR_TO
18487: IFFALSE 18514
// if Prob ( 60 ) then
18489: LD_INT 60
18491: PPUSH
18492: CALL_OW 13
18496: IFFALSE 18512
// SetSide ( i , side ) ;
18498: LD_VAR 0 1
18502: PPUSH
18503: LD_VAR 0 3
18507: PPUSH
18508: CALL_OW 235
18512: GO 18486
18514: POP
18515: POP
// end ;
18516: PPOPN 3
18518: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
18519: LD_EXP 40
18523: PUSH
18524: LD_EXP 53
18528: AND
18529: IFFALSE 18648
18531: GO 18533
18533: DISABLE
18534: LD_INT 0
18536: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
18537: LD_ADDR_VAR 0 1
18541: PUSH
18542: LD_INT 22
18544: PUSH
18545: LD_OWVAR 2
18549: PUSH
18550: EMPTY
18551: LIST
18552: LIST
18553: PUSH
18554: LD_INT 21
18556: PUSH
18557: LD_INT 1
18559: PUSH
18560: EMPTY
18561: LIST
18562: LIST
18563: PUSH
18564: LD_INT 3
18566: PUSH
18567: LD_INT 23
18569: PUSH
18570: LD_INT 0
18572: PUSH
18573: EMPTY
18574: LIST
18575: LIST
18576: PUSH
18577: EMPTY
18578: LIST
18579: LIST
18580: PUSH
18581: EMPTY
18582: LIST
18583: LIST
18584: LIST
18585: PPUSH
18586: CALL_OW 69
18590: PUSH
18591: FOR_IN
18592: IFFALSE 18646
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
18594: LD_VAR 0 1
18598: PPUSH
18599: CALL_OW 257
18603: PUSH
18604: LD_INT 1
18606: PUSH
18607: LD_INT 2
18609: PUSH
18610: LD_INT 3
18612: PUSH
18613: LD_INT 4
18615: PUSH
18616: EMPTY
18617: LIST
18618: LIST
18619: LIST
18620: LIST
18621: IN
18622: IFFALSE 18644
// SetClass ( un , rand ( 1 , 4 ) ) ;
18624: LD_VAR 0 1
18628: PPUSH
18629: LD_INT 1
18631: PPUSH
18632: LD_INT 4
18634: PPUSH
18635: CALL_OW 12
18639: PPUSH
18640: CALL_OW 336
18644: GO 18591
18646: POP
18647: POP
// end ;
18648: PPOPN 1
18650: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
18651: LD_EXP 40
18655: PUSH
18656: LD_EXP 52
18660: AND
18661: IFFALSE 18740
18663: GO 18665
18665: DISABLE
18666: LD_INT 0
18668: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18669: LD_ADDR_VAR 0 1
18673: PUSH
18674: LD_INT 22
18676: PUSH
18677: LD_OWVAR 2
18681: PUSH
18682: EMPTY
18683: LIST
18684: LIST
18685: PUSH
18686: LD_INT 21
18688: PUSH
18689: LD_INT 3
18691: PUSH
18692: EMPTY
18693: LIST
18694: LIST
18695: PUSH
18696: EMPTY
18697: LIST
18698: LIST
18699: PPUSH
18700: CALL_OW 69
18704: ST_TO_ADDR
// if not tmp then
18705: LD_VAR 0 1
18709: NOT
18710: IFFALSE 18714
// exit ;
18712: GO 18740
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
18714: LD_VAR 0 1
18718: PUSH
18719: LD_INT 1
18721: PPUSH
18722: LD_VAR 0 1
18726: PPUSH
18727: CALL_OW 12
18731: ARRAY
18732: PPUSH
18733: LD_INT 100
18735: PPUSH
18736: CALL_OW 234
// end ;
18740: PPOPN 1
18742: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
18743: LD_EXP 40
18747: PUSH
18748: LD_EXP 54
18752: AND
18753: IFFALSE 18851
18755: GO 18757
18757: DISABLE
18758: LD_INT 0
18760: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18761: LD_ADDR_VAR 0 1
18765: PUSH
18766: LD_INT 22
18768: PUSH
18769: LD_OWVAR 2
18773: PUSH
18774: EMPTY
18775: LIST
18776: LIST
18777: PUSH
18778: LD_INT 21
18780: PUSH
18781: LD_INT 1
18783: PUSH
18784: EMPTY
18785: LIST
18786: LIST
18787: PUSH
18788: EMPTY
18789: LIST
18790: LIST
18791: PPUSH
18792: CALL_OW 69
18796: ST_TO_ADDR
// if not tmp then
18797: LD_VAR 0 1
18801: NOT
18802: IFFALSE 18806
// exit ;
18804: GO 18851
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
18806: LD_VAR 0 1
18810: PUSH
18811: LD_INT 1
18813: PPUSH
18814: LD_VAR 0 1
18818: PPUSH
18819: CALL_OW 12
18823: ARRAY
18824: PPUSH
18825: LD_INT 1
18827: PPUSH
18828: LD_INT 4
18830: PPUSH
18831: CALL_OW 12
18835: PPUSH
18836: LD_INT 3000
18838: PPUSH
18839: LD_INT 9000
18841: PPUSH
18842: CALL_OW 12
18846: PPUSH
18847: CALL_OW 492
// end ;
18851: PPOPN 1
18853: END
// every 0 0$1 trigger StreamModeActive and sDepot do
18854: LD_EXP 40
18858: PUSH
18859: LD_EXP 55
18863: AND
18864: IFFALSE 18884
18866: GO 18868
18868: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
18869: LD_INT 1
18871: PPUSH
18872: LD_OWVAR 2
18876: PPUSH
18877: LD_INT 0
18879: PPUSH
18880: CALL_OW 324
18884: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
18885: LD_EXP 40
18889: PUSH
18890: LD_EXP 56
18894: AND
18895: IFFALSE 18978
18897: GO 18899
18899: DISABLE
18900: LD_INT 0
18902: PPUSH
18903: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18904: LD_ADDR_VAR 0 2
18908: PUSH
18909: LD_INT 22
18911: PUSH
18912: LD_OWVAR 2
18916: PUSH
18917: EMPTY
18918: LIST
18919: LIST
18920: PUSH
18921: LD_INT 21
18923: PUSH
18924: LD_INT 3
18926: PUSH
18927: EMPTY
18928: LIST
18929: LIST
18930: PUSH
18931: EMPTY
18932: LIST
18933: LIST
18934: PPUSH
18935: CALL_OW 69
18939: ST_TO_ADDR
// if not tmp then
18940: LD_VAR 0 2
18944: NOT
18945: IFFALSE 18949
// exit ;
18947: GO 18978
// for i in tmp do
18949: LD_ADDR_VAR 0 1
18953: PUSH
18954: LD_VAR 0 2
18958: PUSH
18959: FOR_IN
18960: IFFALSE 18976
// SetBLevel ( i , 10 ) ;
18962: LD_VAR 0 1
18966: PPUSH
18967: LD_INT 10
18969: PPUSH
18970: CALL_OW 241
18974: GO 18959
18976: POP
18977: POP
// end ;
18978: PPOPN 2
18980: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
18981: LD_EXP 40
18985: PUSH
18986: LD_EXP 57
18990: AND
18991: IFFALSE 19102
18993: GO 18995
18995: DISABLE
18996: LD_INT 0
18998: PPUSH
18999: PPUSH
19000: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19001: LD_ADDR_VAR 0 3
19005: PUSH
19006: LD_INT 22
19008: PUSH
19009: LD_OWVAR 2
19013: PUSH
19014: EMPTY
19015: LIST
19016: LIST
19017: PUSH
19018: LD_INT 25
19020: PUSH
19021: LD_INT 1
19023: PUSH
19024: EMPTY
19025: LIST
19026: LIST
19027: PUSH
19028: EMPTY
19029: LIST
19030: LIST
19031: PPUSH
19032: CALL_OW 69
19036: ST_TO_ADDR
// if not tmp then
19037: LD_VAR 0 3
19041: NOT
19042: IFFALSE 19046
// exit ;
19044: GO 19102
// un := tmp [ rand ( 1 , tmp ) ] ;
19046: LD_ADDR_VAR 0 2
19050: PUSH
19051: LD_VAR 0 3
19055: PUSH
19056: LD_INT 1
19058: PPUSH
19059: LD_VAR 0 3
19063: PPUSH
19064: CALL_OW 12
19068: ARRAY
19069: ST_TO_ADDR
// if Crawls ( un ) then
19070: LD_VAR 0 2
19074: PPUSH
19075: CALL_OW 318
19079: IFFALSE 19090
// ComWalk ( un ) ;
19081: LD_VAR 0 2
19085: PPUSH
19086: CALL_OW 138
// SetClass ( un , class_sniper ) ;
19090: LD_VAR 0 2
19094: PPUSH
19095: LD_INT 5
19097: PPUSH
19098: CALL_OW 336
// end ;
19102: PPOPN 3
19104: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
19105: LD_EXP 40
19109: PUSH
19110: LD_EXP 58
19114: AND
19115: PUSH
19116: LD_OWVAR 67
19120: PUSH
19121: LD_INT 4
19123: LESS
19124: AND
19125: IFFALSE 19144
19127: GO 19129
19129: DISABLE
// begin Difficulty := Difficulty + 1 ;
19130: LD_ADDR_OWVAR 67
19134: PUSH
19135: LD_OWVAR 67
19139: PUSH
19140: LD_INT 1
19142: PLUS
19143: ST_TO_ADDR
// end ;
19144: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
19145: LD_EXP 40
19149: PUSH
19150: LD_EXP 59
19154: AND
19155: IFFALSE 19258
19157: GO 19159
19159: DISABLE
19160: LD_INT 0
19162: PPUSH
// begin for i := 1 to 5 do
19163: LD_ADDR_VAR 0 1
19167: PUSH
19168: DOUBLE
19169: LD_INT 1
19171: DEC
19172: ST_TO_ADDR
19173: LD_INT 5
19175: PUSH
19176: FOR_TO
19177: IFFALSE 19256
// begin uc_nation := nation_nature ;
19179: LD_ADDR_OWVAR 21
19183: PUSH
19184: LD_INT 0
19186: ST_TO_ADDR
// uc_side := 0 ;
19187: LD_ADDR_OWVAR 20
19191: PUSH
19192: LD_INT 0
19194: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19195: LD_ADDR_OWVAR 29
19199: PUSH
19200: LD_INT 12
19202: PUSH
19203: LD_INT 12
19205: PUSH
19206: EMPTY
19207: LIST
19208: LIST
19209: ST_TO_ADDR
// hc_agressivity := 20 ;
19210: LD_ADDR_OWVAR 35
19214: PUSH
19215: LD_INT 20
19217: ST_TO_ADDR
// hc_class := class_tiger ;
19218: LD_ADDR_OWVAR 28
19222: PUSH
19223: LD_INT 14
19225: ST_TO_ADDR
// hc_gallery :=  ;
19226: LD_ADDR_OWVAR 33
19230: PUSH
19231: LD_STRING 
19233: ST_TO_ADDR
// hc_name :=  ;
19234: LD_ADDR_OWVAR 26
19238: PUSH
19239: LD_STRING 
19241: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
19242: CALL_OW 44
19246: PPUSH
19247: LD_INT 0
19249: PPUSH
19250: CALL_OW 51
// end ;
19254: GO 19176
19256: POP
19257: POP
// end ;
19258: PPOPN 1
19260: END
// every 0 0$1 trigger StreamModeActive and sBomb do
19261: LD_EXP 40
19265: PUSH
19266: LD_EXP 60
19270: AND
19271: IFFALSE 19280
19273: GO 19275
19275: DISABLE
// StreamSibBomb ;
19276: CALL 19281 0 0
19280: END
// export function StreamSibBomb ; var i , x , y ; begin
19281: LD_INT 0
19283: PPUSH
19284: PPUSH
19285: PPUSH
19286: PPUSH
// result := false ;
19287: LD_ADDR_VAR 0 1
19291: PUSH
19292: LD_INT 0
19294: ST_TO_ADDR
// for i := 1 to 16 do
19295: LD_ADDR_VAR 0 2
19299: PUSH
19300: DOUBLE
19301: LD_INT 1
19303: DEC
19304: ST_TO_ADDR
19305: LD_INT 16
19307: PUSH
19308: FOR_TO
19309: IFFALSE 19508
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
19311: LD_ADDR_VAR 0 3
19315: PUSH
19316: LD_INT 10
19318: PUSH
19319: LD_INT 20
19321: PUSH
19322: LD_INT 30
19324: PUSH
19325: LD_INT 40
19327: PUSH
19328: LD_INT 50
19330: PUSH
19331: LD_INT 60
19333: PUSH
19334: LD_INT 70
19336: PUSH
19337: LD_INT 80
19339: PUSH
19340: LD_INT 90
19342: PUSH
19343: LD_INT 100
19345: PUSH
19346: LD_INT 110
19348: PUSH
19349: LD_INT 120
19351: PUSH
19352: LD_INT 130
19354: PUSH
19355: LD_INT 140
19357: PUSH
19358: LD_INT 150
19360: PUSH
19361: EMPTY
19362: LIST
19363: LIST
19364: LIST
19365: LIST
19366: LIST
19367: LIST
19368: LIST
19369: LIST
19370: LIST
19371: LIST
19372: LIST
19373: LIST
19374: LIST
19375: LIST
19376: LIST
19377: PUSH
19378: LD_INT 1
19380: PPUSH
19381: LD_INT 15
19383: PPUSH
19384: CALL_OW 12
19388: ARRAY
19389: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
19390: LD_ADDR_VAR 0 4
19394: PUSH
19395: LD_INT 10
19397: PUSH
19398: LD_INT 20
19400: PUSH
19401: LD_INT 30
19403: PUSH
19404: LD_INT 40
19406: PUSH
19407: LD_INT 50
19409: PUSH
19410: LD_INT 60
19412: PUSH
19413: LD_INT 70
19415: PUSH
19416: LD_INT 80
19418: PUSH
19419: LD_INT 90
19421: PUSH
19422: LD_INT 100
19424: PUSH
19425: LD_INT 110
19427: PUSH
19428: LD_INT 120
19430: PUSH
19431: LD_INT 130
19433: PUSH
19434: LD_INT 140
19436: PUSH
19437: LD_INT 150
19439: PUSH
19440: EMPTY
19441: LIST
19442: LIST
19443: LIST
19444: LIST
19445: LIST
19446: LIST
19447: LIST
19448: LIST
19449: LIST
19450: LIST
19451: LIST
19452: LIST
19453: LIST
19454: LIST
19455: LIST
19456: PUSH
19457: LD_INT 1
19459: PPUSH
19460: LD_INT 15
19462: PPUSH
19463: CALL_OW 12
19467: ARRAY
19468: ST_TO_ADDR
// if ValidHex ( x , y ) then
19469: LD_VAR 0 3
19473: PPUSH
19474: LD_VAR 0 4
19478: PPUSH
19479: CALL_OW 488
19483: IFFALSE 19506
// begin result := [ x , y ] ;
19485: LD_ADDR_VAR 0 1
19489: PUSH
19490: LD_VAR 0 3
19494: PUSH
19495: LD_VAR 0 4
19499: PUSH
19500: EMPTY
19501: LIST
19502: LIST
19503: ST_TO_ADDR
// break ;
19504: GO 19508
// end ; end ;
19506: GO 19308
19508: POP
19509: POP
// if result then
19510: LD_VAR 0 1
19514: IFFALSE 19574
// begin ToLua ( playSibBomb() ) ;
19516: LD_STRING playSibBomb()
19518: PPUSH
19519: CALL_OW 559
// wait ( 0 0$14 ) ;
19523: LD_INT 490
19525: PPUSH
19526: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
19530: LD_VAR 0 1
19534: PUSH
19535: LD_INT 1
19537: ARRAY
19538: PPUSH
19539: LD_VAR 0 1
19543: PUSH
19544: LD_INT 2
19546: ARRAY
19547: PPUSH
19548: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
19552: LD_VAR 0 1
19556: PUSH
19557: LD_INT 1
19559: ARRAY
19560: PPUSH
19561: LD_VAR 0 1
19565: PUSH
19566: LD_INT 2
19568: ARRAY
19569: PPUSH
19570: CALL_OW 429
// end ; end ;
19574: LD_VAR 0 1
19578: RET
// every 0 0$1 trigger StreamModeActive and sReset do
19579: LD_EXP 40
19583: PUSH
19584: LD_EXP 62
19588: AND
19589: IFFALSE 19601
19591: GO 19593
19593: DISABLE
// YouLost (  ) ;
19594: LD_STRING 
19596: PPUSH
19597: CALL_OW 104
19601: END
// every 0 0$1 trigger StreamModeActive and sFog do
19602: LD_EXP 40
19606: PUSH
19607: LD_EXP 61
19611: AND
19612: IFFALSE 19626
19614: GO 19616
19616: DISABLE
// FogOff ( your_side ) ;
19617: LD_OWVAR 2
19621: PPUSH
19622: CALL_OW 344
19626: END
// every 0 0$1 trigger StreamModeActive and sSun do
19627: LD_EXP 40
19631: PUSH
19632: LD_EXP 63
19636: AND
19637: IFFALSE 19665
19639: GO 19641
19641: DISABLE
// begin solar_recharge_percent := 0 ;
19642: LD_ADDR_OWVAR 79
19646: PUSH
19647: LD_INT 0
19649: ST_TO_ADDR
// wait ( 5 5$00 ) ;
19650: LD_INT 10500
19652: PPUSH
19653: CALL_OW 67
// solar_recharge_percent := 100 ;
19657: LD_ADDR_OWVAR 79
19661: PUSH
19662: LD_INT 100
19664: ST_TO_ADDR
// end ;
19665: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
19666: LD_EXP 40
19670: PUSH
19671: LD_EXP 64
19675: AND
19676: IFFALSE 19915
19678: GO 19680
19680: DISABLE
19681: LD_INT 0
19683: PPUSH
19684: PPUSH
19685: PPUSH
// begin tmp := [ ] ;
19686: LD_ADDR_VAR 0 3
19690: PUSH
19691: EMPTY
19692: ST_TO_ADDR
// for i := 1 to 6 do
19693: LD_ADDR_VAR 0 1
19697: PUSH
19698: DOUBLE
19699: LD_INT 1
19701: DEC
19702: ST_TO_ADDR
19703: LD_INT 6
19705: PUSH
19706: FOR_TO
19707: IFFALSE 19812
// begin uc_nation := nation_nature ;
19709: LD_ADDR_OWVAR 21
19713: PUSH
19714: LD_INT 0
19716: ST_TO_ADDR
// uc_side := 0 ;
19717: LD_ADDR_OWVAR 20
19721: PUSH
19722: LD_INT 0
19724: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19725: LD_ADDR_OWVAR 29
19729: PUSH
19730: LD_INT 12
19732: PUSH
19733: LD_INT 12
19735: PUSH
19736: EMPTY
19737: LIST
19738: LIST
19739: ST_TO_ADDR
// hc_agressivity := 20 ;
19740: LD_ADDR_OWVAR 35
19744: PUSH
19745: LD_INT 20
19747: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
19748: LD_ADDR_OWVAR 28
19752: PUSH
19753: LD_INT 17
19755: ST_TO_ADDR
// hc_gallery :=  ;
19756: LD_ADDR_OWVAR 33
19760: PUSH
19761: LD_STRING 
19763: ST_TO_ADDR
// hc_name :=  ;
19764: LD_ADDR_OWVAR 26
19768: PUSH
19769: LD_STRING 
19771: ST_TO_ADDR
// un := CreateHuman ;
19772: LD_ADDR_VAR 0 2
19776: PUSH
19777: CALL_OW 44
19781: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
19782: LD_VAR 0 2
19786: PPUSH
19787: LD_INT 1
19789: PPUSH
19790: CALL_OW 51
// tmp := tmp ^ un ;
19794: LD_ADDR_VAR 0 3
19798: PUSH
19799: LD_VAR 0 3
19803: PUSH
19804: LD_VAR 0 2
19808: ADD
19809: ST_TO_ADDR
// end ;
19810: GO 19706
19812: POP
19813: POP
// repeat wait ( 0 0$1 ) ;
19814: LD_INT 35
19816: PPUSH
19817: CALL_OW 67
// for un in tmp do
19821: LD_ADDR_VAR 0 2
19825: PUSH
19826: LD_VAR 0 3
19830: PUSH
19831: FOR_IN
19832: IFFALSE 19906
// begin if IsDead ( un ) then
19834: LD_VAR 0 2
19838: PPUSH
19839: CALL_OW 301
19843: IFFALSE 19863
// begin tmp := tmp diff un ;
19845: LD_ADDR_VAR 0 3
19849: PUSH
19850: LD_VAR 0 3
19854: PUSH
19855: LD_VAR 0 2
19859: DIFF
19860: ST_TO_ADDR
// continue ;
19861: GO 19831
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
19863: LD_VAR 0 2
19867: PPUSH
19868: LD_INT 3
19870: PUSH
19871: LD_INT 22
19873: PUSH
19874: LD_INT 0
19876: PUSH
19877: EMPTY
19878: LIST
19879: LIST
19880: PUSH
19881: EMPTY
19882: LIST
19883: LIST
19884: PPUSH
19885: CALL_OW 69
19889: PPUSH
19890: LD_VAR 0 2
19894: PPUSH
19895: CALL_OW 74
19899: PPUSH
19900: CALL_OW 115
// end ;
19904: GO 19831
19906: POP
19907: POP
// until not tmp ;
19908: LD_VAR 0 3
19912: NOT
19913: IFFALSE 19814
// end ;
19915: PPOPN 3
19917: END
// every 0 0$1 trigger StreamModeActive and sTroll do
19918: LD_EXP 40
19922: PUSH
19923: LD_EXP 65
19927: AND
19928: IFFALSE 19982
19930: GO 19932
19932: DISABLE
// begin ToLua ( displayTroll(); ) ;
19933: LD_STRING displayTroll();
19935: PPUSH
19936: CALL_OW 559
// wait ( 3 3$00 ) ;
19940: LD_INT 6300
19942: PPUSH
19943: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19947: LD_STRING hideTroll();
19949: PPUSH
19950: CALL_OW 559
// wait ( 1 1$00 ) ;
19954: LD_INT 2100
19956: PPUSH
19957: CALL_OW 67
// ToLua ( displayTroll(); ) ;
19961: LD_STRING displayTroll();
19963: PPUSH
19964: CALL_OW 559
// wait ( 1 1$00 ) ;
19968: LD_INT 2100
19970: PPUSH
19971: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19975: LD_STRING hideTroll();
19977: PPUSH
19978: CALL_OW 559
// end ;
19982: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
19983: LD_EXP 40
19987: PUSH
19988: LD_EXP 66
19992: AND
19993: IFFALSE 20056
19995: GO 19997
19997: DISABLE
19998: LD_INT 0
20000: PPUSH
// begin p := 0 ;
20001: LD_ADDR_VAR 0 1
20005: PUSH
20006: LD_INT 0
20008: ST_TO_ADDR
// repeat game_speed := 1 ;
20009: LD_ADDR_OWVAR 65
20013: PUSH
20014: LD_INT 1
20016: ST_TO_ADDR
// wait ( 0 0$1 ) ;
20017: LD_INT 35
20019: PPUSH
20020: CALL_OW 67
// p := p + 1 ;
20024: LD_ADDR_VAR 0 1
20028: PUSH
20029: LD_VAR 0 1
20033: PUSH
20034: LD_INT 1
20036: PLUS
20037: ST_TO_ADDR
// until p >= 60 ;
20038: LD_VAR 0 1
20042: PUSH
20043: LD_INT 60
20045: GREATEREQUAL
20046: IFFALSE 20009
// game_speed := 4 ;
20048: LD_ADDR_OWVAR 65
20052: PUSH
20053: LD_INT 4
20055: ST_TO_ADDR
// end ;
20056: PPOPN 1
20058: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
20059: LD_EXP 40
20063: PUSH
20064: LD_EXP 67
20068: AND
20069: IFFALSE 20215
20071: GO 20073
20073: DISABLE
20074: LD_INT 0
20076: PPUSH
20077: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20078: LD_ADDR_VAR 0 1
20082: PUSH
20083: LD_INT 22
20085: PUSH
20086: LD_OWVAR 2
20090: PUSH
20091: EMPTY
20092: LIST
20093: LIST
20094: PUSH
20095: LD_INT 2
20097: PUSH
20098: LD_INT 30
20100: PUSH
20101: LD_INT 0
20103: PUSH
20104: EMPTY
20105: LIST
20106: LIST
20107: PUSH
20108: LD_INT 30
20110: PUSH
20111: LD_INT 1
20113: PUSH
20114: EMPTY
20115: LIST
20116: LIST
20117: PUSH
20118: EMPTY
20119: LIST
20120: LIST
20121: LIST
20122: PUSH
20123: EMPTY
20124: LIST
20125: LIST
20126: PPUSH
20127: CALL_OW 69
20131: ST_TO_ADDR
// if not depot then
20132: LD_VAR 0 1
20136: NOT
20137: IFFALSE 20141
// exit ;
20139: GO 20215
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
20141: LD_ADDR_VAR 0 2
20145: PUSH
20146: LD_VAR 0 1
20150: PUSH
20151: LD_INT 1
20153: PPUSH
20154: LD_VAR 0 1
20158: PPUSH
20159: CALL_OW 12
20163: ARRAY
20164: PPUSH
20165: CALL_OW 274
20169: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
20170: LD_VAR 0 2
20174: PPUSH
20175: LD_INT 1
20177: PPUSH
20178: LD_INT 0
20180: PPUSH
20181: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
20185: LD_VAR 0 2
20189: PPUSH
20190: LD_INT 2
20192: PPUSH
20193: LD_INT 0
20195: PPUSH
20196: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
20200: LD_VAR 0 2
20204: PPUSH
20205: LD_INT 3
20207: PPUSH
20208: LD_INT 0
20210: PPUSH
20211: CALL_OW 277
// end ;
20215: PPOPN 2
20217: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
20218: LD_EXP 40
20222: PUSH
20223: LD_EXP 68
20227: AND
20228: IFFALSE 20325
20230: GO 20232
20232: DISABLE
20233: LD_INT 0
20235: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20236: LD_ADDR_VAR 0 1
20240: PUSH
20241: LD_INT 22
20243: PUSH
20244: LD_OWVAR 2
20248: PUSH
20249: EMPTY
20250: LIST
20251: LIST
20252: PUSH
20253: LD_INT 21
20255: PUSH
20256: LD_INT 1
20258: PUSH
20259: EMPTY
20260: LIST
20261: LIST
20262: PUSH
20263: LD_INT 3
20265: PUSH
20266: LD_INT 23
20268: PUSH
20269: LD_INT 0
20271: PUSH
20272: EMPTY
20273: LIST
20274: LIST
20275: PUSH
20276: EMPTY
20277: LIST
20278: LIST
20279: PUSH
20280: EMPTY
20281: LIST
20282: LIST
20283: LIST
20284: PPUSH
20285: CALL_OW 69
20289: ST_TO_ADDR
// if not tmp then
20290: LD_VAR 0 1
20294: NOT
20295: IFFALSE 20299
// exit ;
20297: GO 20325
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
20299: LD_VAR 0 1
20303: PUSH
20304: LD_INT 1
20306: PPUSH
20307: LD_VAR 0 1
20311: PPUSH
20312: CALL_OW 12
20316: ARRAY
20317: PPUSH
20318: LD_INT 200
20320: PPUSH
20321: CALL_OW 234
// end ;
20325: PPOPN 1
20327: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
20328: LD_EXP 40
20332: PUSH
20333: LD_EXP 69
20337: AND
20338: IFFALSE 20417
20340: GO 20342
20342: DISABLE
20343: LD_INT 0
20345: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
20346: LD_ADDR_VAR 0 1
20350: PUSH
20351: LD_INT 22
20353: PUSH
20354: LD_OWVAR 2
20358: PUSH
20359: EMPTY
20360: LIST
20361: LIST
20362: PUSH
20363: LD_INT 21
20365: PUSH
20366: LD_INT 2
20368: PUSH
20369: EMPTY
20370: LIST
20371: LIST
20372: PUSH
20373: EMPTY
20374: LIST
20375: LIST
20376: PPUSH
20377: CALL_OW 69
20381: ST_TO_ADDR
// if not tmp then
20382: LD_VAR 0 1
20386: NOT
20387: IFFALSE 20391
// exit ;
20389: GO 20417
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
20391: LD_VAR 0 1
20395: PUSH
20396: LD_INT 1
20398: PPUSH
20399: LD_VAR 0 1
20403: PPUSH
20404: CALL_OW 12
20408: ARRAY
20409: PPUSH
20410: LD_INT 60
20412: PPUSH
20413: CALL_OW 234
// end ;
20417: PPOPN 1
20419: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
20420: LD_EXP 40
20424: PUSH
20425: LD_EXP 70
20429: AND
20430: IFFALSE 20529
20432: GO 20434
20434: DISABLE
20435: LD_INT 0
20437: PPUSH
20438: PPUSH
// begin enable ;
20439: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
20440: LD_ADDR_VAR 0 1
20444: PUSH
20445: LD_INT 22
20447: PUSH
20448: LD_OWVAR 2
20452: PUSH
20453: EMPTY
20454: LIST
20455: LIST
20456: PUSH
20457: LD_INT 61
20459: PUSH
20460: EMPTY
20461: LIST
20462: PUSH
20463: LD_INT 33
20465: PUSH
20466: LD_INT 2
20468: PUSH
20469: EMPTY
20470: LIST
20471: LIST
20472: PUSH
20473: EMPTY
20474: LIST
20475: LIST
20476: LIST
20477: PPUSH
20478: CALL_OW 69
20482: ST_TO_ADDR
// if not tmp then
20483: LD_VAR 0 1
20487: NOT
20488: IFFALSE 20492
// exit ;
20490: GO 20529
// for i in tmp do
20492: LD_ADDR_VAR 0 2
20496: PUSH
20497: LD_VAR 0 1
20501: PUSH
20502: FOR_IN
20503: IFFALSE 20527
// if IsControledBy ( i ) then
20505: LD_VAR 0 2
20509: PPUSH
20510: CALL_OW 312
20514: IFFALSE 20525
// ComUnlink ( i ) ;
20516: LD_VAR 0 2
20520: PPUSH
20521: CALL_OW 136
20525: GO 20502
20527: POP
20528: POP
// end ;
20529: PPOPN 2
20531: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
20532: LD_EXP 40
20536: PUSH
20537: LD_EXP 71
20541: AND
20542: IFFALSE 20682
20544: GO 20546
20546: DISABLE
20547: LD_INT 0
20549: PPUSH
20550: PPUSH
// begin ToLua ( displayPowell(); ) ;
20551: LD_STRING displayPowell();
20553: PPUSH
20554: CALL_OW 559
// uc_side := 0 ;
20558: LD_ADDR_OWVAR 20
20562: PUSH
20563: LD_INT 0
20565: ST_TO_ADDR
// uc_nation := 2 ;
20566: LD_ADDR_OWVAR 21
20570: PUSH
20571: LD_INT 2
20573: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
20574: LD_ADDR_OWVAR 37
20578: PUSH
20579: LD_INT 14
20581: ST_TO_ADDR
// vc_engine := engine_siberite ;
20582: LD_ADDR_OWVAR 39
20586: PUSH
20587: LD_INT 3
20589: ST_TO_ADDR
// vc_control := control_apeman ;
20590: LD_ADDR_OWVAR 38
20594: PUSH
20595: LD_INT 5
20597: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
20598: LD_ADDR_OWVAR 40
20602: PUSH
20603: LD_INT 29
20605: ST_TO_ADDR
// un := CreateVehicle ;
20606: LD_ADDR_VAR 0 2
20610: PUSH
20611: CALL_OW 45
20615: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20616: LD_VAR 0 2
20620: PPUSH
20621: LD_INT 1
20623: PPUSH
20624: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20628: LD_INT 35
20630: PPUSH
20631: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20635: LD_VAR 0 2
20639: PPUSH
20640: LD_INT 22
20642: PUSH
20643: LD_OWVAR 2
20647: PUSH
20648: EMPTY
20649: LIST
20650: LIST
20651: PPUSH
20652: CALL_OW 69
20656: PPUSH
20657: LD_VAR 0 2
20661: PPUSH
20662: CALL_OW 74
20666: PPUSH
20667: CALL_OW 115
// until IsDead ( un ) ;
20671: LD_VAR 0 2
20675: PPUSH
20676: CALL_OW 301
20680: IFFALSE 20628
// end ;
20682: PPOPN 2
20684: END
// every 0 0$1 trigger StreamModeActive and sStu do
20685: LD_EXP 40
20689: PUSH
20690: LD_EXP 79
20694: AND
20695: IFFALSE 20711
20697: GO 20699
20699: DISABLE
// begin ToLua ( displayStucuk(); ) ;
20700: LD_STRING displayStucuk();
20702: PPUSH
20703: CALL_OW 559
// ResetFog ;
20707: CALL_OW 335
// end ;
20711: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
20712: LD_EXP 40
20716: PUSH
20717: LD_EXP 72
20721: AND
20722: IFFALSE 20863
20724: GO 20726
20726: DISABLE
20727: LD_INT 0
20729: PPUSH
20730: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20731: LD_ADDR_VAR 0 2
20735: PUSH
20736: LD_INT 22
20738: PUSH
20739: LD_OWVAR 2
20743: PUSH
20744: EMPTY
20745: LIST
20746: LIST
20747: PUSH
20748: LD_INT 21
20750: PUSH
20751: LD_INT 1
20753: PUSH
20754: EMPTY
20755: LIST
20756: LIST
20757: PUSH
20758: EMPTY
20759: LIST
20760: LIST
20761: PPUSH
20762: CALL_OW 69
20766: ST_TO_ADDR
// if not tmp then
20767: LD_VAR 0 2
20771: NOT
20772: IFFALSE 20776
// exit ;
20774: GO 20863
// un := tmp [ rand ( 1 , tmp ) ] ;
20776: LD_ADDR_VAR 0 1
20780: PUSH
20781: LD_VAR 0 2
20785: PUSH
20786: LD_INT 1
20788: PPUSH
20789: LD_VAR 0 2
20793: PPUSH
20794: CALL_OW 12
20798: ARRAY
20799: ST_TO_ADDR
// SetSide ( un , 0 ) ;
20800: LD_VAR 0 1
20804: PPUSH
20805: LD_INT 0
20807: PPUSH
20808: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
20812: LD_VAR 0 1
20816: PPUSH
20817: LD_OWVAR 3
20821: PUSH
20822: LD_VAR 0 1
20826: DIFF
20827: PPUSH
20828: LD_VAR 0 1
20832: PPUSH
20833: CALL_OW 74
20837: PPUSH
20838: CALL_OW 115
// wait ( 0 0$20 ) ;
20842: LD_INT 700
20844: PPUSH
20845: CALL_OW 67
// SetSide ( un , your_side ) ;
20849: LD_VAR 0 1
20853: PPUSH
20854: LD_OWVAR 2
20858: PPUSH
20859: CALL_OW 235
// end ;
20863: PPOPN 2
20865: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
20866: LD_EXP 40
20870: PUSH
20871: LD_EXP 73
20875: AND
20876: IFFALSE 20982
20878: GO 20880
20880: DISABLE
20881: LD_INT 0
20883: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20884: LD_ADDR_VAR 0 1
20888: PUSH
20889: LD_INT 22
20891: PUSH
20892: LD_OWVAR 2
20896: PUSH
20897: EMPTY
20898: LIST
20899: LIST
20900: PUSH
20901: LD_INT 2
20903: PUSH
20904: LD_INT 30
20906: PUSH
20907: LD_INT 0
20909: PUSH
20910: EMPTY
20911: LIST
20912: LIST
20913: PUSH
20914: LD_INT 30
20916: PUSH
20917: LD_INT 1
20919: PUSH
20920: EMPTY
20921: LIST
20922: LIST
20923: PUSH
20924: EMPTY
20925: LIST
20926: LIST
20927: LIST
20928: PUSH
20929: EMPTY
20930: LIST
20931: LIST
20932: PPUSH
20933: CALL_OW 69
20937: ST_TO_ADDR
// if not depot then
20938: LD_VAR 0 1
20942: NOT
20943: IFFALSE 20947
// exit ;
20945: GO 20982
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
20947: LD_VAR 0 1
20951: PUSH
20952: LD_INT 1
20954: ARRAY
20955: PPUSH
20956: CALL_OW 250
20960: PPUSH
20961: LD_VAR 0 1
20965: PUSH
20966: LD_INT 1
20968: ARRAY
20969: PPUSH
20970: CALL_OW 251
20974: PPUSH
20975: LD_INT 70
20977: PPUSH
20978: CALL_OW 495
// end ;
20982: PPOPN 1
20984: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
20985: LD_EXP 40
20989: PUSH
20990: LD_EXP 74
20994: AND
20995: IFFALSE 21206
20997: GO 20999
20999: DISABLE
21000: LD_INT 0
21002: PPUSH
21003: PPUSH
21004: PPUSH
21005: PPUSH
21006: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
21007: LD_ADDR_VAR 0 5
21011: PUSH
21012: LD_INT 22
21014: PUSH
21015: LD_OWVAR 2
21019: PUSH
21020: EMPTY
21021: LIST
21022: LIST
21023: PUSH
21024: LD_INT 21
21026: PUSH
21027: LD_INT 1
21029: PUSH
21030: EMPTY
21031: LIST
21032: LIST
21033: PUSH
21034: EMPTY
21035: LIST
21036: LIST
21037: PPUSH
21038: CALL_OW 69
21042: ST_TO_ADDR
// if not tmp then
21043: LD_VAR 0 5
21047: NOT
21048: IFFALSE 21052
// exit ;
21050: GO 21206
// for i in tmp do
21052: LD_ADDR_VAR 0 1
21056: PUSH
21057: LD_VAR 0 5
21061: PUSH
21062: FOR_IN
21063: IFFALSE 21204
// begin d := rand ( 0 , 5 ) ;
21065: LD_ADDR_VAR 0 4
21069: PUSH
21070: LD_INT 0
21072: PPUSH
21073: LD_INT 5
21075: PPUSH
21076: CALL_OW 12
21080: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
21081: LD_ADDR_VAR 0 2
21085: PUSH
21086: LD_VAR 0 1
21090: PPUSH
21091: CALL_OW 250
21095: PPUSH
21096: LD_VAR 0 4
21100: PPUSH
21101: LD_INT 3
21103: PPUSH
21104: LD_INT 12
21106: PPUSH
21107: CALL_OW 12
21111: PPUSH
21112: CALL_OW 272
21116: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
21117: LD_ADDR_VAR 0 3
21121: PUSH
21122: LD_VAR 0 1
21126: PPUSH
21127: CALL_OW 251
21131: PPUSH
21132: LD_VAR 0 4
21136: PPUSH
21137: LD_INT 3
21139: PPUSH
21140: LD_INT 12
21142: PPUSH
21143: CALL_OW 12
21147: PPUSH
21148: CALL_OW 273
21152: ST_TO_ADDR
// if ValidHex ( x , y ) then
21153: LD_VAR 0 2
21157: PPUSH
21158: LD_VAR 0 3
21162: PPUSH
21163: CALL_OW 488
21167: IFFALSE 21202
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
21169: LD_VAR 0 1
21173: PPUSH
21174: LD_VAR 0 2
21178: PPUSH
21179: LD_VAR 0 3
21183: PPUSH
21184: LD_INT 3
21186: PPUSH
21187: LD_INT 6
21189: PPUSH
21190: CALL_OW 12
21194: PPUSH
21195: LD_INT 1
21197: PPUSH
21198: CALL_OW 483
// end ;
21202: GO 21062
21204: POP
21205: POP
// end ;
21206: PPOPN 5
21208: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
21209: LD_EXP 40
21213: PUSH
21214: LD_EXP 75
21218: AND
21219: IFFALSE 21313
21221: GO 21223
21223: DISABLE
21224: LD_INT 0
21226: PPUSH
21227: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
21228: LD_ADDR_VAR 0 2
21232: PUSH
21233: LD_INT 22
21235: PUSH
21236: LD_OWVAR 2
21240: PUSH
21241: EMPTY
21242: LIST
21243: LIST
21244: PUSH
21245: LD_INT 32
21247: PUSH
21248: LD_INT 1
21250: PUSH
21251: EMPTY
21252: LIST
21253: LIST
21254: PUSH
21255: LD_INT 21
21257: PUSH
21258: LD_INT 2
21260: PUSH
21261: EMPTY
21262: LIST
21263: LIST
21264: PUSH
21265: EMPTY
21266: LIST
21267: LIST
21268: LIST
21269: PPUSH
21270: CALL_OW 69
21274: ST_TO_ADDR
// if not tmp then
21275: LD_VAR 0 2
21279: NOT
21280: IFFALSE 21284
// exit ;
21282: GO 21313
// for i in tmp do
21284: LD_ADDR_VAR 0 1
21288: PUSH
21289: LD_VAR 0 2
21293: PUSH
21294: FOR_IN
21295: IFFALSE 21311
// SetFuel ( i , 0 ) ;
21297: LD_VAR 0 1
21301: PPUSH
21302: LD_INT 0
21304: PPUSH
21305: CALL_OW 240
21309: GO 21294
21311: POP
21312: POP
// end ;
21313: PPOPN 2
21315: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
21316: LD_EXP 40
21320: PUSH
21321: LD_EXP 76
21325: AND
21326: IFFALSE 21392
21328: GO 21330
21330: DISABLE
21331: LD_INT 0
21333: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
21334: LD_ADDR_VAR 0 1
21338: PUSH
21339: LD_INT 22
21341: PUSH
21342: LD_OWVAR 2
21346: PUSH
21347: EMPTY
21348: LIST
21349: LIST
21350: PUSH
21351: LD_INT 30
21353: PUSH
21354: LD_INT 29
21356: PUSH
21357: EMPTY
21358: LIST
21359: LIST
21360: PUSH
21361: EMPTY
21362: LIST
21363: LIST
21364: PPUSH
21365: CALL_OW 69
21369: ST_TO_ADDR
// if not tmp then
21370: LD_VAR 0 1
21374: NOT
21375: IFFALSE 21379
// exit ;
21377: GO 21392
// DestroyUnit ( tmp [ 1 ] ) ;
21379: LD_VAR 0 1
21383: PUSH
21384: LD_INT 1
21386: ARRAY
21387: PPUSH
21388: CALL_OW 65
// end ;
21392: PPOPN 1
21394: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
21395: LD_EXP 40
21399: PUSH
21400: LD_EXP 78
21404: AND
21405: IFFALSE 21534
21407: GO 21409
21409: DISABLE
21410: LD_INT 0
21412: PPUSH
// begin uc_side := 0 ;
21413: LD_ADDR_OWVAR 20
21417: PUSH
21418: LD_INT 0
21420: ST_TO_ADDR
// uc_nation := nation_arabian ;
21421: LD_ADDR_OWVAR 21
21425: PUSH
21426: LD_INT 2
21428: ST_TO_ADDR
// hc_gallery :=  ;
21429: LD_ADDR_OWVAR 33
21433: PUSH
21434: LD_STRING 
21436: ST_TO_ADDR
// hc_name :=  ;
21437: LD_ADDR_OWVAR 26
21441: PUSH
21442: LD_STRING 
21444: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
21445: LD_INT 1
21447: PPUSH
21448: LD_INT 11
21450: PPUSH
21451: LD_INT 10
21453: PPUSH
21454: CALL_OW 380
// un := CreateHuman ;
21458: LD_ADDR_VAR 0 1
21462: PUSH
21463: CALL_OW 44
21467: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21468: LD_VAR 0 1
21472: PPUSH
21473: LD_INT 1
21475: PPUSH
21476: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
21480: LD_INT 35
21482: PPUSH
21483: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
21487: LD_VAR 0 1
21491: PPUSH
21492: LD_INT 22
21494: PUSH
21495: LD_OWVAR 2
21499: PUSH
21500: EMPTY
21501: LIST
21502: LIST
21503: PPUSH
21504: CALL_OW 69
21508: PPUSH
21509: LD_VAR 0 1
21513: PPUSH
21514: CALL_OW 74
21518: PPUSH
21519: CALL_OW 115
// until IsDead ( un ) ;
21523: LD_VAR 0 1
21527: PPUSH
21528: CALL_OW 301
21532: IFFALSE 21480
// end ;
21534: PPOPN 1
21536: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
21537: LD_EXP 40
21541: PUSH
21542: LD_EXP 80
21546: AND
21547: IFFALSE 21559
21549: GO 21551
21551: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
21552: LD_STRING earthquake(getX(game), 0, 32)
21554: PPUSH
21555: CALL_OW 559
21559: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
21560: LD_EXP 40
21564: PUSH
21565: LD_EXP 81
21569: AND
21570: IFFALSE 21661
21572: GO 21574
21574: DISABLE
21575: LD_INT 0
21577: PPUSH
// begin enable ;
21578: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
21579: LD_ADDR_VAR 0 1
21583: PUSH
21584: LD_INT 22
21586: PUSH
21587: LD_OWVAR 2
21591: PUSH
21592: EMPTY
21593: LIST
21594: LIST
21595: PUSH
21596: LD_INT 21
21598: PUSH
21599: LD_INT 2
21601: PUSH
21602: EMPTY
21603: LIST
21604: LIST
21605: PUSH
21606: LD_INT 33
21608: PUSH
21609: LD_INT 3
21611: PUSH
21612: EMPTY
21613: LIST
21614: LIST
21615: PUSH
21616: EMPTY
21617: LIST
21618: LIST
21619: LIST
21620: PPUSH
21621: CALL_OW 69
21625: ST_TO_ADDR
// if not tmp then
21626: LD_VAR 0 1
21630: NOT
21631: IFFALSE 21635
// exit ;
21633: GO 21661
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21635: LD_VAR 0 1
21639: PUSH
21640: LD_INT 1
21642: PPUSH
21643: LD_VAR 0 1
21647: PPUSH
21648: CALL_OW 12
21652: ARRAY
21653: PPUSH
21654: LD_INT 1
21656: PPUSH
21657: CALL_OW 234
// end ;
21661: PPOPN 1
21663: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
21664: LD_EXP 40
21668: PUSH
21669: LD_EXP 82
21673: AND
21674: IFFALSE 21815
21676: GO 21678
21678: DISABLE
21679: LD_INT 0
21681: PPUSH
21682: PPUSH
21683: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21684: LD_ADDR_VAR 0 3
21688: PUSH
21689: LD_INT 22
21691: PUSH
21692: LD_OWVAR 2
21696: PUSH
21697: EMPTY
21698: LIST
21699: LIST
21700: PUSH
21701: LD_INT 25
21703: PUSH
21704: LD_INT 1
21706: PUSH
21707: EMPTY
21708: LIST
21709: LIST
21710: PUSH
21711: EMPTY
21712: LIST
21713: LIST
21714: PPUSH
21715: CALL_OW 69
21719: ST_TO_ADDR
// if not tmp then
21720: LD_VAR 0 3
21724: NOT
21725: IFFALSE 21729
// exit ;
21727: GO 21815
// un := tmp [ rand ( 1 , tmp ) ] ;
21729: LD_ADDR_VAR 0 2
21733: PUSH
21734: LD_VAR 0 3
21738: PUSH
21739: LD_INT 1
21741: PPUSH
21742: LD_VAR 0 3
21746: PPUSH
21747: CALL_OW 12
21751: ARRAY
21752: ST_TO_ADDR
// if Crawls ( un ) then
21753: LD_VAR 0 2
21757: PPUSH
21758: CALL_OW 318
21762: IFFALSE 21773
// ComWalk ( un ) ;
21764: LD_VAR 0 2
21768: PPUSH
21769: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
21773: LD_VAR 0 2
21777: PPUSH
21778: LD_INT 9
21780: PPUSH
21781: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
21785: LD_INT 28
21787: PPUSH
21788: LD_OWVAR 2
21792: PPUSH
21793: LD_INT 2
21795: PPUSH
21796: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
21800: LD_INT 29
21802: PPUSH
21803: LD_OWVAR 2
21807: PPUSH
21808: LD_INT 2
21810: PPUSH
21811: CALL_OW 322
// end ;
21815: PPOPN 3
21817: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
21818: LD_EXP 40
21822: PUSH
21823: LD_EXP 83
21827: AND
21828: IFFALSE 21939
21830: GO 21832
21832: DISABLE
21833: LD_INT 0
21835: PPUSH
21836: PPUSH
21837: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21838: LD_ADDR_VAR 0 3
21842: PUSH
21843: LD_INT 22
21845: PUSH
21846: LD_OWVAR 2
21850: PUSH
21851: EMPTY
21852: LIST
21853: LIST
21854: PUSH
21855: LD_INT 25
21857: PUSH
21858: LD_INT 1
21860: PUSH
21861: EMPTY
21862: LIST
21863: LIST
21864: PUSH
21865: EMPTY
21866: LIST
21867: LIST
21868: PPUSH
21869: CALL_OW 69
21873: ST_TO_ADDR
// if not tmp then
21874: LD_VAR 0 3
21878: NOT
21879: IFFALSE 21883
// exit ;
21881: GO 21939
// un := tmp [ rand ( 1 , tmp ) ] ;
21883: LD_ADDR_VAR 0 2
21887: PUSH
21888: LD_VAR 0 3
21892: PUSH
21893: LD_INT 1
21895: PPUSH
21896: LD_VAR 0 3
21900: PPUSH
21901: CALL_OW 12
21905: ARRAY
21906: ST_TO_ADDR
// if Crawls ( un ) then
21907: LD_VAR 0 2
21911: PPUSH
21912: CALL_OW 318
21916: IFFALSE 21927
// ComWalk ( un ) ;
21918: LD_VAR 0 2
21922: PPUSH
21923: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21927: LD_VAR 0 2
21931: PPUSH
21932: LD_INT 8
21934: PPUSH
21935: CALL_OW 336
// end ;
21939: PPOPN 3
21941: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
21942: LD_EXP 40
21946: PUSH
21947: LD_EXP 84
21951: AND
21952: IFFALSE 22096
21954: GO 21956
21956: DISABLE
21957: LD_INT 0
21959: PPUSH
21960: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
21961: LD_ADDR_VAR 0 2
21965: PUSH
21966: LD_INT 22
21968: PUSH
21969: LD_OWVAR 2
21973: PUSH
21974: EMPTY
21975: LIST
21976: LIST
21977: PUSH
21978: LD_INT 21
21980: PUSH
21981: LD_INT 2
21983: PUSH
21984: EMPTY
21985: LIST
21986: LIST
21987: PUSH
21988: LD_INT 2
21990: PUSH
21991: LD_INT 34
21993: PUSH
21994: LD_INT 12
21996: PUSH
21997: EMPTY
21998: LIST
21999: LIST
22000: PUSH
22001: LD_INT 34
22003: PUSH
22004: LD_INT 51
22006: PUSH
22007: EMPTY
22008: LIST
22009: LIST
22010: PUSH
22011: LD_INT 34
22013: PUSH
22014: LD_INT 32
22016: PUSH
22017: EMPTY
22018: LIST
22019: LIST
22020: PUSH
22021: EMPTY
22022: LIST
22023: LIST
22024: LIST
22025: LIST
22026: PUSH
22027: EMPTY
22028: LIST
22029: LIST
22030: LIST
22031: PPUSH
22032: CALL_OW 69
22036: ST_TO_ADDR
// if not tmp then
22037: LD_VAR 0 2
22041: NOT
22042: IFFALSE 22046
// exit ;
22044: GO 22096
// for i in tmp do
22046: LD_ADDR_VAR 0 1
22050: PUSH
22051: LD_VAR 0 2
22055: PUSH
22056: FOR_IN
22057: IFFALSE 22094
// if GetCargo ( i , mat_artifact ) = 0 then
22059: LD_VAR 0 1
22063: PPUSH
22064: LD_INT 4
22066: PPUSH
22067: CALL_OW 289
22071: PUSH
22072: LD_INT 0
22074: EQUAL
22075: IFFALSE 22092
// SetCargo ( i , mat_siberit , 100 ) ;
22077: LD_VAR 0 1
22081: PPUSH
22082: LD_INT 3
22084: PPUSH
22085: LD_INT 100
22087: PPUSH
22088: CALL_OW 290
22092: GO 22056
22094: POP
22095: POP
// end ;
22096: PPOPN 2
22098: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
22099: LD_EXP 40
22103: PUSH
22104: LD_EXP 85
22108: AND
22109: IFFALSE 22292
22111: GO 22113
22113: DISABLE
22114: LD_INT 0
22116: PPUSH
22117: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22118: LD_ADDR_VAR 0 2
22122: PUSH
22123: LD_INT 22
22125: PUSH
22126: LD_OWVAR 2
22130: PUSH
22131: EMPTY
22132: LIST
22133: LIST
22134: PPUSH
22135: CALL_OW 69
22139: ST_TO_ADDR
// if not tmp then
22140: LD_VAR 0 2
22144: NOT
22145: IFFALSE 22149
// exit ;
22147: GO 22292
// for i := 1 to 2 do
22149: LD_ADDR_VAR 0 1
22153: PUSH
22154: DOUBLE
22155: LD_INT 1
22157: DEC
22158: ST_TO_ADDR
22159: LD_INT 2
22161: PUSH
22162: FOR_TO
22163: IFFALSE 22290
// begin uc_side := your_side ;
22165: LD_ADDR_OWVAR 20
22169: PUSH
22170: LD_OWVAR 2
22174: ST_TO_ADDR
// uc_nation := nation_american ;
22175: LD_ADDR_OWVAR 21
22179: PUSH
22180: LD_INT 1
22182: ST_TO_ADDR
// vc_chassis := us_morphling ;
22183: LD_ADDR_OWVAR 37
22187: PUSH
22188: LD_INT 5
22190: ST_TO_ADDR
// vc_engine := engine_siberite ;
22191: LD_ADDR_OWVAR 39
22195: PUSH
22196: LD_INT 3
22198: ST_TO_ADDR
// vc_control := control_computer ;
22199: LD_ADDR_OWVAR 38
22203: PUSH
22204: LD_INT 3
22206: ST_TO_ADDR
// vc_weapon := us_double_laser ;
22207: LD_ADDR_OWVAR 40
22211: PUSH
22212: LD_INT 10
22214: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
22215: LD_VAR 0 2
22219: PUSH
22220: LD_INT 1
22222: ARRAY
22223: PPUSH
22224: CALL_OW 310
22228: NOT
22229: IFFALSE 22276
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
22231: CALL_OW 45
22235: PPUSH
22236: LD_VAR 0 2
22240: PUSH
22241: LD_INT 1
22243: ARRAY
22244: PPUSH
22245: CALL_OW 250
22249: PPUSH
22250: LD_VAR 0 2
22254: PUSH
22255: LD_INT 1
22257: ARRAY
22258: PPUSH
22259: CALL_OW 251
22263: PPUSH
22264: LD_INT 12
22266: PPUSH
22267: LD_INT 1
22269: PPUSH
22270: CALL_OW 50
22274: GO 22288
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
22276: CALL_OW 45
22280: PPUSH
22281: LD_INT 1
22283: PPUSH
22284: CALL_OW 51
// end ;
22288: GO 22162
22290: POP
22291: POP
// end ;
22292: PPOPN 2
22294: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
22295: LD_EXP 40
22299: PUSH
22300: LD_EXP 86
22304: AND
22305: IFFALSE 22527
22307: GO 22309
22309: DISABLE
22310: LD_INT 0
22312: PPUSH
22313: PPUSH
22314: PPUSH
22315: PPUSH
22316: PPUSH
22317: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22318: LD_ADDR_VAR 0 6
22322: PUSH
22323: LD_INT 22
22325: PUSH
22326: LD_OWVAR 2
22330: PUSH
22331: EMPTY
22332: LIST
22333: LIST
22334: PUSH
22335: LD_INT 21
22337: PUSH
22338: LD_INT 1
22340: PUSH
22341: EMPTY
22342: LIST
22343: LIST
22344: PUSH
22345: LD_INT 3
22347: PUSH
22348: LD_INT 23
22350: PUSH
22351: LD_INT 0
22353: PUSH
22354: EMPTY
22355: LIST
22356: LIST
22357: PUSH
22358: EMPTY
22359: LIST
22360: LIST
22361: PUSH
22362: EMPTY
22363: LIST
22364: LIST
22365: LIST
22366: PPUSH
22367: CALL_OW 69
22371: ST_TO_ADDR
// if not tmp then
22372: LD_VAR 0 6
22376: NOT
22377: IFFALSE 22381
// exit ;
22379: GO 22527
// s1 := rand ( 1 , 4 ) ;
22381: LD_ADDR_VAR 0 2
22385: PUSH
22386: LD_INT 1
22388: PPUSH
22389: LD_INT 4
22391: PPUSH
22392: CALL_OW 12
22396: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
22397: LD_ADDR_VAR 0 4
22401: PUSH
22402: LD_VAR 0 6
22406: PUSH
22407: LD_INT 1
22409: ARRAY
22410: PPUSH
22411: LD_VAR 0 2
22415: PPUSH
22416: CALL_OW 259
22420: ST_TO_ADDR
// if s1 = 1 then
22421: LD_VAR 0 2
22425: PUSH
22426: LD_INT 1
22428: EQUAL
22429: IFFALSE 22449
// s2 := rand ( 2 , 4 ) else
22431: LD_ADDR_VAR 0 3
22435: PUSH
22436: LD_INT 2
22438: PPUSH
22439: LD_INT 4
22441: PPUSH
22442: CALL_OW 12
22446: ST_TO_ADDR
22447: GO 22457
// s2 := 1 ;
22449: LD_ADDR_VAR 0 3
22453: PUSH
22454: LD_INT 1
22456: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
22457: LD_ADDR_VAR 0 5
22461: PUSH
22462: LD_VAR 0 6
22466: PUSH
22467: LD_INT 1
22469: ARRAY
22470: PPUSH
22471: LD_VAR 0 3
22475: PPUSH
22476: CALL_OW 259
22480: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
22481: LD_VAR 0 6
22485: PUSH
22486: LD_INT 1
22488: ARRAY
22489: PPUSH
22490: LD_VAR 0 2
22494: PPUSH
22495: LD_VAR 0 5
22499: PPUSH
22500: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
22504: LD_VAR 0 6
22508: PUSH
22509: LD_INT 1
22511: ARRAY
22512: PPUSH
22513: LD_VAR 0 3
22517: PPUSH
22518: LD_VAR 0 4
22522: PPUSH
22523: CALL_OW 237
// end ;
22527: PPOPN 6
22529: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
22530: LD_EXP 40
22534: PUSH
22535: LD_EXP 87
22539: AND
22540: IFFALSE 22619
22542: GO 22544
22544: DISABLE
22545: LD_INT 0
22547: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
22548: LD_ADDR_VAR 0 1
22552: PUSH
22553: LD_INT 22
22555: PUSH
22556: LD_OWVAR 2
22560: PUSH
22561: EMPTY
22562: LIST
22563: LIST
22564: PUSH
22565: LD_INT 30
22567: PUSH
22568: LD_INT 3
22570: PUSH
22571: EMPTY
22572: LIST
22573: LIST
22574: PUSH
22575: EMPTY
22576: LIST
22577: LIST
22578: PPUSH
22579: CALL_OW 69
22583: ST_TO_ADDR
// if not tmp then
22584: LD_VAR 0 1
22588: NOT
22589: IFFALSE 22593
// exit ;
22591: GO 22619
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
22593: LD_VAR 0 1
22597: PUSH
22598: LD_INT 1
22600: PPUSH
22601: LD_VAR 0 1
22605: PPUSH
22606: CALL_OW 12
22610: ARRAY
22611: PPUSH
22612: LD_INT 1
22614: PPUSH
22615: CALL_OW 234
// end ;
22619: PPOPN 1
22621: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
22622: LD_EXP 40
22626: PUSH
22627: LD_EXP 88
22631: AND
22632: IFFALSE 22744
22634: GO 22636
22636: DISABLE
22637: LD_INT 0
22639: PPUSH
22640: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
22641: LD_ADDR_VAR 0 2
22645: PUSH
22646: LD_INT 22
22648: PUSH
22649: LD_OWVAR 2
22653: PUSH
22654: EMPTY
22655: LIST
22656: LIST
22657: PUSH
22658: LD_INT 2
22660: PUSH
22661: LD_INT 30
22663: PUSH
22664: LD_INT 27
22666: PUSH
22667: EMPTY
22668: LIST
22669: LIST
22670: PUSH
22671: LD_INT 30
22673: PUSH
22674: LD_INT 26
22676: PUSH
22677: EMPTY
22678: LIST
22679: LIST
22680: PUSH
22681: LD_INT 30
22683: PUSH
22684: LD_INT 28
22686: PUSH
22687: EMPTY
22688: LIST
22689: LIST
22690: PUSH
22691: EMPTY
22692: LIST
22693: LIST
22694: LIST
22695: LIST
22696: PUSH
22697: EMPTY
22698: LIST
22699: LIST
22700: PPUSH
22701: CALL_OW 69
22705: ST_TO_ADDR
// if not tmp then
22706: LD_VAR 0 2
22710: NOT
22711: IFFALSE 22715
// exit ;
22713: GO 22744
// for i in tmp do
22715: LD_ADDR_VAR 0 1
22719: PUSH
22720: LD_VAR 0 2
22724: PUSH
22725: FOR_IN
22726: IFFALSE 22742
// SetLives ( i , 1 ) ;
22728: LD_VAR 0 1
22732: PPUSH
22733: LD_INT 1
22735: PPUSH
22736: CALL_OW 234
22740: GO 22725
22742: POP
22743: POP
// end ;
22744: PPOPN 2
22746: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
22747: LD_EXP 40
22751: PUSH
22752: LD_EXP 89
22756: AND
22757: IFFALSE 23044
22759: GO 22761
22761: DISABLE
22762: LD_INT 0
22764: PPUSH
22765: PPUSH
22766: PPUSH
// begin i := rand ( 1 , 7 ) ;
22767: LD_ADDR_VAR 0 1
22771: PUSH
22772: LD_INT 1
22774: PPUSH
22775: LD_INT 7
22777: PPUSH
22778: CALL_OW 12
22782: ST_TO_ADDR
// case i of 1 :
22783: LD_VAR 0 1
22787: PUSH
22788: LD_INT 1
22790: DOUBLE
22791: EQUAL
22792: IFTRUE 22796
22794: GO 22806
22796: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
22797: LD_STRING earthquake(getX(game), 0, 32)
22799: PPUSH
22800: CALL_OW 559
22804: GO 23044
22806: LD_INT 2
22808: DOUBLE
22809: EQUAL
22810: IFTRUE 22814
22812: GO 22828
22814: POP
// begin ToLua ( displayStucuk(); ) ;
22815: LD_STRING displayStucuk();
22817: PPUSH
22818: CALL_OW 559
// ResetFog ;
22822: CALL_OW 335
// end ; 3 :
22826: GO 23044
22828: LD_INT 3
22830: DOUBLE
22831: EQUAL
22832: IFTRUE 22836
22834: GO 22940
22836: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22837: LD_ADDR_VAR 0 2
22841: PUSH
22842: LD_INT 22
22844: PUSH
22845: LD_OWVAR 2
22849: PUSH
22850: EMPTY
22851: LIST
22852: LIST
22853: PUSH
22854: LD_INT 25
22856: PUSH
22857: LD_INT 1
22859: PUSH
22860: EMPTY
22861: LIST
22862: LIST
22863: PUSH
22864: EMPTY
22865: LIST
22866: LIST
22867: PPUSH
22868: CALL_OW 69
22872: ST_TO_ADDR
// if not tmp then
22873: LD_VAR 0 2
22877: NOT
22878: IFFALSE 22882
// exit ;
22880: GO 23044
// un := tmp [ rand ( 1 , tmp ) ] ;
22882: LD_ADDR_VAR 0 3
22886: PUSH
22887: LD_VAR 0 2
22891: PUSH
22892: LD_INT 1
22894: PPUSH
22895: LD_VAR 0 2
22899: PPUSH
22900: CALL_OW 12
22904: ARRAY
22905: ST_TO_ADDR
// if Crawls ( un ) then
22906: LD_VAR 0 3
22910: PPUSH
22911: CALL_OW 318
22915: IFFALSE 22926
// ComWalk ( un ) ;
22917: LD_VAR 0 3
22921: PPUSH
22922: CALL_OW 138
// SetClass ( un , class_mortar ) ;
22926: LD_VAR 0 3
22930: PPUSH
22931: LD_INT 8
22933: PPUSH
22934: CALL_OW 336
// end ; 4 :
22938: GO 23044
22940: LD_INT 4
22942: DOUBLE
22943: EQUAL
22944: IFTRUE 22948
22946: GO 23022
22948: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
22949: LD_ADDR_VAR 0 2
22953: PUSH
22954: LD_INT 22
22956: PUSH
22957: LD_OWVAR 2
22961: PUSH
22962: EMPTY
22963: LIST
22964: LIST
22965: PUSH
22966: LD_INT 30
22968: PUSH
22969: LD_INT 29
22971: PUSH
22972: EMPTY
22973: LIST
22974: LIST
22975: PUSH
22976: EMPTY
22977: LIST
22978: LIST
22979: PPUSH
22980: CALL_OW 69
22984: ST_TO_ADDR
// if not tmp then
22985: LD_VAR 0 2
22989: NOT
22990: IFFALSE 22994
// exit ;
22992: GO 23044
// CenterNowOnUnits ( tmp [ 1 ] ) ;
22994: LD_VAR 0 2
22998: PUSH
22999: LD_INT 1
23001: ARRAY
23002: PPUSH
23003: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
23007: LD_VAR 0 2
23011: PUSH
23012: LD_INT 1
23014: ARRAY
23015: PPUSH
23016: CALL_OW 65
// end ; 5 .. 7 :
23020: GO 23044
23022: LD_INT 5
23024: DOUBLE
23025: GREATEREQUAL
23026: IFFALSE 23034
23028: LD_INT 7
23030: DOUBLE
23031: LESSEQUAL
23032: IFTRUE 23036
23034: GO 23043
23036: POP
// StreamSibBomb ; end ;
23037: CALL 19281 0 0
23041: GO 23044
23043: POP
// end ;
23044: PPOPN 3
23046: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
23047: LD_EXP 40
23051: PUSH
23052: LD_EXP 90
23056: AND
23057: IFFALSE 23213
23059: GO 23061
23061: DISABLE
23062: LD_INT 0
23064: PPUSH
23065: PPUSH
23066: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
23067: LD_ADDR_VAR 0 2
23071: PUSH
23072: LD_INT 81
23074: PUSH
23075: LD_OWVAR 2
23079: PUSH
23080: EMPTY
23081: LIST
23082: LIST
23083: PUSH
23084: LD_INT 2
23086: PUSH
23087: LD_INT 21
23089: PUSH
23090: LD_INT 1
23092: PUSH
23093: EMPTY
23094: LIST
23095: LIST
23096: PUSH
23097: LD_INT 21
23099: PUSH
23100: LD_INT 2
23102: PUSH
23103: EMPTY
23104: LIST
23105: LIST
23106: PUSH
23107: EMPTY
23108: LIST
23109: LIST
23110: LIST
23111: PUSH
23112: EMPTY
23113: LIST
23114: LIST
23115: PPUSH
23116: CALL_OW 69
23120: ST_TO_ADDR
// if not tmp then
23121: LD_VAR 0 2
23125: NOT
23126: IFFALSE 23130
// exit ;
23128: GO 23213
// p := 0 ;
23130: LD_ADDR_VAR 0 3
23134: PUSH
23135: LD_INT 0
23137: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23138: LD_INT 35
23140: PPUSH
23141: CALL_OW 67
// p := p + 1 ;
23145: LD_ADDR_VAR 0 3
23149: PUSH
23150: LD_VAR 0 3
23154: PUSH
23155: LD_INT 1
23157: PLUS
23158: ST_TO_ADDR
// for i in tmp do
23159: LD_ADDR_VAR 0 1
23163: PUSH
23164: LD_VAR 0 2
23168: PUSH
23169: FOR_IN
23170: IFFALSE 23201
// if GetLives ( i ) < 1000 then
23172: LD_VAR 0 1
23176: PPUSH
23177: CALL_OW 256
23181: PUSH
23182: LD_INT 1000
23184: LESS
23185: IFFALSE 23199
// SetLives ( i , 1000 ) ;
23187: LD_VAR 0 1
23191: PPUSH
23192: LD_INT 1000
23194: PPUSH
23195: CALL_OW 234
23199: GO 23169
23201: POP
23202: POP
// until p > 20 ;
23203: LD_VAR 0 3
23207: PUSH
23208: LD_INT 20
23210: GREATER
23211: IFFALSE 23138
// end ;
23213: PPOPN 3
23215: END
// every 0 0$1 trigger StreamModeActive and sTime do
23216: LD_EXP 40
23220: PUSH
23221: LD_EXP 91
23225: AND
23226: IFFALSE 23261
23228: GO 23230
23230: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
23231: LD_INT 28
23233: PPUSH
23234: LD_OWVAR 2
23238: PPUSH
23239: LD_INT 2
23241: PPUSH
23242: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
23246: LD_INT 30
23248: PPUSH
23249: LD_OWVAR 2
23253: PPUSH
23254: LD_INT 2
23256: PPUSH
23257: CALL_OW 322
// end ;
23261: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
23262: LD_EXP 40
23266: PUSH
23267: LD_EXP 92
23271: AND
23272: IFFALSE 23393
23274: GO 23276
23276: DISABLE
23277: LD_INT 0
23279: PPUSH
23280: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
23281: LD_ADDR_VAR 0 2
23285: PUSH
23286: LD_INT 22
23288: PUSH
23289: LD_OWVAR 2
23293: PUSH
23294: EMPTY
23295: LIST
23296: LIST
23297: PUSH
23298: LD_INT 21
23300: PUSH
23301: LD_INT 1
23303: PUSH
23304: EMPTY
23305: LIST
23306: LIST
23307: PUSH
23308: LD_INT 3
23310: PUSH
23311: LD_INT 23
23313: PUSH
23314: LD_INT 0
23316: PUSH
23317: EMPTY
23318: LIST
23319: LIST
23320: PUSH
23321: EMPTY
23322: LIST
23323: LIST
23324: PUSH
23325: EMPTY
23326: LIST
23327: LIST
23328: LIST
23329: PPUSH
23330: CALL_OW 69
23334: ST_TO_ADDR
// if not tmp then
23335: LD_VAR 0 2
23339: NOT
23340: IFFALSE 23344
// exit ;
23342: GO 23393
// for i in tmp do
23344: LD_ADDR_VAR 0 1
23348: PUSH
23349: LD_VAR 0 2
23353: PUSH
23354: FOR_IN
23355: IFFALSE 23391
// begin if Crawls ( i ) then
23357: LD_VAR 0 1
23361: PPUSH
23362: CALL_OW 318
23366: IFFALSE 23377
// ComWalk ( i ) ;
23368: LD_VAR 0 1
23372: PPUSH
23373: CALL_OW 138
// SetClass ( i , 2 ) ;
23377: LD_VAR 0 1
23381: PPUSH
23382: LD_INT 2
23384: PPUSH
23385: CALL_OW 336
// end ;
23389: GO 23354
23391: POP
23392: POP
// end ;
23393: PPOPN 2
23395: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
23396: LD_EXP 40
23400: PUSH
23401: LD_EXP 93
23405: AND
23406: IFFALSE 23694
23408: GO 23410
23410: DISABLE
23411: LD_INT 0
23413: PPUSH
23414: PPUSH
23415: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
23416: LD_OWVAR 2
23420: PPUSH
23421: LD_INT 9
23423: PPUSH
23424: LD_INT 1
23426: PPUSH
23427: LD_INT 1
23429: PPUSH
23430: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
23434: LD_INT 9
23436: PPUSH
23437: LD_OWVAR 2
23441: PPUSH
23442: CALL_OW 343
// uc_side := 9 ;
23446: LD_ADDR_OWVAR 20
23450: PUSH
23451: LD_INT 9
23453: ST_TO_ADDR
// uc_nation := 2 ;
23454: LD_ADDR_OWVAR 21
23458: PUSH
23459: LD_INT 2
23461: ST_TO_ADDR
// hc_name := Dark Warrior ;
23462: LD_ADDR_OWVAR 26
23466: PUSH
23467: LD_STRING Dark Warrior
23469: ST_TO_ADDR
// hc_gallery :=  ;
23470: LD_ADDR_OWVAR 33
23474: PUSH
23475: LD_STRING 
23477: ST_TO_ADDR
// hc_noskilllimit := true ;
23478: LD_ADDR_OWVAR 76
23482: PUSH
23483: LD_INT 1
23485: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
23486: LD_ADDR_OWVAR 31
23490: PUSH
23491: LD_INT 30
23493: PUSH
23494: LD_INT 30
23496: PUSH
23497: LD_INT 30
23499: PUSH
23500: LD_INT 30
23502: PUSH
23503: EMPTY
23504: LIST
23505: LIST
23506: LIST
23507: LIST
23508: ST_TO_ADDR
// un := CreateHuman ;
23509: LD_ADDR_VAR 0 3
23513: PUSH
23514: CALL_OW 44
23518: ST_TO_ADDR
// hc_noskilllimit := false ;
23519: LD_ADDR_OWVAR 76
23523: PUSH
23524: LD_INT 0
23526: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
23527: LD_VAR 0 3
23531: PPUSH
23532: LD_INT 1
23534: PPUSH
23535: CALL_OW 51
// ToLua ( playRanger() ) ;
23539: LD_STRING playRanger()
23541: PPUSH
23542: CALL_OW 559
// p := 0 ;
23546: LD_ADDR_VAR 0 2
23550: PUSH
23551: LD_INT 0
23553: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23554: LD_INT 35
23556: PPUSH
23557: CALL_OW 67
// p := p + 1 ;
23561: LD_ADDR_VAR 0 2
23565: PUSH
23566: LD_VAR 0 2
23570: PUSH
23571: LD_INT 1
23573: PLUS
23574: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
23575: LD_VAR 0 3
23579: PPUSH
23580: CALL_OW 256
23584: PUSH
23585: LD_INT 1000
23587: LESS
23588: IFFALSE 23602
// SetLives ( un , 1000 ) ;
23590: LD_VAR 0 3
23594: PPUSH
23595: LD_INT 1000
23597: PPUSH
23598: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
23602: LD_VAR 0 3
23606: PPUSH
23607: LD_INT 81
23609: PUSH
23610: LD_OWVAR 2
23614: PUSH
23615: EMPTY
23616: LIST
23617: LIST
23618: PUSH
23619: LD_INT 91
23621: PUSH
23622: LD_VAR 0 3
23626: PUSH
23627: LD_INT 30
23629: PUSH
23630: EMPTY
23631: LIST
23632: LIST
23633: LIST
23634: PUSH
23635: EMPTY
23636: LIST
23637: LIST
23638: PPUSH
23639: CALL_OW 69
23643: PPUSH
23644: LD_VAR 0 3
23648: PPUSH
23649: CALL_OW 74
23653: PPUSH
23654: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
23658: LD_VAR 0 2
23662: PUSH
23663: LD_INT 80
23665: GREATER
23666: PUSH
23667: LD_VAR 0 3
23671: PPUSH
23672: CALL_OW 301
23676: OR
23677: IFFALSE 23554
// if un then
23679: LD_VAR 0 3
23683: IFFALSE 23694
// RemoveUnit ( un ) ;
23685: LD_VAR 0 3
23689: PPUSH
23690: CALL_OW 64
// end ;
23694: PPOPN 3
23696: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
23697: LD_EXP 94
23701: IFFALSE 23817
23703: GO 23705
23705: DISABLE
23706: LD_INT 0
23708: PPUSH
23709: PPUSH
23710: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
23711: LD_ADDR_VAR 0 2
23715: PUSH
23716: LD_INT 81
23718: PUSH
23719: LD_OWVAR 2
23723: PUSH
23724: EMPTY
23725: LIST
23726: LIST
23727: PUSH
23728: LD_INT 21
23730: PUSH
23731: LD_INT 1
23733: PUSH
23734: EMPTY
23735: LIST
23736: LIST
23737: PUSH
23738: EMPTY
23739: LIST
23740: LIST
23741: PPUSH
23742: CALL_OW 69
23746: ST_TO_ADDR
// ToLua ( playComputer() ) ;
23747: LD_STRING playComputer()
23749: PPUSH
23750: CALL_OW 559
// if not tmp then
23754: LD_VAR 0 2
23758: NOT
23759: IFFALSE 23763
// exit ;
23761: GO 23817
// for i in tmp do
23763: LD_ADDR_VAR 0 1
23767: PUSH
23768: LD_VAR 0 2
23772: PUSH
23773: FOR_IN
23774: IFFALSE 23815
// for j := 1 to 4 do
23776: LD_ADDR_VAR 0 3
23780: PUSH
23781: DOUBLE
23782: LD_INT 1
23784: DEC
23785: ST_TO_ADDR
23786: LD_INT 4
23788: PUSH
23789: FOR_TO
23790: IFFALSE 23811
// SetSkill ( i , j , 10 ) ;
23792: LD_VAR 0 1
23796: PPUSH
23797: LD_VAR 0 3
23801: PPUSH
23802: LD_INT 10
23804: PPUSH
23805: CALL_OW 237
23809: GO 23789
23811: POP
23812: POP
23813: GO 23773
23815: POP
23816: POP
// end ;
23817: PPOPN 3
23819: END
// every 0 0$1 trigger s30 do var i , tmp ;
23820: LD_EXP 95
23824: IFFALSE 23893
23826: GO 23828
23828: DISABLE
23829: LD_INT 0
23831: PPUSH
23832: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23833: LD_ADDR_VAR 0 2
23837: PUSH
23838: LD_INT 22
23840: PUSH
23841: LD_OWVAR 2
23845: PUSH
23846: EMPTY
23847: LIST
23848: LIST
23849: PPUSH
23850: CALL_OW 69
23854: ST_TO_ADDR
// if not tmp then
23855: LD_VAR 0 2
23859: NOT
23860: IFFALSE 23864
// exit ;
23862: GO 23893
// for i in tmp do
23864: LD_ADDR_VAR 0 1
23868: PUSH
23869: LD_VAR 0 2
23873: PUSH
23874: FOR_IN
23875: IFFALSE 23891
// SetLives ( i , 300 ) ;
23877: LD_VAR 0 1
23881: PPUSH
23882: LD_INT 300
23884: PPUSH
23885: CALL_OW 234
23889: GO 23874
23891: POP
23892: POP
// end ;
23893: PPOPN 2
23895: END
// every 0 0$1 trigger s60 do var i , tmp ;
23896: LD_EXP 96
23900: IFFALSE 23969
23902: GO 23904
23904: DISABLE
23905: LD_INT 0
23907: PPUSH
23908: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23909: LD_ADDR_VAR 0 2
23913: PUSH
23914: LD_INT 22
23916: PUSH
23917: LD_OWVAR 2
23921: PUSH
23922: EMPTY
23923: LIST
23924: LIST
23925: PPUSH
23926: CALL_OW 69
23930: ST_TO_ADDR
// if not tmp then
23931: LD_VAR 0 2
23935: NOT
23936: IFFALSE 23940
// exit ;
23938: GO 23969
// for i in tmp do
23940: LD_ADDR_VAR 0 1
23944: PUSH
23945: LD_VAR 0 2
23949: PUSH
23950: FOR_IN
23951: IFFALSE 23967
// SetLives ( i , 600 ) ;
23953: LD_VAR 0 1
23957: PPUSH
23958: LD_INT 600
23960: PPUSH
23961: CALL_OW 234
23965: GO 23950
23967: POP
23968: POP
// end ;
23969: PPOPN 2
23971: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
23972: LD_INT 0
23974: PPUSH
// case cmd of 301 :
23975: LD_VAR 0 1
23979: PUSH
23980: LD_INT 301
23982: DOUBLE
23983: EQUAL
23984: IFTRUE 23988
23986: GO 24020
23988: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
23989: LD_VAR 0 6
23993: PPUSH
23994: LD_VAR 0 7
23998: PPUSH
23999: LD_VAR 0 8
24003: PPUSH
24004: LD_VAR 0 4
24008: PPUSH
24009: LD_VAR 0 5
24013: PPUSH
24014: CALL 25221 0 5
24018: GO 24141
24020: LD_INT 302
24022: DOUBLE
24023: EQUAL
24024: IFTRUE 24028
24026: GO 24065
24028: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
24029: LD_VAR 0 6
24033: PPUSH
24034: LD_VAR 0 7
24038: PPUSH
24039: LD_VAR 0 8
24043: PPUSH
24044: LD_VAR 0 9
24048: PPUSH
24049: LD_VAR 0 4
24053: PPUSH
24054: LD_VAR 0 5
24058: PPUSH
24059: CALL 25312 0 6
24063: GO 24141
24065: LD_INT 303
24067: DOUBLE
24068: EQUAL
24069: IFTRUE 24073
24071: GO 24110
24073: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
24074: LD_VAR 0 6
24078: PPUSH
24079: LD_VAR 0 7
24083: PPUSH
24084: LD_VAR 0 8
24088: PPUSH
24089: LD_VAR 0 9
24093: PPUSH
24094: LD_VAR 0 4
24098: PPUSH
24099: LD_VAR 0 5
24103: PPUSH
24104: CALL 24146 0 6
24108: GO 24141
24110: LD_INT 304
24112: DOUBLE
24113: EQUAL
24114: IFTRUE 24118
24116: GO 24140
24118: POP
// hHackTeleport ( unit , x , y ) ; end ;
24119: LD_VAR 0 2
24123: PPUSH
24124: LD_VAR 0 4
24128: PPUSH
24129: LD_VAR 0 5
24133: PPUSH
24134: CALL 25905 0 3
24138: GO 24141
24140: POP
// end ;
24141: LD_VAR 0 12
24145: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
24146: LD_INT 0
24148: PPUSH
24149: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
24150: LD_VAR 0 1
24154: PUSH
24155: LD_INT 1
24157: LESS
24158: PUSH
24159: LD_VAR 0 1
24163: PUSH
24164: LD_INT 3
24166: GREATER
24167: OR
24168: PUSH
24169: LD_VAR 0 5
24173: PPUSH
24174: LD_VAR 0 6
24178: PPUSH
24179: CALL_OW 428
24183: OR
24184: IFFALSE 24188
// exit ;
24186: GO 24908
// uc_side := your_side ;
24188: LD_ADDR_OWVAR 20
24192: PUSH
24193: LD_OWVAR 2
24197: ST_TO_ADDR
// uc_nation := nation ;
24198: LD_ADDR_OWVAR 21
24202: PUSH
24203: LD_VAR 0 1
24207: ST_TO_ADDR
// bc_level = 1 ;
24208: LD_ADDR_OWVAR 43
24212: PUSH
24213: LD_INT 1
24215: ST_TO_ADDR
// case btype of 1 :
24216: LD_VAR 0 2
24220: PUSH
24221: LD_INT 1
24223: DOUBLE
24224: EQUAL
24225: IFTRUE 24229
24227: GO 24240
24229: POP
// bc_type := b_depot ; 2 :
24230: LD_ADDR_OWVAR 42
24234: PUSH
24235: LD_INT 0
24237: ST_TO_ADDR
24238: GO 24852
24240: LD_INT 2
24242: DOUBLE
24243: EQUAL
24244: IFTRUE 24248
24246: GO 24259
24248: POP
// bc_type := b_warehouse ; 3 :
24249: LD_ADDR_OWVAR 42
24253: PUSH
24254: LD_INT 1
24256: ST_TO_ADDR
24257: GO 24852
24259: LD_INT 3
24261: DOUBLE
24262: EQUAL
24263: IFTRUE 24267
24265: GO 24278
24267: POP
// bc_type := b_lab ; 4 .. 9 :
24268: LD_ADDR_OWVAR 42
24272: PUSH
24273: LD_INT 6
24275: ST_TO_ADDR
24276: GO 24852
24278: LD_INT 4
24280: DOUBLE
24281: GREATEREQUAL
24282: IFFALSE 24290
24284: LD_INT 9
24286: DOUBLE
24287: LESSEQUAL
24288: IFTRUE 24292
24290: GO 24344
24292: POP
// begin bc_type := b_lab_half ;
24293: LD_ADDR_OWVAR 42
24297: PUSH
24298: LD_INT 7
24300: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
24301: LD_ADDR_OWVAR 44
24305: PUSH
24306: LD_INT 10
24308: PUSH
24309: LD_INT 11
24311: PUSH
24312: LD_INT 12
24314: PUSH
24315: LD_INT 15
24317: PUSH
24318: LD_INT 14
24320: PUSH
24321: LD_INT 13
24323: PUSH
24324: EMPTY
24325: LIST
24326: LIST
24327: LIST
24328: LIST
24329: LIST
24330: LIST
24331: PUSH
24332: LD_VAR 0 2
24336: PUSH
24337: LD_INT 3
24339: MINUS
24340: ARRAY
24341: ST_TO_ADDR
// end ; 10 .. 13 :
24342: GO 24852
24344: LD_INT 10
24346: DOUBLE
24347: GREATEREQUAL
24348: IFFALSE 24356
24350: LD_INT 13
24352: DOUBLE
24353: LESSEQUAL
24354: IFTRUE 24358
24356: GO 24435
24358: POP
// begin bc_type := b_lab_full ;
24359: LD_ADDR_OWVAR 42
24363: PUSH
24364: LD_INT 8
24366: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
24367: LD_ADDR_OWVAR 44
24371: PUSH
24372: LD_INT 10
24374: PUSH
24375: LD_INT 12
24377: PUSH
24378: LD_INT 14
24380: PUSH
24381: LD_INT 13
24383: PUSH
24384: EMPTY
24385: LIST
24386: LIST
24387: LIST
24388: LIST
24389: PUSH
24390: LD_VAR 0 2
24394: PUSH
24395: LD_INT 9
24397: MINUS
24398: ARRAY
24399: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
24400: LD_ADDR_OWVAR 45
24404: PUSH
24405: LD_INT 11
24407: PUSH
24408: LD_INT 15
24410: PUSH
24411: LD_INT 12
24413: PUSH
24414: LD_INT 15
24416: PUSH
24417: EMPTY
24418: LIST
24419: LIST
24420: LIST
24421: LIST
24422: PUSH
24423: LD_VAR 0 2
24427: PUSH
24428: LD_INT 9
24430: MINUS
24431: ARRAY
24432: ST_TO_ADDR
// end ; 14 :
24433: GO 24852
24435: LD_INT 14
24437: DOUBLE
24438: EQUAL
24439: IFTRUE 24443
24441: GO 24454
24443: POP
// bc_type := b_workshop ; 15 :
24444: LD_ADDR_OWVAR 42
24448: PUSH
24449: LD_INT 2
24451: ST_TO_ADDR
24452: GO 24852
24454: LD_INT 15
24456: DOUBLE
24457: EQUAL
24458: IFTRUE 24462
24460: GO 24473
24462: POP
// bc_type := b_factory ; 16 :
24463: LD_ADDR_OWVAR 42
24467: PUSH
24468: LD_INT 3
24470: ST_TO_ADDR
24471: GO 24852
24473: LD_INT 16
24475: DOUBLE
24476: EQUAL
24477: IFTRUE 24481
24479: GO 24492
24481: POP
// bc_type := b_ext_gun ; 17 :
24482: LD_ADDR_OWVAR 42
24486: PUSH
24487: LD_INT 17
24489: ST_TO_ADDR
24490: GO 24852
24492: LD_INT 17
24494: DOUBLE
24495: EQUAL
24496: IFTRUE 24500
24498: GO 24528
24500: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
24501: LD_ADDR_OWVAR 42
24505: PUSH
24506: LD_INT 19
24508: PUSH
24509: LD_INT 23
24511: PUSH
24512: LD_INT 19
24514: PUSH
24515: EMPTY
24516: LIST
24517: LIST
24518: LIST
24519: PUSH
24520: LD_VAR 0 1
24524: ARRAY
24525: ST_TO_ADDR
24526: GO 24852
24528: LD_INT 18
24530: DOUBLE
24531: EQUAL
24532: IFTRUE 24536
24534: GO 24547
24536: POP
// bc_type := b_ext_radar ; 19 :
24537: LD_ADDR_OWVAR 42
24541: PUSH
24542: LD_INT 20
24544: ST_TO_ADDR
24545: GO 24852
24547: LD_INT 19
24549: DOUBLE
24550: EQUAL
24551: IFTRUE 24555
24553: GO 24566
24555: POP
// bc_type := b_ext_radio ; 20 :
24556: LD_ADDR_OWVAR 42
24560: PUSH
24561: LD_INT 22
24563: ST_TO_ADDR
24564: GO 24852
24566: LD_INT 20
24568: DOUBLE
24569: EQUAL
24570: IFTRUE 24574
24572: GO 24585
24574: POP
// bc_type := b_ext_siberium ; 21 :
24575: LD_ADDR_OWVAR 42
24579: PUSH
24580: LD_INT 21
24582: ST_TO_ADDR
24583: GO 24852
24585: LD_INT 21
24587: DOUBLE
24588: EQUAL
24589: IFTRUE 24593
24591: GO 24604
24593: POP
// bc_type := b_ext_computer ; 22 :
24594: LD_ADDR_OWVAR 42
24598: PUSH
24599: LD_INT 24
24601: ST_TO_ADDR
24602: GO 24852
24604: LD_INT 22
24606: DOUBLE
24607: EQUAL
24608: IFTRUE 24612
24610: GO 24623
24612: POP
// bc_type := b_ext_track ; 23 :
24613: LD_ADDR_OWVAR 42
24617: PUSH
24618: LD_INT 16
24620: ST_TO_ADDR
24621: GO 24852
24623: LD_INT 23
24625: DOUBLE
24626: EQUAL
24627: IFTRUE 24631
24629: GO 24642
24631: POP
// bc_type := b_ext_laser ; 24 :
24632: LD_ADDR_OWVAR 42
24636: PUSH
24637: LD_INT 25
24639: ST_TO_ADDR
24640: GO 24852
24642: LD_INT 24
24644: DOUBLE
24645: EQUAL
24646: IFTRUE 24650
24648: GO 24661
24650: POP
// bc_type := b_control_tower ; 25 :
24651: LD_ADDR_OWVAR 42
24655: PUSH
24656: LD_INT 36
24658: ST_TO_ADDR
24659: GO 24852
24661: LD_INT 25
24663: DOUBLE
24664: EQUAL
24665: IFTRUE 24669
24667: GO 24680
24669: POP
// bc_type := b_breastwork ; 26 :
24670: LD_ADDR_OWVAR 42
24674: PUSH
24675: LD_INT 31
24677: ST_TO_ADDR
24678: GO 24852
24680: LD_INT 26
24682: DOUBLE
24683: EQUAL
24684: IFTRUE 24688
24686: GO 24699
24688: POP
// bc_type := b_bunker ; 27 :
24689: LD_ADDR_OWVAR 42
24693: PUSH
24694: LD_INT 32
24696: ST_TO_ADDR
24697: GO 24852
24699: LD_INT 27
24701: DOUBLE
24702: EQUAL
24703: IFTRUE 24707
24705: GO 24718
24707: POP
// bc_type := b_turret ; 28 :
24708: LD_ADDR_OWVAR 42
24712: PUSH
24713: LD_INT 33
24715: ST_TO_ADDR
24716: GO 24852
24718: LD_INT 28
24720: DOUBLE
24721: EQUAL
24722: IFTRUE 24726
24724: GO 24737
24726: POP
// bc_type := b_armoury ; 29 :
24727: LD_ADDR_OWVAR 42
24731: PUSH
24732: LD_INT 4
24734: ST_TO_ADDR
24735: GO 24852
24737: LD_INT 29
24739: DOUBLE
24740: EQUAL
24741: IFTRUE 24745
24743: GO 24756
24745: POP
// bc_type := b_barracks ; 30 :
24746: LD_ADDR_OWVAR 42
24750: PUSH
24751: LD_INT 5
24753: ST_TO_ADDR
24754: GO 24852
24756: LD_INT 30
24758: DOUBLE
24759: EQUAL
24760: IFTRUE 24764
24762: GO 24775
24764: POP
// bc_type := b_solar_power ; 31 :
24765: LD_ADDR_OWVAR 42
24769: PUSH
24770: LD_INT 27
24772: ST_TO_ADDR
24773: GO 24852
24775: LD_INT 31
24777: DOUBLE
24778: EQUAL
24779: IFTRUE 24783
24781: GO 24794
24783: POP
// bc_type := b_oil_power ; 32 :
24784: LD_ADDR_OWVAR 42
24788: PUSH
24789: LD_INT 26
24791: ST_TO_ADDR
24792: GO 24852
24794: LD_INT 32
24796: DOUBLE
24797: EQUAL
24798: IFTRUE 24802
24800: GO 24813
24802: POP
// bc_type := b_siberite_power ; 33 :
24803: LD_ADDR_OWVAR 42
24807: PUSH
24808: LD_INT 28
24810: ST_TO_ADDR
24811: GO 24852
24813: LD_INT 33
24815: DOUBLE
24816: EQUAL
24817: IFTRUE 24821
24819: GO 24832
24821: POP
// bc_type := b_oil_mine ; 34 :
24822: LD_ADDR_OWVAR 42
24826: PUSH
24827: LD_INT 29
24829: ST_TO_ADDR
24830: GO 24852
24832: LD_INT 34
24834: DOUBLE
24835: EQUAL
24836: IFTRUE 24840
24838: GO 24851
24840: POP
// bc_type := b_siberite_mine ; end ;
24841: LD_ADDR_OWVAR 42
24845: PUSH
24846: LD_INT 30
24848: ST_TO_ADDR
24849: GO 24852
24851: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
24852: LD_ADDR_VAR 0 8
24856: PUSH
24857: LD_VAR 0 5
24861: PPUSH
24862: LD_VAR 0 6
24866: PPUSH
24867: LD_VAR 0 3
24871: PPUSH
24872: CALL_OW 47
24876: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
24877: LD_OWVAR 42
24881: PUSH
24882: LD_INT 32
24884: PUSH
24885: LD_INT 33
24887: PUSH
24888: EMPTY
24889: LIST
24890: LIST
24891: IN
24892: IFFALSE 24908
// PlaceWeaponTurret ( b , weapon ) ;
24894: LD_VAR 0 8
24898: PPUSH
24899: LD_VAR 0 4
24903: PPUSH
24904: CALL_OW 431
// end ;
24908: LD_VAR 0 7
24912: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
24913: LD_INT 0
24915: PPUSH
24916: PPUSH
24917: PPUSH
24918: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24919: LD_ADDR_VAR 0 4
24923: PUSH
24924: LD_INT 22
24926: PUSH
24927: LD_OWVAR 2
24931: PUSH
24932: EMPTY
24933: LIST
24934: LIST
24935: PUSH
24936: LD_INT 2
24938: PUSH
24939: LD_INT 30
24941: PUSH
24942: LD_INT 0
24944: PUSH
24945: EMPTY
24946: LIST
24947: LIST
24948: PUSH
24949: LD_INT 30
24951: PUSH
24952: LD_INT 1
24954: PUSH
24955: EMPTY
24956: LIST
24957: LIST
24958: PUSH
24959: EMPTY
24960: LIST
24961: LIST
24962: LIST
24963: PUSH
24964: EMPTY
24965: LIST
24966: LIST
24967: PPUSH
24968: CALL_OW 69
24972: ST_TO_ADDR
// if not tmp then
24973: LD_VAR 0 4
24977: NOT
24978: IFFALSE 24982
// exit ;
24980: GO 25041
// for i in tmp do
24982: LD_ADDR_VAR 0 2
24986: PUSH
24987: LD_VAR 0 4
24991: PUSH
24992: FOR_IN
24993: IFFALSE 25039
// for j = 1 to 3 do
24995: LD_ADDR_VAR 0 3
24999: PUSH
25000: DOUBLE
25001: LD_INT 1
25003: DEC
25004: ST_TO_ADDR
25005: LD_INT 3
25007: PUSH
25008: FOR_TO
25009: IFFALSE 25035
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
25011: LD_VAR 0 2
25015: PPUSH
25016: CALL_OW 274
25020: PPUSH
25021: LD_VAR 0 3
25025: PPUSH
25026: LD_INT 99999
25028: PPUSH
25029: CALL_OW 277
25033: GO 25008
25035: POP
25036: POP
25037: GO 24992
25039: POP
25040: POP
// end ;
25041: LD_VAR 0 1
25045: RET
// export function hHackSetLevel10 ; var i , j ; begin
25046: LD_INT 0
25048: PPUSH
25049: PPUSH
25050: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
25051: LD_ADDR_VAR 0 2
25055: PUSH
25056: LD_INT 21
25058: PUSH
25059: LD_INT 1
25061: PUSH
25062: EMPTY
25063: LIST
25064: LIST
25065: PPUSH
25066: CALL_OW 69
25070: PUSH
25071: FOR_IN
25072: IFFALSE 25124
// if IsSelected ( i ) then
25074: LD_VAR 0 2
25078: PPUSH
25079: CALL_OW 306
25083: IFFALSE 25122
// begin for j := 1 to 4 do
25085: LD_ADDR_VAR 0 3
25089: PUSH
25090: DOUBLE
25091: LD_INT 1
25093: DEC
25094: ST_TO_ADDR
25095: LD_INT 4
25097: PUSH
25098: FOR_TO
25099: IFFALSE 25120
// SetSkill ( i , j , 10 ) ;
25101: LD_VAR 0 2
25105: PPUSH
25106: LD_VAR 0 3
25110: PPUSH
25111: LD_INT 10
25113: PPUSH
25114: CALL_OW 237
25118: GO 25098
25120: POP
25121: POP
// end ;
25122: GO 25071
25124: POP
25125: POP
// end ;
25126: LD_VAR 0 1
25130: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
25131: LD_INT 0
25133: PPUSH
25134: PPUSH
25135: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
25136: LD_ADDR_VAR 0 2
25140: PUSH
25141: LD_INT 22
25143: PUSH
25144: LD_OWVAR 2
25148: PUSH
25149: EMPTY
25150: LIST
25151: LIST
25152: PUSH
25153: LD_INT 21
25155: PUSH
25156: LD_INT 1
25158: PUSH
25159: EMPTY
25160: LIST
25161: LIST
25162: PUSH
25163: EMPTY
25164: LIST
25165: LIST
25166: PPUSH
25167: CALL_OW 69
25171: PUSH
25172: FOR_IN
25173: IFFALSE 25214
// begin for j := 1 to 4 do
25175: LD_ADDR_VAR 0 3
25179: PUSH
25180: DOUBLE
25181: LD_INT 1
25183: DEC
25184: ST_TO_ADDR
25185: LD_INT 4
25187: PUSH
25188: FOR_TO
25189: IFFALSE 25210
// SetSkill ( i , j , 10 ) ;
25191: LD_VAR 0 2
25195: PPUSH
25196: LD_VAR 0 3
25200: PPUSH
25201: LD_INT 10
25203: PPUSH
25204: CALL_OW 237
25208: GO 25188
25210: POP
25211: POP
// end ;
25212: GO 25172
25214: POP
25215: POP
// end ;
25216: LD_VAR 0 1
25220: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
25221: LD_INT 0
25223: PPUSH
// uc_side := your_side ;
25224: LD_ADDR_OWVAR 20
25228: PUSH
25229: LD_OWVAR 2
25233: ST_TO_ADDR
// uc_nation := nation ;
25234: LD_ADDR_OWVAR 21
25238: PUSH
25239: LD_VAR 0 1
25243: ST_TO_ADDR
// InitHc ;
25244: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
25248: LD_INT 0
25250: PPUSH
25251: LD_VAR 0 2
25255: PPUSH
25256: LD_VAR 0 3
25260: PPUSH
25261: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
25265: LD_VAR 0 4
25269: PPUSH
25270: LD_VAR 0 5
25274: PPUSH
25275: CALL_OW 428
25279: PUSH
25280: LD_INT 0
25282: EQUAL
25283: IFFALSE 25307
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
25285: CALL_OW 44
25289: PPUSH
25290: LD_VAR 0 4
25294: PPUSH
25295: LD_VAR 0 5
25299: PPUSH
25300: LD_INT 1
25302: PPUSH
25303: CALL_OW 48
// end ;
25307: LD_VAR 0 6
25311: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
25312: LD_INT 0
25314: PPUSH
25315: PPUSH
// uc_side := your_side ;
25316: LD_ADDR_OWVAR 20
25320: PUSH
25321: LD_OWVAR 2
25325: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
25326: LD_VAR 0 1
25330: PUSH
25331: LD_INT 1
25333: PUSH
25334: LD_INT 2
25336: PUSH
25337: LD_INT 3
25339: PUSH
25340: LD_INT 4
25342: PUSH
25343: LD_INT 5
25345: PUSH
25346: EMPTY
25347: LIST
25348: LIST
25349: LIST
25350: LIST
25351: LIST
25352: IN
25353: IFFALSE 25365
// uc_nation := nation_american else
25355: LD_ADDR_OWVAR 21
25359: PUSH
25360: LD_INT 1
25362: ST_TO_ADDR
25363: GO 25408
// if chassis in [ 11 , 12 , 13 , 14 ] then
25365: LD_VAR 0 1
25369: PUSH
25370: LD_INT 11
25372: PUSH
25373: LD_INT 12
25375: PUSH
25376: LD_INT 13
25378: PUSH
25379: LD_INT 14
25381: PUSH
25382: EMPTY
25383: LIST
25384: LIST
25385: LIST
25386: LIST
25387: IN
25388: IFFALSE 25400
// uc_nation := nation_arabian else
25390: LD_ADDR_OWVAR 21
25394: PUSH
25395: LD_INT 2
25397: ST_TO_ADDR
25398: GO 25408
// uc_nation := nation_russian ;
25400: LD_ADDR_OWVAR 21
25404: PUSH
25405: LD_INT 3
25407: ST_TO_ADDR
// vc_chassis := chassis ;
25408: LD_ADDR_OWVAR 37
25412: PUSH
25413: LD_VAR 0 1
25417: ST_TO_ADDR
// vc_engine := engine ;
25418: LD_ADDR_OWVAR 39
25422: PUSH
25423: LD_VAR 0 2
25427: ST_TO_ADDR
// vc_control := control ;
25428: LD_ADDR_OWVAR 38
25432: PUSH
25433: LD_VAR 0 3
25437: ST_TO_ADDR
// vc_weapon := weapon ;
25438: LD_ADDR_OWVAR 40
25442: PUSH
25443: LD_VAR 0 4
25447: ST_TO_ADDR
// un := CreateVehicle ;
25448: LD_ADDR_VAR 0 8
25452: PUSH
25453: CALL_OW 45
25457: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
25458: LD_VAR 0 8
25462: PPUSH
25463: LD_INT 0
25465: PPUSH
25466: LD_INT 5
25468: PPUSH
25469: CALL_OW 12
25473: PPUSH
25474: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
25478: LD_VAR 0 8
25482: PPUSH
25483: LD_VAR 0 5
25487: PPUSH
25488: LD_VAR 0 6
25492: PPUSH
25493: LD_INT 1
25495: PPUSH
25496: CALL_OW 48
// end ;
25500: LD_VAR 0 7
25504: RET
// export hInvincible ; every 1 do
25505: GO 25507
25507: DISABLE
// hInvincible := [ ] ;
25508: LD_ADDR_EXP 97
25512: PUSH
25513: EMPTY
25514: ST_TO_ADDR
25515: END
// every 10 do var i ;
25516: GO 25518
25518: DISABLE
25519: LD_INT 0
25521: PPUSH
// begin enable ;
25522: ENABLE
// if not hInvincible then
25523: LD_EXP 97
25527: NOT
25528: IFFALSE 25532
// exit ;
25530: GO 25576
// for i in hInvincible do
25532: LD_ADDR_VAR 0 1
25536: PUSH
25537: LD_EXP 97
25541: PUSH
25542: FOR_IN
25543: IFFALSE 25574
// if GetLives ( i ) < 1000 then
25545: LD_VAR 0 1
25549: PPUSH
25550: CALL_OW 256
25554: PUSH
25555: LD_INT 1000
25557: LESS
25558: IFFALSE 25572
// SetLives ( i , 1000 ) ;
25560: LD_VAR 0 1
25564: PPUSH
25565: LD_INT 1000
25567: PPUSH
25568: CALL_OW 234
25572: GO 25542
25574: POP
25575: POP
// end ;
25576: PPOPN 1
25578: END
// export function hHackInvincible ; var i ; begin
25579: LD_INT 0
25581: PPUSH
25582: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
25583: LD_ADDR_VAR 0 2
25587: PUSH
25588: LD_INT 2
25590: PUSH
25591: LD_INT 21
25593: PUSH
25594: LD_INT 1
25596: PUSH
25597: EMPTY
25598: LIST
25599: LIST
25600: PUSH
25601: LD_INT 21
25603: PUSH
25604: LD_INT 2
25606: PUSH
25607: EMPTY
25608: LIST
25609: LIST
25610: PUSH
25611: EMPTY
25612: LIST
25613: LIST
25614: LIST
25615: PPUSH
25616: CALL_OW 69
25620: PUSH
25621: FOR_IN
25622: IFFALSE 25683
// if IsSelected ( i ) then
25624: LD_VAR 0 2
25628: PPUSH
25629: CALL_OW 306
25633: IFFALSE 25681
// begin if i in hInvincible then
25635: LD_VAR 0 2
25639: PUSH
25640: LD_EXP 97
25644: IN
25645: IFFALSE 25665
// hInvincible := hInvincible diff i else
25647: LD_ADDR_EXP 97
25651: PUSH
25652: LD_EXP 97
25656: PUSH
25657: LD_VAR 0 2
25661: DIFF
25662: ST_TO_ADDR
25663: GO 25681
// hInvincible := hInvincible union i ;
25665: LD_ADDR_EXP 97
25669: PUSH
25670: LD_EXP 97
25674: PUSH
25675: LD_VAR 0 2
25679: UNION
25680: ST_TO_ADDR
// end ;
25681: GO 25621
25683: POP
25684: POP
// end ;
25685: LD_VAR 0 1
25689: RET
// export function hHackInvisible ; var i , j ; begin
25690: LD_INT 0
25692: PPUSH
25693: PPUSH
25694: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
25695: LD_ADDR_VAR 0 2
25699: PUSH
25700: LD_INT 21
25702: PUSH
25703: LD_INT 1
25705: PUSH
25706: EMPTY
25707: LIST
25708: LIST
25709: PPUSH
25710: CALL_OW 69
25714: PUSH
25715: FOR_IN
25716: IFFALSE 25740
// if IsSelected ( i ) then
25718: LD_VAR 0 2
25722: PPUSH
25723: CALL_OW 306
25727: IFFALSE 25738
// ComForceInvisible ( i ) ;
25729: LD_VAR 0 2
25733: PPUSH
25734: CALL_OW 496
25738: GO 25715
25740: POP
25741: POP
// end ;
25742: LD_VAR 0 1
25746: RET
// export function hHackChangeYourSide ; begin
25747: LD_INT 0
25749: PPUSH
// if your_side = 8 then
25750: LD_OWVAR 2
25754: PUSH
25755: LD_INT 8
25757: EQUAL
25758: IFFALSE 25770
// your_side := 0 else
25760: LD_ADDR_OWVAR 2
25764: PUSH
25765: LD_INT 0
25767: ST_TO_ADDR
25768: GO 25784
// your_side := your_side + 1 ;
25770: LD_ADDR_OWVAR 2
25774: PUSH
25775: LD_OWVAR 2
25779: PUSH
25780: LD_INT 1
25782: PLUS
25783: ST_TO_ADDR
// end ;
25784: LD_VAR 0 1
25788: RET
// export function hHackChangeUnitSide ; var i , j ; begin
25789: LD_INT 0
25791: PPUSH
25792: PPUSH
25793: PPUSH
// for i in all_units do
25794: LD_ADDR_VAR 0 2
25798: PUSH
25799: LD_OWVAR 3
25803: PUSH
25804: FOR_IN
25805: IFFALSE 25883
// if IsSelected ( i ) then
25807: LD_VAR 0 2
25811: PPUSH
25812: CALL_OW 306
25816: IFFALSE 25881
// begin j := GetSide ( i ) ;
25818: LD_ADDR_VAR 0 3
25822: PUSH
25823: LD_VAR 0 2
25827: PPUSH
25828: CALL_OW 255
25832: ST_TO_ADDR
// if j = 8 then
25833: LD_VAR 0 3
25837: PUSH
25838: LD_INT 8
25840: EQUAL
25841: IFFALSE 25853
// j := 0 else
25843: LD_ADDR_VAR 0 3
25847: PUSH
25848: LD_INT 0
25850: ST_TO_ADDR
25851: GO 25867
// j := j + 1 ;
25853: LD_ADDR_VAR 0 3
25857: PUSH
25858: LD_VAR 0 3
25862: PUSH
25863: LD_INT 1
25865: PLUS
25866: ST_TO_ADDR
// SetSide ( i , j ) ;
25867: LD_VAR 0 2
25871: PPUSH
25872: LD_VAR 0 3
25876: PPUSH
25877: CALL_OW 235
// end ;
25881: GO 25804
25883: POP
25884: POP
// end ;
25885: LD_VAR 0 1
25889: RET
// export function hHackFog ; begin
25890: LD_INT 0
25892: PPUSH
// FogOff ( true ) ;
25893: LD_INT 1
25895: PPUSH
25896: CALL_OW 344
// end ;
25900: LD_VAR 0 1
25904: RET
// export function hHackTeleport ( unit , x , y ) ; begin
25905: LD_INT 0
25907: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
25908: LD_VAR 0 1
25912: PPUSH
25913: LD_VAR 0 2
25917: PPUSH
25918: LD_VAR 0 3
25922: PPUSH
25923: LD_INT 1
25925: PPUSH
25926: LD_INT 1
25928: PPUSH
25929: CALL_OW 483
// CenterOnXY ( x , y ) ;
25933: LD_VAR 0 2
25937: PPUSH
25938: LD_VAR 0 3
25942: PPUSH
25943: CALL_OW 84
// end ; end_of_file
25947: LD_VAR 0 4
25951: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
25952: LD_INT 0
25954: PPUSH
25955: PPUSH
25956: PPUSH
25957: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
25958: LD_VAR 0 1
25962: PPUSH
25963: CALL_OW 264
25967: PUSH
25968: LD_EXP 25
25972: EQUAL
25973: IFFALSE 26045
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
25975: LD_INT 68
25977: PPUSH
25978: LD_VAR 0 1
25982: PPUSH
25983: CALL_OW 255
25987: PPUSH
25988: CALL_OW 321
25992: PUSH
25993: LD_INT 2
25995: EQUAL
25996: IFFALSE 26008
// eff := 70 else
25998: LD_ADDR_VAR 0 4
26002: PUSH
26003: LD_INT 70
26005: ST_TO_ADDR
26006: GO 26016
// eff := 30 ;
26008: LD_ADDR_VAR 0 4
26012: PUSH
26013: LD_INT 30
26015: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
26016: LD_VAR 0 1
26020: PPUSH
26021: CALL_OW 250
26025: PPUSH
26026: LD_VAR 0 1
26030: PPUSH
26031: CALL_OW 251
26035: PPUSH
26036: LD_VAR 0 4
26040: PPUSH
26041: CALL_OW 495
// end ; end ;
26045: LD_VAR 0 2
26049: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
26050: LD_INT 0
26052: PPUSH
// end ;
26053: LD_VAR 0 4
26057: RET
// export function SOS_Command ( cmd ) ; begin
26058: LD_INT 0
26060: PPUSH
// end ;
26061: LD_VAR 0 2
26065: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
26066: LD_INT 0
26068: PPUSH
// end ;
26069: LD_VAR 0 6
26073: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
26074: LD_INT 0
26076: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
26077: LD_VAR 0 1
26081: PUSH
26082: LD_INT 250
26084: EQUAL
26085: PUSH
26086: LD_VAR 0 2
26090: PPUSH
26091: CALL_OW 264
26095: PUSH
26096: LD_EXP 28
26100: EQUAL
26101: AND
26102: IFFALSE 26123
// MinerPlaceMine ( unit , x , y ) ;
26104: LD_VAR 0 2
26108: PPUSH
26109: LD_VAR 0 4
26113: PPUSH
26114: LD_VAR 0 5
26118: PPUSH
26119: CALL 28472 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
26123: LD_VAR 0 1
26127: PUSH
26128: LD_INT 251
26130: EQUAL
26131: PUSH
26132: LD_VAR 0 2
26136: PPUSH
26137: CALL_OW 264
26141: PUSH
26142: LD_EXP 28
26146: EQUAL
26147: AND
26148: IFFALSE 26169
// MinerDetonateMine ( unit , x , y ) ;
26150: LD_VAR 0 2
26154: PPUSH
26155: LD_VAR 0 4
26159: PPUSH
26160: LD_VAR 0 5
26164: PPUSH
26165: CALL 28749 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
26169: LD_VAR 0 1
26173: PUSH
26174: LD_INT 252
26176: EQUAL
26177: PUSH
26178: LD_VAR 0 2
26182: PPUSH
26183: CALL_OW 264
26187: PUSH
26188: LD_EXP 28
26192: EQUAL
26193: AND
26194: IFFALSE 26215
// MinerCreateMinefield ( unit , x , y ) ;
26196: LD_VAR 0 2
26200: PPUSH
26201: LD_VAR 0 4
26205: PPUSH
26206: LD_VAR 0 5
26210: PPUSH
26211: CALL 29166 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
26215: LD_VAR 0 1
26219: PUSH
26220: LD_INT 253
26222: EQUAL
26223: PUSH
26224: LD_VAR 0 2
26228: PPUSH
26229: CALL_OW 257
26233: PUSH
26234: LD_INT 5
26236: EQUAL
26237: AND
26238: IFFALSE 26259
// ComBinocular ( unit , x , y ) ;
26240: LD_VAR 0 2
26244: PPUSH
26245: LD_VAR 0 4
26249: PPUSH
26250: LD_VAR 0 5
26254: PPUSH
26255: CALL 29537 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
26259: LD_VAR 0 1
26263: PUSH
26264: LD_INT 254
26266: EQUAL
26267: PUSH
26268: LD_VAR 0 2
26272: PPUSH
26273: CALL_OW 264
26277: PUSH
26278: LD_EXP 23
26282: EQUAL
26283: AND
26284: PUSH
26285: LD_VAR 0 3
26289: PPUSH
26290: CALL_OW 263
26294: PUSH
26295: LD_INT 3
26297: EQUAL
26298: AND
26299: IFFALSE 26315
// HackDestroyVehicle ( unit , selectedUnit ) ;
26301: LD_VAR 0 2
26305: PPUSH
26306: LD_VAR 0 3
26310: PPUSH
26311: CALL 27832 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
26315: LD_VAR 0 1
26319: PUSH
26320: LD_INT 255
26322: EQUAL
26323: PUSH
26324: LD_VAR 0 2
26328: PPUSH
26329: CALL_OW 264
26333: PUSH
26334: LD_INT 14
26336: PUSH
26337: LD_INT 53
26339: PUSH
26340: EMPTY
26341: LIST
26342: LIST
26343: IN
26344: AND
26345: PUSH
26346: LD_VAR 0 4
26350: PPUSH
26351: LD_VAR 0 5
26355: PPUSH
26356: CALL_OW 488
26360: AND
26361: IFFALSE 26385
// CutTreeXYR ( unit , x , y , 12 ) ;
26363: LD_VAR 0 2
26367: PPUSH
26368: LD_VAR 0 4
26372: PPUSH
26373: LD_VAR 0 5
26377: PPUSH
26378: LD_INT 12
26380: PPUSH
26381: CALL 26398 0 4
// end ;
26385: LD_VAR 0 6
26389: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
26390: LD_INT 0
26392: PPUSH
// end ;
26393: LD_VAR 0 4
26397: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
26398: LD_INT 0
26400: PPUSH
26401: PPUSH
26402: PPUSH
26403: PPUSH
26404: PPUSH
26405: PPUSH
26406: PPUSH
26407: PPUSH
26408: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
26409: LD_VAR 0 1
26413: NOT
26414: PUSH
26415: LD_VAR 0 2
26419: PPUSH
26420: LD_VAR 0 3
26424: PPUSH
26425: CALL_OW 488
26429: NOT
26430: OR
26431: PUSH
26432: LD_VAR 0 4
26436: NOT
26437: OR
26438: IFFALSE 26442
// exit ;
26440: GO 26782
// list := [ ] ;
26442: LD_ADDR_VAR 0 13
26446: PUSH
26447: EMPTY
26448: ST_TO_ADDR
// if x - r < 0 then
26449: LD_VAR 0 2
26453: PUSH
26454: LD_VAR 0 4
26458: MINUS
26459: PUSH
26460: LD_INT 0
26462: LESS
26463: IFFALSE 26475
// min_x := 0 else
26465: LD_ADDR_VAR 0 7
26469: PUSH
26470: LD_INT 0
26472: ST_TO_ADDR
26473: GO 26491
// min_x := x - r ;
26475: LD_ADDR_VAR 0 7
26479: PUSH
26480: LD_VAR 0 2
26484: PUSH
26485: LD_VAR 0 4
26489: MINUS
26490: ST_TO_ADDR
// if y - r < 0 then
26491: LD_VAR 0 3
26495: PUSH
26496: LD_VAR 0 4
26500: MINUS
26501: PUSH
26502: LD_INT 0
26504: LESS
26505: IFFALSE 26517
// min_y := 0 else
26507: LD_ADDR_VAR 0 8
26511: PUSH
26512: LD_INT 0
26514: ST_TO_ADDR
26515: GO 26533
// min_y := y - r ;
26517: LD_ADDR_VAR 0 8
26521: PUSH
26522: LD_VAR 0 3
26526: PUSH
26527: LD_VAR 0 4
26531: MINUS
26532: ST_TO_ADDR
// max_x := x + r ;
26533: LD_ADDR_VAR 0 9
26537: PUSH
26538: LD_VAR 0 2
26542: PUSH
26543: LD_VAR 0 4
26547: PLUS
26548: ST_TO_ADDR
// max_y := y + r ;
26549: LD_ADDR_VAR 0 10
26553: PUSH
26554: LD_VAR 0 3
26558: PUSH
26559: LD_VAR 0 4
26563: PLUS
26564: ST_TO_ADDR
// for _x = min_x to max_x do
26565: LD_ADDR_VAR 0 11
26569: PUSH
26570: DOUBLE
26571: LD_VAR 0 7
26575: DEC
26576: ST_TO_ADDR
26577: LD_VAR 0 9
26581: PUSH
26582: FOR_TO
26583: IFFALSE 26700
// for _y = min_y to max_y do
26585: LD_ADDR_VAR 0 12
26589: PUSH
26590: DOUBLE
26591: LD_VAR 0 8
26595: DEC
26596: ST_TO_ADDR
26597: LD_VAR 0 10
26601: PUSH
26602: FOR_TO
26603: IFFALSE 26696
// begin if not ValidHex ( _x , _y ) then
26605: LD_VAR 0 11
26609: PPUSH
26610: LD_VAR 0 12
26614: PPUSH
26615: CALL_OW 488
26619: NOT
26620: IFFALSE 26624
// continue ;
26622: GO 26602
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
26624: LD_VAR 0 11
26628: PPUSH
26629: LD_VAR 0 12
26633: PPUSH
26634: CALL_OW 351
26638: PUSH
26639: LD_VAR 0 11
26643: PPUSH
26644: LD_VAR 0 12
26648: PPUSH
26649: CALL_OW 554
26653: AND
26654: IFFALSE 26694
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
26656: LD_ADDR_VAR 0 13
26660: PUSH
26661: LD_VAR 0 13
26665: PPUSH
26666: LD_VAR 0 13
26670: PUSH
26671: LD_INT 1
26673: PLUS
26674: PPUSH
26675: LD_VAR 0 11
26679: PUSH
26680: LD_VAR 0 12
26684: PUSH
26685: EMPTY
26686: LIST
26687: LIST
26688: PPUSH
26689: CALL_OW 2
26693: ST_TO_ADDR
// end ;
26694: GO 26602
26696: POP
26697: POP
26698: GO 26582
26700: POP
26701: POP
// if not list then
26702: LD_VAR 0 13
26706: NOT
26707: IFFALSE 26711
// exit ;
26709: GO 26782
// for i in list do
26711: LD_ADDR_VAR 0 6
26715: PUSH
26716: LD_VAR 0 13
26720: PUSH
26721: FOR_IN
26722: IFFALSE 26780
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
26724: LD_VAR 0 1
26728: PPUSH
26729: LD_STRING M
26731: PUSH
26732: LD_VAR 0 6
26736: PUSH
26737: LD_INT 1
26739: ARRAY
26740: PUSH
26741: LD_VAR 0 6
26745: PUSH
26746: LD_INT 2
26748: ARRAY
26749: PUSH
26750: LD_INT 0
26752: PUSH
26753: LD_INT 0
26755: PUSH
26756: LD_INT 0
26758: PUSH
26759: LD_INT 0
26761: PUSH
26762: EMPTY
26763: LIST
26764: LIST
26765: LIST
26766: LIST
26767: LIST
26768: LIST
26769: LIST
26770: PUSH
26771: EMPTY
26772: LIST
26773: PPUSH
26774: CALL_OW 447
26778: GO 26721
26780: POP
26781: POP
// end ;
26782: LD_VAR 0 5
26786: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
26787: LD_EXP 100
26791: NOT
26792: IFFALSE 26842
26794: GO 26796
26796: DISABLE
// begin initHack := true ;
26797: LD_ADDR_EXP 100
26801: PUSH
26802: LD_INT 1
26804: ST_TO_ADDR
// hackTanks := [ ] ;
26805: LD_ADDR_EXP 101
26809: PUSH
26810: EMPTY
26811: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
26812: LD_ADDR_EXP 102
26816: PUSH
26817: EMPTY
26818: ST_TO_ADDR
// hackLimit := 3 ;
26819: LD_ADDR_EXP 103
26823: PUSH
26824: LD_INT 3
26826: ST_TO_ADDR
// hackDist := 12 ;
26827: LD_ADDR_EXP 104
26831: PUSH
26832: LD_INT 12
26834: ST_TO_ADDR
// hackCounter := [ ] ;
26835: LD_ADDR_EXP 105
26839: PUSH
26840: EMPTY
26841: ST_TO_ADDR
// end ;
26842: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
26843: LD_EXP 100
26847: PUSH
26848: LD_INT 34
26850: PUSH
26851: LD_EXP 23
26855: PUSH
26856: EMPTY
26857: LIST
26858: LIST
26859: PPUSH
26860: CALL_OW 69
26864: AND
26865: IFFALSE 27120
26867: GO 26869
26869: DISABLE
26870: LD_INT 0
26872: PPUSH
26873: PPUSH
// begin enable ;
26874: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
26875: LD_ADDR_VAR 0 1
26879: PUSH
26880: LD_INT 34
26882: PUSH
26883: LD_EXP 23
26887: PUSH
26888: EMPTY
26889: LIST
26890: LIST
26891: PPUSH
26892: CALL_OW 69
26896: PUSH
26897: FOR_IN
26898: IFFALSE 27118
// begin if not i in hackTanks then
26900: LD_VAR 0 1
26904: PUSH
26905: LD_EXP 101
26909: IN
26910: NOT
26911: IFFALSE 26994
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
26913: LD_ADDR_EXP 101
26917: PUSH
26918: LD_EXP 101
26922: PPUSH
26923: LD_EXP 101
26927: PUSH
26928: LD_INT 1
26930: PLUS
26931: PPUSH
26932: LD_VAR 0 1
26936: PPUSH
26937: CALL_OW 1
26941: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
26942: LD_ADDR_EXP 102
26946: PUSH
26947: LD_EXP 102
26951: PPUSH
26952: LD_EXP 102
26956: PUSH
26957: LD_INT 1
26959: PLUS
26960: PPUSH
26961: EMPTY
26962: PPUSH
26963: CALL_OW 1
26967: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
26968: LD_ADDR_EXP 105
26972: PUSH
26973: LD_EXP 105
26977: PPUSH
26978: LD_EXP 105
26982: PUSH
26983: LD_INT 1
26985: PLUS
26986: PPUSH
26987: EMPTY
26988: PPUSH
26989: CALL_OW 1
26993: ST_TO_ADDR
// end ; if not IsOk ( i ) then
26994: LD_VAR 0 1
26998: PPUSH
26999: CALL_OW 302
27003: NOT
27004: IFFALSE 27017
// begin HackUnlinkAll ( i ) ;
27006: LD_VAR 0 1
27010: PPUSH
27011: CALL 27123 0 1
// continue ;
27015: GO 26897
// end ; HackCheckCapturedStatus ( i ) ;
27017: LD_VAR 0 1
27021: PPUSH
27022: CALL 27566 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
27026: LD_ADDR_VAR 0 2
27030: PUSH
27031: LD_INT 81
27033: PUSH
27034: LD_VAR 0 1
27038: PPUSH
27039: CALL_OW 255
27043: PUSH
27044: EMPTY
27045: LIST
27046: LIST
27047: PUSH
27048: LD_INT 33
27050: PUSH
27051: LD_INT 3
27053: PUSH
27054: EMPTY
27055: LIST
27056: LIST
27057: PUSH
27058: LD_INT 91
27060: PUSH
27061: LD_VAR 0 1
27065: PUSH
27066: LD_EXP 104
27070: PUSH
27071: EMPTY
27072: LIST
27073: LIST
27074: LIST
27075: PUSH
27076: LD_INT 50
27078: PUSH
27079: EMPTY
27080: LIST
27081: PUSH
27082: EMPTY
27083: LIST
27084: LIST
27085: LIST
27086: LIST
27087: PPUSH
27088: CALL_OW 69
27092: ST_TO_ADDR
// if not tmp then
27093: LD_VAR 0 2
27097: NOT
27098: IFFALSE 27102
// continue ;
27100: GO 26897
// HackLink ( i , tmp ) ;
27102: LD_VAR 0 1
27106: PPUSH
27107: LD_VAR 0 2
27111: PPUSH
27112: CALL 27259 0 2
// end ;
27116: GO 26897
27118: POP
27119: POP
// end ;
27120: PPOPN 2
27122: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
27123: LD_INT 0
27125: PPUSH
27126: PPUSH
27127: PPUSH
// if not hack in hackTanks then
27128: LD_VAR 0 1
27132: PUSH
27133: LD_EXP 101
27137: IN
27138: NOT
27139: IFFALSE 27143
// exit ;
27141: GO 27254
// index := GetElementIndex ( hackTanks , hack ) ;
27143: LD_ADDR_VAR 0 4
27147: PUSH
27148: LD_EXP 101
27152: PPUSH
27153: LD_VAR 0 1
27157: PPUSH
27158: CALL 34728 0 2
27162: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
27163: LD_EXP 102
27167: PUSH
27168: LD_VAR 0 4
27172: ARRAY
27173: IFFALSE 27254
// begin for i in hackTanksCaptured [ index ] do
27175: LD_ADDR_VAR 0 3
27179: PUSH
27180: LD_EXP 102
27184: PUSH
27185: LD_VAR 0 4
27189: ARRAY
27190: PUSH
27191: FOR_IN
27192: IFFALSE 27218
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
27194: LD_VAR 0 3
27198: PUSH
27199: LD_INT 1
27201: ARRAY
27202: PPUSH
27203: LD_VAR 0 3
27207: PUSH
27208: LD_INT 2
27210: ARRAY
27211: PPUSH
27212: CALL_OW 235
27216: GO 27191
27218: POP
27219: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
27220: LD_ADDR_EXP 102
27224: PUSH
27225: LD_EXP 102
27229: PPUSH
27230: LD_VAR 0 4
27234: PPUSH
27235: EMPTY
27236: PPUSH
27237: CALL_OW 1
27241: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
27242: LD_VAR 0 1
27246: PPUSH
27247: LD_INT 0
27249: PPUSH
27250: CALL_OW 505
// end ; end ;
27254: LD_VAR 0 2
27258: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
27259: LD_INT 0
27261: PPUSH
27262: PPUSH
27263: PPUSH
// if not hack in hackTanks or not vehicles then
27264: LD_VAR 0 1
27268: PUSH
27269: LD_EXP 101
27273: IN
27274: NOT
27275: PUSH
27276: LD_VAR 0 2
27280: NOT
27281: OR
27282: IFFALSE 27286
// exit ;
27284: GO 27561
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
27286: LD_ADDR_VAR 0 2
27290: PUSH
27291: LD_VAR 0 1
27295: PPUSH
27296: LD_VAR 0 2
27300: PPUSH
27301: LD_INT 1
27303: PPUSH
27304: LD_INT 1
27306: PPUSH
27307: CALL 35378 0 4
27311: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
27312: LD_ADDR_VAR 0 5
27316: PUSH
27317: LD_EXP 101
27321: PPUSH
27322: LD_VAR 0 1
27326: PPUSH
27327: CALL 34728 0 2
27331: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
27332: LD_EXP 102
27336: PUSH
27337: LD_VAR 0 5
27341: ARRAY
27342: PUSH
27343: LD_EXP 103
27347: LESS
27348: IFFALSE 27537
// begin for i := 1 to vehicles do
27350: LD_ADDR_VAR 0 4
27354: PUSH
27355: DOUBLE
27356: LD_INT 1
27358: DEC
27359: ST_TO_ADDR
27360: LD_VAR 0 2
27364: PUSH
27365: FOR_TO
27366: IFFALSE 27535
// begin if hackTanksCaptured [ index ] = hackLimit then
27368: LD_EXP 102
27372: PUSH
27373: LD_VAR 0 5
27377: ARRAY
27378: PUSH
27379: LD_EXP 103
27383: EQUAL
27384: IFFALSE 27388
// break ;
27386: GO 27535
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
27388: LD_ADDR_EXP 105
27392: PUSH
27393: LD_EXP 105
27397: PPUSH
27398: LD_VAR 0 5
27402: PPUSH
27403: LD_EXP 105
27407: PUSH
27408: LD_VAR 0 5
27412: ARRAY
27413: PUSH
27414: LD_INT 1
27416: PLUS
27417: PPUSH
27418: CALL_OW 1
27422: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
27423: LD_ADDR_EXP 102
27427: PUSH
27428: LD_EXP 102
27432: PPUSH
27433: LD_VAR 0 5
27437: PUSH
27438: LD_EXP 102
27442: PUSH
27443: LD_VAR 0 5
27447: ARRAY
27448: PUSH
27449: LD_INT 1
27451: PLUS
27452: PUSH
27453: EMPTY
27454: LIST
27455: LIST
27456: PPUSH
27457: LD_VAR 0 2
27461: PUSH
27462: LD_VAR 0 4
27466: ARRAY
27467: PUSH
27468: LD_VAR 0 2
27472: PUSH
27473: LD_VAR 0 4
27477: ARRAY
27478: PPUSH
27479: CALL_OW 255
27483: PUSH
27484: EMPTY
27485: LIST
27486: LIST
27487: PPUSH
27488: CALL 34943 0 3
27492: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
27493: LD_VAR 0 2
27497: PUSH
27498: LD_VAR 0 4
27502: ARRAY
27503: PPUSH
27504: LD_VAR 0 1
27508: PPUSH
27509: CALL_OW 255
27513: PPUSH
27514: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
27518: LD_VAR 0 2
27522: PUSH
27523: LD_VAR 0 4
27527: ARRAY
27528: PPUSH
27529: CALL_OW 141
// end ;
27533: GO 27365
27535: POP
27536: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
27537: LD_VAR 0 1
27541: PPUSH
27542: LD_EXP 102
27546: PUSH
27547: LD_VAR 0 5
27551: ARRAY
27552: PUSH
27553: LD_INT 0
27555: PLUS
27556: PPUSH
27557: CALL_OW 505
// end ;
27561: LD_VAR 0 3
27565: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
27566: LD_INT 0
27568: PPUSH
27569: PPUSH
27570: PPUSH
27571: PPUSH
// if not hack in hackTanks then
27572: LD_VAR 0 1
27576: PUSH
27577: LD_EXP 101
27581: IN
27582: NOT
27583: IFFALSE 27587
// exit ;
27585: GO 27827
// index := GetElementIndex ( hackTanks , hack ) ;
27587: LD_ADDR_VAR 0 4
27591: PUSH
27592: LD_EXP 101
27596: PPUSH
27597: LD_VAR 0 1
27601: PPUSH
27602: CALL 34728 0 2
27606: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
27607: LD_ADDR_VAR 0 3
27611: PUSH
27612: DOUBLE
27613: LD_EXP 102
27617: PUSH
27618: LD_VAR 0 4
27622: ARRAY
27623: INC
27624: ST_TO_ADDR
27625: LD_INT 1
27627: PUSH
27628: FOR_DOWNTO
27629: IFFALSE 27801
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
27631: LD_ADDR_VAR 0 5
27635: PUSH
27636: LD_EXP 102
27640: PUSH
27641: LD_VAR 0 4
27645: ARRAY
27646: PUSH
27647: LD_VAR 0 3
27651: ARRAY
27652: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
27653: LD_VAR 0 5
27657: PUSH
27658: LD_INT 1
27660: ARRAY
27661: PPUSH
27662: CALL_OW 302
27666: NOT
27667: PUSH
27668: LD_VAR 0 5
27672: PUSH
27673: LD_INT 1
27675: ARRAY
27676: PPUSH
27677: CALL_OW 255
27681: PUSH
27682: LD_VAR 0 1
27686: PPUSH
27687: CALL_OW 255
27691: NONEQUAL
27692: OR
27693: IFFALSE 27799
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
27695: LD_VAR 0 5
27699: PUSH
27700: LD_INT 1
27702: ARRAY
27703: PPUSH
27704: CALL_OW 305
27708: PUSH
27709: LD_VAR 0 5
27713: PUSH
27714: LD_INT 1
27716: ARRAY
27717: PPUSH
27718: CALL_OW 255
27722: PUSH
27723: LD_VAR 0 1
27727: PPUSH
27728: CALL_OW 255
27732: EQUAL
27733: AND
27734: IFFALSE 27758
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
27736: LD_VAR 0 5
27740: PUSH
27741: LD_INT 1
27743: ARRAY
27744: PPUSH
27745: LD_VAR 0 5
27749: PUSH
27750: LD_INT 2
27752: ARRAY
27753: PPUSH
27754: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
27758: LD_ADDR_EXP 102
27762: PUSH
27763: LD_EXP 102
27767: PPUSH
27768: LD_VAR 0 4
27772: PPUSH
27773: LD_EXP 102
27777: PUSH
27778: LD_VAR 0 4
27782: ARRAY
27783: PPUSH
27784: LD_VAR 0 3
27788: PPUSH
27789: CALL_OW 3
27793: PPUSH
27794: CALL_OW 1
27798: ST_TO_ADDR
// end ; end ;
27799: GO 27628
27801: POP
27802: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
27803: LD_VAR 0 1
27807: PPUSH
27808: LD_EXP 102
27812: PUSH
27813: LD_VAR 0 4
27817: ARRAY
27818: PUSH
27819: LD_INT 0
27821: PLUS
27822: PPUSH
27823: CALL_OW 505
// end ;
27827: LD_VAR 0 2
27831: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
27832: LD_INT 0
27834: PPUSH
27835: PPUSH
27836: PPUSH
27837: PPUSH
// if not hack in hackTanks then
27838: LD_VAR 0 1
27842: PUSH
27843: LD_EXP 101
27847: IN
27848: NOT
27849: IFFALSE 27853
// exit ;
27851: GO 27938
// index := GetElementIndex ( hackTanks , hack ) ;
27853: LD_ADDR_VAR 0 5
27857: PUSH
27858: LD_EXP 101
27862: PPUSH
27863: LD_VAR 0 1
27867: PPUSH
27868: CALL 34728 0 2
27872: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
27873: LD_ADDR_VAR 0 4
27877: PUSH
27878: DOUBLE
27879: LD_INT 1
27881: DEC
27882: ST_TO_ADDR
27883: LD_EXP 102
27887: PUSH
27888: LD_VAR 0 5
27892: ARRAY
27893: PUSH
27894: FOR_TO
27895: IFFALSE 27936
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
27897: LD_EXP 102
27901: PUSH
27902: LD_VAR 0 5
27906: ARRAY
27907: PUSH
27908: LD_VAR 0 4
27912: ARRAY
27913: PUSH
27914: LD_INT 1
27916: ARRAY
27917: PUSH
27918: LD_VAR 0 2
27922: EQUAL
27923: IFFALSE 27934
// KillUnit ( vehicle ) ;
27925: LD_VAR 0 2
27929: PPUSH
27930: CALL_OW 66
27934: GO 27894
27936: POP
27937: POP
// end ;
27938: LD_VAR 0 3
27942: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
27943: LD_EXP 106
27947: NOT
27948: IFFALSE 27983
27950: GO 27952
27952: DISABLE
// begin initMiner := true ;
27953: LD_ADDR_EXP 106
27957: PUSH
27958: LD_INT 1
27960: ST_TO_ADDR
// minersList := [ ] ;
27961: LD_ADDR_EXP 107
27965: PUSH
27966: EMPTY
27967: ST_TO_ADDR
// minerMinesList := [ ] ;
27968: LD_ADDR_EXP 108
27972: PUSH
27973: EMPTY
27974: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
27975: LD_ADDR_EXP 109
27979: PUSH
27980: LD_INT 5
27982: ST_TO_ADDR
// end ;
27983: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
27984: LD_EXP 106
27988: PUSH
27989: LD_INT 34
27991: PUSH
27992: LD_EXP 28
27996: PUSH
27997: EMPTY
27998: LIST
27999: LIST
28000: PPUSH
28001: CALL_OW 69
28005: AND
28006: IFFALSE 28469
28008: GO 28010
28010: DISABLE
28011: LD_INT 0
28013: PPUSH
28014: PPUSH
28015: PPUSH
28016: PPUSH
// begin enable ;
28017: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
28018: LD_ADDR_VAR 0 1
28022: PUSH
28023: LD_INT 34
28025: PUSH
28026: LD_EXP 28
28030: PUSH
28031: EMPTY
28032: LIST
28033: LIST
28034: PPUSH
28035: CALL_OW 69
28039: PUSH
28040: FOR_IN
28041: IFFALSE 28113
// begin if not i in minersList then
28043: LD_VAR 0 1
28047: PUSH
28048: LD_EXP 107
28052: IN
28053: NOT
28054: IFFALSE 28111
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
28056: LD_ADDR_EXP 107
28060: PUSH
28061: LD_EXP 107
28065: PPUSH
28066: LD_EXP 107
28070: PUSH
28071: LD_INT 1
28073: PLUS
28074: PPUSH
28075: LD_VAR 0 1
28079: PPUSH
28080: CALL_OW 1
28084: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
28085: LD_ADDR_EXP 108
28089: PUSH
28090: LD_EXP 108
28094: PPUSH
28095: LD_EXP 108
28099: PUSH
28100: LD_INT 1
28102: PLUS
28103: PPUSH
28104: EMPTY
28105: PPUSH
28106: CALL_OW 1
28110: ST_TO_ADDR
// end end ;
28111: GO 28040
28113: POP
28114: POP
// for i := minerMinesList downto 1 do
28115: LD_ADDR_VAR 0 1
28119: PUSH
28120: DOUBLE
28121: LD_EXP 108
28125: INC
28126: ST_TO_ADDR
28127: LD_INT 1
28129: PUSH
28130: FOR_DOWNTO
28131: IFFALSE 28467
// begin if IsLive ( minersList [ i ] ) then
28133: LD_EXP 107
28137: PUSH
28138: LD_VAR 0 1
28142: ARRAY
28143: PPUSH
28144: CALL_OW 300
28148: IFFALSE 28176
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
28150: LD_EXP 107
28154: PUSH
28155: LD_VAR 0 1
28159: ARRAY
28160: PPUSH
28161: LD_EXP 108
28165: PUSH
28166: LD_VAR 0 1
28170: ARRAY
28171: PPUSH
28172: CALL_OW 505
// if not minerMinesList [ i ] then
28176: LD_EXP 108
28180: PUSH
28181: LD_VAR 0 1
28185: ARRAY
28186: NOT
28187: IFFALSE 28191
// continue ;
28189: GO 28130
// for j := minerMinesList [ i ] downto 1 do
28191: LD_ADDR_VAR 0 2
28195: PUSH
28196: DOUBLE
28197: LD_EXP 108
28201: PUSH
28202: LD_VAR 0 1
28206: ARRAY
28207: INC
28208: ST_TO_ADDR
28209: LD_INT 1
28211: PUSH
28212: FOR_DOWNTO
28213: IFFALSE 28463
// begin side := GetSide ( minersList [ i ] ) ;
28215: LD_ADDR_VAR 0 3
28219: PUSH
28220: LD_EXP 107
28224: PUSH
28225: LD_VAR 0 1
28229: ARRAY
28230: PPUSH
28231: CALL_OW 255
28235: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
28236: LD_ADDR_VAR 0 4
28240: PUSH
28241: LD_EXP 108
28245: PUSH
28246: LD_VAR 0 1
28250: ARRAY
28251: PUSH
28252: LD_VAR 0 2
28256: ARRAY
28257: PUSH
28258: LD_INT 1
28260: ARRAY
28261: PPUSH
28262: LD_EXP 108
28266: PUSH
28267: LD_VAR 0 1
28271: ARRAY
28272: PUSH
28273: LD_VAR 0 2
28277: ARRAY
28278: PUSH
28279: LD_INT 2
28281: ARRAY
28282: PPUSH
28283: CALL_OW 428
28287: ST_TO_ADDR
// if not tmp then
28288: LD_VAR 0 4
28292: NOT
28293: IFFALSE 28297
// continue ;
28295: GO 28212
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
28297: LD_VAR 0 4
28301: PUSH
28302: LD_INT 81
28304: PUSH
28305: LD_VAR 0 3
28309: PUSH
28310: EMPTY
28311: LIST
28312: LIST
28313: PPUSH
28314: CALL_OW 69
28318: IN
28319: PUSH
28320: LD_EXP 108
28324: PUSH
28325: LD_VAR 0 1
28329: ARRAY
28330: PUSH
28331: LD_VAR 0 2
28335: ARRAY
28336: PUSH
28337: LD_INT 1
28339: ARRAY
28340: PPUSH
28341: LD_EXP 108
28345: PUSH
28346: LD_VAR 0 1
28350: ARRAY
28351: PUSH
28352: LD_VAR 0 2
28356: ARRAY
28357: PUSH
28358: LD_INT 2
28360: ARRAY
28361: PPUSH
28362: CALL_OW 458
28366: AND
28367: IFFALSE 28461
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
28369: LD_EXP 108
28373: PUSH
28374: LD_VAR 0 1
28378: ARRAY
28379: PUSH
28380: LD_VAR 0 2
28384: ARRAY
28385: PUSH
28386: LD_INT 1
28388: ARRAY
28389: PPUSH
28390: LD_EXP 108
28394: PUSH
28395: LD_VAR 0 1
28399: ARRAY
28400: PUSH
28401: LD_VAR 0 2
28405: ARRAY
28406: PUSH
28407: LD_INT 2
28409: ARRAY
28410: PPUSH
28411: LD_VAR 0 3
28415: PPUSH
28416: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
28420: LD_ADDR_EXP 108
28424: PUSH
28425: LD_EXP 108
28429: PPUSH
28430: LD_VAR 0 1
28434: PPUSH
28435: LD_EXP 108
28439: PUSH
28440: LD_VAR 0 1
28444: ARRAY
28445: PPUSH
28446: LD_VAR 0 2
28450: PPUSH
28451: CALL_OW 3
28455: PPUSH
28456: CALL_OW 1
28460: ST_TO_ADDR
// end ; end ;
28461: GO 28212
28463: POP
28464: POP
// end ;
28465: GO 28130
28467: POP
28468: POP
// end ;
28469: PPOPN 4
28471: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
28472: LD_INT 0
28474: PPUSH
28475: PPUSH
// result := false ;
28476: LD_ADDR_VAR 0 4
28480: PUSH
28481: LD_INT 0
28483: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
28484: LD_VAR 0 1
28488: PPUSH
28489: CALL_OW 264
28493: PUSH
28494: LD_EXP 28
28498: EQUAL
28499: NOT
28500: IFFALSE 28504
// exit ;
28502: GO 28744
// index := GetElementIndex ( minersList , unit ) ;
28504: LD_ADDR_VAR 0 5
28508: PUSH
28509: LD_EXP 107
28513: PPUSH
28514: LD_VAR 0 1
28518: PPUSH
28519: CALL 34728 0 2
28523: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
28524: LD_EXP 108
28528: PUSH
28529: LD_VAR 0 5
28533: ARRAY
28534: PUSH
28535: LD_EXP 109
28539: GREATEREQUAL
28540: IFFALSE 28544
// exit ;
28542: GO 28744
// ComMoveXY ( unit , x , y ) ;
28544: LD_VAR 0 1
28548: PPUSH
28549: LD_VAR 0 2
28553: PPUSH
28554: LD_VAR 0 3
28558: PPUSH
28559: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
28563: LD_INT 35
28565: PPUSH
28566: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
28570: LD_VAR 0 1
28574: PPUSH
28575: LD_VAR 0 2
28579: PPUSH
28580: LD_VAR 0 3
28584: PPUSH
28585: CALL 65500 0 3
28589: NOT
28590: PUSH
28591: LD_VAR 0 1
28595: PPUSH
28596: CALL_OW 314
28600: AND
28601: IFFALSE 28605
// exit ;
28603: GO 28744
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
28605: LD_VAR 0 2
28609: PPUSH
28610: LD_VAR 0 3
28614: PPUSH
28615: CALL_OW 428
28619: PUSH
28620: LD_VAR 0 1
28624: EQUAL
28625: PUSH
28626: LD_VAR 0 1
28630: PPUSH
28631: CALL_OW 314
28635: NOT
28636: AND
28637: IFFALSE 28563
// PlaySoundXY ( x , y , PlantMine ) ;
28639: LD_VAR 0 2
28643: PPUSH
28644: LD_VAR 0 3
28648: PPUSH
28649: LD_STRING PlantMine
28651: PPUSH
28652: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
28656: LD_VAR 0 2
28660: PPUSH
28661: LD_VAR 0 3
28665: PPUSH
28666: LD_VAR 0 1
28670: PPUSH
28671: CALL_OW 255
28675: PPUSH
28676: LD_INT 0
28678: PPUSH
28679: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
28683: LD_ADDR_EXP 108
28687: PUSH
28688: LD_EXP 108
28692: PPUSH
28693: LD_VAR 0 5
28697: PUSH
28698: LD_EXP 108
28702: PUSH
28703: LD_VAR 0 5
28707: ARRAY
28708: PUSH
28709: LD_INT 1
28711: PLUS
28712: PUSH
28713: EMPTY
28714: LIST
28715: LIST
28716: PPUSH
28717: LD_VAR 0 2
28721: PUSH
28722: LD_VAR 0 3
28726: PUSH
28727: EMPTY
28728: LIST
28729: LIST
28730: PPUSH
28731: CALL 34943 0 3
28735: ST_TO_ADDR
// result := true ;
28736: LD_ADDR_VAR 0 4
28740: PUSH
28741: LD_INT 1
28743: ST_TO_ADDR
// end ;
28744: LD_VAR 0 4
28748: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
28749: LD_INT 0
28751: PPUSH
28752: PPUSH
28753: PPUSH
// if not unit in minersList then
28754: LD_VAR 0 1
28758: PUSH
28759: LD_EXP 107
28763: IN
28764: NOT
28765: IFFALSE 28769
// exit ;
28767: GO 29161
// index := GetElementIndex ( minersList , unit ) ;
28769: LD_ADDR_VAR 0 6
28773: PUSH
28774: LD_EXP 107
28778: PPUSH
28779: LD_VAR 0 1
28783: PPUSH
28784: CALL 34728 0 2
28788: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
28789: LD_ADDR_VAR 0 5
28793: PUSH
28794: DOUBLE
28795: LD_EXP 108
28799: PUSH
28800: LD_VAR 0 6
28804: ARRAY
28805: INC
28806: ST_TO_ADDR
28807: LD_INT 1
28809: PUSH
28810: FOR_DOWNTO
28811: IFFALSE 28972
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
28813: LD_EXP 108
28817: PUSH
28818: LD_VAR 0 6
28822: ARRAY
28823: PUSH
28824: LD_VAR 0 5
28828: ARRAY
28829: PUSH
28830: LD_INT 1
28832: ARRAY
28833: PUSH
28834: LD_VAR 0 2
28838: EQUAL
28839: PUSH
28840: LD_EXP 108
28844: PUSH
28845: LD_VAR 0 6
28849: ARRAY
28850: PUSH
28851: LD_VAR 0 5
28855: ARRAY
28856: PUSH
28857: LD_INT 2
28859: ARRAY
28860: PUSH
28861: LD_VAR 0 3
28865: EQUAL
28866: AND
28867: IFFALSE 28970
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
28869: LD_EXP 108
28873: PUSH
28874: LD_VAR 0 6
28878: ARRAY
28879: PUSH
28880: LD_VAR 0 5
28884: ARRAY
28885: PUSH
28886: LD_INT 1
28888: ARRAY
28889: PPUSH
28890: LD_EXP 108
28894: PUSH
28895: LD_VAR 0 6
28899: ARRAY
28900: PUSH
28901: LD_VAR 0 5
28905: ARRAY
28906: PUSH
28907: LD_INT 2
28909: ARRAY
28910: PPUSH
28911: LD_VAR 0 1
28915: PPUSH
28916: CALL_OW 255
28920: PPUSH
28921: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
28925: LD_ADDR_EXP 108
28929: PUSH
28930: LD_EXP 108
28934: PPUSH
28935: LD_VAR 0 6
28939: PPUSH
28940: LD_EXP 108
28944: PUSH
28945: LD_VAR 0 6
28949: ARRAY
28950: PPUSH
28951: LD_VAR 0 5
28955: PPUSH
28956: CALL_OW 3
28960: PPUSH
28961: CALL_OW 1
28965: ST_TO_ADDR
// exit ;
28966: POP
28967: POP
28968: GO 29161
// end ; end ;
28970: GO 28810
28972: POP
28973: POP
// for i := minerMinesList [ index ] downto 1 do
28974: LD_ADDR_VAR 0 5
28978: PUSH
28979: DOUBLE
28980: LD_EXP 108
28984: PUSH
28985: LD_VAR 0 6
28989: ARRAY
28990: INC
28991: ST_TO_ADDR
28992: LD_INT 1
28994: PUSH
28995: FOR_DOWNTO
28996: IFFALSE 29159
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
28998: LD_EXP 108
29002: PUSH
29003: LD_VAR 0 6
29007: ARRAY
29008: PUSH
29009: LD_VAR 0 5
29013: ARRAY
29014: PUSH
29015: LD_INT 1
29017: ARRAY
29018: PPUSH
29019: LD_EXP 108
29023: PUSH
29024: LD_VAR 0 6
29028: ARRAY
29029: PUSH
29030: LD_VAR 0 5
29034: ARRAY
29035: PUSH
29036: LD_INT 2
29038: ARRAY
29039: PPUSH
29040: LD_VAR 0 2
29044: PPUSH
29045: LD_VAR 0 3
29049: PPUSH
29050: CALL_OW 298
29054: PUSH
29055: LD_INT 6
29057: LESS
29058: IFFALSE 29157
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
29060: LD_EXP 108
29064: PUSH
29065: LD_VAR 0 6
29069: ARRAY
29070: PUSH
29071: LD_VAR 0 5
29075: ARRAY
29076: PUSH
29077: LD_INT 1
29079: ARRAY
29080: PPUSH
29081: LD_EXP 108
29085: PUSH
29086: LD_VAR 0 6
29090: ARRAY
29091: PUSH
29092: LD_VAR 0 5
29096: ARRAY
29097: PUSH
29098: LD_INT 2
29100: ARRAY
29101: PPUSH
29102: LD_VAR 0 1
29106: PPUSH
29107: CALL_OW 255
29111: PPUSH
29112: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
29116: LD_ADDR_EXP 108
29120: PUSH
29121: LD_EXP 108
29125: PPUSH
29126: LD_VAR 0 6
29130: PPUSH
29131: LD_EXP 108
29135: PUSH
29136: LD_VAR 0 6
29140: ARRAY
29141: PPUSH
29142: LD_VAR 0 5
29146: PPUSH
29147: CALL_OW 3
29151: PPUSH
29152: CALL_OW 1
29156: ST_TO_ADDR
// end ; end ;
29157: GO 28995
29159: POP
29160: POP
// end ;
29161: LD_VAR 0 4
29165: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
29166: LD_INT 0
29168: PPUSH
29169: PPUSH
29170: PPUSH
29171: PPUSH
29172: PPUSH
29173: PPUSH
29174: PPUSH
29175: PPUSH
29176: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
29177: LD_VAR 0 1
29181: PPUSH
29182: CALL_OW 264
29186: PUSH
29187: LD_EXP 28
29191: EQUAL
29192: NOT
29193: PUSH
29194: LD_VAR 0 1
29198: PUSH
29199: LD_EXP 107
29203: IN
29204: NOT
29205: OR
29206: IFFALSE 29210
// exit ;
29208: GO 29532
// index := GetElementIndex ( minersList , unit ) ;
29210: LD_ADDR_VAR 0 6
29214: PUSH
29215: LD_EXP 107
29219: PPUSH
29220: LD_VAR 0 1
29224: PPUSH
29225: CALL 34728 0 2
29229: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
29230: LD_ADDR_VAR 0 8
29234: PUSH
29235: LD_EXP 109
29239: PUSH
29240: LD_EXP 108
29244: PUSH
29245: LD_VAR 0 6
29249: ARRAY
29250: MINUS
29251: ST_TO_ADDR
// if not minesFreeAmount then
29252: LD_VAR 0 8
29256: NOT
29257: IFFALSE 29261
// exit ;
29259: GO 29532
// tmp := [ ] ;
29261: LD_ADDR_VAR 0 7
29265: PUSH
29266: EMPTY
29267: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
29268: LD_ADDR_VAR 0 5
29272: PUSH
29273: DOUBLE
29274: LD_INT 1
29276: DEC
29277: ST_TO_ADDR
29278: LD_VAR 0 8
29282: PUSH
29283: FOR_TO
29284: IFFALSE 29479
// begin _d := rand ( 0 , 5 ) ;
29286: LD_ADDR_VAR 0 11
29290: PUSH
29291: LD_INT 0
29293: PPUSH
29294: LD_INT 5
29296: PPUSH
29297: CALL_OW 12
29301: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
29302: LD_ADDR_VAR 0 12
29306: PUSH
29307: LD_INT 2
29309: PPUSH
29310: LD_INT 6
29312: PPUSH
29313: CALL_OW 12
29317: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
29318: LD_ADDR_VAR 0 9
29322: PUSH
29323: LD_VAR 0 2
29327: PPUSH
29328: LD_VAR 0 11
29332: PPUSH
29333: LD_VAR 0 12
29337: PPUSH
29338: CALL_OW 272
29342: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
29343: LD_ADDR_VAR 0 10
29347: PUSH
29348: LD_VAR 0 3
29352: PPUSH
29353: LD_VAR 0 11
29357: PPUSH
29358: LD_VAR 0 12
29362: PPUSH
29363: CALL_OW 273
29367: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
29368: LD_VAR 0 9
29372: PPUSH
29373: LD_VAR 0 10
29377: PPUSH
29378: CALL_OW 488
29382: PUSH
29383: LD_VAR 0 9
29387: PUSH
29388: LD_VAR 0 10
29392: PUSH
29393: EMPTY
29394: LIST
29395: LIST
29396: PUSH
29397: LD_VAR 0 7
29401: IN
29402: NOT
29403: AND
29404: PUSH
29405: LD_VAR 0 9
29409: PPUSH
29410: LD_VAR 0 10
29414: PPUSH
29415: CALL_OW 458
29419: NOT
29420: AND
29421: IFFALSE 29463
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
29423: LD_ADDR_VAR 0 7
29427: PUSH
29428: LD_VAR 0 7
29432: PPUSH
29433: LD_VAR 0 7
29437: PUSH
29438: LD_INT 1
29440: PLUS
29441: PPUSH
29442: LD_VAR 0 9
29446: PUSH
29447: LD_VAR 0 10
29451: PUSH
29452: EMPTY
29453: LIST
29454: LIST
29455: PPUSH
29456: CALL_OW 1
29460: ST_TO_ADDR
29461: GO 29477
// i := i - 1 ;
29463: LD_ADDR_VAR 0 5
29467: PUSH
29468: LD_VAR 0 5
29472: PUSH
29473: LD_INT 1
29475: MINUS
29476: ST_TO_ADDR
// end ;
29477: GO 29283
29479: POP
29480: POP
// for i in tmp do
29481: LD_ADDR_VAR 0 5
29485: PUSH
29486: LD_VAR 0 7
29490: PUSH
29491: FOR_IN
29492: IFFALSE 29530
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
29494: LD_VAR 0 1
29498: PPUSH
29499: LD_VAR 0 5
29503: PUSH
29504: LD_INT 1
29506: ARRAY
29507: PPUSH
29508: LD_VAR 0 5
29512: PUSH
29513: LD_INT 2
29515: ARRAY
29516: PPUSH
29517: CALL 28472 0 3
29521: NOT
29522: IFFALSE 29528
// exit ;
29524: POP
29525: POP
29526: GO 29532
29528: GO 29491
29530: POP
29531: POP
// end ;
29532: LD_VAR 0 4
29536: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
29537: LD_INT 0
29539: PPUSH
29540: PPUSH
29541: PPUSH
29542: PPUSH
29543: PPUSH
29544: PPUSH
29545: PPUSH
// if not GetClass ( unit ) = class_sniper then
29546: LD_VAR 0 1
29550: PPUSH
29551: CALL_OW 257
29555: PUSH
29556: LD_INT 5
29558: EQUAL
29559: NOT
29560: IFFALSE 29564
// exit ;
29562: GO 29952
// dist := 8 ;
29564: LD_ADDR_VAR 0 5
29568: PUSH
29569: LD_INT 8
29571: ST_TO_ADDR
// viewRange := 12 ;
29572: LD_ADDR_VAR 0 7
29576: PUSH
29577: LD_INT 12
29579: ST_TO_ADDR
// side := GetSide ( unit ) ;
29580: LD_ADDR_VAR 0 6
29584: PUSH
29585: LD_VAR 0 1
29589: PPUSH
29590: CALL_OW 255
29594: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
29595: LD_INT 61
29597: PPUSH
29598: LD_VAR 0 6
29602: PPUSH
29603: CALL_OW 321
29607: PUSH
29608: LD_INT 2
29610: EQUAL
29611: IFFALSE 29621
// viewRange := 16 ;
29613: LD_ADDR_VAR 0 7
29617: PUSH
29618: LD_INT 16
29620: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
29621: LD_VAR 0 1
29625: PPUSH
29626: LD_VAR 0 2
29630: PPUSH
29631: LD_VAR 0 3
29635: PPUSH
29636: CALL_OW 297
29640: PUSH
29641: LD_VAR 0 5
29645: GREATER
29646: IFFALSE 29725
// begin ComMoveXY ( unit , x , y ) ;
29648: LD_VAR 0 1
29652: PPUSH
29653: LD_VAR 0 2
29657: PPUSH
29658: LD_VAR 0 3
29662: PPUSH
29663: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
29667: LD_INT 35
29669: PPUSH
29670: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
29674: LD_VAR 0 1
29678: PPUSH
29679: LD_VAR 0 2
29683: PPUSH
29684: LD_VAR 0 3
29688: PPUSH
29689: CALL 65500 0 3
29693: NOT
29694: IFFALSE 29698
// exit ;
29696: GO 29952
// until GetDistUnitXY ( unit , x , y ) < dist ;
29698: LD_VAR 0 1
29702: PPUSH
29703: LD_VAR 0 2
29707: PPUSH
29708: LD_VAR 0 3
29712: PPUSH
29713: CALL_OW 297
29717: PUSH
29718: LD_VAR 0 5
29722: LESS
29723: IFFALSE 29667
// end ; ComTurnXY ( unit , x , y ) ;
29725: LD_VAR 0 1
29729: PPUSH
29730: LD_VAR 0 2
29734: PPUSH
29735: LD_VAR 0 3
29739: PPUSH
29740: CALL_OW 118
// wait ( 5 ) ;
29744: LD_INT 5
29746: PPUSH
29747: CALL_OW 67
// _d := GetDir ( unit ) ;
29751: LD_ADDR_VAR 0 10
29755: PUSH
29756: LD_VAR 0 1
29760: PPUSH
29761: CALL_OW 254
29765: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
29766: LD_ADDR_VAR 0 8
29770: PUSH
29771: LD_VAR 0 1
29775: PPUSH
29776: CALL_OW 250
29780: PPUSH
29781: LD_VAR 0 10
29785: PPUSH
29786: LD_VAR 0 5
29790: PPUSH
29791: CALL_OW 272
29795: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
29796: LD_ADDR_VAR 0 9
29800: PUSH
29801: LD_VAR 0 1
29805: PPUSH
29806: CALL_OW 251
29810: PPUSH
29811: LD_VAR 0 10
29815: PPUSH
29816: LD_VAR 0 5
29820: PPUSH
29821: CALL_OW 273
29825: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29826: LD_VAR 0 8
29830: PPUSH
29831: LD_VAR 0 9
29835: PPUSH
29836: CALL_OW 488
29840: NOT
29841: IFFALSE 29845
// exit ;
29843: GO 29952
// ComAnimCustom ( unit , 1 ) ;
29845: LD_VAR 0 1
29849: PPUSH
29850: LD_INT 1
29852: PPUSH
29853: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
29857: LD_VAR 0 8
29861: PPUSH
29862: LD_VAR 0 9
29866: PPUSH
29867: LD_VAR 0 6
29871: PPUSH
29872: LD_VAR 0 7
29876: PPUSH
29877: CALL_OW 330
// repeat wait ( 1 ) ;
29881: LD_INT 1
29883: PPUSH
29884: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
29888: LD_VAR 0 1
29892: PPUSH
29893: CALL_OW 316
29897: PUSH
29898: LD_VAR 0 1
29902: PPUSH
29903: CALL_OW 314
29907: OR
29908: PUSH
29909: LD_VAR 0 1
29913: PPUSH
29914: CALL_OW 302
29918: NOT
29919: OR
29920: PUSH
29921: LD_VAR 0 1
29925: PPUSH
29926: CALL_OW 301
29930: OR
29931: IFFALSE 29881
// RemoveSeeing ( _x , _y , side ) ;
29933: LD_VAR 0 8
29937: PPUSH
29938: LD_VAR 0 9
29942: PPUSH
29943: LD_VAR 0 6
29947: PPUSH
29948: CALL_OW 331
// end ; end_of_file
29952: LD_VAR 0 4
29956: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
29957: LD_INT 0
29959: PPUSH
29960: PPUSH
// if exist_mode then
29961: LD_VAR 0 2
29965: IFFALSE 29990
// unit := CreateCharacter ( prefix & ident ) else
29967: LD_ADDR_VAR 0 5
29971: PUSH
29972: LD_VAR 0 3
29976: PUSH
29977: LD_VAR 0 1
29981: STR
29982: PPUSH
29983: CALL_OW 34
29987: ST_TO_ADDR
29988: GO 30005
// unit := NewCharacter ( ident ) ;
29990: LD_ADDR_VAR 0 5
29994: PUSH
29995: LD_VAR 0 1
29999: PPUSH
30000: CALL_OW 25
30004: ST_TO_ADDR
// result := unit ;
30005: LD_ADDR_VAR 0 4
30009: PUSH
30010: LD_VAR 0 5
30014: ST_TO_ADDR
// end ;
30015: LD_VAR 0 4
30019: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
30020: LD_INT 0
30022: PPUSH
30023: PPUSH
// if not side or not nation then
30024: LD_VAR 0 1
30028: NOT
30029: PUSH
30030: LD_VAR 0 2
30034: NOT
30035: OR
30036: IFFALSE 30040
// exit ;
30038: GO 30808
// case nation of nation_american :
30040: LD_VAR 0 2
30044: PUSH
30045: LD_INT 1
30047: DOUBLE
30048: EQUAL
30049: IFTRUE 30053
30051: GO 30267
30053: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
30054: LD_ADDR_VAR 0 4
30058: PUSH
30059: LD_INT 35
30061: PUSH
30062: LD_INT 45
30064: PUSH
30065: LD_INT 46
30067: PUSH
30068: LD_INT 47
30070: PUSH
30071: LD_INT 82
30073: PUSH
30074: LD_INT 83
30076: PUSH
30077: LD_INT 84
30079: PUSH
30080: LD_INT 85
30082: PUSH
30083: LD_INT 86
30085: PUSH
30086: LD_INT 1
30088: PUSH
30089: LD_INT 2
30091: PUSH
30092: LD_INT 6
30094: PUSH
30095: LD_INT 15
30097: PUSH
30098: LD_INT 16
30100: PUSH
30101: LD_INT 7
30103: PUSH
30104: LD_INT 12
30106: PUSH
30107: LD_INT 13
30109: PUSH
30110: LD_INT 10
30112: PUSH
30113: LD_INT 14
30115: PUSH
30116: LD_INT 20
30118: PUSH
30119: LD_INT 21
30121: PUSH
30122: LD_INT 22
30124: PUSH
30125: LD_INT 25
30127: PUSH
30128: LD_INT 32
30130: PUSH
30131: LD_INT 27
30133: PUSH
30134: LD_INT 36
30136: PUSH
30137: LD_INT 69
30139: PUSH
30140: LD_INT 39
30142: PUSH
30143: LD_INT 34
30145: PUSH
30146: LD_INT 40
30148: PUSH
30149: LD_INT 48
30151: PUSH
30152: LD_INT 49
30154: PUSH
30155: LD_INT 50
30157: PUSH
30158: LD_INT 51
30160: PUSH
30161: LD_INT 52
30163: PUSH
30164: LD_INT 53
30166: PUSH
30167: LD_INT 54
30169: PUSH
30170: LD_INT 55
30172: PUSH
30173: LD_INT 56
30175: PUSH
30176: LD_INT 57
30178: PUSH
30179: LD_INT 58
30181: PUSH
30182: LD_INT 59
30184: PUSH
30185: LD_INT 60
30187: PUSH
30188: LD_INT 61
30190: PUSH
30191: LD_INT 62
30193: PUSH
30194: LD_INT 80
30196: PUSH
30197: LD_INT 82
30199: PUSH
30200: LD_INT 83
30202: PUSH
30203: LD_INT 84
30205: PUSH
30206: LD_INT 85
30208: PUSH
30209: LD_INT 86
30211: PUSH
30212: EMPTY
30213: LIST
30214: LIST
30215: LIST
30216: LIST
30217: LIST
30218: LIST
30219: LIST
30220: LIST
30221: LIST
30222: LIST
30223: LIST
30224: LIST
30225: LIST
30226: LIST
30227: LIST
30228: LIST
30229: LIST
30230: LIST
30231: LIST
30232: LIST
30233: LIST
30234: LIST
30235: LIST
30236: LIST
30237: LIST
30238: LIST
30239: LIST
30240: LIST
30241: LIST
30242: LIST
30243: LIST
30244: LIST
30245: LIST
30246: LIST
30247: LIST
30248: LIST
30249: LIST
30250: LIST
30251: LIST
30252: LIST
30253: LIST
30254: LIST
30255: LIST
30256: LIST
30257: LIST
30258: LIST
30259: LIST
30260: LIST
30261: LIST
30262: LIST
30263: LIST
30264: ST_TO_ADDR
30265: GO 30732
30267: LD_INT 2
30269: DOUBLE
30270: EQUAL
30271: IFTRUE 30275
30273: GO 30501
30275: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
30276: LD_ADDR_VAR 0 4
30280: PUSH
30281: LD_INT 35
30283: PUSH
30284: LD_INT 45
30286: PUSH
30287: LD_INT 46
30289: PUSH
30290: LD_INT 47
30292: PUSH
30293: LD_INT 82
30295: PUSH
30296: LD_INT 83
30298: PUSH
30299: LD_INT 84
30301: PUSH
30302: LD_INT 85
30304: PUSH
30305: LD_INT 87
30307: PUSH
30308: LD_INT 70
30310: PUSH
30311: LD_INT 1
30313: PUSH
30314: LD_INT 11
30316: PUSH
30317: LD_INT 3
30319: PUSH
30320: LD_INT 4
30322: PUSH
30323: LD_INT 5
30325: PUSH
30326: LD_INT 6
30328: PUSH
30329: LD_INT 15
30331: PUSH
30332: LD_INT 18
30334: PUSH
30335: LD_INT 7
30337: PUSH
30338: LD_INT 17
30340: PUSH
30341: LD_INT 8
30343: PUSH
30344: LD_INT 20
30346: PUSH
30347: LD_INT 21
30349: PUSH
30350: LD_INT 22
30352: PUSH
30353: LD_INT 72
30355: PUSH
30356: LD_INT 26
30358: PUSH
30359: LD_INT 69
30361: PUSH
30362: LD_INT 39
30364: PUSH
30365: LD_INT 40
30367: PUSH
30368: LD_INT 41
30370: PUSH
30371: LD_INT 42
30373: PUSH
30374: LD_INT 43
30376: PUSH
30377: LD_INT 48
30379: PUSH
30380: LD_INT 49
30382: PUSH
30383: LD_INT 50
30385: PUSH
30386: LD_INT 51
30388: PUSH
30389: LD_INT 52
30391: PUSH
30392: LD_INT 53
30394: PUSH
30395: LD_INT 54
30397: PUSH
30398: LD_INT 55
30400: PUSH
30401: LD_INT 56
30403: PUSH
30404: LD_INT 60
30406: PUSH
30407: LD_INT 61
30409: PUSH
30410: LD_INT 62
30412: PUSH
30413: LD_INT 66
30415: PUSH
30416: LD_INT 67
30418: PUSH
30419: LD_INT 68
30421: PUSH
30422: LD_INT 81
30424: PUSH
30425: LD_INT 82
30427: PUSH
30428: LD_INT 83
30430: PUSH
30431: LD_INT 84
30433: PUSH
30434: LD_INT 85
30436: PUSH
30437: LD_INT 87
30439: PUSH
30440: LD_INT 88
30442: PUSH
30443: EMPTY
30444: LIST
30445: LIST
30446: LIST
30447: LIST
30448: LIST
30449: LIST
30450: LIST
30451: LIST
30452: LIST
30453: LIST
30454: LIST
30455: LIST
30456: LIST
30457: LIST
30458: LIST
30459: LIST
30460: LIST
30461: LIST
30462: LIST
30463: LIST
30464: LIST
30465: LIST
30466: LIST
30467: LIST
30468: LIST
30469: LIST
30470: LIST
30471: LIST
30472: LIST
30473: LIST
30474: LIST
30475: LIST
30476: LIST
30477: LIST
30478: LIST
30479: LIST
30480: LIST
30481: LIST
30482: LIST
30483: LIST
30484: LIST
30485: LIST
30486: LIST
30487: LIST
30488: LIST
30489: LIST
30490: LIST
30491: LIST
30492: LIST
30493: LIST
30494: LIST
30495: LIST
30496: LIST
30497: LIST
30498: ST_TO_ADDR
30499: GO 30732
30501: LD_INT 3
30503: DOUBLE
30504: EQUAL
30505: IFTRUE 30509
30507: GO 30731
30509: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
30510: LD_ADDR_VAR 0 4
30514: PUSH
30515: LD_INT 46
30517: PUSH
30518: LD_INT 47
30520: PUSH
30521: LD_INT 1
30523: PUSH
30524: LD_INT 2
30526: PUSH
30527: LD_INT 82
30529: PUSH
30530: LD_INT 83
30532: PUSH
30533: LD_INT 84
30535: PUSH
30536: LD_INT 85
30538: PUSH
30539: LD_INT 86
30541: PUSH
30542: LD_INT 11
30544: PUSH
30545: LD_INT 9
30547: PUSH
30548: LD_INT 20
30550: PUSH
30551: LD_INT 19
30553: PUSH
30554: LD_INT 21
30556: PUSH
30557: LD_INT 24
30559: PUSH
30560: LD_INT 22
30562: PUSH
30563: LD_INT 25
30565: PUSH
30566: LD_INT 28
30568: PUSH
30569: LD_INT 29
30571: PUSH
30572: LD_INT 30
30574: PUSH
30575: LD_INT 31
30577: PUSH
30578: LD_INT 37
30580: PUSH
30581: LD_INT 38
30583: PUSH
30584: LD_INT 32
30586: PUSH
30587: LD_INT 27
30589: PUSH
30590: LD_INT 33
30592: PUSH
30593: LD_INT 69
30595: PUSH
30596: LD_INT 39
30598: PUSH
30599: LD_INT 34
30601: PUSH
30602: LD_INT 40
30604: PUSH
30605: LD_INT 71
30607: PUSH
30608: LD_INT 23
30610: PUSH
30611: LD_INT 44
30613: PUSH
30614: LD_INT 48
30616: PUSH
30617: LD_INT 49
30619: PUSH
30620: LD_INT 50
30622: PUSH
30623: LD_INT 51
30625: PUSH
30626: LD_INT 52
30628: PUSH
30629: LD_INT 53
30631: PUSH
30632: LD_INT 54
30634: PUSH
30635: LD_INT 55
30637: PUSH
30638: LD_INT 56
30640: PUSH
30641: LD_INT 57
30643: PUSH
30644: LD_INT 58
30646: PUSH
30647: LD_INT 59
30649: PUSH
30650: LD_INT 63
30652: PUSH
30653: LD_INT 64
30655: PUSH
30656: LD_INT 65
30658: PUSH
30659: LD_INT 82
30661: PUSH
30662: LD_INT 83
30664: PUSH
30665: LD_INT 84
30667: PUSH
30668: LD_INT 85
30670: PUSH
30671: LD_INT 86
30673: PUSH
30674: EMPTY
30675: LIST
30676: LIST
30677: LIST
30678: LIST
30679: LIST
30680: LIST
30681: LIST
30682: LIST
30683: LIST
30684: LIST
30685: LIST
30686: LIST
30687: LIST
30688: LIST
30689: LIST
30690: LIST
30691: LIST
30692: LIST
30693: LIST
30694: LIST
30695: LIST
30696: LIST
30697: LIST
30698: LIST
30699: LIST
30700: LIST
30701: LIST
30702: LIST
30703: LIST
30704: LIST
30705: LIST
30706: LIST
30707: LIST
30708: LIST
30709: LIST
30710: LIST
30711: LIST
30712: LIST
30713: LIST
30714: LIST
30715: LIST
30716: LIST
30717: LIST
30718: LIST
30719: LIST
30720: LIST
30721: LIST
30722: LIST
30723: LIST
30724: LIST
30725: LIST
30726: LIST
30727: LIST
30728: ST_TO_ADDR
30729: GO 30732
30731: POP
// if state > - 1 and state < 3 then
30732: LD_VAR 0 3
30736: PUSH
30737: LD_INT 1
30739: NEG
30740: GREATER
30741: PUSH
30742: LD_VAR 0 3
30746: PUSH
30747: LD_INT 3
30749: LESS
30750: AND
30751: IFFALSE 30808
// for i in result do
30753: LD_ADDR_VAR 0 5
30757: PUSH
30758: LD_VAR 0 4
30762: PUSH
30763: FOR_IN
30764: IFFALSE 30806
// if GetTech ( i , side ) <> state then
30766: LD_VAR 0 5
30770: PPUSH
30771: LD_VAR 0 1
30775: PPUSH
30776: CALL_OW 321
30780: PUSH
30781: LD_VAR 0 3
30785: NONEQUAL
30786: IFFALSE 30804
// result := result diff i ;
30788: LD_ADDR_VAR 0 4
30792: PUSH
30793: LD_VAR 0 4
30797: PUSH
30798: LD_VAR 0 5
30802: DIFF
30803: ST_TO_ADDR
30804: GO 30763
30806: POP
30807: POP
// end ;
30808: LD_VAR 0 4
30812: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
30813: LD_INT 0
30815: PPUSH
30816: PPUSH
30817: PPUSH
// result := true ;
30818: LD_ADDR_VAR 0 3
30822: PUSH
30823: LD_INT 1
30825: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
30826: LD_ADDR_VAR 0 5
30830: PUSH
30831: LD_VAR 0 2
30835: PPUSH
30836: CALL_OW 480
30840: ST_TO_ADDR
// if not tmp then
30841: LD_VAR 0 5
30845: NOT
30846: IFFALSE 30850
// exit ;
30848: GO 30899
// for i in tmp do
30850: LD_ADDR_VAR 0 4
30854: PUSH
30855: LD_VAR 0 5
30859: PUSH
30860: FOR_IN
30861: IFFALSE 30897
// if GetTech ( i , side ) <> state_researched then
30863: LD_VAR 0 4
30867: PPUSH
30868: LD_VAR 0 1
30872: PPUSH
30873: CALL_OW 321
30877: PUSH
30878: LD_INT 2
30880: NONEQUAL
30881: IFFALSE 30895
// begin result := false ;
30883: LD_ADDR_VAR 0 3
30887: PUSH
30888: LD_INT 0
30890: ST_TO_ADDR
// exit ;
30891: POP
30892: POP
30893: GO 30899
// end ;
30895: GO 30860
30897: POP
30898: POP
// end ;
30899: LD_VAR 0 3
30903: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
30904: LD_INT 0
30906: PPUSH
30907: PPUSH
30908: PPUSH
30909: PPUSH
30910: PPUSH
30911: PPUSH
30912: PPUSH
30913: PPUSH
30914: PPUSH
30915: PPUSH
30916: PPUSH
30917: PPUSH
30918: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
30919: LD_VAR 0 1
30923: NOT
30924: PUSH
30925: LD_VAR 0 1
30929: PPUSH
30930: CALL_OW 257
30934: PUSH
30935: LD_INT 9
30937: NONEQUAL
30938: OR
30939: IFFALSE 30943
// exit ;
30941: GO 31516
// side := GetSide ( unit ) ;
30943: LD_ADDR_VAR 0 9
30947: PUSH
30948: LD_VAR 0 1
30952: PPUSH
30953: CALL_OW 255
30957: ST_TO_ADDR
// tech_space := tech_spacanom ;
30958: LD_ADDR_VAR 0 12
30962: PUSH
30963: LD_INT 29
30965: ST_TO_ADDR
// tech_time := tech_taurad ;
30966: LD_ADDR_VAR 0 13
30970: PUSH
30971: LD_INT 28
30973: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
30974: LD_ADDR_VAR 0 11
30978: PUSH
30979: LD_VAR 0 1
30983: PPUSH
30984: CALL_OW 310
30988: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
30989: LD_VAR 0 11
30993: PPUSH
30994: CALL_OW 247
30998: PUSH
30999: LD_INT 2
31001: EQUAL
31002: IFFALSE 31006
// exit ;
31004: GO 31516
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31006: LD_ADDR_VAR 0 8
31010: PUSH
31011: LD_INT 81
31013: PUSH
31014: LD_VAR 0 9
31018: PUSH
31019: EMPTY
31020: LIST
31021: LIST
31022: PUSH
31023: LD_INT 3
31025: PUSH
31026: LD_INT 21
31028: PUSH
31029: LD_INT 3
31031: PUSH
31032: EMPTY
31033: LIST
31034: LIST
31035: PUSH
31036: EMPTY
31037: LIST
31038: LIST
31039: PUSH
31040: EMPTY
31041: LIST
31042: LIST
31043: PPUSH
31044: CALL_OW 69
31048: ST_TO_ADDR
// if not tmp then
31049: LD_VAR 0 8
31053: NOT
31054: IFFALSE 31058
// exit ;
31056: GO 31516
// if in_unit then
31058: LD_VAR 0 11
31062: IFFALSE 31086
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
31064: LD_ADDR_VAR 0 10
31068: PUSH
31069: LD_VAR 0 8
31073: PPUSH
31074: LD_VAR 0 11
31078: PPUSH
31079: CALL_OW 74
31083: ST_TO_ADDR
31084: GO 31106
// enemy := NearestUnitToUnit ( tmp , unit ) ;
31086: LD_ADDR_VAR 0 10
31090: PUSH
31091: LD_VAR 0 8
31095: PPUSH
31096: LD_VAR 0 1
31100: PPUSH
31101: CALL_OW 74
31105: ST_TO_ADDR
// if not enemy then
31106: LD_VAR 0 10
31110: NOT
31111: IFFALSE 31115
// exit ;
31113: GO 31516
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
31115: LD_VAR 0 11
31119: PUSH
31120: LD_VAR 0 11
31124: PPUSH
31125: LD_VAR 0 10
31129: PPUSH
31130: CALL_OW 296
31134: PUSH
31135: LD_INT 13
31137: GREATER
31138: AND
31139: PUSH
31140: LD_VAR 0 1
31144: PPUSH
31145: LD_VAR 0 10
31149: PPUSH
31150: CALL_OW 296
31154: PUSH
31155: LD_INT 12
31157: GREATER
31158: OR
31159: IFFALSE 31163
// exit ;
31161: GO 31516
// missile := [ 1 ] ;
31163: LD_ADDR_VAR 0 14
31167: PUSH
31168: LD_INT 1
31170: PUSH
31171: EMPTY
31172: LIST
31173: ST_TO_ADDR
// if Researched ( side , tech_space ) then
31174: LD_VAR 0 9
31178: PPUSH
31179: LD_VAR 0 12
31183: PPUSH
31184: CALL_OW 325
31188: IFFALSE 31217
// missile := Insert ( missile , missile + 1 , 2 ) ;
31190: LD_ADDR_VAR 0 14
31194: PUSH
31195: LD_VAR 0 14
31199: PPUSH
31200: LD_VAR 0 14
31204: PUSH
31205: LD_INT 1
31207: PLUS
31208: PPUSH
31209: LD_INT 2
31211: PPUSH
31212: CALL_OW 2
31216: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
31217: LD_VAR 0 9
31221: PPUSH
31222: LD_VAR 0 13
31226: PPUSH
31227: CALL_OW 325
31231: PUSH
31232: LD_VAR 0 10
31236: PPUSH
31237: CALL_OW 255
31241: PPUSH
31242: LD_VAR 0 13
31246: PPUSH
31247: CALL_OW 325
31251: NOT
31252: AND
31253: IFFALSE 31282
// missile := Insert ( missile , missile + 1 , 3 ) ;
31255: LD_ADDR_VAR 0 14
31259: PUSH
31260: LD_VAR 0 14
31264: PPUSH
31265: LD_VAR 0 14
31269: PUSH
31270: LD_INT 1
31272: PLUS
31273: PPUSH
31274: LD_INT 3
31276: PPUSH
31277: CALL_OW 2
31281: ST_TO_ADDR
// if missile < 2 then
31282: LD_VAR 0 14
31286: PUSH
31287: LD_INT 2
31289: LESS
31290: IFFALSE 31294
// exit ;
31292: GO 31516
// x := GetX ( enemy ) ;
31294: LD_ADDR_VAR 0 4
31298: PUSH
31299: LD_VAR 0 10
31303: PPUSH
31304: CALL_OW 250
31308: ST_TO_ADDR
// y := GetY ( enemy ) ;
31309: LD_ADDR_VAR 0 5
31313: PUSH
31314: LD_VAR 0 10
31318: PPUSH
31319: CALL_OW 251
31323: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
31324: LD_ADDR_VAR 0 6
31328: PUSH
31329: LD_VAR 0 4
31333: PUSH
31334: LD_INT 1
31336: NEG
31337: PPUSH
31338: LD_INT 1
31340: PPUSH
31341: CALL_OW 12
31345: PLUS
31346: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
31347: LD_ADDR_VAR 0 7
31351: PUSH
31352: LD_VAR 0 5
31356: PUSH
31357: LD_INT 1
31359: NEG
31360: PPUSH
31361: LD_INT 1
31363: PPUSH
31364: CALL_OW 12
31368: PLUS
31369: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31370: LD_VAR 0 6
31374: PPUSH
31375: LD_VAR 0 7
31379: PPUSH
31380: CALL_OW 488
31384: NOT
31385: IFFALSE 31407
// begin _x := x ;
31387: LD_ADDR_VAR 0 6
31391: PUSH
31392: LD_VAR 0 4
31396: ST_TO_ADDR
// _y := y ;
31397: LD_ADDR_VAR 0 7
31401: PUSH
31402: LD_VAR 0 5
31406: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
31407: LD_ADDR_VAR 0 3
31411: PUSH
31412: LD_INT 1
31414: PPUSH
31415: LD_VAR 0 14
31419: PPUSH
31420: CALL_OW 12
31424: ST_TO_ADDR
// case i of 1 :
31425: LD_VAR 0 3
31429: PUSH
31430: LD_INT 1
31432: DOUBLE
31433: EQUAL
31434: IFTRUE 31438
31436: GO 31455
31438: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
31439: LD_VAR 0 1
31443: PPUSH
31444: LD_VAR 0 10
31448: PPUSH
31449: CALL_OW 115
31453: GO 31516
31455: LD_INT 2
31457: DOUBLE
31458: EQUAL
31459: IFTRUE 31463
31461: GO 31485
31463: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
31464: LD_VAR 0 1
31468: PPUSH
31469: LD_VAR 0 6
31473: PPUSH
31474: LD_VAR 0 7
31478: PPUSH
31479: CALL_OW 153
31483: GO 31516
31485: LD_INT 3
31487: DOUBLE
31488: EQUAL
31489: IFTRUE 31493
31491: GO 31515
31493: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
31494: LD_VAR 0 1
31498: PPUSH
31499: LD_VAR 0 6
31503: PPUSH
31504: LD_VAR 0 7
31508: PPUSH
31509: CALL_OW 154
31513: GO 31516
31515: POP
// end ;
31516: LD_VAR 0 2
31520: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
31521: LD_INT 0
31523: PPUSH
31524: PPUSH
31525: PPUSH
31526: PPUSH
31527: PPUSH
31528: PPUSH
// if not unit or not building then
31529: LD_VAR 0 1
31533: NOT
31534: PUSH
31535: LD_VAR 0 2
31539: NOT
31540: OR
31541: IFFALSE 31545
// exit ;
31543: GO 31703
// x := GetX ( building ) ;
31545: LD_ADDR_VAR 0 5
31549: PUSH
31550: LD_VAR 0 2
31554: PPUSH
31555: CALL_OW 250
31559: ST_TO_ADDR
// y := GetY ( building ) ;
31560: LD_ADDR_VAR 0 6
31564: PUSH
31565: LD_VAR 0 2
31569: PPUSH
31570: CALL_OW 251
31574: ST_TO_ADDR
// for i = 0 to 5 do
31575: LD_ADDR_VAR 0 4
31579: PUSH
31580: DOUBLE
31581: LD_INT 0
31583: DEC
31584: ST_TO_ADDR
31585: LD_INT 5
31587: PUSH
31588: FOR_TO
31589: IFFALSE 31701
// begin _x := ShiftX ( x , i , 3 ) ;
31591: LD_ADDR_VAR 0 7
31595: PUSH
31596: LD_VAR 0 5
31600: PPUSH
31601: LD_VAR 0 4
31605: PPUSH
31606: LD_INT 3
31608: PPUSH
31609: CALL_OW 272
31613: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
31614: LD_ADDR_VAR 0 8
31618: PUSH
31619: LD_VAR 0 6
31623: PPUSH
31624: LD_VAR 0 4
31628: PPUSH
31629: LD_INT 3
31631: PPUSH
31632: CALL_OW 273
31636: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31637: LD_VAR 0 7
31641: PPUSH
31642: LD_VAR 0 8
31646: PPUSH
31647: CALL_OW 488
31651: NOT
31652: IFFALSE 31656
// continue ;
31654: GO 31588
// if HexInfo ( _x , _y ) = 0 then
31656: LD_VAR 0 7
31660: PPUSH
31661: LD_VAR 0 8
31665: PPUSH
31666: CALL_OW 428
31670: PUSH
31671: LD_INT 0
31673: EQUAL
31674: IFFALSE 31699
// begin ComMoveXY ( unit , _x , _y ) ;
31676: LD_VAR 0 1
31680: PPUSH
31681: LD_VAR 0 7
31685: PPUSH
31686: LD_VAR 0 8
31690: PPUSH
31691: CALL_OW 111
// exit ;
31695: POP
31696: POP
31697: GO 31703
// end ; end ;
31699: GO 31588
31701: POP
31702: POP
// end ;
31703: LD_VAR 0 3
31707: RET
// export function ScanBase ( side , base_area ) ; begin
31708: LD_INT 0
31710: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
31711: LD_ADDR_VAR 0 3
31715: PUSH
31716: LD_VAR 0 2
31720: PPUSH
31721: LD_INT 81
31723: PUSH
31724: LD_VAR 0 1
31728: PUSH
31729: EMPTY
31730: LIST
31731: LIST
31732: PPUSH
31733: CALL_OW 70
31737: ST_TO_ADDR
// end ;
31738: LD_VAR 0 3
31742: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
31743: LD_INT 0
31745: PPUSH
31746: PPUSH
31747: PPUSH
31748: PPUSH
// result := false ;
31749: LD_ADDR_VAR 0 2
31753: PUSH
31754: LD_INT 0
31756: ST_TO_ADDR
// side := GetSide ( unit ) ;
31757: LD_ADDR_VAR 0 3
31761: PUSH
31762: LD_VAR 0 1
31766: PPUSH
31767: CALL_OW 255
31771: ST_TO_ADDR
// nat := GetNation ( unit ) ;
31772: LD_ADDR_VAR 0 4
31776: PUSH
31777: LD_VAR 0 1
31781: PPUSH
31782: CALL_OW 248
31786: ST_TO_ADDR
// case nat of 1 :
31787: LD_VAR 0 4
31791: PUSH
31792: LD_INT 1
31794: DOUBLE
31795: EQUAL
31796: IFTRUE 31800
31798: GO 31811
31800: POP
// tech := tech_lassight ; 2 :
31801: LD_ADDR_VAR 0 5
31805: PUSH
31806: LD_INT 12
31808: ST_TO_ADDR
31809: GO 31850
31811: LD_INT 2
31813: DOUBLE
31814: EQUAL
31815: IFTRUE 31819
31817: GO 31830
31819: POP
// tech := tech_mortar ; 3 :
31820: LD_ADDR_VAR 0 5
31824: PUSH
31825: LD_INT 41
31827: ST_TO_ADDR
31828: GO 31850
31830: LD_INT 3
31832: DOUBLE
31833: EQUAL
31834: IFTRUE 31838
31836: GO 31849
31838: POP
// tech := tech_bazooka ; end ;
31839: LD_ADDR_VAR 0 5
31843: PUSH
31844: LD_INT 44
31846: ST_TO_ADDR
31847: GO 31850
31849: POP
// if Researched ( side , tech ) then
31850: LD_VAR 0 3
31854: PPUSH
31855: LD_VAR 0 5
31859: PPUSH
31860: CALL_OW 325
31864: IFFALSE 31891
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
31866: LD_ADDR_VAR 0 2
31870: PUSH
31871: LD_INT 5
31873: PUSH
31874: LD_INT 8
31876: PUSH
31877: LD_INT 9
31879: PUSH
31880: EMPTY
31881: LIST
31882: LIST
31883: LIST
31884: PUSH
31885: LD_VAR 0 4
31889: ARRAY
31890: ST_TO_ADDR
// end ;
31891: LD_VAR 0 2
31895: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
31896: LD_INT 0
31898: PPUSH
31899: PPUSH
31900: PPUSH
// if not mines then
31901: LD_VAR 0 2
31905: NOT
31906: IFFALSE 31910
// exit ;
31908: GO 32054
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31910: LD_ADDR_VAR 0 5
31914: PUSH
31915: LD_INT 81
31917: PUSH
31918: LD_VAR 0 1
31922: PUSH
31923: EMPTY
31924: LIST
31925: LIST
31926: PUSH
31927: LD_INT 3
31929: PUSH
31930: LD_INT 21
31932: PUSH
31933: LD_INT 3
31935: PUSH
31936: EMPTY
31937: LIST
31938: LIST
31939: PUSH
31940: EMPTY
31941: LIST
31942: LIST
31943: PUSH
31944: EMPTY
31945: LIST
31946: LIST
31947: PPUSH
31948: CALL_OW 69
31952: ST_TO_ADDR
// for i in mines do
31953: LD_ADDR_VAR 0 4
31957: PUSH
31958: LD_VAR 0 2
31962: PUSH
31963: FOR_IN
31964: IFFALSE 32052
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
31966: LD_VAR 0 4
31970: PUSH
31971: LD_INT 1
31973: ARRAY
31974: PPUSH
31975: LD_VAR 0 4
31979: PUSH
31980: LD_INT 2
31982: ARRAY
31983: PPUSH
31984: CALL_OW 458
31988: NOT
31989: IFFALSE 31993
// continue ;
31991: GO 31963
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
31993: LD_VAR 0 4
31997: PUSH
31998: LD_INT 1
32000: ARRAY
32001: PPUSH
32002: LD_VAR 0 4
32006: PUSH
32007: LD_INT 2
32009: ARRAY
32010: PPUSH
32011: CALL_OW 428
32015: PUSH
32016: LD_VAR 0 5
32020: IN
32021: IFFALSE 32050
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
32023: LD_VAR 0 4
32027: PUSH
32028: LD_INT 1
32030: ARRAY
32031: PPUSH
32032: LD_VAR 0 4
32036: PUSH
32037: LD_INT 2
32039: ARRAY
32040: PPUSH
32041: LD_VAR 0 1
32045: PPUSH
32046: CALL_OW 456
// end ;
32050: GO 31963
32052: POP
32053: POP
// end ;
32054: LD_VAR 0 3
32058: RET
// export function Count ( array ) ; var i ; begin
32059: LD_INT 0
32061: PPUSH
32062: PPUSH
// result := 0 ;
32063: LD_ADDR_VAR 0 2
32067: PUSH
32068: LD_INT 0
32070: ST_TO_ADDR
// for i in array do
32071: LD_ADDR_VAR 0 3
32075: PUSH
32076: LD_VAR 0 1
32080: PUSH
32081: FOR_IN
32082: IFFALSE 32106
// if i then
32084: LD_VAR 0 3
32088: IFFALSE 32104
// result := result + 1 ;
32090: LD_ADDR_VAR 0 2
32094: PUSH
32095: LD_VAR 0 2
32099: PUSH
32100: LD_INT 1
32102: PLUS
32103: ST_TO_ADDR
32104: GO 32081
32106: POP
32107: POP
// end ;
32108: LD_VAR 0 2
32112: RET
// export function IsEmpty ( building ) ; begin
32113: LD_INT 0
32115: PPUSH
// if not building then
32116: LD_VAR 0 1
32120: NOT
32121: IFFALSE 32125
// exit ;
32123: GO 32168
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
32125: LD_ADDR_VAR 0 2
32129: PUSH
32130: LD_VAR 0 1
32134: PUSH
32135: LD_INT 22
32137: PUSH
32138: LD_VAR 0 1
32142: PPUSH
32143: CALL_OW 255
32147: PUSH
32148: EMPTY
32149: LIST
32150: LIST
32151: PUSH
32152: LD_INT 58
32154: PUSH
32155: EMPTY
32156: LIST
32157: PUSH
32158: EMPTY
32159: LIST
32160: LIST
32161: PPUSH
32162: CALL_OW 69
32166: IN
32167: ST_TO_ADDR
// end ;
32168: LD_VAR 0 2
32172: RET
// export function IsNotFull ( building ) ; begin
32173: LD_INT 0
32175: PPUSH
// if not building then
32176: LD_VAR 0 1
32180: NOT
32181: IFFALSE 32185
// exit ;
32183: GO 32204
// result := UnitsInside ( building ) < 6 ;
32185: LD_ADDR_VAR 0 2
32189: PUSH
32190: LD_VAR 0 1
32194: PPUSH
32195: CALL_OW 313
32199: PUSH
32200: LD_INT 6
32202: LESS
32203: ST_TO_ADDR
// end ;
32204: LD_VAR 0 2
32208: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
32209: LD_INT 0
32211: PPUSH
32212: PPUSH
32213: PPUSH
32214: PPUSH
// tmp := [ ] ;
32215: LD_ADDR_VAR 0 3
32219: PUSH
32220: EMPTY
32221: ST_TO_ADDR
// list := [ ] ;
32222: LD_ADDR_VAR 0 5
32226: PUSH
32227: EMPTY
32228: ST_TO_ADDR
// for i = 16 to 25 do
32229: LD_ADDR_VAR 0 4
32233: PUSH
32234: DOUBLE
32235: LD_INT 16
32237: DEC
32238: ST_TO_ADDR
32239: LD_INT 25
32241: PUSH
32242: FOR_TO
32243: IFFALSE 32316
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
32245: LD_ADDR_VAR 0 3
32249: PUSH
32250: LD_VAR 0 3
32254: PUSH
32255: LD_INT 22
32257: PUSH
32258: LD_VAR 0 1
32262: PPUSH
32263: CALL_OW 255
32267: PUSH
32268: EMPTY
32269: LIST
32270: LIST
32271: PUSH
32272: LD_INT 91
32274: PUSH
32275: LD_VAR 0 1
32279: PUSH
32280: LD_INT 6
32282: PUSH
32283: EMPTY
32284: LIST
32285: LIST
32286: LIST
32287: PUSH
32288: LD_INT 30
32290: PUSH
32291: LD_VAR 0 4
32295: PUSH
32296: EMPTY
32297: LIST
32298: LIST
32299: PUSH
32300: EMPTY
32301: LIST
32302: LIST
32303: LIST
32304: PUSH
32305: EMPTY
32306: LIST
32307: PPUSH
32308: CALL_OW 69
32312: ADD
32313: ST_TO_ADDR
32314: GO 32242
32316: POP
32317: POP
// for i = 1 to tmp do
32318: LD_ADDR_VAR 0 4
32322: PUSH
32323: DOUBLE
32324: LD_INT 1
32326: DEC
32327: ST_TO_ADDR
32328: LD_VAR 0 3
32332: PUSH
32333: FOR_TO
32334: IFFALSE 32422
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
32336: LD_ADDR_VAR 0 5
32340: PUSH
32341: LD_VAR 0 5
32345: PUSH
32346: LD_VAR 0 3
32350: PUSH
32351: LD_VAR 0 4
32355: ARRAY
32356: PPUSH
32357: CALL_OW 266
32361: PUSH
32362: LD_VAR 0 3
32366: PUSH
32367: LD_VAR 0 4
32371: ARRAY
32372: PPUSH
32373: CALL_OW 250
32377: PUSH
32378: LD_VAR 0 3
32382: PUSH
32383: LD_VAR 0 4
32387: ARRAY
32388: PPUSH
32389: CALL_OW 251
32393: PUSH
32394: LD_VAR 0 3
32398: PUSH
32399: LD_VAR 0 4
32403: ARRAY
32404: PPUSH
32405: CALL_OW 254
32409: PUSH
32410: EMPTY
32411: LIST
32412: LIST
32413: LIST
32414: LIST
32415: PUSH
32416: EMPTY
32417: LIST
32418: ADD
32419: ST_TO_ADDR
32420: GO 32333
32422: POP
32423: POP
// result := list ;
32424: LD_ADDR_VAR 0 2
32428: PUSH
32429: LD_VAR 0 5
32433: ST_TO_ADDR
// end ;
32434: LD_VAR 0 2
32438: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
32439: LD_INT 0
32441: PPUSH
32442: PPUSH
32443: PPUSH
32444: PPUSH
32445: PPUSH
32446: PPUSH
32447: PPUSH
// if not factory then
32448: LD_VAR 0 1
32452: NOT
32453: IFFALSE 32457
// exit ;
32455: GO 33050
// if control = control_apeman then
32457: LD_VAR 0 4
32461: PUSH
32462: LD_INT 5
32464: EQUAL
32465: IFFALSE 32574
// begin tmp := UnitsInside ( factory ) ;
32467: LD_ADDR_VAR 0 8
32471: PUSH
32472: LD_VAR 0 1
32476: PPUSH
32477: CALL_OW 313
32481: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
32482: LD_VAR 0 8
32486: PPUSH
32487: LD_INT 25
32489: PUSH
32490: LD_INT 12
32492: PUSH
32493: EMPTY
32494: LIST
32495: LIST
32496: PPUSH
32497: CALL_OW 72
32501: NOT
32502: IFFALSE 32512
// control := control_manual ;
32504: LD_ADDR_VAR 0 4
32508: PUSH
32509: LD_INT 1
32511: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
32512: LD_ADDR_VAR 0 8
32516: PUSH
32517: LD_VAR 0 1
32521: PPUSH
32522: CALL 32209 0 1
32526: ST_TO_ADDR
// if tmp then
32527: LD_VAR 0 8
32531: IFFALSE 32574
// begin for i in tmp do
32533: LD_ADDR_VAR 0 7
32537: PUSH
32538: LD_VAR 0 8
32542: PUSH
32543: FOR_IN
32544: IFFALSE 32572
// if i [ 1 ] = b_ext_radio then
32546: LD_VAR 0 7
32550: PUSH
32551: LD_INT 1
32553: ARRAY
32554: PUSH
32555: LD_INT 22
32557: EQUAL
32558: IFFALSE 32570
// begin control := control_remote ;
32560: LD_ADDR_VAR 0 4
32564: PUSH
32565: LD_INT 2
32567: ST_TO_ADDR
// break ;
32568: GO 32572
// end ;
32570: GO 32543
32572: POP
32573: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32574: LD_VAR 0 1
32578: PPUSH
32579: LD_VAR 0 2
32583: PPUSH
32584: LD_VAR 0 3
32588: PPUSH
32589: LD_VAR 0 4
32593: PPUSH
32594: LD_VAR 0 5
32598: PPUSH
32599: CALL_OW 448
32603: IFFALSE 32638
// begin result := [ chassis , engine , control , weapon ] ;
32605: LD_ADDR_VAR 0 6
32609: PUSH
32610: LD_VAR 0 2
32614: PUSH
32615: LD_VAR 0 3
32619: PUSH
32620: LD_VAR 0 4
32624: PUSH
32625: LD_VAR 0 5
32629: PUSH
32630: EMPTY
32631: LIST
32632: LIST
32633: LIST
32634: LIST
32635: ST_TO_ADDR
// exit ;
32636: GO 33050
// end ; _chassis := AvailableChassisList ( factory ) ;
32638: LD_ADDR_VAR 0 9
32642: PUSH
32643: LD_VAR 0 1
32647: PPUSH
32648: CALL_OW 475
32652: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
32653: LD_ADDR_VAR 0 11
32657: PUSH
32658: LD_VAR 0 1
32662: PPUSH
32663: CALL_OW 476
32667: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
32668: LD_ADDR_VAR 0 12
32672: PUSH
32673: LD_VAR 0 1
32677: PPUSH
32678: CALL_OW 477
32682: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
32683: LD_ADDR_VAR 0 10
32687: PUSH
32688: LD_VAR 0 1
32692: PPUSH
32693: CALL_OW 478
32697: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
32698: LD_VAR 0 9
32702: NOT
32703: PUSH
32704: LD_VAR 0 11
32708: NOT
32709: OR
32710: PUSH
32711: LD_VAR 0 12
32715: NOT
32716: OR
32717: PUSH
32718: LD_VAR 0 10
32722: NOT
32723: OR
32724: IFFALSE 32759
// begin result := [ chassis , engine , control , weapon ] ;
32726: LD_ADDR_VAR 0 6
32730: PUSH
32731: LD_VAR 0 2
32735: PUSH
32736: LD_VAR 0 3
32740: PUSH
32741: LD_VAR 0 4
32745: PUSH
32746: LD_VAR 0 5
32750: PUSH
32751: EMPTY
32752: LIST
32753: LIST
32754: LIST
32755: LIST
32756: ST_TO_ADDR
// exit ;
32757: GO 33050
// end ; if not chassis in _chassis then
32759: LD_VAR 0 2
32763: PUSH
32764: LD_VAR 0 9
32768: IN
32769: NOT
32770: IFFALSE 32796
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
32772: LD_ADDR_VAR 0 2
32776: PUSH
32777: LD_VAR 0 9
32781: PUSH
32782: LD_INT 1
32784: PPUSH
32785: LD_VAR 0 9
32789: PPUSH
32790: CALL_OW 12
32794: ARRAY
32795: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
32796: LD_VAR 0 2
32800: PPUSH
32801: LD_VAR 0 3
32805: PPUSH
32806: CALL 33055 0 2
32810: NOT
32811: IFFALSE 32870
// repeat engine := _engine [ 1 ] ;
32813: LD_ADDR_VAR 0 3
32817: PUSH
32818: LD_VAR 0 11
32822: PUSH
32823: LD_INT 1
32825: ARRAY
32826: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
32827: LD_ADDR_VAR 0 11
32831: PUSH
32832: LD_VAR 0 11
32836: PPUSH
32837: LD_INT 1
32839: PPUSH
32840: CALL_OW 3
32844: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
32845: LD_VAR 0 2
32849: PPUSH
32850: LD_VAR 0 3
32854: PPUSH
32855: CALL 33055 0 2
32859: PUSH
32860: LD_VAR 0 11
32864: PUSH
32865: EMPTY
32866: EQUAL
32867: OR
32868: IFFALSE 32813
// if not control in _control then
32870: LD_VAR 0 4
32874: PUSH
32875: LD_VAR 0 12
32879: IN
32880: NOT
32881: IFFALSE 32907
// control := _control [ rand ( 1 , _control ) ] ;
32883: LD_ADDR_VAR 0 4
32887: PUSH
32888: LD_VAR 0 12
32892: PUSH
32893: LD_INT 1
32895: PPUSH
32896: LD_VAR 0 12
32900: PPUSH
32901: CALL_OW 12
32905: ARRAY
32906: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
32907: LD_VAR 0 2
32911: PPUSH
32912: LD_VAR 0 5
32916: PPUSH
32917: CALL 33275 0 2
32921: NOT
32922: IFFALSE 32981
// repeat weapon := _weapon [ 1 ] ;
32924: LD_ADDR_VAR 0 5
32928: PUSH
32929: LD_VAR 0 10
32933: PUSH
32934: LD_INT 1
32936: ARRAY
32937: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
32938: LD_ADDR_VAR 0 10
32942: PUSH
32943: LD_VAR 0 10
32947: PPUSH
32948: LD_INT 1
32950: PPUSH
32951: CALL_OW 3
32955: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
32956: LD_VAR 0 2
32960: PPUSH
32961: LD_VAR 0 5
32965: PPUSH
32966: CALL 33275 0 2
32970: PUSH
32971: LD_VAR 0 10
32975: PUSH
32976: EMPTY
32977: EQUAL
32978: OR
32979: IFFALSE 32924
// result := [ ] ;
32981: LD_ADDR_VAR 0 6
32985: PUSH
32986: EMPTY
32987: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32988: LD_VAR 0 1
32992: PPUSH
32993: LD_VAR 0 2
32997: PPUSH
32998: LD_VAR 0 3
33002: PPUSH
33003: LD_VAR 0 4
33007: PPUSH
33008: LD_VAR 0 5
33012: PPUSH
33013: CALL_OW 448
33017: IFFALSE 33050
// result := [ chassis , engine , control , weapon ] ;
33019: LD_ADDR_VAR 0 6
33023: PUSH
33024: LD_VAR 0 2
33028: PUSH
33029: LD_VAR 0 3
33033: PUSH
33034: LD_VAR 0 4
33038: PUSH
33039: LD_VAR 0 5
33043: PUSH
33044: EMPTY
33045: LIST
33046: LIST
33047: LIST
33048: LIST
33049: ST_TO_ADDR
// end ;
33050: LD_VAR 0 6
33054: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
33055: LD_INT 0
33057: PPUSH
// if not chassis or not engine then
33058: LD_VAR 0 1
33062: NOT
33063: PUSH
33064: LD_VAR 0 2
33068: NOT
33069: OR
33070: IFFALSE 33074
// exit ;
33072: GO 33270
// case engine of engine_solar :
33074: LD_VAR 0 2
33078: PUSH
33079: LD_INT 2
33081: DOUBLE
33082: EQUAL
33083: IFTRUE 33087
33085: GO 33125
33087: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
33088: LD_ADDR_VAR 0 3
33092: PUSH
33093: LD_INT 11
33095: PUSH
33096: LD_INT 12
33098: PUSH
33099: LD_INT 13
33101: PUSH
33102: LD_INT 14
33104: PUSH
33105: LD_INT 1
33107: PUSH
33108: LD_INT 2
33110: PUSH
33111: LD_INT 3
33113: PUSH
33114: EMPTY
33115: LIST
33116: LIST
33117: LIST
33118: LIST
33119: LIST
33120: LIST
33121: LIST
33122: ST_TO_ADDR
33123: GO 33254
33125: LD_INT 1
33127: DOUBLE
33128: EQUAL
33129: IFTRUE 33133
33131: GO 33195
33133: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
33134: LD_ADDR_VAR 0 3
33138: PUSH
33139: LD_INT 11
33141: PUSH
33142: LD_INT 12
33144: PUSH
33145: LD_INT 13
33147: PUSH
33148: LD_INT 14
33150: PUSH
33151: LD_INT 1
33153: PUSH
33154: LD_INT 2
33156: PUSH
33157: LD_INT 3
33159: PUSH
33160: LD_INT 4
33162: PUSH
33163: LD_INT 5
33165: PUSH
33166: LD_INT 21
33168: PUSH
33169: LD_INT 23
33171: PUSH
33172: LD_INT 22
33174: PUSH
33175: LD_INT 24
33177: PUSH
33178: EMPTY
33179: LIST
33180: LIST
33181: LIST
33182: LIST
33183: LIST
33184: LIST
33185: LIST
33186: LIST
33187: LIST
33188: LIST
33189: LIST
33190: LIST
33191: LIST
33192: ST_TO_ADDR
33193: GO 33254
33195: LD_INT 3
33197: DOUBLE
33198: EQUAL
33199: IFTRUE 33203
33201: GO 33253
33203: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33204: LD_ADDR_VAR 0 3
33208: PUSH
33209: LD_INT 13
33211: PUSH
33212: LD_INT 14
33214: PUSH
33215: LD_INT 2
33217: PUSH
33218: LD_INT 3
33220: PUSH
33221: LD_INT 4
33223: PUSH
33224: LD_INT 5
33226: PUSH
33227: LD_INT 21
33229: PUSH
33230: LD_INT 22
33232: PUSH
33233: LD_INT 23
33235: PUSH
33236: LD_INT 24
33238: PUSH
33239: EMPTY
33240: LIST
33241: LIST
33242: LIST
33243: LIST
33244: LIST
33245: LIST
33246: LIST
33247: LIST
33248: LIST
33249: LIST
33250: ST_TO_ADDR
33251: GO 33254
33253: POP
// result := ( chassis in result ) ;
33254: LD_ADDR_VAR 0 3
33258: PUSH
33259: LD_VAR 0 1
33263: PUSH
33264: LD_VAR 0 3
33268: IN
33269: ST_TO_ADDR
// end ;
33270: LD_VAR 0 3
33274: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
33275: LD_INT 0
33277: PPUSH
// if not chassis or not weapon then
33278: LD_VAR 0 1
33282: NOT
33283: PUSH
33284: LD_VAR 0 2
33288: NOT
33289: OR
33290: IFFALSE 33294
// exit ;
33292: GO 34356
// case weapon of us_machine_gun :
33294: LD_VAR 0 2
33298: PUSH
33299: LD_INT 2
33301: DOUBLE
33302: EQUAL
33303: IFTRUE 33307
33305: GO 33337
33307: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
33308: LD_ADDR_VAR 0 3
33312: PUSH
33313: LD_INT 1
33315: PUSH
33316: LD_INT 2
33318: PUSH
33319: LD_INT 3
33321: PUSH
33322: LD_INT 4
33324: PUSH
33325: LD_INT 5
33327: PUSH
33328: EMPTY
33329: LIST
33330: LIST
33331: LIST
33332: LIST
33333: LIST
33334: ST_TO_ADDR
33335: GO 34340
33337: LD_INT 3
33339: DOUBLE
33340: EQUAL
33341: IFTRUE 33345
33343: GO 33375
33345: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
33346: LD_ADDR_VAR 0 3
33350: PUSH
33351: LD_INT 1
33353: PUSH
33354: LD_INT 2
33356: PUSH
33357: LD_INT 3
33359: PUSH
33360: LD_INT 4
33362: PUSH
33363: LD_INT 5
33365: PUSH
33366: EMPTY
33367: LIST
33368: LIST
33369: LIST
33370: LIST
33371: LIST
33372: ST_TO_ADDR
33373: GO 34340
33375: LD_INT 11
33377: DOUBLE
33378: EQUAL
33379: IFTRUE 33383
33381: GO 33413
33383: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
33384: LD_ADDR_VAR 0 3
33388: PUSH
33389: LD_INT 1
33391: PUSH
33392: LD_INT 2
33394: PUSH
33395: LD_INT 3
33397: PUSH
33398: LD_INT 4
33400: PUSH
33401: LD_INT 5
33403: PUSH
33404: EMPTY
33405: LIST
33406: LIST
33407: LIST
33408: LIST
33409: LIST
33410: ST_TO_ADDR
33411: GO 34340
33413: LD_INT 4
33415: DOUBLE
33416: EQUAL
33417: IFTRUE 33421
33419: GO 33447
33421: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
33422: LD_ADDR_VAR 0 3
33426: PUSH
33427: LD_INT 2
33429: PUSH
33430: LD_INT 3
33432: PUSH
33433: LD_INT 4
33435: PUSH
33436: LD_INT 5
33438: PUSH
33439: EMPTY
33440: LIST
33441: LIST
33442: LIST
33443: LIST
33444: ST_TO_ADDR
33445: GO 34340
33447: LD_INT 5
33449: DOUBLE
33450: EQUAL
33451: IFTRUE 33455
33453: GO 33481
33455: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
33456: LD_ADDR_VAR 0 3
33460: PUSH
33461: LD_INT 2
33463: PUSH
33464: LD_INT 3
33466: PUSH
33467: LD_INT 4
33469: PUSH
33470: LD_INT 5
33472: PUSH
33473: EMPTY
33474: LIST
33475: LIST
33476: LIST
33477: LIST
33478: ST_TO_ADDR
33479: GO 34340
33481: LD_INT 9
33483: DOUBLE
33484: EQUAL
33485: IFTRUE 33489
33487: GO 33515
33489: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
33490: LD_ADDR_VAR 0 3
33494: PUSH
33495: LD_INT 2
33497: PUSH
33498: LD_INT 3
33500: PUSH
33501: LD_INT 4
33503: PUSH
33504: LD_INT 5
33506: PUSH
33507: EMPTY
33508: LIST
33509: LIST
33510: LIST
33511: LIST
33512: ST_TO_ADDR
33513: GO 34340
33515: LD_INT 7
33517: DOUBLE
33518: EQUAL
33519: IFTRUE 33523
33521: GO 33549
33523: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
33524: LD_ADDR_VAR 0 3
33528: PUSH
33529: LD_INT 2
33531: PUSH
33532: LD_INT 3
33534: PUSH
33535: LD_INT 4
33537: PUSH
33538: LD_INT 5
33540: PUSH
33541: EMPTY
33542: LIST
33543: LIST
33544: LIST
33545: LIST
33546: ST_TO_ADDR
33547: GO 34340
33549: LD_INT 12
33551: DOUBLE
33552: EQUAL
33553: IFTRUE 33557
33555: GO 33583
33557: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
33558: LD_ADDR_VAR 0 3
33562: PUSH
33563: LD_INT 2
33565: PUSH
33566: LD_INT 3
33568: PUSH
33569: LD_INT 4
33571: PUSH
33572: LD_INT 5
33574: PUSH
33575: EMPTY
33576: LIST
33577: LIST
33578: LIST
33579: LIST
33580: ST_TO_ADDR
33581: GO 34340
33583: LD_INT 13
33585: DOUBLE
33586: EQUAL
33587: IFTRUE 33591
33589: GO 33617
33591: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
33592: LD_ADDR_VAR 0 3
33596: PUSH
33597: LD_INT 2
33599: PUSH
33600: LD_INT 3
33602: PUSH
33603: LD_INT 4
33605: PUSH
33606: LD_INT 5
33608: PUSH
33609: EMPTY
33610: LIST
33611: LIST
33612: LIST
33613: LIST
33614: ST_TO_ADDR
33615: GO 34340
33617: LD_INT 14
33619: DOUBLE
33620: EQUAL
33621: IFTRUE 33625
33623: GO 33643
33625: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
33626: LD_ADDR_VAR 0 3
33630: PUSH
33631: LD_INT 4
33633: PUSH
33634: LD_INT 5
33636: PUSH
33637: EMPTY
33638: LIST
33639: LIST
33640: ST_TO_ADDR
33641: GO 34340
33643: LD_INT 6
33645: DOUBLE
33646: EQUAL
33647: IFTRUE 33651
33649: GO 33669
33651: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
33652: LD_ADDR_VAR 0 3
33656: PUSH
33657: LD_INT 4
33659: PUSH
33660: LD_INT 5
33662: PUSH
33663: EMPTY
33664: LIST
33665: LIST
33666: ST_TO_ADDR
33667: GO 34340
33669: LD_INT 10
33671: DOUBLE
33672: EQUAL
33673: IFTRUE 33677
33675: GO 33695
33677: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
33678: LD_ADDR_VAR 0 3
33682: PUSH
33683: LD_INT 4
33685: PUSH
33686: LD_INT 5
33688: PUSH
33689: EMPTY
33690: LIST
33691: LIST
33692: ST_TO_ADDR
33693: GO 34340
33695: LD_INT 22
33697: DOUBLE
33698: EQUAL
33699: IFTRUE 33703
33701: GO 33729
33703: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
33704: LD_ADDR_VAR 0 3
33708: PUSH
33709: LD_INT 11
33711: PUSH
33712: LD_INT 12
33714: PUSH
33715: LD_INT 13
33717: PUSH
33718: LD_INT 14
33720: PUSH
33721: EMPTY
33722: LIST
33723: LIST
33724: LIST
33725: LIST
33726: ST_TO_ADDR
33727: GO 34340
33729: LD_INT 23
33731: DOUBLE
33732: EQUAL
33733: IFTRUE 33737
33735: GO 33763
33737: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
33738: LD_ADDR_VAR 0 3
33742: PUSH
33743: LD_INT 11
33745: PUSH
33746: LD_INT 12
33748: PUSH
33749: LD_INT 13
33751: PUSH
33752: LD_INT 14
33754: PUSH
33755: EMPTY
33756: LIST
33757: LIST
33758: LIST
33759: LIST
33760: ST_TO_ADDR
33761: GO 34340
33763: LD_INT 24
33765: DOUBLE
33766: EQUAL
33767: IFTRUE 33771
33769: GO 33797
33771: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
33772: LD_ADDR_VAR 0 3
33776: PUSH
33777: LD_INT 11
33779: PUSH
33780: LD_INT 12
33782: PUSH
33783: LD_INT 13
33785: PUSH
33786: LD_INT 14
33788: PUSH
33789: EMPTY
33790: LIST
33791: LIST
33792: LIST
33793: LIST
33794: ST_TO_ADDR
33795: GO 34340
33797: LD_INT 30
33799: DOUBLE
33800: EQUAL
33801: IFTRUE 33805
33803: GO 33831
33805: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
33806: LD_ADDR_VAR 0 3
33810: PUSH
33811: LD_INT 11
33813: PUSH
33814: LD_INT 12
33816: PUSH
33817: LD_INT 13
33819: PUSH
33820: LD_INT 14
33822: PUSH
33823: EMPTY
33824: LIST
33825: LIST
33826: LIST
33827: LIST
33828: ST_TO_ADDR
33829: GO 34340
33831: LD_INT 25
33833: DOUBLE
33834: EQUAL
33835: IFTRUE 33839
33837: GO 33857
33839: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
33840: LD_ADDR_VAR 0 3
33844: PUSH
33845: LD_INT 13
33847: PUSH
33848: LD_INT 14
33850: PUSH
33851: EMPTY
33852: LIST
33853: LIST
33854: ST_TO_ADDR
33855: GO 34340
33857: LD_INT 27
33859: DOUBLE
33860: EQUAL
33861: IFTRUE 33865
33863: GO 33883
33865: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
33866: LD_ADDR_VAR 0 3
33870: PUSH
33871: LD_INT 13
33873: PUSH
33874: LD_INT 14
33876: PUSH
33877: EMPTY
33878: LIST
33879: LIST
33880: ST_TO_ADDR
33881: GO 34340
33883: LD_EXP 26
33887: DOUBLE
33888: EQUAL
33889: IFTRUE 33893
33891: GO 33919
33893: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
33894: LD_ADDR_VAR 0 3
33898: PUSH
33899: LD_INT 11
33901: PUSH
33902: LD_INT 12
33904: PUSH
33905: LD_INT 13
33907: PUSH
33908: LD_INT 14
33910: PUSH
33911: EMPTY
33912: LIST
33913: LIST
33914: LIST
33915: LIST
33916: ST_TO_ADDR
33917: GO 34340
33919: LD_INT 28
33921: DOUBLE
33922: EQUAL
33923: IFTRUE 33927
33925: GO 33945
33927: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
33928: LD_ADDR_VAR 0 3
33932: PUSH
33933: LD_INT 13
33935: PUSH
33936: LD_INT 14
33938: PUSH
33939: EMPTY
33940: LIST
33941: LIST
33942: ST_TO_ADDR
33943: GO 34340
33945: LD_INT 29
33947: DOUBLE
33948: EQUAL
33949: IFTRUE 33953
33951: GO 33971
33953: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
33954: LD_ADDR_VAR 0 3
33958: PUSH
33959: LD_INT 13
33961: PUSH
33962: LD_INT 14
33964: PUSH
33965: EMPTY
33966: LIST
33967: LIST
33968: ST_TO_ADDR
33969: GO 34340
33971: LD_INT 31
33973: DOUBLE
33974: EQUAL
33975: IFTRUE 33979
33977: GO 33997
33979: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
33980: LD_ADDR_VAR 0 3
33984: PUSH
33985: LD_INT 13
33987: PUSH
33988: LD_INT 14
33990: PUSH
33991: EMPTY
33992: LIST
33993: LIST
33994: ST_TO_ADDR
33995: GO 34340
33997: LD_INT 26
33999: DOUBLE
34000: EQUAL
34001: IFTRUE 34005
34003: GO 34023
34005: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
34006: LD_ADDR_VAR 0 3
34010: PUSH
34011: LD_INT 13
34013: PUSH
34014: LD_INT 14
34016: PUSH
34017: EMPTY
34018: LIST
34019: LIST
34020: ST_TO_ADDR
34021: GO 34340
34023: LD_INT 42
34025: DOUBLE
34026: EQUAL
34027: IFTRUE 34031
34029: GO 34057
34031: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
34032: LD_ADDR_VAR 0 3
34036: PUSH
34037: LD_INT 21
34039: PUSH
34040: LD_INT 22
34042: PUSH
34043: LD_INT 23
34045: PUSH
34046: LD_INT 24
34048: PUSH
34049: EMPTY
34050: LIST
34051: LIST
34052: LIST
34053: LIST
34054: ST_TO_ADDR
34055: GO 34340
34057: LD_INT 43
34059: DOUBLE
34060: EQUAL
34061: IFTRUE 34065
34063: GO 34091
34065: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
34066: LD_ADDR_VAR 0 3
34070: PUSH
34071: LD_INT 21
34073: PUSH
34074: LD_INT 22
34076: PUSH
34077: LD_INT 23
34079: PUSH
34080: LD_INT 24
34082: PUSH
34083: EMPTY
34084: LIST
34085: LIST
34086: LIST
34087: LIST
34088: ST_TO_ADDR
34089: GO 34340
34091: LD_INT 44
34093: DOUBLE
34094: EQUAL
34095: IFTRUE 34099
34097: GO 34125
34099: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
34100: LD_ADDR_VAR 0 3
34104: PUSH
34105: LD_INT 21
34107: PUSH
34108: LD_INT 22
34110: PUSH
34111: LD_INT 23
34113: PUSH
34114: LD_INT 24
34116: PUSH
34117: EMPTY
34118: LIST
34119: LIST
34120: LIST
34121: LIST
34122: ST_TO_ADDR
34123: GO 34340
34125: LD_INT 45
34127: DOUBLE
34128: EQUAL
34129: IFTRUE 34133
34131: GO 34159
34133: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
34134: LD_ADDR_VAR 0 3
34138: PUSH
34139: LD_INT 21
34141: PUSH
34142: LD_INT 22
34144: PUSH
34145: LD_INT 23
34147: PUSH
34148: LD_INT 24
34150: PUSH
34151: EMPTY
34152: LIST
34153: LIST
34154: LIST
34155: LIST
34156: ST_TO_ADDR
34157: GO 34340
34159: LD_INT 49
34161: DOUBLE
34162: EQUAL
34163: IFTRUE 34167
34165: GO 34193
34167: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
34168: LD_ADDR_VAR 0 3
34172: PUSH
34173: LD_INT 21
34175: PUSH
34176: LD_INT 22
34178: PUSH
34179: LD_INT 23
34181: PUSH
34182: LD_INT 24
34184: PUSH
34185: EMPTY
34186: LIST
34187: LIST
34188: LIST
34189: LIST
34190: ST_TO_ADDR
34191: GO 34340
34193: LD_INT 51
34195: DOUBLE
34196: EQUAL
34197: IFTRUE 34201
34199: GO 34227
34201: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
34202: LD_ADDR_VAR 0 3
34206: PUSH
34207: LD_INT 21
34209: PUSH
34210: LD_INT 22
34212: PUSH
34213: LD_INT 23
34215: PUSH
34216: LD_INT 24
34218: PUSH
34219: EMPTY
34220: LIST
34221: LIST
34222: LIST
34223: LIST
34224: ST_TO_ADDR
34225: GO 34340
34227: LD_INT 52
34229: DOUBLE
34230: EQUAL
34231: IFTRUE 34235
34233: GO 34261
34235: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
34236: LD_ADDR_VAR 0 3
34240: PUSH
34241: LD_INT 21
34243: PUSH
34244: LD_INT 22
34246: PUSH
34247: LD_INT 23
34249: PUSH
34250: LD_INT 24
34252: PUSH
34253: EMPTY
34254: LIST
34255: LIST
34256: LIST
34257: LIST
34258: ST_TO_ADDR
34259: GO 34340
34261: LD_INT 53
34263: DOUBLE
34264: EQUAL
34265: IFTRUE 34269
34267: GO 34287
34269: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
34270: LD_ADDR_VAR 0 3
34274: PUSH
34275: LD_INT 23
34277: PUSH
34278: LD_INT 24
34280: PUSH
34281: EMPTY
34282: LIST
34283: LIST
34284: ST_TO_ADDR
34285: GO 34340
34287: LD_INT 46
34289: DOUBLE
34290: EQUAL
34291: IFTRUE 34295
34293: GO 34313
34295: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
34296: LD_ADDR_VAR 0 3
34300: PUSH
34301: LD_INT 23
34303: PUSH
34304: LD_INT 24
34306: PUSH
34307: EMPTY
34308: LIST
34309: LIST
34310: ST_TO_ADDR
34311: GO 34340
34313: LD_INT 47
34315: DOUBLE
34316: EQUAL
34317: IFTRUE 34321
34319: GO 34339
34321: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34322: LD_ADDR_VAR 0 3
34326: PUSH
34327: LD_INT 23
34329: PUSH
34330: LD_INT 24
34332: PUSH
34333: EMPTY
34334: LIST
34335: LIST
34336: ST_TO_ADDR
34337: GO 34340
34339: POP
// result := ( chassis in result ) ;
34340: LD_ADDR_VAR 0 3
34344: PUSH
34345: LD_VAR 0 1
34349: PUSH
34350: LD_VAR 0 3
34354: IN
34355: ST_TO_ADDR
// end ;
34356: LD_VAR 0 3
34360: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
34361: LD_INT 0
34363: PPUSH
34364: PPUSH
34365: PPUSH
34366: PPUSH
34367: PPUSH
34368: PPUSH
34369: PPUSH
// result := array ;
34370: LD_ADDR_VAR 0 5
34374: PUSH
34375: LD_VAR 0 1
34379: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
34380: LD_VAR 0 1
34384: NOT
34385: PUSH
34386: LD_VAR 0 2
34390: NOT
34391: OR
34392: PUSH
34393: LD_VAR 0 3
34397: NOT
34398: OR
34399: PUSH
34400: LD_VAR 0 2
34404: PUSH
34405: LD_VAR 0 1
34409: GREATER
34410: OR
34411: PUSH
34412: LD_VAR 0 3
34416: PUSH
34417: LD_VAR 0 1
34421: GREATER
34422: OR
34423: IFFALSE 34427
// exit ;
34425: GO 34723
// if direction then
34427: LD_VAR 0 4
34431: IFFALSE 34495
// begin d := 1 ;
34433: LD_ADDR_VAR 0 9
34437: PUSH
34438: LD_INT 1
34440: ST_TO_ADDR
// if i_from > i_to then
34441: LD_VAR 0 2
34445: PUSH
34446: LD_VAR 0 3
34450: GREATER
34451: IFFALSE 34477
// length := ( array - i_from ) + i_to else
34453: LD_ADDR_VAR 0 11
34457: PUSH
34458: LD_VAR 0 1
34462: PUSH
34463: LD_VAR 0 2
34467: MINUS
34468: PUSH
34469: LD_VAR 0 3
34473: PLUS
34474: ST_TO_ADDR
34475: GO 34493
// length := i_to - i_from ;
34477: LD_ADDR_VAR 0 11
34481: PUSH
34482: LD_VAR 0 3
34486: PUSH
34487: LD_VAR 0 2
34491: MINUS
34492: ST_TO_ADDR
// end else
34493: GO 34556
// begin d := - 1 ;
34495: LD_ADDR_VAR 0 9
34499: PUSH
34500: LD_INT 1
34502: NEG
34503: ST_TO_ADDR
// if i_from > i_to then
34504: LD_VAR 0 2
34508: PUSH
34509: LD_VAR 0 3
34513: GREATER
34514: IFFALSE 34534
// length := i_from - i_to else
34516: LD_ADDR_VAR 0 11
34520: PUSH
34521: LD_VAR 0 2
34525: PUSH
34526: LD_VAR 0 3
34530: MINUS
34531: ST_TO_ADDR
34532: GO 34556
// length := ( array - i_to ) + i_from ;
34534: LD_ADDR_VAR 0 11
34538: PUSH
34539: LD_VAR 0 1
34543: PUSH
34544: LD_VAR 0 3
34548: MINUS
34549: PUSH
34550: LD_VAR 0 2
34554: PLUS
34555: ST_TO_ADDR
// end ; if not length then
34556: LD_VAR 0 11
34560: NOT
34561: IFFALSE 34565
// exit ;
34563: GO 34723
// tmp := array ;
34565: LD_ADDR_VAR 0 10
34569: PUSH
34570: LD_VAR 0 1
34574: ST_TO_ADDR
// for i = 1 to length do
34575: LD_ADDR_VAR 0 6
34579: PUSH
34580: DOUBLE
34581: LD_INT 1
34583: DEC
34584: ST_TO_ADDR
34585: LD_VAR 0 11
34589: PUSH
34590: FOR_TO
34591: IFFALSE 34711
// begin for j = 1 to array do
34593: LD_ADDR_VAR 0 7
34597: PUSH
34598: DOUBLE
34599: LD_INT 1
34601: DEC
34602: ST_TO_ADDR
34603: LD_VAR 0 1
34607: PUSH
34608: FOR_TO
34609: IFFALSE 34697
// begin k := j + d ;
34611: LD_ADDR_VAR 0 8
34615: PUSH
34616: LD_VAR 0 7
34620: PUSH
34621: LD_VAR 0 9
34625: PLUS
34626: ST_TO_ADDR
// if k > array then
34627: LD_VAR 0 8
34631: PUSH
34632: LD_VAR 0 1
34636: GREATER
34637: IFFALSE 34647
// k := 1 ;
34639: LD_ADDR_VAR 0 8
34643: PUSH
34644: LD_INT 1
34646: ST_TO_ADDR
// if not k then
34647: LD_VAR 0 8
34651: NOT
34652: IFFALSE 34664
// k := array ;
34654: LD_ADDR_VAR 0 8
34658: PUSH
34659: LD_VAR 0 1
34663: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
34664: LD_ADDR_VAR 0 10
34668: PUSH
34669: LD_VAR 0 10
34673: PPUSH
34674: LD_VAR 0 8
34678: PPUSH
34679: LD_VAR 0 1
34683: PUSH
34684: LD_VAR 0 7
34688: ARRAY
34689: PPUSH
34690: CALL_OW 1
34694: ST_TO_ADDR
// end ;
34695: GO 34608
34697: POP
34698: POP
// array := tmp ;
34699: LD_ADDR_VAR 0 1
34703: PUSH
34704: LD_VAR 0 10
34708: ST_TO_ADDR
// end ;
34709: GO 34590
34711: POP
34712: POP
// result := array ;
34713: LD_ADDR_VAR 0 5
34717: PUSH
34718: LD_VAR 0 1
34722: ST_TO_ADDR
// end ;
34723: LD_VAR 0 5
34727: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
34728: LD_INT 0
34730: PPUSH
34731: PPUSH
// result := 0 ;
34732: LD_ADDR_VAR 0 3
34736: PUSH
34737: LD_INT 0
34739: ST_TO_ADDR
// if not array or not value in array then
34740: LD_VAR 0 1
34744: NOT
34745: PUSH
34746: LD_VAR 0 2
34750: PUSH
34751: LD_VAR 0 1
34755: IN
34756: NOT
34757: OR
34758: IFFALSE 34762
// exit ;
34760: GO 34816
// for i = 1 to array do
34762: LD_ADDR_VAR 0 4
34766: PUSH
34767: DOUBLE
34768: LD_INT 1
34770: DEC
34771: ST_TO_ADDR
34772: LD_VAR 0 1
34776: PUSH
34777: FOR_TO
34778: IFFALSE 34814
// if value = array [ i ] then
34780: LD_VAR 0 2
34784: PUSH
34785: LD_VAR 0 1
34789: PUSH
34790: LD_VAR 0 4
34794: ARRAY
34795: EQUAL
34796: IFFALSE 34812
// begin result := i ;
34798: LD_ADDR_VAR 0 3
34802: PUSH
34803: LD_VAR 0 4
34807: ST_TO_ADDR
// exit ;
34808: POP
34809: POP
34810: GO 34816
// end ;
34812: GO 34777
34814: POP
34815: POP
// end ;
34816: LD_VAR 0 3
34820: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
34821: LD_INT 0
34823: PPUSH
// vc_chassis := chassis ;
34824: LD_ADDR_OWVAR 37
34828: PUSH
34829: LD_VAR 0 1
34833: ST_TO_ADDR
// vc_engine := engine ;
34834: LD_ADDR_OWVAR 39
34838: PUSH
34839: LD_VAR 0 2
34843: ST_TO_ADDR
// vc_control := control ;
34844: LD_ADDR_OWVAR 38
34848: PUSH
34849: LD_VAR 0 3
34853: ST_TO_ADDR
// vc_weapon := weapon ;
34854: LD_ADDR_OWVAR 40
34858: PUSH
34859: LD_VAR 0 4
34863: ST_TO_ADDR
// vc_fuel_battery := fuel ;
34864: LD_ADDR_OWVAR 41
34868: PUSH
34869: LD_VAR 0 5
34873: ST_TO_ADDR
// end ;
34874: LD_VAR 0 6
34878: RET
// export function WantPlant ( unit ) ; var task ; begin
34879: LD_INT 0
34881: PPUSH
34882: PPUSH
// result := false ;
34883: LD_ADDR_VAR 0 2
34887: PUSH
34888: LD_INT 0
34890: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
34891: LD_ADDR_VAR 0 3
34895: PUSH
34896: LD_VAR 0 1
34900: PPUSH
34901: CALL_OW 437
34905: ST_TO_ADDR
// if task then
34906: LD_VAR 0 3
34910: IFFALSE 34938
// if task [ 1 ] [ 1 ] = p then
34912: LD_VAR 0 3
34916: PUSH
34917: LD_INT 1
34919: ARRAY
34920: PUSH
34921: LD_INT 1
34923: ARRAY
34924: PUSH
34925: LD_STRING p
34927: EQUAL
34928: IFFALSE 34938
// result := true ;
34930: LD_ADDR_VAR 0 2
34934: PUSH
34935: LD_INT 1
34937: ST_TO_ADDR
// end ;
34938: LD_VAR 0 2
34942: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
34943: LD_INT 0
34945: PPUSH
34946: PPUSH
34947: PPUSH
34948: PPUSH
// if pos < 1 then
34949: LD_VAR 0 2
34953: PUSH
34954: LD_INT 1
34956: LESS
34957: IFFALSE 34961
// exit ;
34959: GO 35264
// if pos = 1 then
34961: LD_VAR 0 2
34965: PUSH
34966: LD_INT 1
34968: EQUAL
34969: IFFALSE 35002
// result := Replace ( arr , pos [ 1 ] , value ) else
34971: LD_ADDR_VAR 0 4
34975: PUSH
34976: LD_VAR 0 1
34980: PPUSH
34981: LD_VAR 0 2
34985: PUSH
34986: LD_INT 1
34988: ARRAY
34989: PPUSH
34990: LD_VAR 0 3
34994: PPUSH
34995: CALL_OW 1
34999: ST_TO_ADDR
35000: GO 35264
// begin tmp := arr ;
35002: LD_ADDR_VAR 0 6
35006: PUSH
35007: LD_VAR 0 1
35011: ST_TO_ADDR
// s_arr := [ tmp ] ;
35012: LD_ADDR_VAR 0 7
35016: PUSH
35017: LD_VAR 0 6
35021: PUSH
35022: EMPTY
35023: LIST
35024: ST_TO_ADDR
// for i = 1 to pos - 1 do
35025: LD_ADDR_VAR 0 5
35029: PUSH
35030: DOUBLE
35031: LD_INT 1
35033: DEC
35034: ST_TO_ADDR
35035: LD_VAR 0 2
35039: PUSH
35040: LD_INT 1
35042: MINUS
35043: PUSH
35044: FOR_TO
35045: IFFALSE 35090
// begin tmp := tmp [ pos [ i ] ] ;
35047: LD_ADDR_VAR 0 6
35051: PUSH
35052: LD_VAR 0 6
35056: PUSH
35057: LD_VAR 0 2
35061: PUSH
35062: LD_VAR 0 5
35066: ARRAY
35067: ARRAY
35068: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
35069: LD_ADDR_VAR 0 7
35073: PUSH
35074: LD_VAR 0 7
35078: PUSH
35079: LD_VAR 0 6
35083: PUSH
35084: EMPTY
35085: LIST
35086: ADD
35087: ST_TO_ADDR
// end ;
35088: GO 35044
35090: POP
35091: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
35092: LD_ADDR_VAR 0 6
35096: PUSH
35097: LD_VAR 0 6
35101: PPUSH
35102: LD_VAR 0 2
35106: PUSH
35107: LD_VAR 0 2
35111: ARRAY
35112: PPUSH
35113: LD_VAR 0 3
35117: PPUSH
35118: CALL_OW 1
35122: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
35123: LD_ADDR_VAR 0 7
35127: PUSH
35128: LD_VAR 0 7
35132: PPUSH
35133: LD_VAR 0 7
35137: PPUSH
35138: LD_VAR 0 6
35142: PPUSH
35143: CALL_OW 1
35147: ST_TO_ADDR
// for i = s_arr downto 2 do
35148: LD_ADDR_VAR 0 5
35152: PUSH
35153: DOUBLE
35154: LD_VAR 0 7
35158: INC
35159: ST_TO_ADDR
35160: LD_INT 2
35162: PUSH
35163: FOR_DOWNTO
35164: IFFALSE 35248
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
35166: LD_ADDR_VAR 0 6
35170: PUSH
35171: LD_VAR 0 7
35175: PUSH
35176: LD_VAR 0 5
35180: PUSH
35181: LD_INT 1
35183: MINUS
35184: ARRAY
35185: PPUSH
35186: LD_VAR 0 2
35190: PUSH
35191: LD_VAR 0 5
35195: PUSH
35196: LD_INT 1
35198: MINUS
35199: ARRAY
35200: PPUSH
35201: LD_VAR 0 7
35205: PUSH
35206: LD_VAR 0 5
35210: ARRAY
35211: PPUSH
35212: CALL_OW 1
35216: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
35217: LD_ADDR_VAR 0 7
35221: PUSH
35222: LD_VAR 0 7
35226: PPUSH
35227: LD_VAR 0 5
35231: PUSH
35232: LD_INT 1
35234: MINUS
35235: PPUSH
35236: LD_VAR 0 6
35240: PPUSH
35241: CALL_OW 1
35245: ST_TO_ADDR
// end ;
35246: GO 35163
35248: POP
35249: POP
// result := s_arr [ 1 ] ;
35250: LD_ADDR_VAR 0 4
35254: PUSH
35255: LD_VAR 0 7
35259: PUSH
35260: LD_INT 1
35262: ARRAY
35263: ST_TO_ADDR
// end ; end ;
35264: LD_VAR 0 4
35268: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
35269: LD_INT 0
35271: PPUSH
35272: PPUSH
// if not list then
35273: LD_VAR 0 1
35277: NOT
35278: IFFALSE 35282
// exit ;
35280: GO 35373
// i := list [ pos1 ] ;
35282: LD_ADDR_VAR 0 5
35286: PUSH
35287: LD_VAR 0 1
35291: PUSH
35292: LD_VAR 0 2
35296: ARRAY
35297: ST_TO_ADDR
// if not i then
35298: LD_VAR 0 5
35302: NOT
35303: IFFALSE 35307
// exit ;
35305: GO 35373
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
35307: LD_ADDR_VAR 0 1
35311: PUSH
35312: LD_VAR 0 1
35316: PPUSH
35317: LD_VAR 0 2
35321: PPUSH
35322: LD_VAR 0 1
35326: PUSH
35327: LD_VAR 0 3
35331: ARRAY
35332: PPUSH
35333: CALL_OW 1
35337: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
35338: LD_ADDR_VAR 0 1
35342: PUSH
35343: LD_VAR 0 1
35347: PPUSH
35348: LD_VAR 0 3
35352: PPUSH
35353: LD_VAR 0 5
35357: PPUSH
35358: CALL_OW 1
35362: ST_TO_ADDR
// result := list ;
35363: LD_ADDR_VAR 0 4
35367: PUSH
35368: LD_VAR 0 1
35372: ST_TO_ADDR
// end ;
35373: LD_VAR 0 4
35377: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
35378: LD_INT 0
35380: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
35381: LD_ADDR_VAR 0 5
35385: PUSH
35386: LD_VAR 0 1
35390: PPUSH
35391: CALL_OW 250
35395: PPUSH
35396: LD_VAR 0 1
35400: PPUSH
35401: CALL_OW 251
35405: PPUSH
35406: LD_VAR 0 2
35410: PPUSH
35411: LD_VAR 0 3
35415: PPUSH
35416: LD_VAR 0 4
35420: PPUSH
35421: CALL 35431 0 5
35425: ST_TO_ADDR
// end ;
35426: LD_VAR 0 5
35430: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
35431: LD_INT 0
35433: PPUSH
35434: PPUSH
35435: PPUSH
35436: PPUSH
// if not list then
35437: LD_VAR 0 3
35441: NOT
35442: IFFALSE 35446
// exit ;
35444: GO 35834
// result := [ ] ;
35446: LD_ADDR_VAR 0 6
35450: PUSH
35451: EMPTY
35452: ST_TO_ADDR
// for i in list do
35453: LD_ADDR_VAR 0 7
35457: PUSH
35458: LD_VAR 0 3
35462: PUSH
35463: FOR_IN
35464: IFFALSE 35666
// begin tmp := GetDistUnitXY ( i , x , y ) ;
35466: LD_ADDR_VAR 0 9
35470: PUSH
35471: LD_VAR 0 7
35475: PPUSH
35476: LD_VAR 0 1
35480: PPUSH
35481: LD_VAR 0 2
35485: PPUSH
35486: CALL_OW 297
35490: ST_TO_ADDR
// if not result then
35491: LD_VAR 0 6
35495: NOT
35496: IFFALSE 35522
// result := [ [ i , tmp ] ] else
35498: LD_ADDR_VAR 0 6
35502: PUSH
35503: LD_VAR 0 7
35507: PUSH
35508: LD_VAR 0 9
35512: PUSH
35513: EMPTY
35514: LIST
35515: LIST
35516: PUSH
35517: EMPTY
35518: LIST
35519: ST_TO_ADDR
35520: GO 35664
// begin if result [ result ] [ 2 ] < tmp then
35522: LD_VAR 0 6
35526: PUSH
35527: LD_VAR 0 6
35531: ARRAY
35532: PUSH
35533: LD_INT 2
35535: ARRAY
35536: PUSH
35537: LD_VAR 0 9
35541: LESS
35542: IFFALSE 35584
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
35544: LD_ADDR_VAR 0 6
35548: PUSH
35549: LD_VAR 0 6
35553: PPUSH
35554: LD_VAR 0 6
35558: PUSH
35559: LD_INT 1
35561: PLUS
35562: PPUSH
35563: LD_VAR 0 7
35567: PUSH
35568: LD_VAR 0 9
35572: PUSH
35573: EMPTY
35574: LIST
35575: LIST
35576: PPUSH
35577: CALL_OW 2
35581: ST_TO_ADDR
35582: GO 35664
// for j = 1 to result do
35584: LD_ADDR_VAR 0 8
35588: PUSH
35589: DOUBLE
35590: LD_INT 1
35592: DEC
35593: ST_TO_ADDR
35594: LD_VAR 0 6
35598: PUSH
35599: FOR_TO
35600: IFFALSE 35662
// begin if tmp < result [ j ] [ 2 ] then
35602: LD_VAR 0 9
35606: PUSH
35607: LD_VAR 0 6
35611: PUSH
35612: LD_VAR 0 8
35616: ARRAY
35617: PUSH
35618: LD_INT 2
35620: ARRAY
35621: LESS
35622: IFFALSE 35660
// begin result := Insert ( result , j , [ i , tmp ] ) ;
35624: LD_ADDR_VAR 0 6
35628: PUSH
35629: LD_VAR 0 6
35633: PPUSH
35634: LD_VAR 0 8
35638: PPUSH
35639: LD_VAR 0 7
35643: PUSH
35644: LD_VAR 0 9
35648: PUSH
35649: EMPTY
35650: LIST
35651: LIST
35652: PPUSH
35653: CALL_OW 2
35657: ST_TO_ADDR
// break ;
35658: GO 35662
// end ; end ;
35660: GO 35599
35662: POP
35663: POP
// end ; end ;
35664: GO 35463
35666: POP
35667: POP
// if result and not asc then
35668: LD_VAR 0 6
35672: PUSH
35673: LD_VAR 0 4
35677: NOT
35678: AND
35679: IFFALSE 35754
// begin tmp := result ;
35681: LD_ADDR_VAR 0 9
35685: PUSH
35686: LD_VAR 0 6
35690: ST_TO_ADDR
// for i = tmp downto 1 do
35691: LD_ADDR_VAR 0 7
35695: PUSH
35696: DOUBLE
35697: LD_VAR 0 9
35701: INC
35702: ST_TO_ADDR
35703: LD_INT 1
35705: PUSH
35706: FOR_DOWNTO
35707: IFFALSE 35752
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
35709: LD_ADDR_VAR 0 6
35713: PUSH
35714: LD_VAR 0 6
35718: PPUSH
35719: LD_VAR 0 9
35723: PUSH
35724: LD_VAR 0 7
35728: MINUS
35729: PUSH
35730: LD_INT 1
35732: PLUS
35733: PPUSH
35734: LD_VAR 0 9
35738: PUSH
35739: LD_VAR 0 7
35743: ARRAY
35744: PPUSH
35745: CALL_OW 1
35749: ST_TO_ADDR
35750: GO 35706
35752: POP
35753: POP
// end ; tmp := [ ] ;
35754: LD_ADDR_VAR 0 9
35758: PUSH
35759: EMPTY
35760: ST_TO_ADDR
// if mode then
35761: LD_VAR 0 5
35765: IFFALSE 35834
// begin for i = 1 to result do
35767: LD_ADDR_VAR 0 7
35771: PUSH
35772: DOUBLE
35773: LD_INT 1
35775: DEC
35776: ST_TO_ADDR
35777: LD_VAR 0 6
35781: PUSH
35782: FOR_TO
35783: IFFALSE 35822
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
35785: LD_ADDR_VAR 0 9
35789: PUSH
35790: LD_VAR 0 9
35794: PPUSH
35795: LD_VAR 0 7
35799: PPUSH
35800: LD_VAR 0 6
35804: PUSH
35805: LD_VAR 0 7
35809: ARRAY
35810: PUSH
35811: LD_INT 1
35813: ARRAY
35814: PPUSH
35815: CALL_OW 1
35819: ST_TO_ADDR
35820: GO 35782
35822: POP
35823: POP
// result := tmp ;
35824: LD_ADDR_VAR 0 6
35828: PUSH
35829: LD_VAR 0 9
35833: ST_TO_ADDR
// end ; end ;
35834: LD_VAR 0 6
35838: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
35839: LD_INT 0
35841: PPUSH
35842: PPUSH
35843: PPUSH
35844: PPUSH
35845: PPUSH
35846: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
35847: LD_ADDR_VAR 0 5
35851: PUSH
35852: LD_INT 0
35854: PUSH
35855: LD_INT 0
35857: PUSH
35858: LD_INT 0
35860: PUSH
35861: EMPTY
35862: PUSH
35863: EMPTY
35864: LIST
35865: LIST
35866: LIST
35867: LIST
35868: ST_TO_ADDR
// if not x or not y then
35869: LD_VAR 0 2
35873: NOT
35874: PUSH
35875: LD_VAR 0 3
35879: NOT
35880: OR
35881: IFFALSE 35885
// exit ;
35883: GO 37537
// if not range then
35885: LD_VAR 0 4
35889: NOT
35890: IFFALSE 35900
// range := 10 ;
35892: LD_ADDR_VAR 0 4
35896: PUSH
35897: LD_INT 10
35899: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
35900: LD_ADDR_VAR 0 8
35904: PUSH
35905: LD_INT 81
35907: PUSH
35908: LD_VAR 0 1
35912: PUSH
35913: EMPTY
35914: LIST
35915: LIST
35916: PUSH
35917: LD_INT 92
35919: PUSH
35920: LD_VAR 0 2
35924: PUSH
35925: LD_VAR 0 3
35929: PUSH
35930: LD_VAR 0 4
35934: PUSH
35935: EMPTY
35936: LIST
35937: LIST
35938: LIST
35939: LIST
35940: PUSH
35941: LD_INT 3
35943: PUSH
35944: LD_INT 21
35946: PUSH
35947: LD_INT 3
35949: PUSH
35950: EMPTY
35951: LIST
35952: LIST
35953: PUSH
35954: EMPTY
35955: LIST
35956: LIST
35957: PUSH
35958: EMPTY
35959: LIST
35960: LIST
35961: LIST
35962: PPUSH
35963: CALL_OW 69
35967: ST_TO_ADDR
// if not tmp then
35968: LD_VAR 0 8
35972: NOT
35973: IFFALSE 35977
// exit ;
35975: GO 37537
// for i in tmp do
35977: LD_ADDR_VAR 0 6
35981: PUSH
35982: LD_VAR 0 8
35986: PUSH
35987: FOR_IN
35988: IFFALSE 37512
// begin points := [ 0 , 0 , 0 ] ;
35990: LD_ADDR_VAR 0 9
35994: PUSH
35995: LD_INT 0
35997: PUSH
35998: LD_INT 0
36000: PUSH
36001: LD_INT 0
36003: PUSH
36004: EMPTY
36005: LIST
36006: LIST
36007: LIST
36008: ST_TO_ADDR
// bpoints := 1 ;
36009: LD_ADDR_VAR 0 10
36013: PUSH
36014: LD_INT 1
36016: ST_TO_ADDR
// case GetType ( i ) of unit_human :
36017: LD_VAR 0 6
36021: PPUSH
36022: CALL_OW 247
36026: PUSH
36027: LD_INT 1
36029: DOUBLE
36030: EQUAL
36031: IFTRUE 36035
36033: GO 36613
36035: POP
// begin if GetClass ( i ) = 1 then
36036: LD_VAR 0 6
36040: PPUSH
36041: CALL_OW 257
36045: PUSH
36046: LD_INT 1
36048: EQUAL
36049: IFFALSE 36070
// points := [ 10 , 5 , 3 ] ;
36051: LD_ADDR_VAR 0 9
36055: PUSH
36056: LD_INT 10
36058: PUSH
36059: LD_INT 5
36061: PUSH
36062: LD_INT 3
36064: PUSH
36065: EMPTY
36066: LIST
36067: LIST
36068: LIST
36069: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
36070: LD_VAR 0 6
36074: PPUSH
36075: CALL_OW 257
36079: PUSH
36080: LD_INT 2
36082: PUSH
36083: LD_INT 3
36085: PUSH
36086: LD_INT 4
36088: PUSH
36089: EMPTY
36090: LIST
36091: LIST
36092: LIST
36093: IN
36094: IFFALSE 36115
// points := [ 3 , 2 , 1 ] ;
36096: LD_ADDR_VAR 0 9
36100: PUSH
36101: LD_INT 3
36103: PUSH
36104: LD_INT 2
36106: PUSH
36107: LD_INT 1
36109: PUSH
36110: EMPTY
36111: LIST
36112: LIST
36113: LIST
36114: ST_TO_ADDR
// if GetClass ( i ) = 5 then
36115: LD_VAR 0 6
36119: PPUSH
36120: CALL_OW 257
36124: PUSH
36125: LD_INT 5
36127: EQUAL
36128: IFFALSE 36149
// points := [ 130 , 5 , 2 ] ;
36130: LD_ADDR_VAR 0 9
36134: PUSH
36135: LD_INT 130
36137: PUSH
36138: LD_INT 5
36140: PUSH
36141: LD_INT 2
36143: PUSH
36144: EMPTY
36145: LIST
36146: LIST
36147: LIST
36148: ST_TO_ADDR
// if GetClass ( i ) = 8 then
36149: LD_VAR 0 6
36153: PPUSH
36154: CALL_OW 257
36158: PUSH
36159: LD_INT 8
36161: EQUAL
36162: IFFALSE 36183
// points := [ 35 , 35 , 30 ] ;
36164: LD_ADDR_VAR 0 9
36168: PUSH
36169: LD_INT 35
36171: PUSH
36172: LD_INT 35
36174: PUSH
36175: LD_INT 30
36177: PUSH
36178: EMPTY
36179: LIST
36180: LIST
36181: LIST
36182: ST_TO_ADDR
// if GetClass ( i ) = 9 then
36183: LD_VAR 0 6
36187: PPUSH
36188: CALL_OW 257
36192: PUSH
36193: LD_INT 9
36195: EQUAL
36196: IFFALSE 36217
// points := [ 20 , 55 , 40 ] ;
36198: LD_ADDR_VAR 0 9
36202: PUSH
36203: LD_INT 20
36205: PUSH
36206: LD_INT 55
36208: PUSH
36209: LD_INT 40
36211: PUSH
36212: EMPTY
36213: LIST
36214: LIST
36215: LIST
36216: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
36217: LD_VAR 0 6
36221: PPUSH
36222: CALL_OW 257
36226: PUSH
36227: LD_INT 12
36229: PUSH
36230: LD_INT 16
36232: PUSH
36233: EMPTY
36234: LIST
36235: LIST
36236: IN
36237: IFFALSE 36258
// points := [ 5 , 3 , 2 ] ;
36239: LD_ADDR_VAR 0 9
36243: PUSH
36244: LD_INT 5
36246: PUSH
36247: LD_INT 3
36249: PUSH
36250: LD_INT 2
36252: PUSH
36253: EMPTY
36254: LIST
36255: LIST
36256: LIST
36257: ST_TO_ADDR
// if GetClass ( i ) = 17 then
36258: LD_VAR 0 6
36262: PPUSH
36263: CALL_OW 257
36267: PUSH
36268: LD_INT 17
36270: EQUAL
36271: IFFALSE 36292
// points := [ 100 , 50 , 75 ] ;
36273: LD_ADDR_VAR 0 9
36277: PUSH
36278: LD_INT 100
36280: PUSH
36281: LD_INT 50
36283: PUSH
36284: LD_INT 75
36286: PUSH
36287: EMPTY
36288: LIST
36289: LIST
36290: LIST
36291: ST_TO_ADDR
// if GetClass ( i ) = 15 then
36292: LD_VAR 0 6
36296: PPUSH
36297: CALL_OW 257
36301: PUSH
36302: LD_INT 15
36304: EQUAL
36305: IFFALSE 36326
// points := [ 10 , 5 , 3 ] ;
36307: LD_ADDR_VAR 0 9
36311: PUSH
36312: LD_INT 10
36314: PUSH
36315: LD_INT 5
36317: PUSH
36318: LD_INT 3
36320: PUSH
36321: EMPTY
36322: LIST
36323: LIST
36324: LIST
36325: ST_TO_ADDR
// if GetClass ( i ) = 14 then
36326: LD_VAR 0 6
36330: PPUSH
36331: CALL_OW 257
36335: PUSH
36336: LD_INT 14
36338: EQUAL
36339: IFFALSE 36360
// points := [ 10 , 0 , 0 ] ;
36341: LD_ADDR_VAR 0 9
36345: PUSH
36346: LD_INT 10
36348: PUSH
36349: LD_INT 0
36351: PUSH
36352: LD_INT 0
36354: PUSH
36355: EMPTY
36356: LIST
36357: LIST
36358: LIST
36359: ST_TO_ADDR
// if GetClass ( i ) = 11 then
36360: LD_VAR 0 6
36364: PPUSH
36365: CALL_OW 257
36369: PUSH
36370: LD_INT 11
36372: EQUAL
36373: IFFALSE 36394
// points := [ 30 , 10 , 5 ] ;
36375: LD_ADDR_VAR 0 9
36379: PUSH
36380: LD_INT 30
36382: PUSH
36383: LD_INT 10
36385: PUSH
36386: LD_INT 5
36388: PUSH
36389: EMPTY
36390: LIST
36391: LIST
36392: LIST
36393: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
36394: LD_VAR 0 1
36398: PPUSH
36399: LD_INT 5
36401: PPUSH
36402: CALL_OW 321
36406: PUSH
36407: LD_INT 2
36409: EQUAL
36410: IFFALSE 36427
// bpoints := bpoints * 1.8 ;
36412: LD_ADDR_VAR 0 10
36416: PUSH
36417: LD_VAR 0 10
36421: PUSH
36422: LD_REAL  1.80000000000000E+0000
36425: MUL
36426: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
36427: LD_VAR 0 6
36431: PPUSH
36432: CALL_OW 257
36436: PUSH
36437: LD_INT 1
36439: PUSH
36440: LD_INT 2
36442: PUSH
36443: LD_INT 3
36445: PUSH
36446: LD_INT 4
36448: PUSH
36449: EMPTY
36450: LIST
36451: LIST
36452: LIST
36453: LIST
36454: IN
36455: PUSH
36456: LD_VAR 0 1
36460: PPUSH
36461: LD_INT 51
36463: PPUSH
36464: CALL_OW 321
36468: PUSH
36469: LD_INT 2
36471: EQUAL
36472: AND
36473: IFFALSE 36490
// bpoints := bpoints * 1.2 ;
36475: LD_ADDR_VAR 0 10
36479: PUSH
36480: LD_VAR 0 10
36484: PUSH
36485: LD_REAL  1.20000000000000E+0000
36488: MUL
36489: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
36490: LD_VAR 0 6
36494: PPUSH
36495: CALL_OW 257
36499: PUSH
36500: LD_INT 5
36502: PUSH
36503: LD_INT 7
36505: PUSH
36506: LD_INT 9
36508: PUSH
36509: EMPTY
36510: LIST
36511: LIST
36512: LIST
36513: IN
36514: PUSH
36515: LD_VAR 0 1
36519: PPUSH
36520: LD_INT 52
36522: PPUSH
36523: CALL_OW 321
36527: PUSH
36528: LD_INT 2
36530: EQUAL
36531: AND
36532: IFFALSE 36549
// bpoints := bpoints * 1.5 ;
36534: LD_ADDR_VAR 0 10
36538: PUSH
36539: LD_VAR 0 10
36543: PUSH
36544: LD_REAL  1.50000000000000E+0000
36547: MUL
36548: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
36549: LD_VAR 0 1
36553: PPUSH
36554: LD_INT 66
36556: PPUSH
36557: CALL_OW 321
36561: PUSH
36562: LD_INT 2
36564: EQUAL
36565: IFFALSE 36582
// bpoints := bpoints * 1.1 ;
36567: LD_ADDR_VAR 0 10
36571: PUSH
36572: LD_VAR 0 10
36576: PUSH
36577: LD_REAL  1.10000000000000E+0000
36580: MUL
36581: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
36582: LD_ADDR_VAR 0 10
36586: PUSH
36587: LD_VAR 0 10
36591: PUSH
36592: LD_VAR 0 6
36596: PPUSH
36597: LD_INT 1
36599: PPUSH
36600: CALL_OW 259
36604: PUSH
36605: LD_REAL  1.15000000000000E+0000
36608: MUL
36609: MUL
36610: ST_TO_ADDR
// end ; unit_vehicle :
36611: GO 37441
36613: LD_INT 2
36615: DOUBLE
36616: EQUAL
36617: IFTRUE 36621
36619: GO 37429
36621: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
36622: LD_VAR 0 6
36626: PPUSH
36627: CALL_OW 264
36631: PUSH
36632: LD_INT 2
36634: PUSH
36635: LD_INT 42
36637: PUSH
36638: LD_INT 24
36640: PUSH
36641: EMPTY
36642: LIST
36643: LIST
36644: LIST
36645: IN
36646: IFFALSE 36667
// points := [ 25 , 5 , 3 ] ;
36648: LD_ADDR_VAR 0 9
36652: PUSH
36653: LD_INT 25
36655: PUSH
36656: LD_INT 5
36658: PUSH
36659: LD_INT 3
36661: PUSH
36662: EMPTY
36663: LIST
36664: LIST
36665: LIST
36666: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
36667: LD_VAR 0 6
36671: PPUSH
36672: CALL_OW 264
36676: PUSH
36677: LD_INT 4
36679: PUSH
36680: LD_INT 43
36682: PUSH
36683: LD_INT 25
36685: PUSH
36686: EMPTY
36687: LIST
36688: LIST
36689: LIST
36690: IN
36691: IFFALSE 36712
// points := [ 40 , 15 , 5 ] ;
36693: LD_ADDR_VAR 0 9
36697: PUSH
36698: LD_INT 40
36700: PUSH
36701: LD_INT 15
36703: PUSH
36704: LD_INT 5
36706: PUSH
36707: EMPTY
36708: LIST
36709: LIST
36710: LIST
36711: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
36712: LD_VAR 0 6
36716: PPUSH
36717: CALL_OW 264
36721: PUSH
36722: LD_INT 3
36724: PUSH
36725: LD_INT 23
36727: PUSH
36728: EMPTY
36729: LIST
36730: LIST
36731: IN
36732: IFFALSE 36753
// points := [ 7 , 25 , 8 ] ;
36734: LD_ADDR_VAR 0 9
36738: PUSH
36739: LD_INT 7
36741: PUSH
36742: LD_INT 25
36744: PUSH
36745: LD_INT 8
36747: PUSH
36748: EMPTY
36749: LIST
36750: LIST
36751: LIST
36752: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
36753: LD_VAR 0 6
36757: PPUSH
36758: CALL_OW 264
36762: PUSH
36763: LD_INT 5
36765: PUSH
36766: LD_INT 27
36768: PUSH
36769: LD_INT 44
36771: PUSH
36772: EMPTY
36773: LIST
36774: LIST
36775: LIST
36776: IN
36777: IFFALSE 36798
// points := [ 14 , 50 , 16 ] ;
36779: LD_ADDR_VAR 0 9
36783: PUSH
36784: LD_INT 14
36786: PUSH
36787: LD_INT 50
36789: PUSH
36790: LD_INT 16
36792: PUSH
36793: EMPTY
36794: LIST
36795: LIST
36796: LIST
36797: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
36798: LD_VAR 0 6
36802: PPUSH
36803: CALL_OW 264
36807: PUSH
36808: LD_INT 6
36810: PUSH
36811: LD_INT 46
36813: PUSH
36814: EMPTY
36815: LIST
36816: LIST
36817: IN
36818: IFFALSE 36839
// points := [ 32 , 120 , 70 ] ;
36820: LD_ADDR_VAR 0 9
36824: PUSH
36825: LD_INT 32
36827: PUSH
36828: LD_INT 120
36830: PUSH
36831: LD_INT 70
36833: PUSH
36834: EMPTY
36835: LIST
36836: LIST
36837: LIST
36838: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
36839: LD_VAR 0 6
36843: PPUSH
36844: CALL_OW 264
36848: PUSH
36849: LD_INT 7
36851: PUSH
36852: LD_INT 28
36854: PUSH
36855: LD_INT 45
36857: PUSH
36858: LD_EXP 26
36862: PUSH
36863: EMPTY
36864: LIST
36865: LIST
36866: LIST
36867: LIST
36868: IN
36869: IFFALSE 36890
// points := [ 35 , 20 , 45 ] ;
36871: LD_ADDR_VAR 0 9
36875: PUSH
36876: LD_INT 35
36878: PUSH
36879: LD_INT 20
36881: PUSH
36882: LD_INT 45
36884: PUSH
36885: EMPTY
36886: LIST
36887: LIST
36888: LIST
36889: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
36890: LD_VAR 0 6
36894: PPUSH
36895: CALL_OW 264
36899: PUSH
36900: LD_INT 47
36902: PUSH
36903: EMPTY
36904: LIST
36905: IN
36906: IFFALSE 36927
// points := [ 67 , 45 , 75 ] ;
36908: LD_ADDR_VAR 0 9
36912: PUSH
36913: LD_INT 67
36915: PUSH
36916: LD_INT 45
36918: PUSH
36919: LD_INT 75
36921: PUSH
36922: EMPTY
36923: LIST
36924: LIST
36925: LIST
36926: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
36927: LD_VAR 0 6
36931: PPUSH
36932: CALL_OW 264
36936: PUSH
36937: LD_INT 26
36939: PUSH
36940: EMPTY
36941: LIST
36942: IN
36943: IFFALSE 36964
// points := [ 120 , 30 , 80 ] ;
36945: LD_ADDR_VAR 0 9
36949: PUSH
36950: LD_INT 120
36952: PUSH
36953: LD_INT 30
36955: PUSH
36956: LD_INT 80
36958: PUSH
36959: EMPTY
36960: LIST
36961: LIST
36962: LIST
36963: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
36964: LD_VAR 0 6
36968: PPUSH
36969: CALL_OW 264
36973: PUSH
36974: LD_INT 22
36976: PUSH
36977: EMPTY
36978: LIST
36979: IN
36980: IFFALSE 37001
// points := [ 40 , 1 , 1 ] ;
36982: LD_ADDR_VAR 0 9
36986: PUSH
36987: LD_INT 40
36989: PUSH
36990: LD_INT 1
36992: PUSH
36993: LD_INT 1
36995: PUSH
36996: EMPTY
36997: LIST
36998: LIST
36999: LIST
37000: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
37001: LD_VAR 0 6
37005: PPUSH
37006: CALL_OW 264
37010: PUSH
37011: LD_INT 29
37013: PUSH
37014: EMPTY
37015: LIST
37016: IN
37017: IFFALSE 37038
// points := [ 70 , 200 , 400 ] ;
37019: LD_ADDR_VAR 0 9
37023: PUSH
37024: LD_INT 70
37026: PUSH
37027: LD_INT 200
37029: PUSH
37030: LD_INT 400
37032: PUSH
37033: EMPTY
37034: LIST
37035: LIST
37036: LIST
37037: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
37038: LD_VAR 0 6
37042: PPUSH
37043: CALL_OW 264
37047: PUSH
37048: LD_INT 14
37050: PUSH
37051: LD_INT 53
37053: PUSH
37054: EMPTY
37055: LIST
37056: LIST
37057: IN
37058: IFFALSE 37079
// points := [ 40 , 10 , 20 ] ;
37060: LD_ADDR_VAR 0 9
37064: PUSH
37065: LD_INT 40
37067: PUSH
37068: LD_INT 10
37070: PUSH
37071: LD_INT 20
37073: PUSH
37074: EMPTY
37075: LIST
37076: LIST
37077: LIST
37078: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
37079: LD_VAR 0 6
37083: PPUSH
37084: CALL_OW 264
37088: PUSH
37089: LD_INT 9
37091: PUSH
37092: EMPTY
37093: LIST
37094: IN
37095: IFFALSE 37116
// points := [ 5 , 70 , 20 ] ;
37097: LD_ADDR_VAR 0 9
37101: PUSH
37102: LD_INT 5
37104: PUSH
37105: LD_INT 70
37107: PUSH
37108: LD_INT 20
37110: PUSH
37111: EMPTY
37112: LIST
37113: LIST
37114: LIST
37115: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
37116: LD_VAR 0 6
37120: PPUSH
37121: CALL_OW 264
37125: PUSH
37126: LD_INT 10
37128: PUSH
37129: EMPTY
37130: LIST
37131: IN
37132: IFFALSE 37153
// points := [ 35 , 110 , 70 ] ;
37134: LD_ADDR_VAR 0 9
37138: PUSH
37139: LD_INT 35
37141: PUSH
37142: LD_INT 110
37144: PUSH
37145: LD_INT 70
37147: PUSH
37148: EMPTY
37149: LIST
37150: LIST
37151: LIST
37152: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
37153: LD_VAR 0 6
37157: PPUSH
37158: CALL_OW 265
37162: PUSH
37163: LD_INT 25
37165: EQUAL
37166: IFFALSE 37187
// points := [ 80 , 65 , 100 ] ;
37168: LD_ADDR_VAR 0 9
37172: PUSH
37173: LD_INT 80
37175: PUSH
37176: LD_INT 65
37178: PUSH
37179: LD_INT 100
37181: PUSH
37182: EMPTY
37183: LIST
37184: LIST
37185: LIST
37186: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
37187: LD_VAR 0 6
37191: PPUSH
37192: CALL_OW 263
37196: PUSH
37197: LD_INT 1
37199: EQUAL
37200: IFFALSE 37235
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
37202: LD_ADDR_VAR 0 10
37206: PUSH
37207: LD_VAR 0 10
37211: PUSH
37212: LD_VAR 0 6
37216: PPUSH
37217: CALL_OW 311
37221: PPUSH
37222: LD_INT 3
37224: PPUSH
37225: CALL_OW 259
37229: PUSH
37230: LD_INT 4
37232: MUL
37233: MUL
37234: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
37235: LD_VAR 0 6
37239: PPUSH
37240: CALL_OW 263
37244: PUSH
37245: LD_INT 2
37247: EQUAL
37248: IFFALSE 37299
// begin j := IsControledBy ( i ) ;
37250: LD_ADDR_VAR 0 7
37254: PUSH
37255: LD_VAR 0 6
37259: PPUSH
37260: CALL_OW 312
37264: ST_TO_ADDR
// if j then
37265: LD_VAR 0 7
37269: IFFALSE 37299
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
37271: LD_ADDR_VAR 0 10
37275: PUSH
37276: LD_VAR 0 10
37280: PUSH
37281: LD_VAR 0 7
37285: PPUSH
37286: LD_INT 3
37288: PPUSH
37289: CALL_OW 259
37293: PUSH
37294: LD_INT 3
37296: MUL
37297: MUL
37298: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
37299: LD_VAR 0 6
37303: PPUSH
37304: CALL_OW 264
37308: PUSH
37309: LD_INT 5
37311: PUSH
37312: LD_INT 6
37314: PUSH
37315: LD_INT 46
37317: PUSH
37318: LD_INT 44
37320: PUSH
37321: LD_INT 47
37323: PUSH
37324: LD_INT 45
37326: PUSH
37327: LD_INT 28
37329: PUSH
37330: LD_INT 7
37332: PUSH
37333: LD_INT 27
37335: PUSH
37336: LD_INT 29
37338: PUSH
37339: EMPTY
37340: LIST
37341: LIST
37342: LIST
37343: LIST
37344: LIST
37345: LIST
37346: LIST
37347: LIST
37348: LIST
37349: LIST
37350: IN
37351: PUSH
37352: LD_VAR 0 1
37356: PPUSH
37357: LD_INT 52
37359: PPUSH
37360: CALL_OW 321
37364: PUSH
37365: LD_INT 2
37367: EQUAL
37368: AND
37369: IFFALSE 37386
// bpoints := bpoints * 1.2 ;
37371: LD_ADDR_VAR 0 10
37375: PUSH
37376: LD_VAR 0 10
37380: PUSH
37381: LD_REAL  1.20000000000000E+0000
37384: MUL
37385: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
37386: LD_VAR 0 6
37390: PPUSH
37391: CALL_OW 264
37395: PUSH
37396: LD_INT 6
37398: PUSH
37399: LD_INT 46
37401: PUSH
37402: LD_INT 47
37404: PUSH
37405: EMPTY
37406: LIST
37407: LIST
37408: LIST
37409: IN
37410: IFFALSE 37427
// bpoints := bpoints * 1.2 ;
37412: LD_ADDR_VAR 0 10
37416: PUSH
37417: LD_VAR 0 10
37421: PUSH
37422: LD_REAL  1.20000000000000E+0000
37425: MUL
37426: ST_TO_ADDR
// end ; unit_building :
37427: GO 37441
37429: LD_INT 3
37431: DOUBLE
37432: EQUAL
37433: IFTRUE 37437
37435: GO 37440
37437: POP
// ; end ;
37438: GO 37441
37440: POP
// for j = 1 to 3 do
37441: LD_ADDR_VAR 0 7
37445: PUSH
37446: DOUBLE
37447: LD_INT 1
37449: DEC
37450: ST_TO_ADDR
37451: LD_INT 3
37453: PUSH
37454: FOR_TO
37455: IFFALSE 37508
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
37457: LD_ADDR_VAR 0 5
37461: PUSH
37462: LD_VAR 0 5
37466: PPUSH
37467: LD_VAR 0 7
37471: PPUSH
37472: LD_VAR 0 5
37476: PUSH
37477: LD_VAR 0 7
37481: ARRAY
37482: PUSH
37483: LD_VAR 0 9
37487: PUSH
37488: LD_VAR 0 7
37492: ARRAY
37493: PUSH
37494: LD_VAR 0 10
37498: MUL
37499: PLUS
37500: PPUSH
37501: CALL_OW 1
37505: ST_TO_ADDR
37506: GO 37454
37508: POP
37509: POP
// end ;
37510: GO 35987
37512: POP
37513: POP
// result := Replace ( result , 4 , tmp ) ;
37514: LD_ADDR_VAR 0 5
37518: PUSH
37519: LD_VAR 0 5
37523: PPUSH
37524: LD_INT 4
37526: PPUSH
37527: LD_VAR 0 8
37531: PPUSH
37532: CALL_OW 1
37536: ST_TO_ADDR
// end ;
37537: LD_VAR 0 5
37541: RET
// export function DangerAtRange ( unit , range ) ; begin
37542: LD_INT 0
37544: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
37545: LD_ADDR_VAR 0 3
37549: PUSH
37550: LD_VAR 0 1
37554: PPUSH
37555: CALL_OW 255
37559: PPUSH
37560: LD_VAR 0 1
37564: PPUSH
37565: CALL_OW 250
37569: PPUSH
37570: LD_VAR 0 1
37574: PPUSH
37575: CALL_OW 251
37579: PPUSH
37580: LD_VAR 0 2
37584: PPUSH
37585: CALL 35839 0 4
37589: ST_TO_ADDR
// end ;
37590: LD_VAR 0 3
37594: RET
// export function DangerInArea ( side , area ) ; begin
37595: LD_INT 0
37597: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
37598: LD_ADDR_VAR 0 3
37602: PUSH
37603: LD_VAR 0 2
37607: PPUSH
37608: LD_INT 81
37610: PUSH
37611: LD_VAR 0 1
37615: PUSH
37616: EMPTY
37617: LIST
37618: LIST
37619: PPUSH
37620: CALL_OW 70
37624: ST_TO_ADDR
// end ;
37625: LD_VAR 0 3
37629: RET
// export function IsExtension ( b ) ; begin
37630: LD_INT 0
37632: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
37633: LD_ADDR_VAR 0 2
37637: PUSH
37638: LD_VAR 0 1
37642: PUSH
37643: LD_INT 23
37645: PUSH
37646: LD_INT 20
37648: PUSH
37649: LD_INT 22
37651: PUSH
37652: LD_INT 17
37654: PUSH
37655: LD_INT 24
37657: PUSH
37658: LD_INT 21
37660: PUSH
37661: LD_INT 19
37663: PUSH
37664: LD_INT 16
37666: PUSH
37667: LD_INT 25
37669: PUSH
37670: LD_INT 18
37672: PUSH
37673: EMPTY
37674: LIST
37675: LIST
37676: LIST
37677: LIST
37678: LIST
37679: LIST
37680: LIST
37681: LIST
37682: LIST
37683: LIST
37684: IN
37685: ST_TO_ADDR
// end ;
37686: LD_VAR 0 2
37690: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
37691: LD_INT 0
37693: PPUSH
37694: PPUSH
37695: PPUSH
// result := [ ] ;
37696: LD_ADDR_VAR 0 4
37700: PUSH
37701: EMPTY
37702: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
37703: LD_ADDR_VAR 0 5
37707: PUSH
37708: LD_VAR 0 2
37712: PPUSH
37713: LD_INT 21
37715: PUSH
37716: LD_INT 3
37718: PUSH
37719: EMPTY
37720: LIST
37721: LIST
37722: PPUSH
37723: CALL_OW 70
37727: ST_TO_ADDR
// if not tmp then
37728: LD_VAR 0 5
37732: NOT
37733: IFFALSE 37737
// exit ;
37735: GO 37801
// if checkLink then
37737: LD_VAR 0 3
37741: IFFALSE 37791
// begin for i in tmp do
37743: LD_ADDR_VAR 0 6
37747: PUSH
37748: LD_VAR 0 5
37752: PUSH
37753: FOR_IN
37754: IFFALSE 37789
// if GetBase ( i ) <> base then
37756: LD_VAR 0 6
37760: PPUSH
37761: CALL_OW 274
37765: PUSH
37766: LD_VAR 0 1
37770: NONEQUAL
37771: IFFALSE 37787
// ComLinkToBase ( base , i ) ;
37773: LD_VAR 0 1
37777: PPUSH
37778: LD_VAR 0 6
37782: PPUSH
37783: CALL_OW 169
37787: GO 37753
37789: POP
37790: POP
// end ; result := tmp ;
37791: LD_ADDR_VAR 0 4
37795: PUSH
37796: LD_VAR 0 5
37800: ST_TO_ADDR
// end ;
37801: LD_VAR 0 4
37805: RET
// export function ComComplete ( units , b ) ; var i ; begin
37806: LD_INT 0
37808: PPUSH
37809: PPUSH
// if not units then
37810: LD_VAR 0 1
37814: NOT
37815: IFFALSE 37819
// exit ;
37817: GO 37909
// for i in units do
37819: LD_ADDR_VAR 0 4
37823: PUSH
37824: LD_VAR 0 1
37828: PUSH
37829: FOR_IN
37830: IFFALSE 37907
// if BuildingStatus ( b ) = bs_build then
37832: LD_VAR 0 2
37836: PPUSH
37837: CALL_OW 461
37841: PUSH
37842: LD_INT 1
37844: EQUAL
37845: IFFALSE 37905
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
37847: LD_VAR 0 4
37851: PPUSH
37852: LD_STRING h
37854: PUSH
37855: LD_VAR 0 2
37859: PPUSH
37860: CALL_OW 250
37864: PUSH
37865: LD_VAR 0 2
37869: PPUSH
37870: CALL_OW 251
37874: PUSH
37875: LD_VAR 0 2
37879: PUSH
37880: LD_INT 0
37882: PUSH
37883: LD_INT 0
37885: PUSH
37886: LD_INT 0
37888: PUSH
37889: EMPTY
37890: LIST
37891: LIST
37892: LIST
37893: LIST
37894: LIST
37895: LIST
37896: LIST
37897: PUSH
37898: EMPTY
37899: LIST
37900: PPUSH
37901: CALL_OW 446
37905: GO 37829
37907: POP
37908: POP
// end ;
37909: LD_VAR 0 3
37913: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
37914: LD_INT 0
37916: PPUSH
37917: PPUSH
37918: PPUSH
37919: PPUSH
37920: PPUSH
37921: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
37922: LD_VAR 0 1
37926: NOT
37927: PUSH
37928: LD_VAR 0 1
37932: PPUSH
37933: CALL_OW 263
37937: PUSH
37938: LD_INT 2
37940: NONEQUAL
37941: OR
37942: IFFALSE 37946
// exit ;
37944: GO 38262
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
37946: LD_ADDR_VAR 0 6
37950: PUSH
37951: LD_INT 22
37953: PUSH
37954: LD_VAR 0 1
37958: PPUSH
37959: CALL_OW 255
37963: PUSH
37964: EMPTY
37965: LIST
37966: LIST
37967: PUSH
37968: LD_INT 2
37970: PUSH
37971: LD_INT 30
37973: PUSH
37974: LD_INT 36
37976: PUSH
37977: EMPTY
37978: LIST
37979: LIST
37980: PUSH
37981: LD_INT 34
37983: PUSH
37984: LD_INT 31
37986: PUSH
37987: EMPTY
37988: LIST
37989: LIST
37990: PUSH
37991: EMPTY
37992: LIST
37993: LIST
37994: LIST
37995: PUSH
37996: EMPTY
37997: LIST
37998: LIST
37999: PPUSH
38000: CALL_OW 69
38004: ST_TO_ADDR
// if not tmp then
38005: LD_VAR 0 6
38009: NOT
38010: IFFALSE 38014
// exit ;
38012: GO 38262
// result := [ ] ;
38014: LD_ADDR_VAR 0 2
38018: PUSH
38019: EMPTY
38020: ST_TO_ADDR
// for i in tmp do
38021: LD_ADDR_VAR 0 3
38025: PUSH
38026: LD_VAR 0 6
38030: PUSH
38031: FOR_IN
38032: IFFALSE 38103
// begin t := UnitsInside ( i ) ;
38034: LD_ADDR_VAR 0 4
38038: PUSH
38039: LD_VAR 0 3
38043: PPUSH
38044: CALL_OW 313
38048: ST_TO_ADDR
// if t then
38049: LD_VAR 0 4
38053: IFFALSE 38101
// for j in t do
38055: LD_ADDR_VAR 0 7
38059: PUSH
38060: LD_VAR 0 4
38064: PUSH
38065: FOR_IN
38066: IFFALSE 38099
// result := Replace ( result , result + 1 , j ) ;
38068: LD_ADDR_VAR 0 2
38072: PUSH
38073: LD_VAR 0 2
38077: PPUSH
38078: LD_VAR 0 2
38082: PUSH
38083: LD_INT 1
38085: PLUS
38086: PPUSH
38087: LD_VAR 0 7
38091: PPUSH
38092: CALL_OW 1
38096: ST_TO_ADDR
38097: GO 38065
38099: POP
38100: POP
// end ;
38101: GO 38031
38103: POP
38104: POP
// if not result then
38105: LD_VAR 0 2
38109: NOT
38110: IFFALSE 38114
// exit ;
38112: GO 38262
// mech := result [ 1 ] ;
38114: LD_ADDR_VAR 0 5
38118: PUSH
38119: LD_VAR 0 2
38123: PUSH
38124: LD_INT 1
38126: ARRAY
38127: ST_TO_ADDR
// if result > 1 then
38128: LD_VAR 0 2
38132: PUSH
38133: LD_INT 1
38135: GREATER
38136: IFFALSE 38248
// begin for i = 2 to result do
38138: LD_ADDR_VAR 0 3
38142: PUSH
38143: DOUBLE
38144: LD_INT 2
38146: DEC
38147: ST_TO_ADDR
38148: LD_VAR 0 2
38152: PUSH
38153: FOR_TO
38154: IFFALSE 38246
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
38156: LD_ADDR_VAR 0 4
38160: PUSH
38161: LD_VAR 0 2
38165: PUSH
38166: LD_VAR 0 3
38170: ARRAY
38171: PPUSH
38172: LD_INT 3
38174: PPUSH
38175: CALL_OW 259
38179: PUSH
38180: LD_VAR 0 2
38184: PUSH
38185: LD_VAR 0 3
38189: ARRAY
38190: PPUSH
38191: CALL_OW 432
38195: MINUS
38196: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
38197: LD_VAR 0 4
38201: PUSH
38202: LD_VAR 0 5
38206: PPUSH
38207: LD_INT 3
38209: PPUSH
38210: CALL_OW 259
38214: PUSH
38215: LD_VAR 0 5
38219: PPUSH
38220: CALL_OW 432
38224: MINUS
38225: GREATEREQUAL
38226: IFFALSE 38244
// mech := result [ i ] ;
38228: LD_ADDR_VAR 0 5
38232: PUSH
38233: LD_VAR 0 2
38237: PUSH
38238: LD_VAR 0 3
38242: ARRAY
38243: ST_TO_ADDR
// end ;
38244: GO 38153
38246: POP
38247: POP
// end ; ComLinkTo ( vehicle , mech ) ;
38248: LD_VAR 0 1
38252: PPUSH
38253: LD_VAR 0 5
38257: PPUSH
38258: CALL_OW 135
// end ;
38262: LD_VAR 0 2
38266: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
38267: LD_INT 0
38269: PPUSH
38270: PPUSH
38271: PPUSH
38272: PPUSH
38273: PPUSH
38274: PPUSH
38275: PPUSH
38276: PPUSH
38277: PPUSH
38278: PPUSH
38279: PPUSH
38280: PPUSH
38281: PPUSH
// result := [ ] ;
38282: LD_ADDR_VAR 0 7
38286: PUSH
38287: EMPTY
38288: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
38289: LD_VAR 0 1
38293: PPUSH
38294: CALL_OW 266
38298: PUSH
38299: LD_INT 0
38301: PUSH
38302: LD_INT 1
38304: PUSH
38305: EMPTY
38306: LIST
38307: LIST
38308: IN
38309: NOT
38310: IFFALSE 38314
// exit ;
38312: GO 39948
// if name then
38314: LD_VAR 0 3
38318: IFFALSE 38334
// SetBName ( base_dep , name ) ;
38320: LD_VAR 0 1
38324: PPUSH
38325: LD_VAR 0 3
38329: PPUSH
38330: CALL_OW 500
// base := GetBase ( base_dep ) ;
38334: LD_ADDR_VAR 0 15
38338: PUSH
38339: LD_VAR 0 1
38343: PPUSH
38344: CALL_OW 274
38348: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
38349: LD_ADDR_VAR 0 16
38353: PUSH
38354: LD_VAR 0 1
38358: PPUSH
38359: CALL_OW 255
38363: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
38364: LD_ADDR_VAR 0 17
38368: PUSH
38369: LD_VAR 0 1
38373: PPUSH
38374: CALL_OW 248
38378: ST_TO_ADDR
// if sources then
38379: LD_VAR 0 5
38383: IFFALSE 38430
// for i = 1 to 3 do
38385: LD_ADDR_VAR 0 8
38389: PUSH
38390: DOUBLE
38391: LD_INT 1
38393: DEC
38394: ST_TO_ADDR
38395: LD_INT 3
38397: PUSH
38398: FOR_TO
38399: IFFALSE 38428
// AddResourceType ( base , i , sources [ i ] ) ;
38401: LD_VAR 0 15
38405: PPUSH
38406: LD_VAR 0 8
38410: PPUSH
38411: LD_VAR 0 5
38415: PUSH
38416: LD_VAR 0 8
38420: ARRAY
38421: PPUSH
38422: CALL_OW 276
38426: GO 38398
38428: POP
38429: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
38430: LD_ADDR_VAR 0 18
38434: PUSH
38435: LD_VAR 0 15
38439: PPUSH
38440: LD_VAR 0 2
38444: PPUSH
38445: LD_INT 1
38447: PPUSH
38448: CALL 37691 0 3
38452: ST_TO_ADDR
// InitHc ;
38453: CALL_OW 19
// InitUc ;
38457: CALL_OW 18
// uc_side := side ;
38461: LD_ADDR_OWVAR 20
38465: PUSH
38466: LD_VAR 0 16
38470: ST_TO_ADDR
// uc_nation := nation ;
38471: LD_ADDR_OWVAR 21
38475: PUSH
38476: LD_VAR 0 17
38480: ST_TO_ADDR
// if buildings then
38481: LD_VAR 0 18
38485: IFFALSE 39807
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
38487: LD_ADDR_VAR 0 19
38491: PUSH
38492: LD_VAR 0 18
38496: PPUSH
38497: LD_INT 2
38499: PUSH
38500: LD_INT 30
38502: PUSH
38503: LD_INT 29
38505: PUSH
38506: EMPTY
38507: LIST
38508: LIST
38509: PUSH
38510: LD_INT 30
38512: PUSH
38513: LD_INT 30
38515: PUSH
38516: EMPTY
38517: LIST
38518: LIST
38519: PUSH
38520: EMPTY
38521: LIST
38522: LIST
38523: LIST
38524: PPUSH
38525: CALL_OW 72
38529: ST_TO_ADDR
// if tmp then
38530: LD_VAR 0 19
38534: IFFALSE 38582
// for i in tmp do
38536: LD_ADDR_VAR 0 8
38540: PUSH
38541: LD_VAR 0 19
38545: PUSH
38546: FOR_IN
38547: IFFALSE 38580
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
38549: LD_VAR 0 8
38553: PPUSH
38554: CALL_OW 250
38558: PPUSH
38559: LD_VAR 0 8
38563: PPUSH
38564: CALL_OW 251
38568: PPUSH
38569: LD_VAR 0 16
38573: PPUSH
38574: CALL_OW 441
38578: GO 38546
38580: POP
38581: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
38582: LD_VAR 0 18
38586: PPUSH
38587: LD_INT 2
38589: PUSH
38590: LD_INT 30
38592: PUSH
38593: LD_INT 32
38595: PUSH
38596: EMPTY
38597: LIST
38598: LIST
38599: PUSH
38600: LD_INT 30
38602: PUSH
38603: LD_INT 33
38605: PUSH
38606: EMPTY
38607: LIST
38608: LIST
38609: PUSH
38610: EMPTY
38611: LIST
38612: LIST
38613: LIST
38614: PPUSH
38615: CALL_OW 72
38619: IFFALSE 38707
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
38621: LD_ADDR_VAR 0 8
38625: PUSH
38626: LD_VAR 0 18
38630: PPUSH
38631: LD_INT 2
38633: PUSH
38634: LD_INT 30
38636: PUSH
38637: LD_INT 32
38639: PUSH
38640: EMPTY
38641: LIST
38642: LIST
38643: PUSH
38644: LD_INT 30
38646: PUSH
38647: LD_INT 33
38649: PUSH
38650: EMPTY
38651: LIST
38652: LIST
38653: PUSH
38654: EMPTY
38655: LIST
38656: LIST
38657: LIST
38658: PPUSH
38659: CALL_OW 72
38663: PUSH
38664: FOR_IN
38665: IFFALSE 38705
// begin if not GetBWeapon ( i ) then
38667: LD_VAR 0 8
38671: PPUSH
38672: CALL_OW 269
38676: NOT
38677: IFFALSE 38703
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
38679: LD_VAR 0 8
38683: PPUSH
38684: LD_VAR 0 8
38688: PPUSH
38689: LD_VAR 0 2
38693: PPUSH
38694: CALL 39953 0 2
38698: PPUSH
38699: CALL_OW 431
// end ;
38703: GO 38664
38705: POP
38706: POP
// end ; for i = 1 to personel do
38707: LD_ADDR_VAR 0 8
38711: PUSH
38712: DOUBLE
38713: LD_INT 1
38715: DEC
38716: ST_TO_ADDR
38717: LD_VAR 0 6
38721: PUSH
38722: FOR_TO
38723: IFFALSE 39787
// begin if i > 4 then
38725: LD_VAR 0 8
38729: PUSH
38730: LD_INT 4
38732: GREATER
38733: IFFALSE 38737
// break ;
38735: GO 39787
// case i of 1 :
38737: LD_VAR 0 8
38741: PUSH
38742: LD_INT 1
38744: DOUBLE
38745: EQUAL
38746: IFTRUE 38750
38748: GO 38830
38750: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
38751: LD_ADDR_VAR 0 12
38755: PUSH
38756: LD_VAR 0 18
38760: PPUSH
38761: LD_INT 22
38763: PUSH
38764: LD_VAR 0 16
38768: PUSH
38769: EMPTY
38770: LIST
38771: LIST
38772: PUSH
38773: LD_INT 58
38775: PUSH
38776: EMPTY
38777: LIST
38778: PUSH
38779: LD_INT 2
38781: PUSH
38782: LD_INT 30
38784: PUSH
38785: LD_INT 32
38787: PUSH
38788: EMPTY
38789: LIST
38790: LIST
38791: PUSH
38792: LD_INT 30
38794: PUSH
38795: LD_INT 4
38797: PUSH
38798: EMPTY
38799: LIST
38800: LIST
38801: PUSH
38802: LD_INT 30
38804: PUSH
38805: LD_INT 5
38807: PUSH
38808: EMPTY
38809: LIST
38810: LIST
38811: PUSH
38812: EMPTY
38813: LIST
38814: LIST
38815: LIST
38816: LIST
38817: PUSH
38818: EMPTY
38819: LIST
38820: LIST
38821: LIST
38822: PPUSH
38823: CALL_OW 72
38827: ST_TO_ADDR
38828: GO 39052
38830: LD_INT 2
38832: DOUBLE
38833: EQUAL
38834: IFTRUE 38838
38836: GO 38900
38838: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
38839: LD_ADDR_VAR 0 12
38843: PUSH
38844: LD_VAR 0 18
38848: PPUSH
38849: LD_INT 22
38851: PUSH
38852: LD_VAR 0 16
38856: PUSH
38857: EMPTY
38858: LIST
38859: LIST
38860: PUSH
38861: LD_INT 2
38863: PUSH
38864: LD_INT 30
38866: PUSH
38867: LD_INT 0
38869: PUSH
38870: EMPTY
38871: LIST
38872: LIST
38873: PUSH
38874: LD_INT 30
38876: PUSH
38877: LD_INT 1
38879: PUSH
38880: EMPTY
38881: LIST
38882: LIST
38883: PUSH
38884: EMPTY
38885: LIST
38886: LIST
38887: LIST
38888: PUSH
38889: EMPTY
38890: LIST
38891: LIST
38892: PPUSH
38893: CALL_OW 72
38897: ST_TO_ADDR
38898: GO 39052
38900: LD_INT 3
38902: DOUBLE
38903: EQUAL
38904: IFTRUE 38908
38906: GO 38970
38908: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
38909: LD_ADDR_VAR 0 12
38913: PUSH
38914: LD_VAR 0 18
38918: PPUSH
38919: LD_INT 22
38921: PUSH
38922: LD_VAR 0 16
38926: PUSH
38927: EMPTY
38928: LIST
38929: LIST
38930: PUSH
38931: LD_INT 2
38933: PUSH
38934: LD_INT 30
38936: PUSH
38937: LD_INT 2
38939: PUSH
38940: EMPTY
38941: LIST
38942: LIST
38943: PUSH
38944: LD_INT 30
38946: PUSH
38947: LD_INT 3
38949: PUSH
38950: EMPTY
38951: LIST
38952: LIST
38953: PUSH
38954: EMPTY
38955: LIST
38956: LIST
38957: LIST
38958: PUSH
38959: EMPTY
38960: LIST
38961: LIST
38962: PPUSH
38963: CALL_OW 72
38967: ST_TO_ADDR
38968: GO 39052
38970: LD_INT 4
38972: DOUBLE
38973: EQUAL
38974: IFTRUE 38978
38976: GO 39051
38978: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
38979: LD_ADDR_VAR 0 12
38983: PUSH
38984: LD_VAR 0 18
38988: PPUSH
38989: LD_INT 22
38991: PUSH
38992: LD_VAR 0 16
38996: PUSH
38997: EMPTY
38998: LIST
38999: LIST
39000: PUSH
39001: LD_INT 2
39003: PUSH
39004: LD_INT 30
39006: PUSH
39007: LD_INT 6
39009: PUSH
39010: EMPTY
39011: LIST
39012: LIST
39013: PUSH
39014: LD_INT 30
39016: PUSH
39017: LD_INT 7
39019: PUSH
39020: EMPTY
39021: LIST
39022: LIST
39023: PUSH
39024: LD_INT 30
39026: PUSH
39027: LD_INT 8
39029: PUSH
39030: EMPTY
39031: LIST
39032: LIST
39033: PUSH
39034: EMPTY
39035: LIST
39036: LIST
39037: LIST
39038: LIST
39039: PUSH
39040: EMPTY
39041: LIST
39042: LIST
39043: PPUSH
39044: CALL_OW 72
39048: ST_TO_ADDR
39049: GO 39052
39051: POP
// if i = 1 then
39052: LD_VAR 0 8
39056: PUSH
39057: LD_INT 1
39059: EQUAL
39060: IFFALSE 39171
// begin tmp := [ ] ;
39062: LD_ADDR_VAR 0 19
39066: PUSH
39067: EMPTY
39068: ST_TO_ADDR
// for j in f do
39069: LD_ADDR_VAR 0 9
39073: PUSH
39074: LD_VAR 0 12
39078: PUSH
39079: FOR_IN
39080: IFFALSE 39153
// if GetBType ( j ) = b_bunker then
39082: LD_VAR 0 9
39086: PPUSH
39087: CALL_OW 266
39091: PUSH
39092: LD_INT 32
39094: EQUAL
39095: IFFALSE 39122
// tmp := Insert ( tmp , 1 , j ) else
39097: LD_ADDR_VAR 0 19
39101: PUSH
39102: LD_VAR 0 19
39106: PPUSH
39107: LD_INT 1
39109: PPUSH
39110: LD_VAR 0 9
39114: PPUSH
39115: CALL_OW 2
39119: ST_TO_ADDR
39120: GO 39151
// tmp := Insert ( tmp , tmp + 1 , j ) ;
39122: LD_ADDR_VAR 0 19
39126: PUSH
39127: LD_VAR 0 19
39131: PPUSH
39132: LD_VAR 0 19
39136: PUSH
39137: LD_INT 1
39139: PLUS
39140: PPUSH
39141: LD_VAR 0 9
39145: PPUSH
39146: CALL_OW 2
39150: ST_TO_ADDR
39151: GO 39079
39153: POP
39154: POP
// if tmp then
39155: LD_VAR 0 19
39159: IFFALSE 39171
// f := tmp ;
39161: LD_ADDR_VAR 0 12
39165: PUSH
39166: LD_VAR 0 19
39170: ST_TO_ADDR
// end ; x := personel [ i ] ;
39171: LD_ADDR_VAR 0 13
39175: PUSH
39176: LD_VAR 0 6
39180: PUSH
39181: LD_VAR 0 8
39185: ARRAY
39186: ST_TO_ADDR
// if x = - 1 then
39187: LD_VAR 0 13
39191: PUSH
39192: LD_INT 1
39194: NEG
39195: EQUAL
39196: IFFALSE 39405
// begin for j in f do
39198: LD_ADDR_VAR 0 9
39202: PUSH
39203: LD_VAR 0 12
39207: PUSH
39208: FOR_IN
39209: IFFALSE 39401
// repeat InitHc ;
39211: CALL_OW 19
// if GetBType ( j ) = b_barracks then
39215: LD_VAR 0 9
39219: PPUSH
39220: CALL_OW 266
39224: PUSH
39225: LD_INT 5
39227: EQUAL
39228: IFFALSE 39298
// begin if UnitsInside ( j ) < 3 then
39230: LD_VAR 0 9
39234: PPUSH
39235: CALL_OW 313
39239: PUSH
39240: LD_INT 3
39242: LESS
39243: IFFALSE 39279
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39245: LD_INT 0
39247: PPUSH
39248: LD_INT 5
39250: PUSH
39251: LD_INT 8
39253: PUSH
39254: LD_INT 9
39256: PUSH
39257: EMPTY
39258: LIST
39259: LIST
39260: LIST
39261: PUSH
39262: LD_VAR 0 17
39266: ARRAY
39267: PPUSH
39268: LD_VAR 0 4
39272: PPUSH
39273: CALL_OW 380
39277: GO 39296
// PrepareHuman ( false , i , skill ) ;
39279: LD_INT 0
39281: PPUSH
39282: LD_VAR 0 8
39286: PPUSH
39287: LD_VAR 0 4
39291: PPUSH
39292: CALL_OW 380
// end else
39296: GO 39315
// PrepareHuman ( false , i , skill ) ;
39298: LD_INT 0
39300: PPUSH
39301: LD_VAR 0 8
39305: PPUSH
39306: LD_VAR 0 4
39310: PPUSH
39311: CALL_OW 380
// un := CreateHuman ;
39315: LD_ADDR_VAR 0 14
39319: PUSH
39320: CALL_OW 44
39324: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39325: LD_ADDR_VAR 0 7
39329: PUSH
39330: LD_VAR 0 7
39334: PPUSH
39335: LD_INT 1
39337: PPUSH
39338: LD_VAR 0 14
39342: PPUSH
39343: CALL_OW 2
39347: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
39348: LD_VAR 0 14
39352: PPUSH
39353: LD_VAR 0 9
39357: PPUSH
39358: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
39362: LD_VAR 0 9
39366: PPUSH
39367: CALL_OW 313
39371: PUSH
39372: LD_INT 6
39374: EQUAL
39375: PUSH
39376: LD_VAR 0 9
39380: PPUSH
39381: CALL_OW 266
39385: PUSH
39386: LD_INT 32
39388: PUSH
39389: LD_INT 31
39391: PUSH
39392: EMPTY
39393: LIST
39394: LIST
39395: IN
39396: OR
39397: IFFALSE 39211
39399: GO 39208
39401: POP
39402: POP
// end else
39403: GO 39785
// for j = 1 to x do
39405: LD_ADDR_VAR 0 9
39409: PUSH
39410: DOUBLE
39411: LD_INT 1
39413: DEC
39414: ST_TO_ADDR
39415: LD_VAR 0 13
39419: PUSH
39420: FOR_TO
39421: IFFALSE 39783
// begin InitHc ;
39423: CALL_OW 19
// if not f then
39427: LD_VAR 0 12
39431: NOT
39432: IFFALSE 39521
// begin PrepareHuman ( false , i , skill ) ;
39434: LD_INT 0
39436: PPUSH
39437: LD_VAR 0 8
39441: PPUSH
39442: LD_VAR 0 4
39446: PPUSH
39447: CALL_OW 380
// un := CreateHuman ;
39451: LD_ADDR_VAR 0 14
39455: PUSH
39456: CALL_OW 44
39460: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39461: LD_ADDR_VAR 0 7
39465: PUSH
39466: LD_VAR 0 7
39470: PPUSH
39471: LD_INT 1
39473: PPUSH
39474: LD_VAR 0 14
39478: PPUSH
39479: CALL_OW 2
39483: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39484: LD_VAR 0 14
39488: PPUSH
39489: LD_VAR 0 1
39493: PPUSH
39494: CALL_OW 250
39498: PPUSH
39499: LD_VAR 0 1
39503: PPUSH
39504: CALL_OW 251
39508: PPUSH
39509: LD_INT 10
39511: PPUSH
39512: LD_INT 0
39514: PPUSH
39515: CALL_OW 50
// continue ;
39519: GO 39420
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
39521: LD_VAR 0 12
39525: PUSH
39526: LD_INT 1
39528: ARRAY
39529: PPUSH
39530: CALL_OW 313
39534: PUSH
39535: LD_VAR 0 12
39539: PUSH
39540: LD_INT 1
39542: ARRAY
39543: PPUSH
39544: CALL_OW 266
39548: PUSH
39549: LD_INT 32
39551: PUSH
39552: LD_INT 31
39554: PUSH
39555: EMPTY
39556: LIST
39557: LIST
39558: IN
39559: AND
39560: PUSH
39561: LD_VAR 0 12
39565: PUSH
39566: LD_INT 1
39568: ARRAY
39569: PPUSH
39570: CALL_OW 313
39574: PUSH
39575: LD_INT 6
39577: EQUAL
39578: OR
39579: IFFALSE 39599
// f := Delete ( f , 1 ) ;
39581: LD_ADDR_VAR 0 12
39585: PUSH
39586: LD_VAR 0 12
39590: PPUSH
39591: LD_INT 1
39593: PPUSH
39594: CALL_OW 3
39598: ST_TO_ADDR
// if not f then
39599: LD_VAR 0 12
39603: NOT
39604: IFFALSE 39622
// begin x := x + 2 ;
39606: LD_ADDR_VAR 0 13
39610: PUSH
39611: LD_VAR 0 13
39615: PUSH
39616: LD_INT 2
39618: PLUS
39619: ST_TO_ADDR
// continue ;
39620: GO 39420
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
39622: LD_VAR 0 12
39626: PUSH
39627: LD_INT 1
39629: ARRAY
39630: PPUSH
39631: CALL_OW 266
39635: PUSH
39636: LD_INT 5
39638: EQUAL
39639: IFFALSE 39713
// begin if UnitsInside ( f [ 1 ] ) < 3 then
39641: LD_VAR 0 12
39645: PUSH
39646: LD_INT 1
39648: ARRAY
39649: PPUSH
39650: CALL_OW 313
39654: PUSH
39655: LD_INT 3
39657: LESS
39658: IFFALSE 39694
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39660: LD_INT 0
39662: PPUSH
39663: LD_INT 5
39665: PUSH
39666: LD_INT 8
39668: PUSH
39669: LD_INT 9
39671: PUSH
39672: EMPTY
39673: LIST
39674: LIST
39675: LIST
39676: PUSH
39677: LD_VAR 0 17
39681: ARRAY
39682: PPUSH
39683: LD_VAR 0 4
39687: PPUSH
39688: CALL_OW 380
39692: GO 39711
// PrepareHuman ( false , i , skill ) ;
39694: LD_INT 0
39696: PPUSH
39697: LD_VAR 0 8
39701: PPUSH
39702: LD_VAR 0 4
39706: PPUSH
39707: CALL_OW 380
// end else
39711: GO 39730
// PrepareHuman ( false , i , skill ) ;
39713: LD_INT 0
39715: PPUSH
39716: LD_VAR 0 8
39720: PPUSH
39721: LD_VAR 0 4
39725: PPUSH
39726: CALL_OW 380
// un := CreateHuman ;
39730: LD_ADDR_VAR 0 14
39734: PUSH
39735: CALL_OW 44
39739: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39740: LD_ADDR_VAR 0 7
39744: PUSH
39745: LD_VAR 0 7
39749: PPUSH
39750: LD_INT 1
39752: PPUSH
39753: LD_VAR 0 14
39757: PPUSH
39758: CALL_OW 2
39762: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
39763: LD_VAR 0 14
39767: PPUSH
39768: LD_VAR 0 12
39772: PUSH
39773: LD_INT 1
39775: ARRAY
39776: PPUSH
39777: CALL_OW 52
// end ;
39781: GO 39420
39783: POP
39784: POP
// end ;
39785: GO 38722
39787: POP
39788: POP
// result := result ^ buildings ;
39789: LD_ADDR_VAR 0 7
39793: PUSH
39794: LD_VAR 0 7
39798: PUSH
39799: LD_VAR 0 18
39803: ADD
39804: ST_TO_ADDR
// end else
39805: GO 39948
// begin for i = 1 to personel do
39807: LD_ADDR_VAR 0 8
39811: PUSH
39812: DOUBLE
39813: LD_INT 1
39815: DEC
39816: ST_TO_ADDR
39817: LD_VAR 0 6
39821: PUSH
39822: FOR_TO
39823: IFFALSE 39946
// begin if i > 4 then
39825: LD_VAR 0 8
39829: PUSH
39830: LD_INT 4
39832: GREATER
39833: IFFALSE 39837
// break ;
39835: GO 39946
// x := personel [ i ] ;
39837: LD_ADDR_VAR 0 13
39841: PUSH
39842: LD_VAR 0 6
39846: PUSH
39847: LD_VAR 0 8
39851: ARRAY
39852: ST_TO_ADDR
// if x = - 1 then
39853: LD_VAR 0 13
39857: PUSH
39858: LD_INT 1
39860: NEG
39861: EQUAL
39862: IFFALSE 39866
// continue ;
39864: GO 39822
// PrepareHuman ( false , i , skill ) ;
39866: LD_INT 0
39868: PPUSH
39869: LD_VAR 0 8
39873: PPUSH
39874: LD_VAR 0 4
39878: PPUSH
39879: CALL_OW 380
// un := CreateHuman ;
39883: LD_ADDR_VAR 0 14
39887: PUSH
39888: CALL_OW 44
39892: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39893: LD_VAR 0 14
39897: PPUSH
39898: LD_VAR 0 1
39902: PPUSH
39903: CALL_OW 250
39907: PPUSH
39908: LD_VAR 0 1
39912: PPUSH
39913: CALL_OW 251
39917: PPUSH
39918: LD_INT 10
39920: PPUSH
39921: LD_INT 0
39923: PPUSH
39924: CALL_OW 50
// result := result ^ un ;
39928: LD_ADDR_VAR 0 7
39932: PUSH
39933: LD_VAR 0 7
39937: PUSH
39938: LD_VAR 0 14
39942: ADD
39943: ST_TO_ADDR
// end ;
39944: GO 39822
39946: POP
39947: POP
// end ; end ;
39948: LD_VAR 0 7
39952: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
39953: LD_INT 0
39955: PPUSH
39956: PPUSH
39957: PPUSH
39958: PPUSH
39959: PPUSH
39960: PPUSH
39961: PPUSH
39962: PPUSH
39963: PPUSH
39964: PPUSH
39965: PPUSH
39966: PPUSH
39967: PPUSH
39968: PPUSH
39969: PPUSH
39970: PPUSH
// result := false ;
39971: LD_ADDR_VAR 0 3
39975: PUSH
39976: LD_INT 0
39978: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
39979: LD_VAR 0 1
39983: NOT
39984: PUSH
39985: LD_VAR 0 1
39989: PPUSH
39990: CALL_OW 266
39994: PUSH
39995: LD_INT 32
39997: PUSH
39998: LD_INT 33
40000: PUSH
40001: EMPTY
40002: LIST
40003: LIST
40004: IN
40005: NOT
40006: OR
40007: IFFALSE 40011
// exit ;
40009: GO 41120
// nat := GetNation ( tower ) ;
40011: LD_ADDR_VAR 0 12
40015: PUSH
40016: LD_VAR 0 1
40020: PPUSH
40021: CALL_OW 248
40025: ST_TO_ADDR
// side := GetSide ( tower ) ;
40026: LD_ADDR_VAR 0 16
40030: PUSH
40031: LD_VAR 0 1
40035: PPUSH
40036: CALL_OW 255
40040: ST_TO_ADDR
// x := GetX ( tower ) ;
40041: LD_ADDR_VAR 0 10
40045: PUSH
40046: LD_VAR 0 1
40050: PPUSH
40051: CALL_OW 250
40055: ST_TO_ADDR
// y := GetY ( tower ) ;
40056: LD_ADDR_VAR 0 11
40060: PUSH
40061: LD_VAR 0 1
40065: PPUSH
40066: CALL_OW 251
40070: ST_TO_ADDR
// if not x or not y then
40071: LD_VAR 0 10
40075: NOT
40076: PUSH
40077: LD_VAR 0 11
40081: NOT
40082: OR
40083: IFFALSE 40087
// exit ;
40085: GO 41120
// weapon := 0 ;
40087: LD_ADDR_VAR 0 18
40091: PUSH
40092: LD_INT 0
40094: ST_TO_ADDR
// fac_list := [ ] ;
40095: LD_ADDR_VAR 0 17
40099: PUSH
40100: EMPTY
40101: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
40102: LD_ADDR_VAR 0 6
40106: PUSH
40107: LD_VAR 0 1
40111: PPUSH
40112: CALL_OW 274
40116: PPUSH
40117: LD_VAR 0 2
40121: PPUSH
40122: LD_INT 0
40124: PPUSH
40125: CALL 37691 0 3
40129: PPUSH
40130: LD_INT 30
40132: PUSH
40133: LD_INT 3
40135: PUSH
40136: EMPTY
40137: LIST
40138: LIST
40139: PPUSH
40140: CALL_OW 72
40144: ST_TO_ADDR
// if not factories then
40145: LD_VAR 0 6
40149: NOT
40150: IFFALSE 40154
// exit ;
40152: GO 41120
// for i in factories do
40154: LD_ADDR_VAR 0 8
40158: PUSH
40159: LD_VAR 0 6
40163: PUSH
40164: FOR_IN
40165: IFFALSE 40190
// fac_list := fac_list union AvailableWeaponList ( i ) ;
40167: LD_ADDR_VAR 0 17
40171: PUSH
40172: LD_VAR 0 17
40176: PUSH
40177: LD_VAR 0 8
40181: PPUSH
40182: CALL_OW 478
40186: UNION
40187: ST_TO_ADDR
40188: GO 40164
40190: POP
40191: POP
// if not fac_list then
40192: LD_VAR 0 17
40196: NOT
40197: IFFALSE 40201
// exit ;
40199: GO 41120
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
40201: LD_ADDR_VAR 0 5
40205: PUSH
40206: LD_INT 4
40208: PUSH
40209: LD_INT 5
40211: PUSH
40212: LD_INT 9
40214: PUSH
40215: LD_INT 10
40217: PUSH
40218: LD_INT 6
40220: PUSH
40221: LD_INT 7
40223: PUSH
40224: LD_INT 11
40226: PUSH
40227: EMPTY
40228: LIST
40229: LIST
40230: LIST
40231: LIST
40232: LIST
40233: LIST
40234: LIST
40235: PUSH
40236: LD_INT 27
40238: PUSH
40239: LD_INT 28
40241: PUSH
40242: LD_INT 26
40244: PUSH
40245: LD_INT 30
40247: PUSH
40248: EMPTY
40249: LIST
40250: LIST
40251: LIST
40252: LIST
40253: PUSH
40254: LD_INT 43
40256: PUSH
40257: LD_INT 44
40259: PUSH
40260: LD_INT 46
40262: PUSH
40263: LD_INT 45
40265: PUSH
40266: LD_INT 47
40268: PUSH
40269: LD_INT 49
40271: PUSH
40272: EMPTY
40273: LIST
40274: LIST
40275: LIST
40276: LIST
40277: LIST
40278: LIST
40279: PUSH
40280: EMPTY
40281: LIST
40282: LIST
40283: LIST
40284: PUSH
40285: LD_VAR 0 12
40289: ARRAY
40290: ST_TO_ADDR
// list := list isect fac_list ;
40291: LD_ADDR_VAR 0 5
40295: PUSH
40296: LD_VAR 0 5
40300: PUSH
40301: LD_VAR 0 17
40305: ISECT
40306: ST_TO_ADDR
// if not list then
40307: LD_VAR 0 5
40311: NOT
40312: IFFALSE 40316
// exit ;
40314: GO 41120
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
40316: LD_VAR 0 12
40320: PUSH
40321: LD_INT 3
40323: EQUAL
40324: PUSH
40325: LD_INT 49
40327: PUSH
40328: LD_VAR 0 5
40332: IN
40333: AND
40334: PUSH
40335: LD_INT 31
40337: PPUSH
40338: LD_VAR 0 16
40342: PPUSH
40343: CALL_OW 321
40347: PUSH
40348: LD_INT 2
40350: EQUAL
40351: AND
40352: IFFALSE 40412
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
40354: LD_INT 22
40356: PUSH
40357: LD_VAR 0 16
40361: PUSH
40362: EMPTY
40363: LIST
40364: LIST
40365: PUSH
40366: LD_INT 35
40368: PUSH
40369: LD_INT 49
40371: PUSH
40372: EMPTY
40373: LIST
40374: LIST
40375: PUSH
40376: LD_INT 91
40378: PUSH
40379: LD_VAR 0 1
40383: PUSH
40384: LD_INT 10
40386: PUSH
40387: EMPTY
40388: LIST
40389: LIST
40390: LIST
40391: PUSH
40392: EMPTY
40393: LIST
40394: LIST
40395: LIST
40396: PPUSH
40397: CALL_OW 69
40401: NOT
40402: IFFALSE 40412
// weapon := ru_time_lapser ;
40404: LD_ADDR_VAR 0 18
40408: PUSH
40409: LD_INT 49
40411: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
40412: LD_VAR 0 12
40416: PUSH
40417: LD_INT 1
40419: PUSH
40420: LD_INT 2
40422: PUSH
40423: EMPTY
40424: LIST
40425: LIST
40426: IN
40427: PUSH
40428: LD_INT 11
40430: PUSH
40431: LD_VAR 0 5
40435: IN
40436: PUSH
40437: LD_INT 30
40439: PUSH
40440: LD_VAR 0 5
40444: IN
40445: OR
40446: AND
40447: PUSH
40448: LD_INT 6
40450: PPUSH
40451: LD_VAR 0 16
40455: PPUSH
40456: CALL_OW 321
40460: PUSH
40461: LD_INT 2
40463: EQUAL
40464: AND
40465: IFFALSE 40630
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
40467: LD_INT 22
40469: PUSH
40470: LD_VAR 0 16
40474: PUSH
40475: EMPTY
40476: LIST
40477: LIST
40478: PUSH
40479: LD_INT 2
40481: PUSH
40482: LD_INT 35
40484: PUSH
40485: LD_INT 11
40487: PUSH
40488: EMPTY
40489: LIST
40490: LIST
40491: PUSH
40492: LD_INT 35
40494: PUSH
40495: LD_INT 30
40497: PUSH
40498: EMPTY
40499: LIST
40500: LIST
40501: PUSH
40502: EMPTY
40503: LIST
40504: LIST
40505: LIST
40506: PUSH
40507: LD_INT 91
40509: PUSH
40510: LD_VAR 0 1
40514: PUSH
40515: LD_INT 18
40517: PUSH
40518: EMPTY
40519: LIST
40520: LIST
40521: LIST
40522: PUSH
40523: EMPTY
40524: LIST
40525: LIST
40526: LIST
40527: PPUSH
40528: CALL_OW 69
40532: NOT
40533: PUSH
40534: LD_INT 22
40536: PUSH
40537: LD_VAR 0 16
40541: PUSH
40542: EMPTY
40543: LIST
40544: LIST
40545: PUSH
40546: LD_INT 2
40548: PUSH
40549: LD_INT 30
40551: PUSH
40552: LD_INT 32
40554: PUSH
40555: EMPTY
40556: LIST
40557: LIST
40558: PUSH
40559: LD_INT 30
40561: PUSH
40562: LD_INT 33
40564: PUSH
40565: EMPTY
40566: LIST
40567: LIST
40568: PUSH
40569: EMPTY
40570: LIST
40571: LIST
40572: LIST
40573: PUSH
40574: LD_INT 91
40576: PUSH
40577: LD_VAR 0 1
40581: PUSH
40582: LD_INT 12
40584: PUSH
40585: EMPTY
40586: LIST
40587: LIST
40588: LIST
40589: PUSH
40590: EMPTY
40591: LIST
40592: LIST
40593: LIST
40594: PUSH
40595: EMPTY
40596: LIST
40597: PPUSH
40598: CALL_OW 69
40602: PUSH
40603: LD_INT 2
40605: GREATER
40606: AND
40607: IFFALSE 40630
// weapon := [ us_radar , ar_radar ] [ nat ] ;
40609: LD_ADDR_VAR 0 18
40613: PUSH
40614: LD_INT 11
40616: PUSH
40617: LD_INT 30
40619: PUSH
40620: EMPTY
40621: LIST
40622: LIST
40623: PUSH
40624: LD_VAR 0 12
40628: ARRAY
40629: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
40630: LD_VAR 0 18
40634: NOT
40635: PUSH
40636: LD_INT 40
40638: PPUSH
40639: LD_VAR 0 16
40643: PPUSH
40644: CALL_OW 321
40648: PUSH
40649: LD_INT 2
40651: EQUAL
40652: AND
40653: PUSH
40654: LD_INT 7
40656: PUSH
40657: LD_VAR 0 5
40661: IN
40662: PUSH
40663: LD_INT 28
40665: PUSH
40666: LD_VAR 0 5
40670: IN
40671: OR
40672: PUSH
40673: LD_INT 45
40675: PUSH
40676: LD_VAR 0 5
40680: IN
40681: OR
40682: AND
40683: IFFALSE 40937
// begin hex := GetHexInfo ( x , y ) ;
40685: LD_ADDR_VAR 0 4
40689: PUSH
40690: LD_VAR 0 10
40694: PPUSH
40695: LD_VAR 0 11
40699: PPUSH
40700: CALL_OW 546
40704: ST_TO_ADDR
// if hex [ 1 ] then
40705: LD_VAR 0 4
40709: PUSH
40710: LD_INT 1
40712: ARRAY
40713: IFFALSE 40717
// exit ;
40715: GO 41120
// height := hex [ 2 ] ;
40717: LD_ADDR_VAR 0 15
40721: PUSH
40722: LD_VAR 0 4
40726: PUSH
40727: LD_INT 2
40729: ARRAY
40730: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
40731: LD_ADDR_VAR 0 14
40735: PUSH
40736: LD_INT 0
40738: PUSH
40739: LD_INT 2
40741: PUSH
40742: LD_INT 3
40744: PUSH
40745: LD_INT 5
40747: PUSH
40748: EMPTY
40749: LIST
40750: LIST
40751: LIST
40752: LIST
40753: ST_TO_ADDR
// for i in tmp do
40754: LD_ADDR_VAR 0 8
40758: PUSH
40759: LD_VAR 0 14
40763: PUSH
40764: FOR_IN
40765: IFFALSE 40935
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
40767: LD_ADDR_VAR 0 9
40771: PUSH
40772: LD_VAR 0 10
40776: PPUSH
40777: LD_VAR 0 8
40781: PPUSH
40782: LD_INT 5
40784: PPUSH
40785: CALL_OW 272
40789: PUSH
40790: LD_VAR 0 11
40794: PPUSH
40795: LD_VAR 0 8
40799: PPUSH
40800: LD_INT 5
40802: PPUSH
40803: CALL_OW 273
40807: PUSH
40808: EMPTY
40809: LIST
40810: LIST
40811: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
40812: LD_VAR 0 9
40816: PUSH
40817: LD_INT 1
40819: ARRAY
40820: PPUSH
40821: LD_VAR 0 9
40825: PUSH
40826: LD_INT 2
40828: ARRAY
40829: PPUSH
40830: CALL_OW 488
40834: IFFALSE 40933
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
40836: LD_ADDR_VAR 0 4
40840: PUSH
40841: LD_VAR 0 9
40845: PUSH
40846: LD_INT 1
40848: ARRAY
40849: PPUSH
40850: LD_VAR 0 9
40854: PUSH
40855: LD_INT 2
40857: ARRAY
40858: PPUSH
40859: CALL_OW 546
40863: ST_TO_ADDR
// if hex [ 1 ] then
40864: LD_VAR 0 4
40868: PUSH
40869: LD_INT 1
40871: ARRAY
40872: IFFALSE 40876
// continue ;
40874: GO 40764
// h := hex [ 2 ] ;
40876: LD_ADDR_VAR 0 13
40880: PUSH
40881: LD_VAR 0 4
40885: PUSH
40886: LD_INT 2
40888: ARRAY
40889: ST_TO_ADDR
// if h + 7 < height then
40890: LD_VAR 0 13
40894: PUSH
40895: LD_INT 7
40897: PLUS
40898: PUSH
40899: LD_VAR 0 15
40903: LESS
40904: IFFALSE 40933
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
40906: LD_ADDR_VAR 0 18
40910: PUSH
40911: LD_INT 7
40913: PUSH
40914: LD_INT 28
40916: PUSH
40917: LD_INT 45
40919: PUSH
40920: EMPTY
40921: LIST
40922: LIST
40923: LIST
40924: PUSH
40925: LD_VAR 0 12
40929: ARRAY
40930: ST_TO_ADDR
// break ;
40931: GO 40935
// end ; end ; end ;
40933: GO 40764
40935: POP
40936: POP
// end ; if not weapon then
40937: LD_VAR 0 18
40941: NOT
40942: IFFALSE 41002
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
40944: LD_ADDR_VAR 0 5
40948: PUSH
40949: LD_VAR 0 5
40953: PUSH
40954: LD_INT 11
40956: PUSH
40957: LD_INT 30
40959: PUSH
40960: LD_INT 49
40962: PUSH
40963: EMPTY
40964: LIST
40965: LIST
40966: LIST
40967: DIFF
40968: ST_TO_ADDR
// if not list then
40969: LD_VAR 0 5
40973: NOT
40974: IFFALSE 40978
// exit ;
40976: GO 41120
// weapon := list [ rand ( 1 , list ) ] ;
40978: LD_ADDR_VAR 0 18
40982: PUSH
40983: LD_VAR 0 5
40987: PUSH
40988: LD_INT 1
40990: PPUSH
40991: LD_VAR 0 5
40995: PPUSH
40996: CALL_OW 12
41000: ARRAY
41001: ST_TO_ADDR
// end ; if weapon then
41002: LD_VAR 0 18
41006: IFFALSE 41120
// begin tmp := CostOfWeapon ( weapon ) ;
41008: LD_ADDR_VAR 0 14
41012: PUSH
41013: LD_VAR 0 18
41017: PPUSH
41018: CALL_OW 451
41022: ST_TO_ADDR
// j := GetBase ( tower ) ;
41023: LD_ADDR_VAR 0 9
41027: PUSH
41028: LD_VAR 0 1
41032: PPUSH
41033: CALL_OW 274
41037: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
41038: LD_VAR 0 9
41042: PPUSH
41043: LD_INT 1
41045: PPUSH
41046: CALL_OW 275
41050: PUSH
41051: LD_VAR 0 14
41055: PUSH
41056: LD_INT 1
41058: ARRAY
41059: GREATEREQUAL
41060: PUSH
41061: LD_VAR 0 9
41065: PPUSH
41066: LD_INT 2
41068: PPUSH
41069: CALL_OW 275
41073: PUSH
41074: LD_VAR 0 14
41078: PUSH
41079: LD_INT 2
41081: ARRAY
41082: GREATEREQUAL
41083: AND
41084: PUSH
41085: LD_VAR 0 9
41089: PPUSH
41090: LD_INT 3
41092: PPUSH
41093: CALL_OW 275
41097: PUSH
41098: LD_VAR 0 14
41102: PUSH
41103: LD_INT 3
41105: ARRAY
41106: GREATEREQUAL
41107: AND
41108: IFFALSE 41120
// result := weapon ;
41110: LD_ADDR_VAR 0 3
41114: PUSH
41115: LD_VAR 0 18
41119: ST_TO_ADDR
// end ; end ;
41120: LD_VAR 0 3
41124: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
41125: LD_INT 0
41127: PPUSH
41128: PPUSH
// result := true ;
41129: LD_ADDR_VAR 0 3
41133: PUSH
41134: LD_INT 1
41136: ST_TO_ADDR
// if array1 = array2 then
41137: LD_VAR 0 1
41141: PUSH
41142: LD_VAR 0 2
41146: EQUAL
41147: IFFALSE 41207
// begin for i = 1 to array1 do
41149: LD_ADDR_VAR 0 4
41153: PUSH
41154: DOUBLE
41155: LD_INT 1
41157: DEC
41158: ST_TO_ADDR
41159: LD_VAR 0 1
41163: PUSH
41164: FOR_TO
41165: IFFALSE 41203
// if array1 [ i ] <> array2 [ i ] then
41167: LD_VAR 0 1
41171: PUSH
41172: LD_VAR 0 4
41176: ARRAY
41177: PUSH
41178: LD_VAR 0 2
41182: PUSH
41183: LD_VAR 0 4
41187: ARRAY
41188: NONEQUAL
41189: IFFALSE 41201
// begin result := false ;
41191: LD_ADDR_VAR 0 3
41195: PUSH
41196: LD_INT 0
41198: ST_TO_ADDR
// break ;
41199: GO 41203
// end ;
41201: GO 41164
41203: POP
41204: POP
// end else
41205: GO 41215
// result := false ;
41207: LD_ADDR_VAR 0 3
41211: PUSH
41212: LD_INT 0
41214: ST_TO_ADDR
// end ;
41215: LD_VAR 0 3
41219: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
41220: LD_INT 0
41222: PPUSH
41223: PPUSH
// if not array1 or not array2 then
41224: LD_VAR 0 1
41228: NOT
41229: PUSH
41230: LD_VAR 0 2
41234: NOT
41235: OR
41236: IFFALSE 41240
// exit ;
41238: GO 41304
// result := true ;
41240: LD_ADDR_VAR 0 3
41244: PUSH
41245: LD_INT 1
41247: ST_TO_ADDR
// for i = 1 to array1 do
41248: LD_ADDR_VAR 0 4
41252: PUSH
41253: DOUBLE
41254: LD_INT 1
41256: DEC
41257: ST_TO_ADDR
41258: LD_VAR 0 1
41262: PUSH
41263: FOR_TO
41264: IFFALSE 41302
// if array1 [ i ] <> array2 [ i ] then
41266: LD_VAR 0 1
41270: PUSH
41271: LD_VAR 0 4
41275: ARRAY
41276: PUSH
41277: LD_VAR 0 2
41281: PUSH
41282: LD_VAR 0 4
41286: ARRAY
41287: NONEQUAL
41288: IFFALSE 41300
// begin result := false ;
41290: LD_ADDR_VAR 0 3
41294: PUSH
41295: LD_INT 0
41297: ST_TO_ADDR
// break ;
41298: GO 41302
// end ;
41300: GO 41263
41302: POP
41303: POP
// end ;
41304: LD_VAR 0 3
41308: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
41309: LD_INT 0
41311: PPUSH
41312: PPUSH
41313: PPUSH
// pom := GetBase ( fac ) ;
41314: LD_ADDR_VAR 0 5
41318: PUSH
41319: LD_VAR 0 1
41323: PPUSH
41324: CALL_OW 274
41328: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
41329: LD_ADDR_VAR 0 4
41333: PUSH
41334: LD_VAR 0 2
41338: PUSH
41339: LD_INT 1
41341: ARRAY
41342: PPUSH
41343: LD_VAR 0 2
41347: PUSH
41348: LD_INT 2
41350: ARRAY
41351: PPUSH
41352: LD_VAR 0 2
41356: PUSH
41357: LD_INT 3
41359: ARRAY
41360: PPUSH
41361: LD_VAR 0 2
41365: PUSH
41366: LD_INT 4
41368: ARRAY
41369: PPUSH
41370: CALL_OW 449
41374: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41375: LD_ADDR_VAR 0 3
41379: PUSH
41380: LD_VAR 0 5
41384: PPUSH
41385: LD_INT 1
41387: PPUSH
41388: CALL_OW 275
41392: PUSH
41393: LD_VAR 0 4
41397: PUSH
41398: LD_INT 1
41400: ARRAY
41401: GREATEREQUAL
41402: PUSH
41403: LD_VAR 0 5
41407: PPUSH
41408: LD_INT 2
41410: PPUSH
41411: CALL_OW 275
41415: PUSH
41416: LD_VAR 0 4
41420: PUSH
41421: LD_INT 2
41423: ARRAY
41424: GREATEREQUAL
41425: AND
41426: PUSH
41427: LD_VAR 0 5
41431: PPUSH
41432: LD_INT 3
41434: PPUSH
41435: CALL_OW 275
41439: PUSH
41440: LD_VAR 0 4
41444: PUSH
41445: LD_INT 3
41447: ARRAY
41448: GREATEREQUAL
41449: AND
41450: ST_TO_ADDR
// end ;
41451: LD_VAR 0 3
41455: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
41456: LD_INT 0
41458: PPUSH
41459: PPUSH
41460: PPUSH
41461: PPUSH
// pom := GetBase ( building ) ;
41462: LD_ADDR_VAR 0 3
41466: PUSH
41467: LD_VAR 0 1
41471: PPUSH
41472: CALL_OW 274
41476: ST_TO_ADDR
// if not pom then
41477: LD_VAR 0 3
41481: NOT
41482: IFFALSE 41486
// exit ;
41484: GO 41656
// btype := GetBType ( building ) ;
41486: LD_ADDR_VAR 0 5
41490: PUSH
41491: LD_VAR 0 1
41495: PPUSH
41496: CALL_OW 266
41500: ST_TO_ADDR
// if btype = b_armoury then
41501: LD_VAR 0 5
41505: PUSH
41506: LD_INT 4
41508: EQUAL
41509: IFFALSE 41519
// btype := b_barracks ;
41511: LD_ADDR_VAR 0 5
41515: PUSH
41516: LD_INT 5
41518: ST_TO_ADDR
// if btype = b_depot then
41519: LD_VAR 0 5
41523: PUSH
41524: LD_INT 0
41526: EQUAL
41527: IFFALSE 41537
// btype := b_warehouse ;
41529: LD_ADDR_VAR 0 5
41533: PUSH
41534: LD_INT 1
41536: ST_TO_ADDR
// if btype = b_workshop then
41537: LD_VAR 0 5
41541: PUSH
41542: LD_INT 2
41544: EQUAL
41545: IFFALSE 41555
// btype := b_factory ;
41547: LD_ADDR_VAR 0 5
41551: PUSH
41552: LD_INT 3
41554: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41555: LD_ADDR_VAR 0 4
41559: PUSH
41560: LD_VAR 0 5
41564: PPUSH
41565: LD_VAR 0 1
41569: PPUSH
41570: CALL_OW 248
41574: PPUSH
41575: CALL_OW 450
41579: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41580: LD_ADDR_VAR 0 2
41584: PUSH
41585: LD_VAR 0 3
41589: PPUSH
41590: LD_INT 1
41592: PPUSH
41593: CALL_OW 275
41597: PUSH
41598: LD_VAR 0 4
41602: PUSH
41603: LD_INT 1
41605: ARRAY
41606: GREATEREQUAL
41607: PUSH
41608: LD_VAR 0 3
41612: PPUSH
41613: LD_INT 2
41615: PPUSH
41616: CALL_OW 275
41620: PUSH
41621: LD_VAR 0 4
41625: PUSH
41626: LD_INT 2
41628: ARRAY
41629: GREATEREQUAL
41630: AND
41631: PUSH
41632: LD_VAR 0 3
41636: PPUSH
41637: LD_INT 3
41639: PPUSH
41640: CALL_OW 275
41644: PUSH
41645: LD_VAR 0 4
41649: PUSH
41650: LD_INT 3
41652: ARRAY
41653: GREATEREQUAL
41654: AND
41655: ST_TO_ADDR
// end ;
41656: LD_VAR 0 2
41660: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
41661: LD_INT 0
41663: PPUSH
41664: PPUSH
41665: PPUSH
// pom := GetBase ( building ) ;
41666: LD_ADDR_VAR 0 4
41670: PUSH
41671: LD_VAR 0 1
41675: PPUSH
41676: CALL_OW 274
41680: ST_TO_ADDR
// if not pom then
41681: LD_VAR 0 4
41685: NOT
41686: IFFALSE 41690
// exit ;
41688: GO 41791
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41690: LD_ADDR_VAR 0 5
41694: PUSH
41695: LD_VAR 0 2
41699: PPUSH
41700: LD_VAR 0 1
41704: PPUSH
41705: CALL_OW 248
41709: PPUSH
41710: CALL_OW 450
41714: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41715: LD_ADDR_VAR 0 3
41719: PUSH
41720: LD_VAR 0 4
41724: PPUSH
41725: LD_INT 1
41727: PPUSH
41728: CALL_OW 275
41732: PUSH
41733: LD_VAR 0 5
41737: PUSH
41738: LD_INT 1
41740: ARRAY
41741: GREATEREQUAL
41742: PUSH
41743: LD_VAR 0 4
41747: PPUSH
41748: LD_INT 2
41750: PPUSH
41751: CALL_OW 275
41755: PUSH
41756: LD_VAR 0 5
41760: PUSH
41761: LD_INT 2
41763: ARRAY
41764: GREATEREQUAL
41765: AND
41766: PUSH
41767: LD_VAR 0 4
41771: PPUSH
41772: LD_INT 3
41774: PPUSH
41775: CALL_OW 275
41779: PUSH
41780: LD_VAR 0 5
41784: PUSH
41785: LD_INT 3
41787: ARRAY
41788: GREATEREQUAL
41789: AND
41790: ST_TO_ADDR
// end ;
41791: LD_VAR 0 3
41795: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
41796: LD_INT 0
41798: PPUSH
41799: PPUSH
41800: PPUSH
41801: PPUSH
41802: PPUSH
41803: PPUSH
41804: PPUSH
41805: PPUSH
41806: PPUSH
41807: PPUSH
41808: PPUSH
// result := false ;
41809: LD_ADDR_VAR 0 8
41813: PUSH
41814: LD_INT 0
41816: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
41817: LD_VAR 0 5
41821: NOT
41822: PUSH
41823: LD_VAR 0 1
41827: NOT
41828: OR
41829: PUSH
41830: LD_VAR 0 2
41834: NOT
41835: OR
41836: PUSH
41837: LD_VAR 0 3
41841: NOT
41842: OR
41843: IFFALSE 41847
// exit ;
41845: GO 42661
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
41847: LD_ADDR_VAR 0 14
41851: PUSH
41852: LD_VAR 0 1
41856: PPUSH
41857: LD_VAR 0 2
41861: PPUSH
41862: LD_VAR 0 3
41866: PPUSH
41867: LD_VAR 0 4
41871: PPUSH
41872: LD_VAR 0 5
41876: PUSH
41877: LD_INT 1
41879: ARRAY
41880: PPUSH
41881: CALL_OW 248
41885: PPUSH
41886: LD_INT 0
41888: PPUSH
41889: CALL 43898 0 6
41893: ST_TO_ADDR
// if not hexes then
41894: LD_VAR 0 14
41898: NOT
41899: IFFALSE 41903
// exit ;
41901: GO 42661
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
41903: LD_ADDR_VAR 0 17
41907: PUSH
41908: LD_VAR 0 5
41912: PPUSH
41913: LD_INT 22
41915: PUSH
41916: LD_VAR 0 13
41920: PPUSH
41921: CALL_OW 255
41925: PUSH
41926: EMPTY
41927: LIST
41928: LIST
41929: PUSH
41930: LD_INT 2
41932: PUSH
41933: LD_INT 30
41935: PUSH
41936: LD_INT 0
41938: PUSH
41939: EMPTY
41940: LIST
41941: LIST
41942: PUSH
41943: LD_INT 30
41945: PUSH
41946: LD_INT 1
41948: PUSH
41949: EMPTY
41950: LIST
41951: LIST
41952: PUSH
41953: EMPTY
41954: LIST
41955: LIST
41956: LIST
41957: PUSH
41958: EMPTY
41959: LIST
41960: LIST
41961: PPUSH
41962: CALL_OW 72
41966: ST_TO_ADDR
// for i = 1 to hexes do
41967: LD_ADDR_VAR 0 9
41971: PUSH
41972: DOUBLE
41973: LD_INT 1
41975: DEC
41976: ST_TO_ADDR
41977: LD_VAR 0 14
41981: PUSH
41982: FOR_TO
41983: IFFALSE 42659
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41985: LD_ADDR_VAR 0 13
41989: PUSH
41990: LD_VAR 0 14
41994: PUSH
41995: LD_VAR 0 9
41999: ARRAY
42000: PUSH
42001: LD_INT 1
42003: ARRAY
42004: PPUSH
42005: LD_VAR 0 14
42009: PUSH
42010: LD_VAR 0 9
42014: ARRAY
42015: PUSH
42016: LD_INT 2
42018: ARRAY
42019: PPUSH
42020: CALL_OW 428
42024: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
42025: LD_VAR 0 14
42029: PUSH
42030: LD_VAR 0 9
42034: ARRAY
42035: PUSH
42036: LD_INT 1
42038: ARRAY
42039: PPUSH
42040: LD_VAR 0 14
42044: PUSH
42045: LD_VAR 0 9
42049: ARRAY
42050: PUSH
42051: LD_INT 2
42053: ARRAY
42054: PPUSH
42055: CALL_OW 351
42059: PUSH
42060: LD_VAR 0 14
42064: PUSH
42065: LD_VAR 0 9
42069: ARRAY
42070: PUSH
42071: LD_INT 1
42073: ARRAY
42074: PPUSH
42075: LD_VAR 0 14
42079: PUSH
42080: LD_VAR 0 9
42084: ARRAY
42085: PUSH
42086: LD_INT 2
42088: ARRAY
42089: PPUSH
42090: CALL_OW 488
42094: NOT
42095: OR
42096: PUSH
42097: LD_VAR 0 13
42101: PPUSH
42102: CALL_OW 247
42106: PUSH
42107: LD_INT 3
42109: EQUAL
42110: OR
42111: IFFALSE 42117
// exit ;
42113: POP
42114: POP
42115: GO 42661
// if not tmp then
42117: LD_VAR 0 13
42121: NOT
42122: IFFALSE 42126
// continue ;
42124: GO 41982
// result := true ;
42126: LD_ADDR_VAR 0 8
42130: PUSH
42131: LD_INT 1
42133: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
42134: LD_VAR 0 6
42138: PUSH
42139: LD_VAR 0 13
42143: PPUSH
42144: CALL_OW 247
42148: PUSH
42149: LD_INT 2
42151: EQUAL
42152: AND
42153: PUSH
42154: LD_VAR 0 13
42158: PPUSH
42159: CALL_OW 263
42163: PUSH
42164: LD_INT 1
42166: EQUAL
42167: AND
42168: IFFALSE 42332
// begin if IsDrivenBy ( tmp ) then
42170: LD_VAR 0 13
42174: PPUSH
42175: CALL_OW 311
42179: IFFALSE 42183
// continue ;
42181: GO 41982
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
42183: LD_VAR 0 6
42187: PPUSH
42188: LD_INT 3
42190: PUSH
42191: LD_INT 60
42193: PUSH
42194: EMPTY
42195: LIST
42196: PUSH
42197: EMPTY
42198: LIST
42199: LIST
42200: PUSH
42201: LD_INT 3
42203: PUSH
42204: LD_INT 55
42206: PUSH
42207: EMPTY
42208: LIST
42209: PUSH
42210: EMPTY
42211: LIST
42212: LIST
42213: PUSH
42214: EMPTY
42215: LIST
42216: LIST
42217: PPUSH
42218: CALL_OW 72
42222: IFFALSE 42330
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
42224: LD_ADDR_VAR 0 18
42228: PUSH
42229: LD_VAR 0 6
42233: PPUSH
42234: LD_INT 3
42236: PUSH
42237: LD_INT 60
42239: PUSH
42240: EMPTY
42241: LIST
42242: PUSH
42243: EMPTY
42244: LIST
42245: LIST
42246: PUSH
42247: LD_INT 3
42249: PUSH
42250: LD_INT 55
42252: PUSH
42253: EMPTY
42254: LIST
42255: PUSH
42256: EMPTY
42257: LIST
42258: LIST
42259: PUSH
42260: EMPTY
42261: LIST
42262: LIST
42263: PPUSH
42264: CALL_OW 72
42268: PUSH
42269: LD_INT 1
42271: ARRAY
42272: ST_TO_ADDR
// if IsInUnit ( driver ) then
42273: LD_VAR 0 18
42277: PPUSH
42278: CALL_OW 310
42282: IFFALSE 42293
// ComExit ( driver ) ;
42284: LD_VAR 0 18
42288: PPUSH
42289: CALL 67082 0 1
// AddComEnterUnit ( driver , tmp ) ;
42293: LD_VAR 0 18
42297: PPUSH
42298: LD_VAR 0 13
42302: PPUSH
42303: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
42307: LD_VAR 0 18
42311: PPUSH
42312: LD_VAR 0 7
42316: PPUSH
42317: CALL_OW 173
// AddComExitVehicle ( driver ) ;
42321: LD_VAR 0 18
42325: PPUSH
42326: CALL_OW 181
// end ; continue ;
42330: GO 41982
// end ; if not cleaners or not tmp in cleaners then
42332: LD_VAR 0 6
42336: NOT
42337: PUSH
42338: LD_VAR 0 13
42342: PUSH
42343: LD_VAR 0 6
42347: IN
42348: NOT
42349: OR
42350: IFFALSE 42657
// begin if dep then
42352: LD_VAR 0 17
42356: IFFALSE 42492
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
42358: LD_ADDR_VAR 0 16
42362: PUSH
42363: LD_VAR 0 17
42367: PUSH
42368: LD_INT 1
42370: ARRAY
42371: PPUSH
42372: CALL_OW 250
42376: PPUSH
42377: LD_VAR 0 17
42381: PUSH
42382: LD_INT 1
42384: ARRAY
42385: PPUSH
42386: CALL_OW 254
42390: PPUSH
42391: LD_INT 5
42393: PPUSH
42394: CALL_OW 272
42398: PUSH
42399: LD_VAR 0 17
42403: PUSH
42404: LD_INT 1
42406: ARRAY
42407: PPUSH
42408: CALL_OW 251
42412: PPUSH
42413: LD_VAR 0 17
42417: PUSH
42418: LD_INT 1
42420: ARRAY
42421: PPUSH
42422: CALL_OW 254
42426: PPUSH
42427: LD_INT 5
42429: PPUSH
42430: CALL_OW 273
42434: PUSH
42435: EMPTY
42436: LIST
42437: LIST
42438: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
42439: LD_VAR 0 16
42443: PUSH
42444: LD_INT 1
42446: ARRAY
42447: PPUSH
42448: LD_VAR 0 16
42452: PUSH
42453: LD_INT 2
42455: ARRAY
42456: PPUSH
42457: CALL_OW 488
42461: IFFALSE 42492
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
42463: LD_VAR 0 13
42467: PPUSH
42468: LD_VAR 0 16
42472: PUSH
42473: LD_INT 1
42475: ARRAY
42476: PPUSH
42477: LD_VAR 0 16
42481: PUSH
42482: LD_INT 2
42484: ARRAY
42485: PPUSH
42486: CALL_OW 111
// continue ;
42490: GO 41982
// end ; end ; r := GetDir ( tmp ) ;
42492: LD_ADDR_VAR 0 15
42496: PUSH
42497: LD_VAR 0 13
42501: PPUSH
42502: CALL_OW 254
42506: ST_TO_ADDR
// if r = 5 then
42507: LD_VAR 0 15
42511: PUSH
42512: LD_INT 5
42514: EQUAL
42515: IFFALSE 42525
// r := 0 ;
42517: LD_ADDR_VAR 0 15
42521: PUSH
42522: LD_INT 0
42524: ST_TO_ADDR
// for j = r to 5 do
42525: LD_ADDR_VAR 0 10
42529: PUSH
42530: DOUBLE
42531: LD_VAR 0 15
42535: DEC
42536: ST_TO_ADDR
42537: LD_INT 5
42539: PUSH
42540: FOR_TO
42541: IFFALSE 42655
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
42543: LD_ADDR_VAR 0 11
42547: PUSH
42548: LD_VAR 0 13
42552: PPUSH
42553: CALL_OW 250
42557: PPUSH
42558: LD_VAR 0 10
42562: PPUSH
42563: LD_INT 2
42565: PPUSH
42566: CALL_OW 272
42570: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
42571: LD_ADDR_VAR 0 12
42575: PUSH
42576: LD_VAR 0 13
42580: PPUSH
42581: CALL_OW 251
42585: PPUSH
42586: LD_VAR 0 10
42590: PPUSH
42591: LD_INT 2
42593: PPUSH
42594: CALL_OW 273
42598: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
42599: LD_VAR 0 11
42603: PPUSH
42604: LD_VAR 0 12
42608: PPUSH
42609: CALL_OW 488
42613: PUSH
42614: LD_VAR 0 11
42618: PPUSH
42619: LD_VAR 0 12
42623: PPUSH
42624: CALL_OW 428
42628: NOT
42629: AND
42630: IFFALSE 42653
// begin ComMoveXY ( tmp , _x , _y ) ;
42632: LD_VAR 0 13
42636: PPUSH
42637: LD_VAR 0 11
42641: PPUSH
42642: LD_VAR 0 12
42646: PPUSH
42647: CALL_OW 111
// break ;
42651: GO 42655
// end ; end ;
42653: GO 42540
42655: POP
42656: POP
// end ; end ;
42657: GO 41982
42659: POP
42660: POP
// end ;
42661: LD_VAR 0 8
42665: RET
// export function BuildingTechInvented ( side , btype ) ; begin
42666: LD_INT 0
42668: PPUSH
// result := true ;
42669: LD_ADDR_VAR 0 3
42673: PUSH
42674: LD_INT 1
42676: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
42677: LD_VAR 0 2
42681: PUSH
42682: LD_INT 24
42684: DOUBLE
42685: EQUAL
42686: IFTRUE 42696
42688: LD_INT 33
42690: DOUBLE
42691: EQUAL
42692: IFTRUE 42696
42694: GO 42721
42696: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
42697: LD_ADDR_VAR 0 3
42701: PUSH
42702: LD_INT 32
42704: PPUSH
42705: LD_VAR 0 1
42709: PPUSH
42710: CALL_OW 321
42714: PUSH
42715: LD_INT 2
42717: EQUAL
42718: ST_TO_ADDR
42719: GO 43041
42721: LD_INT 20
42723: DOUBLE
42724: EQUAL
42725: IFTRUE 42729
42727: GO 42754
42729: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
42730: LD_ADDR_VAR 0 3
42734: PUSH
42735: LD_INT 6
42737: PPUSH
42738: LD_VAR 0 1
42742: PPUSH
42743: CALL_OW 321
42747: PUSH
42748: LD_INT 2
42750: EQUAL
42751: ST_TO_ADDR
42752: GO 43041
42754: LD_INT 22
42756: DOUBLE
42757: EQUAL
42758: IFTRUE 42768
42760: LD_INT 36
42762: DOUBLE
42763: EQUAL
42764: IFTRUE 42768
42766: GO 42793
42768: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
42769: LD_ADDR_VAR 0 3
42773: PUSH
42774: LD_INT 15
42776: PPUSH
42777: LD_VAR 0 1
42781: PPUSH
42782: CALL_OW 321
42786: PUSH
42787: LD_INT 2
42789: EQUAL
42790: ST_TO_ADDR
42791: GO 43041
42793: LD_INT 30
42795: DOUBLE
42796: EQUAL
42797: IFTRUE 42801
42799: GO 42826
42801: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
42802: LD_ADDR_VAR 0 3
42806: PUSH
42807: LD_INT 20
42809: PPUSH
42810: LD_VAR 0 1
42814: PPUSH
42815: CALL_OW 321
42819: PUSH
42820: LD_INT 2
42822: EQUAL
42823: ST_TO_ADDR
42824: GO 43041
42826: LD_INT 28
42828: DOUBLE
42829: EQUAL
42830: IFTRUE 42840
42832: LD_INT 21
42834: DOUBLE
42835: EQUAL
42836: IFTRUE 42840
42838: GO 42865
42840: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
42841: LD_ADDR_VAR 0 3
42845: PUSH
42846: LD_INT 21
42848: PPUSH
42849: LD_VAR 0 1
42853: PPUSH
42854: CALL_OW 321
42858: PUSH
42859: LD_INT 2
42861: EQUAL
42862: ST_TO_ADDR
42863: GO 43041
42865: LD_INT 16
42867: DOUBLE
42868: EQUAL
42869: IFTRUE 42873
42871: GO 42900
42873: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
42874: LD_ADDR_VAR 0 3
42878: PUSH
42879: LD_EXP 33
42883: PPUSH
42884: LD_VAR 0 1
42888: PPUSH
42889: CALL_OW 321
42893: PUSH
42894: LD_INT 2
42896: EQUAL
42897: ST_TO_ADDR
42898: GO 43041
42900: LD_INT 19
42902: DOUBLE
42903: EQUAL
42904: IFTRUE 42914
42906: LD_INT 23
42908: DOUBLE
42909: EQUAL
42910: IFTRUE 42914
42912: GO 42941
42914: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
42915: LD_ADDR_VAR 0 3
42919: PUSH
42920: LD_EXP 32
42924: PPUSH
42925: LD_VAR 0 1
42929: PPUSH
42930: CALL_OW 321
42934: PUSH
42935: LD_INT 2
42937: EQUAL
42938: ST_TO_ADDR
42939: GO 43041
42941: LD_INT 17
42943: DOUBLE
42944: EQUAL
42945: IFTRUE 42949
42947: GO 42974
42949: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
42950: LD_ADDR_VAR 0 3
42954: PUSH
42955: LD_INT 39
42957: PPUSH
42958: LD_VAR 0 1
42962: PPUSH
42963: CALL_OW 321
42967: PUSH
42968: LD_INT 2
42970: EQUAL
42971: ST_TO_ADDR
42972: GO 43041
42974: LD_INT 18
42976: DOUBLE
42977: EQUAL
42978: IFTRUE 42982
42980: GO 43007
42982: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
42983: LD_ADDR_VAR 0 3
42987: PUSH
42988: LD_INT 40
42990: PPUSH
42991: LD_VAR 0 1
42995: PPUSH
42996: CALL_OW 321
43000: PUSH
43001: LD_INT 2
43003: EQUAL
43004: ST_TO_ADDR
43005: GO 43041
43007: LD_INT 27
43009: DOUBLE
43010: EQUAL
43011: IFTRUE 43015
43013: GO 43040
43015: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
43016: LD_ADDR_VAR 0 3
43020: PUSH
43021: LD_INT 35
43023: PPUSH
43024: LD_VAR 0 1
43028: PPUSH
43029: CALL_OW 321
43033: PUSH
43034: LD_INT 2
43036: EQUAL
43037: ST_TO_ADDR
43038: GO 43041
43040: POP
// end ;
43041: LD_VAR 0 3
43045: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
43046: LD_INT 0
43048: PPUSH
43049: PPUSH
43050: PPUSH
43051: PPUSH
43052: PPUSH
43053: PPUSH
43054: PPUSH
43055: PPUSH
43056: PPUSH
43057: PPUSH
43058: PPUSH
// result := false ;
43059: LD_ADDR_VAR 0 6
43063: PUSH
43064: LD_INT 0
43066: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
43067: LD_VAR 0 1
43071: NOT
43072: PUSH
43073: LD_VAR 0 1
43077: PPUSH
43078: CALL_OW 266
43082: PUSH
43083: LD_INT 0
43085: PUSH
43086: LD_INT 1
43088: PUSH
43089: EMPTY
43090: LIST
43091: LIST
43092: IN
43093: NOT
43094: OR
43095: PUSH
43096: LD_VAR 0 2
43100: NOT
43101: OR
43102: PUSH
43103: LD_VAR 0 5
43107: PUSH
43108: LD_INT 0
43110: PUSH
43111: LD_INT 1
43113: PUSH
43114: LD_INT 2
43116: PUSH
43117: LD_INT 3
43119: PUSH
43120: LD_INT 4
43122: PUSH
43123: LD_INT 5
43125: PUSH
43126: EMPTY
43127: LIST
43128: LIST
43129: LIST
43130: LIST
43131: LIST
43132: LIST
43133: IN
43134: NOT
43135: OR
43136: PUSH
43137: LD_VAR 0 3
43141: PPUSH
43142: LD_VAR 0 4
43146: PPUSH
43147: CALL_OW 488
43151: NOT
43152: OR
43153: IFFALSE 43157
// exit ;
43155: GO 43893
// side := GetSide ( depot ) ;
43157: LD_ADDR_VAR 0 9
43161: PUSH
43162: LD_VAR 0 1
43166: PPUSH
43167: CALL_OW 255
43171: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
43172: LD_VAR 0 9
43176: PPUSH
43177: LD_VAR 0 2
43181: PPUSH
43182: CALL 42666 0 2
43186: NOT
43187: IFFALSE 43191
// exit ;
43189: GO 43893
// pom := GetBase ( depot ) ;
43191: LD_ADDR_VAR 0 10
43195: PUSH
43196: LD_VAR 0 1
43200: PPUSH
43201: CALL_OW 274
43205: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
43206: LD_ADDR_VAR 0 11
43210: PUSH
43211: LD_VAR 0 2
43215: PPUSH
43216: LD_VAR 0 1
43220: PPUSH
43221: CALL_OW 248
43225: PPUSH
43226: CALL_OW 450
43230: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
43231: LD_VAR 0 10
43235: PPUSH
43236: LD_INT 1
43238: PPUSH
43239: CALL_OW 275
43243: PUSH
43244: LD_VAR 0 11
43248: PUSH
43249: LD_INT 1
43251: ARRAY
43252: GREATEREQUAL
43253: PUSH
43254: LD_VAR 0 10
43258: PPUSH
43259: LD_INT 2
43261: PPUSH
43262: CALL_OW 275
43266: PUSH
43267: LD_VAR 0 11
43271: PUSH
43272: LD_INT 2
43274: ARRAY
43275: GREATEREQUAL
43276: AND
43277: PUSH
43278: LD_VAR 0 10
43282: PPUSH
43283: LD_INT 3
43285: PPUSH
43286: CALL_OW 275
43290: PUSH
43291: LD_VAR 0 11
43295: PUSH
43296: LD_INT 3
43298: ARRAY
43299: GREATEREQUAL
43300: AND
43301: NOT
43302: IFFALSE 43306
// exit ;
43304: GO 43893
// if GetBType ( depot ) = b_depot then
43306: LD_VAR 0 1
43310: PPUSH
43311: CALL_OW 266
43315: PUSH
43316: LD_INT 0
43318: EQUAL
43319: IFFALSE 43331
// dist := 28 else
43321: LD_ADDR_VAR 0 14
43325: PUSH
43326: LD_INT 28
43328: ST_TO_ADDR
43329: GO 43339
// dist := 36 ;
43331: LD_ADDR_VAR 0 14
43335: PUSH
43336: LD_INT 36
43338: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
43339: LD_VAR 0 1
43343: PPUSH
43344: LD_VAR 0 3
43348: PPUSH
43349: LD_VAR 0 4
43353: PPUSH
43354: CALL_OW 297
43358: PUSH
43359: LD_VAR 0 14
43363: GREATER
43364: IFFALSE 43368
// exit ;
43366: GO 43893
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
43368: LD_ADDR_VAR 0 12
43372: PUSH
43373: LD_VAR 0 2
43377: PPUSH
43378: LD_VAR 0 3
43382: PPUSH
43383: LD_VAR 0 4
43387: PPUSH
43388: LD_VAR 0 5
43392: PPUSH
43393: LD_VAR 0 1
43397: PPUSH
43398: CALL_OW 248
43402: PPUSH
43403: LD_INT 0
43405: PPUSH
43406: CALL 43898 0 6
43410: ST_TO_ADDR
// if not hexes then
43411: LD_VAR 0 12
43415: NOT
43416: IFFALSE 43420
// exit ;
43418: GO 43893
// hex := GetHexInfo ( x , y ) ;
43420: LD_ADDR_VAR 0 15
43424: PUSH
43425: LD_VAR 0 3
43429: PPUSH
43430: LD_VAR 0 4
43434: PPUSH
43435: CALL_OW 546
43439: ST_TO_ADDR
// if hex [ 1 ] then
43440: LD_VAR 0 15
43444: PUSH
43445: LD_INT 1
43447: ARRAY
43448: IFFALSE 43452
// exit ;
43450: GO 43893
// height := hex [ 2 ] ;
43452: LD_ADDR_VAR 0 13
43456: PUSH
43457: LD_VAR 0 15
43461: PUSH
43462: LD_INT 2
43464: ARRAY
43465: ST_TO_ADDR
// for i = 1 to hexes do
43466: LD_ADDR_VAR 0 7
43470: PUSH
43471: DOUBLE
43472: LD_INT 1
43474: DEC
43475: ST_TO_ADDR
43476: LD_VAR 0 12
43480: PUSH
43481: FOR_TO
43482: IFFALSE 43812
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
43484: LD_VAR 0 12
43488: PUSH
43489: LD_VAR 0 7
43493: ARRAY
43494: PUSH
43495: LD_INT 1
43497: ARRAY
43498: PPUSH
43499: LD_VAR 0 12
43503: PUSH
43504: LD_VAR 0 7
43508: ARRAY
43509: PUSH
43510: LD_INT 2
43512: ARRAY
43513: PPUSH
43514: CALL_OW 488
43518: NOT
43519: PUSH
43520: LD_VAR 0 12
43524: PUSH
43525: LD_VAR 0 7
43529: ARRAY
43530: PUSH
43531: LD_INT 1
43533: ARRAY
43534: PPUSH
43535: LD_VAR 0 12
43539: PUSH
43540: LD_VAR 0 7
43544: ARRAY
43545: PUSH
43546: LD_INT 2
43548: ARRAY
43549: PPUSH
43550: CALL_OW 428
43554: PUSH
43555: LD_INT 0
43557: GREATER
43558: OR
43559: PUSH
43560: LD_VAR 0 12
43564: PUSH
43565: LD_VAR 0 7
43569: ARRAY
43570: PUSH
43571: LD_INT 1
43573: ARRAY
43574: PPUSH
43575: LD_VAR 0 12
43579: PUSH
43580: LD_VAR 0 7
43584: ARRAY
43585: PUSH
43586: LD_INT 2
43588: ARRAY
43589: PPUSH
43590: CALL_OW 351
43594: OR
43595: IFFALSE 43601
// exit ;
43597: POP
43598: POP
43599: GO 43893
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43601: LD_ADDR_VAR 0 8
43605: PUSH
43606: LD_VAR 0 12
43610: PUSH
43611: LD_VAR 0 7
43615: ARRAY
43616: PUSH
43617: LD_INT 1
43619: ARRAY
43620: PPUSH
43621: LD_VAR 0 12
43625: PUSH
43626: LD_VAR 0 7
43630: ARRAY
43631: PUSH
43632: LD_INT 2
43634: ARRAY
43635: PPUSH
43636: CALL_OW 546
43640: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
43641: LD_VAR 0 8
43645: PUSH
43646: LD_INT 1
43648: ARRAY
43649: PUSH
43650: LD_VAR 0 8
43654: PUSH
43655: LD_INT 2
43657: ARRAY
43658: PUSH
43659: LD_VAR 0 13
43663: PUSH
43664: LD_INT 2
43666: PLUS
43667: GREATER
43668: OR
43669: PUSH
43670: LD_VAR 0 8
43674: PUSH
43675: LD_INT 2
43677: ARRAY
43678: PUSH
43679: LD_VAR 0 13
43683: PUSH
43684: LD_INT 2
43686: MINUS
43687: LESS
43688: OR
43689: PUSH
43690: LD_VAR 0 8
43694: PUSH
43695: LD_INT 3
43697: ARRAY
43698: PUSH
43699: LD_INT 0
43701: PUSH
43702: LD_INT 8
43704: PUSH
43705: LD_INT 9
43707: PUSH
43708: LD_INT 10
43710: PUSH
43711: LD_INT 11
43713: PUSH
43714: LD_INT 12
43716: PUSH
43717: LD_INT 13
43719: PUSH
43720: LD_INT 16
43722: PUSH
43723: LD_INT 17
43725: PUSH
43726: LD_INT 18
43728: PUSH
43729: LD_INT 19
43731: PUSH
43732: LD_INT 20
43734: PUSH
43735: LD_INT 21
43737: PUSH
43738: EMPTY
43739: LIST
43740: LIST
43741: LIST
43742: LIST
43743: LIST
43744: LIST
43745: LIST
43746: LIST
43747: LIST
43748: LIST
43749: LIST
43750: LIST
43751: LIST
43752: IN
43753: NOT
43754: OR
43755: PUSH
43756: LD_VAR 0 8
43760: PUSH
43761: LD_INT 5
43763: ARRAY
43764: NOT
43765: OR
43766: PUSH
43767: LD_VAR 0 8
43771: PUSH
43772: LD_INT 6
43774: ARRAY
43775: PUSH
43776: LD_INT 1
43778: PUSH
43779: LD_INT 2
43781: PUSH
43782: LD_INT 7
43784: PUSH
43785: LD_INT 9
43787: PUSH
43788: LD_INT 10
43790: PUSH
43791: LD_INT 11
43793: PUSH
43794: EMPTY
43795: LIST
43796: LIST
43797: LIST
43798: LIST
43799: LIST
43800: LIST
43801: IN
43802: NOT
43803: OR
43804: IFFALSE 43810
// exit ;
43806: POP
43807: POP
43808: GO 43893
// end ;
43810: GO 43481
43812: POP
43813: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
43814: LD_VAR 0 9
43818: PPUSH
43819: LD_VAR 0 3
43823: PPUSH
43824: LD_VAR 0 4
43828: PPUSH
43829: LD_INT 20
43831: PPUSH
43832: CALL 35839 0 4
43836: PUSH
43837: LD_INT 4
43839: ARRAY
43840: IFFALSE 43844
// exit ;
43842: GO 43893
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
43844: LD_VAR 0 2
43848: PUSH
43849: LD_INT 29
43851: PUSH
43852: LD_INT 30
43854: PUSH
43855: EMPTY
43856: LIST
43857: LIST
43858: IN
43859: PUSH
43860: LD_VAR 0 3
43864: PPUSH
43865: LD_VAR 0 4
43869: PPUSH
43870: LD_VAR 0 9
43874: PPUSH
43875: CALL_OW 440
43879: NOT
43880: AND
43881: IFFALSE 43885
// exit ;
43883: GO 43893
// result := true ;
43885: LD_ADDR_VAR 0 6
43889: PUSH
43890: LD_INT 1
43892: ST_TO_ADDR
// end ;
43893: LD_VAR 0 6
43897: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
43898: LD_INT 0
43900: PPUSH
43901: PPUSH
43902: PPUSH
43903: PPUSH
43904: PPUSH
43905: PPUSH
43906: PPUSH
43907: PPUSH
43908: PPUSH
43909: PPUSH
43910: PPUSH
43911: PPUSH
43912: PPUSH
43913: PPUSH
43914: PPUSH
43915: PPUSH
43916: PPUSH
43917: PPUSH
43918: PPUSH
43919: PPUSH
43920: PPUSH
43921: PPUSH
43922: PPUSH
43923: PPUSH
43924: PPUSH
43925: PPUSH
43926: PPUSH
43927: PPUSH
43928: PPUSH
43929: PPUSH
43930: PPUSH
43931: PPUSH
43932: PPUSH
43933: PPUSH
43934: PPUSH
43935: PPUSH
43936: PPUSH
43937: PPUSH
43938: PPUSH
43939: PPUSH
43940: PPUSH
43941: PPUSH
43942: PPUSH
43943: PPUSH
43944: PPUSH
43945: PPUSH
43946: PPUSH
43947: PPUSH
43948: PPUSH
43949: PPUSH
43950: PPUSH
43951: PPUSH
43952: PPUSH
43953: PPUSH
43954: PPUSH
43955: PPUSH
43956: PPUSH
43957: PPUSH
// result = [ ] ;
43958: LD_ADDR_VAR 0 7
43962: PUSH
43963: EMPTY
43964: ST_TO_ADDR
// temp_list = [ ] ;
43965: LD_ADDR_VAR 0 9
43969: PUSH
43970: EMPTY
43971: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
43972: LD_VAR 0 4
43976: PUSH
43977: LD_INT 0
43979: PUSH
43980: LD_INT 1
43982: PUSH
43983: LD_INT 2
43985: PUSH
43986: LD_INT 3
43988: PUSH
43989: LD_INT 4
43991: PUSH
43992: LD_INT 5
43994: PUSH
43995: EMPTY
43996: LIST
43997: LIST
43998: LIST
43999: LIST
44000: LIST
44001: LIST
44002: IN
44003: NOT
44004: PUSH
44005: LD_VAR 0 1
44009: PUSH
44010: LD_INT 0
44012: PUSH
44013: LD_INT 1
44015: PUSH
44016: EMPTY
44017: LIST
44018: LIST
44019: IN
44020: PUSH
44021: LD_VAR 0 5
44025: PUSH
44026: LD_INT 1
44028: PUSH
44029: LD_INT 2
44031: PUSH
44032: LD_INT 3
44034: PUSH
44035: EMPTY
44036: LIST
44037: LIST
44038: LIST
44039: IN
44040: NOT
44041: AND
44042: OR
44043: IFFALSE 44047
// exit ;
44045: GO 62438
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
44047: LD_VAR 0 1
44051: PUSH
44052: LD_INT 6
44054: PUSH
44055: LD_INT 7
44057: PUSH
44058: LD_INT 8
44060: PUSH
44061: LD_INT 13
44063: PUSH
44064: LD_INT 12
44066: PUSH
44067: LD_INT 15
44069: PUSH
44070: LD_INT 11
44072: PUSH
44073: LD_INT 14
44075: PUSH
44076: LD_INT 10
44078: PUSH
44079: EMPTY
44080: LIST
44081: LIST
44082: LIST
44083: LIST
44084: LIST
44085: LIST
44086: LIST
44087: LIST
44088: LIST
44089: IN
44090: IFFALSE 44100
// btype = b_lab ;
44092: LD_ADDR_VAR 0 1
44096: PUSH
44097: LD_INT 6
44099: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
44100: LD_VAR 0 6
44104: PUSH
44105: LD_INT 0
44107: PUSH
44108: LD_INT 1
44110: PUSH
44111: LD_INT 2
44113: PUSH
44114: EMPTY
44115: LIST
44116: LIST
44117: LIST
44118: IN
44119: NOT
44120: PUSH
44121: LD_VAR 0 1
44125: PUSH
44126: LD_INT 0
44128: PUSH
44129: LD_INT 1
44131: PUSH
44132: LD_INT 2
44134: PUSH
44135: LD_INT 3
44137: PUSH
44138: LD_INT 6
44140: PUSH
44141: LD_INT 36
44143: PUSH
44144: LD_INT 4
44146: PUSH
44147: LD_INT 5
44149: PUSH
44150: LD_INT 31
44152: PUSH
44153: LD_INT 32
44155: PUSH
44156: LD_INT 33
44158: PUSH
44159: EMPTY
44160: LIST
44161: LIST
44162: LIST
44163: LIST
44164: LIST
44165: LIST
44166: LIST
44167: LIST
44168: LIST
44169: LIST
44170: LIST
44171: IN
44172: NOT
44173: PUSH
44174: LD_VAR 0 6
44178: PUSH
44179: LD_INT 1
44181: EQUAL
44182: AND
44183: OR
44184: PUSH
44185: LD_VAR 0 1
44189: PUSH
44190: LD_INT 2
44192: PUSH
44193: LD_INT 3
44195: PUSH
44196: EMPTY
44197: LIST
44198: LIST
44199: IN
44200: NOT
44201: PUSH
44202: LD_VAR 0 6
44206: PUSH
44207: LD_INT 2
44209: EQUAL
44210: AND
44211: OR
44212: IFFALSE 44222
// mode = 0 ;
44214: LD_ADDR_VAR 0 6
44218: PUSH
44219: LD_INT 0
44221: ST_TO_ADDR
// case mode of 0 :
44222: LD_VAR 0 6
44226: PUSH
44227: LD_INT 0
44229: DOUBLE
44230: EQUAL
44231: IFTRUE 44235
44233: GO 55688
44235: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44236: LD_ADDR_VAR 0 11
44240: PUSH
44241: LD_INT 0
44243: PUSH
44244: LD_INT 0
44246: PUSH
44247: EMPTY
44248: LIST
44249: LIST
44250: PUSH
44251: LD_INT 0
44253: PUSH
44254: LD_INT 1
44256: NEG
44257: PUSH
44258: EMPTY
44259: LIST
44260: LIST
44261: PUSH
44262: LD_INT 1
44264: PUSH
44265: LD_INT 0
44267: PUSH
44268: EMPTY
44269: LIST
44270: LIST
44271: PUSH
44272: LD_INT 1
44274: PUSH
44275: LD_INT 1
44277: PUSH
44278: EMPTY
44279: LIST
44280: LIST
44281: PUSH
44282: LD_INT 0
44284: PUSH
44285: LD_INT 1
44287: PUSH
44288: EMPTY
44289: LIST
44290: LIST
44291: PUSH
44292: LD_INT 1
44294: NEG
44295: PUSH
44296: LD_INT 0
44298: PUSH
44299: EMPTY
44300: LIST
44301: LIST
44302: PUSH
44303: LD_INT 1
44305: NEG
44306: PUSH
44307: LD_INT 1
44309: NEG
44310: PUSH
44311: EMPTY
44312: LIST
44313: LIST
44314: PUSH
44315: LD_INT 1
44317: NEG
44318: PUSH
44319: LD_INT 2
44321: NEG
44322: PUSH
44323: EMPTY
44324: LIST
44325: LIST
44326: PUSH
44327: LD_INT 0
44329: PUSH
44330: LD_INT 2
44332: NEG
44333: PUSH
44334: EMPTY
44335: LIST
44336: LIST
44337: PUSH
44338: LD_INT 1
44340: PUSH
44341: LD_INT 1
44343: NEG
44344: PUSH
44345: EMPTY
44346: LIST
44347: LIST
44348: PUSH
44349: LD_INT 1
44351: PUSH
44352: LD_INT 2
44354: PUSH
44355: EMPTY
44356: LIST
44357: LIST
44358: PUSH
44359: LD_INT 0
44361: PUSH
44362: LD_INT 2
44364: PUSH
44365: EMPTY
44366: LIST
44367: LIST
44368: PUSH
44369: LD_INT 1
44371: NEG
44372: PUSH
44373: LD_INT 1
44375: PUSH
44376: EMPTY
44377: LIST
44378: LIST
44379: PUSH
44380: LD_INT 1
44382: PUSH
44383: LD_INT 3
44385: PUSH
44386: EMPTY
44387: LIST
44388: LIST
44389: PUSH
44390: LD_INT 0
44392: PUSH
44393: LD_INT 3
44395: PUSH
44396: EMPTY
44397: LIST
44398: LIST
44399: PUSH
44400: LD_INT 1
44402: NEG
44403: PUSH
44404: LD_INT 2
44406: PUSH
44407: EMPTY
44408: LIST
44409: LIST
44410: PUSH
44411: EMPTY
44412: LIST
44413: LIST
44414: LIST
44415: LIST
44416: LIST
44417: LIST
44418: LIST
44419: LIST
44420: LIST
44421: LIST
44422: LIST
44423: LIST
44424: LIST
44425: LIST
44426: LIST
44427: LIST
44428: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44429: LD_ADDR_VAR 0 12
44433: PUSH
44434: LD_INT 0
44436: PUSH
44437: LD_INT 0
44439: PUSH
44440: EMPTY
44441: LIST
44442: LIST
44443: PUSH
44444: LD_INT 0
44446: PUSH
44447: LD_INT 1
44449: NEG
44450: PUSH
44451: EMPTY
44452: LIST
44453: LIST
44454: PUSH
44455: LD_INT 1
44457: PUSH
44458: LD_INT 0
44460: PUSH
44461: EMPTY
44462: LIST
44463: LIST
44464: PUSH
44465: LD_INT 1
44467: PUSH
44468: LD_INT 1
44470: PUSH
44471: EMPTY
44472: LIST
44473: LIST
44474: PUSH
44475: LD_INT 0
44477: PUSH
44478: LD_INT 1
44480: PUSH
44481: EMPTY
44482: LIST
44483: LIST
44484: PUSH
44485: LD_INT 1
44487: NEG
44488: PUSH
44489: LD_INT 0
44491: PUSH
44492: EMPTY
44493: LIST
44494: LIST
44495: PUSH
44496: LD_INT 1
44498: NEG
44499: PUSH
44500: LD_INT 1
44502: NEG
44503: PUSH
44504: EMPTY
44505: LIST
44506: LIST
44507: PUSH
44508: LD_INT 1
44510: PUSH
44511: LD_INT 1
44513: NEG
44514: PUSH
44515: EMPTY
44516: LIST
44517: LIST
44518: PUSH
44519: LD_INT 2
44521: PUSH
44522: LD_INT 0
44524: PUSH
44525: EMPTY
44526: LIST
44527: LIST
44528: PUSH
44529: LD_INT 2
44531: PUSH
44532: LD_INT 1
44534: PUSH
44535: EMPTY
44536: LIST
44537: LIST
44538: PUSH
44539: LD_INT 1
44541: NEG
44542: PUSH
44543: LD_INT 1
44545: PUSH
44546: EMPTY
44547: LIST
44548: LIST
44549: PUSH
44550: LD_INT 2
44552: NEG
44553: PUSH
44554: LD_INT 0
44556: PUSH
44557: EMPTY
44558: LIST
44559: LIST
44560: PUSH
44561: LD_INT 2
44563: NEG
44564: PUSH
44565: LD_INT 1
44567: NEG
44568: PUSH
44569: EMPTY
44570: LIST
44571: LIST
44572: PUSH
44573: LD_INT 2
44575: NEG
44576: PUSH
44577: LD_INT 1
44579: PUSH
44580: EMPTY
44581: LIST
44582: LIST
44583: PUSH
44584: LD_INT 3
44586: NEG
44587: PUSH
44588: LD_INT 0
44590: PUSH
44591: EMPTY
44592: LIST
44593: LIST
44594: PUSH
44595: LD_INT 3
44597: NEG
44598: PUSH
44599: LD_INT 1
44601: NEG
44602: PUSH
44603: EMPTY
44604: LIST
44605: LIST
44606: PUSH
44607: EMPTY
44608: LIST
44609: LIST
44610: LIST
44611: LIST
44612: LIST
44613: LIST
44614: LIST
44615: LIST
44616: LIST
44617: LIST
44618: LIST
44619: LIST
44620: LIST
44621: LIST
44622: LIST
44623: LIST
44624: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44625: LD_ADDR_VAR 0 13
44629: PUSH
44630: LD_INT 0
44632: PUSH
44633: LD_INT 0
44635: PUSH
44636: EMPTY
44637: LIST
44638: LIST
44639: PUSH
44640: LD_INT 0
44642: PUSH
44643: LD_INT 1
44645: NEG
44646: PUSH
44647: EMPTY
44648: LIST
44649: LIST
44650: PUSH
44651: LD_INT 1
44653: PUSH
44654: LD_INT 0
44656: PUSH
44657: EMPTY
44658: LIST
44659: LIST
44660: PUSH
44661: LD_INT 1
44663: PUSH
44664: LD_INT 1
44666: PUSH
44667: EMPTY
44668: LIST
44669: LIST
44670: PUSH
44671: LD_INT 0
44673: PUSH
44674: LD_INT 1
44676: PUSH
44677: EMPTY
44678: LIST
44679: LIST
44680: PUSH
44681: LD_INT 1
44683: NEG
44684: PUSH
44685: LD_INT 0
44687: PUSH
44688: EMPTY
44689: LIST
44690: LIST
44691: PUSH
44692: LD_INT 1
44694: NEG
44695: PUSH
44696: LD_INT 1
44698: NEG
44699: PUSH
44700: EMPTY
44701: LIST
44702: LIST
44703: PUSH
44704: LD_INT 1
44706: NEG
44707: PUSH
44708: LD_INT 2
44710: NEG
44711: PUSH
44712: EMPTY
44713: LIST
44714: LIST
44715: PUSH
44716: LD_INT 2
44718: PUSH
44719: LD_INT 1
44721: PUSH
44722: EMPTY
44723: LIST
44724: LIST
44725: PUSH
44726: LD_INT 2
44728: PUSH
44729: LD_INT 2
44731: PUSH
44732: EMPTY
44733: LIST
44734: LIST
44735: PUSH
44736: LD_INT 1
44738: PUSH
44739: LD_INT 2
44741: PUSH
44742: EMPTY
44743: LIST
44744: LIST
44745: PUSH
44746: LD_INT 2
44748: NEG
44749: PUSH
44750: LD_INT 1
44752: NEG
44753: PUSH
44754: EMPTY
44755: LIST
44756: LIST
44757: PUSH
44758: LD_INT 2
44760: NEG
44761: PUSH
44762: LD_INT 2
44764: NEG
44765: PUSH
44766: EMPTY
44767: LIST
44768: LIST
44769: PUSH
44770: LD_INT 2
44772: NEG
44773: PUSH
44774: LD_INT 3
44776: NEG
44777: PUSH
44778: EMPTY
44779: LIST
44780: LIST
44781: PUSH
44782: LD_INT 3
44784: NEG
44785: PUSH
44786: LD_INT 2
44788: NEG
44789: PUSH
44790: EMPTY
44791: LIST
44792: LIST
44793: PUSH
44794: LD_INT 3
44796: NEG
44797: PUSH
44798: LD_INT 3
44800: NEG
44801: PUSH
44802: EMPTY
44803: LIST
44804: LIST
44805: PUSH
44806: EMPTY
44807: LIST
44808: LIST
44809: LIST
44810: LIST
44811: LIST
44812: LIST
44813: LIST
44814: LIST
44815: LIST
44816: LIST
44817: LIST
44818: LIST
44819: LIST
44820: LIST
44821: LIST
44822: LIST
44823: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44824: LD_ADDR_VAR 0 14
44828: PUSH
44829: LD_INT 0
44831: PUSH
44832: LD_INT 0
44834: PUSH
44835: EMPTY
44836: LIST
44837: LIST
44838: PUSH
44839: LD_INT 0
44841: PUSH
44842: LD_INT 1
44844: NEG
44845: PUSH
44846: EMPTY
44847: LIST
44848: LIST
44849: PUSH
44850: LD_INT 1
44852: PUSH
44853: LD_INT 0
44855: PUSH
44856: EMPTY
44857: LIST
44858: LIST
44859: PUSH
44860: LD_INT 1
44862: PUSH
44863: LD_INT 1
44865: PUSH
44866: EMPTY
44867: LIST
44868: LIST
44869: PUSH
44870: LD_INT 0
44872: PUSH
44873: LD_INT 1
44875: PUSH
44876: EMPTY
44877: LIST
44878: LIST
44879: PUSH
44880: LD_INT 1
44882: NEG
44883: PUSH
44884: LD_INT 0
44886: PUSH
44887: EMPTY
44888: LIST
44889: LIST
44890: PUSH
44891: LD_INT 1
44893: NEG
44894: PUSH
44895: LD_INT 1
44897: NEG
44898: PUSH
44899: EMPTY
44900: LIST
44901: LIST
44902: PUSH
44903: LD_INT 1
44905: NEG
44906: PUSH
44907: LD_INT 2
44909: NEG
44910: PUSH
44911: EMPTY
44912: LIST
44913: LIST
44914: PUSH
44915: LD_INT 0
44917: PUSH
44918: LD_INT 2
44920: NEG
44921: PUSH
44922: EMPTY
44923: LIST
44924: LIST
44925: PUSH
44926: LD_INT 1
44928: PUSH
44929: LD_INT 1
44931: NEG
44932: PUSH
44933: EMPTY
44934: LIST
44935: LIST
44936: PUSH
44937: LD_INT 1
44939: PUSH
44940: LD_INT 2
44942: PUSH
44943: EMPTY
44944: LIST
44945: LIST
44946: PUSH
44947: LD_INT 0
44949: PUSH
44950: LD_INT 2
44952: PUSH
44953: EMPTY
44954: LIST
44955: LIST
44956: PUSH
44957: LD_INT 1
44959: NEG
44960: PUSH
44961: LD_INT 1
44963: PUSH
44964: EMPTY
44965: LIST
44966: LIST
44967: PUSH
44968: LD_INT 1
44970: NEG
44971: PUSH
44972: LD_INT 3
44974: NEG
44975: PUSH
44976: EMPTY
44977: LIST
44978: LIST
44979: PUSH
44980: LD_INT 0
44982: PUSH
44983: LD_INT 3
44985: NEG
44986: PUSH
44987: EMPTY
44988: LIST
44989: LIST
44990: PUSH
44991: LD_INT 1
44993: PUSH
44994: LD_INT 2
44996: NEG
44997: PUSH
44998: EMPTY
44999: LIST
45000: LIST
45001: PUSH
45002: EMPTY
45003: LIST
45004: LIST
45005: LIST
45006: LIST
45007: LIST
45008: LIST
45009: LIST
45010: LIST
45011: LIST
45012: LIST
45013: LIST
45014: LIST
45015: LIST
45016: LIST
45017: LIST
45018: LIST
45019: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45020: LD_ADDR_VAR 0 15
45024: PUSH
45025: LD_INT 0
45027: PUSH
45028: LD_INT 0
45030: PUSH
45031: EMPTY
45032: LIST
45033: LIST
45034: PUSH
45035: LD_INT 0
45037: PUSH
45038: LD_INT 1
45040: NEG
45041: PUSH
45042: EMPTY
45043: LIST
45044: LIST
45045: PUSH
45046: LD_INT 1
45048: PUSH
45049: LD_INT 0
45051: PUSH
45052: EMPTY
45053: LIST
45054: LIST
45055: PUSH
45056: LD_INT 1
45058: PUSH
45059: LD_INT 1
45061: PUSH
45062: EMPTY
45063: LIST
45064: LIST
45065: PUSH
45066: LD_INT 0
45068: PUSH
45069: LD_INT 1
45071: PUSH
45072: EMPTY
45073: LIST
45074: LIST
45075: PUSH
45076: LD_INT 1
45078: NEG
45079: PUSH
45080: LD_INT 0
45082: PUSH
45083: EMPTY
45084: LIST
45085: LIST
45086: PUSH
45087: LD_INT 1
45089: NEG
45090: PUSH
45091: LD_INT 1
45093: NEG
45094: PUSH
45095: EMPTY
45096: LIST
45097: LIST
45098: PUSH
45099: LD_INT 1
45101: PUSH
45102: LD_INT 1
45104: NEG
45105: PUSH
45106: EMPTY
45107: LIST
45108: LIST
45109: PUSH
45110: LD_INT 2
45112: PUSH
45113: LD_INT 0
45115: PUSH
45116: EMPTY
45117: LIST
45118: LIST
45119: PUSH
45120: LD_INT 2
45122: PUSH
45123: LD_INT 1
45125: PUSH
45126: EMPTY
45127: LIST
45128: LIST
45129: PUSH
45130: LD_INT 1
45132: NEG
45133: PUSH
45134: LD_INT 1
45136: PUSH
45137: EMPTY
45138: LIST
45139: LIST
45140: PUSH
45141: LD_INT 2
45143: NEG
45144: PUSH
45145: LD_INT 0
45147: PUSH
45148: EMPTY
45149: LIST
45150: LIST
45151: PUSH
45152: LD_INT 2
45154: NEG
45155: PUSH
45156: LD_INT 1
45158: NEG
45159: PUSH
45160: EMPTY
45161: LIST
45162: LIST
45163: PUSH
45164: LD_INT 2
45166: PUSH
45167: LD_INT 1
45169: NEG
45170: PUSH
45171: EMPTY
45172: LIST
45173: LIST
45174: PUSH
45175: LD_INT 3
45177: PUSH
45178: LD_INT 0
45180: PUSH
45181: EMPTY
45182: LIST
45183: LIST
45184: PUSH
45185: LD_INT 3
45187: PUSH
45188: LD_INT 1
45190: PUSH
45191: EMPTY
45192: LIST
45193: LIST
45194: PUSH
45195: EMPTY
45196: LIST
45197: LIST
45198: LIST
45199: LIST
45200: LIST
45201: LIST
45202: LIST
45203: LIST
45204: LIST
45205: LIST
45206: LIST
45207: LIST
45208: LIST
45209: LIST
45210: LIST
45211: LIST
45212: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45213: LD_ADDR_VAR 0 16
45217: PUSH
45218: LD_INT 0
45220: PUSH
45221: LD_INT 0
45223: PUSH
45224: EMPTY
45225: LIST
45226: LIST
45227: PUSH
45228: LD_INT 0
45230: PUSH
45231: LD_INT 1
45233: NEG
45234: PUSH
45235: EMPTY
45236: LIST
45237: LIST
45238: PUSH
45239: LD_INT 1
45241: PUSH
45242: LD_INT 0
45244: PUSH
45245: EMPTY
45246: LIST
45247: LIST
45248: PUSH
45249: LD_INT 1
45251: PUSH
45252: LD_INT 1
45254: PUSH
45255: EMPTY
45256: LIST
45257: LIST
45258: PUSH
45259: LD_INT 0
45261: PUSH
45262: LD_INT 1
45264: PUSH
45265: EMPTY
45266: LIST
45267: LIST
45268: PUSH
45269: LD_INT 1
45271: NEG
45272: PUSH
45273: LD_INT 0
45275: PUSH
45276: EMPTY
45277: LIST
45278: LIST
45279: PUSH
45280: LD_INT 1
45282: NEG
45283: PUSH
45284: LD_INT 1
45286: NEG
45287: PUSH
45288: EMPTY
45289: LIST
45290: LIST
45291: PUSH
45292: LD_INT 1
45294: NEG
45295: PUSH
45296: LD_INT 2
45298: NEG
45299: PUSH
45300: EMPTY
45301: LIST
45302: LIST
45303: PUSH
45304: LD_INT 2
45306: PUSH
45307: LD_INT 1
45309: PUSH
45310: EMPTY
45311: LIST
45312: LIST
45313: PUSH
45314: LD_INT 2
45316: PUSH
45317: LD_INT 2
45319: PUSH
45320: EMPTY
45321: LIST
45322: LIST
45323: PUSH
45324: LD_INT 1
45326: PUSH
45327: LD_INT 2
45329: PUSH
45330: EMPTY
45331: LIST
45332: LIST
45333: PUSH
45334: LD_INT 2
45336: NEG
45337: PUSH
45338: LD_INT 1
45340: NEG
45341: PUSH
45342: EMPTY
45343: LIST
45344: LIST
45345: PUSH
45346: LD_INT 2
45348: NEG
45349: PUSH
45350: LD_INT 2
45352: NEG
45353: PUSH
45354: EMPTY
45355: LIST
45356: LIST
45357: PUSH
45358: LD_INT 3
45360: PUSH
45361: LD_INT 2
45363: PUSH
45364: EMPTY
45365: LIST
45366: LIST
45367: PUSH
45368: LD_INT 3
45370: PUSH
45371: LD_INT 3
45373: PUSH
45374: EMPTY
45375: LIST
45376: LIST
45377: PUSH
45378: LD_INT 2
45380: PUSH
45381: LD_INT 3
45383: PUSH
45384: EMPTY
45385: LIST
45386: LIST
45387: PUSH
45388: EMPTY
45389: LIST
45390: LIST
45391: LIST
45392: LIST
45393: LIST
45394: LIST
45395: LIST
45396: LIST
45397: LIST
45398: LIST
45399: LIST
45400: LIST
45401: LIST
45402: LIST
45403: LIST
45404: LIST
45405: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45406: LD_ADDR_VAR 0 17
45410: PUSH
45411: LD_INT 0
45413: PUSH
45414: LD_INT 0
45416: PUSH
45417: EMPTY
45418: LIST
45419: LIST
45420: PUSH
45421: LD_INT 0
45423: PUSH
45424: LD_INT 1
45426: NEG
45427: PUSH
45428: EMPTY
45429: LIST
45430: LIST
45431: PUSH
45432: LD_INT 1
45434: PUSH
45435: LD_INT 0
45437: PUSH
45438: EMPTY
45439: LIST
45440: LIST
45441: PUSH
45442: LD_INT 1
45444: PUSH
45445: LD_INT 1
45447: PUSH
45448: EMPTY
45449: LIST
45450: LIST
45451: PUSH
45452: LD_INT 0
45454: PUSH
45455: LD_INT 1
45457: PUSH
45458: EMPTY
45459: LIST
45460: LIST
45461: PUSH
45462: LD_INT 1
45464: NEG
45465: PUSH
45466: LD_INT 0
45468: PUSH
45469: EMPTY
45470: LIST
45471: LIST
45472: PUSH
45473: LD_INT 1
45475: NEG
45476: PUSH
45477: LD_INT 1
45479: NEG
45480: PUSH
45481: EMPTY
45482: LIST
45483: LIST
45484: PUSH
45485: LD_INT 1
45487: NEG
45488: PUSH
45489: LD_INT 2
45491: NEG
45492: PUSH
45493: EMPTY
45494: LIST
45495: LIST
45496: PUSH
45497: LD_INT 0
45499: PUSH
45500: LD_INT 2
45502: NEG
45503: PUSH
45504: EMPTY
45505: LIST
45506: LIST
45507: PUSH
45508: LD_INT 1
45510: PUSH
45511: LD_INT 1
45513: NEG
45514: PUSH
45515: EMPTY
45516: LIST
45517: LIST
45518: PUSH
45519: LD_INT 2
45521: PUSH
45522: LD_INT 0
45524: PUSH
45525: EMPTY
45526: LIST
45527: LIST
45528: PUSH
45529: LD_INT 2
45531: PUSH
45532: LD_INT 1
45534: PUSH
45535: EMPTY
45536: LIST
45537: LIST
45538: PUSH
45539: LD_INT 2
45541: PUSH
45542: LD_INT 2
45544: PUSH
45545: EMPTY
45546: LIST
45547: LIST
45548: PUSH
45549: LD_INT 1
45551: PUSH
45552: LD_INT 2
45554: PUSH
45555: EMPTY
45556: LIST
45557: LIST
45558: PUSH
45559: LD_INT 0
45561: PUSH
45562: LD_INT 2
45564: PUSH
45565: EMPTY
45566: LIST
45567: LIST
45568: PUSH
45569: LD_INT 1
45571: NEG
45572: PUSH
45573: LD_INT 1
45575: PUSH
45576: EMPTY
45577: LIST
45578: LIST
45579: PUSH
45580: LD_INT 2
45582: NEG
45583: PUSH
45584: LD_INT 0
45586: PUSH
45587: EMPTY
45588: LIST
45589: LIST
45590: PUSH
45591: LD_INT 2
45593: NEG
45594: PUSH
45595: LD_INT 1
45597: NEG
45598: PUSH
45599: EMPTY
45600: LIST
45601: LIST
45602: PUSH
45603: LD_INT 2
45605: NEG
45606: PUSH
45607: LD_INT 2
45609: NEG
45610: PUSH
45611: EMPTY
45612: LIST
45613: LIST
45614: PUSH
45615: EMPTY
45616: LIST
45617: LIST
45618: LIST
45619: LIST
45620: LIST
45621: LIST
45622: LIST
45623: LIST
45624: LIST
45625: LIST
45626: LIST
45627: LIST
45628: LIST
45629: LIST
45630: LIST
45631: LIST
45632: LIST
45633: LIST
45634: LIST
45635: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45636: LD_ADDR_VAR 0 18
45640: PUSH
45641: LD_INT 0
45643: PUSH
45644: LD_INT 0
45646: PUSH
45647: EMPTY
45648: LIST
45649: LIST
45650: PUSH
45651: LD_INT 0
45653: PUSH
45654: LD_INT 1
45656: NEG
45657: PUSH
45658: EMPTY
45659: LIST
45660: LIST
45661: PUSH
45662: LD_INT 1
45664: PUSH
45665: LD_INT 0
45667: PUSH
45668: EMPTY
45669: LIST
45670: LIST
45671: PUSH
45672: LD_INT 1
45674: PUSH
45675: LD_INT 1
45677: PUSH
45678: EMPTY
45679: LIST
45680: LIST
45681: PUSH
45682: LD_INT 0
45684: PUSH
45685: LD_INT 1
45687: PUSH
45688: EMPTY
45689: LIST
45690: LIST
45691: PUSH
45692: LD_INT 1
45694: NEG
45695: PUSH
45696: LD_INT 0
45698: PUSH
45699: EMPTY
45700: LIST
45701: LIST
45702: PUSH
45703: LD_INT 1
45705: NEG
45706: PUSH
45707: LD_INT 1
45709: NEG
45710: PUSH
45711: EMPTY
45712: LIST
45713: LIST
45714: PUSH
45715: LD_INT 1
45717: NEG
45718: PUSH
45719: LD_INT 2
45721: NEG
45722: PUSH
45723: EMPTY
45724: LIST
45725: LIST
45726: PUSH
45727: LD_INT 0
45729: PUSH
45730: LD_INT 2
45732: NEG
45733: PUSH
45734: EMPTY
45735: LIST
45736: LIST
45737: PUSH
45738: LD_INT 1
45740: PUSH
45741: LD_INT 1
45743: NEG
45744: PUSH
45745: EMPTY
45746: LIST
45747: LIST
45748: PUSH
45749: LD_INT 2
45751: PUSH
45752: LD_INT 0
45754: PUSH
45755: EMPTY
45756: LIST
45757: LIST
45758: PUSH
45759: LD_INT 2
45761: PUSH
45762: LD_INT 1
45764: PUSH
45765: EMPTY
45766: LIST
45767: LIST
45768: PUSH
45769: LD_INT 2
45771: PUSH
45772: LD_INT 2
45774: PUSH
45775: EMPTY
45776: LIST
45777: LIST
45778: PUSH
45779: LD_INT 1
45781: PUSH
45782: LD_INT 2
45784: PUSH
45785: EMPTY
45786: LIST
45787: LIST
45788: PUSH
45789: LD_INT 0
45791: PUSH
45792: LD_INT 2
45794: PUSH
45795: EMPTY
45796: LIST
45797: LIST
45798: PUSH
45799: LD_INT 1
45801: NEG
45802: PUSH
45803: LD_INT 1
45805: PUSH
45806: EMPTY
45807: LIST
45808: LIST
45809: PUSH
45810: LD_INT 2
45812: NEG
45813: PUSH
45814: LD_INT 0
45816: PUSH
45817: EMPTY
45818: LIST
45819: LIST
45820: PUSH
45821: LD_INT 2
45823: NEG
45824: PUSH
45825: LD_INT 1
45827: NEG
45828: PUSH
45829: EMPTY
45830: LIST
45831: LIST
45832: PUSH
45833: LD_INT 2
45835: NEG
45836: PUSH
45837: LD_INT 2
45839: NEG
45840: PUSH
45841: EMPTY
45842: LIST
45843: LIST
45844: PUSH
45845: EMPTY
45846: LIST
45847: LIST
45848: LIST
45849: LIST
45850: LIST
45851: LIST
45852: LIST
45853: LIST
45854: LIST
45855: LIST
45856: LIST
45857: LIST
45858: LIST
45859: LIST
45860: LIST
45861: LIST
45862: LIST
45863: LIST
45864: LIST
45865: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45866: LD_ADDR_VAR 0 19
45870: PUSH
45871: LD_INT 0
45873: PUSH
45874: LD_INT 0
45876: PUSH
45877: EMPTY
45878: LIST
45879: LIST
45880: PUSH
45881: LD_INT 0
45883: PUSH
45884: LD_INT 1
45886: NEG
45887: PUSH
45888: EMPTY
45889: LIST
45890: LIST
45891: PUSH
45892: LD_INT 1
45894: PUSH
45895: LD_INT 0
45897: PUSH
45898: EMPTY
45899: LIST
45900: LIST
45901: PUSH
45902: LD_INT 1
45904: PUSH
45905: LD_INT 1
45907: PUSH
45908: EMPTY
45909: LIST
45910: LIST
45911: PUSH
45912: LD_INT 0
45914: PUSH
45915: LD_INT 1
45917: PUSH
45918: EMPTY
45919: LIST
45920: LIST
45921: PUSH
45922: LD_INT 1
45924: NEG
45925: PUSH
45926: LD_INT 0
45928: PUSH
45929: EMPTY
45930: LIST
45931: LIST
45932: PUSH
45933: LD_INT 1
45935: NEG
45936: PUSH
45937: LD_INT 1
45939: NEG
45940: PUSH
45941: EMPTY
45942: LIST
45943: LIST
45944: PUSH
45945: LD_INT 1
45947: NEG
45948: PUSH
45949: LD_INT 2
45951: NEG
45952: PUSH
45953: EMPTY
45954: LIST
45955: LIST
45956: PUSH
45957: LD_INT 0
45959: PUSH
45960: LD_INT 2
45962: NEG
45963: PUSH
45964: EMPTY
45965: LIST
45966: LIST
45967: PUSH
45968: LD_INT 1
45970: PUSH
45971: LD_INT 1
45973: NEG
45974: PUSH
45975: EMPTY
45976: LIST
45977: LIST
45978: PUSH
45979: LD_INT 2
45981: PUSH
45982: LD_INT 0
45984: PUSH
45985: EMPTY
45986: LIST
45987: LIST
45988: PUSH
45989: LD_INT 2
45991: PUSH
45992: LD_INT 1
45994: PUSH
45995: EMPTY
45996: LIST
45997: LIST
45998: PUSH
45999: LD_INT 2
46001: PUSH
46002: LD_INT 2
46004: PUSH
46005: EMPTY
46006: LIST
46007: LIST
46008: PUSH
46009: LD_INT 1
46011: PUSH
46012: LD_INT 2
46014: PUSH
46015: EMPTY
46016: LIST
46017: LIST
46018: PUSH
46019: LD_INT 0
46021: PUSH
46022: LD_INT 2
46024: PUSH
46025: EMPTY
46026: LIST
46027: LIST
46028: PUSH
46029: LD_INT 1
46031: NEG
46032: PUSH
46033: LD_INT 1
46035: PUSH
46036: EMPTY
46037: LIST
46038: LIST
46039: PUSH
46040: LD_INT 2
46042: NEG
46043: PUSH
46044: LD_INT 0
46046: PUSH
46047: EMPTY
46048: LIST
46049: LIST
46050: PUSH
46051: LD_INT 2
46053: NEG
46054: PUSH
46055: LD_INT 1
46057: NEG
46058: PUSH
46059: EMPTY
46060: LIST
46061: LIST
46062: PUSH
46063: LD_INT 2
46065: NEG
46066: PUSH
46067: LD_INT 2
46069: NEG
46070: PUSH
46071: EMPTY
46072: LIST
46073: LIST
46074: PUSH
46075: EMPTY
46076: LIST
46077: LIST
46078: LIST
46079: LIST
46080: LIST
46081: LIST
46082: LIST
46083: LIST
46084: LIST
46085: LIST
46086: LIST
46087: LIST
46088: LIST
46089: LIST
46090: LIST
46091: LIST
46092: LIST
46093: LIST
46094: LIST
46095: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46096: LD_ADDR_VAR 0 20
46100: PUSH
46101: LD_INT 0
46103: PUSH
46104: LD_INT 0
46106: PUSH
46107: EMPTY
46108: LIST
46109: LIST
46110: PUSH
46111: LD_INT 0
46113: PUSH
46114: LD_INT 1
46116: NEG
46117: PUSH
46118: EMPTY
46119: LIST
46120: LIST
46121: PUSH
46122: LD_INT 1
46124: PUSH
46125: LD_INT 0
46127: PUSH
46128: EMPTY
46129: LIST
46130: LIST
46131: PUSH
46132: LD_INT 1
46134: PUSH
46135: LD_INT 1
46137: PUSH
46138: EMPTY
46139: LIST
46140: LIST
46141: PUSH
46142: LD_INT 0
46144: PUSH
46145: LD_INT 1
46147: PUSH
46148: EMPTY
46149: LIST
46150: LIST
46151: PUSH
46152: LD_INT 1
46154: NEG
46155: PUSH
46156: LD_INT 0
46158: PUSH
46159: EMPTY
46160: LIST
46161: LIST
46162: PUSH
46163: LD_INT 1
46165: NEG
46166: PUSH
46167: LD_INT 1
46169: NEG
46170: PUSH
46171: EMPTY
46172: LIST
46173: LIST
46174: PUSH
46175: LD_INT 1
46177: NEG
46178: PUSH
46179: LD_INT 2
46181: NEG
46182: PUSH
46183: EMPTY
46184: LIST
46185: LIST
46186: PUSH
46187: LD_INT 0
46189: PUSH
46190: LD_INT 2
46192: NEG
46193: PUSH
46194: EMPTY
46195: LIST
46196: LIST
46197: PUSH
46198: LD_INT 1
46200: PUSH
46201: LD_INT 1
46203: NEG
46204: PUSH
46205: EMPTY
46206: LIST
46207: LIST
46208: PUSH
46209: LD_INT 2
46211: PUSH
46212: LD_INT 0
46214: PUSH
46215: EMPTY
46216: LIST
46217: LIST
46218: PUSH
46219: LD_INT 2
46221: PUSH
46222: LD_INT 1
46224: PUSH
46225: EMPTY
46226: LIST
46227: LIST
46228: PUSH
46229: LD_INT 2
46231: PUSH
46232: LD_INT 2
46234: PUSH
46235: EMPTY
46236: LIST
46237: LIST
46238: PUSH
46239: LD_INT 1
46241: PUSH
46242: LD_INT 2
46244: PUSH
46245: EMPTY
46246: LIST
46247: LIST
46248: PUSH
46249: LD_INT 0
46251: PUSH
46252: LD_INT 2
46254: PUSH
46255: EMPTY
46256: LIST
46257: LIST
46258: PUSH
46259: LD_INT 1
46261: NEG
46262: PUSH
46263: LD_INT 1
46265: PUSH
46266: EMPTY
46267: LIST
46268: LIST
46269: PUSH
46270: LD_INT 2
46272: NEG
46273: PUSH
46274: LD_INT 0
46276: PUSH
46277: EMPTY
46278: LIST
46279: LIST
46280: PUSH
46281: LD_INT 2
46283: NEG
46284: PUSH
46285: LD_INT 1
46287: NEG
46288: PUSH
46289: EMPTY
46290: LIST
46291: LIST
46292: PUSH
46293: LD_INT 2
46295: NEG
46296: PUSH
46297: LD_INT 2
46299: NEG
46300: PUSH
46301: EMPTY
46302: LIST
46303: LIST
46304: PUSH
46305: EMPTY
46306: LIST
46307: LIST
46308: LIST
46309: LIST
46310: LIST
46311: LIST
46312: LIST
46313: LIST
46314: LIST
46315: LIST
46316: LIST
46317: LIST
46318: LIST
46319: LIST
46320: LIST
46321: LIST
46322: LIST
46323: LIST
46324: LIST
46325: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46326: LD_ADDR_VAR 0 21
46330: PUSH
46331: LD_INT 0
46333: PUSH
46334: LD_INT 0
46336: PUSH
46337: EMPTY
46338: LIST
46339: LIST
46340: PUSH
46341: LD_INT 0
46343: PUSH
46344: LD_INT 1
46346: NEG
46347: PUSH
46348: EMPTY
46349: LIST
46350: LIST
46351: PUSH
46352: LD_INT 1
46354: PUSH
46355: LD_INT 0
46357: PUSH
46358: EMPTY
46359: LIST
46360: LIST
46361: PUSH
46362: LD_INT 1
46364: PUSH
46365: LD_INT 1
46367: PUSH
46368: EMPTY
46369: LIST
46370: LIST
46371: PUSH
46372: LD_INT 0
46374: PUSH
46375: LD_INT 1
46377: PUSH
46378: EMPTY
46379: LIST
46380: LIST
46381: PUSH
46382: LD_INT 1
46384: NEG
46385: PUSH
46386: LD_INT 0
46388: PUSH
46389: EMPTY
46390: LIST
46391: LIST
46392: PUSH
46393: LD_INT 1
46395: NEG
46396: PUSH
46397: LD_INT 1
46399: NEG
46400: PUSH
46401: EMPTY
46402: LIST
46403: LIST
46404: PUSH
46405: LD_INT 1
46407: NEG
46408: PUSH
46409: LD_INT 2
46411: NEG
46412: PUSH
46413: EMPTY
46414: LIST
46415: LIST
46416: PUSH
46417: LD_INT 0
46419: PUSH
46420: LD_INT 2
46422: NEG
46423: PUSH
46424: EMPTY
46425: LIST
46426: LIST
46427: PUSH
46428: LD_INT 1
46430: PUSH
46431: LD_INT 1
46433: NEG
46434: PUSH
46435: EMPTY
46436: LIST
46437: LIST
46438: PUSH
46439: LD_INT 2
46441: PUSH
46442: LD_INT 0
46444: PUSH
46445: EMPTY
46446: LIST
46447: LIST
46448: PUSH
46449: LD_INT 2
46451: PUSH
46452: LD_INT 1
46454: PUSH
46455: EMPTY
46456: LIST
46457: LIST
46458: PUSH
46459: LD_INT 2
46461: PUSH
46462: LD_INT 2
46464: PUSH
46465: EMPTY
46466: LIST
46467: LIST
46468: PUSH
46469: LD_INT 1
46471: PUSH
46472: LD_INT 2
46474: PUSH
46475: EMPTY
46476: LIST
46477: LIST
46478: PUSH
46479: LD_INT 0
46481: PUSH
46482: LD_INT 2
46484: PUSH
46485: EMPTY
46486: LIST
46487: LIST
46488: PUSH
46489: LD_INT 1
46491: NEG
46492: PUSH
46493: LD_INT 1
46495: PUSH
46496: EMPTY
46497: LIST
46498: LIST
46499: PUSH
46500: LD_INT 2
46502: NEG
46503: PUSH
46504: LD_INT 0
46506: PUSH
46507: EMPTY
46508: LIST
46509: LIST
46510: PUSH
46511: LD_INT 2
46513: NEG
46514: PUSH
46515: LD_INT 1
46517: NEG
46518: PUSH
46519: EMPTY
46520: LIST
46521: LIST
46522: PUSH
46523: LD_INT 2
46525: NEG
46526: PUSH
46527: LD_INT 2
46529: NEG
46530: PUSH
46531: EMPTY
46532: LIST
46533: LIST
46534: PUSH
46535: EMPTY
46536: LIST
46537: LIST
46538: LIST
46539: LIST
46540: LIST
46541: LIST
46542: LIST
46543: LIST
46544: LIST
46545: LIST
46546: LIST
46547: LIST
46548: LIST
46549: LIST
46550: LIST
46551: LIST
46552: LIST
46553: LIST
46554: LIST
46555: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46556: LD_ADDR_VAR 0 22
46560: PUSH
46561: LD_INT 0
46563: PUSH
46564: LD_INT 0
46566: PUSH
46567: EMPTY
46568: LIST
46569: LIST
46570: PUSH
46571: LD_INT 0
46573: PUSH
46574: LD_INT 1
46576: NEG
46577: PUSH
46578: EMPTY
46579: LIST
46580: LIST
46581: PUSH
46582: LD_INT 1
46584: PUSH
46585: LD_INT 0
46587: PUSH
46588: EMPTY
46589: LIST
46590: LIST
46591: PUSH
46592: LD_INT 1
46594: PUSH
46595: LD_INT 1
46597: PUSH
46598: EMPTY
46599: LIST
46600: LIST
46601: PUSH
46602: LD_INT 0
46604: PUSH
46605: LD_INT 1
46607: PUSH
46608: EMPTY
46609: LIST
46610: LIST
46611: PUSH
46612: LD_INT 1
46614: NEG
46615: PUSH
46616: LD_INT 0
46618: PUSH
46619: EMPTY
46620: LIST
46621: LIST
46622: PUSH
46623: LD_INT 1
46625: NEG
46626: PUSH
46627: LD_INT 1
46629: NEG
46630: PUSH
46631: EMPTY
46632: LIST
46633: LIST
46634: PUSH
46635: LD_INT 1
46637: NEG
46638: PUSH
46639: LD_INT 2
46641: NEG
46642: PUSH
46643: EMPTY
46644: LIST
46645: LIST
46646: PUSH
46647: LD_INT 0
46649: PUSH
46650: LD_INT 2
46652: NEG
46653: PUSH
46654: EMPTY
46655: LIST
46656: LIST
46657: PUSH
46658: LD_INT 1
46660: PUSH
46661: LD_INT 1
46663: NEG
46664: PUSH
46665: EMPTY
46666: LIST
46667: LIST
46668: PUSH
46669: LD_INT 2
46671: PUSH
46672: LD_INT 0
46674: PUSH
46675: EMPTY
46676: LIST
46677: LIST
46678: PUSH
46679: LD_INT 2
46681: PUSH
46682: LD_INT 1
46684: PUSH
46685: EMPTY
46686: LIST
46687: LIST
46688: PUSH
46689: LD_INT 2
46691: PUSH
46692: LD_INT 2
46694: PUSH
46695: EMPTY
46696: LIST
46697: LIST
46698: PUSH
46699: LD_INT 1
46701: PUSH
46702: LD_INT 2
46704: PUSH
46705: EMPTY
46706: LIST
46707: LIST
46708: PUSH
46709: LD_INT 0
46711: PUSH
46712: LD_INT 2
46714: PUSH
46715: EMPTY
46716: LIST
46717: LIST
46718: PUSH
46719: LD_INT 1
46721: NEG
46722: PUSH
46723: LD_INT 1
46725: PUSH
46726: EMPTY
46727: LIST
46728: LIST
46729: PUSH
46730: LD_INT 2
46732: NEG
46733: PUSH
46734: LD_INT 0
46736: PUSH
46737: EMPTY
46738: LIST
46739: LIST
46740: PUSH
46741: LD_INT 2
46743: NEG
46744: PUSH
46745: LD_INT 1
46747: NEG
46748: PUSH
46749: EMPTY
46750: LIST
46751: LIST
46752: PUSH
46753: LD_INT 2
46755: NEG
46756: PUSH
46757: LD_INT 2
46759: NEG
46760: PUSH
46761: EMPTY
46762: LIST
46763: LIST
46764: PUSH
46765: EMPTY
46766: LIST
46767: LIST
46768: LIST
46769: LIST
46770: LIST
46771: LIST
46772: LIST
46773: LIST
46774: LIST
46775: LIST
46776: LIST
46777: LIST
46778: LIST
46779: LIST
46780: LIST
46781: LIST
46782: LIST
46783: LIST
46784: LIST
46785: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
46786: LD_ADDR_VAR 0 23
46790: PUSH
46791: LD_INT 0
46793: PUSH
46794: LD_INT 0
46796: PUSH
46797: EMPTY
46798: LIST
46799: LIST
46800: PUSH
46801: LD_INT 0
46803: PUSH
46804: LD_INT 1
46806: NEG
46807: PUSH
46808: EMPTY
46809: LIST
46810: LIST
46811: PUSH
46812: LD_INT 1
46814: PUSH
46815: LD_INT 0
46817: PUSH
46818: EMPTY
46819: LIST
46820: LIST
46821: PUSH
46822: LD_INT 1
46824: PUSH
46825: LD_INT 1
46827: PUSH
46828: EMPTY
46829: LIST
46830: LIST
46831: PUSH
46832: LD_INT 0
46834: PUSH
46835: LD_INT 1
46837: PUSH
46838: EMPTY
46839: LIST
46840: LIST
46841: PUSH
46842: LD_INT 1
46844: NEG
46845: PUSH
46846: LD_INT 0
46848: PUSH
46849: EMPTY
46850: LIST
46851: LIST
46852: PUSH
46853: LD_INT 1
46855: NEG
46856: PUSH
46857: LD_INT 1
46859: NEG
46860: PUSH
46861: EMPTY
46862: LIST
46863: LIST
46864: PUSH
46865: LD_INT 1
46867: NEG
46868: PUSH
46869: LD_INT 2
46871: NEG
46872: PUSH
46873: EMPTY
46874: LIST
46875: LIST
46876: PUSH
46877: LD_INT 0
46879: PUSH
46880: LD_INT 2
46882: NEG
46883: PUSH
46884: EMPTY
46885: LIST
46886: LIST
46887: PUSH
46888: LD_INT 1
46890: PUSH
46891: LD_INT 1
46893: NEG
46894: PUSH
46895: EMPTY
46896: LIST
46897: LIST
46898: PUSH
46899: LD_INT 2
46901: PUSH
46902: LD_INT 0
46904: PUSH
46905: EMPTY
46906: LIST
46907: LIST
46908: PUSH
46909: LD_INT 2
46911: PUSH
46912: LD_INT 1
46914: PUSH
46915: EMPTY
46916: LIST
46917: LIST
46918: PUSH
46919: LD_INT 2
46921: PUSH
46922: LD_INT 2
46924: PUSH
46925: EMPTY
46926: LIST
46927: LIST
46928: PUSH
46929: LD_INT 1
46931: PUSH
46932: LD_INT 2
46934: PUSH
46935: EMPTY
46936: LIST
46937: LIST
46938: PUSH
46939: LD_INT 0
46941: PUSH
46942: LD_INT 2
46944: PUSH
46945: EMPTY
46946: LIST
46947: LIST
46948: PUSH
46949: LD_INT 1
46951: NEG
46952: PUSH
46953: LD_INT 1
46955: PUSH
46956: EMPTY
46957: LIST
46958: LIST
46959: PUSH
46960: LD_INT 2
46962: NEG
46963: PUSH
46964: LD_INT 0
46966: PUSH
46967: EMPTY
46968: LIST
46969: LIST
46970: PUSH
46971: LD_INT 2
46973: NEG
46974: PUSH
46975: LD_INT 1
46977: NEG
46978: PUSH
46979: EMPTY
46980: LIST
46981: LIST
46982: PUSH
46983: LD_INT 2
46985: NEG
46986: PUSH
46987: LD_INT 2
46989: NEG
46990: PUSH
46991: EMPTY
46992: LIST
46993: LIST
46994: PUSH
46995: LD_INT 2
46997: NEG
46998: PUSH
46999: LD_INT 3
47001: NEG
47002: PUSH
47003: EMPTY
47004: LIST
47005: LIST
47006: PUSH
47007: LD_INT 1
47009: NEG
47010: PUSH
47011: LD_INT 3
47013: NEG
47014: PUSH
47015: EMPTY
47016: LIST
47017: LIST
47018: PUSH
47019: LD_INT 1
47021: PUSH
47022: LD_INT 2
47024: NEG
47025: PUSH
47026: EMPTY
47027: LIST
47028: LIST
47029: PUSH
47030: LD_INT 2
47032: PUSH
47033: LD_INT 1
47035: NEG
47036: PUSH
47037: EMPTY
47038: LIST
47039: LIST
47040: PUSH
47041: EMPTY
47042: LIST
47043: LIST
47044: LIST
47045: LIST
47046: LIST
47047: LIST
47048: LIST
47049: LIST
47050: LIST
47051: LIST
47052: LIST
47053: LIST
47054: LIST
47055: LIST
47056: LIST
47057: LIST
47058: LIST
47059: LIST
47060: LIST
47061: LIST
47062: LIST
47063: LIST
47064: LIST
47065: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
47066: LD_ADDR_VAR 0 24
47070: PUSH
47071: LD_INT 0
47073: PUSH
47074: LD_INT 0
47076: PUSH
47077: EMPTY
47078: LIST
47079: LIST
47080: PUSH
47081: LD_INT 0
47083: PUSH
47084: LD_INT 1
47086: NEG
47087: PUSH
47088: EMPTY
47089: LIST
47090: LIST
47091: PUSH
47092: LD_INT 1
47094: PUSH
47095: LD_INT 0
47097: PUSH
47098: EMPTY
47099: LIST
47100: LIST
47101: PUSH
47102: LD_INT 1
47104: PUSH
47105: LD_INT 1
47107: PUSH
47108: EMPTY
47109: LIST
47110: LIST
47111: PUSH
47112: LD_INT 0
47114: PUSH
47115: LD_INT 1
47117: PUSH
47118: EMPTY
47119: LIST
47120: LIST
47121: PUSH
47122: LD_INT 1
47124: NEG
47125: PUSH
47126: LD_INT 0
47128: PUSH
47129: EMPTY
47130: LIST
47131: LIST
47132: PUSH
47133: LD_INT 1
47135: NEG
47136: PUSH
47137: LD_INT 1
47139: NEG
47140: PUSH
47141: EMPTY
47142: LIST
47143: LIST
47144: PUSH
47145: LD_INT 1
47147: NEG
47148: PUSH
47149: LD_INT 2
47151: NEG
47152: PUSH
47153: EMPTY
47154: LIST
47155: LIST
47156: PUSH
47157: LD_INT 0
47159: PUSH
47160: LD_INT 2
47162: NEG
47163: PUSH
47164: EMPTY
47165: LIST
47166: LIST
47167: PUSH
47168: LD_INT 1
47170: PUSH
47171: LD_INT 1
47173: NEG
47174: PUSH
47175: EMPTY
47176: LIST
47177: LIST
47178: PUSH
47179: LD_INT 2
47181: PUSH
47182: LD_INT 0
47184: PUSH
47185: EMPTY
47186: LIST
47187: LIST
47188: PUSH
47189: LD_INT 2
47191: PUSH
47192: LD_INT 1
47194: PUSH
47195: EMPTY
47196: LIST
47197: LIST
47198: PUSH
47199: LD_INT 2
47201: PUSH
47202: LD_INT 2
47204: PUSH
47205: EMPTY
47206: LIST
47207: LIST
47208: PUSH
47209: LD_INT 1
47211: PUSH
47212: LD_INT 2
47214: PUSH
47215: EMPTY
47216: LIST
47217: LIST
47218: PUSH
47219: LD_INT 0
47221: PUSH
47222: LD_INT 2
47224: PUSH
47225: EMPTY
47226: LIST
47227: LIST
47228: PUSH
47229: LD_INT 1
47231: NEG
47232: PUSH
47233: LD_INT 1
47235: PUSH
47236: EMPTY
47237: LIST
47238: LIST
47239: PUSH
47240: LD_INT 2
47242: NEG
47243: PUSH
47244: LD_INT 0
47246: PUSH
47247: EMPTY
47248: LIST
47249: LIST
47250: PUSH
47251: LD_INT 2
47253: NEG
47254: PUSH
47255: LD_INT 1
47257: NEG
47258: PUSH
47259: EMPTY
47260: LIST
47261: LIST
47262: PUSH
47263: LD_INT 2
47265: NEG
47266: PUSH
47267: LD_INT 2
47269: NEG
47270: PUSH
47271: EMPTY
47272: LIST
47273: LIST
47274: PUSH
47275: LD_INT 1
47277: PUSH
47278: LD_INT 2
47280: NEG
47281: PUSH
47282: EMPTY
47283: LIST
47284: LIST
47285: PUSH
47286: LD_INT 2
47288: PUSH
47289: LD_INT 1
47291: NEG
47292: PUSH
47293: EMPTY
47294: LIST
47295: LIST
47296: PUSH
47297: LD_INT 3
47299: PUSH
47300: LD_INT 1
47302: PUSH
47303: EMPTY
47304: LIST
47305: LIST
47306: PUSH
47307: LD_INT 3
47309: PUSH
47310: LD_INT 2
47312: PUSH
47313: EMPTY
47314: LIST
47315: LIST
47316: PUSH
47317: EMPTY
47318: LIST
47319: LIST
47320: LIST
47321: LIST
47322: LIST
47323: LIST
47324: LIST
47325: LIST
47326: LIST
47327: LIST
47328: LIST
47329: LIST
47330: LIST
47331: LIST
47332: LIST
47333: LIST
47334: LIST
47335: LIST
47336: LIST
47337: LIST
47338: LIST
47339: LIST
47340: LIST
47341: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
47342: LD_ADDR_VAR 0 25
47346: PUSH
47347: LD_INT 0
47349: PUSH
47350: LD_INT 0
47352: PUSH
47353: EMPTY
47354: LIST
47355: LIST
47356: PUSH
47357: LD_INT 0
47359: PUSH
47360: LD_INT 1
47362: NEG
47363: PUSH
47364: EMPTY
47365: LIST
47366: LIST
47367: PUSH
47368: LD_INT 1
47370: PUSH
47371: LD_INT 0
47373: PUSH
47374: EMPTY
47375: LIST
47376: LIST
47377: PUSH
47378: LD_INT 1
47380: PUSH
47381: LD_INT 1
47383: PUSH
47384: EMPTY
47385: LIST
47386: LIST
47387: PUSH
47388: LD_INT 0
47390: PUSH
47391: LD_INT 1
47393: PUSH
47394: EMPTY
47395: LIST
47396: LIST
47397: PUSH
47398: LD_INT 1
47400: NEG
47401: PUSH
47402: LD_INT 0
47404: PUSH
47405: EMPTY
47406: LIST
47407: LIST
47408: PUSH
47409: LD_INT 1
47411: NEG
47412: PUSH
47413: LD_INT 1
47415: NEG
47416: PUSH
47417: EMPTY
47418: LIST
47419: LIST
47420: PUSH
47421: LD_INT 1
47423: NEG
47424: PUSH
47425: LD_INT 2
47427: NEG
47428: PUSH
47429: EMPTY
47430: LIST
47431: LIST
47432: PUSH
47433: LD_INT 0
47435: PUSH
47436: LD_INT 2
47438: NEG
47439: PUSH
47440: EMPTY
47441: LIST
47442: LIST
47443: PUSH
47444: LD_INT 1
47446: PUSH
47447: LD_INT 1
47449: NEG
47450: PUSH
47451: EMPTY
47452: LIST
47453: LIST
47454: PUSH
47455: LD_INT 2
47457: PUSH
47458: LD_INT 0
47460: PUSH
47461: EMPTY
47462: LIST
47463: LIST
47464: PUSH
47465: LD_INT 2
47467: PUSH
47468: LD_INT 1
47470: PUSH
47471: EMPTY
47472: LIST
47473: LIST
47474: PUSH
47475: LD_INT 2
47477: PUSH
47478: LD_INT 2
47480: PUSH
47481: EMPTY
47482: LIST
47483: LIST
47484: PUSH
47485: LD_INT 1
47487: PUSH
47488: LD_INT 2
47490: PUSH
47491: EMPTY
47492: LIST
47493: LIST
47494: PUSH
47495: LD_INT 0
47497: PUSH
47498: LD_INT 2
47500: PUSH
47501: EMPTY
47502: LIST
47503: LIST
47504: PUSH
47505: LD_INT 1
47507: NEG
47508: PUSH
47509: LD_INT 1
47511: PUSH
47512: EMPTY
47513: LIST
47514: LIST
47515: PUSH
47516: LD_INT 2
47518: NEG
47519: PUSH
47520: LD_INT 0
47522: PUSH
47523: EMPTY
47524: LIST
47525: LIST
47526: PUSH
47527: LD_INT 2
47529: NEG
47530: PUSH
47531: LD_INT 1
47533: NEG
47534: PUSH
47535: EMPTY
47536: LIST
47537: LIST
47538: PUSH
47539: LD_INT 2
47541: NEG
47542: PUSH
47543: LD_INT 2
47545: NEG
47546: PUSH
47547: EMPTY
47548: LIST
47549: LIST
47550: PUSH
47551: LD_INT 3
47553: PUSH
47554: LD_INT 1
47556: PUSH
47557: EMPTY
47558: LIST
47559: LIST
47560: PUSH
47561: LD_INT 3
47563: PUSH
47564: LD_INT 2
47566: PUSH
47567: EMPTY
47568: LIST
47569: LIST
47570: PUSH
47571: LD_INT 2
47573: PUSH
47574: LD_INT 3
47576: PUSH
47577: EMPTY
47578: LIST
47579: LIST
47580: PUSH
47581: LD_INT 1
47583: PUSH
47584: LD_INT 3
47586: PUSH
47587: EMPTY
47588: LIST
47589: LIST
47590: PUSH
47591: EMPTY
47592: LIST
47593: LIST
47594: LIST
47595: LIST
47596: LIST
47597: LIST
47598: LIST
47599: LIST
47600: LIST
47601: LIST
47602: LIST
47603: LIST
47604: LIST
47605: LIST
47606: LIST
47607: LIST
47608: LIST
47609: LIST
47610: LIST
47611: LIST
47612: LIST
47613: LIST
47614: LIST
47615: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
47616: LD_ADDR_VAR 0 26
47620: PUSH
47621: LD_INT 0
47623: PUSH
47624: LD_INT 0
47626: PUSH
47627: EMPTY
47628: LIST
47629: LIST
47630: PUSH
47631: LD_INT 0
47633: PUSH
47634: LD_INT 1
47636: NEG
47637: PUSH
47638: EMPTY
47639: LIST
47640: LIST
47641: PUSH
47642: LD_INT 1
47644: PUSH
47645: LD_INT 0
47647: PUSH
47648: EMPTY
47649: LIST
47650: LIST
47651: PUSH
47652: LD_INT 1
47654: PUSH
47655: LD_INT 1
47657: PUSH
47658: EMPTY
47659: LIST
47660: LIST
47661: PUSH
47662: LD_INT 0
47664: PUSH
47665: LD_INT 1
47667: PUSH
47668: EMPTY
47669: LIST
47670: LIST
47671: PUSH
47672: LD_INT 1
47674: NEG
47675: PUSH
47676: LD_INT 0
47678: PUSH
47679: EMPTY
47680: LIST
47681: LIST
47682: PUSH
47683: LD_INT 1
47685: NEG
47686: PUSH
47687: LD_INT 1
47689: NEG
47690: PUSH
47691: EMPTY
47692: LIST
47693: LIST
47694: PUSH
47695: LD_INT 1
47697: NEG
47698: PUSH
47699: LD_INT 2
47701: NEG
47702: PUSH
47703: EMPTY
47704: LIST
47705: LIST
47706: PUSH
47707: LD_INT 0
47709: PUSH
47710: LD_INT 2
47712: NEG
47713: PUSH
47714: EMPTY
47715: LIST
47716: LIST
47717: PUSH
47718: LD_INT 1
47720: PUSH
47721: LD_INT 1
47723: NEG
47724: PUSH
47725: EMPTY
47726: LIST
47727: LIST
47728: PUSH
47729: LD_INT 2
47731: PUSH
47732: LD_INT 0
47734: PUSH
47735: EMPTY
47736: LIST
47737: LIST
47738: PUSH
47739: LD_INT 2
47741: PUSH
47742: LD_INT 1
47744: PUSH
47745: EMPTY
47746: LIST
47747: LIST
47748: PUSH
47749: LD_INT 2
47751: PUSH
47752: LD_INT 2
47754: PUSH
47755: EMPTY
47756: LIST
47757: LIST
47758: PUSH
47759: LD_INT 1
47761: PUSH
47762: LD_INT 2
47764: PUSH
47765: EMPTY
47766: LIST
47767: LIST
47768: PUSH
47769: LD_INT 0
47771: PUSH
47772: LD_INT 2
47774: PUSH
47775: EMPTY
47776: LIST
47777: LIST
47778: PUSH
47779: LD_INT 1
47781: NEG
47782: PUSH
47783: LD_INT 1
47785: PUSH
47786: EMPTY
47787: LIST
47788: LIST
47789: PUSH
47790: LD_INT 2
47792: NEG
47793: PUSH
47794: LD_INT 0
47796: PUSH
47797: EMPTY
47798: LIST
47799: LIST
47800: PUSH
47801: LD_INT 2
47803: NEG
47804: PUSH
47805: LD_INT 1
47807: NEG
47808: PUSH
47809: EMPTY
47810: LIST
47811: LIST
47812: PUSH
47813: LD_INT 2
47815: NEG
47816: PUSH
47817: LD_INT 2
47819: NEG
47820: PUSH
47821: EMPTY
47822: LIST
47823: LIST
47824: PUSH
47825: LD_INT 2
47827: PUSH
47828: LD_INT 3
47830: PUSH
47831: EMPTY
47832: LIST
47833: LIST
47834: PUSH
47835: LD_INT 1
47837: PUSH
47838: LD_INT 3
47840: PUSH
47841: EMPTY
47842: LIST
47843: LIST
47844: PUSH
47845: LD_INT 1
47847: NEG
47848: PUSH
47849: LD_INT 2
47851: PUSH
47852: EMPTY
47853: LIST
47854: LIST
47855: PUSH
47856: LD_INT 2
47858: NEG
47859: PUSH
47860: LD_INT 1
47862: PUSH
47863: EMPTY
47864: LIST
47865: LIST
47866: PUSH
47867: EMPTY
47868: LIST
47869: LIST
47870: LIST
47871: LIST
47872: LIST
47873: LIST
47874: LIST
47875: LIST
47876: LIST
47877: LIST
47878: LIST
47879: LIST
47880: LIST
47881: LIST
47882: LIST
47883: LIST
47884: LIST
47885: LIST
47886: LIST
47887: LIST
47888: LIST
47889: LIST
47890: LIST
47891: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47892: LD_ADDR_VAR 0 27
47896: PUSH
47897: LD_INT 0
47899: PUSH
47900: LD_INT 0
47902: PUSH
47903: EMPTY
47904: LIST
47905: LIST
47906: PUSH
47907: LD_INT 0
47909: PUSH
47910: LD_INT 1
47912: NEG
47913: PUSH
47914: EMPTY
47915: LIST
47916: LIST
47917: PUSH
47918: LD_INT 1
47920: PUSH
47921: LD_INT 0
47923: PUSH
47924: EMPTY
47925: LIST
47926: LIST
47927: PUSH
47928: LD_INT 1
47930: PUSH
47931: LD_INT 1
47933: PUSH
47934: EMPTY
47935: LIST
47936: LIST
47937: PUSH
47938: LD_INT 0
47940: PUSH
47941: LD_INT 1
47943: PUSH
47944: EMPTY
47945: LIST
47946: LIST
47947: PUSH
47948: LD_INT 1
47950: NEG
47951: PUSH
47952: LD_INT 0
47954: PUSH
47955: EMPTY
47956: LIST
47957: LIST
47958: PUSH
47959: LD_INT 1
47961: NEG
47962: PUSH
47963: LD_INT 1
47965: NEG
47966: PUSH
47967: EMPTY
47968: LIST
47969: LIST
47970: PUSH
47971: LD_INT 1
47973: NEG
47974: PUSH
47975: LD_INT 2
47977: NEG
47978: PUSH
47979: EMPTY
47980: LIST
47981: LIST
47982: PUSH
47983: LD_INT 0
47985: PUSH
47986: LD_INT 2
47988: NEG
47989: PUSH
47990: EMPTY
47991: LIST
47992: LIST
47993: PUSH
47994: LD_INT 1
47996: PUSH
47997: LD_INT 1
47999: NEG
48000: PUSH
48001: EMPTY
48002: LIST
48003: LIST
48004: PUSH
48005: LD_INT 2
48007: PUSH
48008: LD_INT 0
48010: PUSH
48011: EMPTY
48012: LIST
48013: LIST
48014: PUSH
48015: LD_INT 2
48017: PUSH
48018: LD_INT 1
48020: PUSH
48021: EMPTY
48022: LIST
48023: LIST
48024: PUSH
48025: LD_INT 2
48027: PUSH
48028: LD_INT 2
48030: PUSH
48031: EMPTY
48032: LIST
48033: LIST
48034: PUSH
48035: LD_INT 1
48037: PUSH
48038: LD_INT 2
48040: PUSH
48041: EMPTY
48042: LIST
48043: LIST
48044: PUSH
48045: LD_INT 0
48047: PUSH
48048: LD_INT 2
48050: PUSH
48051: EMPTY
48052: LIST
48053: LIST
48054: PUSH
48055: LD_INT 1
48057: NEG
48058: PUSH
48059: LD_INT 1
48061: PUSH
48062: EMPTY
48063: LIST
48064: LIST
48065: PUSH
48066: LD_INT 2
48068: NEG
48069: PUSH
48070: LD_INT 0
48072: PUSH
48073: EMPTY
48074: LIST
48075: LIST
48076: PUSH
48077: LD_INT 2
48079: NEG
48080: PUSH
48081: LD_INT 1
48083: NEG
48084: PUSH
48085: EMPTY
48086: LIST
48087: LIST
48088: PUSH
48089: LD_INT 2
48091: NEG
48092: PUSH
48093: LD_INT 2
48095: NEG
48096: PUSH
48097: EMPTY
48098: LIST
48099: LIST
48100: PUSH
48101: LD_INT 1
48103: NEG
48104: PUSH
48105: LD_INT 2
48107: PUSH
48108: EMPTY
48109: LIST
48110: LIST
48111: PUSH
48112: LD_INT 2
48114: NEG
48115: PUSH
48116: LD_INT 1
48118: PUSH
48119: EMPTY
48120: LIST
48121: LIST
48122: PUSH
48123: LD_INT 3
48125: NEG
48126: PUSH
48127: LD_INT 1
48129: NEG
48130: PUSH
48131: EMPTY
48132: LIST
48133: LIST
48134: PUSH
48135: LD_INT 3
48137: NEG
48138: PUSH
48139: LD_INT 2
48141: NEG
48142: PUSH
48143: EMPTY
48144: LIST
48145: LIST
48146: PUSH
48147: EMPTY
48148: LIST
48149: LIST
48150: LIST
48151: LIST
48152: LIST
48153: LIST
48154: LIST
48155: LIST
48156: LIST
48157: LIST
48158: LIST
48159: LIST
48160: LIST
48161: LIST
48162: LIST
48163: LIST
48164: LIST
48165: LIST
48166: LIST
48167: LIST
48168: LIST
48169: LIST
48170: LIST
48171: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48172: LD_ADDR_VAR 0 28
48176: PUSH
48177: LD_INT 0
48179: PUSH
48180: LD_INT 0
48182: PUSH
48183: EMPTY
48184: LIST
48185: LIST
48186: PUSH
48187: LD_INT 0
48189: PUSH
48190: LD_INT 1
48192: NEG
48193: PUSH
48194: EMPTY
48195: LIST
48196: LIST
48197: PUSH
48198: LD_INT 1
48200: PUSH
48201: LD_INT 0
48203: PUSH
48204: EMPTY
48205: LIST
48206: LIST
48207: PUSH
48208: LD_INT 1
48210: PUSH
48211: LD_INT 1
48213: PUSH
48214: EMPTY
48215: LIST
48216: LIST
48217: PUSH
48218: LD_INT 0
48220: PUSH
48221: LD_INT 1
48223: PUSH
48224: EMPTY
48225: LIST
48226: LIST
48227: PUSH
48228: LD_INT 1
48230: NEG
48231: PUSH
48232: LD_INT 0
48234: PUSH
48235: EMPTY
48236: LIST
48237: LIST
48238: PUSH
48239: LD_INT 1
48241: NEG
48242: PUSH
48243: LD_INT 1
48245: NEG
48246: PUSH
48247: EMPTY
48248: LIST
48249: LIST
48250: PUSH
48251: LD_INT 1
48253: NEG
48254: PUSH
48255: LD_INT 2
48257: NEG
48258: PUSH
48259: EMPTY
48260: LIST
48261: LIST
48262: PUSH
48263: LD_INT 0
48265: PUSH
48266: LD_INT 2
48268: NEG
48269: PUSH
48270: EMPTY
48271: LIST
48272: LIST
48273: PUSH
48274: LD_INT 1
48276: PUSH
48277: LD_INT 1
48279: NEG
48280: PUSH
48281: EMPTY
48282: LIST
48283: LIST
48284: PUSH
48285: LD_INT 2
48287: PUSH
48288: LD_INT 0
48290: PUSH
48291: EMPTY
48292: LIST
48293: LIST
48294: PUSH
48295: LD_INT 2
48297: PUSH
48298: LD_INT 1
48300: PUSH
48301: EMPTY
48302: LIST
48303: LIST
48304: PUSH
48305: LD_INT 2
48307: PUSH
48308: LD_INT 2
48310: PUSH
48311: EMPTY
48312: LIST
48313: LIST
48314: PUSH
48315: LD_INT 1
48317: PUSH
48318: LD_INT 2
48320: PUSH
48321: EMPTY
48322: LIST
48323: LIST
48324: PUSH
48325: LD_INT 0
48327: PUSH
48328: LD_INT 2
48330: PUSH
48331: EMPTY
48332: LIST
48333: LIST
48334: PUSH
48335: LD_INT 1
48337: NEG
48338: PUSH
48339: LD_INT 1
48341: PUSH
48342: EMPTY
48343: LIST
48344: LIST
48345: PUSH
48346: LD_INT 2
48348: NEG
48349: PUSH
48350: LD_INT 0
48352: PUSH
48353: EMPTY
48354: LIST
48355: LIST
48356: PUSH
48357: LD_INT 2
48359: NEG
48360: PUSH
48361: LD_INT 1
48363: NEG
48364: PUSH
48365: EMPTY
48366: LIST
48367: LIST
48368: PUSH
48369: LD_INT 2
48371: NEG
48372: PUSH
48373: LD_INT 2
48375: NEG
48376: PUSH
48377: EMPTY
48378: LIST
48379: LIST
48380: PUSH
48381: LD_INT 2
48383: NEG
48384: PUSH
48385: LD_INT 3
48387: NEG
48388: PUSH
48389: EMPTY
48390: LIST
48391: LIST
48392: PUSH
48393: LD_INT 1
48395: NEG
48396: PUSH
48397: LD_INT 3
48399: NEG
48400: PUSH
48401: EMPTY
48402: LIST
48403: LIST
48404: PUSH
48405: LD_INT 3
48407: NEG
48408: PUSH
48409: LD_INT 1
48411: NEG
48412: PUSH
48413: EMPTY
48414: LIST
48415: LIST
48416: PUSH
48417: LD_INT 3
48419: NEG
48420: PUSH
48421: LD_INT 2
48423: NEG
48424: PUSH
48425: EMPTY
48426: LIST
48427: LIST
48428: PUSH
48429: EMPTY
48430: LIST
48431: LIST
48432: LIST
48433: LIST
48434: LIST
48435: LIST
48436: LIST
48437: LIST
48438: LIST
48439: LIST
48440: LIST
48441: LIST
48442: LIST
48443: LIST
48444: LIST
48445: LIST
48446: LIST
48447: LIST
48448: LIST
48449: LIST
48450: LIST
48451: LIST
48452: LIST
48453: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48454: LD_ADDR_VAR 0 29
48458: PUSH
48459: LD_INT 0
48461: PUSH
48462: LD_INT 0
48464: PUSH
48465: EMPTY
48466: LIST
48467: LIST
48468: PUSH
48469: LD_INT 0
48471: PUSH
48472: LD_INT 1
48474: NEG
48475: PUSH
48476: EMPTY
48477: LIST
48478: LIST
48479: PUSH
48480: LD_INT 1
48482: PUSH
48483: LD_INT 0
48485: PUSH
48486: EMPTY
48487: LIST
48488: LIST
48489: PUSH
48490: LD_INT 1
48492: PUSH
48493: LD_INT 1
48495: PUSH
48496: EMPTY
48497: LIST
48498: LIST
48499: PUSH
48500: LD_INT 0
48502: PUSH
48503: LD_INT 1
48505: PUSH
48506: EMPTY
48507: LIST
48508: LIST
48509: PUSH
48510: LD_INT 1
48512: NEG
48513: PUSH
48514: LD_INT 0
48516: PUSH
48517: EMPTY
48518: LIST
48519: LIST
48520: PUSH
48521: LD_INT 1
48523: NEG
48524: PUSH
48525: LD_INT 1
48527: NEG
48528: PUSH
48529: EMPTY
48530: LIST
48531: LIST
48532: PUSH
48533: LD_INT 1
48535: NEG
48536: PUSH
48537: LD_INT 2
48539: NEG
48540: PUSH
48541: EMPTY
48542: LIST
48543: LIST
48544: PUSH
48545: LD_INT 0
48547: PUSH
48548: LD_INT 2
48550: NEG
48551: PUSH
48552: EMPTY
48553: LIST
48554: LIST
48555: PUSH
48556: LD_INT 1
48558: PUSH
48559: LD_INT 1
48561: NEG
48562: PUSH
48563: EMPTY
48564: LIST
48565: LIST
48566: PUSH
48567: LD_INT 2
48569: PUSH
48570: LD_INT 0
48572: PUSH
48573: EMPTY
48574: LIST
48575: LIST
48576: PUSH
48577: LD_INT 2
48579: PUSH
48580: LD_INT 1
48582: PUSH
48583: EMPTY
48584: LIST
48585: LIST
48586: PUSH
48587: LD_INT 1
48589: PUSH
48590: LD_INT 2
48592: PUSH
48593: EMPTY
48594: LIST
48595: LIST
48596: PUSH
48597: LD_INT 0
48599: PUSH
48600: LD_INT 2
48602: PUSH
48603: EMPTY
48604: LIST
48605: LIST
48606: PUSH
48607: LD_INT 1
48609: NEG
48610: PUSH
48611: LD_INT 1
48613: PUSH
48614: EMPTY
48615: LIST
48616: LIST
48617: PUSH
48618: LD_INT 2
48620: NEG
48621: PUSH
48622: LD_INT 1
48624: NEG
48625: PUSH
48626: EMPTY
48627: LIST
48628: LIST
48629: PUSH
48630: LD_INT 2
48632: NEG
48633: PUSH
48634: LD_INT 2
48636: NEG
48637: PUSH
48638: EMPTY
48639: LIST
48640: LIST
48641: PUSH
48642: LD_INT 2
48644: NEG
48645: PUSH
48646: LD_INT 3
48648: NEG
48649: PUSH
48650: EMPTY
48651: LIST
48652: LIST
48653: PUSH
48654: LD_INT 2
48656: PUSH
48657: LD_INT 1
48659: NEG
48660: PUSH
48661: EMPTY
48662: LIST
48663: LIST
48664: PUSH
48665: LD_INT 3
48667: PUSH
48668: LD_INT 1
48670: PUSH
48671: EMPTY
48672: LIST
48673: LIST
48674: PUSH
48675: LD_INT 1
48677: PUSH
48678: LD_INT 3
48680: PUSH
48681: EMPTY
48682: LIST
48683: LIST
48684: PUSH
48685: LD_INT 1
48687: NEG
48688: PUSH
48689: LD_INT 2
48691: PUSH
48692: EMPTY
48693: LIST
48694: LIST
48695: PUSH
48696: LD_INT 3
48698: NEG
48699: PUSH
48700: LD_INT 2
48702: NEG
48703: PUSH
48704: EMPTY
48705: LIST
48706: LIST
48707: PUSH
48708: EMPTY
48709: LIST
48710: LIST
48711: LIST
48712: LIST
48713: LIST
48714: LIST
48715: LIST
48716: LIST
48717: LIST
48718: LIST
48719: LIST
48720: LIST
48721: LIST
48722: LIST
48723: LIST
48724: LIST
48725: LIST
48726: LIST
48727: LIST
48728: LIST
48729: LIST
48730: LIST
48731: LIST
48732: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48733: LD_ADDR_VAR 0 30
48737: PUSH
48738: LD_INT 0
48740: PUSH
48741: LD_INT 0
48743: PUSH
48744: EMPTY
48745: LIST
48746: LIST
48747: PUSH
48748: LD_INT 0
48750: PUSH
48751: LD_INT 1
48753: NEG
48754: PUSH
48755: EMPTY
48756: LIST
48757: LIST
48758: PUSH
48759: LD_INT 1
48761: PUSH
48762: LD_INT 0
48764: PUSH
48765: EMPTY
48766: LIST
48767: LIST
48768: PUSH
48769: LD_INT 1
48771: PUSH
48772: LD_INT 1
48774: PUSH
48775: EMPTY
48776: LIST
48777: LIST
48778: PUSH
48779: LD_INT 0
48781: PUSH
48782: LD_INT 1
48784: PUSH
48785: EMPTY
48786: LIST
48787: LIST
48788: PUSH
48789: LD_INT 1
48791: NEG
48792: PUSH
48793: LD_INT 0
48795: PUSH
48796: EMPTY
48797: LIST
48798: LIST
48799: PUSH
48800: LD_INT 1
48802: NEG
48803: PUSH
48804: LD_INT 1
48806: NEG
48807: PUSH
48808: EMPTY
48809: LIST
48810: LIST
48811: PUSH
48812: LD_INT 1
48814: NEG
48815: PUSH
48816: LD_INT 2
48818: NEG
48819: PUSH
48820: EMPTY
48821: LIST
48822: LIST
48823: PUSH
48824: LD_INT 0
48826: PUSH
48827: LD_INT 2
48829: NEG
48830: PUSH
48831: EMPTY
48832: LIST
48833: LIST
48834: PUSH
48835: LD_INT 1
48837: PUSH
48838: LD_INT 1
48840: NEG
48841: PUSH
48842: EMPTY
48843: LIST
48844: LIST
48845: PUSH
48846: LD_INT 2
48848: PUSH
48849: LD_INT 0
48851: PUSH
48852: EMPTY
48853: LIST
48854: LIST
48855: PUSH
48856: LD_INT 2
48858: PUSH
48859: LD_INT 1
48861: PUSH
48862: EMPTY
48863: LIST
48864: LIST
48865: PUSH
48866: LD_INT 2
48868: PUSH
48869: LD_INT 2
48871: PUSH
48872: EMPTY
48873: LIST
48874: LIST
48875: PUSH
48876: LD_INT 1
48878: PUSH
48879: LD_INT 2
48881: PUSH
48882: EMPTY
48883: LIST
48884: LIST
48885: PUSH
48886: LD_INT 1
48888: NEG
48889: PUSH
48890: LD_INT 1
48892: PUSH
48893: EMPTY
48894: LIST
48895: LIST
48896: PUSH
48897: LD_INT 2
48899: NEG
48900: PUSH
48901: LD_INT 0
48903: PUSH
48904: EMPTY
48905: LIST
48906: LIST
48907: PUSH
48908: LD_INT 2
48910: NEG
48911: PUSH
48912: LD_INT 1
48914: NEG
48915: PUSH
48916: EMPTY
48917: LIST
48918: LIST
48919: PUSH
48920: LD_INT 1
48922: NEG
48923: PUSH
48924: LD_INT 3
48926: NEG
48927: PUSH
48928: EMPTY
48929: LIST
48930: LIST
48931: PUSH
48932: LD_INT 1
48934: PUSH
48935: LD_INT 2
48937: NEG
48938: PUSH
48939: EMPTY
48940: LIST
48941: LIST
48942: PUSH
48943: LD_INT 3
48945: PUSH
48946: LD_INT 2
48948: PUSH
48949: EMPTY
48950: LIST
48951: LIST
48952: PUSH
48953: LD_INT 2
48955: PUSH
48956: LD_INT 3
48958: PUSH
48959: EMPTY
48960: LIST
48961: LIST
48962: PUSH
48963: LD_INT 2
48965: NEG
48966: PUSH
48967: LD_INT 1
48969: PUSH
48970: EMPTY
48971: LIST
48972: LIST
48973: PUSH
48974: LD_INT 3
48976: NEG
48977: PUSH
48978: LD_INT 1
48980: NEG
48981: PUSH
48982: EMPTY
48983: LIST
48984: LIST
48985: PUSH
48986: EMPTY
48987: LIST
48988: LIST
48989: LIST
48990: LIST
48991: LIST
48992: LIST
48993: LIST
48994: LIST
48995: LIST
48996: LIST
48997: LIST
48998: LIST
48999: LIST
49000: LIST
49001: LIST
49002: LIST
49003: LIST
49004: LIST
49005: LIST
49006: LIST
49007: LIST
49008: LIST
49009: LIST
49010: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49011: LD_ADDR_VAR 0 31
49015: PUSH
49016: LD_INT 0
49018: PUSH
49019: LD_INT 0
49021: PUSH
49022: EMPTY
49023: LIST
49024: LIST
49025: PUSH
49026: LD_INT 0
49028: PUSH
49029: LD_INT 1
49031: NEG
49032: PUSH
49033: EMPTY
49034: LIST
49035: LIST
49036: PUSH
49037: LD_INT 1
49039: PUSH
49040: LD_INT 0
49042: PUSH
49043: EMPTY
49044: LIST
49045: LIST
49046: PUSH
49047: LD_INT 1
49049: PUSH
49050: LD_INT 1
49052: PUSH
49053: EMPTY
49054: LIST
49055: LIST
49056: PUSH
49057: LD_INT 0
49059: PUSH
49060: LD_INT 1
49062: PUSH
49063: EMPTY
49064: LIST
49065: LIST
49066: PUSH
49067: LD_INT 1
49069: NEG
49070: PUSH
49071: LD_INT 0
49073: PUSH
49074: EMPTY
49075: LIST
49076: LIST
49077: PUSH
49078: LD_INT 1
49080: NEG
49081: PUSH
49082: LD_INT 1
49084: NEG
49085: PUSH
49086: EMPTY
49087: LIST
49088: LIST
49089: PUSH
49090: LD_INT 1
49092: NEG
49093: PUSH
49094: LD_INT 2
49096: NEG
49097: PUSH
49098: EMPTY
49099: LIST
49100: LIST
49101: PUSH
49102: LD_INT 1
49104: PUSH
49105: LD_INT 1
49107: NEG
49108: PUSH
49109: EMPTY
49110: LIST
49111: LIST
49112: PUSH
49113: LD_INT 2
49115: PUSH
49116: LD_INT 0
49118: PUSH
49119: EMPTY
49120: LIST
49121: LIST
49122: PUSH
49123: LD_INT 2
49125: PUSH
49126: LD_INT 1
49128: PUSH
49129: EMPTY
49130: LIST
49131: LIST
49132: PUSH
49133: LD_INT 2
49135: PUSH
49136: LD_INT 2
49138: PUSH
49139: EMPTY
49140: LIST
49141: LIST
49142: PUSH
49143: LD_INT 1
49145: PUSH
49146: LD_INT 2
49148: PUSH
49149: EMPTY
49150: LIST
49151: LIST
49152: PUSH
49153: LD_INT 0
49155: PUSH
49156: LD_INT 2
49158: PUSH
49159: EMPTY
49160: LIST
49161: LIST
49162: PUSH
49163: LD_INT 1
49165: NEG
49166: PUSH
49167: LD_INT 1
49169: PUSH
49170: EMPTY
49171: LIST
49172: LIST
49173: PUSH
49174: LD_INT 2
49176: NEG
49177: PUSH
49178: LD_INT 1
49180: NEG
49181: PUSH
49182: EMPTY
49183: LIST
49184: LIST
49185: PUSH
49186: LD_INT 2
49188: NEG
49189: PUSH
49190: LD_INT 2
49192: NEG
49193: PUSH
49194: EMPTY
49195: LIST
49196: LIST
49197: PUSH
49198: LD_INT 2
49200: NEG
49201: PUSH
49202: LD_INT 3
49204: NEG
49205: PUSH
49206: EMPTY
49207: LIST
49208: LIST
49209: PUSH
49210: LD_INT 2
49212: PUSH
49213: LD_INT 1
49215: NEG
49216: PUSH
49217: EMPTY
49218: LIST
49219: LIST
49220: PUSH
49221: LD_INT 3
49223: PUSH
49224: LD_INT 1
49226: PUSH
49227: EMPTY
49228: LIST
49229: LIST
49230: PUSH
49231: LD_INT 1
49233: PUSH
49234: LD_INT 3
49236: PUSH
49237: EMPTY
49238: LIST
49239: LIST
49240: PUSH
49241: LD_INT 1
49243: NEG
49244: PUSH
49245: LD_INT 2
49247: PUSH
49248: EMPTY
49249: LIST
49250: LIST
49251: PUSH
49252: LD_INT 3
49254: NEG
49255: PUSH
49256: LD_INT 2
49258: NEG
49259: PUSH
49260: EMPTY
49261: LIST
49262: LIST
49263: PUSH
49264: EMPTY
49265: LIST
49266: LIST
49267: LIST
49268: LIST
49269: LIST
49270: LIST
49271: LIST
49272: LIST
49273: LIST
49274: LIST
49275: LIST
49276: LIST
49277: LIST
49278: LIST
49279: LIST
49280: LIST
49281: LIST
49282: LIST
49283: LIST
49284: LIST
49285: LIST
49286: LIST
49287: LIST
49288: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49289: LD_ADDR_VAR 0 32
49293: PUSH
49294: LD_INT 0
49296: PUSH
49297: LD_INT 0
49299: PUSH
49300: EMPTY
49301: LIST
49302: LIST
49303: PUSH
49304: LD_INT 0
49306: PUSH
49307: LD_INT 1
49309: NEG
49310: PUSH
49311: EMPTY
49312: LIST
49313: LIST
49314: PUSH
49315: LD_INT 1
49317: PUSH
49318: LD_INT 0
49320: PUSH
49321: EMPTY
49322: LIST
49323: LIST
49324: PUSH
49325: LD_INT 1
49327: PUSH
49328: LD_INT 1
49330: PUSH
49331: EMPTY
49332: LIST
49333: LIST
49334: PUSH
49335: LD_INT 0
49337: PUSH
49338: LD_INT 1
49340: PUSH
49341: EMPTY
49342: LIST
49343: LIST
49344: PUSH
49345: LD_INT 1
49347: NEG
49348: PUSH
49349: LD_INT 0
49351: PUSH
49352: EMPTY
49353: LIST
49354: LIST
49355: PUSH
49356: LD_INT 1
49358: NEG
49359: PUSH
49360: LD_INT 1
49362: NEG
49363: PUSH
49364: EMPTY
49365: LIST
49366: LIST
49367: PUSH
49368: LD_INT 1
49370: NEG
49371: PUSH
49372: LD_INT 2
49374: NEG
49375: PUSH
49376: EMPTY
49377: LIST
49378: LIST
49379: PUSH
49380: LD_INT 0
49382: PUSH
49383: LD_INT 2
49385: NEG
49386: PUSH
49387: EMPTY
49388: LIST
49389: LIST
49390: PUSH
49391: LD_INT 1
49393: PUSH
49394: LD_INT 1
49396: NEG
49397: PUSH
49398: EMPTY
49399: LIST
49400: LIST
49401: PUSH
49402: LD_INT 2
49404: PUSH
49405: LD_INT 1
49407: PUSH
49408: EMPTY
49409: LIST
49410: LIST
49411: PUSH
49412: LD_INT 2
49414: PUSH
49415: LD_INT 2
49417: PUSH
49418: EMPTY
49419: LIST
49420: LIST
49421: PUSH
49422: LD_INT 1
49424: PUSH
49425: LD_INT 2
49427: PUSH
49428: EMPTY
49429: LIST
49430: LIST
49431: PUSH
49432: LD_INT 0
49434: PUSH
49435: LD_INT 2
49437: PUSH
49438: EMPTY
49439: LIST
49440: LIST
49441: PUSH
49442: LD_INT 1
49444: NEG
49445: PUSH
49446: LD_INT 1
49448: PUSH
49449: EMPTY
49450: LIST
49451: LIST
49452: PUSH
49453: LD_INT 2
49455: NEG
49456: PUSH
49457: LD_INT 0
49459: PUSH
49460: EMPTY
49461: LIST
49462: LIST
49463: PUSH
49464: LD_INT 2
49466: NEG
49467: PUSH
49468: LD_INT 1
49470: NEG
49471: PUSH
49472: EMPTY
49473: LIST
49474: LIST
49475: PUSH
49476: LD_INT 1
49478: NEG
49479: PUSH
49480: LD_INT 3
49482: NEG
49483: PUSH
49484: EMPTY
49485: LIST
49486: LIST
49487: PUSH
49488: LD_INT 1
49490: PUSH
49491: LD_INT 2
49493: NEG
49494: PUSH
49495: EMPTY
49496: LIST
49497: LIST
49498: PUSH
49499: LD_INT 3
49501: PUSH
49502: LD_INT 2
49504: PUSH
49505: EMPTY
49506: LIST
49507: LIST
49508: PUSH
49509: LD_INT 2
49511: PUSH
49512: LD_INT 3
49514: PUSH
49515: EMPTY
49516: LIST
49517: LIST
49518: PUSH
49519: LD_INT 2
49521: NEG
49522: PUSH
49523: LD_INT 1
49525: PUSH
49526: EMPTY
49527: LIST
49528: LIST
49529: PUSH
49530: LD_INT 3
49532: NEG
49533: PUSH
49534: LD_INT 1
49536: NEG
49537: PUSH
49538: EMPTY
49539: LIST
49540: LIST
49541: PUSH
49542: EMPTY
49543: LIST
49544: LIST
49545: LIST
49546: LIST
49547: LIST
49548: LIST
49549: LIST
49550: LIST
49551: LIST
49552: LIST
49553: LIST
49554: LIST
49555: LIST
49556: LIST
49557: LIST
49558: LIST
49559: LIST
49560: LIST
49561: LIST
49562: LIST
49563: LIST
49564: LIST
49565: LIST
49566: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49567: LD_ADDR_VAR 0 33
49571: PUSH
49572: LD_INT 0
49574: PUSH
49575: LD_INT 0
49577: PUSH
49578: EMPTY
49579: LIST
49580: LIST
49581: PUSH
49582: LD_INT 0
49584: PUSH
49585: LD_INT 1
49587: NEG
49588: PUSH
49589: EMPTY
49590: LIST
49591: LIST
49592: PUSH
49593: LD_INT 1
49595: PUSH
49596: LD_INT 0
49598: PUSH
49599: EMPTY
49600: LIST
49601: LIST
49602: PUSH
49603: LD_INT 1
49605: PUSH
49606: LD_INT 1
49608: PUSH
49609: EMPTY
49610: LIST
49611: LIST
49612: PUSH
49613: LD_INT 0
49615: PUSH
49616: LD_INT 1
49618: PUSH
49619: EMPTY
49620: LIST
49621: LIST
49622: PUSH
49623: LD_INT 1
49625: NEG
49626: PUSH
49627: LD_INT 0
49629: PUSH
49630: EMPTY
49631: LIST
49632: LIST
49633: PUSH
49634: LD_INT 1
49636: NEG
49637: PUSH
49638: LD_INT 1
49640: NEG
49641: PUSH
49642: EMPTY
49643: LIST
49644: LIST
49645: PUSH
49646: LD_INT 1
49648: NEG
49649: PUSH
49650: LD_INT 2
49652: NEG
49653: PUSH
49654: EMPTY
49655: LIST
49656: LIST
49657: PUSH
49658: LD_INT 1
49660: PUSH
49661: LD_INT 1
49663: NEG
49664: PUSH
49665: EMPTY
49666: LIST
49667: LIST
49668: PUSH
49669: LD_INT 2
49671: PUSH
49672: LD_INT 0
49674: PUSH
49675: EMPTY
49676: LIST
49677: LIST
49678: PUSH
49679: LD_INT 2
49681: PUSH
49682: LD_INT 1
49684: PUSH
49685: EMPTY
49686: LIST
49687: LIST
49688: PUSH
49689: LD_INT 1
49691: PUSH
49692: LD_INT 2
49694: PUSH
49695: EMPTY
49696: LIST
49697: LIST
49698: PUSH
49699: LD_INT 0
49701: PUSH
49702: LD_INT 2
49704: PUSH
49705: EMPTY
49706: LIST
49707: LIST
49708: PUSH
49709: LD_INT 1
49711: NEG
49712: PUSH
49713: LD_INT 1
49715: PUSH
49716: EMPTY
49717: LIST
49718: LIST
49719: PUSH
49720: LD_INT 2
49722: NEG
49723: PUSH
49724: LD_INT 0
49726: PUSH
49727: EMPTY
49728: LIST
49729: LIST
49730: PUSH
49731: LD_INT 2
49733: NEG
49734: PUSH
49735: LD_INT 1
49737: NEG
49738: PUSH
49739: EMPTY
49740: LIST
49741: LIST
49742: PUSH
49743: LD_INT 2
49745: NEG
49746: PUSH
49747: LD_INT 2
49749: NEG
49750: PUSH
49751: EMPTY
49752: LIST
49753: LIST
49754: PUSH
49755: LD_INT 2
49757: NEG
49758: PUSH
49759: LD_INT 3
49761: NEG
49762: PUSH
49763: EMPTY
49764: LIST
49765: LIST
49766: PUSH
49767: LD_INT 2
49769: PUSH
49770: LD_INT 1
49772: NEG
49773: PUSH
49774: EMPTY
49775: LIST
49776: LIST
49777: PUSH
49778: LD_INT 3
49780: PUSH
49781: LD_INT 1
49783: PUSH
49784: EMPTY
49785: LIST
49786: LIST
49787: PUSH
49788: LD_INT 1
49790: PUSH
49791: LD_INT 3
49793: PUSH
49794: EMPTY
49795: LIST
49796: LIST
49797: PUSH
49798: LD_INT 1
49800: NEG
49801: PUSH
49802: LD_INT 2
49804: PUSH
49805: EMPTY
49806: LIST
49807: LIST
49808: PUSH
49809: LD_INT 3
49811: NEG
49812: PUSH
49813: LD_INT 2
49815: NEG
49816: PUSH
49817: EMPTY
49818: LIST
49819: LIST
49820: PUSH
49821: EMPTY
49822: LIST
49823: LIST
49824: LIST
49825: LIST
49826: LIST
49827: LIST
49828: LIST
49829: LIST
49830: LIST
49831: LIST
49832: LIST
49833: LIST
49834: LIST
49835: LIST
49836: LIST
49837: LIST
49838: LIST
49839: LIST
49840: LIST
49841: LIST
49842: LIST
49843: LIST
49844: LIST
49845: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49846: LD_ADDR_VAR 0 34
49850: PUSH
49851: LD_INT 0
49853: PUSH
49854: LD_INT 0
49856: PUSH
49857: EMPTY
49858: LIST
49859: LIST
49860: PUSH
49861: LD_INT 0
49863: PUSH
49864: LD_INT 1
49866: NEG
49867: PUSH
49868: EMPTY
49869: LIST
49870: LIST
49871: PUSH
49872: LD_INT 1
49874: PUSH
49875: LD_INT 0
49877: PUSH
49878: EMPTY
49879: LIST
49880: LIST
49881: PUSH
49882: LD_INT 1
49884: PUSH
49885: LD_INT 1
49887: PUSH
49888: EMPTY
49889: LIST
49890: LIST
49891: PUSH
49892: LD_INT 0
49894: PUSH
49895: LD_INT 1
49897: PUSH
49898: EMPTY
49899: LIST
49900: LIST
49901: PUSH
49902: LD_INT 1
49904: NEG
49905: PUSH
49906: LD_INT 0
49908: PUSH
49909: EMPTY
49910: LIST
49911: LIST
49912: PUSH
49913: LD_INT 1
49915: NEG
49916: PUSH
49917: LD_INT 1
49919: NEG
49920: PUSH
49921: EMPTY
49922: LIST
49923: LIST
49924: PUSH
49925: LD_INT 1
49927: NEG
49928: PUSH
49929: LD_INT 2
49931: NEG
49932: PUSH
49933: EMPTY
49934: LIST
49935: LIST
49936: PUSH
49937: LD_INT 0
49939: PUSH
49940: LD_INT 2
49942: NEG
49943: PUSH
49944: EMPTY
49945: LIST
49946: LIST
49947: PUSH
49948: LD_INT 1
49950: PUSH
49951: LD_INT 1
49953: NEG
49954: PUSH
49955: EMPTY
49956: LIST
49957: LIST
49958: PUSH
49959: LD_INT 2
49961: PUSH
49962: LD_INT 1
49964: PUSH
49965: EMPTY
49966: LIST
49967: LIST
49968: PUSH
49969: LD_INT 2
49971: PUSH
49972: LD_INT 2
49974: PUSH
49975: EMPTY
49976: LIST
49977: LIST
49978: PUSH
49979: LD_INT 1
49981: PUSH
49982: LD_INT 2
49984: PUSH
49985: EMPTY
49986: LIST
49987: LIST
49988: PUSH
49989: LD_INT 1
49991: NEG
49992: PUSH
49993: LD_INT 1
49995: PUSH
49996: EMPTY
49997: LIST
49998: LIST
49999: PUSH
50000: LD_INT 2
50002: NEG
50003: PUSH
50004: LD_INT 0
50006: PUSH
50007: EMPTY
50008: LIST
50009: LIST
50010: PUSH
50011: LD_INT 2
50013: NEG
50014: PUSH
50015: LD_INT 1
50017: NEG
50018: PUSH
50019: EMPTY
50020: LIST
50021: LIST
50022: PUSH
50023: LD_INT 2
50025: NEG
50026: PUSH
50027: LD_INT 2
50029: NEG
50030: PUSH
50031: EMPTY
50032: LIST
50033: LIST
50034: PUSH
50035: LD_INT 1
50037: NEG
50038: PUSH
50039: LD_INT 3
50041: NEG
50042: PUSH
50043: EMPTY
50044: LIST
50045: LIST
50046: PUSH
50047: LD_INT 1
50049: PUSH
50050: LD_INT 2
50052: NEG
50053: PUSH
50054: EMPTY
50055: LIST
50056: LIST
50057: PUSH
50058: LD_INT 3
50060: PUSH
50061: LD_INT 2
50063: PUSH
50064: EMPTY
50065: LIST
50066: LIST
50067: PUSH
50068: LD_INT 2
50070: PUSH
50071: LD_INT 3
50073: PUSH
50074: EMPTY
50075: LIST
50076: LIST
50077: PUSH
50078: LD_INT 2
50080: NEG
50081: PUSH
50082: LD_INT 1
50084: PUSH
50085: EMPTY
50086: LIST
50087: LIST
50088: PUSH
50089: LD_INT 3
50091: NEG
50092: PUSH
50093: LD_INT 1
50095: NEG
50096: PUSH
50097: EMPTY
50098: LIST
50099: LIST
50100: PUSH
50101: EMPTY
50102: LIST
50103: LIST
50104: LIST
50105: LIST
50106: LIST
50107: LIST
50108: LIST
50109: LIST
50110: LIST
50111: LIST
50112: LIST
50113: LIST
50114: LIST
50115: LIST
50116: LIST
50117: LIST
50118: LIST
50119: LIST
50120: LIST
50121: LIST
50122: LIST
50123: LIST
50124: LIST
50125: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50126: LD_ADDR_VAR 0 35
50130: PUSH
50131: LD_INT 0
50133: PUSH
50134: LD_INT 0
50136: PUSH
50137: EMPTY
50138: LIST
50139: LIST
50140: PUSH
50141: LD_INT 0
50143: PUSH
50144: LD_INT 1
50146: NEG
50147: PUSH
50148: EMPTY
50149: LIST
50150: LIST
50151: PUSH
50152: LD_INT 1
50154: PUSH
50155: LD_INT 0
50157: PUSH
50158: EMPTY
50159: LIST
50160: LIST
50161: PUSH
50162: LD_INT 1
50164: PUSH
50165: LD_INT 1
50167: PUSH
50168: EMPTY
50169: LIST
50170: LIST
50171: PUSH
50172: LD_INT 0
50174: PUSH
50175: LD_INT 1
50177: PUSH
50178: EMPTY
50179: LIST
50180: LIST
50181: PUSH
50182: LD_INT 1
50184: NEG
50185: PUSH
50186: LD_INT 0
50188: PUSH
50189: EMPTY
50190: LIST
50191: LIST
50192: PUSH
50193: LD_INT 1
50195: NEG
50196: PUSH
50197: LD_INT 1
50199: NEG
50200: PUSH
50201: EMPTY
50202: LIST
50203: LIST
50204: PUSH
50205: LD_INT 2
50207: PUSH
50208: LD_INT 1
50210: PUSH
50211: EMPTY
50212: LIST
50213: LIST
50214: PUSH
50215: LD_INT 2
50217: NEG
50218: PUSH
50219: LD_INT 1
50221: NEG
50222: PUSH
50223: EMPTY
50224: LIST
50225: LIST
50226: PUSH
50227: EMPTY
50228: LIST
50229: LIST
50230: LIST
50231: LIST
50232: LIST
50233: LIST
50234: LIST
50235: LIST
50236: LIST
50237: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50238: LD_ADDR_VAR 0 36
50242: PUSH
50243: LD_INT 0
50245: PUSH
50246: LD_INT 0
50248: PUSH
50249: EMPTY
50250: LIST
50251: LIST
50252: PUSH
50253: LD_INT 0
50255: PUSH
50256: LD_INT 1
50258: NEG
50259: PUSH
50260: EMPTY
50261: LIST
50262: LIST
50263: PUSH
50264: LD_INT 1
50266: PUSH
50267: LD_INT 0
50269: PUSH
50270: EMPTY
50271: LIST
50272: LIST
50273: PUSH
50274: LD_INT 1
50276: PUSH
50277: LD_INT 1
50279: PUSH
50280: EMPTY
50281: LIST
50282: LIST
50283: PUSH
50284: LD_INT 0
50286: PUSH
50287: LD_INT 1
50289: PUSH
50290: EMPTY
50291: LIST
50292: LIST
50293: PUSH
50294: LD_INT 1
50296: NEG
50297: PUSH
50298: LD_INT 0
50300: PUSH
50301: EMPTY
50302: LIST
50303: LIST
50304: PUSH
50305: LD_INT 1
50307: NEG
50308: PUSH
50309: LD_INT 1
50311: NEG
50312: PUSH
50313: EMPTY
50314: LIST
50315: LIST
50316: PUSH
50317: LD_INT 1
50319: NEG
50320: PUSH
50321: LD_INT 2
50323: NEG
50324: PUSH
50325: EMPTY
50326: LIST
50327: LIST
50328: PUSH
50329: LD_INT 1
50331: PUSH
50332: LD_INT 2
50334: PUSH
50335: EMPTY
50336: LIST
50337: LIST
50338: PUSH
50339: EMPTY
50340: LIST
50341: LIST
50342: LIST
50343: LIST
50344: LIST
50345: LIST
50346: LIST
50347: LIST
50348: LIST
50349: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50350: LD_ADDR_VAR 0 37
50354: PUSH
50355: LD_INT 0
50357: PUSH
50358: LD_INT 0
50360: PUSH
50361: EMPTY
50362: LIST
50363: LIST
50364: PUSH
50365: LD_INT 0
50367: PUSH
50368: LD_INT 1
50370: NEG
50371: PUSH
50372: EMPTY
50373: LIST
50374: LIST
50375: PUSH
50376: LD_INT 1
50378: PUSH
50379: LD_INT 0
50381: PUSH
50382: EMPTY
50383: LIST
50384: LIST
50385: PUSH
50386: LD_INT 1
50388: PUSH
50389: LD_INT 1
50391: PUSH
50392: EMPTY
50393: LIST
50394: LIST
50395: PUSH
50396: LD_INT 0
50398: PUSH
50399: LD_INT 1
50401: PUSH
50402: EMPTY
50403: LIST
50404: LIST
50405: PUSH
50406: LD_INT 1
50408: NEG
50409: PUSH
50410: LD_INT 0
50412: PUSH
50413: EMPTY
50414: LIST
50415: LIST
50416: PUSH
50417: LD_INT 1
50419: NEG
50420: PUSH
50421: LD_INT 1
50423: NEG
50424: PUSH
50425: EMPTY
50426: LIST
50427: LIST
50428: PUSH
50429: LD_INT 1
50431: PUSH
50432: LD_INT 1
50434: NEG
50435: PUSH
50436: EMPTY
50437: LIST
50438: LIST
50439: PUSH
50440: LD_INT 1
50442: NEG
50443: PUSH
50444: LD_INT 1
50446: PUSH
50447: EMPTY
50448: LIST
50449: LIST
50450: PUSH
50451: EMPTY
50452: LIST
50453: LIST
50454: LIST
50455: LIST
50456: LIST
50457: LIST
50458: LIST
50459: LIST
50460: LIST
50461: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50462: LD_ADDR_VAR 0 38
50466: PUSH
50467: LD_INT 0
50469: PUSH
50470: LD_INT 0
50472: PUSH
50473: EMPTY
50474: LIST
50475: LIST
50476: PUSH
50477: LD_INT 0
50479: PUSH
50480: LD_INT 1
50482: NEG
50483: PUSH
50484: EMPTY
50485: LIST
50486: LIST
50487: PUSH
50488: LD_INT 1
50490: PUSH
50491: LD_INT 0
50493: PUSH
50494: EMPTY
50495: LIST
50496: LIST
50497: PUSH
50498: LD_INT 1
50500: PUSH
50501: LD_INT 1
50503: PUSH
50504: EMPTY
50505: LIST
50506: LIST
50507: PUSH
50508: LD_INT 0
50510: PUSH
50511: LD_INT 1
50513: PUSH
50514: EMPTY
50515: LIST
50516: LIST
50517: PUSH
50518: LD_INT 1
50520: NEG
50521: PUSH
50522: LD_INT 0
50524: PUSH
50525: EMPTY
50526: LIST
50527: LIST
50528: PUSH
50529: LD_INT 1
50531: NEG
50532: PUSH
50533: LD_INT 1
50535: NEG
50536: PUSH
50537: EMPTY
50538: LIST
50539: LIST
50540: PUSH
50541: LD_INT 2
50543: PUSH
50544: LD_INT 1
50546: PUSH
50547: EMPTY
50548: LIST
50549: LIST
50550: PUSH
50551: LD_INT 2
50553: NEG
50554: PUSH
50555: LD_INT 1
50557: NEG
50558: PUSH
50559: EMPTY
50560: LIST
50561: LIST
50562: PUSH
50563: EMPTY
50564: LIST
50565: LIST
50566: LIST
50567: LIST
50568: LIST
50569: LIST
50570: LIST
50571: LIST
50572: LIST
50573: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50574: LD_ADDR_VAR 0 39
50578: PUSH
50579: LD_INT 0
50581: PUSH
50582: LD_INT 0
50584: PUSH
50585: EMPTY
50586: LIST
50587: LIST
50588: PUSH
50589: LD_INT 0
50591: PUSH
50592: LD_INT 1
50594: NEG
50595: PUSH
50596: EMPTY
50597: LIST
50598: LIST
50599: PUSH
50600: LD_INT 1
50602: PUSH
50603: LD_INT 0
50605: PUSH
50606: EMPTY
50607: LIST
50608: LIST
50609: PUSH
50610: LD_INT 1
50612: PUSH
50613: LD_INT 1
50615: PUSH
50616: EMPTY
50617: LIST
50618: LIST
50619: PUSH
50620: LD_INT 0
50622: PUSH
50623: LD_INT 1
50625: PUSH
50626: EMPTY
50627: LIST
50628: LIST
50629: PUSH
50630: LD_INT 1
50632: NEG
50633: PUSH
50634: LD_INT 0
50636: PUSH
50637: EMPTY
50638: LIST
50639: LIST
50640: PUSH
50641: LD_INT 1
50643: NEG
50644: PUSH
50645: LD_INT 1
50647: NEG
50648: PUSH
50649: EMPTY
50650: LIST
50651: LIST
50652: PUSH
50653: LD_INT 1
50655: NEG
50656: PUSH
50657: LD_INT 2
50659: NEG
50660: PUSH
50661: EMPTY
50662: LIST
50663: LIST
50664: PUSH
50665: LD_INT 1
50667: PUSH
50668: LD_INT 2
50670: PUSH
50671: EMPTY
50672: LIST
50673: LIST
50674: PUSH
50675: EMPTY
50676: LIST
50677: LIST
50678: LIST
50679: LIST
50680: LIST
50681: LIST
50682: LIST
50683: LIST
50684: LIST
50685: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50686: LD_ADDR_VAR 0 40
50690: PUSH
50691: LD_INT 0
50693: PUSH
50694: LD_INT 0
50696: PUSH
50697: EMPTY
50698: LIST
50699: LIST
50700: PUSH
50701: LD_INT 0
50703: PUSH
50704: LD_INT 1
50706: NEG
50707: PUSH
50708: EMPTY
50709: LIST
50710: LIST
50711: PUSH
50712: LD_INT 1
50714: PUSH
50715: LD_INT 0
50717: PUSH
50718: EMPTY
50719: LIST
50720: LIST
50721: PUSH
50722: LD_INT 1
50724: PUSH
50725: LD_INT 1
50727: PUSH
50728: EMPTY
50729: LIST
50730: LIST
50731: PUSH
50732: LD_INT 0
50734: PUSH
50735: LD_INT 1
50737: PUSH
50738: EMPTY
50739: LIST
50740: LIST
50741: PUSH
50742: LD_INT 1
50744: NEG
50745: PUSH
50746: LD_INT 0
50748: PUSH
50749: EMPTY
50750: LIST
50751: LIST
50752: PUSH
50753: LD_INT 1
50755: NEG
50756: PUSH
50757: LD_INT 1
50759: NEG
50760: PUSH
50761: EMPTY
50762: LIST
50763: LIST
50764: PUSH
50765: LD_INT 1
50767: PUSH
50768: LD_INT 1
50770: NEG
50771: PUSH
50772: EMPTY
50773: LIST
50774: LIST
50775: PUSH
50776: LD_INT 1
50778: NEG
50779: PUSH
50780: LD_INT 1
50782: PUSH
50783: EMPTY
50784: LIST
50785: LIST
50786: PUSH
50787: EMPTY
50788: LIST
50789: LIST
50790: LIST
50791: LIST
50792: LIST
50793: LIST
50794: LIST
50795: LIST
50796: LIST
50797: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50798: LD_ADDR_VAR 0 41
50802: PUSH
50803: LD_INT 0
50805: PUSH
50806: LD_INT 0
50808: PUSH
50809: EMPTY
50810: LIST
50811: LIST
50812: PUSH
50813: LD_INT 0
50815: PUSH
50816: LD_INT 1
50818: NEG
50819: PUSH
50820: EMPTY
50821: LIST
50822: LIST
50823: PUSH
50824: LD_INT 1
50826: PUSH
50827: LD_INT 0
50829: PUSH
50830: EMPTY
50831: LIST
50832: LIST
50833: PUSH
50834: LD_INT 1
50836: PUSH
50837: LD_INT 1
50839: PUSH
50840: EMPTY
50841: LIST
50842: LIST
50843: PUSH
50844: LD_INT 0
50846: PUSH
50847: LD_INT 1
50849: PUSH
50850: EMPTY
50851: LIST
50852: LIST
50853: PUSH
50854: LD_INT 1
50856: NEG
50857: PUSH
50858: LD_INT 0
50860: PUSH
50861: EMPTY
50862: LIST
50863: LIST
50864: PUSH
50865: LD_INT 1
50867: NEG
50868: PUSH
50869: LD_INT 1
50871: NEG
50872: PUSH
50873: EMPTY
50874: LIST
50875: LIST
50876: PUSH
50877: LD_INT 1
50879: NEG
50880: PUSH
50881: LD_INT 2
50883: NEG
50884: PUSH
50885: EMPTY
50886: LIST
50887: LIST
50888: PUSH
50889: LD_INT 1
50891: PUSH
50892: LD_INT 1
50894: NEG
50895: PUSH
50896: EMPTY
50897: LIST
50898: LIST
50899: PUSH
50900: LD_INT 2
50902: PUSH
50903: LD_INT 0
50905: PUSH
50906: EMPTY
50907: LIST
50908: LIST
50909: PUSH
50910: LD_INT 2
50912: PUSH
50913: LD_INT 1
50915: PUSH
50916: EMPTY
50917: LIST
50918: LIST
50919: PUSH
50920: LD_INT 2
50922: PUSH
50923: LD_INT 2
50925: PUSH
50926: EMPTY
50927: LIST
50928: LIST
50929: PUSH
50930: LD_INT 1
50932: PUSH
50933: LD_INT 2
50935: PUSH
50936: EMPTY
50937: LIST
50938: LIST
50939: PUSH
50940: LD_INT 1
50942: NEG
50943: PUSH
50944: LD_INT 1
50946: PUSH
50947: EMPTY
50948: LIST
50949: LIST
50950: PUSH
50951: LD_INT 2
50953: NEG
50954: PUSH
50955: LD_INT 0
50957: PUSH
50958: EMPTY
50959: LIST
50960: LIST
50961: PUSH
50962: LD_INT 2
50964: NEG
50965: PUSH
50966: LD_INT 1
50968: NEG
50969: PUSH
50970: EMPTY
50971: LIST
50972: LIST
50973: PUSH
50974: LD_INT 2
50976: NEG
50977: PUSH
50978: LD_INT 2
50980: NEG
50981: PUSH
50982: EMPTY
50983: LIST
50984: LIST
50985: PUSH
50986: LD_INT 2
50988: NEG
50989: PUSH
50990: LD_INT 3
50992: NEG
50993: PUSH
50994: EMPTY
50995: LIST
50996: LIST
50997: PUSH
50998: LD_INT 2
51000: PUSH
51001: LD_INT 1
51003: NEG
51004: PUSH
51005: EMPTY
51006: LIST
51007: LIST
51008: PUSH
51009: LD_INT 3
51011: PUSH
51012: LD_INT 0
51014: PUSH
51015: EMPTY
51016: LIST
51017: LIST
51018: PUSH
51019: LD_INT 3
51021: PUSH
51022: LD_INT 1
51024: PUSH
51025: EMPTY
51026: LIST
51027: LIST
51028: PUSH
51029: LD_INT 3
51031: PUSH
51032: LD_INT 2
51034: PUSH
51035: EMPTY
51036: LIST
51037: LIST
51038: PUSH
51039: LD_INT 3
51041: PUSH
51042: LD_INT 3
51044: PUSH
51045: EMPTY
51046: LIST
51047: LIST
51048: PUSH
51049: LD_INT 2
51051: PUSH
51052: LD_INT 3
51054: PUSH
51055: EMPTY
51056: LIST
51057: LIST
51058: PUSH
51059: LD_INT 2
51061: NEG
51062: PUSH
51063: LD_INT 1
51065: PUSH
51066: EMPTY
51067: LIST
51068: LIST
51069: PUSH
51070: LD_INT 3
51072: NEG
51073: PUSH
51074: LD_INT 0
51076: PUSH
51077: EMPTY
51078: LIST
51079: LIST
51080: PUSH
51081: LD_INT 3
51083: NEG
51084: PUSH
51085: LD_INT 1
51087: NEG
51088: PUSH
51089: EMPTY
51090: LIST
51091: LIST
51092: PUSH
51093: LD_INT 3
51095: NEG
51096: PUSH
51097: LD_INT 2
51099: NEG
51100: PUSH
51101: EMPTY
51102: LIST
51103: LIST
51104: PUSH
51105: LD_INT 3
51107: NEG
51108: PUSH
51109: LD_INT 3
51111: NEG
51112: PUSH
51113: EMPTY
51114: LIST
51115: LIST
51116: PUSH
51117: EMPTY
51118: LIST
51119: LIST
51120: LIST
51121: LIST
51122: LIST
51123: LIST
51124: LIST
51125: LIST
51126: LIST
51127: LIST
51128: LIST
51129: LIST
51130: LIST
51131: LIST
51132: LIST
51133: LIST
51134: LIST
51135: LIST
51136: LIST
51137: LIST
51138: LIST
51139: LIST
51140: LIST
51141: LIST
51142: LIST
51143: LIST
51144: LIST
51145: LIST
51146: LIST
51147: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51148: LD_ADDR_VAR 0 42
51152: PUSH
51153: LD_INT 0
51155: PUSH
51156: LD_INT 0
51158: PUSH
51159: EMPTY
51160: LIST
51161: LIST
51162: PUSH
51163: LD_INT 0
51165: PUSH
51166: LD_INT 1
51168: NEG
51169: PUSH
51170: EMPTY
51171: LIST
51172: LIST
51173: PUSH
51174: LD_INT 1
51176: PUSH
51177: LD_INT 0
51179: PUSH
51180: EMPTY
51181: LIST
51182: LIST
51183: PUSH
51184: LD_INT 1
51186: PUSH
51187: LD_INT 1
51189: PUSH
51190: EMPTY
51191: LIST
51192: LIST
51193: PUSH
51194: LD_INT 0
51196: PUSH
51197: LD_INT 1
51199: PUSH
51200: EMPTY
51201: LIST
51202: LIST
51203: PUSH
51204: LD_INT 1
51206: NEG
51207: PUSH
51208: LD_INT 0
51210: PUSH
51211: EMPTY
51212: LIST
51213: LIST
51214: PUSH
51215: LD_INT 1
51217: NEG
51218: PUSH
51219: LD_INT 1
51221: NEG
51222: PUSH
51223: EMPTY
51224: LIST
51225: LIST
51226: PUSH
51227: LD_INT 1
51229: NEG
51230: PUSH
51231: LD_INT 2
51233: NEG
51234: PUSH
51235: EMPTY
51236: LIST
51237: LIST
51238: PUSH
51239: LD_INT 0
51241: PUSH
51242: LD_INT 2
51244: NEG
51245: PUSH
51246: EMPTY
51247: LIST
51248: LIST
51249: PUSH
51250: LD_INT 1
51252: PUSH
51253: LD_INT 1
51255: NEG
51256: PUSH
51257: EMPTY
51258: LIST
51259: LIST
51260: PUSH
51261: LD_INT 2
51263: PUSH
51264: LD_INT 1
51266: PUSH
51267: EMPTY
51268: LIST
51269: LIST
51270: PUSH
51271: LD_INT 2
51273: PUSH
51274: LD_INT 2
51276: PUSH
51277: EMPTY
51278: LIST
51279: LIST
51280: PUSH
51281: LD_INT 1
51283: PUSH
51284: LD_INT 2
51286: PUSH
51287: EMPTY
51288: LIST
51289: LIST
51290: PUSH
51291: LD_INT 0
51293: PUSH
51294: LD_INT 2
51296: PUSH
51297: EMPTY
51298: LIST
51299: LIST
51300: PUSH
51301: LD_INT 1
51303: NEG
51304: PUSH
51305: LD_INT 1
51307: PUSH
51308: EMPTY
51309: LIST
51310: LIST
51311: PUSH
51312: LD_INT 2
51314: NEG
51315: PUSH
51316: LD_INT 1
51318: NEG
51319: PUSH
51320: EMPTY
51321: LIST
51322: LIST
51323: PUSH
51324: LD_INT 2
51326: NEG
51327: PUSH
51328: LD_INT 2
51330: NEG
51331: PUSH
51332: EMPTY
51333: LIST
51334: LIST
51335: PUSH
51336: LD_INT 2
51338: NEG
51339: PUSH
51340: LD_INT 3
51342: NEG
51343: PUSH
51344: EMPTY
51345: LIST
51346: LIST
51347: PUSH
51348: LD_INT 1
51350: NEG
51351: PUSH
51352: LD_INT 3
51354: NEG
51355: PUSH
51356: EMPTY
51357: LIST
51358: LIST
51359: PUSH
51360: LD_INT 0
51362: PUSH
51363: LD_INT 3
51365: NEG
51366: PUSH
51367: EMPTY
51368: LIST
51369: LIST
51370: PUSH
51371: LD_INT 1
51373: PUSH
51374: LD_INT 2
51376: NEG
51377: PUSH
51378: EMPTY
51379: LIST
51380: LIST
51381: PUSH
51382: LD_INT 3
51384: PUSH
51385: LD_INT 2
51387: PUSH
51388: EMPTY
51389: LIST
51390: LIST
51391: PUSH
51392: LD_INT 3
51394: PUSH
51395: LD_INT 3
51397: PUSH
51398: EMPTY
51399: LIST
51400: LIST
51401: PUSH
51402: LD_INT 2
51404: PUSH
51405: LD_INT 3
51407: PUSH
51408: EMPTY
51409: LIST
51410: LIST
51411: PUSH
51412: LD_INT 1
51414: PUSH
51415: LD_INT 3
51417: PUSH
51418: EMPTY
51419: LIST
51420: LIST
51421: PUSH
51422: LD_INT 0
51424: PUSH
51425: LD_INT 3
51427: PUSH
51428: EMPTY
51429: LIST
51430: LIST
51431: PUSH
51432: LD_INT 1
51434: NEG
51435: PUSH
51436: LD_INT 2
51438: PUSH
51439: EMPTY
51440: LIST
51441: LIST
51442: PUSH
51443: LD_INT 3
51445: NEG
51446: PUSH
51447: LD_INT 2
51449: NEG
51450: PUSH
51451: EMPTY
51452: LIST
51453: LIST
51454: PUSH
51455: LD_INT 3
51457: NEG
51458: PUSH
51459: LD_INT 3
51461: NEG
51462: PUSH
51463: EMPTY
51464: LIST
51465: LIST
51466: PUSH
51467: EMPTY
51468: LIST
51469: LIST
51470: LIST
51471: LIST
51472: LIST
51473: LIST
51474: LIST
51475: LIST
51476: LIST
51477: LIST
51478: LIST
51479: LIST
51480: LIST
51481: LIST
51482: LIST
51483: LIST
51484: LIST
51485: LIST
51486: LIST
51487: LIST
51488: LIST
51489: LIST
51490: LIST
51491: LIST
51492: LIST
51493: LIST
51494: LIST
51495: LIST
51496: LIST
51497: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51498: LD_ADDR_VAR 0 43
51502: PUSH
51503: LD_INT 0
51505: PUSH
51506: LD_INT 0
51508: PUSH
51509: EMPTY
51510: LIST
51511: LIST
51512: PUSH
51513: LD_INT 0
51515: PUSH
51516: LD_INT 1
51518: NEG
51519: PUSH
51520: EMPTY
51521: LIST
51522: LIST
51523: PUSH
51524: LD_INT 1
51526: PUSH
51527: LD_INT 0
51529: PUSH
51530: EMPTY
51531: LIST
51532: LIST
51533: PUSH
51534: LD_INT 1
51536: PUSH
51537: LD_INT 1
51539: PUSH
51540: EMPTY
51541: LIST
51542: LIST
51543: PUSH
51544: LD_INT 0
51546: PUSH
51547: LD_INT 1
51549: PUSH
51550: EMPTY
51551: LIST
51552: LIST
51553: PUSH
51554: LD_INT 1
51556: NEG
51557: PUSH
51558: LD_INT 0
51560: PUSH
51561: EMPTY
51562: LIST
51563: LIST
51564: PUSH
51565: LD_INT 1
51567: NEG
51568: PUSH
51569: LD_INT 1
51571: NEG
51572: PUSH
51573: EMPTY
51574: LIST
51575: LIST
51576: PUSH
51577: LD_INT 1
51579: NEG
51580: PUSH
51581: LD_INT 2
51583: NEG
51584: PUSH
51585: EMPTY
51586: LIST
51587: LIST
51588: PUSH
51589: LD_INT 0
51591: PUSH
51592: LD_INT 2
51594: NEG
51595: PUSH
51596: EMPTY
51597: LIST
51598: LIST
51599: PUSH
51600: LD_INT 1
51602: PUSH
51603: LD_INT 1
51605: NEG
51606: PUSH
51607: EMPTY
51608: LIST
51609: LIST
51610: PUSH
51611: LD_INT 2
51613: PUSH
51614: LD_INT 0
51616: PUSH
51617: EMPTY
51618: LIST
51619: LIST
51620: PUSH
51621: LD_INT 2
51623: PUSH
51624: LD_INT 1
51626: PUSH
51627: EMPTY
51628: LIST
51629: LIST
51630: PUSH
51631: LD_INT 1
51633: PUSH
51634: LD_INT 2
51636: PUSH
51637: EMPTY
51638: LIST
51639: LIST
51640: PUSH
51641: LD_INT 0
51643: PUSH
51644: LD_INT 2
51646: PUSH
51647: EMPTY
51648: LIST
51649: LIST
51650: PUSH
51651: LD_INT 1
51653: NEG
51654: PUSH
51655: LD_INT 1
51657: PUSH
51658: EMPTY
51659: LIST
51660: LIST
51661: PUSH
51662: LD_INT 2
51664: NEG
51665: PUSH
51666: LD_INT 0
51668: PUSH
51669: EMPTY
51670: LIST
51671: LIST
51672: PUSH
51673: LD_INT 2
51675: NEG
51676: PUSH
51677: LD_INT 1
51679: NEG
51680: PUSH
51681: EMPTY
51682: LIST
51683: LIST
51684: PUSH
51685: LD_INT 1
51687: NEG
51688: PUSH
51689: LD_INT 3
51691: NEG
51692: PUSH
51693: EMPTY
51694: LIST
51695: LIST
51696: PUSH
51697: LD_INT 0
51699: PUSH
51700: LD_INT 3
51702: NEG
51703: PUSH
51704: EMPTY
51705: LIST
51706: LIST
51707: PUSH
51708: LD_INT 1
51710: PUSH
51711: LD_INT 2
51713: NEG
51714: PUSH
51715: EMPTY
51716: LIST
51717: LIST
51718: PUSH
51719: LD_INT 2
51721: PUSH
51722: LD_INT 1
51724: NEG
51725: PUSH
51726: EMPTY
51727: LIST
51728: LIST
51729: PUSH
51730: LD_INT 3
51732: PUSH
51733: LD_INT 0
51735: PUSH
51736: EMPTY
51737: LIST
51738: LIST
51739: PUSH
51740: LD_INT 3
51742: PUSH
51743: LD_INT 1
51745: PUSH
51746: EMPTY
51747: LIST
51748: LIST
51749: PUSH
51750: LD_INT 1
51752: PUSH
51753: LD_INT 3
51755: PUSH
51756: EMPTY
51757: LIST
51758: LIST
51759: PUSH
51760: LD_INT 0
51762: PUSH
51763: LD_INT 3
51765: PUSH
51766: EMPTY
51767: LIST
51768: LIST
51769: PUSH
51770: LD_INT 1
51772: NEG
51773: PUSH
51774: LD_INT 2
51776: PUSH
51777: EMPTY
51778: LIST
51779: LIST
51780: PUSH
51781: LD_INT 2
51783: NEG
51784: PUSH
51785: LD_INT 1
51787: PUSH
51788: EMPTY
51789: LIST
51790: LIST
51791: PUSH
51792: LD_INT 3
51794: NEG
51795: PUSH
51796: LD_INT 0
51798: PUSH
51799: EMPTY
51800: LIST
51801: LIST
51802: PUSH
51803: LD_INT 3
51805: NEG
51806: PUSH
51807: LD_INT 1
51809: NEG
51810: PUSH
51811: EMPTY
51812: LIST
51813: LIST
51814: PUSH
51815: EMPTY
51816: LIST
51817: LIST
51818: LIST
51819: LIST
51820: LIST
51821: LIST
51822: LIST
51823: LIST
51824: LIST
51825: LIST
51826: LIST
51827: LIST
51828: LIST
51829: LIST
51830: LIST
51831: LIST
51832: LIST
51833: LIST
51834: LIST
51835: LIST
51836: LIST
51837: LIST
51838: LIST
51839: LIST
51840: LIST
51841: LIST
51842: LIST
51843: LIST
51844: LIST
51845: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51846: LD_ADDR_VAR 0 44
51850: PUSH
51851: LD_INT 0
51853: PUSH
51854: LD_INT 0
51856: PUSH
51857: EMPTY
51858: LIST
51859: LIST
51860: PUSH
51861: LD_INT 0
51863: PUSH
51864: LD_INT 1
51866: NEG
51867: PUSH
51868: EMPTY
51869: LIST
51870: LIST
51871: PUSH
51872: LD_INT 1
51874: PUSH
51875: LD_INT 0
51877: PUSH
51878: EMPTY
51879: LIST
51880: LIST
51881: PUSH
51882: LD_INT 1
51884: PUSH
51885: LD_INT 1
51887: PUSH
51888: EMPTY
51889: LIST
51890: LIST
51891: PUSH
51892: LD_INT 0
51894: PUSH
51895: LD_INT 1
51897: PUSH
51898: EMPTY
51899: LIST
51900: LIST
51901: PUSH
51902: LD_INT 1
51904: NEG
51905: PUSH
51906: LD_INT 0
51908: PUSH
51909: EMPTY
51910: LIST
51911: LIST
51912: PUSH
51913: LD_INT 1
51915: NEG
51916: PUSH
51917: LD_INT 1
51919: NEG
51920: PUSH
51921: EMPTY
51922: LIST
51923: LIST
51924: PUSH
51925: LD_INT 1
51927: NEG
51928: PUSH
51929: LD_INT 2
51931: NEG
51932: PUSH
51933: EMPTY
51934: LIST
51935: LIST
51936: PUSH
51937: LD_INT 1
51939: PUSH
51940: LD_INT 1
51942: NEG
51943: PUSH
51944: EMPTY
51945: LIST
51946: LIST
51947: PUSH
51948: LD_INT 2
51950: PUSH
51951: LD_INT 0
51953: PUSH
51954: EMPTY
51955: LIST
51956: LIST
51957: PUSH
51958: LD_INT 2
51960: PUSH
51961: LD_INT 1
51963: PUSH
51964: EMPTY
51965: LIST
51966: LIST
51967: PUSH
51968: LD_INT 2
51970: PUSH
51971: LD_INT 2
51973: PUSH
51974: EMPTY
51975: LIST
51976: LIST
51977: PUSH
51978: LD_INT 1
51980: PUSH
51981: LD_INT 2
51983: PUSH
51984: EMPTY
51985: LIST
51986: LIST
51987: PUSH
51988: LD_INT 1
51990: NEG
51991: PUSH
51992: LD_INT 1
51994: PUSH
51995: EMPTY
51996: LIST
51997: LIST
51998: PUSH
51999: LD_INT 2
52001: NEG
52002: PUSH
52003: LD_INT 0
52005: PUSH
52006: EMPTY
52007: LIST
52008: LIST
52009: PUSH
52010: LD_INT 2
52012: NEG
52013: PUSH
52014: LD_INT 1
52016: NEG
52017: PUSH
52018: EMPTY
52019: LIST
52020: LIST
52021: PUSH
52022: LD_INT 2
52024: NEG
52025: PUSH
52026: LD_INT 2
52028: NEG
52029: PUSH
52030: EMPTY
52031: LIST
52032: LIST
52033: PUSH
52034: LD_INT 2
52036: NEG
52037: PUSH
52038: LD_INT 3
52040: NEG
52041: PUSH
52042: EMPTY
52043: LIST
52044: LIST
52045: PUSH
52046: LD_INT 2
52048: PUSH
52049: LD_INT 1
52051: NEG
52052: PUSH
52053: EMPTY
52054: LIST
52055: LIST
52056: PUSH
52057: LD_INT 3
52059: PUSH
52060: LD_INT 0
52062: PUSH
52063: EMPTY
52064: LIST
52065: LIST
52066: PUSH
52067: LD_INT 3
52069: PUSH
52070: LD_INT 1
52072: PUSH
52073: EMPTY
52074: LIST
52075: LIST
52076: PUSH
52077: LD_INT 3
52079: PUSH
52080: LD_INT 2
52082: PUSH
52083: EMPTY
52084: LIST
52085: LIST
52086: PUSH
52087: LD_INT 3
52089: PUSH
52090: LD_INT 3
52092: PUSH
52093: EMPTY
52094: LIST
52095: LIST
52096: PUSH
52097: LD_INT 2
52099: PUSH
52100: LD_INT 3
52102: PUSH
52103: EMPTY
52104: LIST
52105: LIST
52106: PUSH
52107: LD_INT 2
52109: NEG
52110: PUSH
52111: LD_INT 1
52113: PUSH
52114: EMPTY
52115: LIST
52116: LIST
52117: PUSH
52118: LD_INT 3
52120: NEG
52121: PUSH
52122: LD_INT 0
52124: PUSH
52125: EMPTY
52126: LIST
52127: LIST
52128: PUSH
52129: LD_INT 3
52131: NEG
52132: PUSH
52133: LD_INT 1
52135: NEG
52136: PUSH
52137: EMPTY
52138: LIST
52139: LIST
52140: PUSH
52141: LD_INT 3
52143: NEG
52144: PUSH
52145: LD_INT 2
52147: NEG
52148: PUSH
52149: EMPTY
52150: LIST
52151: LIST
52152: PUSH
52153: LD_INT 3
52155: NEG
52156: PUSH
52157: LD_INT 3
52159: NEG
52160: PUSH
52161: EMPTY
52162: LIST
52163: LIST
52164: PUSH
52165: EMPTY
52166: LIST
52167: LIST
52168: LIST
52169: LIST
52170: LIST
52171: LIST
52172: LIST
52173: LIST
52174: LIST
52175: LIST
52176: LIST
52177: LIST
52178: LIST
52179: LIST
52180: LIST
52181: LIST
52182: LIST
52183: LIST
52184: LIST
52185: LIST
52186: LIST
52187: LIST
52188: LIST
52189: LIST
52190: LIST
52191: LIST
52192: LIST
52193: LIST
52194: LIST
52195: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52196: LD_ADDR_VAR 0 45
52200: PUSH
52201: LD_INT 0
52203: PUSH
52204: LD_INT 0
52206: PUSH
52207: EMPTY
52208: LIST
52209: LIST
52210: PUSH
52211: LD_INT 0
52213: PUSH
52214: LD_INT 1
52216: NEG
52217: PUSH
52218: EMPTY
52219: LIST
52220: LIST
52221: PUSH
52222: LD_INT 1
52224: PUSH
52225: LD_INT 0
52227: PUSH
52228: EMPTY
52229: LIST
52230: LIST
52231: PUSH
52232: LD_INT 1
52234: PUSH
52235: LD_INT 1
52237: PUSH
52238: EMPTY
52239: LIST
52240: LIST
52241: PUSH
52242: LD_INT 0
52244: PUSH
52245: LD_INT 1
52247: PUSH
52248: EMPTY
52249: LIST
52250: LIST
52251: PUSH
52252: LD_INT 1
52254: NEG
52255: PUSH
52256: LD_INT 0
52258: PUSH
52259: EMPTY
52260: LIST
52261: LIST
52262: PUSH
52263: LD_INT 1
52265: NEG
52266: PUSH
52267: LD_INT 1
52269: NEG
52270: PUSH
52271: EMPTY
52272: LIST
52273: LIST
52274: PUSH
52275: LD_INT 1
52277: NEG
52278: PUSH
52279: LD_INT 2
52281: NEG
52282: PUSH
52283: EMPTY
52284: LIST
52285: LIST
52286: PUSH
52287: LD_INT 0
52289: PUSH
52290: LD_INT 2
52292: NEG
52293: PUSH
52294: EMPTY
52295: LIST
52296: LIST
52297: PUSH
52298: LD_INT 1
52300: PUSH
52301: LD_INT 1
52303: NEG
52304: PUSH
52305: EMPTY
52306: LIST
52307: LIST
52308: PUSH
52309: LD_INT 2
52311: PUSH
52312: LD_INT 1
52314: PUSH
52315: EMPTY
52316: LIST
52317: LIST
52318: PUSH
52319: LD_INT 2
52321: PUSH
52322: LD_INT 2
52324: PUSH
52325: EMPTY
52326: LIST
52327: LIST
52328: PUSH
52329: LD_INT 1
52331: PUSH
52332: LD_INT 2
52334: PUSH
52335: EMPTY
52336: LIST
52337: LIST
52338: PUSH
52339: LD_INT 0
52341: PUSH
52342: LD_INT 2
52344: PUSH
52345: EMPTY
52346: LIST
52347: LIST
52348: PUSH
52349: LD_INT 1
52351: NEG
52352: PUSH
52353: LD_INT 1
52355: PUSH
52356: EMPTY
52357: LIST
52358: LIST
52359: PUSH
52360: LD_INT 2
52362: NEG
52363: PUSH
52364: LD_INT 1
52366: NEG
52367: PUSH
52368: EMPTY
52369: LIST
52370: LIST
52371: PUSH
52372: LD_INT 2
52374: NEG
52375: PUSH
52376: LD_INT 2
52378: NEG
52379: PUSH
52380: EMPTY
52381: LIST
52382: LIST
52383: PUSH
52384: LD_INT 2
52386: NEG
52387: PUSH
52388: LD_INT 3
52390: NEG
52391: PUSH
52392: EMPTY
52393: LIST
52394: LIST
52395: PUSH
52396: LD_INT 1
52398: NEG
52399: PUSH
52400: LD_INT 3
52402: NEG
52403: PUSH
52404: EMPTY
52405: LIST
52406: LIST
52407: PUSH
52408: LD_INT 0
52410: PUSH
52411: LD_INT 3
52413: NEG
52414: PUSH
52415: EMPTY
52416: LIST
52417: LIST
52418: PUSH
52419: LD_INT 1
52421: PUSH
52422: LD_INT 2
52424: NEG
52425: PUSH
52426: EMPTY
52427: LIST
52428: LIST
52429: PUSH
52430: LD_INT 3
52432: PUSH
52433: LD_INT 2
52435: PUSH
52436: EMPTY
52437: LIST
52438: LIST
52439: PUSH
52440: LD_INT 3
52442: PUSH
52443: LD_INT 3
52445: PUSH
52446: EMPTY
52447: LIST
52448: LIST
52449: PUSH
52450: LD_INT 2
52452: PUSH
52453: LD_INT 3
52455: PUSH
52456: EMPTY
52457: LIST
52458: LIST
52459: PUSH
52460: LD_INT 1
52462: PUSH
52463: LD_INT 3
52465: PUSH
52466: EMPTY
52467: LIST
52468: LIST
52469: PUSH
52470: LD_INT 0
52472: PUSH
52473: LD_INT 3
52475: PUSH
52476: EMPTY
52477: LIST
52478: LIST
52479: PUSH
52480: LD_INT 1
52482: NEG
52483: PUSH
52484: LD_INT 2
52486: PUSH
52487: EMPTY
52488: LIST
52489: LIST
52490: PUSH
52491: LD_INT 3
52493: NEG
52494: PUSH
52495: LD_INT 2
52497: NEG
52498: PUSH
52499: EMPTY
52500: LIST
52501: LIST
52502: PUSH
52503: LD_INT 3
52505: NEG
52506: PUSH
52507: LD_INT 3
52509: NEG
52510: PUSH
52511: EMPTY
52512: LIST
52513: LIST
52514: PUSH
52515: EMPTY
52516: LIST
52517: LIST
52518: LIST
52519: LIST
52520: LIST
52521: LIST
52522: LIST
52523: LIST
52524: LIST
52525: LIST
52526: LIST
52527: LIST
52528: LIST
52529: LIST
52530: LIST
52531: LIST
52532: LIST
52533: LIST
52534: LIST
52535: LIST
52536: LIST
52537: LIST
52538: LIST
52539: LIST
52540: LIST
52541: LIST
52542: LIST
52543: LIST
52544: LIST
52545: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52546: LD_ADDR_VAR 0 46
52550: PUSH
52551: LD_INT 0
52553: PUSH
52554: LD_INT 0
52556: PUSH
52557: EMPTY
52558: LIST
52559: LIST
52560: PUSH
52561: LD_INT 0
52563: PUSH
52564: LD_INT 1
52566: NEG
52567: PUSH
52568: EMPTY
52569: LIST
52570: LIST
52571: PUSH
52572: LD_INT 1
52574: PUSH
52575: LD_INT 0
52577: PUSH
52578: EMPTY
52579: LIST
52580: LIST
52581: PUSH
52582: LD_INT 1
52584: PUSH
52585: LD_INT 1
52587: PUSH
52588: EMPTY
52589: LIST
52590: LIST
52591: PUSH
52592: LD_INT 0
52594: PUSH
52595: LD_INT 1
52597: PUSH
52598: EMPTY
52599: LIST
52600: LIST
52601: PUSH
52602: LD_INT 1
52604: NEG
52605: PUSH
52606: LD_INT 0
52608: PUSH
52609: EMPTY
52610: LIST
52611: LIST
52612: PUSH
52613: LD_INT 1
52615: NEG
52616: PUSH
52617: LD_INT 1
52619: NEG
52620: PUSH
52621: EMPTY
52622: LIST
52623: LIST
52624: PUSH
52625: LD_INT 1
52627: NEG
52628: PUSH
52629: LD_INT 2
52631: NEG
52632: PUSH
52633: EMPTY
52634: LIST
52635: LIST
52636: PUSH
52637: LD_INT 0
52639: PUSH
52640: LD_INT 2
52642: NEG
52643: PUSH
52644: EMPTY
52645: LIST
52646: LIST
52647: PUSH
52648: LD_INT 1
52650: PUSH
52651: LD_INT 1
52653: NEG
52654: PUSH
52655: EMPTY
52656: LIST
52657: LIST
52658: PUSH
52659: LD_INT 2
52661: PUSH
52662: LD_INT 0
52664: PUSH
52665: EMPTY
52666: LIST
52667: LIST
52668: PUSH
52669: LD_INT 2
52671: PUSH
52672: LD_INT 1
52674: PUSH
52675: EMPTY
52676: LIST
52677: LIST
52678: PUSH
52679: LD_INT 1
52681: PUSH
52682: LD_INT 2
52684: PUSH
52685: EMPTY
52686: LIST
52687: LIST
52688: PUSH
52689: LD_INT 0
52691: PUSH
52692: LD_INT 2
52694: PUSH
52695: EMPTY
52696: LIST
52697: LIST
52698: PUSH
52699: LD_INT 1
52701: NEG
52702: PUSH
52703: LD_INT 1
52705: PUSH
52706: EMPTY
52707: LIST
52708: LIST
52709: PUSH
52710: LD_INT 2
52712: NEG
52713: PUSH
52714: LD_INT 0
52716: PUSH
52717: EMPTY
52718: LIST
52719: LIST
52720: PUSH
52721: LD_INT 2
52723: NEG
52724: PUSH
52725: LD_INT 1
52727: NEG
52728: PUSH
52729: EMPTY
52730: LIST
52731: LIST
52732: PUSH
52733: LD_INT 1
52735: NEG
52736: PUSH
52737: LD_INT 3
52739: NEG
52740: PUSH
52741: EMPTY
52742: LIST
52743: LIST
52744: PUSH
52745: LD_INT 0
52747: PUSH
52748: LD_INT 3
52750: NEG
52751: PUSH
52752: EMPTY
52753: LIST
52754: LIST
52755: PUSH
52756: LD_INT 1
52758: PUSH
52759: LD_INT 2
52761: NEG
52762: PUSH
52763: EMPTY
52764: LIST
52765: LIST
52766: PUSH
52767: LD_INT 2
52769: PUSH
52770: LD_INT 1
52772: NEG
52773: PUSH
52774: EMPTY
52775: LIST
52776: LIST
52777: PUSH
52778: LD_INT 3
52780: PUSH
52781: LD_INT 0
52783: PUSH
52784: EMPTY
52785: LIST
52786: LIST
52787: PUSH
52788: LD_INT 3
52790: PUSH
52791: LD_INT 1
52793: PUSH
52794: EMPTY
52795: LIST
52796: LIST
52797: PUSH
52798: LD_INT 1
52800: PUSH
52801: LD_INT 3
52803: PUSH
52804: EMPTY
52805: LIST
52806: LIST
52807: PUSH
52808: LD_INT 0
52810: PUSH
52811: LD_INT 3
52813: PUSH
52814: EMPTY
52815: LIST
52816: LIST
52817: PUSH
52818: LD_INT 1
52820: NEG
52821: PUSH
52822: LD_INT 2
52824: PUSH
52825: EMPTY
52826: LIST
52827: LIST
52828: PUSH
52829: LD_INT 2
52831: NEG
52832: PUSH
52833: LD_INT 1
52835: PUSH
52836: EMPTY
52837: LIST
52838: LIST
52839: PUSH
52840: LD_INT 3
52842: NEG
52843: PUSH
52844: LD_INT 0
52846: PUSH
52847: EMPTY
52848: LIST
52849: LIST
52850: PUSH
52851: LD_INT 3
52853: NEG
52854: PUSH
52855: LD_INT 1
52857: NEG
52858: PUSH
52859: EMPTY
52860: LIST
52861: LIST
52862: PUSH
52863: EMPTY
52864: LIST
52865: LIST
52866: LIST
52867: LIST
52868: LIST
52869: LIST
52870: LIST
52871: LIST
52872: LIST
52873: LIST
52874: LIST
52875: LIST
52876: LIST
52877: LIST
52878: LIST
52879: LIST
52880: LIST
52881: LIST
52882: LIST
52883: LIST
52884: LIST
52885: LIST
52886: LIST
52887: LIST
52888: LIST
52889: LIST
52890: LIST
52891: LIST
52892: LIST
52893: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52894: LD_ADDR_VAR 0 47
52898: PUSH
52899: LD_INT 0
52901: PUSH
52902: LD_INT 0
52904: PUSH
52905: EMPTY
52906: LIST
52907: LIST
52908: PUSH
52909: LD_INT 0
52911: PUSH
52912: LD_INT 1
52914: NEG
52915: PUSH
52916: EMPTY
52917: LIST
52918: LIST
52919: PUSH
52920: LD_INT 1
52922: PUSH
52923: LD_INT 0
52925: PUSH
52926: EMPTY
52927: LIST
52928: LIST
52929: PUSH
52930: LD_INT 1
52932: PUSH
52933: LD_INT 1
52935: PUSH
52936: EMPTY
52937: LIST
52938: LIST
52939: PUSH
52940: LD_INT 0
52942: PUSH
52943: LD_INT 1
52945: PUSH
52946: EMPTY
52947: LIST
52948: LIST
52949: PUSH
52950: LD_INT 1
52952: NEG
52953: PUSH
52954: LD_INT 0
52956: PUSH
52957: EMPTY
52958: LIST
52959: LIST
52960: PUSH
52961: LD_INT 1
52963: NEG
52964: PUSH
52965: LD_INT 1
52967: NEG
52968: PUSH
52969: EMPTY
52970: LIST
52971: LIST
52972: PUSH
52973: LD_INT 1
52975: NEG
52976: PUSH
52977: LD_INT 2
52979: NEG
52980: PUSH
52981: EMPTY
52982: LIST
52983: LIST
52984: PUSH
52985: LD_INT 0
52987: PUSH
52988: LD_INT 2
52990: NEG
52991: PUSH
52992: EMPTY
52993: LIST
52994: LIST
52995: PUSH
52996: LD_INT 1
52998: PUSH
52999: LD_INT 1
53001: NEG
53002: PUSH
53003: EMPTY
53004: LIST
53005: LIST
53006: PUSH
53007: LD_INT 2
53009: NEG
53010: PUSH
53011: LD_INT 1
53013: NEG
53014: PUSH
53015: EMPTY
53016: LIST
53017: LIST
53018: PUSH
53019: LD_INT 2
53021: NEG
53022: PUSH
53023: LD_INT 2
53025: NEG
53026: PUSH
53027: EMPTY
53028: LIST
53029: LIST
53030: PUSH
53031: EMPTY
53032: LIST
53033: LIST
53034: LIST
53035: LIST
53036: LIST
53037: LIST
53038: LIST
53039: LIST
53040: LIST
53041: LIST
53042: LIST
53043: LIST
53044: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
53045: LD_ADDR_VAR 0 48
53049: PUSH
53050: LD_INT 0
53052: PUSH
53053: LD_INT 0
53055: PUSH
53056: EMPTY
53057: LIST
53058: LIST
53059: PUSH
53060: LD_INT 0
53062: PUSH
53063: LD_INT 1
53065: NEG
53066: PUSH
53067: EMPTY
53068: LIST
53069: LIST
53070: PUSH
53071: LD_INT 1
53073: PUSH
53074: LD_INT 0
53076: PUSH
53077: EMPTY
53078: LIST
53079: LIST
53080: PUSH
53081: LD_INT 1
53083: PUSH
53084: LD_INT 1
53086: PUSH
53087: EMPTY
53088: LIST
53089: LIST
53090: PUSH
53091: LD_INT 0
53093: PUSH
53094: LD_INT 1
53096: PUSH
53097: EMPTY
53098: LIST
53099: LIST
53100: PUSH
53101: LD_INT 1
53103: NEG
53104: PUSH
53105: LD_INT 0
53107: PUSH
53108: EMPTY
53109: LIST
53110: LIST
53111: PUSH
53112: LD_INT 1
53114: NEG
53115: PUSH
53116: LD_INT 1
53118: NEG
53119: PUSH
53120: EMPTY
53121: LIST
53122: LIST
53123: PUSH
53124: LD_INT 1
53126: NEG
53127: PUSH
53128: LD_INT 2
53130: NEG
53131: PUSH
53132: EMPTY
53133: LIST
53134: LIST
53135: PUSH
53136: LD_INT 0
53138: PUSH
53139: LD_INT 2
53141: NEG
53142: PUSH
53143: EMPTY
53144: LIST
53145: LIST
53146: PUSH
53147: LD_INT 1
53149: PUSH
53150: LD_INT 1
53152: NEG
53153: PUSH
53154: EMPTY
53155: LIST
53156: LIST
53157: PUSH
53158: LD_INT 2
53160: PUSH
53161: LD_INT 0
53163: PUSH
53164: EMPTY
53165: LIST
53166: LIST
53167: PUSH
53168: LD_INT 2
53170: PUSH
53171: LD_INT 1
53173: PUSH
53174: EMPTY
53175: LIST
53176: LIST
53177: PUSH
53178: EMPTY
53179: LIST
53180: LIST
53181: LIST
53182: LIST
53183: LIST
53184: LIST
53185: LIST
53186: LIST
53187: LIST
53188: LIST
53189: LIST
53190: LIST
53191: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
53192: LD_ADDR_VAR 0 49
53196: PUSH
53197: LD_INT 0
53199: PUSH
53200: LD_INT 0
53202: PUSH
53203: EMPTY
53204: LIST
53205: LIST
53206: PUSH
53207: LD_INT 0
53209: PUSH
53210: LD_INT 1
53212: NEG
53213: PUSH
53214: EMPTY
53215: LIST
53216: LIST
53217: PUSH
53218: LD_INT 1
53220: PUSH
53221: LD_INT 0
53223: PUSH
53224: EMPTY
53225: LIST
53226: LIST
53227: PUSH
53228: LD_INT 1
53230: PUSH
53231: LD_INT 1
53233: PUSH
53234: EMPTY
53235: LIST
53236: LIST
53237: PUSH
53238: LD_INT 0
53240: PUSH
53241: LD_INT 1
53243: PUSH
53244: EMPTY
53245: LIST
53246: LIST
53247: PUSH
53248: LD_INT 1
53250: NEG
53251: PUSH
53252: LD_INT 0
53254: PUSH
53255: EMPTY
53256: LIST
53257: LIST
53258: PUSH
53259: LD_INT 1
53261: NEG
53262: PUSH
53263: LD_INT 1
53265: NEG
53266: PUSH
53267: EMPTY
53268: LIST
53269: LIST
53270: PUSH
53271: LD_INT 1
53273: PUSH
53274: LD_INT 1
53276: NEG
53277: PUSH
53278: EMPTY
53279: LIST
53280: LIST
53281: PUSH
53282: LD_INT 2
53284: PUSH
53285: LD_INT 0
53287: PUSH
53288: EMPTY
53289: LIST
53290: LIST
53291: PUSH
53292: LD_INT 2
53294: PUSH
53295: LD_INT 1
53297: PUSH
53298: EMPTY
53299: LIST
53300: LIST
53301: PUSH
53302: LD_INT 2
53304: PUSH
53305: LD_INT 2
53307: PUSH
53308: EMPTY
53309: LIST
53310: LIST
53311: PUSH
53312: LD_INT 1
53314: PUSH
53315: LD_INT 2
53317: PUSH
53318: EMPTY
53319: LIST
53320: LIST
53321: PUSH
53322: EMPTY
53323: LIST
53324: LIST
53325: LIST
53326: LIST
53327: LIST
53328: LIST
53329: LIST
53330: LIST
53331: LIST
53332: LIST
53333: LIST
53334: LIST
53335: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
53336: LD_ADDR_VAR 0 50
53340: PUSH
53341: LD_INT 0
53343: PUSH
53344: LD_INT 0
53346: PUSH
53347: EMPTY
53348: LIST
53349: LIST
53350: PUSH
53351: LD_INT 0
53353: PUSH
53354: LD_INT 1
53356: NEG
53357: PUSH
53358: EMPTY
53359: LIST
53360: LIST
53361: PUSH
53362: LD_INT 1
53364: PUSH
53365: LD_INT 0
53367: PUSH
53368: EMPTY
53369: LIST
53370: LIST
53371: PUSH
53372: LD_INT 1
53374: PUSH
53375: LD_INT 1
53377: PUSH
53378: EMPTY
53379: LIST
53380: LIST
53381: PUSH
53382: LD_INT 0
53384: PUSH
53385: LD_INT 1
53387: PUSH
53388: EMPTY
53389: LIST
53390: LIST
53391: PUSH
53392: LD_INT 1
53394: NEG
53395: PUSH
53396: LD_INT 0
53398: PUSH
53399: EMPTY
53400: LIST
53401: LIST
53402: PUSH
53403: LD_INT 1
53405: NEG
53406: PUSH
53407: LD_INT 1
53409: NEG
53410: PUSH
53411: EMPTY
53412: LIST
53413: LIST
53414: PUSH
53415: LD_INT 2
53417: PUSH
53418: LD_INT 1
53420: PUSH
53421: EMPTY
53422: LIST
53423: LIST
53424: PUSH
53425: LD_INT 2
53427: PUSH
53428: LD_INT 2
53430: PUSH
53431: EMPTY
53432: LIST
53433: LIST
53434: PUSH
53435: LD_INT 1
53437: PUSH
53438: LD_INT 2
53440: PUSH
53441: EMPTY
53442: LIST
53443: LIST
53444: PUSH
53445: LD_INT 0
53447: PUSH
53448: LD_INT 2
53450: PUSH
53451: EMPTY
53452: LIST
53453: LIST
53454: PUSH
53455: LD_INT 1
53457: NEG
53458: PUSH
53459: LD_INT 1
53461: PUSH
53462: EMPTY
53463: LIST
53464: LIST
53465: PUSH
53466: EMPTY
53467: LIST
53468: LIST
53469: LIST
53470: LIST
53471: LIST
53472: LIST
53473: LIST
53474: LIST
53475: LIST
53476: LIST
53477: LIST
53478: LIST
53479: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
53480: LD_ADDR_VAR 0 51
53484: PUSH
53485: LD_INT 0
53487: PUSH
53488: LD_INT 0
53490: PUSH
53491: EMPTY
53492: LIST
53493: LIST
53494: PUSH
53495: LD_INT 0
53497: PUSH
53498: LD_INT 1
53500: NEG
53501: PUSH
53502: EMPTY
53503: LIST
53504: LIST
53505: PUSH
53506: LD_INT 1
53508: PUSH
53509: LD_INT 0
53511: PUSH
53512: EMPTY
53513: LIST
53514: LIST
53515: PUSH
53516: LD_INT 1
53518: PUSH
53519: LD_INT 1
53521: PUSH
53522: EMPTY
53523: LIST
53524: LIST
53525: PUSH
53526: LD_INT 0
53528: PUSH
53529: LD_INT 1
53531: PUSH
53532: EMPTY
53533: LIST
53534: LIST
53535: PUSH
53536: LD_INT 1
53538: NEG
53539: PUSH
53540: LD_INT 0
53542: PUSH
53543: EMPTY
53544: LIST
53545: LIST
53546: PUSH
53547: LD_INT 1
53549: NEG
53550: PUSH
53551: LD_INT 1
53553: NEG
53554: PUSH
53555: EMPTY
53556: LIST
53557: LIST
53558: PUSH
53559: LD_INT 1
53561: PUSH
53562: LD_INT 2
53564: PUSH
53565: EMPTY
53566: LIST
53567: LIST
53568: PUSH
53569: LD_INT 0
53571: PUSH
53572: LD_INT 2
53574: PUSH
53575: EMPTY
53576: LIST
53577: LIST
53578: PUSH
53579: LD_INT 1
53581: NEG
53582: PUSH
53583: LD_INT 1
53585: PUSH
53586: EMPTY
53587: LIST
53588: LIST
53589: PUSH
53590: LD_INT 2
53592: NEG
53593: PUSH
53594: LD_INT 0
53596: PUSH
53597: EMPTY
53598: LIST
53599: LIST
53600: PUSH
53601: LD_INT 2
53603: NEG
53604: PUSH
53605: LD_INT 1
53607: NEG
53608: PUSH
53609: EMPTY
53610: LIST
53611: LIST
53612: PUSH
53613: EMPTY
53614: LIST
53615: LIST
53616: LIST
53617: LIST
53618: LIST
53619: LIST
53620: LIST
53621: LIST
53622: LIST
53623: LIST
53624: LIST
53625: LIST
53626: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53627: LD_ADDR_VAR 0 52
53631: PUSH
53632: LD_INT 0
53634: PUSH
53635: LD_INT 0
53637: PUSH
53638: EMPTY
53639: LIST
53640: LIST
53641: PUSH
53642: LD_INT 0
53644: PUSH
53645: LD_INT 1
53647: NEG
53648: PUSH
53649: EMPTY
53650: LIST
53651: LIST
53652: PUSH
53653: LD_INT 1
53655: PUSH
53656: LD_INT 0
53658: PUSH
53659: EMPTY
53660: LIST
53661: LIST
53662: PUSH
53663: LD_INT 1
53665: PUSH
53666: LD_INT 1
53668: PUSH
53669: EMPTY
53670: LIST
53671: LIST
53672: PUSH
53673: LD_INT 0
53675: PUSH
53676: LD_INT 1
53678: PUSH
53679: EMPTY
53680: LIST
53681: LIST
53682: PUSH
53683: LD_INT 1
53685: NEG
53686: PUSH
53687: LD_INT 0
53689: PUSH
53690: EMPTY
53691: LIST
53692: LIST
53693: PUSH
53694: LD_INT 1
53696: NEG
53697: PUSH
53698: LD_INT 1
53700: NEG
53701: PUSH
53702: EMPTY
53703: LIST
53704: LIST
53705: PUSH
53706: LD_INT 1
53708: NEG
53709: PUSH
53710: LD_INT 2
53712: NEG
53713: PUSH
53714: EMPTY
53715: LIST
53716: LIST
53717: PUSH
53718: LD_INT 1
53720: NEG
53721: PUSH
53722: LD_INT 1
53724: PUSH
53725: EMPTY
53726: LIST
53727: LIST
53728: PUSH
53729: LD_INT 2
53731: NEG
53732: PUSH
53733: LD_INT 0
53735: PUSH
53736: EMPTY
53737: LIST
53738: LIST
53739: PUSH
53740: LD_INT 2
53742: NEG
53743: PUSH
53744: LD_INT 1
53746: NEG
53747: PUSH
53748: EMPTY
53749: LIST
53750: LIST
53751: PUSH
53752: LD_INT 2
53754: NEG
53755: PUSH
53756: LD_INT 2
53758: NEG
53759: PUSH
53760: EMPTY
53761: LIST
53762: LIST
53763: PUSH
53764: EMPTY
53765: LIST
53766: LIST
53767: LIST
53768: LIST
53769: LIST
53770: LIST
53771: LIST
53772: LIST
53773: LIST
53774: LIST
53775: LIST
53776: LIST
53777: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53778: LD_ADDR_VAR 0 53
53782: PUSH
53783: LD_INT 0
53785: PUSH
53786: LD_INT 0
53788: PUSH
53789: EMPTY
53790: LIST
53791: LIST
53792: PUSH
53793: LD_INT 0
53795: PUSH
53796: LD_INT 1
53798: NEG
53799: PUSH
53800: EMPTY
53801: LIST
53802: LIST
53803: PUSH
53804: LD_INT 1
53806: PUSH
53807: LD_INT 0
53809: PUSH
53810: EMPTY
53811: LIST
53812: LIST
53813: PUSH
53814: LD_INT 1
53816: PUSH
53817: LD_INT 1
53819: PUSH
53820: EMPTY
53821: LIST
53822: LIST
53823: PUSH
53824: LD_INT 0
53826: PUSH
53827: LD_INT 1
53829: PUSH
53830: EMPTY
53831: LIST
53832: LIST
53833: PUSH
53834: LD_INT 1
53836: NEG
53837: PUSH
53838: LD_INT 0
53840: PUSH
53841: EMPTY
53842: LIST
53843: LIST
53844: PUSH
53845: LD_INT 1
53847: NEG
53848: PUSH
53849: LD_INT 1
53851: NEG
53852: PUSH
53853: EMPTY
53854: LIST
53855: LIST
53856: PUSH
53857: LD_INT 1
53859: NEG
53860: PUSH
53861: LD_INT 2
53863: NEG
53864: PUSH
53865: EMPTY
53866: LIST
53867: LIST
53868: PUSH
53869: LD_INT 0
53871: PUSH
53872: LD_INT 2
53874: NEG
53875: PUSH
53876: EMPTY
53877: LIST
53878: LIST
53879: PUSH
53880: LD_INT 1
53882: PUSH
53883: LD_INT 1
53885: NEG
53886: PUSH
53887: EMPTY
53888: LIST
53889: LIST
53890: PUSH
53891: LD_INT 2
53893: PUSH
53894: LD_INT 0
53896: PUSH
53897: EMPTY
53898: LIST
53899: LIST
53900: PUSH
53901: LD_INT 2
53903: PUSH
53904: LD_INT 1
53906: PUSH
53907: EMPTY
53908: LIST
53909: LIST
53910: PUSH
53911: LD_INT 2
53913: PUSH
53914: LD_INT 2
53916: PUSH
53917: EMPTY
53918: LIST
53919: LIST
53920: PUSH
53921: LD_INT 1
53923: PUSH
53924: LD_INT 2
53926: PUSH
53927: EMPTY
53928: LIST
53929: LIST
53930: PUSH
53931: LD_INT 0
53933: PUSH
53934: LD_INT 2
53936: PUSH
53937: EMPTY
53938: LIST
53939: LIST
53940: PUSH
53941: LD_INT 1
53943: NEG
53944: PUSH
53945: LD_INT 1
53947: PUSH
53948: EMPTY
53949: LIST
53950: LIST
53951: PUSH
53952: LD_INT 2
53954: NEG
53955: PUSH
53956: LD_INT 0
53958: PUSH
53959: EMPTY
53960: LIST
53961: LIST
53962: PUSH
53963: LD_INT 2
53965: NEG
53966: PUSH
53967: LD_INT 1
53969: NEG
53970: PUSH
53971: EMPTY
53972: LIST
53973: LIST
53974: PUSH
53975: LD_INT 2
53977: NEG
53978: PUSH
53979: LD_INT 2
53981: NEG
53982: PUSH
53983: EMPTY
53984: LIST
53985: LIST
53986: PUSH
53987: EMPTY
53988: LIST
53989: LIST
53990: LIST
53991: LIST
53992: LIST
53993: LIST
53994: LIST
53995: LIST
53996: LIST
53997: LIST
53998: LIST
53999: LIST
54000: LIST
54001: LIST
54002: LIST
54003: LIST
54004: LIST
54005: LIST
54006: LIST
54007: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54008: LD_ADDR_VAR 0 54
54012: PUSH
54013: LD_INT 0
54015: PUSH
54016: LD_INT 0
54018: PUSH
54019: EMPTY
54020: LIST
54021: LIST
54022: PUSH
54023: LD_INT 0
54025: PUSH
54026: LD_INT 1
54028: NEG
54029: PUSH
54030: EMPTY
54031: LIST
54032: LIST
54033: PUSH
54034: LD_INT 1
54036: PUSH
54037: LD_INT 0
54039: PUSH
54040: EMPTY
54041: LIST
54042: LIST
54043: PUSH
54044: LD_INT 1
54046: PUSH
54047: LD_INT 1
54049: PUSH
54050: EMPTY
54051: LIST
54052: LIST
54053: PUSH
54054: LD_INT 0
54056: PUSH
54057: LD_INT 1
54059: PUSH
54060: EMPTY
54061: LIST
54062: LIST
54063: PUSH
54064: LD_INT 1
54066: NEG
54067: PUSH
54068: LD_INT 0
54070: PUSH
54071: EMPTY
54072: LIST
54073: LIST
54074: PUSH
54075: LD_INT 1
54077: NEG
54078: PUSH
54079: LD_INT 1
54081: NEG
54082: PUSH
54083: EMPTY
54084: LIST
54085: LIST
54086: PUSH
54087: LD_INT 1
54089: NEG
54090: PUSH
54091: LD_INT 2
54093: NEG
54094: PUSH
54095: EMPTY
54096: LIST
54097: LIST
54098: PUSH
54099: LD_INT 0
54101: PUSH
54102: LD_INT 2
54104: NEG
54105: PUSH
54106: EMPTY
54107: LIST
54108: LIST
54109: PUSH
54110: LD_INT 1
54112: PUSH
54113: LD_INT 1
54115: NEG
54116: PUSH
54117: EMPTY
54118: LIST
54119: LIST
54120: PUSH
54121: LD_INT 2
54123: PUSH
54124: LD_INT 0
54126: PUSH
54127: EMPTY
54128: LIST
54129: LIST
54130: PUSH
54131: LD_INT 2
54133: PUSH
54134: LD_INT 1
54136: PUSH
54137: EMPTY
54138: LIST
54139: LIST
54140: PUSH
54141: LD_INT 2
54143: PUSH
54144: LD_INT 2
54146: PUSH
54147: EMPTY
54148: LIST
54149: LIST
54150: PUSH
54151: LD_INT 1
54153: PUSH
54154: LD_INT 2
54156: PUSH
54157: EMPTY
54158: LIST
54159: LIST
54160: PUSH
54161: LD_INT 0
54163: PUSH
54164: LD_INT 2
54166: PUSH
54167: EMPTY
54168: LIST
54169: LIST
54170: PUSH
54171: LD_INT 1
54173: NEG
54174: PUSH
54175: LD_INT 1
54177: PUSH
54178: EMPTY
54179: LIST
54180: LIST
54181: PUSH
54182: LD_INT 2
54184: NEG
54185: PUSH
54186: LD_INT 0
54188: PUSH
54189: EMPTY
54190: LIST
54191: LIST
54192: PUSH
54193: LD_INT 2
54195: NEG
54196: PUSH
54197: LD_INT 1
54199: NEG
54200: PUSH
54201: EMPTY
54202: LIST
54203: LIST
54204: PUSH
54205: LD_INT 2
54207: NEG
54208: PUSH
54209: LD_INT 2
54211: NEG
54212: PUSH
54213: EMPTY
54214: LIST
54215: LIST
54216: PUSH
54217: EMPTY
54218: LIST
54219: LIST
54220: LIST
54221: LIST
54222: LIST
54223: LIST
54224: LIST
54225: LIST
54226: LIST
54227: LIST
54228: LIST
54229: LIST
54230: LIST
54231: LIST
54232: LIST
54233: LIST
54234: LIST
54235: LIST
54236: LIST
54237: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54238: LD_ADDR_VAR 0 55
54242: PUSH
54243: LD_INT 0
54245: PUSH
54246: LD_INT 0
54248: PUSH
54249: EMPTY
54250: LIST
54251: LIST
54252: PUSH
54253: LD_INT 0
54255: PUSH
54256: LD_INT 1
54258: NEG
54259: PUSH
54260: EMPTY
54261: LIST
54262: LIST
54263: PUSH
54264: LD_INT 1
54266: PUSH
54267: LD_INT 0
54269: PUSH
54270: EMPTY
54271: LIST
54272: LIST
54273: PUSH
54274: LD_INT 1
54276: PUSH
54277: LD_INT 1
54279: PUSH
54280: EMPTY
54281: LIST
54282: LIST
54283: PUSH
54284: LD_INT 0
54286: PUSH
54287: LD_INT 1
54289: PUSH
54290: EMPTY
54291: LIST
54292: LIST
54293: PUSH
54294: LD_INT 1
54296: NEG
54297: PUSH
54298: LD_INT 0
54300: PUSH
54301: EMPTY
54302: LIST
54303: LIST
54304: PUSH
54305: LD_INT 1
54307: NEG
54308: PUSH
54309: LD_INT 1
54311: NEG
54312: PUSH
54313: EMPTY
54314: LIST
54315: LIST
54316: PUSH
54317: LD_INT 1
54319: NEG
54320: PUSH
54321: LD_INT 2
54323: NEG
54324: PUSH
54325: EMPTY
54326: LIST
54327: LIST
54328: PUSH
54329: LD_INT 0
54331: PUSH
54332: LD_INT 2
54334: NEG
54335: PUSH
54336: EMPTY
54337: LIST
54338: LIST
54339: PUSH
54340: LD_INT 1
54342: PUSH
54343: LD_INT 1
54345: NEG
54346: PUSH
54347: EMPTY
54348: LIST
54349: LIST
54350: PUSH
54351: LD_INT 2
54353: PUSH
54354: LD_INT 0
54356: PUSH
54357: EMPTY
54358: LIST
54359: LIST
54360: PUSH
54361: LD_INT 2
54363: PUSH
54364: LD_INT 1
54366: PUSH
54367: EMPTY
54368: LIST
54369: LIST
54370: PUSH
54371: LD_INT 2
54373: PUSH
54374: LD_INT 2
54376: PUSH
54377: EMPTY
54378: LIST
54379: LIST
54380: PUSH
54381: LD_INT 1
54383: PUSH
54384: LD_INT 2
54386: PUSH
54387: EMPTY
54388: LIST
54389: LIST
54390: PUSH
54391: LD_INT 0
54393: PUSH
54394: LD_INT 2
54396: PUSH
54397: EMPTY
54398: LIST
54399: LIST
54400: PUSH
54401: LD_INT 1
54403: NEG
54404: PUSH
54405: LD_INT 1
54407: PUSH
54408: EMPTY
54409: LIST
54410: LIST
54411: PUSH
54412: LD_INT 2
54414: NEG
54415: PUSH
54416: LD_INT 0
54418: PUSH
54419: EMPTY
54420: LIST
54421: LIST
54422: PUSH
54423: LD_INT 2
54425: NEG
54426: PUSH
54427: LD_INT 1
54429: NEG
54430: PUSH
54431: EMPTY
54432: LIST
54433: LIST
54434: PUSH
54435: LD_INT 2
54437: NEG
54438: PUSH
54439: LD_INT 2
54441: NEG
54442: PUSH
54443: EMPTY
54444: LIST
54445: LIST
54446: PUSH
54447: EMPTY
54448: LIST
54449: LIST
54450: LIST
54451: LIST
54452: LIST
54453: LIST
54454: LIST
54455: LIST
54456: LIST
54457: LIST
54458: LIST
54459: LIST
54460: LIST
54461: LIST
54462: LIST
54463: LIST
54464: LIST
54465: LIST
54466: LIST
54467: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54468: LD_ADDR_VAR 0 56
54472: PUSH
54473: LD_INT 0
54475: PUSH
54476: LD_INT 0
54478: PUSH
54479: EMPTY
54480: LIST
54481: LIST
54482: PUSH
54483: LD_INT 0
54485: PUSH
54486: LD_INT 1
54488: NEG
54489: PUSH
54490: EMPTY
54491: LIST
54492: LIST
54493: PUSH
54494: LD_INT 1
54496: PUSH
54497: LD_INT 0
54499: PUSH
54500: EMPTY
54501: LIST
54502: LIST
54503: PUSH
54504: LD_INT 1
54506: PUSH
54507: LD_INT 1
54509: PUSH
54510: EMPTY
54511: LIST
54512: LIST
54513: PUSH
54514: LD_INT 0
54516: PUSH
54517: LD_INT 1
54519: PUSH
54520: EMPTY
54521: LIST
54522: LIST
54523: PUSH
54524: LD_INT 1
54526: NEG
54527: PUSH
54528: LD_INT 0
54530: PUSH
54531: EMPTY
54532: LIST
54533: LIST
54534: PUSH
54535: LD_INT 1
54537: NEG
54538: PUSH
54539: LD_INT 1
54541: NEG
54542: PUSH
54543: EMPTY
54544: LIST
54545: LIST
54546: PUSH
54547: LD_INT 1
54549: NEG
54550: PUSH
54551: LD_INT 2
54553: NEG
54554: PUSH
54555: EMPTY
54556: LIST
54557: LIST
54558: PUSH
54559: LD_INT 0
54561: PUSH
54562: LD_INT 2
54564: NEG
54565: PUSH
54566: EMPTY
54567: LIST
54568: LIST
54569: PUSH
54570: LD_INT 1
54572: PUSH
54573: LD_INT 1
54575: NEG
54576: PUSH
54577: EMPTY
54578: LIST
54579: LIST
54580: PUSH
54581: LD_INT 2
54583: PUSH
54584: LD_INT 0
54586: PUSH
54587: EMPTY
54588: LIST
54589: LIST
54590: PUSH
54591: LD_INT 2
54593: PUSH
54594: LD_INT 1
54596: PUSH
54597: EMPTY
54598: LIST
54599: LIST
54600: PUSH
54601: LD_INT 2
54603: PUSH
54604: LD_INT 2
54606: PUSH
54607: EMPTY
54608: LIST
54609: LIST
54610: PUSH
54611: LD_INT 1
54613: PUSH
54614: LD_INT 2
54616: PUSH
54617: EMPTY
54618: LIST
54619: LIST
54620: PUSH
54621: LD_INT 0
54623: PUSH
54624: LD_INT 2
54626: PUSH
54627: EMPTY
54628: LIST
54629: LIST
54630: PUSH
54631: LD_INT 1
54633: NEG
54634: PUSH
54635: LD_INT 1
54637: PUSH
54638: EMPTY
54639: LIST
54640: LIST
54641: PUSH
54642: LD_INT 2
54644: NEG
54645: PUSH
54646: LD_INT 0
54648: PUSH
54649: EMPTY
54650: LIST
54651: LIST
54652: PUSH
54653: LD_INT 2
54655: NEG
54656: PUSH
54657: LD_INT 1
54659: NEG
54660: PUSH
54661: EMPTY
54662: LIST
54663: LIST
54664: PUSH
54665: LD_INT 2
54667: NEG
54668: PUSH
54669: LD_INT 2
54671: NEG
54672: PUSH
54673: EMPTY
54674: LIST
54675: LIST
54676: PUSH
54677: EMPTY
54678: LIST
54679: LIST
54680: LIST
54681: LIST
54682: LIST
54683: LIST
54684: LIST
54685: LIST
54686: LIST
54687: LIST
54688: LIST
54689: LIST
54690: LIST
54691: LIST
54692: LIST
54693: LIST
54694: LIST
54695: LIST
54696: LIST
54697: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54698: LD_ADDR_VAR 0 57
54702: PUSH
54703: LD_INT 0
54705: PUSH
54706: LD_INT 0
54708: PUSH
54709: EMPTY
54710: LIST
54711: LIST
54712: PUSH
54713: LD_INT 0
54715: PUSH
54716: LD_INT 1
54718: NEG
54719: PUSH
54720: EMPTY
54721: LIST
54722: LIST
54723: PUSH
54724: LD_INT 1
54726: PUSH
54727: LD_INT 0
54729: PUSH
54730: EMPTY
54731: LIST
54732: LIST
54733: PUSH
54734: LD_INT 1
54736: PUSH
54737: LD_INT 1
54739: PUSH
54740: EMPTY
54741: LIST
54742: LIST
54743: PUSH
54744: LD_INT 0
54746: PUSH
54747: LD_INT 1
54749: PUSH
54750: EMPTY
54751: LIST
54752: LIST
54753: PUSH
54754: LD_INT 1
54756: NEG
54757: PUSH
54758: LD_INT 0
54760: PUSH
54761: EMPTY
54762: LIST
54763: LIST
54764: PUSH
54765: LD_INT 1
54767: NEG
54768: PUSH
54769: LD_INT 1
54771: NEG
54772: PUSH
54773: EMPTY
54774: LIST
54775: LIST
54776: PUSH
54777: LD_INT 1
54779: NEG
54780: PUSH
54781: LD_INT 2
54783: NEG
54784: PUSH
54785: EMPTY
54786: LIST
54787: LIST
54788: PUSH
54789: LD_INT 0
54791: PUSH
54792: LD_INT 2
54794: NEG
54795: PUSH
54796: EMPTY
54797: LIST
54798: LIST
54799: PUSH
54800: LD_INT 1
54802: PUSH
54803: LD_INT 1
54805: NEG
54806: PUSH
54807: EMPTY
54808: LIST
54809: LIST
54810: PUSH
54811: LD_INT 2
54813: PUSH
54814: LD_INT 0
54816: PUSH
54817: EMPTY
54818: LIST
54819: LIST
54820: PUSH
54821: LD_INT 2
54823: PUSH
54824: LD_INT 1
54826: PUSH
54827: EMPTY
54828: LIST
54829: LIST
54830: PUSH
54831: LD_INT 2
54833: PUSH
54834: LD_INT 2
54836: PUSH
54837: EMPTY
54838: LIST
54839: LIST
54840: PUSH
54841: LD_INT 1
54843: PUSH
54844: LD_INT 2
54846: PUSH
54847: EMPTY
54848: LIST
54849: LIST
54850: PUSH
54851: LD_INT 0
54853: PUSH
54854: LD_INT 2
54856: PUSH
54857: EMPTY
54858: LIST
54859: LIST
54860: PUSH
54861: LD_INT 1
54863: NEG
54864: PUSH
54865: LD_INT 1
54867: PUSH
54868: EMPTY
54869: LIST
54870: LIST
54871: PUSH
54872: LD_INT 2
54874: NEG
54875: PUSH
54876: LD_INT 0
54878: PUSH
54879: EMPTY
54880: LIST
54881: LIST
54882: PUSH
54883: LD_INT 2
54885: NEG
54886: PUSH
54887: LD_INT 1
54889: NEG
54890: PUSH
54891: EMPTY
54892: LIST
54893: LIST
54894: PUSH
54895: LD_INT 2
54897: NEG
54898: PUSH
54899: LD_INT 2
54901: NEG
54902: PUSH
54903: EMPTY
54904: LIST
54905: LIST
54906: PUSH
54907: EMPTY
54908: LIST
54909: LIST
54910: LIST
54911: LIST
54912: LIST
54913: LIST
54914: LIST
54915: LIST
54916: LIST
54917: LIST
54918: LIST
54919: LIST
54920: LIST
54921: LIST
54922: LIST
54923: LIST
54924: LIST
54925: LIST
54926: LIST
54927: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54928: LD_ADDR_VAR 0 58
54932: PUSH
54933: LD_INT 0
54935: PUSH
54936: LD_INT 0
54938: PUSH
54939: EMPTY
54940: LIST
54941: LIST
54942: PUSH
54943: LD_INT 0
54945: PUSH
54946: LD_INT 1
54948: NEG
54949: PUSH
54950: EMPTY
54951: LIST
54952: LIST
54953: PUSH
54954: LD_INT 1
54956: PUSH
54957: LD_INT 0
54959: PUSH
54960: EMPTY
54961: LIST
54962: LIST
54963: PUSH
54964: LD_INT 1
54966: PUSH
54967: LD_INT 1
54969: PUSH
54970: EMPTY
54971: LIST
54972: LIST
54973: PUSH
54974: LD_INT 0
54976: PUSH
54977: LD_INT 1
54979: PUSH
54980: EMPTY
54981: LIST
54982: LIST
54983: PUSH
54984: LD_INT 1
54986: NEG
54987: PUSH
54988: LD_INT 0
54990: PUSH
54991: EMPTY
54992: LIST
54993: LIST
54994: PUSH
54995: LD_INT 1
54997: NEG
54998: PUSH
54999: LD_INT 1
55001: NEG
55002: PUSH
55003: EMPTY
55004: LIST
55005: LIST
55006: PUSH
55007: LD_INT 1
55009: NEG
55010: PUSH
55011: LD_INT 2
55013: NEG
55014: PUSH
55015: EMPTY
55016: LIST
55017: LIST
55018: PUSH
55019: LD_INT 0
55021: PUSH
55022: LD_INT 2
55024: NEG
55025: PUSH
55026: EMPTY
55027: LIST
55028: LIST
55029: PUSH
55030: LD_INT 1
55032: PUSH
55033: LD_INT 1
55035: NEG
55036: PUSH
55037: EMPTY
55038: LIST
55039: LIST
55040: PUSH
55041: LD_INT 2
55043: PUSH
55044: LD_INT 0
55046: PUSH
55047: EMPTY
55048: LIST
55049: LIST
55050: PUSH
55051: LD_INT 2
55053: PUSH
55054: LD_INT 1
55056: PUSH
55057: EMPTY
55058: LIST
55059: LIST
55060: PUSH
55061: LD_INT 2
55063: PUSH
55064: LD_INT 2
55066: PUSH
55067: EMPTY
55068: LIST
55069: LIST
55070: PUSH
55071: LD_INT 1
55073: PUSH
55074: LD_INT 2
55076: PUSH
55077: EMPTY
55078: LIST
55079: LIST
55080: PUSH
55081: LD_INT 0
55083: PUSH
55084: LD_INT 2
55086: PUSH
55087: EMPTY
55088: LIST
55089: LIST
55090: PUSH
55091: LD_INT 1
55093: NEG
55094: PUSH
55095: LD_INT 1
55097: PUSH
55098: EMPTY
55099: LIST
55100: LIST
55101: PUSH
55102: LD_INT 2
55104: NEG
55105: PUSH
55106: LD_INT 0
55108: PUSH
55109: EMPTY
55110: LIST
55111: LIST
55112: PUSH
55113: LD_INT 2
55115: NEG
55116: PUSH
55117: LD_INT 1
55119: NEG
55120: PUSH
55121: EMPTY
55122: LIST
55123: LIST
55124: PUSH
55125: LD_INT 2
55127: NEG
55128: PUSH
55129: LD_INT 2
55131: NEG
55132: PUSH
55133: EMPTY
55134: LIST
55135: LIST
55136: PUSH
55137: EMPTY
55138: LIST
55139: LIST
55140: LIST
55141: LIST
55142: LIST
55143: LIST
55144: LIST
55145: LIST
55146: LIST
55147: LIST
55148: LIST
55149: LIST
55150: LIST
55151: LIST
55152: LIST
55153: LIST
55154: LIST
55155: LIST
55156: LIST
55157: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55158: LD_ADDR_VAR 0 59
55162: PUSH
55163: LD_INT 0
55165: PUSH
55166: LD_INT 0
55168: PUSH
55169: EMPTY
55170: LIST
55171: LIST
55172: PUSH
55173: LD_INT 0
55175: PUSH
55176: LD_INT 1
55178: NEG
55179: PUSH
55180: EMPTY
55181: LIST
55182: LIST
55183: PUSH
55184: LD_INT 1
55186: PUSH
55187: LD_INT 0
55189: PUSH
55190: EMPTY
55191: LIST
55192: LIST
55193: PUSH
55194: LD_INT 1
55196: PUSH
55197: LD_INT 1
55199: PUSH
55200: EMPTY
55201: LIST
55202: LIST
55203: PUSH
55204: LD_INT 0
55206: PUSH
55207: LD_INT 1
55209: PUSH
55210: EMPTY
55211: LIST
55212: LIST
55213: PUSH
55214: LD_INT 1
55216: NEG
55217: PUSH
55218: LD_INT 0
55220: PUSH
55221: EMPTY
55222: LIST
55223: LIST
55224: PUSH
55225: LD_INT 1
55227: NEG
55228: PUSH
55229: LD_INT 1
55231: NEG
55232: PUSH
55233: EMPTY
55234: LIST
55235: LIST
55236: PUSH
55237: EMPTY
55238: LIST
55239: LIST
55240: LIST
55241: LIST
55242: LIST
55243: LIST
55244: LIST
55245: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55246: LD_ADDR_VAR 0 60
55250: PUSH
55251: LD_INT 0
55253: PUSH
55254: LD_INT 0
55256: PUSH
55257: EMPTY
55258: LIST
55259: LIST
55260: PUSH
55261: LD_INT 0
55263: PUSH
55264: LD_INT 1
55266: NEG
55267: PUSH
55268: EMPTY
55269: LIST
55270: LIST
55271: PUSH
55272: LD_INT 1
55274: PUSH
55275: LD_INT 0
55277: PUSH
55278: EMPTY
55279: LIST
55280: LIST
55281: PUSH
55282: LD_INT 1
55284: PUSH
55285: LD_INT 1
55287: PUSH
55288: EMPTY
55289: LIST
55290: LIST
55291: PUSH
55292: LD_INT 0
55294: PUSH
55295: LD_INT 1
55297: PUSH
55298: EMPTY
55299: LIST
55300: LIST
55301: PUSH
55302: LD_INT 1
55304: NEG
55305: PUSH
55306: LD_INT 0
55308: PUSH
55309: EMPTY
55310: LIST
55311: LIST
55312: PUSH
55313: LD_INT 1
55315: NEG
55316: PUSH
55317: LD_INT 1
55319: NEG
55320: PUSH
55321: EMPTY
55322: LIST
55323: LIST
55324: PUSH
55325: EMPTY
55326: LIST
55327: LIST
55328: LIST
55329: LIST
55330: LIST
55331: LIST
55332: LIST
55333: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55334: LD_ADDR_VAR 0 61
55338: PUSH
55339: LD_INT 0
55341: PUSH
55342: LD_INT 0
55344: PUSH
55345: EMPTY
55346: LIST
55347: LIST
55348: PUSH
55349: LD_INT 0
55351: PUSH
55352: LD_INT 1
55354: NEG
55355: PUSH
55356: EMPTY
55357: LIST
55358: LIST
55359: PUSH
55360: LD_INT 1
55362: PUSH
55363: LD_INT 0
55365: PUSH
55366: EMPTY
55367: LIST
55368: LIST
55369: PUSH
55370: LD_INT 1
55372: PUSH
55373: LD_INT 1
55375: PUSH
55376: EMPTY
55377: LIST
55378: LIST
55379: PUSH
55380: LD_INT 0
55382: PUSH
55383: LD_INT 1
55385: PUSH
55386: EMPTY
55387: LIST
55388: LIST
55389: PUSH
55390: LD_INT 1
55392: NEG
55393: PUSH
55394: LD_INT 0
55396: PUSH
55397: EMPTY
55398: LIST
55399: LIST
55400: PUSH
55401: LD_INT 1
55403: NEG
55404: PUSH
55405: LD_INT 1
55407: NEG
55408: PUSH
55409: EMPTY
55410: LIST
55411: LIST
55412: PUSH
55413: EMPTY
55414: LIST
55415: LIST
55416: LIST
55417: LIST
55418: LIST
55419: LIST
55420: LIST
55421: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55422: LD_ADDR_VAR 0 62
55426: PUSH
55427: LD_INT 0
55429: PUSH
55430: LD_INT 0
55432: PUSH
55433: EMPTY
55434: LIST
55435: LIST
55436: PUSH
55437: LD_INT 0
55439: PUSH
55440: LD_INT 1
55442: NEG
55443: PUSH
55444: EMPTY
55445: LIST
55446: LIST
55447: PUSH
55448: LD_INT 1
55450: PUSH
55451: LD_INT 0
55453: PUSH
55454: EMPTY
55455: LIST
55456: LIST
55457: PUSH
55458: LD_INT 1
55460: PUSH
55461: LD_INT 1
55463: PUSH
55464: EMPTY
55465: LIST
55466: LIST
55467: PUSH
55468: LD_INT 0
55470: PUSH
55471: LD_INT 1
55473: PUSH
55474: EMPTY
55475: LIST
55476: LIST
55477: PUSH
55478: LD_INT 1
55480: NEG
55481: PUSH
55482: LD_INT 0
55484: PUSH
55485: EMPTY
55486: LIST
55487: LIST
55488: PUSH
55489: LD_INT 1
55491: NEG
55492: PUSH
55493: LD_INT 1
55495: NEG
55496: PUSH
55497: EMPTY
55498: LIST
55499: LIST
55500: PUSH
55501: EMPTY
55502: LIST
55503: LIST
55504: LIST
55505: LIST
55506: LIST
55507: LIST
55508: LIST
55509: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55510: LD_ADDR_VAR 0 63
55514: PUSH
55515: LD_INT 0
55517: PUSH
55518: LD_INT 0
55520: PUSH
55521: EMPTY
55522: LIST
55523: LIST
55524: PUSH
55525: LD_INT 0
55527: PUSH
55528: LD_INT 1
55530: NEG
55531: PUSH
55532: EMPTY
55533: LIST
55534: LIST
55535: PUSH
55536: LD_INT 1
55538: PUSH
55539: LD_INT 0
55541: PUSH
55542: EMPTY
55543: LIST
55544: LIST
55545: PUSH
55546: LD_INT 1
55548: PUSH
55549: LD_INT 1
55551: PUSH
55552: EMPTY
55553: LIST
55554: LIST
55555: PUSH
55556: LD_INT 0
55558: PUSH
55559: LD_INT 1
55561: PUSH
55562: EMPTY
55563: LIST
55564: LIST
55565: PUSH
55566: LD_INT 1
55568: NEG
55569: PUSH
55570: LD_INT 0
55572: PUSH
55573: EMPTY
55574: LIST
55575: LIST
55576: PUSH
55577: LD_INT 1
55579: NEG
55580: PUSH
55581: LD_INT 1
55583: NEG
55584: PUSH
55585: EMPTY
55586: LIST
55587: LIST
55588: PUSH
55589: EMPTY
55590: LIST
55591: LIST
55592: LIST
55593: LIST
55594: LIST
55595: LIST
55596: LIST
55597: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55598: LD_ADDR_VAR 0 64
55602: PUSH
55603: LD_INT 0
55605: PUSH
55606: LD_INT 0
55608: PUSH
55609: EMPTY
55610: LIST
55611: LIST
55612: PUSH
55613: LD_INT 0
55615: PUSH
55616: LD_INT 1
55618: NEG
55619: PUSH
55620: EMPTY
55621: LIST
55622: LIST
55623: PUSH
55624: LD_INT 1
55626: PUSH
55627: LD_INT 0
55629: PUSH
55630: EMPTY
55631: LIST
55632: LIST
55633: PUSH
55634: LD_INT 1
55636: PUSH
55637: LD_INT 1
55639: PUSH
55640: EMPTY
55641: LIST
55642: LIST
55643: PUSH
55644: LD_INT 0
55646: PUSH
55647: LD_INT 1
55649: PUSH
55650: EMPTY
55651: LIST
55652: LIST
55653: PUSH
55654: LD_INT 1
55656: NEG
55657: PUSH
55658: LD_INT 0
55660: PUSH
55661: EMPTY
55662: LIST
55663: LIST
55664: PUSH
55665: LD_INT 1
55667: NEG
55668: PUSH
55669: LD_INT 1
55671: NEG
55672: PUSH
55673: EMPTY
55674: LIST
55675: LIST
55676: PUSH
55677: EMPTY
55678: LIST
55679: LIST
55680: LIST
55681: LIST
55682: LIST
55683: LIST
55684: LIST
55685: ST_TO_ADDR
// end ; 1 :
55686: GO 61583
55688: LD_INT 1
55690: DOUBLE
55691: EQUAL
55692: IFTRUE 55696
55694: GO 58319
55696: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55697: LD_ADDR_VAR 0 11
55701: PUSH
55702: LD_INT 1
55704: NEG
55705: PUSH
55706: LD_INT 3
55708: NEG
55709: PUSH
55710: EMPTY
55711: LIST
55712: LIST
55713: PUSH
55714: LD_INT 0
55716: PUSH
55717: LD_INT 3
55719: NEG
55720: PUSH
55721: EMPTY
55722: LIST
55723: LIST
55724: PUSH
55725: LD_INT 1
55727: PUSH
55728: LD_INT 2
55730: NEG
55731: PUSH
55732: EMPTY
55733: LIST
55734: LIST
55735: PUSH
55736: EMPTY
55737: LIST
55738: LIST
55739: LIST
55740: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55741: LD_ADDR_VAR 0 12
55745: PUSH
55746: LD_INT 2
55748: PUSH
55749: LD_INT 1
55751: NEG
55752: PUSH
55753: EMPTY
55754: LIST
55755: LIST
55756: PUSH
55757: LD_INT 3
55759: PUSH
55760: LD_INT 0
55762: PUSH
55763: EMPTY
55764: LIST
55765: LIST
55766: PUSH
55767: LD_INT 3
55769: PUSH
55770: LD_INT 1
55772: PUSH
55773: EMPTY
55774: LIST
55775: LIST
55776: PUSH
55777: EMPTY
55778: LIST
55779: LIST
55780: LIST
55781: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55782: LD_ADDR_VAR 0 13
55786: PUSH
55787: LD_INT 3
55789: PUSH
55790: LD_INT 2
55792: PUSH
55793: EMPTY
55794: LIST
55795: LIST
55796: PUSH
55797: LD_INT 3
55799: PUSH
55800: LD_INT 3
55802: PUSH
55803: EMPTY
55804: LIST
55805: LIST
55806: PUSH
55807: LD_INT 2
55809: PUSH
55810: LD_INT 3
55812: PUSH
55813: EMPTY
55814: LIST
55815: LIST
55816: PUSH
55817: EMPTY
55818: LIST
55819: LIST
55820: LIST
55821: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55822: LD_ADDR_VAR 0 14
55826: PUSH
55827: LD_INT 1
55829: PUSH
55830: LD_INT 3
55832: PUSH
55833: EMPTY
55834: LIST
55835: LIST
55836: PUSH
55837: LD_INT 0
55839: PUSH
55840: LD_INT 3
55842: PUSH
55843: EMPTY
55844: LIST
55845: LIST
55846: PUSH
55847: LD_INT 1
55849: NEG
55850: PUSH
55851: LD_INT 2
55853: PUSH
55854: EMPTY
55855: LIST
55856: LIST
55857: PUSH
55858: EMPTY
55859: LIST
55860: LIST
55861: LIST
55862: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55863: LD_ADDR_VAR 0 15
55867: PUSH
55868: LD_INT 2
55870: NEG
55871: PUSH
55872: LD_INT 1
55874: PUSH
55875: EMPTY
55876: LIST
55877: LIST
55878: PUSH
55879: LD_INT 3
55881: NEG
55882: PUSH
55883: LD_INT 0
55885: PUSH
55886: EMPTY
55887: LIST
55888: LIST
55889: PUSH
55890: LD_INT 3
55892: NEG
55893: PUSH
55894: LD_INT 1
55896: NEG
55897: PUSH
55898: EMPTY
55899: LIST
55900: LIST
55901: PUSH
55902: EMPTY
55903: LIST
55904: LIST
55905: LIST
55906: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55907: LD_ADDR_VAR 0 16
55911: PUSH
55912: LD_INT 2
55914: NEG
55915: PUSH
55916: LD_INT 3
55918: NEG
55919: PUSH
55920: EMPTY
55921: LIST
55922: LIST
55923: PUSH
55924: LD_INT 3
55926: NEG
55927: PUSH
55928: LD_INT 2
55930: NEG
55931: PUSH
55932: EMPTY
55933: LIST
55934: LIST
55935: PUSH
55936: LD_INT 3
55938: NEG
55939: PUSH
55940: LD_INT 3
55942: NEG
55943: PUSH
55944: EMPTY
55945: LIST
55946: LIST
55947: PUSH
55948: EMPTY
55949: LIST
55950: LIST
55951: LIST
55952: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55953: LD_ADDR_VAR 0 17
55957: PUSH
55958: LD_INT 1
55960: NEG
55961: PUSH
55962: LD_INT 3
55964: NEG
55965: PUSH
55966: EMPTY
55967: LIST
55968: LIST
55969: PUSH
55970: LD_INT 0
55972: PUSH
55973: LD_INT 3
55975: NEG
55976: PUSH
55977: EMPTY
55978: LIST
55979: LIST
55980: PUSH
55981: LD_INT 1
55983: PUSH
55984: LD_INT 2
55986: NEG
55987: PUSH
55988: EMPTY
55989: LIST
55990: LIST
55991: PUSH
55992: EMPTY
55993: LIST
55994: LIST
55995: LIST
55996: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55997: LD_ADDR_VAR 0 18
56001: PUSH
56002: LD_INT 2
56004: PUSH
56005: LD_INT 1
56007: NEG
56008: PUSH
56009: EMPTY
56010: LIST
56011: LIST
56012: PUSH
56013: LD_INT 3
56015: PUSH
56016: LD_INT 0
56018: PUSH
56019: EMPTY
56020: LIST
56021: LIST
56022: PUSH
56023: LD_INT 3
56025: PUSH
56026: LD_INT 1
56028: PUSH
56029: EMPTY
56030: LIST
56031: LIST
56032: PUSH
56033: EMPTY
56034: LIST
56035: LIST
56036: LIST
56037: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56038: LD_ADDR_VAR 0 19
56042: PUSH
56043: LD_INT 3
56045: PUSH
56046: LD_INT 2
56048: PUSH
56049: EMPTY
56050: LIST
56051: LIST
56052: PUSH
56053: LD_INT 3
56055: PUSH
56056: LD_INT 3
56058: PUSH
56059: EMPTY
56060: LIST
56061: LIST
56062: PUSH
56063: LD_INT 2
56065: PUSH
56066: LD_INT 3
56068: PUSH
56069: EMPTY
56070: LIST
56071: LIST
56072: PUSH
56073: EMPTY
56074: LIST
56075: LIST
56076: LIST
56077: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56078: LD_ADDR_VAR 0 20
56082: PUSH
56083: LD_INT 1
56085: PUSH
56086: LD_INT 3
56088: PUSH
56089: EMPTY
56090: LIST
56091: LIST
56092: PUSH
56093: LD_INT 0
56095: PUSH
56096: LD_INT 3
56098: PUSH
56099: EMPTY
56100: LIST
56101: LIST
56102: PUSH
56103: LD_INT 1
56105: NEG
56106: PUSH
56107: LD_INT 2
56109: PUSH
56110: EMPTY
56111: LIST
56112: LIST
56113: PUSH
56114: EMPTY
56115: LIST
56116: LIST
56117: LIST
56118: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56119: LD_ADDR_VAR 0 21
56123: PUSH
56124: LD_INT 2
56126: NEG
56127: PUSH
56128: LD_INT 1
56130: PUSH
56131: EMPTY
56132: LIST
56133: LIST
56134: PUSH
56135: LD_INT 3
56137: NEG
56138: PUSH
56139: LD_INT 0
56141: PUSH
56142: EMPTY
56143: LIST
56144: LIST
56145: PUSH
56146: LD_INT 3
56148: NEG
56149: PUSH
56150: LD_INT 1
56152: NEG
56153: PUSH
56154: EMPTY
56155: LIST
56156: LIST
56157: PUSH
56158: EMPTY
56159: LIST
56160: LIST
56161: LIST
56162: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56163: LD_ADDR_VAR 0 22
56167: PUSH
56168: LD_INT 2
56170: NEG
56171: PUSH
56172: LD_INT 3
56174: NEG
56175: PUSH
56176: EMPTY
56177: LIST
56178: LIST
56179: PUSH
56180: LD_INT 3
56182: NEG
56183: PUSH
56184: LD_INT 2
56186: NEG
56187: PUSH
56188: EMPTY
56189: LIST
56190: LIST
56191: PUSH
56192: LD_INT 3
56194: NEG
56195: PUSH
56196: LD_INT 3
56198: NEG
56199: PUSH
56200: EMPTY
56201: LIST
56202: LIST
56203: PUSH
56204: EMPTY
56205: LIST
56206: LIST
56207: LIST
56208: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
56209: LD_ADDR_VAR 0 23
56213: PUSH
56214: LD_INT 0
56216: PUSH
56217: LD_INT 3
56219: NEG
56220: PUSH
56221: EMPTY
56222: LIST
56223: LIST
56224: PUSH
56225: LD_INT 1
56227: NEG
56228: PUSH
56229: LD_INT 4
56231: NEG
56232: PUSH
56233: EMPTY
56234: LIST
56235: LIST
56236: PUSH
56237: LD_INT 1
56239: PUSH
56240: LD_INT 3
56242: NEG
56243: PUSH
56244: EMPTY
56245: LIST
56246: LIST
56247: PUSH
56248: EMPTY
56249: LIST
56250: LIST
56251: LIST
56252: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
56253: LD_ADDR_VAR 0 24
56257: PUSH
56258: LD_INT 3
56260: PUSH
56261: LD_INT 0
56263: PUSH
56264: EMPTY
56265: LIST
56266: LIST
56267: PUSH
56268: LD_INT 3
56270: PUSH
56271: LD_INT 1
56273: NEG
56274: PUSH
56275: EMPTY
56276: LIST
56277: LIST
56278: PUSH
56279: LD_INT 4
56281: PUSH
56282: LD_INT 1
56284: PUSH
56285: EMPTY
56286: LIST
56287: LIST
56288: PUSH
56289: EMPTY
56290: LIST
56291: LIST
56292: LIST
56293: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
56294: LD_ADDR_VAR 0 25
56298: PUSH
56299: LD_INT 3
56301: PUSH
56302: LD_INT 3
56304: PUSH
56305: EMPTY
56306: LIST
56307: LIST
56308: PUSH
56309: LD_INT 4
56311: PUSH
56312: LD_INT 3
56314: PUSH
56315: EMPTY
56316: LIST
56317: LIST
56318: PUSH
56319: LD_INT 3
56321: PUSH
56322: LD_INT 4
56324: PUSH
56325: EMPTY
56326: LIST
56327: LIST
56328: PUSH
56329: EMPTY
56330: LIST
56331: LIST
56332: LIST
56333: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
56334: LD_ADDR_VAR 0 26
56338: PUSH
56339: LD_INT 0
56341: PUSH
56342: LD_INT 3
56344: PUSH
56345: EMPTY
56346: LIST
56347: LIST
56348: PUSH
56349: LD_INT 1
56351: PUSH
56352: LD_INT 4
56354: PUSH
56355: EMPTY
56356: LIST
56357: LIST
56358: PUSH
56359: LD_INT 1
56361: NEG
56362: PUSH
56363: LD_INT 3
56365: PUSH
56366: EMPTY
56367: LIST
56368: LIST
56369: PUSH
56370: EMPTY
56371: LIST
56372: LIST
56373: LIST
56374: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
56375: LD_ADDR_VAR 0 27
56379: PUSH
56380: LD_INT 3
56382: NEG
56383: PUSH
56384: LD_INT 0
56386: PUSH
56387: EMPTY
56388: LIST
56389: LIST
56390: PUSH
56391: LD_INT 3
56393: NEG
56394: PUSH
56395: LD_INT 1
56397: PUSH
56398: EMPTY
56399: LIST
56400: LIST
56401: PUSH
56402: LD_INT 4
56404: NEG
56405: PUSH
56406: LD_INT 1
56408: NEG
56409: PUSH
56410: EMPTY
56411: LIST
56412: LIST
56413: PUSH
56414: EMPTY
56415: LIST
56416: LIST
56417: LIST
56418: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
56419: LD_ADDR_VAR 0 28
56423: PUSH
56424: LD_INT 3
56426: NEG
56427: PUSH
56428: LD_INT 3
56430: NEG
56431: PUSH
56432: EMPTY
56433: LIST
56434: LIST
56435: PUSH
56436: LD_INT 3
56438: NEG
56439: PUSH
56440: LD_INT 4
56442: NEG
56443: PUSH
56444: EMPTY
56445: LIST
56446: LIST
56447: PUSH
56448: LD_INT 4
56450: NEG
56451: PUSH
56452: LD_INT 3
56454: NEG
56455: PUSH
56456: EMPTY
56457: LIST
56458: LIST
56459: PUSH
56460: EMPTY
56461: LIST
56462: LIST
56463: LIST
56464: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
56465: LD_ADDR_VAR 0 29
56469: PUSH
56470: LD_INT 1
56472: NEG
56473: PUSH
56474: LD_INT 3
56476: NEG
56477: PUSH
56478: EMPTY
56479: LIST
56480: LIST
56481: PUSH
56482: LD_INT 0
56484: PUSH
56485: LD_INT 3
56487: NEG
56488: PUSH
56489: EMPTY
56490: LIST
56491: LIST
56492: PUSH
56493: LD_INT 1
56495: PUSH
56496: LD_INT 2
56498: NEG
56499: PUSH
56500: EMPTY
56501: LIST
56502: LIST
56503: PUSH
56504: LD_INT 1
56506: NEG
56507: PUSH
56508: LD_INT 4
56510: NEG
56511: PUSH
56512: EMPTY
56513: LIST
56514: LIST
56515: PUSH
56516: LD_INT 0
56518: PUSH
56519: LD_INT 4
56521: NEG
56522: PUSH
56523: EMPTY
56524: LIST
56525: LIST
56526: PUSH
56527: LD_INT 1
56529: PUSH
56530: LD_INT 3
56532: NEG
56533: PUSH
56534: EMPTY
56535: LIST
56536: LIST
56537: PUSH
56538: LD_INT 1
56540: NEG
56541: PUSH
56542: LD_INT 5
56544: NEG
56545: PUSH
56546: EMPTY
56547: LIST
56548: LIST
56549: PUSH
56550: LD_INT 0
56552: PUSH
56553: LD_INT 5
56555: NEG
56556: PUSH
56557: EMPTY
56558: LIST
56559: LIST
56560: PUSH
56561: LD_INT 1
56563: PUSH
56564: LD_INT 4
56566: NEG
56567: PUSH
56568: EMPTY
56569: LIST
56570: LIST
56571: PUSH
56572: LD_INT 1
56574: NEG
56575: PUSH
56576: LD_INT 6
56578: NEG
56579: PUSH
56580: EMPTY
56581: LIST
56582: LIST
56583: PUSH
56584: LD_INT 0
56586: PUSH
56587: LD_INT 6
56589: NEG
56590: PUSH
56591: EMPTY
56592: LIST
56593: LIST
56594: PUSH
56595: LD_INT 1
56597: PUSH
56598: LD_INT 5
56600: NEG
56601: PUSH
56602: EMPTY
56603: LIST
56604: LIST
56605: PUSH
56606: EMPTY
56607: LIST
56608: LIST
56609: LIST
56610: LIST
56611: LIST
56612: LIST
56613: LIST
56614: LIST
56615: LIST
56616: LIST
56617: LIST
56618: LIST
56619: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
56620: LD_ADDR_VAR 0 30
56624: PUSH
56625: LD_INT 2
56627: PUSH
56628: LD_INT 1
56630: NEG
56631: PUSH
56632: EMPTY
56633: LIST
56634: LIST
56635: PUSH
56636: LD_INT 3
56638: PUSH
56639: LD_INT 0
56641: PUSH
56642: EMPTY
56643: LIST
56644: LIST
56645: PUSH
56646: LD_INT 3
56648: PUSH
56649: LD_INT 1
56651: PUSH
56652: EMPTY
56653: LIST
56654: LIST
56655: PUSH
56656: LD_INT 3
56658: PUSH
56659: LD_INT 1
56661: NEG
56662: PUSH
56663: EMPTY
56664: LIST
56665: LIST
56666: PUSH
56667: LD_INT 4
56669: PUSH
56670: LD_INT 0
56672: PUSH
56673: EMPTY
56674: LIST
56675: LIST
56676: PUSH
56677: LD_INT 4
56679: PUSH
56680: LD_INT 1
56682: PUSH
56683: EMPTY
56684: LIST
56685: LIST
56686: PUSH
56687: LD_INT 4
56689: PUSH
56690: LD_INT 1
56692: NEG
56693: PUSH
56694: EMPTY
56695: LIST
56696: LIST
56697: PUSH
56698: LD_INT 5
56700: PUSH
56701: LD_INT 0
56703: PUSH
56704: EMPTY
56705: LIST
56706: LIST
56707: PUSH
56708: LD_INT 5
56710: PUSH
56711: LD_INT 1
56713: PUSH
56714: EMPTY
56715: LIST
56716: LIST
56717: PUSH
56718: LD_INT 5
56720: PUSH
56721: LD_INT 1
56723: NEG
56724: PUSH
56725: EMPTY
56726: LIST
56727: LIST
56728: PUSH
56729: LD_INT 6
56731: PUSH
56732: LD_INT 0
56734: PUSH
56735: EMPTY
56736: LIST
56737: LIST
56738: PUSH
56739: LD_INT 6
56741: PUSH
56742: LD_INT 1
56744: PUSH
56745: EMPTY
56746: LIST
56747: LIST
56748: PUSH
56749: EMPTY
56750: LIST
56751: LIST
56752: LIST
56753: LIST
56754: LIST
56755: LIST
56756: LIST
56757: LIST
56758: LIST
56759: LIST
56760: LIST
56761: LIST
56762: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
56763: LD_ADDR_VAR 0 31
56767: PUSH
56768: LD_INT 3
56770: PUSH
56771: LD_INT 2
56773: PUSH
56774: EMPTY
56775: LIST
56776: LIST
56777: PUSH
56778: LD_INT 3
56780: PUSH
56781: LD_INT 3
56783: PUSH
56784: EMPTY
56785: LIST
56786: LIST
56787: PUSH
56788: LD_INT 2
56790: PUSH
56791: LD_INT 3
56793: PUSH
56794: EMPTY
56795: LIST
56796: LIST
56797: PUSH
56798: LD_INT 4
56800: PUSH
56801: LD_INT 3
56803: PUSH
56804: EMPTY
56805: LIST
56806: LIST
56807: PUSH
56808: LD_INT 4
56810: PUSH
56811: LD_INT 4
56813: PUSH
56814: EMPTY
56815: LIST
56816: LIST
56817: PUSH
56818: LD_INT 3
56820: PUSH
56821: LD_INT 4
56823: PUSH
56824: EMPTY
56825: LIST
56826: LIST
56827: PUSH
56828: LD_INT 5
56830: PUSH
56831: LD_INT 4
56833: PUSH
56834: EMPTY
56835: LIST
56836: LIST
56837: PUSH
56838: LD_INT 5
56840: PUSH
56841: LD_INT 5
56843: PUSH
56844: EMPTY
56845: LIST
56846: LIST
56847: PUSH
56848: LD_INT 4
56850: PUSH
56851: LD_INT 5
56853: PUSH
56854: EMPTY
56855: LIST
56856: LIST
56857: PUSH
56858: LD_INT 6
56860: PUSH
56861: LD_INT 5
56863: PUSH
56864: EMPTY
56865: LIST
56866: LIST
56867: PUSH
56868: LD_INT 6
56870: PUSH
56871: LD_INT 6
56873: PUSH
56874: EMPTY
56875: LIST
56876: LIST
56877: PUSH
56878: LD_INT 5
56880: PUSH
56881: LD_INT 6
56883: PUSH
56884: EMPTY
56885: LIST
56886: LIST
56887: PUSH
56888: EMPTY
56889: LIST
56890: LIST
56891: LIST
56892: LIST
56893: LIST
56894: LIST
56895: LIST
56896: LIST
56897: LIST
56898: LIST
56899: LIST
56900: LIST
56901: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
56902: LD_ADDR_VAR 0 32
56906: PUSH
56907: LD_INT 1
56909: PUSH
56910: LD_INT 3
56912: PUSH
56913: EMPTY
56914: LIST
56915: LIST
56916: PUSH
56917: LD_INT 0
56919: PUSH
56920: LD_INT 3
56922: PUSH
56923: EMPTY
56924: LIST
56925: LIST
56926: PUSH
56927: LD_INT 1
56929: NEG
56930: PUSH
56931: LD_INT 2
56933: PUSH
56934: EMPTY
56935: LIST
56936: LIST
56937: PUSH
56938: LD_INT 1
56940: PUSH
56941: LD_INT 4
56943: PUSH
56944: EMPTY
56945: LIST
56946: LIST
56947: PUSH
56948: LD_INT 0
56950: PUSH
56951: LD_INT 4
56953: PUSH
56954: EMPTY
56955: LIST
56956: LIST
56957: PUSH
56958: LD_INT 1
56960: NEG
56961: PUSH
56962: LD_INT 3
56964: PUSH
56965: EMPTY
56966: LIST
56967: LIST
56968: PUSH
56969: LD_INT 1
56971: PUSH
56972: LD_INT 5
56974: PUSH
56975: EMPTY
56976: LIST
56977: LIST
56978: PUSH
56979: LD_INT 0
56981: PUSH
56982: LD_INT 5
56984: PUSH
56985: EMPTY
56986: LIST
56987: LIST
56988: PUSH
56989: LD_INT 1
56991: NEG
56992: PUSH
56993: LD_INT 4
56995: PUSH
56996: EMPTY
56997: LIST
56998: LIST
56999: PUSH
57000: LD_INT 1
57002: PUSH
57003: LD_INT 6
57005: PUSH
57006: EMPTY
57007: LIST
57008: LIST
57009: PUSH
57010: LD_INT 0
57012: PUSH
57013: LD_INT 6
57015: PUSH
57016: EMPTY
57017: LIST
57018: LIST
57019: PUSH
57020: LD_INT 1
57022: NEG
57023: PUSH
57024: LD_INT 5
57026: PUSH
57027: EMPTY
57028: LIST
57029: LIST
57030: PUSH
57031: EMPTY
57032: LIST
57033: LIST
57034: LIST
57035: LIST
57036: LIST
57037: LIST
57038: LIST
57039: LIST
57040: LIST
57041: LIST
57042: LIST
57043: LIST
57044: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
57045: LD_ADDR_VAR 0 33
57049: PUSH
57050: LD_INT 2
57052: NEG
57053: PUSH
57054: LD_INT 1
57056: PUSH
57057: EMPTY
57058: LIST
57059: LIST
57060: PUSH
57061: LD_INT 3
57063: NEG
57064: PUSH
57065: LD_INT 0
57067: PUSH
57068: EMPTY
57069: LIST
57070: LIST
57071: PUSH
57072: LD_INT 3
57074: NEG
57075: PUSH
57076: LD_INT 1
57078: NEG
57079: PUSH
57080: EMPTY
57081: LIST
57082: LIST
57083: PUSH
57084: LD_INT 3
57086: NEG
57087: PUSH
57088: LD_INT 1
57090: PUSH
57091: EMPTY
57092: LIST
57093: LIST
57094: PUSH
57095: LD_INT 4
57097: NEG
57098: PUSH
57099: LD_INT 0
57101: PUSH
57102: EMPTY
57103: LIST
57104: LIST
57105: PUSH
57106: LD_INT 4
57108: NEG
57109: PUSH
57110: LD_INT 1
57112: NEG
57113: PUSH
57114: EMPTY
57115: LIST
57116: LIST
57117: PUSH
57118: LD_INT 4
57120: NEG
57121: PUSH
57122: LD_INT 1
57124: PUSH
57125: EMPTY
57126: LIST
57127: LIST
57128: PUSH
57129: LD_INT 5
57131: NEG
57132: PUSH
57133: LD_INT 0
57135: PUSH
57136: EMPTY
57137: LIST
57138: LIST
57139: PUSH
57140: LD_INT 5
57142: NEG
57143: PUSH
57144: LD_INT 1
57146: NEG
57147: PUSH
57148: EMPTY
57149: LIST
57150: LIST
57151: PUSH
57152: LD_INT 5
57154: NEG
57155: PUSH
57156: LD_INT 1
57158: PUSH
57159: EMPTY
57160: LIST
57161: LIST
57162: PUSH
57163: LD_INT 6
57165: NEG
57166: PUSH
57167: LD_INT 0
57169: PUSH
57170: EMPTY
57171: LIST
57172: LIST
57173: PUSH
57174: LD_INT 6
57176: NEG
57177: PUSH
57178: LD_INT 1
57180: NEG
57181: PUSH
57182: EMPTY
57183: LIST
57184: LIST
57185: PUSH
57186: EMPTY
57187: LIST
57188: LIST
57189: LIST
57190: LIST
57191: LIST
57192: LIST
57193: LIST
57194: LIST
57195: LIST
57196: LIST
57197: LIST
57198: LIST
57199: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
57200: LD_ADDR_VAR 0 34
57204: PUSH
57205: LD_INT 2
57207: NEG
57208: PUSH
57209: LD_INT 3
57211: NEG
57212: PUSH
57213: EMPTY
57214: LIST
57215: LIST
57216: PUSH
57217: LD_INT 3
57219: NEG
57220: PUSH
57221: LD_INT 2
57223: NEG
57224: PUSH
57225: EMPTY
57226: LIST
57227: LIST
57228: PUSH
57229: LD_INT 3
57231: NEG
57232: PUSH
57233: LD_INT 3
57235: NEG
57236: PUSH
57237: EMPTY
57238: LIST
57239: LIST
57240: PUSH
57241: LD_INT 3
57243: NEG
57244: PUSH
57245: LD_INT 4
57247: NEG
57248: PUSH
57249: EMPTY
57250: LIST
57251: LIST
57252: PUSH
57253: LD_INT 4
57255: NEG
57256: PUSH
57257: LD_INT 3
57259: NEG
57260: PUSH
57261: EMPTY
57262: LIST
57263: LIST
57264: PUSH
57265: LD_INT 4
57267: NEG
57268: PUSH
57269: LD_INT 4
57271: NEG
57272: PUSH
57273: EMPTY
57274: LIST
57275: LIST
57276: PUSH
57277: LD_INT 4
57279: NEG
57280: PUSH
57281: LD_INT 5
57283: NEG
57284: PUSH
57285: EMPTY
57286: LIST
57287: LIST
57288: PUSH
57289: LD_INT 5
57291: NEG
57292: PUSH
57293: LD_INT 4
57295: NEG
57296: PUSH
57297: EMPTY
57298: LIST
57299: LIST
57300: PUSH
57301: LD_INT 5
57303: NEG
57304: PUSH
57305: LD_INT 5
57307: NEG
57308: PUSH
57309: EMPTY
57310: LIST
57311: LIST
57312: PUSH
57313: LD_INT 5
57315: NEG
57316: PUSH
57317: LD_INT 6
57319: NEG
57320: PUSH
57321: EMPTY
57322: LIST
57323: LIST
57324: PUSH
57325: LD_INT 6
57327: NEG
57328: PUSH
57329: LD_INT 5
57331: NEG
57332: PUSH
57333: EMPTY
57334: LIST
57335: LIST
57336: PUSH
57337: LD_INT 6
57339: NEG
57340: PUSH
57341: LD_INT 6
57343: NEG
57344: PUSH
57345: EMPTY
57346: LIST
57347: LIST
57348: PUSH
57349: EMPTY
57350: LIST
57351: LIST
57352: LIST
57353: LIST
57354: LIST
57355: LIST
57356: LIST
57357: LIST
57358: LIST
57359: LIST
57360: LIST
57361: LIST
57362: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
57363: LD_ADDR_VAR 0 41
57367: PUSH
57368: LD_INT 0
57370: PUSH
57371: LD_INT 2
57373: NEG
57374: PUSH
57375: EMPTY
57376: LIST
57377: LIST
57378: PUSH
57379: LD_INT 1
57381: NEG
57382: PUSH
57383: LD_INT 3
57385: NEG
57386: PUSH
57387: EMPTY
57388: LIST
57389: LIST
57390: PUSH
57391: LD_INT 1
57393: PUSH
57394: LD_INT 2
57396: NEG
57397: PUSH
57398: EMPTY
57399: LIST
57400: LIST
57401: PUSH
57402: EMPTY
57403: LIST
57404: LIST
57405: LIST
57406: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
57407: LD_ADDR_VAR 0 42
57411: PUSH
57412: LD_INT 2
57414: PUSH
57415: LD_INT 0
57417: PUSH
57418: EMPTY
57419: LIST
57420: LIST
57421: PUSH
57422: LD_INT 2
57424: PUSH
57425: LD_INT 1
57427: NEG
57428: PUSH
57429: EMPTY
57430: LIST
57431: LIST
57432: PUSH
57433: LD_INT 3
57435: PUSH
57436: LD_INT 1
57438: PUSH
57439: EMPTY
57440: LIST
57441: LIST
57442: PUSH
57443: EMPTY
57444: LIST
57445: LIST
57446: LIST
57447: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
57448: LD_ADDR_VAR 0 43
57452: PUSH
57453: LD_INT 2
57455: PUSH
57456: LD_INT 2
57458: PUSH
57459: EMPTY
57460: LIST
57461: LIST
57462: PUSH
57463: LD_INT 3
57465: PUSH
57466: LD_INT 2
57468: PUSH
57469: EMPTY
57470: LIST
57471: LIST
57472: PUSH
57473: LD_INT 2
57475: PUSH
57476: LD_INT 3
57478: PUSH
57479: EMPTY
57480: LIST
57481: LIST
57482: PUSH
57483: EMPTY
57484: LIST
57485: LIST
57486: LIST
57487: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
57488: LD_ADDR_VAR 0 44
57492: PUSH
57493: LD_INT 0
57495: PUSH
57496: LD_INT 2
57498: PUSH
57499: EMPTY
57500: LIST
57501: LIST
57502: PUSH
57503: LD_INT 1
57505: PUSH
57506: LD_INT 3
57508: PUSH
57509: EMPTY
57510: LIST
57511: LIST
57512: PUSH
57513: LD_INT 1
57515: NEG
57516: PUSH
57517: LD_INT 2
57519: PUSH
57520: EMPTY
57521: LIST
57522: LIST
57523: PUSH
57524: EMPTY
57525: LIST
57526: LIST
57527: LIST
57528: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57529: LD_ADDR_VAR 0 45
57533: PUSH
57534: LD_INT 2
57536: NEG
57537: PUSH
57538: LD_INT 0
57540: PUSH
57541: EMPTY
57542: LIST
57543: LIST
57544: PUSH
57545: LD_INT 2
57547: NEG
57548: PUSH
57549: LD_INT 1
57551: PUSH
57552: EMPTY
57553: LIST
57554: LIST
57555: PUSH
57556: LD_INT 3
57558: NEG
57559: PUSH
57560: LD_INT 1
57562: NEG
57563: PUSH
57564: EMPTY
57565: LIST
57566: LIST
57567: PUSH
57568: EMPTY
57569: LIST
57570: LIST
57571: LIST
57572: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
57573: LD_ADDR_VAR 0 46
57577: PUSH
57578: LD_INT 2
57580: NEG
57581: PUSH
57582: LD_INT 2
57584: NEG
57585: PUSH
57586: EMPTY
57587: LIST
57588: LIST
57589: PUSH
57590: LD_INT 2
57592: NEG
57593: PUSH
57594: LD_INT 3
57596: NEG
57597: PUSH
57598: EMPTY
57599: LIST
57600: LIST
57601: PUSH
57602: LD_INT 3
57604: NEG
57605: PUSH
57606: LD_INT 2
57608: NEG
57609: PUSH
57610: EMPTY
57611: LIST
57612: LIST
57613: PUSH
57614: EMPTY
57615: LIST
57616: LIST
57617: LIST
57618: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
57619: LD_ADDR_VAR 0 47
57623: PUSH
57624: LD_INT 2
57626: NEG
57627: PUSH
57628: LD_INT 3
57630: NEG
57631: PUSH
57632: EMPTY
57633: LIST
57634: LIST
57635: PUSH
57636: LD_INT 1
57638: NEG
57639: PUSH
57640: LD_INT 3
57642: NEG
57643: PUSH
57644: EMPTY
57645: LIST
57646: LIST
57647: PUSH
57648: EMPTY
57649: LIST
57650: LIST
57651: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
57652: LD_ADDR_VAR 0 48
57656: PUSH
57657: LD_INT 1
57659: PUSH
57660: LD_INT 2
57662: NEG
57663: PUSH
57664: EMPTY
57665: LIST
57666: LIST
57667: PUSH
57668: LD_INT 2
57670: PUSH
57671: LD_INT 1
57673: NEG
57674: PUSH
57675: EMPTY
57676: LIST
57677: LIST
57678: PUSH
57679: EMPTY
57680: LIST
57681: LIST
57682: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
57683: LD_ADDR_VAR 0 49
57687: PUSH
57688: LD_INT 3
57690: PUSH
57691: LD_INT 1
57693: PUSH
57694: EMPTY
57695: LIST
57696: LIST
57697: PUSH
57698: LD_INT 3
57700: PUSH
57701: LD_INT 2
57703: PUSH
57704: EMPTY
57705: LIST
57706: LIST
57707: PUSH
57708: EMPTY
57709: LIST
57710: LIST
57711: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
57712: LD_ADDR_VAR 0 50
57716: PUSH
57717: LD_INT 2
57719: PUSH
57720: LD_INT 3
57722: PUSH
57723: EMPTY
57724: LIST
57725: LIST
57726: PUSH
57727: LD_INT 1
57729: PUSH
57730: LD_INT 3
57732: PUSH
57733: EMPTY
57734: LIST
57735: LIST
57736: PUSH
57737: EMPTY
57738: LIST
57739: LIST
57740: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
57741: LD_ADDR_VAR 0 51
57745: PUSH
57746: LD_INT 1
57748: NEG
57749: PUSH
57750: LD_INT 2
57752: PUSH
57753: EMPTY
57754: LIST
57755: LIST
57756: PUSH
57757: LD_INT 2
57759: NEG
57760: PUSH
57761: LD_INT 1
57763: PUSH
57764: EMPTY
57765: LIST
57766: LIST
57767: PUSH
57768: EMPTY
57769: LIST
57770: LIST
57771: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57772: LD_ADDR_VAR 0 52
57776: PUSH
57777: LD_INT 3
57779: NEG
57780: PUSH
57781: LD_INT 1
57783: NEG
57784: PUSH
57785: EMPTY
57786: LIST
57787: LIST
57788: PUSH
57789: LD_INT 3
57791: NEG
57792: PUSH
57793: LD_INT 2
57795: NEG
57796: PUSH
57797: EMPTY
57798: LIST
57799: LIST
57800: PUSH
57801: EMPTY
57802: LIST
57803: LIST
57804: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57805: LD_ADDR_VAR 0 53
57809: PUSH
57810: LD_INT 1
57812: NEG
57813: PUSH
57814: LD_INT 3
57816: NEG
57817: PUSH
57818: EMPTY
57819: LIST
57820: LIST
57821: PUSH
57822: LD_INT 0
57824: PUSH
57825: LD_INT 3
57827: NEG
57828: PUSH
57829: EMPTY
57830: LIST
57831: LIST
57832: PUSH
57833: LD_INT 1
57835: PUSH
57836: LD_INT 2
57838: NEG
57839: PUSH
57840: EMPTY
57841: LIST
57842: LIST
57843: PUSH
57844: EMPTY
57845: LIST
57846: LIST
57847: LIST
57848: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57849: LD_ADDR_VAR 0 54
57853: PUSH
57854: LD_INT 2
57856: PUSH
57857: LD_INT 1
57859: NEG
57860: PUSH
57861: EMPTY
57862: LIST
57863: LIST
57864: PUSH
57865: LD_INT 3
57867: PUSH
57868: LD_INT 0
57870: PUSH
57871: EMPTY
57872: LIST
57873: LIST
57874: PUSH
57875: LD_INT 3
57877: PUSH
57878: LD_INT 1
57880: PUSH
57881: EMPTY
57882: LIST
57883: LIST
57884: PUSH
57885: EMPTY
57886: LIST
57887: LIST
57888: LIST
57889: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57890: LD_ADDR_VAR 0 55
57894: PUSH
57895: LD_INT 3
57897: PUSH
57898: LD_INT 2
57900: PUSH
57901: EMPTY
57902: LIST
57903: LIST
57904: PUSH
57905: LD_INT 3
57907: PUSH
57908: LD_INT 3
57910: PUSH
57911: EMPTY
57912: LIST
57913: LIST
57914: PUSH
57915: LD_INT 2
57917: PUSH
57918: LD_INT 3
57920: PUSH
57921: EMPTY
57922: LIST
57923: LIST
57924: PUSH
57925: EMPTY
57926: LIST
57927: LIST
57928: LIST
57929: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57930: LD_ADDR_VAR 0 56
57934: PUSH
57935: LD_INT 1
57937: PUSH
57938: LD_INT 3
57940: PUSH
57941: EMPTY
57942: LIST
57943: LIST
57944: PUSH
57945: LD_INT 0
57947: PUSH
57948: LD_INT 3
57950: PUSH
57951: EMPTY
57952: LIST
57953: LIST
57954: PUSH
57955: LD_INT 1
57957: NEG
57958: PUSH
57959: LD_INT 2
57961: PUSH
57962: EMPTY
57963: LIST
57964: LIST
57965: PUSH
57966: EMPTY
57967: LIST
57968: LIST
57969: LIST
57970: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57971: LD_ADDR_VAR 0 57
57975: PUSH
57976: LD_INT 2
57978: NEG
57979: PUSH
57980: LD_INT 1
57982: PUSH
57983: EMPTY
57984: LIST
57985: LIST
57986: PUSH
57987: LD_INT 3
57989: NEG
57990: PUSH
57991: LD_INT 0
57993: PUSH
57994: EMPTY
57995: LIST
57996: LIST
57997: PUSH
57998: LD_INT 3
58000: NEG
58001: PUSH
58002: LD_INT 1
58004: NEG
58005: PUSH
58006: EMPTY
58007: LIST
58008: LIST
58009: PUSH
58010: EMPTY
58011: LIST
58012: LIST
58013: LIST
58014: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58015: LD_ADDR_VAR 0 58
58019: PUSH
58020: LD_INT 2
58022: NEG
58023: PUSH
58024: LD_INT 3
58026: NEG
58027: PUSH
58028: EMPTY
58029: LIST
58030: LIST
58031: PUSH
58032: LD_INT 3
58034: NEG
58035: PUSH
58036: LD_INT 2
58038: NEG
58039: PUSH
58040: EMPTY
58041: LIST
58042: LIST
58043: PUSH
58044: LD_INT 3
58046: NEG
58047: PUSH
58048: LD_INT 3
58050: NEG
58051: PUSH
58052: EMPTY
58053: LIST
58054: LIST
58055: PUSH
58056: EMPTY
58057: LIST
58058: LIST
58059: LIST
58060: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
58061: LD_ADDR_VAR 0 59
58065: PUSH
58066: LD_INT 1
58068: NEG
58069: PUSH
58070: LD_INT 2
58072: NEG
58073: PUSH
58074: EMPTY
58075: LIST
58076: LIST
58077: PUSH
58078: LD_INT 0
58080: PUSH
58081: LD_INT 2
58083: NEG
58084: PUSH
58085: EMPTY
58086: LIST
58087: LIST
58088: PUSH
58089: LD_INT 1
58091: PUSH
58092: LD_INT 1
58094: NEG
58095: PUSH
58096: EMPTY
58097: LIST
58098: LIST
58099: PUSH
58100: EMPTY
58101: LIST
58102: LIST
58103: LIST
58104: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
58105: LD_ADDR_VAR 0 60
58109: PUSH
58110: LD_INT 1
58112: PUSH
58113: LD_INT 1
58115: NEG
58116: PUSH
58117: EMPTY
58118: LIST
58119: LIST
58120: PUSH
58121: LD_INT 2
58123: PUSH
58124: LD_INT 0
58126: PUSH
58127: EMPTY
58128: LIST
58129: LIST
58130: PUSH
58131: LD_INT 2
58133: PUSH
58134: LD_INT 1
58136: PUSH
58137: EMPTY
58138: LIST
58139: LIST
58140: PUSH
58141: EMPTY
58142: LIST
58143: LIST
58144: LIST
58145: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
58146: LD_ADDR_VAR 0 61
58150: PUSH
58151: LD_INT 2
58153: PUSH
58154: LD_INT 1
58156: PUSH
58157: EMPTY
58158: LIST
58159: LIST
58160: PUSH
58161: LD_INT 2
58163: PUSH
58164: LD_INT 2
58166: PUSH
58167: EMPTY
58168: LIST
58169: LIST
58170: PUSH
58171: LD_INT 1
58173: PUSH
58174: LD_INT 2
58176: PUSH
58177: EMPTY
58178: LIST
58179: LIST
58180: PUSH
58181: EMPTY
58182: LIST
58183: LIST
58184: LIST
58185: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
58186: LD_ADDR_VAR 0 62
58190: PUSH
58191: LD_INT 1
58193: PUSH
58194: LD_INT 2
58196: PUSH
58197: EMPTY
58198: LIST
58199: LIST
58200: PUSH
58201: LD_INT 0
58203: PUSH
58204: LD_INT 2
58206: PUSH
58207: EMPTY
58208: LIST
58209: LIST
58210: PUSH
58211: LD_INT 1
58213: NEG
58214: PUSH
58215: LD_INT 1
58217: PUSH
58218: EMPTY
58219: LIST
58220: LIST
58221: PUSH
58222: EMPTY
58223: LIST
58224: LIST
58225: LIST
58226: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
58227: LD_ADDR_VAR 0 63
58231: PUSH
58232: LD_INT 1
58234: NEG
58235: PUSH
58236: LD_INT 1
58238: PUSH
58239: EMPTY
58240: LIST
58241: LIST
58242: PUSH
58243: LD_INT 2
58245: NEG
58246: PUSH
58247: LD_INT 0
58249: PUSH
58250: EMPTY
58251: LIST
58252: LIST
58253: PUSH
58254: LD_INT 2
58256: NEG
58257: PUSH
58258: LD_INT 1
58260: NEG
58261: PUSH
58262: EMPTY
58263: LIST
58264: LIST
58265: PUSH
58266: EMPTY
58267: LIST
58268: LIST
58269: LIST
58270: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58271: LD_ADDR_VAR 0 64
58275: PUSH
58276: LD_INT 1
58278: NEG
58279: PUSH
58280: LD_INT 2
58282: NEG
58283: PUSH
58284: EMPTY
58285: LIST
58286: LIST
58287: PUSH
58288: LD_INT 2
58290: NEG
58291: PUSH
58292: LD_INT 1
58294: NEG
58295: PUSH
58296: EMPTY
58297: LIST
58298: LIST
58299: PUSH
58300: LD_INT 2
58302: NEG
58303: PUSH
58304: LD_INT 2
58306: NEG
58307: PUSH
58308: EMPTY
58309: LIST
58310: LIST
58311: PUSH
58312: EMPTY
58313: LIST
58314: LIST
58315: LIST
58316: ST_TO_ADDR
// end ; 2 :
58317: GO 61583
58319: LD_INT 2
58321: DOUBLE
58322: EQUAL
58323: IFTRUE 58327
58325: GO 61582
58327: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
58328: LD_ADDR_VAR 0 29
58332: PUSH
58333: LD_INT 4
58335: PUSH
58336: LD_INT 0
58338: PUSH
58339: EMPTY
58340: LIST
58341: LIST
58342: PUSH
58343: LD_INT 4
58345: PUSH
58346: LD_INT 1
58348: NEG
58349: PUSH
58350: EMPTY
58351: LIST
58352: LIST
58353: PUSH
58354: LD_INT 5
58356: PUSH
58357: LD_INT 0
58359: PUSH
58360: EMPTY
58361: LIST
58362: LIST
58363: PUSH
58364: LD_INT 5
58366: PUSH
58367: LD_INT 1
58369: PUSH
58370: EMPTY
58371: LIST
58372: LIST
58373: PUSH
58374: LD_INT 4
58376: PUSH
58377: LD_INT 1
58379: PUSH
58380: EMPTY
58381: LIST
58382: LIST
58383: PUSH
58384: LD_INT 3
58386: PUSH
58387: LD_INT 0
58389: PUSH
58390: EMPTY
58391: LIST
58392: LIST
58393: PUSH
58394: LD_INT 3
58396: PUSH
58397: LD_INT 1
58399: NEG
58400: PUSH
58401: EMPTY
58402: LIST
58403: LIST
58404: PUSH
58405: LD_INT 3
58407: PUSH
58408: LD_INT 2
58410: NEG
58411: PUSH
58412: EMPTY
58413: LIST
58414: LIST
58415: PUSH
58416: LD_INT 5
58418: PUSH
58419: LD_INT 2
58421: PUSH
58422: EMPTY
58423: LIST
58424: LIST
58425: PUSH
58426: LD_INT 3
58428: PUSH
58429: LD_INT 3
58431: PUSH
58432: EMPTY
58433: LIST
58434: LIST
58435: PUSH
58436: LD_INT 3
58438: PUSH
58439: LD_INT 2
58441: PUSH
58442: EMPTY
58443: LIST
58444: LIST
58445: PUSH
58446: LD_INT 4
58448: PUSH
58449: LD_INT 3
58451: PUSH
58452: EMPTY
58453: LIST
58454: LIST
58455: PUSH
58456: LD_INT 4
58458: PUSH
58459: LD_INT 4
58461: PUSH
58462: EMPTY
58463: LIST
58464: LIST
58465: PUSH
58466: LD_INT 3
58468: PUSH
58469: LD_INT 4
58471: PUSH
58472: EMPTY
58473: LIST
58474: LIST
58475: PUSH
58476: LD_INT 2
58478: PUSH
58479: LD_INT 3
58481: PUSH
58482: EMPTY
58483: LIST
58484: LIST
58485: PUSH
58486: LD_INT 2
58488: PUSH
58489: LD_INT 2
58491: PUSH
58492: EMPTY
58493: LIST
58494: LIST
58495: PUSH
58496: LD_INT 4
58498: PUSH
58499: LD_INT 2
58501: PUSH
58502: EMPTY
58503: LIST
58504: LIST
58505: PUSH
58506: LD_INT 2
58508: PUSH
58509: LD_INT 4
58511: PUSH
58512: EMPTY
58513: LIST
58514: LIST
58515: PUSH
58516: LD_INT 0
58518: PUSH
58519: LD_INT 4
58521: PUSH
58522: EMPTY
58523: LIST
58524: LIST
58525: PUSH
58526: LD_INT 0
58528: PUSH
58529: LD_INT 3
58531: PUSH
58532: EMPTY
58533: LIST
58534: LIST
58535: PUSH
58536: LD_INT 1
58538: PUSH
58539: LD_INT 4
58541: PUSH
58542: EMPTY
58543: LIST
58544: LIST
58545: PUSH
58546: LD_INT 1
58548: PUSH
58549: LD_INT 5
58551: PUSH
58552: EMPTY
58553: LIST
58554: LIST
58555: PUSH
58556: LD_INT 0
58558: PUSH
58559: LD_INT 5
58561: PUSH
58562: EMPTY
58563: LIST
58564: LIST
58565: PUSH
58566: LD_INT 1
58568: NEG
58569: PUSH
58570: LD_INT 4
58572: PUSH
58573: EMPTY
58574: LIST
58575: LIST
58576: PUSH
58577: LD_INT 1
58579: NEG
58580: PUSH
58581: LD_INT 3
58583: PUSH
58584: EMPTY
58585: LIST
58586: LIST
58587: PUSH
58588: LD_INT 2
58590: PUSH
58591: LD_INT 5
58593: PUSH
58594: EMPTY
58595: LIST
58596: LIST
58597: PUSH
58598: LD_INT 2
58600: NEG
58601: PUSH
58602: LD_INT 3
58604: PUSH
58605: EMPTY
58606: LIST
58607: LIST
58608: PUSH
58609: LD_INT 3
58611: NEG
58612: PUSH
58613: LD_INT 0
58615: PUSH
58616: EMPTY
58617: LIST
58618: LIST
58619: PUSH
58620: LD_INT 3
58622: NEG
58623: PUSH
58624: LD_INT 1
58626: NEG
58627: PUSH
58628: EMPTY
58629: LIST
58630: LIST
58631: PUSH
58632: LD_INT 2
58634: NEG
58635: PUSH
58636: LD_INT 0
58638: PUSH
58639: EMPTY
58640: LIST
58641: LIST
58642: PUSH
58643: LD_INT 2
58645: NEG
58646: PUSH
58647: LD_INT 1
58649: PUSH
58650: EMPTY
58651: LIST
58652: LIST
58653: PUSH
58654: LD_INT 3
58656: NEG
58657: PUSH
58658: LD_INT 1
58660: PUSH
58661: EMPTY
58662: LIST
58663: LIST
58664: PUSH
58665: LD_INT 4
58667: NEG
58668: PUSH
58669: LD_INT 0
58671: PUSH
58672: EMPTY
58673: LIST
58674: LIST
58675: PUSH
58676: LD_INT 4
58678: NEG
58679: PUSH
58680: LD_INT 1
58682: NEG
58683: PUSH
58684: EMPTY
58685: LIST
58686: LIST
58687: PUSH
58688: LD_INT 4
58690: NEG
58691: PUSH
58692: LD_INT 2
58694: NEG
58695: PUSH
58696: EMPTY
58697: LIST
58698: LIST
58699: PUSH
58700: LD_INT 2
58702: NEG
58703: PUSH
58704: LD_INT 2
58706: PUSH
58707: EMPTY
58708: LIST
58709: LIST
58710: PUSH
58711: LD_INT 4
58713: NEG
58714: PUSH
58715: LD_INT 4
58717: NEG
58718: PUSH
58719: EMPTY
58720: LIST
58721: LIST
58722: PUSH
58723: LD_INT 4
58725: NEG
58726: PUSH
58727: LD_INT 5
58729: NEG
58730: PUSH
58731: EMPTY
58732: LIST
58733: LIST
58734: PUSH
58735: LD_INT 3
58737: NEG
58738: PUSH
58739: LD_INT 4
58741: NEG
58742: PUSH
58743: EMPTY
58744: LIST
58745: LIST
58746: PUSH
58747: LD_INT 3
58749: NEG
58750: PUSH
58751: LD_INT 3
58753: NEG
58754: PUSH
58755: EMPTY
58756: LIST
58757: LIST
58758: PUSH
58759: LD_INT 4
58761: NEG
58762: PUSH
58763: LD_INT 3
58765: NEG
58766: PUSH
58767: EMPTY
58768: LIST
58769: LIST
58770: PUSH
58771: LD_INT 5
58773: NEG
58774: PUSH
58775: LD_INT 4
58777: NEG
58778: PUSH
58779: EMPTY
58780: LIST
58781: LIST
58782: PUSH
58783: LD_INT 5
58785: NEG
58786: PUSH
58787: LD_INT 5
58789: NEG
58790: PUSH
58791: EMPTY
58792: LIST
58793: LIST
58794: PUSH
58795: LD_INT 3
58797: NEG
58798: PUSH
58799: LD_INT 5
58801: NEG
58802: PUSH
58803: EMPTY
58804: LIST
58805: LIST
58806: PUSH
58807: LD_INT 5
58809: NEG
58810: PUSH
58811: LD_INT 3
58813: NEG
58814: PUSH
58815: EMPTY
58816: LIST
58817: LIST
58818: PUSH
58819: EMPTY
58820: LIST
58821: LIST
58822: LIST
58823: LIST
58824: LIST
58825: LIST
58826: LIST
58827: LIST
58828: LIST
58829: LIST
58830: LIST
58831: LIST
58832: LIST
58833: LIST
58834: LIST
58835: LIST
58836: LIST
58837: LIST
58838: LIST
58839: LIST
58840: LIST
58841: LIST
58842: LIST
58843: LIST
58844: LIST
58845: LIST
58846: LIST
58847: LIST
58848: LIST
58849: LIST
58850: LIST
58851: LIST
58852: LIST
58853: LIST
58854: LIST
58855: LIST
58856: LIST
58857: LIST
58858: LIST
58859: LIST
58860: LIST
58861: LIST
58862: LIST
58863: LIST
58864: LIST
58865: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
58866: LD_ADDR_VAR 0 30
58870: PUSH
58871: LD_INT 4
58873: PUSH
58874: LD_INT 4
58876: PUSH
58877: EMPTY
58878: LIST
58879: LIST
58880: PUSH
58881: LD_INT 4
58883: PUSH
58884: LD_INT 3
58886: PUSH
58887: EMPTY
58888: LIST
58889: LIST
58890: PUSH
58891: LD_INT 5
58893: PUSH
58894: LD_INT 4
58896: PUSH
58897: EMPTY
58898: LIST
58899: LIST
58900: PUSH
58901: LD_INT 5
58903: PUSH
58904: LD_INT 5
58906: PUSH
58907: EMPTY
58908: LIST
58909: LIST
58910: PUSH
58911: LD_INT 4
58913: PUSH
58914: LD_INT 5
58916: PUSH
58917: EMPTY
58918: LIST
58919: LIST
58920: PUSH
58921: LD_INT 3
58923: PUSH
58924: LD_INT 4
58926: PUSH
58927: EMPTY
58928: LIST
58929: LIST
58930: PUSH
58931: LD_INT 3
58933: PUSH
58934: LD_INT 3
58936: PUSH
58937: EMPTY
58938: LIST
58939: LIST
58940: PUSH
58941: LD_INT 5
58943: PUSH
58944: LD_INT 3
58946: PUSH
58947: EMPTY
58948: LIST
58949: LIST
58950: PUSH
58951: LD_INT 3
58953: PUSH
58954: LD_INT 5
58956: PUSH
58957: EMPTY
58958: LIST
58959: LIST
58960: PUSH
58961: LD_INT 0
58963: PUSH
58964: LD_INT 3
58966: PUSH
58967: EMPTY
58968: LIST
58969: LIST
58970: PUSH
58971: LD_INT 0
58973: PUSH
58974: LD_INT 2
58976: PUSH
58977: EMPTY
58978: LIST
58979: LIST
58980: PUSH
58981: LD_INT 1
58983: PUSH
58984: LD_INT 3
58986: PUSH
58987: EMPTY
58988: LIST
58989: LIST
58990: PUSH
58991: LD_INT 1
58993: PUSH
58994: LD_INT 4
58996: PUSH
58997: EMPTY
58998: LIST
58999: LIST
59000: PUSH
59001: LD_INT 0
59003: PUSH
59004: LD_INT 4
59006: PUSH
59007: EMPTY
59008: LIST
59009: LIST
59010: PUSH
59011: LD_INT 1
59013: NEG
59014: PUSH
59015: LD_INT 3
59017: PUSH
59018: EMPTY
59019: LIST
59020: LIST
59021: PUSH
59022: LD_INT 1
59024: NEG
59025: PUSH
59026: LD_INT 2
59028: PUSH
59029: EMPTY
59030: LIST
59031: LIST
59032: PUSH
59033: LD_INT 2
59035: PUSH
59036: LD_INT 4
59038: PUSH
59039: EMPTY
59040: LIST
59041: LIST
59042: PUSH
59043: LD_INT 2
59045: NEG
59046: PUSH
59047: LD_INT 2
59049: PUSH
59050: EMPTY
59051: LIST
59052: LIST
59053: PUSH
59054: LD_INT 4
59056: NEG
59057: PUSH
59058: LD_INT 0
59060: PUSH
59061: EMPTY
59062: LIST
59063: LIST
59064: PUSH
59065: LD_INT 4
59067: NEG
59068: PUSH
59069: LD_INT 1
59071: NEG
59072: PUSH
59073: EMPTY
59074: LIST
59075: LIST
59076: PUSH
59077: LD_INT 3
59079: NEG
59080: PUSH
59081: LD_INT 0
59083: PUSH
59084: EMPTY
59085: LIST
59086: LIST
59087: PUSH
59088: LD_INT 3
59090: NEG
59091: PUSH
59092: LD_INT 1
59094: PUSH
59095: EMPTY
59096: LIST
59097: LIST
59098: PUSH
59099: LD_INT 4
59101: NEG
59102: PUSH
59103: LD_INT 1
59105: PUSH
59106: EMPTY
59107: LIST
59108: LIST
59109: PUSH
59110: LD_INT 5
59112: NEG
59113: PUSH
59114: LD_INT 0
59116: PUSH
59117: EMPTY
59118: LIST
59119: LIST
59120: PUSH
59121: LD_INT 5
59123: NEG
59124: PUSH
59125: LD_INT 1
59127: NEG
59128: PUSH
59129: EMPTY
59130: LIST
59131: LIST
59132: PUSH
59133: LD_INT 5
59135: NEG
59136: PUSH
59137: LD_INT 2
59139: NEG
59140: PUSH
59141: EMPTY
59142: LIST
59143: LIST
59144: PUSH
59145: LD_INT 3
59147: NEG
59148: PUSH
59149: LD_INT 2
59151: PUSH
59152: EMPTY
59153: LIST
59154: LIST
59155: PUSH
59156: LD_INT 3
59158: NEG
59159: PUSH
59160: LD_INT 3
59162: NEG
59163: PUSH
59164: EMPTY
59165: LIST
59166: LIST
59167: PUSH
59168: LD_INT 3
59170: NEG
59171: PUSH
59172: LD_INT 4
59174: NEG
59175: PUSH
59176: EMPTY
59177: LIST
59178: LIST
59179: PUSH
59180: LD_INT 2
59182: NEG
59183: PUSH
59184: LD_INT 3
59186: NEG
59187: PUSH
59188: EMPTY
59189: LIST
59190: LIST
59191: PUSH
59192: LD_INT 2
59194: NEG
59195: PUSH
59196: LD_INT 2
59198: NEG
59199: PUSH
59200: EMPTY
59201: LIST
59202: LIST
59203: PUSH
59204: LD_INT 3
59206: NEG
59207: PUSH
59208: LD_INT 2
59210: NEG
59211: PUSH
59212: EMPTY
59213: LIST
59214: LIST
59215: PUSH
59216: LD_INT 4
59218: NEG
59219: PUSH
59220: LD_INT 3
59222: NEG
59223: PUSH
59224: EMPTY
59225: LIST
59226: LIST
59227: PUSH
59228: LD_INT 4
59230: NEG
59231: PUSH
59232: LD_INT 4
59234: NEG
59235: PUSH
59236: EMPTY
59237: LIST
59238: LIST
59239: PUSH
59240: LD_INT 2
59242: NEG
59243: PUSH
59244: LD_INT 4
59246: NEG
59247: PUSH
59248: EMPTY
59249: LIST
59250: LIST
59251: PUSH
59252: LD_INT 4
59254: NEG
59255: PUSH
59256: LD_INT 2
59258: NEG
59259: PUSH
59260: EMPTY
59261: LIST
59262: LIST
59263: PUSH
59264: LD_INT 0
59266: PUSH
59267: LD_INT 4
59269: NEG
59270: PUSH
59271: EMPTY
59272: LIST
59273: LIST
59274: PUSH
59275: LD_INT 0
59277: PUSH
59278: LD_INT 5
59280: NEG
59281: PUSH
59282: EMPTY
59283: LIST
59284: LIST
59285: PUSH
59286: LD_INT 1
59288: PUSH
59289: LD_INT 4
59291: NEG
59292: PUSH
59293: EMPTY
59294: LIST
59295: LIST
59296: PUSH
59297: LD_INT 1
59299: PUSH
59300: LD_INT 3
59302: NEG
59303: PUSH
59304: EMPTY
59305: LIST
59306: LIST
59307: PUSH
59308: LD_INT 0
59310: PUSH
59311: LD_INT 3
59313: NEG
59314: PUSH
59315: EMPTY
59316: LIST
59317: LIST
59318: PUSH
59319: LD_INT 1
59321: NEG
59322: PUSH
59323: LD_INT 4
59325: NEG
59326: PUSH
59327: EMPTY
59328: LIST
59329: LIST
59330: PUSH
59331: LD_INT 1
59333: NEG
59334: PUSH
59335: LD_INT 5
59337: NEG
59338: PUSH
59339: EMPTY
59340: LIST
59341: LIST
59342: PUSH
59343: LD_INT 2
59345: PUSH
59346: LD_INT 3
59348: NEG
59349: PUSH
59350: EMPTY
59351: LIST
59352: LIST
59353: PUSH
59354: LD_INT 2
59356: NEG
59357: PUSH
59358: LD_INT 5
59360: NEG
59361: PUSH
59362: EMPTY
59363: LIST
59364: LIST
59365: PUSH
59366: EMPTY
59367: LIST
59368: LIST
59369: LIST
59370: LIST
59371: LIST
59372: LIST
59373: LIST
59374: LIST
59375: LIST
59376: LIST
59377: LIST
59378: LIST
59379: LIST
59380: LIST
59381: LIST
59382: LIST
59383: LIST
59384: LIST
59385: LIST
59386: LIST
59387: LIST
59388: LIST
59389: LIST
59390: LIST
59391: LIST
59392: LIST
59393: LIST
59394: LIST
59395: LIST
59396: LIST
59397: LIST
59398: LIST
59399: LIST
59400: LIST
59401: LIST
59402: LIST
59403: LIST
59404: LIST
59405: LIST
59406: LIST
59407: LIST
59408: LIST
59409: LIST
59410: LIST
59411: LIST
59412: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
59413: LD_ADDR_VAR 0 31
59417: PUSH
59418: LD_INT 0
59420: PUSH
59421: LD_INT 4
59423: PUSH
59424: EMPTY
59425: LIST
59426: LIST
59427: PUSH
59428: LD_INT 0
59430: PUSH
59431: LD_INT 3
59433: PUSH
59434: EMPTY
59435: LIST
59436: LIST
59437: PUSH
59438: LD_INT 1
59440: PUSH
59441: LD_INT 4
59443: PUSH
59444: EMPTY
59445: LIST
59446: LIST
59447: PUSH
59448: LD_INT 1
59450: PUSH
59451: LD_INT 5
59453: PUSH
59454: EMPTY
59455: LIST
59456: LIST
59457: PUSH
59458: LD_INT 0
59460: PUSH
59461: LD_INT 5
59463: PUSH
59464: EMPTY
59465: LIST
59466: LIST
59467: PUSH
59468: LD_INT 1
59470: NEG
59471: PUSH
59472: LD_INT 4
59474: PUSH
59475: EMPTY
59476: LIST
59477: LIST
59478: PUSH
59479: LD_INT 1
59481: NEG
59482: PUSH
59483: LD_INT 3
59485: PUSH
59486: EMPTY
59487: LIST
59488: LIST
59489: PUSH
59490: LD_INT 2
59492: PUSH
59493: LD_INT 5
59495: PUSH
59496: EMPTY
59497: LIST
59498: LIST
59499: PUSH
59500: LD_INT 2
59502: NEG
59503: PUSH
59504: LD_INT 3
59506: PUSH
59507: EMPTY
59508: LIST
59509: LIST
59510: PUSH
59511: LD_INT 3
59513: NEG
59514: PUSH
59515: LD_INT 0
59517: PUSH
59518: EMPTY
59519: LIST
59520: LIST
59521: PUSH
59522: LD_INT 3
59524: NEG
59525: PUSH
59526: LD_INT 1
59528: NEG
59529: PUSH
59530: EMPTY
59531: LIST
59532: LIST
59533: PUSH
59534: LD_INT 2
59536: NEG
59537: PUSH
59538: LD_INT 0
59540: PUSH
59541: EMPTY
59542: LIST
59543: LIST
59544: PUSH
59545: LD_INT 2
59547: NEG
59548: PUSH
59549: LD_INT 1
59551: PUSH
59552: EMPTY
59553: LIST
59554: LIST
59555: PUSH
59556: LD_INT 3
59558: NEG
59559: PUSH
59560: LD_INT 1
59562: PUSH
59563: EMPTY
59564: LIST
59565: LIST
59566: PUSH
59567: LD_INT 4
59569: NEG
59570: PUSH
59571: LD_INT 0
59573: PUSH
59574: EMPTY
59575: LIST
59576: LIST
59577: PUSH
59578: LD_INT 4
59580: NEG
59581: PUSH
59582: LD_INT 1
59584: NEG
59585: PUSH
59586: EMPTY
59587: LIST
59588: LIST
59589: PUSH
59590: LD_INT 4
59592: NEG
59593: PUSH
59594: LD_INT 2
59596: NEG
59597: PUSH
59598: EMPTY
59599: LIST
59600: LIST
59601: PUSH
59602: LD_INT 2
59604: NEG
59605: PUSH
59606: LD_INT 2
59608: PUSH
59609: EMPTY
59610: LIST
59611: LIST
59612: PUSH
59613: LD_INT 4
59615: NEG
59616: PUSH
59617: LD_INT 4
59619: NEG
59620: PUSH
59621: EMPTY
59622: LIST
59623: LIST
59624: PUSH
59625: LD_INT 4
59627: NEG
59628: PUSH
59629: LD_INT 5
59631: NEG
59632: PUSH
59633: EMPTY
59634: LIST
59635: LIST
59636: PUSH
59637: LD_INT 3
59639: NEG
59640: PUSH
59641: LD_INT 4
59643: NEG
59644: PUSH
59645: EMPTY
59646: LIST
59647: LIST
59648: PUSH
59649: LD_INT 3
59651: NEG
59652: PUSH
59653: LD_INT 3
59655: NEG
59656: PUSH
59657: EMPTY
59658: LIST
59659: LIST
59660: PUSH
59661: LD_INT 4
59663: NEG
59664: PUSH
59665: LD_INT 3
59667: NEG
59668: PUSH
59669: EMPTY
59670: LIST
59671: LIST
59672: PUSH
59673: LD_INT 5
59675: NEG
59676: PUSH
59677: LD_INT 4
59679: NEG
59680: PUSH
59681: EMPTY
59682: LIST
59683: LIST
59684: PUSH
59685: LD_INT 5
59687: NEG
59688: PUSH
59689: LD_INT 5
59691: NEG
59692: PUSH
59693: EMPTY
59694: LIST
59695: LIST
59696: PUSH
59697: LD_INT 3
59699: NEG
59700: PUSH
59701: LD_INT 5
59703: NEG
59704: PUSH
59705: EMPTY
59706: LIST
59707: LIST
59708: PUSH
59709: LD_INT 5
59711: NEG
59712: PUSH
59713: LD_INT 3
59715: NEG
59716: PUSH
59717: EMPTY
59718: LIST
59719: LIST
59720: PUSH
59721: LD_INT 0
59723: PUSH
59724: LD_INT 3
59726: NEG
59727: PUSH
59728: EMPTY
59729: LIST
59730: LIST
59731: PUSH
59732: LD_INT 0
59734: PUSH
59735: LD_INT 4
59737: NEG
59738: PUSH
59739: EMPTY
59740: LIST
59741: LIST
59742: PUSH
59743: LD_INT 1
59745: PUSH
59746: LD_INT 3
59748: NEG
59749: PUSH
59750: EMPTY
59751: LIST
59752: LIST
59753: PUSH
59754: LD_INT 1
59756: PUSH
59757: LD_INT 2
59759: NEG
59760: PUSH
59761: EMPTY
59762: LIST
59763: LIST
59764: PUSH
59765: LD_INT 0
59767: PUSH
59768: LD_INT 2
59770: NEG
59771: PUSH
59772: EMPTY
59773: LIST
59774: LIST
59775: PUSH
59776: LD_INT 1
59778: NEG
59779: PUSH
59780: LD_INT 3
59782: NEG
59783: PUSH
59784: EMPTY
59785: LIST
59786: LIST
59787: PUSH
59788: LD_INT 1
59790: NEG
59791: PUSH
59792: LD_INT 4
59794: NEG
59795: PUSH
59796: EMPTY
59797: LIST
59798: LIST
59799: PUSH
59800: LD_INT 2
59802: PUSH
59803: LD_INT 2
59805: NEG
59806: PUSH
59807: EMPTY
59808: LIST
59809: LIST
59810: PUSH
59811: LD_INT 2
59813: NEG
59814: PUSH
59815: LD_INT 4
59817: NEG
59818: PUSH
59819: EMPTY
59820: LIST
59821: LIST
59822: PUSH
59823: LD_INT 4
59825: PUSH
59826: LD_INT 0
59828: PUSH
59829: EMPTY
59830: LIST
59831: LIST
59832: PUSH
59833: LD_INT 4
59835: PUSH
59836: LD_INT 1
59838: NEG
59839: PUSH
59840: EMPTY
59841: LIST
59842: LIST
59843: PUSH
59844: LD_INT 5
59846: PUSH
59847: LD_INT 0
59849: PUSH
59850: EMPTY
59851: LIST
59852: LIST
59853: PUSH
59854: LD_INT 5
59856: PUSH
59857: LD_INT 1
59859: PUSH
59860: EMPTY
59861: LIST
59862: LIST
59863: PUSH
59864: LD_INT 4
59866: PUSH
59867: LD_INT 1
59869: PUSH
59870: EMPTY
59871: LIST
59872: LIST
59873: PUSH
59874: LD_INT 3
59876: PUSH
59877: LD_INT 0
59879: PUSH
59880: EMPTY
59881: LIST
59882: LIST
59883: PUSH
59884: LD_INT 3
59886: PUSH
59887: LD_INT 1
59889: NEG
59890: PUSH
59891: EMPTY
59892: LIST
59893: LIST
59894: PUSH
59895: LD_INT 3
59897: PUSH
59898: LD_INT 2
59900: NEG
59901: PUSH
59902: EMPTY
59903: LIST
59904: LIST
59905: PUSH
59906: LD_INT 5
59908: PUSH
59909: LD_INT 2
59911: PUSH
59912: EMPTY
59913: LIST
59914: LIST
59915: PUSH
59916: EMPTY
59917: LIST
59918: LIST
59919: LIST
59920: LIST
59921: LIST
59922: LIST
59923: LIST
59924: LIST
59925: LIST
59926: LIST
59927: LIST
59928: LIST
59929: LIST
59930: LIST
59931: LIST
59932: LIST
59933: LIST
59934: LIST
59935: LIST
59936: LIST
59937: LIST
59938: LIST
59939: LIST
59940: LIST
59941: LIST
59942: LIST
59943: LIST
59944: LIST
59945: LIST
59946: LIST
59947: LIST
59948: LIST
59949: LIST
59950: LIST
59951: LIST
59952: LIST
59953: LIST
59954: LIST
59955: LIST
59956: LIST
59957: LIST
59958: LIST
59959: LIST
59960: LIST
59961: LIST
59962: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
59963: LD_ADDR_VAR 0 32
59967: PUSH
59968: LD_INT 4
59970: NEG
59971: PUSH
59972: LD_INT 0
59974: PUSH
59975: EMPTY
59976: LIST
59977: LIST
59978: PUSH
59979: LD_INT 4
59981: NEG
59982: PUSH
59983: LD_INT 1
59985: NEG
59986: PUSH
59987: EMPTY
59988: LIST
59989: LIST
59990: PUSH
59991: LD_INT 3
59993: NEG
59994: PUSH
59995: LD_INT 0
59997: PUSH
59998: EMPTY
59999: LIST
60000: LIST
60001: PUSH
60002: LD_INT 3
60004: NEG
60005: PUSH
60006: LD_INT 1
60008: PUSH
60009: EMPTY
60010: LIST
60011: LIST
60012: PUSH
60013: LD_INT 4
60015: NEG
60016: PUSH
60017: LD_INT 1
60019: PUSH
60020: EMPTY
60021: LIST
60022: LIST
60023: PUSH
60024: LD_INT 5
60026: NEG
60027: PUSH
60028: LD_INT 0
60030: PUSH
60031: EMPTY
60032: LIST
60033: LIST
60034: PUSH
60035: LD_INT 5
60037: NEG
60038: PUSH
60039: LD_INT 1
60041: NEG
60042: PUSH
60043: EMPTY
60044: LIST
60045: LIST
60046: PUSH
60047: LD_INT 5
60049: NEG
60050: PUSH
60051: LD_INT 2
60053: NEG
60054: PUSH
60055: EMPTY
60056: LIST
60057: LIST
60058: PUSH
60059: LD_INT 3
60061: NEG
60062: PUSH
60063: LD_INT 2
60065: PUSH
60066: EMPTY
60067: LIST
60068: LIST
60069: PUSH
60070: LD_INT 3
60072: NEG
60073: PUSH
60074: LD_INT 3
60076: NEG
60077: PUSH
60078: EMPTY
60079: LIST
60080: LIST
60081: PUSH
60082: LD_INT 3
60084: NEG
60085: PUSH
60086: LD_INT 4
60088: NEG
60089: PUSH
60090: EMPTY
60091: LIST
60092: LIST
60093: PUSH
60094: LD_INT 2
60096: NEG
60097: PUSH
60098: LD_INT 3
60100: NEG
60101: PUSH
60102: EMPTY
60103: LIST
60104: LIST
60105: PUSH
60106: LD_INT 2
60108: NEG
60109: PUSH
60110: LD_INT 2
60112: NEG
60113: PUSH
60114: EMPTY
60115: LIST
60116: LIST
60117: PUSH
60118: LD_INT 3
60120: NEG
60121: PUSH
60122: LD_INT 2
60124: NEG
60125: PUSH
60126: EMPTY
60127: LIST
60128: LIST
60129: PUSH
60130: LD_INT 4
60132: NEG
60133: PUSH
60134: LD_INT 3
60136: NEG
60137: PUSH
60138: EMPTY
60139: LIST
60140: LIST
60141: PUSH
60142: LD_INT 4
60144: NEG
60145: PUSH
60146: LD_INT 4
60148: NEG
60149: PUSH
60150: EMPTY
60151: LIST
60152: LIST
60153: PUSH
60154: LD_INT 2
60156: NEG
60157: PUSH
60158: LD_INT 4
60160: NEG
60161: PUSH
60162: EMPTY
60163: LIST
60164: LIST
60165: PUSH
60166: LD_INT 4
60168: NEG
60169: PUSH
60170: LD_INT 2
60172: NEG
60173: PUSH
60174: EMPTY
60175: LIST
60176: LIST
60177: PUSH
60178: LD_INT 0
60180: PUSH
60181: LD_INT 4
60183: NEG
60184: PUSH
60185: EMPTY
60186: LIST
60187: LIST
60188: PUSH
60189: LD_INT 0
60191: PUSH
60192: LD_INT 5
60194: NEG
60195: PUSH
60196: EMPTY
60197: LIST
60198: LIST
60199: PUSH
60200: LD_INT 1
60202: PUSH
60203: LD_INT 4
60205: NEG
60206: PUSH
60207: EMPTY
60208: LIST
60209: LIST
60210: PUSH
60211: LD_INT 1
60213: PUSH
60214: LD_INT 3
60216: NEG
60217: PUSH
60218: EMPTY
60219: LIST
60220: LIST
60221: PUSH
60222: LD_INT 0
60224: PUSH
60225: LD_INT 3
60227: NEG
60228: PUSH
60229: EMPTY
60230: LIST
60231: LIST
60232: PUSH
60233: LD_INT 1
60235: NEG
60236: PUSH
60237: LD_INT 4
60239: NEG
60240: PUSH
60241: EMPTY
60242: LIST
60243: LIST
60244: PUSH
60245: LD_INT 1
60247: NEG
60248: PUSH
60249: LD_INT 5
60251: NEG
60252: PUSH
60253: EMPTY
60254: LIST
60255: LIST
60256: PUSH
60257: LD_INT 2
60259: PUSH
60260: LD_INT 3
60262: NEG
60263: PUSH
60264: EMPTY
60265: LIST
60266: LIST
60267: PUSH
60268: LD_INT 2
60270: NEG
60271: PUSH
60272: LD_INT 5
60274: NEG
60275: PUSH
60276: EMPTY
60277: LIST
60278: LIST
60279: PUSH
60280: LD_INT 3
60282: PUSH
60283: LD_INT 0
60285: PUSH
60286: EMPTY
60287: LIST
60288: LIST
60289: PUSH
60290: LD_INT 3
60292: PUSH
60293: LD_INT 1
60295: NEG
60296: PUSH
60297: EMPTY
60298: LIST
60299: LIST
60300: PUSH
60301: LD_INT 4
60303: PUSH
60304: LD_INT 0
60306: PUSH
60307: EMPTY
60308: LIST
60309: LIST
60310: PUSH
60311: LD_INT 4
60313: PUSH
60314: LD_INT 1
60316: PUSH
60317: EMPTY
60318: LIST
60319: LIST
60320: PUSH
60321: LD_INT 3
60323: PUSH
60324: LD_INT 1
60326: PUSH
60327: EMPTY
60328: LIST
60329: LIST
60330: PUSH
60331: LD_INT 2
60333: PUSH
60334: LD_INT 0
60336: PUSH
60337: EMPTY
60338: LIST
60339: LIST
60340: PUSH
60341: LD_INT 2
60343: PUSH
60344: LD_INT 1
60346: NEG
60347: PUSH
60348: EMPTY
60349: LIST
60350: LIST
60351: PUSH
60352: LD_INT 2
60354: PUSH
60355: LD_INT 2
60357: NEG
60358: PUSH
60359: EMPTY
60360: LIST
60361: LIST
60362: PUSH
60363: LD_INT 4
60365: PUSH
60366: LD_INT 2
60368: PUSH
60369: EMPTY
60370: LIST
60371: LIST
60372: PUSH
60373: LD_INT 4
60375: PUSH
60376: LD_INT 4
60378: PUSH
60379: EMPTY
60380: LIST
60381: LIST
60382: PUSH
60383: LD_INT 4
60385: PUSH
60386: LD_INT 3
60388: PUSH
60389: EMPTY
60390: LIST
60391: LIST
60392: PUSH
60393: LD_INT 5
60395: PUSH
60396: LD_INT 4
60398: PUSH
60399: EMPTY
60400: LIST
60401: LIST
60402: PUSH
60403: LD_INT 5
60405: PUSH
60406: LD_INT 5
60408: PUSH
60409: EMPTY
60410: LIST
60411: LIST
60412: PUSH
60413: LD_INT 4
60415: PUSH
60416: LD_INT 5
60418: PUSH
60419: EMPTY
60420: LIST
60421: LIST
60422: PUSH
60423: LD_INT 3
60425: PUSH
60426: LD_INT 4
60428: PUSH
60429: EMPTY
60430: LIST
60431: LIST
60432: PUSH
60433: LD_INT 3
60435: PUSH
60436: LD_INT 3
60438: PUSH
60439: EMPTY
60440: LIST
60441: LIST
60442: PUSH
60443: LD_INT 5
60445: PUSH
60446: LD_INT 3
60448: PUSH
60449: EMPTY
60450: LIST
60451: LIST
60452: PUSH
60453: LD_INT 3
60455: PUSH
60456: LD_INT 5
60458: PUSH
60459: EMPTY
60460: LIST
60461: LIST
60462: PUSH
60463: EMPTY
60464: LIST
60465: LIST
60466: LIST
60467: LIST
60468: LIST
60469: LIST
60470: LIST
60471: LIST
60472: LIST
60473: LIST
60474: LIST
60475: LIST
60476: LIST
60477: LIST
60478: LIST
60479: LIST
60480: LIST
60481: LIST
60482: LIST
60483: LIST
60484: LIST
60485: LIST
60486: LIST
60487: LIST
60488: LIST
60489: LIST
60490: LIST
60491: LIST
60492: LIST
60493: LIST
60494: LIST
60495: LIST
60496: LIST
60497: LIST
60498: LIST
60499: LIST
60500: LIST
60501: LIST
60502: LIST
60503: LIST
60504: LIST
60505: LIST
60506: LIST
60507: LIST
60508: LIST
60509: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
60510: LD_ADDR_VAR 0 33
60514: PUSH
60515: LD_INT 4
60517: NEG
60518: PUSH
60519: LD_INT 4
60521: NEG
60522: PUSH
60523: EMPTY
60524: LIST
60525: LIST
60526: PUSH
60527: LD_INT 4
60529: NEG
60530: PUSH
60531: LD_INT 5
60533: NEG
60534: PUSH
60535: EMPTY
60536: LIST
60537: LIST
60538: PUSH
60539: LD_INT 3
60541: NEG
60542: PUSH
60543: LD_INT 4
60545: NEG
60546: PUSH
60547: EMPTY
60548: LIST
60549: LIST
60550: PUSH
60551: LD_INT 3
60553: NEG
60554: PUSH
60555: LD_INT 3
60557: NEG
60558: PUSH
60559: EMPTY
60560: LIST
60561: LIST
60562: PUSH
60563: LD_INT 4
60565: NEG
60566: PUSH
60567: LD_INT 3
60569: NEG
60570: PUSH
60571: EMPTY
60572: LIST
60573: LIST
60574: PUSH
60575: LD_INT 5
60577: NEG
60578: PUSH
60579: LD_INT 4
60581: NEG
60582: PUSH
60583: EMPTY
60584: LIST
60585: LIST
60586: PUSH
60587: LD_INT 5
60589: NEG
60590: PUSH
60591: LD_INT 5
60593: NEG
60594: PUSH
60595: EMPTY
60596: LIST
60597: LIST
60598: PUSH
60599: LD_INT 3
60601: NEG
60602: PUSH
60603: LD_INT 5
60605: NEG
60606: PUSH
60607: EMPTY
60608: LIST
60609: LIST
60610: PUSH
60611: LD_INT 5
60613: NEG
60614: PUSH
60615: LD_INT 3
60617: NEG
60618: PUSH
60619: EMPTY
60620: LIST
60621: LIST
60622: PUSH
60623: LD_INT 0
60625: PUSH
60626: LD_INT 3
60628: NEG
60629: PUSH
60630: EMPTY
60631: LIST
60632: LIST
60633: PUSH
60634: LD_INT 0
60636: PUSH
60637: LD_INT 4
60639: NEG
60640: PUSH
60641: EMPTY
60642: LIST
60643: LIST
60644: PUSH
60645: LD_INT 1
60647: PUSH
60648: LD_INT 3
60650: NEG
60651: PUSH
60652: EMPTY
60653: LIST
60654: LIST
60655: PUSH
60656: LD_INT 1
60658: PUSH
60659: LD_INT 2
60661: NEG
60662: PUSH
60663: EMPTY
60664: LIST
60665: LIST
60666: PUSH
60667: LD_INT 0
60669: PUSH
60670: LD_INT 2
60672: NEG
60673: PUSH
60674: EMPTY
60675: LIST
60676: LIST
60677: PUSH
60678: LD_INT 1
60680: NEG
60681: PUSH
60682: LD_INT 3
60684: NEG
60685: PUSH
60686: EMPTY
60687: LIST
60688: LIST
60689: PUSH
60690: LD_INT 1
60692: NEG
60693: PUSH
60694: LD_INT 4
60696: NEG
60697: PUSH
60698: EMPTY
60699: LIST
60700: LIST
60701: PUSH
60702: LD_INT 2
60704: PUSH
60705: LD_INT 2
60707: NEG
60708: PUSH
60709: EMPTY
60710: LIST
60711: LIST
60712: PUSH
60713: LD_INT 2
60715: NEG
60716: PUSH
60717: LD_INT 4
60719: NEG
60720: PUSH
60721: EMPTY
60722: LIST
60723: LIST
60724: PUSH
60725: LD_INT 4
60727: PUSH
60728: LD_INT 0
60730: PUSH
60731: EMPTY
60732: LIST
60733: LIST
60734: PUSH
60735: LD_INT 4
60737: PUSH
60738: LD_INT 1
60740: NEG
60741: PUSH
60742: EMPTY
60743: LIST
60744: LIST
60745: PUSH
60746: LD_INT 5
60748: PUSH
60749: LD_INT 0
60751: PUSH
60752: EMPTY
60753: LIST
60754: LIST
60755: PUSH
60756: LD_INT 5
60758: PUSH
60759: LD_INT 1
60761: PUSH
60762: EMPTY
60763: LIST
60764: LIST
60765: PUSH
60766: LD_INT 4
60768: PUSH
60769: LD_INT 1
60771: PUSH
60772: EMPTY
60773: LIST
60774: LIST
60775: PUSH
60776: LD_INT 3
60778: PUSH
60779: LD_INT 0
60781: PUSH
60782: EMPTY
60783: LIST
60784: LIST
60785: PUSH
60786: LD_INT 3
60788: PUSH
60789: LD_INT 1
60791: NEG
60792: PUSH
60793: EMPTY
60794: LIST
60795: LIST
60796: PUSH
60797: LD_INT 3
60799: PUSH
60800: LD_INT 2
60802: NEG
60803: PUSH
60804: EMPTY
60805: LIST
60806: LIST
60807: PUSH
60808: LD_INT 5
60810: PUSH
60811: LD_INT 2
60813: PUSH
60814: EMPTY
60815: LIST
60816: LIST
60817: PUSH
60818: LD_INT 3
60820: PUSH
60821: LD_INT 3
60823: PUSH
60824: EMPTY
60825: LIST
60826: LIST
60827: PUSH
60828: LD_INT 3
60830: PUSH
60831: LD_INT 2
60833: PUSH
60834: EMPTY
60835: LIST
60836: LIST
60837: PUSH
60838: LD_INT 4
60840: PUSH
60841: LD_INT 3
60843: PUSH
60844: EMPTY
60845: LIST
60846: LIST
60847: PUSH
60848: LD_INT 4
60850: PUSH
60851: LD_INT 4
60853: PUSH
60854: EMPTY
60855: LIST
60856: LIST
60857: PUSH
60858: LD_INT 3
60860: PUSH
60861: LD_INT 4
60863: PUSH
60864: EMPTY
60865: LIST
60866: LIST
60867: PUSH
60868: LD_INT 2
60870: PUSH
60871: LD_INT 3
60873: PUSH
60874: EMPTY
60875: LIST
60876: LIST
60877: PUSH
60878: LD_INT 2
60880: PUSH
60881: LD_INT 2
60883: PUSH
60884: EMPTY
60885: LIST
60886: LIST
60887: PUSH
60888: LD_INT 4
60890: PUSH
60891: LD_INT 2
60893: PUSH
60894: EMPTY
60895: LIST
60896: LIST
60897: PUSH
60898: LD_INT 2
60900: PUSH
60901: LD_INT 4
60903: PUSH
60904: EMPTY
60905: LIST
60906: LIST
60907: PUSH
60908: LD_INT 0
60910: PUSH
60911: LD_INT 4
60913: PUSH
60914: EMPTY
60915: LIST
60916: LIST
60917: PUSH
60918: LD_INT 0
60920: PUSH
60921: LD_INT 3
60923: PUSH
60924: EMPTY
60925: LIST
60926: LIST
60927: PUSH
60928: LD_INT 1
60930: PUSH
60931: LD_INT 4
60933: PUSH
60934: EMPTY
60935: LIST
60936: LIST
60937: PUSH
60938: LD_INT 1
60940: PUSH
60941: LD_INT 5
60943: PUSH
60944: EMPTY
60945: LIST
60946: LIST
60947: PUSH
60948: LD_INT 0
60950: PUSH
60951: LD_INT 5
60953: PUSH
60954: EMPTY
60955: LIST
60956: LIST
60957: PUSH
60958: LD_INT 1
60960: NEG
60961: PUSH
60962: LD_INT 4
60964: PUSH
60965: EMPTY
60966: LIST
60967: LIST
60968: PUSH
60969: LD_INT 1
60971: NEG
60972: PUSH
60973: LD_INT 3
60975: PUSH
60976: EMPTY
60977: LIST
60978: LIST
60979: PUSH
60980: LD_INT 2
60982: PUSH
60983: LD_INT 5
60985: PUSH
60986: EMPTY
60987: LIST
60988: LIST
60989: PUSH
60990: LD_INT 2
60992: NEG
60993: PUSH
60994: LD_INT 3
60996: PUSH
60997: EMPTY
60998: LIST
60999: LIST
61000: PUSH
61001: EMPTY
61002: LIST
61003: LIST
61004: LIST
61005: LIST
61006: LIST
61007: LIST
61008: LIST
61009: LIST
61010: LIST
61011: LIST
61012: LIST
61013: LIST
61014: LIST
61015: LIST
61016: LIST
61017: LIST
61018: LIST
61019: LIST
61020: LIST
61021: LIST
61022: LIST
61023: LIST
61024: LIST
61025: LIST
61026: LIST
61027: LIST
61028: LIST
61029: LIST
61030: LIST
61031: LIST
61032: LIST
61033: LIST
61034: LIST
61035: LIST
61036: LIST
61037: LIST
61038: LIST
61039: LIST
61040: LIST
61041: LIST
61042: LIST
61043: LIST
61044: LIST
61045: LIST
61046: LIST
61047: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
61048: LD_ADDR_VAR 0 34
61052: PUSH
61053: LD_INT 0
61055: PUSH
61056: LD_INT 4
61058: NEG
61059: PUSH
61060: EMPTY
61061: LIST
61062: LIST
61063: PUSH
61064: LD_INT 0
61066: PUSH
61067: LD_INT 5
61069: NEG
61070: PUSH
61071: EMPTY
61072: LIST
61073: LIST
61074: PUSH
61075: LD_INT 1
61077: PUSH
61078: LD_INT 4
61080: NEG
61081: PUSH
61082: EMPTY
61083: LIST
61084: LIST
61085: PUSH
61086: LD_INT 1
61088: PUSH
61089: LD_INT 3
61091: NEG
61092: PUSH
61093: EMPTY
61094: LIST
61095: LIST
61096: PUSH
61097: LD_INT 0
61099: PUSH
61100: LD_INT 3
61102: NEG
61103: PUSH
61104: EMPTY
61105: LIST
61106: LIST
61107: PUSH
61108: LD_INT 1
61110: NEG
61111: PUSH
61112: LD_INT 4
61114: NEG
61115: PUSH
61116: EMPTY
61117: LIST
61118: LIST
61119: PUSH
61120: LD_INT 1
61122: NEG
61123: PUSH
61124: LD_INT 5
61126: NEG
61127: PUSH
61128: EMPTY
61129: LIST
61130: LIST
61131: PUSH
61132: LD_INT 2
61134: PUSH
61135: LD_INT 3
61137: NEG
61138: PUSH
61139: EMPTY
61140: LIST
61141: LIST
61142: PUSH
61143: LD_INT 2
61145: NEG
61146: PUSH
61147: LD_INT 5
61149: NEG
61150: PUSH
61151: EMPTY
61152: LIST
61153: LIST
61154: PUSH
61155: LD_INT 3
61157: PUSH
61158: LD_INT 0
61160: PUSH
61161: EMPTY
61162: LIST
61163: LIST
61164: PUSH
61165: LD_INT 3
61167: PUSH
61168: LD_INT 1
61170: NEG
61171: PUSH
61172: EMPTY
61173: LIST
61174: LIST
61175: PUSH
61176: LD_INT 4
61178: PUSH
61179: LD_INT 0
61181: PUSH
61182: EMPTY
61183: LIST
61184: LIST
61185: PUSH
61186: LD_INT 4
61188: PUSH
61189: LD_INT 1
61191: PUSH
61192: EMPTY
61193: LIST
61194: LIST
61195: PUSH
61196: LD_INT 3
61198: PUSH
61199: LD_INT 1
61201: PUSH
61202: EMPTY
61203: LIST
61204: LIST
61205: PUSH
61206: LD_INT 2
61208: PUSH
61209: LD_INT 0
61211: PUSH
61212: EMPTY
61213: LIST
61214: LIST
61215: PUSH
61216: LD_INT 2
61218: PUSH
61219: LD_INT 1
61221: NEG
61222: PUSH
61223: EMPTY
61224: LIST
61225: LIST
61226: PUSH
61227: LD_INT 2
61229: PUSH
61230: LD_INT 2
61232: NEG
61233: PUSH
61234: EMPTY
61235: LIST
61236: LIST
61237: PUSH
61238: LD_INT 4
61240: PUSH
61241: LD_INT 2
61243: PUSH
61244: EMPTY
61245: LIST
61246: LIST
61247: PUSH
61248: LD_INT 4
61250: PUSH
61251: LD_INT 4
61253: PUSH
61254: EMPTY
61255: LIST
61256: LIST
61257: PUSH
61258: LD_INT 4
61260: PUSH
61261: LD_INT 3
61263: PUSH
61264: EMPTY
61265: LIST
61266: LIST
61267: PUSH
61268: LD_INT 5
61270: PUSH
61271: LD_INT 4
61273: PUSH
61274: EMPTY
61275: LIST
61276: LIST
61277: PUSH
61278: LD_INT 5
61280: PUSH
61281: LD_INT 5
61283: PUSH
61284: EMPTY
61285: LIST
61286: LIST
61287: PUSH
61288: LD_INT 4
61290: PUSH
61291: LD_INT 5
61293: PUSH
61294: EMPTY
61295: LIST
61296: LIST
61297: PUSH
61298: LD_INT 3
61300: PUSH
61301: LD_INT 4
61303: PUSH
61304: EMPTY
61305: LIST
61306: LIST
61307: PUSH
61308: LD_INT 3
61310: PUSH
61311: LD_INT 3
61313: PUSH
61314: EMPTY
61315: LIST
61316: LIST
61317: PUSH
61318: LD_INT 5
61320: PUSH
61321: LD_INT 3
61323: PUSH
61324: EMPTY
61325: LIST
61326: LIST
61327: PUSH
61328: LD_INT 3
61330: PUSH
61331: LD_INT 5
61333: PUSH
61334: EMPTY
61335: LIST
61336: LIST
61337: PUSH
61338: LD_INT 0
61340: PUSH
61341: LD_INT 3
61343: PUSH
61344: EMPTY
61345: LIST
61346: LIST
61347: PUSH
61348: LD_INT 0
61350: PUSH
61351: LD_INT 2
61353: PUSH
61354: EMPTY
61355: LIST
61356: LIST
61357: PUSH
61358: LD_INT 1
61360: PUSH
61361: LD_INT 3
61363: PUSH
61364: EMPTY
61365: LIST
61366: LIST
61367: PUSH
61368: LD_INT 1
61370: PUSH
61371: LD_INT 4
61373: PUSH
61374: EMPTY
61375: LIST
61376: LIST
61377: PUSH
61378: LD_INT 0
61380: PUSH
61381: LD_INT 4
61383: PUSH
61384: EMPTY
61385: LIST
61386: LIST
61387: PUSH
61388: LD_INT 1
61390: NEG
61391: PUSH
61392: LD_INT 3
61394: PUSH
61395: EMPTY
61396: LIST
61397: LIST
61398: PUSH
61399: LD_INT 1
61401: NEG
61402: PUSH
61403: LD_INT 2
61405: PUSH
61406: EMPTY
61407: LIST
61408: LIST
61409: PUSH
61410: LD_INT 2
61412: PUSH
61413: LD_INT 4
61415: PUSH
61416: EMPTY
61417: LIST
61418: LIST
61419: PUSH
61420: LD_INT 2
61422: NEG
61423: PUSH
61424: LD_INT 2
61426: PUSH
61427: EMPTY
61428: LIST
61429: LIST
61430: PUSH
61431: LD_INT 4
61433: NEG
61434: PUSH
61435: LD_INT 0
61437: PUSH
61438: EMPTY
61439: LIST
61440: LIST
61441: PUSH
61442: LD_INT 4
61444: NEG
61445: PUSH
61446: LD_INT 1
61448: NEG
61449: PUSH
61450: EMPTY
61451: LIST
61452: LIST
61453: PUSH
61454: LD_INT 3
61456: NEG
61457: PUSH
61458: LD_INT 0
61460: PUSH
61461: EMPTY
61462: LIST
61463: LIST
61464: PUSH
61465: LD_INT 3
61467: NEG
61468: PUSH
61469: LD_INT 1
61471: PUSH
61472: EMPTY
61473: LIST
61474: LIST
61475: PUSH
61476: LD_INT 4
61478: NEG
61479: PUSH
61480: LD_INT 1
61482: PUSH
61483: EMPTY
61484: LIST
61485: LIST
61486: PUSH
61487: LD_INT 5
61489: NEG
61490: PUSH
61491: LD_INT 0
61493: PUSH
61494: EMPTY
61495: LIST
61496: LIST
61497: PUSH
61498: LD_INT 5
61500: NEG
61501: PUSH
61502: LD_INT 1
61504: NEG
61505: PUSH
61506: EMPTY
61507: LIST
61508: LIST
61509: PUSH
61510: LD_INT 5
61512: NEG
61513: PUSH
61514: LD_INT 2
61516: NEG
61517: PUSH
61518: EMPTY
61519: LIST
61520: LIST
61521: PUSH
61522: LD_INT 3
61524: NEG
61525: PUSH
61526: LD_INT 2
61528: PUSH
61529: EMPTY
61530: LIST
61531: LIST
61532: PUSH
61533: EMPTY
61534: LIST
61535: LIST
61536: LIST
61537: LIST
61538: LIST
61539: LIST
61540: LIST
61541: LIST
61542: LIST
61543: LIST
61544: LIST
61545: LIST
61546: LIST
61547: LIST
61548: LIST
61549: LIST
61550: LIST
61551: LIST
61552: LIST
61553: LIST
61554: LIST
61555: LIST
61556: LIST
61557: LIST
61558: LIST
61559: LIST
61560: LIST
61561: LIST
61562: LIST
61563: LIST
61564: LIST
61565: LIST
61566: LIST
61567: LIST
61568: LIST
61569: LIST
61570: LIST
61571: LIST
61572: LIST
61573: LIST
61574: LIST
61575: LIST
61576: LIST
61577: LIST
61578: LIST
61579: ST_TO_ADDR
// end ; end ;
61580: GO 61583
61582: POP
// case btype of b_depot , b_warehouse :
61583: LD_VAR 0 1
61587: PUSH
61588: LD_INT 0
61590: DOUBLE
61591: EQUAL
61592: IFTRUE 61602
61594: LD_INT 1
61596: DOUBLE
61597: EQUAL
61598: IFTRUE 61602
61600: GO 61803
61602: POP
// case nation of nation_american :
61603: LD_VAR 0 5
61607: PUSH
61608: LD_INT 1
61610: DOUBLE
61611: EQUAL
61612: IFTRUE 61616
61614: GO 61672
61616: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
61617: LD_ADDR_VAR 0 9
61621: PUSH
61622: LD_VAR 0 11
61626: PUSH
61627: LD_VAR 0 12
61631: PUSH
61632: LD_VAR 0 13
61636: PUSH
61637: LD_VAR 0 14
61641: PUSH
61642: LD_VAR 0 15
61646: PUSH
61647: LD_VAR 0 16
61651: PUSH
61652: EMPTY
61653: LIST
61654: LIST
61655: LIST
61656: LIST
61657: LIST
61658: LIST
61659: PUSH
61660: LD_VAR 0 4
61664: PUSH
61665: LD_INT 1
61667: PLUS
61668: ARRAY
61669: ST_TO_ADDR
61670: GO 61801
61672: LD_INT 2
61674: DOUBLE
61675: EQUAL
61676: IFTRUE 61680
61678: GO 61736
61680: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
61681: LD_ADDR_VAR 0 9
61685: PUSH
61686: LD_VAR 0 17
61690: PUSH
61691: LD_VAR 0 18
61695: PUSH
61696: LD_VAR 0 19
61700: PUSH
61701: LD_VAR 0 20
61705: PUSH
61706: LD_VAR 0 21
61710: PUSH
61711: LD_VAR 0 22
61715: PUSH
61716: EMPTY
61717: LIST
61718: LIST
61719: LIST
61720: LIST
61721: LIST
61722: LIST
61723: PUSH
61724: LD_VAR 0 4
61728: PUSH
61729: LD_INT 1
61731: PLUS
61732: ARRAY
61733: ST_TO_ADDR
61734: GO 61801
61736: LD_INT 3
61738: DOUBLE
61739: EQUAL
61740: IFTRUE 61744
61742: GO 61800
61744: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
61745: LD_ADDR_VAR 0 9
61749: PUSH
61750: LD_VAR 0 23
61754: PUSH
61755: LD_VAR 0 24
61759: PUSH
61760: LD_VAR 0 25
61764: PUSH
61765: LD_VAR 0 26
61769: PUSH
61770: LD_VAR 0 27
61774: PUSH
61775: LD_VAR 0 28
61779: PUSH
61780: EMPTY
61781: LIST
61782: LIST
61783: LIST
61784: LIST
61785: LIST
61786: LIST
61787: PUSH
61788: LD_VAR 0 4
61792: PUSH
61793: LD_INT 1
61795: PLUS
61796: ARRAY
61797: ST_TO_ADDR
61798: GO 61801
61800: POP
61801: GO 62356
61803: LD_INT 2
61805: DOUBLE
61806: EQUAL
61807: IFTRUE 61817
61809: LD_INT 3
61811: DOUBLE
61812: EQUAL
61813: IFTRUE 61817
61815: GO 61873
61817: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
61818: LD_ADDR_VAR 0 9
61822: PUSH
61823: LD_VAR 0 29
61827: PUSH
61828: LD_VAR 0 30
61832: PUSH
61833: LD_VAR 0 31
61837: PUSH
61838: LD_VAR 0 32
61842: PUSH
61843: LD_VAR 0 33
61847: PUSH
61848: LD_VAR 0 34
61852: PUSH
61853: EMPTY
61854: LIST
61855: LIST
61856: LIST
61857: LIST
61858: LIST
61859: LIST
61860: PUSH
61861: LD_VAR 0 4
61865: PUSH
61866: LD_INT 1
61868: PLUS
61869: ARRAY
61870: ST_TO_ADDR
61871: GO 62356
61873: LD_INT 16
61875: DOUBLE
61876: EQUAL
61877: IFTRUE 61935
61879: LD_INT 17
61881: DOUBLE
61882: EQUAL
61883: IFTRUE 61935
61885: LD_INT 18
61887: DOUBLE
61888: EQUAL
61889: IFTRUE 61935
61891: LD_INT 19
61893: DOUBLE
61894: EQUAL
61895: IFTRUE 61935
61897: LD_INT 22
61899: DOUBLE
61900: EQUAL
61901: IFTRUE 61935
61903: LD_INT 20
61905: DOUBLE
61906: EQUAL
61907: IFTRUE 61935
61909: LD_INT 21
61911: DOUBLE
61912: EQUAL
61913: IFTRUE 61935
61915: LD_INT 23
61917: DOUBLE
61918: EQUAL
61919: IFTRUE 61935
61921: LD_INT 24
61923: DOUBLE
61924: EQUAL
61925: IFTRUE 61935
61927: LD_INT 25
61929: DOUBLE
61930: EQUAL
61931: IFTRUE 61935
61933: GO 61991
61935: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
61936: LD_ADDR_VAR 0 9
61940: PUSH
61941: LD_VAR 0 35
61945: PUSH
61946: LD_VAR 0 36
61950: PUSH
61951: LD_VAR 0 37
61955: PUSH
61956: LD_VAR 0 38
61960: PUSH
61961: LD_VAR 0 39
61965: PUSH
61966: LD_VAR 0 40
61970: PUSH
61971: EMPTY
61972: LIST
61973: LIST
61974: LIST
61975: LIST
61976: LIST
61977: LIST
61978: PUSH
61979: LD_VAR 0 4
61983: PUSH
61984: LD_INT 1
61986: PLUS
61987: ARRAY
61988: ST_TO_ADDR
61989: GO 62356
61991: LD_INT 6
61993: DOUBLE
61994: EQUAL
61995: IFTRUE 62047
61997: LD_INT 7
61999: DOUBLE
62000: EQUAL
62001: IFTRUE 62047
62003: LD_INT 8
62005: DOUBLE
62006: EQUAL
62007: IFTRUE 62047
62009: LD_INT 13
62011: DOUBLE
62012: EQUAL
62013: IFTRUE 62047
62015: LD_INT 12
62017: DOUBLE
62018: EQUAL
62019: IFTRUE 62047
62021: LD_INT 15
62023: DOUBLE
62024: EQUAL
62025: IFTRUE 62047
62027: LD_INT 11
62029: DOUBLE
62030: EQUAL
62031: IFTRUE 62047
62033: LD_INT 14
62035: DOUBLE
62036: EQUAL
62037: IFTRUE 62047
62039: LD_INT 10
62041: DOUBLE
62042: EQUAL
62043: IFTRUE 62047
62045: GO 62103
62047: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
62048: LD_ADDR_VAR 0 9
62052: PUSH
62053: LD_VAR 0 41
62057: PUSH
62058: LD_VAR 0 42
62062: PUSH
62063: LD_VAR 0 43
62067: PUSH
62068: LD_VAR 0 44
62072: PUSH
62073: LD_VAR 0 45
62077: PUSH
62078: LD_VAR 0 46
62082: PUSH
62083: EMPTY
62084: LIST
62085: LIST
62086: LIST
62087: LIST
62088: LIST
62089: LIST
62090: PUSH
62091: LD_VAR 0 4
62095: PUSH
62096: LD_INT 1
62098: PLUS
62099: ARRAY
62100: ST_TO_ADDR
62101: GO 62356
62103: LD_INT 36
62105: DOUBLE
62106: EQUAL
62107: IFTRUE 62111
62109: GO 62167
62111: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
62112: LD_ADDR_VAR 0 9
62116: PUSH
62117: LD_VAR 0 47
62121: PUSH
62122: LD_VAR 0 48
62126: PUSH
62127: LD_VAR 0 49
62131: PUSH
62132: LD_VAR 0 50
62136: PUSH
62137: LD_VAR 0 51
62141: PUSH
62142: LD_VAR 0 52
62146: PUSH
62147: EMPTY
62148: LIST
62149: LIST
62150: LIST
62151: LIST
62152: LIST
62153: LIST
62154: PUSH
62155: LD_VAR 0 4
62159: PUSH
62160: LD_INT 1
62162: PLUS
62163: ARRAY
62164: ST_TO_ADDR
62165: GO 62356
62167: LD_INT 4
62169: DOUBLE
62170: EQUAL
62171: IFTRUE 62193
62173: LD_INT 5
62175: DOUBLE
62176: EQUAL
62177: IFTRUE 62193
62179: LD_INT 34
62181: DOUBLE
62182: EQUAL
62183: IFTRUE 62193
62185: LD_INT 37
62187: DOUBLE
62188: EQUAL
62189: IFTRUE 62193
62191: GO 62249
62193: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
62194: LD_ADDR_VAR 0 9
62198: PUSH
62199: LD_VAR 0 53
62203: PUSH
62204: LD_VAR 0 54
62208: PUSH
62209: LD_VAR 0 55
62213: PUSH
62214: LD_VAR 0 56
62218: PUSH
62219: LD_VAR 0 57
62223: PUSH
62224: LD_VAR 0 58
62228: PUSH
62229: EMPTY
62230: LIST
62231: LIST
62232: LIST
62233: LIST
62234: LIST
62235: LIST
62236: PUSH
62237: LD_VAR 0 4
62241: PUSH
62242: LD_INT 1
62244: PLUS
62245: ARRAY
62246: ST_TO_ADDR
62247: GO 62356
62249: LD_INT 31
62251: DOUBLE
62252: EQUAL
62253: IFTRUE 62299
62255: LD_INT 32
62257: DOUBLE
62258: EQUAL
62259: IFTRUE 62299
62261: LD_INT 33
62263: DOUBLE
62264: EQUAL
62265: IFTRUE 62299
62267: LD_INT 27
62269: DOUBLE
62270: EQUAL
62271: IFTRUE 62299
62273: LD_INT 26
62275: DOUBLE
62276: EQUAL
62277: IFTRUE 62299
62279: LD_INT 28
62281: DOUBLE
62282: EQUAL
62283: IFTRUE 62299
62285: LD_INT 29
62287: DOUBLE
62288: EQUAL
62289: IFTRUE 62299
62291: LD_INT 30
62293: DOUBLE
62294: EQUAL
62295: IFTRUE 62299
62297: GO 62355
62299: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
62300: LD_ADDR_VAR 0 9
62304: PUSH
62305: LD_VAR 0 59
62309: PUSH
62310: LD_VAR 0 60
62314: PUSH
62315: LD_VAR 0 61
62319: PUSH
62320: LD_VAR 0 62
62324: PUSH
62325: LD_VAR 0 63
62329: PUSH
62330: LD_VAR 0 64
62334: PUSH
62335: EMPTY
62336: LIST
62337: LIST
62338: LIST
62339: LIST
62340: LIST
62341: LIST
62342: PUSH
62343: LD_VAR 0 4
62347: PUSH
62348: LD_INT 1
62350: PLUS
62351: ARRAY
62352: ST_TO_ADDR
62353: GO 62356
62355: POP
// temp_list2 = [ ] ;
62356: LD_ADDR_VAR 0 10
62360: PUSH
62361: EMPTY
62362: ST_TO_ADDR
// for i in temp_list do
62363: LD_ADDR_VAR 0 8
62367: PUSH
62368: LD_VAR 0 9
62372: PUSH
62373: FOR_IN
62374: IFFALSE 62426
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
62376: LD_ADDR_VAR 0 10
62380: PUSH
62381: LD_VAR 0 10
62385: PUSH
62386: LD_VAR 0 8
62390: PUSH
62391: LD_INT 1
62393: ARRAY
62394: PUSH
62395: LD_VAR 0 2
62399: PLUS
62400: PUSH
62401: LD_VAR 0 8
62405: PUSH
62406: LD_INT 2
62408: ARRAY
62409: PUSH
62410: LD_VAR 0 3
62414: PLUS
62415: PUSH
62416: EMPTY
62417: LIST
62418: LIST
62419: PUSH
62420: EMPTY
62421: LIST
62422: ADD
62423: ST_TO_ADDR
62424: GO 62373
62426: POP
62427: POP
// result = temp_list2 ;
62428: LD_ADDR_VAR 0 7
62432: PUSH
62433: LD_VAR 0 10
62437: ST_TO_ADDR
// end ;
62438: LD_VAR 0 7
62442: RET
// export function EnemyInRange ( unit , dist ) ; begin
62443: LD_INT 0
62445: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
62446: LD_ADDR_VAR 0 3
62450: PUSH
62451: LD_VAR 0 1
62455: PPUSH
62456: CALL_OW 255
62460: PPUSH
62461: LD_VAR 0 1
62465: PPUSH
62466: CALL_OW 250
62470: PPUSH
62471: LD_VAR 0 1
62475: PPUSH
62476: CALL_OW 251
62480: PPUSH
62481: LD_VAR 0 2
62485: PPUSH
62486: CALL 35839 0 4
62490: PUSH
62491: LD_INT 4
62493: ARRAY
62494: ST_TO_ADDR
// end ;
62495: LD_VAR 0 3
62499: RET
// export function PlayerSeeMe ( unit ) ; begin
62500: LD_INT 0
62502: PPUSH
// result := See ( your_side , unit ) ;
62503: LD_ADDR_VAR 0 2
62507: PUSH
62508: LD_OWVAR 2
62512: PPUSH
62513: LD_VAR 0 1
62517: PPUSH
62518: CALL_OW 292
62522: ST_TO_ADDR
// end ;
62523: LD_VAR 0 2
62527: RET
// export function ReverseDir ( unit ) ; begin
62528: LD_INT 0
62530: PPUSH
// if not unit then
62531: LD_VAR 0 1
62535: NOT
62536: IFFALSE 62540
// exit ;
62538: GO 62563
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
62540: LD_ADDR_VAR 0 2
62544: PUSH
62545: LD_VAR 0 1
62549: PPUSH
62550: CALL_OW 254
62554: PUSH
62555: LD_INT 3
62557: PLUS
62558: PUSH
62559: LD_INT 6
62561: MOD
62562: ST_TO_ADDR
// end ;
62563: LD_VAR 0 2
62567: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
62568: LD_INT 0
62570: PPUSH
62571: PPUSH
62572: PPUSH
62573: PPUSH
62574: PPUSH
// if not hexes then
62575: LD_VAR 0 2
62579: NOT
62580: IFFALSE 62584
// exit ;
62582: GO 62732
// dist := 9999 ;
62584: LD_ADDR_VAR 0 5
62588: PUSH
62589: LD_INT 9999
62591: ST_TO_ADDR
// for i = 1 to hexes do
62592: LD_ADDR_VAR 0 4
62596: PUSH
62597: DOUBLE
62598: LD_INT 1
62600: DEC
62601: ST_TO_ADDR
62602: LD_VAR 0 2
62606: PUSH
62607: FOR_TO
62608: IFFALSE 62720
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
62610: LD_VAR 0 1
62614: PPUSH
62615: LD_VAR 0 2
62619: PUSH
62620: LD_VAR 0 4
62624: ARRAY
62625: PUSH
62626: LD_INT 1
62628: ARRAY
62629: PPUSH
62630: LD_VAR 0 2
62634: PUSH
62635: LD_VAR 0 4
62639: ARRAY
62640: PUSH
62641: LD_INT 2
62643: ARRAY
62644: PPUSH
62645: CALL_OW 297
62649: PUSH
62650: LD_VAR 0 5
62654: LESS
62655: IFFALSE 62718
// begin hex := hexes [ i ] ;
62657: LD_ADDR_VAR 0 7
62661: PUSH
62662: LD_VAR 0 2
62666: PUSH
62667: LD_VAR 0 4
62671: ARRAY
62672: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
62673: LD_ADDR_VAR 0 5
62677: PUSH
62678: LD_VAR 0 1
62682: PPUSH
62683: LD_VAR 0 2
62687: PUSH
62688: LD_VAR 0 4
62692: ARRAY
62693: PUSH
62694: LD_INT 1
62696: ARRAY
62697: PPUSH
62698: LD_VAR 0 2
62702: PUSH
62703: LD_VAR 0 4
62707: ARRAY
62708: PUSH
62709: LD_INT 2
62711: ARRAY
62712: PPUSH
62713: CALL_OW 297
62717: ST_TO_ADDR
// end ; end ;
62718: GO 62607
62720: POP
62721: POP
// result := hex ;
62722: LD_ADDR_VAR 0 3
62726: PUSH
62727: LD_VAR 0 7
62731: ST_TO_ADDR
// end ;
62732: LD_VAR 0 3
62736: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
62737: LD_INT 0
62739: PPUSH
62740: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
62741: LD_VAR 0 1
62745: NOT
62746: PUSH
62747: LD_VAR 0 1
62751: PUSH
62752: LD_INT 21
62754: PUSH
62755: LD_INT 2
62757: PUSH
62758: EMPTY
62759: LIST
62760: LIST
62761: PUSH
62762: LD_INT 23
62764: PUSH
62765: LD_INT 2
62767: PUSH
62768: EMPTY
62769: LIST
62770: LIST
62771: PUSH
62772: EMPTY
62773: LIST
62774: LIST
62775: PPUSH
62776: CALL_OW 69
62780: IN
62781: NOT
62782: OR
62783: IFFALSE 62787
// exit ;
62785: GO 62834
// for i = 1 to 3 do
62787: LD_ADDR_VAR 0 3
62791: PUSH
62792: DOUBLE
62793: LD_INT 1
62795: DEC
62796: ST_TO_ADDR
62797: LD_INT 3
62799: PUSH
62800: FOR_TO
62801: IFFALSE 62832
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
62803: LD_VAR 0 1
62807: PPUSH
62808: CALL_OW 250
62812: PPUSH
62813: LD_VAR 0 1
62817: PPUSH
62818: CALL_OW 251
62822: PPUSH
62823: LD_INT 1
62825: PPUSH
62826: CALL_OW 453
62830: GO 62800
62832: POP
62833: POP
// end ;
62834: LD_VAR 0 2
62838: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
62839: LD_INT 0
62841: PPUSH
62842: PPUSH
62843: PPUSH
62844: PPUSH
62845: PPUSH
62846: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
62847: LD_VAR 0 1
62851: NOT
62852: PUSH
62853: LD_VAR 0 2
62857: NOT
62858: OR
62859: PUSH
62860: LD_VAR 0 1
62864: PPUSH
62865: CALL_OW 314
62869: OR
62870: IFFALSE 62874
// exit ;
62872: GO 63315
// x := GetX ( enemy_unit ) ;
62874: LD_ADDR_VAR 0 7
62878: PUSH
62879: LD_VAR 0 2
62883: PPUSH
62884: CALL_OW 250
62888: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
62889: LD_ADDR_VAR 0 8
62893: PUSH
62894: LD_VAR 0 2
62898: PPUSH
62899: CALL_OW 251
62903: ST_TO_ADDR
// if not x or not y then
62904: LD_VAR 0 7
62908: NOT
62909: PUSH
62910: LD_VAR 0 8
62914: NOT
62915: OR
62916: IFFALSE 62920
// exit ;
62918: GO 63315
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
62920: LD_ADDR_VAR 0 6
62924: PUSH
62925: LD_VAR 0 7
62929: PPUSH
62930: LD_INT 0
62932: PPUSH
62933: LD_INT 4
62935: PPUSH
62936: CALL_OW 272
62940: PUSH
62941: LD_VAR 0 8
62945: PPUSH
62946: LD_INT 0
62948: PPUSH
62949: LD_INT 4
62951: PPUSH
62952: CALL_OW 273
62956: PUSH
62957: EMPTY
62958: LIST
62959: LIST
62960: PUSH
62961: LD_VAR 0 7
62965: PPUSH
62966: LD_INT 1
62968: PPUSH
62969: LD_INT 4
62971: PPUSH
62972: CALL_OW 272
62976: PUSH
62977: LD_VAR 0 8
62981: PPUSH
62982: LD_INT 1
62984: PPUSH
62985: LD_INT 4
62987: PPUSH
62988: CALL_OW 273
62992: PUSH
62993: EMPTY
62994: LIST
62995: LIST
62996: PUSH
62997: LD_VAR 0 7
63001: PPUSH
63002: LD_INT 2
63004: PPUSH
63005: LD_INT 4
63007: PPUSH
63008: CALL_OW 272
63012: PUSH
63013: LD_VAR 0 8
63017: PPUSH
63018: LD_INT 2
63020: PPUSH
63021: LD_INT 4
63023: PPUSH
63024: CALL_OW 273
63028: PUSH
63029: EMPTY
63030: LIST
63031: LIST
63032: PUSH
63033: LD_VAR 0 7
63037: PPUSH
63038: LD_INT 3
63040: PPUSH
63041: LD_INT 4
63043: PPUSH
63044: CALL_OW 272
63048: PUSH
63049: LD_VAR 0 8
63053: PPUSH
63054: LD_INT 3
63056: PPUSH
63057: LD_INT 4
63059: PPUSH
63060: CALL_OW 273
63064: PUSH
63065: EMPTY
63066: LIST
63067: LIST
63068: PUSH
63069: LD_VAR 0 7
63073: PPUSH
63074: LD_INT 4
63076: PPUSH
63077: LD_INT 4
63079: PPUSH
63080: CALL_OW 272
63084: PUSH
63085: LD_VAR 0 8
63089: PPUSH
63090: LD_INT 4
63092: PPUSH
63093: LD_INT 4
63095: PPUSH
63096: CALL_OW 273
63100: PUSH
63101: EMPTY
63102: LIST
63103: LIST
63104: PUSH
63105: LD_VAR 0 7
63109: PPUSH
63110: LD_INT 5
63112: PPUSH
63113: LD_INT 4
63115: PPUSH
63116: CALL_OW 272
63120: PUSH
63121: LD_VAR 0 8
63125: PPUSH
63126: LD_INT 5
63128: PPUSH
63129: LD_INT 4
63131: PPUSH
63132: CALL_OW 273
63136: PUSH
63137: EMPTY
63138: LIST
63139: LIST
63140: PUSH
63141: EMPTY
63142: LIST
63143: LIST
63144: LIST
63145: LIST
63146: LIST
63147: LIST
63148: ST_TO_ADDR
// for i = tmp downto 1 do
63149: LD_ADDR_VAR 0 4
63153: PUSH
63154: DOUBLE
63155: LD_VAR 0 6
63159: INC
63160: ST_TO_ADDR
63161: LD_INT 1
63163: PUSH
63164: FOR_DOWNTO
63165: IFFALSE 63266
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
63167: LD_VAR 0 6
63171: PUSH
63172: LD_VAR 0 4
63176: ARRAY
63177: PUSH
63178: LD_INT 1
63180: ARRAY
63181: PPUSH
63182: LD_VAR 0 6
63186: PUSH
63187: LD_VAR 0 4
63191: ARRAY
63192: PUSH
63193: LD_INT 2
63195: ARRAY
63196: PPUSH
63197: CALL_OW 488
63201: NOT
63202: PUSH
63203: LD_VAR 0 6
63207: PUSH
63208: LD_VAR 0 4
63212: ARRAY
63213: PUSH
63214: LD_INT 1
63216: ARRAY
63217: PPUSH
63218: LD_VAR 0 6
63222: PUSH
63223: LD_VAR 0 4
63227: ARRAY
63228: PUSH
63229: LD_INT 2
63231: ARRAY
63232: PPUSH
63233: CALL_OW 428
63237: PUSH
63238: LD_INT 0
63240: NONEQUAL
63241: OR
63242: IFFALSE 63264
// tmp := Delete ( tmp , i ) ;
63244: LD_ADDR_VAR 0 6
63248: PUSH
63249: LD_VAR 0 6
63253: PPUSH
63254: LD_VAR 0 4
63258: PPUSH
63259: CALL_OW 3
63263: ST_TO_ADDR
63264: GO 63164
63266: POP
63267: POP
// j := GetClosestHex ( unit , tmp ) ;
63268: LD_ADDR_VAR 0 5
63272: PUSH
63273: LD_VAR 0 1
63277: PPUSH
63278: LD_VAR 0 6
63282: PPUSH
63283: CALL 62568 0 2
63287: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
63288: LD_VAR 0 1
63292: PPUSH
63293: LD_VAR 0 5
63297: PUSH
63298: LD_INT 1
63300: ARRAY
63301: PPUSH
63302: LD_VAR 0 5
63306: PUSH
63307: LD_INT 2
63309: ARRAY
63310: PPUSH
63311: CALL_OW 111
// end ;
63315: LD_VAR 0 3
63319: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
63320: LD_INT 0
63322: PPUSH
63323: PPUSH
63324: PPUSH
// uc_side = 0 ;
63325: LD_ADDR_OWVAR 20
63329: PUSH
63330: LD_INT 0
63332: ST_TO_ADDR
// uc_nation = 0 ;
63333: LD_ADDR_OWVAR 21
63337: PUSH
63338: LD_INT 0
63340: ST_TO_ADDR
// InitHc_All ( ) ;
63341: CALL_OW 584
// InitVc ;
63345: CALL_OW 20
// if mastodonts then
63349: LD_VAR 0 6
63353: IFFALSE 63420
// for i = 1 to mastodonts do
63355: LD_ADDR_VAR 0 11
63359: PUSH
63360: DOUBLE
63361: LD_INT 1
63363: DEC
63364: ST_TO_ADDR
63365: LD_VAR 0 6
63369: PUSH
63370: FOR_TO
63371: IFFALSE 63418
// begin vc_chassis := 31 ;
63373: LD_ADDR_OWVAR 37
63377: PUSH
63378: LD_INT 31
63380: ST_TO_ADDR
// vc_control := control_rider ;
63381: LD_ADDR_OWVAR 38
63385: PUSH
63386: LD_INT 4
63388: ST_TO_ADDR
// animal := CreateVehicle ;
63389: LD_ADDR_VAR 0 12
63393: PUSH
63394: CALL_OW 45
63398: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63399: LD_VAR 0 12
63403: PPUSH
63404: LD_VAR 0 8
63408: PPUSH
63409: LD_INT 0
63411: PPUSH
63412: CALL 65608 0 3
// end ;
63416: GO 63370
63418: POP
63419: POP
// if horses then
63420: LD_VAR 0 5
63424: IFFALSE 63491
// for i = 1 to horses do
63426: LD_ADDR_VAR 0 11
63430: PUSH
63431: DOUBLE
63432: LD_INT 1
63434: DEC
63435: ST_TO_ADDR
63436: LD_VAR 0 5
63440: PUSH
63441: FOR_TO
63442: IFFALSE 63489
// begin hc_class := 21 ;
63444: LD_ADDR_OWVAR 28
63448: PUSH
63449: LD_INT 21
63451: ST_TO_ADDR
// hc_gallery :=  ;
63452: LD_ADDR_OWVAR 33
63456: PUSH
63457: LD_STRING 
63459: ST_TO_ADDR
// animal := CreateHuman ;
63460: LD_ADDR_VAR 0 12
63464: PUSH
63465: CALL_OW 44
63469: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63470: LD_VAR 0 12
63474: PPUSH
63475: LD_VAR 0 8
63479: PPUSH
63480: LD_INT 0
63482: PPUSH
63483: CALL 65608 0 3
// end ;
63487: GO 63441
63489: POP
63490: POP
// if birds then
63491: LD_VAR 0 1
63495: IFFALSE 63562
// for i = 1 to birds do
63497: LD_ADDR_VAR 0 11
63501: PUSH
63502: DOUBLE
63503: LD_INT 1
63505: DEC
63506: ST_TO_ADDR
63507: LD_VAR 0 1
63511: PUSH
63512: FOR_TO
63513: IFFALSE 63560
// begin hc_class = 18 ;
63515: LD_ADDR_OWVAR 28
63519: PUSH
63520: LD_INT 18
63522: ST_TO_ADDR
// hc_gallery =  ;
63523: LD_ADDR_OWVAR 33
63527: PUSH
63528: LD_STRING 
63530: ST_TO_ADDR
// animal := CreateHuman ;
63531: LD_ADDR_VAR 0 12
63535: PUSH
63536: CALL_OW 44
63540: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63541: LD_VAR 0 12
63545: PPUSH
63546: LD_VAR 0 8
63550: PPUSH
63551: LD_INT 0
63553: PPUSH
63554: CALL 65608 0 3
// end ;
63558: GO 63512
63560: POP
63561: POP
// if tigers then
63562: LD_VAR 0 2
63566: IFFALSE 63650
// for i = 1 to tigers do
63568: LD_ADDR_VAR 0 11
63572: PUSH
63573: DOUBLE
63574: LD_INT 1
63576: DEC
63577: ST_TO_ADDR
63578: LD_VAR 0 2
63582: PUSH
63583: FOR_TO
63584: IFFALSE 63648
// begin hc_class = class_tiger ;
63586: LD_ADDR_OWVAR 28
63590: PUSH
63591: LD_INT 14
63593: ST_TO_ADDR
// hc_gallery =  ;
63594: LD_ADDR_OWVAR 33
63598: PUSH
63599: LD_STRING 
63601: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
63602: LD_ADDR_OWVAR 35
63606: PUSH
63607: LD_INT 7
63609: NEG
63610: PPUSH
63611: LD_INT 7
63613: PPUSH
63614: CALL_OW 12
63618: ST_TO_ADDR
// animal := CreateHuman ;
63619: LD_ADDR_VAR 0 12
63623: PUSH
63624: CALL_OW 44
63628: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63629: LD_VAR 0 12
63633: PPUSH
63634: LD_VAR 0 8
63638: PPUSH
63639: LD_INT 0
63641: PPUSH
63642: CALL 65608 0 3
// end ;
63646: GO 63583
63648: POP
63649: POP
// if apemans then
63650: LD_VAR 0 3
63654: IFFALSE 63777
// for i = 1 to apemans do
63656: LD_ADDR_VAR 0 11
63660: PUSH
63661: DOUBLE
63662: LD_INT 1
63664: DEC
63665: ST_TO_ADDR
63666: LD_VAR 0 3
63670: PUSH
63671: FOR_TO
63672: IFFALSE 63775
// begin hc_class = class_apeman ;
63674: LD_ADDR_OWVAR 28
63678: PUSH
63679: LD_INT 12
63681: ST_TO_ADDR
// hc_gallery =  ;
63682: LD_ADDR_OWVAR 33
63686: PUSH
63687: LD_STRING 
63689: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
63690: LD_ADDR_OWVAR 35
63694: PUSH
63695: LD_INT 2
63697: NEG
63698: PPUSH
63699: LD_INT 2
63701: PPUSH
63702: CALL_OW 12
63706: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
63707: LD_ADDR_OWVAR 31
63711: PUSH
63712: LD_INT 1
63714: PPUSH
63715: LD_INT 3
63717: PPUSH
63718: CALL_OW 12
63722: PUSH
63723: LD_INT 1
63725: PPUSH
63726: LD_INT 3
63728: PPUSH
63729: CALL_OW 12
63733: PUSH
63734: LD_INT 0
63736: PUSH
63737: LD_INT 0
63739: PUSH
63740: EMPTY
63741: LIST
63742: LIST
63743: LIST
63744: LIST
63745: ST_TO_ADDR
// animal := CreateHuman ;
63746: LD_ADDR_VAR 0 12
63750: PUSH
63751: CALL_OW 44
63755: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63756: LD_VAR 0 12
63760: PPUSH
63761: LD_VAR 0 8
63765: PPUSH
63766: LD_INT 0
63768: PPUSH
63769: CALL 65608 0 3
// end ;
63773: GO 63671
63775: POP
63776: POP
// if enchidnas then
63777: LD_VAR 0 4
63781: IFFALSE 63848
// for i = 1 to enchidnas do
63783: LD_ADDR_VAR 0 11
63787: PUSH
63788: DOUBLE
63789: LD_INT 1
63791: DEC
63792: ST_TO_ADDR
63793: LD_VAR 0 4
63797: PUSH
63798: FOR_TO
63799: IFFALSE 63846
// begin hc_class = 13 ;
63801: LD_ADDR_OWVAR 28
63805: PUSH
63806: LD_INT 13
63808: ST_TO_ADDR
// hc_gallery =  ;
63809: LD_ADDR_OWVAR 33
63813: PUSH
63814: LD_STRING 
63816: ST_TO_ADDR
// animal := CreateHuman ;
63817: LD_ADDR_VAR 0 12
63821: PUSH
63822: CALL_OW 44
63826: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63827: LD_VAR 0 12
63831: PPUSH
63832: LD_VAR 0 8
63836: PPUSH
63837: LD_INT 0
63839: PPUSH
63840: CALL 65608 0 3
// end ;
63844: GO 63798
63846: POP
63847: POP
// if fishes then
63848: LD_VAR 0 7
63852: IFFALSE 63919
// for i = 1 to fishes do
63854: LD_ADDR_VAR 0 11
63858: PUSH
63859: DOUBLE
63860: LD_INT 1
63862: DEC
63863: ST_TO_ADDR
63864: LD_VAR 0 7
63868: PUSH
63869: FOR_TO
63870: IFFALSE 63917
// begin hc_class = 20 ;
63872: LD_ADDR_OWVAR 28
63876: PUSH
63877: LD_INT 20
63879: ST_TO_ADDR
// hc_gallery =  ;
63880: LD_ADDR_OWVAR 33
63884: PUSH
63885: LD_STRING 
63887: ST_TO_ADDR
// animal := CreateHuman ;
63888: LD_ADDR_VAR 0 12
63892: PUSH
63893: CALL_OW 44
63897: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
63898: LD_VAR 0 12
63902: PPUSH
63903: LD_VAR 0 9
63907: PPUSH
63908: LD_INT 0
63910: PPUSH
63911: CALL 65608 0 3
// end ;
63915: GO 63869
63917: POP
63918: POP
// end ;
63919: LD_VAR 0 10
63923: RET
// export function WantHeal ( sci , unit ) ; begin
63924: LD_INT 0
63926: PPUSH
// if GetTaskList ( sci ) > 0 then
63927: LD_VAR 0 1
63931: PPUSH
63932: CALL_OW 437
63936: PUSH
63937: LD_INT 0
63939: GREATER
63940: IFFALSE 64010
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
63942: LD_VAR 0 1
63946: PPUSH
63947: CALL_OW 437
63951: PUSH
63952: LD_INT 1
63954: ARRAY
63955: PUSH
63956: LD_INT 1
63958: ARRAY
63959: PUSH
63960: LD_STRING l
63962: EQUAL
63963: PUSH
63964: LD_VAR 0 1
63968: PPUSH
63969: CALL_OW 437
63973: PUSH
63974: LD_INT 1
63976: ARRAY
63977: PUSH
63978: LD_INT 4
63980: ARRAY
63981: PUSH
63982: LD_VAR 0 2
63986: EQUAL
63987: AND
63988: IFFALSE 64000
// result := true else
63990: LD_ADDR_VAR 0 3
63994: PUSH
63995: LD_INT 1
63997: ST_TO_ADDR
63998: GO 64008
// result := false ;
64000: LD_ADDR_VAR 0 3
64004: PUSH
64005: LD_INT 0
64007: ST_TO_ADDR
// end else
64008: GO 64018
// result := false ;
64010: LD_ADDR_VAR 0 3
64014: PUSH
64015: LD_INT 0
64017: ST_TO_ADDR
// end ;
64018: LD_VAR 0 3
64022: RET
// export function HealTarget ( sci ) ; begin
64023: LD_INT 0
64025: PPUSH
// if not sci then
64026: LD_VAR 0 1
64030: NOT
64031: IFFALSE 64035
// exit ;
64033: GO 64100
// result := 0 ;
64035: LD_ADDR_VAR 0 2
64039: PUSH
64040: LD_INT 0
64042: ST_TO_ADDR
// if GetTaskList ( sci ) then
64043: LD_VAR 0 1
64047: PPUSH
64048: CALL_OW 437
64052: IFFALSE 64100
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
64054: LD_VAR 0 1
64058: PPUSH
64059: CALL_OW 437
64063: PUSH
64064: LD_INT 1
64066: ARRAY
64067: PUSH
64068: LD_INT 1
64070: ARRAY
64071: PUSH
64072: LD_STRING l
64074: EQUAL
64075: IFFALSE 64100
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
64077: LD_ADDR_VAR 0 2
64081: PUSH
64082: LD_VAR 0 1
64086: PPUSH
64087: CALL_OW 437
64091: PUSH
64092: LD_INT 1
64094: ARRAY
64095: PUSH
64096: LD_INT 4
64098: ARRAY
64099: ST_TO_ADDR
// end ;
64100: LD_VAR 0 2
64104: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
64105: LD_INT 0
64107: PPUSH
64108: PPUSH
64109: PPUSH
64110: PPUSH
// if not base_units then
64111: LD_VAR 0 1
64115: NOT
64116: IFFALSE 64120
// exit ;
64118: GO 64207
// result := false ;
64120: LD_ADDR_VAR 0 2
64124: PUSH
64125: LD_INT 0
64127: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
64128: LD_ADDR_VAR 0 5
64132: PUSH
64133: LD_VAR 0 1
64137: PPUSH
64138: LD_INT 21
64140: PUSH
64141: LD_INT 3
64143: PUSH
64144: EMPTY
64145: LIST
64146: LIST
64147: PPUSH
64148: CALL_OW 72
64152: ST_TO_ADDR
// if not tmp then
64153: LD_VAR 0 5
64157: NOT
64158: IFFALSE 64162
// exit ;
64160: GO 64207
// for i in tmp do
64162: LD_ADDR_VAR 0 3
64166: PUSH
64167: LD_VAR 0 5
64171: PUSH
64172: FOR_IN
64173: IFFALSE 64205
// begin result := EnemyInRange ( i , 22 ) ;
64175: LD_ADDR_VAR 0 2
64179: PUSH
64180: LD_VAR 0 3
64184: PPUSH
64185: LD_INT 22
64187: PPUSH
64188: CALL 62443 0 2
64192: ST_TO_ADDR
// if result then
64193: LD_VAR 0 2
64197: IFFALSE 64203
// exit ;
64199: POP
64200: POP
64201: GO 64207
// end ;
64203: GO 64172
64205: POP
64206: POP
// end ;
64207: LD_VAR 0 2
64211: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
64212: LD_INT 0
64214: PPUSH
64215: PPUSH
// if not units then
64216: LD_VAR 0 1
64220: NOT
64221: IFFALSE 64225
// exit ;
64223: GO 64295
// result := [ ] ;
64225: LD_ADDR_VAR 0 3
64229: PUSH
64230: EMPTY
64231: ST_TO_ADDR
// for i in units do
64232: LD_ADDR_VAR 0 4
64236: PUSH
64237: LD_VAR 0 1
64241: PUSH
64242: FOR_IN
64243: IFFALSE 64293
// if GetTag ( i ) = tag then
64245: LD_VAR 0 4
64249: PPUSH
64250: CALL_OW 110
64254: PUSH
64255: LD_VAR 0 2
64259: EQUAL
64260: IFFALSE 64291
// result := Replace ( result , result + 1 , i ) ;
64262: LD_ADDR_VAR 0 3
64266: PUSH
64267: LD_VAR 0 3
64271: PPUSH
64272: LD_VAR 0 3
64276: PUSH
64277: LD_INT 1
64279: PLUS
64280: PPUSH
64281: LD_VAR 0 4
64285: PPUSH
64286: CALL_OW 1
64290: ST_TO_ADDR
64291: GO 64242
64293: POP
64294: POP
// end ;
64295: LD_VAR 0 3
64299: RET
// export function IsDriver ( un ) ; begin
64300: LD_INT 0
64302: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
64303: LD_ADDR_VAR 0 2
64307: PUSH
64308: LD_VAR 0 1
64312: PUSH
64313: LD_INT 55
64315: PUSH
64316: EMPTY
64317: LIST
64318: PPUSH
64319: CALL_OW 69
64323: IN
64324: ST_TO_ADDR
// end ;
64325: LD_VAR 0 2
64329: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
64330: LD_INT 0
64332: PPUSH
64333: PPUSH
// list := [ ] ;
64334: LD_ADDR_VAR 0 5
64338: PUSH
64339: EMPTY
64340: ST_TO_ADDR
// case d of 0 :
64341: LD_VAR 0 3
64345: PUSH
64346: LD_INT 0
64348: DOUBLE
64349: EQUAL
64350: IFTRUE 64354
64352: GO 64487
64354: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
64355: LD_ADDR_VAR 0 5
64359: PUSH
64360: LD_VAR 0 1
64364: PUSH
64365: LD_INT 4
64367: MINUS
64368: PUSH
64369: LD_VAR 0 2
64373: PUSH
64374: LD_INT 4
64376: MINUS
64377: PUSH
64378: LD_INT 2
64380: PUSH
64381: EMPTY
64382: LIST
64383: LIST
64384: LIST
64385: PUSH
64386: LD_VAR 0 1
64390: PUSH
64391: LD_INT 3
64393: MINUS
64394: PUSH
64395: LD_VAR 0 2
64399: PUSH
64400: LD_INT 1
64402: PUSH
64403: EMPTY
64404: LIST
64405: LIST
64406: LIST
64407: PUSH
64408: LD_VAR 0 1
64412: PUSH
64413: LD_INT 4
64415: PLUS
64416: PUSH
64417: LD_VAR 0 2
64421: PUSH
64422: LD_INT 4
64424: PUSH
64425: EMPTY
64426: LIST
64427: LIST
64428: LIST
64429: PUSH
64430: LD_VAR 0 1
64434: PUSH
64435: LD_INT 3
64437: PLUS
64438: PUSH
64439: LD_VAR 0 2
64443: PUSH
64444: LD_INT 3
64446: PLUS
64447: PUSH
64448: LD_INT 5
64450: PUSH
64451: EMPTY
64452: LIST
64453: LIST
64454: LIST
64455: PUSH
64456: LD_VAR 0 1
64460: PUSH
64461: LD_VAR 0 2
64465: PUSH
64466: LD_INT 4
64468: PLUS
64469: PUSH
64470: LD_INT 0
64472: PUSH
64473: EMPTY
64474: LIST
64475: LIST
64476: LIST
64477: PUSH
64478: EMPTY
64479: LIST
64480: LIST
64481: LIST
64482: LIST
64483: LIST
64484: ST_TO_ADDR
// end ; 1 :
64485: GO 65185
64487: LD_INT 1
64489: DOUBLE
64490: EQUAL
64491: IFTRUE 64495
64493: GO 64628
64495: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
64496: LD_ADDR_VAR 0 5
64500: PUSH
64501: LD_VAR 0 1
64505: PUSH
64506: LD_VAR 0 2
64510: PUSH
64511: LD_INT 4
64513: MINUS
64514: PUSH
64515: LD_INT 3
64517: PUSH
64518: EMPTY
64519: LIST
64520: LIST
64521: LIST
64522: PUSH
64523: LD_VAR 0 1
64527: PUSH
64528: LD_INT 3
64530: MINUS
64531: PUSH
64532: LD_VAR 0 2
64536: PUSH
64537: LD_INT 3
64539: MINUS
64540: PUSH
64541: LD_INT 2
64543: PUSH
64544: EMPTY
64545: LIST
64546: LIST
64547: LIST
64548: PUSH
64549: LD_VAR 0 1
64553: PUSH
64554: LD_INT 4
64556: MINUS
64557: PUSH
64558: LD_VAR 0 2
64562: PUSH
64563: LD_INT 1
64565: PUSH
64566: EMPTY
64567: LIST
64568: LIST
64569: LIST
64570: PUSH
64571: LD_VAR 0 1
64575: PUSH
64576: LD_VAR 0 2
64580: PUSH
64581: LD_INT 3
64583: PLUS
64584: PUSH
64585: LD_INT 0
64587: PUSH
64588: EMPTY
64589: LIST
64590: LIST
64591: LIST
64592: PUSH
64593: LD_VAR 0 1
64597: PUSH
64598: LD_INT 4
64600: PLUS
64601: PUSH
64602: LD_VAR 0 2
64606: PUSH
64607: LD_INT 4
64609: PLUS
64610: PUSH
64611: LD_INT 5
64613: PUSH
64614: EMPTY
64615: LIST
64616: LIST
64617: LIST
64618: PUSH
64619: EMPTY
64620: LIST
64621: LIST
64622: LIST
64623: LIST
64624: LIST
64625: ST_TO_ADDR
// end ; 2 :
64626: GO 65185
64628: LD_INT 2
64630: DOUBLE
64631: EQUAL
64632: IFTRUE 64636
64634: GO 64765
64636: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
64637: LD_ADDR_VAR 0 5
64641: PUSH
64642: LD_VAR 0 1
64646: PUSH
64647: LD_VAR 0 2
64651: PUSH
64652: LD_INT 3
64654: MINUS
64655: PUSH
64656: LD_INT 3
64658: PUSH
64659: EMPTY
64660: LIST
64661: LIST
64662: LIST
64663: PUSH
64664: LD_VAR 0 1
64668: PUSH
64669: LD_INT 4
64671: PLUS
64672: PUSH
64673: LD_VAR 0 2
64677: PUSH
64678: LD_INT 4
64680: PUSH
64681: EMPTY
64682: LIST
64683: LIST
64684: LIST
64685: PUSH
64686: LD_VAR 0 1
64690: PUSH
64691: LD_VAR 0 2
64695: PUSH
64696: LD_INT 4
64698: PLUS
64699: PUSH
64700: LD_INT 0
64702: PUSH
64703: EMPTY
64704: LIST
64705: LIST
64706: LIST
64707: PUSH
64708: LD_VAR 0 1
64712: PUSH
64713: LD_INT 3
64715: MINUS
64716: PUSH
64717: LD_VAR 0 2
64721: PUSH
64722: LD_INT 1
64724: PUSH
64725: EMPTY
64726: LIST
64727: LIST
64728: LIST
64729: PUSH
64730: LD_VAR 0 1
64734: PUSH
64735: LD_INT 4
64737: MINUS
64738: PUSH
64739: LD_VAR 0 2
64743: PUSH
64744: LD_INT 4
64746: MINUS
64747: PUSH
64748: LD_INT 2
64750: PUSH
64751: EMPTY
64752: LIST
64753: LIST
64754: LIST
64755: PUSH
64756: EMPTY
64757: LIST
64758: LIST
64759: LIST
64760: LIST
64761: LIST
64762: ST_TO_ADDR
// end ; 3 :
64763: GO 65185
64765: LD_INT 3
64767: DOUBLE
64768: EQUAL
64769: IFTRUE 64773
64771: GO 64906
64773: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
64774: LD_ADDR_VAR 0 5
64778: PUSH
64779: LD_VAR 0 1
64783: PUSH
64784: LD_INT 3
64786: PLUS
64787: PUSH
64788: LD_VAR 0 2
64792: PUSH
64793: LD_INT 4
64795: PUSH
64796: EMPTY
64797: LIST
64798: LIST
64799: LIST
64800: PUSH
64801: LD_VAR 0 1
64805: PUSH
64806: LD_INT 4
64808: PLUS
64809: PUSH
64810: LD_VAR 0 2
64814: PUSH
64815: LD_INT 4
64817: PLUS
64818: PUSH
64819: LD_INT 5
64821: PUSH
64822: EMPTY
64823: LIST
64824: LIST
64825: LIST
64826: PUSH
64827: LD_VAR 0 1
64831: PUSH
64832: LD_INT 4
64834: MINUS
64835: PUSH
64836: LD_VAR 0 2
64840: PUSH
64841: LD_INT 1
64843: PUSH
64844: EMPTY
64845: LIST
64846: LIST
64847: LIST
64848: PUSH
64849: LD_VAR 0 1
64853: PUSH
64854: LD_VAR 0 2
64858: PUSH
64859: LD_INT 4
64861: MINUS
64862: PUSH
64863: LD_INT 3
64865: PUSH
64866: EMPTY
64867: LIST
64868: LIST
64869: LIST
64870: PUSH
64871: LD_VAR 0 1
64875: PUSH
64876: LD_INT 3
64878: MINUS
64879: PUSH
64880: LD_VAR 0 2
64884: PUSH
64885: LD_INT 3
64887: MINUS
64888: PUSH
64889: LD_INT 2
64891: PUSH
64892: EMPTY
64893: LIST
64894: LIST
64895: LIST
64896: PUSH
64897: EMPTY
64898: LIST
64899: LIST
64900: LIST
64901: LIST
64902: LIST
64903: ST_TO_ADDR
// end ; 4 :
64904: GO 65185
64906: LD_INT 4
64908: DOUBLE
64909: EQUAL
64910: IFTRUE 64914
64912: GO 65047
64914: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
64915: LD_ADDR_VAR 0 5
64919: PUSH
64920: LD_VAR 0 1
64924: PUSH
64925: LD_VAR 0 2
64929: PUSH
64930: LD_INT 4
64932: PLUS
64933: PUSH
64934: LD_INT 0
64936: PUSH
64937: EMPTY
64938: LIST
64939: LIST
64940: LIST
64941: PUSH
64942: LD_VAR 0 1
64946: PUSH
64947: LD_INT 3
64949: PLUS
64950: PUSH
64951: LD_VAR 0 2
64955: PUSH
64956: LD_INT 3
64958: PLUS
64959: PUSH
64960: LD_INT 5
64962: PUSH
64963: EMPTY
64964: LIST
64965: LIST
64966: LIST
64967: PUSH
64968: LD_VAR 0 1
64972: PUSH
64973: LD_INT 4
64975: PLUS
64976: PUSH
64977: LD_VAR 0 2
64981: PUSH
64982: LD_INT 4
64984: PUSH
64985: EMPTY
64986: LIST
64987: LIST
64988: LIST
64989: PUSH
64990: LD_VAR 0 1
64994: PUSH
64995: LD_VAR 0 2
64999: PUSH
65000: LD_INT 3
65002: MINUS
65003: PUSH
65004: LD_INT 3
65006: PUSH
65007: EMPTY
65008: LIST
65009: LIST
65010: LIST
65011: PUSH
65012: LD_VAR 0 1
65016: PUSH
65017: LD_INT 4
65019: MINUS
65020: PUSH
65021: LD_VAR 0 2
65025: PUSH
65026: LD_INT 4
65028: MINUS
65029: PUSH
65030: LD_INT 2
65032: PUSH
65033: EMPTY
65034: LIST
65035: LIST
65036: LIST
65037: PUSH
65038: EMPTY
65039: LIST
65040: LIST
65041: LIST
65042: LIST
65043: LIST
65044: ST_TO_ADDR
// end ; 5 :
65045: GO 65185
65047: LD_INT 5
65049: DOUBLE
65050: EQUAL
65051: IFTRUE 65055
65053: GO 65184
65055: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
65056: LD_ADDR_VAR 0 5
65060: PUSH
65061: LD_VAR 0 1
65065: PUSH
65066: LD_INT 4
65068: MINUS
65069: PUSH
65070: LD_VAR 0 2
65074: PUSH
65075: LD_INT 1
65077: PUSH
65078: EMPTY
65079: LIST
65080: LIST
65081: LIST
65082: PUSH
65083: LD_VAR 0 1
65087: PUSH
65088: LD_VAR 0 2
65092: PUSH
65093: LD_INT 4
65095: MINUS
65096: PUSH
65097: LD_INT 3
65099: PUSH
65100: EMPTY
65101: LIST
65102: LIST
65103: LIST
65104: PUSH
65105: LD_VAR 0 1
65109: PUSH
65110: LD_INT 4
65112: PLUS
65113: PUSH
65114: LD_VAR 0 2
65118: PUSH
65119: LD_INT 4
65121: PLUS
65122: PUSH
65123: LD_INT 5
65125: PUSH
65126: EMPTY
65127: LIST
65128: LIST
65129: LIST
65130: PUSH
65131: LD_VAR 0 1
65135: PUSH
65136: LD_INT 3
65138: PLUS
65139: PUSH
65140: LD_VAR 0 2
65144: PUSH
65145: LD_INT 4
65147: PUSH
65148: EMPTY
65149: LIST
65150: LIST
65151: LIST
65152: PUSH
65153: LD_VAR 0 1
65157: PUSH
65158: LD_VAR 0 2
65162: PUSH
65163: LD_INT 3
65165: PLUS
65166: PUSH
65167: LD_INT 0
65169: PUSH
65170: EMPTY
65171: LIST
65172: LIST
65173: LIST
65174: PUSH
65175: EMPTY
65176: LIST
65177: LIST
65178: LIST
65179: LIST
65180: LIST
65181: ST_TO_ADDR
// end ; end ;
65182: GO 65185
65184: POP
// result := list ;
65185: LD_ADDR_VAR 0 4
65189: PUSH
65190: LD_VAR 0 5
65194: ST_TO_ADDR
// end ;
65195: LD_VAR 0 4
65199: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
65200: LD_INT 0
65202: PPUSH
65203: PPUSH
65204: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
65205: LD_VAR 0 1
65209: NOT
65210: PUSH
65211: LD_VAR 0 2
65215: PUSH
65216: LD_INT 1
65218: PUSH
65219: LD_INT 2
65221: PUSH
65222: LD_INT 3
65224: PUSH
65225: LD_INT 4
65227: PUSH
65228: EMPTY
65229: LIST
65230: LIST
65231: LIST
65232: LIST
65233: IN
65234: NOT
65235: OR
65236: IFFALSE 65240
// exit ;
65238: GO 65332
// tmp := [ ] ;
65240: LD_ADDR_VAR 0 5
65244: PUSH
65245: EMPTY
65246: ST_TO_ADDR
// for i in units do
65247: LD_ADDR_VAR 0 4
65251: PUSH
65252: LD_VAR 0 1
65256: PUSH
65257: FOR_IN
65258: IFFALSE 65301
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
65260: LD_ADDR_VAR 0 5
65264: PUSH
65265: LD_VAR 0 5
65269: PPUSH
65270: LD_VAR 0 5
65274: PUSH
65275: LD_INT 1
65277: PLUS
65278: PPUSH
65279: LD_VAR 0 4
65283: PPUSH
65284: LD_VAR 0 2
65288: PPUSH
65289: CALL_OW 259
65293: PPUSH
65294: CALL_OW 2
65298: ST_TO_ADDR
65299: GO 65257
65301: POP
65302: POP
// if not tmp then
65303: LD_VAR 0 5
65307: NOT
65308: IFFALSE 65312
// exit ;
65310: GO 65332
// result := SortListByListDesc ( units , tmp ) ;
65312: LD_ADDR_VAR 0 3
65316: PUSH
65317: LD_VAR 0 1
65321: PPUSH
65322: LD_VAR 0 5
65326: PPUSH
65327: CALL_OW 77
65331: ST_TO_ADDR
// end ;
65332: LD_VAR 0 3
65336: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
65337: LD_INT 0
65339: PPUSH
65340: PPUSH
65341: PPUSH
// result := false ;
65342: LD_ADDR_VAR 0 3
65346: PUSH
65347: LD_INT 0
65349: ST_TO_ADDR
// x := GetX ( building ) ;
65350: LD_ADDR_VAR 0 4
65354: PUSH
65355: LD_VAR 0 2
65359: PPUSH
65360: CALL_OW 250
65364: ST_TO_ADDR
// y := GetY ( building ) ;
65365: LD_ADDR_VAR 0 5
65369: PUSH
65370: LD_VAR 0 2
65374: PPUSH
65375: CALL_OW 251
65379: ST_TO_ADDR
// if not building or not x or not y then
65380: LD_VAR 0 2
65384: NOT
65385: PUSH
65386: LD_VAR 0 4
65390: NOT
65391: OR
65392: PUSH
65393: LD_VAR 0 5
65397: NOT
65398: OR
65399: IFFALSE 65403
// exit ;
65401: GO 65495
// if GetTaskList ( unit ) then
65403: LD_VAR 0 1
65407: PPUSH
65408: CALL_OW 437
65412: IFFALSE 65495
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
65414: LD_STRING e
65416: PUSH
65417: LD_VAR 0 1
65421: PPUSH
65422: CALL_OW 437
65426: PUSH
65427: LD_INT 1
65429: ARRAY
65430: PUSH
65431: LD_INT 1
65433: ARRAY
65434: EQUAL
65435: PUSH
65436: LD_VAR 0 4
65440: PUSH
65441: LD_VAR 0 1
65445: PPUSH
65446: CALL_OW 437
65450: PUSH
65451: LD_INT 1
65453: ARRAY
65454: PUSH
65455: LD_INT 2
65457: ARRAY
65458: EQUAL
65459: AND
65460: PUSH
65461: LD_VAR 0 5
65465: PUSH
65466: LD_VAR 0 1
65470: PPUSH
65471: CALL_OW 437
65475: PUSH
65476: LD_INT 1
65478: ARRAY
65479: PUSH
65480: LD_INT 3
65482: ARRAY
65483: EQUAL
65484: AND
65485: IFFALSE 65495
// result := true end ;
65487: LD_ADDR_VAR 0 3
65491: PUSH
65492: LD_INT 1
65494: ST_TO_ADDR
// end ;
65495: LD_VAR 0 3
65499: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
65500: LD_INT 0
65502: PPUSH
// result := false ;
65503: LD_ADDR_VAR 0 4
65507: PUSH
65508: LD_INT 0
65510: ST_TO_ADDR
// if GetTaskList ( unit ) then
65511: LD_VAR 0 1
65515: PPUSH
65516: CALL_OW 437
65520: IFFALSE 65603
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
65522: LD_STRING M
65524: PUSH
65525: LD_VAR 0 1
65529: PPUSH
65530: CALL_OW 437
65534: PUSH
65535: LD_INT 1
65537: ARRAY
65538: PUSH
65539: LD_INT 1
65541: ARRAY
65542: EQUAL
65543: PUSH
65544: LD_VAR 0 2
65548: PUSH
65549: LD_VAR 0 1
65553: PPUSH
65554: CALL_OW 437
65558: PUSH
65559: LD_INT 1
65561: ARRAY
65562: PUSH
65563: LD_INT 2
65565: ARRAY
65566: EQUAL
65567: AND
65568: PUSH
65569: LD_VAR 0 3
65573: PUSH
65574: LD_VAR 0 1
65578: PPUSH
65579: CALL_OW 437
65583: PUSH
65584: LD_INT 1
65586: ARRAY
65587: PUSH
65588: LD_INT 3
65590: ARRAY
65591: EQUAL
65592: AND
65593: IFFALSE 65603
// result := true ;
65595: LD_ADDR_VAR 0 4
65599: PUSH
65600: LD_INT 1
65602: ST_TO_ADDR
// end ; end ;
65603: LD_VAR 0 4
65607: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
65608: LD_INT 0
65610: PPUSH
65611: PPUSH
65612: PPUSH
65613: PPUSH
// if not unit or not area then
65614: LD_VAR 0 1
65618: NOT
65619: PUSH
65620: LD_VAR 0 2
65624: NOT
65625: OR
65626: IFFALSE 65630
// exit ;
65628: GO 65794
// tmp := AreaToList ( area , i ) ;
65630: LD_ADDR_VAR 0 6
65634: PUSH
65635: LD_VAR 0 2
65639: PPUSH
65640: LD_VAR 0 5
65644: PPUSH
65645: CALL_OW 517
65649: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
65650: LD_ADDR_VAR 0 5
65654: PUSH
65655: DOUBLE
65656: LD_INT 1
65658: DEC
65659: ST_TO_ADDR
65660: LD_VAR 0 6
65664: PUSH
65665: LD_INT 1
65667: ARRAY
65668: PUSH
65669: FOR_TO
65670: IFFALSE 65792
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
65672: LD_ADDR_VAR 0 7
65676: PUSH
65677: LD_VAR 0 6
65681: PUSH
65682: LD_INT 1
65684: ARRAY
65685: PUSH
65686: LD_VAR 0 5
65690: ARRAY
65691: PUSH
65692: LD_VAR 0 6
65696: PUSH
65697: LD_INT 2
65699: ARRAY
65700: PUSH
65701: LD_VAR 0 5
65705: ARRAY
65706: PUSH
65707: EMPTY
65708: LIST
65709: LIST
65710: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
65711: LD_VAR 0 7
65715: PUSH
65716: LD_INT 1
65718: ARRAY
65719: PPUSH
65720: LD_VAR 0 7
65724: PUSH
65725: LD_INT 2
65727: ARRAY
65728: PPUSH
65729: CALL_OW 428
65733: PUSH
65734: LD_INT 0
65736: EQUAL
65737: IFFALSE 65790
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
65739: LD_VAR 0 1
65743: PPUSH
65744: LD_VAR 0 7
65748: PUSH
65749: LD_INT 1
65751: ARRAY
65752: PPUSH
65753: LD_VAR 0 7
65757: PUSH
65758: LD_INT 2
65760: ARRAY
65761: PPUSH
65762: LD_VAR 0 3
65766: PPUSH
65767: CALL_OW 48
// result := IsPlaced ( unit ) ;
65771: LD_ADDR_VAR 0 4
65775: PUSH
65776: LD_VAR 0 1
65780: PPUSH
65781: CALL_OW 305
65785: ST_TO_ADDR
// exit ;
65786: POP
65787: POP
65788: GO 65794
// end ; end ;
65790: GO 65669
65792: POP
65793: POP
// end ;
65794: LD_VAR 0 4
65798: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
65799: LD_INT 0
65801: PPUSH
65802: PPUSH
65803: PPUSH
// if not side or side > 8 then
65804: LD_VAR 0 1
65808: NOT
65809: PUSH
65810: LD_VAR 0 1
65814: PUSH
65815: LD_INT 8
65817: GREATER
65818: OR
65819: IFFALSE 65823
// exit ;
65821: GO 66010
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
65823: LD_ADDR_VAR 0 4
65827: PUSH
65828: LD_INT 22
65830: PUSH
65831: LD_VAR 0 1
65835: PUSH
65836: EMPTY
65837: LIST
65838: LIST
65839: PUSH
65840: LD_INT 21
65842: PUSH
65843: LD_INT 3
65845: PUSH
65846: EMPTY
65847: LIST
65848: LIST
65849: PUSH
65850: EMPTY
65851: LIST
65852: LIST
65853: PPUSH
65854: CALL_OW 69
65858: ST_TO_ADDR
// if not tmp then
65859: LD_VAR 0 4
65863: NOT
65864: IFFALSE 65868
// exit ;
65866: GO 66010
// enable_addtolog := true ;
65868: LD_ADDR_OWVAR 81
65872: PUSH
65873: LD_INT 1
65875: ST_TO_ADDR
// AddToLog ( [ ) ;
65876: LD_STRING [
65878: PPUSH
65879: CALL_OW 561
// for i in tmp do
65883: LD_ADDR_VAR 0 3
65887: PUSH
65888: LD_VAR 0 4
65892: PUSH
65893: FOR_IN
65894: IFFALSE 66001
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
65896: LD_STRING [
65898: PUSH
65899: LD_VAR 0 3
65903: PPUSH
65904: CALL_OW 266
65908: STR
65909: PUSH
65910: LD_STRING , 
65912: STR
65913: PUSH
65914: LD_VAR 0 3
65918: PPUSH
65919: CALL_OW 250
65923: STR
65924: PUSH
65925: LD_STRING , 
65927: STR
65928: PUSH
65929: LD_VAR 0 3
65933: PPUSH
65934: CALL_OW 251
65938: STR
65939: PUSH
65940: LD_STRING , 
65942: STR
65943: PUSH
65944: LD_VAR 0 3
65948: PPUSH
65949: CALL_OW 254
65953: STR
65954: PUSH
65955: LD_STRING , 
65957: STR
65958: PUSH
65959: LD_VAR 0 3
65963: PPUSH
65964: LD_INT 1
65966: PPUSH
65967: CALL_OW 268
65971: STR
65972: PUSH
65973: LD_STRING , 
65975: STR
65976: PUSH
65977: LD_VAR 0 3
65981: PPUSH
65982: LD_INT 2
65984: PPUSH
65985: CALL_OW 268
65989: STR
65990: PUSH
65991: LD_STRING ],
65993: STR
65994: PPUSH
65995: CALL_OW 561
// end ;
65999: GO 65893
66001: POP
66002: POP
// AddToLog ( ]; ) ;
66003: LD_STRING ];
66005: PPUSH
66006: CALL_OW 561
// end ;
66010: LD_VAR 0 2
66014: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
66015: LD_INT 0
66017: PPUSH
66018: PPUSH
66019: PPUSH
66020: PPUSH
66021: PPUSH
// if not area or not rate or not max then
66022: LD_VAR 0 1
66026: NOT
66027: PUSH
66028: LD_VAR 0 2
66032: NOT
66033: OR
66034: PUSH
66035: LD_VAR 0 4
66039: NOT
66040: OR
66041: IFFALSE 66045
// exit ;
66043: GO 66237
// while 1 do
66045: LD_INT 1
66047: IFFALSE 66237
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
66049: LD_ADDR_VAR 0 9
66053: PUSH
66054: LD_VAR 0 1
66058: PPUSH
66059: LD_INT 1
66061: PPUSH
66062: CALL_OW 287
66066: PUSH
66067: LD_INT 10
66069: MUL
66070: ST_TO_ADDR
// r := rate / 10 ;
66071: LD_ADDR_VAR 0 7
66075: PUSH
66076: LD_VAR 0 2
66080: PUSH
66081: LD_INT 10
66083: DIVREAL
66084: ST_TO_ADDR
// time := 1 1$00 ;
66085: LD_ADDR_VAR 0 8
66089: PUSH
66090: LD_INT 2100
66092: ST_TO_ADDR
// if amount < min then
66093: LD_VAR 0 9
66097: PUSH
66098: LD_VAR 0 3
66102: LESS
66103: IFFALSE 66121
// r := r * 2 else
66105: LD_ADDR_VAR 0 7
66109: PUSH
66110: LD_VAR 0 7
66114: PUSH
66115: LD_INT 2
66117: MUL
66118: ST_TO_ADDR
66119: GO 66147
// if amount > max then
66121: LD_VAR 0 9
66125: PUSH
66126: LD_VAR 0 4
66130: GREATER
66131: IFFALSE 66147
// r := r / 2 ;
66133: LD_ADDR_VAR 0 7
66137: PUSH
66138: LD_VAR 0 7
66142: PUSH
66143: LD_INT 2
66145: DIVREAL
66146: ST_TO_ADDR
// time := time / r ;
66147: LD_ADDR_VAR 0 8
66151: PUSH
66152: LD_VAR 0 8
66156: PUSH
66157: LD_VAR 0 7
66161: DIVREAL
66162: ST_TO_ADDR
// if time < 0 then
66163: LD_VAR 0 8
66167: PUSH
66168: LD_INT 0
66170: LESS
66171: IFFALSE 66188
// time := time * - 1 ;
66173: LD_ADDR_VAR 0 8
66177: PUSH
66178: LD_VAR 0 8
66182: PUSH
66183: LD_INT 1
66185: NEG
66186: MUL
66187: ST_TO_ADDR
// wait ( time ) ;
66188: LD_VAR 0 8
66192: PPUSH
66193: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
66197: LD_INT 35
66199: PPUSH
66200: LD_INT 875
66202: PPUSH
66203: CALL_OW 12
66207: PPUSH
66208: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
66212: LD_INT 1
66214: PPUSH
66215: LD_INT 5
66217: PPUSH
66218: CALL_OW 12
66222: PPUSH
66223: LD_VAR 0 1
66227: PPUSH
66228: LD_INT 1
66230: PPUSH
66231: CALL_OW 55
// end ;
66235: GO 66045
// end ;
66237: LD_VAR 0 5
66241: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
66242: LD_INT 0
66244: PPUSH
66245: PPUSH
66246: PPUSH
66247: PPUSH
66248: PPUSH
66249: PPUSH
66250: PPUSH
66251: PPUSH
// if not turrets or not factories then
66252: LD_VAR 0 1
66256: NOT
66257: PUSH
66258: LD_VAR 0 2
66262: NOT
66263: OR
66264: IFFALSE 66268
// exit ;
66266: GO 66575
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
66268: LD_ADDR_VAR 0 10
66272: PUSH
66273: LD_INT 5
66275: PUSH
66276: LD_INT 6
66278: PUSH
66279: EMPTY
66280: LIST
66281: LIST
66282: PUSH
66283: LD_INT 2
66285: PUSH
66286: LD_INT 4
66288: PUSH
66289: EMPTY
66290: LIST
66291: LIST
66292: PUSH
66293: LD_INT 3
66295: PUSH
66296: LD_INT 5
66298: PUSH
66299: EMPTY
66300: LIST
66301: LIST
66302: PUSH
66303: EMPTY
66304: LIST
66305: LIST
66306: LIST
66307: PUSH
66308: LD_INT 24
66310: PUSH
66311: LD_INT 25
66313: PUSH
66314: EMPTY
66315: LIST
66316: LIST
66317: PUSH
66318: LD_INT 23
66320: PUSH
66321: LD_INT 27
66323: PUSH
66324: EMPTY
66325: LIST
66326: LIST
66327: PUSH
66328: EMPTY
66329: LIST
66330: LIST
66331: PUSH
66332: LD_INT 42
66334: PUSH
66335: LD_INT 43
66337: PUSH
66338: EMPTY
66339: LIST
66340: LIST
66341: PUSH
66342: LD_INT 44
66344: PUSH
66345: LD_INT 46
66347: PUSH
66348: EMPTY
66349: LIST
66350: LIST
66351: PUSH
66352: LD_INT 45
66354: PUSH
66355: LD_INT 47
66357: PUSH
66358: EMPTY
66359: LIST
66360: LIST
66361: PUSH
66362: EMPTY
66363: LIST
66364: LIST
66365: LIST
66366: PUSH
66367: EMPTY
66368: LIST
66369: LIST
66370: LIST
66371: ST_TO_ADDR
// result := [ ] ;
66372: LD_ADDR_VAR 0 3
66376: PUSH
66377: EMPTY
66378: ST_TO_ADDR
// for i in turrets do
66379: LD_ADDR_VAR 0 4
66383: PUSH
66384: LD_VAR 0 1
66388: PUSH
66389: FOR_IN
66390: IFFALSE 66573
// begin nat := GetNation ( i ) ;
66392: LD_ADDR_VAR 0 7
66396: PUSH
66397: LD_VAR 0 4
66401: PPUSH
66402: CALL_OW 248
66406: ST_TO_ADDR
// weapon := 0 ;
66407: LD_ADDR_VAR 0 8
66411: PUSH
66412: LD_INT 0
66414: ST_TO_ADDR
// if not nat then
66415: LD_VAR 0 7
66419: NOT
66420: IFFALSE 66424
// continue ;
66422: GO 66389
// for j in list [ nat ] do
66424: LD_ADDR_VAR 0 5
66428: PUSH
66429: LD_VAR 0 10
66433: PUSH
66434: LD_VAR 0 7
66438: ARRAY
66439: PUSH
66440: FOR_IN
66441: IFFALSE 66482
// if GetBWeapon ( i ) = j [ 1 ] then
66443: LD_VAR 0 4
66447: PPUSH
66448: CALL_OW 269
66452: PUSH
66453: LD_VAR 0 5
66457: PUSH
66458: LD_INT 1
66460: ARRAY
66461: EQUAL
66462: IFFALSE 66480
// begin weapon := j [ 2 ] ;
66464: LD_ADDR_VAR 0 8
66468: PUSH
66469: LD_VAR 0 5
66473: PUSH
66474: LD_INT 2
66476: ARRAY
66477: ST_TO_ADDR
// break ;
66478: GO 66482
// end ;
66480: GO 66440
66482: POP
66483: POP
// if not weapon then
66484: LD_VAR 0 8
66488: NOT
66489: IFFALSE 66493
// continue ;
66491: GO 66389
// for k in factories do
66493: LD_ADDR_VAR 0 6
66497: PUSH
66498: LD_VAR 0 2
66502: PUSH
66503: FOR_IN
66504: IFFALSE 66569
// begin weapons := AvailableWeaponList ( k ) ;
66506: LD_ADDR_VAR 0 9
66510: PUSH
66511: LD_VAR 0 6
66515: PPUSH
66516: CALL_OW 478
66520: ST_TO_ADDR
// if not weapons then
66521: LD_VAR 0 9
66525: NOT
66526: IFFALSE 66530
// continue ;
66528: GO 66503
// if weapon in weapons then
66530: LD_VAR 0 8
66534: PUSH
66535: LD_VAR 0 9
66539: IN
66540: IFFALSE 66567
// begin result := [ i , weapon ] ;
66542: LD_ADDR_VAR 0 3
66546: PUSH
66547: LD_VAR 0 4
66551: PUSH
66552: LD_VAR 0 8
66556: PUSH
66557: EMPTY
66558: LIST
66559: LIST
66560: ST_TO_ADDR
// exit ;
66561: POP
66562: POP
66563: POP
66564: POP
66565: GO 66575
// end ; end ;
66567: GO 66503
66569: POP
66570: POP
// end ;
66571: GO 66389
66573: POP
66574: POP
// end ;
66575: LD_VAR 0 3
66579: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
66580: LD_INT 0
66582: PPUSH
// if not side or side > 8 then
66583: LD_VAR 0 3
66587: NOT
66588: PUSH
66589: LD_VAR 0 3
66593: PUSH
66594: LD_INT 8
66596: GREATER
66597: OR
66598: IFFALSE 66602
// exit ;
66600: GO 66661
// if not range then
66602: LD_VAR 0 4
66606: NOT
66607: IFFALSE 66618
// range := - 12 ;
66609: LD_ADDR_VAR 0 4
66613: PUSH
66614: LD_INT 12
66616: NEG
66617: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
66618: LD_VAR 0 1
66622: PPUSH
66623: LD_VAR 0 2
66627: PPUSH
66628: LD_VAR 0 3
66632: PPUSH
66633: LD_VAR 0 4
66637: PPUSH
66638: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
66642: LD_VAR 0 1
66646: PPUSH
66647: LD_VAR 0 2
66651: PPUSH
66652: LD_VAR 0 3
66656: PPUSH
66657: CALL_OW 331
// end ;
66661: LD_VAR 0 5
66665: RET
// export function Video ( mode ) ; begin
66666: LD_INT 0
66668: PPUSH
// ingame_video = mode ;
66669: LD_ADDR_OWVAR 52
66673: PUSH
66674: LD_VAR 0 1
66678: ST_TO_ADDR
// interface_hidden = mode ;
66679: LD_ADDR_OWVAR 54
66683: PUSH
66684: LD_VAR 0 1
66688: ST_TO_ADDR
// end ;
66689: LD_VAR 0 2
66693: RET
// export function Join ( array , element ) ; begin
66694: LD_INT 0
66696: PPUSH
// result := Replace ( array , array + 1 , element ) ;
66697: LD_ADDR_VAR 0 3
66701: PUSH
66702: LD_VAR 0 1
66706: PPUSH
66707: LD_VAR 0 1
66711: PUSH
66712: LD_INT 1
66714: PLUS
66715: PPUSH
66716: LD_VAR 0 2
66720: PPUSH
66721: CALL_OW 1
66725: ST_TO_ADDR
// end ;
66726: LD_VAR 0 3
66730: RET
// export function JoinUnion ( array , element ) ; begin
66731: LD_INT 0
66733: PPUSH
// result := array union element ;
66734: LD_ADDR_VAR 0 3
66738: PUSH
66739: LD_VAR 0 1
66743: PUSH
66744: LD_VAR 0 2
66748: UNION
66749: ST_TO_ADDR
// end ;
66750: LD_VAR 0 3
66754: RET
// export function GetBehemoths ( side ) ; begin
66755: LD_INT 0
66757: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
66758: LD_ADDR_VAR 0 2
66762: PUSH
66763: LD_INT 22
66765: PUSH
66766: LD_VAR 0 1
66770: PUSH
66771: EMPTY
66772: LIST
66773: LIST
66774: PUSH
66775: LD_INT 31
66777: PUSH
66778: LD_INT 25
66780: PUSH
66781: EMPTY
66782: LIST
66783: LIST
66784: PUSH
66785: EMPTY
66786: LIST
66787: LIST
66788: PPUSH
66789: CALL_OW 69
66793: ST_TO_ADDR
// end ;
66794: LD_VAR 0 2
66798: RET
// export function Shuffle ( array ) ; var i , index ; begin
66799: LD_INT 0
66801: PPUSH
66802: PPUSH
66803: PPUSH
// result := [ ] ;
66804: LD_ADDR_VAR 0 2
66808: PUSH
66809: EMPTY
66810: ST_TO_ADDR
// if not array then
66811: LD_VAR 0 1
66815: NOT
66816: IFFALSE 66820
// exit ;
66818: GO 66919
// Randomize ;
66820: CALL_OW 10
// for i = array downto 1 do
66824: LD_ADDR_VAR 0 3
66828: PUSH
66829: DOUBLE
66830: LD_VAR 0 1
66834: INC
66835: ST_TO_ADDR
66836: LD_INT 1
66838: PUSH
66839: FOR_DOWNTO
66840: IFFALSE 66917
// begin index := rand ( 1 , array ) ;
66842: LD_ADDR_VAR 0 4
66846: PUSH
66847: LD_INT 1
66849: PPUSH
66850: LD_VAR 0 1
66854: PPUSH
66855: CALL_OW 12
66859: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
66860: LD_ADDR_VAR 0 2
66864: PUSH
66865: LD_VAR 0 2
66869: PPUSH
66870: LD_VAR 0 2
66874: PUSH
66875: LD_INT 1
66877: PLUS
66878: PPUSH
66879: LD_VAR 0 1
66883: PUSH
66884: LD_VAR 0 4
66888: ARRAY
66889: PPUSH
66890: CALL_OW 2
66894: ST_TO_ADDR
// array := Delete ( array , index ) ;
66895: LD_ADDR_VAR 0 1
66899: PUSH
66900: LD_VAR 0 1
66904: PPUSH
66905: LD_VAR 0 4
66909: PPUSH
66910: CALL_OW 3
66914: ST_TO_ADDR
// end ;
66915: GO 66839
66917: POP
66918: POP
// end ;
66919: LD_VAR 0 2
66923: RET
// export function GetBaseMaterials ( base ) ; begin
66924: LD_INT 0
66926: PPUSH
// result := [ 0 , 0 , 0 ] ;
66927: LD_ADDR_VAR 0 2
66931: PUSH
66932: LD_INT 0
66934: PUSH
66935: LD_INT 0
66937: PUSH
66938: LD_INT 0
66940: PUSH
66941: EMPTY
66942: LIST
66943: LIST
66944: LIST
66945: ST_TO_ADDR
// if not base then
66946: LD_VAR 0 1
66950: NOT
66951: IFFALSE 66955
// exit ;
66953: GO 67004
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
66955: LD_ADDR_VAR 0 2
66959: PUSH
66960: LD_VAR 0 1
66964: PPUSH
66965: LD_INT 1
66967: PPUSH
66968: CALL_OW 275
66972: PUSH
66973: LD_VAR 0 1
66977: PPUSH
66978: LD_INT 2
66980: PPUSH
66981: CALL_OW 275
66985: PUSH
66986: LD_VAR 0 1
66990: PPUSH
66991: LD_INT 3
66993: PPUSH
66994: CALL_OW 275
66998: PUSH
66999: EMPTY
67000: LIST
67001: LIST
67002: LIST
67003: ST_TO_ADDR
// end ;
67004: LD_VAR 0 2
67008: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
67009: LD_INT 0
67011: PPUSH
67012: PPUSH
// result := array ;
67013: LD_ADDR_VAR 0 3
67017: PUSH
67018: LD_VAR 0 1
67022: ST_TO_ADDR
// if size > 0 then
67023: LD_VAR 0 2
67027: PUSH
67028: LD_INT 0
67030: GREATER
67031: IFFALSE 67077
// for i := array downto size do
67033: LD_ADDR_VAR 0 4
67037: PUSH
67038: DOUBLE
67039: LD_VAR 0 1
67043: INC
67044: ST_TO_ADDR
67045: LD_VAR 0 2
67049: PUSH
67050: FOR_DOWNTO
67051: IFFALSE 67075
// result := Delete ( result , result ) ;
67053: LD_ADDR_VAR 0 3
67057: PUSH
67058: LD_VAR 0 3
67062: PPUSH
67063: LD_VAR 0 3
67067: PPUSH
67068: CALL_OW 3
67072: ST_TO_ADDR
67073: GO 67050
67075: POP
67076: POP
// end ;
67077: LD_VAR 0 3
67081: RET
// export function ComExit ( unit ) ; var tmp ; begin
67082: LD_INT 0
67084: PPUSH
67085: PPUSH
// if not IsInUnit ( unit ) then
67086: LD_VAR 0 1
67090: PPUSH
67091: CALL_OW 310
67095: NOT
67096: IFFALSE 67100
// exit ;
67098: GO 67160
// tmp := IsInUnit ( unit ) ;
67100: LD_ADDR_VAR 0 3
67104: PUSH
67105: LD_VAR 0 1
67109: PPUSH
67110: CALL_OW 310
67114: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
67115: LD_VAR 0 3
67119: PPUSH
67120: CALL_OW 247
67124: PUSH
67125: LD_INT 2
67127: EQUAL
67128: IFFALSE 67141
// ComExitVehicle ( unit ) else
67130: LD_VAR 0 1
67134: PPUSH
67135: CALL_OW 121
67139: GO 67150
// ComExitBuilding ( unit ) ;
67141: LD_VAR 0 1
67145: PPUSH
67146: CALL_OW 122
// result := tmp ;
67150: LD_ADDR_VAR 0 2
67154: PUSH
67155: LD_VAR 0 3
67159: ST_TO_ADDR
// end ;
67160: LD_VAR 0 2
67164: RET
// export function ComExitAll ( units ) ; var i ; begin
67165: LD_INT 0
67167: PPUSH
67168: PPUSH
// if not units then
67169: LD_VAR 0 1
67173: NOT
67174: IFFALSE 67178
// exit ;
67176: GO 67204
// for i in units do
67178: LD_ADDR_VAR 0 3
67182: PUSH
67183: LD_VAR 0 1
67187: PUSH
67188: FOR_IN
67189: IFFALSE 67202
// ComExit ( i ) ;
67191: LD_VAR 0 3
67195: PPUSH
67196: CALL 67082 0 1
67200: GO 67188
67202: POP
67203: POP
// end ;
67204: LD_VAR 0 2
67208: RET
// export function ResetHc ; begin
67209: LD_INT 0
67211: PPUSH
// InitHc ;
67212: CALL_OW 19
// hc_importance := 0 ;
67216: LD_ADDR_OWVAR 32
67220: PUSH
67221: LD_INT 0
67223: ST_TO_ADDR
// end ;
67224: LD_VAR 0 1
67228: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
67229: LD_INT 0
67231: PPUSH
67232: PPUSH
67233: PPUSH
// _x := ( x1 + x2 ) div 2 ;
67234: LD_ADDR_VAR 0 6
67238: PUSH
67239: LD_VAR 0 1
67243: PUSH
67244: LD_VAR 0 3
67248: PLUS
67249: PUSH
67250: LD_INT 2
67252: DIV
67253: ST_TO_ADDR
// if _x < 0 then
67254: LD_VAR 0 6
67258: PUSH
67259: LD_INT 0
67261: LESS
67262: IFFALSE 67279
// _x := _x * - 1 ;
67264: LD_ADDR_VAR 0 6
67268: PUSH
67269: LD_VAR 0 6
67273: PUSH
67274: LD_INT 1
67276: NEG
67277: MUL
67278: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
67279: LD_ADDR_VAR 0 7
67283: PUSH
67284: LD_VAR 0 2
67288: PUSH
67289: LD_VAR 0 4
67293: PLUS
67294: PUSH
67295: LD_INT 2
67297: DIV
67298: ST_TO_ADDR
// if _y < 0 then
67299: LD_VAR 0 7
67303: PUSH
67304: LD_INT 0
67306: LESS
67307: IFFALSE 67324
// _y := _y * - 1 ;
67309: LD_ADDR_VAR 0 7
67313: PUSH
67314: LD_VAR 0 7
67318: PUSH
67319: LD_INT 1
67321: NEG
67322: MUL
67323: ST_TO_ADDR
// result := [ _x , _y ] ;
67324: LD_ADDR_VAR 0 5
67328: PUSH
67329: LD_VAR 0 6
67333: PUSH
67334: LD_VAR 0 7
67338: PUSH
67339: EMPTY
67340: LIST
67341: LIST
67342: ST_TO_ADDR
// end ;
67343: LD_VAR 0 5
67347: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
67348: LD_INT 0
67350: PPUSH
67351: PPUSH
67352: PPUSH
67353: PPUSH
// task := GetTaskList ( unit ) ;
67354: LD_ADDR_VAR 0 7
67358: PUSH
67359: LD_VAR 0 1
67363: PPUSH
67364: CALL_OW 437
67368: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
67369: LD_VAR 0 7
67373: NOT
67374: PUSH
67375: LD_VAR 0 1
67379: PPUSH
67380: LD_VAR 0 2
67384: PPUSH
67385: CALL_OW 308
67389: NOT
67390: AND
67391: IFFALSE 67395
// exit ;
67393: GO 67513
// if IsInArea ( unit , area ) then
67395: LD_VAR 0 1
67399: PPUSH
67400: LD_VAR 0 2
67404: PPUSH
67405: CALL_OW 308
67409: IFFALSE 67427
// begin ComMoveToArea ( unit , goAway ) ;
67411: LD_VAR 0 1
67415: PPUSH
67416: LD_VAR 0 3
67420: PPUSH
67421: CALL_OW 113
// exit ;
67425: GO 67513
// end ; if task [ 1 ] [ 1 ] <> M then
67427: LD_VAR 0 7
67431: PUSH
67432: LD_INT 1
67434: ARRAY
67435: PUSH
67436: LD_INT 1
67438: ARRAY
67439: PUSH
67440: LD_STRING M
67442: NONEQUAL
67443: IFFALSE 67447
// exit ;
67445: GO 67513
// x := task [ 1 ] [ 2 ] ;
67447: LD_ADDR_VAR 0 5
67451: PUSH
67452: LD_VAR 0 7
67456: PUSH
67457: LD_INT 1
67459: ARRAY
67460: PUSH
67461: LD_INT 2
67463: ARRAY
67464: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
67465: LD_ADDR_VAR 0 6
67469: PUSH
67470: LD_VAR 0 7
67474: PUSH
67475: LD_INT 1
67477: ARRAY
67478: PUSH
67479: LD_INT 3
67481: ARRAY
67482: ST_TO_ADDR
// if InArea ( x , y , area ) then
67483: LD_VAR 0 5
67487: PPUSH
67488: LD_VAR 0 6
67492: PPUSH
67493: LD_VAR 0 2
67497: PPUSH
67498: CALL_OW 309
67502: IFFALSE 67513
// ComStop ( unit ) ;
67504: LD_VAR 0 1
67508: PPUSH
67509: CALL_OW 141
// end ;
67513: LD_VAR 0 4
67517: RET
// export function Abs ( value ) ; begin
67518: LD_INT 0
67520: PPUSH
// result := value ;
67521: LD_ADDR_VAR 0 2
67525: PUSH
67526: LD_VAR 0 1
67530: ST_TO_ADDR
// if value < 0 then
67531: LD_VAR 0 1
67535: PUSH
67536: LD_INT 0
67538: LESS
67539: IFFALSE 67556
// result := value * - 1 ;
67541: LD_ADDR_VAR 0 2
67545: PUSH
67546: LD_VAR 0 1
67550: PUSH
67551: LD_INT 1
67553: NEG
67554: MUL
67555: ST_TO_ADDR
// end ;
67556: LD_VAR 0 2
67560: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
67561: LD_INT 0
67563: PPUSH
67564: PPUSH
67565: PPUSH
67566: PPUSH
67567: PPUSH
67568: PPUSH
67569: PPUSH
67570: PPUSH
// if not unit or not building then
67571: LD_VAR 0 1
67575: NOT
67576: PUSH
67577: LD_VAR 0 2
67581: NOT
67582: OR
67583: IFFALSE 67587
// exit ;
67585: GO 67813
// x := GetX ( building ) ;
67587: LD_ADDR_VAR 0 4
67591: PUSH
67592: LD_VAR 0 2
67596: PPUSH
67597: CALL_OW 250
67601: ST_TO_ADDR
// y := GetY ( building ) ;
67602: LD_ADDR_VAR 0 6
67606: PUSH
67607: LD_VAR 0 2
67611: PPUSH
67612: CALL_OW 251
67616: ST_TO_ADDR
// d := GetDir ( building ) ;
67617: LD_ADDR_VAR 0 8
67621: PUSH
67622: LD_VAR 0 2
67626: PPUSH
67627: CALL_OW 254
67631: ST_TO_ADDR
// r := 4 ;
67632: LD_ADDR_VAR 0 9
67636: PUSH
67637: LD_INT 4
67639: ST_TO_ADDR
// for i := 1 to 5 do
67640: LD_ADDR_VAR 0 10
67644: PUSH
67645: DOUBLE
67646: LD_INT 1
67648: DEC
67649: ST_TO_ADDR
67650: LD_INT 5
67652: PUSH
67653: FOR_TO
67654: IFFALSE 67811
// begin _x := ShiftX ( x , d , r + i ) ;
67656: LD_ADDR_VAR 0 5
67660: PUSH
67661: LD_VAR 0 4
67665: PPUSH
67666: LD_VAR 0 8
67670: PPUSH
67671: LD_VAR 0 9
67675: PUSH
67676: LD_VAR 0 10
67680: PLUS
67681: PPUSH
67682: CALL_OW 272
67686: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
67687: LD_ADDR_VAR 0 7
67691: PUSH
67692: LD_VAR 0 6
67696: PPUSH
67697: LD_VAR 0 8
67701: PPUSH
67702: LD_VAR 0 9
67706: PUSH
67707: LD_VAR 0 10
67711: PLUS
67712: PPUSH
67713: CALL_OW 273
67717: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
67718: LD_VAR 0 5
67722: PPUSH
67723: LD_VAR 0 7
67727: PPUSH
67728: CALL_OW 488
67732: PUSH
67733: LD_VAR 0 5
67737: PPUSH
67738: LD_VAR 0 7
67742: PPUSH
67743: CALL_OW 428
67747: PPUSH
67748: CALL_OW 247
67752: PUSH
67753: LD_INT 3
67755: PUSH
67756: LD_INT 2
67758: PUSH
67759: EMPTY
67760: LIST
67761: LIST
67762: IN
67763: NOT
67764: AND
67765: IFFALSE 67809
// begin ComMoveXY ( unit , _x , _y ) ;
67767: LD_VAR 0 1
67771: PPUSH
67772: LD_VAR 0 5
67776: PPUSH
67777: LD_VAR 0 7
67781: PPUSH
67782: CALL_OW 111
// result := [ _x , _y ] ;
67786: LD_ADDR_VAR 0 3
67790: PUSH
67791: LD_VAR 0 5
67795: PUSH
67796: LD_VAR 0 7
67800: PUSH
67801: EMPTY
67802: LIST
67803: LIST
67804: ST_TO_ADDR
// exit ;
67805: POP
67806: POP
67807: GO 67813
// end ; end ;
67809: GO 67653
67811: POP
67812: POP
// end ;
67813: LD_VAR 0 3
67817: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
67818: LD_INT 0
67820: PPUSH
67821: PPUSH
67822: PPUSH
// result := 0 ;
67823: LD_ADDR_VAR 0 3
67827: PUSH
67828: LD_INT 0
67830: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
67831: LD_VAR 0 1
67835: PUSH
67836: LD_INT 0
67838: LESS
67839: PUSH
67840: LD_VAR 0 1
67844: PUSH
67845: LD_INT 8
67847: GREATER
67848: OR
67849: PUSH
67850: LD_VAR 0 2
67854: PUSH
67855: LD_INT 0
67857: LESS
67858: OR
67859: PUSH
67860: LD_VAR 0 2
67864: PUSH
67865: LD_INT 8
67867: GREATER
67868: OR
67869: IFFALSE 67873
// exit ;
67871: GO 67948
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
67873: LD_ADDR_VAR 0 4
67877: PUSH
67878: LD_INT 22
67880: PUSH
67881: LD_VAR 0 2
67885: PUSH
67886: EMPTY
67887: LIST
67888: LIST
67889: PPUSH
67890: CALL_OW 69
67894: PUSH
67895: FOR_IN
67896: IFFALSE 67946
// begin un := UnitShoot ( i ) ;
67898: LD_ADDR_VAR 0 5
67902: PUSH
67903: LD_VAR 0 4
67907: PPUSH
67908: CALL_OW 504
67912: ST_TO_ADDR
// if GetSide ( un ) = side1 then
67913: LD_VAR 0 5
67917: PPUSH
67918: CALL_OW 255
67922: PUSH
67923: LD_VAR 0 1
67927: EQUAL
67928: IFFALSE 67944
// begin result := un ;
67930: LD_ADDR_VAR 0 3
67934: PUSH
67935: LD_VAR 0 5
67939: ST_TO_ADDR
// exit ;
67940: POP
67941: POP
67942: GO 67948
// end ; end ;
67944: GO 67895
67946: POP
67947: POP
// end ;
67948: LD_VAR 0 3
67952: RET
// export function GetCargoBay ( units ) ; begin
67953: LD_INT 0
67955: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
67956: LD_ADDR_VAR 0 2
67960: PUSH
67961: LD_VAR 0 1
67965: PPUSH
67966: LD_INT 2
67968: PUSH
67969: LD_INT 34
67971: PUSH
67972: LD_INT 12
67974: PUSH
67975: EMPTY
67976: LIST
67977: LIST
67978: PUSH
67979: LD_INT 34
67981: PUSH
67982: LD_INT 51
67984: PUSH
67985: EMPTY
67986: LIST
67987: LIST
67988: PUSH
67989: LD_INT 34
67991: PUSH
67992: LD_INT 32
67994: PUSH
67995: EMPTY
67996: LIST
67997: LIST
67998: PUSH
67999: LD_INT 34
68001: PUSH
68002: LD_EXP 22
68006: PUSH
68007: EMPTY
68008: LIST
68009: LIST
68010: PUSH
68011: EMPTY
68012: LIST
68013: LIST
68014: LIST
68015: LIST
68016: LIST
68017: PPUSH
68018: CALL_OW 72
68022: ST_TO_ADDR
// end ;
68023: LD_VAR 0 2
68027: RET
// export function Negate ( value ) ; begin
68028: LD_INT 0
68030: PPUSH
// result := not value ;
68031: LD_ADDR_VAR 0 2
68035: PUSH
68036: LD_VAR 0 1
68040: NOT
68041: ST_TO_ADDR
// end ;
68042: LD_VAR 0 2
68046: RET
// export function Inc ( value ) ; begin
68047: LD_INT 0
68049: PPUSH
// result := value + 1 ;
68050: LD_ADDR_VAR 0 2
68054: PUSH
68055: LD_VAR 0 1
68059: PUSH
68060: LD_INT 1
68062: PLUS
68063: ST_TO_ADDR
// end ;
68064: LD_VAR 0 2
68068: RET
// export function Dec ( value ) ; begin
68069: LD_INT 0
68071: PPUSH
// result := value - 1 ;
68072: LD_ADDR_VAR 0 2
68076: PUSH
68077: LD_VAR 0 1
68081: PUSH
68082: LD_INT 1
68084: MINUS
68085: ST_TO_ADDR
// end ;
68086: LD_VAR 0 2
68090: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
68091: LD_INT 0
68093: PPUSH
68094: PPUSH
68095: PPUSH
68096: PPUSH
68097: PPUSH
68098: PPUSH
68099: PPUSH
68100: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
68101: LD_VAR 0 1
68105: PPUSH
68106: LD_VAR 0 2
68110: PPUSH
68111: CALL_OW 488
68115: NOT
68116: PUSH
68117: LD_VAR 0 3
68121: PPUSH
68122: LD_VAR 0 4
68126: PPUSH
68127: CALL_OW 488
68131: NOT
68132: OR
68133: IFFALSE 68146
// begin result := - 1 ;
68135: LD_ADDR_VAR 0 5
68139: PUSH
68140: LD_INT 1
68142: NEG
68143: ST_TO_ADDR
// exit ;
68144: GO 68381
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
68146: LD_ADDR_VAR 0 12
68150: PUSH
68151: LD_VAR 0 1
68155: PPUSH
68156: LD_VAR 0 2
68160: PPUSH
68161: LD_VAR 0 3
68165: PPUSH
68166: LD_VAR 0 4
68170: PPUSH
68171: CALL 67229 0 4
68175: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
68176: LD_ADDR_VAR 0 11
68180: PUSH
68181: LD_VAR 0 1
68185: PPUSH
68186: LD_VAR 0 2
68190: PPUSH
68191: LD_VAR 0 12
68195: PUSH
68196: LD_INT 1
68198: ARRAY
68199: PPUSH
68200: LD_VAR 0 12
68204: PUSH
68205: LD_INT 2
68207: ARRAY
68208: PPUSH
68209: CALL_OW 298
68213: ST_TO_ADDR
// distance := 9999 ;
68214: LD_ADDR_VAR 0 10
68218: PUSH
68219: LD_INT 9999
68221: ST_TO_ADDR
// for i := 0 to 5 do
68222: LD_ADDR_VAR 0 6
68226: PUSH
68227: DOUBLE
68228: LD_INT 0
68230: DEC
68231: ST_TO_ADDR
68232: LD_INT 5
68234: PUSH
68235: FOR_TO
68236: IFFALSE 68379
// begin _x := ShiftX ( x1 , i , centerDist ) ;
68238: LD_ADDR_VAR 0 7
68242: PUSH
68243: LD_VAR 0 1
68247: PPUSH
68248: LD_VAR 0 6
68252: PPUSH
68253: LD_VAR 0 11
68257: PPUSH
68258: CALL_OW 272
68262: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
68263: LD_ADDR_VAR 0 8
68267: PUSH
68268: LD_VAR 0 2
68272: PPUSH
68273: LD_VAR 0 6
68277: PPUSH
68278: LD_VAR 0 11
68282: PPUSH
68283: CALL_OW 273
68287: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
68288: LD_VAR 0 7
68292: PPUSH
68293: LD_VAR 0 8
68297: PPUSH
68298: CALL_OW 488
68302: NOT
68303: IFFALSE 68307
// continue ;
68305: GO 68235
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
68307: LD_ADDR_VAR 0 9
68311: PUSH
68312: LD_VAR 0 12
68316: PUSH
68317: LD_INT 1
68319: ARRAY
68320: PPUSH
68321: LD_VAR 0 12
68325: PUSH
68326: LD_INT 2
68328: ARRAY
68329: PPUSH
68330: LD_VAR 0 7
68334: PPUSH
68335: LD_VAR 0 8
68339: PPUSH
68340: CALL_OW 298
68344: ST_TO_ADDR
// if tmp < distance then
68345: LD_VAR 0 9
68349: PUSH
68350: LD_VAR 0 10
68354: LESS
68355: IFFALSE 68377
// begin result := i ;
68357: LD_ADDR_VAR 0 5
68361: PUSH
68362: LD_VAR 0 6
68366: ST_TO_ADDR
// distance := tmp ;
68367: LD_ADDR_VAR 0 10
68371: PUSH
68372: LD_VAR 0 9
68376: ST_TO_ADDR
// end ; end ;
68377: GO 68235
68379: POP
68380: POP
// end ;
68381: LD_VAR 0 5
68385: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
68386: LD_INT 0
68388: PPUSH
68389: PPUSH
// if not driver or not IsInUnit ( driver ) then
68390: LD_VAR 0 1
68394: NOT
68395: PUSH
68396: LD_VAR 0 1
68400: PPUSH
68401: CALL_OW 310
68405: NOT
68406: OR
68407: IFFALSE 68411
// exit ;
68409: GO 68501
// vehicle := IsInUnit ( driver ) ;
68411: LD_ADDR_VAR 0 3
68415: PUSH
68416: LD_VAR 0 1
68420: PPUSH
68421: CALL_OW 310
68425: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
68426: LD_VAR 0 1
68430: PPUSH
68431: LD_STRING \
68433: PUSH
68434: LD_INT 0
68436: PUSH
68437: LD_INT 0
68439: PUSH
68440: LD_INT 0
68442: PUSH
68443: LD_INT 0
68445: PUSH
68446: LD_INT 0
68448: PUSH
68449: LD_INT 0
68451: PUSH
68452: EMPTY
68453: LIST
68454: LIST
68455: LIST
68456: LIST
68457: LIST
68458: LIST
68459: LIST
68460: PUSH
68461: LD_STRING E
68463: PUSH
68464: LD_INT 0
68466: PUSH
68467: LD_INT 0
68469: PUSH
68470: LD_VAR 0 3
68474: PUSH
68475: LD_INT 0
68477: PUSH
68478: LD_INT 0
68480: PUSH
68481: LD_INT 0
68483: PUSH
68484: EMPTY
68485: LIST
68486: LIST
68487: LIST
68488: LIST
68489: LIST
68490: LIST
68491: LIST
68492: PUSH
68493: EMPTY
68494: LIST
68495: LIST
68496: PPUSH
68497: CALL_OW 446
// end ;
68501: LD_VAR 0 2
68505: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
68506: LD_INT 0
68508: PPUSH
68509: PPUSH
// if not driver or not IsInUnit ( driver ) then
68510: LD_VAR 0 1
68514: NOT
68515: PUSH
68516: LD_VAR 0 1
68520: PPUSH
68521: CALL_OW 310
68525: NOT
68526: OR
68527: IFFALSE 68531
// exit ;
68529: GO 68621
// vehicle := IsInUnit ( driver ) ;
68531: LD_ADDR_VAR 0 3
68535: PUSH
68536: LD_VAR 0 1
68540: PPUSH
68541: CALL_OW 310
68545: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
68546: LD_VAR 0 1
68550: PPUSH
68551: LD_STRING \
68553: PUSH
68554: LD_INT 0
68556: PUSH
68557: LD_INT 0
68559: PUSH
68560: LD_INT 0
68562: PUSH
68563: LD_INT 0
68565: PUSH
68566: LD_INT 0
68568: PUSH
68569: LD_INT 0
68571: PUSH
68572: EMPTY
68573: LIST
68574: LIST
68575: LIST
68576: LIST
68577: LIST
68578: LIST
68579: LIST
68580: PUSH
68581: LD_STRING E
68583: PUSH
68584: LD_INT 0
68586: PUSH
68587: LD_INT 0
68589: PUSH
68590: LD_VAR 0 3
68594: PUSH
68595: LD_INT 0
68597: PUSH
68598: LD_INT 0
68600: PUSH
68601: LD_INT 0
68603: PUSH
68604: EMPTY
68605: LIST
68606: LIST
68607: LIST
68608: LIST
68609: LIST
68610: LIST
68611: LIST
68612: PUSH
68613: EMPTY
68614: LIST
68615: LIST
68616: PPUSH
68617: CALL_OW 447
// end ;
68621: LD_VAR 0 2
68625: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
68626: LD_INT 0
68628: PPUSH
68629: PPUSH
68630: PPUSH
// tmp := [ ] ;
68631: LD_ADDR_VAR 0 5
68635: PUSH
68636: EMPTY
68637: ST_TO_ADDR
// for i in units do
68638: LD_ADDR_VAR 0 4
68642: PUSH
68643: LD_VAR 0 1
68647: PUSH
68648: FOR_IN
68649: IFFALSE 68687
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
68651: LD_ADDR_VAR 0 5
68655: PUSH
68656: LD_VAR 0 5
68660: PPUSH
68661: LD_VAR 0 5
68665: PUSH
68666: LD_INT 1
68668: PLUS
68669: PPUSH
68670: LD_VAR 0 4
68674: PPUSH
68675: CALL_OW 256
68679: PPUSH
68680: CALL_OW 2
68684: ST_TO_ADDR
68685: GO 68648
68687: POP
68688: POP
// if not tmp then
68689: LD_VAR 0 5
68693: NOT
68694: IFFALSE 68698
// exit ;
68696: GO 68746
// if asc then
68698: LD_VAR 0 2
68702: IFFALSE 68726
// result := SortListByListAsc ( units , tmp ) else
68704: LD_ADDR_VAR 0 3
68708: PUSH
68709: LD_VAR 0 1
68713: PPUSH
68714: LD_VAR 0 5
68718: PPUSH
68719: CALL_OW 76
68723: ST_TO_ADDR
68724: GO 68746
// result := SortListByListDesc ( units , tmp ) ;
68726: LD_ADDR_VAR 0 3
68730: PUSH
68731: LD_VAR 0 1
68735: PPUSH
68736: LD_VAR 0 5
68740: PPUSH
68741: CALL_OW 77
68745: ST_TO_ADDR
// end ;
68746: LD_VAR 0 3
68750: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
68751: LD_INT 0
68753: PPUSH
68754: PPUSH
// task := GetTaskList ( mech ) ;
68755: LD_ADDR_VAR 0 4
68759: PUSH
68760: LD_VAR 0 1
68764: PPUSH
68765: CALL_OW 437
68769: ST_TO_ADDR
// if not task then
68770: LD_VAR 0 4
68774: NOT
68775: IFFALSE 68779
// exit ;
68777: GO 68821
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
68779: LD_ADDR_VAR 0 3
68783: PUSH
68784: LD_VAR 0 4
68788: PUSH
68789: LD_INT 1
68791: ARRAY
68792: PUSH
68793: LD_INT 1
68795: ARRAY
68796: PUSH
68797: LD_STRING r
68799: EQUAL
68800: PUSH
68801: LD_VAR 0 4
68805: PUSH
68806: LD_INT 1
68808: ARRAY
68809: PUSH
68810: LD_INT 4
68812: ARRAY
68813: PUSH
68814: LD_VAR 0 2
68818: EQUAL
68819: AND
68820: ST_TO_ADDR
// end ;
68821: LD_VAR 0 3
68825: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
68826: LD_INT 0
68828: PPUSH
// SetDir ( unit , d ) ;
68829: LD_VAR 0 1
68833: PPUSH
68834: LD_VAR 0 4
68838: PPUSH
68839: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
68843: LD_VAR 0 1
68847: PPUSH
68848: LD_VAR 0 2
68852: PPUSH
68853: LD_VAR 0 3
68857: PPUSH
68858: LD_VAR 0 5
68862: PPUSH
68863: CALL_OW 48
// end ;
68867: LD_VAR 0 6
68871: RET
// export function ToNaturalNumber ( number ) ; begin
68872: LD_INT 0
68874: PPUSH
// result := number div 1 ;
68875: LD_ADDR_VAR 0 2
68879: PUSH
68880: LD_VAR 0 1
68884: PUSH
68885: LD_INT 1
68887: DIV
68888: ST_TO_ADDR
// if number < 0 then
68889: LD_VAR 0 1
68893: PUSH
68894: LD_INT 0
68896: LESS
68897: IFFALSE 68907
// result := 0 ;
68899: LD_ADDR_VAR 0 2
68903: PUSH
68904: LD_INT 0
68906: ST_TO_ADDR
// end ;
68907: LD_VAR 0 2
68911: RET
// export function SortByClass ( units , class ) ; var un ; begin
68912: LD_INT 0
68914: PPUSH
68915: PPUSH
// if not units or not class then
68916: LD_VAR 0 1
68920: NOT
68921: PUSH
68922: LD_VAR 0 2
68926: NOT
68927: OR
68928: IFFALSE 68932
// exit ;
68930: GO 69027
// result := [ ] ;
68932: LD_ADDR_VAR 0 3
68936: PUSH
68937: EMPTY
68938: ST_TO_ADDR
// for un in units do
68939: LD_ADDR_VAR 0 4
68943: PUSH
68944: LD_VAR 0 1
68948: PUSH
68949: FOR_IN
68950: IFFALSE 69025
// if GetClass ( un ) = class then
68952: LD_VAR 0 4
68956: PPUSH
68957: CALL_OW 257
68961: PUSH
68962: LD_VAR 0 2
68966: EQUAL
68967: IFFALSE 68994
// result := Insert ( result , 1 , un ) else
68969: LD_ADDR_VAR 0 3
68973: PUSH
68974: LD_VAR 0 3
68978: PPUSH
68979: LD_INT 1
68981: PPUSH
68982: LD_VAR 0 4
68986: PPUSH
68987: CALL_OW 2
68991: ST_TO_ADDR
68992: GO 69023
// result := Replace ( result , result + 1 , un ) ;
68994: LD_ADDR_VAR 0 3
68998: PUSH
68999: LD_VAR 0 3
69003: PPUSH
69004: LD_VAR 0 3
69008: PUSH
69009: LD_INT 1
69011: PLUS
69012: PPUSH
69013: LD_VAR 0 4
69017: PPUSH
69018: CALL_OW 1
69022: ST_TO_ADDR
69023: GO 68949
69025: POP
69026: POP
// end ;
69027: LD_VAR 0 3
69031: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
69032: LD_INT 0
69034: PPUSH
69035: PPUSH
69036: PPUSH
69037: PPUSH
69038: PPUSH
69039: PPUSH
69040: PPUSH
// result := [ ] ;
69041: LD_ADDR_VAR 0 4
69045: PUSH
69046: EMPTY
69047: ST_TO_ADDR
// if x - r < 0 then
69048: LD_VAR 0 1
69052: PUSH
69053: LD_VAR 0 3
69057: MINUS
69058: PUSH
69059: LD_INT 0
69061: LESS
69062: IFFALSE 69074
// min_x := 0 else
69064: LD_ADDR_VAR 0 8
69068: PUSH
69069: LD_INT 0
69071: ST_TO_ADDR
69072: GO 69090
// min_x := x - r ;
69074: LD_ADDR_VAR 0 8
69078: PUSH
69079: LD_VAR 0 1
69083: PUSH
69084: LD_VAR 0 3
69088: MINUS
69089: ST_TO_ADDR
// if y - r < 0 then
69090: LD_VAR 0 2
69094: PUSH
69095: LD_VAR 0 3
69099: MINUS
69100: PUSH
69101: LD_INT 0
69103: LESS
69104: IFFALSE 69116
// min_y := 0 else
69106: LD_ADDR_VAR 0 7
69110: PUSH
69111: LD_INT 0
69113: ST_TO_ADDR
69114: GO 69132
// min_y := y - r ;
69116: LD_ADDR_VAR 0 7
69120: PUSH
69121: LD_VAR 0 2
69125: PUSH
69126: LD_VAR 0 3
69130: MINUS
69131: ST_TO_ADDR
// max_x := x + r ;
69132: LD_ADDR_VAR 0 9
69136: PUSH
69137: LD_VAR 0 1
69141: PUSH
69142: LD_VAR 0 3
69146: PLUS
69147: ST_TO_ADDR
// max_y := y + r ;
69148: LD_ADDR_VAR 0 10
69152: PUSH
69153: LD_VAR 0 2
69157: PUSH
69158: LD_VAR 0 3
69162: PLUS
69163: ST_TO_ADDR
// for _x = min_x to max_x do
69164: LD_ADDR_VAR 0 5
69168: PUSH
69169: DOUBLE
69170: LD_VAR 0 8
69174: DEC
69175: ST_TO_ADDR
69176: LD_VAR 0 9
69180: PUSH
69181: FOR_TO
69182: IFFALSE 69283
// for _y = min_y to max_y do
69184: LD_ADDR_VAR 0 6
69188: PUSH
69189: DOUBLE
69190: LD_VAR 0 7
69194: DEC
69195: ST_TO_ADDR
69196: LD_VAR 0 10
69200: PUSH
69201: FOR_TO
69202: IFFALSE 69279
// begin if not ValidHex ( _x , _y ) then
69204: LD_VAR 0 5
69208: PPUSH
69209: LD_VAR 0 6
69213: PPUSH
69214: CALL_OW 488
69218: NOT
69219: IFFALSE 69223
// continue ;
69221: GO 69201
// if GetResourceTypeXY ( _x , _y ) then
69223: LD_VAR 0 5
69227: PPUSH
69228: LD_VAR 0 6
69232: PPUSH
69233: CALL_OW 283
69237: IFFALSE 69277
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
69239: LD_ADDR_VAR 0 4
69243: PUSH
69244: LD_VAR 0 4
69248: PPUSH
69249: LD_VAR 0 4
69253: PUSH
69254: LD_INT 1
69256: PLUS
69257: PPUSH
69258: LD_VAR 0 5
69262: PUSH
69263: LD_VAR 0 6
69267: PUSH
69268: EMPTY
69269: LIST
69270: LIST
69271: PPUSH
69272: CALL_OW 1
69276: ST_TO_ADDR
// end ;
69277: GO 69201
69279: POP
69280: POP
69281: GO 69181
69283: POP
69284: POP
// end ;
69285: LD_VAR 0 4
69289: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
69290: LD_INT 0
69292: PPUSH
69293: PPUSH
69294: PPUSH
69295: PPUSH
69296: PPUSH
69297: PPUSH
69298: PPUSH
69299: PPUSH
// if not units then
69300: LD_VAR 0 1
69304: NOT
69305: IFFALSE 69309
// exit ;
69307: GO 69734
// result := UnitFilter ( units , [ f_ok ] ) ;
69309: LD_ADDR_VAR 0 3
69313: PUSH
69314: LD_VAR 0 1
69318: PPUSH
69319: LD_INT 50
69321: PUSH
69322: EMPTY
69323: LIST
69324: PPUSH
69325: CALL_OW 72
69329: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
69330: LD_ADDR_VAR 0 8
69334: PUSH
69335: LD_VAR 0 1
69339: PUSH
69340: LD_INT 1
69342: ARRAY
69343: PPUSH
69344: CALL_OW 255
69348: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
69349: LD_ADDR_VAR 0 10
69353: PUSH
69354: LD_INT 29
69356: PUSH
69357: LD_EXP 25
69361: PUSH
69362: EMPTY
69363: LIST
69364: LIST
69365: ST_TO_ADDR
// if not result then
69366: LD_VAR 0 3
69370: NOT
69371: IFFALSE 69375
// exit ;
69373: GO 69734
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
69375: LD_ADDR_VAR 0 5
69379: PUSH
69380: LD_INT 81
69382: PUSH
69383: LD_VAR 0 8
69387: PUSH
69388: EMPTY
69389: LIST
69390: LIST
69391: PPUSH
69392: CALL_OW 69
69396: ST_TO_ADDR
// for i in result do
69397: LD_ADDR_VAR 0 4
69401: PUSH
69402: LD_VAR 0 3
69406: PUSH
69407: FOR_IN
69408: IFFALSE 69732
// begin tag := GetTag ( i ) + 1 ;
69410: LD_ADDR_VAR 0 9
69414: PUSH
69415: LD_VAR 0 4
69419: PPUSH
69420: CALL_OW 110
69424: PUSH
69425: LD_INT 1
69427: PLUS
69428: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
69429: LD_ADDR_VAR 0 7
69433: PUSH
69434: LD_VAR 0 4
69438: PPUSH
69439: CALL_OW 250
69443: PPUSH
69444: LD_VAR 0 4
69448: PPUSH
69449: CALL_OW 251
69453: PPUSH
69454: LD_INT 6
69456: PPUSH
69457: CALL 69032 0 3
69461: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
69462: LD_VAR 0 7
69466: PUSH
69467: LD_VAR 0 4
69471: PPUSH
69472: CALL_OW 264
69476: PUSH
69477: LD_VAR 0 10
69481: IN
69482: NOT
69483: AND
69484: IFFALSE 69523
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
69486: LD_VAR 0 4
69490: PPUSH
69491: LD_VAR 0 7
69495: PUSH
69496: LD_INT 1
69498: ARRAY
69499: PUSH
69500: LD_INT 1
69502: ARRAY
69503: PPUSH
69504: LD_VAR 0 7
69508: PUSH
69509: LD_INT 1
69511: ARRAY
69512: PUSH
69513: LD_INT 2
69515: ARRAY
69516: PPUSH
69517: CALL_OW 116
69521: GO 69730
// if path > tag then
69523: LD_VAR 0 2
69527: PUSH
69528: LD_VAR 0 9
69532: GREATER
69533: IFFALSE 69700
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
69535: LD_ADDR_VAR 0 6
69539: PUSH
69540: LD_VAR 0 5
69544: PPUSH
69545: LD_INT 91
69547: PUSH
69548: LD_VAR 0 4
69552: PUSH
69553: LD_INT 12
69555: PUSH
69556: EMPTY
69557: LIST
69558: LIST
69559: LIST
69560: PPUSH
69561: CALL_OW 72
69565: ST_TO_ADDR
// if nearEnemy then
69566: LD_VAR 0 6
69570: IFFALSE 69598
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
69572: LD_VAR 0 4
69576: PPUSH
69577: LD_VAR 0 6
69581: PPUSH
69582: LD_VAR 0 4
69586: PPUSH
69587: CALL_OW 74
69591: PPUSH
69592: CALL_OW 115
69596: GO 69698
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
69598: LD_VAR 0 4
69602: PPUSH
69603: LD_VAR 0 2
69607: PUSH
69608: LD_VAR 0 9
69612: ARRAY
69613: PUSH
69614: LD_INT 1
69616: ARRAY
69617: PPUSH
69618: LD_VAR 0 2
69622: PUSH
69623: LD_VAR 0 9
69627: ARRAY
69628: PUSH
69629: LD_INT 2
69631: ARRAY
69632: PPUSH
69633: CALL_OW 297
69637: PUSH
69638: LD_INT 6
69640: GREATER
69641: IFFALSE 69684
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
69643: LD_VAR 0 4
69647: PPUSH
69648: LD_VAR 0 2
69652: PUSH
69653: LD_VAR 0 9
69657: ARRAY
69658: PUSH
69659: LD_INT 1
69661: ARRAY
69662: PPUSH
69663: LD_VAR 0 2
69667: PUSH
69668: LD_VAR 0 9
69672: ARRAY
69673: PUSH
69674: LD_INT 2
69676: ARRAY
69677: PPUSH
69678: CALL_OW 114
69682: GO 69698
// SetTag ( i , tag ) ;
69684: LD_VAR 0 4
69688: PPUSH
69689: LD_VAR 0 9
69693: PPUSH
69694: CALL_OW 109
// end else
69698: GO 69730
// if enemy then
69700: LD_VAR 0 5
69704: IFFALSE 69730
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
69706: LD_VAR 0 4
69710: PPUSH
69711: LD_VAR 0 5
69715: PPUSH
69716: LD_VAR 0 4
69720: PPUSH
69721: CALL_OW 74
69725: PPUSH
69726: CALL_OW 115
// end ;
69730: GO 69407
69732: POP
69733: POP
// end ;
69734: LD_VAR 0 3
69738: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
69739: LD_INT 0
69741: PPUSH
69742: PPUSH
69743: PPUSH
// if not unit or IsInUnit ( unit ) then
69744: LD_VAR 0 1
69748: NOT
69749: PUSH
69750: LD_VAR 0 1
69754: PPUSH
69755: CALL_OW 310
69759: OR
69760: IFFALSE 69764
// exit ;
69762: GO 69855
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
69764: LD_ADDR_VAR 0 4
69768: PUSH
69769: LD_VAR 0 1
69773: PPUSH
69774: CALL_OW 250
69778: PPUSH
69779: LD_VAR 0 2
69783: PPUSH
69784: LD_INT 1
69786: PPUSH
69787: CALL_OW 272
69791: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
69792: LD_ADDR_VAR 0 5
69796: PUSH
69797: LD_VAR 0 1
69801: PPUSH
69802: CALL_OW 251
69806: PPUSH
69807: LD_VAR 0 2
69811: PPUSH
69812: LD_INT 1
69814: PPUSH
69815: CALL_OW 273
69819: ST_TO_ADDR
// if ValidHex ( x , y ) then
69820: LD_VAR 0 4
69824: PPUSH
69825: LD_VAR 0 5
69829: PPUSH
69830: CALL_OW 488
69834: IFFALSE 69855
// ComTurnXY ( unit , x , y ) ;
69836: LD_VAR 0 1
69840: PPUSH
69841: LD_VAR 0 4
69845: PPUSH
69846: LD_VAR 0 5
69850: PPUSH
69851: CALL_OW 118
// end ;
69855: LD_VAR 0 3
69859: RET
// export function SeeUnits ( side , units ) ; var i ; begin
69860: LD_INT 0
69862: PPUSH
69863: PPUSH
// result := false ;
69864: LD_ADDR_VAR 0 3
69868: PUSH
69869: LD_INT 0
69871: ST_TO_ADDR
// if not units then
69872: LD_VAR 0 2
69876: NOT
69877: IFFALSE 69881
// exit ;
69879: GO 69926
// for i in units do
69881: LD_ADDR_VAR 0 4
69885: PUSH
69886: LD_VAR 0 2
69890: PUSH
69891: FOR_IN
69892: IFFALSE 69924
// if See ( side , i ) then
69894: LD_VAR 0 1
69898: PPUSH
69899: LD_VAR 0 4
69903: PPUSH
69904: CALL_OW 292
69908: IFFALSE 69922
// begin result := true ;
69910: LD_ADDR_VAR 0 3
69914: PUSH
69915: LD_INT 1
69917: ST_TO_ADDR
// exit ;
69918: POP
69919: POP
69920: GO 69926
// end ;
69922: GO 69891
69924: POP
69925: POP
// end ;
69926: LD_VAR 0 3
69930: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
69931: LD_INT 0
69933: PPUSH
69934: PPUSH
69935: PPUSH
69936: PPUSH
// if not unit or not points then
69937: LD_VAR 0 1
69941: NOT
69942: PUSH
69943: LD_VAR 0 2
69947: NOT
69948: OR
69949: IFFALSE 69953
// exit ;
69951: GO 70043
// dist := 99999 ;
69953: LD_ADDR_VAR 0 5
69957: PUSH
69958: LD_INT 99999
69960: ST_TO_ADDR
// for i in points do
69961: LD_ADDR_VAR 0 4
69965: PUSH
69966: LD_VAR 0 2
69970: PUSH
69971: FOR_IN
69972: IFFALSE 70041
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
69974: LD_ADDR_VAR 0 6
69978: PUSH
69979: LD_VAR 0 1
69983: PPUSH
69984: LD_VAR 0 4
69988: PUSH
69989: LD_INT 1
69991: ARRAY
69992: PPUSH
69993: LD_VAR 0 4
69997: PUSH
69998: LD_INT 2
70000: ARRAY
70001: PPUSH
70002: CALL_OW 297
70006: ST_TO_ADDR
// if tmpDist < dist then
70007: LD_VAR 0 6
70011: PUSH
70012: LD_VAR 0 5
70016: LESS
70017: IFFALSE 70039
// begin result := i ;
70019: LD_ADDR_VAR 0 3
70023: PUSH
70024: LD_VAR 0 4
70028: ST_TO_ADDR
// dist := tmpDist ;
70029: LD_ADDR_VAR 0 5
70033: PUSH
70034: LD_VAR 0 6
70038: ST_TO_ADDR
// end ; end ;
70039: GO 69971
70041: POP
70042: POP
// end ; end_of_file
70043: LD_VAR 0 3
70047: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
70048: LD_VAR 0 1
70052: PUSH
70053: LD_INT 200
70055: DOUBLE
70056: GREATEREQUAL
70057: IFFALSE 70065
70059: LD_INT 299
70061: DOUBLE
70062: LESSEQUAL
70063: IFTRUE 70067
70065: GO 70099
70067: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
70068: LD_VAR 0 1
70072: PPUSH
70073: LD_VAR 0 2
70077: PPUSH
70078: LD_VAR 0 3
70082: PPUSH
70083: LD_VAR 0 4
70087: PPUSH
70088: LD_VAR 0 5
70092: PPUSH
70093: CALL 26074 0 5
70097: GO 70176
70099: LD_INT 300
70101: DOUBLE
70102: GREATEREQUAL
70103: IFFALSE 70111
70105: LD_INT 399
70107: DOUBLE
70108: LESSEQUAL
70109: IFTRUE 70113
70111: GO 70175
70113: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
70114: LD_VAR 0 1
70118: PPUSH
70119: LD_VAR 0 2
70123: PPUSH
70124: LD_VAR 0 3
70128: PPUSH
70129: LD_VAR 0 4
70133: PPUSH
70134: LD_VAR 0 5
70138: PPUSH
70139: LD_VAR 0 6
70143: PPUSH
70144: LD_VAR 0 7
70148: PPUSH
70149: LD_VAR 0 8
70153: PPUSH
70154: LD_VAR 0 9
70158: PPUSH
70159: LD_VAR 0 10
70163: PPUSH
70164: LD_VAR 0 11
70168: PPUSH
70169: CALL 23972 0 11
70173: GO 70176
70175: POP
// end ;
70176: PPOPN 11
70178: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
70179: LD_VAR 0 1
70183: PPUSH
70184: LD_VAR 0 2
70188: PPUSH
70189: LD_VAR 0 3
70193: PPUSH
70194: LD_VAR 0 4
70198: PPUSH
70199: LD_VAR 0 5
70203: PPUSH
70204: CALL 26066 0 5
// end ; end_of_file
70208: PPOPN 5
70210: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
70211: LD_VAR 0 1
70215: PPUSH
70216: LD_VAR 0 2
70220: PPUSH
70221: LD_VAR 0 3
70225: PPUSH
70226: LD_VAR 0 4
70230: PPUSH
70231: LD_VAR 0 5
70235: PPUSH
70236: LD_VAR 0 6
70240: PPUSH
70241: CALL 12167 0 6
// end ;
70245: PPOPN 6
70247: END
