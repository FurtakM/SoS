// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// Init ;
   8: CALL 44 0 0
// DebugMode ;
  12: CALL 265 0 0
// AnimateTrees ( true ) ;
  16: LD_INT 1
  18: PPUSH
  19: CALL_OW 573
// CreateNature ;
  23: CALL 1568 0 0
// PrepareRussians ;
  27: CALL 4578 0 0
// PrepareAmericans ;
  31: CALL 3448 0 0
// Action ;
  35: CALL 8596 0 0
// SaveForQuickRestart ;
  39: CALL_OW 22
// end ;
  43: END
// export debug ; export mission_prev_prefix , mission_prefix ; export buildings_counter , time_to_end , can_end , must_end , kill_counter ; function Init ; begin
  44: LD_INT 0
  46: PPUSH
// debug := false ;
  47: LD_ADDR_EXP 1
  51: PUSH
  52: LD_INT 0
  54: ST_TO_ADDR
// mission_prefix := 07c_ ;
  55: LD_ADDR_EXP 3
  59: PUSH
  60: LD_STRING 07c_
  62: ST_TO_ADDR
// mission_prev_prefix := 07_ ;
  63: LD_ADDR_EXP 2
  67: PUSH
  68: LD_STRING 07_
  70: ST_TO_ADDR
// buildings_counter := 0 ;
  71: LD_ADDR_EXP 4
  75: PUSH
  76: LD_INT 0
  78: ST_TO_ADDR
// time_to_end := [ [ 32 32$00 , 29 29$00 , 26 26$00 , 23 23$00 ] [ Difficulty ] , [ 38 38$00 , 36 36$00 , 34 34$00 , 32 32$00 ] [ Difficulty ] , [ 43 43$00 , 41 41$00 , 39 39$00 , 37 37$00 ] [ Difficulty ] ] ;
  79: LD_ADDR_EXP 5
  83: PUSH
  84: LD_INT 67200
  86: PUSH
  87: LD_INT 60900
  89: PUSH
  90: LD_INT 54600
  92: PUSH
  93: LD_INT 48300
  95: PUSH
  96: EMPTY
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: PUSH
 102: LD_OWVAR 67
 106: ARRAY
 107: PUSH
 108: LD_INT 79800
 110: PUSH
 111: LD_INT 75600
 113: PUSH
 114: LD_INT 71400
 116: PUSH
 117: LD_INT 67200
 119: PUSH
 120: EMPTY
 121: LIST
 122: LIST
 123: LIST
 124: LIST
 125: PUSH
 126: LD_OWVAR 67
 130: ARRAY
 131: PUSH
 132: LD_INT 90300
 134: PUSH
 135: LD_INT 86100
 137: PUSH
 138: LD_INT 81900
 140: PUSH
 141: LD_INT 77700
 143: PUSH
 144: EMPTY
 145: LIST
 146: LIST
 147: LIST
 148: LIST
 149: PUSH
 150: LD_OWVAR 67
 154: ARRAY
 155: PUSH
 156: EMPTY
 157: LIST
 158: LIST
 159: LIST
 160: ST_TO_ADDR
// can_end := false ;
 161: LD_ADDR_EXP 6
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// must_end := false ;
 169: LD_ADDR_EXP 7
 173: PUSH
 174: LD_INT 0
 176: ST_TO_ADDR
// kill_counter := 0 ;
 177: LD_ADDR_EXP 8
 181: PUSH
 182: LD_INT 0
 184: ST_TO_ADDR
// end ;
 185: LD_VAR 0 1
 189: RET
// every 0 0$01 trigger not debug do
 190: LD_EXP 1
 194: NOT
 195: IFFALSE 264
 197: GO 199
 199: DISABLE
// begin enable ;
 200: ENABLE
// if not must_end then
 201: LD_EXP 7
 205: NOT
 206: IFFALSE 227
// display_strings := [ #Am07-1 , tick ] else
 208: LD_ADDR_OWVAR 47
 212: PUSH
 213: LD_STRING #Am07-1
 215: PUSH
 216: LD_OWVAR 1
 220: PUSH
 221: EMPTY
 222: LIST
 223: LIST
 224: ST_TO_ADDR
 225: GO 264
// display_strings := [ #Am07-1 , tick , #Am07-2 , time_to_end [ 3 ] - tick ] ;
 227: LD_ADDR_OWVAR 47
 231: PUSH
 232: LD_STRING #Am07-1
 234: PUSH
 235: LD_OWVAR 1
 239: PUSH
 240: LD_STRING #Am07-2
 242: PUSH
 243: LD_EXP 5
 247: PUSH
 248: LD_INT 3
 250: ARRAY
 251: PUSH
 252: LD_OWVAR 1
 256: MINUS
 257: PUSH
 258: EMPTY
 259: LIST
 260: LIST
 261: LIST
 262: LIST
 263: ST_TO_ADDR
// end ;
 264: END
// function DebugMode ; var i ; begin
 265: LD_INT 0
 267: PPUSH
 268: PPUSH
// if not debug then
 269: LD_EXP 1
 273: NOT
 274: IFFALSE 278
// exit ;
 276: GO 293
// Difficulty := 4 ;
 278: LD_ADDR_OWVAR 67
 282: PUSH
 283: LD_INT 4
 285: ST_TO_ADDR
// FogOff ( 1 ) ;
 286: LD_INT 1
 288: PPUSH
 289: CALL_OW 344
// end ;
 293: LD_VAR 0 1
 297: RET
// every 3 trigger debug do var i , filter ;
 298: LD_EXP 1
 302: IFFALSE 391
 304: GO 306
 306: DISABLE
 307: LD_INT 0
 309: PPUSH
 310: PPUSH
// begin enable ;
 311: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 500 ] ] ] ) ;
 312: LD_ADDR_VAR 0 2
 316: PUSH
 317: LD_INT 22
 319: PUSH
 320: LD_INT 1
 322: PUSH
 323: EMPTY
 324: LIST
 325: LIST
 326: PUSH
 327: LD_INT 3
 329: PUSH
 330: LD_INT 24
 332: PUSH
 333: LD_INT 500
 335: PUSH
 336: EMPTY
 337: LIST
 338: LIST
 339: PUSH
 340: EMPTY
 341: LIST
 342: LIST
 343: PUSH
 344: EMPTY
 345: LIST
 346: LIST
 347: PPUSH
 348: CALL_OW 69
 352: ST_TO_ADDR
// if not filter then
 353: LD_VAR 0 2
 357: NOT
 358: IFFALSE 362
// exit ;
 360: GO 391
// for i in filter do
 362: LD_ADDR_VAR 0 1
 366: PUSH
 367: LD_VAR 0 2
 371: PUSH
 372: FOR_IN
 373: IFFALSE 389
// SetLives ( i , 1000 ) ;
 375: LD_VAR 0 1
 379: PPUSH
 380: LD_INT 1000
 382: PPUSH
 383: CALL_OW 234
 387: GO 372
 389: POP
 390: POP
// end ;
 391: PPOPN 2
 393: END
// every 0 0$1 trigger kill_counter >= 20 do
 394: LD_EXP 8
 398: PUSH
 399: LD_INT 20
 401: GREATEREQUAL
 402: IFFALSE 414
 404: GO 406
 406: DISABLE
// SetAchievement ( ACH_HITMAN ) ;
 407: LD_STRING ACH_HITMAN
 409: PPUSH
 410: CALL_OW 543
 414: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] ] ) >= 3 do
 415: LD_INT 22
 417: PUSH
 418: LD_INT 1
 420: PUSH
 421: EMPTY
 422: LIST
 423: LIST
 424: PUSH
 425: LD_INT 23
 427: PUSH
 428: LD_INT 3
 430: PUSH
 431: EMPTY
 432: LIST
 433: LIST
 434: PUSH
 435: LD_INT 21
 437: PUSH
 438: LD_INT 2
 440: PUSH
 441: EMPTY
 442: LIST
 443: LIST
 444: PUSH
 445: EMPTY
 446: LIST
 447: LIST
 448: LIST
 449: PPUSH
 450: CALL_OW 69
 454: PUSH
 455: LD_INT 3
 457: GREATEREQUAL
 458: IFFALSE 470
 460: GO 462
 462: DISABLE
// SetAchievement ( ACH_TANKACE ) ;
 463: LD_STRING ACH_TANKACE
 465: PPUSH
 466: CALL_OW 543
 470: END
// every 0 0$1 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) = 0 do
 471: LD_INT 2
 473: PUSH
 474: LD_INT 30
 476: PUSH
 477: LD_INT 0
 479: PUSH
 480: EMPTY
 481: LIST
 482: LIST
 483: PUSH
 484: LD_INT 30
 486: PUSH
 487: LD_INT 1
 489: PUSH
 490: EMPTY
 491: LIST
 492: LIST
 493: PUSH
 494: EMPTY
 495: LIST
 496: LIST
 497: LIST
 498: PPUSH
 499: CALL_OW 69
 503: PUSH
 504: LD_INT 0
 506: EQUAL
 507: IFFALSE 519
 509: GO 511
 511: DISABLE
// SetAchievement ( ACH_COMMANDO ) ; end_of_file
 512: LD_STRING ACH_COMMANDO
 514: PPUSH
 515: CALL_OW 543
 519: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 520: LD_INT 0
 522: PPUSH
// uc_side := side ;
 523: LD_ADDR_OWVAR 20
 527: PUSH
 528: LD_VAR 0 1
 532: ST_TO_ADDR
// uc_nation := nation ;
 533: LD_ADDR_OWVAR 21
 537: PUSH
 538: LD_VAR 0 2
 542: ST_TO_ADDR
// vc_chassis := chassis ;
 543: LD_ADDR_OWVAR 37
 547: PUSH
 548: LD_VAR 0 3
 552: ST_TO_ADDR
// vc_engine := engine ;
 553: LD_ADDR_OWVAR 39
 557: PUSH
 558: LD_VAR 0 4
 562: ST_TO_ADDR
// vc_control := control ;
 563: LD_ADDR_OWVAR 38
 567: PUSH
 568: LD_VAR 0 5
 572: ST_TO_ADDR
// vc_weapon := weapon ;
 573: LD_ADDR_OWVAR 40
 577: PUSH
 578: LD_VAR 0 6
 582: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 583: LD_ADDR_OWVAR 41
 587: PUSH
 588: LD_VAR 0 7
 592: ST_TO_ADDR
// result := CreateVehicle ;
 593: LD_ADDR_VAR 0 8
 597: PUSH
 598: CALL_OW 45
 602: ST_TO_ADDR
// end ;
 603: LD_VAR 0 8
 607: RET
// export function GetRandom ( sex ) ; var i , filter ; begin
 608: LD_INT 0
 610: PPUSH
 611: PPUSH
 612: PPUSH
// filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam ] ;
 613: LD_ADDR_VAR 0 4
 617: PUSH
 618: LD_INT 22
 620: PUSH
 621: LD_INT 1
 623: PUSH
 624: EMPTY
 625: LIST
 626: LIST
 627: PUSH
 628: LD_INT 21
 630: PUSH
 631: LD_INT 1
 633: PUSH
 634: EMPTY
 635: LIST
 636: LIST
 637: PUSH
 638: LD_INT 50
 640: PUSH
 641: EMPTY
 642: LIST
 643: PUSH
 644: EMPTY
 645: LIST
 646: LIST
 647: LIST
 648: PPUSH
 649: CALL_OW 69
 653: PUSH
 654: LD_EXP 9
 658: PUSH
 659: LD_EXP 10
 663: PUSH
 664: LD_EXP 11
 668: PUSH
 669: LD_EXP 12
 673: PUSH
 674: LD_EXP 13
 678: PUSH
 679: LD_EXP 14
 683: PUSH
 684: LD_EXP 15
 688: PUSH
 689: LD_EXP 16
 693: PUSH
 694: LD_EXP 18
 698: PUSH
 699: LD_EXP 17
 703: PUSH
 704: EMPTY
 705: LIST
 706: LIST
 707: LIST
 708: LIST
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: LIST
 714: LIST
 715: DIFF
 716: ST_TO_ADDR
// if not filter then
 717: LD_VAR 0 4
 721: NOT
 722: IFFALSE 726
// exit ;
 724: GO 753
// result := UnitFilter ( filter , [ f_sex , sex ] ) ;
 726: LD_ADDR_VAR 0 2
 730: PUSH
 731: LD_VAR 0 4
 735: PPUSH
 736: LD_INT 26
 738: PUSH
 739: LD_VAR 0 1
 743: PUSH
 744: EMPTY
 745: LIST
 746: LIST
 747: PPUSH
 748: CALL_OW 72
 752: ST_TO_ADDR
// end ;
 753: LD_VAR 0 2
 757: RET
// export function SayX ( units , ident ) ; var i ; begin
 758: LD_INT 0
 760: PPUSH
 761: PPUSH
// result := false ;
 762: LD_ADDR_VAR 0 3
 766: PUSH
 767: LD_INT 0
 769: ST_TO_ADDR
// if not units then
 770: LD_VAR 0 1
 774: NOT
 775: IFFALSE 779
// exit ;
 777: GO 833
// for i in units do
 779: LD_ADDR_VAR 0 4
 783: PUSH
 784: LD_VAR 0 1
 788: PUSH
 789: FOR_IN
 790: IFFALSE 831
// if IsOk ( i ) then
 792: LD_VAR 0 4
 796: PPUSH
 797: CALL_OW 302
 801: IFFALSE 829
// begin Say ( i , ident ) ;
 803: LD_VAR 0 4
 807: PPUSH
 808: LD_VAR 0 2
 812: PPUSH
 813: CALL_OW 88
// result := i ;
 817: LD_ADDR_VAR 0 3
 821: PUSH
 822: LD_VAR 0 4
 826: ST_TO_ADDR
// break ;
 827: GO 831
// end ;
 829: GO 789
 831: POP
 832: POP
// end ;
 833: LD_VAR 0 3
 837: RET
// export function GoToAnotherTower ( un , b , x , y ) ; var i , filter , barracks , side ; begin
 838: LD_INT 0
 840: PPUSH
 841: PPUSH
 842: PPUSH
 843: PPUSH
 844: PPUSH
// if not un or not IsOk ( un ) then
 845: LD_VAR 0 1
 849: NOT
 850: PUSH
 851: LD_VAR 0 1
 855: PPUSH
 856: CALL_OW 302
 860: NOT
 861: OR
 862: IFFALSE 866
// exit ;
 864: GO 1173
// side := GetSide ( un ) ;
 866: LD_ADDR_VAR 0 9
 870: PUSH
 871: LD_VAR 0 1
 875: PPUSH
 876: CALL_OW 255
 880: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_not , [ f_tag , 7 ] ] , [ f_ok ] , [ f_empty ] ] ) diff b ;
 881: LD_ADDR_VAR 0 7
 885: PUSH
 886: LD_INT 22
 888: PUSH
 889: LD_VAR 0 9
 893: PUSH
 894: EMPTY
 895: LIST
 896: LIST
 897: PUSH
 898: LD_INT 30
 900: PUSH
 901: LD_INT 32
 903: PUSH
 904: EMPTY
 905: LIST
 906: LIST
 907: PUSH
 908: LD_INT 3
 910: PUSH
 911: LD_INT 120
 913: PUSH
 914: LD_INT 7
 916: PUSH
 917: EMPTY
 918: LIST
 919: LIST
 920: PUSH
 921: EMPTY
 922: LIST
 923: LIST
 924: PUSH
 925: LD_INT 50
 927: PUSH
 928: EMPTY
 929: LIST
 930: PUSH
 931: LD_INT 58
 933: PUSH
 934: EMPTY
 935: LIST
 936: PUSH
 937: EMPTY
 938: LIST
 939: LIST
 940: LIST
 941: LIST
 942: LIST
 943: PPUSH
 944: CALL_OW 69
 948: PUSH
 949: LD_VAR 0 2
 953: DIFF
 954: ST_TO_ADDR
// barracks := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_barracks ] ] ) ;
 955: LD_ADDR_VAR 0 8
 959: PUSH
 960: LD_INT 22
 962: PUSH
 963: LD_VAR 0 9
 967: PUSH
 968: EMPTY
 969: LIST
 970: LIST
 971: PUSH
 972: LD_INT 30
 974: PUSH
 975: LD_INT 5
 977: PUSH
 978: EMPTY
 979: LIST
 980: LIST
 981: PUSH
 982: EMPTY
 983: LIST
 984: LIST
 985: PPUSH
 986: CALL_OW 69
 990: ST_TO_ADDR
// if not filter then
 991: LD_VAR 0 7
 995: NOT
 996: IFFALSE 1086
// begin if barracks then
 998: LD_VAR 0 8
1002: IFFALSE 1065
// for i in barracks do
1004: LD_ADDR_VAR 0 6
1008: PUSH
1009: LD_VAR 0 8
1013: PUSH
1014: FOR_IN
1015: IFFALSE 1063
// begin if UnitsInside ( i ) < 6 and IsOk ( i ) then
1017: LD_VAR 0 6
1021: PPUSH
1022: CALL_OW 313
1026: PUSH
1027: LD_INT 6
1029: LESS
1030: PUSH
1031: LD_VAR 0 6
1035: PPUSH
1036: CALL_OW 302
1040: AND
1041: IFFALSE 1061
// begin ComEnterUnit ( un , i ) ;
1043: LD_VAR 0 1
1047: PPUSH
1048: LD_VAR 0 6
1052: PPUSH
1053: CALL_OW 120
// exit ;
1057: POP
1058: POP
1059: GO 1173
// end ; end ;
1061: GO 1014
1063: POP
1064: POP
// ComMoveXY ( un , x , y ) ;
1065: LD_VAR 0 1
1069: PPUSH
1070: LD_VAR 0 3
1074: PPUSH
1075: LD_VAR 0 4
1079: PPUSH
1080: CALL_OW 111
// end else
1084: GO 1173
// begin filter := SortByDistanceUnit ( un , filter , true , true ) ;
1086: LD_ADDR_VAR 0 7
1090: PUSH
1091: LD_VAR 0 1
1095: PPUSH
1096: LD_VAR 0 7
1100: PPUSH
1101: LD_INT 1
1103: PPUSH
1104: LD_INT 1
1106: PPUSH
1107: CALL 37686 0 4
1111: ST_TO_ADDR
// if filter then
1112: LD_VAR 0 7
1116: IFFALSE 1154
// begin SetTag ( filter [ 1 ] , 7 ) ;
1118: LD_VAR 0 7
1122: PUSH
1123: LD_INT 1
1125: ARRAY
1126: PPUSH
1127: LD_INT 7
1129: PPUSH
1130: CALL_OW 109
// ComEnterUnit ( un , filter [ 1 ] ) ;
1134: LD_VAR 0 1
1138: PPUSH
1139: LD_VAR 0 7
1143: PUSH
1144: LD_INT 1
1146: ARRAY
1147: PPUSH
1148: CALL_OW 120
// end else
1152: GO 1173
// ComMoveXY ( un , x , y ) ;
1154: LD_VAR 0 1
1158: PPUSH
1159: LD_VAR 0 3
1163: PPUSH
1164: LD_VAR 0 4
1168: PPUSH
1169: CALL_OW 111
// end ; end ;
1173: LD_VAR 0 5
1177: RET
// export function BaseNeedEnergy ( base ) ; var i , tmp ; begin
1178: LD_INT 0
1180: PPUSH
1181: PPUSH
1182: PPUSH
// if not base then
1183: LD_VAR 0 1
1187: NOT
1188: IFFALSE 1192
// exit ;
1190: GO 1250
// tmp := GetEnergy ( GetBase ( base ) ) ;
1192: LD_ADDR_VAR 0 4
1196: PUSH
1197: LD_VAR 0 1
1201: PPUSH
1202: CALL_OW 274
1206: PPUSH
1207: CALL_OW 278
1211: ST_TO_ADDR
// if tmp [ 1 ] > tmp [ 4 ] then
1212: LD_VAR 0 4
1216: PUSH
1217: LD_INT 1
1219: ARRAY
1220: PUSH
1221: LD_VAR 0 4
1225: PUSH
1226: LD_INT 4
1228: ARRAY
1229: GREATER
1230: IFFALSE 1242
// result := true else
1232: LD_ADDR_VAR 0 2
1236: PUSH
1237: LD_INT 1
1239: ST_TO_ADDR
1240: GO 1250
// result := false ;
1242: LD_ADDR_VAR 0 2
1246: PUSH
1247: LD_INT 0
1249: ST_TO_ADDR
// end ;
1250: LD_VAR 0 2
1254: RET
// export function FilterPeople ( side ) ; begin
1255: LD_INT 0
1257: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] ] ) ;
1258: LD_ADDR_VAR 0 2
1262: PUSH
1263: LD_INT 22
1265: PUSH
1266: LD_VAR 0 1
1270: PUSH
1271: EMPTY
1272: LIST
1273: LIST
1274: PUSH
1275: LD_INT 21
1277: PUSH
1278: LD_INT 1
1280: PUSH
1281: EMPTY
1282: LIST
1283: LIST
1284: PUSH
1285: EMPTY
1286: LIST
1287: LIST
1288: PPUSH
1289: CALL_OW 69
1293: ST_TO_ADDR
// end ;
1294: LD_VAR 0 2
1298: RET
// export function FilterDrivers ( side ) ; begin
1299: LD_INT 0
1301: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_outside ] ] ] ) ;
1302: LD_ADDR_VAR 0 2
1306: PUSH
1307: LD_INT 22
1309: PUSH
1310: LD_VAR 0 1
1314: PUSH
1315: EMPTY
1316: LIST
1317: LIST
1318: PUSH
1319: LD_INT 3
1321: PUSH
1322: LD_INT 56
1324: PUSH
1325: EMPTY
1326: LIST
1327: PUSH
1328: EMPTY
1329: LIST
1330: LIST
1331: PUSH
1332: EMPTY
1333: LIST
1334: LIST
1335: PPUSH
1336: CALL_OW 69
1340: ST_TO_ADDR
// end ;
1341: LD_VAR 0 2
1345: RET
// export function FilterPeopleArea ( side , area ) ; begin
1346: LD_INT 0
1348: PPUSH
// result := FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ;
1349: LD_ADDR_VAR 0 3
1353: PUSH
1354: LD_VAR 0 2
1358: PPUSH
1359: LD_INT 22
1361: PUSH
1362: LD_INT 1
1364: PUSH
1365: EMPTY
1366: LIST
1367: LIST
1368: PUSH
1369: LD_INT 21
1371: PUSH
1372: LD_INT 1
1374: PUSH
1375: EMPTY
1376: LIST
1377: LIST
1378: PUSH
1379: EMPTY
1380: LIST
1381: LIST
1382: PPUSH
1383: CALL_OW 70
1387: ST_TO_ADDR
// end ;
1388: LD_VAR 0 3
1392: RET
// export function FilterDriversArea ( side , area ) ; var i , tmp ; begin
1393: LD_INT 0
1395: PPUSH
1396: PPUSH
1397: PPUSH
// tmp := FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) ;
1398: LD_ADDR_VAR 0 5
1402: PUSH
1403: LD_VAR 0 2
1407: PPUSH
1408: LD_INT 22
1410: PUSH
1411: LD_INT 1
1413: PUSH
1414: EMPTY
1415: LIST
1416: LIST
1417: PUSH
1418: LD_INT 21
1420: PUSH
1421: LD_INT 2
1423: PUSH
1424: EMPTY
1425: LIST
1426: LIST
1427: PUSH
1428: LD_INT 3
1430: PUSH
1431: LD_INT 58
1433: PUSH
1434: EMPTY
1435: LIST
1436: PUSH
1437: EMPTY
1438: LIST
1439: LIST
1440: PUSH
1441: EMPTY
1442: LIST
1443: LIST
1444: LIST
1445: PPUSH
1446: CALL_OW 70
1450: ST_TO_ADDR
// result := [ ] ;
1451: LD_ADDR_VAR 0 3
1455: PUSH
1456: EMPTY
1457: ST_TO_ADDR
// if not tmp then
1458: LD_VAR 0 5
1462: NOT
1463: IFFALSE 1467
// exit ;
1465: GO 1519
// for i in tmp do
1467: LD_ADDR_VAR 0 4
1471: PUSH
1472: LD_VAR 0 5
1476: PUSH
1477: FOR_IN
1478: IFFALSE 1503
// result := result union IsDrivenBy ( i ) ;
1480: LD_ADDR_VAR 0 3
1484: PUSH
1485: LD_VAR 0 3
1489: PUSH
1490: LD_VAR 0 4
1494: PPUSH
1495: CALL_OW 311
1499: UNION
1500: ST_TO_ADDR
1501: GO 1477
1503: POP
1504: POP
// result := result diff 0 ;
1505: LD_ADDR_VAR 0 3
1509: PUSH
1510: LD_VAR 0 3
1514: PUSH
1515: LD_INT 0
1517: DIFF
1518: ST_TO_ADDR
// end ;
1519: LD_VAR 0 3
1523: RET
// export function FilterBuildings ( side ) ; begin
1524: LD_INT 0
1526: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
1527: LD_ADDR_VAR 0 2
1531: PUSH
1532: LD_INT 22
1534: PUSH
1535: LD_VAR 0 1
1539: PUSH
1540: EMPTY
1541: LIST
1542: LIST
1543: PUSH
1544: LD_INT 21
1546: PUSH
1547: LD_INT 3
1549: PUSH
1550: EMPTY
1551: LIST
1552: LIST
1553: PUSH
1554: EMPTY
1555: LIST
1556: LIST
1557: PPUSH
1558: CALL_OW 69
1562: ST_TO_ADDR
// end ;
1563: LD_VAR 0 2
1567: RET
// export function CreateNature ; var i , animal , nat_area ; begin
1568: LD_INT 0
1570: PPUSH
1571: PPUSH
1572: PPUSH
1573: PPUSH
// uc_side = 0 ;
1574: LD_ADDR_OWVAR 20
1578: PUSH
1579: LD_INT 0
1581: ST_TO_ADDR
// uc_nation = 0 ;
1582: LD_ADDR_OWVAR 21
1586: PUSH
1587: LD_INT 0
1589: ST_TO_ADDR
// nat_area := wildArea ;
1590: LD_ADDR_VAR 0 4
1594: PUSH
1595: LD_INT 3
1597: ST_TO_ADDR
// InitHc ;
1598: CALL_OW 19
// for i = 1 to 4 do
1602: LD_ADDR_VAR 0 2
1606: PUSH
1607: DOUBLE
1608: LD_INT 1
1610: DEC
1611: ST_TO_ADDR
1612: LD_INT 4
1614: PUSH
1615: FOR_TO
1616: IFFALSE 1671
// begin hc_class = 18 ;
1618: LD_ADDR_OWVAR 28
1622: PUSH
1623: LD_INT 18
1625: ST_TO_ADDR
// hc_gallery =  ;
1626: LD_ADDR_OWVAR 33
1630: PUSH
1631: LD_STRING 
1633: ST_TO_ADDR
// hc_face_number = 1 ;
1634: LD_ADDR_OWVAR 34
1638: PUSH
1639: LD_INT 1
1641: ST_TO_ADDR
// animal := CreateHuman ;
1642: LD_ADDR_VAR 0 3
1646: PUSH
1647: CALL_OW 44
1651: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
1652: LD_VAR 0 3
1656: PPUSH
1657: LD_VAR 0 4
1661: PPUSH
1662: LD_INT 0
1664: PPUSH
1665: CALL_OW 49
// end ;
1669: GO 1615
1671: POP
1672: POP
// for i = 1 to 6 do
1673: LD_ADDR_VAR 0 2
1677: PUSH
1678: DOUBLE
1679: LD_INT 1
1681: DEC
1682: ST_TO_ADDR
1683: LD_INT 6
1685: PUSH
1686: FOR_TO
1687: IFFALSE 1758
// begin hc_class = class_tiger ;
1689: LD_ADDR_OWVAR 28
1693: PUSH
1694: LD_INT 14
1696: ST_TO_ADDR
// hc_gallery =  ;
1697: LD_ADDR_OWVAR 33
1701: PUSH
1702: LD_STRING 
1704: ST_TO_ADDR
// hc_agressivity = Rand ( 0 , 10 ) ;
1705: LD_ADDR_OWVAR 35
1709: PUSH
1710: LD_INT 0
1712: PPUSH
1713: LD_INT 10
1715: PPUSH
1716: CALL_OW 12
1720: ST_TO_ADDR
// hc_face_number = 3 ;
1721: LD_ADDR_OWVAR 34
1725: PUSH
1726: LD_INT 3
1728: ST_TO_ADDR
// animal := CreateHuman ;
1729: LD_ADDR_VAR 0 3
1733: PUSH
1734: CALL_OW 44
1738: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
1739: LD_VAR 0 3
1743: PPUSH
1744: LD_VAR 0 4
1748: PPUSH
1749: LD_INT 0
1751: PPUSH
1752: CALL_OW 49
// end ;
1756: GO 1686
1758: POP
1759: POP
// for i = 1 to 2 do
1760: LD_ADDR_VAR 0 2
1764: PUSH
1765: DOUBLE
1766: LD_INT 1
1768: DEC
1769: ST_TO_ADDR
1770: LD_INT 2
1772: PUSH
1773: FOR_TO
1774: IFFALSE 1837
// begin hc_class = 21 ;
1776: LD_ADDR_OWVAR 28
1780: PUSH
1781: LD_INT 21
1783: ST_TO_ADDR
// hc_gallery =  ;
1784: LD_ADDR_OWVAR 33
1788: PUSH
1789: LD_STRING 
1791: ST_TO_ADDR
// hc_agressivity = 0 ;
1792: LD_ADDR_OWVAR 35
1796: PUSH
1797: LD_INT 0
1799: ST_TO_ADDR
// hc_face_number = 5 ;
1800: LD_ADDR_OWVAR 34
1804: PUSH
1805: LD_INT 5
1807: ST_TO_ADDR
// animal := CreateHuman ;
1808: LD_ADDR_VAR 0 3
1812: PUSH
1813: CALL_OW 44
1817: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
1818: LD_VAR 0 3
1822: PPUSH
1823: LD_VAR 0 4
1827: PPUSH
1828: LD_INT 0
1830: PPUSH
1831: CALL_OW 49
// end ;
1835: GO 1773
1837: POP
1838: POP
// for i = 1 to 6 do
1839: LD_ADDR_VAR 0 2
1843: PUSH
1844: DOUBLE
1845: LD_INT 1
1847: DEC
1848: ST_TO_ADDR
1849: LD_INT 6
1851: PUSH
1852: FOR_TO
1853: IFFALSE 1908
// begin hc_class = 13 ;
1855: LD_ADDR_OWVAR 28
1859: PUSH
1860: LD_INT 13
1862: ST_TO_ADDR
// hc_gallery =  ;
1863: LD_ADDR_OWVAR 33
1867: PUSH
1868: LD_STRING 
1870: ST_TO_ADDR
// hc_face_number = 4 ;
1871: LD_ADDR_OWVAR 34
1875: PUSH
1876: LD_INT 4
1878: ST_TO_ADDR
// animal := CreateHuman ;
1879: LD_ADDR_VAR 0 3
1883: PUSH
1884: CALL_OW 44
1888: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
1889: LD_VAR 0 3
1893: PPUSH
1894: LD_VAR 0 4
1898: PPUSH
1899: LD_INT 0
1901: PPUSH
1902: CALL_OW 49
// end ;
1906: GO 1852
1908: POP
1909: POP
// for i = 1 to 2 do
1910: LD_ADDR_VAR 0 2
1914: PUSH
1915: DOUBLE
1916: LD_INT 1
1918: DEC
1919: ST_TO_ADDR
1920: LD_INT 2
1922: PUSH
1923: FOR_TO
1924: IFFALSE 1983
// begin hc_class = 20 ;
1926: LD_ADDR_OWVAR 28
1930: PUSH
1931: LD_INT 20
1933: ST_TO_ADDR
// hc_gallery =  ;
1934: LD_ADDR_OWVAR 33
1938: PUSH
1939: LD_STRING 
1941: ST_TO_ADDR
// hc_face_number = 2 ;
1942: LD_ADDR_OWVAR 34
1946: PUSH
1947: LD_INT 2
1949: ST_TO_ADDR
// animal := CreateHuman ;
1950: LD_ADDR_VAR 0 3
1954: PUSH
1955: CALL_OW 44
1959: ST_TO_ADDR
// PlaceUnitXYR ( animal , 101 , 37 , 3 , false ) ;
1960: LD_VAR 0 3
1964: PPUSH
1965: LD_INT 101
1967: PPUSH
1968: LD_INT 37
1970: PPUSH
1971: LD_INT 3
1973: PPUSH
1974: LD_INT 0
1976: PPUSH
1977: CALL_OW 50
// end ;
1981: GO 1923
1983: POP
1984: POP
// for i = 1 to 1 do
1985: LD_ADDR_VAR 0 2
1989: PUSH
1990: DOUBLE
1991: LD_INT 1
1993: DEC
1994: ST_TO_ADDR
1995: LD_INT 1
1997: PUSH
1998: FOR_TO
1999: IFFALSE 2046
// begin vc_chassis := 31 ;
2001: LD_ADDR_OWVAR 37
2005: PUSH
2006: LD_INT 31
2008: ST_TO_ADDR
// vc_control := control_rider ;
2009: LD_ADDR_OWVAR 38
2013: PUSH
2014: LD_INT 4
2016: ST_TO_ADDR
// animal := CreateVehicle ;
2017: LD_ADDR_VAR 0 3
2021: PUSH
2022: CALL_OW 45
2026: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
2027: LD_VAR 0 3
2031: PPUSH
2032: LD_VAR 0 4
2036: PPUSH
2037: LD_INT 0
2039: PPUSH
2040: CALL_OW 49
// end ;
2044: GO 1998
2046: POP
2047: POP
// end ;
2048: LD_VAR 0 1
2052: RET
// export function NearbyTowerHasEnergy ( unit ) ; var i , tmp , energy ; begin
2053: LD_INT 0
2055: PPUSH
2056: PPUSH
2057: PPUSH
2058: PPUSH
// result := [ ] ;
2059: LD_ADDR_VAR 0 2
2063: PUSH
2064: EMPTY
2065: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( unit ) ] , [ f_dist , unit , 15 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) ;
2066: LD_ADDR_VAR 0 4
2070: PUSH
2071: LD_INT 81
2073: PUSH
2074: LD_VAR 0 1
2078: PPUSH
2079: CALL_OW 255
2083: PUSH
2084: EMPTY
2085: LIST
2086: LIST
2087: PUSH
2088: LD_INT 91
2090: PUSH
2091: LD_VAR 0 1
2095: PUSH
2096: LD_INT 15
2098: PUSH
2099: EMPTY
2100: LIST
2101: LIST
2102: LIST
2103: PUSH
2104: LD_INT 2
2106: PUSH
2107: LD_INT 30
2109: PUSH
2110: LD_INT 32
2112: PUSH
2113: EMPTY
2114: LIST
2115: LIST
2116: PUSH
2117: LD_INT 30
2119: PUSH
2120: LD_INT 33
2122: PUSH
2123: EMPTY
2124: LIST
2125: LIST
2126: PUSH
2127: EMPTY
2128: LIST
2129: LIST
2130: LIST
2131: PUSH
2132: EMPTY
2133: LIST
2134: LIST
2135: LIST
2136: PPUSH
2137: CALL_OW 69
2141: ST_TO_ADDR
// if not tmp then
2142: LD_VAR 0 4
2146: NOT
2147: IFFALSE 2151
// exit ;
2149: GO 2220
// for i in tmp do
2151: LD_ADDR_VAR 0 3
2155: PUSH
2156: LD_VAR 0 4
2160: PUSH
2161: FOR_IN
2162: IFFALSE 2218
// begin energy := GetEnergy ( GetBase ( i ) ) ;
2164: LD_ADDR_VAR 0 5
2168: PUSH
2169: LD_VAR 0 3
2173: PPUSH
2174: CALL_OW 274
2178: PPUSH
2179: CALL_OW 278
2183: ST_TO_ADDR
// if energy [ 4 ] > energy [ 1 ] then
2184: LD_VAR 0 5
2188: PUSH
2189: LD_INT 4
2191: ARRAY
2192: PUSH
2193: LD_VAR 0 5
2197: PUSH
2198: LD_INT 1
2200: ARRAY
2201: GREATER
2202: IFFALSE 2216
// begin result := i ;
2204: LD_ADDR_VAR 0 2
2208: PUSH
2209: LD_VAR 0 3
2213: ST_TO_ADDR
// break ;
2214: GO 2218
// end ; end ;
2216: GO 2161
2218: POP
2219: POP
// end ;
2220: LD_VAR 0 2
2224: RET
// export function GetTurretWeaponBase ( tower ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
2225: LD_INT 0
2227: PPUSH
2228: PPUSH
2229: PPUSH
2230: PPUSH
2231: PPUSH
2232: PPUSH
2233: PPUSH
2234: PPUSH
2235: PPUSH
2236: PPUSH
2237: PPUSH
2238: PPUSH
2239: PPUSH
2240: PPUSH
2241: PPUSH
2242: PPUSH
// result := false ;
2243: LD_ADDR_VAR 0 2
2247: PUSH
2248: LD_INT 0
2250: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
2251: LD_VAR 0 1
2255: NOT
2256: PUSH
2257: LD_VAR 0 1
2261: PPUSH
2262: CALL_OW 266
2266: PUSH
2267: LD_INT 32
2269: PUSH
2270: LD_INT 33
2272: PUSH
2273: EMPTY
2274: LIST
2275: LIST
2276: IN
2277: NOT
2278: OR
2279: IFFALSE 2283
// exit ;
2281: GO 3443
// nat := GetNation ( tower ) ;
2283: LD_ADDR_VAR 0 11
2287: PUSH
2288: LD_VAR 0 1
2292: PPUSH
2293: CALL_OW 248
2297: ST_TO_ADDR
// side := GetSide ( tower ) ;
2298: LD_ADDR_VAR 0 15
2302: PUSH
2303: LD_VAR 0 1
2307: PPUSH
2308: CALL_OW 255
2312: ST_TO_ADDR
// x := GetX ( tower ) ;
2313: LD_ADDR_VAR 0 9
2317: PUSH
2318: LD_VAR 0 1
2322: PPUSH
2323: CALL_OW 250
2327: ST_TO_ADDR
// y := GetY ( tower ) ;
2328: LD_ADDR_VAR 0 10
2332: PUSH
2333: LD_VAR 0 1
2337: PPUSH
2338: CALL_OW 251
2342: ST_TO_ADDR
// if not x or not y then
2343: LD_VAR 0 9
2347: NOT
2348: PUSH
2349: LD_VAR 0 10
2353: NOT
2354: OR
2355: IFFALSE 2359
// exit ;
2357: GO 3443
// weapon := 0 ;
2359: LD_ADDR_VAR 0 17
2363: PUSH
2364: LD_INT 0
2366: ST_TO_ADDR
// fac_list := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun ] ;
2367: LD_ADDR_VAR 0 16
2371: PUSH
2372: LD_INT 42
2374: PUSH
2375: LD_INT 43
2377: PUSH
2378: LD_INT 44
2380: PUSH
2381: LD_INT 46
2383: PUSH
2384: EMPTY
2385: LIST
2386: LIST
2387: LIST
2388: LIST
2389: ST_TO_ADDR
// if not fac_list then
2390: LD_VAR 0 16
2394: NOT
2395: IFFALSE 2399
// exit ;
2397: GO 3443
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
2399: LD_ADDR_VAR 0 4
2403: PUSH
2404: LD_INT 4
2406: PUSH
2407: LD_INT 5
2409: PUSH
2410: LD_INT 9
2412: PUSH
2413: LD_INT 10
2415: PUSH
2416: LD_INT 6
2418: PUSH
2419: LD_INT 7
2421: PUSH
2422: LD_INT 11
2424: PUSH
2425: EMPTY
2426: LIST
2427: LIST
2428: LIST
2429: LIST
2430: LIST
2431: LIST
2432: LIST
2433: PUSH
2434: LD_INT 27
2436: PUSH
2437: LD_INT 28
2439: PUSH
2440: LD_INT 26
2442: PUSH
2443: LD_INT 30
2445: PUSH
2446: EMPTY
2447: LIST
2448: LIST
2449: LIST
2450: LIST
2451: PUSH
2452: LD_INT 43
2454: PUSH
2455: LD_INT 44
2457: PUSH
2458: LD_INT 46
2460: PUSH
2461: LD_INT 45
2463: PUSH
2464: LD_INT 47
2466: PUSH
2467: LD_INT 49
2469: PUSH
2470: EMPTY
2471: LIST
2472: LIST
2473: LIST
2474: LIST
2475: LIST
2476: LIST
2477: PUSH
2478: EMPTY
2479: LIST
2480: LIST
2481: LIST
2482: PUSH
2483: LD_VAR 0 11
2487: ARRAY
2488: ST_TO_ADDR
// for i in list do
2489: LD_ADDR_VAR 0 7
2493: PUSH
2494: LD_VAR 0 4
2498: PUSH
2499: FOR_IN
2500: IFFALSE 2533
// if not i in fac_list then
2502: LD_VAR 0 7
2506: PUSH
2507: LD_VAR 0 16
2511: IN
2512: NOT
2513: IFFALSE 2531
// list := list diff i ;
2515: LD_ADDR_VAR 0 4
2519: PUSH
2520: LD_VAR 0 4
2524: PUSH
2525: LD_VAR 0 7
2529: DIFF
2530: ST_TO_ADDR
2531: GO 2499
2533: POP
2534: POP
// if not list then
2535: LD_VAR 0 4
2539: NOT
2540: IFFALSE 2544
// exit ;
2542: GO 3443
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
2544: LD_VAR 0 11
2548: PUSH
2549: LD_INT 3
2551: EQUAL
2552: PUSH
2553: LD_INT 49
2555: PUSH
2556: LD_VAR 0 4
2560: IN
2561: AND
2562: PUSH
2563: LD_INT 31
2565: PPUSH
2566: LD_VAR 0 15
2570: PPUSH
2571: CALL_OW 321
2575: PUSH
2576: LD_INT 2
2578: EQUAL
2579: AND
2580: IFFALSE 2640
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
2582: LD_INT 22
2584: PUSH
2585: LD_VAR 0 15
2589: PUSH
2590: EMPTY
2591: LIST
2592: LIST
2593: PUSH
2594: LD_INT 35
2596: PUSH
2597: LD_INT 49
2599: PUSH
2600: EMPTY
2601: LIST
2602: LIST
2603: PUSH
2604: LD_INT 91
2606: PUSH
2607: LD_VAR 0 1
2611: PUSH
2612: LD_INT 10
2614: PUSH
2615: EMPTY
2616: LIST
2617: LIST
2618: LIST
2619: PUSH
2620: EMPTY
2621: LIST
2622: LIST
2623: LIST
2624: PPUSH
2625: CALL_OW 69
2629: NOT
2630: IFFALSE 2640
// weapon := ru_time_lapser ;
2632: LD_ADDR_VAR 0 17
2636: PUSH
2637: LD_INT 49
2639: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
2640: LD_VAR 0 11
2644: PUSH
2645: LD_INT 1
2647: PUSH
2648: LD_INT 2
2650: PUSH
2651: EMPTY
2652: LIST
2653: LIST
2654: IN
2655: PUSH
2656: LD_INT 11
2658: PUSH
2659: LD_VAR 0 4
2663: IN
2664: PUSH
2665: LD_INT 30
2667: PUSH
2668: LD_VAR 0 4
2672: IN
2673: OR
2674: AND
2675: PUSH
2676: LD_INT 6
2678: PPUSH
2679: LD_VAR 0 15
2683: PPUSH
2684: CALL_OW 321
2688: PUSH
2689: LD_INT 2
2691: EQUAL
2692: AND
2693: IFFALSE 2858
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
2695: LD_INT 22
2697: PUSH
2698: LD_VAR 0 15
2702: PUSH
2703: EMPTY
2704: LIST
2705: LIST
2706: PUSH
2707: LD_INT 2
2709: PUSH
2710: LD_INT 35
2712: PUSH
2713: LD_INT 11
2715: PUSH
2716: EMPTY
2717: LIST
2718: LIST
2719: PUSH
2720: LD_INT 35
2722: PUSH
2723: LD_INT 30
2725: PUSH
2726: EMPTY
2727: LIST
2728: LIST
2729: PUSH
2730: EMPTY
2731: LIST
2732: LIST
2733: LIST
2734: PUSH
2735: LD_INT 91
2737: PUSH
2738: LD_VAR 0 1
2742: PUSH
2743: LD_INT 18
2745: PUSH
2746: EMPTY
2747: LIST
2748: LIST
2749: LIST
2750: PUSH
2751: EMPTY
2752: LIST
2753: LIST
2754: LIST
2755: PPUSH
2756: CALL_OW 69
2760: NOT
2761: PUSH
2762: LD_INT 22
2764: PUSH
2765: LD_VAR 0 15
2769: PUSH
2770: EMPTY
2771: LIST
2772: LIST
2773: PUSH
2774: LD_INT 2
2776: PUSH
2777: LD_INT 30
2779: PUSH
2780: LD_INT 32
2782: PUSH
2783: EMPTY
2784: LIST
2785: LIST
2786: PUSH
2787: LD_INT 30
2789: PUSH
2790: LD_INT 33
2792: PUSH
2793: EMPTY
2794: LIST
2795: LIST
2796: PUSH
2797: EMPTY
2798: LIST
2799: LIST
2800: LIST
2801: PUSH
2802: LD_INT 91
2804: PUSH
2805: LD_VAR 0 1
2809: PUSH
2810: LD_INT 12
2812: PUSH
2813: EMPTY
2814: LIST
2815: LIST
2816: LIST
2817: PUSH
2818: EMPTY
2819: LIST
2820: LIST
2821: LIST
2822: PUSH
2823: EMPTY
2824: LIST
2825: PPUSH
2826: CALL_OW 69
2830: PUSH
2831: LD_INT 2
2833: GREATER
2834: AND
2835: IFFALSE 2858
// weapon := [ us_radar , ar_radar ] [ nat ] ;
2837: LD_ADDR_VAR 0 17
2841: PUSH
2842: LD_INT 11
2844: PUSH
2845: LD_INT 30
2847: PUSH
2848: EMPTY
2849: LIST
2850: LIST
2851: PUSH
2852: LD_VAR 0 11
2856: ARRAY
2857: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
2858: LD_VAR 0 17
2862: NOT
2863: PUSH
2864: LD_INT 40
2866: PPUSH
2867: LD_VAR 0 15
2871: PPUSH
2872: CALL_OW 321
2876: PUSH
2877: LD_INT 2
2879: EQUAL
2880: AND
2881: PUSH
2882: LD_INT 7
2884: PUSH
2885: LD_VAR 0 4
2889: IN
2890: PUSH
2891: LD_INT 28
2893: PUSH
2894: LD_VAR 0 4
2898: IN
2899: OR
2900: PUSH
2901: LD_INT 45
2903: PUSH
2904: LD_VAR 0 4
2908: IN
2909: OR
2910: AND
2911: IFFALSE 3165
// begin hex := GetHexInfo ( x , y ) ;
2913: LD_ADDR_VAR 0 3
2917: PUSH
2918: LD_VAR 0 9
2922: PPUSH
2923: LD_VAR 0 10
2927: PPUSH
2928: CALL_OW 546
2932: ST_TO_ADDR
// if hex [ 1 ] then
2933: LD_VAR 0 3
2937: PUSH
2938: LD_INT 1
2940: ARRAY
2941: IFFALSE 2945
// exit ;
2943: GO 3443
// height := hex [ 2 ] ;
2945: LD_ADDR_VAR 0 14
2949: PUSH
2950: LD_VAR 0 3
2954: PUSH
2955: LD_INT 2
2957: ARRAY
2958: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
2959: LD_ADDR_VAR 0 13
2963: PUSH
2964: LD_INT 0
2966: PUSH
2967: LD_INT 2
2969: PUSH
2970: LD_INT 3
2972: PUSH
2973: LD_INT 5
2975: PUSH
2976: EMPTY
2977: LIST
2978: LIST
2979: LIST
2980: LIST
2981: ST_TO_ADDR
// for i in tmp do
2982: LD_ADDR_VAR 0 7
2986: PUSH
2987: LD_VAR 0 13
2991: PUSH
2992: FOR_IN
2993: IFFALSE 3163
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
2995: LD_ADDR_VAR 0 8
2999: PUSH
3000: LD_VAR 0 9
3004: PPUSH
3005: LD_VAR 0 7
3009: PPUSH
3010: LD_INT 5
3012: PPUSH
3013: CALL_OW 272
3017: PUSH
3018: LD_VAR 0 10
3022: PPUSH
3023: LD_VAR 0 7
3027: PPUSH
3028: LD_INT 5
3030: PPUSH
3031: CALL_OW 273
3035: PUSH
3036: EMPTY
3037: LIST
3038: LIST
3039: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
3040: LD_VAR 0 8
3044: PUSH
3045: LD_INT 1
3047: ARRAY
3048: PPUSH
3049: LD_VAR 0 8
3053: PUSH
3054: LD_INT 2
3056: ARRAY
3057: PPUSH
3058: CALL_OW 488
3062: IFFALSE 3161
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
3064: LD_ADDR_VAR 0 3
3068: PUSH
3069: LD_VAR 0 8
3073: PUSH
3074: LD_INT 1
3076: ARRAY
3077: PPUSH
3078: LD_VAR 0 8
3082: PUSH
3083: LD_INT 2
3085: ARRAY
3086: PPUSH
3087: CALL_OW 546
3091: ST_TO_ADDR
// if hex [ 1 ] then
3092: LD_VAR 0 3
3096: PUSH
3097: LD_INT 1
3099: ARRAY
3100: IFFALSE 3104
// continue ;
3102: GO 2992
// h := hex [ 2 ] ;
3104: LD_ADDR_VAR 0 12
3108: PUSH
3109: LD_VAR 0 3
3113: PUSH
3114: LD_INT 2
3116: ARRAY
3117: ST_TO_ADDR
// if h + 7 < height then
3118: LD_VAR 0 12
3122: PUSH
3123: LD_INT 7
3125: PLUS
3126: PUSH
3127: LD_VAR 0 14
3131: LESS
3132: IFFALSE 3161
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
3134: LD_ADDR_VAR 0 17
3138: PUSH
3139: LD_INT 7
3141: PUSH
3142: LD_INT 28
3144: PUSH
3145: LD_INT 45
3147: PUSH
3148: EMPTY
3149: LIST
3150: LIST
3151: LIST
3152: PUSH
3153: LD_VAR 0 11
3157: ARRAY
3158: ST_TO_ADDR
// break ;
3159: GO 3163
// end ; end ; end ;
3161: GO 2992
3163: POP
3164: POP
// end ; if not weapon then
3165: LD_VAR 0 17
3169: NOT
3170: IFFALSE 3325
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
3172: LD_ADDR_VAR 0 4
3176: PUSH
3177: LD_VAR 0 4
3181: PUSH
3182: LD_INT 11
3184: PUSH
3185: LD_INT 30
3187: PUSH
3188: LD_INT 49
3190: PUSH
3191: EMPTY
3192: LIST
3193: LIST
3194: LIST
3195: DIFF
3196: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , tower , 6 ] , [ f_not , [ f_bweapon , 0 ] ] ] ) ;
3197: LD_ADDR_VAR 0 13
3201: PUSH
3202: LD_INT 22
3204: PUSH
3205: LD_VAR 0 15
3209: PUSH
3210: EMPTY
3211: LIST
3212: LIST
3213: PUSH
3214: LD_INT 91
3216: PUSH
3217: LD_VAR 0 1
3221: PUSH
3222: LD_INT 6
3224: PUSH
3225: EMPTY
3226: LIST
3227: LIST
3228: LIST
3229: PUSH
3230: LD_INT 3
3232: PUSH
3233: LD_INT 35
3235: PUSH
3236: LD_INT 0
3238: PUSH
3239: EMPTY
3240: LIST
3241: LIST
3242: PUSH
3243: EMPTY
3244: LIST
3245: LIST
3246: PUSH
3247: EMPTY
3248: LIST
3249: LIST
3250: LIST
3251: PPUSH
3252: CALL_OW 69
3256: ST_TO_ADDR
// for i in tmp do
3257: LD_ADDR_VAR 0 7
3261: PUSH
3262: LD_VAR 0 13
3266: PUSH
3267: FOR_IN
3268: IFFALSE 3293
// list := list diff GetBWeapon ( i ) ;
3270: LD_ADDR_VAR 0 4
3274: PUSH
3275: LD_VAR 0 4
3279: PUSH
3280: LD_VAR 0 7
3284: PPUSH
3285: CALL_OW 269
3289: DIFF
3290: ST_TO_ADDR
3291: GO 3267
3293: POP
3294: POP
// if list then
3295: LD_VAR 0 4
3299: IFFALSE 3325
// weapon := list [ rand ( 1 , list ) ] ;
3301: LD_ADDR_VAR 0 17
3305: PUSH
3306: LD_VAR 0 4
3310: PUSH
3311: LD_INT 1
3313: PPUSH
3314: LD_VAR 0 4
3318: PPUSH
3319: CALL_OW 12
3323: ARRAY
3324: ST_TO_ADDR
// end ; if weapon then
3325: LD_VAR 0 17
3329: IFFALSE 3443
// begin tmp := CostOfWeapon ( weapon ) ;
3331: LD_ADDR_VAR 0 13
3335: PUSH
3336: LD_VAR 0 17
3340: PPUSH
3341: CALL_OW 451
3345: ST_TO_ADDR
// j := GetBase ( tower ) ;
3346: LD_ADDR_VAR 0 8
3350: PUSH
3351: LD_VAR 0 1
3355: PPUSH
3356: CALL_OW 274
3360: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
3361: LD_VAR 0 8
3365: PPUSH
3366: LD_INT 1
3368: PPUSH
3369: CALL_OW 275
3373: PUSH
3374: LD_VAR 0 13
3378: PUSH
3379: LD_INT 1
3381: ARRAY
3382: GREATEREQUAL
3383: PUSH
3384: LD_VAR 0 8
3388: PPUSH
3389: LD_INT 2
3391: PPUSH
3392: CALL_OW 275
3396: PUSH
3397: LD_VAR 0 13
3401: PUSH
3402: LD_INT 2
3404: ARRAY
3405: GREATEREQUAL
3406: AND
3407: PUSH
3408: LD_VAR 0 8
3412: PPUSH
3413: LD_INT 3
3415: PPUSH
3416: CALL_OW 275
3420: PUSH
3421: LD_VAR 0 13
3425: PUSH
3426: LD_INT 3
3428: ARRAY
3429: GREATEREQUAL
3430: AND
3431: IFFALSE 3443
// result := weapon ;
3433: LD_ADDR_VAR 0 2
3437: PUSH
3438: LD_VAR 0 17
3442: ST_TO_ADDR
// end ; end ; end_of_file
3443: LD_VAR 0 2
3447: RET
// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Khatam , Kikuchi , Harisson ; export function PrepareAmericans ; var i , team , others , veh , m ; begin
3448: LD_INT 0
3450: PPUSH
3451: PPUSH
3452: PPUSH
3453: PPUSH
3454: PPUSH
3455: PPUSH
// uc_side := 1 ;
3456: LD_ADDR_OWVAR 20
3460: PUSH
3461: LD_INT 1
3463: ST_TO_ADDR
// uc_nation := 1 ;
3464: LD_ADDR_OWVAR 21
3468: PUSH
3469: LD_INT 1
3471: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , mission_prev_prefix ) ;
3472: LD_ADDR_EXP 9
3476: PUSH
3477: LD_STRING JMM
3479: PPUSH
3480: LD_EXP 1
3484: NOT
3485: PPUSH
3486: LD_EXP 2
3490: PPUSH
3491: CALL 32114 0 3
3495: ST_TO_ADDR
// team := [ JMM ] ;
3496: LD_ADDR_VAR 0 3
3500: PUSH
3501: LD_EXP 9
3505: PUSH
3506: EMPTY
3507: LIST
3508: ST_TO_ADDR
// if LoadVariable ( BrownIn07 , debug ) then
3509: LD_STRING BrownIn07
3511: PPUSH
3512: LD_EXP 1
3516: PPUSH
3517: CALL_OW 30
3521: IFFALSE 3547
// Brown := PrepareUnit ( Brown , ( not debug ) , mission_prev_prefix ) ;
3523: LD_ADDR_EXP 10
3527: PUSH
3528: LD_STRING Brown
3530: PPUSH
3531: LD_EXP 1
3535: NOT
3536: PPUSH
3537: LD_EXP 2
3541: PPUSH
3542: CALL 32114 0 3
3546: ST_TO_ADDR
// if Brown then
3547: LD_EXP 10
3551: IFFALSE 3569
// team := team ^ Brown ;
3553: LD_ADDR_VAR 0 3
3557: PUSH
3558: LD_VAR 0 3
3562: PUSH
3563: LD_EXP 10
3567: ADD
3568: ST_TO_ADDR
// if LoadVariable ( DonaldsonIn07 , debug ) then
3569: LD_STRING DonaldsonIn07
3571: PPUSH
3572: LD_EXP 1
3576: PPUSH
3577: CALL_OW 30
3581: IFFALSE 3607
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , mission_prev_prefix ) ;
3583: LD_ADDR_EXP 11
3587: PUSH
3588: LD_STRING Donaldson
3590: PPUSH
3591: LD_EXP 1
3595: NOT
3596: PPUSH
3597: LD_EXP 2
3601: PPUSH
3602: CALL 32114 0 3
3606: ST_TO_ADDR
// if Donaldson then
3607: LD_EXP 11
3611: IFFALSE 3629
// team := team ^ Donaldson ;
3613: LD_ADDR_VAR 0 3
3617: PUSH
3618: LD_VAR 0 3
3622: PUSH
3623: LD_EXP 11
3627: ADD
3628: ST_TO_ADDR
// if LoadVariable ( BobbyIn07 , debug ) then
3629: LD_STRING BobbyIn07
3631: PPUSH
3632: LD_EXP 1
3636: PPUSH
3637: CALL_OW 30
3641: IFFALSE 3667
// Bobby := PrepareUnit ( Bobby , ( not debug ) , mission_prev_prefix ) ;
3643: LD_ADDR_EXP 12
3647: PUSH
3648: LD_STRING Bobby
3650: PPUSH
3651: LD_EXP 1
3655: NOT
3656: PPUSH
3657: LD_EXP 2
3661: PPUSH
3662: CALL 32114 0 3
3666: ST_TO_ADDR
// if Bobby then
3667: LD_EXP 12
3671: IFFALSE 3689
// team := team ^ Bobby ;
3673: LD_ADDR_VAR 0 3
3677: PUSH
3678: LD_VAR 0 3
3682: PUSH
3683: LD_EXP 12
3687: ADD
3688: ST_TO_ADDR
// if LoadVariable ( CyrusIn07 , debug ) then
3689: LD_STRING CyrusIn07
3691: PPUSH
3692: LD_EXP 1
3696: PPUSH
3697: CALL_OW 30
3701: IFFALSE 3727
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , mission_prev_prefix ) ;
3703: LD_ADDR_EXP 13
3707: PUSH
3708: LD_STRING Cyrus
3710: PPUSH
3711: LD_EXP 1
3715: NOT
3716: PPUSH
3717: LD_EXP 2
3721: PPUSH
3722: CALL 32114 0 3
3726: ST_TO_ADDR
// if Cyrus then
3727: LD_EXP 13
3731: IFFALSE 3749
// team := team ^ Cyrus ;
3733: LD_ADDR_VAR 0 3
3737: PUSH
3738: LD_VAR 0 3
3742: PUSH
3743: LD_EXP 13
3747: ADD
3748: ST_TO_ADDR
// if LoadVariable ( LisaIn07 , debug ) then
3749: LD_STRING LisaIn07
3751: PPUSH
3752: LD_EXP 1
3756: PPUSH
3757: CALL_OW 30
3761: IFFALSE 3787
// Lisa := PrepareUnit ( Lisa , ( not debug ) , mission_prev_prefix ) ;
3763: LD_ADDR_EXP 14
3767: PUSH
3768: LD_STRING Lisa
3770: PPUSH
3771: LD_EXP 1
3775: NOT
3776: PPUSH
3777: LD_EXP 2
3781: PPUSH
3782: CALL 32114 0 3
3786: ST_TO_ADDR
// if Lisa then
3787: LD_EXP 14
3791: IFFALSE 3809
// team := team ^ Lisa ;
3793: LD_ADDR_VAR 0 3
3797: PUSH
3798: LD_VAR 0 3
3802: PUSH
3803: LD_EXP 14
3807: ADD
3808: ST_TO_ADDR
// if LoadVariable ( GladstoneIn07 , debug ) then
3809: LD_STRING GladstoneIn07
3811: PPUSH
3812: LD_EXP 1
3816: PPUSH
3817: CALL_OW 30
3821: IFFALSE 3847
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , mission_prev_prefix ) ;
3823: LD_ADDR_EXP 16
3827: PUSH
3828: LD_STRING Gladstone
3830: PPUSH
3831: LD_EXP 1
3835: NOT
3836: PPUSH
3837: LD_EXP 2
3841: PPUSH
3842: CALL 32114 0 3
3846: ST_TO_ADDR
// if Gladstone then
3847: LD_EXP 16
3851: IFFALSE 3869
// team := team ^ Gladstone ;
3853: LD_ADDR_VAR 0 3
3857: PUSH
3858: LD_VAR 0 3
3862: PUSH
3863: LD_EXP 16
3867: ADD
3868: ST_TO_ADDR
// if LoadVariable ( KhatamIn07 , debug ) then
3869: LD_STRING KhatamIn07
3871: PPUSH
3872: LD_EXP 1
3876: PPUSH
3877: CALL_OW 30
3881: IFFALSE 3907
// Khatam := PrepareUnit ( Khatam , ( not debug ) , mission_prev_prefix ) ;
3883: LD_ADDR_EXP 17
3887: PUSH
3888: LD_STRING Khatam
3890: PPUSH
3891: LD_EXP 1
3895: NOT
3896: PPUSH
3897: LD_EXP 2
3901: PPUSH
3902: CALL 32114 0 3
3906: ST_TO_ADDR
// if Khatam then
3907: LD_EXP 17
3911: IFFALSE 3929
// team := team ^ Khatam ;
3913: LD_ADDR_VAR 0 3
3917: PUSH
3918: LD_VAR 0 3
3922: PUSH
3923: LD_EXP 17
3927: ADD
3928: ST_TO_ADDR
// others := CreateCharacterSet ( 07_others ) ;
3929: LD_ADDR_VAR 0 4
3933: PUSH
3934: LD_STRING 07_others
3936: PPUSH
3937: CALL_OW 31
3941: ST_TO_ADDR
// if others then
3942: LD_VAR 0 4
3946: IFFALSE 3964
// team := team ^ others ;
3948: LD_ADDR_VAR 0 3
3952: PUSH
3953: LD_VAR 0 3
3957: PUSH
3958: LD_VAR 0 4
3962: ADD
3963: ST_TO_ADDR
// if debug then
3964: LD_EXP 1
3968: IFFALSE 4042
// begin InitHc ;
3970: CALL_OW 19
// for i = 1 to 4 do
3974: LD_ADDR_VAR 0 2
3978: PUSH
3979: DOUBLE
3980: LD_INT 1
3982: DEC
3983: ST_TO_ADDR
3984: LD_INT 4
3986: PUSH
3987: FOR_TO
3988: IFFALSE 4040
// begin PrepareHuman ( false , [ 1 , 3 ] [ Rand ( 1 , 2 ) ] , 4 ) ;
3990: LD_INT 0
3992: PPUSH
3993: LD_INT 1
3995: PUSH
3996: LD_INT 3
3998: PUSH
3999: EMPTY
4000: LIST
4001: LIST
4002: PUSH
4003: LD_INT 1
4005: PPUSH
4006: LD_INT 2
4008: PPUSH
4009: CALL_OW 12
4013: ARRAY
4014: PPUSH
4015: LD_INT 4
4017: PPUSH
4018: CALL_OW 380
// team := team ^ CreateHuman ;
4022: LD_ADDR_VAR 0 3
4026: PUSH
4027: LD_VAR 0 3
4031: PUSH
4032: CALL_OW 44
4036: ADD
4037: ST_TO_ADDR
// end ;
4038: GO 3987
4040: POP
4041: POP
// end ; m := 0 ;
4042: LD_ADDR_VAR 0 6
4046: PUSH
4047: LD_INT 0
4049: ST_TO_ADDR
// for i in team do
4050: LD_ADDR_VAR 0 2
4054: PUSH
4055: LD_VAR 0 3
4059: PUSH
4060: FOR_IN
4061: IFFALSE 4268
// if GetClass ( i ) = 3 then
4063: LD_VAR 0 2
4067: PPUSH
4068: CALL_OW 257
4072: PUSH
4073: LD_INT 3
4075: EQUAL
4076: IFFALSE 4224
// begin m := m + 1 ;
4078: LD_ADDR_VAR 0 6
4082: PUSH
4083: LD_VAR 0 6
4087: PUSH
4088: LD_INT 1
4090: PLUS
4091: ST_TO_ADDR
// veh := PrepareTank ( 1 , 1 , [ us_medium_wheeled , us_medium_tracked , us_medium_wheeled , us_light_wheeled ] [ m mod 4 + 1 ] , engine_solar , control_manual , [ us_gatling_gun , us_double_gun , us_light_gun , us_radar ] [ m mod 4 + 1 ] , 60 ) ;
4092: LD_ADDR_VAR 0 5
4096: PUSH
4097: LD_INT 1
4099: PPUSH
4100: LD_INT 1
4102: PPUSH
4103: LD_INT 2
4105: PUSH
4106: LD_INT 3
4108: PUSH
4109: LD_INT 2
4111: PUSH
4112: LD_INT 1
4114: PUSH
4115: EMPTY
4116: LIST
4117: LIST
4118: LIST
4119: LIST
4120: PUSH
4121: LD_VAR 0 6
4125: PUSH
4126: LD_INT 4
4128: MOD
4129: PUSH
4130: LD_INT 1
4132: PLUS
4133: ARRAY
4134: PPUSH
4135: LD_INT 2
4137: PPUSH
4138: LD_INT 1
4140: PPUSH
4141: LD_INT 4
4143: PUSH
4144: LD_INT 5
4146: PUSH
4147: LD_INT 3
4149: PUSH
4150: LD_INT 11
4152: PUSH
4153: EMPTY
4154: LIST
4155: LIST
4156: LIST
4157: LIST
4158: PUSH
4159: LD_VAR 0 6
4163: PUSH
4164: LD_INT 4
4166: MOD
4167: PUSH
4168: LD_INT 1
4170: PLUS
4171: ARRAY
4172: PPUSH
4173: LD_INT 60
4175: PPUSH
4176: CALL 520 0 7
4180: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
4181: LD_VAR 0 5
4185: PPUSH
4186: LD_INT 2
4188: PPUSH
4189: CALL_OW 233
// PlaceUnitArea ( veh , startArea , false ) ;
4193: LD_VAR 0 5
4197: PPUSH
4198: LD_INT 1
4200: PPUSH
4201: LD_INT 0
4203: PPUSH
4204: CALL_OW 49
// PlaceHumanInUnit ( i , veh ) ;
4208: LD_VAR 0 2
4212: PPUSH
4213: LD_VAR 0 5
4217: PPUSH
4218: CALL_OW 52
// end else
4222: GO 4266
// begin if GetClass ( i ) = 2 then
4224: LD_VAR 0 2
4228: PPUSH
4229: CALL_OW 257
4233: PUSH
4234: LD_INT 2
4236: EQUAL
4237: IFFALSE 4251
// SetClass ( i , 1 ) ;
4239: LD_VAR 0 2
4243: PPUSH
4244: LD_INT 1
4246: PPUSH
4247: CALL_OW 336
// PlaceUnitArea ( i , startArea , false ) ;
4251: LD_VAR 0 2
4255: PPUSH
4256: LD_INT 1
4258: PPUSH
4259: LD_INT 0
4261: PPUSH
4262: CALL_OW 49
// end ;
4266: GO 4060
4268: POP
4269: POP
// uc_side := 4 ;
4270: LD_ADDR_OWVAR 20
4274: PUSH
4275: LD_INT 4
4277: ST_TO_ADDR
// Harisson := PrepareUnit ( Harisson , false ,  ) ;
4278: LD_ADDR_EXP 19
4282: PUSH
4283: LD_STRING Harisson
4285: PPUSH
4286: LD_INT 0
4288: PPUSH
4289: LD_STRING 
4291: PPUSH
4292: CALL 32114 0 3
4296: ST_TO_ADDR
// PrepareScout ;
4297: CALL 4306 0 0
// end ;
4301: LD_VAR 0 1
4305: RET
// function PrepareScout ; var ape ; begin
4306: LD_INT 0
4308: PPUSH
4309: PPUSH
// uc_side := 4 ;
4310: LD_ADDR_OWVAR 20
4314: PUSH
4315: LD_INT 4
4317: ST_TO_ADDR
// uc_nation := 1 ;
4318: LD_ADDR_OWVAR 21
4322: PUSH
4323: LD_INT 1
4325: ST_TO_ADDR
// if LoadVariable ( FrankIn06 , 0 ) then
4326: LD_STRING FrankIn06
4328: PPUSH
4329: LD_INT 0
4331: PPUSH
4332: CALL_OW 30
4336: IFFALSE 4353
// Frank := CreateCharacter ( 06c_Frank ) else
4338: LD_ADDR_EXP 15
4342: PUSH
4343: LD_STRING 06c_Frank
4345: PPUSH
4346: CALL_OW 34
4350: ST_TO_ADDR
4351: GO 4393
// if LoadVariable ( FrankInDelta , 0 ) then
4353: LD_STRING FrankInDelta
4355: PPUSH
4356: LD_INT 0
4358: PPUSH
4359: CALL_OW 30
4363: IFFALSE 4380
// Frank := CreateCharacter ( 05_Frank ) else
4365: LD_ADDR_EXP 15
4369: PUSH
4370: LD_STRING 05_Frank
4372: PPUSH
4373: CALL_OW 34
4377: ST_TO_ADDR
4378: GO 4393
// Frank := CreateCharacter ( 04_Frank ) ;
4380: LD_ADDR_EXP 15
4384: PUSH
4385: LD_STRING 04_Frank
4387: PPUSH
4388: CALL_OW 34
4392: ST_TO_ADDR
// if Frank then
4393: LD_EXP 15
4397: IFFALSE 4530
// begin PlaceUnitArea ( Frank , scoutArea , false ) ;
4399: LD_EXP 15
4403: PPUSH
4404: LD_INT 2
4406: PPUSH
4407: LD_INT 0
4409: PPUSH
4410: CALL_OW 49
// SetClass ( Frank , 1 ) ;
4414: LD_EXP 15
4418: PPUSH
4419: LD_INT 1
4421: PPUSH
4422: CALL_OW 336
// uc_side := 0 ;
4426: LD_ADDR_OWVAR 20
4430: PUSH
4431: LD_INT 0
4433: ST_TO_ADDR
// uc_nation := 0 ;
4434: LD_ADDR_OWVAR 21
4438: PUSH
4439: LD_INT 0
4441: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 0 ) ;
4442: LD_INT 0
4444: PPUSH
4445: LD_INT 12
4447: PPUSH
4448: LD_INT 0
4450: PPUSH
4451: CALL_OW 380
// ape := CreateHuman ;
4455: LD_ADDR_VAR 0 2
4459: PUSH
4460: CALL_OW 44
4464: ST_TO_ADDR
// PlaceUnitXYR ( ape , GetX ( Frank ) , GetY ( Frank ) , 5 , false ) ;
4465: LD_VAR 0 2
4469: PPUSH
4470: LD_EXP 15
4474: PPUSH
4475: CALL_OW 250
4479: PPUSH
4480: LD_EXP 15
4484: PPUSH
4485: CALL_OW 251
4489: PPUSH
4490: LD_INT 5
4492: PPUSH
4493: LD_INT 0
4495: PPUSH
4496: CALL_OW 50
// ComTurnUnit ( ape , Frank ) ;
4500: LD_VAR 0 2
4504: PPUSH
4505: LD_EXP 15
4509: PPUSH
4510: CALL_OW 119
// ComTurnUnit ( Frank , ape ) ;
4514: LD_EXP 15
4518: PPUSH
4519: LD_VAR 0 2
4523: PPUSH
4524: CALL_OW 119
// exit ;
4528: GO 4573
// end ; Kikuchi := PrepareUnit ( Yamoko , false ,  ) ;
4530: LD_ADDR_EXP 18
4534: PUSH
4535: LD_STRING Yamoko
4537: PPUSH
4538: LD_INT 0
4540: PPUSH
4541: LD_STRING 
4543: PPUSH
4544: CALL 32114 0 3
4548: ST_TO_ADDR
// PlaceUnitArea ( Kikuchi , scoutArea , false ) ;
4549: LD_EXP 18
4553: PPUSH
4554: LD_INT 2
4556: PPUSH
4557: LD_INT 0
4559: PPUSH
4560: CALL_OW 49
// ComHold ( Kikuchi ) ;
4564: LD_EXP 18
4568: PPUSH
4569: CALL_OW 140
// end ; end_of_file
4573: LD_VAR 0 1
4577: RET
// export ru_rebuild_list ; export function PrepareRussians ; var i , j , r , un , skill , filter , tmp , dep_list , lab_list , fac_list , breastworks_list , bunker_list , turret_list , weapons_list , personel_counter ; begin
4578: LD_INT 0
4580: PPUSH
4581: PPUSH
4582: PPUSH
4583: PPUSH
4584: PPUSH
4585: PPUSH
4586: PPUSH
4587: PPUSH
4588: PPUSH
4589: PPUSH
4590: PPUSH
4591: PPUSH
4592: PPUSH
4593: PPUSH
4594: PPUSH
4595: PPUSH
// ru_rebuild_list := [ ] ;
4596: LD_ADDR_EXP 20
4600: PUSH
4601: EMPTY
4602: ST_TO_ADDR
// uc_side := 3 ;
4603: LD_ADDR_OWVAR 20
4607: PUSH
4608: LD_INT 3
4610: ST_TO_ADDR
// uc_nation := 3 ;
4611: LD_ADDR_OWVAR 21
4615: PUSH
4616: LD_INT 3
4618: ST_TO_ADDR
// if Difficulty > 1 then
4619: LD_OWVAR 67
4623: PUSH
4624: LD_INT 1
4626: GREATER
4627: IFFALSE 4763
// begin bc_type := b_breastwork ;
4629: LD_ADDR_OWVAR 42
4633: PUSH
4634: LD_INT 31
4636: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 78 , 74 , 2 ) ;
4637: LD_INT 78
4639: PPUSH
4640: LD_INT 74
4642: PPUSH
4643: LD_INT 2
4645: PPUSH
4646: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 171 , 193 , 4 ) ;
4650: LD_INT 171
4652: PPUSH
4653: LD_INT 193
4655: PPUSH
4656: LD_INT 4
4658: PPUSH
4659: CALL_OW 47
// bc_type := b_turret ;
4663: LD_ADDR_OWVAR 42
4667: PUSH
4668: LD_INT 33
4670: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 129 , 96 , 3 ) ;
4671: LD_INT 129
4673: PPUSH
4674: LD_INT 96
4676: PPUSH
4677: LD_INT 3
4679: PPUSH
4680: CALL_OW 47
// if Difficulty > 2 then
4684: LD_OWVAR 67
4688: PUSH
4689: LD_INT 2
4691: GREATER
4692: IFFALSE 4763
// begin RemoveUnit ( HexInfo ( 83 , 141 ) ) ;
4694: LD_INT 83
4696: PPUSH
4697: LD_INT 141
4699: PPUSH
4700: CALL_OW 428
4704: PPUSH
4705: CALL_OW 64
// RemoveUnit ( HexInfo ( 78 , 133 ) ) ;
4709: LD_INT 78
4711: PPUSH
4712: LD_INT 133
4714: PPUSH
4715: CALL_OW 428
4719: PPUSH
4720: CALL_OW 64
// CreateAndPlaceBuildingXYD ( 83 , 141 , 2 ) ;
4724: LD_INT 83
4726: PPUSH
4727: LD_INT 141
4729: PPUSH
4730: LD_INT 2
4732: PPUSH
4733: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 78 , 133 , 2 ) ;
4737: LD_INT 78
4739: PPUSH
4740: LD_INT 133
4742: PPUSH
4743: LD_INT 2
4745: PPUSH
4746: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 145 , 112 , 3 ) ;
4750: LD_INT 145
4752: PPUSH
4753: LD_INT 112
4755: PPUSH
4756: LD_INT 3
4758: PPUSH
4759: CALL_OW 47
// end ; end ; dep_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
4763: LD_ADDR_VAR 0 9
4767: PUSH
4768: LD_INT 22
4770: PUSH
4771: LD_INT 3
4773: PUSH
4774: EMPTY
4775: LIST
4776: LIST
4777: PUSH
4778: LD_INT 2
4780: PUSH
4781: LD_INT 30
4783: PUSH
4784: LD_INT 0
4786: PUSH
4787: EMPTY
4788: LIST
4789: LIST
4790: PUSH
4791: LD_INT 30
4793: PUSH
4794: LD_INT 1
4796: PUSH
4797: EMPTY
4798: LIST
4799: LIST
4800: PUSH
4801: EMPTY
4802: LIST
4803: LIST
4804: LIST
4805: PUSH
4806: EMPTY
4807: LIST
4808: LIST
4809: PPUSH
4810: CALL_OW 69
4814: ST_TO_ADDR
// lab_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
4815: LD_ADDR_VAR 0 10
4819: PUSH
4820: LD_INT 22
4822: PUSH
4823: LD_INT 3
4825: PUSH
4826: EMPTY
4827: LIST
4828: LIST
4829: PUSH
4830: LD_INT 2
4832: PUSH
4833: LD_INT 30
4835: PUSH
4836: LD_INT 6
4838: PUSH
4839: EMPTY
4840: LIST
4841: LIST
4842: PUSH
4843: LD_INT 30
4845: PUSH
4846: LD_INT 7
4848: PUSH
4849: EMPTY
4850: LIST
4851: LIST
4852: PUSH
4853: LD_INT 30
4855: PUSH
4856: LD_INT 8
4858: PUSH
4859: EMPTY
4860: LIST
4861: LIST
4862: PUSH
4863: EMPTY
4864: LIST
4865: LIST
4866: LIST
4867: LIST
4868: PUSH
4869: EMPTY
4870: LIST
4871: LIST
4872: PPUSH
4873: CALL_OW 69
4877: ST_TO_ADDR
// fac_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) ;
4878: LD_ADDR_VAR 0 11
4882: PUSH
4883: LD_INT 22
4885: PUSH
4886: LD_INT 3
4888: PUSH
4889: EMPTY
4890: LIST
4891: LIST
4892: PUSH
4893: LD_INT 30
4895: PUSH
4896: LD_INT 3
4898: PUSH
4899: EMPTY
4900: LIST
4901: LIST
4902: PUSH
4903: EMPTY
4904: LIST
4905: LIST
4906: PPUSH
4907: CALL_OW 69
4911: ST_TO_ADDR
// breastworks_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) ;
4912: LD_ADDR_VAR 0 12
4916: PUSH
4917: LD_INT 22
4919: PUSH
4920: LD_INT 3
4922: PUSH
4923: EMPTY
4924: LIST
4925: LIST
4926: PUSH
4927: LD_INT 30
4929: PUSH
4930: LD_INT 31
4932: PUSH
4933: EMPTY
4934: LIST
4935: LIST
4936: PUSH
4937: EMPTY
4938: LIST
4939: LIST
4940: PPUSH
4941: CALL_OW 69
4945: ST_TO_ADDR
// bunker_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) ;
4946: LD_ADDR_VAR 0 13
4950: PUSH
4951: LD_INT 22
4953: PUSH
4954: LD_INT 3
4956: PUSH
4957: EMPTY
4958: LIST
4959: LIST
4960: PUSH
4961: LD_INT 30
4963: PUSH
4964: LD_INT 32
4966: PUSH
4967: EMPTY
4968: LIST
4969: LIST
4970: PUSH
4971: EMPTY
4972: LIST
4973: LIST
4974: PPUSH
4975: CALL_OW 69
4979: ST_TO_ADDR
// turret_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_turret ] ] ) ;
4980: LD_ADDR_VAR 0 14
4984: PUSH
4985: LD_INT 22
4987: PUSH
4988: LD_INT 3
4990: PUSH
4991: EMPTY
4992: LIST
4993: LIST
4994: PUSH
4995: LD_INT 30
4997: PUSH
4998: LD_INT 33
5000: PUSH
5001: EMPTY
5002: LIST
5003: LIST
5004: PUSH
5005: EMPTY
5006: LIST
5007: LIST
5008: PPUSH
5009: CALL_OW 69
5013: ST_TO_ADDR
// weapons_list := [ [ ru_heavy_machine_gun , 5 ] , [ ru_gatling_gun , 50 ] , [ ru_gun , 30 ] , [ ru_heavy_gun , 15 ] ] ;
5014: LD_ADDR_VAR 0 15
5018: PUSH
5019: LD_INT 42
5021: PUSH
5022: LD_INT 5
5024: PUSH
5025: EMPTY
5026: LIST
5027: LIST
5028: PUSH
5029: LD_INT 43
5031: PUSH
5032: LD_INT 50
5034: PUSH
5035: EMPTY
5036: LIST
5037: LIST
5038: PUSH
5039: LD_INT 44
5041: PUSH
5042: LD_INT 30
5044: PUSH
5045: EMPTY
5046: LIST
5047: LIST
5048: PUSH
5049: LD_INT 46
5051: PUSH
5052: LD_INT 15
5054: PUSH
5055: EMPTY
5056: LIST
5057: LIST
5058: PUSH
5059: EMPTY
5060: LIST
5061: LIST
5062: LIST
5063: LIST
5064: ST_TO_ADDR
// personel_counter := [ 0 , 4 , 6 , 3 ] ;
5065: LD_ADDR_VAR 0 16
5069: PUSH
5070: LD_INT 0
5072: PUSH
5073: LD_INT 4
5075: PUSH
5076: LD_INT 6
5078: PUSH
5079: LD_INT 3
5081: PUSH
5082: EMPTY
5083: LIST
5084: LIST
5085: LIST
5086: LIST
5087: ST_TO_ADDR
// skill := [ 4 , 5 , 6 , 6 ] [ Difficulty ] ;
5088: LD_ADDR_VAR 0 6
5092: PUSH
5093: LD_INT 4
5095: PUSH
5096: LD_INT 5
5098: PUSH
5099: LD_INT 6
5101: PUSH
5102: LD_INT 6
5104: PUSH
5105: EMPTY
5106: LIST
5107: LIST
5108: LIST
5109: LIST
5110: PUSH
5111: LD_OWVAR 67
5115: ARRAY
5116: ST_TO_ADDR
// SetBName ( ru_dep_main , am_tukh ) ;
5117: LD_INT 16
5119: PPUSH
5120: LD_STRING am_tukh
5122: PPUSH
5123: CALL_OW 500
// for i in FilterAllUnits ( [ f_type , unit_building ] ) do
5127: LD_ADDR_VAR 0 2
5131: PUSH
5132: LD_INT 21
5134: PUSH
5135: LD_INT 3
5137: PUSH
5138: EMPTY
5139: LIST
5140: LIST
5141: PPUSH
5142: CALL_OW 69
5146: PUSH
5147: FOR_IN
5148: IFFALSE 5185
// SetBLevel ( i , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
5150: LD_VAR 0 2
5154: PPUSH
5155: LD_INT 4
5157: PUSH
5158: LD_INT 5
5160: PUSH
5161: LD_INT 6
5163: PUSH
5164: LD_INT 7
5166: PUSH
5167: EMPTY
5168: LIST
5169: LIST
5170: LIST
5171: LIST
5172: PUSH
5173: LD_OWVAR 67
5177: ARRAY
5178: PPUSH
5179: CALL_OW 241
5183: GO 5147
5185: POP
5186: POP
// for i in dep_list do
5187: LD_ADDR_VAR 0 2
5191: PUSH
5192: LD_VAR 0 9
5196: PUSH
5197: FOR_IN
5198: IFFALSE 5242
// begin SetResourceType ( GetBase ( i ) , mat_cans , 1000 ) ;
5200: LD_VAR 0 2
5204: PPUSH
5205: CALL_OW 274
5209: PPUSH
5210: LD_INT 1
5212: PPUSH
5213: LD_INT 1000
5215: PPUSH
5216: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 1000 ) ;
5220: LD_VAR 0 2
5224: PPUSH
5225: CALL_OW 274
5229: PPUSH
5230: LD_INT 2
5232: PPUSH
5233: LD_INT 1000
5235: PPUSH
5236: CALL_OW 277
// end ;
5240: GO 5197
5242: POP
5243: POP
// InitHc ;
5244: CALL_OW 19
// tmp := bunker_list * [ 45 , 60 , 75 , 80 ] [ Difficulty ] div 100 ;
5248: LD_ADDR_VAR 0 8
5252: PUSH
5253: LD_VAR 0 13
5257: PUSH
5258: LD_INT 45
5260: PUSH
5261: LD_INT 60
5263: PUSH
5264: LD_INT 75
5266: PUSH
5267: LD_INT 80
5269: PUSH
5270: EMPTY
5271: LIST
5272: LIST
5273: LIST
5274: LIST
5275: PUSH
5276: LD_OWVAR 67
5280: ARRAY
5281: MUL
5282: PUSH
5283: LD_INT 100
5285: DIV
5286: ST_TO_ADDR
// personel_counter := Replace ( personel_counter , 1 , tmp ) ;
5287: LD_ADDR_VAR 0 16
5291: PUSH
5292: LD_VAR 0 16
5296: PPUSH
5297: LD_INT 1
5299: PPUSH
5300: LD_VAR 0 8
5304: PPUSH
5305: CALL_OW 1
5309: ST_TO_ADDR
// tmp := [ ] ;
5310: LD_ADDR_VAR 0 8
5314: PUSH
5315: EMPTY
5316: ST_TO_ADDR
// for i in bunker_list do
5317: LD_ADDR_VAR 0 2
5321: PUSH
5322: LD_VAR 0 13
5326: PUSH
5327: FOR_IN
5328: IFFALSE 5424
// if i mod 10 + 1 < tmp then
5330: LD_VAR 0 2
5334: PUSH
5335: LD_INT 10
5337: MOD
5338: PUSH
5339: LD_INT 1
5341: PLUS
5342: PUSH
5343: LD_VAR 0 8
5347: LESS
5348: IFFALSE 5393
// tmp := Insert ( tmp , i mod rand ( 3 , 5 ) + 1 , i ) else
5350: LD_ADDR_VAR 0 8
5354: PUSH
5355: LD_VAR 0 8
5359: PPUSH
5360: LD_VAR 0 2
5364: PUSH
5365: LD_INT 3
5367: PPUSH
5368: LD_INT 5
5370: PPUSH
5371: CALL_OW 12
5375: MOD
5376: PUSH
5377: LD_INT 1
5379: PLUS
5380: PPUSH
5381: LD_VAR 0 2
5385: PPUSH
5386: CALL_OW 2
5390: ST_TO_ADDR
5391: GO 5422
// tmp := Insert ( tmp , tmp + 1 , i ) ;
5393: LD_ADDR_VAR 0 8
5397: PUSH
5398: LD_VAR 0 8
5402: PPUSH
5403: LD_VAR 0 8
5407: PUSH
5408: LD_INT 1
5410: PLUS
5411: PPUSH
5412: LD_VAR 0 2
5416: PPUSH
5417: CALL_OW 2
5421: ST_TO_ADDR
5422: GO 5327
5424: POP
5425: POP
// bunker_list := tmp ;
5426: LD_ADDR_VAR 0 13
5430: PUSH
5431: LD_VAR 0 8
5435: ST_TO_ADDR
// for i in bunker_list ^ turret_list do
5436: LD_ADDR_VAR 0 2
5440: PUSH
5441: LD_VAR 0 13
5445: PUSH
5446: LD_VAR 0 14
5450: ADD
5451: PUSH
5452: FOR_IN
5453: IFFALSE 5476
// PlaceWeaponTurret ( i , GetTurretWeaponBase ( i ) ) ;
5455: LD_VAR 0 2
5459: PPUSH
5460: LD_VAR 0 2
5464: PPUSH
5465: CALL 2225 0 1
5469: PPUSH
5470: CALL_OW 431
5474: GO 5452
5476: POP
5477: POP
// while ( personel_counter [ 1 ] ) do
5478: LD_VAR 0 16
5482: PUSH
5483: LD_INT 1
5485: ARRAY
5486: IFFALSE 5594
// begin i := rand ( 1 , bunker_list ) ;
5488: LD_ADDR_VAR 0 2
5492: PUSH
5493: LD_INT 1
5495: PPUSH
5496: LD_VAR 0 13
5500: PPUSH
5501: CALL_OW 12
5505: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
5506: LD_INT 0
5508: PPUSH
5509: LD_INT 1
5511: PPUSH
5512: LD_VAR 0 6
5516: PPUSH
5517: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , bunker_list [ i ] ) ;
5521: CALL_OW 44
5525: PPUSH
5526: LD_VAR 0 13
5530: PUSH
5531: LD_VAR 0 2
5535: ARRAY
5536: PPUSH
5537: CALL_OW 52
// bunker_list := Delete ( bunker_list , i ) ;
5541: LD_ADDR_VAR 0 13
5545: PUSH
5546: LD_VAR 0 13
5550: PPUSH
5551: LD_VAR 0 2
5555: PPUSH
5556: CALL_OW 3
5560: ST_TO_ADDR
// personel_counter := Replace ( personel_counter , 1 , personel_counter [ 1 ] - 1 ) ;
5561: LD_ADDR_VAR 0 16
5565: PUSH
5566: LD_VAR 0 16
5570: PPUSH
5571: LD_INT 1
5573: PPUSH
5574: LD_VAR 0 16
5578: PUSH
5579: LD_INT 1
5581: ARRAY
5582: PUSH
5583: LD_INT 1
5585: MINUS
5586: PPUSH
5587: CALL_OW 1
5591: ST_TO_ADDR
// end ;
5592: GO 5478
// for i = 1 to personel_counter [ 2 ] do
5594: LD_ADDR_VAR 0 2
5598: PUSH
5599: DOUBLE
5600: LD_INT 1
5602: DEC
5603: ST_TO_ADDR
5604: LD_VAR 0 16
5608: PUSH
5609: LD_INT 2
5611: ARRAY
5612: PUSH
5613: FOR_TO
5614: IFFALSE 5645
// begin PrepareHuman ( false , 2 , skill ) ;
5616: LD_INT 0
5618: PPUSH
5619: LD_INT 2
5621: PPUSH
5622: LD_VAR 0 6
5626: PPUSH
5627: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , ru_dep_main ) ;
5631: CALL_OW 44
5635: PPUSH
5636: LD_INT 16
5638: PPUSH
5639: CALL_OW 52
// end ;
5643: GO 5613
5645: POP
5646: POP
// for i = 1 to personel_counter [ 3 ] do
5647: LD_ADDR_VAR 0 2
5651: PUSH
5652: DOUBLE
5653: LD_INT 1
5655: DEC
5656: ST_TO_ADDR
5657: LD_VAR 0 16
5661: PUSH
5662: LD_INT 3
5664: ARRAY
5665: PUSH
5666: FOR_TO
5667: IFFALSE 5714
// begin PrepareHuman ( false , 3 , skill ) ;
5669: LD_INT 0
5671: PPUSH
5672: LD_INT 3
5674: PPUSH
5675: LD_VAR 0 6
5679: PPUSH
5680: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , fac_list [ i mod 2 + 1 ] ) ;
5684: CALL_OW 44
5688: PPUSH
5689: LD_VAR 0 11
5693: PUSH
5694: LD_VAR 0 2
5698: PUSH
5699: LD_INT 2
5701: MOD
5702: PUSH
5703: LD_INT 1
5705: PLUS
5706: ARRAY
5707: PPUSH
5708: CALL_OW 52
// end ;
5712: GO 5666
5714: POP
5715: POP
// for i = 1 to personel_counter [ 4 ] do
5716: LD_ADDR_VAR 0 2
5720: PUSH
5721: DOUBLE
5722: LD_INT 1
5724: DEC
5725: ST_TO_ADDR
5726: LD_VAR 0 16
5730: PUSH
5731: LD_INT 4
5733: ARRAY
5734: PUSH
5735: FOR_TO
5736: IFFALSE 5773
// begin PrepareHuman ( false , 4 , skill ) ;
5738: LD_INT 0
5740: PPUSH
5741: LD_INT 4
5743: PPUSH
5744: LD_VAR 0 6
5748: PPUSH
5749: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , lab_list [ 1 ] ) ;
5753: CALL_OW 44
5757: PPUSH
5758: LD_VAR 0 10
5762: PUSH
5763: LD_INT 1
5765: ARRAY
5766: PPUSH
5767: CALL_OW 52
// end ;
5771: GO 5735
5773: POP
5774: POP
// for i in breastworks_list do
5775: LD_ADDR_VAR 0 2
5779: PUSH
5780: LD_VAR 0 12
5784: PUSH
5785: FOR_IN
5786: IFFALSE 5898
// begin r := GetDir ( i ) ;
5788: LD_ADDR_VAR 0 4
5792: PUSH
5793: LD_VAR 0 2
5797: PPUSH
5798: CALL_OW 254
5802: ST_TO_ADDR
// if r > 3 then
5803: LD_VAR 0 4
5807: PUSH
5808: LD_INT 3
5810: GREATER
5811: IFFALSE 5829
// r := r - 3 else
5813: LD_ADDR_VAR 0 4
5817: PUSH
5818: LD_VAR 0 4
5822: PUSH
5823: LD_INT 3
5825: MINUS
5826: ST_TO_ADDR
5827: GO 5843
// r := r + 3 ;
5829: LD_ADDR_VAR 0 4
5833: PUSH
5834: LD_VAR 0 4
5838: PUSH
5839: LD_INT 3
5841: PLUS
5842: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
5843: LD_INT 0
5845: PPUSH
5846: LD_INT 1
5848: PPUSH
5849: LD_VAR 0 6
5853: PPUSH
5854: CALL_OW 380
// un := CreateHuman ;
5858: LD_ADDR_VAR 0 5
5862: PUSH
5863: CALL_OW 44
5867: ST_TO_ADDR
// SetDir ( un , r ) ;
5868: LD_VAR 0 5
5872: PPUSH
5873: LD_VAR 0 4
5877: PPUSH
5878: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
5882: LD_VAR 0 5
5886: PPUSH
5887: LD_VAR 0 2
5891: PPUSH
5892: CALL_OW 52
// end ;
5896: GO 5785
5898: POP
5899: POP
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) ;
5900: LD_ADDR_VAR 0 8
5904: PUSH
5905: LD_INT 22
5907: PUSH
5908: LD_INT 3
5910: PUSH
5911: EMPTY
5912: LIST
5913: LIST
5914: PUSH
5915: LD_INT 25
5917: PUSH
5918: LD_INT 3
5920: PUSH
5921: EMPTY
5922: LIST
5923: LIST
5924: PUSH
5925: EMPTY
5926: LIST
5927: LIST
5928: PPUSH
5929: CALL_OW 69
5933: ST_TO_ADDR
// r := [ 4 , 5 , 6 , 6 ] [ Difficulty ] ;
5934: LD_ADDR_VAR 0 4
5938: PUSH
5939: LD_INT 4
5941: PUSH
5942: LD_INT 5
5944: PUSH
5945: LD_INT 6
5947: PUSH
5948: LD_INT 6
5950: PUSH
5951: EMPTY
5952: LIST
5953: LIST
5954: LIST
5955: LIST
5956: PUSH
5957: LD_OWVAR 67
5961: ARRAY
5962: ST_TO_ADDR
// for i = 1 to r do
5963: LD_ADDR_VAR 0 2
5967: PUSH
5968: DOUBLE
5969: LD_INT 1
5971: DEC
5972: ST_TO_ADDR
5973: LD_VAR 0 4
5977: PUSH
5978: FOR_TO
5979: IFFALSE 6152
// begin un := PrepareTank ( 3 , 3 , [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked ] [ i mod 3 + 1 ] , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_machine_gun ] [ i mod 3 + 1 ] , 100 ) ;
5981: LD_ADDR_VAR 0 5
5985: PUSH
5986: LD_INT 3
5988: PPUSH
5989: LD_INT 3
5991: PPUSH
5992: LD_INT 22
5994: PUSH
5995: LD_INT 22
5997: PUSH
5998: LD_INT 24
6000: PUSH
6001: EMPTY
6002: LIST
6003: LIST
6004: LIST
6005: PUSH
6006: LD_VAR 0 2
6010: PUSH
6011: LD_INT 3
6013: MOD
6014: PUSH
6015: LD_INT 1
6017: PLUS
6018: ARRAY
6019: PPUSH
6020: LD_INT 1
6022: PPUSH
6023: LD_INT 1
6025: PPUSH
6026: LD_INT 43
6028: PUSH
6029: LD_INT 44
6031: PUSH
6032: LD_INT 42
6034: PUSH
6035: EMPTY
6036: LIST
6037: LIST
6038: LIST
6039: PUSH
6040: LD_VAR 0 2
6044: PUSH
6045: LD_INT 3
6047: MOD
6048: PUSH
6049: LD_INT 1
6051: PLUS
6052: ARRAY
6053: PPUSH
6054: LD_INT 100
6056: PPUSH
6057: CALL 520 0 7
6061: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
6062: LD_VAR 0 5
6066: PPUSH
6067: LD_INT 0
6069: PPUSH
6070: LD_INT 5
6072: PPUSH
6073: CALL_OW 12
6077: PPUSH
6078: CALL_OW 233
// PlaceUnitArea ( un , parkingArea , false ) ;
6082: LD_VAR 0 5
6086: PPUSH
6087: LD_INT 5
6089: PPUSH
6090: LD_INT 0
6092: PPUSH
6093: CALL_OW 49
// if i > tmp - 2 then
6097: LD_VAR 0 2
6101: PUSH
6102: LD_VAR 0 8
6106: PUSH
6107: LD_INT 2
6109: MINUS
6110: GREATER
6111: IFFALSE 6115
// continue ;
6113: GO 5978
// ComExitBuilding ( tmp [ i ] ) ;
6115: LD_VAR 0 8
6119: PUSH
6120: LD_VAR 0 2
6124: ARRAY
6125: PPUSH
6126: CALL_OW 122
// AddComEnterUnit ( tmp [ i ] , un ) ;
6130: LD_VAR 0 8
6134: PUSH
6135: LD_VAR 0 2
6139: ARRAY
6140: PPUSH
6141: LD_VAR 0 5
6145: PPUSH
6146: CALL_OW 180
// end ;
6150: GO 5978
6152: POP
6153: POP
// end ;
6154: LD_VAR 0 1
6158: RET
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) do var i , filter , tmp , engs , enemy ;
6159: LD_INT 22
6161: PUSH
6162: LD_INT 3
6164: PUSH
6165: EMPTY
6166: LIST
6167: LIST
6168: PUSH
6169: LD_INT 25
6171: PUSH
6172: LD_INT 2
6174: PUSH
6175: EMPTY
6176: LIST
6177: LIST
6178: PUSH
6179: EMPTY
6180: LIST
6181: LIST
6182: PPUSH
6183: CALL_OW 69
6187: IFFALSE 6919
6189: GO 6191
6191: DISABLE
6192: LD_INT 0
6194: PPUSH
6195: PPUSH
6196: PPUSH
6197: PPUSH
6198: PPUSH
// begin enable ;
6199: ENABLE
// filter := FilterUnitsInArea ( baseArea , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
6200: LD_ADDR_VAR 0 2
6204: PUSH
6205: LD_INT 6
6207: PPUSH
6208: LD_INT 3
6210: PUSH
6211: LD_INT 24
6213: PUSH
6214: LD_INT 1000
6216: PUSH
6217: EMPTY
6218: LIST
6219: LIST
6220: PUSH
6221: EMPTY
6222: LIST
6223: LIST
6224: PUSH
6225: LD_INT 21
6227: PUSH
6228: LD_INT 3
6230: PUSH
6231: EMPTY
6232: LIST
6233: LIST
6234: PUSH
6235: EMPTY
6236: LIST
6237: LIST
6238: PPUSH
6239: CALL_OW 70
6243: ST_TO_ADDR
// engs := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
6244: LD_ADDR_VAR 0 4
6248: PUSH
6249: LD_INT 22
6251: PUSH
6252: LD_INT 3
6254: PUSH
6255: EMPTY
6256: LIST
6257: LIST
6258: PUSH
6259: LD_INT 25
6261: PUSH
6262: LD_INT 2
6264: PUSH
6265: EMPTY
6266: LIST
6267: LIST
6268: PUSH
6269: EMPTY
6270: LIST
6271: LIST
6272: PPUSH
6273: CALL_OW 69
6277: ST_TO_ADDR
// if not filter and not ru_rebuild_list then
6278: LD_VAR 0 2
6282: NOT
6283: PUSH
6284: LD_EXP 20
6288: NOT
6289: AND
6290: IFFALSE 6360
// begin for i in engs do
6292: LD_ADDR_VAR 0 1
6296: PUSH
6297: LD_VAR 0 4
6301: PUSH
6302: FOR_IN
6303: IFFALSE 6358
// if GetLives ( i ) = 1000 and not HasTask ( i ) and not IsInUnit ( i ) then
6305: LD_VAR 0 1
6309: PPUSH
6310: CALL_OW 256
6314: PUSH
6315: LD_INT 1000
6317: EQUAL
6318: PUSH
6319: LD_VAR 0 1
6323: PPUSH
6324: CALL_OW 314
6328: NOT
6329: AND
6330: PUSH
6331: LD_VAR 0 1
6335: PPUSH
6336: CALL_OW 310
6340: NOT
6341: AND
6342: IFFALSE 6356
// ComEnterUnit ( i , ru_dep_main ) ;
6344: LD_VAR 0 1
6348: PPUSH
6349: LD_INT 16
6351: PPUSH
6352: CALL_OW 120
6356: GO 6302
6358: POP
6359: POP
// end ; if UnitFilter ( engs , [ f_not , [ f_lives , 650 ] ] ) then
6360: LD_VAR 0 4
6364: PPUSH
6365: LD_INT 3
6367: PUSH
6368: LD_INT 24
6370: PUSH
6371: LD_INT 650
6373: PUSH
6374: EMPTY
6375: LIST
6376: LIST
6377: PUSH
6378: EMPTY
6379: LIST
6380: LIST
6381: PPUSH
6382: CALL_OW 72
6386: IFFALSE 6479
// begin tmp := UnitFilter ( engs , [ f_not , [ f_lives , 650 ] ] ) ;
6388: LD_ADDR_VAR 0 3
6392: PUSH
6393: LD_VAR 0 4
6397: PPUSH
6398: LD_INT 3
6400: PUSH
6401: LD_INT 24
6403: PUSH
6404: LD_INT 650
6406: PUSH
6407: EMPTY
6408: LIST
6409: LIST
6410: PUSH
6411: EMPTY
6412: LIST
6413: LIST
6414: PPUSH
6415: CALL_OW 72
6419: ST_TO_ADDR
// for i in tmp do
6420: LD_ADDR_VAR 0 1
6424: PUSH
6425: LD_VAR 0 3
6429: PUSH
6430: FOR_IN
6431: IFFALSE 6477
// if not IsInArea ( i , mainBaseArea ) then
6433: LD_VAR 0 1
6437: PPUSH
6438: LD_INT 14
6440: PPUSH
6441: CALL_OW 308
6445: NOT
6446: IFFALSE 6475
// begin ComMoveXY ( i , 129 , 125 ) ;
6448: LD_VAR 0 1
6452: PPUSH
6453: LD_INT 129
6455: PPUSH
6456: LD_INT 125
6458: PPUSH
6459: CALL_OW 111
// AddComWait ( i , 0 0$30 ) ;
6463: LD_VAR 0 1
6467: PPUSH
6468: LD_INT 1050
6470: PPUSH
6471: CALL_OW 202
// end ;
6475: GO 6430
6477: POP
6478: POP
// end ; engs := UnitFilter ( engs , [ f_lives , 650 ] ) ;
6479: LD_ADDR_VAR 0 4
6483: PUSH
6484: LD_VAR 0 4
6488: PPUSH
6489: LD_INT 24
6491: PUSH
6492: LD_INT 650
6494: PUSH
6495: EMPTY
6496: LIST
6497: LIST
6498: PPUSH
6499: CALL_OW 72
6503: ST_TO_ADDR
// if not engs then
6504: LD_VAR 0 4
6508: NOT
6509: IFFALSE 6513
// exit ;
6511: GO 6919
// if filter then
6513: LD_VAR 0 2
6517: IFFALSE 6776
// begin for i in engs do
6519: LD_ADDR_VAR 0 1
6523: PUSH
6524: LD_VAR 0 4
6528: PUSH
6529: FOR_IN
6530: IFFALSE 6554
// if IsInUnit ( i ) then
6532: LD_VAR 0 1
6536: PPUSH
6537: CALL_OW 310
6541: IFFALSE 6552
// ComExitBuilding ( i ) ;
6543: LD_VAR 0 1
6547: PPUSH
6548: CALL_OW 122
6552: GO 6529
6554: POP
6555: POP
// wait ( 3 ) ;
6556: LD_INT 3
6558: PPUSH
6559: CALL_OW 67
// if filter >= 2 and engs >= 2 then
6563: LD_VAR 0 2
6567: PUSH
6568: LD_INT 2
6570: GREATEREQUAL
6571: PUSH
6572: LD_VAR 0 4
6576: PUSH
6577: LD_INT 2
6579: GREATEREQUAL
6580: AND
6581: IFFALSE 6729
// begin for i = 1 to engs / 2 do
6583: LD_ADDR_VAR 0 1
6587: PUSH
6588: DOUBLE
6589: LD_INT 1
6591: DEC
6592: ST_TO_ADDR
6593: LD_VAR 0 4
6597: PUSH
6598: LD_INT 2
6600: DIVREAL
6601: PUSH
6602: FOR_TO
6603: IFFALSE 6649
// if not HasTask ( engs [ i ] ) then
6605: LD_VAR 0 4
6609: PUSH
6610: LD_VAR 0 1
6614: ARRAY
6615: PPUSH
6616: CALL_OW 314
6620: NOT
6621: IFFALSE 6647
// ComRepairBuilding ( engs [ i ] , filter [ 1 ] ) ;
6623: LD_VAR 0 4
6627: PUSH
6628: LD_VAR 0 1
6632: ARRAY
6633: PPUSH
6634: LD_VAR 0 2
6638: PUSH
6639: LD_INT 1
6641: ARRAY
6642: PPUSH
6643: CALL_OW 130
6647: GO 6602
6649: POP
6650: POP
// for i = engs / 2 + 1 to engs do
6651: LD_ADDR_VAR 0 1
6655: PUSH
6656: DOUBLE
6657: LD_VAR 0 4
6661: PUSH
6662: LD_INT 2
6664: DIVREAL
6665: PUSH
6666: LD_INT 1
6668: PLUS
6669: DEC
6670: ST_TO_ADDR
6671: LD_VAR 0 4
6675: PUSH
6676: FOR_TO
6677: IFFALSE 6725
// if not HasTask ( engs [ i ] ) then
6679: LD_VAR 0 4
6683: PUSH
6684: LD_VAR 0 1
6688: ARRAY
6689: PPUSH
6690: CALL_OW 314
6694: NOT
6695: IFFALSE 6723
// ComRepairBuilding ( engs [ i ] , filter [ filter ] ) ;
6697: LD_VAR 0 4
6701: PUSH
6702: LD_VAR 0 1
6706: ARRAY
6707: PPUSH
6708: LD_VAR 0 2
6712: PUSH
6713: LD_VAR 0 2
6717: ARRAY
6718: PPUSH
6719: CALL_OW 130
6723: GO 6676
6725: POP
6726: POP
// end else
6727: GO 6776
// for i in engs do
6729: LD_ADDR_VAR 0 1
6733: PUSH
6734: LD_VAR 0 4
6738: PUSH
6739: FOR_IN
6740: IFFALSE 6774
// if not HasTask ( i ) then
6742: LD_VAR 0 1
6746: PPUSH
6747: CALL_OW 314
6751: NOT
6752: IFFALSE 6772
// ComRepairBuilding ( i , filter [ 1 ] ) ;
6754: LD_VAR 0 1
6758: PPUSH
6759: LD_VAR 0 2
6763: PUSH
6764: LD_INT 1
6766: ARRAY
6767: PPUSH
6768: CALL_OW 130
6772: GO 6739
6774: POP
6775: POP
// end ; enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
6776: LD_ADDR_VAR 0 5
6780: PUSH
6781: LD_INT 81
6783: PUSH
6784: LD_INT 3
6786: PUSH
6787: EMPTY
6788: LIST
6789: LIST
6790: PPUSH
6791: CALL_OW 69
6795: ST_TO_ADDR
// if ru_rebuild_list and not filter then
6796: LD_EXP 20
6800: PUSH
6801: LD_VAR 0 2
6805: NOT
6806: AND
6807: IFFALSE 6919
// begin ComExitBuilding ( engs ) ;
6809: LD_VAR 0 4
6813: PPUSH
6814: CALL_OW 122
// if GetDistUnitXY ( NearestUnitToXY ( enemy , ru_rebuild_list [ 2 ] , ru_rebuild_list [ 3 ] ) , ru_rebuild_list [ 2 ] , ru_rebuild_list [ 3 ] ) > 10 then
6818: LD_VAR 0 5
6822: PPUSH
6823: LD_EXP 20
6827: PUSH
6828: LD_INT 2
6830: ARRAY
6831: PPUSH
6832: LD_EXP 20
6836: PUSH
6837: LD_INT 3
6839: ARRAY
6840: PPUSH
6841: CALL_OW 73
6845: PPUSH
6846: LD_EXP 20
6850: PUSH
6851: LD_INT 2
6853: ARRAY
6854: PPUSH
6855: LD_EXP 20
6859: PUSH
6860: LD_INT 3
6862: ARRAY
6863: PPUSH
6864: CALL_OW 297
6868: PUSH
6869: LD_INT 10
6871: GREATER
6872: IFFALSE 6919
// ComBuild ( engs , ru_rebuild_list [ 1 ] , ru_rebuild_list [ 2 ] , ru_rebuild_list [ 3 ] , ru_rebuild_list [ 4 ] ) ;
6874: LD_VAR 0 4
6878: PPUSH
6879: LD_EXP 20
6883: PUSH
6884: LD_INT 1
6886: ARRAY
6887: PPUSH
6888: LD_EXP 20
6892: PUSH
6893: LD_INT 2
6895: ARRAY
6896: PPUSH
6897: LD_EXP 20
6901: PUSH
6902: LD_INT 3
6904: ARRAY
6905: PPUSH
6906: LD_EXP 20
6910: PUSH
6911: LD_INT 4
6913: ARRAY
6914: PPUSH
6915: CALL_OW 145
// end ; end ;
6919: PPOPN 5
6921: END
// every 0 0$1 trigger GetLives ( ru_dep_main ) < 250 do var i , tmp ;
6922: LD_INT 16
6924: PPUSH
6925: CALL_OW 256
6929: PUSH
6930: LD_INT 250
6932: LESS
6933: IFFALSE 7123
6935: GO 6937
6937: DISABLE
6938: LD_INT 0
6940: PPUSH
6941: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_class , 1 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ;
6942: LD_ADDR_VAR 0 2
6946: PUSH
6947: LD_INT 22
6949: PUSH
6950: LD_INT 3
6952: PUSH
6953: EMPTY
6954: LIST
6955: LIST
6956: PUSH
6957: LD_INT 2
6959: PUSH
6960: LD_INT 25
6962: PUSH
6963: LD_INT 1
6965: PUSH
6966: EMPTY
6967: LIST
6968: LIST
6969: PUSH
6970: LD_INT 25
6972: PUSH
6973: LD_INT 3
6975: PUSH
6976: EMPTY
6977: LIST
6978: LIST
6979: PUSH
6980: LD_INT 25
6982: PUSH
6983: LD_INT 4
6985: PUSH
6986: EMPTY
6987: LIST
6988: LIST
6989: PUSH
6990: EMPTY
6991: LIST
6992: LIST
6993: LIST
6994: LIST
6995: PUSH
6996: EMPTY
6997: LIST
6998: LIST
6999: PPUSH
7000: CALL_OW 69
7004: ST_TO_ADDR
// ComExitBuilding ( tmp ) ;
7005: LD_VAR 0 2
7009: PPUSH
7010: CALL_OW 122
// wait ( 3 ) ;
7014: LD_INT 3
7016: PPUSH
7017: CALL_OW 67
// ComMoveXY ( tmp , 156 , 211 ) ;
7021: LD_VAR 0 2
7025: PPUSH
7026: LD_INT 156
7028: PPUSH
7029: LD_INT 211
7031: PPUSH
7032: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
7036: LD_INT 35
7038: PPUSH
7039: CALL_OW 67
// for i in tmp do
7043: LD_ADDR_VAR 0 1
7047: PUSH
7048: LD_VAR 0 2
7052: PUSH
7053: FOR_IN
7054: IFFALSE 7114
// if IsInArea ( i , escapeArea ) then
7056: LD_VAR 0 1
7060: PPUSH
7061: LD_INT 15
7063: PPUSH
7064: CALL_OW 308
7068: IFFALSE 7097
// begin RemoveUnit ( i ) ;
7070: LD_VAR 0 1
7074: PPUSH
7075: CALL_OW 64
// tmp := tmp diff i ;
7079: LD_ADDR_VAR 0 2
7083: PUSH
7084: LD_VAR 0 2
7088: PUSH
7089: LD_VAR 0 1
7093: DIFF
7094: ST_TO_ADDR
// end else
7095: GO 7112
// ComMoveXY ( i , 156 , 211 ) ;
7097: LD_VAR 0 1
7101: PPUSH
7102: LD_INT 156
7104: PPUSH
7105: LD_INT 211
7107: PPUSH
7108: CALL_OW 111
7112: GO 7053
7114: POP
7115: POP
// until not tmp ;
7116: LD_VAR 0 2
7120: NOT
7121: IFFALSE 7036
// end ;
7123: PPOPN 2
7125: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do var i , tmp , doc ;
7126: LD_INT 22
7128: PUSH
7129: LD_INT 3
7131: PUSH
7132: EMPTY
7133: LIST
7134: LIST
7135: PUSH
7136: LD_INT 25
7138: PUSH
7139: LD_INT 4
7141: PUSH
7142: EMPTY
7143: LIST
7144: LIST
7145: PUSH
7146: EMPTY
7147: LIST
7148: LIST
7149: PPUSH
7150: CALL_OW 69
7154: IFFALSE 7408
7156: GO 7158
7158: DISABLE
7159: LD_INT 0
7161: PPUSH
7162: PPUSH
7163: PPUSH
// begin enable ;
7164: ENABLE
// tmp := FilterUnitsInArea ( mainBaseArea , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
7165: LD_ADDR_VAR 0 2
7169: PUSH
7170: LD_INT 14
7172: PPUSH
7173: LD_INT 22
7175: PUSH
7176: LD_INT 3
7178: PUSH
7179: EMPTY
7180: LIST
7181: LIST
7182: PUSH
7183: LD_INT 21
7185: PUSH
7186: LD_INT 1
7188: PUSH
7189: EMPTY
7190: LIST
7191: LIST
7192: PUSH
7193: LD_INT 3
7195: PUSH
7196: LD_INT 24
7198: PUSH
7199: LD_INT 1000
7201: PUSH
7202: EMPTY
7203: LIST
7204: LIST
7205: PUSH
7206: EMPTY
7207: LIST
7208: LIST
7209: PUSH
7210: EMPTY
7211: LIST
7212: LIST
7213: LIST
7214: PPUSH
7215: CALL_OW 70
7219: ST_TO_ADDR
// doc := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) ;
7220: LD_ADDR_VAR 0 3
7224: PUSH
7225: LD_INT 22
7227: PUSH
7228: LD_INT 3
7230: PUSH
7231: EMPTY
7232: LIST
7233: LIST
7234: PUSH
7235: LD_INT 25
7237: PUSH
7238: LD_INT 4
7240: PUSH
7241: EMPTY
7242: LIST
7243: LIST
7244: PUSH
7245: EMPTY
7246: LIST
7247: LIST
7248: PPUSH
7249: CALL_OW 69
7253: ST_TO_ADDR
// if not doc then
7254: LD_VAR 0 3
7258: NOT
7259: IFFALSE 7263
// exit ;
7261: GO 7408
// if not tmp then
7263: LD_VAR 0 2
7267: NOT
7268: IFFALSE 7359
// begin if not IsInUnit ( doc [ 1 ] ) then
7270: LD_VAR 0 3
7274: PUSH
7275: LD_INT 1
7277: ARRAY
7278: PPUSH
7279: CALL_OW 310
7283: NOT
7284: IFFALSE 7357
// ComEnterUnit ( doc , FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) [ 1 ] ) ;
7286: LD_VAR 0 3
7290: PPUSH
7291: LD_INT 22
7293: PUSH
7294: LD_INT 3
7296: PUSH
7297: EMPTY
7298: LIST
7299: LIST
7300: PUSH
7301: LD_INT 2
7303: PUSH
7304: LD_INT 30
7306: PUSH
7307: LD_INT 6
7309: PUSH
7310: EMPTY
7311: LIST
7312: LIST
7313: PUSH
7314: LD_INT 30
7316: PUSH
7317: LD_INT 7
7319: PUSH
7320: EMPTY
7321: LIST
7322: LIST
7323: PUSH
7324: LD_INT 30
7326: PUSH
7327: LD_INT 8
7329: PUSH
7330: EMPTY
7331: LIST
7332: LIST
7333: PUSH
7334: EMPTY
7335: LIST
7336: LIST
7337: LIST
7338: LIST
7339: PUSH
7340: EMPTY
7341: LIST
7342: LIST
7343: PPUSH
7344: CALL_OW 69
7348: PUSH
7349: LD_INT 1
7351: ARRAY
7352: PPUSH
7353: CALL_OW 120
// exit ;
7357: GO 7408
// end ; if IsInUnit ( doc [ 1 ] ) then
7359: LD_VAR 0 3
7363: PUSH
7364: LD_INT 1
7366: ARRAY
7367: PPUSH
7368: CALL_OW 310
7372: IFFALSE 7383
// ComExitBuilding ( doc ) ;
7374: LD_VAR 0 3
7378: PPUSH
7379: CALL_OW 122
// wait ( 3 ) ;
7383: LD_INT 3
7385: PPUSH
7386: CALL_OW 67
// ComHeal ( doc , tmp [ 1 ] ) ;
7390: LD_VAR 0 3
7394: PPUSH
7395: LD_VAR 0 2
7399: PUSH
7400: LD_INT 1
7402: ARRAY
7403: PPUSH
7404: CALL_OW 128
// end ;
7408: PPOPN 3
7410: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) do var i , tmp , attacking , areas , area , mech ;
7411: LD_INT 22
7413: PUSH
7414: LD_INT 3
7416: PUSH
7417: EMPTY
7418: LIST
7419: LIST
7420: PUSH
7421: LD_INT 25
7423: PUSH
7424: LD_INT 3
7426: PUSH
7427: EMPTY
7428: LIST
7429: LIST
7430: PUSH
7431: EMPTY
7432: LIST
7433: LIST
7434: PPUSH
7435: CALL_OW 69
7439: PUSH
7440: LD_INT 22
7442: PUSH
7443: LD_INT 3
7445: PUSH
7446: EMPTY
7447: LIST
7448: LIST
7449: PUSH
7450: LD_INT 21
7452: PUSH
7453: LD_INT 2
7455: PUSH
7456: EMPTY
7457: LIST
7458: LIST
7459: PUSH
7460: EMPTY
7461: LIST
7462: LIST
7463: PPUSH
7464: CALL_OW 69
7468: AND
7469: IFFALSE 8163
7471: GO 7473
7473: DISABLE
7474: LD_INT 0
7476: PPUSH
7477: PPUSH
7478: PPUSH
7479: PPUSH
7480: PPUSH
7481: PPUSH
// begin enable ;
7482: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) ;
7483: LD_ADDR_VAR 0 2
7487: PUSH
7488: LD_INT 22
7490: PUSH
7491: LD_INT 3
7493: PUSH
7494: EMPTY
7495: LIST
7496: LIST
7497: PUSH
7498: LD_INT 21
7500: PUSH
7501: LD_INT 2
7503: PUSH
7504: EMPTY
7505: LIST
7506: LIST
7507: PUSH
7508: LD_INT 3
7510: PUSH
7511: LD_INT 58
7513: PUSH
7514: EMPTY
7515: LIST
7516: PUSH
7517: EMPTY
7518: LIST
7519: LIST
7520: PUSH
7521: EMPTY
7522: LIST
7523: LIST
7524: LIST
7525: PPUSH
7526: CALL_OW 69
7530: ST_TO_ADDR
// areas := [ sectorAlpha , sectorBeta , sectorDelta , mainBaseArea ] ;
7531: LD_ADDR_VAR 0 4
7535: PUSH
7536: LD_INT 10
7538: PUSH
7539: LD_INT 11
7541: PUSH
7542: LD_INT 12
7544: PUSH
7545: LD_INT 14
7547: PUSH
7548: EMPTY
7549: LIST
7550: LIST
7551: LIST
7552: LIST
7553: ST_TO_ADDR
// area := 0 ;
7554: LD_ADDR_VAR 0 5
7558: PUSH
7559: LD_INT 0
7561: ST_TO_ADDR
// attacking := false ;
7562: LD_ADDR_VAR 0 3
7566: PUSH
7567: LD_INT 0
7569: ST_TO_ADDR
// for i in tmp do
7570: LD_ADDR_VAR 0 1
7574: PUSH
7575: LD_VAR 0 2
7579: PUSH
7580: FOR_IN
7581: IFFALSE 8009
// begin if GetDistUnits ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) < 10 and not HasTask ( i ) and not GetTag ( i ) and GetLives ( i ) > 650 then
7583: LD_VAR 0 1
7587: PPUSH
7588: LD_INT 22
7590: PUSH
7591: LD_INT 1
7593: PUSH
7594: EMPTY
7595: LIST
7596: LIST
7597: PPUSH
7598: CALL_OW 69
7602: PPUSH
7603: LD_VAR 0 1
7607: PPUSH
7608: CALL_OW 74
7612: PPUSH
7613: CALL_OW 296
7617: PUSH
7618: LD_INT 10
7620: LESS
7621: PUSH
7622: LD_VAR 0 1
7626: PPUSH
7627: CALL_OW 314
7631: NOT
7632: AND
7633: PUSH
7634: LD_VAR 0 1
7638: PPUSH
7639: CALL_OW 110
7643: NOT
7644: AND
7645: PUSH
7646: LD_VAR 0 1
7650: PPUSH
7651: CALL_OW 256
7655: PUSH
7656: LD_INT 650
7658: GREATER
7659: AND
7660: IFFALSE 7704
// begin ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
7662: LD_VAR 0 1
7666: PPUSH
7667: LD_INT 22
7669: PUSH
7670: LD_INT 1
7672: PUSH
7673: EMPTY
7674: LIST
7675: LIST
7676: PPUSH
7677: CALL_OW 69
7681: PPUSH
7682: LD_VAR 0 1
7686: PPUSH
7687: CALL_OW 74
7691: PPUSH
7692: CALL_OW 115
// attacking := true ;
7696: LD_ADDR_VAR 0 3
7700: PUSH
7701: LD_INT 1
7703: ST_TO_ADDR
// end ; if not GetTag ( i ) and GetLives ( i ) < 650 and GetType ( i ) = unit_vehicle then
7704: LD_VAR 0 1
7708: PPUSH
7709: CALL_OW 110
7713: NOT
7714: PUSH
7715: LD_VAR 0 1
7719: PPUSH
7720: CALL_OW 256
7724: PUSH
7725: LD_INT 650
7727: LESS
7728: AND
7729: PUSH
7730: LD_VAR 0 1
7734: PPUSH
7735: CALL_OW 247
7739: PUSH
7740: LD_INT 2
7742: EQUAL
7743: AND
7744: IFFALSE 7773
// begin SetTag ( i , 1 ) ;
7746: LD_VAR 0 1
7750: PPUSH
7751: LD_INT 1
7753: PPUSH
7754: CALL_OW 109
// ComMoveXY ( i , 130 , 139 ) ;
7758: LD_VAR 0 1
7762: PPUSH
7763: LD_INT 130
7765: PPUSH
7766: LD_INT 139
7768: PPUSH
7769: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 130 , 139 ) < 6 then
7773: LD_VAR 0 1
7777: PPUSH
7778: CALL_OW 110
7782: PUSH
7783: LD_INT 1
7785: EQUAL
7786: PUSH
7787: LD_VAR 0 1
7791: PPUSH
7792: LD_INT 130
7794: PPUSH
7795: LD_INT 139
7797: PPUSH
7798: CALL_OW 297
7802: PUSH
7803: LD_INT 6
7805: LESS
7806: AND
7807: IFFALSE 7821
// SetTag ( i , 2 ) ;
7809: LD_VAR 0 1
7813: PPUSH
7814: LD_INT 2
7816: PPUSH
7817: CALL_OW 109
// if GetTag ( i ) = 2 then
7821: LD_VAR 0 1
7825: PPUSH
7826: CALL_OW 110
7830: PUSH
7831: LD_INT 2
7833: EQUAL
7834: IFFALSE 7969
// begin if GetLives ( i ) = 1000 then
7836: LD_VAR 0 1
7840: PPUSH
7841: CALL_OW 256
7845: PUSH
7846: LD_INT 1000
7848: EQUAL
7849: IFFALSE 7865
// SetTag ( i , 3 ) else
7851: LD_VAR 0 1
7855: PPUSH
7856: LD_INT 3
7858: PPUSH
7859: CALL_OW 109
7863: GO 7969
// if IsDrivenBy ( i ) then
7865: LD_VAR 0 1
7869: PPUSH
7870: CALL_OW 311
7874: IFFALSE 7969
// begin mech := IsDrivenBy ( i ) ;
7876: LD_ADDR_VAR 0 6
7880: PUSH
7881: LD_VAR 0 1
7885: PPUSH
7886: CALL_OW 311
7890: ST_TO_ADDR
// if not See ( 1 , mech ) and GetLives ( mech ) < 1000 then
7891: LD_INT 1
7893: PPUSH
7894: LD_VAR 0 6
7898: PPUSH
7899: CALL_OW 292
7903: NOT
7904: PUSH
7905: LD_VAR 0 6
7909: PPUSH
7910: CALL_OW 256
7914: PUSH
7915: LD_INT 1000
7917: LESS
7918: AND
7919: IFFALSE 7933
// SetLives ( mech , 1000 ) ;
7921: LD_VAR 0 6
7925: PPUSH
7926: LD_INT 1000
7928: PPUSH
7929: CALL_OW 234
// if not See ( 1 , i ) then
7933: LD_INT 1
7935: PPUSH
7936: LD_VAR 0 1
7940: PPUSH
7941: CALL_OW 292
7945: NOT
7946: IFFALSE 7960
// SetFuel ( i , 100 ) ;
7948: LD_VAR 0 1
7952: PPUSH
7953: LD_INT 100
7955: PPUSH
7956: CALL_OW 240
// ComRepairVehicleAndReturn ( mech ) ;
7960: LD_VAR 0 6
7964: PPUSH
7965: CALL 71190 0 1
// end ; end ; if GetTag ( i ) = 3 and IsDrivenBy ( i ) then
7969: LD_VAR 0 1
7973: PPUSH
7974: CALL_OW 110
7978: PUSH
7979: LD_INT 3
7981: EQUAL
7982: PUSH
7983: LD_VAR 0 1
7987: PPUSH
7988: CALL_OW 311
7992: AND
7993: IFFALSE 8007
// SetTag ( i , 0 ) ;
7995: LD_VAR 0 1
7999: PPUSH
8000: LD_INT 0
8002: PPUSH
8003: CALL_OW 109
// end ;
8007: GO 7580
8009: POP
8010: POP
// if attacking then
8011: LD_VAR 0 3
8015: IFFALSE 8019
// exit ;
8017: GO 8163
// for i in areas do
8019: LD_ADDR_VAR 0 1
8023: PUSH
8024: LD_VAR 0 4
8028: PUSH
8029: FOR_IN
8030: IFFALSE 8067
// if FilterUnitsInArea ( i , [ f_side , 1 ] ) then
8032: LD_VAR 0 1
8036: PPUSH
8037: LD_INT 22
8039: PUSH
8040: LD_INT 1
8042: PUSH
8043: EMPTY
8044: LIST
8045: LIST
8046: PPUSH
8047: CALL_OW 70
8051: IFFALSE 8065
// begin area := i ;
8053: LD_ADDR_VAR 0 5
8057: PUSH
8058: LD_VAR 0 1
8062: ST_TO_ADDR
// break ;
8063: GO 8067
// end ;
8065: GO 8029
8067: POP
8068: POP
// if area then
8069: LD_VAR 0 5
8073: IFFALSE 8163
// begin for i in tmp do
8075: LD_ADDR_VAR 0 1
8079: PUSH
8080: LD_VAR 0 2
8084: PUSH
8085: FOR_IN
8086: IFFALSE 8161
// begin if GetTag ( i ) then
8088: LD_VAR 0 1
8092: PPUSH
8093: CALL_OW 110
8097: IFFALSE 8101
// continue ;
8099: GO 8085
// if GetFuel ( i ) < 33 then
8101: LD_VAR 0 1
8105: PPUSH
8106: CALL_OW 261
8110: PUSH
8111: LD_INT 33
8113: LESS
8114: IFFALSE 8128
// SetFuel ( i , 33 ) ;
8116: LD_VAR 0 1
8120: PPUSH
8121: LD_INT 33
8123: PPUSH
8124: CALL_OW 240
// if not IsInArea ( i , area ) then
8128: LD_VAR 0 1
8132: PPUSH
8133: LD_VAR 0 5
8137: PPUSH
8138: CALL_OW 308
8142: NOT
8143: IFFALSE 8159
// ComMoveToArea ( i , area ) ;
8145: LD_VAR 0 1
8149: PPUSH
8150: LD_VAR 0 5
8154: PPUSH
8155: CALL_OW 113
// end ;
8159: GO 8085
8161: POP
8162: POP
// end ; end ;
8163: PPOPN 6
8165: END
// every 15 15$00 trigger Difficulty > 1 do var i , j , un , veh , time , count ;
8166: LD_OWVAR 67
8170: PUSH
8171: LD_INT 1
8173: GREATER
8174: IFFALSE 8459
8176: GO 8178
8178: DISABLE
8179: LD_INT 0
8181: PPUSH
8182: PPUSH
8183: PPUSH
8184: PPUSH
8185: PPUSH
8186: PPUSH
// begin uc_side := 3 ;
8187: LD_ADDR_OWVAR 20
8191: PUSH
8192: LD_INT 3
8194: ST_TO_ADDR
// uc_nation := 3 ;
8195: LD_ADDR_OWVAR 21
8199: PUSH
8200: LD_INT 3
8202: ST_TO_ADDR
// time := [ 9 9$00 , 7 7$00 , 6 6$00 , 5 5$30 ] [ Difficulty ] ;
8203: LD_ADDR_VAR 0 5
8207: PUSH
8208: LD_INT 18900
8210: PUSH
8211: LD_INT 14700
8213: PUSH
8214: LD_INT 12600
8216: PUSH
8217: LD_INT 11550
8219: PUSH
8220: EMPTY
8221: LIST
8222: LIST
8223: LIST
8224: LIST
8225: PUSH
8226: LD_OWVAR 67
8230: ARRAY
8231: ST_TO_ADDR
// count := [ 2 , 2 , 3 , 3 ] [ Difficulty ] ;
8232: LD_ADDR_VAR 0 6
8236: PUSH
8237: LD_INT 2
8239: PUSH
8240: LD_INT 2
8242: PUSH
8243: LD_INT 3
8245: PUSH
8246: LD_INT 3
8248: PUSH
8249: EMPTY
8250: LIST
8251: LIST
8252: LIST
8253: LIST
8254: PUSH
8255: LD_OWVAR 67
8259: ARRAY
8260: ST_TO_ADDR
// for i = 1 to count do
8261: LD_ADDR_VAR 0 1
8265: PUSH
8266: DOUBLE
8267: LD_INT 1
8269: DEC
8270: ST_TO_ADDR
8271: LD_VAR 0 6
8275: PUSH
8276: FOR_TO
8277: IFFALSE 8457
// begin wait ( time ) ;
8279: LD_VAR 0 5
8283: PPUSH
8284: CALL_OW 67
// for j = 1 to rand ( 1 , Difficulty ) do
8288: LD_ADDR_VAR 0 2
8292: PUSH
8293: DOUBLE
8294: LD_INT 1
8296: DEC
8297: ST_TO_ADDR
8298: LD_INT 1
8300: PPUSH
8301: LD_OWVAR 67
8305: PPUSH
8306: CALL_OW 12
8310: PUSH
8311: FOR_TO
8312: IFFALSE 8453
// begin veh := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_machine_gun ] [ i mod 3 + 1 ] , 80 ) ;
8314: LD_ADDR_VAR 0 4
8318: PUSH
8319: LD_INT 3
8321: PPUSH
8322: LD_INT 3
8324: PPUSH
8325: LD_INT 22
8327: PPUSH
8328: LD_INT 1
8330: PPUSH
8331: LD_INT 1
8333: PPUSH
8334: LD_INT 43
8336: PUSH
8337: LD_INT 44
8339: PUSH
8340: LD_INT 42
8342: PUSH
8343: EMPTY
8344: LIST
8345: LIST
8346: LIST
8347: PUSH
8348: LD_VAR 0 1
8352: PUSH
8353: LD_INT 3
8355: MOD
8356: PUSH
8357: LD_INT 1
8359: PLUS
8360: ARRAY
8361: PPUSH
8362: LD_INT 80
8364: PPUSH
8365: CALL 520 0 7
8369: ST_TO_ADDR
// PlaceUnitArea ( veh , southArea , false ) ;
8370: LD_VAR 0 4
8374: PPUSH
8375: LD_INT 13
8377: PPUSH
8378: LD_INT 0
8380: PPUSH
8381: CALL_OW 49
// PrepareHuman ( false , 3 , [ 4 , 5 , 5 ] [ Difficulty ] ) ;
8385: LD_INT 0
8387: PPUSH
8388: LD_INT 3
8390: PPUSH
8391: LD_INT 4
8393: PUSH
8394: LD_INT 5
8396: PUSH
8397: LD_INT 5
8399: PUSH
8400: EMPTY
8401: LIST
8402: LIST
8403: LIST
8404: PUSH
8405: LD_OWVAR 67
8409: ARRAY
8410: PPUSH
8411: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
8415: CALL_OW 44
8419: PPUSH
8420: LD_VAR 0 4
8424: PPUSH
8425: CALL_OW 52
// wait ( 0 0$01 ) ;
8429: LD_INT 35
8431: PPUSH
8432: CALL_OW 67
// ComMoveXY ( veh , 143 , 143 ) ;
8436: LD_VAR 0 4
8440: PPUSH
8441: LD_INT 143
8443: PPUSH
8444: LD_INT 143
8446: PPUSH
8447: CALL_OW 111
// end ;
8451: GO 8311
8453: POP
8454: POP
// end ;
8455: GO 8276
8457: POP
8458: POP
// end ;
8459: PPOPN 6
8461: END
// every 8 8$00 do var i , un , time ;
8462: GO 8464
8464: DISABLE
8465: LD_INT 0
8467: PPUSH
8468: PPUSH
8469: PPUSH
// begin time := [ 3 3$00 , 1 1$00 , 0 0$30 ] ;
8470: LD_ADDR_VAR 0 3
8474: PUSH
8475: LD_INT 6300
8477: PUSH
8478: LD_INT 2100
8480: PUSH
8481: LD_INT 1050
8483: PUSH
8484: EMPTY
8485: LIST
8486: LIST
8487: LIST
8488: ST_TO_ADDR
// wait ( time ) ;
8489: LD_VAR 0 3
8493: PPUSH
8494: CALL_OW 67
// uc_side := 3 ;
8498: LD_ADDR_OWVAR 20
8502: PUSH
8503: LD_INT 3
8505: ST_TO_ADDR
// uc_nation := 3 ;
8506: LD_ADDR_OWVAR 21
8510: PUSH
8511: LD_INT 3
8513: ST_TO_ADDR
// for i = 1 to 2 do
8514: LD_ADDR_VAR 0 1
8518: PUSH
8519: DOUBLE
8520: LD_INT 1
8522: DEC
8523: ST_TO_ADDR
8524: LD_INT 2
8526: PUSH
8527: FOR_TO
8528: IFFALSE 8591
// begin PrepareHuman ( false , 1 , 4 ) ;
8530: LD_INT 0
8532: PPUSH
8533: LD_INT 1
8535: PPUSH
8536: LD_INT 4
8538: PPUSH
8539: CALL_OW 380
// un := CreateHuman ;
8543: LD_ADDR_VAR 0 2
8547: PUSH
8548: CALL_OW 44
8552: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_dep_main ) ;
8553: LD_VAR 0 2
8557: PPUSH
8558: LD_INT 16
8560: PPUSH
8561: CALL_OW 52
// ComExitBuilding ( un ) ;
8565: LD_VAR 0 2
8569: PPUSH
8570: CALL_OW 122
// AddComAgressiveMove ( un , 41 , 76 ) ;
8574: LD_VAR 0 2
8578: PPUSH
8579: LD_INT 41
8581: PPUSH
8582: LD_INT 76
8584: PPUSH
8585: CALL_OW 174
// end ;
8589: GO 8527
8591: POP
8592: POP
// end ; end_of_file
8593: PPOPN 3
8595: END
// export function Action ; begin
8596: LD_INT 0
8598: PPUSH
// CenterNowOnXY ( 28 , 3 ) ;
8599: LD_INT 28
8601: PPUSH
8602: LD_INT 3
8604: PPUSH
8605: CALL_OW 86
// PlaceSeeing ( 41 , 76 , 1 , 10 ) ;
8609: LD_INT 41
8611: PPUSH
8612: LD_INT 76
8614: PPUSH
8615: LD_INT 1
8617: PPUSH
8618: LD_INT 10
8620: PPUSH
8621: CALL_OW 330
// RemoveSeeing ( 41 , 76 , 1 ) ;
8625: LD_INT 41
8627: PPUSH
8628: LD_INT 76
8630: PPUSH
8631: LD_INT 1
8633: PPUSH
8634: CALL_OW 331
// InGameOn ;
8638: CALL_OW 8
// SayRadio ( Harisson , D2-Har-1 ) ;
8642: LD_EXP 19
8646: PPUSH
8647: LD_STRING D2-Har-1
8649: PPUSH
8650: CALL_OW 94
// InGameOff ;
8654: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
8658: LD_STRING M1
8660: PPUSH
8661: CALL_OW 337
// end ;
8665: LD_VAR 0 1
8669: RET
// every 0 0$1 trigger buildings_counter > 1 do var un ;
8670: LD_EXP 4
8674: PUSH
8675: LD_INT 1
8677: GREATER
8678: IFFALSE 8769
8680: GO 8682
8682: DISABLE
8683: LD_INT 0
8685: PPUSH
// begin un := GetRandom ( sex_male ) [ 1 ] ;
8686: LD_ADDR_VAR 0 1
8690: PUSH
8691: LD_INT 1
8693: PPUSH
8694: CALL 608 0 1
8698: PUSH
8699: LD_INT 1
8701: ARRAY
8702: ST_TO_ADDR
// Say ( un , D2a-Sol1-1 ) ;
8703: LD_VAR 0 1
8707: PPUSH
8708: LD_STRING D2a-Sol1-1
8710: PPUSH
8711: CALL_OW 88
// if not un then
8715: LD_VAR 0 1
8719: NOT
8720: IFFALSE 8751
// begin un := GetRandom ( sex_female ) [ 1 ] ;
8722: LD_ADDR_VAR 0 1
8726: PUSH
8727: LD_INT 2
8729: PPUSH
8730: CALL 608 0 1
8734: PUSH
8735: LD_INT 1
8737: ARRAY
8738: ST_TO_ADDR
// Say ( un , D2a-FSol1-1 ) ;
8739: LD_VAR 0 1
8743: PPUSH
8744: LD_STRING D2a-FSol1-1
8746: PPUSH
8747: CALL_OW 88
// end ; if Khatam then
8751: LD_EXP 17
8755: IFFALSE 8769
// Say ( Khatam , D3b-Khat-3 ) ;
8757: LD_EXP 17
8761: PPUSH
8762: LD_STRING D3b-Khat-3
8764: PPUSH
8765: CALL_OW 88
// end ;
8769: PPOPN 1
8771: END
// every 0 0$1 trigger Frank and not Kikuchi and FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , GetX ( Frank ) , GetY ( Frank ) , 7 ] ] ) and not InBattle ( 1 ) and not InBattle ( 4 ) do var i , ape ;
8772: LD_EXP 15
8776: PUSH
8777: LD_EXP 18
8781: NOT
8782: AND
8783: PUSH
8784: LD_INT 22
8786: PUSH
8787: LD_INT 1
8789: PUSH
8790: EMPTY
8791: LIST
8792: LIST
8793: PUSH
8794: LD_INT 92
8796: PUSH
8797: LD_EXP 15
8801: PPUSH
8802: CALL_OW 250
8806: PUSH
8807: LD_EXP 15
8811: PPUSH
8812: CALL_OW 251
8816: PUSH
8817: LD_INT 7
8819: PUSH
8820: EMPTY
8821: LIST
8822: LIST
8823: LIST
8824: LIST
8825: PUSH
8826: EMPTY
8827: LIST
8828: LIST
8829: PPUSH
8830: CALL_OW 69
8834: AND
8835: PUSH
8836: LD_INT 1
8838: PPUSH
8839: CALL_OW 463
8843: NOT
8844: AND
8845: PUSH
8846: LD_INT 4
8848: PPUSH
8849: CALL_OW 463
8853: NOT
8854: AND
8855: IFFALSE 9442
8857: GO 8859
8859: DISABLE
8860: LD_INT 0
8862: PPUSH
8863: PPUSH
// begin InGameOn ;
8864: CALL_OW 8
// ape := FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) ;
8868: LD_ADDR_VAR 0 2
8872: PUSH
8873: LD_INT 22
8875: PUSH
8876: LD_INT 0
8878: PUSH
8879: EMPTY
8880: LIST
8881: LIST
8882: PUSH
8883: LD_INT 25
8885: PUSH
8886: LD_INT 12
8888: PUSH
8889: EMPTY
8890: LIST
8891: LIST
8892: PUSH
8893: EMPTY
8894: LIST
8895: LIST
8896: PPUSH
8897: CALL_OW 69
8901: ST_TO_ADDR
// ape := NearestUnitToUnit ( ape , Frank ) ;
8902: LD_ADDR_VAR 0 2
8906: PUSH
8907: LD_VAR 0 2
8911: PPUSH
8912: LD_EXP 15
8916: PPUSH
8917: CALL_OW 74
8921: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_dist , Frank , 20 ] ] ) do
8922: LD_ADDR_VAR 0 1
8926: PUSH
8927: LD_INT 22
8929: PUSH
8930: LD_INT 1
8932: PUSH
8933: EMPTY
8934: LIST
8935: LIST
8936: PUSH
8937: LD_INT 21
8939: PUSH
8940: LD_INT 1
8942: PUSH
8943: EMPTY
8944: LIST
8945: LIST
8946: PUSH
8947: LD_INT 91
8949: PUSH
8950: LD_EXP 15
8954: PUSH
8955: LD_INT 20
8957: PUSH
8958: EMPTY
8959: LIST
8960: LIST
8961: LIST
8962: PUSH
8963: EMPTY
8964: LIST
8965: LIST
8966: LIST
8967: PPUSH
8968: CALL_OW 69
8972: PUSH
8973: FOR_IN
8974: IFFALSE 8992
// ComTurnUnit ( i , Frank ) ;
8976: LD_VAR 0 1
8980: PPUSH
8981: LD_EXP 15
8985: PPUSH
8986: CALL_OW 119
8990: GO 8973
8992: POP
8993: POP
// SetSide ( Frank , 1 ) ;
8994: LD_EXP 15
8998: PPUSH
8999: LD_INT 1
9001: PPUSH
9002: CALL_OW 235
// ComMoveUnit ( JMM , Frank ) ;
9006: LD_EXP 9
9010: PPUSH
9011: LD_EXP 15
9015: PPUSH
9016: CALL_OW 112
// AddComTurnUnit ( JMM , Frank ) ;
9020: LD_EXP 9
9024: PPUSH
9025: LD_EXP 15
9029: PPUSH
9030: CALL_OW 179
// CenterOnUnits ( Frank ) ;
9034: LD_EXP 15
9038: PPUSH
9039: CALL_OW 85
// Say ( Frank , D3a-Frank-1 ) ;
9043: LD_EXP 15
9047: PPUSH
9048: LD_STRING D3a-Frank-1
9050: PPUSH
9051: CALL_OW 88
// ComMoveXY ( ape , 42 , 78 ) ;
9055: LD_VAR 0 2
9059: PPUSH
9060: LD_INT 42
9062: PPUSH
9063: LD_INT 78
9065: PPUSH
9066: CALL_OW 111
// AddComTurnUnit ( ape , Frank ) ;
9070: LD_VAR 0 2
9074: PPUSH
9075: LD_EXP 15
9079: PPUSH
9080: CALL_OW 179
// if Lisa then
9084: LD_EXP 14
9088: IFFALSE 9102
// Say ( Lisa , D3a-Lisa-1 ) ;
9090: LD_EXP 14
9094: PPUSH
9095: LD_STRING D3a-Lisa-1
9097: PPUSH
9098: CALL_OW 88
// Say ( JMM , D3a-JMM-1 ) ;
9102: LD_EXP 9
9106: PPUSH
9107: LD_STRING D3a-JMM-1
9109: PPUSH
9110: CALL_OW 88
// if Cyrus then
9114: LD_EXP 13
9118: IFFALSE 9132
// Say ( Cyrus , D3a-Cyrus-1 ) ;
9120: LD_EXP 13
9124: PPUSH
9125: LD_STRING D3a-Cyrus-1
9127: PPUSH
9128: CALL_OW 88
// if GetRandom ( sex_male ) then
9132: LD_INT 1
9134: PPUSH
9135: CALL 608 0 1
9139: IFFALSE 9160
// Say ( GetRandom ( sex_male ) [ 1 ] , D3a-Sol1-1 ) ;
9141: LD_INT 1
9143: PPUSH
9144: CALL 608 0 1
9148: PUSH
9149: LD_INT 1
9151: ARRAY
9152: PPUSH
9153: LD_STRING D3a-Sol1-1
9155: PPUSH
9156: CALL_OW 88
// if GetRandom ( sex_female ) then
9160: LD_INT 2
9162: PPUSH
9163: CALL 608 0 1
9167: IFFALSE 9188
// Say ( GetRandom ( sex_female ) [ 1 ] , D3a-FSol1-1 ) ;
9169: LD_INT 2
9171: PPUSH
9172: CALL 608 0 1
9176: PUSH
9177: LD_INT 1
9179: ARRAY
9180: PPUSH
9181: LD_STRING D3a-FSol1-1
9183: PPUSH
9184: CALL_OW 88
// if Gladstone then
9188: LD_EXP 16
9192: IFFALSE 9206
// Say ( Gladstone , D3a-Glad-1 ) ;
9194: LD_EXP 16
9198: PPUSH
9199: LD_STRING D3a-Glad-1
9201: PPUSH
9202: CALL_OW 88
// ComMoveXY ( ape , 60 , 113 ) ;
9206: LD_VAR 0 2
9210: PPUSH
9211: LD_INT 60
9213: PPUSH
9214: LD_INT 113
9216: PPUSH
9217: CALL_OW 111
// Say ( Frank , D3a-Frank-2 ) ;
9221: LD_EXP 15
9225: PPUSH
9226: LD_STRING D3a-Frank-2
9228: PPUSH
9229: CALL_OW 88
// ComTurnUnit ( Frank , JMM ) ;
9233: LD_EXP 15
9237: PPUSH
9238: LD_EXP 9
9242: PPUSH
9243: CALL_OW 119
// Say ( JMM , D3a-JMM-2 ) ;
9247: LD_EXP 9
9251: PPUSH
9252: LD_STRING D3a-JMM-2
9254: PPUSH
9255: CALL_OW 88
// RevealFogArea ( 1 , spotArea ) ;
9259: LD_INT 1
9261: PPUSH
9262: LD_INT 4
9264: PPUSH
9265: CALL_OW 332
// CenterOnXY ( 85 , 134 ) ;
9269: LD_INT 85
9271: PPUSH
9272: LD_INT 134
9274: PPUSH
9275: CALL_OW 84
// Say ( Frank , D3a-Frank-3 ) ;
9279: LD_EXP 15
9283: PPUSH
9284: LD_STRING D3a-Frank-3
9286: PPUSH
9287: CALL_OW 88
// Wait ( 0 0$01 ) ;
9291: LD_INT 35
9293: PPUSH
9294: CALL_OW 67
// CenterOnXY ( 166 , 136 ) ;
9298: LD_INT 166
9300: PPUSH
9301: LD_INT 136
9303: PPUSH
9304: CALL_OW 84
// Say ( JMM , D3a-JMM-3 ) ;
9308: LD_EXP 9
9312: PPUSH
9313: LD_STRING D3a-JMM-3
9315: PPUSH
9316: CALL_OW 88
// Wait ( 0 0$01 ) ;
9320: LD_INT 35
9322: PPUSH
9323: CALL_OW 67
// CenterNowOnUnits ( Frank ) ;
9327: LD_EXP 15
9331: PPUSH
9332: CALL_OW 87
// Say ( Frank , D3a-Frank-4 ) ;
9336: LD_EXP 15
9340: PPUSH
9341: LD_STRING D3a-Frank-4
9343: PPUSH
9344: CALL_OW 88
// if Lisa then
9348: LD_EXP 14
9352: IFFALSE 9366
// Say ( Lisa , D3a-Lisa-4 ) ;
9354: LD_EXP 14
9358: PPUSH
9359: LD_STRING D3a-Lisa-4
9361: PPUSH
9362: CALL_OW 88
// Say ( JMM , D3a-JMM-4 ) ;
9366: LD_EXP 9
9370: PPUSH
9371: LD_STRING D3a-JMM-4
9373: PPUSH
9374: CALL_OW 88
// Say ( Frank , D3a-Frank-5 ) ;
9378: LD_EXP 15
9382: PPUSH
9383: LD_STRING D3a-Frank-5
9385: PPUSH
9386: CALL_OW 88
// Say ( JMM , D3a-JMM-5 ) ;
9390: LD_EXP 9
9394: PPUSH
9395: LD_STRING D3a-JMM-5
9397: PPUSH
9398: CALL_OW 88
// Say ( Frank , D3a-Frank-6 ) ;
9402: LD_EXP 15
9406: PPUSH
9407: LD_STRING D3a-Frank-6
9409: PPUSH
9410: CALL_OW 88
// Say ( JMM , D3a-JMM-6 ) ;
9414: LD_EXP 9
9418: PPUSH
9419: LD_STRING D3a-JMM-6
9421: PPUSH
9422: CALL_OW 88
// Say ( Frank , D3a-Frank-7 ) ;
9426: LD_EXP 15
9430: PPUSH
9431: LD_STRING D3a-Frank-7
9433: PPUSH
9434: CALL_OW 88
// InGameOff ;
9438: CALL_OW 9
// end ;
9442: PPOPN 2
9444: END
// every 0 0$1 trigger Kikuchi and not Frank and FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , GetX ( Kikuchi ) , GetY ( Kikuchi ) , 7 ] ] ) and not InBattle ( 1 ) and not InBattle ( 4 ) do
9445: LD_EXP 18
9449: PUSH
9450: LD_EXP 15
9454: NOT
9455: AND
9456: PUSH
9457: LD_INT 22
9459: PUSH
9460: LD_INT 1
9462: PUSH
9463: EMPTY
9464: LIST
9465: LIST
9466: PUSH
9467: LD_INT 92
9469: PUSH
9470: LD_EXP 18
9474: PPUSH
9475: CALL_OW 250
9479: PUSH
9480: LD_EXP 18
9484: PPUSH
9485: CALL_OW 251
9489: PUSH
9490: LD_INT 7
9492: PUSH
9493: EMPTY
9494: LIST
9495: LIST
9496: LIST
9497: LIST
9498: PUSH
9499: EMPTY
9500: LIST
9501: LIST
9502: PPUSH
9503: CALL_OW 69
9507: AND
9508: PUSH
9509: LD_INT 1
9511: PPUSH
9512: CALL_OW 463
9516: NOT
9517: AND
9518: PUSH
9519: LD_INT 4
9521: PPUSH
9522: CALL_OW 463
9526: NOT
9527: AND
9528: IFFALSE 9708
9530: GO 9532
9532: DISABLE
// begin InGameOn ;
9533: CALL_OW 8
// ComTurnUnit ( JMM , Kikuchi ) ;
9537: LD_EXP 9
9541: PPUSH
9542: LD_EXP 18
9546: PPUSH
9547: CALL_OW 119
// ComTurnUnit ( Kikuchi , JMM ) ;
9551: LD_EXP 18
9555: PPUSH
9556: LD_EXP 9
9560: PPUSH
9561: CALL_OW 119
// CenterOnUnits ( Kikuchi ) ;
9565: LD_EXP 18
9569: PPUSH
9570: CALL_OW 85
// Say ( Kikuchi , D3b-Yam-1 ) ;
9574: LD_EXP 18
9578: PPUSH
9579: LD_STRING D3b-Yam-1
9581: PPUSH
9582: CALL_OW 88
// Say ( JMM , D3b-JMM-1 ) ;
9586: LD_EXP 9
9590: PPUSH
9591: LD_STRING D3b-JMM-1
9593: PPUSH
9594: CALL_OW 88
// RevealFogArea ( 1 , spotArea ) ;
9598: LD_INT 1
9600: PPUSH
9601: LD_INT 4
9603: PPUSH
9604: CALL_OW 332
// CenterOnXY ( 85 , 134 ) ;
9608: LD_INT 85
9610: PPUSH
9611: LD_INT 134
9613: PPUSH
9614: CALL_OW 84
// Say ( Kikuchi , D3b-Yam-2 ) ;
9618: LD_EXP 18
9622: PPUSH
9623: LD_STRING D3b-Yam-2
9625: PPUSH
9626: CALL_OW 88
// Wait ( 0 0$01 ) ;
9630: LD_INT 35
9632: PPUSH
9633: CALL_OW 67
// Say ( JMM , D3b-JMM-2 ) ;
9637: LD_EXP 9
9641: PPUSH
9642: LD_STRING D3b-JMM-2
9644: PPUSH
9645: CALL_OW 88
// CenterOnXY ( 166 , 136 ) ;
9649: LD_INT 166
9651: PPUSH
9652: LD_INT 136
9654: PPUSH
9655: CALL_OW 84
// Say ( Kikuchi , D3b-Yam-3 ) ;
9659: LD_EXP 18
9663: PPUSH
9664: LD_STRING D3b-Yam-3
9666: PPUSH
9667: CALL_OW 88
// CenterNowOnUnits ( JMM ) ;
9671: LD_EXP 9
9675: PPUSH
9676: CALL_OW 87
// Say ( JMM , D3b-JMM-3a ) ;
9680: LD_EXP 9
9684: PPUSH
9685: LD_STRING D3b-JMM-3a
9687: PPUSH
9688: CALL_OW 88
// SetSide ( Kikuchi , 1 ) ;
9692: LD_EXP 18
9696: PPUSH
9697: LD_INT 1
9699: PPUSH
9700: CALL_OW 235
// InGameOff ;
9704: CALL_OW 9
// end ;
9708: END
// every 0 0$1 trigger FilterUnitsInArea ( massDamageArea , [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] ] ) do var un , x , tw , i ;
9709: LD_INT 7
9711: PPUSH
9712: LD_INT 22
9714: PUSH
9715: LD_INT 1
9717: PUSH
9718: EMPTY
9719: LIST
9720: LIST
9721: PUSH
9722: LD_INT 3
9724: PUSH
9725: LD_INT 24
9727: PUSH
9728: LD_INT 1000
9730: PUSH
9731: EMPTY
9732: LIST
9733: LIST
9734: PUSH
9735: EMPTY
9736: LIST
9737: LIST
9738: PUSH
9739: EMPTY
9740: LIST
9741: LIST
9742: PPUSH
9743: CALL_OW 70
9747: IFFALSE 10203
9749: GO 9751
9751: DISABLE
9752: LD_INT 0
9754: PPUSH
9755: PPUSH
9756: PPUSH
9757: PPUSH
// begin repeat wait ( 0 0$1 ) ;
9758: LD_INT 35
9760: PPUSH
9761: CALL_OW 67
// un := FilterUnitsInArea ( massDamageArea , [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
9765: LD_ADDR_VAR 0 1
9769: PUSH
9770: LD_INT 7
9772: PPUSH
9773: LD_INT 22
9775: PUSH
9776: LD_INT 1
9778: PUSH
9779: EMPTY
9780: LIST
9781: LIST
9782: PUSH
9783: LD_INT 3
9785: PUSH
9786: LD_INT 24
9788: PUSH
9789: LD_INT 1000
9791: PUSH
9792: EMPTY
9793: LIST
9794: LIST
9795: PUSH
9796: EMPTY
9797: LIST
9798: LIST
9799: PUSH
9800: EMPTY
9801: LIST
9802: LIST
9803: PPUSH
9804: CALL_OW 70
9808: ST_TO_ADDR
// if not un then
9809: LD_VAR 0 1
9813: NOT
9814: IFFALSE 9818
// continue ;
9816: GO 9758
// tw := NearbyTowerHasEnergy ( un [ 1 ] ) ;
9818: LD_ADDR_VAR 0 3
9822: PUSH
9823: LD_VAR 0 1
9827: PUSH
9828: LD_INT 1
9830: ARRAY
9831: PPUSH
9832: CALL 2053 0 1
9836: ST_TO_ADDR
// until tw ;
9837: LD_VAR 0 3
9841: IFFALSE 9758
// DialogueOn ;
9843: CALL_OW 6
// CenterNowOnUnits ( tw ) ;
9847: LD_VAR 0 3
9851: PPUSH
9852: CALL_OW 87
// if Lisa then
9856: LD_EXP 14
9860: IFFALSE 9888
// begin Say ( Lisa , D5-Lisa-1 ) ;
9862: LD_EXP 14
9866: PPUSH
9867: LD_STRING D5-Lisa-1
9869: PPUSH
9870: CALL_OW 88
// Say ( JMM , D5-JMM-1a ) ;
9874: LD_EXP 9
9878: PPUSH
9879: LD_STRING D5-JMM-1a
9881: PPUSH
9882: CALL_OW 88
// end else
9886: GO 9900
// Say ( JMM , D5-JMM-1 ) ;
9888: LD_EXP 9
9892: PPUSH
9893: LD_STRING D5-JMM-1
9895: PPUSH
9896: CALL_OW 88
// DialogueOff ;
9900: CALL_OW 7
// while ( true ) do
9904: LD_INT 1
9906: IFFALSE 9962
// begin wait ( 0 0$01 ) ;
9908: LD_INT 35
9910: PPUSH
9911: CALL_OW 67
// x := FilterUnitsExceptArea ( northElectro , [ [ f_btype , b_oil_power ] , [ f_see , 1 ] ] ) ;
9915: LD_ADDR_VAR 0 2
9919: PUSH
9920: LD_INT 8
9922: PPUSH
9923: LD_INT 30
9925: PUSH
9926: LD_INT 26
9928: PUSH
9929: EMPTY
9930: LIST
9931: LIST
9932: PUSH
9933: LD_INT 101
9935: PUSH
9936: LD_INT 1
9938: PUSH
9939: EMPTY
9940: LIST
9941: LIST
9942: PUSH
9943: EMPTY
9944: LIST
9945: LIST
9946: PPUSH
9947: CALL_OW 71
9951: ST_TO_ADDR
// if x then
9952: LD_VAR 0 2
9956: IFFALSE 9960
// break ;
9958: GO 9962
// end ;
9960: GO 9904
// CenterOnUnits ( x [ 1 ] ) ;
9962: LD_VAR 0 2
9966: PUSH
9967: LD_INT 1
9969: ARRAY
9970: PPUSH
9971: CALL_OW 85
// if Frank and GetSide ( Frank ) = 1 then
9975: LD_EXP 15
9979: PUSH
9980: LD_EXP 15
9984: PPUSH
9985: CALL_OW 255
9989: PUSH
9990: LD_INT 1
9992: EQUAL
9993: AND
9994: IFFALSE 10010
// Say ( Frank , D5a-Frank-1 ) else
9996: LD_EXP 15
10000: PPUSH
10001: LD_STRING D5a-Frank-1
10003: PPUSH
10004: CALL_OW 88
10008: GO 10064
// if Kikuchi and GetSide ( Kikuchi ) = 1 then
10010: LD_EXP 18
10014: PUSH
10015: LD_EXP 18
10019: PPUSH
10020: CALL_OW 255
10024: PUSH
10025: LD_INT 1
10027: EQUAL
10028: AND
10029: IFFALSE 10045
// Say ( Kikuchi , D5a-Yam-1 ) else
10031: LD_EXP 18
10035: PPUSH
10036: LD_STRING D5a-Yam-1
10038: PPUSH
10039: CALL_OW 88
10043: GO 10064
// Say ( GetRandom ( sex_male ) [ 1 ] , D5a-Sol1-1 ) ;
10045: LD_INT 1
10047: PPUSH
10048: CALL 608 0 1
10052: PUSH
10053: LD_INT 1
10055: ARRAY
10056: PPUSH
10057: LD_STRING D5a-Sol1-1
10059: PPUSH
10060: CALL_OW 88
// Say ( JMM , D5a-JMM-1 ) ;
10064: LD_EXP 9
10068: PPUSH
10069: LD_STRING D5a-JMM-1
10071: PPUSH
10072: CALL_OW 88
// if Cyrus then
10076: LD_EXP 13
10080: IFFALSE 10094
// Say ( Cyrus , D5a-Cyrus-1 ) ;
10082: LD_EXP 13
10086: PPUSH
10087: LD_STRING D5a-Cyrus-1
10089: PPUSH
10090: CALL_OW 88
// x := false ;
10094: LD_ADDR_VAR 0 2
10098: PUSH
10099: LD_INT 0
10101: ST_TO_ADDR
// while ( true ) do
10102: LD_INT 1
10104: IFFALSE 10191
// begin wait ( 0 0$01 ) ;
10106: LD_INT 35
10108: PPUSH
10109: CALL_OW 67
// for i in FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) diff ru_dep_west do
10113: LD_ADDR_VAR 0 4
10117: PUSH
10118: LD_INT 2
10120: PUSH
10121: LD_INT 30
10123: PUSH
10124: LD_INT 0
10126: PUSH
10127: EMPTY
10128: LIST
10129: LIST
10130: PUSH
10131: LD_INT 30
10133: PUSH
10134: LD_INT 1
10136: PUSH
10137: EMPTY
10138: LIST
10139: LIST
10140: PUSH
10141: EMPTY
10142: LIST
10143: LIST
10144: LIST
10145: PPUSH
10146: CALL_OW 69
10150: PUSH
10151: LD_INT 1
10153: DIFF
10154: PUSH
10155: FOR_IN
10156: IFFALSE 10179
// if BaseNeedEnergy ( i ) then
10158: LD_VAR 0 4
10162: PPUSH
10163: CALL 1178 0 1
10167: IFFALSE 10177
// x := true ;
10169: LD_ADDR_VAR 0 2
10173: PUSH
10174: LD_INT 1
10176: ST_TO_ADDR
10177: GO 10155
10179: POP
10180: POP
// if x then
10181: LD_VAR 0 2
10185: IFFALSE 10189
// break ;
10187: GO 10191
// end ;
10189: GO 10102
// Say ( JMM , D5b-JMM-1 ) ;
10191: LD_EXP 9
10195: PPUSH
10196: LD_STRING D5b-JMM-1
10198: PPUSH
10199: CALL_OW 88
// end ;
10203: PPOPN 4
10205: END
// every 0 0$1 trigger time_to_end [ 1 ] < tick or FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) < 10 do
10206: LD_EXP 5
10210: PUSH
10211: LD_INT 1
10213: ARRAY
10214: PUSH
10215: LD_OWVAR 1
10219: LESS
10220: PUSH
10221: LD_INT 22
10223: PUSH
10224: LD_INT 3
10226: PUSH
10227: EMPTY
10228: LIST
10229: LIST
10230: PUSH
10231: LD_INT 21
10233: PUSH
10234: LD_INT 3
10236: PUSH
10237: EMPTY
10238: LIST
10239: LIST
10240: PUSH
10241: EMPTY
10242: LIST
10243: LIST
10244: PPUSH
10245: CALL_OW 69
10249: PUSH
10250: LD_INT 10
10252: LESS
10253: OR
10254: IFFALSE 10454
10256: GO 10258
10258: DISABLE
// begin if not IsDead ( ru_dep_main ) then
10259: LD_INT 16
10261: PPUSH
10262: CALL_OW 301
10266: NOT
10267: IFFALSE 10290
// begin SayRadio ( Harisson , D3b-Har-3 ) ;
10269: LD_EXP 19
10273: PPUSH
10274: LD_STRING D3b-Har-3
10276: PPUSH
10277: CALL_OW 94
// ChangeMissionObjectives ( M2a ) ;
10281: LD_STRING M2a
10283: PPUSH
10284: CALL_OW 337
// end else
10288: GO 10309
// begin SayRadio ( Harisson , D3b-Har-3a ) ;
10290: LD_EXP 19
10294: PPUSH
10295: LD_STRING D3b-Har-3a
10297: PPUSH
10298: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
10302: LD_STRING M2
10304: PPUSH
10305: CALL_OW 337
// end ; can_end := true ;
10309: LD_ADDR_EXP 6
10313: PUSH
10314: LD_INT 1
10316: ST_TO_ADDR
// SetAreaMapShow ( endArea , 1 ) ;
10317: LD_INT 9
10319: PPUSH
10320: LD_INT 1
10322: PPUSH
10323: CALL_OW 424
// Wait ( 0 0$02 ) ;
10327: LD_INT 70
10329: PPUSH
10330: CALL_OW 67
// if Lisa then
10334: LD_EXP 14
10338: IFFALSE 10352
// Say ( Lisa , D3b-Lisa ) ;
10340: LD_EXP 14
10344: PPUSH
10345: LD_STRING D3b-Lisa
10347: PPUSH
10348: CALL_OW 88
// if Bobby then
10352: LD_EXP 12
10356: IFFALSE 10370
// Say ( Bobby , D3b-Bobby-3 ) ;
10358: LD_EXP 12
10362: PPUSH
10363: LD_STRING D3b-Bobby-3
10365: PPUSH
10366: CALL_OW 88
// if Cyrus then
10370: LD_EXP 13
10374: IFFALSE 10388
// Say ( Cyrus , D3b-Cyrus-3 ) ;
10376: LD_EXP 13
10380: PPUSH
10381: LD_STRING D3b-Cyrus-3
10383: PPUSH
10384: CALL_OW 88
// if Frank and GetSide ( Frank ) = 1 then
10388: LD_EXP 15
10392: PUSH
10393: LD_EXP 15
10397: PPUSH
10398: CALL_OW 255
10402: PUSH
10403: LD_INT 1
10405: EQUAL
10406: AND
10407: IFFALSE 10421
// Say ( Frank , D3b-Frank-3 ) ;
10409: LD_EXP 15
10413: PPUSH
10414: LD_STRING D3b-Frank-3
10416: PPUSH
10417: CALL_OW 88
// if Kikuchi and GetSide ( Kikuchi ) = 1 then
10421: LD_EXP 18
10425: PUSH
10426: LD_EXP 18
10430: PPUSH
10431: CALL_OW 255
10435: PUSH
10436: LD_INT 1
10438: EQUAL
10439: AND
10440: IFFALSE 10454
// Say ( Kikuchi , D3b-Yam-4 ) ;
10442: LD_EXP 18
10446: PPUSH
10447: LD_STRING D3b-Yam-4
10449: PPUSH
10450: CALL_OW 88
// end ;
10454: END
// every 0 0$1 trigger time_to_end [ 2 ] < tick do
10455: LD_EXP 5
10459: PUSH
10460: LD_INT 2
10462: ARRAY
10463: PUSH
10464: LD_OWVAR 1
10468: LESS
10469: IFFALSE 10501
10471: GO 10473
10473: DISABLE
// begin SayRadio ( Harisson , D4-Har-1 ) ;
10474: LD_EXP 19
10478: PPUSH
10479: LD_STRING D4-Har-1
10481: PPUSH
10482: CALL_OW 94
// ChangeMissionObjectives ( M3 ) ;
10486: LD_STRING M3
10488: PPUSH
10489: CALL_OW 337
// must_end := true ;
10493: LD_ADDR_EXP 7
10497: PUSH
10498: LD_INT 1
10500: ST_TO_ADDR
// end ;
10501: END
// every 0 0$01 trigger time_to_end [ 3 ] < tick do
10502: LD_EXP 5
10506: PUSH
10507: LD_INT 3
10509: ARRAY
10510: PUSH
10511: LD_OWVAR 1
10515: LESS
10516: IFFALSE 10547
10518: GO 10520
10520: DISABLE
// begin if not IsDead ( ru_dep_main ) then
10521: LD_INT 16
10523: PPUSH
10524: CALL_OW 301
10528: NOT
10529: IFFALSE 10540
// YouLost ( TimeOut1 ) else
10531: LD_STRING TimeOut1
10533: PPUSH
10534: CALL_OW 104
10538: GO 10547
// YouLost ( TimeOut2 ) ;
10540: LD_STRING TimeOut2
10542: PPUSH
10543: CALL_OW 104
// end ;
10547: END
// every 0 0$1 trigger IsInArea ( JMM , endArea ) and can_end do var wait_on , i , tmp , m1 , m2 , m3 ;
10548: LD_EXP 9
10552: PPUSH
10553: LD_INT 9
10555: PPUSH
10556: CALL_OW 308
10560: PUSH
10561: LD_EXP 6
10565: AND
10566: IFFALSE 11666
10568: GO 10570
10570: DISABLE
10571: LD_INT 0
10573: PPUSH
10574: PPUSH
10575: PPUSH
10576: PPUSH
10577: PPUSH
10578: PPUSH
// begin wait_on := false ;
10579: LD_ADDR_VAR 0 1
10583: PUSH
10584: LD_INT 0
10586: ST_TO_ADDR
// if FilterPeople ( 1 ) + 0 > ( FilterPeopleArea ( 1 , endArea ) ^ FilterDriversArea ( 1 , endArea ) ) + 0 then
10587: LD_INT 1
10589: PPUSH
10590: CALL 1255 0 1
10594: PUSH
10595: LD_INT 0
10597: PLUS
10598: PUSH
10599: LD_INT 1
10601: PPUSH
10602: LD_INT 9
10604: PPUSH
10605: CALL 1346 0 2
10609: PUSH
10610: LD_INT 1
10612: PPUSH
10613: LD_INT 9
10615: PPUSH
10616: CALL 1393 0 2
10620: ADD
10621: PUSH
10622: LD_INT 0
10624: PLUS
10625: GREATER
10626: IFFALSE 10675
// case Query ( Q1 ) of 1 :
10628: LD_STRING Q1
10630: PPUSH
10631: CALL_OW 97
10635: PUSH
10636: LD_INT 1
10638: DOUBLE
10639: EQUAL
10640: IFTRUE 10644
10642: GO 10655
10644: POP
// wait_on := true ; 2 :
10645: LD_ADDR_VAR 0 1
10649: PUSH
10650: LD_INT 1
10652: ST_TO_ADDR
10653: GO 10675
10655: LD_INT 2
10657: DOUBLE
10658: EQUAL
10659: IFTRUE 10663
10661: GO 10674
10663: POP
// wait_on := false ; end ;
10664: LD_ADDR_VAR 0 1
10668: PUSH
10669: LD_INT 0
10671: ST_TO_ADDR
10672: GO 10675
10674: POP
// repeat wait ( 0 0$01 ) ;
10675: LD_INT 35
10677: PPUSH
10678: CALL_OW 67
// until ( not wait_on ) or ( FilterPeople ( 1 ) + 0 ) = ( FilterPeopleArea ( 1 , endArea ) ^ FilterDriversArea ( 1 , endArea ) ) + 0 ;
10682: LD_VAR 0 1
10686: NOT
10687: PUSH
10688: LD_INT 1
10690: PPUSH
10691: CALL 1255 0 1
10695: PUSH
10696: LD_INT 0
10698: PLUS
10699: PUSH
10700: LD_INT 1
10702: PPUSH
10703: LD_INT 9
10705: PPUSH
10706: CALL 1346 0 2
10710: PUSH
10711: LD_INT 1
10713: PPUSH
10714: LD_INT 9
10716: PPUSH
10717: CALL 1393 0 2
10721: ADD
10722: PUSH
10723: LD_INT 0
10725: PLUS
10726: EQUAL
10727: OR
10728: IFFALSE 10675
// DialogueOn ;
10730: CALL_OW 6
// CenterNowOnUnits ( JMM ) ;
10734: LD_EXP 9
10738: PPUSH
10739: CALL_OW 87
// Say ( JMM , D6-JMM-1 ) ;
10743: LD_EXP 9
10747: PPUSH
10748: LD_STRING D6-JMM-1
10750: PPUSH
10751: CALL_OW 88
// SayRadio ( Harisson , D6-Har-1 ) ;
10755: LD_EXP 19
10759: PPUSH
10760: LD_STRING D6-Har-1
10762: PPUSH
10763: CALL_OW 94
// Say ( JMM , D6-JMM-2 ) ;
10767: LD_EXP 9
10771: PPUSH
10772: LD_STRING D6-JMM-2
10774: PPUSH
10775: CALL_OW 88
// SayRadio ( Harisson , D6-Har-2 ) ;
10779: LD_EXP 19
10783: PPUSH
10784: LD_STRING D6-Har-2
10786: PPUSH
10787: CALL_OW 94
// Say ( JMM , D6-JMM-3 ) ;
10791: LD_EXP 9
10795: PPUSH
10796: LD_STRING D6-JMM-3
10798: PPUSH
10799: CALL_OW 88
// SayRadio ( Harisson , D6-Har-3 ) ;
10803: LD_EXP 19
10807: PPUSH
10808: LD_STRING D6-Har-3
10810: PPUSH
10811: CALL_OW 94
// Say ( JMM , D6-JMM-4 ) ;
10815: LD_EXP 9
10819: PPUSH
10820: LD_STRING D6-JMM-4
10822: PPUSH
10823: CALL_OW 88
// SayRadio ( Harisson , D6-Har-4 ) ;
10827: LD_EXP 19
10831: PPUSH
10832: LD_STRING D6-Har-4
10834: PPUSH
10835: CALL_OW 94
// Say ( JMM , D6-JMM-5 ) ;
10839: LD_EXP 9
10843: PPUSH
10844: LD_STRING D6-JMM-5
10846: PPUSH
10847: CALL_OW 88
// DialogueOff ;
10851: CALL_OW 7
// m1 := false ;
10855: LD_ADDR_VAR 0 4
10859: PUSH
10860: LD_INT 0
10862: ST_TO_ADDR
// m2 := false ;
10863: LD_ADDR_VAR 0 5
10867: PUSH
10868: LD_INT 0
10870: ST_TO_ADDR
// m3 := false ;
10871: LD_ADDR_VAR 0 6
10875: PUSH
10876: LD_INT 0
10878: ST_TO_ADDR
// tmp := FilterBuildings ( 3 ) ;
10879: LD_ADDR_VAR 0 3
10883: PUSH
10884: LD_INT 3
10886: PPUSH
10887: CALL 1524 0 1
10891: ST_TO_ADDR
// if tmp >= 35 then
10892: LD_VAR 0 3
10896: PUSH
10897: LD_INT 35
10899: GREATEREQUAL
10900: IFFALSE 10937
// begin AddMedal ( Destroy1 , - 1 ) ;
10902: LD_STRING Destroy1
10904: PPUSH
10905: LD_INT 1
10907: NEG
10908: PPUSH
10909: CALL_OW 101
// AddMedal ( Destroy2 , - 1 ) ;
10913: LD_STRING Destroy2
10915: PPUSH
10916: LD_INT 1
10918: NEG
10919: PPUSH
10920: CALL_OW 101
// AddMedal ( Destroy3 , - 1 ) ;
10924: LD_STRING Destroy3
10926: PPUSH
10927: LD_INT 1
10929: NEG
10930: PPUSH
10931: CALL_OW 101
// end else
10935: GO 11048
// begin AddMedal ( Destroy1 , 1 ) ;
10937: LD_STRING Destroy1
10939: PPUSH
10940: LD_INT 1
10942: PPUSH
10943: CALL_OW 101
// m1 := true ;
10947: LD_ADDR_VAR 0 4
10951: PUSH
10952: LD_INT 1
10954: ST_TO_ADDR
// if tmp >= 25 then
10955: LD_VAR 0 3
10959: PUSH
10960: LD_INT 25
10962: GREATEREQUAL
10963: IFFALSE 10989
// begin AddMedal ( Destroy2 , - 1 ) ;
10965: LD_STRING Destroy2
10967: PPUSH
10968: LD_INT 1
10970: NEG
10971: PPUSH
10972: CALL_OW 101
// AddMedal ( Destroy3 , - 1 ) ;
10976: LD_STRING Destroy3
10978: PPUSH
10979: LD_INT 1
10981: NEG
10982: PPUSH
10983: CALL_OW 101
// end else
10987: GO 11048
// begin AddMedal ( Destroy2 , 1 ) ;
10989: LD_STRING Destroy2
10991: PPUSH
10992: LD_INT 1
10994: PPUSH
10995: CALL_OW 101
// m2 := true ;
10999: LD_ADDR_VAR 0 5
11003: PUSH
11004: LD_INT 1
11006: ST_TO_ADDR
// if tmp >= 15 then
11007: LD_VAR 0 3
11011: PUSH
11012: LD_INT 15
11014: GREATEREQUAL
11015: IFFALSE 11030
// AddMedal ( Destroy3 , - 1 ) else
11017: LD_STRING Destroy3
11019: PPUSH
11020: LD_INT 1
11022: NEG
11023: PPUSH
11024: CALL_OW 101
11028: GO 11048
// begin AddMedal ( Destroy3 , 1 ) ;
11030: LD_STRING Destroy3
11032: PPUSH
11033: LD_INT 1
11035: PPUSH
11036: CALL_OW 101
// m3 := true ;
11040: LD_ADDR_VAR 0 6
11044: PUSH
11045: LD_INT 1
11047: ST_TO_ADDR
// end ; end ; end ; if tick <= 32 32$00 then
11048: LD_OWVAR 1
11052: PUSH
11053: LD_INT 67200
11055: LESSEQUAL
11056: IFFALSE 11065
// SetAchievement ( ACH_ASPEED_7 ) ;
11058: LD_STRING ACH_ASPEED_7
11060: PPUSH
11061: CALL_OW 543
// if m1 and m2 and m3 and Difficulty >= 3 then
11065: LD_VAR 0 4
11069: PUSH
11070: LD_VAR 0 5
11074: AND
11075: PUSH
11076: LD_VAR 0 6
11080: AND
11081: PUSH
11082: LD_OWVAR 67
11086: PUSH
11087: LD_INT 3
11089: GREATEREQUAL
11090: AND
11091: IFFALSE 11103
// SetAchievementEX ( ACH_AMER , 7 ) ;
11093: LD_STRING ACH_AMER
11095: PPUSH
11096: LD_INT 7
11098: PPUSH
11099: CALL_OW 564
// GiveMedals ( MAIN ) ;
11103: LD_STRING MAIN
11105: PPUSH
11106: CALL_OW 102
// tmp := FilterPeopleArea ( 1 , endArea ) union FilterDriversArea ( 1 , endArea ) ;
11110: LD_ADDR_VAR 0 3
11114: PUSH
11115: LD_INT 1
11117: PPUSH
11118: LD_INT 9
11120: PPUSH
11121: CALL 1346 0 2
11125: PUSH
11126: LD_INT 1
11128: PPUSH
11129: LD_INT 9
11131: PPUSH
11132: CALL 1393 0 2
11136: UNION
11137: ST_TO_ADDR
// RewardPeople ( tmp ) ;
11138: LD_VAR 0 3
11142: PPUSH
11143: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
11147: LD_EXP 9
11151: PPUSH
11152: LD_EXP 3
11156: PUSH
11157: LD_STRING JMM
11159: STR
11160: PPUSH
11161: CALL_OW 38
// if Brown in tmp then
11165: LD_EXP 10
11169: PUSH
11170: LD_VAR 0 3
11174: IN
11175: IFFALSE 11195
// SaveCharacters ( Brown , mission_prefix & Brown ) ;
11177: LD_EXP 10
11181: PPUSH
11182: LD_EXP 3
11186: PUSH
11187: LD_STRING Brown
11189: STR
11190: PPUSH
11191: CALL_OW 38
// if Donaldson in tmp then
11195: LD_EXP 11
11199: PUSH
11200: LD_VAR 0 3
11204: IN
11205: IFFALSE 11225
// SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
11207: LD_EXP 11
11211: PPUSH
11212: LD_EXP 3
11216: PUSH
11217: LD_STRING Donaldson
11219: STR
11220: PPUSH
11221: CALL_OW 38
// if Bobby in tmp then
11225: LD_EXP 12
11229: PUSH
11230: LD_VAR 0 3
11234: IN
11235: IFFALSE 11255
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
11237: LD_EXP 12
11241: PPUSH
11242: LD_EXP 3
11246: PUSH
11247: LD_STRING Bobby
11249: STR
11250: PPUSH
11251: CALL_OW 38
// if Cyrus in tmp then
11255: LD_EXP 13
11259: PUSH
11260: LD_VAR 0 3
11264: IN
11265: IFFALSE 11285
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
11267: LD_EXP 13
11271: PPUSH
11272: LD_EXP 3
11276: PUSH
11277: LD_STRING Cyrus
11279: STR
11280: PPUSH
11281: CALL_OW 38
// if Lisa in tmp then
11285: LD_EXP 14
11289: PUSH
11290: LD_VAR 0 3
11294: IN
11295: IFFALSE 11315
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
11297: LD_EXP 14
11301: PPUSH
11302: LD_EXP 3
11306: PUSH
11307: LD_STRING Lisa
11309: STR
11310: PPUSH
11311: CALL_OW 38
// if Frank in tmp then
11315: LD_EXP 15
11319: PUSH
11320: LD_VAR 0 3
11324: IN
11325: IFFALSE 11345
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
11327: LD_EXP 15
11331: PPUSH
11332: LD_EXP 3
11336: PUSH
11337: LD_STRING Frank
11339: STR
11340: PPUSH
11341: CALL_OW 38
// if Gladstone in tmp then
11345: LD_EXP 16
11349: PUSH
11350: LD_VAR 0 3
11354: IN
11355: IFFALSE 11375
// SaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
11357: LD_EXP 16
11361: PPUSH
11362: LD_EXP 3
11366: PUSH
11367: LD_STRING Gladstone
11369: STR
11370: PPUSH
11371: CALL_OW 38
// if Khatam in tmp then
11375: LD_EXP 17
11379: PUSH
11380: LD_VAR 0 3
11384: IN
11385: IFFALSE 11405
// SaveCharacters ( Khatam , mission_prefix & Khatam ) ;
11387: LD_EXP 17
11391: PPUSH
11392: LD_EXP 3
11396: PUSH
11397: LD_STRING Khatam
11399: STR
11400: PPUSH
11401: CALL_OW 38
// if Kikuchi in tmp then
11405: LD_EXP 18
11409: PUSH
11410: LD_VAR 0 3
11414: IN
11415: IFFALSE 11435
// SaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
11417: LD_EXP 18
11421: PPUSH
11422: LD_EXP 3
11426: PUSH
11427: LD_STRING Kikuchi
11429: STR
11430: PPUSH
11431: CALL_OW 38
// SaveCharacters ( tmp diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam ] , mission_prefix & others ) ;
11435: LD_VAR 0 3
11439: PUSH
11440: LD_EXP 9
11444: PUSH
11445: LD_EXP 10
11449: PUSH
11450: LD_EXP 11
11454: PUSH
11455: LD_EXP 12
11459: PUSH
11460: LD_EXP 13
11464: PUSH
11465: LD_EXP 14
11469: PUSH
11470: LD_EXP 15
11474: PUSH
11475: LD_EXP 16
11479: PUSH
11480: LD_EXP 18
11484: PUSH
11485: LD_EXP 17
11489: PUSH
11490: EMPTY
11491: LIST
11492: LIST
11493: LIST
11494: LIST
11495: LIST
11496: LIST
11497: LIST
11498: LIST
11499: LIST
11500: LIST
11501: DIFF
11502: PPUSH
11503: LD_EXP 3
11507: PUSH
11508: LD_STRING others
11510: STR
11511: PPUSH
11512: CALL_OW 38
// SaveVariable ( tick , 07_time ) ;
11516: LD_OWVAR 1
11520: PPUSH
11521: LD_STRING 07_time
11523: PPUSH
11524: CALL_OW 39
// tmp := [ ] ;
11528: LD_ADDR_VAR 0 3
11532: PUSH
11533: EMPTY
11534: ST_TO_ADDR
// for i in FilterUnitsInArea ( endArea , [ [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_vehicle ] ] ] ) do
11535: LD_ADDR_VAR 0 2
11539: PUSH
11540: LD_INT 9
11542: PPUSH
11543: LD_INT 22
11545: PUSH
11546: LD_INT 1
11548: PUSH
11549: EMPTY
11550: LIST
11551: LIST
11552: PUSH
11553: LD_INT 23
11555: PUSH
11556: LD_INT 1
11558: PUSH
11559: EMPTY
11560: LIST
11561: LIST
11562: PUSH
11563: LD_INT 21
11565: PUSH
11566: LD_INT 2
11568: PUSH
11569: EMPTY
11570: LIST
11571: LIST
11572: PUSH
11573: EMPTY
11574: LIST
11575: LIST
11576: LIST
11577: PUSH
11578: EMPTY
11579: LIST
11580: PPUSH
11581: CALL_OW 70
11585: PUSH
11586: FOR_IN
11587: IFFALSE 11648
// tmp := tmp ^ [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ;
11589: LD_ADDR_VAR 0 3
11593: PUSH
11594: LD_VAR 0 3
11598: PUSH
11599: LD_VAR 0 2
11603: PPUSH
11604: CALL_OW 265
11608: PUSH
11609: LD_VAR 0 2
11613: PPUSH
11614: CALL_OW 262
11618: PUSH
11619: LD_VAR 0 2
11623: PPUSH
11624: CALL_OW 263
11628: PUSH
11629: LD_VAR 0 2
11633: PPUSH
11634: CALL_OW 264
11638: PUSH
11639: EMPTY
11640: LIST
11641: LIST
11642: LIST
11643: LIST
11644: ADD
11645: ST_TO_ADDR
11646: GO 11586
11648: POP
11649: POP
// SaveVariable ( tmp , 07_vehicles ) ;
11650: LD_VAR 0 3
11654: PPUSH
11655: LD_STRING 07_vehicles
11657: PPUSH
11658: CALL_OW 39
// YouWin ;
11662: CALL_OW 103
// end ; end_of_file
11666: PPOPN 6
11668: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
11669: LD_VAR 0 1
11673: PPUSH
11674: CALL 27825 0 1
// if un = JMM then
11678: LD_VAR 0 1
11682: PUSH
11683: LD_EXP 9
11687: EQUAL
11688: IFFALSE 11697
// YouLost ( JMM ) ;
11690: LD_STRING JMM
11692: PPUSH
11693: CALL_OW 104
// if GetType ( un ) = unit_building then
11697: LD_VAR 0 1
11701: PPUSH
11702: CALL_OW 247
11706: PUSH
11707: LD_INT 3
11709: EQUAL
11710: IFFALSE 11726
// buildings_counter := buildings_counter + 1 ;
11712: LD_ADDR_EXP 4
11716: PUSH
11717: LD_EXP 4
11721: PUSH
11722: LD_INT 1
11724: PLUS
11725: ST_TO_ADDR
// if un in FilterUnitsInArea ( baseArea , [ f_or , [ f_btype , b_turret ] , [ f_btype , b_bunker ] ] ) then
11726: LD_VAR 0 1
11730: PUSH
11731: LD_INT 6
11733: PPUSH
11734: LD_INT 2
11736: PUSH
11737: LD_INT 30
11739: PUSH
11740: LD_INT 33
11742: PUSH
11743: EMPTY
11744: LIST
11745: LIST
11746: PUSH
11747: LD_INT 30
11749: PUSH
11750: LD_INT 32
11752: PUSH
11753: EMPTY
11754: LIST
11755: LIST
11756: PUSH
11757: EMPTY
11758: LIST
11759: LIST
11760: LIST
11761: PPUSH
11762: CALL_OW 70
11766: IN
11767: IFFALSE 11826
// ru_rebuild_list := ru_rebuild_list ^ [ GetBType ( un ) , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ;
11769: LD_ADDR_EXP 20
11773: PUSH
11774: LD_EXP 20
11778: PUSH
11779: LD_VAR 0 1
11783: PPUSH
11784: CALL_OW 266
11788: PUSH
11789: LD_VAR 0 1
11793: PPUSH
11794: CALL_OW 250
11798: PUSH
11799: LD_VAR 0 1
11803: PPUSH
11804: CALL_OW 251
11808: PUSH
11809: LD_VAR 0 1
11813: PPUSH
11814: CALL_OW 254
11818: PUSH
11819: EMPTY
11820: LIST
11821: LIST
11822: LIST
11823: LIST
11824: ADD
11825: ST_TO_ADDR
// if un = ru_dep_main then
11826: LD_VAR 0 1
11830: PUSH
11831: LD_INT 16
11833: EQUAL
11834: IFFALSE 11843
// ChangeMissionObjectives ( M1a ) ;
11836: LD_STRING M1a
11838: PPUSH
11839: CALL_OW 337
// if GetType ( un ) = unit_human and GetSide ( un ) = 3 then
11843: LD_VAR 0 1
11847: PPUSH
11848: CALL_OW 247
11852: PUSH
11853: LD_INT 1
11855: EQUAL
11856: PUSH
11857: LD_VAR 0 1
11861: PPUSH
11862: CALL_OW 255
11866: PUSH
11867: LD_INT 3
11869: EQUAL
11870: AND
11871: IFFALSE 11887
// kill_counter := kill_counter + 1 ;
11873: LD_ADDR_EXP 8
11877: PUSH
11878: LD_EXP 8
11882: PUSH
11883: LD_INT 1
11885: PLUS
11886: ST_TO_ADDR
// end ;
11887: PPOPN 1
11889: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
11890: LD_VAR 0 1
11894: PPUSH
11895: LD_VAR 0 2
11899: PPUSH
11900: CALL 27945 0 2
// end ;
11904: PPOPN 2
11906: END
// on UnitGoesToRed ( un ) do begin if GetBType ( un ) = b_bunker and GetTag ( un ) = 7 then
11907: LD_VAR 0 1
11911: PPUSH
11912: CALL_OW 266
11916: PUSH
11917: LD_INT 32
11919: EQUAL
11920: PUSH
11921: LD_VAR 0 1
11925: PPUSH
11926: CALL_OW 110
11930: PUSH
11931: LD_INT 7
11933: EQUAL
11934: AND
11935: IFFALSE 11949
// SetTag ( un , 0 ) ;
11937: LD_VAR 0 1
11941: PPUSH
11942: LD_INT 0
11944: PPUSH
11945: CALL_OW 109
// end ;
11949: PPOPN 1
11951: END
// on BuildingStarted ( b , builder ) do var i ;
11952: LD_INT 0
11954: PPUSH
// begin if GetSide ( b ) = 3 then
11955: LD_VAR 0 1
11959: PPUSH
11960: CALL_OW 255
11964: PUSH
11965: LD_INT 3
11967: EQUAL
11968: IFFALSE 12008
// for i = 1 to 4 do
11970: LD_ADDR_VAR 0 3
11974: PUSH
11975: DOUBLE
11976: LD_INT 1
11978: DEC
11979: ST_TO_ADDR
11980: LD_INT 4
11982: PUSH
11983: FOR_TO
11984: IFFALSE 12006
// ru_rebuild_list := Delete ( ru_rebuild_list , 1 ) ;
11986: LD_ADDR_EXP 20
11990: PUSH
11991: LD_EXP 20
11995: PPUSH
11996: LD_INT 1
11998: PPUSH
11999: CALL_OW 3
12003: ST_TO_ADDR
12004: GO 11983
12006: POP
12007: POP
// end ;
12008: PPOPN 3
12010: END
// on BuildingComplete ( b ) do if GetBType ( b ) in [ b_bunker , b_turret ] then
12011: LD_VAR 0 1
12015: PPUSH
12016: CALL_OW 266
12020: PUSH
12021: LD_INT 32
12023: PUSH
12024: LD_INT 33
12026: PUSH
12027: EMPTY
12028: LIST
12029: LIST
12030: IN
12031: IFFALSE 12045
// ComPlaceWeapon ( b , ru_gatling_gun ) ;
12033: LD_VAR 0 1
12037: PPUSH
12038: LD_INT 43
12040: PPUSH
12041: CALL_OW 148
12045: PPOPN 1
12047: END
// on LeaveBuilding ( b , un ) do begin if b in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) then
12048: LD_VAR 0 1
12052: PUSH
12053: LD_INT 22
12055: PUSH
12056: LD_INT 3
12058: PUSH
12059: EMPTY
12060: LIST
12061: LIST
12062: PUSH
12063: LD_INT 2
12065: PUSH
12066: LD_INT 30
12068: PUSH
12069: LD_INT 31
12071: PUSH
12072: EMPTY
12073: LIST
12074: LIST
12075: PUSH
12076: LD_INT 30
12078: PUSH
12079: LD_INT 32
12081: PUSH
12082: EMPTY
12083: LIST
12084: LIST
12085: PUSH
12086: EMPTY
12087: LIST
12088: LIST
12089: LIST
12090: PUSH
12091: EMPTY
12092: LIST
12093: LIST
12094: PPUSH
12095: CALL_OW 69
12099: IN
12100: IFFALSE 12122
// GoToAnotherTower ( un , b , 134 , 136 ) ;
12102: LD_VAR 0 2
12106: PPUSH
12107: LD_VAR 0 1
12111: PPUSH
12112: LD_INT 134
12114: PPUSH
12115: LD_INT 136
12117: PPUSH
12118: CALL 838 0 4
// end ;
12122: PPOPN 2
12124: END
// on EnterBuilding ( b , un ) do begin if b in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) then
12125: LD_VAR 0 1
12129: PUSH
12130: LD_INT 22
12132: PUSH
12133: LD_INT 3
12135: PUSH
12136: EMPTY
12137: LIST
12138: LIST
12139: PUSH
12140: LD_INT 30
12142: PUSH
12143: LD_INT 32
12145: PUSH
12146: EMPTY
12147: LIST
12148: LIST
12149: PUSH
12150: EMPTY
12151: LIST
12152: LIST
12153: PPUSH
12154: CALL_OW 69
12158: IN
12159: IFFALSE 12173
// SetTag ( b , 0 ) ;
12161: LD_VAR 0 1
12165: PPUSH
12166: LD_INT 0
12168: PPUSH
12169: CALL_OW 109
// end ; end_of_file end_of_file
12173: PPOPN 2
12175: END
// every 0 0$1 do
12176: GO 12178
12178: DISABLE
// begin enable ;
12179: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
12180: LD_STRING updateTimer(
12182: PUSH
12183: LD_OWVAR 1
12187: STR
12188: PUSH
12189: LD_STRING );
12191: STR
12192: PPUSH
12193: CALL_OW 559
// end ;
12197: END
// export function SOS_MapStart ( ) ; begin
12198: LD_INT 0
12200: PPUSH
// if streamModeActive then
12201: LD_EXP 21
12205: IFFALSE 12214
// DefineStreamItems ( true ) ;
12207: LD_INT 1
12209: PPUSH
12210: CALL 13868 0 1
// UpdateFactoryWaypoints ( ) ;
12214: CALL 26729 0 0
// UpdateWarehouseGatheringPoints ( ) ;
12218: CALL 26986 0 0
// end ;
12222: LD_VAR 0 1
12226: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
12227: LD_INT 0
12229: PPUSH
// if p2 = 100 then
12230: LD_VAR 0 2
12234: PUSH
12235: LD_INT 100
12237: EQUAL
12238: IFFALSE 13241
// begin if not StreamModeActive then
12240: LD_EXP 21
12244: NOT
12245: IFFALSE 12255
// StreamModeActive := true ;
12247: LD_ADDR_EXP 21
12251: PUSH
12252: LD_INT 1
12254: ST_TO_ADDR
// if p3 = 0 then
12255: LD_VAR 0 3
12259: PUSH
12260: LD_INT 0
12262: EQUAL
12263: IFFALSE 12269
// InitStreamMode ;
12265: CALL 13404 0 0
// if p3 = 1 then
12269: LD_VAR 0 3
12273: PUSH
12274: LD_INT 1
12276: EQUAL
12277: IFFALSE 12287
// sRocket := true ;
12279: LD_ADDR_EXP 26
12283: PUSH
12284: LD_INT 1
12286: ST_TO_ADDR
// if p3 = 2 then
12287: LD_VAR 0 3
12291: PUSH
12292: LD_INT 2
12294: EQUAL
12295: IFFALSE 12305
// sSpeed := true ;
12297: LD_ADDR_EXP 25
12301: PUSH
12302: LD_INT 1
12304: ST_TO_ADDR
// if p3 = 3 then
12305: LD_VAR 0 3
12309: PUSH
12310: LD_INT 3
12312: EQUAL
12313: IFFALSE 12323
// sEngine := true ;
12315: LD_ADDR_EXP 27
12319: PUSH
12320: LD_INT 1
12322: ST_TO_ADDR
// if p3 = 4 then
12323: LD_VAR 0 3
12327: PUSH
12328: LD_INT 4
12330: EQUAL
12331: IFFALSE 12341
// sSpec := true ;
12333: LD_ADDR_EXP 24
12337: PUSH
12338: LD_INT 1
12340: ST_TO_ADDR
// if p3 = 5 then
12341: LD_VAR 0 3
12345: PUSH
12346: LD_INT 5
12348: EQUAL
12349: IFFALSE 12359
// sLevel := true ;
12351: LD_ADDR_EXP 28
12355: PUSH
12356: LD_INT 1
12358: ST_TO_ADDR
// if p3 = 6 then
12359: LD_VAR 0 3
12363: PUSH
12364: LD_INT 6
12366: EQUAL
12367: IFFALSE 12377
// sArmoury := true ;
12369: LD_ADDR_EXP 29
12373: PUSH
12374: LD_INT 1
12376: ST_TO_ADDR
// if p3 = 7 then
12377: LD_VAR 0 3
12381: PUSH
12382: LD_INT 7
12384: EQUAL
12385: IFFALSE 12395
// sRadar := true ;
12387: LD_ADDR_EXP 30
12391: PUSH
12392: LD_INT 1
12394: ST_TO_ADDR
// if p3 = 8 then
12395: LD_VAR 0 3
12399: PUSH
12400: LD_INT 8
12402: EQUAL
12403: IFFALSE 12413
// sBunker := true ;
12405: LD_ADDR_EXP 31
12409: PUSH
12410: LD_INT 1
12412: ST_TO_ADDR
// if p3 = 9 then
12413: LD_VAR 0 3
12417: PUSH
12418: LD_INT 9
12420: EQUAL
12421: IFFALSE 12431
// sHack := true ;
12423: LD_ADDR_EXP 32
12427: PUSH
12428: LD_INT 1
12430: ST_TO_ADDR
// if p3 = 10 then
12431: LD_VAR 0 3
12435: PUSH
12436: LD_INT 10
12438: EQUAL
12439: IFFALSE 12449
// sFire := true ;
12441: LD_ADDR_EXP 33
12445: PUSH
12446: LD_INT 1
12448: ST_TO_ADDR
// if p3 = 11 then
12449: LD_VAR 0 3
12453: PUSH
12454: LD_INT 11
12456: EQUAL
12457: IFFALSE 12467
// sRefresh := true ;
12459: LD_ADDR_EXP 34
12463: PUSH
12464: LD_INT 1
12466: ST_TO_ADDR
// if p3 = 12 then
12467: LD_VAR 0 3
12471: PUSH
12472: LD_INT 12
12474: EQUAL
12475: IFFALSE 12485
// sExp := true ;
12477: LD_ADDR_EXP 35
12481: PUSH
12482: LD_INT 1
12484: ST_TO_ADDR
// if p3 = 13 then
12485: LD_VAR 0 3
12489: PUSH
12490: LD_INT 13
12492: EQUAL
12493: IFFALSE 12503
// sDepot := true ;
12495: LD_ADDR_EXP 36
12499: PUSH
12500: LD_INT 1
12502: ST_TO_ADDR
// if p3 = 14 then
12503: LD_VAR 0 3
12507: PUSH
12508: LD_INT 14
12510: EQUAL
12511: IFFALSE 12521
// sFlag := true ;
12513: LD_ADDR_EXP 37
12517: PUSH
12518: LD_INT 1
12520: ST_TO_ADDR
// if p3 = 15 then
12521: LD_VAR 0 3
12525: PUSH
12526: LD_INT 15
12528: EQUAL
12529: IFFALSE 12539
// sKamikadze := true ;
12531: LD_ADDR_EXP 45
12535: PUSH
12536: LD_INT 1
12538: ST_TO_ADDR
// if p3 = 16 then
12539: LD_VAR 0 3
12543: PUSH
12544: LD_INT 16
12546: EQUAL
12547: IFFALSE 12557
// sTroll := true ;
12549: LD_ADDR_EXP 46
12553: PUSH
12554: LD_INT 1
12556: ST_TO_ADDR
// if p3 = 17 then
12557: LD_VAR 0 3
12561: PUSH
12562: LD_INT 17
12564: EQUAL
12565: IFFALSE 12575
// sSlow := true ;
12567: LD_ADDR_EXP 47
12571: PUSH
12572: LD_INT 1
12574: ST_TO_ADDR
// if p3 = 18 then
12575: LD_VAR 0 3
12579: PUSH
12580: LD_INT 18
12582: EQUAL
12583: IFFALSE 12593
// sLack := true ;
12585: LD_ADDR_EXP 48
12589: PUSH
12590: LD_INT 1
12592: ST_TO_ADDR
// if p3 = 19 then
12593: LD_VAR 0 3
12597: PUSH
12598: LD_INT 19
12600: EQUAL
12601: IFFALSE 12611
// sTank := true ;
12603: LD_ADDR_EXP 50
12607: PUSH
12608: LD_INT 1
12610: ST_TO_ADDR
// if p3 = 20 then
12611: LD_VAR 0 3
12615: PUSH
12616: LD_INT 20
12618: EQUAL
12619: IFFALSE 12629
// sRemote := true ;
12621: LD_ADDR_EXP 51
12625: PUSH
12626: LD_INT 1
12628: ST_TO_ADDR
// if p3 = 21 then
12629: LD_VAR 0 3
12633: PUSH
12634: LD_INT 21
12636: EQUAL
12637: IFFALSE 12647
// sPowell := true ;
12639: LD_ADDR_EXP 52
12643: PUSH
12644: LD_INT 1
12646: ST_TO_ADDR
// if p3 = 22 then
12647: LD_VAR 0 3
12651: PUSH
12652: LD_INT 22
12654: EQUAL
12655: IFFALSE 12665
// sTeleport := true ;
12657: LD_ADDR_EXP 55
12661: PUSH
12662: LD_INT 1
12664: ST_TO_ADDR
// if p3 = 23 then
12665: LD_VAR 0 3
12669: PUSH
12670: LD_INT 23
12672: EQUAL
12673: IFFALSE 12683
// sOilTower := true ;
12675: LD_ADDR_EXP 57
12679: PUSH
12680: LD_INT 1
12682: ST_TO_ADDR
// if p3 = 24 then
12683: LD_VAR 0 3
12687: PUSH
12688: LD_INT 24
12690: EQUAL
12691: IFFALSE 12701
// sShovel := true ;
12693: LD_ADDR_EXP 58
12697: PUSH
12698: LD_INT 1
12700: ST_TO_ADDR
// if p3 = 25 then
12701: LD_VAR 0 3
12705: PUSH
12706: LD_INT 25
12708: EQUAL
12709: IFFALSE 12719
// sSheik := true ;
12711: LD_ADDR_EXP 59
12715: PUSH
12716: LD_INT 1
12718: ST_TO_ADDR
// if p3 = 26 then
12719: LD_VAR 0 3
12723: PUSH
12724: LD_INT 26
12726: EQUAL
12727: IFFALSE 12737
// sEarthquake := true ;
12729: LD_ADDR_EXP 61
12733: PUSH
12734: LD_INT 1
12736: ST_TO_ADDR
// if p3 = 27 then
12737: LD_VAR 0 3
12741: PUSH
12742: LD_INT 27
12744: EQUAL
12745: IFFALSE 12755
// sAI := true ;
12747: LD_ADDR_EXP 62
12751: PUSH
12752: LD_INT 1
12754: ST_TO_ADDR
// if p3 = 28 then
12755: LD_VAR 0 3
12759: PUSH
12760: LD_INT 28
12762: EQUAL
12763: IFFALSE 12773
// sCargo := true ;
12765: LD_ADDR_EXP 65
12769: PUSH
12770: LD_INT 1
12772: ST_TO_ADDR
// if p3 = 29 then
12773: LD_VAR 0 3
12777: PUSH
12778: LD_INT 29
12780: EQUAL
12781: IFFALSE 12791
// sDLaser := true ;
12783: LD_ADDR_EXP 66
12787: PUSH
12788: LD_INT 1
12790: ST_TO_ADDR
// if p3 = 30 then
12791: LD_VAR 0 3
12795: PUSH
12796: LD_INT 30
12798: EQUAL
12799: IFFALSE 12809
// sExchange := true ;
12801: LD_ADDR_EXP 67
12805: PUSH
12806: LD_INT 1
12808: ST_TO_ADDR
// if p3 = 31 then
12809: LD_VAR 0 3
12813: PUSH
12814: LD_INT 31
12816: EQUAL
12817: IFFALSE 12827
// sFac := true ;
12819: LD_ADDR_EXP 68
12823: PUSH
12824: LD_INT 1
12826: ST_TO_ADDR
// if p3 = 32 then
12827: LD_VAR 0 3
12831: PUSH
12832: LD_INT 32
12834: EQUAL
12835: IFFALSE 12845
// sPower := true ;
12837: LD_ADDR_EXP 69
12841: PUSH
12842: LD_INT 1
12844: ST_TO_ADDR
// if p3 = 33 then
12845: LD_VAR 0 3
12849: PUSH
12850: LD_INT 33
12852: EQUAL
12853: IFFALSE 12863
// sRandom := true ;
12855: LD_ADDR_EXP 70
12859: PUSH
12860: LD_INT 1
12862: ST_TO_ADDR
// if p3 = 34 then
12863: LD_VAR 0 3
12867: PUSH
12868: LD_INT 34
12870: EQUAL
12871: IFFALSE 12881
// sShield := true ;
12873: LD_ADDR_EXP 71
12877: PUSH
12878: LD_INT 1
12880: ST_TO_ADDR
// if p3 = 35 then
12881: LD_VAR 0 3
12885: PUSH
12886: LD_INT 35
12888: EQUAL
12889: IFFALSE 12899
// sTime := true ;
12891: LD_ADDR_EXP 72
12895: PUSH
12896: LD_INT 1
12898: ST_TO_ADDR
// if p3 = 36 then
12899: LD_VAR 0 3
12903: PUSH
12904: LD_INT 36
12906: EQUAL
12907: IFFALSE 12917
// sTools := true ;
12909: LD_ADDR_EXP 73
12913: PUSH
12914: LD_INT 1
12916: ST_TO_ADDR
// if p3 = 101 then
12917: LD_VAR 0 3
12921: PUSH
12922: LD_INT 101
12924: EQUAL
12925: IFFALSE 12935
// sSold := true ;
12927: LD_ADDR_EXP 38
12931: PUSH
12932: LD_INT 1
12934: ST_TO_ADDR
// if p3 = 102 then
12935: LD_VAR 0 3
12939: PUSH
12940: LD_INT 102
12942: EQUAL
12943: IFFALSE 12953
// sDiff := true ;
12945: LD_ADDR_EXP 39
12949: PUSH
12950: LD_INT 1
12952: ST_TO_ADDR
// if p3 = 103 then
12953: LD_VAR 0 3
12957: PUSH
12958: LD_INT 103
12960: EQUAL
12961: IFFALSE 12971
// sFog := true ;
12963: LD_ADDR_EXP 42
12967: PUSH
12968: LD_INT 1
12970: ST_TO_ADDR
// if p3 = 104 then
12971: LD_VAR 0 3
12975: PUSH
12976: LD_INT 104
12978: EQUAL
12979: IFFALSE 12989
// sReset := true ;
12981: LD_ADDR_EXP 43
12985: PUSH
12986: LD_INT 1
12988: ST_TO_ADDR
// if p3 = 105 then
12989: LD_VAR 0 3
12993: PUSH
12994: LD_INT 105
12996: EQUAL
12997: IFFALSE 13007
// sSun := true ;
12999: LD_ADDR_EXP 44
13003: PUSH
13004: LD_INT 1
13006: ST_TO_ADDR
// if p3 = 106 then
13007: LD_VAR 0 3
13011: PUSH
13012: LD_INT 106
13014: EQUAL
13015: IFFALSE 13025
// sTiger := true ;
13017: LD_ADDR_EXP 40
13021: PUSH
13022: LD_INT 1
13024: ST_TO_ADDR
// if p3 = 107 then
13025: LD_VAR 0 3
13029: PUSH
13030: LD_INT 107
13032: EQUAL
13033: IFFALSE 13043
// sBomb := true ;
13035: LD_ADDR_EXP 41
13039: PUSH
13040: LD_INT 1
13042: ST_TO_ADDR
// if p3 = 108 then
13043: LD_VAR 0 3
13047: PUSH
13048: LD_INT 108
13050: EQUAL
13051: IFFALSE 13061
// sWound := true ;
13053: LD_ADDR_EXP 49
13057: PUSH
13058: LD_INT 1
13060: ST_TO_ADDR
// if p3 = 109 then
13061: LD_VAR 0 3
13065: PUSH
13066: LD_INT 109
13068: EQUAL
13069: IFFALSE 13079
// sBetray := true ;
13071: LD_ADDR_EXP 53
13075: PUSH
13076: LD_INT 1
13078: ST_TO_ADDR
// if p3 = 110 then
13079: LD_VAR 0 3
13083: PUSH
13084: LD_INT 110
13086: EQUAL
13087: IFFALSE 13097
// sContamin := true ;
13089: LD_ADDR_EXP 54
13093: PUSH
13094: LD_INT 1
13096: ST_TO_ADDR
// if p3 = 111 then
13097: LD_VAR 0 3
13101: PUSH
13102: LD_INT 111
13104: EQUAL
13105: IFFALSE 13115
// sOil := true ;
13107: LD_ADDR_EXP 56
13111: PUSH
13112: LD_INT 1
13114: ST_TO_ADDR
// if p3 = 112 then
13115: LD_VAR 0 3
13119: PUSH
13120: LD_INT 112
13122: EQUAL
13123: IFFALSE 13133
// sStu := true ;
13125: LD_ADDR_EXP 60
13129: PUSH
13130: LD_INT 1
13132: ST_TO_ADDR
// if p3 = 113 then
13133: LD_VAR 0 3
13137: PUSH
13138: LD_INT 113
13140: EQUAL
13141: IFFALSE 13151
// sBazooka := true ;
13143: LD_ADDR_EXP 63
13147: PUSH
13148: LD_INT 1
13150: ST_TO_ADDR
// if p3 = 114 then
13151: LD_VAR 0 3
13155: PUSH
13156: LD_INT 114
13158: EQUAL
13159: IFFALSE 13169
// sMortar := true ;
13161: LD_ADDR_EXP 64
13165: PUSH
13166: LD_INT 1
13168: ST_TO_ADDR
// if p3 = 115 then
13169: LD_VAR 0 3
13173: PUSH
13174: LD_INT 115
13176: EQUAL
13177: IFFALSE 13187
// sRanger := true ;
13179: LD_ADDR_EXP 74
13183: PUSH
13184: LD_INT 1
13186: ST_TO_ADDR
// if p3 = 116 then
13187: LD_VAR 0 3
13191: PUSH
13192: LD_INT 116
13194: EQUAL
13195: IFFALSE 13205
// sComputer := true ;
13197: LD_ADDR_EXP 75
13201: PUSH
13202: LD_INT 1
13204: ST_TO_ADDR
// if p3 = 117 then
13205: LD_VAR 0 3
13209: PUSH
13210: LD_INT 117
13212: EQUAL
13213: IFFALSE 13223
// s30 := true ;
13215: LD_ADDR_EXP 76
13219: PUSH
13220: LD_INT 1
13222: ST_TO_ADDR
// if p3 = 118 then
13223: LD_VAR 0 3
13227: PUSH
13228: LD_INT 118
13230: EQUAL
13231: IFFALSE 13241
// s60 := true ;
13233: LD_ADDR_EXP 77
13237: PUSH
13238: LD_INT 1
13240: ST_TO_ADDR
// end ; if p2 = 101 then
13241: LD_VAR 0 2
13245: PUSH
13246: LD_INT 101
13248: EQUAL
13249: IFFALSE 13377
// begin case p3 of 1 :
13251: LD_VAR 0 3
13255: PUSH
13256: LD_INT 1
13258: DOUBLE
13259: EQUAL
13260: IFTRUE 13264
13262: GO 13271
13264: POP
// hHackUnlimitedResources ; 2 :
13265: CALL 25475 0 0
13269: GO 13377
13271: LD_INT 2
13273: DOUBLE
13274: EQUAL
13275: IFTRUE 13279
13277: GO 13286
13279: POP
// hHackSetLevel10 ; 3 :
13280: CALL 25608 0 0
13284: GO 13377
13286: LD_INT 3
13288: DOUBLE
13289: EQUAL
13290: IFTRUE 13294
13292: GO 13301
13294: POP
// hHackSetLevel10YourUnits ; 4 :
13295: CALL 25693 0 0
13299: GO 13377
13301: LD_INT 4
13303: DOUBLE
13304: EQUAL
13305: IFTRUE 13309
13307: GO 13316
13309: POP
// hHackInvincible ; 5 :
13310: CALL 26141 0 0
13314: GO 13377
13316: LD_INT 5
13318: DOUBLE
13319: EQUAL
13320: IFTRUE 13324
13322: GO 13331
13324: POP
// hHackInvisible ; 6 :
13325: CALL 26252 0 0
13329: GO 13377
13331: LD_INT 6
13333: DOUBLE
13334: EQUAL
13335: IFTRUE 13339
13337: GO 13346
13339: POP
// hHackChangeYourSide ; 7 :
13340: CALL 26309 0 0
13344: GO 13377
13346: LD_INT 7
13348: DOUBLE
13349: EQUAL
13350: IFTRUE 13354
13352: GO 13361
13354: POP
// hHackChangeUnitSide ; 8 :
13355: CALL 26351 0 0
13359: GO 13377
13361: LD_INT 8
13363: DOUBLE
13364: EQUAL
13365: IFTRUE 13369
13367: GO 13376
13369: POP
// hHackFog ; end ;
13370: CALL 26452 0 0
13374: GO 13377
13376: POP
// end ; end ;
13377: LD_VAR 0 7
13381: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
13382: GO 13384
13384: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
13385: LD_STRING initStreamRollete();
13387: PPUSH
13388: CALL_OW 559
// InitStreamMode ;
13392: CALL 13404 0 0
// DefineStreamItems ( false ) ;
13396: LD_INT 0
13398: PPUSH
13399: CALL 13868 0 1
// end ;
13403: END
// function InitStreamMode ; begin
13404: LD_INT 0
13406: PPUSH
// streamModeActive := false ;
13407: LD_ADDR_EXP 21
13411: PUSH
13412: LD_INT 0
13414: ST_TO_ADDR
// normalCounter := 36 ;
13415: LD_ADDR_EXP 22
13419: PUSH
13420: LD_INT 36
13422: ST_TO_ADDR
// hardcoreCounter := 18 ;
13423: LD_ADDR_EXP 23
13427: PUSH
13428: LD_INT 18
13430: ST_TO_ADDR
// sRocket := false ;
13431: LD_ADDR_EXP 26
13435: PUSH
13436: LD_INT 0
13438: ST_TO_ADDR
// sSpeed := false ;
13439: LD_ADDR_EXP 25
13443: PUSH
13444: LD_INT 0
13446: ST_TO_ADDR
// sEngine := false ;
13447: LD_ADDR_EXP 27
13451: PUSH
13452: LD_INT 0
13454: ST_TO_ADDR
// sSpec := false ;
13455: LD_ADDR_EXP 24
13459: PUSH
13460: LD_INT 0
13462: ST_TO_ADDR
// sLevel := false ;
13463: LD_ADDR_EXP 28
13467: PUSH
13468: LD_INT 0
13470: ST_TO_ADDR
// sArmoury := false ;
13471: LD_ADDR_EXP 29
13475: PUSH
13476: LD_INT 0
13478: ST_TO_ADDR
// sRadar := false ;
13479: LD_ADDR_EXP 30
13483: PUSH
13484: LD_INT 0
13486: ST_TO_ADDR
// sBunker := false ;
13487: LD_ADDR_EXP 31
13491: PUSH
13492: LD_INT 0
13494: ST_TO_ADDR
// sHack := false ;
13495: LD_ADDR_EXP 32
13499: PUSH
13500: LD_INT 0
13502: ST_TO_ADDR
// sFire := false ;
13503: LD_ADDR_EXP 33
13507: PUSH
13508: LD_INT 0
13510: ST_TO_ADDR
// sRefresh := false ;
13511: LD_ADDR_EXP 34
13515: PUSH
13516: LD_INT 0
13518: ST_TO_ADDR
// sExp := false ;
13519: LD_ADDR_EXP 35
13523: PUSH
13524: LD_INT 0
13526: ST_TO_ADDR
// sDepot := false ;
13527: LD_ADDR_EXP 36
13531: PUSH
13532: LD_INT 0
13534: ST_TO_ADDR
// sFlag := false ;
13535: LD_ADDR_EXP 37
13539: PUSH
13540: LD_INT 0
13542: ST_TO_ADDR
// sKamikadze := false ;
13543: LD_ADDR_EXP 45
13547: PUSH
13548: LD_INT 0
13550: ST_TO_ADDR
// sTroll := false ;
13551: LD_ADDR_EXP 46
13555: PUSH
13556: LD_INT 0
13558: ST_TO_ADDR
// sSlow := false ;
13559: LD_ADDR_EXP 47
13563: PUSH
13564: LD_INT 0
13566: ST_TO_ADDR
// sLack := false ;
13567: LD_ADDR_EXP 48
13571: PUSH
13572: LD_INT 0
13574: ST_TO_ADDR
// sTank := false ;
13575: LD_ADDR_EXP 50
13579: PUSH
13580: LD_INT 0
13582: ST_TO_ADDR
// sRemote := false ;
13583: LD_ADDR_EXP 51
13587: PUSH
13588: LD_INT 0
13590: ST_TO_ADDR
// sPowell := false ;
13591: LD_ADDR_EXP 52
13595: PUSH
13596: LD_INT 0
13598: ST_TO_ADDR
// sTeleport := false ;
13599: LD_ADDR_EXP 55
13603: PUSH
13604: LD_INT 0
13606: ST_TO_ADDR
// sOilTower := false ;
13607: LD_ADDR_EXP 57
13611: PUSH
13612: LD_INT 0
13614: ST_TO_ADDR
// sShovel := false ;
13615: LD_ADDR_EXP 58
13619: PUSH
13620: LD_INT 0
13622: ST_TO_ADDR
// sSheik := false ;
13623: LD_ADDR_EXP 59
13627: PUSH
13628: LD_INT 0
13630: ST_TO_ADDR
// sEarthquake := false ;
13631: LD_ADDR_EXP 61
13635: PUSH
13636: LD_INT 0
13638: ST_TO_ADDR
// sAI := false ;
13639: LD_ADDR_EXP 62
13643: PUSH
13644: LD_INT 0
13646: ST_TO_ADDR
// sCargo := false ;
13647: LD_ADDR_EXP 65
13651: PUSH
13652: LD_INT 0
13654: ST_TO_ADDR
// sDLaser := false ;
13655: LD_ADDR_EXP 66
13659: PUSH
13660: LD_INT 0
13662: ST_TO_ADDR
// sExchange := false ;
13663: LD_ADDR_EXP 67
13667: PUSH
13668: LD_INT 0
13670: ST_TO_ADDR
// sFac := false ;
13671: LD_ADDR_EXP 68
13675: PUSH
13676: LD_INT 0
13678: ST_TO_ADDR
// sPower := false ;
13679: LD_ADDR_EXP 69
13683: PUSH
13684: LD_INT 0
13686: ST_TO_ADDR
// sRandom := false ;
13687: LD_ADDR_EXP 70
13691: PUSH
13692: LD_INT 0
13694: ST_TO_ADDR
// sShield := false ;
13695: LD_ADDR_EXP 71
13699: PUSH
13700: LD_INT 0
13702: ST_TO_ADDR
// sTime := false ;
13703: LD_ADDR_EXP 72
13707: PUSH
13708: LD_INT 0
13710: ST_TO_ADDR
// sTools := false ;
13711: LD_ADDR_EXP 73
13715: PUSH
13716: LD_INT 0
13718: ST_TO_ADDR
// sSold := false ;
13719: LD_ADDR_EXP 38
13723: PUSH
13724: LD_INT 0
13726: ST_TO_ADDR
// sDiff := false ;
13727: LD_ADDR_EXP 39
13731: PUSH
13732: LD_INT 0
13734: ST_TO_ADDR
// sFog := false ;
13735: LD_ADDR_EXP 42
13739: PUSH
13740: LD_INT 0
13742: ST_TO_ADDR
// sReset := false ;
13743: LD_ADDR_EXP 43
13747: PUSH
13748: LD_INT 0
13750: ST_TO_ADDR
// sSun := false ;
13751: LD_ADDR_EXP 44
13755: PUSH
13756: LD_INT 0
13758: ST_TO_ADDR
// sTiger := false ;
13759: LD_ADDR_EXP 40
13763: PUSH
13764: LD_INT 0
13766: ST_TO_ADDR
// sBomb := false ;
13767: LD_ADDR_EXP 41
13771: PUSH
13772: LD_INT 0
13774: ST_TO_ADDR
// sWound := false ;
13775: LD_ADDR_EXP 49
13779: PUSH
13780: LD_INT 0
13782: ST_TO_ADDR
// sBetray := false ;
13783: LD_ADDR_EXP 53
13787: PUSH
13788: LD_INT 0
13790: ST_TO_ADDR
// sContamin := false ;
13791: LD_ADDR_EXP 54
13795: PUSH
13796: LD_INT 0
13798: ST_TO_ADDR
// sOil := false ;
13799: LD_ADDR_EXP 56
13803: PUSH
13804: LD_INT 0
13806: ST_TO_ADDR
// sStu := false ;
13807: LD_ADDR_EXP 60
13811: PUSH
13812: LD_INT 0
13814: ST_TO_ADDR
// sBazooka := false ;
13815: LD_ADDR_EXP 63
13819: PUSH
13820: LD_INT 0
13822: ST_TO_ADDR
// sMortar := false ;
13823: LD_ADDR_EXP 64
13827: PUSH
13828: LD_INT 0
13830: ST_TO_ADDR
// sRanger := false ;
13831: LD_ADDR_EXP 74
13835: PUSH
13836: LD_INT 0
13838: ST_TO_ADDR
// sComputer := false ;
13839: LD_ADDR_EXP 75
13843: PUSH
13844: LD_INT 0
13846: ST_TO_ADDR
// s30 := false ;
13847: LD_ADDR_EXP 76
13851: PUSH
13852: LD_INT 0
13854: ST_TO_ADDR
// s60 := false ;
13855: LD_ADDR_EXP 77
13859: PUSH
13860: LD_INT 0
13862: ST_TO_ADDR
// end ;
13863: LD_VAR 0 1
13867: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
13868: LD_INT 0
13870: PPUSH
13871: PPUSH
13872: PPUSH
13873: PPUSH
13874: PPUSH
13875: PPUSH
13876: PPUSH
// result := [ ] ;
13877: LD_ADDR_VAR 0 2
13881: PUSH
13882: EMPTY
13883: ST_TO_ADDR
// if campaign_id = 1 then
13884: LD_OWVAR 69
13888: PUSH
13889: LD_INT 1
13891: EQUAL
13892: IFFALSE 17058
// begin case mission_number of 1 :
13894: LD_OWVAR 70
13898: PUSH
13899: LD_INT 1
13901: DOUBLE
13902: EQUAL
13903: IFTRUE 13907
13905: GO 13983
13907: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
13908: LD_ADDR_VAR 0 2
13912: PUSH
13913: LD_INT 2
13915: PUSH
13916: LD_INT 4
13918: PUSH
13919: LD_INT 11
13921: PUSH
13922: LD_INT 12
13924: PUSH
13925: LD_INT 15
13927: PUSH
13928: LD_INT 16
13930: PUSH
13931: LD_INT 22
13933: PUSH
13934: LD_INT 23
13936: PUSH
13937: LD_INT 26
13939: PUSH
13940: EMPTY
13941: LIST
13942: LIST
13943: LIST
13944: LIST
13945: LIST
13946: LIST
13947: LIST
13948: LIST
13949: LIST
13950: PUSH
13951: LD_INT 101
13953: PUSH
13954: LD_INT 102
13956: PUSH
13957: LD_INT 106
13959: PUSH
13960: LD_INT 116
13962: PUSH
13963: LD_INT 117
13965: PUSH
13966: LD_INT 118
13968: PUSH
13969: EMPTY
13970: LIST
13971: LIST
13972: LIST
13973: LIST
13974: LIST
13975: LIST
13976: PUSH
13977: EMPTY
13978: LIST
13979: LIST
13980: ST_TO_ADDR
13981: GO 17056
13983: LD_INT 2
13985: DOUBLE
13986: EQUAL
13987: IFTRUE 13991
13989: GO 14075
13991: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
13992: LD_ADDR_VAR 0 2
13996: PUSH
13997: LD_INT 2
13999: PUSH
14000: LD_INT 4
14002: PUSH
14003: LD_INT 11
14005: PUSH
14006: LD_INT 12
14008: PUSH
14009: LD_INT 15
14011: PUSH
14012: LD_INT 16
14014: PUSH
14015: LD_INT 22
14017: PUSH
14018: LD_INT 23
14020: PUSH
14021: LD_INT 26
14023: PUSH
14024: EMPTY
14025: LIST
14026: LIST
14027: LIST
14028: LIST
14029: LIST
14030: LIST
14031: LIST
14032: LIST
14033: LIST
14034: PUSH
14035: LD_INT 101
14037: PUSH
14038: LD_INT 102
14040: PUSH
14041: LD_INT 105
14043: PUSH
14044: LD_INT 106
14046: PUSH
14047: LD_INT 108
14049: PUSH
14050: LD_INT 116
14052: PUSH
14053: LD_INT 117
14055: PUSH
14056: LD_INT 118
14058: PUSH
14059: EMPTY
14060: LIST
14061: LIST
14062: LIST
14063: LIST
14064: LIST
14065: LIST
14066: LIST
14067: LIST
14068: PUSH
14069: EMPTY
14070: LIST
14071: LIST
14072: ST_TO_ADDR
14073: GO 17056
14075: LD_INT 3
14077: DOUBLE
14078: EQUAL
14079: IFTRUE 14083
14081: GO 14171
14083: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
14084: LD_ADDR_VAR 0 2
14088: PUSH
14089: LD_INT 2
14091: PUSH
14092: LD_INT 4
14094: PUSH
14095: LD_INT 5
14097: PUSH
14098: LD_INT 11
14100: PUSH
14101: LD_INT 12
14103: PUSH
14104: LD_INT 15
14106: PUSH
14107: LD_INT 16
14109: PUSH
14110: LD_INT 22
14112: PUSH
14113: LD_INT 26
14115: PUSH
14116: LD_INT 36
14118: PUSH
14119: EMPTY
14120: LIST
14121: LIST
14122: LIST
14123: LIST
14124: LIST
14125: LIST
14126: LIST
14127: LIST
14128: LIST
14129: LIST
14130: PUSH
14131: LD_INT 101
14133: PUSH
14134: LD_INT 102
14136: PUSH
14137: LD_INT 105
14139: PUSH
14140: LD_INT 106
14142: PUSH
14143: LD_INT 108
14145: PUSH
14146: LD_INT 116
14148: PUSH
14149: LD_INT 117
14151: PUSH
14152: LD_INT 118
14154: PUSH
14155: EMPTY
14156: LIST
14157: LIST
14158: LIST
14159: LIST
14160: LIST
14161: LIST
14162: LIST
14163: LIST
14164: PUSH
14165: EMPTY
14166: LIST
14167: LIST
14168: ST_TO_ADDR
14169: GO 17056
14171: LD_INT 4
14173: DOUBLE
14174: EQUAL
14175: IFTRUE 14179
14177: GO 14275
14179: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
14180: LD_ADDR_VAR 0 2
14184: PUSH
14185: LD_INT 2
14187: PUSH
14188: LD_INT 4
14190: PUSH
14191: LD_INT 5
14193: PUSH
14194: LD_INT 8
14196: PUSH
14197: LD_INT 11
14199: PUSH
14200: LD_INT 12
14202: PUSH
14203: LD_INT 15
14205: PUSH
14206: LD_INT 16
14208: PUSH
14209: LD_INT 22
14211: PUSH
14212: LD_INT 23
14214: PUSH
14215: LD_INT 26
14217: PUSH
14218: LD_INT 36
14220: PUSH
14221: EMPTY
14222: LIST
14223: LIST
14224: LIST
14225: LIST
14226: LIST
14227: LIST
14228: LIST
14229: LIST
14230: LIST
14231: LIST
14232: LIST
14233: LIST
14234: PUSH
14235: LD_INT 101
14237: PUSH
14238: LD_INT 102
14240: PUSH
14241: LD_INT 105
14243: PUSH
14244: LD_INT 106
14246: PUSH
14247: LD_INT 108
14249: PUSH
14250: LD_INT 116
14252: PUSH
14253: LD_INT 117
14255: PUSH
14256: LD_INT 118
14258: PUSH
14259: EMPTY
14260: LIST
14261: LIST
14262: LIST
14263: LIST
14264: LIST
14265: LIST
14266: LIST
14267: LIST
14268: PUSH
14269: EMPTY
14270: LIST
14271: LIST
14272: ST_TO_ADDR
14273: GO 17056
14275: LD_INT 5
14277: DOUBLE
14278: EQUAL
14279: IFTRUE 14283
14281: GO 14395
14283: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
14284: LD_ADDR_VAR 0 2
14288: PUSH
14289: LD_INT 2
14291: PUSH
14292: LD_INT 4
14294: PUSH
14295: LD_INT 5
14297: PUSH
14298: LD_INT 6
14300: PUSH
14301: LD_INT 8
14303: PUSH
14304: LD_INT 11
14306: PUSH
14307: LD_INT 12
14309: PUSH
14310: LD_INT 15
14312: PUSH
14313: LD_INT 16
14315: PUSH
14316: LD_INT 22
14318: PUSH
14319: LD_INT 23
14321: PUSH
14322: LD_INT 25
14324: PUSH
14325: LD_INT 26
14327: PUSH
14328: LD_INT 36
14330: PUSH
14331: EMPTY
14332: LIST
14333: LIST
14334: LIST
14335: LIST
14336: LIST
14337: LIST
14338: LIST
14339: LIST
14340: LIST
14341: LIST
14342: LIST
14343: LIST
14344: LIST
14345: LIST
14346: PUSH
14347: LD_INT 101
14349: PUSH
14350: LD_INT 102
14352: PUSH
14353: LD_INT 105
14355: PUSH
14356: LD_INT 106
14358: PUSH
14359: LD_INT 108
14361: PUSH
14362: LD_INT 109
14364: PUSH
14365: LD_INT 112
14367: PUSH
14368: LD_INT 116
14370: PUSH
14371: LD_INT 117
14373: PUSH
14374: LD_INT 118
14376: PUSH
14377: EMPTY
14378: LIST
14379: LIST
14380: LIST
14381: LIST
14382: LIST
14383: LIST
14384: LIST
14385: LIST
14386: LIST
14387: LIST
14388: PUSH
14389: EMPTY
14390: LIST
14391: LIST
14392: ST_TO_ADDR
14393: GO 17056
14395: LD_INT 6
14397: DOUBLE
14398: EQUAL
14399: IFTRUE 14403
14401: GO 14535
14403: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
14404: LD_ADDR_VAR 0 2
14408: PUSH
14409: LD_INT 2
14411: PUSH
14412: LD_INT 4
14414: PUSH
14415: LD_INT 5
14417: PUSH
14418: LD_INT 6
14420: PUSH
14421: LD_INT 8
14423: PUSH
14424: LD_INT 11
14426: PUSH
14427: LD_INT 12
14429: PUSH
14430: LD_INT 15
14432: PUSH
14433: LD_INT 16
14435: PUSH
14436: LD_INT 20
14438: PUSH
14439: LD_INT 21
14441: PUSH
14442: LD_INT 22
14444: PUSH
14445: LD_INT 23
14447: PUSH
14448: LD_INT 25
14450: PUSH
14451: LD_INT 26
14453: PUSH
14454: LD_INT 30
14456: PUSH
14457: LD_INT 31
14459: PUSH
14460: LD_INT 32
14462: PUSH
14463: LD_INT 36
14465: PUSH
14466: EMPTY
14467: LIST
14468: LIST
14469: LIST
14470: LIST
14471: LIST
14472: LIST
14473: LIST
14474: LIST
14475: LIST
14476: LIST
14477: LIST
14478: LIST
14479: LIST
14480: LIST
14481: LIST
14482: LIST
14483: LIST
14484: LIST
14485: LIST
14486: PUSH
14487: LD_INT 101
14489: PUSH
14490: LD_INT 102
14492: PUSH
14493: LD_INT 105
14495: PUSH
14496: LD_INT 106
14498: PUSH
14499: LD_INT 108
14501: PUSH
14502: LD_INT 109
14504: PUSH
14505: LD_INT 112
14507: PUSH
14508: LD_INT 116
14510: PUSH
14511: LD_INT 117
14513: PUSH
14514: LD_INT 118
14516: PUSH
14517: EMPTY
14518: LIST
14519: LIST
14520: LIST
14521: LIST
14522: LIST
14523: LIST
14524: LIST
14525: LIST
14526: LIST
14527: LIST
14528: PUSH
14529: EMPTY
14530: LIST
14531: LIST
14532: ST_TO_ADDR
14533: GO 17056
14535: LD_INT 7
14537: DOUBLE
14538: EQUAL
14539: IFTRUE 14543
14541: GO 14655
14543: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
14544: LD_ADDR_VAR 0 2
14548: PUSH
14549: LD_INT 2
14551: PUSH
14552: LD_INT 4
14554: PUSH
14555: LD_INT 5
14557: PUSH
14558: LD_INT 7
14560: PUSH
14561: LD_INT 11
14563: PUSH
14564: LD_INT 12
14566: PUSH
14567: LD_INT 15
14569: PUSH
14570: LD_INT 16
14572: PUSH
14573: LD_INT 20
14575: PUSH
14576: LD_INT 21
14578: PUSH
14579: LD_INT 22
14581: PUSH
14582: LD_INT 23
14584: PUSH
14585: LD_INT 25
14587: PUSH
14588: LD_INT 26
14590: PUSH
14591: EMPTY
14592: LIST
14593: LIST
14594: LIST
14595: LIST
14596: LIST
14597: LIST
14598: LIST
14599: LIST
14600: LIST
14601: LIST
14602: LIST
14603: LIST
14604: LIST
14605: LIST
14606: PUSH
14607: LD_INT 101
14609: PUSH
14610: LD_INT 102
14612: PUSH
14613: LD_INT 103
14615: PUSH
14616: LD_INT 105
14618: PUSH
14619: LD_INT 106
14621: PUSH
14622: LD_INT 108
14624: PUSH
14625: LD_INT 112
14627: PUSH
14628: LD_INT 116
14630: PUSH
14631: LD_INT 117
14633: PUSH
14634: LD_INT 118
14636: PUSH
14637: EMPTY
14638: LIST
14639: LIST
14640: LIST
14641: LIST
14642: LIST
14643: LIST
14644: LIST
14645: LIST
14646: LIST
14647: LIST
14648: PUSH
14649: EMPTY
14650: LIST
14651: LIST
14652: ST_TO_ADDR
14653: GO 17056
14655: LD_INT 8
14657: DOUBLE
14658: EQUAL
14659: IFTRUE 14663
14661: GO 14803
14663: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
14664: LD_ADDR_VAR 0 2
14668: PUSH
14669: LD_INT 2
14671: PUSH
14672: LD_INT 4
14674: PUSH
14675: LD_INT 5
14677: PUSH
14678: LD_INT 6
14680: PUSH
14681: LD_INT 7
14683: PUSH
14684: LD_INT 8
14686: PUSH
14687: LD_INT 11
14689: PUSH
14690: LD_INT 12
14692: PUSH
14693: LD_INT 15
14695: PUSH
14696: LD_INT 16
14698: PUSH
14699: LD_INT 20
14701: PUSH
14702: LD_INT 21
14704: PUSH
14705: LD_INT 22
14707: PUSH
14708: LD_INT 23
14710: PUSH
14711: LD_INT 25
14713: PUSH
14714: LD_INT 26
14716: PUSH
14717: LD_INT 30
14719: PUSH
14720: LD_INT 31
14722: PUSH
14723: LD_INT 32
14725: PUSH
14726: LD_INT 36
14728: PUSH
14729: EMPTY
14730: LIST
14731: LIST
14732: LIST
14733: LIST
14734: LIST
14735: LIST
14736: LIST
14737: LIST
14738: LIST
14739: LIST
14740: LIST
14741: LIST
14742: LIST
14743: LIST
14744: LIST
14745: LIST
14746: LIST
14747: LIST
14748: LIST
14749: LIST
14750: PUSH
14751: LD_INT 101
14753: PUSH
14754: LD_INT 102
14756: PUSH
14757: LD_INT 103
14759: PUSH
14760: LD_INT 105
14762: PUSH
14763: LD_INT 106
14765: PUSH
14766: LD_INT 108
14768: PUSH
14769: LD_INT 109
14771: PUSH
14772: LD_INT 112
14774: PUSH
14775: LD_INT 116
14777: PUSH
14778: LD_INT 117
14780: PUSH
14781: LD_INT 118
14783: PUSH
14784: EMPTY
14785: LIST
14786: LIST
14787: LIST
14788: LIST
14789: LIST
14790: LIST
14791: LIST
14792: LIST
14793: LIST
14794: LIST
14795: LIST
14796: PUSH
14797: EMPTY
14798: LIST
14799: LIST
14800: ST_TO_ADDR
14801: GO 17056
14803: LD_INT 9
14805: DOUBLE
14806: EQUAL
14807: IFTRUE 14811
14809: GO 14959
14811: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
14812: LD_ADDR_VAR 0 2
14816: PUSH
14817: LD_INT 2
14819: PUSH
14820: LD_INT 4
14822: PUSH
14823: LD_INT 5
14825: PUSH
14826: LD_INT 6
14828: PUSH
14829: LD_INT 7
14831: PUSH
14832: LD_INT 8
14834: PUSH
14835: LD_INT 11
14837: PUSH
14838: LD_INT 12
14840: PUSH
14841: LD_INT 15
14843: PUSH
14844: LD_INT 16
14846: PUSH
14847: LD_INT 20
14849: PUSH
14850: LD_INT 21
14852: PUSH
14853: LD_INT 22
14855: PUSH
14856: LD_INT 23
14858: PUSH
14859: LD_INT 25
14861: PUSH
14862: LD_INT 26
14864: PUSH
14865: LD_INT 28
14867: PUSH
14868: LD_INT 30
14870: PUSH
14871: LD_INT 31
14873: PUSH
14874: LD_INT 32
14876: PUSH
14877: LD_INT 36
14879: PUSH
14880: EMPTY
14881: LIST
14882: LIST
14883: LIST
14884: LIST
14885: LIST
14886: LIST
14887: LIST
14888: LIST
14889: LIST
14890: LIST
14891: LIST
14892: LIST
14893: LIST
14894: LIST
14895: LIST
14896: LIST
14897: LIST
14898: LIST
14899: LIST
14900: LIST
14901: LIST
14902: PUSH
14903: LD_INT 101
14905: PUSH
14906: LD_INT 102
14908: PUSH
14909: LD_INT 103
14911: PUSH
14912: LD_INT 105
14914: PUSH
14915: LD_INT 106
14917: PUSH
14918: LD_INT 108
14920: PUSH
14921: LD_INT 109
14923: PUSH
14924: LD_INT 112
14926: PUSH
14927: LD_INT 114
14929: PUSH
14930: LD_INT 116
14932: PUSH
14933: LD_INT 117
14935: PUSH
14936: LD_INT 118
14938: PUSH
14939: EMPTY
14940: LIST
14941: LIST
14942: LIST
14943: LIST
14944: LIST
14945: LIST
14946: LIST
14947: LIST
14948: LIST
14949: LIST
14950: LIST
14951: LIST
14952: PUSH
14953: EMPTY
14954: LIST
14955: LIST
14956: ST_TO_ADDR
14957: GO 17056
14959: LD_INT 10
14961: DOUBLE
14962: EQUAL
14963: IFTRUE 14967
14965: GO 15163
14967: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
14968: LD_ADDR_VAR 0 2
14972: PUSH
14973: LD_INT 2
14975: PUSH
14976: LD_INT 4
14978: PUSH
14979: LD_INT 5
14981: PUSH
14982: LD_INT 6
14984: PUSH
14985: LD_INT 7
14987: PUSH
14988: LD_INT 8
14990: PUSH
14991: LD_INT 9
14993: PUSH
14994: LD_INT 10
14996: PUSH
14997: LD_INT 11
14999: PUSH
15000: LD_INT 12
15002: PUSH
15003: LD_INT 13
15005: PUSH
15006: LD_INT 14
15008: PUSH
15009: LD_INT 15
15011: PUSH
15012: LD_INT 16
15014: PUSH
15015: LD_INT 17
15017: PUSH
15018: LD_INT 18
15020: PUSH
15021: LD_INT 19
15023: PUSH
15024: LD_INT 20
15026: PUSH
15027: LD_INT 21
15029: PUSH
15030: LD_INT 22
15032: PUSH
15033: LD_INT 23
15035: PUSH
15036: LD_INT 24
15038: PUSH
15039: LD_INT 25
15041: PUSH
15042: LD_INT 26
15044: PUSH
15045: LD_INT 28
15047: PUSH
15048: LD_INT 30
15050: PUSH
15051: LD_INT 31
15053: PUSH
15054: LD_INT 32
15056: PUSH
15057: LD_INT 36
15059: PUSH
15060: EMPTY
15061: LIST
15062: LIST
15063: LIST
15064: LIST
15065: LIST
15066: LIST
15067: LIST
15068: LIST
15069: LIST
15070: LIST
15071: LIST
15072: LIST
15073: LIST
15074: LIST
15075: LIST
15076: LIST
15077: LIST
15078: LIST
15079: LIST
15080: LIST
15081: LIST
15082: LIST
15083: LIST
15084: LIST
15085: LIST
15086: LIST
15087: LIST
15088: LIST
15089: LIST
15090: PUSH
15091: LD_INT 101
15093: PUSH
15094: LD_INT 102
15096: PUSH
15097: LD_INT 103
15099: PUSH
15100: LD_INT 104
15102: PUSH
15103: LD_INT 105
15105: PUSH
15106: LD_INT 106
15108: PUSH
15109: LD_INT 107
15111: PUSH
15112: LD_INT 108
15114: PUSH
15115: LD_INT 109
15117: PUSH
15118: LD_INT 110
15120: PUSH
15121: LD_INT 111
15123: PUSH
15124: LD_INT 112
15126: PUSH
15127: LD_INT 114
15129: PUSH
15130: LD_INT 116
15132: PUSH
15133: LD_INT 117
15135: PUSH
15136: LD_INT 118
15138: PUSH
15139: EMPTY
15140: LIST
15141: LIST
15142: LIST
15143: LIST
15144: LIST
15145: LIST
15146: LIST
15147: LIST
15148: LIST
15149: LIST
15150: LIST
15151: LIST
15152: LIST
15153: LIST
15154: LIST
15155: LIST
15156: PUSH
15157: EMPTY
15158: LIST
15159: LIST
15160: ST_TO_ADDR
15161: GO 17056
15163: LD_INT 11
15165: DOUBLE
15166: EQUAL
15167: IFTRUE 15171
15169: GO 15375
15171: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
15172: LD_ADDR_VAR 0 2
15176: PUSH
15177: LD_INT 2
15179: PUSH
15180: LD_INT 3
15182: PUSH
15183: LD_INT 4
15185: PUSH
15186: LD_INT 5
15188: PUSH
15189: LD_INT 6
15191: PUSH
15192: LD_INT 7
15194: PUSH
15195: LD_INT 8
15197: PUSH
15198: LD_INT 9
15200: PUSH
15201: LD_INT 10
15203: PUSH
15204: LD_INT 11
15206: PUSH
15207: LD_INT 12
15209: PUSH
15210: LD_INT 13
15212: PUSH
15213: LD_INT 14
15215: PUSH
15216: LD_INT 15
15218: PUSH
15219: LD_INT 16
15221: PUSH
15222: LD_INT 17
15224: PUSH
15225: LD_INT 18
15227: PUSH
15228: LD_INT 19
15230: PUSH
15231: LD_INT 20
15233: PUSH
15234: LD_INT 21
15236: PUSH
15237: LD_INT 22
15239: PUSH
15240: LD_INT 23
15242: PUSH
15243: LD_INT 24
15245: PUSH
15246: LD_INT 25
15248: PUSH
15249: LD_INT 26
15251: PUSH
15252: LD_INT 28
15254: PUSH
15255: LD_INT 30
15257: PUSH
15258: LD_INT 31
15260: PUSH
15261: LD_INT 32
15263: PUSH
15264: LD_INT 34
15266: PUSH
15267: LD_INT 36
15269: PUSH
15270: EMPTY
15271: LIST
15272: LIST
15273: LIST
15274: LIST
15275: LIST
15276: LIST
15277: LIST
15278: LIST
15279: LIST
15280: LIST
15281: LIST
15282: LIST
15283: LIST
15284: LIST
15285: LIST
15286: LIST
15287: LIST
15288: LIST
15289: LIST
15290: LIST
15291: LIST
15292: LIST
15293: LIST
15294: LIST
15295: LIST
15296: LIST
15297: LIST
15298: LIST
15299: LIST
15300: LIST
15301: LIST
15302: PUSH
15303: LD_INT 101
15305: PUSH
15306: LD_INT 102
15308: PUSH
15309: LD_INT 103
15311: PUSH
15312: LD_INT 104
15314: PUSH
15315: LD_INT 105
15317: PUSH
15318: LD_INT 106
15320: PUSH
15321: LD_INT 107
15323: PUSH
15324: LD_INT 108
15326: PUSH
15327: LD_INT 109
15329: PUSH
15330: LD_INT 110
15332: PUSH
15333: LD_INT 111
15335: PUSH
15336: LD_INT 112
15338: PUSH
15339: LD_INT 114
15341: PUSH
15342: LD_INT 116
15344: PUSH
15345: LD_INT 117
15347: PUSH
15348: LD_INT 118
15350: PUSH
15351: EMPTY
15352: LIST
15353: LIST
15354: LIST
15355: LIST
15356: LIST
15357: LIST
15358: LIST
15359: LIST
15360: LIST
15361: LIST
15362: LIST
15363: LIST
15364: LIST
15365: LIST
15366: LIST
15367: LIST
15368: PUSH
15369: EMPTY
15370: LIST
15371: LIST
15372: ST_TO_ADDR
15373: GO 17056
15375: LD_INT 12
15377: DOUBLE
15378: EQUAL
15379: IFTRUE 15383
15381: GO 15603
15383: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
15384: LD_ADDR_VAR 0 2
15388: PUSH
15389: LD_INT 1
15391: PUSH
15392: LD_INT 2
15394: PUSH
15395: LD_INT 3
15397: PUSH
15398: LD_INT 4
15400: PUSH
15401: LD_INT 5
15403: PUSH
15404: LD_INT 6
15406: PUSH
15407: LD_INT 7
15409: PUSH
15410: LD_INT 8
15412: PUSH
15413: LD_INT 9
15415: PUSH
15416: LD_INT 10
15418: PUSH
15419: LD_INT 11
15421: PUSH
15422: LD_INT 12
15424: PUSH
15425: LD_INT 13
15427: PUSH
15428: LD_INT 14
15430: PUSH
15431: LD_INT 15
15433: PUSH
15434: LD_INT 16
15436: PUSH
15437: LD_INT 17
15439: PUSH
15440: LD_INT 18
15442: PUSH
15443: LD_INT 19
15445: PUSH
15446: LD_INT 20
15448: PUSH
15449: LD_INT 21
15451: PUSH
15452: LD_INT 22
15454: PUSH
15455: LD_INT 23
15457: PUSH
15458: LD_INT 24
15460: PUSH
15461: LD_INT 25
15463: PUSH
15464: LD_INT 26
15466: PUSH
15467: LD_INT 27
15469: PUSH
15470: LD_INT 28
15472: PUSH
15473: LD_INT 30
15475: PUSH
15476: LD_INT 31
15478: PUSH
15479: LD_INT 32
15481: PUSH
15482: LD_INT 33
15484: PUSH
15485: LD_INT 34
15487: PUSH
15488: LD_INT 36
15490: PUSH
15491: EMPTY
15492: LIST
15493: LIST
15494: LIST
15495: LIST
15496: LIST
15497: LIST
15498: LIST
15499: LIST
15500: LIST
15501: LIST
15502: LIST
15503: LIST
15504: LIST
15505: LIST
15506: LIST
15507: LIST
15508: LIST
15509: LIST
15510: LIST
15511: LIST
15512: LIST
15513: LIST
15514: LIST
15515: LIST
15516: LIST
15517: LIST
15518: LIST
15519: LIST
15520: LIST
15521: LIST
15522: LIST
15523: LIST
15524: LIST
15525: LIST
15526: PUSH
15527: LD_INT 101
15529: PUSH
15530: LD_INT 102
15532: PUSH
15533: LD_INT 103
15535: PUSH
15536: LD_INT 104
15538: PUSH
15539: LD_INT 105
15541: PUSH
15542: LD_INT 106
15544: PUSH
15545: LD_INT 107
15547: PUSH
15548: LD_INT 108
15550: PUSH
15551: LD_INT 109
15553: PUSH
15554: LD_INT 110
15556: PUSH
15557: LD_INT 111
15559: PUSH
15560: LD_INT 112
15562: PUSH
15563: LD_INT 113
15565: PUSH
15566: LD_INT 114
15568: PUSH
15569: LD_INT 116
15571: PUSH
15572: LD_INT 117
15574: PUSH
15575: LD_INT 118
15577: PUSH
15578: EMPTY
15579: LIST
15580: LIST
15581: LIST
15582: LIST
15583: LIST
15584: LIST
15585: LIST
15586: LIST
15587: LIST
15588: LIST
15589: LIST
15590: LIST
15591: LIST
15592: LIST
15593: LIST
15594: LIST
15595: LIST
15596: PUSH
15597: EMPTY
15598: LIST
15599: LIST
15600: ST_TO_ADDR
15601: GO 17056
15603: LD_INT 13
15605: DOUBLE
15606: EQUAL
15607: IFTRUE 15611
15609: GO 15819
15611: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
15612: LD_ADDR_VAR 0 2
15616: PUSH
15617: LD_INT 1
15619: PUSH
15620: LD_INT 2
15622: PUSH
15623: LD_INT 3
15625: PUSH
15626: LD_INT 4
15628: PUSH
15629: LD_INT 5
15631: PUSH
15632: LD_INT 8
15634: PUSH
15635: LD_INT 9
15637: PUSH
15638: LD_INT 10
15640: PUSH
15641: LD_INT 11
15643: PUSH
15644: LD_INT 12
15646: PUSH
15647: LD_INT 14
15649: PUSH
15650: LD_INT 15
15652: PUSH
15653: LD_INT 16
15655: PUSH
15656: LD_INT 17
15658: PUSH
15659: LD_INT 18
15661: PUSH
15662: LD_INT 19
15664: PUSH
15665: LD_INT 20
15667: PUSH
15668: LD_INT 21
15670: PUSH
15671: LD_INT 22
15673: PUSH
15674: LD_INT 23
15676: PUSH
15677: LD_INT 24
15679: PUSH
15680: LD_INT 25
15682: PUSH
15683: LD_INT 26
15685: PUSH
15686: LD_INT 27
15688: PUSH
15689: LD_INT 28
15691: PUSH
15692: LD_INT 30
15694: PUSH
15695: LD_INT 31
15697: PUSH
15698: LD_INT 32
15700: PUSH
15701: LD_INT 33
15703: PUSH
15704: LD_INT 34
15706: PUSH
15707: LD_INT 36
15709: PUSH
15710: EMPTY
15711: LIST
15712: LIST
15713: LIST
15714: LIST
15715: LIST
15716: LIST
15717: LIST
15718: LIST
15719: LIST
15720: LIST
15721: LIST
15722: LIST
15723: LIST
15724: LIST
15725: LIST
15726: LIST
15727: LIST
15728: LIST
15729: LIST
15730: LIST
15731: LIST
15732: LIST
15733: LIST
15734: LIST
15735: LIST
15736: LIST
15737: LIST
15738: LIST
15739: LIST
15740: LIST
15741: LIST
15742: PUSH
15743: LD_INT 101
15745: PUSH
15746: LD_INT 102
15748: PUSH
15749: LD_INT 103
15751: PUSH
15752: LD_INT 104
15754: PUSH
15755: LD_INT 105
15757: PUSH
15758: LD_INT 106
15760: PUSH
15761: LD_INT 107
15763: PUSH
15764: LD_INT 108
15766: PUSH
15767: LD_INT 109
15769: PUSH
15770: LD_INT 110
15772: PUSH
15773: LD_INT 111
15775: PUSH
15776: LD_INT 112
15778: PUSH
15779: LD_INT 113
15781: PUSH
15782: LD_INT 114
15784: PUSH
15785: LD_INT 116
15787: PUSH
15788: LD_INT 117
15790: PUSH
15791: LD_INT 118
15793: PUSH
15794: EMPTY
15795: LIST
15796: LIST
15797: LIST
15798: LIST
15799: LIST
15800: LIST
15801: LIST
15802: LIST
15803: LIST
15804: LIST
15805: LIST
15806: LIST
15807: LIST
15808: LIST
15809: LIST
15810: LIST
15811: LIST
15812: PUSH
15813: EMPTY
15814: LIST
15815: LIST
15816: ST_TO_ADDR
15817: GO 17056
15819: LD_INT 14
15821: DOUBLE
15822: EQUAL
15823: IFTRUE 15827
15825: GO 16051
15827: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
15828: LD_ADDR_VAR 0 2
15832: PUSH
15833: LD_INT 1
15835: PUSH
15836: LD_INT 2
15838: PUSH
15839: LD_INT 3
15841: PUSH
15842: LD_INT 4
15844: PUSH
15845: LD_INT 5
15847: PUSH
15848: LD_INT 6
15850: PUSH
15851: LD_INT 7
15853: PUSH
15854: LD_INT 8
15856: PUSH
15857: LD_INT 9
15859: PUSH
15860: LD_INT 10
15862: PUSH
15863: LD_INT 11
15865: PUSH
15866: LD_INT 12
15868: PUSH
15869: LD_INT 13
15871: PUSH
15872: LD_INT 14
15874: PUSH
15875: LD_INT 15
15877: PUSH
15878: LD_INT 16
15880: PUSH
15881: LD_INT 17
15883: PUSH
15884: LD_INT 18
15886: PUSH
15887: LD_INT 19
15889: PUSH
15890: LD_INT 20
15892: PUSH
15893: LD_INT 21
15895: PUSH
15896: LD_INT 22
15898: PUSH
15899: LD_INT 23
15901: PUSH
15902: LD_INT 24
15904: PUSH
15905: LD_INT 25
15907: PUSH
15908: LD_INT 26
15910: PUSH
15911: LD_INT 27
15913: PUSH
15914: LD_INT 28
15916: PUSH
15917: LD_INT 29
15919: PUSH
15920: LD_INT 30
15922: PUSH
15923: LD_INT 31
15925: PUSH
15926: LD_INT 32
15928: PUSH
15929: LD_INT 33
15931: PUSH
15932: LD_INT 34
15934: PUSH
15935: LD_INT 36
15937: PUSH
15938: EMPTY
15939: LIST
15940: LIST
15941: LIST
15942: LIST
15943: LIST
15944: LIST
15945: LIST
15946: LIST
15947: LIST
15948: LIST
15949: LIST
15950: LIST
15951: LIST
15952: LIST
15953: LIST
15954: LIST
15955: LIST
15956: LIST
15957: LIST
15958: LIST
15959: LIST
15960: LIST
15961: LIST
15962: LIST
15963: LIST
15964: LIST
15965: LIST
15966: LIST
15967: LIST
15968: LIST
15969: LIST
15970: LIST
15971: LIST
15972: LIST
15973: LIST
15974: PUSH
15975: LD_INT 101
15977: PUSH
15978: LD_INT 102
15980: PUSH
15981: LD_INT 103
15983: PUSH
15984: LD_INT 104
15986: PUSH
15987: LD_INT 105
15989: PUSH
15990: LD_INT 106
15992: PUSH
15993: LD_INT 107
15995: PUSH
15996: LD_INT 108
15998: PUSH
15999: LD_INT 109
16001: PUSH
16002: LD_INT 110
16004: PUSH
16005: LD_INT 111
16007: PUSH
16008: LD_INT 112
16010: PUSH
16011: LD_INT 113
16013: PUSH
16014: LD_INT 114
16016: PUSH
16017: LD_INT 116
16019: PUSH
16020: LD_INT 117
16022: PUSH
16023: LD_INT 118
16025: PUSH
16026: EMPTY
16027: LIST
16028: LIST
16029: LIST
16030: LIST
16031: LIST
16032: LIST
16033: LIST
16034: LIST
16035: LIST
16036: LIST
16037: LIST
16038: LIST
16039: LIST
16040: LIST
16041: LIST
16042: LIST
16043: LIST
16044: PUSH
16045: EMPTY
16046: LIST
16047: LIST
16048: ST_TO_ADDR
16049: GO 17056
16051: LD_INT 15
16053: DOUBLE
16054: EQUAL
16055: IFTRUE 16059
16057: GO 16283
16059: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
16060: LD_ADDR_VAR 0 2
16064: PUSH
16065: LD_INT 1
16067: PUSH
16068: LD_INT 2
16070: PUSH
16071: LD_INT 3
16073: PUSH
16074: LD_INT 4
16076: PUSH
16077: LD_INT 5
16079: PUSH
16080: LD_INT 6
16082: PUSH
16083: LD_INT 7
16085: PUSH
16086: LD_INT 8
16088: PUSH
16089: LD_INT 9
16091: PUSH
16092: LD_INT 10
16094: PUSH
16095: LD_INT 11
16097: PUSH
16098: LD_INT 12
16100: PUSH
16101: LD_INT 13
16103: PUSH
16104: LD_INT 14
16106: PUSH
16107: LD_INT 15
16109: PUSH
16110: LD_INT 16
16112: PUSH
16113: LD_INT 17
16115: PUSH
16116: LD_INT 18
16118: PUSH
16119: LD_INT 19
16121: PUSH
16122: LD_INT 20
16124: PUSH
16125: LD_INT 21
16127: PUSH
16128: LD_INT 22
16130: PUSH
16131: LD_INT 23
16133: PUSH
16134: LD_INT 24
16136: PUSH
16137: LD_INT 25
16139: PUSH
16140: LD_INT 26
16142: PUSH
16143: LD_INT 27
16145: PUSH
16146: LD_INT 28
16148: PUSH
16149: LD_INT 29
16151: PUSH
16152: LD_INT 30
16154: PUSH
16155: LD_INT 31
16157: PUSH
16158: LD_INT 32
16160: PUSH
16161: LD_INT 33
16163: PUSH
16164: LD_INT 34
16166: PUSH
16167: LD_INT 36
16169: PUSH
16170: EMPTY
16171: LIST
16172: LIST
16173: LIST
16174: LIST
16175: LIST
16176: LIST
16177: LIST
16178: LIST
16179: LIST
16180: LIST
16181: LIST
16182: LIST
16183: LIST
16184: LIST
16185: LIST
16186: LIST
16187: LIST
16188: LIST
16189: LIST
16190: LIST
16191: LIST
16192: LIST
16193: LIST
16194: LIST
16195: LIST
16196: LIST
16197: LIST
16198: LIST
16199: LIST
16200: LIST
16201: LIST
16202: LIST
16203: LIST
16204: LIST
16205: LIST
16206: PUSH
16207: LD_INT 101
16209: PUSH
16210: LD_INT 102
16212: PUSH
16213: LD_INT 103
16215: PUSH
16216: LD_INT 104
16218: PUSH
16219: LD_INT 105
16221: PUSH
16222: LD_INT 106
16224: PUSH
16225: LD_INT 107
16227: PUSH
16228: LD_INT 108
16230: PUSH
16231: LD_INT 109
16233: PUSH
16234: LD_INT 110
16236: PUSH
16237: LD_INT 111
16239: PUSH
16240: LD_INT 112
16242: PUSH
16243: LD_INT 113
16245: PUSH
16246: LD_INT 114
16248: PUSH
16249: LD_INT 116
16251: PUSH
16252: LD_INT 117
16254: PUSH
16255: LD_INT 118
16257: PUSH
16258: EMPTY
16259: LIST
16260: LIST
16261: LIST
16262: LIST
16263: LIST
16264: LIST
16265: LIST
16266: LIST
16267: LIST
16268: LIST
16269: LIST
16270: LIST
16271: LIST
16272: LIST
16273: LIST
16274: LIST
16275: LIST
16276: PUSH
16277: EMPTY
16278: LIST
16279: LIST
16280: ST_TO_ADDR
16281: GO 17056
16283: LD_INT 16
16285: DOUBLE
16286: EQUAL
16287: IFTRUE 16291
16289: GO 16427
16291: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
16292: LD_ADDR_VAR 0 2
16296: PUSH
16297: LD_INT 2
16299: PUSH
16300: LD_INT 4
16302: PUSH
16303: LD_INT 5
16305: PUSH
16306: LD_INT 7
16308: PUSH
16309: LD_INT 11
16311: PUSH
16312: LD_INT 12
16314: PUSH
16315: LD_INT 15
16317: PUSH
16318: LD_INT 16
16320: PUSH
16321: LD_INT 20
16323: PUSH
16324: LD_INT 21
16326: PUSH
16327: LD_INT 22
16329: PUSH
16330: LD_INT 23
16332: PUSH
16333: LD_INT 25
16335: PUSH
16336: LD_INT 26
16338: PUSH
16339: LD_INT 30
16341: PUSH
16342: LD_INT 31
16344: PUSH
16345: LD_INT 32
16347: PUSH
16348: LD_INT 33
16350: PUSH
16351: LD_INT 34
16353: PUSH
16354: EMPTY
16355: LIST
16356: LIST
16357: LIST
16358: LIST
16359: LIST
16360: LIST
16361: LIST
16362: LIST
16363: LIST
16364: LIST
16365: LIST
16366: LIST
16367: LIST
16368: LIST
16369: LIST
16370: LIST
16371: LIST
16372: LIST
16373: LIST
16374: PUSH
16375: LD_INT 101
16377: PUSH
16378: LD_INT 102
16380: PUSH
16381: LD_INT 103
16383: PUSH
16384: LD_INT 106
16386: PUSH
16387: LD_INT 108
16389: PUSH
16390: LD_INT 112
16392: PUSH
16393: LD_INT 113
16395: PUSH
16396: LD_INT 114
16398: PUSH
16399: LD_INT 116
16401: PUSH
16402: LD_INT 117
16404: PUSH
16405: LD_INT 118
16407: PUSH
16408: EMPTY
16409: LIST
16410: LIST
16411: LIST
16412: LIST
16413: LIST
16414: LIST
16415: LIST
16416: LIST
16417: LIST
16418: LIST
16419: LIST
16420: PUSH
16421: EMPTY
16422: LIST
16423: LIST
16424: ST_TO_ADDR
16425: GO 17056
16427: LD_INT 17
16429: DOUBLE
16430: EQUAL
16431: IFTRUE 16435
16433: GO 16659
16435: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
16436: LD_ADDR_VAR 0 2
16440: PUSH
16441: LD_INT 1
16443: PUSH
16444: LD_INT 2
16446: PUSH
16447: LD_INT 3
16449: PUSH
16450: LD_INT 4
16452: PUSH
16453: LD_INT 5
16455: PUSH
16456: LD_INT 6
16458: PUSH
16459: LD_INT 7
16461: PUSH
16462: LD_INT 8
16464: PUSH
16465: LD_INT 9
16467: PUSH
16468: LD_INT 10
16470: PUSH
16471: LD_INT 11
16473: PUSH
16474: LD_INT 12
16476: PUSH
16477: LD_INT 13
16479: PUSH
16480: LD_INT 14
16482: PUSH
16483: LD_INT 15
16485: PUSH
16486: LD_INT 16
16488: PUSH
16489: LD_INT 17
16491: PUSH
16492: LD_INT 18
16494: PUSH
16495: LD_INT 19
16497: PUSH
16498: LD_INT 20
16500: PUSH
16501: LD_INT 21
16503: PUSH
16504: LD_INT 22
16506: PUSH
16507: LD_INT 23
16509: PUSH
16510: LD_INT 24
16512: PUSH
16513: LD_INT 25
16515: PUSH
16516: LD_INT 26
16518: PUSH
16519: LD_INT 27
16521: PUSH
16522: LD_INT 28
16524: PUSH
16525: LD_INT 29
16527: PUSH
16528: LD_INT 30
16530: PUSH
16531: LD_INT 31
16533: PUSH
16534: LD_INT 32
16536: PUSH
16537: LD_INT 33
16539: PUSH
16540: LD_INT 34
16542: PUSH
16543: LD_INT 36
16545: PUSH
16546: EMPTY
16547: LIST
16548: LIST
16549: LIST
16550: LIST
16551: LIST
16552: LIST
16553: LIST
16554: LIST
16555: LIST
16556: LIST
16557: LIST
16558: LIST
16559: LIST
16560: LIST
16561: LIST
16562: LIST
16563: LIST
16564: LIST
16565: LIST
16566: LIST
16567: LIST
16568: LIST
16569: LIST
16570: LIST
16571: LIST
16572: LIST
16573: LIST
16574: LIST
16575: LIST
16576: LIST
16577: LIST
16578: LIST
16579: LIST
16580: LIST
16581: LIST
16582: PUSH
16583: LD_INT 101
16585: PUSH
16586: LD_INT 102
16588: PUSH
16589: LD_INT 103
16591: PUSH
16592: LD_INT 104
16594: PUSH
16595: LD_INT 105
16597: PUSH
16598: LD_INT 106
16600: PUSH
16601: LD_INT 107
16603: PUSH
16604: LD_INT 108
16606: PUSH
16607: LD_INT 109
16609: PUSH
16610: LD_INT 110
16612: PUSH
16613: LD_INT 111
16615: PUSH
16616: LD_INT 112
16618: PUSH
16619: LD_INT 113
16621: PUSH
16622: LD_INT 114
16624: PUSH
16625: LD_INT 116
16627: PUSH
16628: LD_INT 117
16630: PUSH
16631: LD_INT 118
16633: PUSH
16634: EMPTY
16635: LIST
16636: LIST
16637: LIST
16638: LIST
16639: LIST
16640: LIST
16641: LIST
16642: LIST
16643: LIST
16644: LIST
16645: LIST
16646: LIST
16647: LIST
16648: LIST
16649: LIST
16650: LIST
16651: LIST
16652: PUSH
16653: EMPTY
16654: LIST
16655: LIST
16656: ST_TO_ADDR
16657: GO 17056
16659: LD_INT 18
16661: DOUBLE
16662: EQUAL
16663: IFTRUE 16667
16665: GO 16815
16667: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
16668: LD_ADDR_VAR 0 2
16672: PUSH
16673: LD_INT 2
16675: PUSH
16676: LD_INT 4
16678: PUSH
16679: LD_INT 5
16681: PUSH
16682: LD_INT 7
16684: PUSH
16685: LD_INT 11
16687: PUSH
16688: LD_INT 12
16690: PUSH
16691: LD_INT 15
16693: PUSH
16694: LD_INT 16
16696: PUSH
16697: LD_INT 20
16699: PUSH
16700: LD_INT 21
16702: PUSH
16703: LD_INT 22
16705: PUSH
16706: LD_INT 23
16708: PUSH
16709: LD_INT 25
16711: PUSH
16712: LD_INT 26
16714: PUSH
16715: LD_INT 30
16717: PUSH
16718: LD_INT 31
16720: PUSH
16721: LD_INT 32
16723: PUSH
16724: LD_INT 33
16726: PUSH
16727: LD_INT 34
16729: PUSH
16730: LD_INT 35
16732: PUSH
16733: LD_INT 36
16735: PUSH
16736: EMPTY
16737: LIST
16738: LIST
16739: LIST
16740: LIST
16741: LIST
16742: LIST
16743: LIST
16744: LIST
16745: LIST
16746: LIST
16747: LIST
16748: LIST
16749: LIST
16750: LIST
16751: LIST
16752: LIST
16753: LIST
16754: LIST
16755: LIST
16756: LIST
16757: LIST
16758: PUSH
16759: LD_INT 101
16761: PUSH
16762: LD_INT 102
16764: PUSH
16765: LD_INT 103
16767: PUSH
16768: LD_INT 106
16770: PUSH
16771: LD_INT 108
16773: PUSH
16774: LD_INT 112
16776: PUSH
16777: LD_INT 113
16779: PUSH
16780: LD_INT 114
16782: PUSH
16783: LD_INT 115
16785: PUSH
16786: LD_INT 116
16788: PUSH
16789: LD_INT 117
16791: PUSH
16792: LD_INT 118
16794: PUSH
16795: EMPTY
16796: LIST
16797: LIST
16798: LIST
16799: LIST
16800: LIST
16801: LIST
16802: LIST
16803: LIST
16804: LIST
16805: LIST
16806: LIST
16807: LIST
16808: PUSH
16809: EMPTY
16810: LIST
16811: LIST
16812: ST_TO_ADDR
16813: GO 17056
16815: LD_INT 19
16817: DOUBLE
16818: EQUAL
16819: IFTRUE 16823
16821: GO 17055
16823: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
16824: LD_ADDR_VAR 0 2
16828: PUSH
16829: LD_INT 1
16831: PUSH
16832: LD_INT 2
16834: PUSH
16835: LD_INT 3
16837: PUSH
16838: LD_INT 4
16840: PUSH
16841: LD_INT 5
16843: PUSH
16844: LD_INT 6
16846: PUSH
16847: LD_INT 7
16849: PUSH
16850: LD_INT 8
16852: PUSH
16853: LD_INT 9
16855: PUSH
16856: LD_INT 10
16858: PUSH
16859: LD_INT 11
16861: PUSH
16862: LD_INT 12
16864: PUSH
16865: LD_INT 13
16867: PUSH
16868: LD_INT 14
16870: PUSH
16871: LD_INT 15
16873: PUSH
16874: LD_INT 16
16876: PUSH
16877: LD_INT 17
16879: PUSH
16880: LD_INT 18
16882: PUSH
16883: LD_INT 19
16885: PUSH
16886: LD_INT 20
16888: PUSH
16889: LD_INT 21
16891: PUSH
16892: LD_INT 22
16894: PUSH
16895: LD_INT 23
16897: PUSH
16898: LD_INT 24
16900: PUSH
16901: LD_INT 25
16903: PUSH
16904: LD_INT 26
16906: PUSH
16907: LD_INT 27
16909: PUSH
16910: LD_INT 28
16912: PUSH
16913: LD_INT 29
16915: PUSH
16916: LD_INT 30
16918: PUSH
16919: LD_INT 31
16921: PUSH
16922: LD_INT 32
16924: PUSH
16925: LD_INT 33
16927: PUSH
16928: LD_INT 34
16930: PUSH
16931: LD_INT 35
16933: PUSH
16934: LD_INT 36
16936: PUSH
16937: EMPTY
16938: LIST
16939: LIST
16940: LIST
16941: LIST
16942: LIST
16943: LIST
16944: LIST
16945: LIST
16946: LIST
16947: LIST
16948: LIST
16949: LIST
16950: LIST
16951: LIST
16952: LIST
16953: LIST
16954: LIST
16955: LIST
16956: LIST
16957: LIST
16958: LIST
16959: LIST
16960: LIST
16961: LIST
16962: LIST
16963: LIST
16964: LIST
16965: LIST
16966: LIST
16967: LIST
16968: LIST
16969: LIST
16970: LIST
16971: LIST
16972: LIST
16973: LIST
16974: PUSH
16975: LD_INT 101
16977: PUSH
16978: LD_INT 102
16980: PUSH
16981: LD_INT 103
16983: PUSH
16984: LD_INT 104
16986: PUSH
16987: LD_INT 105
16989: PUSH
16990: LD_INT 106
16992: PUSH
16993: LD_INT 107
16995: PUSH
16996: LD_INT 108
16998: PUSH
16999: LD_INT 109
17001: PUSH
17002: LD_INT 110
17004: PUSH
17005: LD_INT 111
17007: PUSH
17008: LD_INT 112
17010: PUSH
17011: LD_INT 113
17013: PUSH
17014: LD_INT 114
17016: PUSH
17017: LD_INT 115
17019: PUSH
17020: LD_INT 116
17022: PUSH
17023: LD_INT 117
17025: PUSH
17026: LD_INT 118
17028: PUSH
17029: EMPTY
17030: LIST
17031: LIST
17032: LIST
17033: LIST
17034: LIST
17035: LIST
17036: LIST
17037: LIST
17038: LIST
17039: LIST
17040: LIST
17041: LIST
17042: LIST
17043: LIST
17044: LIST
17045: LIST
17046: LIST
17047: LIST
17048: PUSH
17049: EMPTY
17050: LIST
17051: LIST
17052: ST_TO_ADDR
17053: GO 17056
17055: POP
// end else
17056: GO 17287
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
17058: LD_ADDR_VAR 0 2
17062: PUSH
17063: LD_INT 1
17065: PUSH
17066: LD_INT 2
17068: PUSH
17069: LD_INT 3
17071: PUSH
17072: LD_INT 4
17074: PUSH
17075: LD_INT 5
17077: PUSH
17078: LD_INT 6
17080: PUSH
17081: LD_INT 7
17083: PUSH
17084: LD_INT 8
17086: PUSH
17087: LD_INT 9
17089: PUSH
17090: LD_INT 10
17092: PUSH
17093: LD_INT 11
17095: PUSH
17096: LD_INT 12
17098: PUSH
17099: LD_INT 13
17101: PUSH
17102: LD_INT 14
17104: PUSH
17105: LD_INT 15
17107: PUSH
17108: LD_INT 16
17110: PUSH
17111: LD_INT 17
17113: PUSH
17114: LD_INT 18
17116: PUSH
17117: LD_INT 19
17119: PUSH
17120: LD_INT 20
17122: PUSH
17123: LD_INT 21
17125: PUSH
17126: LD_INT 22
17128: PUSH
17129: LD_INT 23
17131: PUSH
17132: LD_INT 24
17134: PUSH
17135: LD_INT 25
17137: PUSH
17138: LD_INT 26
17140: PUSH
17141: LD_INT 27
17143: PUSH
17144: LD_INT 28
17146: PUSH
17147: LD_INT 29
17149: PUSH
17150: LD_INT 30
17152: PUSH
17153: LD_INT 31
17155: PUSH
17156: LD_INT 32
17158: PUSH
17159: LD_INT 33
17161: PUSH
17162: LD_INT 34
17164: PUSH
17165: LD_INT 35
17167: PUSH
17168: LD_INT 36
17170: PUSH
17171: EMPTY
17172: LIST
17173: LIST
17174: LIST
17175: LIST
17176: LIST
17177: LIST
17178: LIST
17179: LIST
17180: LIST
17181: LIST
17182: LIST
17183: LIST
17184: LIST
17185: LIST
17186: LIST
17187: LIST
17188: LIST
17189: LIST
17190: LIST
17191: LIST
17192: LIST
17193: LIST
17194: LIST
17195: LIST
17196: LIST
17197: LIST
17198: LIST
17199: LIST
17200: LIST
17201: LIST
17202: LIST
17203: LIST
17204: LIST
17205: LIST
17206: LIST
17207: LIST
17208: PUSH
17209: LD_INT 101
17211: PUSH
17212: LD_INT 102
17214: PUSH
17215: LD_INT 103
17217: PUSH
17218: LD_INT 104
17220: PUSH
17221: LD_INT 105
17223: PUSH
17224: LD_INT 106
17226: PUSH
17227: LD_INT 107
17229: PUSH
17230: LD_INT 108
17232: PUSH
17233: LD_INT 109
17235: PUSH
17236: LD_INT 110
17238: PUSH
17239: LD_INT 111
17241: PUSH
17242: LD_INT 112
17244: PUSH
17245: LD_INT 113
17247: PUSH
17248: LD_INT 114
17250: PUSH
17251: LD_INT 115
17253: PUSH
17254: LD_INT 116
17256: PUSH
17257: LD_INT 117
17259: PUSH
17260: LD_INT 118
17262: PUSH
17263: EMPTY
17264: LIST
17265: LIST
17266: LIST
17267: LIST
17268: LIST
17269: LIST
17270: LIST
17271: LIST
17272: LIST
17273: LIST
17274: LIST
17275: LIST
17276: LIST
17277: LIST
17278: LIST
17279: LIST
17280: LIST
17281: LIST
17282: PUSH
17283: EMPTY
17284: LIST
17285: LIST
17286: ST_TO_ADDR
// if result then
17287: LD_VAR 0 2
17291: IFFALSE 18077
// begin normal :=  ;
17293: LD_ADDR_VAR 0 5
17297: PUSH
17298: LD_STRING 
17300: ST_TO_ADDR
// hardcore :=  ;
17301: LD_ADDR_VAR 0 6
17305: PUSH
17306: LD_STRING 
17308: ST_TO_ADDR
// active :=  ;
17309: LD_ADDR_VAR 0 7
17313: PUSH
17314: LD_STRING 
17316: ST_TO_ADDR
// for i = 1 to normalCounter do
17317: LD_ADDR_VAR 0 8
17321: PUSH
17322: DOUBLE
17323: LD_INT 1
17325: DEC
17326: ST_TO_ADDR
17327: LD_EXP 22
17331: PUSH
17332: FOR_TO
17333: IFFALSE 17434
// begin tmp := 0 ;
17335: LD_ADDR_VAR 0 3
17339: PUSH
17340: LD_STRING 0
17342: ST_TO_ADDR
// if result [ 1 ] then
17343: LD_VAR 0 2
17347: PUSH
17348: LD_INT 1
17350: ARRAY
17351: IFFALSE 17416
// if result [ 1 ] [ 1 ] = i then
17353: LD_VAR 0 2
17357: PUSH
17358: LD_INT 1
17360: ARRAY
17361: PUSH
17362: LD_INT 1
17364: ARRAY
17365: PUSH
17366: LD_VAR 0 8
17370: EQUAL
17371: IFFALSE 17416
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
17373: LD_ADDR_VAR 0 2
17377: PUSH
17378: LD_VAR 0 2
17382: PPUSH
17383: LD_INT 1
17385: PPUSH
17386: LD_VAR 0 2
17390: PUSH
17391: LD_INT 1
17393: ARRAY
17394: PPUSH
17395: LD_INT 1
17397: PPUSH
17398: CALL_OW 3
17402: PPUSH
17403: CALL_OW 1
17407: ST_TO_ADDR
// tmp := 1 ;
17408: LD_ADDR_VAR 0 3
17412: PUSH
17413: LD_STRING 1
17415: ST_TO_ADDR
// end ; normal := normal & tmp ;
17416: LD_ADDR_VAR 0 5
17420: PUSH
17421: LD_VAR 0 5
17425: PUSH
17426: LD_VAR 0 3
17430: STR
17431: ST_TO_ADDR
// end ;
17432: GO 17332
17434: POP
17435: POP
// for i = 1 to hardcoreCounter do
17436: LD_ADDR_VAR 0 8
17440: PUSH
17441: DOUBLE
17442: LD_INT 1
17444: DEC
17445: ST_TO_ADDR
17446: LD_EXP 23
17450: PUSH
17451: FOR_TO
17452: IFFALSE 17557
// begin tmp := 0 ;
17454: LD_ADDR_VAR 0 3
17458: PUSH
17459: LD_STRING 0
17461: ST_TO_ADDR
// if result [ 2 ] then
17462: LD_VAR 0 2
17466: PUSH
17467: LD_INT 2
17469: ARRAY
17470: IFFALSE 17539
// if result [ 2 ] [ 1 ] = 100 + i then
17472: LD_VAR 0 2
17476: PUSH
17477: LD_INT 2
17479: ARRAY
17480: PUSH
17481: LD_INT 1
17483: ARRAY
17484: PUSH
17485: LD_INT 100
17487: PUSH
17488: LD_VAR 0 8
17492: PLUS
17493: EQUAL
17494: IFFALSE 17539
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
17496: LD_ADDR_VAR 0 2
17500: PUSH
17501: LD_VAR 0 2
17505: PPUSH
17506: LD_INT 2
17508: PPUSH
17509: LD_VAR 0 2
17513: PUSH
17514: LD_INT 2
17516: ARRAY
17517: PPUSH
17518: LD_INT 1
17520: PPUSH
17521: CALL_OW 3
17525: PPUSH
17526: CALL_OW 1
17530: ST_TO_ADDR
// tmp := 1 ;
17531: LD_ADDR_VAR 0 3
17535: PUSH
17536: LD_STRING 1
17538: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
17539: LD_ADDR_VAR 0 6
17543: PUSH
17544: LD_VAR 0 6
17548: PUSH
17549: LD_VAR 0 3
17553: STR
17554: ST_TO_ADDR
// end ;
17555: GO 17451
17557: POP
17558: POP
// if isGameLoad then
17559: LD_VAR 0 1
17563: IFFALSE 18038
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
17565: LD_ADDR_VAR 0 4
17569: PUSH
17570: LD_EXP 26
17574: PUSH
17575: LD_EXP 25
17579: PUSH
17580: LD_EXP 27
17584: PUSH
17585: LD_EXP 24
17589: PUSH
17590: LD_EXP 28
17594: PUSH
17595: LD_EXP 29
17599: PUSH
17600: LD_EXP 30
17604: PUSH
17605: LD_EXP 31
17609: PUSH
17610: LD_EXP 32
17614: PUSH
17615: LD_EXP 33
17619: PUSH
17620: LD_EXP 34
17624: PUSH
17625: LD_EXP 35
17629: PUSH
17630: LD_EXP 36
17634: PUSH
17635: LD_EXP 37
17639: PUSH
17640: LD_EXP 45
17644: PUSH
17645: LD_EXP 46
17649: PUSH
17650: LD_EXP 47
17654: PUSH
17655: LD_EXP 48
17659: PUSH
17660: LD_EXP 50
17664: PUSH
17665: LD_EXP 51
17669: PUSH
17670: LD_EXP 52
17674: PUSH
17675: LD_EXP 55
17679: PUSH
17680: LD_EXP 57
17684: PUSH
17685: LD_EXP 58
17689: PUSH
17690: LD_EXP 59
17694: PUSH
17695: LD_EXP 61
17699: PUSH
17700: LD_EXP 62
17704: PUSH
17705: LD_EXP 65
17709: PUSH
17710: LD_EXP 66
17714: PUSH
17715: LD_EXP 67
17719: PUSH
17720: LD_EXP 68
17724: PUSH
17725: LD_EXP 69
17729: PUSH
17730: LD_EXP 70
17734: PUSH
17735: LD_EXP 71
17739: PUSH
17740: LD_EXP 72
17744: PUSH
17745: LD_EXP 73
17749: PUSH
17750: LD_EXP 38
17754: PUSH
17755: LD_EXP 39
17759: PUSH
17760: LD_EXP 42
17764: PUSH
17765: LD_EXP 43
17769: PUSH
17770: LD_EXP 44
17774: PUSH
17775: LD_EXP 40
17779: PUSH
17780: LD_EXP 41
17784: PUSH
17785: LD_EXP 49
17789: PUSH
17790: LD_EXP 53
17794: PUSH
17795: LD_EXP 54
17799: PUSH
17800: LD_EXP 56
17804: PUSH
17805: LD_EXP 60
17809: PUSH
17810: LD_EXP 63
17814: PUSH
17815: LD_EXP 64
17819: PUSH
17820: LD_EXP 74
17824: PUSH
17825: LD_EXP 75
17829: PUSH
17830: LD_EXP 76
17834: PUSH
17835: LD_EXP 77
17839: PUSH
17840: EMPTY
17841: LIST
17842: LIST
17843: LIST
17844: LIST
17845: LIST
17846: LIST
17847: LIST
17848: LIST
17849: LIST
17850: LIST
17851: LIST
17852: LIST
17853: LIST
17854: LIST
17855: LIST
17856: LIST
17857: LIST
17858: LIST
17859: LIST
17860: LIST
17861: LIST
17862: LIST
17863: LIST
17864: LIST
17865: LIST
17866: LIST
17867: LIST
17868: LIST
17869: LIST
17870: LIST
17871: LIST
17872: LIST
17873: LIST
17874: LIST
17875: LIST
17876: LIST
17877: LIST
17878: LIST
17879: LIST
17880: LIST
17881: LIST
17882: LIST
17883: LIST
17884: LIST
17885: LIST
17886: LIST
17887: LIST
17888: LIST
17889: LIST
17890: LIST
17891: LIST
17892: LIST
17893: LIST
17894: LIST
17895: ST_TO_ADDR
// tmp :=  ;
17896: LD_ADDR_VAR 0 3
17900: PUSH
17901: LD_STRING 
17903: ST_TO_ADDR
// for i = 1 to normalCounter do
17904: LD_ADDR_VAR 0 8
17908: PUSH
17909: DOUBLE
17910: LD_INT 1
17912: DEC
17913: ST_TO_ADDR
17914: LD_EXP 22
17918: PUSH
17919: FOR_TO
17920: IFFALSE 17956
// begin if flags [ i ] then
17922: LD_VAR 0 4
17926: PUSH
17927: LD_VAR 0 8
17931: ARRAY
17932: IFFALSE 17954
// tmp := tmp & i & ; ;
17934: LD_ADDR_VAR 0 3
17938: PUSH
17939: LD_VAR 0 3
17943: PUSH
17944: LD_VAR 0 8
17948: STR
17949: PUSH
17950: LD_STRING ;
17952: STR
17953: ST_TO_ADDR
// end ;
17954: GO 17919
17956: POP
17957: POP
// for i = 1 to hardcoreCounter do
17958: LD_ADDR_VAR 0 8
17962: PUSH
17963: DOUBLE
17964: LD_INT 1
17966: DEC
17967: ST_TO_ADDR
17968: LD_EXP 23
17972: PUSH
17973: FOR_TO
17974: IFFALSE 18020
// begin if flags [ normalCounter + i ] then
17976: LD_VAR 0 4
17980: PUSH
17981: LD_EXP 22
17985: PUSH
17986: LD_VAR 0 8
17990: PLUS
17991: ARRAY
17992: IFFALSE 18018
// tmp := tmp & ( 100 + i ) & ; ;
17994: LD_ADDR_VAR 0 3
17998: PUSH
17999: LD_VAR 0 3
18003: PUSH
18004: LD_INT 100
18006: PUSH
18007: LD_VAR 0 8
18011: PLUS
18012: STR
18013: PUSH
18014: LD_STRING ;
18016: STR
18017: ST_TO_ADDR
// end ;
18018: GO 17973
18020: POP
18021: POP
// if tmp then
18022: LD_VAR 0 3
18026: IFFALSE 18038
// active := tmp ;
18028: LD_ADDR_VAR 0 7
18032: PUSH
18033: LD_VAR 0 3
18037: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
18038: LD_STRING getStreamItemsFromMission("
18040: PUSH
18041: LD_VAR 0 5
18045: STR
18046: PUSH
18047: LD_STRING ","
18049: STR
18050: PUSH
18051: LD_VAR 0 6
18055: STR
18056: PUSH
18057: LD_STRING ","
18059: STR
18060: PUSH
18061: LD_VAR 0 7
18065: STR
18066: PUSH
18067: LD_STRING ")
18069: STR
18070: PPUSH
18071: CALL_OW 559
// end else
18075: GO 18084
// ToLua ( getStreamItemsFromMission("","","") ) ;
18077: LD_STRING getStreamItemsFromMission("","","")
18079: PPUSH
18080: CALL_OW 559
// end ;
18084: LD_VAR 0 2
18088: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
18089: LD_EXP 21
18093: PUSH
18094: LD_EXP 26
18098: AND
18099: IFFALSE 18223
18101: GO 18103
18103: DISABLE
18104: LD_INT 0
18106: PPUSH
18107: PPUSH
// begin enable ;
18108: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
18109: LD_ADDR_VAR 0 2
18113: PUSH
18114: LD_INT 22
18116: PUSH
18117: LD_OWVAR 2
18121: PUSH
18122: EMPTY
18123: LIST
18124: LIST
18125: PUSH
18126: LD_INT 2
18128: PUSH
18129: LD_INT 34
18131: PUSH
18132: LD_INT 7
18134: PUSH
18135: EMPTY
18136: LIST
18137: LIST
18138: PUSH
18139: LD_INT 34
18141: PUSH
18142: LD_INT 45
18144: PUSH
18145: EMPTY
18146: LIST
18147: LIST
18148: PUSH
18149: LD_INT 34
18151: PUSH
18152: LD_INT 28
18154: PUSH
18155: EMPTY
18156: LIST
18157: LIST
18158: PUSH
18159: LD_INT 34
18161: PUSH
18162: LD_INT 47
18164: PUSH
18165: EMPTY
18166: LIST
18167: LIST
18168: PUSH
18169: EMPTY
18170: LIST
18171: LIST
18172: LIST
18173: LIST
18174: LIST
18175: PUSH
18176: EMPTY
18177: LIST
18178: LIST
18179: PPUSH
18180: CALL_OW 69
18184: ST_TO_ADDR
// if not tmp then
18185: LD_VAR 0 2
18189: NOT
18190: IFFALSE 18194
// exit ;
18192: GO 18223
// for i in tmp do
18194: LD_ADDR_VAR 0 1
18198: PUSH
18199: LD_VAR 0 2
18203: PUSH
18204: FOR_IN
18205: IFFALSE 18221
// begin SetLives ( i , 0 ) ;
18207: LD_VAR 0 1
18211: PPUSH
18212: LD_INT 0
18214: PPUSH
18215: CALL_OW 234
// end ;
18219: GO 18204
18221: POP
18222: POP
// end ;
18223: PPOPN 2
18225: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
18226: LD_EXP 21
18230: PUSH
18231: LD_EXP 27
18235: AND
18236: IFFALSE 18320
18238: GO 18240
18240: DISABLE
18241: LD_INT 0
18243: PPUSH
18244: PPUSH
// begin enable ;
18245: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
18246: LD_ADDR_VAR 0 2
18250: PUSH
18251: LD_INT 22
18253: PUSH
18254: LD_OWVAR 2
18258: PUSH
18259: EMPTY
18260: LIST
18261: LIST
18262: PUSH
18263: LD_INT 32
18265: PUSH
18266: LD_INT 3
18268: PUSH
18269: EMPTY
18270: LIST
18271: LIST
18272: PUSH
18273: EMPTY
18274: LIST
18275: LIST
18276: PPUSH
18277: CALL_OW 69
18281: ST_TO_ADDR
// if not tmp then
18282: LD_VAR 0 2
18286: NOT
18287: IFFALSE 18291
// exit ;
18289: GO 18320
// for i in tmp do
18291: LD_ADDR_VAR 0 1
18295: PUSH
18296: LD_VAR 0 2
18300: PUSH
18301: FOR_IN
18302: IFFALSE 18318
// begin SetLives ( i , 0 ) ;
18304: LD_VAR 0 1
18308: PPUSH
18309: LD_INT 0
18311: PPUSH
18312: CALL_OW 234
// end ;
18316: GO 18301
18318: POP
18319: POP
// end ;
18320: PPOPN 2
18322: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
18323: LD_EXP 21
18327: PUSH
18328: LD_EXP 24
18332: AND
18333: IFFALSE 18426
18335: GO 18337
18337: DISABLE
18338: LD_INT 0
18340: PPUSH
// begin enable ;
18341: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
18342: LD_ADDR_VAR 0 1
18346: PUSH
18347: LD_INT 22
18349: PUSH
18350: LD_OWVAR 2
18354: PUSH
18355: EMPTY
18356: LIST
18357: LIST
18358: PUSH
18359: LD_INT 2
18361: PUSH
18362: LD_INT 25
18364: PUSH
18365: LD_INT 5
18367: PUSH
18368: EMPTY
18369: LIST
18370: LIST
18371: PUSH
18372: LD_INT 25
18374: PUSH
18375: LD_INT 9
18377: PUSH
18378: EMPTY
18379: LIST
18380: LIST
18381: PUSH
18382: LD_INT 25
18384: PUSH
18385: LD_INT 8
18387: PUSH
18388: EMPTY
18389: LIST
18390: LIST
18391: PUSH
18392: EMPTY
18393: LIST
18394: LIST
18395: LIST
18396: LIST
18397: PUSH
18398: EMPTY
18399: LIST
18400: LIST
18401: PPUSH
18402: CALL_OW 69
18406: PUSH
18407: FOR_IN
18408: IFFALSE 18424
// begin SetClass ( i , 1 ) ;
18410: LD_VAR 0 1
18414: PPUSH
18415: LD_INT 1
18417: PPUSH
18418: CALL_OW 336
// end ;
18422: GO 18407
18424: POP
18425: POP
// end ;
18426: PPOPN 1
18428: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
18429: LD_EXP 21
18433: PUSH
18434: LD_EXP 25
18438: AND
18439: PUSH
18440: LD_OWVAR 65
18444: PUSH
18445: LD_INT 7
18447: LESS
18448: AND
18449: IFFALSE 18463
18451: GO 18453
18453: DISABLE
// begin enable ;
18454: ENABLE
// game_speed := 7 ;
18455: LD_ADDR_OWVAR 65
18459: PUSH
18460: LD_INT 7
18462: ST_TO_ADDR
// end ;
18463: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
18464: LD_EXP 21
18468: PUSH
18469: LD_EXP 28
18473: AND
18474: IFFALSE 18676
18476: GO 18478
18478: DISABLE
18479: LD_INT 0
18481: PPUSH
18482: PPUSH
18483: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
18484: LD_ADDR_VAR 0 3
18488: PUSH
18489: LD_INT 81
18491: PUSH
18492: LD_OWVAR 2
18496: PUSH
18497: EMPTY
18498: LIST
18499: LIST
18500: PUSH
18501: LD_INT 21
18503: PUSH
18504: LD_INT 1
18506: PUSH
18507: EMPTY
18508: LIST
18509: LIST
18510: PUSH
18511: EMPTY
18512: LIST
18513: LIST
18514: PPUSH
18515: CALL_OW 69
18519: ST_TO_ADDR
// if not tmp then
18520: LD_VAR 0 3
18524: NOT
18525: IFFALSE 18529
// exit ;
18527: GO 18676
// if tmp > 5 then
18529: LD_VAR 0 3
18533: PUSH
18534: LD_INT 5
18536: GREATER
18537: IFFALSE 18549
// k := 5 else
18539: LD_ADDR_VAR 0 2
18543: PUSH
18544: LD_INT 5
18546: ST_TO_ADDR
18547: GO 18559
// k := tmp ;
18549: LD_ADDR_VAR 0 2
18553: PUSH
18554: LD_VAR 0 3
18558: ST_TO_ADDR
// for i := 1 to k do
18559: LD_ADDR_VAR 0 1
18563: PUSH
18564: DOUBLE
18565: LD_INT 1
18567: DEC
18568: ST_TO_ADDR
18569: LD_VAR 0 2
18573: PUSH
18574: FOR_TO
18575: IFFALSE 18674
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
18577: LD_VAR 0 3
18581: PUSH
18582: LD_VAR 0 1
18586: ARRAY
18587: PPUSH
18588: LD_VAR 0 1
18592: PUSH
18593: LD_INT 4
18595: MOD
18596: PUSH
18597: LD_INT 1
18599: PLUS
18600: PPUSH
18601: CALL_OW 259
18605: PUSH
18606: LD_INT 10
18608: LESS
18609: IFFALSE 18672
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
18611: LD_VAR 0 3
18615: PUSH
18616: LD_VAR 0 1
18620: ARRAY
18621: PPUSH
18622: LD_VAR 0 1
18626: PUSH
18627: LD_INT 4
18629: MOD
18630: PUSH
18631: LD_INT 1
18633: PLUS
18634: PPUSH
18635: LD_VAR 0 3
18639: PUSH
18640: LD_VAR 0 1
18644: ARRAY
18645: PPUSH
18646: LD_VAR 0 1
18650: PUSH
18651: LD_INT 4
18653: MOD
18654: PUSH
18655: LD_INT 1
18657: PLUS
18658: PPUSH
18659: CALL_OW 259
18663: PUSH
18664: LD_INT 1
18666: PLUS
18667: PPUSH
18668: CALL_OW 237
18672: GO 18574
18674: POP
18675: POP
// end ;
18676: PPOPN 3
18678: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
18679: LD_EXP 21
18683: PUSH
18684: LD_EXP 29
18688: AND
18689: IFFALSE 18709
18691: GO 18693
18693: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
18694: LD_INT 4
18696: PPUSH
18697: LD_OWVAR 2
18701: PPUSH
18702: LD_INT 0
18704: PPUSH
18705: CALL_OW 324
18709: END
// every 0 0$1 trigger StreamModeActive and sShovel do
18710: LD_EXP 21
18714: PUSH
18715: LD_EXP 58
18719: AND
18720: IFFALSE 18740
18722: GO 18724
18724: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
18725: LD_INT 19
18727: PPUSH
18728: LD_OWVAR 2
18732: PPUSH
18733: LD_INT 0
18735: PPUSH
18736: CALL_OW 324
18740: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
18741: LD_EXP 21
18745: PUSH
18746: LD_EXP 30
18750: AND
18751: IFFALSE 18853
18753: GO 18755
18755: DISABLE
18756: LD_INT 0
18758: PPUSH
18759: PPUSH
// begin enable ;
18760: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
18761: LD_ADDR_VAR 0 2
18765: PUSH
18766: LD_INT 22
18768: PUSH
18769: LD_OWVAR 2
18773: PUSH
18774: EMPTY
18775: LIST
18776: LIST
18777: PUSH
18778: LD_INT 2
18780: PUSH
18781: LD_INT 34
18783: PUSH
18784: LD_INT 11
18786: PUSH
18787: EMPTY
18788: LIST
18789: LIST
18790: PUSH
18791: LD_INT 34
18793: PUSH
18794: LD_INT 30
18796: PUSH
18797: EMPTY
18798: LIST
18799: LIST
18800: PUSH
18801: EMPTY
18802: LIST
18803: LIST
18804: LIST
18805: PUSH
18806: EMPTY
18807: LIST
18808: LIST
18809: PPUSH
18810: CALL_OW 69
18814: ST_TO_ADDR
// if not tmp then
18815: LD_VAR 0 2
18819: NOT
18820: IFFALSE 18824
// exit ;
18822: GO 18853
// for i in tmp do
18824: LD_ADDR_VAR 0 1
18828: PUSH
18829: LD_VAR 0 2
18833: PUSH
18834: FOR_IN
18835: IFFALSE 18851
// begin SetLives ( i , 0 ) ;
18837: LD_VAR 0 1
18841: PPUSH
18842: LD_INT 0
18844: PPUSH
18845: CALL_OW 234
// end ;
18849: GO 18834
18851: POP
18852: POP
// end ;
18853: PPOPN 2
18855: END
// every 0 0$1 trigger StreamModeActive and sBunker do
18856: LD_EXP 21
18860: PUSH
18861: LD_EXP 31
18865: AND
18866: IFFALSE 18886
18868: GO 18870
18870: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
18871: LD_INT 32
18873: PPUSH
18874: LD_OWVAR 2
18878: PPUSH
18879: LD_INT 0
18881: PPUSH
18882: CALL_OW 324
18886: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
18887: LD_EXP 21
18891: PUSH
18892: LD_EXP 32
18896: AND
18897: IFFALSE 19078
18899: GO 18901
18901: DISABLE
18902: LD_INT 0
18904: PPUSH
18905: PPUSH
18906: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
18907: LD_ADDR_VAR 0 2
18911: PUSH
18912: LD_INT 22
18914: PUSH
18915: LD_OWVAR 2
18919: PUSH
18920: EMPTY
18921: LIST
18922: LIST
18923: PUSH
18924: LD_INT 33
18926: PUSH
18927: LD_INT 3
18929: PUSH
18930: EMPTY
18931: LIST
18932: LIST
18933: PUSH
18934: EMPTY
18935: LIST
18936: LIST
18937: PPUSH
18938: CALL_OW 69
18942: ST_TO_ADDR
// if not tmp then
18943: LD_VAR 0 2
18947: NOT
18948: IFFALSE 18952
// exit ;
18950: GO 19078
// side := 0 ;
18952: LD_ADDR_VAR 0 3
18956: PUSH
18957: LD_INT 0
18959: ST_TO_ADDR
// for i := 1 to 8 do
18960: LD_ADDR_VAR 0 1
18964: PUSH
18965: DOUBLE
18966: LD_INT 1
18968: DEC
18969: ST_TO_ADDR
18970: LD_INT 8
18972: PUSH
18973: FOR_TO
18974: IFFALSE 19022
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
18976: LD_OWVAR 2
18980: PUSH
18981: LD_VAR 0 1
18985: NONEQUAL
18986: PUSH
18987: LD_OWVAR 2
18991: PPUSH
18992: LD_VAR 0 1
18996: PPUSH
18997: CALL_OW 81
19001: PUSH
19002: LD_INT 2
19004: EQUAL
19005: AND
19006: IFFALSE 19020
// begin side := i ;
19008: LD_ADDR_VAR 0 3
19012: PUSH
19013: LD_VAR 0 1
19017: ST_TO_ADDR
// break ;
19018: GO 19022
// end ;
19020: GO 18973
19022: POP
19023: POP
// if not side then
19024: LD_VAR 0 3
19028: NOT
19029: IFFALSE 19033
// exit ;
19031: GO 19078
// for i := 1 to tmp do
19033: LD_ADDR_VAR 0 1
19037: PUSH
19038: DOUBLE
19039: LD_INT 1
19041: DEC
19042: ST_TO_ADDR
19043: LD_VAR 0 2
19047: PUSH
19048: FOR_TO
19049: IFFALSE 19076
// if Prob ( 60 ) then
19051: LD_INT 60
19053: PPUSH
19054: CALL_OW 13
19058: IFFALSE 19074
// SetSide ( i , side ) ;
19060: LD_VAR 0 1
19064: PPUSH
19065: LD_VAR 0 3
19069: PPUSH
19070: CALL_OW 235
19074: GO 19048
19076: POP
19077: POP
// end ;
19078: PPOPN 3
19080: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
19081: LD_EXP 21
19085: PUSH
19086: LD_EXP 34
19090: AND
19091: IFFALSE 19210
19093: GO 19095
19095: DISABLE
19096: LD_INT 0
19098: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
19099: LD_ADDR_VAR 0 1
19103: PUSH
19104: LD_INT 22
19106: PUSH
19107: LD_OWVAR 2
19111: PUSH
19112: EMPTY
19113: LIST
19114: LIST
19115: PUSH
19116: LD_INT 21
19118: PUSH
19119: LD_INT 1
19121: PUSH
19122: EMPTY
19123: LIST
19124: LIST
19125: PUSH
19126: LD_INT 3
19128: PUSH
19129: LD_INT 23
19131: PUSH
19132: LD_INT 0
19134: PUSH
19135: EMPTY
19136: LIST
19137: LIST
19138: PUSH
19139: EMPTY
19140: LIST
19141: LIST
19142: PUSH
19143: EMPTY
19144: LIST
19145: LIST
19146: LIST
19147: PPUSH
19148: CALL_OW 69
19152: PUSH
19153: FOR_IN
19154: IFFALSE 19208
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
19156: LD_VAR 0 1
19160: PPUSH
19161: CALL_OW 257
19165: PUSH
19166: LD_INT 1
19168: PUSH
19169: LD_INT 2
19171: PUSH
19172: LD_INT 3
19174: PUSH
19175: LD_INT 4
19177: PUSH
19178: EMPTY
19179: LIST
19180: LIST
19181: LIST
19182: LIST
19183: IN
19184: IFFALSE 19206
// SetClass ( un , rand ( 1 , 4 ) ) ;
19186: LD_VAR 0 1
19190: PPUSH
19191: LD_INT 1
19193: PPUSH
19194: LD_INT 4
19196: PPUSH
19197: CALL_OW 12
19201: PPUSH
19202: CALL_OW 336
19206: GO 19153
19208: POP
19209: POP
// end ;
19210: PPOPN 1
19212: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
19213: LD_EXP 21
19217: PUSH
19218: LD_EXP 33
19222: AND
19223: IFFALSE 19302
19225: GO 19227
19227: DISABLE
19228: LD_INT 0
19230: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
19231: LD_ADDR_VAR 0 1
19235: PUSH
19236: LD_INT 22
19238: PUSH
19239: LD_OWVAR 2
19243: PUSH
19244: EMPTY
19245: LIST
19246: LIST
19247: PUSH
19248: LD_INT 21
19250: PUSH
19251: LD_INT 3
19253: PUSH
19254: EMPTY
19255: LIST
19256: LIST
19257: PUSH
19258: EMPTY
19259: LIST
19260: LIST
19261: PPUSH
19262: CALL_OW 69
19266: ST_TO_ADDR
// if not tmp then
19267: LD_VAR 0 1
19271: NOT
19272: IFFALSE 19276
// exit ;
19274: GO 19302
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
19276: LD_VAR 0 1
19280: PUSH
19281: LD_INT 1
19283: PPUSH
19284: LD_VAR 0 1
19288: PPUSH
19289: CALL_OW 12
19293: ARRAY
19294: PPUSH
19295: LD_INT 100
19297: PPUSH
19298: CALL_OW 234
// end ;
19302: PPOPN 1
19304: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
19305: LD_EXP 21
19309: PUSH
19310: LD_EXP 35
19314: AND
19315: IFFALSE 19413
19317: GO 19319
19319: DISABLE
19320: LD_INT 0
19322: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19323: LD_ADDR_VAR 0 1
19327: PUSH
19328: LD_INT 22
19330: PUSH
19331: LD_OWVAR 2
19335: PUSH
19336: EMPTY
19337: LIST
19338: LIST
19339: PUSH
19340: LD_INT 21
19342: PUSH
19343: LD_INT 1
19345: PUSH
19346: EMPTY
19347: LIST
19348: LIST
19349: PUSH
19350: EMPTY
19351: LIST
19352: LIST
19353: PPUSH
19354: CALL_OW 69
19358: ST_TO_ADDR
// if not tmp then
19359: LD_VAR 0 1
19363: NOT
19364: IFFALSE 19368
// exit ;
19366: GO 19413
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
19368: LD_VAR 0 1
19372: PUSH
19373: LD_INT 1
19375: PPUSH
19376: LD_VAR 0 1
19380: PPUSH
19381: CALL_OW 12
19385: ARRAY
19386: PPUSH
19387: LD_INT 1
19389: PPUSH
19390: LD_INT 4
19392: PPUSH
19393: CALL_OW 12
19397: PPUSH
19398: LD_INT 3000
19400: PPUSH
19401: LD_INT 9000
19403: PPUSH
19404: CALL_OW 12
19408: PPUSH
19409: CALL_OW 492
// end ;
19413: PPOPN 1
19415: END
// every 0 0$1 trigger StreamModeActive and sDepot do
19416: LD_EXP 21
19420: PUSH
19421: LD_EXP 36
19425: AND
19426: IFFALSE 19446
19428: GO 19430
19430: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
19431: LD_INT 1
19433: PPUSH
19434: LD_OWVAR 2
19438: PPUSH
19439: LD_INT 0
19441: PPUSH
19442: CALL_OW 324
19446: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
19447: LD_EXP 21
19451: PUSH
19452: LD_EXP 37
19456: AND
19457: IFFALSE 19540
19459: GO 19461
19461: DISABLE
19462: LD_INT 0
19464: PPUSH
19465: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
19466: LD_ADDR_VAR 0 2
19470: PUSH
19471: LD_INT 22
19473: PUSH
19474: LD_OWVAR 2
19478: PUSH
19479: EMPTY
19480: LIST
19481: LIST
19482: PUSH
19483: LD_INT 21
19485: PUSH
19486: LD_INT 3
19488: PUSH
19489: EMPTY
19490: LIST
19491: LIST
19492: PUSH
19493: EMPTY
19494: LIST
19495: LIST
19496: PPUSH
19497: CALL_OW 69
19501: ST_TO_ADDR
// if not tmp then
19502: LD_VAR 0 2
19506: NOT
19507: IFFALSE 19511
// exit ;
19509: GO 19540
// for i in tmp do
19511: LD_ADDR_VAR 0 1
19515: PUSH
19516: LD_VAR 0 2
19520: PUSH
19521: FOR_IN
19522: IFFALSE 19538
// SetBLevel ( i , 10 ) ;
19524: LD_VAR 0 1
19528: PPUSH
19529: LD_INT 10
19531: PPUSH
19532: CALL_OW 241
19536: GO 19521
19538: POP
19539: POP
// end ;
19540: PPOPN 2
19542: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
19543: LD_EXP 21
19547: PUSH
19548: LD_EXP 38
19552: AND
19553: IFFALSE 19664
19555: GO 19557
19557: DISABLE
19558: LD_INT 0
19560: PPUSH
19561: PPUSH
19562: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19563: LD_ADDR_VAR 0 3
19567: PUSH
19568: LD_INT 22
19570: PUSH
19571: LD_OWVAR 2
19575: PUSH
19576: EMPTY
19577: LIST
19578: LIST
19579: PUSH
19580: LD_INT 25
19582: PUSH
19583: LD_INT 1
19585: PUSH
19586: EMPTY
19587: LIST
19588: LIST
19589: PUSH
19590: EMPTY
19591: LIST
19592: LIST
19593: PPUSH
19594: CALL_OW 69
19598: ST_TO_ADDR
// if not tmp then
19599: LD_VAR 0 3
19603: NOT
19604: IFFALSE 19608
// exit ;
19606: GO 19664
// un := tmp [ rand ( 1 , tmp ) ] ;
19608: LD_ADDR_VAR 0 2
19612: PUSH
19613: LD_VAR 0 3
19617: PUSH
19618: LD_INT 1
19620: PPUSH
19621: LD_VAR 0 3
19625: PPUSH
19626: CALL_OW 12
19630: ARRAY
19631: ST_TO_ADDR
// if Crawls ( un ) then
19632: LD_VAR 0 2
19636: PPUSH
19637: CALL_OW 318
19641: IFFALSE 19652
// ComWalk ( un ) ;
19643: LD_VAR 0 2
19647: PPUSH
19648: CALL_OW 138
// SetClass ( un , class_sniper ) ;
19652: LD_VAR 0 2
19656: PPUSH
19657: LD_INT 5
19659: PPUSH
19660: CALL_OW 336
// end ;
19664: PPOPN 3
19666: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
19667: LD_EXP 21
19671: PUSH
19672: LD_EXP 39
19676: AND
19677: PUSH
19678: LD_OWVAR 67
19682: PUSH
19683: LD_INT 4
19685: LESS
19686: AND
19687: IFFALSE 19706
19689: GO 19691
19691: DISABLE
// begin Difficulty := Difficulty + 1 ;
19692: LD_ADDR_OWVAR 67
19696: PUSH
19697: LD_OWVAR 67
19701: PUSH
19702: LD_INT 1
19704: PLUS
19705: ST_TO_ADDR
// end ;
19706: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
19707: LD_EXP 21
19711: PUSH
19712: LD_EXP 40
19716: AND
19717: IFFALSE 19820
19719: GO 19721
19721: DISABLE
19722: LD_INT 0
19724: PPUSH
// begin for i := 1 to 5 do
19725: LD_ADDR_VAR 0 1
19729: PUSH
19730: DOUBLE
19731: LD_INT 1
19733: DEC
19734: ST_TO_ADDR
19735: LD_INT 5
19737: PUSH
19738: FOR_TO
19739: IFFALSE 19818
// begin uc_nation := nation_nature ;
19741: LD_ADDR_OWVAR 21
19745: PUSH
19746: LD_INT 0
19748: ST_TO_ADDR
// uc_side := 0 ;
19749: LD_ADDR_OWVAR 20
19753: PUSH
19754: LD_INT 0
19756: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19757: LD_ADDR_OWVAR 29
19761: PUSH
19762: LD_INT 12
19764: PUSH
19765: LD_INT 12
19767: PUSH
19768: EMPTY
19769: LIST
19770: LIST
19771: ST_TO_ADDR
// hc_agressivity := 20 ;
19772: LD_ADDR_OWVAR 35
19776: PUSH
19777: LD_INT 20
19779: ST_TO_ADDR
// hc_class := class_tiger ;
19780: LD_ADDR_OWVAR 28
19784: PUSH
19785: LD_INT 14
19787: ST_TO_ADDR
// hc_gallery :=  ;
19788: LD_ADDR_OWVAR 33
19792: PUSH
19793: LD_STRING 
19795: ST_TO_ADDR
// hc_name :=  ;
19796: LD_ADDR_OWVAR 26
19800: PUSH
19801: LD_STRING 
19803: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
19804: CALL_OW 44
19808: PPUSH
19809: LD_INT 0
19811: PPUSH
19812: CALL_OW 51
// end ;
19816: GO 19738
19818: POP
19819: POP
// end ;
19820: PPOPN 1
19822: END
// every 0 0$1 trigger StreamModeActive and sBomb do
19823: LD_EXP 21
19827: PUSH
19828: LD_EXP 41
19832: AND
19833: IFFALSE 19842
19835: GO 19837
19837: DISABLE
// StreamSibBomb ;
19838: CALL 19843 0 0
19842: END
// export function StreamSibBomb ; var i , x , y ; begin
19843: LD_INT 0
19845: PPUSH
19846: PPUSH
19847: PPUSH
19848: PPUSH
// result := false ;
19849: LD_ADDR_VAR 0 1
19853: PUSH
19854: LD_INT 0
19856: ST_TO_ADDR
// for i := 1 to 16 do
19857: LD_ADDR_VAR 0 2
19861: PUSH
19862: DOUBLE
19863: LD_INT 1
19865: DEC
19866: ST_TO_ADDR
19867: LD_INT 16
19869: PUSH
19870: FOR_TO
19871: IFFALSE 20070
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
19873: LD_ADDR_VAR 0 3
19877: PUSH
19878: LD_INT 10
19880: PUSH
19881: LD_INT 20
19883: PUSH
19884: LD_INT 30
19886: PUSH
19887: LD_INT 40
19889: PUSH
19890: LD_INT 50
19892: PUSH
19893: LD_INT 60
19895: PUSH
19896: LD_INT 70
19898: PUSH
19899: LD_INT 80
19901: PUSH
19902: LD_INT 90
19904: PUSH
19905: LD_INT 100
19907: PUSH
19908: LD_INT 110
19910: PUSH
19911: LD_INT 120
19913: PUSH
19914: LD_INT 130
19916: PUSH
19917: LD_INT 140
19919: PUSH
19920: LD_INT 150
19922: PUSH
19923: EMPTY
19924: LIST
19925: LIST
19926: LIST
19927: LIST
19928: LIST
19929: LIST
19930: LIST
19931: LIST
19932: LIST
19933: LIST
19934: LIST
19935: LIST
19936: LIST
19937: LIST
19938: LIST
19939: PUSH
19940: LD_INT 1
19942: PPUSH
19943: LD_INT 15
19945: PPUSH
19946: CALL_OW 12
19950: ARRAY
19951: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
19952: LD_ADDR_VAR 0 4
19956: PUSH
19957: LD_INT 10
19959: PUSH
19960: LD_INT 20
19962: PUSH
19963: LD_INT 30
19965: PUSH
19966: LD_INT 40
19968: PUSH
19969: LD_INT 50
19971: PUSH
19972: LD_INT 60
19974: PUSH
19975: LD_INT 70
19977: PUSH
19978: LD_INT 80
19980: PUSH
19981: LD_INT 90
19983: PUSH
19984: LD_INT 100
19986: PUSH
19987: LD_INT 110
19989: PUSH
19990: LD_INT 120
19992: PUSH
19993: LD_INT 130
19995: PUSH
19996: LD_INT 140
19998: PUSH
19999: LD_INT 150
20001: PUSH
20002: EMPTY
20003: LIST
20004: LIST
20005: LIST
20006: LIST
20007: LIST
20008: LIST
20009: LIST
20010: LIST
20011: LIST
20012: LIST
20013: LIST
20014: LIST
20015: LIST
20016: LIST
20017: LIST
20018: PUSH
20019: LD_INT 1
20021: PPUSH
20022: LD_INT 15
20024: PPUSH
20025: CALL_OW 12
20029: ARRAY
20030: ST_TO_ADDR
// if ValidHex ( x , y ) then
20031: LD_VAR 0 3
20035: PPUSH
20036: LD_VAR 0 4
20040: PPUSH
20041: CALL_OW 488
20045: IFFALSE 20068
// begin result := [ x , y ] ;
20047: LD_ADDR_VAR 0 1
20051: PUSH
20052: LD_VAR 0 3
20056: PUSH
20057: LD_VAR 0 4
20061: PUSH
20062: EMPTY
20063: LIST
20064: LIST
20065: ST_TO_ADDR
// break ;
20066: GO 20070
// end ; end ;
20068: GO 19870
20070: POP
20071: POP
// if result then
20072: LD_VAR 0 1
20076: IFFALSE 20136
// begin ToLua ( playSibBomb() ) ;
20078: LD_STRING playSibBomb()
20080: PPUSH
20081: CALL_OW 559
// wait ( 0 0$14 ) ;
20085: LD_INT 490
20087: PPUSH
20088: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
20092: LD_VAR 0 1
20096: PUSH
20097: LD_INT 1
20099: ARRAY
20100: PPUSH
20101: LD_VAR 0 1
20105: PUSH
20106: LD_INT 2
20108: ARRAY
20109: PPUSH
20110: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
20114: LD_VAR 0 1
20118: PUSH
20119: LD_INT 1
20121: ARRAY
20122: PPUSH
20123: LD_VAR 0 1
20127: PUSH
20128: LD_INT 2
20130: ARRAY
20131: PPUSH
20132: CALL_OW 429
// end ; end ;
20136: LD_VAR 0 1
20140: RET
// every 0 0$1 trigger StreamModeActive and sReset do
20141: LD_EXP 21
20145: PUSH
20146: LD_EXP 43
20150: AND
20151: IFFALSE 20163
20153: GO 20155
20155: DISABLE
// YouLost (  ) ;
20156: LD_STRING 
20158: PPUSH
20159: CALL_OW 104
20163: END
// every 0 0$1 trigger StreamModeActive and sFog do
20164: LD_EXP 21
20168: PUSH
20169: LD_EXP 42
20173: AND
20174: IFFALSE 20188
20176: GO 20178
20178: DISABLE
// FogOff ( your_side ) ;
20179: LD_OWVAR 2
20183: PPUSH
20184: CALL_OW 344
20188: END
// every 0 0$1 trigger StreamModeActive and sSun do
20189: LD_EXP 21
20193: PUSH
20194: LD_EXP 44
20198: AND
20199: IFFALSE 20227
20201: GO 20203
20203: DISABLE
// begin solar_recharge_percent := 0 ;
20204: LD_ADDR_OWVAR 79
20208: PUSH
20209: LD_INT 0
20211: ST_TO_ADDR
// wait ( 5 5$00 ) ;
20212: LD_INT 10500
20214: PPUSH
20215: CALL_OW 67
// solar_recharge_percent := 100 ;
20219: LD_ADDR_OWVAR 79
20223: PUSH
20224: LD_INT 100
20226: ST_TO_ADDR
// end ;
20227: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
20228: LD_EXP 21
20232: PUSH
20233: LD_EXP 45
20237: AND
20238: IFFALSE 20477
20240: GO 20242
20242: DISABLE
20243: LD_INT 0
20245: PPUSH
20246: PPUSH
20247: PPUSH
// begin tmp := [ ] ;
20248: LD_ADDR_VAR 0 3
20252: PUSH
20253: EMPTY
20254: ST_TO_ADDR
// for i := 1 to 6 do
20255: LD_ADDR_VAR 0 1
20259: PUSH
20260: DOUBLE
20261: LD_INT 1
20263: DEC
20264: ST_TO_ADDR
20265: LD_INT 6
20267: PUSH
20268: FOR_TO
20269: IFFALSE 20374
// begin uc_nation := nation_nature ;
20271: LD_ADDR_OWVAR 21
20275: PUSH
20276: LD_INT 0
20278: ST_TO_ADDR
// uc_side := 0 ;
20279: LD_ADDR_OWVAR 20
20283: PUSH
20284: LD_INT 0
20286: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
20287: LD_ADDR_OWVAR 29
20291: PUSH
20292: LD_INT 12
20294: PUSH
20295: LD_INT 12
20297: PUSH
20298: EMPTY
20299: LIST
20300: LIST
20301: ST_TO_ADDR
// hc_agressivity := 20 ;
20302: LD_ADDR_OWVAR 35
20306: PUSH
20307: LD_INT 20
20309: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
20310: LD_ADDR_OWVAR 28
20314: PUSH
20315: LD_INT 17
20317: ST_TO_ADDR
// hc_gallery :=  ;
20318: LD_ADDR_OWVAR 33
20322: PUSH
20323: LD_STRING 
20325: ST_TO_ADDR
// hc_name :=  ;
20326: LD_ADDR_OWVAR 26
20330: PUSH
20331: LD_STRING 
20333: ST_TO_ADDR
// un := CreateHuman ;
20334: LD_ADDR_VAR 0 2
20338: PUSH
20339: CALL_OW 44
20343: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
20344: LD_VAR 0 2
20348: PPUSH
20349: LD_INT 1
20351: PPUSH
20352: CALL_OW 51
// tmp := tmp ^ un ;
20356: LD_ADDR_VAR 0 3
20360: PUSH
20361: LD_VAR 0 3
20365: PUSH
20366: LD_VAR 0 2
20370: ADD
20371: ST_TO_ADDR
// end ;
20372: GO 20268
20374: POP
20375: POP
// repeat wait ( 0 0$1 ) ;
20376: LD_INT 35
20378: PPUSH
20379: CALL_OW 67
// for un in tmp do
20383: LD_ADDR_VAR 0 2
20387: PUSH
20388: LD_VAR 0 3
20392: PUSH
20393: FOR_IN
20394: IFFALSE 20468
// begin if IsDead ( un ) then
20396: LD_VAR 0 2
20400: PPUSH
20401: CALL_OW 301
20405: IFFALSE 20425
// begin tmp := tmp diff un ;
20407: LD_ADDR_VAR 0 3
20411: PUSH
20412: LD_VAR 0 3
20416: PUSH
20417: LD_VAR 0 2
20421: DIFF
20422: ST_TO_ADDR
// continue ;
20423: GO 20393
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
20425: LD_VAR 0 2
20429: PPUSH
20430: LD_INT 3
20432: PUSH
20433: LD_INT 22
20435: PUSH
20436: LD_INT 0
20438: PUSH
20439: EMPTY
20440: LIST
20441: LIST
20442: PUSH
20443: EMPTY
20444: LIST
20445: LIST
20446: PPUSH
20447: CALL_OW 69
20451: PPUSH
20452: LD_VAR 0 2
20456: PPUSH
20457: CALL_OW 74
20461: PPUSH
20462: CALL_OW 115
// end ;
20466: GO 20393
20468: POP
20469: POP
// until not tmp ;
20470: LD_VAR 0 3
20474: NOT
20475: IFFALSE 20376
// end ;
20477: PPOPN 3
20479: END
// every 0 0$1 trigger StreamModeActive and sTroll do
20480: LD_EXP 21
20484: PUSH
20485: LD_EXP 46
20489: AND
20490: IFFALSE 20544
20492: GO 20494
20494: DISABLE
// begin ToLua ( displayTroll(); ) ;
20495: LD_STRING displayTroll();
20497: PPUSH
20498: CALL_OW 559
// wait ( 3 3$00 ) ;
20502: LD_INT 6300
20504: PPUSH
20505: CALL_OW 67
// ToLua ( hideTroll(); ) ;
20509: LD_STRING hideTroll();
20511: PPUSH
20512: CALL_OW 559
// wait ( 1 1$00 ) ;
20516: LD_INT 2100
20518: PPUSH
20519: CALL_OW 67
// ToLua ( displayTroll(); ) ;
20523: LD_STRING displayTroll();
20525: PPUSH
20526: CALL_OW 559
// wait ( 1 1$00 ) ;
20530: LD_INT 2100
20532: PPUSH
20533: CALL_OW 67
// ToLua ( hideTroll(); ) ;
20537: LD_STRING hideTroll();
20539: PPUSH
20540: CALL_OW 559
// end ;
20544: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
20545: LD_EXP 21
20549: PUSH
20550: LD_EXP 47
20554: AND
20555: IFFALSE 20618
20557: GO 20559
20559: DISABLE
20560: LD_INT 0
20562: PPUSH
// begin p := 0 ;
20563: LD_ADDR_VAR 0 1
20567: PUSH
20568: LD_INT 0
20570: ST_TO_ADDR
// repeat game_speed := 1 ;
20571: LD_ADDR_OWVAR 65
20575: PUSH
20576: LD_INT 1
20578: ST_TO_ADDR
// wait ( 0 0$1 ) ;
20579: LD_INT 35
20581: PPUSH
20582: CALL_OW 67
// p := p + 1 ;
20586: LD_ADDR_VAR 0 1
20590: PUSH
20591: LD_VAR 0 1
20595: PUSH
20596: LD_INT 1
20598: PLUS
20599: ST_TO_ADDR
// until p >= 60 ;
20600: LD_VAR 0 1
20604: PUSH
20605: LD_INT 60
20607: GREATEREQUAL
20608: IFFALSE 20571
// game_speed := 4 ;
20610: LD_ADDR_OWVAR 65
20614: PUSH
20615: LD_INT 4
20617: ST_TO_ADDR
// end ;
20618: PPOPN 1
20620: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
20621: LD_EXP 21
20625: PUSH
20626: LD_EXP 48
20630: AND
20631: IFFALSE 20777
20633: GO 20635
20635: DISABLE
20636: LD_INT 0
20638: PPUSH
20639: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20640: LD_ADDR_VAR 0 1
20644: PUSH
20645: LD_INT 22
20647: PUSH
20648: LD_OWVAR 2
20652: PUSH
20653: EMPTY
20654: LIST
20655: LIST
20656: PUSH
20657: LD_INT 2
20659: PUSH
20660: LD_INT 30
20662: PUSH
20663: LD_INT 0
20665: PUSH
20666: EMPTY
20667: LIST
20668: LIST
20669: PUSH
20670: LD_INT 30
20672: PUSH
20673: LD_INT 1
20675: PUSH
20676: EMPTY
20677: LIST
20678: LIST
20679: PUSH
20680: EMPTY
20681: LIST
20682: LIST
20683: LIST
20684: PUSH
20685: EMPTY
20686: LIST
20687: LIST
20688: PPUSH
20689: CALL_OW 69
20693: ST_TO_ADDR
// if not depot then
20694: LD_VAR 0 1
20698: NOT
20699: IFFALSE 20703
// exit ;
20701: GO 20777
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
20703: LD_ADDR_VAR 0 2
20707: PUSH
20708: LD_VAR 0 1
20712: PUSH
20713: LD_INT 1
20715: PPUSH
20716: LD_VAR 0 1
20720: PPUSH
20721: CALL_OW 12
20725: ARRAY
20726: PPUSH
20727: CALL_OW 274
20731: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
20732: LD_VAR 0 2
20736: PPUSH
20737: LD_INT 1
20739: PPUSH
20740: LD_INT 0
20742: PPUSH
20743: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
20747: LD_VAR 0 2
20751: PPUSH
20752: LD_INT 2
20754: PPUSH
20755: LD_INT 0
20757: PPUSH
20758: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
20762: LD_VAR 0 2
20766: PPUSH
20767: LD_INT 3
20769: PPUSH
20770: LD_INT 0
20772: PPUSH
20773: CALL_OW 277
// end ;
20777: PPOPN 2
20779: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
20780: LD_EXP 21
20784: PUSH
20785: LD_EXP 49
20789: AND
20790: IFFALSE 20887
20792: GO 20794
20794: DISABLE
20795: LD_INT 0
20797: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20798: LD_ADDR_VAR 0 1
20802: PUSH
20803: LD_INT 22
20805: PUSH
20806: LD_OWVAR 2
20810: PUSH
20811: EMPTY
20812: LIST
20813: LIST
20814: PUSH
20815: LD_INT 21
20817: PUSH
20818: LD_INT 1
20820: PUSH
20821: EMPTY
20822: LIST
20823: LIST
20824: PUSH
20825: LD_INT 3
20827: PUSH
20828: LD_INT 23
20830: PUSH
20831: LD_INT 0
20833: PUSH
20834: EMPTY
20835: LIST
20836: LIST
20837: PUSH
20838: EMPTY
20839: LIST
20840: LIST
20841: PUSH
20842: EMPTY
20843: LIST
20844: LIST
20845: LIST
20846: PPUSH
20847: CALL_OW 69
20851: ST_TO_ADDR
// if not tmp then
20852: LD_VAR 0 1
20856: NOT
20857: IFFALSE 20861
// exit ;
20859: GO 20887
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
20861: LD_VAR 0 1
20865: PUSH
20866: LD_INT 1
20868: PPUSH
20869: LD_VAR 0 1
20873: PPUSH
20874: CALL_OW 12
20878: ARRAY
20879: PPUSH
20880: LD_INT 200
20882: PPUSH
20883: CALL_OW 234
// end ;
20887: PPOPN 1
20889: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
20890: LD_EXP 21
20894: PUSH
20895: LD_EXP 50
20899: AND
20900: IFFALSE 20979
20902: GO 20904
20904: DISABLE
20905: LD_INT 0
20907: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
20908: LD_ADDR_VAR 0 1
20912: PUSH
20913: LD_INT 22
20915: PUSH
20916: LD_OWVAR 2
20920: PUSH
20921: EMPTY
20922: LIST
20923: LIST
20924: PUSH
20925: LD_INT 21
20927: PUSH
20928: LD_INT 2
20930: PUSH
20931: EMPTY
20932: LIST
20933: LIST
20934: PUSH
20935: EMPTY
20936: LIST
20937: LIST
20938: PPUSH
20939: CALL_OW 69
20943: ST_TO_ADDR
// if not tmp then
20944: LD_VAR 0 1
20948: NOT
20949: IFFALSE 20953
// exit ;
20951: GO 20979
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
20953: LD_VAR 0 1
20957: PUSH
20958: LD_INT 1
20960: PPUSH
20961: LD_VAR 0 1
20965: PPUSH
20966: CALL_OW 12
20970: ARRAY
20971: PPUSH
20972: LD_INT 60
20974: PPUSH
20975: CALL_OW 234
// end ;
20979: PPOPN 1
20981: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
20982: LD_EXP 21
20986: PUSH
20987: LD_EXP 51
20991: AND
20992: IFFALSE 21091
20994: GO 20996
20996: DISABLE
20997: LD_INT 0
20999: PPUSH
21000: PPUSH
// begin enable ;
21001: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
21002: LD_ADDR_VAR 0 1
21006: PUSH
21007: LD_INT 22
21009: PUSH
21010: LD_OWVAR 2
21014: PUSH
21015: EMPTY
21016: LIST
21017: LIST
21018: PUSH
21019: LD_INT 61
21021: PUSH
21022: EMPTY
21023: LIST
21024: PUSH
21025: LD_INT 33
21027: PUSH
21028: LD_INT 2
21030: PUSH
21031: EMPTY
21032: LIST
21033: LIST
21034: PUSH
21035: EMPTY
21036: LIST
21037: LIST
21038: LIST
21039: PPUSH
21040: CALL_OW 69
21044: ST_TO_ADDR
// if not tmp then
21045: LD_VAR 0 1
21049: NOT
21050: IFFALSE 21054
// exit ;
21052: GO 21091
// for i in tmp do
21054: LD_ADDR_VAR 0 2
21058: PUSH
21059: LD_VAR 0 1
21063: PUSH
21064: FOR_IN
21065: IFFALSE 21089
// if IsControledBy ( i ) then
21067: LD_VAR 0 2
21071: PPUSH
21072: CALL_OW 312
21076: IFFALSE 21087
// ComUnlink ( i ) ;
21078: LD_VAR 0 2
21082: PPUSH
21083: CALL_OW 136
21087: GO 21064
21089: POP
21090: POP
// end ;
21091: PPOPN 2
21093: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
21094: LD_EXP 21
21098: PUSH
21099: LD_EXP 52
21103: AND
21104: IFFALSE 21244
21106: GO 21108
21108: DISABLE
21109: LD_INT 0
21111: PPUSH
21112: PPUSH
// begin ToLua ( displayPowell(); ) ;
21113: LD_STRING displayPowell();
21115: PPUSH
21116: CALL_OW 559
// uc_side := 0 ;
21120: LD_ADDR_OWVAR 20
21124: PUSH
21125: LD_INT 0
21127: ST_TO_ADDR
// uc_nation := 2 ;
21128: LD_ADDR_OWVAR 21
21132: PUSH
21133: LD_INT 2
21135: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
21136: LD_ADDR_OWVAR 37
21140: PUSH
21141: LD_INT 14
21143: ST_TO_ADDR
// vc_engine := engine_siberite ;
21144: LD_ADDR_OWVAR 39
21148: PUSH
21149: LD_INT 3
21151: ST_TO_ADDR
// vc_control := control_apeman ;
21152: LD_ADDR_OWVAR 38
21156: PUSH
21157: LD_INT 5
21159: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
21160: LD_ADDR_OWVAR 40
21164: PUSH
21165: LD_INT 29
21167: ST_TO_ADDR
// un := CreateVehicle ;
21168: LD_ADDR_VAR 0 2
21172: PUSH
21173: CALL_OW 45
21177: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21178: LD_VAR 0 2
21182: PPUSH
21183: LD_INT 1
21185: PPUSH
21186: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
21190: LD_INT 35
21192: PPUSH
21193: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
21197: LD_VAR 0 2
21201: PPUSH
21202: LD_INT 22
21204: PUSH
21205: LD_OWVAR 2
21209: PUSH
21210: EMPTY
21211: LIST
21212: LIST
21213: PPUSH
21214: CALL_OW 69
21218: PPUSH
21219: LD_VAR 0 2
21223: PPUSH
21224: CALL_OW 74
21228: PPUSH
21229: CALL_OW 115
// until IsDead ( un ) ;
21233: LD_VAR 0 2
21237: PPUSH
21238: CALL_OW 301
21242: IFFALSE 21190
// end ;
21244: PPOPN 2
21246: END
// every 0 0$1 trigger StreamModeActive and sStu do
21247: LD_EXP 21
21251: PUSH
21252: LD_EXP 60
21256: AND
21257: IFFALSE 21273
21259: GO 21261
21261: DISABLE
// begin ToLua ( displayStucuk(); ) ;
21262: LD_STRING displayStucuk();
21264: PPUSH
21265: CALL_OW 559
// ResetFog ;
21269: CALL_OW 335
// end ;
21273: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
21274: LD_EXP 21
21278: PUSH
21279: LD_EXP 53
21283: AND
21284: IFFALSE 21425
21286: GO 21288
21288: DISABLE
21289: LD_INT 0
21291: PPUSH
21292: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
21293: LD_ADDR_VAR 0 2
21297: PUSH
21298: LD_INT 22
21300: PUSH
21301: LD_OWVAR 2
21305: PUSH
21306: EMPTY
21307: LIST
21308: LIST
21309: PUSH
21310: LD_INT 21
21312: PUSH
21313: LD_INT 1
21315: PUSH
21316: EMPTY
21317: LIST
21318: LIST
21319: PUSH
21320: EMPTY
21321: LIST
21322: LIST
21323: PPUSH
21324: CALL_OW 69
21328: ST_TO_ADDR
// if not tmp then
21329: LD_VAR 0 2
21333: NOT
21334: IFFALSE 21338
// exit ;
21336: GO 21425
// un := tmp [ rand ( 1 , tmp ) ] ;
21338: LD_ADDR_VAR 0 1
21342: PUSH
21343: LD_VAR 0 2
21347: PUSH
21348: LD_INT 1
21350: PPUSH
21351: LD_VAR 0 2
21355: PPUSH
21356: CALL_OW 12
21360: ARRAY
21361: ST_TO_ADDR
// SetSide ( un , 0 ) ;
21362: LD_VAR 0 1
21366: PPUSH
21367: LD_INT 0
21369: PPUSH
21370: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
21374: LD_VAR 0 1
21378: PPUSH
21379: LD_OWVAR 3
21383: PUSH
21384: LD_VAR 0 1
21388: DIFF
21389: PPUSH
21390: LD_VAR 0 1
21394: PPUSH
21395: CALL_OW 74
21399: PPUSH
21400: CALL_OW 115
// wait ( 0 0$20 ) ;
21404: LD_INT 700
21406: PPUSH
21407: CALL_OW 67
// SetSide ( un , your_side ) ;
21411: LD_VAR 0 1
21415: PPUSH
21416: LD_OWVAR 2
21420: PPUSH
21421: CALL_OW 235
// end ;
21425: PPOPN 2
21427: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
21428: LD_EXP 21
21432: PUSH
21433: LD_EXP 54
21437: AND
21438: IFFALSE 21544
21440: GO 21442
21442: DISABLE
21443: LD_INT 0
21445: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21446: LD_ADDR_VAR 0 1
21450: PUSH
21451: LD_INT 22
21453: PUSH
21454: LD_OWVAR 2
21458: PUSH
21459: EMPTY
21460: LIST
21461: LIST
21462: PUSH
21463: LD_INT 2
21465: PUSH
21466: LD_INT 30
21468: PUSH
21469: LD_INT 0
21471: PUSH
21472: EMPTY
21473: LIST
21474: LIST
21475: PUSH
21476: LD_INT 30
21478: PUSH
21479: LD_INT 1
21481: PUSH
21482: EMPTY
21483: LIST
21484: LIST
21485: PUSH
21486: EMPTY
21487: LIST
21488: LIST
21489: LIST
21490: PUSH
21491: EMPTY
21492: LIST
21493: LIST
21494: PPUSH
21495: CALL_OW 69
21499: ST_TO_ADDR
// if not depot then
21500: LD_VAR 0 1
21504: NOT
21505: IFFALSE 21509
// exit ;
21507: GO 21544
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
21509: LD_VAR 0 1
21513: PUSH
21514: LD_INT 1
21516: ARRAY
21517: PPUSH
21518: CALL_OW 250
21522: PPUSH
21523: LD_VAR 0 1
21527: PUSH
21528: LD_INT 1
21530: ARRAY
21531: PPUSH
21532: CALL_OW 251
21536: PPUSH
21537: LD_INT 70
21539: PPUSH
21540: CALL_OW 495
// end ;
21544: PPOPN 1
21546: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
21547: LD_EXP 21
21551: PUSH
21552: LD_EXP 55
21556: AND
21557: IFFALSE 21768
21559: GO 21561
21561: DISABLE
21562: LD_INT 0
21564: PPUSH
21565: PPUSH
21566: PPUSH
21567: PPUSH
21568: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
21569: LD_ADDR_VAR 0 5
21573: PUSH
21574: LD_INT 22
21576: PUSH
21577: LD_OWVAR 2
21581: PUSH
21582: EMPTY
21583: LIST
21584: LIST
21585: PUSH
21586: LD_INT 21
21588: PUSH
21589: LD_INT 1
21591: PUSH
21592: EMPTY
21593: LIST
21594: LIST
21595: PUSH
21596: EMPTY
21597: LIST
21598: LIST
21599: PPUSH
21600: CALL_OW 69
21604: ST_TO_ADDR
// if not tmp then
21605: LD_VAR 0 5
21609: NOT
21610: IFFALSE 21614
// exit ;
21612: GO 21768
// for i in tmp do
21614: LD_ADDR_VAR 0 1
21618: PUSH
21619: LD_VAR 0 5
21623: PUSH
21624: FOR_IN
21625: IFFALSE 21766
// begin d := rand ( 0 , 5 ) ;
21627: LD_ADDR_VAR 0 4
21631: PUSH
21632: LD_INT 0
21634: PPUSH
21635: LD_INT 5
21637: PPUSH
21638: CALL_OW 12
21642: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
21643: LD_ADDR_VAR 0 2
21647: PUSH
21648: LD_VAR 0 1
21652: PPUSH
21653: CALL_OW 250
21657: PPUSH
21658: LD_VAR 0 4
21662: PPUSH
21663: LD_INT 3
21665: PPUSH
21666: LD_INT 12
21668: PPUSH
21669: CALL_OW 12
21673: PPUSH
21674: CALL_OW 272
21678: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
21679: LD_ADDR_VAR 0 3
21683: PUSH
21684: LD_VAR 0 1
21688: PPUSH
21689: CALL_OW 251
21693: PPUSH
21694: LD_VAR 0 4
21698: PPUSH
21699: LD_INT 3
21701: PPUSH
21702: LD_INT 12
21704: PPUSH
21705: CALL_OW 12
21709: PPUSH
21710: CALL_OW 273
21714: ST_TO_ADDR
// if ValidHex ( x , y ) then
21715: LD_VAR 0 2
21719: PPUSH
21720: LD_VAR 0 3
21724: PPUSH
21725: CALL_OW 488
21729: IFFALSE 21764
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
21731: LD_VAR 0 1
21735: PPUSH
21736: LD_VAR 0 2
21740: PPUSH
21741: LD_VAR 0 3
21745: PPUSH
21746: LD_INT 3
21748: PPUSH
21749: LD_INT 6
21751: PPUSH
21752: CALL_OW 12
21756: PPUSH
21757: LD_INT 1
21759: PPUSH
21760: CALL_OW 483
// end ;
21764: GO 21624
21766: POP
21767: POP
// end ;
21768: PPOPN 5
21770: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
21771: LD_EXP 21
21775: PUSH
21776: LD_EXP 56
21780: AND
21781: IFFALSE 21875
21783: GO 21785
21785: DISABLE
21786: LD_INT 0
21788: PPUSH
21789: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
21790: LD_ADDR_VAR 0 2
21794: PUSH
21795: LD_INT 22
21797: PUSH
21798: LD_OWVAR 2
21802: PUSH
21803: EMPTY
21804: LIST
21805: LIST
21806: PUSH
21807: LD_INT 32
21809: PUSH
21810: LD_INT 1
21812: PUSH
21813: EMPTY
21814: LIST
21815: LIST
21816: PUSH
21817: LD_INT 21
21819: PUSH
21820: LD_INT 2
21822: PUSH
21823: EMPTY
21824: LIST
21825: LIST
21826: PUSH
21827: EMPTY
21828: LIST
21829: LIST
21830: LIST
21831: PPUSH
21832: CALL_OW 69
21836: ST_TO_ADDR
// if not tmp then
21837: LD_VAR 0 2
21841: NOT
21842: IFFALSE 21846
// exit ;
21844: GO 21875
// for i in tmp do
21846: LD_ADDR_VAR 0 1
21850: PUSH
21851: LD_VAR 0 2
21855: PUSH
21856: FOR_IN
21857: IFFALSE 21873
// SetFuel ( i , 0 ) ;
21859: LD_VAR 0 1
21863: PPUSH
21864: LD_INT 0
21866: PPUSH
21867: CALL_OW 240
21871: GO 21856
21873: POP
21874: POP
// end ;
21875: PPOPN 2
21877: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
21878: LD_EXP 21
21882: PUSH
21883: LD_EXP 57
21887: AND
21888: IFFALSE 21954
21890: GO 21892
21892: DISABLE
21893: LD_INT 0
21895: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
21896: LD_ADDR_VAR 0 1
21900: PUSH
21901: LD_INT 22
21903: PUSH
21904: LD_OWVAR 2
21908: PUSH
21909: EMPTY
21910: LIST
21911: LIST
21912: PUSH
21913: LD_INT 30
21915: PUSH
21916: LD_INT 29
21918: PUSH
21919: EMPTY
21920: LIST
21921: LIST
21922: PUSH
21923: EMPTY
21924: LIST
21925: LIST
21926: PPUSH
21927: CALL_OW 69
21931: ST_TO_ADDR
// if not tmp then
21932: LD_VAR 0 1
21936: NOT
21937: IFFALSE 21941
// exit ;
21939: GO 21954
// DestroyUnit ( tmp [ 1 ] ) ;
21941: LD_VAR 0 1
21945: PUSH
21946: LD_INT 1
21948: ARRAY
21949: PPUSH
21950: CALL_OW 65
// end ;
21954: PPOPN 1
21956: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
21957: LD_EXP 21
21961: PUSH
21962: LD_EXP 59
21966: AND
21967: IFFALSE 22096
21969: GO 21971
21971: DISABLE
21972: LD_INT 0
21974: PPUSH
// begin uc_side := 0 ;
21975: LD_ADDR_OWVAR 20
21979: PUSH
21980: LD_INT 0
21982: ST_TO_ADDR
// uc_nation := nation_arabian ;
21983: LD_ADDR_OWVAR 21
21987: PUSH
21988: LD_INT 2
21990: ST_TO_ADDR
// hc_gallery :=  ;
21991: LD_ADDR_OWVAR 33
21995: PUSH
21996: LD_STRING 
21998: ST_TO_ADDR
// hc_name :=  ;
21999: LD_ADDR_OWVAR 26
22003: PUSH
22004: LD_STRING 
22006: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
22007: LD_INT 1
22009: PPUSH
22010: LD_INT 11
22012: PPUSH
22013: LD_INT 10
22015: PPUSH
22016: CALL_OW 380
// un := CreateHuman ;
22020: LD_ADDR_VAR 0 1
22024: PUSH
22025: CALL_OW 44
22029: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
22030: LD_VAR 0 1
22034: PPUSH
22035: LD_INT 1
22037: PPUSH
22038: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
22042: LD_INT 35
22044: PPUSH
22045: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
22049: LD_VAR 0 1
22053: PPUSH
22054: LD_INT 22
22056: PUSH
22057: LD_OWVAR 2
22061: PUSH
22062: EMPTY
22063: LIST
22064: LIST
22065: PPUSH
22066: CALL_OW 69
22070: PPUSH
22071: LD_VAR 0 1
22075: PPUSH
22076: CALL_OW 74
22080: PPUSH
22081: CALL_OW 115
// until IsDead ( un ) ;
22085: LD_VAR 0 1
22089: PPUSH
22090: CALL_OW 301
22094: IFFALSE 22042
// end ;
22096: PPOPN 1
22098: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
22099: LD_EXP 21
22103: PUSH
22104: LD_EXP 61
22108: AND
22109: IFFALSE 22121
22111: GO 22113
22113: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
22114: LD_STRING earthquake(getX(game), 0, 32)
22116: PPUSH
22117: CALL_OW 559
22121: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
22122: LD_EXP 21
22126: PUSH
22127: LD_EXP 62
22131: AND
22132: IFFALSE 22223
22134: GO 22136
22136: DISABLE
22137: LD_INT 0
22139: PPUSH
// begin enable ;
22140: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
22141: LD_ADDR_VAR 0 1
22145: PUSH
22146: LD_INT 22
22148: PUSH
22149: LD_OWVAR 2
22153: PUSH
22154: EMPTY
22155: LIST
22156: LIST
22157: PUSH
22158: LD_INT 21
22160: PUSH
22161: LD_INT 2
22163: PUSH
22164: EMPTY
22165: LIST
22166: LIST
22167: PUSH
22168: LD_INT 33
22170: PUSH
22171: LD_INT 3
22173: PUSH
22174: EMPTY
22175: LIST
22176: LIST
22177: PUSH
22178: EMPTY
22179: LIST
22180: LIST
22181: LIST
22182: PPUSH
22183: CALL_OW 69
22187: ST_TO_ADDR
// if not tmp then
22188: LD_VAR 0 1
22192: NOT
22193: IFFALSE 22197
// exit ;
22195: GO 22223
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
22197: LD_VAR 0 1
22201: PUSH
22202: LD_INT 1
22204: PPUSH
22205: LD_VAR 0 1
22209: PPUSH
22210: CALL_OW 12
22214: ARRAY
22215: PPUSH
22216: LD_INT 1
22218: PPUSH
22219: CALL_OW 234
// end ;
22223: PPOPN 1
22225: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
22226: LD_EXP 21
22230: PUSH
22231: LD_EXP 63
22235: AND
22236: IFFALSE 22377
22238: GO 22240
22240: DISABLE
22241: LD_INT 0
22243: PPUSH
22244: PPUSH
22245: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22246: LD_ADDR_VAR 0 3
22250: PUSH
22251: LD_INT 22
22253: PUSH
22254: LD_OWVAR 2
22258: PUSH
22259: EMPTY
22260: LIST
22261: LIST
22262: PUSH
22263: LD_INT 25
22265: PUSH
22266: LD_INT 1
22268: PUSH
22269: EMPTY
22270: LIST
22271: LIST
22272: PUSH
22273: EMPTY
22274: LIST
22275: LIST
22276: PPUSH
22277: CALL_OW 69
22281: ST_TO_ADDR
// if not tmp then
22282: LD_VAR 0 3
22286: NOT
22287: IFFALSE 22291
// exit ;
22289: GO 22377
// un := tmp [ rand ( 1 , tmp ) ] ;
22291: LD_ADDR_VAR 0 2
22295: PUSH
22296: LD_VAR 0 3
22300: PUSH
22301: LD_INT 1
22303: PPUSH
22304: LD_VAR 0 3
22308: PPUSH
22309: CALL_OW 12
22313: ARRAY
22314: ST_TO_ADDR
// if Crawls ( un ) then
22315: LD_VAR 0 2
22319: PPUSH
22320: CALL_OW 318
22324: IFFALSE 22335
// ComWalk ( un ) ;
22326: LD_VAR 0 2
22330: PPUSH
22331: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
22335: LD_VAR 0 2
22339: PPUSH
22340: LD_INT 9
22342: PPUSH
22343: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
22347: LD_INT 28
22349: PPUSH
22350: LD_OWVAR 2
22354: PPUSH
22355: LD_INT 2
22357: PPUSH
22358: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
22362: LD_INT 29
22364: PPUSH
22365: LD_OWVAR 2
22369: PPUSH
22370: LD_INT 2
22372: PPUSH
22373: CALL_OW 322
// end ;
22377: PPOPN 3
22379: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
22380: LD_EXP 21
22384: PUSH
22385: LD_EXP 64
22389: AND
22390: IFFALSE 22501
22392: GO 22394
22394: DISABLE
22395: LD_INT 0
22397: PPUSH
22398: PPUSH
22399: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22400: LD_ADDR_VAR 0 3
22404: PUSH
22405: LD_INT 22
22407: PUSH
22408: LD_OWVAR 2
22412: PUSH
22413: EMPTY
22414: LIST
22415: LIST
22416: PUSH
22417: LD_INT 25
22419: PUSH
22420: LD_INT 1
22422: PUSH
22423: EMPTY
22424: LIST
22425: LIST
22426: PUSH
22427: EMPTY
22428: LIST
22429: LIST
22430: PPUSH
22431: CALL_OW 69
22435: ST_TO_ADDR
// if not tmp then
22436: LD_VAR 0 3
22440: NOT
22441: IFFALSE 22445
// exit ;
22443: GO 22501
// un := tmp [ rand ( 1 , tmp ) ] ;
22445: LD_ADDR_VAR 0 2
22449: PUSH
22450: LD_VAR 0 3
22454: PUSH
22455: LD_INT 1
22457: PPUSH
22458: LD_VAR 0 3
22462: PPUSH
22463: CALL_OW 12
22467: ARRAY
22468: ST_TO_ADDR
// if Crawls ( un ) then
22469: LD_VAR 0 2
22473: PPUSH
22474: CALL_OW 318
22478: IFFALSE 22489
// ComWalk ( un ) ;
22480: LD_VAR 0 2
22484: PPUSH
22485: CALL_OW 138
// SetClass ( un , class_mortar ) ;
22489: LD_VAR 0 2
22493: PPUSH
22494: LD_INT 8
22496: PPUSH
22497: CALL_OW 336
// end ;
22501: PPOPN 3
22503: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
22504: LD_EXP 21
22508: PUSH
22509: LD_EXP 65
22513: AND
22514: IFFALSE 22658
22516: GO 22518
22518: DISABLE
22519: LD_INT 0
22521: PPUSH
22522: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
22523: LD_ADDR_VAR 0 2
22527: PUSH
22528: LD_INT 22
22530: PUSH
22531: LD_OWVAR 2
22535: PUSH
22536: EMPTY
22537: LIST
22538: LIST
22539: PUSH
22540: LD_INT 21
22542: PUSH
22543: LD_INT 2
22545: PUSH
22546: EMPTY
22547: LIST
22548: LIST
22549: PUSH
22550: LD_INT 2
22552: PUSH
22553: LD_INT 34
22555: PUSH
22556: LD_INT 12
22558: PUSH
22559: EMPTY
22560: LIST
22561: LIST
22562: PUSH
22563: LD_INT 34
22565: PUSH
22566: LD_INT 51
22568: PUSH
22569: EMPTY
22570: LIST
22571: LIST
22572: PUSH
22573: LD_INT 34
22575: PUSH
22576: LD_INT 32
22578: PUSH
22579: EMPTY
22580: LIST
22581: LIST
22582: PUSH
22583: EMPTY
22584: LIST
22585: LIST
22586: LIST
22587: LIST
22588: PUSH
22589: EMPTY
22590: LIST
22591: LIST
22592: LIST
22593: PPUSH
22594: CALL_OW 69
22598: ST_TO_ADDR
// if not tmp then
22599: LD_VAR 0 2
22603: NOT
22604: IFFALSE 22608
// exit ;
22606: GO 22658
// for i in tmp do
22608: LD_ADDR_VAR 0 1
22612: PUSH
22613: LD_VAR 0 2
22617: PUSH
22618: FOR_IN
22619: IFFALSE 22656
// if GetCargo ( i , mat_artifact ) = 0 then
22621: LD_VAR 0 1
22625: PPUSH
22626: LD_INT 4
22628: PPUSH
22629: CALL_OW 289
22633: PUSH
22634: LD_INT 0
22636: EQUAL
22637: IFFALSE 22654
// SetCargo ( i , mat_siberit , 100 ) ;
22639: LD_VAR 0 1
22643: PPUSH
22644: LD_INT 3
22646: PPUSH
22647: LD_INT 100
22649: PPUSH
22650: CALL_OW 290
22654: GO 22618
22656: POP
22657: POP
// end ;
22658: PPOPN 2
22660: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
22661: LD_EXP 21
22665: PUSH
22666: LD_EXP 66
22670: AND
22671: IFFALSE 22854
22673: GO 22675
22675: DISABLE
22676: LD_INT 0
22678: PPUSH
22679: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22680: LD_ADDR_VAR 0 2
22684: PUSH
22685: LD_INT 22
22687: PUSH
22688: LD_OWVAR 2
22692: PUSH
22693: EMPTY
22694: LIST
22695: LIST
22696: PPUSH
22697: CALL_OW 69
22701: ST_TO_ADDR
// if not tmp then
22702: LD_VAR 0 2
22706: NOT
22707: IFFALSE 22711
// exit ;
22709: GO 22854
// for i := 1 to 2 do
22711: LD_ADDR_VAR 0 1
22715: PUSH
22716: DOUBLE
22717: LD_INT 1
22719: DEC
22720: ST_TO_ADDR
22721: LD_INT 2
22723: PUSH
22724: FOR_TO
22725: IFFALSE 22852
// begin uc_side := your_side ;
22727: LD_ADDR_OWVAR 20
22731: PUSH
22732: LD_OWVAR 2
22736: ST_TO_ADDR
// uc_nation := nation_american ;
22737: LD_ADDR_OWVAR 21
22741: PUSH
22742: LD_INT 1
22744: ST_TO_ADDR
// vc_chassis := us_morphling ;
22745: LD_ADDR_OWVAR 37
22749: PUSH
22750: LD_INT 5
22752: ST_TO_ADDR
// vc_engine := engine_siberite ;
22753: LD_ADDR_OWVAR 39
22757: PUSH
22758: LD_INT 3
22760: ST_TO_ADDR
// vc_control := control_computer ;
22761: LD_ADDR_OWVAR 38
22765: PUSH
22766: LD_INT 3
22768: ST_TO_ADDR
// vc_weapon := us_double_laser ;
22769: LD_ADDR_OWVAR 40
22773: PUSH
22774: LD_INT 10
22776: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
22777: LD_VAR 0 2
22781: PUSH
22782: LD_INT 1
22784: ARRAY
22785: PPUSH
22786: CALL_OW 310
22790: NOT
22791: IFFALSE 22838
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
22793: CALL_OW 45
22797: PPUSH
22798: LD_VAR 0 2
22802: PUSH
22803: LD_INT 1
22805: ARRAY
22806: PPUSH
22807: CALL_OW 250
22811: PPUSH
22812: LD_VAR 0 2
22816: PUSH
22817: LD_INT 1
22819: ARRAY
22820: PPUSH
22821: CALL_OW 251
22825: PPUSH
22826: LD_INT 12
22828: PPUSH
22829: LD_INT 1
22831: PPUSH
22832: CALL_OW 50
22836: GO 22850
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
22838: CALL_OW 45
22842: PPUSH
22843: LD_INT 1
22845: PPUSH
22846: CALL_OW 51
// end ;
22850: GO 22724
22852: POP
22853: POP
// end ;
22854: PPOPN 2
22856: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
22857: LD_EXP 21
22861: PUSH
22862: LD_EXP 67
22866: AND
22867: IFFALSE 23089
22869: GO 22871
22871: DISABLE
22872: LD_INT 0
22874: PPUSH
22875: PPUSH
22876: PPUSH
22877: PPUSH
22878: PPUSH
22879: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22880: LD_ADDR_VAR 0 6
22884: PUSH
22885: LD_INT 22
22887: PUSH
22888: LD_OWVAR 2
22892: PUSH
22893: EMPTY
22894: LIST
22895: LIST
22896: PUSH
22897: LD_INT 21
22899: PUSH
22900: LD_INT 1
22902: PUSH
22903: EMPTY
22904: LIST
22905: LIST
22906: PUSH
22907: LD_INT 3
22909: PUSH
22910: LD_INT 23
22912: PUSH
22913: LD_INT 0
22915: PUSH
22916: EMPTY
22917: LIST
22918: LIST
22919: PUSH
22920: EMPTY
22921: LIST
22922: LIST
22923: PUSH
22924: EMPTY
22925: LIST
22926: LIST
22927: LIST
22928: PPUSH
22929: CALL_OW 69
22933: ST_TO_ADDR
// if not tmp then
22934: LD_VAR 0 6
22938: NOT
22939: IFFALSE 22943
// exit ;
22941: GO 23089
// s1 := rand ( 1 , 4 ) ;
22943: LD_ADDR_VAR 0 2
22947: PUSH
22948: LD_INT 1
22950: PPUSH
22951: LD_INT 4
22953: PPUSH
22954: CALL_OW 12
22958: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
22959: LD_ADDR_VAR 0 4
22963: PUSH
22964: LD_VAR 0 6
22968: PUSH
22969: LD_INT 1
22971: ARRAY
22972: PPUSH
22973: LD_VAR 0 2
22977: PPUSH
22978: CALL_OW 259
22982: ST_TO_ADDR
// if s1 = 1 then
22983: LD_VAR 0 2
22987: PUSH
22988: LD_INT 1
22990: EQUAL
22991: IFFALSE 23011
// s2 := rand ( 2 , 4 ) else
22993: LD_ADDR_VAR 0 3
22997: PUSH
22998: LD_INT 2
23000: PPUSH
23001: LD_INT 4
23003: PPUSH
23004: CALL_OW 12
23008: ST_TO_ADDR
23009: GO 23019
// s2 := 1 ;
23011: LD_ADDR_VAR 0 3
23015: PUSH
23016: LD_INT 1
23018: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
23019: LD_ADDR_VAR 0 5
23023: PUSH
23024: LD_VAR 0 6
23028: PUSH
23029: LD_INT 1
23031: ARRAY
23032: PPUSH
23033: LD_VAR 0 3
23037: PPUSH
23038: CALL_OW 259
23042: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
23043: LD_VAR 0 6
23047: PUSH
23048: LD_INT 1
23050: ARRAY
23051: PPUSH
23052: LD_VAR 0 2
23056: PPUSH
23057: LD_VAR 0 5
23061: PPUSH
23062: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
23066: LD_VAR 0 6
23070: PUSH
23071: LD_INT 1
23073: ARRAY
23074: PPUSH
23075: LD_VAR 0 3
23079: PPUSH
23080: LD_VAR 0 4
23084: PPUSH
23085: CALL_OW 237
// end ;
23089: PPOPN 6
23091: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
23092: LD_EXP 21
23096: PUSH
23097: LD_EXP 68
23101: AND
23102: IFFALSE 23181
23104: GO 23106
23106: DISABLE
23107: LD_INT 0
23109: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
23110: LD_ADDR_VAR 0 1
23114: PUSH
23115: LD_INT 22
23117: PUSH
23118: LD_OWVAR 2
23122: PUSH
23123: EMPTY
23124: LIST
23125: LIST
23126: PUSH
23127: LD_INT 30
23129: PUSH
23130: LD_INT 3
23132: PUSH
23133: EMPTY
23134: LIST
23135: LIST
23136: PUSH
23137: EMPTY
23138: LIST
23139: LIST
23140: PPUSH
23141: CALL_OW 69
23145: ST_TO_ADDR
// if not tmp then
23146: LD_VAR 0 1
23150: NOT
23151: IFFALSE 23155
// exit ;
23153: GO 23181
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
23155: LD_VAR 0 1
23159: PUSH
23160: LD_INT 1
23162: PPUSH
23163: LD_VAR 0 1
23167: PPUSH
23168: CALL_OW 12
23172: ARRAY
23173: PPUSH
23174: LD_INT 1
23176: PPUSH
23177: CALL_OW 234
// end ;
23181: PPOPN 1
23183: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
23184: LD_EXP 21
23188: PUSH
23189: LD_EXP 69
23193: AND
23194: IFFALSE 23306
23196: GO 23198
23198: DISABLE
23199: LD_INT 0
23201: PPUSH
23202: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
23203: LD_ADDR_VAR 0 2
23207: PUSH
23208: LD_INT 22
23210: PUSH
23211: LD_OWVAR 2
23215: PUSH
23216: EMPTY
23217: LIST
23218: LIST
23219: PUSH
23220: LD_INT 2
23222: PUSH
23223: LD_INT 30
23225: PUSH
23226: LD_INT 27
23228: PUSH
23229: EMPTY
23230: LIST
23231: LIST
23232: PUSH
23233: LD_INT 30
23235: PUSH
23236: LD_INT 26
23238: PUSH
23239: EMPTY
23240: LIST
23241: LIST
23242: PUSH
23243: LD_INT 30
23245: PUSH
23246: LD_INT 28
23248: PUSH
23249: EMPTY
23250: LIST
23251: LIST
23252: PUSH
23253: EMPTY
23254: LIST
23255: LIST
23256: LIST
23257: LIST
23258: PUSH
23259: EMPTY
23260: LIST
23261: LIST
23262: PPUSH
23263: CALL_OW 69
23267: ST_TO_ADDR
// if not tmp then
23268: LD_VAR 0 2
23272: NOT
23273: IFFALSE 23277
// exit ;
23275: GO 23306
// for i in tmp do
23277: LD_ADDR_VAR 0 1
23281: PUSH
23282: LD_VAR 0 2
23286: PUSH
23287: FOR_IN
23288: IFFALSE 23304
// SetLives ( i , 1 ) ;
23290: LD_VAR 0 1
23294: PPUSH
23295: LD_INT 1
23297: PPUSH
23298: CALL_OW 234
23302: GO 23287
23304: POP
23305: POP
// end ;
23306: PPOPN 2
23308: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
23309: LD_EXP 21
23313: PUSH
23314: LD_EXP 70
23318: AND
23319: IFFALSE 23606
23321: GO 23323
23323: DISABLE
23324: LD_INT 0
23326: PPUSH
23327: PPUSH
23328: PPUSH
// begin i := rand ( 1 , 7 ) ;
23329: LD_ADDR_VAR 0 1
23333: PUSH
23334: LD_INT 1
23336: PPUSH
23337: LD_INT 7
23339: PPUSH
23340: CALL_OW 12
23344: ST_TO_ADDR
// case i of 1 :
23345: LD_VAR 0 1
23349: PUSH
23350: LD_INT 1
23352: DOUBLE
23353: EQUAL
23354: IFTRUE 23358
23356: GO 23368
23358: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
23359: LD_STRING earthquake(getX(game), 0, 32)
23361: PPUSH
23362: CALL_OW 559
23366: GO 23606
23368: LD_INT 2
23370: DOUBLE
23371: EQUAL
23372: IFTRUE 23376
23374: GO 23390
23376: POP
// begin ToLua ( displayStucuk(); ) ;
23377: LD_STRING displayStucuk();
23379: PPUSH
23380: CALL_OW 559
// ResetFog ;
23384: CALL_OW 335
// end ; 3 :
23388: GO 23606
23390: LD_INT 3
23392: DOUBLE
23393: EQUAL
23394: IFTRUE 23398
23396: GO 23502
23398: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
23399: LD_ADDR_VAR 0 2
23403: PUSH
23404: LD_INT 22
23406: PUSH
23407: LD_OWVAR 2
23411: PUSH
23412: EMPTY
23413: LIST
23414: LIST
23415: PUSH
23416: LD_INT 25
23418: PUSH
23419: LD_INT 1
23421: PUSH
23422: EMPTY
23423: LIST
23424: LIST
23425: PUSH
23426: EMPTY
23427: LIST
23428: LIST
23429: PPUSH
23430: CALL_OW 69
23434: ST_TO_ADDR
// if not tmp then
23435: LD_VAR 0 2
23439: NOT
23440: IFFALSE 23444
// exit ;
23442: GO 23606
// un := tmp [ rand ( 1 , tmp ) ] ;
23444: LD_ADDR_VAR 0 3
23448: PUSH
23449: LD_VAR 0 2
23453: PUSH
23454: LD_INT 1
23456: PPUSH
23457: LD_VAR 0 2
23461: PPUSH
23462: CALL_OW 12
23466: ARRAY
23467: ST_TO_ADDR
// if Crawls ( un ) then
23468: LD_VAR 0 3
23472: PPUSH
23473: CALL_OW 318
23477: IFFALSE 23488
// ComWalk ( un ) ;
23479: LD_VAR 0 3
23483: PPUSH
23484: CALL_OW 138
// SetClass ( un , class_mortar ) ;
23488: LD_VAR 0 3
23492: PPUSH
23493: LD_INT 8
23495: PPUSH
23496: CALL_OW 336
// end ; 4 :
23500: GO 23606
23502: LD_INT 4
23504: DOUBLE
23505: EQUAL
23506: IFTRUE 23510
23508: GO 23584
23510: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
23511: LD_ADDR_VAR 0 2
23515: PUSH
23516: LD_INT 22
23518: PUSH
23519: LD_OWVAR 2
23523: PUSH
23524: EMPTY
23525: LIST
23526: LIST
23527: PUSH
23528: LD_INT 30
23530: PUSH
23531: LD_INT 29
23533: PUSH
23534: EMPTY
23535: LIST
23536: LIST
23537: PUSH
23538: EMPTY
23539: LIST
23540: LIST
23541: PPUSH
23542: CALL_OW 69
23546: ST_TO_ADDR
// if not tmp then
23547: LD_VAR 0 2
23551: NOT
23552: IFFALSE 23556
// exit ;
23554: GO 23606
// CenterNowOnUnits ( tmp [ 1 ] ) ;
23556: LD_VAR 0 2
23560: PUSH
23561: LD_INT 1
23563: ARRAY
23564: PPUSH
23565: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
23569: LD_VAR 0 2
23573: PUSH
23574: LD_INT 1
23576: ARRAY
23577: PPUSH
23578: CALL_OW 65
// end ; 5 .. 7 :
23582: GO 23606
23584: LD_INT 5
23586: DOUBLE
23587: GREATEREQUAL
23588: IFFALSE 23596
23590: LD_INT 7
23592: DOUBLE
23593: LESSEQUAL
23594: IFTRUE 23598
23596: GO 23605
23598: POP
// StreamSibBomb ; end ;
23599: CALL 19843 0 0
23603: GO 23606
23605: POP
// end ;
23606: PPOPN 3
23608: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
23609: LD_EXP 21
23613: PUSH
23614: LD_EXP 71
23618: AND
23619: IFFALSE 23775
23621: GO 23623
23623: DISABLE
23624: LD_INT 0
23626: PPUSH
23627: PPUSH
23628: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
23629: LD_ADDR_VAR 0 2
23633: PUSH
23634: LD_INT 81
23636: PUSH
23637: LD_OWVAR 2
23641: PUSH
23642: EMPTY
23643: LIST
23644: LIST
23645: PUSH
23646: LD_INT 2
23648: PUSH
23649: LD_INT 21
23651: PUSH
23652: LD_INT 1
23654: PUSH
23655: EMPTY
23656: LIST
23657: LIST
23658: PUSH
23659: LD_INT 21
23661: PUSH
23662: LD_INT 2
23664: PUSH
23665: EMPTY
23666: LIST
23667: LIST
23668: PUSH
23669: EMPTY
23670: LIST
23671: LIST
23672: LIST
23673: PUSH
23674: EMPTY
23675: LIST
23676: LIST
23677: PPUSH
23678: CALL_OW 69
23682: ST_TO_ADDR
// if not tmp then
23683: LD_VAR 0 2
23687: NOT
23688: IFFALSE 23692
// exit ;
23690: GO 23775
// p := 0 ;
23692: LD_ADDR_VAR 0 3
23696: PUSH
23697: LD_INT 0
23699: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23700: LD_INT 35
23702: PPUSH
23703: CALL_OW 67
// p := p + 1 ;
23707: LD_ADDR_VAR 0 3
23711: PUSH
23712: LD_VAR 0 3
23716: PUSH
23717: LD_INT 1
23719: PLUS
23720: ST_TO_ADDR
// for i in tmp do
23721: LD_ADDR_VAR 0 1
23725: PUSH
23726: LD_VAR 0 2
23730: PUSH
23731: FOR_IN
23732: IFFALSE 23763
// if GetLives ( i ) < 1000 then
23734: LD_VAR 0 1
23738: PPUSH
23739: CALL_OW 256
23743: PUSH
23744: LD_INT 1000
23746: LESS
23747: IFFALSE 23761
// SetLives ( i , 1000 ) ;
23749: LD_VAR 0 1
23753: PPUSH
23754: LD_INT 1000
23756: PPUSH
23757: CALL_OW 234
23761: GO 23731
23763: POP
23764: POP
// until p > 20 ;
23765: LD_VAR 0 3
23769: PUSH
23770: LD_INT 20
23772: GREATER
23773: IFFALSE 23700
// end ;
23775: PPOPN 3
23777: END
// every 0 0$1 trigger StreamModeActive and sTime do
23778: LD_EXP 21
23782: PUSH
23783: LD_EXP 72
23787: AND
23788: IFFALSE 23823
23790: GO 23792
23792: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
23793: LD_INT 28
23795: PPUSH
23796: LD_OWVAR 2
23800: PPUSH
23801: LD_INT 2
23803: PPUSH
23804: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
23808: LD_INT 30
23810: PPUSH
23811: LD_OWVAR 2
23815: PPUSH
23816: LD_INT 2
23818: PPUSH
23819: CALL_OW 322
// end ;
23823: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
23824: LD_EXP 21
23828: PUSH
23829: LD_EXP 73
23833: AND
23834: IFFALSE 23955
23836: GO 23838
23838: DISABLE
23839: LD_INT 0
23841: PPUSH
23842: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
23843: LD_ADDR_VAR 0 2
23847: PUSH
23848: LD_INT 22
23850: PUSH
23851: LD_OWVAR 2
23855: PUSH
23856: EMPTY
23857: LIST
23858: LIST
23859: PUSH
23860: LD_INT 21
23862: PUSH
23863: LD_INT 1
23865: PUSH
23866: EMPTY
23867: LIST
23868: LIST
23869: PUSH
23870: LD_INT 3
23872: PUSH
23873: LD_INT 23
23875: PUSH
23876: LD_INT 0
23878: PUSH
23879: EMPTY
23880: LIST
23881: LIST
23882: PUSH
23883: EMPTY
23884: LIST
23885: LIST
23886: PUSH
23887: EMPTY
23888: LIST
23889: LIST
23890: LIST
23891: PPUSH
23892: CALL_OW 69
23896: ST_TO_ADDR
// if not tmp then
23897: LD_VAR 0 2
23901: NOT
23902: IFFALSE 23906
// exit ;
23904: GO 23955
// for i in tmp do
23906: LD_ADDR_VAR 0 1
23910: PUSH
23911: LD_VAR 0 2
23915: PUSH
23916: FOR_IN
23917: IFFALSE 23953
// begin if Crawls ( i ) then
23919: LD_VAR 0 1
23923: PPUSH
23924: CALL_OW 318
23928: IFFALSE 23939
// ComWalk ( i ) ;
23930: LD_VAR 0 1
23934: PPUSH
23935: CALL_OW 138
// SetClass ( i , 2 ) ;
23939: LD_VAR 0 1
23943: PPUSH
23944: LD_INT 2
23946: PPUSH
23947: CALL_OW 336
// end ;
23951: GO 23916
23953: POP
23954: POP
// end ;
23955: PPOPN 2
23957: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
23958: LD_EXP 21
23962: PUSH
23963: LD_EXP 74
23967: AND
23968: IFFALSE 24256
23970: GO 23972
23972: DISABLE
23973: LD_INT 0
23975: PPUSH
23976: PPUSH
23977: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
23978: LD_OWVAR 2
23982: PPUSH
23983: LD_INT 9
23985: PPUSH
23986: LD_INT 1
23988: PPUSH
23989: LD_INT 1
23991: PPUSH
23992: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
23996: LD_INT 9
23998: PPUSH
23999: LD_OWVAR 2
24003: PPUSH
24004: CALL_OW 343
// uc_side := 9 ;
24008: LD_ADDR_OWVAR 20
24012: PUSH
24013: LD_INT 9
24015: ST_TO_ADDR
// uc_nation := 2 ;
24016: LD_ADDR_OWVAR 21
24020: PUSH
24021: LD_INT 2
24023: ST_TO_ADDR
// hc_name := Dark Warrior ;
24024: LD_ADDR_OWVAR 26
24028: PUSH
24029: LD_STRING Dark Warrior
24031: ST_TO_ADDR
// hc_gallery :=  ;
24032: LD_ADDR_OWVAR 33
24036: PUSH
24037: LD_STRING 
24039: ST_TO_ADDR
// hc_noskilllimit := true ;
24040: LD_ADDR_OWVAR 76
24044: PUSH
24045: LD_INT 1
24047: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
24048: LD_ADDR_OWVAR 31
24052: PUSH
24053: LD_INT 30
24055: PUSH
24056: LD_INT 30
24058: PUSH
24059: LD_INT 30
24061: PUSH
24062: LD_INT 30
24064: PUSH
24065: EMPTY
24066: LIST
24067: LIST
24068: LIST
24069: LIST
24070: ST_TO_ADDR
// un := CreateHuman ;
24071: LD_ADDR_VAR 0 3
24075: PUSH
24076: CALL_OW 44
24080: ST_TO_ADDR
// hc_noskilllimit := false ;
24081: LD_ADDR_OWVAR 76
24085: PUSH
24086: LD_INT 0
24088: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
24089: LD_VAR 0 3
24093: PPUSH
24094: LD_INT 1
24096: PPUSH
24097: CALL_OW 51
// ToLua ( playRanger() ) ;
24101: LD_STRING playRanger()
24103: PPUSH
24104: CALL_OW 559
// p := 0 ;
24108: LD_ADDR_VAR 0 2
24112: PUSH
24113: LD_INT 0
24115: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
24116: LD_INT 35
24118: PPUSH
24119: CALL_OW 67
// p := p + 1 ;
24123: LD_ADDR_VAR 0 2
24127: PUSH
24128: LD_VAR 0 2
24132: PUSH
24133: LD_INT 1
24135: PLUS
24136: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
24137: LD_VAR 0 3
24141: PPUSH
24142: CALL_OW 256
24146: PUSH
24147: LD_INT 1000
24149: LESS
24150: IFFALSE 24164
// SetLives ( un , 1000 ) ;
24152: LD_VAR 0 3
24156: PPUSH
24157: LD_INT 1000
24159: PPUSH
24160: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
24164: LD_VAR 0 3
24168: PPUSH
24169: LD_INT 81
24171: PUSH
24172: LD_OWVAR 2
24176: PUSH
24177: EMPTY
24178: LIST
24179: LIST
24180: PUSH
24181: LD_INT 91
24183: PUSH
24184: LD_VAR 0 3
24188: PUSH
24189: LD_INT 30
24191: PUSH
24192: EMPTY
24193: LIST
24194: LIST
24195: LIST
24196: PUSH
24197: EMPTY
24198: LIST
24199: LIST
24200: PPUSH
24201: CALL_OW 69
24205: PPUSH
24206: LD_VAR 0 3
24210: PPUSH
24211: CALL_OW 74
24215: PPUSH
24216: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
24220: LD_VAR 0 2
24224: PUSH
24225: LD_INT 80
24227: GREATER
24228: PUSH
24229: LD_VAR 0 3
24233: PPUSH
24234: CALL_OW 301
24238: OR
24239: IFFALSE 24116
// if un then
24241: LD_VAR 0 3
24245: IFFALSE 24256
// RemoveUnit ( un ) ;
24247: LD_VAR 0 3
24251: PPUSH
24252: CALL_OW 64
// end ;
24256: PPOPN 3
24258: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
24259: LD_EXP 75
24263: IFFALSE 24379
24265: GO 24267
24267: DISABLE
24268: LD_INT 0
24270: PPUSH
24271: PPUSH
24272: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
24273: LD_ADDR_VAR 0 2
24277: PUSH
24278: LD_INT 81
24280: PUSH
24281: LD_OWVAR 2
24285: PUSH
24286: EMPTY
24287: LIST
24288: LIST
24289: PUSH
24290: LD_INT 21
24292: PUSH
24293: LD_INT 1
24295: PUSH
24296: EMPTY
24297: LIST
24298: LIST
24299: PUSH
24300: EMPTY
24301: LIST
24302: LIST
24303: PPUSH
24304: CALL_OW 69
24308: ST_TO_ADDR
// ToLua ( playComputer() ) ;
24309: LD_STRING playComputer()
24311: PPUSH
24312: CALL_OW 559
// if not tmp then
24316: LD_VAR 0 2
24320: NOT
24321: IFFALSE 24325
// exit ;
24323: GO 24379
// for i in tmp do
24325: LD_ADDR_VAR 0 1
24329: PUSH
24330: LD_VAR 0 2
24334: PUSH
24335: FOR_IN
24336: IFFALSE 24377
// for j := 1 to 4 do
24338: LD_ADDR_VAR 0 3
24342: PUSH
24343: DOUBLE
24344: LD_INT 1
24346: DEC
24347: ST_TO_ADDR
24348: LD_INT 4
24350: PUSH
24351: FOR_TO
24352: IFFALSE 24373
// SetSkill ( i , j , 10 ) ;
24354: LD_VAR 0 1
24358: PPUSH
24359: LD_VAR 0 3
24363: PPUSH
24364: LD_INT 10
24366: PPUSH
24367: CALL_OW 237
24371: GO 24351
24373: POP
24374: POP
24375: GO 24335
24377: POP
24378: POP
// end ;
24379: PPOPN 3
24381: END
// every 0 0$1 trigger s30 do var i , tmp ;
24382: LD_EXP 76
24386: IFFALSE 24455
24388: GO 24390
24390: DISABLE
24391: LD_INT 0
24393: PPUSH
24394: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
24395: LD_ADDR_VAR 0 2
24399: PUSH
24400: LD_INT 22
24402: PUSH
24403: LD_OWVAR 2
24407: PUSH
24408: EMPTY
24409: LIST
24410: LIST
24411: PPUSH
24412: CALL_OW 69
24416: ST_TO_ADDR
// if not tmp then
24417: LD_VAR 0 2
24421: NOT
24422: IFFALSE 24426
// exit ;
24424: GO 24455
// for i in tmp do
24426: LD_ADDR_VAR 0 1
24430: PUSH
24431: LD_VAR 0 2
24435: PUSH
24436: FOR_IN
24437: IFFALSE 24453
// SetLives ( i , 300 ) ;
24439: LD_VAR 0 1
24443: PPUSH
24444: LD_INT 300
24446: PPUSH
24447: CALL_OW 234
24451: GO 24436
24453: POP
24454: POP
// end ;
24455: PPOPN 2
24457: END
// every 0 0$1 trigger s60 do var i , tmp ;
24458: LD_EXP 77
24462: IFFALSE 24531
24464: GO 24466
24466: DISABLE
24467: LD_INT 0
24469: PPUSH
24470: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
24471: LD_ADDR_VAR 0 2
24475: PUSH
24476: LD_INT 22
24478: PUSH
24479: LD_OWVAR 2
24483: PUSH
24484: EMPTY
24485: LIST
24486: LIST
24487: PPUSH
24488: CALL_OW 69
24492: ST_TO_ADDR
// if not tmp then
24493: LD_VAR 0 2
24497: NOT
24498: IFFALSE 24502
// exit ;
24500: GO 24531
// for i in tmp do
24502: LD_ADDR_VAR 0 1
24506: PUSH
24507: LD_VAR 0 2
24511: PUSH
24512: FOR_IN
24513: IFFALSE 24529
// SetLives ( i , 600 ) ;
24515: LD_VAR 0 1
24519: PPUSH
24520: LD_INT 600
24522: PPUSH
24523: CALL_OW 234
24527: GO 24512
24529: POP
24530: POP
// end ;
24531: PPOPN 2
24533: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
24534: LD_INT 0
24536: PPUSH
// case cmd of 301 :
24537: LD_VAR 0 1
24541: PUSH
24542: LD_INT 301
24544: DOUBLE
24545: EQUAL
24546: IFTRUE 24550
24548: GO 24582
24550: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
24551: LD_VAR 0 6
24555: PPUSH
24556: LD_VAR 0 7
24560: PPUSH
24561: LD_VAR 0 8
24565: PPUSH
24566: LD_VAR 0 4
24570: PPUSH
24571: LD_VAR 0 5
24575: PPUSH
24576: CALL 25783 0 5
24580: GO 24703
24582: LD_INT 302
24584: DOUBLE
24585: EQUAL
24586: IFTRUE 24590
24588: GO 24627
24590: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
24591: LD_VAR 0 6
24595: PPUSH
24596: LD_VAR 0 7
24600: PPUSH
24601: LD_VAR 0 8
24605: PPUSH
24606: LD_VAR 0 9
24610: PPUSH
24611: LD_VAR 0 4
24615: PPUSH
24616: LD_VAR 0 5
24620: PPUSH
24621: CALL 25874 0 6
24625: GO 24703
24627: LD_INT 303
24629: DOUBLE
24630: EQUAL
24631: IFTRUE 24635
24633: GO 24672
24635: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
24636: LD_VAR 0 6
24640: PPUSH
24641: LD_VAR 0 7
24645: PPUSH
24646: LD_VAR 0 8
24650: PPUSH
24651: LD_VAR 0 9
24655: PPUSH
24656: LD_VAR 0 4
24660: PPUSH
24661: LD_VAR 0 5
24665: PPUSH
24666: CALL 24708 0 6
24670: GO 24703
24672: LD_INT 304
24674: DOUBLE
24675: EQUAL
24676: IFTRUE 24680
24678: GO 24702
24680: POP
// hHackTeleport ( unit , x , y ) ; end ;
24681: LD_VAR 0 2
24685: PPUSH
24686: LD_VAR 0 4
24690: PPUSH
24691: LD_VAR 0 5
24695: PPUSH
24696: CALL 26467 0 3
24700: GO 24703
24702: POP
// end ;
24703: LD_VAR 0 12
24707: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
24708: LD_INT 0
24710: PPUSH
24711: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
24712: LD_VAR 0 1
24716: PUSH
24717: LD_INT 1
24719: LESS
24720: PUSH
24721: LD_VAR 0 1
24725: PUSH
24726: LD_INT 3
24728: GREATER
24729: OR
24730: PUSH
24731: LD_VAR 0 5
24735: PPUSH
24736: LD_VAR 0 6
24740: PPUSH
24741: CALL_OW 428
24745: OR
24746: IFFALSE 24750
// exit ;
24748: GO 25470
// uc_side := your_side ;
24750: LD_ADDR_OWVAR 20
24754: PUSH
24755: LD_OWVAR 2
24759: ST_TO_ADDR
// uc_nation := nation ;
24760: LD_ADDR_OWVAR 21
24764: PUSH
24765: LD_VAR 0 1
24769: ST_TO_ADDR
// bc_level = 1 ;
24770: LD_ADDR_OWVAR 43
24774: PUSH
24775: LD_INT 1
24777: ST_TO_ADDR
// case btype of 1 :
24778: LD_VAR 0 2
24782: PUSH
24783: LD_INT 1
24785: DOUBLE
24786: EQUAL
24787: IFTRUE 24791
24789: GO 24802
24791: POP
// bc_type := b_depot ; 2 :
24792: LD_ADDR_OWVAR 42
24796: PUSH
24797: LD_INT 0
24799: ST_TO_ADDR
24800: GO 25414
24802: LD_INT 2
24804: DOUBLE
24805: EQUAL
24806: IFTRUE 24810
24808: GO 24821
24810: POP
// bc_type := b_warehouse ; 3 :
24811: LD_ADDR_OWVAR 42
24815: PUSH
24816: LD_INT 1
24818: ST_TO_ADDR
24819: GO 25414
24821: LD_INT 3
24823: DOUBLE
24824: EQUAL
24825: IFTRUE 24829
24827: GO 24840
24829: POP
// bc_type := b_lab ; 4 .. 9 :
24830: LD_ADDR_OWVAR 42
24834: PUSH
24835: LD_INT 6
24837: ST_TO_ADDR
24838: GO 25414
24840: LD_INT 4
24842: DOUBLE
24843: GREATEREQUAL
24844: IFFALSE 24852
24846: LD_INT 9
24848: DOUBLE
24849: LESSEQUAL
24850: IFTRUE 24854
24852: GO 24906
24854: POP
// begin bc_type := b_lab_half ;
24855: LD_ADDR_OWVAR 42
24859: PUSH
24860: LD_INT 7
24862: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
24863: LD_ADDR_OWVAR 44
24867: PUSH
24868: LD_INT 10
24870: PUSH
24871: LD_INT 11
24873: PUSH
24874: LD_INT 12
24876: PUSH
24877: LD_INT 15
24879: PUSH
24880: LD_INT 14
24882: PUSH
24883: LD_INT 13
24885: PUSH
24886: EMPTY
24887: LIST
24888: LIST
24889: LIST
24890: LIST
24891: LIST
24892: LIST
24893: PUSH
24894: LD_VAR 0 2
24898: PUSH
24899: LD_INT 3
24901: MINUS
24902: ARRAY
24903: ST_TO_ADDR
// end ; 10 .. 13 :
24904: GO 25414
24906: LD_INT 10
24908: DOUBLE
24909: GREATEREQUAL
24910: IFFALSE 24918
24912: LD_INT 13
24914: DOUBLE
24915: LESSEQUAL
24916: IFTRUE 24920
24918: GO 24997
24920: POP
// begin bc_type := b_lab_full ;
24921: LD_ADDR_OWVAR 42
24925: PUSH
24926: LD_INT 8
24928: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
24929: LD_ADDR_OWVAR 44
24933: PUSH
24934: LD_INT 10
24936: PUSH
24937: LD_INT 12
24939: PUSH
24940: LD_INT 14
24942: PUSH
24943: LD_INT 13
24945: PUSH
24946: EMPTY
24947: LIST
24948: LIST
24949: LIST
24950: LIST
24951: PUSH
24952: LD_VAR 0 2
24956: PUSH
24957: LD_INT 9
24959: MINUS
24960: ARRAY
24961: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
24962: LD_ADDR_OWVAR 45
24966: PUSH
24967: LD_INT 11
24969: PUSH
24970: LD_INT 15
24972: PUSH
24973: LD_INT 12
24975: PUSH
24976: LD_INT 15
24978: PUSH
24979: EMPTY
24980: LIST
24981: LIST
24982: LIST
24983: LIST
24984: PUSH
24985: LD_VAR 0 2
24989: PUSH
24990: LD_INT 9
24992: MINUS
24993: ARRAY
24994: ST_TO_ADDR
// end ; 14 :
24995: GO 25414
24997: LD_INT 14
24999: DOUBLE
25000: EQUAL
25001: IFTRUE 25005
25003: GO 25016
25005: POP
// bc_type := b_workshop ; 15 :
25006: LD_ADDR_OWVAR 42
25010: PUSH
25011: LD_INT 2
25013: ST_TO_ADDR
25014: GO 25414
25016: LD_INT 15
25018: DOUBLE
25019: EQUAL
25020: IFTRUE 25024
25022: GO 25035
25024: POP
// bc_type := b_factory ; 16 :
25025: LD_ADDR_OWVAR 42
25029: PUSH
25030: LD_INT 3
25032: ST_TO_ADDR
25033: GO 25414
25035: LD_INT 16
25037: DOUBLE
25038: EQUAL
25039: IFTRUE 25043
25041: GO 25054
25043: POP
// bc_type := b_ext_gun ; 17 :
25044: LD_ADDR_OWVAR 42
25048: PUSH
25049: LD_INT 17
25051: ST_TO_ADDR
25052: GO 25414
25054: LD_INT 17
25056: DOUBLE
25057: EQUAL
25058: IFTRUE 25062
25060: GO 25090
25062: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
25063: LD_ADDR_OWVAR 42
25067: PUSH
25068: LD_INT 19
25070: PUSH
25071: LD_INT 23
25073: PUSH
25074: LD_INT 19
25076: PUSH
25077: EMPTY
25078: LIST
25079: LIST
25080: LIST
25081: PUSH
25082: LD_VAR 0 1
25086: ARRAY
25087: ST_TO_ADDR
25088: GO 25414
25090: LD_INT 18
25092: DOUBLE
25093: EQUAL
25094: IFTRUE 25098
25096: GO 25109
25098: POP
// bc_type := b_ext_radar ; 19 :
25099: LD_ADDR_OWVAR 42
25103: PUSH
25104: LD_INT 20
25106: ST_TO_ADDR
25107: GO 25414
25109: LD_INT 19
25111: DOUBLE
25112: EQUAL
25113: IFTRUE 25117
25115: GO 25128
25117: POP
// bc_type := b_ext_radio ; 20 :
25118: LD_ADDR_OWVAR 42
25122: PUSH
25123: LD_INT 22
25125: ST_TO_ADDR
25126: GO 25414
25128: LD_INT 20
25130: DOUBLE
25131: EQUAL
25132: IFTRUE 25136
25134: GO 25147
25136: POP
// bc_type := b_ext_siberium ; 21 :
25137: LD_ADDR_OWVAR 42
25141: PUSH
25142: LD_INT 21
25144: ST_TO_ADDR
25145: GO 25414
25147: LD_INT 21
25149: DOUBLE
25150: EQUAL
25151: IFTRUE 25155
25153: GO 25166
25155: POP
// bc_type := b_ext_computer ; 22 :
25156: LD_ADDR_OWVAR 42
25160: PUSH
25161: LD_INT 24
25163: ST_TO_ADDR
25164: GO 25414
25166: LD_INT 22
25168: DOUBLE
25169: EQUAL
25170: IFTRUE 25174
25172: GO 25185
25174: POP
// bc_type := b_ext_track ; 23 :
25175: LD_ADDR_OWVAR 42
25179: PUSH
25180: LD_INT 16
25182: ST_TO_ADDR
25183: GO 25414
25185: LD_INT 23
25187: DOUBLE
25188: EQUAL
25189: IFTRUE 25193
25191: GO 25204
25193: POP
// bc_type := b_ext_laser ; 24 :
25194: LD_ADDR_OWVAR 42
25198: PUSH
25199: LD_INT 25
25201: ST_TO_ADDR
25202: GO 25414
25204: LD_INT 24
25206: DOUBLE
25207: EQUAL
25208: IFTRUE 25212
25210: GO 25223
25212: POP
// bc_type := b_control_tower ; 25 :
25213: LD_ADDR_OWVAR 42
25217: PUSH
25218: LD_INT 36
25220: ST_TO_ADDR
25221: GO 25414
25223: LD_INT 25
25225: DOUBLE
25226: EQUAL
25227: IFTRUE 25231
25229: GO 25242
25231: POP
// bc_type := b_breastwork ; 26 :
25232: LD_ADDR_OWVAR 42
25236: PUSH
25237: LD_INT 31
25239: ST_TO_ADDR
25240: GO 25414
25242: LD_INT 26
25244: DOUBLE
25245: EQUAL
25246: IFTRUE 25250
25248: GO 25261
25250: POP
// bc_type := b_bunker ; 27 :
25251: LD_ADDR_OWVAR 42
25255: PUSH
25256: LD_INT 32
25258: ST_TO_ADDR
25259: GO 25414
25261: LD_INT 27
25263: DOUBLE
25264: EQUAL
25265: IFTRUE 25269
25267: GO 25280
25269: POP
// bc_type := b_turret ; 28 :
25270: LD_ADDR_OWVAR 42
25274: PUSH
25275: LD_INT 33
25277: ST_TO_ADDR
25278: GO 25414
25280: LD_INT 28
25282: DOUBLE
25283: EQUAL
25284: IFTRUE 25288
25286: GO 25299
25288: POP
// bc_type := b_armoury ; 29 :
25289: LD_ADDR_OWVAR 42
25293: PUSH
25294: LD_INT 4
25296: ST_TO_ADDR
25297: GO 25414
25299: LD_INT 29
25301: DOUBLE
25302: EQUAL
25303: IFTRUE 25307
25305: GO 25318
25307: POP
// bc_type := b_barracks ; 30 :
25308: LD_ADDR_OWVAR 42
25312: PUSH
25313: LD_INT 5
25315: ST_TO_ADDR
25316: GO 25414
25318: LD_INT 30
25320: DOUBLE
25321: EQUAL
25322: IFTRUE 25326
25324: GO 25337
25326: POP
// bc_type := b_solar_power ; 31 :
25327: LD_ADDR_OWVAR 42
25331: PUSH
25332: LD_INT 27
25334: ST_TO_ADDR
25335: GO 25414
25337: LD_INT 31
25339: DOUBLE
25340: EQUAL
25341: IFTRUE 25345
25343: GO 25356
25345: POP
// bc_type := b_oil_power ; 32 :
25346: LD_ADDR_OWVAR 42
25350: PUSH
25351: LD_INT 26
25353: ST_TO_ADDR
25354: GO 25414
25356: LD_INT 32
25358: DOUBLE
25359: EQUAL
25360: IFTRUE 25364
25362: GO 25375
25364: POP
// bc_type := b_siberite_power ; 33 :
25365: LD_ADDR_OWVAR 42
25369: PUSH
25370: LD_INT 28
25372: ST_TO_ADDR
25373: GO 25414
25375: LD_INT 33
25377: DOUBLE
25378: EQUAL
25379: IFTRUE 25383
25381: GO 25394
25383: POP
// bc_type := b_oil_mine ; 34 :
25384: LD_ADDR_OWVAR 42
25388: PUSH
25389: LD_INT 29
25391: ST_TO_ADDR
25392: GO 25414
25394: LD_INT 34
25396: DOUBLE
25397: EQUAL
25398: IFTRUE 25402
25400: GO 25413
25402: POP
// bc_type := b_siberite_mine ; end ;
25403: LD_ADDR_OWVAR 42
25407: PUSH
25408: LD_INT 30
25410: ST_TO_ADDR
25411: GO 25414
25413: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
25414: LD_ADDR_VAR 0 8
25418: PUSH
25419: LD_VAR 0 5
25423: PPUSH
25424: LD_VAR 0 6
25428: PPUSH
25429: LD_VAR 0 3
25433: PPUSH
25434: CALL_OW 47
25438: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
25439: LD_OWVAR 42
25443: PUSH
25444: LD_INT 32
25446: PUSH
25447: LD_INT 33
25449: PUSH
25450: EMPTY
25451: LIST
25452: LIST
25453: IN
25454: IFFALSE 25470
// PlaceWeaponTurret ( b , weapon ) ;
25456: LD_VAR 0 8
25460: PPUSH
25461: LD_VAR 0 4
25465: PPUSH
25466: CALL_OW 431
// end ;
25470: LD_VAR 0 7
25474: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
25475: LD_INT 0
25477: PPUSH
25478: PPUSH
25479: PPUSH
25480: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
25481: LD_ADDR_VAR 0 4
25485: PUSH
25486: LD_INT 22
25488: PUSH
25489: LD_OWVAR 2
25493: PUSH
25494: EMPTY
25495: LIST
25496: LIST
25497: PUSH
25498: LD_INT 2
25500: PUSH
25501: LD_INT 30
25503: PUSH
25504: LD_INT 0
25506: PUSH
25507: EMPTY
25508: LIST
25509: LIST
25510: PUSH
25511: LD_INT 30
25513: PUSH
25514: LD_INT 1
25516: PUSH
25517: EMPTY
25518: LIST
25519: LIST
25520: PUSH
25521: EMPTY
25522: LIST
25523: LIST
25524: LIST
25525: PUSH
25526: EMPTY
25527: LIST
25528: LIST
25529: PPUSH
25530: CALL_OW 69
25534: ST_TO_ADDR
// if not tmp then
25535: LD_VAR 0 4
25539: NOT
25540: IFFALSE 25544
// exit ;
25542: GO 25603
// for i in tmp do
25544: LD_ADDR_VAR 0 2
25548: PUSH
25549: LD_VAR 0 4
25553: PUSH
25554: FOR_IN
25555: IFFALSE 25601
// for j = 1 to 3 do
25557: LD_ADDR_VAR 0 3
25561: PUSH
25562: DOUBLE
25563: LD_INT 1
25565: DEC
25566: ST_TO_ADDR
25567: LD_INT 3
25569: PUSH
25570: FOR_TO
25571: IFFALSE 25597
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
25573: LD_VAR 0 2
25577: PPUSH
25578: CALL_OW 274
25582: PPUSH
25583: LD_VAR 0 3
25587: PPUSH
25588: LD_INT 99999
25590: PPUSH
25591: CALL_OW 277
25595: GO 25570
25597: POP
25598: POP
25599: GO 25554
25601: POP
25602: POP
// end ;
25603: LD_VAR 0 1
25607: RET
// export function hHackSetLevel10 ; var i , j ; begin
25608: LD_INT 0
25610: PPUSH
25611: PPUSH
25612: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
25613: LD_ADDR_VAR 0 2
25617: PUSH
25618: LD_INT 21
25620: PUSH
25621: LD_INT 1
25623: PUSH
25624: EMPTY
25625: LIST
25626: LIST
25627: PPUSH
25628: CALL_OW 69
25632: PUSH
25633: FOR_IN
25634: IFFALSE 25686
// if IsSelected ( i ) then
25636: LD_VAR 0 2
25640: PPUSH
25641: CALL_OW 306
25645: IFFALSE 25684
// begin for j := 1 to 4 do
25647: LD_ADDR_VAR 0 3
25651: PUSH
25652: DOUBLE
25653: LD_INT 1
25655: DEC
25656: ST_TO_ADDR
25657: LD_INT 4
25659: PUSH
25660: FOR_TO
25661: IFFALSE 25682
// SetSkill ( i , j , 10 ) ;
25663: LD_VAR 0 2
25667: PPUSH
25668: LD_VAR 0 3
25672: PPUSH
25673: LD_INT 10
25675: PPUSH
25676: CALL_OW 237
25680: GO 25660
25682: POP
25683: POP
// end ;
25684: GO 25633
25686: POP
25687: POP
// end ;
25688: LD_VAR 0 1
25692: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
25693: LD_INT 0
25695: PPUSH
25696: PPUSH
25697: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
25698: LD_ADDR_VAR 0 2
25702: PUSH
25703: LD_INT 22
25705: PUSH
25706: LD_OWVAR 2
25710: PUSH
25711: EMPTY
25712: LIST
25713: LIST
25714: PUSH
25715: LD_INT 21
25717: PUSH
25718: LD_INT 1
25720: PUSH
25721: EMPTY
25722: LIST
25723: LIST
25724: PUSH
25725: EMPTY
25726: LIST
25727: LIST
25728: PPUSH
25729: CALL_OW 69
25733: PUSH
25734: FOR_IN
25735: IFFALSE 25776
// begin for j := 1 to 4 do
25737: LD_ADDR_VAR 0 3
25741: PUSH
25742: DOUBLE
25743: LD_INT 1
25745: DEC
25746: ST_TO_ADDR
25747: LD_INT 4
25749: PUSH
25750: FOR_TO
25751: IFFALSE 25772
// SetSkill ( i , j , 10 ) ;
25753: LD_VAR 0 2
25757: PPUSH
25758: LD_VAR 0 3
25762: PPUSH
25763: LD_INT 10
25765: PPUSH
25766: CALL_OW 237
25770: GO 25750
25772: POP
25773: POP
// end ;
25774: GO 25734
25776: POP
25777: POP
// end ;
25778: LD_VAR 0 1
25782: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
25783: LD_INT 0
25785: PPUSH
// uc_side := your_side ;
25786: LD_ADDR_OWVAR 20
25790: PUSH
25791: LD_OWVAR 2
25795: ST_TO_ADDR
// uc_nation := nation ;
25796: LD_ADDR_OWVAR 21
25800: PUSH
25801: LD_VAR 0 1
25805: ST_TO_ADDR
// InitHc ;
25806: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
25810: LD_INT 0
25812: PPUSH
25813: LD_VAR 0 2
25817: PPUSH
25818: LD_VAR 0 3
25822: PPUSH
25823: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
25827: LD_VAR 0 4
25831: PPUSH
25832: LD_VAR 0 5
25836: PPUSH
25837: CALL_OW 428
25841: PUSH
25842: LD_INT 0
25844: EQUAL
25845: IFFALSE 25869
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
25847: CALL_OW 44
25851: PPUSH
25852: LD_VAR 0 4
25856: PPUSH
25857: LD_VAR 0 5
25861: PPUSH
25862: LD_INT 1
25864: PPUSH
25865: CALL_OW 48
// end ;
25869: LD_VAR 0 6
25873: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
25874: LD_INT 0
25876: PPUSH
25877: PPUSH
// uc_side := your_side ;
25878: LD_ADDR_OWVAR 20
25882: PUSH
25883: LD_OWVAR 2
25887: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
25888: LD_VAR 0 1
25892: PUSH
25893: LD_INT 1
25895: PUSH
25896: LD_INT 2
25898: PUSH
25899: LD_INT 3
25901: PUSH
25902: LD_INT 4
25904: PUSH
25905: LD_INT 5
25907: PUSH
25908: EMPTY
25909: LIST
25910: LIST
25911: LIST
25912: LIST
25913: LIST
25914: IN
25915: IFFALSE 25927
// uc_nation := nation_american else
25917: LD_ADDR_OWVAR 21
25921: PUSH
25922: LD_INT 1
25924: ST_TO_ADDR
25925: GO 25970
// if chassis in [ 11 , 12 , 13 , 14 ] then
25927: LD_VAR 0 1
25931: PUSH
25932: LD_INT 11
25934: PUSH
25935: LD_INT 12
25937: PUSH
25938: LD_INT 13
25940: PUSH
25941: LD_INT 14
25943: PUSH
25944: EMPTY
25945: LIST
25946: LIST
25947: LIST
25948: LIST
25949: IN
25950: IFFALSE 25962
// uc_nation := nation_arabian else
25952: LD_ADDR_OWVAR 21
25956: PUSH
25957: LD_INT 2
25959: ST_TO_ADDR
25960: GO 25970
// uc_nation := nation_russian ;
25962: LD_ADDR_OWVAR 21
25966: PUSH
25967: LD_INT 3
25969: ST_TO_ADDR
// vc_chassis := chassis ;
25970: LD_ADDR_OWVAR 37
25974: PUSH
25975: LD_VAR 0 1
25979: ST_TO_ADDR
// vc_engine := engine ;
25980: LD_ADDR_OWVAR 39
25984: PUSH
25985: LD_VAR 0 2
25989: ST_TO_ADDR
// vc_control := control ;
25990: LD_ADDR_OWVAR 38
25994: PUSH
25995: LD_VAR 0 3
25999: ST_TO_ADDR
// vc_weapon := weapon ;
26000: LD_ADDR_OWVAR 40
26004: PUSH
26005: LD_VAR 0 4
26009: ST_TO_ADDR
// un := CreateVehicle ;
26010: LD_ADDR_VAR 0 8
26014: PUSH
26015: CALL_OW 45
26019: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
26020: LD_VAR 0 8
26024: PPUSH
26025: LD_INT 0
26027: PPUSH
26028: LD_INT 5
26030: PPUSH
26031: CALL_OW 12
26035: PPUSH
26036: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
26040: LD_VAR 0 8
26044: PPUSH
26045: LD_VAR 0 5
26049: PPUSH
26050: LD_VAR 0 6
26054: PPUSH
26055: LD_INT 1
26057: PPUSH
26058: CALL_OW 48
// end ;
26062: LD_VAR 0 7
26066: RET
// export hInvincible ; every 1 do
26067: GO 26069
26069: DISABLE
// hInvincible := [ ] ;
26070: LD_ADDR_EXP 78
26074: PUSH
26075: EMPTY
26076: ST_TO_ADDR
26077: END
// every 10 do var i ;
26078: GO 26080
26080: DISABLE
26081: LD_INT 0
26083: PPUSH
// begin enable ;
26084: ENABLE
// if not hInvincible then
26085: LD_EXP 78
26089: NOT
26090: IFFALSE 26094
// exit ;
26092: GO 26138
// for i in hInvincible do
26094: LD_ADDR_VAR 0 1
26098: PUSH
26099: LD_EXP 78
26103: PUSH
26104: FOR_IN
26105: IFFALSE 26136
// if GetLives ( i ) < 1000 then
26107: LD_VAR 0 1
26111: PPUSH
26112: CALL_OW 256
26116: PUSH
26117: LD_INT 1000
26119: LESS
26120: IFFALSE 26134
// SetLives ( i , 1000 ) ;
26122: LD_VAR 0 1
26126: PPUSH
26127: LD_INT 1000
26129: PPUSH
26130: CALL_OW 234
26134: GO 26104
26136: POP
26137: POP
// end ;
26138: PPOPN 1
26140: END
// export function hHackInvincible ; var i ; begin
26141: LD_INT 0
26143: PPUSH
26144: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
26145: LD_ADDR_VAR 0 2
26149: PUSH
26150: LD_INT 2
26152: PUSH
26153: LD_INT 21
26155: PUSH
26156: LD_INT 1
26158: PUSH
26159: EMPTY
26160: LIST
26161: LIST
26162: PUSH
26163: LD_INT 21
26165: PUSH
26166: LD_INT 2
26168: PUSH
26169: EMPTY
26170: LIST
26171: LIST
26172: PUSH
26173: EMPTY
26174: LIST
26175: LIST
26176: LIST
26177: PPUSH
26178: CALL_OW 69
26182: PUSH
26183: FOR_IN
26184: IFFALSE 26245
// if IsSelected ( i ) then
26186: LD_VAR 0 2
26190: PPUSH
26191: CALL_OW 306
26195: IFFALSE 26243
// begin if i in hInvincible then
26197: LD_VAR 0 2
26201: PUSH
26202: LD_EXP 78
26206: IN
26207: IFFALSE 26227
// hInvincible := hInvincible diff i else
26209: LD_ADDR_EXP 78
26213: PUSH
26214: LD_EXP 78
26218: PUSH
26219: LD_VAR 0 2
26223: DIFF
26224: ST_TO_ADDR
26225: GO 26243
// hInvincible := hInvincible union i ;
26227: LD_ADDR_EXP 78
26231: PUSH
26232: LD_EXP 78
26236: PUSH
26237: LD_VAR 0 2
26241: UNION
26242: ST_TO_ADDR
// end ;
26243: GO 26183
26245: POP
26246: POP
// end ;
26247: LD_VAR 0 1
26251: RET
// export function hHackInvisible ; var i , j ; begin
26252: LD_INT 0
26254: PPUSH
26255: PPUSH
26256: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
26257: LD_ADDR_VAR 0 2
26261: PUSH
26262: LD_INT 21
26264: PUSH
26265: LD_INT 1
26267: PUSH
26268: EMPTY
26269: LIST
26270: LIST
26271: PPUSH
26272: CALL_OW 69
26276: PUSH
26277: FOR_IN
26278: IFFALSE 26302
// if IsSelected ( i ) then
26280: LD_VAR 0 2
26284: PPUSH
26285: CALL_OW 306
26289: IFFALSE 26300
// ComForceInvisible ( i ) ;
26291: LD_VAR 0 2
26295: PPUSH
26296: CALL_OW 496
26300: GO 26277
26302: POP
26303: POP
// end ;
26304: LD_VAR 0 1
26308: RET
// export function hHackChangeYourSide ; begin
26309: LD_INT 0
26311: PPUSH
// if your_side = 8 then
26312: LD_OWVAR 2
26316: PUSH
26317: LD_INT 8
26319: EQUAL
26320: IFFALSE 26332
// your_side := 0 else
26322: LD_ADDR_OWVAR 2
26326: PUSH
26327: LD_INT 0
26329: ST_TO_ADDR
26330: GO 26346
// your_side := your_side + 1 ;
26332: LD_ADDR_OWVAR 2
26336: PUSH
26337: LD_OWVAR 2
26341: PUSH
26342: LD_INT 1
26344: PLUS
26345: ST_TO_ADDR
// end ;
26346: LD_VAR 0 1
26350: RET
// export function hHackChangeUnitSide ; var i , j ; begin
26351: LD_INT 0
26353: PPUSH
26354: PPUSH
26355: PPUSH
// for i in all_units do
26356: LD_ADDR_VAR 0 2
26360: PUSH
26361: LD_OWVAR 3
26365: PUSH
26366: FOR_IN
26367: IFFALSE 26445
// if IsSelected ( i ) then
26369: LD_VAR 0 2
26373: PPUSH
26374: CALL_OW 306
26378: IFFALSE 26443
// begin j := GetSide ( i ) ;
26380: LD_ADDR_VAR 0 3
26384: PUSH
26385: LD_VAR 0 2
26389: PPUSH
26390: CALL_OW 255
26394: ST_TO_ADDR
// if j = 8 then
26395: LD_VAR 0 3
26399: PUSH
26400: LD_INT 8
26402: EQUAL
26403: IFFALSE 26415
// j := 0 else
26405: LD_ADDR_VAR 0 3
26409: PUSH
26410: LD_INT 0
26412: ST_TO_ADDR
26413: GO 26429
// j := j + 1 ;
26415: LD_ADDR_VAR 0 3
26419: PUSH
26420: LD_VAR 0 3
26424: PUSH
26425: LD_INT 1
26427: PLUS
26428: ST_TO_ADDR
// SetSide ( i , j ) ;
26429: LD_VAR 0 2
26433: PPUSH
26434: LD_VAR 0 3
26438: PPUSH
26439: CALL_OW 235
// end ;
26443: GO 26366
26445: POP
26446: POP
// end ;
26447: LD_VAR 0 1
26451: RET
// export function hHackFog ; begin
26452: LD_INT 0
26454: PPUSH
// FogOff ( true ) ;
26455: LD_INT 1
26457: PPUSH
26458: CALL_OW 344
// end ;
26462: LD_VAR 0 1
26466: RET
// export function hHackTeleport ( unit , x , y ) ; begin
26467: LD_INT 0
26469: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
26470: LD_VAR 0 1
26474: PPUSH
26475: LD_VAR 0 2
26479: PPUSH
26480: LD_VAR 0 3
26484: PPUSH
26485: LD_INT 1
26487: PPUSH
26488: LD_INT 1
26490: PPUSH
26491: CALL_OW 483
// CenterOnXY ( x , y ) ;
26495: LD_VAR 0 2
26499: PPUSH
26500: LD_VAR 0 3
26504: PPUSH
26505: CALL_OW 84
// end ;
26509: LD_VAR 0 4
26513: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
26514: LD_INT 0
26516: PPUSH
26517: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
26518: LD_VAR 0 1
26522: NOT
26523: PUSH
26524: LD_VAR 0 2
26528: PPUSH
26529: LD_VAR 0 3
26533: PPUSH
26534: CALL_OW 488
26538: NOT
26539: OR
26540: PUSH
26541: LD_VAR 0 1
26545: PPUSH
26546: CALL_OW 266
26550: PUSH
26551: LD_INT 3
26553: NONEQUAL
26554: PUSH
26555: LD_VAR 0 1
26559: PPUSH
26560: CALL_OW 247
26564: PUSH
26565: LD_INT 1
26567: EQUAL
26568: NOT
26569: AND
26570: OR
26571: IFFALSE 26575
// exit ;
26573: GO 26724
// if GetType ( factory ) = unit_human then
26575: LD_VAR 0 1
26579: PPUSH
26580: CALL_OW 247
26584: PUSH
26585: LD_INT 1
26587: EQUAL
26588: IFFALSE 26605
// factory := IsInUnit ( factory ) ;
26590: LD_ADDR_VAR 0 1
26594: PUSH
26595: LD_VAR 0 1
26599: PPUSH
26600: CALL_OW 310
26604: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
26605: LD_VAR 0 1
26609: PPUSH
26610: CALL_OW 266
26614: PUSH
26615: LD_INT 3
26617: NONEQUAL
26618: IFFALSE 26622
// exit ;
26620: GO 26724
// if HexInfo ( x , y ) = factory then
26622: LD_VAR 0 2
26626: PPUSH
26627: LD_VAR 0 3
26631: PPUSH
26632: CALL_OW 428
26636: PUSH
26637: LD_VAR 0 1
26641: EQUAL
26642: IFFALSE 26669
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
26644: LD_ADDR_EXP 79
26648: PUSH
26649: LD_EXP 79
26653: PPUSH
26654: LD_VAR 0 1
26658: PPUSH
26659: LD_INT 0
26661: PPUSH
26662: CALL_OW 1
26666: ST_TO_ADDR
26667: GO 26720
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
26669: LD_ADDR_EXP 79
26673: PUSH
26674: LD_EXP 79
26678: PPUSH
26679: LD_VAR 0 1
26683: PPUSH
26684: LD_VAR 0 1
26688: PPUSH
26689: CALL_OW 255
26693: PUSH
26694: LD_VAR 0 1
26698: PUSH
26699: LD_VAR 0 2
26703: PUSH
26704: LD_VAR 0 3
26708: PUSH
26709: EMPTY
26710: LIST
26711: LIST
26712: LIST
26713: LIST
26714: PPUSH
26715: CALL_OW 1
26719: ST_TO_ADDR
// UpdateFactoryWaypoints ;
26720: CALL 26729 0 0
// end ;
26724: LD_VAR 0 4
26728: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
26729: LD_INT 0
26731: PPUSH
26732: PPUSH
26733: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
26734: LD_STRING resetFactoryWaypoint();
26736: PPUSH
26737: CALL_OW 559
// if factoryWaypoints then
26741: LD_EXP 79
26745: IFFALSE 26871
// begin list := PrepareArray ( factoryWaypoints ) ;
26747: LD_ADDR_VAR 0 3
26751: PUSH
26752: LD_EXP 79
26756: PPUSH
26757: CALL 73248 0 1
26761: ST_TO_ADDR
// for i := 1 to list do
26762: LD_ADDR_VAR 0 2
26766: PUSH
26767: DOUBLE
26768: LD_INT 1
26770: DEC
26771: ST_TO_ADDR
26772: LD_VAR 0 3
26776: PUSH
26777: FOR_TO
26778: IFFALSE 26869
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
26780: LD_STRING setFactoryWaypointXY(
26782: PUSH
26783: LD_VAR 0 3
26787: PUSH
26788: LD_VAR 0 2
26792: ARRAY
26793: PUSH
26794: LD_INT 1
26796: ARRAY
26797: STR
26798: PUSH
26799: LD_STRING ,
26801: STR
26802: PUSH
26803: LD_VAR 0 3
26807: PUSH
26808: LD_VAR 0 2
26812: ARRAY
26813: PUSH
26814: LD_INT 2
26816: ARRAY
26817: STR
26818: PUSH
26819: LD_STRING ,
26821: STR
26822: PUSH
26823: LD_VAR 0 3
26827: PUSH
26828: LD_VAR 0 2
26832: ARRAY
26833: PUSH
26834: LD_INT 3
26836: ARRAY
26837: STR
26838: PUSH
26839: LD_STRING ,
26841: STR
26842: PUSH
26843: LD_VAR 0 3
26847: PUSH
26848: LD_VAR 0 2
26852: ARRAY
26853: PUSH
26854: LD_INT 4
26856: ARRAY
26857: STR
26858: PUSH
26859: LD_STRING )
26861: STR
26862: PPUSH
26863: CALL_OW 559
26867: GO 26777
26869: POP
26870: POP
// end ; end ;
26871: LD_VAR 0 1
26875: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
26876: LD_INT 0
26878: PPUSH
// if HexInfo ( x , y ) = warehouse then
26879: LD_VAR 0 2
26883: PPUSH
26884: LD_VAR 0 3
26888: PPUSH
26889: CALL_OW 428
26893: PUSH
26894: LD_VAR 0 1
26898: EQUAL
26899: IFFALSE 26926
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
26901: LD_ADDR_EXP 80
26905: PUSH
26906: LD_EXP 80
26910: PPUSH
26911: LD_VAR 0 1
26915: PPUSH
26916: LD_INT 0
26918: PPUSH
26919: CALL_OW 1
26923: ST_TO_ADDR
26924: GO 26977
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
26926: LD_ADDR_EXP 80
26930: PUSH
26931: LD_EXP 80
26935: PPUSH
26936: LD_VAR 0 1
26940: PPUSH
26941: LD_VAR 0 1
26945: PPUSH
26946: CALL_OW 255
26950: PUSH
26951: LD_VAR 0 1
26955: PUSH
26956: LD_VAR 0 2
26960: PUSH
26961: LD_VAR 0 3
26965: PUSH
26966: EMPTY
26967: LIST
26968: LIST
26969: LIST
26970: LIST
26971: PPUSH
26972: CALL_OW 1
26976: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
26977: CALL 26986 0 0
// end ;
26981: LD_VAR 0 4
26985: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
26986: LD_INT 0
26988: PPUSH
26989: PPUSH
26990: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
26991: LD_STRING resetWarehouseGatheringPoints();
26993: PPUSH
26994: CALL_OW 559
// if warehouseGatheringPoints then
26998: LD_EXP 80
27002: IFFALSE 27128
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
27004: LD_ADDR_VAR 0 3
27008: PUSH
27009: LD_EXP 80
27013: PPUSH
27014: CALL 73248 0 1
27018: ST_TO_ADDR
// for i := 1 to list do
27019: LD_ADDR_VAR 0 2
27023: PUSH
27024: DOUBLE
27025: LD_INT 1
27027: DEC
27028: ST_TO_ADDR
27029: LD_VAR 0 3
27033: PUSH
27034: FOR_TO
27035: IFFALSE 27126
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
27037: LD_STRING setWarehouseGatheringPointXY(
27039: PUSH
27040: LD_VAR 0 3
27044: PUSH
27045: LD_VAR 0 2
27049: ARRAY
27050: PUSH
27051: LD_INT 1
27053: ARRAY
27054: STR
27055: PUSH
27056: LD_STRING ,
27058: STR
27059: PUSH
27060: LD_VAR 0 3
27064: PUSH
27065: LD_VAR 0 2
27069: ARRAY
27070: PUSH
27071: LD_INT 2
27073: ARRAY
27074: STR
27075: PUSH
27076: LD_STRING ,
27078: STR
27079: PUSH
27080: LD_VAR 0 3
27084: PUSH
27085: LD_VAR 0 2
27089: ARRAY
27090: PUSH
27091: LD_INT 3
27093: ARRAY
27094: STR
27095: PUSH
27096: LD_STRING ,
27098: STR
27099: PUSH
27100: LD_VAR 0 3
27104: PUSH
27105: LD_VAR 0 2
27109: ARRAY
27110: PUSH
27111: LD_INT 4
27113: ARRAY
27114: STR
27115: PUSH
27116: LD_STRING )
27118: STR
27119: PPUSH
27120: CALL_OW 559
27124: GO 27034
27126: POP
27127: POP
// end ; end ;
27128: LD_VAR 0 1
27132: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
27133: LD_EXP 80
27137: IFFALSE 27822
27139: GO 27141
27141: DISABLE
27142: LD_INT 0
27144: PPUSH
27145: PPUSH
27146: PPUSH
27147: PPUSH
27148: PPUSH
27149: PPUSH
27150: PPUSH
27151: PPUSH
27152: PPUSH
// begin enable ;
27153: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
27154: LD_ADDR_VAR 0 3
27158: PUSH
27159: LD_EXP 80
27163: PPUSH
27164: CALL 73248 0 1
27168: ST_TO_ADDR
// if not list then
27169: LD_VAR 0 3
27173: NOT
27174: IFFALSE 27178
// exit ;
27176: GO 27822
// for i := 1 to list do
27178: LD_ADDR_VAR 0 1
27182: PUSH
27183: DOUBLE
27184: LD_INT 1
27186: DEC
27187: ST_TO_ADDR
27188: LD_VAR 0 3
27192: PUSH
27193: FOR_TO
27194: IFFALSE 27820
// begin depot := list [ i ] [ 2 ] ;
27196: LD_ADDR_VAR 0 8
27200: PUSH
27201: LD_VAR 0 3
27205: PUSH
27206: LD_VAR 0 1
27210: ARRAY
27211: PUSH
27212: LD_INT 2
27214: ARRAY
27215: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
27216: LD_ADDR_VAR 0 5
27220: PUSH
27221: LD_VAR 0 3
27225: PUSH
27226: LD_VAR 0 1
27230: ARRAY
27231: PUSH
27232: LD_INT 1
27234: ARRAY
27235: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
27236: LD_VAR 0 8
27240: PPUSH
27241: CALL_OW 301
27245: PUSH
27246: LD_VAR 0 5
27250: PUSH
27251: LD_VAR 0 8
27255: PPUSH
27256: CALL_OW 255
27260: NONEQUAL
27261: OR
27262: IFFALSE 27291
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
27264: LD_ADDR_EXP 80
27268: PUSH
27269: LD_EXP 80
27273: PPUSH
27274: LD_VAR 0 8
27278: PPUSH
27279: LD_INT 0
27281: PPUSH
27282: CALL_OW 1
27286: ST_TO_ADDR
// exit ;
27287: POP
27288: POP
27289: GO 27822
// end ; x := list [ i ] [ 3 ] ;
27291: LD_ADDR_VAR 0 6
27295: PUSH
27296: LD_VAR 0 3
27300: PUSH
27301: LD_VAR 0 1
27305: ARRAY
27306: PUSH
27307: LD_INT 3
27309: ARRAY
27310: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
27311: LD_ADDR_VAR 0 7
27315: PUSH
27316: LD_VAR 0 3
27320: PUSH
27321: LD_VAR 0 1
27325: ARRAY
27326: PUSH
27327: LD_INT 4
27329: ARRAY
27330: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
27331: LD_ADDR_VAR 0 9
27335: PUSH
27336: LD_VAR 0 6
27340: PPUSH
27341: LD_VAR 0 7
27345: PPUSH
27346: LD_INT 16
27348: PPUSH
27349: CALL 71836 0 3
27353: ST_TO_ADDR
// if not cratesNearbyPoint then
27354: LD_VAR 0 9
27358: NOT
27359: IFFALSE 27365
// exit ;
27361: POP
27362: POP
27363: GO 27822
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
27365: LD_ADDR_VAR 0 4
27369: PUSH
27370: LD_INT 22
27372: PUSH
27373: LD_VAR 0 5
27377: PUSH
27378: EMPTY
27379: LIST
27380: LIST
27381: PUSH
27382: LD_INT 3
27384: PUSH
27385: LD_INT 60
27387: PUSH
27388: EMPTY
27389: LIST
27390: PUSH
27391: EMPTY
27392: LIST
27393: LIST
27394: PUSH
27395: LD_INT 91
27397: PUSH
27398: LD_VAR 0 8
27402: PUSH
27403: LD_INT 6
27405: PUSH
27406: EMPTY
27407: LIST
27408: LIST
27409: LIST
27410: PUSH
27411: LD_INT 2
27413: PUSH
27414: LD_INT 25
27416: PUSH
27417: LD_INT 2
27419: PUSH
27420: EMPTY
27421: LIST
27422: LIST
27423: PUSH
27424: LD_INT 25
27426: PUSH
27427: LD_INT 16
27429: PUSH
27430: EMPTY
27431: LIST
27432: LIST
27433: PUSH
27434: EMPTY
27435: LIST
27436: LIST
27437: LIST
27438: PUSH
27439: EMPTY
27440: LIST
27441: LIST
27442: LIST
27443: LIST
27444: PPUSH
27445: CALL_OW 69
27449: PUSH
27450: LD_VAR 0 8
27454: PPUSH
27455: CALL_OW 313
27459: PPUSH
27460: LD_INT 3
27462: PUSH
27463: LD_INT 60
27465: PUSH
27466: EMPTY
27467: LIST
27468: PUSH
27469: EMPTY
27470: LIST
27471: LIST
27472: PUSH
27473: LD_INT 2
27475: PUSH
27476: LD_INT 25
27478: PUSH
27479: LD_INT 2
27481: PUSH
27482: EMPTY
27483: LIST
27484: LIST
27485: PUSH
27486: LD_INT 25
27488: PUSH
27489: LD_INT 16
27491: PUSH
27492: EMPTY
27493: LIST
27494: LIST
27495: PUSH
27496: EMPTY
27497: LIST
27498: LIST
27499: LIST
27500: PUSH
27501: EMPTY
27502: LIST
27503: LIST
27504: PPUSH
27505: CALL_OW 72
27509: UNION
27510: ST_TO_ADDR
// if tmp then
27511: LD_VAR 0 4
27515: IFFALSE 27595
// begin tmp := ShrinkArray ( tmp , 3 ) ;
27517: LD_ADDR_VAR 0 4
27521: PUSH
27522: LD_VAR 0 4
27526: PPUSH
27527: LD_INT 3
27529: PPUSH
27530: CALL 69805 0 2
27534: ST_TO_ADDR
// for j in tmp do
27535: LD_ADDR_VAR 0 2
27539: PUSH
27540: LD_VAR 0 4
27544: PUSH
27545: FOR_IN
27546: IFFALSE 27589
// begin if IsInUnit ( j ) then
27548: LD_VAR 0 2
27552: PPUSH
27553: CALL_OW 310
27557: IFFALSE 27568
// ComExit ( j ) ;
27559: LD_VAR 0 2
27563: PPUSH
27564: CALL 69888 0 1
// AddComCollect ( j , x , y ) ;
27568: LD_VAR 0 2
27572: PPUSH
27573: LD_VAR 0 6
27577: PPUSH
27578: LD_VAR 0 7
27582: PPUSH
27583: CALL_OW 177
// end ;
27587: GO 27545
27589: POP
27590: POP
// exit ;
27591: POP
27592: POP
27593: GO 27822
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
27595: LD_ADDR_VAR 0 4
27599: PUSH
27600: LD_INT 22
27602: PUSH
27603: LD_VAR 0 5
27607: PUSH
27608: EMPTY
27609: LIST
27610: LIST
27611: PUSH
27612: LD_INT 91
27614: PUSH
27615: LD_VAR 0 8
27619: PUSH
27620: LD_INT 8
27622: PUSH
27623: EMPTY
27624: LIST
27625: LIST
27626: LIST
27627: PUSH
27628: LD_INT 2
27630: PUSH
27631: LD_INT 34
27633: PUSH
27634: LD_INT 12
27636: PUSH
27637: EMPTY
27638: LIST
27639: LIST
27640: PUSH
27641: LD_INT 34
27643: PUSH
27644: LD_INT 51
27646: PUSH
27647: EMPTY
27648: LIST
27649: LIST
27650: PUSH
27651: LD_INT 34
27653: PUSH
27654: LD_INT 32
27656: PUSH
27657: EMPTY
27658: LIST
27659: LIST
27660: PUSH
27661: LD_INT 34
27663: PUSH
27664: LD_INT 89
27666: PUSH
27667: EMPTY
27668: LIST
27669: LIST
27670: PUSH
27671: EMPTY
27672: LIST
27673: LIST
27674: LIST
27675: LIST
27676: LIST
27677: PUSH
27678: EMPTY
27679: LIST
27680: LIST
27681: LIST
27682: PPUSH
27683: CALL_OW 69
27687: ST_TO_ADDR
// if tmp then
27688: LD_VAR 0 4
27692: IFFALSE 27818
// begin for j in tmp do
27694: LD_ADDR_VAR 0 2
27698: PUSH
27699: LD_VAR 0 4
27703: PUSH
27704: FOR_IN
27705: IFFALSE 27816
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
27707: LD_VAR 0 2
27711: PPUSH
27712: CALL_OW 262
27716: PUSH
27717: LD_INT 3
27719: EQUAL
27720: PUSH
27721: LD_VAR 0 2
27725: PPUSH
27726: CALL_OW 261
27730: PUSH
27731: LD_INT 20
27733: GREATER
27734: OR
27735: PUSH
27736: LD_VAR 0 2
27740: PPUSH
27741: CALL_OW 314
27745: NOT
27746: AND
27747: PUSH
27748: LD_VAR 0 2
27752: PPUSH
27753: CALL_OW 263
27757: PUSH
27758: LD_INT 1
27760: NONEQUAL
27761: PUSH
27762: LD_VAR 0 2
27766: PPUSH
27767: CALL_OW 311
27771: OR
27772: AND
27773: IFFALSE 27814
// begin ComCollect ( j , x , y ) ;
27775: LD_VAR 0 2
27779: PPUSH
27780: LD_VAR 0 6
27784: PPUSH
27785: LD_VAR 0 7
27789: PPUSH
27790: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
27794: LD_VAR 0 2
27798: PPUSH
27799: LD_VAR 0 8
27803: PPUSH
27804: CALL_OW 172
// exit ;
27808: POP
27809: POP
27810: POP
27811: POP
27812: GO 27822
// end ;
27814: GO 27704
27816: POP
27817: POP
// end ; end ;
27818: GO 27193
27820: POP
27821: POP
// end ; end_of_file
27822: PPOPN 9
27824: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
27825: LD_INT 0
27827: PPUSH
27828: PPUSH
27829: PPUSH
27830: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
27831: LD_VAR 0 1
27835: PPUSH
27836: CALL_OW 264
27840: PUSH
27841: LD_INT 91
27843: EQUAL
27844: IFFALSE 27916
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
27846: LD_INT 68
27848: PPUSH
27849: LD_VAR 0 1
27853: PPUSH
27854: CALL_OW 255
27858: PPUSH
27859: CALL_OW 321
27863: PUSH
27864: LD_INT 2
27866: EQUAL
27867: IFFALSE 27879
// eff := 70 else
27869: LD_ADDR_VAR 0 4
27873: PUSH
27874: LD_INT 70
27876: ST_TO_ADDR
27877: GO 27887
// eff := 30 ;
27879: LD_ADDR_VAR 0 4
27883: PUSH
27884: LD_INT 30
27886: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
27887: LD_VAR 0 1
27891: PPUSH
27892: CALL_OW 250
27896: PPUSH
27897: LD_VAR 0 1
27901: PPUSH
27902: CALL_OW 251
27906: PPUSH
27907: LD_VAR 0 4
27911: PPUSH
27912: CALL_OW 495
// end ; end ;
27916: LD_VAR 0 2
27920: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
27921: LD_INT 0
27923: PPUSH
// end ;
27924: LD_VAR 0 4
27928: RET
// export function SOS_Command ( cmd ) ; begin
27929: LD_INT 0
27931: PPUSH
// end ;
27932: LD_VAR 0 2
27936: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
27937: LD_INT 0
27939: PPUSH
// end ;
27940: LD_VAR 0 6
27944: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
27945: LD_INT 0
27947: PPUSH
27948: PPUSH
// if not vehicle or not factory then
27949: LD_VAR 0 1
27953: NOT
27954: PUSH
27955: LD_VAR 0 2
27959: NOT
27960: OR
27961: IFFALSE 27965
// exit ;
27963: GO 28196
// if factoryWaypoints >= factory then
27965: LD_EXP 79
27969: PUSH
27970: LD_VAR 0 2
27974: GREATEREQUAL
27975: IFFALSE 28196
// if factoryWaypoints [ factory ] then
27977: LD_EXP 79
27981: PUSH
27982: LD_VAR 0 2
27986: ARRAY
27987: IFFALSE 28196
// begin if GetControl ( vehicle ) = control_manual then
27989: LD_VAR 0 1
27993: PPUSH
27994: CALL_OW 263
27998: PUSH
27999: LD_INT 1
28001: EQUAL
28002: IFFALSE 28083
// begin driver := IsDrivenBy ( vehicle ) ;
28004: LD_ADDR_VAR 0 4
28008: PUSH
28009: LD_VAR 0 1
28013: PPUSH
28014: CALL_OW 311
28018: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
28019: LD_VAR 0 4
28023: PPUSH
28024: LD_EXP 79
28028: PUSH
28029: LD_VAR 0 2
28033: ARRAY
28034: PUSH
28035: LD_INT 3
28037: ARRAY
28038: PPUSH
28039: LD_EXP 79
28043: PUSH
28044: LD_VAR 0 2
28048: ARRAY
28049: PUSH
28050: LD_INT 4
28052: ARRAY
28053: PPUSH
28054: CALL_OW 171
// AddComExitVehicle ( driver ) ;
28058: LD_VAR 0 4
28062: PPUSH
28063: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
28067: LD_VAR 0 4
28071: PPUSH
28072: LD_VAR 0 2
28076: PPUSH
28077: CALL_OW 180
// end else
28081: GO 28196
// if GetControl ( vehicle ) = control_remote then
28083: LD_VAR 0 1
28087: PPUSH
28088: CALL_OW 263
28092: PUSH
28093: LD_INT 2
28095: EQUAL
28096: IFFALSE 28157
// begin wait ( 0 0$2 ) ;
28098: LD_INT 70
28100: PPUSH
28101: CALL_OW 67
// if Connect ( vehicle ) then
28105: LD_VAR 0 1
28109: PPUSH
28110: CALL 40220 0 1
28114: IFFALSE 28155
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
28116: LD_VAR 0 1
28120: PPUSH
28121: LD_EXP 79
28125: PUSH
28126: LD_VAR 0 2
28130: ARRAY
28131: PUSH
28132: LD_INT 3
28134: ARRAY
28135: PPUSH
28136: LD_EXP 79
28140: PUSH
28141: LD_VAR 0 2
28145: ARRAY
28146: PUSH
28147: LD_INT 4
28149: ARRAY
28150: PPUSH
28151: CALL_OW 171
// end else
28155: GO 28196
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
28157: LD_VAR 0 1
28161: PPUSH
28162: LD_EXP 79
28166: PUSH
28167: LD_VAR 0 2
28171: ARRAY
28172: PUSH
28173: LD_INT 3
28175: ARRAY
28176: PPUSH
28177: LD_EXP 79
28181: PUSH
28182: LD_VAR 0 2
28186: ARRAY
28187: PUSH
28188: LD_INT 4
28190: ARRAY
28191: PPUSH
28192: CALL_OW 171
// end ; end ;
28196: LD_VAR 0 3
28200: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
28201: LD_INT 0
28203: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
28204: LD_VAR 0 1
28208: PUSH
28209: LD_INT 250
28211: EQUAL
28212: PUSH
28213: LD_VAR 0 2
28217: PPUSH
28218: CALL_OW 264
28222: PUSH
28223: LD_INT 81
28225: EQUAL
28226: AND
28227: IFFALSE 28248
// MinerPlaceMine ( unit , x , y ) ;
28229: LD_VAR 0 2
28233: PPUSH
28234: LD_VAR 0 4
28238: PPUSH
28239: LD_VAR 0 5
28243: PPUSH
28244: CALL 30633 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
28248: LD_VAR 0 1
28252: PUSH
28253: LD_INT 251
28255: EQUAL
28256: PUSH
28257: LD_VAR 0 2
28261: PPUSH
28262: CALL_OW 264
28266: PUSH
28267: LD_INT 81
28269: EQUAL
28270: AND
28271: IFFALSE 28292
// MinerDetonateMine ( unit , x , y ) ;
28273: LD_VAR 0 2
28277: PPUSH
28278: LD_VAR 0 4
28282: PPUSH
28283: LD_VAR 0 5
28287: PPUSH
28288: CALL 30908 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
28292: LD_VAR 0 1
28296: PUSH
28297: LD_INT 252
28299: EQUAL
28300: PUSH
28301: LD_VAR 0 2
28305: PPUSH
28306: CALL_OW 264
28310: PUSH
28311: LD_INT 81
28313: EQUAL
28314: AND
28315: IFFALSE 28336
// MinerCreateMinefield ( unit , x , y ) ;
28317: LD_VAR 0 2
28321: PPUSH
28322: LD_VAR 0 4
28326: PPUSH
28327: LD_VAR 0 5
28331: PPUSH
28332: CALL 31325 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
28336: LD_VAR 0 1
28340: PUSH
28341: LD_INT 253
28343: EQUAL
28344: PUSH
28345: LD_VAR 0 2
28349: PPUSH
28350: CALL_OW 257
28354: PUSH
28355: LD_INT 5
28357: EQUAL
28358: AND
28359: IFFALSE 28380
// ComBinocular ( unit , x , y ) ;
28361: LD_VAR 0 2
28365: PPUSH
28366: LD_VAR 0 4
28370: PPUSH
28371: LD_VAR 0 5
28375: PPUSH
28376: CALL 31694 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
28380: LD_VAR 0 1
28384: PUSH
28385: LD_INT 254
28387: EQUAL
28388: PUSH
28389: LD_VAR 0 2
28393: PPUSH
28394: CALL_OW 264
28398: PUSH
28399: LD_INT 99
28401: EQUAL
28402: AND
28403: PUSH
28404: LD_VAR 0 3
28408: PPUSH
28409: CALL_OW 263
28413: PUSH
28414: LD_INT 3
28416: EQUAL
28417: AND
28418: IFFALSE 28434
// HackDestroyVehicle ( unit , selectedUnit ) ;
28420: LD_VAR 0 2
28424: PPUSH
28425: LD_VAR 0 3
28429: PPUSH
28430: CALL 29997 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
28434: LD_VAR 0 1
28438: PUSH
28439: LD_INT 255
28441: EQUAL
28442: PUSH
28443: LD_VAR 0 2
28447: PPUSH
28448: CALL_OW 264
28452: PUSH
28453: LD_INT 14
28455: PUSH
28456: LD_INT 53
28458: PUSH
28459: EMPTY
28460: LIST
28461: LIST
28462: IN
28463: AND
28464: PUSH
28465: LD_VAR 0 4
28469: PPUSH
28470: LD_VAR 0 5
28474: PPUSH
28475: CALL_OW 488
28479: AND
28480: IFFALSE 28504
// CutTreeXYR ( unit , x , y , 12 ) ;
28482: LD_VAR 0 2
28486: PPUSH
28487: LD_VAR 0 4
28491: PPUSH
28492: LD_VAR 0 5
28496: PPUSH
28497: LD_INT 12
28499: PPUSH
28500: CALL 28567 0 4
// if cmd = 256 then
28504: LD_VAR 0 1
28508: PUSH
28509: LD_INT 256
28511: EQUAL
28512: IFFALSE 28533
// SetFactoryWaypoint ( unit , x , y ) ;
28514: LD_VAR 0 2
28518: PPUSH
28519: LD_VAR 0 4
28523: PPUSH
28524: LD_VAR 0 5
28528: PPUSH
28529: CALL 26514 0 3
// if cmd = 257 then
28533: LD_VAR 0 1
28537: PUSH
28538: LD_INT 257
28540: EQUAL
28541: IFFALSE 28562
// SetWarehouseGatheringPoint ( unit , x , y ) ;
28543: LD_VAR 0 2
28547: PPUSH
28548: LD_VAR 0 4
28552: PPUSH
28553: LD_VAR 0 5
28557: PPUSH
28558: CALL 26876 0 3
// end ;
28562: LD_VAR 0 6
28566: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
28567: LD_INT 0
28569: PPUSH
28570: PPUSH
28571: PPUSH
28572: PPUSH
28573: PPUSH
28574: PPUSH
28575: PPUSH
28576: PPUSH
28577: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
28578: LD_VAR 0 1
28582: NOT
28583: PUSH
28584: LD_VAR 0 2
28588: PPUSH
28589: LD_VAR 0 3
28593: PPUSH
28594: CALL_OW 488
28598: NOT
28599: OR
28600: PUSH
28601: LD_VAR 0 4
28605: NOT
28606: OR
28607: IFFALSE 28611
// exit ;
28609: GO 28951
// list := [ ] ;
28611: LD_ADDR_VAR 0 13
28615: PUSH
28616: EMPTY
28617: ST_TO_ADDR
// if x - r < 0 then
28618: LD_VAR 0 2
28622: PUSH
28623: LD_VAR 0 4
28627: MINUS
28628: PUSH
28629: LD_INT 0
28631: LESS
28632: IFFALSE 28644
// min_x := 0 else
28634: LD_ADDR_VAR 0 7
28638: PUSH
28639: LD_INT 0
28641: ST_TO_ADDR
28642: GO 28660
// min_x := x - r ;
28644: LD_ADDR_VAR 0 7
28648: PUSH
28649: LD_VAR 0 2
28653: PUSH
28654: LD_VAR 0 4
28658: MINUS
28659: ST_TO_ADDR
// if y - r < 0 then
28660: LD_VAR 0 3
28664: PUSH
28665: LD_VAR 0 4
28669: MINUS
28670: PUSH
28671: LD_INT 0
28673: LESS
28674: IFFALSE 28686
// min_y := 0 else
28676: LD_ADDR_VAR 0 8
28680: PUSH
28681: LD_INT 0
28683: ST_TO_ADDR
28684: GO 28702
// min_y := y - r ;
28686: LD_ADDR_VAR 0 8
28690: PUSH
28691: LD_VAR 0 3
28695: PUSH
28696: LD_VAR 0 4
28700: MINUS
28701: ST_TO_ADDR
// max_x := x + r ;
28702: LD_ADDR_VAR 0 9
28706: PUSH
28707: LD_VAR 0 2
28711: PUSH
28712: LD_VAR 0 4
28716: PLUS
28717: ST_TO_ADDR
// max_y := y + r ;
28718: LD_ADDR_VAR 0 10
28722: PUSH
28723: LD_VAR 0 3
28727: PUSH
28728: LD_VAR 0 4
28732: PLUS
28733: ST_TO_ADDR
// for _x = min_x to max_x do
28734: LD_ADDR_VAR 0 11
28738: PUSH
28739: DOUBLE
28740: LD_VAR 0 7
28744: DEC
28745: ST_TO_ADDR
28746: LD_VAR 0 9
28750: PUSH
28751: FOR_TO
28752: IFFALSE 28869
// for _y = min_y to max_y do
28754: LD_ADDR_VAR 0 12
28758: PUSH
28759: DOUBLE
28760: LD_VAR 0 8
28764: DEC
28765: ST_TO_ADDR
28766: LD_VAR 0 10
28770: PUSH
28771: FOR_TO
28772: IFFALSE 28865
// begin if not ValidHex ( _x , _y ) then
28774: LD_VAR 0 11
28778: PPUSH
28779: LD_VAR 0 12
28783: PPUSH
28784: CALL_OW 488
28788: NOT
28789: IFFALSE 28793
// continue ;
28791: GO 28771
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
28793: LD_VAR 0 11
28797: PPUSH
28798: LD_VAR 0 12
28802: PPUSH
28803: CALL_OW 351
28807: PUSH
28808: LD_VAR 0 11
28812: PPUSH
28813: LD_VAR 0 12
28817: PPUSH
28818: CALL_OW 554
28822: AND
28823: IFFALSE 28863
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
28825: LD_ADDR_VAR 0 13
28829: PUSH
28830: LD_VAR 0 13
28834: PPUSH
28835: LD_VAR 0 13
28839: PUSH
28840: LD_INT 1
28842: PLUS
28843: PPUSH
28844: LD_VAR 0 11
28848: PUSH
28849: LD_VAR 0 12
28853: PUSH
28854: EMPTY
28855: LIST
28856: LIST
28857: PPUSH
28858: CALL_OW 2
28862: ST_TO_ADDR
// end ;
28863: GO 28771
28865: POP
28866: POP
28867: GO 28751
28869: POP
28870: POP
// if not list then
28871: LD_VAR 0 13
28875: NOT
28876: IFFALSE 28880
// exit ;
28878: GO 28951
// for i in list do
28880: LD_ADDR_VAR 0 6
28884: PUSH
28885: LD_VAR 0 13
28889: PUSH
28890: FOR_IN
28891: IFFALSE 28949
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
28893: LD_VAR 0 1
28897: PPUSH
28898: LD_STRING M
28900: PUSH
28901: LD_VAR 0 6
28905: PUSH
28906: LD_INT 1
28908: ARRAY
28909: PUSH
28910: LD_VAR 0 6
28914: PUSH
28915: LD_INT 2
28917: ARRAY
28918: PUSH
28919: LD_INT 0
28921: PUSH
28922: LD_INT 0
28924: PUSH
28925: LD_INT 0
28927: PUSH
28928: LD_INT 0
28930: PUSH
28931: EMPTY
28932: LIST
28933: LIST
28934: LIST
28935: LIST
28936: LIST
28937: LIST
28938: LIST
28939: PUSH
28940: EMPTY
28941: LIST
28942: PPUSH
28943: CALL_OW 447
28947: GO 28890
28949: POP
28950: POP
// end ;
28951: LD_VAR 0 5
28955: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
28956: LD_EXP 82
28960: NOT
28961: IFFALSE 29011
28963: GO 28965
28965: DISABLE
// begin initHack := true ;
28966: LD_ADDR_EXP 82
28970: PUSH
28971: LD_INT 1
28973: ST_TO_ADDR
// hackTanks := [ ] ;
28974: LD_ADDR_EXP 83
28978: PUSH
28979: EMPTY
28980: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
28981: LD_ADDR_EXP 84
28985: PUSH
28986: EMPTY
28987: ST_TO_ADDR
// hackLimit := 3 ;
28988: LD_ADDR_EXP 85
28992: PUSH
28993: LD_INT 3
28995: ST_TO_ADDR
// hackDist := 12 ;
28996: LD_ADDR_EXP 86
29000: PUSH
29001: LD_INT 12
29003: ST_TO_ADDR
// hackCounter := [ ] ;
29004: LD_ADDR_EXP 87
29008: PUSH
29009: EMPTY
29010: ST_TO_ADDR
// end ;
29011: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
29012: LD_EXP 82
29016: PUSH
29017: LD_INT 34
29019: PUSH
29020: LD_INT 99
29022: PUSH
29023: EMPTY
29024: LIST
29025: LIST
29026: PPUSH
29027: CALL_OW 69
29031: AND
29032: IFFALSE 29285
29034: GO 29036
29036: DISABLE
29037: LD_INT 0
29039: PPUSH
29040: PPUSH
// begin enable ;
29041: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
29042: LD_ADDR_VAR 0 1
29046: PUSH
29047: LD_INT 34
29049: PUSH
29050: LD_INT 99
29052: PUSH
29053: EMPTY
29054: LIST
29055: LIST
29056: PPUSH
29057: CALL_OW 69
29061: PUSH
29062: FOR_IN
29063: IFFALSE 29283
// begin if not i in hackTanks then
29065: LD_VAR 0 1
29069: PUSH
29070: LD_EXP 83
29074: IN
29075: NOT
29076: IFFALSE 29159
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
29078: LD_ADDR_EXP 83
29082: PUSH
29083: LD_EXP 83
29087: PPUSH
29088: LD_EXP 83
29092: PUSH
29093: LD_INT 1
29095: PLUS
29096: PPUSH
29097: LD_VAR 0 1
29101: PPUSH
29102: CALL_OW 1
29106: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
29107: LD_ADDR_EXP 84
29111: PUSH
29112: LD_EXP 84
29116: PPUSH
29117: LD_EXP 84
29121: PUSH
29122: LD_INT 1
29124: PLUS
29125: PPUSH
29126: EMPTY
29127: PPUSH
29128: CALL_OW 1
29132: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
29133: LD_ADDR_EXP 87
29137: PUSH
29138: LD_EXP 87
29142: PPUSH
29143: LD_EXP 87
29147: PUSH
29148: LD_INT 1
29150: PLUS
29151: PPUSH
29152: EMPTY
29153: PPUSH
29154: CALL_OW 1
29158: ST_TO_ADDR
// end ; if not IsOk ( i ) then
29159: LD_VAR 0 1
29163: PPUSH
29164: CALL_OW 302
29168: NOT
29169: IFFALSE 29182
// begin HackUnlinkAll ( i ) ;
29171: LD_VAR 0 1
29175: PPUSH
29176: CALL 29288 0 1
// continue ;
29180: GO 29062
// end ; HackCheckCapturedStatus ( i ) ;
29182: LD_VAR 0 1
29186: PPUSH
29187: CALL 29731 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
29191: LD_ADDR_VAR 0 2
29195: PUSH
29196: LD_INT 81
29198: PUSH
29199: LD_VAR 0 1
29203: PPUSH
29204: CALL_OW 255
29208: PUSH
29209: EMPTY
29210: LIST
29211: LIST
29212: PUSH
29213: LD_INT 33
29215: PUSH
29216: LD_INT 3
29218: PUSH
29219: EMPTY
29220: LIST
29221: LIST
29222: PUSH
29223: LD_INT 91
29225: PUSH
29226: LD_VAR 0 1
29230: PUSH
29231: LD_EXP 86
29235: PUSH
29236: EMPTY
29237: LIST
29238: LIST
29239: LIST
29240: PUSH
29241: LD_INT 50
29243: PUSH
29244: EMPTY
29245: LIST
29246: PUSH
29247: EMPTY
29248: LIST
29249: LIST
29250: LIST
29251: LIST
29252: PPUSH
29253: CALL_OW 69
29257: ST_TO_ADDR
// if not tmp then
29258: LD_VAR 0 2
29262: NOT
29263: IFFALSE 29267
// continue ;
29265: GO 29062
// HackLink ( i , tmp ) ;
29267: LD_VAR 0 1
29271: PPUSH
29272: LD_VAR 0 2
29276: PPUSH
29277: CALL 29424 0 2
// end ;
29281: GO 29062
29283: POP
29284: POP
// end ;
29285: PPOPN 2
29287: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
29288: LD_INT 0
29290: PPUSH
29291: PPUSH
29292: PPUSH
// if not hack in hackTanks then
29293: LD_VAR 0 1
29297: PUSH
29298: LD_EXP 83
29302: IN
29303: NOT
29304: IFFALSE 29308
// exit ;
29306: GO 29419
// index := GetElementIndex ( hackTanks , hack ) ;
29308: LD_ADDR_VAR 0 4
29312: PUSH
29313: LD_EXP 83
29317: PPUSH
29318: LD_VAR 0 1
29322: PPUSH
29323: CALL 37036 0 2
29327: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
29328: LD_EXP 84
29332: PUSH
29333: LD_VAR 0 4
29337: ARRAY
29338: IFFALSE 29419
// begin for i in hackTanksCaptured [ index ] do
29340: LD_ADDR_VAR 0 3
29344: PUSH
29345: LD_EXP 84
29349: PUSH
29350: LD_VAR 0 4
29354: ARRAY
29355: PUSH
29356: FOR_IN
29357: IFFALSE 29383
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
29359: LD_VAR 0 3
29363: PUSH
29364: LD_INT 1
29366: ARRAY
29367: PPUSH
29368: LD_VAR 0 3
29372: PUSH
29373: LD_INT 2
29375: ARRAY
29376: PPUSH
29377: CALL_OW 235
29381: GO 29356
29383: POP
29384: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
29385: LD_ADDR_EXP 84
29389: PUSH
29390: LD_EXP 84
29394: PPUSH
29395: LD_VAR 0 4
29399: PPUSH
29400: EMPTY
29401: PPUSH
29402: CALL_OW 1
29406: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
29407: LD_VAR 0 1
29411: PPUSH
29412: LD_INT 0
29414: PPUSH
29415: CALL_OW 505
// end ; end ;
29419: LD_VAR 0 2
29423: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
29424: LD_INT 0
29426: PPUSH
29427: PPUSH
29428: PPUSH
// if not hack in hackTanks or not vehicles then
29429: LD_VAR 0 1
29433: PUSH
29434: LD_EXP 83
29438: IN
29439: NOT
29440: PUSH
29441: LD_VAR 0 2
29445: NOT
29446: OR
29447: IFFALSE 29451
// exit ;
29449: GO 29726
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
29451: LD_ADDR_VAR 0 2
29455: PUSH
29456: LD_VAR 0 1
29460: PPUSH
29461: LD_VAR 0 2
29465: PPUSH
29466: LD_INT 1
29468: PPUSH
29469: LD_INT 1
29471: PPUSH
29472: CALL 37686 0 4
29476: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
29477: LD_ADDR_VAR 0 5
29481: PUSH
29482: LD_EXP 83
29486: PPUSH
29487: LD_VAR 0 1
29491: PPUSH
29492: CALL 37036 0 2
29496: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
29497: LD_EXP 84
29501: PUSH
29502: LD_VAR 0 5
29506: ARRAY
29507: PUSH
29508: LD_EXP 85
29512: LESS
29513: IFFALSE 29702
// begin for i := 1 to vehicles do
29515: LD_ADDR_VAR 0 4
29519: PUSH
29520: DOUBLE
29521: LD_INT 1
29523: DEC
29524: ST_TO_ADDR
29525: LD_VAR 0 2
29529: PUSH
29530: FOR_TO
29531: IFFALSE 29700
// begin if hackTanksCaptured [ index ] = hackLimit then
29533: LD_EXP 84
29537: PUSH
29538: LD_VAR 0 5
29542: ARRAY
29543: PUSH
29544: LD_EXP 85
29548: EQUAL
29549: IFFALSE 29553
// break ;
29551: GO 29700
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
29553: LD_ADDR_EXP 87
29557: PUSH
29558: LD_EXP 87
29562: PPUSH
29563: LD_VAR 0 5
29567: PPUSH
29568: LD_EXP 87
29572: PUSH
29573: LD_VAR 0 5
29577: ARRAY
29578: PUSH
29579: LD_INT 1
29581: PLUS
29582: PPUSH
29583: CALL_OW 1
29587: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
29588: LD_ADDR_EXP 84
29592: PUSH
29593: LD_EXP 84
29597: PPUSH
29598: LD_VAR 0 5
29602: PUSH
29603: LD_EXP 84
29607: PUSH
29608: LD_VAR 0 5
29612: ARRAY
29613: PUSH
29614: LD_INT 1
29616: PLUS
29617: PUSH
29618: EMPTY
29619: LIST
29620: LIST
29621: PPUSH
29622: LD_VAR 0 2
29626: PUSH
29627: LD_VAR 0 4
29631: ARRAY
29632: PUSH
29633: LD_VAR 0 2
29637: PUSH
29638: LD_VAR 0 4
29642: ARRAY
29643: PPUSH
29644: CALL_OW 255
29648: PUSH
29649: EMPTY
29650: LIST
29651: LIST
29652: PPUSH
29653: CALL 37251 0 3
29657: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
29658: LD_VAR 0 2
29662: PUSH
29663: LD_VAR 0 4
29667: ARRAY
29668: PPUSH
29669: LD_VAR 0 1
29673: PPUSH
29674: CALL_OW 255
29678: PPUSH
29679: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
29683: LD_VAR 0 2
29687: PUSH
29688: LD_VAR 0 4
29692: ARRAY
29693: PPUSH
29694: CALL_OW 141
// end ;
29698: GO 29530
29700: POP
29701: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
29702: LD_VAR 0 1
29706: PPUSH
29707: LD_EXP 84
29711: PUSH
29712: LD_VAR 0 5
29716: ARRAY
29717: PUSH
29718: LD_INT 0
29720: PLUS
29721: PPUSH
29722: CALL_OW 505
// end ;
29726: LD_VAR 0 3
29730: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
29731: LD_INT 0
29733: PPUSH
29734: PPUSH
29735: PPUSH
29736: PPUSH
// if not hack in hackTanks then
29737: LD_VAR 0 1
29741: PUSH
29742: LD_EXP 83
29746: IN
29747: NOT
29748: IFFALSE 29752
// exit ;
29750: GO 29992
// index := GetElementIndex ( hackTanks , hack ) ;
29752: LD_ADDR_VAR 0 4
29756: PUSH
29757: LD_EXP 83
29761: PPUSH
29762: LD_VAR 0 1
29766: PPUSH
29767: CALL 37036 0 2
29771: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
29772: LD_ADDR_VAR 0 3
29776: PUSH
29777: DOUBLE
29778: LD_EXP 84
29782: PUSH
29783: LD_VAR 0 4
29787: ARRAY
29788: INC
29789: ST_TO_ADDR
29790: LD_INT 1
29792: PUSH
29793: FOR_DOWNTO
29794: IFFALSE 29966
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
29796: LD_ADDR_VAR 0 5
29800: PUSH
29801: LD_EXP 84
29805: PUSH
29806: LD_VAR 0 4
29810: ARRAY
29811: PUSH
29812: LD_VAR 0 3
29816: ARRAY
29817: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
29818: LD_VAR 0 5
29822: PUSH
29823: LD_INT 1
29825: ARRAY
29826: PPUSH
29827: CALL_OW 302
29831: NOT
29832: PUSH
29833: LD_VAR 0 5
29837: PUSH
29838: LD_INT 1
29840: ARRAY
29841: PPUSH
29842: CALL_OW 255
29846: PUSH
29847: LD_VAR 0 1
29851: PPUSH
29852: CALL_OW 255
29856: NONEQUAL
29857: OR
29858: IFFALSE 29964
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
29860: LD_VAR 0 5
29864: PUSH
29865: LD_INT 1
29867: ARRAY
29868: PPUSH
29869: CALL_OW 305
29873: PUSH
29874: LD_VAR 0 5
29878: PUSH
29879: LD_INT 1
29881: ARRAY
29882: PPUSH
29883: CALL_OW 255
29887: PUSH
29888: LD_VAR 0 1
29892: PPUSH
29893: CALL_OW 255
29897: EQUAL
29898: AND
29899: IFFALSE 29923
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
29901: LD_VAR 0 5
29905: PUSH
29906: LD_INT 1
29908: ARRAY
29909: PPUSH
29910: LD_VAR 0 5
29914: PUSH
29915: LD_INT 2
29917: ARRAY
29918: PPUSH
29919: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
29923: LD_ADDR_EXP 84
29927: PUSH
29928: LD_EXP 84
29932: PPUSH
29933: LD_VAR 0 4
29937: PPUSH
29938: LD_EXP 84
29942: PUSH
29943: LD_VAR 0 4
29947: ARRAY
29948: PPUSH
29949: LD_VAR 0 3
29953: PPUSH
29954: CALL_OW 3
29958: PPUSH
29959: CALL_OW 1
29963: ST_TO_ADDR
// end ; end ;
29964: GO 29793
29966: POP
29967: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
29968: LD_VAR 0 1
29972: PPUSH
29973: LD_EXP 84
29977: PUSH
29978: LD_VAR 0 4
29982: ARRAY
29983: PUSH
29984: LD_INT 0
29986: PLUS
29987: PPUSH
29988: CALL_OW 505
// end ;
29992: LD_VAR 0 2
29996: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
29997: LD_INT 0
29999: PPUSH
30000: PPUSH
30001: PPUSH
30002: PPUSH
// if not hack in hackTanks then
30003: LD_VAR 0 1
30007: PUSH
30008: LD_EXP 83
30012: IN
30013: NOT
30014: IFFALSE 30018
// exit ;
30016: GO 30103
// index := GetElementIndex ( hackTanks , hack ) ;
30018: LD_ADDR_VAR 0 5
30022: PUSH
30023: LD_EXP 83
30027: PPUSH
30028: LD_VAR 0 1
30032: PPUSH
30033: CALL 37036 0 2
30037: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
30038: LD_ADDR_VAR 0 4
30042: PUSH
30043: DOUBLE
30044: LD_INT 1
30046: DEC
30047: ST_TO_ADDR
30048: LD_EXP 84
30052: PUSH
30053: LD_VAR 0 5
30057: ARRAY
30058: PUSH
30059: FOR_TO
30060: IFFALSE 30101
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
30062: LD_EXP 84
30066: PUSH
30067: LD_VAR 0 5
30071: ARRAY
30072: PUSH
30073: LD_VAR 0 4
30077: ARRAY
30078: PUSH
30079: LD_INT 1
30081: ARRAY
30082: PUSH
30083: LD_VAR 0 2
30087: EQUAL
30088: IFFALSE 30099
// KillUnit ( vehicle ) ;
30090: LD_VAR 0 2
30094: PPUSH
30095: CALL_OW 66
30099: GO 30059
30101: POP
30102: POP
// end ;
30103: LD_VAR 0 3
30107: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
30108: LD_EXP 88
30112: NOT
30113: IFFALSE 30148
30115: GO 30117
30117: DISABLE
// begin initMiner := true ;
30118: LD_ADDR_EXP 88
30122: PUSH
30123: LD_INT 1
30125: ST_TO_ADDR
// minersList := [ ] ;
30126: LD_ADDR_EXP 89
30130: PUSH
30131: EMPTY
30132: ST_TO_ADDR
// minerMinesList := [ ] ;
30133: LD_ADDR_EXP 90
30137: PUSH
30138: EMPTY
30139: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
30140: LD_ADDR_EXP 91
30144: PUSH
30145: LD_INT 5
30147: ST_TO_ADDR
// end ;
30148: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
30149: LD_EXP 88
30153: PUSH
30154: LD_INT 34
30156: PUSH
30157: LD_INT 81
30159: PUSH
30160: EMPTY
30161: LIST
30162: LIST
30163: PPUSH
30164: CALL_OW 69
30168: AND
30169: IFFALSE 30630
30171: GO 30173
30173: DISABLE
30174: LD_INT 0
30176: PPUSH
30177: PPUSH
30178: PPUSH
30179: PPUSH
// begin enable ;
30180: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
30181: LD_ADDR_VAR 0 1
30185: PUSH
30186: LD_INT 34
30188: PUSH
30189: LD_INT 81
30191: PUSH
30192: EMPTY
30193: LIST
30194: LIST
30195: PPUSH
30196: CALL_OW 69
30200: PUSH
30201: FOR_IN
30202: IFFALSE 30274
// begin if not i in minersList then
30204: LD_VAR 0 1
30208: PUSH
30209: LD_EXP 89
30213: IN
30214: NOT
30215: IFFALSE 30272
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
30217: LD_ADDR_EXP 89
30221: PUSH
30222: LD_EXP 89
30226: PPUSH
30227: LD_EXP 89
30231: PUSH
30232: LD_INT 1
30234: PLUS
30235: PPUSH
30236: LD_VAR 0 1
30240: PPUSH
30241: CALL_OW 1
30245: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
30246: LD_ADDR_EXP 90
30250: PUSH
30251: LD_EXP 90
30255: PPUSH
30256: LD_EXP 90
30260: PUSH
30261: LD_INT 1
30263: PLUS
30264: PPUSH
30265: EMPTY
30266: PPUSH
30267: CALL_OW 1
30271: ST_TO_ADDR
// end end ;
30272: GO 30201
30274: POP
30275: POP
// for i := minerMinesList downto 1 do
30276: LD_ADDR_VAR 0 1
30280: PUSH
30281: DOUBLE
30282: LD_EXP 90
30286: INC
30287: ST_TO_ADDR
30288: LD_INT 1
30290: PUSH
30291: FOR_DOWNTO
30292: IFFALSE 30628
// begin if IsLive ( minersList [ i ] ) then
30294: LD_EXP 89
30298: PUSH
30299: LD_VAR 0 1
30303: ARRAY
30304: PPUSH
30305: CALL_OW 300
30309: IFFALSE 30337
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
30311: LD_EXP 89
30315: PUSH
30316: LD_VAR 0 1
30320: ARRAY
30321: PPUSH
30322: LD_EXP 90
30326: PUSH
30327: LD_VAR 0 1
30331: ARRAY
30332: PPUSH
30333: CALL_OW 505
// if not minerMinesList [ i ] then
30337: LD_EXP 90
30341: PUSH
30342: LD_VAR 0 1
30346: ARRAY
30347: NOT
30348: IFFALSE 30352
// continue ;
30350: GO 30291
// for j := minerMinesList [ i ] downto 1 do
30352: LD_ADDR_VAR 0 2
30356: PUSH
30357: DOUBLE
30358: LD_EXP 90
30362: PUSH
30363: LD_VAR 0 1
30367: ARRAY
30368: INC
30369: ST_TO_ADDR
30370: LD_INT 1
30372: PUSH
30373: FOR_DOWNTO
30374: IFFALSE 30624
// begin side := GetSide ( minersList [ i ] ) ;
30376: LD_ADDR_VAR 0 3
30380: PUSH
30381: LD_EXP 89
30385: PUSH
30386: LD_VAR 0 1
30390: ARRAY
30391: PPUSH
30392: CALL_OW 255
30396: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
30397: LD_ADDR_VAR 0 4
30401: PUSH
30402: LD_EXP 90
30406: PUSH
30407: LD_VAR 0 1
30411: ARRAY
30412: PUSH
30413: LD_VAR 0 2
30417: ARRAY
30418: PUSH
30419: LD_INT 1
30421: ARRAY
30422: PPUSH
30423: LD_EXP 90
30427: PUSH
30428: LD_VAR 0 1
30432: ARRAY
30433: PUSH
30434: LD_VAR 0 2
30438: ARRAY
30439: PUSH
30440: LD_INT 2
30442: ARRAY
30443: PPUSH
30444: CALL_OW 428
30448: ST_TO_ADDR
// if not tmp then
30449: LD_VAR 0 4
30453: NOT
30454: IFFALSE 30458
// continue ;
30456: GO 30373
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
30458: LD_VAR 0 4
30462: PUSH
30463: LD_INT 81
30465: PUSH
30466: LD_VAR 0 3
30470: PUSH
30471: EMPTY
30472: LIST
30473: LIST
30474: PPUSH
30475: CALL_OW 69
30479: IN
30480: PUSH
30481: LD_EXP 90
30485: PUSH
30486: LD_VAR 0 1
30490: ARRAY
30491: PUSH
30492: LD_VAR 0 2
30496: ARRAY
30497: PUSH
30498: LD_INT 1
30500: ARRAY
30501: PPUSH
30502: LD_EXP 90
30506: PUSH
30507: LD_VAR 0 1
30511: ARRAY
30512: PUSH
30513: LD_VAR 0 2
30517: ARRAY
30518: PUSH
30519: LD_INT 2
30521: ARRAY
30522: PPUSH
30523: CALL_OW 458
30527: AND
30528: IFFALSE 30622
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
30530: LD_EXP 90
30534: PUSH
30535: LD_VAR 0 1
30539: ARRAY
30540: PUSH
30541: LD_VAR 0 2
30545: ARRAY
30546: PUSH
30547: LD_INT 1
30549: ARRAY
30550: PPUSH
30551: LD_EXP 90
30555: PUSH
30556: LD_VAR 0 1
30560: ARRAY
30561: PUSH
30562: LD_VAR 0 2
30566: ARRAY
30567: PUSH
30568: LD_INT 2
30570: ARRAY
30571: PPUSH
30572: LD_VAR 0 3
30576: PPUSH
30577: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
30581: LD_ADDR_EXP 90
30585: PUSH
30586: LD_EXP 90
30590: PPUSH
30591: LD_VAR 0 1
30595: PPUSH
30596: LD_EXP 90
30600: PUSH
30601: LD_VAR 0 1
30605: ARRAY
30606: PPUSH
30607: LD_VAR 0 2
30611: PPUSH
30612: CALL_OW 3
30616: PPUSH
30617: CALL_OW 1
30621: ST_TO_ADDR
// end ; end ;
30622: GO 30373
30624: POP
30625: POP
// end ;
30626: GO 30291
30628: POP
30629: POP
// end ;
30630: PPOPN 4
30632: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
30633: LD_INT 0
30635: PPUSH
30636: PPUSH
// result := false ;
30637: LD_ADDR_VAR 0 4
30641: PUSH
30642: LD_INT 0
30644: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
30645: LD_VAR 0 1
30649: PPUSH
30650: CALL_OW 264
30654: PUSH
30655: LD_INT 81
30657: EQUAL
30658: NOT
30659: IFFALSE 30663
// exit ;
30661: GO 30903
// index := GetElementIndex ( minersList , unit ) ;
30663: LD_ADDR_VAR 0 5
30667: PUSH
30668: LD_EXP 89
30672: PPUSH
30673: LD_VAR 0 1
30677: PPUSH
30678: CALL 37036 0 2
30682: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
30683: LD_EXP 90
30687: PUSH
30688: LD_VAR 0 5
30692: ARRAY
30693: PUSH
30694: LD_EXP 91
30698: GREATEREQUAL
30699: IFFALSE 30703
// exit ;
30701: GO 30903
// ComMoveXY ( unit , x , y ) ;
30703: LD_VAR 0 1
30707: PPUSH
30708: LD_VAR 0 2
30712: PPUSH
30713: LD_VAR 0 3
30717: PPUSH
30718: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
30722: LD_INT 35
30724: PPUSH
30725: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
30729: LD_VAR 0 1
30733: PPUSH
30734: LD_VAR 0 2
30738: PPUSH
30739: LD_VAR 0 3
30743: PPUSH
30744: CALL 68299 0 3
30748: NOT
30749: PUSH
30750: LD_VAR 0 1
30754: PPUSH
30755: CALL_OW 314
30759: AND
30760: IFFALSE 30764
// exit ;
30762: GO 30903
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
30764: LD_VAR 0 2
30768: PPUSH
30769: LD_VAR 0 3
30773: PPUSH
30774: CALL_OW 428
30778: PUSH
30779: LD_VAR 0 1
30783: EQUAL
30784: PUSH
30785: LD_VAR 0 1
30789: PPUSH
30790: CALL_OW 314
30794: NOT
30795: AND
30796: IFFALSE 30722
// PlaySoundXY ( x , y , PlantMine ) ;
30798: LD_VAR 0 2
30802: PPUSH
30803: LD_VAR 0 3
30807: PPUSH
30808: LD_STRING PlantMine
30810: PPUSH
30811: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
30815: LD_VAR 0 2
30819: PPUSH
30820: LD_VAR 0 3
30824: PPUSH
30825: LD_VAR 0 1
30829: PPUSH
30830: CALL_OW 255
30834: PPUSH
30835: LD_INT 0
30837: PPUSH
30838: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
30842: LD_ADDR_EXP 90
30846: PUSH
30847: LD_EXP 90
30851: PPUSH
30852: LD_VAR 0 5
30856: PUSH
30857: LD_EXP 90
30861: PUSH
30862: LD_VAR 0 5
30866: ARRAY
30867: PUSH
30868: LD_INT 1
30870: PLUS
30871: PUSH
30872: EMPTY
30873: LIST
30874: LIST
30875: PPUSH
30876: LD_VAR 0 2
30880: PUSH
30881: LD_VAR 0 3
30885: PUSH
30886: EMPTY
30887: LIST
30888: LIST
30889: PPUSH
30890: CALL 37251 0 3
30894: ST_TO_ADDR
// result := true ;
30895: LD_ADDR_VAR 0 4
30899: PUSH
30900: LD_INT 1
30902: ST_TO_ADDR
// end ;
30903: LD_VAR 0 4
30907: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
30908: LD_INT 0
30910: PPUSH
30911: PPUSH
30912: PPUSH
// if not unit in minersList then
30913: LD_VAR 0 1
30917: PUSH
30918: LD_EXP 89
30922: IN
30923: NOT
30924: IFFALSE 30928
// exit ;
30926: GO 31320
// index := GetElementIndex ( minersList , unit ) ;
30928: LD_ADDR_VAR 0 6
30932: PUSH
30933: LD_EXP 89
30937: PPUSH
30938: LD_VAR 0 1
30942: PPUSH
30943: CALL 37036 0 2
30947: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
30948: LD_ADDR_VAR 0 5
30952: PUSH
30953: DOUBLE
30954: LD_EXP 90
30958: PUSH
30959: LD_VAR 0 6
30963: ARRAY
30964: INC
30965: ST_TO_ADDR
30966: LD_INT 1
30968: PUSH
30969: FOR_DOWNTO
30970: IFFALSE 31131
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
30972: LD_EXP 90
30976: PUSH
30977: LD_VAR 0 6
30981: ARRAY
30982: PUSH
30983: LD_VAR 0 5
30987: ARRAY
30988: PUSH
30989: LD_INT 1
30991: ARRAY
30992: PUSH
30993: LD_VAR 0 2
30997: EQUAL
30998: PUSH
30999: LD_EXP 90
31003: PUSH
31004: LD_VAR 0 6
31008: ARRAY
31009: PUSH
31010: LD_VAR 0 5
31014: ARRAY
31015: PUSH
31016: LD_INT 2
31018: ARRAY
31019: PUSH
31020: LD_VAR 0 3
31024: EQUAL
31025: AND
31026: IFFALSE 31129
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
31028: LD_EXP 90
31032: PUSH
31033: LD_VAR 0 6
31037: ARRAY
31038: PUSH
31039: LD_VAR 0 5
31043: ARRAY
31044: PUSH
31045: LD_INT 1
31047: ARRAY
31048: PPUSH
31049: LD_EXP 90
31053: PUSH
31054: LD_VAR 0 6
31058: ARRAY
31059: PUSH
31060: LD_VAR 0 5
31064: ARRAY
31065: PUSH
31066: LD_INT 2
31068: ARRAY
31069: PPUSH
31070: LD_VAR 0 1
31074: PPUSH
31075: CALL_OW 255
31079: PPUSH
31080: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
31084: LD_ADDR_EXP 90
31088: PUSH
31089: LD_EXP 90
31093: PPUSH
31094: LD_VAR 0 6
31098: PPUSH
31099: LD_EXP 90
31103: PUSH
31104: LD_VAR 0 6
31108: ARRAY
31109: PPUSH
31110: LD_VAR 0 5
31114: PPUSH
31115: CALL_OW 3
31119: PPUSH
31120: CALL_OW 1
31124: ST_TO_ADDR
// exit ;
31125: POP
31126: POP
31127: GO 31320
// end ; end ;
31129: GO 30969
31131: POP
31132: POP
// for i := minerMinesList [ index ] downto 1 do
31133: LD_ADDR_VAR 0 5
31137: PUSH
31138: DOUBLE
31139: LD_EXP 90
31143: PUSH
31144: LD_VAR 0 6
31148: ARRAY
31149: INC
31150: ST_TO_ADDR
31151: LD_INT 1
31153: PUSH
31154: FOR_DOWNTO
31155: IFFALSE 31318
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
31157: LD_EXP 90
31161: PUSH
31162: LD_VAR 0 6
31166: ARRAY
31167: PUSH
31168: LD_VAR 0 5
31172: ARRAY
31173: PUSH
31174: LD_INT 1
31176: ARRAY
31177: PPUSH
31178: LD_EXP 90
31182: PUSH
31183: LD_VAR 0 6
31187: ARRAY
31188: PUSH
31189: LD_VAR 0 5
31193: ARRAY
31194: PUSH
31195: LD_INT 2
31197: ARRAY
31198: PPUSH
31199: LD_VAR 0 2
31203: PPUSH
31204: LD_VAR 0 3
31208: PPUSH
31209: CALL_OW 298
31213: PUSH
31214: LD_INT 6
31216: LESS
31217: IFFALSE 31316
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
31219: LD_EXP 90
31223: PUSH
31224: LD_VAR 0 6
31228: ARRAY
31229: PUSH
31230: LD_VAR 0 5
31234: ARRAY
31235: PUSH
31236: LD_INT 1
31238: ARRAY
31239: PPUSH
31240: LD_EXP 90
31244: PUSH
31245: LD_VAR 0 6
31249: ARRAY
31250: PUSH
31251: LD_VAR 0 5
31255: ARRAY
31256: PUSH
31257: LD_INT 2
31259: ARRAY
31260: PPUSH
31261: LD_VAR 0 1
31265: PPUSH
31266: CALL_OW 255
31270: PPUSH
31271: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
31275: LD_ADDR_EXP 90
31279: PUSH
31280: LD_EXP 90
31284: PPUSH
31285: LD_VAR 0 6
31289: PPUSH
31290: LD_EXP 90
31294: PUSH
31295: LD_VAR 0 6
31299: ARRAY
31300: PPUSH
31301: LD_VAR 0 5
31305: PPUSH
31306: CALL_OW 3
31310: PPUSH
31311: CALL_OW 1
31315: ST_TO_ADDR
// end ; end ;
31316: GO 31154
31318: POP
31319: POP
// end ;
31320: LD_VAR 0 4
31324: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
31325: LD_INT 0
31327: PPUSH
31328: PPUSH
31329: PPUSH
31330: PPUSH
31331: PPUSH
31332: PPUSH
31333: PPUSH
31334: PPUSH
31335: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
31336: LD_VAR 0 1
31340: PPUSH
31341: CALL_OW 264
31345: PUSH
31346: LD_INT 81
31348: EQUAL
31349: NOT
31350: PUSH
31351: LD_VAR 0 1
31355: PUSH
31356: LD_EXP 89
31360: IN
31361: NOT
31362: OR
31363: IFFALSE 31367
// exit ;
31365: GO 31689
// index := GetElementIndex ( minersList , unit ) ;
31367: LD_ADDR_VAR 0 6
31371: PUSH
31372: LD_EXP 89
31376: PPUSH
31377: LD_VAR 0 1
31381: PPUSH
31382: CALL 37036 0 2
31386: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
31387: LD_ADDR_VAR 0 8
31391: PUSH
31392: LD_EXP 91
31396: PUSH
31397: LD_EXP 90
31401: PUSH
31402: LD_VAR 0 6
31406: ARRAY
31407: MINUS
31408: ST_TO_ADDR
// if not minesFreeAmount then
31409: LD_VAR 0 8
31413: NOT
31414: IFFALSE 31418
// exit ;
31416: GO 31689
// tmp := [ ] ;
31418: LD_ADDR_VAR 0 7
31422: PUSH
31423: EMPTY
31424: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
31425: LD_ADDR_VAR 0 5
31429: PUSH
31430: DOUBLE
31431: LD_INT 1
31433: DEC
31434: ST_TO_ADDR
31435: LD_VAR 0 8
31439: PUSH
31440: FOR_TO
31441: IFFALSE 31636
// begin _d := rand ( 0 , 5 ) ;
31443: LD_ADDR_VAR 0 11
31447: PUSH
31448: LD_INT 0
31450: PPUSH
31451: LD_INT 5
31453: PPUSH
31454: CALL_OW 12
31458: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
31459: LD_ADDR_VAR 0 12
31463: PUSH
31464: LD_INT 2
31466: PPUSH
31467: LD_INT 6
31469: PPUSH
31470: CALL_OW 12
31474: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
31475: LD_ADDR_VAR 0 9
31479: PUSH
31480: LD_VAR 0 2
31484: PPUSH
31485: LD_VAR 0 11
31489: PPUSH
31490: LD_VAR 0 12
31494: PPUSH
31495: CALL_OW 272
31499: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
31500: LD_ADDR_VAR 0 10
31504: PUSH
31505: LD_VAR 0 3
31509: PPUSH
31510: LD_VAR 0 11
31514: PPUSH
31515: LD_VAR 0 12
31519: PPUSH
31520: CALL_OW 273
31524: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
31525: LD_VAR 0 9
31529: PPUSH
31530: LD_VAR 0 10
31534: PPUSH
31535: CALL_OW 488
31539: PUSH
31540: LD_VAR 0 9
31544: PUSH
31545: LD_VAR 0 10
31549: PUSH
31550: EMPTY
31551: LIST
31552: LIST
31553: PUSH
31554: LD_VAR 0 7
31558: IN
31559: NOT
31560: AND
31561: PUSH
31562: LD_VAR 0 9
31566: PPUSH
31567: LD_VAR 0 10
31571: PPUSH
31572: CALL_OW 458
31576: NOT
31577: AND
31578: IFFALSE 31620
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
31580: LD_ADDR_VAR 0 7
31584: PUSH
31585: LD_VAR 0 7
31589: PPUSH
31590: LD_VAR 0 7
31594: PUSH
31595: LD_INT 1
31597: PLUS
31598: PPUSH
31599: LD_VAR 0 9
31603: PUSH
31604: LD_VAR 0 10
31608: PUSH
31609: EMPTY
31610: LIST
31611: LIST
31612: PPUSH
31613: CALL_OW 1
31617: ST_TO_ADDR
31618: GO 31634
// i := i - 1 ;
31620: LD_ADDR_VAR 0 5
31624: PUSH
31625: LD_VAR 0 5
31629: PUSH
31630: LD_INT 1
31632: MINUS
31633: ST_TO_ADDR
// end ;
31634: GO 31440
31636: POP
31637: POP
// for i in tmp do
31638: LD_ADDR_VAR 0 5
31642: PUSH
31643: LD_VAR 0 7
31647: PUSH
31648: FOR_IN
31649: IFFALSE 31687
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
31651: LD_VAR 0 1
31655: PPUSH
31656: LD_VAR 0 5
31660: PUSH
31661: LD_INT 1
31663: ARRAY
31664: PPUSH
31665: LD_VAR 0 5
31669: PUSH
31670: LD_INT 2
31672: ARRAY
31673: PPUSH
31674: CALL 30633 0 3
31678: NOT
31679: IFFALSE 31685
// exit ;
31681: POP
31682: POP
31683: GO 31689
31685: GO 31648
31687: POP
31688: POP
// end ;
31689: LD_VAR 0 4
31693: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
31694: LD_INT 0
31696: PPUSH
31697: PPUSH
31698: PPUSH
31699: PPUSH
31700: PPUSH
31701: PPUSH
31702: PPUSH
// if not GetClass ( unit ) = class_sniper then
31703: LD_VAR 0 1
31707: PPUSH
31708: CALL_OW 257
31712: PUSH
31713: LD_INT 5
31715: EQUAL
31716: NOT
31717: IFFALSE 31721
// exit ;
31719: GO 32109
// dist := 8 ;
31721: LD_ADDR_VAR 0 5
31725: PUSH
31726: LD_INT 8
31728: ST_TO_ADDR
// viewRange := 12 ;
31729: LD_ADDR_VAR 0 7
31733: PUSH
31734: LD_INT 12
31736: ST_TO_ADDR
// side := GetSide ( unit ) ;
31737: LD_ADDR_VAR 0 6
31741: PUSH
31742: LD_VAR 0 1
31746: PPUSH
31747: CALL_OW 255
31751: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
31752: LD_INT 61
31754: PPUSH
31755: LD_VAR 0 6
31759: PPUSH
31760: CALL_OW 321
31764: PUSH
31765: LD_INT 2
31767: EQUAL
31768: IFFALSE 31778
// viewRange := 16 ;
31770: LD_ADDR_VAR 0 7
31774: PUSH
31775: LD_INT 16
31777: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
31778: LD_VAR 0 1
31782: PPUSH
31783: LD_VAR 0 2
31787: PPUSH
31788: LD_VAR 0 3
31792: PPUSH
31793: CALL_OW 297
31797: PUSH
31798: LD_VAR 0 5
31802: GREATER
31803: IFFALSE 31882
// begin ComMoveXY ( unit , x , y ) ;
31805: LD_VAR 0 1
31809: PPUSH
31810: LD_VAR 0 2
31814: PPUSH
31815: LD_VAR 0 3
31819: PPUSH
31820: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
31824: LD_INT 35
31826: PPUSH
31827: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
31831: LD_VAR 0 1
31835: PPUSH
31836: LD_VAR 0 2
31840: PPUSH
31841: LD_VAR 0 3
31845: PPUSH
31846: CALL 68299 0 3
31850: NOT
31851: IFFALSE 31855
// exit ;
31853: GO 32109
// until GetDistUnitXY ( unit , x , y ) < dist ;
31855: LD_VAR 0 1
31859: PPUSH
31860: LD_VAR 0 2
31864: PPUSH
31865: LD_VAR 0 3
31869: PPUSH
31870: CALL_OW 297
31874: PUSH
31875: LD_VAR 0 5
31879: LESS
31880: IFFALSE 31824
// end ; ComTurnXY ( unit , x , y ) ;
31882: LD_VAR 0 1
31886: PPUSH
31887: LD_VAR 0 2
31891: PPUSH
31892: LD_VAR 0 3
31896: PPUSH
31897: CALL_OW 118
// wait ( 5 ) ;
31901: LD_INT 5
31903: PPUSH
31904: CALL_OW 67
// _d := GetDir ( unit ) ;
31908: LD_ADDR_VAR 0 10
31912: PUSH
31913: LD_VAR 0 1
31917: PPUSH
31918: CALL_OW 254
31922: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
31923: LD_ADDR_VAR 0 8
31927: PUSH
31928: LD_VAR 0 1
31932: PPUSH
31933: CALL_OW 250
31937: PPUSH
31938: LD_VAR 0 10
31942: PPUSH
31943: LD_VAR 0 5
31947: PPUSH
31948: CALL_OW 272
31952: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
31953: LD_ADDR_VAR 0 9
31957: PUSH
31958: LD_VAR 0 1
31962: PPUSH
31963: CALL_OW 251
31967: PPUSH
31968: LD_VAR 0 10
31972: PPUSH
31973: LD_VAR 0 5
31977: PPUSH
31978: CALL_OW 273
31982: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31983: LD_VAR 0 8
31987: PPUSH
31988: LD_VAR 0 9
31992: PPUSH
31993: CALL_OW 488
31997: NOT
31998: IFFALSE 32002
// exit ;
32000: GO 32109
// ComAnimCustom ( unit , 1 ) ;
32002: LD_VAR 0 1
32006: PPUSH
32007: LD_INT 1
32009: PPUSH
32010: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
32014: LD_VAR 0 8
32018: PPUSH
32019: LD_VAR 0 9
32023: PPUSH
32024: LD_VAR 0 6
32028: PPUSH
32029: LD_VAR 0 7
32033: PPUSH
32034: CALL_OW 330
// repeat wait ( 1 ) ;
32038: LD_INT 1
32040: PPUSH
32041: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
32045: LD_VAR 0 1
32049: PPUSH
32050: CALL_OW 316
32054: PUSH
32055: LD_VAR 0 1
32059: PPUSH
32060: CALL_OW 314
32064: OR
32065: PUSH
32066: LD_VAR 0 1
32070: PPUSH
32071: CALL_OW 302
32075: NOT
32076: OR
32077: PUSH
32078: LD_VAR 0 1
32082: PPUSH
32083: CALL_OW 301
32087: OR
32088: IFFALSE 32038
// RemoveSeeing ( _x , _y , side ) ;
32090: LD_VAR 0 8
32094: PPUSH
32095: LD_VAR 0 9
32099: PPUSH
32100: LD_VAR 0 6
32104: PPUSH
32105: CALL_OW 331
// end ; end_of_file
32109: LD_VAR 0 4
32113: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
32114: LD_INT 0
32116: PPUSH
32117: PPUSH
// if exist_mode then
32118: LD_VAR 0 2
32122: IFFALSE 32147
// unit := CreateCharacter ( prefix & ident ) else
32124: LD_ADDR_VAR 0 5
32128: PUSH
32129: LD_VAR 0 3
32133: PUSH
32134: LD_VAR 0 1
32138: STR
32139: PPUSH
32140: CALL_OW 34
32144: ST_TO_ADDR
32145: GO 32162
// unit := NewCharacter ( ident ) ;
32147: LD_ADDR_VAR 0 5
32151: PUSH
32152: LD_VAR 0 1
32156: PPUSH
32157: CALL_OW 25
32161: ST_TO_ADDR
// result := unit ;
32162: LD_ADDR_VAR 0 4
32166: PUSH
32167: LD_VAR 0 5
32171: ST_TO_ADDR
// end ;
32172: LD_VAR 0 4
32176: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
32177: LD_INT 0
32179: PPUSH
32180: PPUSH
// if not side or not nation then
32181: LD_VAR 0 1
32185: NOT
32186: PUSH
32187: LD_VAR 0 2
32191: NOT
32192: OR
32193: IFFALSE 32197
// exit ;
32195: GO 32965
// case nation of nation_american :
32197: LD_VAR 0 2
32201: PUSH
32202: LD_INT 1
32204: DOUBLE
32205: EQUAL
32206: IFTRUE 32210
32208: GO 32424
32210: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
32211: LD_ADDR_VAR 0 4
32215: PUSH
32216: LD_INT 35
32218: PUSH
32219: LD_INT 45
32221: PUSH
32222: LD_INT 46
32224: PUSH
32225: LD_INT 47
32227: PUSH
32228: LD_INT 82
32230: PUSH
32231: LD_INT 83
32233: PUSH
32234: LD_INT 84
32236: PUSH
32237: LD_INT 85
32239: PUSH
32240: LD_INT 86
32242: PUSH
32243: LD_INT 1
32245: PUSH
32246: LD_INT 2
32248: PUSH
32249: LD_INT 6
32251: PUSH
32252: LD_INT 15
32254: PUSH
32255: LD_INT 16
32257: PUSH
32258: LD_INT 7
32260: PUSH
32261: LD_INT 12
32263: PUSH
32264: LD_INT 13
32266: PUSH
32267: LD_INT 10
32269: PUSH
32270: LD_INT 14
32272: PUSH
32273: LD_INT 20
32275: PUSH
32276: LD_INT 21
32278: PUSH
32279: LD_INT 22
32281: PUSH
32282: LD_INT 25
32284: PUSH
32285: LD_INT 32
32287: PUSH
32288: LD_INT 27
32290: PUSH
32291: LD_INT 36
32293: PUSH
32294: LD_INT 69
32296: PUSH
32297: LD_INT 39
32299: PUSH
32300: LD_INT 34
32302: PUSH
32303: LD_INT 40
32305: PUSH
32306: LD_INT 48
32308: PUSH
32309: LD_INT 49
32311: PUSH
32312: LD_INT 50
32314: PUSH
32315: LD_INT 51
32317: PUSH
32318: LD_INT 52
32320: PUSH
32321: LD_INT 53
32323: PUSH
32324: LD_INT 54
32326: PUSH
32327: LD_INT 55
32329: PUSH
32330: LD_INT 56
32332: PUSH
32333: LD_INT 57
32335: PUSH
32336: LD_INT 58
32338: PUSH
32339: LD_INT 59
32341: PUSH
32342: LD_INT 60
32344: PUSH
32345: LD_INT 61
32347: PUSH
32348: LD_INT 62
32350: PUSH
32351: LD_INT 80
32353: PUSH
32354: LD_INT 82
32356: PUSH
32357: LD_INT 83
32359: PUSH
32360: LD_INT 84
32362: PUSH
32363: LD_INT 85
32365: PUSH
32366: LD_INT 86
32368: PUSH
32369: EMPTY
32370: LIST
32371: LIST
32372: LIST
32373: LIST
32374: LIST
32375: LIST
32376: LIST
32377: LIST
32378: LIST
32379: LIST
32380: LIST
32381: LIST
32382: LIST
32383: LIST
32384: LIST
32385: LIST
32386: LIST
32387: LIST
32388: LIST
32389: LIST
32390: LIST
32391: LIST
32392: LIST
32393: LIST
32394: LIST
32395: LIST
32396: LIST
32397: LIST
32398: LIST
32399: LIST
32400: LIST
32401: LIST
32402: LIST
32403: LIST
32404: LIST
32405: LIST
32406: LIST
32407: LIST
32408: LIST
32409: LIST
32410: LIST
32411: LIST
32412: LIST
32413: LIST
32414: LIST
32415: LIST
32416: LIST
32417: LIST
32418: LIST
32419: LIST
32420: LIST
32421: ST_TO_ADDR
32422: GO 32889
32424: LD_INT 2
32426: DOUBLE
32427: EQUAL
32428: IFTRUE 32432
32430: GO 32658
32432: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
32433: LD_ADDR_VAR 0 4
32437: PUSH
32438: LD_INT 35
32440: PUSH
32441: LD_INT 45
32443: PUSH
32444: LD_INT 46
32446: PUSH
32447: LD_INT 47
32449: PUSH
32450: LD_INT 82
32452: PUSH
32453: LD_INT 83
32455: PUSH
32456: LD_INT 84
32458: PUSH
32459: LD_INT 85
32461: PUSH
32462: LD_INT 87
32464: PUSH
32465: LD_INT 70
32467: PUSH
32468: LD_INT 1
32470: PUSH
32471: LD_INT 11
32473: PUSH
32474: LD_INT 3
32476: PUSH
32477: LD_INT 4
32479: PUSH
32480: LD_INT 5
32482: PUSH
32483: LD_INT 6
32485: PUSH
32486: LD_INT 15
32488: PUSH
32489: LD_INT 18
32491: PUSH
32492: LD_INT 7
32494: PUSH
32495: LD_INT 17
32497: PUSH
32498: LD_INT 8
32500: PUSH
32501: LD_INT 20
32503: PUSH
32504: LD_INT 21
32506: PUSH
32507: LD_INT 22
32509: PUSH
32510: LD_INT 72
32512: PUSH
32513: LD_INT 26
32515: PUSH
32516: LD_INT 69
32518: PUSH
32519: LD_INT 39
32521: PUSH
32522: LD_INT 40
32524: PUSH
32525: LD_INT 41
32527: PUSH
32528: LD_INT 42
32530: PUSH
32531: LD_INT 43
32533: PUSH
32534: LD_INT 48
32536: PUSH
32537: LD_INT 49
32539: PUSH
32540: LD_INT 50
32542: PUSH
32543: LD_INT 51
32545: PUSH
32546: LD_INT 52
32548: PUSH
32549: LD_INT 53
32551: PUSH
32552: LD_INT 54
32554: PUSH
32555: LD_INT 55
32557: PUSH
32558: LD_INT 56
32560: PUSH
32561: LD_INT 60
32563: PUSH
32564: LD_INT 61
32566: PUSH
32567: LD_INT 62
32569: PUSH
32570: LD_INT 66
32572: PUSH
32573: LD_INT 67
32575: PUSH
32576: LD_INT 68
32578: PUSH
32579: LD_INT 81
32581: PUSH
32582: LD_INT 82
32584: PUSH
32585: LD_INT 83
32587: PUSH
32588: LD_INT 84
32590: PUSH
32591: LD_INT 85
32593: PUSH
32594: LD_INT 87
32596: PUSH
32597: LD_INT 88
32599: PUSH
32600: EMPTY
32601: LIST
32602: LIST
32603: LIST
32604: LIST
32605: LIST
32606: LIST
32607: LIST
32608: LIST
32609: LIST
32610: LIST
32611: LIST
32612: LIST
32613: LIST
32614: LIST
32615: LIST
32616: LIST
32617: LIST
32618: LIST
32619: LIST
32620: LIST
32621: LIST
32622: LIST
32623: LIST
32624: LIST
32625: LIST
32626: LIST
32627: LIST
32628: LIST
32629: LIST
32630: LIST
32631: LIST
32632: LIST
32633: LIST
32634: LIST
32635: LIST
32636: LIST
32637: LIST
32638: LIST
32639: LIST
32640: LIST
32641: LIST
32642: LIST
32643: LIST
32644: LIST
32645: LIST
32646: LIST
32647: LIST
32648: LIST
32649: LIST
32650: LIST
32651: LIST
32652: LIST
32653: LIST
32654: LIST
32655: ST_TO_ADDR
32656: GO 32889
32658: LD_INT 3
32660: DOUBLE
32661: EQUAL
32662: IFTRUE 32666
32664: GO 32888
32666: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
32667: LD_ADDR_VAR 0 4
32671: PUSH
32672: LD_INT 46
32674: PUSH
32675: LD_INT 47
32677: PUSH
32678: LD_INT 1
32680: PUSH
32681: LD_INT 2
32683: PUSH
32684: LD_INT 82
32686: PUSH
32687: LD_INT 83
32689: PUSH
32690: LD_INT 84
32692: PUSH
32693: LD_INT 85
32695: PUSH
32696: LD_INT 86
32698: PUSH
32699: LD_INT 11
32701: PUSH
32702: LD_INT 9
32704: PUSH
32705: LD_INT 20
32707: PUSH
32708: LD_INT 19
32710: PUSH
32711: LD_INT 21
32713: PUSH
32714: LD_INT 24
32716: PUSH
32717: LD_INT 22
32719: PUSH
32720: LD_INT 25
32722: PUSH
32723: LD_INT 28
32725: PUSH
32726: LD_INT 29
32728: PUSH
32729: LD_INT 30
32731: PUSH
32732: LD_INT 31
32734: PUSH
32735: LD_INT 37
32737: PUSH
32738: LD_INT 38
32740: PUSH
32741: LD_INT 32
32743: PUSH
32744: LD_INT 27
32746: PUSH
32747: LD_INT 33
32749: PUSH
32750: LD_INT 69
32752: PUSH
32753: LD_INT 39
32755: PUSH
32756: LD_INT 34
32758: PUSH
32759: LD_INT 40
32761: PUSH
32762: LD_INT 71
32764: PUSH
32765: LD_INT 23
32767: PUSH
32768: LD_INT 44
32770: PUSH
32771: LD_INT 48
32773: PUSH
32774: LD_INT 49
32776: PUSH
32777: LD_INT 50
32779: PUSH
32780: LD_INT 51
32782: PUSH
32783: LD_INT 52
32785: PUSH
32786: LD_INT 53
32788: PUSH
32789: LD_INT 54
32791: PUSH
32792: LD_INT 55
32794: PUSH
32795: LD_INT 56
32797: PUSH
32798: LD_INT 57
32800: PUSH
32801: LD_INT 58
32803: PUSH
32804: LD_INT 59
32806: PUSH
32807: LD_INT 63
32809: PUSH
32810: LD_INT 64
32812: PUSH
32813: LD_INT 65
32815: PUSH
32816: LD_INT 82
32818: PUSH
32819: LD_INT 83
32821: PUSH
32822: LD_INT 84
32824: PUSH
32825: LD_INT 85
32827: PUSH
32828: LD_INT 86
32830: PUSH
32831: EMPTY
32832: LIST
32833: LIST
32834: LIST
32835: LIST
32836: LIST
32837: LIST
32838: LIST
32839: LIST
32840: LIST
32841: LIST
32842: LIST
32843: LIST
32844: LIST
32845: LIST
32846: LIST
32847: LIST
32848: LIST
32849: LIST
32850: LIST
32851: LIST
32852: LIST
32853: LIST
32854: LIST
32855: LIST
32856: LIST
32857: LIST
32858: LIST
32859: LIST
32860: LIST
32861: LIST
32862: LIST
32863: LIST
32864: LIST
32865: LIST
32866: LIST
32867: LIST
32868: LIST
32869: LIST
32870: LIST
32871: LIST
32872: LIST
32873: LIST
32874: LIST
32875: LIST
32876: LIST
32877: LIST
32878: LIST
32879: LIST
32880: LIST
32881: LIST
32882: LIST
32883: LIST
32884: LIST
32885: ST_TO_ADDR
32886: GO 32889
32888: POP
// if state > - 1 and state < 3 then
32889: LD_VAR 0 3
32893: PUSH
32894: LD_INT 1
32896: NEG
32897: GREATER
32898: PUSH
32899: LD_VAR 0 3
32903: PUSH
32904: LD_INT 3
32906: LESS
32907: AND
32908: IFFALSE 32965
// for i in result do
32910: LD_ADDR_VAR 0 5
32914: PUSH
32915: LD_VAR 0 4
32919: PUSH
32920: FOR_IN
32921: IFFALSE 32963
// if GetTech ( i , side ) <> state then
32923: LD_VAR 0 5
32927: PPUSH
32928: LD_VAR 0 1
32932: PPUSH
32933: CALL_OW 321
32937: PUSH
32938: LD_VAR 0 3
32942: NONEQUAL
32943: IFFALSE 32961
// result := result diff i ;
32945: LD_ADDR_VAR 0 4
32949: PUSH
32950: LD_VAR 0 4
32954: PUSH
32955: LD_VAR 0 5
32959: DIFF
32960: ST_TO_ADDR
32961: GO 32920
32963: POP
32964: POP
// end ;
32965: LD_VAR 0 4
32969: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
32970: LD_INT 0
32972: PPUSH
32973: PPUSH
32974: PPUSH
// result := true ;
32975: LD_ADDR_VAR 0 3
32979: PUSH
32980: LD_INT 1
32982: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
32983: LD_ADDR_VAR 0 5
32987: PUSH
32988: LD_VAR 0 2
32992: PPUSH
32993: CALL_OW 480
32997: ST_TO_ADDR
// if not tmp then
32998: LD_VAR 0 5
33002: NOT
33003: IFFALSE 33007
// exit ;
33005: GO 33056
// for i in tmp do
33007: LD_ADDR_VAR 0 4
33011: PUSH
33012: LD_VAR 0 5
33016: PUSH
33017: FOR_IN
33018: IFFALSE 33054
// if GetTech ( i , side ) <> state_researched then
33020: LD_VAR 0 4
33024: PPUSH
33025: LD_VAR 0 1
33029: PPUSH
33030: CALL_OW 321
33034: PUSH
33035: LD_INT 2
33037: NONEQUAL
33038: IFFALSE 33052
// begin result := false ;
33040: LD_ADDR_VAR 0 3
33044: PUSH
33045: LD_INT 0
33047: ST_TO_ADDR
// exit ;
33048: POP
33049: POP
33050: GO 33056
// end ;
33052: GO 33017
33054: POP
33055: POP
// end ;
33056: LD_VAR 0 3
33060: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
33061: LD_INT 0
33063: PPUSH
33064: PPUSH
33065: PPUSH
33066: PPUSH
33067: PPUSH
33068: PPUSH
33069: PPUSH
33070: PPUSH
33071: PPUSH
33072: PPUSH
33073: PPUSH
33074: PPUSH
33075: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
33076: LD_VAR 0 1
33080: NOT
33081: PUSH
33082: LD_VAR 0 1
33086: PPUSH
33087: CALL_OW 257
33091: PUSH
33092: LD_INT 9
33094: NONEQUAL
33095: OR
33096: IFFALSE 33100
// exit ;
33098: GO 33673
// side := GetSide ( unit ) ;
33100: LD_ADDR_VAR 0 9
33104: PUSH
33105: LD_VAR 0 1
33109: PPUSH
33110: CALL_OW 255
33114: ST_TO_ADDR
// tech_space := tech_spacanom ;
33115: LD_ADDR_VAR 0 12
33119: PUSH
33120: LD_INT 29
33122: ST_TO_ADDR
// tech_time := tech_taurad ;
33123: LD_ADDR_VAR 0 13
33127: PUSH
33128: LD_INT 28
33130: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
33131: LD_ADDR_VAR 0 11
33135: PUSH
33136: LD_VAR 0 1
33140: PPUSH
33141: CALL_OW 310
33145: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
33146: LD_VAR 0 11
33150: PPUSH
33151: CALL_OW 247
33155: PUSH
33156: LD_INT 2
33158: EQUAL
33159: IFFALSE 33163
// exit ;
33161: GO 33673
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33163: LD_ADDR_VAR 0 8
33167: PUSH
33168: LD_INT 81
33170: PUSH
33171: LD_VAR 0 9
33175: PUSH
33176: EMPTY
33177: LIST
33178: LIST
33179: PUSH
33180: LD_INT 3
33182: PUSH
33183: LD_INT 21
33185: PUSH
33186: LD_INT 3
33188: PUSH
33189: EMPTY
33190: LIST
33191: LIST
33192: PUSH
33193: EMPTY
33194: LIST
33195: LIST
33196: PUSH
33197: EMPTY
33198: LIST
33199: LIST
33200: PPUSH
33201: CALL_OW 69
33205: ST_TO_ADDR
// if not tmp then
33206: LD_VAR 0 8
33210: NOT
33211: IFFALSE 33215
// exit ;
33213: GO 33673
// if in_unit then
33215: LD_VAR 0 11
33219: IFFALSE 33243
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
33221: LD_ADDR_VAR 0 10
33225: PUSH
33226: LD_VAR 0 8
33230: PPUSH
33231: LD_VAR 0 11
33235: PPUSH
33236: CALL_OW 74
33240: ST_TO_ADDR
33241: GO 33263
// enemy := NearestUnitToUnit ( tmp , unit ) ;
33243: LD_ADDR_VAR 0 10
33247: PUSH
33248: LD_VAR 0 8
33252: PPUSH
33253: LD_VAR 0 1
33257: PPUSH
33258: CALL_OW 74
33262: ST_TO_ADDR
// if not enemy then
33263: LD_VAR 0 10
33267: NOT
33268: IFFALSE 33272
// exit ;
33270: GO 33673
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
33272: LD_VAR 0 11
33276: PUSH
33277: LD_VAR 0 11
33281: PPUSH
33282: LD_VAR 0 10
33286: PPUSH
33287: CALL_OW 296
33291: PUSH
33292: LD_INT 13
33294: GREATER
33295: AND
33296: PUSH
33297: LD_VAR 0 1
33301: PPUSH
33302: LD_VAR 0 10
33306: PPUSH
33307: CALL_OW 296
33311: PUSH
33312: LD_INT 12
33314: GREATER
33315: OR
33316: IFFALSE 33320
// exit ;
33318: GO 33673
// missile := [ 1 ] ;
33320: LD_ADDR_VAR 0 14
33324: PUSH
33325: LD_INT 1
33327: PUSH
33328: EMPTY
33329: LIST
33330: ST_TO_ADDR
// if Researched ( side , tech_space ) then
33331: LD_VAR 0 9
33335: PPUSH
33336: LD_VAR 0 12
33340: PPUSH
33341: CALL_OW 325
33345: IFFALSE 33374
// missile := Replace ( missile , missile + 1 , 2 ) ;
33347: LD_ADDR_VAR 0 14
33351: PUSH
33352: LD_VAR 0 14
33356: PPUSH
33357: LD_VAR 0 14
33361: PUSH
33362: LD_INT 1
33364: PLUS
33365: PPUSH
33366: LD_INT 2
33368: PPUSH
33369: CALL_OW 1
33373: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
33374: LD_VAR 0 9
33378: PPUSH
33379: LD_VAR 0 13
33383: PPUSH
33384: CALL_OW 325
33388: PUSH
33389: LD_VAR 0 10
33393: PPUSH
33394: CALL_OW 255
33398: PPUSH
33399: LD_VAR 0 13
33403: PPUSH
33404: CALL_OW 325
33408: NOT
33409: AND
33410: IFFALSE 33439
// missile := Replace ( missile , missile + 1 , 3 ) ;
33412: LD_ADDR_VAR 0 14
33416: PUSH
33417: LD_VAR 0 14
33421: PPUSH
33422: LD_VAR 0 14
33426: PUSH
33427: LD_INT 1
33429: PLUS
33430: PPUSH
33431: LD_INT 3
33433: PPUSH
33434: CALL_OW 1
33438: ST_TO_ADDR
// if missile < 2 then
33439: LD_VAR 0 14
33443: PUSH
33444: LD_INT 2
33446: LESS
33447: IFFALSE 33451
// exit ;
33449: GO 33673
// x := GetX ( enemy ) ;
33451: LD_ADDR_VAR 0 4
33455: PUSH
33456: LD_VAR 0 10
33460: PPUSH
33461: CALL_OW 250
33465: ST_TO_ADDR
// y := GetY ( enemy ) ;
33466: LD_ADDR_VAR 0 5
33470: PUSH
33471: LD_VAR 0 10
33475: PPUSH
33476: CALL_OW 251
33480: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
33481: LD_ADDR_VAR 0 6
33485: PUSH
33486: LD_VAR 0 4
33490: PUSH
33491: LD_INT 1
33493: NEG
33494: PPUSH
33495: LD_INT 1
33497: PPUSH
33498: CALL_OW 12
33502: PLUS
33503: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
33504: LD_ADDR_VAR 0 7
33508: PUSH
33509: LD_VAR 0 5
33513: PUSH
33514: LD_INT 1
33516: NEG
33517: PPUSH
33518: LD_INT 1
33520: PPUSH
33521: CALL_OW 12
33525: PLUS
33526: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
33527: LD_VAR 0 6
33531: PPUSH
33532: LD_VAR 0 7
33536: PPUSH
33537: CALL_OW 488
33541: NOT
33542: IFFALSE 33564
// begin _x := x ;
33544: LD_ADDR_VAR 0 6
33548: PUSH
33549: LD_VAR 0 4
33553: ST_TO_ADDR
// _y := y ;
33554: LD_ADDR_VAR 0 7
33558: PUSH
33559: LD_VAR 0 5
33563: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
33564: LD_ADDR_VAR 0 3
33568: PUSH
33569: LD_INT 1
33571: PPUSH
33572: LD_VAR 0 14
33576: PPUSH
33577: CALL_OW 12
33581: ST_TO_ADDR
// case i of 1 :
33582: LD_VAR 0 3
33586: PUSH
33587: LD_INT 1
33589: DOUBLE
33590: EQUAL
33591: IFTRUE 33595
33593: GO 33612
33595: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
33596: LD_VAR 0 1
33600: PPUSH
33601: LD_VAR 0 10
33605: PPUSH
33606: CALL_OW 115
33610: GO 33673
33612: LD_INT 2
33614: DOUBLE
33615: EQUAL
33616: IFTRUE 33620
33618: GO 33642
33620: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
33621: LD_VAR 0 1
33625: PPUSH
33626: LD_VAR 0 6
33630: PPUSH
33631: LD_VAR 0 7
33635: PPUSH
33636: CALL_OW 153
33640: GO 33673
33642: LD_INT 3
33644: DOUBLE
33645: EQUAL
33646: IFTRUE 33650
33648: GO 33672
33650: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
33651: LD_VAR 0 1
33655: PPUSH
33656: LD_VAR 0 6
33660: PPUSH
33661: LD_VAR 0 7
33665: PPUSH
33666: CALL_OW 154
33670: GO 33673
33672: POP
// end ;
33673: LD_VAR 0 2
33677: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
33678: LD_INT 0
33680: PPUSH
33681: PPUSH
33682: PPUSH
33683: PPUSH
33684: PPUSH
33685: PPUSH
// if not unit or not building then
33686: LD_VAR 0 1
33690: NOT
33691: PUSH
33692: LD_VAR 0 2
33696: NOT
33697: OR
33698: IFFALSE 33702
// exit ;
33700: GO 33860
// x := GetX ( building ) ;
33702: LD_ADDR_VAR 0 5
33706: PUSH
33707: LD_VAR 0 2
33711: PPUSH
33712: CALL_OW 250
33716: ST_TO_ADDR
// y := GetY ( building ) ;
33717: LD_ADDR_VAR 0 6
33721: PUSH
33722: LD_VAR 0 2
33726: PPUSH
33727: CALL_OW 251
33731: ST_TO_ADDR
// for i = 0 to 5 do
33732: LD_ADDR_VAR 0 4
33736: PUSH
33737: DOUBLE
33738: LD_INT 0
33740: DEC
33741: ST_TO_ADDR
33742: LD_INT 5
33744: PUSH
33745: FOR_TO
33746: IFFALSE 33858
// begin _x := ShiftX ( x , i , 3 ) ;
33748: LD_ADDR_VAR 0 7
33752: PUSH
33753: LD_VAR 0 5
33757: PPUSH
33758: LD_VAR 0 4
33762: PPUSH
33763: LD_INT 3
33765: PPUSH
33766: CALL_OW 272
33770: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
33771: LD_ADDR_VAR 0 8
33775: PUSH
33776: LD_VAR 0 6
33780: PPUSH
33781: LD_VAR 0 4
33785: PPUSH
33786: LD_INT 3
33788: PPUSH
33789: CALL_OW 273
33793: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
33794: LD_VAR 0 7
33798: PPUSH
33799: LD_VAR 0 8
33803: PPUSH
33804: CALL_OW 488
33808: NOT
33809: IFFALSE 33813
// continue ;
33811: GO 33745
// if HexInfo ( _x , _y ) = 0 then
33813: LD_VAR 0 7
33817: PPUSH
33818: LD_VAR 0 8
33822: PPUSH
33823: CALL_OW 428
33827: PUSH
33828: LD_INT 0
33830: EQUAL
33831: IFFALSE 33856
// begin ComMoveXY ( unit , _x , _y ) ;
33833: LD_VAR 0 1
33837: PPUSH
33838: LD_VAR 0 7
33842: PPUSH
33843: LD_VAR 0 8
33847: PPUSH
33848: CALL_OW 111
// exit ;
33852: POP
33853: POP
33854: GO 33860
// end ; end ;
33856: GO 33745
33858: POP
33859: POP
// end ;
33860: LD_VAR 0 3
33864: RET
// export function ScanBase ( side , base_area ) ; begin
33865: LD_INT 0
33867: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
33868: LD_ADDR_VAR 0 3
33872: PUSH
33873: LD_VAR 0 2
33877: PPUSH
33878: LD_INT 81
33880: PUSH
33881: LD_VAR 0 1
33885: PUSH
33886: EMPTY
33887: LIST
33888: LIST
33889: PPUSH
33890: CALL_OW 70
33894: ST_TO_ADDR
// end ;
33895: LD_VAR 0 3
33899: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
33900: LD_INT 0
33902: PPUSH
33903: PPUSH
33904: PPUSH
33905: PPUSH
// result := false ;
33906: LD_ADDR_VAR 0 2
33910: PUSH
33911: LD_INT 0
33913: ST_TO_ADDR
// side := GetSide ( unit ) ;
33914: LD_ADDR_VAR 0 3
33918: PUSH
33919: LD_VAR 0 1
33923: PPUSH
33924: CALL_OW 255
33928: ST_TO_ADDR
// nat := GetNation ( unit ) ;
33929: LD_ADDR_VAR 0 4
33933: PUSH
33934: LD_VAR 0 1
33938: PPUSH
33939: CALL_OW 248
33943: ST_TO_ADDR
// case nat of 1 :
33944: LD_VAR 0 4
33948: PUSH
33949: LD_INT 1
33951: DOUBLE
33952: EQUAL
33953: IFTRUE 33957
33955: GO 33968
33957: POP
// tech := tech_lassight ; 2 :
33958: LD_ADDR_VAR 0 5
33962: PUSH
33963: LD_INT 12
33965: ST_TO_ADDR
33966: GO 34007
33968: LD_INT 2
33970: DOUBLE
33971: EQUAL
33972: IFTRUE 33976
33974: GO 33987
33976: POP
// tech := tech_mortar ; 3 :
33977: LD_ADDR_VAR 0 5
33981: PUSH
33982: LD_INT 41
33984: ST_TO_ADDR
33985: GO 34007
33987: LD_INT 3
33989: DOUBLE
33990: EQUAL
33991: IFTRUE 33995
33993: GO 34006
33995: POP
// tech := tech_bazooka ; end ;
33996: LD_ADDR_VAR 0 5
34000: PUSH
34001: LD_INT 44
34003: ST_TO_ADDR
34004: GO 34007
34006: POP
// if Researched ( side , tech ) then
34007: LD_VAR 0 3
34011: PPUSH
34012: LD_VAR 0 5
34016: PPUSH
34017: CALL_OW 325
34021: IFFALSE 34048
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
34023: LD_ADDR_VAR 0 2
34027: PUSH
34028: LD_INT 5
34030: PUSH
34031: LD_INT 8
34033: PUSH
34034: LD_INT 9
34036: PUSH
34037: EMPTY
34038: LIST
34039: LIST
34040: LIST
34041: PUSH
34042: LD_VAR 0 4
34046: ARRAY
34047: ST_TO_ADDR
// end ;
34048: LD_VAR 0 2
34052: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
34053: LD_INT 0
34055: PPUSH
34056: PPUSH
34057: PPUSH
// if not mines then
34058: LD_VAR 0 2
34062: NOT
34063: IFFALSE 34067
// exit ;
34065: GO 34211
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34067: LD_ADDR_VAR 0 5
34071: PUSH
34072: LD_INT 81
34074: PUSH
34075: LD_VAR 0 1
34079: PUSH
34080: EMPTY
34081: LIST
34082: LIST
34083: PUSH
34084: LD_INT 3
34086: PUSH
34087: LD_INT 21
34089: PUSH
34090: LD_INT 3
34092: PUSH
34093: EMPTY
34094: LIST
34095: LIST
34096: PUSH
34097: EMPTY
34098: LIST
34099: LIST
34100: PUSH
34101: EMPTY
34102: LIST
34103: LIST
34104: PPUSH
34105: CALL_OW 69
34109: ST_TO_ADDR
// for i in mines do
34110: LD_ADDR_VAR 0 4
34114: PUSH
34115: LD_VAR 0 2
34119: PUSH
34120: FOR_IN
34121: IFFALSE 34209
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
34123: LD_VAR 0 4
34127: PUSH
34128: LD_INT 1
34130: ARRAY
34131: PPUSH
34132: LD_VAR 0 4
34136: PUSH
34137: LD_INT 2
34139: ARRAY
34140: PPUSH
34141: CALL_OW 458
34145: NOT
34146: IFFALSE 34150
// continue ;
34148: GO 34120
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
34150: LD_VAR 0 4
34154: PUSH
34155: LD_INT 1
34157: ARRAY
34158: PPUSH
34159: LD_VAR 0 4
34163: PUSH
34164: LD_INT 2
34166: ARRAY
34167: PPUSH
34168: CALL_OW 428
34172: PUSH
34173: LD_VAR 0 5
34177: IN
34178: IFFALSE 34207
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
34180: LD_VAR 0 4
34184: PUSH
34185: LD_INT 1
34187: ARRAY
34188: PPUSH
34189: LD_VAR 0 4
34193: PUSH
34194: LD_INT 2
34196: ARRAY
34197: PPUSH
34198: LD_VAR 0 1
34202: PPUSH
34203: CALL_OW 456
// end ;
34207: GO 34120
34209: POP
34210: POP
// end ;
34211: LD_VAR 0 3
34215: RET
// export function Count ( array ) ; var i ; begin
34216: LD_INT 0
34218: PPUSH
34219: PPUSH
// result := 0 ;
34220: LD_ADDR_VAR 0 2
34224: PUSH
34225: LD_INT 0
34227: ST_TO_ADDR
// for i in array do
34228: LD_ADDR_VAR 0 3
34232: PUSH
34233: LD_VAR 0 1
34237: PUSH
34238: FOR_IN
34239: IFFALSE 34263
// if i then
34241: LD_VAR 0 3
34245: IFFALSE 34261
// result := result + 1 ;
34247: LD_ADDR_VAR 0 2
34251: PUSH
34252: LD_VAR 0 2
34256: PUSH
34257: LD_INT 1
34259: PLUS
34260: ST_TO_ADDR
34261: GO 34238
34263: POP
34264: POP
// end ;
34265: LD_VAR 0 2
34269: RET
// export function IsEmpty ( building ) ; begin
34270: LD_INT 0
34272: PPUSH
// if not building then
34273: LD_VAR 0 1
34277: NOT
34278: IFFALSE 34282
// exit ;
34280: GO 34325
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
34282: LD_ADDR_VAR 0 2
34286: PUSH
34287: LD_VAR 0 1
34291: PUSH
34292: LD_INT 22
34294: PUSH
34295: LD_VAR 0 1
34299: PPUSH
34300: CALL_OW 255
34304: PUSH
34305: EMPTY
34306: LIST
34307: LIST
34308: PUSH
34309: LD_INT 58
34311: PUSH
34312: EMPTY
34313: LIST
34314: PUSH
34315: EMPTY
34316: LIST
34317: LIST
34318: PPUSH
34319: CALL_OW 69
34323: IN
34324: ST_TO_ADDR
// end ;
34325: LD_VAR 0 2
34329: RET
// export function IsNotFull ( building ) ; var places ; begin
34330: LD_INT 0
34332: PPUSH
34333: PPUSH
// if not building then
34334: LD_VAR 0 1
34338: NOT
34339: IFFALSE 34343
// exit ;
34341: GO 34514
// result := false ;
34343: LD_ADDR_VAR 0 2
34347: PUSH
34348: LD_INT 0
34350: ST_TO_ADDR
// places := 0 ;
34351: LD_ADDR_VAR 0 3
34355: PUSH
34356: LD_INT 0
34358: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
34359: LD_VAR 0 1
34363: PPUSH
34364: CALL_OW 266
34368: PUSH
34369: LD_INT 0
34371: DOUBLE
34372: EQUAL
34373: IFTRUE 34431
34375: LD_INT 1
34377: DOUBLE
34378: EQUAL
34379: IFTRUE 34431
34381: LD_INT 6
34383: DOUBLE
34384: EQUAL
34385: IFTRUE 34431
34387: LD_INT 7
34389: DOUBLE
34390: EQUAL
34391: IFTRUE 34431
34393: LD_INT 8
34395: DOUBLE
34396: EQUAL
34397: IFTRUE 34431
34399: LD_INT 4
34401: DOUBLE
34402: EQUAL
34403: IFTRUE 34431
34405: LD_INT 5
34407: DOUBLE
34408: EQUAL
34409: IFTRUE 34431
34411: LD_INT 2
34413: DOUBLE
34414: EQUAL
34415: IFTRUE 34431
34417: LD_INT 3
34419: DOUBLE
34420: EQUAL
34421: IFTRUE 34431
34423: LD_INT 35
34425: DOUBLE
34426: EQUAL
34427: IFTRUE 34431
34429: GO 34442
34431: POP
// places := 6 ; b_bunker , b_breastwork :
34432: LD_ADDR_VAR 0 3
34436: PUSH
34437: LD_INT 6
34439: ST_TO_ADDR
34440: GO 34487
34442: LD_INT 32
34444: DOUBLE
34445: EQUAL
34446: IFTRUE 34456
34448: LD_INT 31
34450: DOUBLE
34451: EQUAL
34452: IFTRUE 34456
34454: GO 34467
34456: POP
// places := 1 ; b_control_tower :
34457: LD_ADDR_VAR 0 3
34461: PUSH
34462: LD_INT 1
34464: ST_TO_ADDR
34465: GO 34487
34467: LD_INT 36
34469: DOUBLE
34470: EQUAL
34471: IFTRUE 34475
34473: GO 34486
34475: POP
// places := 3 ; end ;
34476: LD_ADDR_VAR 0 3
34480: PUSH
34481: LD_INT 3
34483: ST_TO_ADDR
34484: GO 34487
34486: POP
// if places then
34487: LD_VAR 0 3
34491: IFFALSE 34514
// result := UnitsInside ( building ) < places ;
34493: LD_ADDR_VAR 0 2
34497: PUSH
34498: LD_VAR 0 1
34502: PPUSH
34503: CALL_OW 313
34507: PUSH
34508: LD_VAR 0 3
34512: LESS
34513: ST_TO_ADDR
// end ;
34514: LD_VAR 0 2
34518: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
34519: LD_INT 0
34521: PPUSH
34522: PPUSH
34523: PPUSH
34524: PPUSH
// tmp := [ ] ;
34525: LD_ADDR_VAR 0 3
34529: PUSH
34530: EMPTY
34531: ST_TO_ADDR
// list := [ ] ;
34532: LD_ADDR_VAR 0 5
34536: PUSH
34537: EMPTY
34538: ST_TO_ADDR
// for i = 16 to 25 do
34539: LD_ADDR_VAR 0 4
34543: PUSH
34544: DOUBLE
34545: LD_INT 16
34547: DEC
34548: ST_TO_ADDR
34549: LD_INT 25
34551: PUSH
34552: FOR_TO
34553: IFFALSE 34626
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
34555: LD_ADDR_VAR 0 3
34559: PUSH
34560: LD_VAR 0 3
34564: PUSH
34565: LD_INT 22
34567: PUSH
34568: LD_VAR 0 1
34572: PPUSH
34573: CALL_OW 255
34577: PUSH
34578: EMPTY
34579: LIST
34580: LIST
34581: PUSH
34582: LD_INT 91
34584: PUSH
34585: LD_VAR 0 1
34589: PUSH
34590: LD_INT 6
34592: PUSH
34593: EMPTY
34594: LIST
34595: LIST
34596: LIST
34597: PUSH
34598: LD_INT 30
34600: PUSH
34601: LD_VAR 0 4
34605: PUSH
34606: EMPTY
34607: LIST
34608: LIST
34609: PUSH
34610: EMPTY
34611: LIST
34612: LIST
34613: LIST
34614: PUSH
34615: EMPTY
34616: LIST
34617: PPUSH
34618: CALL_OW 69
34622: ADD
34623: ST_TO_ADDR
34624: GO 34552
34626: POP
34627: POP
// for i = 1 to tmp do
34628: LD_ADDR_VAR 0 4
34632: PUSH
34633: DOUBLE
34634: LD_INT 1
34636: DEC
34637: ST_TO_ADDR
34638: LD_VAR 0 3
34642: PUSH
34643: FOR_TO
34644: IFFALSE 34732
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
34646: LD_ADDR_VAR 0 5
34650: PUSH
34651: LD_VAR 0 5
34655: PUSH
34656: LD_VAR 0 3
34660: PUSH
34661: LD_VAR 0 4
34665: ARRAY
34666: PPUSH
34667: CALL_OW 266
34671: PUSH
34672: LD_VAR 0 3
34676: PUSH
34677: LD_VAR 0 4
34681: ARRAY
34682: PPUSH
34683: CALL_OW 250
34687: PUSH
34688: LD_VAR 0 3
34692: PUSH
34693: LD_VAR 0 4
34697: ARRAY
34698: PPUSH
34699: CALL_OW 251
34703: PUSH
34704: LD_VAR 0 3
34708: PUSH
34709: LD_VAR 0 4
34713: ARRAY
34714: PPUSH
34715: CALL_OW 254
34719: PUSH
34720: EMPTY
34721: LIST
34722: LIST
34723: LIST
34724: LIST
34725: PUSH
34726: EMPTY
34727: LIST
34728: ADD
34729: ST_TO_ADDR
34730: GO 34643
34732: POP
34733: POP
// result := list ;
34734: LD_ADDR_VAR 0 2
34738: PUSH
34739: LD_VAR 0 5
34743: ST_TO_ADDR
// end ;
34744: LD_VAR 0 2
34748: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
34749: LD_INT 0
34751: PPUSH
34752: PPUSH
34753: PPUSH
34754: PPUSH
34755: PPUSH
34756: PPUSH
34757: PPUSH
// if not factory then
34758: LD_VAR 0 1
34762: NOT
34763: IFFALSE 34767
// exit ;
34765: GO 35360
// if control = control_apeman then
34767: LD_VAR 0 4
34771: PUSH
34772: LD_INT 5
34774: EQUAL
34775: IFFALSE 34884
// begin tmp := UnitsInside ( factory ) ;
34777: LD_ADDR_VAR 0 8
34781: PUSH
34782: LD_VAR 0 1
34786: PPUSH
34787: CALL_OW 313
34791: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
34792: LD_VAR 0 8
34796: PPUSH
34797: LD_INT 25
34799: PUSH
34800: LD_INT 12
34802: PUSH
34803: EMPTY
34804: LIST
34805: LIST
34806: PPUSH
34807: CALL_OW 72
34811: NOT
34812: IFFALSE 34822
// control := control_manual ;
34814: LD_ADDR_VAR 0 4
34818: PUSH
34819: LD_INT 1
34821: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
34822: LD_ADDR_VAR 0 8
34826: PUSH
34827: LD_VAR 0 1
34831: PPUSH
34832: CALL 34519 0 1
34836: ST_TO_ADDR
// if tmp then
34837: LD_VAR 0 8
34841: IFFALSE 34884
// begin for i in tmp do
34843: LD_ADDR_VAR 0 7
34847: PUSH
34848: LD_VAR 0 8
34852: PUSH
34853: FOR_IN
34854: IFFALSE 34882
// if i [ 1 ] = b_ext_radio then
34856: LD_VAR 0 7
34860: PUSH
34861: LD_INT 1
34863: ARRAY
34864: PUSH
34865: LD_INT 22
34867: EQUAL
34868: IFFALSE 34880
// begin control := control_remote ;
34870: LD_ADDR_VAR 0 4
34874: PUSH
34875: LD_INT 2
34877: ST_TO_ADDR
// break ;
34878: GO 34882
// end ;
34880: GO 34853
34882: POP
34883: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
34884: LD_VAR 0 1
34888: PPUSH
34889: LD_VAR 0 2
34893: PPUSH
34894: LD_VAR 0 3
34898: PPUSH
34899: LD_VAR 0 4
34903: PPUSH
34904: LD_VAR 0 5
34908: PPUSH
34909: CALL_OW 448
34913: IFFALSE 34948
// begin result := [ chassis , engine , control , weapon ] ;
34915: LD_ADDR_VAR 0 6
34919: PUSH
34920: LD_VAR 0 2
34924: PUSH
34925: LD_VAR 0 3
34929: PUSH
34930: LD_VAR 0 4
34934: PUSH
34935: LD_VAR 0 5
34939: PUSH
34940: EMPTY
34941: LIST
34942: LIST
34943: LIST
34944: LIST
34945: ST_TO_ADDR
// exit ;
34946: GO 35360
// end ; _chassis := AvailableChassisList ( factory ) ;
34948: LD_ADDR_VAR 0 9
34952: PUSH
34953: LD_VAR 0 1
34957: PPUSH
34958: CALL_OW 475
34962: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
34963: LD_ADDR_VAR 0 11
34967: PUSH
34968: LD_VAR 0 1
34972: PPUSH
34973: CALL_OW 476
34977: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
34978: LD_ADDR_VAR 0 12
34982: PUSH
34983: LD_VAR 0 1
34987: PPUSH
34988: CALL_OW 477
34992: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
34993: LD_ADDR_VAR 0 10
34997: PUSH
34998: LD_VAR 0 1
35002: PPUSH
35003: CALL_OW 478
35007: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
35008: LD_VAR 0 9
35012: NOT
35013: PUSH
35014: LD_VAR 0 11
35018: NOT
35019: OR
35020: PUSH
35021: LD_VAR 0 12
35025: NOT
35026: OR
35027: PUSH
35028: LD_VAR 0 10
35032: NOT
35033: OR
35034: IFFALSE 35069
// begin result := [ chassis , engine , control , weapon ] ;
35036: LD_ADDR_VAR 0 6
35040: PUSH
35041: LD_VAR 0 2
35045: PUSH
35046: LD_VAR 0 3
35050: PUSH
35051: LD_VAR 0 4
35055: PUSH
35056: LD_VAR 0 5
35060: PUSH
35061: EMPTY
35062: LIST
35063: LIST
35064: LIST
35065: LIST
35066: ST_TO_ADDR
// exit ;
35067: GO 35360
// end ; if not chassis in _chassis then
35069: LD_VAR 0 2
35073: PUSH
35074: LD_VAR 0 9
35078: IN
35079: NOT
35080: IFFALSE 35106
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
35082: LD_ADDR_VAR 0 2
35086: PUSH
35087: LD_VAR 0 9
35091: PUSH
35092: LD_INT 1
35094: PPUSH
35095: LD_VAR 0 9
35099: PPUSH
35100: CALL_OW 12
35104: ARRAY
35105: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
35106: LD_VAR 0 2
35110: PPUSH
35111: LD_VAR 0 3
35115: PPUSH
35116: CALL 35365 0 2
35120: NOT
35121: IFFALSE 35180
// repeat engine := _engine [ 1 ] ;
35123: LD_ADDR_VAR 0 3
35127: PUSH
35128: LD_VAR 0 11
35132: PUSH
35133: LD_INT 1
35135: ARRAY
35136: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
35137: LD_ADDR_VAR 0 11
35141: PUSH
35142: LD_VAR 0 11
35146: PPUSH
35147: LD_INT 1
35149: PPUSH
35150: CALL_OW 3
35154: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
35155: LD_VAR 0 2
35159: PPUSH
35160: LD_VAR 0 3
35164: PPUSH
35165: CALL 35365 0 2
35169: PUSH
35170: LD_VAR 0 11
35174: PUSH
35175: EMPTY
35176: EQUAL
35177: OR
35178: IFFALSE 35123
// if not control in _control then
35180: LD_VAR 0 4
35184: PUSH
35185: LD_VAR 0 12
35189: IN
35190: NOT
35191: IFFALSE 35217
// control := _control [ rand ( 1 , _control ) ] ;
35193: LD_ADDR_VAR 0 4
35197: PUSH
35198: LD_VAR 0 12
35202: PUSH
35203: LD_INT 1
35205: PPUSH
35206: LD_VAR 0 12
35210: PPUSH
35211: CALL_OW 12
35215: ARRAY
35216: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
35217: LD_VAR 0 2
35221: PPUSH
35222: LD_VAR 0 5
35226: PPUSH
35227: CALL 35585 0 2
35231: NOT
35232: IFFALSE 35291
// repeat weapon := _weapon [ 1 ] ;
35234: LD_ADDR_VAR 0 5
35238: PUSH
35239: LD_VAR 0 10
35243: PUSH
35244: LD_INT 1
35246: ARRAY
35247: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
35248: LD_ADDR_VAR 0 10
35252: PUSH
35253: LD_VAR 0 10
35257: PPUSH
35258: LD_INT 1
35260: PPUSH
35261: CALL_OW 3
35265: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
35266: LD_VAR 0 2
35270: PPUSH
35271: LD_VAR 0 5
35275: PPUSH
35276: CALL 35585 0 2
35280: PUSH
35281: LD_VAR 0 10
35285: PUSH
35286: EMPTY
35287: EQUAL
35288: OR
35289: IFFALSE 35234
// result := [ ] ;
35291: LD_ADDR_VAR 0 6
35295: PUSH
35296: EMPTY
35297: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
35298: LD_VAR 0 1
35302: PPUSH
35303: LD_VAR 0 2
35307: PPUSH
35308: LD_VAR 0 3
35312: PPUSH
35313: LD_VAR 0 4
35317: PPUSH
35318: LD_VAR 0 5
35322: PPUSH
35323: CALL_OW 448
35327: IFFALSE 35360
// result := [ chassis , engine , control , weapon ] ;
35329: LD_ADDR_VAR 0 6
35333: PUSH
35334: LD_VAR 0 2
35338: PUSH
35339: LD_VAR 0 3
35343: PUSH
35344: LD_VAR 0 4
35348: PUSH
35349: LD_VAR 0 5
35353: PUSH
35354: EMPTY
35355: LIST
35356: LIST
35357: LIST
35358: LIST
35359: ST_TO_ADDR
// end ;
35360: LD_VAR 0 6
35364: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
35365: LD_INT 0
35367: PPUSH
// if not chassis or not engine then
35368: LD_VAR 0 1
35372: NOT
35373: PUSH
35374: LD_VAR 0 2
35378: NOT
35379: OR
35380: IFFALSE 35384
// exit ;
35382: GO 35580
// case engine of engine_solar :
35384: LD_VAR 0 2
35388: PUSH
35389: LD_INT 2
35391: DOUBLE
35392: EQUAL
35393: IFTRUE 35397
35395: GO 35435
35397: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
35398: LD_ADDR_VAR 0 3
35402: PUSH
35403: LD_INT 11
35405: PUSH
35406: LD_INT 12
35408: PUSH
35409: LD_INT 13
35411: PUSH
35412: LD_INT 14
35414: PUSH
35415: LD_INT 1
35417: PUSH
35418: LD_INT 2
35420: PUSH
35421: LD_INT 3
35423: PUSH
35424: EMPTY
35425: LIST
35426: LIST
35427: LIST
35428: LIST
35429: LIST
35430: LIST
35431: LIST
35432: ST_TO_ADDR
35433: GO 35564
35435: LD_INT 1
35437: DOUBLE
35438: EQUAL
35439: IFTRUE 35443
35441: GO 35505
35443: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
35444: LD_ADDR_VAR 0 3
35448: PUSH
35449: LD_INT 11
35451: PUSH
35452: LD_INT 12
35454: PUSH
35455: LD_INT 13
35457: PUSH
35458: LD_INT 14
35460: PUSH
35461: LD_INT 1
35463: PUSH
35464: LD_INT 2
35466: PUSH
35467: LD_INT 3
35469: PUSH
35470: LD_INT 4
35472: PUSH
35473: LD_INT 5
35475: PUSH
35476: LD_INT 21
35478: PUSH
35479: LD_INT 23
35481: PUSH
35482: LD_INT 22
35484: PUSH
35485: LD_INT 24
35487: PUSH
35488: EMPTY
35489: LIST
35490: LIST
35491: LIST
35492: LIST
35493: LIST
35494: LIST
35495: LIST
35496: LIST
35497: LIST
35498: LIST
35499: LIST
35500: LIST
35501: LIST
35502: ST_TO_ADDR
35503: GO 35564
35505: LD_INT 3
35507: DOUBLE
35508: EQUAL
35509: IFTRUE 35513
35511: GO 35563
35513: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
35514: LD_ADDR_VAR 0 3
35518: PUSH
35519: LD_INT 13
35521: PUSH
35522: LD_INT 14
35524: PUSH
35525: LD_INT 2
35527: PUSH
35528: LD_INT 3
35530: PUSH
35531: LD_INT 4
35533: PUSH
35534: LD_INT 5
35536: PUSH
35537: LD_INT 21
35539: PUSH
35540: LD_INT 22
35542: PUSH
35543: LD_INT 23
35545: PUSH
35546: LD_INT 24
35548: PUSH
35549: EMPTY
35550: LIST
35551: LIST
35552: LIST
35553: LIST
35554: LIST
35555: LIST
35556: LIST
35557: LIST
35558: LIST
35559: LIST
35560: ST_TO_ADDR
35561: GO 35564
35563: POP
// result := ( chassis in result ) ;
35564: LD_ADDR_VAR 0 3
35568: PUSH
35569: LD_VAR 0 1
35573: PUSH
35574: LD_VAR 0 3
35578: IN
35579: ST_TO_ADDR
// end ;
35580: LD_VAR 0 3
35584: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
35585: LD_INT 0
35587: PPUSH
// if not chassis or not weapon then
35588: LD_VAR 0 1
35592: NOT
35593: PUSH
35594: LD_VAR 0 2
35598: NOT
35599: OR
35600: IFFALSE 35604
// exit ;
35602: GO 36664
// case weapon of us_machine_gun :
35604: LD_VAR 0 2
35608: PUSH
35609: LD_INT 2
35611: DOUBLE
35612: EQUAL
35613: IFTRUE 35617
35615: GO 35647
35617: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
35618: LD_ADDR_VAR 0 3
35622: PUSH
35623: LD_INT 1
35625: PUSH
35626: LD_INT 2
35628: PUSH
35629: LD_INT 3
35631: PUSH
35632: LD_INT 4
35634: PUSH
35635: LD_INT 5
35637: PUSH
35638: EMPTY
35639: LIST
35640: LIST
35641: LIST
35642: LIST
35643: LIST
35644: ST_TO_ADDR
35645: GO 36648
35647: LD_INT 3
35649: DOUBLE
35650: EQUAL
35651: IFTRUE 35655
35653: GO 35685
35655: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
35656: LD_ADDR_VAR 0 3
35660: PUSH
35661: LD_INT 1
35663: PUSH
35664: LD_INT 2
35666: PUSH
35667: LD_INT 3
35669: PUSH
35670: LD_INT 4
35672: PUSH
35673: LD_INT 5
35675: PUSH
35676: EMPTY
35677: LIST
35678: LIST
35679: LIST
35680: LIST
35681: LIST
35682: ST_TO_ADDR
35683: GO 36648
35685: LD_INT 11
35687: DOUBLE
35688: EQUAL
35689: IFTRUE 35693
35691: GO 35723
35693: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
35694: LD_ADDR_VAR 0 3
35698: PUSH
35699: LD_INT 1
35701: PUSH
35702: LD_INT 2
35704: PUSH
35705: LD_INT 3
35707: PUSH
35708: LD_INT 4
35710: PUSH
35711: LD_INT 5
35713: PUSH
35714: EMPTY
35715: LIST
35716: LIST
35717: LIST
35718: LIST
35719: LIST
35720: ST_TO_ADDR
35721: GO 36648
35723: LD_INT 4
35725: DOUBLE
35726: EQUAL
35727: IFTRUE 35731
35729: GO 35757
35731: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
35732: LD_ADDR_VAR 0 3
35736: PUSH
35737: LD_INT 2
35739: PUSH
35740: LD_INT 3
35742: PUSH
35743: LD_INT 4
35745: PUSH
35746: LD_INT 5
35748: PUSH
35749: EMPTY
35750: LIST
35751: LIST
35752: LIST
35753: LIST
35754: ST_TO_ADDR
35755: GO 36648
35757: LD_INT 5
35759: DOUBLE
35760: EQUAL
35761: IFTRUE 35765
35763: GO 35791
35765: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
35766: LD_ADDR_VAR 0 3
35770: PUSH
35771: LD_INT 2
35773: PUSH
35774: LD_INT 3
35776: PUSH
35777: LD_INT 4
35779: PUSH
35780: LD_INT 5
35782: PUSH
35783: EMPTY
35784: LIST
35785: LIST
35786: LIST
35787: LIST
35788: ST_TO_ADDR
35789: GO 36648
35791: LD_INT 9
35793: DOUBLE
35794: EQUAL
35795: IFTRUE 35799
35797: GO 35825
35799: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
35800: LD_ADDR_VAR 0 3
35804: PUSH
35805: LD_INT 2
35807: PUSH
35808: LD_INT 3
35810: PUSH
35811: LD_INT 4
35813: PUSH
35814: LD_INT 5
35816: PUSH
35817: EMPTY
35818: LIST
35819: LIST
35820: LIST
35821: LIST
35822: ST_TO_ADDR
35823: GO 36648
35825: LD_INT 7
35827: DOUBLE
35828: EQUAL
35829: IFTRUE 35833
35831: GO 35859
35833: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
35834: LD_ADDR_VAR 0 3
35838: PUSH
35839: LD_INT 2
35841: PUSH
35842: LD_INT 3
35844: PUSH
35845: LD_INT 4
35847: PUSH
35848: LD_INT 5
35850: PUSH
35851: EMPTY
35852: LIST
35853: LIST
35854: LIST
35855: LIST
35856: ST_TO_ADDR
35857: GO 36648
35859: LD_INT 12
35861: DOUBLE
35862: EQUAL
35863: IFTRUE 35867
35865: GO 35893
35867: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
35868: LD_ADDR_VAR 0 3
35872: PUSH
35873: LD_INT 2
35875: PUSH
35876: LD_INT 3
35878: PUSH
35879: LD_INT 4
35881: PUSH
35882: LD_INT 5
35884: PUSH
35885: EMPTY
35886: LIST
35887: LIST
35888: LIST
35889: LIST
35890: ST_TO_ADDR
35891: GO 36648
35893: LD_INT 13
35895: DOUBLE
35896: EQUAL
35897: IFTRUE 35901
35899: GO 35927
35901: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
35902: LD_ADDR_VAR 0 3
35906: PUSH
35907: LD_INT 2
35909: PUSH
35910: LD_INT 3
35912: PUSH
35913: LD_INT 4
35915: PUSH
35916: LD_INT 5
35918: PUSH
35919: EMPTY
35920: LIST
35921: LIST
35922: LIST
35923: LIST
35924: ST_TO_ADDR
35925: GO 36648
35927: LD_INT 14
35929: DOUBLE
35930: EQUAL
35931: IFTRUE 35935
35933: GO 35953
35935: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
35936: LD_ADDR_VAR 0 3
35940: PUSH
35941: LD_INT 4
35943: PUSH
35944: LD_INT 5
35946: PUSH
35947: EMPTY
35948: LIST
35949: LIST
35950: ST_TO_ADDR
35951: GO 36648
35953: LD_INT 6
35955: DOUBLE
35956: EQUAL
35957: IFTRUE 35961
35959: GO 35979
35961: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
35962: LD_ADDR_VAR 0 3
35966: PUSH
35967: LD_INT 4
35969: PUSH
35970: LD_INT 5
35972: PUSH
35973: EMPTY
35974: LIST
35975: LIST
35976: ST_TO_ADDR
35977: GO 36648
35979: LD_INT 10
35981: DOUBLE
35982: EQUAL
35983: IFTRUE 35987
35985: GO 36005
35987: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
35988: LD_ADDR_VAR 0 3
35992: PUSH
35993: LD_INT 4
35995: PUSH
35996: LD_INT 5
35998: PUSH
35999: EMPTY
36000: LIST
36001: LIST
36002: ST_TO_ADDR
36003: GO 36648
36005: LD_INT 22
36007: DOUBLE
36008: EQUAL
36009: IFTRUE 36013
36011: GO 36039
36013: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
36014: LD_ADDR_VAR 0 3
36018: PUSH
36019: LD_INT 11
36021: PUSH
36022: LD_INT 12
36024: PUSH
36025: LD_INT 13
36027: PUSH
36028: LD_INT 14
36030: PUSH
36031: EMPTY
36032: LIST
36033: LIST
36034: LIST
36035: LIST
36036: ST_TO_ADDR
36037: GO 36648
36039: LD_INT 23
36041: DOUBLE
36042: EQUAL
36043: IFTRUE 36047
36045: GO 36073
36047: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
36048: LD_ADDR_VAR 0 3
36052: PUSH
36053: LD_INT 11
36055: PUSH
36056: LD_INT 12
36058: PUSH
36059: LD_INT 13
36061: PUSH
36062: LD_INT 14
36064: PUSH
36065: EMPTY
36066: LIST
36067: LIST
36068: LIST
36069: LIST
36070: ST_TO_ADDR
36071: GO 36648
36073: LD_INT 24
36075: DOUBLE
36076: EQUAL
36077: IFTRUE 36081
36079: GO 36107
36081: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
36082: LD_ADDR_VAR 0 3
36086: PUSH
36087: LD_INT 11
36089: PUSH
36090: LD_INT 12
36092: PUSH
36093: LD_INT 13
36095: PUSH
36096: LD_INT 14
36098: PUSH
36099: EMPTY
36100: LIST
36101: LIST
36102: LIST
36103: LIST
36104: ST_TO_ADDR
36105: GO 36648
36107: LD_INT 30
36109: DOUBLE
36110: EQUAL
36111: IFTRUE 36115
36113: GO 36141
36115: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
36116: LD_ADDR_VAR 0 3
36120: PUSH
36121: LD_INT 11
36123: PUSH
36124: LD_INT 12
36126: PUSH
36127: LD_INT 13
36129: PUSH
36130: LD_INT 14
36132: PUSH
36133: EMPTY
36134: LIST
36135: LIST
36136: LIST
36137: LIST
36138: ST_TO_ADDR
36139: GO 36648
36141: LD_INT 25
36143: DOUBLE
36144: EQUAL
36145: IFTRUE 36149
36147: GO 36167
36149: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
36150: LD_ADDR_VAR 0 3
36154: PUSH
36155: LD_INT 13
36157: PUSH
36158: LD_INT 14
36160: PUSH
36161: EMPTY
36162: LIST
36163: LIST
36164: ST_TO_ADDR
36165: GO 36648
36167: LD_INT 27
36169: DOUBLE
36170: EQUAL
36171: IFTRUE 36175
36173: GO 36193
36175: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
36176: LD_ADDR_VAR 0 3
36180: PUSH
36181: LD_INT 13
36183: PUSH
36184: LD_INT 14
36186: PUSH
36187: EMPTY
36188: LIST
36189: LIST
36190: ST_TO_ADDR
36191: GO 36648
36193: LD_INT 92
36195: DOUBLE
36196: EQUAL
36197: IFTRUE 36201
36199: GO 36227
36201: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
36202: LD_ADDR_VAR 0 3
36206: PUSH
36207: LD_INT 11
36209: PUSH
36210: LD_INT 12
36212: PUSH
36213: LD_INT 13
36215: PUSH
36216: LD_INT 14
36218: PUSH
36219: EMPTY
36220: LIST
36221: LIST
36222: LIST
36223: LIST
36224: ST_TO_ADDR
36225: GO 36648
36227: LD_INT 28
36229: DOUBLE
36230: EQUAL
36231: IFTRUE 36235
36233: GO 36253
36235: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
36236: LD_ADDR_VAR 0 3
36240: PUSH
36241: LD_INT 13
36243: PUSH
36244: LD_INT 14
36246: PUSH
36247: EMPTY
36248: LIST
36249: LIST
36250: ST_TO_ADDR
36251: GO 36648
36253: LD_INT 29
36255: DOUBLE
36256: EQUAL
36257: IFTRUE 36261
36259: GO 36279
36261: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
36262: LD_ADDR_VAR 0 3
36266: PUSH
36267: LD_INT 13
36269: PUSH
36270: LD_INT 14
36272: PUSH
36273: EMPTY
36274: LIST
36275: LIST
36276: ST_TO_ADDR
36277: GO 36648
36279: LD_INT 31
36281: DOUBLE
36282: EQUAL
36283: IFTRUE 36287
36285: GO 36305
36287: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
36288: LD_ADDR_VAR 0 3
36292: PUSH
36293: LD_INT 13
36295: PUSH
36296: LD_INT 14
36298: PUSH
36299: EMPTY
36300: LIST
36301: LIST
36302: ST_TO_ADDR
36303: GO 36648
36305: LD_INT 26
36307: DOUBLE
36308: EQUAL
36309: IFTRUE 36313
36311: GO 36331
36313: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
36314: LD_ADDR_VAR 0 3
36318: PUSH
36319: LD_INT 13
36321: PUSH
36322: LD_INT 14
36324: PUSH
36325: EMPTY
36326: LIST
36327: LIST
36328: ST_TO_ADDR
36329: GO 36648
36331: LD_INT 42
36333: DOUBLE
36334: EQUAL
36335: IFTRUE 36339
36337: GO 36365
36339: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
36340: LD_ADDR_VAR 0 3
36344: PUSH
36345: LD_INT 21
36347: PUSH
36348: LD_INT 22
36350: PUSH
36351: LD_INT 23
36353: PUSH
36354: LD_INT 24
36356: PUSH
36357: EMPTY
36358: LIST
36359: LIST
36360: LIST
36361: LIST
36362: ST_TO_ADDR
36363: GO 36648
36365: LD_INT 43
36367: DOUBLE
36368: EQUAL
36369: IFTRUE 36373
36371: GO 36399
36373: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
36374: LD_ADDR_VAR 0 3
36378: PUSH
36379: LD_INT 21
36381: PUSH
36382: LD_INT 22
36384: PUSH
36385: LD_INT 23
36387: PUSH
36388: LD_INT 24
36390: PUSH
36391: EMPTY
36392: LIST
36393: LIST
36394: LIST
36395: LIST
36396: ST_TO_ADDR
36397: GO 36648
36399: LD_INT 44
36401: DOUBLE
36402: EQUAL
36403: IFTRUE 36407
36405: GO 36433
36407: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
36408: LD_ADDR_VAR 0 3
36412: PUSH
36413: LD_INT 21
36415: PUSH
36416: LD_INT 22
36418: PUSH
36419: LD_INT 23
36421: PUSH
36422: LD_INT 24
36424: PUSH
36425: EMPTY
36426: LIST
36427: LIST
36428: LIST
36429: LIST
36430: ST_TO_ADDR
36431: GO 36648
36433: LD_INT 45
36435: DOUBLE
36436: EQUAL
36437: IFTRUE 36441
36439: GO 36467
36441: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
36442: LD_ADDR_VAR 0 3
36446: PUSH
36447: LD_INT 21
36449: PUSH
36450: LD_INT 22
36452: PUSH
36453: LD_INT 23
36455: PUSH
36456: LD_INT 24
36458: PUSH
36459: EMPTY
36460: LIST
36461: LIST
36462: LIST
36463: LIST
36464: ST_TO_ADDR
36465: GO 36648
36467: LD_INT 49
36469: DOUBLE
36470: EQUAL
36471: IFTRUE 36475
36473: GO 36501
36475: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
36476: LD_ADDR_VAR 0 3
36480: PUSH
36481: LD_INT 21
36483: PUSH
36484: LD_INT 22
36486: PUSH
36487: LD_INT 23
36489: PUSH
36490: LD_INT 24
36492: PUSH
36493: EMPTY
36494: LIST
36495: LIST
36496: LIST
36497: LIST
36498: ST_TO_ADDR
36499: GO 36648
36501: LD_INT 51
36503: DOUBLE
36504: EQUAL
36505: IFTRUE 36509
36507: GO 36535
36509: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
36510: LD_ADDR_VAR 0 3
36514: PUSH
36515: LD_INT 21
36517: PUSH
36518: LD_INT 22
36520: PUSH
36521: LD_INT 23
36523: PUSH
36524: LD_INT 24
36526: PUSH
36527: EMPTY
36528: LIST
36529: LIST
36530: LIST
36531: LIST
36532: ST_TO_ADDR
36533: GO 36648
36535: LD_INT 52
36537: DOUBLE
36538: EQUAL
36539: IFTRUE 36543
36541: GO 36569
36543: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
36544: LD_ADDR_VAR 0 3
36548: PUSH
36549: LD_INT 21
36551: PUSH
36552: LD_INT 22
36554: PUSH
36555: LD_INT 23
36557: PUSH
36558: LD_INT 24
36560: PUSH
36561: EMPTY
36562: LIST
36563: LIST
36564: LIST
36565: LIST
36566: ST_TO_ADDR
36567: GO 36648
36569: LD_INT 53
36571: DOUBLE
36572: EQUAL
36573: IFTRUE 36577
36575: GO 36595
36577: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
36578: LD_ADDR_VAR 0 3
36582: PUSH
36583: LD_INT 23
36585: PUSH
36586: LD_INT 24
36588: PUSH
36589: EMPTY
36590: LIST
36591: LIST
36592: ST_TO_ADDR
36593: GO 36648
36595: LD_INT 46
36597: DOUBLE
36598: EQUAL
36599: IFTRUE 36603
36601: GO 36621
36603: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
36604: LD_ADDR_VAR 0 3
36608: PUSH
36609: LD_INT 23
36611: PUSH
36612: LD_INT 24
36614: PUSH
36615: EMPTY
36616: LIST
36617: LIST
36618: ST_TO_ADDR
36619: GO 36648
36621: LD_INT 47
36623: DOUBLE
36624: EQUAL
36625: IFTRUE 36629
36627: GO 36647
36629: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
36630: LD_ADDR_VAR 0 3
36634: PUSH
36635: LD_INT 23
36637: PUSH
36638: LD_INT 24
36640: PUSH
36641: EMPTY
36642: LIST
36643: LIST
36644: ST_TO_ADDR
36645: GO 36648
36647: POP
// result := ( chassis in result ) ;
36648: LD_ADDR_VAR 0 3
36652: PUSH
36653: LD_VAR 0 1
36657: PUSH
36658: LD_VAR 0 3
36662: IN
36663: ST_TO_ADDR
// end ;
36664: LD_VAR 0 3
36668: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
36669: LD_INT 0
36671: PPUSH
36672: PPUSH
36673: PPUSH
36674: PPUSH
36675: PPUSH
36676: PPUSH
36677: PPUSH
// result := array ;
36678: LD_ADDR_VAR 0 5
36682: PUSH
36683: LD_VAR 0 1
36687: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
36688: LD_VAR 0 1
36692: NOT
36693: PUSH
36694: LD_VAR 0 2
36698: NOT
36699: OR
36700: PUSH
36701: LD_VAR 0 3
36705: NOT
36706: OR
36707: PUSH
36708: LD_VAR 0 2
36712: PUSH
36713: LD_VAR 0 1
36717: GREATER
36718: OR
36719: PUSH
36720: LD_VAR 0 3
36724: PUSH
36725: LD_VAR 0 1
36729: GREATER
36730: OR
36731: IFFALSE 36735
// exit ;
36733: GO 37031
// if direction then
36735: LD_VAR 0 4
36739: IFFALSE 36803
// begin d := 1 ;
36741: LD_ADDR_VAR 0 9
36745: PUSH
36746: LD_INT 1
36748: ST_TO_ADDR
// if i_from > i_to then
36749: LD_VAR 0 2
36753: PUSH
36754: LD_VAR 0 3
36758: GREATER
36759: IFFALSE 36785
// length := ( array - i_from ) + i_to else
36761: LD_ADDR_VAR 0 11
36765: PUSH
36766: LD_VAR 0 1
36770: PUSH
36771: LD_VAR 0 2
36775: MINUS
36776: PUSH
36777: LD_VAR 0 3
36781: PLUS
36782: ST_TO_ADDR
36783: GO 36801
// length := i_to - i_from ;
36785: LD_ADDR_VAR 0 11
36789: PUSH
36790: LD_VAR 0 3
36794: PUSH
36795: LD_VAR 0 2
36799: MINUS
36800: ST_TO_ADDR
// end else
36801: GO 36864
// begin d := - 1 ;
36803: LD_ADDR_VAR 0 9
36807: PUSH
36808: LD_INT 1
36810: NEG
36811: ST_TO_ADDR
// if i_from > i_to then
36812: LD_VAR 0 2
36816: PUSH
36817: LD_VAR 0 3
36821: GREATER
36822: IFFALSE 36842
// length := i_from - i_to else
36824: LD_ADDR_VAR 0 11
36828: PUSH
36829: LD_VAR 0 2
36833: PUSH
36834: LD_VAR 0 3
36838: MINUS
36839: ST_TO_ADDR
36840: GO 36864
// length := ( array - i_to ) + i_from ;
36842: LD_ADDR_VAR 0 11
36846: PUSH
36847: LD_VAR 0 1
36851: PUSH
36852: LD_VAR 0 3
36856: MINUS
36857: PUSH
36858: LD_VAR 0 2
36862: PLUS
36863: ST_TO_ADDR
// end ; if not length then
36864: LD_VAR 0 11
36868: NOT
36869: IFFALSE 36873
// exit ;
36871: GO 37031
// tmp := array ;
36873: LD_ADDR_VAR 0 10
36877: PUSH
36878: LD_VAR 0 1
36882: ST_TO_ADDR
// for i = 1 to length do
36883: LD_ADDR_VAR 0 6
36887: PUSH
36888: DOUBLE
36889: LD_INT 1
36891: DEC
36892: ST_TO_ADDR
36893: LD_VAR 0 11
36897: PUSH
36898: FOR_TO
36899: IFFALSE 37019
// begin for j = 1 to array do
36901: LD_ADDR_VAR 0 7
36905: PUSH
36906: DOUBLE
36907: LD_INT 1
36909: DEC
36910: ST_TO_ADDR
36911: LD_VAR 0 1
36915: PUSH
36916: FOR_TO
36917: IFFALSE 37005
// begin k := j + d ;
36919: LD_ADDR_VAR 0 8
36923: PUSH
36924: LD_VAR 0 7
36928: PUSH
36929: LD_VAR 0 9
36933: PLUS
36934: ST_TO_ADDR
// if k > array then
36935: LD_VAR 0 8
36939: PUSH
36940: LD_VAR 0 1
36944: GREATER
36945: IFFALSE 36955
// k := 1 ;
36947: LD_ADDR_VAR 0 8
36951: PUSH
36952: LD_INT 1
36954: ST_TO_ADDR
// if not k then
36955: LD_VAR 0 8
36959: NOT
36960: IFFALSE 36972
// k := array ;
36962: LD_ADDR_VAR 0 8
36966: PUSH
36967: LD_VAR 0 1
36971: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
36972: LD_ADDR_VAR 0 10
36976: PUSH
36977: LD_VAR 0 10
36981: PPUSH
36982: LD_VAR 0 8
36986: PPUSH
36987: LD_VAR 0 1
36991: PUSH
36992: LD_VAR 0 7
36996: ARRAY
36997: PPUSH
36998: CALL_OW 1
37002: ST_TO_ADDR
// end ;
37003: GO 36916
37005: POP
37006: POP
// array := tmp ;
37007: LD_ADDR_VAR 0 1
37011: PUSH
37012: LD_VAR 0 10
37016: ST_TO_ADDR
// end ;
37017: GO 36898
37019: POP
37020: POP
// result := array ;
37021: LD_ADDR_VAR 0 5
37025: PUSH
37026: LD_VAR 0 1
37030: ST_TO_ADDR
// end ;
37031: LD_VAR 0 5
37035: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
37036: LD_INT 0
37038: PPUSH
37039: PPUSH
// result := 0 ;
37040: LD_ADDR_VAR 0 3
37044: PUSH
37045: LD_INT 0
37047: ST_TO_ADDR
// if not array or not value in array then
37048: LD_VAR 0 1
37052: NOT
37053: PUSH
37054: LD_VAR 0 2
37058: PUSH
37059: LD_VAR 0 1
37063: IN
37064: NOT
37065: OR
37066: IFFALSE 37070
// exit ;
37068: GO 37124
// for i = 1 to array do
37070: LD_ADDR_VAR 0 4
37074: PUSH
37075: DOUBLE
37076: LD_INT 1
37078: DEC
37079: ST_TO_ADDR
37080: LD_VAR 0 1
37084: PUSH
37085: FOR_TO
37086: IFFALSE 37122
// if value = array [ i ] then
37088: LD_VAR 0 2
37092: PUSH
37093: LD_VAR 0 1
37097: PUSH
37098: LD_VAR 0 4
37102: ARRAY
37103: EQUAL
37104: IFFALSE 37120
// begin result := i ;
37106: LD_ADDR_VAR 0 3
37110: PUSH
37111: LD_VAR 0 4
37115: ST_TO_ADDR
// exit ;
37116: POP
37117: POP
37118: GO 37124
// end ;
37120: GO 37085
37122: POP
37123: POP
// end ;
37124: LD_VAR 0 3
37128: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
37129: LD_INT 0
37131: PPUSH
// vc_chassis := chassis ;
37132: LD_ADDR_OWVAR 37
37136: PUSH
37137: LD_VAR 0 1
37141: ST_TO_ADDR
// vc_engine := engine ;
37142: LD_ADDR_OWVAR 39
37146: PUSH
37147: LD_VAR 0 2
37151: ST_TO_ADDR
// vc_control := control ;
37152: LD_ADDR_OWVAR 38
37156: PUSH
37157: LD_VAR 0 3
37161: ST_TO_ADDR
// vc_weapon := weapon ;
37162: LD_ADDR_OWVAR 40
37166: PUSH
37167: LD_VAR 0 4
37171: ST_TO_ADDR
// vc_fuel_battery := fuel ;
37172: LD_ADDR_OWVAR 41
37176: PUSH
37177: LD_VAR 0 5
37181: ST_TO_ADDR
// end ;
37182: LD_VAR 0 6
37186: RET
// export function WantPlant ( unit ) ; var task ; begin
37187: LD_INT 0
37189: PPUSH
37190: PPUSH
// result := false ;
37191: LD_ADDR_VAR 0 2
37195: PUSH
37196: LD_INT 0
37198: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
37199: LD_ADDR_VAR 0 3
37203: PUSH
37204: LD_VAR 0 1
37208: PPUSH
37209: CALL_OW 437
37213: ST_TO_ADDR
// if task then
37214: LD_VAR 0 3
37218: IFFALSE 37246
// if task [ 1 ] [ 1 ] = p then
37220: LD_VAR 0 3
37224: PUSH
37225: LD_INT 1
37227: ARRAY
37228: PUSH
37229: LD_INT 1
37231: ARRAY
37232: PUSH
37233: LD_STRING p
37235: EQUAL
37236: IFFALSE 37246
// result := true ;
37238: LD_ADDR_VAR 0 2
37242: PUSH
37243: LD_INT 1
37245: ST_TO_ADDR
// end ;
37246: LD_VAR 0 2
37250: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
37251: LD_INT 0
37253: PPUSH
37254: PPUSH
37255: PPUSH
37256: PPUSH
// if pos < 1 then
37257: LD_VAR 0 2
37261: PUSH
37262: LD_INT 1
37264: LESS
37265: IFFALSE 37269
// exit ;
37267: GO 37572
// if pos = 1 then
37269: LD_VAR 0 2
37273: PUSH
37274: LD_INT 1
37276: EQUAL
37277: IFFALSE 37310
// result := Replace ( arr , pos [ 1 ] , value ) else
37279: LD_ADDR_VAR 0 4
37283: PUSH
37284: LD_VAR 0 1
37288: PPUSH
37289: LD_VAR 0 2
37293: PUSH
37294: LD_INT 1
37296: ARRAY
37297: PPUSH
37298: LD_VAR 0 3
37302: PPUSH
37303: CALL_OW 1
37307: ST_TO_ADDR
37308: GO 37572
// begin tmp := arr ;
37310: LD_ADDR_VAR 0 6
37314: PUSH
37315: LD_VAR 0 1
37319: ST_TO_ADDR
// s_arr := [ tmp ] ;
37320: LD_ADDR_VAR 0 7
37324: PUSH
37325: LD_VAR 0 6
37329: PUSH
37330: EMPTY
37331: LIST
37332: ST_TO_ADDR
// for i = 1 to pos - 1 do
37333: LD_ADDR_VAR 0 5
37337: PUSH
37338: DOUBLE
37339: LD_INT 1
37341: DEC
37342: ST_TO_ADDR
37343: LD_VAR 0 2
37347: PUSH
37348: LD_INT 1
37350: MINUS
37351: PUSH
37352: FOR_TO
37353: IFFALSE 37398
// begin tmp := tmp [ pos [ i ] ] ;
37355: LD_ADDR_VAR 0 6
37359: PUSH
37360: LD_VAR 0 6
37364: PUSH
37365: LD_VAR 0 2
37369: PUSH
37370: LD_VAR 0 5
37374: ARRAY
37375: ARRAY
37376: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
37377: LD_ADDR_VAR 0 7
37381: PUSH
37382: LD_VAR 0 7
37386: PUSH
37387: LD_VAR 0 6
37391: PUSH
37392: EMPTY
37393: LIST
37394: ADD
37395: ST_TO_ADDR
// end ;
37396: GO 37352
37398: POP
37399: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
37400: LD_ADDR_VAR 0 6
37404: PUSH
37405: LD_VAR 0 6
37409: PPUSH
37410: LD_VAR 0 2
37414: PUSH
37415: LD_VAR 0 2
37419: ARRAY
37420: PPUSH
37421: LD_VAR 0 3
37425: PPUSH
37426: CALL_OW 1
37430: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
37431: LD_ADDR_VAR 0 7
37435: PUSH
37436: LD_VAR 0 7
37440: PPUSH
37441: LD_VAR 0 7
37445: PPUSH
37446: LD_VAR 0 6
37450: PPUSH
37451: CALL_OW 1
37455: ST_TO_ADDR
// for i = s_arr downto 2 do
37456: LD_ADDR_VAR 0 5
37460: PUSH
37461: DOUBLE
37462: LD_VAR 0 7
37466: INC
37467: ST_TO_ADDR
37468: LD_INT 2
37470: PUSH
37471: FOR_DOWNTO
37472: IFFALSE 37556
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
37474: LD_ADDR_VAR 0 6
37478: PUSH
37479: LD_VAR 0 7
37483: PUSH
37484: LD_VAR 0 5
37488: PUSH
37489: LD_INT 1
37491: MINUS
37492: ARRAY
37493: PPUSH
37494: LD_VAR 0 2
37498: PUSH
37499: LD_VAR 0 5
37503: PUSH
37504: LD_INT 1
37506: MINUS
37507: ARRAY
37508: PPUSH
37509: LD_VAR 0 7
37513: PUSH
37514: LD_VAR 0 5
37518: ARRAY
37519: PPUSH
37520: CALL_OW 1
37524: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
37525: LD_ADDR_VAR 0 7
37529: PUSH
37530: LD_VAR 0 7
37534: PPUSH
37535: LD_VAR 0 5
37539: PUSH
37540: LD_INT 1
37542: MINUS
37543: PPUSH
37544: LD_VAR 0 6
37548: PPUSH
37549: CALL_OW 1
37553: ST_TO_ADDR
// end ;
37554: GO 37471
37556: POP
37557: POP
// result := s_arr [ 1 ] ;
37558: LD_ADDR_VAR 0 4
37562: PUSH
37563: LD_VAR 0 7
37567: PUSH
37568: LD_INT 1
37570: ARRAY
37571: ST_TO_ADDR
// end ; end ;
37572: LD_VAR 0 4
37576: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
37577: LD_INT 0
37579: PPUSH
37580: PPUSH
// if not list then
37581: LD_VAR 0 1
37585: NOT
37586: IFFALSE 37590
// exit ;
37588: GO 37681
// i := list [ pos1 ] ;
37590: LD_ADDR_VAR 0 5
37594: PUSH
37595: LD_VAR 0 1
37599: PUSH
37600: LD_VAR 0 2
37604: ARRAY
37605: ST_TO_ADDR
// if not i then
37606: LD_VAR 0 5
37610: NOT
37611: IFFALSE 37615
// exit ;
37613: GO 37681
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
37615: LD_ADDR_VAR 0 1
37619: PUSH
37620: LD_VAR 0 1
37624: PPUSH
37625: LD_VAR 0 2
37629: PPUSH
37630: LD_VAR 0 1
37634: PUSH
37635: LD_VAR 0 3
37639: ARRAY
37640: PPUSH
37641: CALL_OW 1
37645: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
37646: LD_ADDR_VAR 0 1
37650: PUSH
37651: LD_VAR 0 1
37655: PPUSH
37656: LD_VAR 0 3
37660: PPUSH
37661: LD_VAR 0 5
37665: PPUSH
37666: CALL_OW 1
37670: ST_TO_ADDR
// result := list ;
37671: LD_ADDR_VAR 0 4
37675: PUSH
37676: LD_VAR 0 1
37680: ST_TO_ADDR
// end ;
37681: LD_VAR 0 4
37685: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
37686: LD_INT 0
37688: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
37689: LD_ADDR_VAR 0 5
37693: PUSH
37694: LD_VAR 0 1
37698: PPUSH
37699: CALL_OW 250
37703: PPUSH
37704: LD_VAR 0 1
37708: PPUSH
37709: CALL_OW 251
37713: PPUSH
37714: LD_VAR 0 2
37718: PPUSH
37719: LD_VAR 0 3
37723: PPUSH
37724: LD_VAR 0 4
37728: PPUSH
37729: CALL 37739 0 5
37733: ST_TO_ADDR
// end ;
37734: LD_VAR 0 5
37738: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
37739: LD_INT 0
37741: PPUSH
37742: PPUSH
37743: PPUSH
37744: PPUSH
// if not list then
37745: LD_VAR 0 3
37749: NOT
37750: IFFALSE 37754
// exit ;
37752: GO 38142
// result := [ ] ;
37754: LD_ADDR_VAR 0 6
37758: PUSH
37759: EMPTY
37760: ST_TO_ADDR
// for i in list do
37761: LD_ADDR_VAR 0 7
37765: PUSH
37766: LD_VAR 0 3
37770: PUSH
37771: FOR_IN
37772: IFFALSE 37974
// begin tmp := GetDistUnitXY ( i , x , y ) ;
37774: LD_ADDR_VAR 0 9
37778: PUSH
37779: LD_VAR 0 7
37783: PPUSH
37784: LD_VAR 0 1
37788: PPUSH
37789: LD_VAR 0 2
37793: PPUSH
37794: CALL_OW 297
37798: ST_TO_ADDR
// if not result then
37799: LD_VAR 0 6
37803: NOT
37804: IFFALSE 37830
// result := [ [ i , tmp ] ] else
37806: LD_ADDR_VAR 0 6
37810: PUSH
37811: LD_VAR 0 7
37815: PUSH
37816: LD_VAR 0 9
37820: PUSH
37821: EMPTY
37822: LIST
37823: LIST
37824: PUSH
37825: EMPTY
37826: LIST
37827: ST_TO_ADDR
37828: GO 37972
// begin if result [ result ] [ 2 ] < tmp then
37830: LD_VAR 0 6
37834: PUSH
37835: LD_VAR 0 6
37839: ARRAY
37840: PUSH
37841: LD_INT 2
37843: ARRAY
37844: PUSH
37845: LD_VAR 0 9
37849: LESS
37850: IFFALSE 37892
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
37852: LD_ADDR_VAR 0 6
37856: PUSH
37857: LD_VAR 0 6
37861: PPUSH
37862: LD_VAR 0 6
37866: PUSH
37867: LD_INT 1
37869: PLUS
37870: PPUSH
37871: LD_VAR 0 7
37875: PUSH
37876: LD_VAR 0 9
37880: PUSH
37881: EMPTY
37882: LIST
37883: LIST
37884: PPUSH
37885: CALL_OW 2
37889: ST_TO_ADDR
37890: GO 37972
// for j = 1 to result do
37892: LD_ADDR_VAR 0 8
37896: PUSH
37897: DOUBLE
37898: LD_INT 1
37900: DEC
37901: ST_TO_ADDR
37902: LD_VAR 0 6
37906: PUSH
37907: FOR_TO
37908: IFFALSE 37970
// begin if tmp < result [ j ] [ 2 ] then
37910: LD_VAR 0 9
37914: PUSH
37915: LD_VAR 0 6
37919: PUSH
37920: LD_VAR 0 8
37924: ARRAY
37925: PUSH
37926: LD_INT 2
37928: ARRAY
37929: LESS
37930: IFFALSE 37968
// begin result := Insert ( result , j , [ i , tmp ] ) ;
37932: LD_ADDR_VAR 0 6
37936: PUSH
37937: LD_VAR 0 6
37941: PPUSH
37942: LD_VAR 0 8
37946: PPUSH
37947: LD_VAR 0 7
37951: PUSH
37952: LD_VAR 0 9
37956: PUSH
37957: EMPTY
37958: LIST
37959: LIST
37960: PPUSH
37961: CALL_OW 2
37965: ST_TO_ADDR
// break ;
37966: GO 37970
// end ; end ;
37968: GO 37907
37970: POP
37971: POP
// end ; end ;
37972: GO 37771
37974: POP
37975: POP
// if result and not asc then
37976: LD_VAR 0 6
37980: PUSH
37981: LD_VAR 0 4
37985: NOT
37986: AND
37987: IFFALSE 38062
// begin tmp := result ;
37989: LD_ADDR_VAR 0 9
37993: PUSH
37994: LD_VAR 0 6
37998: ST_TO_ADDR
// for i = tmp downto 1 do
37999: LD_ADDR_VAR 0 7
38003: PUSH
38004: DOUBLE
38005: LD_VAR 0 9
38009: INC
38010: ST_TO_ADDR
38011: LD_INT 1
38013: PUSH
38014: FOR_DOWNTO
38015: IFFALSE 38060
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
38017: LD_ADDR_VAR 0 6
38021: PUSH
38022: LD_VAR 0 6
38026: PPUSH
38027: LD_VAR 0 9
38031: PUSH
38032: LD_VAR 0 7
38036: MINUS
38037: PUSH
38038: LD_INT 1
38040: PLUS
38041: PPUSH
38042: LD_VAR 0 9
38046: PUSH
38047: LD_VAR 0 7
38051: ARRAY
38052: PPUSH
38053: CALL_OW 1
38057: ST_TO_ADDR
38058: GO 38014
38060: POP
38061: POP
// end ; tmp := [ ] ;
38062: LD_ADDR_VAR 0 9
38066: PUSH
38067: EMPTY
38068: ST_TO_ADDR
// if mode then
38069: LD_VAR 0 5
38073: IFFALSE 38142
// begin for i = 1 to result do
38075: LD_ADDR_VAR 0 7
38079: PUSH
38080: DOUBLE
38081: LD_INT 1
38083: DEC
38084: ST_TO_ADDR
38085: LD_VAR 0 6
38089: PUSH
38090: FOR_TO
38091: IFFALSE 38130
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
38093: LD_ADDR_VAR 0 9
38097: PUSH
38098: LD_VAR 0 9
38102: PPUSH
38103: LD_VAR 0 7
38107: PPUSH
38108: LD_VAR 0 6
38112: PUSH
38113: LD_VAR 0 7
38117: ARRAY
38118: PUSH
38119: LD_INT 1
38121: ARRAY
38122: PPUSH
38123: CALL_OW 1
38127: ST_TO_ADDR
38128: GO 38090
38130: POP
38131: POP
// result := tmp ;
38132: LD_ADDR_VAR 0 6
38136: PUSH
38137: LD_VAR 0 9
38141: ST_TO_ADDR
// end ; end ;
38142: LD_VAR 0 6
38146: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
38147: LD_INT 0
38149: PPUSH
38150: PPUSH
38151: PPUSH
38152: PPUSH
38153: PPUSH
38154: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
38155: LD_ADDR_VAR 0 5
38159: PUSH
38160: LD_INT 0
38162: PUSH
38163: LD_INT 0
38165: PUSH
38166: LD_INT 0
38168: PUSH
38169: EMPTY
38170: PUSH
38171: EMPTY
38172: LIST
38173: LIST
38174: LIST
38175: LIST
38176: ST_TO_ADDR
// if not x or not y then
38177: LD_VAR 0 2
38181: NOT
38182: PUSH
38183: LD_VAR 0 3
38187: NOT
38188: OR
38189: IFFALSE 38193
// exit ;
38191: GO 39843
// if not range then
38193: LD_VAR 0 4
38197: NOT
38198: IFFALSE 38208
// range := 10 ;
38200: LD_ADDR_VAR 0 4
38204: PUSH
38205: LD_INT 10
38207: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38208: LD_ADDR_VAR 0 8
38212: PUSH
38213: LD_INT 81
38215: PUSH
38216: LD_VAR 0 1
38220: PUSH
38221: EMPTY
38222: LIST
38223: LIST
38224: PUSH
38225: LD_INT 92
38227: PUSH
38228: LD_VAR 0 2
38232: PUSH
38233: LD_VAR 0 3
38237: PUSH
38238: LD_VAR 0 4
38242: PUSH
38243: EMPTY
38244: LIST
38245: LIST
38246: LIST
38247: LIST
38248: PUSH
38249: LD_INT 3
38251: PUSH
38252: LD_INT 21
38254: PUSH
38255: LD_INT 3
38257: PUSH
38258: EMPTY
38259: LIST
38260: LIST
38261: PUSH
38262: EMPTY
38263: LIST
38264: LIST
38265: PUSH
38266: EMPTY
38267: LIST
38268: LIST
38269: LIST
38270: PPUSH
38271: CALL_OW 69
38275: ST_TO_ADDR
// if not tmp then
38276: LD_VAR 0 8
38280: NOT
38281: IFFALSE 38285
// exit ;
38283: GO 39843
// for i in tmp do
38285: LD_ADDR_VAR 0 6
38289: PUSH
38290: LD_VAR 0 8
38294: PUSH
38295: FOR_IN
38296: IFFALSE 39818
// begin points := [ 0 , 0 , 0 ] ;
38298: LD_ADDR_VAR 0 9
38302: PUSH
38303: LD_INT 0
38305: PUSH
38306: LD_INT 0
38308: PUSH
38309: LD_INT 0
38311: PUSH
38312: EMPTY
38313: LIST
38314: LIST
38315: LIST
38316: ST_TO_ADDR
// bpoints := 1 ;
38317: LD_ADDR_VAR 0 10
38321: PUSH
38322: LD_INT 1
38324: ST_TO_ADDR
// case GetType ( i ) of unit_human :
38325: LD_VAR 0 6
38329: PPUSH
38330: CALL_OW 247
38334: PUSH
38335: LD_INT 1
38337: DOUBLE
38338: EQUAL
38339: IFTRUE 38343
38341: GO 38921
38343: POP
// begin if GetClass ( i ) = 1 then
38344: LD_VAR 0 6
38348: PPUSH
38349: CALL_OW 257
38353: PUSH
38354: LD_INT 1
38356: EQUAL
38357: IFFALSE 38378
// points := [ 10 , 5 , 3 ] ;
38359: LD_ADDR_VAR 0 9
38363: PUSH
38364: LD_INT 10
38366: PUSH
38367: LD_INT 5
38369: PUSH
38370: LD_INT 3
38372: PUSH
38373: EMPTY
38374: LIST
38375: LIST
38376: LIST
38377: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
38378: LD_VAR 0 6
38382: PPUSH
38383: CALL_OW 257
38387: PUSH
38388: LD_INT 2
38390: PUSH
38391: LD_INT 3
38393: PUSH
38394: LD_INT 4
38396: PUSH
38397: EMPTY
38398: LIST
38399: LIST
38400: LIST
38401: IN
38402: IFFALSE 38423
// points := [ 3 , 2 , 1 ] ;
38404: LD_ADDR_VAR 0 9
38408: PUSH
38409: LD_INT 3
38411: PUSH
38412: LD_INT 2
38414: PUSH
38415: LD_INT 1
38417: PUSH
38418: EMPTY
38419: LIST
38420: LIST
38421: LIST
38422: ST_TO_ADDR
// if GetClass ( i ) = 5 then
38423: LD_VAR 0 6
38427: PPUSH
38428: CALL_OW 257
38432: PUSH
38433: LD_INT 5
38435: EQUAL
38436: IFFALSE 38457
// points := [ 130 , 5 , 2 ] ;
38438: LD_ADDR_VAR 0 9
38442: PUSH
38443: LD_INT 130
38445: PUSH
38446: LD_INT 5
38448: PUSH
38449: LD_INT 2
38451: PUSH
38452: EMPTY
38453: LIST
38454: LIST
38455: LIST
38456: ST_TO_ADDR
// if GetClass ( i ) = 8 then
38457: LD_VAR 0 6
38461: PPUSH
38462: CALL_OW 257
38466: PUSH
38467: LD_INT 8
38469: EQUAL
38470: IFFALSE 38491
// points := [ 35 , 35 , 30 ] ;
38472: LD_ADDR_VAR 0 9
38476: PUSH
38477: LD_INT 35
38479: PUSH
38480: LD_INT 35
38482: PUSH
38483: LD_INT 30
38485: PUSH
38486: EMPTY
38487: LIST
38488: LIST
38489: LIST
38490: ST_TO_ADDR
// if GetClass ( i ) = 9 then
38491: LD_VAR 0 6
38495: PPUSH
38496: CALL_OW 257
38500: PUSH
38501: LD_INT 9
38503: EQUAL
38504: IFFALSE 38525
// points := [ 20 , 55 , 40 ] ;
38506: LD_ADDR_VAR 0 9
38510: PUSH
38511: LD_INT 20
38513: PUSH
38514: LD_INT 55
38516: PUSH
38517: LD_INT 40
38519: PUSH
38520: EMPTY
38521: LIST
38522: LIST
38523: LIST
38524: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
38525: LD_VAR 0 6
38529: PPUSH
38530: CALL_OW 257
38534: PUSH
38535: LD_INT 12
38537: PUSH
38538: LD_INT 16
38540: PUSH
38541: EMPTY
38542: LIST
38543: LIST
38544: IN
38545: IFFALSE 38566
// points := [ 5 , 3 , 2 ] ;
38547: LD_ADDR_VAR 0 9
38551: PUSH
38552: LD_INT 5
38554: PUSH
38555: LD_INT 3
38557: PUSH
38558: LD_INT 2
38560: PUSH
38561: EMPTY
38562: LIST
38563: LIST
38564: LIST
38565: ST_TO_ADDR
// if GetClass ( i ) = 17 then
38566: LD_VAR 0 6
38570: PPUSH
38571: CALL_OW 257
38575: PUSH
38576: LD_INT 17
38578: EQUAL
38579: IFFALSE 38600
// points := [ 100 , 50 , 75 ] ;
38581: LD_ADDR_VAR 0 9
38585: PUSH
38586: LD_INT 100
38588: PUSH
38589: LD_INT 50
38591: PUSH
38592: LD_INT 75
38594: PUSH
38595: EMPTY
38596: LIST
38597: LIST
38598: LIST
38599: ST_TO_ADDR
// if GetClass ( i ) = 15 then
38600: LD_VAR 0 6
38604: PPUSH
38605: CALL_OW 257
38609: PUSH
38610: LD_INT 15
38612: EQUAL
38613: IFFALSE 38634
// points := [ 10 , 5 , 3 ] ;
38615: LD_ADDR_VAR 0 9
38619: PUSH
38620: LD_INT 10
38622: PUSH
38623: LD_INT 5
38625: PUSH
38626: LD_INT 3
38628: PUSH
38629: EMPTY
38630: LIST
38631: LIST
38632: LIST
38633: ST_TO_ADDR
// if GetClass ( i ) = 14 then
38634: LD_VAR 0 6
38638: PPUSH
38639: CALL_OW 257
38643: PUSH
38644: LD_INT 14
38646: EQUAL
38647: IFFALSE 38668
// points := [ 10 , 0 , 0 ] ;
38649: LD_ADDR_VAR 0 9
38653: PUSH
38654: LD_INT 10
38656: PUSH
38657: LD_INT 0
38659: PUSH
38660: LD_INT 0
38662: PUSH
38663: EMPTY
38664: LIST
38665: LIST
38666: LIST
38667: ST_TO_ADDR
// if GetClass ( i ) = 11 then
38668: LD_VAR 0 6
38672: PPUSH
38673: CALL_OW 257
38677: PUSH
38678: LD_INT 11
38680: EQUAL
38681: IFFALSE 38702
// points := [ 30 , 10 , 5 ] ;
38683: LD_ADDR_VAR 0 9
38687: PUSH
38688: LD_INT 30
38690: PUSH
38691: LD_INT 10
38693: PUSH
38694: LD_INT 5
38696: PUSH
38697: EMPTY
38698: LIST
38699: LIST
38700: LIST
38701: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
38702: LD_VAR 0 1
38706: PPUSH
38707: LD_INT 5
38709: PPUSH
38710: CALL_OW 321
38714: PUSH
38715: LD_INT 2
38717: EQUAL
38718: IFFALSE 38735
// bpoints := bpoints * 1.8 ;
38720: LD_ADDR_VAR 0 10
38724: PUSH
38725: LD_VAR 0 10
38729: PUSH
38730: LD_REAL  1.80000000000000E+0000
38733: MUL
38734: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
38735: LD_VAR 0 6
38739: PPUSH
38740: CALL_OW 257
38744: PUSH
38745: LD_INT 1
38747: PUSH
38748: LD_INT 2
38750: PUSH
38751: LD_INT 3
38753: PUSH
38754: LD_INT 4
38756: PUSH
38757: EMPTY
38758: LIST
38759: LIST
38760: LIST
38761: LIST
38762: IN
38763: PUSH
38764: LD_VAR 0 1
38768: PPUSH
38769: LD_INT 51
38771: PPUSH
38772: CALL_OW 321
38776: PUSH
38777: LD_INT 2
38779: EQUAL
38780: AND
38781: IFFALSE 38798
// bpoints := bpoints * 1.2 ;
38783: LD_ADDR_VAR 0 10
38787: PUSH
38788: LD_VAR 0 10
38792: PUSH
38793: LD_REAL  1.20000000000000E+0000
38796: MUL
38797: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
38798: LD_VAR 0 6
38802: PPUSH
38803: CALL_OW 257
38807: PUSH
38808: LD_INT 5
38810: PUSH
38811: LD_INT 7
38813: PUSH
38814: LD_INT 9
38816: PUSH
38817: EMPTY
38818: LIST
38819: LIST
38820: LIST
38821: IN
38822: PUSH
38823: LD_VAR 0 1
38827: PPUSH
38828: LD_INT 52
38830: PPUSH
38831: CALL_OW 321
38835: PUSH
38836: LD_INT 2
38838: EQUAL
38839: AND
38840: IFFALSE 38857
// bpoints := bpoints * 1.5 ;
38842: LD_ADDR_VAR 0 10
38846: PUSH
38847: LD_VAR 0 10
38851: PUSH
38852: LD_REAL  1.50000000000000E+0000
38855: MUL
38856: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
38857: LD_VAR 0 1
38861: PPUSH
38862: LD_INT 66
38864: PPUSH
38865: CALL_OW 321
38869: PUSH
38870: LD_INT 2
38872: EQUAL
38873: IFFALSE 38890
// bpoints := bpoints * 1.1 ;
38875: LD_ADDR_VAR 0 10
38879: PUSH
38880: LD_VAR 0 10
38884: PUSH
38885: LD_REAL  1.10000000000000E+0000
38888: MUL
38889: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
38890: LD_ADDR_VAR 0 10
38894: PUSH
38895: LD_VAR 0 10
38899: PUSH
38900: LD_VAR 0 6
38904: PPUSH
38905: LD_INT 1
38907: PPUSH
38908: CALL_OW 259
38912: PUSH
38913: LD_REAL  1.15000000000000E+0000
38916: MUL
38917: MUL
38918: ST_TO_ADDR
// end ; unit_vehicle :
38919: GO 39747
38921: LD_INT 2
38923: DOUBLE
38924: EQUAL
38925: IFTRUE 38929
38927: GO 39735
38929: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
38930: LD_VAR 0 6
38934: PPUSH
38935: CALL_OW 264
38939: PUSH
38940: LD_INT 2
38942: PUSH
38943: LD_INT 42
38945: PUSH
38946: LD_INT 24
38948: PUSH
38949: EMPTY
38950: LIST
38951: LIST
38952: LIST
38953: IN
38954: IFFALSE 38975
// points := [ 25 , 5 , 3 ] ;
38956: LD_ADDR_VAR 0 9
38960: PUSH
38961: LD_INT 25
38963: PUSH
38964: LD_INT 5
38966: PUSH
38967: LD_INT 3
38969: PUSH
38970: EMPTY
38971: LIST
38972: LIST
38973: LIST
38974: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
38975: LD_VAR 0 6
38979: PPUSH
38980: CALL_OW 264
38984: PUSH
38985: LD_INT 4
38987: PUSH
38988: LD_INT 43
38990: PUSH
38991: LD_INT 25
38993: PUSH
38994: EMPTY
38995: LIST
38996: LIST
38997: LIST
38998: IN
38999: IFFALSE 39020
// points := [ 40 , 15 , 5 ] ;
39001: LD_ADDR_VAR 0 9
39005: PUSH
39006: LD_INT 40
39008: PUSH
39009: LD_INT 15
39011: PUSH
39012: LD_INT 5
39014: PUSH
39015: EMPTY
39016: LIST
39017: LIST
39018: LIST
39019: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
39020: LD_VAR 0 6
39024: PPUSH
39025: CALL_OW 264
39029: PUSH
39030: LD_INT 3
39032: PUSH
39033: LD_INT 23
39035: PUSH
39036: EMPTY
39037: LIST
39038: LIST
39039: IN
39040: IFFALSE 39061
// points := [ 7 , 25 , 8 ] ;
39042: LD_ADDR_VAR 0 9
39046: PUSH
39047: LD_INT 7
39049: PUSH
39050: LD_INT 25
39052: PUSH
39053: LD_INT 8
39055: PUSH
39056: EMPTY
39057: LIST
39058: LIST
39059: LIST
39060: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
39061: LD_VAR 0 6
39065: PPUSH
39066: CALL_OW 264
39070: PUSH
39071: LD_INT 5
39073: PUSH
39074: LD_INT 27
39076: PUSH
39077: LD_INT 44
39079: PUSH
39080: EMPTY
39081: LIST
39082: LIST
39083: LIST
39084: IN
39085: IFFALSE 39106
// points := [ 14 , 50 , 16 ] ;
39087: LD_ADDR_VAR 0 9
39091: PUSH
39092: LD_INT 14
39094: PUSH
39095: LD_INT 50
39097: PUSH
39098: LD_INT 16
39100: PUSH
39101: EMPTY
39102: LIST
39103: LIST
39104: LIST
39105: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
39106: LD_VAR 0 6
39110: PPUSH
39111: CALL_OW 264
39115: PUSH
39116: LD_INT 6
39118: PUSH
39119: LD_INT 46
39121: PUSH
39122: EMPTY
39123: LIST
39124: LIST
39125: IN
39126: IFFALSE 39147
// points := [ 32 , 120 , 70 ] ;
39128: LD_ADDR_VAR 0 9
39132: PUSH
39133: LD_INT 32
39135: PUSH
39136: LD_INT 120
39138: PUSH
39139: LD_INT 70
39141: PUSH
39142: EMPTY
39143: LIST
39144: LIST
39145: LIST
39146: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
39147: LD_VAR 0 6
39151: PPUSH
39152: CALL_OW 264
39156: PUSH
39157: LD_INT 7
39159: PUSH
39160: LD_INT 28
39162: PUSH
39163: LD_INT 45
39165: PUSH
39166: LD_INT 92
39168: PUSH
39169: EMPTY
39170: LIST
39171: LIST
39172: LIST
39173: LIST
39174: IN
39175: IFFALSE 39196
// points := [ 35 , 20 , 45 ] ;
39177: LD_ADDR_VAR 0 9
39181: PUSH
39182: LD_INT 35
39184: PUSH
39185: LD_INT 20
39187: PUSH
39188: LD_INT 45
39190: PUSH
39191: EMPTY
39192: LIST
39193: LIST
39194: LIST
39195: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
39196: LD_VAR 0 6
39200: PPUSH
39201: CALL_OW 264
39205: PUSH
39206: LD_INT 47
39208: PUSH
39209: EMPTY
39210: LIST
39211: IN
39212: IFFALSE 39233
// points := [ 67 , 45 , 75 ] ;
39214: LD_ADDR_VAR 0 9
39218: PUSH
39219: LD_INT 67
39221: PUSH
39222: LD_INT 45
39224: PUSH
39225: LD_INT 75
39227: PUSH
39228: EMPTY
39229: LIST
39230: LIST
39231: LIST
39232: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
39233: LD_VAR 0 6
39237: PPUSH
39238: CALL_OW 264
39242: PUSH
39243: LD_INT 26
39245: PUSH
39246: EMPTY
39247: LIST
39248: IN
39249: IFFALSE 39270
// points := [ 120 , 30 , 80 ] ;
39251: LD_ADDR_VAR 0 9
39255: PUSH
39256: LD_INT 120
39258: PUSH
39259: LD_INT 30
39261: PUSH
39262: LD_INT 80
39264: PUSH
39265: EMPTY
39266: LIST
39267: LIST
39268: LIST
39269: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
39270: LD_VAR 0 6
39274: PPUSH
39275: CALL_OW 264
39279: PUSH
39280: LD_INT 22
39282: PUSH
39283: EMPTY
39284: LIST
39285: IN
39286: IFFALSE 39307
// points := [ 40 , 1 , 1 ] ;
39288: LD_ADDR_VAR 0 9
39292: PUSH
39293: LD_INT 40
39295: PUSH
39296: LD_INT 1
39298: PUSH
39299: LD_INT 1
39301: PUSH
39302: EMPTY
39303: LIST
39304: LIST
39305: LIST
39306: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
39307: LD_VAR 0 6
39311: PPUSH
39312: CALL_OW 264
39316: PUSH
39317: LD_INT 29
39319: PUSH
39320: EMPTY
39321: LIST
39322: IN
39323: IFFALSE 39344
// points := [ 70 , 200 , 400 ] ;
39325: LD_ADDR_VAR 0 9
39329: PUSH
39330: LD_INT 70
39332: PUSH
39333: LD_INT 200
39335: PUSH
39336: LD_INT 400
39338: PUSH
39339: EMPTY
39340: LIST
39341: LIST
39342: LIST
39343: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
39344: LD_VAR 0 6
39348: PPUSH
39349: CALL_OW 264
39353: PUSH
39354: LD_INT 14
39356: PUSH
39357: LD_INT 53
39359: PUSH
39360: EMPTY
39361: LIST
39362: LIST
39363: IN
39364: IFFALSE 39385
// points := [ 40 , 10 , 20 ] ;
39366: LD_ADDR_VAR 0 9
39370: PUSH
39371: LD_INT 40
39373: PUSH
39374: LD_INT 10
39376: PUSH
39377: LD_INT 20
39379: PUSH
39380: EMPTY
39381: LIST
39382: LIST
39383: LIST
39384: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
39385: LD_VAR 0 6
39389: PPUSH
39390: CALL_OW 264
39394: PUSH
39395: LD_INT 9
39397: PUSH
39398: EMPTY
39399: LIST
39400: IN
39401: IFFALSE 39422
// points := [ 5 , 70 , 20 ] ;
39403: LD_ADDR_VAR 0 9
39407: PUSH
39408: LD_INT 5
39410: PUSH
39411: LD_INT 70
39413: PUSH
39414: LD_INT 20
39416: PUSH
39417: EMPTY
39418: LIST
39419: LIST
39420: LIST
39421: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
39422: LD_VAR 0 6
39426: PPUSH
39427: CALL_OW 264
39431: PUSH
39432: LD_INT 10
39434: PUSH
39435: EMPTY
39436: LIST
39437: IN
39438: IFFALSE 39459
// points := [ 35 , 110 , 70 ] ;
39440: LD_ADDR_VAR 0 9
39444: PUSH
39445: LD_INT 35
39447: PUSH
39448: LD_INT 110
39450: PUSH
39451: LD_INT 70
39453: PUSH
39454: EMPTY
39455: LIST
39456: LIST
39457: LIST
39458: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
39459: LD_VAR 0 6
39463: PPUSH
39464: CALL_OW 265
39468: PUSH
39469: LD_INT 25
39471: EQUAL
39472: IFFALSE 39493
// points := [ 80 , 65 , 100 ] ;
39474: LD_ADDR_VAR 0 9
39478: PUSH
39479: LD_INT 80
39481: PUSH
39482: LD_INT 65
39484: PUSH
39485: LD_INT 100
39487: PUSH
39488: EMPTY
39489: LIST
39490: LIST
39491: LIST
39492: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
39493: LD_VAR 0 6
39497: PPUSH
39498: CALL_OW 263
39502: PUSH
39503: LD_INT 1
39505: EQUAL
39506: IFFALSE 39541
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
39508: LD_ADDR_VAR 0 10
39512: PUSH
39513: LD_VAR 0 10
39517: PUSH
39518: LD_VAR 0 6
39522: PPUSH
39523: CALL_OW 311
39527: PPUSH
39528: LD_INT 3
39530: PPUSH
39531: CALL_OW 259
39535: PUSH
39536: LD_INT 4
39538: MUL
39539: MUL
39540: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
39541: LD_VAR 0 6
39545: PPUSH
39546: CALL_OW 263
39550: PUSH
39551: LD_INT 2
39553: EQUAL
39554: IFFALSE 39605
// begin j := IsControledBy ( i ) ;
39556: LD_ADDR_VAR 0 7
39560: PUSH
39561: LD_VAR 0 6
39565: PPUSH
39566: CALL_OW 312
39570: ST_TO_ADDR
// if j then
39571: LD_VAR 0 7
39575: IFFALSE 39605
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
39577: LD_ADDR_VAR 0 10
39581: PUSH
39582: LD_VAR 0 10
39586: PUSH
39587: LD_VAR 0 7
39591: PPUSH
39592: LD_INT 3
39594: PPUSH
39595: CALL_OW 259
39599: PUSH
39600: LD_INT 3
39602: MUL
39603: MUL
39604: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
39605: LD_VAR 0 6
39609: PPUSH
39610: CALL_OW 264
39614: PUSH
39615: LD_INT 5
39617: PUSH
39618: LD_INT 6
39620: PUSH
39621: LD_INT 46
39623: PUSH
39624: LD_INT 44
39626: PUSH
39627: LD_INT 47
39629: PUSH
39630: LD_INT 45
39632: PUSH
39633: LD_INT 28
39635: PUSH
39636: LD_INT 7
39638: PUSH
39639: LD_INT 27
39641: PUSH
39642: LD_INT 29
39644: PUSH
39645: EMPTY
39646: LIST
39647: LIST
39648: LIST
39649: LIST
39650: LIST
39651: LIST
39652: LIST
39653: LIST
39654: LIST
39655: LIST
39656: IN
39657: PUSH
39658: LD_VAR 0 1
39662: PPUSH
39663: LD_INT 52
39665: PPUSH
39666: CALL_OW 321
39670: PUSH
39671: LD_INT 2
39673: EQUAL
39674: AND
39675: IFFALSE 39692
// bpoints := bpoints * 1.2 ;
39677: LD_ADDR_VAR 0 10
39681: PUSH
39682: LD_VAR 0 10
39686: PUSH
39687: LD_REAL  1.20000000000000E+0000
39690: MUL
39691: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
39692: LD_VAR 0 6
39696: PPUSH
39697: CALL_OW 264
39701: PUSH
39702: LD_INT 6
39704: PUSH
39705: LD_INT 46
39707: PUSH
39708: LD_INT 47
39710: PUSH
39711: EMPTY
39712: LIST
39713: LIST
39714: LIST
39715: IN
39716: IFFALSE 39733
// bpoints := bpoints * 1.2 ;
39718: LD_ADDR_VAR 0 10
39722: PUSH
39723: LD_VAR 0 10
39727: PUSH
39728: LD_REAL  1.20000000000000E+0000
39731: MUL
39732: ST_TO_ADDR
// end ; unit_building :
39733: GO 39747
39735: LD_INT 3
39737: DOUBLE
39738: EQUAL
39739: IFTRUE 39743
39741: GO 39746
39743: POP
// ; end ;
39744: GO 39747
39746: POP
// for j = 1 to 3 do
39747: LD_ADDR_VAR 0 7
39751: PUSH
39752: DOUBLE
39753: LD_INT 1
39755: DEC
39756: ST_TO_ADDR
39757: LD_INT 3
39759: PUSH
39760: FOR_TO
39761: IFFALSE 39814
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
39763: LD_ADDR_VAR 0 5
39767: PUSH
39768: LD_VAR 0 5
39772: PPUSH
39773: LD_VAR 0 7
39777: PPUSH
39778: LD_VAR 0 5
39782: PUSH
39783: LD_VAR 0 7
39787: ARRAY
39788: PUSH
39789: LD_VAR 0 9
39793: PUSH
39794: LD_VAR 0 7
39798: ARRAY
39799: PUSH
39800: LD_VAR 0 10
39804: MUL
39805: PLUS
39806: PPUSH
39807: CALL_OW 1
39811: ST_TO_ADDR
39812: GO 39760
39814: POP
39815: POP
// end ;
39816: GO 38295
39818: POP
39819: POP
// result := Replace ( result , 4 , tmp ) ;
39820: LD_ADDR_VAR 0 5
39824: PUSH
39825: LD_VAR 0 5
39829: PPUSH
39830: LD_INT 4
39832: PPUSH
39833: LD_VAR 0 8
39837: PPUSH
39838: CALL_OW 1
39842: ST_TO_ADDR
// end ;
39843: LD_VAR 0 5
39847: RET
// export function DangerAtRange ( unit , range ) ; begin
39848: LD_INT 0
39850: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
39851: LD_ADDR_VAR 0 3
39855: PUSH
39856: LD_VAR 0 1
39860: PPUSH
39861: CALL_OW 255
39865: PPUSH
39866: LD_VAR 0 1
39870: PPUSH
39871: CALL_OW 250
39875: PPUSH
39876: LD_VAR 0 1
39880: PPUSH
39881: CALL_OW 251
39885: PPUSH
39886: LD_VAR 0 2
39890: PPUSH
39891: CALL 38147 0 4
39895: ST_TO_ADDR
// end ;
39896: LD_VAR 0 3
39900: RET
// export function DangerInArea ( side , area ) ; begin
39901: LD_INT 0
39903: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
39904: LD_ADDR_VAR 0 3
39908: PUSH
39909: LD_VAR 0 2
39913: PPUSH
39914: LD_INT 81
39916: PUSH
39917: LD_VAR 0 1
39921: PUSH
39922: EMPTY
39923: LIST
39924: LIST
39925: PPUSH
39926: CALL_OW 70
39930: ST_TO_ADDR
// end ;
39931: LD_VAR 0 3
39935: RET
// export function IsExtension ( b ) ; begin
39936: LD_INT 0
39938: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
39939: LD_ADDR_VAR 0 2
39943: PUSH
39944: LD_VAR 0 1
39948: PUSH
39949: LD_INT 23
39951: PUSH
39952: LD_INT 20
39954: PUSH
39955: LD_INT 22
39957: PUSH
39958: LD_INT 17
39960: PUSH
39961: LD_INT 24
39963: PUSH
39964: LD_INT 21
39966: PUSH
39967: LD_INT 19
39969: PUSH
39970: LD_INT 16
39972: PUSH
39973: LD_INT 25
39975: PUSH
39976: LD_INT 18
39978: PUSH
39979: EMPTY
39980: LIST
39981: LIST
39982: LIST
39983: LIST
39984: LIST
39985: LIST
39986: LIST
39987: LIST
39988: LIST
39989: LIST
39990: IN
39991: ST_TO_ADDR
// end ;
39992: LD_VAR 0 2
39996: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
39997: LD_INT 0
39999: PPUSH
40000: PPUSH
40001: PPUSH
// result := [ ] ;
40002: LD_ADDR_VAR 0 4
40006: PUSH
40007: EMPTY
40008: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
40009: LD_ADDR_VAR 0 5
40013: PUSH
40014: LD_VAR 0 2
40018: PPUSH
40019: LD_INT 21
40021: PUSH
40022: LD_INT 3
40024: PUSH
40025: EMPTY
40026: LIST
40027: LIST
40028: PPUSH
40029: CALL_OW 70
40033: ST_TO_ADDR
// if not tmp then
40034: LD_VAR 0 5
40038: NOT
40039: IFFALSE 40043
// exit ;
40041: GO 40107
// if checkLink then
40043: LD_VAR 0 3
40047: IFFALSE 40097
// begin for i in tmp do
40049: LD_ADDR_VAR 0 6
40053: PUSH
40054: LD_VAR 0 5
40058: PUSH
40059: FOR_IN
40060: IFFALSE 40095
// if GetBase ( i ) <> base then
40062: LD_VAR 0 6
40066: PPUSH
40067: CALL_OW 274
40071: PUSH
40072: LD_VAR 0 1
40076: NONEQUAL
40077: IFFALSE 40093
// ComLinkToBase ( base , i ) ;
40079: LD_VAR 0 1
40083: PPUSH
40084: LD_VAR 0 6
40088: PPUSH
40089: CALL_OW 169
40093: GO 40059
40095: POP
40096: POP
// end ; result := tmp ;
40097: LD_ADDR_VAR 0 4
40101: PUSH
40102: LD_VAR 0 5
40106: ST_TO_ADDR
// end ;
40107: LD_VAR 0 4
40111: RET
// export function ComComplete ( units , b ) ; var i ; begin
40112: LD_INT 0
40114: PPUSH
40115: PPUSH
// if not units then
40116: LD_VAR 0 1
40120: NOT
40121: IFFALSE 40125
// exit ;
40123: GO 40215
// for i in units do
40125: LD_ADDR_VAR 0 4
40129: PUSH
40130: LD_VAR 0 1
40134: PUSH
40135: FOR_IN
40136: IFFALSE 40213
// if BuildingStatus ( b ) = bs_build then
40138: LD_VAR 0 2
40142: PPUSH
40143: CALL_OW 461
40147: PUSH
40148: LD_INT 1
40150: EQUAL
40151: IFFALSE 40211
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
40153: LD_VAR 0 4
40157: PPUSH
40158: LD_STRING h
40160: PUSH
40161: LD_VAR 0 2
40165: PPUSH
40166: CALL_OW 250
40170: PUSH
40171: LD_VAR 0 2
40175: PPUSH
40176: CALL_OW 251
40180: PUSH
40181: LD_VAR 0 2
40185: PUSH
40186: LD_INT 0
40188: PUSH
40189: LD_INT 0
40191: PUSH
40192: LD_INT 0
40194: PUSH
40195: EMPTY
40196: LIST
40197: LIST
40198: LIST
40199: LIST
40200: LIST
40201: LIST
40202: LIST
40203: PUSH
40204: EMPTY
40205: LIST
40206: PPUSH
40207: CALL_OW 446
40211: GO 40135
40213: POP
40214: POP
// end ;
40215: LD_VAR 0 3
40219: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
40220: LD_INT 0
40222: PPUSH
40223: PPUSH
40224: PPUSH
40225: PPUSH
40226: PPUSH
40227: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
40228: LD_VAR 0 1
40232: NOT
40233: PUSH
40234: LD_VAR 0 1
40238: PPUSH
40239: CALL_OW 263
40243: PUSH
40244: LD_INT 2
40246: NONEQUAL
40247: OR
40248: IFFALSE 40252
// exit ;
40250: GO 40568
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
40252: LD_ADDR_VAR 0 6
40256: PUSH
40257: LD_INT 22
40259: PUSH
40260: LD_VAR 0 1
40264: PPUSH
40265: CALL_OW 255
40269: PUSH
40270: EMPTY
40271: LIST
40272: LIST
40273: PUSH
40274: LD_INT 2
40276: PUSH
40277: LD_INT 30
40279: PUSH
40280: LD_INT 36
40282: PUSH
40283: EMPTY
40284: LIST
40285: LIST
40286: PUSH
40287: LD_INT 34
40289: PUSH
40290: LD_INT 31
40292: PUSH
40293: EMPTY
40294: LIST
40295: LIST
40296: PUSH
40297: EMPTY
40298: LIST
40299: LIST
40300: LIST
40301: PUSH
40302: EMPTY
40303: LIST
40304: LIST
40305: PPUSH
40306: CALL_OW 69
40310: ST_TO_ADDR
// if not tmp then
40311: LD_VAR 0 6
40315: NOT
40316: IFFALSE 40320
// exit ;
40318: GO 40568
// result := [ ] ;
40320: LD_ADDR_VAR 0 2
40324: PUSH
40325: EMPTY
40326: ST_TO_ADDR
// for i in tmp do
40327: LD_ADDR_VAR 0 3
40331: PUSH
40332: LD_VAR 0 6
40336: PUSH
40337: FOR_IN
40338: IFFALSE 40409
// begin t := UnitsInside ( i ) ;
40340: LD_ADDR_VAR 0 4
40344: PUSH
40345: LD_VAR 0 3
40349: PPUSH
40350: CALL_OW 313
40354: ST_TO_ADDR
// if t then
40355: LD_VAR 0 4
40359: IFFALSE 40407
// for j in t do
40361: LD_ADDR_VAR 0 7
40365: PUSH
40366: LD_VAR 0 4
40370: PUSH
40371: FOR_IN
40372: IFFALSE 40405
// result := Replace ( result , result + 1 , j ) ;
40374: LD_ADDR_VAR 0 2
40378: PUSH
40379: LD_VAR 0 2
40383: PPUSH
40384: LD_VAR 0 2
40388: PUSH
40389: LD_INT 1
40391: PLUS
40392: PPUSH
40393: LD_VAR 0 7
40397: PPUSH
40398: CALL_OW 1
40402: ST_TO_ADDR
40403: GO 40371
40405: POP
40406: POP
// end ;
40407: GO 40337
40409: POP
40410: POP
// if not result then
40411: LD_VAR 0 2
40415: NOT
40416: IFFALSE 40420
// exit ;
40418: GO 40568
// mech := result [ 1 ] ;
40420: LD_ADDR_VAR 0 5
40424: PUSH
40425: LD_VAR 0 2
40429: PUSH
40430: LD_INT 1
40432: ARRAY
40433: ST_TO_ADDR
// if result > 1 then
40434: LD_VAR 0 2
40438: PUSH
40439: LD_INT 1
40441: GREATER
40442: IFFALSE 40554
// begin for i = 2 to result do
40444: LD_ADDR_VAR 0 3
40448: PUSH
40449: DOUBLE
40450: LD_INT 2
40452: DEC
40453: ST_TO_ADDR
40454: LD_VAR 0 2
40458: PUSH
40459: FOR_TO
40460: IFFALSE 40552
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
40462: LD_ADDR_VAR 0 4
40466: PUSH
40467: LD_VAR 0 2
40471: PUSH
40472: LD_VAR 0 3
40476: ARRAY
40477: PPUSH
40478: LD_INT 3
40480: PPUSH
40481: CALL_OW 259
40485: PUSH
40486: LD_VAR 0 2
40490: PUSH
40491: LD_VAR 0 3
40495: ARRAY
40496: PPUSH
40497: CALL_OW 432
40501: MINUS
40502: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
40503: LD_VAR 0 4
40507: PUSH
40508: LD_VAR 0 5
40512: PPUSH
40513: LD_INT 3
40515: PPUSH
40516: CALL_OW 259
40520: PUSH
40521: LD_VAR 0 5
40525: PPUSH
40526: CALL_OW 432
40530: MINUS
40531: GREATEREQUAL
40532: IFFALSE 40550
// mech := result [ i ] ;
40534: LD_ADDR_VAR 0 5
40538: PUSH
40539: LD_VAR 0 2
40543: PUSH
40544: LD_VAR 0 3
40548: ARRAY
40549: ST_TO_ADDR
// end ;
40550: GO 40459
40552: POP
40553: POP
// end ; ComLinkTo ( vehicle , mech ) ;
40554: LD_VAR 0 1
40558: PPUSH
40559: LD_VAR 0 5
40563: PPUSH
40564: CALL_OW 135
// end ;
40568: LD_VAR 0 2
40572: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
40573: LD_INT 0
40575: PPUSH
40576: PPUSH
40577: PPUSH
40578: PPUSH
40579: PPUSH
40580: PPUSH
40581: PPUSH
40582: PPUSH
40583: PPUSH
40584: PPUSH
40585: PPUSH
40586: PPUSH
40587: PPUSH
// result := [ ] ;
40588: LD_ADDR_VAR 0 7
40592: PUSH
40593: EMPTY
40594: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
40595: LD_VAR 0 1
40599: PPUSH
40600: CALL_OW 266
40604: PUSH
40605: LD_INT 0
40607: PUSH
40608: LD_INT 1
40610: PUSH
40611: EMPTY
40612: LIST
40613: LIST
40614: IN
40615: NOT
40616: IFFALSE 40620
// exit ;
40618: GO 42254
// if name then
40620: LD_VAR 0 3
40624: IFFALSE 40640
// SetBName ( base_dep , name ) ;
40626: LD_VAR 0 1
40630: PPUSH
40631: LD_VAR 0 3
40635: PPUSH
40636: CALL_OW 500
// base := GetBase ( base_dep ) ;
40640: LD_ADDR_VAR 0 15
40644: PUSH
40645: LD_VAR 0 1
40649: PPUSH
40650: CALL_OW 274
40654: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
40655: LD_ADDR_VAR 0 16
40659: PUSH
40660: LD_VAR 0 1
40664: PPUSH
40665: CALL_OW 255
40669: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
40670: LD_ADDR_VAR 0 17
40674: PUSH
40675: LD_VAR 0 1
40679: PPUSH
40680: CALL_OW 248
40684: ST_TO_ADDR
// if sources then
40685: LD_VAR 0 5
40689: IFFALSE 40736
// for i = 1 to 3 do
40691: LD_ADDR_VAR 0 8
40695: PUSH
40696: DOUBLE
40697: LD_INT 1
40699: DEC
40700: ST_TO_ADDR
40701: LD_INT 3
40703: PUSH
40704: FOR_TO
40705: IFFALSE 40734
// AddResourceType ( base , i , sources [ i ] ) ;
40707: LD_VAR 0 15
40711: PPUSH
40712: LD_VAR 0 8
40716: PPUSH
40717: LD_VAR 0 5
40721: PUSH
40722: LD_VAR 0 8
40726: ARRAY
40727: PPUSH
40728: CALL_OW 276
40732: GO 40704
40734: POP
40735: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
40736: LD_ADDR_VAR 0 18
40740: PUSH
40741: LD_VAR 0 15
40745: PPUSH
40746: LD_VAR 0 2
40750: PPUSH
40751: LD_INT 1
40753: PPUSH
40754: CALL 39997 0 3
40758: ST_TO_ADDR
// InitHc ;
40759: CALL_OW 19
// InitUc ;
40763: CALL_OW 18
// uc_side := side ;
40767: LD_ADDR_OWVAR 20
40771: PUSH
40772: LD_VAR 0 16
40776: ST_TO_ADDR
// uc_nation := nation ;
40777: LD_ADDR_OWVAR 21
40781: PUSH
40782: LD_VAR 0 17
40786: ST_TO_ADDR
// if buildings then
40787: LD_VAR 0 18
40791: IFFALSE 42113
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
40793: LD_ADDR_VAR 0 19
40797: PUSH
40798: LD_VAR 0 18
40802: PPUSH
40803: LD_INT 2
40805: PUSH
40806: LD_INT 30
40808: PUSH
40809: LD_INT 29
40811: PUSH
40812: EMPTY
40813: LIST
40814: LIST
40815: PUSH
40816: LD_INT 30
40818: PUSH
40819: LD_INT 30
40821: PUSH
40822: EMPTY
40823: LIST
40824: LIST
40825: PUSH
40826: EMPTY
40827: LIST
40828: LIST
40829: LIST
40830: PPUSH
40831: CALL_OW 72
40835: ST_TO_ADDR
// if tmp then
40836: LD_VAR 0 19
40840: IFFALSE 40888
// for i in tmp do
40842: LD_ADDR_VAR 0 8
40846: PUSH
40847: LD_VAR 0 19
40851: PUSH
40852: FOR_IN
40853: IFFALSE 40886
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
40855: LD_VAR 0 8
40859: PPUSH
40860: CALL_OW 250
40864: PPUSH
40865: LD_VAR 0 8
40869: PPUSH
40870: CALL_OW 251
40874: PPUSH
40875: LD_VAR 0 16
40879: PPUSH
40880: CALL_OW 441
40884: GO 40852
40886: POP
40887: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
40888: LD_VAR 0 18
40892: PPUSH
40893: LD_INT 2
40895: PUSH
40896: LD_INT 30
40898: PUSH
40899: LD_INT 32
40901: PUSH
40902: EMPTY
40903: LIST
40904: LIST
40905: PUSH
40906: LD_INT 30
40908: PUSH
40909: LD_INT 33
40911: PUSH
40912: EMPTY
40913: LIST
40914: LIST
40915: PUSH
40916: EMPTY
40917: LIST
40918: LIST
40919: LIST
40920: PPUSH
40921: CALL_OW 72
40925: IFFALSE 41013
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
40927: LD_ADDR_VAR 0 8
40931: PUSH
40932: LD_VAR 0 18
40936: PPUSH
40937: LD_INT 2
40939: PUSH
40940: LD_INT 30
40942: PUSH
40943: LD_INT 32
40945: PUSH
40946: EMPTY
40947: LIST
40948: LIST
40949: PUSH
40950: LD_INT 30
40952: PUSH
40953: LD_INT 33
40955: PUSH
40956: EMPTY
40957: LIST
40958: LIST
40959: PUSH
40960: EMPTY
40961: LIST
40962: LIST
40963: LIST
40964: PPUSH
40965: CALL_OW 72
40969: PUSH
40970: FOR_IN
40971: IFFALSE 41011
// begin if not GetBWeapon ( i ) then
40973: LD_VAR 0 8
40977: PPUSH
40978: CALL_OW 269
40982: NOT
40983: IFFALSE 41009
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
40985: LD_VAR 0 8
40989: PPUSH
40990: LD_VAR 0 8
40994: PPUSH
40995: LD_VAR 0 2
40999: PPUSH
41000: CALL 42259 0 2
41004: PPUSH
41005: CALL_OW 431
// end ;
41009: GO 40970
41011: POP
41012: POP
// end ; for i = 1 to personel do
41013: LD_ADDR_VAR 0 8
41017: PUSH
41018: DOUBLE
41019: LD_INT 1
41021: DEC
41022: ST_TO_ADDR
41023: LD_VAR 0 6
41027: PUSH
41028: FOR_TO
41029: IFFALSE 42093
// begin if i > 4 then
41031: LD_VAR 0 8
41035: PUSH
41036: LD_INT 4
41038: GREATER
41039: IFFALSE 41043
// break ;
41041: GO 42093
// case i of 1 :
41043: LD_VAR 0 8
41047: PUSH
41048: LD_INT 1
41050: DOUBLE
41051: EQUAL
41052: IFTRUE 41056
41054: GO 41136
41056: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
41057: LD_ADDR_VAR 0 12
41061: PUSH
41062: LD_VAR 0 18
41066: PPUSH
41067: LD_INT 22
41069: PUSH
41070: LD_VAR 0 16
41074: PUSH
41075: EMPTY
41076: LIST
41077: LIST
41078: PUSH
41079: LD_INT 58
41081: PUSH
41082: EMPTY
41083: LIST
41084: PUSH
41085: LD_INT 2
41087: PUSH
41088: LD_INT 30
41090: PUSH
41091: LD_INT 32
41093: PUSH
41094: EMPTY
41095: LIST
41096: LIST
41097: PUSH
41098: LD_INT 30
41100: PUSH
41101: LD_INT 4
41103: PUSH
41104: EMPTY
41105: LIST
41106: LIST
41107: PUSH
41108: LD_INT 30
41110: PUSH
41111: LD_INT 5
41113: PUSH
41114: EMPTY
41115: LIST
41116: LIST
41117: PUSH
41118: EMPTY
41119: LIST
41120: LIST
41121: LIST
41122: LIST
41123: PUSH
41124: EMPTY
41125: LIST
41126: LIST
41127: LIST
41128: PPUSH
41129: CALL_OW 72
41133: ST_TO_ADDR
41134: GO 41358
41136: LD_INT 2
41138: DOUBLE
41139: EQUAL
41140: IFTRUE 41144
41142: GO 41206
41144: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
41145: LD_ADDR_VAR 0 12
41149: PUSH
41150: LD_VAR 0 18
41154: PPUSH
41155: LD_INT 22
41157: PUSH
41158: LD_VAR 0 16
41162: PUSH
41163: EMPTY
41164: LIST
41165: LIST
41166: PUSH
41167: LD_INT 2
41169: PUSH
41170: LD_INT 30
41172: PUSH
41173: LD_INT 0
41175: PUSH
41176: EMPTY
41177: LIST
41178: LIST
41179: PUSH
41180: LD_INT 30
41182: PUSH
41183: LD_INT 1
41185: PUSH
41186: EMPTY
41187: LIST
41188: LIST
41189: PUSH
41190: EMPTY
41191: LIST
41192: LIST
41193: LIST
41194: PUSH
41195: EMPTY
41196: LIST
41197: LIST
41198: PPUSH
41199: CALL_OW 72
41203: ST_TO_ADDR
41204: GO 41358
41206: LD_INT 3
41208: DOUBLE
41209: EQUAL
41210: IFTRUE 41214
41212: GO 41276
41214: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
41215: LD_ADDR_VAR 0 12
41219: PUSH
41220: LD_VAR 0 18
41224: PPUSH
41225: LD_INT 22
41227: PUSH
41228: LD_VAR 0 16
41232: PUSH
41233: EMPTY
41234: LIST
41235: LIST
41236: PUSH
41237: LD_INT 2
41239: PUSH
41240: LD_INT 30
41242: PUSH
41243: LD_INT 2
41245: PUSH
41246: EMPTY
41247: LIST
41248: LIST
41249: PUSH
41250: LD_INT 30
41252: PUSH
41253: LD_INT 3
41255: PUSH
41256: EMPTY
41257: LIST
41258: LIST
41259: PUSH
41260: EMPTY
41261: LIST
41262: LIST
41263: LIST
41264: PUSH
41265: EMPTY
41266: LIST
41267: LIST
41268: PPUSH
41269: CALL_OW 72
41273: ST_TO_ADDR
41274: GO 41358
41276: LD_INT 4
41278: DOUBLE
41279: EQUAL
41280: IFTRUE 41284
41282: GO 41357
41284: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
41285: LD_ADDR_VAR 0 12
41289: PUSH
41290: LD_VAR 0 18
41294: PPUSH
41295: LD_INT 22
41297: PUSH
41298: LD_VAR 0 16
41302: PUSH
41303: EMPTY
41304: LIST
41305: LIST
41306: PUSH
41307: LD_INT 2
41309: PUSH
41310: LD_INT 30
41312: PUSH
41313: LD_INT 6
41315: PUSH
41316: EMPTY
41317: LIST
41318: LIST
41319: PUSH
41320: LD_INT 30
41322: PUSH
41323: LD_INT 7
41325: PUSH
41326: EMPTY
41327: LIST
41328: LIST
41329: PUSH
41330: LD_INT 30
41332: PUSH
41333: LD_INT 8
41335: PUSH
41336: EMPTY
41337: LIST
41338: LIST
41339: PUSH
41340: EMPTY
41341: LIST
41342: LIST
41343: LIST
41344: LIST
41345: PUSH
41346: EMPTY
41347: LIST
41348: LIST
41349: PPUSH
41350: CALL_OW 72
41354: ST_TO_ADDR
41355: GO 41358
41357: POP
// if i = 1 then
41358: LD_VAR 0 8
41362: PUSH
41363: LD_INT 1
41365: EQUAL
41366: IFFALSE 41477
// begin tmp := [ ] ;
41368: LD_ADDR_VAR 0 19
41372: PUSH
41373: EMPTY
41374: ST_TO_ADDR
// for j in f do
41375: LD_ADDR_VAR 0 9
41379: PUSH
41380: LD_VAR 0 12
41384: PUSH
41385: FOR_IN
41386: IFFALSE 41459
// if GetBType ( j ) = b_bunker then
41388: LD_VAR 0 9
41392: PPUSH
41393: CALL_OW 266
41397: PUSH
41398: LD_INT 32
41400: EQUAL
41401: IFFALSE 41428
// tmp := Insert ( tmp , 1 , j ) else
41403: LD_ADDR_VAR 0 19
41407: PUSH
41408: LD_VAR 0 19
41412: PPUSH
41413: LD_INT 1
41415: PPUSH
41416: LD_VAR 0 9
41420: PPUSH
41421: CALL_OW 2
41425: ST_TO_ADDR
41426: GO 41457
// tmp := Insert ( tmp , tmp + 1 , j ) ;
41428: LD_ADDR_VAR 0 19
41432: PUSH
41433: LD_VAR 0 19
41437: PPUSH
41438: LD_VAR 0 19
41442: PUSH
41443: LD_INT 1
41445: PLUS
41446: PPUSH
41447: LD_VAR 0 9
41451: PPUSH
41452: CALL_OW 2
41456: ST_TO_ADDR
41457: GO 41385
41459: POP
41460: POP
// if tmp then
41461: LD_VAR 0 19
41465: IFFALSE 41477
// f := tmp ;
41467: LD_ADDR_VAR 0 12
41471: PUSH
41472: LD_VAR 0 19
41476: ST_TO_ADDR
// end ; x := personel [ i ] ;
41477: LD_ADDR_VAR 0 13
41481: PUSH
41482: LD_VAR 0 6
41486: PUSH
41487: LD_VAR 0 8
41491: ARRAY
41492: ST_TO_ADDR
// if x = - 1 then
41493: LD_VAR 0 13
41497: PUSH
41498: LD_INT 1
41500: NEG
41501: EQUAL
41502: IFFALSE 41711
// begin for j in f do
41504: LD_ADDR_VAR 0 9
41508: PUSH
41509: LD_VAR 0 12
41513: PUSH
41514: FOR_IN
41515: IFFALSE 41707
// repeat InitHc ;
41517: CALL_OW 19
// if GetBType ( j ) = b_barracks then
41521: LD_VAR 0 9
41525: PPUSH
41526: CALL_OW 266
41530: PUSH
41531: LD_INT 5
41533: EQUAL
41534: IFFALSE 41604
// begin if UnitsInside ( j ) < 3 then
41536: LD_VAR 0 9
41540: PPUSH
41541: CALL_OW 313
41545: PUSH
41546: LD_INT 3
41548: LESS
41549: IFFALSE 41585
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
41551: LD_INT 0
41553: PPUSH
41554: LD_INT 5
41556: PUSH
41557: LD_INT 8
41559: PUSH
41560: LD_INT 9
41562: PUSH
41563: EMPTY
41564: LIST
41565: LIST
41566: LIST
41567: PUSH
41568: LD_VAR 0 17
41572: ARRAY
41573: PPUSH
41574: LD_VAR 0 4
41578: PPUSH
41579: CALL_OW 380
41583: GO 41602
// PrepareHuman ( false , i , skill ) ;
41585: LD_INT 0
41587: PPUSH
41588: LD_VAR 0 8
41592: PPUSH
41593: LD_VAR 0 4
41597: PPUSH
41598: CALL_OW 380
// end else
41602: GO 41621
// PrepareHuman ( false , i , skill ) ;
41604: LD_INT 0
41606: PPUSH
41607: LD_VAR 0 8
41611: PPUSH
41612: LD_VAR 0 4
41616: PPUSH
41617: CALL_OW 380
// un := CreateHuman ;
41621: LD_ADDR_VAR 0 14
41625: PUSH
41626: CALL_OW 44
41630: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41631: LD_ADDR_VAR 0 7
41635: PUSH
41636: LD_VAR 0 7
41640: PPUSH
41641: LD_INT 1
41643: PPUSH
41644: LD_VAR 0 14
41648: PPUSH
41649: CALL_OW 2
41653: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
41654: LD_VAR 0 14
41658: PPUSH
41659: LD_VAR 0 9
41663: PPUSH
41664: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
41668: LD_VAR 0 9
41672: PPUSH
41673: CALL_OW 313
41677: PUSH
41678: LD_INT 6
41680: EQUAL
41681: PUSH
41682: LD_VAR 0 9
41686: PPUSH
41687: CALL_OW 266
41691: PUSH
41692: LD_INT 32
41694: PUSH
41695: LD_INT 31
41697: PUSH
41698: EMPTY
41699: LIST
41700: LIST
41701: IN
41702: OR
41703: IFFALSE 41517
41705: GO 41514
41707: POP
41708: POP
// end else
41709: GO 42091
// for j = 1 to x do
41711: LD_ADDR_VAR 0 9
41715: PUSH
41716: DOUBLE
41717: LD_INT 1
41719: DEC
41720: ST_TO_ADDR
41721: LD_VAR 0 13
41725: PUSH
41726: FOR_TO
41727: IFFALSE 42089
// begin InitHc ;
41729: CALL_OW 19
// if not f then
41733: LD_VAR 0 12
41737: NOT
41738: IFFALSE 41827
// begin PrepareHuman ( false , i , skill ) ;
41740: LD_INT 0
41742: PPUSH
41743: LD_VAR 0 8
41747: PPUSH
41748: LD_VAR 0 4
41752: PPUSH
41753: CALL_OW 380
// un := CreateHuman ;
41757: LD_ADDR_VAR 0 14
41761: PUSH
41762: CALL_OW 44
41766: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41767: LD_ADDR_VAR 0 7
41771: PUSH
41772: LD_VAR 0 7
41776: PPUSH
41777: LD_INT 1
41779: PPUSH
41780: LD_VAR 0 14
41784: PPUSH
41785: CALL_OW 2
41789: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
41790: LD_VAR 0 14
41794: PPUSH
41795: LD_VAR 0 1
41799: PPUSH
41800: CALL_OW 250
41804: PPUSH
41805: LD_VAR 0 1
41809: PPUSH
41810: CALL_OW 251
41814: PPUSH
41815: LD_INT 10
41817: PPUSH
41818: LD_INT 0
41820: PPUSH
41821: CALL_OW 50
// continue ;
41825: GO 41726
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
41827: LD_VAR 0 12
41831: PUSH
41832: LD_INT 1
41834: ARRAY
41835: PPUSH
41836: CALL_OW 313
41840: PUSH
41841: LD_VAR 0 12
41845: PUSH
41846: LD_INT 1
41848: ARRAY
41849: PPUSH
41850: CALL_OW 266
41854: PUSH
41855: LD_INT 32
41857: PUSH
41858: LD_INT 31
41860: PUSH
41861: EMPTY
41862: LIST
41863: LIST
41864: IN
41865: AND
41866: PUSH
41867: LD_VAR 0 12
41871: PUSH
41872: LD_INT 1
41874: ARRAY
41875: PPUSH
41876: CALL_OW 313
41880: PUSH
41881: LD_INT 6
41883: EQUAL
41884: OR
41885: IFFALSE 41905
// f := Delete ( f , 1 ) ;
41887: LD_ADDR_VAR 0 12
41891: PUSH
41892: LD_VAR 0 12
41896: PPUSH
41897: LD_INT 1
41899: PPUSH
41900: CALL_OW 3
41904: ST_TO_ADDR
// if not f then
41905: LD_VAR 0 12
41909: NOT
41910: IFFALSE 41928
// begin x := x + 2 ;
41912: LD_ADDR_VAR 0 13
41916: PUSH
41917: LD_VAR 0 13
41921: PUSH
41922: LD_INT 2
41924: PLUS
41925: ST_TO_ADDR
// continue ;
41926: GO 41726
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
41928: LD_VAR 0 12
41932: PUSH
41933: LD_INT 1
41935: ARRAY
41936: PPUSH
41937: CALL_OW 266
41941: PUSH
41942: LD_INT 5
41944: EQUAL
41945: IFFALSE 42019
// begin if UnitsInside ( f [ 1 ] ) < 3 then
41947: LD_VAR 0 12
41951: PUSH
41952: LD_INT 1
41954: ARRAY
41955: PPUSH
41956: CALL_OW 313
41960: PUSH
41961: LD_INT 3
41963: LESS
41964: IFFALSE 42000
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
41966: LD_INT 0
41968: PPUSH
41969: LD_INT 5
41971: PUSH
41972: LD_INT 8
41974: PUSH
41975: LD_INT 9
41977: PUSH
41978: EMPTY
41979: LIST
41980: LIST
41981: LIST
41982: PUSH
41983: LD_VAR 0 17
41987: ARRAY
41988: PPUSH
41989: LD_VAR 0 4
41993: PPUSH
41994: CALL_OW 380
41998: GO 42017
// PrepareHuman ( false , i , skill ) ;
42000: LD_INT 0
42002: PPUSH
42003: LD_VAR 0 8
42007: PPUSH
42008: LD_VAR 0 4
42012: PPUSH
42013: CALL_OW 380
// end else
42017: GO 42036
// PrepareHuman ( false , i , skill ) ;
42019: LD_INT 0
42021: PPUSH
42022: LD_VAR 0 8
42026: PPUSH
42027: LD_VAR 0 4
42031: PPUSH
42032: CALL_OW 380
// un := CreateHuman ;
42036: LD_ADDR_VAR 0 14
42040: PUSH
42041: CALL_OW 44
42045: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
42046: LD_ADDR_VAR 0 7
42050: PUSH
42051: LD_VAR 0 7
42055: PPUSH
42056: LD_INT 1
42058: PPUSH
42059: LD_VAR 0 14
42063: PPUSH
42064: CALL_OW 2
42068: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
42069: LD_VAR 0 14
42073: PPUSH
42074: LD_VAR 0 12
42078: PUSH
42079: LD_INT 1
42081: ARRAY
42082: PPUSH
42083: CALL_OW 52
// end ;
42087: GO 41726
42089: POP
42090: POP
// end ;
42091: GO 41028
42093: POP
42094: POP
// result := result ^ buildings ;
42095: LD_ADDR_VAR 0 7
42099: PUSH
42100: LD_VAR 0 7
42104: PUSH
42105: LD_VAR 0 18
42109: ADD
42110: ST_TO_ADDR
// end else
42111: GO 42254
// begin for i = 1 to personel do
42113: LD_ADDR_VAR 0 8
42117: PUSH
42118: DOUBLE
42119: LD_INT 1
42121: DEC
42122: ST_TO_ADDR
42123: LD_VAR 0 6
42127: PUSH
42128: FOR_TO
42129: IFFALSE 42252
// begin if i > 4 then
42131: LD_VAR 0 8
42135: PUSH
42136: LD_INT 4
42138: GREATER
42139: IFFALSE 42143
// break ;
42141: GO 42252
// x := personel [ i ] ;
42143: LD_ADDR_VAR 0 13
42147: PUSH
42148: LD_VAR 0 6
42152: PUSH
42153: LD_VAR 0 8
42157: ARRAY
42158: ST_TO_ADDR
// if x = - 1 then
42159: LD_VAR 0 13
42163: PUSH
42164: LD_INT 1
42166: NEG
42167: EQUAL
42168: IFFALSE 42172
// continue ;
42170: GO 42128
// PrepareHuman ( false , i , skill ) ;
42172: LD_INT 0
42174: PPUSH
42175: LD_VAR 0 8
42179: PPUSH
42180: LD_VAR 0 4
42184: PPUSH
42185: CALL_OW 380
// un := CreateHuman ;
42189: LD_ADDR_VAR 0 14
42193: PUSH
42194: CALL_OW 44
42198: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
42199: LD_VAR 0 14
42203: PPUSH
42204: LD_VAR 0 1
42208: PPUSH
42209: CALL_OW 250
42213: PPUSH
42214: LD_VAR 0 1
42218: PPUSH
42219: CALL_OW 251
42223: PPUSH
42224: LD_INT 10
42226: PPUSH
42227: LD_INT 0
42229: PPUSH
42230: CALL_OW 50
// result := result ^ un ;
42234: LD_ADDR_VAR 0 7
42238: PUSH
42239: LD_VAR 0 7
42243: PUSH
42244: LD_VAR 0 14
42248: ADD
42249: ST_TO_ADDR
// end ;
42250: GO 42128
42252: POP
42253: POP
// end ; end ;
42254: LD_VAR 0 7
42258: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
42259: LD_INT 0
42261: PPUSH
42262: PPUSH
42263: PPUSH
42264: PPUSH
42265: PPUSH
42266: PPUSH
42267: PPUSH
42268: PPUSH
42269: PPUSH
42270: PPUSH
42271: PPUSH
42272: PPUSH
42273: PPUSH
42274: PPUSH
42275: PPUSH
42276: PPUSH
// result := false ;
42277: LD_ADDR_VAR 0 3
42281: PUSH
42282: LD_INT 0
42284: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
42285: LD_VAR 0 1
42289: NOT
42290: PUSH
42291: LD_VAR 0 1
42295: PPUSH
42296: CALL_OW 266
42300: PUSH
42301: LD_INT 32
42303: PUSH
42304: LD_INT 33
42306: PUSH
42307: EMPTY
42308: LIST
42309: LIST
42310: IN
42311: NOT
42312: OR
42313: IFFALSE 42317
// exit ;
42315: GO 43426
// nat := GetNation ( tower ) ;
42317: LD_ADDR_VAR 0 12
42321: PUSH
42322: LD_VAR 0 1
42326: PPUSH
42327: CALL_OW 248
42331: ST_TO_ADDR
// side := GetSide ( tower ) ;
42332: LD_ADDR_VAR 0 16
42336: PUSH
42337: LD_VAR 0 1
42341: PPUSH
42342: CALL_OW 255
42346: ST_TO_ADDR
// x := GetX ( tower ) ;
42347: LD_ADDR_VAR 0 10
42351: PUSH
42352: LD_VAR 0 1
42356: PPUSH
42357: CALL_OW 250
42361: ST_TO_ADDR
// y := GetY ( tower ) ;
42362: LD_ADDR_VAR 0 11
42366: PUSH
42367: LD_VAR 0 1
42371: PPUSH
42372: CALL_OW 251
42376: ST_TO_ADDR
// if not x or not y then
42377: LD_VAR 0 10
42381: NOT
42382: PUSH
42383: LD_VAR 0 11
42387: NOT
42388: OR
42389: IFFALSE 42393
// exit ;
42391: GO 43426
// weapon := 0 ;
42393: LD_ADDR_VAR 0 18
42397: PUSH
42398: LD_INT 0
42400: ST_TO_ADDR
// fac_list := [ ] ;
42401: LD_ADDR_VAR 0 17
42405: PUSH
42406: EMPTY
42407: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
42408: LD_ADDR_VAR 0 6
42412: PUSH
42413: LD_VAR 0 1
42417: PPUSH
42418: CALL_OW 274
42422: PPUSH
42423: LD_VAR 0 2
42427: PPUSH
42428: LD_INT 0
42430: PPUSH
42431: CALL 39997 0 3
42435: PPUSH
42436: LD_INT 30
42438: PUSH
42439: LD_INT 3
42441: PUSH
42442: EMPTY
42443: LIST
42444: LIST
42445: PPUSH
42446: CALL_OW 72
42450: ST_TO_ADDR
// if not factories then
42451: LD_VAR 0 6
42455: NOT
42456: IFFALSE 42460
// exit ;
42458: GO 43426
// for i in factories do
42460: LD_ADDR_VAR 0 8
42464: PUSH
42465: LD_VAR 0 6
42469: PUSH
42470: FOR_IN
42471: IFFALSE 42496
// fac_list := fac_list union AvailableWeaponList ( i ) ;
42473: LD_ADDR_VAR 0 17
42477: PUSH
42478: LD_VAR 0 17
42482: PUSH
42483: LD_VAR 0 8
42487: PPUSH
42488: CALL_OW 478
42492: UNION
42493: ST_TO_ADDR
42494: GO 42470
42496: POP
42497: POP
// if not fac_list then
42498: LD_VAR 0 17
42502: NOT
42503: IFFALSE 42507
// exit ;
42505: GO 43426
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
42507: LD_ADDR_VAR 0 5
42511: PUSH
42512: LD_INT 4
42514: PUSH
42515: LD_INT 5
42517: PUSH
42518: LD_INT 9
42520: PUSH
42521: LD_INT 10
42523: PUSH
42524: LD_INT 6
42526: PUSH
42527: LD_INT 7
42529: PUSH
42530: LD_INT 11
42532: PUSH
42533: EMPTY
42534: LIST
42535: LIST
42536: LIST
42537: LIST
42538: LIST
42539: LIST
42540: LIST
42541: PUSH
42542: LD_INT 27
42544: PUSH
42545: LD_INT 28
42547: PUSH
42548: LD_INT 26
42550: PUSH
42551: LD_INT 30
42553: PUSH
42554: EMPTY
42555: LIST
42556: LIST
42557: LIST
42558: LIST
42559: PUSH
42560: LD_INT 43
42562: PUSH
42563: LD_INT 44
42565: PUSH
42566: LD_INT 46
42568: PUSH
42569: LD_INT 45
42571: PUSH
42572: LD_INT 47
42574: PUSH
42575: LD_INT 49
42577: PUSH
42578: EMPTY
42579: LIST
42580: LIST
42581: LIST
42582: LIST
42583: LIST
42584: LIST
42585: PUSH
42586: EMPTY
42587: LIST
42588: LIST
42589: LIST
42590: PUSH
42591: LD_VAR 0 12
42595: ARRAY
42596: ST_TO_ADDR
// list := list isect fac_list ;
42597: LD_ADDR_VAR 0 5
42601: PUSH
42602: LD_VAR 0 5
42606: PUSH
42607: LD_VAR 0 17
42611: ISECT
42612: ST_TO_ADDR
// if not list then
42613: LD_VAR 0 5
42617: NOT
42618: IFFALSE 42622
// exit ;
42620: GO 43426
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
42622: LD_VAR 0 12
42626: PUSH
42627: LD_INT 3
42629: EQUAL
42630: PUSH
42631: LD_INT 49
42633: PUSH
42634: LD_VAR 0 5
42638: IN
42639: AND
42640: PUSH
42641: LD_INT 31
42643: PPUSH
42644: LD_VAR 0 16
42648: PPUSH
42649: CALL_OW 321
42653: PUSH
42654: LD_INT 2
42656: EQUAL
42657: AND
42658: IFFALSE 42718
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
42660: LD_INT 22
42662: PUSH
42663: LD_VAR 0 16
42667: PUSH
42668: EMPTY
42669: LIST
42670: LIST
42671: PUSH
42672: LD_INT 35
42674: PUSH
42675: LD_INT 49
42677: PUSH
42678: EMPTY
42679: LIST
42680: LIST
42681: PUSH
42682: LD_INT 91
42684: PUSH
42685: LD_VAR 0 1
42689: PUSH
42690: LD_INT 10
42692: PUSH
42693: EMPTY
42694: LIST
42695: LIST
42696: LIST
42697: PUSH
42698: EMPTY
42699: LIST
42700: LIST
42701: LIST
42702: PPUSH
42703: CALL_OW 69
42707: NOT
42708: IFFALSE 42718
// weapon := ru_time_lapser ;
42710: LD_ADDR_VAR 0 18
42714: PUSH
42715: LD_INT 49
42717: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
42718: LD_VAR 0 12
42722: PUSH
42723: LD_INT 1
42725: PUSH
42726: LD_INT 2
42728: PUSH
42729: EMPTY
42730: LIST
42731: LIST
42732: IN
42733: PUSH
42734: LD_INT 11
42736: PUSH
42737: LD_VAR 0 5
42741: IN
42742: PUSH
42743: LD_INT 30
42745: PUSH
42746: LD_VAR 0 5
42750: IN
42751: OR
42752: AND
42753: PUSH
42754: LD_INT 6
42756: PPUSH
42757: LD_VAR 0 16
42761: PPUSH
42762: CALL_OW 321
42766: PUSH
42767: LD_INT 2
42769: EQUAL
42770: AND
42771: IFFALSE 42936
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
42773: LD_INT 22
42775: PUSH
42776: LD_VAR 0 16
42780: PUSH
42781: EMPTY
42782: LIST
42783: LIST
42784: PUSH
42785: LD_INT 2
42787: PUSH
42788: LD_INT 35
42790: PUSH
42791: LD_INT 11
42793: PUSH
42794: EMPTY
42795: LIST
42796: LIST
42797: PUSH
42798: LD_INT 35
42800: PUSH
42801: LD_INT 30
42803: PUSH
42804: EMPTY
42805: LIST
42806: LIST
42807: PUSH
42808: EMPTY
42809: LIST
42810: LIST
42811: LIST
42812: PUSH
42813: LD_INT 91
42815: PUSH
42816: LD_VAR 0 1
42820: PUSH
42821: LD_INT 18
42823: PUSH
42824: EMPTY
42825: LIST
42826: LIST
42827: LIST
42828: PUSH
42829: EMPTY
42830: LIST
42831: LIST
42832: LIST
42833: PPUSH
42834: CALL_OW 69
42838: NOT
42839: PUSH
42840: LD_INT 22
42842: PUSH
42843: LD_VAR 0 16
42847: PUSH
42848: EMPTY
42849: LIST
42850: LIST
42851: PUSH
42852: LD_INT 2
42854: PUSH
42855: LD_INT 30
42857: PUSH
42858: LD_INT 32
42860: PUSH
42861: EMPTY
42862: LIST
42863: LIST
42864: PUSH
42865: LD_INT 30
42867: PUSH
42868: LD_INT 33
42870: PUSH
42871: EMPTY
42872: LIST
42873: LIST
42874: PUSH
42875: EMPTY
42876: LIST
42877: LIST
42878: LIST
42879: PUSH
42880: LD_INT 91
42882: PUSH
42883: LD_VAR 0 1
42887: PUSH
42888: LD_INT 12
42890: PUSH
42891: EMPTY
42892: LIST
42893: LIST
42894: LIST
42895: PUSH
42896: EMPTY
42897: LIST
42898: LIST
42899: LIST
42900: PUSH
42901: EMPTY
42902: LIST
42903: PPUSH
42904: CALL_OW 69
42908: PUSH
42909: LD_INT 2
42911: GREATER
42912: AND
42913: IFFALSE 42936
// weapon := [ us_radar , ar_radar ] [ nat ] ;
42915: LD_ADDR_VAR 0 18
42919: PUSH
42920: LD_INT 11
42922: PUSH
42923: LD_INT 30
42925: PUSH
42926: EMPTY
42927: LIST
42928: LIST
42929: PUSH
42930: LD_VAR 0 12
42934: ARRAY
42935: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
42936: LD_VAR 0 18
42940: NOT
42941: PUSH
42942: LD_INT 40
42944: PPUSH
42945: LD_VAR 0 16
42949: PPUSH
42950: CALL_OW 321
42954: PUSH
42955: LD_INT 2
42957: EQUAL
42958: AND
42959: PUSH
42960: LD_INT 7
42962: PUSH
42963: LD_VAR 0 5
42967: IN
42968: PUSH
42969: LD_INT 28
42971: PUSH
42972: LD_VAR 0 5
42976: IN
42977: OR
42978: PUSH
42979: LD_INT 45
42981: PUSH
42982: LD_VAR 0 5
42986: IN
42987: OR
42988: AND
42989: IFFALSE 43243
// begin hex := GetHexInfo ( x , y ) ;
42991: LD_ADDR_VAR 0 4
42995: PUSH
42996: LD_VAR 0 10
43000: PPUSH
43001: LD_VAR 0 11
43005: PPUSH
43006: CALL_OW 546
43010: ST_TO_ADDR
// if hex [ 1 ] then
43011: LD_VAR 0 4
43015: PUSH
43016: LD_INT 1
43018: ARRAY
43019: IFFALSE 43023
// exit ;
43021: GO 43426
// height := hex [ 2 ] ;
43023: LD_ADDR_VAR 0 15
43027: PUSH
43028: LD_VAR 0 4
43032: PUSH
43033: LD_INT 2
43035: ARRAY
43036: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
43037: LD_ADDR_VAR 0 14
43041: PUSH
43042: LD_INT 0
43044: PUSH
43045: LD_INT 2
43047: PUSH
43048: LD_INT 3
43050: PUSH
43051: LD_INT 5
43053: PUSH
43054: EMPTY
43055: LIST
43056: LIST
43057: LIST
43058: LIST
43059: ST_TO_ADDR
// for i in tmp do
43060: LD_ADDR_VAR 0 8
43064: PUSH
43065: LD_VAR 0 14
43069: PUSH
43070: FOR_IN
43071: IFFALSE 43241
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
43073: LD_ADDR_VAR 0 9
43077: PUSH
43078: LD_VAR 0 10
43082: PPUSH
43083: LD_VAR 0 8
43087: PPUSH
43088: LD_INT 5
43090: PPUSH
43091: CALL_OW 272
43095: PUSH
43096: LD_VAR 0 11
43100: PPUSH
43101: LD_VAR 0 8
43105: PPUSH
43106: LD_INT 5
43108: PPUSH
43109: CALL_OW 273
43113: PUSH
43114: EMPTY
43115: LIST
43116: LIST
43117: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
43118: LD_VAR 0 9
43122: PUSH
43123: LD_INT 1
43125: ARRAY
43126: PPUSH
43127: LD_VAR 0 9
43131: PUSH
43132: LD_INT 2
43134: ARRAY
43135: PPUSH
43136: CALL_OW 488
43140: IFFALSE 43239
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
43142: LD_ADDR_VAR 0 4
43146: PUSH
43147: LD_VAR 0 9
43151: PUSH
43152: LD_INT 1
43154: ARRAY
43155: PPUSH
43156: LD_VAR 0 9
43160: PUSH
43161: LD_INT 2
43163: ARRAY
43164: PPUSH
43165: CALL_OW 546
43169: ST_TO_ADDR
// if hex [ 1 ] then
43170: LD_VAR 0 4
43174: PUSH
43175: LD_INT 1
43177: ARRAY
43178: IFFALSE 43182
// continue ;
43180: GO 43070
// h := hex [ 2 ] ;
43182: LD_ADDR_VAR 0 13
43186: PUSH
43187: LD_VAR 0 4
43191: PUSH
43192: LD_INT 2
43194: ARRAY
43195: ST_TO_ADDR
// if h + 7 < height then
43196: LD_VAR 0 13
43200: PUSH
43201: LD_INT 7
43203: PLUS
43204: PUSH
43205: LD_VAR 0 15
43209: LESS
43210: IFFALSE 43239
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
43212: LD_ADDR_VAR 0 18
43216: PUSH
43217: LD_INT 7
43219: PUSH
43220: LD_INT 28
43222: PUSH
43223: LD_INT 45
43225: PUSH
43226: EMPTY
43227: LIST
43228: LIST
43229: LIST
43230: PUSH
43231: LD_VAR 0 12
43235: ARRAY
43236: ST_TO_ADDR
// break ;
43237: GO 43241
// end ; end ; end ;
43239: GO 43070
43241: POP
43242: POP
// end ; if not weapon then
43243: LD_VAR 0 18
43247: NOT
43248: IFFALSE 43308
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
43250: LD_ADDR_VAR 0 5
43254: PUSH
43255: LD_VAR 0 5
43259: PUSH
43260: LD_INT 11
43262: PUSH
43263: LD_INT 30
43265: PUSH
43266: LD_INT 49
43268: PUSH
43269: EMPTY
43270: LIST
43271: LIST
43272: LIST
43273: DIFF
43274: ST_TO_ADDR
// if not list then
43275: LD_VAR 0 5
43279: NOT
43280: IFFALSE 43284
// exit ;
43282: GO 43426
// weapon := list [ rand ( 1 , list ) ] ;
43284: LD_ADDR_VAR 0 18
43288: PUSH
43289: LD_VAR 0 5
43293: PUSH
43294: LD_INT 1
43296: PPUSH
43297: LD_VAR 0 5
43301: PPUSH
43302: CALL_OW 12
43306: ARRAY
43307: ST_TO_ADDR
// end ; if weapon then
43308: LD_VAR 0 18
43312: IFFALSE 43426
// begin tmp := CostOfWeapon ( weapon ) ;
43314: LD_ADDR_VAR 0 14
43318: PUSH
43319: LD_VAR 0 18
43323: PPUSH
43324: CALL_OW 451
43328: ST_TO_ADDR
// j := GetBase ( tower ) ;
43329: LD_ADDR_VAR 0 9
43333: PUSH
43334: LD_VAR 0 1
43338: PPUSH
43339: CALL_OW 274
43343: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
43344: LD_VAR 0 9
43348: PPUSH
43349: LD_INT 1
43351: PPUSH
43352: CALL_OW 275
43356: PUSH
43357: LD_VAR 0 14
43361: PUSH
43362: LD_INT 1
43364: ARRAY
43365: GREATEREQUAL
43366: PUSH
43367: LD_VAR 0 9
43371: PPUSH
43372: LD_INT 2
43374: PPUSH
43375: CALL_OW 275
43379: PUSH
43380: LD_VAR 0 14
43384: PUSH
43385: LD_INT 2
43387: ARRAY
43388: GREATEREQUAL
43389: AND
43390: PUSH
43391: LD_VAR 0 9
43395: PPUSH
43396: LD_INT 3
43398: PPUSH
43399: CALL_OW 275
43403: PUSH
43404: LD_VAR 0 14
43408: PUSH
43409: LD_INT 3
43411: ARRAY
43412: GREATEREQUAL
43413: AND
43414: IFFALSE 43426
// result := weapon ;
43416: LD_ADDR_VAR 0 3
43420: PUSH
43421: LD_VAR 0 18
43425: ST_TO_ADDR
// end ; end ;
43426: LD_VAR 0 3
43430: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
43431: LD_INT 0
43433: PPUSH
43434: PPUSH
// result := true ;
43435: LD_ADDR_VAR 0 3
43439: PUSH
43440: LD_INT 1
43442: ST_TO_ADDR
// if array1 = array2 then
43443: LD_VAR 0 1
43447: PUSH
43448: LD_VAR 0 2
43452: EQUAL
43453: IFFALSE 43513
// begin for i = 1 to array1 do
43455: LD_ADDR_VAR 0 4
43459: PUSH
43460: DOUBLE
43461: LD_INT 1
43463: DEC
43464: ST_TO_ADDR
43465: LD_VAR 0 1
43469: PUSH
43470: FOR_TO
43471: IFFALSE 43509
// if array1 [ i ] <> array2 [ i ] then
43473: LD_VAR 0 1
43477: PUSH
43478: LD_VAR 0 4
43482: ARRAY
43483: PUSH
43484: LD_VAR 0 2
43488: PUSH
43489: LD_VAR 0 4
43493: ARRAY
43494: NONEQUAL
43495: IFFALSE 43507
// begin result := false ;
43497: LD_ADDR_VAR 0 3
43501: PUSH
43502: LD_INT 0
43504: ST_TO_ADDR
// break ;
43505: GO 43509
// end ;
43507: GO 43470
43509: POP
43510: POP
// end else
43511: GO 43521
// result := false ;
43513: LD_ADDR_VAR 0 3
43517: PUSH
43518: LD_INT 0
43520: ST_TO_ADDR
// end ;
43521: LD_VAR 0 3
43525: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
43526: LD_INT 0
43528: PPUSH
43529: PPUSH
// if not array1 or not array2 then
43530: LD_VAR 0 1
43534: NOT
43535: PUSH
43536: LD_VAR 0 2
43540: NOT
43541: OR
43542: IFFALSE 43546
// exit ;
43544: GO 43610
// result := true ;
43546: LD_ADDR_VAR 0 3
43550: PUSH
43551: LD_INT 1
43553: ST_TO_ADDR
// for i = 1 to array1 do
43554: LD_ADDR_VAR 0 4
43558: PUSH
43559: DOUBLE
43560: LD_INT 1
43562: DEC
43563: ST_TO_ADDR
43564: LD_VAR 0 1
43568: PUSH
43569: FOR_TO
43570: IFFALSE 43608
// if array1 [ i ] <> array2 [ i ] then
43572: LD_VAR 0 1
43576: PUSH
43577: LD_VAR 0 4
43581: ARRAY
43582: PUSH
43583: LD_VAR 0 2
43587: PUSH
43588: LD_VAR 0 4
43592: ARRAY
43593: NONEQUAL
43594: IFFALSE 43606
// begin result := false ;
43596: LD_ADDR_VAR 0 3
43600: PUSH
43601: LD_INT 0
43603: ST_TO_ADDR
// break ;
43604: GO 43608
// end ;
43606: GO 43569
43608: POP
43609: POP
// end ;
43610: LD_VAR 0 3
43614: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
43615: LD_INT 0
43617: PPUSH
43618: PPUSH
43619: PPUSH
// pom := GetBase ( fac ) ;
43620: LD_ADDR_VAR 0 5
43624: PUSH
43625: LD_VAR 0 1
43629: PPUSH
43630: CALL_OW 274
43634: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
43635: LD_ADDR_VAR 0 4
43639: PUSH
43640: LD_VAR 0 2
43644: PUSH
43645: LD_INT 1
43647: ARRAY
43648: PPUSH
43649: LD_VAR 0 2
43653: PUSH
43654: LD_INT 2
43656: ARRAY
43657: PPUSH
43658: LD_VAR 0 2
43662: PUSH
43663: LD_INT 3
43665: ARRAY
43666: PPUSH
43667: LD_VAR 0 2
43671: PUSH
43672: LD_INT 4
43674: ARRAY
43675: PPUSH
43676: CALL_OW 449
43680: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43681: LD_ADDR_VAR 0 3
43685: PUSH
43686: LD_VAR 0 5
43690: PPUSH
43691: LD_INT 1
43693: PPUSH
43694: CALL_OW 275
43698: PUSH
43699: LD_VAR 0 4
43703: PUSH
43704: LD_INT 1
43706: ARRAY
43707: GREATEREQUAL
43708: PUSH
43709: LD_VAR 0 5
43713: PPUSH
43714: LD_INT 2
43716: PPUSH
43717: CALL_OW 275
43721: PUSH
43722: LD_VAR 0 4
43726: PUSH
43727: LD_INT 2
43729: ARRAY
43730: GREATEREQUAL
43731: AND
43732: PUSH
43733: LD_VAR 0 5
43737: PPUSH
43738: LD_INT 3
43740: PPUSH
43741: CALL_OW 275
43745: PUSH
43746: LD_VAR 0 4
43750: PUSH
43751: LD_INT 3
43753: ARRAY
43754: GREATEREQUAL
43755: AND
43756: ST_TO_ADDR
// end ;
43757: LD_VAR 0 3
43761: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
43762: LD_INT 0
43764: PPUSH
43765: PPUSH
43766: PPUSH
43767: PPUSH
// pom := GetBase ( building ) ;
43768: LD_ADDR_VAR 0 3
43772: PUSH
43773: LD_VAR 0 1
43777: PPUSH
43778: CALL_OW 274
43782: ST_TO_ADDR
// if not pom then
43783: LD_VAR 0 3
43787: NOT
43788: IFFALSE 43792
// exit ;
43790: GO 43962
// btype := GetBType ( building ) ;
43792: LD_ADDR_VAR 0 5
43796: PUSH
43797: LD_VAR 0 1
43801: PPUSH
43802: CALL_OW 266
43806: ST_TO_ADDR
// if btype = b_armoury then
43807: LD_VAR 0 5
43811: PUSH
43812: LD_INT 4
43814: EQUAL
43815: IFFALSE 43825
// btype := b_barracks ;
43817: LD_ADDR_VAR 0 5
43821: PUSH
43822: LD_INT 5
43824: ST_TO_ADDR
// if btype = b_depot then
43825: LD_VAR 0 5
43829: PUSH
43830: LD_INT 0
43832: EQUAL
43833: IFFALSE 43843
// btype := b_warehouse ;
43835: LD_ADDR_VAR 0 5
43839: PUSH
43840: LD_INT 1
43842: ST_TO_ADDR
// if btype = b_workshop then
43843: LD_VAR 0 5
43847: PUSH
43848: LD_INT 2
43850: EQUAL
43851: IFFALSE 43861
// btype := b_factory ;
43853: LD_ADDR_VAR 0 5
43857: PUSH
43858: LD_INT 3
43860: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
43861: LD_ADDR_VAR 0 4
43865: PUSH
43866: LD_VAR 0 5
43870: PPUSH
43871: LD_VAR 0 1
43875: PPUSH
43876: CALL_OW 248
43880: PPUSH
43881: CALL_OW 450
43885: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43886: LD_ADDR_VAR 0 2
43890: PUSH
43891: LD_VAR 0 3
43895: PPUSH
43896: LD_INT 1
43898: PPUSH
43899: CALL_OW 275
43903: PUSH
43904: LD_VAR 0 4
43908: PUSH
43909: LD_INT 1
43911: ARRAY
43912: GREATEREQUAL
43913: PUSH
43914: LD_VAR 0 3
43918: PPUSH
43919: LD_INT 2
43921: PPUSH
43922: CALL_OW 275
43926: PUSH
43927: LD_VAR 0 4
43931: PUSH
43932: LD_INT 2
43934: ARRAY
43935: GREATEREQUAL
43936: AND
43937: PUSH
43938: LD_VAR 0 3
43942: PPUSH
43943: LD_INT 3
43945: PPUSH
43946: CALL_OW 275
43950: PUSH
43951: LD_VAR 0 4
43955: PUSH
43956: LD_INT 3
43958: ARRAY
43959: GREATEREQUAL
43960: AND
43961: ST_TO_ADDR
// end ;
43962: LD_VAR 0 2
43966: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
43967: LD_INT 0
43969: PPUSH
43970: PPUSH
43971: PPUSH
// pom := GetBase ( building ) ;
43972: LD_ADDR_VAR 0 4
43976: PUSH
43977: LD_VAR 0 1
43981: PPUSH
43982: CALL_OW 274
43986: ST_TO_ADDR
// if not pom then
43987: LD_VAR 0 4
43991: NOT
43992: IFFALSE 43996
// exit ;
43994: GO 44097
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
43996: LD_ADDR_VAR 0 5
44000: PUSH
44001: LD_VAR 0 2
44005: PPUSH
44006: LD_VAR 0 1
44010: PPUSH
44011: CALL_OW 248
44015: PPUSH
44016: CALL_OW 450
44020: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
44021: LD_ADDR_VAR 0 3
44025: PUSH
44026: LD_VAR 0 4
44030: PPUSH
44031: LD_INT 1
44033: PPUSH
44034: CALL_OW 275
44038: PUSH
44039: LD_VAR 0 5
44043: PUSH
44044: LD_INT 1
44046: ARRAY
44047: GREATEREQUAL
44048: PUSH
44049: LD_VAR 0 4
44053: PPUSH
44054: LD_INT 2
44056: PPUSH
44057: CALL_OW 275
44061: PUSH
44062: LD_VAR 0 5
44066: PUSH
44067: LD_INT 2
44069: ARRAY
44070: GREATEREQUAL
44071: AND
44072: PUSH
44073: LD_VAR 0 4
44077: PPUSH
44078: LD_INT 3
44080: PPUSH
44081: CALL_OW 275
44085: PUSH
44086: LD_VAR 0 5
44090: PUSH
44091: LD_INT 3
44093: ARRAY
44094: GREATEREQUAL
44095: AND
44096: ST_TO_ADDR
// end ;
44097: LD_VAR 0 3
44101: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
44102: LD_INT 0
44104: PPUSH
44105: PPUSH
44106: PPUSH
44107: PPUSH
44108: PPUSH
44109: PPUSH
44110: PPUSH
44111: PPUSH
44112: PPUSH
44113: PPUSH
44114: PPUSH
// result := false ;
44115: LD_ADDR_VAR 0 8
44119: PUSH
44120: LD_INT 0
44122: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
44123: LD_VAR 0 5
44127: NOT
44128: PUSH
44129: LD_VAR 0 1
44133: NOT
44134: OR
44135: PUSH
44136: LD_VAR 0 2
44140: NOT
44141: OR
44142: PUSH
44143: LD_VAR 0 3
44147: NOT
44148: OR
44149: IFFALSE 44153
// exit ;
44151: GO 44967
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
44153: LD_ADDR_VAR 0 14
44157: PUSH
44158: LD_VAR 0 1
44162: PPUSH
44163: LD_VAR 0 2
44167: PPUSH
44168: LD_VAR 0 3
44172: PPUSH
44173: LD_VAR 0 4
44177: PPUSH
44178: LD_VAR 0 5
44182: PUSH
44183: LD_INT 1
44185: ARRAY
44186: PPUSH
44187: CALL_OW 248
44191: PPUSH
44192: LD_INT 0
44194: PPUSH
44195: CALL 46200 0 6
44199: ST_TO_ADDR
// if not hexes then
44200: LD_VAR 0 14
44204: NOT
44205: IFFALSE 44209
// exit ;
44207: GO 44967
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
44209: LD_ADDR_VAR 0 17
44213: PUSH
44214: LD_VAR 0 5
44218: PPUSH
44219: LD_INT 22
44221: PUSH
44222: LD_VAR 0 13
44226: PPUSH
44227: CALL_OW 255
44231: PUSH
44232: EMPTY
44233: LIST
44234: LIST
44235: PUSH
44236: LD_INT 2
44238: PUSH
44239: LD_INT 30
44241: PUSH
44242: LD_INT 0
44244: PUSH
44245: EMPTY
44246: LIST
44247: LIST
44248: PUSH
44249: LD_INT 30
44251: PUSH
44252: LD_INT 1
44254: PUSH
44255: EMPTY
44256: LIST
44257: LIST
44258: PUSH
44259: EMPTY
44260: LIST
44261: LIST
44262: LIST
44263: PUSH
44264: EMPTY
44265: LIST
44266: LIST
44267: PPUSH
44268: CALL_OW 72
44272: ST_TO_ADDR
// for i = 1 to hexes do
44273: LD_ADDR_VAR 0 9
44277: PUSH
44278: DOUBLE
44279: LD_INT 1
44281: DEC
44282: ST_TO_ADDR
44283: LD_VAR 0 14
44287: PUSH
44288: FOR_TO
44289: IFFALSE 44965
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44291: LD_ADDR_VAR 0 13
44295: PUSH
44296: LD_VAR 0 14
44300: PUSH
44301: LD_VAR 0 9
44305: ARRAY
44306: PUSH
44307: LD_INT 1
44309: ARRAY
44310: PPUSH
44311: LD_VAR 0 14
44315: PUSH
44316: LD_VAR 0 9
44320: ARRAY
44321: PUSH
44322: LD_INT 2
44324: ARRAY
44325: PPUSH
44326: CALL_OW 428
44330: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
44331: LD_VAR 0 14
44335: PUSH
44336: LD_VAR 0 9
44340: ARRAY
44341: PUSH
44342: LD_INT 1
44344: ARRAY
44345: PPUSH
44346: LD_VAR 0 14
44350: PUSH
44351: LD_VAR 0 9
44355: ARRAY
44356: PUSH
44357: LD_INT 2
44359: ARRAY
44360: PPUSH
44361: CALL_OW 351
44365: PUSH
44366: LD_VAR 0 14
44370: PUSH
44371: LD_VAR 0 9
44375: ARRAY
44376: PUSH
44377: LD_INT 1
44379: ARRAY
44380: PPUSH
44381: LD_VAR 0 14
44385: PUSH
44386: LD_VAR 0 9
44390: ARRAY
44391: PUSH
44392: LD_INT 2
44394: ARRAY
44395: PPUSH
44396: CALL_OW 488
44400: NOT
44401: OR
44402: PUSH
44403: LD_VAR 0 13
44407: PPUSH
44408: CALL_OW 247
44412: PUSH
44413: LD_INT 3
44415: EQUAL
44416: OR
44417: IFFALSE 44423
// exit ;
44419: POP
44420: POP
44421: GO 44967
// if not tmp then
44423: LD_VAR 0 13
44427: NOT
44428: IFFALSE 44432
// continue ;
44430: GO 44288
// result := true ;
44432: LD_ADDR_VAR 0 8
44436: PUSH
44437: LD_INT 1
44439: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
44440: LD_VAR 0 6
44444: PUSH
44445: LD_VAR 0 13
44449: PPUSH
44450: CALL_OW 247
44454: PUSH
44455: LD_INT 2
44457: EQUAL
44458: AND
44459: PUSH
44460: LD_VAR 0 13
44464: PPUSH
44465: CALL_OW 263
44469: PUSH
44470: LD_INT 1
44472: EQUAL
44473: AND
44474: IFFALSE 44638
// begin if IsDrivenBy ( tmp ) then
44476: LD_VAR 0 13
44480: PPUSH
44481: CALL_OW 311
44485: IFFALSE 44489
// continue ;
44487: GO 44288
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
44489: LD_VAR 0 6
44493: PPUSH
44494: LD_INT 3
44496: PUSH
44497: LD_INT 60
44499: PUSH
44500: EMPTY
44501: LIST
44502: PUSH
44503: EMPTY
44504: LIST
44505: LIST
44506: PUSH
44507: LD_INT 3
44509: PUSH
44510: LD_INT 55
44512: PUSH
44513: EMPTY
44514: LIST
44515: PUSH
44516: EMPTY
44517: LIST
44518: LIST
44519: PUSH
44520: EMPTY
44521: LIST
44522: LIST
44523: PPUSH
44524: CALL_OW 72
44528: IFFALSE 44636
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
44530: LD_ADDR_VAR 0 18
44534: PUSH
44535: LD_VAR 0 6
44539: PPUSH
44540: LD_INT 3
44542: PUSH
44543: LD_INT 60
44545: PUSH
44546: EMPTY
44547: LIST
44548: PUSH
44549: EMPTY
44550: LIST
44551: LIST
44552: PUSH
44553: LD_INT 3
44555: PUSH
44556: LD_INT 55
44558: PUSH
44559: EMPTY
44560: LIST
44561: PUSH
44562: EMPTY
44563: LIST
44564: LIST
44565: PUSH
44566: EMPTY
44567: LIST
44568: LIST
44569: PPUSH
44570: CALL_OW 72
44574: PUSH
44575: LD_INT 1
44577: ARRAY
44578: ST_TO_ADDR
// if IsInUnit ( driver ) then
44579: LD_VAR 0 18
44583: PPUSH
44584: CALL_OW 310
44588: IFFALSE 44599
// ComExit ( driver ) ;
44590: LD_VAR 0 18
44594: PPUSH
44595: CALL 69888 0 1
// AddComEnterUnit ( driver , tmp ) ;
44599: LD_VAR 0 18
44603: PPUSH
44604: LD_VAR 0 13
44608: PPUSH
44609: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
44613: LD_VAR 0 18
44617: PPUSH
44618: LD_VAR 0 7
44622: PPUSH
44623: CALL_OW 173
// AddComExitVehicle ( driver ) ;
44627: LD_VAR 0 18
44631: PPUSH
44632: CALL_OW 181
// end ; continue ;
44636: GO 44288
// end ; if not cleaners or not tmp in cleaners then
44638: LD_VAR 0 6
44642: NOT
44643: PUSH
44644: LD_VAR 0 13
44648: PUSH
44649: LD_VAR 0 6
44653: IN
44654: NOT
44655: OR
44656: IFFALSE 44963
// begin if dep then
44658: LD_VAR 0 17
44662: IFFALSE 44798
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
44664: LD_ADDR_VAR 0 16
44668: PUSH
44669: LD_VAR 0 17
44673: PUSH
44674: LD_INT 1
44676: ARRAY
44677: PPUSH
44678: CALL_OW 250
44682: PPUSH
44683: LD_VAR 0 17
44687: PUSH
44688: LD_INT 1
44690: ARRAY
44691: PPUSH
44692: CALL_OW 254
44696: PPUSH
44697: LD_INT 5
44699: PPUSH
44700: CALL_OW 272
44704: PUSH
44705: LD_VAR 0 17
44709: PUSH
44710: LD_INT 1
44712: ARRAY
44713: PPUSH
44714: CALL_OW 251
44718: PPUSH
44719: LD_VAR 0 17
44723: PUSH
44724: LD_INT 1
44726: ARRAY
44727: PPUSH
44728: CALL_OW 254
44732: PPUSH
44733: LD_INT 5
44735: PPUSH
44736: CALL_OW 273
44740: PUSH
44741: EMPTY
44742: LIST
44743: LIST
44744: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
44745: LD_VAR 0 16
44749: PUSH
44750: LD_INT 1
44752: ARRAY
44753: PPUSH
44754: LD_VAR 0 16
44758: PUSH
44759: LD_INT 2
44761: ARRAY
44762: PPUSH
44763: CALL_OW 488
44767: IFFALSE 44798
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
44769: LD_VAR 0 13
44773: PPUSH
44774: LD_VAR 0 16
44778: PUSH
44779: LD_INT 1
44781: ARRAY
44782: PPUSH
44783: LD_VAR 0 16
44787: PUSH
44788: LD_INT 2
44790: ARRAY
44791: PPUSH
44792: CALL_OW 111
// continue ;
44796: GO 44288
// end ; end ; r := GetDir ( tmp ) ;
44798: LD_ADDR_VAR 0 15
44802: PUSH
44803: LD_VAR 0 13
44807: PPUSH
44808: CALL_OW 254
44812: ST_TO_ADDR
// if r = 5 then
44813: LD_VAR 0 15
44817: PUSH
44818: LD_INT 5
44820: EQUAL
44821: IFFALSE 44831
// r := 0 ;
44823: LD_ADDR_VAR 0 15
44827: PUSH
44828: LD_INT 0
44830: ST_TO_ADDR
// for j = r to 5 do
44831: LD_ADDR_VAR 0 10
44835: PUSH
44836: DOUBLE
44837: LD_VAR 0 15
44841: DEC
44842: ST_TO_ADDR
44843: LD_INT 5
44845: PUSH
44846: FOR_TO
44847: IFFALSE 44961
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
44849: LD_ADDR_VAR 0 11
44853: PUSH
44854: LD_VAR 0 13
44858: PPUSH
44859: CALL_OW 250
44863: PPUSH
44864: LD_VAR 0 10
44868: PPUSH
44869: LD_INT 2
44871: PPUSH
44872: CALL_OW 272
44876: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
44877: LD_ADDR_VAR 0 12
44881: PUSH
44882: LD_VAR 0 13
44886: PPUSH
44887: CALL_OW 251
44891: PPUSH
44892: LD_VAR 0 10
44896: PPUSH
44897: LD_INT 2
44899: PPUSH
44900: CALL_OW 273
44904: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
44905: LD_VAR 0 11
44909: PPUSH
44910: LD_VAR 0 12
44914: PPUSH
44915: CALL_OW 488
44919: PUSH
44920: LD_VAR 0 11
44924: PPUSH
44925: LD_VAR 0 12
44929: PPUSH
44930: CALL_OW 428
44934: NOT
44935: AND
44936: IFFALSE 44959
// begin ComMoveXY ( tmp , _x , _y ) ;
44938: LD_VAR 0 13
44942: PPUSH
44943: LD_VAR 0 11
44947: PPUSH
44948: LD_VAR 0 12
44952: PPUSH
44953: CALL_OW 111
// break ;
44957: GO 44961
// end ; end ;
44959: GO 44846
44961: POP
44962: POP
// end ; end ;
44963: GO 44288
44965: POP
44966: POP
// end ;
44967: LD_VAR 0 8
44971: RET
// export function BuildingTechInvented ( side , btype ) ; begin
44972: LD_INT 0
44974: PPUSH
// result := true ;
44975: LD_ADDR_VAR 0 3
44979: PUSH
44980: LD_INT 1
44982: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
44983: LD_VAR 0 2
44987: PUSH
44988: LD_INT 24
44990: DOUBLE
44991: EQUAL
44992: IFTRUE 45002
44994: LD_INT 33
44996: DOUBLE
44997: EQUAL
44998: IFTRUE 45002
45000: GO 45027
45002: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
45003: LD_ADDR_VAR 0 3
45007: PUSH
45008: LD_INT 32
45010: PPUSH
45011: LD_VAR 0 1
45015: PPUSH
45016: CALL_OW 321
45020: PUSH
45021: LD_INT 2
45023: EQUAL
45024: ST_TO_ADDR
45025: GO 45343
45027: LD_INT 20
45029: DOUBLE
45030: EQUAL
45031: IFTRUE 45035
45033: GO 45060
45035: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
45036: LD_ADDR_VAR 0 3
45040: PUSH
45041: LD_INT 6
45043: PPUSH
45044: LD_VAR 0 1
45048: PPUSH
45049: CALL_OW 321
45053: PUSH
45054: LD_INT 2
45056: EQUAL
45057: ST_TO_ADDR
45058: GO 45343
45060: LD_INT 22
45062: DOUBLE
45063: EQUAL
45064: IFTRUE 45074
45066: LD_INT 36
45068: DOUBLE
45069: EQUAL
45070: IFTRUE 45074
45072: GO 45099
45074: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
45075: LD_ADDR_VAR 0 3
45079: PUSH
45080: LD_INT 15
45082: PPUSH
45083: LD_VAR 0 1
45087: PPUSH
45088: CALL_OW 321
45092: PUSH
45093: LD_INT 2
45095: EQUAL
45096: ST_TO_ADDR
45097: GO 45343
45099: LD_INT 30
45101: DOUBLE
45102: EQUAL
45103: IFTRUE 45107
45105: GO 45132
45107: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
45108: LD_ADDR_VAR 0 3
45112: PUSH
45113: LD_INT 20
45115: PPUSH
45116: LD_VAR 0 1
45120: PPUSH
45121: CALL_OW 321
45125: PUSH
45126: LD_INT 2
45128: EQUAL
45129: ST_TO_ADDR
45130: GO 45343
45132: LD_INT 28
45134: DOUBLE
45135: EQUAL
45136: IFTRUE 45146
45138: LD_INT 21
45140: DOUBLE
45141: EQUAL
45142: IFTRUE 45146
45144: GO 45171
45146: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
45147: LD_ADDR_VAR 0 3
45151: PUSH
45152: LD_INT 21
45154: PPUSH
45155: LD_VAR 0 1
45159: PPUSH
45160: CALL_OW 321
45164: PUSH
45165: LD_INT 2
45167: EQUAL
45168: ST_TO_ADDR
45169: GO 45343
45171: LD_INT 16
45173: DOUBLE
45174: EQUAL
45175: IFTRUE 45179
45177: GO 45204
45179: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
45180: LD_ADDR_VAR 0 3
45184: PUSH
45185: LD_INT 84
45187: PPUSH
45188: LD_VAR 0 1
45192: PPUSH
45193: CALL_OW 321
45197: PUSH
45198: LD_INT 2
45200: EQUAL
45201: ST_TO_ADDR
45202: GO 45343
45204: LD_INT 19
45206: DOUBLE
45207: EQUAL
45208: IFTRUE 45218
45210: LD_INT 23
45212: DOUBLE
45213: EQUAL
45214: IFTRUE 45218
45216: GO 45243
45218: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
45219: LD_ADDR_VAR 0 3
45223: PUSH
45224: LD_INT 83
45226: PPUSH
45227: LD_VAR 0 1
45231: PPUSH
45232: CALL_OW 321
45236: PUSH
45237: LD_INT 2
45239: EQUAL
45240: ST_TO_ADDR
45241: GO 45343
45243: LD_INT 17
45245: DOUBLE
45246: EQUAL
45247: IFTRUE 45251
45249: GO 45276
45251: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
45252: LD_ADDR_VAR 0 3
45256: PUSH
45257: LD_INT 39
45259: PPUSH
45260: LD_VAR 0 1
45264: PPUSH
45265: CALL_OW 321
45269: PUSH
45270: LD_INT 2
45272: EQUAL
45273: ST_TO_ADDR
45274: GO 45343
45276: LD_INT 18
45278: DOUBLE
45279: EQUAL
45280: IFTRUE 45284
45282: GO 45309
45284: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
45285: LD_ADDR_VAR 0 3
45289: PUSH
45290: LD_INT 40
45292: PPUSH
45293: LD_VAR 0 1
45297: PPUSH
45298: CALL_OW 321
45302: PUSH
45303: LD_INT 2
45305: EQUAL
45306: ST_TO_ADDR
45307: GO 45343
45309: LD_INT 27
45311: DOUBLE
45312: EQUAL
45313: IFTRUE 45317
45315: GO 45342
45317: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
45318: LD_ADDR_VAR 0 3
45322: PUSH
45323: LD_INT 35
45325: PPUSH
45326: LD_VAR 0 1
45330: PPUSH
45331: CALL_OW 321
45335: PUSH
45336: LD_INT 2
45338: EQUAL
45339: ST_TO_ADDR
45340: GO 45343
45342: POP
// end ;
45343: LD_VAR 0 3
45347: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
45348: LD_INT 0
45350: PPUSH
45351: PPUSH
45352: PPUSH
45353: PPUSH
45354: PPUSH
45355: PPUSH
45356: PPUSH
45357: PPUSH
45358: PPUSH
45359: PPUSH
45360: PPUSH
// result := false ;
45361: LD_ADDR_VAR 0 6
45365: PUSH
45366: LD_INT 0
45368: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
45369: LD_VAR 0 1
45373: NOT
45374: PUSH
45375: LD_VAR 0 1
45379: PPUSH
45380: CALL_OW 266
45384: PUSH
45385: LD_INT 0
45387: PUSH
45388: LD_INT 1
45390: PUSH
45391: EMPTY
45392: LIST
45393: LIST
45394: IN
45395: NOT
45396: OR
45397: PUSH
45398: LD_VAR 0 2
45402: NOT
45403: OR
45404: PUSH
45405: LD_VAR 0 5
45409: PUSH
45410: LD_INT 0
45412: PUSH
45413: LD_INT 1
45415: PUSH
45416: LD_INT 2
45418: PUSH
45419: LD_INT 3
45421: PUSH
45422: LD_INT 4
45424: PUSH
45425: LD_INT 5
45427: PUSH
45428: EMPTY
45429: LIST
45430: LIST
45431: LIST
45432: LIST
45433: LIST
45434: LIST
45435: IN
45436: NOT
45437: OR
45438: PUSH
45439: LD_VAR 0 3
45443: PPUSH
45444: LD_VAR 0 4
45448: PPUSH
45449: CALL_OW 488
45453: NOT
45454: OR
45455: IFFALSE 45459
// exit ;
45457: GO 46195
// side := GetSide ( depot ) ;
45459: LD_ADDR_VAR 0 9
45463: PUSH
45464: LD_VAR 0 1
45468: PPUSH
45469: CALL_OW 255
45473: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
45474: LD_VAR 0 9
45478: PPUSH
45479: LD_VAR 0 2
45483: PPUSH
45484: CALL 44972 0 2
45488: NOT
45489: IFFALSE 45493
// exit ;
45491: GO 46195
// pom := GetBase ( depot ) ;
45493: LD_ADDR_VAR 0 10
45497: PUSH
45498: LD_VAR 0 1
45502: PPUSH
45503: CALL_OW 274
45507: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
45508: LD_ADDR_VAR 0 11
45512: PUSH
45513: LD_VAR 0 2
45517: PPUSH
45518: LD_VAR 0 1
45522: PPUSH
45523: CALL_OW 248
45527: PPUSH
45528: CALL_OW 450
45532: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
45533: LD_VAR 0 10
45537: PPUSH
45538: LD_INT 1
45540: PPUSH
45541: CALL_OW 275
45545: PUSH
45546: LD_VAR 0 11
45550: PUSH
45551: LD_INT 1
45553: ARRAY
45554: GREATEREQUAL
45555: PUSH
45556: LD_VAR 0 10
45560: PPUSH
45561: LD_INT 2
45563: PPUSH
45564: CALL_OW 275
45568: PUSH
45569: LD_VAR 0 11
45573: PUSH
45574: LD_INT 2
45576: ARRAY
45577: GREATEREQUAL
45578: AND
45579: PUSH
45580: LD_VAR 0 10
45584: PPUSH
45585: LD_INT 3
45587: PPUSH
45588: CALL_OW 275
45592: PUSH
45593: LD_VAR 0 11
45597: PUSH
45598: LD_INT 3
45600: ARRAY
45601: GREATEREQUAL
45602: AND
45603: NOT
45604: IFFALSE 45608
// exit ;
45606: GO 46195
// if GetBType ( depot ) = b_depot then
45608: LD_VAR 0 1
45612: PPUSH
45613: CALL_OW 266
45617: PUSH
45618: LD_INT 0
45620: EQUAL
45621: IFFALSE 45633
// dist := 28 else
45623: LD_ADDR_VAR 0 14
45627: PUSH
45628: LD_INT 28
45630: ST_TO_ADDR
45631: GO 45641
// dist := 36 ;
45633: LD_ADDR_VAR 0 14
45637: PUSH
45638: LD_INT 36
45640: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
45641: LD_VAR 0 1
45645: PPUSH
45646: LD_VAR 0 3
45650: PPUSH
45651: LD_VAR 0 4
45655: PPUSH
45656: CALL_OW 297
45660: PUSH
45661: LD_VAR 0 14
45665: GREATER
45666: IFFALSE 45670
// exit ;
45668: GO 46195
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
45670: LD_ADDR_VAR 0 12
45674: PUSH
45675: LD_VAR 0 2
45679: PPUSH
45680: LD_VAR 0 3
45684: PPUSH
45685: LD_VAR 0 4
45689: PPUSH
45690: LD_VAR 0 5
45694: PPUSH
45695: LD_VAR 0 1
45699: PPUSH
45700: CALL_OW 248
45704: PPUSH
45705: LD_INT 0
45707: PPUSH
45708: CALL 46200 0 6
45712: ST_TO_ADDR
// if not hexes then
45713: LD_VAR 0 12
45717: NOT
45718: IFFALSE 45722
// exit ;
45720: GO 46195
// hex := GetHexInfo ( x , y ) ;
45722: LD_ADDR_VAR 0 15
45726: PUSH
45727: LD_VAR 0 3
45731: PPUSH
45732: LD_VAR 0 4
45736: PPUSH
45737: CALL_OW 546
45741: ST_TO_ADDR
// if hex [ 1 ] then
45742: LD_VAR 0 15
45746: PUSH
45747: LD_INT 1
45749: ARRAY
45750: IFFALSE 45754
// exit ;
45752: GO 46195
// height := hex [ 2 ] ;
45754: LD_ADDR_VAR 0 13
45758: PUSH
45759: LD_VAR 0 15
45763: PUSH
45764: LD_INT 2
45766: ARRAY
45767: ST_TO_ADDR
// for i = 1 to hexes do
45768: LD_ADDR_VAR 0 7
45772: PUSH
45773: DOUBLE
45774: LD_INT 1
45776: DEC
45777: ST_TO_ADDR
45778: LD_VAR 0 12
45782: PUSH
45783: FOR_TO
45784: IFFALSE 46114
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
45786: LD_VAR 0 12
45790: PUSH
45791: LD_VAR 0 7
45795: ARRAY
45796: PUSH
45797: LD_INT 1
45799: ARRAY
45800: PPUSH
45801: LD_VAR 0 12
45805: PUSH
45806: LD_VAR 0 7
45810: ARRAY
45811: PUSH
45812: LD_INT 2
45814: ARRAY
45815: PPUSH
45816: CALL_OW 488
45820: NOT
45821: PUSH
45822: LD_VAR 0 12
45826: PUSH
45827: LD_VAR 0 7
45831: ARRAY
45832: PUSH
45833: LD_INT 1
45835: ARRAY
45836: PPUSH
45837: LD_VAR 0 12
45841: PUSH
45842: LD_VAR 0 7
45846: ARRAY
45847: PUSH
45848: LD_INT 2
45850: ARRAY
45851: PPUSH
45852: CALL_OW 428
45856: PUSH
45857: LD_INT 0
45859: GREATER
45860: OR
45861: PUSH
45862: LD_VAR 0 12
45866: PUSH
45867: LD_VAR 0 7
45871: ARRAY
45872: PUSH
45873: LD_INT 1
45875: ARRAY
45876: PPUSH
45877: LD_VAR 0 12
45881: PUSH
45882: LD_VAR 0 7
45886: ARRAY
45887: PUSH
45888: LD_INT 2
45890: ARRAY
45891: PPUSH
45892: CALL_OW 351
45896: OR
45897: IFFALSE 45903
// exit ;
45899: POP
45900: POP
45901: GO 46195
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
45903: LD_ADDR_VAR 0 8
45907: PUSH
45908: LD_VAR 0 12
45912: PUSH
45913: LD_VAR 0 7
45917: ARRAY
45918: PUSH
45919: LD_INT 1
45921: ARRAY
45922: PPUSH
45923: LD_VAR 0 12
45927: PUSH
45928: LD_VAR 0 7
45932: ARRAY
45933: PUSH
45934: LD_INT 2
45936: ARRAY
45937: PPUSH
45938: CALL_OW 546
45942: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
45943: LD_VAR 0 8
45947: PUSH
45948: LD_INT 1
45950: ARRAY
45951: PUSH
45952: LD_VAR 0 8
45956: PUSH
45957: LD_INT 2
45959: ARRAY
45960: PUSH
45961: LD_VAR 0 13
45965: PUSH
45966: LD_INT 2
45968: PLUS
45969: GREATER
45970: OR
45971: PUSH
45972: LD_VAR 0 8
45976: PUSH
45977: LD_INT 2
45979: ARRAY
45980: PUSH
45981: LD_VAR 0 13
45985: PUSH
45986: LD_INT 2
45988: MINUS
45989: LESS
45990: OR
45991: PUSH
45992: LD_VAR 0 8
45996: PUSH
45997: LD_INT 3
45999: ARRAY
46000: PUSH
46001: LD_INT 0
46003: PUSH
46004: LD_INT 8
46006: PUSH
46007: LD_INT 9
46009: PUSH
46010: LD_INT 10
46012: PUSH
46013: LD_INT 11
46015: PUSH
46016: LD_INT 12
46018: PUSH
46019: LD_INT 13
46021: PUSH
46022: LD_INT 16
46024: PUSH
46025: LD_INT 17
46027: PUSH
46028: LD_INT 18
46030: PUSH
46031: LD_INT 19
46033: PUSH
46034: LD_INT 20
46036: PUSH
46037: LD_INT 21
46039: PUSH
46040: EMPTY
46041: LIST
46042: LIST
46043: LIST
46044: LIST
46045: LIST
46046: LIST
46047: LIST
46048: LIST
46049: LIST
46050: LIST
46051: LIST
46052: LIST
46053: LIST
46054: IN
46055: NOT
46056: OR
46057: PUSH
46058: LD_VAR 0 8
46062: PUSH
46063: LD_INT 5
46065: ARRAY
46066: NOT
46067: OR
46068: PUSH
46069: LD_VAR 0 8
46073: PUSH
46074: LD_INT 6
46076: ARRAY
46077: PUSH
46078: LD_INT 1
46080: PUSH
46081: LD_INT 2
46083: PUSH
46084: LD_INT 7
46086: PUSH
46087: LD_INT 9
46089: PUSH
46090: LD_INT 10
46092: PUSH
46093: LD_INT 11
46095: PUSH
46096: EMPTY
46097: LIST
46098: LIST
46099: LIST
46100: LIST
46101: LIST
46102: LIST
46103: IN
46104: NOT
46105: OR
46106: IFFALSE 46112
// exit ;
46108: POP
46109: POP
46110: GO 46195
// end ;
46112: GO 45783
46114: POP
46115: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
46116: LD_VAR 0 9
46120: PPUSH
46121: LD_VAR 0 3
46125: PPUSH
46126: LD_VAR 0 4
46130: PPUSH
46131: LD_INT 20
46133: PPUSH
46134: CALL 38147 0 4
46138: PUSH
46139: LD_INT 4
46141: ARRAY
46142: IFFALSE 46146
// exit ;
46144: GO 46195
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
46146: LD_VAR 0 2
46150: PUSH
46151: LD_INT 29
46153: PUSH
46154: LD_INT 30
46156: PUSH
46157: EMPTY
46158: LIST
46159: LIST
46160: IN
46161: PUSH
46162: LD_VAR 0 3
46166: PPUSH
46167: LD_VAR 0 4
46171: PPUSH
46172: LD_VAR 0 9
46176: PPUSH
46177: CALL_OW 440
46181: NOT
46182: AND
46183: IFFALSE 46187
// exit ;
46185: GO 46195
// result := true ;
46187: LD_ADDR_VAR 0 6
46191: PUSH
46192: LD_INT 1
46194: ST_TO_ADDR
// end ;
46195: LD_VAR 0 6
46199: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
46200: LD_INT 0
46202: PPUSH
46203: PPUSH
46204: PPUSH
46205: PPUSH
46206: PPUSH
46207: PPUSH
46208: PPUSH
46209: PPUSH
46210: PPUSH
46211: PPUSH
46212: PPUSH
46213: PPUSH
46214: PPUSH
46215: PPUSH
46216: PPUSH
46217: PPUSH
46218: PPUSH
46219: PPUSH
46220: PPUSH
46221: PPUSH
46222: PPUSH
46223: PPUSH
46224: PPUSH
46225: PPUSH
46226: PPUSH
46227: PPUSH
46228: PPUSH
46229: PPUSH
46230: PPUSH
46231: PPUSH
46232: PPUSH
46233: PPUSH
46234: PPUSH
46235: PPUSH
46236: PPUSH
46237: PPUSH
46238: PPUSH
46239: PPUSH
46240: PPUSH
46241: PPUSH
46242: PPUSH
46243: PPUSH
46244: PPUSH
46245: PPUSH
46246: PPUSH
46247: PPUSH
46248: PPUSH
46249: PPUSH
46250: PPUSH
46251: PPUSH
46252: PPUSH
46253: PPUSH
46254: PPUSH
46255: PPUSH
46256: PPUSH
46257: PPUSH
46258: PPUSH
46259: PPUSH
// result = [ ] ;
46260: LD_ADDR_VAR 0 7
46264: PUSH
46265: EMPTY
46266: ST_TO_ADDR
// temp_list = [ ] ;
46267: LD_ADDR_VAR 0 9
46271: PUSH
46272: EMPTY
46273: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
46274: LD_VAR 0 4
46278: PUSH
46279: LD_INT 0
46281: PUSH
46282: LD_INT 1
46284: PUSH
46285: LD_INT 2
46287: PUSH
46288: LD_INT 3
46290: PUSH
46291: LD_INT 4
46293: PUSH
46294: LD_INT 5
46296: PUSH
46297: EMPTY
46298: LIST
46299: LIST
46300: LIST
46301: LIST
46302: LIST
46303: LIST
46304: IN
46305: NOT
46306: PUSH
46307: LD_VAR 0 1
46311: PUSH
46312: LD_INT 0
46314: PUSH
46315: LD_INT 1
46317: PUSH
46318: EMPTY
46319: LIST
46320: LIST
46321: IN
46322: PUSH
46323: LD_VAR 0 5
46327: PUSH
46328: LD_INT 1
46330: PUSH
46331: LD_INT 2
46333: PUSH
46334: LD_INT 3
46336: PUSH
46337: EMPTY
46338: LIST
46339: LIST
46340: LIST
46341: IN
46342: NOT
46343: AND
46344: OR
46345: IFFALSE 46349
// exit ;
46347: GO 64740
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
46349: LD_VAR 0 1
46353: PUSH
46354: LD_INT 6
46356: PUSH
46357: LD_INT 7
46359: PUSH
46360: LD_INT 8
46362: PUSH
46363: LD_INT 13
46365: PUSH
46366: LD_INT 12
46368: PUSH
46369: LD_INT 15
46371: PUSH
46372: LD_INT 11
46374: PUSH
46375: LD_INT 14
46377: PUSH
46378: LD_INT 10
46380: PUSH
46381: EMPTY
46382: LIST
46383: LIST
46384: LIST
46385: LIST
46386: LIST
46387: LIST
46388: LIST
46389: LIST
46390: LIST
46391: IN
46392: IFFALSE 46402
// btype = b_lab ;
46394: LD_ADDR_VAR 0 1
46398: PUSH
46399: LD_INT 6
46401: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
46402: LD_VAR 0 6
46406: PUSH
46407: LD_INT 0
46409: PUSH
46410: LD_INT 1
46412: PUSH
46413: LD_INT 2
46415: PUSH
46416: EMPTY
46417: LIST
46418: LIST
46419: LIST
46420: IN
46421: NOT
46422: PUSH
46423: LD_VAR 0 1
46427: PUSH
46428: LD_INT 0
46430: PUSH
46431: LD_INT 1
46433: PUSH
46434: LD_INT 2
46436: PUSH
46437: LD_INT 3
46439: PUSH
46440: LD_INT 6
46442: PUSH
46443: LD_INT 36
46445: PUSH
46446: LD_INT 4
46448: PUSH
46449: LD_INT 5
46451: PUSH
46452: LD_INT 31
46454: PUSH
46455: LD_INT 32
46457: PUSH
46458: LD_INT 33
46460: PUSH
46461: EMPTY
46462: LIST
46463: LIST
46464: LIST
46465: LIST
46466: LIST
46467: LIST
46468: LIST
46469: LIST
46470: LIST
46471: LIST
46472: LIST
46473: IN
46474: NOT
46475: PUSH
46476: LD_VAR 0 6
46480: PUSH
46481: LD_INT 1
46483: EQUAL
46484: AND
46485: OR
46486: PUSH
46487: LD_VAR 0 1
46491: PUSH
46492: LD_INT 2
46494: PUSH
46495: LD_INT 3
46497: PUSH
46498: EMPTY
46499: LIST
46500: LIST
46501: IN
46502: NOT
46503: PUSH
46504: LD_VAR 0 6
46508: PUSH
46509: LD_INT 2
46511: EQUAL
46512: AND
46513: OR
46514: IFFALSE 46524
// mode = 0 ;
46516: LD_ADDR_VAR 0 6
46520: PUSH
46521: LD_INT 0
46523: ST_TO_ADDR
// case mode of 0 :
46524: LD_VAR 0 6
46528: PUSH
46529: LD_INT 0
46531: DOUBLE
46532: EQUAL
46533: IFTRUE 46537
46535: GO 57990
46537: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46538: LD_ADDR_VAR 0 11
46542: PUSH
46543: LD_INT 0
46545: PUSH
46546: LD_INT 0
46548: PUSH
46549: EMPTY
46550: LIST
46551: LIST
46552: PUSH
46553: LD_INT 0
46555: PUSH
46556: LD_INT 1
46558: NEG
46559: PUSH
46560: EMPTY
46561: LIST
46562: LIST
46563: PUSH
46564: LD_INT 1
46566: PUSH
46567: LD_INT 0
46569: PUSH
46570: EMPTY
46571: LIST
46572: LIST
46573: PUSH
46574: LD_INT 1
46576: PUSH
46577: LD_INT 1
46579: PUSH
46580: EMPTY
46581: LIST
46582: LIST
46583: PUSH
46584: LD_INT 0
46586: PUSH
46587: LD_INT 1
46589: PUSH
46590: EMPTY
46591: LIST
46592: LIST
46593: PUSH
46594: LD_INT 1
46596: NEG
46597: PUSH
46598: LD_INT 0
46600: PUSH
46601: EMPTY
46602: LIST
46603: LIST
46604: PUSH
46605: LD_INT 1
46607: NEG
46608: PUSH
46609: LD_INT 1
46611: NEG
46612: PUSH
46613: EMPTY
46614: LIST
46615: LIST
46616: PUSH
46617: LD_INT 1
46619: NEG
46620: PUSH
46621: LD_INT 2
46623: NEG
46624: PUSH
46625: EMPTY
46626: LIST
46627: LIST
46628: PUSH
46629: LD_INT 0
46631: PUSH
46632: LD_INT 2
46634: NEG
46635: PUSH
46636: EMPTY
46637: LIST
46638: LIST
46639: PUSH
46640: LD_INT 1
46642: PUSH
46643: LD_INT 1
46645: NEG
46646: PUSH
46647: EMPTY
46648: LIST
46649: LIST
46650: PUSH
46651: LD_INT 1
46653: PUSH
46654: LD_INT 2
46656: PUSH
46657: EMPTY
46658: LIST
46659: LIST
46660: PUSH
46661: LD_INT 0
46663: PUSH
46664: LD_INT 2
46666: PUSH
46667: EMPTY
46668: LIST
46669: LIST
46670: PUSH
46671: LD_INT 1
46673: NEG
46674: PUSH
46675: LD_INT 1
46677: PUSH
46678: EMPTY
46679: LIST
46680: LIST
46681: PUSH
46682: LD_INT 1
46684: PUSH
46685: LD_INT 3
46687: PUSH
46688: EMPTY
46689: LIST
46690: LIST
46691: PUSH
46692: LD_INT 0
46694: PUSH
46695: LD_INT 3
46697: PUSH
46698: EMPTY
46699: LIST
46700: LIST
46701: PUSH
46702: LD_INT 1
46704: NEG
46705: PUSH
46706: LD_INT 2
46708: PUSH
46709: EMPTY
46710: LIST
46711: LIST
46712: PUSH
46713: EMPTY
46714: LIST
46715: LIST
46716: LIST
46717: LIST
46718: LIST
46719: LIST
46720: LIST
46721: LIST
46722: LIST
46723: LIST
46724: LIST
46725: LIST
46726: LIST
46727: LIST
46728: LIST
46729: LIST
46730: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46731: LD_ADDR_VAR 0 12
46735: PUSH
46736: LD_INT 0
46738: PUSH
46739: LD_INT 0
46741: PUSH
46742: EMPTY
46743: LIST
46744: LIST
46745: PUSH
46746: LD_INT 0
46748: PUSH
46749: LD_INT 1
46751: NEG
46752: PUSH
46753: EMPTY
46754: LIST
46755: LIST
46756: PUSH
46757: LD_INT 1
46759: PUSH
46760: LD_INT 0
46762: PUSH
46763: EMPTY
46764: LIST
46765: LIST
46766: PUSH
46767: LD_INT 1
46769: PUSH
46770: LD_INT 1
46772: PUSH
46773: EMPTY
46774: LIST
46775: LIST
46776: PUSH
46777: LD_INT 0
46779: PUSH
46780: LD_INT 1
46782: PUSH
46783: EMPTY
46784: LIST
46785: LIST
46786: PUSH
46787: LD_INT 1
46789: NEG
46790: PUSH
46791: LD_INT 0
46793: PUSH
46794: EMPTY
46795: LIST
46796: LIST
46797: PUSH
46798: LD_INT 1
46800: NEG
46801: PUSH
46802: LD_INT 1
46804: NEG
46805: PUSH
46806: EMPTY
46807: LIST
46808: LIST
46809: PUSH
46810: LD_INT 1
46812: PUSH
46813: LD_INT 1
46815: NEG
46816: PUSH
46817: EMPTY
46818: LIST
46819: LIST
46820: PUSH
46821: LD_INT 2
46823: PUSH
46824: LD_INT 0
46826: PUSH
46827: EMPTY
46828: LIST
46829: LIST
46830: PUSH
46831: LD_INT 2
46833: PUSH
46834: LD_INT 1
46836: PUSH
46837: EMPTY
46838: LIST
46839: LIST
46840: PUSH
46841: LD_INT 1
46843: NEG
46844: PUSH
46845: LD_INT 1
46847: PUSH
46848: EMPTY
46849: LIST
46850: LIST
46851: PUSH
46852: LD_INT 2
46854: NEG
46855: PUSH
46856: LD_INT 0
46858: PUSH
46859: EMPTY
46860: LIST
46861: LIST
46862: PUSH
46863: LD_INT 2
46865: NEG
46866: PUSH
46867: LD_INT 1
46869: NEG
46870: PUSH
46871: EMPTY
46872: LIST
46873: LIST
46874: PUSH
46875: LD_INT 2
46877: NEG
46878: PUSH
46879: LD_INT 1
46881: PUSH
46882: EMPTY
46883: LIST
46884: LIST
46885: PUSH
46886: LD_INT 3
46888: NEG
46889: PUSH
46890: LD_INT 0
46892: PUSH
46893: EMPTY
46894: LIST
46895: LIST
46896: PUSH
46897: LD_INT 3
46899: NEG
46900: PUSH
46901: LD_INT 1
46903: NEG
46904: PUSH
46905: EMPTY
46906: LIST
46907: LIST
46908: PUSH
46909: EMPTY
46910: LIST
46911: LIST
46912: LIST
46913: LIST
46914: LIST
46915: LIST
46916: LIST
46917: LIST
46918: LIST
46919: LIST
46920: LIST
46921: LIST
46922: LIST
46923: LIST
46924: LIST
46925: LIST
46926: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46927: LD_ADDR_VAR 0 13
46931: PUSH
46932: LD_INT 0
46934: PUSH
46935: LD_INT 0
46937: PUSH
46938: EMPTY
46939: LIST
46940: LIST
46941: PUSH
46942: LD_INT 0
46944: PUSH
46945: LD_INT 1
46947: NEG
46948: PUSH
46949: EMPTY
46950: LIST
46951: LIST
46952: PUSH
46953: LD_INT 1
46955: PUSH
46956: LD_INT 0
46958: PUSH
46959: EMPTY
46960: LIST
46961: LIST
46962: PUSH
46963: LD_INT 1
46965: PUSH
46966: LD_INT 1
46968: PUSH
46969: EMPTY
46970: LIST
46971: LIST
46972: PUSH
46973: LD_INT 0
46975: PUSH
46976: LD_INT 1
46978: PUSH
46979: EMPTY
46980: LIST
46981: LIST
46982: PUSH
46983: LD_INT 1
46985: NEG
46986: PUSH
46987: LD_INT 0
46989: PUSH
46990: EMPTY
46991: LIST
46992: LIST
46993: PUSH
46994: LD_INT 1
46996: NEG
46997: PUSH
46998: LD_INT 1
47000: NEG
47001: PUSH
47002: EMPTY
47003: LIST
47004: LIST
47005: PUSH
47006: LD_INT 1
47008: NEG
47009: PUSH
47010: LD_INT 2
47012: NEG
47013: PUSH
47014: EMPTY
47015: LIST
47016: LIST
47017: PUSH
47018: LD_INT 2
47020: PUSH
47021: LD_INT 1
47023: PUSH
47024: EMPTY
47025: LIST
47026: LIST
47027: PUSH
47028: LD_INT 2
47030: PUSH
47031: LD_INT 2
47033: PUSH
47034: EMPTY
47035: LIST
47036: LIST
47037: PUSH
47038: LD_INT 1
47040: PUSH
47041: LD_INT 2
47043: PUSH
47044: EMPTY
47045: LIST
47046: LIST
47047: PUSH
47048: LD_INT 2
47050: NEG
47051: PUSH
47052: LD_INT 1
47054: NEG
47055: PUSH
47056: EMPTY
47057: LIST
47058: LIST
47059: PUSH
47060: LD_INT 2
47062: NEG
47063: PUSH
47064: LD_INT 2
47066: NEG
47067: PUSH
47068: EMPTY
47069: LIST
47070: LIST
47071: PUSH
47072: LD_INT 2
47074: NEG
47075: PUSH
47076: LD_INT 3
47078: NEG
47079: PUSH
47080: EMPTY
47081: LIST
47082: LIST
47083: PUSH
47084: LD_INT 3
47086: NEG
47087: PUSH
47088: LD_INT 2
47090: NEG
47091: PUSH
47092: EMPTY
47093: LIST
47094: LIST
47095: PUSH
47096: LD_INT 3
47098: NEG
47099: PUSH
47100: LD_INT 3
47102: NEG
47103: PUSH
47104: EMPTY
47105: LIST
47106: LIST
47107: PUSH
47108: EMPTY
47109: LIST
47110: LIST
47111: LIST
47112: LIST
47113: LIST
47114: LIST
47115: LIST
47116: LIST
47117: LIST
47118: LIST
47119: LIST
47120: LIST
47121: LIST
47122: LIST
47123: LIST
47124: LIST
47125: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47126: LD_ADDR_VAR 0 14
47130: PUSH
47131: LD_INT 0
47133: PUSH
47134: LD_INT 0
47136: PUSH
47137: EMPTY
47138: LIST
47139: LIST
47140: PUSH
47141: LD_INT 0
47143: PUSH
47144: LD_INT 1
47146: NEG
47147: PUSH
47148: EMPTY
47149: LIST
47150: LIST
47151: PUSH
47152: LD_INT 1
47154: PUSH
47155: LD_INT 0
47157: PUSH
47158: EMPTY
47159: LIST
47160: LIST
47161: PUSH
47162: LD_INT 1
47164: PUSH
47165: LD_INT 1
47167: PUSH
47168: EMPTY
47169: LIST
47170: LIST
47171: PUSH
47172: LD_INT 0
47174: PUSH
47175: LD_INT 1
47177: PUSH
47178: EMPTY
47179: LIST
47180: LIST
47181: PUSH
47182: LD_INT 1
47184: NEG
47185: PUSH
47186: LD_INT 0
47188: PUSH
47189: EMPTY
47190: LIST
47191: LIST
47192: PUSH
47193: LD_INT 1
47195: NEG
47196: PUSH
47197: LD_INT 1
47199: NEG
47200: PUSH
47201: EMPTY
47202: LIST
47203: LIST
47204: PUSH
47205: LD_INT 1
47207: NEG
47208: PUSH
47209: LD_INT 2
47211: NEG
47212: PUSH
47213: EMPTY
47214: LIST
47215: LIST
47216: PUSH
47217: LD_INT 0
47219: PUSH
47220: LD_INT 2
47222: NEG
47223: PUSH
47224: EMPTY
47225: LIST
47226: LIST
47227: PUSH
47228: LD_INT 1
47230: PUSH
47231: LD_INT 1
47233: NEG
47234: PUSH
47235: EMPTY
47236: LIST
47237: LIST
47238: PUSH
47239: LD_INT 1
47241: PUSH
47242: LD_INT 2
47244: PUSH
47245: EMPTY
47246: LIST
47247: LIST
47248: PUSH
47249: LD_INT 0
47251: PUSH
47252: LD_INT 2
47254: PUSH
47255: EMPTY
47256: LIST
47257: LIST
47258: PUSH
47259: LD_INT 1
47261: NEG
47262: PUSH
47263: LD_INT 1
47265: PUSH
47266: EMPTY
47267: LIST
47268: LIST
47269: PUSH
47270: LD_INT 1
47272: NEG
47273: PUSH
47274: LD_INT 3
47276: NEG
47277: PUSH
47278: EMPTY
47279: LIST
47280: LIST
47281: PUSH
47282: LD_INT 0
47284: PUSH
47285: LD_INT 3
47287: NEG
47288: PUSH
47289: EMPTY
47290: LIST
47291: LIST
47292: PUSH
47293: LD_INT 1
47295: PUSH
47296: LD_INT 2
47298: NEG
47299: PUSH
47300: EMPTY
47301: LIST
47302: LIST
47303: PUSH
47304: EMPTY
47305: LIST
47306: LIST
47307: LIST
47308: LIST
47309: LIST
47310: LIST
47311: LIST
47312: LIST
47313: LIST
47314: LIST
47315: LIST
47316: LIST
47317: LIST
47318: LIST
47319: LIST
47320: LIST
47321: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47322: LD_ADDR_VAR 0 15
47326: PUSH
47327: LD_INT 0
47329: PUSH
47330: LD_INT 0
47332: PUSH
47333: EMPTY
47334: LIST
47335: LIST
47336: PUSH
47337: LD_INT 0
47339: PUSH
47340: LD_INT 1
47342: NEG
47343: PUSH
47344: EMPTY
47345: LIST
47346: LIST
47347: PUSH
47348: LD_INT 1
47350: PUSH
47351: LD_INT 0
47353: PUSH
47354: EMPTY
47355: LIST
47356: LIST
47357: PUSH
47358: LD_INT 1
47360: PUSH
47361: LD_INT 1
47363: PUSH
47364: EMPTY
47365: LIST
47366: LIST
47367: PUSH
47368: LD_INT 0
47370: PUSH
47371: LD_INT 1
47373: PUSH
47374: EMPTY
47375: LIST
47376: LIST
47377: PUSH
47378: LD_INT 1
47380: NEG
47381: PUSH
47382: LD_INT 0
47384: PUSH
47385: EMPTY
47386: LIST
47387: LIST
47388: PUSH
47389: LD_INT 1
47391: NEG
47392: PUSH
47393: LD_INT 1
47395: NEG
47396: PUSH
47397: EMPTY
47398: LIST
47399: LIST
47400: PUSH
47401: LD_INT 1
47403: PUSH
47404: LD_INT 1
47406: NEG
47407: PUSH
47408: EMPTY
47409: LIST
47410: LIST
47411: PUSH
47412: LD_INT 2
47414: PUSH
47415: LD_INT 0
47417: PUSH
47418: EMPTY
47419: LIST
47420: LIST
47421: PUSH
47422: LD_INT 2
47424: PUSH
47425: LD_INT 1
47427: PUSH
47428: EMPTY
47429: LIST
47430: LIST
47431: PUSH
47432: LD_INT 1
47434: NEG
47435: PUSH
47436: LD_INT 1
47438: PUSH
47439: EMPTY
47440: LIST
47441: LIST
47442: PUSH
47443: LD_INT 2
47445: NEG
47446: PUSH
47447: LD_INT 0
47449: PUSH
47450: EMPTY
47451: LIST
47452: LIST
47453: PUSH
47454: LD_INT 2
47456: NEG
47457: PUSH
47458: LD_INT 1
47460: NEG
47461: PUSH
47462: EMPTY
47463: LIST
47464: LIST
47465: PUSH
47466: LD_INT 2
47468: PUSH
47469: LD_INT 1
47471: NEG
47472: PUSH
47473: EMPTY
47474: LIST
47475: LIST
47476: PUSH
47477: LD_INT 3
47479: PUSH
47480: LD_INT 0
47482: PUSH
47483: EMPTY
47484: LIST
47485: LIST
47486: PUSH
47487: LD_INT 3
47489: PUSH
47490: LD_INT 1
47492: PUSH
47493: EMPTY
47494: LIST
47495: LIST
47496: PUSH
47497: EMPTY
47498: LIST
47499: LIST
47500: LIST
47501: LIST
47502: LIST
47503: LIST
47504: LIST
47505: LIST
47506: LIST
47507: LIST
47508: LIST
47509: LIST
47510: LIST
47511: LIST
47512: LIST
47513: LIST
47514: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47515: LD_ADDR_VAR 0 16
47519: PUSH
47520: LD_INT 0
47522: PUSH
47523: LD_INT 0
47525: PUSH
47526: EMPTY
47527: LIST
47528: LIST
47529: PUSH
47530: LD_INT 0
47532: PUSH
47533: LD_INT 1
47535: NEG
47536: PUSH
47537: EMPTY
47538: LIST
47539: LIST
47540: PUSH
47541: LD_INT 1
47543: PUSH
47544: LD_INT 0
47546: PUSH
47547: EMPTY
47548: LIST
47549: LIST
47550: PUSH
47551: LD_INT 1
47553: PUSH
47554: LD_INT 1
47556: PUSH
47557: EMPTY
47558: LIST
47559: LIST
47560: PUSH
47561: LD_INT 0
47563: PUSH
47564: LD_INT 1
47566: PUSH
47567: EMPTY
47568: LIST
47569: LIST
47570: PUSH
47571: LD_INT 1
47573: NEG
47574: PUSH
47575: LD_INT 0
47577: PUSH
47578: EMPTY
47579: LIST
47580: LIST
47581: PUSH
47582: LD_INT 1
47584: NEG
47585: PUSH
47586: LD_INT 1
47588: NEG
47589: PUSH
47590: EMPTY
47591: LIST
47592: LIST
47593: PUSH
47594: LD_INT 1
47596: NEG
47597: PUSH
47598: LD_INT 2
47600: NEG
47601: PUSH
47602: EMPTY
47603: LIST
47604: LIST
47605: PUSH
47606: LD_INT 2
47608: PUSH
47609: LD_INT 1
47611: PUSH
47612: EMPTY
47613: LIST
47614: LIST
47615: PUSH
47616: LD_INT 2
47618: PUSH
47619: LD_INT 2
47621: PUSH
47622: EMPTY
47623: LIST
47624: LIST
47625: PUSH
47626: LD_INT 1
47628: PUSH
47629: LD_INT 2
47631: PUSH
47632: EMPTY
47633: LIST
47634: LIST
47635: PUSH
47636: LD_INT 2
47638: NEG
47639: PUSH
47640: LD_INT 1
47642: NEG
47643: PUSH
47644: EMPTY
47645: LIST
47646: LIST
47647: PUSH
47648: LD_INT 2
47650: NEG
47651: PUSH
47652: LD_INT 2
47654: NEG
47655: PUSH
47656: EMPTY
47657: LIST
47658: LIST
47659: PUSH
47660: LD_INT 3
47662: PUSH
47663: LD_INT 2
47665: PUSH
47666: EMPTY
47667: LIST
47668: LIST
47669: PUSH
47670: LD_INT 3
47672: PUSH
47673: LD_INT 3
47675: PUSH
47676: EMPTY
47677: LIST
47678: LIST
47679: PUSH
47680: LD_INT 2
47682: PUSH
47683: LD_INT 3
47685: PUSH
47686: EMPTY
47687: LIST
47688: LIST
47689: PUSH
47690: EMPTY
47691: LIST
47692: LIST
47693: LIST
47694: LIST
47695: LIST
47696: LIST
47697: LIST
47698: LIST
47699: LIST
47700: LIST
47701: LIST
47702: LIST
47703: LIST
47704: LIST
47705: LIST
47706: LIST
47707: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47708: LD_ADDR_VAR 0 17
47712: PUSH
47713: LD_INT 0
47715: PUSH
47716: LD_INT 0
47718: PUSH
47719: EMPTY
47720: LIST
47721: LIST
47722: PUSH
47723: LD_INT 0
47725: PUSH
47726: LD_INT 1
47728: NEG
47729: PUSH
47730: EMPTY
47731: LIST
47732: LIST
47733: PUSH
47734: LD_INT 1
47736: PUSH
47737: LD_INT 0
47739: PUSH
47740: EMPTY
47741: LIST
47742: LIST
47743: PUSH
47744: LD_INT 1
47746: PUSH
47747: LD_INT 1
47749: PUSH
47750: EMPTY
47751: LIST
47752: LIST
47753: PUSH
47754: LD_INT 0
47756: PUSH
47757: LD_INT 1
47759: PUSH
47760: EMPTY
47761: LIST
47762: LIST
47763: PUSH
47764: LD_INT 1
47766: NEG
47767: PUSH
47768: LD_INT 0
47770: PUSH
47771: EMPTY
47772: LIST
47773: LIST
47774: PUSH
47775: LD_INT 1
47777: NEG
47778: PUSH
47779: LD_INT 1
47781: NEG
47782: PUSH
47783: EMPTY
47784: LIST
47785: LIST
47786: PUSH
47787: LD_INT 1
47789: NEG
47790: PUSH
47791: LD_INT 2
47793: NEG
47794: PUSH
47795: EMPTY
47796: LIST
47797: LIST
47798: PUSH
47799: LD_INT 0
47801: PUSH
47802: LD_INT 2
47804: NEG
47805: PUSH
47806: EMPTY
47807: LIST
47808: LIST
47809: PUSH
47810: LD_INT 1
47812: PUSH
47813: LD_INT 1
47815: NEG
47816: PUSH
47817: EMPTY
47818: LIST
47819: LIST
47820: PUSH
47821: LD_INT 2
47823: PUSH
47824: LD_INT 0
47826: PUSH
47827: EMPTY
47828: LIST
47829: LIST
47830: PUSH
47831: LD_INT 2
47833: PUSH
47834: LD_INT 1
47836: PUSH
47837: EMPTY
47838: LIST
47839: LIST
47840: PUSH
47841: LD_INT 2
47843: PUSH
47844: LD_INT 2
47846: PUSH
47847: EMPTY
47848: LIST
47849: LIST
47850: PUSH
47851: LD_INT 1
47853: PUSH
47854: LD_INT 2
47856: PUSH
47857: EMPTY
47858: LIST
47859: LIST
47860: PUSH
47861: LD_INT 0
47863: PUSH
47864: LD_INT 2
47866: PUSH
47867: EMPTY
47868: LIST
47869: LIST
47870: PUSH
47871: LD_INT 1
47873: NEG
47874: PUSH
47875: LD_INT 1
47877: PUSH
47878: EMPTY
47879: LIST
47880: LIST
47881: PUSH
47882: LD_INT 2
47884: NEG
47885: PUSH
47886: LD_INT 0
47888: PUSH
47889: EMPTY
47890: LIST
47891: LIST
47892: PUSH
47893: LD_INT 2
47895: NEG
47896: PUSH
47897: LD_INT 1
47899: NEG
47900: PUSH
47901: EMPTY
47902: LIST
47903: LIST
47904: PUSH
47905: LD_INT 2
47907: NEG
47908: PUSH
47909: LD_INT 2
47911: NEG
47912: PUSH
47913: EMPTY
47914: LIST
47915: LIST
47916: PUSH
47917: EMPTY
47918: LIST
47919: LIST
47920: LIST
47921: LIST
47922: LIST
47923: LIST
47924: LIST
47925: LIST
47926: LIST
47927: LIST
47928: LIST
47929: LIST
47930: LIST
47931: LIST
47932: LIST
47933: LIST
47934: LIST
47935: LIST
47936: LIST
47937: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47938: LD_ADDR_VAR 0 18
47942: PUSH
47943: LD_INT 0
47945: PUSH
47946: LD_INT 0
47948: PUSH
47949: EMPTY
47950: LIST
47951: LIST
47952: PUSH
47953: LD_INT 0
47955: PUSH
47956: LD_INT 1
47958: NEG
47959: PUSH
47960: EMPTY
47961: LIST
47962: LIST
47963: PUSH
47964: LD_INT 1
47966: PUSH
47967: LD_INT 0
47969: PUSH
47970: EMPTY
47971: LIST
47972: LIST
47973: PUSH
47974: LD_INT 1
47976: PUSH
47977: LD_INT 1
47979: PUSH
47980: EMPTY
47981: LIST
47982: LIST
47983: PUSH
47984: LD_INT 0
47986: PUSH
47987: LD_INT 1
47989: PUSH
47990: EMPTY
47991: LIST
47992: LIST
47993: PUSH
47994: LD_INT 1
47996: NEG
47997: PUSH
47998: LD_INT 0
48000: PUSH
48001: EMPTY
48002: LIST
48003: LIST
48004: PUSH
48005: LD_INT 1
48007: NEG
48008: PUSH
48009: LD_INT 1
48011: NEG
48012: PUSH
48013: EMPTY
48014: LIST
48015: LIST
48016: PUSH
48017: LD_INT 1
48019: NEG
48020: PUSH
48021: LD_INT 2
48023: NEG
48024: PUSH
48025: EMPTY
48026: LIST
48027: LIST
48028: PUSH
48029: LD_INT 0
48031: PUSH
48032: LD_INT 2
48034: NEG
48035: PUSH
48036: EMPTY
48037: LIST
48038: LIST
48039: PUSH
48040: LD_INT 1
48042: PUSH
48043: LD_INT 1
48045: NEG
48046: PUSH
48047: EMPTY
48048: LIST
48049: LIST
48050: PUSH
48051: LD_INT 2
48053: PUSH
48054: LD_INT 0
48056: PUSH
48057: EMPTY
48058: LIST
48059: LIST
48060: PUSH
48061: LD_INT 2
48063: PUSH
48064: LD_INT 1
48066: PUSH
48067: EMPTY
48068: LIST
48069: LIST
48070: PUSH
48071: LD_INT 2
48073: PUSH
48074: LD_INT 2
48076: PUSH
48077: EMPTY
48078: LIST
48079: LIST
48080: PUSH
48081: LD_INT 1
48083: PUSH
48084: LD_INT 2
48086: PUSH
48087: EMPTY
48088: LIST
48089: LIST
48090: PUSH
48091: LD_INT 0
48093: PUSH
48094: LD_INT 2
48096: PUSH
48097: EMPTY
48098: LIST
48099: LIST
48100: PUSH
48101: LD_INT 1
48103: NEG
48104: PUSH
48105: LD_INT 1
48107: PUSH
48108: EMPTY
48109: LIST
48110: LIST
48111: PUSH
48112: LD_INT 2
48114: NEG
48115: PUSH
48116: LD_INT 0
48118: PUSH
48119: EMPTY
48120: LIST
48121: LIST
48122: PUSH
48123: LD_INT 2
48125: NEG
48126: PUSH
48127: LD_INT 1
48129: NEG
48130: PUSH
48131: EMPTY
48132: LIST
48133: LIST
48134: PUSH
48135: LD_INT 2
48137: NEG
48138: PUSH
48139: LD_INT 2
48141: NEG
48142: PUSH
48143: EMPTY
48144: LIST
48145: LIST
48146: PUSH
48147: EMPTY
48148: LIST
48149: LIST
48150: LIST
48151: LIST
48152: LIST
48153: LIST
48154: LIST
48155: LIST
48156: LIST
48157: LIST
48158: LIST
48159: LIST
48160: LIST
48161: LIST
48162: LIST
48163: LIST
48164: LIST
48165: LIST
48166: LIST
48167: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48168: LD_ADDR_VAR 0 19
48172: PUSH
48173: LD_INT 0
48175: PUSH
48176: LD_INT 0
48178: PUSH
48179: EMPTY
48180: LIST
48181: LIST
48182: PUSH
48183: LD_INT 0
48185: PUSH
48186: LD_INT 1
48188: NEG
48189: PUSH
48190: EMPTY
48191: LIST
48192: LIST
48193: PUSH
48194: LD_INT 1
48196: PUSH
48197: LD_INT 0
48199: PUSH
48200: EMPTY
48201: LIST
48202: LIST
48203: PUSH
48204: LD_INT 1
48206: PUSH
48207: LD_INT 1
48209: PUSH
48210: EMPTY
48211: LIST
48212: LIST
48213: PUSH
48214: LD_INT 0
48216: PUSH
48217: LD_INT 1
48219: PUSH
48220: EMPTY
48221: LIST
48222: LIST
48223: PUSH
48224: LD_INT 1
48226: NEG
48227: PUSH
48228: LD_INT 0
48230: PUSH
48231: EMPTY
48232: LIST
48233: LIST
48234: PUSH
48235: LD_INT 1
48237: NEG
48238: PUSH
48239: LD_INT 1
48241: NEG
48242: PUSH
48243: EMPTY
48244: LIST
48245: LIST
48246: PUSH
48247: LD_INT 1
48249: NEG
48250: PUSH
48251: LD_INT 2
48253: NEG
48254: PUSH
48255: EMPTY
48256: LIST
48257: LIST
48258: PUSH
48259: LD_INT 0
48261: PUSH
48262: LD_INT 2
48264: NEG
48265: PUSH
48266: EMPTY
48267: LIST
48268: LIST
48269: PUSH
48270: LD_INT 1
48272: PUSH
48273: LD_INT 1
48275: NEG
48276: PUSH
48277: EMPTY
48278: LIST
48279: LIST
48280: PUSH
48281: LD_INT 2
48283: PUSH
48284: LD_INT 0
48286: PUSH
48287: EMPTY
48288: LIST
48289: LIST
48290: PUSH
48291: LD_INT 2
48293: PUSH
48294: LD_INT 1
48296: PUSH
48297: EMPTY
48298: LIST
48299: LIST
48300: PUSH
48301: LD_INT 2
48303: PUSH
48304: LD_INT 2
48306: PUSH
48307: EMPTY
48308: LIST
48309: LIST
48310: PUSH
48311: LD_INT 1
48313: PUSH
48314: LD_INT 2
48316: PUSH
48317: EMPTY
48318: LIST
48319: LIST
48320: PUSH
48321: LD_INT 0
48323: PUSH
48324: LD_INT 2
48326: PUSH
48327: EMPTY
48328: LIST
48329: LIST
48330: PUSH
48331: LD_INT 1
48333: NEG
48334: PUSH
48335: LD_INT 1
48337: PUSH
48338: EMPTY
48339: LIST
48340: LIST
48341: PUSH
48342: LD_INT 2
48344: NEG
48345: PUSH
48346: LD_INT 0
48348: PUSH
48349: EMPTY
48350: LIST
48351: LIST
48352: PUSH
48353: LD_INT 2
48355: NEG
48356: PUSH
48357: LD_INT 1
48359: NEG
48360: PUSH
48361: EMPTY
48362: LIST
48363: LIST
48364: PUSH
48365: LD_INT 2
48367: NEG
48368: PUSH
48369: LD_INT 2
48371: NEG
48372: PUSH
48373: EMPTY
48374: LIST
48375: LIST
48376: PUSH
48377: EMPTY
48378: LIST
48379: LIST
48380: LIST
48381: LIST
48382: LIST
48383: LIST
48384: LIST
48385: LIST
48386: LIST
48387: LIST
48388: LIST
48389: LIST
48390: LIST
48391: LIST
48392: LIST
48393: LIST
48394: LIST
48395: LIST
48396: LIST
48397: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48398: LD_ADDR_VAR 0 20
48402: PUSH
48403: LD_INT 0
48405: PUSH
48406: LD_INT 0
48408: PUSH
48409: EMPTY
48410: LIST
48411: LIST
48412: PUSH
48413: LD_INT 0
48415: PUSH
48416: LD_INT 1
48418: NEG
48419: PUSH
48420: EMPTY
48421: LIST
48422: LIST
48423: PUSH
48424: LD_INT 1
48426: PUSH
48427: LD_INT 0
48429: PUSH
48430: EMPTY
48431: LIST
48432: LIST
48433: PUSH
48434: LD_INT 1
48436: PUSH
48437: LD_INT 1
48439: PUSH
48440: EMPTY
48441: LIST
48442: LIST
48443: PUSH
48444: LD_INT 0
48446: PUSH
48447: LD_INT 1
48449: PUSH
48450: EMPTY
48451: LIST
48452: LIST
48453: PUSH
48454: LD_INT 1
48456: NEG
48457: PUSH
48458: LD_INT 0
48460: PUSH
48461: EMPTY
48462: LIST
48463: LIST
48464: PUSH
48465: LD_INT 1
48467: NEG
48468: PUSH
48469: LD_INT 1
48471: NEG
48472: PUSH
48473: EMPTY
48474: LIST
48475: LIST
48476: PUSH
48477: LD_INT 1
48479: NEG
48480: PUSH
48481: LD_INT 2
48483: NEG
48484: PUSH
48485: EMPTY
48486: LIST
48487: LIST
48488: PUSH
48489: LD_INT 0
48491: PUSH
48492: LD_INT 2
48494: NEG
48495: PUSH
48496: EMPTY
48497: LIST
48498: LIST
48499: PUSH
48500: LD_INT 1
48502: PUSH
48503: LD_INT 1
48505: NEG
48506: PUSH
48507: EMPTY
48508: LIST
48509: LIST
48510: PUSH
48511: LD_INT 2
48513: PUSH
48514: LD_INT 0
48516: PUSH
48517: EMPTY
48518: LIST
48519: LIST
48520: PUSH
48521: LD_INT 2
48523: PUSH
48524: LD_INT 1
48526: PUSH
48527: EMPTY
48528: LIST
48529: LIST
48530: PUSH
48531: LD_INT 2
48533: PUSH
48534: LD_INT 2
48536: PUSH
48537: EMPTY
48538: LIST
48539: LIST
48540: PUSH
48541: LD_INT 1
48543: PUSH
48544: LD_INT 2
48546: PUSH
48547: EMPTY
48548: LIST
48549: LIST
48550: PUSH
48551: LD_INT 0
48553: PUSH
48554: LD_INT 2
48556: PUSH
48557: EMPTY
48558: LIST
48559: LIST
48560: PUSH
48561: LD_INT 1
48563: NEG
48564: PUSH
48565: LD_INT 1
48567: PUSH
48568: EMPTY
48569: LIST
48570: LIST
48571: PUSH
48572: LD_INT 2
48574: NEG
48575: PUSH
48576: LD_INT 0
48578: PUSH
48579: EMPTY
48580: LIST
48581: LIST
48582: PUSH
48583: LD_INT 2
48585: NEG
48586: PUSH
48587: LD_INT 1
48589: NEG
48590: PUSH
48591: EMPTY
48592: LIST
48593: LIST
48594: PUSH
48595: LD_INT 2
48597: NEG
48598: PUSH
48599: LD_INT 2
48601: NEG
48602: PUSH
48603: EMPTY
48604: LIST
48605: LIST
48606: PUSH
48607: EMPTY
48608: LIST
48609: LIST
48610: LIST
48611: LIST
48612: LIST
48613: LIST
48614: LIST
48615: LIST
48616: LIST
48617: LIST
48618: LIST
48619: LIST
48620: LIST
48621: LIST
48622: LIST
48623: LIST
48624: LIST
48625: LIST
48626: LIST
48627: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48628: LD_ADDR_VAR 0 21
48632: PUSH
48633: LD_INT 0
48635: PUSH
48636: LD_INT 0
48638: PUSH
48639: EMPTY
48640: LIST
48641: LIST
48642: PUSH
48643: LD_INT 0
48645: PUSH
48646: LD_INT 1
48648: NEG
48649: PUSH
48650: EMPTY
48651: LIST
48652: LIST
48653: PUSH
48654: LD_INT 1
48656: PUSH
48657: LD_INT 0
48659: PUSH
48660: EMPTY
48661: LIST
48662: LIST
48663: PUSH
48664: LD_INT 1
48666: PUSH
48667: LD_INT 1
48669: PUSH
48670: EMPTY
48671: LIST
48672: LIST
48673: PUSH
48674: LD_INT 0
48676: PUSH
48677: LD_INT 1
48679: PUSH
48680: EMPTY
48681: LIST
48682: LIST
48683: PUSH
48684: LD_INT 1
48686: NEG
48687: PUSH
48688: LD_INT 0
48690: PUSH
48691: EMPTY
48692: LIST
48693: LIST
48694: PUSH
48695: LD_INT 1
48697: NEG
48698: PUSH
48699: LD_INT 1
48701: NEG
48702: PUSH
48703: EMPTY
48704: LIST
48705: LIST
48706: PUSH
48707: LD_INT 1
48709: NEG
48710: PUSH
48711: LD_INT 2
48713: NEG
48714: PUSH
48715: EMPTY
48716: LIST
48717: LIST
48718: PUSH
48719: LD_INT 0
48721: PUSH
48722: LD_INT 2
48724: NEG
48725: PUSH
48726: EMPTY
48727: LIST
48728: LIST
48729: PUSH
48730: LD_INT 1
48732: PUSH
48733: LD_INT 1
48735: NEG
48736: PUSH
48737: EMPTY
48738: LIST
48739: LIST
48740: PUSH
48741: LD_INT 2
48743: PUSH
48744: LD_INT 0
48746: PUSH
48747: EMPTY
48748: LIST
48749: LIST
48750: PUSH
48751: LD_INT 2
48753: PUSH
48754: LD_INT 1
48756: PUSH
48757: EMPTY
48758: LIST
48759: LIST
48760: PUSH
48761: LD_INT 2
48763: PUSH
48764: LD_INT 2
48766: PUSH
48767: EMPTY
48768: LIST
48769: LIST
48770: PUSH
48771: LD_INT 1
48773: PUSH
48774: LD_INT 2
48776: PUSH
48777: EMPTY
48778: LIST
48779: LIST
48780: PUSH
48781: LD_INT 0
48783: PUSH
48784: LD_INT 2
48786: PUSH
48787: EMPTY
48788: LIST
48789: LIST
48790: PUSH
48791: LD_INT 1
48793: NEG
48794: PUSH
48795: LD_INT 1
48797: PUSH
48798: EMPTY
48799: LIST
48800: LIST
48801: PUSH
48802: LD_INT 2
48804: NEG
48805: PUSH
48806: LD_INT 0
48808: PUSH
48809: EMPTY
48810: LIST
48811: LIST
48812: PUSH
48813: LD_INT 2
48815: NEG
48816: PUSH
48817: LD_INT 1
48819: NEG
48820: PUSH
48821: EMPTY
48822: LIST
48823: LIST
48824: PUSH
48825: LD_INT 2
48827: NEG
48828: PUSH
48829: LD_INT 2
48831: NEG
48832: PUSH
48833: EMPTY
48834: LIST
48835: LIST
48836: PUSH
48837: EMPTY
48838: LIST
48839: LIST
48840: LIST
48841: LIST
48842: LIST
48843: LIST
48844: LIST
48845: LIST
48846: LIST
48847: LIST
48848: LIST
48849: LIST
48850: LIST
48851: LIST
48852: LIST
48853: LIST
48854: LIST
48855: LIST
48856: LIST
48857: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48858: LD_ADDR_VAR 0 22
48862: PUSH
48863: LD_INT 0
48865: PUSH
48866: LD_INT 0
48868: PUSH
48869: EMPTY
48870: LIST
48871: LIST
48872: PUSH
48873: LD_INT 0
48875: PUSH
48876: LD_INT 1
48878: NEG
48879: PUSH
48880: EMPTY
48881: LIST
48882: LIST
48883: PUSH
48884: LD_INT 1
48886: PUSH
48887: LD_INT 0
48889: PUSH
48890: EMPTY
48891: LIST
48892: LIST
48893: PUSH
48894: LD_INT 1
48896: PUSH
48897: LD_INT 1
48899: PUSH
48900: EMPTY
48901: LIST
48902: LIST
48903: PUSH
48904: LD_INT 0
48906: PUSH
48907: LD_INT 1
48909: PUSH
48910: EMPTY
48911: LIST
48912: LIST
48913: PUSH
48914: LD_INT 1
48916: NEG
48917: PUSH
48918: LD_INT 0
48920: PUSH
48921: EMPTY
48922: LIST
48923: LIST
48924: PUSH
48925: LD_INT 1
48927: NEG
48928: PUSH
48929: LD_INT 1
48931: NEG
48932: PUSH
48933: EMPTY
48934: LIST
48935: LIST
48936: PUSH
48937: LD_INT 1
48939: NEG
48940: PUSH
48941: LD_INT 2
48943: NEG
48944: PUSH
48945: EMPTY
48946: LIST
48947: LIST
48948: PUSH
48949: LD_INT 0
48951: PUSH
48952: LD_INT 2
48954: NEG
48955: PUSH
48956: EMPTY
48957: LIST
48958: LIST
48959: PUSH
48960: LD_INT 1
48962: PUSH
48963: LD_INT 1
48965: NEG
48966: PUSH
48967: EMPTY
48968: LIST
48969: LIST
48970: PUSH
48971: LD_INT 2
48973: PUSH
48974: LD_INT 0
48976: PUSH
48977: EMPTY
48978: LIST
48979: LIST
48980: PUSH
48981: LD_INT 2
48983: PUSH
48984: LD_INT 1
48986: PUSH
48987: EMPTY
48988: LIST
48989: LIST
48990: PUSH
48991: LD_INT 2
48993: PUSH
48994: LD_INT 2
48996: PUSH
48997: EMPTY
48998: LIST
48999: LIST
49000: PUSH
49001: LD_INT 1
49003: PUSH
49004: LD_INT 2
49006: PUSH
49007: EMPTY
49008: LIST
49009: LIST
49010: PUSH
49011: LD_INT 0
49013: PUSH
49014: LD_INT 2
49016: PUSH
49017: EMPTY
49018: LIST
49019: LIST
49020: PUSH
49021: LD_INT 1
49023: NEG
49024: PUSH
49025: LD_INT 1
49027: PUSH
49028: EMPTY
49029: LIST
49030: LIST
49031: PUSH
49032: LD_INT 2
49034: NEG
49035: PUSH
49036: LD_INT 0
49038: PUSH
49039: EMPTY
49040: LIST
49041: LIST
49042: PUSH
49043: LD_INT 2
49045: NEG
49046: PUSH
49047: LD_INT 1
49049: NEG
49050: PUSH
49051: EMPTY
49052: LIST
49053: LIST
49054: PUSH
49055: LD_INT 2
49057: NEG
49058: PUSH
49059: LD_INT 2
49061: NEG
49062: PUSH
49063: EMPTY
49064: LIST
49065: LIST
49066: PUSH
49067: EMPTY
49068: LIST
49069: LIST
49070: LIST
49071: LIST
49072: LIST
49073: LIST
49074: LIST
49075: LIST
49076: LIST
49077: LIST
49078: LIST
49079: LIST
49080: LIST
49081: LIST
49082: LIST
49083: LIST
49084: LIST
49085: LIST
49086: LIST
49087: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
49088: LD_ADDR_VAR 0 23
49092: PUSH
49093: LD_INT 0
49095: PUSH
49096: LD_INT 0
49098: PUSH
49099: EMPTY
49100: LIST
49101: LIST
49102: PUSH
49103: LD_INT 0
49105: PUSH
49106: LD_INT 1
49108: NEG
49109: PUSH
49110: EMPTY
49111: LIST
49112: LIST
49113: PUSH
49114: LD_INT 1
49116: PUSH
49117: LD_INT 0
49119: PUSH
49120: EMPTY
49121: LIST
49122: LIST
49123: PUSH
49124: LD_INT 1
49126: PUSH
49127: LD_INT 1
49129: PUSH
49130: EMPTY
49131: LIST
49132: LIST
49133: PUSH
49134: LD_INT 0
49136: PUSH
49137: LD_INT 1
49139: PUSH
49140: EMPTY
49141: LIST
49142: LIST
49143: PUSH
49144: LD_INT 1
49146: NEG
49147: PUSH
49148: LD_INT 0
49150: PUSH
49151: EMPTY
49152: LIST
49153: LIST
49154: PUSH
49155: LD_INT 1
49157: NEG
49158: PUSH
49159: LD_INT 1
49161: NEG
49162: PUSH
49163: EMPTY
49164: LIST
49165: LIST
49166: PUSH
49167: LD_INT 1
49169: NEG
49170: PUSH
49171: LD_INT 2
49173: NEG
49174: PUSH
49175: EMPTY
49176: LIST
49177: LIST
49178: PUSH
49179: LD_INT 0
49181: PUSH
49182: LD_INT 2
49184: NEG
49185: PUSH
49186: EMPTY
49187: LIST
49188: LIST
49189: PUSH
49190: LD_INT 1
49192: PUSH
49193: LD_INT 1
49195: NEG
49196: PUSH
49197: EMPTY
49198: LIST
49199: LIST
49200: PUSH
49201: LD_INT 2
49203: PUSH
49204: LD_INT 0
49206: PUSH
49207: EMPTY
49208: LIST
49209: LIST
49210: PUSH
49211: LD_INT 2
49213: PUSH
49214: LD_INT 1
49216: PUSH
49217: EMPTY
49218: LIST
49219: LIST
49220: PUSH
49221: LD_INT 2
49223: PUSH
49224: LD_INT 2
49226: PUSH
49227: EMPTY
49228: LIST
49229: LIST
49230: PUSH
49231: LD_INT 1
49233: PUSH
49234: LD_INT 2
49236: PUSH
49237: EMPTY
49238: LIST
49239: LIST
49240: PUSH
49241: LD_INT 0
49243: PUSH
49244: LD_INT 2
49246: PUSH
49247: EMPTY
49248: LIST
49249: LIST
49250: PUSH
49251: LD_INT 1
49253: NEG
49254: PUSH
49255: LD_INT 1
49257: PUSH
49258: EMPTY
49259: LIST
49260: LIST
49261: PUSH
49262: LD_INT 2
49264: NEG
49265: PUSH
49266: LD_INT 0
49268: PUSH
49269: EMPTY
49270: LIST
49271: LIST
49272: PUSH
49273: LD_INT 2
49275: NEG
49276: PUSH
49277: LD_INT 1
49279: NEG
49280: PUSH
49281: EMPTY
49282: LIST
49283: LIST
49284: PUSH
49285: LD_INT 2
49287: NEG
49288: PUSH
49289: LD_INT 2
49291: NEG
49292: PUSH
49293: EMPTY
49294: LIST
49295: LIST
49296: PUSH
49297: LD_INT 2
49299: NEG
49300: PUSH
49301: LD_INT 3
49303: NEG
49304: PUSH
49305: EMPTY
49306: LIST
49307: LIST
49308: PUSH
49309: LD_INT 1
49311: NEG
49312: PUSH
49313: LD_INT 3
49315: NEG
49316: PUSH
49317: EMPTY
49318: LIST
49319: LIST
49320: PUSH
49321: LD_INT 1
49323: PUSH
49324: LD_INT 2
49326: NEG
49327: PUSH
49328: EMPTY
49329: LIST
49330: LIST
49331: PUSH
49332: LD_INT 2
49334: PUSH
49335: LD_INT 1
49337: NEG
49338: PUSH
49339: EMPTY
49340: LIST
49341: LIST
49342: PUSH
49343: EMPTY
49344: LIST
49345: LIST
49346: LIST
49347: LIST
49348: LIST
49349: LIST
49350: LIST
49351: LIST
49352: LIST
49353: LIST
49354: LIST
49355: LIST
49356: LIST
49357: LIST
49358: LIST
49359: LIST
49360: LIST
49361: LIST
49362: LIST
49363: LIST
49364: LIST
49365: LIST
49366: LIST
49367: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
49368: LD_ADDR_VAR 0 24
49372: PUSH
49373: LD_INT 0
49375: PUSH
49376: LD_INT 0
49378: PUSH
49379: EMPTY
49380: LIST
49381: LIST
49382: PUSH
49383: LD_INT 0
49385: PUSH
49386: LD_INT 1
49388: NEG
49389: PUSH
49390: EMPTY
49391: LIST
49392: LIST
49393: PUSH
49394: LD_INT 1
49396: PUSH
49397: LD_INT 0
49399: PUSH
49400: EMPTY
49401: LIST
49402: LIST
49403: PUSH
49404: LD_INT 1
49406: PUSH
49407: LD_INT 1
49409: PUSH
49410: EMPTY
49411: LIST
49412: LIST
49413: PUSH
49414: LD_INT 0
49416: PUSH
49417: LD_INT 1
49419: PUSH
49420: EMPTY
49421: LIST
49422: LIST
49423: PUSH
49424: LD_INT 1
49426: NEG
49427: PUSH
49428: LD_INT 0
49430: PUSH
49431: EMPTY
49432: LIST
49433: LIST
49434: PUSH
49435: LD_INT 1
49437: NEG
49438: PUSH
49439: LD_INT 1
49441: NEG
49442: PUSH
49443: EMPTY
49444: LIST
49445: LIST
49446: PUSH
49447: LD_INT 1
49449: NEG
49450: PUSH
49451: LD_INT 2
49453: NEG
49454: PUSH
49455: EMPTY
49456: LIST
49457: LIST
49458: PUSH
49459: LD_INT 0
49461: PUSH
49462: LD_INT 2
49464: NEG
49465: PUSH
49466: EMPTY
49467: LIST
49468: LIST
49469: PUSH
49470: LD_INT 1
49472: PUSH
49473: LD_INT 1
49475: NEG
49476: PUSH
49477: EMPTY
49478: LIST
49479: LIST
49480: PUSH
49481: LD_INT 2
49483: PUSH
49484: LD_INT 0
49486: PUSH
49487: EMPTY
49488: LIST
49489: LIST
49490: PUSH
49491: LD_INT 2
49493: PUSH
49494: LD_INT 1
49496: PUSH
49497: EMPTY
49498: LIST
49499: LIST
49500: PUSH
49501: LD_INT 2
49503: PUSH
49504: LD_INT 2
49506: PUSH
49507: EMPTY
49508: LIST
49509: LIST
49510: PUSH
49511: LD_INT 1
49513: PUSH
49514: LD_INT 2
49516: PUSH
49517: EMPTY
49518: LIST
49519: LIST
49520: PUSH
49521: LD_INT 0
49523: PUSH
49524: LD_INT 2
49526: PUSH
49527: EMPTY
49528: LIST
49529: LIST
49530: PUSH
49531: LD_INT 1
49533: NEG
49534: PUSH
49535: LD_INT 1
49537: PUSH
49538: EMPTY
49539: LIST
49540: LIST
49541: PUSH
49542: LD_INT 2
49544: NEG
49545: PUSH
49546: LD_INT 0
49548: PUSH
49549: EMPTY
49550: LIST
49551: LIST
49552: PUSH
49553: LD_INT 2
49555: NEG
49556: PUSH
49557: LD_INT 1
49559: NEG
49560: PUSH
49561: EMPTY
49562: LIST
49563: LIST
49564: PUSH
49565: LD_INT 2
49567: NEG
49568: PUSH
49569: LD_INT 2
49571: NEG
49572: PUSH
49573: EMPTY
49574: LIST
49575: LIST
49576: PUSH
49577: LD_INT 1
49579: PUSH
49580: LD_INT 2
49582: NEG
49583: PUSH
49584: EMPTY
49585: LIST
49586: LIST
49587: PUSH
49588: LD_INT 2
49590: PUSH
49591: LD_INT 1
49593: NEG
49594: PUSH
49595: EMPTY
49596: LIST
49597: LIST
49598: PUSH
49599: LD_INT 3
49601: PUSH
49602: LD_INT 1
49604: PUSH
49605: EMPTY
49606: LIST
49607: LIST
49608: PUSH
49609: LD_INT 3
49611: PUSH
49612: LD_INT 2
49614: PUSH
49615: EMPTY
49616: LIST
49617: LIST
49618: PUSH
49619: EMPTY
49620: LIST
49621: LIST
49622: LIST
49623: LIST
49624: LIST
49625: LIST
49626: LIST
49627: LIST
49628: LIST
49629: LIST
49630: LIST
49631: LIST
49632: LIST
49633: LIST
49634: LIST
49635: LIST
49636: LIST
49637: LIST
49638: LIST
49639: LIST
49640: LIST
49641: LIST
49642: LIST
49643: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
49644: LD_ADDR_VAR 0 25
49648: PUSH
49649: LD_INT 0
49651: PUSH
49652: LD_INT 0
49654: PUSH
49655: EMPTY
49656: LIST
49657: LIST
49658: PUSH
49659: LD_INT 0
49661: PUSH
49662: LD_INT 1
49664: NEG
49665: PUSH
49666: EMPTY
49667: LIST
49668: LIST
49669: PUSH
49670: LD_INT 1
49672: PUSH
49673: LD_INT 0
49675: PUSH
49676: EMPTY
49677: LIST
49678: LIST
49679: PUSH
49680: LD_INT 1
49682: PUSH
49683: LD_INT 1
49685: PUSH
49686: EMPTY
49687: LIST
49688: LIST
49689: PUSH
49690: LD_INT 0
49692: PUSH
49693: LD_INT 1
49695: PUSH
49696: EMPTY
49697: LIST
49698: LIST
49699: PUSH
49700: LD_INT 1
49702: NEG
49703: PUSH
49704: LD_INT 0
49706: PUSH
49707: EMPTY
49708: LIST
49709: LIST
49710: PUSH
49711: LD_INT 1
49713: NEG
49714: PUSH
49715: LD_INT 1
49717: NEG
49718: PUSH
49719: EMPTY
49720: LIST
49721: LIST
49722: PUSH
49723: LD_INT 1
49725: NEG
49726: PUSH
49727: LD_INT 2
49729: NEG
49730: PUSH
49731: EMPTY
49732: LIST
49733: LIST
49734: PUSH
49735: LD_INT 0
49737: PUSH
49738: LD_INT 2
49740: NEG
49741: PUSH
49742: EMPTY
49743: LIST
49744: LIST
49745: PUSH
49746: LD_INT 1
49748: PUSH
49749: LD_INT 1
49751: NEG
49752: PUSH
49753: EMPTY
49754: LIST
49755: LIST
49756: PUSH
49757: LD_INT 2
49759: PUSH
49760: LD_INT 0
49762: PUSH
49763: EMPTY
49764: LIST
49765: LIST
49766: PUSH
49767: LD_INT 2
49769: PUSH
49770: LD_INT 1
49772: PUSH
49773: EMPTY
49774: LIST
49775: LIST
49776: PUSH
49777: LD_INT 2
49779: PUSH
49780: LD_INT 2
49782: PUSH
49783: EMPTY
49784: LIST
49785: LIST
49786: PUSH
49787: LD_INT 1
49789: PUSH
49790: LD_INT 2
49792: PUSH
49793: EMPTY
49794: LIST
49795: LIST
49796: PUSH
49797: LD_INT 0
49799: PUSH
49800: LD_INT 2
49802: PUSH
49803: EMPTY
49804: LIST
49805: LIST
49806: PUSH
49807: LD_INT 1
49809: NEG
49810: PUSH
49811: LD_INT 1
49813: PUSH
49814: EMPTY
49815: LIST
49816: LIST
49817: PUSH
49818: LD_INT 2
49820: NEG
49821: PUSH
49822: LD_INT 0
49824: PUSH
49825: EMPTY
49826: LIST
49827: LIST
49828: PUSH
49829: LD_INT 2
49831: NEG
49832: PUSH
49833: LD_INT 1
49835: NEG
49836: PUSH
49837: EMPTY
49838: LIST
49839: LIST
49840: PUSH
49841: LD_INT 2
49843: NEG
49844: PUSH
49845: LD_INT 2
49847: NEG
49848: PUSH
49849: EMPTY
49850: LIST
49851: LIST
49852: PUSH
49853: LD_INT 3
49855: PUSH
49856: LD_INT 1
49858: PUSH
49859: EMPTY
49860: LIST
49861: LIST
49862: PUSH
49863: LD_INT 3
49865: PUSH
49866: LD_INT 2
49868: PUSH
49869: EMPTY
49870: LIST
49871: LIST
49872: PUSH
49873: LD_INT 2
49875: PUSH
49876: LD_INT 3
49878: PUSH
49879: EMPTY
49880: LIST
49881: LIST
49882: PUSH
49883: LD_INT 1
49885: PUSH
49886: LD_INT 3
49888: PUSH
49889: EMPTY
49890: LIST
49891: LIST
49892: PUSH
49893: EMPTY
49894: LIST
49895: LIST
49896: LIST
49897: LIST
49898: LIST
49899: LIST
49900: LIST
49901: LIST
49902: LIST
49903: LIST
49904: LIST
49905: LIST
49906: LIST
49907: LIST
49908: LIST
49909: LIST
49910: LIST
49911: LIST
49912: LIST
49913: LIST
49914: LIST
49915: LIST
49916: LIST
49917: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
49918: LD_ADDR_VAR 0 26
49922: PUSH
49923: LD_INT 0
49925: PUSH
49926: LD_INT 0
49928: PUSH
49929: EMPTY
49930: LIST
49931: LIST
49932: PUSH
49933: LD_INT 0
49935: PUSH
49936: LD_INT 1
49938: NEG
49939: PUSH
49940: EMPTY
49941: LIST
49942: LIST
49943: PUSH
49944: LD_INT 1
49946: PUSH
49947: LD_INT 0
49949: PUSH
49950: EMPTY
49951: LIST
49952: LIST
49953: PUSH
49954: LD_INT 1
49956: PUSH
49957: LD_INT 1
49959: PUSH
49960: EMPTY
49961: LIST
49962: LIST
49963: PUSH
49964: LD_INT 0
49966: PUSH
49967: LD_INT 1
49969: PUSH
49970: EMPTY
49971: LIST
49972: LIST
49973: PUSH
49974: LD_INT 1
49976: NEG
49977: PUSH
49978: LD_INT 0
49980: PUSH
49981: EMPTY
49982: LIST
49983: LIST
49984: PUSH
49985: LD_INT 1
49987: NEG
49988: PUSH
49989: LD_INT 1
49991: NEG
49992: PUSH
49993: EMPTY
49994: LIST
49995: LIST
49996: PUSH
49997: LD_INT 1
49999: NEG
50000: PUSH
50001: LD_INT 2
50003: NEG
50004: PUSH
50005: EMPTY
50006: LIST
50007: LIST
50008: PUSH
50009: LD_INT 0
50011: PUSH
50012: LD_INT 2
50014: NEG
50015: PUSH
50016: EMPTY
50017: LIST
50018: LIST
50019: PUSH
50020: LD_INT 1
50022: PUSH
50023: LD_INT 1
50025: NEG
50026: PUSH
50027: EMPTY
50028: LIST
50029: LIST
50030: PUSH
50031: LD_INT 2
50033: PUSH
50034: LD_INT 0
50036: PUSH
50037: EMPTY
50038: LIST
50039: LIST
50040: PUSH
50041: LD_INT 2
50043: PUSH
50044: LD_INT 1
50046: PUSH
50047: EMPTY
50048: LIST
50049: LIST
50050: PUSH
50051: LD_INT 2
50053: PUSH
50054: LD_INT 2
50056: PUSH
50057: EMPTY
50058: LIST
50059: LIST
50060: PUSH
50061: LD_INT 1
50063: PUSH
50064: LD_INT 2
50066: PUSH
50067: EMPTY
50068: LIST
50069: LIST
50070: PUSH
50071: LD_INT 0
50073: PUSH
50074: LD_INT 2
50076: PUSH
50077: EMPTY
50078: LIST
50079: LIST
50080: PUSH
50081: LD_INT 1
50083: NEG
50084: PUSH
50085: LD_INT 1
50087: PUSH
50088: EMPTY
50089: LIST
50090: LIST
50091: PUSH
50092: LD_INT 2
50094: NEG
50095: PUSH
50096: LD_INT 0
50098: PUSH
50099: EMPTY
50100: LIST
50101: LIST
50102: PUSH
50103: LD_INT 2
50105: NEG
50106: PUSH
50107: LD_INT 1
50109: NEG
50110: PUSH
50111: EMPTY
50112: LIST
50113: LIST
50114: PUSH
50115: LD_INT 2
50117: NEG
50118: PUSH
50119: LD_INT 2
50121: NEG
50122: PUSH
50123: EMPTY
50124: LIST
50125: LIST
50126: PUSH
50127: LD_INT 2
50129: PUSH
50130: LD_INT 3
50132: PUSH
50133: EMPTY
50134: LIST
50135: LIST
50136: PUSH
50137: LD_INT 1
50139: PUSH
50140: LD_INT 3
50142: PUSH
50143: EMPTY
50144: LIST
50145: LIST
50146: PUSH
50147: LD_INT 1
50149: NEG
50150: PUSH
50151: LD_INT 2
50153: PUSH
50154: EMPTY
50155: LIST
50156: LIST
50157: PUSH
50158: LD_INT 2
50160: NEG
50161: PUSH
50162: LD_INT 1
50164: PUSH
50165: EMPTY
50166: LIST
50167: LIST
50168: PUSH
50169: EMPTY
50170: LIST
50171: LIST
50172: LIST
50173: LIST
50174: LIST
50175: LIST
50176: LIST
50177: LIST
50178: LIST
50179: LIST
50180: LIST
50181: LIST
50182: LIST
50183: LIST
50184: LIST
50185: LIST
50186: LIST
50187: LIST
50188: LIST
50189: LIST
50190: LIST
50191: LIST
50192: LIST
50193: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
50194: LD_ADDR_VAR 0 27
50198: PUSH
50199: LD_INT 0
50201: PUSH
50202: LD_INT 0
50204: PUSH
50205: EMPTY
50206: LIST
50207: LIST
50208: PUSH
50209: LD_INT 0
50211: PUSH
50212: LD_INT 1
50214: NEG
50215: PUSH
50216: EMPTY
50217: LIST
50218: LIST
50219: PUSH
50220: LD_INT 1
50222: PUSH
50223: LD_INT 0
50225: PUSH
50226: EMPTY
50227: LIST
50228: LIST
50229: PUSH
50230: LD_INT 1
50232: PUSH
50233: LD_INT 1
50235: PUSH
50236: EMPTY
50237: LIST
50238: LIST
50239: PUSH
50240: LD_INT 0
50242: PUSH
50243: LD_INT 1
50245: PUSH
50246: EMPTY
50247: LIST
50248: LIST
50249: PUSH
50250: LD_INT 1
50252: NEG
50253: PUSH
50254: LD_INT 0
50256: PUSH
50257: EMPTY
50258: LIST
50259: LIST
50260: PUSH
50261: LD_INT 1
50263: NEG
50264: PUSH
50265: LD_INT 1
50267: NEG
50268: PUSH
50269: EMPTY
50270: LIST
50271: LIST
50272: PUSH
50273: LD_INT 1
50275: NEG
50276: PUSH
50277: LD_INT 2
50279: NEG
50280: PUSH
50281: EMPTY
50282: LIST
50283: LIST
50284: PUSH
50285: LD_INT 0
50287: PUSH
50288: LD_INT 2
50290: NEG
50291: PUSH
50292: EMPTY
50293: LIST
50294: LIST
50295: PUSH
50296: LD_INT 1
50298: PUSH
50299: LD_INT 1
50301: NEG
50302: PUSH
50303: EMPTY
50304: LIST
50305: LIST
50306: PUSH
50307: LD_INT 2
50309: PUSH
50310: LD_INT 0
50312: PUSH
50313: EMPTY
50314: LIST
50315: LIST
50316: PUSH
50317: LD_INT 2
50319: PUSH
50320: LD_INT 1
50322: PUSH
50323: EMPTY
50324: LIST
50325: LIST
50326: PUSH
50327: LD_INT 2
50329: PUSH
50330: LD_INT 2
50332: PUSH
50333: EMPTY
50334: LIST
50335: LIST
50336: PUSH
50337: LD_INT 1
50339: PUSH
50340: LD_INT 2
50342: PUSH
50343: EMPTY
50344: LIST
50345: LIST
50346: PUSH
50347: LD_INT 0
50349: PUSH
50350: LD_INT 2
50352: PUSH
50353: EMPTY
50354: LIST
50355: LIST
50356: PUSH
50357: LD_INT 1
50359: NEG
50360: PUSH
50361: LD_INT 1
50363: PUSH
50364: EMPTY
50365: LIST
50366: LIST
50367: PUSH
50368: LD_INT 2
50370: NEG
50371: PUSH
50372: LD_INT 0
50374: PUSH
50375: EMPTY
50376: LIST
50377: LIST
50378: PUSH
50379: LD_INT 2
50381: NEG
50382: PUSH
50383: LD_INT 1
50385: NEG
50386: PUSH
50387: EMPTY
50388: LIST
50389: LIST
50390: PUSH
50391: LD_INT 2
50393: NEG
50394: PUSH
50395: LD_INT 2
50397: NEG
50398: PUSH
50399: EMPTY
50400: LIST
50401: LIST
50402: PUSH
50403: LD_INT 1
50405: NEG
50406: PUSH
50407: LD_INT 2
50409: PUSH
50410: EMPTY
50411: LIST
50412: LIST
50413: PUSH
50414: LD_INT 2
50416: NEG
50417: PUSH
50418: LD_INT 1
50420: PUSH
50421: EMPTY
50422: LIST
50423: LIST
50424: PUSH
50425: LD_INT 3
50427: NEG
50428: PUSH
50429: LD_INT 1
50431: NEG
50432: PUSH
50433: EMPTY
50434: LIST
50435: LIST
50436: PUSH
50437: LD_INT 3
50439: NEG
50440: PUSH
50441: LD_INT 2
50443: NEG
50444: PUSH
50445: EMPTY
50446: LIST
50447: LIST
50448: PUSH
50449: EMPTY
50450: LIST
50451: LIST
50452: LIST
50453: LIST
50454: LIST
50455: LIST
50456: LIST
50457: LIST
50458: LIST
50459: LIST
50460: LIST
50461: LIST
50462: LIST
50463: LIST
50464: LIST
50465: LIST
50466: LIST
50467: LIST
50468: LIST
50469: LIST
50470: LIST
50471: LIST
50472: LIST
50473: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
50474: LD_ADDR_VAR 0 28
50478: PUSH
50479: LD_INT 0
50481: PUSH
50482: LD_INT 0
50484: PUSH
50485: EMPTY
50486: LIST
50487: LIST
50488: PUSH
50489: LD_INT 0
50491: PUSH
50492: LD_INT 1
50494: NEG
50495: PUSH
50496: EMPTY
50497: LIST
50498: LIST
50499: PUSH
50500: LD_INT 1
50502: PUSH
50503: LD_INT 0
50505: PUSH
50506: EMPTY
50507: LIST
50508: LIST
50509: PUSH
50510: LD_INT 1
50512: PUSH
50513: LD_INT 1
50515: PUSH
50516: EMPTY
50517: LIST
50518: LIST
50519: PUSH
50520: LD_INT 0
50522: PUSH
50523: LD_INT 1
50525: PUSH
50526: EMPTY
50527: LIST
50528: LIST
50529: PUSH
50530: LD_INT 1
50532: NEG
50533: PUSH
50534: LD_INT 0
50536: PUSH
50537: EMPTY
50538: LIST
50539: LIST
50540: PUSH
50541: LD_INT 1
50543: NEG
50544: PUSH
50545: LD_INT 1
50547: NEG
50548: PUSH
50549: EMPTY
50550: LIST
50551: LIST
50552: PUSH
50553: LD_INT 1
50555: NEG
50556: PUSH
50557: LD_INT 2
50559: NEG
50560: PUSH
50561: EMPTY
50562: LIST
50563: LIST
50564: PUSH
50565: LD_INT 0
50567: PUSH
50568: LD_INT 2
50570: NEG
50571: PUSH
50572: EMPTY
50573: LIST
50574: LIST
50575: PUSH
50576: LD_INT 1
50578: PUSH
50579: LD_INT 1
50581: NEG
50582: PUSH
50583: EMPTY
50584: LIST
50585: LIST
50586: PUSH
50587: LD_INT 2
50589: PUSH
50590: LD_INT 0
50592: PUSH
50593: EMPTY
50594: LIST
50595: LIST
50596: PUSH
50597: LD_INT 2
50599: PUSH
50600: LD_INT 1
50602: PUSH
50603: EMPTY
50604: LIST
50605: LIST
50606: PUSH
50607: LD_INT 2
50609: PUSH
50610: LD_INT 2
50612: PUSH
50613: EMPTY
50614: LIST
50615: LIST
50616: PUSH
50617: LD_INT 1
50619: PUSH
50620: LD_INT 2
50622: PUSH
50623: EMPTY
50624: LIST
50625: LIST
50626: PUSH
50627: LD_INT 0
50629: PUSH
50630: LD_INT 2
50632: PUSH
50633: EMPTY
50634: LIST
50635: LIST
50636: PUSH
50637: LD_INT 1
50639: NEG
50640: PUSH
50641: LD_INT 1
50643: PUSH
50644: EMPTY
50645: LIST
50646: LIST
50647: PUSH
50648: LD_INT 2
50650: NEG
50651: PUSH
50652: LD_INT 0
50654: PUSH
50655: EMPTY
50656: LIST
50657: LIST
50658: PUSH
50659: LD_INT 2
50661: NEG
50662: PUSH
50663: LD_INT 1
50665: NEG
50666: PUSH
50667: EMPTY
50668: LIST
50669: LIST
50670: PUSH
50671: LD_INT 2
50673: NEG
50674: PUSH
50675: LD_INT 2
50677: NEG
50678: PUSH
50679: EMPTY
50680: LIST
50681: LIST
50682: PUSH
50683: LD_INT 2
50685: NEG
50686: PUSH
50687: LD_INT 3
50689: NEG
50690: PUSH
50691: EMPTY
50692: LIST
50693: LIST
50694: PUSH
50695: LD_INT 1
50697: NEG
50698: PUSH
50699: LD_INT 3
50701: NEG
50702: PUSH
50703: EMPTY
50704: LIST
50705: LIST
50706: PUSH
50707: LD_INT 3
50709: NEG
50710: PUSH
50711: LD_INT 1
50713: NEG
50714: PUSH
50715: EMPTY
50716: LIST
50717: LIST
50718: PUSH
50719: LD_INT 3
50721: NEG
50722: PUSH
50723: LD_INT 2
50725: NEG
50726: PUSH
50727: EMPTY
50728: LIST
50729: LIST
50730: PUSH
50731: EMPTY
50732: LIST
50733: LIST
50734: LIST
50735: LIST
50736: LIST
50737: LIST
50738: LIST
50739: LIST
50740: LIST
50741: LIST
50742: LIST
50743: LIST
50744: LIST
50745: LIST
50746: LIST
50747: LIST
50748: LIST
50749: LIST
50750: LIST
50751: LIST
50752: LIST
50753: LIST
50754: LIST
50755: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50756: LD_ADDR_VAR 0 29
50760: PUSH
50761: LD_INT 0
50763: PUSH
50764: LD_INT 0
50766: PUSH
50767: EMPTY
50768: LIST
50769: LIST
50770: PUSH
50771: LD_INT 0
50773: PUSH
50774: LD_INT 1
50776: NEG
50777: PUSH
50778: EMPTY
50779: LIST
50780: LIST
50781: PUSH
50782: LD_INT 1
50784: PUSH
50785: LD_INT 0
50787: PUSH
50788: EMPTY
50789: LIST
50790: LIST
50791: PUSH
50792: LD_INT 1
50794: PUSH
50795: LD_INT 1
50797: PUSH
50798: EMPTY
50799: LIST
50800: LIST
50801: PUSH
50802: LD_INT 0
50804: PUSH
50805: LD_INT 1
50807: PUSH
50808: EMPTY
50809: LIST
50810: LIST
50811: PUSH
50812: LD_INT 1
50814: NEG
50815: PUSH
50816: LD_INT 0
50818: PUSH
50819: EMPTY
50820: LIST
50821: LIST
50822: PUSH
50823: LD_INT 1
50825: NEG
50826: PUSH
50827: LD_INT 1
50829: NEG
50830: PUSH
50831: EMPTY
50832: LIST
50833: LIST
50834: PUSH
50835: LD_INT 1
50837: NEG
50838: PUSH
50839: LD_INT 2
50841: NEG
50842: PUSH
50843: EMPTY
50844: LIST
50845: LIST
50846: PUSH
50847: LD_INT 0
50849: PUSH
50850: LD_INT 2
50852: NEG
50853: PUSH
50854: EMPTY
50855: LIST
50856: LIST
50857: PUSH
50858: LD_INT 1
50860: PUSH
50861: LD_INT 1
50863: NEG
50864: PUSH
50865: EMPTY
50866: LIST
50867: LIST
50868: PUSH
50869: LD_INT 2
50871: PUSH
50872: LD_INT 0
50874: PUSH
50875: EMPTY
50876: LIST
50877: LIST
50878: PUSH
50879: LD_INT 2
50881: PUSH
50882: LD_INT 1
50884: PUSH
50885: EMPTY
50886: LIST
50887: LIST
50888: PUSH
50889: LD_INT 1
50891: PUSH
50892: LD_INT 2
50894: PUSH
50895: EMPTY
50896: LIST
50897: LIST
50898: PUSH
50899: LD_INT 0
50901: PUSH
50902: LD_INT 2
50904: PUSH
50905: EMPTY
50906: LIST
50907: LIST
50908: PUSH
50909: LD_INT 1
50911: NEG
50912: PUSH
50913: LD_INT 1
50915: PUSH
50916: EMPTY
50917: LIST
50918: LIST
50919: PUSH
50920: LD_INT 2
50922: NEG
50923: PUSH
50924: LD_INT 1
50926: NEG
50927: PUSH
50928: EMPTY
50929: LIST
50930: LIST
50931: PUSH
50932: LD_INT 2
50934: NEG
50935: PUSH
50936: LD_INT 2
50938: NEG
50939: PUSH
50940: EMPTY
50941: LIST
50942: LIST
50943: PUSH
50944: LD_INT 2
50946: NEG
50947: PUSH
50948: LD_INT 3
50950: NEG
50951: PUSH
50952: EMPTY
50953: LIST
50954: LIST
50955: PUSH
50956: LD_INT 2
50958: PUSH
50959: LD_INT 1
50961: NEG
50962: PUSH
50963: EMPTY
50964: LIST
50965: LIST
50966: PUSH
50967: LD_INT 3
50969: PUSH
50970: LD_INT 1
50972: PUSH
50973: EMPTY
50974: LIST
50975: LIST
50976: PUSH
50977: LD_INT 1
50979: PUSH
50980: LD_INT 3
50982: PUSH
50983: EMPTY
50984: LIST
50985: LIST
50986: PUSH
50987: LD_INT 1
50989: NEG
50990: PUSH
50991: LD_INT 2
50993: PUSH
50994: EMPTY
50995: LIST
50996: LIST
50997: PUSH
50998: LD_INT 3
51000: NEG
51001: PUSH
51002: LD_INT 2
51004: NEG
51005: PUSH
51006: EMPTY
51007: LIST
51008: LIST
51009: PUSH
51010: EMPTY
51011: LIST
51012: LIST
51013: LIST
51014: LIST
51015: LIST
51016: LIST
51017: LIST
51018: LIST
51019: LIST
51020: LIST
51021: LIST
51022: LIST
51023: LIST
51024: LIST
51025: LIST
51026: LIST
51027: LIST
51028: LIST
51029: LIST
51030: LIST
51031: LIST
51032: LIST
51033: LIST
51034: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51035: LD_ADDR_VAR 0 30
51039: PUSH
51040: LD_INT 0
51042: PUSH
51043: LD_INT 0
51045: PUSH
51046: EMPTY
51047: LIST
51048: LIST
51049: PUSH
51050: LD_INT 0
51052: PUSH
51053: LD_INT 1
51055: NEG
51056: PUSH
51057: EMPTY
51058: LIST
51059: LIST
51060: PUSH
51061: LD_INT 1
51063: PUSH
51064: LD_INT 0
51066: PUSH
51067: EMPTY
51068: LIST
51069: LIST
51070: PUSH
51071: LD_INT 1
51073: PUSH
51074: LD_INT 1
51076: PUSH
51077: EMPTY
51078: LIST
51079: LIST
51080: PUSH
51081: LD_INT 0
51083: PUSH
51084: LD_INT 1
51086: PUSH
51087: EMPTY
51088: LIST
51089: LIST
51090: PUSH
51091: LD_INT 1
51093: NEG
51094: PUSH
51095: LD_INT 0
51097: PUSH
51098: EMPTY
51099: LIST
51100: LIST
51101: PUSH
51102: LD_INT 1
51104: NEG
51105: PUSH
51106: LD_INT 1
51108: NEG
51109: PUSH
51110: EMPTY
51111: LIST
51112: LIST
51113: PUSH
51114: LD_INT 1
51116: NEG
51117: PUSH
51118: LD_INT 2
51120: NEG
51121: PUSH
51122: EMPTY
51123: LIST
51124: LIST
51125: PUSH
51126: LD_INT 0
51128: PUSH
51129: LD_INT 2
51131: NEG
51132: PUSH
51133: EMPTY
51134: LIST
51135: LIST
51136: PUSH
51137: LD_INT 1
51139: PUSH
51140: LD_INT 1
51142: NEG
51143: PUSH
51144: EMPTY
51145: LIST
51146: LIST
51147: PUSH
51148: LD_INT 2
51150: PUSH
51151: LD_INT 0
51153: PUSH
51154: EMPTY
51155: LIST
51156: LIST
51157: PUSH
51158: LD_INT 2
51160: PUSH
51161: LD_INT 1
51163: PUSH
51164: EMPTY
51165: LIST
51166: LIST
51167: PUSH
51168: LD_INT 2
51170: PUSH
51171: LD_INT 2
51173: PUSH
51174: EMPTY
51175: LIST
51176: LIST
51177: PUSH
51178: LD_INT 1
51180: PUSH
51181: LD_INT 2
51183: PUSH
51184: EMPTY
51185: LIST
51186: LIST
51187: PUSH
51188: LD_INT 1
51190: NEG
51191: PUSH
51192: LD_INT 1
51194: PUSH
51195: EMPTY
51196: LIST
51197: LIST
51198: PUSH
51199: LD_INT 2
51201: NEG
51202: PUSH
51203: LD_INT 0
51205: PUSH
51206: EMPTY
51207: LIST
51208: LIST
51209: PUSH
51210: LD_INT 2
51212: NEG
51213: PUSH
51214: LD_INT 1
51216: NEG
51217: PUSH
51218: EMPTY
51219: LIST
51220: LIST
51221: PUSH
51222: LD_INT 1
51224: NEG
51225: PUSH
51226: LD_INT 3
51228: NEG
51229: PUSH
51230: EMPTY
51231: LIST
51232: LIST
51233: PUSH
51234: LD_INT 1
51236: PUSH
51237: LD_INT 2
51239: NEG
51240: PUSH
51241: EMPTY
51242: LIST
51243: LIST
51244: PUSH
51245: LD_INT 3
51247: PUSH
51248: LD_INT 2
51250: PUSH
51251: EMPTY
51252: LIST
51253: LIST
51254: PUSH
51255: LD_INT 2
51257: PUSH
51258: LD_INT 3
51260: PUSH
51261: EMPTY
51262: LIST
51263: LIST
51264: PUSH
51265: LD_INT 2
51267: NEG
51268: PUSH
51269: LD_INT 1
51271: PUSH
51272: EMPTY
51273: LIST
51274: LIST
51275: PUSH
51276: LD_INT 3
51278: NEG
51279: PUSH
51280: LD_INT 1
51282: NEG
51283: PUSH
51284: EMPTY
51285: LIST
51286: LIST
51287: PUSH
51288: EMPTY
51289: LIST
51290: LIST
51291: LIST
51292: LIST
51293: LIST
51294: LIST
51295: LIST
51296: LIST
51297: LIST
51298: LIST
51299: LIST
51300: LIST
51301: LIST
51302: LIST
51303: LIST
51304: LIST
51305: LIST
51306: LIST
51307: LIST
51308: LIST
51309: LIST
51310: LIST
51311: LIST
51312: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
51313: LD_ADDR_VAR 0 31
51317: PUSH
51318: LD_INT 0
51320: PUSH
51321: LD_INT 0
51323: PUSH
51324: EMPTY
51325: LIST
51326: LIST
51327: PUSH
51328: LD_INT 0
51330: PUSH
51331: LD_INT 1
51333: NEG
51334: PUSH
51335: EMPTY
51336: LIST
51337: LIST
51338: PUSH
51339: LD_INT 1
51341: PUSH
51342: LD_INT 0
51344: PUSH
51345: EMPTY
51346: LIST
51347: LIST
51348: PUSH
51349: LD_INT 1
51351: PUSH
51352: LD_INT 1
51354: PUSH
51355: EMPTY
51356: LIST
51357: LIST
51358: PUSH
51359: LD_INT 0
51361: PUSH
51362: LD_INT 1
51364: PUSH
51365: EMPTY
51366: LIST
51367: LIST
51368: PUSH
51369: LD_INT 1
51371: NEG
51372: PUSH
51373: LD_INT 0
51375: PUSH
51376: EMPTY
51377: LIST
51378: LIST
51379: PUSH
51380: LD_INT 1
51382: NEG
51383: PUSH
51384: LD_INT 1
51386: NEG
51387: PUSH
51388: EMPTY
51389: LIST
51390: LIST
51391: PUSH
51392: LD_INT 1
51394: NEG
51395: PUSH
51396: LD_INT 2
51398: NEG
51399: PUSH
51400: EMPTY
51401: LIST
51402: LIST
51403: PUSH
51404: LD_INT 1
51406: PUSH
51407: LD_INT 1
51409: NEG
51410: PUSH
51411: EMPTY
51412: LIST
51413: LIST
51414: PUSH
51415: LD_INT 2
51417: PUSH
51418: LD_INT 0
51420: PUSH
51421: EMPTY
51422: LIST
51423: LIST
51424: PUSH
51425: LD_INT 2
51427: PUSH
51428: LD_INT 1
51430: PUSH
51431: EMPTY
51432: LIST
51433: LIST
51434: PUSH
51435: LD_INT 2
51437: PUSH
51438: LD_INT 2
51440: PUSH
51441: EMPTY
51442: LIST
51443: LIST
51444: PUSH
51445: LD_INT 1
51447: PUSH
51448: LD_INT 2
51450: PUSH
51451: EMPTY
51452: LIST
51453: LIST
51454: PUSH
51455: LD_INT 0
51457: PUSH
51458: LD_INT 2
51460: PUSH
51461: EMPTY
51462: LIST
51463: LIST
51464: PUSH
51465: LD_INT 1
51467: NEG
51468: PUSH
51469: LD_INT 1
51471: PUSH
51472: EMPTY
51473: LIST
51474: LIST
51475: PUSH
51476: LD_INT 2
51478: NEG
51479: PUSH
51480: LD_INT 1
51482: NEG
51483: PUSH
51484: EMPTY
51485: LIST
51486: LIST
51487: PUSH
51488: LD_INT 2
51490: NEG
51491: PUSH
51492: LD_INT 2
51494: NEG
51495: PUSH
51496: EMPTY
51497: LIST
51498: LIST
51499: PUSH
51500: LD_INT 2
51502: NEG
51503: PUSH
51504: LD_INT 3
51506: NEG
51507: PUSH
51508: EMPTY
51509: LIST
51510: LIST
51511: PUSH
51512: LD_INT 2
51514: PUSH
51515: LD_INT 1
51517: NEG
51518: PUSH
51519: EMPTY
51520: LIST
51521: LIST
51522: PUSH
51523: LD_INT 3
51525: PUSH
51526: LD_INT 1
51528: PUSH
51529: EMPTY
51530: LIST
51531: LIST
51532: PUSH
51533: LD_INT 1
51535: PUSH
51536: LD_INT 3
51538: PUSH
51539: EMPTY
51540: LIST
51541: LIST
51542: PUSH
51543: LD_INT 1
51545: NEG
51546: PUSH
51547: LD_INT 2
51549: PUSH
51550: EMPTY
51551: LIST
51552: LIST
51553: PUSH
51554: LD_INT 3
51556: NEG
51557: PUSH
51558: LD_INT 2
51560: NEG
51561: PUSH
51562: EMPTY
51563: LIST
51564: LIST
51565: PUSH
51566: EMPTY
51567: LIST
51568: LIST
51569: LIST
51570: LIST
51571: LIST
51572: LIST
51573: LIST
51574: LIST
51575: LIST
51576: LIST
51577: LIST
51578: LIST
51579: LIST
51580: LIST
51581: LIST
51582: LIST
51583: LIST
51584: LIST
51585: LIST
51586: LIST
51587: LIST
51588: LIST
51589: LIST
51590: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51591: LD_ADDR_VAR 0 32
51595: PUSH
51596: LD_INT 0
51598: PUSH
51599: LD_INT 0
51601: PUSH
51602: EMPTY
51603: LIST
51604: LIST
51605: PUSH
51606: LD_INT 0
51608: PUSH
51609: LD_INT 1
51611: NEG
51612: PUSH
51613: EMPTY
51614: LIST
51615: LIST
51616: PUSH
51617: LD_INT 1
51619: PUSH
51620: LD_INT 0
51622: PUSH
51623: EMPTY
51624: LIST
51625: LIST
51626: PUSH
51627: LD_INT 1
51629: PUSH
51630: LD_INT 1
51632: PUSH
51633: EMPTY
51634: LIST
51635: LIST
51636: PUSH
51637: LD_INT 0
51639: PUSH
51640: LD_INT 1
51642: PUSH
51643: EMPTY
51644: LIST
51645: LIST
51646: PUSH
51647: LD_INT 1
51649: NEG
51650: PUSH
51651: LD_INT 0
51653: PUSH
51654: EMPTY
51655: LIST
51656: LIST
51657: PUSH
51658: LD_INT 1
51660: NEG
51661: PUSH
51662: LD_INT 1
51664: NEG
51665: PUSH
51666: EMPTY
51667: LIST
51668: LIST
51669: PUSH
51670: LD_INT 1
51672: NEG
51673: PUSH
51674: LD_INT 2
51676: NEG
51677: PUSH
51678: EMPTY
51679: LIST
51680: LIST
51681: PUSH
51682: LD_INT 0
51684: PUSH
51685: LD_INT 2
51687: NEG
51688: PUSH
51689: EMPTY
51690: LIST
51691: LIST
51692: PUSH
51693: LD_INT 1
51695: PUSH
51696: LD_INT 1
51698: NEG
51699: PUSH
51700: EMPTY
51701: LIST
51702: LIST
51703: PUSH
51704: LD_INT 2
51706: PUSH
51707: LD_INT 1
51709: PUSH
51710: EMPTY
51711: LIST
51712: LIST
51713: PUSH
51714: LD_INT 2
51716: PUSH
51717: LD_INT 2
51719: PUSH
51720: EMPTY
51721: LIST
51722: LIST
51723: PUSH
51724: LD_INT 1
51726: PUSH
51727: LD_INT 2
51729: PUSH
51730: EMPTY
51731: LIST
51732: LIST
51733: PUSH
51734: LD_INT 0
51736: PUSH
51737: LD_INT 2
51739: PUSH
51740: EMPTY
51741: LIST
51742: LIST
51743: PUSH
51744: LD_INT 1
51746: NEG
51747: PUSH
51748: LD_INT 1
51750: PUSH
51751: EMPTY
51752: LIST
51753: LIST
51754: PUSH
51755: LD_INT 2
51757: NEG
51758: PUSH
51759: LD_INT 0
51761: PUSH
51762: EMPTY
51763: LIST
51764: LIST
51765: PUSH
51766: LD_INT 2
51768: NEG
51769: PUSH
51770: LD_INT 1
51772: NEG
51773: PUSH
51774: EMPTY
51775: LIST
51776: LIST
51777: PUSH
51778: LD_INT 1
51780: NEG
51781: PUSH
51782: LD_INT 3
51784: NEG
51785: PUSH
51786: EMPTY
51787: LIST
51788: LIST
51789: PUSH
51790: LD_INT 1
51792: PUSH
51793: LD_INT 2
51795: NEG
51796: PUSH
51797: EMPTY
51798: LIST
51799: LIST
51800: PUSH
51801: LD_INT 3
51803: PUSH
51804: LD_INT 2
51806: PUSH
51807: EMPTY
51808: LIST
51809: LIST
51810: PUSH
51811: LD_INT 2
51813: PUSH
51814: LD_INT 3
51816: PUSH
51817: EMPTY
51818: LIST
51819: LIST
51820: PUSH
51821: LD_INT 2
51823: NEG
51824: PUSH
51825: LD_INT 1
51827: PUSH
51828: EMPTY
51829: LIST
51830: LIST
51831: PUSH
51832: LD_INT 3
51834: NEG
51835: PUSH
51836: LD_INT 1
51838: NEG
51839: PUSH
51840: EMPTY
51841: LIST
51842: LIST
51843: PUSH
51844: EMPTY
51845: LIST
51846: LIST
51847: LIST
51848: LIST
51849: LIST
51850: LIST
51851: LIST
51852: LIST
51853: LIST
51854: LIST
51855: LIST
51856: LIST
51857: LIST
51858: LIST
51859: LIST
51860: LIST
51861: LIST
51862: LIST
51863: LIST
51864: LIST
51865: LIST
51866: LIST
51867: LIST
51868: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
51869: LD_ADDR_VAR 0 33
51873: PUSH
51874: LD_INT 0
51876: PUSH
51877: LD_INT 0
51879: PUSH
51880: EMPTY
51881: LIST
51882: LIST
51883: PUSH
51884: LD_INT 0
51886: PUSH
51887: LD_INT 1
51889: NEG
51890: PUSH
51891: EMPTY
51892: LIST
51893: LIST
51894: PUSH
51895: LD_INT 1
51897: PUSH
51898: LD_INT 0
51900: PUSH
51901: EMPTY
51902: LIST
51903: LIST
51904: PUSH
51905: LD_INT 1
51907: PUSH
51908: LD_INT 1
51910: PUSH
51911: EMPTY
51912: LIST
51913: LIST
51914: PUSH
51915: LD_INT 0
51917: PUSH
51918: LD_INT 1
51920: PUSH
51921: EMPTY
51922: LIST
51923: LIST
51924: PUSH
51925: LD_INT 1
51927: NEG
51928: PUSH
51929: LD_INT 0
51931: PUSH
51932: EMPTY
51933: LIST
51934: LIST
51935: PUSH
51936: LD_INT 1
51938: NEG
51939: PUSH
51940: LD_INT 1
51942: NEG
51943: PUSH
51944: EMPTY
51945: LIST
51946: LIST
51947: PUSH
51948: LD_INT 1
51950: NEG
51951: PUSH
51952: LD_INT 2
51954: NEG
51955: PUSH
51956: EMPTY
51957: LIST
51958: LIST
51959: PUSH
51960: LD_INT 1
51962: PUSH
51963: LD_INT 1
51965: NEG
51966: PUSH
51967: EMPTY
51968: LIST
51969: LIST
51970: PUSH
51971: LD_INT 2
51973: PUSH
51974: LD_INT 0
51976: PUSH
51977: EMPTY
51978: LIST
51979: LIST
51980: PUSH
51981: LD_INT 2
51983: PUSH
51984: LD_INT 1
51986: PUSH
51987: EMPTY
51988: LIST
51989: LIST
51990: PUSH
51991: LD_INT 1
51993: PUSH
51994: LD_INT 2
51996: PUSH
51997: EMPTY
51998: LIST
51999: LIST
52000: PUSH
52001: LD_INT 0
52003: PUSH
52004: LD_INT 2
52006: PUSH
52007: EMPTY
52008: LIST
52009: LIST
52010: PUSH
52011: LD_INT 1
52013: NEG
52014: PUSH
52015: LD_INT 1
52017: PUSH
52018: EMPTY
52019: LIST
52020: LIST
52021: PUSH
52022: LD_INT 2
52024: NEG
52025: PUSH
52026: LD_INT 0
52028: PUSH
52029: EMPTY
52030: LIST
52031: LIST
52032: PUSH
52033: LD_INT 2
52035: NEG
52036: PUSH
52037: LD_INT 1
52039: NEG
52040: PUSH
52041: EMPTY
52042: LIST
52043: LIST
52044: PUSH
52045: LD_INT 2
52047: NEG
52048: PUSH
52049: LD_INT 2
52051: NEG
52052: PUSH
52053: EMPTY
52054: LIST
52055: LIST
52056: PUSH
52057: LD_INT 2
52059: NEG
52060: PUSH
52061: LD_INT 3
52063: NEG
52064: PUSH
52065: EMPTY
52066: LIST
52067: LIST
52068: PUSH
52069: LD_INT 2
52071: PUSH
52072: LD_INT 1
52074: NEG
52075: PUSH
52076: EMPTY
52077: LIST
52078: LIST
52079: PUSH
52080: LD_INT 3
52082: PUSH
52083: LD_INT 1
52085: PUSH
52086: EMPTY
52087: LIST
52088: LIST
52089: PUSH
52090: LD_INT 1
52092: PUSH
52093: LD_INT 3
52095: PUSH
52096: EMPTY
52097: LIST
52098: LIST
52099: PUSH
52100: LD_INT 1
52102: NEG
52103: PUSH
52104: LD_INT 2
52106: PUSH
52107: EMPTY
52108: LIST
52109: LIST
52110: PUSH
52111: LD_INT 3
52113: NEG
52114: PUSH
52115: LD_INT 2
52117: NEG
52118: PUSH
52119: EMPTY
52120: LIST
52121: LIST
52122: PUSH
52123: EMPTY
52124: LIST
52125: LIST
52126: LIST
52127: LIST
52128: LIST
52129: LIST
52130: LIST
52131: LIST
52132: LIST
52133: LIST
52134: LIST
52135: LIST
52136: LIST
52137: LIST
52138: LIST
52139: LIST
52140: LIST
52141: LIST
52142: LIST
52143: LIST
52144: LIST
52145: LIST
52146: LIST
52147: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52148: LD_ADDR_VAR 0 34
52152: PUSH
52153: LD_INT 0
52155: PUSH
52156: LD_INT 0
52158: PUSH
52159: EMPTY
52160: LIST
52161: LIST
52162: PUSH
52163: LD_INT 0
52165: PUSH
52166: LD_INT 1
52168: NEG
52169: PUSH
52170: EMPTY
52171: LIST
52172: LIST
52173: PUSH
52174: LD_INT 1
52176: PUSH
52177: LD_INT 0
52179: PUSH
52180: EMPTY
52181: LIST
52182: LIST
52183: PUSH
52184: LD_INT 1
52186: PUSH
52187: LD_INT 1
52189: PUSH
52190: EMPTY
52191: LIST
52192: LIST
52193: PUSH
52194: LD_INT 0
52196: PUSH
52197: LD_INT 1
52199: PUSH
52200: EMPTY
52201: LIST
52202: LIST
52203: PUSH
52204: LD_INT 1
52206: NEG
52207: PUSH
52208: LD_INT 0
52210: PUSH
52211: EMPTY
52212: LIST
52213: LIST
52214: PUSH
52215: LD_INT 1
52217: NEG
52218: PUSH
52219: LD_INT 1
52221: NEG
52222: PUSH
52223: EMPTY
52224: LIST
52225: LIST
52226: PUSH
52227: LD_INT 1
52229: NEG
52230: PUSH
52231: LD_INT 2
52233: NEG
52234: PUSH
52235: EMPTY
52236: LIST
52237: LIST
52238: PUSH
52239: LD_INT 0
52241: PUSH
52242: LD_INT 2
52244: NEG
52245: PUSH
52246: EMPTY
52247: LIST
52248: LIST
52249: PUSH
52250: LD_INT 1
52252: PUSH
52253: LD_INT 1
52255: NEG
52256: PUSH
52257: EMPTY
52258: LIST
52259: LIST
52260: PUSH
52261: LD_INT 2
52263: PUSH
52264: LD_INT 1
52266: PUSH
52267: EMPTY
52268: LIST
52269: LIST
52270: PUSH
52271: LD_INT 2
52273: PUSH
52274: LD_INT 2
52276: PUSH
52277: EMPTY
52278: LIST
52279: LIST
52280: PUSH
52281: LD_INT 1
52283: PUSH
52284: LD_INT 2
52286: PUSH
52287: EMPTY
52288: LIST
52289: LIST
52290: PUSH
52291: LD_INT 1
52293: NEG
52294: PUSH
52295: LD_INT 1
52297: PUSH
52298: EMPTY
52299: LIST
52300: LIST
52301: PUSH
52302: LD_INT 2
52304: NEG
52305: PUSH
52306: LD_INT 0
52308: PUSH
52309: EMPTY
52310: LIST
52311: LIST
52312: PUSH
52313: LD_INT 2
52315: NEG
52316: PUSH
52317: LD_INT 1
52319: NEG
52320: PUSH
52321: EMPTY
52322: LIST
52323: LIST
52324: PUSH
52325: LD_INT 2
52327: NEG
52328: PUSH
52329: LD_INT 2
52331: NEG
52332: PUSH
52333: EMPTY
52334: LIST
52335: LIST
52336: PUSH
52337: LD_INT 1
52339: NEG
52340: PUSH
52341: LD_INT 3
52343: NEG
52344: PUSH
52345: EMPTY
52346: LIST
52347: LIST
52348: PUSH
52349: LD_INT 1
52351: PUSH
52352: LD_INT 2
52354: NEG
52355: PUSH
52356: EMPTY
52357: LIST
52358: LIST
52359: PUSH
52360: LD_INT 3
52362: PUSH
52363: LD_INT 2
52365: PUSH
52366: EMPTY
52367: LIST
52368: LIST
52369: PUSH
52370: LD_INT 2
52372: PUSH
52373: LD_INT 3
52375: PUSH
52376: EMPTY
52377: LIST
52378: LIST
52379: PUSH
52380: LD_INT 2
52382: NEG
52383: PUSH
52384: LD_INT 1
52386: PUSH
52387: EMPTY
52388: LIST
52389: LIST
52390: PUSH
52391: LD_INT 3
52393: NEG
52394: PUSH
52395: LD_INT 1
52397: NEG
52398: PUSH
52399: EMPTY
52400: LIST
52401: LIST
52402: PUSH
52403: EMPTY
52404: LIST
52405: LIST
52406: LIST
52407: LIST
52408: LIST
52409: LIST
52410: LIST
52411: LIST
52412: LIST
52413: LIST
52414: LIST
52415: LIST
52416: LIST
52417: LIST
52418: LIST
52419: LIST
52420: LIST
52421: LIST
52422: LIST
52423: LIST
52424: LIST
52425: LIST
52426: LIST
52427: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
52428: LD_ADDR_VAR 0 35
52432: PUSH
52433: LD_INT 0
52435: PUSH
52436: LD_INT 0
52438: PUSH
52439: EMPTY
52440: LIST
52441: LIST
52442: PUSH
52443: LD_INT 0
52445: PUSH
52446: LD_INT 1
52448: NEG
52449: PUSH
52450: EMPTY
52451: LIST
52452: LIST
52453: PUSH
52454: LD_INT 1
52456: PUSH
52457: LD_INT 0
52459: PUSH
52460: EMPTY
52461: LIST
52462: LIST
52463: PUSH
52464: LD_INT 1
52466: PUSH
52467: LD_INT 1
52469: PUSH
52470: EMPTY
52471: LIST
52472: LIST
52473: PUSH
52474: LD_INT 0
52476: PUSH
52477: LD_INT 1
52479: PUSH
52480: EMPTY
52481: LIST
52482: LIST
52483: PUSH
52484: LD_INT 1
52486: NEG
52487: PUSH
52488: LD_INT 0
52490: PUSH
52491: EMPTY
52492: LIST
52493: LIST
52494: PUSH
52495: LD_INT 1
52497: NEG
52498: PUSH
52499: LD_INT 1
52501: NEG
52502: PUSH
52503: EMPTY
52504: LIST
52505: LIST
52506: PUSH
52507: LD_INT 2
52509: PUSH
52510: LD_INT 1
52512: PUSH
52513: EMPTY
52514: LIST
52515: LIST
52516: PUSH
52517: LD_INT 2
52519: NEG
52520: PUSH
52521: LD_INT 1
52523: NEG
52524: PUSH
52525: EMPTY
52526: LIST
52527: LIST
52528: PUSH
52529: EMPTY
52530: LIST
52531: LIST
52532: LIST
52533: LIST
52534: LIST
52535: LIST
52536: LIST
52537: LIST
52538: LIST
52539: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
52540: LD_ADDR_VAR 0 36
52544: PUSH
52545: LD_INT 0
52547: PUSH
52548: LD_INT 0
52550: PUSH
52551: EMPTY
52552: LIST
52553: LIST
52554: PUSH
52555: LD_INT 0
52557: PUSH
52558: LD_INT 1
52560: NEG
52561: PUSH
52562: EMPTY
52563: LIST
52564: LIST
52565: PUSH
52566: LD_INT 1
52568: PUSH
52569: LD_INT 0
52571: PUSH
52572: EMPTY
52573: LIST
52574: LIST
52575: PUSH
52576: LD_INT 1
52578: PUSH
52579: LD_INT 1
52581: PUSH
52582: EMPTY
52583: LIST
52584: LIST
52585: PUSH
52586: LD_INT 0
52588: PUSH
52589: LD_INT 1
52591: PUSH
52592: EMPTY
52593: LIST
52594: LIST
52595: PUSH
52596: LD_INT 1
52598: NEG
52599: PUSH
52600: LD_INT 0
52602: PUSH
52603: EMPTY
52604: LIST
52605: LIST
52606: PUSH
52607: LD_INT 1
52609: NEG
52610: PUSH
52611: LD_INT 1
52613: NEG
52614: PUSH
52615: EMPTY
52616: LIST
52617: LIST
52618: PUSH
52619: LD_INT 1
52621: NEG
52622: PUSH
52623: LD_INT 2
52625: NEG
52626: PUSH
52627: EMPTY
52628: LIST
52629: LIST
52630: PUSH
52631: LD_INT 1
52633: PUSH
52634: LD_INT 2
52636: PUSH
52637: EMPTY
52638: LIST
52639: LIST
52640: PUSH
52641: EMPTY
52642: LIST
52643: LIST
52644: LIST
52645: LIST
52646: LIST
52647: LIST
52648: LIST
52649: LIST
52650: LIST
52651: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
52652: LD_ADDR_VAR 0 37
52656: PUSH
52657: LD_INT 0
52659: PUSH
52660: LD_INT 0
52662: PUSH
52663: EMPTY
52664: LIST
52665: LIST
52666: PUSH
52667: LD_INT 0
52669: PUSH
52670: LD_INT 1
52672: NEG
52673: PUSH
52674: EMPTY
52675: LIST
52676: LIST
52677: PUSH
52678: LD_INT 1
52680: PUSH
52681: LD_INT 0
52683: PUSH
52684: EMPTY
52685: LIST
52686: LIST
52687: PUSH
52688: LD_INT 1
52690: PUSH
52691: LD_INT 1
52693: PUSH
52694: EMPTY
52695: LIST
52696: LIST
52697: PUSH
52698: LD_INT 0
52700: PUSH
52701: LD_INT 1
52703: PUSH
52704: EMPTY
52705: LIST
52706: LIST
52707: PUSH
52708: LD_INT 1
52710: NEG
52711: PUSH
52712: LD_INT 0
52714: PUSH
52715: EMPTY
52716: LIST
52717: LIST
52718: PUSH
52719: LD_INT 1
52721: NEG
52722: PUSH
52723: LD_INT 1
52725: NEG
52726: PUSH
52727: EMPTY
52728: LIST
52729: LIST
52730: PUSH
52731: LD_INT 1
52733: PUSH
52734: LD_INT 1
52736: NEG
52737: PUSH
52738: EMPTY
52739: LIST
52740: LIST
52741: PUSH
52742: LD_INT 1
52744: NEG
52745: PUSH
52746: LD_INT 1
52748: PUSH
52749: EMPTY
52750: LIST
52751: LIST
52752: PUSH
52753: EMPTY
52754: LIST
52755: LIST
52756: LIST
52757: LIST
52758: LIST
52759: LIST
52760: LIST
52761: LIST
52762: LIST
52763: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
52764: LD_ADDR_VAR 0 38
52768: PUSH
52769: LD_INT 0
52771: PUSH
52772: LD_INT 0
52774: PUSH
52775: EMPTY
52776: LIST
52777: LIST
52778: PUSH
52779: LD_INT 0
52781: PUSH
52782: LD_INT 1
52784: NEG
52785: PUSH
52786: EMPTY
52787: LIST
52788: LIST
52789: PUSH
52790: LD_INT 1
52792: PUSH
52793: LD_INT 0
52795: PUSH
52796: EMPTY
52797: LIST
52798: LIST
52799: PUSH
52800: LD_INT 1
52802: PUSH
52803: LD_INT 1
52805: PUSH
52806: EMPTY
52807: LIST
52808: LIST
52809: PUSH
52810: LD_INT 0
52812: PUSH
52813: LD_INT 1
52815: PUSH
52816: EMPTY
52817: LIST
52818: LIST
52819: PUSH
52820: LD_INT 1
52822: NEG
52823: PUSH
52824: LD_INT 0
52826: PUSH
52827: EMPTY
52828: LIST
52829: LIST
52830: PUSH
52831: LD_INT 1
52833: NEG
52834: PUSH
52835: LD_INT 1
52837: NEG
52838: PUSH
52839: EMPTY
52840: LIST
52841: LIST
52842: PUSH
52843: LD_INT 2
52845: PUSH
52846: LD_INT 1
52848: PUSH
52849: EMPTY
52850: LIST
52851: LIST
52852: PUSH
52853: LD_INT 2
52855: NEG
52856: PUSH
52857: LD_INT 1
52859: NEG
52860: PUSH
52861: EMPTY
52862: LIST
52863: LIST
52864: PUSH
52865: EMPTY
52866: LIST
52867: LIST
52868: LIST
52869: LIST
52870: LIST
52871: LIST
52872: LIST
52873: LIST
52874: LIST
52875: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
52876: LD_ADDR_VAR 0 39
52880: PUSH
52881: LD_INT 0
52883: PUSH
52884: LD_INT 0
52886: PUSH
52887: EMPTY
52888: LIST
52889: LIST
52890: PUSH
52891: LD_INT 0
52893: PUSH
52894: LD_INT 1
52896: NEG
52897: PUSH
52898: EMPTY
52899: LIST
52900: LIST
52901: PUSH
52902: LD_INT 1
52904: PUSH
52905: LD_INT 0
52907: PUSH
52908: EMPTY
52909: LIST
52910: LIST
52911: PUSH
52912: LD_INT 1
52914: PUSH
52915: LD_INT 1
52917: PUSH
52918: EMPTY
52919: LIST
52920: LIST
52921: PUSH
52922: LD_INT 0
52924: PUSH
52925: LD_INT 1
52927: PUSH
52928: EMPTY
52929: LIST
52930: LIST
52931: PUSH
52932: LD_INT 1
52934: NEG
52935: PUSH
52936: LD_INT 0
52938: PUSH
52939: EMPTY
52940: LIST
52941: LIST
52942: PUSH
52943: LD_INT 1
52945: NEG
52946: PUSH
52947: LD_INT 1
52949: NEG
52950: PUSH
52951: EMPTY
52952: LIST
52953: LIST
52954: PUSH
52955: LD_INT 1
52957: NEG
52958: PUSH
52959: LD_INT 2
52961: NEG
52962: PUSH
52963: EMPTY
52964: LIST
52965: LIST
52966: PUSH
52967: LD_INT 1
52969: PUSH
52970: LD_INT 2
52972: PUSH
52973: EMPTY
52974: LIST
52975: LIST
52976: PUSH
52977: EMPTY
52978: LIST
52979: LIST
52980: LIST
52981: LIST
52982: LIST
52983: LIST
52984: LIST
52985: LIST
52986: LIST
52987: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
52988: LD_ADDR_VAR 0 40
52992: PUSH
52993: LD_INT 0
52995: PUSH
52996: LD_INT 0
52998: PUSH
52999: EMPTY
53000: LIST
53001: LIST
53002: PUSH
53003: LD_INT 0
53005: PUSH
53006: LD_INT 1
53008: NEG
53009: PUSH
53010: EMPTY
53011: LIST
53012: LIST
53013: PUSH
53014: LD_INT 1
53016: PUSH
53017: LD_INT 0
53019: PUSH
53020: EMPTY
53021: LIST
53022: LIST
53023: PUSH
53024: LD_INT 1
53026: PUSH
53027: LD_INT 1
53029: PUSH
53030: EMPTY
53031: LIST
53032: LIST
53033: PUSH
53034: LD_INT 0
53036: PUSH
53037: LD_INT 1
53039: PUSH
53040: EMPTY
53041: LIST
53042: LIST
53043: PUSH
53044: LD_INT 1
53046: NEG
53047: PUSH
53048: LD_INT 0
53050: PUSH
53051: EMPTY
53052: LIST
53053: LIST
53054: PUSH
53055: LD_INT 1
53057: NEG
53058: PUSH
53059: LD_INT 1
53061: NEG
53062: PUSH
53063: EMPTY
53064: LIST
53065: LIST
53066: PUSH
53067: LD_INT 1
53069: PUSH
53070: LD_INT 1
53072: NEG
53073: PUSH
53074: EMPTY
53075: LIST
53076: LIST
53077: PUSH
53078: LD_INT 1
53080: NEG
53081: PUSH
53082: LD_INT 1
53084: PUSH
53085: EMPTY
53086: LIST
53087: LIST
53088: PUSH
53089: EMPTY
53090: LIST
53091: LIST
53092: LIST
53093: LIST
53094: LIST
53095: LIST
53096: LIST
53097: LIST
53098: LIST
53099: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53100: LD_ADDR_VAR 0 41
53104: PUSH
53105: LD_INT 0
53107: PUSH
53108: LD_INT 0
53110: PUSH
53111: EMPTY
53112: LIST
53113: LIST
53114: PUSH
53115: LD_INT 0
53117: PUSH
53118: LD_INT 1
53120: NEG
53121: PUSH
53122: EMPTY
53123: LIST
53124: LIST
53125: PUSH
53126: LD_INT 1
53128: PUSH
53129: LD_INT 0
53131: PUSH
53132: EMPTY
53133: LIST
53134: LIST
53135: PUSH
53136: LD_INT 1
53138: PUSH
53139: LD_INT 1
53141: PUSH
53142: EMPTY
53143: LIST
53144: LIST
53145: PUSH
53146: LD_INT 0
53148: PUSH
53149: LD_INT 1
53151: PUSH
53152: EMPTY
53153: LIST
53154: LIST
53155: PUSH
53156: LD_INT 1
53158: NEG
53159: PUSH
53160: LD_INT 0
53162: PUSH
53163: EMPTY
53164: LIST
53165: LIST
53166: PUSH
53167: LD_INT 1
53169: NEG
53170: PUSH
53171: LD_INT 1
53173: NEG
53174: PUSH
53175: EMPTY
53176: LIST
53177: LIST
53178: PUSH
53179: LD_INT 1
53181: NEG
53182: PUSH
53183: LD_INT 2
53185: NEG
53186: PUSH
53187: EMPTY
53188: LIST
53189: LIST
53190: PUSH
53191: LD_INT 1
53193: PUSH
53194: LD_INT 1
53196: NEG
53197: PUSH
53198: EMPTY
53199: LIST
53200: LIST
53201: PUSH
53202: LD_INT 2
53204: PUSH
53205: LD_INT 0
53207: PUSH
53208: EMPTY
53209: LIST
53210: LIST
53211: PUSH
53212: LD_INT 2
53214: PUSH
53215: LD_INT 1
53217: PUSH
53218: EMPTY
53219: LIST
53220: LIST
53221: PUSH
53222: LD_INT 2
53224: PUSH
53225: LD_INT 2
53227: PUSH
53228: EMPTY
53229: LIST
53230: LIST
53231: PUSH
53232: LD_INT 1
53234: PUSH
53235: LD_INT 2
53237: PUSH
53238: EMPTY
53239: LIST
53240: LIST
53241: PUSH
53242: LD_INT 1
53244: NEG
53245: PUSH
53246: LD_INT 1
53248: PUSH
53249: EMPTY
53250: LIST
53251: LIST
53252: PUSH
53253: LD_INT 2
53255: NEG
53256: PUSH
53257: LD_INT 0
53259: PUSH
53260: EMPTY
53261: LIST
53262: LIST
53263: PUSH
53264: LD_INT 2
53266: NEG
53267: PUSH
53268: LD_INT 1
53270: NEG
53271: PUSH
53272: EMPTY
53273: LIST
53274: LIST
53275: PUSH
53276: LD_INT 2
53278: NEG
53279: PUSH
53280: LD_INT 2
53282: NEG
53283: PUSH
53284: EMPTY
53285: LIST
53286: LIST
53287: PUSH
53288: LD_INT 2
53290: NEG
53291: PUSH
53292: LD_INT 3
53294: NEG
53295: PUSH
53296: EMPTY
53297: LIST
53298: LIST
53299: PUSH
53300: LD_INT 2
53302: PUSH
53303: LD_INT 1
53305: NEG
53306: PUSH
53307: EMPTY
53308: LIST
53309: LIST
53310: PUSH
53311: LD_INT 3
53313: PUSH
53314: LD_INT 0
53316: PUSH
53317: EMPTY
53318: LIST
53319: LIST
53320: PUSH
53321: LD_INT 3
53323: PUSH
53324: LD_INT 1
53326: PUSH
53327: EMPTY
53328: LIST
53329: LIST
53330: PUSH
53331: LD_INT 3
53333: PUSH
53334: LD_INT 2
53336: PUSH
53337: EMPTY
53338: LIST
53339: LIST
53340: PUSH
53341: LD_INT 3
53343: PUSH
53344: LD_INT 3
53346: PUSH
53347: EMPTY
53348: LIST
53349: LIST
53350: PUSH
53351: LD_INT 2
53353: PUSH
53354: LD_INT 3
53356: PUSH
53357: EMPTY
53358: LIST
53359: LIST
53360: PUSH
53361: LD_INT 2
53363: NEG
53364: PUSH
53365: LD_INT 1
53367: PUSH
53368: EMPTY
53369: LIST
53370: LIST
53371: PUSH
53372: LD_INT 3
53374: NEG
53375: PUSH
53376: LD_INT 0
53378: PUSH
53379: EMPTY
53380: LIST
53381: LIST
53382: PUSH
53383: LD_INT 3
53385: NEG
53386: PUSH
53387: LD_INT 1
53389: NEG
53390: PUSH
53391: EMPTY
53392: LIST
53393: LIST
53394: PUSH
53395: LD_INT 3
53397: NEG
53398: PUSH
53399: LD_INT 2
53401: NEG
53402: PUSH
53403: EMPTY
53404: LIST
53405: LIST
53406: PUSH
53407: LD_INT 3
53409: NEG
53410: PUSH
53411: LD_INT 3
53413: NEG
53414: PUSH
53415: EMPTY
53416: LIST
53417: LIST
53418: PUSH
53419: EMPTY
53420: LIST
53421: LIST
53422: LIST
53423: LIST
53424: LIST
53425: LIST
53426: LIST
53427: LIST
53428: LIST
53429: LIST
53430: LIST
53431: LIST
53432: LIST
53433: LIST
53434: LIST
53435: LIST
53436: LIST
53437: LIST
53438: LIST
53439: LIST
53440: LIST
53441: LIST
53442: LIST
53443: LIST
53444: LIST
53445: LIST
53446: LIST
53447: LIST
53448: LIST
53449: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53450: LD_ADDR_VAR 0 42
53454: PUSH
53455: LD_INT 0
53457: PUSH
53458: LD_INT 0
53460: PUSH
53461: EMPTY
53462: LIST
53463: LIST
53464: PUSH
53465: LD_INT 0
53467: PUSH
53468: LD_INT 1
53470: NEG
53471: PUSH
53472: EMPTY
53473: LIST
53474: LIST
53475: PUSH
53476: LD_INT 1
53478: PUSH
53479: LD_INT 0
53481: PUSH
53482: EMPTY
53483: LIST
53484: LIST
53485: PUSH
53486: LD_INT 1
53488: PUSH
53489: LD_INT 1
53491: PUSH
53492: EMPTY
53493: LIST
53494: LIST
53495: PUSH
53496: LD_INT 0
53498: PUSH
53499: LD_INT 1
53501: PUSH
53502: EMPTY
53503: LIST
53504: LIST
53505: PUSH
53506: LD_INT 1
53508: NEG
53509: PUSH
53510: LD_INT 0
53512: PUSH
53513: EMPTY
53514: LIST
53515: LIST
53516: PUSH
53517: LD_INT 1
53519: NEG
53520: PUSH
53521: LD_INT 1
53523: NEG
53524: PUSH
53525: EMPTY
53526: LIST
53527: LIST
53528: PUSH
53529: LD_INT 1
53531: NEG
53532: PUSH
53533: LD_INT 2
53535: NEG
53536: PUSH
53537: EMPTY
53538: LIST
53539: LIST
53540: PUSH
53541: LD_INT 0
53543: PUSH
53544: LD_INT 2
53546: NEG
53547: PUSH
53548: EMPTY
53549: LIST
53550: LIST
53551: PUSH
53552: LD_INT 1
53554: PUSH
53555: LD_INT 1
53557: NEG
53558: PUSH
53559: EMPTY
53560: LIST
53561: LIST
53562: PUSH
53563: LD_INT 2
53565: PUSH
53566: LD_INT 1
53568: PUSH
53569: EMPTY
53570: LIST
53571: LIST
53572: PUSH
53573: LD_INT 2
53575: PUSH
53576: LD_INT 2
53578: PUSH
53579: EMPTY
53580: LIST
53581: LIST
53582: PUSH
53583: LD_INT 1
53585: PUSH
53586: LD_INT 2
53588: PUSH
53589: EMPTY
53590: LIST
53591: LIST
53592: PUSH
53593: LD_INT 0
53595: PUSH
53596: LD_INT 2
53598: PUSH
53599: EMPTY
53600: LIST
53601: LIST
53602: PUSH
53603: LD_INT 1
53605: NEG
53606: PUSH
53607: LD_INT 1
53609: PUSH
53610: EMPTY
53611: LIST
53612: LIST
53613: PUSH
53614: LD_INT 2
53616: NEG
53617: PUSH
53618: LD_INT 1
53620: NEG
53621: PUSH
53622: EMPTY
53623: LIST
53624: LIST
53625: PUSH
53626: LD_INT 2
53628: NEG
53629: PUSH
53630: LD_INT 2
53632: NEG
53633: PUSH
53634: EMPTY
53635: LIST
53636: LIST
53637: PUSH
53638: LD_INT 2
53640: NEG
53641: PUSH
53642: LD_INT 3
53644: NEG
53645: PUSH
53646: EMPTY
53647: LIST
53648: LIST
53649: PUSH
53650: LD_INT 1
53652: NEG
53653: PUSH
53654: LD_INT 3
53656: NEG
53657: PUSH
53658: EMPTY
53659: LIST
53660: LIST
53661: PUSH
53662: LD_INT 0
53664: PUSH
53665: LD_INT 3
53667: NEG
53668: PUSH
53669: EMPTY
53670: LIST
53671: LIST
53672: PUSH
53673: LD_INT 1
53675: PUSH
53676: LD_INT 2
53678: NEG
53679: PUSH
53680: EMPTY
53681: LIST
53682: LIST
53683: PUSH
53684: LD_INT 3
53686: PUSH
53687: LD_INT 2
53689: PUSH
53690: EMPTY
53691: LIST
53692: LIST
53693: PUSH
53694: LD_INT 3
53696: PUSH
53697: LD_INT 3
53699: PUSH
53700: EMPTY
53701: LIST
53702: LIST
53703: PUSH
53704: LD_INT 2
53706: PUSH
53707: LD_INT 3
53709: PUSH
53710: EMPTY
53711: LIST
53712: LIST
53713: PUSH
53714: LD_INT 1
53716: PUSH
53717: LD_INT 3
53719: PUSH
53720: EMPTY
53721: LIST
53722: LIST
53723: PUSH
53724: LD_INT 0
53726: PUSH
53727: LD_INT 3
53729: PUSH
53730: EMPTY
53731: LIST
53732: LIST
53733: PUSH
53734: LD_INT 1
53736: NEG
53737: PUSH
53738: LD_INT 2
53740: PUSH
53741: EMPTY
53742: LIST
53743: LIST
53744: PUSH
53745: LD_INT 3
53747: NEG
53748: PUSH
53749: LD_INT 2
53751: NEG
53752: PUSH
53753: EMPTY
53754: LIST
53755: LIST
53756: PUSH
53757: LD_INT 3
53759: NEG
53760: PUSH
53761: LD_INT 3
53763: NEG
53764: PUSH
53765: EMPTY
53766: LIST
53767: LIST
53768: PUSH
53769: EMPTY
53770: LIST
53771: LIST
53772: LIST
53773: LIST
53774: LIST
53775: LIST
53776: LIST
53777: LIST
53778: LIST
53779: LIST
53780: LIST
53781: LIST
53782: LIST
53783: LIST
53784: LIST
53785: LIST
53786: LIST
53787: LIST
53788: LIST
53789: LIST
53790: LIST
53791: LIST
53792: LIST
53793: LIST
53794: LIST
53795: LIST
53796: LIST
53797: LIST
53798: LIST
53799: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53800: LD_ADDR_VAR 0 43
53804: PUSH
53805: LD_INT 0
53807: PUSH
53808: LD_INT 0
53810: PUSH
53811: EMPTY
53812: LIST
53813: LIST
53814: PUSH
53815: LD_INT 0
53817: PUSH
53818: LD_INT 1
53820: NEG
53821: PUSH
53822: EMPTY
53823: LIST
53824: LIST
53825: PUSH
53826: LD_INT 1
53828: PUSH
53829: LD_INT 0
53831: PUSH
53832: EMPTY
53833: LIST
53834: LIST
53835: PUSH
53836: LD_INT 1
53838: PUSH
53839: LD_INT 1
53841: PUSH
53842: EMPTY
53843: LIST
53844: LIST
53845: PUSH
53846: LD_INT 0
53848: PUSH
53849: LD_INT 1
53851: PUSH
53852: EMPTY
53853: LIST
53854: LIST
53855: PUSH
53856: LD_INT 1
53858: NEG
53859: PUSH
53860: LD_INT 0
53862: PUSH
53863: EMPTY
53864: LIST
53865: LIST
53866: PUSH
53867: LD_INT 1
53869: NEG
53870: PUSH
53871: LD_INT 1
53873: NEG
53874: PUSH
53875: EMPTY
53876: LIST
53877: LIST
53878: PUSH
53879: LD_INT 1
53881: NEG
53882: PUSH
53883: LD_INT 2
53885: NEG
53886: PUSH
53887: EMPTY
53888: LIST
53889: LIST
53890: PUSH
53891: LD_INT 0
53893: PUSH
53894: LD_INT 2
53896: NEG
53897: PUSH
53898: EMPTY
53899: LIST
53900: LIST
53901: PUSH
53902: LD_INT 1
53904: PUSH
53905: LD_INT 1
53907: NEG
53908: PUSH
53909: EMPTY
53910: LIST
53911: LIST
53912: PUSH
53913: LD_INT 2
53915: PUSH
53916: LD_INT 0
53918: PUSH
53919: EMPTY
53920: LIST
53921: LIST
53922: PUSH
53923: LD_INT 2
53925: PUSH
53926: LD_INT 1
53928: PUSH
53929: EMPTY
53930: LIST
53931: LIST
53932: PUSH
53933: LD_INT 1
53935: PUSH
53936: LD_INT 2
53938: PUSH
53939: EMPTY
53940: LIST
53941: LIST
53942: PUSH
53943: LD_INT 0
53945: PUSH
53946: LD_INT 2
53948: PUSH
53949: EMPTY
53950: LIST
53951: LIST
53952: PUSH
53953: LD_INT 1
53955: NEG
53956: PUSH
53957: LD_INT 1
53959: PUSH
53960: EMPTY
53961: LIST
53962: LIST
53963: PUSH
53964: LD_INT 2
53966: NEG
53967: PUSH
53968: LD_INT 0
53970: PUSH
53971: EMPTY
53972: LIST
53973: LIST
53974: PUSH
53975: LD_INT 2
53977: NEG
53978: PUSH
53979: LD_INT 1
53981: NEG
53982: PUSH
53983: EMPTY
53984: LIST
53985: LIST
53986: PUSH
53987: LD_INT 1
53989: NEG
53990: PUSH
53991: LD_INT 3
53993: NEG
53994: PUSH
53995: EMPTY
53996: LIST
53997: LIST
53998: PUSH
53999: LD_INT 0
54001: PUSH
54002: LD_INT 3
54004: NEG
54005: PUSH
54006: EMPTY
54007: LIST
54008: LIST
54009: PUSH
54010: LD_INT 1
54012: PUSH
54013: LD_INT 2
54015: NEG
54016: PUSH
54017: EMPTY
54018: LIST
54019: LIST
54020: PUSH
54021: LD_INT 2
54023: PUSH
54024: LD_INT 1
54026: NEG
54027: PUSH
54028: EMPTY
54029: LIST
54030: LIST
54031: PUSH
54032: LD_INT 3
54034: PUSH
54035: LD_INT 0
54037: PUSH
54038: EMPTY
54039: LIST
54040: LIST
54041: PUSH
54042: LD_INT 3
54044: PUSH
54045: LD_INT 1
54047: PUSH
54048: EMPTY
54049: LIST
54050: LIST
54051: PUSH
54052: LD_INT 1
54054: PUSH
54055: LD_INT 3
54057: PUSH
54058: EMPTY
54059: LIST
54060: LIST
54061: PUSH
54062: LD_INT 0
54064: PUSH
54065: LD_INT 3
54067: PUSH
54068: EMPTY
54069: LIST
54070: LIST
54071: PUSH
54072: LD_INT 1
54074: NEG
54075: PUSH
54076: LD_INT 2
54078: PUSH
54079: EMPTY
54080: LIST
54081: LIST
54082: PUSH
54083: LD_INT 2
54085: NEG
54086: PUSH
54087: LD_INT 1
54089: PUSH
54090: EMPTY
54091: LIST
54092: LIST
54093: PUSH
54094: LD_INT 3
54096: NEG
54097: PUSH
54098: LD_INT 0
54100: PUSH
54101: EMPTY
54102: LIST
54103: LIST
54104: PUSH
54105: LD_INT 3
54107: NEG
54108: PUSH
54109: LD_INT 1
54111: NEG
54112: PUSH
54113: EMPTY
54114: LIST
54115: LIST
54116: PUSH
54117: EMPTY
54118: LIST
54119: LIST
54120: LIST
54121: LIST
54122: LIST
54123: LIST
54124: LIST
54125: LIST
54126: LIST
54127: LIST
54128: LIST
54129: LIST
54130: LIST
54131: LIST
54132: LIST
54133: LIST
54134: LIST
54135: LIST
54136: LIST
54137: LIST
54138: LIST
54139: LIST
54140: LIST
54141: LIST
54142: LIST
54143: LIST
54144: LIST
54145: LIST
54146: LIST
54147: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54148: LD_ADDR_VAR 0 44
54152: PUSH
54153: LD_INT 0
54155: PUSH
54156: LD_INT 0
54158: PUSH
54159: EMPTY
54160: LIST
54161: LIST
54162: PUSH
54163: LD_INT 0
54165: PUSH
54166: LD_INT 1
54168: NEG
54169: PUSH
54170: EMPTY
54171: LIST
54172: LIST
54173: PUSH
54174: LD_INT 1
54176: PUSH
54177: LD_INT 0
54179: PUSH
54180: EMPTY
54181: LIST
54182: LIST
54183: PUSH
54184: LD_INT 1
54186: PUSH
54187: LD_INT 1
54189: PUSH
54190: EMPTY
54191: LIST
54192: LIST
54193: PUSH
54194: LD_INT 0
54196: PUSH
54197: LD_INT 1
54199: PUSH
54200: EMPTY
54201: LIST
54202: LIST
54203: PUSH
54204: LD_INT 1
54206: NEG
54207: PUSH
54208: LD_INT 0
54210: PUSH
54211: EMPTY
54212: LIST
54213: LIST
54214: PUSH
54215: LD_INT 1
54217: NEG
54218: PUSH
54219: LD_INT 1
54221: NEG
54222: PUSH
54223: EMPTY
54224: LIST
54225: LIST
54226: PUSH
54227: LD_INT 1
54229: NEG
54230: PUSH
54231: LD_INT 2
54233: NEG
54234: PUSH
54235: EMPTY
54236: LIST
54237: LIST
54238: PUSH
54239: LD_INT 1
54241: PUSH
54242: LD_INT 1
54244: NEG
54245: PUSH
54246: EMPTY
54247: LIST
54248: LIST
54249: PUSH
54250: LD_INT 2
54252: PUSH
54253: LD_INT 0
54255: PUSH
54256: EMPTY
54257: LIST
54258: LIST
54259: PUSH
54260: LD_INT 2
54262: PUSH
54263: LD_INT 1
54265: PUSH
54266: EMPTY
54267: LIST
54268: LIST
54269: PUSH
54270: LD_INT 2
54272: PUSH
54273: LD_INT 2
54275: PUSH
54276: EMPTY
54277: LIST
54278: LIST
54279: PUSH
54280: LD_INT 1
54282: PUSH
54283: LD_INT 2
54285: PUSH
54286: EMPTY
54287: LIST
54288: LIST
54289: PUSH
54290: LD_INT 1
54292: NEG
54293: PUSH
54294: LD_INT 1
54296: PUSH
54297: EMPTY
54298: LIST
54299: LIST
54300: PUSH
54301: LD_INT 2
54303: NEG
54304: PUSH
54305: LD_INT 0
54307: PUSH
54308: EMPTY
54309: LIST
54310: LIST
54311: PUSH
54312: LD_INT 2
54314: NEG
54315: PUSH
54316: LD_INT 1
54318: NEG
54319: PUSH
54320: EMPTY
54321: LIST
54322: LIST
54323: PUSH
54324: LD_INT 2
54326: NEG
54327: PUSH
54328: LD_INT 2
54330: NEG
54331: PUSH
54332: EMPTY
54333: LIST
54334: LIST
54335: PUSH
54336: LD_INT 2
54338: NEG
54339: PUSH
54340: LD_INT 3
54342: NEG
54343: PUSH
54344: EMPTY
54345: LIST
54346: LIST
54347: PUSH
54348: LD_INT 2
54350: PUSH
54351: LD_INT 1
54353: NEG
54354: PUSH
54355: EMPTY
54356: LIST
54357: LIST
54358: PUSH
54359: LD_INT 3
54361: PUSH
54362: LD_INT 0
54364: PUSH
54365: EMPTY
54366: LIST
54367: LIST
54368: PUSH
54369: LD_INT 3
54371: PUSH
54372: LD_INT 1
54374: PUSH
54375: EMPTY
54376: LIST
54377: LIST
54378: PUSH
54379: LD_INT 3
54381: PUSH
54382: LD_INT 2
54384: PUSH
54385: EMPTY
54386: LIST
54387: LIST
54388: PUSH
54389: LD_INT 3
54391: PUSH
54392: LD_INT 3
54394: PUSH
54395: EMPTY
54396: LIST
54397: LIST
54398: PUSH
54399: LD_INT 2
54401: PUSH
54402: LD_INT 3
54404: PUSH
54405: EMPTY
54406: LIST
54407: LIST
54408: PUSH
54409: LD_INT 2
54411: NEG
54412: PUSH
54413: LD_INT 1
54415: PUSH
54416: EMPTY
54417: LIST
54418: LIST
54419: PUSH
54420: LD_INT 3
54422: NEG
54423: PUSH
54424: LD_INT 0
54426: PUSH
54427: EMPTY
54428: LIST
54429: LIST
54430: PUSH
54431: LD_INT 3
54433: NEG
54434: PUSH
54435: LD_INT 1
54437: NEG
54438: PUSH
54439: EMPTY
54440: LIST
54441: LIST
54442: PUSH
54443: LD_INT 3
54445: NEG
54446: PUSH
54447: LD_INT 2
54449: NEG
54450: PUSH
54451: EMPTY
54452: LIST
54453: LIST
54454: PUSH
54455: LD_INT 3
54457: NEG
54458: PUSH
54459: LD_INT 3
54461: NEG
54462: PUSH
54463: EMPTY
54464: LIST
54465: LIST
54466: PUSH
54467: EMPTY
54468: LIST
54469: LIST
54470: LIST
54471: LIST
54472: LIST
54473: LIST
54474: LIST
54475: LIST
54476: LIST
54477: LIST
54478: LIST
54479: LIST
54480: LIST
54481: LIST
54482: LIST
54483: LIST
54484: LIST
54485: LIST
54486: LIST
54487: LIST
54488: LIST
54489: LIST
54490: LIST
54491: LIST
54492: LIST
54493: LIST
54494: LIST
54495: LIST
54496: LIST
54497: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54498: LD_ADDR_VAR 0 45
54502: PUSH
54503: LD_INT 0
54505: PUSH
54506: LD_INT 0
54508: PUSH
54509: EMPTY
54510: LIST
54511: LIST
54512: PUSH
54513: LD_INT 0
54515: PUSH
54516: LD_INT 1
54518: NEG
54519: PUSH
54520: EMPTY
54521: LIST
54522: LIST
54523: PUSH
54524: LD_INT 1
54526: PUSH
54527: LD_INT 0
54529: PUSH
54530: EMPTY
54531: LIST
54532: LIST
54533: PUSH
54534: LD_INT 1
54536: PUSH
54537: LD_INT 1
54539: PUSH
54540: EMPTY
54541: LIST
54542: LIST
54543: PUSH
54544: LD_INT 0
54546: PUSH
54547: LD_INT 1
54549: PUSH
54550: EMPTY
54551: LIST
54552: LIST
54553: PUSH
54554: LD_INT 1
54556: NEG
54557: PUSH
54558: LD_INT 0
54560: PUSH
54561: EMPTY
54562: LIST
54563: LIST
54564: PUSH
54565: LD_INT 1
54567: NEG
54568: PUSH
54569: LD_INT 1
54571: NEG
54572: PUSH
54573: EMPTY
54574: LIST
54575: LIST
54576: PUSH
54577: LD_INT 1
54579: NEG
54580: PUSH
54581: LD_INT 2
54583: NEG
54584: PUSH
54585: EMPTY
54586: LIST
54587: LIST
54588: PUSH
54589: LD_INT 0
54591: PUSH
54592: LD_INT 2
54594: NEG
54595: PUSH
54596: EMPTY
54597: LIST
54598: LIST
54599: PUSH
54600: LD_INT 1
54602: PUSH
54603: LD_INT 1
54605: NEG
54606: PUSH
54607: EMPTY
54608: LIST
54609: LIST
54610: PUSH
54611: LD_INT 2
54613: PUSH
54614: LD_INT 1
54616: PUSH
54617: EMPTY
54618: LIST
54619: LIST
54620: PUSH
54621: LD_INT 2
54623: PUSH
54624: LD_INT 2
54626: PUSH
54627: EMPTY
54628: LIST
54629: LIST
54630: PUSH
54631: LD_INT 1
54633: PUSH
54634: LD_INT 2
54636: PUSH
54637: EMPTY
54638: LIST
54639: LIST
54640: PUSH
54641: LD_INT 0
54643: PUSH
54644: LD_INT 2
54646: PUSH
54647: EMPTY
54648: LIST
54649: LIST
54650: PUSH
54651: LD_INT 1
54653: NEG
54654: PUSH
54655: LD_INT 1
54657: PUSH
54658: EMPTY
54659: LIST
54660: LIST
54661: PUSH
54662: LD_INT 2
54664: NEG
54665: PUSH
54666: LD_INT 1
54668: NEG
54669: PUSH
54670: EMPTY
54671: LIST
54672: LIST
54673: PUSH
54674: LD_INT 2
54676: NEG
54677: PUSH
54678: LD_INT 2
54680: NEG
54681: PUSH
54682: EMPTY
54683: LIST
54684: LIST
54685: PUSH
54686: LD_INT 2
54688: NEG
54689: PUSH
54690: LD_INT 3
54692: NEG
54693: PUSH
54694: EMPTY
54695: LIST
54696: LIST
54697: PUSH
54698: LD_INT 1
54700: NEG
54701: PUSH
54702: LD_INT 3
54704: NEG
54705: PUSH
54706: EMPTY
54707: LIST
54708: LIST
54709: PUSH
54710: LD_INT 0
54712: PUSH
54713: LD_INT 3
54715: NEG
54716: PUSH
54717: EMPTY
54718: LIST
54719: LIST
54720: PUSH
54721: LD_INT 1
54723: PUSH
54724: LD_INT 2
54726: NEG
54727: PUSH
54728: EMPTY
54729: LIST
54730: LIST
54731: PUSH
54732: LD_INT 3
54734: PUSH
54735: LD_INT 2
54737: PUSH
54738: EMPTY
54739: LIST
54740: LIST
54741: PUSH
54742: LD_INT 3
54744: PUSH
54745: LD_INT 3
54747: PUSH
54748: EMPTY
54749: LIST
54750: LIST
54751: PUSH
54752: LD_INT 2
54754: PUSH
54755: LD_INT 3
54757: PUSH
54758: EMPTY
54759: LIST
54760: LIST
54761: PUSH
54762: LD_INT 1
54764: PUSH
54765: LD_INT 3
54767: PUSH
54768: EMPTY
54769: LIST
54770: LIST
54771: PUSH
54772: LD_INT 0
54774: PUSH
54775: LD_INT 3
54777: PUSH
54778: EMPTY
54779: LIST
54780: LIST
54781: PUSH
54782: LD_INT 1
54784: NEG
54785: PUSH
54786: LD_INT 2
54788: PUSH
54789: EMPTY
54790: LIST
54791: LIST
54792: PUSH
54793: LD_INT 3
54795: NEG
54796: PUSH
54797: LD_INT 2
54799: NEG
54800: PUSH
54801: EMPTY
54802: LIST
54803: LIST
54804: PUSH
54805: LD_INT 3
54807: NEG
54808: PUSH
54809: LD_INT 3
54811: NEG
54812: PUSH
54813: EMPTY
54814: LIST
54815: LIST
54816: PUSH
54817: EMPTY
54818: LIST
54819: LIST
54820: LIST
54821: LIST
54822: LIST
54823: LIST
54824: LIST
54825: LIST
54826: LIST
54827: LIST
54828: LIST
54829: LIST
54830: LIST
54831: LIST
54832: LIST
54833: LIST
54834: LIST
54835: LIST
54836: LIST
54837: LIST
54838: LIST
54839: LIST
54840: LIST
54841: LIST
54842: LIST
54843: LIST
54844: LIST
54845: LIST
54846: LIST
54847: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54848: LD_ADDR_VAR 0 46
54852: PUSH
54853: LD_INT 0
54855: PUSH
54856: LD_INT 0
54858: PUSH
54859: EMPTY
54860: LIST
54861: LIST
54862: PUSH
54863: LD_INT 0
54865: PUSH
54866: LD_INT 1
54868: NEG
54869: PUSH
54870: EMPTY
54871: LIST
54872: LIST
54873: PUSH
54874: LD_INT 1
54876: PUSH
54877: LD_INT 0
54879: PUSH
54880: EMPTY
54881: LIST
54882: LIST
54883: PUSH
54884: LD_INT 1
54886: PUSH
54887: LD_INT 1
54889: PUSH
54890: EMPTY
54891: LIST
54892: LIST
54893: PUSH
54894: LD_INT 0
54896: PUSH
54897: LD_INT 1
54899: PUSH
54900: EMPTY
54901: LIST
54902: LIST
54903: PUSH
54904: LD_INT 1
54906: NEG
54907: PUSH
54908: LD_INT 0
54910: PUSH
54911: EMPTY
54912: LIST
54913: LIST
54914: PUSH
54915: LD_INT 1
54917: NEG
54918: PUSH
54919: LD_INT 1
54921: NEG
54922: PUSH
54923: EMPTY
54924: LIST
54925: LIST
54926: PUSH
54927: LD_INT 1
54929: NEG
54930: PUSH
54931: LD_INT 2
54933: NEG
54934: PUSH
54935: EMPTY
54936: LIST
54937: LIST
54938: PUSH
54939: LD_INT 0
54941: PUSH
54942: LD_INT 2
54944: NEG
54945: PUSH
54946: EMPTY
54947: LIST
54948: LIST
54949: PUSH
54950: LD_INT 1
54952: PUSH
54953: LD_INT 1
54955: NEG
54956: PUSH
54957: EMPTY
54958: LIST
54959: LIST
54960: PUSH
54961: LD_INT 2
54963: PUSH
54964: LD_INT 0
54966: PUSH
54967: EMPTY
54968: LIST
54969: LIST
54970: PUSH
54971: LD_INT 2
54973: PUSH
54974: LD_INT 1
54976: PUSH
54977: EMPTY
54978: LIST
54979: LIST
54980: PUSH
54981: LD_INT 1
54983: PUSH
54984: LD_INT 2
54986: PUSH
54987: EMPTY
54988: LIST
54989: LIST
54990: PUSH
54991: LD_INT 0
54993: PUSH
54994: LD_INT 2
54996: PUSH
54997: EMPTY
54998: LIST
54999: LIST
55000: PUSH
55001: LD_INT 1
55003: NEG
55004: PUSH
55005: LD_INT 1
55007: PUSH
55008: EMPTY
55009: LIST
55010: LIST
55011: PUSH
55012: LD_INT 2
55014: NEG
55015: PUSH
55016: LD_INT 0
55018: PUSH
55019: EMPTY
55020: LIST
55021: LIST
55022: PUSH
55023: LD_INT 2
55025: NEG
55026: PUSH
55027: LD_INT 1
55029: NEG
55030: PUSH
55031: EMPTY
55032: LIST
55033: LIST
55034: PUSH
55035: LD_INT 1
55037: NEG
55038: PUSH
55039: LD_INT 3
55041: NEG
55042: PUSH
55043: EMPTY
55044: LIST
55045: LIST
55046: PUSH
55047: LD_INT 0
55049: PUSH
55050: LD_INT 3
55052: NEG
55053: PUSH
55054: EMPTY
55055: LIST
55056: LIST
55057: PUSH
55058: LD_INT 1
55060: PUSH
55061: LD_INT 2
55063: NEG
55064: PUSH
55065: EMPTY
55066: LIST
55067: LIST
55068: PUSH
55069: LD_INT 2
55071: PUSH
55072: LD_INT 1
55074: NEG
55075: PUSH
55076: EMPTY
55077: LIST
55078: LIST
55079: PUSH
55080: LD_INT 3
55082: PUSH
55083: LD_INT 0
55085: PUSH
55086: EMPTY
55087: LIST
55088: LIST
55089: PUSH
55090: LD_INT 3
55092: PUSH
55093: LD_INT 1
55095: PUSH
55096: EMPTY
55097: LIST
55098: LIST
55099: PUSH
55100: LD_INT 1
55102: PUSH
55103: LD_INT 3
55105: PUSH
55106: EMPTY
55107: LIST
55108: LIST
55109: PUSH
55110: LD_INT 0
55112: PUSH
55113: LD_INT 3
55115: PUSH
55116: EMPTY
55117: LIST
55118: LIST
55119: PUSH
55120: LD_INT 1
55122: NEG
55123: PUSH
55124: LD_INT 2
55126: PUSH
55127: EMPTY
55128: LIST
55129: LIST
55130: PUSH
55131: LD_INT 2
55133: NEG
55134: PUSH
55135: LD_INT 1
55137: PUSH
55138: EMPTY
55139: LIST
55140: LIST
55141: PUSH
55142: LD_INT 3
55144: NEG
55145: PUSH
55146: LD_INT 0
55148: PUSH
55149: EMPTY
55150: LIST
55151: LIST
55152: PUSH
55153: LD_INT 3
55155: NEG
55156: PUSH
55157: LD_INT 1
55159: NEG
55160: PUSH
55161: EMPTY
55162: LIST
55163: LIST
55164: PUSH
55165: EMPTY
55166: LIST
55167: LIST
55168: LIST
55169: LIST
55170: LIST
55171: LIST
55172: LIST
55173: LIST
55174: LIST
55175: LIST
55176: LIST
55177: LIST
55178: LIST
55179: LIST
55180: LIST
55181: LIST
55182: LIST
55183: LIST
55184: LIST
55185: LIST
55186: LIST
55187: LIST
55188: LIST
55189: LIST
55190: LIST
55191: LIST
55192: LIST
55193: LIST
55194: LIST
55195: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55196: LD_ADDR_VAR 0 47
55200: PUSH
55201: LD_INT 0
55203: PUSH
55204: LD_INT 0
55206: PUSH
55207: EMPTY
55208: LIST
55209: LIST
55210: PUSH
55211: LD_INT 0
55213: PUSH
55214: LD_INT 1
55216: NEG
55217: PUSH
55218: EMPTY
55219: LIST
55220: LIST
55221: PUSH
55222: LD_INT 1
55224: PUSH
55225: LD_INT 0
55227: PUSH
55228: EMPTY
55229: LIST
55230: LIST
55231: PUSH
55232: LD_INT 1
55234: PUSH
55235: LD_INT 1
55237: PUSH
55238: EMPTY
55239: LIST
55240: LIST
55241: PUSH
55242: LD_INT 0
55244: PUSH
55245: LD_INT 1
55247: PUSH
55248: EMPTY
55249: LIST
55250: LIST
55251: PUSH
55252: LD_INT 1
55254: NEG
55255: PUSH
55256: LD_INT 0
55258: PUSH
55259: EMPTY
55260: LIST
55261: LIST
55262: PUSH
55263: LD_INT 1
55265: NEG
55266: PUSH
55267: LD_INT 1
55269: NEG
55270: PUSH
55271: EMPTY
55272: LIST
55273: LIST
55274: PUSH
55275: LD_INT 1
55277: NEG
55278: PUSH
55279: LD_INT 2
55281: NEG
55282: PUSH
55283: EMPTY
55284: LIST
55285: LIST
55286: PUSH
55287: LD_INT 0
55289: PUSH
55290: LD_INT 2
55292: NEG
55293: PUSH
55294: EMPTY
55295: LIST
55296: LIST
55297: PUSH
55298: LD_INT 1
55300: PUSH
55301: LD_INT 1
55303: NEG
55304: PUSH
55305: EMPTY
55306: LIST
55307: LIST
55308: PUSH
55309: LD_INT 2
55311: NEG
55312: PUSH
55313: LD_INT 1
55315: NEG
55316: PUSH
55317: EMPTY
55318: LIST
55319: LIST
55320: PUSH
55321: LD_INT 2
55323: NEG
55324: PUSH
55325: LD_INT 2
55327: NEG
55328: PUSH
55329: EMPTY
55330: LIST
55331: LIST
55332: PUSH
55333: EMPTY
55334: LIST
55335: LIST
55336: LIST
55337: LIST
55338: LIST
55339: LIST
55340: LIST
55341: LIST
55342: LIST
55343: LIST
55344: LIST
55345: LIST
55346: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
55347: LD_ADDR_VAR 0 48
55351: PUSH
55352: LD_INT 0
55354: PUSH
55355: LD_INT 0
55357: PUSH
55358: EMPTY
55359: LIST
55360: LIST
55361: PUSH
55362: LD_INT 0
55364: PUSH
55365: LD_INT 1
55367: NEG
55368: PUSH
55369: EMPTY
55370: LIST
55371: LIST
55372: PUSH
55373: LD_INT 1
55375: PUSH
55376: LD_INT 0
55378: PUSH
55379: EMPTY
55380: LIST
55381: LIST
55382: PUSH
55383: LD_INT 1
55385: PUSH
55386: LD_INT 1
55388: PUSH
55389: EMPTY
55390: LIST
55391: LIST
55392: PUSH
55393: LD_INT 0
55395: PUSH
55396: LD_INT 1
55398: PUSH
55399: EMPTY
55400: LIST
55401: LIST
55402: PUSH
55403: LD_INT 1
55405: NEG
55406: PUSH
55407: LD_INT 0
55409: PUSH
55410: EMPTY
55411: LIST
55412: LIST
55413: PUSH
55414: LD_INT 1
55416: NEG
55417: PUSH
55418: LD_INT 1
55420: NEG
55421: PUSH
55422: EMPTY
55423: LIST
55424: LIST
55425: PUSH
55426: LD_INT 1
55428: NEG
55429: PUSH
55430: LD_INT 2
55432: NEG
55433: PUSH
55434: EMPTY
55435: LIST
55436: LIST
55437: PUSH
55438: LD_INT 0
55440: PUSH
55441: LD_INT 2
55443: NEG
55444: PUSH
55445: EMPTY
55446: LIST
55447: LIST
55448: PUSH
55449: LD_INT 1
55451: PUSH
55452: LD_INT 1
55454: NEG
55455: PUSH
55456: EMPTY
55457: LIST
55458: LIST
55459: PUSH
55460: LD_INT 2
55462: PUSH
55463: LD_INT 0
55465: PUSH
55466: EMPTY
55467: LIST
55468: LIST
55469: PUSH
55470: LD_INT 2
55472: PUSH
55473: LD_INT 1
55475: PUSH
55476: EMPTY
55477: LIST
55478: LIST
55479: PUSH
55480: EMPTY
55481: LIST
55482: LIST
55483: LIST
55484: LIST
55485: LIST
55486: LIST
55487: LIST
55488: LIST
55489: LIST
55490: LIST
55491: LIST
55492: LIST
55493: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
55494: LD_ADDR_VAR 0 49
55498: PUSH
55499: LD_INT 0
55501: PUSH
55502: LD_INT 0
55504: PUSH
55505: EMPTY
55506: LIST
55507: LIST
55508: PUSH
55509: LD_INT 0
55511: PUSH
55512: LD_INT 1
55514: NEG
55515: PUSH
55516: EMPTY
55517: LIST
55518: LIST
55519: PUSH
55520: LD_INT 1
55522: PUSH
55523: LD_INT 0
55525: PUSH
55526: EMPTY
55527: LIST
55528: LIST
55529: PUSH
55530: LD_INT 1
55532: PUSH
55533: LD_INT 1
55535: PUSH
55536: EMPTY
55537: LIST
55538: LIST
55539: PUSH
55540: LD_INT 0
55542: PUSH
55543: LD_INT 1
55545: PUSH
55546: EMPTY
55547: LIST
55548: LIST
55549: PUSH
55550: LD_INT 1
55552: NEG
55553: PUSH
55554: LD_INT 0
55556: PUSH
55557: EMPTY
55558: LIST
55559: LIST
55560: PUSH
55561: LD_INT 1
55563: NEG
55564: PUSH
55565: LD_INT 1
55567: NEG
55568: PUSH
55569: EMPTY
55570: LIST
55571: LIST
55572: PUSH
55573: LD_INT 1
55575: PUSH
55576: LD_INT 1
55578: NEG
55579: PUSH
55580: EMPTY
55581: LIST
55582: LIST
55583: PUSH
55584: LD_INT 2
55586: PUSH
55587: LD_INT 0
55589: PUSH
55590: EMPTY
55591: LIST
55592: LIST
55593: PUSH
55594: LD_INT 2
55596: PUSH
55597: LD_INT 1
55599: PUSH
55600: EMPTY
55601: LIST
55602: LIST
55603: PUSH
55604: LD_INT 2
55606: PUSH
55607: LD_INT 2
55609: PUSH
55610: EMPTY
55611: LIST
55612: LIST
55613: PUSH
55614: LD_INT 1
55616: PUSH
55617: LD_INT 2
55619: PUSH
55620: EMPTY
55621: LIST
55622: LIST
55623: PUSH
55624: EMPTY
55625: LIST
55626: LIST
55627: LIST
55628: LIST
55629: LIST
55630: LIST
55631: LIST
55632: LIST
55633: LIST
55634: LIST
55635: LIST
55636: LIST
55637: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
55638: LD_ADDR_VAR 0 50
55642: PUSH
55643: LD_INT 0
55645: PUSH
55646: LD_INT 0
55648: PUSH
55649: EMPTY
55650: LIST
55651: LIST
55652: PUSH
55653: LD_INT 0
55655: PUSH
55656: LD_INT 1
55658: NEG
55659: PUSH
55660: EMPTY
55661: LIST
55662: LIST
55663: PUSH
55664: LD_INT 1
55666: PUSH
55667: LD_INT 0
55669: PUSH
55670: EMPTY
55671: LIST
55672: LIST
55673: PUSH
55674: LD_INT 1
55676: PUSH
55677: LD_INT 1
55679: PUSH
55680: EMPTY
55681: LIST
55682: LIST
55683: PUSH
55684: LD_INT 0
55686: PUSH
55687: LD_INT 1
55689: PUSH
55690: EMPTY
55691: LIST
55692: LIST
55693: PUSH
55694: LD_INT 1
55696: NEG
55697: PUSH
55698: LD_INT 0
55700: PUSH
55701: EMPTY
55702: LIST
55703: LIST
55704: PUSH
55705: LD_INT 1
55707: NEG
55708: PUSH
55709: LD_INT 1
55711: NEG
55712: PUSH
55713: EMPTY
55714: LIST
55715: LIST
55716: PUSH
55717: LD_INT 2
55719: PUSH
55720: LD_INT 1
55722: PUSH
55723: EMPTY
55724: LIST
55725: LIST
55726: PUSH
55727: LD_INT 2
55729: PUSH
55730: LD_INT 2
55732: PUSH
55733: EMPTY
55734: LIST
55735: LIST
55736: PUSH
55737: LD_INT 1
55739: PUSH
55740: LD_INT 2
55742: PUSH
55743: EMPTY
55744: LIST
55745: LIST
55746: PUSH
55747: LD_INT 0
55749: PUSH
55750: LD_INT 2
55752: PUSH
55753: EMPTY
55754: LIST
55755: LIST
55756: PUSH
55757: LD_INT 1
55759: NEG
55760: PUSH
55761: LD_INT 1
55763: PUSH
55764: EMPTY
55765: LIST
55766: LIST
55767: PUSH
55768: EMPTY
55769: LIST
55770: LIST
55771: LIST
55772: LIST
55773: LIST
55774: LIST
55775: LIST
55776: LIST
55777: LIST
55778: LIST
55779: LIST
55780: LIST
55781: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
55782: LD_ADDR_VAR 0 51
55786: PUSH
55787: LD_INT 0
55789: PUSH
55790: LD_INT 0
55792: PUSH
55793: EMPTY
55794: LIST
55795: LIST
55796: PUSH
55797: LD_INT 0
55799: PUSH
55800: LD_INT 1
55802: NEG
55803: PUSH
55804: EMPTY
55805: LIST
55806: LIST
55807: PUSH
55808: LD_INT 1
55810: PUSH
55811: LD_INT 0
55813: PUSH
55814: EMPTY
55815: LIST
55816: LIST
55817: PUSH
55818: LD_INT 1
55820: PUSH
55821: LD_INT 1
55823: PUSH
55824: EMPTY
55825: LIST
55826: LIST
55827: PUSH
55828: LD_INT 0
55830: PUSH
55831: LD_INT 1
55833: PUSH
55834: EMPTY
55835: LIST
55836: LIST
55837: PUSH
55838: LD_INT 1
55840: NEG
55841: PUSH
55842: LD_INT 0
55844: PUSH
55845: EMPTY
55846: LIST
55847: LIST
55848: PUSH
55849: LD_INT 1
55851: NEG
55852: PUSH
55853: LD_INT 1
55855: NEG
55856: PUSH
55857: EMPTY
55858: LIST
55859: LIST
55860: PUSH
55861: LD_INT 1
55863: PUSH
55864: LD_INT 2
55866: PUSH
55867: EMPTY
55868: LIST
55869: LIST
55870: PUSH
55871: LD_INT 0
55873: PUSH
55874: LD_INT 2
55876: PUSH
55877: EMPTY
55878: LIST
55879: LIST
55880: PUSH
55881: LD_INT 1
55883: NEG
55884: PUSH
55885: LD_INT 1
55887: PUSH
55888: EMPTY
55889: LIST
55890: LIST
55891: PUSH
55892: LD_INT 2
55894: NEG
55895: PUSH
55896: LD_INT 0
55898: PUSH
55899: EMPTY
55900: LIST
55901: LIST
55902: PUSH
55903: LD_INT 2
55905: NEG
55906: PUSH
55907: LD_INT 1
55909: NEG
55910: PUSH
55911: EMPTY
55912: LIST
55913: LIST
55914: PUSH
55915: EMPTY
55916: LIST
55917: LIST
55918: LIST
55919: LIST
55920: LIST
55921: LIST
55922: LIST
55923: LIST
55924: LIST
55925: LIST
55926: LIST
55927: LIST
55928: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55929: LD_ADDR_VAR 0 52
55933: PUSH
55934: LD_INT 0
55936: PUSH
55937: LD_INT 0
55939: PUSH
55940: EMPTY
55941: LIST
55942: LIST
55943: PUSH
55944: LD_INT 0
55946: PUSH
55947: LD_INT 1
55949: NEG
55950: PUSH
55951: EMPTY
55952: LIST
55953: LIST
55954: PUSH
55955: LD_INT 1
55957: PUSH
55958: LD_INT 0
55960: PUSH
55961: EMPTY
55962: LIST
55963: LIST
55964: PUSH
55965: LD_INT 1
55967: PUSH
55968: LD_INT 1
55970: PUSH
55971: EMPTY
55972: LIST
55973: LIST
55974: PUSH
55975: LD_INT 0
55977: PUSH
55978: LD_INT 1
55980: PUSH
55981: EMPTY
55982: LIST
55983: LIST
55984: PUSH
55985: LD_INT 1
55987: NEG
55988: PUSH
55989: LD_INT 0
55991: PUSH
55992: EMPTY
55993: LIST
55994: LIST
55995: PUSH
55996: LD_INT 1
55998: NEG
55999: PUSH
56000: LD_INT 1
56002: NEG
56003: PUSH
56004: EMPTY
56005: LIST
56006: LIST
56007: PUSH
56008: LD_INT 1
56010: NEG
56011: PUSH
56012: LD_INT 2
56014: NEG
56015: PUSH
56016: EMPTY
56017: LIST
56018: LIST
56019: PUSH
56020: LD_INT 1
56022: NEG
56023: PUSH
56024: LD_INT 1
56026: PUSH
56027: EMPTY
56028: LIST
56029: LIST
56030: PUSH
56031: LD_INT 2
56033: NEG
56034: PUSH
56035: LD_INT 0
56037: PUSH
56038: EMPTY
56039: LIST
56040: LIST
56041: PUSH
56042: LD_INT 2
56044: NEG
56045: PUSH
56046: LD_INT 1
56048: NEG
56049: PUSH
56050: EMPTY
56051: LIST
56052: LIST
56053: PUSH
56054: LD_INT 2
56056: NEG
56057: PUSH
56058: LD_INT 2
56060: NEG
56061: PUSH
56062: EMPTY
56063: LIST
56064: LIST
56065: PUSH
56066: EMPTY
56067: LIST
56068: LIST
56069: LIST
56070: LIST
56071: LIST
56072: LIST
56073: LIST
56074: LIST
56075: LIST
56076: LIST
56077: LIST
56078: LIST
56079: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56080: LD_ADDR_VAR 0 53
56084: PUSH
56085: LD_INT 0
56087: PUSH
56088: LD_INT 0
56090: PUSH
56091: EMPTY
56092: LIST
56093: LIST
56094: PUSH
56095: LD_INT 0
56097: PUSH
56098: LD_INT 1
56100: NEG
56101: PUSH
56102: EMPTY
56103: LIST
56104: LIST
56105: PUSH
56106: LD_INT 1
56108: PUSH
56109: LD_INT 0
56111: PUSH
56112: EMPTY
56113: LIST
56114: LIST
56115: PUSH
56116: LD_INT 1
56118: PUSH
56119: LD_INT 1
56121: PUSH
56122: EMPTY
56123: LIST
56124: LIST
56125: PUSH
56126: LD_INT 0
56128: PUSH
56129: LD_INT 1
56131: PUSH
56132: EMPTY
56133: LIST
56134: LIST
56135: PUSH
56136: LD_INT 1
56138: NEG
56139: PUSH
56140: LD_INT 0
56142: PUSH
56143: EMPTY
56144: LIST
56145: LIST
56146: PUSH
56147: LD_INT 1
56149: NEG
56150: PUSH
56151: LD_INT 1
56153: NEG
56154: PUSH
56155: EMPTY
56156: LIST
56157: LIST
56158: PUSH
56159: LD_INT 1
56161: NEG
56162: PUSH
56163: LD_INT 2
56165: NEG
56166: PUSH
56167: EMPTY
56168: LIST
56169: LIST
56170: PUSH
56171: LD_INT 0
56173: PUSH
56174: LD_INT 2
56176: NEG
56177: PUSH
56178: EMPTY
56179: LIST
56180: LIST
56181: PUSH
56182: LD_INT 1
56184: PUSH
56185: LD_INT 1
56187: NEG
56188: PUSH
56189: EMPTY
56190: LIST
56191: LIST
56192: PUSH
56193: LD_INT 2
56195: PUSH
56196: LD_INT 0
56198: PUSH
56199: EMPTY
56200: LIST
56201: LIST
56202: PUSH
56203: LD_INT 2
56205: PUSH
56206: LD_INT 1
56208: PUSH
56209: EMPTY
56210: LIST
56211: LIST
56212: PUSH
56213: LD_INT 2
56215: PUSH
56216: LD_INT 2
56218: PUSH
56219: EMPTY
56220: LIST
56221: LIST
56222: PUSH
56223: LD_INT 1
56225: PUSH
56226: LD_INT 2
56228: PUSH
56229: EMPTY
56230: LIST
56231: LIST
56232: PUSH
56233: LD_INT 0
56235: PUSH
56236: LD_INT 2
56238: PUSH
56239: EMPTY
56240: LIST
56241: LIST
56242: PUSH
56243: LD_INT 1
56245: NEG
56246: PUSH
56247: LD_INT 1
56249: PUSH
56250: EMPTY
56251: LIST
56252: LIST
56253: PUSH
56254: LD_INT 2
56256: NEG
56257: PUSH
56258: LD_INT 0
56260: PUSH
56261: EMPTY
56262: LIST
56263: LIST
56264: PUSH
56265: LD_INT 2
56267: NEG
56268: PUSH
56269: LD_INT 1
56271: NEG
56272: PUSH
56273: EMPTY
56274: LIST
56275: LIST
56276: PUSH
56277: LD_INT 2
56279: NEG
56280: PUSH
56281: LD_INT 2
56283: NEG
56284: PUSH
56285: EMPTY
56286: LIST
56287: LIST
56288: PUSH
56289: EMPTY
56290: LIST
56291: LIST
56292: LIST
56293: LIST
56294: LIST
56295: LIST
56296: LIST
56297: LIST
56298: LIST
56299: LIST
56300: LIST
56301: LIST
56302: LIST
56303: LIST
56304: LIST
56305: LIST
56306: LIST
56307: LIST
56308: LIST
56309: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56310: LD_ADDR_VAR 0 54
56314: PUSH
56315: LD_INT 0
56317: PUSH
56318: LD_INT 0
56320: PUSH
56321: EMPTY
56322: LIST
56323: LIST
56324: PUSH
56325: LD_INT 0
56327: PUSH
56328: LD_INT 1
56330: NEG
56331: PUSH
56332: EMPTY
56333: LIST
56334: LIST
56335: PUSH
56336: LD_INT 1
56338: PUSH
56339: LD_INT 0
56341: PUSH
56342: EMPTY
56343: LIST
56344: LIST
56345: PUSH
56346: LD_INT 1
56348: PUSH
56349: LD_INT 1
56351: PUSH
56352: EMPTY
56353: LIST
56354: LIST
56355: PUSH
56356: LD_INT 0
56358: PUSH
56359: LD_INT 1
56361: PUSH
56362: EMPTY
56363: LIST
56364: LIST
56365: PUSH
56366: LD_INT 1
56368: NEG
56369: PUSH
56370: LD_INT 0
56372: PUSH
56373: EMPTY
56374: LIST
56375: LIST
56376: PUSH
56377: LD_INT 1
56379: NEG
56380: PUSH
56381: LD_INT 1
56383: NEG
56384: PUSH
56385: EMPTY
56386: LIST
56387: LIST
56388: PUSH
56389: LD_INT 1
56391: NEG
56392: PUSH
56393: LD_INT 2
56395: NEG
56396: PUSH
56397: EMPTY
56398: LIST
56399: LIST
56400: PUSH
56401: LD_INT 0
56403: PUSH
56404: LD_INT 2
56406: NEG
56407: PUSH
56408: EMPTY
56409: LIST
56410: LIST
56411: PUSH
56412: LD_INT 1
56414: PUSH
56415: LD_INT 1
56417: NEG
56418: PUSH
56419: EMPTY
56420: LIST
56421: LIST
56422: PUSH
56423: LD_INT 2
56425: PUSH
56426: LD_INT 0
56428: PUSH
56429: EMPTY
56430: LIST
56431: LIST
56432: PUSH
56433: LD_INT 2
56435: PUSH
56436: LD_INT 1
56438: PUSH
56439: EMPTY
56440: LIST
56441: LIST
56442: PUSH
56443: LD_INT 2
56445: PUSH
56446: LD_INT 2
56448: PUSH
56449: EMPTY
56450: LIST
56451: LIST
56452: PUSH
56453: LD_INT 1
56455: PUSH
56456: LD_INT 2
56458: PUSH
56459: EMPTY
56460: LIST
56461: LIST
56462: PUSH
56463: LD_INT 0
56465: PUSH
56466: LD_INT 2
56468: PUSH
56469: EMPTY
56470: LIST
56471: LIST
56472: PUSH
56473: LD_INT 1
56475: NEG
56476: PUSH
56477: LD_INT 1
56479: PUSH
56480: EMPTY
56481: LIST
56482: LIST
56483: PUSH
56484: LD_INT 2
56486: NEG
56487: PUSH
56488: LD_INT 0
56490: PUSH
56491: EMPTY
56492: LIST
56493: LIST
56494: PUSH
56495: LD_INT 2
56497: NEG
56498: PUSH
56499: LD_INT 1
56501: NEG
56502: PUSH
56503: EMPTY
56504: LIST
56505: LIST
56506: PUSH
56507: LD_INT 2
56509: NEG
56510: PUSH
56511: LD_INT 2
56513: NEG
56514: PUSH
56515: EMPTY
56516: LIST
56517: LIST
56518: PUSH
56519: EMPTY
56520: LIST
56521: LIST
56522: LIST
56523: LIST
56524: LIST
56525: LIST
56526: LIST
56527: LIST
56528: LIST
56529: LIST
56530: LIST
56531: LIST
56532: LIST
56533: LIST
56534: LIST
56535: LIST
56536: LIST
56537: LIST
56538: LIST
56539: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56540: LD_ADDR_VAR 0 55
56544: PUSH
56545: LD_INT 0
56547: PUSH
56548: LD_INT 0
56550: PUSH
56551: EMPTY
56552: LIST
56553: LIST
56554: PUSH
56555: LD_INT 0
56557: PUSH
56558: LD_INT 1
56560: NEG
56561: PUSH
56562: EMPTY
56563: LIST
56564: LIST
56565: PUSH
56566: LD_INT 1
56568: PUSH
56569: LD_INT 0
56571: PUSH
56572: EMPTY
56573: LIST
56574: LIST
56575: PUSH
56576: LD_INT 1
56578: PUSH
56579: LD_INT 1
56581: PUSH
56582: EMPTY
56583: LIST
56584: LIST
56585: PUSH
56586: LD_INT 0
56588: PUSH
56589: LD_INT 1
56591: PUSH
56592: EMPTY
56593: LIST
56594: LIST
56595: PUSH
56596: LD_INT 1
56598: NEG
56599: PUSH
56600: LD_INT 0
56602: PUSH
56603: EMPTY
56604: LIST
56605: LIST
56606: PUSH
56607: LD_INT 1
56609: NEG
56610: PUSH
56611: LD_INT 1
56613: NEG
56614: PUSH
56615: EMPTY
56616: LIST
56617: LIST
56618: PUSH
56619: LD_INT 1
56621: NEG
56622: PUSH
56623: LD_INT 2
56625: NEG
56626: PUSH
56627: EMPTY
56628: LIST
56629: LIST
56630: PUSH
56631: LD_INT 0
56633: PUSH
56634: LD_INT 2
56636: NEG
56637: PUSH
56638: EMPTY
56639: LIST
56640: LIST
56641: PUSH
56642: LD_INT 1
56644: PUSH
56645: LD_INT 1
56647: NEG
56648: PUSH
56649: EMPTY
56650: LIST
56651: LIST
56652: PUSH
56653: LD_INT 2
56655: PUSH
56656: LD_INT 0
56658: PUSH
56659: EMPTY
56660: LIST
56661: LIST
56662: PUSH
56663: LD_INT 2
56665: PUSH
56666: LD_INT 1
56668: PUSH
56669: EMPTY
56670: LIST
56671: LIST
56672: PUSH
56673: LD_INT 2
56675: PUSH
56676: LD_INT 2
56678: PUSH
56679: EMPTY
56680: LIST
56681: LIST
56682: PUSH
56683: LD_INT 1
56685: PUSH
56686: LD_INT 2
56688: PUSH
56689: EMPTY
56690: LIST
56691: LIST
56692: PUSH
56693: LD_INT 0
56695: PUSH
56696: LD_INT 2
56698: PUSH
56699: EMPTY
56700: LIST
56701: LIST
56702: PUSH
56703: LD_INT 1
56705: NEG
56706: PUSH
56707: LD_INT 1
56709: PUSH
56710: EMPTY
56711: LIST
56712: LIST
56713: PUSH
56714: LD_INT 2
56716: NEG
56717: PUSH
56718: LD_INT 0
56720: PUSH
56721: EMPTY
56722: LIST
56723: LIST
56724: PUSH
56725: LD_INT 2
56727: NEG
56728: PUSH
56729: LD_INT 1
56731: NEG
56732: PUSH
56733: EMPTY
56734: LIST
56735: LIST
56736: PUSH
56737: LD_INT 2
56739: NEG
56740: PUSH
56741: LD_INT 2
56743: NEG
56744: PUSH
56745: EMPTY
56746: LIST
56747: LIST
56748: PUSH
56749: EMPTY
56750: LIST
56751: LIST
56752: LIST
56753: LIST
56754: LIST
56755: LIST
56756: LIST
56757: LIST
56758: LIST
56759: LIST
56760: LIST
56761: LIST
56762: LIST
56763: LIST
56764: LIST
56765: LIST
56766: LIST
56767: LIST
56768: LIST
56769: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56770: LD_ADDR_VAR 0 56
56774: PUSH
56775: LD_INT 0
56777: PUSH
56778: LD_INT 0
56780: PUSH
56781: EMPTY
56782: LIST
56783: LIST
56784: PUSH
56785: LD_INT 0
56787: PUSH
56788: LD_INT 1
56790: NEG
56791: PUSH
56792: EMPTY
56793: LIST
56794: LIST
56795: PUSH
56796: LD_INT 1
56798: PUSH
56799: LD_INT 0
56801: PUSH
56802: EMPTY
56803: LIST
56804: LIST
56805: PUSH
56806: LD_INT 1
56808: PUSH
56809: LD_INT 1
56811: PUSH
56812: EMPTY
56813: LIST
56814: LIST
56815: PUSH
56816: LD_INT 0
56818: PUSH
56819: LD_INT 1
56821: PUSH
56822: EMPTY
56823: LIST
56824: LIST
56825: PUSH
56826: LD_INT 1
56828: NEG
56829: PUSH
56830: LD_INT 0
56832: PUSH
56833: EMPTY
56834: LIST
56835: LIST
56836: PUSH
56837: LD_INT 1
56839: NEG
56840: PUSH
56841: LD_INT 1
56843: NEG
56844: PUSH
56845: EMPTY
56846: LIST
56847: LIST
56848: PUSH
56849: LD_INT 1
56851: NEG
56852: PUSH
56853: LD_INT 2
56855: NEG
56856: PUSH
56857: EMPTY
56858: LIST
56859: LIST
56860: PUSH
56861: LD_INT 0
56863: PUSH
56864: LD_INT 2
56866: NEG
56867: PUSH
56868: EMPTY
56869: LIST
56870: LIST
56871: PUSH
56872: LD_INT 1
56874: PUSH
56875: LD_INT 1
56877: NEG
56878: PUSH
56879: EMPTY
56880: LIST
56881: LIST
56882: PUSH
56883: LD_INT 2
56885: PUSH
56886: LD_INT 0
56888: PUSH
56889: EMPTY
56890: LIST
56891: LIST
56892: PUSH
56893: LD_INT 2
56895: PUSH
56896: LD_INT 1
56898: PUSH
56899: EMPTY
56900: LIST
56901: LIST
56902: PUSH
56903: LD_INT 2
56905: PUSH
56906: LD_INT 2
56908: PUSH
56909: EMPTY
56910: LIST
56911: LIST
56912: PUSH
56913: LD_INT 1
56915: PUSH
56916: LD_INT 2
56918: PUSH
56919: EMPTY
56920: LIST
56921: LIST
56922: PUSH
56923: LD_INT 0
56925: PUSH
56926: LD_INT 2
56928: PUSH
56929: EMPTY
56930: LIST
56931: LIST
56932: PUSH
56933: LD_INT 1
56935: NEG
56936: PUSH
56937: LD_INT 1
56939: PUSH
56940: EMPTY
56941: LIST
56942: LIST
56943: PUSH
56944: LD_INT 2
56946: NEG
56947: PUSH
56948: LD_INT 0
56950: PUSH
56951: EMPTY
56952: LIST
56953: LIST
56954: PUSH
56955: LD_INT 2
56957: NEG
56958: PUSH
56959: LD_INT 1
56961: NEG
56962: PUSH
56963: EMPTY
56964: LIST
56965: LIST
56966: PUSH
56967: LD_INT 2
56969: NEG
56970: PUSH
56971: LD_INT 2
56973: NEG
56974: PUSH
56975: EMPTY
56976: LIST
56977: LIST
56978: PUSH
56979: EMPTY
56980: LIST
56981: LIST
56982: LIST
56983: LIST
56984: LIST
56985: LIST
56986: LIST
56987: LIST
56988: LIST
56989: LIST
56990: LIST
56991: LIST
56992: LIST
56993: LIST
56994: LIST
56995: LIST
56996: LIST
56997: LIST
56998: LIST
56999: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57000: LD_ADDR_VAR 0 57
57004: PUSH
57005: LD_INT 0
57007: PUSH
57008: LD_INT 0
57010: PUSH
57011: EMPTY
57012: LIST
57013: LIST
57014: PUSH
57015: LD_INT 0
57017: PUSH
57018: LD_INT 1
57020: NEG
57021: PUSH
57022: EMPTY
57023: LIST
57024: LIST
57025: PUSH
57026: LD_INT 1
57028: PUSH
57029: LD_INT 0
57031: PUSH
57032: EMPTY
57033: LIST
57034: LIST
57035: PUSH
57036: LD_INT 1
57038: PUSH
57039: LD_INT 1
57041: PUSH
57042: EMPTY
57043: LIST
57044: LIST
57045: PUSH
57046: LD_INT 0
57048: PUSH
57049: LD_INT 1
57051: PUSH
57052: EMPTY
57053: LIST
57054: LIST
57055: PUSH
57056: LD_INT 1
57058: NEG
57059: PUSH
57060: LD_INT 0
57062: PUSH
57063: EMPTY
57064: LIST
57065: LIST
57066: PUSH
57067: LD_INT 1
57069: NEG
57070: PUSH
57071: LD_INT 1
57073: NEG
57074: PUSH
57075: EMPTY
57076: LIST
57077: LIST
57078: PUSH
57079: LD_INT 1
57081: NEG
57082: PUSH
57083: LD_INT 2
57085: NEG
57086: PUSH
57087: EMPTY
57088: LIST
57089: LIST
57090: PUSH
57091: LD_INT 0
57093: PUSH
57094: LD_INT 2
57096: NEG
57097: PUSH
57098: EMPTY
57099: LIST
57100: LIST
57101: PUSH
57102: LD_INT 1
57104: PUSH
57105: LD_INT 1
57107: NEG
57108: PUSH
57109: EMPTY
57110: LIST
57111: LIST
57112: PUSH
57113: LD_INT 2
57115: PUSH
57116: LD_INT 0
57118: PUSH
57119: EMPTY
57120: LIST
57121: LIST
57122: PUSH
57123: LD_INT 2
57125: PUSH
57126: LD_INT 1
57128: PUSH
57129: EMPTY
57130: LIST
57131: LIST
57132: PUSH
57133: LD_INT 2
57135: PUSH
57136: LD_INT 2
57138: PUSH
57139: EMPTY
57140: LIST
57141: LIST
57142: PUSH
57143: LD_INT 1
57145: PUSH
57146: LD_INT 2
57148: PUSH
57149: EMPTY
57150: LIST
57151: LIST
57152: PUSH
57153: LD_INT 0
57155: PUSH
57156: LD_INT 2
57158: PUSH
57159: EMPTY
57160: LIST
57161: LIST
57162: PUSH
57163: LD_INT 1
57165: NEG
57166: PUSH
57167: LD_INT 1
57169: PUSH
57170: EMPTY
57171: LIST
57172: LIST
57173: PUSH
57174: LD_INT 2
57176: NEG
57177: PUSH
57178: LD_INT 0
57180: PUSH
57181: EMPTY
57182: LIST
57183: LIST
57184: PUSH
57185: LD_INT 2
57187: NEG
57188: PUSH
57189: LD_INT 1
57191: NEG
57192: PUSH
57193: EMPTY
57194: LIST
57195: LIST
57196: PUSH
57197: LD_INT 2
57199: NEG
57200: PUSH
57201: LD_INT 2
57203: NEG
57204: PUSH
57205: EMPTY
57206: LIST
57207: LIST
57208: PUSH
57209: EMPTY
57210: LIST
57211: LIST
57212: LIST
57213: LIST
57214: LIST
57215: LIST
57216: LIST
57217: LIST
57218: LIST
57219: LIST
57220: LIST
57221: LIST
57222: LIST
57223: LIST
57224: LIST
57225: LIST
57226: LIST
57227: LIST
57228: LIST
57229: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57230: LD_ADDR_VAR 0 58
57234: PUSH
57235: LD_INT 0
57237: PUSH
57238: LD_INT 0
57240: PUSH
57241: EMPTY
57242: LIST
57243: LIST
57244: PUSH
57245: LD_INT 0
57247: PUSH
57248: LD_INT 1
57250: NEG
57251: PUSH
57252: EMPTY
57253: LIST
57254: LIST
57255: PUSH
57256: LD_INT 1
57258: PUSH
57259: LD_INT 0
57261: PUSH
57262: EMPTY
57263: LIST
57264: LIST
57265: PUSH
57266: LD_INT 1
57268: PUSH
57269: LD_INT 1
57271: PUSH
57272: EMPTY
57273: LIST
57274: LIST
57275: PUSH
57276: LD_INT 0
57278: PUSH
57279: LD_INT 1
57281: PUSH
57282: EMPTY
57283: LIST
57284: LIST
57285: PUSH
57286: LD_INT 1
57288: NEG
57289: PUSH
57290: LD_INT 0
57292: PUSH
57293: EMPTY
57294: LIST
57295: LIST
57296: PUSH
57297: LD_INT 1
57299: NEG
57300: PUSH
57301: LD_INT 1
57303: NEG
57304: PUSH
57305: EMPTY
57306: LIST
57307: LIST
57308: PUSH
57309: LD_INT 1
57311: NEG
57312: PUSH
57313: LD_INT 2
57315: NEG
57316: PUSH
57317: EMPTY
57318: LIST
57319: LIST
57320: PUSH
57321: LD_INT 0
57323: PUSH
57324: LD_INT 2
57326: NEG
57327: PUSH
57328: EMPTY
57329: LIST
57330: LIST
57331: PUSH
57332: LD_INT 1
57334: PUSH
57335: LD_INT 1
57337: NEG
57338: PUSH
57339: EMPTY
57340: LIST
57341: LIST
57342: PUSH
57343: LD_INT 2
57345: PUSH
57346: LD_INT 0
57348: PUSH
57349: EMPTY
57350: LIST
57351: LIST
57352: PUSH
57353: LD_INT 2
57355: PUSH
57356: LD_INT 1
57358: PUSH
57359: EMPTY
57360: LIST
57361: LIST
57362: PUSH
57363: LD_INT 2
57365: PUSH
57366: LD_INT 2
57368: PUSH
57369: EMPTY
57370: LIST
57371: LIST
57372: PUSH
57373: LD_INT 1
57375: PUSH
57376: LD_INT 2
57378: PUSH
57379: EMPTY
57380: LIST
57381: LIST
57382: PUSH
57383: LD_INT 0
57385: PUSH
57386: LD_INT 2
57388: PUSH
57389: EMPTY
57390: LIST
57391: LIST
57392: PUSH
57393: LD_INT 1
57395: NEG
57396: PUSH
57397: LD_INT 1
57399: PUSH
57400: EMPTY
57401: LIST
57402: LIST
57403: PUSH
57404: LD_INT 2
57406: NEG
57407: PUSH
57408: LD_INT 0
57410: PUSH
57411: EMPTY
57412: LIST
57413: LIST
57414: PUSH
57415: LD_INT 2
57417: NEG
57418: PUSH
57419: LD_INT 1
57421: NEG
57422: PUSH
57423: EMPTY
57424: LIST
57425: LIST
57426: PUSH
57427: LD_INT 2
57429: NEG
57430: PUSH
57431: LD_INT 2
57433: NEG
57434: PUSH
57435: EMPTY
57436: LIST
57437: LIST
57438: PUSH
57439: EMPTY
57440: LIST
57441: LIST
57442: LIST
57443: LIST
57444: LIST
57445: LIST
57446: LIST
57447: LIST
57448: LIST
57449: LIST
57450: LIST
57451: LIST
57452: LIST
57453: LIST
57454: LIST
57455: LIST
57456: LIST
57457: LIST
57458: LIST
57459: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57460: LD_ADDR_VAR 0 59
57464: PUSH
57465: LD_INT 0
57467: PUSH
57468: LD_INT 0
57470: PUSH
57471: EMPTY
57472: LIST
57473: LIST
57474: PUSH
57475: LD_INT 0
57477: PUSH
57478: LD_INT 1
57480: NEG
57481: PUSH
57482: EMPTY
57483: LIST
57484: LIST
57485: PUSH
57486: LD_INT 1
57488: PUSH
57489: LD_INT 0
57491: PUSH
57492: EMPTY
57493: LIST
57494: LIST
57495: PUSH
57496: LD_INT 1
57498: PUSH
57499: LD_INT 1
57501: PUSH
57502: EMPTY
57503: LIST
57504: LIST
57505: PUSH
57506: LD_INT 0
57508: PUSH
57509: LD_INT 1
57511: PUSH
57512: EMPTY
57513: LIST
57514: LIST
57515: PUSH
57516: LD_INT 1
57518: NEG
57519: PUSH
57520: LD_INT 0
57522: PUSH
57523: EMPTY
57524: LIST
57525: LIST
57526: PUSH
57527: LD_INT 1
57529: NEG
57530: PUSH
57531: LD_INT 1
57533: NEG
57534: PUSH
57535: EMPTY
57536: LIST
57537: LIST
57538: PUSH
57539: EMPTY
57540: LIST
57541: LIST
57542: LIST
57543: LIST
57544: LIST
57545: LIST
57546: LIST
57547: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57548: LD_ADDR_VAR 0 60
57552: PUSH
57553: LD_INT 0
57555: PUSH
57556: LD_INT 0
57558: PUSH
57559: EMPTY
57560: LIST
57561: LIST
57562: PUSH
57563: LD_INT 0
57565: PUSH
57566: LD_INT 1
57568: NEG
57569: PUSH
57570: EMPTY
57571: LIST
57572: LIST
57573: PUSH
57574: LD_INT 1
57576: PUSH
57577: LD_INT 0
57579: PUSH
57580: EMPTY
57581: LIST
57582: LIST
57583: PUSH
57584: LD_INT 1
57586: PUSH
57587: LD_INT 1
57589: PUSH
57590: EMPTY
57591: LIST
57592: LIST
57593: PUSH
57594: LD_INT 0
57596: PUSH
57597: LD_INT 1
57599: PUSH
57600: EMPTY
57601: LIST
57602: LIST
57603: PUSH
57604: LD_INT 1
57606: NEG
57607: PUSH
57608: LD_INT 0
57610: PUSH
57611: EMPTY
57612: LIST
57613: LIST
57614: PUSH
57615: LD_INT 1
57617: NEG
57618: PUSH
57619: LD_INT 1
57621: NEG
57622: PUSH
57623: EMPTY
57624: LIST
57625: LIST
57626: PUSH
57627: EMPTY
57628: LIST
57629: LIST
57630: LIST
57631: LIST
57632: LIST
57633: LIST
57634: LIST
57635: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57636: LD_ADDR_VAR 0 61
57640: PUSH
57641: LD_INT 0
57643: PUSH
57644: LD_INT 0
57646: PUSH
57647: EMPTY
57648: LIST
57649: LIST
57650: PUSH
57651: LD_INT 0
57653: PUSH
57654: LD_INT 1
57656: NEG
57657: PUSH
57658: EMPTY
57659: LIST
57660: LIST
57661: PUSH
57662: LD_INT 1
57664: PUSH
57665: LD_INT 0
57667: PUSH
57668: EMPTY
57669: LIST
57670: LIST
57671: PUSH
57672: LD_INT 1
57674: PUSH
57675: LD_INT 1
57677: PUSH
57678: EMPTY
57679: LIST
57680: LIST
57681: PUSH
57682: LD_INT 0
57684: PUSH
57685: LD_INT 1
57687: PUSH
57688: EMPTY
57689: LIST
57690: LIST
57691: PUSH
57692: LD_INT 1
57694: NEG
57695: PUSH
57696: LD_INT 0
57698: PUSH
57699: EMPTY
57700: LIST
57701: LIST
57702: PUSH
57703: LD_INT 1
57705: NEG
57706: PUSH
57707: LD_INT 1
57709: NEG
57710: PUSH
57711: EMPTY
57712: LIST
57713: LIST
57714: PUSH
57715: EMPTY
57716: LIST
57717: LIST
57718: LIST
57719: LIST
57720: LIST
57721: LIST
57722: LIST
57723: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57724: LD_ADDR_VAR 0 62
57728: PUSH
57729: LD_INT 0
57731: PUSH
57732: LD_INT 0
57734: PUSH
57735: EMPTY
57736: LIST
57737: LIST
57738: PUSH
57739: LD_INT 0
57741: PUSH
57742: LD_INT 1
57744: NEG
57745: PUSH
57746: EMPTY
57747: LIST
57748: LIST
57749: PUSH
57750: LD_INT 1
57752: PUSH
57753: LD_INT 0
57755: PUSH
57756: EMPTY
57757: LIST
57758: LIST
57759: PUSH
57760: LD_INT 1
57762: PUSH
57763: LD_INT 1
57765: PUSH
57766: EMPTY
57767: LIST
57768: LIST
57769: PUSH
57770: LD_INT 0
57772: PUSH
57773: LD_INT 1
57775: PUSH
57776: EMPTY
57777: LIST
57778: LIST
57779: PUSH
57780: LD_INT 1
57782: NEG
57783: PUSH
57784: LD_INT 0
57786: PUSH
57787: EMPTY
57788: LIST
57789: LIST
57790: PUSH
57791: LD_INT 1
57793: NEG
57794: PUSH
57795: LD_INT 1
57797: NEG
57798: PUSH
57799: EMPTY
57800: LIST
57801: LIST
57802: PUSH
57803: EMPTY
57804: LIST
57805: LIST
57806: LIST
57807: LIST
57808: LIST
57809: LIST
57810: LIST
57811: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57812: LD_ADDR_VAR 0 63
57816: PUSH
57817: LD_INT 0
57819: PUSH
57820: LD_INT 0
57822: PUSH
57823: EMPTY
57824: LIST
57825: LIST
57826: PUSH
57827: LD_INT 0
57829: PUSH
57830: LD_INT 1
57832: NEG
57833: PUSH
57834: EMPTY
57835: LIST
57836: LIST
57837: PUSH
57838: LD_INT 1
57840: PUSH
57841: LD_INT 0
57843: PUSH
57844: EMPTY
57845: LIST
57846: LIST
57847: PUSH
57848: LD_INT 1
57850: PUSH
57851: LD_INT 1
57853: PUSH
57854: EMPTY
57855: LIST
57856: LIST
57857: PUSH
57858: LD_INT 0
57860: PUSH
57861: LD_INT 1
57863: PUSH
57864: EMPTY
57865: LIST
57866: LIST
57867: PUSH
57868: LD_INT 1
57870: NEG
57871: PUSH
57872: LD_INT 0
57874: PUSH
57875: EMPTY
57876: LIST
57877: LIST
57878: PUSH
57879: LD_INT 1
57881: NEG
57882: PUSH
57883: LD_INT 1
57885: NEG
57886: PUSH
57887: EMPTY
57888: LIST
57889: LIST
57890: PUSH
57891: EMPTY
57892: LIST
57893: LIST
57894: LIST
57895: LIST
57896: LIST
57897: LIST
57898: LIST
57899: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57900: LD_ADDR_VAR 0 64
57904: PUSH
57905: LD_INT 0
57907: PUSH
57908: LD_INT 0
57910: PUSH
57911: EMPTY
57912: LIST
57913: LIST
57914: PUSH
57915: LD_INT 0
57917: PUSH
57918: LD_INT 1
57920: NEG
57921: PUSH
57922: EMPTY
57923: LIST
57924: LIST
57925: PUSH
57926: LD_INT 1
57928: PUSH
57929: LD_INT 0
57931: PUSH
57932: EMPTY
57933: LIST
57934: LIST
57935: PUSH
57936: LD_INT 1
57938: PUSH
57939: LD_INT 1
57941: PUSH
57942: EMPTY
57943: LIST
57944: LIST
57945: PUSH
57946: LD_INT 0
57948: PUSH
57949: LD_INT 1
57951: PUSH
57952: EMPTY
57953: LIST
57954: LIST
57955: PUSH
57956: LD_INT 1
57958: NEG
57959: PUSH
57960: LD_INT 0
57962: PUSH
57963: EMPTY
57964: LIST
57965: LIST
57966: PUSH
57967: LD_INT 1
57969: NEG
57970: PUSH
57971: LD_INT 1
57973: NEG
57974: PUSH
57975: EMPTY
57976: LIST
57977: LIST
57978: PUSH
57979: EMPTY
57980: LIST
57981: LIST
57982: LIST
57983: LIST
57984: LIST
57985: LIST
57986: LIST
57987: ST_TO_ADDR
// end ; 1 :
57988: GO 63885
57990: LD_INT 1
57992: DOUBLE
57993: EQUAL
57994: IFTRUE 57998
57996: GO 60621
57998: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57999: LD_ADDR_VAR 0 11
58003: PUSH
58004: LD_INT 1
58006: NEG
58007: PUSH
58008: LD_INT 3
58010: NEG
58011: PUSH
58012: EMPTY
58013: LIST
58014: LIST
58015: PUSH
58016: LD_INT 0
58018: PUSH
58019: LD_INT 3
58021: NEG
58022: PUSH
58023: EMPTY
58024: LIST
58025: LIST
58026: PUSH
58027: LD_INT 1
58029: PUSH
58030: LD_INT 2
58032: NEG
58033: PUSH
58034: EMPTY
58035: LIST
58036: LIST
58037: PUSH
58038: EMPTY
58039: LIST
58040: LIST
58041: LIST
58042: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58043: LD_ADDR_VAR 0 12
58047: PUSH
58048: LD_INT 2
58050: PUSH
58051: LD_INT 1
58053: NEG
58054: PUSH
58055: EMPTY
58056: LIST
58057: LIST
58058: PUSH
58059: LD_INT 3
58061: PUSH
58062: LD_INT 0
58064: PUSH
58065: EMPTY
58066: LIST
58067: LIST
58068: PUSH
58069: LD_INT 3
58071: PUSH
58072: LD_INT 1
58074: PUSH
58075: EMPTY
58076: LIST
58077: LIST
58078: PUSH
58079: EMPTY
58080: LIST
58081: LIST
58082: LIST
58083: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58084: LD_ADDR_VAR 0 13
58088: PUSH
58089: LD_INT 3
58091: PUSH
58092: LD_INT 2
58094: PUSH
58095: EMPTY
58096: LIST
58097: LIST
58098: PUSH
58099: LD_INT 3
58101: PUSH
58102: LD_INT 3
58104: PUSH
58105: EMPTY
58106: LIST
58107: LIST
58108: PUSH
58109: LD_INT 2
58111: PUSH
58112: LD_INT 3
58114: PUSH
58115: EMPTY
58116: LIST
58117: LIST
58118: PUSH
58119: EMPTY
58120: LIST
58121: LIST
58122: LIST
58123: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58124: LD_ADDR_VAR 0 14
58128: PUSH
58129: LD_INT 1
58131: PUSH
58132: LD_INT 3
58134: PUSH
58135: EMPTY
58136: LIST
58137: LIST
58138: PUSH
58139: LD_INT 0
58141: PUSH
58142: LD_INT 3
58144: PUSH
58145: EMPTY
58146: LIST
58147: LIST
58148: PUSH
58149: LD_INT 1
58151: NEG
58152: PUSH
58153: LD_INT 2
58155: PUSH
58156: EMPTY
58157: LIST
58158: LIST
58159: PUSH
58160: EMPTY
58161: LIST
58162: LIST
58163: LIST
58164: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58165: LD_ADDR_VAR 0 15
58169: PUSH
58170: LD_INT 2
58172: NEG
58173: PUSH
58174: LD_INT 1
58176: PUSH
58177: EMPTY
58178: LIST
58179: LIST
58180: PUSH
58181: LD_INT 3
58183: NEG
58184: PUSH
58185: LD_INT 0
58187: PUSH
58188: EMPTY
58189: LIST
58190: LIST
58191: PUSH
58192: LD_INT 3
58194: NEG
58195: PUSH
58196: LD_INT 1
58198: NEG
58199: PUSH
58200: EMPTY
58201: LIST
58202: LIST
58203: PUSH
58204: EMPTY
58205: LIST
58206: LIST
58207: LIST
58208: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58209: LD_ADDR_VAR 0 16
58213: PUSH
58214: LD_INT 2
58216: NEG
58217: PUSH
58218: LD_INT 3
58220: NEG
58221: PUSH
58222: EMPTY
58223: LIST
58224: LIST
58225: PUSH
58226: LD_INT 3
58228: NEG
58229: PUSH
58230: LD_INT 2
58232: NEG
58233: PUSH
58234: EMPTY
58235: LIST
58236: LIST
58237: PUSH
58238: LD_INT 3
58240: NEG
58241: PUSH
58242: LD_INT 3
58244: NEG
58245: PUSH
58246: EMPTY
58247: LIST
58248: LIST
58249: PUSH
58250: EMPTY
58251: LIST
58252: LIST
58253: LIST
58254: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58255: LD_ADDR_VAR 0 17
58259: PUSH
58260: LD_INT 1
58262: NEG
58263: PUSH
58264: LD_INT 3
58266: NEG
58267: PUSH
58268: EMPTY
58269: LIST
58270: LIST
58271: PUSH
58272: LD_INT 0
58274: PUSH
58275: LD_INT 3
58277: NEG
58278: PUSH
58279: EMPTY
58280: LIST
58281: LIST
58282: PUSH
58283: LD_INT 1
58285: PUSH
58286: LD_INT 2
58288: NEG
58289: PUSH
58290: EMPTY
58291: LIST
58292: LIST
58293: PUSH
58294: EMPTY
58295: LIST
58296: LIST
58297: LIST
58298: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58299: LD_ADDR_VAR 0 18
58303: PUSH
58304: LD_INT 2
58306: PUSH
58307: LD_INT 1
58309: NEG
58310: PUSH
58311: EMPTY
58312: LIST
58313: LIST
58314: PUSH
58315: LD_INT 3
58317: PUSH
58318: LD_INT 0
58320: PUSH
58321: EMPTY
58322: LIST
58323: LIST
58324: PUSH
58325: LD_INT 3
58327: PUSH
58328: LD_INT 1
58330: PUSH
58331: EMPTY
58332: LIST
58333: LIST
58334: PUSH
58335: EMPTY
58336: LIST
58337: LIST
58338: LIST
58339: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58340: LD_ADDR_VAR 0 19
58344: PUSH
58345: LD_INT 3
58347: PUSH
58348: LD_INT 2
58350: PUSH
58351: EMPTY
58352: LIST
58353: LIST
58354: PUSH
58355: LD_INT 3
58357: PUSH
58358: LD_INT 3
58360: PUSH
58361: EMPTY
58362: LIST
58363: LIST
58364: PUSH
58365: LD_INT 2
58367: PUSH
58368: LD_INT 3
58370: PUSH
58371: EMPTY
58372: LIST
58373: LIST
58374: PUSH
58375: EMPTY
58376: LIST
58377: LIST
58378: LIST
58379: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58380: LD_ADDR_VAR 0 20
58384: PUSH
58385: LD_INT 1
58387: PUSH
58388: LD_INT 3
58390: PUSH
58391: EMPTY
58392: LIST
58393: LIST
58394: PUSH
58395: LD_INT 0
58397: PUSH
58398: LD_INT 3
58400: PUSH
58401: EMPTY
58402: LIST
58403: LIST
58404: PUSH
58405: LD_INT 1
58407: NEG
58408: PUSH
58409: LD_INT 2
58411: PUSH
58412: EMPTY
58413: LIST
58414: LIST
58415: PUSH
58416: EMPTY
58417: LIST
58418: LIST
58419: LIST
58420: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58421: LD_ADDR_VAR 0 21
58425: PUSH
58426: LD_INT 2
58428: NEG
58429: PUSH
58430: LD_INT 1
58432: PUSH
58433: EMPTY
58434: LIST
58435: LIST
58436: PUSH
58437: LD_INT 3
58439: NEG
58440: PUSH
58441: LD_INT 0
58443: PUSH
58444: EMPTY
58445: LIST
58446: LIST
58447: PUSH
58448: LD_INT 3
58450: NEG
58451: PUSH
58452: LD_INT 1
58454: NEG
58455: PUSH
58456: EMPTY
58457: LIST
58458: LIST
58459: PUSH
58460: EMPTY
58461: LIST
58462: LIST
58463: LIST
58464: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58465: LD_ADDR_VAR 0 22
58469: PUSH
58470: LD_INT 2
58472: NEG
58473: PUSH
58474: LD_INT 3
58476: NEG
58477: PUSH
58478: EMPTY
58479: LIST
58480: LIST
58481: PUSH
58482: LD_INT 3
58484: NEG
58485: PUSH
58486: LD_INT 2
58488: NEG
58489: PUSH
58490: EMPTY
58491: LIST
58492: LIST
58493: PUSH
58494: LD_INT 3
58496: NEG
58497: PUSH
58498: LD_INT 3
58500: NEG
58501: PUSH
58502: EMPTY
58503: LIST
58504: LIST
58505: PUSH
58506: EMPTY
58507: LIST
58508: LIST
58509: LIST
58510: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
58511: LD_ADDR_VAR 0 23
58515: PUSH
58516: LD_INT 0
58518: PUSH
58519: LD_INT 3
58521: NEG
58522: PUSH
58523: EMPTY
58524: LIST
58525: LIST
58526: PUSH
58527: LD_INT 1
58529: NEG
58530: PUSH
58531: LD_INT 4
58533: NEG
58534: PUSH
58535: EMPTY
58536: LIST
58537: LIST
58538: PUSH
58539: LD_INT 1
58541: PUSH
58542: LD_INT 3
58544: NEG
58545: PUSH
58546: EMPTY
58547: LIST
58548: LIST
58549: PUSH
58550: EMPTY
58551: LIST
58552: LIST
58553: LIST
58554: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
58555: LD_ADDR_VAR 0 24
58559: PUSH
58560: LD_INT 3
58562: PUSH
58563: LD_INT 0
58565: PUSH
58566: EMPTY
58567: LIST
58568: LIST
58569: PUSH
58570: LD_INT 3
58572: PUSH
58573: LD_INT 1
58575: NEG
58576: PUSH
58577: EMPTY
58578: LIST
58579: LIST
58580: PUSH
58581: LD_INT 4
58583: PUSH
58584: LD_INT 1
58586: PUSH
58587: EMPTY
58588: LIST
58589: LIST
58590: PUSH
58591: EMPTY
58592: LIST
58593: LIST
58594: LIST
58595: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
58596: LD_ADDR_VAR 0 25
58600: PUSH
58601: LD_INT 3
58603: PUSH
58604: LD_INT 3
58606: PUSH
58607: EMPTY
58608: LIST
58609: LIST
58610: PUSH
58611: LD_INT 4
58613: PUSH
58614: LD_INT 3
58616: PUSH
58617: EMPTY
58618: LIST
58619: LIST
58620: PUSH
58621: LD_INT 3
58623: PUSH
58624: LD_INT 4
58626: PUSH
58627: EMPTY
58628: LIST
58629: LIST
58630: PUSH
58631: EMPTY
58632: LIST
58633: LIST
58634: LIST
58635: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
58636: LD_ADDR_VAR 0 26
58640: PUSH
58641: LD_INT 0
58643: PUSH
58644: LD_INT 3
58646: PUSH
58647: EMPTY
58648: LIST
58649: LIST
58650: PUSH
58651: LD_INT 1
58653: PUSH
58654: LD_INT 4
58656: PUSH
58657: EMPTY
58658: LIST
58659: LIST
58660: PUSH
58661: LD_INT 1
58663: NEG
58664: PUSH
58665: LD_INT 3
58667: PUSH
58668: EMPTY
58669: LIST
58670: LIST
58671: PUSH
58672: EMPTY
58673: LIST
58674: LIST
58675: LIST
58676: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
58677: LD_ADDR_VAR 0 27
58681: PUSH
58682: LD_INT 3
58684: NEG
58685: PUSH
58686: LD_INT 0
58688: PUSH
58689: EMPTY
58690: LIST
58691: LIST
58692: PUSH
58693: LD_INT 3
58695: NEG
58696: PUSH
58697: LD_INT 1
58699: PUSH
58700: EMPTY
58701: LIST
58702: LIST
58703: PUSH
58704: LD_INT 4
58706: NEG
58707: PUSH
58708: LD_INT 1
58710: NEG
58711: PUSH
58712: EMPTY
58713: LIST
58714: LIST
58715: PUSH
58716: EMPTY
58717: LIST
58718: LIST
58719: LIST
58720: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
58721: LD_ADDR_VAR 0 28
58725: PUSH
58726: LD_INT 3
58728: NEG
58729: PUSH
58730: LD_INT 3
58732: NEG
58733: PUSH
58734: EMPTY
58735: LIST
58736: LIST
58737: PUSH
58738: LD_INT 3
58740: NEG
58741: PUSH
58742: LD_INT 4
58744: NEG
58745: PUSH
58746: EMPTY
58747: LIST
58748: LIST
58749: PUSH
58750: LD_INT 4
58752: NEG
58753: PUSH
58754: LD_INT 3
58756: NEG
58757: PUSH
58758: EMPTY
58759: LIST
58760: LIST
58761: PUSH
58762: EMPTY
58763: LIST
58764: LIST
58765: LIST
58766: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
58767: LD_ADDR_VAR 0 29
58771: PUSH
58772: LD_INT 1
58774: NEG
58775: PUSH
58776: LD_INT 3
58778: NEG
58779: PUSH
58780: EMPTY
58781: LIST
58782: LIST
58783: PUSH
58784: LD_INT 0
58786: PUSH
58787: LD_INT 3
58789: NEG
58790: PUSH
58791: EMPTY
58792: LIST
58793: LIST
58794: PUSH
58795: LD_INT 1
58797: PUSH
58798: LD_INT 2
58800: NEG
58801: PUSH
58802: EMPTY
58803: LIST
58804: LIST
58805: PUSH
58806: LD_INT 1
58808: NEG
58809: PUSH
58810: LD_INT 4
58812: NEG
58813: PUSH
58814: EMPTY
58815: LIST
58816: LIST
58817: PUSH
58818: LD_INT 0
58820: PUSH
58821: LD_INT 4
58823: NEG
58824: PUSH
58825: EMPTY
58826: LIST
58827: LIST
58828: PUSH
58829: LD_INT 1
58831: PUSH
58832: LD_INT 3
58834: NEG
58835: PUSH
58836: EMPTY
58837: LIST
58838: LIST
58839: PUSH
58840: LD_INT 1
58842: NEG
58843: PUSH
58844: LD_INT 5
58846: NEG
58847: PUSH
58848: EMPTY
58849: LIST
58850: LIST
58851: PUSH
58852: LD_INT 0
58854: PUSH
58855: LD_INT 5
58857: NEG
58858: PUSH
58859: EMPTY
58860: LIST
58861: LIST
58862: PUSH
58863: LD_INT 1
58865: PUSH
58866: LD_INT 4
58868: NEG
58869: PUSH
58870: EMPTY
58871: LIST
58872: LIST
58873: PUSH
58874: LD_INT 1
58876: NEG
58877: PUSH
58878: LD_INT 6
58880: NEG
58881: PUSH
58882: EMPTY
58883: LIST
58884: LIST
58885: PUSH
58886: LD_INT 0
58888: PUSH
58889: LD_INT 6
58891: NEG
58892: PUSH
58893: EMPTY
58894: LIST
58895: LIST
58896: PUSH
58897: LD_INT 1
58899: PUSH
58900: LD_INT 5
58902: NEG
58903: PUSH
58904: EMPTY
58905: LIST
58906: LIST
58907: PUSH
58908: EMPTY
58909: LIST
58910: LIST
58911: LIST
58912: LIST
58913: LIST
58914: LIST
58915: LIST
58916: LIST
58917: LIST
58918: LIST
58919: LIST
58920: LIST
58921: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
58922: LD_ADDR_VAR 0 30
58926: PUSH
58927: LD_INT 2
58929: PUSH
58930: LD_INT 1
58932: NEG
58933: PUSH
58934: EMPTY
58935: LIST
58936: LIST
58937: PUSH
58938: LD_INT 3
58940: PUSH
58941: LD_INT 0
58943: PUSH
58944: EMPTY
58945: LIST
58946: LIST
58947: PUSH
58948: LD_INT 3
58950: PUSH
58951: LD_INT 1
58953: PUSH
58954: EMPTY
58955: LIST
58956: LIST
58957: PUSH
58958: LD_INT 3
58960: PUSH
58961: LD_INT 1
58963: NEG
58964: PUSH
58965: EMPTY
58966: LIST
58967: LIST
58968: PUSH
58969: LD_INT 4
58971: PUSH
58972: LD_INT 0
58974: PUSH
58975: EMPTY
58976: LIST
58977: LIST
58978: PUSH
58979: LD_INT 4
58981: PUSH
58982: LD_INT 1
58984: PUSH
58985: EMPTY
58986: LIST
58987: LIST
58988: PUSH
58989: LD_INT 4
58991: PUSH
58992: LD_INT 1
58994: NEG
58995: PUSH
58996: EMPTY
58997: LIST
58998: LIST
58999: PUSH
59000: LD_INT 5
59002: PUSH
59003: LD_INT 0
59005: PUSH
59006: EMPTY
59007: LIST
59008: LIST
59009: PUSH
59010: LD_INT 5
59012: PUSH
59013: LD_INT 1
59015: PUSH
59016: EMPTY
59017: LIST
59018: LIST
59019: PUSH
59020: LD_INT 5
59022: PUSH
59023: LD_INT 1
59025: NEG
59026: PUSH
59027: EMPTY
59028: LIST
59029: LIST
59030: PUSH
59031: LD_INT 6
59033: PUSH
59034: LD_INT 0
59036: PUSH
59037: EMPTY
59038: LIST
59039: LIST
59040: PUSH
59041: LD_INT 6
59043: PUSH
59044: LD_INT 1
59046: PUSH
59047: EMPTY
59048: LIST
59049: LIST
59050: PUSH
59051: EMPTY
59052: LIST
59053: LIST
59054: LIST
59055: LIST
59056: LIST
59057: LIST
59058: LIST
59059: LIST
59060: LIST
59061: LIST
59062: LIST
59063: LIST
59064: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
59065: LD_ADDR_VAR 0 31
59069: PUSH
59070: LD_INT 3
59072: PUSH
59073: LD_INT 2
59075: PUSH
59076: EMPTY
59077: LIST
59078: LIST
59079: PUSH
59080: LD_INT 3
59082: PUSH
59083: LD_INT 3
59085: PUSH
59086: EMPTY
59087: LIST
59088: LIST
59089: PUSH
59090: LD_INT 2
59092: PUSH
59093: LD_INT 3
59095: PUSH
59096: EMPTY
59097: LIST
59098: LIST
59099: PUSH
59100: LD_INT 4
59102: PUSH
59103: LD_INT 3
59105: PUSH
59106: EMPTY
59107: LIST
59108: LIST
59109: PUSH
59110: LD_INT 4
59112: PUSH
59113: LD_INT 4
59115: PUSH
59116: EMPTY
59117: LIST
59118: LIST
59119: PUSH
59120: LD_INT 3
59122: PUSH
59123: LD_INT 4
59125: PUSH
59126: EMPTY
59127: LIST
59128: LIST
59129: PUSH
59130: LD_INT 5
59132: PUSH
59133: LD_INT 4
59135: PUSH
59136: EMPTY
59137: LIST
59138: LIST
59139: PUSH
59140: LD_INT 5
59142: PUSH
59143: LD_INT 5
59145: PUSH
59146: EMPTY
59147: LIST
59148: LIST
59149: PUSH
59150: LD_INT 4
59152: PUSH
59153: LD_INT 5
59155: PUSH
59156: EMPTY
59157: LIST
59158: LIST
59159: PUSH
59160: LD_INT 6
59162: PUSH
59163: LD_INT 5
59165: PUSH
59166: EMPTY
59167: LIST
59168: LIST
59169: PUSH
59170: LD_INT 6
59172: PUSH
59173: LD_INT 6
59175: PUSH
59176: EMPTY
59177: LIST
59178: LIST
59179: PUSH
59180: LD_INT 5
59182: PUSH
59183: LD_INT 6
59185: PUSH
59186: EMPTY
59187: LIST
59188: LIST
59189: PUSH
59190: EMPTY
59191: LIST
59192: LIST
59193: LIST
59194: LIST
59195: LIST
59196: LIST
59197: LIST
59198: LIST
59199: LIST
59200: LIST
59201: LIST
59202: LIST
59203: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
59204: LD_ADDR_VAR 0 32
59208: PUSH
59209: LD_INT 1
59211: PUSH
59212: LD_INT 3
59214: PUSH
59215: EMPTY
59216: LIST
59217: LIST
59218: PUSH
59219: LD_INT 0
59221: PUSH
59222: LD_INT 3
59224: PUSH
59225: EMPTY
59226: LIST
59227: LIST
59228: PUSH
59229: LD_INT 1
59231: NEG
59232: PUSH
59233: LD_INT 2
59235: PUSH
59236: EMPTY
59237: LIST
59238: LIST
59239: PUSH
59240: LD_INT 1
59242: PUSH
59243: LD_INT 4
59245: PUSH
59246: EMPTY
59247: LIST
59248: LIST
59249: PUSH
59250: LD_INT 0
59252: PUSH
59253: LD_INT 4
59255: PUSH
59256: EMPTY
59257: LIST
59258: LIST
59259: PUSH
59260: LD_INT 1
59262: NEG
59263: PUSH
59264: LD_INT 3
59266: PUSH
59267: EMPTY
59268: LIST
59269: LIST
59270: PUSH
59271: LD_INT 1
59273: PUSH
59274: LD_INT 5
59276: PUSH
59277: EMPTY
59278: LIST
59279: LIST
59280: PUSH
59281: LD_INT 0
59283: PUSH
59284: LD_INT 5
59286: PUSH
59287: EMPTY
59288: LIST
59289: LIST
59290: PUSH
59291: LD_INT 1
59293: NEG
59294: PUSH
59295: LD_INT 4
59297: PUSH
59298: EMPTY
59299: LIST
59300: LIST
59301: PUSH
59302: LD_INT 1
59304: PUSH
59305: LD_INT 6
59307: PUSH
59308: EMPTY
59309: LIST
59310: LIST
59311: PUSH
59312: LD_INT 0
59314: PUSH
59315: LD_INT 6
59317: PUSH
59318: EMPTY
59319: LIST
59320: LIST
59321: PUSH
59322: LD_INT 1
59324: NEG
59325: PUSH
59326: LD_INT 5
59328: PUSH
59329: EMPTY
59330: LIST
59331: LIST
59332: PUSH
59333: EMPTY
59334: LIST
59335: LIST
59336: LIST
59337: LIST
59338: LIST
59339: LIST
59340: LIST
59341: LIST
59342: LIST
59343: LIST
59344: LIST
59345: LIST
59346: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
59347: LD_ADDR_VAR 0 33
59351: PUSH
59352: LD_INT 2
59354: NEG
59355: PUSH
59356: LD_INT 1
59358: PUSH
59359: EMPTY
59360: LIST
59361: LIST
59362: PUSH
59363: LD_INT 3
59365: NEG
59366: PUSH
59367: LD_INT 0
59369: PUSH
59370: EMPTY
59371: LIST
59372: LIST
59373: PUSH
59374: LD_INT 3
59376: NEG
59377: PUSH
59378: LD_INT 1
59380: NEG
59381: PUSH
59382: EMPTY
59383: LIST
59384: LIST
59385: PUSH
59386: LD_INT 3
59388: NEG
59389: PUSH
59390: LD_INT 1
59392: PUSH
59393: EMPTY
59394: LIST
59395: LIST
59396: PUSH
59397: LD_INT 4
59399: NEG
59400: PUSH
59401: LD_INT 0
59403: PUSH
59404: EMPTY
59405: LIST
59406: LIST
59407: PUSH
59408: LD_INT 4
59410: NEG
59411: PUSH
59412: LD_INT 1
59414: NEG
59415: PUSH
59416: EMPTY
59417: LIST
59418: LIST
59419: PUSH
59420: LD_INT 4
59422: NEG
59423: PUSH
59424: LD_INT 1
59426: PUSH
59427: EMPTY
59428: LIST
59429: LIST
59430: PUSH
59431: LD_INT 5
59433: NEG
59434: PUSH
59435: LD_INT 0
59437: PUSH
59438: EMPTY
59439: LIST
59440: LIST
59441: PUSH
59442: LD_INT 5
59444: NEG
59445: PUSH
59446: LD_INT 1
59448: NEG
59449: PUSH
59450: EMPTY
59451: LIST
59452: LIST
59453: PUSH
59454: LD_INT 5
59456: NEG
59457: PUSH
59458: LD_INT 1
59460: PUSH
59461: EMPTY
59462: LIST
59463: LIST
59464: PUSH
59465: LD_INT 6
59467: NEG
59468: PUSH
59469: LD_INT 0
59471: PUSH
59472: EMPTY
59473: LIST
59474: LIST
59475: PUSH
59476: LD_INT 6
59478: NEG
59479: PUSH
59480: LD_INT 1
59482: NEG
59483: PUSH
59484: EMPTY
59485: LIST
59486: LIST
59487: PUSH
59488: EMPTY
59489: LIST
59490: LIST
59491: LIST
59492: LIST
59493: LIST
59494: LIST
59495: LIST
59496: LIST
59497: LIST
59498: LIST
59499: LIST
59500: LIST
59501: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
59502: LD_ADDR_VAR 0 34
59506: PUSH
59507: LD_INT 2
59509: NEG
59510: PUSH
59511: LD_INT 3
59513: NEG
59514: PUSH
59515: EMPTY
59516: LIST
59517: LIST
59518: PUSH
59519: LD_INT 3
59521: NEG
59522: PUSH
59523: LD_INT 2
59525: NEG
59526: PUSH
59527: EMPTY
59528: LIST
59529: LIST
59530: PUSH
59531: LD_INT 3
59533: NEG
59534: PUSH
59535: LD_INT 3
59537: NEG
59538: PUSH
59539: EMPTY
59540: LIST
59541: LIST
59542: PUSH
59543: LD_INT 3
59545: NEG
59546: PUSH
59547: LD_INT 4
59549: NEG
59550: PUSH
59551: EMPTY
59552: LIST
59553: LIST
59554: PUSH
59555: LD_INT 4
59557: NEG
59558: PUSH
59559: LD_INT 3
59561: NEG
59562: PUSH
59563: EMPTY
59564: LIST
59565: LIST
59566: PUSH
59567: LD_INT 4
59569: NEG
59570: PUSH
59571: LD_INT 4
59573: NEG
59574: PUSH
59575: EMPTY
59576: LIST
59577: LIST
59578: PUSH
59579: LD_INT 4
59581: NEG
59582: PUSH
59583: LD_INT 5
59585: NEG
59586: PUSH
59587: EMPTY
59588: LIST
59589: LIST
59590: PUSH
59591: LD_INT 5
59593: NEG
59594: PUSH
59595: LD_INT 4
59597: NEG
59598: PUSH
59599: EMPTY
59600: LIST
59601: LIST
59602: PUSH
59603: LD_INT 5
59605: NEG
59606: PUSH
59607: LD_INT 5
59609: NEG
59610: PUSH
59611: EMPTY
59612: LIST
59613: LIST
59614: PUSH
59615: LD_INT 5
59617: NEG
59618: PUSH
59619: LD_INT 6
59621: NEG
59622: PUSH
59623: EMPTY
59624: LIST
59625: LIST
59626: PUSH
59627: LD_INT 6
59629: NEG
59630: PUSH
59631: LD_INT 5
59633: NEG
59634: PUSH
59635: EMPTY
59636: LIST
59637: LIST
59638: PUSH
59639: LD_INT 6
59641: NEG
59642: PUSH
59643: LD_INT 6
59645: NEG
59646: PUSH
59647: EMPTY
59648: LIST
59649: LIST
59650: PUSH
59651: EMPTY
59652: LIST
59653: LIST
59654: LIST
59655: LIST
59656: LIST
59657: LIST
59658: LIST
59659: LIST
59660: LIST
59661: LIST
59662: LIST
59663: LIST
59664: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
59665: LD_ADDR_VAR 0 41
59669: PUSH
59670: LD_INT 0
59672: PUSH
59673: LD_INT 2
59675: NEG
59676: PUSH
59677: EMPTY
59678: LIST
59679: LIST
59680: PUSH
59681: LD_INT 1
59683: NEG
59684: PUSH
59685: LD_INT 3
59687: NEG
59688: PUSH
59689: EMPTY
59690: LIST
59691: LIST
59692: PUSH
59693: LD_INT 1
59695: PUSH
59696: LD_INT 2
59698: NEG
59699: PUSH
59700: EMPTY
59701: LIST
59702: LIST
59703: PUSH
59704: EMPTY
59705: LIST
59706: LIST
59707: LIST
59708: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
59709: LD_ADDR_VAR 0 42
59713: PUSH
59714: LD_INT 2
59716: PUSH
59717: LD_INT 0
59719: PUSH
59720: EMPTY
59721: LIST
59722: LIST
59723: PUSH
59724: LD_INT 2
59726: PUSH
59727: LD_INT 1
59729: NEG
59730: PUSH
59731: EMPTY
59732: LIST
59733: LIST
59734: PUSH
59735: LD_INT 3
59737: PUSH
59738: LD_INT 1
59740: PUSH
59741: EMPTY
59742: LIST
59743: LIST
59744: PUSH
59745: EMPTY
59746: LIST
59747: LIST
59748: LIST
59749: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
59750: LD_ADDR_VAR 0 43
59754: PUSH
59755: LD_INT 2
59757: PUSH
59758: LD_INT 2
59760: PUSH
59761: EMPTY
59762: LIST
59763: LIST
59764: PUSH
59765: LD_INT 3
59767: PUSH
59768: LD_INT 2
59770: PUSH
59771: EMPTY
59772: LIST
59773: LIST
59774: PUSH
59775: LD_INT 2
59777: PUSH
59778: LD_INT 3
59780: PUSH
59781: EMPTY
59782: LIST
59783: LIST
59784: PUSH
59785: EMPTY
59786: LIST
59787: LIST
59788: LIST
59789: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
59790: LD_ADDR_VAR 0 44
59794: PUSH
59795: LD_INT 0
59797: PUSH
59798: LD_INT 2
59800: PUSH
59801: EMPTY
59802: LIST
59803: LIST
59804: PUSH
59805: LD_INT 1
59807: PUSH
59808: LD_INT 3
59810: PUSH
59811: EMPTY
59812: LIST
59813: LIST
59814: PUSH
59815: LD_INT 1
59817: NEG
59818: PUSH
59819: LD_INT 2
59821: PUSH
59822: EMPTY
59823: LIST
59824: LIST
59825: PUSH
59826: EMPTY
59827: LIST
59828: LIST
59829: LIST
59830: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59831: LD_ADDR_VAR 0 45
59835: PUSH
59836: LD_INT 2
59838: NEG
59839: PUSH
59840: LD_INT 0
59842: PUSH
59843: EMPTY
59844: LIST
59845: LIST
59846: PUSH
59847: LD_INT 2
59849: NEG
59850: PUSH
59851: LD_INT 1
59853: PUSH
59854: EMPTY
59855: LIST
59856: LIST
59857: PUSH
59858: LD_INT 3
59860: NEG
59861: PUSH
59862: LD_INT 1
59864: NEG
59865: PUSH
59866: EMPTY
59867: LIST
59868: LIST
59869: PUSH
59870: EMPTY
59871: LIST
59872: LIST
59873: LIST
59874: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
59875: LD_ADDR_VAR 0 46
59879: PUSH
59880: LD_INT 2
59882: NEG
59883: PUSH
59884: LD_INT 2
59886: NEG
59887: PUSH
59888: EMPTY
59889: LIST
59890: LIST
59891: PUSH
59892: LD_INT 2
59894: NEG
59895: PUSH
59896: LD_INT 3
59898: NEG
59899: PUSH
59900: EMPTY
59901: LIST
59902: LIST
59903: PUSH
59904: LD_INT 3
59906: NEG
59907: PUSH
59908: LD_INT 2
59910: NEG
59911: PUSH
59912: EMPTY
59913: LIST
59914: LIST
59915: PUSH
59916: EMPTY
59917: LIST
59918: LIST
59919: LIST
59920: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
59921: LD_ADDR_VAR 0 47
59925: PUSH
59926: LD_INT 2
59928: NEG
59929: PUSH
59930: LD_INT 3
59932: NEG
59933: PUSH
59934: EMPTY
59935: LIST
59936: LIST
59937: PUSH
59938: LD_INT 1
59940: NEG
59941: PUSH
59942: LD_INT 3
59944: NEG
59945: PUSH
59946: EMPTY
59947: LIST
59948: LIST
59949: PUSH
59950: EMPTY
59951: LIST
59952: LIST
59953: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
59954: LD_ADDR_VAR 0 48
59958: PUSH
59959: LD_INT 1
59961: PUSH
59962: LD_INT 2
59964: NEG
59965: PUSH
59966: EMPTY
59967: LIST
59968: LIST
59969: PUSH
59970: LD_INT 2
59972: PUSH
59973: LD_INT 1
59975: NEG
59976: PUSH
59977: EMPTY
59978: LIST
59979: LIST
59980: PUSH
59981: EMPTY
59982: LIST
59983: LIST
59984: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
59985: LD_ADDR_VAR 0 49
59989: PUSH
59990: LD_INT 3
59992: PUSH
59993: LD_INT 1
59995: PUSH
59996: EMPTY
59997: LIST
59998: LIST
59999: PUSH
60000: LD_INT 3
60002: PUSH
60003: LD_INT 2
60005: PUSH
60006: EMPTY
60007: LIST
60008: LIST
60009: PUSH
60010: EMPTY
60011: LIST
60012: LIST
60013: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
60014: LD_ADDR_VAR 0 50
60018: PUSH
60019: LD_INT 2
60021: PUSH
60022: LD_INT 3
60024: PUSH
60025: EMPTY
60026: LIST
60027: LIST
60028: PUSH
60029: LD_INT 1
60031: PUSH
60032: LD_INT 3
60034: PUSH
60035: EMPTY
60036: LIST
60037: LIST
60038: PUSH
60039: EMPTY
60040: LIST
60041: LIST
60042: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
60043: LD_ADDR_VAR 0 51
60047: PUSH
60048: LD_INT 1
60050: NEG
60051: PUSH
60052: LD_INT 2
60054: PUSH
60055: EMPTY
60056: LIST
60057: LIST
60058: PUSH
60059: LD_INT 2
60061: NEG
60062: PUSH
60063: LD_INT 1
60065: PUSH
60066: EMPTY
60067: LIST
60068: LIST
60069: PUSH
60070: EMPTY
60071: LIST
60072: LIST
60073: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
60074: LD_ADDR_VAR 0 52
60078: PUSH
60079: LD_INT 3
60081: NEG
60082: PUSH
60083: LD_INT 1
60085: NEG
60086: PUSH
60087: EMPTY
60088: LIST
60089: LIST
60090: PUSH
60091: LD_INT 3
60093: NEG
60094: PUSH
60095: LD_INT 2
60097: NEG
60098: PUSH
60099: EMPTY
60100: LIST
60101: LIST
60102: PUSH
60103: EMPTY
60104: LIST
60105: LIST
60106: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
60107: LD_ADDR_VAR 0 53
60111: PUSH
60112: LD_INT 1
60114: NEG
60115: PUSH
60116: LD_INT 3
60118: NEG
60119: PUSH
60120: EMPTY
60121: LIST
60122: LIST
60123: PUSH
60124: LD_INT 0
60126: PUSH
60127: LD_INT 3
60129: NEG
60130: PUSH
60131: EMPTY
60132: LIST
60133: LIST
60134: PUSH
60135: LD_INT 1
60137: PUSH
60138: LD_INT 2
60140: NEG
60141: PUSH
60142: EMPTY
60143: LIST
60144: LIST
60145: PUSH
60146: EMPTY
60147: LIST
60148: LIST
60149: LIST
60150: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
60151: LD_ADDR_VAR 0 54
60155: PUSH
60156: LD_INT 2
60158: PUSH
60159: LD_INT 1
60161: NEG
60162: PUSH
60163: EMPTY
60164: LIST
60165: LIST
60166: PUSH
60167: LD_INT 3
60169: PUSH
60170: LD_INT 0
60172: PUSH
60173: EMPTY
60174: LIST
60175: LIST
60176: PUSH
60177: LD_INT 3
60179: PUSH
60180: LD_INT 1
60182: PUSH
60183: EMPTY
60184: LIST
60185: LIST
60186: PUSH
60187: EMPTY
60188: LIST
60189: LIST
60190: LIST
60191: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
60192: LD_ADDR_VAR 0 55
60196: PUSH
60197: LD_INT 3
60199: PUSH
60200: LD_INT 2
60202: PUSH
60203: EMPTY
60204: LIST
60205: LIST
60206: PUSH
60207: LD_INT 3
60209: PUSH
60210: LD_INT 3
60212: PUSH
60213: EMPTY
60214: LIST
60215: LIST
60216: PUSH
60217: LD_INT 2
60219: PUSH
60220: LD_INT 3
60222: PUSH
60223: EMPTY
60224: LIST
60225: LIST
60226: PUSH
60227: EMPTY
60228: LIST
60229: LIST
60230: LIST
60231: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
60232: LD_ADDR_VAR 0 56
60236: PUSH
60237: LD_INT 1
60239: PUSH
60240: LD_INT 3
60242: PUSH
60243: EMPTY
60244: LIST
60245: LIST
60246: PUSH
60247: LD_INT 0
60249: PUSH
60250: LD_INT 3
60252: PUSH
60253: EMPTY
60254: LIST
60255: LIST
60256: PUSH
60257: LD_INT 1
60259: NEG
60260: PUSH
60261: LD_INT 2
60263: PUSH
60264: EMPTY
60265: LIST
60266: LIST
60267: PUSH
60268: EMPTY
60269: LIST
60270: LIST
60271: LIST
60272: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60273: LD_ADDR_VAR 0 57
60277: PUSH
60278: LD_INT 2
60280: NEG
60281: PUSH
60282: LD_INT 1
60284: PUSH
60285: EMPTY
60286: LIST
60287: LIST
60288: PUSH
60289: LD_INT 3
60291: NEG
60292: PUSH
60293: LD_INT 0
60295: PUSH
60296: EMPTY
60297: LIST
60298: LIST
60299: PUSH
60300: LD_INT 3
60302: NEG
60303: PUSH
60304: LD_INT 1
60306: NEG
60307: PUSH
60308: EMPTY
60309: LIST
60310: LIST
60311: PUSH
60312: EMPTY
60313: LIST
60314: LIST
60315: LIST
60316: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60317: LD_ADDR_VAR 0 58
60321: PUSH
60322: LD_INT 2
60324: NEG
60325: PUSH
60326: LD_INT 3
60328: NEG
60329: PUSH
60330: EMPTY
60331: LIST
60332: LIST
60333: PUSH
60334: LD_INT 3
60336: NEG
60337: PUSH
60338: LD_INT 2
60340: NEG
60341: PUSH
60342: EMPTY
60343: LIST
60344: LIST
60345: PUSH
60346: LD_INT 3
60348: NEG
60349: PUSH
60350: LD_INT 3
60352: NEG
60353: PUSH
60354: EMPTY
60355: LIST
60356: LIST
60357: PUSH
60358: EMPTY
60359: LIST
60360: LIST
60361: LIST
60362: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
60363: LD_ADDR_VAR 0 59
60367: PUSH
60368: LD_INT 1
60370: NEG
60371: PUSH
60372: LD_INT 2
60374: NEG
60375: PUSH
60376: EMPTY
60377: LIST
60378: LIST
60379: PUSH
60380: LD_INT 0
60382: PUSH
60383: LD_INT 2
60385: NEG
60386: PUSH
60387: EMPTY
60388: LIST
60389: LIST
60390: PUSH
60391: LD_INT 1
60393: PUSH
60394: LD_INT 1
60396: NEG
60397: PUSH
60398: EMPTY
60399: LIST
60400: LIST
60401: PUSH
60402: EMPTY
60403: LIST
60404: LIST
60405: LIST
60406: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
60407: LD_ADDR_VAR 0 60
60411: PUSH
60412: LD_INT 1
60414: PUSH
60415: LD_INT 1
60417: NEG
60418: PUSH
60419: EMPTY
60420: LIST
60421: LIST
60422: PUSH
60423: LD_INT 2
60425: PUSH
60426: LD_INT 0
60428: PUSH
60429: EMPTY
60430: LIST
60431: LIST
60432: PUSH
60433: LD_INT 2
60435: PUSH
60436: LD_INT 1
60438: PUSH
60439: EMPTY
60440: LIST
60441: LIST
60442: PUSH
60443: EMPTY
60444: LIST
60445: LIST
60446: LIST
60447: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
60448: LD_ADDR_VAR 0 61
60452: PUSH
60453: LD_INT 2
60455: PUSH
60456: LD_INT 1
60458: PUSH
60459: EMPTY
60460: LIST
60461: LIST
60462: PUSH
60463: LD_INT 2
60465: PUSH
60466: LD_INT 2
60468: PUSH
60469: EMPTY
60470: LIST
60471: LIST
60472: PUSH
60473: LD_INT 1
60475: PUSH
60476: LD_INT 2
60478: PUSH
60479: EMPTY
60480: LIST
60481: LIST
60482: PUSH
60483: EMPTY
60484: LIST
60485: LIST
60486: LIST
60487: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
60488: LD_ADDR_VAR 0 62
60492: PUSH
60493: LD_INT 1
60495: PUSH
60496: LD_INT 2
60498: PUSH
60499: EMPTY
60500: LIST
60501: LIST
60502: PUSH
60503: LD_INT 0
60505: PUSH
60506: LD_INT 2
60508: PUSH
60509: EMPTY
60510: LIST
60511: LIST
60512: PUSH
60513: LD_INT 1
60515: NEG
60516: PUSH
60517: LD_INT 1
60519: PUSH
60520: EMPTY
60521: LIST
60522: LIST
60523: PUSH
60524: EMPTY
60525: LIST
60526: LIST
60527: LIST
60528: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
60529: LD_ADDR_VAR 0 63
60533: PUSH
60534: LD_INT 1
60536: NEG
60537: PUSH
60538: LD_INT 1
60540: PUSH
60541: EMPTY
60542: LIST
60543: LIST
60544: PUSH
60545: LD_INT 2
60547: NEG
60548: PUSH
60549: LD_INT 0
60551: PUSH
60552: EMPTY
60553: LIST
60554: LIST
60555: PUSH
60556: LD_INT 2
60558: NEG
60559: PUSH
60560: LD_INT 1
60562: NEG
60563: PUSH
60564: EMPTY
60565: LIST
60566: LIST
60567: PUSH
60568: EMPTY
60569: LIST
60570: LIST
60571: LIST
60572: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60573: LD_ADDR_VAR 0 64
60577: PUSH
60578: LD_INT 1
60580: NEG
60581: PUSH
60582: LD_INT 2
60584: NEG
60585: PUSH
60586: EMPTY
60587: LIST
60588: LIST
60589: PUSH
60590: LD_INT 2
60592: NEG
60593: PUSH
60594: LD_INT 1
60596: NEG
60597: PUSH
60598: EMPTY
60599: LIST
60600: LIST
60601: PUSH
60602: LD_INT 2
60604: NEG
60605: PUSH
60606: LD_INT 2
60608: NEG
60609: PUSH
60610: EMPTY
60611: LIST
60612: LIST
60613: PUSH
60614: EMPTY
60615: LIST
60616: LIST
60617: LIST
60618: ST_TO_ADDR
// end ; 2 :
60619: GO 63885
60621: LD_INT 2
60623: DOUBLE
60624: EQUAL
60625: IFTRUE 60629
60627: GO 63884
60629: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
60630: LD_ADDR_VAR 0 29
60634: PUSH
60635: LD_INT 4
60637: PUSH
60638: LD_INT 0
60640: PUSH
60641: EMPTY
60642: LIST
60643: LIST
60644: PUSH
60645: LD_INT 4
60647: PUSH
60648: LD_INT 1
60650: NEG
60651: PUSH
60652: EMPTY
60653: LIST
60654: LIST
60655: PUSH
60656: LD_INT 5
60658: PUSH
60659: LD_INT 0
60661: PUSH
60662: EMPTY
60663: LIST
60664: LIST
60665: PUSH
60666: LD_INT 5
60668: PUSH
60669: LD_INT 1
60671: PUSH
60672: EMPTY
60673: LIST
60674: LIST
60675: PUSH
60676: LD_INT 4
60678: PUSH
60679: LD_INT 1
60681: PUSH
60682: EMPTY
60683: LIST
60684: LIST
60685: PUSH
60686: LD_INT 3
60688: PUSH
60689: LD_INT 0
60691: PUSH
60692: EMPTY
60693: LIST
60694: LIST
60695: PUSH
60696: LD_INT 3
60698: PUSH
60699: LD_INT 1
60701: NEG
60702: PUSH
60703: EMPTY
60704: LIST
60705: LIST
60706: PUSH
60707: LD_INT 3
60709: PUSH
60710: LD_INT 2
60712: NEG
60713: PUSH
60714: EMPTY
60715: LIST
60716: LIST
60717: PUSH
60718: LD_INT 5
60720: PUSH
60721: LD_INT 2
60723: PUSH
60724: EMPTY
60725: LIST
60726: LIST
60727: PUSH
60728: LD_INT 3
60730: PUSH
60731: LD_INT 3
60733: PUSH
60734: EMPTY
60735: LIST
60736: LIST
60737: PUSH
60738: LD_INT 3
60740: PUSH
60741: LD_INT 2
60743: PUSH
60744: EMPTY
60745: LIST
60746: LIST
60747: PUSH
60748: LD_INT 4
60750: PUSH
60751: LD_INT 3
60753: PUSH
60754: EMPTY
60755: LIST
60756: LIST
60757: PUSH
60758: LD_INT 4
60760: PUSH
60761: LD_INT 4
60763: PUSH
60764: EMPTY
60765: LIST
60766: LIST
60767: PUSH
60768: LD_INT 3
60770: PUSH
60771: LD_INT 4
60773: PUSH
60774: EMPTY
60775: LIST
60776: LIST
60777: PUSH
60778: LD_INT 2
60780: PUSH
60781: LD_INT 3
60783: PUSH
60784: EMPTY
60785: LIST
60786: LIST
60787: PUSH
60788: LD_INT 2
60790: PUSH
60791: LD_INT 2
60793: PUSH
60794: EMPTY
60795: LIST
60796: LIST
60797: PUSH
60798: LD_INT 4
60800: PUSH
60801: LD_INT 2
60803: PUSH
60804: EMPTY
60805: LIST
60806: LIST
60807: PUSH
60808: LD_INT 2
60810: PUSH
60811: LD_INT 4
60813: PUSH
60814: EMPTY
60815: LIST
60816: LIST
60817: PUSH
60818: LD_INT 0
60820: PUSH
60821: LD_INT 4
60823: PUSH
60824: EMPTY
60825: LIST
60826: LIST
60827: PUSH
60828: LD_INT 0
60830: PUSH
60831: LD_INT 3
60833: PUSH
60834: EMPTY
60835: LIST
60836: LIST
60837: PUSH
60838: LD_INT 1
60840: PUSH
60841: LD_INT 4
60843: PUSH
60844: EMPTY
60845: LIST
60846: LIST
60847: PUSH
60848: LD_INT 1
60850: PUSH
60851: LD_INT 5
60853: PUSH
60854: EMPTY
60855: LIST
60856: LIST
60857: PUSH
60858: LD_INT 0
60860: PUSH
60861: LD_INT 5
60863: PUSH
60864: EMPTY
60865: LIST
60866: LIST
60867: PUSH
60868: LD_INT 1
60870: NEG
60871: PUSH
60872: LD_INT 4
60874: PUSH
60875: EMPTY
60876: LIST
60877: LIST
60878: PUSH
60879: LD_INT 1
60881: NEG
60882: PUSH
60883: LD_INT 3
60885: PUSH
60886: EMPTY
60887: LIST
60888: LIST
60889: PUSH
60890: LD_INT 2
60892: PUSH
60893: LD_INT 5
60895: PUSH
60896: EMPTY
60897: LIST
60898: LIST
60899: PUSH
60900: LD_INT 2
60902: NEG
60903: PUSH
60904: LD_INT 3
60906: PUSH
60907: EMPTY
60908: LIST
60909: LIST
60910: PUSH
60911: LD_INT 3
60913: NEG
60914: PUSH
60915: LD_INT 0
60917: PUSH
60918: EMPTY
60919: LIST
60920: LIST
60921: PUSH
60922: LD_INT 3
60924: NEG
60925: PUSH
60926: LD_INT 1
60928: NEG
60929: PUSH
60930: EMPTY
60931: LIST
60932: LIST
60933: PUSH
60934: LD_INT 2
60936: NEG
60937: PUSH
60938: LD_INT 0
60940: PUSH
60941: EMPTY
60942: LIST
60943: LIST
60944: PUSH
60945: LD_INT 2
60947: NEG
60948: PUSH
60949: LD_INT 1
60951: PUSH
60952: EMPTY
60953: LIST
60954: LIST
60955: PUSH
60956: LD_INT 3
60958: NEG
60959: PUSH
60960: LD_INT 1
60962: PUSH
60963: EMPTY
60964: LIST
60965: LIST
60966: PUSH
60967: LD_INT 4
60969: NEG
60970: PUSH
60971: LD_INT 0
60973: PUSH
60974: EMPTY
60975: LIST
60976: LIST
60977: PUSH
60978: LD_INT 4
60980: NEG
60981: PUSH
60982: LD_INT 1
60984: NEG
60985: PUSH
60986: EMPTY
60987: LIST
60988: LIST
60989: PUSH
60990: LD_INT 4
60992: NEG
60993: PUSH
60994: LD_INT 2
60996: NEG
60997: PUSH
60998: EMPTY
60999: LIST
61000: LIST
61001: PUSH
61002: LD_INT 2
61004: NEG
61005: PUSH
61006: LD_INT 2
61008: PUSH
61009: EMPTY
61010: LIST
61011: LIST
61012: PUSH
61013: LD_INT 4
61015: NEG
61016: PUSH
61017: LD_INT 4
61019: NEG
61020: PUSH
61021: EMPTY
61022: LIST
61023: LIST
61024: PUSH
61025: LD_INT 4
61027: NEG
61028: PUSH
61029: LD_INT 5
61031: NEG
61032: PUSH
61033: EMPTY
61034: LIST
61035: LIST
61036: PUSH
61037: LD_INT 3
61039: NEG
61040: PUSH
61041: LD_INT 4
61043: NEG
61044: PUSH
61045: EMPTY
61046: LIST
61047: LIST
61048: PUSH
61049: LD_INT 3
61051: NEG
61052: PUSH
61053: LD_INT 3
61055: NEG
61056: PUSH
61057: EMPTY
61058: LIST
61059: LIST
61060: PUSH
61061: LD_INT 4
61063: NEG
61064: PUSH
61065: LD_INT 3
61067: NEG
61068: PUSH
61069: EMPTY
61070: LIST
61071: LIST
61072: PUSH
61073: LD_INT 5
61075: NEG
61076: PUSH
61077: LD_INT 4
61079: NEG
61080: PUSH
61081: EMPTY
61082: LIST
61083: LIST
61084: PUSH
61085: LD_INT 5
61087: NEG
61088: PUSH
61089: LD_INT 5
61091: NEG
61092: PUSH
61093: EMPTY
61094: LIST
61095: LIST
61096: PUSH
61097: LD_INT 3
61099: NEG
61100: PUSH
61101: LD_INT 5
61103: NEG
61104: PUSH
61105: EMPTY
61106: LIST
61107: LIST
61108: PUSH
61109: LD_INT 5
61111: NEG
61112: PUSH
61113: LD_INT 3
61115: NEG
61116: PUSH
61117: EMPTY
61118: LIST
61119: LIST
61120: PUSH
61121: EMPTY
61122: LIST
61123: LIST
61124: LIST
61125: LIST
61126: LIST
61127: LIST
61128: LIST
61129: LIST
61130: LIST
61131: LIST
61132: LIST
61133: LIST
61134: LIST
61135: LIST
61136: LIST
61137: LIST
61138: LIST
61139: LIST
61140: LIST
61141: LIST
61142: LIST
61143: LIST
61144: LIST
61145: LIST
61146: LIST
61147: LIST
61148: LIST
61149: LIST
61150: LIST
61151: LIST
61152: LIST
61153: LIST
61154: LIST
61155: LIST
61156: LIST
61157: LIST
61158: LIST
61159: LIST
61160: LIST
61161: LIST
61162: LIST
61163: LIST
61164: LIST
61165: LIST
61166: LIST
61167: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
61168: LD_ADDR_VAR 0 30
61172: PUSH
61173: LD_INT 4
61175: PUSH
61176: LD_INT 4
61178: PUSH
61179: EMPTY
61180: LIST
61181: LIST
61182: PUSH
61183: LD_INT 4
61185: PUSH
61186: LD_INT 3
61188: PUSH
61189: EMPTY
61190: LIST
61191: LIST
61192: PUSH
61193: LD_INT 5
61195: PUSH
61196: LD_INT 4
61198: PUSH
61199: EMPTY
61200: LIST
61201: LIST
61202: PUSH
61203: LD_INT 5
61205: PUSH
61206: LD_INT 5
61208: PUSH
61209: EMPTY
61210: LIST
61211: LIST
61212: PUSH
61213: LD_INT 4
61215: PUSH
61216: LD_INT 5
61218: PUSH
61219: EMPTY
61220: LIST
61221: LIST
61222: PUSH
61223: LD_INT 3
61225: PUSH
61226: LD_INT 4
61228: PUSH
61229: EMPTY
61230: LIST
61231: LIST
61232: PUSH
61233: LD_INT 3
61235: PUSH
61236: LD_INT 3
61238: PUSH
61239: EMPTY
61240: LIST
61241: LIST
61242: PUSH
61243: LD_INT 5
61245: PUSH
61246: LD_INT 3
61248: PUSH
61249: EMPTY
61250: LIST
61251: LIST
61252: PUSH
61253: LD_INT 3
61255: PUSH
61256: LD_INT 5
61258: PUSH
61259: EMPTY
61260: LIST
61261: LIST
61262: PUSH
61263: LD_INT 0
61265: PUSH
61266: LD_INT 3
61268: PUSH
61269: EMPTY
61270: LIST
61271: LIST
61272: PUSH
61273: LD_INT 0
61275: PUSH
61276: LD_INT 2
61278: PUSH
61279: EMPTY
61280: LIST
61281: LIST
61282: PUSH
61283: LD_INT 1
61285: PUSH
61286: LD_INT 3
61288: PUSH
61289: EMPTY
61290: LIST
61291: LIST
61292: PUSH
61293: LD_INT 1
61295: PUSH
61296: LD_INT 4
61298: PUSH
61299: EMPTY
61300: LIST
61301: LIST
61302: PUSH
61303: LD_INT 0
61305: PUSH
61306: LD_INT 4
61308: PUSH
61309: EMPTY
61310: LIST
61311: LIST
61312: PUSH
61313: LD_INT 1
61315: NEG
61316: PUSH
61317: LD_INT 3
61319: PUSH
61320: EMPTY
61321: LIST
61322: LIST
61323: PUSH
61324: LD_INT 1
61326: NEG
61327: PUSH
61328: LD_INT 2
61330: PUSH
61331: EMPTY
61332: LIST
61333: LIST
61334: PUSH
61335: LD_INT 2
61337: PUSH
61338: LD_INT 4
61340: PUSH
61341: EMPTY
61342: LIST
61343: LIST
61344: PUSH
61345: LD_INT 2
61347: NEG
61348: PUSH
61349: LD_INT 2
61351: PUSH
61352: EMPTY
61353: LIST
61354: LIST
61355: PUSH
61356: LD_INT 4
61358: NEG
61359: PUSH
61360: LD_INT 0
61362: PUSH
61363: EMPTY
61364: LIST
61365: LIST
61366: PUSH
61367: LD_INT 4
61369: NEG
61370: PUSH
61371: LD_INT 1
61373: NEG
61374: PUSH
61375: EMPTY
61376: LIST
61377: LIST
61378: PUSH
61379: LD_INT 3
61381: NEG
61382: PUSH
61383: LD_INT 0
61385: PUSH
61386: EMPTY
61387: LIST
61388: LIST
61389: PUSH
61390: LD_INT 3
61392: NEG
61393: PUSH
61394: LD_INT 1
61396: PUSH
61397: EMPTY
61398: LIST
61399: LIST
61400: PUSH
61401: LD_INT 4
61403: NEG
61404: PUSH
61405: LD_INT 1
61407: PUSH
61408: EMPTY
61409: LIST
61410: LIST
61411: PUSH
61412: LD_INT 5
61414: NEG
61415: PUSH
61416: LD_INT 0
61418: PUSH
61419: EMPTY
61420: LIST
61421: LIST
61422: PUSH
61423: LD_INT 5
61425: NEG
61426: PUSH
61427: LD_INT 1
61429: NEG
61430: PUSH
61431: EMPTY
61432: LIST
61433: LIST
61434: PUSH
61435: LD_INT 5
61437: NEG
61438: PUSH
61439: LD_INT 2
61441: NEG
61442: PUSH
61443: EMPTY
61444: LIST
61445: LIST
61446: PUSH
61447: LD_INT 3
61449: NEG
61450: PUSH
61451: LD_INT 2
61453: PUSH
61454: EMPTY
61455: LIST
61456: LIST
61457: PUSH
61458: LD_INT 3
61460: NEG
61461: PUSH
61462: LD_INT 3
61464: NEG
61465: PUSH
61466: EMPTY
61467: LIST
61468: LIST
61469: PUSH
61470: LD_INT 3
61472: NEG
61473: PUSH
61474: LD_INT 4
61476: NEG
61477: PUSH
61478: EMPTY
61479: LIST
61480: LIST
61481: PUSH
61482: LD_INT 2
61484: NEG
61485: PUSH
61486: LD_INT 3
61488: NEG
61489: PUSH
61490: EMPTY
61491: LIST
61492: LIST
61493: PUSH
61494: LD_INT 2
61496: NEG
61497: PUSH
61498: LD_INT 2
61500: NEG
61501: PUSH
61502: EMPTY
61503: LIST
61504: LIST
61505: PUSH
61506: LD_INT 3
61508: NEG
61509: PUSH
61510: LD_INT 2
61512: NEG
61513: PUSH
61514: EMPTY
61515: LIST
61516: LIST
61517: PUSH
61518: LD_INT 4
61520: NEG
61521: PUSH
61522: LD_INT 3
61524: NEG
61525: PUSH
61526: EMPTY
61527: LIST
61528: LIST
61529: PUSH
61530: LD_INT 4
61532: NEG
61533: PUSH
61534: LD_INT 4
61536: NEG
61537: PUSH
61538: EMPTY
61539: LIST
61540: LIST
61541: PUSH
61542: LD_INT 2
61544: NEG
61545: PUSH
61546: LD_INT 4
61548: NEG
61549: PUSH
61550: EMPTY
61551: LIST
61552: LIST
61553: PUSH
61554: LD_INT 4
61556: NEG
61557: PUSH
61558: LD_INT 2
61560: NEG
61561: PUSH
61562: EMPTY
61563: LIST
61564: LIST
61565: PUSH
61566: LD_INT 0
61568: PUSH
61569: LD_INT 4
61571: NEG
61572: PUSH
61573: EMPTY
61574: LIST
61575: LIST
61576: PUSH
61577: LD_INT 0
61579: PUSH
61580: LD_INT 5
61582: NEG
61583: PUSH
61584: EMPTY
61585: LIST
61586: LIST
61587: PUSH
61588: LD_INT 1
61590: PUSH
61591: LD_INT 4
61593: NEG
61594: PUSH
61595: EMPTY
61596: LIST
61597: LIST
61598: PUSH
61599: LD_INT 1
61601: PUSH
61602: LD_INT 3
61604: NEG
61605: PUSH
61606: EMPTY
61607: LIST
61608: LIST
61609: PUSH
61610: LD_INT 0
61612: PUSH
61613: LD_INT 3
61615: NEG
61616: PUSH
61617: EMPTY
61618: LIST
61619: LIST
61620: PUSH
61621: LD_INT 1
61623: NEG
61624: PUSH
61625: LD_INT 4
61627: NEG
61628: PUSH
61629: EMPTY
61630: LIST
61631: LIST
61632: PUSH
61633: LD_INT 1
61635: NEG
61636: PUSH
61637: LD_INT 5
61639: NEG
61640: PUSH
61641: EMPTY
61642: LIST
61643: LIST
61644: PUSH
61645: LD_INT 2
61647: PUSH
61648: LD_INT 3
61650: NEG
61651: PUSH
61652: EMPTY
61653: LIST
61654: LIST
61655: PUSH
61656: LD_INT 2
61658: NEG
61659: PUSH
61660: LD_INT 5
61662: NEG
61663: PUSH
61664: EMPTY
61665: LIST
61666: LIST
61667: PUSH
61668: EMPTY
61669: LIST
61670: LIST
61671: LIST
61672: LIST
61673: LIST
61674: LIST
61675: LIST
61676: LIST
61677: LIST
61678: LIST
61679: LIST
61680: LIST
61681: LIST
61682: LIST
61683: LIST
61684: LIST
61685: LIST
61686: LIST
61687: LIST
61688: LIST
61689: LIST
61690: LIST
61691: LIST
61692: LIST
61693: LIST
61694: LIST
61695: LIST
61696: LIST
61697: LIST
61698: LIST
61699: LIST
61700: LIST
61701: LIST
61702: LIST
61703: LIST
61704: LIST
61705: LIST
61706: LIST
61707: LIST
61708: LIST
61709: LIST
61710: LIST
61711: LIST
61712: LIST
61713: LIST
61714: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
61715: LD_ADDR_VAR 0 31
61719: PUSH
61720: LD_INT 0
61722: PUSH
61723: LD_INT 4
61725: PUSH
61726: EMPTY
61727: LIST
61728: LIST
61729: PUSH
61730: LD_INT 0
61732: PUSH
61733: LD_INT 3
61735: PUSH
61736: EMPTY
61737: LIST
61738: LIST
61739: PUSH
61740: LD_INT 1
61742: PUSH
61743: LD_INT 4
61745: PUSH
61746: EMPTY
61747: LIST
61748: LIST
61749: PUSH
61750: LD_INT 1
61752: PUSH
61753: LD_INT 5
61755: PUSH
61756: EMPTY
61757: LIST
61758: LIST
61759: PUSH
61760: LD_INT 0
61762: PUSH
61763: LD_INT 5
61765: PUSH
61766: EMPTY
61767: LIST
61768: LIST
61769: PUSH
61770: LD_INT 1
61772: NEG
61773: PUSH
61774: LD_INT 4
61776: PUSH
61777: EMPTY
61778: LIST
61779: LIST
61780: PUSH
61781: LD_INT 1
61783: NEG
61784: PUSH
61785: LD_INT 3
61787: PUSH
61788: EMPTY
61789: LIST
61790: LIST
61791: PUSH
61792: LD_INT 2
61794: PUSH
61795: LD_INT 5
61797: PUSH
61798: EMPTY
61799: LIST
61800: LIST
61801: PUSH
61802: LD_INT 2
61804: NEG
61805: PUSH
61806: LD_INT 3
61808: PUSH
61809: EMPTY
61810: LIST
61811: LIST
61812: PUSH
61813: LD_INT 3
61815: NEG
61816: PUSH
61817: LD_INT 0
61819: PUSH
61820: EMPTY
61821: LIST
61822: LIST
61823: PUSH
61824: LD_INT 3
61826: NEG
61827: PUSH
61828: LD_INT 1
61830: NEG
61831: PUSH
61832: EMPTY
61833: LIST
61834: LIST
61835: PUSH
61836: LD_INT 2
61838: NEG
61839: PUSH
61840: LD_INT 0
61842: PUSH
61843: EMPTY
61844: LIST
61845: LIST
61846: PUSH
61847: LD_INT 2
61849: NEG
61850: PUSH
61851: LD_INT 1
61853: PUSH
61854: EMPTY
61855: LIST
61856: LIST
61857: PUSH
61858: LD_INT 3
61860: NEG
61861: PUSH
61862: LD_INT 1
61864: PUSH
61865: EMPTY
61866: LIST
61867: LIST
61868: PUSH
61869: LD_INT 4
61871: NEG
61872: PUSH
61873: LD_INT 0
61875: PUSH
61876: EMPTY
61877: LIST
61878: LIST
61879: PUSH
61880: LD_INT 4
61882: NEG
61883: PUSH
61884: LD_INT 1
61886: NEG
61887: PUSH
61888: EMPTY
61889: LIST
61890: LIST
61891: PUSH
61892: LD_INT 4
61894: NEG
61895: PUSH
61896: LD_INT 2
61898: NEG
61899: PUSH
61900: EMPTY
61901: LIST
61902: LIST
61903: PUSH
61904: LD_INT 2
61906: NEG
61907: PUSH
61908: LD_INT 2
61910: PUSH
61911: EMPTY
61912: LIST
61913: LIST
61914: PUSH
61915: LD_INT 4
61917: NEG
61918: PUSH
61919: LD_INT 4
61921: NEG
61922: PUSH
61923: EMPTY
61924: LIST
61925: LIST
61926: PUSH
61927: LD_INT 4
61929: NEG
61930: PUSH
61931: LD_INT 5
61933: NEG
61934: PUSH
61935: EMPTY
61936: LIST
61937: LIST
61938: PUSH
61939: LD_INT 3
61941: NEG
61942: PUSH
61943: LD_INT 4
61945: NEG
61946: PUSH
61947: EMPTY
61948: LIST
61949: LIST
61950: PUSH
61951: LD_INT 3
61953: NEG
61954: PUSH
61955: LD_INT 3
61957: NEG
61958: PUSH
61959: EMPTY
61960: LIST
61961: LIST
61962: PUSH
61963: LD_INT 4
61965: NEG
61966: PUSH
61967: LD_INT 3
61969: NEG
61970: PUSH
61971: EMPTY
61972: LIST
61973: LIST
61974: PUSH
61975: LD_INT 5
61977: NEG
61978: PUSH
61979: LD_INT 4
61981: NEG
61982: PUSH
61983: EMPTY
61984: LIST
61985: LIST
61986: PUSH
61987: LD_INT 5
61989: NEG
61990: PUSH
61991: LD_INT 5
61993: NEG
61994: PUSH
61995: EMPTY
61996: LIST
61997: LIST
61998: PUSH
61999: LD_INT 3
62001: NEG
62002: PUSH
62003: LD_INT 5
62005: NEG
62006: PUSH
62007: EMPTY
62008: LIST
62009: LIST
62010: PUSH
62011: LD_INT 5
62013: NEG
62014: PUSH
62015: LD_INT 3
62017: NEG
62018: PUSH
62019: EMPTY
62020: LIST
62021: LIST
62022: PUSH
62023: LD_INT 0
62025: PUSH
62026: LD_INT 3
62028: NEG
62029: PUSH
62030: EMPTY
62031: LIST
62032: LIST
62033: PUSH
62034: LD_INT 0
62036: PUSH
62037: LD_INT 4
62039: NEG
62040: PUSH
62041: EMPTY
62042: LIST
62043: LIST
62044: PUSH
62045: LD_INT 1
62047: PUSH
62048: LD_INT 3
62050: NEG
62051: PUSH
62052: EMPTY
62053: LIST
62054: LIST
62055: PUSH
62056: LD_INT 1
62058: PUSH
62059: LD_INT 2
62061: NEG
62062: PUSH
62063: EMPTY
62064: LIST
62065: LIST
62066: PUSH
62067: LD_INT 0
62069: PUSH
62070: LD_INT 2
62072: NEG
62073: PUSH
62074: EMPTY
62075: LIST
62076: LIST
62077: PUSH
62078: LD_INT 1
62080: NEG
62081: PUSH
62082: LD_INT 3
62084: NEG
62085: PUSH
62086: EMPTY
62087: LIST
62088: LIST
62089: PUSH
62090: LD_INT 1
62092: NEG
62093: PUSH
62094: LD_INT 4
62096: NEG
62097: PUSH
62098: EMPTY
62099: LIST
62100: LIST
62101: PUSH
62102: LD_INT 2
62104: PUSH
62105: LD_INT 2
62107: NEG
62108: PUSH
62109: EMPTY
62110: LIST
62111: LIST
62112: PUSH
62113: LD_INT 2
62115: NEG
62116: PUSH
62117: LD_INT 4
62119: NEG
62120: PUSH
62121: EMPTY
62122: LIST
62123: LIST
62124: PUSH
62125: LD_INT 4
62127: PUSH
62128: LD_INT 0
62130: PUSH
62131: EMPTY
62132: LIST
62133: LIST
62134: PUSH
62135: LD_INT 4
62137: PUSH
62138: LD_INT 1
62140: NEG
62141: PUSH
62142: EMPTY
62143: LIST
62144: LIST
62145: PUSH
62146: LD_INT 5
62148: PUSH
62149: LD_INT 0
62151: PUSH
62152: EMPTY
62153: LIST
62154: LIST
62155: PUSH
62156: LD_INT 5
62158: PUSH
62159: LD_INT 1
62161: PUSH
62162: EMPTY
62163: LIST
62164: LIST
62165: PUSH
62166: LD_INT 4
62168: PUSH
62169: LD_INT 1
62171: PUSH
62172: EMPTY
62173: LIST
62174: LIST
62175: PUSH
62176: LD_INT 3
62178: PUSH
62179: LD_INT 0
62181: PUSH
62182: EMPTY
62183: LIST
62184: LIST
62185: PUSH
62186: LD_INT 3
62188: PUSH
62189: LD_INT 1
62191: NEG
62192: PUSH
62193: EMPTY
62194: LIST
62195: LIST
62196: PUSH
62197: LD_INT 3
62199: PUSH
62200: LD_INT 2
62202: NEG
62203: PUSH
62204: EMPTY
62205: LIST
62206: LIST
62207: PUSH
62208: LD_INT 5
62210: PUSH
62211: LD_INT 2
62213: PUSH
62214: EMPTY
62215: LIST
62216: LIST
62217: PUSH
62218: EMPTY
62219: LIST
62220: LIST
62221: LIST
62222: LIST
62223: LIST
62224: LIST
62225: LIST
62226: LIST
62227: LIST
62228: LIST
62229: LIST
62230: LIST
62231: LIST
62232: LIST
62233: LIST
62234: LIST
62235: LIST
62236: LIST
62237: LIST
62238: LIST
62239: LIST
62240: LIST
62241: LIST
62242: LIST
62243: LIST
62244: LIST
62245: LIST
62246: LIST
62247: LIST
62248: LIST
62249: LIST
62250: LIST
62251: LIST
62252: LIST
62253: LIST
62254: LIST
62255: LIST
62256: LIST
62257: LIST
62258: LIST
62259: LIST
62260: LIST
62261: LIST
62262: LIST
62263: LIST
62264: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
62265: LD_ADDR_VAR 0 32
62269: PUSH
62270: LD_INT 4
62272: NEG
62273: PUSH
62274: LD_INT 0
62276: PUSH
62277: EMPTY
62278: LIST
62279: LIST
62280: PUSH
62281: LD_INT 4
62283: NEG
62284: PUSH
62285: LD_INT 1
62287: NEG
62288: PUSH
62289: EMPTY
62290: LIST
62291: LIST
62292: PUSH
62293: LD_INT 3
62295: NEG
62296: PUSH
62297: LD_INT 0
62299: PUSH
62300: EMPTY
62301: LIST
62302: LIST
62303: PUSH
62304: LD_INT 3
62306: NEG
62307: PUSH
62308: LD_INT 1
62310: PUSH
62311: EMPTY
62312: LIST
62313: LIST
62314: PUSH
62315: LD_INT 4
62317: NEG
62318: PUSH
62319: LD_INT 1
62321: PUSH
62322: EMPTY
62323: LIST
62324: LIST
62325: PUSH
62326: LD_INT 5
62328: NEG
62329: PUSH
62330: LD_INT 0
62332: PUSH
62333: EMPTY
62334: LIST
62335: LIST
62336: PUSH
62337: LD_INT 5
62339: NEG
62340: PUSH
62341: LD_INT 1
62343: NEG
62344: PUSH
62345: EMPTY
62346: LIST
62347: LIST
62348: PUSH
62349: LD_INT 5
62351: NEG
62352: PUSH
62353: LD_INT 2
62355: NEG
62356: PUSH
62357: EMPTY
62358: LIST
62359: LIST
62360: PUSH
62361: LD_INT 3
62363: NEG
62364: PUSH
62365: LD_INT 2
62367: PUSH
62368: EMPTY
62369: LIST
62370: LIST
62371: PUSH
62372: LD_INT 3
62374: NEG
62375: PUSH
62376: LD_INT 3
62378: NEG
62379: PUSH
62380: EMPTY
62381: LIST
62382: LIST
62383: PUSH
62384: LD_INT 3
62386: NEG
62387: PUSH
62388: LD_INT 4
62390: NEG
62391: PUSH
62392: EMPTY
62393: LIST
62394: LIST
62395: PUSH
62396: LD_INT 2
62398: NEG
62399: PUSH
62400: LD_INT 3
62402: NEG
62403: PUSH
62404: EMPTY
62405: LIST
62406: LIST
62407: PUSH
62408: LD_INT 2
62410: NEG
62411: PUSH
62412: LD_INT 2
62414: NEG
62415: PUSH
62416: EMPTY
62417: LIST
62418: LIST
62419: PUSH
62420: LD_INT 3
62422: NEG
62423: PUSH
62424: LD_INT 2
62426: NEG
62427: PUSH
62428: EMPTY
62429: LIST
62430: LIST
62431: PUSH
62432: LD_INT 4
62434: NEG
62435: PUSH
62436: LD_INT 3
62438: NEG
62439: PUSH
62440: EMPTY
62441: LIST
62442: LIST
62443: PUSH
62444: LD_INT 4
62446: NEG
62447: PUSH
62448: LD_INT 4
62450: NEG
62451: PUSH
62452: EMPTY
62453: LIST
62454: LIST
62455: PUSH
62456: LD_INT 2
62458: NEG
62459: PUSH
62460: LD_INT 4
62462: NEG
62463: PUSH
62464: EMPTY
62465: LIST
62466: LIST
62467: PUSH
62468: LD_INT 4
62470: NEG
62471: PUSH
62472: LD_INT 2
62474: NEG
62475: PUSH
62476: EMPTY
62477: LIST
62478: LIST
62479: PUSH
62480: LD_INT 0
62482: PUSH
62483: LD_INT 4
62485: NEG
62486: PUSH
62487: EMPTY
62488: LIST
62489: LIST
62490: PUSH
62491: LD_INT 0
62493: PUSH
62494: LD_INT 5
62496: NEG
62497: PUSH
62498: EMPTY
62499: LIST
62500: LIST
62501: PUSH
62502: LD_INT 1
62504: PUSH
62505: LD_INT 4
62507: NEG
62508: PUSH
62509: EMPTY
62510: LIST
62511: LIST
62512: PUSH
62513: LD_INT 1
62515: PUSH
62516: LD_INT 3
62518: NEG
62519: PUSH
62520: EMPTY
62521: LIST
62522: LIST
62523: PUSH
62524: LD_INT 0
62526: PUSH
62527: LD_INT 3
62529: NEG
62530: PUSH
62531: EMPTY
62532: LIST
62533: LIST
62534: PUSH
62535: LD_INT 1
62537: NEG
62538: PUSH
62539: LD_INT 4
62541: NEG
62542: PUSH
62543: EMPTY
62544: LIST
62545: LIST
62546: PUSH
62547: LD_INT 1
62549: NEG
62550: PUSH
62551: LD_INT 5
62553: NEG
62554: PUSH
62555: EMPTY
62556: LIST
62557: LIST
62558: PUSH
62559: LD_INT 2
62561: PUSH
62562: LD_INT 3
62564: NEG
62565: PUSH
62566: EMPTY
62567: LIST
62568: LIST
62569: PUSH
62570: LD_INT 2
62572: NEG
62573: PUSH
62574: LD_INT 5
62576: NEG
62577: PUSH
62578: EMPTY
62579: LIST
62580: LIST
62581: PUSH
62582: LD_INT 3
62584: PUSH
62585: LD_INT 0
62587: PUSH
62588: EMPTY
62589: LIST
62590: LIST
62591: PUSH
62592: LD_INT 3
62594: PUSH
62595: LD_INT 1
62597: NEG
62598: PUSH
62599: EMPTY
62600: LIST
62601: LIST
62602: PUSH
62603: LD_INT 4
62605: PUSH
62606: LD_INT 0
62608: PUSH
62609: EMPTY
62610: LIST
62611: LIST
62612: PUSH
62613: LD_INT 4
62615: PUSH
62616: LD_INT 1
62618: PUSH
62619: EMPTY
62620: LIST
62621: LIST
62622: PUSH
62623: LD_INT 3
62625: PUSH
62626: LD_INT 1
62628: PUSH
62629: EMPTY
62630: LIST
62631: LIST
62632: PUSH
62633: LD_INT 2
62635: PUSH
62636: LD_INT 0
62638: PUSH
62639: EMPTY
62640: LIST
62641: LIST
62642: PUSH
62643: LD_INT 2
62645: PUSH
62646: LD_INT 1
62648: NEG
62649: PUSH
62650: EMPTY
62651: LIST
62652: LIST
62653: PUSH
62654: LD_INT 2
62656: PUSH
62657: LD_INT 2
62659: NEG
62660: PUSH
62661: EMPTY
62662: LIST
62663: LIST
62664: PUSH
62665: LD_INT 4
62667: PUSH
62668: LD_INT 2
62670: PUSH
62671: EMPTY
62672: LIST
62673: LIST
62674: PUSH
62675: LD_INT 4
62677: PUSH
62678: LD_INT 4
62680: PUSH
62681: EMPTY
62682: LIST
62683: LIST
62684: PUSH
62685: LD_INT 4
62687: PUSH
62688: LD_INT 3
62690: PUSH
62691: EMPTY
62692: LIST
62693: LIST
62694: PUSH
62695: LD_INT 5
62697: PUSH
62698: LD_INT 4
62700: PUSH
62701: EMPTY
62702: LIST
62703: LIST
62704: PUSH
62705: LD_INT 5
62707: PUSH
62708: LD_INT 5
62710: PUSH
62711: EMPTY
62712: LIST
62713: LIST
62714: PUSH
62715: LD_INT 4
62717: PUSH
62718: LD_INT 5
62720: PUSH
62721: EMPTY
62722: LIST
62723: LIST
62724: PUSH
62725: LD_INT 3
62727: PUSH
62728: LD_INT 4
62730: PUSH
62731: EMPTY
62732: LIST
62733: LIST
62734: PUSH
62735: LD_INT 3
62737: PUSH
62738: LD_INT 3
62740: PUSH
62741: EMPTY
62742: LIST
62743: LIST
62744: PUSH
62745: LD_INT 5
62747: PUSH
62748: LD_INT 3
62750: PUSH
62751: EMPTY
62752: LIST
62753: LIST
62754: PUSH
62755: LD_INT 3
62757: PUSH
62758: LD_INT 5
62760: PUSH
62761: EMPTY
62762: LIST
62763: LIST
62764: PUSH
62765: EMPTY
62766: LIST
62767: LIST
62768: LIST
62769: LIST
62770: LIST
62771: LIST
62772: LIST
62773: LIST
62774: LIST
62775: LIST
62776: LIST
62777: LIST
62778: LIST
62779: LIST
62780: LIST
62781: LIST
62782: LIST
62783: LIST
62784: LIST
62785: LIST
62786: LIST
62787: LIST
62788: LIST
62789: LIST
62790: LIST
62791: LIST
62792: LIST
62793: LIST
62794: LIST
62795: LIST
62796: LIST
62797: LIST
62798: LIST
62799: LIST
62800: LIST
62801: LIST
62802: LIST
62803: LIST
62804: LIST
62805: LIST
62806: LIST
62807: LIST
62808: LIST
62809: LIST
62810: LIST
62811: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
62812: LD_ADDR_VAR 0 33
62816: PUSH
62817: LD_INT 4
62819: NEG
62820: PUSH
62821: LD_INT 4
62823: NEG
62824: PUSH
62825: EMPTY
62826: LIST
62827: LIST
62828: PUSH
62829: LD_INT 4
62831: NEG
62832: PUSH
62833: LD_INT 5
62835: NEG
62836: PUSH
62837: EMPTY
62838: LIST
62839: LIST
62840: PUSH
62841: LD_INT 3
62843: NEG
62844: PUSH
62845: LD_INT 4
62847: NEG
62848: PUSH
62849: EMPTY
62850: LIST
62851: LIST
62852: PUSH
62853: LD_INT 3
62855: NEG
62856: PUSH
62857: LD_INT 3
62859: NEG
62860: PUSH
62861: EMPTY
62862: LIST
62863: LIST
62864: PUSH
62865: LD_INT 4
62867: NEG
62868: PUSH
62869: LD_INT 3
62871: NEG
62872: PUSH
62873: EMPTY
62874: LIST
62875: LIST
62876: PUSH
62877: LD_INT 5
62879: NEG
62880: PUSH
62881: LD_INT 4
62883: NEG
62884: PUSH
62885: EMPTY
62886: LIST
62887: LIST
62888: PUSH
62889: LD_INT 5
62891: NEG
62892: PUSH
62893: LD_INT 5
62895: NEG
62896: PUSH
62897: EMPTY
62898: LIST
62899: LIST
62900: PUSH
62901: LD_INT 3
62903: NEG
62904: PUSH
62905: LD_INT 5
62907: NEG
62908: PUSH
62909: EMPTY
62910: LIST
62911: LIST
62912: PUSH
62913: LD_INT 5
62915: NEG
62916: PUSH
62917: LD_INT 3
62919: NEG
62920: PUSH
62921: EMPTY
62922: LIST
62923: LIST
62924: PUSH
62925: LD_INT 0
62927: PUSH
62928: LD_INT 3
62930: NEG
62931: PUSH
62932: EMPTY
62933: LIST
62934: LIST
62935: PUSH
62936: LD_INT 0
62938: PUSH
62939: LD_INT 4
62941: NEG
62942: PUSH
62943: EMPTY
62944: LIST
62945: LIST
62946: PUSH
62947: LD_INT 1
62949: PUSH
62950: LD_INT 3
62952: NEG
62953: PUSH
62954: EMPTY
62955: LIST
62956: LIST
62957: PUSH
62958: LD_INT 1
62960: PUSH
62961: LD_INT 2
62963: NEG
62964: PUSH
62965: EMPTY
62966: LIST
62967: LIST
62968: PUSH
62969: LD_INT 0
62971: PUSH
62972: LD_INT 2
62974: NEG
62975: PUSH
62976: EMPTY
62977: LIST
62978: LIST
62979: PUSH
62980: LD_INT 1
62982: NEG
62983: PUSH
62984: LD_INT 3
62986: NEG
62987: PUSH
62988: EMPTY
62989: LIST
62990: LIST
62991: PUSH
62992: LD_INT 1
62994: NEG
62995: PUSH
62996: LD_INT 4
62998: NEG
62999: PUSH
63000: EMPTY
63001: LIST
63002: LIST
63003: PUSH
63004: LD_INT 2
63006: PUSH
63007: LD_INT 2
63009: NEG
63010: PUSH
63011: EMPTY
63012: LIST
63013: LIST
63014: PUSH
63015: LD_INT 2
63017: NEG
63018: PUSH
63019: LD_INT 4
63021: NEG
63022: PUSH
63023: EMPTY
63024: LIST
63025: LIST
63026: PUSH
63027: LD_INT 4
63029: PUSH
63030: LD_INT 0
63032: PUSH
63033: EMPTY
63034: LIST
63035: LIST
63036: PUSH
63037: LD_INT 4
63039: PUSH
63040: LD_INT 1
63042: NEG
63043: PUSH
63044: EMPTY
63045: LIST
63046: LIST
63047: PUSH
63048: LD_INT 5
63050: PUSH
63051: LD_INT 0
63053: PUSH
63054: EMPTY
63055: LIST
63056: LIST
63057: PUSH
63058: LD_INT 5
63060: PUSH
63061: LD_INT 1
63063: PUSH
63064: EMPTY
63065: LIST
63066: LIST
63067: PUSH
63068: LD_INT 4
63070: PUSH
63071: LD_INT 1
63073: PUSH
63074: EMPTY
63075: LIST
63076: LIST
63077: PUSH
63078: LD_INT 3
63080: PUSH
63081: LD_INT 0
63083: PUSH
63084: EMPTY
63085: LIST
63086: LIST
63087: PUSH
63088: LD_INT 3
63090: PUSH
63091: LD_INT 1
63093: NEG
63094: PUSH
63095: EMPTY
63096: LIST
63097: LIST
63098: PUSH
63099: LD_INT 3
63101: PUSH
63102: LD_INT 2
63104: NEG
63105: PUSH
63106: EMPTY
63107: LIST
63108: LIST
63109: PUSH
63110: LD_INT 5
63112: PUSH
63113: LD_INT 2
63115: PUSH
63116: EMPTY
63117: LIST
63118: LIST
63119: PUSH
63120: LD_INT 3
63122: PUSH
63123: LD_INT 3
63125: PUSH
63126: EMPTY
63127: LIST
63128: LIST
63129: PUSH
63130: LD_INT 3
63132: PUSH
63133: LD_INT 2
63135: PUSH
63136: EMPTY
63137: LIST
63138: LIST
63139: PUSH
63140: LD_INT 4
63142: PUSH
63143: LD_INT 3
63145: PUSH
63146: EMPTY
63147: LIST
63148: LIST
63149: PUSH
63150: LD_INT 4
63152: PUSH
63153: LD_INT 4
63155: PUSH
63156: EMPTY
63157: LIST
63158: LIST
63159: PUSH
63160: LD_INT 3
63162: PUSH
63163: LD_INT 4
63165: PUSH
63166: EMPTY
63167: LIST
63168: LIST
63169: PUSH
63170: LD_INT 2
63172: PUSH
63173: LD_INT 3
63175: PUSH
63176: EMPTY
63177: LIST
63178: LIST
63179: PUSH
63180: LD_INT 2
63182: PUSH
63183: LD_INT 2
63185: PUSH
63186: EMPTY
63187: LIST
63188: LIST
63189: PUSH
63190: LD_INT 4
63192: PUSH
63193: LD_INT 2
63195: PUSH
63196: EMPTY
63197: LIST
63198: LIST
63199: PUSH
63200: LD_INT 2
63202: PUSH
63203: LD_INT 4
63205: PUSH
63206: EMPTY
63207: LIST
63208: LIST
63209: PUSH
63210: LD_INT 0
63212: PUSH
63213: LD_INT 4
63215: PUSH
63216: EMPTY
63217: LIST
63218: LIST
63219: PUSH
63220: LD_INT 0
63222: PUSH
63223: LD_INT 3
63225: PUSH
63226: EMPTY
63227: LIST
63228: LIST
63229: PUSH
63230: LD_INT 1
63232: PUSH
63233: LD_INT 4
63235: PUSH
63236: EMPTY
63237: LIST
63238: LIST
63239: PUSH
63240: LD_INT 1
63242: PUSH
63243: LD_INT 5
63245: PUSH
63246: EMPTY
63247: LIST
63248: LIST
63249: PUSH
63250: LD_INT 0
63252: PUSH
63253: LD_INT 5
63255: PUSH
63256: EMPTY
63257: LIST
63258: LIST
63259: PUSH
63260: LD_INT 1
63262: NEG
63263: PUSH
63264: LD_INT 4
63266: PUSH
63267: EMPTY
63268: LIST
63269: LIST
63270: PUSH
63271: LD_INT 1
63273: NEG
63274: PUSH
63275: LD_INT 3
63277: PUSH
63278: EMPTY
63279: LIST
63280: LIST
63281: PUSH
63282: LD_INT 2
63284: PUSH
63285: LD_INT 5
63287: PUSH
63288: EMPTY
63289: LIST
63290: LIST
63291: PUSH
63292: LD_INT 2
63294: NEG
63295: PUSH
63296: LD_INT 3
63298: PUSH
63299: EMPTY
63300: LIST
63301: LIST
63302: PUSH
63303: EMPTY
63304: LIST
63305: LIST
63306: LIST
63307: LIST
63308: LIST
63309: LIST
63310: LIST
63311: LIST
63312: LIST
63313: LIST
63314: LIST
63315: LIST
63316: LIST
63317: LIST
63318: LIST
63319: LIST
63320: LIST
63321: LIST
63322: LIST
63323: LIST
63324: LIST
63325: LIST
63326: LIST
63327: LIST
63328: LIST
63329: LIST
63330: LIST
63331: LIST
63332: LIST
63333: LIST
63334: LIST
63335: LIST
63336: LIST
63337: LIST
63338: LIST
63339: LIST
63340: LIST
63341: LIST
63342: LIST
63343: LIST
63344: LIST
63345: LIST
63346: LIST
63347: LIST
63348: LIST
63349: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
63350: LD_ADDR_VAR 0 34
63354: PUSH
63355: LD_INT 0
63357: PUSH
63358: LD_INT 4
63360: NEG
63361: PUSH
63362: EMPTY
63363: LIST
63364: LIST
63365: PUSH
63366: LD_INT 0
63368: PUSH
63369: LD_INT 5
63371: NEG
63372: PUSH
63373: EMPTY
63374: LIST
63375: LIST
63376: PUSH
63377: LD_INT 1
63379: PUSH
63380: LD_INT 4
63382: NEG
63383: PUSH
63384: EMPTY
63385: LIST
63386: LIST
63387: PUSH
63388: LD_INT 1
63390: PUSH
63391: LD_INT 3
63393: NEG
63394: PUSH
63395: EMPTY
63396: LIST
63397: LIST
63398: PUSH
63399: LD_INT 0
63401: PUSH
63402: LD_INT 3
63404: NEG
63405: PUSH
63406: EMPTY
63407: LIST
63408: LIST
63409: PUSH
63410: LD_INT 1
63412: NEG
63413: PUSH
63414: LD_INT 4
63416: NEG
63417: PUSH
63418: EMPTY
63419: LIST
63420: LIST
63421: PUSH
63422: LD_INT 1
63424: NEG
63425: PUSH
63426: LD_INT 5
63428: NEG
63429: PUSH
63430: EMPTY
63431: LIST
63432: LIST
63433: PUSH
63434: LD_INT 2
63436: PUSH
63437: LD_INT 3
63439: NEG
63440: PUSH
63441: EMPTY
63442: LIST
63443: LIST
63444: PUSH
63445: LD_INT 2
63447: NEG
63448: PUSH
63449: LD_INT 5
63451: NEG
63452: PUSH
63453: EMPTY
63454: LIST
63455: LIST
63456: PUSH
63457: LD_INT 3
63459: PUSH
63460: LD_INT 0
63462: PUSH
63463: EMPTY
63464: LIST
63465: LIST
63466: PUSH
63467: LD_INT 3
63469: PUSH
63470: LD_INT 1
63472: NEG
63473: PUSH
63474: EMPTY
63475: LIST
63476: LIST
63477: PUSH
63478: LD_INT 4
63480: PUSH
63481: LD_INT 0
63483: PUSH
63484: EMPTY
63485: LIST
63486: LIST
63487: PUSH
63488: LD_INT 4
63490: PUSH
63491: LD_INT 1
63493: PUSH
63494: EMPTY
63495: LIST
63496: LIST
63497: PUSH
63498: LD_INT 3
63500: PUSH
63501: LD_INT 1
63503: PUSH
63504: EMPTY
63505: LIST
63506: LIST
63507: PUSH
63508: LD_INT 2
63510: PUSH
63511: LD_INT 0
63513: PUSH
63514: EMPTY
63515: LIST
63516: LIST
63517: PUSH
63518: LD_INT 2
63520: PUSH
63521: LD_INT 1
63523: NEG
63524: PUSH
63525: EMPTY
63526: LIST
63527: LIST
63528: PUSH
63529: LD_INT 2
63531: PUSH
63532: LD_INT 2
63534: NEG
63535: PUSH
63536: EMPTY
63537: LIST
63538: LIST
63539: PUSH
63540: LD_INT 4
63542: PUSH
63543: LD_INT 2
63545: PUSH
63546: EMPTY
63547: LIST
63548: LIST
63549: PUSH
63550: LD_INT 4
63552: PUSH
63553: LD_INT 4
63555: PUSH
63556: EMPTY
63557: LIST
63558: LIST
63559: PUSH
63560: LD_INT 4
63562: PUSH
63563: LD_INT 3
63565: PUSH
63566: EMPTY
63567: LIST
63568: LIST
63569: PUSH
63570: LD_INT 5
63572: PUSH
63573: LD_INT 4
63575: PUSH
63576: EMPTY
63577: LIST
63578: LIST
63579: PUSH
63580: LD_INT 5
63582: PUSH
63583: LD_INT 5
63585: PUSH
63586: EMPTY
63587: LIST
63588: LIST
63589: PUSH
63590: LD_INT 4
63592: PUSH
63593: LD_INT 5
63595: PUSH
63596: EMPTY
63597: LIST
63598: LIST
63599: PUSH
63600: LD_INT 3
63602: PUSH
63603: LD_INT 4
63605: PUSH
63606: EMPTY
63607: LIST
63608: LIST
63609: PUSH
63610: LD_INT 3
63612: PUSH
63613: LD_INT 3
63615: PUSH
63616: EMPTY
63617: LIST
63618: LIST
63619: PUSH
63620: LD_INT 5
63622: PUSH
63623: LD_INT 3
63625: PUSH
63626: EMPTY
63627: LIST
63628: LIST
63629: PUSH
63630: LD_INT 3
63632: PUSH
63633: LD_INT 5
63635: PUSH
63636: EMPTY
63637: LIST
63638: LIST
63639: PUSH
63640: LD_INT 0
63642: PUSH
63643: LD_INT 3
63645: PUSH
63646: EMPTY
63647: LIST
63648: LIST
63649: PUSH
63650: LD_INT 0
63652: PUSH
63653: LD_INT 2
63655: PUSH
63656: EMPTY
63657: LIST
63658: LIST
63659: PUSH
63660: LD_INT 1
63662: PUSH
63663: LD_INT 3
63665: PUSH
63666: EMPTY
63667: LIST
63668: LIST
63669: PUSH
63670: LD_INT 1
63672: PUSH
63673: LD_INT 4
63675: PUSH
63676: EMPTY
63677: LIST
63678: LIST
63679: PUSH
63680: LD_INT 0
63682: PUSH
63683: LD_INT 4
63685: PUSH
63686: EMPTY
63687: LIST
63688: LIST
63689: PUSH
63690: LD_INT 1
63692: NEG
63693: PUSH
63694: LD_INT 3
63696: PUSH
63697: EMPTY
63698: LIST
63699: LIST
63700: PUSH
63701: LD_INT 1
63703: NEG
63704: PUSH
63705: LD_INT 2
63707: PUSH
63708: EMPTY
63709: LIST
63710: LIST
63711: PUSH
63712: LD_INT 2
63714: PUSH
63715: LD_INT 4
63717: PUSH
63718: EMPTY
63719: LIST
63720: LIST
63721: PUSH
63722: LD_INT 2
63724: NEG
63725: PUSH
63726: LD_INT 2
63728: PUSH
63729: EMPTY
63730: LIST
63731: LIST
63732: PUSH
63733: LD_INT 4
63735: NEG
63736: PUSH
63737: LD_INT 0
63739: PUSH
63740: EMPTY
63741: LIST
63742: LIST
63743: PUSH
63744: LD_INT 4
63746: NEG
63747: PUSH
63748: LD_INT 1
63750: NEG
63751: PUSH
63752: EMPTY
63753: LIST
63754: LIST
63755: PUSH
63756: LD_INT 3
63758: NEG
63759: PUSH
63760: LD_INT 0
63762: PUSH
63763: EMPTY
63764: LIST
63765: LIST
63766: PUSH
63767: LD_INT 3
63769: NEG
63770: PUSH
63771: LD_INT 1
63773: PUSH
63774: EMPTY
63775: LIST
63776: LIST
63777: PUSH
63778: LD_INT 4
63780: NEG
63781: PUSH
63782: LD_INT 1
63784: PUSH
63785: EMPTY
63786: LIST
63787: LIST
63788: PUSH
63789: LD_INT 5
63791: NEG
63792: PUSH
63793: LD_INT 0
63795: PUSH
63796: EMPTY
63797: LIST
63798: LIST
63799: PUSH
63800: LD_INT 5
63802: NEG
63803: PUSH
63804: LD_INT 1
63806: NEG
63807: PUSH
63808: EMPTY
63809: LIST
63810: LIST
63811: PUSH
63812: LD_INT 5
63814: NEG
63815: PUSH
63816: LD_INT 2
63818: NEG
63819: PUSH
63820: EMPTY
63821: LIST
63822: LIST
63823: PUSH
63824: LD_INT 3
63826: NEG
63827: PUSH
63828: LD_INT 2
63830: PUSH
63831: EMPTY
63832: LIST
63833: LIST
63834: PUSH
63835: EMPTY
63836: LIST
63837: LIST
63838: LIST
63839: LIST
63840: LIST
63841: LIST
63842: LIST
63843: LIST
63844: LIST
63845: LIST
63846: LIST
63847: LIST
63848: LIST
63849: LIST
63850: LIST
63851: LIST
63852: LIST
63853: LIST
63854: LIST
63855: LIST
63856: LIST
63857: LIST
63858: LIST
63859: LIST
63860: LIST
63861: LIST
63862: LIST
63863: LIST
63864: LIST
63865: LIST
63866: LIST
63867: LIST
63868: LIST
63869: LIST
63870: LIST
63871: LIST
63872: LIST
63873: LIST
63874: LIST
63875: LIST
63876: LIST
63877: LIST
63878: LIST
63879: LIST
63880: LIST
63881: ST_TO_ADDR
// end ; end ;
63882: GO 63885
63884: POP
// case btype of b_depot , b_warehouse :
63885: LD_VAR 0 1
63889: PUSH
63890: LD_INT 0
63892: DOUBLE
63893: EQUAL
63894: IFTRUE 63904
63896: LD_INT 1
63898: DOUBLE
63899: EQUAL
63900: IFTRUE 63904
63902: GO 64105
63904: POP
// case nation of nation_american :
63905: LD_VAR 0 5
63909: PUSH
63910: LD_INT 1
63912: DOUBLE
63913: EQUAL
63914: IFTRUE 63918
63916: GO 63974
63918: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
63919: LD_ADDR_VAR 0 9
63923: PUSH
63924: LD_VAR 0 11
63928: PUSH
63929: LD_VAR 0 12
63933: PUSH
63934: LD_VAR 0 13
63938: PUSH
63939: LD_VAR 0 14
63943: PUSH
63944: LD_VAR 0 15
63948: PUSH
63949: LD_VAR 0 16
63953: PUSH
63954: EMPTY
63955: LIST
63956: LIST
63957: LIST
63958: LIST
63959: LIST
63960: LIST
63961: PUSH
63962: LD_VAR 0 4
63966: PUSH
63967: LD_INT 1
63969: PLUS
63970: ARRAY
63971: ST_TO_ADDR
63972: GO 64103
63974: LD_INT 2
63976: DOUBLE
63977: EQUAL
63978: IFTRUE 63982
63980: GO 64038
63982: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
63983: LD_ADDR_VAR 0 9
63987: PUSH
63988: LD_VAR 0 17
63992: PUSH
63993: LD_VAR 0 18
63997: PUSH
63998: LD_VAR 0 19
64002: PUSH
64003: LD_VAR 0 20
64007: PUSH
64008: LD_VAR 0 21
64012: PUSH
64013: LD_VAR 0 22
64017: PUSH
64018: EMPTY
64019: LIST
64020: LIST
64021: LIST
64022: LIST
64023: LIST
64024: LIST
64025: PUSH
64026: LD_VAR 0 4
64030: PUSH
64031: LD_INT 1
64033: PLUS
64034: ARRAY
64035: ST_TO_ADDR
64036: GO 64103
64038: LD_INT 3
64040: DOUBLE
64041: EQUAL
64042: IFTRUE 64046
64044: GO 64102
64046: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
64047: LD_ADDR_VAR 0 9
64051: PUSH
64052: LD_VAR 0 23
64056: PUSH
64057: LD_VAR 0 24
64061: PUSH
64062: LD_VAR 0 25
64066: PUSH
64067: LD_VAR 0 26
64071: PUSH
64072: LD_VAR 0 27
64076: PUSH
64077: LD_VAR 0 28
64081: PUSH
64082: EMPTY
64083: LIST
64084: LIST
64085: LIST
64086: LIST
64087: LIST
64088: LIST
64089: PUSH
64090: LD_VAR 0 4
64094: PUSH
64095: LD_INT 1
64097: PLUS
64098: ARRAY
64099: ST_TO_ADDR
64100: GO 64103
64102: POP
64103: GO 64658
64105: LD_INT 2
64107: DOUBLE
64108: EQUAL
64109: IFTRUE 64119
64111: LD_INT 3
64113: DOUBLE
64114: EQUAL
64115: IFTRUE 64119
64117: GO 64175
64119: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
64120: LD_ADDR_VAR 0 9
64124: PUSH
64125: LD_VAR 0 29
64129: PUSH
64130: LD_VAR 0 30
64134: PUSH
64135: LD_VAR 0 31
64139: PUSH
64140: LD_VAR 0 32
64144: PUSH
64145: LD_VAR 0 33
64149: PUSH
64150: LD_VAR 0 34
64154: PUSH
64155: EMPTY
64156: LIST
64157: LIST
64158: LIST
64159: LIST
64160: LIST
64161: LIST
64162: PUSH
64163: LD_VAR 0 4
64167: PUSH
64168: LD_INT 1
64170: PLUS
64171: ARRAY
64172: ST_TO_ADDR
64173: GO 64658
64175: LD_INT 16
64177: DOUBLE
64178: EQUAL
64179: IFTRUE 64237
64181: LD_INT 17
64183: DOUBLE
64184: EQUAL
64185: IFTRUE 64237
64187: LD_INT 18
64189: DOUBLE
64190: EQUAL
64191: IFTRUE 64237
64193: LD_INT 19
64195: DOUBLE
64196: EQUAL
64197: IFTRUE 64237
64199: LD_INT 22
64201: DOUBLE
64202: EQUAL
64203: IFTRUE 64237
64205: LD_INT 20
64207: DOUBLE
64208: EQUAL
64209: IFTRUE 64237
64211: LD_INT 21
64213: DOUBLE
64214: EQUAL
64215: IFTRUE 64237
64217: LD_INT 23
64219: DOUBLE
64220: EQUAL
64221: IFTRUE 64237
64223: LD_INT 24
64225: DOUBLE
64226: EQUAL
64227: IFTRUE 64237
64229: LD_INT 25
64231: DOUBLE
64232: EQUAL
64233: IFTRUE 64237
64235: GO 64293
64237: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
64238: LD_ADDR_VAR 0 9
64242: PUSH
64243: LD_VAR 0 35
64247: PUSH
64248: LD_VAR 0 36
64252: PUSH
64253: LD_VAR 0 37
64257: PUSH
64258: LD_VAR 0 38
64262: PUSH
64263: LD_VAR 0 39
64267: PUSH
64268: LD_VAR 0 40
64272: PUSH
64273: EMPTY
64274: LIST
64275: LIST
64276: LIST
64277: LIST
64278: LIST
64279: LIST
64280: PUSH
64281: LD_VAR 0 4
64285: PUSH
64286: LD_INT 1
64288: PLUS
64289: ARRAY
64290: ST_TO_ADDR
64291: GO 64658
64293: LD_INT 6
64295: DOUBLE
64296: EQUAL
64297: IFTRUE 64349
64299: LD_INT 7
64301: DOUBLE
64302: EQUAL
64303: IFTRUE 64349
64305: LD_INT 8
64307: DOUBLE
64308: EQUAL
64309: IFTRUE 64349
64311: LD_INT 13
64313: DOUBLE
64314: EQUAL
64315: IFTRUE 64349
64317: LD_INT 12
64319: DOUBLE
64320: EQUAL
64321: IFTRUE 64349
64323: LD_INT 15
64325: DOUBLE
64326: EQUAL
64327: IFTRUE 64349
64329: LD_INT 11
64331: DOUBLE
64332: EQUAL
64333: IFTRUE 64349
64335: LD_INT 14
64337: DOUBLE
64338: EQUAL
64339: IFTRUE 64349
64341: LD_INT 10
64343: DOUBLE
64344: EQUAL
64345: IFTRUE 64349
64347: GO 64405
64349: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
64350: LD_ADDR_VAR 0 9
64354: PUSH
64355: LD_VAR 0 41
64359: PUSH
64360: LD_VAR 0 42
64364: PUSH
64365: LD_VAR 0 43
64369: PUSH
64370: LD_VAR 0 44
64374: PUSH
64375: LD_VAR 0 45
64379: PUSH
64380: LD_VAR 0 46
64384: PUSH
64385: EMPTY
64386: LIST
64387: LIST
64388: LIST
64389: LIST
64390: LIST
64391: LIST
64392: PUSH
64393: LD_VAR 0 4
64397: PUSH
64398: LD_INT 1
64400: PLUS
64401: ARRAY
64402: ST_TO_ADDR
64403: GO 64658
64405: LD_INT 36
64407: DOUBLE
64408: EQUAL
64409: IFTRUE 64413
64411: GO 64469
64413: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
64414: LD_ADDR_VAR 0 9
64418: PUSH
64419: LD_VAR 0 47
64423: PUSH
64424: LD_VAR 0 48
64428: PUSH
64429: LD_VAR 0 49
64433: PUSH
64434: LD_VAR 0 50
64438: PUSH
64439: LD_VAR 0 51
64443: PUSH
64444: LD_VAR 0 52
64448: PUSH
64449: EMPTY
64450: LIST
64451: LIST
64452: LIST
64453: LIST
64454: LIST
64455: LIST
64456: PUSH
64457: LD_VAR 0 4
64461: PUSH
64462: LD_INT 1
64464: PLUS
64465: ARRAY
64466: ST_TO_ADDR
64467: GO 64658
64469: LD_INT 4
64471: DOUBLE
64472: EQUAL
64473: IFTRUE 64495
64475: LD_INT 5
64477: DOUBLE
64478: EQUAL
64479: IFTRUE 64495
64481: LD_INT 34
64483: DOUBLE
64484: EQUAL
64485: IFTRUE 64495
64487: LD_INT 37
64489: DOUBLE
64490: EQUAL
64491: IFTRUE 64495
64493: GO 64551
64495: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
64496: LD_ADDR_VAR 0 9
64500: PUSH
64501: LD_VAR 0 53
64505: PUSH
64506: LD_VAR 0 54
64510: PUSH
64511: LD_VAR 0 55
64515: PUSH
64516: LD_VAR 0 56
64520: PUSH
64521: LD_VAR 0 57
64525: PUSH
64526: LD_VAR 0 58
64530: PUSH
64531: EMPTY
64532: LIST
64533: LIST
64534: LIST
64535: LIST
64536: LIST
64537: LIST
64538: PUSH
64539: LD_VAR 0 4
64543: PUSH
64544: LD_INT 1
64546: PLUS
64547: ARRAY
64548: ST_TO_ADDR
64549: GO 64658
64551: LD_INT 31
64553: DOUBLE
64554: EQUAL
64555: IFTRUE 64601
64557: LD_INT 32
64559: DOUBLE
64560: EQUAL
64561: IFTRUE 64601
64563: LD_INT 33
64565: DOUBLE
64566: EQUAL
64567: IFTRUE 64601
64569: LD_INT 27
64571: DOUBLE
64572: EQUAL
64573: IFTRUE 64601
64575: LD_INT 26
64577: DOUBLE
64578: EQUAL
64579: IFTRUE 64601
64581: LD_INT 28
64583: DOUBLE
64584: EQUAL
64585: IFTRUE 64601
64587: LD_INT 29
64589: DOUBLE
64590: EQUAL
64591: IFTRUE 64601
64593: LD_INT 30
64595: DOUBLE
64596: EQUAL
64597: IFTRUE 64601
64599: GO 64657
64601: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
64602: LD_ADDR_VAR 0 9
64606: PUSH
64607: LD_VAR 0 59
64611: PUSH
64612: LD_VAR 0 60
64616: PUSH
64617: LD_VAR 0 61
64621: PUSH
64622: LD_VAR 0 62
64626: PUSH
64627: LD_VAR 0 63
64631: PUSH
64632: LD_VAR 0 64
64636: PUSH
64637: EMPTY
64638: LIST
64639: LIST
64640: LIST
64641: LIST
64642: LIST
64643: LIST
64644: PUSH
64645: LD_VAR 0 4
64649: PUSH
64650: LD_INT 1
64652: PLUS
64653: ARRAY
64654: ST_TO_ADDR
64655: GO 64658
64657: POP
// temp_list2 = [ ] ;
64658: LD_ADDR_VAR 0 10
64662: PUSH
64663: EMPTY
64664: ST_TO_ADDR
// for i in temp_list do
64665: LD_ADDR_VAR 0 8
64669: PUSH
64670: LD_VAR 0 9
64674: PUSH
64675: FOR_IN
64676: IFFALSE 64728
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
64678: LD_ADDR_VAR 0 10
64682: PUSH
64683: LD_VAR 0 10
64687: PUSH
64688: LD_VAR 0 8
64692: PUSH
64693: LD_INT 1
64695: ARRAY
64696: PUSH
64697: LD_VAR 0 2
64701: PLUS
64702: PUSH
64703: LD_VAR 0 8
64707: PUSH
64708: LD_INT 2
64710: ARRAY
64711: PUSH
64712: LD_VAR 0 3
64716: PLUS
64717: PUSH
64718: EMPTY
64719: LIST
64720: LIST
64721: PUSH
64722: EMPTY
64723: LIST
64724: ADD
64725: ST_TO_ADDR
64726: GO 64675
64728: POP
64729: POP
// result = temp_list2 ;
64730: LD_ADDR_VAR 0 7
64734: PUSH
64735: LD_VAR 0 10
64739: ST_TO_ADDR
// end ;
64740: LD_VAR 0 7
64744: RET
// export function EnemyInRange ( unit , dist ) ; begin
64745: LD_INT 0
64747: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
64748: LD_ADDR_VAR 0 3
64752: PUSH
64753: LD_VAR 0 1
64757: PPUSH
64758: CALL_OW 255
64762: PPUSH
64763: LD_VAR 0 1
64767: PPUSH
64768: CALL_OW 250
64772: PPUSH
64773: LD_VAR 0 1
64777: PPUSH
64778: CALL_OW 251
64782: PPUSH
64783: LD_VAR 0 2
64787: PPUSH
64788: CALL 38147 0 4
64792: PUSH
64793: LD_INT 4
64795: ARRAY
64796: ST_TO_ADDR
// end ;
64797: LD_VAR 0 3
64801: RET
// export function PlayerSeeMe ( unit ) ; begin
64802: LD_INT 0
64804: PPUSH
// result := See ( your_side , unit ) ;
64805: LD_ADDR_VAR 0 2
64809: PUSH
64810: LD_OWVAR 2
64814: PPUSH
64815: LD_VAR 0 1
64819: PPUSH
64820: CALL_OW 292
64824: ST_TO_ADDR
// end ;
64825: LD_VAR 0 2
64829: RET
// export function ReverseDir ( unit ) ; begin
64830: LD_INT 0
64832: PPUSH
// if not unit then
64833: LD_VAR 0 1
64837: NOT
64838: IFFALSE 64842
// exit ;
64840: GO 64865
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
64842: LD_ADDR_VAR 0 2
64846: PUSH
64847: LD_VAR 0 1
64851: PPUSH
64852: CALL_OW 254
64856: PUSH
64857: LD_INT 3
64859: PLUS
64860: PUSH
64861: LD_INT 6
64863: MOD
64864: ST_TO_ADDR
// end ;
64865: LD_VAR 0 2
64869: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
64870: LD_INT 0
64872: PPUSH
64873: PPUSH
64874: PPUSH
64875: PPUSH
64876: PPUSH
64877: PPUSH
// if not unit or not hexes then
64878: LD_VAR 0 1
64882: NOT
64883: PUSH
64884: LD_VAR 0 2
64888: NOT
64889: OR
64890: IFFALSE 64894
// exit ;
64892: GO 65017
// dist := 9999 ;
64894: LD_ADDR_VAR 0 5
64898: PUSH
64899: LD_INT 9999
64901: ST_TO_ADDR
// for i = 1 to hexes do
64902: LD_ADDR_VAR 0 4
64906: PUSH
64907: DOUBLE
64908: LD_INT 1
64910: DEC
64911: ST_TO_ADDR
64912: LD_VAR 0 2
64916: PUSH
64917: FOR_TO
64918: IFFALSE 65005
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
64920: LD_ADDR_VAR 0 6
64924: PUSH
64925: LD_VAR 0 1
64929: PPUSH
64930: LD_VAR 0 2
64934: PUSH
64935: LD_VAR 0 4
64939: ARRAY
64940: PUSH
64941: LD_INT 1
64943: ARRAY
64944: PPUSH
64945: LD_VAR 0 2
64949: PUSH
64950: LD_VAR 0 4
64954: ARRAY
64955: PUSH
64956: LD_INT 2
64958: ARRAY
64959: PPUSH
64960: CALL_OW 297
64964: ST_TO_ADDR
// if tdist < dist then
64965: LD_VAR 0 6
64969: PUSH
64970: LD_VAR 0 5
64974: LESS
64975: IFFALSE 65003
// begin hex := hexes [ i ] ;
64977: LD_ADDR_VAR 0 8
64981: PUSH
64982: LD_VAR 0 2
64986: PUSH
64987: LD_VAR 0 4
64991: ARRAY
64992: ST_TO_ADDR
// dist := tdist ;
64993: LD_ADDR_VAR 0 5
64997: PUSH
64998: LD_VAR 0 6
65002: ST_TO_ADDR
// end ; end ;
65003: GO 64917
65005: POP
65006: POP
// result := hex ;
65007: LD_ADDR_VAR 0 3
65011: PUSH
65012: LD_VAR 0 8
65016: ST_TO_ADDR
// end ;
65017: LD_VAR 0 3
65021: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
65022: LD_INT 0
65024: PPUSH
65025: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
65026: LD_VAR 0 1
65030: NOT
65031: PUSH
65032: LD_VAR 0 1
65036: PUSH
65037: LD_INT 21
65039: PUSH
65040: LD_INT 2
65042: PUSH
65043: EMPTY
65044: LIST
65045: LIST
65046: PUSH
65047: LD_INT 23
65049: PUSH
65050: LD_INT 2
65052: PUSH
65053: EMPTY
65054: LIST
65055: LIST
65056: PUSH
65057: EMPTY
65058: LIST
65059: LIST
65060: PPUSH
65061: CALL_OW 69
65065: IN
65066: NOT
65067: OR
65068: IFFALSE 65072
// exit ;
65070: GO 65119
// for i = 1 to 3 do
65072: LD_ADDR_VAR 0 3
65076: PUSH
65077: DOUBLE
65078: LD_INT 1
65080: DEC
65081: ST_TO_ADDR
65082: LD_INT 3
65084: PUSH
65085: FOR_TO
65086: IFFALSE 65117
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
65088: LD_VAR 0 1
65092: PPUSH
65093: CALL_OW 250
65097: PPUSH
65098: LD_VAR 0 1
65102: PPUSH
65103: CALL_OW 251
65107: PPUSH
65108: LD_INT 1
65110: PPUSH
65111: CALL_OW 453
65115: GO 65085
65117: POP
65118: POP
// end ;
65119: LD_VAR 0 2
65123: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
65124: LD_INT 0
65126: PPUSH
65127: PPUSH
65128: PPUSH
65129: PPUSH
65130: PPUSH
65131: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
65132: LD_VAR 0 1
65136: NOT
65137: PUSH
65138: LD_VAR 0 2
65142: NOT
65143: OR
65144: PUSH
65145: LD_VAR 0 1
65149: PPUSH
65150: CALL_OW 314
65154: OR
65155: IFFALSE 65159
// exit ;
65157: GO 65600
// x := GetX ( enemy_unit ) ;
65159: LD_ADDR_VAR 0 7
65163: PUSH
65164: LD_VAR 0 2
65168: PPUSH
65169: CALL_OW 250
65173: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
65174: LD_ADDR_VAR 0 8
65178: PUSH
65179: LD_VAR 0 2
65183: PPUSH
65184: CALL_OW 251
65188: ST_TO_ADDR
// if not x or not y then
65189: LD_VAR 0 7
65193: NOT
65194: PUSH
65195: LD_VAR 0 8
65199: NOT
65200: OR
65201: IFFALSE 65205
// exit ;
65203: GO 65600
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
65205: LD_ADDR_VAR 0 6
65209: PUSH
65210: LD_VAR 0 7
65214: PPUSH
65215: LD_INT 0
65217: PPUSH
65218: LD_INT 4
65220: PPUSH
65221: CALL_OW 272
65225: PUSH
65226: LD_VAR 0 8
65230: PPUSH
65231: LD_INT 0
65233: PPUSH
65234: LD_INT 4
65236: PPUSH
65237: CALL_OW 273
65241: PUSH
65242: EMPTY
65243: LIST
65244: LIST
65245: PUSH
65246: LD_VAR 0 7
65250: PPUSH
65251: LD_INT 1
65253: PPUSH
65254: LD_INT 4
65256: PPUSH
65257: CALL_OW 272
65261: PUSH
65262: LD_VAR 0 8
65266: PPUSH
65267: LD_INT 1
65269: PPUSH
65270: LD_INT 4
65272: PPUSH
65273: CALL_OW 273
65277: PUSH
65278: EMPTY
65279: LIST
65280: LIST
65281: PUSH
65282: LD_VAR 0 7
65286: PPUSH
65287: LD_INT 2
65289: PPUSH
65290: LD_INT 4
65292: PPUSH
65293: CALL_OW 272
65297: PUSH
65298: LD_VAR 0 8
65302: PPUSH
65303: LD_INT 2
65305: PPUSH
65306: LD_INT 4
65308: PPUSH
65309: CALL_OW 273
65313: PUSH
65314: EMPTY
65315: LIST
65316: LIST
65317: PUSH
65318: LD_VAR 0 7
65322: PPUSH
65323: LD_INT 3
65325: PPUSH
65326: LD_INT 4
65328: PPUSH
65329: CALL_OW 272
65333: PUSH
65334: LD_VAR 0 8
65338: PPUSH
65339: LD_INT 3
65341: PPUSH
65342: LD_INT 4
65344: PPUSH
65345: CALL_OW 273
65349: PUSH
65350: EMPTY
65351: LIST
65352: LIST
65353: PUSH
65354: LD_VAR 0 7
65358: PPUSH
65359: LD_INT 4
65361: PPUSH
65362: LD_INT 4
65364: PPUSH
65365: CALL_OW 272
65369: PUSH
65370: LD_VAR 0 8
65374: PPUSH
65375: LD_INT 4
65377: PPUSH
65378: LD_INT 4
65380: PPUSH
65381: CALL_OW 273
65385: PUSH
65386: EMPTY
65387: LIST
65388: LIST
65389: PUSH
65390: LD_VAR 0 7
65394: PPUSH
65395: LD_INT 5
65397: PPUSH
65398: LD_INT 4
65400: PPUSH
65401: CALL_OW 272
65405: PUSH
65406: LD_VAR 0 8
65410: PPUSH
65411: LD_INT 5
65413: PPUSH
65414: LD_INT 4
65416: PPUSH
65417: CALL_OW 273
65421: PUSH
65422: EMPTY
65423: LIST
65424: LIST
65425: PUSH
65426: EMPTY
65427: LIST
65428: LIST
65429: LIST
65430: LIST
65431: LIST
65432: LIST
65433: ST_TO_ADDR
// for i = tmp downto 1 do
65434: LD_ADDR_VAR 0 4
65438: PUSH
65439: DOUBLE
65440: LD_VAR 0 6
65444: INC
65445: ST_TO_ADDR
65446: LD_INT 1
65448: PUSH
65449: FOR_DOWNTO
65450: IFFALSE 65551
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
65452: LD_VAR 0 6
65456: PUSH
65457: LD_VAR 0 4
65461: ARRAY
65462: PUSH
65463: LD_INT 1
65465: ARRAY
65466: PPUSH
65467: LD_VAR 0 6
65471: PUSH
65472: LD_VAR 0 4
65476: ARRAY
65477: PUSH
65478: LD_INT 2
65480: ARRAY
65481: PPUSH
65482: CALL_OW 488
65486: NOT
65487: PUSH
65488: LD_VAR 0 6
65492: PUSH
65493: LD_VAR 0 4
65497: ARRAY
65498: PUSH
65499: LD_INT 1
65501: ARRAY
65502: PPUSH
65503: LD_VAR 0 6
65507: PUSH
65508: LD_VAR 0 4
65512: ARRAY
65513: PUSH
65514: LD_INT 2
65516: ARRAY
65517: PPUSH
65518: CALL_OW 428
65522: PUSH
65523: LD_INT 0
65525: NONEQUAL
65526: OR
65527: IFFALSE 65549
// tmp := Delete ( tmp , i ) ;
65529: LD_ADDR_VAR 0 6
65533: PUSH
65534: LD_VAR 0 6
65538: PPUSH
65539: LD_VAR 0 4
65543: PPUSH
65544: CALL_OW 3
65548: ST_TO_ADDR
65549: GO 65449
65551: POP
65552: POP
// j := GetClosestHex ( unit , tmp ) ;
65553: LD_ADDR_VAR 0 5
65557: PUSH
65558: LD_VAR 0 1
65562: PPUSH
65563: LD_VAR 0 6
65567: PPUSH
65568: CALL 64870 0 2
65572: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
65573: LD_VAR 0 1
65577: PPUSH
65578: LD_VAR 0 5
65582: PUSH
65583: LD_INT 1
65585: ARRAY
65586: PPUSH
65587: LD_VAR 0 5
65591: PUSH
65592: LD_INT 2
65594: ARRAY
65595: PPUSH
65596: CALL_OW 111
// end ;
65600: LD_VAR 0 3
65604: RET
// export function PrepareApemanSoldier ( ) ; begin
65605: LD_INT 0
65607: PPUSH
// uc_nation := 0 ;
65608: LD_ADDR_OWVAR 21
65612: PUSH
65613: LD_INT 0
65615: ST_TO_ADDR
// hc_sex := sex_male ;
65616: LD_ADDR_OWVAR 27
65620: PUSH
65621: LD_INT 1
65623: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
65624: LD_ADDR_OWVAR 28
65628: PUSH
65629: LD_INT 15
65631: ST_TO_ADDR
// hc_gallery :=  ;
65632: LD_ADDR_OWVAR 33
65636: PUSH
65637: LD_STRING 
65639: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
65640: LD_ADDR_OWVAR 31
65644: PUSH
65645: LD_INT 0
65647: PPUSH
65648: LD_INT 3
65650: PPUSH
65651: CALL_OW 12
65655: PUSH
65656: LD_INT 0
65658: PPUSH
65659: LD_INT 3
65661: PPUSH
65662: CALL_OW 12
65666: PUSH
65667: LD_INT 0
65669: PUSH
65670: LD_INT 0
65672: PUSH
65673: EMPTY
65674: LIST
65675: LIST
65676: LIST
65677: LIST
65678: ST_TO_ADDR
// end ;
65679: LD_VAR 0 1
65683: RET
// export function PrepareApemanEngineer ( ) ; begin
65684: LD_INT 0
65686: PPUSH
// uc_nation := 0 ;
65687: LD_ADDR_OWVAR 21
65691: PUSH
65692: LD_INT 0
65694: ST_TO_ADDR
// hc_sex := sex_male ;
65695: LD_ADDR_OWVAR 27
65699: PUSH
65700: LD_INT 1
65702: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
65703: LD_ADDR_OWVAR 28
65707: PUSH
65708: LD_INT 16
65710: ST_TO_ADDR
// hc_gallery :=  ;
65711: LD_ADDR_OWVAR 33
65715: PUSH
65716: LD_STRING 
65718: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
65719: LD_ADDR_OWVAR 31
65723: PUSH
65724: LD_INT 0
65726: PPUSH
65727: LD_INT 3
65729: PPUSH
65730: CALL_OW 12
65734: PUSH
65735: LD_INT 0
65737: PPUSH
65738: LD_INT 3
65740: PPUSH
65741: CALL_OW 12
65745: PUSH
65746: LD_INT 0
65748: PUSH
65749: LD_INT 0
65751: PUSH
65752: EMPTY
65753: LIST
65754: LIST
65755: LIST
65756: LIST
65757: ST_TO_ADDR
// end ;
65758: LD_VAR 0 1
65762: RET
// export function PrepareApeman ( agressivity ) ; begin
65763: LD_INT 0
65765: PPUSH
// uc_side := 0 ;
65766: LD_ADDR_OWVAR 20
65770: PUSH
65771: LD_INT 0
65773: ST_TO_ADDR
// uc_nation := 0 ;
65774: LD_ADDR_OWVAR 21
65778: PUSH
65779: LD_INT 0
65781: ST_TO_ADDR
// hc_sex := sex_male ;
65782: LD_ADDR_OWVAR 27
65786: PUSH
65787: LD_INT 1
65789: ST_TO_ADDR
// hc_class := class_apeman ;
65790: LD_ADDR_OWVAR 28
65794: PUSH
65795: LD_INT 12
65797: ST_TO_ADDR
// hc_gallery :=  ;
65798: LD_ADDR_OWVAR 33
65802: PUSH
65803: LD_STRING 
65805: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
65806: LD_ADDR_OWVAR 35
65810: PUSH
65811: LD_VAR 0 1
65815: NEG
65816: PPUSH
65817: LD_VAR 0 1
65821: PPUSH
65822: CALL_OW 12
65826: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
65827: LD_ADDR_OWVAR 31
65831: PUSH
65832: LD_INT 0
65834: PPUSH
65835: LD_INT 3
65837: PPUSH
65838: CALL_OW 12
65842: PUSH
65843: LD_INT 0
65845: PPUSH
65846: LD_INT 3
65848: PPUSH
65849: CALL_OW 12
65853: PUSH
65854: LD_INT 0
65856: PUSH
65857: LD_INT 0
65859: PUSH
65860: EMPTY
65861: LIST
65862: LIST
65863: LIST
65864: LIST
65865: ST_TO_ADDR
// end ;
65866: LD_VAR 0 2
65870: RET
// export function PrepareTiger ( agressivity ) ; begin
65871: LD_INT 0
65873: PPUSH
// uc_side := 0 ;
65874: LD_ADDR_OWVAR 20
65878: PUSH
65879: LD_INT 0
65881: ST_TO_ADDR
// uc_nation := 0 ;
65882: LD_ADDR_OWVAR 21
65886: PUSH
65887: LD_INT 0
65889: ST_TO_ADDR
// hc_class := class_tiger ;
65890: LD_ADDR_OWVAR 28
65894: PUSH
65895: LD_INT 14
65897: ST_TO_ADDR
// hc_gallery :=  ;
65898: LD_ADDR_OWVAR 33
65902: PUSH
65903: LD_STRING 
65905: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
65906: LD_ADDR_OWVAR 35
65910: PUSH
65911: LD_VAR 0 1
65915: NEG
65916: PPUSH
65917: LD_VAR 0 1
65921: PPUSH
65922: CALL_OW 12
65926: ST_TO_ADDR
// end ;
65927: LD_VAR 0 2
65931: RET
// export function PrepareEnchidna ( ) ; begin
65932: LD_INT 0
65934: PPUSH
// uc_side := 0 ;
65935: LD_ADDR_OWVAR 20
65939: PUSH
65940: LD_INT 0
65942: ST_TO_ADDR
// uc_nation := 0 ;
65943: LD_ADDR_OWVAR 21
65947: PUSH
65948: LD_INT 0
65950: ST_TO_ADDR
// hc_class := class_baggie ;
65951: LD_ADDR_OWVAR 28
65955: PUSH
65956: LD_INT 13
65958: ST_TO_ADDR
// hc_gallery :=  ;
65959: LD_ADDR_OWVAR 33
65963: PUSH
65964: LD_STRING 
65966: ST_TO_ADDR
// end ;
65967: LD_VAR 0 1
65971: RET
// export function PrepareFrog ( ) ; begin
65972: LD_INT 0
65974: PPUSH
// uc_side := 0 ;
65975: LD_ADDR_OWVAR 20
65979: PUSH
65980: LD_INT 0
65982: ST_TO_ADDR
// uc_nation := 0 ;
65983: LD_ADDR_OWVAR 21
65987: PUSH
65988: LD_INT 0
65990: ST_TO_ADDR
// hc_class := class_frog ;
65991: LD_ADDR_OWVAR 28
65995: PUSH
65996: LD_INT 19
65998: ST_TO_ADDR
// hc_gallery :=  ;
65999: LD_ADDR_OWVAR 33
66003: PUSH
66004: LD_STRING 
66006: ST_TO_ADDR
// end ;
66007: LD_VAR 0 1
66011: RET
// export function PrepareFish ( ) ; begin
66012: LD_INT 0
66014: PPUSH
// uc_side := 0 ;
66015: LD_ADDR_OWVAR 20
66019: PUSH
66020: LD_INT 0
66022: ST_TO_ADDR
// uc_nation := 0 ;
66023: LD_ADDR_OWVAR 21
66027: PUSH
66028: LD_INT 0
66030: ST_TO_ADDR
// hc_class := class_fish ;
66031: LD_ADDR_OWVAR 28
66035: PUSH
66036: LD_INT 20
66038: ST_TO_ADDR
// hc_gallery :=  ;
66039: LD_ADDR_OWVAR 33
66043: PUSH
66044: LD_STRING 
66046: ST_TO_ADDR
// end ;
66047: LD_VAR 0 1
66051: RET
// export function PrepareBird ( ) ; begin
66052: LD_INT 0
66054: PPUSH
// uc_side := 0 ;
66055: LD_ADDR_OWVAR 20
66059: PUSH
66060: LD_INT 0
66062: ST_TO_ADDR
// uc_nation := 0 ;
66063: LD_ADDR_OWVAR 21
66067: PUSH
66068: LD_INT 0
66070: ST_TO_ADDR
// hc_class := class_phororhacos ;
66071: LD_ADDR_OWVAR 28
66075: PUSH
66076: LD_INT 18
66078: ST_TO_ADDR
// hc_gallery :=  ;
66079: LD_ADDR_OWVAR 33
66083: PUSH
66084: LD_STRING 
66086: ST_TO_ADDR
// end ;
66087: LD_VAR 0 1
66091: RET
// export function PrepareHorse ( ) ; begin
66092: LD_INT 0
66094: PPUSH
// uc_side := 0 ;
66095: LD_ADDR_OWVAR 20
66099: PUSH
66100: LD_INT 0
66102: ST_TO_ADDR
// uc_nation := 0 ;
66103: LD_ADDR_OWVAR 21
66107: PUSH
66108: LD_INT 0
66110: ST_TO_ADDR
// hc_class := class_horse ;
66111: LD_ADDR_OWVAR 28
66115: PUSH
66116: LD_INT 21
66118: ST_TO_ADDR
// hc_gallery :=  ;
66119: LD_ADDR_OWVAR 33
66123: PUSH
66124: LD_STRING 
66126: ST_TO_ADDR
// end ;
66127: LD_VAR 0 1
66131: RET
// export function PrepareMastodont ( ) ; begin
66132: LD_INT 0
66134: PPUSH
// uc_side := 0 ;
66135: LD_ADDR_OWVAR 20
66139: PUSH
66140: LD_INT 0
66142: ST_TO_ADDR
// uc_nation := 0 ;
66143: LD_ADDR_OWVAR 21
66147: PUSH
66148: LD_INT 0
66150: ST_TO_ADDR
// vc_chassis := class_mastodont ;
66151: LD_ADDR_OWVAR 37
66155: PUSH
66156: LD_INT 31
66158: ST_TO_ADDR
// vc_control := control_rider ;
66159: LD_ADDR_OWVAR 38
66163: PUSH
66164: LD_INT 4
66166: ST_TO_ADDR
// end ;
66167: LD_VAR 0 1
66171: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
66172: LD_INT 0
66174: PPUSH
66175: PPUSH
66176: PPUSH
// uc_side = 0 ;
66177: LD_ADDR_OWVAR 20
66181: PUSH
66182: LD_INT 0
66184: ST_TO_ADDR
// uc_nation = 0 ;
66185: LD_ADDR_OWVAR 21
66189: PUSH
66190: LD_INT 0
66192: ST_TO_ADDR
// InitHc_All ( ) ;
66193: CALL_OW 584
// InitVc ;
66197: CALL_OW 20
// if mastodonts then
66201: LD_VAR 0 6
66205: IFFALSE 66272
// for i = 1 to mastodonts do
66207: LD_ADDR_VAR 0 11
66211: PUSH
66212: DOUBLE
66213: LD_INT 1
66215: DEC
66216: ST_TO_ADDR
66217: LD_VAR 0 6
66221: PUSH
66222: FOR_TO
66223: IFFALSE 66270
// begin vc_chassis := 31 ;
66225: LD_ADDR_OWVAR 37
66229: PUSH
66230: LD_INT 31
66232: ST_TO_ADDR
// vc_control := control_rider ;
66233: LD_ADDR_OWVAR 38
66237: PUSH
66238: LD_INT 4
66240: ST_TO_ADDR
// animal := CreateVehicle ;
66241: LD_ADDR_VAR 0 12
66245: PUSH
66246: CALL_OW 45
66250: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66251: LD_VAR 0 12
66255: PPUSH
66256: LD_VAR 0 8
66260: PPUSH
66261: LD_INT 0
66263: PPUSH
66264: CALL 68407 0 3
// end ;
66268: GO 66222
66270: POP
66271: POP
// if horses then
66272: LD_VAR 0 5
66276: IFFALSE 66343
// for i = 1 to horses do
66278: LD_ADDR_VAR 0 11
66282: PUSH
66283: DOUBLE
66284: LD_INT 1
66286: DEC
66287: ST_TO_ADDR
66288: LD_VAR 0 5
66292: PUSH
66293: FOR_TO
66294: IFFALSE 66341
// begin hc_class := 21 ;
66296: LD_ADDR_OWVAR 28
66300: PUSH
66301: LD_INT 21
66303: ST_TO_ADDR
// hc_gallery :=  ;
66304: LD_ADDR_OWVAR 33
66308: PUSH
66309: LD_STRING 
66311: ST_TO_ADDR
// animal := CreateHuman ;
66312: LD_ADDR_VAR 0 12
66316: PUSH
66317: CALL_OW 44
66321: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66322: LD_VAR 0 12
66326: PPUSH
66327: LD_VAR 0 8
66331: PPUSH
66332: LD_INT 0
66334: PPUSH
66335: CALL 68407 0 3
// end ;
66339: GO 66293
66341: POP
66342: POP
// if birds then
66343: LD_VAR 0 1
66347: IFFALSE 66414
// for i = 1 to birds do
66349: LD_ADDR_VAR 0 11
66353: PUSH
66354: DOUBLE
66355: LD_INT 1
66357: DEC
66358: ST_TO_ADDR
66359: LD_VAR 0 1
66363: PUSH
66364: FOR_TO
66365: IFFALSE 66412
// begin hc_class = 18 ;
66367: LD_ADDR_OWVAR 28
66371: PUSH
66372: LD_INT 18
66374: ST_TO_ADDR
// hc_gallery =  ;
66375: LD_ADDR_OWVAR 33
66379: PUSH
66380: LD_STRING 
66382: ST_TO_ADDR
// animal := CreateHuman ;
66383: LD_ADDR_VAR 0 12
66387: PUSH
66388: CALL_OW 44
66392: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66393: LD_VAR 0 12
66397: PPUSH
66398: LD_VAR 0 8
66402: PPUSH
66403: LD_INT 0
66405: PPUSH
66406: CALL 68407 0 3
// end ;
66410: GO 66364
66412: POP
66413: POP
// if tigers then
66414: LD_VAR 0 2
66418: IFFALSE 66502
// for i = 1 to tigers do
66420: LD_ADDR_VAR 0 11
66424: PUSH
66425: DOUBLE
66426: LD_INT 1
66428: DEC
66429: ST_TO_ADDR
66430: LD_VAR 0 2
66434: PUSH
66435: FOR_TO
66436: IFFALSE 66500
// begin hc_class = class_tiger ;
66438: LD_ADDR_OWVAR 28
66442: PUSH
66443: LD_INT 14
66445: ST_TO_ADDR
// hc_gallery =  ;
66446: LD_ADDR_OWVAR 33
66450: PUSH
66451: LD_STRING 
66453: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
66454: LD_ADDR_OWVAR 35
66458: PUSH
66459: LD_INT 7
66461: NEG
66462: PPUSH
66463: LD_INT 7
66465: PPUSH
66466: CALL_OW 12
66470: ST_TO_ADDR
// animal := CreateHuman ;
66471: LD_ADDR_VAR 0 12
66475: PUSH
66476: CALL_OW 44
66480: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66481: LD_VAR 0 12
66485: PPUSH
66486: LD_VAR 0 8
66490: PPUSH
66491: LD_INT 0
66493: PPUSH
66494: CALL 68407 0 3
// end ;
66498: GO 66435
66500: POP
66501: POP
// if apemans then
66502: LD_VAR 0 3
66506: IFFALSE 66629
// for i = 1 to apemans do
66508: LD_ADDR_VAR 0 11
66512: PUSH
66513: DOUBLE
66514: LD_INT 1
66516: DEC
66517: ST_TO_ADDR
66518: LD_VAR 0 3
66522: PUSH
66523: FOR_TO
66524: IFFALSE 66627
// begin hc_class = class_apeman ;
66526: LD_ADDR_OWVAR 28
66530: PUSH
66531: LD_INT 12
66533: ST_TO_ADDR
// hc_gallery =  ;
66534: LD_ADDR_OWVAR 33
66538: PUSH
66539: LD_STRING 
66541: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
66542: LD_ADDR_OWVAR 35
66546: PUSH
66547: LD_INT 2
66549: NEG
66550: PPUSH
66551: LD_INT 2
66553: PPUSH
66554: CALL_OW 12
66558: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
66559: LD_ADDR_OWVAR 31
66563: PUSH
66564: LD_INT 1
66566: PPUSH
66567: LD_INT 3
66569: PPUSH
66570: CALL_OW 12
66574: PUSH
66575: LD_INT 1
66577: PPUSH
66578: LD_INT 3
66580: PPUSH
66581: CALL_OW 12
66585: PUSH
66586: LD_INT 0
66588: PUSH
66589: LD_INT 0
66591: PUSH
66592: EMPTY
66593: LIST
66594: LIST
66595: LIST
66596: LIST
66597: ST_TO_ADDR
// animal := CreateHuman ;
66598: LD_ADDR_VAR 0 12
66602: PUSH
66603: CALL_OW 44
66607: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66608: LD_VAR 0 12
66612: PPUSH
66613: LD_VAR 0 8
66617: PPUSH
66618: LD_INT 0
66620: PPUSH
66621: CALL 68407 0 3
// end ;
66625: GO 66523
66627: POP
66628: POP
// if enchidnas then
66629: LD_VAR 0 4
66633: IFFALSE 66700
// for i = 1 to enchidnas do
66635: LD_ADDR_VAR 0 11
66639: PUSH
66640: DOUBLE
66641: LD_INT 1
66643: DEC
66644: ST_TO_ADDR
66645: LD_VAR 0 4
66649: PUSH
66650: FOR_TO
66651: IFFALSE 66698
// begin hc_class = 13 ;
66653: LD_ADDR_OWVAR 28
66657: PUSH
66658: LD_INT 13
66660: ST_TO_ADDR
// hc_gallery =  ;
66661: LD_ADDR_OWVAR 33
66665: PUSH
66666: LD_STRING 
66668: ST_TO_ADDR
// animal := CreateHuman ;
66669: LD_ADDR_VAR 0 12
66673: PUSH
66674: CALL_OW 44
66678: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66679: LD_VAR 0 12
66683: PPUSH
66684: LD_VAR 0 8
66688: PPUSH
66689: LD_INT 0
66691: PPUSH
66692: CALL 68407 0 3
// end ;
66696: GO 66650
66698: POP
66699: POP
// if fishes then
66700: LD_VAR 0 7
66704: IFFALSE 66771
// for i = 1 to fishes do
66706: LD_ADDR_VAR 0 11
66710: PUSH
66711: DOUBLE
66712: LD_INT 1
66714: DEC
66715: ST_TO_ADDR
66716: LD_VAR 0 7
66720: PUSH
66721: FOR_TO
66722: IFFALSE 66769
// begin hc_class = 20 ;
66724: LD_ADDR_OWVAR 28
66728: PUSH
66729: LD_INT 20
66731: ST_TO_ADDR
// hc_gallery =  ;
66732: LD_ADDR_OWVAR 33
66736: PUSH
66737: LD_STRING 
66739: ST_TO_ADDR
// animal := CreateHuman ;
66740: LD_ADDR_VAR 0 12
66744: PUSH
66745: CALL_OW 44
66749: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
66750: LD_VAR 0 12
66754: PPUSH
66755: LD_VAR 0 9
66759: PPUSH
66760: LD_INT 0
66762: PPUSH
66763: CALL 68407 0 3
// end ;
66767: GO 66721
66769: POP
66770: POP
// end ;
66771: LD_VAR 0 10
66775: RET
// export function WantHeal ( sci , unit ) ; begin
66776: LD_INT 0
66778: PPUSH
// if GetTaskList ( sci ) > 0 then
66779: LD_VAR 0 1
66783: PPUSH
66784: CALL_OW 437
66788: PUSH
66789: LD_INT 0
66791: GREATER
66792: IFFALSE 66862
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
66794: LD_VAR 0 1
66798: PPUSH
66799: CALL_OW 437
66803: PUSH
66804: LD_INT 1
66806: ARRAY
66807: PUSH
66808: LD_INT 1
66810: ARRAY
66811: PUSH
66812: LD_STRING l
66814: EQUAL
66815: PUSH
66816: LD_VAR 0 1
66820: PPUSH
66821: CALL_OW 437
66825: PUSH
66826: LD_INT 1
66828: ARRAY
66829: PUSH
66830: LD_INT 4
66832: ARRAY
66833: PUSH
66834: LD_VAR 0 2
66838: EQUAL
66839: AND
66840: IFFALSE 66852
// result := true else
66842: LD_ADDR_VAR 0 3
66846: PUSH
66847: LD_INT 1
66849: ST_TO_ADDR
66850: GO 66860
// result := false ;
66852: LD_ADDR_VAR 0 3
66856: PUSH
66857: LD_INT 0
66859: ST_TO_ADDR
// end else
66860: GO 66870
// result := false ;
66862: LD_ADDR_VAR 0 3
66866: PUSH
66867: LD_INT 0
66869: ST_TO_ADDR
// end ;
66870: LD_VAR 0 3
66874: RET
// export function HealTarget ( sci ) ; begin
66875: LD_INT 0
66877: PPUSH
// if not sci then
66878: LD_VAR 0 1
66882: NOT
66883: IFFALSE 66887
// exit ;
66885: GO 66952
// result := 0 ;
66887: LD_ADDR_VAR 0 2
66891: PUSH
66892: LD_INT 0
66894: ST_TO_ADDR
// if GetTaskList ( sci ) then
66895: LD_VAR 0 1
66899: PPUSH
66900: CALL_OW 437
66904: IFFALSE 66952
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
66906: LD_VAR 0 1
66910: PPUSH
66911: CALL_OW 437
66915: PUSH
66916: LD_INT 1
66918: ARRAY
66919: PUSH
66920: LD_INT 1
66922: ARRAY
66923: PUSH
66924: LD_STRING l
66926: EQUAL
66927: IFFALSE 66952
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
66929: LD_ADDR_VAR 0 2
66933: PUSH
66934: LD_VAR 0 1
66938: PPUSH
66939: CALL_OW 437
66943: PUSH
66944: LD_INT 1
66946: ARRAY
66947: PUSH
66948: LD_INT 4
66950: ARRAY
66951: ST_TO_ADDR
// end ;
66952: LD_VAR 0 2
66956: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
66957: LD_INT 0
66959: PPUSH
66960: PPUSH
66961: PPUSH
66962: PPUSH
// if not base_units then
66963: LD_VAR 0 1
66967: NOT
66968: IFFALSE 66972
// exit ;
66970: GO 67059
// result := false ;
66972: LD_ADDR_VAR 0 2
66976: PUSH
66977: LD_INT 0
66979: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
66980: LD_ADDR_VAR 0 5
66984: PUSH
66985: LD_VAR 0 1
66989: PPUSH
66990: LD_INT 21
66992: PUSH
66993: LD_INT 3
66995: PUSH
66996: EMPTY
66997: LIST
66998: LIST
66999: PPUSH
67000: CALL_OW 72
67004: ST_TO_ADDR
// if not tmp then
67005: LD_VAR 0 5
67009: NOT
67010: IFFALSE 67014
// exit ;
67012: GO 67059
// for i in tmp do
67014: LD_ADDR_VAR 0 3
67018: PUSH
67019: LD_VAR 0 5
67023: PUSH
67024: FOR_IN
67025: IFFALSE 67057
// begin result := EnemyInRange ( i , 22 ) ;
67027: LD_ADDR_VAR 0 2
67031: PUSH
67032: LD_VAR 0 3
67036: PPUSH
67037: LD_INT 22
67039: PPUSH
67040: CALL 64745 0 2
67044: ST_TO_ADDR
// if result then
67045: LD_VAR 0 2
67049: IFFALSE 67055
// exit ;
67051: POP
67052: POP
67053: GO 67059
// end ;
67055: GO 67024
67057: POP
67058: POP
// end ;
67059: LD_VAR 0 2
67063: RET
// export function FilterByTag ( units , tag ) ; begin
67064: LD_INT 0
67066: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
67067: LD_ADDR_VAR 0 3
67071: PUSH
67072: LD_VAR 0 1
67076: PPUSH
67077: LD_INT 120
67079: PUSH
67080: LD_VAR 0 2
67084: PUSH
67085: EMPTY
67086: LIST
67087: LIST
67088: PPUSH
67089: CALL_OW 72
67093: ST_TO_ADDR
// end ;
67094: LD_VAR 0 3
67098: RET
// export function IsDriver ( un ) ; begin
67099: LD_INT 0
67101: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
67102: LD_ADDR_VAR 0 2
67106: PUSH
67107: LD_VAR 0 1
67111: PUSH
67112: LD_INT 55
67114: PUSH
67115: EMPTY
67116: LIST
67117: PPUSH
67118: CALL_OW 69
67122: IN
67123: ST_TO_ADDR
// end ;
67124: LD_VAR 0 2
67128: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
67129: LD_INT 0
67131: PPUSH
67132: PPUSH
// list := [ ] ;
67133: LD_ADDR_VAR 0 5
67137: PUSH
67138: EMPTY
67139: ST_TO_ADDR
// case d of 0 :
67140: LD_VAR 0 3
67144: PUSH
67145: LD_INT 0
67147: DOUBLE
67148: EQUAL
67149: IFTRUE 67153
67151: GO 67286
67153: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
67154: LD_ADDR_VAR 0 5
67158: PUSH
67159: LD_VAR 0 1
67163: PUSH
67164: LD_INT 4
67166: MINUS
67167: PUSH
67168: LD_VAR 0 2
67172: PUSH
67173: LD_INT 4
67175: MINUS
67176: PUSH
67177: LD_INT 2
67179: PUSH
67180: EMPTY
67181: LIST
67182: LIST
67183: LIST
67184: PUSH
67185: LD_VAR 0 1
67189: PUSH
67190: LD_INT 3
67192: MINUS
67193: PUSH
67194: LD_VAR 0 2
67198: PUSH
67199: LD_INT 1
67201: PUSH
67202: EMPTY
67203: LIST
67204: LIST
67205: LIST
67206: PUSH
67207: LD_VAR 0 1
67211: PUSH
67212: LD_INT 4
67214: PLUS
67215: PUSH
67216: LD_VAR 0 2
67220: PUSH
67221: LD_INT 4
67223: PUSH
67224: EMPTY
67225: LIST
67226: LIST
67227: LIST
67228: PUSH
67229: LD_VAR 0 1
67233: PUSH
67234: LD_INT 3
67236: PLUS
67237: PUSH
67238: LD_VAR 0 2
67242: PUSH
67243: LD_INT 3
67245: PLUS
67246: PUSH
67247: LD_INT 5
67249: PUSH
67250: EMPTY
67251: LIST
67252: LIST
67253: LIST
67254: PUSH
67255: LD_VAR 0 1
67259: PUSH
67260: LD_VAR 0 2
67264: PUSH
67265: LD_INT 4
67267: PLUS
67268: PUSH
67269: LD_INT 0
67271: PUSH
67272: EMPTY
67273: LIST
67274: LIST
67275: LIST
67276: PUSH
67277: EMPTY
67278: LIST
67279: LIST
67280: LIST
67281: LIST
67282: LIST
67283: ST_TO_ADDR
// end ; 1 :
67284: GO 67984
67286: LD_INT 1
67288: DOUBLE
67289: EQUAL
67290: IFTRUE 67294
67292: GO 67427
67294: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
67295: LD_ADDR_VAR 0 5
67299: PUSH
67300: LD_VAR 0 1
67304: PUSH
67305: LD_VAR 0 2
67309: PUSH
67310: LD_INT 4
67312: MINUS
67313: PUSH
67314: LD_INT 3
67316: PUSH
67317: EMPTY
67318: LIST
67319: LIST
67320: LIST
67321: PUSH
67322: LD_VAR 0 1
67326: PUSH
67327: LD_INT 3
67329: MINUS
67330: PUSH
67331: LD_VAR 0 2
67335: PUSH
67336: LD_INT 3
67338: MINUS
67339: PUSH
67340: LD_INT 2
67342: PUSH
67343: EMPTY
67344: LIST
67345: LIST
67346: LIST
67347: PUSH
67348: LD_VAR 0 1
67352: PUSH
67353: LD_INT 4
67355: MINUS
67356: PUSH
67357: LD_VAR 0 2
67361: PUSH
67362: LD_INT 1
67364: PUSH
67365: EMPTY
67366: LIST
67367: LIST
67368: LIST
67369: PUSH
67370: LD_VAR 0 1
67374: PUSH
67375: LD_VAR 0 2
67379: PUSH
67380: LD_INT 3
67382: PLUS
67383: PUSH
67384: LD_INT 0
67386: PUSH
67387: EMPTY
67388: LIST
67389: LIST
67390: LIST
67391: PUSH
67392: LD_VAR 0 1
67396: PUSH
67397: LD_INT 4
67399: PLUS
67400: PUSH
67401: LD_VAR 0 2
67405: PUSH
67406: LD_INT 4
67408: PLUS
67409: PUSH
67410: LD_INT 5
67412: PUSH
67413: EMPTY
67414: LIST
67415: LIST
67416: LIST
67417: PUSH
67418: EMPTY
67419: LIST
67420: LIST
67421: LIST
67422: LIST
67423: LIST
67424: ST_TO_ADDR
// end ; 2 :
67425: GO 67984
67427: LD_INT 2
67429: DOUBLE
67430: EQUAL
67431: IFTRUE 67435
67433: GO 67564
67435: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
67436: LD_ADDR_VAR 0 5
67440: PUSH
67441: LD_VAR 0 1
67445: PUSH
67446: LD_VAR 0 2
67450: PUSH
67451: LD_INT 3
67453: MINUS
67454: PUSH
67455: LD_INT 3
67457: PUSH
67458: EMPTY
67459: LIST
67460: LIST
67461: LIST
67462: PUSH
67463: LD_VAR 0 1
67467: PUSH
67468: LD_INT 4
67470: PLUS
67471: PUSH
67472: LD_VAR 0 2
67476: PUSH
67477: LD_INT 4
67479: PUSH
67480: EMPTY
67481: LIST
67482: LIST
67483: LIST
67484: PUSH
67485: LD_VAR 0 1
67489: PUSH
67490: LD_VAR 0 2
67494: PUSH
67495: LD_INT 4
67497: PLUS
67498: PUSH
67499: LD_INT 0
67501: PUSH
67502: EMPTY
67503: LIST
67504: LIST
67505: LIST
67506: PUSH
67507: LD_VAR 0 1
67511: PUSH
67512: LD_INT 3
67514: MINUS
67515: PUSH
67516: LD_VAR 0 2
67520: PUSH
67521: LD_INT 1
67523: PUSH
67524: EMPTY
67525: LIST
67526: LIST
67527: LIST
67528: PUSH
67529: LD_VAR 0 1
67533: PUSH
67534: LD_INT 4
67536: MINUS
67537: PUSH
67538: LD_VAR 0 2
67542: PUSH
67543: LD_INT 4
67545: MINUS
67546: PUSH
67547: LD_INT 2
67549: PUSH
67550: EMPTY
67551: LIST
67552: LIST
67553: LIST
67554: PUSH
67555: EMPTY
67556: LIST
67557: LIST
67558: LIST
67559: LIST
67560: LIST
67561: ST_TO_ADDR
// end ; 3 :
67562: GO 67984
67564: LD_INT 3
67566: DOUBLE
67567: EQUAL
67568: IFTRUE 67572
67570: GO 67705
67572: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
67573: LD_ADDR_VAR 0 5
67577: PUSH
67578: LD_VAR 0 1
67582: PUSH
67583: LD_INT 3
67585: PLUS
67586: PUSH
67587: LD_VAR 0 2
67591: PUSH
67592: LD_INT 4
67594: PUSH
67595: EMPTY
67596: LIST
67597: LIST
67598: LIST
67599: PUSH
67600: LD_VAR 0 1
67604: PUSH
67605: LD_INT 4
67607: PLUS
67608: PUSH
67609: LD_VAR 0 2
67613: PUSH
67614: LD_INT 4
67616: PLUS
67617: PUSH
67618: LD_INT 5
67620: PUSH
67621: EMPTY
67622: LIST
67623: LIST
67624: LIST
67625: PUSH
67626: LD_VAR 0 1
67630: PUSH
67631: LD_INT 4
67633: MINUS
67634: PUSH
67635: LD_VAR 0 2
67639: PUSH
67640: LD_INT 1
67642: PUSH
67643: EMPTY
67644: LIST
67645: LIST
67646: LIST
67647: PUSH
67648: LD_VAR 0 1
67652: PUSH
67653: LD_VAR 0 2
67657: PUSH
67658: LD_INT 4
67660: MINUS
67661: PUSH
67662: LD_INT 3
67664: PUSH
67665: EMPTY
67666: LIST
67667: LIST
67668: LIST
67669: PUSH
67670: LD_VAR 0 1
67674: PUSH
67675: LD_INT 3
67677: MINUS
67678: PUSH
67679: LD_VAR 0 2
67683: PUSH
67684: LD_INT 3
67686: MINUS
67687: PUSH
67688: LD_INT 2
67690: PUSH
67691: EMPTY
67692: LIST
67693: LIST
67694: LIST
67695: PUSH
67696: EMPTY
67697: LIST
67698: LIST
67699: LIST
67700: LIST
67701: LIST
67702: ST_TO_ADDR
// end ; 4 :
67703: GO 67984
67705: LD_INT 4
67707: DOUBLE
67708: EQUAL
67709: IFTRUE 67713
67711: GO 67846
67713: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
67714: LD_ADDR_VAR 0 5
67718: PUSH
67719: LD_VAR 0 1
67723: PUSH
67724: LD_VAR 0 2
67728: PUSH
67729: LD_INT 4
67731: PLUS
67732: PUSH
67733: LD_INT 0
67735: PUSH
67736: EMPTY
67737: LIST
67738: LIST
67739: LIST
67740: PUSH
67741: LD_VAR 0 1
67745: PUSH
67746: LD_INT 3
67748: PLUS
67749: PUSH
67750: LD_VAR 0 2
67754: PUSH
67755: LD_INT 3
67757: PLUS
67758: PUSH
67759: LD_INT 5
67761: PUSH
67762: EMPTY
67763: LIST
67764: LIST
67765: LIST
67766: PUSH
67767: LD_VAR 0 1
67771: PUSH
67772: LD_INT 4
67774: PLUS
67775: PUSH
67776: LD_VAR 0 2
67780: PUSH
67781: LD_INT 4
67783: PUSH
67784: EMPTY
67785: LIST
67786: LIST
67787: LIST
67788: PUSH
67789: LD_VAR 0 1
67793: PUSH
67794: LD_VAR 0 2
67798: PUSH
67799: LD_INT 3
67801: MINUS
67802: PUSH
67803: LD_INT 3
67805: PUSH
67806: EMPTY
67807: LIST
67808: LIST
67809: LIST
67810: PUSH
67811: LD_VAR 0 1
67815: PUSH
67816: LD_INT 4
67818: MINUS
67819: PUSH
67820: LD_VAR 0 2
67824: PUSH
67825: LD_INT 4
67827: MINUS
67828: PUSH
67829: LD_INT 2
67831: PUSH
67832: EMPTY
67833: LIST
67834: LIST
67835: LIST
67836: PUSH
67837: EMPTY
67838: LIST
67839: LIST
67840: LIST
67841: LIST
67842: LIST
67843: ST_TO_ADDR
// end ; 5 :
67844: GO 67984
67846: LD_INT 5
67848: DOUBLE
67849: EQUAL
67850: IFTRUE 67854
67852: GO 67983
67854: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
67855: LD_ADDR_VAR 0 5
67859: PUSH
67860: LD_VAR 0 1
67864: PUSH
67865: LD_INT 4
67867: MINUS
67868: PUSH
67869: LD_VAR 0 2
67873: PUSH
67874: LD_INT 1
67876: PUSH
67877: EMPTY
67878: LIST
67879: LIST
67880: LIST
67881: PUSH
67882: LD_VAR 0 1
67886: PUSH
67887: LD_VAR 0 2
67891: PUSH
67892: LD_INT 4
67894: MINUS
67895: PUSH
67896: LD_INT 3
67898: PUSH
67899: EMPTY
67900: LIST
67901: LIST
67902: LIST
67903: PUSH
67904: LD_VAR 0 1
67908: PUSH
67909: LD_INT 4
67911: PLUS
67912: PUSH
67913: LD_VAR 0 2
67917: PUSH
67918: LD_INT 4
67920: PLUS
67921: PUSH
67922: LD_INT 5
67924: PUSH
67925: EMPTY
67926: LIST
67927: LIST
67928: LIST
67929: PUSH
67930: LD_VAR 0 1
67934: PUSH
67935: LD_INT 3
67937: PLUS
67938: PUSH
67939: LD_VAR 0 2
67943: PUSH
67944: LD_INT 4
67946: PUSH
67947: EMPTY
67948: LIST
67949: LIST
67950: LIST
67951: PUSH
67952: LD_VAR 0 1
67956: PUSH
67957: LD_VAR 0 2
67961: PUSH
67962: LD_INT 3
67964: PLUS
67965: PUSH
67966: LD_INT 0
67968: PUSH
67969: EMPTY
67970: LIST
67971: LIST
67972: LIST
67973: PUSH
67974: EMPTY
67975: LIST
67976: LIST
67977: LIST
67978: LIST
67979: LIST
67980: ST_TO_ADDR
// end ; end ;
67981: GO 67984
67983: POP
// result := list ;
67984: LD_ADDR_VAR 0 4
67988: PUSH
67989: LD_VAR 0 5
67993: ST_TO_ADDR
// end ;
67994: LD_VAR 0 4
67998: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
67999: LD_INT 0
68001: PPUSH
68002: PPUSH
68003: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
68004: LD_VAR 0 1
68008: NOT
68009: PUSH
68010: LD_VAR 0 2
68014: PUSH
68015: LD_INT 1
68017: PUSH
68018: LD_INT 2
68020: PUSH
68021: LD_INT 3
68023: PUSH
68024: LD_INT 4
68026: PUSH
68027: EMPTY
68028: LIST
68029: LIST
68030: LIST
68031: LIST
68032: IN
68033: NOT
68034: OR
68035: IFFALSE 68039
// exit ;
68037: GO 68131
// tmp := [ ] ;
68039: LD_ADDR_VAR 0 5
68043: PUSH
68044: EMPTY
68045: ST_TO_ADDR
// for i in units do
68046: LD_ADDR_VAR 0 4
68050: PUSH
68051: LD_VAR 0 1
68055: PUSH
68056: FOR_IN
68057: IFFALSE 68100
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
68059: LD_ADDR_VAR 0 5
68063: PUSH
68064: LD_VAR 0 5
68068: PPUSH
68069: LD_VAR 0 5
68073: PUSH
68074: LD_INT 1
68076: PLUS
68077: PPUSH
68078: LD_VAR 0 4
68082: PPUSH
68083: LD_VAR 0 2
68087: PPUSH
68088: CALL_OW 259
68092: PPUSH
68093: CALL_OW 2
68097: ST_TO_ADDR
68098: GO 68056
68100: POP
68101: POP
// if not tmp then
68102: LD_VAR 0 5
68106: NOT
68107: IFFALSE 68111
// exit ;
68109: GO 68131
// result := SortListByListDesc ( units , tmp ) ;
68111: LD_ADDR_VAR 0 3
68115: PUSH
68116: LD_VAR 0 1
68120: PPUSH
68121: LD_VAR 0 5
68125: PPUSH
68126: CALL_OW 77
68130: ST_TO_ADDR
// end ;
68131: LD_VAR 0 3
68135: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
68136: LD_INT 0
68138: PPUSH
68139: PPUSH
68140: PPUSH
// result := false ;
68141: LD_ADDR_VAR 0 3
68145: PUSH
68146: LD_INT 0
68148: ST_TO_ADDR
// x := GetX ( building ) ;
68149: LD_ADDR_VAR 0 4
68153: PUSH
68154: LD_VAR 0 2
68158: PPUSH
68159: CALL_OW 250
68163: ST_TO_ADDR
// y := GetY ( building ) ;
68164: LD_ADDR_VAR 0 5
68168: PUSH
68169: LD_VAR 0 2
68173: PPUSH
68174: CALL_OW 251
68178: ST_TO_ADDR
// if not building or not x or not y then
68179: LD_VAR 0 2
68183: NOT
68184: PUSH
68185: LD_VAR 0 4
68189: NOT
68190: OR
68191: PUSH
68192: LD_VAR 0 5
68196: NOT
68197: OR
68198: IFFALSE 68202
// exit ;
68200: GO 68294
// if GetTaskList ( unit ) then
68202: LD_VAR 0 1
68206: PPUSH
68207: CALL_OW 437
68211: IFFALSE 68294
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
68213: LD_STRING e
68215: PUSH
68216: LD_VAR 0 1
68220: PPUSH
68221: CALL_OW 437
68225: PUSH
68226: LD_INT 1
68228: ARRAY
68229: PUSH
68230: LD_INT 1
68232: ARRAY
68233: EQUAL
68234: PUSH
68235: LD_VAR 0 4
68239: PUSH
68240: LD_VAR 0 1
68244: PPUSH
68245: CALL_OW 437
68249: PUSH
68250: LD_INT 1
68252: ARRAY
68253: PUSH
68254: LD_INT 2
68256: ARRAY
68257: EQUAL
68258: AND
68259: PUSH
68260: LD_VAR 0 5
68264: PUSH
68265: LD_VAR 0 1
68269: PPUSH
68270: CALL_OW 437
68274: PUSH
68275: LD_INT 1
68277: ARRAY
68278: PUSH
68279: LD_INT 3
68281: ARRAY
68282: EQUAL
68283: AND
68284: IFFALSE 68294
// result := true end ;
68286: LD_ADDR_VAR 0 3
68290: PUSH
68291: LD_INT 1
68293: ST_TO_ADDR
// end ;
68294: LD_VAR 0 3
68298: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
68299: LD_INT 0
68301: PPUSH
// result := false ;
68302: LD_ADDR_VAR 0 4
68306: PUSH
68307: LD_INT 0
68309: ST_TO_ADDR
// if GetTaskList ( unit ) then
68310: LD_VAR 0 1
68314: PPUSH
68315: CALL_OW 437
68319: IFFALSE 68402
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
68321: LD_STRING M
68323: PUSH
68324: LD_VAR 0 1
68328: PPUSH
68329: CALL_OW 437
68333: PUSH
68334: LD_INT 1
68336: ARRAY
68337: PUSH
68338: LD_INT 1
68340: ARRAY
68341: EQUAL
68342: PUSH
68343: LD_VAR 0 2
68347: PUSH
68348: LD_VAR 0 1
68352: PPUSH
68353: CALL_OW 437
68357: PUSH
68358: LD_INT 1
68360: ARRAY
68361: PUSH
68362: LD_INT 2
68364: ARRAY
68365: EQUAL
68366: AND
68367: PUSH
68368: LD_VAR 0 3
68372: PUSH
68373: LD_VAR 0 1
68377: PPUSH
68378: CALL_OW 437
68382: PUSH
68383: LD_INT 1
68385: ARRAY
68386: PUSH
68387: LD_INT 3
68389: ARRAY
68390: EQUAL
68391: AND
68392: IFFALSE 68402
// result := true ;
68394: LD_ADDR_VAR 0 4
68398: PUSH
68399: LD_INT 1
68401: ST_TO_ADDR
// end ; end ;
68402: LD_VAR 0 4
68406: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
68407: LD_INT 0
68409: PPUSH
68410: PPUSH
68411: PPUSH
68412: PPUSH
// if not unit or not area then
68413: LD_VAR 0 1
68417: NOT
68418: PUSH
68419: LD_VAR 0 2
68423: NOT
68424: OR
68425: IFFALSE 68429
// exit ;
68427: GO 68593
// tmp := AreaToList ( area , i ) ;
68429: LD_ADDR_VAR 0 6
68433: PUSH
68434: LD_VAR 0 2
68438: PPUSH
68439: LD_VAR 0 5
68443: PPUSH
68444: CALL_OW 517
68448: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
68449: LD_ADDR_VAR 0 5
68453: PUSH
68454: DOUBLE
68455: LD_INT 1
68457: DEC
68458: ST_TO_ADDR
68459: LD_VAR 0 6
68463: PUSH
68464: LD_INT 1
68466: ARRAY
68467: PUSH
68468: FOR_TO
68469: IFFALSE 68591
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
68471: LD_ADDR_VAR 0 7
68475: PUSH
68476: LD_VAR 0 6
68480: PUSH
68481: LD_INT 1
68483: ARRAY
68484: PUSH
68485: LD_VAR 0 5
68489: ARRAY
68490: PUSH
68491: LD_VAR 0 6
68495: PUSH
68496: LD_INT 2
68498: ARRAY
68499: PUSH
68500: LD_VAR 0 5
68504: ARRAY
68505: PUSH
68506: EMPTY
68507: LIST
68508: LIST
68509: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
68510: LD_VAR 0 7
68514: PUSH
68515: LD_INT 1
68517: ARRAY
68518: PPUSH
68519: LD_VAR 0 7
68523: PUSH
68524: LD_INT 2
68526: ARRAY
68527: PPUSH
68528: CALL_OW 428
68532: PUSH
68533: LD_INT 0
68535: EQUAL
68536: IFFALSE 68589
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
68538: LD_VAR 0 1
68542: PPUSH
68543: LD_VAR 0 7
68547: PUSH
68548: LD_INT 1
68550: ARRAY
68551: PPUSH
68552: LD_VAR 0 7
68556: PUSH
68557: LD_INT 2
68559: ARRAY
68560: PPUSH
68561: LD_VAR 0 3
68565: PPUSH
68566: CALL_OW 48
// result := IsPlaced ( unit ) ;
68570: LD_ADDR_VAR 0 4
68574: PUSH
68575: LD_VAR 0 1
68579: PPUSH
68580: CALL_OW 305
68584: ST_TO_ADDR
// exit ;
68585: POP
68586: POP
68587: GO 68593
// end ; end ;
68589: GO 68468
68591: POP
68592: POP
// end ;
68593: LD_VAR 0 4
68597: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
68598: LD_INT 0
68600: PPUSH
68601: PPUSH
68602: PPUSH
// if not side or side > 8 then
68603: LD_VAR 0 1
68607: NOT
68608: PUSH
68609: LD_VAR 0 1
68613: PUSH
68614: LD_INT 8
68616: GREATER
68617: OR
68618: IFFALSE 68622
// exit ;
68620: GO 68809
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
68622: LD_ADDR_VAR 0 4
68626: PUSH
68627: LD_INT 22
68629: PUSH
68630: LD_VAR 0 1
68634: PUSH
68635: EMPTY
68636: LIST
68637: LIST
68638: PUSH
68639: LD_INT 21
68641: PUSH
68642: LD_INT 3
68644: PUSH
68645: EMPTY
68646: LIST
68647: LIST
68648: PUSH
68649: EMPTY
68650: LIST
68651: LIST
68652: PPUSH
68653: CALL_OW 69
68657: ST_TO_ADDR
// if not tmp then
68658: LD_VAR 0 4
68662: NOT
68663: IFFALSE 68667
// exit ;
68665: GO 68809
// enable_addtolog := true ;
68667: LD_ADDR_OWVAR 81
68671: PUSH
68672: LD_INT 1
68674: ST_TO_ADDR
// AddToLog ( [ ) ;
68675: LD_STRING [
68677: PPUSH
68678: CALL_OW 561
// for i in tmp do
68682: LD_ADDR_VAR 0 3
68686: PUSH
68687: LD_VAR 0 4
68691: PUSH
68692: FOR_IN
68693: IFFALSE 68800
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
68695: LD_STRING [
68697: PUSH
68698: LD_VAR 0 3
68702: PPUSH
68703: CALL_OW 266
68707: STR
68708: PUSH
68709: LD_STRING , 
68711: STR
68712: PUSH
68713: LD_VAR 0 3
68717: PPUSH
68718: CALL_OW 250
68722: STR
68723: PUSH
68724: LD_STRING , 
68726: STR
68727: PUSH
68728: LD_VAR 0 3
68732: PPUSH
68733: CALL_OW 251
68737: STR
68738: PUSH
68739: LD_STRING , 
68741: STR
68742: PUSH
68743: LD_VAR 0 3
68747: PPUSH
68748: CALL_OW 254
68752: STR
68753: PUSH
68754: LD_STRING , 
68756: STR
68757: PUSH
68758: LD_VAR 0 3
68762: PPUSH
68763: LD_INT 1
68765: PPUSH
68766: CALL_OW 268
68770: STR
68771: PUSH
68772: LD_STRING , 
68774: STR
68775: PUSH
68776: LD_VAR 0 3
68780: PPUSH
68781: LD_INT 2
68783: PPUSH
68784: CALL_OW 268
68788: STR
68789: PUSH
68790: LD_STRING ],
68792: STR
68793: PPUSH
68794: CALL_OW 561
// end ;
68798: GO 68692
68800: POP
68801: POP
// AddToLog ( ]; ) ;
68802: LD_STRING ];
68804: PPUSH
68805: CALL_OW 561
// end ;
68809: LD_VAR 0 2
68813: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
68814: LD_INT 0
68816: PPUSH
68817: PPUSH
68818: PPUSH
68819: PPUSH
68820: PPUSH
// if not area or not rate or not max then
68821: LD_VAR 0 1
68825: NOT
68826: PUSH
68827: LD_VAR 0 2
68831: NOT
68832: OR
68833: PUSH
68834: LD_VAR 0 4
68838: NOT
68839: OR
68840: IFFALSE 68844
// exit ;
68842: GO 69033
// while 1 do
68844: LD_INT 1
68846: IFFALSE 69033
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
68848: LD_ADDR_VAR 0 9
68852: PUSH
68853: LD_VAR 0 1
68857: PPUSH
68858: LD_INT 1
68860: PPUSH
68861: CALL_OW 287
68865: PUSH
68866: LD_INT 10
68868: MUL
68869: ST_TO_ADDR
// r := rate / 10 ;
68870: LD_ADDR_VAR 0 7
68874: PUSH
68875: LD_VAR 0 2
68879: PUSH
68880: LD_INT 10
68882: DIVREAL
68883: ST_TO_ADDR
// time := 1 1$00 ;
68884: LD_ADDR_VAR 0 8
68888: PUSH
68889: LD_INT 2100
68891: ST_TO_ADDR
// if amount < min then
68892: LD_VAR 0 9
68896: PUSH
68897: LD_VAR 0 3
68901: LESS
68902: IFFALSE 68920
// r := r * 2 else
68904: LD_ADDR_VAR 0 7
68908: PUSH
68909: LD_VAR 0 7
68913: PUSH
68914: LD_INT 2
68916: MUL
68917: ST_TO_ADDR
68918: GO 68946
// if amount > max then
68920: LD_VAR 0 9
68924: PUSH
68925: LD_VAR 0 4
68929: GREATER
68930: IFFALSE 68946
// r := r / 2 ;
68932: LD_ADDR_VAR 0 7
68936: PUSH
68937: LD_VAR 0 7
68941: PUSH
68942: LD_INT 2
68944: DIVREAL
68945: ST_TO_ADDR
// time := time / r ;
68946: LD_ADDR_VAR 0 8
68950: PUSH
68951: LD_VAR 0 8
68955: PUSH
68956: LD_VAR 0 7
68960: DIVREAL
68961: ST_TO_ADDR
// if time < 0 then
68962: LD_VAR 0 8
68966: PUSH
68967: LD_INT 0
68969: LESS
68970: IFFALSE 68987
// time := time * - 1 ;
68972: LD_ADDR_VAR 0 8
68976: PUSH
68977: LD_VAR 0 8
68981: PUSH
68982: LD_INT 1
68984: NEG
68985: MUL
68986: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
68987: LD_VAR 0 8
68991: PUSH
68992: LD_INT 35
68994: PPUSH
68995: LD_INT 875
68997: PPUSH
68998: CALL_OW 12
69002: PLUS
69003: PPUSH
69004: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
69008: LD_INT 1
69010: PPUSH
69011: LD_INT 5
69013: PPUSH
69014: CALL_OW 12
69018: PPUSH
69019: LD_VAR 0 1
69023: PPUSH
69024: LD_INT 1
69026: PPUSH
69027: CALL_OW 55
// end ;
69031: GO 68844
// end ;
69033: LD_VAR 0 5
69037: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
69038: LD_INT 0
69040: PPUSH
69041: PPUSH
69042: PPUSH
69043: PPUSH
69044: PPUSH
69045: PPUSH
69046: PPUSH
69047: PPUSH
// if not turrets or not factories then
69048: LD_VAR 0 1
69052: NOT
69053: PUSH
69054: LD_VAR 0 2
69058: NOT
69059: OR
69060: IFFALSE 69064
// exit ;
69062: GO 69371
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
69064: LD_ADDR_VAR 0 10
69068: PUSH
69069: LD_INT 5
69071: PUSH
69072: LD_INT 6
69074: PUSH
69075: EMPTY
69076: LIST
69077: LIST
69078: PUSH
69079: LD_INT 2
69081: PUSH
69082: LD_INT 4
69084: PUSH
69085: EMPTY
69086: LIST
69087: LIST
69088: PUSH
69089: LD_INT 3
69091: PUSH
69092: LD_INT 5
69094: PUSH
69095: EMPTY
69096: LIST
69097: LIST
69098: PUSH
69099: EMPTY
69100: LIST
69101: LIST
69102: LIST
69103: PUSH
69104: LD_INT 24
69106: PUSH
69107: LD_INT 25
69109: PUSH
69110: EMPTY
69111: LIST
69112: LIST
69113: PUSH
69114: LD_INT 23
69116: PUSH
69117: LD_INT 27
69119: PUSH
69120: EMPTY
69121: LIST
69122: LIST
69123: PUSH
69124: EMPTY
69125: LIST
69126: LIST
69127: PUSH
69128: LD_INT 42
69130: PUSH
69131: LD_INT 43
69133: PUSH
69134: EMPTY
69135: LIST
69136: LIST
69137: PUSH
69138: LD_INT 44
69140: PUSH
69141: LD_INT 46
69143: PUSH
69144: EMPTY
69145: LIST
69146: LIST
69147: PUSH
69148: LD_INT 45
69150: PUSH
69151: LD_INT 47
69153: PUSH
69154: EMPTY
69155: LIST
69156: LIST
69157: PUSH
69158: EMPTY
69159: LIST
69160: LIST
69161: LIST
69162: PUSH
69163: EMPTY
69164: LIST
69165: LIST
69166: LIST
69167: ST_TO_ADDR
// result := [ ] ;
69168: LD_ADDR_VAR 0 3
69172: PUSH
69173: EMPTY
69174: ST_TO_ADDR
// for i in turrets do
69175: LD_ADDR_VAR 0 4
69179: PUSH
69180: LD_VAR 0 1
69184: PUSH
69185: FOR_IN
69186: IFFALSE 69369
// begin nat := GetNation ( i ) ;
69188: LD_ADDR_VAR 0 7
69192: PUSH
69193: LD_VAR 0 4
69197: PPUSH
69198: CALL_OW 248
69202: ST_TO_ADDR
// weapon := 0 ;
69203: LD_ADDR_VAR 0 8
69207: PUSH
69208: LD_INT 0
69210: ST_TO_ADDR
// if not nat then
69211: LD_VAR 0 7
69215: NOT
69216: IFFALSE 69220
// continue ;
69218: GO 69185
// for j in list [ nat ] do
69220: LD_ADDR_VAR 0 5
69224: PUSH
69225: LD_VAR 0 10
69229: PUSH
69230: LD_VAR 0 7
69234: ARRAY
69235: PUSH
69236: FOR_IN
69237: IFFALSE 69278
// if GetBWeapon ( i ) = j [ 1 ] then
69239: LD_VAR 0 4
69243: PPUSH
69244: CALL_OW 269
69248: PUSH
69249: LD_VAR 0 5
69253: PUSH
69254: LD_INT 1
69256: ARRAY
69257: EQUAL
69258: IFFALSE 69276
// begin weapon := j [ 2 ] ;
69260: LD_ADDR_VAR 0 8
69264: PUSH
69265: LD_VAR 0 5
69269: PUSH
69270: LD_INT 2
69272: ARRAY
69273: ST_TO_ADDR
// break ;
69274: GO 69278
// end ;
69276: GO 69236
69278: POP
69279: POP
// if not weapon then
69280: LD_VAR 0 8
69284: NOT
69285: IFFALSE 69289
// continue ;
69287: GO 69185
// for k in factories do
69289: LD_ADDR_VAR 0 6
69293: PUSH
69294: LD_VAR 0 2
69298: PUSH
69299: FOR_IN
69300: IFFALSE 69365
// begin weapons := AvailableWeaponList ( k ) ;
69302: LD_ADDR_VAR 0 9
69306: PUSH
69307: LD_VAR 0 6
69311: PPUSH
69312: CALL_OW 478
69316: ST_TO_ADDR
// if not weapons then
69317: LD_VAR 0 9
69321: NOT
69322: IFFALSE 69326
// continue ;
69324: GO 69299
// if weapon in weapons then
69326: LD_VAR 0 8
69330: PUSH
69331: LD_VAR 0 9
69335: IN
69336: IFFALSE 69363
// begin result := [ i , weapon ] ;
69338: LD_ADDR_VAR 0 3
69342: PUSH
69343: LD_VAR 0 4
69347: PUSH
69348: LD_VAR 0 8
69352: PUSH
69353: EMPTY
69354: LIST
69355: LIST
69356: ST_TO_ADDR
// exit ;
69357: POP
69358: POP
69359: POP
69360: POP
69361: GO 69371
// end ; end ;
69363: GO 69299
69365: POP
69366: POP
// end ;
69367: GO 69185
69369: POP
69370: POP
// end ;
69371: LD_VAR 0 3
69375: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
69376: LD_INT 0
69378: PPUSH
// if not side or side > 8 then
69379: LD_VAR 0 3
69383: NOT
69384: PUSH
69385: LD_VAR 0 3
69389: PUSH
69390: LD_INT 8
69392: GREATER
69393: OR
69394: IFFALSE 69398
// exit ;
69396: GO 69457
// if not range then
69398: LD_VAR 0 4
69402: NOT
69403: IFFALSE 69414
// range := - 12 ;
69405: LD_ADDR_VAR 0 4
69409: PUSH
69410: LD_INT 12
69412: NEG
69413: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
69414: LD_VAR 0 1
69418: PPUSH
69419: LD_VAR 0 2
69423: PPUSH
69424: LD_VAR 0 3
69428: PPUSH
69429: LD_VAR 0 4
69433: PPUSH
69434: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
69438: LD_VAR 0 1
69442: PPUSH
69443: LD_VAR 0 2
69447: PPUSH
69448: LD_VAR 0 3
69452: PPUSH
69453: CALL_OW 331
// end ;
69457: LD_VAR 0 5
69461: RET
// export function Video ( mode ) ; begin
69462: LD_INT 0
69464: PPUSH
// ingame_video = mode ;
69465: LD_ADDR_OWVAR 52
69469: PUSH
69470: LD_VAR 0 1
69474: ST_TO_ADDR
// interface_hidden = mode ;
69475: LD_ADDR_OWVAR 54
69479: PUSH
69480: LD_VAR 0 1
69484: ST_TO_ADDR
// end ;
69485: LD_VAR 0 2
69489: RET
// export function Join ( array , element ) ; begin
69490: LD_INT 0
69492: PPUSH
// result := Replace ( array , array + 1 , element ) ;
69493: LD_ADDR_VAR 0 3
69497: PUSH
69498: LD_VAR 0 1
69502: PPUSH
69503: LD_VAR 0 1
69507: PUSH
69508: LD_INT 1
69510: PLUS
69511: PPUSH
69512: LD_VAR 0 2
69516: PPUSH
69517: CALL_OW 1
69521: ST_TO_ADDR
// end ;
69522: LD_VAR 0 3
69526: RET
// export function JoinUnion ( array , element ) ; begin
69527: LD_INT 0
69529: PPUSH
// result := array union element ;
69530: LD_ADDR_VAR 0 3
69534: PUSH
69535: LD_VAR 0 1
69539: PUSH
69540: LD_VAR 0 2
69544: UNION
69545: ST_TO_ADDR
// end ;
69546: LD_VAR 0 3
69550: RET
// export function GetBehemoths ( side ) ; begin
69551: LD_INT 0
69553: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
69554: LD_ADDR_VAR 0 2
69558: PUSH
69559: LD_INT 22
69561: PUSH
69562: LD_VAR 0 1
69566: PUSH
69567: EMPTY
69568: LIST
69569: LIST
69570: PUSH
69571: LD_INT 31
69573: PUSH
69574: LD_INT 25
69576: PUSH
69577: EMPTY
69578: LIST
69579: LIST
69580: PUSH
69581: EMPTY
69582: LIST
69583: LIST
69584: PPUSH
69585: CALL_OW 69
69589: ST_TO_ADDR
// end ;
69590: LD_VAR 0 2
69594: RET
// export function Shuffle ( array ) ; var i , index ; begin
69595: LD_INT 0
69597: PPUSH
69598: PPUSH
69599: PPUSH
// result := [ ] ;
69600: LD_ADDR_VAR 0 2
69604: PUSH
69605: EMPTY
69606: ST_TO_ADDR
// if not array then
69607: LD_VAR 0 1
69611: NOT
69612: IFFALSE 69616
// exit ;
69614: GO 69715
// Randomize ;
69616: CALL_OW 10
// for i = array downto 1 do
69620: LD_ADDR_VAR 0 3
69624: PUSH
69625: DOUBLE
69626: LD_VAR 0 1
69630: INC
69631: ST_TO_ADDR
69632: LD_INT 1
69634: PUSH
69635: FOR_DOWNTO
69636: IFFALSE 69713
// begin index := rand ( 1 , array ) ;
69638: LD_ADDR_VAR 0 4
69642: PUSH
69643: LD_INT 1
69645: PPUSH
69646: LD_VAR 0 1
69650: PPUSH
69651: CALL_OW 12
69655: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
69656: LD_ADDR_VAR 0 2
69660: PUSH
69661: LD_VAR 0 2
69665: PPUSH
69666: LD_VAR 0 2
69670: PUSH
69671: LD_INT 1
69673: PLUS
69674: PPUSH
69675: LD_VAR 0 1
69679: PUSH
69680: LD_VAR 0 4
69684: ARRAY
69685: PPUSH
69686: CALL_OW 2
69690: ST_TO_ADDR
// array := Delete ( array , index ) ;
69691: LD_ADDR_VAR 0 1
69695: PUSH
69696: LD_VAR 0 1
69700: PPUSH
69701: LD_VAR 0 4
69705: PPUSH
69706: CALL_OW 3
69710: ST_TO_ADDR
// end ;
69711: GO 69635
69713: POP
69714: POP
// end ;
69715: LD_VAR 0 2
69719: RET
// export function GetBaseMaterials ( base ) ; begin
69720: LD_INT 0
69722: PPUSH
// result := [ 0 , 0 , 0 ] ;
69723: LD_ADDR_VAR 0 2
69727: PUSH
69728: LD_INT 0
69730: PUSH
69731: LD_INT 0
69733: PUSH
69734: LD_INT 0
69736: PUSH
69737: EMPTY
69738: LIST
69739: LIST
69740: LIST
69741: ST_TO_ADDR
// if not base then
69742: LD_VAR 0 1
69746: NOT
69747: IFFALSE 69751
// exit ;
69749: GO 69800
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
69751: LD_ADDR_VAR 0 2
69755: PUSH
69756: LD_VAR 0 1
69760: PPUSH
69761: LD_INT 1
69763: PPUSH
69764: CALL_OW 275
69768: PUSH
69769: LD_VAR 0 1
69773: PPUSH
69774: LD_INT 2
69776: PPUSH
69777: CALL_OW 275
69781: PUSH
69782: LD_VAR 0 1
69786: PPUSH
69787: LD_INT 3
69789: PPUSH
69790: CALL_OW 275
69794: PUSH
69795: EMPTY
69796: LIST
69797: LIST
69798: LIST
69799: ST_TO_ADDR
// end ;
69800: LD_VAR 0 2
69804: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
69805: LD_INT 0
69807: PPUSH
69808: PPUSH
// result := array ;
69809: LD_ADDR_VAR 0 3
69813: PUSH
69814: LD_VAR 0 1
69818: ST_TO_ADDR
// if size >= result then
69819: LD_VAR 0 2
69823: PUSH
69824: LD_VAR 0 3
69828: GREATEREQUAL
69829: IFFALSE 69833
// exit ;
69831: GO 69883
// if size then
69833: LD_VAR 0 2
69837: IFFALSE 69883
// for i := array downto size do
69839: LD_ADDR_VAR 0 4
69843: PUSH
69844: DOUBLE
69845: LD_VAR 0 1
69849: INC
69850: ST_TO_ADDR
69851: LD_VAR 0 2
69855: PUSH
69856: FOR_DOWNTO
69857: IFFALSE 69881
// result := Delete ( result , result ) ;
69859: LD_ADDR_VAR 0 3
69863: PUSH
69864: LD_VAR 0 3
69868: PPUSH
69869: LD_VAR 0 3
69873: PPUSH
69874: CALL_OW 3
69878: ST_TO_ADDR
69879: GO 69856
69881: POP
69882: POP
// end ;
69883: LD_VAR 0 3
69887: RET
// export function ComExit ( unit ) ; var tmp ; begin
69888: LD_INT 0
69890: PPUSH
69891: PPUSH
// if not IsInUnit ( unit ) then
69892: LD_VAR 0 1
69896: PPUSH
69897: CALL_OW 310
69901: NOT
69902: IFFALSE 69906
// exit ;
69904: GO 69966
// tmp := IsInUnit ( unit ) ;
69906: LD_ADDR_VAR 0 3
69910: PUSH
69911: LD_VAR 0 1
69915: PPUSH
69916: CALL_OW 310
69920: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
69921: LD_VAR 0 3
69925: PPUSH
69926: CALL_OW 247
69930: PUSH
69931: LD_INT 2
69933: EQUAL
69934: IFFALSE 69947
// ComExitVehicle ( unit ) else
69936: LD_VAR 0 1
69940: PPUSH
69941: CALL_OW 121
69945: GO 69956
// ComExitBuilding ( unit ) ;
69947: LD_VAR 0 1
69951: PPUSH
69952: CALL_OW 122
// result := tmp ;
69956: LD_ADDR_VAR 0 2
69960: PUSH
69961: LD_VAR 0 3
69965: ST_TO_ADDR
// end ;
69966: LD_VAR 0 2
69970: RET
// export function ComExitAll ( units ) ; var i ; begin
69971: LD_INT 0
69973: PPUSH
69974: PPUSH
// if not units then
69975: LD_VAR 0 1
69979: NOT
69980: IFFALSE 69984
// exit ;
69982: GO 70010
// for i in units do
69984: LD_ADDR_VAR 0 3
69988: PUSH
69989: LD_VAR 0 1
69993: PUSH
69994: FOR_IN
69995: IFFALSE 70008
// ComExit ( i ) ;
69997: LD_VAR 0 3
70001: PPUSH
70002: CALL 69888 0 1
70006: GO 69994
70008: POP
70009: POP
// end ;
70010: LD_VAR 0 2
70014: RET
// export function ResetHc ; begin
70015: LD_INT 0
70017: PPUSH
// InitHc ;
70018: CALL_OW 19
// hc_importance := 0 ;
70022: LD_ADDR_OWVAR 32
70026: PUSH
70027: LD_INT 0
70029: ST_TO_ADDR
// end ;
70030: LD_VAR 0 1
70034: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
70035: LD_INT 0
70037: PPUSH
70038: PPUSH
70039: PPUSH
// _x := ( x1 + x2 ) div 2 ;
70040: LD_ADDR_VAR 0 6
70044: PUSH
70045: LD_VAR 0 1
70049: PUSH
70050: LD_VAR 0 3
70054: PLUS
70055: PUSH
70056: LD_INT 2
70058: DIV
70059: ST_TO_ADDR
// if _x < 0 then
70060: LD_VAR 0 6
70064: PUSH
70065: LD_INT 0
70067: LESS
70068: IFFALSE 70085
// _x := _x * - 1 ;
70070: LD_ADDR_VAR 0 6
70074: PUSH
70075: LD_VAR 0 6
70079: PUSH
70080: LD_INT 1
70082: NEG
70083: MUL
70084: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
70085: LD_ADDR_VAR 0 7
70089: PUSH
70090: LD_VAR 0 2
70094: PUSH
70095: LD_VAR 0 4
70099: PLUS
70100: PUSH
70101: LD_INT 2
70103: DIV
70104: ST_TO_ADDR
// if _y < 0 then
70105: LD_VAR 0 7
70109: PUSH
70110: LD_INT 0
70112: LESS
70113: IFFALSE 70130
// _y := _y * - 1 ;
70115: LD_ADDR_VAR 0 7
70119: PUSH
70120: LD_VAR 0 7
70124: PUSH
70125: LD_INT 1
70127: NEG
70128: MUL
70129: ST_TO_ADDR
// result := [ _x , _y ] ;
70130: LD_ADDR_VAR 0 5
70134: PUSH
70135: LD_VAR 0 6
70139: PUSH
70140: LD_VAR 0 7
70144: PUSH
70145: EMPTY
70146: LIST
70147: LIST
70148: ST_TO_ADDR
// end ;
70149: LD_VAR 0 5
70153: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
70154: LD_INT 0
70156: PPUSH
70157: PPUSH
70158: PPUSH
70159: PPUSH
// task := GetTaskList ( unit ) ;
70160: LD_ADDR_VAR 0 7
70164: PUSH
70165: LD_VAR 0 1
70169: PPUSH
70170: CALL_OW 437
70174: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
70175: LD_VAR 0 7
70179: NOT
70180: PUSH
70181: LD_VAR 0 1
70185: PPUSH
70186: LD_VAR 0 2
70190: PPUSH
70191: CALL_OW 308
70195: NOT
70196: AND
70197: IFFALSE 70201
// exit ;
70199: GO 70319
// if IsInArea ( unit , area ) then
70201: LD_VAR 0 1
70205: PPUSH
70206: LD_VAR 0 2
70210: PPUSH
70211: CALL_OW 308
70215: IFFALSE 70233
// begin ComMoveToArea ( unit , goAway ) ;
70217: LD_VAR 0 1
70221: PPUSH
70222: LD_VAR 0 3
70226: PPUSH
70227: CALL_OW 113
// exit ;
70231: GO 70319
// end ; if task [ 1 ] [ 1 ] <> M then
70233: LD_VAR 0 7
70237: PUSH
70238: LD_INT 1
70240: ARRAY
70241: PUSH
70242: LD_INT 1
70244: ARRAY
70245: PUSH
70246: LD_STRING M
70248: NONEQUAL
70249: IFFALSE 70253
// exit ;
70251: GO 70319
// x := task [ 1 ] [ 2 ] ;
70253: LD_ADDR_VAR 0 5
70257: PUSH
70258: LD_VAR 0 7
70262: PUSH
70263: LD_INT 1
70265: ARRAY
70266: PUSH
70267: LD_INT 2
70269: ARRAY
70270: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
70271: LD_ADDR_VAR 0 6
70275: PUSH
70276: LD_VAR 0 7
70280: PUSH
70281: LD_INT 1
70283: ARRAY
70284: PUSH
70285: LD_INT 3
70287: ARRAY
70288: ST_TO_ADDR
// if InArea ( x , y , area ) then
70289: LD_VAR 0 5
70293: PPUSH
70294: LD_VAR 0 6
70298: PPUSH
70299: LD_VAR 0 2
70303: PPUSH
70304: CALL_OW 309
70308: IFFALSE 70319
// ComStop ( unit ) ;
70310: LD_VAR 0 1
70314: PPUSH
70315: CALL_OW 141
// end ;
70319: LD_VAR 0 4
70323: RET
// export function Abs ( value ) ; begin
70324: LD_INT 0
70326: PPUSH
// result := value ;
70327: LD_ADDR_VAR 0 2
70331: PUSH
70332: LD_VAR 0 1
70336: ST_TO_ADDR
// if value < 0 then
70337: LD_VAR 0 1
70341: PUSH
70342: LD_INT 0
70344: LESS
70345: IFFALSE 70362
// result := value * - 1 ;
70347: LD_ADDR_VAR 0 2
70351: PUSH
70352: LD_VAR 0 1
70356: PUSH
70357: LD_INT 1
70359: NEG
70360: MUL
70361: ST_TO_ADDR
// end ;
70362: LD_VAR 0 2
70366: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
70367: LD_INT 0
70369: PPUSH
70370: PPUSH
70371: PPUSH
70372: PPUSH
70373: PPUSH
70374: PPUSH
70375: PPUSH
70376: PPUSH
// if not unit or not building then
70377: LD_VAR 0 1
70381: NOT
70382: PUSH
70383: LD_VAR 0 2
70387: NOT
70388: OR
70389: IFFALSE 70393
// exit ;
70391: GO 70619
// x := GetX ( building ) ;
70393: LD_ADDR_VAR 0 4
70397: PUSH
70398: LD_VAR 0 2
70402: PPUSH
70403: CALL_OW 250
70407: ST_TO_ADDR
// y := GetY ( building ) ;
70408: LD_ADDR_VAR 0 6
70412: PUSH
70413: LD_VAR 0 2
70417: PPUSH
70418: CALL_OW 251
70422: ST_TO_ADDR
// d := GetDir ( building ) ;
70423: LD_ADDR_VAR 0 8
70427: PUSH
70428: LD_VAR 0 2
70432: PPUSH
70433: CALL_OW 254
70437: ST_TO_ADDR
// r := 4 ;
70438: LD_ADDR_VAR 0 9
70442: PUSH
70443: LD_INT 4
70445: ST_TO_ADDR
// for i := 1 to 5 do
70446: LD_ADDR_VAR 0 10
70450: PUSH
70451: DOUBLE
70452: LD_INT 1
70454: DEC
70455: ST_TO_ADDR
70456: LD_INT 5
70458: PUSH
70459: FOR_TO
70460: IFFALSE 70617
// begin _x := ShiftX ( x , d , r + i ) ;
70462: LD_ADDR_VAR 0 5
70466: PUSH
70467: LD_VAR 0 4
70471: PPUSH
70472: LD_VAR 0 8
70476: PPUSH
70477: LD_VAR 0 9
70481: PUSH
70482: LD_VAR 0 10
70486: PLUS
70487: PPUSH
70488: CALL_OW 272
70492: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
70493: LD_ADDR_VAR 0 7
70497: PUSH
70498: LD_VAR 0 6
70502: PPUSH
70503: LD_VAR 0 8
70507: PPUSH
70508: LD_VAR 0 9
70512: PUSH
70513: LD_VAR 0 10
70517: PLUS
70518: PPUSH
70519: CALL_OW 273
70523: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
70524: LD_VAR 0 5
70528: PPUSH
70529: LD_VAR 0 7
70533: PPUSH
70534: CALL_OW 488
70538: PUSH
70539: LD_VAR 0 5
70543: PPUSH
70544: LD_VAR 0 7
70548: PPUSH
70549: CALL_OW 428
70553: PPUSH
70554: CALL_OW 247
70558: PUSH
70559: LD_INT 3
70561: PUSH
70562: LD_INT 2
70564: PUSH
70565: EMPTY
70566: LIST
70567: LIST
70568: IN
70569: NOT
70570: AND
70571: IFFALSE 70615
// begin ComMoveXY ( unit , _x , _y ) ;
70573: LD_VAR 0 1
70577: PPUSH
70578: LD_VAR 0 5
70582: PPUSH
70583: LD_VAR 0 7
70587: PPUSH
70588: CALL_OW 111
// result := [ _x , _y ] ;
70592: LD_ADDR_VAR 0 3
70596: PUSH
70597: LD_VAR 0 5
70601: PUSH
70602: LD_VAR 0 7
70606: PUSH
70607: EMPTY
70608: LIST
70609: LIST
70610: ST_TO_ADDR
// exit ;
70611: POP
70612: POP
70613: GO 70619
// end ; end ;
70615: GO 70459
70617: POP
70618: POP
// end ;
70619: LD_VAR 0 3
70623: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
70624: LD_INT 0
70626: PPUSH
70627: PPUSH
70628: PPUSH
// result := 0 ;
70629: LD_ADDR_VAR 0 3
70633: PUSH
70634: LD_INT 0
70636: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
70637: LD_VAR 0 1
70641: PUSH
70642: LD_INT 0
70644: LESS
70645: PUSH
70646: LD_VAR 0 1
70650: PUSH
70651: LD_INT 8
70653: GREATER
70654: OR
70655: PUSH
70656: LD_VAR 0 2
70660: PUSH
70661: LD_INT 0
70663: LESS
70664: OR
70665: PUSH
70666: LD_VAR 0 2
70670: PUSH
70671: LD_INT 8
70673: GREATER
70674: OR
70675: IFFALSE 70679
// exit ;
70677: GO 70754
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
70679: LD_ADDR_VAR 0 4
70683: PUSH
70684: LD_INT 22
70686: PUSH
70687: LD_VAR 0 2
70691: PUSH
70692: EMPTY
70693: LIST
70694: LIST
70695: PPUSH
70696: CALL_OW 69
70700: PUSH
70701: FOR_IN
70702: IFFALSE 70752
// begin un := UnitShoot ( i ) ;
70704: LD_ADDR_VAR 0 5
70708: PUSH
70709: LD_VAR 0 4
70713: PPUSH
70714: CALL_OW 504
70718: ST_TO_ADDR
// if GetSide ( un ) = side1 then
70719: LD_VAR 0 5
70723: PPUSH
70724: CALL_OW 255
70728: PUSH
70729: LD_VAR 0 1
70733: EQUAL
70734: IFFALSE 70750
// begin result := un ;
70736: LD_ADDR_VAR 0 3
70740: PUSH
70741: LD_VAR 0 5
70745: ST_TO_ADDR
// exit ;
70746: POP
70747: POP
70748: GO 70754
// end ; end ;
70750: GO 70701
70752: POP
70753: POP
// end ;
70754: LD_VAR 0 3
70758: RET
// export function GetCargoBay ( units ) ; begin
70759: LD_INT 0
70761: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
70762: LD_ADDR_VAR 0 2
70766: PUSH
70767: LD_VAR 0 1
70771: PPUSH
70772: LD_INT 2
70774: PUSH
70775: LD_INT 34
70777: PUSH
70778: LD_INT 12
70780: PUSH
70781: EMPTY
70782: LIST
70783: LIST
70784: PUSH
70785: LD_INT 34
70787: PUSH
70788: LD_INT 51
70790: PUSH
70791: EMPTY
70792: LIST
70793: LIST
70794: PUSH
70795: LD_INT 34
70797: PUSH
70798: LD_INT 32
70800: PUSH
70801: EMPTY
70802: LIST
70803: LIST
70804: PUSH
70805: LD_INT 34
70807: PUSH
70808: LD_INT 89
70810: PUSH
70811: EMPTY
70812: LIST
70813: LIST
70814: PUSH
70815: EMPTY
70816: LIST
70817: LIST
70818: LIST
70819: LIST
70820: LIST
70821: PPUSH
70822: CALL_OW 72
70826: ST_TO_ADDR
// end ;
70827: LD_VAR 0 2
70831: RET
// export function Negate ( value ) ; begin
70832: LD_INT 0
70834: PPUSH
// result := not value ;
70835: LD_ADDR_VAR 0 2
70839: PUSH
70840: LD_VAR 0 1
70844: NOT
70845: ST_TO_ADDR
// end ;
70846: LD_VAR 0 2
70850: RET
// export function Inc ( value ) ; begin
70851: LD_INT 0
70853: PPUSH
// result := value + 1 ;
70854: LD_ADDR_VAR 0 2
70858: PUSH
70859: LD_VAR 0 1
70863: PUSH
70864: LD_INT 1
70866: PLUS
70867: ST_TO_ADDR
// end ;
70868: LD_VAR 0 2
70872: RET
// export function Dec ( value ) ; begin
70873: LD_INT 0
70875: PPUSH
// result := value - 1 ;
70876: LD_ADDR_VAR 0 2
70880: PUSH
70881: LD_VAR 0 1
70885: PUSH
70886: LD_INT 1
70888: MINUS
70889: ST_TO_ADDR
// end ;
70890: LD_VAR 0 2
70894: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
70895: LD_INT 0
70897: PPUSH
70898: PPUSH
70899: PPUSH
70900: PPUSH
70901: PPUSH
70902: PPUSH
70903: PPUSH
70904: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
70905: LD_VAR 0 1
70909: PPUSH
70910: LD_VAR 0 2
70914: PPUSH
70915: CALL_OW 488
70919: NOT
70920: PUSH
70921: LD_VAR 0 3
70925: PPUSH
70926: LD_VAR 0 4
70930: PPUSH
70931: CALL_OW 488
70935: NOT
70936: OR
70937: IFFALSE 70950
// begin result := - 1 ;
70939: LD_ADDR_VAR 0 5
70943: PUSH
70944: LD_INT 1
70946: NEG
70947: ST_TO_ADDR
// exit ;
70948: GO 71185
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
70950: LD_ADDR_VAR 0 12
70954: PUSH
70955: LD_VAR 0 1
70959: PPUSH
70960: LD_VAR 0 2
70964: PPUSH
70965: LD_VAR 0 3
70969: PPUSH
70970: LD_VAR 0 4
70974: PPUSH
70975: CALL 70035 0 4
70979: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
70980: LD_ADDR_VAR 0 11
70984: PUSH
70985: LD_VAR 0 1
70989: PPUSH
70990: LD_VAR 0 2
70994: PPUSH
70995: LD_VAR 0 12
70999: PUSH
71000: LD_INT 1
71002: ARRAY
71003: PPUSH
71004: LD_VAR 0 12
71008: PUSH
71009: LD_INT 2
71011: ARRAY
71012: PPUSH
71013: CALL_OW 298
71017: ST_TO_ADDR
// distance := 9999 ;
71018: LD_ADDR_VAR 0 10
71022: PUSH
71023: LD_INT 9999
71025: ST_TO_ADDR
// for i := 0 to 5 do
71026: LD_ADDR_VAR 0 6
71030: PUSH
71031: DOUBLE
71032: LD_INT 0
71034: DEC
71035: ST_TO_ADDR
71036: LD_INT 5
71038: PUSH
71039: FOR_TO
71040: IFFALSE 71183
// begin _x := ShiftX ( x1 , i , centerDist ) ;
71042: LD_ADDR_VAR 0 7
71046: PUSH
71047: LD_VAR 0 1
71051: PPUSH
71052: LD_VAR 0 6
71056: PPUSH
71057: LD_VAR 0 11
71061: PPUSH
71062: CALL_OW 272
71066: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
71067: LD_ADDR_VAR 0 8
71071: PUSH
71072: LD_VAR 0 2
71076: PPUSH
71077: LD_VAR 0 6
71081: PPUSH
71082: LD_VAR 0 11
71086: PPUSH
71087: CALL_OW 273
71091: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
71092: LD_VAR 0 7
71096: PPUSH
71097: LD_VAR 0 8
71101: PPUSH
71102: CALL_OW 488
71106: NOT
71107: IFFALSE 71111
// continue ;
71109: GO 71039
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
71111: LD_ADDR_VAR 0 9
71115: PUSH
71116: LD_VAR 0 12
71120: PUSH
71121: LD_INT 1
71123: ARRAY
71124: PPUSH
71125: LD_VAR 0 12
71129: PUSH
71130: LD_INT 2
71132: ARRAY
71133: PPUSH
71134: LD_VAR 0 7
71138: PPUSH
71139: LD_VAR 0 8
71143: PPUSH
71144: CALL_OW 298
71148: ST_TO_ADDR
// if tmp < distance then
71149: LD_VAR 0 9
71153: PUSH
71154: LD_VAR 0 10
71158: LESS
71159: IFFALSE 71181
// begin result := i ;
71161: LD_ADDR_VAR 0 5
71165: PUSH
71166: LD_VAR 0 6
71170: ST_TO_ADDR
// distance := tmp ;
71171: LD_ADDR_VAR 0 10
71175: PUSH
71176: LD_VAR 0 9
71180: ST_TO_ADDR
// end ; end ;
71181: GO 71039
71183: POP
71184: POP
// end ;
71185: LD_VAR 0 5
71189: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
71190: LD_INT 0
71192: PPUSH
71193: PPUSH
// if not driver or not IsInUnit ( driver ) then
71194: LD_VAR 0 1
71198: NOT
71199: PUSH
71200: LD_VAR 0 1
71204: PPUSH
71205: CALL_OW 310
71209: NOT
71210: OR
71211: IFFALSE 71215
// exit ;
71213: GO 71305
// vehicle := IsInUnit ( driver ) ;
71215: LD_ADDR_VAR 0 3
71219: PUSH
71220: LD_VAR 0 1
71224: PPUSH
71225: CALL_OW 310
71229: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
71230: LD_VAR 0 1
71234: PPUSH
71235: LD_STRING \
71237: PUSH
71238: LD_INT 0
71240: PUSH
71241: LD_INT 0
71243: PUSH
71244: LD_INT 0
71246: PUSH
71247: LD_INT 0
71249: PUSH
71250: LD_INT 0
71252: PUSH
71253: LD_INT 0
71255: PUSH
71256: EMPTY
71257: LIST
71258: LIST
71259: LIST
71260: LIST
71261: LIST
71262: LIST
71263: LIST
71264: PUSH
71265: LD_STRING E
71267: PUSH
71268: LD_INT 0
71270: PUSH
71271: LD_INT 0
71273: PUSH
71274: LD_VAR 0 3
71278: PUSH
71279: LD_INT 0
71281: PUSH
71282: LD_INT 0
71284: PUSH
71285: LD_INT 0
71287: PUSH
71288: EMPTY
71289: LIST
71290: LIST
71291: LIST
71292: LIST
71293: LIST
71294: LIST
71295: LIST
71296: PUSH
71297: EMPTY
71298: LIST
71299: LIST
71300: PPUSH
71301: CALL_OW 446
// end ;
71305: LD_VAR 0 2
71309: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
71310: LD_INT 0
71312: PPUSH
71313: PPUSH
// if not driver or not IsInUnit ( driver ) then
71314: LD_VAR 0 1
71318: NOT
71319: PUSH
71320: LD_VAR 0 1
71324: PPUSH
71325: CALL_OW 310
71329: NOT
71330: OR
71331: IFFALSE 71335
// exit ;
71333: GO 71425
// vehicle := IsInUnit ( driver ) ;
71335: LD_ADDR_VAR 0 3
71339: PUSH
71340: LD_VAR 0 1
71344: PPUSH
71345: CALL_OW 310
71349: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
71350: LD_VAR 0 1
71354: PPUSH
71355: LD_STRING \
71357: PUSH
71358: LD_INT 0
71360: PUSH
71361: LD_INT 0
71363: PUSH
71364: LD_INT 0
71366: PUSH
71367: LD_INT 0
71369: PUSH
71370: LD_INT 0
71372: PUSH
71373: LD_INT 0
71375: PUSH
71376: EMPTY
71377: LIST
71378: LIST
71379: LIST
71380: LIST
71381: LIST
71382: LIST
71383: LIST
71384: PUSH
71385: LD_STRING E
71387: PUSH
71388: LD_INT 0
71390: PUSH
71391: LD_INT 0
71393: PUSH
71394: LD_VAR 0 3
71398: PUSH
71399: LD_INT 0
71401: PUSH
71402: LD_INT 0
71404: PUSH
71405: LD_INT 0
71407: PUSH
71408: EMPTY
71409: LIST
71410: LIST
71411: LIST
71412: LIST
71413: LIST
71414: LIST
71415: LIST
71416: PUSH
71417: EMPTY
71418: LIST
71419: LIST
71420: PPUSH
71421: CALL_OW 447
// end ;
71425: LD_VAR 0 2
71429: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
71430: LD_INT 0
71432: PPUSH
71433: PPUSH
71434: PPUSH
// tmp := [ ] ;
71435: LD_ADDR_VAR 0 5
71439: PUSH
71440: EMPTY
71441: ST_TO_ADDR
// for i in units do
71442: LD_ADDR_VAR 0 4
71446: PUSH
71447: LD_VAR 0 1
71451: PUSH
71452: FOR_IN
71453: IFFALSE 71491
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
71455: LD_ADDR_VAR 0 5
71459: PUSH
71460: LD_VAR 0 5
71464: PPUSH
71465: LD_VAR 0 5
71469: PUSH
71470: LD_INT 1
71472: PLUS
71473: PPUSH
71474: LD_VAR 0 4
71478: PPUSH
71479: CALL_OW 256
71483: PPUSH
71484: CALL_OW 2
71488: ST_TO_ADDR
71489: GO 71452
71491: POP
71492: POP
// if not tmp then
71493: LD_VAR 0 5
71497: NOT
71498: IFFALSE 71502
// exit ;
71500: GO 71550
// if asc then
71502: LD_VAR 0 2
71506: IFFALSE 71530
// result := SortListByListAsc ( units , tmp ) else
71508: LD_ADDR_VAR 0 3
71512: PUSH
71513: LD_VAR 0 1
71517: PPUSH
71518: LD_VAR 0 5
71522: PPUSH
71523: CALL_OW 76
71527: ST_TO_ADDR
71528: GO 71550
// result := SortListByListDesc ( units , tmp ) ;
71530: LD_ADDR_VAR 0 3
71534: PUSH
71535: LD_VAR 0 1
71539: PPUSH
71540: LD_VAR 0 5
71544: PPUSH
71545: CALL_OW 77
71549: ST_TO_ADDR
// end ;
71550: LD_VAR 0 3
71554: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
71555: LD_INT 0
71557: PPUSH
71558: PPUSH
// task := GetTaskList ( mech ) ;
71559: LD_ADDR_VAR 0 4
71563: PUSH
71564: LD_VAR 0 1
71568: PPUSH
71569: CALL_OW 437
71573: ST_TO_ADDR
// if not task then
71574: LD_VAR 0 4
71578: NOT
71579: IFFALSE 71583
// exit ;
71581: GO 71625
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
71583: LD_ADDR_VAR 0 3
71587: PUSH
71588: LD_VAR 0 4
71592: PUSH
71593: LD_INT 1
71595: ARRAY
71596: PUSH
71597: LD_INT 1
71599: ARRAY
71600: PUSH
71601: LD_STRING r
71603: EQUAL
71604: PUSH
71605: LD_VAR 0 4
71609: PUSH
71610: LD_INT 1
71612: ARRAY
71613: PUSH
71614: LD_INT 4
71616: ARRAY
71617: PUSH
71618: LD_VAR 0 2
71622: EQUAL
71623: AND
71624: ST_TO_ADDR
// end ;
71625: LD_VAR 0 3
71629: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
71630: LD_INT 0
71632: PPUSH
// SetDir ( unit , d ) ;
71633: LD_VAR 0 1
71637: PPUSH
71638: LD_VAR 0 4
71642: PPUSH
71643: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
71647: LD_VAR 0 1
71651: PPUSH
71652: LD_VAR 0 2
71656: PPUSH
71657: LD_VAR 0 3
71661: PPUSH
71662: LD_VAR 0 5
71666: PPUSH
71667: CALL_OW 48
// end ;
71671: LD_VAR 0 6
71675: RET
// export function ToNaturalNumber ( number ) ; begin
71676: LD_INT 0
71678: PPUSH
// result := number div 1 ;
71679: LD_ADDR_VAR 0 2
71683: PUSH
71684: LD_VAR 0 1
71688: PUSH
71689: LD_INT 1
71691: DIV
71692: ST_TO_ADDR
// if number < 0 then
71693: LD_VAR 0 1
71697: PUSH
71698: LD_INT 0
71700: LESS
71701: IFFALSE 71711
// result := 0 ;
71703: LD_ADDR_VAR 0 2
71707: PUSH
71708: LD_INT 0
71710: ST_TO_ADDR
// end ;
71711: LD_VAR 0 2
71715: RET
// export function SortByClass ( units , class ) ; var un ; begin
71716: LD_INT 0
71718: PPUSH
71719: PPUSH
// if not units or not class then
71720: LD_VAR 0 1
71724: NOT
71725: PUSH
71726: LD_VAR 0 2
71730: NOT
71731: OR
71732: IFFALSE 71736
// exit ;
71734: GO 71831
// result := [ ] ;
71736: LD_ADDR_VAR 0 3
71740: PUSH
71741: EMPTY
71742: ST_TO_ADDR
// for un in units do
71743: LD_ADDR_VAR 0 4
71747: PUSH
71748: LD_VAR 0 1
71752: PUSH
71753: FOR_IN
71754: IFFALSE 71829
// if GetClass ( un ) = class then
71756: LD_VAR 0 4
71760: PPUSH
71761: CALL_OW 257
71765: PUSH
71766: LD_VAR 0 2
71770: EQUAL
71771: IFFALSE 71798
// result := Insert ( result , 1 , un ) else
71773: LD_ADDR_VAR 0 3
71777: PUSH
71778: LD_VAR 0 3
71782: PPUSH
71783: LD_INT 1
71785: PPUSH
71786: LD_VAR 0 4
71790: PPUSH
71791: CALL_OW 2
71795: ST_TO_ADDR
71796: GO 71827
// result := Replace ( result , result + 1 , un ) ;
71798: LD_ADDR_VAR 0 3
71802: PUSH
71803: LD_VAR 0 3
71807: PPUSH
71808: LD_VAR 0 3
71812: PUSH
71813: LD_INT 1
71815: PLUS
71816: PPUSH
71817: LD_VAR 0 4
71821: PPUSH
71822: CALL_OW 1
71826: ST_TO_ADDR
71827: GO 71753
71829: POP
71830: POP
// end ;
71831: LD_VAR 0 3
71835: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
71836: LD_INT 0
71838: PPUSH
71839: PPUSH
71840: PPUSH
71841: PPUSH
71842: PPUSH
71843: PPUSH
71844: PPUSH
// result := [ ] ;
71845: LD_ADDR_VAR 0 4
71849: PUSH
71850: EMPTY
71851: ST_TO_ADDR
// if x - r < 0 then
71852: LD_VAR 0 1
71856: PUSH
71857: LD_VAR 0 3
71861: MINUS
71862: PUSH
71863: LD_INT 0
71865: LESS
71866: IFFALSE 71878
// min_x := 0 else
71868: LD_ADDR_VAR 0 8
71872: PUSH
71873: LD_INT 0
71875: ST_TO_ADDR
71876: GO 71894
// min_x := x - r ;
71878: LD_ADDR_VAR 0 8
71882: PUSH
71883: LD_VAR 0 1
71887: PUSH
71888: LD_VAR 0 3
71892: MINUS
71893: ST_TO_ADDR
// if y - r < 0 then
71894: LD_VAR 0 2
71898: PUSH
71899: LD_VAR 0 3
71903: MINUS
71904: PUSH
71905: LD_INT 0
71907: LESS
71908: IFFALSE 71920
// min_y := 0 else
71910: LD_ADDR_VAR 0 7
71914: PUSH
71915: LD_INT 0
71917: ST_TO_ADDR
71918: GO 71936
// min_y := y - r ;
71920: LD_ADDR_VAR 0 7
71924: PUSH
71925: LD_VAR 0 2
71929: PUSH
71930: LD_VAR 0 3
71934: MINUS
71935: ST_TO_ADDR
// max_x := x + r ;
71936: LD_ADDR_VAR 0 9
71940: PUSH
71941: LD_VAR 0 1
71945: PUSH
71946: LD_VAR 0 3
71950: PLUS
71951: ST_TO_ADDR
// max_y := y + r ;
71952: LD_ADDR_VAR 0 10
71956: PUSH
71957: LD_VAR 0 2
71961: PUSH
71962: LD_VAR 0 3
71966: PLUS
71967: ST_TO_ADDR
// for _x = min_x to max_x do
71968: LD_ADDR_VAR 0 5
71972: PUSH
71973: DOUBLE
71974: LD_VAR 0 8
71978: DEC
71979: ST_TO_ADDR
71980: LD_VAR 0 9
71984: PUSH
71985: FOR_TO
71986: IFFALSE 72087
// for _y = min_y to max_y do
71988: LD_ADDR_VAR 0 6
71992: PUSH
71993: DOUBLE
71994: LD_VAR 0 7
71998: DEC
71999: ST_TO_ADDR
72000: LD_VAR 0 10
72004: PUSH
72005: FOR_TO
72006: IFFALSE 72083
// begin if not ValidHex ( _x , _y ) then
72008: LD_VAR 0 5
72012: PPUSH
72013: LD_VAR 0 6
72017: PPUSH
72018: CALL_OW 488
72022: NOT
72023: IFFALSE 72027
// continue ;
72025: GO 72005
// if GetResourceTypeXY ( _x , _y ) then
72027: LD_VAR 0 5
72031: PPUSH
72032: LD_VAR 0 6
72036: PPUSH
72037: CALL_OW 283
72041: IFFALSE 72081
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
72043: LD_ADDR_VAR 0 4
72047: PUSH
72048: LD_VAR 0 4
72052: PPUSH
72053: LD_VAR 0 4
72057: PUSH
72058: LD_INT 1
72060: PLUS
72061: PPUSH
72062: LD_VAR 0 5
72066: PUSH
72067: LD_VAR 0 6
72071: PUSH
72072: EMPTY
72073: LIST
72074: LIST
72075: PPUSH
72076: CALL_OW 1
72080: ST_TO_ADDR
// end ;
72081: GO 72005
72083: POP
72084: POP
72085: GO 71985
72087: POP
72088: POP
// end ;
72089: LD_VAR 0 4
72093: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
72094: LD_INT 0
72096: PPUSH
72097: PPUSH
72098: PPUSH
72099: PPUSH
72100: PPUSH
72101: PPUSH
72102: PPUSH
72103: PPUSH
// if not units then
72104: LD_VAR 0 1
72108: NOT
72109: IFFALSE 72113
// exit ;
72111: GO 72637
// result := UnitFilter ( units , [ f_ok ] ) ;
72113: LD_ADDR_VAR 0 3
72117: PUSH
72118: LD_VAR 0 1
72122: PPUSH
72123: LD_INT 50
72125: PUSH
72126: EMPTY
72127: LIST
72128: PPUSH
72129: CALL_OW 72
72133: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
72134: LD_ADDR_VAR 0 8
72138: PUSH
72139: LD_VAR 0 1
72143: PUSH
72144: LD_INT 1
72146: ARRAY
72147: PPUSH
72148: CALL_OW 255
72152: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
72153: LD_ADDR_VAR 0 10
72157: PUSH
72158: LD_INT 29
72160: PUSH
72161: LD_INT 91
72163: PUSH
72164: LD_INT 49
72166: PUSH
72167: EMPTY
72168: LIST
72169: LIST
72170: LIST
72171: ST_TO_ADDR
// if not result then
72172: LD_VAR 0 3
72176: NOT
72177: IFFALSE 72181
// exit ;
72179: GO 72637
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
72181: LD_ADDR_VAR 0 5
72185: PUSH
72186: LD_INT 81
72188: PUSH
72189: LD_VAR 0 8
72193: PUSH
72194: EMPTY
72195: LIST
72196: LIST
72197: PPUSH
72198: CALL_OW 69
72202: ST_TO_ADDR
// for i in result do
72203: LD_ADDR_VAR 0 4
72207: PUSH
72208: LD_VAR 0 3
72212: PUSH
72213: FOR_IN
72214: IFFALSE 72635
// begin tag := GetTag ( i ) + 1 ;
72216: LD_ADDR_VAR 0 9
72220: PUSH
72221: LD_VAR 0 4
72225: PPUSH
72226: CALL_OW 110
72230: PUSH
72231: LD_INT 1
72233: PLUS
72234: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
72235: LD_ADDR_VAR 0 7
72239: PUSH
72240: LD_VAR 0 4
72244: PPUSH
72245: CALL_OW 250
72249: PPUSH
72250: LD_VAR 0 4
72254: PPUSH
72255: CALL_OW 251
72259: PPUSH
72260: LD_INT 6
72262: PPUSH
72263: CALL 71836 0 3
72267: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
72268: LD_VAR 0 4
72272: PPUSH
72273: CALL_OW 247
72277: PUSH
72278: LD_INT 2
72280: EQUAL
72281: PUSH
72282: LD_VAR 0 7
72286: AND
72287: PUSH
72288: LD_VAR 0 4
72292: PPUSH
72293: CALL_OW 264
72297: PUSH
72298: LD_VAR 0 10
72302: IN
72303: NOT
72304: AND
72305: IFFALSE 72344
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
72307: LD_VAR 0 4
72311: PPUSH
72312: LD_VAR 0 7
72316: PUSH
72317: LD_INT 1
72319: ARRAY
72320: PUSH
72321: LD_INT 1
72323: ARRAY
72324: PPUSH
72325: LD_VAR 0 7
72329: PUSH
72330: LD_INT 1
72332: ARRAY
72333: PUSH
72334: LD_INT 2
72336: ARRAY
72337: PPUSH
72338: CALL_OW 116
72342: GO 72633
// if path > tag then
72344: LD_VAR 0 2
72348: PUSH
72349: LD_VAR 0 9
72353: GREATER
72354: IFFALSE 72562
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
72356: LD_ADDR_VAR 0 6
72360: PUSH
72361: LD_VAR 0 5
72365: PPUSH
72366: LD_INT 91
72368: PUSH
72369: LD_VAR 0 4
72373: PUSH
72374: LD_INT 8
72376: PUSH
72377: EMPTY
72378: LIST
72379: LIST
72380: LIST
72381: PPUSH
72382: CALL_OW 72
72386: ST_TO_ADDR
// if nearEnemy then
72387: LD_VAR 0 6
72391: IFFALSE 72460
// begin if GetWeapon ( i ) = ru_time_lapser then
72393: LD_VAR 0 4
72397: PPUSH
72398: CALL_OW 264
72402: PUSH
72403: LD_INT 49
72405: EQUAL
72406: IFFALSE 72434
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
72408: LD_VAR 0 4
72412: PPUSH
72413: LD_VAR 0 6
72417: PPUSH
72418: LD_VAR 0 4
72422: PPUSH
72423: CALL_OW 74
72427: PPUSH
72428: CALL_OW 112
72432: GO 72458
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
72434: LD_VAR 0 4
72438: PPUSH
72439: LD_VAR 0 6
72443: PPUSH
72444: LD_VAR 0 4
72448: PPUSH
72449: CALL_OW 74
72453: PPUSH
72454: CALL_OW 115
// end else
72458: GO 72560
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
72460: LD_VAR 0 4
72464: PPUSH
72465: LD_VAR 0 2
72469: PUSH
72470: LD_VAR 0 9
72474: ARRAY
72475: PUSH
72476: LD_INT 1
72478: ARRAY
72479: PPUSH
72480: LD_VAR 0 2
72484: PUSH
72485: LD_VAR 0 9
72489: ARRAY
72490: PUSH
72491: LD_INT 2
72493: ARRAY
72494: PPUSH
72495: CALL_OW 297
72499: PUSH
72500: LD_INT 6
72502: GREATER
72503: IFFALSE 72546
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
72505: LD_VAR 0 4
72509: PPUSH
72510: LD_VAR 0 2
72514: PUSH
72515: LD_VAR 0 9
72519: ARRAY
72520: PUSH
72521: LD_INT 1
72523: ARRAY
72524: PPUSH
72525: LD_VAR 0 2
72529: PUSH
72530: LD_VAR 0 9
72534: ARRAY
72535: PUSH
72536: LD_INT 2
72538: ARRAY
72539: PPUSH
72540: CALL_OW 114
72544: GO 72560
// SetTag ( i , tag ) ;
72546: LD_VAR 0 4
72550: PPUSH
72551: LD_VAR 0 9
72555: PPUSH
72556: CALL_OW 109
// end else
72560: GO 72633
// if enemy then
72562: LD_VAR 0 5
72566: IFFALSE 72633
// begin if GetWeapon ( i ) = ru_time_lapser then
72568: LD_VAR 0 4
72572: PPUSH
72573: CALL_OW 264
72577: PUSH
72578: LD_INT 49
72580: EQUAL
72581: IFFALSE 72609
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
72583: LD_VAR 0 4
72587: PPUSH
72588: LD_VAR 0 5
72592: PPUSH
72593: LD_VAR 0 4
72597: PPUSH
72598: CALL_OW 74
72602: PPUSH
72603: CALL_OW 112
72607: GO 72633
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
72609: LD_VAR 0 4
72613: PPUSH
72614: LD_VAR 0 5
72618: PPUSH
72619: LD_VAR 0 4
72623: PPUSH
72624: CALL_OW 74
72628: PPUSH
72629: CALL_OW 115
// end ; end ;
72633: GO 72213
72635: POP
72636: POP
// end ;
72637: LD_VAR 0 3
72641: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
72642: LD_INT 0
72644: PPUSH
72645: PPUSH
72646: PPUSH
// if not unit or IsInUnit ( unit ) then
72647: LD_VAR 0 1
72651: NOT
72652: PUSH
72653: LD_VAR 0 1
72657: PPUSH
72658: CALL_OW 310
72662: OR
72663: IFFALSE 72667
// exit ;
72665: GO 72758
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
72667: LD_ADDR_VAR 0 4
72671: PUSH
72672: LD_VAR 0 1
72676: PPUSH
72677: CALL_OW 250
72681: PPUSH
72682: LD_VAR 0 2
72686: PPUSH
72687: LD_INT 1
72689: PPUSH
72690: CALL_OW 272
72694: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
72695: LD_ADDR_VAR 0 5
72699: PUSH
72700: LD_VAR 0 1
72704: PPUSH
72705: CALL_OW 251
72709: PPUSH
72710: LD_VAR 0 2
72714: PPUSH
72715: LD_INT 1
72717: PPUSH
72718: CALL_OW 273
72722: ST_TO_ADDR
// if ValidHex ( x , y ) then
72723: LD_VAR 0 4
72727: PPUSH
72728: LD_VAR 0 5
72732: PPUSH
72733: CALL_OW 488
72737: IFFALSE 72758
// ComTurnXY ( unit , x , y ) ;
72739: LD_VAR 0 1
72743: PPUSH
72744: LD_VAR 0 4
72748: PPUSH
72749: LD_VAR 0 5
72753: PPUSH
72754: CALL_OW 118
// end ;
72758: LD_VAR 0 3
72762: RET
// export function SeeUnits ( side , units ) ; var i ; begin
72763: LD_INT 0
72765: PPUSH
72766: PPUSH
// result := false ;
72767: LD_ADDR_VAR 0 3
72771: PUSH
72772: LD_INT 0
72774: ST_TO_ADDR
// if not units then
72775: LD_VAR 0 2
72779: NOT
72780: IFFALSE 72784
// exit ;
72782: GO 72829
// for i in units do
72784: LD_ADDR_VAR 0 4
72788: PUSH
72789: LD_VAR 0 2
72793: PUSH
72794: FOR_IN
72795: IFFALSE 72827
// if See ( side , i ) then
72797: LD_VAR 0 1
72801: PPUSH
72802: LD_VAR 0 4
72806: PPUSH
72807: CALL_OW 292
72811: IFFALSE 72825
// begin result := true ;
72813: LD_ADDR_VAR 0 3
72817: PUSH
72818: LD_INT 1
72820: ST_TO_ADDR
// exit ;
72821: POP
72822: POP
72823: GO 72829
// end ;
72825: GO 72794
72827: POP
72828: POP
// end ;
72829: LD_VAR 0 3
72833: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
72834: LD_INT 0
72836: PPUSH
72837: PPUSH
72838: PPUSH
72839: PPUSH
// if not unit or not points then
72840: LD_VAR 0 1
72844: NOT
72845: PUSH
72846: LD_VAR 0 2
72850: NOT
72851: OR
72852: IFFALSE 72856
// exit ;
72854: GO 72946
// dist := 99999 ;
72856: LD_ADDR_VAR 0 5
72860: PUSH
72861: LD_INT 99999
72863: ST_TO_ADDR
// for i in points do
72864: LD_ADDR_VAR 0 4
72868: PUSH
72869: LD_VAR 0 2
72873: PUSH
72874: FOR_IN
72875: IFFALSE 72944
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
72877: LD_ADDR_VAR 0 6
72881: PUSH
72882: LD_VAR 0 1
72886: PPUSH
72887: LD_VAR 0 4
72891: PUSH
72892: LD_INT 1
72894: ARRAY
72895: PPUSH
72896: LD_VAR 0 4
72900: PUSH
72901: LD_INT 2
72903: ARRAY
72904: PPUSH
72905: CALL_OW 297
72909: ST_TO_ADDR
// if tmpDist < dist then
72910: LD_VAR 0 6
72914: PUSH
72915: LD_VAR 0 5
72919: LESS
72920: IFFALSE 72942
// begin result := i ;
72922: LD_ADDR_VAR 0 3
72926: PUSH
72927: LD_VAR 0 4
72931: ST_TO_ADDR
// dist := tmpDist ;
72932: LD_ADDR_VAR 0 5
72936: PUSH
72937: LD_VAR 0 6
72941: ST_TO_ADDR
// end ; end ;
72942: GO 72874
72944: POP
72945: POP
// end ;
72946: LD_VAR 0 3
72950: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
72951: LD_INT 0
72953: PPUSH
// uc_side := side ;
72954: LD_ADDR_OWVAR 20
72958: PUSH
72959: LD_VAR 0 1
72963: ST_TO_ADDR
// uc_nation := 3 ;
72964: LD_ADDR_OWVAR 21
72968: PUSH
72969: LD_INT 3
72971: ST_TO_ADDR
// vc_chassis := 25 ;
72972: LD_ADDR_OWVAR 37
72976: PUSH
72977: LD_INT 25
72979: ST_TO_ADDR
// vc_engine := engine_siberite ;
72980: LD_ADDR_OWVAR 39
72984: PUSH
72985: LD_INT 3
72987: ST_TO_ADDR
// vc_control := control_computer ;
72988: LD_ADDR_OWVAR 38
72992: PUSH
72993: LD_INT 3
72995: ST_TO_ADDR
// vc_weapon := 59 ;
72996: LD_ADDR_OWVAR 40
73000: PUSH
73001: LD_INT 59
73003: ST_TO_ADDR
// result := CreateVehicle ;
73004: LD_ADDR_VAR 0 5
73008: PUSH
73009: CALL_OW 45
73013: ST_TO_ADDR
// SetDir ( result , d ) ;
73014: LD_VAR 0 5
73018: PPUSH
73019: LD_VAR 0 4
73023: PPUSH
73024: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
73028: LD_VAR 0 5
73032: PPUSH
73033: LD_VAR 0 2
73037: PPUSH
73038: LD_VAR 0 3
73042: PPUSH
73043: LD_INT 0
73045: PPUSH
73046: CALL_OW 48
// end ;
73050: LD_VAR 0 5
73054: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
73055: LD_INT 0
73057: PPUSH
73058: PPUSH
73059: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
73060: LD_ADDR_VAR 0 2
73064: PUSH
73065: LD_INT 0
73067: PUSH
73068: LD_INT 0
73070: PUSH
73071: LD_INT 0
73073: PUSH
73074: LD_INT 0
73076: PUSH
73077: EMPTY
73078: LIST
73079: LIST
73080: LIST
73081: LIST
73082: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
73083: LD_VAR 0 1
73087: NOT
73088: PUSH
73089: LD_VAR 0 1
73093: PPUSH
73094: CALL_OW 264
73098: PUSH
73099: LD_INT 12
73101: PUSH
73102: LD_INT 51
73104: PUSH
73105: LD_INT 32
73107: PUSH
73108: LD_INT 89
73110: PUSH
73111: EMPTY
73112: LIST
73113: LIST
73114: LIST
73115: LIST
73116: IN
73117: NOT
73118: OR
73119: IFFALSE 73123
// exit ;
73121: GO 73221
// for i := 1 to 3 do
73123: LD_ADDR_VAR 0 3
73127: PUSH
73128: DOUBLE
73129: LD_INT 1
73131: DEC
73132: ST_TO_ADDR
73133: LD_INT 3
73135: PUSH
73136: FOR_TO
73137: IFFALSE 73219
// begin tmp := GetCargo ( cargo , i ) ;
73139: LD_ADDR_VAR 0 4
73143: PUSH
73144: LD_VAR 0 1
73148: PPUSH
73149: LD_VAR 0 3
73153: PPUSH
73154: CALL_OW 289
73158: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
73159: LD_ADDR_VAR 0 2
73163: PUSH
73164: LD_VAR 0 2
73168: PPUSH
73169: LD_VAR 0 3
73173: PPUSH
73174: LD_VAR 0 4
73178: PPUSH
73179: CALL_OW 1
73183: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
73184: LD_ADDR_VAR 0 2
73188: PUSH
73189: LD_VAR 0 2
73193: PPUSH
73194: LD_INT 4
73196: PPUSH
73197: LD_VAR 0 2
73201: PUSH
73202: LD_INT 4
73204: ARRAY
73205: PUSH
73206: LD_VAR 0 4
73210: PLUS
73211: PPUSH
73212: CALL_OW 1
73216: ST_TO_ADDR
// end ;
73217: GO 73136
73219: POP
73220: POP
// end ;
73221: LD_VAR 0 2
73225: RET
// export function Length ( array ) ; begin
73226: LD_INT 0
73228: PPUSH
// result := array + 0 ;
73229: LD_ADDR_VAR 0 2
73233: PUSH
73234: LD_VAR 0 1
73238: PUSH
73239: LD_INT 0
73241: PLUS
73242: ST_TO_ADDR
// end ;
73243: LD_VAR 0 2
73247: RET
// export function PrepareArray ( array ) ; begin
73248: LD_INT 0
73250: PPUSH
// result := array diff 0 ;
73251: LD_ADDR_VAR 0 2
73255: PUSH
73256: LD_VAR 0 1
73260: PUSH
73261: LD_INT 0
73263: DIFF
73264: ST_TO_ADDR
// if not result [ 1 ] then
73265: LD_VAR 0 2
73269: PUSH
73270: LD_INT 1
73272: ARRAY
73273: NOT
73274: IFFALSE 73294
// result := Delete ( result , 1 ) ;
73276: LD_ADDR_VAR 0 2
73280: PUSH
73281: LD_VAR 0 2
73285: PPUSH
73286: LD_INT 1
73288: PPUSH
73289: CALL_OW 3
73293: ST_TO_ADDR
// end ; end_of_file
73294: LD_VAR 0 2
73298: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
73299: LD_VAR 0 1
73303: PUSH
73304: LD_INT 200
73306: DOUBLE
73307: GREATEREQUAL
73308: IFFALSE 73316
73310: LD_INT 299
73312: DOUBLE
73313: LESSEQUAL
73314: IFTRUE 73318
73316: GO 73350
73318: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
73319: LD_VAR 0 1
73323: PPUSH
73324: LD_VAR 0 2
73328: PPUSH
73329: LD_VAR 0 3
73333: PPUSH
73334: LD_VAR 0 4
73338: PPUSH
73339: LD_VAR 0 5
73343: PPUSH
73344: CALL 28201 0 5
73348: GO 73427
73350: LD_INT 300
73352: DOUBLE
73353: GREATEREQUAL
73354: IFFALSE 73362
73356: LD_INT 399
73358: DOUBLE
73359: LESSEQUAL
73360: IFTRUE 73364
73362: GO 73426
73364: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
73365: LD_VAR 0 1
73369: PPUSH
73370: LD_VAR 0 2
73374: PPUSH
73375: LD_VAR 0 3
73379: PPUSH
73380: LD_VAR 0 4
73384: PPUSH
73385: LD_VAR 0 5
73389: PPUSH
73390: LD_VAR 0 6
73394: PPUSH
73395: LD_VAR 0 7
73399: PPUSH
73400: LD_VAR 0 8
73404: PPUSH
73405: LD_VAR 0 9
73409: PPUSH
73410: LD_VAR 0 10
73414: PPUSH
73415: LD_VAR 0 11
73419: PPUSH
73420: CALL 24534 0 11
73424: GO 73427
73426: POP
// end ;
73427: PPOPN 11
73429: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
73430: LD_VAR 0 1
73434: PPUSH
73435: LD_VAR 0 2
73439: PPUSH
73440: LD_VAR 0 3
73444: PPUSH
73445: LD_VAR 0 4
73449: PPUSH
73450: LD_VAR 0 5
73454: PPUSH
73455: CALL 27937 0 5
// end ; end_of_file
73459: PPOPN 5
73461: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
73462: LD_VAR 0 1
73466: PPUSH
73467: LD_VAR 0 2
73471: PPUSH
73472: LD_VAR 0 3
73476: PPUSH
73477: LD_VAR 0 4
73481: PPUSH
73482: LD_VAR 0 5
73486: PPUSH
73487: LD_VAR 0 6
73491: PPUSH
73492: CALL 12227 0 6
// end ;
73496: PPOPN 6
73498: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
73499: LD_INT 0
73501: PPUSH
// begin if not units then
73502: LD_VAR 0 1
73506: NOT
73507: IFFALSE 73511
// exit ;
73509: GO 73511
// end ;
73511: PPOPN 7
73513: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
73514: CALL 12198 0 0
// end ;
73518: PPOPN 1
73520: END
