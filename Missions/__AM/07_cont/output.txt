// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// Init ;
   8: CALL 44 0 0
// DebugMode ;
  12: CALL 265 0 0
// AnimateTrees ( true ) ;
  16: LD_INT 1
  18: PPUSH
  19: CALL_OW 573
// CreateNature ;
  23: CALL 1568 0 0
// PrepareRussians ;
  27: CALL 4578 0 0
// PrepareAmericans ;
  31: CALL 3448 0 0
// Action ;
  35: CALL 8692 0 0
// SaveForQuickRestart ;
  39: CALL_OW 22
// end ;
  43: END
// export debug ; export mission_prev_prefix , mission_prefix ; export buildings_counter , time_to_end , can_end , must_end , kill_counter ; function Init ; begin
  44: LD_INT 0
  46: PPUSH
// debug := false ;
  47: LD_ADDR_EXP 1
  51: PUSH
  52: LD_INT 0
  54: ST_TO_ADDR
// mission_prefix := 07c_ ;
  55: LD_ADDR_EXP 3
  59: PUSH
  60: LD_STRING 07c_
  62: ST_TO_ADDR
// mission_prev_prefix := 07_ ;
  63: LD_ADDR_EXP 2
  67: PUSH
  68: LD_STRING 07_
  70: ST_TO_ADDR
// buildings_counter := 0 ;
  71: LD_ADDR_EXP 4
  75: PUSH
  76: LD_INT 0
  78: ST_TO_ADDR
// time_to_end := [ [ 32 32$00 , 29 29$00 , 26 26$00 , 23 23$00 ] [ Difficulty ] , [ 38 38$00 , 36 36$00 , 34 34$00 , 32 32$00 ] [ Difficulty ] , [ 43 43$00 , 41 41$00 , 39 39$00 , 37 37$00 ] [ Difficulty ] ] ;
  79: LD_ADDR_EXP 5
  83: PUSH
  84: LD_INT 67200
  86: PUSH
  87: LD_INT 60900
  89: PUSH
  90: LD_INT 54600
  92: PUSH
  93: LD_INT 48300
  95: PUSH
  96: EMPTY
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: PUSH
 102: LD_OWVAR 67
 106: ARRAY
 107: PUSH
 108: LD_INT 79800
 110: PUSH
 111: LD_INT 75600
 113: PUSH
 114: LD_INT 71400
 116: PUSH
 117: LD_INT 67200
 119: PUSH
 120: EMPTY
 121: LIST
 122: LIST
 123: LIST
 124: LIST
 125: PUSH
 126: LD_OWVAR 67
 130: ARRAY
 131: PUSH
 132: LD_INT 90300
 134: PUSH
 135: LD_INT 86100
 137: PUSH
 138: LD_INT 81900
 140: PUSH
 141: LD_INT 77700
 143: PUSH
 144: EMPTY
 145: LIST
 146: LIST
 147: LIST
 148: LIST
 149: PUSH
 150: LD_OWVAR 67
 154: ARRAY
 155: PUSH
 156: EMPTY
 157: LIST
 158: LIST
 159: LIST
 160: ST_TO_ADDR
// can_end := false ;
 161: LD_ADDR_EXP 6
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// must_end := false ;
 169: LD_ADDR_EXP 7
 173: PUSH
 174: LD_INT 0
 176: ST_TO_ADDR
// kill_counter := 0 ;
 177: LD_ADDR_EXP 8
 181: PUSH
 182: LD_INT 0
 184: ST_TO_ADDR
// end ;
 185: LD_VAR 0 1
 189: RET
// every 0 0$01 trigger not debug do
 190: LD_EXP 1
 194: NOT
 195: IFFALSE 264
 197: GO 199
 199: DISABLE
// begin enable ;
 200: ENABLE
// if not must_end then
 201: LD_EXP 7
 205: NOT
 206: IFFALSE 227
// display_strings := [ #Am07-1 , tick ] else
 208: LD_ADDR_OWVAR 47
 212: PUSH
 213: LD_STRING #Am07-1
 215: PUSH
 216: LD_OWVAR 1
 220: PUSH
 221: EMPTY
 222: LIST
 223: LIST
 224: ST_TO_ADDR
 225: GO 264
// display_strings := [ #Am07-1 , tick , #Am07-2 , time_to_end [ 3 ] - tick ] ;
 227: LD_ADDR_OWVAR 47
 231: PUSH
 232: LD_STRING #Am07-1
 234: PUSH
 235: LD_OWVAR 1
 239: PUSH
 240: LD_STRING #Am07-2
 242: PUSH
 243: LD_EXP 5
 247: PUSH
 248: LD_INT 3
 250: ARRAY
 251: PUSH
 252: LD_OWVAR 1
 256: MINUS
 257: PUSH
 258: EMPTY
 259: LIST
 260: LIST
 261: LIST
 262: LIST
 263: ST_TO_ADDR
// end ;
 264: END
// function DebugMode ; var i ; begin
 265: LD_INT 0
 267: PPUSH
 268: PPUSH
// if not debug then
 269: LD_EXP 1
 273: NOT
 274: IFFALSE 278
// exit ;
 276: GO 293
// Difficulty := 4 ;
 278: LD_ADDR_OWVAR 67
 282: PUSH
 283: LD_INT 4
 285: ST_TO_ADDR
// FogOff ( 1 ) ;
 286: LD_INT 1
 288: PPUSH
 289: CALL_OW 344
// end ;
 293: LD_VAR 0 1
 297: RET
// every 3 trigger debug do var i , filter ;
 298: LD_EXP 1
 302: IFFALSE 391
 304: GO 306
 306: DISABLE
 307: LD_INT 0
 309: PPUSH
 310: PPUSH
// begin enable ;
 311: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 500 ] ] ] ) ;
 312: LD_ADDR_VAR 0 2
 316: PUSH
 317: LD_INT 22
 319: PUSH
 320: LD_INT 1
 322: PUSH
 323: EMPTY
 324: LIST
 325: LIST
 326: PUSH
 327: LD_INT 3
 329: PUSH
 330: LD_INT 24
 332: PUSH
 333: LD_INT 500
 335: PUSH
 336: EMPTY
 337: LIST
 338: LIST
 339: PUSH
 340: EMPTY
 341: LIST
 342: LIST
 343: PUSH
 344: EMPTY
 345: LIST
 346: LIST
 347: PPUSH
 348: CALL_OW 69
 352: ST_TO_ADDR
// if not filter then
 353: LD_VAR 0 2
 357: NOT
 358: IFFALSE 362
// exit ;
 360: GO 391
// for i in filter do
 362: LD_ADDR_VAR 0 1
 366: PUSH
 367: LD_VAR 0 2
 371: PUSH
 372: FOR_IN
 373: IFFALSE 389
// SetLives ( i , 1000 ) ;
 375: LD_VAR 0 1
 379: PPUSH
 380: LD_INT 1000
 382: PPUSH
 383: CALL_OW 234
 387: GO 372
 389: POP
 390: POP
// end ;
 391: PPOPN 2
 393: END
// every 0 0$1 trigger kill_counter >= 20 do
 394: LD_EXP 8
 398: PUSH
 399: LD_INT 20
 401: GREATEREQUAL
 402: IFFALSE 414
 404: GO 406
 406: DISABLE
// SetAchievement ( ACH_HITMAN ) ;
 407: LD_STRING ACH_HITMAN
 409: PPUSH
 410: CALL_OW 543
 414: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] ] ) >= 3 do
 415: LD_INT 22
 417: PUSH
 418: LD_INT 1
 420: PUSH
 421: EMPTY
 422: LIST
 423: LIST
 424: PUSH
 425: LD_INT 23
 427: PUSH
 428: LD_INT 3
 430: PUSH
 431: EMPTY
 432: LIST
 433: LIST
 434: PUSH
 435: LD_INT 21
 437: PUSH
 438: LD_INT 2
 440: PUSH
 441: EMPTY
 442: LIST
 443: LIST
 444: PUSH
 445: EMPTY
 446: LIST
 447: LIST
 448: LIST
 449: PPUSH
 450: CALL_OW 69
 454: PUSH
 455: LD_INT 3
 457: GREATEREQUAL
 458: IFFALSE 470
 460: GO 462
 462: DISABLE
// SetAchievement ( ACH_TANKACE ) ;
 463: LD_STRING ACH_TANKACE
 465: PPUSH
 466: CALL_OW 543
 470: END
// every 0 0$1 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) = 0 do
 471: LD_INT 2
 473: PUSH
 474: LD_INT 30
 476: PUSH
 477: LD_INT 0
 479: PUSH
 480: EMPTY
 481: LIST
 482: LIST
 483: PUSH
 484: LD_INT 30
 486: PUSH
 487: LD_INT 1
 489: PUSH
 490: EMPTY
 491: LIST
 492: LIST
 493: PUSH
 494: EMPTY
 495: LIST
 496: LIST
 497: LIST
 498: PPUSH
 499: CALL_OW 69
 503: PUSH
 504: LD_INT 0
 506: EQUAL
 507: IFFALSE 519
 509: GO 511
 511: DISABLE
// SetAchievement ( ACH_COMMANDO ) ; end_of_file
 512: LD_STRING ACH_COMMANDO
 514: PPUSH
 515: CALL_OW 543
 519: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 520: LD_INT 0
 522: PPUSH
// uc_side := side ;
 523: LD_ADDR_OWVAR 20
 527: PUSH
 528: LD_VAR 0 1
 532: ST_TO_ADDR
// uc_nation := nation ;
 533: LD_ADDR_OWVAR 21
 537: PUSH
 538: LD_VAR 0 2
 542: ST_TO_ADDR
// vc_chassis := chassis ;
 543: LD_ADDR_OWVAR 37
 547: PUSH
 548: LD_VAR 0 3
 552: ST_TO_ADDR
// vc_engine := engine ;
 553: LD_ADDR_OWVAR 39
 557: PUSH
 558: LD_VAR 0 4
 562: ST_TO_ADDR
// vc_control := control ;
 563: LD_ADDR_OWVAR 38
 567: PUSH
 568: LD_VAR 0 5
 572: ST_TO_ADDR
// vc_weapon := weapon ;
 573: LD_ADDR_OWVAR 40
 577: PUSH
 578: LD_VAR 0 6
 582: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 583: LD_ADDR_OWVAR 41
 587: PUSH
 588: LD_VAR 0 7
 592: ST_TO_ADDR
// result := CreateVehicle ;
 593: LD_ADDR_VAR 0 8
 597: PUSH
 598: CALL_OW 45
 602: ST_TO_ADDR
// end ;
 603: LD_VAR 0 8
 607: RET
// export function GetRandom ( sex ) ; var i , filter ; begin
 608: LD_INT 0
 610: PPUSH
 611: PPUSH
 612: PPUSH
// filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam ] ;
 613: LD_ADDR_VAR 0 4
 617: PUSH
 618: LD_INT 22
 620: PUSH
 621: LD_INT 1
 623: PUSH
 624: EMPTY
 625: LIST
 626: LIST
 627: PUSH
 628: LD_INT 21
 630: PUSH
 631: LD_INT 1
 633: PUSH
 634: EMPTY
 635: LIST
 636: LIST
 637: PUSH
 638: LD_INT 50
 640: PUSH
 641: EMPTY
 642: LIST
 643: PUSH
 644: EMPTY
 645: LIST
 646: LIST
 647: LIST
 648: PPUSH
 649: CALL_OW 69
 653: PUSH
 654: LD_EXP 9
 658: PUSH
 659: LD_EXP 10
 663: PUSH
 664: LD_EXP 11
 668: PUSH
 669: LD_EXP 12
 673: PUSH
 674: LD_EXP 13
 678: PUSH
 679: LD_EXP 14
 683: PUSH
 684: LD_EXP 15
 688: PUSH
 689: LD_EXP 16
 693: PUSH
 694: LD_EXP 18
 698: PUSH
 699: LD_EXP 17
 703: PUSH
 704: EMPTY
 705: LIST
 706: LIST
 707: LIST
 708: LIST
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: LIST
 714: LIST
 715: DIFF
 716: ST_TO_ADDR
// if not filter then
 717: LD_VAR 0 4
 721: NOT
 722: IFFALSE 726
// exit ;
 724: GO 753
// result := UnitFilter ( filter , [ f_sex , sex ] ) ;
 726: LD_ADDR_VAR 0 2
 730: PUSH
 731: LD_VAR 0 4
 735: PPUSH
 736: LD_INT 26
 738: PUSH
 739: LD_VAR 0 1
 743: PUSH
 744: EMPTY
 745: LIST
 746: LIST
 747: PPUSH
 748: CALL_OW 72
 752: ST_TO_ADDR
// end ;
 753: LD_VAR 0 2
 757: RET
// export function SayX ( units , ident ) ; var i ; begin
 758: LD_INT 0
 760: PPUSH
 761: PPUSH
// result := false ;
 762: LD_ADDR_VAR 0 3
 766: PUSH
 767: LD_INT 0
 769: ST_TO_ADDR
// if not units then
 770: LD_VAR 0 1
 774: NOT
 775: IFFALSE 779
// exit ;
 777: GO 833
// for i in units do
 779: LD_ADDR_VAR 0 4
 783: PUSH
 784: LD_VAR 0 1
 788: PUSH
 789: FOR_IN
 790: IFFALSE 831
// if IsOk ( i ) then
 792: LD_VAR 0 4
 796: PPUSH
 797: CALL_OW 302
 801: IFFALSE 829
// begin Say ( i , ident ) ;
 803: LD_VAR 0 4
 807: PPUSH
 808: LD_VAR 0 2
 812: PPUSH
 813: CALL_OW 88
// result := i ;
 817: LD_ADDR_VAR 0 3
 821: PUSH
 822: LD_VAR 0 4
 826: ST_TO_ADDR
// break ;
 827: GO 831
// end ;
 829: GO 789
 831: POP
 832: POP
// end ;
 833: LD_VAR 0 3
 837: RET
// export function GoToAnotherTower ( un , b , x , y ) ; var i , filter , barracks , side ; begin
 838: LD_INT 0
 840: PPUSH
 841: PPUSH
 842: PPUSH
 843: PPUSH
 844: PPUSH
// if not un or not IsOk ( un ) then
 845: LD_VAR 0 1
 849: NOT
 850: PUSH
 851: LD_VAR 0 1
 855: PPUSH
 856: CALL_OW 302
 860: NOT
 861: OR
 862: IFFALSE 866
// exit ;
 864: GO 1173
// side := GetSide ( un ) ;
 866: LD_ADDR_VAR 0 9
 870: PUSH
 871: LD_VAR 0 1
 875: PPUSH
 876: CALL_OW 255
 880: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_not , [ f_tag , 7 ] ] , [ f_ok ] , [ f_empty ] ] ) diff b ;
 881: LD_ADDR_VAR 0 7
 885: PUSH
 886: LD_INT 22
 888: PUSH
 889: LD_VAR 0 9
 893: PUSH
 894: EMPTY
 895: LIST
 896: LIST
 897: PUSH
 898: LD_INT 30
 900: PUSH
 901: LD_INT 32
 903: PUSH
 904: EMPTY
 905: LIST
 906: LIST
 907: PUSH
 908: LD_INT 3
 910: PUSH
 911: LD_INT 120
 913: PUSH
 914: LD_INT 7
 916: PUSH
 917: EMPTY
 918: LIST
 919: LIST
 920: PUSH
 921: EMPTY
 922: LIST
 923: LIST
 924: PUSH
 925: LD_INT 50
 927: PUSH
 928: EMPTY
 929: LIST
 930: PUSH
 931: LD_INT 58
 933: PUSH
 934: EMPTY
 935: LIST
 936: PUSH
 937: EMPTY
 938: LIST
 939: LIST
 940: LIST
 941: LIST
 942: LIST
 943: PPUSH
 944: CALL_OW 69
 948: PUSH
 949: LD_VAR 0 2
 953: DIFF
 954: ST_TO_ADDR
// barracks := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_barracks ] ] ) ;
 955: LD_ADDR_VAR 0 8
 959: PUSH
 960: LD_INT 22
 962: PUSH
 963: LD_VAR 0 9
 967: PUSH
 968: EMPTY
 969: LIST
 970: LIST
 971: PUSH
 972: LD_INT 30
 974: PUSH
 975: LD_INT 5
 977: PUSH
 978: EMPTY
 979: LIST
 980: LIST
 981: PUSH
 982: EMPTY
 983: LIST
 984: LIST
 985: PPUSH
 986: CALL_OW 69
 990: ST_TO_ADDR
// if not filter then
 991: LD_VAR 0 7
 995: NOT
 996: IFFALSE 1086
// begin if barracks then
 998: LD_VAR 0 8
1002: IFFALSE 1065
// for i in barracks do
1004: LD_ADDR_VAR 0 6
1008: PUSH
1009: LD_VAR 0 8
1013: PUSH
1014: FOR_IN
1015: IFFALSE 1063
// begin if UnitsInside ( i ) < 6 and IsOk ( i ) then
1017: LD_VAR 0 6
1021: PPUSH
1022: CALL_OW 313
1026: PUSH
1027: LD_INT 6
1029: LESS
1030: PUSH
1031: LD_VAR 0 6
1035: PPUSH
1036: CALL_OW 302
1040: AND
1041: IFFALSE 1061
// begin ComEnterUnit ( un , i ) ;
1043: LD_VAR 0 1
1047: PPUSH
1048: LD_VAR 0 6
1052: PPUSH
1053: CALL_OW 120
// exit ;
1057: POP
1058: POP
1059: GO 1173
// end ; end ;
1061: GO 1014
1063: POP
1064: POP
// ComMoveXY ( un , x , y ) ;
1065: LD_VAR 0 1
1069: PPUSH
1070: LD_VAR 0 3
1074: PPUSH
1075: LD_VAR 0 4
1079: PPUSH
1080: CALL_OW 111
// end else
1084: GO 1173
// begin filter := SortByDistanceUnit ( un , filter , true , true ) ;
1086: LD_ADDR_VAR 0 7
1090: PUSH
1091: LD_VAR 0 1
1095: PPUSH
1096: LD_VAR 0 7
1100: PPUSH
1101: LD_INT 1
1103: PPUSH
1104: LD_INT 1
1106: PPUSH
1107: CALL 37903 0 4
1111: ST_TO_ADDR
// if filter then
1112: LD_VAR 0 7
1116: IFFALSE 1154
// begin SetTag ( filter [ 1 ] , 7 ) ;
1118: LD_VAR 0 7
1122: PUSH
1123: LD_INT 1
1125: ARRAY
1126: PPUSH
1127: LD_INT 7
1129: PPUSH
1130: CALL_OW 109
// ComEnterUnit ( un , filter [ 1 ] ) ;
1134: LD_VAR 0 1
1138: PPUSH
1139: LD_VAR 0 7
1143: PUSH
1144: LD_INT 1
1146: ARRAY
1147: PPUSH
1148: CALL_OW 120
// end else
1152: GO 1173
// ComMoveXY ( un , x , y ) ;
1154: LD_VAR 0 1
1158: PPUSH
1159: LD_VAR 0 3
1163: PPUSH
1164: LD_VAR 0 4
1168: PPUSH
1169: CALL_OW 111
// end ; end ;
1173: LD_VAR 0 5
1177: RET
// export function BaseNeedEnergy ( base ) ; var i , tmp ; begin
1178: LD_INT 0
1180: PPUSH
1181: PPUSH
1182: PPUSH
// if not base then
1183: LD_VAR 0 1
1187: NOT
1188: IFFALSE 1192
// exit ;
1190: GO 1250
// tmp := GetEnergy ( GetBase ( base ) ) ;
1192: LD_ADDR_VAR 0 4
1196: PUSH
1197: LD_VAR 0 1
1201: PPUSH
1202: CALL_OW 274
1206: PPUSH
1207: CALL_OW 278
1211: ST_TO_ADDR
// if tmp [ 1 ] > tmp [ 4 ] then
1212: LD_VAR 0 4
1216: PUSH
1217: LD_INT 1
1219: ARRAY
1220: PUSH
1221: LD_VAR 0 4
1225: PUSH
1226: LD_INT 4
1228: ARRAY
1229: GREATER
1230: IFFALSE 1242
// result := true else
1232: LD_ADDR_VAR 0 2
1236: PUSH
1237: LD_INT 1
1239: ST_TO_ADDR
1240: GO 1250
// result := false ;
1242: LD_ADDR_VAR 0 2
1246: PUSH
1247: LD_INT 0
1249: ST_TO_ADDR
// end ;
1250: LD_VAR 0 2
1254: RET
// export function FilterPeople ( side ) ; begin
1255: LD_INT 0
1257: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] ] ) ;
1258: LD_ADDR_VAR 0 2
1262: PUSH
1263: LD_INT 22
1265: PUSH
1266: LD_VAR 0 1
1270: PUSH
1271: EMPTY
1272: LIST
1273: LIST
1274: PUSH
1275: LD_INT 21
1277: PUSH
1278: LD_INT 1
1280: PUSH
1281: EMPTY
1282: LIST
1283: LIST
1284: PUSH
1285: EMPTY
1286: LIST
1287: LIST
1288: PPUSH
1289: CALL_OW 69
1293: ST_TO_ADDR
// end ;
1294: LD_VAR 0 2
1298: RET
// export function FilterDrivers ( side ) ; begin
1299: LD_INT 0
1301: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_outside ] ] ] ) ;
1302: LD_ADDR_VAR 0 2
1306: PUSH
1307: LD_INT 22
1309: PUSH
1310: LD_VAR 0 1
1314: PUSH
1315: EMPTY
1316: LIST
1317: LIST
1318: PUSH
1319: LD_INT 3
1321: PUSH
1322: LD_INT 56
1324: PUSH
1325: EMPTY
1326: LIST
1327: PUSH
1328: EMPTY
1329: LIST
1330: LIST
1331: PUSH
1332: EMPTY
1333: LIST
1334: LIST
1335: PPUSH
1336: CALL_OW 69
1340: ST_TO_ADDR
// end ;
1341: LD_VAR 0 2
1345: RET
// export function FilterPeopleArea ( side , area ) ; begin
1346: LD_INT 0
1348: PPUSH
// result := FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ;
1349: LD_ADDR_VAR 0 3
1353: PUSH
1354: LD_VAR 0 2
1358: PPUSH
1359: LD_INT 22
1361: PUSH
1362: LD_INT 1
1364: PUSH
1365: EMPTY
1366: LIST
1367: LIST
1368: PUSH
1369: LD_INT 21
1371: PUSH
1372: LD_INT 1
1374: PUSH
1375: EMPTY
1376: LIST
1377: LIST
1378: PUSH
1379: EMPTY
1380: LIST
1381: LIST
1382: PPUSH
1383: CALL_OW 70
1387: ST_TO_ADDR
// end ;
1388: LD_VAR 0 3
1392: RET
// export function FilterDriversArea ( side , area ) ; var i , tmp ; begin
1393: LD_INT 0
1395: PPUSH
1396: PPUSH
1397: PPUSH
// tmp := FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) ;
1398: LD_ADDR_VAR 0 5
1402: PUSH
1403: LD_VAR 0 2
1407: PPUSH
1408: LD_INT 22
1410: PUSH
1411: LD_INT 1
1413: PUSH
1414: EMPTY
1415: LIST
1416: LIST
1417: PUSH
1418: LD_INT 21
1420: PUSH
1421: LD_INT 2
1423: PUSH
1424: EMPTY
1425: LIST
1426: LIST
1427: PUSH
1428: LD_INT 3
1430: PUSH
1431: LD_INT 58
1433: PUSH
1434: EMPTY
1435: LIST
1436: PUSH
1437: EMPTY
1438: LIST
1439: LIST
1440: PUSH
1441: EMPTY
1442: LIST
1443: LIST
1444: LIST
1445: PPUSH
1446: CALL_OW 70
1450: ST_TO_ADDR
// result := [ ] ;
1451: LD_ADDR_VAR 0 3
1455: PUSH
1456: EMPTY
1457: ST_TO_ADDR
// if not tmp then
1458: LD_VAR 0 5
1462: NOT
1463: IFFALSE 1467
// exit ;
1465: GO 1519
// for i in tmp do
1467: LD_ADDR_VAR 0 4
1471: PUSH
1472: LD_VAR 0 5
1476: PUSH
1477: FOR_IN
1478: IFFALSE 1503
// result := result union IsDrivenBy ( i ) ;
1480: LD_ADDR_VAR 0 3
1484: PUSH
1485: LD_VAR 0 3
1489: PUSH
1490: LD_VAR 0 4
1494: PPUSH
1495: CALL_OW 311
1499: UNION
1500: ST_TO_ADDR
1501: GO 1477
1503: POP
1504: POP
// result := result diff 0 ;
1505: LD_ADDR_VAR 0 3
1509: PUSH
1510: LD_VAR 0 3
1514: PUSH
1515: LD_INT 0
1517: DIFF
1518: ST_TO_ADDR
// end ;
1519: LD_VAR 0 3
1523: RET
// export function FilterBuildings ( side ) ; begin
1524: LD_INT 0
1526: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
1527: LD_ADDR_VAR 0 2
1531: PUSH
1532: LD_INT 22
1534: PUSH
1535: LD_VAR 0 1
1539: PUSH
1540: EMPTY
1541: LIST
1542: LIST
1543: PUSH
1544: LD_INT 21
1546: PUSH
1547: LD_INT 3
1549: PUSH
1550: EMPTY
1551: LIST
1552: LIST
1553: PUSH
1554: EMPTY
1555: LIST
1556: LIST
1557: PPUSH
1558: CALL_OW 69
1562: ST_TO_ADDR
// end ;
1563: LD_VAR 0 2
1567: RET
// export function CreateNature ; var i , animal , nat_area ; begin
1568: LD_INT 0
1570: PPUSH
1571: PPUSH
1572: PPUSH
1573: PPUSH
// uc_side = 0 ;
1574: LD_ADDR_OWVAR 20
1578: PUSH
1579: LD_INT 0
1581: ST_TO_ADDR
// uc_nation = 0 ;
1582: LD_ADDR_OWVAR 21
1586: PUSH
1587: LD_INT 0
1589: ST_TO_ADDR
// nat_area := wildArea ;
1590: LD_ADDR_VAR 0 4
1594: PUSH
1595: LD_INT 3
1597: ST_TO_ADDR
// InitHc ;
1598: CALL_OW 19
// for i = 1 to 4 do
1602: LD_ADDR_VAR 0 2
1606: PUSH
1607: DOUBLE
1608: LD_INT 1
1610: DEC
1611: ST_TO_ADDR
1612: LD_INT 4
1614: PUSH
1615: FOR_TO
1616: IFFALSE 1671
// begin hc_class = 18 ;
1618: LD_ADDR_OWVAR 28
1622: PUSH
1623: LD_INT 18
1625: ST_TO_ADDR
// hc_gallery =  ;
1626: LD_ADDR_OWVAR 33
1630: PUSH
1631: LD_STRING 
1633: ST_TO_ADDR
// hc_face_number = 1 ;
1634: LD_ADDR_OWVAR 34
1638: PUSH
1639: LD_INT 1
1641: ST_TO_ADDR
// animal := CreateHuman ;
1642: LD_ADDR_VAR 0 3
1646: PUSH
1647: CALL_OW 44
1651: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
1652: LD_VAR 0 3
1656: PPUSH
1657: LD_VAR 0 4
1661: PPUSH
1662: LD_INT 0
1664: PPUSH
1665: CALL_OW 49
// end ;
1669: GO 1615
1671: POP
1672: POP
// for i = 1 to 6 do
1673: LD_ADDR_VAR 0 2
1677: PUSH
1678: DOUBLE
1679: LD_INT 1
1681: DEC
1682: ST_TO_ADDR
1683: LD_INT 6
1685: PUSH
1686: FOR_TO
1687: IFFALSE 1758
// begin hc_class = class_tiger ;
1689: LD_ADDR_OWVAR 28
1693: PUSH
1694: LD_INT 14
1696: ST_TO_ADDR
// hc_gallery =  ;
1697: LD_ADDR_OWVAR 33
1701: PUSH
1702: LD_STRING 
1704: ST_TO_ADDR
// hc_agressivity = Rand ( 0 , 10 ) ;
1705: LD_ADDR_OWVAR 35
1709: PUSH
1710: LD_INT 0
1712: PPUSH
1713: LD_INT 10
1715: PPUSH
1716: CALL_OW 12
1720: ST_TO_ADDR
// hc_face_number = 3 ;
1721: LD_ADDR_OWVAR 34
1725: PUSH
1726: LD_INT 3
1728: ST_TO_ADDR
// animal := CreateHuman ;
1729: LD_ADDR_VAR 0 3
1733: PUSH
1734: CALL_OW 44
1738: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
1739: LD_VAR 0 3
1743: PPUSH
1744: LD_VAR 0 4
1748: PPUSH
1749: LD_INT 0
1751: PPUSH
1752: CALL_OW 49
// end ;
1756: GO 1686
1758: POP
1759: POP
// for i = 1 to 2 do
1760: LD_ADDR_VAR 0 2
1764: PUSH
1765: DOUBLE
1766: LD_INT 1
1768: DEC
1769: ST_TO_ADDR
1770: LD_INT 2
1772: PUSH
1773: FOR_TO
1774: IFFALSE 1837
// begin hc_class = 21 ;
1776: LD_ADDR_OWVAR 28
1780: PUSH
1781: LD_INT 21
1783: ST_TO_ADDR
// hc_gallery =  ;
1784: LD_ADDR_OWVAR 33
1788: PUSH
1789: LD_STRING 
1791: ST_TO_ADDR
// hc_agressivity = 0 ;
1792: LD_ADDR_OWVAR 35
1796: PUSH
1797: LD_INT 0
1799: ST_TO_ADDR
// hc_face_number = 5 ;
1800: LD_ADDR_OWVAR 34
1804: PUSH
1805: LD_INT 5
1807: ST_TO_ADDR
// animal := CreateHuman ;
1808: LD_ADDR_VAR 0 3
1812: PUSH
1813: CALL_OW 44
1817: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
1818: LD_VAR 0 3
1822: PPUSH
1823: LD_VAR 0 4
1827: PPUSH
1828: LD_INT 0
1830: PPUSH
1831: CALL_OW 49
// end ;
1835: GO 1773
1837: POP
1838: POP
// for i = 1 to 6 do
1839: LD_ADDR_VAR 0 2
1843: PUSH
1844: DOUBLE
1845: LD_INT 1
1847: DEC
1848: ST_TO_ADDR
1849: LD_INT 6
1851: PUSH
1852: FOR_TO
1853: IFFALSE 1908
// begin hc_class = 13 ;
1855: LD_ADDR_OWVAR 28
1859: PUSH
1860: LD_INT 13
1862: ST_TO_ADDR
// hc_gallery =  ;
1863: LD_ADDR_OWVAR 33
1867: PUSH
1868: LD_STRING 
1870: ST_TO_ADDR
// hc_face_number = 4 ;
1871: LD_ADDR_OWVAR 34
1875: PUSH
1876: LD_INT 4
1878: ST_TO_ADDR
// animal := CreateHuman ;
1879: LD_ADDR_VAR 0 3
1883: PUSH
1884: CALL_OW 44
1888: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
1889: LD_VAR 0 3
1893: PPUSH
1894: LD_VAR 0 4
1898: PPUSH
1899: LD_INT 0
1901: PPUSH
1902: CALL_OW 49
// end ;
1906: GO 1852
1908: POP
1909: POP
// for i = 1 to 2 do
1910: LD_ADDR_VAR 0 2
1914: PUSH
1915: DOUBLE
1916: LD_INT 1
1918: DEC
1919: ST_TO_ADDR
1920: LD_INT 2
1922: PUSH
1923: FOR_TO
1924: IFFALSE 1983
// begin hc_class = 20 ;
1926: LD_ADDR_OWVAR 28
1930: PUSH
1931: LD_INT 20
1933: ST_TO_ADDR
// hc_gallery =  ;
1934: LD_ADDR_OWVAR 33
1938: PUSH
1939: LD_STRING 
1941: ST_TO_ADDR
// hc_face_number = 2 ;
1942: LD_ADDR_OWVAR 34
1946: PUSH
1947: LD_INT 2
1949: ST_TO_ADDR
// animal := CreateHuman ;
1950: LD_ADDR_VAR 0 3
1954: PUSH
1955: CALL_OW 44
1959: ST_TO_ADDR
// PlaceUnitXYR ( animal , 101 , 37 , 3 , false ) ;
1960: LD_VAR 0 3
1964: PPUSH
1965: LD_INT 101
1967: PPUSH
1968: LD_INT 37
1970: PPUSH
1971: LD_INT 3
1973: PPUSH
1974: LD_INT 0
1976: PPUSH
1977: CALL_OW 50
// end ;
1981: GO 1923
1983: POP
1984: POP
// for i = 1 to 1 do
1985: LD_ADDR_VAR 0 2
1989: PUSH
1990: DOUBLE
1991: LD_INT 1
1993: DEC
1994: ST_TO_ADDR
1995: LD_INT 1
1997: PUSH
1998: FOR_TO
1999: IFFALSE 2046
// begin vc_chassis := 31 ;
2001: LD_ADDR_OWVAR 37
2005: PUSH
2006: LD_INT 31
2008: ST_TO_ADDR
// vc_control := control_rider ;
2009: LD_ADDR_OWVAR 38
2013: PUSH
2014: LD_INT 4
2016: ST_TO_ADDR
// animal := CreateVehicle ;
2017: LD_ADDR_VAR 0 3
2021: PUSH
2022: CALL_OW 45
2026: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
2027: LD_VAR 0 3
2031: PPUSH
2032: LD_VAR 0 4
2036: PPUSH
2037: LD_INT 0
2039: PPUSH
2040: CALL_OW 49
// end ;
2044: GO 1998
2046: POP
2047: POP
// end ;
2048: LD_VAR 0 1
2052: RET
// export function NearbyTowerHasEnergy ( unit ) ; var i , tmp , energy ; begin
2053: LD_INT 0
2055: PPUSH
2056: PPUSH
2057: PPUSH
2058: PPUSH
// result := [ ] ;
2059: LD_ADDR_VAR 0 2
2063: PUSH
2064: EMPTY
2065: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( unit ) ] , [ f_dist , unit , 15 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) ;
2066: LD_ADDR_VAR 0 4
2070: PUSH
2071: LD_INT 81
2073: PUSH
2074: LD_VAR 0 1
2078: PPUSH
2079: CALL_OW 255
2083: PUSH
2084: EMPTY
2085: LIST
2086: LIST
2087: PUSH
2088: LD_INT 91
2090: PUSH
2091: LD_VAR 0 1
2095: PUSH
2096: LD_INT 15
2098: PUSH
2099: EMPTY
2100: LIST
2101: LIST
2102: LIST
2103: PUSH
2104: LD_INT 2
2106: PUSH
2107: LD_INT 30
2109: PUSH
2110: LD_INT 32
2112: PUSH
2113: EMPTY
2114: LIST
2115: LIST
2116: PUSH
2117: LD_INT 30
2119: PUSH
2120: LD_INT 33
2122: PUSH
2123: EMPTY
2124: LIST
2125: LIST
2126: PUSH
2127: EMPTY
2128: LIST
2129: LIST
2130: LIST
2131: PUSH
2132: EMPTY
2133: LIST
2134: LIST
2135: LIST
2136: PPUSH
2137: CALL_OW 69
2141: ST_TO_ADDR
// if not tmp then
2142: LD_VAR 0 4
2146: NOT
2147: IFFALSE 2151
// exit ;
2149: GO 2220
// for i in tmp do
2151: LD_ADDR_VAR 0 3
2155: PUSH
2156: LD_VAR 0 4
2160: PUSH
2161: FOR_IN
2162: IFFALSE 2218
// begin energy := GetEnergy ( GetBase ( i ) ) ;
2164: LD_ADDR_VAR 0 5
2168: PUSH
2169: LD_VAR 0 3
2173: PPUSH
2174: CALL_OW 274
2178: PPUSH
2179: CALL_OW 278
2183: ST_TO_ADDR
// if energy [ 4 ] > energy [ 1 ] then
2184: LD_VAR 0 5
2188: PUSH
2189: LD_INT 4
2191: ARRAY
2192: PUSH
2193: LD_VAR 0 5
2197: PUSH
2198: LD_INT 1
2200: ARRAY
2201: GREATER
2202: IFFALSE 2216
// begin result := i ;
2204: LD_ADDR_VAR 0 2
2208: PUSH
2209: LD_VAR 0 3
2213: ST_TO_ADDR
// break ;
2214: GO 2218
// end ; end ;
2216: GO 2161
2218: POP
2219: POP
// end ;
2220: LD_VAR 0 2
2224: RET
// export function GetTurretWeaponBase ( tower ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
2225: LD_INT 0
2227: PPUSH
2228: PPUSH
2229: PPUSH
2230: PPUSH
2231: PPUSH
2232: PPUSH
2233: PPUSH
2234: PPUSH
2235: PPUSH
2236: PPUSH
2237: PPUSH
2238: PPUSH
2239: PPUSH
2240: PPUSH
2241: PPUSH
2242: PPUSH
// result := false ;
2243: LD_ADDR_VAR 0 2
2247: PUSH
2248: LD_INT 0
2250: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
2251: LD_VAR 0 1
2255: NOT
2256: PUSH
2257: LD_VAR 0 1
2261: PPUSH
2262: CALL_OW 266
2266: PUSH
2267: LD_INT 32
2269: PUSH
2270: LD_INT 33
2272: PUSH
2273: EMPTY
2274: LIST
2275: LIST
2276: IN
2277: NOT
2278: OR
2279: IFFALSE 2283
// exit ;
2281: GO 3443
// nat := GetNation ( tower ) ;
2283: LD_ADDR_VAR 0 11
2287: PUSH
2288: LD_VAR 0 1
2292: PPUSH
2293: CALL_OW 248
2297: ST_TO_ADDR
// side := GetSide ( tower ) ;
2298: LD_ADDR_VAR 0 15
2302: PUSH
2303: LD_VAR 0 1
2307: PPUSH
2308: CALL_OW 255
2312: ST_TO_ADDR
// x := GetX ( tower ) ;
2313: LD_ADDR_VAR 0 9
2317: PUSH
2318: LD_VAR 0 1
2322: PPUSH
2323: CALL_OW 250
2327: ST_TO_ADDR
// y := GetY ( tower ) ;
2328: LD_ADDR_VAR 0 10
2332: PUSH
2333: LD_VAR 0 1
2337: PPUSH
2338: CALL_OW 251
2342: ST_TO_ADDR
// if not x or not y then
2343: LD_VAR 0 9
2347: NOT
2348: PUSH
2349: LD_VAR 0 10
2353: NOT
2354: OR
2355: IFFALSE 2359
// exit ;
2357: GO 3443
// weapon := 0 ;
2359: LD_ADDR_VAR 0 17
2363: PUSH
2364: LD_INT 0
2366: ST_TO_ADDR
// fac_list := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun ] ;
2367: LD_ADDR_VAR 0 16
2371: PUSH
2372: LD_INT 42
2374: PUSH
2375: LD_INT 43
2377: PUSH
2378: LD_INT 44
2380: PUSH
2381: LD_INT 46
2383: PUSH
2384: EMPTY
2385: LIST
2386: LIST
2387: LIST
2388: LIST
2389: ST_TO_ADDR
// if not fac_list then
2390: LD_VAR 0 16
2394: NOT
2395: IFFALSE 2399
// exit ;
2397: GO 3443
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
2399: LD_ADDR_VAR 0 4
2403: PUSH
2404: LD_INT 4
2406: PUSH
2407: LD_INT 5
2409: PUSH
2410: LD_INT 9
2412: PUSH
2413: LD_INT 10
2415: PUSH
2416: LD_INT 6
2418: PUSH
2419: LD_INT 7
2421: PUSH
2422: LD_INT 11
2424: PUSH
2425: EMPTY
2426: LIST
2427: LIST
2428: LIST
2429: LIST
2430: LIST
2431: LIST
2432: LIST
2433: PUSH
2434: LD_INT 27
2436: PUSH
2437: LD_INT 28
2439: PUSH
2440: LD_INT 26
2442: PUSH
2443: LD_INT 30
2445: PUSH
2446: EMPTY
2447: LIST
2448: LIST
2449: LIST
2450: LIST
2451: PUSH
2452: LD_INT 43
2454: PUSH
2455: LD_INT 44
2457: PUSH
2458: LD_INT 46
2460: PUSH
2461: LD_INT 45
2463: PUSH
2464: LD_INT 47
2466: PUSH
2467: LD_INT 49
2469: PUSH
2470: EMPTY
2471: LIST
2472: LIST
2473: LIST
2474: LIST
2475: LIST
2476: LIST
2477: PUSH
2478: EMPTY
2479: LIST
2480: LIST
2481: LIST
2482: PUSH
2483: LD_VAR 0 11
2487: ARRAY
2488: ST_TO_ADDR
// for i in list do
2489: LD_ADDR_VAR 0 7
2493: PUSH
2494: LD_VAR 0 4
2498: PUSH
2499: FOR_IN
2500: IFFALSE 2533
// if not i in fac_list then
2502: LD_VAR 0 7
2506: PUSH
2507: LD_VAR 0 16
2511: IN
2512: NOT
2513: IFFALSE 2531
// list := list diff i ;
2515: LD_ADDR_VAR 0 4
2519: PUSH
2520: LD_VAR 0 4
2524: PUSH
2525: LD_VAR 0 7
2529: DIFF
2530: ST_TO_ADDR
2531: GO 2499
2533: POP
2534: POP
// if not list then
2535: LD_VAR 0 4
2539: NOT
2540: IFFALSE 2544
// exit ;
2542: GO 3443
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
2544: LD_VAR 0 11
2548: PUSH
2549: LD_INT 3
2551: EQUAL
2552: PUSH
2553: LD_INT 49
2555: PUSH
2556: LD_VAR 0 4
2560: IN
2561: AND
2562: PUSH
2563: LD_INT 31
2565: PPUSH
2566: LD_VAR 0 15
2570: PPUSH
2571: CALL_OW 321
2575: PUSH
2576: LD_INT 2
2578: EQUAL
2579: AND
2580: IFFALSE 2640
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
2582: LD_INT 22
2584: PUSH
2585: LD_VAR 0 15
2589: PUSH
2590: EMPTY
2591: LIST
2592: LIST
2593: PUSH
2594: LD_INT 35
2596: PUSH
2597: LD_INT 49
2599: PUSH
2600: EMPTY
2601: LIST
2602: LIST
2603: PUSH
2604: LD_INT 91
2606: PUSH
2607: LD_VAR 0 1
2611: PUSH
2612: LD_INT 10
2614: PUSH
2615: EMPTY
2616: LIST
2617: LIST
2618: LIST
2619: PUSH
2620: EMPTY
2621: LIST
2622: LIST
2623: LIST
2624: PPUSH
2625: CALL_OW 69
2629: NOT
2630: IFFALSE 2640
// weapon := ru_time_lapser ;
2632: LD_ADDR_VAR 0 17
2636: PUSH
2637: LD_INT 49
2639: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
2640: LD_VAR 0 11
2644: PUSH
2645: LD_INT 1
2647: PUSH
2648: LD_INT 2
2650: PUSH
2651: EMPTY
2652: LIST
2653: LIST
2654: IN
2655: PUSH
2656: LD_INT 11
2658: PUSH
2659: LD_VAR 0 4
2663: IN
2664: PUSH
2665: LD_INT 30
2667: PUSH
2668: LD_VAR 0 4
2672: IN
2673: OR
2674: AND
2675: PUSH
2676: LD_INT 6
2678: PPUSH
2679: LD_VAR 0 15
2683: PPUSH
2684: CALL_OW 321
2688: PUSH
2689: LD_INT 2
2691: EQUAL
2692: AND
2693: IFFALSE 2858
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
2695: LD_INT 22
2697: PUSH
2698: LD_VAR 0 15
2702: PUSH
2703: EMPTY
2704: LIST
2705: LIST
2706: PUSH
2707: LD_INT 2
2709: PUSH
2710: LD_INT 35
2712: PUSH
2713: LD_INT 11
2715: PUSH
2716: EMPTY
2717: LIST
2718: LIST
2719: PUSH
2720: LD_INT 35
2722: PUSH
2723: LD_INT 30
2725: PUSH
2726: EMPTY
2727: LIST
2728: LIST
2729: PUSH
2730: EMPTY
2731: LIST
2732: LIST
2733: LIST
2734: PUSH
2735: LD_INT 91
2737: PUSH
2738: LD_VAR 0 1
2742: PUSH
2743: LD_INT 18
2745: PUSH
2746: EMPTY
2747: LIST
2748: LIST
2749: LIST
2750: PUSH
2751: EMPTY
2752: LIST
2753: LIST
2754: LIST
2755: PPUSH
2756: CALL_OW 69
2760: NOT
2761: PUSH
2762: LD_INT 22
2764: PUSH
2765: LD_VAR 0 15
2769: PUSH
2770: EMPTY
2771: LIST
2772: LIST
2773: PUSH
2774: LD_INT 2
2776: PUSH
2777: LD_INT 30
2779: PUSH
2780: LD_INT 32
2782: PUSH
2783: EMPTY
2784: LIST
2785: LIST
2786: PUSH
2787: LD_INT 30
2789: PUSH
2790: LD_INT 33
2792: PUSH
2793: EMPTY
2794: LIST
2795: LIST
2796: PUSH
2797: EMPTY
2798: LIST
2799: LIST
2800: LIST
2801: PUSH
2802: LD_INT 91
2804: PUSH
2805: LD_VAR 0 1
2809: PUSH
2810: LD_INT 12
2812: PUSH
2813: EMPTY
2814: LIST
2815: LIST
2816: LIST
2817: PUSH
2818: EMPTY
2819: LIST
2820: LIST
2821: LIST
2822: PUSH
2823: EMPTY
2824: LIST
2825: PPUSH
2826: CALL_OW 69
2830: PUSH
2831: LD_INT 2
2833: GREATER
2834: AND
2835: IFFALSE 2858
// weapon := [ us_radar , ar_radar ] [ nat ] ;
2837: LD_ADDR_VAR 0 17
2841: PUSH
2842: LD_INT 11
2844: PUSH
2845: LD_INT 30
2847: PUSH
2848: EMPTY
2849: LIST
2850: LIST
2851: PUSH
2852: LD_VAR 0 11
2856: ARRAY
2857: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
2858: LD_VAR 0 17
2862: NOT
2863: PUSH
2864: LD_INT 40
2866: PPUSH
2867: LD_VAR 0 15
2871: PPUSH
2872: CALL_OW 321
2876: PUSH
2877: LD_INT 2
2879: EQUAL
2880: AND
2881: PUSH
2882: LD_INT 7
2884: PUSH
2885: LD_VAR 0 4
2889: IN
2890: PUSH
2891: LD_INT 28
2893: PUSH
2894: LD_VAR 0 4
2898: IN
2899: OR
2900: PUSH
2901: LD_INT 45
2903: PUSH
2904: LD_VAR 0 4
2908: IN
2909: OR
2910: AND
2911: IFFALSE 3165
// begin hex := GetHexInfo ( x , y ) ;
2913: LD_ADDR_VAR 0 3
2917: PUSH
2918: LD_VAR 0 9
2922: PPUSH
2923: LD_VAR 0 10
2927: PPUSH
2928: CALL_OW 546
2932: ST_TO_ADDR
// if hex [ 1 ] then
2933: LD_VAR 0 3
2937: PUSH
2938: LD_INT 1
2940: ARRAY
2941: IFFALSE 2945
// exit ;
2943: GO 3443
// height := hex [ 2 ] ;
2945: LD_ADDR_VAR 0 14
2949: PUSH
2950: LD_VAR 0 3
2954: PUSH
2955: LD_INT 2
2957: ARRAY
2958: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
2959: LD_ADDR_VAR 0 13
2963: PUSH
2964: LD_INT 0
2966: PUSH
2967: LD_INT 2
2969: PUSH
2970: LD_INT 3
2972: PUSH
2973: LD_INT 5
2975: PUSH
2976: EMPTY
2977: LIST
2978: LIST
2979: LIST
2980: LIST
2981: ST_TO_ADDR
// for i in tmp do
2982: LD_ADDR_VAR 0 7
2986: PUSH
2987: LD_VAR 0 13
2991: PUSH
2992: FOR_IN
2993: IFFALSE 3163
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
2995: LD_ADDR_VAR 0 8
2999: PUSH
3000: LD_VAR 0 9
3004: PPUSH
3005: LD_VAR 0 7
3009: PPUSH
3010: LD_INT 5
3012: PPUSH
3013: CALL_OW 272
3017: PUSH
3018: LD_VAR 0 10
3022: PPUSH
3023: LD_VAR 0 7
3027: PPUSH
3028: LD_INT 5
3030: PPUSH
3031: CALL_OW 273
3035: PUSH
3036: EMPTY
3037: LIST
3038: LIST
3039: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
3040: LD_VAR 0 8
3044: PUSH
3045: LD_INT 1
3047: ARRAY
3048: PPUSH
3049: LD_VAR 0 8
3053: PUSH
3054: LD_INT 2
3056: ARRAY
3057: PPUSH
3058: CALL_OW 488
3062: IFFALSE 3161
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
3064: LD_ADDR_VAR 0 3
3068: PUSH
3069: LD_VAR 0 8
3073: PUSH
3074: LD_INT 1
3076: ARRAY
3077: PPUSH
3078: LD_VAR 0 8
3082: PUSH
3083: LD_INT 2
3085: ARRAY
3086: PPUSH
3087: CALL_OW 546
3091: ST_TO_ADDR
// if hex [ 1 ] then
3092: LD_VAR 0 3
3096: PUSH
3097: LD_INT 1
3099: ARRAY
3100: IFFALSE 3104
// continue ;
3102: GO 2992
// h := hex [ 2 ] ;
3104: LD_ADDR_VAR 0 12
3108: PUSH
3109: LD_VAR 0 3
3113: PUSH
3114: LD_INT 2
3116: ARRAY
3117: ST_TO_ADDR
// if h + 7 < height then
3118: LD_VAR 0 12
3122: PUSH
3123: LD_INT 7
3125: PLUS
3126: PUSH
3127: LD_VAR 0 14
3131: LESS
3132: IFFALSE 3161
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
3134: LD_ADDR_VAR 0 17
3138: PUSH
3139: LD_INT 7
3141: PUSH
3142: LD_INT 28
3144: PUSH
3145: LD_INT 45
3147: PUSH
3148: EMPTY
3149: LIST
3150: LIST
3151: LIST
3152: PUSH
3153: LD_VAR 0 11
3157: ARRAY
3158: ST_TO_ADDR
// break ;
3159: GO 3163
// end ; end ; end ;
3161: GO 2992
3163: POP
3164: POP
// end ; if not weapon then
3165: LD_VAR 0 17
3169: NOT
3170: IFFALSE 3325
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
3172: LD_ADDR_VAR 0 4
3176: PUSH
3177: LD_VAR 0 4
3181: PUSH
3182: LD_INT 11
3184: PUSH
3185: LD_INT 30
3187: PUSH
3188: LD_INT 49
3190: PUSH
3191: EMPTY
3192: LIST
3193: LIST
3194: LIST
3195: DIFF
3196: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , tower , 6 ] , [ f_not , [ f_bweapon , 0 ] ] ] ) ;
3197: LD_ADDR_VAR 0 13
3201: PUSH
3202: LD_INT 22
3204: PUSH
3205: LD_VAR 0 15
3209: PUSH
3210: EMPTY
3211: LIST
3212: LIST
3213: PUSH
3214: LD_INT 91
3216: PUSH
3217: LD_VAR 0 1
3221: PUSH
3222: LD_INT 6
3224: PUSH
3225: EMPTY
3226: LIST
3227: LIST
3228: LIST
3229: PUSH
3230: LD_INT 3
3232: PUSH
3233: LD_INT 35
3235: PUSH
3236: LD_INT 0
3238: PUSH
3239: EMPTY
3240: LIST
3241: LIST
3242: PUSH
3243: EMPTY
3244: LIST
3245: LIST
3246: PUSH
3247: EMPTY
3248: LIST
3249: LIST
3250: LIST
3251: PPUSH
3252: CALL_OW 69
3256: ST_TO_ADDR
// for i in tmp do
3257: LD_ADDR_VAR 0 7
3261: PUSH
3262: LD_VAR 0 13
3266: PUSH
3267: FOR_IN
3268: IFFALSE 3293
// list := list diff GetBWeapon ( i ) ;
3270: LD_ADDR_VAR 0 4
3274: PUSH
3275: LD_VAR 0 4
3279: PUSH
3280: LD_VAR 0 7
3284: PPUSH
3285: CALL_OW 269
3289: DIFF
3290: ST_TO_ADDR
3291: GO 3267
3293: POP
3294: POP
// if list then
3295: LD_VAR 0 4
3299: IFFALSE 3325
// weapon := list [ rand ( 1 , list ) ] ;
3301: LD_ADDR_VAR 0 17
3305: PUSH
3306: LD_VAR 0 4
3310: PUSH
3311: LD_INT 1
3313: PPUSH
3314: LD_VAR 0 4
3318: PPUSH
3319: CALL_OW 12
3323: ARRAY
3324: ST_TO_ADDR
// end ; if weapon then
3325: LD_VAR 0 17
3329: IFFALSE 3443
// begin tmp := CostOfWeapon ( weapon ) ;
3331: LD_ADDR_VAR 0 13
3335: PUSH
3336: LD_VAR 0 17
3340: PPUSH
3341: CALL_OW 451
3345: ST_TO_ADDR
// j := GetBase ( tower ) ;
3346: LD_ADDR_VAR 0 8
3350: PUSH
3351: LD_VAR 0 1
3355: PPUSH
3356: CALL_OW 274
3360: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
3361: LD_VAR 0 8
3365: PPUSH
3366: LD_INT 1
3368: PPUSH
3369: CALL_OW 275
3373: PUSH
3374: LD_VAR 0 13
3378: PUSH
3379: LD_INT 1
3381: ARRAY
3382: GREATEREQUAL
3383: PUSH
3384: LD_VAR 0 8
3388: PPUSH
3389: LD_INT 2
3391: PPUSH
3392: CALL_OW 275
3396: PUSH
3397: LD_VAR 0 13
3401: PUSH
3402: LD_INT 2
3404: ARRAY
3405: GREATEREQUAL
3406: AND
3407: PUSH
3408: LD_VAR 0 8
3412: PPUSH
3413: LD_INT 3
3415: PPUSH
3416: CALL_OW 275
3420: PUSH
3421: LD_VAR 0 13
3425: PUSH
3426: LD_INT 3
3428: ARRAY
3429: GREATEREQUAL
3430: AND
3431: IFFALSE 3443
// result := weapon ;
3433: LD_ADDR_VAR 0 2
3437: PUSH
3438: LD_VAR 0 17
3442: ST_TO_ADDR
// end ; end ; end_of_file
3443: LD_VAR 0 2
3447: RET
// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Khatam , Kikuchi , Harisson ; export function PrepareAmericans ; var i , team , others , veh , m ; begin
3448: LD_INT 0
3450: PPUSH
3451: PPUSH
3452: PPUSH
3453: PPUSH
3454: PPUSH
3455: PPUSH
// uc_side := 1 ;
3456: LD_ADDR_OWVAR 20
3460: PUSH
3461: LD_INT 1
3463: ST_TO_ADDR
// uc_nation := 1 ;
3464: LD_ADDR_OWVAR 21
3468: PUSH
3469: LD_INT 1
3471: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , mission_prev_prefix ) ;
3472: LD_ADDR_EXP 9
3476: PUSH
3477: LD_STRING JMM
3479: PPUSH
3480: LD_EXP 1
3484: NOT
3485: PPUSH
3486: LD_EXP 2
3490: PPUSH
3491: CALL 32331 0 3
3495: ST_TO_ADDR
// team := [ JMM ] ;
3496: LD_ADDR_VAR 0 3
3500: PUSH
3501: LD_EXP 9
3505: PUSH
3506: EMPTY
3507: LIST
3508: ST_TO_ADDR
// if LoadVariable ( BrownIn07 , debug ) then
3509: LD_STRING BrownIn07
3511: PPUSH
3512: LD_EXP 1
3516: PPUSH
3517: CALL_OW 30
3521: IFFALSE 3547
// Brown := PrepareUnit ( Brown , ( not debug ) , mission_prev_prefix ) ;
3523: LD_ADDR_EXP 10
3527: PUSH
3528: LD_STRING Brown
3530: PPUSH
3531: LD_EXP 1
3535: NOT
3536: PPUSH
3537: LD_EXP 2
3541: PPUSH
3542: CALL 32331 0 3
3546: ST_TO_ADDR
// if Brown then
3547: LD_EXP 10
3551: IFFALSE 3569
// team := team ^ Brown ;
3553: LD_ADDR_VAR 0 3
3557: PUSH
3558: LD_VAR 0 3
3562: PUSH
3563: LD_EXP 10
3567: ADD
3568: ST_TO_ADDR
// if LoadVariable ( DonaldsonIn07 , debug ) then
3569: LD_STRING DonaldsonIn07
3571: PPUSH
3572: LD_EXP 1
3576: PPUSH
3577: CALL_OW 30
3581: IFFALSE 3607
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , mission_prev_prefix ) ;
3583: LD_ADDR_EXP 11
3587: PUSH
3588: LD_STRING Donaldson
3590: PPUSH
3591: LD_EXP 1
3595: NOT
3596: PPUSH
3597: LD_EXP 2
3601: PPUSH
3602: CALL 32331 0 3
3606: ST_TO_ADDR
// if Donaldson then
3607: LD_EXP 11
3611: IFFALSE 3629
// team := team ^ Donaldson ;
3613: LD_ADDR_VAR 0 3
3617: PUSH
3618: LD_VAR 0 3
3622: PUSH
3623: LD_EXP 11
3627: ADD
3628: ST_TO_ADDR
// if LoadVariable ( BobbyIn07 , debug ) then
3629: LD_STRING BobbyIn07
3631: PPUSH
3632: LD_EXP 1
3636: PPUSH
3637: CALL_OW 30
3641: IFFALSE 3667
// Bobby := PrepareUnit ( Bobby , ( not debug ) , mission_prev_prefix ) ;
3643: LD_ADDR_EXP 12
3647: PUSH
3648: LD_STRING Bobby
3650: PPUSH
3651: LD_EXP 1
3655: NOT
3656: PPUSH
3657: LD_EXP 2
3661: PPUSH
3662: CALL 32331 0 3
3666: ST_TO_ADDR
// if Bobby then
3667: LD_EXP 12
3671: IFFALSE 3689
// team := team ^ Bobby ;
3673: LD_ADDR_VAR 0 3
3677: PUSH
3678: LD_VAR 0 3
3682: PUSH
3683: LD_EXP 12
3687: ADD
3688: ST_TO_ADDR
// if LoadVariable ( CyrusIn07 , debug ) then
3689: LD_STRING CyrusIn07
3691: PPUSH
3692: LD_EXP 1
3696: PPUSH
3697: CALL_OW 30
3701: IFFALSE 3727
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , mission_prev_prefix ) ;
3703: LD_ADDR_EXP 13
3707: PUSH
3708: LD_STRING Cyrus
3710: PPUSH
3711: LD_EXP 1
3715: NOT
3716: PPUSH
3717: LD_EXP 2
3721: PPUSH
3722: CALL 32331 0 3
3726: ST_TO_ADDR
// if Cyrus then
3727: LD_EXP 13
3731: IFFALSE 3749
// team := team ^ Cyrus ;
3733: LD_ADDR_VAR 0 3
3737: PUSH
3738: LD_VAR 0 3
3742: PUSH
3743: LD_EXP 13
3747: ADD
3748: ST_TO_ADDR
// if LoadVariable ( LisaIn07 , debug ) then
3749: LD_STRING LisaIn07
3751: PPUSH
3752: LD_EXP 1
3756: PPUSH
3757: CALL_OW 30
3761: IFFALSE 3787
// Lisa := PrepareUnit ( Lisa , ( not debug ) , mission_prev_prefix ) ;
3763: LD_ADDR_EXP 14
3767: PUSH
3768: LD_STRING Lisa
3770: PPUSH
3771: LD_EXP 1
3775: NOT
3776: PPUSH
3777: LD_EXP 2
3781: PPUSH
3782: CALL 32331 0 3
3786: ST_TO_ADDR
// if Lisa then
3787: LD_EXP 14
3791: IFFALSE 3809
// team := team ^ Lisa ;
3793: LD_ADDR_VAR 0 3
3797: PUSH
3798: LD_VAR 0 3
3802: PUSH
3803: LD_EXP 14
3807: ADD
3808: ST_TO_ADDR
// if LoadVariable ( GladstoneIn07 , debug ) then
3809: LD_STRING GladstoneIn07
3811: PPUSH
3812: LD_EXP 1
3816: PPUSH
3817: CALL_OW 30
3821: IFFALSE 3847
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , mission_prev_prefix ) ;
3823: LD_ADDR_EXP 16
3827: PUSH
3828: LD_STRING Gladstone
3830: PPUSH
3831: LD_EXP 1
3835: NOT
3836: PPUSH
3837: LD_EXP 2
3841: PPUSH
3842: CALL 32331 0 3
3846: ST_TO_ADDR
// if Gladstone then
3847: LD_EXP 16
3851: IFFALSE 3869
// team := team ^ Gladstone ;
3853: LD_ADDR_VAR 0 3
3857: PUSH
3858: LD_VAR 0 3
3862: PUSH
3863: LD_EXP 16
3867: ADD
3868: ST_TO_ADDR
// if LoadVariable ( KhatamIn07 , debug ) then
3869: LD_STRING KhatamIn07
3871: PPUSH
3872: LD_EXP 1
3876: PPUSH
3877: CALL_OW 30
3881: IFFALSE 3907
// Khatam := PrepareUnit ( Khatam , ( not debug ) , mission_prev_prefix ) ;
3883: LD_ADDR_EXP 17
3887: PUSH
3888: LD_STRING Khatam
3890: PPUSH
3891: LD_EXP 1
3895: NOT
3896: PPUSH
3897: LD_EXP 2
3901: PPUSH
3902: CALL 32331 0 3
3906: ST_TO_ADDR
// if Khatam then
3907: LD_EXP 17
3911: IFFALSE 3929
// team := team ^ Khatam ;
3913: LD_ADDR_VAR 0 3
3917: PUSH
3918: LD_VAR 0 3
3922: PUSH
3923: LD_EXP 17
3927: ADD
3928: ST_TO_ADDR
// others := CreateCharacterSet ( 07_others ) ;
3929: LD_ADDR_VAR 0 4
3933: PUSH
3934: LD_STRING 07_others
3936: PPUSH
3937: CALL_OW 31
3941: ST_TO_ADDR
// if others then
3942: LD_VAR 0 4
3946: IFFALSE 3964
// team := team ^ others ;
3948: LD_ADDR_VAR 0 3
3952: PUSH
3953: LD_VAR 0 3
3957: PUSH
3958: LD_VAR 0 4
3962: ADD
3963: ST_TO_ADDR
// if debug then
3964: LD_EXP 1
3968: IFFALSE 4042
// begin InitHc ;
3970: CALL_OW 19
// for i = 1 to 4 do
3974: LD_ADDR_VAR 0 2
3978: PUSH
3979: DOUBLE
3980: LD_INT 1
3982: DEC
3983: ST_TO_ADDR
3984: LD_INT 4
3986: PUSH
3987: FOR_TO
3988: IFFALSE 4040
// begin PrepareHuman ( false , [ 1 , 3 ] [ Rand ( 1 , 2 ) ] , 4 ) ;
3990: LD_INT 0
3992: PPUSH
3993: LD_INT 1
3995: PUSH
3996: LD_INT 3
3998: PUSH
3999: EMPTY
4000: LIST
4001: LIST
4002: PUSH
4003: LD_INT 1
4005: PPUSH
4006: LD_INT 2
4008: PPUSH
4009: CALL_OW 12
4013: ARRAY
4014: PPUSH
4015: LD_INT 4
4017: PPUSH
4018: CALL_OW 380
// team := team ^ CreateHuman ;
4022: LD_ADDR_VAR 0 3
4026: PUSH
4027: LD_VAR 0 3
4031: PUSH
4032: CALL_OW 44
4036: ADD
4037: ST_TO_ADDR
// end ;
4038: GO 3987
4040: POP
4041: POP
// end ; m := 0 ;
4042: LD_ADDR_VAR 0 6
4046: PUSH
4047: LD_INT 0
4049: ST_TO_ADDR
// for i in team do
4050: LD_ADDR_VAR 0 2
4054: PUSH
4055: LD_VAR 0 3
4059: PUSH
4060: FOR_IN
4061: IFFALSE 4268
// if GetClass ( i ) = 3 then
4063: LD_VAR 0 2
4067: PPUSH
4068: CALL_OW 257
4072: PUSH
4073: LD_INT 3
4075: EQUAL
4076: IFFALSE 4224
// begin m := m + 1 ;
4078: LD_ADDR_VAR 0 6
4082: PUSH
4083: LD_VAR 0 6
4087: PUSH
4088: LD_INT 1
4090: PLUS
4091: ST_TO_ADDR
// veh := PrepareTank ( 1 , 1 , [ us_medium_wheeled , us_medium_tracked , us_medium_wheeled , us_light_wheeled ] [ m mod 4 + 1 ] , engine_solar , control_manual , [ us_gatling_gun , us_double_gun , us_light_gun , us_radar ] [ m mod 4 + 1 ] , 60 ) ;
4092: LD_ADDR_VAR 0 5
4096: PUSH
4097: LD_INT 1
4099: PPUSH
4100: LD_INT 1
4102: PPUSH
4103: LD_INT 2
4105: PUSH
4106: LD_INT 3
4108: PUSH
4109: LD_INT 2
4111: PUSH
4112: LD_INT 1
4114: PUSH
4115: EMPTY
4116: LIST
4117: LIST
4118: LIST
4119: LIST
4120: PUSH
4121: LD_VAR 0 6
4125: PUSH
4126: LD_INT 4
4128: MOD
4129: PUSH
4130: LD_INT 1
4132: PLUS
4133: ARRAY
4134: PPUSH
4135: LD_INT 2
4137: PPUSH
4138: LD_INT 1
4140: PPUSH
4141: LD_INT 4
4143: PUSH
4144: LD_INT 5
4146: PUSH
4147: LD_INT 3
4149: PUSH
4150: LD_INT 11
4152: PUSH
4153: EMPTY
4154: LIST
4155: LIST
4156: LIST
4157: LIST
4158: PUSH
4159: LD_VAR 0 6
4163: PUSH
4164: LD_INT 4
4166: MOD
4167: PUSH
4168: LD_INT 1
4170: PLUS
4171: ARRAY
4172: PPUSH
4173: LD_INT 60
4175: PPUSH
4176: CALL 520 0 7
4180: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
4181: LD_VAR 0 5
4185: PPUSH
4186: LD_INT 2
4188: PPUSH
4189: CALL_OW 233
// PlaceUnitArea ( veh , startArea , false ) ;
4193: LD_VAR 0 5
4197: PPUSH
4198: LD_INT 1
4200: PPUSH
4201: LD_INT 0
4203: PPUSH
4204: CALL_OW 49
// PlaceHumanInUnit ( i , veh ) ;
4208: LD_VAR 0 2
4212: PPUSH
4213: LD_VAR 0 5
4217: PPUSH
4218: CALL_OW 52
// end else
4222: GO 4266
// begin if GetClass ( i ) = 2 then
4224: LD_VAR 0 2
4228: PPUSH
4229: CALL_OW 257
4233: PUSH
4234: LD_INT 2
4236: EQUAL
4237: IFFALSE 4251
// SetClass ( i , 1 ) ;
4239: LD_VAR 0 2
4243: PPUSH
4244: LD_INT 1
4246: PPUSH
4247: CALL_OW 336
// PlaceUnitArea ( i , startArea , false ) ;
4251: LD_VAR 0 2
4255: PPUSH
4256: LD_INT 1
4258: PPUSH
4259: LD_INT 0
4261: PPUSH
4262: CALL_OW 49
// end ;
4266: GO 4060
4268: POP
4269: POP
// uc_side := 4 ;
4270: LD_ADDR_OWVAR 20
4274: PUSH
4275: LD_INT 4
4277: ST_TO_ADDR
// Harisson := PrepareUnit ( Harisson , false ,  ) ;
4278: LD_ADDR_EXP 19
4282: PUSH
4283: LD_STRING Harisson
4285: PPUSH
4286: LD_INT 0
4288: PPUSH
4289: LD_STRING 
4291: PPUSH
4292: CALL 32331 0 3
4296: ST_TO_ADDR
// PrepareScout ;
4297: CALL 4306 0 0
// end ;
4301: LD_VAR 0 1
4305: RET
// function PrepareScout ; var ape ; begin
4306: LD_INT 0
4308: PPUSH
4309: PPUSH
// uc_side := 4 ;
4310: LD_ADDR_OWVAR 20
4314: PUSH
4315: LD_INT 4
4317: ST_TO_ADDR
// uc_nation := 1 ;
4318: LD_ADDR_OWVAR 21
4322: PUSH
4323: LD_INT 1
4325: ST_TO_ADDR
// if LoadVariable ( FrankIn06 , 0 ) then
4326: LD_STRING FrankIn06
4328: PPUSH
4329: LD_INT 0
4331: PPUSH
4332: CALL_OW 30
4336: IFFALSE 4353
// Frank := CreateCharacter ( 06c_Frank ) else
4338: LD_ADDR_EXP 15
4342: PUSH
4343: LD_STRING 06c_Frank
4345: PPUSH
4346: CALL_OW 34
4350: ST_TO_ADDR
4351: GO 4393
// if LoadVariable ( FrankInDelta , 0 ) then
4353: LD_STRING FrankInDelta
4355: PPUSH
4356: LD_INT 0
4358: PPUSH
4359: CALL_OW 30
4363: IFFALSE 4380
// Frank := CreateCharacter ( 05_Frank ) else
4365: LD_ADDR_EXP 15
4369: PUSH
4370: LD_STRING 05_Frank
4372: PPUSH
4373: CALL_OW 34
4377: ST_TO_ADDR
4378: GO 4393
// Frank := CreateCharacter ( 04_Frank ) ;
4380: LD_ADDR_EXP 15
4384: PUSH
4385: LD_STRING 04_Frank
4387: PPUSH
4388: CALL_OW 34
4392: ST_TO_ADDR
// if Frank then
4393: LD_EXP 15
4397: IFFALSE 4530
// begin PlaceUnitArea ( Frank , scoutArea , false ) ;
4399: LD_EXP 15
4403: PPUSH
4404: LD_INT 2
4406: PPUSH
4407: LD_INT 0
4409: PPUSH
4410: CALL_OW 49
// SetClass ( Frank , 1 ) ;
4414: LD_EXP 15
4418: PPUSH
4419: LD_INT 1
4421: PPUSH
4422: CALL_OW 336
// uc_side := 0 ;
4426: LD_ADDR_OWVAR 20
4430: PUSH
4431: LD_INT 0
4433: ST_TO_ADDR
// uc_nation := 0 ;
4434: LD_ADDR_OWVAR 21
4438: PUSH
4439: LD_INT 0
4441: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 0 ) ;
4442: LD_INT 0
4444: PPUSH
4445: LD_INT 12
4447: PPUSH
4448: LD_INT 0
4450: PPUSH
4451: CALL_OW 380
// ape := CreateHuman ;
4455: LD_ADDR_VAR 0 2
4459: PUSH
4460: CALL_OW 44
4464: ST_TO_ADDR
// PlaceUnitXYR ( ape , GetX ( Frank ) , GetY ( Frank ) , 5 , false ) ;
4465: LD_VAR 0 2
4469: PPUSH
4470: LD_EXP 15
4474: PPUSH
4475: CALL_OW 250
4479: PPUSH
4480: LD_EXP 15
4484: PPUSH
4485: CALL_OW 251
4489: PPUSH
4490: LD_INT 5
4492: PPUSH
4493: LD_INT 0
4495: PPUSH
4496: CALL_OW 50
// ComTurnUnit ( ape , Frank ) ;
4500: LD_VAR 0 2
4504: PPUSH
4505: LD_EXP 15
4509: PPUSH
4510: CALL_OW 119
// ComTurnUnit ( Frank , ape ) ;
4514: LD_EXP 15
4518: PPUSH
4519: LD_VAR 0 2
4523: PPUSH
4524: CALL_OW 119
// exit ;
4528: GO 4573
// end ; Kikuchi := PrepareUnit ( Yamoko , false ,  ) ;
4530: LD_ADDR_EXP 18
4534: PUSH
4535: LD_STRING Yamoko
4537: PPUSH
4538: LD_INT 0
4540: PPUSH
4541: LD_STRING 
4543: PPUSH
4544: CALL 32331 0 3
4548: ST_TO_ADDR
// PlaceUnitArea ( Kikuchi , scoutArea , false ) ;
4549: LD_EXP 18
4553: PPUSH
4554: LD_INT 2
4556: PPUSH
4557: LD_INT 0
4559: PPUSH
4560: CALL_OW 49
// ComHold ( Kikuchi ) ;
4564: LD_EXP 18
4568: PPUSH
4569: CALL_OW 140
// end ; end_of_file
4573: LD_VAR 0 1
4577: RET
// export ru_rebuild_list ; export function PrepareRussians ; var i , j , r , un , skill , filter , tmp , dep_list , lab_list , fac_list , breastworks_list , bunker_list , turret_list , weapons_list , personel_counter ; begin
4578: LD_INT 0
4580: PPUSH
4581: PPUSH
4582: PPUSH
4583: PPUSH
4584: PPUSH
4585: PPUSH
4586: PPUSH
4587: PPUSH
4588: PPUSH
4589: PPUSH
4590: PPUSH
4591: PPUSH
4592: PPUSH
4593: PPUSH
4594: PPUSH
4595: PPUSH
// ru_rebuild_list := [ ] ;
4596: LD_ADDR_EXP 20
4600: PUSH
4601: EMPTY
4602: ST_TO_ADDR
// uc_side := 3 ;
4603: LD_ADDR_OWVAR 20
4607: PUSH
4608: LD_INT 3
4610: ST_TO_ADDR
// uc_nation := 3 ;
4611: LD_ADDR_OWVAR 21
4615: PUSH
4616: LD_INT 3
4618: ST_TO_ADDR
// if Difficulty > 1 then
4619: LD_OWVAR 67
4623: PUSH
4624: LD_INT 1
4626: GREATER
4627: IFFALSE 4794
// begin bc_type := b_breastwork ;
4629: LD_ADDR_OWVAR 42
4633: PUSH
4634: LD_INT 31
4636: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 78 , 74 , 2 ) ;
4637: LD_INT 78
4639: PPUSH
4640: LD_INT 74
4642: PPUSH
4643: LD_INT 2
4645: PPUSH
4646: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 171 , 193 , 4 ) ;
4650: LD_INT 171
4652: PPUSH
4653: LD_INT 193
4655: PPUSH
4656: LD_INT 4
4658: PPUSH
4659: CALL_OW 47
// bc_type := b_turret ;
4663: LD_ADDR_OWVAR 42
4667: PUSH
4668: LD_INT 33
4670: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 129 , 96 , 3 ) ;
4671: LD_INT 129
4673: PPUSH
4674: LD_INT 96
4676: PPUSH
4677: LD_INT 3
4679: PPUSH
4680: CALL_OW 47
// if Difficulty > 2 then
4684: LD_OWVAR 67
4688: PUSH
4689: LD_INT 2
4691: GREATER
4692: IFFALSE 4763
// begin RemoveUnit ( HexInfo ( 83 , 141 ) ) ;
4694: LD_INT 83
4696: PPUSH
4697: LD_INT 141
4699: PPUSH
4700: CALL_OW 428
4704: PPUSH
4705: CALL_OW 64
// RemoveUnit ( HexInfo ( 78 , 133 ) ) ;
4709: LD_INT 78
4711: PPUSH
4712: LD_INT 133
4714: PPUSH
4715: CALL_OW 428
4719: PPUSH
4720: CALL_OW 64
// CreateAndPlaceBuildingXYD ( 83 , 141 , 2 ) ;
4724: LD_INT 83
4726: PPUSH
4727: LD_INT 141
4729: PPUSH
4730: LD_INT 2
4732: PPUSH
4733: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 78 , 133 , 2 ) ;
4737: LD_INT 78
4739: PPUSH
4740: LD_INT 133
4742: PPUSH
4743: LD_INT 2
4745: PPUSH
4746: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 145 , 112 , 3 ) ;
4750: LD_INT 145
4752: PPUSH
4753: LD_INT 112
4755: PPUSH
4756: LD_INT 3
4758: PPUSH
4759: CALL_OW 47
// end ; if Difficulty > 3 then
4763: LD_OWVAR 67
4767: PUSH
4768: LD_INT 3
4770: GREATER
4771: IFFALSE 4794
// begin bc_type := b_bunker ;
4773: LD_ADDR_OWVAR 42
4777: PUSH
4778: LD_INT 32
4780: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 44 , 50 , 4 ) ;
4781: LD_INT 44
4783: PPUSH
4784: LD_INT 50
4786: PPUSH
4787: LD_INT 4
4789: PPUSH
4790: CALL_OW 47
// end ; end ; dep_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
4794: LD_ADDR_VAR 0 9
4798: PUSH
4799: LD_INT 22
4801: PUSH
4802: LD_INT 3
4804: PUSH
4805: EMPTY
4806: LIST
4807: LIST
4808: PUSH
4809: LD_INT 2
4811: PUSH
4812: LD_INT 30
4814: PUSH
4815: LD_INT 0
4817: PUSH
4818: EMPTY
4819: LIST
4820: LIST
4821: PUSH
4822: LD_INT 30
4824: PUSH
4825: LD_INT 1
4827: PUSH
4828: EMPTY
4829: LIST
4830: LIST
4831: PUSH
4832: EMPTY
4833: LIST
4834: LIST
4835: LIST
4836: PUSH
4837: EMPTY
4838: LIST
4839: LIST
4840: PPUSH
4841: CALL_OW 69
4845: ST_TO_ADDR
// lab_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
4846: LD_ADDR_VAR 0 10
4850: PUSH
4851: LD_INT 22
4853: PUSH
4854: LD_INT 3
4856: PUSH
4857: EMPTY
4858: LIST
4859: LIST
4860: PUSH
4861: LD_INT 2
4863: PUSH
4864: LD_INT 30
4866: PUSH
4867: LD_INT 6
4869: PUSH
4870: EMPTY
4871: LIST
4872: LIST
4873: PUSH
4874: LD_INT 30
4876: PUSH
4877: LD_INT 7
4879: PUSH
4880: EMPTY
4881: LIST
4882: LIST
4883: PUSH
4884: LD_INT 30
4886: PUSH
4887: LD_INT 8
4889: PUSH
4890: EMPTY
4891: LIST
4892: LIST
4893: PUSH
4894: EMPTY
4895: LIST
4896: LIST
4897: LIST
4898: LIST
4899: PUSH
4900: EMPTY
4901: LIST
4902: LIST
4903: PPUSH
4904: CALL_OW 69
4908: ST_TO_ADDR
// fac_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) ;
4909: LD_ADDR_VAR 0 11
4913: PUSH
4914: LD_INT 22
4916: PUSH
4917: LD_INT 3
4919: PUSH
4920: EMPTY
4921: LIST
4922: LIST
4923: PUSH
4924: LD_INT 30
4926: PUSH
4927: LD_INT 3
4929: PUSH
4930: EMPTY
4931: LIST
4932: LIST
4933: PUSH
4934: EMPTY
4935: LIST
4936: LIST
4937: PPUSH
4938: CALL_OW 69
4942: ST_TO_ADDR
// breastworks_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) ;
4943: LD_ADDR_VAR 0 12
4947: PUSH
4948: LD_INT 22
4950: PUSH
4951: LD_INT 3
4953: PUSH
4954: EMPTY
4955: LIST
4956: LIST
4957: PUSH
4958: LD_INT 30
4960: PUSH
4961: LD_INT 31
4963: PUSH
4964: EMPTY
4965: LIST
4966: LIST
4967: PUSH
4968: EMPTY
4969: LIST
4970: LIST
4971: PPUSH
4972: CALL_OW 69
4976: ST_TO_ADDR
// bunker_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) ;
4977: LD_ADDR_VAR 0 13
4981: PUSH
4982: LD_INT 22
4984: PUSH
4985: LD_INT 3
4987: PUSH
4988: EMPTY
4989: LIST
4990: LIST
4991: PUSH
4992: LD_INT 30
4994: PUSH
4995: LD_INT 32
4997: PUSH
4998: EMPTY
4999: LIST
5000: LIST
5001: PUSH
5002: EMPTY
5003: LIST
5004: LIST
5005: PPUSH
5006: CALL_OW 69
5010: ST_TO_ADDR
// turret_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_turret ] ] ) ;
5011: LD_ADDR_VAR 0 14
5015: PUSH
5016: LD_INT 22
5018: PUSH
5019: LD_INT 3
5021: PUSH
5022: EMPTY
5023: LIST
5024: LIST
5025: PUSH
5026: LD_INT 30
5028: PUSH
5029: LD_INT 33
5031: PUSH
5032: EMPTY
5033: LIST
5034: LIST
5035: PUSH
5036: EMPTY
5037: LIST
5038: LIST
5039: PPUSH
5040: CALL_OW 69
5044: ST_TO_ADDR
// weapons_list := [ [ ru_heavy_machine_gun , 5 ] , [ ru_gatling_gun , 50 ] , [ ru_gun , 30 ] , [ ru_heavy_gun , 15 ] ] ;
5045: LD_ADDR_VAR 0 15
5049: PUSH
5050: LD_INT 42
5052: PUSH
5053: LD_INT 5
5055: PUSH
5056: EMPTY
5057: LIST
5058: LIST
5059: PUSH
5060: LD_INT 43
5062: PUSH
5063: LD_INT 50
5065: PUSH
5066: EMPTY
5067: LIST
5068: LIST
5069: PUSH
5070: LD_INT 44
5072: PUSH
5073: LD_INT 30
5075: PUSH
5076: EMPTY
5077: LIST
5078: LIST
5079: PUSH
5080: LD_INT 46
5082: PUSH
5083: LD_INT 15
5085: PUSH
5086: EMPTY
5087: LIST
5088: LIST
5089: PUSH
5090: EMPTY
5091: LIST
5092: LIST
5093: LIST
5094: LIST
5095: ST_TO_ADDR
// personel_counter := [ 0 , 4 , 6 , 3 ] ;
5096: LD_ADDR_VAR 0 16
5100: PUSH
5101: LD_INT 0
5103: PUSH
5104: LD_INT 4
5106: PUSH
5107: LD_INT 6
5109: PUSH
5110: LD_INT 3
5112: PUSH
5113: EMPTY
5114: LIST
5115: LIST
5116: LIST
5117: LIST
5118: ST_TO_ADDR
// skill := [ 4 , 5 , 6 , 7 ] [ Difficulty ] ;
5119: LD_ADDR_VAR 0 6
5123: PUSH
5124: LD_INT 4
5126: PUSH
5127: LD_INT 5
5129: PUSH
5130: LD_INT 6
5132: PUSH
5133: LD_INT 7
5135: PUSH
5136: EMPTY
5137: LIST
5138: LIST
5139: LIST
5140: LIST
5141: PUSH
5142: LD_OWVAR 67
5146: ARRAY
5147: ST_TO_ADDR
// SetBName ( ru_dep_main , am_tukh ) ;
5148: LD_INT 16
5150: PPUSH
5151: LD_STRING am_tukh
5153: PPUSH
5154: CALL_OW 500
// for i in FilterAllUnits ( [ f_type , unit_building ] ) do
5158: LD_ADDR_VAR 0 2
5162: PUSH
5163: LD_INT 21
5165: PUSH
5166: LD_INT 3
5168: PUSH
5169: EMPTY
5170: LIST
5171: LIST
5172: PPUSH
5173: CALL_OW 69
5177: PUSH
5178: FOR_IN
5179: IFFALSE 5216
// SetBLevel ( i , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
5181: LD_VAR 0 2
5185: PPUSH
5186: LD_INT 4
5188: PUSH
5189: LD_INT 5
5191: PUSH
5192: LD_INT 6
5194: PUSH
5195: LD_INT 7
5197: PUSH
5198: EMPTY
5199: LIST
5200: LIST
5201: LIST
5202: LIST
5203: PUSH
5204: LD_OWVAR 67
5208: ARRAY
5209: PPUSH
5210: CALL_OW 241
5214: GO 5178
5216: POP
5217: POP
// for i in dep_list do
5218: LD_ADDR_VAR 0 2
5222: PUSH
5223: LD_VAR 0 9
5227: PUSH
5228: FOR_IN
5229: IFFALSE 5273
// begin SetResourceType ( GetBase ( i ) , mat_cans , 1000 ) ;
5231: LD_VAR 0 2
5235: PPUSH
5236: CALL_OW 274
5240: PPUSH
5241: LD_INT 1
5243: PPUSH
5244: LD_INT 1000
5246: PPUSH
5247: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 1000 ) ;
5251: LD_VAR 0 2
5255: PPUSH
5256: CALL_OW 274
5260: PPUSH
5261: LD_INT 2
5263: PPUSH
5264: LD_INT 1000
5266: PPUSH
5267: CALL_OW 277
// end ;
5271: GO 5228
5273: POP
5274: POP
// InitHc ;
5275: CALL_OW 19
// tmp := bunker_list * [ 45 , 60 , 75 , 80 ] [ Difficulty ] div 100 ;
5279: LD_ADDR_VAR 0 8
5283: PUSH
5284: LD_VAR 0 13
5288: PUSH
5289: LD_INT 45
5291: PUSH
5292: LD_INT 60
5294: PUSH
5295: LD_INT 75
5297: PUSH
5298: LD_INT 80
5300: PUSH
5301: EMPTY
5302: LIST
5303: LIST
5304: LIST
5305: LIST
5306: PUSH
5307: LD_OWVAR 67
5311: ARRAY
5312: MUL
5313: PUSH
5314: LD_INT 100
5316: DIV
5317: ST_TO_ADDR
// personel_counter := Replace ( personel_counter , 1 , tmp ) ;
5318: LD_ADDR_VAR 0 16
5322: PUSH
5323: LD_VAR 0 16
5327: PPUSH
5328: LD_INT 1
5330: PPUSH
5331: LD_VAR 0 8
5335: PPUSH
5336: CALL_OW 1
5340: ST_TO_ADDR
// tmp := [ ] ;
5341: LD_ADDR_VAR 0 8
5345: PUSH
5346: EMPTY
5347: ST_TO_ADDR
// for i in bunker_list do
5348: LD_ADDR_VAR 0 2
5352: PUSH
5353: LD_VAR 0 13
5357: PUSH
5358: FOR_IN
5359: IFFALSE 5455
// if i mod 10 + 1 < tmp then
5361: LD_VAR 0 2
5365: PUSH
5366: LD_INT 10
5368: MOD
5369: PUSH
5370: LD_INT 1
5372: PLUS
5373: PUSH
5374: LD_VAR 0 8
5378: LESS
5379: IFFALSE 5424
// tmp := Insert ( tmp , i mod rand ( 3 , 5 ) + 1 , i ) else
5381: LD_ADDR_VAR 0 8
5385: PUSH
5386: LD_VAR 0 8
5390: PPUSH
5391: LD_VAR 0 2
5395: PUSH
5396: LD_INT 3
5398: PPUSH
5399: LD_INT 5
5401: PPUSH
5402: CALL_OW 12
5406: MOD
5407: PUSH
5408: LD_INT 1
5410: PLUS
5411: PPUSH
5412: LD_VAR 0 2
5416: PPUSH
5417: CALL_OW 2
5421: ST_TO_ADDR
5422: GO 5453
// tmp := Insert ( tmp , tmp + 1 , i ) ;
5424: LD_ADDR_VAR 0 8
5428: PUSH
5429: LD_VAR 0 8
5433: PPUSH
5434: LD_VAR 0 8
5438: PUSH
5439: LD_INT 1
5441: PLUS
5442: PPUSH
5443: LD_VAR 0 2
5447: PPUSH
5448: CALL_OW 2
5452: ST_TO_ADDR
5453: GO 5358
5455: POP
5456: POP
// bunker_list := tmp ;
5457: LD_ADDR_VAR 0 13
5461: PUSH
5462: LD_VAR 0 8
5466: ST_TO_ADDR
// for i in bunker_list ^ turret_list do
5467: LD_ADDR_VAR 0 2
5471: PUSH
5472: LD_VAR 0 13
5476: PUSH
5477: LD_VAR 0 14
5481: ADD
5482: PUSH
5483: FOR_IN
5484: IFFALSE 5507
// PlaceWeaponTurret ( i , GetTurretWeaponBase ( i ) ) ;
5486: LD_VAR 0 2
5490: PPUSH
5491: LD_VAR 0 2
5495: PPUSH
5496: CALL 2225 0 1
5500: PPUSH
5501: CALL_OW 431
5505: GO 5483
5507: POP
5508: POP
// while ( personel_counter [ 1 ] ) do
5509: LD_VAR 0 16
5513: PUSH
5514: LD_INT 1
5516: ARRAY
5517: IFFALSE 5625
// begin i := rand ( 1 , bunker_list ) ;
5519: LD_ADDR_VAR 0 2
5523: PUSH
5524: LD_INT 1
5526: PPUSH
5527: LD_VAR 0 13
5531: PPUSH
5532: CALL_OW 12
5536: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
5537: LD_INT 0
5539: PPUSH
5540: LD_INT 1
5542: PPUSH
5543: LD_VAR 0 6
5547: PPUSH
5548: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , bunker_list [ i ] ) ;
5552: CALL_OW 44
5556: PPUSH
5557: LD_VAR 0 13
5561: PUSH
5562: LD_VAR 0 2
5566: ARRAY
5567: PPUSH
5568: CALL_OW 52
// bunker_list := Delete ( bunker_list , i ) ;
5572: LD_ADDR_VAR 0 13
5576: PUSH
5577: LD_VAR 0 13
5581: PPUSH
5582: LD_VAR 0 2
5586: PPUSH
5587: CALL_OW 3
5591: ST_TO_ADDR
// personel_counter := Replace ( personel_counter , 1 , personel_counter [ 1 ] - 1 ) ;
5592: LD_ADDR_VAR 0 16
5596: PUSH
5597: LD_VAR 0 16
5601: PPUSH
5602: LD_INT 1
5604: PPUSH
5605: LD_VAR 0 16
5609: PUSH
5610: LD_INT 1
5612: ARRAY
5613: PUSH
5614: LD_INT 1
5616: MINUS
5617: PPUSH
5618: CALL_OW 1
5622: ST_TO_ADDR
// end ;
5623: GO 5509
// for i = 1 to personel_counter [ 2 ] do
5625: LD_ADDR_VAR 0 2
5629: PUSH
5630: DOUBLE
5631: LD_INT 1
5633: DEC
5634: ST_TO_ADDR
5635: LD_VAR 0 16
5639: PUSH
5640: LD_INT 2
5642: ARRAY
5643: PUSH
5644: FOR_TO
5645: IFFALSE 5676
// begin PrepareHuman ( false , 2 , skill ) ;
5647: LD_INT 0
5649: PPUSH
5650: LD_INT 2
5652: PPUSH
5653: LD_VAR 0 6
5657: PPUSH
5658: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , ru_dep_main ) ;
5662: CALL_OW 44
5666: PPUSH
5667: LD_INT 16
5669: PPUSH
5670: CALL_OW 52
// end ;
5674: GO 5644
5676: POP
5677: POP
// for i = 1 to personel_counter [ 3 ] do
5678: LD_ADDR_VAR 0 2
5682: PUSH
5683: DOUBLE
5684: LD_INT 1
5686: DEC
5687: ST_TO_ADDR
5688: LD_VAR 0 16
5692: PUSH
5693: LD_INT 3
5695: ARRAY
5696: PUSH
5697: FOR_TO
5698: IFFALSE 5745
// begin PrepareHuman ( false , 3 , skill ) ;
5700: LD_INT 0
5702: PPUSH
5703: LD_INT 3
5705: PPUSH
5706: LD_VAR 0 6
5710: PPUSH
5711: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , fac_list [ i mod 2 + 1 ] ) ;
5715: CALL_OW 44
5719: PPUSH
5720: LD_VAR 0 11
5724: PUSH
5725: LD_VAR 0 2
5729: PUSH
5730: LD_INT 2
5732: MOD
5733: PUSH
5734: LD_INT 1
5736: PLUS
5737: ARRAY
5738: PPUSH
5739: CALL_OW 52
// end ;
5743: GO 5697
5745: POP
5746: POP
// for i = 1 to personel_counter [ 4 ] do
5747: LD_ADDR_VAR 0 2
5751: PUSH
5752: DOUBLE
5753: LD_INT 1
5755: DEC
5756: ST_TO_ADDR
5757: LD_VAR 0 16
5761: PUSH
5762: LD_INT 4
5764: ARRAY
5765: PUSH
5766: FOR_TO
5767: IFFALSE 5804
// begin PrepareHuman ( false , 4 , skill ) ;
5769: LD_INT 0
5771: PPUSH
5772: LD_INT 4
5774: PPUSH
5775: LD_VAR 0 6
5779: PPUSH
5780: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , lab_list [ 1 ] ) ;
5784: CALL_OW 44
5788: PPUSH
5789: LD_VAR 0 10
5793: PUSH
5794: LD_INT 1
5796: ARRAY
5797: PPUSH
5798: CALL_OW 52
// end ;
5802: GO 5766
5804: POP
5805: POP
// for i in breastworks_list do
5806: LD_ADDR_VAR 0 2
5810: PUSH
5811: LD_VAR 0 12
5815: PUSH
5816: FOR_IN
5817: IFFALSE 5929
// begin r := GetDir ( i ) ;
5819: LD_ADDR_VAR 0 4
5823: PUSH
5824: LD_VAR 0 2
5828: PPUSH
5829: CALL_OW 254
5833: ST_TO_ADDR
// if r > 3 then
5834: LD_VAR 0 4
5838: PUSH
5839: LD_INT 3
5841: GREATER
5842: IFFALSE 5860
// r := r - 3 else
5844: LD_ADDR_VAR 0 4
5848: PUSH
5849: LD_VAR 0 4
5853: PUSH
5854: LD_INT 3
5856: MINUS
5857: ST_TO_ADDR
5858: GO 5874
// r := r + 3 ;
5860: LD_ADDR_VAR 0 4
5864: PUSH
5865: LD_VAR 0 4
5869: PUSH
5870: LD_INT 3
5872: PLUS
5873: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
5874: LD_INT 0
5876: PPUSH
5877: LD_INT 1
5879: PPUSH
5880: LD_VAR 0 6
5884: PPUSH
5885: CALL_OW 380
// un := CreateHuman ;
5889: LD_ADDR_VAR 0 5
5893: PUSH
5894: CALL_OW 44
5898: ST_TO_ADDR
// SetDir ( un , r ) ;
5899: LD_VAR 0 5
5903: PPUSH
5904: LD_VAR 0 4
5908: PPUSH
5909: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
5913: LD_VAR 0 5
5917: PPUSH
5918: LD_VAR 0 2
5922: PPUSH
5923: CALL_OW 52
// end ;
5927: GO 5816
5929: POP
5930: POP
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) ;
5931: LD_ADDR_VAR 0 8
5935: PUSH
5936: LD_INT 22
5938: PUSH
5939: LD_INT 3
5941: PUSH
5942: EMPTY
5943: LIST
5944: LIST
5945: PUSH
5946: LD_INT 25
5948: PUSH
5949: LD_INT 3
5951: PUSH
5952: EMPTY
5953: LIST
5954: LIST
5955: PUSH
5956: EMPTY
5957: LIST
5958: LIST
5959: PPUSH
5960: CALL_OW 69
5964: ST_TO_ADDR
// r := [ 4 , 5 , 6 , 6 ] [ Difficulty ] ;
5965: LD_ADDR_VAR 0 4
5969: PUSH
5970: LD_INT 4
5972: PUSH
5973: LD_INT 5
5975: PUSH
5976: LD_INT 6
5978: PUSH
5979: LD_INT 6
5981: PUSH
5982: EMPTY
5983: LIST
5984: LIST
5985: LIST
5986: LIST
5987: PUSH
5988: LD_OWVAR 67
5992: ARRAY
5993: ST_TO_ADDR
// for i = 1 to r do
5994: LD_ADDR_VAR 0 2
5998: PUSH
5999: DOUBLE
6000: LD_INT 1
6002: DEC
6003: ST_TO_ADDR
6004: LD_VAR 0 4
6008: PUSH
6009: FOR_TO
6010: IFFALSE 6183
// begin un := PrepareTank ( 3 , 3 , [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked ] [ i mod 3 + 1 ] , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_machine_gun ] [ i mod 3 + 1 ] , 100 ) ;
6012: LD_ADDR_VAR 0 5
6016: PUSH
6017: LD_INT 3
6019: PPUSH
6020: LD_INT 3
6022: PPUSH
6023: LD_INT 22
6025: PUSH
6026: LD_INT 22
6028: PUSH
6029: LD_INT 24
6031: PUSH
6032: EMPTY
6033: LIST
6034: LIST
6035: LIST
6036: PUSH
6037: LD_VAR 0 2
6041: PUSH
6042: LD_INT 3
6044: MOD
6045: PUSH
6046: LD_INT 1
6048: PLUS
6049: ARRAY
6050: PPUSH
6051: LD_INT 1
6053: PPUSH
6054: LD_INT 1
6056: PPUSH
6057: LD_INT 43
6059: PUSH
6060: LD_INT 44
6062: PUSH
6063: LD_INT 42
6065: PUSH
6066: EMPTY
6067: LIST
6068: LIST
6069: LIST
6070: PUSH
6071: LD_VAR 0 2
6075: PUSH
6076: LD_INT 3
6078: MOD
6079: PUSH
6080: LD_INT 1
6082: PLUS
6083: ARRAY
6084: PPUSH
6085: LD_INT 100
6087: PPUSH
6088: CALL 520 0 7
6092: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
6093: LD_VAR 0 5
6097: PPUSH
6098: LD_INT 0
6100: PPUSH
6101: LD_INT 5
6103: PPUSH
6104: CALL_OW 12
6108: PPUSH
6109: CALL_OW 233
// PlaceUnitArea ( un , parkingArea , false ) ;
6113: LD_VAR 0 5
6117: PPUSH
6118: LD_INT 5
6120: PPUSH
6121: LD_INT 0
6123: PPUSH
6124: CALL_OW 49
// if i > tmp - 2 then
6128: LD_VAR 0 2
6132: PUSH
6133: LD_VAR 0 8
6137: PUSH
6138: LD_INT 2
6140: MINUS
6141: GREATER
6142: IFFALSE 6146
// continue ;
6144: GO 6009
// ComExitBuilding ( tmp [ i ] ) ;
6146: LD_VAR 0 8
6150: PUSH
6151: LD_VAR 0 2
6155: ARRAY
6156: PPUSH
6157: CALL_OW 122
// AddComEnterUnit ( tmp [ i ] , un ) ;
6161: LD_VAR 0 8
6165: PUSH
6166: LD_VAR 0 2
6170: ARRAY
6171: PPUSH
6172: LD_VAR 0 5
6176: PPUSH
6177: CALL_OW 180
// end ;
6181: GO 6009
6183: POP
6184: POP
// end ;
6185: LD_VAR 0 1
6189: RET
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) do var i , filter , tmp , engs , enemy ;
6190: LD_INT 22
6192: PUSH
6193: LD_INT 3
6195: PUSH
6196: EMPTY
6197: LIST
6198: LIST
6199: PUSH
6200: LD_INT 25
6202: PUSH
6203: LD_INT 2
6205: PUSH
6206: EMPTY
6207: LIST
6208: LIST
6209: PUSH
6210: EMPTY
6211: LIST
6212: LIST
6213: PPUSH
6214: CALL_OW 69
6218: IFFALSE 6950
6220: GO 6222
6222: DISABLE
6223: LD_INT 0
6225: PPUSH
6226: PPUSH
6227: PPUSH
6228: PPUSH
6229: PPUSH
// begin enable ;
6230: ENABLE
// filter := FilterUnitsInArea ( baseArea , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
6231: LD_ADDR_VAR 0 2
6235: PUSH
6236: LD_INT 6
6238: PPUSH
6239: LD_INT 3
6241: PUSH
6242: LD_INT 24
6244: PUSH
6245: LD_INT 1000
6247: PUSH
6248: EMPTY
6249: LIST
6250: LIST
6251: PUSH
6252: EMPTY
6253: LIST
6254: LIST
6255: PUSH
6256: LD_INT 21
6258: PUSH
6259: LD_INT 3
6261: PUSH
6262: EMPTY
6263: LIST
6264: LIST
6265: PUSH
6266: EMPTY
6267: LIST
6268: LIST
6269: PPUSH
6270: CALL_OW 70
6274: ST_TO_ADDR
// engs := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
6275: LD_ADDR_VAR 0 4
6279: PUSH
6280: LD_INT 22
6282: PUSH
6283: LD_INT 3
6285: PUSH
6286: EMPTY
6287: LIST
6288: LIST
6289: PUSH
6290: LD_INT 25
6292: PUSH
6293: LD_INT 2
6295: PUSH
6296: EMPTY
6297: LIST
6298: LIST
6299: PUSH
6300: EMPTY
6301: LIST
6302: LIST
6303: PPUSH
6304: CALL_OW 69
6308: ST_TO_ADDR
// if not filter and not ru_rebuild_list then
6309: LD_VAR 0 2
6313: NOT
6314: PUSH
6315: LD_EXP 20
6319: NOT
6320: AND
6321: IFFALSE 6391
// begin for i in engs do
6323: LD_ADDR_VAR 0 1
6327: PUSH
6328: LD_VAR 0 4
6332: PUSH
6333: FOR_IN
6334: IFFALSE 6389
// if GetLives ( i ) = 1000 and not HasTask ( i ) and not IsInUnit ( i ) then
6336: LD_VAR 0 1
6340: PPUSH
6341: CALL_OW 256
6345: PUSH
6346: LD_INT 1000
6348: EQUAL
6349: PUSH
6350: LD_VAR 0 1
6354: PPUSH
6355: CALL_OW 314
6359: NOT
6360: AND
6361: PUSH
6362: LD_VAR 0 1
6366: PPUSH
6367: CALL_OW 310
6371: NOT
6372: AND
6373: IFFALSE 6387
// ComEnterUnit ( i , ru_dep_main ) ;
6375: LD_VAR 0 1
6379: PPUSH
6380: LD_INT 16
6382: PPUSH
6383: CALL_OW 120
6387: GO 6333
6389: POP
6390: POP
// end ; if UnitFilter ( engs , [ f_not , [ f_lives , 650 ] ] ) then
6391: LD_VAR 0 4
6395: PPUSH
6396: LD_INT 3
6398: PUSH
6399: LD_INT 24
6401: PUSH
6402: LD_INT 650
6404: PUSH
6405: EMPTY
6406: LIST
6407: LIST
6408: PUSH
6409: EMPTY
6410: LIST
6411: LIST
6412: PPUSH
6413: CALL_OW 72
6417: IFFALSE 6510
// begin tmp := UnitFilter ( engs , [ f_not , [ f_lives , 650 ] ] ) ;
6419: LD_ADDR_VAR 0 3
6423: PUSH
6424: LD_VAR 0 4
6428: PPUSH
6429: LD_INT 3
6431: PUSH
6432: LD_INT 24
6434: PUSH
6435: LD_INT 650
6437: PUSH
6438: EMPTY
6439: LIST
6440: LIST
6441: PUSH
6442: EMPTY
6443: LIST
6444: LIST
6445: PPUSH
6446: CALL_OW 72
6450: ST_TO_ADDR
// for i in tmp do
6451: LD_ADDR_VAR 0 1
6455: PUSH
6456: LD_VAR 0 3
6460: PUSH
6461: FOR_IN
6462: IFFALSE 6508
// if not IsInArea ( i , mainBaseArea ) then
6464: LD_VAR 0 1
6468: PPUSH
6469: LD_INT 14
6471: PPUSH
6472: CALL_OW 308
6476: NOT
6477: IFFALSE 6506
// begin ComMoveXY ( i , 129 , 125 ) ;
6479: LD_VAR 0 1
6483: PPUSH
6484: LD_INT 129
6486: PPUSH
6487: LD_INT 125
6489: PPUSH
6490: CALL_OW 111
// AddComWait ( i , 0 0$30 ) ;
6494: LD_VAR 0 1
6498: PPUSH
6499: LD_INT 1050
6501: PPUSH
6502: CALL_OW 202
// end ;
6506: GO 6461
6508: POP
6509: POP
// end ; engs := UnitFilter ( engs , [ f_lives , 650 ] ) ;
6510: LD_ADDR_VAR 0 4
6514: PUSH
6515: LD_VAR 0 4
6519: PPUSH
6520: LD_INT 24
6522: PUSH
6523: LD_INT 650
6525: PUSH
6526: EMPTY
6527: LIST
6528: LIST
6529: PPUSH
6530: CALL_OW 72
6534: ST_TO_ADDR
// if not engs then
6535: LD_VAR 0 4
6539: NOT
6540: IFFALSE 6544
// exit ;
6542: GO 6950
// if filter then
6544: LD_VAR 0 2
6548: IFFALSE 6807
// begin for i in engs do
6550: LD_ADDR_VAR 0 1
6554: PUSH
6555: LD_VAR 0 4
6559: PUSH
6560: FOR_IN
6561: IFFALSE 6585
// if IsInUnit ( i ) then
6563: LD_VAR 0 1
6567: PPUSH
6568: CALL_OW 310
6572: IFFALSE 6583
// ComExitBuilding ( i ) ;
6574: LD_VAR 0 1
6578: PPUSH
6579: CALL_OW 122
6583: GO 6560
6585: POP
6586: POP
// wait ( 3 ) ;
6587: LD_INT 3
6589: PPUSH
6590: CALL_OW 67
// if filter >= 2 and engs >= 2 then
6594: LD_VAR 0 2
6598: PUSH
6599: LD_INT 2
6601: GREATEREQUAL
6602: PUSH
6603: LD_VAR 0 4
6607: PUSH
6608: LD_INT 2
6610: GREATEREQUAL
6611: AND
6612: IFFALSE 6760
// begin for i = 1 to engs / 2 do
6614: LD_ADDR_VAR 0 1
6618: PUSH
6619: DOUBLE
6620: LD_INT 1
6622: DEC
6623: ST_TO_ADDR
6624: LD_VAR 0 4
6628: PUSH
6629: LD_INT 2
6631: DIVREAL
6632: PUSH
6633: FOR_TO
6634: IFFALSE 6680
// if not HasTask ( engs [ i ] ) then
6636: LD_VAR 0 4
6640: PUSH
6641: LD_VAR 0 1
6645: ARRAY
6646: PPUSH
6647: CALL_OW 314
6651: NOT
6652: IFFALSE 6678
// ComRepairBuilding ( engs [ i ] , filter [ 1 ] ) ;
6654: LD_VAR 0 4
6658: PUSH
6659: LD_VAR 0 1
6663: ARRAY
6664: PPUSH
6665: LD_VAR 0 2
6669: PUSH
6670: LD_INT 1
6672: ARRAY
6673: PPUSH
6674: CALL_OW 130
6678: GO 6633
6680: POP
6681: POP
// for i = engs / 2 + 1 to engs do
6682: LD_ADDR_VAR 0 1
6686: PUSH
6687: DOUBLE
6688: LD_VAR 0 4
6692: PUSH
6693: LD_INT 2
6695: DIVREAL
6696: PUSH
6697: LD_INT 1
6699: PLUS
6700: DEC
6701: ST_TO_ADDR
6702: LD_VAR 0 4
6706: PUSH
6707: FOR_TO
6708: IFFALSE 6756
// if not HasTask ( engs [ i ] ) then
6710: LD_VAR 0 4
6714: PUSH
6715: LD_VAR 0 1
6719: ARRAY
6720: PPUSH
6721: CALL_OW 314
6725: NOT
6726: IFFALSE 6754
// ComRepairBuilding ( engs [ i ] , filter [ filter ] ) ;
6728: LD_VAR 0 4
6732: PUSH
6733: LD_VAR 0 1
6737: ARRAY
6738: PPUSH
6739: LD_VAR 0 2
6743: PUSH
6744: LD_VAR 0 2
6748: ARRAY
6749: PPUSH
6750: CALL_OW 130
6754: GO 6707
6756: POP
6757: POP
// end else
6758: GO 6807
// for i in engs do
6760: LD_ADDR_VAR 0 1
6764: PUSH
6765: LD_VAR 0 4
6769: PUSH
6770: FOR_IN
6771: IFFALSE 6805
// if not HasTask ( i ) then
6773: LD_VAR 0 1
6777: PPUSH
6778: CALL_OW 314
6782: NOT
6783: IFFALSE 6803
// ComRepairBuilding ( i , filter [ 1 ] ) ;
6785: LD_VAR 0 1
6789: PPUSH
6790: LD_VAR 0 2
6794: PUSH
6795: LD_INT 1
6797: ARRAY
6798: PPUSH
6799: CALL_OW 130
6803: GO 6770
6805: POP
6806: POP
// end ; enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
6807: LD_ADDR_VAR 0 5
6811: PUSH
6812: LD_INT 81
6814: PUSH
6815: LD_INT 3
6817: PUSH
6818: EMPTY
6819: LIST
6820: LIST
6821: PPUSH
6822: CALL_OW 69
6826: ST_TO_ADDR
// if ru_rebuild_list and not filter then
6827: LD_EXP 20
6831: PUSH
6832: LD_VAR 0 2
6836: NOT
6837: AND
6838: IFFALSE 6950
// begin ComExitBuilding ( engs ) ;
6840: LD_VAR 0 4
6844: PPUSH
6845: CALL_OW 122
// if GetDistUnitXY ( NearestUnitToXY ( enemy , ru_rebuild_list [ 2 ] , ru_rebuild_list [ 3 ] ) , ru_rebuild_list [ 2 ] , ru_rebuild_list [ 3 ] ) > 10 then
6849: LD_VAR 0 5
6853: PPUSH
6854: LD_EXP 20
6858: PUSH
6859: LD_INT 2
6861: ARRAY
6862: PPUSH
6863: LD_EXP 20
6867: PUSH
6868: LD_INT 3
6870: ARRAY
6871: PPUSH
6872: CALL_OW 73
6876: PPUSH
6877: LD_EXP 20
6881: PUSH
6882: LD_INT 2
6884: ARRAY
6885: PPUSH
6886: LD_EXP 20
6890: PUSH
6891: LD_INT 3
6893: ARRAY
6894: PPUSH
6895: CALL_OW 297
6899: PUSH
6900: LD_INT 10
6902: GREATER
6903: IFFALSE 6950
// ComBuild ( engs , ru_rebuild_list [ 1 ] , ru_rebuild_list [ 2 ] , ru_rebuild_list [ 3 ] , ru_rebuild_list [ 4 ] ) ;
6905: LD_VAR 0 4
6909: PPUSH
6910: LD_EXP 20
6914: PUSH
6915: LD_INT 1
6917: ARRAY
6918: PPUSH
6919: LD_EXP 20
6923: PUSH
6924: LD_INT 2
6926: ARRAY
6927: PPUSH
6928: LD_EXP 20
6932: PUSH
6933: LD_INT 3
6935: ARRAY
6936: PPUSH
6937: LD_EXP 20
6941: PUSH
6942: LD_INT 4
6944: ARRAY
6945: PPUSH
6946: CALL_OW 145
// end ; end ;
6950: PPOPN 5
6952: END
// every 0 0$1 trigger GetLives ( ru_dep_main ) < 250 do var i , tmp ;
6953: LD_INT 16
6955: PPUSH
6956: CALL_OW 256
6960: PUSH
6961: LD_INT 250
6963: LESS
6964: IFFALSE 7154
6966: GO 6968
6968: DISABLE
6969: LD_INT 0
6971: PPUSH
6972: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_class , 1 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ;
6973: LD_ADDR_VAR 0 2
6977: PUSH
6978: LD_INT 22
6980: PUSH
6981: LD_INT 3
6983: PUSH
6984: EMPTY
6985: LIST
6986: LIST
6987: PUSH
6988: LD_INT 2
6990: PUSH
6991: LD_INT 25
6993: PUSH
6994: LD_INT 1
6996: PUSH
6997: EMPTY
6998: LIST
6999: LIST
7000: PUSH
7001: LD_INT 25
7003: PUSH
7004: LD_INT 3
7006: PUSH
7007: EMPTY
7008: LIST
7009: LIST
7010: PUSH
7011: LD_INT 25
7013: PUSH
7014: LD_INT 4
7016: PUSH
7017: EMPTY
7018: LIST
7019: LIST
7020: PUSH
7021: EMPTY
7022: LIST
7023: LIST
7024: LIST
7025: LIST
7026: PUSH
7027: EMPTY
7028: LIST
7029: LIST
7030: PPUSH
7031: CALL_OW 69
7035: ST_TO_ADDR
// ComExitBuilding ( tmp ) ;
7036: LD_VAR 0 2
7040: PPUSH
7041: CALL_OW 122
// wait ( 3 ) ;
7045: LD_INT 3
7047: PPUSH
7048: CALL_OW 67
// ComMoveXY ( tmp , 156 , 211 ) ;
7052: LD_VAR 0 2
7056: PPUSH
7057: LD_INT 156
7059: PPUSH
7060: LD_INT 211
7062: PPUSH
7063: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
7067: LD_INT 35
7069: PPUSH
7070: CALL_OW 67
// for i in tmp do
7074: LD_ADDR_VAR 0 1
7078: PUSH
7079: LD_VAR 0 2
7083: PUSH
7084: FOR_IN
7085: IFFALSE 7145
// if IsInArea ( i , escapeArea ) then
7087: LD_VAR 0 1
7091: PPUSH
7092: LD_INT 15
7094: PPUSH
7095: CALL_OW 308
7099: IFFALSE 7128
// begin RemoveUnit ( i ) ;
7101: LD_VAR 0 1
7105: PPUSH
7106: CALL_OW 64
// tmp := tmp diff i ;
7110: LD_ADDR_VAR 0 2
7114: PUSH
7115: LD_VAR 0 2
7119: PUSH
7120: LD_VAR 0 1
7124: DIFF
7125: ST_TO_ADDR
// end else
7126: GO 7143
// ComMoveXY ( i , 156 , 211 ) ;
7128: LD_VAR 0 1
7132: PPUSH
7133: LD_INT 156
7135: PPUSH
7136: LD_INT 211
7138: PPUSH
7139: CALL_OW 111
7143: GO 7084
7145: POP
7146: POP
// until not tmp ;
7147: LD_VAR 0 2
7151: NOT
7152: IFFALSE 7067
// end ;
7154: PPOPN 2
7156: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do var i , tmp , doc ;
7157: LD_INT 22
7159: PUSH
7160: LD_INT 3
7162: PUSH
7163: EMPTY
7164: LIST
7165: LIST
7166: PUSH
7167: LD_INT 25
7169: PUSH
7170: LD_INT 4
7172: PUSH
7173: EMPTY
7174: LIST
7175: LIST
7176: PUSH
7177: EMPTY
7178: LIST
7179: LIST
7180: PPUSH
7181: CALL_OW 69
7185: IFFALSE 7439
7187: GO 7189
7189: DISABLE
7190: LD_INT 0
7192: PPUSH
7193: PPUSH
7194: PPUSH
// begin enable ;
7195: ENABLE
// tmp := FilterUnitsInArea ( mainBaseArea , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
7196: LD_ADDR_VAR 0 2
7200: PUSH
7201: LD_INT 14
7203: PPUSH
7204: LD_INT 22
7206: PUSH
7207: LD_INT 3
7209: PUSH
7210: EMPTY
7211: LIST
7212: LIST
7213: PUSH
7214: LD_INT 21
7216: PUSH
7217: LD_INT 1
7219: PUSH
7220: EMPTY
7221: LIST
7222: LIST
7223: PUSH
7224: LD_INT 3
7226: PUSH
7227: LD_INT 24
7229: PUSH
7230: LD_INT 1000
7232: PUSH
7233: EMPTY
7234: LIST
7235: LIST
7236: PUSH
7237: EMPTY
7238: LIST
7239: LIST
7240: PUSH
7241: EMPTY
7242: LIST
7243: LIST
7244: LIST
7245: PPUSH
7246: CALL_OW 70
7250: ST_TO_ADDR
// doc := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) ;
7251: LD_ADDR_VAR 0 3
7255: PUSH
7256: LD_INT 22
7258: PUSH
7259: LD_INT 3
7261: PUSH
7262: EMPTY
7263: LIST
7264: LIST
7265: PUSH
7266: LD_INT 25
7268: PUSH
7269: LD_INT 4
7271: PUSH
7272: EMPTY
7273: LIST
7274: LIST
7275: PUSH
7276: EMPTY
7277: LIST
7278: LIST
7279: PPUSH
7280: CALL_OW 69
7284: ST_TO_ADDR
// if not doc then
7285: LD_VAR 0 3
7289: NOT
7290: IFFALSE 7294
// exit ;
7292: GO 7439
// if not tmp then
7294: LD_VAR 0 2
7298: NOT
7299: IFFALSE 7390
// begin if not IsInUnit ( doc [ 1 ] ) then
7301: LD_VAR 0 3
7305: PUSH
7306: LD_INT 1
7308: ARRAY
7309: PPUSH
7310: CALL_OW 310
7314: NOT
7315: IFFALSE 7388
// ComEnterUnit ( doc , FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) [ 1 ] ) ;
7317: LD_VAR 0 3
7321: PPUSH
7322: LD_INT 22
7324: PUSH
7325: LD_INT 3
7327: PUSH
7328: EMPTY
7329: LIST
7330: LIST
7331: PUSH
7332: LD_INT 2
7334: PUSH
7335: LD_INT 30
7337: PUSH
7338: LD_INT 6
7340: PUSH
7341: EMPTY
7342: LIST
7343: LIST
7344: PUSH
7345: LD_INT 30
7347: PUSH
7348: LD_INT 7
7350: PUSH
7351: EMPTY
7352: LIST
7353: LIST
7354: PUSH
7355: LD_INT 30
7357: PUSH
7358: LD_INT 8
7360: PUSH
7361: EMPTY
7362: LIST
7363: LIST
7364: PUSH
7365: EMPTY
7366: LIST
7367: LIST
7368: LIST
7369: LIST
7370: PUSH
7371: EMPTY
7372: LIST
7373: LIST
7374: PPUSH
7375: CALL_OW 69
7379: PUSH
7380: LD_INT 1
7382: ARRAY
7383: PPUSH
7384: CALL_OW 120
// exit ;
7388: GO 7439
// end ; if IsInUnit ( doc [ 1 ] ) then
7390: LD_VAR 0 3
7394: PUSH
7395: LD_INT 1
7397: ARRAY
7398: PPUSH
7399: CALL_OW 310
7403: IFFALSE 7414
// ComExitBuilding ( doc ) ;
7405: LD_VAR 0 3
7409: PPUSH
7410: CALL_OW 122
// wait ( 3 ) ;
7414: LD_INT 3
7416: PPUSH
7417: CALL_OW 67
// ComHeal ( doc , tmp [ 1 ] ) ;
7421: LD_VAR 0 3
7425: PPUSH
7426: LD_VAR 0 2
7430: PUSH
7431: LD_INT 1
7433: ARRAY
7434: PPUSH
7435: CALL_OW 128
// end ;
7439: PPOPN 3
7441: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) do var i , tmp , attacking , areas , area , mech ;
7442: LD_INT 22
7444: PUSH
7445: LD_INT 3
7447: PUSH
7448: EMPTY
7449: LIST
7450: LIST
7451: PUSH
7452: LD_INT 25
7454: PUSH
7455: LD_INT 3
7457: PUSH
7458: EMPTY
7459: LIST
7460: LIST
7461: PUSH
7462: EMPTY
7463: LIST
7464: LIST
7465: PPUSH
7466: CALL_OW 69
7470: PUSH
7471: LD_INT 22
7473: PUSH
7474: LD_INT 3
7476: PUSH
7477: EMPTY
7478: LIST
7479: LIST
7480: PUSH
7481: LD_INT 21
7483: PUSH
7484: LD_INT 2
7486: PUSH
7487: EMPTY
7488: LIST
7489: LIST
7490: PUSH
7491: EMPTY
7492: LIST
7493: LIST
7494: PPUSH
7495: CALL_OW 69
7499: AND
7500: IFFALSE 8259
7502: GO 7504
7504: DISABLE
7505: LD_INT 0
7507: PPUSH
7508: PPUSH
7509: PPUSH
7510: PPUSH
7511: PPUSH
7512: PPUSH
// begin enable ;
7513: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) ;
7514: LD_ADDR_VAR 0 2
7518: PUSH
7519: LD_INT 22
7521: PUSH
7522: LD_INT 3
7524: PUSH
7525: EMPTY
7526: LIST
7527: LIST
7528: PUSH
7529: LD_INT 21
7531: PUSH
7532: LD_INT 2
7534: PUSH
7535: EMPTY
7536: LIST
7537: LIST
7538: PUSH
7539: LD_INT 3
7541: PUSH
7542: LD_INT 58
7544: PUSH
7545: EMPTY
7546: LIST
7547: PUSH
7548: EMPTY
7549: LIST
7550: LIST
7551: PUSH
7552: EMPTY
7553: LIST
7554: LIST
7555: LIST
7556: PPUSH
7557: CALL_OW 69
7561: ST_TO_ADDR
// areas := [ sectorAlpha , sectorBeta , sectorDelta , mainBaseArea ] ;
7562: LD_ADDR_VAR 0 4
7566: PUSH
7567: LD_INT 10
7569: PUSH
7570: LD_INT 11
7572: PUSH
7573: LD_INT 12
7575: PUSH
7576: LD_INT 14
7578: PUSH
7579: EMPTY
7580: LIST
7581: LIST
7582: LIST
7583: LIST
7584: ST_TO_ADDR
// area := 0 ;
7585: LD_ADDR_VAR 0 5
7589: PUSH
7590: LD_INT 0
7592: ST_TO_ADDR
// attacking := false ;
7593: LD_ADDR_VAR 0 3
7597: PUSH
7598: LD_INT 0
7600: ST_TO_ADDR
// for i in tmp do
7601: LD_ADDR_VAR 0 1
7605: PUSH
7606: LD_VAR 0 2
7610: PUSH
7611: FOR_IN
7612: IFFALSE 8040
// begin if GetDistUnits ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) < 10 and not HasTask ( i ) and not GetTag ( i ) and GetLives ( i ) > 650 then
7614: LD_VAR 0 1
7618: PPUSH
7619: LD_INT 22
7621: PUSH
7622: LD_INT 1
7624: PUSH
7625: EMPTY
7626: LIST
7627: LIST
7628: PPUSH
7629: CALL_OW 69
7633: PPUSH
7634: LD_VAR 0 1
7638: PPUSH
7639: CALL_OW 74
7643: PPUSH
7644: CALL_OW 296
7648: PUSH
7649: LD_INT 10
7651: LESS
7652: PUSH
7653: LD_VAR 0 1
7657: PPUSH
7658: CALL_OW 314
7662: NOT
7663: AND
7664: PUSH
7665: LD_VAR 0 1
7669: PPUSH
7670: CALL_OW 110
7674: NOT
7675: AND
7676: PUSH
7677: LD_VAR 0 1
7681: PPUSH
7682: CALL_OW 256
7686: PUSH
7687: LD_INT 650
7689: GREATER
7690: AND
7691: IFFALSE 7735
// begin ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
7693: LD_VAR 0 1
7697: PPUSH
7698: LD_INT 22
7700: PUSH
7701: LD_INT 1
7703: PUSH
7704: EMPTY
7705: LIST
7706: LIST
7707: PPUSH
7708: CALL_OW 69
7712: PPUSH
7713: LD_VAR 0 1
7717: PPUSH
7718: CALL_OW 74
7722: PPUSH
7723: CALL_OW 115
// attacking := true ;
7727: LD_ADDR_VAR 0 3
7731: PUSH
7732: LD_INT 1
7734: ST_TO_ADDR
// end ; if not GetTag ( i ) and GetLives ( i ) < 650 and GetType ( i ) = unit_vehicle then
7735: LD_VAR 0 1
7739: PPUSH
7740: CALL_OW 110
7744: NOT
7745: PUSH
7746: LD_VAR 0 1
7750: PPUSH
7751: CALL_OW 256
7755: PUSH
7756: LD_INT 650
7758: LESS
7759: AND
7760: PUSH
7761: LD_VAR 0 1
7765: PPUSH
7766: CALL_OW 247
7770: PUSH
7771: LD_INT 2
7773: EQUAL
7774: AND
7775: IFFALSE 7804
// begin SetTag ( i , 1 ) ;
7777: LD_VAR 0 1
7781: PPUSH
7782: LD_INT 1
7784: PPUSH
7785: CALL_OW 109
// ComMoveXY ( i , 130 , 139 ) ;
7789: LD_VAR 0 1
7793: PPUSH
7794: LD_INT 130
7796: PPUSH
7797: LD_INT 139
7799: PPUSH
7800: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 130 , 139 ) < 6 then
7804: LD_VAR 0 1
7808: PPUSH
7809: CALL_OW 110
7813: PUSH
7814: LD_INT 1
7816: EQUAL
7817: PUSH
7818: LD_VAR 0 1
7822: PPUSH
7823: LD_INT 130
7825: PPUSH
7826: LD_INT 139
7828: PPUSH
7829: CALL_OW 297
7833: PUSH
7834: LD_INT 6
7836: LESS
7837: AND
7838: IFFALSE 7852
// SetTag ( i , 2 ) ;
7840: LD_VAR 0 1
7844: PPUSH
7845: LD_INT 2
7847: PPUSH
7848: CALL_OW 109
// if GetTag ( i ) = 2 then
7852: LD_VAR 0 1
7856: PPUSH
7857: CALL_OW 110
7861: PUSH
7862: LD_INT 2
7864: EQUAL
7865: IFFALSE 8000
// begin if GetLives ( i ) = 1000 then
7867: LD_VAR 0 1
7871: PPUSH
7872: CALL_OW 256
7876: PUSH
7877: LD_INT 1000
7879: EQUAL
7880: IFFALSE 7896
// SetTag ( i , 3 ) else
7882: LD_VAR 0 1
7886: PPUSH
7887: LD_INT 3
7889: PPUSH
7890: CALL_OW 109
7894: GO 8000
// if IsDrivenBy ( i ) then
7896: LD_VAR 0 1
7900: PPUSH
7901: CALL_OW 311
7905: IFFALSE 8000
// begin mech := IsDrivenBy ( i ) ;
7907: LD_ADDR_VAR 0 6
7911: PUSH
7912: LD_VAR 0 1
7916: PPUSH
7917: CALL_OW 311
7921: ST_TO_ADDR
// if not See ( 1 , mech ) and GetLives ( mech ) < 1000 then
7922: LD_INT 1
7924: PPUSH
7925: LD_VAR 0 6
7929: PPUSH
7930: CALL_OW 292
7934: NOT
7935: PUSH
7936: LD_VAR 0 6
7940: PPUSH
7941: CALL_OW 256
7945: PUSH
7946: LD_INT 1000
7948: LESS
7949: AND
7950: IFFALSE 7964
// SetLives ( mech , 1000 ) ;
7952: LD_VAR 0 6
7956: PPUSH
7957: LD_INT 1000
7959: PPUSH
7960: CALL_OW 234
// if not See ( 1 , i ) then
7964: LD_INT 1
7966: PPUSH
7967: LD_VAR 0 1
7971: PPUSH
7972: CALL_OW 292
7976: NOT
7977: IFFALSE 7991
// SetFuel ( i , 100 ) ;
7979: LD_VAR 0 1
7983: PPUSH
7984: LD_INT 100
7986: PPUSH
7987: CALL_OW 240
// ComRepairVehicleAndReturn ( mech ) ;
7991: LD_VAR 0 6
7995: PPUSH
7996: CALL 71499 0 1
// end ; end ; if GetTag ( i ) = 3 and IsDrivenBy ( i ) then
8000: LD_VAR 0 1
8004: PPUSH
8005: CALL_OW 110
8009: PUSH
8010: LD_INT 3
8012: EQUAL
8013: PUSH
8014: LD_VAR 0 1
8018: PPUSH
8019: CALL_OW 311
8023: AND
8024: IFFALSE 8038
// SetTag ( i , 0 ) ;
8026: LD_VAR 0 1
8030: PPUSH
8031: LD_INT 0
8033: PPUSH
8034: CALL_OW 109
// end ;
8038: GO 7611
8040: POP
8041: POP
// if attacking then
8042: LD_VAR 0 3
8046: IFFALSE 8050
// exit ;
8048: GO 8259
// if can_end and tmp then
8050: LD_EXP 6
8054: PUSH
8055: LD_VAR 0 2
8059: AND
8060: IFFALSE 8115
// begin for i in tmp do
8062: LD_ADDR_VAR 0 1
8066: PUSH
8067: LD_VAR 0 2
8071: PUSH
8072: FOR_IN
8073: IFFALSE 8111
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
8075: LD_VAR 0 1
8079: PPUSH
8080: LD_INT 22
8082: PUSH
8083: LD_INT 1
8085: PUSH
8086: EMPTY
8087: LIST
8088: LIST
8089: PPUSH
8090: CALL_OW 69
8094: PPUSH
8095: LD_VAR 0 1
8099: PPUSH
8100: CALL_OW 74
8104: PPUSH
8105: CALL_OW 115
8109: GO 8072
8111: POP
8112: POP
// exit ;
8113: GO 8259
// end ; for i in areas do
8115: LD_ADDR_VAR 0 1
8119: PUSH
8120: LD_VAR 0 4
8124: PUSH
8125: FOR_IN
8126: IFFALSE 8163
// if FilterUnitsInArea ( i , [ f_side , 1 ] ) then
8128: LD_VAR 0 1
8132: PPUSH
8133: LD_INT 22
8135: PUSH
8136: LD_INT 1
8138: PUSH
8139: EMPTY
8140: LIST
8141: LIST
8142: PPUSH
8143: CALL_OW 70
8147: IFFALSE 8161
// begin area := i ;
8149: LD_ADDR_VAR 0 5
8153: PUSH
8154: LD_VAR 0 1
8158: ST_TO_ADDR
// break ;
8159: GO 8163
// end ;
8161: GO 8125
8163: POP
8164: POP
// if area then
8165: LD_VAR 0 5
8169: IFFALSE 8259
// begin for i in tmp do
8171: LD_ADDR_VAR 0 1
8175: PUSH
8176: LD_VAR 0 2
8180: PUSH
8181: FOR_IN
8182: IFFALSE 8257
// begin if GetTag ( i ) then
8184: LD_VAR 0 1
8188: PPUSH
8189: CALL_OW 110
8193: IFFALSE 8197
// continue ;
8195: GO 8181
// if GetFuel ( i ) < 33 then
8197: LD_VAR 0 1
8201: PPUSH
8202: CALL_OW 261
8206: PUSH
8207: LD_INT 33
8209: LESS
8210: IFFALSE 8224
// SetFuel ( i , 33 ) ;
8212: LD_VAR 0 1
8216: PPUSH
8217: LD_INT 33
8219: PPUSH
8220: CALL_OW 240
// if not IsInArea ( i , area ) then
8224: LD_VAR 0 1
8228: PPUSH
8229: LD_VAR 0 5
8233: PPUSH
8234: CALL_OW 308
8238: NOT
8239: IFFALSE 8255
// ComMoveToArea ( i , area ) ;
8241: LD_VAR 0 1
8245: PPUSH
8246: LD_VAR 0 5
8250: PPUSH
8251: CALL_OW 113
// end ;
8255: GO 8181
8257: POP
8258: POP
// end ; end ;
8259: PPOPN 6
8261: END
// every 15 15$00 trigger Difficulty > 1 do var i , j , un , veh , time , count ;
8262: LD_OWVAR 67
8266: PUSH
8267: LD_INT 1
8269: GREATER
8270: IFFALSE 8555
8272: GO 8274
8274: DISABLE
8275: LD_INT 0
8277: PPUSH
8278: PPUSH
8279: PPUSH
8280: PPUSH
8281: PPUSH
8282: PPUSH
// begin uc_side := 3 ;
8283: LD_ADDR_OWVAR 20
8287: PUSH
8288: LD_INT 3
8290: ST_TO_ADDR
// uc_nation := 3 ;
8291: LD_ADDR_OWVAR 21
8295: PUSH
8296: LD_INT 3
8298: ST_TO_ADDR
// time := [ 9 9$00 , 7 7$00 , 6 6$00 , 5 5$30 ] [ Difficulty ] ;
8299: LD_ADDR_VAR 0 5
8303: PUSH
8304: LD_INT 18900
8306: PUSH
8307: LD_INT 14700
8309: PUSH
8310: LD_INT 12600
8312: PUSH
8313: LD_INT 11550
8315: PUSH
8316: EMPTY
8317: LIST
8318: LIST
8319: LIST
8320: LIST
8321: PUSH
8322: LD_OWVAR 67
8326: ARRAY
8327: ST_TO_ADDR
// count := [ 2 , 2 , 3 , 3 ] [ Difficulty ] ;
8328: LD_ADDR_VAR 0 6
8332: PUSH
8333: LD_INT 2
8335: PUSH
8336: LD_INT 2
8338: PUSH
8339: LD_INT 3
8341: PUSH
8342: LD_INT 3
8344: PUSH
8345: EMPTY
8346: LIST
8347: LIST
8348: LIST
8349: LIST
8350: PUSH
8351: LD_OWVAR 67
8355: ARRAY
8356: ST_TO_ADDR
// for i = 1 to count do
8357: LD_ADDR_VAR 0 1
8361: PUSH
8362: DOUBLE
8363: LD_INT 1
8365: DEC
8366: ST_TO_ADDR
8367: LD_VAR 0 6
8371: PUSH
8372: FOR_TO
8373: IFFALSE 8553
// begin wait ( time ) ;
8375: LD_VAR 0 5
8379: PPUSH
8380: CALL_OW 67
// for j = 1 to rand ( 1 , Difficulty ) do
8384: LD_ADDR_VAR 0 2
8388: PUSH
8389: DOUBLE
8390: LD_INT 1
8392: DEC
8393: ST_TO_ADDR
8394: LD_INT 1
8396: PPUSH
8397: LD_OWVAR 67
8401: PPUSH
8402: CALL_OW 12
8406: PUSH
8407: FOR_TO
8408: IFFALSE 8549
// begin veh := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_machine_gun ] [ i mod 3 + 1 ] , 80 ) ;
8410: LD_ADDR_VAR 0 4
8414: PUSH
8415: LD_INT 3
8417: PPUSH
8418: LD_INT 3
8420: PPUSH
8421: LD_INT 22
8423: PPUSH
8424: LD_INT 1
8426: PPUSH
8427: LD_INT 1
8429: PPUSH
8430: LD_INT 43
8432: PUSH
8433: LD_INT 44
8435: PUSH
8436: LD_INT 42
8438: PUSH
8439: EMPTY
8440: LIST
8441: LIST
8442: LIST
8443: PUSH
8444: LD_VAR 0 1
8448: PUSH
8449: LD_INT 3
8451: MOD
8452: PUSH
8453: LD_INT 1
8455: PLUS
8456: ARRAY
8457: PPUSH
8458: LD_INT 80
8460: PPUSH
8461: CALL 520 0 7
8465: ST_TO_ADDR
// PlaceUnitArea ( veh , southArea , false ) ;
8466: LD_VAR 0 4
8470: PPUSH
8471: LD_INT 13
8473: PPUSH
8474: LD_INT 0
8476: PPUSH
8477: CALL_OW 49
// PrepareHuman ( false , 3 , [ 4 , 5 , 5 ] [ Difficulty ] ) ;
8481: LD_INT 0
8483: PPUSH
8484: LD_INT 3
8486: PPUSH
8487: LD_INT 4
8489: PUSH
8490: LD_INT 5
8492: PUSH
8493: LD_INT 5
8495: PUSH
8496: EMPTY
8497: LIST
8498: LIST
8499: LIST
8500: PUSH
8501: LD_OWVAR 67
8505: ARRAY
8506: PPUSH
8507: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
8511: CALL_OW 44
8515: PPUSH
8516: LD_VAR 0 4
8520: PPUSH
8521: CALL_OW 52
// wait ( 0 0$01 ) ;
8525: LD_INT 35
8527: PPUSH
8528: CALL_OW 67
// ComMoveXY ( veh , 143 , 143 ) ;
8532: LD_VAR 0 4
8536: PPUSH
8537: LD_INT 143
8539: PPUSH
8540: LD_INT 143
8542: PPUSH
8543: CALL_OW 111
// end ;
8547: GO 8407
8549: POP
8550: POP
// end ;
8551: GO 8372
8553: POP
8554: POP
// end ;
8555: PPOPN 6
8557: END
// every 8 8$00 do var i , un , time ;
8558: GO 8560
8560: DISABLE
8561: LD_INT 0
8563: PPUSH
8564: PPUSH
8565: PPUSH
// begin time := [ 3 3$00 , 1 1$00 , 0 0$30 ] ;
8566: LD_ADDR_VAR 0 3
8570: PUSH
8571: LD_INT 6300
8573: PUSH
8574: LD_INT 2100
8576: PUSH
8577: LD_INT 1050
8579: PUSH
8580: EMPTY
8581: LIST
8582: LIST
8583: LIST
8584: ST_TO_ADDR
// wait ( time ) ;
8585: LD_VAR 0 3
8589: PPUSH
8590: CALL_OW 67
// uc_side := 3 ;
8594: LD_ADDR_OWVAR 20
8598: PUSH
8599: LD_INT 3
8601: ST_TO_ADDR
// uc_nation := 3 ;
8602: LD_ADDR_OWVAR 21
8606: PUSH
8607: LD_INT 3
8609: ST_TO_ADDR
// for i = 1 to 2 do
8610: LD_ADDR_VAR 0 1
8614: PUSH
8615: DOUBLE
8616: LD_INT 1
8618: DEC
8619: ST_TO_ADDR
8620: LD_INT 2
8622: PUSH
8623: FOR_TO
8624: IFFALSE 8687
// begin PrepareHuman ( false , 1 , 4 ) ;
8626: LD_INT 0
8628: PPUSH
8629: LD_INT 1
8631: PPUSH
8632: LD_INT 4
8634: PPUSH
8635: CALL_OW 380
// un := CreateHuman ;
8639: LD_ADDR_VAR 0 2
8643: PUSH
8644: CALL_OW 44
8648: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_dep_main ) ;
8649: LD_VAR 0 2
8653: PPUSH
8654: LD_INT 16
8656: PPUSH
8657: CALL_OW 52
// ComExitBuilding ( un ) ;
8661: LD_VAR 0 2
8665: PPUSH
8666: CALL_OW 122
// AddComAgressiveMove ( un , 41 , 76 ) ;
8670: LD_VAR 0 2
8674: PPUSH
8675: LD_INT 41
8677: PPUSH
8678: LD_INT 76
8680: PPUSH
8681: CALL_OW 174
// end ;
8685: GO 8623
8687: POP
8688: POP
// end ; end_of_file
8689: PPOPN 3
8691: END
// export function Action ; begin
8692: LD_INT 0
8694: PPUSH
// CenterNowOnXY ( 28 , 3 ) ;
8695: LD_INT 28
8697: PPUSH
8698: LD_INT 3
8700: PPUSH
8701: CALL_OW 86
// PlaceSeeing ( 41 , 76 , 1 , 10 ) ;
8705: LD_INT 41
8707: PPUSH
8708: LD_INT 76
8710: PPUSH
8711: LD_INT 1
8713: PPUSH
8714: LD_INT 10
8716: PPUSH
8717: CALL_OW 330
// RemoveSeeing ( 41 , 76 , 1 ) ;
8721: LD_INT 41
8723: PPUSH
8724: LD_INT 76
8726: PPUSH
8727: LD_INT 1
8729: PPUSH
8730: CALL_OW 331
// InGameOn ;
8734: CALL_OW 8
// SayRadio ( Harisson , D2-Har-1 ) ;
8738: LD_EXP 19
8742: PPUSH
8743: LD_STRING D2-Har-1
8745: PPUSH
8746: CALL_OW 94
// InGameOff ;
8750: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
8754: LD_STRING M1
8756: PPUSH
8757: CALL_OW 337
// end ;
8761: LD_VAR 0 1
8765: RET
// every 0 0$1 trigger buildings_counter > 1 do var un ;
8766: LD_EXP 4
8770: PUSH
8771: LD_INT 1
8773: GREATER
8774: IFFALSE 8865
8776: GO 8778
8778: DISABLE
8779: LD_INT 0
8781: PPUSH
// begin un := GetRandom ( sex_male ) [ 1 ] ;
8782: LD_ADDR_VAR 0 1
8786: PUSH
8787: LD_INT 1
8789: PPUSH
8790: CALL 608 0 1
8794: PUSH
8795: LD_INT 1
8797: ARRAY
8798: ST_TO_ADDR
// Say ( un , D2a-Sol1-1 ) ;
8799: LD_VAR 0 1
8803: PPUSH
8804: LD_STRING D2a-Sol1-1
8806: PPUSH
8807: CALL_OW 88
// if not un then
8811: LD_VAR 0 1
8815: NOT
8816: IFFALSE 8847
// begin un := GetRandom ( sex_female ) [ 1 ] ;
8818: LD_ADDR_VAR 0 1
8822: PUSH
8823: LD_INT 2
8825: PPUSH
8826: CALL 608 0 1
8830: PUSH
8831: LD_INT 1
8833: ARRAY
8834: ST_TO_ADDR
// Say ( un , D2a-FSol1-1 ) ;
8835: LD_VAR 0 1
8839: PPUSH
8840: LD_STRING D2a-FSol1-1
8842: PPUSH
8843: CALL_OW 88
// end ; if Khatam then
8847: LD_EXP 17
8851: IFFALSE 8865
// Say ( Khatam , D3b-Khat-3 ) ;
8853: LD_EXP 17
8857: PPUSH
8858: LD_STRING D3b-Khat-3
8860: PPUSH
8861: CALL_OW 88
// end ;
8865: PPOPN 1
8867: END
// every 0 0$1 trigger Frank and not Kikuchi and FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , Frank , 7 ] ] ) and IsOk ( Frank ) and not InBattle ( 1 ) and not InBattle ( 4 ) do var i , ape ;
8868: LD_EXP 15
8872: PUSH
8873: LD_EXP 18
8877: NOT
8878: AND
8879: PUSH
8880: LD_INT 22
8882: PUSH
8883: LD_INT 1
8885: PUSH
8886: EMPTY
8887: LIST
8888: LIST
8889: PUSH
8890: LD_INT 91
8892: PUSH
8893: LD_EXP 15
8897: PUSH
8898: LD_INT 7
8900: PUSH
8901: EMPTY
8902: LIST
8903: LIST
8904: LIST
8905: PUSH
8906: EMPTY
8907: LIST
8908: LIST
8909: PPUSH
8910: CALL_OW 69
8914: AND
8915: PUSH
8916: LD_EXP 15
8920: PPUSH
8921: CALL_OW 302
8925: AND
8926: PUSH
8927: LD_INT 1
8929: PPUSH
8930: CALL_OW 463
8934: NOT
8935: AND
8936: PUSH
8937: LD_INT 4
8939: PPUSH
8940: CALL_OW 463
8944: NOT
8945: AND
8946: IFFALSE 9533
8948: GO 8950
8950: DISABLE
8951: LD_INT 0
8953: PPUSH
8954: PPUSH
// begin InGameOn ;
8955: CALL_OW 8
// ape := FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) ;
8959: LD_ADDR_VAR 0 2
8963: PUSH
8964: LD_INT 22
8966: PUSH
8967: LD_INT 0
8969: PUSH
8970: EMPTY
8971: LIST
8972: LIST
8973: PUSH
8974: LD_INT 25
8976: PUSH
8977: LD_INT 12
8979: PUSH
8980: EMPTY
8981: LIST
8982: LIST
8983: PUSH
8984: EMPTY
8985: LIST
8986: LIST
8987: PPUSH
8988: CALL_OW 69
8992: ST_TO_ADDR
// ape := NearestUnitToUnit ( ape , Frank ) ;
8993: LD_ADDR_VAR 0 2
8997: PUSH
8998: LD_VAR 0 2
9002: PPUSH
9003: LD_EXP 15
9007: PPUSH
9008: CALL_OW 74
9012: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_dist , Frank , 20 ] ] ) do
9013: LD_ADDR_VAR 0 1
9017: PUSH
9018: LD_INT 22
9020: PUSH
9021: LD_INT 1
9023: PUSH
9024: EMPTY
9025: LIST
9026: LIST
9027: PUSH
9028: LD_INT 21
9030: PUSH
9031: LD_INT 1
9033: PUSH
9034: EMPTY
9035: LIST
9036: LIST
9037: PUSH
9038: LD_INT 91
9040: PUSH
9041: LD_EXP 15
9045: PUSH
9046: LD_INT 20
9048: PUSH
9049: EMPTY
9050: LIST
9051: LIST
9052: LIST
9053: PUSH
9054: EMPTY
9055: LIST
9056: LIST
9057: LIST
9058: PPUSH
9059: CALL_OW 69
9063: PUSH
9064: FOR_IN
9065: IFFALSE 9083
// ComTurnUnit ( i , Frank ) ;
9067: LD_VAR 0 1
9071: PPUSH
9072: LD_EXP 15
9076: PPUSH
9077: CALL_OW 119
9081: GO 9064
9083: POP
9084: POP
// SetSide ( Frank , 1 ) ;
9085: LD_EXP 15
9089: PPUSH
9090: LD_INT 1
9092: PPUSH
9093: CALL_OW 235
// ComMoveUnit ( JMM , Frank ) ;
9097: LD_EXP 9
9101: PPUSH
9102: LD_EXP 15
9106: PPUSH
9107: CALL_OW 112
// AddComTurnUnit ( JMM , Frank ) ;
9111: LD_EXP 9
9115: PPUSH
9116: LD_EXP 15
9120: PPUSH
9121: CALL_OW 179
// CenterOnUnits ( Frank ) ;
9125: LD_EXP 15
9129: PPUSH
9130: CALL_OW 85
// Say ( Frank , D3a-Frank-1 ) ;
9134: LD_EXP 15
9138: PPUSH
9139: LD_STRING D3a-Frank-1
9141: PPUSH
9142: CALL_OW 88
// ComMoveXY ( ape , 42 , 78 ) ;
9146: LD_VAR 0 2
9150: PPUSH
9151: LD_INT 42
9153: PPUSH
9154: LD_INT 78
9156: PPUSH
9157: CALL_OW 111
// AddComTurnUnit ( ape , Frank ) ;
9161: LD_VAR 0 2
9165: PPUSH
9166: LD_EXP 15
9170: PPUSH
9171: CALL_OW 179
// if Lisa then
9175: LD_EXP 14
9179: IFFALSE 9193
// Say ( Lisa , D3a-Lisa-1 ) ;
9181: LD_EXP 14
9185: PPUSH
9186: LD_STRING D3a-Lisa-1
9188: PPUSH
9189: CALL_OW 88
// Say ( JMM , D3a-JMM-1 ) ;
9193: LD_EXP 9
9197: PPUSH
9198: LD_STRING D3a-JMM-1
9200: PPUSH
9201: CALL_OW 88
// if Cyrus then
9205: LD_EXP 13
9209: IFFALSE 9223
// Say ( Cyrus , D3a-Cyrus-1 ) ;
9211: LD_EXP 13
9215: PPUSH
9216: LD_STRING D3a-Cyrus-1
9218: PPUSH
9219: CALL_OW 88
// if GetRandom ( sex_male ) then
9223: LD_INT 1
9225: PPUSH
9226: CALL 608 0 1
9230: IFFALSE 9251
// Say ( GetRandom ( sex_male ) [ 1 ] , D3a-Sol1-1 ) ;
9232: LD_INT 1
9234: PPUSH
9235: CALL 608 0 1
9239: PUSH
9240: LD_INT 1
9242: ARRAY
9243: PPUSH
9244: LD_STRING D3a-Sol1-1
9246: PPUSH
9247: CALL_OW 88
// if GetRandom ( sex_female ) then
9251: LD_INT 2
9253: PPUSH
9254: CALL 608 0 1
9258: IFFALSE 9279
// Say ( GetRandom ( sex_female ) [ 1 ] , D3a-FSol1-1 ) ;
9260: LD_INT 2
9262: PPUSH
9263: CALL 608 0 1
9267: PUSH
9268: LD_INT 1
9270: ARRAY
9271: PPUSH
9272: LD_STRING D3a-FSol1-1
9274: PPUSH
9275: CALL_OW 88
// if Gladstone then
9279: LD_EXP 16
9283: IFFALSE 9297
// Say ( Gladstone , D3a-Glad-1 ) ;
9285: LD_EXP 16
9289: PPUSH
9290: LD_STRING D3a-Glad-1
9292: PPUSH
9293: CALL_OW 88
// ComMoveXY ( ape , 60 , 113 ) ;
9297: LD_VAR 0 2
9301: PPUSH
9302: LD_INT 60
9304: PPUSH
9305: LD_INT 113
9307: PPUSH
9308: CALL_OW 111
// Say ( Frank , D3a-Frank-2 ) ;
9312: LD_EXP 15
9316: PPUSH
9317: LD_STRING D3a-Frank-2
9319: PPUSH
9320: CALL_OW 88
// ComTurnUnit ( Frank , JMM ) ;
9324: LD_EXP 15
9328: PPUSH
9329: LD_EXP 9
9333: PPUSH
9334: CALL_OW 119
// Say ( JMM , D3a-JMM-2 ) ;
9338: LD_EXP 9
9342: PPUSH
9343: LD_STRING D3a-JMM-2
9345: PPUSH
9346: CALL_OW 88
// RevealFogArea ( 1 , spotArea ) ;
9350: LD_INT 1
9352: PPUSH
9353: LD_INT 4
9355: PPUSH
9356: CALL_OW 332
// CenterOnXY ( 85 , 134 ) ;
9360: LD_INT 85
9362: PPUSH
9363: LD_INT 134
9365: PPUSH
9366: CALL_OW 84
// Say ( Frank , D3a-Frank-3 ) ;
9370: LD_EXP 15
9374: PPUSH
9375: LD_STRING D3a-Frank-3
9377: PPUSH
9378: CALL_OW 88
// Wait ( 0 0$01 ) ;
9382: LD_INT 35
9384: PPUSH
9385: CALL_OW 67
// CenterOnXY ( 166 , 136 ) ;
9389: LD_INT 166
9391: PPUSH
9392: LD_INT 136
9394: PPUSH
9395: CALL_OW 84
// Say ( JMM , D3a-JMM-3 ) ;
9399: LD_EXP 9
9403: PPUSH
9404: LD_STRING D3a-JMM-3
9406: PPUSH
9407: CALL_OW 88
// Wait ( 0 0$01 ) ;
9411: LD_INT 35
9413: PPUSH
9414: CALL_OW 67
// CenterNowOnUnits ( Frank ) ;
9418: LD_EXP 15
9422: PPUSH
9423: CALL_OW 87
// Say ( Frank , D3a-Frank-4 ) ;
9427: LD_EXP 15
9431: PPUSH
9432: LD_STRING D3a-Frank-4
9434: PPUSH
9435: CALL_OW 88
// if Lisa then
9439: LD_EXP 14
9443: IFFALSE 9457
// Say ( Lisa , D3a-Lisa-4 ) ;
9445: LD_EXP 14
9449: PPUSH
9450: LD_STRING D3a-Lisa-4
9452: PPUSH
9453: CALL_OW 88
// Say ( JMM , D3a-JMM-4 ) ;
9457: LD_EXP 9
9461: PPUSH
9462: LD_STRING D3a-JMM-4
9464: PPUSH
9465: CALL_OW 88
// Say ( Frank , D3a-Frank-5 ) ;
9469: LD_EXP 15
9473: PPUSH
9474: LD_STRING D3a-Frank-5
9476: PPUSH
9477: CALL_OW 88
// Say ( JMM , D3a-JMM-5 ) ;
9481: LD_EXP 9
9485: PPUSH
9486: LD_STRING D3a-JMM-5
9488: PPUSH
9489: CALL_OW 88
// Say ( Frank , D3a-Frank-6 ) ;
9493: LD_EXP 15
9497: PPUSH
9498: LD_STRING D3a-Frank-6
9500: PPUSH
9501: CALL_OW 88
// Say ( JMM , D3a-JMM-6 ) ;
9505: LD_EXP 9
9509: PPUSH
9510: LD_STRING D3a-JMM-6
9512: PPUSH
9513: CALL_OW 88
// Say ( Frank , D3a-Frank-7 ) ;
9517: LD_EXP 15
9521: PPUSH
9522: LD_STRING D3a-Frank-7
9524: PPUSH
9525: CALL_OW 88
// InGameOff ;
9529: CALL_OW 9
// end ;
9533: PPOPN 2
9535: END
// every 0 0$1 trigger Kikuchi and not Frank and FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , Kikuchi , 7 ] ] ) and IsOk ( Kikuchi ) and not InBattle ( 1 ) and not InBattle ( 4 ) do
9536: LD_EXP 18
9540: PUSH
9541: LD_EXP 15
9545: NOT
9546: AND
9547: PUSH
9548: LD_INT 22
9550: PUSH
9551: LD_INT 1
9553: PUSH
9554: EMPTY
9555: LIST
9556: LIST
9557: PUSH
9558: LD_INT 91
9560: PUSH
9561: LD_EXP 18
9565: PUSH
9566: LD_INT 7
9568: PUSH
9569: EMPTY
9570: LIST
9571: LIST
9572: LIST
9573: PUSH
9574: EMPTY
9575: LIST
9576: LIST
9577: PPUSH
9578: CALL_OW 69
9582: AND
9583: PUSH
9584: LD_EXP 18
9588: PPUSH
9589: CALL_OW 302
9593: AND
9594: PUSH
9595: LD_INT 1
9597: PPUSH
9598: CALL_OW 463
9602: NOT
9603: AND
9604: PUSH
9605: LD_INT 4
9607: PPUSH
9608: CALL_OW 463
9612: NOT
9613: AND
9614: IFFALSE 9794
9616: GO 9618
9618: DISABLE
// begin InGameOn ;
9619: CALL_OW 8
// ComTurnUnit ( JMM , Kikuchi ) ;
9623: LD_EXP 9
9627: PPUSH
9628: LD_EXP 18
9632: PPUSH
9633: CALL_OW 119
// ComTurnUnit ( Kikuchi , JMM ) ;
9637: LD_EXP 18
9641: PPUSH
9642: LD_EXP 9
9646: PPUSH
9647: CALL_OW 119
// CenterOnUnits ( Kikuchi ) ;
9651: LD_EXP 18
9655: PPUSH
9656: CALL_OW 85
// Say ( Kikuchi , D3b-Yam-1 ) ;
9660: LD_EXP 18
9664: PPUSH
9665: LD_STRING D3b-Yam-1
9667: PPUSH
9668: CALL_OW 88
// Say ( JMM , D3b-JMM-1 ) ;
9672: LD_EXP 9
9676: PPUSH
9677: LD_STRING D3b-JMM-1
9679: PPUSH
9680: CALL_OW 88
// RevealFogArea ( 1 , spotArea ) ;
9684: LD_INT 1
9686: PPUSH
9687: LD_INT 4
9689: PPUSH
9690: CALL_OW 332
// CenterOnXY ( 85 , 134 ) ;
9694: LD_INT 85
9696: PPUSH
9697: LD_INT 134
9699: PPUSH
9700: CALL_OW 84
// Say ( Kikuchi , D3b-Yam-2 ) ;
9704: LD_EXP 18
9708: PPUSH
9709: LD_STRING D3b-Yam-2
9711: PPUSH
9712: CALL_OW 88
// Wait ( 0 0$01 ) ;
9716: LD_INT 35
9718: PPUSH
9719: CALL_OW 67
// Say ( JMM , D3b-JMM-2 ) ;
9723: LD_EXP 9
9727: PPUSH
9728: LD_STRING D3b-JMM-2
9730: PPUSH
9731: CALL_OW 88
// CenterOnXY ( 166 , 136 ) ;
9735: LD_INT 166
9737: PPUSH
9738: LD_INT 136
9740: PPUSH
9741: CALL_OW 84
// Say ( Kikuchi , D3b-Yam-3 ) ;
9745: LD_EXP 18
9749: PPUSH
9750: LD_STRING D3b-Yam-3
9752: PPUSH
9753: CALL_OW 88
// CenterNowOnUnits ( JMM ) ;
9757: LD_EXP 9
9761: PPUSH
9762: CALL_OW 87
// Say ( JMM , D3b-JMM-3a ) ;
9766: LD_EXP 9
9770: PPUSH
9771: LD_STRING D3b-JMM-3a
9773: PPUSH
9774: CALL_OW 88
// SetSide ( Kikuchi , 1 ) ;
9778: LD_EXP 18
9782: PPUSH
9783: LD_INT 1
9785: PPUSH
9786: CALL_OW 235
// InGameOff ;
9790: CALL_OW 9
// end ;
9794: END
// every 0 0$1 trigger FilterUnitsInArea ( massDamageArea , [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] ] ) do var un , x , tw , i ;
9795: LD_INT 7
9797: PPUSH
9798: LD_INT 22
9800: PUSH
9801: LD_INT 1
9803: PUSH
9804: EMPTY
9805: LIST
9806: LIST
9807: PUSH
9808: LD_INT 3
9810: PUSH
9811: LD_INT 24
9813: PUSH
9814: LD_INT 1000
9816: PUSH
9817: EMPTY
9818: LIST
9819: LIST
9820: PUSH
9821: EMPTY
9822: LIST
9823: LIST
9824: PUSH
9825: EMPTY
9826: LIST
9827: LIST
9828: PPUSH
9829: CALL_OW 70
9833: IFFALSE 10289
9835: GO 9837
9837: DISABLE
9838: LD_INT 0
9840: PPUSH
9841: PPUSH
9842: PPUSH
9843: PPUSH
// begin repeat wait ( 0 0$1 ) ;
9844: LD_INT 35
9846: PPUSH
9847: CALL_OW 67
// un := FilterUnitsInArea ( massDamageArea , [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
9851: LD_ADDR_VAR 0 1
9855: PUSH
9856: LD_INT 7
9858: PPUSH
9859: LD_INT 22
9861: PUSH
9862: LD_INT 1
9864: PUSH
9865: EMPTY
9866: LIST
9867: LIST
9868: PUSH
9869: LD_INT 3
9871: PUSH
9872: LD_INT 24
9874: PUSH
9875: LD_INT 1000
9877: PUSH
9878: EMPTY
9879: LIST
9880: LIST
9881: PUSH
9882: EMPTY
9883: LIST
9884: LIST
9885: PUSH
9886: EMPTY
9887: LIST
9888: LIST
9889: PPUSH
9890: CALL_OW 70
9894: ST_TO_ADDR
// if not un then
9895: LD_VAR 0 1
9899: NOT
9900: IFFALSE 9904
// continue ;
9902: GO 9844
// tw := NearbyTowerHasEnergy ( un [ 1 ] ) ;
9904: LD_ADDR_VAR 0 3
9908: PUSH
9909: LD_VAR 0 1
9913: PUSH
9914: LD_INT 1
9916: ARRAY
9917: PPUSH
9918: CALL 2053 0 1
9922: ST_TO_ADDR
// until tw ;
9923: LD_VAR 0 3
9927: IFFALSE 9844
// DialogueOn ;
9929: CALL_OW 6
// CenterNowOnUnits ( tw ) ;
9933: LD_VAR 0 3
9937: PPUSH
9938: CALL_OW 87
// if Lisa then
9942: LD_EXP 14
9946: IFFALSE 9974
// begin Say ( Lisa , D5-Lisa-1 ) ;
9948: LD_EXP 14
9952: PPUSH
9953: LD_STRING D5-Lisa-1
9955: PPUSH
9956: CALL_OW 88
// Say ( JMM , D5-JMM-1a ) ;
9960: LD_EXP 9
9964: PPUSH
9965: LD_STRING D5-JMM-1a
9967: PPUSH
9968: CALL_OW 88
// end else
9972: GO 9986
// Say ( JMM , D5-JMM-1 ) ;
9974: LD_EXP 9
9978: PPUSH
9979: LD_STRING D5-JMM-1
9981: PPUSH
9982: CALL_OW 88
// DialogueOff ;
9986: CALL_OW 7
// while ( true ) do
9990: LD_INT 1
9992: IFFALSE 10048
// begin wait ( 0 0$01 ) ;
9994: LD_INT 35
9996: PPUSH
9997: CALL_OW 67
// x := FilterUnitsExceptArea ( northElectro , [ [ f_btype , b_oil_power ] , [ f_see , 1 ] ] ) ;
10001: LD_ADDR_VAR 0 2
10005: PUSH
10006: LD_INT 8
10008: PPUSH
10009: LD_INT 30
10011: PUSH
10012: LD_INT 26
10014: PUSH
10015: EMPTY
10016: LIST
10017: LIST
10018: PUSH
10019: LD_INT 101
10021: PUSH
10022: LD_INT 1
10024: PUSH
10025: EMPTY
10026: LIST
10027: LIST
10028: PUSH
10029: EMPTY
10030: LIST
10031: LIST
10032: PPUSH
10033: CALL_OW 71
10037: ST_TO_ADDR
// if x then
10038: LD_VAR 0 2
10042: IFFALSE 10046
// break ;
10044: GO 10048
// end ;
10046: GO 9990
// CenterOnUnits ( x [ 1 ] ) ;
10048: LD_VAR 0 2
10052: PUSH
10053: LD_INT 1
10055: ARRAY
10056: PPUSH
10057: CALL_OW 85
// if Frank and GetSide ( Frank ) = 1 then
10061: LD_EXP 15
10065: PUSH
10066: LD_EXP 15
10070: PPUSH
10071: CALL_OW 255
10075: PUSH
10076: LD_INT 1
10078: EQUAL
10079: AND
10080: IFFALSE 10096
// Say ( Frank , D5a-Frank-1 ) else
10082: LD_EXP 15
10086: PPUSH
10087: LD_STRING D5a-Frank-1
10089: PPUSH
10090: CALL_OW 88
10094: GO 10150
// if Kikuchi and GetSide ( Kikuchi ) = 1 then
10096: LD_EXP 18
10100: PUSH
10101: LD_EXP 18
10105: PPUSH
10106: CALL_OW 255
10110: PUSH
10111: LD_INT 1
10113: EQUAL
10114: AND
10115: IFFALSE 10131
// Say ( Kikuchi , D5a-Yam-1 ) else
10117: LD_EXP 18
10121: PPUSH
10122: LD_STRING D5a-Yam-1
10124: PPUSH
10125: CALL_OW 88
10129: GO 10150
// Say ( GetRandom ( sex_male ) [ 1 ] , D5a-Sol1-1 ) ;
10131: LD_INT 1
10133: PPUSH
10134: CALL 608 0 1
10138: PUSH
10139: LD_INT 1
10141: ARRAY
10142: PPUSH
10143: LD_STRING D5a-Sol1-1
10145: PPUSH
10146: CALL_OW 88
// Say ( JMM , D5a-JMM-1 ) ;
10150: LD_EXP 9
10154: PPUSH
10155: LD_STRING D5a-JMM-1
10157: PPUSH
10158: CALL_OW 88
// if Cyrus then
10162: LD_EXP 13
10166: IFFALSE 10180
// Say ( Cyrus , D5a-Cyrus-1 ) ;
10168: LD_EXP 13
10172: PPUSH
10173: LD_STRING D5a-Cyrus-1
10175: PPUSH
10176: CALL_OW 88
// x := false ;
10180: LD_ADDR_VAR 0 2
10184: PUSH
10185: LD_INT 0
10187: ST_TO_ADDR
// while ( true ) do
10188: LD_INT 1
10190: IFFALSE 10277
// begin wait ( 0 0$01 ) ;
10192: LD_INT 35
10194: PPUSH
10195: CALL_OW 67
// for i in FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) diff ru_dep_west do
10199: LD_ADDR_VAR 0 4
10203: PUSH
10204: LD_INT 2
10206: PUSH
10207: LD_INT 30
10209: PUSH
10210: LD_INT 0
10212: PUSH
10213: EMPTY
10214: LIST
10215: LIST
10216: PUSH
10217: LD_INT 30
10219: PUSH
10220: LD_INT 1
10222: PUSH
10223: EMPTY
10224: LIST
10225: LIST
10226: PUSH
10227: EMPTY
10228: LIST
10229: LIST
10230: LIST
10231: PPUSH
10232: CALL_OW 69
10236: PUSH
10237: LD_INT 1
10239: DIFF
10240: PUSH
10241: FOR_IN
10242: IFFALSE 10265
// if BaseNeedEnergy ( i ) then
10244: LD_VAR 0 4
10248: PPUSH
10249: CALL 1178 0 1
10253: IFFALSE 10263
// x := true ;
10255: LD_ADDR_VAR 0 2
10259: PUSH
10260: LD_INT 1
10262: ST_TO_ADDR
10263: GO 10241
10265: POP
10266: POP
// if x then
10267: LD_VAR 0 2
10271: IFFALSE 10275
// break ;
10273: GO 10277
// end ;
10275: GO 10188
// Say ( JMM , D5b-JMM-1 ) ;
10277: LD_EXP 9
10281: PPUSH
10282: LD_STRING D5b-JMM-1
10284: PPUSH
10285: CALL_OW 88
// end ;
10289: PPOPN 4
10291: END
// every 0 0$1 trigger time_to_end [ 1 ] < tick or FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) < 10 do
10292: LD_EXP 5
10296: PUSH
10297: LD_INT 1
10299: ARRAY
10300: PUSH
10301: LD_OWVAR 1
10305: LESS
10306: PUSH
10307: LD_INT 22
10309: PUSH
10310: LD_INT 3
10312: PUSH
10313: EMPTY
10314: LIST
10315: LIST
10316: PUSH
10317: LD_INT 21
10319: PUSH
10320: LD_INT 3
10322: PUSH
10323: EMPTY
10324: LIST
10325: LIST
10326: PUSH
10327: EMPTY
10328: LIST
10329: LIST
10330: PPUSH
10331: CALL_OW 69
10335: PUSH
10336: LD_INT 10
10338: LESS
10339: OR
10340: IFFALSE 10540
10342: GO 10344
10344: DISABLE
// begin if not IsDead ( ru_dep_main ) then
10345: LD_INT 16
10347: PPUSH
10348: CALL_OW 301
10352: NOT
10353: IFFALSE 10376
// begin SayRadio ( Harisson , D3b-Har-3 ) ;
10355: LD_EXP 19
10359: PPUSH
10360: LD_STRING D3b-Har-3
10362: PPUSH
10363: CALL_OW 94
// ChangeMissionObjectives ( M2a ) ;
10367: LD_STRING M2a
10369: PPUSH
10370: CALL_OW 337
// end else
10374: GO 10395
// begin SayRadio ( Harisson , D3b-Har-3a ) ;
10376: LD_EXP 19
10380: PPUSH
10381: LD_STRING D3b-Har-3a
10383: PPUSH
10384: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
10388: LD_STRING M2
10390: PPUSH
10391: CALL_OW 337
// end ; can_end := true ;
10395: LD_ADDR_EXP 6
10399: PUSH
10400: LD_INT 1
10402: ST_TO_ADDR
// SetAreaMapShow ( endArea , 1 ) ;
10403: LD_INT 9
10405: PPUSH
10406: LD_INT 1
10408: PPUSH
10409: CALL_OW 424
// Wait ( 0 0$02 ) ;
10413: LD_INT 70
10415: PPUSH
10416: CALL_OW 67
// if Lisa then
10420: LD_EXP 14
10424: IFFALSE 10438
// Say ( Lisa , D3b-Lisa ) ;
10426: LD_EXP 14
10430: PPUSH
10431: LD_STRING D3b-Lisa
10433: PPUSH
10434: CALL_OW 88
// if Bobby then
10438: LD_EXP 12
10442: IFFALSE 10456
// Say ( Bobby , D3b-Bobby-3 ) ;
10444: LD_EXP 12
10448: PPUSH
10449: LD_STRING D3b-Bobby-3
10451: PPUSH
10452: CALL_OW 88
// if Cyrus then
10456: LD_EXP 13
10460: IFFALSE 10474
// Say ( Cyrus , D3b-Cyrus-3 ) ;
10462: LD_EXP 13
10466: PPUSH
10467: LD_STRING D3b-Cyrus-3
10469: PPUSH
10470: CALL_OW 88
// if Frank and GetSide ( Frank ) = 1 then
10474: LD_EXP 15
10478: PUSH
10479: LD_EXP 15
10483: PPUSH
10484: CALL_OW 255
10488: PUSH
10489: LD_INT 1
10491: EQUAL
10492: AND
10493: IFFALSE 10507
// Say ( Frank , D3b-Frank-3 ) ;
10495: LD_EXP 15
10499: PPUSH
10500: LD_STRING D3b-Frank-3
10502: PPUSH
10503: CALL_OW 88
// if Kikuchi and GetSide ( Kikuchi ) = 1 then
10507: LD_EXP 18
10511: PUSH
10512: LD_EXP 18
10516: PPUSH
10517: CALL_OW 255
10521: PUSH
10522: LD_INT 1
10524: EQUAL
10525: AND
10526: IFFALSE 10540
// Say ( Kikuchi , D3b-Yam-4 ) ;
10528: LD_EXP 18
10532: PPUSH
10533: LD_STRING D3b-Yam-4
10535: PPUSH
10536: CALL_OW 88
// end ;
10540: END
// every 0 0$1 trigger time_to_end [ 2 ] < tick do
10541: LD_EXP 5
10545: PUSH
10546: LD_INT 2
10548: ARRAY
10549: PUSH
10550: LD_OWVAR 1
10554: LESS
10555: IFFALSE 10587
10557: GO 10559
10559: DISABLE
// begin SayRadio ( Harisson , D4-Har-1 ) ;
10560: LD_EXP 19
10564: PPUSH
10565: LD_STRING D4-Har-1
10567: PPUSH
10568: CALL_OW 94
// ChangeMissionObjectives ( M3 ) ;
10572: LD_STRING M3
10574: PPUSH
10575: CALL_OW 337
// must_end := true ;
10579: LD_ADDR_EXP 7
10583: PUSH
10584: LD_INT 1
10586: ST_TO_ADDR
// end ;
10587: END
// every 0 0$01 trigger time_to_end [ 3 ] < tick do
10588: LD_EXP 5
10592: PUSH
10593: LD_INT 3
10595: ARRAY
10596: PUSH
10597: LD_OWVAR 1
10601: LESS
10602: IFFALSE 10633
10604: GO 10606
10606: DISABLE
// begin if not IsDead ( ru_dep_main ) then
10607: LD_INT 16
10609: PPUSH
10610: CALL_OW 301
10614: NOT
10615: IFFALSE 10626
// YouLost ( TimeOut1 ) else
10617: LD_STRING TimeOut1
10619: PPUSH
10620: CALL_OW 104
10624: GO 10633
// YouLost ( TimeOut2 ) ;
10626: LD_STRING TimeOut2
10628: PPUSH
10629: CALL_OW 104
// end ;
10633: END
// every 0 0$1 trigger IsInArea ( JMM , endArea ) and can_end do var wait_on , i , tmp , m1 , m2 , m3 ;
10634: LD_EXP 9
10638: PPUSH
10639: LD_INT 9
10641: PPUSH
10642: CALL_OW 308
10646: PUSH
10647: LD_EXP 6
10651: AND
10652: IFFALSE 11733
10654: GO 10656
10656: DISABLE
10657: LD_INT 0
10659: PPUSH
10660: PPUSH
10661: PPUSH
10662: PPUSH
10663: PPUSH
10664: PPUSH
// begin wait_on := false ;
10665: LD_ADDR_VAR 0 1
10669: PUSH
10670: LD_INT 0
10672: ST_TO_ADDR
// if Count ( FilterPeople ( 1 ) ) > Count ( FilterPeopleArea ( 1 , endArea ) ^ FilterDriversArea ( 1 , endArea ) ) then
10673: LD_INT 1
10675: PPUSH
10676: CALL 1255 0 1
10680: PPUSH
10681: CALL 34433 0 1
10685: PUSH
10686: LD_INT 1
10688: PPUSH
10689: LD_INT 9
10691: PPUSH
10692: CALL 1346 0 2
10696: PUSH
10697: LD_INT 1
10699: PPUSH
10700: LD_INT 9
10702: PPUSH
10703: CALL 1393 0 2
10707: ADD
10708: PPUSH
10709: CALL 34433 0 1
10713: GREATER
10714: IFFALSE 10737
// if Query ( Q1 ) = 1 then
10716: LD_STRING Q1
10718: PPUSH
10719: CALL_OW 97
10723: PUSH
10724: LD_INT 1
10726: EQUAL
10727: IFFALSE 10737
// wait_on := true ;
10729: LD_ADDR_VAR 0 1
10733: PUSH
10734: LD_INT 1
10736: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
10737: LD_INT 35
10739: PPUSH
10740: CALL_OW 67
// until Count ( FilterPeople ( 1 ) ) = Count ( FilterPeopleArea ( 1 , endArea ) union FilterDriversArea ( 1 , endArea ) ) ;
10744: LD_INT 1
10746: PPUSH
10747: CALL 1255 0 1
10751: PPUSH
10752: CALL 34433 0 1
10756: PUSH
10757: LD_INT 1
10759: PPUSH
10760: LD_INT 9
10762: PPUSH
10763: CALL 1346 0 2
10767: PUSH
10768: LD_INT 1
10770: PPUSH
10771: LD_INT 9
10773: PPUSH
10774: CALL 1393 0 2
10778: UNION
10779: PPUSH
10780: CALL 34433 0 1
10784: EQUAL
10785: IFFALSE 10737
// DialogueOn ;
10787: CALL_OW 6
// CenterNowOnUnits ( JMM ) ;
10791: LD_EXP 9
10795: PPUSH
10796: CALL_OW 87
// Say ( JMM , D6-JMM-1 ) ;
10800: LD_EXP 9
10804: PPUSH
10805: LD_STRING D6-JMM-1
10807: PPUSH
10808: CALL_OW 88
// SayRadio ( Harisson , D6-Har-1 ) ;
10812: LD_EXP 19
10816: PPUSH
10817: LD_STRING D6-Har-1
10819: PPUSH
10820: CALL_OW 94
// Say ( JMM , D6-JMM-2 ) ;
10824: LD_EXP 9
10828: PPUSH
10829: LD_STRING D6-JMM-2
10831: PPUSH
10832: CALL_OW 88
// SayRadio ( Harisson , D6-Har-2 ) ;
10836: LD_EXP 19
10840: PPUSH
10841: LD_STRING D6-Har-2
10843: PPUSH
10844: CALL_OW 94
// Say ( JMM , D6-JMM-3 ) ;
10848: LD_EXP 9
10852: PPUSH
10853: LD_STRING D6-JMM-3
10855: PPUSH
10856: CALL_OW 88
// SayRadio ( Harisson , D6-Har-3 ) ;
10860: LD_EXP 19
10864: PPUSH
10865: LD_STRING D6-Har-3
10867: PPUSH
10868: CALL_OW 94
// Say ( JMM , D6-JMM-4 ) ;
10872: LD_EXP 9
10876: PPUSH
10877: LD_STRING D6-JMM-4
10879: PPUSH
10880: CALL_OW 88
// SayRadio ( Harisson , D6-Har-4 ) ;
10884: LD_EXP 19
10888: PPUSH
10889: LD_STRING D6-Har-4
10891: PPUSH
10892: CALL_OW 94
// Say ( JMM , D6-JMM-5 ) ;
10896: LD_EXP 9
10900: PPUSH
10901: LD_STRING D6-JMM-5
10903: PPUSH
10904: CALL_OW 88
// DialogueOff ;
10908: CALL_OW 7
// m1 := false ;
10912: LD_ADDR_VAR 0 4
10916: PUSH
10917: LD_INT 0
10919: ST_TO_ADDR
// m2 := false ;
10920: LD_ADDR_VAR 0 5
10924: PUSH
10925: LD_INT 0
10927: ST_TO_ADDR
// m3 := false ;
10928: LD_ADDR_VAR 0 6
10932: PUSH
10933: LD_INT 0
10935: ST_TO_ADDR
// tmp := FilterBuildings ( 3 ) ;
10936: LD_ADDR_VAR 0 3
10940: PUSH
10941: LD_INT 3
10943: PPUSH
10944: CALL 1524 0 1
10948: ST_TO_ADDR
// if tmp >= 35 then
10949: LD_VAR 0 3
10953: PUSH
10954: LD_INT 35
10956: GREATEREQUAL
10957: IFFALSE 10994
// begin AddMedal ( Destroy1 , - 1 ) ;
10959: LD_STRING Destroy1
10961: PPUSH
10962: LD_INT 1
10964: NEG
10965: PPUSH
10966: CALL_OW 101
// AddMedal ( Destroy2 , - 1 ) ;
10970: LD_STRING Destroy2
10972: PPUSH
10973: LD_INT 1
10975: NEG
10976: PPUSH
10977: CALL_OW 101
// AddMedal ( Destroy3 , - 1 ) ;
10981: LD_STRING Destroy3
10983: PPUSH
10984: LD_INT 1
10986: NEG
10987: PPUSH
10988: CALL_OW 101
// end else
10992: GO 11105
// begin AddMedal ( Destroy1 , 1 ) ;
10994: LD_STRING Destroy1
10996: PPUSH
10997: LD_INT 1
10999: PPUSH
11000: CALL_OW 101
// m1 := true ;
11004: LD_ADDR_VAR 0 4
11008: PUSH
11009: LD_INT 1
11011: ST_TO_ADDR
// if tmp >= 25 then
11012: LD_VAR 0 3
11016: PUSH
11017: LD_INT 25
11019: GREATEREQUAL
11020: IFFALSE 11046
// begin AddMedal ( Destroy2 , - 1 ) ;
11022: LD_STRING Destroy2
11024: PPUSH
11025: LD_INT 1
11027: NEG
11028: PPUSH
11029: CALL_OW 101
// AddMedal ( Destroy3 , - 1 ) ;
11033: LD_STRING Destroy3
11035: PPUSH
11036: LD_INT 1
11038: NEG
11039: PPUSH
11040: CALL_OW 101
// end else
11044: GO 11105
// begin AddMedal ( Destroy2 , 1 ) ;
11046: LD_STRING Destroy2
11048: PPUSH
11049: LD_INT 1
11051: PPUSH
11052: CALL_OW 101
// m2 := true ;
11056: LD_ADDR_VAR 0 5
11060: PUSH
11061: LD_INT 1
11063: ST_TO_ADDR
// if tmp >= 15 then
11064: LD_VAR 0 3
11068: PUSH
11069: LD_INT 15
11071: GREATEREQUAL
11072: IFFALSE 11087
// AddMedal ( Destroy3 , - 1 ) else
11074: LD_STRING Destroy3
11076: PPUSH
11077: LD_INT 1
11079: NEG
11080: PPUSH
11081: CALL_OW 101
11085: GO 11105
// begin AddMedal ( Destroy3 , 1 ) ;
11087: LD_STRING Destroy3
11089: PPUSH
11090: LD_INT 1
11092: PPUSH
11093: CALL_OW 101
// m3 := true ;
11097: LD_ADDR_VAR 0 6
11101: PUSH
11102: LD_INT 1
11104: ST_TO_ADDR
// end ; end ; end ; if tick <= 32 32$00 then
11105: LD_OWVAR 1
11109: PUSH
11110: LD_INT 67200
11112: LESSEQUAL
11113: IFFALSE 11122
// SetAchievement ( ACH_ASPEED_7 ) ;
11115: LD_STRING ACH_ASPEED_7
11117: PPUSH
11118: CALL_OW 543
// if m1 and m2 and m3 and Difficulty >= 3 then
11122: LD_VAR 0 4
11126: PUSH
11127: LD_VAR 0 5
11131: AND
11132: PUSH
11133: LD_VAR 0 6
11137: AND
11138: PUSH
11139: LD_OWVAR 67
11143: PUSH
11144: LD_INT 3
11146: GREATEREQUAL
11147: AND
11148: IFFALSE 11160
// SetAchievementEX ( ACH_AMER , 7 ) ;
11150: LD_STRING ACH_AMER
11152: PPUSH
11153: LD_INT 7
11155: PPUSH
11156: CALL_OW 564
// GiveMedals ( MAIN ) ;
11160: LD_STRING MAIN
11162: PPUSH
11163: CALL_OW 102
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] ] ) ;
11167: LD_ADDR_VAR 0 3
11171: PUSH
11172: LD_INT 22
11174: PUSH
11175: LD_INT 1
11177: PUSH
11178: EMPTY
11179: LIST
11180: LIST
11181: PUSH
11182: LD_INT 23
11184: PUSH
11185: LD_INT 1
11187: PUSH
11188: EMPTY
11189: LIST
11190: LIST
11191: PUSH
11192: EMPTY
11193: LIST
11194: LIST
11195: PPUSH
11196: CALL_OW 69
11200: ST_TO_ADDR
// RewardPeople ( tmp ) ;
11201: LD_VAR 0 3
11205: PPUSH
11206: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
11210: LD_EXP 9
11214: PPUSH
11215: LD_EXP 3
11219: PUSH
11220: LD_STRING JMM
11222: STR
11223: PPUSH
11224: CALL_OW 38
// if Brown in tmp then
11228: LD_EXP 10
11232: PUSH
11233: LD_VAR 0 3
11237: IN
11238: IFFALSE 11258
// SaveCharacters ( Brown , mission_prefix & Brown ) ;
11240: LD_EXP 10
11244: PPUSH
11245: LD_EXP 3
11249: PUSH
11250: LD_STRING Brown
11252: STR
11253: PPUSH
11254: CALL_OW 38
// if Donaldson in tmp then
11258: LD_EXP 11
11262: PUSH
11263: LD_VAR 0 3
11267: IN
11268: IFFALSE 11288
// SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
11270: LD_EXP 11
11274: PPUSH
11275: LD_EXP 3
11279: PUSH
11280: LD_STRING Donaldson
11282: STR
11283: PPUSH
11284: CALL_OW 38
// if Bobby in tmp then
11288: LD_EXP 12
11292: PUSH
11293: LD_VAR 0 3
11297: IN
11298: IFFALSE 11318
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
11300: LD_EXP 12
11304: PPUSH
11305: LD_EXP 3
11309: PUSH
11310: LD_STRING Bobby
11312: STR
11313: PPUSH
11314: CALL_OW 38
// if Cyrus in tmp then
11318: LD_EXP 13
11322: PUSH
11323: LD_VAR 0 3
11327: IN
11328: IFFALSE 11348
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
11330: LD_EXP 13
11334: PPUSH
11335: LD_EXP 3
11339: PUSH
11340: LD_STRING Cyrus
11342: STR
11343: PPUSH
11344: CALL_OW 38
// if Lisa in tmp then
11348: LD_EXP 14
11352: PUSH
11353: LD_VAR 0 3
11357: IN
11358: IFFALSE 11378
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
11360: LD_EXP 14
11364: PPUSH
11365: LD_EXP 3
11369: PUSH
11370: LD_STRING Lisa
11372: STR
11373: PPUSH
11374: CALL_OW 38
// if Frank in tmp then
11378: LD_EXP 15
11382: PUSH
11383: LD_VAR 0 3
11387: IN
11388: IFFALSE 11408
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
11390: LD_EXP 15
11394: PPUSH
11395: LD_EXP 3
11399: PUSH
11400: LD_STRING Frank
11402: STR
11403: PPUSH
11404: CALL_OW 38
// if Gladstone in tmp then
11408: LD_EXP 16
11412: PUSH
11413: LD_VAR 0 3
11417: IN
11418: IFFALSE 11438
// SaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
11420: LD_EXP 16
11424: PPUSH
11425: LD_EXP 3
11429: PUSH
11430: LD_STRING Gladstone
11432: STR
11433: PPUSH
11434: CALL_OW 38
// if Khatam in tmp then
11438: LD_EXP 17
11442: PUSH
11443: LD_VAR 0 3
11447: IN
11448: IFFALSE 11468
// SaveCharacters ( Khatam , mission_prefix & Khatam ) ;
11450: LD_EXP 17
11454: PPUSH
11455: LD_EXP 3
11459: PUSH
11460: LD_STRING Khatam
11462: STR
11463: PPUSH
11464: CALL_OW 38
// if Kikuchi in tmp then
11468: LD_EXP 18
11472: PUSH
11473: LD_VAR 0 3
11477: IN
11478: IFFALSE 11498
// SaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
11480: LD_EXP 18
11484: PPUSH
11485: LD_EXP 3
11489: PUSH
11490: LD_STRING Kikuchi
11492: STR
11493: PPUSH
11494: CALL_OW 38
// SaveCharacters ( tmp diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam ] , mission_prefix & others ) ;
11498: LD_VAR 0 3
11502: PUSH
11503: LD_EXP 9
11507: PUSH
11508: LD_EXP 10
11512: PUSH
11513: LD_EXP 11
11517: PUSH
11518: LD_EXP 12
11522: PUSH
11523: LD_EXP 13
11527: PUSH
11528: LD_EXP 14
11532: PUSH
11533: LD_EXP 15
11537: PUSH
11538: LD_EXP 16
11542: PUSH
11543: LD_EXP 18
11547: PUSH
11548: LD_EXP 17
11552: PUSH
11553: EMPTY
11554: LIST
11555: LIST
11556: LIST
11557: LIST
11558: LIST
11559: LIST
11560: LIST
11561: LIST
11562: LIST
11563: LIST
11564: DIFF
11565: PPUSH
11566: LD_EXP 3
11570: PUSH
11571: LD_STRING others
11573: STR
11574: PPUSH
11575: CALL_OW 38
// SaveVariable ( tick , 07_time ) ;
11579: LD_OWVAR 1
11583: PPUSH
11584: LD_STRING 07_time
11586: PPUSH
11587: CALL_OW 39
// tmp := [ ] ;
11591: LD_ADDR_VAR 0 3
11595: PUSH
11596: EMPTY
11597: ST_TO_ADDR
// for i in FilterUnitsInArea ( endArea , [ [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_vehicle ] ] ] ) do
11598: LD_ADDR_VAR 0 2
11602: PUSH
11603: LD_INT 9
11605: PPUSH
11606: LD_INT 22
11608: PUSH
11609: LD_INT 1
11611: PUSH
11612: EMPTY
11613: LIST
11614: LIST
11615: PUSH
11616: LD_INT 23
11618: PUSH
11619: LD_INT 1
11621: PUSH
11622: EMPTY
11623: LIST
11624: LIST
11625: PUSH
11626: LD_INT 21
11628: PUSH
11629: LD_INT 2
11631: PUSH
11632: EMPTY
11633: LIST
11634: LIST
11635: PUSH
11636: EMPTY
11637: LIST
11638: LIST
11639: LIST
11640: PUSH
11641: EMPTY
11642: LIST
11643: PPUSH
11644: CALL_OW 70
11648: PUSH
11649: FOR_IN
11650: IFFALSE 11715
// tmp := Join ( tmp , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ) ;
11652: LD_ADDR_VAR 0 3
11656: PUSH
11657: LD_VAR 0 3
11661: PPUSH
11662: LD_VAR 0 2
11666: PPUSH
11667: CALL_OW 265
11671: PUSH
11672: LD_VAR 0 2
11676: PPUSH
11677: CALL_OW 262
11681: PUSH
11682: LD_VAR 0 2
11686: PPUSH
11687: CALL_OW 263
11691: PUSH
11692: LD_VAR 0 2
11696: PPUSH
11697: CALL_OW 264
11701: PUSH
11702: EMPTY
11703: LIST
11704: LIST
11705: LIST
11706: LIST
11707: PPUSH
11708: CALL 69799 0 2
11712: ST_TO_ADDR
11713: GO 11649
11715: POP
11716: POP
// SaveVariable ( tmp , 07_vehicles ) ;
11717: LD_VAR 0 3
11721: PPUSH
11722: LD_STRING 07_vehicles
11724: PPUSH
11725: CALL_OW 39
// YouWin ;
11729: CALL_OW 103
// end ; end_of_file
11733: PPOPN 6
11735: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
11736: LD_VAR 0 1
11740: PPUSH
11741: CALL 28042 0 1
// if un = JMM then
11745: LD_VAR 0 1
11749: PUSH
11750: LD_EXP 9
11754: EQUAL
11755: IFFALSE 11764
// YouLost ( JMM ) ;
11757: LD_STRING JMM
11759: PPUSH
11760: CALL_OW 104
// if GetType ( un ) = unit_building then
11764: LD_VAR 0 1
11768: PPUSH
11769: CALL_OW 247
11773: PUSH
11774: LD_INT 3
11776: EQUAL
11777: IFFALSE 11793
// buildings_counter := buildings_counter + 1 ;
11779: LD_ADDR_EXP 4
11783: PUSH
11784: LD_EXP 4
11788: PUSH
11789: LD_INT 1
11791: PLUS
11792: ST_TO_ADDR
// if un in FilterUnitsInArea ( baseArea , [ f_or , [ f_btype , b_turret ] , [ f_btype , b_bunker ] ] ) then
11793: LD_VAR 0 1
11797: PUSH
11798: LD_INT 6
11800: PPUSH
11801: LD_INT 2
11803: PUSH
11804: LD_INT 30
11806: PUSH
11807: LD_INT 33
11809: PUSH
11810: EMPTY
11811: LIST
11812: LIST
11813: PUSH
11814: LD_INT 30
11816: PUSH
11817: LD_INT 32
11819: PUSH
11820: EMPTY
11821: LIST
11822: LIST
11823: PUSH
11824: EMPTY
11825: LIST
11826: LIST
11827: LIST
11828: PPUSH
11829: CALL_OW 70
11833: IN
11834: IFFALSE 11893
// ru_rebuild_list := ru_rebuild_list ^ [ GetBType ( un ) , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ;
11836: LD_ADDR_EXP 20
11840: PUSH
11841: LD_EXP 20
11845: PUSH
11846: LD_VAR 0 1
11850: PPUSH
11851: CALL_OW 266
11855: PUSH
11856: LD_VAR 0 1
11860: PPUSH
11861: CALL_OW 250
11865: PUSH
11866: LD_VAR 0 1
11870: PPUSH
11871: CALL_OW 251
11875: PUSH
11876: LD_VAR 0 1
11880: PPUSH
11881: CALL_OW 254
11885: PUSH
11886: EMPTY
11887: LIST
11888: LIST
11889: LIST
11890: LIST
11891: ADD
11892: ST_TO_ADDR
// if un = ru_dep_main then
11893: LD_VAR 0 1
11897: PUSH
11898: LD_INT 16
11900: EQUAL
11901: IFFALSE 11910
// ChangeMissionObjectives ( M1a ) ;
11903: LD_STRING M1a
11905: PPUSH
11906: CALL_OW 337
// if GetType ( un ) = unit_human and GetSide ( un ) = 3 then
11910: LD_VAR 0 1
11914: PPUSH
11915: CALL_OW 247
11919: PUSH
11920: LD_INT 1
11922: EQUAL
11923: PUSH
11924: LD_VAR 0 1
11928: PPUSH
11929: CALL_OW 255
11933: PUSH
11934: LD_INT 3
11936: EQUAL
11937: AND
11938: IFFALSE 11954
// kill_counter := kill_counter + 1 ;
11940: LD_ADDR_EXP 8
11944: PUSH
11945: LD_EXP 8
11949: PUSH
11950: LD_INT 1
11952: PLUS
11953: ST_TO_ADDR
// end ;
11954: PPOPN 1
11956: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
11957: LD_VAR 0 1
11961: PPUSH
11962: LD_VAR 0 2
11966: PPUSH
11967: CALL 28162 0 2
// end ;
11971: PPOPN 2
11973: END
// on UnitGoesToRed ( un ) do begin if GetBType ( un ) = b_bunker and GetTag ( un ) = 7 then
11974: LD_VAR 0 1
11978: PPUSH
11979: CALL_OW 266
11983: PUSH
11984: LD_INT 32
11986: EQUAL
11987: PUSH
11988: LD_VAR 0 1
11992: PPUSH
11993: CALL_OW 110
11997: PUSH
11998: LD_INT 7
12000: EQUAL
12001: AND
12002: IFFALSE 12016
// SetTag ( un , 0 ) ;
12004: LD_VAR 0 1
12008: PPUSH
12009: LD_INT 0
12011: PPUSH
12012: CALL_OW 109
// end ;
12016: PPOPN 1
12018: END
// on BuildingStarted ( b , builder ) do var i ;
12019: LD_INT 0
12021: PPUSH
// begin if GetSide ( b ) = 3 then
12022: LD_VAR 0 1
12026: PPUSH
12027: CALL_OW 255
12031: PUSH
12032: LD_INT 3
12034: EQUAL
12035: IFFALSE 12075
// for i = 1 to 4 do
12037: LD_ADDR_VAR 0 3
12041: PUSH
12042: DOUBLE
12043: LD_INT 1
12045: DEC
12046: ST_TO_ADDR
12047: LD_INT 4
12049: PUSH
12050: FOR_TO
12051: IFFALSE 12073
// ru_rebuild_list := Delete ( ru_rebuild_list , 1 ) ;
12053: LD_ADDR_EXP 20
12057: PUSH
12058: LD_EXP 20
12062: PPUSH
12063: LD_INT 1
12065: PPUSH
12066: CALL_OW 3
12070: ST_TO_ADDR
12071: GO 12050
12073: POP
12074: POP
// end ;
12075: PPOPN 3
12077: END
// on BuildingComplete ( b ) do if GetBType ( b ) in [ b_bunker , b_turret ] then
12078: LD_VAR 0 1
12082: PPUSH
12083: CALL_OW 266
12087: PUSH
12088: LD_INT 32
12090: PUSH
12091: LD_INT 33
12093: PUSH
12094: EMPTY
12095: LIST
12096: LIST
12097: IN
12098: IFFALSE 12112
// ComPlaceWeapon ( b , ru_gatling_gun ) ;
12100: LD_VAR 0 1
12104: PPUSH
12105: LD_INT 43
12107: PPUSH
12108: CALL_OW 148
12112: PPOPN 1
12114: END
// on LeaveBuilding ( b , un ) do begin if b in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) then
12115: LD_VAR 0 1
12119: PUSH
12120: LD_INT 22
12122: PUSH
12123: LD_INT 3
12125: PUSH
12126: EMPTY
12127: LIST
12128: LIST
12129: PUSH
12130: LD_INT 2
12132: PUSH
12133: LD_INT 30
12135: PUSH
12136: LD_INT 31
12138: PUSH
12139: EMPTY
12140: LIST
12141: LIST
12142: PUSH
12143: LD_INT 30
12145: PUSH
12146: LD_INT 32
12148: PUSH
12149: EMPTY
12150: LIST
12151: LIST
12152: PUSH
12153: EMPTY
12154: LIST
12155: LIST
12156: LIST
12157: PUSH
12158: EMPTY
12159: LIST
12160: LIST
12161: PPUSH
12162: CALL_OW 69
12166: IN
12167: IFFALSE 12189
// GoToAnotherTower ( un , b , 134 , 136 ) ;
12169: LD_VAR 0 2
12173: PPUSH
12174: LD_VAR 0 1
12178: PPUSH
12179: LD_INT 134
12181: PPUSH
12182: LD_INT 136
12184: PPUSH
12185: CALL 838 0 4
// end ;
12189: PPOPN 2
12191: END
// on EnterBuilding ( b , un ) do begin if b in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) then
12192: LD_VAR 0 1
12196: PUSH
12197: LD_INT 22
12199: PUSH
12200: LD_INT 3
12202: PUSH
12203: EMPTY
12204: LIST
12205: LIST
12206: PUSH
12207: LD_INT 30
12209: PUSH
12210: LD_INT 32
12212: PUSH
12213: EMPTY
12214: LIST
12215: LIST
12216: PUSH
12217: EMPTY
12218: LIST
12219: LIST
12220: PPUSH
12221: CALL_OW 69
12225: IN
12226: IFFALSE 12240
// SetTag ( b , 0 ) ;
12228: LD_VAR 0 1
12232: PPUSH
12233: LD_INT 0
12235: PPUSH
12236: CALL_OW 109
// end ; end_of_file end_of_file
12240: PPOPN 2
12242: END
// every 0 0$1 do
12243: GO 12245
12245: DISABLE
// begin enable ;
12246: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
12247: LD_STRING updateTimer(
12249: PUSH
12250: LD_OWVAR 1
12254: STR
12255: PUSH
12256: LD_STRING );
12258: STR
12259: PPUSH
12260: CALL_OW 559
// end ;
12264: END
// export function SOS_MapStart ( ) ; begin
12265: LD_INT 0
12267: PPUSH
// if streamModeActive then
12268: LD_EXP 22
12272: IFFALSE 12281
// DefineStreamItems ( true ) ;
12274: LD_INT 1
12276: PPUSH
12277: CALL 14085 0 1
// UpdateLuaVariables ( ) ;
12281: CALL 12298 0 0
// UpdateFactoryWaypoints ( ) ;
12285: CALL 26946 0 0
// UpdateWarehouseGatheringPoints ( ) ;
12289: CALL 27203 0 0
// end ;
12293: LD_VAR 0 1
12297: RET
// export globalGameSaveCounter ; function UpdateLuaVariables ( ) ; begin
12298: LD_INT 0
12300: PPUSH
// if not globalGameSaveCounter then
12301: LD_EXP 21
12305: NOT
12306: IFFALSE 12317
// ToLua ( setGameSaveCounter(0) ) else
12308: LD_STRING setGameSaveCounter(0)
12310: PPUSH
12311: CALL_OW 559
12315: GO 12349
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
12317: LD_ADDR_EXP 21
12321: PUSH
12322: LD_EXP 21
12326: PPUSH
12327: CALL 71160 0 1
12331: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
12332: LD_STRING setGameSaveCounter(
12334: PUSH
12335: LD_EXP 21
12339: STR
12340: PUSH
12341: LD_STRING )
12343: STR
12344: PPUSH
12345: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
12349: LD_STRING setGameDifficulty(
12351: PUSH
12352: LD_OWVAR 67
12356: STR
12357: PUSH
12358: LD_STRING )
12360: STR
12361: PPUSH
12362: CALL_OW 559
// end ;
12366: LD_VAR 0 1
12370: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
12371: LD_INT 0
12373: PPUSH
// if p2 = stream_mode then
12374: LD_VAR 0 2
12378: PUSH
12379: LD_INT 100
12381: EQUAL
12382: IFFALSE 13385
// begin if not StreamModeActive then
12384: LD_EXP 22
12388: NOT
12389: IFFALSE 12399
// StreamModeActive := true ;
12391: LD_ADDR_EXP 22
12395: PUSH
12396: LD_INT 1
12398: ST_TO_ADDR
// if p3 = 0 then
12399: LD_VAR 0 3
12403: PUSH
12404: LD_INT 0
12406: EQUAL
12407: IFFALSE 12413
// InitStreamMode ;
12409: CALL 13621 0 0
// if p3 = 1 then
12413: LD_VAR 0 3
12417: PUSH
12418: LD_INT 1
12420: EQUAL
12421: IFFALSE 12431
// sRocket := true ;
12423: LD_ADDR_EXP 27
12427: PUSH
12428: LD_INT 1
12430: ST_TO_ADDR
// if p3 = 2 then
12431: LD_VAR 0 3
12435: PUSH
12436: LD_INT 2
12438: EQUAL
12439: IFFALSE 12449
// sSpeed := true ;
12441: LD_ADDR_EXP 26
12445: PUSH
12446: LD_INT 1
12448: ST_TO_ADDR
// if p3 = 3 then
12449: LD_VAR 0 3
12453: PUSH
12454: LD_INT 3
12456: EQUAL
12457: IFFALSE 12467
// sEngine := true ;
12459: LD_ADDR_EXP 28
12463: PUSH
12464: LD_INT 1
12466: ST_TO_ADDR
// if p3 = 4 then
12467: LD_VAR 0 3
12471: PUSH
12472: LD_INT 4
12474: EQUAL
12475: IFFALSE 12485
// sSpec := true ;
12477: LD_ADDR_EXP 25
12481: PUSH
12482: LD_INT 1
12484: ST_TO_ADDR
// if p3 = 5 then
12485: LD_VAR 0 3
12489: PUSH
12490: LD_INT 5
12492: EQUAL
12493: IFFALSE 12503
// sLevel := true ;
12495: LD_ADDR_EXP 29
12499: PUSH
12500: LD_INT 1
12502: ST_TO_ADDR
// if p3 = 6 then
12503: LD_VAR 0 3
12507: PUSH
12508: LD_INT 6
12510: EQUAL
12511: IFFALSE 12521
// sArmoury := true ;
12513: LD_ADDR_EXP 30
12517: PUSH
12518: LD_INT 1
12520: ST_TO_ADDR
// if p3 = 7 then
12521: LD_VAR 0 3
12525: PUSH
12526: LD_INT 7
12528: EQUAL
12529: IFFALSE 12539
// sRadar := true ;
12531: LD_ADDR_EXP 31
12535: PUSH
12536: LD_INT 1
12538: ST_TO_ADDR
// if p3 = 8 then
12539: LD_VAR 0 3
12543: PUSH
12544: LD_INT 8
12546: EQUAL
12547: IFFALSE 12557
// sBunker := true ;
12549: LD_ADDR_EXP 32
12553: PUSH
12554: LD_INT 1
12556: ST_TO_ADDR
// if p3 = 9 then
12557: LD_VAR 0 3
12561: PUSH
12562: LD_INT 9
12564: EQUAL
12565: IFFALSE 12575
// sHack := true ;
12567: LD_ADDR_EXP 33
12571: PUSH
12572: LD_INT 1
12574: ST_TO_ADDR
// if p3 = 10 then
12575: LD_VAR 0 3
12579: PUSH
12580: LD_INT 10
12582: EQUAL
12583: IFFALSE 12593
// sFire := true ;
12585: LD_ADDR_EXP 34
12589: PUSH
12590: LD_INT 1
12592: ST_TO_ADDR
// if p3 = 11 then
12593: LD_VAR 0 3
12597: PUSH
12598: LD_INT 11
12600: EQUAL
12601: IFFALSE 12611
// sRefresh := true ;
12603: LD_ADDR_EXP 35
12607: PUSH
12608: LD_INT 1
12610: ST_TO_ADDR
// if p3 = 12 then
12611: LD_VAR 0 3
12615: PUSH
12616: LD_INT 12
12618: EQUAL
12619: IFFALSE 12629
// sExp := true ;
12621: LD_ADDR_EXP 36
12625: PUSH
12626: LD_INT 1
12628: ST_TO_ADDR
// if p3 = 13 then
12629: LD_VAR 0 3
12633: PUSH
12634: LD_INT 13
12636: EQUAL
12637: IFFALSE 12647
// sDepot := true ;
12639: LD_ADDR_EXP 37
12643: PUSH
12644: LD_INT 1
12646: ST_TO_ADDR
// if p3 = 14 then
12647: LD_VAR 0 3
12651: PUSH
12652: LD_INT 14
12654: EQUAL
12655: IFFALSE 12665
// sFlag := true ;
12657: LD_ADDR_EXP 38
12661: PUSH
12662: LD_INT 1
12664: ST_TO_ADDR
// if p3 = 15 then
12665: LD_VAR 0 3
12669: PUSH
12670: LD_INT 15
12672: EQUAL
12673: IFFALSE 12683
// sKamikadze := true ;
12675: LD_ADDR_EXP 46
12679: PUSH
12680: LD_INT 1
12682: ST_TO_ADDR
// if p3 = 16 then
12683: LD_VAR 0 3
12687: PUSH
12688: LD_INT 16
12690: EQUAL
12691: IFFALSE 12701
// sTroll := true ;
12693: LD_ADDR_EXP 47
12697: PUSH
12698: LD_INT 1
12700: ST_TO_ADDR
// if p3 = 17 then
12701: LD_VAR 0 3
12705: PUSH
12706: LD_INT 17
12708: EQUAL
12709: IFFALSE 12719
// sSlow := true ;
12711: LD_ADDR_EXP 48
12715: PUSH
12716: LD_INT 1
12718: ST_TO_ADDR
// if p3 = 18 then
12719: LD_VAR 0 3
12723: PUSH
12724: LD_INT 18
12726: EQUAL
12727: IFFALSE 12737
// sLack := true ;
12729: LD_ADDR_EXP 49
12733: PUSH
12734: LD_INT 1
12736: ST_TO_ADDR
// if p3 = 19 then
12737: LD_VAR 0 3
12741: PUSH
12742: LD_INT 19
12744: EQUAL
12745: IFFALSE 12755
// sTank := true ;
12747: LD_ADDR_EXP 51
12751: PUSH
12752: LD_INT 1
12754: ST_TO_ADDR
// if p3 = 20 then
12755: LD_VAR 0 3
12759: PUSH
12760: LD_INT 20
12762: EQUAL
12763: IFFALSE 12773
// sRemote := true ;
12765: LD_ADDR_EXP 52
12769: PUSH
12770: LD_INT 1
12772: ST_TO_ADDR
// if p3 = 21 then
12773: LD_VAR 0 3
12777: PUSH
12778: LD_INT 21
12780: EQUAL
12781: IFFALSE 12791
// sPowell := true ;
12783: LD_ADDR_EXP 53
12787: PUSH
12788: LD_INT 1
12790: ST_TO_ADDR
// if p3 = 22 then
12791: LD_VAR 0 3
12795: PUSH
12796: LD_INT 22
12798: EQUAL
12799: IFFALSE 12809
// sTeleport := true ;
12801: LD_ADDR_EXP 56
12805: PUSH
12806: LD_INT 1
12808: ST_TO_ADDR
// if p3 = 23 then
12809: LD_VAR 0 3
12813: PUSH
12814: LD_INT 23
12816: EQUAL
12817: IFFALSE 12827
// sOilTower := true ;
12819: LD_ADDR_EXP 58
12823: PUSH
12824: LD_INT 1
12826: ST_TO_ADDR
// if p3 = 24 then
12827: LD_VAR 0 3
12831: PUSH
12832: LD_INT 24
12834: EQUAL
12835: IFFALSE 12845
// sShovel := true ;
12837: LD_ADDR_EXP 59
12841: PUSH
12842: LD_INT 1
12844: ST_TO_ADDR
// if p3 = 25 then
12845: LD_VAR 0 3
12849: PUSH
12850: LD_INT 25
12852: EQUAL
12853: IFFALSE 12863
// sSheik := true ;
12855: LD_ADDR_EXP 60
12859: PUSH
12860: LD_INT 1
12862: ST_TO_ADDR
// if p3 = 26 then
12863: LD_VAR 0 3
12867: PUSH
12868: LD_INT 26
12870: EQUAL
12871: IFFALSE 12881
// sEarthquake := true ;
12873: LD_ADDR_EXP 62
12877: PUSH
12878: LD_INT 1
12880: ST_TO_ADDR
// if p3 = 27 then
12881: LD_VAR 0 3
12885: PUSH
12886: LD_INT 27
12888: EQUAL
12889: IFFALSE 12899
// sAI := true ;
12891: LD_ADDR_EXP 63
12895: PUSH
12896: LD_INT 1
12898: ST_TO_ADDR
// if p3 = 28 then
12899: LD_VAR 0 3
12903: PUSH
12904: LD_INT 28
12906: EQUAL
12907: IFFALSE 12917
// sCargo := true ;
12909: LD_ADDR_EXP 66
12913: PUSH
12914: LD_INT 1
12916: ST_TO_ADDR
// if p3 = 29 then
12917: LD_VAR 0 3
12921: PUSH
12922: LD_INT 29
12924: EQUAL
12925: IFFALSE 12935
// sDLaser := true ;
12927: LD_ADDR_EXP 67
12931: PUSH
12932: LD_INT 1
12934: ST_TO_ADDR
// if p3 = 30 then
12935: LD_VAR 0 3
12939: PUSH
12940: LD_INT 30
12942: EQUAL
12943: IFFALSE 12953
// sExchange := true ;
12945: LD_ADDR_EXP 68
12949: PUSH
12950: LD_INT 1
12952: ST_TO_ADDR
// if p3 = 31 then
12953: LD_VAR 0 3
12957: PUSH
12958: LD_INT 31
12960: EQUAL
12961: IFFALSE 12971
// sFac := true ;
12963: LD_ADDR_EXP 69
12967: PUSH
12968: LD_INT 1
12970: ST_TO_ADDR
// if p3 = 32 then
12971: LD_VAR 0 3
12975: PUSH
12976: LD_INT 32
12978: EQUAL
12979: IFFALSE 12989
// sPower := true ;
12981: LD_ADDR_EXP 70
12985: PUSH
12986: LD_INT 1
12988: ST_TO_ADDR
// if p3 = 33 then
12989: LD_VAR 0 3
12993: PUSH
12994: LD_INT 33
12996: EQUAL
12997: IFFALSE 13007
// sRandom := true ;
12999: LD_ADDR_EXP 71
13003: PUSH
13004: LD_INT 1
13006: ST_TO_ADDR
// if p3 = 34 then
13007: LD_VAR 0 3
13011: PUSH
13012: LD_INT 34
13014: EQUAL
13015: IFFALSE 13025
// sShield := true ;
13017: LD_ADDR_EXP 72
13021: PUSH
13022: LD_INT 1
13024: ST_TO_ADDR
// if p3 = 35 then
13025: LD_VAR 0 3
13029: PUSH
13030: LD_INT 35
13032: EQUAL
13033: IFFALSE 13043
// sTime := true ;
13035: LD_ADDR_EXP 73
13039: PUSH
13040: LD_INT 1
13042: ST_TO_ADDR
// if p3 = 36 then
13043: LD_VAR 0 3
13047: PUSH
13048: LD_INT 36
13050: EQUAL
13051: IFFALSE 13061
// sTools := true ;
13053: LD_ADDR_EXP 74
13057: PUSH
13058: LD_INT 1
13060: ST_TO_ADDR
// if p3 = 101 then
13061: LD_VAR 0 3
13065: PUSH
13066: LD_INT 101
13068: EQUAL
13069: IFFALSE 13079
// sSold := true ;
13071: LD_ADDR_EXP 39
13075: PUSH
13076: LD_INT 1
13078: ST_TO_ADDR
// if p3 = 102 then
13079: LD_VAR 0 3
13083: PUSH
13084: LD_INT 102
13086: EQUAL
13087: IFFALSE 13097
// sDiff := true ;
13089: LD_ADDR_EXP 40
13093: PUSH
13094: LD_INT 1
13096: ST_TO_ADDR
// if p3 = 103 then
13097: LD_VAR 0 3
13101: PUSH
13102: LD_INT 103
13104: EQUAL
13105: IFFALSE 13115
// sFog := true ;
13107: LD_ADDR_EXP 43
13111: PUSH
13112: LD_INT 1
13114: ST_TO_ADDR
// if p3 = 104 then
13115: LD_VAR 0 3
13119: PUSH
13120: LD_INT 104
13122: EQUAL
13123: IFFALSE 13133
// sReset := true ;
13125: LD_ADDR_EXP 44
13129: PUSH
13130: LD_INT 1
13132: ST_TO_ADDR
// if p3 = 105 then
13133: LD_VAR 0 3
13137: PUSH
13138: LD_INT 105
13140: EQUAL
13141: IFFALSE 13151
// sSun := true ;
13143: LD_ADDR_EXP 45
13147: PUSH
13148: LD_INT 1
13150: ST_TO_ADDR
// if p3 = 106 then
13151: LD_VAR 0 3
13155: PUSH
13156: LD_INT 106
13158: EQUAL
13159: IFFALSE 13169
// sTiger := true ;
13161: LD_ADDR_EXP 41
13165: PUSH
13166: LD_INT 1
13168: ST_TO_ADDR
// if p3 = 107 then
13169: LD_VAR 0 3
13173: PUSH
13174: LD_INT 107
13176: EQUAL
13177: IFFALSE 13187
// sBomb := true ;
13179: LD_ADDR_EXP 42
13183: PUSH
13184: LD_INT 1
13186: ST_TO_ADDR
// if p3 = 108 then
13187: LD_VAR 0 3
13191: PUSH
13192: LD_INT 108
13194: EQUAL
13195: IFFALSE 13205
// sWound := true ;
13197: LD_ADDR_EXP 50
13201: PUSH
13202: LD_INT 1
13204: ST_TO_ADDR
// if p3 = 109 then
13205: LD_VAR 0 3
13209: PUSH
13210: LD_INT 109
13212: EQUAL
13213: IFFALSE 13223
// sBetray := true ;
13215: LD_ADDR_EXP 54
13219: PUSH
13220: LD_INT 1
13222: ST_TO_ADDR
// if p3 = 110 then
13223: LD_VAR 0 3
13227: PUSH
13228: LD_INT 110
13230: EQUAL
13231: IFFALSE 13241
// sContamin := true ;
13233: LD_ADDR_EXP 55
13237: PUSH
13238: LD_INT 1
13240: ST_TO_ADDR
// if p3 = 111 then
13241: LD_VAR 0 3
13245: PUSH
13246: LD_INT 111
13248: EQUAL
13249: IFFALSE 13259
// sOil := true ;
13251: LD_ADDR_EXP 57
13255: PUSH
13256: LD_INT 1
13258: ST_TO_ADDR
// if p3 = 112 then
13259: LD_VAR 0 3
13263: PUSH
13264: LD_INT 112
13266: EQUAL
13267: IFFALSE 13277
// sStu := true ;
13269: LD_ADDR_EXP 61
13273: PUSH
13274: LD_INT 1
13276: ST_TO_ADDR
// if p3 = 113 then
13277: LD_VAR 0 3
13281: PUSH
13282: LD_INT 113
13284: EQUAL
13285: IFFALSE 13295
// sBazooka := true ;
13287: LD_ADDR_EXP 64
13291: PUSH
13292: LD_INT 1
13294: ST_TO_ADDR
// if p3 = 114 then
13295: LD_VAR 0 3
13299: PUSH
13300: LD_INT 114
13302: EQUAL
13303: IFFALSE 13313
// sMortar := true ;
13305: LD_ADDR_EXP 65
13309: PUSH
13310: LD_INT 1
13312: ST_TO_ADDR
// if p3 = 115 then
13313: LD_VAR 0 3
13317: PUSH
13318: LD_INT 115
13320: EQUAL
13321: IFFALSE 13331
// sRanger := true ;
13323: LD_ADDR_EXP 75
13327: PUSH
13328: LD_INT 1
13330: ST_TO_ADDR
// if p3 = 116 then
13331: LD_VAR 0 3
13335: PUSH
13336: LD_INT 116
13338: EQUAL
13339: IFFALSE 13349
// sComputer := true ;
13341: LD_ADDR_EXP 76
13345: PUSH
13346: LD_INT 1
13348: ST_TO_ADDR
// if p3 = 117 then
13349: LD_VAR 0 3
13353: PUSH
13354: LD_INT 117
13356: EQUAL
13357: IFFALSE 13367
// s30 := true ;
13359: LD_ADDR_EXP 77
13363: PUSH
13364: LD_INT 1
13366: ST_TO_ADDR
// if p3 = 118 then
13367: LD_VAR 0 3
13371: PUSH
13372: LD_INT 118
13374: EQUAL
13375: IFFALSE 13385
// s60 := true ;
13377: LD_ADDR_EXP 78
13381: PUSH
13382: LD_INT 1
13384: ST_TO_ADDR
// end ; if p2 = hack_mode then
13385: LD_VAR 0 2
13389: PUSH
13390: LD_INT 101
13392: EQUAL
13393: IFFALSE 13521
// begin case p3 of 1 :
13395: LD_VAR 0 3
13399: PUSH
13400: LD_INT 1
13402: DOUBLE
13403: EQUAL
13404: IFTRUE 13408
13406: GO 13415
13408: POP
// hHackUnlimitedResources ; 2 :
13409: CALL 25692 0 0
13413: GO 13521
13415: LD_INT 2
13417: DOUBLE
13418: EQUAL
13419: IFTRUE 13423
13421: GO 13430
13423: POP
// hHackSetLevel10 ; 3 :
13424: CALL 25825 0 0
13428: GO 13521
13430: LD_INT 3
13432: DOUBLE
13433: EQUAL
13434: IFTRUE 13438
13436: GO 13445
13438: POP
// hHackSetLevel10YourUnits ; 4 :
13439: CALL 25910 0 0
13443: GO 13521
13445: LD_INT 4
13447: DOUBLE
13448: EQUAL
13449: IFTRUE 13453
13451: GO 13460
13453: POP
// hHackInvincible ; 5 :
13454: CALL 26358 0 0
13458: GO 13521
13460: LD_INT 5
13462: DOUBLE
13463: EQUAL
13464: IFTRUE 13468
13466: GO 13475
13468: POP
// hHackInvisible ; 6 :
13469: CALL 26469 0 0
13473: GO 13521
13475: LD_INT 6
13477: DOUBLE
13478: EQUAL
13479: IFTRUE 13483
13481: GO 13490
13483: POP
// hHackChangeYourSide ; 7 :
13484: CALL 26526 0 0
13488: GO 13521
13490: LD_INT 7
13492: DOUBLE
13493: EQUAL
13494: IFTRUE 13498
13496: GO 13505
13498: POP
// hHackChangeUnitSide ; 8 :
13499: CALL 26568 0 0
13503: GO 13521
13505: LD_INT 8
13507: DOUBLE
13508: EQUAL
13509: IFTRUE 13513
13511: GO 13520
13513: POP
// hHackFog ; end ;
13514: CALL 26669 0 0
13518: GO 13521
13520: POP
// end ; if p2 = game_save_mode then
13521: LD_VAR 0 2
13525: PUSH
13526: LD_INT 102
13528: EQUAL
13529: IFFALSE 13594
// begin if p3 = 1 then
13531: LD_VAR 0 3
13535: PUSH
13536: LD_INT 1
13538: EQUAL
13539: IFFALSE 13551
// globalGameSaveCounter := p4 ;
13541: LD_ADDR_EXP 21
13545: PUSH
13546: LD_VAR 0 4
13550: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
13551: LD_VAR 0 3
13555: PUSH
13556: LD_INT 2
13558: EQUAL
13559: PUSH
13560: LD_EXP 21
13564: AND
13565: IFFALSE 13584
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
13567: LD_STRING setGameSaveCounter(
13569: PUSH
13570: LD_EXP 21
13574: STR
13575: PUSH
13576: LD_STRING )
13578: STR
13579: PPUSH
13580: CALL_OW 559
// display_strings := globalGameSaveCounter ;
13584: LD_ADDR_OWVAR 47
13588: PUSH
13589: LD_EXP 21
13593: ST_TO_ADDR
// end ; end ;
13594: LD_VAR 0 7
13598: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
13599: GO 13601
13601: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
13602: LD_STRING initStreamRollete();
13604: PPUSH
13605: CALL_OW 559
// InitStreamMode ;
13609: CALL 13621 0 0
// DefineStreamItems ( false ) ;
13613: LD_INT 0
13615: PPUSH
13616: CALL 14085 0 1
// end ;
13620: END
// function InitStreamMode ; begin
13621: LD_INT 0
13623: PPUSH
// streamModeActive := false ;
13624: LD_ADDR_EXP 22
13628: PUSH
13629: LD_INT 0
13631: ST_TO_ADDR
// normalCounter := 36 ;
13632: LD_ADDR_EXP 23
13636: PUSH
13637: LD_INT 36
13639: ST_TO_ADDR
// hardcoreCounter := 18 ;
13640: LD_ADDR_EXP 24
13644: PUSH
13645: LD_INT 18
13647: ST_TO_ADDR
// sRocket := false ;
13648: LD_ADDR_EXP 27
13652: PUSH
13653: LD_INT 0
13655: ST_TO_ADDR
// sSpeed := false ;
13656: LD_ADDR_EXP 26
13660: PUSH
13661: LD_INT 0
13663: ST_TO_ADDR
// sEngine := false ;
13664: LD_ADDR_EXP 28
13668: PUSH
13669: LD_INT 0
13671: ST_TO_ADDR
// sSpec := false ;
13672: LD_ADDR_EXP 25
13676: PUSH
13677: LD_INT 0
13679: ST_TO_ADDR
// sLevel := false ;
13680: LD_ADDR_EXP 29
13684: PUSH
13685: LD_INT 0
13687: ST_TO_ADDR
// sArmoury := false ;
13688: LD_ADDR_EXP 30
13692: PUSH
13693: LD_INT 0
13695: ST_TO_ADDR
// sRadar := false ;
13696: LD_ADDR_EXP 31
13700: PUSH
13701: LD_INT 0
13703: ST_TO_ADDR
// sBunker := false ;
13704: LD_ADDR_EXP 32
13708: PUSH
13709: LD_INT 0
13711: ST_TO_ADDR
// sHack := false ;
13712: LD_ADDR_EXP 33
13716: PUSH
13717: LD_INT 0
13719: ST_TO_ADDR
// sFire := false ;
13720: LD_ADDR_EXP 34
13724: PUSH
13725: LD_INT 0
13727: ST_TO_ADDR
// sRefresh := false ;
13728: LD_ADDR_EXP 35
13732: PUSH
13733: LD_INT 0
13735: ST_TO_ADDR
// sExp := false ;
13736: LD_ADDR_EXP 36
13740: PUSH
13741: LD_INT 0
13743: ST_TO_ADDR
// sDepot := false ;
13744: LD_ADDR_EXP 37
13748: PUSH
13749: LD_INT 0
13751: ST_TO_ADDR
// sFlag := false ;
13752: LD_ADDR_EXP 38
13756: PUSH
13757: LD_INT 0
13759: ST_TO_ADDR
// sKamikadze := false ;
13760: LD_ADDR_EXP 46
13764: PUSH
13765: LD_INT 0
13767: ST_TO_ADDR
// sTroll := false ;
13768: LD_ADDR_EXP 47
13772: PUSH
13773: LD_INT 0
13775: ST_TO_ADDR
// sSlow := false ;
13776: LD_ADDR_EXP 48
13780: PUSH
13781: LD_INT 0
13783: ST_TO_ADDR
// sLack := false ;
13784: LD_ADDR_EXP 49
13788: PUSH
13789: LD_INT 0
13791: ST_TO_ADDR
// sTank := false ;
13792: LD_ADDR_EXP 51
13796: PUSH
13797: LD_INT 0
13799: ST_TO_ADDR
// sRemote := false ;
13800: LD_ADDR_EXP 52
13804: PUSH
13805: LD_INT 0
13807: ST_TO_ADDR
// sPowell := false ;
13808: LD_ADDR_EXP 53
13812: PUSH
13813: LD_INT 0
13815: ST_TO_ADDR
// sTeleport := false ;
13816: LD_ADDR_EXP 56
13820: PUSH
13821: LD_INT 0
13823: ST_TO_ADDR
// sOilTower := false ;
13824: LD_ADDR_EXP 58
13828: PUSH
13829: LD_INT 0
13831: ST_TO_ADDR
// sShovel := false ;
13832: LD_ADDR_EXP 59
13836: PUSH
13837: LD_INT 0
13839: ST_TO_ADDR
// sSheik := false ;
13840: LD_ADDR_EXP 60
13844: PUSH
13845: LD_INT 0
13847: ST_TO_ADDR
// sEarthquake := false ;
13848: LD_ADDR_EXP 62
13852: PUSH
13853: LD_INT 0
13855: ST_TO_ADDR
// sAI := false ;
13856: LD_ADDR_EXP 63
13860: PUSH
13861: LD_INT 0
13863: ST_TO_ADDR
// sCargo := false ;
13864: LD_ADDR_EXP 66
13868: PUSH
13869: LD_INT 0
13871: ST_TO_ADDR
// sDLaser := false ;
13872: LD_ADDR_EXP 67
13876: PUSH
13877: LD_INT 0
13879: ST_TO_ADDR
// sExchange := false ;
13880: LD_ADDR_EXP 68
13884: PUSH
13885: LD_INT 0
13887: ST_TO_ADDR
// sFac := false ;
13888: LD_ADDR_EXP 69
13892: PUSH
13893: LD_INT 0
13895: ST_TO_ADDR
// sPower := false ;
13896: LD_ADDR_EXP 70
13900: PUSH
13901: LD_INT 0
13903: ST_TO_ADDR
// sRandom := false ;
13904: LD_ADDR_EXP 71
13908: PUSH
13909: LD_INT 0
13911: ST_TO_ADDR
// sShield := false ;
13912: LD_ADDR_EXP 72
13916: PUSH
13917: LD_INT 0
13919: ST_TO_ADDR
// sTime := false ;
13920: LD_ADDR_EXP 73
13924: PUSH
13925: LD_INT 0
13927: ST_TO_ADDR
// sTools := false ;
13928: LD_ADDR_EXP 74
13932: PUSH
13933: LD_INT 0
13935: ST_TO_ADDR
// sSold := false ;
13936: LD_ADDR_EXP 39
13940: PUSH
13941: LD_INT 0
13943: ST_TO_ADDR
// sDiff := false ;
13944: LD_ADDR_EXP 40
13948: PUSH
13949: LD_INT 0
13951: ST_TO_ADDR
// sFog := false ;
13952: LD_ADDR_EXP 43
13956: PUSH
13957: LD_INT 0
13959: ST_TO_ADDR
// sReset := false ;
13960: LD_ADDR_EXP 44
13964: PUSH
13965: LD_INT 0
13967: ST_TO_ADDR
// sSun := false ;
13968: LD_ADDR_EXP 45
13972: PUSH
13973: LD_INT 0
13975: ST_TO_ADDR
// sTiger := false ;
13976: LD_ADDR_EXP 41
13980: PUSH
13981: LD_INT 0
13983: ST_TO_ADDR
// sBomb := false ;
13984: LD_ADDR_EXP 42
13988: PUSH
13989: LD_INT 0
13991: ST_TO_ADDR
// sWound := false ;
13992: LD_ADDR_EXP 50
13996: PUSH
13997: LD_INT 0
13999: ST_TO_ADDR
// sBetray := false ;
14000: LD_ADDR_EXP 54
14004: PUSH
14005: LD_INT 0
14007: ST_TO_ADDR
// sContamin := false ;
14008: LD_ADDR_EXP 55
14012: PUSH
14013: LD_INT 0
14015: ST_TO_ADDR
// sOil := false ;
14016: LD_ADDR_EXP 57
14020: PUSH
14021: LD_INT 0
14023: ST_TO_ADDR
// sStu := false ;
14024: LD_ADDR_EXP 61
14028: PUSH
14029: LD_INT 0
14031: ST_TO_ADDR
// sBazooka := false ;
14032: LD_ADDR_EXP 64
14036: PUSH
14037: LD_INT 0
14039: ST_TO_ADDR
// sMortar := false ;
14040: LD_ADDR_EXP 65
14044: PUSH
14045: LD_INT 0
14047: ST_TO_ADDR
// sRanger := false ;
14048: LD_ADDR_EXP 75
14052: PUSH
14053: LD_INT 0
14055: ST_TO_ADDR
// sComputer := false ;
14056: LD_ADDR_EXP 76
14060: PUSH
14061: LD_INT 0
14063: ST_TO_ADDR
// s30 := false ;
14064: LD_ADDR_EXP 77
14068: PUSH
14069: LD_INT 0
14071: ST_TO_ADDR
// s60 := false ;
14072: LD_ADDR_EXP 78
14076: PUSH
14077: LD_INT 0
14079: ST_TO_ADDR
// end ;
14080: LD_VAR 0 1
14084: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
14085: LD_INT 0
14087: PPUSH
14088: PPUSH
14089: PPUSH
14090: PPUSH
14091: PPUSH
14092: PPUSH
14093: PPUSH
// result := [ ] ;
14094: LD_ADDR_VAR 0 2
14098: PUSH
14099: EMPTY
14100: ST_TO_ADDR
// if campaign_id = 1 then
14101: LD_OWVAR 69
14105: PUSH
14106: LD_INT 1
14108: EQUAL
14109: IFFALSE 17275
// begin case mission_number of 1 :
14111: LD_OWVAR 70
14115: PUSH
14116: LD_INT 1
14118: DOUBLE
14119: EQUAL
14120: IFTRUE 14124
14122: GO 14200
14124: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
14125: LD_ADDR_VAR 0 2
14129: PUSH
14130: LD_INT 2
14132: PUSH
14133: LD_INT 4
14135: PUSH
14136: LD_INT 11
14138: PUSH
14139: LD_INT 12
14141: PUSH
14142: LD_INT 15
14144: PUSH
14145: LD_INT 16
14147: PUSH
14148: LD_INT 22
14150: PUSH
14151: LD_INT 23
14153: PUSH
14154: LD_INT 26
14156: PUSH
14157: EMPTY
14158: LIST
14159: LIST
14160: LIST
14161: LIST
14162: LIST
14163: LIST
14164: LIST
14165: LIST
14166: LIST
14167: PUSH
14168: LD_INT 101
14170: PUSH
14171: LD_INT 102
14173: PUSH
14174: LD_INT 106
14176: PUSH
14177: LD_INT 116
14179: PUSH
14180: LD_INT 117
14182: PUSH
14183: LD_INT 118
14185: PUSH
14186: EMPTY
14187: LIST
14188: LIST
14189: LIST
14190: LIST
14191: LIST
14192: LIST
14193: PUSH
14194: EMPTY
14195: LIST
14196: LIST
14197: ST_TO_ADDR
14198: GO 17273
14200: LD_INT 2
14202: DOUBLE
14203: EQUAL
14204: IFTRUE 14208
14206: GO 14292
14208: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
14209: LD_ADDR_VAR 0 2
14213: PUSH
14214: LD_INT 2
14216: PUSH
14217: LD_INT 4
14219: PUSH
14220: LD_INT 11
14222: PUSH
14223: LD_INT 12
14225: PUSH
14226: LD_INT 15
14228: PUSH
14229: LD_INT 16
14231: PUSH
14232: LD_INT 22
14234: PUSH
14235: LD_INT 23
14237: PUSH
14238: LD_INT 26
14240: PUSH
14241: EMPTY
14242: LIST
14243: LIST
14244: LIST
14245: LIST
14246: LIST
14247: LIST
14248: LIST
14249: LIST
14250: LIST
14251: PUSH
14252: LD_INT 101
14254: PUSH
14255: LD_INT 102
14257: PUSH
14258: LD_INT 105
14260: PUSH
14261: LD_INT 106
14263: PUSH
14264: LD_INT 108
14266: PUSH
14267: LD_INT 116
14269: PUSH
14270: LD_INT 117
14272: PUSH
14273: LD_INT 118
14275: PUSH
14276: EMPTY
14277: LIST
14278: LIST
14279: LIST
14280: LIST
14281: LIST
14282: LIST
14283: LIST
14284: LIST
14285: PUSH
14286: EMPTY
14287: LIST
14288: LIST
14289: ST_TO_ADDR
14290: GO 17273
14292: LD_INT 3
14294: DOUBLE
14295: EQUAL
14296: IFTRUE 14300
14298: GO 14388
14300: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
14301: LD_ADDR_VAR 0 2
14305: PUSH
14306: LD_INT 2
14308: PUSH
14309: LD_INT 4
14311: PUSH
14312: LD_INT 5
14314: PUSH
14315: LD_INT 11
14317: PUSH
14318: LD_INT 12
14320: PUSH
14321: LD_INT 15
14323: PUSH
14324: LD_INT 16
14326: PUSH
14327: LD_INT 22
14329: PUSH
14330: LD_INT 26
14332: PUSH
14333: LD_INT 36
14335: PUSH
14336: EMPTY
14337: LIST
14338: LIST
14339: LIST
14340: LIST
14341: LIST
14342: LIST
14343: LIST
14344: LIST
14345: LIST
14346: LIST
14347: PUSH
14348: LD_INT 101
14350: PUSH
14351: LD_INT 102
14353: PUSH
14354: LD_INT 105
14356: PUSH
14357: LD_INT 106
14359: PUSH
14360: LD_INT 108
14362: PUSH
14363: LD_INT 116
14365: PUSH
14366: LD_INT 117
14368: PUSH
14369: LD_INT 118
14371: PUSH
14372: EMPTY
14373: LIST
14374: LIST
14375: LIST
14376: LIST
14377: LIST
14378: LIST
14379: LIST
14380: LIST
14381: PUSH
14382: EMPTY
14383: LIST
14384: LIST
14385: ST_TO_ADDR
14386: GO 17273
14388: LD_INT 4
14390: DOUBLE
14391: EQUAL
14392: IFTRUE 14396
14394: GO 14492
14396: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
14397: LD_ADDR_VAR 0 2
14401: PUSH
14402: LD_INT 2
14404: PUSH
14405: LD_INT 4
14407: PUSH
14408: LD_INT 5
14410: PUSH
14411: LD_INT 8
14413: PUSH
14414: LD_INT 11
14416: PUSH
14417: LD_INT 12
14419: PUSH
14420: LD_INT 15
14422: PUSH
14423: LD_INT 16
14425: PUSH
14426: LD_INT 22
14428: PUSH
14429: LD_INT 23
14431: PUSH
14432: LD_INT 26
14434: PUSH
14435: LD_INT 36
14437: PUSH
14438: EMPTY
14439: LIST
14440: LIST
14441: LIST
14442: LIST
14443: LIST
14444: LIST
14445: LIST
14446: LIST
14447: LIST
14448: LIST
14449: LIST
14450: LIST
14451: PUSH
14452: LD_INT 101
14454: PUSH
14455: LD_INT 102
14457: PUSH
14458: LD_INT 105
14460: PUSH
14461: LD_INT 106
14463: PUSH
14464: LD_INT 108
14466: PUSH
14467: LD_INT 116
14469: PUSH
14470: LD_INT 117
14472: PUSH
14473: LD_INT 118
14475: PUSH
14476: EMPTY
14477: LIST
14478: LIST
14479: LIST
14480: LIST
14481: LIST
14482: LIST
14483: LIST
14484: LIST
14485: PUSH
14486: EMPTY
14487: LIST
14488: LIST
14489: ST_TO_ADDR
14490: GO 17273
14492: LD_INT 5
14494: DOUBLE
14495: EQUAL
14496: IFTRUE 14500
14498: GO 14612
14500: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
14501: LD_ADDR_VAR 0 2
14505: PUSH
14506: LD_INT 2
14508: PUSH
14509: LD_INT 4
14511: PUSH
14512: LD_INT 5
14514: PUSH
14515: LD_INT 6
14517: PUSH
14518: LD_INT 8
14520: PUSH
14521: LD_INT 11
14523: PUSH
14524: LD_INT 12
14526: PUSH
14527: LD_INT 15
14529: PUSH
14530: LD_INT 16
14532: PUSH
14533: LD_INT 22
14535: PUSH
14536: LD_INT 23
14538: PUSH
14539: LD_INT 25
14541: PUSH
14542: LD_INT 26
14544: PUSH
14545: LD_INT 36
14547: PUSH
14548: EMPTY
14549: LIST
14550: LIST
14551: LIST
14552: LIST
14553: LIST
14554: LIST
14555: LIST
14556: LIST
14557: LIST
14558: LIST
14559: LIST
14560: LIST
14561: LIST
14562: LIST
14563: PUSH
14564: LD_INT 101
14566: PUSH
14567: LD_INT 102
14569: PUSH
14570: LD_INT 105
14572: PUSH
14573: LD_INT 106
14575: PUSH
14576: LD_INT 108
14578: PUSH
14579: LD_INT 109
14581: PUSH
14582: LD_INT 112
14584: PUSH
14585: LD_INT 116
14587: PUSH
14588: LD_INT 117
14590: PUSH
14591: LD_INT 118
14593: PUSH
14594: EMPTY
14595: LIST
14596: LIST
14597: LIST
14598: LIST
14599: LIST
14600: LIST
14601: LIST
14602: LIST
14603: LIST
14604: LIST
14605: PUSH
14606: EMPTY
14607: LIST
14608: LIST
14609: ST_TO_ADDR
14610: GO 17273
14612: LD_INT 6
14614: DOUBLE
14615: EQUAL
14616: IFTRUE 14620
14618: GO 14752
14620: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
14621: LD_ADDR_VAR 0 2
14625: PUSH
14626: LD_INT 2
14628: PUSH
14629: LD_INT 4
14631: PUSH
14632: LD_INT 5
14634: PUSH
14635: LD_INT 6
14637: PUSH
14638: LD_INT 8
14640: PUSH
14641: LD_INT 11
14643: PUSH
14644: LD_INT 12
14646: PUSH
14647: LD_INT 15
14649: PUSH
14650: LD_INT 16
14652: PUSH
14653: LD_INT 20
14655: PUSH
14656: LD_INT 21
14658: PUSH
14659: LD_INT 22
14661: PUSH
14662: LD_INT 23
14664: PUSH
14665: LD_INT 25
14667: PUSH
14668: LD_INT 26
14670: PUSH
14671: LD_INT 30
14673: PUSH
14674: LD_INT 31
14676: PUSH
14677: LD_INT 32
14679: PUSH
14680: LD_INT 36
14682: PUSH
14683: EMPTY
14684: LIST
14685: LIST
14686: LIST
14687: LIST
14688: LIST
14689: LIST
14690: LIST
14691: LIST
14692: LIST
14693: LIST
14694: LIST
14695: LIST
14696: LIST
14697: LIST
14698: LIST
14699: LIST
14700: LIST
14701: LIST
14702: LIST
14703: PUSH
14704: LD_INT 101
14706: PUSH
14707: LD_INT 102
14709: PUSH
14710: LD_INT 105
14712: PUSH
14713: LD_INT 106
14715: PUSH
14716: LD_INT 108
14718: PUSH
14719: LD_INT 109
14721: PUSH
14722: LD_INT 112
14724: PUSH
14725: LD_INT 116
14727: PUSH
14728: LD_INT 117
14730: PUSH
14731: LD_INT 118
14733: PUSH
14734: EMPTY
14735: LIST
14736: LIST
14737: LIST
14738: LIST
14739: LIST
14740: LIST
14741: LIST
14742: LIST
14743: LIST
14744: LIST
14745: PUSH
14746: EMPTY
14747: LIST
14748: LIST
14749: ST_TO_ADDR
14750: GO 17273
14752: LD_INT 7
14754: DOUBLE
14755: EQUAL
14756: IFTRUE 14760
14758: GO 14872
14760: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
14761: LD_ADDR_VAR 0 2
14765: PUSH
14766: LD_INT 2
14768: PUSH
14769: LD_INT 4
14771: PUSH
14772: LD_INT 5
14774: PUSH
14775: LD_INT 7
14777: PUSH
14778: LD_INT 11
14780: PUSH
14781: LD_INT 12
14783: PUSH
14784: LD_INT 15
14786: PUSH
14787: LD_INT 16
14789: PUSH
14790: LD_INT 20
14792: PUSH
14793: LD_INT 21
14795: PUSH
14796: LD_INT 22
14798: PUSH
14799: LD_INT 23
14801: PUSH
14802: LD_INT 25
14804: PUSH
14805: LD_INT 26
14807: PUSH
14808: EMPTY
14809: LIST
14810: LIST
14811: LIST
14812: LIST
14813: LIST
14814: LIST
14815: LIST
14816: LIST
14817: LIST
14818: LIST
14819: LIST
14820: LIST
14821: LIST
14822: LIST
14823: PUSH
14824: LD_INT 101
14826: PUSH
14827: LD_INT 102
14829: PUSH
14830: LD_INT 103
14832: PUSH
14833: LD_INT 105
14835: PUSH
14836: LD_INT 106
14838: PUSH
14839: LD_INT 108
14841: PUSH
14842: LD_INT 112
14844: PUSH
14845: LD_INT 116
14847: PUSH
14848: LD_INT 117
14850: PUSH
14851: LD_INT 118
14853: PUSH
14854: EMPTY
14855: LIST
14856: LIST
14857: LIST
14858: LIST
14859: LIST
14860: LIST
14861: LIST
14862: LIST
14863: LIST
14864: LIST
14865: PUSH
14866: EMPTY
14867: LIST
14868: LIST
14869: ST_TO_ADDR
14870: GO 17273
14872: LD_INT 8
14874: DOUBLE
14875: EQUAL
14876: IFTRUE 14880
14878: GO 15020
14880: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
14881: LD_ADDR_VAR 0 2
14885: PUSH
14886: LD_INT 2
14888: PUSH
14889: LD_INT 4
14891: PUSH
14892: LD_INT 5
14894: PUSH
14895: LD_INT 6
14897: PUSH
14898: LD_INT 7
14900: PUSH
14901: LD_INT 8
14903: PUSH
14904: LD_INT 11
14906: PUSH
14907: LD_INT 12
14909: PUSH
14910: LD_INT 15
14912: PUSH
14913: LD_INT 16
14915: PUSH
14916: LD_INT 20
14918: PUSH
14919: LD_INT 21
14921: PUSH
14922: LD_INT 22
14924: PUSH
14925: LD_INT 23
14927: PUSH
14928: LD_INT 25
14930: PUSH
14931: LD_INT 26
14933: PUSH
14934: LD_INT 30
14936: PUSH
14937: LD_INT 31
14939: PUSH
14940: LD_INT 32
14942: PUSH
14943: LD_INT 36
14945: PUSH
14946: EMPTY
14947: LIST
14948: LIST
14949: LIST
14950: LIST
14951: LIST
14952: LIST
14953: LIST
14954: LIST
14955: LIST
14956: LIST
14957: LIST
14958: LIST
14959: LIST
14960: LIST
14961: LIST
14962: LIST
14963: LIST
14964: LIST
14965: LIST
14966: LIST
14967: PUSH
14968: LD_INT 101
14970: PUSH
14971: LD_INT 102
14973: PUSH
14974: LD_INT 103
14976: PUSH
14977: LD_INT 105
14979: PUSH
14980: LD_INT 106
14982: PUSH
14983: LD_INT 108
14985: PUSH
14986: LD_INT 109
14988: PUSH
14989: LD_INT 112
14991: PUSH
14992: LD_INT 116
14994: PUSH
14995: LD_INT 117
14997: PUSH
14998: LD_INT 118
15000: PUSH
15001: EMPTY
15002: LIST
15003: LIST
15004: LIST
15005: LIST
15006: LIST
15007: LIST
15008: LIST
15009: LIST
15010: LIST
15011: LIST
15012: LIST
15013: PUSH
15014: EMPTY
15015: LIST
15016: LIST
15017: ST_TO_ADDR
15018: GO 17273
15020: LD_INT 9
15022: DOUBLE
15023: EQUAL
15024: IFTRUE 15028
15026: GO 15176
15028: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
15029: LD_ADDR_VAR 0 2
15033: PUSH
15034: LD_INT 2
15036: PUSH
15037: LD_INT 4
15039: PUSH
15040: LD_INT 5
15042: PUSH
15043: LD_INT 6
15045: PUSH
15046: LD_INT 7
15048: PUSH
15049: LD_INT 8
15051: PUSH
15052: LD_INT 11
15054: PUSH
15055: LD_INT 12
15057: PUSH
15058: LD_INT 15
15060: PUSH
15061: LD_INT 16
15063: PUSH
15064: LD_INT 20
15066: PUSH
15067: LD_INT 21
15069: PUSH
15070: LD_INT 22
15072: PUSH
15073: LD_INT 23
15075: PUSH
15076: LD_INT 25
15078: PUSH
15079: LD_INT 26
15081: PUSH
15082: LD_INT 28
15084: PUSH
15085: LD_INT 30
15087: PUSH
15088: LD_INT 31
15090: PUSH
15091: LD_INT 32
15093: PUSH
15094: LD_INT 36
15096: PUSH
15097: EMPTY
15098: LIST
15099: LIST
15100: LIST
15101: LIST
15102: LIST
15103: LIST
15104: LIST
15105: LIST
15106: LIST
15107: LIST
15108: LIST
15109: LIST
15110: LIST
15111: LIST
15112: LIST
15113: LIST
15114: LIST
15115: LIST
15116: LIST
15117: LIST
15118: LIST
15119: PUSH
15120: LD_INT 101
15122: PUSH
15123: LD_INT 102
15125: PUSH
15126: LD_INT 103
15128: PUSH
15129: LD_INT 105
15131: PUSH
15132: LD_INT 106
15134: PUSH
15135: LD_INT 108
15137: PUSH
15138: LD_INT 109
15140: PUSH
15141: LD_INT 112
15143: PUSH
15144: LD_INT 114
15146: PUSH
15147: LD_INT 116
15149: PUSH
15150: LD_INT 117
15152: PUSH
15153: LD_INT 118
15155: PUSH
15156: EMPTY
15157: LIST
15158: LIST
15159: LIST
15160: LIST
15161: LIST
15162: LIST
15163: LIST
15164: LIST
15165: LIST
15166: LIST
15167: LIST
15168: LIST
15169: PUSH
15170: EMPTY
15171: LIST
15172: LIST
15173: ST_TO_ADDR
15174: GO 17273
15176: LD_INT 10
15178: DOUBLE
15179: EQUAL
15180: IFTRUE 15184
15182: GO 15380
15184: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
15185: LD_ADDR_VAR 0 2
15189: PUSH
15190: LD_INT 2
15192: PUSH
15193: LD_INT 4
15195: PUSH
15196: LD_INT 5
15198: PUSH
15199: LD_INT 6
15201: PUSH
15202: LD_INT 7
15204: PUSH
15205: LD_INT 8
15207: PUSH
15208: LD_INT 9
15210: PUSH
15211: LD_INT 10
15213: PUSH
15214: LD_INT 11
15216: PUSH
15217: LD_INT 12
15219: PUSH
15220: LD_INT 13
15222: PUSH
15223: LD_INT 14
15225: PUSH
15226: LD_INT 15
15228: PUSH
15229: LD_INT 16
15231: PUSH
15232: LD_INT 17
15234: PUSH
15235: LD_INT 18
15237: PUSH
15238: LD_INT 19
15240: PUSH
15241: LD_INT 20
15243: PUSH
15244: LD_INT 21
15246: PUSH
15247: LD_INT 22
15249: PUSH
15250: LD_INT 23
15252: PUSH
15253: LD_INT 24
15255: PUSH
15256: LD_INT 25
15258: PUSH
15259: LD_INT 26
15261: PUSH
15262: LD_INT 28
15264: PUSH
15265: LD_INT 30
15267: PUSH
15268: LD_INT 31
15270: PUSH
15271: LD_INT 32
15273: PUSH
15274: LD_INT 36
15276: PUSH
15277: EMPTY
15278: LIST
15279: LIST
15280: LIST
15281: LIST
15282: LIST
15283: LIST
15284: LIST
15285: LIST
15286: LIST
15287: LIST
15288: LIST
15289: LIST
15290: LIST
15291: LIST
15292: LIST
15293: LIST
15294: LIST
15295: LIST
15296: LIST
15297: LIST
15298: LIST
15299: LIST
15300: LIST
15301: LIST
15302: LIST
15303: LIST
15304: LIST
15305: LIST
15306: LIST
15307: PUSH
15308: LD_INT 101
15310: PUSH
15311: LD_INT 102
15313: PUSH
15314: LD_INT 103
15316: PUSH
15317: LD_INT 104
15319: PUSH
15320: LD_INT 105
15322: PUSH
15323: LD_INT 106
15325: PUSH
15326: LD_INT 107
15328: PUSH
15329: LD_INT 108
15331: PUSH
15332: LD_INT 109
15334: PUSH
15335: LD_INT 110
15337: PUSH
15338: LD_INT 111
15340: PUSH
15341: LD_INT 112
15343: PUSH
15344: LD_INT 114
15346: PUSH
15347: LD_INT 116
15349: PUSH
15350: LD_INT 117
15352: PUSH
15353: LD_INT 118
15355: PUSH
15356: EMPTY
15357: LIST
15358: LIST
15359: LIST
15360: LIST
15361: LIST
15362: LIST
15363: LIST
15364: LIST
15365: LIST
15366: LIST
15367: LIST
15368: LIST
15369: LIST
15370: LIST
15371: LIST
15372: LIST
15373: PUSH
15374: EMPTY
15375: LIST
15376: LIST
15377: ST_TO_ADDR
15378: GO 17273
15380: LD_INT 11
15382: DOUBLE
15383: EQUAL
15384: IFTRUE 15388
15386: GO 15592
15388: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
15389: LD_ADDR_VAR 0 2
15393: PUSH
15394: LD_INT 2
15396: PUSH
15397: LD_INT 3
15399: PUSH
15400: LD_INT 4
15402: PUSH
15403: LD_INT 5
15405: PUSH
15406: LD_INT 6
15408: PUSH
15409: LD_INT 7
15411: PUSH
15412: LD_INT 8
15414: PUSH
15415: LD_INT 9
15417: PUSH
15418: LD_INT 10
15420: PUSH
15421: LD_INT 11
15423: PUSH
15424: LD_INT 12
15426: PUSH
15427: LD_INT 13
15429: PUSH
15430: LD_INT 14
15432: PUSH
15433: LD_INT 15
15435: PUSH
15436: LD_INT 16
15438: PUSH
15439: LD_INT 17
15441: PUSH
15442: LD_INT 18
15444: PUSH
15445: LD_INT 19
15447: PUSH
15448: LD_INT 20
15450: PUSH
15451: LD_INT 21
15453: PUSH
15454: LD_INT 22
15456: PUSH
15457: LD_INT 23
15459: PUSH
15460: LD_INT 24
15462: PUSH
15463: LD_INT 25
15465: PUSH
15466: LD_INT 26
15468: PUSH
15469: LD_INT 28
15471: PUSH
15472: LD_INT 30
15474: PUSH
15475: LD_INT 31
15477: PUSH
15478: LD_INT 32
15480: PUSH
15481: LD_INT 34
15483: PUSH
15484: LD_INT 36
15486: PUSH
15487: EMPTY
15488: LIST
15489: LIST
15490: LIST
15491: LIST
15492: LIST
15493: LIST
15494: LIST
15495: LIST
15496: LIST
15497: LIST
15498: LIST
15499: LIST
15500: LIST
15501: LIST
15502: LIST
15503: LIST
15504: LIST
15505: LIST
15506: LIST
15507: LIST
15508: LIST
15509: LIST
15510: LIST
15511: LIST
15512: LIST
15513: LIST
15514: LIST
15515: LIST
15516: LIST
15517: LIST
15518: LIST
15519: PUSH
15520: LD_INT 101
15522: PUSH
15523: LD_INT 102
15525: PUSH
15526: LD_INT 103
15528: PUSH
15529: LD_INT 104
15531: PUSH
15532: LD_INT 105
15534: PUSH
15535: LD_INT 106
15537: PUSH
15538: LD_INT 107
15540: PUSH
15541: LD_INT 108
15543: PUSH
15544: LD_INT 109
15546: PUSH
15547: LD_INT 110
15549: PUSH
15550: LD_INT 111
15552: PUSH
15553: LD_INT 112
15555: PUSH
15556: LD_INT 114
15558: PUSH
15559: LD_INT 116
15561: PUSH
15562: LD_INT 117
15564: PUSH
15565: LD_INT 118
15567: PUSH
15568: EMPTY
15569: LIST
15570: LIST
15571: LIST
15572: LIST
15573: LIST
15574: LIST
15575: LIST
15576: LIST
15577: LIST
15578: LIST
15579: LIST
15580: LIST
15581: LIST
15582: LIST
15583: LIST
15584: LIST
15585: PUSH
15586: EMPTY
15587: LIST
15588: LIST
15589: ST_TO_ADDR
15590: GO 17273
15592: LD_INT 12
15594: DOUBLE
15595: EQUAL
15596: IFTRUE 15600
15598: GO 15820
15600: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
15601: LD_ADDR_VAR 0 2
15605: PUSH
15606: LD_INT 1
15608: PUSH
15609: LD_INT 2
15611: PUSH
15612: LD_INT 3
15614: PUSH
15615: LD_INT 4
15617: PUSH
15618: LD_INT 5
15620: PUSH
15621: LD_INT 6
15623: PUSH
15624: LD_INT 7
15626: PUSH
15627: LD_INT 8
15629: PUSH
15630: LD_INT 9
15632: PUSH
15633: LD_INT 10
15635: PUSH
15636: LD_INT 11
15638: PUSH
15639: LD_INT 12
15641: PUSH
15642: LD_INT 13
15644: PUSH
15645: LD_INT 14
15647: PUSH
15648: LD_INT 15
15650: PUSH
15651: LD_INT 16
15653: PUSH
15654: LD_INT 17
15656: PUSH
15657: LD_INT 18
15659: PUSH
15660: LD_INT 19
15662: PUSH
15663: LD_INT 20
15665: PUSH
15666: LD_INT 21
15668: PUSH
15669: LD_INT 22
15671: PUSH
15672: LD_INT 23
15674: PUSH
15675: LD_INT 24
15677: PUSH
15678: LD_INT 25
15680: PUSH
15681: LD_INT 26
15683: PUSH
15684: LD_INT 27
15686: PUSH
15687: LD_INT 28
15689: PUSH
15690: LD_INT 30
15692: PUSH
15693: LD_INT 31
15695: PUSH
15696: LD_INT 32
15698: PUSH
15699: LD_INT 33
15701: PUSH
15702: LD_INT 34
15704: PUSH
15705: LD_INT 36
15707: PUSH
15708: EMPTY
15709: LIST
15710: LIST
15711: LIST
15712: LIST
15713: LIST
15714: LIST
15715: LIST
15716: LIST
15717: LIST
15718: LIST
15719: LIST
15720: LIST
15721: LIST
15722: LIST
15723: LIST
15724: LIST
15725: LIST
15726: LIST
15727: LIST
15728: LIST
15729: LIST
15730: LIST
15731: LIST
15732: LIST
15733: LIST
15734: LIST
15735: LIST
15736: LIST
15737: LIST
15738: LIST
15739: LIST
15740: LIST
15741: LIST
15742: LIST
15743: PUSH
15744: LD_INT 101
15746: PUSH
15747: LD_INT 102
15749: PUSH
15750: LD_INT 103
15752: PUSH
15753: LD_INT 104
15755: PUSH
15756: LD_INT 105
15758: PUSH
15759: LD_INT 106
15761: PUSH
15762: LD_INT 107
15764: PUSH
15765: LD_INT 108
15767: PUSH
15768: LD_INT 109
15770: PUSH
15771: LD_INT 110
15773: PUSH
15774: LD_INT 111
15776: PUSH
15777: LD_INT 112
15779: PUSH
15780: LD_INT 113
15782: PUSH
15783: LD_INT 114
15785: PUSH
15786: LD_INT 116
15788: PUSH
15789: LD_INT 117
15791: PUSH
15792: LD_INT 118
15794: PUSH
15795: EMPTY
15796: LIST
15797: LIST
15798: LIST
15799: LIST
15800: LIST
15801: LIST
15802: LIST
15803: LIST
15804: LIST
15805: LIST
15806: LIST
15807: LIST
15808: LIST
15809: LIST
15810: LIST
15811: LIST
15812: LIST
15813: PUSH
15814: EMPTY
15815: LIST
15816: LIST
15817: ST_TO_ADDR
15818: GO 17273
15820: LD_INT 13
15822: DOUBLE
15823: EQUAL
15824: IFTRUE 15828
15826: GO 16036
15828: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
15829: LD_ADDR_VAR 0 2
15833: PUSH
15834: LD_INT 1
15836: PUSH
15837: LD_INT 2
15839: PUSH
15840: LD_INT 3
15842: PUSH
15843: LD_INT 4
15845: PUSH
15846: LD_INT 5
15848: PUSH
15849: LD_INT 8
15851: PUSH
15852: LD_INT 9
15854: PUSH
15855: LD_INT 10
15857: PUSH
15858: LD_INT 11
15860: PUSH
15861: LD_INT 12
15863: PUSH
15864: LD_INT 14
15866: PUSH
15867: LD_INT 15
15869: PUSH
15870: LD_INT 16
15872: PUSH
15873: LD_INT 17
15875: PUSH
15876: LD_INT 18
15878: PUSH
15879: LD_INT 19
15881: PUSH
15882: LD_INT 20
15884: PUSH
15885: LD_INT 21
15887: PUSH
15888: LD_INT 22
15890: PUSH
15891: LD_INT 23
15893: PUSH
15894: LD_INT 24
15896: PUSH
15897: LD_INT 25
15899: PUSH
15900: LD_INT 26
15902: PUSH
15903: LD_INT 27
15905: PUSH
15906: LD_INT 28
15908: PUSH
15909: LD_INT 30
15911: PUSH
15912: LD_INT 31
15914: PUSH
15915: LD_INT 32
15917: PUSH
15918: LD_INT 33
15920: PUSH
15921: LD_INT 34
15923: PUSH
15924: LD_INT 36
15926: PUSH
15927: EMPTY
15928: LIST
15929: LIST
15930: LIST
15931: LIST
15932: LIST
15933: LIST
15934: LIST
15935: LIST
15936: LIST
15937: LIST
15938: LIST
15939: LIST
15940: LIST
15941: LIST
15942: LIST
15943: LIST
15944: LIST
15945: LIST
15946: LIST
15947: LIST
15948: LIST
15949: LIST
15950: LIST
15951: LIST
15952: LIST
15953: LIST
15954: LIST
15955: LIST
15956: LIST
15957: LIST
15958: LIST
15959: PUSH
15960: LD_INT 101
15962: PUSH
15963: LD_INT 102
15965: PUSH
15966: LD_INT 103
15968: PUSH
15969: LD_INT 104
15971: PUSH
15972: LD_INT 105
15974: PUSH
15975: LD_INT 106
15977: PUSH
15978: LD_INT 107
15980: PUSH
15981: LD_INT 108
15983: PUSH
15984: LD_INT 109
15986: PUSH
15987: LD_INT 110
15989: PUSH
15990: LD_INT 111
15992: PUSH
15993: LD_INT 112
15995: PUSH
15996: LD_INT 113
15998: PUSH
15999: LD_INT 114
16001: PUSH
16002: LD_INT 116
16004: PUSH
16005: LD_INT 117
16007: PUSH
16008: LD_INT 118
16010: PUSH
16011: EMPTY
16012: LIST
16013: LIST
16014: LIST
16015: LIST
16016: LIST
16017: LIST
16018: LIST
16019: LIST
16020: LIST
16021: LIST
16022: LIST
16023: LIST
16024: LIST
16025: LIST
16026: LIST
16027: LIST
16028: LIST
16029: PUSH
16030: EMPTY
16031: LIST
16032: LIST
16033: ST_TO_ADDR
16034: GO 17273
16036: LD_INT 14
16038: DOUBLE
16039: EQUAL
16040: IFTRUE 16044
16042: GO 16268
16044: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
16045: LD_ADDR_VAR 0 2
16049: PUSH
16050: LD_INT 1
16052: PUSH
16053: LD_INT 2
16055: PUSH
16056: LD_INT 3
16058: PUSH
16059: LD_INT 4
16061: PUSH
16062: LD_INT 5
16064: PUSH
16065: LD_INT 6
16067: PUSH
16068: LD_INT 7
16070: PUSH
16071: LD_INT 8
16073: PUSH
16074: LD_INT 9
16076: PUSH
16077: LD_INT 10
16079: PUSH
16080: LD_INT 11
16082: PUSH
16083: LD_INT 12
16085: PUSH
16086: LD_INT 13
16088: PUSH
16089: LD_INT 14
16091: PUSH
16092: LD_INT 15
16094: PUSH
16095: LD_INT 16
16097: PUSH
16098: LD_INT 17
16100: PUSH
16101: LD_INT 18
16103: PUSH
16104: LD_INT 19
16106: PUSH
16107: LD_INT 20
16109: PUSH
16110: LD_INT 21
16112: PUSH
16113: LD_INT 22
16115: PUSH
16116: LD_INT 23
16118: PUSH
16119: LD_INT 24
16121: PUSH
16122: LD_INT 25
16124: PUSH
16125: LD_INT 26
16127: PUSH
16128: LD_INT 27
16130: PUSH
16131: LD_INT 28
16133: PUSH
16134: LD_INT 29
16136: PUSH
16137: LD_INT 30
16139: PUSH
16140: LD_INT 31
16142: PUSH
16143: LD_INT 32
16145: PUSH
16146: LD_INT 33
16148: PUSH
16149: LD_INT 34
16151: PUSH
16152: LD_INT 36
16154: PUSH
16155: EMPTY
16156: LIST
16157: LIST
16158: LIST
16159: LIST
16160: LIST
16161: LIST
16162: LIST
16163: LIST
16164: LIST
16165: LIST
16166: LIST
16167: LIST
16168: LIST
16169: LIST
16170: LIST
16171: LIST
16172: LIST
16173: LIST
16174: LIST
16175: LIST
16176: LIST
16177: LIST
16178: LIST
16179: LIST
16180: LIST
16181: LIST
16182: LIST
16183: LIST
16184: LIST
16185: LIST
16186: LIST
16187: LIST
16188: LIST
16189: LIST
16190: LIST
16191: PUSH
16192: LD_INT 101
16194: PUSH
16195: LD_INT 102
16197: PUSH
16198: LD_INT 103
16200: PUSH
16201: LD_INT 104
16203: PUSH
16204: LD_INT 105
16206: PUSH
16207: LD_INT 106
16209: PUSH
16210: LD_INT 107
16212: PUSH
16213: LD_INT 108
16215: PUSH
16216: LD_INT 109
16218: PUSH
16219: LD_INT 110
16221: PUSH
16222: LD_INT 111
16224: PUSH
16225: LD_INT 112
16227: PUSH
16228: LD_INT 113
16230: PUSH
16231: LD_INT 114
16233: PUSH
16234: LD_INT 116
16236: PUSH
16237: LD_INT 117
16239: PUSH
16240: LD_INT 118
16242: PUSH
16243: EMPTY
16244: LIST
16245: LIST
16246: LIST
16247: LIST
16248: LIST
16249: LIST
16250: LIST
16251: LIST
16252: LIST
16253: LIST
16254: LIST
16255: LIST
16256: LIST
16257: LIST
16258: LIST
16259: LIST
16260: LIST
16261: PUSH
16262: EMPTY
16263: LIST
16264: LIST
16265: ST_TO_ADDR
16266: GO 17273
16268: LD_INT 15
16270: DOUBLE
16271: EQUAL
16272: IFTRUE 16276
16274: GO 16500
16276: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
16277: LD_ADDR_VAR 0 2
16281: PUSH
16282: LD_INT 1
16284: PUSH
16285: LD_INT 2
16287: PUSH
16288: LD_INT 3
16290: PUSH
16291: LD_INT 4
16293: PUSH
16294: LD_INT 5
16296: PUSH
16297: LD_INT 6
16299: PUSH
16300: LD_INT 7
16302: PUSH
16303: LD_INT 8
16305: PUSH
16306: LD_INT 9
16308: PUSH
16309: LD_INT 10
16311: PUSH
16312: LD_INT 11
16314: PUSH
16315: LD_INT 12
16317: PUSH
16318: LD_INT 13
16320: PUSH
16321: LD_INT 14
16323: PUSH
16324: LD_INT 15
16326: PUSH
16327: LD_INT 16
16329: PUSH
16330: LD_INT 17
16332: PUSH
16333: LD_INT 18
16335: PUSH
16336: LD_INT 19
16338: PUSH
16339: LD_INT 20
16341: PUSH
16342: LD_INT 21
16344: PUSH
16345: LD_INT 22
16347: PUSH
16348: LD_INT 23
16350: PUSH
16351: LD_INT 24
16353: PUSH
16354: LD_INT 25
16356: PUSH
16357: LD_INT 26
16359: PUSH
16360: LD_INT 27
16362: PUSH
16363: LD_INT 28
16365: PUSH
16366: LD_INT 29
16368: PUSH
16369: LD_INT 30
16371: PUSH
16372: LD_INT 31
16374: PUSH
16375: LD_INT 32
16377: PUSH
16378: LD_INT 33
16380: PUSH
16381: LD_INT 34
16383: PUSH
16384: LD_INT 36
16386: PUSH
16387: EMPTY
16388: LIST
16389: LIST
16390: LIST
16391: LIST
16392: LIST
16393: LIST
16394: LIST
16395: LIST
16396: LIST
16397: LIST
16398: LIST
16399: LIST
16400: LIST
16401: LIST
16402: LIST
16403: LIST
16404: LIST
16405: LIST
16406: LIST
16407: LIST
16408: LIST
16409: LIST
16410: LIST
16411: LIST
16412: LIST
16413: LIST
16414: LIST
16415: LIST
16416: LIST
16417: LIST
16418: LIST
16419: LIST
16420: LIST
16421: LIST
16422: LIST
16423: PUSH
16424: LD_INT 101
16426: PUSH
16427: LD_INT 102
16429: PUSH
16430: LD_INT 103
16432: PUSH
16433: LD_INT 104
16435: PUSH
16436: LD_INT 105
16438: PUSH
16439: LD_INT 106
16441: PUSH
16442: LD_INT 107
16444: PUSH
16445: LD_INT 108
16447: PUSH
16448: LD_INT 109
16450: PUSH
16451: LD_INT 110
16453: PUSH
16454: LD_INT 111
16456: PUSH
16457: LD_INT 112
16459: PUSH
16460: LD_INT 113
16462: PUSH
16463: LD_INT 114
16465: PUSH
16466: LD_INT 116
16468: PUSH
16469: LD_INT 117
16471: PUSH
16472: LD_INT 118
16474: PUSH
16475: EMPTY
16476: LIST
16477: LIST
16478: LIST
16479: LIST
16480: LIST
16481: LIST
16482: LIST
16483: LIST
16484: LIST
16485: LIST
16486: LIST
16487: LIST
16488: LIST
16489: LIST
16490: LIST
16491: LIST
16492: LIST
16493: PUSH
16494: EMPTY
16495: LIST
16496: LIST
16497: ST_TO_ADDR
16498: GO 17273
16500: LD_INT 16
16502: DOUBLE
16503: EQUAL
16504: IFTRUE 16508
16506: GO 16644
16508: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
16509: LD_ADDR_VAR 0 2
16513: PUSH
16514: LD_INT 2
16516: PUSH
16517: LD_INT 4
16519: PUSH
16520: LD_INT 5
16522: PUSH
16523: LD_INT 7
16525: PUSH
16526: LD_INT 11
16528: PUSH
16529: LD_INT 12
16531: PUSH
16532: LD_INT 15
16534: PUSH
16535: LD_INT 16
16537: PUSH
16538: LD_INT 20
16540: PUSH
16541: LD_INT 21
16543: PUSH
16544: LD_INT 22
16546: PUSH
16547: LD_INT 23
16549: PUSH
16550: LD_INT 25
16552: PUSH
16553: LD_INT 26
16555: PUSH
16556: LD_INT 30
16558: PUSH
16559: LD_INT 31
16561: PUSH
16562: LD_INT 32
16564: PUSH
16565: LD_INT 33
16567: PUSH
16568: LD_INT 34
16570: PUSH
16571: EMPTY
16572: LIST
16573: LIST
16574: LIST
16575: LIST
16576: LIST
16577: LIST
16578: LIST
16579: LIST
16580: LIST
16581: LIST
16582: LIST
16583: LIST
16584: LIST
16585: LIST
16586: LIST
16587: LIST
16588: LIST
16589: LIST
16590: LIST
16591: PUSH
16592: LD_INT 101
16594: PUSH
16595: LD_INT 102
16597: PUSH
16598: LD_INT 103
16600: PUSH
16601: LD_INT 106
16603: PUSH
16604: LD_INT 108
16606: PUSH
16607: LD_INT 112
16609: PUSH
16610: LD_INT 113
16612: PUSH
16613: LD_INT 114
16615: PUSH
16616: LD_INT 116
16618: PUSH
16619: LD_INT 117
16621: PUSH
16622: LD_INT 118
16624: PUSH
16625: EMPTY
16626: LIST
16627: LIST
16628: LIST
16629: LIST
16630: LIST
16631: LIST
16632: LIST
16633: LIST
16634: LIST
16635: LIST
16636: LIST
16637: PUSH
16638: EMPTY
16639: LIST
16640: LIST
16641: ST_TO_ADDR
16642: GO 17273
16644: LD_INT 17
16646: DOUBLE
16647: EQUAL
16648: IFTRUE 16652
16650: GO 16876
16652: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
16653: LD_ADDR_VAR 0 2
16657: PUSH
16658: LD_INT 1
16660: PUSH
16661: LD_INT 2
16663: PUSH
16664: LD_INT 3
16666: PUSH
16667: LD_INT 4
16669: PUSH
16670: LD_INT 5
16672: PUSH
16673: LD_INT 6
16675: PUSH
16676: LD_INT 7
16678: PUSH
16679: LD_INT 8
16681: PUSH
16682: LD_INT 9
16684: PUSH
16685: LD_INT 10
16687: PUSH
16688: LD_INT 11
16690: PUSH
16691: LD_INT 12
16693: PUSH
16694: LD_INT 13
16696: PUSH
16697: LD_INT 14
16699: PUSH
16700: LD_INT 15
16702: PUSH
16703: LD_INT 16
16705: PUSH
16706: LD_INT 17
16708: PUSH
16709: LD_INT 18
16711: PUSH
16712: LD_INT 19
16714: PUSH
16715: LD_INT 20
16717: PUSH
16718: LD_INT 21
16720: PUSH
16721: LD_INT 22
16723: PUSH
16724: LD_INT 23
16726: PUSH
16727: LD_INT 24
16729: PUSH
16730: LD_INT 25
16732: PUSH
16733: LD_INT 26
16735: PUSH
16736: LD_INT 27
16738: PUSH
16739: LD_INT 28
16741: PUSH
16742: LD_INT 29
16744: PUSH
16745: LD_INT 30
16747: PUSH
16748: LD_INT 31
16750: PUSH
16751: LD_INT 32
16753: PUSH
16754: LD_INT 33
16756: PUSH
16757: LD_INT 34
16759: PUSH
16760: LD_INT 36
16762: PUSH
16763: EMPTY
16764: LIST
16765: LIST
16766: LIST
16767: LIST
16768: LIST
16769: LIST
16770: LIST
16771: LIST
16772: LIST
16773: LIST
16774: LIST
16775: LIST
16776: LIST
16777: LIST
16778: LIST
16779: LIST
16780: LIST
16781: LIST
16782: LIST
16783: LIST
16784: LIST
16785: LIST
16786: LIST
16787: LIST
16788: LIST
16789: LIST
16790: LIST
16791: LIST
16792: LIST
16793: LIST
16794: LIST
16795: LIST
16796: LIST
16797: LIST
16798: LIST
16799: PUSH
16800: LD_INT 101
16802: PUSH
16803: LD_INT 102
16805: PUSH
16806: LD_INT 103
16808: PUSH
16809: LD_INT 104
16811: PUSH
16812: LD_INT 105
16814: PUSH
16815: LD_INT 106
16817: PUSH
16818: LD_INT 107
16820: PUSH
16821: LD_INT 108
16823: PUSH
16824: LD_INT 109
16826: PUSH
16827: LD_INT 110
16829: PUSH
16830: LD_INT 111
16832: PUSH
16833: LD_INT 112
16835: PUSH
16836: LD_INT 113
16838: PUSH
16839: LD_INT 114
16841: PUSH
16842: LD_INT 116
16844: PUSH
16845: LD_INT 117
16847: PUSH
16848: LD_INT 118
16850: PUSH
16851: EMPTY
16852: LIST
16853: LIST
16854: LIST
16855: LIST
16856: LIST
16857: LIST
16858: LIST
16859: LIST
16860: LIST
16861: LIST
16862: LIST
16863: LIST
16864: LIST
16865: LIST
16866: LIST
16867: LIST
16868: LIST
16869: PUSH
16870: EMPTY
16871: LIST
16872: LIST
16873: ST_TO_ADDR
16874: GO 17273
16876: LD_INT 18
16878: DOUBLE
16879: EQUAL
16880: IFTRUE 16884
16882: GO 17032
16884: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
16885: LD_ADDR_VAR 0 2
16889: PUSH
16890: LD_INT 2
16892: PUSH
16893: LD_INT 4
16895: PUSH
16896: LD_INT 5
16898: PUSH
16899: LD_INT 7
16901: PUSH
16902: LD_INT 11
16904: PUSH
16905: LD_INT 12
16907: PUSH
16908: LD_INT 15
16910: PUSH
16911: LD_INT 16
16913: PUSH
16914: LD_INT 20
16916: PUSH
16917: LD_INT 21
16919: PUSH
16920: LD_INT 22
16922: PUSH
16923: LD_INT 23
16925: PUSH
16926: LD_INT 25
16928: PUSH
16929: LD_INT 26
16931: PUSH
16932: LD_INT 30
16934: PUSH
16935: LD_INT 31
16937: PUSH
16938: LD_INT 32
16940: PUSH
16941: LD_INT 33
16943: PUSH
16944: LD_INT 34
16946: PUSH
16947: LD_INT 35
16949: PUSH
16950: LD_INT 36
16952: PUSH
16953: EMPTY
16954: LIST
16955: LIST
16956: LIST
16957: LIST
16958: LIST
16959: LIST
16960: LIST
16961: LIST
16962: LIST
16963: LIST
16964: LIST
16965: LIST
16966: LIST
16967: LIST
16968: LIST
16969: LIST
16970: LIST
16971: LIST
16972: LIST
16973: LIST
16974: LIST
16975: PUSH
16976: LD_INT 101
16978: PUSH
16979: LD_INT 102
16981: PUSH
16982: LD_INT 103
16984: PUSH
16985: LD_INT 106
16987: PUSH
16988: LD_INT 108
16990: PUSH
16991: LD_INT 112
16993: PUSH
16994: LD_INT 113
16996: PUSH
16997: LD_INT 114
16999: PUSH
17000: LD_INT 115
17002: PUSH
17003: LD_INT 116
17005: PUSH
17006: LD_INT 117
17008: PUSH
17009: LD_INT 118
17011: PUSH
17012: EMPTY
17013: LIST
17014: LIST
17015: LIST
17016: LIST
17017: LIST
17018: LIST
17019: LIST
17020: LIST
17021: LIST
17022: LIST
17023: LIST
17024: LIST
17025: PUSH
17026: EMPTY
17027: LIST
17028: LIST
17029: ST_TO_ADDR
17030: GO 17273
17032: LD_INT 19
17034: DOUBLE
17035: EQUAL
17036: IFTRUE 17040
17038: GO 17272
17040: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
17041: LD_ADDR_VAR 0 2
17045: PUSH
17046: LD_INT 1
17048: PUSH
17049: LD_INT 2
17051: PUSH
17052: LD_INT 3
17054: PUSH
17055: LD_INT 4
17057: PUSH
17058: LD_INT 5
17060: PUSH
17061: LD_INT 6
17063: PUSH
17064: LD_INT 7
17066: PUSH
17067: LD_INT 8
17069: PUSH
17070: LD_INT 9
17072: PUSH
17073: LD_INT 10
17075: PUSH
17076: LD_INT 11
17078: PUSH
17079: LD_INT 12
17081: PUSH
17082: LD_INT 13
17084: PUSH
17085: LD_INT 14
17087: PUSH
17088: LD_INT 15
17090: PUSH
17091: LD_INT 16
17093: PUSH
17094: LD_INT 17
17096: PUSH
17097: LD_INT 18
17099: PUSH
17100: LD_INT 19
17102: PUSH
17103: LD_INT 20
17105: PUSH
17106: LD_INT 21
17108: PUSH
17109: LD_INT 22
17111: PUSH
17112: LD_INT 23
17114: PUSH
17115: LD_INT 24
17117: PUSH
17118: LD_INT 25
17120: PUSH
17121: LD_INT 26
17123: PUSH
17124: LD_INT 27
17126: PUSH
17127: LD_INT 28
17129: PUSH
17130: LD_INT 29
17132: PUSH
17133: LD_INT 30
17135: PUSH
17136: LD_INT 31
17138: PUSH
17139: LD_INT 32
17141: PUSH
17142: LD_INT 33
17144: PUSH
17145: LD_INT 34
17147: PUSH
17148: LD_INT 35
17150: PUSH
17151: LD_INT 36
17153: PUSH
17154: EMPTY
17155: LIST
17156: LIST
17157: LIST
17158: LIST
17159: LIST
17160: LIST
17161: LIST
17162: LIST
17163: LIST
17164: LIST
17165: LIST
17166: LIST
17167: LIST
17168: LIST
17169: LIST
17170: LIST
17171: LIST
17172: LIST
17173: LIST
17174: LIST
17175: LIST
17176: LIST
17177: LIST
17178: LIST
17179: LIST
17180: LIST
17181: LIST
17182: LIST
17183: LIST
17184: LIST
17185: LIST
17186: LIST
17187: LIST
17188: LIST
17189: LIST
17190: LIST
17191: PUSH
17192: LD_INT 101
17194: PUSH
17195: LD_INT 102
17197: PUSH
17198: LD_INT 103
17200: PUSH
17201: LD_INT 104
17203: PUSH
17204: LD_INT 105
17206: PUSH
17207: LD_INT 106
17209: PUSH
17210: LD_INT 107
17212: PUSH
17213: LD_INT 108
17215: PUSH
17216: LD_INT 109
17218: PUSH
17219: LD_INT 110
17221: PUSH
17222: LD_INT 111
17224: PUSH
17225: LD_INT 112
17227: PUSH
17228: LD_INT 113
17230: PUSH
17231: LD_INT 114
17233: PUSH
17234: LD_INT 115
17236: PUSH
17237: LD_INT 116
17239: PUSH
17240: LD_INT 117
17242: PUSH
17243: LD_INT 118
17245: PUSH
17246: EMPTY
17247: LIST
17248: LIST
17249: LIST
17250: LIST
17251: LIST
17252: LIST
17253: LIST
17254: LIST
17255: LIST
17256: LIST
17257: LIST
17258: LIST
17259: LIST
17260: LIST
17261: LIST
17262: LIST
17263: LIST
17264: LIST
17265: PUSH
17266: EMPTY
17267: LIST
17268: LIST
17269: ST_TO_ADDR
17270: GO 17273
17272: POP
// end else
17273: GO 17504
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
17275: LD_ADDR_VAR 0 2
17279: PUSH
17280: LD_INT 1
17282: PUSH
17283: LD_INT 2
17285: PUSH
17286: LD_INT 3
17288: PUSH
17289: LD_INT 4
17291: PUSH
17292: LD_INT 5
17294: PUSH
17295: LD_INT 6
17297: PUSH
17298: LD_INT 7
17300: PUSH
17301: LD_INT 8
17303: PUSH
17304: LD_INT 9
17306: PUSH
17307: LD_INT 10
17309: PUSH
17310: LD_INT 11
17312: PUSH
17313: LD_INT 12
17315: PUSH
17316: LD_INT 13
17318: PUSH
17319: LD_INT 14
17321: PUSH
17322: LD_INT 15
17324: PUSH
17325: LD_INT 16
17327: PUSH
17328: LD_INT 17
17330: PUSH
17331: LD_INT 18
17333: PUSH
17334: LD_INT 19
17336: PUSH
17337: LD_INT 20
17339: PUSH
17340: LD_INT 21
17342: PUSH
17343: LD_INT 22
17345: PUSH
17346: LD_INT 23
17348: PUSH
17349: LD_INT 24
17351: PUSH
17352: LD_INT 25
17354: PUSH
17355: LD_INT 26
17357: PUSH
17358: LD_INT 27
17360: PUSH
17361: LD_INT 28
17363: PUSH
17364: LD_INT 29
17366: PUSH
17367: LD_INT 30
17369: PUSH
17370: LD_INT 31
17372: PUSH
17373: LD_INT 32
17375: PUSH
17376: LD_INT 33
17378: PUSH
17379: LD_INT 34
17381: PUSH
17382: LD_INT 35
17384: PUSH
17385: LD_INT 36
17387: PUSH
17388: EMPTY
17389: LIST
17390: LIST
17391: LIST
17392: LIST
17393: LIST
17394: LIST
17395: LIST
17396: LIST
17397: LIST
17398: LIST
17399: LIST
17400: LIST
17401: LIST
17402: LIST
17403: LIST
17404: LIST
17405: LIST
17406: LIST
17407: LIST
17408: LIST
17409: LIST
17410: LIST
17411: LIST
17412: LIST
17413: LIST
17414: LIST
17415: LIST
17416: LIST
17417: LIST
17418: LIST
17419: LIST
17420: LIST
17421: LIST
17422: LIST
17423: LIST
17424: LIST
17425: PUSH
17426: LD_INT 101
17428: PUSH
17429: LD_INT 102
17431: PUSH
17432: LD_INT 103
17434: PUSH
17435: LD_INT 104
17437: PUSH
17438: LD_INT 105
17440: PUSH
17441: LD_INT 106
17443: PUSH
17444: LD_INT 107
17446: PUSH
17447: LD_INT 108
17449: PUSH
17450: LD_INT 109
17452: PUSH
17453: LD_INT 110
17455: PUSH
17456: LD_INT 111
17458: PUSH
17459: LD_INT 112
17461: PUSH
17462: LD_INT 113
17464: PUSH
17465: LD_INT 114
17467: PUSH
17468: LD_INT 115
17470: PUSH
17471: LD_INT 116
17473: PUSH
17474: LD_INT 117
17476: PUSH
17477: LD_INT 118
17479: PUSH
17480: EMPTY
17481: LIST
17482: LIST
17483: LIST
17484: LIST
17485: LIST
17486: LIST
17487: LIST
17488: LIST
17489: LIST
17490: LIST
17491: LIST
17492: LIST
17493: LIST
17494: LIST
17495: LIST
17496: LIST
17497: LIST
17498: LIST
17499: PUSH
17500: EMPTY
17501: LIST
17502: LIST
17503: ST_TO_ADDR
// if result then
17504: LD_VAR 0 2
17508: IFFALSE 18294
// begin normal :=  ;
17510: LD_ADDR_VAR 0 5
17514: PUSH
17515: LD_STRING 
17517: ST_TO_ADDR
// hardcore :=  ;
17518: LD_ADDR_VAR 0 6
17522: PUSH
17523: LD_STRING 
17525: ST_TO_ADDR
// active :=  ;
17526: LD_ADDR_VAR 0 7
17530: PUSH
17531: LD_STRING 
17533: ST_TO_ADDR
// for i = 1 to normalCounter do
17534: LD_ADDR_VAR 0 8
17538: PUSH
17539: DOUBLE
17540: LD_INT 1
17542: DEC
17543: ST_TO_ADDR
17544: LD_EXP 23
17548: PUSH
17549: FOR_TO
17550: IFFALSE 17651
// begin tmp := 0 ;
17552: LD_ADDR_VAR 0 3
17556: PUSH
17557: LD_STRING 0
17559: ST_TO_ADDR
// if result [ 1 ] then
17560: LD_VAR 0 2
17564: PUSH
17565: LD_INT 1
17567: ARRAY
17568: IFFALSE 17633
// if result [ 1 ] [ 1 ] = i then
17570: LD_VAR 0 2
17574: PUSH
17575: LD_INT 1
17577: ARRAY
17578: PUSH
17579: LD_INT 1
17581: ARRAY
17582: PUSH
17583: LD_VAR 0 8
17587: EQUAL
17588: IFFALSE 17633
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
17590: LD_ADDR_VAR 0 2
17594: PUSH
17595: LD_VAR 0 2
17599: PPUSH
17600: LD_INT 1
17602: PPUSH
17603: LD_VAR 0 2
17607: PUSH
17608: LD_INT 1
17610: ARRAY
17611: PPUSH
17612: LD_INT 1
17614: PPUSH
17615: CALL_OW 3
17619: PPUSH
17620: CALL_OW 1
17624: ST_TO_ADDR
// tmp := 1 ;
17625: LD_ADDR_VAR 0 3
17629: PUSH
17630: LD_STRING 1
17632: ST_TO_ADDR
// end ; normal := normal & tmp ;
17633: LD_ADDR_VAR 0 5
17637: PUSH
17638: LD_VAR 0 5
17642: PUSH
17643: LD_VAR 0 3
17647: STR
17648: ST_TO_ADDR
// end ;
17649: GO 17549
17651: POP
17652: POP
// for i = 1 to hardcoreCounter do
17653: LD_ADDR_VAR 0 8
17657: PUSH
17658: DOUBLE
17659: LD_INT 1
17661: DEC
17662: ST_TO_ADDR
17663: LD_EXP 24
17667: PUSH
17668: FOR_TO
17669: IFFALSE 17774
// begin tmp := 0 ;
17671: LD_ADDR_VAR 0 3
17675: PUSH
17676: LD_STRING 0
17678: ST_TO_ADDR
// if result [ 2 ] then
17679: LD_VAR 0 2
17683: PUSH
17684: LD_INT 2
17686: ARRAY
17687: IFFALSE 17756
// if result [ 2 ] [ 1 ] = 100 + i then
17689: LD_VAR 0 2
17693: PUSH
17694: LD_INT 2
17696: ARRAY
17697: PUSH
17698: LD_INT 1
17700: ARRAY
17701: PUSH
17702: LD_INT 100
17704: PUSH
17705: LD_VAR 0 8
17709: PLUS
17710: EQUAL
17711: IFFALSE 17756
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
17713: LD_ADDR_VAR 0 2
17717: PUSH
17718: LD_VAR 0 2
17722: PPUSH
17723: LD_INT 2
17725: PPUSH
17726: LD_VAR 0 2
17730: PUSH
17731: LD_INT 2
17733: ARRAY
17734: PPUSH
17735: LD_INT 1
17737: PPUSH
17738: CALL_OW 3
17742: PPUSH
17743: CALL_OW 1
17747: ST_TO_ADDR
// tmp := 1 ;
17748: LD_ADDR_VAR 0 3
17752: PUSH
17753: LD_STRING 1
17755: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
17756: LD_ADDR_VAR 0 6
17760: PUSH
17761: LD_VAR 0 6
17765: PUSH
17766: LD_VAR 0 3
17770: STR
17771: ST_TO_ADDR
// end ;
17772: GO 17668
17774: POP
17775: POP
// if isGameLoad then
17776: LD_VAR 0 1
17780: IFFALSE 18255
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
17782: LD_ADDR_VAR 0 4
17786: PUSH
17787: LD_EXP 27
17791: PUSH
17792: LD_EXP 26
17796: PUSH
17797: LD_EXP 28
17801: PUSH
17802: LD_EXP 25
17806: PUSH
17807: LD_EXP 29
17811: PUSH
17812: LD_EXP 30
17816: PUSH
17817: LD_EXP 31
17821: PUSH
17822: LD_EXP 32
17826: PUSH
17827: LD_EXP 33
17831: PUSH
17832: LD_EXP 34
17836: PUSH
17837: LD_EXP 35
17841: PUSH
17842: LD_EXP 36
17846: PUSH
17847: LD_EXP 37
17851: PUSH
17852: LD_EXP 38
17856: PUSH
17857: LD_EXP 46
17861: PUSH
17862: LD_EXP 47
17866: PUSH
17867: LD_EXP 48
17871: PUSH
17872: LD_EXP 49
17876: PUSH
17877: LD_EXP 51
17881: PUSH
17882: LD_EXP 52
17886: PUSH
17887: LD_EXP 53
17891: PUSH
17892: LD_EXP 56
17896: PUSH
17897: LD_EXP 58
17901: PUSH
17902: LD_EXP 59
17906: PUSH
17907: LD_EXP 60
17911: PUSH
17912: LD_EXP 62
17916: PUSH
17917: LD_EXP 63
17921: PUSH
17922: LD_EXP 66
17926: PUSH
17927: LD_EXP 67
17931: PUSH
17932: LD_EXP 68
17936: PUSH
17937: LD_EXP 69
17941: PUSH
17942: LD_EXP 70
17946: PUSH
17947: LD_EXP 71
17951: PUSH
17952: LD_EXP 72
17956: PUSH
17957: LD_EXP 73
17961: PUSH
17962: LD_EXP 74
17966: PUSH
17967: LD_EXP 39
17971: PUSH
17972: LD_EXP 40
17976: PUSH
17977: LD_EXP 43
17981: PUSH
17982: LD_EXP 44
17986: PUSH
17987: LD_EXP 45
17991: PUSH
17992: LD_EXP 41
17996: PUSH
17997: LD_EXP 42
18001: PUSH
18002: LD_EXP 50
18006: PUSH
18007: LD_EXP 54
18011: PUSH
18012: LD_EXP 55
18016: PUSH
18017: LD_EXP 57
18021: PUSH
18022: LD_EXP 61
18026: PUSH
18027: LD_EXP 64
18031: PUSH
18032: LD_EXP 65
18036: PUSH
18037: LD_EXP 75
18041: PUSH
18042: LD_EXP 76
18046: PUSH
18047: LD_EXP 77
18051: PUSH
18052: LD_EXP 78
18056: PUSH
18057: EMPTY
18058: LIST
18059: LIST
18060: LIST
18061: LIST
18062: LIST
18063: LIST
18064: LIST
18065: LIST
18066: LIST
18067: LIST
18068: LIST
18069: LIST
18070: LIST
18071: LIST
18072: LIST
18073: LIST
18074: LIST
18075: LIST
18076: LIST
18077: LIST
18078: LIST
18079: LIST
18080: LIST
18081: LIST
18082: LIST
18083: LIST
18084: LIST
18085: LIST
18086: LIST
18087: LIST
18088: LIST
18089: LIST
18090: LIST
18091: LIST
18092: LIST
18093: LIST
18094: LIST
18095: LIST
18096: LIST
18097: LIST
18098: LIST
18099: LIST
18100: LIST
18101: LIST
18102: LIST
18103: LIST
18104: LIST
18105: LIST
18106: LIST
18107: LIST
18108: LIST
18109: LIST
18110: LIST
18111: LIST
18112: ST_TO_ADDR
// tmp :=  ;
18113: LD_ADDR_VAR 0 3
18117: PUSH
18118: LD_STRING 
18120: ST_TO_ADDR
// for i = 1 to normalCounter do
18121: LD_ADDR_VAR 0 8
18125: PUSH
18126: DOUBLE
18127: LD_INT 1
18129: DEC
18130: ST_TO_ADDR
18131: LD_EXP 23
18135: PUSH
18136: FOR_TO
18137: IFFALSE 18173
// begin if flags [ i ] then
18139: LD_VAR 0 4
18143: PUSH
18144: LD_VAR 0 8
18148: ARRAY
18149: IFFALSE 18171
// tmp := tmp & i & ; ;
18151: LD_ADDR_VAR 0 3
18155: PUSH
18156: LD_VAR 0 3
18160: PUSH
18161: LD_VAR 0 8
18165: STR
18166: PUSH
18167: LD_STRING ;
18169: STR
18170: ST_TO_ADDR
// end ;
18171: GO 18136
18173: POP
18174: POP
// for i = 1 to hardcoreCounter do
18175: LD_ADDR_VAR 0 8
18179: PUSH
18180: DOUBLE
18181: LD_INT 1
18183: DEC
18184: ST_TO_ADDR
18185: LD_EXP 24
18189: PUSH
18190: FOR_TO
18191: IFFALSE 18237
// begin if flags [ normalCounter + i ] then
18193: LD_VAR 0 4
18197: PUSH
18198: LD_EXP 23
18202: PUSH
18203: LD_VAR 0 8
18207: PLUS
18208: ARRAY
18209: IFFALSE 18235
// tmp := tmp & ( 100 + i ) & ; ;
18211: LD_ADDR_VAR 0 3
18215: PUSH
18216: LD_VAR 0 3
18220: PUSH
18221: LD_INT 100
18223: PUSH
18224: LD_VAR 0 8
18228: PLUS
18229: STR
18230: PUSH
18231: LD_STRING ;
18233: STR
18234: ST_TO_ADDR
// end ;
18235: GO 18190
18237: POP
18238: POP
// if tmp then
18239: LD_VAR 0 3
18243: IFFALSE 18255
// active := tmp ;
18245: LD_ADDR_VAR 0 7
18249: PUSH
18250: LD_VAR 0 3
18254: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
18255: LD_STRING getStreamItemsFromMission("
18257: PUSH
18258: LD_VAR 0 5
18262: STR
18263: PUSH
18264: LD_STRING ","
18266: STR
18267: PUSH
18268: LD_VAR 0 6
18272: STR
18273: PUSH
18274: LD_STRING ","
18276: STR
18277: PUSH
18278: LD_VAR 0 7
18282: STR
18283: PUSH
18284: LD_STRING ")
18286: STR
18287: PPUSH
18288: CALL_OW 559
// end else
18292: GO 18301
// ToLua ( getStreamItemsFromMission("","","") ) ;
18294: LD_STRING getStreamItemsFromMission("","","")
18296: PPUSH
18297: CALL_OW 559
// end ;
18301: LD_VAR 0 2
18305: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
18306: LD_EXP 22
18310: PUSH
18311: LD_EXP 27
18315: AND
18316: IFFALSE 18440
18318: GO 18320
18320: DISABLE
18321: LD_INT 0
18323: PPUSH
18324: PPUSH
// begin enable ;
18325: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
18326: LD_ADDR_VAR 0 2
18330: PUSH
18331: LD_INT 22
18333: PUSH
18334: LD_OWVAR 2
18338: PUSH
18339: EMPTY
18340: LIST
18341: LIST
18342: PUSH
18343: LD_INT 2
18345: PUSH
18346: LD_INT 34
18348: PUSH
18349: LD_INT 7
18351: PUSH
18352: EMPTY
18353: LIST
18354: LIST
18355: PUSH
18356: LD_INT 34
18358: PUSH
18359: LD_INT 45
18361: PUSH
18362: EMPTY
18363: LIST
18364: LIST
18365: PUSH
18366: LD_INT 34
18368: PUSH
18369: LD_INT 28
18371: PUSH
18372: EMPTY
18373: LIST
18374: LIST
18375: PUSH
18376: LD_INT 34
18378: PUSH
18379: LD_INT 47
18381: PUSH
18382: EMPTY
18383: LIST
18384: LIST
18385: PUSH
18386: EMPTY
18387: LIST
18388: LIST
18389: LIST
18390: LIST
18391: LIST
18392: PUSH
18393: EMPTY
18394: LIST
18395: LIST
18396: PPUSH
18397: CALL_OW 69
18401: ST_TO_ADDR
// if not tmp then
18402: LD_VAR 0 2
18406: NOT
18407: IFFALSE 18411
// exit ;
18409: GO 18440
// for i in tmp do
18411: LD_ADDR_VAR 0 1
18415: PUSH
18416: LD_VAR 0 2
18420: PUSH
18421: FOR_IN
18422: IFFALSE 18438
// begin SetLives ( i , 0 ) ;
18424: LD_VAR 0 1
18428: PPUSH
18429: LD_INT 0
18431: PPUSH
18432: CALL_OW 234
// end ;
18436: GO 18421
18438: POP
18439: POP
// end ;
18440: PPOPN 2
18442: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
18443: LD_EXP 22
18447: PUSH
18448: LD_EXP 28
18452: AND
18453: IFFALSE 18537
18455: GO 18457
18457: DISABLE
18458: LD_INT 0
18460: PPUSH
18461: PPUSH
// begin enable ;
18462: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
18463: LD_ADDR_VAR 0 2
18467: PUSH
18468: LD_INT 22
18470: PUSH
18471: LD_OWVAR 2
18475: PUSH
18476: EMPTY
18477: LIST
18478: LIST
18479: PUSH
18480: LD_INT 32
18482: PUSH
18483: LD_INT 3
18485: PUSH
18486: EMPTY
18487: LIST
18488: LIST
18489: PUSH
18490: EMPTY
18491: LIST
18492: LIST
18493: PPUSH
18494: CALL_OW 69
18498: ST_TO_ADDR
// if not tmp then
18499: LD_VAR 0 2
18503: NOT
18504: IFFALSE 18508
// exit ;
18506: GO 18537
// for i in tmp do
18508: LD_ADDR_VAR 0 1
18512: PUSH
18513: LD_VAR 0 2
18517: PUSH
18518: FOR_IN
18519: IFFALSE 18535
// begin SetLives ( i , 0 ) ;
18521: LD_VAR 0 1
18525: PPUSH
18526: LD_INT 0
18528: PPUSH
18529: CALL_OW 234
// end ;
18533: GO 18518
18535: POP
18536: POP
// end ;
18537: PPOPN 2
18539: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
18540: LD_EXP 22
18544: PUSH
18545: LD_EXP 25
18549: AND
18550: IFFALSE 18643
18552: GO 18554
18554: DISABLE
18555: LD_INT 0
18557: PPUSH
// begin enable ;
18558: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
18559: LD_ADDR_VAR 0 1
18563: PUSH
18564: LD_INT 22
18566: PUSH
18567: LD_OWVAR 2
18571: PUSH
18572: EMPTY
18573: LIST
18574: LIST
18575: PUSH
18576: LD_INT 2
18578: PUSH
18579: LD_INT 25
18581: PUSH
18582: LD_INT 5
18584: PUSH
18585: EMPTY
18586: LIST
18587: LIST
18588: PUSH
18589: LD_INT 25
18591: PUSH
18592: LD_INT 9
18594: PUSH
18595: EMPTY
18596: LIST
18597: LIST
18598: PUSH
18599: LD_INT 25
18601: PUSH
18602: LD_INT 8
18604: PUSH
18605: EMPTY
18606: LIST
18607: LIST
18608: PUSH
18609: EMPTY
18610: LIST
18611: LIST
18612: LIST
18613: LIST
18614: PUSH
18615: EMPTY
18616: LIST
18617: LIST
18618: PPUSH
18619: CALL_OW 69
18623: PUSH
18624: FOR_IN
18625: IFFALSE 18641
// begin SetClass ( i , 1 ) ;
18627: LD_VAR 0 1
18631: PPUSH
18632: LD_INT 1
18634: PPUSH
18635: CALL_OW 336
// end ;
18639: GO 18624
18641: POP
18642: POP
// end ;
18643: PPOPN 1
18645: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
18646: LD_EXP 22
18650: PUSH
18651: LD_EXP 26
18655: AND
18656: PUSH
18657: LD_OWVAR 65
18661: PUSH
18662: LD_INT 7
18664: LESS
18665: AND
18666: IFFALSE 18680
18668: GO 18670
18670: DISABLE
// begin enable ;
18671: ENABLE
// game_speed := 7 ;
18672: LD_ADDR_OWVAR 65
18676: PUSH
18677: LD_INT 7
18679: ST_TO_ADDR
// end ;
18680: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
18681: LD_EXP 22
18685: PUSH
18686: LD_EXP 29
18690: AND
18691: IFFALSE 18893
18693: GO 18695
18695: DISABLE
18696: LD_INT 0
18698: PPUSH
18699: PPUSH
18700: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
18701: LD_ADDR_VAR 0 3
18705: PUSH
18706: LD_INT 81
18708: PUSH
18709: LD_OWVAR 2
18713: PUSH
18714: EMPTY
18715: LIST
18716: LIST
18717: PUSH
18718: LD_INT 21
18720: PUSH
18721: LD_INT 1
18723: PUSH
18724: EMPTY
18725: LIST
18726: LIST
18727: PUSH
18728: EMPTY
18729: LIST
18730: LIST
18731: PPUSH
18732: CALL_OW 69
18736: ST_TO_ADDR
// if not tmp then
18737: LD_VAR 0 3
18741: NOT
18742: IFFALSE 18746
// exit ;
18744: GO 18893
// if tmp > 5 then
18746: LD_VAR 0 3
18750: PUSH
18751: LD_INT 5
18753: GREATER
18754: IFFALSE 18766
// k := 5 else
18756: LD_ADDR_VAR 0 2
18760: PUSH
18761: LD_INT 5
18763: ST_TO_ADDR
18764: GO 18776
// k := tmp ;
18766: LD_ADDR_VAR 0 2
18770: PUSH
18771: LD_VAR 0 3
18775: ST_TO_ADDR
// for i := 1 to k do
18776: LD_ADDR_VAR 0 1
18780: PUSH
18781: DOUBLE
18782: LD_INT 1
18784: DEC
18785: ST_TO_ADDR
18786: LD_VAR 0 2
18790: PUSH
18791: FOR_TO
18792: IFFALSE 18891
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
18794: LD_VAR 0 3
18798: PUSH
18799: LD_VAR 0 1
18803: ARRAY
18804: PPUSH
18805: LD_VAR 0 1
18809: PUSH
18810: LD_INT 4
18812: MOD
18813: PUSH
18814: LD_INT 1
18816: PLUS
18817: PPUSH
18818: CALL_OW 259
18822: PUSH
18823: LD_INT 10
18825: LESS
18826: IFFALSE 18889
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
18828: LD_VAR 0 3
18832: PUSH
18833: LD_VAR 0 1
18837: ARRAY
18838: PPUSH
18839: LD_VAR 0 1
18843: PUSH
18844: LD_INT 4
18846: MOD
18847: PUSH
18848: LD_INT 1
18850: PLUS
18851: PPUSH
18852: LD_VAR 0 3
18856: PUSH
18857: LD_VAR 0 1
18861: ARRAY
18862: PPUSH
18863: LD_VAR 0 1
18867: PUSH
18868: LD_INT 4
18870: MOD
18871: PUSH
18872: LD_INT 1
18874: PLUS
18875: PPUSH
18876: CALL_OW 259
18880: PUSH
18881: LD_INT 1
18883: PLUS
18884: PPUSH
18885: CALL_OW 237
18889: GO 18791
18891: POP
18892: POP
// end ;
18893: PPOPN 3
18895: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
18896: LD_EXP 22
18900: PUSH
18901: LD_EXP 30
18905: AND
18906: IFFALSE 18926
18908: GO 18910
18910: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
18911: LD_INT 4
18913: PPUSH
18914: LD_OWVAR 2
18918: PPUSH
18919: LD_INT 0
18921: PPUSH
18922: CALL_OW 324
18926: END
// every 0 0$1 trigger StreamModeActive and sShovel do
18927: LD_EXP 22
18931: PUSH
18932: LD_EXP 59
18936: AND
18937: IFFALSE 18957
18939: GO 18941
18941: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
18942: LD_INT 19
18944: PPUSH
18945: LD_OWVAR 2
18949: PPUSH
18950: LD_INT 0
18952: PPUSH
18953: CALL_OW 324
18957: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
18958: LD_EXP 22
18962: PUSH
18963: LD_EXP 31
18967: AND
18968: IFFALSE 19070
18970: GO 18972
18972: DISABLE
18973: LD_INT 0
18975: PPUSH
18976: PPUSH
// begin enable ;
18977: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
18978: LD_ADDR_VAR 0 2
18982: PUSH
18983: LD_INT 22
18985: PUSH
18986: LD_OWVAR 2
18990: PUSH
18991: EMPTY
18992: LIST
18993: LIST
18994: PUSH
18995: LD_INT 2
18997: PUSH
18998: LD_INT 34
19000: PUSH
19001: LD_INT 11
19003: PUSH
19004: EMPTY
19005: LIST
19006: LIST
19007: PUSH
19008: LD_INT 34
19010: PUSH
19011: LD_INT 30
19013: PUSH
19014: EMPTY
19015: LIST
19016: LIST
19017: PUSH
19018: EMPTY
19019: LIST
19020: LIST
19021: LIST
19022: PUSH
19023: EMPTY
19024: LIST
19025: LIST
19026: PPUSH
19027: CALL_OW 69
19031: ST_TO_ADDR
// if not tmp then
19032: LD_VAR 0 2
19036: NOT
19037: IFFALSE 19041
// exit ;
19039: GO 19070
// for i in tmp do
19041: LD_ADDR_VAR 0 1
19045: PUSH
19046: LD_VAR 0 2
19050: PUSH
19051: FOR_IN
19052: IFFALSE 19068
// begin SetLives ( i , 0 ) ;
19054: LD_VAR 0 1
19058: PPUSH
19059: LD_INT 0
19061: PPUSH
19062: CALL_OW 234
// end ;
19066: GO 19051
19068: POP
19069: POP
// end ;
19070: PPOPN 2
19072: END
// every 0 0$1 trigger StreamModeActive and sBunker do
19073: LD_EXP 22
19077: PUSH
19078: LD_EXP 32
19082: AND
19083: IFFALSE 19103
19085: GO 19087
19087: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
19088: LD_INT 32
19090: PPUSH
19091: LD_OWVAR 2
19095: PPUSH
19096: LD_INT 0
19098: PPUSH
19099: CALL_OW 324
19103: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
19104: LD_EXP 22
19108: PUSH
19109: LD_EXP 33
19113: AND
19114: IFFALSE 19295
19116: GO 19118
19118: DISABLE
19119: LD_INT 0
19121: PPUSH
19122: PPUSH
19123: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
19124: LD_ADDR_VAR 0 2
19128: PUSH
19129: LD_INT 22
19131: PUSH
19132: LD_OWVAR 2
19136: PUSH
19137: EMPTY
19138: LIST
19139: LIST
19140: PUSH
19141: LD_INT 33
19143: PUSH
19144: LD_INT 3
19146: PUSH
19147: EMPTY
19148: LIST
19149: LIST
19150: PUSH
19151: EMPTY
19152: LIST
19153: LIST
19154: PPUSH
19155: CALL_OW 69
19159: ST_TO_ADDR
// if not tmp then
19160: LD_VAR 0 2
19164: NOT
19165: IFFALSE 19169
// exit ;
19167: GO 19295
// side := 0 ;
19169: LD_ADDR_VAR 0 3
19173: PUSH
19174: LD_INT 0
19176: ST_TO_ADDR
// for i := 1 to 8 do
19177: LD_ADDR_VAR 0 1
19181: PUSH
19182: DOUBLE
19183: LD_INT 1
19185: DEC
19186: ST_TO_ADDR
19187: LD_INT 8
19189: PUSH
19190: FOR_TO
19191: IFFALSE 19239
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
19193: LD_OWVAR 2
19197: PUSH
19198: LD_VAR 0 1
19202: NONEQUAL
19203: PUSH
19204: LD_OWVAR 2
19208: PPUSH
19209: LD_VAR 0 1
19213: PPUSH
19214: CALL_OW 81
19218: PUSH
19219: LD_INT 2
19221: EQUAL
19222: AND
19223: IFFALSE 19237
// begin side := i ;
19225: LD_ADDR_VAR 0 3
19229: PUSH
19230: LD_VAR 0 1
19234: ST_TO_ADDR
// break ;
19235: GO 19239
// end ;
19237: GO 19190
19239: POP
19240: POP
// if not side then
19241: LD_VAR 0 3
19245: NOT
19246: IFFALSE 19250
// exit ;
19248: GO 19295
// for i := 1 to tmp do
19250: LD_ADDR_VAR 0 1
19254: PUSH
19255: DOUBLE
19256: LD_INT 1
19258: DEC
19259: ST_TO_ADDR
19260: LD_VAR 0 2
19264: PUSH
19265: FOR_TO
19266: IFFALSE 19293
// if Prob ( 60 ) then
19268: LD_INT 60
19270: PPUSH
19271: CALL_OW 13
19275: IFFALSE 19291
// SetSide ( i , side ) ;
19277: LD_VAR 0 1
19281: PPUSH
19282: LD_VAR 0 3
19286: PPUSH
19287: CALL_OW 235
19291: GO 19265
19293: POP
19294: POP
// end ;
19295: PPOPN 3
19297: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
19298: LD_EXP 22
19302: PUSH
19303: LD_EXP 35
19307: AND
19308: IFFALSE 19427
19310: GO 19312
19312: DISABLE
19313: LD_INT 0
19315: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
19316: LD_ADDR_VAR 0 1
19320: PUSH
19321: LD_INT 22
19323: PUSH
19324: LD_OWVAR 2
19328: PUSH
19329: EMPTY
19330: LIST
19331: LIST
19332: PUSH
19333: LD_INT 21
19335: PUSH
19336: LD_INT 1
19338: PUSH
19339: EMPTY
19340: LIST
19341: LIST
19342: PUSH
19343: LD_INT 3
19345: PUSH
19346: LD_INT 23
19348: PUSH
19349: LD_INT 0
19351: PUSH
19352: EMPTY
19353: LIST
19354: LIST
19355: PUSH
19356: EMPTY
19357: LIST
19358: LIST
19359: PUSH
19360: EMPTY
19361: LIST
19362: LIST
19363: LIST
19364: PPUSH
19365: CALL_OW 69
19369: PUSH
19370: FOR_IN
19371: IFFALSE 19425
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
19373: LD_VAR 0 1
19377: PPUSH
19378: CALL_OW 257
19382: PUSH
19383: LD_INT 1
19385: PUSH
19386: LD_INT 2
19388: PUSH
19389: LD_INT 3
19391: PUSH
19392: LD_INT 4
19394: PUSH
19395: EMPTY
19396: LIST
19397: LIST
19398: LIST
19399: LIST
19400: IN
19401: IFFALSE 19423
// SetClass ( un , rand ( 1 , 4 ) ) ;
19403: LD_VAR 0 1
19407: PPUSH
19408: LD_INT 1
19410: PPUSH
19411: LD_INT 4
19413: PPUSH
19414: CALL_OW 12
19418: PPUSH
19419: CALL_OW 336
19423: GO 19370
19425: POP
19426: POP
// end ;
19427: PPOPN 1
19429: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
19430: LD_EXP 22
19434: PUSH
19435: LD_EXP 34
19439: AND
19440: IFFALSE 19519
19442: GO 19444
19444: DISABLE
19445: LD_INT 0
19447: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
19448: LD_ADDR_VAR 0 1
19452: PUSH
19453: LD_INT 22
19455: PUSH
19456: LD_OWVAR 2
19460: PUSH
19461: EMPTY
19462: LIST
19463: LIST
19464: PUSH
19465: LD_INT 21
19467: PUSH
19468: LD_INT 3
19470: PUSH
19471: EMPTY
19472: LIST
19473: LIST
19474: PUSH
19475: EMPTY
19476: LIST
19477: LIST
19478: PPUSH
19479: CALL_OW 69
19483: ST_TO_ADDR
// if not tmp then
19484: LD_VAR 0 1
19488: NOT
19489: IFFALSE 19493
// exit ;
19491: GO 19519
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
19493: LD_VAR 0 1
19497: PUSH
19498: LD_INT 1
19500: PPUSH
19501: LD_VAR 0 1
19505: PPUSH
19506: CALL_OW 12
19510: ARRAY
19511: PPUSH
19512: LD_INT 100
19514: PPUSH
19515: CALL_OW 234
// end ;
19519: PPOPN 1
19521: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
19522: LD_EXP 22
19526: PUSH
19527: LD_EXP 36
19531: AND
19532: IFFALSE 19630
19534: GO 19536
19536: DISABLE
19537: LD_INT 0
19539: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19540: LD_ADDR_VAR 0 1
19544: PUSH
19545: LD_INT 22
19547: PUSH
19548: LD_OWVAR 2
19552: PUSH
19553: EMPTY
19554: LIST
19555: LIST
19556: PUSH
19557: LD_INT 21
19559: PUSH
19560: LD_INT 1
19562: PUSH
19563: EMPTY
19564: LIST
19565: LIST
19566: PUSH
19567: EMPTY
19568: LIST
19569: LIST
19570: PPUSH
19571: CALL_OW 69
19575: ST_TO_ADDR
// if not tmp then
19576: LD_VAR 0 1
19580: NOT
19581: IFFALSE 19585
// exit ;
19583: GO 19630
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
19585: LD_VAR 0 1
19589: PUSH
19590: LD_INT 1
19592: PPUSH
19593: LD_VAR 0 1
19597: PPUSH
19598: CALL_OW 12
19602: ARRAY
19603: PPUSH
19604: LD_INT 1
19606: PPUSH
19607: LD_INT 4
19609: PPUSH
19610: CALL_OW 12
19614: PPUSH
19615: LD_INT 3000
19617: PPUSH
19618: LD_INT 9000
19620: PPUSH
19621: CALL_OW 12
19625: PPUSH
19626: CALL_OW 492
// end ;
19630: PPOPN 1
19632: END
// every 0 0$1 trigger StreamModeActive and sDepot do
19633: LD_EXP 22
19637: PUSH
19638: LD_EXP 37
19642: AND
19643: IFFALSE 19663
19645: GO 19647
19647: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
19648: LD_INT 1
19650: PPUSH
19651: LD_OWVAR 2
19655: PPUSH
19656: LD_INT 0
19658: PPUSH
19659: CALL_OW 324
19663: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
19664: LD_EXP 22
19668: PUSH
19669: LD_EXP 38
19673: AND
19674: IFFALSE 19757
19676: GO 19678
19678: DISABLE
19679: LD_INT 0
19681: PPUSH
19682: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
19683: LD_ADDR_VAR 0 2
19687: PUSH
19688: LD_INT 22
19690: PUSH
19691: LD_OWVAR 2
19695: PUSH
19696: EMPTY
19697: LIST
19698: LIST
19699: PUSH
19700: LD_INT 21
19702: PUSH
19703: LD_INT 3
19705: PUSH
19706: EMPTY
19707: LIST
19708: LIST
19709: PUSH
19710: EMPTY
19711: LIST
19712: LIST
19713: PPUSH
19714: CALL_OW 69
19718: ST_TO_ADDR
// if not tmp then
19719: LD_VAR 0 2
19723: NOT
19724: IFFALSE 19728
// exit ;
19726: GO 19757
// for i in tmp do
19728: LD_ADDR_VAR 0 1
19732: PUSH
19733: LD_VAR 0 2
19737: PUSH
19738: FOR_IN
19739: IFFALSE 19755
// SetBLevel ( i , 10 ) ;
19741: LD_VAR 0 1
19745: PPUSH
19746: LD_INT 10
19748: PPUSH
19749: CALL_OW 241
19753: GO 19738
19755: POP
19756: POP
// end ;
19757: PPOPN 2
19759: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
19760: LD_EXP 22
19764: PUSH
19765: LD_EXP 39
19769: AND
19770: IFFALSE 19881
19772: GO 19774
19774: DISABLE
19775: LD_INT 0
19777: PPUSH
19778: PPUSH
19779: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19780: LD_ADDR_VAR 0 3
19784: PUSH
19785: LD_INT 22
19787: PUSH
19788: LD_OWVAR 2
19792: PUSH
19793: EMPTY
19794: LIST
19795: LIST
19796: PUSH
19797: LD_INT 25
19799: PUSH
19800: LD_INT 1
19802: PUSH
19803: EMPTY
19804: LIST
19805: LIST
19806: PUSH
19807: EMPTY
19808: LIST
19809: LIST
19810: PPUSH
19811: CALL_OW 69
19815: ST_TO_ADDR
// if not tmp then
19816: LD_VAR 0 3
19820: NOT
19821: IFFALSE 19825
// exit ;
19823: GO 19881
// un := tmp [ rand ( 1 , tmp ) ] ;
19825: LD_ADDR_VAR 0 2
19829: PUSH
19830: LD_VAR 0 3
19834: PUSH
19835: LD_INT 1
19837: PPUSH
19838: LD_VAR 0 3
19842: PPUSH
19843: CALL_OW 12
19847: ARRAY
19848: ST_TO_ADDR
// if Crawls ( un ) then
19849: LD_VAR 0 2
19853: PPUSH
19854: CALL_OW 318
19858: IFFALSE 19869
// ComWalk ( un ) ;
19860: LD_VAR 0 2
19864: PPUSH
19865: CALL_OW 138
// SetClass ( un , class_sniper ) ;
19869: LD_VAR 0 2
19873: PPUSH
19874: LD_INT 5
19876: PPUSH
19877: CALL_OW 336
// end ;
19881: PPOPN 3
19883: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
19884: LD_EXP 22
19888: PUSH
19889: LD_EXP 40
19893: AND
19894: PUSH
19895: LD_OWVAR 67
19899: PUSH
19900: LD_INT 4
19902: LESS
19903: AND
19904: IFFALSE 19923
19906: GO 19908
19908: DISABLE
// begin Difficulty := Difficulty + 1 ;
19909: LD_ADDR_OWVAR 67
19913: PUSH
19914: LD_OWVAR 67
19918: PUSH
19919: LD_INT 1
19921: PLUS
19922: ST_TO_ADDR
// end ;
19923: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
19924: LD_EXP 22
19928: PUSH
19929: LD_EXP 41
19933: AND
19934: IFFALSE 20037
19936: GO 19938
19938: DISABLE
19939: LD_INT 0
19941: PPUSH
// begin for i := 1 to 5 do
19942: LD_ADDR_VAR 0 1
19946: PUSH
19947: DOUBLE
19948: LD_INT 1
19950: DEC
19951: ST_TO_ADDR
19952: LD_INT 5
19954: PUSH
19955: FOR_TO
19956: IFFALSE 20035
// begin uc_nation := nation_nature ;
19958: LD_ADDR_OWVAR 21
19962: PUSH
19963: LD_INT 0
19965: ST_TO_ADDR
// uc_side := 0 ;
19966: LD_ADDR_OWVAR 20
19970: PUSH
19971: LD_INT 0
19973: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19974: LD_ADDR_OWVAR 29
19978: PUSH
19979: LD_INT 12
19981: PUSH
19982: LD_INT 12
19984: PUSH
19985: EMPTY
19986: LIST
19987: LIST
19988: ST_TO_ADDR
// hc_agressivity := 20 ;
19989: LD_ADDR_OWVAR 35
19993: PUSH
19994: LD_INT 20
19996: ST_TO_ADDR
// hc_class := class_tiger ;
19997: LD_ADDR_OWVAR 28
20001: PUSH
20002: LD_INT 14
20004: ST_TO_ADDR
// hc_gallery :=  ;
20005: LD_ADDR_OWVAR 33
20009: PUSH
20010: LD_STRING 
20012: ST_TO_ADDR
// hc_name :=  ;
20013: LD_ADDR_OWVAR 26
20017: PUSH
20018: LD_STRING 
20020: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
20021: CALL_OW 44
20025: PPUSH
20026: LD_INT 0
20028: PPUSH
20029: CALL_OW 51
// end ;
20033: GO 19955
20035: POP
20036: POP
// end ;
20037: PPOPN 1
20039: END
// every 0 0$1 trigger StreamModeActive and sBomb do
20040: LD_EXP 22
20044: PUSH
20045: LD_EXP 42
20049: AND
20050: IFFALSE 20059
20052: GO 20054
20054: DISABLE
// StreamSibBomb ;
20055: CALL 20060 0 0
20059: END
// export function StreamSibBomb ; var i , x , y ; begin
20060: LD_INT 0
20062: PPUSH
20063: PPUSH
20064: PPUSH
20065: PPUSH
// result := false ;
20066: LD_ADDR_VAR 0 1
20070: PUSH
20071: LD_INT 0
20073: ST_TO_ADDR
// for i := 1 to 16 do
20074: LD_ADDR_VAR 0 2
20078: PUSH
20079: DOUBLE
20080: LD_INT 1
20082: DEC
20083: ST_TO_ADDR
20084: LD_INT 16
20086: PUSH
20087: FOR_TO
20088: IFFALSE 20287
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
20090: LD_ADDR_VAR 0 3
20094: PUSH
20095: LD_INT 10
20097: PUSH
20098: LD_INT 20
20100: PUSH
20101: LD_INT 30
20103: PUSH
20104: LD_INT 40
20106: PUSH
20107: LD_INT 50
20109: PUSH
20110: LD_INT 60
20112: PUSH
20113: LD_INT 70
20115: PUSH
20116: LD_INT 80
20118: PUSH
20119: LD_INT 90
20121: PUSH
20122: LD_INT 100
20124: PUSH
20125: LD_INT 110
20127: PUSH
20128: LD_INT 120
20130: PUSH
20131: LD_INT 130
20133: PUSH
20134: LD_INT 140
20136: PUSH
20137: LD_INT 150
20139: PUSH
20140: EMPTY
20141: LIST
20142: LIST
20143: LIST
20144: LIST
20145: LIST
20146: LIST
20147: LIST
20148: LIST
20149: LIST
20150: LIST
20151: LIST
20152: LIST
20153: LIST
20154: LIST
20155: LIST
20156: PUSH
20157: LD_INT 1
20159: PPUSH
20160: LD_INT 15
20162: PPUSH
20163: CALL_OW 12
20167: ARRAY
20168: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
20169: LD_ADDR_VAR 0 4
20173: PUSH
20174: LD_INT 10
20176: PUSH
20177: LD_INT 20
20179: PUSH
20180: LD_INT 30
20182: PUSH
20183: LD_INT 40
20185: PUSH
20186: LD_INT 50
20188: PUSH
20189: LD_INT 60
20191: PUSH
20192: LD_INT 70
20194: PUSH
20195: LD_INT 80
20197: PUSH
20198: LD_INT 90
20200: PUSH
20201: LD_INT 100
20203: PUSH
20204: LD_INT 110
20206: PUSH
20207: LD_INT 120
20209: PUSH
20210: LD_INT 130
20212: PUSH
20213: LD_INT 140
20215: PUSH
20216: LD_INT 150
20218: PUSH
20219: EMPTY
20220: LIST
20221: LIST
20222: LIST
20223: LIST
20224: LIST
20225: LIST
20226: LIST
20227: LIST
20228: LIST
20229: LIST
20230: LIST
20231: LIST
20232: LIST
20233: LIST
20234: LIST
20235: PUSH
20236: LD_INT 1
20238: PPUSH
20239: LD_INT 15
20241: PPUSH
20242: CALL_OW 12
20246: ARRAY
20247: ST_TO_ADDR
// if ValidHex ( x , y ) then
20248: LD_VAR 0 3
20252: PPUSH
20253: LD_VAR 0 4
20257: PPUSH
20258: CALL_OW 488
20262: IFFALSE 20285
// begin result := [ x , y ] ;
20264: LD_ADDR_VAR 0 1
20268: PUSH
20269: LD_VAR 0 3
20273: PUSH
20274: LD_VAR 0 4
20278: PUSH
20279: EMPTY
20280: LIST
20281: LIST
20282: ST_TO_ADDR
// break ;
20283: GO 20287
// end ; end ;
20285: GO 20087
20287: POP
20288: POP
// if result then
20289: LD_VAR 0 1
20293: IFFALSE 20353
// begin ToLua ( playSibBomb() ) ;
20295: LD_STRING playSibBomb()
20297: PPUSH
20298: CALL_OW 559
// wait ( 0 0$14 ) ;
20302: LD_INT 490
20304: PPUSH
20305: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
20309: LD_VAR 0 1
20313: PUSH
20314: LD_INT 1
20316: ARRAY
20317: PPUSH
20318: LD_VAR 0 1
20322: PUSH
20323: LD_INT 2
20325: ARRAY
20326: PPUSH
20327: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
20331: LD_VAR 0 1
20335: PUSH
20336: LD_INT 1
20338: ARRAY
20339: PPUSH
20340: LD_VAR 0 1
20344: PUSH
20345: LD_INT 2
20347: ARRAY
20348: PPUSH
20349: CALL_OW 429
// end ; end ;
20353: LD_VAR 0 1
20357: RET
// every 0 0$1 trigger StreamModeActive and sReset do
20358: LD_EXP 22
20362: PUSH
20363: LD_EXP 44
20367: AND
20368: IFFALSE 20380
20370: GO 20372
20372: DISABLE
// YouLost (  ) ;
20373: LD_STRING 
20375: PPUSH
20376: CALL_OW 104
20380: END
// every 0 0$1 trigger StreamModeActive and sFog do
20381: LD_EXP 22
20385: PUSH
20386: LD_EXP 43
20390: AND
20391: IFFALSE 20405
20393: GO 20395
20395: DISABLE
// FogOff ( your_side ) ;
20396: LD_OWVAR 2
20400: PPUSH
20401: CALL_OW 344
20405: END
// every 0 0$1 trigger StreamModeActive and sSun do
20406: LD_EXP 22
20410: PUSH
20411: LD_EXP 45
20415: AND
20416: IFFALSE 20444
20418: GO 20420
20420: DISABLE
// begin solar_recharge_percent := 0 ;
20421: LD_ADDR_OWVAR 79
20425: PUSH
20426: LD_INT 0
20428: ST_TO_ADDR
// wait ( 5 5$00 ) ;
20429: LD_INT 10500
20431: PPUSH
20432: CALL_OW 67
// solar_recharge_percent := 100 ;
20436: LD_ADDR_OWVAR 79
20440: PUSH
20441: LD_INT 100
20443: ST_TO_ADDR
// end ;
20444: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
20445: LD_EXP 22
20449: PUSH
20450: LD_EXP 46
20454: AND
20455: IFFALSE 20694
20457: GO 20459
20459: DISABLE
20460: LD_INT 0
20462: PPUSH
20463: PPUSH
20464: PPUSH
// begin tmp := [ ] ;
20465: LD_ADDR_VAR 0 3
20469: PUSH
20470: EMPTY
20471: ST_TO_ADDR
// for i := 1 to 6 do
20472: LD_ADDR_VAR 0 1
20476: PUSH
20477: DOUBLE
20478: LD_INT 1
20480: DEC
20481: ST_TO_ADDR
20482: LD_INT 6
20484: PUSH
20485: FOR_TO
20486: IFFALSE 20591
// begin uc_nation := nation_nature ;
20488: LD_ADDR_OWVAR 21
20492: PUSH
20493: LD_INT 0
20495: ST_TO_ADDR
// uc_side := 0 ;
20496: LD_ADDR_OWVAR 20
20500: PUSH
20501: LD_INT 0
20503: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
20504: LD_ADDR_OWVAR 29
20508: PUSH
20509: LD_INT 12
20511: PUSH
20512: LD_INT 12
20514: PUSH
20515: EMPTY
20516: LIST
20517: LIST
20518: ST_TO_ADDR
// hc_agressivity := 20 ;
20519: LD_ADDR_OWVAR 35
20523: PUSH
20524: LD_INT 20
20526: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
20527: LD_ADDR_OWVAR 28
20531: PUSH
20532: LD_INT 17
20534: ST_TO_ADDR
// hc_gallery :=  ;
20535: LD_ADDR_OWVAR 33
20539: PUSH
20540: LD_STRING 
20542: ST_TO_ADDR
// hc_name :=  ;
20543: LD_ADDR_OWVAR 26
20547: PUSH
20548: LD_STRING 
20550: ST_TO_ADDR
// un := CreateHuman ;
20551: LD_ADDR_VAR 0 2
20555: PUSH
20556: CALL_OW 44
20560: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
20561: LD_VAR 0 2
20565: PPUSH
20566: LD_INT 1
20568: PPUSH
20569: CALL_OW 51
// tmp := tmp ^ un ;
20573: LD_ADDR_VAR 0 3
20577: PUSH
20578: LD_VAR 0 3
20582: PUSH
20583: LD_VAR 0 2
20587: ADD
20588: ST_TO_ADDR
// end ;
20589: GO 20485
20591: POP
20592: POP
// repeat wait ( 0 0$1 ) ;
20593: LD_INT 35
20595: PPUSH
20596: CALL_OW 67
// for un in tmp do
20600: LD_ADDR_VAR 0 2
20604: PUSH
20605: LD_VAR 0 3
20609: PUSH
20610: FOR_IN
20611: IFFALSE 20685
// begin if IsDead ( un ) then
20613: LD_VAR 0 2
20617: PPUSH
20618: CALL_OW 301
20622: IFFALSE 20642
// begin tmp := tmp diff un ;
20624: LD_ADDR_VAR 0 3
20628: PUSH
20629: LD_VAR 0 3
20633: PUSH
20634: LD_VAR 0 2
20638: DIFF
20639: ST_TO_ADDR
// continue ;
20640: GO 20610
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
20642: LD_VAR 0 2
20646: PPUSH
20647: LD_INT 3
20649: PUSH
20650: LD_INT 22
20652: PUSH
20653: LD_INT 0
20655: PUSH
20656: EMPTY
20657: LIST
20658: LIST
20659: PUSH
20660: EMPTY
20661: LIST
20662: LIST
20663: PPUSH
20664: CALL_OW 69
20668: PPUSH
20669: LD_VAR 0 2
20673: PPUSH
20674: CALL_OW 74
20678: PPUSH
20679: CALL_OW 115
// end ;
20683: GO 20610
20685: POP
20686: POP
// until not tmp ;
20687: LD_VAR 0 3
20691: NOT
20692: IFFALSE 20593
// end ;
20694: PPOPN 3
20696: END
// every 0 0$1 trigger StreamModeActive and sTroll do
20697: LD_EXP 22
20701: PUSH
20702: LD_EXP 47
20706: AND
20707: IFFALSE 20761
20709: GO 20711
20711: DISABLE
// begin ToLua ( displayTroll(); ) ;
20712: LD_STRING displayTroll();
20714: PPUSH
20715: CALL_OW 559
// wait ( 3 3$00 ) ;
20719: LD_INT 6300
20721: PPUSH
20722: CALL_OW 67
// ToLua ( hideTroll(); ) ;
20726: LD_STRING hideTroll();
20728: PPUSH
20729: CALL_OW 559
// wait ( 1 1$00 ) ;
20733: LD_INT 2100
20735: PPUSH
20736: CALL_OW 67
// ToLua ( displayTroll(); ) ;
20740: LD_STRING displayTroll();
20742: PPUSH
20743: CALL_OW 559
// wait ( 1 1$00 ) ;
20747: LD_INT 2100
20749: PPUSH
20750: CALL_OW 67
// ToLua ( hideTroll(); ) ;
20754: LD_STRING hideTroll();
20756: PPUSH
20757: CALL_OW 559
// end ;
20761: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
20762: LD_EXP 22
20766: PUSH
20767: LD_EXP 48
20771: AND
20772: IFFALSE 20835
20774: GO 20776
20776: DISABLE
20777: LD_INT 0
20779: PPUSH
// begin p := 0 ;
20780: LD_ADDR_VAR 0 1
20784: PUSH
20785: LD_INT 0
20787: ST_TO_ADDR
// repeat game_speed := 1 ;
20788: LD_ADDR_OWVAR 65
20792: PUSH
20793: LD_INT 1
20795: ST_TO_ADDR
// wait ( 0 0$1 ) ;
20796: LD_INT 35
20798: PPUSH
20799: CALL_OW 67
// p := p + 1 ;
20803: LD_ADDR_VAR 0 1
20807: PUSH
20808: LD_VAR 0 1
20812: PUSH
20813: LD_INT 1
20815: PLUS
20816: ST_TO_ADDR
// until p >= 60 ;
20817: LD_VAR 0 1
20821: PUSH
20822: LD_INT 60
20824: GREATEREQUAL
20825: IFFALSE 20788
// game_speed := 4 ;
20827: LD_ADDR_OWVAR 65
20831: PUSH
20832: LD_INT 4
20834: ST_TO_ADDR
// end ;
20835: PPOPN 1
20837: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
20838: LD_EXP 22
20842: PUSH
20843: LD_EXP 49
20847: AND
20848: IFFALSE 20994
20850: GO 20852
20852: DISABLE
20853: LD_INT 0
20855: PPUSH
20856: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20857: LD_ADDR_VAR 0 1
20861: PUSH
20862: LD_INT 22
20864: PUSH
20865: LD_OWVAR 2
20869: PUSH
20870: EMPTY
20871: LIST
20872: LIST
20873: PUSH
20874: LD_INT 2
20876: PUSH
20877: LD_INT 30
20879: PUSH
20880: LD_INT 0
20882: PUSH
20883: EMPTY
20884: LIST
20885: LIST
20886: PUSH
20887: LD_INT 30
20889: PUSH
20890: LD_INT 1
20892: PUSH
20893: EMPTY
20894: LIST
20895: LIST
20896: PUSH
20897: EMPTY
20898: LIST
20899: LIST
20900: LIST
20901: PUSH
20902: EMPTY
20903: LIST
20904: LIST
20905: PPUSH
20906: CALL_OW 69
20910: ST_TO_ADDR
// if not depot then
20911: LD_VAR 0 1
20915: NOT
20916: IFFALSE 20920
// exit ;
20918: GO 20994
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
20920: LD_ADDR_VAR 0 2
20924: PUSH
20925: LD_VAR 0 1
20929: PUSH
20930: LD_INT 1
20932: PPUSH
20933: LD_VAR 0 1
20937: PPUSH
20938: CALL_OW 12
20942: ARRAY
20943: PPUSH
20944: CALL_OW 274
20948: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
20949: LD_VAR 0 2
20953: PPUSH
20954: LD_INT 1
20956: PPUSH
20957: LD_INT 0
20959: PPUSH
20960: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
20964: LD_VAR 0 2
20968: PPUSH
20969: LD_INT 2
20971: PPUSH
20972: LD_INT 0
20974: PPUSH
20975: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
20979: LD_VAR 0 2
20983: PPUSH
20984: LD_INT 3
20986: PPUSH
20987: LD_INT 0
20989: PPUSH
20990: CALL_OW 277
// end ;
20994: PPOPN 2
20996: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
20997: LD_EXP 22
21001: PUSH
21002: LD_EXP 50
21006: AND
21007: IFFALSE 21104
21009: GO 21011
21011: DISABLE
21012: LD_INT 0
21014: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21015: LD_ADDR_VAR 0 1
21019: PUSH
21020: LD_INT 22
21022: PUSH
21023: LD_OWVAR 2
21027: PUSH
21028: EMPTY
21029: LIST
21030: LIST
21031: PUSH
21032: LD_INT 21
21034: PUSH
21035: LD_INT 1
21037: PUSH
21038: EMPTY
21039: LIST
21040: LIST
21041: PUSH
21042: LD_INT 3
21044: PUSH
21045: LD_INT 23
21047: PUSH
21048: LD_INT 0
21050: PUSH
21051: EMPTY
21052: LIST
21053: LIST
21054: PUSH
21055: EMPTY
21056: LIST
21057: LIST
21058: PUSH
21059: EMPTY
21060: LIST
21061: LIST
21062: LIST
21063: PPUSH
21064: CALL_OW 69
21068: ST_TO_ADDR
// if not tmp then
21069: LD_VAR 0 1
21073: NOT
21074: IFFALSE 21078
// exit ;
21076: GO 21104
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
21078: LD_VAR 0 1
21082: PUSH
21083: LD_INT 1
21085: PPUSH
21086: LD_VAR 0 1
21090: PPUSH
21091: CALL_OW 12
21095: ARRAY
21096: PPUSH
21097: LD_INT 200
21099: PPUSH
21100: CALL_OW 234
// end ;
21104: PPOPN 1
21106: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
21107: LD_EXP 22
21111: PUSH
21112: LD_EXP 51
21116: AND
21117: IFFALSE 21196
21119: GO 21121
21121: DISABLE
21122: LD_INT 0
21124: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
21125: LD_ADDR_VAR 0 1
21129: PUSH
21130: LD_INT 22
21132: PUSH
21133: LD_OWVAR 2
21137: PUSH
21138: EMPTY
21139: LIST
21140: LIST
21141: PUSH
21142: LD_INT 21
21144: PUSH
21145: LD_INT 2
21147: PUSH
21148: EMPTY
21149: LIST
21150: LIST
21151: PUSH
21152: EMPTY
21153: LIST
21154: LIST
21155: PPUSH
21156: CALL_OW 69
21160: ST_TO_ADDR
// if not tmp then
21161: LD_VAR 0 1
21165: NOT
21166: IFFALSE 21170
// exit ;
21168: GO 21196
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
21170: LD_VAR 0 1
21174: PUSH
21175: LD_INT 1
21177: PPUSH
21178: LD_VAR 0 1
21182: PPUSH
21183: CALL_OW 12
21187: ARRAY
21188: PPUSH
21189: LD_INT 60
21191: PPUSH
21192: CALL_OW 234
// end ;
21196: PPOPN 1
21198: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
21199: LD_EXP 22
21203: PUSH
21204: LD_EXP 52
21208: AND
21209: IFFALSE 21308
21211: GO 21213
21213: DISABLE
21214: LD_INT 0
21216: PPUSH
21217: PPUSH
// begin enable ;
21218: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
21219: LD_ADDR_VAR 0 1
21223: PUSH
21224: LD_INT 22
21226: PUSH
21227: LD_OWVAR 2
21231: PUSH
21232: EMPTY
21233: LIST
21234: LIST
21235: PUSH
21236: LD_INT 61
21238: PUSH
21239: EMPTY
21240: LIST
21241: PUSH
21242: LD_INT 33
21244: PUSH
21245: LD_INT 2
21247: PUSH
21248: EMPTY
21249: LIST
21250: LIST
21251: PUSH
21252: EMPTY
21253: LIST
21254: LIST
21255: LIST
21256: PPUSH
21257: CALL_OW 69
21261: ST_TO_ADDR
// if not tmp then
21262: LD_VAR 0 1
21266: NOT
21267: IFFALSE 21271
// exit ;
21269: GO 21308
// for i in tmp do
21271: LD_ADDR_VAR 0 2
21275: PUSH
21276: LD_VAR 0 1
21280: PUSH
21281: FOR_IN
21282: IFFALSE 21306
// if IsControledBy ( i ) then
21284: LD_VAR 0 2
21288: PPUSH
21289: CALL_OW 312
21293: IFFALSE 21304
// ComUnlink ( i ) ;
21295: LD_VAR 0 2
21299: PPUSH
21300: CALL_OW 136
21304: GO 21281
21306: POP
21307: POP
// end ;
21308: PPOPN 2
21310: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
21311: LD_EXP 22
21315: PUSH
21316: LD_EXP 53
21320: AND
21321: IFFALSE 21461
21323: GO 21325
21325: DISABLE
21326: LD_INT 0
21328: PPUSH
21329: PPUSH
// begin ToLua ( displayPowell(); ) ;
21330: LD_STRING displayPowell();
21332: PPUSH
21333: CALL_OW 559
// uc_side := 0 ;
21337: LD_ADDR_OWVAR 20
21341: PUSH
21342: LD_INT 0
21344: ST_TO_ADDR
// uc_nation := 2 ;
21345: LD_ADDR_OWVAR 21
21349: PUSH
21350: LD_INT 2
21352: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
21353: LD_ADDR_OWVAR 37
21357: PUSH
21358: LD_INT 14
21360: ST_TO_ADDR
// vc_engine := engine_siberite ;
21361: LD_ADDR_OWVAR 39
21365: PUSH
21366: LD_INT 3
21368: ST_TO_ADDR
// vc_control := control_apeman ;
21369: LD_ADDR_OWVAR 38
21373: PUSH
21374: LD_INT 5
21376: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
21377: LD_ADDR_OWVAR 40
21381: PUSH
21382: LD_INT 29
21384: ST_TO_ADDR
// un := CreateVehicle ;
21385: LD_ADDR_VAR 0 2
21389: PUSH
21390: CALL_OW 45
21394: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21395: LD_VAR 0 2
21399: PPUSH
21400: LD_INT 1
21402: PPUSH
21403: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
21407: LD_INT 35
21409: PPUSH
21410: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
21414: LD_VAR 0 2
21418: PPUSH
21419: LD_INT 22
21421: PUSH
21422: LD_OWVAR 2
21426: PUSH
21427: EMPTY
21428: LIST
21429: LIST
21430: PPUSH
21431: CALL_OW 69
21435: PPUSH
21436: LD_VAR 0 2
21440: PPUSH
21441: CALL_OW 74
21445: PPUSH
21446: CALL_OW 115
// until IsDead ( un ) ;
21450: LD_VAR 0 2
21454: PPUSH
21455: CALL_OW 301
21459: IFFALSE 21407
// end ;
21461: PPOPN 2
21463: END
// every 0 0$1 trigger StreamModeActive and sStu do
21464: LD_EXP 22
21468: PUSH
21469: LD_EXP 61
21473: AND
21474: IFFALSE 21490
21476: GO 21478
21478: DISABLE
// begin ToLua ( displayStucuk(); ) ;
21479: LD_STRING displayStucuk();
21481: PPUSH
21482: CALL_OW 559
// ResetFog ;
21486: CALL_OW 335
// end ;
21490: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
21491: LD_EXP 22
21495: PUSH
21496: LD_EXP 54
21500: AND
21501: IFFALSE 21642
21503: GO 21505
21505: DISABLE
21506: LD_INT 0
21508: PPUSH
21509: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
21510: LD_ADDR_VAR 0 2
21514: PUSH
21515: LD_INT 22
21517: PUSH
21518: LD_OWVAR 2
21522: PUSH
21523: EMPTY
21524: LIST
21525: LIST
21526: PUSH
21527: LD_INT 21
21529: PUSH
21530: LD_INT 1
21532: PUSH
21533: EMPTY
21534: LIST
21535: LIST
21536: PUSH
21537: EMPTY
21538: LIST
21539: LIST
21540: PPUSH
21541: CALL_OW 69
21545: ST_TO_ADDR
// if not tmp then
21546: LD_VAR 0 2
21550: NOT
21551: IFFALSE 21555
// exit ;
21553: GO 21642
// un := tmp [ rand ( 1 , tmp ) ] ;
21555: LD_ADDR_VAR 0 1
21559: PUSH
21560: LD_VAR 0 2
21564: PUSH
21565: LD_INT 1
21567: PPUSH
21568: LD_VAR 0 2
21572: PPUSH
21573: CALL_OW 12
21577: ARRAY
21578: ST_TO_ADDR
// SetSide ( un , 0 ) ;
21579: LD_VAR 0 1
21583: PPUSH
21584: LD_INT 0
21586: PPUSH
21587: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
21591: LD_VAR 0 1
21595: PPUSH
21596: LD_OWVAR 3
21600: PUSH
21601: LD_VAR 0 1
21605: DIFF
21606: PPUSH
21607: LD_VAR 0 1
21611: PPUSH
21612: CALL_OW 74
21616: PPUSH
21617: CALL_OW 115
// wait ( 0 0$20 ) ;
21621: LD_INT 700
21623: PPUSH
21624: CALL_OW 67
// SetSide ( un , your_side ) ;
21628: LD_VAR 0 1
21632: PPUSH
21633: LD_OWVAR 2
21637: PPUSH
21638: CALL_OW 235
// end ;
21642: PPOPN 2
21644: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
21645: LD_EXP 22
21649: PUSH
21650: LD_EXP 55
21654: AND
21655: IFFALSE 21761
21657: GO 21659
21659: DISABLE
21660: LD_INT 0
21662: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21663: LD_ADDR_VAR 0 1
21667: PUSH
21668: LD_INT 22
21670: PUSH
21671: LD_OWVAR 2
21675: PUSH
21676: EMPTY
21677: LIST
21678: LIST
21679: PUSH
21680: LD_INT 2
21682: PUSH
21683: LD_INT 30
21685: PUSH
21686: LD_INT 0
21688: PUSH
21689: EMPTY
21690: LIST
21691: LIST
21692: PUSH
21693: LD_INT 30
21695: PUSH
21696: LD_INT 1
21698: PUSH
21699: EMPTY
21700: LIST
21701: LIST
21702: PUSH
21703: EMPTY
21704: LIST
21705: LIST
21706: LIST
21707: PUSH
21708: EMPTY
21709: LIST
21710: LIST
21711: PPUSH
21712: CALL_OW 69
21716: ST_TO_ADDR
// if not depot then
21717: LD_VAR 0 1
21721: NOT
21722: IFFALSE 21726
// exit ;
21724: GO 21761
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
21726: LD_VAR 0 1
21730: PUSH
21731: LD_INT 1
21733: ARRAY
21734: PPUSH
21735: CALL_OW 250
21739: PPUSH
21740: LD_VAR 0 1
21744: PUSH
21745: LD_INT 1
21747: ARRAY
21748: PPUSH
21749: CALL_OW 251
21753: PPUSH
21754: LD_INT 70
21756: PPUSH
21757: CALL_OW 495
// end ;
21761: PPOPN 1
21763: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
21764: LD_EXP 22
21768: PUSH
21769: LD_EXP 56
21773: AND
21774: IFFALSE 21985
21776: GO 21778
21778: DISABLE
21779: LD_INT 0
21781: PPUSH
21782: PPUSH
21783: PPUSH
21784: PPUSH
21785: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
21786: LD_ADDR_VAR 0 5
21790: PUSH
21791: LD_INT 22
21793: PUSH
21794: LD_OWVAR 2
21798: PUSH
21799: EMPTY
21800: LIST
21801: LIST
21802: PUSH
21803: LD_INT 21
21805: PUSH
21806: LD_INT 1
21808: PUSH
21809: EMPTY
21810: LIST
21811: LIST
21812: PUSH
21813: EMPTY
21814: LIST
21815: LIST
21816: PPUSH
21817: CALL_OW 69
21821: ST_TO_ADDR
// if not tmp then
21822: LD_VAR 0 5
21826: NOT
21827: IFFALSE 21831
// exit ;
21829: GO 21985
// for i in tmp do
21831: LD_ADDR_VAR 0 1
21835: PUSH
21836: LD_VAR 0 5
21840: PUSH
21841: FOR_IN
21842: IFFALSE 21983
// begin d := rand ( 0 , 5 ) ;
21844: LD_ADDR_VAR 0 4
21848: PUSH
21849: LD_INT 0
21851: PPUSH
21852: LD_INT 5
21854: PPUSH
21855: CALL_OW 12
21859: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
21860: LD_ADDR_VAR 0 2
21864: PUSH
21865: LD_VAR 0 1
21869: PPUSH
21870: CALL_OW 250
21874: PPUSH
21875: LD_VAR 0 4
21879: PPUSH
21880: LD_INT 3
21882: PPUSH
21883: LD_INT 12
21885: PPUSH
21886: CALL_OW 12
21890: PPUSH
21891: CALL_OW 272
21895: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
21896: LD_ADDR_VAR 0 3
21900: PUSH
21901: LD_VAR 0 1
21905: PPUSH
21906: CALL_OW 251
21910: PPUSH
21911: LD_VAR 0 4
21915: PPUSH
21916: LD_INT 3
21918: PPUSH
21919: LD_INT 12
21921: PPUSH
21922: CALL_OW 12
21926: PPUSH
21927: CALL_OW 273
21931: ST_TO_ADDR
// if ValidHex ( x , y ) then
21932: LD_VAR 0 2
21936: PPUSH
21937: LD_VAR 0 3
21941: PPUSH
21942: CALL_OW 488
21946: IFFALSE 21981
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
21948: LD_VAR 0 1
21952: PPUSH
21953: LD_VAR 0 2
21957: PPUSH
21958: LD_VAR 0 3
21962: PPUSH
21963: LD_INT 3
21965: PPUSH
21966: LD_INT 6
21968: PPUSH
21969: CALL_OW 12
21973: PPUSH
21974: LD_INT 1
21976: PPUSH
21977: CALL_OW 483
// end ;
21981: GO 21841
21983: POP
21984: POP
// end ;
21985: PPOPN 5
21987: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
21988: LD_EXP 22
21992: PUSH
21993: LD_EXP 57
21997: AND
21998: IFFALSE 22092
22000: GO 22002
22002: DISABLE
22003: LD_INT 0
22005: PPUSH
22006: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
22007: LD_ADDR_VAR 0 2
22011: PUSH
22012: LD_INT 22
22014: PUSH
22015: LD_OWVAR 2
22019: PUSH
22020: EMPTY
22021: LIST
22022: LIST
22023: PUSH
22024: LD_INT 32
22026: PUSH
22027: LD_INT 1
22029: PUSH
22030: EMPTY
22031: LIST
22032: LIST
22033: PUSH
22034: LD_INT 21
22036: PUSH
22037: LD_INT 2
22039: PUSH
22040: EMPTY
22041: LIST
22042: LIST
22043: PUSH
22044: EMPTY
22045: LIST
22046: LIST
22047: LIST
22048: PPUSH
22049: CALL_OW 69
22053: ST_TO_ADDR
// if not tmp then
22054: LD_VAR 0 2
22058: NOT
22059: IFFALSE 22063
// exit ;
22061: GO 22092
// for i in tmp do
22063: LD_ADDR_VAR 0 1
22067: PUSH
22068: LD_VAR 0 2
22072: PUSH
22073: FOR_IN
22074: IFFALSE 22090
// SetFuel ( i , 0 ) ;
22076: LD_VAR 0 1
22080: PPUSH
22081: LD_INT 0
22083: PPUSH
22084: CALL_OW 240
22088: GO 22073
22090: POP
22091: POP
// end ;
22092: PPOPN 2
22094: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
22095: LD_EXP 22
22099: PUSH
22100: LD_EXP 58
22104: AND
22105: IFFALSE 22171
22107: GO 22109
22109: DISABLE
22110: LD_INT 0
22112: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
22113: LD_ADDR_VAR 0 1
22117: PUSH
22118: LD_INT 22
22120: PUSH
22121: LD_OWVAR 2
22125: PUSH
22126: EMPTY
22127: LIST
22128: LIST
22129: PUSH
22130: LD_INT 30
22132: PUSH
22133: LD_INT 29
22135: PUSH
22136: EMPTY
22137: LIST
22138: LIST
22139: PUSH
22140: EMPTY
22141: LIST
22142: LIST
22143: PPUSH
22144: CALL_OW 69
22148: ST_TO_ADDR
// if not tmp then
22149: LD_VAR 0 1
22153: NOT
22154: IFFALSE 22158
// exit ;
22156: GO 22171
// DestroyUnit ( tmp [ 1 ] ) ;
22158: LD_VAR 0 1
22162: PUSH
22163: LD_INT 1
22165: ARRAY
22166: PPUSH
22167: CALL_OW 65
// end ;
22171: PPOPN 1
22173: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
22174: LD_EXP 22
22178: PUSH
22179: LD_EXP 60
22183: AND
22184: IFFALSE 22313
22186: GO 22188
22188: DISABLE
22189: LD_INT 0
22191: PPUSH
// begin uc_side := 0 ;
22192: LD_ADDR_OWVAR 20
22196: PUSH
22197: LD_INT 0
22199: ST_TO_ADDR
// uc_nation := nation_arabian ;
22200: LD_ADDR_OWVAR 21
22204: PUSH
22205: LD_INT 2
22207: ST_TO_ADDR
// hc_gallery :=  ;
22208: LD_ADDR_OWVAR 33
22212: PUSH
22213: LD_STRING 
22215: ST_TO_ADDR
// hc_name :=  ;
22216: LD_ADDR_OWVAR 26
22220: PUSH
22221: LD_STRING 
22223: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
22224: LD_INT 1
22226: PPUSH
22227: LD_INT 11
22229: PPUSH
22230: LD_INT 10
22232: PPUSH
22233: CALL_OW 380
// un := CreateHuman ;
22237: LD_ADDR_VAR 0 1
22241: PUSH
22242: CALL_OW 44
22246: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
22247: LD_VAR 0 1
22251: PPUSH
22252: LD_INT 1
22254: PPUSH
22255: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
22259: LD_INT 35
22261: PPUSH
22262: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
22266: LD_VAR 0 1
22270: PPUSH
22271: LD_INT 22
22273: PUSH
22274: LD_OWVAR 2
22278: PUSH
22279: EMPTY
22280: LIST
22281: LIST
22282: PPUSH
22283: CALL_OW 69
22287: PPUSH
22288: LD_VAR 0 1
22292: PPUSH
22293: CALL_OW 74
22297: PPUSH
22298: CALL_OW 115
// until IsDead ( un ) ;
22302: LD_VAR 0 1
22306: PPUSH
22307: CALL_OW 301
22311: IFFALSE 22259
// end ;
22313: PPOPN 1
22315: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
22316: LD_EXP 22
22320: PUSH
22321: LD_EXP 62
22325: AND
22326: IFFALSE 22338
22328: GO 22330
22330: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
22331: LD_STRING earthquake(getX(game), 0, 32)
22333: PPUSH
22334: CALL_OW 559
22338: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
22339: LD_EXP 22
22343: PUSH
22344: LD_EXP 63
22348: AND
22349: IFFALSE 22440
22351: GO 22353
22353: DISABLE
22354: LD_INT 0
22356: PPUSH
// begin enable ;
22357: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
22358: LD_ADDR_VAR 0 1
22362: PUSH
22363: LD_INT 22
22365: PUSH
22366: LD_OWVAR 2
22370: PUSH
22371: EMPTY
22372: LIST
22373: LIST
22374: PUSH
22375: LD_INT 21
22377: PUSH
22378: LD_INT 2
22380: PUSH
22381: EMPTY
22382: LIST
22383: LIST
22384: PUSH
22385: LD_INT 33
22387: PUSH
22388: LD_INT 3
22390: PUSH
22391: EMPTY
22392: LIST
22393: LIST
22394: PUSH
22395: EMPTY
22396: LIST
22397: LIST
22398: LIST
22399: PPUSH
22400: CALL_OW 69
22404: ST_TO_ADDR
// if not tmp then
22405: LD_VAR 0 1
22409: NOT
22410: IFFALSE 22414
// exit ;
22412: GO 22440
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
22414: LD_VAR 0 1
22418: PUSH
22419: LD_INT 1
22421: PPUSH
22422: LD_VAR 0 1
22426: PPUSH
22427: CALL_OW 12
22431: ARRAY
22432: PPUSH
22433: LD_INT 1
22435: PPUSH
22436: CALL_OW 234
// end ;
22440: PPOPN 1
22442: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
22443: LD_EXP 22
22447: PUSH
22448: LD_EXP 64
22452: AND
22453: IFFALSE 22594
22455: GO 22457
22457: DISABLE
22458: LD_INT 0
22460: PPUSH
22461: PPUSH
22462: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22463: LD_ADDR_VAR 0 3
22467: PUSH
22468: LD_INT 22
22470: PUSH
22471: LD_OWVAR 2
22475: PUSH
22476: EMPTY
22477: LIST
22478: LIST
22479: PUSH
22480: LD_INT 25
22482: PUSH
22483: LD_INT 1
22485: PUSH
22486: EMPTY
22487: LIST
22488: LIST
22489: PUSH
22490: EMPTY
22491: LIST
22492: LIST
22493: PPUSH
22494: CALL_OW 69
22498: ST_TO_ADDR
// if not tmp then
22499: LD_VAR 0 3
22503: NOT
22504: IFFALSE 22508
// exit ;
22506: GO 22594
// un := tmp [ rand ( 1 , tmp ) ] ;
22508: LD_ADDR_VAR 0 2
22512: PUSH
22513: LD_VAR 0 3
22517: PUSH
22518: LD_INT 1
22520: PPUSH
22521: LD_VAR 0 3
22525: PPUSH
22526: CALL_OW 12
22530: ARRAY
22531: ST_TO_ADDR
// if Crawls ( un ) then
22532: LD_VAR 0 2
22536: PPUSH
22537: CALL_OW 318
22541: IFFALSE 22552
// ComWalk ( un ) ;
22543: LD_VAR 0 2
22547: PPUSH
22548: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
22552: LD_VAR 0 2
22556: PPUSH
22557: LD_INT 9
22559: PPUSH
22560: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
22564: LD_INT 28
22566: PPUSH
22567: LD_OWVAR 2
22571: PPUSH
22572: LD_INT 2
22574: PPUSH
22575: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
22579: LD_INT 29
22581: PPUSH
22582: LD_OWVAR 2
22586: PPUSH
22587: LD_INT 2
22589: PPUSH
22590: CALL_OW 322
// end ;
22594: PPOPN 3
22596: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
22597: LD_EXP 22
22601: PUSH
22602: LD_EXP 65
22606: AND
22607: IFFALSE 22718
22609: GO 22611
22611: DISABLE
22612: LD_INT 0
22614: PPUSH
22615: PPUSH
22616: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22617: LD_ADDR_VAR 0 3
22621: PUSH
22622: LD_INT 22
22624: PUSH
22625: LD_OWVAR 2
22629: PUSH
22630: EMPTY
22631: LIST
22632: LIST
22633: PUSH
22634: LD_INT 25
22636: PUSH
22637: LD_INT 1
22639: PUSH
22640: EMPTY
22641: LIST
22642: LIST
22643: PUSH
22644: EMPTY
22645: LIST
22646: LIST
22647: PPUSH
22648: CALL_OW 69
22652: ST_TO_ADDR
// if not tmp then
22653: LD_VAR 0 3
22657: NOT
22658: IFFALSE 22662
// exit ;
22660: GO 22718
// un := tmp [ rand ( 1 , tmp ) ] ;
22662: LD_ADDR_VAR 0 2
22666: PUSH
22667: LD_VAR 0 3
22671: PUSH
22672: LD_INT 1
22674: PPUSH
22675: LD_VAR 0 3
22679: PPUSH
22680: CALL_OW 12
22684: ARRAY
22685: ST_TO_ADDR
// if Crawls ( un ) then
22686: LD_VAR 0 2
22690: PPUSH
22691: CALL_OW 318
22695: IFFALSE 22706
// ComWalk ( un ) ;
22697: LD_VAR 0 2
22701: PPUSH
22702: CALL_OW 138
// SetClass ( un , class_mortar ) ;
22706: LD_VAR 0 2
22710: PPUSH
22711: LD_INT 8
22713: PPUSH
22714: CALL_OW 336
// end ;
22718: PPOPN 3
22720: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
22721: LD_EXP 22
22725: PUSH
22726: LD_EXP 66
22730: AND
22731: IFFALSE 22875
22733: GO 22735
22735: DISABLE
22736: LD_INT 0
22738: PPUSH
22739: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
22740: LD_ADDR_VAR 0 2
22744: PUSH
22745: LD_INT 22
22747: PUSH
22748: LD_OWVAR 2
22752: PUSH
22753: EMPTY
22754: LIST
22755: LIST
22756: PUSH
22757: LD_INT 21
22759: PUSH
22760: LD_INT 2
22762: PUSH
22763: EMPTY
22764: LIST
22765: LIST
22766: PUSH
22767: LD_INT 2
22769: PUSH
22770: LD_INT 34
22772: PUSH
22773: LD_INT 12
22775: PUSH
22776: EMPTY
22777: LIST
22778: LIST
22779: PUSH
22780: LD_INT 34
22782: PUSH
22783: LD_INT 51
22785: PUSH
22786: EMPTY
22787: LIST
22788: LIST
22789: PUSH
22790: LD_INT 34
22792: PUSH
22793: LD_INT 32
22795: PUSH
22796: EMPTY
22797: LIST
22798: LIST
22799: PUSH
22800: EMPTY
22801: LIST
22802: LIST
22803: LIST
22804: LIST
22805: PUSH
22806: EMPTY
22807: LIST
22808: LIST
22809: LIST
22810: PPUSH
22811: CALL_OW 69
22815: ST_TO_ADDR
// if not tmp then
22816: LD_VAR 0 2
22820: NOT
22821: IFFALSE 22825
// exit ;
22823: GO 22875
// for i in tmp do
22825: LD_ADDR_VAR 0 1
22829: PUSH
22830: LD_VAR 0 2
22834: PUSH
22835: FOR_IN
22836: IFFALSE 22873
// if GetCargo ( i , mat_artifact ) = 0 then
22838: LD_VAR 0 1
22842: PPUSH
22843: LD_INT 4
22845: PPUSH
22846: CALL_OW 289
22850: PUSH
22851: LD_INT 0
22853: EQUAL
22854: IFFALSE 22871
// SetCargo ( i , mat_siberit , 100 ) ;
22856: LD_VAR 0 1
22860: PPUSH
22861: LD_INT 3
22863: PPUSH
22864: LD_INT 100
22866: PPUSH
22867: CALL_OW 290
22871: GO 22835
22873: POP
22874: POP
// end ;
22875: PPOPN 2
22877: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
22878: LD_EXP 22
22882: PUSH
22883: LD_EXP 67
22887: AND
22888: IFFALSE 23071
22890: GO 22892
22892: DISABLE
22893: LD_INT 0
22895: PPUSH
22896: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22897: LD_ADDR_VAR 0 2
22901: PUSH
22902: LD_INT 22
22904: PUSH
22905: LD_OWVAR 2
22909: PUSH
22910: EMPTY
22911: LIST
22912: LIST
22913: PPUSH
22914: CALL_OW 69
22918: ST_TO_ADDR
// if not tmp then
22919: LD_VAR 0 2
22923: NOT
22924: IFFALSE 22928
// exit ;
22926: GO 23071
// for i := 1 to 2 do
22928: LD_ADDR_VAR 0 1
22932: PUSH
22933: DOUBLE
22934: LD_INT 1
22936: DEC
22937: ST_TO_ADDR
22938: LD_INT 2
22940: PUSH
22941: FOR_TO
22942: IFFALSE 23069
// begin uc_side := your_side ;
22944: LD_ADDR_OWVAR 20
22948: PUSH
22949: LD_OWVAR 2
22953: ST_TO_ADDR
// uc_nation := nation_american ;
22954: LD_ADDR_OWVAR 21
22958: PUSH
22959: LD_INT 1
22961: ST_TO_ADDR
// vc_chassis := us_morphling ;
22962: LD_ADDR_OWVAR 37
22966: PUSH
22967: LD_INT 5
22969: ST_TO_ADDR
// vc_engine := engine_siberite ;
22970: LD_ADDR_OWVAR 39
22974: PUSH
22975: LD_INT 3
22977: ST_TO_ADDR
// vc_control := control_computer ;
22978: LD_ADDR_OWVAR 38
22982: PUSH
22983: LD_INT 3
22985: ST_TO_ADDR
// vc_weapon := us_double_laser ;
22986: LD_ADDR_OWVAR 40
22990: PUSH
22991: LD_INT 10
22993: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
22994: LD_VAR 0 2
22998: PUSH
22999: LD_INT 1
23001: ARRAY
23002: PPUSH
23003: CALL_OW 310
23007: NOT
23008: IFFALSE 23055
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
23010: CALL_OW 45
23014: PPUSH
23015: LD_VAR 0 2
23019: PUSH
23020: LD_INT 1
23022: ARRAY
23023: PPUSH
23024: CALL_OW 250
23028: PPUSH
23029: LD_VAR 0 2
23033: PUSH
23034: LD_INT 1
23036: ARRAY
23037: PPUSH
23038: CALL_OW 251
23042: PPUSH
23043: LD_INT 12
23045: PPUSH
23046: LD_INT 1
23048: PPUSH
23049: CALL_OW 50
23053: GO 23067
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
23055: CALL_OW 45
23059: PPUSH
23060: LD_INT 1
23062: PPUSH
23063: CALL_OW 51
// end ;
23067: GO 22941
23069: POP
23070: POP
// end ;
23071: PPOPN 2
23073: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
23074: LD_EXP 22
23078: PUSH
23079: LD_EXP 68
23083: AND
23084: IFFALSE 23306
23086: GO 23088
23088: DISABLE
23089: LD_INT 0
23091: PPUSH
23092: PPUSH
23093: PPUSH
23094: PPUSH
23095: PPUSH
23096: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
23097: LD_ADDR_VAR 0 6
23101: PUSH
23102: LD_INT 22
23104: PUSH
23105: LD_OWVAR 2
23109: PUSH
23110: EMPTY
23111: LIST
23112: LIST
23113: PUSH
23114: LD_INT 21
23116: PUSH
23117: LD_INT 1
23119: PUSH
23120: EMPTY
23121: LIST
23122: LIST
23123: PUSH
23124: LD_INT 3
23126: PUSH
23127: LD_INT 23
23129: PUSH
23130: LD_INT 0
23132: PUSH
23133: EMPTY
23134: LIST
23135: LIST
23136: PUSH
23137: EMPTY
23138: LIST
23139: LIST
23140: PUSH
23141: EMPTY
23142: LIST
23143: LIST
23144: LIST
23145: PPUSH
23146: CALL_OW 69
23150: ST_TO_ADDR
// if not tmp then
23151: LD_VAR 0 6
23155: NOT
23156: IFFALSE 23160
// exit ;
23158: GO 23306
// s1 := rand ( 1 , 4 ) ;
23160: LD_ADDR_VAR 0 2
23164: PUSH
23165: LD_INT 1
23167: PPUSH
23168: LD_INT 4
23170: PPUSH
23171: CALL_OW 12
23175: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
23176: LD_ADDR_VAR 0 4
23180: PUSH
23181: LD_VAR 0 6
23185: PUSH
23186: LD_INT 1
23188: ARRAY
23189: PPUSH
23190: LD_VAR 0 2
23194: PPUSH
23195: CALL_OW 259
23199: ST_TO_ADDR
// if s1 = 1 then
23200: LD_VAR 0 2
23204: PUSH
23205: LD_INT 1
23207: EQUAL
23208: IFFALSE 23228
// s2 := rand ( 2 , 4 ) else
23210: LD_ADDR_VAR 0 3
23214: PUSH
23215: LD_INT 2
23217: PPUSH
23218: LD_INT 4
23220: PPUSH
23221: CALL_OW 12
23225: ST_TO_ADDR
23226: GO 23236
// s2 := 1 ;
23228: LD_ADDR_VAR 0 3
23232: PUSH
23233: LD_INT 1
23235: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
23236: LD_ADDR_VAR 0 5
23240: PUSH
23241: LD_VAR 0 6
23245: PUSH
23246: LD_INT 1
23248: ARRAY
23249: PPUSH
23250: LD_VAR 0 3
23254: PPUSH
23255: CALL_OW 259
23259: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
23260: LD_VAR 0 6
23264: PUSH
23265: LD_INT 1
23267: ARRAY
23268: PPUSH
23269: LD_VAR 0 2
23273: PPUSH
23274: LD_VAR 0 5
23278: PPUSH
23279: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
23283: LD_VAR 0 6
23287: PUSH
23288: LD_INT 1
23290: ARRAY
23291: PPUSH
23292: LD_VAR 0 3
23296: PPUSH
23297: LD_VAR 0 4
23301: PPUSH
23302: CALL_OW 237
// end ;
23306: PPOPN 6
23308: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
23309: LD_EXP 22
23313: PUSH
23314: LD_EXP 69
23318: AND
23319: IFFALSE 23398
23321: GO 23323
23323: DISABLE
23324: LD_INT 0
23326: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
23327: LD_ADDR_VAR 0 1
23331: PUSH
23332: LD_INT 22
23334: PUSH
23335: LD_OWVAR 2
23339: PUSH
23340: EMPTY
23341: LIST
23342: LIST
23343: PUSH
23344: LD_INT 30
23346: PUSH
23347: LD_INT 3
23349: PUSH
23350: EMPTY
23351: LIST
23352: LIST
23353: PUSH
23354: EMPTY
23355: LIST
23356: LIST
23357: PPUSH
23358: CALL_OW 69
23362: ST_TO_ADDR
// if not tmp then
23363: LD_VAR 0 1
23367: NOT
23368: IFFALSE 23372
// exit ;
23370: GO 23398
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
23372: LD_VAR 0 1
23376: PUSH
23377: LD_INT 1
23379: PPUSH
23380: LD_VAR 0 1
23384: PPUSH
23385: CALL_OW 12
23389: ARRAY
23390: PPUSH
23391: LD_INT 1
23393: PPUSH
23394: CALL_OW 234
// end ;
23398: PPOPN 1
23400: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
23401: LD_EXP 22
23405: PUSH
23406: LD_EXP 70
23410: AND
23411: IFFALSE 23523
23413: GO 23415
23415: DISABLE
23416: LD_INT 0
23418: PPUSH
23419: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
23420: LD_ADDR_VAR 0 2
23424: PUSH
23425: LD_INT 22
23427: PUSH
23428: LD_OWVAR 2
23432: PUSH
23433: EMPTY
23434: LIST
23435: LIST
23436: PUSH
23437: LD_INT 2
23439: PUSH
23440: LD_INT 30
23442: PUSH
23443: LD_INT 27
23445: PUSH
23446: EMPTY
23447: LIST
23448: LIST
23449: PUSH
23450: LD_INT 30
23452: PUSH
23453: LD_INT 26
23455: PUSH
23456: EMPTY
23457: LIST
23458: LIST
23459: PUSH
23460: LD_INT 30
23462: PUSH
23463: LD_INT 28
23465: PUSH
23466: EMPTY
23467: LIST
23468: LIST
23469: PUSH
23470: EMPTY
23471: LIST
23472: LIST
23473: LIST
23474: LIST
23475: PUSH
23476: EMPTY
23477: LIST
23478: LIST
23479: PPUSH
23480: CALL_OW 69
23484: ST_TO_ADDR
// if not tmp then
23485: LD_VAR 0 2
23489: NOT
23490: IFFALSE 23494
// exit ;
23492: GO 23523
// for i in tmp do
23494: LD_ADDR_VAR 0 1
23498: PUSH
23499: LD_VAR 0 2
23503: PUSH
23504: FOR_IN
23505: IFFALSE 23521
// SetLives ( i , 1 ) ;
23507: LD_VAR 0 1
23511: PPUSH
23512: LD_INT 1
23514: PPUSH
23515: CALL_OW 234
23519: GO 23504
23521: POP
23522: POP
// end ;
23523: PPOPN 2
23525: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
23526: LD_EXP 22
23530: PUSH
23531: LD_EXP 71
23535: AND
23536: IFFALSE 23823
23538: GO 23540
23540: DISABLE
23541: LD_INT 0
23543: PPUSH
23544: PPUSH
23545: PPUSH
// begin i := rand ( 1 , 7 ) ;
23546: LD_ADDR_VAR 0 1
23550: PUSH
23551: LD_INT 1
23553: PPUSH
23554: LD_INT 7
23556: PPUSH
23557: CALL_OW 12
23561: ST_TO_ADDR
// case i of 1 :
23562: LD_VAR 0 1
23566: PUSH
23567: LD_INT 1
23569: DOUBLE
23570: EQUAL
23571: IFTRUE 23575
23573: GO 23585
23575: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
23576: LD_STRING earthquake(getX(game), 0, 32)
23578: PPUSH
23579: CALL_OW 559
23583: GO 23823
23585: LD_INT 2
23587: DOUBLE
23588: EQUAL
23589: IFTRUE 23593
23591: GO 23607
23593: POP
// begin ToLua ( displayStucuk(); ) ;
23594: LD_STRING displayStucuk();
23596: PPUSH
23597: CALL_OW 559
// ResetFog ;
23601: CALL_OW 335
// end ; 3 :
23605: GO 23823
23607: LD_INT 3
23609: DOUBLE
23610: EQUAL
23611: IFTRUE 23615
23613: GO 23719
23615: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
23616: LD_ADDR_VAR 0 2
23620: PUSH
23621: LD_INT 22
23623: PUSH
23624: LD_OWVAR 2
23628: PUSH
23629: EMPTY
23630: LIST
23631: LIST
23632: PUSH
23633: LD_INT 25
23635: PUSH
23636: LD_INT 1
23638: PUSH
23639: EMPTY
23640: LIST
23641: LIST
23642: PUSH
23643: EMPTY
23644: LIST
23645: LIST
23646: PPUSH
23647: CALL_OW 69
23651: ST_TO_ADDR
// if not tmp then
23652: LD_VAR 0 2
23656: NOT
23657: IFFALSE 23661
// exit ;
23659: GO 23823
// un := tmp [ rand ( 1 , tmp ) ] ;
23661: LD_ADDR_VAR 0 3
23665: PUSH
23666: LD_VAR 0 2
23670: PUSH
23671: LD_INT 1
23673: PPUSH
23674: LD_VAR 0 2
23678: PPUSH
23679: CALL_OW 12
23683: ARRAY
23684: ST_TO_ADDR
// if Crawls ( un ) then
23685: LD_VAR 0 3
23689: PPUSH
23690: CALL_OW 318
23694: IFFALSE 23705
// ComWalk ( un ) ;
23696: LD_VAR 0 3
23700: PPUSH
23701: CALL_OW 138
// SetClass ( un , class_mortar ) ;
23705: LD_VAR 0 3
23709: PPUSH
23710: LD_INT 8
23712: PPUSH
23713: CALL_OW 336
// end ; 4 :
23717: GO 23823
23719: LD_INT 4
23721: DOUBLE
23722: EQUAL
23723: IFTRUE 23727
23725: GO 23801
23727: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
23728: LD_ADDR_VAR 0 2
23732: PUSH
23733: LD_INT 22
23735: PUSH
23736: LD_OWVAR 2
23740: PUSH
23741: EMPTY
23742: LIST
23743: LIST
23744: PUSH
23745: LD_INT 30
23747: PUSH
23748: LD_INT 29
23750: PUSH
23751: EMPTY
23752: LIST
23753: LIST
23754: PUSH
23755: EMPTY
23756: LIST
23757: LIST
23758: PPUSH
23759: CALL_OW 69
23763: ST_TO_ADDR
// if not tmp then
23764: LD_VAR 0 2
23768: NOT
23769: IFFALSE 23773
// exit ;
23771: GO 23823
// CenterNowOnUnits ( tmp [ 1 ] ) ;
23773: LD_VAR 0 2
23777: PUSH
23778: LD_INT 1
23780: ARRAY
23781: PPUSH
23782: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
23786: LD_VAR 0 2
23790: PUSH
23791: LD_INT 1
23793: ARRAY
23794: PPUSH
23795: CALL_OW 65
// end ; 5 .. 7 :
23799: GO 23823
23801: LD_INT 5
23803: DOUBLE
23804: GREATEREQUAL
23805: IFFALSE 23813
23807: LD_INT 7
23809: DOUBLE
23810: LESSEQUAL
23811: IFTRUE 23815
23813: GO 23822
23815: POP
// StreamSibBomb ; end ;
23816: CALL 20060 0 0
23820: GO 23823
23822: POP
// end ;
23823: PPOPN 3
23825: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
23826: LD_EXP 22
23830: PUSH
23831: LD_EXP 72
23835: AND
23836: IFFALSE 23992
23838: GO 23840
23840: DISABLE
23841: LD_INT 0
23843: PPUSH
23844: PPUSH
23845: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
23846: LD_ADDR_VAR 0 2
23850: PUSH
23851: LD_INT 81
23853: PUSH
23854: LD_OWVAR 2
23858: PUSH
23859: EMPTY
23860: LIST
23861: LIST
23862: PUSH
23863: LD_INT 2
23865: PUSH
23866: LD_INT 21
23868: PUSH
23869: LD_INT 1
23871: PUSH
23872: EMPTY
23873: LIST
23874: LIST
23875: PUSH
23876: LD_INT 21
23878: PUSH
23879: LD_INT 2
23881: PUSH
23882: EMPTY
23883: LIST
23884: LIST
23885: PUSH
23886: EMPTY
23887: LIST
23888: LIST
23889: LIST
23890: PUSH
23891: EMPTY
23892: LIST
23893: LIST
23894: PPUSH
23895: CALL_OW 69
23899: ST_TO_ADDR
// if not tmp then
23900: LD_VAR 0 2
23904: NOT
23905: IFFALSE 23909
// exit ;
23907: GO 23992
// p := 0 ;
23909: LD_ADDR_VAR 0 3
23913: PUSH
23914: LD_INT 0
23916: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23917: LD_INT 35
23919: PPUSH
23920: CALL_OW 67
// p := p + 1 ;
23924: LD_ADDR_VAR 0 3
23928: PUSH
23929: LD_VAR 0 3
23933: PUSH
23934: LD_INT 1
23936: PLUS
23937: ST_TO_ADDR
// for i in tmp do
23938: LD_ADDR_VAR 0 1
23942: PUSH
23943: LD_VAR 0 2
23947: PUSH
23948: FOR_IN
23949: IFFALSE 23980
// if GetLives ( i ) < 1000 then
23951: LD_VAR 0 1
23955: PPUSH
23956: CALL_OW 256
23960: PUSH
23961: LD_INT 1000
23963: LESS
23964: IFFALSE 23978
// SetLives ( i , 1000 ) ;
23966: LD_VAR 0 1
23970: PPUSH
23971: LD_INT 1000
23973: PPUSH
23974: CALL_OW 234
23978: GO 23948
23980: POP
23981: POP
// until p > 20 ;
23982: LD_VAR 0 3
23986: PUSH
23987: LD_INT 20
23989: GREATER
23990: IFFALSE 23917
// end ;
23992: PPOPN 3
23994: END
// every 0 0$1 trigger StreamModeActive and sTime do
23995: LD_EXP 22
23999: PUSH
24000: LD_EXP 73
24004: AND
24005: IFFALSE 24040
24007: GO 24009
24009: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
24010: LD_INT 28
24012: PPUSH
24013: LD_OWVAR 2
24017: PPUSH
24018: LD_INT 2
24020: PPUSH
24021: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
24025: LD_INT 30
24027: PPUSH
24028: LD_OWVAR 2
24032: PPUSH
24033: LD_INT 2
24035: PPUSH
24036: CALL_OW 322
// end ;
24040: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
24041: LD_EXP 22
24045: PUSH
24046: LD_EXP 74
24050: AND
24051: IFFALSE 24172
24053: GO 24055
24055: DISABLE
24056: LD_INT 0
24058: PPUSH
24059: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
24060: LD_ADDR_VAR 0 2
24064: PUSH
24065: LD_INT 22
24067: PUSH
24068: LD_OWVAR 2
24072: PUSH
24073: EMPTY
24074: LIST
24075: LIST
24076: PUSH
24077: LD_INT 21
24079: PUSH
24080: LD_INT 1
24082: PUSH
24083: EMPTY
24084: LIST
24085: LIST
24086: PUSH
24087: LD_INT 3
24089: PUSH
24090: LD_INT 23
24092: PUSH
24093: LD_INT 0
24095: PUSH
24096: EMPTY
24097: LIST
24098: LIST
24099: PUSH
24100: EMPTY
24101: LIST
24102: LIST
24103: PUSH
24104: EMPTY
24105: LIST
24106: LIST
24107: LIST
24108: PPUSH
24109: CALL_OW 69
24113: ST_TO_ADDR
// if not tmp then
24114: LD_VAR 0 2
24118: NOT
24119: IFFALSE 24123
// exit ;
24121: GO 24172
// for i in tmp do
24123: LD_ADDR_VAR 0 1
24127: PUSH
24128: LD_VAR 0 2
24132: PUSH
24133: FOR_IN
24134: IFFALSE 24170
// begin if Crawls ( i ) then
24136: LD_VAR 0 1
24140: PPUSH
24141: CALL_OW 318
24145: IFFALSE 24156
// ComWalk ( i ) ;
24147: LD_VAR 0 1
24151: PPUSH
24152: CALL_OW 138
// SetClass ( i , 2 ) ;
24156: LD_VAR 0 1
24160: PPUSH
24161: LD_INT 2
24163: PPUSH
24164: CALL_OW 336
// end ;
24168: GO 24133
24170: POP
24171: POP
// end ;
24172: PPOPN 2
24174: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
24175: LD_EXP 22
24179: PUSH
24180: LD_EXP 75
24184: AND
24185: IFFALSE 24473
24187: GO 24189
24189: DISABLE
24190: LD_INT 0
24192: PPUSH
24193: PPUSH
24194: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
24195: LD_OWVAR 2
24199: PPUSH
24200: LD_INT 9
24202: PPUSH
24203: LD_INT 1
24205: PPUSH
24206: LD_INT 1
24208: PPUSH
24209: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
24213: LD_INT 9
24215: PPUSH
24216: LD_OWVAR 2
24220: PPUSH
24221: CALL_OW 343
// uc_side := 9 ;
24225: LD_ADDR_OWVAR 20
24229: PUSH
24230: LD_INT 9
24232: ST_TO_ADDR
// uc_nation := 2 ;
24233: LD_ADDR_OWVAR 21
24237: PUSH
24238: LD_INT 2
24240: ST_TO_ADDR
// hc_name := Dark Warrior ;
24241: LD_ADDR_OWVAR 26
24245: PUSH
24246: LD_STRING Dark Warrior
24248: ST_TO_ADDR
// hc_gallery :=  ;
24249: LD_ADDR_OWVAR 33
24253: PUSH
24254: LD_STRING 
24256: ST_TO_ADDR
// hc_noskilllimit := true ;
24257: LD_ADDR_OWVAR 76
24261: PUSH
24262: LD_INT 1
24264: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
24265: LD_ADDR_OWVAR 31
24269: PUSH
24270: LD_INT 30
24272: PUSH
24273: LD_INT 30
24275: PUSH
24276: LD_INT 30
24278: PUSH
24279: LD_INT 30
24281: PUSH
24282: EMPTY
24283: LIST
24284: LIST
24285: LIST
24286: LIST
24287: ST_TO_ADDR
// un := CreateHuman ;
24288: LD_ADDR_VAR 0 3
24292: PUSH
24293: CALL_OW 44
24297: ST_TO_ADDR
// hc_noskilllimit := false ;
24298: LD_ADDR_OWVAR 76
24302: PUSH
24303: LD_INT 0
24305: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
24306: LD_VAR 0 3
24310: PPUSH
24311: LD_INT 1
24313: PPUSH
24314: CALL_OW 51
// ToLua ( playRanger() ) ;
24318: LD_STRING playRanger()
24320: PPUSH
24321: CALL_OW 559
// p := 0 ;
24325: LD_ADDR_VAR 0 2
24329: PUSH
24330: LD_INT 0
24332: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
24333: LD_INT 35
24335: PPUSH
24336: CALL_OW 67
// p := p + 1 ;
24340: LD_ADDR_VAR 0 2
24344: PUSH
24345: LD_VAR 0 2
24349: PUSH
24350: LD_INT 1
24352: PLUS
24353: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
24354: LD_VAR 0 3
24358: PPUSH
24359: CALL_OW 256
24363: PUSH
24364: LD_INT 1000
24366: LESS
24367: IFFALSE 24381
// SetLives ( un , 1000 ) ;
24369: LD_VAR 0 3
24373: PPUSH
24374: LD_INT 1000
24376: PPUSH
24377: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
24381: LD_VAR 0 3
24385: PPUSH
24386: LD_INT 81
24388: PUSH
24389: LD_OWVAR 2
24393: PUSH
24394: EMPTY
24395: LIST
24396: LIST
24397: PUSH
24398: LD_INT 91
24400: PUSH
24401: LD_VAR 0 3
24405: PUSH
24406: LD_INT 30
24408: PUSH
24409: EMPTY
24410: LIST
24411: LIST
24412: LIST
24413: PUSH
24414: EMPTY
24415: LIST
24416: LIST
24417: PPUSH
24418: CALL_OW 69
24422: PPUSH
24423: LD_VAR 0 3
24427: PPUSH
24428: CALL_OW 74
24432: PPUSH
24433: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
24437: LD_VAR 0 2
24441: PUSH
24442: LD_INT 80
24444: GREATER
24445: PUSH
24446: LD_VAR 0 3
24450: PPUSH
24451: CALL_OW 301
24455: OR
24456: IFFALSE 24333
// if un then
24458: LD_VAR 0 3
24462: IFFALSE 24473
// RemoveUnit ( un ) ;
24464: LD_VAR 0 3
24468: PPUSH
24469: CALL_OW 64
// end ;
24473: PPOPN 3
24475: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
24476: LD_EXP 76
24480: IFFALSE 24596
24482: GO 24484
24484: DISABLE
24485: LD_INT 0
24487: PPUSH
24488: PPUSH
24489: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
24490: LD_ADDR_VAR 0 2
24494: PUSH
24495: LD_INT 81
24497: PUSH
24498: LD_OWVAR 2
24502: PUSH
24503: EMPTY
24504: LIST
24505: LIST
24506: PUSH
24507: LD_INT 21
24509: PUSH
24510: LD_INT 1
24512: PUSH
24513: EMPTY
24514: LIST
24515: LIST
24516: PUSH
24517: EMPTY
24518: LIST
24519: LIST
24520: PPUSH
24521: CALL_OW 69
24525: ST_TO_ADDR
// ToLua ( playComputer() ) ;
24526: LD_STRING playComputer()
24528: PPUSH
24529: CALL_OW 559
// if not tmp then
24533: LD_VAR 0 2
24537: NOT
24538: IFFALSE 24542
// exit ;
24540: GO 24596
// for i in tmp do
24542: LD_ADDR_VAR 0 1
24546: PUSH
24547: LD_VAR 0 2
24551: PUSH
24552: FOR_IN
24553: IFFALSE 24594
// for j := 1 to 4 do
24555: LD_ADDR_VAR 0 3
24559: PUSH
24560: DOUBLE
24561: LD_INT 1
24563: DEC
24564: ST_TO_ADDR
24565: LD_INT 4
24567: PUSH
24568: FOR_TO
24569: IFFALSE 24590
// SetSkill ( i , j , 10 ) ;
24571: LD_VAR 0 1
24575: PPUSH
24576: LD_VAR 0 3
24580: PPUSH
24581: LD_INT 10
24583: PPUSH
24584: CALL_OW 237
24588: GO 24568
24590: POP
24591: POP
24592: GO 24552
24594: POP
24595: POP
// end ;
24596: PPOPN 3
24598: END
// every 0 0$1 trigger s30 do var i , tmp ;
24599: LD_EXP 77
24603: IFFALSE 24672
24605: GO 24607
24607: DISABLE
24608: LD_INT 0
24610: PPUSH
24611: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
24612: LD_ADDR_VAR 0 2
24616: PUSH
24617: LD_INT 22
24619: PUSH
24620: LD_OWVAR 2
24624: PUSH
24625: EMPTY
24626: LIST
24627: LIST
24628: PPUSH
24629: CALL_OW 69
24633: ST_TO_ADDR
// if not tmp then
24634: LD_VAR 0 2
24638: NOT
24639: IFFALSE 24643
// exit ;
24641: GO 24672
// for i in tmp do
24643: LD_ADDR_VAR 0 1
24647: PUSH
24648: LD_VAR 0 2
24652: PUSH
24653: FOR_IN
24654: IFFALSE 24670
// SetLives ( i , 300 ) ;
24656: LD_VAR 0 1
24660: PPUSH
24661: LD_INT 300
24663: PPUSH
24664: CALL_OW 234
24668: GO 24653
24670: POP
24671: POP
// end ;
24672: PPOPN 2
24674: END
// every 0 0$1 trigger s60 do var i , tmp ;
24675: LD_EXP 78
24679: IFFALSE 24748
24681: GO 24683
24683: DISABLE
24684: LD_INT 0
24686: PPUSH
24687: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
24688: LD_ADDR_VAR 0 2
24692: PUSH
24693: LD_INT 22
24695: PUSH
24696: LD_OWVAR 2
24700: PUSH
24701: EMPTY
24702: LIST
24703: LIST
24704: PPUSH
24705: CALL_OW 69
24709: ST_TO_ADDR
// if not tmp then
24710: LD_VAR 0 2
24714: NOT
24715: IFFALSE 24719
// exit ;
24717: GO 24748
// for i in tmp do
24719: LD_ADDR_VAR 0 1
24723: PUSH
24724: LD_VAR 0 2
24728: PUSH
24729: FOR_IN
24730: IFFALSE 24746
// SetLives ( i , 600 ) ;
24732: LD_VAR 0 1
24736: PPUSH
24737: LD_INT 600
24739: PPUSH
24740: CALL_OW 234
24744: GO 24729
24746: POP
24747: POP
// end ;
24748: PPOPN 2
24750: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
24751: LD_INT 0
24753: PPUSH
// case cmd of 301 :
24754: LD_VAR 0 1
24758: PUSH
24759: LD_INT 301
24761: DOUBLE
24762: EQUAL
24763: IFTRUE 24767
24765: GO 24799
24767: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
24768: LD_VAR 0 6
24772: PPUSH
24773: LD_VAR 0 7
24777: PPUSH
24778: LD_VAR 0 8
24782: PPUSH
24783: LD_VAR 0 4
24787: PPUSH
24788: LD_VAR 0 5
24792: PPUSH
24793: CALL 26000 0 5
24797: GO 24920
24799: LD_INT 302
24801: DOUBLE
24802: EQUAL
24803: IFTRUE 24807
24805: GO 24844
24807: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
24808: LD_VAR 0 6
24812: PPUSH
24813: LD_VAR 0 7
24817: PPUSH
24818: LD_VAR 0 8
24822: PPUSH
24823: LD_VAR 0 9
24827: PPUSH
24828: LD_VAR 0 4
24832: PPUSH
24833: LD_VAR 0 5
24837: PPUSH
24838: CALL 26091 0 6
24842: GO 24920
24844: LD_INT 303
24846: DOUBLE
24847: EQUAL
24848: IFTRUE 24852
24850: GO 24889
24852: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
24853: LD_VAR 0 6
24857: PPUSH
24858: LD_VAR 0 7
24862: PPUSH
24863: LD_VAR 0 8
24867: PPUSH
24868: LD_VAR 0 9
24872: PPUSH
24873: LD_VAR 0 4
24877: PPUSH
24878: LD_VAR 0 5
24882: PPUSH
24883: CALL 24925 0 6
24887: GO 24920
24889: LD_INT 304
24891: DOUBLE
24892: EQUAL
24893: IFTRUE 24897
24895: GO 24919
24897: POP
// hHackTeleport ( unit , x , y ) ; end ;
24898: LD_VAR 0 2
24902: PPUSH
24903: LD_VAR 0 4
24907: PPUSH
24908: LD_VAR 0 5
24912: PPUSH
24913: CALL 26684 0 3
24917: GO 24920
24919: POP
// end ;
24920: LD_VAR 0 12
24924: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
24925: LD_INT 0
24927: PPUSH
24928: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
24929: LD_VAR 0 1
24933: PUSH
24934: LD_INT 1
24936: LESS
24937: PUSH
24938: LD_VAR 0 1
24942: PUSH
24943: LD_INT 3
24945: GREATER
24946: OR
24947: PUSH
24948: LD_VAR 0 5
24952: PPUSH
24953: LD_VAR 0 6
24957: PPUSH
24958: CALL_OW 428
24962: OR
24963: IFFALSE 24967
// exit ;
24965: GO 25687
// uc_side := your_side ;
24967: LD_ADDR_OWVAR 20
24971: PUSH
24972: LD_OWVAR 2
24976: ST_TO_ADDR
// uc_nation := nation ;
24977: LD_ADDR_OWVAR 21
24981: PUSH
24982: LD_VAR 0 1
24986: ST_TO_ADDR
// bc_level = 1 ;
24987: LD_ADDR_OWVAR 43
24991: PUSH
24992: LD_INT 1
24994: ST_TO_ADDR
// case btype of 1 :
24995: LD_VAR 0 2
24999: PUSH
25000: LD_INT 1
25002: DOUBLE
25003: EQUAL
25004: IFTRUE 25008
25006: GO 25019
25008: POP
// bc_type := b_depot ; 2 :
25009: LD_ADDR_OWVAR 42
25013: PUSH
25014: LD_INT 0
25016: ST_TO_ADDR
25017: GO 25631
25019: LD_INT 2
25021: DOUBLE
25022: EQUAL
25023: IFTRUE 25027
25025: GO 25038
25027: POP
// bc_type := b_warehouse ; 3 :
25028: LD_ADDR_OWVAR 42
25032: PUSH
25033: LD_INT 1
25035: ST_TO_ADDR
25036: GO 25631
25038: LD_INT 3
25040: DOUBLE
25041: EQUAL
25042: IFTRUE 25046
25044: GO 25057
25046: POP
// bc_type := b_lab ; 4 .. 9 :
25047: LD_ADDR_OWVAR 42
25051: PUSH
25052: LD_INT 6
25054: ST_TO_ADDR
25055: GO 25631
25057: LD_INT 4
25059: DOUBLE
25060: GREATEREQUAL
25061: IFFALSE 25069
25063: LD_INT 9
25065: DOUBLE
25066: LESSEQUAL
25067: IFTRUE 25071
25069: GO 25123
25071: POP
// begin bc_type := b_lab_half ;
25072: LD_ADDR_OWVAR 42
25076: PUSH
25077: LD_INT 7
25079: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
25080: LD_ADDR_OWVAR 44
25084: PUSH
25085: LD_INT 10
25087: PUSH
25088: LD_INT 11
25090: PUSH
25091: LD_INT 12
25093: PUSH
25094: LD_INT 15
25096: PUSH
25097: LD_INT 14
25099: PUSH
25100: LD_INT 13
25102: PUSH
25103: EMPTY
25104: LIST
25105: LIST
25106: LIST
25107: LIST
25108: LIST
25109: LIST
25110: PUSH
25111: LD_VAR 0 2
25115: PUSH
25116: LD_INT 3
25118: MINUS
25119: ARRAY
25120: ST_TO_ADDR
// end ; 10 .. 13 :
25121: GO 25631
25123: LD_INT 10
25125: DOUBLE
25126: GREATEREQUAL
25127: IFFALSE 25135
25129: LD_INT 13
25131: DOUBLE
25132: LESSEQUAL
25133: IFTRUE 25137
25135: GO 25214
25137: POP
// begin bc_type := b_lab_full ;
25138: LD_ADDR_OWVAR 42
25142: PUSH
25143: LD_INT 8
25145: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
25146: LD_ADDR_OWVAR 44
25150: PUSH
25151: LD_INT 10
25153: PUSH
25154: LD_INT 12
25156: PUSH
25157: LD_INT 14
25159: PUSH
25160: LD_INT 13
25162: PUSH
25163: EMPTY
25164: LIST
25165: LIST
25166: LIST
25167: LIST
25168: PUSH
25169: LD_VAR 0 2
25173: PUSH
25174: LD_INT 9
25176: MINUS
25177: ARRAY
25178: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
25179: LD_ADDR_OWVAR 45
25183: PUSH
25184: LD_INT 11
25186: PUSH
25187: LD_INT 15
25189: PUSH
25190: LD_INT 12
25192: PUSH
25193: LD_INT 15
25195: PUSH
25196: EMPTY
25197: LIST
25198: LIST
25199: LIST
25200: LIST
25201: PUSH
25202: LD_VAR 0 2
25206: PUSH
25207: LD_INT 9
25209: MINUS
25210: ARRAY
25211: ST_TO_ADDR
// end ; 14 :
25212: GO 25631
25214: LD_INT 14
25216: DOUBLE
25217: EQUAL
25218: IFTRUE 25222
25220: GO 25233
25222: POP
// bc_type := b_workshop ; 15 :
25223: LD_ADDR_OWVAR 42
25227: PUSH
25228: LD_INT 2
25230: ST_TO_ADDR
25231: GO 25631
25233: LD_INT 15
25235: DOUBLE
25236: EQUAL
25237: IFTRUE 25241
25239: GO 25252
25241: POP
// bc_type := b_factory ; 16 :
25242: LD_ADDR_OWVAR 42
25246: PUSH
25247: LD_INT 3
25249: ST_TO_ADDR
25250: GO 25631
25252: LD_INT 16
25254: DOUBLE
25255: EQUAL
25256: IFTRUE 25260
25258: GO 25271
25260: POP
// bc_type := b_ext_gun ; 17 :
25261: LD_ADDR_OWVAR 42
25265: PUSH
25266: LD_INT 17
25268: ST_TO_ADDR
25269: GO 25631
25271: LD_INT 17
25273: DOUBLE
25274: EQUAL
25275: IFTRUE 25279
25277: GO 25307
25279: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
25280: LD_ADDR_OWVAR 42
25284: PUSH
25285: LD_INT 19
25287: PUSH
25288: LD_INT 23
25290: PUSH
25291: LD_INT 19
25293: PUSH
25294: EMPTY
25295: LIST
25296: LIST
25297: LIST
25298: PUSH
25299: LD_VAR 0 1
25303: ARRAY
25304: ST_TO_ADDR
25305: GO 25631
25307: LD_INT 18
25309: DOUBLE
25310: EQUAL
25311: IFTRUE 25315
25313: GO 25326
25315: POP
// bc_type := b_ext_radar ; 19 :
25316: LD_ADDR_OWVAR 42
25320: PUSH
25321: LD_INT 20
25323: ST_TO_ADDR
25324: GO 25631
25326: LD_INT 19
25328: DOUBLE
25329: EQUAL
25330: IFTRUE 25334
25332: GO 25345
25334: POP
// bc_type := b_ext_radio ; 20 :
25335: LD_ADDR_OWVAR 42
25339: PUSH
25340: LD_INT 22
25342: ST_TO_ADDR
25343: GO 25631
25345: LD_INT 20
25347: DOUBLE
25348: EQUAL
25349: IFTRUE 25353
25351: GO 25364
25353: POP
// bc_type := b_ext_siberium ; 21 :
25354: LD_ADDR_OWVAR 42
25358: PUSH
25359: LD_INT 21
25361: ST_TO_ADDR
25362: GO 25631
25364: LD_INT 21
25366: DOUBLE
25367: EQUAL
25368: IFTRUE 25372
25370: GO 25383
25372: POP
// bc_type := b_ext_computer ; 22 :
25373: LD_ADDR_OWVAR 42
25377: PUSH
25378: LD_INT 24
25380: ST_TO_ADDR
25381: GO 25631
25383: LD_INT 22
25385: DOUBLE
25386: EQUAL
25387: IFTRUE 25391
25389: GO 25402
25391: POP
// bc_type := b_ext_track ; 23 :
25392: LD_ADDR_OWVAR 42
25396: PUSH
25397: LD_INT 16
25399: ST_TO_ADDR
25400: GO 25631
25402: LD_INT 23
25404: DOUBLE
25405: EQUAL
25406: IFTRUE 25410
25408: GO 25421
25410: POP
// bc_type := b_ext_laser ; 24 :
25411: LD_ADDR_OWVAR 42
25415: PUSH
25416: LD_INT 25
25418: ST_TO_ADDR
25419: GO 25631
25421: LD_INT 24
25423: DOUBLE
25424: EQUAL
25425: IFTRUE 25429
25427: GO 25440
25429: POP
// bc_type := b_control_tower ; 25 :
25430: LD_ADDR_OWVAR 42
25434: PUSH
25435: LD_INT 36
25437: ST_TO_ADDR
25438: GO 25631
25440: LD_INT 25
25442: DOUBLE
25443: EQUAL
25444: IFTRUE 25448
25446: GO 25459
25448: POP
// bc_type := b_breastwork ; 26 :
25449: LD_ADDR_OWVAR 42
25453: PUSH
25454: LD_INT 31
25456: ST_TO_ADDR
25457: GO 25631
25459: LD_INT 26
25461: DOUBLE
25462: EQUAL
25463: IFTRUE 25467
25465: GO 25478
25467: POP
// bc_type := b_bunker ; 27 :
25468: LD_ADDR_OWVAR 42
25472: PUSH
25473: LD_INT 32
25475: ST_TO_ADDR
25476: GO 25631
25478: LD_INT 27
25480: DOUBLE
25481: EQUAL
25482: IFTRUE 25486
25484: GO 25497
25486: POP
// bc_type := b_turret ; 28 :
25487: LD_ADDR_OWVAR 42
25491: PUSH
25492: LD_INT 33
25494: ST_TO_ADDR
25495: GO 25631
25497: LD_INT 28
25499: DOUBLE
25500: EQUAL
25501: IFTRUE 25505
25503: GO 25516
25505: POP
// bc_type := b_armoury ; 29 :
25506: LD_ADDR_OWVAR 42
25510: PUSH
25511: LD_INT 4
25513: ST_TO_ADDR
25514: GO 25631
25516: LD_INT 29
25518: DOUBLE
25519: EQUAL
25520: IFTRUE 25524
25522: GO 25535
25524: POP
// bc_type := b_barracks ; 30 :
25525: LD_ADDR_OWVAR 42
25529: PUSH
25530: LD_INT 5
25532: ST_TO_ADDR
25533: GO 25631
25535: LD_INT 30
25537: DOUBLE
25538: EQUAL
25539: IFTRUE 25543
25541: GO 25554
25543: POP
// bc_type := b_solar_power ; 31 :
25544: LD_ADDR_OWVAR 42
25548: PUSH
25549: LD_INT 27
25551: ST_TO_ADDR
25552: GO 25631
25554: LD_INT 31
25556: DOUBLE
25557: EQUAL
25558: IFTRUE 25562
25560: GO 25573
25562: POP
// bc_type := b_oil_power ; 32 :
25563: LD_ADDR_OWVAR 42
25567: PUSH
25568: LD_INT 26
25570: ST_TO_ADDR
25571: GO 25631
25573: LD_INT 32
25575: DOUBLE
25576: EQUAL
25577: IFTRUE 25581
25579: GO 25592
25581: POP
// bc_type := b_siberite_power ; 33 :
25582: LD_ADDR_OWVAR 42
25586: PUSH
25587: LD_INT 28
25589: ST_TO_ADDR
25590: GO 25631
25592: LD_INT 33
25594: DOUBLE
25595: EQUAL
25596: IFTRUE 25600
25598: GO 25611
25600: POP
// bc_type := b_oil_mine ; 34 :
25601: LD_ADDR_OWVAR 42
25605: PUSH
25606: LD_INT 29
25608: ST_TO_ADDR
25609: GO 25631
25611: LD_INT 34
25613: DOUBLE
25614: EQUAL
25615: IFTRUE 25619
25617: GO 25630
25619: POP
// bc_type := b_siberite_mine ; end ;
25620: LD_ADDR_OWVAR 42
25624: PUSH
25625: LD_INT 30
25627: ST_TO_ADDR
25628: GO 25631
25630: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
25631: LD_ADDR_VAR 0 8
25635: PUSH
25636: LD_VAR 0 5
25640: PPUSH
25641: LD_VAR 0 6
25645: PPUSH
25646: LD_VAR 0 3
25650: PPUSH
25651: CALL_OW 47
25655: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
25656: LD_OWVAR 42
25660: PUSH
25661: LD_INT 32
25663: PUSH
25664: LD_INT 33
25666: PUSH
25667: EMPTY
25668: LIST
25669: LIST
25670: IN
25671: IFFALSE 25687
// PlaceWeaponTurret ( b , weapon ) ;
25673: LD_VAR 0 8
25677: PPUSH
25678: LD_VAR 0 4
25682: PPUSH
25683: CALL_OW 431
// end ;
25687: LD_VAR 0 7
25691: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
25692: LD_INT 0
25694: PPUSH
25695: PPUSH
25696: PPUSH
25697: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
25698: LD_ADDR_VAR 0 4
25702: PUSH
25703: LD_INT 22
25705: PUSH
25706: LD_OWVAR 2
25710: PUSH
25711: EMPTY
25712: LIST
25713: LIST
25714: PUSH
25715: LD_INT 2
25717: PUSH
25718: LD_INT 30
25720: PUSH
25721: LD_INT 0
25723: PUSH
25724: EMPTY
25725: LIST
25726: LIST
25727: PUSH
25728: LD_INT 30
25730: PUSH
25731: LD_INT 1
25733: PUSH
25734: EMPTY
25735: LIST
25736: LIST
25737: PUSH
25738: EMPTY
25739: LIST
25740: LIST
25741: LIST
25742: PUSH
25743: EMPTY
25744: LIST
25745: LIST
25746: PPUSH
25747: CALL_OW 69
25751: ST_TO_ADDR
// if not tmp then
25752: LD_VAR 0 4
25756: NOT
25757: IFFALSE 25761
// exit ;
25759: GO 25820
// for i in tmp do
25761: LD_ADDR_VAR 0 2
25765: PUSH
25766: LD_VAR 0 4
25770: PUSH
25771: FOR_IN
25772: IFFALSE 25818
// for j = 1 to 3 do
25774: LD_ADDR_VAR 0 3
25778: PUSH
25779: DOUBLE
25780: LD_INT 1
25782: DEC
25783: ST_TO_ADDR
25784: LD_INT 3
25786: PUSH
25787: FOR_TO
25788: IFFALSE 25814
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
25790: LD_VAR 0 2
25794: PPUSH
25795: CALL_OW 274
25799: PPUSH
25800: LD_VAR 0 3
25804: PPUSH
25805: LD_INT 99999
25807: PPUSH
25808: CALL_OW 277
25812: GO 25787
25814: POP
25815: POP
25816: GO 25771
25818: POP
25819: POP
// end ;
25820: LD_VAR 0 1
25824: RET
// export function hHackSetLevel10 ; var i , j ; begin
25825: LD_INT 0
25827: PPUSH
25828: PPUSH
25829: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
25830: LD_ADDR_VAR 0 2
25834: PUSH
25835: LD_INT 21
25837: PUSH
25838: LD_INT 1
25840: PUSH
25841: EMPTY
25842: LIST
25843: LIST
25844: PPUSH
25845: CALL_OW 69
25849: PUSH
25850: FOR_IN
25851: IFFALSE 25903
// if IsSelected ( i ) then
25853: LD_VAR 0 2
25857: PPUSH
25858: CALL_OW 306
25862: IFFALSE 25901
// begin for j := 1 to 4 do
25864: LD_ADDR_VAR 0 3
25868: PUSH
25869: DOUBLE
25870: LD_INT 1
25872: DEC
25873: ST_TO_ADDR
25874: LD_INT 4
25876: PUSH
25877: FOR_TO
25878: IFFALSE 25899
// SetSkill ( i , j , 10 ) ;
25880: LD_VAR 0 2
25884: PPUSH
25885: LD_VAR 0 3
25889: PPUSH
25890: LD_INT 10
25892: PPUSH
25893: CALL_OW 237
25897: GO 25877
25899: POP
25900: POP
// end ;
25901: GO 25850
25903: POP
25904: POP
// end ;
25905: LD_VAR 0 1
25909: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
25910: LD_INT 0
25912: PPUSH
25913: PPUSH
25914: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
25915: LD_ADDR_VAR 0 2
25919: PUSH
25920: LD_INT 22
25922: PUSH
25923: LD_OWVAR 2
25927: PUSH
25928: EMPTY
25929: LIST
25930: LIST
25931: PUSH
25932: LD_INT 21
25934: PUSH
25935: LD_INT 1
25937: PUSH
25938: EMPTY
25939: LIST
25940: LIST
25941: PUSH
25942: EMPTY
25943: LIST
25944: LIST
25945: PPUSH
25946: CALL_OW 69
25950: PUSH
25951: FOR_IN
25952: IFFALSE 25993
// begin for j := 1 to 4 do
25954: LD_ADDR_VAR 0 3
25958: PUSH
25959: DOUBLE
25960: LD_INT 1
25962: DEC
25963: ST_TO_ADDR
25964: LD_INT 4
25966: PUSH
25967: FOR_TO
25968: IFFALSE 25989
// SetSkill ( i , j , 10 ) ;
25970: LD_VAR 0 2
25974: PPUSH
25975: LD_VAR 0 3
25979: PPUSH
25980: LD_INT 10
25982: PPUSH
25983: CALL_OW 237
25987: GO 25967
25989: POP
25990: POP
// end ;
25991: GO 25951
25993: POP
25994: POP
// end ;
25995: LD_VAR 0 1
25999: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
26000: LD_INT 0
26002: PPUSH
// uc_side := your_side ;
26003: LD_ADDR_OWVAR 20
26007: PUSH
26008: LD_OWVAR 2
26012: ST_TO_ADDR
// uc_nation := nation ;
26013: LD_ADDR_OWVAR 21
26017: PUSH
26018: LD_VAR 0 1
26022: ST_TO_ADDR
// InitHc ;
26023: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
26027: LD_INT 0
26029: PPUSH
26030: LD_VAR 0 2
26034: PPUSH
26035: LD_VAR 0 3
26039: PPUSH
26040: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
26044: LD_VAR 0 4
26048: PPUSH
26049: LD_VAR 0 5
26053: PPUSH
26054: CALL_OW 428
26058: PUSH
26059: LD_INT 0
26061: EQUAL
26062: IFFALSE 26086
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
26064: CALL_OW 44
26068: PPUSH
26069: LD_VAR 0 4
26073: PPUSH
26074: LD_VAR 0 5
26078: PPUSH
26079: LD_INT 1
26081: PPUSH
26082: CALL_OW 48
// end ;
26086: LD_VAR 0 6
26090: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
26091: LD_INT 0
26093: PPUSH
26094: PPUSH
// uc_side := your_side ;
26095: LD_ADDR_OWVAR 20
26099: PUSH
26100: LD_OWVAR 2
26104: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
26105: LD_VAR 0 1
26109: PUSH
26110: LD_INT 1
26112: PUSH
26113: LD_INT 2
26115: PUSH
26116: LD_INT 3
26118: PUSH
26119: LD_INT 4
26121: PUSH
26122: LD_INT 5
26124: PUSH
26125: EMPTY
26126: LIST
26127: LIST
26128: LIST
26129: LIST
26130: LIST
26131: IN
26132: IFFALSE 26144
// uc_nation := nation_american else
26134: LD_ADDR_OWVAR 21
26138: PUSH
26139: LD_INT 1
26141: ST_TO_ADDR
26142: GO 26187
// if chassis in [ 11 , 12 , 13 , 14 ] then
26144: LD_VAR 0 1
26148: PUSH
26149: LD_INT 11
26151: PUSH
26152: LD_INT 12
26154: PUSH
26155: LD_INT 13
26157: PUSH
26158: LD_INT 14
26160: PUSH
26161: EMPTY
26162: LIST
26163: LIST
26164: LIST
26165: LIST
26166: IN
26167: IFFALSE 26179
// uc_nation := nation_arabian else
26169: LD_ADDR_OWVAR 21
26173: PUSH
26174: LD_INT 2
26176: ST_TO_ADDR
26177: GO 26187
// uc_nation := nation_russian ;
26179: LD_ADDR_OWVAR 21
26183: PUSH
26184: LD_INT 3
26186: ST_TO_ADDR
// vc_chassis := chassis ;
26187: LD_ADDR_OWVAR 37
26191: PUSH
26192: LD_VAR 0 1
26196: ST_TO_ADDR
// vc_engine := engine ;
26197: LD_ADDR_OWVAR 39
26201: PUSH
26202: LD_VAR 0 2
26206: ST_TO_ADDR
// vc_control := control ;
26207: LD_ADDR_OWVAR 38
26211: PUSH
26212: LD_VAR 0 3
26216: ST_TO_ADDR
// vc_weapon := weapon ;
26217: LD_ADDR_OWVAR 40
26221: PUSH
26222: LD_VAR 0 4
26226: ST_TO_ADDR
// un := CreateVehicle ;
26227: LD_ADDR_VAR 0 8
26231: PUSH
26232: CALL_OW 45
26236: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
26237: LD_VAR 0 8
26241: PPUSH
26242: LD_INT 0
26244: PPUSH
26245: LD_INT 5
26247: PPUSH
26248: CALL_OW 12
26252: PPUSH
26253: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
26257: LD_VAR 0 8
26261: PPUSH
26262: LD_VAR 0 5
26266: PPUSH
26267: LD_VAR 0 6
26271: PPUSH
26272: LD_INT 1
26274: PPUSH
26275: CALL_OW 48
// end ;
26279: LD_VAR 0 7
26283: RET
// export hInvincible ; every 1 do
26284: GO 26286
26286: DISABLE
// hInvincible := [ ] ;
26287: LD_ADDR_EXP 79
26291: PUSH
26292: EMPTY
26293: ST_TO_ADDR
26294: END
// every 10 do var i ;
26295: GO 26297
26297: DISABLE
26298: LD_INT 0
26300: PPUSH
// begin enable ;
26301: ENABLE
// if not hInvincible then
26302: LD_EXP 79
26306: NOT
26307: IFFALSE 26311
// exit ;
26309: GO 26355
// for i in hInvincible do
26311: LD_ADDR_VAR 0 1
26315: PUSH
26316: LD_EXP 79
26320: PUSH
26321: FOR_IN
26322: IFFALSE 26353
// if GetLives ( i ) < 1000 then
26324: LD_VAR 0 1
26328: PPUSH
26329: CALL_OW 256
26333: PUSH
26334: LD_INT 1000
26336: LESS
26337: IFFALSE 26351
// SetLives ( i , 1000 ) ;
26339: LD_VAR 0 1
26343: PPUSH
26344: LD_INT 1000
26346: PPUSH
26347: CALL_OW 234
26351: GO 26321
26353: POP
26354: POP
// end ;
26355: PPOPN 1
26357: END
// export function hHackInvincible ; var i ; begin
26358: LD_INT 0
26360: PPUSH
26361: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
26362: LD_ADDR_VAR 0 2
26366: PUSH
26367: LD_INT 2
26369: PUSH
26370: LD_INT 21
26372: PUSH
26373: LD_INT 1
26375: PUSH
26376: EMPTY
26377: LIST
26378: LIST
26379: PUSH
26380: LD_INT 21
26382: PUSH
26383: LD_INT 2
26385: PUSH
26386: EMPTY
26387: LIST
26388: LIST
26389: PUSH
26390: EMPTY
26391: LIST
26392: LIST
26393: LIST
26394: PPUSH
26395: CALL_OW 69
26399: PUSH
26400: FOR_IN
26401: IFFALSE 26462
// if IsSelected ( i ) then
26403: LD_VAR 0 2
26407: PPUSH
26408: CALL_OW 306
26412: IFFALSE 26460
// begin if i in hInvincible then
26414: LD_VAR 0 2
26418: PUSH
26419: LD_EXP 79
26423: IN
26424: IFFALSE 26444
// hInvincible := hInvincible diff i else
26426: LD_ADDR_EXP 79
26430: PUSH
26431: LD_EXP 79
26435: PUSH
26436: LD_VAR 0 2
26440: DIFF
26441: ST_TO_ADDR
26442: GO 26460
// hInvincible := hInvincible union i ;
26444: LD_ADDR_EXP 79
26448: PUSH
26449: LD_EXP 79
26453: PUSH
26454: LD_VAR 0 2
26458: UNION
26459: ST_TO_ADDR
// end ;
26460: GO 26400
26462: POP
26463: POP
// end ;
26464: LD_VAR 0 1
26468: RET
// export function hHackInvisible ; var i , j ; begin
26469: LD_INT 0
26471: PPUSH
26472: PPUSH
26473: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
26474: LD_ADDR_VAR 0 2
26478: PUSH
26479: LD_INT 21
26481: PUSH
26482: LD_INT 1
26484: PUSH
26485: EMPTY
26486: LIST
26487: LIST
26488: PPUSH
26489: CALL_OW 69
26493: PUSH
26494: FOR_IN
26495: IFFALSE 26519
// if IsSelected ( i ) then
26497: LD_VAR 0 2
26501: PPUSH
26502: CALL_OW 306
26506: IFFALSE 26517
// ComForceInvisible ( i ) ;
26508: LD_VAR 0 2
26512: PPUSH
26513: CALL_OW 496
26517: GO 26494
26519: POP
26520: POP
// end ;
26521: LD_VAR 0 1
26525: RET
// export function hHackChangeYourSide ; begin
26526: LD_INT 0
26528: PPUSH
// if your_side = 8 then
26529: LD_OWVAR 2
26533: PUSH
26534: LD_INT 8
26536: EQUAL
26537: IFFALSE 26549
// your_side := 0 else
26539: LD_ADDR_OWVAR 2
26543: PUSH
26544: LD_INT 0
26546: ST_TO_ADDR
26547: GO 26563
// your_side := your_side + 1 ;
26549: LD_ADDR_OWVAR 2
26553: PUSH
26554: LD_OWVAR 2
26558: PUSH
26559: LD_INT 1
26561: PLUS
26562: ST_TO_ADDR
// end ;
26563: LD_VAR 0 1
26567: RET
// export function hHackChangeUnitSide ; var i , j ; begin
26568: LD_INT 0
26570: PPUSH
26571: PPUSH
26572: PPUSH
// for i in all_units do
26573: LD_ADDR_VAR 0 2
26577: PUSH
26578: LD_OWVAR 3
26582: PUSH
26583: FOR_IN
26584: IFFALSE 26662
// if IsSelected ( i ) then
26586: LD_VAR 0 2
26590: PPUSH
26591: CALL_OW 306
26595: IFFALSE 26660
// begin j := GetSide ( i ) ;
26597: LD_ADDR_VAR 0 3
26601: PUSH
26602: LD_VAR 0 2
26606: PPUSH
26607: CALL_OW 255
26611: ST_TO_ADDR
// if j = 8 then
26612: LD_VAR 0 3
26616: PUSH
26617: LD_INT 8
26619: EQUAL
26620: IFFALSE 26632
// j := 0 else
26622: LD_ADDR_VAR 0 3
26626: PUSH
26627: LD_INT 0
26629: ST_TO_ADDR
26630: GO 26646
// j := j + 1 ;
26632: LD_ADDR_VAR 0 3
26636: PUSH
26637: LD_VAR 0 3
26641: PUSH
26642: LD_INT 1
26644: PLUS
26645: ST_TO_ADDR
// SetSide ( i , j ) ;
26646: LD_VAR 0 2
26650: PPUSH
26651: LD_VAR 0 3
26655: PPUSH
26656: CALL_OW 235
// end ;
26660: GO 26583
26662: POP
26663: POP
// end ;
26664: LD_VAR 0 1
26668: RET
// export function hHackFog ; begin
26669: LD_INT 0
26671: PPUSH
// FogOff ( true ) ;
26672: LD_INT 1
26674: PPUSH
26675: CALL_OW 344
// end ;
26679: LD_VAR 0 1
26683: RET
// export function hHackTeleport ( unit , x , y ) ; begin
26684: LD_INT 0
26686: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
26687: LD_VAR 0 1
26691: PPUSH
26692: LD_VAR 0 2
26696: PPUSH
26697: LD_VAR 0 3
26701: PPUSH
26702: LD_INT 1
26704: PPUSH
26705: LD_INT 1
26707: PPUSH
26708: CALL_OW 483
// CenterOnXY ( x , y ) ;
26712: LD_VAR 0 2
26716: PPUSH
26717: LD_VAR 0 3
26721: PPUSH
26722: CALL_OW 84
// end ;
26726: LD_VAR 0 4
26730: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
26731: LD_INT 0
26733: PPUSH
26734: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
26735: LD_VAR 0 1
26739: NOT
26740: PUSH
26741: LD_VAR 0 2
26745: PPUSH
26746: LD_VAR 0 3
26750: PPUSH
26751: CALL_OW 488
26755: NOT
26756: OR
26757: PUSH
26758: LD_VAR 0 1
26762: PPUSH
26763: CALL_OW 266
26767: PUSH
26768: LD_INT 3
26770: NONEQUAL
26771: PUSH
26772: LD_VAR 0 1
26776: PPUSH
26777: CALL_OW 247
26781: PUSH
26782: LD_INT 1
26784: EQUAL
26785: NOT
26786: AND
26787: OR
26788: IFFALSE 26792
// exit ;
26790: GO 26941
// if GetType ( factory ) = unit_human then
26792: LD_VAR 0 1
26796: PPUSH
26797: CALL_OW 247
26801: PUSH
26802: LD_INT 1
26804: EQUAL
26805: IFFALSE 26822
// factory := IsInUnit ( factory ) ;
26807: LD_ADDR_VAR 0 1
26811: PUSH
26812: LD_VAR 0 1
26816: PPUSH
26817: CALL_OW 310
26821: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
26822: LD_VAR 0 1
26826: PPUSH
26827: CALL_OW 266
26831: PUSH
26832: LD_INT 3
26834: NONEQUAL
26835: IFFALSE 26839
// exit ;
26837: GO 26941
// if HexInfo ( x , y ) = factory then
26839: LD_VAR 0 2
26843: PPUSH
26844: LD_VAR 0 3
26848: PPUSH
26849: CALL_OW 428
26853: PUSH
26854: LD_VAR 0 1
26858: EQUAL
26859: IFFALSE 26886
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
26861: LD_ADDR_EXP 80
26865: PUSH
26866: LD_EXP 80
26870: PPUSH
26871: LD_VAR 0 1
26875: PPUSH
26876: LD_INT 0
26878: PPUSH
26879: CALL_OW 1
26883: ST_TO_ADDR
26884: GO 26937
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
26886: LD_ADDR_EXP 80
26890: PUSH
26891: LD_EXP 80
26895: PPUSH
26896: LD_VAR 0 1
26900: PPUSH
26901: LD_VAR 0 1
26905: PPUSH
26906: CALL_OW 255
26910: PUSH
26911: LD_VAR 0 1
26915: PUSH
26916: LD_VAR 0 2
26920: PUSH
26921: LD_VAR 0 3
26925: PUSH
26926: EMPTY
26927: LIST
26928: LIST
26929: LIST
26930: LIST
26931: PPUSH
26932: CALL_OW 1
26936: ST_TO_ADDR
// UpdateFactoryWaypoints ;
26937: CALL 26946 0 0
// end ;
26941: LD_VAR 0 4
26945: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
26946: LD_INT 0
26948: PPUSH
26949: PPUSH
26950: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
26951: LD_STRING resetFactoryWaypoint();
26953: PPUSH
26954: CALL_OW 559
// if factoryWaypoints then
26958: LD_EXP 80
26962: IFFALSE 27088
// begin list := PrepareArray ( factoryWaypoints ) ;
26964: LD_ADDR_VAR 0 3
26968: PUSH
26969: LD_EXP 80
26973: PPUSH
26974: CALL 73557 0 1
26978: ST_TO_ADDR
// for i := 1 to list do
26979: LD_ADDR_VAR 0 2
26983: PUSH
26984: DOUBLE
26985: LD_INT 1
26987: DEC
26988: ST_TO_ADDR
26989: LD_VAR 0 3
26993: PUSH
26994: FOR_TO
26995: IFFALSE 27086
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
26997: LD_STRING setFactoryWaypointXY(
26999: PUSH
27000: LD_VAR 0 3
27004: PUSH
27005: LD_VAR 0 2
27009: ARRAY
27010: PUSH
27011: LD_INT 1
27013: ARRAY
27014: STR
27015: PUSH
27016: LD_STRING ,
27018: STR
27019: PUSH
27020: LD_VAR 0 3
27024: PUSH
27025: LD_VAR 0 2
27029: ARRAY
27030: PUSH
27031: LD_INT 2
27033: ARRAY
27034: STR
27035: PUSH
27036: LD_STRING ,
27038: STR
27039: PUSH
27040: LD_VAR 0 3
27044: PUSH
27045: LD_VAR 0 2
27049: ARRAY
27050: PUSH
27051: LD_INT 3
27053: ARRAY
27054: STR
27055: PUSH
27056: LD_STRING ,
27058: STR
27059: PUSH
27060: LD_VAR 0 3
27064: PUSH
27065: LD_VAR 0 2
27069: ARRAY
27070: PUSH
27071: LD_INT 4
27073: ARRAY
27074: STR
27075: PUSH
27076: LD_STRING )
27078: STR
27079: PPUSH
27080: CALL_OW 559
27084: GO 26994
27086: POP
27087: POP
// end ; end ;
27088: LD_VAR 0 1
27092: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
27093: LD_INT 0
27095: PPUSH
// if HexInfo ( x , y ) = warehouse then
27096: LD_VAR 0 2
27100: PPUSH
27101: LD_VAR 0 3
27105: PPUSH
27106: CALL_OW 428
27110: PUSH
27111: LD_VAR 0 1
27115: EQUAL
27116: IFFALSE 27143
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
27118: LD_ADDR_EXP 81
27122: PUSH
27123: LD_EXP 81
27127: PPUSH
27128: LD_VAR 0 1
27132: PPUSH
27133: LD_INT 0
27135: PPUSH
27136: CALL_OW 1
27140: ST_TO_ADDR
27141: GO 27194
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
27143: LD_ADDR_EXP 81
27147: PUSH
27148: LD_EXP 81
27152: PPUSH
27153: LD_VAR 0 1
27157: PPUSH
27158: LD_VAR 0 1
27162: PPUSH
27163: CALL_OW 255
27167: PUSH
27168: LD_VAR 0 1
27172: PUSH
27173: LD_VAR 0 2
27177: PUSH
27178: LD_VAR 0 3
27182: PUSH
27183: EMPTY
27184: LIST
27185: LIST
27186: LIST
27187: LIST
27188: PPUSH
27189: CALL_OW 1
27193: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
27194: CALL 27203 0 0
// end ;
27198: LD_VAR 0 4
27202: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
27203: LD_INT 0
27205: PPUSH
27206: PPUSH
27207: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
27208: LD_STRING resetWarehouseGatheringPoints();
27210: PPUSH
27211: CALL_OW 559
// if warehouseGatheringPoints then
27215: LD_EXP 81
27219: IFFALSE 27345
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
27221: LD_ADDR_VAR 0 3
27225: PUSH
27226: LD_EXP 81
27230: PPUSH
27231: CALL 73557 0 1
27235: ST_TO_ADDR
// for i := 1 to list do
27236: LD_ADDR_VAR 0 2
27240: PUSH
27241: DOUBLE
27242: LD_INT 1
27244: DEC
27245: ST_TO_ADDR
27246: LD_VAR 0 3
27250: PUSH
27251: FOR_TO
27252: IFFALSE 27343
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
27254: LD_STRING setWarehouseGatheringPointXY(
27256: PUSH
27257: LD_VAR 0 3
27261: PUSH
27262: LD_VAR 0 2
27266: ARRAY
27267: PUSH
27268: LD_INT 1
27270: ARRAY
27271: STR
27272: PUSH
27273: LD_STRING ,
27275: STR
27276: PUSH
27277: LD_VAR 0 3
27281: PUSH
27282: LD_VAR 0 2
27286: ARRAY
27287: PUSH
27288: LD_INT 2
27290: ARRAY
27291: STR
27292: PUSH
27293: LD_STRING ,
27295: STR
27296: PUSH
27297: LD_VAR 0 3
27301: PUSH
27302: LD_VAR 0 2
27306: ARRAY
27307: PUSH
27308: LD_INT 3
27310: ARRAY
27311: STR
27312: PUSH
27313: LD_STRING ,
27315: STR
27316: PUSH
27317: LD_VAR 0 3
27321: PUSH
27322: LD_VAR 0 2
27326: ARRAY
27327: PUSH
27328: LD_INT 4
27330: ARRAY
27331: STR
27332: PUSH
27333: LD_STRING )
27335: STR
27336: PPUSH
27337: CALL_OW 559
27341: GO 27251
27343: POP
27344: POP
// end ; end ;
27345: LD_VAR 0 1
27349: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
27350: LD_EXP 81
27354: IFFALSE 28039
27356: GO 27358
27358: DISABLE
27359: LD_INT 0
27361: PPUSH
27362: PPUSH
27363: PPUSH
27364: PPUSH
27365: PPUSH
27366: PPUSH
27367: PPUSH
27368: PPUSH
27369: PPUSH
// begin enable ;
27370: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
27371: LD_ADDR_VAR 0 3
27375: PUSH
27376: LD_EXP 81
27380: PPUSH
27381: CALL 73557 0 1
27385: ST_TO_ADDR
// if not list then
27386: LD_VAR 0 3
27390: NOT
27391: IFFALSE 27395
// exit ;
27393: GO 28039
// for i := 1 to list do
27395: LD_ADDR_VAR 0 1
27399: PUSH
27400: DOUBLE
27401: LD_INT 1
27403: DEC
27404: ST_TO_ADDR
27405: LD_VAR 0 3
27409: PUSH
27410: FOR_TO
27411: IFFALSE 28037
// begin depot := list [ i ] [ 2 ] ;
27413: LD_ADDR_VAR 0 8
27417: PUSH
27418: LD_VAR 0 3
27422: PUSH
27423: LD_VAR 0 1
27427: ARRAY
27428: PUSH
27429: LD_INT 2
27431: ARRAY
27432: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
27433: LD_ADDR_VAR 0 5
27437: PUSH
27438: LD_VAR 0 3
27442: PUSH
27443: LD_VAR 0 1
27447: ARRAY
27448: PUSH
27449: LD_INT 1
27451: ARRAY
27452: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
27453: LD_VAR 0 8
27457: PPUSH
27458: CALL_OW 301
27462: PUSH
27463: LD_VAR 0 5
27467: PUSH
27468: LD_VAR 0 8
27472: PPUSH
27473: CALL_OW 255
27477: NONEQUAL
27478: OR
27479: IFFALSE 27508
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
27481: LD_ADDR_EXP 81
27485: PUSH
27486: LD_EXP 81
27490: PPUSH
27491: LD_VAR 0 8
27495: PPUSH
27496: LD_INT 0
27498: PPUSH
27499: CALL_OW 1
27503: ST_TO_ADDR
// exit ;
27504: POP
27505: POP
27506: GO 28039
// end ; x := list [ i ] [ 3 ] ;
27508: LD_ADDR_VAR 0 6
27512: PUSH
27513: LD_VAR 0 3
27517: PUSH
27518: LD_VAR 0 1
27522: ARRAY
27523: PUSH
27524: LD_INT 3
27526: ARRAY
27527: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
27528: LD_ADDR_VAR 0 7
27532: PUSH
27533: LD_VAR 0 3
27537: PUSH
27538: LD_VAR 0 1
27542: ARRAY
27543: PUSH
27544: LD_INT 4
27546: ARRAY
27547: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
27548: LD_ADDR_VAR 0 9
27552: PUSH
27553: LD_VAR 0 6
27557: PPUSH
27558: LD_VAR 0 7
27562: PPUSH
27563: LD_INT 16
27565: PPUSH
27566: CALL 72145 0 3
27570: ST_TO_ADDR
// if not cratesNearbyPoint then
27571: LD_VAR 0 9
27575: NOT
27576: IFFALSE 27582
// exit ;
27578: POP
27579: POP
27580: GO 28039
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
27582: LD_ADDR_VAR 0 4
27586: PUSH
27587: LD_INT 22
27589: PUSH
27590: LD_VAR 0 5
27594: PUSH
27595: EMPTY
27596: LIST
27597: LIST
27598: PUSH
27599: LD_INT 3
27601: PUSH
27602: LD_INT 60
27604: PUSH
27605: EMPTY
27606: LIST
27607: PUSH
27608: EMPTY
27609: LIST
27610: LIST
27611: PUSH
27612: LD_INT 91
27614: PUSH
27615: LD_VAR 0 8
27619: PUSH
27620: LD_INT 6
27622: PUSH
27623: EMPTY
27624: LIST
27625: LIST
27626: LIST
27627: PUSH
27628: LD_INT 2
27630: PUSH
27631: LD_INT 25
27633: PUSH
27634: LD_INT 2
27636: PUSH
27637: EMPTY
27638: LIST
27639: LIST
27640: PUSH
27641: LD_INT 25
27643: PUSH
27644: LD_INT 16
27646: PUSH
27647: EMPTY
27648: LIST
27649: LIST
27650: PUSH
27651: EMPTY
27652: LIST
27653: LIST
27654: LIST
27655: PUSH
27656: EMPTY
27657: LIST
27658: LIST
27659: LIST
27660: LIST
27661: PPUSH
27662: CALL_OW 69
27666: PUSH
27667: LD_VAR 0 8
27671: PPUSH
27672: CALL_OW 313
27676: PPUSH
27677: LD_INT 3
27679: PUSH
27680: LD_INT 60
27682: PUSH
27683: EMPTY
27684: LIST
27685: PUSH
27686: EMPTY
27687: LIST
27688: LIST
27689: PUSH
27690: LD_INT 2
27692: PUSH
27693: LD_INT 25
27695: PUSH
27696: LD_INT 2
27698: PUSH
27699: EMPTY
27700: LIST
27701: LIST
27702: PUSH
27703: LD_INT 25
27705: PUSH
27706: LD_INT 16
27708: PUSH
27709: EMPTY
27710: LIST
27711: LIST
27712: PUSH
27713: EMPTY
27714: LIST
27715: LIST
27716: LIST
27717: PUSH
27718: EMPTY
27719: LIST
27720: LIST
27721: PPUSH
27722: CALL_OW 72
27726: UNION
27727: ST_TO_ADDR
// if tmp then
27728: LD_VAR 0 4
27732: IFFALSE 27812
// begin tmp := ShrinkArray ( tmp , 3 ) ;
27734: LD_ADDR_VAR 0 4
27738: PUSH
27739: LD_VAR 0 4
27743: PPUSH
27744: LD_INT 3
27746: PPUSH
27747: CALL 70114 0 2
27751: ST_TO_ADDR
// for j in tmp do
27752: LD_ADDR_VAR 0 2
27756: PUSH
27757: LD_VAR 0 4
27761: PUSH
27762: FOR_IN
27763: IFFALSE 27806
// begin if IsInUnit ( j ) then
27765: LD_VAR 0 2
27769: PPUSH
27770: CALL_OW 310
27774: IFFALSE 27785
// ComExit ( j ) ;
27776: LD_VAR 0 2
27780: PPUSH
27781: CALL 70197 0 1
// AddComCollect ( j , x , y ) ;
27785: LD_VAR 0 2
27789: PPUSH
27790: LD_VAR 0 6
27794: PPUSH
27795: LD_VAR 0 7
27799: PPUSH
27800: CALL_OW 177
// end ;
27804: GO 27762
27806: POP
27807: POP
// exit ;
27808: POP
27809: POP
27810: GO 28039
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
27812: LD_ADDR_VAR 0 4
27816: PUSH
27817: LD_INT 22
27819: PUSH
27820: LD_VAR 0 5
27824: PUSH
27825: EMPTY
27826: LIST
27827: LIST
27828: PUSH
27829: LD_INT 91
27831: PUSH
27832: LD_VAR 0 8
27836: PUSH
27837: LD_INT 8
27839: PUSH
27840: EMPTY
27841: LIST
27842: LIST
27843: LIST
27844: PUSH
27845: LD_INT 2
27847: PUSH
27848: LD_INT 34
27850: PUSH
27851: LD_INT 12
27853: PUSH
27854: EMPTY
27855: LIST
27856: LIST
27857: PUSH
27858: LD_INT 34
27860: PUSH
27861: LD_INT 51
27863: PUSH
27864: EMPTY
27865: LIST
27866: LIST
27867: PUSH
27868: LD_INT 34
27870: PUSH
27871: LD_INT 32
27873: PUSH
27874: EMPTY
27875: LIST
27876: LIST
27877: PUSH
27878: LD_INT 34
27880: PUSH
27881: LD_INT 89
27883: PUSH
27884: EMPTY
27885: LIST
27886: LIST
27887: PUSH
27888: EMPTY
27889: LIST
27890: LIST
27891: LIST
27892: LIST
27893: LIST
27894: PUSH
27895: EMPTY
27896: LIST
27897: LIST
27898: LIST
27899: PPUSH
27900: CALL_OW 69
27904: ST_TO_ADDR
// if tmp then
27905: LD_VAR 0 4
27909: IFFALSE 28035
// begin for j in tmp do
27911: LD_ADDR_VAR 0 2
27915: PUSH
27916: LD_VAR 0 4
27920: PUSH
27921: FOR_IN
27922: IFFALSE 28033
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
27924: LD_VAR 0 2
27928: PPUSH
27929: CALL_OW 262
27933: PUSH
27934: LD_INT 3
27936: EQUAL
27937: PUSH
27938: LD_VAR 0 2
27942: PPUSH
27943: CALL_OW 261
27947: PUSH
27948: LD_INT 20
27950: GREATER
27951: OR
27952: PUSH
27953: LD_VAR 0 2
27957: PPUSH
27958: CALL_OW 314
27962: NOT
27963: AND
27964: PUSH
27965: LD_VAR 0 2
27969: PPUSH
27970: CALL_OW 263
27974: PUSH
27975: LD_INT 1
27977: NONEQUAL
27978: PUSH
27979: LD_VAR 0 2
27983: PPUSH
27984: CALL_OW 311
27988: OR
27989: AND
27990: IFFALSE 28031
// begin ComCollect ( j , x , y ) ;
27992: LD_VAR 0 2
27996: PPUSH
27997: LD_VAR 0 6
28001: PPUSH
28002: LD_VAR 0 7
28006: PPUSH
28007: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
28011: LD_VAR 0 2
28015: PPUSH
28016: LD_VAR 0 8
28020: PPUSH
28021: CALL_OW 172
// exit ;
28025: POP
28026: POP
28027: POP
28028: POP
28029: GO 28039
// end ;
28031: GO 27921
28033: POP
28034: POP
// end ; end ;
28035: GO 27410
28037: POP
28038: POP
// end ; end_of_file
28039: PPOPN 9
28041: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
28042: LD_INT 0
28044: PPUSH
28045: PPUSH
28046: PPUSH
28047: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
28048: LD_VAR 0 1
28052: PPUSH
28053: CALL_OW 264
28057: PUSH
28058: LD_INT 91
28060: EQUAL
28061: IFFALSE 28133
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
28063: LD_INT 68
28065: PPUSH
28066: LD_VAR 0 1
28070: PPUSH
28071: CALL_OW 255
28075: PPUSH
28076: CALL_OW 321
28080: PUSH
28081: LD_INT 2
28083: EQUAL
28084: IFFALSE 28096
// eff := 70 else
28086: LD_ADDR_VAR 0 4
28090: PUSH
28091: LD_INT 70
28093: ST_TO_ADDR
28094: GO 28104
// eff := 30 ;
28096: LD_ADDR_VAR 0 4
28100: PUSH
28101: LD_INT 30
28103: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
28104: LD_VAR 0 1
28108: PPUSH
28109: CALL_OW 250
28113: PPUSH
28114: LD_VAR 0 1
28118: PPUSH
28119: CALL_OW 251
28123: PPUSH
28124: LD_VAR 0 4
28128: PPUSH
28129: CALL_OW 495
// end ; end ;
28133: LD_VAR 0 2
28137: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
28138: LD_INT 0
28140: PPUSH
// end ;
28141: LD_VAR 0 4
28145: RET
// export function SOS_Command ( cmd ) ; begin
28146: LD_INT 0
28148: PPUSH
// end ;
28149: LD_VAR 0 2
28153: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
28154: LD_INT 0
28156: PPUSH
// end ;
28157: LD_VAR 0 6
28161: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
28162: LD_INT 0
28164: PPUSH
28165: PPUSH
// if not vehicle or not factory then
28166: LD_VAR 0 1
28170: NOT
28171: PUSH
28172: LD_VAR 0 2
28176: NOT
28177: OR
28178: IFFALSE 28182
// exit ;
28180: GO 28413
// if factoryWaypoints >= factory then
28182: LD_EXP 80
28186: PUSH
28187: LD_VAR 0 2
28191: GREATEREQUAL
28192: IFFALSE 28413
// if factoryWaypoints [ factory ] then
28194: LD_EXP 80
28198: PUSH
28199: LD_VAR 0 2
28203: ARRAY
28204: IFFALSE 28413
// begin if GetControl ( vehicle ) = control_manual then
28206: LD_VAR 0 1
28210: PPUSH
28211: CALL_OW 263
28215: PUSH
28216: LD_INT 1
28218: EQUAL
28219: IFFALSE 28300
// begin driver := IsDrivenBy ( vehicle ) ;
28221: LD_ADDR_VAR 0 4
28225: PUSH
28226: LD_VAR 0 1
28230: PPUSH
28231: CALL_OW 311
28235: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
28236: LD_VAR 0 4
28240: PPUSH
28241: LD_EXP 80
28245: PUSH
28246: LD_VAR 0 2
28250: ARRAY
28251: PUSH
28252: LD_INT 3
28254: ARRAY
28255: PPUSH
28256: LD_EXP 80
28260: PUSH
28261: LD_VAR 0 2
28265: ARRAY
28266: PUSH
28267: LD_INT 4
28269: ARRAY
28270: PPUSH
28271: CALL_OW 171
// AddComExitVehicle ( driver ) ;
28275: LD_VAR 0 4
28279: PPUSH
28280: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
28284: LD_VAR 0 4
28288: PPUSH
28289: LD_VAR 0 2
28293: PPUSH
28294: CALL_OW 180
// end else
28298: GO 28413
// if GetControl ( vehicle ) = control_remote then
28300: LD_VAR 0 1
28304: PPUSH
28305: CALL_OW 263
28309: PUSH
28310: LD_INT 2
28312: EQUAL
28313: IFFALSE 28374
// begin wait ( 0 0$2 ) ;
28315: LD_INT 70
28317: PPUSH
28318: CALL_OW 67
// if Connect ( vehicle ) then
28322: LD_VAR 0 1
28326: PPUSH
28327: CALL 40437 0 1
28331: IFFALSE 28372
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
28333: LD_VAR 0 1
28337: PPUSH
28338: LD_EXP 80
28342: PUSH
28343: LD_VAR 0 2
28347: ARRAY
28348: PUSH
28349: LD_INT 3
28351: ARRAY
28352: PPUSH
28353: LD_EXP 80
28357: PUSH
28358: LD_VAR 0 2
28362: ARRAY
28363: PUSH
28364: LD_INT 4
28366: ARRAY
28367: PPUSH
28368: CALL_OW 171
// end else
28372: GO 28413
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
28374: LD_VAR 0 1
28378: PPUSH
28379: LD_EXP 80
28383: PUSH
28384: LD_VAR 0 2
28388: ARRAY
28389: PUSH
28390: LD_INT 3
28392: ARRAY
28393: PPUSH
28394: LD_EXP 80
28398: PUSH
28399: LD_VAR 0 2
28403: ARRAY
28404: PUSH
28405: LD_INT 4
28407: ARRAY
28408: PPUSH
28409: CALL_OW 171
// end ; end ;
28413: LD_VAR 0 3
28417: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
28418: LD_INT 0
28420: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
28421: LD_VAR 0 1
28425: PUSH
28426: LD_INT 250
28428: EQUAL
28429: PUSH
28430: LD_VAR 0 2
28434: PPUSH
28435: CALL_OW 264
28439: PUSH
28440: LD_INT 81
28442: EQUAL
28443: AND
28444: IFFALSE 28465
// MinerPlaceMine ( unit , x , y ) ;
28446: LD_VAR 0 2
28450: PPUSH
28451: LD_VAR 0 4
28455: PPUSH
28456: LD_VAR 0 5
28460: PPUSH
28461: CALL 30850 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
28465: LD_VAR 0 1
28469: PUSH
28470: LD_INT 251
28472: EQUAL
28473: PUSH
28474: LD_VAR 0 2
28478: PPUSH
28479: CALL_OW 264
28483: PUSH
28484: LD_INT 81
28486: EQUAL
28487: AND
28488: IFFALSE 28509
// MinerDetonateMine ( unit , x , y ) ;
28490: LD_VAR 0 2
28494: PPUSH
28495: LD_VAR 0 4
28499: PPUSH
28500: LD_VAR 0 5
28504: PPUSH
28505: CALL 31125 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
28509: LD_VAR 0 1
28513: PUSH
28514: LD_INT 252
28516: EQUAL
28517: PUSH
28518: LD_VAR 0 2
28522: PPUSH
28523: CALL_OW 264
28527: PUSH
28528: LD_INT 81
28530: EQUAL
28531: AND
28532: IFFALSE 28553
// MinerCreateMinefield ( unit , x , y ) ;
28534: LD_VAR 0 2
28538: PPUSH
28539: LD_VAR 0 4
28543: PPUSH
28544: LD_VAR 0 5
28548: PPUSH
28549: CALL 31542 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
28553: LD_VAR 0 1
28557: PUSH
28558: LD_INT 253
28560: EQUAL
28561: PUSH
28562: LD_VAR 0 2
28566: PPUSH
28567: CALL_OW 257
28571: PUSH
28572: LD_INT 5
28574: EQUAL
28575: AND
28576: IFFALSE 28597
// ComBinocular ( unit , x , y ) ;
28578: LD_VAR 0 2
28582: PPUSH
28583: LD_VAR 0 4
28587: PPUSH
28588: LD_VAR 0 5
28592: PPUSH
28593: CALL 31911 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
28597: LD_VAR 0 1
28601: PUSH
28602: LD_INT 254
28604: EQUAL
28605: PUSH
28606: LD_VAR 0 2
28610: PPUSH
28611: CALL_OW 264
28615: PUSH
28616: LD_INT 99
28618: EQUAL
28619: AND
28620: PUSH
28621: LD_VAR 0 3
28625: PPUSH
28626: CALL_OW 263
28630: PUSH
28631: LD_INT 3
28633: EQUAL
28634: AND
28635: IFFALSE 28651
// HackDestroyVehicle ( unit , selectedUnit ) ;
28637: LD_VAR 0 2
28641: PPUSH
28642: LD_VAR 0 3
28646: PPUSH
28647: CALL 30214 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
28651: LD_VAR 0 1
28655: PUSH
28656: LD_INT 255
28658: EQUAL
28659: PUSH
28660: LD_VAR 0 2
28664: PPUSH
28665: CALL_OW 264
28669: PUSH
28670: LD_INT 14
28672: PUSH
28673: LD_INT 53
28675: PUSH
28676: EMPTY
28677: LIST
28678: LIST
28679: IN
28680: AND
28681: PUSH
28682: LD_VAR 0 4
28686: PPUSH
28687: LD_VAR 0 5
28691: PPUSH
28692: CALL_OW 488
28696: AND
28697: IFFALSE 28721
// CutTreeXYR ( unit , x , y , 12 ) ;
28699: LD_VAR 0 2
28703: PPUSH
28704: LD_VAR 0 4
28708: PPUSH
28709: LD_VAR 0 5
28713: PPUSH
28714: LD_INT 12
28716: PPUSH
28717: CALL 28784 0 4
// if cmd = 256 then
28721: LD_VAR 0 1
28725: PUSH
28726: LD_INT 256
28728: EQUAL
28729: IFFALSE 28750
// SetFactoryWaypoint ( unit , x , y ) ;
28731: LD_VAR 0 2
28735: PPUSH
28736: LD_VAR 0 4
28740: PPUSH
28741: LD_VAR 0 5
28745: PPUSH
28746: CALL 26731 0 3
// if cmd = 257 then
28750: LD_VAR 0 1
28754: PUSH
28755: LD_INT 257
28757: EQUAL
28758: IFFALSE 28779
// SetWarehouseGatheringPoint ( unit , x , y ) ;
28760: LD_VAR 0 2
28764: PPUSH
28765: LD_VAR 0 4
28769: PPUSH
28770: LD_VAR 0 5
28774: PPUSH
28775: CALL 27093 0 3
// end ;
28779: LD_VAR 0 6
28783: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
28784: LD_INT 0
28786: PPUSH
28787: PPUSH
28788: PPUSH
28789: PPUSH
28790: PPUSH
28791: PPUSH
28792: PPUSH
28793: PPUSH
28794: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
28795: LD_VAR 0 1
28799: NOT
28800: PUSH
28801: LD_VAR 0 2
28805: PPUSH
28806: LD_VAR 0 3
28810: PPUSH
28811: CALL_OW 488
28815: NOT
28816: OR
28817: PUSH
28818: LD_VAR 0 4
28822: NOT
28823: OR
28824: IFFALSE 28828
// exit ;
28826: GO 29168
// list := [ ] ;
28828: LD_ADDR_VAR 0 13
28832: PUSH
28833: EMPTY
28834: ST_TO_ADDR
// if x - r < 0 then
28835: LD_VAR 0 2
28839: PUSH
28840: LD_VAR 0 4
28844: MINUS
28845: PUSH
28846: LD_INT 0
28848: LESS
28849: IFFALSE 28861
// min_x := 0 else
28851: LD_ADDR_VAR 0 7
28855: PUSH
28856: LD_INT 0
28858: ST_TO_ADDR
28859: GO 28877
// min_x := x - r ;
28861: LD_ADDR_VAR 0 7
28865: PUSH
28866: LD_VAR 0 2
28870: PUSH
28871: LD_VAR 0 4
28875: MINUS
28876: ST_TO_ADDR
// if y - r < 0 then
28877: LD_VAR 0 3
28881: PUSH
28882: LD_VAR 0 4
28886: MINUS
28887: PUSH
28888: LD_INT 0
28890: LESS
28891: IFFALSE 28903
// min_y := 0 else
28893: LD_ADDR_VAR 0 8
28897: PUSH
28898: LD_INT 0
28900: ST_TO_ADDR
28901: GO 28919
// min_y := y - r ;
28903: LD_ADDR_VAR 0 8
28907: PUSH
28908: LD_VAR 0 3
28912: PUSH
28913: LD_VAR 0 4
28917: MINUS
28918: ST_TO_ADDR
// max_x := x + r ;
28919: LD_ADDR_VAR 0 9
28923: PUSH
28924: LD_VAR 0 2
28928: PUSH
28929: LD_VAR 0 4
28933: PLUS
28934: ST_TO_ADDR
// max_y := y + r ;
28935: LD_ADDR_VAR 0 10
28939: PUSH
28940: LD_VAR 0 3
28944: PUSH
28945: LD_VAR 0 4
28949: PLUS
28950: ST_TO_ADDR
// for _x = min_x to max_x do
28951: LD_ADDR_VAR 0 11
28955: PUSH
28956: DOUBLE
28957: LD_VAR 0 7
28961: DEC
28962: ST_TO_ADDR
28963: LD_VAR 0 9
28967: PUSH
28968: FOR_TO
28969: IFFALSE 29086
// for _y = min_y to max_y do
28971: LD_ADDR_VAR 0 12
28975: PUSH
28976: DOUBLE
28977: LD_VAR 0 8
28981: DEC
28982: ST_TO_ADDR
28983: LD_VAR 0 10
28987: PUSH
28988: FOR_TO
28989: IFFALSE 29082
// begin if not ValidHex ( _x , _y ) then
28991: LD_VAR 0 11
28995: PPUSH
28996: LD_VAR 0 12
29000: PPUSH
29001: CALL_OW 488
29005: NOT
29006: IFFALSE 29010
// continue ;
29008: GO 28988
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
29010: LD_VAR 0 11
29014: PPUSH
29015: LD_VAR 0 12
29019: PPUSH
29020: CALL_OW 351
29024: PUSH
29025: LD_VAR 0 11
29029: PPUSH
29030: LD_VAR 0 12
29034: PPUSH
29035: CALL_OW 554
29039: AND
29040: IFFALSE 29080
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
29042: LD_ADDR_VAR 0 13
29046: PUSH
29047: LD_VAR 0 13
29051: PPUSH
29052: LD_VAR 0 13
29056: PUSH
29057: LD_INT 1
29059: PLUS
29060: PPUSH
29061: LD_VAR 0 11
29065: PUSH
29066: LD_VAR 0 12
29070: PUSH
29071: EMPTY
29072: LIST
29073: LIST
29074: PPUSH
29075: CALL_OW 2
29079: ST_TO_ADDR
// end ;
29080: GO 28988
29082: POP
29083: POP
29084: GO 28968
29086: POP
29087: POP
// if not list then
29088: LD_VAR 0 13
29092: NOT
29093: IFFALSE 29097
// exit ;
29095: GO 29168
// for i in list do
29097: LD_ADDR_VAR 0 6
29101: PUSH
29102: LD_VAR 0 13
29106: PUSH
29107: FOR_IN
29108: IFFALSE 29166
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
29110: LD_VAR 0 1
29114: PPUSH
29115: LD_STRING M
29117: PUSH
29118: LD_VAR 0 6
29122: PUSH
29123: LD_INT 1
29125: ARRAY
29126: PUSH
29127: LD_VAR 0 6
29131: PUSH
29132: LD_INT 2
29134: ARRAY
29135: PUSH
29136: LD_INT 0
29138: PUSH
29139: LD_INT 0
29141: PUSH
29142: LD_INT 0
29144: PUSH
29145: LD_INT 0
29147: PUSH
29148: EMPTY
29149: LIST
29150: LIST
29151: LIST
29152: LIST
29153: LIST
29154: LIST
29155: LIST
29156: PUSH
29157: EMPTY
29158: LIST
29159: PPUSH
29160: CALL_OW 447
29164: GO 29107
29166: POP
29167: POP
// end ;
29168: LD_VAR 0 5
29172: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
29173: LD_EXP 83
29177: NOT
29178: IFFALSE 29228
29180: GO 29182
29182: DISABLE
// begin initHack := true ;
29183: LD_ADDR_EXP 83
29187: PUSH
29188: LD_INT 1
29190: ST_TO_ADDR
// hackTanks := [ ] ;
29191: LD_ADDR_EXP 84
29195: PUSH
29196: EMPTY
29197: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
29198: LD_ADDR_EXP 85
29202: PUSH
29203: EMPTY
29204: ST_TO_ADDR
// hackLimit := 3 ;
29205: LD_ADDR_EXP 86
29209: PUSH
29210: LD_INT 3
29212: ST_TO_ADDR
// hackDist := 12 ;
29213: LD_ADDR_EXP 87
29217: PUSH
29218: LD_INT 12
29220: ST_TO_ADDR
// hackCounter := [ ] ;
29221: LD_ADDR_EXP 88
29225: PUSH
29226: EMPTY
29227: ST_TO_ADDR
// end ;
29228: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
29229: LD_EXP 83
29233: PUSH
29234: LD_INT 34
29236: PUSH
29237: LD_INT 99
29239: PUSH
29240: EMPTY
29241: LIST
29242: LIST
29243: PPUSH
29244: CALL_OW 69
29248: AND
29249: IFFALSE 29502
29251: GO 29253
29253: DISABLE
29254: LD_INT 0
29256: PPUSH
29257: PPUSH
// begin enable ;
29258: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
29259: LD_ADDR_VAR 0 1
29263: PUSH
29264: LD_INT 34
29266: PUSH
29267: LD_INT 99
29269: PUSH
29270: EMPTY
29271: LIST
29272: LIST
29273: PPUSH
29274: CALL_OW 69
29278: PUSH
29279: FOR_IN
29280: IFFALSE 29500
// begin if not i in hackTanks then
29282: LD_VAR 0 1
29286: PUSH
29287: LD_EXP 84
29291: IN
29292: NOT
29293: IFFALSE 29376
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
29295: LD_ADDR_EXP 84
29299: PUSH
29300: LD_EXP 84
29304: PPUSH
29305: LD_EXP 84
29309: PUSH
29310: LD_INT 1
29312: PLUS
29313: PPUSH
29314: LD_VAR 0 1
29318: PPUSH
29319: CALL_OW 1
29323: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
29324: LD_ADDR_EXP 85
29328: PUSH
29329: LD_EXP 85
29333: PPUSH
29334: LD_EXP 85
29338: PUSH
29339: LD_INT 1
29341: PLUS
29342: PPUSH
29343: EMPTY
29344: PPUSH
29345: CALL_OW 1
29349: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
29350: LD_ADDR_EXP 88
29354: PUSH
29355: LD_EXP 88
29359: PPUSH
29360: LD_EXP 88
29364: PUSH
29365: LD_INT 1
29367: PLUS
29368: PPUSH
29369: EMPTY
29370: PPUSH
29371: CALL_OW 1
29375: ST_TO_ADDR
// end ; if not IsOk ( i ) then
29376: LD_VAR 0 1
29380: PPUSH
29381: CALL_OW 302
29385: NOT
29386: IFFALSE 29399
// begin HackUnlinkAll ( i ) ;
29388: LD_VAR 0 1
29392: PPUSH
29393: CALL 29505 0 1
// continue ;
29397: GO 29279
// end ; HackCheckCapturedStatus ( i ) ;
29399: LD_VAR 0 1
29403: PPUSH
29404: CALL 29948 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
29408: LD_ADDR_VAR 0 2
29412: PUSH
29413: LD_INT 81
29415: PUSH
29416: LD_VAR 0 1
29420: PPUSH
29421: CALL_OW 255
29425: PUSH
29426: EMPTY
29427: LIST
29428: LIST
29429: PUSH
29430: LD_INT 33
29432: PUSH
29433: LD_INT 3
29435: PUSH
29436: EMPTY
29437: LIST
29438: LIST
29439: PUSH
29440: LD_INT 91
29442: PUSH
29443: LD_VAR 0 1
29447: PUSH
29448: LD_EXP 87
29452: PUSH
29453: EMPTY
29454: LIST
29455: LIST
29456: LIST
29457: PUSH
29458: LD_INT 50
29460: PUSH
29461: EMPTY
29462: LIST
29463: PUSH
29464: EMPTY
29465: LIST
29466: LIST
29467: LIST
29468: LIST
29469: PPUSH
29470: CALL_OW 69
29474: ST_TO_ADDR
// if not tmp then
29475: LD_VAR 0 2
29479: NOT
29480: IFFALSE 29484
// continue ;
29482: GO 29279
// HackLink ( i , tmp ) ;
29484: LD_VAR 0 1
29488: PPUSH
29489: LD_VAR 0 2
29493: PPUSH
29494: CALL 29641 0 2
// end ;
29498: GO 29279
29500: POP
29501: POP
// end ;
29502: PPOPN 2
29504: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
29505: LD_INT 0
29507: PPUSH
29508: PPUSH
29509: PPUSH
// if not hack in hackTanks then
29510: LD_VAR 0 1
29514: PUSH
29515: LD_EXP 84
29519: IN
29520: NOT
29521: IFFALSE 29525
// exit ;
29523: GO 29636
// index := GetElementIndex ( hackTanks , hack ) ;
29525: LD_ADDR_VAR 0 4
29529: PUSH
29530: LD_EXP 84
29534: PPUSH
29535: LD_VAR 0 1
29539: PPUSH
29540: CALL 37253 0 2
29544: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
29545: LD_EXP 85
29549: PUSH
29550: LD_VAR 0 4
29554: ARRAY
29555: IFFALSE 29636
// begin for i in hackTanksCaptured [ index ] do
29557: LD_ADDR_VAR 0 3
29561: PUSH
29562: LD_EXP 85
29566: PUSH
29567: LD_VAR 0 4
29571: ARRAY
29572: PUSH
29573: FOR_IN
29574: IFFALSE 29600
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
29576: LD_VAR 0 3
29580: PUSH
29581: LD_INT 1
29583: ARRAY
29584: PPUSH
29585: LD_VAR 0 3
29589: PUSH
29590: LD_INT 2
29592: ARRAY
29593: PPUSH
29594: CALL_OW 235
29598: GO 29573
29600: POP
29601: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
29602: LD_ADDR_EXP 85
29606: PUSH
29607: LD_EXP 85
29611: PPUSH
29612: LD_VAR 0 4
29616: PPUSH
29617: EMPTY
29618: PPUSH
29619: CALL_OW 1
29623: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
29624: LD_VAR 0 1
29628: PPUSH
29629: LD_INT 0
29631: PPUSH
29632: CALL_OW 505
// end ; end ;
29636: LD_VAR 0 2
29640: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
29641: LD_INT 0
29643: PPUSH
29644: PPUSH
29645: PPUSH
// if not hack in hackTanks or not vehicles then
29646: LD_VAR 0 1
29650: PUSH
29651: LD_EXP 84
29655: IN
29656: NOT
29657: PUSH
29658: LD_VAR 0 2
29662: NOT
29663: OR
29664: IFFALSE 29668
// exit ;
29666: GO 29943
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
29668: LD_ADDR_VAR 0 2
29672: PUSH
29673: LD_VAR 0 1
29677: PPUSH
29678: LD_VAR 0 2
29682: PPUSH
29683: LD_INT 1
29685: PPUSH
29686: LD_INT 1
29688: PPUSH
29689: CALL 37903 0 4
29693: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
29694: LD_ADDR_VAR 0 5
29698: PUSH
29699: LD_EXP 84
29703: PPUSH
29704: LD_VAR 0 1
29708: PPUSH
29709: CALL 37253 0 2
29713: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
29714: LD_EXP 85
29718: PUSH
29719: LD_VAR 0 5
29723: ARRAY
29724: PUSH
29725: LD_EXP 86
29729: LESS
29730: IFFALSE 29919
// begin for i := 1 to vehicles do
29732: LD_ADDR_VAR 0 4
29736: PUSH
29737: DOUBLE
29738: LD_INT 1
29740: DEC
29741: ST_TO_ADDR
29742: LD_VAR 0 2
29746: PUSH
29747: FOR_TO
29748: IFFALSE 29917
// begin if hackTanksCaptured [ index ] = hackLimit then
29750: LD_EXP 85
29754: PUSH
29755: LD_VAR 0 5
29759: ARRAY
29760: PUSH
29761: LD_EXP 86
29765: EQUAL
29766: IFFALSE 29770
// break ;
29768: GO 29917
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
29770: LD_ADDR_EXP 88
29774: PUSH
29775: LD_EXP 88
29779: PPUSH
29780: LD_VAR 0 5
29784: PPUSH
29785: LD_EXP 88
29789: PUSH
29790: LD_VAR 0 5
29794: ARRAY
29795: PUSH
29796: LD_INT 1
29798: PLUS
29799: PPUSH
29800: CALL_OW 1
29804: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
29805: LD_ADDR_EXP 85
29809: PUSH
29810: LD_EXP 85
29814: PPUSH
29815: LD_VAR 0 5
29819: PUSH
29820: LD_EXP 85
29824: PUSH
29825: LD_VAR 0 5
29829: ARRAY
29830: PUSH
29831: LD_INT 1
29833: PLUS
29834: PUSH
29835: EMPTY
29836: LIST
29837: LIST
29838: PPUSH
29839: LD_VAR 0 2
29843: PUSH
29844: LD_VAR 0 4
29848: ARRAY
29849: PUSH
29850: LD_VAR 0 2
29854: PUSH
29855: LD_VAR 0 4
29859: ARRAY
29860: PPUSH
29861: CALL_OW 255
29865: PUSH
29866: EMPTY
29867: LIST
29868: LIST
29869: PPUSH
29870: CALL 37468 0 3
29874: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
29875: LD_VAR 0 2
29879: PUSH
29880: LD_VAR 0 4
29884: ARRAY
29885: PPUSH
29886: LD_VAR 0 1
29890: PPUSH
29891: CALL_OW 255
29895: PPUSH
29896: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
29900: LD_VAR 0 2
29904: PUSH
29905: LD_VAR 0 4
29909: ARRAY
29910: PPUSH
29911: CALL_OW 141
// end ;
29915: GO 29747
29917: POP
29918: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
29919: LD_VAR 0 1
29923: PPUSH
29924: LD_EXP 85
29928: PUSH
29929: LD_VAR 0 5
29933: ARRAY
29934: PUSH
29935: LD_INT 0
29937: PLUS
29938: PPUSH
29939: CALL_OW 505
// end ;
29943: LD_VAR 0 3
29947: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
29948: LD_INT 0
29950: PPUSH
29951: PPUSH
29952: PPUSH
29953: PPUSH
// if not hack in hackTanks then
29954: LD_VAR 0 1
29958: PUSH
29959: LD_EXP 84
29963: IN
29964: NOT
29965: IFFALSE 29969
// exit ;
29967: GO 30209
// index := GetElementIndex ( hackTanks , hack ) ;
29969: LD_ADDR_VAR 0 4
29973: PUSH
29974: LD_EXP 84
29978: PPUSH
29979: LD_VAR 0 1
29983: PPUSH
29984: CALL 37253 0 2
29988: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
29989: LD_ADDR_VAR 0 3
29993: PUSH
29994: DOUBLE
29995: LD_EXP 85
29999: PUSH
30000: LD_VAR 0 4
30004: ARRAY
30005: INC
30006: ST_TO_ADDR
30007: LD_INT 1
30009: PUSH
30010: FOR_DOWNTO
30011: IFFALSE 30183
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
30013: LD_ADDR_VAR 0 5
30017: PUSH
30018: LD_EXP 85
30022: PUSH
30023: LD_VAR 0 4
30027: ARRAY
30028: PUSH
30029: LD_VAR 0 3
30033: ARRAY
30034: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
30035: LD_VAR 0 5
30039: PUSH
30040: LD_INT 1
30042: ARRAY
30043: PPUSH
30044: CALL_OW 302
30048: NOT
30049: PUSH
30050: LD_VAR 0 5
30054: PUSH
30055: LD_INT 1
30057: ARRAY
30058: PPUSH
30059: CALL_OW 255
30063: PUSH
30064: LD_VAR 0 1
30068: PPUSH
30069: CALL_OW 255
30073: NONEQUAL
30074: OR
30075: IFFALSE 30181
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
30077: LD_VAR 0 5
30081: PUSH
30082: LD_INT 1
30084: ARRAY
30085: PPUSH
30086: CALL_OW 305
30090: PUSH
30091: LD_VAR 0 5
30095: PUSH
30096: LD_INT 1
30098: ARRAY
30099: PPUSH
30100: CALL_OW 255
30104: PUSH
30105: LD_VAR 0 1
30109: PPUSH
30110: CALL_OW 255
30114: EQUAL
30115: AND
30116: IFFALSE 30140
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
30118: LD_VAR 0 5
30122: PUSH
30123: LD_INT 1
30125: ARRAY
30126: PPUSH
30127: LD_VAR 0 5
30131: PUSH
30132: LD_INT 2
30134: ARRAY
30135: PPUSH
30136: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
30140: LD_ADDR_EXP 85
30144: PUSH
30145: LD_EXP 85
30149: PPUSH
30150: LD_VAR 0 4
30154: PPUSH
30155: LD_EXP 85
30159: PUSH
30160: LD_VAR 0 4
30164: ARRAY
30165: PPUSH
30166: LD_VAR 0 3
30170: PPUSH
30171: CALL_OW 3
30175: PPUSH
30176: CALL_OW 1
30180: ST_TO_ADDR
// end ; end ;
30181: GO 30010
30183: POP
30184: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
30185: LD_VAR 0 1
30189: PPUSH
30190: LD_EXP 85
30194: PUSH
30195: LD_VAR 0 4
30199: ARRAY
30200: PUSH
30201: LD_INT 0
30203: PLUS
30204: PPUSH
30205: CALL_OW 505
// end ;
30209: LD_VAR 0 2
30213: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
30214: LD_INT 0
30216: PPUSH
30217: PPUSH
30218: PPUSH
30219: PPUSH
// if not hack in hackTanks then
30220: LD_VAR 0 1
30224: PUSH
30225: LD_EXP 84
30229: IN
30230: NOT
30231: IFFALSE 30235
// exit ;
30233: GO 30320
// index := GetElementIndex ( hackTanks , hack ) ;
30235: LD_ADDR_VAR 0 5
30239: PUSH
30240: LD_EXP 84
30244: PPUSH
30245: LD_VAR 0 1
30249: PPUSH
30250: CALL 37253 0 2
30254: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
30255: LD_ADDR_VAR 0 4
30259: PUSH
30260: DOUBLE
30261: LD_INT 1
30263: DEC
30264: ST_TO_ADDR
30265: LD_EXP 85
30269: PUSH
30270: LD_VAR 0 5
30274: ARRAY
30275: PUSH
30276: FOR_TO
30277: IFFALSE 30318
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
30279: LD_EXP 85
30283: PUSH
30284: LD_VAR 0 5
30288: ARRAY
30289: PUSH
30290: LD_VAR 0 4
30294: ARRAY
30295: PUSH
30296: LD_INT 1
30298: ARRAY
30299: PUSH
30300: LD_VAR 0 2
30304: EQUAL
30305: IFFALSE 30316
// KillUnit ( vehicle ) ;
30307: LD_VAR 0 2
30311: PPUSH
30312: CALL_OW 66
30316: GO 30276
30318: POP
30319: POP
// end ;
30320: LD_VAR 0 3
30324: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
30325: LD_EXP 89
30329: NOT
30330: IFFALSE 30365
30332: GO 30334
30334: DISABLE
// begin initMiner := true ;
30335: LD_ADDR_EXP 89
30339: PUSH
30340: LD_INT 1
30342: ST_TO_ADDR
// minersList := [ ] ;
30343: LD_ADDR_EXP 90
30347: PUSH
30348: EMPTY
30349: ST_TO_ADDR
// minerMinesList := [ ] ;
30350: LD_ADDR_EXP 91
30354: PUSH
30355: EMPTY
30356: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
30357: LD_ADDR_EXP 92
30361: PUSH
30362: LD_INT 5
30364: ST_TO_ADDR
// end ;
30365: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
30366: LD_EXP 89
30370: PUSH
30371: LD_INT 34
30373: PUSH
30374: LD_INT 81
30376: PUSH
30377: EMPTY
30378: LIST
30379: LIST
30380: PPUSH
30381: CALL_OW 69
30385: AND
30386: IFFALSE 30847
30388: GO 30390
30390: DISABLE
30391: LD_INT 0
30393: PPUSH
30394: PPUSH
30395: PPUSH
30396: PPUSH
// begin enable ;
30397: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
30398: LD_ADDR_VAR 0 1
30402: PUSH
30403: LD_INT 34
30405: PUSH
30406: LD_INT 81
30408: PUSH
30409: EMPTY
30410: LIST
30411: LIST
30412: PPUSH
30413: CALL_OW 69
30417: PUSH
30418: FOR_IN
30419: IFFALSE 30491
// begin if not i in minersList then
30421: LD_VAR 0 1
30425: PUSH
30426: LD_EXP 90
30430: IN
30431: NOT
30432: IFFALSE 30489
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
30434: LD_ADDR_EXP 90
30438: PUSH
30439: LD_EXP 90
30443: PPUSH
30444: LD_EXP 90
30448: PUSH
30449: LD_INT 1
30451: PLUS
30452: PPUSH
30453: LD_VAR 0 1
30457: PPUSH
30458: CALL_OW 1
30462: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
30463: LD_ADDR_EXP 91
30467: PUSH
30468: LD_EXP 91
30472: PPUSH
30473: LD_EXP 91
30477: PUSH
30478: LD_INT 1
30480: PLUS
30481: PPUSH
30482: EMPTY
30483: PPUSH
30484: CALL_OW 1
30488: ST_TO_ADDR
// end end ;
30489: GO 30418
30491: POP
30492: POP
// for i := minerMinesList downto 1 do
30493: LD_ADDR_VAR 0 1
30497: PUSH
30498: DOUBLE
30499: LD_EXP 91
30503: INC
30504: ST_TO_ADDR
30505: LD_INT 1
30507: PUSH
30508: FOR_DOWNTO
30509: IFFALSE 30845
// begin if IsLive ( minersList [ i ] ) then
30511: LD_EXP 90
30515: PUSH
30516: LD_VAR 0 1
30520: ARRAY
30521: PPUSH
30522: CALL_OW 300
30526: IFFALSE 30554
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
30528: LD_EXP 90
30532: PUSH
30533: LD_VAR 0 1
30537: ARRAY
30538: PPUSH
30539: LD_EXP 91
30543: PUSH
30544: LD_VAR 0 1
30548: ARRAY
30549: PPUSH
30550: CALL_OW 505
// if not minerMinesList [ i ] then
30554: LD_EXP 91
30558: PUSH
30559: LD_VAR 0 1
30563: ARRAY
30564: NOT
30565: IFFALSE 30569
// continue ;
30567: GO 30508
// for j := minerMinesList [ i ] downto 1 do
30569: LD_ADDR_VAR 0 2
30573: PUSH
30574: DOUBLE
30575: LD_EXP 91
30579: PUSH
30580: LD_VAR 0 1
30584: ARRAY
30585: INC
30586: ST_TO_ADDR
30587: LD_INT 1
30589: PUSH
30590: FOR_DOWNTO
30591: IFFALSE 30841
// begin side := GetSide ( minersList [ i ] ) ;
30593: LD_ADDR_VAR 0 3
30597: PUSH
30598: LD_EXP 90
30602: PUSH
30603: LD_VAR 0 1
30607: ARRAY
30608: PPUSH
30609: CALL_OW 255
30613: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
30614: LD_ADDR_VAR 0 4
30618: PUSH
30619: LD_EXP 91
30623: PUSH
30624: LD_VAR 0 1
30628: ARRAY
30629: PUSH
30630: LD_VAR 0 2
30634: ARRAY
30635: PUSH
30636: LD_INT 1
30638: ARRAY
30639: PPUSH
30640: LD_EXP 91
30644: PUSH
30645: LD_VAR 0 1
30649: ARRAY
30650: PUSH
30651: LD_VAR 0 2
30655: ARRAY
30656: PUSH
30657: LD_INT 2
30659: ARRAY
30660: PPUSH
30661: CALL_OW 428
30665: ST_TO_ADDR
// if not tmp then
30666: LD_VAR 0 4
30670: NOT
30671: IFFALSE 30675
// continue ;
30673: GO 30590
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
30675: LD_VAR 0 4
30679: PUSH
30680: LD_INT 81
30682: PUSH
30683: LD_VAR 0 3
30687: PUSH
30688: EMPTY
30689: LIST
30690: LIST
30691: PPUSH
30692: CALL_OW 69
30696: IN
30697: PUSH
30698: LD_EXP 91
30702: PUSH
30703: LD_VAR 0 1
30707: ARRAY
30708: PUSH
30709: LD_VAR 0 2
30713: ARRAY
30714: PUSH
30715: LD_INT 1
30717: ARRAY
30718: PPUSH
30719: LD_EXP 91
30723: PUSH
30724: LD_VAR 0 1
30728: ARRAY
30729: PUSH
30730: LD_VAR 0 2
30734: ARRAY
30735: PUSH
30736: LD_INT 2
30738: ARRAY
30739: PPUSH
30740: CALL_OW 458
30744: AND
30745: IFFALSE 30839
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
30747: LD_EXP 91
30751: PUSH
30752: LD_VAR 0 1
30756: ARRAY
30757: PUSH
30758: LD_VAR 0 2
30762: ARRAY
30763: PUSH
30764: LD_INT 1
30766: ARRAY
30767: PPUSH
30768: LD_EXP 91
30772: PUSH
30773: LD_VAR 0 1
30777: ARRAY
30778: PUSH
30779: LD_VAR 0 2
30783: ARRAY
30784: PUSH
30785: LD_INT 2
30787: ARRAY
30788: PPUSH
30789: LD_VAR 0 3
30793: PPUSH
30794: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
30798: LD_ADDR_EXP 91
30802: PUSH
30803: LD_EXP 91
30807: PPUSH
30808: LD_VAR 0 1
30812: PPUSH
30813: LD_EXP 91
30817: PUSH
30818: LD_VAR 0 1
30822: ARRAY
30823: PPUSH
30824: LD_VAR 0 2
30828: PPUSH
30829: CALL_OW 3
30833: PPUSH
30834: CALL_OW 1
30838: ST_TO_ADDR
// end ; end ;
30839: GO 30590
30841: POP
30842: POP
// end ;
30843: GO 30508
30845: POP
30846: POP
// end ;
30847: PPOPN 4
30849: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
30850: LD_INT 0
30852: PPUSH
30853: PPUSH
// result := false ;
30854: LD_ADDR_VAR 0 4
30858: PUSH
30859: LD_INT 0
30861: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
30862: LD_VAR 0 1
30866: PPUSH
30867: CALL_OW 264
30871: PUSH
30872: LD_INT 81
30874: EQUAL
30875: NOT
30876: IFFALSE 30880
// exit ;
30878: GO 31120
// index := GetElementIndex ( minersList , unit ) ;
30880: LD_ADDR_VAR 0 5
30884: PUSH
30885: LD_EXP 90
30889: PPUSH
30890: LD_VAR 0 1
30894: PPUSH
30895: CALL 37253 0 2
30899: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
30900: LD_EXP 91
30904: PUSH
30905: LD_VAR 0 5
30909: ARRAY
30910: PUSH
30911: LD_EXP 92
30915: GREATEREQUAL
30916: IFFALSE 30920
// exit ;
30918: GO 31120
// ComMoveXY ( unit , x , y ) ;
30920: LD_VAR 0 1
30924: PPUSH
30925: LD_VAR 0 2
30929: PPUSH
30930: LD_VAR 0 3
30934: PPUSH
30935: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
30939: LD_INT 35
30941: PPUSH
30942: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
30946: LD_VAR 0 1
30950: PPUSH
30951: LD_VAR 0 2
30955: PPUSH
30956: LD_VAR 0 3
30960: PPUSH
30961: CALL 68608 0 3
30965: NOT
30966: PUSH
30967: LD_VAR 0 1
30971: PPUSH
30972: CALL_OW 314
30976: AND
30977: IFFALSE 30981
// exit ;
30979: GO 31120
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
30981: LD_VAR 0 2
30985: PPUSH
30986: LD_VAR 0 3
30990: PPUSH
30991: CALL_OW 428
30995: PUSH
30996: LD_VAR 0 1
31000: EQUAL
31001: PUSH
31002: LD_VAR 0 1
31006: PPUSH
31007: CALL_OW 314
31011: NOT
31012: AND
31013: IFFALSE 30939
// PlaySoundXY ( x , y , PlantMine ) ;
31015: LD_VAR 0 2
31019: PPUSH
31020: LD_VAR 0 3
31024: PPUSH
31025: LD_STRING PlantMine
31027: PPUSH
31028: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
31032: LD_VAR 0 2
31036: PPUSH
31037: LD_VAR 0 3
31041: PPUSH
31042: LD_VAR 0 1
31046: PPUSH
31047: CALL_OW 255
31051: PPUSH
31052: LD_INT 0
31054: PPUSH
31055: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
31059: LD_ADDR_EXP 91
31063: PUSH
31064: LD_EXP 91
31068: PPUSH
31069: LD_VAR 0 5
31073: PUSH
31074: LD_EXP 91
31078: PUSH
31079: LD_VAR 0 5
31083: ARRAY
31084: PUSH
31085: LD_INT 1
31087: PLUS
31088: PUSH
31089: EMPTY
31090: LIST
31091: LIST
31092: PPUSH
31093: LD_VAR 0 2
31097: PUSH
31098: LD_VAR 0 3
31102: PUSH
31103: EMPTY
31104: LIST
31105: LIST
31106: PPUSH
31107: CALL 37468 0 3
31111: ST_TO_ADDR
// result := true ;
31112: LD_ADDR_VAR 0 4
31116: PUSH
31117: LD_INT 1
31119: ST_TO_ADDR
// end ;
31120: LD_VAR 0 4
31124: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
31125: LD_INT 0
31127: PPUSH
31128: PPUSH
31129: PPUSH
// if not unit in minersList then
31130: LD_VAR 0 1
31134: PUSH
31135: LD_EXP 90
31139: IN
31140: NOT
31141: IFFALSE 31145
// exit ;
31143: GO 31537
// index := GetElementIndex ( minersList , unit ) ;
31145: LD_ADDR_VAR 0 6
31149: PUSH
31150: LD_EXP 90
31154: PPUSH
31155: LD_VAR 0 1
31159: PPUSH
31160: CALL 37253 0 2
31164: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
31165: LD_ADDR_VAR 0 5
31169: PUSH
31170: DOUBLE
31171: LD_EXP 91
31175: PUSH
31176: LD_VAR 0 6
31180: ARRAY
31181: INC
31182: ST_TO_ADDR
31183: LD_INT 1
31185: PUSH
31186: FOR_DOWNTO
31187: IFFALSE 31348
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
31189: LD_EXP 91
31193: PUSH
31194: LD_VAR 0 6
31198: ARRAY
31199: PUSH
31200: LD_VAR 0 5
31204: ARRAY
31205: PUSH
31206: LD_INT 1
31208: ARRAY
31209: PUSH
31210: LD_VAR 0 2
31214: EQUAL
31215: PUSH
31216: LD_EXP 91
31220: PUSH
31221: LD_VAR 0 6
31225: ARRAY
31226: PUSH
31227: LD_VAR 0 5
31231: ARRAY
31232: PUSH
31233: LD_INT 2
31235: ARRAY
31236: PUSH
31237: LD_VAR 0 3
31241: EQUAL
31242: AND
31243: IFFALSE 31346
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
31245: LD_EXP 91
31249: PUSH
31250: LD_VAR 0 6
31254: ARRAY
31255: PUSH
31256: LD_VAR 0 5
31260: ARRAY
31261: PUSH
31262: LD_INT 1
31264: ARRAY
31265: PPUSH
31266: LD_EXP 91
31270: PUSH
31271: LD_VAR 0 6
31275: ARRAY
31276: PUSH
31277: LD_VAR 0 5
31281: ARRAY
31282: PUSH
31283: LD_INT 2
31285: ARRAY
31286: PPUSH
31287: LD_VAR 0 1
31291: PPUSH
31292: CALL_OW 255
31296: PPUSH
31297: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
31301: LD_ADDR_EXP 91
31305: PUSH
31306: LD_EXP 91
31310: PPUSH
31311: LD_VAR 0 6
31315: PPUSH
31316: LD_EXP 91
31320: PUSH
31321: LD_VAR 0 6
31325: ARRAY
31326: PPUSH
31327: LD_VAR 0 5
31331: PPUSH
31332: CALL_OW 3
31336: PPUSH
31337: CALL_OW 1
31341: ST_TO_ADDR
// exit ;
31342: POP
31343: POP
31344: GO 31537
// end ; end ;
31346: GO 31186
31348: POP
31349: POP
// for i := minerMinesList [ index ] downto 1 do
31350: LD_ADDR_VAR 0 5
31354: PUSH
31355: DOUBLE
31356: LD_EXP 91
31360: PUSH
31361: LD_VAR 0 6
31365: ARRAY
31366: INC
31367: ST_TO_ADDR
31368: LD_INT 1
31370: PUSH
31371: FOR_DOWNTO
31372: IFFALSE 31535
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
31374: LD_EXP 91
31378: PUSH
31379: LD_VAR 0 6
31383: ARRAY
31384: PUSH
31385: LD_VAR 0 5
31389: ARRAY
31390: PUSH
31391: LD_INT 1
31393: ARRAY
31394: PPUSH
31395: LD_EXP 91
31399: PUSH
31400: LD_VAR 0 6
31404: ARRAY
31405: PUSH
31406: LD_VAR 0 5
31410: ARRAY
31411: PUSH
31412: LD_INT 2
31414: ARRAY
31415: PPUSH
31416: LD_VAR 0 2
31420: PPUSH
31421: LD_VAR 0 3
31425: PPUSH
31426: CALL_OW 298
31430: PUSH
31431: LD_INT 6
31433: LESS
31434: IFFALSE 31533
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
31436: LD_EXP 91
31440: PUSH
31441: LD_VAR 0 6
31445: ARRAY
31446: PUSH
31447: LD_VAR 0 5
31451: ARRAY
31452: PUSH
31453: LD_INT 1
31455: ARRAY
31456: PPUSH
31457: LD_EXP 91
31461: PUSH
31462: LD_VAR 0 6
31466: ARRAY
31467: PUSH
31468: LD_VAR 0 5
31472: ARRAY
31473: PUSH
31474: LD_INT 2
31476: ARRAY
31477: PPUSH
31478: LD_VAR 0 1
31482: PPUSH
31483: CALL_OW 255
31487: PPUSH
31488: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
31492: LD_ADDR_EXP 91
31496: PUSH
31497: LD_EXP 91
31501: PPUSH
31502: LD_VAR 0 6
31506: PPUSH
31507: LD_EXP 91
31511: PUSH
31512: LD_VAR 0 6
31516: ARRAY
31517: PPUSH
31518: LD_VAR 0 5
31522: PPUSH
31523: CALL_OW 3
31527: PPUSH
31528: CALL_OW 1
31532: ST_TO_ADDR
// end ; end ;
31533: GO 31371
31535: POP
31536: POP
// end ;
31537: LD_VAR 0 4
31541: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
31542: LD_INT 0
31544: PPUSH
31545: PPUSH
31546: PPUSH
31547: PPUSH
31548: PPUSH
31549: PPUSH
31550: PPUSH
31551: PPUSH
31552: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
31553: LD_VAR 0 1
31557: PPUSH
31558: CALL_OW 264
31562: PUSH
31563: LD_INT 81
31565: EQUAL
31566: NOT
31567: PUSH
31568: LD_VAR 0 1
31572: PUSH
31573: LD_EXP 90
31577: IN
31578: NOT
31579: OR
31580: IFFALSE 31584
// exit ;
31582: GO 31906
// index := GetElementIndex ( minersList , unit ) ;
31584: LD_ADDR_VAR 0 6
31588: PUSH
31589: LD_EXP 90
31593: PPUSH
31594: LD_VAR 0 1
31598: PPUSH
31599: CALL 37253 0 2
31603: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
31604: LD_ADDR_VAR 0 8
31608: PUSH
31609: LD_EXP 92
31613: PUSH
31614: LD_EXP 91
31618: PUSH
31619: LD_VAR 0 6
31623: ARRAY
31624: MINUS
31625: ST_TO_ADDR
// if not minesFreeAmount then
31626: LD_VAR 0 8
31630: NOT
31631: IFFALSE 31635
// exit ;
31633: GO 31906
// tmp := [ ] ;
31635: LD_ADDR_VAR 0 7
31639: PUSH
31640: EMPTY
31641: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
31642: LD_ADDR_VAR 0 5
31646: PUSH
31647: DOUBLE
31648: LD_INT 1
31650: DEC
31651: ST_TO_ADDR
31652: LD_VAR 0 8
31656: PUSH
31657: FOR_TO
31658: IFFALSE 31853
// begin _d := rand ( 0 , 5 ) ;
31660: LD_ADDR_VAR 0 11
31664: PUSH
31665: LD_INT 0
31667: PPUSH
31668: LD_INT 5
31670: PPUSH
31671: CALL_OW 12
31675: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
31676: LD_ADDR_VAR 0 12
31680: PUSH
31681: LD_INT 2
31683: PPUSH
31684: LD_INT 6
31686: PPUSH
31687: CALL_OW 12
31691: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
31692: LD_ADDR_VAR 0 9
31696: PUSH
31697: LD_VAR 0 2
31701: PPUSH
31702: LD_VAR 0 11
31706: PPUSH
31707: LD_VAR 0 12
31711: PPUSH
31712: CALL_OW 272
31716: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
31717: LD_ADDR_VAR 0 10
31721: PUSH
31722: LD_VAR 0 3
31726: PPUSH
31727: LD_VAR 0 11
31731: PPUSH
31732: LD_VAR 0 12
31736: PPUSH
31737: CALL_OW 273
31741: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
31742: LD_VAR 0 9
31746: PPUSH
31747: LD_VAR 0 10
31751: PPUSH
31752: CALL_OW 488
31756: PUSH
31757: LD_VAR 0 9
31761: PUSH
31762: LD_VAR 0 10
31766: PUSH
31767: EMPTY
31768: LIST
31769: LIST
31770: PUSH
31771: LD_VAR 0 7
31775: IN
31776: NOT
31777: AND
31778: PUSH
31779: LD_VAR 0 9
31783: PPUSH
31784: LD_VAR 0 10
31788: PPUSH
31789: CALL_OW 458
31793: NOT
31794: AND
31795: IFFALSE 31837
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
31797: LD_ADDR_VAR 0 7
31801: PUSH
31802: LD_VAR 0 7
31806: PPUSH
31807: LD_VAR 0 7
31811: PUSH
31812: LD_INT 1
31814: PLUS
31815: PPUSH
31816: LD_VAR 0 9
31820: PUSH
31821: LD_VAR 0 10
31825: PUSH
31826: EMPTY
31827: LIST
31828: LIST
31829: PPUSH
31830: CALL_OW 1
31834: ST_TO_ADDR
31835: GO 31851
// i := i - 1 ;
31837: LD_ADDR_VAR 0 5
31841: PUSH
31842: LD_VAR 0 5
31846: PUSH
31847: LD_INT 1
31849: MINUS
31850: ST_TO_ADDR
// end ;
31851: GO 31657
31853: POP
31854: POP
// for i in tmp do
31855: LD_ADDR_VAR 0 5
31859: PUSH
31860: LD_VAR 0 7
31864: PUSH
31865: FOR_IN
31866: IFFALSE 31904
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
31868: LD_VAR 0 1
31872: PPUSH
31873: LD_VAR 0 5
31877: PUSH
31878: LD_INT 1
31880: ARRAY
31881: PPUSH
31882: LD_VAR 0 5
31886: PUSH
31887: LD_INT 2
31889: ARRAY
31890: PPUSH
31891: CALL 30850 0 3
31895: NOT
31896: IFFALSE 31902
// exit ;
31898: POP
31899: POP
31900: GO 31906
31902: GO 31865
31904: POP
31905: POP
// end ;
31906: LD_VAR 0 4
31910: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
31911: LD_INT 0
31913: PPUSH
31914: PPUSH
31915: PPUSH
31916: PPUSH
31917: PPUSH
31918: PPUSH
31919: PPUSH
// if not GetClass ( unit ) = class_sniper then
31920: LD_VAR 0 1
31924: PPUSH
31925: CALL_OW 257
31929: PUSH
31930: LD_INT 5
31932: EQUAL
31933: NOT
31934: IFFALSE 31938
// exit ;
31936: GO 32326
// dist := 8 ;
31938: LD_ADDR_VAR 0 5
31942: PUSH
31943: LD_INT 8
31945: ST_TO_ADDR
// viewRange := 12 ;
31946: LD_ADDR_VAR 0 7
31950: PUSH
31951: LD_INT 12
31953: ST_TO_ADDR
// side := GetSide ( unit ) ;
31954: LD_ADDR_VAR 0 6
31958: PUSH
31959: LD_VAR 0 1
31963: PPUSH
31964: CALL_OW 255
31968: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
31969: LD_INT 61
31971: PPUSH
31972: LD_VAR 0 6
31976: PPUSH
31977: CALL_OW 321
31981: PUSH
31982: LD_INT 2
31984: EQUAL
31985: IFFALSE 31995
// viewRange := 16 ;
31987: LD_ADDR_VAR 0 7
31991: PUSH
31992: LD_INT 16
31994: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
31995: LD_VAR 0 1
31999: PPUSH
32000: LD_VAR 0 2
32004: PPUSH
32005: LD_VAR 0 3
32009: PPUSH
32010: CALL_OW 297
32014: PUSH
32015: LD_VAR 0 5
32019: GREATER
32020: IFFALSE 32099
// begin ComMoveXY ( unit , x , y ) ;
32022: LD_VAR 0 1
32026: PPUSH
32027: LD_VAR 0 2
32031: PPUSH
32032: LD_VAR 0 3
32036: PPUSH
32037: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
32041: LD_INT 35
32043: PPUSH
32044: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
32048: LD_VAR 0 1
32052: PPUSH
32053: LD_VAR 0 2
32057: PPUSH
32058: LD_VAR 0 3
32062: PPUSH
32063: CALL 68608 0 3
32067: NOT
32068: IFFALSE 32072
// exit ;
32070: GO 32326
// until GetDistUnitXY ( unit , x , y ) < dist ;
32072: LD_VAR 0 1
32076: PPUSH
32077: LD_VAR 0 2
32081: PPUSH
32082: LD_VAR 0 3
32086: PPUSH
32087: CALL_OW 297
32091: PUSH
32092: LD_VAR 0 5
32096: LESS
32097: IFFALSE 32041
// end ; ComTurnXY ( unit , x , y ) ;
32099: LD_VAR 0 1
32103: PPUSH
32104: LD_VAR 0 2
32108: PPUSH
32109: LD_VAR 0 3
32113: PPUSH
32114: CALL_OW 118
// wait ( 5 ) ;
32118: LD_INT 5
32120: PPUSH
32121: CALL_OW 67
// _d := GetDir ( unit ) ;
32125: LD_ADDR_VAR 0 10
32129: PUSH
32130: LD_VAR 0 1
32134: PPUSH
32135: CALL_OW 254
32139: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
32140: LD_ADDR_VAR 0 8
32144: PUSH
32145: LD_VAR 0 1
32149: PPUSH
32150: CALL_OW 250
32154: PPUSH
32155: LD_VAR 0 10
32159: PPUSH
32160: LD_VAR 0 5
32164: PPUSH
32165: CALL_OW 272
32169: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
32170: LD_ADDR_VAR 0 9
32174: PUSH
32175: LD_VAR 0 1
32179: PPUSH
32180: CALL_OW 251
32184: PPUSH
32185: LD_VAR 0 10
32189: PPUSH
32190: LD_VAR 0 5
32194: PPUSH
32195: CALL_OW 273
32199: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32200: LD_VAR 0 8
32204: PPUSH
32205: LD_VAR 0 9
32209: PPUSH
32210: CALL_OW 488
32214: NOT
32215: IFFALSE 32219
// exit ;
32217: GO 32326
// ComAnimCustom ( unit , 1 ) ;
32219: LD_VAR 0 1
32223: PPUSH
32224: LD_INT 1
32226: PPUSH
32227: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
32231: LD_VAR 0 8
32235: PPUSH
32236: LD_VAR 0 9
32240: PPUSH
32241: LD_VAR 0 6
32245: PPUSH
32246: LD_VAR 0 7
32250: PPUSH
32251: CALL_OW 330
// repeat wait ( 1 ) ;
32255: LD_INT 1
32257: PPUSH
32258: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
32262: LD_VAR 0 1
32266: PPUSH
32267: CALL_OW 316
32271: PUSH
32272: LD_VAR 0 1
32276: PPUSH
32277: CALL_OW 314
32281: OR
32282: PUSH
32283: LD_VAR 0 1
32287: PPUSH
32288: CALL_OW 302
32292: NOT
32293: OR
32294: PUSH
32295: LD_VAR 0 1
32299: PPUSH
32300: CALL_OW 301
32304: OR
32305: IFFALSE 32255
// RemoveSeeing ( _x , _y , side ) ;
32307: LD_VAR 0 8
32311: PPUSH
32312: LD_VAR 0 9
32316: PPUSH
32317: LD_VAR 0 6
32321: PPUSH
32322: CALL_OW 331
// end ; end_of_file
32326: LD_VAR 0 4
32330: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
32331: LD_INT 0
32333: PPUSH
32334: PPUSH
// if exist_mode then
32335: LD_VAR 0 2
32339: IFFALSE 32364
// unit := CreateCharacter ( prefix & ident ) else
32341: LD_ADDR_VAR 0 5
32345: PUSH
32346: LD_VAR 0 3
32350: PUSH
32351: LD_VAR 0 1
32355: STR
32356: PPUSH
32357: CALL_OW 34
32361: ST_TO_ADDR
32362: GO 32379
// unit := NewCharacter ( ident ) ;
32364: LD_ADDR_VAR 0 5
32368: PUSH
32369: LD_VAR 0 1
32373: PPUSH
32374: CALL_OW 25
32378: ST_TO_ADDR
// result := unit ;
32379: LD_ADDR_VAR 0 4
32383: PUSH
32384: LD_VAR 0 5
32388: ST_TO_ADDR
// end ;
32389: LD_VAR 0 4
32393: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
32394: LD_INT 0
32396: PPUSH
32397: PPUSH
// if not side or not nation then
32398: LD_VAR 0 1
32402: NOT
32403: PUSH
32404: LD_VAR 0 2
32408: NOT
32409: OR
32410: IFFALSE 32414
// exit ;
32412: GO 33182
// case nation of nation_american :
32414: LD_VAR 0 2
32418: PUSH
32419: LD_INT 1
32421: DOUBLE
32422: EQUAL
32423: IFTRUE 32427
32425: GO 32641
32427: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
32428: LD_ADDR_VAR 0 4
32432: PUSH
32433: LD_INT 35
32435: PUSH
32436: LD_INT 45
32438: PUSH
32439: LD_INT 46
32441: PUSH
32442: LD_INT 47
32444: PUSH
32445: LD_INT 82
32447: PUSH
32448: LD_INT 83
32450: PUSH
32451: LD_INT 84
32453: PUSH
32454: LD_INT 85
32456: PUSH
32457: LD_INT 86
32459: PUSH
32460: LD_INT 1
32462: PUSH
32463: LD_INT 2
32465: PUSH
32466: LD_INT 6
32468: PUSH
32469: LD_INT 15
32471: PUSH
32472: LD_INT 16
32474: PUSH
32475: LD_INT 7
32477: PUSH
32478: LD_INT 12
32480: PUSH
32481: LD_INT 13
32483: PUSH
32484: LD_INT 10
32486: PUSH
32487: LD_INT 14
32489: PUSH
32490: LD_INT 20
32492: PUSH
32493: LD_INT 21
32495: PUSH
32496: LD_INT 22
32498: PUSH
32499: LD_INT 25
32501: PUSH
32502: LD_INT 32
32504: PUSH
32505: LD_INT 27
32507: PUSH
32508: LD_INT 36
32510: PUSH
32511: LD_INT 69
32513: PUSH
32514: LD_INT 39
32516: PUSH
32517: LD_INT 34
32519: PUSH
32520: LD_INT 40
32522: PUSH
32523: LD_INT 48
32525: PUSH
32526: LD_INT 49
32528: PUSH
32529: LD_INT 50
32531: PUSH
32532: LD_INT 51
32534: PUSH
32535: LD_INT 52
32537: PUSH
32538: LD_INT 53
32540: PUSH
32541: LD_INT 54
32543: PUSH
32544: LD_INT 55
32546: PUSH
32547: LD_INT 56
32549: PUSH
32550: LD_INT 57
32552: PUSH
32553: LD_INT 58
32555: PUSH
32556: LD_INT 59
32558: PUSH
32559: LD_INT 60
32561: PUSH
32562: LD_INT 61
32564: PUSH
32565: LD_INT 62
32567: PUSH
32568: LD_INT 80
32570: PUSH
32571: LD_INT 82
32573: PUSH
32574: LD_INT 83
32576: PUSH
32577: LD_INT 84
32579: PUSH
32580: LD_INT 85
32582: PUSH
32583: LD_INT 86
32585: PUSH
32586: EMPTY
32587: LIST
32588: LIST
32589: LIST
32590: LIST
32591: LIST
32592: LIST
32593: LIST
32594: LIST
32595: LIST
32596: LIST
32597: LIST
32598: LIST
32599: LIST
32600: LIST
32601: LIST
32602: LIST
32603: LIST
32604: LIST
32605: LIST
32606: LIST
32607: LIST
32608: LIST
32609: LIST
32610: LIST
32611: LIST
32612: LIST
32613: LIST
32614: LIST
32615: LIST
32616: LIST
32617: LIST
32618: LIST
32619: LIST
32620: LIST
32621: LIST
32622: LIST
32623: LIST
32624: LIST
32625: LIST
32626: LIST
32627: LIST
32628: LIST
32629: LIST
32630: LIST
32631: LIST
32632: LIST
32633: LIST
32634: LIST
32635: LIST
32636: LIST
32637: LIST
32638: ST_TO_ADDR
32639: GO 33106
32641: LD_INT 2
32643: DOUBLE
32644: EQUAL
32645: IFTRUE 32649
32647: GO 32875
32649: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
32650: LD_ADDR_VAR 0 4
32654: PUSH
32655: LD_INT 35
32657: PUSH
32658: LD_INT 45
32660: PUSH
32661: LD_INT 46
32663: PUSH
32664: LD_INT 47
32666: PUSH
32667: LD_INT 82
32669: PUSH
32670: LD_INT 83
32672: PUSH
32673: LD_INT 84
32675: PUSH
32676: LD_INT 85
32678: PUSH
32679: LD_INT 87
32681: PUSH
32682: LD_INT 70
32684: PUSH
32685: LD_INT 1
32687: PUSH
32688: LD_INT 11
32690: PUSH
32691: LD_INT 3
32693: PUSH
32694: LD_INT 4
32696: PUSH
32697: LD_INT 5
32699: PUSH
32700: LD_INT 6
32702: PUSH
32703: LD_INT 15
32705: PUSH
32706: LD_INT 18
32708: PUSH
32709: LD_INT 7
32711: PUSH
32712: LD_INT 17
32714: PUSH
32715: LD_INT 8
32717: PUSH
32718: LD_INT 20
32720: PUSH
32721: LD_INT 21
32723: PUSH
32724: LD_INT 22
32726: PUSH
32727: LD_INT 72
32729: PUSH
32730: LD_INT 26
32732: PUSH
32733: LD_INT 69
32735: PUSH
32736: LD_INT 39
32738: PUSH
32739: LD_INT 40
32741: PUSH
32742: LD_INT 41
32744: PUSH
32745: LD_INT 42
32747: PUSH
32748: LD_INT 43
32750: PUSH
32751: LD_INT 48
32753: PUSH
32754: LD_INT 49
32756: PUSH
32757: LD_INT 50
32759: PUSH
32760: LD_INT 51
32762: PUSH
32763: LD_INT 52
32765: PUSH
32766: LD_INT 53
32768: PUSH
32769: LD_INT 54
32771: PUSH
32772: LD_INT 55
32774: PUSH
32775: LD_INT 56
32777: PUSH
32778: LD_INT 60
32780: PUSH
32781: LD_INT 61
32783: PUSH
32784: LD_INT 62
32786: PUSH
32787: LD_INT 66
32789: PUSH
32790: LD_INT 67
32792: PUSH
32793: LD_INT 68
32795: PUSH
32796: LD_INT 81
32798: PUSH
32799: LD_INT 82
32801: PUSH
32802: LD_INT 83
32804: PUSH
32805: LD_INT 84
32807: PUSH
32808: LD_INT 85
32810: PUSH
32811: LD_INT 87
32813: PUSH
32814: LD_INT 88
32816: PUSH
32817: EMPTY
32818: LIST
32819: LIST
32820: LIST
32821: LIST
32822: LIST
32823: LIST
32824: LIST
32825: LIST
32826: LIST
32827: LIST
32828: LIST
32829: LIST
32830: LIST
32831: LIST
32832: LIST
32833: LIST
32834: LIST
32835: LIST
32836: LIST
32837: LIST
32838: LIST
32839: LIST
32840: LIST
32841: LIST
32842: LIST
32843: LIST
32844: LIST
32845: LIST
32846: LIST
32847: LIST
32848: LIST
32849: LIST
32850: LIST
32851: LIST
32852: LIST
32853: LIST
32854: LIST
32855: LIST
32856: LIST
32857: LIST
32858: LIST
32859: LIST
32860: LIST
32861: LIST
32862: LIST
32863: LIST
32864: LIST
32865: LIST
32866: LIST
32867: LIST
32868: LIST
32869: LIST
32870: LIST
32871: LIST
32872: ST_TO_ADDR
32873: GO 33106
32875: LD_INT 3
32877: DOUBLE
32878: EQUAL
32879: IFTRUE 32883
32881: GO 33105
32883: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
32884: LD_ADDR_VAR 0 4
32888: PUSH
32889: LD_INT 46
32891: PUSH
32892: LD_INT 47
32894: PUSH
32895: LD_INT 1
32897: PUSH
32898: LD_INT 2
32900: PUSH
32901: LD_INT 82
32903: PUSH
32904: LD_INT 83
32906: PUSH
32907: LD_INT 84
32909: PUSH
32910: LD_INT 85
32912: PUSH
32913: LD_INT 86
32915: PUSH
32916: LD_INT 11
32918: PUSH
32919: LD_INT 9
32921: PUSH
32922: LD_INT 20
32924: PUSH
32925: LD_INT 19
32927: PUSH
32928: LD_INT 21
32930: PUSH
32931: LD_INT 24
32933: PUSH
32934: LD_INT 22
32936: PUSH
32937: LD_INT 25
32939: PUSH
32940: LD_INT 28
32942: PUSH
32943: LD_INT 29
32945: PUSH
32946: LD_INT 30
32948: PUSH
32949: LD_INT 31
32951: PUSH
32952: LD_INT 37
32954: PUSH
32955: LD_INT 38
32957: PUSH
32958: LD_INT 32
32960: PUSH
32961: LD_INT 27
32963: PUSH
32964: LD_INT 33
32966: PUSH
32967: LD_INT 69
32969: PUSH
32970: LD_INT 39
32972: PUSH
32973: LD_INT 34
32975: PUSH
32976: LD_INT 40
32978: PUSH
32979: LD_INT 71
32981: PUSH
32982: LD_INT 23
32984: PUSH
32985: LD_INT 44
32987: PUSH
32988: LD_INT 48
32990: PUSH
32991: LD_INT 49
32993: PUSH
32994: LD_INT 50
32996: PUSH
32997: LD_INT 51
32999: PUSH
33000: LD_INT 52
33002: PUSH
33003: LD_INT 53
33005: PUSH
33006: LD_INT 54
33008: PUSH
33009: LD_INT 55
33011: PUSH
33012: LD_INT 56
33014: PUSH
33015: LD_INT 57
33017: PUSH
33018: LD_INT 58
33020: PUSH
33021: LD_INT 59
33023: PUSH
33024: LD_INT 63
33026: PUSH
33027: LD_INT 64
33029: PUSH
33030: LD_INT 65
33032: PUSH
33033: LD_INT 82
33035: PUSH
33036: LD_INT 83
33038: PUSH
33039: LD_INT 84
33041: PUSH
33042: LD_INT 85
33044: PUSH
33045: LD_INT 86
33047: PUSH
33048: EMPTY
33049: LIST
33050: LIST
33051: LIST
33052: LIST
33053: LIST
33054: LIST
33055: LIST
33056: LIST
33057: LIST
33058: LIST
33059: LIST
33060: LIST
33061: LIST
33062: LIST
33063: LIST
33064: LIST
33065: LIST
33066: LIST
33067: LIST
33068: LIST
33069: LIST
33070: LIST
33071: LIST
33072: LIST
33073: LIST
33074: LIST
33075: LIST
33076: LIST
33077: LIST
33078: LIST
33079: LIST
33080: LIST
33081: LIST
33082: LIST
33083: LIST
33084: LIST
33085: LIST
33086: LIST
33087: LIST
33088: LIST
33089: LIST
33090: LIST
33091: LIST
33092: LIST
33093: LIST
33094: LIST
33095: LIST
33096: LIST
33097: LIST
33098: LIST
33099: LIST
33100: LIST
33101: LIST
33102: ST_TO_ADDR
33103: GO 33106
33105: POP
// if state > - 1 and state < 3 then
33106: LD_VAR 0 3
33110: PUSH
33111: LD_INT 1
33113: NEG
33114: GREATER
33115: PUSH
33116: LD_VAR 0 3
33120: PUSH
33121: LD_INT 3
33123: LESS
33124: AND
33125: IFFALSE 33182
// for i in result do
33127: LD_ADDR_VAR 0 5
33131: PUSH
33132: LD_VAR 0 4
33136: PUSH
33137: FOR_IN
33138: IFFALSE 33180
// if GetTech ( i , side ) <> state then
33140: LD_VAR 0 5
33144: PPUSH
33145: LD_VAR 0 1
33149: PPUSH
33150: CALL_OW 321
33154: PUSH
33155: LD_VAR 0 3
33159: NONEQUAL
33160: IFFALSE 33178
// result := result diff i ;
33162: LD_ADDR_VAR 0 4
33166: PUSH
33167: LD_VAR 0 4
33171: PUSH
33172: LD_VAR 0 5
33176: DIFF
33177: ST_TO_ADDR
33178: GO 33137
33180: POP
33181: POP
// end ;
33182: LD_VAR 0 4
33186: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
33187: LD_INT 0
33189: PPUSH
33190: PPUSH
33191: PPUSH
// result := true ;
33192: LD_ADDR_VAR 0 3
33196: PUSH
33197: LD_INT 1
33199: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
33200: LD_ADDR_VAR 0 5
33204: PUSH
33205: LD_VAR 0 2
33209: PPUSH
33210: CALL_OW 480
33214: ST_TO_ADDR
// if not tmp then
33215: LD_VAR 0 5
33219: NOT
33220: IFFALSE 33224
// exit ;
33222: GO 33273
// for i in tmp do
33224: LD_ADDR_VAR 0 4
33228: PUSH
33229: LD_VAR 0 5
33233: PUSH
33234: FOR_IN
33235: IFFALSE 33271
// if GetTech ( i , side ) <> state_researched then
33237: LD_VAR 0 4
33241: PPUSH
33242: LD_VAR 0 1
33246: PPUSH
33247: CALL_OW 321
33251: PUSH
33252: LD_INT 2
33254: NONEQUAL
33255: IFFALSE 33269
// begin result := false ;
33257: LD_ADDR_VAR 0 3
33261: PUSH
33262: LD_INT 0
33264: ST_TO_ADDR
// exit ;
33265: POP
33266: POP
33267: GO 33273
// end ;
33269: GO 33234
33271: POP
33272: POP
// end ;
33273: LD_VAR 0 3
33277: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
33278: LD_INT 0
33280: PPUSH
33281: PPUSH
33282: PPUSH
33283: PPUSH
33284: PPUSH
33285: PPUSH
33286: PPUSH
33287: PPUSH
33288: PPUSH
33289: PPUSH
33290: PPUSH
33291: PPUSH
33292: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
33293: LD_VAR 0 1
33297: NOT
33298: PUSH
33299: LD_VAR 0 1
33303: PPUSH
33304: CALL_OW 257
33308: PUSH
33309: LD_INT 9
33311: NONEQUAL
33312: OR
33313: IFFALSE 33317
// exit ;
33315: GO 33890
// side := GetSide ( unit ) ;
33317: LD_ADDR_VAR 0 9
33321: PUSH
33322: LD_VAR 0 1
33326: PPUSH
33327: CALL_OW 255
33331: ST_TO_ADDR
// tech_space := tech_spacanom ;
33332: LD_ADDR_VAR 0 12
33336: PUSH
33337: LD_INT 29
33339: ST_TO_ADDR
// tech_time := tech_taurad ;
33340: LD_ADDR_VAR 0 13
33344: PUSH
33345: LD_INT 28
33347: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
33348: LD_ADDR_VAR 0 11
33352: PUSH
33353: LD_VAR 0 1
33357: PPUSH
33358: CALL_OW 310
33362: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
33363: LD_VAR 0 11
33367: PPUSH
33368: CALL_OW 247
33372: PUSH
33373: LD_INT 2
33375: EQUAL
33376: IFFALSE 33380
// exit ;
33378: GO 33890
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33380: LD_ADDR_VAR 0 8
33384: PUSH
33385: LD_INT 81
33387: PUSH
33388: LD_VAR 0 9
33392: PUSH
33393: EMPTY
33394: LIST
33395: LIST
33396: PUSH
33397: LD_INT 3
33399: PUSH
33400: LD_INT 21
33402: PUSH
33403: LD_INT 3
33405: PUSH
33406: EMPTY
33407: LIST
33408: LIST
33409: PUSH
33410: EMPTY
33411: LIST
33412: LIST
33413: PUSH
33414: EMPTY
33415: LIST
33416: LIST
33417: PPUSH
33418: CALL_OW 69
33422: ST_TO_ADDR
// if not tmp then
33423: LD_VAR 0 8
33427: NOT
33428: IFFALSE 33432
// exit ;
33430: GO 33890
// if in_unit then
33432: LD_VAR 0 11
33436: IFFALSE 33460
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
33438: LD_ADDR_VAR 0 10
33442: PUSH
33443: LD_VAR 0 8
33447: PPUSH
33448: LD_VAR 0 11
33452: PPUSH
33453: CALL_OW 74
33457: ST_TO_ADDR
33458: GO 33480
// enemy := NearestUnitToUnit ( tmp , unit ) ;
33460: LD_ADDR_VAR 0 10
33464: PUSH
33465: LD_VAR 0 8
33469: PPUSH
33470: LD_VAR 0 1
33474: PPUSH
33475: CALL_OW 74
33479: ST_TO_ADDR
// if not enemy then
33480: LD_VAR 0 10
33484: NOT
33485: IFFALSE 33489
// exit ;
33487: GO 33890
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
33489: LD_VAR 0 11
33493: PUSH
33494: LD_VAR 0 11
33498: PPUSH
33499: LD_VAR 0 10
33503: PPUSH
33504: CALL_OW 296
33508: PUSH
33509: LD_INT 13
33511: GREATER
33512: AND
33513: PUSH
33514: LD_VAR 0 1
33518: PPUSH
33519: LD_VAR 0 10
33523: PPUSH
33524: CALL_OW 296
33528: PUSH
33529: LD_INT 12
33531: GREATER
33532: OR
33533: IFFALSE 33537
// exit ;
33535: GO 33890
// missile := [ 1 ] ;
33537: LD_ADDR_VAR 0 14
33541: PUSH
33542: LD_INT 1
33544: PUSH
33545: EMPTY
33546: LIST
33547: ST_TO_ADDR
// if Researched ( side , tech_space ) then
33548: LD_VAR 0 9
33552: PPUSH
33553: LD_VAR 0 12
33557: PPUSH
33558: CALL_OW 325
33562: IFFALSE 33591
// missile := Replace ( missile , missile + 1 , 2 ) ;
33564: LD_ADDR_VAR 0 14
33568: PUSH
33569: LD_VAR 0 14
33573: PPUSH
33574: LD_VAR 0 14
33578: PUSH
33579: LD_INT 1
33581: PLUS
33582: PPUSH
33583: LD_INT 2
33585: PPUSH
33586: CALL_OW 1
33590: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
33591: LD_VAR 0 9
33595: PPUSH
33596: LD_VAR 0 13
33600: PPUSH
33601: CALL_OW 325
33605: PUSH
33606: LD_VAR 0 10
33610: PPUSH
33611: CALL_OW 255
33615: PPUSH
33616: LD_VAR 0 13
33620: PPUSH
33621: CALL_OW 325
33625: NOT
33626: AND
33627: IFFALSE 33656
// missile := Replace ( missile , missile + 1 , 3 ) ;
33629: LD_ADDR_VAR 0 14
33633: PUSH
33634: LD_VAR 0 14
33638: PPUSH
33639: LD_VAR 0 14
33643: PUSH
33644: LD_INT 1
33646: PLUS
33647: PPUSH
33648: LD_INT 3
33650: PPUSH
33651: CALL_OW 1
33655: ST_TO_ADDR
// if missile < 2 then
33656: LD_VAR 0 14
33660: PUSH
33661: LD_INT 2
33663: LESS
33664: IFFALSE 33668
// exit ;
33666: GO 33890
// x := GetX ( enemy ) ;
33668: LD_ADDR_VAR 0 4
33672: PUSH
33673: LD_VAR 0 10
33677: PPUSH
33678: CALL_OW 250
33682: ST_TO_ADDR
// y := GetY ( enemy ) ;
33683: LD_ADDR_VAR 0 5
33687: PUSH
33688: LD_VAR 0 10
33692: PPUSH
33693: CALL_OW 251
33697: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
33698: LD_ADDR_VAR 0 6
33702: PUSH
33703: LD_VAR 0 4
33707: PUSH
33708: LD_INT 1
33710: NEG
33711: PPUSH
33712: LD_INT 1
33714: PPUSH
33715: CALL_OW 12
33719: PLUS
33720: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
33721: LD_ADDR_VAR 0 7
33725: PUSH
33726: LD_VAR 0 5
33730: PUSH
33731: LD_INT 1
33733: NEG
33734: PPUSH
33735: LD_INT 1
33737: PPUSH
33738: CALL_OW 12
33742: PLUS
33743: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
33744: LD_VAR 0 6
33748: PPUSH
33749: LD_VAR 0 7
33753: PPUSH
33754: CALL_OW 488
33758: NOT
33759: IFFALSE 33781
// begin _x := x ;
33761: LD_ADDR_VAR 0 6
33765: PUSH
33766: LD_VAR 0 4
33770: ST_TO_ADDR
// _y := y ;
33771: LD_ADDR_VAR 0 7
33775: PUSH
33776: LD_VAR 0 5
33780: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
33781: LD_ADDR_VAR 0 3
33785: PUSH
33786: LD_INT 1
33788: PPUSH
33789: LD_VAR 0 14
33793: PPUSH
33794: CALL_OW 12
33798: ST_TO_ADDR
// case i of 1 :
33799: LD_VAR 0 3
33803: PUSH
33804: LD_INT 1
33806: DOUBLE
33807: EQUAL
33808: IFTRUE 33812
33810: GO 33829
33812: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
33813: LD_VAR 0 1
33817: PPUSH
33818: LD_VAR 0 10
33822: PPUSH
33823: CALL_OW 115
33827: GO 33890
33829: LD_INT 2
33831: DOUBLE
33832: EQUAL
33833: IFTRUE 33837
33835: GO 33859
33837: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
33838: LD_VAR 0 1
33842: PPUSH
33843: LD_VAR 0 6
33847: PPUSH
33848: LD_VAR 0 7
33852: PPUSH
33853: CALL_OW 153
33857: GO 33890
33859: LD_INT 3
33861: DOUBLE
33862: EQUAL
33863: IFTRUE 33867
33865: GO 33889
33867: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
33868: LD_VAR 0 1
33872: PPUSH
33873: LD_VAR 0 6
33877: PPUSH
33878: LD_VAR 0 7
33882: PPUSH
33883: CALL_OW 154
33887: GO 33890
33889: POP
// end ;
33890: LD_VAR 0 2
33894: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
33895: LD_INT 0
33897: PPUSH
33898: PPUSH
33899: PPUSH
33900: PPUSH
33901: PPUSH
33902: PPUSH
// if not unit or not building then
33903: LD_VAR 0 1
33907: NOT
33908: PUSH
33909: LD_VAR 0 2
33913: NOT
33914: OR
33915: IFFALSE 33919
// exit ;
33917: GO 34077
// x := GetX ( building ) ;
33919: LD_ADDR_VAR 0 5
33923: PUSH
33924: LD_VAR 0 2
33928: PPUSH
33929: CALL_OW 250
33933: ST_TO_ADDR
// y := GetY ( building ) ;
33934: LD_ADDR_VAR 0 6
33938: PUSH
33939: LD_VAR 0 2
33943: PPUSH
33944: CALL_OW 251
33948: ST_TO_ADDR
// for i = 0 to 5 do
33949: LD_ADDR_VAR 0 4
33953: PUSH
33954: DOUBLE
33955: LD_INT 0
33957: DEC
33958: ST_TO_ADDR
33959: LD_INT 5
33961: PUSH
33962: FOR_TO
33963: IFFALSE 34075
// begin _x := ShiftX ( x , i , 3 ) ;
33965: LD_ADDR_VAR 0 7
33969: PUSH
33970: LD_VAR 0 5
33974: PPUSH
33975: LD_VAR 0 4
33979: PPUSH
33980: LD_INT 3
33982: PPUSH
33983: CALL_OW 272
33987: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
33988: LD_ADDR_VAR 0 8
33992: PUSH
33993: LD_VAR 0 6
33997: PPUSH
33998: LD_VAR 0 4
34002: PPUSH
34003: LD_INT 3
34005: PPUSH
34006: CALL_OW 273
34010: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
34011: LD_VAR 0 7
34015: PPUSH
34016: LD_VAR 0 8
34020: PPUSH
34021: CALL_OW 488
34025: NOT
34026: IFFALSE 34030
// continue ;
34028: GO 33962
// if HexInfo ( _x , _y ) = 0 then
34030: LD_VAR 0 7
34034: PPUSH
34035: LD_VAR 0 8
34039: PPUSH
34040: CALL_OW 428
34044: PUSH
34045: LD_INT 0
34047: EQUAL
34048: IFFALSE 34073
// begin ComMoveXY ( unit , _x , _y ) ;
34050: LD_VAR 0 1
34054: PPUSH
34055: LD_VAR 0 7
34059: PPUSH
34060: LD_VAR 0 8
34064: PPUSH
34065: CALL_OW 111
// exit ;
34069: POP
34070: POP
34071: GO 34077
// end ; end ;
34073: GO 33962
34075: POP
34076: POP
// end ;
34077: LD_VAR 0 3
34081: RET
// export function ScanBase ( side , base_area ) ; begin
34082: LD_INT 0
34084: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
34085: LD_ADDR_VAR 0 3
34089: PUSH
34090: LD_VAR 0 2
34094: PPUSH
34095: LD_INT 81
34097: PUSH
34098: LD_VAR 0 1
34102: PUSH
34103: EMPTY
34104: LIST
34105: LIST
34106: PPUSH
34107: CALL_OW 70
34111: ST_TO_ADDR
// end ;
34112: LD_VAR 0 3
34116: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
34117: LD_INT 0
34119: PPUSH
34120: PPUSH
34121: PPUSH
34122: PPUSH
// result := false ;
34123: LD_ADDR_VAR 0 2
34127: PUSH
34128: LD_INT 0
34130: ST_TO_ADDR
// side := GetSide ( unit ) ;
34131: LD_ADDR_VAR 0 3
34135: PUSH
34136: LD_VAR 0 1
34140: PPUSH
34141: CALL_OW 255
34145: ST_TO_ADDR
// nat := GetNation ( unit ) ;
34146: LD_ADDR_VAR 0 4
34150: PUSH
34151: LD_VAR 0 1
34155: PPUSH
34156: CALL_OW 248
34160: ST_TO_ADDR
// case nat of 1 :
34161: LD_VAR 0 4
34165: PUSH
34166: LD_INT 1
34168: DOUBLE
34169: EQUAL
34170: IFTRUE 34174
34172: GO 34185
34174: POP
// tech := tech_lassight ; 2 :
34175: LD_ADDR_VAR 0 5
34179: PUSH
34180: LD_INT 12
34182: ST_TO_ADDR
34183: GO 34224
34185: LD_INT 2
34187: DOUBLE
34188: EQUAL
34189: IFTRUE 34193
34191: GO 34204
34193: POP
// tech := tech_mortar ; 3 :
34194: LD_ADDR_VAR 0 5
34198: PUSH
34199: LD_INT 41
34201: ST_TO_ADDR
34202: GO 34224
34204: LD_INT 3
34206: DOUBLE
34207: EQUAL
34208: IFTRUE 34212
34210: GO 34223
34212: POP
// tech := tech_bazooka ; end ;
34213: LD_ADDR_VAR 0 5
34217: PUSH
34218: LD_INT 44
34220: ST_TO_ADDR
34221: GO 34224
34223: POP
// if Researched ( side , tech ) then
34224: LD_VAR 0 3
34228: PPUSH
34229: LD_VAR 0 5
34233: PPUSH
34234: CALL_OW 325
34238: IFFALSE 34265
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
34240: LD_ADDR_VAR 0 2
34244: PUSH
34245: LD_INT 5
34247: PUSH
34248: LD_INT 8
34250: PUSH
34251: LD_INT 9
34253: PUSH
34254: EMPTY
34255: LIST
34256: LIST
34257: LIST
34258: PUSH
34259: LD_VAR 0 4
34263: ARRAY
34264: ST_TO_ADDR
// end ;
34265: LD_VAR 0 2
34269: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
34270: LD_INT 0
34272: PPUSH
34273: PPUSH
34274: PPUSH
// if not mines then
34275: LD_VAR 0 2
34279: NOT
34280: IFFALSE 34284
// exit ;
34282: GO 34428
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34284: LD_ADDR_VAR 0 5
34288: PUSH
34289: LD_INT 81
34291: PUSH
34292: LD_VAR 0 1
34296: PUSH
34297: EMPTY
34298: LIST
34299: LIST
34300: PUSH
34301: LD_INT 3
34303: PUSH
34304: LD_INT 21
34306: PUSH
34307: LD_INT 3
34309: PUSH
34310: EMPTY
34311: LIST
34312: LIST
34313: PUSH
34314: EMPTY
34315: LIST
34316: LIST
34317: PUSH
34318: EMPTY
34319: LIST
34320: LIST
34321: PPUSH
34322: CALL_OW 69
34326: ST_TO_ADDR
// for i in mines do
34327: LD_ADDR_VAR 0 4
34331: PUSH
34332: LD_VAR 0 2
34336: PUSH
34337: FOR_IN
34338: IFFALSE 34426
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
34340: LD_VAR 0 4
34344: PUSH
34345: LD_INT 1
34347: ARRAY
34348: PPUSH
34349: LD_VAR 0 4
34353: PUSH
34354: LD_INT 2
34356: ARRAY
34357: PPUSH
34358: CALL_OW 458
34362: NOT
34363: IFFALSE 34367
// continue ;
34365: GO 34337
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
34367: LD_VAR 0 4
34371: PUSH
34372: LD_INT 1
34374: ARRAY
34375: PPUSH
34376: LD_VAR 0 4
34380: PUSH
34381: LD_INT 2
34383: ARRAY
34384: PPUSH
34385: CALL_OW 428
34389: PUSH
34390: LD_VAR 0 5
34394: IN
34395: IFFALSE 34424
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
34397: LD_VAR 0 4
34401: PUSH
34402: LD_INT 1
34404: ARRAY
34405: PPUSH
34406: LD_VAR 0 4
34410: PUSH
34411: LD_INT 2
34413: ARRAY
34414: PPUSH
34415: LD_VAR 0 1
34419: PPUSH
34420: CALL_OW 456
// end ;
34424: GO 34337
34426: POP
34427: POP
// end ;
34428: LD_VAR 0 3
34432: RET
// export function Count ( array ) ; var i ; begin
34433: LD_INT 0
34435: PPUSH
34436: PPUSH
// result := 0 ;
34437: LD_ADDR_VAR 0 2
34441: PUSH
34442: LD_INT 0
34444: ST_TO_ADDR
// for i in array do
34445: LD_ADDR_VAR 0 3
34449: PUSH
34450: LD_VAR 0 1
34454: PUSH
34455: FOR_IN
34456: IFFALSE 34480
// if i then
34458: LD_VAR 0 3
34462: IFFALSE 34478
// result := result + 1 ;
34464: LD_ADDR_VAR 0 2
34468: PUSH
34469: LD_VAR 0 2
34473: PUSH
34474: LD_INT 1
34476: PLUS
34477: ST_TO_ADDR
34478: GO 34455
34480: POP
34481: POP
// end ;
34482: LD_VAR 0 2
34486: RET
// export function IsEmpty ( building ) ; begin
34487: LD_INT 0
34489: PPUSH
// if not building then
34490: LD_VAR 0 1
34494: NOT
34495: IFFALSE 34499
// exit ;
34497: GO 34542
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
34499: LD_ADDR_VAR 0 2
34503: PUSH
34504: LD_VAR 0 1
34508: PUSH
34509: LD_INT 22
34511: PUSH
34512: LD_VAR 0 1
34516: PPUSH
34517: CALL_OW 255
34521: PUSH
34522: EMPTY
34523: LIST
34524: LIST
34525: PUSH
34526: LD_INT 58
34528: PUSH
34529: EMPTY
34530: LIST
34531: PUSH
34532: EMPTY
34533: LIST
34534: LIST
34535: PPUSH
34536: CALL_OW 69
34540: IN
34541: ST_TO_ADDR
// end ;
34542: LD_VAR 0 2
34546: RET
// export function IsNotFull ( building ) ; var places ; begin
34547: LD_INT 0
34549: PPUSH
34550: PPUSH
// if not building then
34551: LD_VAR 0 1
34555: NOT
34556: IFFALSE 34560
// exit ;
34558: GO 34731
// result := false ;
34560: LD_ADDR_VAR 0 2
34564: PUSH
34565: LD_INT 0
34567: ST_TO_ADDR
// places := 0 ;
34568: LD_ADDR_VAR 0 3
34572: PUSH
34573: LD_INT 0
34575: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
34576: LD_VAR 0 1
34580: PPUSH
34581: CALL_OW 266
34585: PUSH
34586: LD_INT 0
34588: DOUBLE
34589: EQUAL
34590: IFTRUE 34648
34592: LD_INT 1
34594: DOUBLE
34595: EQUAL
34596: IFTRUE 34648
34598: LD_INT 6
34600: DOUBLE
34601: EQUAL
34602: IFTRUE 34648
34604: LD_INT 7
34606: DOUBLE
34607: EQUAL
34608: IFTRUE 34648
34610: LD_INT 8
34612: DOUBLE
34613: EQUAL
34614: IFTRUE 34648
34616: LD_INT 4
34618: DOUBLE
34619: EQUAL
34620: IFTRUE 34648
34622: LD_INT 5
34624: DOUBLE
34625: EQUAL
34626: IFTRUE 34648
34628: LD_INT 2
34630: DOUBLE
34631: EQUAL
34632: IFTRUE 34648
34634: LD_INT 3
34636: DOUBLE
34637: EQUAL
34638: IFTRUE 34648
34640: LD_INT 35
34642: DOUBLE
34643: EQUAL
34644: IFTRUE 34648
34646: GO 34659
34648: POP
// places := 6 ; b_bunker , b_breastwork :
34649: LD_ADDR_VAR 0 3
34653: PUSH
34654: LD_INT 6
34656: ST_TO_ADDR
34657: GO 34704
34659: LD_INT 32
34661: DOUBLE
34662: EQUAL
34663: IFTRUE 34673
34665: LD_INT 31
34667: DOUBLE
34668: EQUAL
34669: IFTRUE 34673
34671: GO 34684
34673: POP
// places := 1 ; b_control_tower :
34674: LD_ADDR_VAR 0 3
34678: PUSH
34679: LD_INT 1
34681: ST_TO_ADDR
34682: GO 34704
34684: LD_INT 36
34686: DOUBLE
34687: EQUAL
34688: IFTRUE 34692
34690: GO 34703
34692: POP
// places := 3 ; end ;
34693: LD_ADDR_VAR 0 3
34697: PUSH
34698: LD_INT 3
34700: ST_TO_ADDR
34701: GO 34704
34703: POP
// if places then
34704: LD_VAR 0 3
34708: IFFALSE 34731
// result := UnitsInside ( building ) < places ;
34710: LD_ADDR_VAR 0 2
34714: PUSH
34715: LD_VAR 0 1
34719: PPUSH
34720: CALL_OW 313
34724: PUSH
34725: LD_VAR 0 3
34729: LESS
34730: ST_TO_ADDR
// end ;
34731: LD_VAR 0 2
34735: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
34736: LD_INT 0
34738: PPUSH
34739: PPUSH
34740: PPUSH
34741: PPUSH
// tmp := [ ] ;
34742: LD_ADDR_VAR 0 3
34746: PUSH
34747: EMPTY
34748: ST_TO_ADDR
// list := [ ] ;
34749: LD_ADDR_VAR 0 5
34753: PUSH
34754: EMPTY
34755: ST_TO_ADDR
// for i = 16 to 25 do
34756: LD_ADDR_VAR 0 4
34760: PUSH
34761: DOUBLE
34762: LD_INT 16
34764: DEC
34765: ST_TO_ADDR
34766: LD_INT 25
34768: PUSH
34769: FOR_TO
34770: IFFALSE 34843
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
34772: LD_ADDR_VAR 0 3
34776: PUSH
34777: LD_VAR 0 3
34781: PUSH
34782: LD_INT 22
34784: PUSH
34785: LD_VAR 0 1
34789: PPUSH
34790: CALL_OW 255
34794: PUSH
34795: EMPTY
34796: LIST
34797: LIST
34798: PUSH
34799: LD_INT 91
34801: PUSH
34802: LD_VAR 0 1
34806: PUSH
34807: LD_INT 6
34809: PUSH
34810: EMPTY
34811: LIST
34812: LIST
34813: LIST
34814: PUSH
34815: LD_INT 30
34817: PUSH
34818: LD_VAR 0 4
34822: PUSH
34823: EMPTY
34824: LIST
34825: LIST
34826: PUSH
34827: EMPTY
34828: LIST
34829: LIST
34830: LIST
34831: PUSH
34832: EMPTY
34833: LIST
34834: PPUSH
34835: CALL_OW 69
34839: ADD
34840: ST_TO_ADDR
34841: GO 34769
34843: POP
34844: POP
// for i = 1 to tmp do
34845: LD_ADDR_VAR 0 4
34849: PUSH
34850: DOUBLE
34851: LD_INT 1
34853: DEC
34854: ST_TO_ADDR
34855: LD_VAR 0 3
34859: PUSH
34860: FOR_TO
34861: IFFALSE 34949
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
34863: LD_ADDR_VAR 0 5
34867: PUSH
34868: LD_VAR 0 5
34872: PUSH
34873: LD_VAR 0 3
34877: PUSH
34878: LD_VAR 0 4
34882: ARRAY
34883: PPUSH
34884: CALL_OW 266
34888: PUSH
34889: LD_VAR 0 3
34893: PUSH
34894: LD_VAR 0 4
34898: ARRAY
34899: PPUSH
34900: CALL_OW 250
34904: PUSH
34905: LD_VAR 0 3
34909: PUSH
34910: LD_VAR 0 4
34914: ARRAY
34915: PPUSH
34916: CALL_OW 251
34920: PUSH
34921: LD_VAR 0 3
34925: PUSH
34926: LD_VAR 0 4
34930: ARRAY
34931: PPUSH
34932: CALL_OW 254
34936: PUSH
34937: EMPTY
34938: LIST
34939: LIST
34940: LIST
34941: LIST
34942: PUSH
34943: EMPTY
34944: LIST
34945: ADD
34946: ST_TO_ADDR
34947: GO 34860
34949: POP
34950: POP
// result := list ;
34951: LD_ADDR_VAR 0 2
34955: PUSH
34956: LD_VAR 0 5
34960: ST_TO_ADDR
// end ;
34961: LD_VAR 0 2
34965: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
34966: LD_INT 0
34968: PPUSH
34969: PPUSH
34970: PPUSH
34971: PPUSH
34972: PPUSH
34973: PPUSH
34974: PPUSH
// if not factory then
34975: LD_VAR 0 1
34979: NOT
34980: IFFALSE 34984
// exit ;
34982: GO 35577
// if control = control_apeman then
34984: LD_VAR 0 4
34988: PUSH
34989: LD_INT 5
34991: EQUAL
34992: IFFALSE 35101
// begin tmp := UnitsInside ( factory ) ;
34994: LD_ADDR_VAR 0 8
34998: PUSH
34999: LD_VAR 0 1
35003: PPUSH
35004: CALL_OW 313
35008: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
35009: LD_VAR 0 8
35013: PPUSH
35014: LD_INT 25
35016: PUSH
35017: LD_INT 12
35019: PUSH
35020: EMPTY
35021: LIST
35022: LIST
35023: PPUSH
35024: CALL_OW 72
35028: NOT
35029: IFFALSE 35039
// control := control_manual ;
35031: LD_ADDR_VAR 0 4
35035: PUSH
35036: LD_INT 1
35038: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
35039: LD_ADDR_VAR 0 8
35043: PUSH
35044: LD_VAR 0 1
35048: PPUSH
35049: CALL 34736 0 1
35053: ST_TO_ADDR
// if tmp then
35054: LD_VAR 0 8
35058: IFFALSE 35101
// begin for i in tmp do
35060: LD_ADDR_VAR 0 7
35064: PUSH
35065: LD_VAR 0 8
35069: PUSH
35070: FOR_IN
35071: IFFALSE 35099
// if i [ 1 ] = b_ext_radio then
35073: LD_VAR 0 7
35077: PUSH
35078: LD_INT 1
35080: ARRAY
35081: PUSH
35082: LD_INT 22
35084: EQUAL
35085: IFFALSE 35097
// begin control := control_remote ;
35087: LD_ADDR_VAR 0 4
35091: PUSH
35092: LD_INT 2
35094: ST_TO_ADDR
// break ;
35095: GO 35099
// end ;
35097: GO 35070
35099: POP
35100: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
35101: LD_VAR 0 1
35105: PPUSH
35106: LD_VAR 0 2
35110: PPUSH
35111: LD_VAR 0 3
35115: PPUSH
35116: LD_VAR 0 4
35120: PPUSH
35121: LD_VAR 0 5
35125: PPUSH
35126: CALL_OW 448
35130: IFFALSE 35165
// begin result := [ chassis , engine , control , weapon ] ;
35132: LD_ADDR_VAR 0 6
35136: PUSH
35137: LD_VAR 0 2
35141: PUSH
35142: LD_VAR 0 3
35146: PUSH
35147: LD_VAR 0 4
35151: PUSH
35152: LD_VAR 0 5
35156: PUSH
35157: EMPTY
35158: LIST
35159: LIST
35160: LIST
35161: LIST
35162: ST_TO_ADDR
// exit ;
35163: GO 35577
// end ; _chassis := AvailableChassisList ( factory ) ;
35165: LD_ADDR_VAR 0 9
35169: PUSH
35170: LD_VAR 0 1
35174: PPUSH
35175: CALL_OW 475
35179: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
35180: LD_ADDR_VAR 0 11
35184: PUSH
35185: LD_VAR 0 1
35189: PPUSH
35190: CALL_OW 476
35194: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
35195: LD_ADDR_VAR 0 12
35199: PUSH
35200: LD_VAR 0 1
35204: PPUSH
35205: CALL_OW 477
35209: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
35210: LD_ADDR_VAR 0 10
35214: PUSH
35215: LD_VAR 0 1
35219: PPUSH
35220: CALL_OW 478
35224: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
35225: LD_VAR 0 9
35229: NOT
35230: PUSH
35231: LD_VAR 0 11
35235: NOT
35236: OR
35237: PUSH
35238: LD_VAR 0 12
35242: NOT
35243: OR
35244: PUSH
35245: LD_VAR 0 10
35249: NOT
35250: OR
35251: IFFALSE 35286
// begin result := [ chassis , engine , control , weapon ] ;
35253: LD_ADDR_VAR 0 6
35257: PUSH
35258: LD_VAR 0 2
35262: PUSH
35263: LD_VAR 0 3
35267: PUSH
35268: LD_VAR 0 4
35272: PUSH
35273: LD_VAR 0 5
35277: PUSH
35278: EMPTY
35279: LIST
35280: LIST
35281: LIST
35282: LIST
35283: ST_TO_ADDR
// exit ;
35284: GO 35577
// end ; if not chassis in _chassis then
35286: LD_VAR 0 2
35290: PUSH
35291: LD_VAR 0 9
35295: IN
35296: NOT
35297: IFFALSE 35323
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
35299: LD_ADDR_VAR 0 2
35303: PUSH
35304: LD_VAR 0 9
35308: PUSH
35309: LD_INT 1
35311: PPUSH
35312: LD_VAR 0 9
35316: PPUSH
35317: CALL_OW 12
35321: ARRAY
35322: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
35323: LD_VAR 0 2
35327: PPUSH
35328: LD_VAR 0 3
35332: PPUSH
35333: CALL 35582 0 2
35337: NOT
35338: IFFALSE 35397
// repeat engine := _engine [ 1 ] ;
35340: LD_ADDR_VAR 0 3
35344: PUSH
35345: LD_VAR 0 11
35349: PUSH
35350: LD_INT 1
35352: ARRAY
35353: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
35354: LD_ADDR_VAR 0 11
35358: PUSH
35359: LD_VAR 0 11
35363: PPUSH
35364: LD_INT 1
35366: PPUSH
35367: CALL_OW 3
35371: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
35372: LD_VAR 0 2
35376: PPUSH
35377: LD_VAR 0 3
35381: PPUSH
35382: CALL 35582 0 2
35386: PUSH
35387: LD_VAR 0 11
35391: PUSH
35392: EMPTY
35393: EQUAL
35394: OR
35395: IFFALSE 35340
// if not control in _control then
35397: LD_VAR 0 4
35401: PUSH
35402: LD_VAR 0 12
35406: IN
35407: NOT
35408: IFFALSE 35434
// control := _control [ rand ( 1 , _control ) ] ;
35410: LD_ADDR_VAR 0 4
35414: PUSH
35415: LD_VAR 0 12
35419: PUSH
35420: LD_INT 1
35422: PPUSH
35423: LD_VAR 0 12
35427: PPUSH
35428: CALL_OW 12
35432: ARRAY
35433: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
35434: LD_VAR 0 2
35438: PPUSH
35439: LD_VAR 0 5
35443: PPUSH
35444: CALL 35802 0 2
35448: NOT
35449: IFFALSE 35508
// repeat weapon := _weapon [ 1 ] ;
35451: LD_ADDR_VAR 0 5
35455: PUSH
35456: LD_VAR 0 10
35460: PUSH
35461: LD_INT 1
35463: ARRAY
35464: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
35465: LD_ADDR_VAR 0 10
35469: PUSH
35470: LD_VAR 0 10
35474: PPUSH
35475: LD_INT 1
35477: PPUSH
35478: CALL_OW 3
35482: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
35483: LD_VAR 0 2
35487: PPUSH
35488: LD_VAR 0 5
35492: PPUSH
35493: CALL 35802 0 2
35497: PUSH
35498: LD_VAR 0 10
35502: PUSH
35503: EMPTY
35504: EQUAL
35505: OR
35506: IFFALSE 35451
// result := [ ] ;
35508: LD_ADDR_VAR 0 6
35512: PUSH
35513: EMPTY
35514: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
35515: LD_VAR 0 1
35519: PPUSH
35520: LD_VAR 0 2
35524: PPUSH
35525: LD_VAR 0 3
35529: PPUSH
35530: LD_VAR 0 4
35534: PPUSH
35535: LD_VAR 0 5
35539: PPUSH
35540: CALL_OW 448
35544: IFFALSE 35577
// result := [ chassis , engine , control , weapon ] ;
35546: LD_ADDR_VAR 0 6
35550: PUSH
35551: LD_VAR 0 2
35555: PUSH
35556: LD_VAR 0 3
35560: PUSH
35561: LD_VAR 0 4
35565: PUSH
35566: LD_VAR 0 5
35570: PUSH
35571: EMPTY
35572: LIST
35573: LIST
35574: LIST
35575: LIST
35576: ST_TO_ADDR
// end ;
35577: LD_VAR 0 6
35581: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
35582: LD_INT 0
35584: PPUSH
// if not chassis or not engine then
35585: LD_VAR 0 1
35589: NOT
35590: PUSH
35591: LD_VAR 0 2
35595: NOT
35596: OR
35597: IFFALSE 35601
// exit ;
35599: GO 35797
// case engine of engine_solar :
35601: LD_VAR 0 2
35605: PUSH
35606: LD_INT 2
35608: DOUBLE
35609: EQUAL
35610: IFTRUE 35614
35612: GO 35652
35614: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
35615: LD_ADDR_VAR 0 3
35619: PUSH
35620: LD_INT 11
35622: PUSH
35623: LD_INT 12
35625: PUSH
35626: LD_INT 13
35628: PUSH
35629: LD_INT 14
35631: PUSH
35632: LD_INT 1
35634: PUSH
35635: LD_INT 2
35637: PUSH
35638: LD_INT 3
35640: PUSH
35641: EMPTY
35642: LIST
35643: LIST
35644: LIST
35645: LIST
35646: LIST
35647: LIST
35648: LIST
35649: ST_TO_ADDR
35650: GO 35781
35652: LD_INT 1
35654: DOUBLE
35655: EQUAL
35656: IFTRUE 35660
35658: GO 35722
35660: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
35661: LD_ADDR_VAR 0 3
35665: PUSH
35666: LD_INT 11
35668: PUSH
35669: LD_INT 12
35671: PUSH
35672: LD_INT 13
35674: PUSH
35675: LD_INT 14
35677: PUSH
35678: LD_INT 1
35680: PUSH
35681: LD_INT 2
35683: PUSH
35684: LD_INT 3
35686: PUSH
35687: LD_INT 4
35689: PUSH
35690: LD_INT 5
35692: PUSH
35693: LD_INT 21
35695: PUSH
35696: LD_INT 23
35698: PUSH
35699: LD_INT 22
35701: PUSH
35702: LD_INT 24
35704: PUSH
35705: EMPTY
35706: LIST
35707: LIST
35708: LIST
35709: LIST
35710: LIST
35711: LIST
35712: LIST
35713: LIST
35714: LIST
35715: LIST
35716: LIST
35717: LIST
35718: LIST
35719: ST_TO_ADDR
35720: GO 35781
35722: LD_INT 3
35724: DOUBLE
35725: EQUAL
35726: IFTRUE 35730
35728: GO 35780
35730: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
35731: LD_ADDR_VAR 0 3
35735: PUSH
35736: LD_INT 13
35738: PUSH
35739: LD_INT 14
35741: PUSH
35742: LD_INT 2
35744: PUSH
35745: LD_INT 3
35747: PUSH
35748: LD_INT 4
35750: PUSH
35751: LD_INT 5
35753: PUSH
35754: LD_INT 21
35756: PUSH
35757: LD_INT 22
35759: PUSH
35760: LD_INT 23
35762: PUSH
35763: LD_INT 24
35765: PUSH
35766: EMPTY
35767: LIST
35768: LIST
35769: LIST
35770: LIST
35771: LIST
35772: LIST
35773: LIST
35774: LIST
35775: LIST
35776: LIST
35777: ST_TO_ADDR
35778: GO 35781
35780: POP
// result := ( chassis in result ) ;
35781: LD_ADDR_VAR 0 3
35785: PUSH
35786: LD_VAR 0 1
35790: PUSH
35791: LD_VAR 0 3
35795: IN
35796: ST_TO_ADDR
// end ;
35797: LD_VAR 0 3
35801: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
35802: LD_INT 0
35804: PPUSH
// if not chassis or not weapon then
35805: LD_VAR 0 1
35809: NOT
35810: PUSH
35811: LD_VAR 0 2
35815: NOT
35816: OR
35817: IFFALSE 35821
// exit ;
35819: GO 36881
// case weapon of us_machine_gun :
35821: LD_VAR 0 2
35825: PUSH
35826: LD_INT 2
35828: DOUBLE
35829: EQUAL
35830: IFTRUE 35834
35832: GO 35864
35834: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
35835: LD_ADDR_VAR 0 3
35839: PUSH
35840: LD_INT 1
35842: PUSH
35843: LD_INT 2
35845: PUSH
35846: LD_INT 3
35848: PUSH
35849: LD_INT 4
35851: PUSH
35852: LD_INT 5
35854: PUSH
35855: EMPTY
35856: LIST
35857: LIST
35858: LIST
35859: LIST
35860: LIST
35861: ST_TO_ADDR
35862: GO 36865
35864: LD_INT 3
35866: DOUBLE
35867: EQUAL
35868: IFTRUE 35872
35870: GO 35902
35872: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
35873: LD_ADDR_VAR 0 3
35877: PUSH
35878: LD_INT 1
35880: PUSH
35881: LD_INT 2
35883: PUSH
35884: LD_INT 3
35886: PUSH
35887: LD_INT 4
35889: PUSH
35890: LD_INT 5
35892: PUSH
35893: EMPTY
35894: LIST
35895: LIST
35896: LIST
35897: LIST
35898: LIST
35899: ST_TO_ADDR
35900: GO 36865
35902: LD_INT 11
35904: DOUBLE
35905: EQUAL
35906: IFTRUE 35910
35908: GO 35940
35910: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
35911: LD_ADDR_VAR 0 3
35915: PUSH
35916: LD_INT 1
35918: PUSH
35919: LD_INT 2
35921: PUSH
35922: LD_INT 3
35924: PUSH
35925: LD_INT 4
35927: PUSH
35928: LD_INT 5
35930: PUSH
35931: EMPTY
35932: LIST
35933: LIST
35934: LIST
35935: LIST
35936: LIST
35937: ST_TO_ADDR
35938: GO 36865
35940: LD_INT 4
35942: DOUBLE
35943: EQUAL
35944: IFTRUE 35948
35946: GO 35974
35948: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
35949: LD_ADDR_VAR 0 3
35953: PUSH
35954: LD_INT 2
35956: PUSH
35957: LD_INT 3
35959: PUSH
35960: LD_INT 4
35962: PUSH
35963: LD_INT 5
35965: PUSH
35966: EMPTY
35967: LIST
35968: LIST
35969: LIST
35970: LIST
35971: ST_TO_ADDR
35972: GO 36865
35974: LD_INT 5
35976: DOUBLE
35977: EQUAL
35978: IFTRUE 35982
35980: GO 36008
35982: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
35983: LD_ADDR_VAR 0 3
35987: PUSH
35988: LD_INT 2
35990: PUSH
35991: LD_INT 3
35993: PUSH
35994: LD_INT 4
35996: PUSH
35997: LD_INT 5
35999: PUSH
36000: EMPTY
36001: LIST
36002: LIST
36003: LIST
36004: LIST
36005: ST_TO_ADDR
36006: GO 36865
36008: LD_INT 9
36010: DOUBLE
36011: EQUAL
36012: IFTRUE 36016
36014: GO 36042
36016: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
36017: LD_ADDR_VAR 0 3
36021: PUSH
36022: LD_INT 2
36024: PUSH
36025: LD_INT 3
36027: PUSH
36028: LD_INT 4
36030: PUSH
36031: LD_INT 5
36033: PUSH
36034: EMPTY
36035: LIST
36036: LIST
36037: LIST
36038: LIST
36039: ST_TO_ADDR
36040: GO 36865
36042: LD_INT 7
36044: DOUBLE
36045: EQUAL
36046: IFTRUE 36050
36048: GO 36076
36050: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
36051: LD_ADDR_VAR 0 3
36055: PUSH
36056: LD_INT 2
36058: PUSH
36059: LD_INT 3
36061: PUSH
36062: LD_INT 4
36064: PUSH
36065: LD_INT 5
36067: PUSH
36068: EMPTY
36069: LIST
36070: LIST
36071: LIST
36072: LIST
36073: ST_TO_ADDR
36074: GO 36865
36076: LD_INT 12
36078: DOUBLE
36079: EQUAL
36080: IFTRUE 36084
36082: GO 36110
36084: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
36085: LD_ADDR_VAR 0 3
36089: PUSH
36090: LD_INT 2
36092: PUSH
36093: LD_INT 3
36095: PUSH
36096: LD_INT 4
36098: PUSH
36099: LD_INT 5
36101: PUSH
36102: EMPTY
36103: LIST
36104: LIST
36105: LIST
36106: LIST
36107: ST_TO_ADDR
36108: GO 36865
36110: LD_INT 13
36112: DOUBLE
36113: EQUAL
36114: IFTRUE 36118
36116: GO 36144
36118: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
36119: LD_ADDR_VAR 0 3
36123: PUSH
36124: LD_INT 2
36126: PUSH
36127: LD_INT 3
36129: PUSH
36130: LD_INT 4
36132: PUSH
36133: LD_INT 5
36135: PUSH
36136: EMPTY
36137: LIST
36138: LIST
36139: LIST
36140: LIST
36141: ST_TO_ADDR
36142: GO 36865
36144: LD_INT 14
36146: DOUBLE
36147: EQUAL
36148: IFTRUE 36152
36150: GO 36170
36152: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
36153: LD_ADDR_VAR 0 3
36157: PUSH
36158: LD_INT 4
36160: PUSH
36161: LD_INT 5
36163: PUSH
36164: EMPTY
36165: LIST
36166: LIST
36167: ST_TO_ADDR
36168: GO 36865
36170: LD_INT 6
36172: DOUBLE
36173: EQUAL
36174: IFTRUE 36178
36176: GO 36196
36178: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
36179: LD_ADDR_VAR 0 3
36183: PUSH
36184: LD_INT 4
36186: PUSH
36187: LD_INT 5
36189: PUSH
36190: EMPTY
36191: LIST
36192: LIST
36193: ST_TO_ADDR
36194: GO 36865
36196: LD_INT 10
36198: DOUBLE
36199: EQUAL
36200: IFTRUE 36204
36202: GO 36222
36204: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
36205: LD_ADDR_VAR 0 3
36209: PUSH
36210: LD_INT 4
36212: PUSH
36213: LD_INT 5
36215: PUSH
36216: EMPTY
36217: LIST
36218: LIST
36219: ST_TO_ADDR
36220: GO 36865
36222: LD_INT 22
36224: DOUBLE
36225: EQUAL
36226: IFTRUE 36230
36228: GO 36256
36230: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
36231: LD_ADDR_VAR 0 3
36235: PUSH
36236: LD_INT 11
36238: PUSH
36239: LD_INT 12
36241: PUSH
36242: LD_INT 13
36244: PUSH
36245: LD_INT 14
36247: PUSH
36248: EMPTY
36249: LIST
36250: LIST
36251: LIST
36252: LIST
36253: ST_TO_ADDR
36254: GO 36865
36256: LD_INT 23
36258: DOUBLE
36259: EQUAL
36260: IFTRUE 36264
36262: GO 36290
36264: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
36265: LD_ADDR_VAR 0 3
36269: PUSH
36270: LD_INT 11
36272: PUSH
36273: LD_INT 12
36275: PUSH
36276: LD_INT 13
36278: PUSH
36279: LD_INT 14
36281: PUSH
36282: EMPTY
36283: LIST
36284: LIST
36285: LIST
36286: LIST
36287: ST_TO_ADDR
36288: GO 36865
36290: LD_INT 24
36292: DOUBLE
36293: EQUAL
36294: IFTRUE 36298
36296: GO 36324
36298: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
36299: LD_ADDR_VAR 0 3
36303: PUSH
36304: LD_INT 11
36306: PUSH
36307: LD_INT 12
36309: PUSH
36310: LD_INT 13
36312: PUSH
36313: LD_INT 14
36315: PUSH
36316: EMPTY
36317: LIST
36318: LIST
36319: LIST
36320: LIST
36321: ST_TO_ADDR
36322: GO 36865
36324: LD_INT 30
36326: DOUBLE
36327: EQUAL
36328: IFTRUE 36332
36330: GO 36358
36332: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
36333: LD_ADDR_VAR 0 3
36337: PUSH
36338: LD_INT 11
36340: PUSH
36341: LD_INT 12
36343: PUSH
36344: LD_INT 13
36346: PUSH
36347: LD_INT 14
36349: PUSH
36350: EMPTY
36351: LIST
36352: LIST
36353: LIST
36354: LIST
36355: ST_TO_ADDR
36356: GO 36865
36358: LD_INT 25
36360: DOUBLE
36361: EQUAL
36362: IFTRUE 36366
36364: GO 36384
36366: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
36367: LD_ADDR_VAR 0 3
36371: PUSH
36372: LD_INT 13
36374: PUSH
36375: LD_INT 14
36377: PUSH
36378: EMPTY
36379: LIST
36380: LIST
36381: ST_TO_ADDR
36382: GO 36865
36384: LD_INT 27
36386: DOUBLE
36387: EQUAL
36388: IFTRUE 36392
36390: GO 36410
36392: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
36393: LD_ADDR_VAR 0 3
36397: PUSH
36398: LD_INT 13
36400: PUSH
36401: LD_INT 14
36403: PUSH
36404: EMPTY
36405: LIST
36406: LIST
36407: ST_TO_ADDR
36408: GO 36865
36410: LD_INT 92
36412: DOUBLE
36413: EQUAL
36414: IFTRUE 36418
36416: GO 36444
36418: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
36419: LD_ADDR_VAR 0 3
36423: PUSH
36424: LD_INT 11
36426: PUSH
36427: LD_INT 12
36429: PUSH
36430: LD_INT 13
36432: PUSH
36433: LD_INT 14
36435: PUSH
36436: EMPTY
36437: LIST
36438: LIST
36439: LIST
36440: LIST
36441: ST_TO_ADDR
36442: GO 36865
36444: LD_INT 28
36446: DOUBLE
36447: EQUAL
36448: IFTRUE 36452
36450: GO 36470
36452: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
36453: LD_ADDR_VAR 0 3
36457: PUSH
36458: LD_INT 13
36460: PUSH
36461: LD_INT 14
36463: PUSH
36464: EMPTY
36465: LIST
36466: LIST
36467: ST_TO_ADDR
36468: GO 36865
36470: LD_INT 29
36472: DOUBLE
36473: EQUAL
36474: IFTRUE 36478
36476: GO 36496
36478: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
36479: LD_ADDR_VAR 0 3
36483: PUSH
36484: LD_INT 13
36486: PUSH
36487: LD_INT 14
36489: PUSH
36490: EMPTY
36491: LIST
36492: LIST
36493: ST_TO_ADDR
36494: GO 36865
36496: LD_INT 31
36498: DOUBLE
36499: EQUAL
36500: IFTRUE 36504
36502: GO 36522
36504: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
36505: LD_ADDR_VAR 0 3
36509: PUSH
36510: LD_INT 13
36512: PUSH
36513: LD_INT 14
36515: PUSH
36516: EMPTY
36517: LIST
36518: LIST
36519: ST_TO_ADDR
36520: GO 36865
36522: LD_INT 26
36524: DOUBLE
36525: EQUAL
36526: IFTRUE 36530
36528: GO 36548
36530: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
36531: LD_ADDR_VAR 0 3
36535: PUSH
36536: LD_INT 13
36538: PUSH
36539: LD_INT 14
36541: PUSH
36542: EMPTY
36543: LIST
36544: LIST
36545: ST_TO_ADDR
36546: GO 36865
36548: LD_INT 42
36550: DOUBLE
36551: EQUAL
36552: IFTRUE 36556
36554: GO 36582
36556: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
36557: LD_ADDR_VAR 0 3
36561: PUSH
36562: LD_INT 21
36564: PUSH
36565: LD_INT 22
36567: PUSH
36568: LD_INT 23
36570: PUSH
36571: LD_INT 24
36573: PUSH
36574: EMPTY
36575: LIST
36576: LIST
36577: LIST
36578: LIST
36579: ST_TO_ADDR
36580: GO 36865
36582: LD_INT 43
36584: DOUBLE
36585: EQUAL
36586: IFTRUE 36590
36588: GO 36616
36590: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
36591: LD_ADDR_VAR 0 3
36595: PUSH
36596: LD_INT 21
36598: PUSH
36599: LD_INT 22
36601: PUSH
36602: LD_INT 23
36604: PUSH
36605: LD_INT 24
36607: PUSH
36608: EMPTY
36609: LIST
36610: LIST
36611: LIST
36612: LIST
36613: ST_TO_ADDR
36614: GO 36865
36616: LD_INT 44
36618: DOUBLE
36619: EQUAL
36620: IFTRUE 36624
36622: GO 36650
36624: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
36625: LD_ADDR_VAR 0 3
36629: PUSH
36630: LD_INT 21
36632: PUSH
36633: LD_INT 22
36635: PUSH
36636: LD_INT 23
36638: PUSH
36639: LD_INT 24
36641: PUSH
36642: EMPTY
36643: LIST
36644: LIST
36645: LIST
36646: LIST
36647: ST_TO_ADDR
36648: GO 36865
36650: LD_INT 45
36652: DOUBLE
36653: EQUAL
36654: IFTRUE 36658
36656: GO 36684
36658: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
36659: LD_ADDR_VAR 0 3
36663: PUSH
36664: LD_INT 21
36666: PUSH
36667: LD_INT 22
36669: PUSH
36670: LD_INT 23
36672: PUSH
36673: LD_INT 24
36675: PUSH
36676: EMPTY
36677: LIST
36678: LIST
36679: LIST
36680: LIST
36681: ST_TO_ADDR
36682: GO 36865
36684: LD_INT 49
36686: DOUBLE
36687: EQUAL
36688: IFTRUE 36692
36690: GO 36718
36692: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
36693: LD_ADDR_VAR 0 3
36697: PUSH
36698: LD_INT 21
36700: PUSH
36701: LD_INT 22
36703: PUSH
36704: LD_INT 23
36706: PUSH
36707: LD_INT 24
36709: PUSH
36710: EMPTY
36711: LIST
36712: LIST
36713: LIST
36714: LIST
36715: ST_TO_ADDR
36716: GO 36865
36718: LD_INT 51
36720: DOUBLE
36721: EQUAL
36722: IFTRUE 36726
36724: GO 36752
36726: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
36727: LD_ADDR_VAR 0 3
36731: PUSH
36732: LD_INT 21
36734: PUSH
36735: LD_INT 22
36737: PUSH
36738: LD_INT 23
36740: PUSH
36741: LD_INT 24
36743: PUSH
36744: EMPTY
36745: LIST
36746: LIST
36747: LIST
36748: LIST
36749: ST_TO_ADDR
36750: GO 36865
36752: LD_INT 52
36754: DOUBLE
36755: EQUAL
36756: IFTRUE 36760
36758: GO 36786
36760: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
36761: LD_ADDR_VAR 0 3
36765: PUSH
36766: LD_INT 21
36768: PUSH
36769: LD_INT 22
36771: PUSH
36772: LD_INT 23
36774: PUSH
36775: LD_INT 24
36777: PUSH
36778: EMPTY
36779: LIST
36780: LIST
36781: LIST
36782: LIST
36783: ST_TO_ADDR
36784: GO 36865
36786: LD_INT 53
36788: DOUBLE
36789: EQUAL
36790: IFTRUE 36794
36792: GO 36812
36794: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
36795: LD_ADDR_VAR 0 3
36799: PUSH
36800: LD_INT 23
36802: PUSH
36803: LD_INT 24
36805: PUSH
36806: EMPTY
36807: LIST
36808: LIST
36809: ST_TO_ADDR
36810: GO 36865
36812: LD_INT 46
36814: DOUBLE
36815: EQUAL
36816: IFTRUE 36820
36818: GO 36838
36820: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
36821: LD_ADDR_VAR 0 3
36825: PUSH
36826: LD_INT 23
36828: PUSH
36829: LD_INT 24
36831: PUSH
36832: EMPTY
36833: LIST
36834: LIST
36835: ST_TO_ADDR
36836: GO 36865
36838: LD_INT 47
36840: DOUBLE
36841: EQUAL
36842: IFTRUE 36846
36844: GO 36864
36846: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
36847: LD_ADDR_VAR 0 3
36851: PUSH
36852: LD_INT 23
36854: PUSH
36855: LD_INT 24
36857: PUSH
36858: EMPTY
36859: LIST
36860: LIST
36861: ST_TO_ADDR
36862: GO 36865
36864: POP
// result := ( chassis in result ) ;
36865: LD_ADDR_VAR 0 3
36869: PUSH
36870: LD_VAR 0 1
36874: PUSH
36875: LD_VAR 0 3
36879: IN
36880: ST_TO_ADDR
// end ;
36881: LD_VAR 0 3
36885: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
36886: LD_INT 0
36888: PPUSH
36889: PPUSH
36890: PPUSH
36891: PPUSH
36892: PPUSH
36893: PPUSH
36894: PPUSH
// result := array ;
36895: LD_ADDR_VAR 0 5
36899: PUSH
36900: LD_VAR 0 1
36904: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
36905: LD_VAR 0 1
36909: NOT
36910: PUSH
36911: LD_VAR 0 2
36915: NOT
36916: OR
36917: PUSH
36918: LD_VAR 0 3
36922: NOT
36923: OR
36924: PUSH
36925: LD_VAR 0 2
36929: PUSH
36930: LD_VAR 0 1
36934: GREATER
36935: OR
36936: PUSH
36937: LD_VAR 0 3
36941: PUSH
36942: LD_VAR 0 1
36946: GREATER
36947: OR
36948: IFFALSE 36952
// exit ;
36950: GO 37248
// if direction then
36952: LD_VAR 0 4
36956: IFFALSE 37020
// begin d := 1 ;
36958: LD_ADDR_VAR 0 9
36962: PUSH
36963: LD_INT 1
36965: ST_TO_ADDR
// if i_from > i_to then
36966: LD_VAR 0 2
36970: PUSH
36971: LD_VAR 0 3
36975: GREATER
36976: IFFALSE 37002
// length := ( array - i_from ) + i_to else
36978: LD_ADDR_VAR 0 11
36982: PUSH
36983: LD_VAR 0 1
36987: PUSH
36988: LD_VAR 0 2
36992: MINUS
36993: PUSH
36994: LD_VAR 0 3
36998: PLUS
36999: ST_TO_ADDR
37000: GO 37018
// length := i_to - i_from ;
37002: LD_ADDR_VAR 0 11
37006: PUSH
37007: LD_VAR 0 3
37011: PUSH
37012: LD_VAR 0 2
37016: MINUS
37017: ST_TO_ADDR
// end else
37018: GO 37081
// begin d := - 1 ;
37020: LD_ADDR_VAR 0 9
37024: PUSH
37025: LD_INT 1
37027: NEG
37028: ST_TO_ADDR
// if i_from > i_to then
37029: LD_VAR 0 2
37033: PUSH
37034: LD_VAR 0 3
37038: GREATER
37039: IFFALSE 37059
// length := i_from - i_to else
37041: LD_ADDR_VAR 0 11
37045: PUSH
37046: LD_VAR 0 2
37050: PUSH
37051: LD_VAR 0 3
37055: MINUS
37056: ST_TO_ADDR
37057: GO 37081
// length := ( array - i_to ) + i_from ;
37059: LD_ADDR_VAR 0 11
37063: PUSH
37064: LD_VAR 0 1
37068: PUSH
37069: LD_VAR 0 3
37073: MINUS
37074: PUSH
37075: LD_VAR 0 2
37079: PLUS
37080: ST_TO_ADDR
// end ; if not length then
37081: LD_VAR 0 11
37085: NOT
37086: IFFALSE 37090
// exit ;
37088: GO 37248
// tmp := array ;
37090: LD_ADDR_VAR 0 10
37094: PUSH
37095: LD_VAR 0 1
37099: ST_TO_ADDR
// for i = 1 to length do
37100: LD_ADDR_VAR 0 6
37104: PUSH
37105: DOUBLE
37106: LD_INT 1
37108: DEC
37109: ST_TO_ADDR
37110: LD_VAR 0 11
37114: PUSH
37115: FOR_TO
37116: IFFALSE 37236
// begin for j = 1 to array do
37118: LD_ADDR_VAR 0 7
37122: PUSH
37123: DOUBLE
37124: LD_INT 1
37126: DEC
37127: ST_TO_ADDR
37128: LD_VAR 0 1
37132: PUSH
37133: FOR_TO
37134: IFFALSE 37222
// begin k := j + d ;
37136: LD_ADDR_VAR 0 8
37140: PUSH
37141: LD_VAR 0 7
37145: PUSH
37146: LD_VAR 0 9
37150: PLUS
37151: ST_TO_ADDR
// if k > array then
37152: LD_VAR 0 8
37156: PUSH
37157: LD_VAR 0 1
37161: GREATER
37162: IFFALSE 37172
// k := 1 ;
37164: LD_ADDR_VAR 0 8
37168: PUSH
37169: LD_INT 1
37171: ST_TO_ADDR
// if not k then
37172: LD_VAR 0 8
37176: NOT
37177: IFFALSE 37189
// k := array ;
37179: LD_ADDR_VAR 0 8
37183: PUSH
37184: LD_VAR 0 1
37188: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
37189: LD_ADDR_VAR 0 10
37193: PUSH
37194: LD_VAR 0 10
37198: PPUSH
37199: LD_VAR 0 8
37203: PPUSH
37204: LD_VAR 0 1
37208: PUSH
37209: LD_VAR 0 7
37213: ARRAY
37214: PPUSH
37215: CALL_OW 1
37219: ST_TO_ADDR
// end ;
37220: GO 37133
37222: POP
37223: POP
// array := tmp ;
37224: LD_ADDR_VAR 0 1
37228: PUSH
37229: LD_VAR 0 10
37233: ST_TO_ADDR
// end ;
37234: GO 37115
37236: POP
37237: POP
// result := array ;
37238: LD_ADDR_VAR 0 5
37242: PUSH
37243: LD_VAR 0 1
37247: ST_TO_ADDR
// end ;
37248: LD_VAR 0 5
37252: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
37253: LD_INT 0
37255: PPUSH
37256: PPUSH
// result := 0 ;
37257: LD_ADDR_VAR 0 3
37261: PUSH
37262: LD_INT 0
37264: ST_TO_ADDR
// if not array or not value in array then
37265: LD_VAR 0 1
37269: NOT
37270: PUSH
37271: LD_VAR 0 2
37275: PUSH
37276: LD_VAR 0 1
37280: IN
37281: NOT
37282: OR
37283: IFFALSE 37287
// exit ;
37285: GO 37341
// for i = 1 to array do
37287: LD_ADDR_VAR 0 4
37291: PUSH
37292: DOUBLE
37293: LD_INT 1
37295: DEC
37296: ST_TO_ADDR
37297: LD_VAR 0 1
37301: PUSH
37302: FOR_TO
37303: IFFALSE 37339
// if value = array [ i ] then
37305: LD_VAR 0 2
37309: PUSH
37310: LD_VAR 0 1
37314: PUSH
37315: LD_VAR 0 4
37319: ARRAY
37320: EQUAL
37321: IFFALSE 37337
// begin result := i ;
37323: LD_ADDR_VAR 0 3
37327: PUSH
37328: LD_VAR 0 4
37332: ST_TO_ADDR
// exit ;
37333: POP
37334: POP
37335: GO 37341
// end ;
37337: GO 37302
37339: POP
37340: POP
// end ;
37341: LD_VAR 0 3
37345: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
37346: LD_INT 0
37348: PPUSH
// vc_chassis := chassis ;
37349: LD_ADDR_OWVAR 37
37353: PUSH
37354: LD_VAR 0 1
37358: ST_TO_ADDR
// vc_engine := engine ;
37359: LD_ADDR_OWVAR 39
37363: PUSH
37364: LD_VAR 0 2
37368: ST_TO_ADDR
// vc_control := control ;
37369: LD_ADDR_OWVAR 38
37373: PUSH
37374: LD_VAR 0 3
37378: ST_TO_ADDR
// vc_weapon := weapon ;
37379: LD_ADDR_OWVAR 40
37383: PUSH
37384: LD_VAR 0 4
37388: ST_TO_ADDR
// vc_fuel_battery := fuel ;
37389: LD_ADDR_OWVAR 41
37393: PUSH
37394: LD_VAR 0 5
37398: ST_TO_ADDR
// end ;
37399: LD_VAR 0 6
37403: RET
// export function WantPlant ( unit ) ; var task ; begin
37404: LD_INT 0
37406: PPUSH
37407: PPUSH
// result := false ;
37408: LD_ADDR_VAR 0 2
37412: PUSH
37413: LD_INT 0
37415: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
37416: LD_ADDR_VAR 0 3
37420: PUSH
37421: LD_VAR 0 1
37425: PPUSH
37426: CALL_OW 437
37430: ST_TO_ADDR
// if task then
37431: LD_VAR 0 3
37435: IFFALSE 37463
// if task [ 1 ] [ 1 ] = p then
37437: LD_VAR 0 3
37441: PUSH
37442: LD_INT 1
37444: ARRAY
37445: PUSH
37446: LD_INT 1
37448: ARRAY
37449: PUSH
37450: LD_STRING p
37452: EQUAL
37453: IFFALSE 37463
// result := true ;
37455: LD_ADDR_VAR 0 2
37459: PUSH
37460: LD_INT 1
37462: ST_TO_ADDR
// end ;
37463: LD_VAR 0 2
37467: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
37468: LD_INT 0
37470: PPUSH
37471: PPUSH
37472: PPUSH
37473: PPUSH
// if pos < 1 then
37474: LD_VAR 0 2
37478: PUSH
37479: LD_INT 1
37481: LESS
37482: IFFALSE 37486
// exit ;
37484: GO 37789
// if pos = 1 then
37486: LD_VAR 0 2
37490: PUSH
37491: LD_INT 1
37493: EQUAL
37494: IFFALSE 37527
// result := Replace ( arr , pos [ 1 ] , value ) else
37496: LD_ADDR_VAR 0 4
37500: PUSH
37501: LD_VAR 0 1
37505: PPUSH
37506: LD_VAR 0 2
37510: PUSH
37511: LD_INT 1
37513: ARRAY
37514: PPUSH
37515: LD_VAR 0 3
37519: PPUSH
37520: CALL_OW 1
37524: ST_TO_ADDR
37525: GO 37789
// begin tmp := arr ;
37527: LD_ADDR_VAR 0 6
37531: PUSH
37532: LD_VAR 0 1
37536: ST_TO_ADDR
// s_arr := [ tmp ] ;
37537: LD_ADDR_VAR 0 7
37541: PUSH
37542: LD_VAR 0 6
37546: PUSH
37547: EMPTY
37548: LIST
37549: ST_TO_ADDR
// for i = 1 to pos - 1 do
37550: LD_ADDR_VAR 0 5
37554: PUSH
37555: DOUBLE
37556: LD_INT 1
37558: DEC
37559: ST_TO_ADDR
37560: LD_VAR 0 2
37564: PUSH
37565: LD_INT 1
37567: MINUS
37568: PUSH
37569: FOR_TO
37570: IFFALSE 37615
// begin tmp := tmp [ pos [ i ] ] ;
37572: LD_ADDR_VAR 0 6
37576: PUSH
37577: LD_VAR 0 6
37581: PUSH
37582: LD_VAR 0 2
37586: PUSH
37587: LD_VAR 0 5
37591: ARRAY
37592: ARRAY
37593: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
37594: LD_ADDR_VAR 0 7
37598: PUSH
37599: LD_VAR 0 7
37603: PUSH
37604: LD_VAR 0 6
37608: PUSH
37609: EMPTY
37610: LIST
37611: ADD
37612: ST_TO_ADDR
// end ;
37613: GO 37569
37615: POP
37616: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
37617: LD_ADDR_VAR 0 6
37621: PUSH
37622: LD_VAR 0 6
37626: PPUSH
37627: LD_VAR 0 2
37631: PUSH
37632: LD_VAR 0 2
37636: ARRAY
37637: PPUSH
37638: LD_VAR 0 3
37642: PPUSH
37643: CALL_OW 1
37647: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
37648: LD_ADDR_VAR 0 7
37652: PUSH
37653: LD_VAR 0 7
37657: PPUSH
37658: LD_VAR 0 7
37662: PPUSH
37663: LD_VAR 0 6
37667: PPUSH
37668: CALL_OW 1
37672: ST_TO_ADDR
// for i = s_arr downto 2 do
37673: LD_ADDR_VAR 0 5
37677: PUSH
37678: DOUBLE
37679: LD_VAR 0 7
37683: INC
37684: ST_TO_ADDR
37685: LD_INT 2
37687: PUSH
37688: FOR_DOWNTO
37689: IFFALSE 37773
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
37691: LD_ADDR_VAR 0 6
37695: PUSH
37696: LD_VAR 0 7
37700: PUSH
37701: LD_VAR 0 5
37705: PUSH
37706: LD_INT 1
37708: MINUS
37709: ARRAY
37710: PPUSH
37711: LD_VAR 0 2
37715: PUSH
37716: LD_VAR 0 5
37720: PUSH
37721: LD_INT 1
37723: MINUS
37724: ARRAY
37725: PPUSH
37726: LD_VAR 0 7
37730: PUSH
37731: LD_VAR 0 5
37735: ARRAY
37736: PPUSH
37737: CALL_OW 1
37741: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
37742: LD_ADDR_VAR 0 7
37746: PUSH
37747: LD_VAR 0 7
37751: PPUSH
37752: LD_VAR 0 5
37756: PUSH
37757: LD_INT 1
37759: MINUS
37760: PPUSH
37761: LD_VAR 0 6
37765: PPUSH
37766: CALL_OW 1
37770: ST_TO_ADDR
// end ;
37771: GO 37688
37773: POP
37774: POP
// result := s_arr [ 1 ] ;
37775: LD_ADDR_VAR 0 4
37779: PUSH
37780: LD_VAR 0 7
37784: PUSH
37785: LD_INT 1
37787: ARRAY
37788: ST_TO_ADDR
// end ; end ;
37789: LD_VAR 0 4
37793: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
37794: LD_INT 0
37796: PPUSH
37797: PPUSH
// if not list then
37798: LD_VAR 0 1
37802: NOT
37803: IFFALSE 37807
// exit ;
37805: GO 37898
// i := list [ pos1 ] ;
37807: LD_ADDR_VAR 0 5
37811: PUSH
37812: LD_VAR 0 1
37816: PUSH
37817: LD_VAR 0 2
37821: ARRAY
37822: ST_TO_ADDR
// if not i then
37823: LD_VAR 0 5
37827: NOT
37828: IFFALSE 37832
// exit ;
37830: GO 37898
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
37832: LD_ADDR_VAR 0 1
37836: PUSH
37837: LD_VAR 0 1
37841: PPUSH
37842: LD_VAR 0 2
37846: PPUSH
37847: LD_VAR 0 1
37851: PUSH
37852: LD_VAR 0 3
37856: ARRAY
37857: PPUSH
37858: CALL_OW 1
37862: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
37863: LD_ADDR_VAR 0 1
37867: PUSH
37868: LD_VAR 0 1
37872: PPUSH
37873: LD_VAR 0 3
37877: PPUSH
37878: LD_VAR 0 5
37882: PPUSH
37883: CALL_OW 1
37887: ST_TO_ADDR
// result := list ;
37888: LD_ADDR_VAR 0 4
37892: PUSH
37893: LD_VAR 0 1
37897: ST_TO_ADDR
// end ;
37898: LD_VAR 0 4
37902: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
37903: LD_INT 0
37905: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
37906: LD_ADDR_VAR 0 5
37910: PUSH
37911: LD_VAR 0 1
37915: PPUSH
37916: CALL_OW 250
37920: PPUSH
37921: LD_VAR 0 1
37925: PPUSH
37926: CALL_OW 251
37930: PPUSH
37931: LD_VAR 0 2
37935: PPUSH
37936: LD_VAR 0 3
37940: PPUSH
37941: LD_VAR 0 4
37945: PPUSH
37946: CALL 37956 0 5
37950: ST_TO_ADDR
// end ;
37951: LD_VAR 0 5
37955: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
37956: LD_INT 0
37958: PPUSH
37959: PPUSH
37960: PPUSH
37961: PPUSH
// if not list then
37962: LD_VAR 0 3
37966: NOT
37967: IFFALSE 37971
// exit ;
37969: GO 38359
// result := [ ] ;
37971: LD_ADDR_VAR 0 6
37975: PUSH
37976: EMPTY
37977: ST_TO_ADDR
// for i in list do
37978: LD_ADDR_VAR 0 7
37982: PUSH
37983: LD_VAR 0 3
37987: PUSH
37988: FOR_IN
37989: IFFALSE 38191
// begin tmp := GetDistUnitXY ( i , x , y ) ;
37991: LD_ADDR_VAR 0 9
37995: PUSH
37996: LD_VAR 0 7
38000: PPUSH
38001: LD_VAR 0 1
38005: PPUSH
38006: LD_VAR 0 2
38010: PPUSH
38011: CALL_OW 297
38015: ST_TO_ADDR
// if not result then
38016: LD_VAR 0 6
38020: NOT
38021: IFFALSE 38047
// result := [ [ i , tmp ] ] else
38023: LD_ADDR_VAR 0 6
38027: PUSH
38028: LD_VAR 0 7
38032: PUSH
38033: LD_VAR 0 9
38037: PUSH
38038: EMPTY
38039: LIST
38040: LIST
38041: PUSH
38042: EMPTY
38043: LIST
38044: ST_TO_ADDR
38045: GO 38189
// begin if result [ result ] [ 2 ] < tmp then
38047: LD_VAR 0 6
38051: PUSH
38052: LD_VAR 0 6
38056: ARRAY
38057: PUSH
38058: LD_INT 2
38060: ARRAY
38061: PUSH
38062: LD_VAR 0 9
38066: LESS
38067: IFFALSE 38109
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
38069: LD_ADDR_VAR 0 6
38073: PUSH
38074: LD_VAR 0 6
38078: PPUSH
38079: LD_VAR 0 6
38083: PUSH
38084: LD_INT 1
38086: PLUS
38087: PPUSH
38088: LD_VAR 0 7
38092: PUSH
38093: LD_VAR 0 9
38097: PUSH
38098: EMPTY
38099: LIST
38100: LIST
38101: PPUSH
38102: CALL_OW 2
38106: ST_TO_ADDR
38107: GO 38189
// for j = 1 to result do
38109: LD_ADDR_VAR 0 8
38113: PUSH
38114: DOUBLE
38115: LD_INT 1
38117: DEC
38118: ST_TO_ADDR
38119: LD_VAR 0 6
38123: PUSH
38124: FOR_TO
38125: IFFALSE 38187
// begin if tmp < result [ j ] [ 2 ] then
38127: LD_VAR 0 9
38131: PUSH
38132: LD_VAR 0 6
38136: PUSH
38137: LD_VAR 0 8
38141: ARRAY
38142: PUSH
38143: LD_INT 2
38145: ARRAY
38146: LESS
38147: IFFALSE 38185
// begin result := Insert ( result , j , [ i , tmp ] ) ;
38149: LD_ADDR_VAR 0 6
38153: PUSH
38154: LD_VAR 0 6
38158: PPUSH
38159: LD_VAR 0 8
38163: PPUSH
38164: LD_VAR 0 7
38168: PUSH
38169: LD_VAR 0 9
38173: PUSH
38174: EMPTY
38175: LIST
38176: LIST
38177: PPUSH
38178: CALL_OW 2
38182: ST_TO_ADDR
// break ;
38183: GO 38187
// end ; end ;
38185: GO 38124
38187: POP
38188: POP
// end ; end ;
38189: GO 37988
38191: POP
38192: POP
// if result and not asc then
38193: LD_VAR 0 6
38197: PUSH
38198: LD_VAR 0 4
38202: NOT
38203: AND
38204: IFFALSE 38279
// begin tmp := result ;
38206: LD_ADDR_VAR 0 9
38210: PUSH
38211: LD_VAR 0 6
38215: ST_TO_ADDR
// for i = tmp downto 1 do
38216: LD_ADDR_VAR 0 7
38220: PUSH
38221: DOUBLE
38222: LD_VAR 0 9
38226: INC
38227: ST_TO_ADDR
38228: LD_INT 1
38230: PUSH
38231: FOR_DOWNTO
38232: IFFALSE 38277
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
38234: LD_ADDR_VAR 0 6
38238: PUSH
38239: LD_VAR 0 6
38243: PPUSH
38244: LD_VAR 0 9
38248: PUSH
38249: LD_VAR 0 7
38253: MINUS
38254: PUSH
38255: LD_INT 1
38257: PLUS
38258: PPUSH
38259: LD_VAR 0 9
38263: PUSH
38264: LD_VAR 0 7
38268: ARRAY
38269: PPUSH
38270: CALL_OW 1
38274: ST_TO_ADDR
38275: GO 38231
38277: POP
38278: POP
// end ; tmp := [ ] ;
38279: LD_ADDR_VAR 0 9
38283: PUSH
38284: EMPTY
38285: ST_TO_ADDR
// if mode then
38286: LD_VAR 0 5
38290: IFFALSE 38359
// begin for i = 1 to result do
38292: LD_ADDR_VAR 0 7
38296: PUSH
38297: DOUBLE
38298: LD_INT 1
38300: DEC
38301: ST_TO_ADDR
38302: LD_VAR 0 6
38306: PUSH
38307: FOR_TO
38308: IFFALSE 38347
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
38310: LD_ADDR_VAR 0 9
38314: PUSH
38315: LD_VAR 0 9
38319: PPUSH
38320: LD_VAR 0 7
38324: PPUSH
38325: LD_VAR 0 6
38329: PUSH
38330: LD_VAR 0 7
38334: ARRAY
38335: PUSH
38336: LD_INT 1
38338: ARRAY
38339: PPUSH
38340: CALL_OW 1
38344: ST_TO_ADDR
38345: GO 38307
38347: POP
38348: POP
// result := tmp ;
38349: LD_ADDR_VAR 0 6
38353: PUSH
38354: LD_VAR 0 9
38358: ST_TO_ADDR
// end ; end ;
38359: LD_VAR 0 6
38363: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
38364: LD_INT 0
38366: PPUSH
38367: PPUSH
38368: PPUSH
38369: PPUSH
38370: PPUSH
38371: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
38372: LD_ADDR_VAR 0 5
38376: PUSH
38377: LD_INT 0
38379: PUSH
38380: LD_INT 0
38382: PUSH
38383: LD_INT 0
38385: PUSH
38386: EMPTY
38387: PUSH
38388: EMPTY
38389: LIST
38390: LIST
38391: LIST
38392: LIST
38393: ST_TO_ADDR
// if not x or not y then
38394: LD_VAR 0 2
38398: NOT
38399: PUSH
38400: LD_VAR 0 3
38404: NOT
38405: OR
38406: IFFALSE 38410
// exit ;
38408: GO 40060
// if not range then
38410: LD_VAR 0 4
38414: NOT
38415: IFFALSE 38425
// range := 10 ;
38417: LD_ADDR_VAR 0 4
38421: PUSH
38422: LD_INT 10
38424: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38425: LD_ADDR_VAR 0 8
38429: PUSH
38430: LD_INT 81
38432: PUSH
38433: LD_VAR 0 1
38437: PUSH
38438: EMPTY
38439: LIST
38440: LIST
38441: PUSH
38442: LD_INT 92
38444: PUSH
38445: LD_VAR 0 2
38449: PUSH
38450: LD_VAR 0 3
38454: PUSH
38455: LD_VAR 0 4
38459: PUSH
38460: EMPTY
38461: LIST
38462: LIST
38463: LIST
38464: LIST
38465: PUSH
38466: LD_INT 3
38468: PUSH
38469: LD_INT 21
38471: PUSH
38472: LD_INT 3
38474: PUSH
38475: EMPTY
38476: LIST
38477: LIST
38478: PUSH
38479: EMPTY
38480: LIST
38481: LIST
38482: PUSH
38483: EMPTY
38484: LIST
38485: LIST
38486: LIST
38487: PPUSH
38488: CALL_OW 69
38492: ST_TO_ADDR
// if not tmp then
38493: LD_VAR 0 8
38497: NOT
38498: IFFALSE 38502
// exit ;
38500: GO 40060
// for i in tmp do
38502: LD_ADDR_VAR 0 6
38506: PUSH
38507: LD_VAR 0 8
38511: PUSH
38512: FOR_IN
38513: IFFALSE 40035
// begin points := [ 0 , 0 , 0 ] ;
38515: LD_ADDR_VAR 0 9
38519: PUSH
38520: LD_INT 0
38522: PUSH
38523: LD_INT 0
38525: PUSH
38526: LD_INT 0
38528: PUSH
38529: EMPTY
38530: LIST
38531: LIST
38532: LIST
38533: ST_TO_ADDR
// bpoints := 1 ;
38534: LD_ADDR_VAR 0 10
38538: PUSH
38539: LD_INT 1
38541: ST_TO_ADDR
// case GetType ( i ) of unit_human :
38542: LD_VAR 0 6
38546: PPUSH
38547: CALL_OW 247
38551: PUSH
38552: LD_INT 1
38554: DOUBLE
38555: EQUAL
38556: IFTRUE 38560
38558: GO 39138
38560: POP
// begin if GetClass ( i ) = 1 then
38561: LD_VAR 0 6
38565: PPUSH
38566: CALL_OW 257
38570: PUSH
38571: LD_INT 1
38573: EQUAL
38574: IFFALSE 38595
// points := [ 10 , 5 , 3 ] ;
38576: LD_ADDR_VAR 0 9
38580: PUSH
38581: LD_INT 10
38583: PUSH
38584: LD_INT 5
38586: PUSH
38587: LD_INT 3
38589: PUSH
38590: EMPTY
38591: LIST
38592: LIST
38593: LIST
38594: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
38595: LD_VAR 0 6
38599: PPUSH
38600: CALL_OW 257
38604: PUSH
38605: LD_INT 2
38607: PUSH
38608: LD_INT 3
38610: PUSH
38611: LD_INT 4
38613: PUSH
38614: EMPTY
38615: LIST
38616: LIST
38617: LIST
38618: IN
38619: IFFALSE 38640
// points := [ 3 , 2 , 1 ] ;
38621: LD_ADDR_VAR 0 9
38625: PUSH
38626: LD_INT 3
38628: PUSH
38629: LD_INT 2
38631: PUSH
38632: LD_INT 1
38634: PUSH
38635: EMPTY
38636: LIST
38637: LIST
38638: LIST
38639: ST_TO_ADDR
// if GetClass ( i ) = 5 then
38640: LD_VAR 0 6
38644: PPUSH
38645: CALL_OW 257
38649: PUSH
38650: LD_INT 5
38652: EQUAL
38653: IFFALSE 38674
// points := [ 130 , 5 , 2 ] ;
38655: LD_ADDR_VAR 0 9
38659: PUSH
38660: LD_INT 130
38662: PUSH
38663: LD_INT 5
38665: PUSH
38666: LD_INT 2
38668: PUSH
38669: EMPTY
38670: LIST
38671: LIST
38672: LIST
38673: ST_TO_ADDR
// if GetClass ( i ) = 8 then
38674: LD_VAR 0 6
38678: PPUSH
38679: CALL_OW 257
38683: PUSH
38684: LD_INT 8
38686: EQUAL
38687: IFFALSE 38708
// points := [ 35 , 35 , 30 ] ;
38689: LD_ADDR_VAR 0 9
38693: PUSH
38694: LD_INT 35
38696: PUSH
38697: LD_INT 35
38699: PUSH
38700: LD_INT 30
38702: PUSH
38703: EMPTY
38704: LIST
38705: LIST
38706: LIST
38707: ST_TO_ADDR
// if GetClass ( i ) = 9 then
38708: LD_VAR 0 6
38712: PPUSH
38713: CALL_OW 257
38717: PUSH
38718: LD_INT 9
38720: EQUAL
38721: IFFALSE 38742
// points := [ 20 , 55 , 40 ] ;
38723: LD_ADDR_VAR 0 9
38727: PUSH
38728: LD_INT 20
38730: PUSH
38731: LD_INT 55
38733: PUSH
38734: LD_INT 40
38736: PUSH
38737: EMPTY
38738: LIST
38739: LIST
38740: LIST
38741: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
38742: LD_VAR 0 6
38746: PPUSH
38747: CALL_OW 257
38751: PUSH
38752: LD_INT 12
38754: PUSH
38755: LD_INT 16
38757: PUSH
38758: EMPTY
38759: LIST
38760: LIST
38761: IN
38762: IFFALSE 38783
// points := [ 5 , 3 , 2 ] ;
38764: LD_ADDR_VAR 0 9
38768: PUSH
38769: LD_INT 5
38771: PUSH
38772: LD_INT 3
38774: PUSH
38775: LD_INT 2
38777: PUSH
38778: EMPTY
38779: LIST
38780: LIST
38781: LIST
38782: ST_TO_ADDR
// if GetClass ( i ) = 17 then
38783: LD_VAR 0 6
38787: PPUSH
38788: CALL_OW 257
38792: PUSH
38793: LD_INT 17
38795: EQUAL
38796: IFFALSE 38817
// points := [ 100 , 50 , 75 ] ;
38798: LD_ADDR_VAR 0 9
38802: PUSH
38803: LD_INT 100
38805: PUSH
38806: LD_INT 50
38808: PUSH
38809: LD_INT 75
38811: PUSH
38812: EMPTY
38813: LIST
38814: LIST
38815: LIST
38816: ST_TO_ADDR
// if GetClass ( i ) = 15 then
38817: LD_VAR 0 6
38821: PPUSH
38822: CALL_OW 257
38826: PUSH
38827: LD_INT 15
38829: EQUAL
38830: IFFALSE 38851
// points := [ 10 , 5 , 3 ] ;
38832: LD_ADDR_VAR 0 9
38836: PUSH
38837: LD_INT 10
38839: PUSH
38840: LD_INT 5
38842: PUSH
38843: LD_INT 3
38845: PUSH
38846: EMPTY
38847: LIST
38848: LIST
38849: LIST
38850: ST_TO_ADDR
// if GetClass ( i ) = 14 then
38851: LD_VAR 0 6
38855: PPUSH
38856: CALL_OW 257
38860: PUSH
38861: LD_INT 14
38863: EQUAL
38864: IFFALSE 38885
// points := [ 10 , 0 , 0 ] ;
38866: LD_ADDR_VAR 0 9
38870: PUSH
38871: LD_INT 10
38873: PUSH
38874: LD_INT 0
38876: PUSH
38877: LD_INT 0
38879: PUSH
38880: EMPTY
38881: LIST
38882: LIST
38883: LIST
38884: ST_TO_ADDR
// if GetClass ( i ) = 11 then
38885: LD_VAR 0 6
38889: PPUSH
38890: CALL_OW 257
38894: PUSH
38895: LD_INT 11
38897: EQUAL
38898: IFFALSE 38919
// points := [ 30 , 10 , 5 ] ;
38900: LD_ADDR_VAR 0 9
38904: PUSH
38905: LD_INT 30
38907: PUSH
38908: LD_INT 10
38910: PUSH
38911: LD_INT 5
38913: PUSH
38914: EMPTY
38915: LIST
38916: LIST
38917: LIST
38918: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
38919: LD_VAR 0 1
38923: PPUSH
38924: LD_INT 5
38926: PPUSH
38927: CALL_OW 321
38931: PUSH
38932: LD_INT 2
38934: EQUAL
38935: IFFALSE 38952
// bpoints := bpoints * 1.8 ;
38937: LD_ADDR_VAR 0 10
38941: PUSH
38942: LD_VAR 0 10
38946: PUSH
38947: LD_REAL  1.80000000000000E+0000
38950: MUL
38951: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
38952: LD_VAR 0 6
38956: PPUSH
38957: CALL_OW 257
38961: PUSH
38962: LD_INT 1
38964: PUSH
38965: LD_INT 2
38967: PUSH
38968: LD_INT 3
38970: PUSH
38971: LD_INT 4
38973: PUSH
38974: EMPTY
38975: LIST
38976: LIST
38977: LIST
38978: LIST
38979: IN
38980: PUSH
38981: LD_VAR 0 1
38985: PPUSH
38986: LD_INT 51
38988: PPUSH
38989: CALL_OW 321
38993: PUSH
38994: LD_INT 2
38996: EQUAL
38997: AND
38998: IFFALSE 39015
// bpoints := bpoints * 1.2 ;
39000: LD_ADDR_VAR 0 10
39004: PUSH
39005: LD_VAR 0 10
39009: PUSH
39010: LD_REAL  1.20000000000000E+0000
39013: MUL
39014: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
39015: LD_VAR 0 6
39019: PPUSH
39020: CALL_OW 257
39024: PUSH
39025: LD_INT 5
39027: PUSH
39028: LD_INT 7
39030: PUSH
39031: LD_INT 9
39033: PUSH
39034: EMPTY
39035: LIST
39036: LIST
39037: LIST
39038: IN
39039: PUSH
39040: LD_VAR 0 1
39044: PPUSH
39045: LD_INT 52
39047: PPUSH
39048: CALL_OW 321
39052: PUSH
39053: LD_INT 2
39055: EQUAL
39056: AND
39057: IFFALSE 39074
// bpoints := bpoints * 1.5 ;
39059: LD_ADDR_VAR 0 10
39063: PUSH
39064: LD_VAR 0 10
39068: PUSH
39069: LD_REAL  1.50000000000000E+0000
39072: MUL
39073: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
39074: LD_VAR 0 1
39078: PPUSH
39079: LD_INT 66
39081: PPUSH
39082: CALL_OW 321
39086: PUSH
39087: LD_INT 2
39089: EQUAL
39090: IFFALSE 39107
// bpoints := bpoints * 1.1 ;
39092: LD_ADDR_VAR 0 10
39096: PUSH
39097: LD_VAR 0 10
39101: PUSH
39102: LD_REAL  1.10000000000000E+0000
39105: MUL
39106: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
39107: LD_ADDR_VAR 0 10
39111: PUSH
39112: LD_VAR 0 10
39116: PUSH
39117: LD_VAR 0 6
39121: PPUSH
39122: LD_INT 1
39124: PPUSH
39125: CALL_OW 259
39129: PUSH
39130: LD_REAL  1.15000000000000E+0000
39133: MUL
39134: MUL
39135: ST_TO_ADDR
// end ; unit_vehicle :
39136: GO 39964
39138: LD_INT 2
39140: DOUBLE
39141: EQUAL
39142: IFTRUE 39146
39144: GO 39952
39146: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
39147: LD_VAR 0 6
39151: PPUSH
39152: CALL_OW 264
39156: PUSH
39157: LD_INT 2
39159: PUSH
39160: LD_INT 42
39162: PUSH
39163: LD_INT 24
39165: PUSH
39166: EMPTY
39167: LIST
39168: LIST
39169: LIST
39170: IN
39171: IFFALSE 39192
// points := [ 25 , 5 , 3 ] ;
39173: LD_ADDR_VAR 0 9
39177: PUSH
39178: LD_INT 25
39180: PUSH
39181: LD_INT 5
39183: PUSH
39184: LD_INT 3
39186: PUSH
39187: EMPTY
39188: LIST
39189: LIST
39190: LIST
39191: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
39192: LD_VAR 0 6
39196: PPUSH
39197: CALL_OW 264
39201: PUSH
39202: LD_INT 4
39204: PUSH
39205: LD_INT 43
39207: PUSH
39208: LD_INT 25
39210: PUSH
39211: EMPTY
39212: LIST
39213: LIST
39214: LIST
39215: IN
39216: IFFALSE 39237
// points := [ 40 , 15 , 5 ] ;
39218: LD_ADDR_VAR 0 9
39222: PUSH
39223: LD_INT 40
39225: PUSH
39226: LD_INT 15
39228: PUSH
39229: LD_INT 5
39231: PUSH
39232: EMPTY
39233: LIST
39234: LIST
39235: LIST
39236: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
39237: LD_VAR 0 6
39241: PPUSH
39242: CALL_OW 264
39246: PUSH
39247: LD_INT 3
39249: PUSH
39250: LD_INT 23
39252: PUSH
39253: EMPTY
39254: LIST
39255: LIST
39256: IN
39257: IFFALSE 39278
// points := [ 7 , 25 , 8 ] ;
39259: LD_ADDR_VAR 0 9
39263: PUSH
39264: LD_INT 7
39266: PUSH
39267: LD_INT 25
39269: PUSH
39270: LD_INT 8
39272: PUSH
39273: EMPTY
39274: LIST
39275: LIST
39276: LIST
39277: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
39278: LD_VAR 0 6
39282: PPUSH
39283: CALL_OW 264
39287: PUSH
39288: LD_INT 5
39290: PUSH
39291: LD_INT 27
39293: PUSH
39294: LD_INT 44
39296: PUSH
39297: EMPTY
39298: LIST
39299: LIST
39300: LIST
39301: IN
39302: IFFALSE 39323
// points := [ 14 , 50 , 16 ] ;
39304: LD_ADDR_VAR 0 9
39308: PUSH
39309: LD_INT 14
39311: PUSH
39312: LD_INT 50
39314: PUSH
39315: LD_INT 16
39317: PUSH
39318: EMPTY
39319: LIST
39320: LIST
39321: LIST
39322: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
39323: LD_VAR 0 6
39327: PPUSH
39328: CALL_OW 264
39332: PUSH
39333: LD_INT 6
39335: PUSH
39336: LD_INT 46
39338: PUSH
39339: EMPTY
39340: LIST
39341: LIST
39342: IN
39343: IFFALSE 39364
// points := [ 32 , 120 , 70 ] ;
39345: LD_ADDR_VAR 0 9
39349: PUSH
39350: LD_INT 32
39352: PUSH
39353: LD_INT 120
39355: PUSH
39356: LD_INT 70
39358: PUSH
39359: EMPTY
39360: LIST
39361: LIST
39362: LIST
39363: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
39364: LD_VAR 0 6
39368: PPUSH
39369: CALL_OW 264
39373: PUSH
39374: LD_INT 7
39376: PUSH
39377: LD_INT 28
39379: PUSH
39380: LD_INT 45
39382: PUSH
39383: LD_INT 92
39385: PUSH
39386: EMPTY
39387: LIST
39388: LIST
39389: LIST
39390: LIST
39391: IN
39392: IFFALSE 39413
// points := [ 35 , 20 , 45 ] ;
39394: LD_ADDR_VAR 0 9
39398: PUSH
39399: LD_INT 35
39401: PUSH
39402: LD_INT 20
39404: PUSH
39405: LD_INT 45
39407: PUSH
39408: EMPTY
39409: LIST
39410: LIST
39411: LIST
39412: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
39413: LD_VAR 0 6
39417: PPUSH
39418: CALL_OW 264
39422: PUSH
39423: LD_INT 47
39425: PUSH
39426: EMPTY
39427: LIST
39428: IN
39429: IFFALSE 39450
// points := [ 67 , 45 , 75 ] ;
39431: LD_ADDR_VAR 0 9
39435: PUSH
39436: LD_INT 67
39438: PUSH
39439: LD_INT 45
39441: PUSH
39442: LD_INT 75
39444: PUSH
39445: EMPTY
39446: LIST
39447: LIST
39448: LIST
39449: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
39450: LD_VAR 0 6
39454: PPUSH
39455: CALL_OW 264
39459: PUSH
39460: LD_INT 26
39462: PUSH
39463: EMPTY
39464: LIST
39465: IN
39466: IFFALSE 39487
// points := [ 120 , 30 , 80 ] ;
39468: LD_ADDR_VAR 0 9
39472: PUSH
39473: LD_INT 120
39475: PUSH
39476: LD_INT 30
39478: PUSH
39479: LD_INT 80
39481: PUSH
39482: EMPTY
39483: LIST
39484: LIST
39485: LIST
39486: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
39487: LD_VAR 0 6
39491: PPUSH
39492: CALL_OW 264
39496: PUSH
39497: LD_INT 22
39499: PUSH
39500: EMPTY
39501: LIST
39502: IN
39503: IFFALSE 39524
// points := [ 40 , 1 , 1 ] ;
39505: LD_ADDR_VAR 0 9
39509: PUSH
39510: LD_INT 40
39512: PUSH
39513: LD_INT 1
39515: PUSH
39516: LD_INT 1
39518: PUSH
39519: EMPTY
39520: LIST
39521: LIST
39522: LIST
39523: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
39524: LD_VAR 0 6
39528: PPUSH
39529: CALL_OW 264
39533: PUSH
39534: LD_INT 29
39536: PUSH
39537: EMPTY
39538: LIST
39539: IN
39540: IFFALSE 39561
// points := [ 70 , 200 , 400 ] ;
39542: LD_ADDR_VAR 0 9
39546: PUSH
39547: LD_INT 70
39549: PUSH
39550: LD_INT 200
39552: PUSH
39553: LD_INT 400
39555: PUSH
39556: EMPTY
39557: LIST
39558: LIST
39559: LIST
39560: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
39561: LD_VAR 0 6
39565: PPUSH
39566: CALL_OW 264
39570: PUSH
39571: LD_INT 14
39573: PUSH
39574: LD_INT 53
39576: PUSH
39577: EMPTY
39578: LIST
39579: LIST
39580: IN
39581: IFFALSE 39602
// points := [ 40 , 10 , 20 ] ;
39583: LD_ADDR_VAR 0 9
39587: PUSH
39588: LD_INT 40
39590: PUSH
39591: LD_INT 10
39593: PUSH
39594: LD_INT 20
39596: PUSH
39597: EMPTY
39598: LIST
39599: LIST
39600: LIST
39601: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
39602: LD_VAR 0 6
39606: PPUSH
39607: CALL_OW 264
39611: PUSH
39612: LD_INT 9
39614: PUSH
39615: EMPTY
39616: LIST
39617: IN
39618: IFFALSE 39639
// points := [ 5 , 70 , 20 ] ;
39620: LD_ADDR_VAR 0 9
39624: PUSH
39625: LD_INT 5
39627: PUSH
39628: LD_INT 70
39630: PUSH
39631: LD_INT 20
39633: PUSH
39634: EMPTY
39635: LIST
39636: LIST
39637: LIST
39638: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
39639: LD_VAR 0 6
39643: PPUSH
39644: CALL_OW 264
39648: PUSH
39649: LD_INT 10
39651: PUSH
39652: EMPTY
39653: LIST
39654: IN
39655: IFFALSE 39676
// points := [ 35 , 110 , 70 ] ;
39657: LD_ADDR_VAR 0 9
39661: PUSH
39662: LD_INT 35
39664: PUSH
39665: LD_INT 110
39667: PUSH
39668: LD_INT 70
39670: PUSH
39671: EMPTY
39672: LIST
39673: LIST
39674: LIST
39675: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
39676: LD_VAR 0 6
39680: PPUSH
39681: CALL_OW 265
39685: PUSH
39686: LD_INT 25
39688: EQUAL
39689: IFFALSE 39710
// points := [ 80 , 65 , 100 ] ;
39691: LD_ADDR_VAR 0 9
39695: PUSH
39696: LD_INT 80
39698: PUSH
39699: LD_INT 65
39701: PUSH
39702: LD_INT 100
39704: PUSH
39705: EMPTY
39706: LIST
39707: LIST
39708: LIST
39709: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
39710: LD_VAR 0 6
39714: PPUSH
39715: CALL_OW 263
39719: PUSH
39720: LD_INT 1
39722: EQUAL
39723: IFFALSE 39758
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
39725: LD_ADDR_VAR 0 10
39729: PUSH
39730: LD_VAR 0 10
39734: PUSH
39735: LD_VAR 0 6
39739: PPUSH
39740: CALL_OW 311
39744: PPUSH
39745: LD_INT 3
39747: PPUSH
39748: CALL_OW 259
39752: PUSH
39753: LD_INT 4
39755: MUL
39756: MUL
39757: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
39758: LD_VAR 0 6
39762: PPUSH
39763: CALL_OW 263
39767: PUSH
39768: LD_INT 2
39770: EQUAL
39771: IFFALSE 39822
// begin j := IsControledBy ( i ) ;
39773: LD_ADDR_VAR 0 7
39777: PUSH
39778: LD_VAR 0 6
39782: PPUSH
39783: CALL_OW 312
39787: ST_TO_ADDR
// if j then
39788: LD_VAR 0 7
39792: IFFALSE 39822
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
39794: LD_ADDR_VAR 0 10
39798: PUSH
39799: LD_VAR 0 10
39803: PUSH
39804: LD_VAR 0 7
39808: PPUSH
39809: LD_INT 3
39811: PPUSH
39812: CALL_OW 259
39816: PUSH
39817: LD_INT 3
39819: MUL
39820: MUL
39821: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
39822: LD_VAR 0 6
39826: PPUSH
39827: CALL_OW 264
39831: PUSH
39832: LD_INT 5
39834: PUSH
39835: LD_INT 6
39837: PUSH
39838: LD_INT 46
39840: PUSH
39841: LD_INT 44
39843: PUSH
39844: LD_INT 47
39846: PUSH
39847: LD_INT 45
39849: PUSH
39850: LD_INT 28
39852: PUSH
39853: LD_INT 7
39855: PUSH
39856: LD_INT 27
39858: PUSH
39859: LD_INT 29
39861: PUSH
39862: EMPTY
39863: LIST
39864: LIST
39865: LIST
39866: LIST
39867: LIST
39868: LIST
39869: LIST
39870: LIST
39871: LIST
39872: LIST
39873: IN
39874: PUSH
39875: LD_VAR 0 1
39879: PPUSH
39880: LD_INT 52
39882: PPUSH
39883: CALL_OW 321
39887: PUSH
39888: LD_INT 2
39890: EQUAL
39891: AND
39892: IFFALSE 39909
// bpoints := bpoints * 1.2 ;
39894: LD_ADDR_VAR 0 10
39898: PUSH
39899: LD_VAR 0 10
39903: PUSH
39904: LD_REAL  1.20000000000000E+0000
39907: MUL
39908: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
39909: LD_VAR 0 6
39913: PPUSH
39914: CALL_OW 264
39918: PUSH
39919: LD_INT 6
39921: PUSH
39922: LD_INT 46
39924: PUSH
39925: LD_INT 47
39927: PUSH
39928: EMPTY
39929: LIST
39930: LIST
39931: LIST
39932: IN
39933: IFFALSE 39950
// bpoints := bpoints * 1.2 ;
39935: LD_ADDR_VAR 0 10
39939: PUSH
39940: LD_VAR 0 10
39944: PUSH
39945: LD_REAL  1.20000000000000E+0000
39948: MUL
39949: ST_TO_ADDR
// end ; unit_building :
39950: GO 39964
39952: LD_INT 3
39954: DOUBLE
39955: EQUAL
39956: IFTRUE 39960
39958: GO 39963
39960: POP
// ; end ;
39961: GO 39964
39963: POP
// for j = 1 to 3 do
39964: LD_ADDR_VAR 0 7
39968: PUSH
39969: DOUBLE
39970: LD_INT 1
39972: DEC
39973: ST_TO_ADDR
39974: LD_INT 3
39976: PUSH
39977: FOR_TO
39978: IFFALSE 40031
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
39980: LD_ADDR_VAR 0 5
39984: PUSH
39985: LD_VAR 0 5
39989: PPUSH
39990: LD_VAR 0 7
39994: PPUSH
39995: LD_VAR 0 5
39999: PUSH
40000: LD_VAR 0 7
40004: ARRAY
40005: PUSH
40006: LD_VAR 0 9
40010: PUSH
40011: LD_VAR 0 7
40015: ARRAY
40016: PUSH
40017: LD_VAR 0 10
40021: MUL
40022: PLUS
40023: PPUSH
40024: CALL_OW 1
40028: ST_TO_ADDR
40029: GO 39977
40031: POP
40032: POP
// end ;
40033: GO 38512
40035: POP
40036: POP
// result := Replace ( result , 4 , tmp ) ;
40037: LD_ADDR_VAR 0 5
40041: PUSH
40042: LD_VAR 0 5
40046: PPUSH
40047: LD_INT 4
40049: PPUSH
40050: LD_VAR 0 8
40054: PPUSH
40055: CALL_OW 1
40059: ST_TO_ADDR
// end ;
40060: LD_VAR 0 5
40064: RET
// export function DangerAtRange ( unit , range ) ; begin
40065: LD_INT 0
40067: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
40068: LD_ADDR_VAR 0 3
40072: PUSH
40073: LD_VAR 0 1
40077: PPUSH
40078: CALL_OW 255
40082: PPUSH
40083: LD_VAR 0 1
40087: PPUSH
40088: CALL_OW 250
40092: PPUSH
40093: LD_VAR 0 1
40097: PPUSH
40098: CALL_OW 251
40102: PPUSH
40103: LD_VAR 0 2
40107: PPUSH
40108: CALL 38364 0 4
40112: ST_TO_ADDR
// end ;
40113: LD_VAR 0 3
40117: RET
// export function DangerInArea ( side , area ) ; begin
40118: LD_INT 0
40120: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
40121: LD_ADDR_VAR 0 3
40125: PUSH
40126: LD_VAR 0 2
40130: PPUSH
40131: LD_INT 81
40133: PUSH
40134: LD_VAR 0 1
40138: PUSH
40139: EMPTY
40140: LIST
40141: LIST
40142: PPUSH
40143: CALL_OW 70
40147: ST_TO_ADDR
// end ;
40148: LD_VAR 0 3
40152: RET
// export function IsExtension ( b ) ; begin
40153: LD_INT 0
40155: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
40156: LD_ADDR_VAR 0 2
40160: PUSH
40161: LD_VAR 0 1
40165: PUSH
40166: LD_INT 23
40168: PUSH
40169: LD_INT 20
40171: PUSH
40172: LD_INT 22
40174: PUSH
40175: LD_INT 17
40177: PUSH
40178: LD_INT 24
40180: PUSH
40181: LD_INT 21
40183: PUSH
40184: LD_INT 19
40186: PUSH
40187: LD_INT 16
40189: PUSH
40190: LD_INT 25
40192: PUSH
40193: LD_INT 18
40195: PUSH
40196: EMPTY
40197: LIST
40198: LIST
40199: LIST
40200: LIST
40201: LIST
40202: LIST
40203: LIST
40204: LIST
40205: LIST
40206: LIST
40207: IN
40208: ST_TO_ADDR
// end ;
40209: LD_VAR 0 2
40213: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
40214: LD_INT 0
40216: PPUSH
40217: PPUSH
40218: PPUSH
// result := [ ] ;
40219: LD_ADDR_VAR 0 4
40223: PUSH
40224: EMPTY
40225: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
40226: LD_ADDR_VAR 0 5
40230: PUSH
40231: LD_VAR 0 2
40235: PPUSH
40236: LD_INT 21
40238: PUSH
40239: LD_INT 3
40241: PUSH
40242: EMPTY
40243: LIST
40244: LIST
40245: PPUSH
40246: CALL_OW 70
40250: ST_TO_ADDR
// if not tmp then
40251: LD_VAR 0 5
40255: NOT
40256: IFFALSE 40260
// exit ;
40258: GO 40324
// if checkLink then
40260: LD_VAR 0 3
40264: IFFALSE 40314
// begin for i in tmp do
40266: LD_ADDR_VAR 0 6
40270: PUSH
40271: LD_VAR 0 5
40275: PUSH
40276: FOR_IN
40277: IFFALSE 40312
// if GetBase ( i ) <> base then
40279: LD_VAR 0 6
40283: PPUSH
40284: CALL_OW 274
40288: PUSH
40289: LD_VAR 0 1
40293: NONEQUAL
40294: IFFALSE 40310
// ComLinkToBase ( base , i ) ;
40296: LD_VAR 0 1
40300: PPUSH
40301: LD_VAR 0 6
40305: PPUSH
40306: CALL_OW 169
40310: GO 40276
40312: POP
40313: POP
// end ; result := tmp ;
40314: LD_ADDR_VAR 0 4
40318: PUSH
40319: LD_VAR 0 5
40323: ST_TO_ADDR
// end ;
40324: LD_VAR 0 4
40328: RET
// export function ComComplete ( units , b ) ; var i ; begin
40329: LD_INT 0
40331: PPUSH
40332: PPUSH
// if not units then
40333: LD_VAR 0 1
40337: NOT
40338: IFFALSE 40342
// exit ;
40340: GO 40432
// for i in units do
40342: LD_ADDR_VAR 0 4
40346: PUSH
40347: LD_VAR 0 1
40351: PUSH
40352: FOR_IN
40353: IFFALSE 40430
// if BuildingStatus ( b ) = bs_build then
40355: LD_VAR 0 2
40359: PPUSH
40360: CALL_OW 461
40364: PUSH
40365: LD_INT 1
40367: EQUAL
40368: IFFALSE 40428
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
40370: LD_VAR 0 4
40374: PPUSH
40375: LD_STRING h
40377: PUSH
40378: LD_VAR 0 2
40382: PPUSH
40383: CALL_OW 250
40387: PUSH
40388: LD_VAR 0 2
40392: PPUSH
40393: CALL_OW 251
40397: PUSH
40398: LD_VAR 0 2
40402: PUSH
40403: LD_INT 0
40405: PUSH
40406: LD_INT 0
40408: PUSH
40409: LD_INT 0
40411: PUSH
40412: EMPTY
40413: LIST
40414: LIST
40415: LIST
40416: LIST
40417: LIST
40418: LIST
40419: LIST
40420: PUSH
40421: EMPTY
40422: LIST
40423: PPUSH
40424: CALL_OW 446
40428: GO 40352
40430: POP
40431: POP
// end ;
40432: LD_VAR 0 3
40436: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
40437: LD_INT 0
40439: PPUSH
40440: PPUSH
40441: PPUSH
40442: PPUSH
40443: PPUSH
40444: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
40445: LD_VAR 0 1
40449: NOT
40450: PUSH
40451: LD_VAR 0 1
40455: PPUSH
40456: CALL_OW 263
40460: PUSH
40461: LD_INT 2
40463: NONEQUAL
40464: OR
40465: IFFALSE 40469
// exit ;
40467: GO 40785
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
40469: LD_ADDR_VAR 0 6
40473: PUSH
40474: LD_INT 22
40476: PUSH
40477: LD_VAR 0 1
40481: PPUSH
40482: CALL_OW 255
40486: PUSH
40487: EMPTY
40488: LIST
40489: LIST
40490: PUSH
40491: LD_INT 2
40493: PUSH
40494: LD_INT 30
40496: PUSH
40497: LD_INT 36
40499: PUSH
40500: EMPTY
40501: LIST
40502: LIST
40503: PUSH
40504: LD_INT 34
40506: PUSH
40507: LD_INT 31
40509: PUSH
40510: EMPTY
40511: LIST
40512: LIST
40513: PUSH
40514: EMPTY
40515: LIST
40516: LIST
40517: LIST
40518: PUSH
40519: EMPTY
40520: LIST
40521: LIST
40522: PPUSH
40523: CALL_OW 69
40527: ST_TO_ADDR
// if not tmp then
40528: LD_VAR 0 6
40532: NOT
40533: IFFALSE 40537
// exit ;
40535: GO 40785
// result := [ ] ;
40537: LD_ADDR_VAR 0 2
40541: PUSH
40542: EMPTY
40543: ST_TO_ADDR
// for i in tmp do
40544: LD_ADDR_VAR 0 3
40548: PUSH
40549: LD_VAR 0 6
40553: PUSH
40554: FOR_IN
40555: IFFALSE 40626
// begin t := UnitsInside ( i ) ;
40557: LD_ADDR_VAR 0 4
40561: PUSH
40562: LD_VAR 0 3
40566: PPUSH
40567: CALL_OW 313
40571: ST_TO_ADDR
// if t then
40572: LD_VAR 0 4
40576: IFFALSE 40624
// for j in t do
40578: LD_ADDR_VAR 0 7
40582: PUSH
40583: LD_VAR 0 4
40587: PUSH
40588: FOR_IN
40589: IFFALSE 40622
// result := Replace ( result , result + 1 , j ) ;
40591: LD_ADDR_VAR 0 2
40595: PUSH
40596: LD_VAR 0 2
40600: PPUSH
40601: LD_VAR 0 2
40605: PUSH
40606: LD_INT 1
40608: PLUS
40609: PPUSH
40610: LD_VAR 0 7
40614: PPUSH
40615: CALL_OW 1
40619: ST_TO_ADDR
40620: GO 40588
40622: POP
40623: POP
// end ;
40624: GO 40554
40626: POP
40627: POP
// if not result then
40628: LD_VAR 0 2
40632: NOT
40633: IFFALSE 40637
// exit ;
40635: GO 40785
// mech := result [ 1 ] ;
40637: LD_ADDR_VAR 0 5
40641: PUSH
40642: LD_VAR 0 2
40646: PUSH
40647: LD_INT 1
40649: ARRAY
40650: ST_TO_ADDR
// if result > 1 then
40651: LD_VAR 0 2
40655: PUSH
40656: LD_INT 1
40658: GREATER
40659: IFFALSE 40771
// begin for i = 2 to result do
40661: LD_ADDR_VAR 0 3
40665: PUSH
40666: DOUBLE
40667: LD_INT 2
40669: DEC
40670: ST_TO_ADDR
40671: LD_VAR 0 2
40675: PUSH
40676: FOR_TO
40677: IFFALSE 40769
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
40679: LD_ADDR_VAR 0 4
40683: PUSH
40684: LD_VAR 0 2
40688: PUSH
40689: LD_VAR 0 3
40693: ARRAY
40694: PPUSH
40695: LD_INT 3
40697: PPUSH
40698: CALL_OW 259
40702: PUSH
40703: LD_VAR 0 2
40707: PUSH
40708: LD_VAR 0 3
40712: ARRAY
40713: PPUSH
40714: CALL_OW 432
40718: MINUS
40719: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
40720: LD_VAR 0 4
40724: PUSH
40725: LD_VAR 0 5
40729: PPUSH
40730: LD_INT 3
40732: PPUSH
40733: CALL_OW 259
40737: PUSH
40738: LD_VAR 0 5
40742: PPUSH
40743: CALL_OW 432
40747: MINUS
40748: GREATEREQUAL
40749: IFFALSE 40767
// mech := result [ i ] ;
40751: LD_ADDR_VAR 0 5
40755: PUSH
40756: LD_VAR 0 2
40760: PUSH
40761: LD_VAR 0 3
40765: ARRAY
40766: ST_TO_ADDR
// end ;
40767: GO 40676
40769: POP
40770: POP
// end ; ComLinkTo ( vehicle , mech ) ;
40771: LD_VAR 0 1
40775: PPUSH
40776: LD_VAR 0 5
40780: PPUSH
40781: CALL_OW 135
// end ;
40785: LD_VAR 0 2
40789: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
40790: LD_INT 0
40792: PPUSH
40793: PPUSH
40794: PPUSH
40795: PPUSH
40796: PPUSH
40797: PPUSH
40798: PPUSH
40799: PPUSH
40800: PPUSH
40801: PPUSH
40802: PPUSH
40803: PPUSH
40804: PPUSH
// result := [ ] ;
40805: LD_ADDR_VAR 0 7
40809: PUSH
40810: EMPTY
40811: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
40812: LD_VAR 0 1
40816: PPUSH
40817: CALL_OW 266
40821: PUSH
40822: LD_INT 0
40824: PUSH
40825: LD_INT 1
40827: PUSH
40828: EMPTY
40829: LIST
40830: LIST
40831: IN
40832: NOT
40833: IFFALSE 40837
// exit ;
40835: GO 42471
// if name then
40837: LD_VAR 0 3
40841: IFFALSE 40857
// SetBName ( base_dep , name ) ;
40843: LD_VAR 0 1
40847: PPUSH
40848: LD_VAR 0 3
40852: PPUSH
40853: CALL_OW 500
// base := GetBase ( base_dep ) ;
40857: LD_ADDR_VAR 0 15
40861: PUSH
40862: LD_VAR 0 1
40866: PPUSH
40867: CALL_OW 274
40871: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
40872: LD_ADDR_VAR 0 16
40876: PUSH
40877: LD_VAR 0 1
40881: PPUSH
40882: CALL_OW 255
40886: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
40887: LD_ADDR_VAR 0 17
40891: PUSH
40892: LD_VAR 0 1
40896: PPUSH
40897: CALL_OW 248
40901: ST_TO_ADDR
// if sources then
40902: LD_VAR 0 5
40906: IFFALSE 40953
// for i = 1 to 3 do
40908: LD_ADDR_VAR 0 8
40912: PUSH
40913: DOUBLE
40914: LD_INT 1
40916: DEC
40917: ST_TO_ADDR
40918: LD_INT 3
40920: PUSH
40921: FOR_TO
40922: IFFALSE 40951
// AddResourceType ( base , i , sources [ i ] ) ;
40924: LD_VAR 0 15
40928: PPUSH
40929: LD_VAR 0 8
40933: PPUSH
40934: LD_VAR 0 5
40938: PUSH
40939: LD_VAR 0 8
40943: ARRAY
40944: PPUSH
40945: CALL_OW 276
40949: GO 40921
40951: POP
40952: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
40953: LD_ADDR_VAR 0 18
40957: PUSH
40958: LD_VAR 0 15
40962: PPUSH
40963: LD_VAR 0 2
40967: PPUSH
40968: LD_INT 1
40970: PPUSH
40971: CALL 40214 0 3
40975: ST_TO_ADDR
// InitHc ;
40976: CALL_OW 19
// InitUc ;
40980: CALL_OW 18
// uc_side := side ;
40984: LD_ADDR_OWVAR 20
40988: PUSH
40989: LD_VAR 0 16
40993: ST_TO_ADDR
// uc_nation := nation ;
40994: LD_ADDR_OWVAR 21
40998: PUSH
40999: LD_VAR 0 17
41003: ST_TO_ADDR
// if buildings then
41004: LD_VAR 0 18
41008: IFFALSE 42330
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
41010: LD_ADDR_VAR 0 19
41014: PUSH
41015: LD_VAR 0 18
41019: PPUSH
41020: LD_INT 2
41022: PUSH
41023: LD_INT 30
41025: PUSH
41026: LD_INT 29
41028: PUSH
41029: EMPTY
41030: LIST
41031: LIST
41032: PUSH
41033: LD_INT 30
41035: PUSH
41036: LD_INT 30
41038: PUSH
41039: EMPTY
41040: LIST
41041: LIST
41042: PUSH
41043: EMPTY
41044: LIST
41045: LIST
41046: LIST
41047: PPUSH
41048: CALL_OW 72
41052: ST_TO_ADDR
// if tmp then
41053: LD_VAR 0 19
41057: IFFALSE 41105
// for i in tmp do
41059: LD_ADDR_VAR 0 8
41063: PUSH
41064: LD_VAR 0 19
41068: PUSH
41069: FOR_IN
41070: IFFALSE 41103
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
41072: LD_VAR 0 8
41076: PPUSH
41077: CALL_OW 250
41081: PPUSH
41082: LD_VAR 0 8
41086: PPUSH
41087: CALL_OW 251
41091: PPUSH
41092: LD_VAR 0 16
41096: PPUSH
41097: CALL_OW 441
41101: GO 41069
41103: POP
41104: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
41105: LD_VAR 0 18
41109: PPUSH
41110: LD_INT 2
41112: PUSH
41113: LD_INT 30
41115: PUSH
41116: LD_INT 32
41118: PUSH
41119: EMPTY
41120: LIST
41121: LIST
41122: PUSH
41123: LD_INT 30
41125: PUSH
41126: LD_INT 33
41128: PUSH
41129: EMPTY
41130: LIST
41131: LIST
41132: PUSH
41133: EMPTY
41134: LIST
41135: LIST
41136: LIST
41137: PPUSH
41138: CALL_OW 72
41142: IFFALSE 41230
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
41144: LD_ADDR_VAR 0 8
41148: PUSH
41149: LD_VAR 0 18
41153: PPUSH
41154: LD_INT 2
41156: PUSH
41157: LD_INT 30
41159: PUSH
41160: LD_INT 32
41162: PUSH
41163: EMPTY
41164: LIST
41165: LIST
41166: PUSH
41167: LD_INT 30
41169: PUSH
41170: LD_INT 33
41172: PUSH
41173: EMPTY
41174: LIST
41175: LIST
41176: PUSH
41177: EMPTY
41178: LIST
41179: LIST
41180: LIST
41181: PPUSH
41182: CALL_OW 72
41186: PUSH
41187: FOR_IN
41188: IFFALSE 41228
// begin if not GetBWeapon ( i ) then
41190: LD_VAR 0 8
41194: PPUSH
41195: CALL_OW 269
41199: NOT
41200: IFFALSE 41226
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
41202: LD_VAR 0 8
41206: PPUSH
41207: LD_VAR 0 8
41211: PPUSH
41212: LD_VAR 0 2
41216: PPUSH
41217: CALL 42476 0 2
41221: PPUSH
41222: CALL_OW 431
// end ;
41226: GO 41187
41228: POP
41229: POP
// end ; for i = 1 to personel do
41230: LD_ADDR_VAR 0 8
41234: PUSH
41235: DOUBLE
41236: LD_INT 1
41238: DEC
41239: ST_TO_ADDR
41240: LD_VAR 0 6
41244: PUSH
41245: FOR_TO
41246: IFFALSE 42310
// begin if i > 4 then
41248: LD_VAR 0 8
41252: PUSH
41253: LD_INT 4
41255: GREATER
41256: IFFALSE 41260
// break ;
41258: GO 42310
// case i of 1 :
41260: LD_VAR 0 8
41264: PUSH
41265: LD_INT 1
41267: DOUBLE
41268: EQUAL
41269: IFTRUE 41273
41271: GO 41353
41273: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
41274: LD_ADDR_VAR 0 12
41278: PUSH
41279: LD_VAR 0 18
41283: PPUSH
41284: LD_INT 22
41286: PUSH
41287: LD_VAR 0 16
41291: PUSH
41292: EMPTY
41293: LIST
41294: LIST
41295: PUSH
41296: LD_INT 58
41298: PUSH
41299: EMPTY
41300: LIST
41301: PUSH
41302: LD_INT 2
41304: PUSH
41305: LD_INT 30
41307: PUSH
41308: LD_INT 32
41310: PUSH
41311: EMPTY
41312: LIST
41313: LIST
41314: PUSH
41315: LD_INT 30
41317: PUSH
41318: LD_INT 4
41320: PUSH
41321: EMPTY
41322: LIST
41323: LIST
41324: PUSH
41325: LD_INT 30
41327: PUSH
41328: LD_INT 5
41330: PUSH
41331: EMPTY
41332: LIST
41333: LIST
41334: PUSH
41335: EMPTY
41336: LIST
41337: LIST
41338: LIST
41339: LIST
41340: PUSH
41341: EMPTY
41342: LIST
41343: LIST
41344: LIST
41345: PPUSH
41346: CALL_OW 72
41350: ST_TO_ADDR
41351: GO 41575
41353: LD_INT 2
41355: DOUBLE
41356: EQUAL
41357: IFTRUE 41361
41359: GO 41423
41361: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
41362: LD_ADDR_VAR 0 12
41366: PUSH
41367: LD_VAR 0 18
41371: PPUSH
41372: LD_INT 22
41374: PUSH
41375: LD_VAR 0 16
41379: PUSH
41380: EMPTY
41381: LIST
41382: LIST
41383: PUSH
41384: LD_INT 2
41386: PUSH
41387: LD_INT 30
41389: PUSH
41390: LD_INT 0
41392: PUSH
41393: EMPTY
41394: LIST
41395: LIST
41396: PUSH
41397: LD_INT 30
41399: PUSH
41400: LD_INT 1
41402: PUSH
41403: EMPTY
41404: LIST
41405: LIST
41406: PUSH
41407: EMPTY
41408: LIST
41409: LIST
41410: LIST
41411: PUSH
41412: EMPTY
41413: LIST
41414: LIST
41415: PPUSH
41416: CALL_OW 72
41420: ST_TO_ADDR
41421: GO 41575
41423: LD_INT 3
41425: DOUBLE
41426: EQUAL
41427: IFTRUE 41431
41429: GO 41493
41431: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
41432: LD_ADDR_VAR 0 12
41436: PUSH
41437: LD_VAR 0 18
41441: PPUSH
41442: LD_INT 22
41444: PUSH
41445: LD_VAR 0 16
41449: PUSH
41450: EMPTY
41451: LIST
41452: LIST
41453: PUSH
41454: LD_INT 2
41456: PUSH
41457: LD_INT 30
41459: PUSH
41460: LD_INT 2
41462: PUSH
41463: EMPTY
41464: LIST
41465: LIST
41466: PUSH
41467: LD_INT 30
41469: PUSH
41470: LD_INT 3
41472: PUSH
41473: EMPTY
41474: LIST
41475: LIST
41476: PUSH
41477: EMPTY
41478: LIST
41479: LIST
41480: LIST
41481: PUSH
41482: EMPTY
41483: LIST
41484: LIST
41485: PPUSH
41486: CALL_OW 72
41490: ST_TO_ADDR
41491: GO 41575
41493: LD_INT 4
41495: DOUBLE
41496: EQUAL
41497: IFTRUE 41501
41499: GO 41574
41501: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
41502: LD_ADDR_VAR 0 12
41506: PUSH
41507: LD_VAR 0 18
41511: PPUSH
41512: LD_INT 22
41514: PUSH
41515: LD_VAR 0 16
41519: PUSH
41520: EMPTY
41521: LIST
41522: LIST
41523: PUSH
41524: LD_INT 2
41526: PUSH
41527: LD_INT 30
41529: PUSH
41530: LD_INT 6
41532: PUSH
41533: EMPTY
41534: LIST
41535: LIST
41536: PUSH
41537: LD_INT 30
41539: PUSH
41540: LD_INT 7
41542: PUSH
41543: EMPTY
41544: LIST
41545: LIST
41546: PUSH
41547: LD_INT 30
41549: PUSH
41550: LD_INT 8
41552: PUSH
41553: EMPTY
41554: LIST
41555: LIST
41556: PUSH
41557: EMPTY
41558: LIST
41559: LIST
41560: LIST
41561: LIST
41562: PUSH
41563: EMPTY
41564: LIST
41565: LIST
41566: PPUSH
41567: CALL_OW 72
41571: ST_TO_ADDR
41572: GO 41575
41574: POP
// if i = 1 then
41575: LD_VAR 0 8
41579: PUSH
41580: LD_INT 1
41582: EQUAL
41583: IFFALSE 41694
// begin tmp := [ ] ;
41585: LD_ADDR_VAR 0 19
41589: PUSH
41590: EMPTY
41591: ST_TO_ADDR
// for j in f do
41592: LD_ADDR_VAR 0 9
41596: PUSH
41597: LD_VAR 0 12
41601: PUSH
41602: FOR_IN
41603: IFFALSE 41676
// if GetBType ( j ) = b_bunker then
41605: LD_VAR 0 9
41609: PPUSH
41610: CALL_OW 266
41614: PUSH
41615: LD_INT 32
41617: EQUAL
41618: IFFALSE 41645
// tmp := Insert ( tmp , 1 , j ) else
41620: LD_ADDR_VAR 0 19
41624: PUSH
41625: LD_VAR 0 19
41629: PPUSH
41630: LD_INT 1
41632: PPUSH
41633: LD_VAR 0 9
41637: PPUSH
41638: CALL_OW 2
41642: ST_TO_ADDR
41643: GO 41674
// tmp := Insert ( tmp , tmp + 1 , j ) ;
41645: LD_ADDR_VAR 0 19
41649: PUSH
41650: LD_VAR 0 19
41654: PPUSH
41655: LD_VAR 0 19
41659: PUSH
41660: LD_INT 1
41662: PLUS
41663: PPUSH
41664: LD_VAR 0 9
41668: PPUSH
41669: CALL_OW 2
41673: ST_TO_ADDR
41674: GO 41602
41676: POP
41677: POP
// if tmp then
41678: LD_VAR 0 19
41682: IFFALSE 41694
// f := tmp ;
41684: LD_ADDR_VAR 0 12
41688: PUSH
41689: LD_VAR 0 19
41693: ST_TO_ADDR
// end ; x := personel [ i ] ;
41694: LD_ADDR_VAR 0 13
41698: PUSH
41699: LD_VAR 0 6
41703: PUSH
41704: LD_VAR 0 8
41708: ARRAY
41709: ST_TO_ADDR
// if x = - 1 then
41710: LD_VAR 0 13
41714: PUSH
41715: LD_INT 1
41717: NEG
41718: EQUAL
41719: IFFALSE 41928
// begin for j in f do
41721: LD_ADDR_VAR 0 9
41725: PUSH
41726: LD_VAR 0 12
41730: PUSH
41731: FOR_IN
41732: IFFALSE 41924
// repeat InitHc ;
41734: CALL_OW 19
// if GetBType ( j ) = b_barracks then
41738: LD_VAR 0 9
41742: PPUSH
41743: CALL_OW 266
41747: PUSH
41748: LD_INT 5
41750: EQUAL
41751: IFFALSE 41821
// begin if UnitsInside ( j ) < 3 then
41753: LD_VAR 0 9
41757: PPUSH
41758: CALL_OW 313
41762: PUSH
41763: LD_INT 3
41765: LESS
41766: IFFALSE 41802
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
41768: LD_INT 0
41770: PPUSH
41771: LD_INT 5
41773: PUSH
41774: LD_INT 8
41776: PUSH
41777: LD_INT 9
41779: PUSH
41780: EMPTY
41781: LIST
41782: LIST
41783: LIST
41784: PUSH
41785: LD_VAR 0 17
41789: ARRAY
41790: PPUSH
41791: LD_VAR 0 4
41795: PPUSH
41796: CALL_OW 380
41800: GO 41819
// PrepareHuman ( false , i , skill ) ;
41802: LD_INT 0
41804: PPUSH
41805: LD_VAR 0 8
41809: PPUSH
41810: LD_VAR 0 4
41814: PPUSH
41815: CALL_OW 380
// end else
41819: GO 41838
// PrepareHuman ( false , i , skill ) ;
41821: LD_INT 0
41823: PPUSH
41824: LD_VAR 0 8
41828: PPUSH
41829: LD_VAR 0 4
41833: PPUSH
41834: CALL_OW 380
// un := CreateHuman ;
41838: LD_ADDR_VAR 0 14
41842: PUSH
41843: CALL_OW 44
41847: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41848: LD_ADDR_VAR 0 7
41852: PUSH
41853: LD_VAR 0 7
41857: PPUSH
41858: LD_INT 1
41860: PPUSH
41861: LD_VAR 0 14
41865: PPUSH
41866: CALL_OW 2
41870: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
41871: LD_VAR 0 14
41875: PPUSH
41876: LD_VAR 0 9
41880: PPUSH
41881: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
41885: LD_VAR 0 9
41889: PPUSH
41890: CALL_OW 313
41894: PUSH
41895: LD_INT 6
41897: EQUAL
41898: PUSH
41899: LD_VAR 0 9
41903: PPUSH
41904: CALL_OW 266
41908: PUSH
41909: LD_INT 32
41911: PUSH
41912: LD_INT 31
41914: PUSH
41915: EMPTY
41916: LIST
41917: LIST
41918: IN
41919: OR
41920: IFFALSE 41734
41922: GO 41731
41924: POP
41925: POP
// end else
41926: GO 42308
// for j = 1 to x do
41928: LD_ADDR_VAR 0 9
41932: PUSH
41933: DOUBLE
41934: LD_INT 1
41936: DEC
41937: ST_TO_ADDR
41938: LD_VAR 0 13
41942: PUSH
41943: FOR_TO
41944: IFFALSE 42306
// begin InitHc ;
41946: CALL_OW 19
// if not f then
41950: LD_VAR 0 12
41954: NOT
41955: IFFALSE 42044
// begin PrepareHuman ( false , i , skill ) ;
41957: LD_INT 0
41959: PPUSH
41960: LD_VAR 0 8
41964: PPUSH
41965: LD_VAR 0 4
41969: PPUSH
41970: CALL_OW 380
// un := CreateHuman ;
41974: LD_ADDR_VAR 0 14
41978: PUSH
41979: CALL_OW 44
41983: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41984: LD_ADDR_VAR 0 7
41988: PUSH
41989: LD_VAR 0 7
41993: PPUSH
41994: LD_INT 1
41996: PPUSH
41997: LD_VAR 0 14
42001: PPUSH
42002: CALL_OW 2
42006: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
42007: LD_VAR 0 14
42011: PPUSH
42012: LD_VAR 0 1
42016: PPUSH
42017: CALL_OW 250
42021: PPUSH
42022: LD_VAR 0 1
42026: PPUSH
42027: CALL_OW 251
42031: PPUSH
42032: LD_INT 10
42034: PPUSH
42035: LD_INT 0
42037: PPUSH
42038: CALL_OW 50
// continue ;
42042: GO 41943
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
42044: LD_VAR 0 12
42048: PUSH
42049: LD_INT 1
42051: ARRAY
42052: PPUSH
42053: CALL_OW 313
42057: PUSH
42058: LD_VAR 0 12
42062: PUSH
42063: LD_INT 1
42065: ARRAY
42066: PPUSH
42067: CALL_OW 266
42071: PUSH
42072: LD_INT 32
42074: PUSH
42075: LD_INT 31
42077: PUSH
42078: EMPTY
42079: LIST
42080: LIST
42081: IN
42082: AND
42083: PUSH
42084: LD_VAR 0 12
42088: PUSH
42089: LD_INT 1
42091: ARRAY
42092: PPUSH
42093: CALL_OW 313
42097: PUSH
42098: LD_INT 6
42100: EQUAL
42101: OR
42102: IFFALSE 42122
// f := Delete ( f , 1 ) ;
42104: LD_ADDR_VAR 0 12
42108: PUSH
42109: LD_VAR 0 12
42113: PPUSH
42114: LD_INT 1
42116: PPUSH
42117: CALL_OW 3
42121: ST_TO_ADDR
// if not f then
42122: LD_VAR 0 12
42126: NOT
42127: IFFALSE 42145
// begin x := x + 2 ;
42129: LD_ADDR_VAR 0 13
42133: PUSH
42134: LD_VAR 0 13
42138: PUSH
42139: LD_INT 2
42141: PLUS
42142: ST_TO_ADDR
// continue ;
42143: GO 41943
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
42145: LD_VAR 0 12
42149: PUSH
42150: LD_INT 1
42152: ARRAY
42153: PPUSH
42154: CALL_OW 266
42158: PUSH
42159: LD_INT 5
42161: EQUAL
42162: IFFALSE 42236
// begin if UnitsInside ( f [ 1 ] ) < 3 then
42164: LD_VAR 0 12
42168: PUSH
42169: LD_INT 1
42171: ARRAY
42172: PPUSH
42173: CALL_OW 313
42177: PUSH
42178: LD_INT 3
42180: LESS
42181: IFFALSE 42217
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
42183: LD_INT 0
42185: PPUSH
42186: LD_INT 5
42188: PUSH
42189: LD_INT 8
42191: PUSH
42192: LD_INT 9
42194: PUSH
42195: EMPTY
42196: LIST
42197: LIST
42198: LIST
42199: PUSH
42200: LD_VAR 0 17
42204: ARRAY
42205: PPUSH
42206: LD_VAR 0 4
42210: PPUSH
42211: CALL_OW 380
42215: GO 42234
// PrepareHuman ( false , i , skill ) ;
42217: LD_INT 0
42219: PPUSH
42220: LD_VAR 0 8
42224: PPUSH
42225: LD_VAR 0 4
42229: PPUSH
42230: CALL_OW 380
// end else
42234: GO 42253
// PrepareHuman ( false , i , skill ) ;
42236: LD_INT 0
42238: PPUSH
42239: LD_VAR 0 8
42243: PPUSH
42244: LD_VAR 0 4
42248: PPUSH
42249: CALL_OW 380
// un := CreateHuman ;
42253: LD_ADDR_VAR 0 14
42257: PUSH
42258: CALL_OW 44
42262: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
42263: LD_ADDR_VAR 0 7
42267: PUSH
42268: LD_VAR 0 7
42272: PPUSH
42273: LD_INT 1
42275: PPUSH
42276: LD_VAR 0 14
42280: PPUSH
42281: CALL_OW 2
42285: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
42286: LD_VAR 0 14
42290: PPUSH
42291: LD_VAR 0 12
42295: PUSH
42296: LD_INT 1
42298: ARRAY
42299: PPUSH
42300: CALL_OW 52
// end ;
42304: GO 41943
42306: POP
42307: POP
// end ;
42308: GO 41245
42310: POP
42311: POP
// result := result ^ buildings ;
42312: LD_ADDR_VAR 0 7
42316: PUSH
42317: LD_VAR 0 7
42321: PUSH
42322: LD_VAR 0 18
42326: ADD
42327: ST_TO_ADDR
// end else
42328: GO 42471
// begin for i = 1 to personel do
42330: LD_ADDR_VAR 0 8
42334: PUSH
42335: DOUBLE
42336: LD_INT 1
42338: DEC
42339: ST_TO_ADDR
42340: LD_VAR 0 6
42344: PUSH
42345: FOR_TO
42346: IFFALSE 42469
// begin if i > 4 then
42348: LD_VAR 0 8
42352: PUSH
42353: LD_INT 4
42355: GREATER
42356: IFFALSE 42360
// break ;
42358: GO 42469
// x := personel [ i ] ;
42360: LD_ADDR_VAR 0 13
42364: PUSH
42365: LD_VAR 0 6
42369: PUSH
42370: LD_VAR 0 8
42374: ARRAY
42375: ST_TO_ADDR
// if x = - 1 then
42376: LD_VAR 0 13
42380: PUSH
42381: LD_INT 1
42383: NEG
42384: EQUAL
42385: IFFALSE 42389
// continue ;
42387: GO 42345
// PrepareHuman ( false , i , skill ) ;
42389: LD_INT 0
42391: PPUSH
42392: LD_VAR 0 8
42396: PPUSH
42397: LD_VAR 0 4
42401: PPUSH
42402: CALL_OW 380
// un := CreateHuman ;
42406: LD_ADDR_VAR 0 14
42410: PUSH
42411: CALL_OW 44
42415: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
42416: LD_VAR 0 14
42420: PPUSH
42421: LD_VAR 0 1
42425: PPUSH
42426: CALL_OW 250
42430: PPUSH
42431: LD_VAR 0 1
42435: PPUSH
42436: CALL_OW 251
42440: PPUSH
42441: LD_INT 10
42443: PPUSH
42444: LD_INT 0
42446: PPUSH
42447: CALL_OW 50
// result := result ^ un ;
42451: LD_ADDR_VAR 0 7
42455: PUSH
42456: LD_VAR 0 7
42460: PUSH
42461: LD_VAR 0 14
42465: ADD
42466: ST_TO_ADDR
// end ;
42467: GO 42345
42469: POP
42470: POP
// end ; end ;
42471: LD_VAR 0 7
42475: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
42476: LD_INT 0
42478: PPUSH
42479: PPUSH
42480: PPUSH
42481: PPUSH
42482: PPUSH
42483: PPUSH
42484: PPUSH
42485: PPUSH
42486: PPUSH
42487: PPUSH
42488: PPUSH
42489: PPUSH
42490: PPUSH
42491: PPUSH
42492: PPUSH
42493: PPUSH
// result := false ;
42494: LD_ADDR_VAR 0 3
42498: PUSH
42499: LD_INT 0
42501: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
42502: LD_VAR 0 1
42506: NOT
42507: PUSH
42508: LD_VAR 0 1
42512: PPUSH
42513: CALL_OW 266
42517: PUSH
42518: LD_INT 32
42520: PUSH
42521: LD_INT 33
42523: PUSH
42524: EMPTY
42525: LIST
42526: LIST
42527: IN
42528: NOT
42529: OR
42530: IFFALSE 42534
// exit ;
42532: GO 43643
// nat := GetNation ( tower ) ;
42534: LD_ADDR_VAR 0 12
42538: PUSH
42539: LD_VAR 0 1
42543: PPUSH
42544: CALL_OW 248
42548: ST_TO_ADDR
// side := GetSide ( tower ) ;
42549: LD_ADDR_VAR 0 16
42553: PUSH
42554: LD_VAR 0 1
42558: PPUSH
42559: CALL_OW 255
42563: ST_TO_ADDR
// x := GetX ( tower ) ;
42564: LD_ADDR_VAR 0 10
42568: PUSH
42569: LD_VAR 0 1
42573: PPUSH
42574: CALL_OW 250
42578: ST_TO_ADDR
// y := GetY ( tower ) ;
42579: LD_ADDR_VAR 0 11
42583: PUSH
42584: LD_VAR 0 1
42588: PPUSH
42589: CALL_OW 251
42593: ST_TO_ADDR
// if not x or not y then
42594: LD_VAR 0 10
42598: NOT
42599: PUSH
42600: LD_VAR 0 11
42604: NOT
42605: OR
42606: IFFALSE 42610
// exit ;
42608: GO 43643
// weapon := 0 ;
42610: LD_ADDR_VAR 0 18
42614: PUSH
42615: LD_INT 0
42617: ST_TO_ADDR
// fac_list := [ ] ;
42618: LD_ADDR_VAR 0 17
42622: PUSH
42623: EMPTY
42624: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
42625: LD_ADDR_VAR 0 6
42629: PUSH
42630: LD_VAR 0 1
42634: PPUSH
42635: CALL_OW 274
42639: PPUSH
42640: LD_VAR 0 2
42644: PPUSH
42645: LD_INT 0
42647: PPUSH
42648: CALL 40214 0 3
42652: PPUSH
42653: LD_INT 30
42655: PUSH
42656: LD_INT 3
42658: PUSH
42659: EMPTY
42660: LIST
42661: LIST
42662: PPUSH
42663: CALL_OW 72
42667: ST_TO_ADDR
// if not factories then
42668: LD_VAR 0 6
42672: NOT
42673: IFFALSE 42677
// exit ;
42675: GO 43643
// for i in factories do
42677: LD_ADDR_VAR 0 8
42681: PUSH
42682: LD_VAR 0 6
42686: PUSH
42687: FOR_IN
42688: IFFALSE 42713
// fac_list := fac_list union AvailableWeaponList ( i ) ;
42690: LD_ADDR_VAR 0 17
42694: PUSH
42695: LD_VAR 0 17
42699: PUSH
42700: LD_VAR 0 8
42704: PPUSH
42705: CALL_OW 478
42709: UNION
42710: ST_TO_ADDR
42711: GO 42687
42713: POP
42714: POP
// if not fac_list then
42715: LD_VAR 0 17
42719: NOT
42720: IFFALSE 42724
// exit ;
42722: GO 43643
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
42724: LD_ADDR_VAR 0 5
42728: PUSH
42729: LD_INT 4
42731: PUSH
42732: LD_INT 5
42734: PUSH
42735: LD_INT 9
42737: PUSH
42738: LD_INT 10
42740: PUSH
42741: LD_INT 6
42743: PUSH
42744: LD_INT 7
42746: PUSH
42747: LD_INT 11
42749: PUSH
42750: EMPTY
42751: LIST
42752: LIST
42753: LIST
42754: LIST
42755: LIST
42756: LIST
42757: LIST
42758: PUSH
42759: LD_INT 27
42761: PUSH
42762: LD_INT 28
42764: PUSH
42765: LD_INT 26
42767: PUSH
42768: LD_INT 30
42770: PUSH
42771: EMPTY
42772: LIST
42773: LIST
42774: LIST
42775: LIST
42776: PUSH
42777: LD_INT 43
42779: PUSH
42780: LD_INT 44
42782: PUSH
42783: LD_INT 46
42785: PUSH
42786: LD_INT 45
42788: PUSH
42789: LD_INT 47
42791: PUSH
42792: LD_INT 49
42794: PUSH
42795: EMPTY
42796: LIST
42797: LIST
42798: LIST
42799: LIST
42800: LIST
42801: LIST
42802: PUSH
42803: EMPTY
42804: LIST
42805: LIST
42806: LIST
42807: PUSH
42808: LD_VAR 0 12
42812: ARRAY
42813: ST_TO_ADDR
// list := list isect fac_list ;
42814: LD_ADDR_VAR 0 5
42818: PUSH
42819: LD_VAR 0 5
42823: PUSH
42824: LD_VAR 0 17
42828: ISECT
42829: ST_TO_ADDR
// if not list then
42830: LD_VAR 0 5
42834: NOT
42835: IFFALSE 42839
// exit ;
42837: GO 43643
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
42839: LD_VAR 0 12
42843: PUSH
42844: LD_INT 3
42846: EQUAL
42847: PUSH
42848: LD_INT 49
42850: PUSH
42851: LD_VAR 0 5
42855: IN
42856: AND
42857: PUSH
42858: LD_INT 31
42860: PPUSH
42861: LD_VAR 0 16
42865: PPUSH
42866: CALL_OW 321
42870: PUSH
42871: LD_INT 2
42873: EQUAL
42874: AND
42875: IFFALSE 42935
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
42877: LD_INT 22
42879: PUSH
42880: LD_VAR 0 16
42884: PUSH
42885: EMPTY
42886: LIST
42887: LIST
42888: PUSH
42889: LD_INT 35
42891: PUSH
42892: LD_INT 49
42894: PUSH
42895: EMPTY
42896: LIST
42897: LIST
42898: PUSH
42899: LD_INT 91
42901: PUSH
42902: LD_VAR 0 1
42906: PUSH
42907: LD_INT 10
42909: PUSH
42910: EMPTY
42911: LIST
42912: LIST
42913: LIST
42914: PUSH
42915: EMPTY
42916: LIST
42917: LIST
42918: LIST
42919: PPUSH
42920: CALL_OW 69
42924: NOT
42925: IFFALSE 42935
// weapon := ru_time_lapser ;
42927: LD_ADDR_VAR 0 18
42931: PUSH
42932: LD_INT 49
42934: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
42935: LD_VAR 0 12
42939: PUSH
42940: LD_INT 1
42942: PUSH
42943: LD_INT 2
42945: PUSH
42946: EMPTY
42947: LIST
42948: LIST
42949: IN
42950: PUSH
42951: LD_INT 11
42953: PUSH
42954: LD_VAR 0 5
42958: IN
42959: PUSH
42960: LD_INT 30
42962: PUSH
42963: LD_VAR 0 5
42967: IN
42968: OR
42969: AND
42970: PUSH
42971: LD_INT 6
42973: PPUSH
42974: LD_VAR 0 16
42978: PPUSH
42979: CALL_OW 321
42983: PUSH
42984: LD_INT 2
42986: EQUAL
42987: AND
42988: IFFALSE 43153
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
42990: LD_INT 22
42992: PUSH
42993: LD_VAR 0 16
42997: PUSH
42998: EMPTY
42999: LIST
43000: LIST
43001: PUSH
43002: LD_INT 2
43004: PUSH
43005: LD_INT 35
43007: PUSH
43008: LD_INT 11
43010: PUSH
43011: EMPTY
43012: LIST
43013: LIST
43014: PUSH
43015: LD_INT 35
43017: PUSH
43018: LD_INT 30
43020: PUSH
43021: EMPTY
43022: LIST
43023: LIST
43024: PUSH
43025: EMPTY
43026: LIST
43027: LIST
43028: LIST
43029: PUSH
43030: LD_INT 91
43032: PUSH
43033: LD_VAR 0 1
43037: PUSH
43038: LD_INT 18
43040: PUSH
43041: EMPTY
43042: LIST
43043: LIST
43044: LIST
43045: PUSH
43046: EMPTY
43047: LIST
43048: LIST
43049: LIST
43050: PPUSH
43051: CALL_OW 69
43055: NOT
43056: PUSH
43057: LD_INT 22
43059: PUSH
43060: LD_VAR 0 16
43064: PUSH
43065: EMPTY
43066: LIST
43067: LIST
43068: PUSH
43069: LD_INT 2
43071: PUSH
43072: LD_INT 30
43074: PUSH
43075: LD_INT 32
43077: PUSH
43078: EMPTY
43079: LIST
43080: LIST
43081: PUSH
43082: LD_INT 30
43084: PUSH
43085: LD_INT 33
43087: PUSH
43088: EMPTY
43089: LIST
43090: LIST
43091: PUSH
43092: EMPTY
43093: LIST
43094: LIST
43095: LIST
43096: PUSH
43097: LD_INT 91
43099: PUSH
43100: LD_VAR 0 1
43104: PUSH
43105: LD_INT 12
43107: PUSH
43108: EMPTY
43109: LIST
43110: LIST
43111: LIST
43112: PUSH
43113: EMPTY
43114: LIST
43115: LIST
43116: LIST
43117: PUSH
43118: EMPTY
43119: LIST
43120: PPUSH
43121: CALL_OW 69
43125: PUSH
43126: LD_INT 2
43128: GREATER
43129: AND
43130: IFFALSE 43153
// weapon := [ us_radar , ar_radar ] [ nat ] ;
43132: LD_ADDR_VAR 0 18
43136: PUSH
43137: LD_INT 11
43139: PUSH
43140: LD_INT 30
43142: PUSH
43143: EMPTY
43144: LIST
43145: LIST
43146: PUSH
43147: LD_VAR 0 12
43151: ARRAY
43152: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
43153: LD_VAR 0 18
43157: NOT
43158: PUSH
43159: LD_INT 40
43161: PPUSH
43162: LD_VAR 0 16
43166: PPUSH
43167: CALL_OW 321
43171: PUSH
43172: LD_INT 2
43174: EQUAL
43175: AND
43176: PUSH
43177: LD_INT 7
43179: PUSH
43180: LD_VAR 0 5
43184: IN
43185: PUSH
43186: LD_INT 28
43188: PUSH
43189: LD_VAR 0 5
43193: IN
43194: OR
43195: PUSH
43196: LD_INT 45
43198: PUSH
43199: LD_VAR 0 5
43203: IN
43204: OR
43205: AND
43206: IFFALSE 43460
// begin hex := GetHexInfo ( x , y ) ;
43208: LD_ADDR_VAR 0 4
43212: PUSH
43213: LD_VAR 0 10
43217: PPUSH
43218: LD_VAR 0 11
43222: PPUSH
43223: CALL_OW 546
43227: ST_TO_ADDR
// if hex [ 1 ] then
43228: LD_VAR 0 4
43232: PUSH
43233: LD_INT 1
43235: ARRAY
43236: IFFALSE 43240
// exit ;
43238: GO 43643
// height := hex [ 2 ] ;
43240: LD_ADDR_VAR 0 15
43244: PUSH
43245: LD_VAR 0 4
43249: PUSH
43250: LD_INT 2
43252: ARRAY
43253: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
43254: LD_ADDR_VAR 0 14
43258: PUSH
43259: LD_INT 0
43261: PUSH
43262: LD_INT 2
43264: PUSH
43265: LD_INT 3
43267: PUSH
43268: LD_INT 5
43270: PUSH
43271: EMPTY
43272: LIST
43273: LIST
43274: LIST
43275: LIST
43276: ST_TO_ADDR
// for i in tmp do
43277: LD_ADDR_VAR 0 8
43281: PUSH
43282: LD_VAR 0 14
43286: PUSH
43287: FOR_IN
43288: IFFALSE 43458
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
43290: LD_ADDR_VAR 0 9
43294: PUSH
43295: LD_VAR 0 10
43299: PPUSH
43300: LD_VAR 0 8
43304: PPUSH
43305: LD_INT 5
43307: PPUSH
43308: CALL_OW 272
43312: PUSH
43313: LD_VAR 0 11
43317: PPUSH
43318: LD_VAR 0 8
43322: PPUSH
43323: LD_INT 5
43325: PPUSH
43326: CALL_OW 273
43330: PUSH
43331: EMPTY
43332: LIST
43333: LIST
43334: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
43335: LD_VAR 0 9
43339: PUSH
43340: LD_INT 1
43342: ARRAY
43343: PPUSH
43344: LD_VAR 0 9
43348: PUSH
43349: LD_INT 2
43351: ARRAY
43352: PPUSH
43353: CALL_OW 488
43357: IFFALSE 43456
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
43359: LD_ADDR_VAR 0 4
43363: PUSH
43364: LD_VAR 0 9
43368: PUSH
43369: LD_INT 1
43371: ARRAY
43372: PPUSH
43373: LD_VAR 0 9
43377: PUSH
43378: LD_INT 2
43380: ARRAY
43381: PPUSH
43382: CALL_OW 546
43386: ST_TO_ADDR
// if hex [ 1 ] then
43387: LD_VAR 0 4
43391: PUSH
43392: LD_INT 1
43394: ARRAY
43395: IFFALSE 43399
// continue ;
43397: GO 43287
// h := hex [ 2 ] ;
43399: LD_ADDR_VAR 0 13
43403: PUSH
43404: LD_VAR 0 4
43408: PUSH
43409: LD_INT 2
43411: ARRAY
43412: ST_TO_ADDR
// if h + 7 < height then
43413: LD_VAR 0 13
43417: PUSH
43418: LD_INT 7
43420: PLUS
43421: PUSH
43422: LD_VAR 0 15
43426: LESS
43427: IFFALSE 43456
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
43429: LD_ADDR_VAR 0 18
43433: PUSH
43434: LD_INT 7
43436: PUSH
43437: LD_INT 28
43439: PUSH
43440: LD_INT 45
43442: PUSH
43443: EMPTY
43444: LIST
43445: LIST
43446: LIST
43447: PUSH
43448: LD_VAR 0 12
43452: ARRAY
43453: ST_TO_ADDR
// break ;
43454: GO 43458
// end ; end ; end ;
43456: GO 43287
43458: POP
43459: POP
// end ; if not weapon then
43460: LD_VAR 0 18
43464: NOT
43465: IFFALSE 43525
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
43467: LD_ADDR_VAR 0 5
43471: PUSH
43472: LD_VAR 0 5
43476: PUSH
43477: LD_INT 11
43479: PUSH
43480: LD_INT 30
43482: PUSH
43483: LD_INT 49
43485: PUSH
43486: EMPTY
43487: LIST
43488: LIST
43489: LIST
43490: DIFF
43491: ST_TO_ADDR
// if not list then
43492: LD_VAR 0 5
43496: NOT
43497: IFFALSE 43501
// exit ;
43499: GO 43643
// weapon := list [ rand ( 1 , list ) ] ;
43501: LD_ADDR_VAR 0 18
43505: PUSH
43506: LD_VAR 0 5
43510: PUSH
43511: LD_INT 1
43513: PPUSH
43514: LD_VAR 0 5
43518: PPUSH
43519: CALL_OW 12
43523: ARRAY
43524: ST_TO_ADDR
// end ; if weapon then
43525: LD_VAR 0 18
43529: IFFALSE 43643
// begin tmp := CostOfWeapon ( weapon ) ;
43531: LD_ADDR_VAR 0 14
43535: PUSH
43536: LD_VAR 0 18
43540: PPUSH
43541: CALL_OW 451
43545: ST_TO_ADDR
// j := GetBase ( tower ) ;
43546: LD_ADDR_VAR 0 9
43550: PUSH
43551: LD_VAR 0 1
43555: PPUSH
43556: CALL_OW 274
43560: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
43561: LD_VAR 0 9
43565: PPUSH
43566: LD_INT 1
43568: PPUSH
43569: CALL_OW 275
43573: PUSH
43574: LD_VAR 0 14
43578: PUSH
43579: LD_INT 1
43581: ARRAY
43582: GREATEREQUAL
43583: PUSH
43584: LD_VAR 0 9
43588: PPUSH
43589: LD_INT 2
43591: PPUSH
43592: CALL_OW 275
43596: PUSH
43597: LD_VAR 0 14
43601: PUSH
43602: LD_INT 2
43604: ARRAY
43605: GREATEREQUAL
43606: AND
43607: PUSH
43608: LD_VAR 0 9
43612: PPUSH
43613: LD_INT 3
43615: PPUSH
43616: CALL_OW 275
43620: PUSH
43621: LD_VAR 0 14
43625: PUSH
43626: LD_INT 3
43628: ARRAY
43629: GREATEREQUAL
43630: AND
43631: IFFALSE 43643
// result := weapon ;
43633: LD_ADDR_VAR 0 3
43637: PUSH
43638: LD_VAR 0 18
43642: ST_TO_ADDR
// end ; end ;
43643: LD_VAR 0 3
43647: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
43648: LD_INT 0
43650: PPUSH
43651: PPUSH
// result := true ;
43652: LD_ADDR_VAR 0 3
43656: PUSH
43657: LD_INT 1
43659: ST_TO_ADDR
// if array1 = array2 then
43660: LD_VAR 0 1
43664: PUSH
43665: LD_VAR 0 2
43669: EQUAL
43670: IFFALSE 43730
// begin for i = 1 to array1 do
43672: LD_ADDR_VAR 0 4
43676: PUSH
43677: DOUBLE
43678: LD_INT 1
43680: DEC
43681: ST_TO_ADDR
43682: LD_VAR 0 1
43686: PUSH
43687: FOR_TO
43688: IFFALSE 43726
// if array1 [ i ] <> array2 [ i ] then
43690: LD_VAR 0 1
43694: PUSH
43695: LD_VAR 0 4
43699: ARRAY
43700: PUSH
43701: LD_VAR 0 2
43705: PUSH
43706: LD_VAR 0 4
43710: ARRAY
43711: NONEQUAL
43712: IFFALSE 43724
// begin result := false ;
43714: LD_ADDR_VAR 0 3
43718: PUSH
43719: LD_INT 0
43721: ST_TO_ADDR
// break ;
43722: GO 43726
// end ;
43724: GO 43687
43726: POP
43727: POP
// end else
43728: GO 43738
// result := false ;
43730: LD_ADDR_VAR 0 3
43734: PUSH
43735: LD_INT 0
43737: ST_TO_ADDR
// end ;
43738: LD_VAR 0 3
43742: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
43743: LD_INT 0
43745: PPUSH
43746: PPUSH
// if not array1 or not array2 then
43747: LD_VAR 0 1
43751: NOT
43752: PUSH
43753: LD_VAR 0 2
43757: NOT
43758: OR
43759: IFFALSE 43763
// exit ;
43761: GO 43827
// result := true ;
43763: LD_ADDR_VAR 0 3
43767: PUSH
43768: LD_INT 1
43770: ST_TO_ADDR
// for i = 1 to array1 do
43771: LD_ADDR_VAR 0 4
43775: PUSH
43776: DOUBLE
43777: LD_INT 1
43779: DEC
43780: ST_TO_ADDR
43781: LD_VAR 0 1
43785: PUSH
43786: FOR_TO
43787: IFFALSE 43825
// if array1 [ i ] <> array2 [ i ] then
43789: LD_VAR 0 1
43793: PUSH
43794: LD_VAR 0 4
43798: ARRAY
43799: PUSH
43800: LD_VAR 0 2
43804: PUSH
43805: LD_VAR 0 4
43809: ARRAY
43810: NONEQUAL
43811: IFFALSE 43823
// begin result := false ;
43813: LD_ADDR_VAR 0 3
43817: PUSH
43818: LD_INT 0
43820: ST_TO_ADDR
// break ;
43821: GO 43825
// end ;
43823: GO 43786
43825: POP
43826: POP
// end ;
43827: LD_VAR 0 3
43831: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
43832: LD_INT 0
43834: PPUSH
43835: PPUSH
43836: PPUSH
// pom := GetBase ( fac ) ;
43837: LD_ADDR_VAR 0 5
43841: PUSH
43842: LD_VAR 0 1
43846: PPUSH
43847: CALL_OW 274
43851: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
43852: LD_ADDR_VAR 0 4
43856: PUSH
43857: LD_VAR 0 2
43861: PUSH
43862: LD_INT 1
43864: ARRAY
43865: PPUSH
43866: LD_VAR 0 2
43870: PUSH
43871: LD_INT 2
43873: ARRAY
43874: PPUSH
43875: LD_VAR 0 2
43879: PUSH
43880: LD_INT 3
43882: ARRAY
43883: PPUSH
43884: LD_VAR 0 2
43888: PUSH
43889: LD_INT 4
43891: ARRAY
43892: PPUSH
43893: CALL_OW 449
43897: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43898: LD_ADDR_VAR 0 3
43902: PUSH
43903: LD_VAR 0 5
43907: PPUSH
43908: LD_INT 1
43910: PPUSH
43911: CALL_OW 275
43915: PUSH
43916: LD_VAR 0 4
43920: PUSH
43921: LD_INT 1
43923: ARRAY
43924: GREATEREQUAL
43925: PUSH
43926: LD_VAR 0 5
43930: PPUSH
43931: LD_INT 2
43933: PPUSH
43934: CALL_OW 275
43938: PUSH
43939: LD_VAR 0 4
43943: PUSH
43944: LD_INT 2
43946: ARRAY
43947: GREATEREQUAL
43948: AND
43949: PUSH
43950: LD_VAR 0 5
43954: PPUSH
43955: LD_INT 3
43957: PPUSH
43958: CALL_OW 275
43962: PUSH
43963: LD_VAR 0 4
43967: PUSH
43968: LD_INT 3
43970: ARRAY
43971: GREATEREQUAL
43972: AND
43973: ST_TO_ADDR
// end ;
43974: LD_VAR 0 3
43978: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
43979: LD_INT 0
43981: PPUSH
43982: PPUSH
43983: PPUSH
43984: PPUSH
// pom := GetBase ( building ) ;
43985: LD_ADDR_VAR 0 3
43989: PUSH
43990: LD_VAR 0 1
43994: PPUSH
43995: CALL_OW 274
43999: ST_TO_ADDR
// if not pom then
44000: LD_VAR 0 3
44004: NOT
44005: IFFALSE 44009
// exit ;
44007: GO 44179
// btype := GetBType ( building ) ;
44009: LD_ADDR_VAR 0 5
44013: PUSH
44014: LD_VAR 0 1
44018: PPUSH
44019: CALL_OW 266
44023: ST_TO_ADDR
// if btype = b_armoury then
44024: LD_VAR 0 5
44028: PUSH
44029: LD_INT 4
44031: EQUAL
44032: IFFALSE 44042
// btype := b_barracks ;
44034: LD_ADDR_VAR 0 5
44038: PUSH
44039: LD_INT 5
44041: ST_TO_ADDR
// if btype = b_depot then
44042: LD_VAR 0 5
44046: PUSH
44047: LD_INT 0
44049: EQUAL
44050: IFFALSE 44060
// btype := b_warehouse ;
44052: LD_ADDR_VAR 0 5
44056: PUSH
44057: LD_INT 1
44059: ST_TO_ADDR
// if btype = b_workshop then
44060: LD_VAR 0 5
44064: PUSH
44065: LD_INT 2
44067: EQUAL
44068: IFFALSE 44078
// btype := b_factory ;
44070: LD_ADDR_VAR 0 5
44074: PUSH
44075: LD_INT 3
44077: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
44078: LD_ADDR_VAR 0 4
44082: PUSH
44083: LD_VAR 0 5
44087: PPUSH
44088: LD_VAR 0 1
44092: PPUSH
44093: CALL_OW 248
44097: PPUSH
44098: CALL_OW 450
44102: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
44103: LD_ADDR_VAR 0 2
44107: PUSH
44108: LD_VAR 0 3
44112: PPUSH
44113: LD_INT 1
44115: PPUSH
44116: CALL_OW 275
44120: PUSH
44121: LD_VAR 0 4
44125: PUSH
44126: LD_INT 1
44128: ARRAY
44129: GREATEREQUAL
44130: PUSH
44131: LD_VAR 0 3
44135: PPUSH
44136: LD_INT 2
44138: PPUSH
44139: CALL_OW 275
44143: PUSH
44144: LD_VAR 0 4
44148: PUSH
44149: LD_INT 2
44151: ARRAY
44152: GREATEREQUAL
44153: AND
44154: PUSH
44155: LD_VAR 0 3
44159: PPUSH
44160: LD_INT 3
44162: PPUSH
44163: CALL_OW 275
44167: PUSH
44168: LD_VAR 0 4
44172: PUSH
44173: LD_INT 3
44175: ARRAY
44176: GREATEREQUAL
44177: AND
44178: ST_TO_ADDR
// end ;
44179: LD_VAR 0 2
44183: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
44184: LD_INT 0
44186: PPUSH
44187: PPUSH
44188: PPUSH
// pom := GetBase ( building ) ;
44189: LD_ADDR_VAR 0 4
44193: PUSH
44194: LD_VAR 0 1
44198: PPUSH
44199: CALL_OW 274
44203: ST_TO_ADDR
// if not pom then
44204: LD_VAR 0 4
44208: NOT
44209: IFFALSE 44213
// exit ;
44211: GO 44314
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
44213: LD_ADDR_VAR 0 5
44217: PUSH
44218: LD_VAR 0 2
44222: PPUSH
44223: LD_VAR 0 1
44227: PPUSH
44228: CALL_OW 248
44232: PPUSH
44233: CALL_OW 450
44237: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
44238: LD_ADDR_VAR 0 3
44242: PUSH
44243: LD_VAR 0 4
44247: PPUSH
44248: LD_INT 1
44250: PPUSH
44251: CALL_OW 275
44255: PUSH
44256: LD_VAR 0 5
44260: PUSH
44261: LD_INT 1
44263: ARRAY
44264: GREATEREQUAL
44265: PUSH
44266: LD_VAR 0 4
44270: PPUSH
44271: LD_INT 2
44273: PPUSH
44274: CALL_OW 275
44278: PUSH
44279: LD_VAR 0 5
44283: PUSH
44284: LD_INT 2
44286: ARRAY
44287: GREATEREQUAL
44288: AND
44289: PUSH
44290: LD_VAR 0 4
44294: PPUSH
44295: LD_INT 3
44297: PPUSH
44298: CALL_OW 275
44302: PUSH
44303: LD_VAR 0 5
44307: PUSH
44308: LD_INT 3
44310: ARRAY
44311: GREATEREQUAL
44312: AND
44313: ST_TO_ADDR
// end ;
44314: LD_VAR 0 3
44318: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
44319: LD_INT 0
44321: PPUSH
44322: PPUSH
44323: PPUSH
44324: PPUSH
44325: PPUSH
44326: PPUSH
44327: PPUSH
44328: PPUSH
44329: PPUSH
44330: PPUSH
44331: PPUSH
// result := false ;
44332: LD_ADDR_VAR 0 8
44336: PUSH
44337: LD_INT 0
44339: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
44340: LD_VAR 0 5
44344: NOT
44345: PUSH
44346: LD_VAR 0 1
44350: NOT
44351: OR
44352: PUSH
44353: LD_VAR 0 2
44357: NOT
44358: OR
44359: PUSH
44360: LD_VAR 0 3
44364: NOT
44365: OR
44366: IFFALSE 44370
// exit ;
44368: GO 45184
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
44370: LD_ADDR_VAR 0 14
44374: PUSH
44375: LD_VAR 0 1
44379: PPUSH
44380: LD_VAR 0 2
44384: PPUSH
44385: LD_VAR 0 3
44389: PPUSH
44390: LD_VAR 0 4
44394: PPUSH
44395: LD_VAR 0 5
44399: PUSH
44400: LD_INT 1
44402: ARRAY
44403: PPUSH
44404: CALL_OW 248
44408: PPUSH
44409: LD_INT 0
44411: PPUSH
44412: CALL 46417 0 6
44416: ST_TO_ADDR
// if not hexes then
44417: LD_VAR 0 14
44421: NOT
44422: IFFALSE 44426
// exit ;
44424: GO 45184
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
44426: LD_ADDR_VAR 0 17
44430: PUSH
44431: LD_VAR 0 5
44435: PPUSH
44436: LD_INT 22
44438: PUSH
44439: LD_VAR 0 13
44443: PPUSH
44444: CALL_OW 255
44448: PUSH
44449: EMPTY
44450: LIST
44451: LIST
44452: PUSH
44453: LD_INT 2
44455: PUSH
44456: LD_INT 30
44458: PUSH
44459: LD_INT 0
44461: PUSH
44462: EMPTY
44463: LIST
44464: LIST
44465: PUSH
44466: LD_INT 30
44468: PUSH
44469: LD_INT 1
44471: PUSH
44472: EMPTY
44473: LIST
44474: LIST
44475: PUSH
44476: EMPTY
44477: LIST
44478: LIST
44479: LIST
44480: PUSH
44481: EMPTY
44482: LIST
44483: LIST
44484: PPUSH
44485: CALL_OW 72
44489: ST_TO_ADDR
// for i = 1 to hexes do
44490: LD_ADDR_VAR 0 9
44494: PUSH
44495: DOUBLE
44496: LD_INT 1
44498: DEC
44499: ST_TO_ADDR
44500: LD_VAR 0 14
44504: PUSH
44505: FOR_TO
44506: IFFALSE 45182
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44508: LD_ADDR_VAR 0 13
44512: PUSH
44513: LD_VAR 0 14
44517: PUSH
44518: LD_VAR 0 9
44522: ARRAY
44523: PUSH
44524: LD_INT 1
44526: ARRAY
44527: PPUSH
44528: LD_VAR 0 14
44532: PUSH
44533: LD_VAR 0 9
44537: ARRAY
44538: PUSH
44539: LD_INT 2
44541: ARRAY
44542: PPUSH
44543: CALL_OW 428
44547: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
44548: LD_VAR 0 14
44552: PUSH
44553: LD_VAR 0 9
44557: ARRAY
44558: PUSH
44559: LD_INT 1
44561: ARRAY
44562: PPUSH
44563: LD_VAR 0 14
44567: PUSH
44568: LD_VAR 0 9
44572: ARRAY
44573: PUSH
44574: LD_INT 2
44576: ARRAY
44577: PPUSH
44578: CALL_OW 351
44582: PUSH
44583: LD_VAR 0 14
44587: PUSH
44588: LD_VAR 0 9
44592: ARRAY
44593: PUSH
44594: LD_INT 1
44596: ARRAY
44597: PPUSH
44598: LD_VAR 0 14
44602: PUSH
44603: LD_VAR 0 9
44607: ARRAY
44608: PUSH
44609: LD_INT 2
44611: ARRAY
44612: PPUSH
44613: CALL_OW 488
44617: NOT
44618: OR
44619: PUSH
44620: LD_VAR 0 13
44624: PPUSH
44625: CALL_OW 247
44629: PUSH
44630: LD_INT 3
44632: EQUAL
44633: OR
44634: IFFALSE 44640
// exit ;
44636: POP
44637: POP
44638: GO 45184
// if not tmp then
44640: LD_VAR 0 13
44644: NOT
44645: IFFALSE 44649
// continue ;
44647: GO 44505
// result := true ;
44649: LD_ADDR_VAR 0 8
44653: PUSH
44654: LD_INT 1
44656: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
44657: LD_VAR 0 6
44661: PUSH
44662: LD_VAR 0 13
44666: PPUSH
44667: CALL_OW 247
44671: PUSH
44672: LD_INT 2
44674: EQUAL
44675: AND
44676: PUSH
44677: LD_VAR 0 13
44681: PPUSH
44682: CALL_OW 263
44686: PUSH
44687: LD_INT 1
44689: EQUAL
44690: AND
44691: IFFALSE 44855
// begin if IsDrivenBy ( tmp ) then
44693: LD_VAR 0 13
44697: PPUSH
44698: CALL_OW 311
44702: IFFALSE 44706
// continue ;
44704: GO 44505
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
44706: LD_VAR 0 6
44710: PPUSH
44711: LD_INT 3
44713: PUSH
44714: LD_INT 60
44716: PUSH
44717: EMPTY
44718: LIST
44719: PUSH
44720: EMPTY
44721: LIST
44722: LIST
44723: PUSH
44724: LD_INT 3
44726: PUSH
44727: LD_INT 55
44729: PUSH
44730: EMPTY
44731: LIST
44732: PUSH
44733: EMPTY
44734: LIST
44735: LIST
44736: PUSH
44737: EMPTY
44738: LIST
44739: LIST
44740: PPUSH
44741: CALL_OW 72
44745: IFFALSE 44853
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
44747: LD_ADDR_VAR 0 18
44751: PUSH
44752: LD_VAR 0 6
44756: PPUSH
44757: LD_INT 3
44759: PUSH
44760: LD_INT 60
44762: PUSH
44763: EMPTY
44764: LIST
44765: PUSH
44766: EMPTY
44767: LIST
44768: LIST
44769: PUSH
44770: LD_INT 3
44772: PUSH
44773: LD_INT 55
44775: PUSH
44776: EMPTY
44777: LIST
44778: PUSH
44779: EMPTY
44780: LIST
44781: LIST
44782: PUSH
44783: EMPTY
44784: LIST
44785: LIST
44786: PPUSH
44787: CALL_OW 72
44791: PUSH
44792: LD_INT 1
44794: ARRAY
44795: ST_TO_ADDR
// if IsInUnit ( driver ) then
44796: LD_VAR 0 18
44800: PPUSH
44801: CALL_OW 310
44805: IFFALSE 44816
// ComExit ( driver ) ;
44807: LD_VAR 0 18
44811: PPUSH
44812: CALL 70197 0 1
// AddComEnterUnit ( driver , tmp ) ;
44816: LD_VAR 0 18
44820: PPUSH
44821: LD_VAR 0 13
44825: PPUSH
44826: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
44830: LD_VAR 0 18
44834: PPUSH
44835: LD_VAR 0 7
44839: PPUSH
44840: CALL_OW 173
// AddComExitVehicle ( driver ) ;
44844: LD_VAR 0 18
44848: PPUSH
44849: CALL_OW 181
// end ; continue ;
44853: GO 44505
// end ; if not cleaners or not tmp in cleaners then
44855: LD_VAR 0 6
44859: NOT
44860: PUSH
44861: LD_VAR 0 13
44865: PUSH
44866: LD_VAR 0 6
44870: IN
44871: NOT
44872: OR
44873: IFFALSE 45180
// begin if dep then
44875: LD_VAR 0 17
44879: IFFALSE 45015
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
44881: LD_ADDR_VAR 0 16
44885: PUSH
44886: LD_VAR 0 17
44890: PUSH
44891: LD_INT 1
44893: ARRAY
44894: PPUSH
44895: CALL_OW 250
44899: PPUSH
44900: LD_VAR 0 17
44904: PUSH
44905: LD_INT 1
44907: ARRAY
44908: PPUSH
44909: CALL_OW 254
44913: PPUSH
44914: LD_INT 5
44916: PPUSH
44917: CALL_OW 272
44921: PUSH
44922: LD_VAR 0 17
44926: PUSH
44927: LD_INT 1
44929: ARRAY
44930: PPUSH
44931: CALL_OW 251
44935: PPUSH
44936: LD_VAR 0 17
44940: PUSH
44941: LD_INT 1
44943: ARRAY
44944: PPUSH
44945: CALL_OW 254
44949: PPUSH
44950: LD_INT 5
44952: PPUSH
44953: CALL_OW 273
44957: PUSH
44958: EMPTY
44959: LIST
44960: LIST
44961: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
44962: LD_VAR 0 16
44966: PUSH
44967: LD_INT 1
44969: ARRAY
44970: PPUSH
44971: LD_VAR 0 16
44975: PUSH
44976: LD_INT 2
44978: ARRAY
44979: PPUSH
44980: CALL_OW 488
44984: IFFALSE 45015
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
44986: LD_VAR 0 13
44990: PPUSH
44991: LD_VAR 0 16
44995: PUSH
44996: LD_INT 1
44998: ARRAY
44999: PPUSH
45000: LD_VAR 0 16
45004: PUSH
45005: LD_INT 2
45007: ARRAY
45008: PPUSH
45009: CALL_OW 111
// continue ;
45013: GO 44505
// end ; end ; r := GetDir ( tmp ) ;
45015: LD_ADDR_VAR 0 15
45019: PUSH
45020: LD_VAR 0 13
45024: PPUSH
45025: CALL_OW 254
45029: ST_TO_ADDR
// if r = 5 then
45030: LD_VAR 0 15
45034: PUSH
45035: LD_INT 5
45037: EQUAL
45038: IFFALSE 45048
// r := 0 ;
45040: LD_ADDR_VAR 0 15
45044: PUSH
45045: LD_INT 0
45047: ST_TO_ADDR
// for j = r to 5 do
45048: LD_ADDR_VAR 0 10
45052: PUSH
45053: DOUBLE
45054: LD_VAR 0 15
45058: DEC
45059: ST_TO_ADDR
45060: LD_INT 5
45062: PUSH
45063: FOR_TO
45064: IFFALSE 45178
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
45066: LD_ADDR_VAR 0 11
45070: PUSH
45071: LD_VAR 0 13
45075: PPUSH
45076: CALL_OW 250
45080: PPUSH
45081: LD_VAR 0 10
45085: PPUSH
45086: LD_INT 2
45088: PPUSH
45089: CALL_OW 272
45093: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
45094: LD_ADDR_VAR 0 12
45098: PUSH
45099: LD_VAR 0 13
45103: PPUSH
45104: CALL_OW 251
45108: PPUSH
45109: LD_VAR 0 10
45113: PPUSH
45114: LD_INT 2
45116: PPUSH
45117: CALL_OW 273
45121: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
45122: LD_VAR 0 11
45126: PPUSH
45127: LD_VAR 0 12
45131: PPUSH
45132: CALL_OW 488
45136: PUSH
45137: LD_VAR 0 11
45141: PPUSH
45142: LD_VAR 0 12
45146: PPUSH
45147: CALL_OW 428
45151: NOT
45152: AND
45153: IFFALSE 45176
// begin ComMoveXY ( tmp , _x , _y ) ;
45155: LD_VAR 0 13
45159: PPUSH
45160: LD_VAR 0 11
45164: PPUSH
45165: LD_VAR 0 12
45169: PPUSH
45170: CALL_OW 111
// break ;
45174: GO 45178
// end ; end ;
45176: GO 45063
45178: POP
45179: POP
// end ; end ;
45180: GO 44505
45182: POP
45183: POP
// end ;
45184: LD_VAR 0 8
45188: RET
// export function BuildingTechInvented ( side , btype ) ; begin
45189: LD_INT 0
45191: PPUSH
// result := true ;
45192: LD_ADDR_VAR 0 3
45196: PUSH
45197: LD_INT 1
45199: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
45200: LD_VAR 0 2
45204: PUSH
45205: LD_INT 24
45207: DOUBLE
45208: EQUAL
45209: IFTRUE 45219
45211: LD_INT 33
45213: DOUBLE
45214: EQUAL
45215: IFTRUE 45219
45217: GO 45244
45219: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
45220: LD_ADDR_VAR 0 3
45224: PUSH
45225: LD_INT 32
45227: PPUSH
45228: LD_VAR 0 1
45232: PPUSH
45233: CALL_OW 321
45237: PUSH
45238: LD_INT 2
45240: EQUAL
45241: ST_TO_ADDR
45242: GO 45560
45244: LD_INT 20
45246: DOUBLE
45247: EQUAL
45248: IFTRUE 45252
45250: GO 45277
45252: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
45253: LD_ADDR_VAR 0 3
45257: PUSH
45258: LD_INT 6
45260: PPUSH
45261: LD_VAR 0 1
45265: PPUSH
45266: CALL_OW 321
45270: PUSH
45271: LD_INT 2
45273: EQUAL
45274: ST_TO_ADDR
45275: GO 45560
45277: LD_INT 22
45279: DOUBLE
45280: EQUAL
45281: IFTRUE 45291
45283: LD_INT 36
45285: DOUBLE
45286: EQUAL
45287: IFTRUE 45291
45289: GO 45316
45291: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
45292: LD_ADDR_VAR 0 3
45296: PUSH
45297: LD_INT 15
45299: PPUSH
45300: LD_VAR 0 1
45304: PPUSH
45305: CALL_OW 321
45309: PUSH
45310: LD_INT 2
45312: EQUAL
45313: ST_TO_ADDR
45314: GO 45560
45316: LD_INT 30
45318: DOUBLE
45319: EQUAL
45320: IFTRUE 45324
45322: GO 45349
45324: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
45325: LD_ADDR_VAR 0 3
45329: PUSH
45330: LD_INT 20
45332: PPUSH
45333: LD_VAR 0 1
45337: PPUSH
45338: CALL_OW 321
45342: PUSH
45343: LD_INT 2
45345: EQUAL
45346: ST_TO_ADDR
45347: GO 45560
45349: LD_INT 28
45351: DOUBLE
45352: EQUAL
45353: IFTRUE 45363
45355: LD_INT 21
45357: DOUBLE
45358: EQUAL
45359: IFTRUE 45363
45361: GO 45388
45363: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
45364: LD_ADDR_VAR 0 3
45368: PUSH
45369: LD_INT 21
45371: PPUSH
45372: LD_VAR 0 1
45376: PPUSH
45377: CALL_OW 321
45381: PUSH
45382: LD_INT 2
45384: EQUAL
45385: ST_TO_ADDR
45386: GO 45560
45388: LD_INT 16
45390: DOUBLE
45391: EQUAL
45392: IFTRUE 45396
45394: GO 45421
45396: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
45397: LD_ADDR_VAR 0 3
45401: PUSH
45402: LD_INT 84
45404: PPUSH
45405: LD_VAR 0 1
45409: PPUSH
45410: CALL_OW 321
45414: PUSH
45415: LD_INT 2
45417: EQUAL
45418: ST_TO_ADDR
45419: GO 45560
45421: LD_INT 19
45423: DOUBLE
45424: EQUAL
45425: IFTRUE 45435
45427: LD_INT 23
45429: DOUBLE
45430: EQUAL
45431: IFTRUE 45435
45433: GO 45460
45435: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
45436: LD_ADDR_VAR 0 3
45440: PUSH
45441: LD_INT 83
45443: PPUSH
45444: LD_VAR 0 1
45448: PPUSH
45449: CALL_OW 321
45453: PUSH
45454: LD_INT 2
45456: EQUAL
45457: ST_TO_ADDR
45458: GO 45560
45460: LD_INT 17
45462: DOUBLE
45463: EQUAL
45464: IFTRUE 45468
45466: GO 45493
45468: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
45469: LD_ADDR_VAR 0 3
45473: PUSH
45474: LD_INT 39
45476: PPUSH
45477: LD_VAR 0 1
45481: PPUSH
45482: CALL_OW 321
45486: PUSH
45487: LD_INT 2
45489: EQUAL
45490: ST_TO_ADDR
45491: GO 45560
45493: LD_INT 18
45495: DOUBLE
45496: EQUAL
45497: IFTRUE 45501
45499: GO 45526
45501: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
45502: LD_ADDR_VAR 0 3
45506: PUSH
45507: LD_INT 40
45509: PPUSH
45510: LD_VAR 0 1
45514: PPUSH
45515: CALL_OW 321
45519: PUSH
45520: LD_INT 2
45522: EQUAL
45523: ST_TO_ADDR
45524: GO 45560
45526: LD_INT 27
45528: DOUBLE
45529: EQUAL
45530: IFTRUE 45534
45532: GO 45559
45534: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
45535: LD_ADDR_VAR 0 3
45539: PUSH
45540: LD_INT 35
45542: PPUSH
45543: LD_VAR 0 1
45547: PPUSH
45548: CALL_OW 321
45552: PUSH
45553: LD_INT 2
45555: EQUAL
45556: ST_TO_ADDR
45557: GO 45560
45559: POP
// end ;
45560: LD_VAR 0 3
45564: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
45565: LD_INT 0
45567: PPUSH
45568: PPUSH
45569: PPUSH
45570: PPUSH
45571: PPUSH
45572: PPUSH
45573: PPUSH
45574: PPUSH
45575: PPUSH
45576: PPUSH
45577: PPUSH
// result := false ;
45578: LD_ADDR_VAR 0 6
45582: PUSH
45583: LD_INT 0
45585: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
45586: LD_VAR 0 1
45590: NOT
45591: PUSH
45592: LD_VAR 0 1
45596: PPUSH
45597: CALL_OW 266
45601: PUSH
45602: LD_INT 0
45604: PUSH
45605: LD_INT 1
45607: PUSH
45608: EMPTY
45609: LIST
45610: LIST
45611: IN
45612: NOT
45613: OR
45614: PUSH
45615: LD_VAR 0 2
45619: NOT
45620: OR
45621: PUSH
45622: LD_VAR 0 5
45626: PUSH
45627: LD_INT 0
45629: PUSH
45630: LD_INT 1
45632: PUSH
45633: LD_INT 2
45635: PUSH
45636: LD_INT 3
45638: PUSH
45639: LD_INT 4
45641: PUSH
45642: LD_INT 5
45644: PUSH
45645: EMPTY
45646: LIST
45647: LIST
45648: LIST
45649: LIST
45650: LIST
45651: LIST
45652: IN
45653: NOT
45654: OR
45655: PUSH
45656: LD_VAR 0 3
45660: PPUSH
45661: LD_VAR 0 4
45665: PPUSH
45666: CALL_OW 488
45670: NOT
45671: OR
45672: IFFALSE 45676
// exit ;
45674: GO 46412
// side := GetSide ( depot ) ;
45676: LD_ADDR_VAR 0 9
45680: PUSH
45681: LD_VAR 0 1
45685: PPUSH
45686: CALL_OW 255
45690: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
45691: LD_VAR 0 9
45695: PPUSH
45696: LD_VAR 0 2
45700: PPUSH
45701: CALL 45189 0 2
45705: NOT
45706: IFFALSE 45710
// exit ;
45708: GO 46412
// pom := GetBase ( depot ) ;
45710: LD_ADDR_VAR 0 10
45714: PUSH
45715: LD_VAR 0 1
45719: PPUSH
45720: CALL_OW 274
45724: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
45725: LD_ADDR_VAR 0 11
45729: PUSH
45730: LD_VAR 0 2
45734: PPUSH
45735: LD_VAR 0 1
45739: PPUSH
45740: CALL_OW 248
45744: PPUSH
45745: CALL_OW 450
45749: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
45750: LD_VAR 0 10
45754: PPUSH
45755: LD_INT 1
45757: PPUSH
45758: CALL_OW 275
45762: PUSH
45763: LD_VAR 0 11
45767: PUSH
45768: LD_INT 1
45770: ARRAY
45771: GREATEREQUAL
45772: PUSH
45773: LD_VAR 0 10
45777: PPUSH
45778: LD_INT 2
45780: PPUSH
45781: CALL_OW 275
45785: PUSH
45786: LD_VAR 0 11
45790: PUSH
45791: LD_INT 2
45793: ARRAY
45794: GREATEREQUAL
45795: AND
45796: PUSH
45797: LD_VAR 0 10
45801: PPUSH
45802: LD_INT 3
45804: PPUSH
45805: CALL_OW 275
45809: PUSH
45810: LD_VAR 0 11
45814: PUSH
45815: LD_INT 3
45817: ARRAY
45818: GREATEREQUAL
45819: AND
45820: NOT
45821: IFFALSE 45825
// exit ;
45823: GO 46412
// if GetBType ( depot ) = b_depot then
45825: LD_VAR 0 1
45829: PPUSH
45830: CALL_OW 266
45834: PUSH
45835: LD_INT 0
45837: EQUAL
45838: IFFALSE 45850
// dist := 28 else
45840: LD_ADDR_VAR 0 14
45844: PUSH
45845: LD_INT 28
45847: ST_TO_ADDR
45848: GO 45858
// dist := 36 ;
45850: LD_ADDR_VAR 0 14
45854: PUSH
45855: LD_INT 36
45857: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
45858: LD_VAR 0 1
45862: PPUSH
45863: LD_VAR 0 3
45867: PPUSH
45868: LD_VAR 0 4
45872: PPUSH
45873: CALL_OW 297
45877: PUSH
45878: LD_VAR 0 14
45882: GREATER
45883: IFFALSE 45887
// exit ;
45885: GO 46412
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
45887: LD_ADDR_VAR 0 12
45891: PUSH
45892: LD_VAR 0 2
45896: PPUSH
45897: LD_VAR 0 3
45901: PPUSH
45902: LD_VAR 0 4
45906: PPUSH
45907: LD_VAR 0 5
45911: PPUSH
45912: LD_VAR 0 1
45916: PPUSH
45917: CALL_OW 248
45921: PPUSH
45922: LD_INT 0
45924: PPUSH
45925: CALL 46417 0 6
45929: ST_TO_ADDR
// if not hexes then
45930: LD_VAR 0 12
45934: NOT
45935: IFFALSE 45939
// exit ;
45937: GO 46412
// hex := GetHexInfo ( x , y ) ;
45939: LD_ADDR_VAR 0 15
45943: PUSH
45944: LD_VAR 0 3
45948: PPUSH
45949: LD_VAR 0 4
45953: PPUSH
45954: CALL_OW 546
45958: ST_TO_ADDR
// if hex [ 1 ] then
45959: LD_VAR 0 15
45963: PUSH
45964: LD_INT 1
45966: ARRAY
45967: IFFALSE 45971
// exit ;
45969: GO 46412
// height := hex [ 2 ] ;
45971: LD_ADDR_VAR 0 13
45975: PUSH
45976: LD_VAR 0 15
45980: PUSH
45981: LD_INT 2
45983: ARRAY
45984: ST_TO_ADDR
// for i = 1 to hexes do
45985: LD_ADDR_VAR 0 7
45989: PUSH
45990: DOUBLE
45991: LD_INT 1
45993: DEC
45994: ST_TO_ADDR
45995: LD_VAR 0 12
45999: PUSH
46000: FOR_TO
46001: IFFALSE 46331
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
46003: LD_VAR 0 12
46007: PUSH
46008: LD_VAR 0 7
46012: ARRAY
46013: PUSH
46014: LD_INT 1
46016: ARRAY
46017: PPUSH
46018: LD_VAR 0 12
46022: PUSH
46023: LD_VAR 0 7
46027: ARRAY
46028: PUSH
46029: LD_INT 2
46031: ARRAY
46032: PPUSH
46033: CALL_OW 488
46037: NOT
46038: PUSH
46039: LD_VAR 0 12
46043: PUSH
46044: LD_VAR 0 7
46048: ARRAY
46049: PUSH
46050: LD_INT 1
46052: ARRAY
46053: PPUSH
46054: LD_VAR 0 12
46058: PUSH
46059: LD_VAR 0 7
46063: ARRAY
46064: PUSH
46065: LD_INT 2
46067: ARRAY
46068: PPUSH
46069: CALL_OW 428
46073: PUSH
46074: LD_INT 0
46076: GREATER
46077: OR
46078: PUSH
46079: LD_VAR 0 12
46083: PUSH
46084: LD_VAR 0 7
46088: ARRAY
46089: PUSH
46090: LD_INT 1
46092: ARRAY
46093: PPUSH
46094: LD_VAR 0 12
46098: PUSH
46099: LD_VAR 0 7
46103: ARRAY
46104: PUSH
46105: LD_INT 2
46107: ARRAY
46108: PPUSH
46109: CALL_OW 351
46113: OR
46114: IFFALSE 46120
// exit ;
46116: POP
46117: POP
46118: GO 46412
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
46120: LD_ADDR_VAR 0 8
46124: PUSH
46125: LD_VAR 0 12
46129: PUSH
46130: LD_VAR 0 7
46134: ARRAY
46135: PUSH
46136: LD_INT 1
46138: ARRAY
46139: PPUSH
46140: LD_VAR 0 12
46144: PUSH
46145: LD_VAR 0 7
46149: ARRAY
46150: PUSH
46151: LD_INT 2
46153: ARRAY
46154: PPUSH
46155: CALL_OW 546
46159: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
46160: LD_VAR 0 8
46164: PUSH
46165: LD_INT 1
46167: ARRAY
46168: PUSH
46169: LD_VAR 0 8
46173: PUSH
46174: LD_INT 2
46176: ARRAY
46177: PUSH
46178: LD_VAR 0 13
46182: PUSH
46183: LD_INT 2
46185: PLUS
46186: GREATER
46187: OR
46188: PUSH
46189: LD_VAR 0 8
46193: PUSH
46194: LD_INT 2
46196: ARRAY
46197: PUSH
46198: LD_VAR 0 13
46202: PUSH
46203: LD_INT 2
46205: MINUS
46206: LESS
46207: OR
46208: PUSH
46209: LD_VAR 0 8
46213: PUSH
46214: LD_INT 3
46216: ARRAY
46217: PUSH
46218: LD_INT 0
46220: PUSH
46221: LD_INT 8
46223: PUSH
46224: LD_INT 9
46226: PUSH
46227: LD_INT 10
46229: PUSH
46230: LD_INT 11
46232: PUSH
46233: LD_INT 12
46235: PUSH
46236: LD_INT 13
46238: PUSH
46239: LD_INT 16
46241: PUSH
46242: LD_INT 17
46244: PUSH
46245: LD_INT 18
46247: PUSH
46248: LD_INT 19
46250: PUSH
46251: LD_INT 20
46253: PUSH
46254: LD_INT 21
46256: PUSH
46257: EMPTY
46258: LIST
46259: LIST
46260: LIST
46261: LIST
46262: LIST
46263: LIST
46264: LIST
46265: LIST
46266: LIST
46267: LIST
46268: LIST
46269: LIST
46270: LIST
46271: IN
46272: NOT
46273: OR
46274: PUSH
46275: LD_VAR 0 8
46279: PUSH
46280: LD_INT 5
46282: ARRAY
46283: NOT
46284: OR
46285: PUSH
46286: LD_VAR 0 8
46290: PUSH
46291: LD_INT 6
46293: ARRAY
46294: PUSH
46295: LD_INT 1
46297: PUSH
46298: LD_INT 2
46300: PUSH
46301: LD_INT 7
46303: PUSH
46304: LD_INT 9
46306: PUSH
46307: LD_INT 10
46309: PUSH
46310: LD_INT 11
46312: PUSH
46313: EMPTY
46314: LIST
46315: LIST
46316: LIST
46317: LIST
46318: LIST
46319: LIST
46320: IN
46321: NOT
46322: OR
46323: IFFALSE 46329
// exit ;
46325: POP
46326: POP
46327: GO 46412
// end ;
46329: GO 46000
46331: POP
46332: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
46333: LD_VAR 0 9
46337: PPUSH
46338: LD_VAR 0 3
46342: PPUSH
46343: LD_VAR 0 4
46347: PPUSH
46348: LD_INT 20
46350: PPUSH
46351: CALL 38364 0 4
46355: PUSH
46356: LD_INT 4
46358: ARRAY
46359: IFFALSE 46363
// exit ;
46361: GO 46412
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
46363: LD_VAR 0 2
46367: PUSH
46368: LD_INT 29
46370: PUSH
46371: LD_INT 30
46373: PUSH
46374: EMPTY
46375: LIST
46376: LIST
46377: IN
46378: PUSH
46379: LD_VAR 0 3
46383: PPUSH
46384: LD_VAR 0 4
46388: PPUSH
46389: LD_VAR 0 9
46393: PPUSH
46394: CALL_OW 440
46398: NOT
46399: AND
46400: IFFALSE 46404
// exit ;
46402: GO 46412
// result := true ;
46404: LD_ADDR_VAR 0 6
46408: PUSH
46409: LD_INT 1
46411: ST_TO_ADDR
// end ;
46412: LD_VAR 0 6
46416: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
46417: LD_INT 0
46419: PPUSH
46420: PPUSH
46421: PPUSH
46422: PPUSH
46423: PPUSH
46424: PPUSH
46425: PPUSH
46426: PPUSH
46427: PPUSH
46428: PPUSH
46429: PPUSH
46430: PPUSH
46431: PPUSH
46432: PPUSH
46433: PPUSH
46434: PPUSH
46435: PPUSH
46436: PPUSH
46437: PPUSH
46438: PPUSH
46439: PPUSH
46440: PPUSH
46441: PPUSH
46442: PPUSH
46443: PPUSH
46444: PPUSH
46445: PPUSH
46446: PPUSH
46447: PPUSH
46448: PPUSH
46449: PPUSH
46450: PPUSH
46451: PPUSH
46452: PPUSH
46453: PPUSH
46454: PPUSH
46455: PPUSH
46456: PPUSH
46457: PPUSH
46458: PPUSH
46459: PPUSH
46460: PPUSH
46461: PPUSH
46462: PPUSH
46463: PPUSH
46464: PPUSH
46465: PPUSH
46466: PPUSH
46467: PPUSH
46468: PPUSH
46469: PPUSH
46470: PPUSH
46471: PPUSH
46472: PPUSH
46473: PPUSH
46474: PPUSH
46475: PPUSH
46476: PPUSH
// result = [ ] ;
46477: LD_ADDR_VAR 0 7
46481: PUSH
46482: EMPTY
46483: ST_TO_ADDR
// temp_list = [ ] ;
46484: LD_ADDR_VAR 0 9
46488: PUSH
46489: EMPTY
46490: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
46491: LD_VAR 0 4
46495: PUSH
46496: LD_INT 0
46498: PUSH
46499: LD_INT 1
46501: PUSH
46502: LD_INT 2
46504: PUSH
46505: LD_INT 3
46507: PUSH
46508: LD_INT 4
46510: PUSH
46511: LD_INT 5
46513: PUSH
46514: EMPTY
46515: LIST
46516: LIST
46517: LIST
46518: LIST
46519: LIST
46520: LIST
46521: IN
46522: NOT
46523: PUSH
46524: LD_VAR 0 1
46528: PUSH
46529: LD_INT 0
46531: PUSH
46532: LD_INT 1
46534: PUSH
46535: EMPTY
46536: LIST
46537: LIST
46538: IN
46539: PUSH
46540: LD_VAR 0 5
46544: PUSH
46545: LD_INT 1
46547: PUSH
46548: LD_INT 2
46550: PUSH
46551: LD_INT 3
46553: PUSH
46554: EMPTY
46555: LIST
46556: LIST
46557: LIST
46558: IN
46559: NOT
46560: AND
46561: OR
46562: IFFALSE 46566
// exit ;
46564: GO 64957
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
46566: LD_VAR 0 1
46570: PUSH
46571: LD_INT 6
46573: PUSH
46574: LD_INT 7
46576: PUSH
46577: LD_INT 8
46579: PUSH
46580: LD_INT 13
46582: PUSH
46583: LD_INT 12
46585: PUSH
46586: LD_INT 15
46588: PUSH
46589: LD_INT 11
46591: PUSH
46592: LD_INT 14
46594: PUSH
46595: LD_INT 10
46597: PUSH
46598: EMPTY
46599: LIST
46600: LIST
46601: LIST
46602: LIST
46603: LIST
46604: LIST
46605: LIST
46606: LIST
46607: LIST
46608: IN
46609: IFFALSE 46619
// btype = b_lab ;
46611: LD_ADDR_VAR 0 1
46615: PUSH
46616: LD_INT 6
46618: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
46619: LD_VAR 0 6
46623: PUSH
46624: LD_INT 0
46626: PUSH
46627: LD_INT 1
46629: PUSH
46630: LD_INT 2
46632: PUSH
46633: EMPTY
46634: LIST
46635: LIST
46636: LIST
46637: IN
46638: NOT
46639: PUSH
46640: LD_VAR 0 1
46644: PUSH
46645: LD_INT 0
46647: PUSH
46648: LD_INT 1
46650: PUSH
46651: LD_INT 2
46653: PUSH
46654: LD_INT 3
46656: PUSH
46657: LD_INT 6
46659: PUSH
46660: LD_INT 36
46662: PUSH
46663: LD_INT 4
46665: PUSH
46666: LD_INT 5
46668: PUSH
46669: LD_INT 31
46671: PUSH
46672: LD_INT 32
46674: PUSH
46675: LD_INT 33
46677: PUSH
46678: EMPTY
46679: LIST
46680: LIST
46681: LIST
46682: LIST
46683: LIST
46684: LIST
46685: LIST
46686: LIST
46687: LIST
46688: LIST
46689: LIST
46690: IN
46691: NOT
46692: PUSH
46693: LD_VAR 0 6
46697: PUSH
46698: LD_INT 1
46700: EQUAL
46701: AND
46702: OR
46703: PUSH
46704: LD_VAR 0 1
46708: PUSH
46709: LD_INT 2
46711: PUSH
46712: LD_INT 3
46714: PUSH
46715: EMPTY
46716: LIST
46717: LIST
46718: IN
46719: NOT
46720: PUSH
46721: LD_VAR 0 6
46725: PUSH
46726: LD_INT 2
46728: EQUAL
46729: AND
46730: OR
46731: IFFALSE 46741
// mode = 0 ;
46733: LD_ADDR_VAR 0 6
46737: PUSH
46738: LD_INT 0
46740: ST_TO_ADDR
// case mode of 0 :
46741: LD_VAR 0 6
46745: PUSH
46746: LD_INT 0
46748: DOUBLE
46749: EQUAL
46750: IFTRUE 46754
46752: GO 58207
46754: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46755: LD_ADDR_VAR 0 11
46759: PUSH
46760: LD_INT 0
46762: PUSH
46763: LD_INT 0
46765: PUSH
46766: EMPTY
46767: LIST
46768: LIST
46769: PUSH
46770: LD_INT 0
46772: PUSH
46773: LD_INT 1
46775: NEG
46776: PUSH
46777: EMPTY
46778: LIST
46779: LIST
46780: PUSH
46781: LD_INT 1
46783: PUSH
46784: LD_INT 0
46786: PUSH
46787: EMPTY
46788: LIST
46789: LIST
46790: PUSH
46791: LD_INT 1
46793: PUSH
46794: LD_INT 1
46796: PUSH
46797: EMPTY
46798: LIST
46799: LIST
46800: PUSH
46801: LD_INT 0
46803: PUSH
46804: LD_INT 1
46806: PUSH
46807: EMPTY
46808: LIST
46809: LIST
46810: PUSH
46811: LD_INT 1
46813: NEG
46814: PUSH
46815: LD_INT 0
46817: PUSH
46818: EMPTY
46819: LIST
46820: LIST
46821: PUSH
46822: LD_INT 1
46824: NEG
46825: PUSH
46826: LD_INT 1
46828: NEG
46829: PUSH
46830: EMPTY
46831: LIST
46832: LIST
46833: PUSH
46834: LD_INT 1
46836: NEG
46837: PUSH
46838: LD_INT 2
46840: NEG
46841: PUSH
46842: EMPTY
46843: LIST
46844: LIST
46845: PUSH
46846: LD_INT 0
46848: PUSH
46849: LD_INT 2
46851: NEG
46852: PUSH
46853: EMPTY
46854: LIST
46855: LIST
46856: PUSH
46857: LD_INT 1
46859: PUSH
46860: LD_INT 1
46862: NEG
46863: PUSH
46864: EMPTY
46865: LIST
46866: LIST
46867: PUSH
46868: LD_INT 1
46870: PUSH
46871: LD_INT 2
46873: PUSH
46874: EMPTY
46875: LIST
46876: LIST
46877: PUSH
46878: LD_INT 0
46880: PUSH
46881: LD_INT 2
46883: PUSH
46884: EMPTY
46885: LIST
46886: LIST
46887: PUSH
46888: LD_INT 1
46890: NEG
46891: PUSH
46892: LD_INT 1
46894: PUSH
46895: EMPTY
46896: LIST
46897: LIST
46898: PUSH
46899: LD_INT 1
46901: PUSH
46902: LD_INT 3
46904: PUSH
46905: EMPTY
46906: LIST
46907: LIST
46908: PUSH
46909: LD_INT 0
46911: PUSH
46912: LD_INT 3
46914: PUSH
46915: EMPTY
46916: LIST
46917: LIST
46918: PUSH
46919: LD_INT 1
46921: NEG
46922: PUSH
46923: LD_INT 2
46925: PUSH
46926: EMPTY
46927: LIST
46928: LIST
46929: PUSH
46930: EMPTY
46931: LIST
46932: LIST
46933: LIST
46934: LIST
46935: LIST
46936: LIST
46937: LIST
46938: LIST
46939: LIST
46940: LIST
46941: LIST
46942: LIST
46943: LIST
46944: LIST
46945: LIST
46946: LIST
46947: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46948: LD_ADDR_VAR 0 12
46952: PUSH
46953: LD_INT 0
46955: PUSH
46956: LD_INT 0
46958: PUSH
46959: EMPTY
46960: LIST
46961: LIST
46962: PUSH
46963: LD_INT 0
46965: PUSH
46966: LD_INT 1
46968: NEG
46969: PUSH
46970: EMPTY
46971: LIST
46972: LIST
46973: PUSH
46974: LD_INT 1
46976: PUSH
46977: LD_INT 0
46979: PUSH
46980: EMPTY
46981: LIST
46982: LIST
46983: PUSH
46984: LD_INT 1
46986: PUSH
46987: LD_INT 1
46989: PUSH
46990: EMPTY
46991: LIST
46992: LIST
46993: PUSH
46994: LD_INT 0
46996: PUSH
46997: LD_INT 1
46999: PUSH
47000: EMPTY
47001: LIST
47002: LIST
47003: PUSH
47004: LD_INT 1
47006: NEG
47007: PUSH
47008: LD_INT 0
47010: PUSH
47011: EMPTY
47012: LIST
47013: LIST
47014: PUSH
47015: LD_INT 1
47017: NEG
47018: PUSH
47019: LD_INT 1
47021: NEG
47022: PUSH
47023: EMPTY
47024: LIST
47025: LIST
47026: PUSH
47027: LD_INT 1
47029: PUSH
47030: LD_INT 1
47032: NEG
47033: PUSH
47034: EMPTY
47035: LIST
47036: LIST
47037: PUSH
47038: LD_INT 2
47040: PUSH
47041: LD_INT 0
47043: PUSH
47044: EMPTY
47045: LIST
47046: LIST
47047: PUSH
47048: LD_INT 2
47050: PUSH
47051: LD_INT 1
47053: PUSH
47054: EMPTY
47055: LIST
47056: LIST
47057: PUSH
47058: LD_INT 1
47060: NEG
47061: PUSH
47062: LD_INT 1
47064: PUSH
47065: EMPTY
47066: LIST
47067: LIST
47068: PUSH
47069: LD_INT 2
47071: NEG
47072: PUSH
47073: LD_INT 0
47075: PUSH
47076: EMPTY
47077: LIST
47078: LIST
47079: PUSH
47080: LD_INT 2
47082: NEG
47083: PUSH
47084: LD_INT 1
47086: NEG
47087: PUSH
47088: EMPTY
47089: LIST
47090: LIST
47091: PUSH
47092: LD_INT 2
47094: NEG
47095: PUSH
47096: LD_INT 1
47098: PUSH
47099: EMPTY
47100: LIST
47101: LIST
47102: PUSH
47103: LD_INT 3
47105: NEG
47106: PUSH
47107: LD_INT 0
47109: PUSH
47110: EMPTY
47111: LIST
47112: LIST
47113: PUSH
47114: LD_INT 3
47116: NEG
47117: PUSH
47118: LD_INT 1
47120: NEG
47121: PUSH
47122: EMPTY
47123: LIST
47124: LIST
47125: PUSH
47126: EMPTY
47127: LIST
47128: LIST
47129: LIST
47130: LIST
47131: LIST
47132: LIST
47133: LIST
47134: LIST
47135: LIST
47136: LIST
47137: LIST
47138: LIST
47139: LIST
47140: LIST
47141: LIST
47142: LIST
47143: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47144: LD_ADDR_VAR 0 13
47148: PUSH
47149: LD_INT 0
47151: PUSH
47152: LD_INT 0
47154: PUSH
47155: EMPTY
47156: LIST
47157: LIST
47158: PUSH
47159: LD_INT 0
47161: PUSH
47162: LD_INT 1
47164: NEG
47165: PUSH
47166: EMPTY
47167: LIST
47168: LIST
47169: PUSH
47170: LD_INT 1
47172: PUSH
47173: LD_INT 0
47175: PUSH
47176: EMPTY
47177: LIST
47178: LIST
47179: PUSH
47180: LD_INT 1
47182: PUSH
47183: LD_INT 1
47185: PUSH
47186: EMPTY
47187: LIST
47188: LIST
47189: PUSH
47190: LD_INT 0
47192: PUSH
47193: LD_INT 1
47195: PUSH
47196: EMPTY
47197: LIST
47198: LIST
47199: PUSH
47200: LD_INT 1
47202: NEG
47203: PUSH
47204: LD_INT 0
47206: PUSH
47207: EMPTY
47208: LIST
47209: LIST
47210: PUSH
47211: LD_INT 1
47213: NEG
47214: PUSH
47215: LD_INT 1
47217: NEG
47218: PUSH
47219: EMPTY
47220: LIST
47221: LIST
47222: PUSH
47223: LD_INT 1
47225: NEG
47226: PUSH
47227: LD_INT 2
47229: NEG
47230: PUSH
47231: EMPTY
47232: LIST
47233: LIST
47234: PUSH
47235: LD_INT 2
47237: PUSH
47238: LD_INT 1
47240: PUSH
47241: EMPTY
47242: LIST
47243: LIST
47244: PUSH
47245: LD_INT 2
47247: PUSH
47248: LD_INT 2
47250: PUSH
47251: EMPTY
47252: LIST
47253: LIST
47254: PUSH
47255: LD_INT 1
47257: PUSH
47258: LD_INT 2
47260: PUSH
47261: EMPTY
47262: LIST
47263: LIST
47264: PUSH
47265: LD_INT 2
47267: NEG
47268: PUSH
47269: LD_INT 1
47271: NEG
47272: PUSH
47273: EMPTY
47274: LIST
47275: LIST
47276: PUSH
47277: LD_INT 2
47279: NEG
47280: PUSH
47281: LD_INT 2
47283: NEG
47284: PUSH
47285: EMPTY
47286: LIST
47287: LIST
47288: PUSH
47289: LD_INT 2
47291: NEG
47292: PUSH
47293: LD_INT 3
47295: NEG
47296: PUSH
47297: EMPTY
47298: LIST
47299: LIST
47300: PUSH
47301: LD_INT 3
47303: NEG
47304: PUSH
47305: LD_INT 2
47307: NEG
47308: PUSH
47309: EMPTY
47310: LIST
47311: LIST
47312: PUSH
47313: LD_INT 3
47315: NEG
47316: PUSH
47317: LD_INT 3
47319: NEG
47320: PUSH
47321: EMPTY
47322: LIST
47323: LIST
47324: PUSH
47325: EMPTY
47326: LIST
47327: LIST
47328: LIST
47329: LIST
47330: LIST
47331: LIST
47332: LIST
47333: LIST
47334: LIST
47335: LIST
47336: LIST
47337: LIST
47338: LIST
47339: LIST
47340: LIST
47341: LIST
47342: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47343: LD_ADDR_VAR 0 14
47347: PUSH
47348: LD_INT 0
47350: PUSH
47351: LD_INT 0
47353: PUSH
47354: EMPTY
47355: LIST
47356: LIST
47357: PUSH
47358: LD_INT 0
47360: PUSH
47361: LD_INT 1
47363: NEG
47364: PUSH
47365: EMPTY
47366: LIST
47367: LIST
47368: PUSH
47369: LD_INT 1
47371: PUSH
47372: LD_INT 0
47374: PUSH
47375: EMPTY
47376: LIST
47377: LIST
47378: PUSH
47379: LD_INT 1
47381: PUSH
47382: LD_INT 1
47384: PUSH
47385: EMPTY
47386: LIST
47387: LIST
47388: PUSH
47389: LD_INT 0
47391: PUSH
47392: LD_INT 1
47394: PUSH
47395: EMPTY
47396: LIST
47397: LIST
47398: PUSH
47399: LD_INT 1
47401: NEG
47402: PUSH
47403: LD_INT 0
47405: PUSH
47406: EMPTY
47407: LIST
47408: LIST
47409: PUSH
47410: LD_INT 1
47412: NEG
47413: PUSH
47414: LD_INT 1
47416: NEG
47417: PUSH
47418: EMPTY
47419: LIST
47420: LIST
47421: PUSH
47422: LD_INT 1
47424: NEG
47425: PUSH
47426: LD_INT 2
47428: NEG
47429: PUSH
47430: EMPTY
47431: LIST
47432: LIST
47433: PUSH
47434: LD_INT 0
47436: PUSH
47437: LD_INT 2
47439: NEG
47440: PUSH
47441: EMPTY
47442: LIST
47443: LIST
47444: PUSH
47445: LD_INT 1
47447: PUSH
47448: LD_INT 1
47450: NEG
47451: PUSH
47452: EMPTY
47453: LIST
47454: LIST
47455: PUSH
47456: LD_INT 1
47458: PUSH
47459: LD_INT 2
47461: PUSH
47462: EMPTY
47463: LIST
47464: LIST
47465: PUSH
47466: LD_INT 0
47468: PUSH
47469: LD_INT 2
47471: PUSH
47472: EMPTY
47473: LIST
47474: LIST
47475: PUSH
47476: LD_INT 1
47478: NEG
47479: PUSH
47480: LD_INT 1
47482: PUSH
47483: EMPTY
47484: LIST
47485: LIST
47486: PUSH
47487: LD_INT 1
47489: NEG
47490: PUSH
47491: LD_INT 3
47493: NEG
47494: PUSH
47495: EMPTY
47496: LIST
47497: LIST
47498: PUSH
47499: LD_INT 0
47501: PUSH
47502: LD_INT 3
47504: NEG
47505: PUSH
47506: EMPTY
47507: LIST
47508: LIST
47509: PUSH
47510: LD_INT 1
47512: PUSH
47513: LD_INT 2
47515: NEG
47516: PUSH
47517: EMPTY
47518: LIST
47519: LIST
47520: PUSH
47521: EMPTY
47522: LIST
47523: LIST
47524: LIST
47525: LIST
47526: LIST
47527: LIST
47528: LIST
47529: LIST
47530: LIST
47531: LIST
47532: LIST
47533: LIST
47534: LIST
47535: LIST
47536: LIST
47537: LIST
47538: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47539: LD_ADDR_VAR 0 15
47543: PUSH
47544: LD_INT 0
47546: PUSH
47547: LD_INT 0
47549: PUSH
47550: EMPTY
47551: LIST
47552: LIST
47553: PUSH
47554: LD_INT 0
47556: PUSH
47557: LD_INT 1
47559: NEG
47560: PUSH
47561: EMPTY
47562: LIST
47563: LIST
47564: PUSH
47565: LD_INT 1
47567: PUSH
47568: LD_INT 0
47570: PUSH
47571: EMPTY
47572: LIST
47573: LIST
47574: PUSH
47575: LD_INT 1
47577: PUSH
47578: LD_INT 1
47580: PUSH
47581: EMPTY
47582: LIST
47583: LIST
47584: PUSH
47585: LD_INT 0
47587: PUSH
47588: LD_INT 1
47590: PUSH
47591: EMPTY
47592: LIST
47593: LIST
47594: PUSH
47595: LD_INT 1
47597: NEG
47598: PUSH
47599: LD_INT 0
47601: PUSH
47602: EMPTY
47603: LIST
47604: LIST
47605: PUSH
47606: LD_INT 1
47608: NEG
47609: PUSH
47610: LD_INT 1
47612: NEG
47613: PUSH
47614: EMPTY
47615: LIST
47616: LIST
47617: PUSH
47618: LD_INT 1
47620: PUSH
47621: LD_INT 1
47623: NEG
47624: PUSH
47625: EMPTY
47626: LIST
47627: LIST
47628: PUSH
47629: LD_INT 2
47631: PUSH
47632: LD_INT 0
47634: PUSH
47635: EMPTY
47636: LIST
47637: LIST
47638: PUSH
47639: LD_INT 2
47641: PUSH
47642: LD_INT 1
47644: PUSH
47645: EMPTY
47646: LIST
47647: LIST
47648: PUSH
47649: LD_INT 1
47651: NEG
47652: PUSH
47653: LD_INT 1
47655: PUSH
47656: EMPTY
47657: LIST
47658: LIST
47659: PUSH
47660: LD_INT 2
47662: NEG
47663: PUSH
47664: LD_INT 0
47666: PUSH
47667: EMPTY
47668: LIST
47669: LIST
47670: PUSH
47671: LD_INT 2
47673: NEG
47674: PUSH
47675: LD_INT 1
47677: NEG
47678: PUSH
47679: EMPTY
47680: LIST
47681: LIST
47682: PUSH
47683: LD_INT 2
47685: PUSH
47686: LD_INT 1
47688: NEG
47689: PUSH
47690: EMPTY
47691: LIST
47692: LIST
47693: PUSH
47694: LD_INT 3
47696: PUSH
47697: LD_INT 0
47699: PUSH
47700: EMPTY
47701: LIST
47702: LIST
47703: PUSH
47704: LD_INT 3
47706: PUSH
47707: LD_INT 1
47709: PUSH
47710: EMPTY
47711: LIST
47712: LIST
47713: PUSH
47714: EMPTY
47715: LIST
47716: LIST
47717: LIST
47718: LIST
47719: LIST
47720: LIST
47721: LIST
47722: LIST
47723: LIST
47724: LIST
47725: LIST
47726: LIST
47727: LIST
47728: LIST
47729: LIST
47730: LIST
47731: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47732: LD_ADDR_VAR 0 16
47736: PUSH
47737: LD_INT 0
47739: PUSH
47740: LD_INT 0
47742: PUSH
47743: EMPTY
47744: LIST
47745: LIST
47746: PUSH
47747: LD_INT 0
47749: PUSH
47750: LD_INT 1
47752: NEG
47753: PUSH
47754: EMPTY
47755: LIST
47756: LIST
47757: PUSH
47758: LD_INT 1
47760: PUSH
47761: LD_INT 0
47763: PUSH
47764: EMPTY
47765: LIST
47766: LIST
47767: PUSH
47768: LD_INT 1
47770: PUSH
47771: LD_INT 1
47773: PUSH
47774: EMPTY
47775: LIST
47776: LIST
47777: PUSH
47778: LD_INT 0
47780: PUSH
47781: LD_INT 1
47783: PUSH
47784: EMPTY
47785: LIST
47786: LIST
47787: PUSH
47788: LD_INT 1
47790: NEG
47791: PUSH
47792: LD_INT 0
47794: PUSH
47795: EMPTY
47796: LIST
47797: LIST
47798: PUSH
47799: LD_INT 1
47801: NEG
47802: PUSH
47803: LD_INT 1
47805: NEG
47806: PUSH
47807: EMPTY
47808: LIST
47809: LIST
47810: PUSH
47811: LD_INT 1
47813: NEG
47814: PUSH
47815: LD_INT 2
47817: NEG
47818: PUSH
47819: EMPTY
47820: LIST
47821: LIST
47822: PUSH
47823: LD_INT 2
47825: PUSH
47826: LD_INT 1
47828: PUSH
47829: EMPTY
47830: LIST
47831: LIST
47832: PUSH
47833: LD_INT 2
47835: PUSH
47836: LD_INT 2
47838: PUSH
47839: EMPTY
47840: LIST
47841: LIST
47842: PUSH
47843: LD_INT 1
47845: PUSH
47846: LD_INT 2
47848: PUSH
47849: EMPTY
47850: LIST
47851: LIST
47852: PUSH
47853: LD_INT 2
47855: NEG
47856: PUSH
47857: LD_INT 1
47859: NEG
47860: PUSH
47861: EMPTY
47862: LIST
47863: LIST
47864: PUSH
47865: LD_INT 2
47867: NEG
47868: PUSH
47869: LD_INT 2
47871: NEG
47872: PUSH
47873: EMPTY
47874: LIST
47875: LIST
47876: PUSH
47877: LD_INT 3
47879: PUSH
47880: LD_INT 2
47882: PUSH
47883: EMPTY
47884: LIST
47885: LIST
47886: PUSH
47887: LD_INT 3
47889: PUSH
47890: LD_INT 3
47892: PUSH
47893: EMPTY
47894: LIST
47895: LIST
47896: PUSH
47897: LD_INT 2
47899: PUSH
47900: LD_INT 3
47902: PUSH
47903: EMPTY
47904: LIST
47905: LIST
47906: PUSH
47907: EMPTY
47908: LIST
47909: LIST
47910: LIST
47911: LIST
47912: LIST
47913: LIST
47914: LIST
47915: LIST
47916: LIST
47917: LIST
47918: LIST
47919: LIST
47920: LIST
47921: LIST
47922: LIST
47923: LIST
47924: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47925: LD_ADDR_VAR 0 17
47929: PUSH
47930: LD_INT 0
47932: PUSH
47933: LD_INT 0
47935: PUSH
47936: EMPTY
47937: LIST
47938: LIST
47939: PUSH
47940: LD_INT 0
47942: PUSH
47943: LD_INT 1
47945: NEG
47946: PUSH
47947: EMPTY
47948: LIST
47949: LIST
47950: PUSH
47951: LD_INT 1
47953: PUSH
47954: LD_INT 0
47956: PUSH
47957: EMPTY
47958: LIST
47959: LIST
47960: PUSH
47961: LD_INT 1
47963: PUSH
47964: LD_INT 1
47966: PUSH
47967: EMPTY
47968: LIST
47969: LIST
47970: PUSH
47971: LD_INT 0
47973: PUSH
47974: LD_INT 1
47976: PUSH
47977: EMPTY
47978: LIST
47979: LIST
47980: PUSH
47981: LD_INT 1
47983: NEG
47984: PUSH
47985: LD_INT 0
47987: PUSH
47988: EMPTY
47989: LIST
47990: LIST
47991: PUSH
47992: LD_INT 1
47994: NEG
47995: PUSH
47996: LD_INT 1
47998: NEG
47999: PUSH
48000: EMPTY
48001: LIST
48002: LIST
48003: PUSH
48004: LD_INT 1
48006: NEG
48007: PUSH
48008: LD_INT 2
48010: NEG
48011: PUSH
48012: EMPTY
48013: LIST
48014: LIST
48015: PUSH
48016: LD_INT 0
48018: PUSH
48019: LD_INT 2
48021: NEG
48022: PUSH
48023: EMPTY
48024: LIST
48025: LIST
48026: PUSH
48027: LD_INT 1
48029: PUSH
48030: LD_INT 1
48032: NEG
48033: PUSH
48034: EMPTY
48035: LIST
48036: LIST
48037: PUSH
48038: LD_INT 2
48040: PUSH
48041: LD_INT 0
48043: PUSH
48044: EMPTY
48045: LIST
48046: LIST
48047: PUSH
48048: LD_INT 2
48050: PUSH
48051: LD_INT 1
48053: PUSH
48054: EMPTY
48055: LIST
48056: LIST
48057: PUSH
48058: LD_INT 2
48060: PUSH
48061: LD_INT 2
48063: PUSH
48064: EMPTY
48065: LIST
48066: LIST
48067: PUSH
48068: LD_INT 1
48070: PUSH
48071: LD_INT 2
48073: PUSH
48074: EMPTY
48075: LIST
48076: LIST
48077: PUSH
48078: LD_INT 0
48080: PUSH
48081: LD_INT 2
48083: PUSH
48084: EMPTY
48085: LIST
48086: LIST
48087: PUSH
48088: LD_INT 1
48090: NEG
48091: PUSH
48092: LD_INT 1
48094: PUSH
48095: EMPTY
48096: LIST
48097: LIST
48098: PUSH
48099: LD_INT 2
48101: NEG
48102: PUSH
48103: LD_INT 0
48105: PUSH
48106: EMPTY
48107: LIST
48108: LIST
48109: PUSH
48110: LD_INT 2
48112: NEG
48113: PUSH
48114: LD_INT 1
48116: NEG
48117: PUSH
48118: EMPTY
48119: LIST
48120: LIST
48121: PUSH
48122: LD_INT 2
48124: NEG
48125: PUSH
48126: LD_INT 2
48128: NEG
48129: PUSH
48130: EMPTY
48131: LIST
48132: LIST
48133: PUSH
48134: EMPTY
48135: LIST
48136: LIST
48137: LIST
48138: LIST
48139: LIST
48140: LIST
48141: LIST
48142: LIST
48143: LIST
48144: LIST
48145: LIST
48146: LIST
48147: LIST
48148: LIST
48149: LIST
48150: LIST
48151: LIST
48152: LIST
48153: LIST
48154: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48155: LD_ADDR_VAR 0 18
48159: PUSH
48160: LD_INT 0
48162: PUSH
48163: LD_INT 0
48165: PUSH
48166: EMPTY
48167: LIST
48168: LIST
48169: PUSH
48170: LD_INT 0
48172: PUSH
48173: LD_INT 1
48175: NEG
48176: PUSH
48177: EMPTY
48178: LIST
48179: LIST
48180: PUSH
48181: LD_INT 1
48183: PUSH
48184: LD_INT 0
48186: PUSH
48187: EMPTY
48188: LIST
48189: LIST
48190: PUSH
48191: LD_INT 1
48193: PUSH
48194: LD_INT 1
48196: PUSH
48197: EMPTY
48198: LIST
48199: LIST
48200: PUSH
48201: LD_INT 0
48203: PUSH
48204: LD_INT 1
48206: PUSH
48207: EMPTY
48208: LIST
48209: LIST
48210: PUSH
48211: LD_INT 1
48213: NEG
48214: PUSH
48215: LD_INT 0
48217: PUSH
48218: EMPTY
48219: LIST
48220: LIST
48221: PUSH
48222: LD_INT 1
48224: NEG
48225: PUSH
48226: LD_INT 1
48228: NEG
48229: PUSH
48230: EMPTY
48231: LIST
48232: LIST
48233: PUSH
48234: LD_INT 1
48236: NEG
48237: PUSH
48238: LD_INT 2
48240: NEG
48241: PUSH
48242: EMPTY
48243: LIST
48244: LIST
48245: PUSH
48246: LD_INT 0
48248: PUSH
48249: LD_INT 2
48251: NEG
48252: PUSH
48253: EMPTY
48254: LIST
48255: LIST
48256: PUSH
48257: LD_INT 1
48259: PUSH
48260: LD_INT 1
48262: NEG
48263: PUSH
48264: EMPTY
48265: LIST
48266: LIST
48267: PUSH
48268: LD_INT 2
48270: PUSH
48271: LD_INT 0
48273: PUSH
48274: EMPTY
48275: LIST
48276: LIST
48277: PUSH
48278: LD_INT 2
48280: PUSH
48281: LD_INT 1
48283: PUSH
48284: EMPTY
48285: LIST
48286: LIST
48287: PUSH
48288: LD_INT 2
48290: PUSH
48291: LD_INT 2
48293: PUSH
48294: EMPTY
48295: LIST
48296: LIST
48297: PUSH
48298: LD_INT 1
48300: PUSH
48301: LD_INT 2
48303: PUSH
48304: EMPTY
48305: LIST
48306: LIST
48307: PUSH
48308: LD_INT 0
48310: PUSH
48311: LD_INT 2
48313: PUSH
48314: EMPTY
48315: LIST
48316: LIST
48317: PUSH
48318: LD_INT 1
48320: NEG
48321: PUSH
48322: LD_INT 1
48324: PUSH
48325: EMPTY
48326: LIST
48327: LIST
48328: PUSH
48329: LD_INT 2
48331: NEG
48332: PUSH
48333: LD_INT 0
48335: PUSH
48336: EMPTY
48337: LIST
48338: LIST
48339: PUSH
48340: LD_INT 2
48342: NEG
48343: PUSH
48344: LD_INT 1
48346: NEG
48347: PUSH
48348: EMPTY
48349: LIST
48350: LIST
48351: PUSH
48352: LD_INT 2
48354: NEG
48355: PUSH
48356: LD_INT 2
48358: NEG
48359: PUSH
48360: EMPTY
48361: LIST
48362: LIST
48363: PUSH
48364: EMPTY
48365: LIST
48366: LIST
48367: LIST
48368: LIST
48369: LIST
48370: LIST
48371: LIST
48372: LIST
48373: LIST
48374: LIST
48375: LIST
48376: LIST
48377: LIST
48378: LIST
48379: LIST
48380: LIST
48381: LIST
48382: LIST
48383: LIST
48384: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48385: LD_ADDR_VAR 0 19
48389: PUSH
48390: LD_INT 0
48392: PUSH
48393: LD_INT 0
48395: PUSH
48396: EMPTY
48397: LIST
48398: LIST
48399: PUSH
48400: LD_INT 0
48402: PUSH
48403: LD_INT 1
48405: NEG
48406: PUSH
48407: EMPTY
48408: LIST
48409: LIST
48410: PUSH
48411: LD_INT 1
48413: PUSH
48414: LD_INT 0
48416: PUSH
48417: EMPTY
48418: LIST
48419: LIST
48420: PUSH
48421: LD_INT 1
48423: PUSH
48424: LD_INT 1
48426: PUSH
48427: EMPTY
48428: LIST
48429: LIST
48430: PUSH
48431: LD_INT 0
48433: PUSH
48434: LD_INT 1
48436: PUSH
48437: EMPTY
48438: LIST
48439: LIST
48440: PUSH
48441: LD_INT 1
48443: NEG
48444: PUSH
48445: LD_INT 0
48447: PUSH
48448: EMPTY
48449: LIST
48450: LIST
48451: PUSH
48452: LD_INT 1
48454: NEG
48455: PUSH
48456: LD_INT 1
48458: NEG
48459: PUSH
48460: EMPTY
48461: LIST
48462: LIST
48463: PUSH
48464: LD_INT 1
48466: NEG
48467: PUSH
48468: LD_INT 2
48470: NEG
48471: PUSH
48472: EMPTY
48473: LIST
48474: LIST
48475: PUSH
48476: LD_INT 0
48478: PUSH
48479: LD_INT 2
48481: NEG
48482: PUSH
48483: EMPTY
48484: LIST
48485: LIST
48486: PUSH
48487: LD_INT 1
48489: PUSH
48490: LD_INT 1
48492: NEG
48493: PUSH
48494: EMPTY
48495: LIST
48496: LIST
48497: PUSH
48498: LD_INT 2
48500: PUSH
48501: LD_INT 0
48503: PUSH
48504: EMPTY
48505: LIST
48506: LIST
48507: PUSH
48508: LD_INT 2
48510: PUSH
48511: LD_INT 1
48513: PUSH
48514: EMPTY
48515: LIST
48516: LIST
48517: PUSH
48518: LD_INT 2
48520: PUSH
48521: LD_INT 2
48523: PUSH
48524: EMPTY
48525: LIST
48526: LIST
48527: PUSH
48528: LD_INT 1
48530: PUSH
48531: LD_INT 2
48533: PUSH
48534: EMPTY
48535: LIST
48536: LIST
48537: PUSH
48538: LD_INT 0
48540: PUSH
48541: LD_INT 2
48543: PUSH
48544: EMPTY
48545: LIST
48546: LIST
48547: PUSH
48548: LD_INT 1
48550: NEG
48551: PUSH
48552: LD_INT 1
48554: PUSH
48555: EMPTY
48556: LIST
48557: LIST
48558: PUSH
48559: LD_INT 2
48561: NEG
48562: PUSH
48563: LD_INT 0
48565: PUSH
48566: EMPTY
48567: LIST
48568: LIST
48569: PUSH
48570: LD_INT 2
48572: NEG
48573: PUSH
48574: LD_INT 1
48576: NEG
48577: PUSH
48578: EMPTY
48579: LIST
48580: LIST
48581: PUSH
48582: LD_INT 2
48584: NEG
48585: PUSH
48586: LD_INT 2
48588: NEG
48589: PUSH
48590: EMPTY
48591: LIST
48592: LIST
48593: PUSH
48594: EMPTY
48595: LIST
48596: LIST
48597: LIST
48598: LIST
48599: LIST
48600: LIST
48601: LIST
48602: LIST
48603: LIST
48604: LIST
48605: LIST
48606: LIST
48607: LIST
48608: LIST
48609: LIST
48610: LIST
48611: LIST
48612: LIST
48613: LIST
48614: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48615: LD_ADDR_VAR 0 20
48619: PUSH
48620: LD_INT 0
48622: PUSH
48623: LD_INT 0
48625: PUSH
48626: EMPTY
48627: LIST
48628: LIST
48629: PUSH
48630: LD_INT 0
48632: PUSH
48633: LD_INT 1
48635: NEG
48636: PUSH
48637: EMPTY
48638: LIST
48639: LIST
48640: PUSH
48641: LD_INT 1
48643: PUSH
48644: LD_INT 0
48646: PUSH
48647: EMPTY
48648: LIST
48649: LIST
48650: PUSH
48651: LD_INT 1
48653: PUSH
48654: LD_INT 1
48656: PUSH
48657: EMPTY
48658: LIST
48659: LIST
48660: PUSH
48661: LD_INT 0
48663: PUSH
48664: LD_INT 1
48666: PUSH
48667: EMPTY
48668: LIST
48669: LIST
48670: PUSH
48671: LD_INT 1
48673: NEG
48674: PUSH
48675: LD_INT 0
48677: PUSH
48678: EMPTY
48679: LIST
48680: LIST
48681: PUSH
48682: LD_INT 1
48684: NEG
48685: PUSH
48686: LD_INT 1
48688: NEG
48689: PUSH
48690: EMPTY
48691: LIST
48692: LIST
48693: PUSH
48694: LD_INT 1
48696: NEG
48697: PUSH
48698: LD_INT 2
48700: NEG
48701: PUSH
48702: EMPTY
48703: LIST
48704: LIST
48705: PUSH
48706: LD_INT 0
48708: PUSH
48709: LD_INT 2
48711: NEG
48712: PUSH
48713: EMPTY
48714: LIST
48715: LIST
48716: PUSH
48717: LD_INT 1
48719: PUSH
48720: LD_INT 1
48722: NEG
48723: PUSH
48724: EMPTY
48725: LIST
48726: LIST
48727: PUSH
48728: LD_INT 2
48730: PUSH
48731: LD_INT 0
48733: PUSH
48734: EMPTY
48735: LIST
48736: LIST
48737: PUSH
48738: LD_INT 2
48740: PUSH
48741: LD_INT 1
48743: PUSH
48744: EMPTY
48745: LIST
48746: LIST
48747: PUSH
48748: LD_INT 2
48750: PUSH
48751: LD_INT 2
48753: PUSH
48754: EMPTY
48755: LIST
48756: LIST
48757: PUSH
48758: LD_INT 1
48760: PUSH
48761: LD_INT 2
48763: PUSH
48764: EMPTY
48765: LIST
48766: LIST
48767: PUSH
48768: LD_INT 0
48770: PUSH
48771: LD_INT 2
48773: PUSH
48774: EMPTY
48775: LIST
48776: LIST
48777: PUSH
48778: LD_INT 1
48780: NEG
48781: PUSH
48782: LD_INT 1
48784: PUSH
48785: EMPTY
48786: LIST
48787: LIST
48788: PUSH
48789: LD_INT 2
48791: NEG
48792: PUSH
48793: LD_INT 0
48795: PUSH
48796: EMPTY
48797: LIST
48798: LIST
48799: PUSH
48800: LD_INT 2
48802: NEG
48803: PUSH
48804: LD_INT 1
48806: NEG
48807: PUSH
48808: EMPTY
48809: LIST
48810: LIST
48811: PUSH
48812: LD_INT 2
48814: NEG
48815: PUSH
48816: LD_INT 2
48818: NEG
48819: PUSH
48820: EMPTY
48821: LIST
48822: LIST
48823: PUSH
48824: EMPTY
48825: LIST
48826: LIST
48827: LIST
48828: LIST
48829: LIST
48830: LIST
48831: LIST
48832: LIST
48833: LIST
48834: LIST
48835: LIST
48836: LIST
48837: LIST
48838: LIST
48839: LIST
48840: LIST
48841: LIST
48842: LIST
48843: LIST
48844: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48845: LD_ADDR_VAR 0 21
48849: PUSH
48850: LD_INT 0
48852: PUSH
48853: LD_INT 0
48855: PUSH
48856: EMPTY
48857: LIST
48858: LIST
48859: PUSH
48860: LD_INT 0
48862: PUSH
48863: LD_INT 1
48865: NEG
48866: PUSH
48867: EMPTY
48868: LIST
48869: LIST
48870: PUSH
48871: LD_INT 1
48873: PUSH
48874: LD_INT 0
48876: PUSH
48877: EMPTY
48878: LIST
48879: LIST
48880: PUSH
48881: LD_INT 1
48883: PUSH
48884: LD_INT 1
48886: PUSH
48887: EMPTY
48888: LIST
48889: LIST
48890: PUSH
48891: LD_INT 0
48893: PUSH
48894: LD_INT 1
48896: PUSH
48897: EMPTY
48898: LIST
48899: LIST
48900: PUSH
48901: LD_INT 1
48903: NEG
48904: PUSH
48905: LD_INT 0
48907: PUSH
48908: EMPTY
48909: LIST
48910: LIST
48911: PUSH
48912: LD_INT 1
48914: NEG
48915: PUSH
48916: LD_INT 1
48918: NEG
48919: PUSH
48920: EMPTY
48921: LIST
48922: LIST
48923: PUSH
48924: LD_INT 1
48926: NEG
48927: PUSH
48928: LD_INT 2
48930: NEG
48931: PUSH
48932: EMPTY
48933: LIST
48934: LIST
48935: PUSH
48936: LD_INT 0
48938: PUSH
48939: LD_INT 2
48941: NEG
48942: PUSH
48943: EMPTY
48944: LIST
48945: LIST
48946: PUSH
48947: LD_INT 1
48949: PUSH
48950: LD_INT 1
48952: NEG
48953: PUSH
48954: EMPTY
48955: LIST
48956: LIST
48957: PUSH
48958: LD_INT 2
48960: PUSH
48961: LD_INT 0
48963: PUSH
48964: EMPTY
48965: LIST
48966: LIST
48967: PUSH
48968: LD_INT 2
48970: PUSH
48971: LD_INT 1
48973: PUSH
48974: EMPTY
48975: LIST
48976: LIST
48977: PUSH
48978: LD_INT 2
48980: PUSH
48981: LD_INT 2
48983: PUSH
48984: EMPTY
48985: LIST
48986: LIST
48987: PUSH
48988: LD_INT 1
48990: PUSH
48991: LD_INT 2
48993: PUSH
48994: EMPTY
48995: LIST
48996: LIST
48997: PUSH
48998: LD_INT 0
49000: PUSH
49001: LD_INT 2
49003: PUSH
49004: EMPTY
49005: LIST
49006: LIST
49007: PUSH
49008: LD_INT 1
49010: NEG
49011: PUSH
49012: LD_INT 1
49014: PUSH
49015: EMPTY
49016: LIST
49017: LIST
49018: PUSH
49019: LD_INT 2
49021: NEG
49022: PUSH
49023: LD_INT 0
49025: PUSH
49026: EMPTY
49027: LIST
49028: LIST
49029: PUSH
49030: LD_INT 2
49032: NEG
49033: PUSH
49034: LD_INT 1
49036: NEG
49037: PUSH
49038: EMPTY
49039: LIST
49040: LIST
49041: PUSH
49042: LD_INT 2
49044: NEG
49045: PUSH
49046: LD_INT 2
49048: NEG
49049: PUSH
49050: EMPTY
49051: LIST
49052: LIST
49053: PUSH
49054: EMPTY
49055: LIST
49056: LIST
49057: LIST
49058: LIST
49059: LIST
49060: LIST
49061: LIST
49062: LIST
49063: LIST
49064: LIST
49065: LIST
49066: LIST
49067: LIST
49068: LIST
49069: LIST
49070: LIST
49071: LIST
49072: LIST
49073: LIST
49074: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49075: LD_ADDR_VAR 0 22
49079: PUSH
49080: LD_INT 0
49082: PUSH
49083: LD_INT 0
49085: PUSH
49086: EMPTY
49087: LIST
49088: LIST
49089: PUSH
49090: LD_INT 0
49092: PUSH
49093: LD_INT 1
49095: NEG
49096: PUSH
49097: EMPTY
49098: LIST
49099: LIST
49100: PUSH
49101: LD_INT 1
49103: PUSH
49104: LD_INT 0
49106: PUSH
49107: EMPTY
49108: LIST
49109: LIST
49110: PUSH
49111: LD_INT 1
49113: PUSH
49114: LD_INT 1
49116: PUSH
49117: EMPTY
49118: LIST
49119: LIST
49120: PUSH
49121: LD_INT 0
49123: PUSH
49124: LD_INT 1
49126: PUSH
49127: EMPTY
49128: LIST
49129: LIST
49130: PUSH
49131: LD_INT 1
49133: NEG
49134: PUSH
49135: LD_INT 0
49137: PUSH
49138: EMPTY
49139: LIST
49140: LIST
49141: PUSH
49142: LD_INT 1
49144: NEG
49145: PUSH
49146: LD_INT 1
49148: NEG
49149: PUSH
49150: EMPTY
49151: LIST
49152: LIST
49153: PUSH
49154: LD_INT 1
49156: NEG
49157: PUSH
49158: LD_INT 2
49160: NEG
49161: PUSH
49162: EMPTY
49163: LIST
49164: LIST
49165: PUSH
49166: LD_INT 0
49168: PUSH
49169: LD_INT 2
49171: NEG
49172: PUSH
49173: EMPTY
49174: LIST
49175: LIST
49176: PUSH
49177: LD_INT 1
49179: PUSH
49180: LD_INT 1
49182: NEG
49183: PUSH
49184: EMPTY
49185: LIST
49186: LIST
49187: PUSH
49188: LD_INT 2
49190: PUSH
49191: LD_INT 0
49193: PUSH
49194: EMPTY
49195: LIST
49196: LIST
49197: PUSH
49198: LD_INT 2
49200: PUSH
49201: LD_INT 1
49203: PUSH
49204: EMPTY
49205: LIST
49206: LIST
49207: PUSH
49208: LD_INT 2
49210: PUSH
49211: LD_INT 2
49213: PUSH
49214: EMPTY
49215: LIST
49216: LIST
49217: PUSH
49218: LD_INT 1
49220: PUSH
49221: LD_INT 2
49223: PUSH
49224: EMPTY
49225: LIST
49226: LIST
49227: PUSH
49228: LD_INT 0
49230: PUSH
49231: LD_INT 2
49233: PUSH
49234: EMPTY
49235: LIST
49236: LIST
49237: PUSH
49238: LD_INT 1
49240: NEG
49241: PUSH
49242: LD_INT 1
49244: PUSH
49245: EMPTY
49246: LIST
49247: LIST
49248: PUSH
49249: LD_INT 2
49251: NEG
49252: PUSH
49253: LD_INT 0
49255: PUSH
49256: EMPTY
49257: LIST
49258: LIST
49259: PUSH
49260: LD_INT 2
49262: NEG
49263: PUSH
49264: LD_INT 1
49266: NEG
49267: PUSH
49268: EMPTY
49269: LIST
49270: LIST
49271: PUSH
49272: LD_INT 2
49274: NEG
49275: PUSH
49276: LD_INT 2
49278: NEG
49279: PUSH
49280: EMPTY
49281: LIST
49282: LIST
49283: PUSH
49284: EMPTY
49285: LIST
49286: LIST
49287: LIST
49288: LIST
49289: LIST
49290: LIST
49291: LIST
49292: LIST
49293: LIST
49294: LIST
49295: LIST
49296: LIST
49297: LIST
49298: LIST
49299: LIST
49300: LIST
49301: LIST
49302: LIST
49303: LIST
49304: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
49305: LD_ADDR_VAR 0 23
49309: PUSH
49310: LD_INT 0
49312: PUSH
49313: LD_INT 0
49315: PUSH
49316: EMPTY
49317: LIST
49318: LIST
49319: PUSH
49320: LD_INT 0
49322: PUSH
49323: LD_INT 1
49325: NEG
49326: PUSH
49327: EMPTY
49328: LIST
49329: LIST
49330: PUSH
49331: LD_INT 1
49333: PUSH
49334: LD_INT 0
49336: PUSH
49337: EMPTY
49338: LIST
49339: LIST
49340: PUSH
49341: LD_INT 1
49343: PUSH
49344: LD_INT 1
49346: PUSH
49347: EMPTY
49348: LIST
49349: LIST
49350: PUSH
49351: LD_INT 0
49353: PUSH
49354: LD_INT 1
49356: PUSH
49357: EMPTY
49358: LIST
49359: LIST
49360: PUSH
49361: LD_INT 1
49363: NEG
49364: PUSH
49365: LD_INT 0
49367: PUSH
49368: EMPTY
49369: LIST
49370: LIST
49371: PUSH
49372: LD_INT 1
49374: NEG
49375: PUSH
49376: LD_INT 1
49378: NEG
49379: PUSH
49380: EMPTY
49381: LIST
49382: LIST
49383: PUSH
49384: LD_INT 1
49386: NEG
49387: PUSH
49388: LD_INT 2
49390: NEG
49391: PUSH
49392: EMPTY
49393: LIST
49394: LIST
49395: PUSH
49396: LD_INT 0
49398: PUSH
49399: LD_INT 2
49401: NEG
49402: PUSH
49403: EMPTY
49404: LIST
49405: LIST
49406: PUSH
49407: LD_INT 1
49409: PUSH
49410: LD_INT 1
49412: NEG
49413: PUSH
49414: EMPTY
49415: LIST
49416: LIST
49417: PUSH
49418: LD_INT 2
49420: PUSH
49421: LD_INT 0
49423: PUSH
49424: EMPTY
49425: LIST
49426: LIST
49427: PUSH
49428: LD_INT 2
49430: PUSH
49431: LD_INT 1
49433: PUSH
49434: EMPTY
49435: LIST
49436: LIST
49437: PUSH
49438: LD_INT 2
49440: PUSH
49441: LD_INT 2
49443: PUSH
49444: EMPTY
49445: LIST
49446: LIST
49447: PUSH
49448: LD_INT 1
49450: PUSH
49451: LD_INT 2
49453: PUSH
49454: EMPTY
49455: LIST
49456: LIST
49457: PUSH
49458: LD_INT 0
49460: PUSH
49461: LD_INT 2
49463: PUSH
49464: EMPTY
49465: LIST
49466: LIST
49467: PUSH
49468: LD_INT 1
49470: NEG
49471: PUSH
49472: LD_INT 1
49474: PUSH
49475: EMPTY
49476: LIST
49477: LIST
49478: PUSH
49479: LD_INT 2
49481: NEG
49482: PUSH
49483: LD_INT 0
49485: PUSH
49486: EMPTY
49487: LIST
49488: LIST
49489: PUSH
49490: LD_INT 2
49492: NEG
49493: PUSH
49494: LD_INT 1
49496: NEG
49497: PUSH
49498: EMPTY
49499: LIST
49500: LIST
49501: PUSH
49502: LD_INT 2
49504: NEG
49505: PUSH
49506: LD_INT 2
49508: NEG
49509: PUSH
49510: EMPTY
49511: LIST
49512: LIST
49513: PUSH
49514: LD_INT 2
49516: NEG
49517: PUSH
49518: LD_INT 3
49520: NEG
49521: PUSH
49522: EMPTY
49523: LIST
49524: LIST
49525: PUSH
49526: LD_INT 1
49528: NEG
49529: PUSH
49530: LD_INT 3
49532: NEG
49533: PUSH
49534: EMPTY
49535: LIST
49536: LIST
49537: PUSH
49538: LD_INT 1
49540: PUSH
49541: LD_INT 2
49543: NEG
49544: PUSH
49545: EMPTY
49546: LIST
49547: LIST
49548: PUSH
49549: LD_INT 2
49551: PUSH
49552: LD_INT 1
49554: NEG
49555: PUSH
49556: EMPTY
49557: LIST
49558: LIST
49559: PUSH
49560: EMPTY
49561: LIST
49562: LIST
49563: LIST
49564: LIST
49565: LIST
49566: LIST
49567: LIST
49568: LIST
49569: LIST
49570: LIST
49571: LIST
49572: LIST
49573: LIST
49574: LIST
49575: LIST
49576: LIST
49577: LIST
49578: LIST
49579: LIST
49580: LIST
49581: LIST
49582: LIST
49583: LIST
49584: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
49585: LD_ADDR_VAR 0 24
49589: PUSH
49590: LD_INT 0
49592: PUSH
49593: LD_INT 0
49595: PUSH
49596: EMPTY
49597: LIST
49598: LIST
49599: PUSH
49600: LD_INT 0
49602: PUSH
49603: LD_INT 1
49605: NEG
49606: PUSH
49607: EMPTY
49608: LIST
49609: LIST
49610: PUSH
49611: LD_INT 1
49613: PUSH
49614: LD_INT 0
49616: PUSH
49617: EMPTY
49618: LIST
49619: LIST
49620: PUSH
49621: LD_INT 1
49623: PUSH
49624: LD_INT 1
49626: PUSH
49627: EMPTY
49628: LIST
49629: LIST
49630: PUSH
49631: LD_INT 0
49633: PUSH
49634: LD_INT 1
49636: PUSH
49637: EMPTY
49638: LIST
49639: LIST
49640: PUSH
49641: LD_INT 1
49643: NEG
49644: PUSH
49645: LD_INT 0
49647: PUSH
49648: EMPTY
49649: LIST
49650: LIST
49651: PUSH
49652: LD_INT 1
49654: NEG
49655: PUSH
49656: LD_INT 1
49658: NEG
49659: PUSH
49660: EMPTY
49661: LIST
49662: LIST
49663: PUSH
49664: LD_INT 1
49666: NEG
49667: PUSH
49668: LD_INT 2
49670: NEG
49671: PUSH
49672: EMPTY
49673: LIST
49674: LIST
49675: PUSH
49676: LD_INT 0
49678: PUSH
49679: LD_INT 2
49681: NEG
49682: PUSH
49683: EMPTY
49684: LIST
49685: LIST
49686: PUSH
49687: LD_INT 1
49689: PUSH
49690: LD_INT 1
49692: NEG
49693: PUSH
49694: EMPTY
49695: LIST
49696: LIST
49697: PUSH
49698: LD_INT 2
49700: PUSH
49701: LD_INT 0
49703: PUSH
49704: EMPTY
49705: LIST
49706: LIST
49707: PUSH
49708: LD_INT 2
49710: PUSH
49711: LD_INT 1
49713: PUSH
49714: EMPTY
49715: LIST
49716: LIST
49717: PUSH
49718: LD_INT 2
49720: PUSH
49721: LD_INT 2
49723: PUSH
49724: EMPTY
49725: LIST
49726: LIST
49727: PUSH
49728: LD_INT 1
49730: PUSH
49731: LD_INT 2
49733: PUSH
49734: EMPTY
49735: LIST
49736: LIST
49737: PUSH
49738: LD_INT 0
49740: PUSH
49741: LD_INT 2
49743: PUSH
49744: EMPTY
49745: LIST
49746: LIST
49747: PUSH
49748: LD_INT 1
49750: NEG
49751: PUSH
49752: LD_INT 1
49754: PUSH
49755: EMPTY
49756: LIST
49757: LIST
49758: PUSH
49759: LD_INT 2
49761: NEG
49762: PUSH
49763: LD_INT 0
49765: PUSH
49766: EMPTY
49767: LIST
49768: LIST
49769: PUSH
49770: LD_INT 2
49772: NEG
49773: PUSH
49774: LD_INT 1
49776: NEG
49777: PUSH
49778: EMPTY
49779: LIST
49780: LIST
49781: PUSH
49782: LD_INT 2
49784: NEG
49785: PUSH
49786: LD_INT 2
49788: NEG
49789: PUSH
49790: EMPTY
49791: LIST
49792: LIST
49793: PUSH
49794: LD_INT 1
49796: PUSH
49797: LD_INT 2
49799: NEG
49800: PUSH
49801: EMPTY
49802: LIST
49803: LIST
49804: PUSH
49805: LD_INT 2
49807: PUSH
49808: LD_INT 1
49810: NEG
49811: PUSH
49812: EMPTY
49813: LIST
49814: LIST
49815: PUSH
49816: LD_INT 3
49818: PUSH
49819: LD_INT 1
49821: PUSH
49822: EMPTY
49823: LIST
49824: LIST
49825: PUSH
49826: LD_INT 3
49828: PUSH
49829: LD_INT 2
49831: PUSH
49832: EMPTY
49833: LIST
49834: LIST
49835: PUSH
49836: EMPTY
49837: LIST
49838: LIST
49839: LIST
49840: LIST
49841: LIST
49842: LIST
49843: LIST
49844: LIST
49845: LIST
49846: LIST
49847: LIST
49848: LIST
49849: LIST
49850: LIST
49851: LIST
49852: LIST
49853: LIST
49854: LIST
49855: LIST
49856: LIST
49857: LIST
49858: LIST
49859: LIST
49860: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
49861: LD_ADDR_VAR 0 25
49865: PUSH
49866: LD_INT 0
49868: PUSH
49869: LD_INT 0
49871: PUSH
49872: EMPTY
49873: LIST
49874: LIST
49875: PUSH
49876: LD_INT 0
49878: PUSH
49879: LD_INT 1
49881: NEG
49882: PUSH
49883: EMPTY
49884: LIST
49885: LIST
49886: PUSH
49887: LD_INT 1
49889: PUSH
49890: LD_INT 0
49892: PUSH
49893: EMPTY
49894: LIST
49895: LIST
49896: PUSH
49897: LD_INT 1
49899: PUSH
49900: LD_INT 1
49902: PUSH
49903: EMPTY
49904: LIST
49905: LIST
49906: PUSH
49907: LD_INT 0
49909: PUSH
49910: LD_INT 1
49912: PUSH
49913: EMPTY
49914: LIST
49915: LIST
49916: PUSH
49917: LD_INT 1
49919: NEG
49920: PUSH
49921: LD_INT 0
49923: PUSH
49924: EMPTY
49925: LIST
49926: LIST
49927: PUSH
49928: LD_INT 1
49930: NEG
49931: PUSH
49932: LD_INT 1
49934: NEG
49935: PUSH
49936: EMPTY
49937: LIST
49938: LIST
49939: PUSH
49940: LD_INT 1
49942: NEG
49943: PUSH
49944: LD_INT 2
49946: NEG
49947: PUSH
49948: EMPTY
49949: LIST
49950: LIST
49951: PUSH
49952: LD_INT 0
49954: PUSH
49955: LD_INT 2
49957: NEG
49958: PUSH
49959: EMPTY
49960: LIST
49961: LIST
49962: PUSH
49963: LD_INT 1
49965: PUSH
49966: LD_INT 1
49968: NEG
49969: PUSH
49970: EMPTY
49971: LIST
49972: LIST
49973: PUSH
49974: LD_INT 2
49976: PUSH
49977: LD_INT 0
49979: PUSH
49980: EMPTY
49981: LIST
49982: LIST
49983: PUSH
49984: LD_INT 2
49986: PUSH
49987: LD_INT 1
49989: PUSH
49990: EMPTY
49991: LIST
49992: LIST
49993: PUSH
49994: LD_INT 2
49996: PUSH
49997: LD_INT 2
49999: PUSH
50000: EMPTY
50001: LIST
50002: LIST
50003: PUSH
50004: LD_INT 1
50006: PUSH
50007: LD_INT 2
50009: PUSH
50010: EMPTY
50011: LIST
50012: LIST
50013: PUSH
50014: LD_INT 0
50016: PUSH
50017: LD_INT 2
50019: PUSH
50020: EMPTY
50021: LIST
50022: LIST
50023: PUSH
50024: LD_INT 1
50026: NEG
50027: PUSH
50028: LD_INT 1
50030: PUSH
50031: EMPTY
50032: LIST
50033: LIST
50034: PUSH
50035: LD_INT 2
50037: NEG
50038: PUSH
50039: LD_INT 0
50041: PUSH
50042: EMPTY
50043: LIST
50044: LIST
50045: PUSH
50046: LD_INT 2
50048: NEG
50049: PUSH
50050: LD_INT 1
50052: NEG
50053: PUSH
50054: EMPTY
50055: LIST
50056: LIST
50057: PUSH
50058: LD_INT 2
50060: NEG
50061: PUSH
50062: LD_INT 2
50064: NEG
50065: PUSH
50066: EMPTY
50067: LIST
50068: LIST
50069: PUSH
50070: LD_INT 3
50072: PUSH
50073: LD_INT 1
50075: PUSH
50076: EMPTY
50077: LIST
50078: LIST
50079: PUSH
50080: LD_INT 3
50082: PUSH
50083: LD_INT 2
50085: PUSH
50086: EMPTY
50087: LIST
50088: LIST
50089: PUSH
50090: LD_INT 2
50092: PUSH
50093: LD_INT 3
50095: PUSH
50096: EMPTY
50097: LIST
50098: LIST
50099: PUSH
50100: LD_INT 1
50102: PUSH
50103: LD_INT 3
50105: PUSH
50106: EMPTY
50107: LIST
50108: LIST
50109: PUSH
50110: EMPTY
50111: LIST
50112: LIST
50113: LIST
50114: LIST
50115: LIST
50116: LIST
50117: LIST
50118: LIST
50119: LIST
50120: LIST
50121: LIST
50122: LIST
50123: LIST
50124: LIST
50125: LIST
50126: LIST
50127: LIST
50128: LIST
50129: LIST
50130: LIST
50131: LIST
50132: LIST
50133: LIST
50134: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
50135: LD_ADDR_VAR 0 26
50139: PUSH
50140: LD_INT 0
50142: PUSH
50143: LD_INT 0
50145: PUSH
50146: EMPTY
50147: LIST
50148: LIST
50149: PUSH
50150: LD_INT 0
50152: PUSH
50153: LD_INT 1
50155: NEG
50156: PUSH
50157: EMPTY
50158: LIST
50159: LIST
50160: PUSH
50161: LD_INT 1
50163: PUSH
50164: LD_INT 0
50166: PUSH
50167: EMPTY
50168: LIST
50169: LIST
50170: PUSH
50171: LD_INT 1
50173: PUSH
50174: LD_INT 1
50176: PUSH
50177: EMPTY
50178: LIST
50179: LIST
50180: PUSH
50181: LD_INT 0
50183: PUSH
50184: LD_INT 1
50186: PUSH
50187: EMPTY
50188: LIST
50189: LIST
50190: PUSH
50191: LD_INT 1
50193: NEG
50194: PUSH
50195: LD_INT 0
50197: PUSH
50198: EMPTY
50199: LIST
50200: LIST
50201: PUSH
50202: LD_INT 1
50204: NEG
50205: PUSH
50206: LD_INT 1
50208: NEG
50209: PUSH
50210: EMPTY
50211: LIST
50212: LIST
50213: PUSH
50214: LD_INT 1
50216: NEG
50217: PUSH
50218: LD_INT 2
50220: NEG
50221: PUSH
50222: EMPTY
50223: LIST
50224: LIST
50225: PUSH
50226: LD_INT 0
50228: PUSH
50229: LD_INT 2
50231: NEG
50232: PUSH
50233: EMPTY
50234: LIST
50235: LIST
50236: PUSH
50237: LD_INT 1
50239: PUSH
50240: LD_INT 1
50242: NEG
50243: PUSH
50244: EMPTY
50245: LIST
50246: LIST
50247: PUSH
50248: LD_INT 2
50250: PUSH
50251: LD_INT 0
50253: PUSH
50254: EMPTY
50255: LIST
50256: LIST
50257: PUSH
50258: LD_INT 2
50260: PUSH
50261: LD_INT 1
50263: PUSH
50264: EMPTY
50265: LIST
50266: LIST
50267: PUSH
50268: LD_INT 2
50270: PUSH
50271: LD_INT 2
50273: PUSH
50274: EMPTY
50275: LIST
50276: LIST
50277: PUSH
50278: LD_INT 1
50280: PUSH
50281: LD_INT 2
50283: PUSH
50284: EMPTY
50285: LIST
50286: LIST
50287: PUSH
50288: LD_INT 0
50290: PUSH
50291: LD_INT 2
50293: PUSH
50294: EMPTY
50295: LIST
50296: LIST
50297: PUSH
50298: LD_INT 1
50300: NEG
50301: PUSH
50302: LD_INT 1
50304: PUSH
50305: EMPTY
50306: LIST
50307: LIST
50308: PUSH
50309: LD_INT 2
50311: NEG
50312: PUSH
50313: LD_INT 0
50315: PUSH
50316: EMPTY
50317: LIST
50318: LIST
50319: PUSH
50320: LD_INT 2
50322: NEG
50323: PUSH
50324: LD_INT 1
50326: NEG
50327: PUSH
50328: EMPTY
50329: LIST
50330: LIST
50331: PUSH
50332: LD_INT 2
50334: NEG
50335: PUSH
50336: LD_INT 2
50338: NEG
50339: PUSH
50340: EMPTY
50341: LIST
50342: LIST
50343: PUSH
50344: LD_INT 2
50346: PUSH
50347: LD_INT 3
50349: PUSH
50350: EMPTY
50351: LIST
50352: LIST
50353: PUSH
50354: LD_INT 1
50356: PUSH
50357: LD_INT 3
50359: PUSH
50360: EMPTY
50361: LIST
50362: LIST
50363: PUSH
50364: LD_INT 1
50366: NEG
50367: PUSH
50368: LD_INT 2
50370: PUSH
50371: EMPTY
50372: LIST
50373: LIST
50374: PUSH
50375: LD_INT 2
50377: NEG
50378: PUSH
50379: LD_INT 1
50381: PUSH
50382: EMPTY
50383: LIST
50384: LIST
50385: PUSH
50386: EMPTY
50387: LIST
50388: LIST
50389: LIST
50390: LIST
50391: LIST
50392: LIST
50393: LIST
50394: LIST
50395: LIST
50396: LIST
50397: LIST
50398: LIST
50399: LIST
50400: LIST
50401: LIST
50402: LIST
50403: LIST
50404: LIST
50405: LIST
50406: LIST
50407: LIST
50408: LIST
50409: LIST
50410: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
50411: LD_ADDR_VAR 0 27
50415: PUSH
50416: LD_INT 0
50418: PUSH
50419: LD_INT 0
50421: PUSH
50422: EMPTY
50423: LIST
50424: LIST
50425: PUSH
50426: LD_INT 0
50428: PUSH
50429: LD_INT 1
50431: NEG
50432: PUSH
50433: EMPTY
50434: LIST
50435: LIST
50436: PUSH
50437: LD_INT 1
50439: PUSH
50440: LD_INT 0
50442: PUSH
50443: EMPTY
50444: LIST
50445: LIST
50446: PUSH
50447: LD_INT 1
50449: PUSH
50450: LD_INT 1
50452: PUSH
50453: EMPTY
50454: LIST
50455: LIST
50456: PUSH
50457: LD_INT 0
50459: PUSH
50460: LD_INT 1
50462: PUSH
50463: EMPTY
50464: LIST
50465: LIST
50466: PUSH
50467: LD_INT 1
50469: NEG
50470: PUSH
50471: LD_INT 0
50473: PUSH
50474: EMPTY
50475: LIST
50476: LIST
50477: PUSH
50478: LD_INT 1
50480: NEG
50481: PUSH
50482: LD_INT 1
50484: NEG
50485: PUSH
50486: EMPTY
50487: LIST
50488: LIST
50489: PUSH
50490: LD_INT 1
50492: NEG
50493: PUSH
50494: LD_INT 2
50496: NEG
50497: PUSH
50498: EMPTY
50499: LIST
50500: LIST
50501: PUSH
50502: LD_INT 0
50504: PUSH
50505: LD_INT 2
50507: NEG
50508: PUSH
50509: EMPTY
50510: LIST
50511: LIST
50512: PUSH
50513: LD_INT 1
50515: PUSH
50516: LD_INT 1
50518: NEG
50519: PUSH
50520: EMPTY
50521: LIST
50522: LIST
50523: PUSH
50524: LD_INT 2
50526: PUSH
50527: LD_INT 0
50529: PUSH
50530: EMPTY
50531: LIST
50532: LIST
50533: PUSH
50534: LD_INT 2
50536: PUSH
50537: LD_INT 1
50539: PUSH
50540: EMPTY
50541: LIST
50542: LIST
50543: PUSH
50544: LD_INT 2
50546: PUSH
50547: LD_INT 2
50549: PUSH
50550: EMPTY
50551: LIST
50552: LIST
50553: PUSH
50554: LD_INT 1
50556: PUSH
50557: LD_INT 2
50559: PUSH
50560: EMPTY
50561: LIST
50562: LIST
50563: PUSH
50564: LD_INT 0
50566: PUSH
50567: LD_INT 2
50569: PUSH
50570: EMPTY
50571: LIST
50572: LIST
50573: PUSH
50574: LD_INT 1
50576: NEG
50577: PUSH
50578: LD_INT 1
50580: PUSH
50581: EMPTY
50582: LIST
50583: LIST
50584: PUSH
50585: LD_INT 2
50587: NEG
50588: PUSH
50589: LD_INT 0
50591: PUSH
50592: EMPTY
50593: LIST
50594: LIST
50595: PUSH
50596: LD_INT 2
50598: NEG
50599: PUSH
50600: LD_INT 1
50602: NEG
50603: PUSH
50604: EMPTY
50605: LIST
50606: LIST
50607: PUSH
50608: LD_INT 2
50610: NEG
50611: PUSH
50612: LD_INT 2
50614: NEG
50615: PUSH
50616: EMPTY
50617: LIST
50618: LIST
50619: PUSH
50620: LD_INT 1
50622: NEG
50623: PUSH
50624: LD_INT 2
50626: PUSH
50627: EMPTY
50628: LIST
50629: LIST
50630: PUSH
50631: LD_INT 2
50633: NEG
50634: PUSH
50635: LD_INT 1
50637: PUSH
50638: EMPTY
50639: LIST
50640: LIST
50641: PUSH
50642: LD_INT 3
50644: NEG
50645: PUSH
50646: LD_INT 1
50648: NEG
50649: PUSH
50650: EMPTY
50651: LIST
50652: LIST
50653: PUSH
50654: LD_INT 3
50656: NEG
50657: PUSH
50658: LD_INT 2
50660: NEG
50661: PUSH
50662: EMPTY
50663: LIST
50664: LIST
50665: PUSH
50666: EMPTY
50667: LIST
50668: LIST
50669: LIST
50670: LIST
50671: LIST
50672: LIST
50673: LIST
50674: LIST
50675: LIST
50676: LIST
50677: LIST
50678: LIST
50679: LIST
50680: LIST
50681: LIST
50682: LIST
50683: LIST
50684: LIST
50685: LIST
50686: LIST
50687: LIST
50688: LIST
50689: LIST
50690: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
50691: LD_ADDR_VAR 0 28
50695: PUSH
50696: LD_INT 0
50698: PUSH
50699: LD_INT 0
50701: PUSH
50702: EMPTY
50703: LIST
50704: LIST
50705: PUSH
50706: LD_INT 0
50708: PUSH
50709: LD_INT 1
50711: NEG
50712: PUSH
50713: EMPTY
50714: LIST
50715: LIST
50716: PUSH
50717: LD_INT 1
50719: PUSH
50720: LD_INT 0
50722: PUSH
50723: EMPTY
50724: LIST
50725: LIST
50726: PUSH
50727: LD_INT 1
50729: PUSH
50730: LD_INT 1
50732: PUSH
50733: EMPTY
50734: LIST
50735: LIST
50736: PUSH
50737: LD_INT 0
50739: PUSH
50740: LD_INT 1
50742: PUSH
50743: EMPTY
50744: LIST
50745: LIST
50746: PUSH
50747: LD_INT 1
50749: NEG
50750: PUSH
50751: LD_INT 0
50753: PUSH
50754: EMPTY
50755: LIST
50756: LIST
50757: PUSH
50758: LD_INT 1
50760: NEG
50761: PUSH
50762: LD_INT 1
50764: NEG
50765: PUSH
50766: EMPTY
50767: LIST
50768: LIST
50769: PUSH
50770: LD_INT 1
50772: NEG
50773: PUSH
50774: LD_INT 2
50776: NEG
50777: PUSH
50778: EMPTY
50779: LIST
50780: LIST
50781: PUSH
50782: LD_INT 0
50784: PUSH
50785: LD_INT 2
50787: NEG
50788: PUSH
50789: EMPTY
50790: LIST
50791: LIST
50792: PUSH
50793: LD_INT 1
50795: PUSH
50796: LD_INT 1
50798: NEG
50799: PUSH
50800: EMPTY
50801: LIST
50802: LIST
50803: PUSH
50804: LD_INT 2
50806: PUSH
50807: LD_INT 0
50809: PUSH
50810: EMPTY
50811: LIST
50812: LIST
50813: PUSH
50814: LD_INT 2
50816: PUSH
50817: LD_INT 1
50819: PUSH
50820: EMPTY
50821: LIST
50822: LIST
50823: PUSH
50824: LD_INT 2
50826: PUSH
50827: LD_INT 2
50829: PUSH
50830: EMPTY
50831: LIST
50832: LIST
50833: PUSH
50834: LD_INT 1
50836: PUSH
50837: LD_INT 2
50839: PUSH
50840: EMPTY
50841: LIST
50842: LIST
50843: PUSH
50844: LD_INT 0
50846: PUSH
50847: LD_INT 2
50849: PUSH
50850: EMPTY
50851: LIST
50852: LIST
50853: PUSH
50854: LD_INT 1
50856: NEG
50857: PUSH
50858: LD_INT 1
50860: PUSH
50861: EMPTY
50862: LIST
50863: LIST
50864: PUSH
50865: LD_INT 2
50867: NEG
50868: PUSH
50869: LD_INT 0
50871: PUSH
50872: EMPTY
50873: LIST
50874: LIST
50875: PUSH
50876: LD_INT 2
50878: NEG
50879: PUSH
50880: LD_INT 1
50882: NEG
50883: PUSH
50884: EMPTY
50885: LIST
50886: LIST
50887: PUSH
50888: LD_INT 2
50890: NEG
50891: PUSH
50892: LD_INT 2
50894: NEG
50895: PUSH
50896: EMPTY
50897: LIST
50898: LIST
50899: PUSH
50900: LD_INT 2
50902: NEG
50903: PUSH
50904: LD_INT 3
50906: NEG
50907: PUSH
50908: EMPTY
50909: LIST
50910: LIST
50911: PUSH
50912: LD_INT 1
50914: NEG
50915: PUSH
50916: LD_INT 3
50918: NEG
50919: PUSH
50920: EMPTY
50921: LIST
50922: LIST
50923: PUSH
50924: LD_INT 3
50926: NEG
50927: PUSH
50928: LD_INT 1
50930: NEG
50931: PUSH
50932: EMPTY
50933: LIST
50934: LIST
50935: PUSH
50936: LD_INT 3
50938: NEG
50939: PUSH
50940: LD_INT 2
50942: NEG
50943: PUSH
50944: EMPTY
50945: LIST
50946: LIST
50947: PUSH
50948: EMPTY
50949: LIST
50950: LIST
50951: LIST
50952: LIST
50953: LIST
50954: LIST
50955: LIST
50956: LIST
50957: LIST
50958: LIST
50959: LIST
50960: LIST
50961: LIST
50962: LIST
50963: LIST
50964: LIST
50965: LIST
50966: LIST
50967: LIST
50968: LIST
50969: LIST
50970: LIST
50971: LIST
50972: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50973: LD_ADDR_VAR 0 29
50977: PUSH
50978: LD_INT 0
50980: PUSH
50981: LD_INT 0
50983: PUSH
50984: EMPTY
50985: LIST
50986: LIST
50987: PUSH
50988: LD_INT 0
50990: PUSH
50991: LD_INT 1
50993: NEG
50994: PUSH
50995: EMPTY
50996: LIST
50997: LIST
50998: PUSH
50999: LD_INT 1
51001: PUSH
51002: LD_INT 0
51004: PUSH
51005: EMPTY
51006: LIST
51007: LIST
51008: PUSH
51009: LD_INT 1
51011: PUSH
51012: LD_INT 1
51014: PUSH
51015: EMPTY
51016: LIST
51017: LIST
51018: PUSH
51019: LD_INT 0
51021: PUSH
51022: LD_INT 1
51024: PUSH
51025: EMPTY
51026: LIST
51027: LIST
51028: PUSH
51029: LD_INT 1
51031: NEG
51032: PUSH
51033: LD_INT 0
51035: PUSH
51036: EMPTY
51037: LIST
51038: LIST
51039: PUSH
51040: LD_INT 1
51042: NEG
51043: PUSH
51044: LD_INT 1
51046: NEG
51047: PUSH
51048: EMPTY
51049: LIST
51050: LIST
51051: PUSH
51052: LD_INT 1
51054: NEG
51055: PUSH
51056: LD_INT 2
51058: NEG
51059: PUSH
51060: EMPTY
51061: LIST
51062: LIST
51063: PUSH
51064: LD_INT 0
51066: PUSH
51067: LD_INT 2
51069: NEG
51070: PUSH
51071: EMPTY
51072: LIST
51073: LIST
51074: PUSH
51075: LD_INT 1
51077: PUSH
51078: LD_INT 1
51080: NEG
51081: PUSH
51082: EMPTY
51083: LIST
51084: LIST
51085: PUSH
51086: LD_INT 2
51088: PUSH
51089: LD_INT 0
51091: PUSH
51092: EMPTY
51093: LIST
51094: LIST
51095: PUSH
51096: LD_INT 2
51098: PUSH
51099: LD_INT 1
51101: PUSH
51102: EMPTY
51103: LIST
51104: LIST
51105: PUSH
51106: LD_INT 1
51108: PUSH
51109: LD_INT 2
51111: PUSH
51112: EMPTY
51113: LIST
51114: LIST
51115: PUSH
51116: LD_INT 0
51118: PUSH
51119: LD_INT 2
51121: PUSH
51122: EMPTY
51123: LIST
51124: LIST
51125: PUSH
51126: LD_INT 1
51128: NEG
51129: PUSH
51130: LD_INT 1
51132: PUSH
51133: EMPTY
51134: LIST
51135: LIST
51136: PUSH
51137: LD_INT 2
51139: NEG
51140: PUSH
51141: LD_INT 1
51143: NEG
51144: PUSH
51145: EMPTY
51146: LIST
51147: LIST
51148: PUSH
51149: LD_INT 2
51151: NEG
51152: PUSH
51153: LD_INT 2
51155: NEG
51156: PUSH
51157: EMPTY
51158: LIST
51159: LIST
51160: PUSH
51161: LD_INT 2
51163: NEG
51164: PUSH
51165: LD_INT 3
51167: NEG
51168: PUSH
51169: EMPTY
51170: LIST
51171: LIST
51172: PUSH
51173: LD_INT 2
51175: PUSH
51176: LD_INT 1
51178: NEG
51179: PUSH
51180: EMPTY
51181: LIST
51182: LIST
51183: PUSH
51184: LD_INT 3
51186: PUSH
51187: LD_INT 1
51189: PUSH
51190: EMPTY
51191: LIST
51192: LIST
51193: PUSH
51194: LD_INT 1
51196: PUSH
51197: LD_INT 3
51199: PUSH
51200: EMPTY
51201: LIST
51202: LIST
51203: PUSH
51204: LD_INT 1
51206: NEG
51207: PUSH
51208: LD_INT 2
51210: PUSH
51211: EMPTY
51212: LIST
51213: LIST
51214: PUSH
51215: LD_INT 3
51217: NEG
51218: PUSH
51219: LD_INT 2
51221: NEG
51222: PUSH
51223: EMPTY
51224: LIST
51225: LIST
51226: PUSH
51227: EMPTY
51228: LIST
51229: LIST
51230: LIST
51231: LIST
51232: LIST
51233: LIST
51234: LIST
51235: LIST
51236: LIST
51237: LIST
51238: LIST
51239: LIST
51240: LIST
51241: LIST
51242: LIST
51243: LIST
51244: LIST
51245: LIST
51246: LIST
51247: LIST
51248: LIST
51249: LIST
51250: LIST
51251: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51252: LD_ADDR_VAR 0 30
51256: PUSH
51257: LD_INT 0
51259: PUSH
51260: LD_INT 0
51262: PUSH
51263: EMPTY
51264: LIST
51265: LIST
51266: PUSH
51267: LD_INT 0
51269: PUSH
51270: LD_INT 1
51272: NEG
51273: PUSH
51274: EMPTY
51275: LIST
51276: LIST
51277: PUSH
51278: LD_INT 1
51280: PUSH
51281: LD_INT 0
51283: PUSH
51284: EMPTY
51285: LIST
51286: LIST
51287: PUSH
51288: LD_INT 1
51290: PUSH
51291: LD_INT 1
51293: PUSH
51294: EMPTY
51295: LIST
51296: LIST
51297: PUSH
51298: LD_INT 0
51300: PUSH
51301: LD_INT 1
51303: PUSH
51304: EMPTY
51305: LIST
51306: LIST
51307: PUSH
51308: LD_INT 1
51310: NEG
51311: PUSH
51312: LD_INT 0
51314: PUSH
51315: EMPTY
51316: LIST
51317: LIST
51318: PUSH
51319: LD_INT 1
51321: NEG
51322: PUSH
51323: LD_INT 1
51325: NEG
51326: PUSH
51327: EMPTY
51328: LIST
51329: LIST
51330: PUSH
51331: LD_INT 1
51333: NEG
51334: PUSH
51335: LD_INT 2
51337: NEG
51338: PUSH
51339: EMPTY
51340: LIST
51341: LIST
51342: PUSH
51343: LD_INT 0
51345: PUSH
51346: LD_INT 2
51348: NEG
51349: PUSH
51350: EMPTY
51351: LIST
51352: LIST
51353: PUSH
51354: LD_INT 1
51356: PUSH
51357: LD_INT 1
51359: NEG
51360: PUSH
51361: EMPTY
51362: LIST
51363: LIST
51364: PUSH
51365: LD_INT 2
51367: PUSH
51368: LD_INT 0
51370: PUSH
51371: EMPTY
51372: LIST
51373: LIST
51374: PUSH
51375: LD_INT 2
51377: PUSH
51378: LD_INT 1
51380: PUSH
51381: EMPTY
51382: LIST
51383: LIST
51384: PUSH
51385: LD_INT 2
51387: PUSH
51388: LD_INT 2
51390: PUSH
51391: EMPTY
51392: LIST
51393: LIST
51394: PUSH
51395: LD_INT 1
51397: PUSH
51398: LD_INT 2
51400: PUSH
51401: EMPTY
51402: LIST
51403: LIST
51404: PUSH
51405: LD_INT 1
51407: NEG
51408: PUSH
51409: LD_INT 1
51411: PUSH
51412: EMPTY
51413: LIST
51414: LIST
51415: PUSH
51416: LD_INT 2
51418: NEG
51419: PUSH
51420: LD_INT 0
51422: PUSH
51423: EMPTY
51424: LIST
51425: LIST
51426: PUSH
51427: LD_INT 2
51429: NEG
51430: PUSH
51431: LD_INT 1
51433: NEG
51434: PUSH
51435: EMPTY
51436: LIST
51437: LIST
51438: PUSH
51439: LD_INT 1
51441: NEG
51442: PUSH
51443: LD_INT 3
51445: NEG
51446: PUSH
51447: EMPTY
51448: LIST
51449: LIST
51450: PUSH
51451: LD_INT 1
51453: PUSH
51454: LD_INT 2
51456: NEG
51457: PUSH
51458: EMPTY
51459: LIST
51460: LIST
51461: PUSH
51462: LD_INT 3
51464: PUSH
51465: LD_INT 2
51467: PUSH
51468: EMPTY
51469: LIST
51470: LIST
51471: PUSH
51472: LD_INT 2
51474: PUSH
51475: LD_INT 3
51477: PUSH
51478: EMPTY
51479: LIST
51480: LIST
51481: PUSH
51482: LD_INT 2
51484: NEG
51485: PUSH
51486: LD_INT 1
51488: PUSH
51489: EMPTY
51490: LIST
51491: LIST
51492: PUSH
51493: LD_INT 3
51495: NEG
51496: PUSH
51497: LD_INT 1
51499: NEG
51500: PUSH
51501: EMPTY
51502: LIST
51503: LIST
51504: PUSH
51505: EMPTY
51506: LIST
51507: LIST
51508: LIST
51509: LIST
51510: LIST
51511: LIST
51512: LIST
51513: LIST
51514: LIST
51515: LIST
51516: LIST
51517: LIST
51518: LIST
51519: LIST
51520: LIST
51521: LIST
51522: LIST
51523: LIST
51524: LIST
51525: LIST
51526: LIST
51527: LIST
51528: LIST
51529: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
51530: LD_ADDR_VAR 0 31
51534: PUSH
51535: LD_INT 0
51537: PUSH
51538: LD_INT 0
51540: PUSH
51541: EMPTY
51542: LIST
51543: LIST
51544: PUSH
51545: LD_INT 0
51547: PUSH
51548: LD_INT 1
51550: NEG
51551: PUSH
51552: EMPTY
51553: LIST
51554: LIST
51555: PUSH
51556: LD_INT 1
51558: PUSH
51559: LD_INT 0
51561: PUSH
51562: EMPTY
51563: LIST
51564: LIST
51565: PUSH
51566: LD_INT 1
51568: PUSH
51569: LD_INT 1
51571: PUSH
51572: EMPTY
51573: LIST
51574: LIST
51575: PUSH
51576: LD_INT 0
51578: PUSH
51579: LD_INT 1
51581: PUSH
51582: EMPTY
51583: LIST
51584: LIST
51585: PUSH
51586: LD_INT 1
51588: NEG
51589: PUSH
51590: LD_INT 0
51592: PUSH
51593: EMPTY
51594: LIST
51595: LIST
51596: PUSH
51597: LD_INT 1
51599: NEG
51600: PUSH
51601: LD_INT 1
51603: NEG
51604: PUSH
51605: EMPTY
51606: LIST
51607: LIST
51608: PUSH
51609: LD_INT 1
51611: NEG
51612: PUSH
51613: LD_INT 2
51615: NEG
51616: PUSH
51617: EMPTY
51618: LIST
51619: LIST
51620: PUSH
51621: LD_INT 1
51623: PUSH
51624: LD_INT 1
51626: NEG
51627: PUSH
51628: EMPTY
51629: LIST
51630: LIST
51631: PUSH
51632: LD_INT 2
51634: PUSH
51635: LD_INT 0
51637: PUSH
51638: EMPTY
51639: LIST
51640: LIST
51641: PUSH
51642: LD_INT 2
51644: PUSH
51645: LD_INT 1
51647: PUSH
51648: EMPTY
51649: LIST
51650: LIST
51651: PUSH
51652: LD_INT 2
51654: PUSH
51655: LD_INT 2
51657: PUSH
51658: EMPTY
51659: LIST
51660: LIST
51661: PUSH
51662: LD_INT 1
51664: PUSH
51665: LD_INT 2
51667: PUSH
51668: EMPTY
51669: LIST
51670: LIST
51671: PUSH
51672: LD_INT 0
51674: PUSH
51675: LD_INT 2
51677: PUSH
51678: EMPTY
51679: LIST
51680: LIST
51681: PUSH
51682: LD_INT 1
51684: NEG
51685: PUSH
51686: LD_INT 1
51688: PUSH
51689: EMPTY
51690: LIST
51691: LIST
51692: PUSH
51693: LD_INT 2
51695: NEG
51696: PUSH
51697: LD_INT 1
51699: NEG
51700: PUSH
51701: EMPTY
51702: LIST
51703: LIST
51704: PUSH
51705: LD_INT 2
51707: NEG
51708: PUSH
51709: LD_INT 2
51711: NEG
51712: PUSH
51713: EMPTY
51714: LIST
51715: LIST
51716: PUSH
51717: LD_INT 2
51719: NEG
51720: PUSH
51721: LD_INT 3
51723: NEG
51724: PUSH
51725: EMPTY
51726: LIST
51727: LIST
51728: PUSH
51729: LD_INT 2
51731: PUSH
51732: LD_INT 1
51734: NEG
51735: PUSH
51736: EMPTY
51737: LIST
51738: LIST
51739: PUSH
51740: LD_INT 3
51742: PUSH
51743: LD_INT 1
51745: PUSH
51746: EMPTY
51747: LIST
51748: LIST
51749: PUSH
51750: LD_INT 1
51752: PUSH
51753: LD_INT 3
51755: PUSH
51756: EMPTY
51757: LIST
51758: LIST
51759: PUSH
51760: LD_INT 1
51762: NEG
51763: PUSH
51764: LD_INT 2
51766: PUSH
51767: EMPTY
51768: LIST
51769: LIST
51770: PUSH
51771: LD_INT 3
51773: NEG
51774: PUSH
51775: LD_INT 2
51777: NEG
51778: PUSH
51779: EMPTY
51780: LIST
51781: LIST
51782: PUSH
51783: EMPTY
51784: LIST
51785: LIST
51786: LIST
51787: LIST
51788: LIST
51789: LIST
51790: LIST
51791: LIST
51792: LIST
51793: LIST
51794: LIST
51795: LIST
51796: LIST
51797: LIST
51798: LIST
51799: LIST
51800: LIST
51801: LIST
51802: LIST
51803: LIST
51804: LIST
51805: LIST
51806: LIST
51807: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51808: LD_ADDR_VAR 0 32
51812: PUSH
51813: LD_INT 0
51815: PUSH
51816: LD_INT 0
51818: PUSH
51819: EMPTY
51820: LIST
51821: LIST
51822: PUSH
51823: LD_INT 0
51825: PUSH
51826: LD_INT 1
51828: NEG
51829: PUSH
51830: EMPTY
51831: LIST
51832: LIST
51833: PUSH
51834: LD_INT 1
51836: PUSH
51837: LD_INT 0
51839: PUSH
51840: EMPTY
51841: LIST
51842: LIST
51843: PUSH
51844: LD_INT 1
51846: PUSH
51847: LD_INT 1
51849: PUSH
51850: EMPTY
51851: LIST
51852: LIST
51853: PUSH
51854: LD_INT 0
51856: PUSH
51857: LD_INT 1
51859: PUSH
51860: EMPTY
51861: LIST
51862: LIST
51863: PUSH
51864: LD_INT 1
51866: NEG
51867: PUSH
51868: LD_INT 0
51870: PUSH
51871: EMPTY
51872: LIST
51873: LIST
51874: PUSH
51875: LD_INT 1
51877: NEG
51878: PUSH
51879: LD_INT 1
51881: NEG
51882: PUSH
51883: EMPTY
51884: LIST
51885: LIST
51886: PUSH
51887: LD_INT 1
51889: NEG
51890: PUSH
51891: LD_INT 2
51893: NEG
51894: PUSH
51895: EMPTY
51896: LIST
51897: LIST
51898: PUSH
51899: LD_INT 0
51901: PUSH
51902: LD_INT 2
51904: NEG
51905: PUSH
51906: EMPTY
51907: LIST
51908: LIST
51909: PUSH
51910: LD_INT 1
51912: PUSH
51913: LD_INT 1
51915: NEG
51916: PUSH
51917: EMPTY
51918: LIST
51919: LIST
51920: PUSH
51921: LD_INT 2
51923: PUSH
51924: LD_INT 1
51926: PUSH
51927: EMPTY
51928: LIST
51929: LIST
51930: PUSH
51931: LD_INT 2
51933: PUSH
51934: LD_INT 2
51936: PUSH
51937: EMPTY
51938: LIST
51939: LIST
51940: PUSH
51941: LD_INT 1
51943: PUSH
51944: LD_INT 2
51946: PUSH
51947: EMPTY
51948: LIST
51949: LIST
51950: PUSH
51951: LD_INT 0
51953: PUSH
51954: LD_INT 2
51956: PUSH
51957: EMPTY
51958: LIST
51959: LIST
51960: PUSH
51961: LD_INT 1
51963: NEG
51964: PUSH
51965: LD_INT 1
51967: PUSH
51968: EMPTY
51969: LIST
51970: LIST
51971: PUSH
51972: LD_INT 2
51974: NEG
51975: PUSH
51976: LD_INT 0
51978: PUSH
51979: EMPTY
51980: LIST
51981: LIST
51982: PUSH
51983: LD_INT 2
51985: NEG
51986: PUSH
51987: LD_INT 1
51989: NEG
51990: PUSH
51991: EMPTY
51992: LIST
51993: LIST
51994: PUSH
51995: LD_INT 1
51997: NEG
51998: PUSH
51999: LD_INT 3
52001: NEG
52002: PUSH
52003: EMPTY
52004: LIST
52005: LIST
52006: PUSH
52007: LD_INT 1
52009: PUSH
52010: LD_INT 2
52012: NEG
52013: PUSH
52014: EMPTY
52015: LIST
52016: LIST
52017: PUSH
52018: LD_INT 3
52020: PUSH
52021: LD_INT 2
52023: PUSH
52024: EMPTY
52025: LIST
52026: LIST
52027: PUSH
52028: LD_INT 2
52030: PUSH
52031: LD_INT 3
52033: PUSH
52034: EMPTY
52035: LIST
52036: LIST
52037: PUSH
52038: LD_INT 2
52040: NEG
52041: PUSH
52042: LD_INT 1
52044: PUSH
52045: EMPTY
52046: LIST
52047: LIST
52048: PUSH
52049: LD_INT 3
52051: NEG
52052: PUSH
52053: LD_INT 1
52055: NEG
52056: PUSH
52057: EMPTY
52058: LIST
52059: LIST
52060: PUSH
52061: EMPTY
52062: LIST
52063: LIST
52064: LIST
52065: LIST
52066: LIST
52067: LIST
52068: LIST
52069: LIST
52070: LIST
52071: LIST
52072: LIST
52073: LIST
52074: LIST
52075: LIST
52076: LIST
52077: LIST
52078: LIST
52079: LIST
52080: LIST
52081: LIST
52082: LIST
52083: LIST
52084: LIST
52085: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
52086: LD_ADDR_VAR 0 33
52090: PUSH
52091: LD_INT 0
52093: PUSH
52094: LD_INT 0
52096: PUSH
52097: EMPTY
52098: LIST
52099: LIST
52100: PUSH
52101: LD_INT 0
52103: PUSH
52104: LD_INT 1
52106: NEG
52107: PUSH
52108: EMPTY
52109: LIST
52110: LIST
52111: PUSH
52112: LD_INT 1
52114: PUSH
52115: LD_INT 0
52117: PUSH
52118: EMPTY
52119: LIST
52120: LIST
52121: PUSH
52122: LD_INT 1
52124: PUSH
52125: LD_INT 1
52127: PUSH
52128: EMPTY
52129: LIST
52130: LIST
52131: PUSH
52132: LD_INT 0
52134: PUSH
52135: LD_INT 1
52137: PUSH
52138: EMPTY
52139: LIST
52140: LIST
52141: PUSH
52142: LD_INT 1
52144: NEG
52145: PUSH
52146: LD_INT 0
52148: PUSH
52149: EMPTY
52150: LIST
52151: LIST
52152: PUSH
52153: LD_INT 1
52155: NEG
52156: PUSH
52157: LD_INT 1
52159: NEG
52160: PUSH
52161: EMPTY
52162: LIST
52163: LIST
52164: PUSH
52165: LD_INT 1
52167: NEG
52168: PUSH
52169: LD_INT 2
52171: NEG
52172: PUSH
52173: EMPTY
52174: LIST
52175: LIST
52176: PUSH
52177: LD_INT 1
52179: PUSH
52180: LD_INT 1
52182: NEG
52183: PUSH
52184: EMPTY
52185: LIST
52186: LIST
52187: PUSH
52188: LD_INT 2
52190: PUSH
52191: LD_INT 0
52193: PUSH
52194: EMPTY
52195: LIST
52196: LIST
52197: PUSH
52198: LD_INT 2
52200: PUSH
52201: LD_INT 1
52203: PUSH
52204: EMPTY
52205: LIST
52206: LIST
52207: PUSH
52208: LD_INT 1
52210: PUSH
52211: LD_INT 2
52213: PUSH
52214: EMPTY
52215: LIST
52216: LIST
52217: PUSH
52218: LD_INT 0
52220: PUSH
52221: LD_INT 2
52223: PUSH
52224: EMPTY
52225: LIST
52226: LIST
52227: PUSH
52228: LD_INT 1
52230: NEG
52231: PUSH
52232: LD_INT 1
52234: PUSH
52235: EMPTY
52236: LIST
52237: LIST
52238: PUSH
52239: LD_INT 2
52241: NEG
52242: PUSH
52243: LD_INT 0
52245: PUSH
52246: EMPTY
52247: LIST
52248: LIST
52249: PUSH
52250: LD_INT 2
52252: NEG
52253: PUSH
52254: LD_INT 1
52256: NEG
52257: PUSH
52258: EMPTY
52259: LIST
52260: LIST
52261: PUSH
52262: LD_INT 2
52264: NEG
52265: PUSH
52266: LD_INT 2
52268: NEG
52269: PUSH
52270: EMPTY
52271: LIST
52272: LIST
52273: PUSH
52274: LD_INT 2
52276: NEG
52277: PUSH
52278: LD_INT 3
52280: NEG
52281: PUSH
52282: EMPTY
52283: LIST
52284: LIST
52285: PUSH
52286: LD_INT 2
52288: PUSH
52289: LD_INT 1
52291: NEG
52292: PUSH
52293: EMPTY
52294: LIST
52295: LIST
52296: PUSH
52297: LD_INT 3
52299: PUSH
52300: LD_INT 1
52302: PUSH
52303: EMPTY
52304: LIST
52305: LIST
52306: PUSH
52307: LD_INT 1
52309: PUSH
52310: LD_INT 3
52312: PUSH
52313: EMPTY
52314: LIST
52315: LIST
52316: PUSH
52317: LD_INT 1
52319: NEG
52320: PUSH
52321: LD_INT 2
52323: PUSH
52324: EMPTY
52325: LIST
52326: LIST
52327: PUSH
52328: LD_INT 3
52330: NEG
52331: PUSH
52332: LD_INT 2
52334: NEG
52335: PUSH
52336: EMPTY
52337: LIST
52338: LIST
52339: PUSH
52340: EMPTY
52341: LIST
52342: LIST
52343: LIST
52344: LIST
52345: LIST
52346: LIST
52347: LIST
52348: LIST
52349: LIST
52350: LIST
52351: LIST
52352: LIST
52353: LIST
52354: LIST
52355: LIST
52356: LIST
52357: LIST
52358: LIST
52359: LIST
52360: LIST
52361: LIST
52362: LIST
52363: LIST
52364: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52365: LD_ADDR_VAR 0 34
52369: PUSH
52370: LD_INT 0
52372: PUSH
52373: LD_INT 0
52375: PUSH
52376: EMPTY
52377: LIST
52378: LIST
52379: PUSH
52380: LD_INT 0
52382: PUSH
52383: LD_INT 1
52385: NEG
52386: PUSH
52387: EMPTY
52388: LIST
52389: LIST
52390: PUSH
52391: LD_INT 1
52393: PUSH
52394: LD_INT 0
52396: PUSH
52397: EMPTY
52398: LIST
52399: LIST
52400: PUSH
52401: LD_INT 1
52403: PUSH
52404: LD_INT 1
52406: PUSH
52407: EMPTY
52408: LIST
52409: LIST
52410: PUSH
52411: LD_INT 0
52413: PUSH
52414: LD_INT 1
52416: PUSH
52417: EMPTY
52418: LIST
52419: LIST
52420: PUSH
52421: LD_INT 1
52423: NEG
52424: PUSH
52425: LD_INT 0
52427: PUSH
52428: EMPTY
52429: LIST
52430: LIST
52431: PUSH
52432: LD_INT 1
52434: NEG
52435: PUSH
52436: LD_INT 1
52438: NEG
52439: PUSH
52440: EMPTY
52441: LIST
52442: LIST
52443: PUSH
52444: LD_INT 1
52446: NEG
52447: PUSH
52448: LD_INT 2
52450: NEG
52451: PUSH
52452: EMPTY
52453: LIST
52454: LIST
52455: PUSH
52456: LD_INT 0
52458: PUSH
52459: LD_INT 2
52461: NEG
52462: PUSH
52463: EMPTY
52464: LIST
52465: LIST
52466: PUSH
52467: LD_INT 1
52469: PUSH
52470: LD_INT 1
52472: NEG
52473: PUSH
52474: EMPTY
52475: LIST
52476: LIST
52477: PUSH
52478: LD_INT 2
52480: PUSH
52481: LD_INT 1
52483: PUSH
52484: EMPTY
52485: LIST
52486: LIST
52487: PUSH
52488: LD_INT 2
52490: PUSH
52491: LD_INT 2
52493: PUSH
52494: EMPTY
52495: LIST
52496: LIST
52497: PUSH
52498: LD_INT 1
52500: PUSH
52501: LD_INT 2
52503: PUSH
52504: EMPTY
52505: LIST
52506: LIST
52507: PUSH
52508: LD_INT 1
52510: NEG
52511: PUSH
52512: LD_INT 1
52514: PUSH
52515: EMPTY
52516: LIST
52517: LIST
52518: PUSH
52519: LD_INT 2
52521: NEG
52522: PUSH
52523: LD_INT 0
52525: PUSH
52526: EMPTY
52527: LIST
52528: LIST
52529: PUSH
52530: LD_INT 2
52532: NEG
52533: PUSH
52534: LD_INT 1
52536: NEG
52537: PUSH
52538: EMPTY
52539: LIST
52540: LIST
52541: PUSH
52542: LD_INT 2
52544: NEG
52545: PUSH
52546: LD_INT 2
52548: NEG
52549: PUSH
52550: EMPTY
52551: LIST
52552: LIST
52553: PUSH
52554: LD_INT 1
52556: NEG
52557: PUSH
52558: LD_INT 3
52560: NEG
52561: PUSH
52562: EMPTY
52563: LIST
52564: LIST
52565: PUSH
52566: LD_INT 1
52568: PUSH
52569: LD_INT 2
52571: NEG
52572: PUSH
52573: EMPTY
52574: LIST
52575: LIST
52576: PUSH
52577: LD_INT 3
52579: PUSH
52580: LD_INT 2
52582: PUSH
52583: EMPTY
52584: LIST
52585: LIST
52586: PUSH
52587: LD_INT 2
52589: PUSH
52590: LD_INT 3
52592: PUSH
52593: EMPTY
52594: LIST
52595: LIST
52596: PUSH
52597: LD_INT 2
52599: NEG
52600: PUSH
52601: LD_INT 1
52603: PUSH
52604: EMPTY
52605: LIST
52606: LIST
52607: PUSH
52608: LD_INT 3
52610: NEG
52611: PUSH
52612: LD_INT 1
52614: NEG
52615: PUSH
52616: EMPTY
52617: LIST
52618: LIST
52619: PUSH
52620: EMPTY
52621: LIST
52622: LIST
52623: LIST
52624: LIST
52625: LIST
52626: LIST
52627: LIST
52628: LIST
52629: LIST
52630: LIST
52631: LIST
52632: LIST
52633: LIST
52634: LIST
52635: LIST
52636: LIST
52637: LIST
52638: LIST
52639: LIST
52640: LIST
52641: LIST
52642: LIST
52643: LIST
52644: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
52645: LD_ADDR_VAR 0 35
52649: PUSH
52650: LD_INT 0
52652: PUSH
52653: LD_INT 0
52655: PUSH
52656: EMPTY
52657: LIST
52658: LIST
52659: PUSH
52660: LD_INT 0
52662: PUSH
52663: LD_INT 1
52665: NEG
52666: PUSH
52667: EMPTY
52668: LIST
52669: LIST
52670: PUSH
52671: LD_INT 1
52673: PUSH
52674: LD_INT 0
52676: PUSH
52677: EMPTY
52678: LIST
52679: LIST
52680: PUSH
52681: LD_INT 1
52683: PUSH
52684: LD_INT 1
52686: PUSH
52687: EMPTY
52688: LIST
52689: LIST
52690: PUSH
52691: LD_INT 0
52693: PUSH
52694: LD_INT 1
52696: PUSH
52697: EMPTY
52698: LIST
52699: LIST
52700: PUSH
52701: LD_INT 1
52703: NEG
52704: PUSH
52705: LD_INT 0
52707: PUSH
52708: EMPTY
52709: LIST
52710: LIST
52711: PUSH
52712: LD_INT 1
52714: NEG
52715: PUSH
52716: LD_INT 1
52718: NEG
52719: PUSH
52720: EMPTY
52721: LIST
52722: LIST
52723: PUSH
52724: LD_INT 2
52726: PUSH
52727: LD_INT 1
52729: PUSH
52730: EMPTY
52731: LIST
52732: LIST
52733: PUSH
52734: LD_INT 2
52736: NEG
52737: PUSH
52738: LD_INT 1
52740: NEG
52741: PUSH
52742: EMPTY
52743: LIST
52744: LIST
52745: PUSH
52746: EMPTY
52747: LIST
52748: LIST
52749: LIST
52750: LIST
52751: LIST
52752: LIST
52753: LIST
52754: LIST
52755: LIST
52756: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
52757: LD_ADDR_VAR 0 36
52761: PUSH
52762: LD_INT 0
52764: PUSH
52765: LD_INT 0
52767: PUSH
52768: EMPTY
52769: LIST
52770: LIST
52771: PUSH
52772: LD_INT 0
52774: PUSH
52775: LD_INT 1
52777: NEG
52778: PUSH
52779: EMPTY
52780: LIST
52781: LIST
52782: PUSH
52783: LD_INT 1
52785: PUSH
52786: LD_INT 0
52788: PUSH
52789: EMPTY
52790: LIST
52791: LIST
52792: PUSH
52793: LD_INT 1
52795: PUSH
52796: LD_INT 1
52798: PUSH
52799: EMPTY
52800: LIST
52801: LIST
52802: PUSH
52803: LD_INT 0
52805: PUSH
52806: LD_INT 1
52808: PUSH
52809: EMPTY
52810: LIST
52811: LIST
52812: PUSH
52813: LD_INT 1
52815: NEG
52816: PUSH
52817: LD_INT 0
52819: PUSH
52820: EMPTY
52821: LIST
52822: LIST
52823: PUSH
52824: LD_INT 1
52826: NEG
52827: PUSH
52828: LD_INT 1
52830: NEG
52831: PUSH
52832: EMPTY
52833: LIST
52834: LIST
52835: PUSH
52836: LD_INT 1
52838: NEG
52839: PUSH
52840: LD_INT 2
52842: NEG
52843: PUSH
52844: EMPTY
52845: LIST
52846: LIST
52847: PUSH
52848: LD_INT 1
52850: PUSH
52851: LD_INT 2
52853: PUSH
52854: EMPTY
52855: LIST
52856: LIST
52857: PUSH
52858: EMPTY
52859: LIST
52860: LIST
52861: LIST
52862: LIST
52863: LIST
52864: LIST
52865: LIST
52866: LIST
52867: LIST
52868: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
52869: LD_ADDR_VAR 0 37
52873: PUSH
52874: LD_INT 0
52876: PUSH
52877: LD_INT 0
52879: PUSH
52880: EMPTY
52881: LIST
52882: LIST
52883: PUSH
52884: LD_INT 0
52886: PUSH
52887: LD_INT 1
52889: NEG
52890: PUSH
52891: EMPTY
52892: LIST
52893: LIST
52894: PUSH
52895: LD_INT 1
52897: PUSH
52898: LD_INT 0
52900: PUSH
52901: EMPTY
52902: LIST
52903: LIST
52904: PUSH
52905: LD_INT 1
52907: PUSH
52908: LD_INT 1
52910: PUSH
52911: EMPTY
52912: LIST
52913: LIST
52914: PUSH
52915: LD_INT 0
52917: PUSH
52918: LD_INT 1
52920: PUSH
52921: EMPTY
52922: LIST
52923: LIST
52924: PUSH
52925: LD_INT 1
52927: NEG
52928: PUSH
52929: LD_INT 0
52931: PUSH
52932: EMPTY
52933: LIST
52934: LIST
52935: PUSH
52936: LD_INT 1
52938: NEG
52939: PUSH
52940: LD_INT 1
52942: NEG
52943: PUSH
52944: EMPTY
52945: LIST
52946: LIST
52947: PUSH
52948: LD_INT 1
52950: PUSH
52951: LD_INT 1
52953: NEG
52954: PUSH
52955: EMPTY
52956: LIST
52957: LIST
52958: PUSH
52959: LD_INT 1
52961: NEG
52962: PUSH
52963: LD_INT 1
52965: PUSH
52966: EMPTY
52967: LIST
52968: LIST
52969: PUSH
52970: EMPTY
52971: LIST
52972: LIST
52973: LIST
52974: LIST
52975: LIST
52976: LIST
52977: LIST
52978: LIST
52979: LIST
52980: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
52981: LD_ADDR_VAR 0 38
52985: PUSH
52986: LD_INT 0
52988: PUSH
52989: LD_INT 0
52991: PUSH
52992: EMPTY
52993: LIST
52994: LIST
52995: PUSH
52996: LD_INT 0
52998: PUSH
52999: LD_INT 1
53001: NEG
53002: PUSH
53003: EMPTY
53004: LIST
53005: LIST
53006: PUSH
53007: LD_INT 1
53009: PUSH
53010: LD_INT 0
53012: PUSH
53013: EMPTY
53014: LIST
53015: LIST
53016: PUSH
53017: LD_INT 1
53019: PUSH
53020: LD_INT 1
53022: PUSH
53023: EMPTY
53024: LIST
53025: LIST
53026: PUSH
53027: LD_INT 0
53029: PUSH
53030: LD_INT 1
53032: PUSH
53033: EMPTY
53034: LIST
53035: LIST
53036: PUSH
53037: LD_INT 1
53039: NEG
53040: PUSH
53041: LD_INT 0
53043: PUSH
53044: EMPTY
53045: LIST
53046: LIST
53047: PUSH
53048: LD_INT 1
53050: NEG
53051: PUSH
53052: LD_INT 1
53054: NEG
53055: PUSH
53056: EMPTY
53057: LIST
53058: LIST
53059: PUSH
53060: LD_INT 2
53062: PUSH
53063: LD_INT 1
53065: PUSH
53066: EMPTY
53067: LIST
53068: LIST
53069: PUSH
53070: LD_INT 2
53072: NEG
53073: PUSH
53074: LD_INT 1
53076: NEG
53077: PUSH
53078: EMPTY
53079: LIST
53080: LIST
53081: PUSH
53082: EMPTY
53083: LIST
53084: LIST
53085: LIST
53086: LIST
53087: LIST
53088: LIST
53089: LIST
53090: LIST
53091: LIST
53092: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
53093: LD_ADDR_VAR 0 39
53097: PUSH
53098: LD_INT 0
53100: PUSH
53101: LD_INT 0
53103: PUSH
53104: EMPTY
53105: LIST
53106: LIST
53107: PUSH
53108: LD_INT 0
53110: PUSH
53111: LD_INT 1
53113: NEG
53114: PUSH
53115: EMPTY
53116: LIST
53117: LIST
53118: PUSH
53119: LD_INT 1
53121: PUSH
53122: LD_INT 0
53124: PUSH
53125: EMPTY
53126: LIST
53127: LIST
53128: PUSH
53129: LD_INT 1
53131: PUSH
53132: LD_INT 1
53134: PUSH
53135: EMPTY
53136: LIST
53137: LIST
53138: PUSH
53139: LD_INT 0
53141: PUSH
53142: LD_INT 1
53144: PUSH
53145: EMPTY
53146: LIST
53147: LIST
53148: PUSH
53149: LD_INT 1
53151: NEG
53152: PUSH
53153: LD_INT 0
53155: PUSH
53156: EMPTY
53157: LIST
53158: LIST
53159: PUSH
53160: LD_INT 1
53162: NEG
53163: PUSH
53164: LD_INT 1
53166: NEG
53167: PUSH
53168: EMPTY
53169: LIST
53170: LIST
53171: PUSH
53172: LD_INT 1
53174: NEG
53175: PUSH
53176: LD_INT 2
53178: NEG
53179: PUSH
53180: EMPTY
53181: LIST
53182: LIST
53183: PUSH
53184: LD_INT 1
53186: PUSH
53187: LD_INT 2
53189: PUSH
53190: EMPTY
53191: LIST
53192: LIST
53193: PUSH
53194: EMPTY
53195: LIST
53196: LIST
53197: LIST
53198: LIST
53199: LIST
53200: LIST
53201: LIST
53202: LIST
53203: LIST
53204: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
53205: LD_ADDR_VAR 0 40
53209: PUSH
53210: LD_INT 0
53212: PUSH
53213: LD_INT 0
53215: PUSH
53216: EMPTY
53217: LIST
53218: LIST
53219: PUSH
53220: LD_INT 0
53222: PUSH
53223: LD_INT 1
53225: NEG
53226: PUSH
53227: EMPTY
53228: LIST
53229: LIST
53230: PUSH
53231: LD_INT 1
53233: PUSH
53234: LD_INT 0
53236: PUSH
53237: EMPTY
53238: LIST
53239: LIST
53240: PUSH
53241: LD_INT 1
53243: PUSH
53244: LD_INT 1
53246: PUSH
53247: EMPTY
53248: LIST
53249: LIST
53250: PUSH
53251: LD_INT 0
53253: PUSH
53254: LD_INT 1
53256: PUSH
53257: EMPTY
53258: LIST
53259: LIST
53260: PUSH
53261: LD_INT 1
53263: NEG
53264: PUSH
53265: LD_INT 0
53267: PUSH
53268: EMPTY
53269: LIST
53270: LIST
53271: PUSH
53272: LD_INT 1
53274: NEG
53275: PUSH
53276: LD_INT 1
53278: NEG
53279: PUSH
53280: EMPTY
53281: LIST
53282: LIST
53283: PUSH
53284: LD_INT 1
53286: PUSH
53287: LD_INT 1
53289: NEG
53290: PUSH
53291: EMPTY
53292: LIST
53293: LIST
53294: PUSH
53295: LD_INT 1
53297: NEG
53298: PUSH
53299: LD_INT 1
53301: PUSH
53302: EMPTY
53303: LIST
53304: LIST
53305: PUSH
53306: EMPTY
53307: LIST
53308: LIST
53309: LIST
53310: LIST
53311: LIST
53312: LIST
53313: LIST
53314: LIST
53315: LIST
53316: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53317: LD_ADDR_VAR 0 41
53321: PUSH
53322: LD_INT 0
53324: PUSH
53325: LD_INT 0
53327: PUSH
53328: EMPTY
53329: LIST
53330: LIST
53331: PUSH
53332: LD_INT 0
53334: PUSH
53335: LD_INT 1
53337: NEG
53338: PUSH
53339: EMPTY
53340: LIST
53341: LIST
53342: PUSH
53343: LD_INT 1
53345: PUSH
53346: LD_INT 0
53348: PUSH
53349: EMPTY
53350: LIST
53351: LIST
53352: PUSH
53353: LD_INT 1
53355: PUSH
53356: LD_INT 1
53358: PUSH
53359: EMPTY
53360: LIST
53361: LIST
53362: PUSH
53363: LD_INT 0
53365: PUSH
53366: LD_INT 1
53368: PUSH
53369: EMPTY
53370: LIST
53371: LIST
53372: PUSH
53373: LD_INT 1
53375: NEG
53376: PUSH
53377: LD_INT 0
53379: PUSH
53380: EMPTY
53381: LIST
53382: LIST
53383: PUSH
53384: LD_INT 1
53386: NEG
53387: PUSH
53388: LD_INT 1
53390: NEG
53391: PUSH
53392: EMPTY
53393: LIST
53394: LIST
53395: PUSH
53396: LD_INT 1
53398: NEG
53399: PUSH
53400: LD_INT 2
53402: NEG
53403: PUSH
53404: EMPTY
53405: LIST
53406: LIST
53407: PUSH
53408: LD_INT 1
53410: PUSH
53411: LD_INT 1
53413: NEG
53414: PUSH
53415: EMPTY
53416: LIST
53417: LIST
53418: PUSH
53419: LD_INT 2
53421: PUSH
53422: LD_INT 0
53424: PUSH
53425: EMPTY
53426: LIST
53427: LIST
53428: PUSH
53429: LD_INT 2
53431: PUSH
53432: LD_INT 1
53434: PUSH
53435: EMPTY
53436: LIST
53437: LIST
53438: PUSH
53439: LD_INT 2
53441: PUSH
53442: LD_INT 2
53444: PUSH
53445: EMPTY
53446: LIST
53447: LIST
53448: PUSH
53449: LD_INT 1
53451: PUSH
53452: LD_INT 2
53454: PUSH
53455: EMPTY
53456: LIST
53457: LIST
53458: PUSH
53459: LD_INT 1
53461: NEG
53462: PUSH
53463: LD_INT 1
53465: PUSH
53466: EMPTY
53467: LIST
53468: LIST
53469: PUSH
53470: LD_INT 2
53472: NEG
53473: PUSH
53474: LD_INT 0
53476: PUSH
53477: EMPTY
53478: LIST
53479: LIST
53480: PUSH
53481: LD_INT 2
53483: NEG
53484: PUSH
53485: LD_INT 1
53487: NEG
53488: PUSH
53489: EMPTY
53490: LIST
53491: LIST
53492: PUSH
53493: LD_INT 2
53495: NEG
53496: PUSH
53497: LD_INT 2
53499: NEG
53500: PUSH
53501: EMPTY
53502: LIST
53503: LIST
53504: PUSH
53505: LD_INT 2
53507: NEG
53508: PUSH
53509: LD_INT 3
53511: NEG
53512: PUSH
53513: EMPTY
53514: LIST
53515: LIST
53516: PUSH
53517: LD_INT 2
53519: PUSH
53520: LD_INT 1
53522: NEG
53523: PUSH
53524: EMPTY
53525: LIST
53526: LIST
53527: PUSH
53528: LD_INT 3
53530: PUSH
53531: LD_INT 0
53533: PUSH
53534: EMPTY
53535: LIST
53536: LIST
53537: PUSH
53538: LD_INT 3
53540: PUSH
53541: LD_INT 1
53543: PUSH
53544: EMPTY
53545: LIST
53546: LIST
53547: PUSH
53548: LD_INT 3
53550: PUSH
53551: LD_INT 2
53553: PUSH
53554: EMPTY
53555: LIST
53556: LIST
53557: PUSH
53558: LD_INT 3
53560: PUSH
53561: LD_INT 3
53563: PUSH
53564: EMPTY
53565: LIST
53566: LIST
53567: PUSH
53568: LD_INT 2
53570: PUSH
53571: LD_INT 3
53573: PUSH
53574: EMPTY
53575: LIST
53576: LIST
53577: PUSH
53578: LD_INT 2
53580: NEG
53581: PUSH
53582: LD_INT 1
53584: PUSH
53585: EMPTY
53586: LIST
53587: LIST
53588: PUSH
53589: LD_INT 3
53591: NEG
53592: PUSH
53593: LD_INT 0
53595: PUSH
53596: EMPTY
53597: LIST
53598: LIST
53599: PUSH
53600: LD_INT 3
53602: NEG
53603: PUSH
53604: LD_INT 1
53606: NEG
53607: PUSH
53608: EMPTY
53609: LIST
53610: LIST
53611: PUSH
53612: LD_INT 3
53614: NEG
53615: PUSH
53616: LD_INT 2
53618: NEG
53619: PUSH
53620: EMPTY
53621: LIST
53622: LIST
53623: PUSH
53624: LD_INT 3
53626: NEG
53627: PUSH
53628: LD_INT 3
53630: NEG
53631: PUSH
53632: EMPTY
53633: LIST
53634: LIST
53635: PUSH
53636: EMPTY
53637: LIST
53638: LIST
53639: LIST
53640: LIST
53641: LIST
53642: LIST
53643: LIST
53644: LIST
53645: LIST
53646: LIST
53647: LIST
53648: LIST
53649: LIST
53650: LIST
53651: LIST
53652: LIST
53653: LIST
53654: LIST
53655: LIST
53656: LIST
53657: LIST
53658: LIST
53659: LIST
53660: LIST
53661: LIST
53662: LIST
53663: LIST
53664: LIST
53665: LIST
53666: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53667: LD_ADDR_VAR 0 42
53671: PUSH
53672: LD_INT 0
53674: PUSH
53675: LD_INT 0
53677: PUSH
53678: EMPTY
53679: LIST
53680: LIST
53681: PUSH
53682: LD_INT 0
53684: PUSH
53685: LD_INT 1
53687: NEG
53688: PUSH
53689: EMPTY
53690: LIST
53691: LIST
53692: PUSH
53693: LD_INT 1
53695: PUSH
53696: LD_INT 0
53698: PUSH
53699: EMPTY
53700: LIST
53701: LIST
53702: PUSH
53703: LD_INT 1
53705: PUSH
53706: LD_INT 1
53708: PUSH
53709: EMPTY
53710: LIST
53711: LIST
53712: PUSH
53713: LD_INT 0
53715: PUSH
53716: LD_INT 1
53718: PUSH
53719: EMPTY
53720: LIST
53721: LIST
53722: PUSH
53723: LD_INT 1
53725: NEG
53726: PUSH
53727: LD_INT 0
53729: PUSH
53730: EMPTY
53731: LIST
53732: LIST
53733: PUSH
53734: LD_INT 1
53736: NEG
53737: PUSH
53738: LD_INT 1
53740: NEG
53741: PUSH
53742: EMPTY
53743: LIST
53744: LIST
53745: PUSH
53746: LD_INT 1
53748: NEG
53749: PUSH
53750: LD_INT 2
53752: NEG
53753: PUSH
53754: EMPTY
53755: LIST
53756: LIST
53757: PUSH
53758: LD_INT 0
53760: PUSH
53761: LD_INT 2
53763: NEG
53764: PUSH
53765: EMPTY
53766: LIST
53767: LIST
53768: PUSH
53769: LD_INT 1
53771: PUSH
53772: LD_INT 1
53774: NEG
53775: PUSH
53776: EMPTY
53777: LIST
53778: LIST
53779: PUSH
53780: LD_INT 2
53782: PUSH
53783: LD_INT 1
53785: PUSH
53786: EMPTY
53787: LIST
53788: LIST
53789: PUSH
53790: LD_INT 2
53792: PUSH
53793: LD_INT 2
53795: PUSH
53796: EMPTY
53797: LIST
53798: LIST
53799: PUSH
53800: LD_INT 1
53802: PUSH
53803: LD_INT 2
53805: PUSH
53806: EMPTY
53807: LIST
53808: LIST
53809: PUSH
53810: LD_INT 0
53812: PUSH
53813: LD_INT 2
53815: PUSH
53816: EMPTY
53817: LIST
53818: LIST
53819: PUSH
53820: LD_INT 1
53822: NEG
53823: PUSH
53824: LD_INT 1
53826: PUSH
53827: EMPTY
53828: LIST
53829: LIST
53830: PUSH
53831: LD_INT 2
53833: NEG
53834: PUSH
53835: LD_INT 1
53837: NEG
53838: PUSH
53839: EMPTY
53840: LIST
53841: LIST
53842: PUSH
53843: LD_INT 2
53845: NEG
53846: PUSH
53847: LD_INT 2
53849: NEG
53850: PUSH
53851: EMPTY
53852: LIST
53853: LIST
53854: PUSH
53855: LD_INT 2
53857: NEG
53858: PUSH
53859: LD_INT 3
53861: NEG
53862: PUSH
53863: EMPTY
53864: LIST
53865: LIST
53866: PUSH
53867: LD_INT 1
53869: NEG
53870: PUSH
53871: LD_INT 3
53873: NEG
53874: PUSH
53875: EMPTY
53876: LIST
53877: LIST
53878: PUSH
53879: LD_INT 0
53881: PUSH
53882: LD_INT 3
53884: NEG
53885: PUSH
53886: EMPTY
53887: LIST
53888: LIST
53889: PUSH
53890: LD_INT 1
53892: PUSH
53893: LD_INT 2
53895: NEG
53896: PUSH
53897: EMPTY
53898: LIST
53899: LIST
53900: PUSH
53901: LD_INT 3
53903: PUSH
53904: LD_INT 2
53906: PUSH
53907: EMPTY
53908: LIST
53909: LIST
53910: PUSH
53911: LD_INT 3
53913: PUSH
53914: LD_INT 3
53916: PUSH
53917: EMPTY
53918: LIST
53919: LIST
53920: PUSH
53921: LD_INT 2
53923: PUSH
53924: LD_INT 3
53926: PUSH
53927: EMPTY
53928: LIST
53929: LIST
53930: PUSH
53931: LD_INT 1
53933: PUSH
53934: LD_INT 3
53936: PUSH
53937: EMPTY
53938: LIST
53939: LIST
53940: PUSH
53941: LD_INT 0
53943: PUSH
53944: LD_INT 3
53946: PUSH
53947: EMPTY
53948: LIST
53949: LIST
53950: PUSH
53951: LD_INT 1
53953: NEG
53954: PUSH
53955: LD_INT 2
53957: PUSH
53958: EMPTY
53959: LIST
53960: LIST
53961: PUSH
53962: LD_INT 3
53964: NEG
53965: PUSH
53966: LD_INT 2
53968: NEG
53969: PUSH
53970: EMPTY
53971: LIST
53972: LIST
53973: PUSH
53974: LD_INT 3
53976: NEG
53977: PUSH
53978: LD_INT 3
53980: NEG
53981: PUSH
53982: EMPTY
53983: LIST
53984: LIST
53985: PUSH
53986: EMPTY
53987: LIST
53988: LIST
53989: LIST
53990: LIST
53991: LIST
53992: LIST
53993: LIST
53994: LIST
53995: LIST
53996: LIST
53997: LIST
53998: LIST
53999: LIST
54000: LIST
54001: LIST
54002: LIST
54003: LIST
54004: LIST
54005: LIST
54006: LIST
54007: LIST
54008: LIST
54009: LIST
54010: LIST
54011: LIST
54012: LIST
54013: LIST
54014: LIST
54015: LIST
54016: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54017: LD_ADDR_VAR 0 43
54021: PUSH
54022: LD_INT 0
54024: PUSH
54025: LD_INT 0
54027: PUSH
54028: EMPTY
54029: LIST
54030: LIST
54031: PUSH
54032: LD_INT 0
54034: PUSH
54035: LD_INT 1
54037: NEG
54038: PUSH
54039: EMPTY
54040: LIST
54041: LIST
54042: PUSH
54043: LD_INT 1
54045: PUSH
54046: LD_INT 0
54048: PUSH
54049: EMPTY
54050: LIST
54051: LIST
54052: PUSH
54053: LD_INT 1
54055: PUSH
54056: LD_INT 1
54058: PUSH
54059: EMPTY
54060: LIST
54061: LIST
54062: PUSH
54063: LD_INT 0
54065: PUSH
54066: LD_INT 1
54068: PUSH
54069: EMPTY
54070: LIST
54071: LIST
54072: PUSH
54073: LD_INT 1
54075: NEG
54076: PUSH
54077: LD_INT 0
54079: PUSH
54080: EMPTY
54081: LIST
54082: LIST
54083: PUSH
54084: LD_INT 1
54086: NEG
54087: PUSH
54088: LD_INT 1
54090: NEG
54091: PUSH
54092: EMPTY
54093: LIST
54094: LIST
54095: PUSH
54096: LD_INT 1
54098: NEG
54099: PUSH
54100: LD_INT 2
54102: NEG
54103: PUSH
54104: EMPTY
54105: LIST
54106: LIST
54107: PUSH
54108: LD_INT 0
54110: PUSH
54111: LD_INT 2
54113: NEG
54114: PUSH
54115: EMPTY
54116: LIST
54117: LIST
54118: PUSH
54119: LD_INT 1
54121: PUSH
54122: LD_INT 1
54124: NEG
54125: PUSH
54126: EMPTY
54127: LIST
54128: LIST
54129: PUSH
54130: LD_INT 2
54132: PUSH
54133: LD_INT 0
54135: PUSH
54136: EMPTY
54137: LIST
54138: LIST
54139: PUSH
54140: LD_INT 2
54142: PUSH
54143: LD_INT 1
54145: PUSH
54146: EMPTY
54147: LIST
54148: LIST
54149: PUSH
54150: LD_INT 1
54152: PUSH
54153: LD_INT 2
54155: PUSH
54156: EMPTY
54157: LIST
54158: LIST
54159: PUSH
54160: LD_INT 0
54162: PUSH
54163: LD_INT 2
54165: PUSH
54166: EMPTY
54167: LIST
54168: LIST
54169: PUSH
54170: LD_INT 1
54172: NEG
54173: PUSH
54174: LD_INT 1
54176: PUSH
54177: EMPTY
54178: LIST
54179: LIST
54180: PUSH
54181: LD_INT 2
54183: NEG
54184: PUSH
54185: LD_INT 0
54187: PUSH
54188: EMPTY
54189: LIST
54190: LIST
54191: PUSH
54192: LD_INT 2
54194: NEG
54195: PUSH
54196: LD_INT 1
54198: NEG
54199: PUSH
54200: EMPTY
54201: LIST
54202: LIST
54203: PUSH
54204: LD_INT 1
54206: NEG
54207: PUSH
54208: LD_INT 3
54210: NEG
54211: PUSH
54212: EMPTY
54213: LIST
54214: LIST
54215: PUSH
54216: LD_INT 0
54218: PUSH
54219: LD_INT 3
54221: NEG
54222: PUSH
54223: EMPTY
54224: LIST
54225: LIST
54226: PUSH
54227: LD_INT 1
54229: PUSH
54230: LD_INT 2
54232: NEG
54233: PUSH
54234: EMPTY
54235: LIST
54236: LIST
54237: PUSH
54238: LD_INT 2
54240: PUSH
54241: LD_INT 1
54243: NEG
54244: PUSH
54245: EMPTY
54246: LIST
54247: LIST
54248: PUSH
54249: LD_INT 3
54251: PUSH
54252: LD_INT 0
54254: PUSH
54255: EMPTY
54256: LIST
54257: LIST
54258: PUSH
54259: LD_INT 3
54261: PUSH
54262: LD_INT 1
54264: PUSH
54265: EMPTY
54266: LIST
54267: LIST
54268: PUSH
54269: LD_INT 1
54271: PUSH
54272: LD_INT 3
54274: PUSH
54275: EMPTY
54276: LIST
54277: LIST
54278: PUSH
54279: LD_INT 0
54281: PUSH
54282: LD_INT 3
54284: PUSH
54285: EMPTY
54286: LIST
54287: LIST
54288: PUSH
54289: LD_INT 1
54291: NEG
54292: PUSH
54293: LD_INT 2
54295: PUSH
54296: EMPTY
54297: LIST
54298: LIST
54299: PUSH
54300: LD_INT 2
54302: NEG
54303: PUSH
54304: LD_INT 1
54306: PUSH
54307: EMPTY
54308: LIST
54309: LIST
54310: PUSH
54311: LD_INT 3
54313: NEG
54314: PUSH
54315: LD_INT 0
54317: PUSH
54318: EMPTY
54319: LIST
54320: LIST
54321: PUSH
54322: LD_INT 3
54324: NEG
54325: PUSH
54326: LD_INT 1
54328: NEG
54329: PUSH
54330: EMPTY
54331: LIST
54332: LIST
54333: PUSH
54334: EMPTY
54335: LIST
54336: LIST
54337: LIST
54338: LIST
54339: LIST
54340: LIST
54341: LIST
54342: LIST
54343: LIST
54344: LIST
54345: LIST
54346: LIST
54347: LIST
54348: LIST
54349: LIST
54350: LIST
54351: LIST
54352: LIST
54353: LIST
54354: LIST
54355: LIST
54356: LIST
54357: LIST
54358: LIST
54359: LIST
54360: LIST
54361: LIST
54362: LIST
54363: LIST
54364: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54365: LD_ADDR_VAR 0 44
54369: PUSH
54370: LD_INT 0
54372: PUSH
54373: LD_INT 0
54375: PUSH
54376: EMPTY
54377: LIST
54378: LIST
54379: PUSH
54380: LD_INT 0
54382: PUSH
54383: LD_INT 1
54385: NEG
54386: PUSH
54387: EMPTY
54388: LIST
54389: LIST
54390: PUSH
54391: LD_INT 1
54393: PUSH
54394: LD_INT 0
54396: PUSH
54397: EMPTY
54398: LIST
54399: LIST
54400: PUSH
54401: LD_INT 1
54403: PUSH
54404: LD_INT 1
54406: PUSH
54407: EMPTY
54408: LIST
54409: LIST
54410: PUSH
54411: LD_INT 0
54413: PUSH
54414: LD_INT 1
54416: PUSH
54417: EMPTY
54418: LIST
54419: LIST
54420: PUSH
54421: LD_INT 1
54423: NEG
54424: PUSH
54425: LD_INT 0
54427: PUSH
54428: EMPTY
54429: LIST
54430: LIST
54431: PUSH
54432: LD_INT 1
54434: NEG
54435: PUSH
54436: LD_INT 1
54438: NEG
54439: PUSH
54440: EMPTY
54441: LIST
54442: LIST
54443: PUSH
54444: LD_INT 1
54446: NEG
54447: PUSH
54448: LD_INT 2
54450: NEG
54451: PUSH
54452: EMPTY
54453: LIST
54454: LIST
54455: PUSH
54456: LD_INT 1
54458: PUSH
54459: LD_INT 1
54461: NEG
54462: PUSH
54463: EMPTY
54464: LIST
54465: LIST
54466: PUSH
54467: LD_INT 2
54469: PUSH
54470: LD_INT 0
54472: PUSH
54473: EMPTY
54474: LIST
54475: LIST
54476: PUSH
54477: LD_INT 2
54479: PUSH
54480: LD_INT 1
54482: PUSH
54483: EMPTY
54484: LIST
54485: LIST
54486: PUSH
54487: LD_INT 2
54489: PUSH
54490: LD_INT 2
54492: PUSH
54493: EMPTY
54494: LIST
54495: LIST
54496: PUSH
54497: LD_INT 1
54499: PUSH
54500: LD_INT 2
54502: PUSH
54503: EMPTY
54504: LIST
54505: LIST
54506: PUSH
54507: LD_INT 1
54509: NEG
54510: PUSH
54511: LD_INT 1
54513: PUSH
54514: EMPTY
54515: LIST
54516: LIST
54517: PUSH
54518: LD_INT 2
54520: NEG
54521: PUSH
54522: LD_INT 0
54524: PUSH
54525: EMPTY
54526: LIST
54527: LIST
54528: PUSH
54529: LD_INT 2
54531: NEG
54532: PUSH
54533: LD_INT 1
54535: NEG
54536: PUSH
54537: EMPTY
54538: LIST
54539: LIST
54540: PUSH
54541: LD_INT 2
54543: NEG
54544: PUSH
54545: LD_INT 2
54547: NEG
54548: PUSH
54549: EMPTY
54550: LIST
54551: LIST
54552: PUSH
54553: LD_INT 2
54555: NEG
54556: PUSH
54557: LD_INT 3
54559: NEG
54560: PUSH
54561: EMPTY
54562: LIST
54563: LIST
54564: PUSH
54565: LD_INT 2
54567: PUSH
54568: LD_INT 1
54570: NEG
54571: PUSH
54572: EMPTY
54573: LIST
54574: LIST
54575: PUSH
54576: LD_INT 3
54578: PUSH
54579: LD_INT 0
54581: PUSH
54582: EMPTY
54583: LIST
54584: LIST
54585: PUSH
54586: LD_INT 3
54588: PUSH
54589: LD_INT 1
54591: PUSH
54592: EMPTY
54593: LIST
54594: LIST
54595: PUSH
54596: LD_INT 3
54598: PUSH
54599: LD_INT 2
54601: PUSH
54602: EMPTY
54603: LIST
54604: LIST
54605: PUSH
54606: LD_INT 3
54608: PUSH
54609: LD_INT 3
54611: PUSH
54612: EMPTY
54613: LIST
54614: LIST
54615: PUSH
54616: LD_INT 2
54618: PUSH
54619: LD_INT 3
54621: PUSH
54622: EMPTY
54623: LIST
54624: LIST
54625: PUSH
54626: LD_INT 2
54628: NEG
54629: PUSH
54630: LD_INT 1
54632: PUSH
54633: EMPTY
54634: LIST
54635: LIST
54636: PUSH
54637: LD_INT 3
54639: NEG
54640: PUSH
54641: LD_INT 0
54643: PUSH
54644: EMPTY
54645: LIST
54646: LIST
54647: PUSH
54648: LD_INT 3
54650: NEG
54651: PUSH
54652: LD_INT 1
54654: NEG
54655: PUSH
54656: EMPTY
54657: LIST
54658: LIST
54659: PUSH
54660: LD_INT 3
54662: NEG
54663: PUSH
54664: LD_INT 2
54666: NEG
54667: PUSH
54668: EMPTY
54669: LIST
54670: LIST
54671: PUSH
54672: LD_INT 3
54674: NEG
54675: PUSH
54676: LD_INT 3
54678: NEG
54679: PUSH
54680: EMPTY
54681: LIST
54682: LIST
54683: PUSH
54684: EMPTY
54685: LIST
54686: LIST
54687: LIST
54688: LIST
54689: LIST
54690: LIST
54691: LIST
54692: LIST
54693: LIST
54694: LIST
54695: LIST
54696: LIST
54697: LIST
54698: LIST
54699: LIST
54700: LIST
54701: LIST
54702: LIST
54703: LIST
54704: LIST
54705: LIST
54706: LIST
54707: LIST
54708: LIST
54709: LIST
54710: LIST
54711: LIST
54712: LIST
54713: LIST
54714: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54715: LD_ADDR_VAR 0 45
54719: PUSH
54720: LD_INT 0
54722: PUSH
54723: LD_INT 0
54725: PUSH
54726: EMPTY
54727: LIST
54728: LIST
54729: PUSH
54730: LD_INT 0
54732: PUSH
54733: LD_INT 1
54735: NEG
54736: PUSH
54737: EMPTY
54738: LIST
54739: LIST
54740: PUSH
54741: LD_INT 1
54743: PUSH
54744: LD_INT 0
54746: PUSH
54747: EMPTY
54748: LIST
54749: LIST
54750: PUSH
54751: LD_INT 1
54753: PUSH
54754: LD_INT 1
54756: PUSH
54757: EMPTY
54758: LIST
54759: LIST
54760: PUSH
54761: LD_INT 0
54763: PUSH
54764: LD_INT 1
54766: PUSH
54767: EMPTY
54768: LIST
54769: LIST
54770: PUSH
54771: LD_INT 1
54773: NEG
54774: PUSH
54775: LD_INT 0
54777: PUSH
54778: EMPTY
54779: LIST
54780: LIST
54781: PUSH
54782: LD_INT 1
54784: NEG
54785: PUSH
54786: LD_INT 1
54788: NEG
54789: PUSH
54790: EMPTY
54791: LIST
54792: LIST
54793: PUSH
54794: LD_INT 1
54796: NEG
54797: PUSH
54798: LD_INT 2
54800: NEG
54801: PUSH
54802: EMPTY
54803: LIST
54804: LIST
54805: PUSH
54806: LD_INT 0
54808: PUSH
54809: LD_INT 2
54811: NEG
54812: PUSH
54813: EMPTY
54814: LIST
54815: LIST
54816: PUSH
54817: LD_INT 1
54819: PUSH
54820: LD_INT 1
54822: NEG
54823: PUSH
54824: EMPTY
54825: LIST
54826: LIST
54827: PUSH
54828: LD_INT 2
54830: PUSH
54831: LD_INT 1
54833: PUSH
54834: EMPTY
54835: LIST
54836: LIST
54837: PUSH
54838: LD_INT 2
54840: PUSH
54841: LD_INT 2
54843: PUSH
54844: EMPTY
54845: LIST
54846: LIST
54847: PUSH
54848: LD_INT 1
54850: PUSH
54851: LD_INT 2
54853: PUSH
54854: EMPTY
54855: LIST
54856: LIST
54857: PUSH
54858: LD_INT 0
54860: PUSH
54861: LD_INT 2
54863: PUSH
54864: EMPTY
54865: LIST
54866: LIST
54867: PUSH
54868: LD_INT 1
54870: NEG
54871: PUSH
54872: LD_INT 1
54874: PUSH
54875: EMPTY
54876: LIST
54877: LIST
54878: PUSH
54879: LD_INT 2
54881: NEG
54882: PUSH
54883: LD_INT 1
54885: NEG
54886: PUSH
54887: EMPTY
54888: LIST
54889: LIST
54890: PUSH
54891: LD_INT 2
54893: NEG
54894: PUSH
54895: LD_INT 2
54897: NEG
54898: PUSH
54899: EMPTY
54900: LIST
54901: LIST
54902: PUSH
54903: LD_INT 2
54905: NEG
54906: PUSH
54907: LD_INT 3
54909: NEG
54910: PUSH
54911: EMPTY
54912: LIST
54913: LIST
54914: PUSH
54915: LD_INT 1
54917: NEG
54918: PUSH
54919: LD_INT 3
54921: NEG
54922: PUSH
54923: EMPTY
54924: LIST
54925: LIST
54926: PUSH
54927: LD_INT 0
54929: PUSH
54930: LD_INT 3
54932: NEG
54933: PUSH
54934: EMPTY
54935: LIST
54936: LIST
54937: PUSH
54938: LD_INT 1
54940: PUSH
54941: LD_INT 2
54943: NEG
54944: PUSH
54945: EMPTY
54946: LIST
54947: LIST
54948: PUSH
54949: LD_INT 3
54951: PUSH
54952: LD_INT 2
54954: PUSH
54955: EMPTY
54956: LIST
54957: LIST
54958: PUSH
54959: LD_INT 3
54961: PUSH
54962: LD_INT 3
54964: PUSH
54965: EMPTY
54966: LIST
54967: LIST
54968: PUSH
54969: LD_INT 2
54971: PUSH
54972: LD_INT 3
54974: PUSH
54975: EMPTY
54976: LIST
54977: LIST
54978: PUSH
54979: LD_INT 1
54981: PUSH
54982: LD_INT 3
54984: PUSH
54985: EMPTY
54986: LIST
54987: LIST
54988: PUSH
54989: LD_INT 0
54991: PUSH
54992: LD_INT 3
54994: PUSH
54995: EMPTY
54996: LIST
54997: LIST
54998: PUSH
54999: LD_INT 1
55001: NEG
55002: PUSH
55003: LD_INT 2
55005: PUSH
55006: EMPTY
55007: LIST
55008: LIST
55009: PUSH
55010: LD_INT 3
55012: NEG
55013: PUSH
55014: LD_INT 2
55016: NEG
55017: PUSH
55018: EMPTY
55019: LIST
55020: LIST
55021: PUSH
55022: LD_INT 3
55024: NEG
55025: PUSH
55026: LD_INT 3
55028: NEG
55029: PUSH
55030: EMPTY
55031: LIST
55032: LIST
55033: PUSH
55034: EMPTY
55035: LIST
55036: LIST
55037: LIST
55038: LIST
55039: LIST
55040: LIST
55041: LIST
55042: LIST
55043: LIST
55044: LIST
55045: LIST
55046: LIST
55047: LIST
55048: LIST
55049: LIST
55050: LIST
55051: LIST
55052: LIST
55053: LIST
55054: LIST
55055: LIST
55056: LIST
55057: LIST
55058: LIST
55059: LIST
55060: LIST
55061: LIST
55062: LIST
55063: LIST
55064: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55065: LD_ADDR_VAR 0 46
55069: PUSH
55070: LD_INT 0
55072: PUSH
55073: LD_INT 0
55075: PUSH
55076: EMPTY
55077: LIST
55078: LIST
55079: PUSH
55080: LD_INT 0
55082: PUSH
55083: LD_INT 1
55085: NEG
55086: PUSH
55087: EMPTY
55088: LIST
55089: LIST
55090: PUSH
55091: LD_INT 1
55093: PUSH
55094: LD_INT 0
55096: PUSH
55097: EMPTY
55098: LIST
55099: LIST
55100: PUSH
55101: LD_INT 1
55103: PUSH
55104: LD_INT 1
55106: PUSH
55107: EMPTY
55108: LIST
55109: LIST
55110: PUSH
55111: LD_INT 0
55113: PUSH
55114: LD_INT 1
55116: PUSH
55117: EMPTY
55118: LIST
55119: LIST
55120: PUSH
55121: LD_INT 1
55123: NEG
55124: PUSH
55125: LD_INT 0
55127: PUSH
55128: EMPTY
55129: LIST
55130: LIST
55131: PUSH
55132: LD_INT 1
55134: NEG
55135: PUSH
55136: LD_INT 1
55138: NEG
55139: PUSH
55140: EMPTY
55141: LIST
55142: LIST
55143: PUSH
55144: LD_INT 1
55146: NEG
55147: PUSH
55148: LD_INT 2
55150: NEG
55151: PUSH
55152: EMPTY
55153: LIST
55154: LIST
55155: PUSH
55156: LD_INT 0
55158: PUSH
55159: LD_INT 2
55161: NEG
55162: PUSH
55163: EMPTY
55164: LIST
55165: LIST
55166: PUSH
55167: LD_INT 1
55169: PUSH
55170: LD_INT 1
55172: NEG
55173: PUSH
55174: EMPTY
55175: LIST
55176: LIST
55177: PUSH
55178: LD_INT 2
55180: PUSH
55181: LD_INT 0
55183: PUSH
55184: EMPTY
55185: LIST
55186: LIST
55187: PUSH
55188: LD_INT 2
55190: PUSH
55191: LD_INT 1
55193: PUSH
55194: EMPTY
55195: LIST
55196: LIST
55197: PUSH
55198: LD_INT 1
55200: PUSH
55201: LD_INT 2
55203: PUSH
55204: EMPTY
55205: LIST
55206: LIST
55207: PUSH
55208: LD_INT 0
55210: PUSH
55211: LD_INT 2
55213: PUSH
55214: EMPTY
55215: LIST
55216: LIST
55217: PUSH
55218: LD_INT 1
55220: NEG
55221: PUSH
55222: LD_INT 1
55224: PUSH
55225: EMPTY
55226: LIST
55227: LIST
55228: PUSH
55229: LD_INT 2
55231: NEG
55232: PUSH
55233: LD_INT 0
55235: PUSH
55236: EMPTY
55237: LIST
55238: LIST
55239: PUSH
55240: LD_INT 2
55242: NEG
55243: PUSH
55244: LD_INT 1
55246: NEG
55247: PUSH
55248: EMPTY
55249: LIST
55250: LIST
55251: PUSH
55252: LD_INT 1
55254: NEG
55255: PUSH
55256: LD_INT 3
55258: NEG
55259: PUSH
55260: EMPTY
55261: LIST
55262: LIST
55263: PUSH
55264: LD_INT 0
55266: PUSH
55267: LD_INT 3
55269: NEG
55270: PUSH
55271: EMPTY
55272: LIST
55273: LIST
55274: PUSH
55275: LD_INT 1
55277: PUSH
55278: LD_INT 2
55280: NEG
55281: PUSH
55282: EMPTY
55283: LIST
55284: LIST
55285: PUSH
55286: LD_INT 2
55288: PUSH
55289: LD_INT 1
55291: NEG
55292: PUSH
55293: EMPTY
55294: LIST
55295: LIST
55296: PUSH
55297: LD_INT 3
55299: PUSH
55300: LD_INT 0
55302: PUSH
55303: EMPTY
55304: LIST
55305: LIST
55306: PUSH
55307: LD_INT 3
55309: PUSH
55310: LD_INT 1
55312: PUSH
55313: EMPTY
55314: LIST
55315: LIST
55316: PUSH
55317: LD_INT 1
55319: PUSH
55320: LD_INT 3
55322: PUSH
55323: EMPTY
55324: LIST
55325: LIST
55326: PUSH
55327: LD_INT 0
55329: PUSH
55330: LD_INT 3
55332: PUSH
55333: EMPTY
55334: LIST
55335: LIST
55336: PUSH
55337: LD_INT 1
55339: NEG
55340: PUSH
55341: LD_INT 2
55343: PUSH
55344: EMPTY
55345: LIST
55346: LIST
55347: PUSH
55348: LD_INT 2
55350: NEG
55351: PUSH
55352: LD_INT 1
55354: PUSH
55355: EMPTY
55356: LIST
55357: LIST
55358: PUSH
55359: LD_INT 3
55361: NEG
55362: PUSH
55363: LD_INT 0
55365: PUSH
55366: EMPTY
55367: LIST
55368: LIST
55369: PUSH
55370: LD_INT 3
55372: NEG
55373: PUSH
55374: LD_INT 1
55376: NEG
55377: PUSH
55378: EMPTY
55379: LIST
55380: LIST
55381: PUSH
55382: EMPTY
55383: LIST
55384: LIST
55385: LIST
55386: LIST
55387: LIST
55388: LIST
55389: LIST
55390: LIST
55391: LIST
55392: LIST
55393: LIST
55394: LIST
55395: LIST
55396: LIST
55397: LIST
55398: LIST
55399: LIST
55400: LIST
55401: LIST
55402: LIST
55403: LIST
55404: LIST
55405: LIST
55406: LIST
55407: LIST
55408: LIST
55409: LIST
55410: LIST
55411: LIST
55412: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55413: LD_ADDR_VAR 0 47
55417: PUSH
55418: LD_INT 0
55420: PUSH
55421: LD_INT 0
55423: PUSH
55424: EMPTY
55425: LIST
55426: LIST
55427: PUSH
55428: LD_INT 0
55430: PUSH
55431: LD_INT 1
55433: NEG
55434: PUSH
55435: EMPTY
55436: LIST
55437: LIST
55438: PUSH
55439: LD_INT 1
55441: PUSH
55442: LD_INT 0
55444: PUSH
55445: EMPTY
55446: LIST
55447: LIST
55448: PUSH
55449: LD_INT 1
55451: PUSH
55452: LD_INT 1
55454: PUSH
55455: EMPTY
55456: LIST
55457: LIST
55458: PUSH
55459: LD_INT 0
55461: PUSH
55462: LD_INT 1
55464: PUSH
55465: EMPTY
55466: LIST
55467: LIST
55468: PUSH
55469: LD_INT 1
55471: NEG
55472: PUSH
55473: LD_INT 0
55475: PUSH
55476: EMPTY
55477: LIST
55478: LIST
55479: PUSH
55480: LD_INT 1
55482: NEG
55483: PUSH
55484: LD_INT 1
55486: NEG
55487: PUSH
55488: EMPTY
55489: LIST
55490: LIST
55491: PUSH
55492: LD_INT 1
55494: NEG
55495: PUSH
55496: LD_INT 2
55498: NEG
55499: PUSH
55500: EMPTY
55501: LIST
55502: LIST
55503: PUSH
55504: LD_INT 0
55506: PUSH
55507: LD_INT 2
55509: NEG
55510: PUSH
55511: EMPTY
55512: LIST
55513: LIST
55514: PUSH
55515: LD_INT 1
55517: PUSH
55518: LD_INT 1
55520: NEG
55521: PUSH
55522: EMPTY
55523: LIST
55524: LIST
55525: PUSH
55526: LD_INT 2
55528: NEG
55529: PUSH
55530: LD_INT 1
55532: NEG
55533: PUSH
55534: EMPTY
55535: LIST
55536: LIST
55537: PUSH
55538: LD_INT 2
55540: NEG
55541: PUSH
55542: LD_INT 2
55544: NEG
55545: PUSH
55546: EMPTY
55547: LIST
55548: LIST
55549: PUSH
55550: EMPTY
55551: LIST
55552: LIST
55553: LIST
55554: LIST
55555: LIST
55556: LIST
55557: LIST
55558: LIST
55559: LIST
55560: LIST
55561: LIST
55562: LIST
55563: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
55564: LD_ADDR_VAR 0 48
55568: PUSH
55569: LD_INT 0
55571: PUSH
55572: LD_INT 0
55574: PUSH
55575: EMPTY
55576: LIST
55577: LIST
55578: PUSH
55579: LD_INT 0
55581: PUSH
55582: LD_INT 1
55584: NEG
55585: PUSH
55586: EMPTY
55587: LIST
55588: LIST
55589: PUSH
55590: LD_INT 1
55592: PUSH
55593: LD_INT 0
55595: PUSH
55596: EMPTY
55597: LIST
55598: LIST
55599: PUSH
55600: LD_INT 1
55602: PUSH
55603: LD_INT 1
55605: PUSH
55606: EMPTY
55607: LIST
55608: LIST
55609: PUSH
55610: LD_INT 0
55612: PUSH
55613: LD_INT 1
55615: PUSH
55616: EMPTY
55617: LIST
55618: LIST
55619: PUSH
55620: LD_INT 1
55622: NEG
55623: PUSH
55624: LD_INT 0
55626: PUSH
55627: EMPTY
55628: LIST
55629: LIST
55630: PUSH
55631: LD_INT 1
55633: NEG
55634: PUSH
55635: LD_INT 1
55637: NEG
55638: PUSH
55639: EMPTY
55640: LIST
55641: LIST
55642: PUSH
55643: LD_INT 1
55645: NEG
55646: PUSH
55647: LD_INT 2
55649: NEG
55650: PUSH
55651: EMPTY
55652: LIST
55653: LIST
55654: PUSH
55655: LD_INT 0
55657: PUSH
55658: LD_INT 2
55660: NEG
55661: PUSH
55662: EMPTY
55663: LIST
55664: LIST
55665: PUSH
55666: LD_INT 1
55668: PUSH
55669: LD_INT 1
55671: NEG
55672: PUSH
55673: EMPTY
55674: LIST
55675: LIST
55676: PUSH
55677: LD_INT 2
55679: PUSH
55680: LD_INT 0
55682: PUSH
55683: EMPTY
55684: LIST
55685: LIST
55686: PUSH
55687: LD_INT 2
55689: PUSH
55690: LD_INT 1
55692: PUSH
55693: EMPTY
55694: LIST
55695: LIST
55696: PUSH
55697: EMPTY
55698: LIST
55699: LIST
55700: LIST
55701: LIST
55702: LIST
55703: LIST
55704: LIST
55705: LIST
55706: LIST
55707: LIST
55708: LIST
55709: LIST
55710: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
55711: LD_ADDR_VAR 0 49
55715: PUSH
55716: LD_INT 0
55718: PUSH
55719: LD_INT 0
55721: PUSH
55722: EMPTY
55723: LIST
55724: LIST
55725: PUSH
55726: LD_INT 0
55728: PUSH
55729: LD_INT 1
55731: NEG
55732: PUSH
55733: EMPTY
55734: LIST
55735: LIST
55736: PUSH
55737: LD_INT 1
55739: PUSH
55740: LD_INT 0
55742: PUSH
55743: EMPTY
55744: LIST
55745: LIST
55746: PUSH
55747: LD_INT 1
55749: PUSH
55750: LD_INT 1
55752: PUSH
55753: EMPTY
55754: LIST
55755: LIST
55756: PUSH
55757: LD_INT 0
55759: PUSH
55760: LD_INT 1
55762: PUSH
55763: EMPTY
55764: LIST
55765: LIST
55766: PUSH
55767: LD_INT 1
55769: NEG
55770: PUSH
55771: LD_INT 0
55773: PUSH
55774: EMPTY
55775: LIST
55776: LIST
55777: PUSH
55778: LD_INT 1
55780: NEG
55781: PUSH
55782: LD_INT 1
55784: NEG
55785: PUSH
55786: EMPTY
55787: LIST
55788: LIST
55789: PUSH
55790: LD_INT 1
55792: PUSH
55793: LD_INT 1
55795: NEG
55796: PUSH
55797: EMPTY
55798: LIST
55799: LIST
55800: PUSH
55801: LD_INT 2
55803: PUSH
55804: LD_INT 0
55806: PUSH
55807: EMPTY
55808: LIST
55809: LIST
55810: PUSH
55811: LD_INT 2
55813: PUSH
55814: LD_INT 1
55816: PUSH
55817: EMPTY
55818: LIST
55819: LIST
55820: PUSH
55821: LD_INT 2
55823: PUSH
55824: LD_INT 2
55826: PUSH
55827: EMPTY
55828: LIST
55829: LIST
55830: PUSH
55831: LD_INT 1
55833: PUSH
55834: LD_INT 2
55836: PUSH
55837: EMPTY
55838: LIST
55839: LIST
55840: PUSH
55841: EMPTY
55842: LIST
55843: LIST
55844: LIST
55845: LIST
55846: LIST
55847: LIST
55848: LIST
55849: LIST
55850: LIST
55851: LIST
55852: LIST
55853: LIST
55854: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
55855: LD_ADDR_VAR 0 50
55859: PUSH
55860: LD_INT 0
55862: PUSH
55863: LD_INT 0
55865: PUSH
55866: EMPTY
55867: LIST
55868: LIST
55869: PUSH
55870: LD_INT 0
55872: PUSH
55873: LD_INT 1
55875: NEG
55876: PUSH
55877: EMPTY
55878: LIST
55879: LIST
55880: PUSH
55881: LD_INT 1
55883: PUSH
55884: LD_INT 0
55886: PUSH
55887: EMPTY
55888: LIST
55889: LIST
55890: PUSH
55891: LD_INT 1
55893: PUSH
55894: LD_INT 1
55896: PUSH
55897: EMPTY
55898: LIST
55899: LIST
55900: PUSH
55901: LD_INT 0
55903: PUSH
55904: LD_INT 1
55906: PUSH
55907: EMPTY
55908: LIST
55909: LIST
55910: PUSH
55911: LD_INT 1
55913: NEG
55914: PUSH
55915: LD_INT 0
55917: PUSH
55918: EMPTY
55919: LIST
55920: LIST
55921: PUSH
55922: LD_INT 1
55924: NEG
55925: PUSH
55926: LD_INT 1
55928: NEG
55929: PUSH
55930: EMPTY
55931: LIST
55932: LIST
55933: PUSH
55934: LD_INT 2
55936: PUSH
55937: LD_INT 1
55939: PUSH
55940: EMPTY
55941: LIST
55942: LIST
55943: PUSH
55944: LD_INT 2
55946: PUSH
55947: LD_INT 2
55949: PUSH
55950: EMPTY
55951: LIST
55952: LIST
55953: PUSH
55954: LD_INT 1
55956: PUSH
55957: LD_INT 2
55959: PUSH
55960: EMPTY
55961: LIST
55962: LIST
55963: PUSH
55964: LD_INT 0
55966: PUSH
55967: LD_INT 2
55969: PUSH
55970: EMPTY
55971: LIST
55972: LIST
55973: PUSH
55974: LD_INT 1
55976: NEG
55977: PUSH
55978: LD_INT 1
55980: PUSH
55981: EMPTY
55982: LIST
55983: LIST
55984: PUSH
55985: EMPTY
55986: LIST
55987: LIST
55988: LIST
55989: LIST
55990: LIST
55991: LIST
55992: LIST
55993: LIST
55994: LIST
55995: LIST
55996: LIST
55997: LIST
55998: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
55999: LD_ADDR_VAR 0 51
56003: PUSH
56004: LD_INT 0
56006: PUSH
56007: LD_INT 0
56009: PUSH
56010: EMPTY
56011: LIST
56012: LIST
56013: PUSH
56014: LD_INT 0
56016: PUSH
56017: LD_INT 1
56019: NEG
56020: PUSH
56021: EMPTY
56022: LIST
56023: LIST
56024: PUSH
56025: LD_INT 1
56027: PUSH
56028: LD_INT 0
56030: PUSH
56031: EMPTY
56032: LIST
56033: LIST
56034: PUSH
56035: LD_INT 1
56037: PUSH
56038: LD_INT 1
56040: PUSH
56041: EMPTY
56042: LIST
56043: LIST
56044: PUSH
56045: LD_INT 0
56047: PUSH
56048: LD_INT 1
56050: PUSH
56051: EMPTY
56052: LIST
56053: LIST
56054: PUSH
56055: LD_INT 1
56057: NEG
56058: PUSH
56059: LD_INT 0
56061: PUSH
56062: EMPTY
56063: LIST
56064: LIST
56065: PUSH
56066: LD_INT 1
56068: NEG
56069: PUSH
56070: LD_INT 1
56072: NEG
56073: PUSH
56074: EMPTY
56075: LIST
56076: LIST
56077: PUSH
56078: LD_INT 1
56080: PUSH
56081: LD_INT 2
56083: PUSH
56084: EMPTY
56085: LIST
56086: LIST
56087: PUSH
56088: LD_INT 0
56090: PUSH
56091: LD_INT 2
56093: PUSH
56094: EMPTY
56095: LIST
56096: LIST
56097: PUSH
56098: LD_INT 1
56100: NEG
56101: PUSH
56102: LD_INT 1
56104: PUSH
56105: EMPTY
56106: LIST
56107: LIST
56108: PUSH
56109: LD_INT 2
56111: NEG
56112: PUSH
56113: LD_INT 0
56115: PUSH
56116: EMPTY
56117: LIST
56118: LIST
56119: PUSH
56120: LD_INT 2
56122: NEG
56123: PUSH
56124: LD_INT 1
56126: NEG
56127: PUSH
56128: EMPTY
56129: LIST
56130: LIST
56131: PUSH
56132: EMPTY
56133: LIST
56134: LIST
56135: LIST
56136: LIST
56137: LIST
56138: LIST
56139: LIST
56140: LIST
56141: LIST
56142: LIST
56143: LIST
56144: LIST
56145: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56146: LD_ADDR_VAR 0 52
56150: PUSH
56151: LD_INT 0
56153: PUSH
56154: LD_INT 0
56156: PUSH
56157: EMPTY
56158: LIST
56159: LIST
56160: PUSH
56161: LD_INT 0
56163: PUSH
56164: LD_INT 1
56166: NEG
56167: PUSH
56168: EMPTY
56169: LIST
56170: LIST
56171: PUSH
56172: LD_INT 1
56174: PUSH
56175: LD_INT 0
56177: PUSH
56178: EMPTY
56179: LIST
56180: LIST
56181: PUSH
56182: LD_INT 1
56184: PUSH
56185: LD_INT 1
56187: PUSH
56188: EMPTY
56189: LIST
56190: LIST
56191: PUSH
56192: LD_INT 0
56194: PUSH
56195: LD_INT 1
56197: PUSH
56198: EMPTY
56199: LIST
56200: LIST
56201: PUSH
56202: LD_INT 1
56204: NEG
56205: PUSH
56206: LD_INT 0
56208: PUSH
56209: EMPTY
56210: LIST
56211: LIST
56212: PUSH
56213: LD_INT 1
56215: NEG
56216: PUSH
56217: LD_INT 1
56219: NEG
56220: PUSH
56221: EMPTY
56222: LIST
56223: LIST
56224: PUSH
56225: LD_INT 1
56227: NEG
56228: PUSH
56229: LD_INT 2
56231: NEG
56232: PUSH
56233: EMPTY
56234: LIST
56235: LIST
56236: PUSH
56237: LD_INT 1
56239: NEG
56240: PUSH
56241: LD_INT 1
56243: PUSH
56244: EMPTY
56245: LIST
56246: LIST
56247: PUSH
56248: LD_INT 2
56250: NEG
56251: PUSH
56252: LD_INT 0
56254: PUSH
56255: EMPTY
56256: LIST
56257: LIST
56258: PUSH
56259: LD_INT 2
56261: NEG
56262: PUSH
56263: LD_INT 1
56265: NEG
56266: PUSH
56267: EMPTY
56268: LIST
56269: LIST
56270: PUSH
56271: LD_INT 2
56273: NEG
56274: PUSH
56275: LD_INT 2
56277: NEG
56278: PUSH
56279: EMPTY
56280: LIST
56281: LIST
56282: PUSH
56283: EMPTY
56284: LIST
56285: LIST
56286: LIST
56287: LIST
56288: LIST
56289: LIST
56290: LIST
56291: LIST
56292: LIST
56293: LIST
56294: LIST
56295: LIST
56296: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56297: LD_ADDR_VAR 0 53
56301: PUSH
56302: LD_INT 0
56304: PUSH
56305: LD_INT 0
56307: PUSH
56308: EMPTY
56309: LIST
56310: LIST
56311: PUSH
56312: LD_INT 0
56314: PUSH
56315: LD_INT 1
56317: NEG
56318: PUSH
56319: EMPTY
56320: LIST
56321: LIST
56322: PUSH
56323: LD_INT 1
56325: PUSH
56326: LD_INT 0
56328: PUSH
56329: EMPTY
56330: LIST
56331: LIST
56332: PUSH
56333: LD_INT 1
56335: PUSH
56336: LD_INT 1
56338: PUSH
56339: EMPTY
56340: LIST
56341: LIST
56342: PUSH
56343: LD_INT 0
56345: PUSH
56346: LD_INT 1
56348: PUSH
56349: EMPTY
56350: LIST
56351: LIST
56352: PUSH
56353: LD_INT 1
56355: NEG
56356: PUSH
56357: LD_INT 0
56359: PUSH
56360: EMPTY
56361: LIST
56362: LIST
56363: PUSH
56364: LD_INT 1
56366: NEG
56367: PUSH
56368: LD_INT 1
56370: NEG
56371: PUSH
56372: EMPTY
56373: LIST
56374: LIST
56375: PUSH
56376: LD_INT 1
56378: NEG
56379: PUSH
56380: LD_INT 2
56382: NEG
56383: PUSH
56384: EMPTY
56385: LIST
56386: LIST
56387: PUSH
56388: LD_INT 0
56390: PUSH
56391: LD_INT 2
56393: NEG
56394: PUSH
56395: EMPTY
56396: LIST
56397: LIST
56398: PUSH
56399: LD_INT 1
56401: PUSH
56402: LD_INT 1
56404: NEG
56405: PUSH
56406: EMPTY
56407: LIST
56408: LIST
56409: PUSH
56410: LD_INT 2
56412: PUSH
56413: LD_INT 0
56415: PUSH
56416: EMPTY
56417: LIST
56418: LIST
56419: PUSH
56420: LD_INT 2
56422: PUSH
56423: LD_INT 1
56425: PUSH
56426: EMPTY
56427: LIST
56428: LIST
56429: PUSH
56430: LD_INT 2
56432: PUSH
56433: LD_INT 2
56435: PUSH
56436: EMPTY
56437: LIST
56438: LIST
56439: PUSH
56440: LD_INT 1
56442: PUSH
56443: LD_INT 2
56445: PUSH
56446: EMPTY
56447: LIST
56448: LIST
56449: PUSH
56450: LD_INT 0
56452: PUSH
56453: LD_INT 2
56455: PUSH
56456: EMPTY
56457: LIST
56458: LIST
56459: PUSH
56460: LD_INT 1
56462: NEG
56463: PUSH
56464: LD_INT 1
56466: PUSH
56467: EMPTY
56468: LIST
56469: LIST
56470: PUSH
56471: LD_INT 2
56473: NEG
56474: PUSH
56475: LD_INT 0
56477: PUSH
56478: EMPTY
56479: LIST
56480: LIST
56481: PUSH
56482: LD_INT 2
56484: NEG
56485: PUSH
56486: LD_INT 1
56488: NEG
56489: PUSH
56490: EMPTY
56491: LIST
56492: LIST
56493: PUSH
56494: LD_INT 2
56496: NEG
56497: PUSH
56498: LD_INT 2
56500: NEG
56501: PUSH
56502: EMPTY
56503: LIST
56504: LIST
56505: PUSH
56506: EMPTY
56507: LIST
56508: LIST
56509: LIST
56510: LIST
56511: LIST
56512: LIST
56513: LIST
56514: LIST
56515: LIST
56516: LIST
56517: LIST
56518: LIST
56519: LIST
56520: LIST
56521: LIST
56522: LIST
56523: LIST
56524: LIST
56525: LIST
56526: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56527: LD_ADDR_VAR 0 54
56531: PUSH
56532: LD_INT 0
56534: PUSH
56535: LD_INT 0
56537: PUSH
56538: EMPTY
56539: LIST
56540: LIST
56541: PUSH
56542: LD_INT 0
56544: PUSH
56545: LD_INT 1
56547: NEG
56548: PUSH
56549: EMPTY
56550: LIST
56551: LIST
56552: PUSH
56553: LD_INT 1
56555: PUSH
56556: LD_INT 0
56558: PUSH
56559: EMPTY
56560: LIST
56561: LIST
56562: PUSH
56563: LD_INT 1
56565: PUSH
56566: LD_INT 1
56568: PUSH
56569: EMPTY
56570: LIST
56571: LIST
56572: PUSH
56573: LD_INT 0
56575: PUSH
56576: LD_INT 1
56578: PUSH
56579: EMPTY
56580: LIST
56581: LIST
56582: PUSH
56583: LD_INT 1
56585: NEG
56586: PUSH
56587: LD_INT 0
56589: PUSH
56590: EMPTY
56591: LIST
56592: LIST
56593: PUSH
56594: LD_INT 1
56596: NEG
56597: PUSH
56598: LD_INT 1
56600: NEG
56601: PUSH
56602: EMPTY
56603: LIST
56604: LIST
56605: PUSH
56606: LD_INT 1
56608: NEG
56609: PUSH
56610: LD_INT 2
56612: NEG
56613: PUSH
56614: EMPTY
56615: LIST
56616: LIST
56617: PUSH
56618: LD_INT 0
56620: PUSH
56621: LD_INT 2
56623: NEG
56624: PUSH
56625: EMPTY
56626: LIST
56627: LIST
56628: PUSH
56629: LD_INT 1
56631: PUSH
56632: LD_INT 1
56634: NEG
56635: PUSH
56636: EMPTY
56637: LIST
56638: LIST
56639: PUSH
56640: LD_INT 2
56642: PUSH
56643: LD_INT 0
56645: PUSH
56646: EMPTY
56647: LIST
56648: LIST
56649: PUSH
56650: LD_INT 2
56652: PUSH
56653: LD_INT 1
56655: PUSH
56656: EMPTY
56657: LIST
56658: LIST
56659: PUSH
56660: LD_INT 2
56662: PUSH
56663: LD_INT 2
56665: PUSH
56666: EMPTY
56667: LIST
56668: LIST
56669: PUSH
56670: LD_INT 1
56672: PUSH
56673: LD_INT 2
56675: PUSH
56676: EMPTY
56677: LIST
56678: LIST
56679: PUSH
56680: LD_INT 0
56682: PUSH
56683: LD_INT 2
56685: PUSH
56686: EMPTY
56687: LIST
56688: LIST
56689: PUSH
56690: LD_INT 1
56692: NEG
56693: PUSH
56694: LD_INT 1
56696: PUSH
56697: EMPTY
56698: LIST
56699: LIST
56700: PUSH
56701: LD_INT 2
56703: NEG
56704: PUSH
56705: LD_INT 0
56707: PUSH
56708: EMPTY
56709: LIST
56710: LIST
56711: PUSH
56712: LD_INT 2
56714: NEG
56715: PUSH
56716: LD_INT 1
56718: NEG
56719: PUSH
56720: EMPTY
56721: LIST
56722: LIST
56723: PUSH
56724: LD_INT 2
56726: NEG
56727: PUSH
56728: LD_INT 2
56730: NEG
56731: PUSH
56732: EMPTY
56733: LIST
56734: LIST
56735: PUSH
56736: EMPTY
56737: LIST
56738: LIST
56739: LIST
56740: LIST
56741: LIST
56742: LIST
56743: LIST
56744: LIST
56745: LIST
56746: LIST
56747: LIST
56748: LIST
56749: LIST
56750: LIST
56751: LIST
56752: LIST
56753: LIST
56754: LIST
56755: LIST
56756: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56757: LD_ADDR_VAR 0 55
56761: PUSH
56762: LD_INT 0
56764: PUSH
56765: LD_INT 0
56767: PUSH
56768: EMPTY
56769: LIST
56770: LIST
56771: PUSH
56772: LD_INT 0
56774: PUSH
56775: LD_INT 1
56777: NEG
56778: PUSH
56779: EMPTY
56780: LIST
56781: LIST
56782: PUSH
56783: LD_INT 1
56785: PUSH
56786: LD_INT 0
56788: PUSH
56789: EMPTY
56790: LIST
56791: LIST
56792: PUSH
56793: LD_INT 1
56795: PUSH
56796: LD_INT 1
56798: PUSH
56799: EMPTY
56800: LIST
56801: LIST
56802: PUSH
56803: LD_INT 0
56805: PUSH
56806: LD_INT 1
56808: PUSH
56809: EMPTY
56810: LIST
56811: LIST
56812: PUSH
56813: LD_INT 1
56815: NEG
56816: PUSH
56817: LD_INT 0
56819: PUSH
56820: EMPTY
56821: LIST
56822: LIST
56823: PUSH
56824: LD_INT 1
56826: NEG
56827: PUSH
56828: LD_INT 1
56830: NEG
56831: PUSH
56832: EMPTY
56833: LIST
56834: LIST
56835: PUSH
56836: LD_INT 1
56838: NEG
56839: PUSH
56840: LD_INT 2
56842: NEG
56843: PUSH
56844: EMPTY
56845: LIST
56846: LIST
56847: PUSH
56848: LD_INT 0
56850: PUSH
56851: LD_INT 2
56853: NEG
56854: PUSH
56855: EMPTY
56856: LIST
56857: LIST
56858: PUSH
56859: LD_INT 1
56861: PUSH
56862: LD_INT 1
56864: NEG
56865: PUSH
56866: EMPTY
56867: LIST
56868: LIST
56869: PUSH
56870: LD_INT 2
56872: PUSH
56873: LD_INT 0
56875: PUSH
56876: EMPTY
56877: LIST
56878: LIST
56879: PUSH
56880: LD_INT 2
56882: PUSH
56883: LD_INT 1
56885: PUSH
56886: EMPTY
56887: LIST
56888: LIST
56889: PUSH
56890: LD_INT 2
56892: PUSH
56893: LD_INT 2
56895: PUSH
56896: EMPTY
56897: LIST
56898: LIST
56899: PUSH
56900: LD_INT 1
56902: PUSH
56903: LD_INT 2
56905: PUSH
56906: EMPTY
56907: LIST
56908: LIST
56909: PUSH
56910: LD_INT 0
56912: PUSH
56913: LD_INT 2
56915: PUSH
56916: EMPTY
56917: LIST
56918: LIST
56919: PUSH
56920: LD_INT 1
56922: NEG
56923: PUSH
56924: LD_INT 1
56926: PUSH
56927: EMPTY
56928: LIST
56929: LIST
56930: PUSH
56931: LD_INT 2
56933: NEG
56934: PUSH
56935: LD_INT 0
56937: PUSH
56938: EMPTY
56939: LIST
56940: LIST
56941: PUSH
56942: LD_INT 2
56944: NEG
56945: PUSH
56946: LD_INT 1
56948: NEG
56949: PUSH
56950: EMPTY
56951: LIST
56952: LIST
56953: PUSH
56954: LD_INT 2
56956: NEG
56957: PUSH
56958: LD_INT 2
56960: NEG
56961: PUSH
56962: EMPTY
56963: LIST
56964: LIST
56965: PUSH
56966: EMPTY
56967: LIST
56968: LIST
56969: LIST
56970: LIST
56971: LIST
56972: LIST
56973: LIST
56974: LIST
56975: LIST
56976: LIST
56977: LIST
56978: LIST
56979: LIST
56980: LIST
56981: LIST
56982: LIST
56983: LIST
56984: LIST
56985: LIST
56986: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56987: LD_ADDR_VAR 0 56
56991: PUSH
56992: LD_INT 0
56994: PUSH
56995: LD_INT 0
56997: PUSH
56998: EMPTY
56999: LIST
57000: LIST
57001: PUSH
57002: LD_INT 0
57004: PUSH
57005: LD_INT 1
57007: NEG
57008: PUSH
57009: EMPTY
57010: LIST
57011: LIST
57012: PUSH
57013: LD_INT 1
57015: PUSH
57016: LD_INT 0
57018: PUSH
57019: EMPTY
57020: LIST
57021: LIST
57022: PUSH
57023: LD_INT 1
57025: PUSH
57026: LD_INT 1
57028: PUSH
57029: EMPTY
57030: LIST
57031: LIST
57032: PUSH
57033: LD_INT 0
57035: PUSH
57036: LD_INT 1
57038: PUSH
57039: EMPTY
57040: LIST
57041: LIST
57042: PUSH
57043: LD_INT 1
57045: NEG
57046: PUSH
57047: LD_INT 0
57049: PUSH
57050: EMPTY
57051: LIST
57052: LIST
57053: PUSH
57054: LD_INT 1
57056: NEG
57057: PUSH
57058: LD_INT 1
57060: NEG
57061: PUSH
57062: EMPTY
57063: LIST
57064: LIST
57065: PUSH
57066: LD_INT 1
57068: NEG
57069: PUSH
57070: LD_INT 2
57072: NEG
57073: PUSH
57074: EMPTY
57075: LIST
57076: LIST
57077: PUSH
57078: LD_INT 0
57080: PUSH
57081: LD_INT 2
57083: NEG
57084: PUSH
57085: EMPTY
57086: LIST
57087: LIST
57088: PUSH
57089: LD_INT 1
57091: PUSH
57092: LD_INT 1
57094: NEG
57095: PUSH
57096: EMPTY
57097: LIST
57098: LIST
57099: PUSH
57100: LD_INT 2
57102: PUSH
57103: LD_INT 0
57105: PUSH
57106: EMPTY
57107: LIST
57108: LIST
57109: PUSH
57110: LD_INT 2
57112: PUSH
57113: LD_INT 1
57115: PUSH
57116: EMPTY
57117: LIST
57118: LIST
57119: PUSH
57120: LD_INT 2
57122: PUSH
57123: LD_INT 2
57125: PUSH
57126: EMPTY
57127: LIST
57128: LIST
57129: PUSH
57130: LD_INT 1
57132: PUSH
57133: LD_INT 2
57135: PUSH
57136: EMPTY
57137: LIST
57138: LIST
57139: PUSH
57140: LD_INT 0
57142: PUSH
57143: LD_INT 2
57145: PUSH
57146: EMPTY
57147: LIST
57148: LIST
57149: PUSH
57150: LD_INT 1
57152: NEG
57153: PUSH
57154: LD_INT 1
57156: PUSH
57157: EMPTY
57158: LIST
57159: LIST
57160: PUSH
57161: LD_INT 2
57163: NEG
57164: PUSH
57165: LD_INT 0
57167: PUSH
57168: EMPTY
57169: LIST
57170: LIST
57171: PUSH
57172: LD_INT 2
57174: NEG
57175: PUSH
57176: LD_INT 1
57178: NEG
57179: PUSH
57180: EMPTY
57181: LIST
57182: LIST
57183: PUSH
57184: LD_INT 2
57186: NEG
57187: PUSH
57188: LD_INT 2
57190: NEG
57191: PUSH
57192: EMPTY
57193: LIST
57194: LIST
57195: PUSH
57196: EMPTY
57197: LIST
57198: LIST
57199: LIST
57200: LIST
57201: LIST
57202: LIST
57203: LIST
57204: LIST
57205: LIST
57206: LIST
57207: LIST
57208: LIST
57209: LIST
57210: LIST
57211: LIST
57212: LIST
57213: LIST
57214: LIST
57215: LIST
57216: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57217: LD_ADDR_VAR 0 57
57221: PUSH
57222: LD_INT 0
57224: PUSH
57225: LD_INT 0
57227: PUSH
57228: EMPTY
57229: LIST
57230: LIST
57231: PUSH
57232: LD_INT 0
57234: PUSH
57235: LD_INT 1
57237: NEG
57238: PUSH
57239: EMPTY
57240: LIST
57241: LIST
57242: PUSH
57243: LD_INT 1
57245: PUSH
57246: LD_INT 0
57248: PUSH
57249: EMPTY
57250: LIST
57251: LIST
57252: PUSH
57253: LD_INT 1
57255: PUSH
57256: LD_INT 1
57258: PUSH
57259: EMPTY
57260: LIST
57261: LIST
57262: PUSH
57263: LD_INT 0
57265: PUSH
57266: LD_INT 1
57268: PUSH
57269: EMPTY
57270: LIST
57271: LIST
57272: PUSH
57273: LD_INT 1
57275: NEG
57276: PUSH
57277: LD_INT 0
57279: PUSH
57280: EMPTY
57281: LIST
57282: LIST
57283: PUSH
57284: LD_INT 1
57286: NEG
57287: PUSH
57288: LD_INT 1
57290: NEG
57291: PUSH
57292: EMPTY
57293: LIST
57294: LIST
57295: PUSH
57296: LD_INT 1
57298: NEG
57299: PUSH
57300: LD_INT 2
57302: NEG
57303: PUSH
57304: EMPTY
57305: LIST
57306: LIST
57307: PUSH
57308: LD_INT 0
57310: PUSH
57311: LD_INT 2
57313: NEG
57314: PUSH
57315: EMPTY
57316: LIST
57317: LIST
57318: PUSH
57319: LD_INT 1
57321: PUSH
57322: LD_INT 1
57324: NEG
57325: PUSH
57326: EMPTY
57327: LIST
57328: LIST
57329: PUSH
57330: LD_INT 2
57332: PUSH
57333: LD_INT 0
57335: PUSH
57336: EMPTY
57337: LIST
57338: LIST
57339: PUSH
57340: LD_INT 2
57342: PUSH
57343: LD_INT 1
57345: PUSH
57346: EMPTY
57347: LIST
57348: LIST
57349: PUSH
57350: LD_INT 2
57352: PUSH
57353: LD_INT 2
57355: PUSH
57356: EMPTY
57357: LIST
57358: LIST
57359: PUSH
57360: LD_INT 1
57362: PUSH
57363: LD_INT 2
57365: PUSH
57366: EMPTY
57367: LIST
57368: LIST
57369: PUSH
57370: LD_INT 0
57372: PUSH
57373: LD_INT 2
57375: PUSH
57376: EMPTY
57377: LIST
57378: LIST
57379: PUSH
57380: LD_INT 1
57382: NEG
57383: PUSH
57384: LD_INT 1
57386: PUSH
57387: EMPTY
57388: LIST
57389: LIST
57390: PUSH
57391: LD_INT 2
57393: NEG
57394: PUSH
57395: LD_INT 0
57397: PUSH
57398: EMPTY
57399: LIST
57400: LIST
57401: PUSH
57402: LD_INT 2
57404: NEG
57405: PUSH
57406: LD_INT 1
57408: NEG
57409: PUSH
57410: EMPTY
57411: LIST
57412: LIST
57413: PUSH
57414: LD_INT 2
57416: NEG
57417: PUSH
57418: LD_INT 2
57420: NEG
57421: PUSH
57422: EMPTY
57423: LIST
57424: LIST
57425: PUSH
57426: EMPTY
57427: LIST
57428: LIST
57429: LIST
57430: LIST
57431: LIST
57432: LIST
57433: LIST
57434: LIST
57435: LIST
57436: LIST
57437: LIST
57438: LIST
57439: LIST
57440: LIST
57441: LIST
57442: LIST
57443: LIST
57444: LIST
57445: LIST
57446: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57447: LD_ADDR_VAR 0 58
57451: PUSH
57452: LD_INT 0
57454: PUSH
57455: LD_INT 0
57457: PUSH
57458: EMPTY
57459: LIST
57460: LIST
57461: PUSH
57462: LD_INT 0
57464: PUSH
57465: LD_INT 1
57467: NEG
57468: PUSH
57469: EMPTY
57470: LIST
57471: LIST
57472: PUSH
57473: LD_INT 1
57475: PUSH
57476: LD_INT 0
57478: PUSH
57479: EMPTY
57480: LIST
57481: LIST
57482: PUSH
57483: LD_INT 1
57485: PUSH
57486: LD_INT 1
57488: PUSH
57489: EMPTY
57490: LIST
57491: LIST
57492: PUSH
57493: LD_INT 0
57495: PUSH
57496: LD_INT 1
57498: PUSH
57499: EMPTY
57500: LIST
57501: LIST
57502: PUSH
57503: LD_INT 1
57505: NEG
57506: PUSH
57507: LD_INT 0
57509: PUSH
57510: EMPTY
57511: LIST
57512: LIST
57513: PUSH
57514: LD_INT 1
57516: NEG
57517: PUSH
57518: LD_INT 1
57520: NEG
57521: PUSH
57522: EMPTY
57523: LIST
57524: LIST
57525: PUSH
57526: LD_INT 1
57528: NEG
57529: PUSH
57530: LD_INT 2
57532: NEG
57533: PUSH
57534: EMPTY
57535: LIST
57536: LIST
57537: PUSH
57538: LD_INT 0
57540: PUSH
57541: LD_INT 2
57543: NEG
57544: PUSH
57545: EMPTY
57546: LIST
57547: LIST
57548: PUSH
57549: LD_INT 1
57551: PUSH
57552: LD_INT 1
57554: NEG
57555: PUSH
57556: EMPTY
57557: LIST
57558: LIST
57559: PUSH
57560: LD_INT 2
57562: PUSH
57563: LD_INT 0
57565: PUSH
57566: EMPTY
57567: LIST
57568: LIST
57569: PUSH
57570: LD_INT 2
57572: PUSH
57573: LD_INT 1
57575: PUSH
57576: EMPTY
57577: LIST
57578: LIST
57579: PUSH
57580: LD_INT 2
57582: PUSH
57583: LD_INT 2
57585: PUSH
57586: EMPTY
57587: LIST
57588: LIST
57589: PUSH
57590: LD_INT 1
57592: PUSH
57593: LD_INT 2
57595: PUSH
57596: EMPTY
57597: LIST
57598: LIST
57599: PUSH
57600: LD_INT 0
57602: PUSH
57603: LD_INT 2
57605: PUSH
57606: EMPTY
57607: LIST
57608: LIST
57609: PUSH
57610: LD_INT 1
57612: NEG
57613: PUSH
57614: LD_INT 1
57616: PUSH
57617: EMPTY
57618: LIST
57619: LIST
57620: PUSH
57621: LD_INT 2
57623: NEG
57624: PUSH
57625: LD_INT 0
57627: PUSH
57628: EMPTY
57629: LIST
57630: LIST
57631: PUSH
57632: LD_INT 2
57634: NEG
57635: PUSH
57636: LD_INT 1
57638: NEG
57639: PUSH
57640: EMPTY
57641: LIST
57642: LIST
57643: PUSH
57644: LD_INT 2
57646: NEG
57647: PUSH
57648: LD_INT 2
57650: NEG
57651: PUSH
57652: EMPTY
57653: LIST
57654: LIST
57655: PUSH
57656: EMPTY
57657: LIST
57658: LIST
57659: LIST
57660: LIST
57661: LIST
57662: LIST
57663: LIST
57664: LIST
57665: LIST
57666: LIST
57667: LIST
57668: LIST
57669: LIST
57670: LIST
57671: LIST
57672: LIST
57673: LIST
57674: LIST
57675: LIST
57676: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57677: LD_ADDR_VAR 0 59
57681: PUSH
57682: LD_INT 0
57684: PUSH
57685: LD_INT 0
57687: PUSH
57688: EMPTY
57689: LIST
57690: LIST
57691: PUSH
57692: LD_INT 0
57694: PUSH
57695: LD_INT 1
57697: NEG
57698: PUSH
57699: EMPTY
57700: LIST
57701: LIST
57702: PUSH
57703: LD_INT 1
57705: PUSH
57706: LD_INT 0
57708: PUSH
57709: EMPTY
57710: LIST
57711: LIST
57712: PUSH
57713: LD_INT 1
57715: PUSH
57716: LD_INT 1
57718: PUSH
57719: EMPTY
57720: LIST
57721: LIST
57722: PUSH
57723: LD_INT 0
57725: PUSH
57726: LD_INT 1
57728: PUSH
57729: EMPTY
57730: LIST
57731: LIST
57732: PUSH
57733: LD_INT 1
57735: NEG
57736: PUSH
57737: LD_INT 0
57739: PUSH
57740: EMPTY
57741: LIST
57742: LIST
57743: PUSH
57744: LD_INT 1
57746: NEG
57747: PUSH
57748: LD_INT 1
57750: NEG
57751: PUSH
57752: EMPTY
57753: LIST
57754: LIST
57755: PUSH
57756: EMPTY
57757: LIST
57758: LIST
57759: LIST
57760: LIST
57761: LIST
57762: LIST
57763: LIST
57764: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57765: LD_ADDR_VAR 0 60
57769: PUSH
57770: LD_INT 0
57772: PUSH
57773: LD_INT 0
57775: PUSH
57776: EMPTY
57777: LIST
57778: LIST
57779: PUSH
57780: LD_INT 0
57782: PUSH
57783: LD_INT 1
57785: NEG
57786: PUSH
57787: EMPTY
57788: LIST
57789: LIST
57790: PUSH
57791: LD_INT 1
57793: PUSH
57794: LD_INT 0
57796: PUSH
57797: EMPTY
57798: LIST
57799: LIST
57800: PUSH
57801: LD_INT 1
57803: PUSH
57804: LD_INT 1
57806: PUSH
57807: EMPTY
57808: LIST
57809: LIST
57810: PUSH
57811: LD_INT 0
57813: PUSH
57814: LD_INT 1
57816: PUSH
57817: EMPTY
57818: LIST
57819: LIST
57820: PUSH
57821: LD_INT 1
57823: NEG
57824: PUSH
57825: LD_INT 0
57827: PUSH
57828: EMPTY
57829: LIST
57830: LIST
57831: PUSH
57832: LD_INT 1
57834: NEG
57835: PUSH
57836: LD_INT 1
57838: NEG
57839: PUSH
57840: EMPTY
57841: LIST
57842: LIST
57843: PUSH
57844: EMPTY
57845: LIST
57846: LIST
57847: LIST
57848: LIST
57849: LIST
57850: LIST
57851: LIST
57852: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57853: LD_ADDR_VAR 0 61
57857: PUSH
57858: LD_INT 0
57860: PUSH
57861: LD_INT 0
57863: PUSH
57864: EMPTY
57865: LIST
57866: LIST
57867: PUSH
57868: LD_INT 0
57870: PUSH
57871: LD_INT 1
57873: NEG
57874: PUSH
57875: EMPTY
57876: LIST
57877: LIST
57878: PUSH
57879: LD_INT 1
57881: PUSH
57882: LD_INT 0
57884: PUSH
57885: EMPTY
57886: LIST
57887: LIST
57888: PUSH
57889: LD_INT 1
57891: PUSH
57892: LD_INT 1
57894: PUSH
57895: EMPTY
57896: LIST
57897: LIST
57898: PUSH
57899: LD_INT 0
57901: PUSH
57902: LD_INT 1
57904: PUSH
57905: EMPTY
57906: LIST
57907: LIST
57908: PUSH
57909: LD_INT 1
57911: NEG
57912: PUSH
57913: LD_INT 0
57915: PUSH
57916: EMPTY
57917: LIST
57918: LIST
57919: PUSH
57920: LD_INT 1
57922: NEG
57923: PUSH
57924: LD_INT 1
57926: NEG
57927: PUSH
57928: EMPTY
57929: LIST
57930: LIST
57931: PUSH
57932: EMPTY
57933: LIST
57934: LIST
57935: LIST
57936: LIST
57937: LIST
57938: LIST
57939: LIST
57940: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57941: LD_ADDR_VAR 0 62
57945: PUSH
57946: LD_INT 0
57948: PUSH
57949: LD_INT 0
57951: PUSH
57952: EMPTY
57953: LIST
57954: LIST
57955: PUSH
57956: LD_INT 0
57958: PUSH
57959: LD_INT 1
57961: NEG
57962: PUSH
57963: EMPTY
57964: LIST
57965: LIST
57966: PUSH
57967: LD_INT 1
57969: PUSH
57970: LD_INT 0
57972: PUSH
57973: EMPTY
57974: LIST
57975: LIST
57976: PUSH
57977: LD_INT 1
57979: PUSH
57980: LD_INT 1
57982: PUSH
57983: EMPTY
57984: LIST
57985: LIST
57986: PUSH
57987: LD_INT 0
57989: PUSH
57990: LD_INT 1
57992: PUSH
57993: EMPTY
57994: LIST
57995: LIST
57996: PUSH
57997: LD_INT 1
57999: NEG
58000: PUSH
58001: LD_INT 0
58003: PUSH
58004: EMPTY
58005: LIST
58006: LIST
58007: PUSH
58008: LD_INT 1
58010: NEG
58011: PUSH
58012: LD_INT 1
58014: NEG
58015: PUSH
58016: EMPTY
58017: LIST
58018: LIST
58019: PUSH
58020: EMPTY
58021: LIST
58022: LIST
58023: LIST
58024: LIST
58025: LIST
58026: LIST
58027: LIST
58028: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58029: LD_ADDR_VAR 0 63
58033: PUSH
58034: LD_INT 0
58036: PUSH
58037: LD_INT 0
58039: PUSH
58040: EMPTY
58041: LIST
58042: LIST
58043: PUSH
58044: LD_INT 0
58046: PUSH
58047: LD_INT 1
58049: NEG
58050: PUSH
58051: EMPTY
58052: LIST
58053: LIST
58054: PUSH
58055: LD_INT 1
58057: PUSH
58058: LD_INT 0
58060: PUSH
58061: EMPTY
58062: LIST
58063: LIST
58064: PUSH
58065: LD_INT 1
58067: PUSH
58068: LD_INT 1
58070: PUSH
58071: EMPTY
58072: LIST
58073: LIST
58074: PUSH
58075: LD_INT 0
58077: PUSH
58078: LD_INT 1
58080: PUSH
58081: EMPTY
58082: LIST
58083: LIST
58084: PUSH
58085: LD_INT 1
58087: NEG
58088: PUSH
58089: LD_INT 0
58091: PUSH
58092: EMPTY
58093: LIST
58094: LIST
58095: PUSH
58096: LD_INT 1
58098: NEG
58099: PUSH
58100: LD_INT 1
58102: NEG
58103: PUSH
58104: EMPTY
58105: LIST
58106: LIST
58107: PUSH
58108: EMPTY
58109: LIST
58110: LIST
58111: LIST
58112: LIST
58113: LIST
58114: LIST
58115: LIST
58116: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58117: LD_ADDR_VAR 0 64
58121: PUSH
58122: LD_INT 0
58124: PUSH
58125: LD_INT 0
58127: PUSH
58128: EMPTY
58129: LIST
58130: LIST
58131: PUSH
58132: LD_INT 0
58134: PUSH
58135: LD_INT 1
58137: NEG
58138: PUSH
58139: EMPTY
58140: LIST
58141: LIST
58142: PUSH
58143: LD_INT 1
58145: PUSH
58146: LD_INT 0
58148: PUSH
58149: EMPTY
58150: LIST
58151: LIST
58152: PUSH
58153: LD_INT 1
58155: PUSH
58156: LD_INT 1
58158: PUSH
58159: EMPTY
58160: LIST
58161: LIST
58162: PUSH
58163: LD_INT 0
58165: PUSH
58166: LD_INT 1
58168: PUSH
58169: EMPTY
58170: LIST
58171: LIST
58172: PUSH
58173: LD_INT 1
58175: NEG
58176: PUSH
58177: LD_INT 0
58179: PUSH
58180: EMPTY
58181: LIST
58182: LIST
58183: PUSH
58184: LD_INT 1
58186: NEG
58187: PUSH
58188: LD_INT 1
58190: NEG
58191: PUSH
58192: EMPTY
58193: LIST
58194: LIST
58195: PUSH
58196: EMPTY
58197: LIST
58198: LIST
58199: LIST
58200: LIST
58201: LIST
58202: LIST
58203: LIST
58204: ST_TO_ADDR
// end ; 1 :
58205: GO 64102
58207: LD_INT 1
58209: DOUBLE
58210: EQUAL
58211: IFTRUE 58215
58213: GO 60838
58215: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58216: LD_ADDR_VAR 0 11
58220: PUSH
58221: LD_INT 1
58223: NEG
58224: PUSH
58225: LD_INT 3
58227: NEG
58228: PUSH
58229: EMPTY
58230: LIST
58231: LIST
58232: PUSH
58233: LD_INT 0
58235: PUSH
58236: LD_INT 3
58238: NEG
58239: PUSH
58240: EMPTY
58241: LIST
58242: LIST
58243: PUSH
58244: LD_INT 1
58246: PUSH
58247: LD_INT 2
58249: NEG
58250: PUSH
58251: EMPTY
58252: LIST
58253: LIST
58254: PUSH
58255: EMPTY
58256: LIST
58257: LIST
58258: LIST
58259: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58260: LD_ADDR_VAR 0 12
58264: PUSH
58265: LD_INT 2
58267: PUSH
58268: LD_INT 1
58270: NEG
58271: PUSH
58272: EMPTY
58273: LIST
58274: LIST
58275: PUSH
58276: LD_INT 3
58278: PUSH
58279: LD_INT 0
58281: PUSH
58282: EMPTY
58283: LIST
58284: LIST
58285: PUSH
58286: LD_INT 3
58288: PUSH
58289: LD_INT 1
58291: PUSH
58292: EMPTY
58293: LIST
58294: LIST
58295: PUSH
58296: EMPTY
58297: LIST
58298: LIST
58299: LIST
58300: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58301: LD_ADDR_VAR 0 13
58305: PUSH
58306: LD_INT 3
58308: PUSH
58309: LD_INT 2
58311: PUSH
58312: EMPTY
58313: LIST
58314: LIST
58315: PUSH
58316: LD_INT 3
58318: PUSH
58319: LD_INT 3
58321: PUSH
58322: EMPTY
58323: LIST
58324: LIST
58325: PUSH
58326: LD_INT 2
58328: PUSH
58329: LD_INT 3
58331: PUSH
58332: EMPTY
58333: LIST
58334: LIST
58335: PUSH
58336: EMPTY
58337: LIST
58338: LIST
58339: LIST
58340: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58341: LD_ADDR_VAR 0 14
58345: PUSH
58346: LD_INT 1
58348: PUSH
58349: LD_INT 3
58351: PUSH
58352: EMPTY
58353: LIST
58354: LIST
58355: PUSH
58356: LD_INT 0
58358: PUSH
58359: LD_INT 3
58361: PUSH
58362: EMPTY
58363: LIST
58364: LIST
58365: PUSH
58366: LD_INT 1
58368: NEG
58369: PUSH
58370: LD_INT 2
58372: PUSH
58373: EMPTY
58374: LIST
58375: LIST
58376: PUSH
58377: EMPTY
58378: LIST
58379: LIST
58380: LIST
58381: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58382: LD_ADDR_VAR 0 15
58386: PUSH
58387: LD_INT 2
58389: NEG
58390: PUSH
58391: LD_INT 1
58393: PUSH
58394: EMPTY
58395: LIST
58396: LIST
58397: PUSH
58398: LD_INT 3
58400: NEG
58401: PUSH
58402: LD_INT 0
58404: PUSH
58405: EMPTY
58406: LIST
58407: LIST
58408: PUSH
58409: LD_INT 3
58411: NEG
58412: PUSH
58413: LD_INT 1
58415: NEG
58416: PUSH
58417: EMPTY
58418: LIST
58419: LIST
58420: PUSH
58421: EMPTY
58422: LIST
58423: LIST
58424: LIST
58425: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58426: LD_ADDR_VAR 0 16
58430: PUSH
58431: LD_INT 2
58433: NEG
58434: PUSH
58435: LD_INT 3
58437: NEG
58438: PUSH
58439: EMPTY
58440: LIST
58441: LIST
58442: PUSH
58443: LD_INT 3
58445: NEG
58446: PUSH
58447: LD_INT 2
58449: NEG
58450: PUSH
58451: EMPTY
58452: LIST
58453: LIST
58454: PUSH
58455: LD_INT 3
58457: NEG
58458: PUSH
58459: LD_INT 3
58461: NEG
58462: PUSH
58463: EMPTY
58464: LIST
58465: LIST
58466: PUSH
58467: EMPTY
58468: LIST
58469: LIST
58470: LIST
58471: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58472: LD_ADDR_VAR 0 17
58476: PUSH
58477: LD_INT 1
58479: NEG
58480: PUSH
58481: LD_INT 3
58483: NEG
58484: PUSH
58485: EMPTY
58486: LIST
58487: LIST
58488: PUSH
58489: LD_INT 0
58491: PUSH
58492: LD_INT 3
58494: NEG
58495: PUSH
58496: EMPTY
58497: LIST
58498: LIST
58499: PUSH
58500: LD_INT 1
58502: PUSH
58503: LD_INT 2
58505: NEG
58506: PUSH
58507: EMPTY
58508: LIST
58509: LIST
58510: PUSH
58511: EMPTY
58512: LIST
58513: LIST
58514: LIST
58515: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58516: LD_ADDR_VAR 0 18
58520: PUSH
58521: LD_INT 2
58523: PUSH
58524: LD_INT 1
58526: NEG
58527: PUSH
58528: EMPTY
58529: LIST
58530: LIST
58531: PUSH
58532: LD_INT 3
58534: PUSH
58535: LD_INT 0
58537: PUSH
58538: EMPTY
58539: LIST
58540: LIST
58541: PUSH
58542: LD_INT 3
58544: PUSH
58545: LD_INT 1
58547: PUSH
58548: EMPTY
58549: LIST
58550: LIST
58551: PUSH
58552: EMPTY
58553: LIST
58554: LIST
58555: LIST
58556: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58557: LD_ADDR_VAR 0 19
58561: PUSH
58562: LD_INT 3
58564: PUSH
58565: LD_INT 2
58567: PUSH
58568: EMPTY
58569: LIST
58570: LIST
58571: PUSH
58572: LD_INT 3
58574: PUSH
58575: LD_INT 3
58577: PUSH
58578: EMPTY
58579: LIST
58580: LIST
58581: PUSH
58582: LD_INT 2
58584: PUSH
58585: LD_INT 3
58587: PUSH
58588: EMPTY
58589: LIST
58590: LIST
58591: PUSH
58592: EMPTY
58593: LIST
58594: LIST
58595: LIST
58596: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58597: LD_ADDR_VAR 0 20
58601: PUSH
58602: LD_INT 1
58604: PUSH
58605: LD_INT 3
58607: PUSH
58608: EMPTY
58609: LIST
58610: LIST
58611: PUSH
58612: LD_INT 0
58614: PUSH
58615: LD_INT 3
58617: PUSH
58618: EMPTY
58619: LIST
58620: LIST
58621: PUSH
58622: LD_INT 1
58624: NEG
58625: PUSH
58626: LD_INT 2
58628: PUSH
58629: EMPTY
58630: LIST
58631: LIST
58632: PUSH
58633: EMPTY
58634: LIST
58635: LIST
58636: LIST
58637: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58638: LD_ADDR_VAR 0 21
58642: PUSH
58643: LD_INT 2
58645: NEG
58646: PUSH
58647: LD_INT 1
58649: PUSH
58650: EMPTY
58651: LIST
58652: LIST
58653: PUSH
58654: LD_INT 3
58656: NEG
58657: PUSH
58658: LD_INT 0
58660: PUSH
58661: EMPTY
58662: LIST
58663: LIST
58664: PUSH
58665: LD_INT 3
58667: NEG
58668: PUSH
58669: LD_INT 1
58671: NEG
58672: PUSH
58673: EMPTY
58674: LIST
58675: LIST
58676: PUSH
58677: EMPTY
58678: LIST
58679: LIST
58680: LIST
58681: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58682: LD_ADDR_VAR 0 22
58686: PUSH
58687: LD_INT 2
58689: NEG
58690: PUSH
58691: LD_INT 3
58693: NEG
58694: PUSH
58695: EMPTY
58696: LIST
58697: LIST
58698: PUSH
58699: LD_INT 3
58701: NEG
58702: PUSH
58703: LD_INT 2
58705: NEG
58706: PUSH
58707: EMPTY
58708: LIST
58709: LIST
58710: PUSH
58711: LD_INT 3
58713: NEG
58714: PUSH
58715: LD_INT 3
58717: NEG
58718: PUSH
58719: EMPTY
58720: LIST
58721: LIST
58722: PUSH
58723: EMPTY
58724: LIST
58725: LIST
58726: LIST
58727: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
58728: LD_ADDR_VAR 0 23
58732: PUSH
58733: LD_INT 0
58735: PUSH
58736: LD_INT 3
58738: NEG
58739: PUSH
58740: EMPTY
58741: LIST
58742: LIST
58743: PUSH
58744: LD_INT 1
58746: NEG
58747: PUSH
58748: LD_INT 4
58750: NEG
58751: PUSH
58752: EMPTY
58753: LIST
58754: LIST
58755: PUSH
58756: LD_INT 1
58758: PUSH
58759: LD_INT 3
58761: NEG
58762: PUSH
58763: EMPTY
58764: LIST
58765: LIST
58766: PUSH
58767: EMPTY
58768: LIST
58769: LIST
58770: LIST
58771: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
58772: LD_ADDR_VAR 0 24
58776: PUSH
58777: LD_INT 3
58779: PUSH
58780: LD_INT 0
58782: PUSH
58783: EMPTY
58784: LIST
58785: LIST
58786: PUSH
58787: LD_INT 3
58789: PUSH
58790: LD_INT 1
58792: NEG
58793: PUSH
58794: EMPTY
58795: LIST
58796: LIST
58797: PUSH
58798: LD_INT 4
58800: PUSH
58801: LD_INT 1
58803: PUSH
58804: EMPTY
58805: LIST
58806: LIST
58807: PUSH
58808: EMPTY
58809: LIST
58810: LIST
58811: LIST
58812: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
58813: LD_ADDR_VAR 0 25
58817: PUSH
58818: LD_INT 3
58820: PUSH
58821: LD_INT 3
58823: PUSH
58824: EMPTY
58825: LIST
58826: LIST
58827: PUSH
58828: LD_INT 4
58830: PUSH
58831: LD_INT 3
58833: PUSH
58834: EMPTY
58835: LIST
58836: LIST
58837: PUSH
58838: LD_INT 3
58840: PUSH
58841: LD_INT 4
58843: PUSH
58844: EMPTY
58845: LIST
58846: LIST
58847: PUSH
58848: EMPTY
58849: LIST
58850: LIST
58851: LIST
58852: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
58853: LD_ADDR_VAR 0 26
58857: PUSH
58858: LD_INT 0
58860: PUSH
58861: LD_INT 3
58863: PUSH
58864: EMPTY
58865: LIST
58866: LIST
58867: PUSH
58868: LD_INT 1
58870: PUSH
58871: LD_INT 4
58873: PUSH
58874: EMPTY
58875: LIST
58876: LIST
58877: PUSH
58878: LD_INT 1
58880: NEG
58881: PUSH
58882: LD_INT 3
58884: PUSH
58885: EMPTY
58886: LIST
58887: LIST
58888: PUSH
58889: EMPTY
58890: LIST
58891: LIST
58892: LIST
58893: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
58894: LD_ADDR_VAR 0 27
58898: PUSH
58899: LD_INT 3
58901: NEG
58902: PUSH
58903: LD_INT 0
58905: PUSH
58906: EMPTY
58907: LIST
58908: LIST
58909: PUSH
58910: LD_INT 3
58912: NEG
58913: PUSH
58914: LD_INT 1
58916: PUSH
58917: EMPTY
58918: LIST
58919: LIST
58920: PUSH
58921: LD_INT 4
58923: NEG
58924: PUSH
58925: LD_INT 1
58927: NEG
58928: PUSH
58929: EMPTY
58930: LIST
58931: LIST
58932: PUSH
58933: EMPTY
58934: LIST
58935: LIST
58936: LIST
58937: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
58938: LD_ADDR_VAR 0 28
58942: PUSH
58943: LD_INT 3
58945: NEG
58946: PUSH
58947: LD_INT 3
58949: NEG
58950: PUSH
58951: EMPTY
58952: LIST
58953: LIST
58954: PUSH
58955: LD_INT 3
58957: NEG
58958: PUSH
58959: LD_INT 4
58961: NEG
58962: PUSH
58963: EMPTY
58964: LIST
58965: LIST
58966: PUSH
58967: LD_INT 4
58969: NEG
58970: PUSH
58971: LD_INT 3
58973: NEG
58974: PUSH
58975: EMPTY
58976: LIST
58977: LIST
58978: PUSH
58979: EMPTY
58980: LIST
58981: LIST
58982: LIST
58983: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
58984: LD_ADDR_VAR 0 29
58988: PUSH
58989: LD_INT 1
58991: NEG
58992: PUSH
58993: LD_INT 3
58995: NEG
58996: PUSH
58997: EMPTY
58998: LIST
58999: LIST
59000: PUSH
59001: LD_INT 0
59003: PUSH
59004: LD_INT 3
59006: NEG
59007: PUSH
59008: EMPTY
59009: LIST
59010: LIST
59011: PUSH
59012: LD_INT 1
59014: PUSH
59015: LD_INT 2
59017: NEG
59018: PUSH
59019: EMPTY
59020: LIST
59021: LIST
59022: PUSH
59023: LD_INT 1
59025: NEG
59026: PUSH
59027: LD_INT 4
59029: NEG
59030: PUSH
59031: EMPTY
59032: LIST
59033: LIST
59034: PUSH
59035: LD_INT 0
59037: PUSH
59038: LD_INT 4
59040: NEG
59041: PUSH
59042: EMPTY
59043: LIST
59044: LIST
59045: PUSH
59046: LD_INT 1
59048: PUSH
59049: LD_INT 3
59051: NEG
59052: PUSH
59053: EMPTY
59054: LIST
59055: LIST
59056: PUSH
59057: LD_INT 1
59059: NEG
59060: PUSH
59061: LD_INT 5
59063: NEG
59064: PUSH
59065: EMPTY
59066: LIST
59067: LIST
59068: PUSH
59069: LD_INT 0
59071: PUSH
59072: LD_INT 5
59074: NEG
59075: PUSH
59076: EMPTY
59077: LIST
59078: LIST
59079: PUSH
59080: LD_INT 1
59082: PUSH
59083: LD_INT 4
59085: NEG
59086: PUSH
59087: EMPTY
59088: LIST
59089: LIST
59090: PUSH
59091: LD_INT 1
59093: NEG
59094: PUSH
59095: LD_INT 6
59097: NEG
59098: PUSH
59099: EMPTY
59100: LIST
59101: LIST
59102: PUSH
59103: LD_INT 0
59105: PUSH
59106: LD_INT 6
59108: NEG
59109: PUSH
59110: EMPTY
59111: LIST
59112: LIST
59113: PUSH
59114: LD_INT 1
59116: PUSH
59117: LD_INT 5
59119: NEG
59120: PUSH
59121: EMPTY
59122: LIST
59123: LIST
59124: PUSH
59125: EMPTY
59126: LIST
59127: LIST
59128: LIST
59129: LIST
59130: LIST
59131: LIST
59132: LIST
59133: LIST
59134: LIST
59135: LIST
59136: LIST
59137: LIST
59138: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
59139: LD_ADDR_VAR 0 30
59143: PUSH
59144: LD_INT 2
59146: PUSH
59147: LD_INT 1
59149: NEG
59150: PUSH
59151: EMPTY
59152: LIST
59153: LIST
59154: PUSH
59155: LD_INT 3
59157: PUSH
59158: LD_INT 0
59160: PUSH
59161: EMPTY
59162: LIST
59163: LIST
59164: PUSH
59165: LD_INT 3
59167: PUSH
59168: LD_INT 1
59170: PUSH
59171: EMPTY
59172: LIST
59173: LIST
59174: PUSH
59175: LD_INT 3
59177: PUSH
59178: LD_INT 1
59180: NEG
59181: PUSH
59182: EMPTY
59183: LIST
59184: LIST
59185: PUSH
59186: LD_INT 4
59188: PUSH
59189: LD_INT 0
59191: PUSH
59192: EMPTY
59193: LIST
59194: LIST
59195: PUSH
59196: LD_INT 4
59198: PUSH
59199: LD_INT 1
59201: PUSH
59202: EMPTY
59203: LIST
59204: LIST
59205: PUSH
59206: LD_INT 4
59208: PUSH
59209: LD_INT 1
59211: NEG
59212: PUSH
59213: EMPTY
59214: LIST
59215: LIST
59216: PUSH
59217: LD_INT 5
59219: PUSH
59220: LD_INT 0
59222: PUSH
59223: EMPTY
59224: LIST
59225: LIST
59226: PUSH
59227: LD_INT 5
59229: PUSH
59230: LD_INT 1
59232: PUSH
59233: EMPTY
59234: LIST
59235: LIST
59236: PUSH
59237: LD_INT 5
59239: PUSH
59240: LD_INT 1
59242: NEG
59243: PUSH
59244: EMPTY
59245: LIST
59246: LIST
59247: PUSH
59248: LD_INT 6
59250: PUSH
59251: LD_INT 0
59253: PUSH
59254: EMPTY
59255: LIST
59256: LIST
59257: PUSH
59258: LD_INT 6
59260: PUSH
59261: LD_INT 1
59263: PUSH
59264: EMPTY
59265: LIST
59266: LIST
59267: PUSH
59268: EMPTY
59269: LIST
59270: LIST
59271: LIST
59272: LIST
59273: LIST
59274: LIST
59275: LIST
59276: LIST
59277: LIST
59278: LIST
59279: LIST
59280: LIST
59281: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
59282: LD_ADDR_VAR 0 31
59286: PUSH
59287: LD_INT 3
59289: PUSH
59290: LD_INT 2
59292: PUSH
59293: EMPTY
59294: LIST
59295: LIST
59296: PUSH
59297: LD_INT 3
59299: PUSH
59300: LD_INT 3
59302: PUSH
59303: EMPTY
59304: LIST
59305: LIST
59306: PUSH
59307: LD_INT 2
59309: PUSH
59310: LD_INT 3
59312: PUSH
59313: EMPTY
59314: LIST
59315: LIST
59316: PUSH
59317: LD_INT 4
59319: PUSH
59320: LD_INT 3
59322: PUSH
59323: EMPTY
59324: LIST
59325: LIST
59326: PUSH
59327: LD_INT 4
59329: PUSH
59330: LD_INT 4
59332: PUSH
59333: EMPTY
59334: LIST
59335: LIST
59336: PUSH
59337: LD_INT 3
59339: PUSH
59340: LD_INT 4
59342: PUSH
59343: EMPTY
59344: LIST
59345: LIST
59346: PUSH
59347: LD_INT 5
59349: PUSH
59350: LD_INT 4
59352: PUSH
59353: EMPTY
59354: LIST
59355: LIST
59356: PUSH
59357: LD_INT 5
59359: PUSH
59360: LD_INT 5
59362: PUSH
59363: EMPTY
59364: LIST
59365: LIST
59366: PUSH
59367: LD_INT 4
59369: PUSH
59370: LD_INT 5
59372: PUSH
59373: EMPTY
59374: LIST
59375: LIST
59376: PUSH
59377: LD_INT 6
59379: PUSH
59380: LD_INT 5
59382: PUSH
59383: EMPTY
59384: LIST
59385: LIST
59386: PUSH
59387: LD_INT 6
59389: PUSH
59390: LD_INT 6
59392: PUSH
59393: EMPTY
59394: LIST
59395: LIST
59396: PUSH
59397: LD_INT 5
59399: PUSH
59400: LD_INT 6
59402: PUSH
59403: EMPTY
59404: LIST
59405: LIST
59406: PUSH
59407: EMPTY
59408: LIST
59409: LIST
59410: LIST
59411: LIST
59412: LIST
59413: LIST
59414: LIST
59415: LIST
59416: LIST
59417: LIST
59418: LIST
59419: LIST
59420: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
59421: LD_ADDR_VAR 0 32
59425: PUSH
59426: LD_INT 1
59428: PUSH
59429: LD_INT 3
59431: PUSH
59432: EMPTY
59433: LIST
59434: LIST
59435: PUSH
59436: LD_INT 0
59438: PUSH
59439: LD_INT 3
59441: PUSH
59442: EMPTY
59443: LIST
59444: LIST
59445: PUSH
59446: LD_INT 1
59448: NEG
59449: PUSH
59450: LD_INT 2
59452: PUSH
59453: EMPTY
59454: LIST
59455: LIST
59456: PUSH
59457: LD_INT 1
59459: PUSH
59460: LD_INT 4
59462: PUSH
59463: EMPTY
59464: LIST
59465: LIST
59466: PUSH
59467: LD_INT 0
59469: PUSH
59470: LD_INT 4
59472: PUSH
59473: EMPTY
59474: LIST
59475: LIST
59476: PUSH
59477: LD_INT 1
59479: NEG
59480: PUSH
59481: LD_INT 3
59483: PUSH
59484: EMPTY
59485: LIST
59486: LIST
59487: PUSH
59488: LD_INT 1
59490: PUSH
59491: LD_INT 5
59493: PUSH
59494: EMPTY
59495: LIST
59496: LIST
59497: PUSH
59498: LD_INT 0
59500: PUSH
59501: LD_INT 5
59503: PUSH
59504: EMPTY
59505: LIST
59506: LIST
59507: PUSH
59508: LD_INT 1
59510: NEG
59511: PUSH
59512: LD_INT 4
59514: PUSH
59515: EMPTY
59516: LIST
59517: LIST
59518: PUSH
59519: LD_INT 1
59521: PUSH
59522: LD_INT 6
59524: PUSH
59525: EMPTY
59526: LIST
59527: LIST
59528: PUSH
59529: LD_INT 0
59531: PUSH
59532: LD_INT 6
59534: PUSH
59535: EMPTY
59536: LIST
59537: LIST
59538: PUSH
59539: LD_INT 1
59541: NEG
59542: PUSH
59543: LD_INT 5
59545: PUSH
59546: EMPTY
59547: LIST
59548: LIST
59549: PUSH
59550: EMPTY
59551: LIST
59552: LIST
59553: LIST
59554: LIST
59555: LIST
59556: LIST
59557: LIST
59558: LIST
59559: LIST
59560: LIST
59561: LIST
59562: LIST
59563: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
59564: LD_ADDR_VAR 0 33
59568: PUSH
59569: LD_INT 2
59571: NEG
59572: PUSH
59573: LD_INT 1
59575: PUSH
59576: EMPTY
59577: LIST
59578: LIST
59579: PUSH
59580: LD_INT 3
59582: NEG
59583: PUSH
59584: LD_INT 0
59586: PUSH
59587: EMPTY
59588: LIST
59589: LIST
59590: PUSH
59591: LD_INT 3
59593: NEG
59594: PUSH
59595: LD_INT 1
59597: NEG
59598: PUSH
59599: EMPTY
59600: LIST
59601: LIST
59602: PUSH
59603: LD_INT 3
59605: NEG
59606: PUSH
59607: LD_INT 1
59609: PUSH
59610: EMPTY
59611: LIST
59612: LIST
59613: PUSH
59614: LD_INT 4
59616: NEG
59617: PUSH
59618: LD_INT 0
59620: PUSH
59621: EMPTY
59622: LIST
59623: LIST
59624: PUSH
59625: LD_INT 4
59627: NEG
59628: PUSH
59629: LD_INT 1
59631: NEG
59632: PUSH
59633: EMPTY
59634: LIST
59635: LIST
59636: PUSH
59637: LD_INT 4
59639: NEG
59640: PUSH
59641: LD_INT 1
59643: PUSH
59644: EMPTY
59645: LIST
59646: LIST
59647: PUSH
59648: LD_INT 5
59650: NEG
59651: PUSH
59652: LD_INT 0
59654: PUSH
59655: EMPTY
59656: LIST
59657: LIST
59658: PUSH
59659: LD_INT 5
59661: NEG
59662: PUSH
59663: LD_INT 1
59665: NEG
59666: PUSH
59667: EMPTY
59668: LIST
59669: LIST
59670: PUSH
59671: LD_INT 5
59673: NEG
59674: PUSH
59675: LD_INT 1
59677: PUSH
59678: EMPTY
59679: LIST
59680: LIST
59681: PUSH
59682: LD_INT 6
59684: NEG
59685: PUSH
59686: LD_INT 0
59688: PUSH
59689: EMPTY
59690: LIST
59691: LIST
59692: PUSH
59693: LD_INT 6
59695: NEG
59696: PUSH
59697: LD_INT 1
59699: NEG
59700: PUSH
59701: EMPTY
59702: LIST
59703: LIST
59704: PUSH
59705: EMPTY
59706: LIST
59707: LIST
59708: LIST
59709: LIST
59710: LIST
59711: LIST
59712: LIST
59713: LIST
59714: LIST
59715: LIST
59716: LIST
59717: LIST
59718: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
59719: LD_ADDR_VAR 0 34
59723: PUSH
59724: LD_INT 2
59726: NEG
59727: PUSH
59728: LD_INT 3
59730: NEG
59731: PUSH
59732: EMPTY
59733: LIST
59734: LIST
59735: PUSH
59736: LD_INT 3
59738: NEG
59739: PUSH
59740: LD_INT 2
59742: NEG
59743: PUSH
59744: EMPTY
59745: LIST
59746: LIST
59747: PUSH
59748: LD_INT 3
59750: NEG
59751: PUSH
59752: LD_INT 3
59754: NEG
59755: PUSH
59756: EMPTY
59757: LIST
59758: LIST
59759: PUSH
59760: LD_INT 3
59762: NEG
59763: PUSH
59764: LD_INT 4
59766: NEG
59767: PUSH
59768: EMPTY
59769: LIST
59770: LIST
59771: PUSH
59772: LD_INT 4
59774: NEG
59775: PUSH
59776: LD_INT 3
59778: NEG
59779: PUSH
59780: EMPTY
59781: LIST
59782: LIST
59783: PUSH
59784: LD_INT 4
59786: NEG
59787: PUSH
59788: LD_INT 4
59790: NEG
59791: PUSH
59792: EMPTY
59793: LIST
59794: LIST
59795: PUSH
59796: LD_INT 4
59798: NEG
59799: PUSH
59800: LD_INT 5
59802: NEG
59803: PUSH
59804: EMPTY
59805: LIST
59806: LIST
59807: PUSH
59808: LD_INT 5
59810: NEG
59811: PUSH
59812: LD_INT 4
59814: NEG
59815: PUSH
59816: EMPTY
59817: LIST
59818: LIST
59819: PUSH
59820: LD_INT 5
59822: NEG
59823: PUSH
59824: LD_INT 5
59826: NEG
59827: PUSH
59828: EMPTY
59829: LIST
59830: LIST
59831: PUSH
59832: LD_INT 5
59834: NEG
59835: PUSH
59836: LD_INT 6
59838: NEG
59839: PUSH
59840: EMPTY
59841: LIST
59842: LIST
59843: PUSH
59844: LD_INT 6
59846: NEG
59847: PUSH
59848: LD_INT 5
59850: NEG
59851: PUSH
59852: EMPTY
59853: LIST
59854: LIST
59855: PUSH
59856: LD_INT 6
59858: NEG
59859: PUSH
59860: LD_INT 6
59862: NEG
59863: PUSH
59864: EMPTY
59865: LIST
59866: LIST
59867: PUSH
59868: EMPTY
59869: LIST
59870: LIST
59871: LIST
59872: LIST
59873: LIST
59874: LIST
59875: LIST
59876: LIST
59877: LIST
59878: LIST
59879: LIST
59880: LIST
59881: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
59882: LD_ADDR_VAR 0 41
59886: PUSH
59887: LD_INT 0
59889: PUSH
59890: LD_INT 2
59892: NEG
59893: PUSH
59894: EMPTY
59895: LIST
59896: LIST
59897: PUSH
59898: LD_INT 1
59900: NEG
59901: PUSH
59902: LD_INT 3
59904: NEG
59905: PUSH
59906: EMPTY
59907: LIST
59908: LIST
59909: PUSH
59910: LD_INT 1
59912: PUSH
59913: LD_INT 2
59915: NEG
59916: PUSH
59917: EMPTY
59918: LIST
59919: LIST
59920: PUSH
59921: EMPTY
59922: LIST
59923: LIST
59924: LIST
59925: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
59926: LD_ADDR_VAR 0 42
59930: PUSH
59931: LD_INT 2
59933: PUSH
59934: LD_INT 0
59936: PUSH
59937: EMPTY
59938: LIST
59939: LIST
59940: PUSH
59941: LD_INT 2
59943: PUSH
59944: LD_INT 1
59946: NEG
59947: PUSH
59948: EMPTY
59949: LIST
59950: LIST
59951: PUSH
59952: LD_INT 3
59954: PUSH
59955: LD_INT 1
59957: PUSH
59958: EMPTY
59959: LIST
59960: LIST
59961: PUSH
59962: EMPTY
59963: LIST
59964: LIST
59965: LIST
59966: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
59967: LD_ADDR_VAR 0 43
59971: PUSH
59972: LD_INT 2
59974: PUSH
59975: LD_INT 2
59977: PUSH
59978: EMPTY
59979: LIST
59980: LIST
59981: PUSH
59982: LD_INT 3
59984: PUSH
59985: LD_INT 2
59987: PUSH
59988: EMPTY
59989: LIST
59990: LIST
59991: PUSH
59992: LD_INT 2
59994: PUSH
59995: LD_INT 3
59997: PUSH
59998: EMPTY
59999: LIST
60000: LIST
60001: PUSH
60002: EMPTY
60003: LIST
60004: LIST
60005: LIST
60006: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
60007: LD_ADDR_VAR 0 44
60011: PUSH
60012: LD_INT 0
60014: PUSH
60015: LD_INT 2
60017: PUSH
60018: EMPTY
60019: LIST
60020: LIST
60021: PUSH
60022: LD_INT 1
60024: PUSH
60025: LD_INT 3
60027: PUSH
60028: EMPTY
60029: LIST
60030: LIST
60031: PUSH
60032: LD_INT 1
60034: NEG
60035: PUSH
60036: LD_INT 2
60038: PUSH
60039: EMPTY
60040: LIST
60041: LIST
60042: PUSH
60043: EMPTY
60044: LIST
60045: LIST
60046: LIST
60047: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60048: LD_ADDR_VAR 0 45
60052: PUSH
60053: LD_INT 2
60055: NEG
60056: PUSH
60057: LD_INT 0
60059: PUSH
60060: EMPTY
60061: LIST
60062: LIST
60063: PUSH
60064: LD_INT 2
60066: NEG
60067: PUSH
60068: LD_INT 1
60070: PUSH
60071: EMPTY
60072: LIST
60073: LIST
60074: PUSH
60075: LD_INT 3
60077: NEG
60078: PUSH
60079: LD_INT 1
60081: NEG
60082: PUSH
60083: EMPTY
60084: LIST
60085: LIST
60086: PUSH
60087: EMPTY
60088: LIST
60089: LIST
60090: LIST
60091: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
60092: LD_ADDR_VAR 0 46
60096: PUSH
60097: LD_INT 2
60099: NEG
60100: PUSH
60101: LD_INT 2
60103: NEG
60104: PUSH
60105: EMPTY
60106: LIST
60107: LIST
60108: PUSH
60109: LD_INT 2
60111: NEG
60112: PUSH
60113: LD_INT 3
60115: NEG
60116: PUSH
60117: EMPTY
60118: LIST
60119: LIST
60120: PUSH
60121: LD_INT 3
60123: NEG
60124: PUSH
60125: LD_INT 2
60127: NEG
60128: PUSH
60129: EMPTY
60130: LIST
60131: LIST
60132: PUSH
60133: EMPTY
60134: LIST
60135: LIST
60136: LIST
60137: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
60138: LD_ADDR_VAR 0 47
60142: PUSH
60143: LD_INT 2
60145: NEG
60146: PUSH
60147: LD_INT 3
60149: NEG
60150: PUSH
60151: EMPTY
60152: LIST
60153: LIST
60154: PUSH
60155: LD_INT 1
60157: NEG
60158: PUSH
60159: LD_INT 3
60161: NEG
60162: PUSH
60163: EMPTY
60164: LIST
60165: LIST
60166: PUSH
60167: EMPTY
60168: LIST
60169: LIST
60170: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
60171: LD_ADDR_VAR 0 48
60175: PUSH
60176: LD_INT 1
60178: PUSH
60179: LD_INT 2
60181: NEG
60182: PUSH
60183: EMPTY
60184: LIST
60185: LIST
60186: PUSH
60187: LD_INT 2
60189: PUSH
60190: LD_INT 1
60192: NEG
60193: PUSH
60194: EMPTY
60195: LIST
60196: LIST
60197: PUSH
60198: EMPTY
60199: LIST
60200: LIST
60201: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
60202: LD_ADDR_VAR 0 49
60206: PUSH
60207: LD_INT 3
60209: PUSH
60210: LD_INT 1
60212: PUSH
60213: EMPTY
60214: LIST
60215: LIST
60216: PUSH
60217: LD_INT 3
60219: PUSH
60220: LD_INT 2
60222: PUSH
60223: EMPTY
60224: LIST
60225: LIST
60226: PUSH
60227: EMPTY
60228: LIST
60229: LIST
60230: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
60231: LD_ADDR_VAR 0 50
60235: PUSH
60236: LD_INT 2
60238: PUSH
60239: LD_INT 3
60241: PUSH
60242: EMPTY
60243: LIST
60244: LIST
60245: PUSH
60246: LD_INT 1
60248: PUSH
60249: LD_INT 3
60251: PUSH
60252: EMPTY
60253: LIST
60254: LIST
60255: PUSH
60256: EMPTY
60257: LIST
60258: LIST
60259: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
60260: LD_ADDR_VAR 0 51
60264: PUSH
60265: LD_INT 1
60267: NEG
60268: PUSH
60269: LD_INT 2
60271: PUSH
60272: EMPTY
60273: LIST
60274: LIST
60275: PUSH
60276: LD_INT 2
60278: NEG
60279: PUSH
60280: LD_INT 1
60282: PUSH
60283: EMPTY
60284: LIST
60285: LIST
60286: PUSH
60287: EMPTY
60288: LIST
60289: LIST
60290: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
60291: LD_ADDR_VAR 0 52
60295: PUSH
60296: LD_INT 3
60298: NEG
60299: PUSH
60300: LD_INT 1
60302: NEG
60303: PUSH
60304: EMPTY
60305: LIST
60306: LIST
60307: PUSH
60308: LD_INT 3
60310: NEG
60311: PUSH
60312: LD_INT 2
60314: NEG
60315: PUSH
60316: EMPTY
60317: LIST
60318: LIST
60319: PUSH
60320: EMPTY
60321: LIST
60322: LIST
60323: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
60324: LD_ADDR_VAR 0 53
60328: PUSH
60329: LD_INT 1
60331: NEG
60332: PUSH
60333: LD_INT 3
60335: NEG
60336: PUSH
60337: EMPTY
60338: LIST
60339: LIST
60340: PUSH
60341: LD_INT 0
60343: PUSH
60344: LD_INT 3
60346: NEG
60347: PUSH
60348: EMPTY
60349: LIST
60350: LIST
60351: PUSH
60352: LD_INT 1
60354: PUSH
60355: LD_INT 2
60357: NEG
60358: PUSH
60359: EMPTY
60360: LIST
60361: LIST
60362: PUSH
60363: EMPTY
60364: LIST
60365: LIST
60366: LIST
60367: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
60368: LD_ADDR_VAR 0 54
60372: PUSH
60373: LD_INT 2
60375: PUSH
60376: LD_INT 1
60378: NEG
60379: PUSH
60380: EMPTY
60381: LIST
60382: LIST
60383: PUSH
60384: LD_INT 3
60386: PUSH
60387: LD_INT 0
60389: PUSH
60390: EMPTY
60391: LIST
60392: LIST
60393: PUSH
60394: LD_INT 3
60396: PUSH
60397: LD_INT 1
60399: PUSH
60400: EMPTY
60401: LIST
60402: LIST
60403: PUSH
60404: EMPTY
60405: LIST
60406: LIST
60407: LIST
60408: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
60409: LD_ADDR_VAR 0 55
60413: PUSH
60414: LD_INT 3
60416: PUSH
60417: LD_INT 2
60419: PUSH
60420: EMPTY
60421: LIST
60422: LIST
60423: PUSH
60424: LD_INT 3
60426: PUSH
60427: LD_INT 3
60429: PUSH
60430: EMPTY
60431: LIST
60432: LIST
60433: PUSH
60434: LD_INT 2
60436: PUSH
60437: LD_INT 3
60439: PUSH
60440: EMPTY
60441: LIST
60442: LIST
60443: PUSH
60444: EMPTY
60445: LIST
60446: LIST
60447: LIST
60448: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
60449: LD_ADDR_VAR 0 56
60453: PUSH
60454: LD_INT 1
60456: PUSH
60457: LD_INT 3
60459: PUSH
60460: EMPTY
60461: LIST
60462: LIST
60463: PUSH
60464: LD_INT 0
60466: PUSH
60467: LD_INT 3
60469: PUSH
60470: EMPTY
60471: LIST
60472: LIST
60473: PUSH
60474: LD_INT 1
60476: NEG
60477: PUSH
60478: LD_INT 2
60480: PUSH
60481: EMPTY
60482: LIST
60483: LIST
60484: PUSH
60485: EMPTY
60486: LIST
60487: LIST
60488: LIST
60489: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60490: LD_ADDR_VAR 0 57
60494: PUSH
60495: LD_INT 2
60497: NEG
60498: PUSH
60499: LD_INT 1
60501: PUSH
60502: EMPTY
60503: LIST
60504: LIST
60505: PUSH
60506: LD_INT 3
60508: NEG
60509: PUSH
60510: LD_INT 0
60512: PUSH
60513: EMPTY
60514: LIST
60515: LIST
60516: PUSH
60517: LD_INT 3
60519: NEG
60520: PUSH
60521: LD_INT 1
60523: NEG
60524: PUSH
60525: EMPTY
60526: LIST
60527: LIST
60528: PUSH
60529: EMPTY
60530: LIST
60531: LIST
60532: LIST
60533: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60534: LD_ADDR_VAR 0 58
60538: PUSH
60539: LD_INT 2
60541: NEG
60542: PUSH
60543: LD_INT 3
60545: NEG
60546: PUSH
60547: EMPTY
60548: LIST
60549: LIST
60550: PUSH
60551: LD_INT 3
60553: NEG
60554: PUSH
60555: LD_INT 2
60557: NEG
60558: PUSH
60559: EMPTY
60560: LIST
60561: LIST
60562: PUSH
60563: LD_INT 3
60565: NEG
60566: PUSH
60567: LD_INT 3
60569: NEG
60570: PUSH
60571: EMPTY
60572: LIST
60573: LIST
60574: PUSH
60575: EMPTY
60576: LIST
60577: LIST
60578: LIST
60579: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
60580: LD_ADDR_VAR 0 59
60584: PUSH
60585: LD_INT 1
60587: NEG
60588: PUSH
60589: LD_INT 2
60591: NEG
60592: PUSH
60593: EMPTY
60594: LIST
60595: LIST
60596: PUSH
60597: LD_INT 0
60599: PUSH
60600: LD_INT 2
60602: NEG
60603: PUSH
60604: EMPTY
60605: LIST
60606: LIST
60607: PUSH
60608: LD_INT 1
60610: PUSH
60611: LD_INT 1
60613: NEG
60614: PUSH
60615: EMPTY
60616: LIST
60617: LIST
60618: PUSH
60619: EMPTY
60620: LIST
60621: LIST
60622: LIST
60623: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
60624: LD_ADDR_VAR 0 60
60628: PUSH
60629: LD_INT 1
60631: PUSH
60632: LD_INT 1
60634: NEG
60635: PUSH
60636: EMPTY
60637: LIST
60638: LIST
60639: PUSH
60640: LD_INT 2
60642: PUSH
60643: LD_INT 0
60645: PUSH
60646: EMPTY
60647: LIST
60648: LIST
60649: PUSH
60650: LD_INT 2
60652: PUSH
60653: LD_INT 1
60655: PUSH
60656: EMPTY
60657: LIST
60658: LIST
60659: PUSH
60660: EMPTY
60661: LIST
60662: LIST
60663: LIST
60664: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
60665: LD_ADDR_VAR 0 61
60669: PUSH
60670: LD_INT 2
60672: PUSH
60673: LD_INT 1
60675: PUSH
60676: EMPTY
60677: LIST
60678: LIST
60679: PUSH
60680: LD_INT 2
60682: PUSH
60683: LD_INT 2
60685: PUSH
60686: EMPTY
60687: LIST
60688: LIST
60689: PUSH
60690: LD_INT 1
60692: PUSH
60693: LD_INT 2
60695: PUSH
60696: EMPTY
60697: LIST
60698: LIST
60699: PUSH
60700: EMPTY
60701: LIST
60702: LIST
60703: LIST
60704: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
60705: LD_ADDR_VAR 0 62
60709: PUSH
60710: LD_INT 1
60712: PUSH
60713: LD_INT 2
60715: PUSH
60716: EMPTY
60717: LIST
60718: LIST
60719: PUSH
60720: LD_INT 0
60722: PUSH
60723: LD_INT 2
60725: PUSH
60726: EMPTY
60727: LIST
60728: LIST
60729: PUSH
60730: LD_INT 1
60732: NEG
60733: PUSH
60734: LD_INT 1
60736: PUSH
60737: EMPTY
60738: LIST
60739: LIST
60740: PUSH
60741: EMPTY
60742: LIST
60743: LIST
60744: LIST
60745: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
60746: LD_ADDR_VAR 0 63
60750: PUSH
60751: LD_INT 1
60753: NEG
60754: PUSH
60755: LD_INT 1
60757: PUSH
60758: EMPTY
60759: LIST
60760: LIST
60761: PUSH
60762: LD_INT 2
60764: NEG
60765: PUSH
60766: LD_INT 0
60768: PUSH
60769: EMPTY
60770: LIST
60771: LIST
60772: PUSH
60773: LD_INT 2
60775: NEG
60776: PUSH
60777: LD_INT 1
60779: NEG
60780: PUSH
60781: EMPTY
60782: LIST
60783: LIST
60784: PUSH
60785: EMPTY
60786: LIST
60787: LIST
60788: LIST
60789: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60790: LD_ADDR_VAR 0 64
60794: PUSH
60795: LD_INT 1
60797: NEG
60798: PUSH
60799: LD_INT 2
60801: NEG
60802: PUSH
60803: EMPTY
60804: LIST
60805: LIST
60806: PUSH
60807: LD_INT 2
60809: NEG
60810: PUSH
60811: LD_INT 1
60813: NEG
60814: PUSH
60815: EMPTY
60816: LIST
60817: LIST
60818: PUSH
60819: LD_INT 2
60821: NEG
60822: PUSH
60823: LD_INT 2
60825: NEG
60826: PUSH
60827: EMPTY
60828: LIST
60829: LIST
60830: PUSH
60831: EMPTY
60832: LIST
60833: LIST
60834: LIST
60835: ST_TO_ADDR
// end ; 2 :
60836: GO 64102
60838: LD_INT 2
60840: DOUBLE
60841: EQUAL
60842: IFTRUE 60846
60844: GO 64101
60846: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
60847: LD_ADDR_VAR 0 29
60851: PUSH
60852: LD_INT 4
60854: PUSH
60855: LD_INT 0
60857: PUSH
60858: EMPTY
60859: LIST
60860: LIST
60861: PUSH
60862: LD_INT 4
60864: PUSH
60865: LD_INT 1
60867: NEG
60868: PUSH
60869: EMPTY
60870: LIST
60871: LIST
60872: PUSH
60873: LD_INT 5
60875: PUSH
60876: LD_INT 0
60878: PUSH
60879: EMPTY
60880: LIST
60881: LIST
60882: PUSH
60883: LD_INT 5
60885: PUSH
60886: LD_INT 1
60888: PUSH
60889: EMPTY
60890: LIST
60891: LIST
60892: PUSH
60893: LD_INT 4
60895: PUSH
60896: LD_INT 1
60898: PUSH
60899: EMPTY
60900: LIST
60901: LIST
60902: PUSH
60903: LD_INT 3
60905: PUSH
60906: LD_INT 0
60908: PUSH
60909: EMPTY
60910: LIST
60911: LIST
60912: PUSH
60913: LD_INT 3
60915: PUSH
60916: LD_INT 1
60918: NEG
60919: PUSH
60920: EMPTY
60921: LIST
60922: LIST
60923: PUSH
60924: LD_INT 3
60926: PUSH
60927: LD_INT 2
60929: NEG
60930: PUSH
60931: EMPTY
60932: LIST
60933: LIST
60934: PUSH
60935: LD_INT 5
60937: PUSH
60938: LD_INT 2
60940: PUSH
60941: EMPTY
60942: LIST
60943: LIST
60944: PUSH
60945: LD_INT 3
60947: PUSH
60948: LD_INT 3
60950: PUSH
60951: EMPTY
60952: LIST
60953: LIST
60954: PUSH
60955: LD_INT 3
60957: PUSH
60958: LD_INT 2
60960: PUSH
60961: EMPTY
60962: LIST
60963: LIST
60964: PUSH
60965: LD_INT 4
60967: PUSH
60968: LD_INT 3
60970: PUSH
60971: EMPTY
60972: LIST
60973: LIST
60974: PUSH
60975: LD_INT 4
60977: PUSH
60978: LD_INT 4
60980: PUSH
60981: EMPTY
60982: LIST
60983: LIST
60984: PUSH
60985: LD_INT 3
60987: PUSH
60988: LD_INT 4
60990: PUSH
60991: EMPTY
60992: LIST
60993: LIST
60994: PUSH
60995: LD_INT 2
60997: PUSH
60998: LD_INT 3
61000: PUSH
61001: EMPTY
61002: LIST
61003: LIST
61004: PUSH
61005: LD_INT 2
61007: PUSH
61008: LD_INT 2
61010: PUSH
61011: EMPTY
61012: LIST
61013: LIST
61014: PUSH
61015: LD_INT 4
61017: PUSH
61018: LD_INT 2
61020: PUSH
61021: EMPTY
61022: LIST
61023: LIST
61024: PUSH
61025: LD_INT 2
61027: PUSH
61028: LD_INT 4
61030: PUSH
61031: EMPTY
61032: LIST
61033: LIST
61034: PUSH
61035: LD_INT 0
61037: PUSH
61038: LD_INT 4
61040: PUSH
61041: EMPTY
61042: LIST
61043: LIST
61044: PUSH
61045: LD_INT 0
61047: PUSH
61048: LD_INT 3
61050: PUSH
61051: EMPTY
61052: LIST
61053: LIST
61054: PUSH
61055: LD_INT 1
61057: PUSH
61058: LD_INT 4
61060: PUSH
61061: EMPTY
61062: LIST
61063: LIST
61064: PUSH
61065: LD_INT 1
61067: PUSH
61068: LD_INT 5
61070: PUSH
61071: EMPTY
61072: LIST
61073: LIST
61074: PUSH
61075: LD_INT 0
61077: PUSH
61078: LD_INT 5
61080: PUSH
61081: EMPTY
61082: LIST
61083: LIST
61084: PUSH
61085: LD_INT 1
61087: NEG
61088: PUSH
61089: LD_INT 4
61091: PUSH
61092: EMPTY
61093: LIST
61094: LIST
61095: PUSH
61096: LD_INT 1
61098: NEG
61099: PUSH
61100: LD_INT 3
61102: PUSH
61103: EMPTY
61104: LIST
61105: LIST
61106: PUSH
61107: LD_INT 2
61109: PUSH
61110: LD_INT 5
61112: PUSH
61113: EMPTY
61114: LIST
61115: LIST
61116: PUSH
61117: LD_INT 2
61119: NEG
61120: PUSH
61121: LD_INT 3
61123: PUSH
61124: EMPTY
61125: LIST
61126: LIST
61127: PUSH
61128: LD_INT 3
61130: NEG
61131: PUSH
61132: LD_INT 0
61134: PUSH
61135: EMPTY
61136: LIST
61137: LIST
61138: PUSH
61139: LD_INT 3
61141: NEG
61142: PUSH
61143: LD_INT 1
61145: NEG
61146: PUSH
61147: EMPTY
61148: LIST
61149: LIST
61150: PUSH
61151: LD_INT 2
61153: NEG
61154: PUSH
61155: LD_INT 0
61157: PUSH
61158: EMPTY
61159: LIST
61160: LIST
61161: PUSH
61162: LD_INT 2
61164: NEG
61165: PUSH
61166: LD_INT 1
61168: PUSH
61169: EMPTY
61170: LIST
61171: LIST
61172: PUSH
61173: LD_INT 3
61175: NEG
61176: PUSH
61177: LD_INT 1
61179: PUSH
61180: EMPTY
61181: LIST
61182: LIST
61183: PUSH
61184: LD_INT 4
61186: NEG
61187: PUSH
61188: LD_INT 0
61190: PUSH
61191: EMPTY
61192: LIST
61193: LIST
61194: PUSH
61195: LD_INT 4
61197: NEG
61198: PUSH
61199: LD_INT 1
61201: NEG
61202: PUSH
61203: EMPTY
61204: LIST
61205: LIST
61206: PUSH
61207: LD_INT 4
61209: NEG
61210: PUSH
61211: LD_INT 2
61213: NEG
61214: PUSH
61215: EMPTY
61216: LIST
61217: LIST
61218: PUSH
61219: LD_INT 2
61221: NEG
61222: PUSH
61223: LD_INT 2
61225: PUSH
61226: EMPTY
61227: LIST
61228: LIST
61229: PUSH
61230: LD_INT 4
61232: NEG
61233: PUSH
61234: LD_INT 4
61236: NEG
61237: PUSH
61238: EMPTY
61239: LIST
61240: LIST
61241: PUSH
61242: LD_INT 4
61244: NEG
61245: PUSH
61246: LD_INT 5
61248: NEG
61249: PUSH
61250: EMPTY
61251: LIST
61252: LIST
61253: PUSH
61254: LD_INT 3
61256: NEG
61257: PUSH
61258: LD_INT 4
61260: NEG
61261: PUSH
61262: EMPTY
61263: LIST
61264: LIST
61265: PUSH
61266: LD_INT 3
61268: NEG
61269: PUSH
61270: LD_INT 3
61272: NEG
61273: PUSH
61274: EMPTY
61275: LIST
61276: LIST
61277: PUSH
61278: LD_INT 4
61280: NEG
61281: PUSH
61282: LD_INT 3
61284: NEG
61285: PUSH
61286: EMPTY
61287: LIST
61288: LIST
61289: PUSH
61290: LD_INT 5
61292: NEG
61293: PUSH
61294: LD_INT 4
61296: NEG
61297: PUSH
61298: EMPTY
61299: LIST
61300: LIST
61301: PUSH
61302: LD_INT 5
61304: NEG
61305: PUSH
61306: LD_INT 5
61308: NEG
61309: PUSH
61310: EMPTY
61311: LIST
61312: LIST
61313: PUSH
61314: LD_INT 3
61316: NEG
61317: PUSH
61318: LD_INT 5
61320: NEG
61321: PUSH
61322: EMPTY
61323: LIST
61324: LIST
61325: PUSH
61326: LD_INT 5
61328: NEG
61329: PUSH
61330: LD_INT 3
61332: NEG
61333: PUSH
61334: EMPTY
61335: LIST
61336: LIST
61337: PUSH
61338: EMPTY
61339: LIST
61340: LIST
61341: LIST
61342: LIST
61343: LIST
61344: LIST
61345: LIST
61346: LIST
61347: LIST
61348: LIST
61349: LIST
61350: LIST
61351: LIST
61352: LIST
61353: LIST
61354: LIST
61355: LIST
61356: LIST
61357: LIST
61358: LIST
61359: LIST
61360: LIST
61361: LIST
61362: LIST
61363: LIST
61364: LIST
61365: LIST
61366: LIST
61367: LIST
61368: LIST
61369: LIST
61370: LIST
61371: LIST
61372: LIST
61373: LIST
61374: LIST
61375: LIST
61376: LIST
61377: LIST
61378: LIST
61379: LIST
61380: LIST
61381: LIST
61382: LIST
61383: LIST
61384: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
61385: LD_ADDR_VAR 0 30
61389: PUSH
61390: LD_INT 4
61392: PUSH
61393: LD_INT 4
61395: PUSH
61396: EMPTY
61397: LIST
61398: LIST
61399: PUSH
61400: LD_INT 4
61402: PUSH
61403: LD_INT 3
61405: PUSH
61406: EMPTY
61407: LIST
61408: LIST
61409: PUSH
61410: LD_INT 5
61412: PUSH
61413: LD_INT 4
61415: PUSH
61416: EMPTY
61417: LIST
61418: LIST
61419: PUSH
61420: LD_INT 5
61422: PUSH
61423: LD_INT 5
61425: PUSH
61426: EMPTY
61427: LIST
61428: LIST
61429: PUSH
61430: LD_INT 4
61432: PUSH
61433: LD_INT 5
61435: PUSH
61436: EMPTY
61437: LIST
61438: LIST
61439: PUSH
61440: LD_INT 3
61442: PUSH
61443: LD_INT 4
61445: PUSH
61446: EMPTY
61447: LIST
61448: LIST
61449: PUSH
61450: LD_INT 3
61452: PUSH
61453: LD_INT 3
61455: PUSH
61456: EMPTY
61457: LIST
61458: LIST
61459: PUSH
61460: LD_INT 5
61462: PUSH
61463: LD_INT 3
61465: PUSH
61466: EMPTY
61467: LIST
61468: LIST
61469: PUSH
61470: LD_INT 3
61472: PUSH
61473: LD_INT 5
61475: PUSH
61476: EMPTY
61477: LIST
61478: LIST
61479: PUSH
61480: LD_INT 0
61482: PUSH
61483: LD_INT 3
61485: PUSH
61486: EMPTY
61487: LIST
61488: LIST
61489: PUSH
61490: LD_INT 0
61492: PUSH
61493: LD_INT 2
61495: PUSH
61496: EMPTY
61497: LIST
61498: LIST
61499: PUSH
61500: LD_INT 1
61502: PUSH
61503: LD_INT 3
61505: PUSH
61506: EMPTY
61507: LIST
61508: LIST
61509: PUSH
61510: LD_INT 1
61512: PUSH
61513: LD_INT 4
61515: PUSH
61516: EMPTY
61517: LIST
61518: LIST
61519: PUSH
61520: LD_INT 0
61522: PUSH
61523: LD_INT 4
61525: PUSH
61526: EMPTY
61527: LIST
61528: LIST
61529: PUSH
61530: LD_INT 1
61532: NEG
61533: PUSH
61534: LD_INT 3
61536: PUSH
61537: EMPTY
61538: LIST
61539: LIST
61540: PUSH
61541: LD_INT 1
61543: NEG
61544: PUSH
61545: LD_INT 2
61547: PUSH
61548: EMPTY
61549: LIST
61550: LIST
61551: PUSH
61552: LD_INT 2
61554: PUSH
61555: LD_INT 4
61557: PUSH
61558: EMPTY
61559: LIST
61560: LIST
61561: PUSH
61562: LD_INT 2
61564: NEG
61565: PUSH
61566: LD_INT 2
61568: PUSH
61569: EMPTY
61570: LIST
61571: LIST
61572: PUSH
61573: LD_INT 4
61575: NEG
61576: PUSH
61577: LD_INT 0
61579: PUSH
61580: EMPTY
61581: LIST
61582: LIST
61583: PUSH
61584: LD_INT 4
61586: NEG
61587: PUSH
61588: LD_INT 1
61590: NEG
61591: PUSH
61592: EMPTY
61593: LIST
61594: LIST
61595: PUSH
61596: LD_INT 3
61598: NEG
61599: PUSH
61600: LD_INT 0
61602: PUSH
61603: EMPTY
61604: LIST
61605: LIST
61606: PUSH
61607: LD_INT 3
61609: NEG
61610: PUSH
61611: LD_INT 1
61613: PUSH
61614: EMPTY
61615: LIST
61616: LIST
61617: PUSH
61618: LD_INT 4
61620: NEG
61621: PUSH
61622: LD_INT 1
61624: PUSH
61625: EMPTY
61626: LIST
61627: LIST
61628: PUSH
61629: LD_INT 5
61631: NEG
61632: PUSH
61633: LD_INT 0
61635: PUSH
61636: EMPTY
61637: LIST
61638: LIST
61639: PUSH
61640: LD_INT 5
61642: NEG
61643: PUSH
61644: LD_INT 1
61646: NEG
61647: PUSH
61648: EMPTY
61649: LIST
61650: LIST
61651: PUSH
61652: LD_INT 5
61654: NEG
61655: PUSH
61656: LD_INT 2
61658: NEG
61659: PUSH
61660: EMPTY
61661: LIST
61662: LIST
61663: PUSH
61664: LD_INT 3
61666: NEG
61667: PUSH
61668: LD_INT 2
61670: PUSH
61671: EMPTY
61672: LIST
61673: LIST
61674: PUSH
61675: LD_INT 3
61677: NEG
61678: PUSH
61679: LD_INT 3
61681: NEG
61682: PUSH
61683: EMPTY
61684: LIST
61685: LIST
61686: PUSH
61687: LD_INT 3
61689: NEG
61690: PUSH
61691: LD_INT 4
61693: NEG
61694: PUSH
61695: EMPTY
61696: LIST
61697: LIST
61698: PUSH
61699: LD_INT 2
61701: NEG
61702: PUSH
61703: LD_INT 3
61705: NEG
61706: PUSH
61707: EMPTY
61708: LIST
61709: LIST
61710: PUSH
61711: LD_INT 2
61713: NEG
61714: PUSH
61715: LD_INT 2
61717: NEG
61718: PUSH
61719: EMPTY
61720: LIST
61721: LIST
61722: PUSH
61723: LD_INT 3
61725: NEG
61726: PUSH
61727: LD_INT 2
61729: NEG
61730: PUSH
61731: EMPTY
61732: LIST
61733: LIST
61734: PUSH
61735: LD_INT 4
61737: NEG
61738: PUSH
61739: LD_INT 3
61741: NEG
61742: PUSH
61743: EMPTY
61744: LIST
61745: LIST
61746: PUSH
61747: LD_INT 4
61749: NEG
61750: PUSH
61751: LD_INT 4
61753: NEG
61754: PUSH
61755: EMPTY
61756: LIST
61757: LIST
61758: PUSH
61759: LD_INT 2
61761: NEG
61762: PUSH
61763: LD_INT 4
61765: NEG
61766: PUSH
61767: EMPTY
61768: LIST
61769: LIST
61770: PUSH
61771: LD_INT 4
61773: NEG
61774: PUSH
61775: LD_INT 2
61777: NEG
61778: PUSH
61779: EMPTY
61780: LIST
61781: LIST
61782: PUSH
61783: LD_INT 0
61785: PUSH
61786: LD_INT 4
61788: NEG
61789: PUSH
61790: EMPTY
61791: LIST
61792: LIST
61793: PUSH
61794: LD_INT 0
61796: PUSH
61797: LD_INT 5
61799: NEG
61800: PUSH
61801: EMPTY
61802: LIST
61803: LIST
61804: PUSH
61805: LD_INT 1
61807: PUSH
61808: LD_INT 4
61810: NEG
61811: PUSH
61812: EMPTY
61813: LIST
61814: LIST
61815: PUSH
61816: LD_INT 1
61818: PUSH
61819: LD_INT 3
61821: NEG
61822: PUSH
61823: EMPTY
61824: LIST
61825: LIST
61826: PUSH
61827: LD_INT 0
61829: PUSH
61830: LD_INT 3
61832: NEG
61833: PUSH
61834: EMPTY
61835: LIST
61836: LIST
61837: PUSH
61838: LD_INT 1
61840: NEG
61841: PUSH
61842: LD_INT 4
61844: NEG
61845: PUSH
61846: EMPTY
61847: LIST
61848: LIST
61849: PUSH
61850: LD_INT 1
61852: NEG
61853: PUSH
61854: LD_INT 5
61856: NEG
61857: PUSH
61858: EMPTY
61859: LIST
61860: LIST
61861: PUSH
61862: LD_INT 2
61864: PUSH
61865: LD_INT 3
61867: NEG
61868: PUSH
61869: EMPTY
61870: LIST
61871: LIST
61872: PUSH
61873: LD_INT 2
61875: NEG
61876: PUSH
61877: LD_INT 5
61879: NEG
61880: PUSH
61881: EMPTY
61882: LIST
61883: LIST
61884: PUSH
61885: EMPTY
61886: LIST
61887: LIST
61888: LIST
61889: LIST
61890: LIST
61891: LIST
61892: LIST
61893: LIST
61894: LIST
61895: LIST
61896: LIST
61897: LIST
61898: LIST
61899: LIST
61900: LIST
61901: LIST
61902: LIST
61903: LIST
61904: LIST
61905: LIST
61906: LIST
61907: LIST
61908: LIST
61909: LIST
61910: LIST
61911: LIST
61912: LIST
61913: LIST
61914: LIST
61915: LIST
61916: LIST
61917: LIST
61918: LIST
61919: LIST
61920: LIST
61921: LIST
61922: LIST
61923: LIST
61924: LIST
61925: LIST
61926: LIST
61927: LIST
61928: LIST
61929: LIST
61930: LIST
61931: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
61932: LD_ADDR_VAR 0 31
61936: PUSH
61937: LD_INT 0
61939: PUSH
61940: LD_INT 4
61942: PUSH
61943: EMPTY
61944: LIST
61945: LIST
61946: PUSH
61947: LD_INT 0
61949: PUSH
61950: LD_INT 3
61952: PUSH
61953: EMPTY
61954: LIST
61955: LIST
61956: PUSH
61957: LD_INT 1
61959: PUSH
61960: LD_INT 4
61962: PUSH
61963: EMPTY
61964: LIST
61965: LIST
61966: PUSH
61967: LD_INT 1
61969: PUSH
61970: LD_INT 5
61972: PUSH
61973: EMPTY
61974: LIST
61975: LIST
61976: PUSH
61977: LD_INT 0
61979: PUSH
61980: LD_INT 5
61982: PUSH
61983: EMPTY
61984: LIST
61985: LIST
61986: PUSH
61987: LD_INT 1
61989: NEG
61990: PUSH
61991: LD_INT 4
61993: PUSH
61994: EMPTY
61995: LIST
61996: LIST
61997: PUSH
61998: LD_INT 1
62000: NEG
62001: PUSH
62002: LD_INT 3
62004: PUSH
62005: EMPTY
62006: LIST
62007: LIST
62008: PUSH
62009: LD_INT 2
62011: PUSH
62012: LD_INT 5
62014: PUSH
62015: EMPTY
62016: LIST
62017: LIST
62018: PUSH
62019: LD_INT 2
62021: NEG
62022: PUSH
62023: LD_INT 3
62025: PUSH
62026: EMPTY
62027: LIST
62028: LIST
62029: PUSH
62030: LD_INT 3
62032: NEG
62033: PUSH
62034: LD_INT 0
62036: PUSH
62037: EMPTY
62038: LIST
62039: LIST
62040: PUSH
62041: LD_INT 3
62043: NEG
62044: PUSH
62045: LD_INT 1
62047: NEG
62048: PUSH
62049: EMPTY
62050: LIST
62051: LIST
62052: PUSH
62053: LD_INT 2
62055: NEG
62056: PUSH
62057: LD_INT 0
62059: PUSH
62060: EMPTY
62061: LIST
62062: LIST
62063: PUSH
62064: LD_INT 2
62066: NEG
62067: PUSH
62068: LD_INT 1
62070: PUSH
62071: EMPTY
62072: LIST
62073: LIST
62074: PUSH
62075: LD_INT 3
62077: NEG
62078: PUSH
62079: LD_INT 1
62081: PUSH
62082: EMPTY
62083: LIST
62084: LIST
62085: PUSH
62086: LD_INT 4
62088: NEG
62089: PUSH
62090: LD_INT 0
62092: PUSH
62093: EMPTY
62094: LIST
62095: LIST
62096: PUSH
62097: LD_INT 4
62099: NEG
62100: PUSH
62101: LD_INT 1
62103: NEG
62104: PUSH
62105: EMPTY
62106: LIST
62107: LIST
62108: PUSH
62109: LD_INT 4
62111: NEG
62112: PUSH
62113: LD_INT 2
62115: NEG
62116: PUSH
62117: EMPTY
62118: LIST
62119: LIST
62120: PUSH
62121: LD_INT 2
62123: NEG
62124: PUSH
62125: LD_INT 2
62127: PUSH
62128: EMPTY
62129: LIST
62130: LIST
62131: PUSH
62132: LD_INT 4
62134: NEG
62135: PUSH
62136: LD_INT 4
62138: NEG
62139: PUSH
62140: EMPTY
62141: LIST
62142: LIST
62143: PUSH
62144: LD_INT 4
62146: NEG
62147: PUSH
62148: LD_INT 5
62150: NEG
62151: PUSH
62152: EMPTY
62153: LIST
62154: LIST
62155: PUSH
62156: LD_INT 3
62158: NEG
62159: PUSH
62160: LD_INT 4
62162: NEG
62163: PUSH
62164: EMPTY
62165: LIST
62166: LIST
62167: PUSH
62168: LD_INT 3
62170: NEG
62171: PUSH
62172: LD_INT 3
62174: NEG
62175: PUSH
62176: EMPTY
62177: LIST
62178: LIST
62179: PUSH
62180: LD_INT 4
62182: NEG
62183: PUSH
62184: LD_INT 3
62186: NEG
62187: PUSH
62188: EMPTY
62189: LIST
62190: LIST
62191: PUSH
62192: LD_INT 5
62194: NEG
62195: PUSH
62196: LD_INT 4
62198: NEG
62199: PUSH
62200: EMPTY
62201: LIST
62202: LIST
62203: PUSH
62204: LD_INT 5
62206: NEG
62207: PUSH
62208: LD_INT 5
62210: NEG
62211: PUSH
62212: EMPTY
62213: LIST
62214: LIST
62215: PUSH
62216: LD_INT 3
62218: NEG
62219: PUSH
62220: LD_INT 5
62222: NEG
62223: PUSH
62224: EMPTY
62225: LIST
62226: LIST
62227: PUSH
62228: LD_INT 5
62230: NEG
62231: PUSH
62232: LD_INT 3
62234: NEG
62235: PUSH
62236: EMPTY
62237: LIST
62238: LIST
62239: PUSH
62240: LD_INT 0
62242: PUSH
62243: LD_INT 3
62245: NEG
62246: PUSH
62247: EMPTY
62248: LIST
62249: LIST
62250: PUSH
62251: LD_INT 0
62253: PUSH
62254: LD_INT 4
62256: NEG
62257: PUSH
62258: EMPTY
62259: LIST
62260: LIST
62261: PUSH
62262: LD_INT 1
62264: PUSH
62265: LD_INT 3
62267: NEG
62268: PUSH
62269: EMPTY
62270: LIST
62271: LIST
62272: PUSH
62273: LD_INT 1
62275: PUSH
62276: LD_INT 2
62278: NEG
62279: PUSH
62280: EMPTY
62281: LIST
62282: LIST
62283: PUSH
62284: LD_INT 0
62286: PUSH
62287: LD_INT 2
62289: NEG
62290: PUSH
62291: EMPTY
62292: LIST
62293: LIST
62294: PUSH
62295: LD_INT 1
62297: NEG
62298: PUSH
62299: LD_INT 3
62301: NEG
62302: PUSH
62303: EMPTY
62304: LIST
62305: LIST
62306: PUSH
62307: LD_INT 1
62309: NEG
62310: PUSH
62311: LD_INT 4
62313: NEG
62314: PUSH
62315: EMPTY
62316: LIST
62317: LIST
62318: PUSH
62319: LD_INT 2
62321: PUSH
62322: LD_INT 2
62324: NEG
62325: PUSH
62326: EMPTY
62327: LIST
62328: LIST
62329: PUSH
62330: LD_INT 2
62332: NEG
62333: PUSH
62334: LD_INT 4
62336: NEG
62337: PUSH
62338: EMPTY
62339: LIST
62340: LIST
62341: PUSH
62342: LD_INT 4
62344: PUSH
62345: LD_INT 0
62347: PUSH
62348: EMPTY
62349: LIST
62350: LIST
62351: PUSH
62352: LD_INT 4
62354: PUSH
62355: LD_INT 1
62357: NEG
62358: PUSH
62359: EMPTY
62360: LIST
62361: LIST
62362: PUSH
62363: LD_INT 5
62365: PUSH
62366: LD_INT 0
62368: PUSH
62369: EMPTY
62370: LIST
62371: LIST
62372: PUSH
62373: LD_INT 5
62375: PUSH
62376: LD_INT 1
62378: PUSH
62379: EMPTY
62380: LIST
62381: LIST
62382: PUSH
62383: LD_INT 4
62385: PUSH
62386: LD_INT 1
62388: PUSH
62389: EMPTY
62390: LIST
62391: LIST
62392: PUSH
62393: LD_INT 3
62395: PUSH
62396: LD_INT 0
62398: PUSH
62399: EMPTY
62400: LIST
62401: LIST
62402: PUSH
62403: LD_INT 3
62405: PUSH
62406: LD_INT 1
62408: NEG
62409: PUSH
62410: EMPTY
62411: LIST
62412: LIST
62413: PUSH
62414: LD_INT 3
62416: PUSH
62417: LD_INT 2
62419: NEG
62420: PUSH
62421: EMPTY
62422: LIST
62423: LIST
62424: PUSH
62425: LD_INT 5
62427: PUSH
62428: LD_INT 2
62430: PUSH
62431: EMPTY
62432: LIST
62433: LIST
62434: PUSH
62435: EMPTY
62436: LIST
62437: LIST
62438: LIST
62439: LIST
62440: LIST
62441: LIST
62442: LIST
62443: LIST
62444: LIST
62445: LIST
62446: LIST
62447: LIST
62448: LIST
62449: LIST
62450: LIST
62451: LIST
62452: LIST
62453: LIST
62454: LIST
62455: LIST
62456: LIST
62457: LIST
62458: LIST
62459: LIST
62460: LIST
62461: LIST
62462: LIST
62463: LIST
62464: LIST
62465: LIST
62466: LIST
62467: LIST
62468: LIST
62469: LIST
62470: LIST
62471: LIST
62472: LIST
62473: LIST
62474: LIST
62475: LIST
62476: LIST
62477: LIST
62478: LIST
62479: LIST
62480: LIST
62481: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
62482: LD_ADDR_VAR 0 32
62486: PUSH
62487: LD_INT 4
62489: NEG
62490: PUSH
62491: LD_INT 0
62493: PUSH
62494: EMPTY
62495: LIST
62496: LIST
62497: PUSH
62498: LD_INT 4
62500: NEG
62501: PUSH
62502: LD_INT 1
62504: NEG
62505: PUSH
62506: EMPTY
62507: LIST
62508: LIST
62509: PUSH
62510: LD_INT 3
62512: NEG
62513: PUSH
62514: LD_INT 0
62516: PUSH
62517: EMPTY
62518: LIST
62519: LIST
62520: PUSH
62521: LD_INT 3
62523: NEG
62524: PUSH
62525: LD_INT 1
62527: PUSH
62528: EMPTY
62529: LIST
62530: LIST
62531: PUSH
62532: LD_INT 4
62534: NEG
62535: PUSH
62536: LD_INT 1
62538: PUSH
62539: EMPTY
62540: LIST
62541: LIST
62542: PUSH
62543: LD_INT 5
62545: NEG
62546: PUSH
62547: LD_INT 0
62549: PUSH
62550: EMPTY
62551: LIST
62552: LIST
62553: PUSH
62554: LD_INT 5
62556: NEG
62557: PUSH
62558: LD_INT 1
62560: NEG
62561: PUSH
62562: EMPTY
62563: LIST
62564: LIST
62565: PUSH
62566: LD_INT 5
62568: NEG
62569: PUSH
62570: LD_INT 2
62572: NEG
62573: PUSH
62574: EMPTY
62575: LIST
62576: LIST
62577: PUSH
62578: LD_INT 3
62580: NEG
62581: PUSH
62582: LD_INT 2
62584: PUSH
62585: EMPTY
62586: LIST
62587: LIST
62588: PUSH
62589: LD_INT 3
62591: NEG
62592: PUSH
62593: LD_INT 3
62595: NEG
62596: PUSH
62597: EMPTY
62598: LIST
62599: LIST
62600: PUSH
62601: LD_INT 3
62603: NEG
62604: PUSH
62605: LD_INT 4
62607: NEG
62608: PUSH
62609: EMPTY
62610: LIST
62611: LIST
62612: PUSH
62613: LD_INT 2
62615: NEG
62616: PUSH
62617: LD_INT 3
62619: NEG
62620: PUSH
62621: EMPTY
62622: LIST
62623: LIST
62624: PUSH
62625: LD_INT 2
62627: NEG
62628: PUSH
62629: LD_INT 2
62631: NEG
62632: PUSH
62633: EMPTY
62634: LIST
62635: LIST
62636: PUSH
62637: LD_INT 3
62639: NEG
62640: PUSH
62641: LD_INT 2
62643: NEG
62644: PUSH
62645: EMPTY
62646: LIST
62647: LIST
62648: PUSH
62649: LD_INT 4
62651: NEG
62652: PUSH
62653: LD_INT 3
62655: NEG
62656: PUSH
62657: EMPTY
62658: LIST
62659: LIST
62660: PUSH
62661: LD_INT 4
62663: NEG
62664: PUSH
62665: LD_INT 4
62667: NEG
62668: PUSH
62669: EMPTY
62670: LIST
62671: LIST
62672: PUSH
62673: LD_INT 2
62675: NEG
62676: PUSH
62677: LD_INT 4
62679: NEG
62680: PUSH
62681: EMPTY
62682: LIST
62683: LIST
62684: PUSH
62685: LD_INT 4
62687: NEG
62688: PUSH
62689: LD_INT 2
62691: NEG
62692: PUSH
62693: EMPTY
62694: LIST
62695: LIST
62696: PUSH
62697: LD_INT 0
62699: PUSH
62700: LD_INT 4
62702: NEG
62703: PUSH
62704: EMPTY
62705: LIST
62706: LIST
62707: PUSH
62708: LD_INT 0
62710: PUSH
62711: LD_INT 5
62713: NEG
62714: PUSH
62715: EMPTY
62716: LIST
62717: LIST
62718: PUSH
62719: LD_INT 1
62721: PUSH
62722: LD_INT 4
62724: NEG
62725: PUSH
62726: EMPTY
62727: LIST
62728: LIST
62729: PUSH
62730: LD_INT 1
62732: PUSH
62733: LD_INT 3
62735: NEG
62736: PUSH
62737: EMPTY
62738: LIST
62739: LIST
62740: PUSH
62741: LD_INT 0
62743: PUSH
62744: LD_INT 3
62746: NEG
62747: PUSH
62748: EMPTY
62749: LIST
62750: LIST
62751: PUSH
62752: LD_INT 1
62754: NEG
62755: PUSH
62756: LD_INT 4
62758: NEG
62759: PUSH
62760: EMPTY
62761: LIST
62762: LIST
62763: PUSH
62764: LD_INT 1
62766: NEG
62767: PUSH
62768: LD_INT 5
62770: NEG
62771: PUSH
62772: EMPTY
62773: LIST
62774: LIST
62775: PUSH
62776: LD_INT 2
62778: PUSH
62779: LD_INT 3
62781: NEG
62782: PUSH
62783: EMPTY
62784: LIST
62785: LIST
62786: PUSH
62787: LD_INT 2
62789: NEG
62790: PUSH
62791: LD_INT 5
62793: NEG
62794: PUSH
62795: EMPTY
62796: LIST
62797: LIST
62798: PUSH
62799: LD_INT 3
62801: PUSH
62802: LD_INT 0
62804: PUSH
62805: EMPTY
62806: LIST
62807: LIST
62808: PUSH
62809: LD_INT 3
62811: PUSH
62812: LD_INT 1
62814: NEG
62815: PUSH
62816: EMPTY
62817: LIST
62818: LIST
62819: PUSH
62820: LD_INT 4
62822: PUSH
62823: LD_INT 0
62825: PUSH
62826: EMPTY
62827: LIST
62828: LIST
62829: PUSH
62830: LD_INT 4
62832: PUSH
62833: LD_INT 1
62835: PUSH
62836: EMPTY
62837: LIST
62838: LIST
62839: PUSH
62840: LD_INT 3
62842: PUSH
62843: LD_INT 1
62845: PUSH
62846: EMPTY
62847: LIST
62848: LIST
62849: PUSH
62850: LD_INT 2
62852: PUSH
62853: LD_INT 0
62855: PUSH
62856: EMPTY
62857: LIST
62858: LIST
62859: PUSH
62860: LD_INT 2
62862: PUSH
62863: LD_INT 1
62865: NEG
62866: PUSH
62867: EMPTY
62868: LIST
62869: LIST
62870: PUSH
62871: LD_INT 2
62873: PUSH
62874: LD_INT 2
62876: NEG
62877: PUSH
62878: EMPTY
62879: LIST
62880: LIST
62881: PUSH
62882: LD_INT 4
62884: PUSH
62885: LD_INT 2
62887: PUSH
62888: EMPTY
62889: LIST
62890: LIST
62891: PUSH
62892: LD_INT 4
62894: PUSH
62895: LD_INT 4
62897: PUSH
62898: EMPTY
62899: LIST
62900: LIST
62901: PUSH
62902: LD_INT 4
62904: PUSH
62905: LD_INT 3
62907: PUSH
62908: EMPTY
62909: LIST
62910: LIST
62911: PUSH
62912: LD_INT 5
62914: PUSH
62915: LD_INT 4
62917: PUSH
62918: EMPTY
62919: LIST
62920: LIST
62921: PUSH
62922: LD_INT 5
62924: PUSH
62925: LD_INT 5
62927: PUSH
62928: EMPTY
62929: LIST
62930: LIST
62931: PUSH
62932: LD_INT 4
62934: PUSH
62935: LD_INT 5
62937: PUSH
62938: EMPTY
62939: LIST
62940: LIST
62941: PUSH
62942: LD_INT 3
62944: PUSH
62945: LD_INT 4
62947: PUSH
62948: EMPTY
62949: LIST
62950: LIST
62951: PUSH
62952: LD_INT 3
62954: PUSH
62955: LD_INT 3
62957: PUSH
62958: EMPTY
62959: LIST
62960: LIST
62961: PUSH
62962: LD_INT 5
62964: PUSH
62965: LD_INT 3
62967: PUSH
62968: EMPTY
62969: LIST
62970: LIST
62971: PUSH
62972: LD_INT 3
62974: PUSH
62975: LD_INT 5
62977: PUSH
62978: EMPTY
62979: LIST
62980: LIST
62981: PUSH
62982: EMPTY
62983: LIST
62984: LIST
62985: LIST
62986: LIST
62987: LIST
62988: LIST
62989: LIST
62990: LIST
62991: LIST
62992: LIST
62993: LIST
62994: LIST
62995: LIST
62996: LIST
62997: LIST
62998: LIST
62999: LIST
63000: LIST
63001: LIST
63002: LIST
63003: LIST
63004: LIST
63005: LIST
63006: LIST
63007: LIST
63008: LIST
63009: LIST
63010: LIST
63011: LIST
63012: LIST
63013: LIST
63014: LIST
63015: LIST
63016: LIST
63017: LIST
63018: LIST
63019: LIST
63020: LIST
63021: LIST
63022: LIST
63023: LIST
63024: LIST
63025: LIST
63026: LIST
63027: LIST
63028: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
63029: LD_ADDR_VAR 0 33
63033: PUSH
63034: LD_INT 4
63036: NEG
63037: PUSH
63038: LD_INT 4
63040: NEG
63041: PUSH
63042: EMPTY
63043: LIST
63044: LIST
63045: PUSH
63046: LD_INT 4
63048: NEG
63049: PUSH
63050: LD_INT 5
63052: NEG
63053: PUSH
63054: EMPTY
63055: LIST
63056: LIST
63057: PUSH
63058: LD_INT 3
63060: NEG
63061: PUSH
63062: LD_INT 4
63064: NEG
63065: PUSH
63066: EMPTY
63067: LIST
63068: LIST
63069: PUSH
63070: LD_INT 3
63072: NEG
63073: PUSH
63074: LD_INT 3
63076: NEG
63077: PUSH
63078: EMPTY
63079: LIST
63080: LIST
63081: PUSH
63082: LD_INT 4
63084: NEG
63085: PUSH
63086: LD_INT 3
63088: NEG
63089: PUSH
63090: EMPTY
63091: LIST
63092: LIST
63093: PUSH
63094: LD_INT 5
63096: NEG
63097: PUSH
63098: LD_INT 4
63100: NEG
63101: PUSH
63102: EMPTY
63103: LIST
63104: LIST
63105: PUSH
63106: LD_INT 5
63108: NEG
63109: PUSH
63110: LD_INT 5
63112: NEG
63113: PUSH
63114: EMPTY
63115: LIST
63116: LIST
63117: PUSH
63118: LD_INT 3
63120: NEG
63121: PUSH
63122: LD_INT 5
63124: NEG
63125: PUSH
63126: EMPTY
63127: LIST
63128: LIST
63129: PUSH
63130: LD_INT 5
63132: NEG
63133: PUSH
63134: LD_INT 3
63136: NEG
63137: PUSH
63138: EMPTY
63139: LIST
63140: LIST
63141: PUSH
63142: LD_INT 0
63144: PUSH
63145: LD_INT 3
63147: NEG
63148: PUSH
63149: EMPTY
63150: LIST
63151: LIST
63152: PUSH
63153: LD_INT 0
63155: PUSH
63156: LD_INT 4
63158: NEG
63159: PUSH
63160: EMPTY
63161: LIST
63162: LIST
63163: PUSH
63164: LD_INT 1
63166: PUSH
63167: LD_INT 3
63169: NEG
63170: PUSH
63171: EMPTY
63172: LIST
63173: LIST
63174: PUSH
63175: LD_INT 1
63177: PUSH
63178: LD_INT 2
63180: NEG
63181: PUSH
63182: EMPTY
63183: LIST
63184: LIST
63185: PUSH
63186: LD_INT 0
63188: PUSH
63189: LD_INT 2
63191: NEG
63192: PUSH
63193: EMPTY
63194: LIST
63195: LIST
63196: PUSH
63197: LD_INT 1
63199: NEG
63200: PUSH
63201: LD_INT 3
63203: NEG
63204: PUSH
63205: EMPTY
63206: LIST
63207: LIST
63208: PUSH
63209: LD_INT 1
63211: NEG
63212: PUSH
63213: LD_INT 4
63215: NEG
63216: PUSH
63217: EMPTY
63218: LIST
63219: LIST
63220: PUSH
63221: LD_INT 2
63223: PUSH
63224: LD_INT 2
63226: NEG
63227: PUSH
63228: EMPTY
63229: LIST
63230: LIST
63231: PUSH
63232: LD_INT 2
63234: NEG
63235: PUSH
63236: LD_INT 4
63238: NEG
63239: PUSH
63240: EMPTY
63241: LIST
63242: LIST
63243: PUSH
63244: LD_INT 4
63246: PUSH
63247: LD_INT 0
63249: PUSH
63250: EMPTY
63251: LIST
63252: LIST
63253: PUSH
63254: LD_INT 4
63256: PUSH
63257: LD_INT 1
63259: NEG
63260: PUSH
63261: EMPTY
63262: LIST
63263: LIST
63264: PUSH
63265: LD_INT 5
63267: PUSH
63268: LD_INT 0
63270: PUSH
63271: EMPTY
63272: LIST
63273: LIST
63274: PUSH
63275: LD_INT 5
63277: PUSH
63278: LD_INT 1
63280: PUSH
63281: EMPTY
63282: LIST
63283: LIST
63284: PUSH
63285: LD_INT 4
63287: PUSH
63288: LD_INT 1
63290: PUSH
63291: EMPTY
63292: LIST
63293: LIST
63294: PUSH
63295: LD_INT 3
63297: PUSH
63298: LD_INT 0
63300: PUSH
63301: EMPTY
63302: LIST
63303: LIST
63304: PUSH
63305: LD_INT 3
63307: PUSH
63308: LD_INT 1
63310: NEG
63311: PUSH
63312: EMPTY
63313: LIST
63314: LIST
63315: PUSH
63316: LD_INT 3
63318: PUSH
63319: LD_INT 2
63321: NEG
63322: PUSH
63323: EMPTY
63324: LIST
63325: LIST
63326: PUSH
63327: LD_INT 5
63329: PUSH
63330: LD_INT 2
63332: PUSH
63333: EMPTY
63334: LIST
63335: LIST
63336: PUSH
63337: LD_INT 3
63339: PUSH
63340: LD_INT 3
63342: PUSH
63343: EMPTY
63344: LIST
63345: LIST
63346: PUSH
63347: LD_INT 3
63349: PUSH
63350: LD_INT 2
63352: PUSH
63353: EMPTY
63354: LIST
63355: LIST
63356: PUSH
63357: LD_INT 4
63359: PUSH
63360: LD_INT 3
63362: PUSH
63363: EMPTY
63364: LIST
63365: LIST
63366: PUSH
63367: LD_INT 4
63369: PUSH
63370: LD_INT 4
63372: PUSH
63373: EMPTY
63374: LIST
63375: LIST
63376: PUSH
63377: LD_INT 3
63379: PUSH
63380: LD_INT 4
63382: PUSH
63383: EMPTY
63384: LIST
63385: LIST
63386: PUSH
63387: LD_INT 2
63389: PUSH
63390: LD_INT 3
63392: PUSH
63393: EMPTY
63394: LIST
63395: LIST
63396: PUSH
63397: LD_INT 2
63399: PUSH
63400: LD_INT 2
63402: PUSH
63403: EMPTY
63404: LIST
63405: LIST
63406: PUSH
63407: LD_INT 4
63409: PUSH
63410: LD_INT 2
63412: PUSH
63413: EMPTY
63414: LIST
63415: LIST
63416: PUSH
63417: LD_INT 2
63419: PUSH
63420: LD_INT 4
63422: PUSH
63423: EMPTY
63424: LIST
63425: LIST
63426: PUSH
63427: LD_INT 0
63429: PUSH
63430: LD_INT 4
63432: PUSH
63433: EMPTY
63434: LIST
63435: LIST
63436: PUSH
63437: LD_INT 0
63439: PUSH
63440: LD_INT 3
63442: PUSH
63443: EMPTY
63444: LIST
63445: LIST
63446: PUSH
63447: LD_INT 1
63449: PUSH
63450: LD_INT 4
63452: PUSH
63453: EMPTY
63454: LIST
63455: LIST
63456: PUSH
63457: LD_INT 1
63459: PUSH
63460: LD_INT 5
63462: PUSH
63463: EMPTY
63464: LIST
63465: LIST
63466: PUSH
63467: LD_INT 0
63469: PUSH
63470: LD_INT 5
63472: PUSH
63473: EMPTY
63474: LIST
63475: LIST
63476: PUSH
63477: LD_INT 1
63479: NEG
63480: PUSH
63481: LD_INT 4
63483: PUSH
63484: EMPTY
63485: LIST
63486: LIST
63487: PUSH
63488: LD_INT 1
63490: NEG
63491: PUSH
63492: LD_INT 3
63494: PUSH
63495: EMPTY
63496: LIST
63497: LIST
63498: PUSH
63499: LD_INT 2
63501: PUSH
63502: LD_INT 5
63504: PUSH
63505: EMPTY
63506: LIST
63507: LIST
63508: PUSH
63509: LD_INT 2
63511: NEG
63512: PUSH
63513: LD_INT 3
63515: PUSH
63516: EMPTY
63517: LIST
63518: LIST
63519: PUSH
63520: EMPTY
63521: LIST
63522: LIST
63523: LIST
63524: LIST
63525: LIST
63526: LIST
63527: LIST
63528: LIST
63529: LIST
63530: LIST
63531: LIST
63532: LIST
63533: LIST
63534: LIST
63535: LIST
63536: LIST
63537: LIST
63538: LIST
63539: LIST
63540: LIST
63541: LIST
63542: LIST
63543: LIST
63544: LIST
63545: LIST
63546: LIST
63547: LIST
63548: LIST
63549: LIST
63550: LIST
63551: LIST
63552: LIST
63553: LIST
63554: LIST
63555: LIST
63556: LIST
63557: LIST
63558: LIST
63559: LIST
63560: LIST
63561: LIST
63562: LIST
63563: LIST
63564: LIST
63565: LIST
63566: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
63567: LD_ADDR_VAR 0 34
63571: PUSH
63572: LD_INT 0
63574: PUSH
63575: LD_INT 4
63577: NEG
63578: PUSH
63579: EMPTY
63580: LIST
63581: LIST
63582: PUSH
63583: LD_INT 0
63585: PUSH
63586: LD_INT 5
63588: NEG
63589: PUSH
63590: EMPTY
63591: LIST
63592: LIST
63593: PUSH
63594: LD_INT 1
63596: PUSH
63597: LD_INT 4
63599: NEG
63600: PUSH
63601: EMPTY
63602: LIST
63603: LIST
63604: PUSH
63605: LD_INT 1
63607: PUSH
63608: LD_INT 3
63610: NEG
63611: PUSH
63612: EMPTY
63613: LIST
63614: LIST
63615: PUSH
63616: LD_INT 0
63618: PUSH
63619: LD_INT 3
63621: NEG
63622: PUSH
63623: EMPTY
63624: LIST
63625: LIST
63626: PUSH
63627: LD_INT 1
63629: NEG
63630: PUSH
63631: LD_INT 4
63633: NEG
63634: PUSH
63635: EMPTY
63636: LIST
63637: LIST
63638: PUSH
63639: LD_INT 1
63641: NEG
63642: PUSH
63643: LD_INT 5
63645: NEG
63646: PUSH
63647: EMPTY
63648: LIST
63649: LIST
63650: PUSH
63651: LD_INT 2
63653: PUSH
63654: LD_INT 3
63656: NEG
63657: PUSH
63658: EMPTY
63659: LIST
63660: LIST
63661: PUSH
63662: LD_INT 2
63664: NEG
63665: PUSH
63666: LD_INT 5
63668: NEG
63669: PUSH
63670: EMPTY
63671: LIST
63672: LIST
63673: PUSH
63674: LD_INT 3
63676: PUSH
63677: LD_INT 0
63679: PUSH
63680: EMPTY
63681: LIST
63682: LIST
63683: PUSH
63684: LD_INT 3
63686: PUSH
63687: LD_INT 1
63689: NEG
63690: PUSH
63691: EMPTY
63692: LIST
63693: LIST
63694: PUSH
63695: LD_INT 4
63697: PUSH
63698: LD_INT 0
63700: PUSH
63701: EMPTY
63702: LIST
63703: LIST
63704: PUSH
63705: LD_INT 4
63707: PUSH
63708: LD_INT 1
63710: PUSH
63711: EMPTY
63712: LIST
63713: LIST
63714: PUSH
63715: LD_INT 3
63717: PUSH
63718: LD_INT 1
63720: PUSH
63721: EMPTY
63722: LIST
63723: LIST
63724: PUSH
63725: LD_INT 2
63727: PUSH
63728: LD_INT 0
63730: PUSH
63731: EMPTY
63732: LIST
63733: LIST
63734: PUSH
63735: LD_INT 2
63737: PUSH
63738: LD_INT 1
63740: NEG
63741: PUSH
63742: EMPTY
63743: LIST
63744: LIST
63745: PUSH
63746: LD_INT 2
63748: PUSH
63749: LD_INT 2
63751: NEG
63752: PUSH
63753: EMPTY
63754: LIST
63755: LIST
63756: PUSH
63757: LD_INT 4
63759: PUSH
63760: LD_INT 2
63762: PUSH
63763: EMPTY
63764: LIST
63765: LIST
63766: PUSH
63767: LD_INT 4
63769: PUSH
63770: LD_INT 4
63772: PUSH
63773: EMPTY
63774: LIST
63775: LIST
63776: PUSH
63777: LD_INT 4
63779: PUSH
63780: LD_INT 3
63782: PUSH
63783: EMPTY
63784: LIST
63785: LIST
63786: PUSH
63787: LD_INT 5
63789: PUSH
63790: LD_INT 4
63792: PUSH
63793: EMPTY
63794: LIST
63795: LIST
63796: PUSH
63797: LD_INT 5
63799: PUSH
63800: LD_INT 5
63802: PUSH
63803: EMPTY
63804: LIST
63805: LIST
63806: PUSH
63807: LD_INT 4
63809: PUSH
63810: LD_INT 5
63812: PUSH
63813: EMPTY
63814: LIST
63815: LIST
63816: PUSH
63817: LD_INT 3
63819: PUSH
63820: LD_INT 4
63822: PUSH
63823: EMPTY
63824: LIST
63825: LIST
63826: PUSH
63827: LD_INT 3
63829: PUSH
63830: LD_INT 3
63832: PUSH
63833: EMPTY
63834: LIST
63835: LIST
63836: PUSH
63837: LD_INT 5
63839: PUSH
63840: LD_INT 3
63842: PUSH
63843: EMPTY
63844: LIST
63845: LIST
63846: PUSH
63847: LD_INT 3
63849: PUSH
63850: LD_INT 5
63852: PUSH
63853: EMPTY
63854: LIST
63855: LIST
63856: PUSH
63857: LD_INT 0
63859: PUSH
63860: LD_INT 3
63862: PUSH
63863: EMPTY
63864: LIST
63865: LIST
63866: PUSH
63867: LD_INT 0
63869: PUSH
63870: LD_INT 2
63872: PUSH
63873: EMPTY
63874: LIST
63875: LIST
63876: PUSH
63877: LD_INT 1
63879: PUSH
63880: LD_INT 3
63882: PUSH
63883: EMPTY
63884: LIST
63885: LIST
63886: PUSH
63887: LD_INT 1
63889: PUSH
63890: LD_INT 4
63892: PUSH
63893: EMPTY
63894: LIST
63895: LIST
63896: PUSH
63897: LD_INT 0
63899: PUSH
63900: LD_INT 4
63902: PUSH
63903: EMPTY
63904: LIST
63905: LIST
63906: PUSH
63907: LD_INT 1
63909: NEG
63910: PUSH
63911: LD_INT 3
63913: PUSH
63914: EMPTY
63915: LIST
63916: LIST
63917: PUSH
63918: LD_INT 1
63920: NEG
63921: PUSH
63922: LD_INT 2
63924: PUSH
63925: EMPTY
63926: LIST
63927: LIST
63928: PUSH
63929: LD_INT 2
63931: PUSH
63932: LD_INT 4
63934: PUSH
63935: EMPTY
63936: LIST
63937: LIST
63938: PUSH
63939: LD_INT 2
63941: NEG
63942: PUSH
63943: LD_INT 2
63945: PUSH
63946: EMPTY
63947: LIST
63948: LIST
63949: PUSH
63950: LD_INT 4
63952: NEG
63953: PUSH
63954: LD_INT 0
63956: PUSH
63957: EMPTY
63958: LIST
63959: LIST
63960: PUSH
63961: LD_INT 4
63963: NEG
63964: PUSH
63965: LD_INT 1
63967: NEG
63968: PUSH
63969: EMPTY
63970: LIST
63971: LIST
63972: PUSH
63973: LD_INT 3
63975: NEG
63976: PUSH
63977: LD_INT 0
63979: PUSH
63980: EMPTY
63981: LIST
63982: LIST
63983: PUSH
63984: LD_INT 3
63986: NEG
63987: PUSH
63988: LD_INT 1
63990: PUSH
63991: EMPTY
63992: LIST
63993: LIST
63994: PUSH
63995: LD_INT 4
63997: NEG
63998: PUSH
63999: LD_INT 1
64001: PUSH
64002: EMPTY
64003: LIST
64004: LIST
64005: PUSH
64006: LD_INT 5
64008: NEG
64009: PUSH
64010: LD_INT 0
64012: PUSH
64013: EMPTY
64014: LIST
64015: LIST
64016: PUSH
64017: LD_INT 5
64019: NEG
64020: PUSH
64021: LD_INT 1
64023: NEG
64024: PUSH
64025: EMPTY
64026: LIST
64027: LIST
64028: PUSH
64029: LD_INT 5
64031: NEG
64032: PUSH
64033: LD_INT 2
64035: NEG
64036: PUSH
64037: EMPTY
64038: LIST
64039: LIST
64040: PUSH
64041: LD_INT 3
64043: NEG
64044: PUSH
64045: LD_INT 2
64047: PUSH
64048: EMPTY
64049: LIST
64050: LIST
64051: PUSH
64052: EMPTY
64053: LIST
64054: LIST
64055: LIST
64056: LIST
64057: LIST
64058: LIST
64059: LIST
64060: LIST
64061: LIST
64062: LIST
64063: LIST
64064: LIST
64065: LIST
64066: LIST
64067: LIST
64068: LIST
64069: LIST
64070: LIST
64071: LIST
64072: LIST
64073: LIST
64074: LIST
64075: LIST
64076: LIST
64077: LIST
64078: LIST
64079: LIST
64080: LIST
64081: LIST
64082: LIST
64083: LIST
64084: LIST
64085: LIST
64086: LIST
64087: LIST
64088: LIST
64089: LIST
64090: LIST
64091: LIST
64092: LIST
64093: LIST
64094: LIST
64095: LIST
64096: LIST
64097: LIST
64098: ST_TO_ADDR
// end ; end ;
64099: GO 64102
64101: POP
// case btype of b_depot , b_warehouse :
64102: LD_VAR 0 1
64106: PUSH
64107: LD_INT 0
64109: DOUBLE
64110: EQUAL
64111: IFTRUE 64121
64113: LD_INT 1
64115: DOUBLE
64116: EQUAL
64117: IFTRUE 64121
64119: GO 64322
64121: POP
// case nation of nation_american :
64122: LD_VAR 0 5
64126: PUSH
64127: LD_INT 1
64129: DOUBLE
64130: EQUAL
64131: IFTRUE 64135
64133: GO 64191
64135: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
64136: LD_ADDR_VAR 0 9
64140: PUSH
64141: LD_VAR 0 11
64145: PUSH
64146: LD_VAR 0 12
64150: PUSH
64151: LD_VAR 0 13
64155: PUSH
64156: LD_VAR 0 14
64160: PUSH
64161: LD_VAR 0 15
64165: PUSH
64166: LD_VAR 0 16
64170: PUSH
64171: EMPTY
64172: LIST
64173: LIST
64174: LIST
64175: LIST
64176: LIST
64177: LIST
64178: PUSH
64179: LD_VAR 0 4
64183: PUSH
64184: LD_INT 1
64186: PLUS
64187: ARRAY
64188: ST_TO_ADDR
64189: GO 64320
64191: LD_INT 2
64193: DOUBLE
64194: EQUAL
64195: IFTRUE 64199
64197: GO 64255
64199: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
64200: LD_ADDR_VAR 0 9
64204: PUSH
64205: LD_VAR 0 17
64209: PUSH
64210: LD_VAR 0 18
64214: PUSH
64215: LD_VAR 0 19
64219: PUSH
64220: LD_VAR 0 20
64224: PUSH
64225: LD_VAR 0 21
64229: PUSH
64230: LD_VAR 0 22
64234: PUSH
64235: EMPTY
64236: LIST
64237: LIST
64238: LIST
64239: LIST
64240: LIST
64241: LIST
64242: PUSH
64243: LD_VAR 0 4
64247: PUSH
64248: LD_INT 1
64250: PLUS
64251: ARRAY
64252: ST_TO_ADDR
64253: GO 64320
64255: LD_INT 3
64257: DOUBLE
64258: EQUAL
64259: IFTRUE 64263
64261: GO 64319
64263: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
64264: LD_ADDR_VAR 0 9
64268: PUSH
64269: LD_VAR 0 23
64273: PUSH
64274: LD_VAR 0 24
64278: PUSH
64279: LD_VAR 0 25
64283: PUSH
64284: LD_VAR 0 26
64288: PUSH
64289: LD_VAR 0 27
64293: PUSH
64294: LD_VAR 0 28
64298: PUSH
64299: EMPTY
64300: LIST
64301: LIST
64302: LIST
64303: LIST
64304: LIST
64305: LIST
64306: PUSH
64307: LD_VAR 0 4
64311: PUSH
64312: LD_INT 1
64314: PLUS
64315: ARRAY
64316: ST_TO_ADDR
64317: GO 64320
64319: POP
64320: GO 64875
64322: LD_INT 2
64324: DOUBLE
64325: EQUAL
64326: IFTRUE 64336
64328: LD_INT 3
64330: DOUBLE
64331: EQUAL
64332: IFTRUE 64336
64334: GO 64392
64336: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
64337: LD_ADDR_VAR 0 9
64341: PUSH
64342: LD_VAR 0 29
64346: PUSH
64347: LD_VAR 0 30
64351: PUSH
64352: LD_VAR 0 31
64356: PUSH
64357: LD_VAR 0 32
64361: PUSH
64362: LD_VAR 0 33
64366: PUSH
64367: LD_VAR 0 34
64371: PUSH
64372: EMPTY
64373: LIST
64374: LIST
64375: LIST
64376: LIST
64377: LIST
64378: LIST
64379: PUSH
64380: LD_VAR 0 4
64384: PUSH
64385: LD_INT 1
64387: PLUS
64388: ARRAY
64389: ST_TO_ADDR
64390: GO 64875
64392: LD_INT 16
64394: DOUBLE
64395: EQUAL
64396: IFTRUE 64454
64398: LD_INT 17
64400: DOUBLE
64401: EQUAL
64402: IFTRUE 64454
64404: LD_INT 18
64406: DOUBLE
64407: EQUAL
64408: IFTRUE 64454
64410: LD_INT 19
64412: DOUBLE
64413: EQUAL
64414: IFTRUE 64454
64416: LD_INT 22
64418: DOUBLE
64419: EQUAL
64420: IFTRUE 64454
64422: LD_INT 20
64424: DOUBLE
64425: EQUAL
64426: IFTRUE 64454
64428: LD_INT 21
64430: DOUBLE
64431: EQUAL
64432: IFTRUE 64454
64434: LD_INT 23
64436: DOUBLE
64437: EQUAL
64438: IFTRUE 64454
64440: LD_INT 24
64442: DOUBLE
64443: EQUAL
64444: IFTRUE 64454
64446: LD_INT 25
64448: DOUBLE
64449: EQUAL
64450: IFTRUE 64454
64452: GO 64510
64454: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
64455: LD_ADDR_VAR 0 9
64459: PUSH
64460: LD_VAR 0 35
64464: PUSH
64465: LD_VAR 0 36
64469: PUSH
64470: LD_VAR 0 37
64474: PUSH
64475: LD_VAR 0 38
64479: PUSH
64480: LD_VAR 0 39
64484: PUSH
64485: LD_VAR 0 40
64489: PUSH
64490: EMPTY
64491: LIST
64492: LIST
64493: LIST
64494: LIST
64495: LIST
64496: LIST
64497: PUSH
64498: LD_VAR 0 4
64502: PUSH
64503: LD_INT 1
64505: PLUS
64506: ARRAY
64507: ST_TO_ADDR
64508: GO 64875
64510: LD_INT 6
64512: DOUBLE
64513: EQUAL
64514: IFTRUE 64566
64516: LD_INT 7
64518: DOUBLE
64519: EQUAL
64520: IFTRUE 64566
64522: LD_INT 8
64524: DOUBLE
64525: EQUAL
64526: IFTRUE 64566
64528: LD_INT 13
64530: DOUBLE
64531: EQUAL
64532: IFTRUE 64566
64534: LD_INT 12
64536: DOUBLE
64537: EQUAL
64538: IFTRUE 64566
64540: LD_INT 15
64542: DOUBLE
64543: EQUAL
64544: IFTRUE 64566
64546: LD_INT 11
64548: DOUBLE
64549: EQUAL
64550: IFTRUE 64566
64552: LD_INT 14
64554: DOUBLE
64555: EQUAL
64556: IFTRUE 64566
64558: LD_INT 10
64560: DOUBLE
64561: EQUAL
64562: IFTRUE 64566
64564: GO 64622
64566: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
64567: LD_ADDR_VAR 0 9
64571: PUSH
64572: LD_VAR 0 41
64576: PUSH
64577: LD_VAR 0 42
64581: PUSH
64582: LD_VAR 0 43
64586: PUSH
64587: LD_VAR 0 44
64591: PUSH
64592: LD_VAR 0 45
64596: PUSH
64597: LD_VAR 0 46
64601: PUSH
64602: EMPTY
64603: LIST
64604: LIST
64605: LIST
64606: LIST
64607: LIST
64608: LIST
64609: PUSH
64610: LD_VAR 0 4
64614: PUSH
64615: LD_INT 1
64617: PLUS
64618: ARRAY
64619: ST_TO_ADDR
64620: GO 64875
64622: LD_INT 36
64624: DOUBLE
64625: EQUAL
64626: IFTRUE 64630
64628: GO 64686
64630: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
64631: LD_ADDR_VAR 0 9
64635: PUSH
64636: LD_VAR 0 47
64640: PUSH
64641: LD_VAR 0 48
64645: PUSH
64646: LD_VAR 0 49
64650: PUSH
64651: LD_VAR 0 50
64655: PUSH
64656: LD_VAR 0 51
64660: PUSH
64661: LD_VAR 0 52
64665: PUSH
64666: EMPTY
64667: LIST
64668: LIST
64669: LIST
64670: LIST
64671: LIST
64672: LIST
64673: PUSH
64674: LD_VAR 0 4
64678: PUSH
64679: LD_INT 1
64681: PLUS
64682: ARRAY
64683: ST_TO_ADDR
64684: GO 64875
64686: LD_INT 4
64688: DOUBLE
64689: EQUAL
64690: IFTRUE 64712
64692: LD_INT 5
64694: DOUBLE
64695: EQUAL
64696: IFTRUE 64712
64698: LD_INT 34
64700: DOUBLE
64701: EQUAL
64702: IFTRUE 64712
64704: LD_INT 37
64706: DOUBLE
64707: EQUAL
64708: IFTRUE 64712
64710: GO 64768
64712: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
64713: LD_ADDR_VAR 0 9
64717: PUSH
64718: LD_VAR 0 53
64722: PUSH
64723: LD_VAR 0 54
64727: PUSH
64728: LD_VAR 0 55
64732: PUSH
64733: LD_VAR 0 56
64737: PUSH
64738: LD_VAR 0 57
64742: PUSH
64743: LD_VAR 0 58
64747: PUSH
64748: EMPTY
64749: LIST
64750: LIST
64751: LIST
64752: LIST
64753: LIST
64754: LIST
64755: PUSH
64756: LD_VAR 0 4
64760: PUSH
64761: LD_INT 1
64763: PLUS
64764: ARRAY
64765: ST_TO_ADDR
64766: GO 64875
64768: LD_INT 31
64770: DOUBLE
64771: EQUAL
64772: IFTRUE 64818
64774: LD_INT 32
64776: DOUBLE
64777: EQUAL
64778: IFTRUE 64818
64780: LD_INT 33
64782: DOUBLE
64783: EQUAL
64784: IFTRUE 64818
64786: LD_INT 27
64788: DOUBLE
64789: EQUAL
64790: IFTRUE 64818
64792: LD_INT 26
64794: DOUBLE
64795: EQUAL
64796: IFTRUE 64818
64798: LD_INT 28
64800: DOUBLE
64801: EQUAL
64802: IFTRUE 64818
64804: LD_INT 29
64806: DOUBLE
64807: EQUAL
64808: IFTRUE 64818
64810: LD_INT 30
64812: DOUBLE
64813: EQUAL
64814: IFTRUE 64818
64816: GO 64874
64818: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
64819: LD_ADDR_VAR 0 9
64823: PUSH
64824: LD_VAR 0 59
64828: PUSH
64829: LD_VAR 0 60
64833: PUSH
64834: LD_VAR 0 61
64838: PUSH
64839: LD_VAR 0 62
64843: PUSH
64844: LD_VAR 0 63
64848: PUSH
64849: LD_VAR 0 64
64853: PUSH
64854: EMPTY
64855: LIST
64856: LIST
64857: LIST
64858: LIST
64859: LIST
64860: LIST
64861: PUSH
64862: LD_VAR 0 4
64866: PUSH
64867: LD_INT 1
64869: PLUS
64870: ARRAY
64871: ST_TO_ADDR
64872: GO 64875
64874: POP
// temp_list2 = [ ] ;
64875: LD_ADDR_VAR 0 10
64879: PUSH
64880: EMPTY
64881: ST_TO_ADDR
// for i in temp_list do
64882: LD_ADDR_VAR 0 8
64886: PUSH
64887: LD_VAR 0 9
64891: PUSH
64892: FOR_IN
64893: IFFALSE 64945
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
64895: LD_ADDR_VAR 0 10
64899: PUSH
64900: LD_VAR 0 10
64904: PUSH
64905: LD_VAR 0 8
64909: PUSH
64910: LD_INT 1
64912: ARRAY
64913: PUSH
64914: LD_VAR 0 2
64918: PLUS
64919: PUSH
64920: LD_VAR 0 8
64924: PUSH
64925: LD_INT 2
64927: ARRAY
64928: PUSH
64929: LD_VAR 0 3
64933: PLUS
64934: PUSH
64935: EMPTY
64936: LIST
64937: LIST
64938: PUSH
64939: EMPTY
64940: LIST
64941: ADD
64942: ST_TO_ADDR
64943: GO 64892
64945: POP
64946: POP
// result = temp_list2 ;
64947: LD_ADDR_VAR 0 7
64951: PUSH
64952: LD_VAR 0 10
64956: ST_TO_ADDR
// end ;
64957: LD_VAR 0 7
64961: RET
// export function EnemyInRange ( unit , dist ) ; begin
64962: LD_INT 0
64964: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
64965: LD_ADDR_VAR 0 3
64969: PUSH
64970: LD_VAR 0 1
64974: PPUSH
64975: CALL_OW 255
64979: PPUSH
64980: LD_VAR 0 1
64984: PPUSH
64985: CALL_OW 250
64989: PPUSH
64990: LD_VAR 0 1
64994: PPUSH
64995: CALL_OW 251
64999: PPUSH
65000: LD_VAR 0 2
65004: PPUSH
65005: CALL 38364 0 4
65009: PUSH
65010: LD_INT 4
65012: ARRAY
65013: ST_TO_ADDR
// end ;
65014: LD_VAR 0 3
65018: RET
// export function PlayerSeeMe ( unit ) ; begin
65019: LD_INT 0
65021: PPUSH
// result := See ( your_side , unit ) ;
65022: LD_ADDR_VAR 0 2
65026: PUSH
65027: LD_OWVAR 2
65031: PPUSH
65032: LD_VAR 0 1
65036: PPUSH
65037: CALL_OW 292
65041: ST_TO_ADDR
// end ;
65042: LD_VAR 0 2
65046: RET
// export function ReverseDir ( unit ) ; begin
65047: LD_INT 0
65049: PPUSH
// if not unit then
65050: LD_VAR 0 1
65054: NOT
65055: IFFALSE 65059
// exit ;
65057: GO 65082
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
65059: LD_ADDR_VAR 0 2
65063: PUSH
65064: LD_VAR 0 1
65068: PPUSH
65069: CALL_OW 254
65073: PUSH
65074: LD_INT 3
65076: PLUS
65077: PUSH
65078: LD_INT 6
65080: MOD
65081: ST_TO_ADDR
// end ;
65082: LD_VAR 0 2
65086: RET
// export function ReverseArray ( array ) ; var i ; begin
65087: LD_INT 0
65089: PPUSH
65090: PPUSH
// if not array then
65091: LD_VAR 0 1
65095: NOT
65096: IFFALSE 65100
// exit ;
65098: GO 65155
// result := [ ] ;
65100: LD_ADDR_VAR 0 2
65104: PUSH
65105: EMPTY
65106: ST_TO_ADDR
// for i := array downto 1 do
65107: LD_ADDR_VAR 0 3
65111: PUSH
65112: DOUBLE
65113: LD_VAR 0 1
65117: INC
65118: ST_TO_ADDR
65119: LD_INT 1
65121: PUSH
65122: FOR_DOWNTO
65123: IFFALSE 65153
// result := Join ( result , array [ i ] ) ;
65125: LD_ADDR_VAR 0 2
65129: PUSH
65130: LD_VAR 0 2
65134: PPUSH
65135: LD_VAR 0 1
65139: PUSH
65140: LD_VAR 0 3
65144: ARRAY
65145: PPUSH
65146: CALL 69799 0 2
65150: ST_TO_ADDR
65151: GO 65122
65153: POP
65154: POP
// end ;
65155: LD_VAR 0 2
65159: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
65160: LD_INT 0
65162: PPUSH
65163: PPUSH
65164: PPUSH
65165: PPUSH
65166: PPUSH
65167: PPUSH
// if not unit or not hexes then
65168: LD_VAR 0 1
65172: NOT
65173: PUSH
65174: LD_VAR 0 2
65178: NOT
65179: OR
65180: IFFALSE 65184
// exit ;
65182: GO 65307
// dist := 9999 ;
65184: LD_ADDR_VAR 0 5
65188: PUSH
65189: LD_INT 9999
65191: ST_TO_ADDR
// for i = 1 to hexes do
65192: LD_ADDR_VAR 0 4
65196: PUSH
65197: DOUBLE
65198: LD_INT 1
65200: DEC
65201: ST_TO_ADDR
65202: LD_VAR 0 2
65206: PUSH
65207: FOR_TO
65208: IFFALSE 65295
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
65210: LD_ADDR_VAR 0 6
65214: PUSH
65215: LD_VAR 0 1
65219: PPUSH
65220: LD_VAR 0 2
65224: PUSH
65225: LD_VAR 0 4
65229: ARRAY
65230: PUSH
65231: LD_INT 1
65233: ARRAY
65234: PPUSH
65235: LD_VAR 0 2
65239: PUSH
65240: LD_VAR 0 4
65244: ARRAY
65245: PUSH
65246: LD_INT 2
65248: ARRAY
65249: PPUSH
65250: CALL_OW 297
65254: ST_TO_ADDR
// if tdist < dist then
65255: LD_VAR 0 6
65259: PUSH
65260: LD_VAR 0 5
65264: LESS
65265: IFFALSE 65293
// begin hex := hexes [ i ] ;
65267: LD_ADDR_VAR 0 8
65271: PUSH
65272: LD_VAR 0 2
65276: PUSH
65277: LD_VAR 0 4
65281: ARRAY
65282: ST_TO_ADDR
// dist := tdist ;
65283: LD_ADDR_VAR 0 5
65287: PUSH
65288: LD_VAR 0 6
65292: ST_TO_ADDR
// end ; end ;
65293: GO 65207
65295: POP
65296: POP
// result := hex ;
65297: LD_ADDR_VAR 0 3
65301: PUSH
65302: LD_VAR 0 8
65306: ST_TO_ADDR
// end ;
65307: LD_VAR 0 3
65311: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
65312: LD_INT 0
65314: PPUSH
65315: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
65316: LD_VAR 0 1
65320: NOT
65321: PUSH
65322: LD_VAR 0 1
65326: PUSH
65327: LD_INT 21
65329: PUSH
65330: LD_INT 2
65332: PUSH
65333: EMPTY
65334: LIST
65335: LIST
65336: PUSH
65337: LD_INT 23
65339: PUSH
65340: LD_INT 2
65342: PUSH
65343: EMPTY
65344: LIST
65345: LIST
65346: PUSH
65347: EMPTY
65348: LIST
65349: LIST
65350: PPUSH
65351: CALL_OW 69
65355: IN
65356: NOT
65357: OR
65358: IFFALSE 65362
// exit ;
65360: GO 65409
// for i = 1 to 3 do
65362: LD_ADDR_VAR 0 3
65366: PUSH
65367: DOUBLE
65368: LD_INT 1
65370: DEC
65371: ST_TO_ADDR
65372: LD_INT 3
65374: PUSH
65375: FOR_TO
65376: IFFALSE 65407
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
65378: LD_VAR 0 1
65382: PPUSH
65383: CALL_OW 250
65387: PPUSH
65388: LD_VAR 0 1
65392: PPUSH
65393: CALL_OW 251
65397: PPUSH
65398: LD_INT 1
65400: PPUSH
65401: CALL_OW 453
65405: GO 65375
65407: POP
65408: POP
// end ;
65409: LD_VAR 0 2
65413: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
65414: LD_INT 0
65416: PPUSH
65417: PPUSH
65418: PPUSH
65419: PPUSH
65420: PPUSH
65421: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
65422: LD_VAR 0 1
65426: NOT
65427: PUSH
65428: LD_VAR 0 2
65432: NOT
65433: OR
65434: PUSH
65435: LD_VAR 0 1
65439: PPUSH
65440: CALL_OW 314
65444: OR
65445: IFFALSE 65449
// exit ;
65447: GO 65916
// if GetLives ( i ) < 250 then
65449: LD_VAR 0 4
65453: PPUSH
65454: CALL_OW 256
65458: PUSH
65459: LD_INT 250
65461: LESS
65462: IFFALSE 65475
// begin ComAutodestruct ( i ) ;
65464: LD_VAR 0 4
65468: PPUSH
65469: CALL 65312 0 1
// exit ;
65473: GO 65916
// end ; x := GetX ( enemy_unit ) ;
65475: LD_ADDR_VAR 0 7
65479: PUSH
65480: LD_VAR 0 2
65484: PPUSH
65485: CALL_OW 250
65489: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
65490: LD_ADDR_VAR 0 8
65494: PUSH
65495: LD_VAR 0 2
65499: PPUSH
65500: CALL_OW 251
65504: ST_TO_ADDR
// if not x or not y then
65505: LD_VAR 0 7
65509: NOT
65510: PUSH
65511: LD_VAR 0 8
65515: NOT
65516: OR
65517: IFFALSE 65521
// exit ;
65519: GO 65916
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
65521: LD_ADDR_VAR 0 6
65525: PUSH
65526: LD_VAR 0 7
65530: PPUSH
65531: LD_INT 0
65533: PPUSH
65534: LD_INT 4
65536: PPUSH
65537: CALL_OW 272
65541: PUSH
65542: LD_VAR 0 8
65546: PPUSH
65547: LD_INT 0
65549: PPUSH
65550: LD_INT 4
65552: PPUSH
65553: CALL_OW 273
65557: PUSH
65558: EMPTY
65559: LIST
65560: LIST
65561: PUSH
65562: LD_VAR 0 7
65566: PPUSH
65567: LD_INT 1
65569: PPUSH
65570: LD_INT 4
65572: PPUSH
65573: CALL_OW 272
65577: PUSH
65578: LD_VAR 0 8
65582: PPUSH
65583: LD_INT 1
65585: PPUSH
65586: LD_INT 4
65588: PPUSH
65589: CALL_OW 273
65593: PUSH
65594: EMPTY
65595: LIST
65596: LIST
65597: PUSH
65598: LD_VAR 0 7
65602: PPUSH
65603: LD_INT 2
65605: PPUSH
65606: LD_INT 4
65608: PPUSH
65609: CALL_OW 272
65613: PUSH
65614: LD_VAR 0 8
65618: PPUSH
65619: LD_INT 2
65621: PPUSH
65622: LD_INT 4
65624: PPUSH
65625: CALL_OW 273
65629: PUSH
65630: EMPTY
65631: LIST
65632: LIST
65633: PUSH
65634: LD_VAR 0 7
65638: PPUSH
65639: LD_INT 3
65641: PPUSH
65642: LD_INT 4
65644: PPUSH
65645: CALL_OW 272
65649: PUSH
65650: LD_VAR 0 8
65654: PPUSH
65655: LD_INT 3
65657: PPUSH
65658: LD_INT 4
65660: PPUSH
65661: CALL_OW 273
65665: PUSH
65666: EMPTY
65667: LIST
65668: LIST
65669: PUSH
65670: LD_VAR 0 7
65674: PPUSH
65675: LD_INT 4
65677: PPUSH
65678: LD_INT 4
65680: PPUSH
65681: CALL_OW 272
65685: PUSH
65686: LD_VAR 0 8
65690: PPUSH
65691: LD_INT 4
65693: PPUSH
65694: LD_INT 4
65696: PPUSH
65697: CALL_OW 273
65701: PUSH
65702: EMPTY
65703: LIST
65704: LIST
65705: PUSH
65706: LD_VAR 0 7
65710: PPUSH
65711: LD_INT 5
65713: PPUSH
65714: LD_INT 4
65716: PPUSH
65717: CALL_OW 272
65721: PUSH
65722: LD_VAR 0 8
65726: PPUSH
65727: LD_INT 5
65729: PPUSH
65730: LD_INT 4
65732: PPUSH
65733: CALL_OW 273
65737: PUSH
65738: EMPTY
65739: LIST
65740: LIST
65741: PUSH
65742: EMPTY
65743: LIST
65744: LIST
65745: LIST
65746: LIST
65747: LIST
65748: LIST
65749: ST_TO_ADDR
// for i = tmp downto 1 do
65750: LD_ADDR_VAR 0 4
65754: PUSH
65755: DOUBLE
65756: LD_VAR 0 6
65760: INC
65761: ST_TO_ADDR
65762: LD_INT 1
65764: PUSH
65765: FOR_DOWNTO
65766: IFFALSE 65867
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
65768: LD_VAR 0 6
65772: PUSH
65773: LD_VAR 0 4
65777: ARRAY
65778: PUSH
65779: LD_INT 1
65781: ARRAY
65782: PPUSH
65783: LD_VAR 0 6
65787: PUSH
65788: LD_VAR 0 4
65792: ARRAY
65793: PUSH
65794: LD_INT 2
65796: ARRAY
65797: PPUSH
65798: CALL_OW 488
65802: NOT
65803: PUSH
65804: LD_VAR 0 6
65808: PUSH
65809: LD_VAR 0 4
65813: ARRAY
65814: PUSH
65815: LD_INT 1
65817: ARRAY
65818: PPUSH
65819: LD_VAR 0 6
65823: PUSH
65824: LD_VAR 0 4
65828: ARRAY
65829: PUSH
65830: LD_INT 2
65832: ARRAY
65833: PPUSH
65834: CALL_OW 428
65838: PUSH
65839: LD_INT 0
65841: NONEQUAL
65842: OR
65843: IFFALSE 65865
// tmp := Delete ( tmp , i ) ;
65845: LD_ADDR_VAR 0 6
65849: PUSH
65850: LD_VAR 0 6
65854: PPUSH
65855: LD_VAR 0 4
65859: PPUSH
65860: CALL_OW 3
65864: ST_TO_ADDR
65865: GO 65765
65867: POP
65868: POP
// j := GetClosestHex ( unit , tmp ) ;
65869: LD_ADDR_VAR 0 5
65873: PUSH
65874: LD_VAR 0 1
65878: PPUSH
65879: LD_VAR 0 6
65883: PPUSH
65884: CALL 65160 0 2
65888: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
65889: LD_VAR 0 1
65893: PPUSH
65894: LD_VAR 0 5
65898: PUSH
65899: LD_INT 1
65901: ARRAY
65902: PPUSH
65903: LD_VAR 0 5
65907: PUSH
65908: LD_INT 2
65910: ARRAY
65911: PPUSH
65912: CALL_OW 111
// end ;
65916: LD_VAR 0 3
65920: RET
// export function PrepareApemanSoldier ( ) ; begin
65921: LD_INT 0
65923: PPUSH
// uc_nation := 0 ;
65924: LD_ADDR_OWVAR 21
65928: PUSH
65929: LD_INT 0
65931: ST_TO_ADDR
// hc_sex := sex_male ;
65932: LD_ADDR_OWVAR 27
65936: PUSH
65937: LD_INT 1
65939: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
65940: LD_ADDR_OWVAR 28
65944: PUSH
65945: LD_INT 15
65947: ST_TO_ADDR
// hc_gallery :=  ;
65948: LD_ADDR_OWVAR 33
65952: PUSH
65953: LD_STRING 
65955: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
65956: LD_ADDR_OWVAR 31
65960: PUSH
65961: LD_INT 0
65963: PPUSH
65964: LD_INT 3
65966: PPUSH
65967: CALL_OW 12
65971: PUSH
65972: LD_INT 0
65974: PPUSH
65975: LD_INT 3
65977: PPUSH
65978: CALL_OW 12
65982: PUSH
65983: LD_INT 0
65985: PUSH
65986: LD_INT 0
65988: PUSH
65989: EMPTY
65990: LIST
65991: LIST
65992: LIST
65993: LIST
65994: ST_TO_ADDR
// end ;
65995: LD_VAR 0 1
65999: RET
// export function PrepareApemanEngineer ( ) ; begin
66000: LD_INT 0
66002: PPUSH
// uc_nation := 0 ;
66003: LD_ADDR_OWVAR 21
66007: PUSH
66008: LD_INT 0
66010: ST_TO_ADDR
// hc_sex := sex_male ;
66011: LD_ADDR_OWVAR 27
66015: PUSH
66016: LD_INT 1
66018: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
66019: LD_ADDR_OWVAR 28
66023: PUSH
66024: LD_INT 16
66026: ST_TO_ADDR
// hc_gallery :=  ;
66027: LD_ADDR_OWVAR 33
66031: PUSH
66032: LD_STRING 
66034: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
66035: LD_ADDR_OWVAR 31
66039: PUSH
66040: LD_INT 0
66042: PPUSH
66043: LD_INT 3
66045: PPUSH
66046: CALL_OW 12
66050: PUSH
66051: LD_INT 0
66053: PPUSH
66054: LD_INT 3
66056: PPUSH
66057: CALL_OW 12
66061: PUSH
66062: LD_INT 0
66064: PUSH
66065: LD_INT 0
66067: PUSH
66068: EMPTY
66069: LIST
66070: LIST
66071: LIST
66072: LIST
66073: ST_TO_ADDR
// end ;
66074: LD_VAR 0 1
66078: RET
// export function PrepareApeman ( agressivity ) ; begin
66079: LD_INT 0
66081: PPUSH
// uc_side := 0 ;
66082: LD_ADDR_OWVAR 20
66086: PUSH
66087: LD_INT 0
66089: ST_TO_ADDR
// uc_nation := 0 ;
66090: LD_ADDR_OWVAR 21
66094: PUSH
66095: LD_INT 0
66097: ST_TO_ADDR
// hc_sex := sex_male ;
66098: LD_ADDR_OWVAR 27
66102: PUSH
66103: LD_INT 1
66105: ST_TO_ADDR
// hc_class := class_apeman ;
66106: LD_ADDR_OWVAR 28
66110: PUSH
66111: LD_INT 12
66113: ST_TO_ADDR
// hc_gallery :=  ;
66114: LD_ADDR_OWVAR 33
66118: PUSH
66119: LD_STRING 
66121: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
66122: LD_ADDR_OWVAR 35
66126: PUSH
66127: LD_VAR 0 1
66131: NEG
66132: PPUSH
66133: LD_VAR 0 1
66137: PPUSH
66138: CALL_OW 12
66142: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
66143: LD_ADDR_OWVAR 31
66147: PUSH
66148: LD_INT 0
66150: PPUSH
66151: LD_INT 3
66153: PPUSH
66154: CALL_OW 12
66158: PUSH
66159: LD_INT 0
66161: PPUSH
66162: LD_INT 3
66164: PPUSH
66165: CALL_OW 12
66169: PUSH
66170: LD_INT 0
66172: PUSH
66173: LD_INT 0
66175: PUSH
66176: EMPTY
66177: LIST
66178: LIST
66179: LIST
66180: LIST
66181: ST_TO_ADDR
// end ;
66182: LD_VAR 0 2
66186: RET
// export function PrepareTiger ( agressivity ) ; begin
66187: LD_INT 0
66189: PPUSH
// uc_side := 0 ;
66190: LD_ADDR_OWVAR 20
66194: PUSH
66195: LD_INT 0
66197: ST_TO_ADDR
// uc_nation := 0 ;
66198: LD_ADDR_OWVAR 21
66202: PUSH
66203: LD_INT 0
66205: ST_TO_ADDR
// hc_class := class_tiger ;
66206: LD_ADDR_OWVAR 28
66210: PUSH
66211: LD_INT 14
66213: ST_TO_ADDR
// hc_gallery :=  ;
66214: LD_ADDR_OWVAR 33
66218: PUSH
66219: LD_STRING 
66221: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
66222: LD_ADDR_OWVAR 35
66226: PUSH
66227: LD_VAR 0 1
66231: NEG
66232: PPUSH
66233: LD_VAR 0 1
66237: PPUSH
66238: CALL_OW 12
66242: ST_TO_ADDR
// end ;
66243: LD_VAR 0 2
66247: RET
// export function PrepareEnchidna ( ) ; begin
66248: LD_INT 0
66250: PPUSH
// uc_side := 0 ;
66251: LD_ADDR_OWVAR 20
66255: PUSH
66256: LD_INT 0
66258: ST_TO_ADDR
// uc_nation := 0 ;
66259: LD_ADDR_OWVAR 21
66263: PUSH
66264: LD_INT 0
66266: ST_TO_ADDR
// hc_class := class_baggie ;
66267: LD_ADDR_OWVAR 28
66271: PUSH
66272: LD_INT 13
66274: ST_TO_ADDR
// hc_gallery :=  ;
66275: LD_ADDR_OWVAR 33
66279: PUSH
66280: LD_STRING 
66282: ST_TO_ADDR
// end ;
66283: LD_VAR 0 1
66287: RET
// export function PrepareFrog ( ) ; begin
66288: LD_INT 0
66290: PPUSH
// uc_side := 0 ;
66291: LD_ADDR_OWVAR 20
66295: PUSH
66296: LD_INT 0
66298: ST_TO_ADDR
// uc_nation := 0 ;
66299: LD_ADDR_OWVAR 21
66303: PUSH
66304: LD_INT 0
66306: ST_TO_ADDR
// hc_class := class_frog ;
66307: LD_ADDR_OWVAR 28
66311: PUSH
66312: LD_INT 19
66314: ST_TO_ADDR
// hc_gallery :=  ;
66315: LD_ADDR_OWVAR 33
66319: PUSH
66320: LD_STRING 
66322: ST_TO_ADDR
// end ;
66323: LD_VAR 0 1
66327: RET
// export function PrepareFish ( ) ; begin
66328: LD_INT 0
66330: PPUSH
// uc_side := 0 ;
66331: LD_ADDR_OWVAR 20
66335: PUSH
66336: LD_INT 0
66338: ST_TO_ADDR
// uc_nation := 0 ;
66339: LD_ADDR_OWVAR 21
66343: PUSH
66344: LD_INT 0
66346: ST_TO_ADDR
// hc_class := class_fish ;
66347: LD_ADDR_OWVAR 28
66351: PUSH
66352: LD_INT 20
66354: ST_TO_ADDR
// hc_gallery :=  ;
66355: LD_ADDR_OWVAR 33
66359: PUSH
66360: LD_STRING 
66362: ST_TO_ADDR
// end ;
66363: LD_VAR 0 1
66367: RET
// export function PrepareBird ( ) ; begin
66368: LD_INT 0
66370: PPUSH
// uc_side := 0 ;
66371: LD_ADDR_OWVAR 20
66375: PUSH
66376: LD_INT 0
66378: ST_TO_ADDR
// uc_nation := 0 ;
66379: LD_ADDR_OWVAR 21
66383: PUSH
66384: LD_INT 0
66386: ST_TO_ADDR
// hc_class := class_phororhacos ;
66387: LD_ADDR_OWVAR 28
66391: PUSH
66392: LD_INT 18
66394: ST_TO_ADDR
// hc_gallery :=  ;
66395: LD_ADDR_OWVAR 33
66399: PUSH
66400: LD_STRING 
66402: ST_TO_ADDR
// end ;
66403: LD_VAR 0 1
66407: RET
// export function PrepareHorse ( ) ; begin
66408: LD_INT 0
66410: PPUSH
// uc_side := 0 ;
66411: LD_ADDR_OWVAR 20
66415: PUSH
66416: LD_INT 0
66418: ST_TO_ADDR
// uc_nation := 0 ;
66419: LD_ADDR_OWVAR 21
66423: PUSH
66424: LD_INT 0
66426: ST_TO_ADDR
// hc_class := class_horse ;
66427: LD_ADDR_OWVAR 28
66431: PUSH
66432: LD_INT 21
66434: ST_TO_ADDR
// hc_gallery :=  ;
66435: LD_ADDR_OWVAR 33
66439: PUSH
66440: LD_STRING 
66442: ST_TO_ADDR
// end ;
66443: LD_VAR 0 1
66447: RET
// export function PrepareMastodont ( ) ; begin
66448: LD_INT 0
66450: PPUSH
// uc_side := 0 ;
66451: LD_ADDR_OWVAR 20
66455: PUSH
66456: LD_INT 0
66458: ST_TO_ADDR
// uc_nation := 0 ;
66459: LD_ADDR_OWVAR 21
66463: PUSH
66464: LD_INT 0
66466: ST_TO_ADDR
// vc_chassis := class_mastodont ;
66467: LD_ADDR_OWVAR 37
66471: PUSH
66472: LD_INT 31
66474: ST_TO_ADDR
// vc_control := control_rider ;
66475: LD_ADDR_OWVAR 38
66479: PUSH
66480: LD_INT 4
66482: ST_TO_ADDR
// end ;
66483: LD_VAR 0 1
66487: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
66488: LD_INT 0
66490: PPUSH
66491: PPUSH
66492: PPUSH
// uc_side = 0 ;
66493: LD_ADDR_OWVAR 20
66497: PUSH
66498: LD_INT 0
66500: ST_TO_ADDR
// uc_nation = 0 ;
66501: LD_ADDR_OWVAR 21
66505: PUSH
66506: LD_INT 0
66508: ST_TO_ADDR
// InitHc_All ( ) ;
66509: CALL_OW 584
// InitVc ;
66513: CALL_OW 20
// if mastodonts then
66517: LD_VAR 0 6
66521: IFFALSE 66588
// for i = 1 to mastodonts do
66523: LD_ADDR_VAR 0 11
66527: PUSH
66528: DOUBLE
66529: LD_INT 1
66531: DEC
66532: ST_TO_ADDR
66533: LD_VAR 0 6
66537: PUSH
66538: FOR_TO
66539: IFFALSE 66586
// begin vc_chassis := 31 ;
66541: LD_ADDR_OWVAR 37
66545: PUSH
66546: LD_INT 31
66548: ST_TO_ADDR
// vc_control := control_rider ;
66549: LD_ADDR_OWVAR 38
66553: PUSH
66554: LD_INT 4
66556: ST_TO_ADDR
// animal := CreateVehicle ;
66557: LD_ADDR_VAR 0 12
66561: PUSH
66562: CALL_OW 45
66566: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66567: LD_VAR 0 12
66571: PPUSH
66572: LD_VAR 0 8
66576: PPUSH
66577: LD_INT 0
66579: PPUSH
66580: CALL 68716 0 3
// end ;
66584: GO 66538
66586: POP
66587: POP
// if horses then
66588: LD_VAR 0 5
66592: IFFALSE 66659
// for i = 1 to horses do
66594: LD_ADDR_VAR 0 11
66598: PUSH
66599: DOUBLE
66600: LD_INT 1
66602: DEC
66603: ST_TO_ADDR
66604: LD_VAR 0 5
66608: PUSH
66609: FOR_TO
66610: IFFALSE 66657
// begin hc_class := 21 ;
66612: LD_ADDR_OWVAR 28
66616: PUSH
66617: LD_INT 21
66619: ST_TO_ADDR
// hc_gallery :=  ;
66620: LD_ADDR_OWVAR 33
66624: PUSH
66625: LD_STRING 
66627: ST_TO_ADDR
// animal := CreateHuman ;
66628: LD_ADDR_VAR 0 12
66632: PUSH
66633: CALL_OW 44
66637: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66638: LD_VAR 0 12
66642: PPUSH
66643: LD_VAR 0 8
66647: PPUSH
66648: LD_INT 0
66650: PPUSH
66651: CALL 68716 0 3
// end ;
66655: GO 66609
66657: POP
66658: POP
// if birds then
66659: LD_VAR 0 1
66663: IFFALSE 66730
// for i = 1 to birds do
66665: LD_ADDR_VAR 0 11
66669: PUSH
66670: DOUBLE
66671: LD_INT 1
66673: DEC
66674: ST_TO_ADDR
66675: LD_VAR 0 1
66679: PUSH
66680: FOR_TO
66681: IFFALSE 66728
// begin hc_class = 18 ;
66683: LD_ADDR_OWVAR 28
66687: PUSH
66688: LD_INT 18
66690: ST_TO_ADDR
// hc_gallery =  ;
66691: LD_ADDR_OWVAR 33
66695: PUSH
66696: LD_STRING 
66698: ST_TO_ADDR
// animal := CreateHuman ;
66699: LD_ADDR_VAR 0 12
66703: PUSH
66704: CALL_OW 44
66708: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66709: LD_VAR 0 12
66713: PPUSH
66714: LD_VAR 0 8
66718: PPUSH
66719: LD_INT 0
66721: PPUSH
66722: CALL 68716 0 3
// end ;
66726: GO 66680
66728: POP
66729: POP
// if tigers then
66730: LD_VAR 0 2
66734: IFFALSE 66818
// for i = 1 to tigers do
66736: LD_ADDR_VAR 0 11
66740: PUSH
66741: DOUBLE
66742: LD_INT 1
66744: DEC
66745: ST_TO_ADDR
66746: LD_VAR 0 2
66750: PUSH
66751: FOR_TO
66752: IFFALSE 66816
// begin hc_class = class_tiger ;
66754: LD_ADDR_OWVAR 28
66758: PUSH
66759: LD_INT 14
66761: ST_TO_ADDR
// hc_gallery =  ;
66762: LD_ADDR_OWVAR 33
66766: PUSH
66767: LD_STRING 
66769: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
66770: LD_ADDR_OWVAR 35
66774: PUSH
66775: LD_INT 7
66777: NEG
66778: PPUSH
66779: LD_INT 7
66781: PPUSH
66782: CALL_OW 12
66786: ST_TO_ADDR
// animal := CreateHuman ;
66787: LD_ADDR_VAR 0 12
66791: PUSH
66792: CALL_OW 44
66796: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66797: LD_VAR 0 12
66801: PPUSH
66802: LD_VAR 0 8
66806: PPUSH
66807: LD_INT 0
66809: PPUSH
66810: CALL 68716 0 3
// end ;
66814: GO 66751
66816: POP
66817: POP
// if apemans then
66818: LD_VAR 0 3
66822: IFFALSE 66945
// for i = 1 to apemans do
66824: LD_ADDR_VAR 0 11
66828: PUSH
66829: DOUBLE
66830: LD_INT 1
66832: DEC
66833: ST_TO_ADDR
66834: LD_VAR 0 3
66838: PUSH
66839: FOR_TO
66840: IFFALSE 66943
// begin hc_class = class_apeman ;
66842: LD_ADDR_OWVAR 28
66846: PUSH
66847: LD_INT 12
66849: ST_TO_ADDR
// hc_gallery =  ;
66850: LD_ADDR_OWVAR 33
66854: PUSH
66855: LD_STRING 
66857: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
66858: LD_ADDR_OWVAR 35
66862: PUSH
66863: LD_INT 2
66865: NEG
66866: PPUSH
66867: LD_INT 2
66869: PPUSH
66870: CALL_OW 12
66874: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
66875: LD_ADDR_OWVAR 31
66879: PUSH
66880: LD_INT 1
66882: PPUSH
66883: LD_INT 3
66885: PPUSH
66886: CALL_OW 12
66890: PUSH
66891: LD_INT 1
66893: PPUSH
66894: LD_INT 3
66896: PPUSH
66897: CALL_OW 12
66901: PUSH
66902: LD_INT 0
66904: PUSH
66905: LD_INT 0
66907: PUSH
66908: EMPTY
66909: LIST
66910: LIST
66911: LIST
66912: LIST
66913: ST_TO_ADDR
// animal := CreateHuman ;
66914: LD_ADDR_VAR 0 12
66918: PUSH
66919: CALL_OW 44
66923: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66924: LD_VAR 0 12
66928: PPUSH
66929: LD_VAR 0 8
66933: PPUSH
66934: LD_INT 0
66936: PPUSH
66937: CALL 68716 0 3
// end ;
66941: GO 66839
66943: POP
66944: POP
// if enchidnas then
66945: LD_VAR 0 4
66949: IFFALSE 67016
// for i = 1 to enchidnas do
66951: LD_ADDR_VAR 0 11
66955: PUSH
66956: DOUBLE
66957: LD_INT 1
66959: DEC
66960: ST_TO_ADDR
66961: LD_VAR 0 4
66965: PUSH
66966: FOR_TO
66967: IFFALSE 67014
// begin hc_class = 13 ;
66969: LD_ADDR_OWVAR 28
66973: PUSH
66974: LD_INT 13
66976: ST_TO_ADDR
// hc_gallery =  ;
66977: LD_ADDR_OWVAR 33
66981: PUSH
66982: LD_STRING 
66984: ST_TO_ADDR
// animal := CreateHuman ;
66985: LD_ADDR_VAR 0 12
66989: PUSH
66990: CALL_OW 44
66994: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66995: LD_VAR 0 12
66999: PPUSH
67000: LD_VAR 0 8
67004: PPUSH
67005: LD_INT 0
67007: PPUSH
67008: CALL 68716 0 3
// end ;
67012: GO 66966
67014: POP
67015: POP
// if fishes then
67016: LD_VAR 0 7
67020: IFFALSE 67087
// for i = 1 to fishes do
67022: LD_ADDR_VAR 0 11
67026: PUSH
67027: DOUBLE
67028: LD_INT 1
67030: DEC
67031: ST_TO_ADDR
67032: LD_VAR 0 7
67036: PUSH
67037: FOR_TO
67038: IFFALSE 67085
// begin hc_class = 20 ;
67040: LD_ADDR_OWVAR 28
67044: PUSH
67045: LD_INT 20
67047: ST_TO_ADDR
// hc_gallery =  ;
67048: LD_ADDR_OWVAR 33
67052: PUSH
67053: LD_STRING 
67055: ST_TO_ADDR
// animal := CreateHuman ;
67056: LD_ADDR_VAR 0 12
67060: PUSH
67061: CALL_OW 44
67065: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
67066: LD_VAR 0 12
67070: PPUSH
67071: LD_VAR 0 9
67075: PPUSH
67076: LD_INT 0
67078: PPUSH
67079: CALL 68716 0 3
// end ;
67083: GO 67037
67085: POP
67086: POP
// end ;
67087: LD_VAR 0 10
67091: RET
// export function WantHeal ( sci , unit ) ; begin
67092: LD_INT 0
67094: PPUSH
// if GetTaskList ( sci ) > 0 then
67095: LD_VAR 0 1
67099: PPUSH
67100: CALL_OW 437
67104: PUSH
67105: LD_INT 0
67107: GREATER
67108: IFFALSE 67178
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
67110: LD_VAR 0 1
67114: PPUSH
67115: CALL_OW 437
67119: PUSH
67120: LD_INT 1
67122: ARRAY
67123: PUSH
67124: LD_INT 1
67126: ARRAY
67127: PUSH
67128: LD_STRING l
67130: EQUAL
67131: PUSH
67132: LD_VAR 0 1
67136: PPUSH
67137: CALL_OW 437
67141: PUSH
67142: LD_INT 1
67144: ARRAY
67145: PUSH
67146: LD_INT 4
67148: ARRAY
67149: PUSH
67150: LD_VAR 0 2
67154: EQUAL
67155: AND
67156: IFFALSE 67168
// result := true else
67158: LD_ADDR_VAR 0 3
67162: PUSH
67163: LD_INT 1
67165: ST_TO_ADDR
67166: GO 67176
// result := false ;
67168: LD_ADDR_VAR 0 3
67172: PUSH
67173: LD_INT 0
67175: ST_TO_ADDR
// end else
67176: GO 67186
// result := false ;
67178: LD_ADDR_VAR 0 3
67182: PUSH
67183: LD_INT 0
67185: ST_TO_ADDR
// end ;
67186: LD_VAR 0 3
67190: RET
// export function HealTarget ( sci ) ; begin
67191: LD_INT 0
67193: PPUSH
// if not sci then
67194: LD_VAR 0 1
67198: NOT
67199: IFFALSE 67203
// exit ;
67201: GO 67268
// result := 0 ;
67203: LD_ADDR_VAR 0 2
67207: PUSH
67208: LD_INT 0
67210: ST_TO_ADDR
// if GetTaskList ( sci ) then
67211: LD_VAR 0 1
67215: PPUSH
67216: CALL_OW 437
67220: IFFALSE 67268
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
67222: LD_VAR 0 1
67226: PPUSH
67227: CALL_OW 437
67231: PUSH
67232: LD_INT 1
67234: ARRAY
67235: PUSH
67236: LD_INT 1
67238: ARRAY
67239: PUSH
67240: LD_STRING l
67242: EQUAL
67243: IFFALSE 67268
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
67245: LD_ADDR_VAR 0 2
67249: PUSH
67250: LD_VAR 0 1
67254: PPUSH
67255: CALL_OW 437
67259: PUSH
67260: LD_INT 1
67262: ARRAY
67263: PUSH
67264: LD_INT 4
67266: ARRAY
67267: ST_TO_ADDR
// end ;
67268: LD_VAR 0 2
67272: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
67273: LD_INT 0
67275: PPUSH
67276: PPUSH
67277: PPUSH
67278: PPUSH
// if not base_units then
67279: LD_VAR 0 1
67283: NOT
67284: IFFALSE 67288
// exit ;
67286: GO 67375
// result := false ;
67288: LD_ADDR_VAR 0 2
67292: PUSH
67293: LD_INT 0
67295: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
67296: LD_ADDR_VAR 0 5
67300: PUSH
67301: LD_VAR 0 1
67305: PPUSH
67306: LD_INT 21
67308: PUSH
67309: LD_INT 3
67311: PUSH
67312: EMPTY
67313: LIST
67314: LIST
67315: PPUSH
67316: CALL_OW 72
67320: ST_TO_ADDR
// if not tmp then
67321: LD_VAR 0 5
67325: NOT
67326: IFFALSE 67330
// exit ;
67328: GO 67375
// for i in tmp do
67330: LD_ADDR_VAR 0 3
67334: PUSH
67335: LD_VAR 0 5
67339: PUSH
67340: FOR_IN
67341: IFFALSE 67373
// begin result := EnemyInRange ( i , 22 ) ;
67343: LD_ADDR_VAR 0 2
67347: PUSH
67348: LD_VAR 0 3
67352: PPUSH
67353: LD_INT 22
67355: PPUSH
67356: CALL 64962 0 2
67360: ST_TO_ADDR
// if result then
67361: LD_VAR 0 2
67365: IFFALSE 67371
// exit ;
67367: POP
67368: POP
67369: GO 67375
// end ;
67371: GO 67340
67373: POP
67374: POP
// end ;
67375: LD_VAR 0 2
67379: RET
// export function FilterByTag ( units , tag ) ; begin
67380: LD_INT 0
67382: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
67383: LD_ADDR_VAR 0 3
67387: PUSH
67388: LD_VAR 0 1
67392: PPUSH
67393: LD_INT 120
67395: PUSH
67396: LD_VAR 0 2
67400: PUSH
67401: EMPTY
67402: LIST
67403: LIST
67404: PPUSH
67405: CALL_OW 72
67409: ST_TO_ADDR
// end ;
67410: LD_VAR 0 3
67414: RET
// export function IsDriver ( un ) ; begin
67415: LD_INT 0
67417: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
67418: LD_ADDR_VAR 0 2
67422: PUSH
67423: LD_VAR 0 1
67427: PUSH
67428: LD_INT 55
67430: PUSH
67431: EMPTY
67432: LIST
67433: PPUSH
67434: CALL_OW 69
67438: IN
67439: ST_TO_ADDR
// end ;
67440: LD_VAR 0 2
67444: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
67445: LD_INT 0
67447: PPUSH
67448: PPUSH
// list := [ ] ;
67449: LD_ADDR_VAR 0 5
67453: PUSH
67454: EMPTY
67455: ST_TO_ADDR
// case d of 0 :
67456: LD_VAR 0 3
67460: PUSH
67461: LD_INT 0
67463: DOUBLE
67464: EQUAL
67465: IFTRUE 67469
67467: GO 67602
67469: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
67470: LD_ADDR_VAR 0 5
67474: PUSH
67475: LD_VAR 0 1
67479: PUSH
67480: LD_INT 4
67482: MINUS
67483: PUSH
67484: LD_VAR 0 2
67488: PUSH
67489: LD_INT 4
67491: MINUS
67492: PUSH
67493: LD_INT 2
67495: PUSH
67496: EMPTY
67497: LIST
67498: LIST
67499: LIST
67500: PUSH
67501: LD_VAR 0 1
67505: PUSH
67506: LD_INT 3
67508: MINUS
67509: PUSH
67510: LD_VAR 0 2
67514: PUSH
67515: LD_INT 1
67517: PUSH
67518: EMPTY
67519: LIST
67520: LIST
67521: LIST
67522: PUSH
67523: LD_VAR 0 1
67527: PUSH
67528: LD_INT 4
67530: PLUS
67531: PUSH
67532: LD_VAR 0 2
67536: PUSH
67537: LD_INT 4
67539: PUSH
67540: EMPTY
67541: LIST
67542: LIST
67543: LIST
67544: PUSH
67545: LD_VAR 0 1
67549: PUSH
67550: LD_INT 3
67552: PLUS
67553: PUSH
67554: LD_VAR 0 2
67558: PUSH
67559: LD_INT 3
67561: PLUS
67562: PUSH
67563: LD_INT 5
67565: PUSH
67566: EMPTY
67567: LIST
67568: LIST
67569: LIST
67570: PUSH
67571: LD_VAR 0 1
67575: PUSH
67576: LD_VAR 0 2
67580: PUSH
67581: LD_INT 4
67583: PLUS
67584: PUSH
67585: LD_INT 0
67587: PUSH
67588: EMPTY
67589: LIST
67590: LIST
67591: LIST
67592: PUSH
67593: EMPTY
67594: LIST
67595: LIST
67596: LIST
67597: LIST
67598: LIST
67599: ST_TO_ADDR
// end ; 1 :
67600: GO 68300
67602: LD_INT 1
67604: DOUBLE
67605: EQUAL
67606: IFTRUE 67610
67608: GO 67743
67610: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
67611: LD_ADDR_VAR 0 5
67615: PUSH
67616: LD_VAR 0 1
67620: PUSH
67621: LD_VAR 0 2
67625: PUSH
67626: LD_INT 4
67628: MINUS
67629: PUSH
67630: LD_INT 3
67632: PUSH
67633: EMPTY
67634: LIST
67635: LIST
67636: LIST
67637: PUSH
67638: LD_VAR 0 1
67642: PUSH
67643: LD_INT 3
67645: MINUS
67646: PUSH
67647: LD_VAR 0 2
67651: PUSH
67652: LD_INT 3
67654: MINUS
67655: PUSH
67656: LD_INT 2
67658: PUSH
67659: EMPTY
67660: LIST
67661: LIST
67662: LIST
67663: PUSH
67664: LD_VAR 0 1
67668: PUSH
67669: LD_INT 4
67671: MINUS
67672: PUSH
67673: LD_VAR 0 2
67677: PUSH
67678: LD_INT 1
67680: PUSH
67681: EMPTY
67682: LIST
67683: LIST
67684: LIST
67685: PUSH
67686: LD_VAR 0 1
67690: PUSH
67691: LD_VAR 0 2
67695: PUSH
67696: LD_INT 3
67698: PLUS
67699: PUSH
67700: LD_INT 0
67702: PUSH
67703: EMPTY
67704: LIST
67705: LIST
67706: LIST
67707: PUSH
67708: LD_VAR 0 1
67712: PUSH
67713: LD_INT 4
67715: PLUS
67716: PUSH
67717: LD_VAR 0 2
67721: PUSH
67722: LD_INT 4
67724: PLUS
67725: PUSH
67726: LD_INT 5
67728: PUSH
67729: EMPTY
67730: LIST
67731: LIST
67732: LIST
67733: PUSH
67734: EMPTY
67735: LIST
67736: LIST
67737: LIST
67738: LIST
67739: LIST
67740: ST_TO_ADDR
// end ; 2 :
67741: GO 68300
67743: LD_INT 2
67745: DOUBLE
67746: EQUAL
67747: IFTRUE 67751
67749: GO 67880
67751: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
67752: LD_ADDR_VAR 0 5
67756: PUSH
67757: LD_VAR 0 1
67761: PUSH
67762: LD_VAR 0 2
67766: PUSH
67767: LD_INT 3
67769: MINUS
67770: PUSH
67771: LD_INT 3
67773: PUSH
67774: EMPTY
67775: LIST
67776: LIST
67777: LIST
67778: PUSH
67779: LD_VAR 0 1
67783: PUSH
67784: LD_INT 4
67786: PLUS
67787: PUSH
67788: LD_VAR 0 2
67792: PUSH
67793: LD_INT 4
67795: PUSH
67796: EMPTY
67797: LIST
67798: LIST
67799: LIST
67800: PUSH
67801: LD_VAR 0 1
67805: PUSH
67806: LD_VAR 0 2
67810: PUSH
67811: LD_INT 4
67813: PLUS
67814: PUSH
67815: LD_INT 0
67817: PUSH
67818: EMPTY
67819: LIST
67820: LIST
67821: LIST
67822: PUSH
67823: LD_VAR 0 1
67827: PUSH
67828: LD_INT 3
67830: MINUS
67831: PUSH
67832: LD_VAR 0 2
67836: PUSH
67837: LD_INT 1
67839: PUSH
67840: EMPTY
67841: LIST
67842: LIST
67843: LIST
67844: PUSH
67845: LD_VAR 0 1
67849: PUSH
67850: LD_INT 4
67852: MINUS
67853: PUSH
67854: LD_VAR 0 2
67858: PUSH
67859: LD_INT 4
67861: MINUS
67862: PUSH
67863: LD_INT 2
67865: PUSH
67866: EMPTY
67867: LIST
67868: LIST
67869: LIST
67870: PUSH
67871: EMPTY
67872: LIST
67873: LIST
67874: LIST
67875: LIST
67876: LIST
67877: ST_TO_ADDR
// end ; 3 :
67878: GO 68300
67880: LD_INT 3
67882: DOUBLE
67883: EQUAL
67884: IFTRUE 67888
67886: GO 68021
67888: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
67889: LD_ADDR_VAR 0 5
67893: PUSH
67894: LD_VAR 0 1
67898: PUSH
67899: LD_INT 3
67901: PLUS
67902: PUSH
67903: LD_VAR 0 2
67907: PUSH
67908: LD_INT 4
67910: PUSH
67911: EMPTY
67912: LIST
67913: LIST
67914: LIST
67915: PUSH
67916: LD_VAR 0 1
67920: PUSH
67921: LD_INT 4
67923: PLUS
67924: PUSH
67925: LD_VAR 0 2
67929: PUSH
67930: LD_INT 4
67932: PLUS
67933: PUSH
67934: LD_INT 5
67936: PUSH
67937: EMPTY
67938: LIST
67939: LIST
67940: LIST
67941: PUSH
67942: LD_VAR 0 1
67946: PUSH
67947: LD_INT 4
67949: MINUS
67950: PUSH
67951: LD_VAR 0 2
67955: PUSH
67956: LD_INT 1
67958: PUSH
67959: EMPTY
67960: LIST
67961: LIST
67962: LIST
67963: PUSH
67964: LD_VAR 0 1
67968: PUSH
67969: LD_VAR 0 2
67973: PUSH
67974: LD_INT 4
67976: MINUS
67977: PUSH
67978: LD_INT 3
67980: PUSH
67981: EMPTY
67982: LIST
67983: LIST
67984: LIST
67985: PUSH
67986: LD_VAR 0 1
67990: PUSH
67991: LD_INT 3
67993: MINUS
67994: PUSH
67995: LD_VAR 0 2
67999: PUSH
68000: LD_INT 3
68002: MINUS
68003: PUSH
68004: LD_INT 2
68006: PUSH
68007: EMPTY
68008: LIST
68009: LIST
68010: LIST
68011: PUSH
68012: EMPTY
68013: LIST
68014: LIST
68015: LIST
68016: LIST
68017: LIST
68018: ST_TO_ADDR
// end ; 4 :
68019: GO 68300
68021: LD_INT 4
68023: DOUBLE
68024: EQUAL
68025: IFTRUE 68029
68027: GO 68162
68029: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
68030: LD_ADDR_VAR 0 5
68034: PUSH
68035: LD_VAR 0 1
68039: PUSH
68040: LD_VAR 0 2
68044: PUSH
68045: LD_INT 4
68047: PLUS
68048: PUSH
68049: LD_INT 0
68051: PUSH
68052: EMPTY
68053: LIST
68054: LIST
68055: LIST
68056: PUSH
68057: LD_VAR 0 1
68061: PUSH
68062: LD_INT 3
68064: PLUS
68065: PUSH
68066: LD_VAR 0 2
68070: PUSH
68071: LD_INT 3
68073: PLUS
68074: PUSH
68075: LD_INT 5
68077: PUSH
68078: EMPTY
68079: LIST
68080: LIST
68081: LIST
68082: PUSH
68083: LD_VAR 0 1
68087: PUSH
68088: LD_INT 4
68090: PLUS
68091: PUSH
68092: LD_VAR 0 2
68096: PUSH
68097: LD_INT 4
68099: PUSH
68100: EMPTY
68101: LIST
68102: LIST
68103: LIST
68104: PUSH
68105: LD_VAR 0 1
68109: PUSH
68110: LD_VAR 0 2
68114: PUSH
68115: LD_INT 3
68117: MINUS
68118: PUSH
68119: LD_INT 3
68121: PUSH
68122: EMPTY
68123: LIST
68124: LIST
68125: LIST
68126: PUSH
68127: LD_VAR 0 1
68131: PUSH
68132: LD_INT 4
68134: MINUS
68135: PUSH
68136: LD_VAR 0 2
68140: PUSH
68141: LD_INT 4
68143: MINUS
68144: PUSH
68145: LD_INT 2
68147: PUSH
68148: EMPTY
68149: LIST
68150: LIST
68151: LIST
68152: PUSH
68153: EMPTY
68154: LIST
68155: LIST
68156: LIST
68157: LIST
68158: LIST
68159: ST_TO_ADDR
// end ; 5 :
68160: GO 68300
68162: LD_INT 5
68164: DOUBLE
68165: EQUAL
68166: IFTRUE 68170
68168: GO 68299
68170: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
68171: LD_ADDR_VAR 0 5
68175: PUSH
68176: LD_VAR 0 1
68180: PUSH
68181: LD_INT 4
68183: MINUS
68184: PUSH
68185: LD_VAR 0 2
68189: PUSH
68190: LD_INT 1
68192: PUSH
68193: EMPTY
68194: LIST
68195: LIST
68196: LIST
68197: PUSH
68198: LD_VAR 0 1
68202: PUSH
68203: LD_VAR 0 2
68207: PUSH
68208: LD_INT 4
68210: MINUS
68211: PUSH
68212: LD_INT 3
68214: PUSH
68215: EMPTY
68216: LIST
68217: LIST
68218: LIST
68219: PUSH
68220: LD_VAR 0 1
68224: PUSH
68225: LD_INT 4
68227: PLUS
68228: PUSH
68229: LD_VAR 0 2
68233: PUSH
68234: LD_INT 4
68236: PLUS
68237: PUSH
68238: LD_INT 5
68240: PUSH
68241: EMPTY
68242: LIST
68243: LIST
68244: LIST
68245: PUSH
68246: LD_VAR 0 1
68250: PUSH
68251: LD_INT 3
68253: PLUS
68254: PUSH
68255: LD_VAR 0 2
68259: PUSH
68260: LD_INT 4
68262: PUSH
68263: EMPTY
68264: LIST
68265: LIST
68266: LIST
68267: PUSH
68268: LD_VAR 0 1
68272: PUSH
68273: LD_VAR 0 2
68277: PUSH
68278: LD_INT 3
68280: PLUS
68281: PUSH
68282: LD_INT 0
68284: PUSH
68285: EMPTY
68286: LIST
68287: LIST
68288: LIST
68289: PUSH
68290: EMPTY
68291: LIST
68292: LIST
68293: LIST
68294: LIST
68295: LIST
68296: ST_TO_ADDR
// end ; end ;
68297: GO 68300
68299: POP
// result := list ;
68300: LD_ADDR_VAR 0 4
68304: PUSH
68305: LD_VAR 0 5
68309: ST_TO_ADDR
// end ;
68310: LD_VAR 0 4
68314: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
68315: LD_INT 0
68317: PPUSH
68318: PPUSH
68319: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
68320: LD_VAR 0 1
68324: NOT
68325: PUSH
68326: LD_VAR 0 2
68330: PUSH
68331: LD_INT 1
68333: PUSH
68334: LD_INT 2
68336: PUSH
68337: LD_INT 3
68339: PUSH
68340: LD_INT 4
68342: PUSH
68343: EMPTY
68344: LIST
68345: LIST
68346: LIST
68347: LIST
68348: IN
68349: NOT
68350: OR
68351: IFFALSE 68355
// exit ;
68353: GO 68438
// tmp := [ ] ;
68355: LD_ADDR_VAR 0 5
68359: PUSH
68360: EMPTY
68361: ST_TO_ADDR
// for i in units do
68362: LD_ADDR_VAR 0 4
68366: PUSH
68367: LD_VAR 0 1
68371: PUSH
68372: FOR_IN
68373: IFFALSE 68407
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
68375: LD_ADDR_VAR 0 5
68379: PUSH
68380: LD_VAR 0 5
68384: PPUSH
68385: LD_VAR 0 4
68389: PPUSH
68390: LD_VAR 0 2
68394: PPUSH
68395: CALL_OW 259
68399: PPUSH
68400: CALL 69799 0 2
68404: ST_TO_ADDR
68405: GO 68372
68407: POP
68408: POP
// if not tmp then
68409: LD_VAR 0 5
68413: NOT
68414: IFFALSE 68418
// exit ;
68416: GO 68438
// result := SortListByListDesc ( units , tmp ) ;
68418: LD_ADDR_VAR 0 3
68422: PUSH
68423: LD_VAR 0 1
68427: PPUSH
68428: LD_VAR 0 5
68432: PPUSH
68433: CALL_OW 77
68437: ST_TO_ADDR
// end ;
68438: LD_VAR 0 3
68442: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
68443: LD_INT 0
68445: PPUSH
68446: PPUSH
68447: PPUSH
// result := false ;
68448: LD_ADDR_VAR 0 3
68452: PUSH
68453: LD_INT 0
68455: ST_TO_ADDR
// if not building then
68456: LD_VAR 0 2
68460: NOT
68461: IFFALSE 68465
// exit ;
68463: GO 68603
// x := GetX ( building ) ;
68465: LD_ADDR_VAR 0 4
68469: PUSH
68470: LD_VAR 0 2
68474: PPUSH
68475: CALL_OW 250
68479: ST_TO_ADDR
// y := GetY ( building ) ;
68480: LD_ADDR_VAR 0 5
68484: PUSH
68485: LD_VAR 0 2
68489: PPUSH
68490: CALL_OW 251
68494: ST_TO_ADDR
// if not x or not y then
68495: LD_VAR 0 4
68499: NOT
68500: PUSH
68501: LD_VAR 0 5
68505: NOT
68506: OR
68507: IFFALSE 68511
// exit ;
68509: GO 68603
// if GetTaskList ( unit ) then
68511: LD_VAR 0 1
68515: PPUSH
68516: CALL_OW 437
68520: IFFALSE 68603
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
68522: LD_STRING e
68524: PUSH
68525: LD_VAR 0 1
68529: PPUSH
68530: CALL_OW 437
68534: PUSH
68535: LD_INT 1
68537: ARRAY
68538: PUSH
68539: LD_INT 1
68541: ARRAY
68542: EQUAL
68543: PUSH
68544: LD_VAR 0 4
68548: PUSH
68549: LD_VAR 0 1
68553: PPUSH
68554: CALL_OW 437
68558: PUSH
68559: LD_INT 1
68561: ARRAY
68562: PUSH
68563: LD_INT 2
68565: ARRAY
68566: EQUAL
68567: AND
68568: PUSH
68569: LD_VAR 0 5
68573: PUSH
68574: LD_VAR 0 1
68578: PPUSH
68579: CALL_OW 437
68583: PUSH
68584: LD_INT 1
68586: ARRAY
68587: PUSH
68588: LD_INT 3
68590: ARRAY
68591: EQUAL
68592: AND
68593: IFFALSE 68603
// result := true end ;
68595: LD_ADDR_VAR 0 3
68599: PUSH
68600: LD_INT 1
68602: ST_TO_ADDR
// end ;
68603: LD_VAR 0 3
68607: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
68608: LD_INT 0
68610: PPUSH
// result := false ;
68611: LD_ADDR_VAR 0 4
68615: PUSH
68616: LD_INT 0
68618: ST_TO_ADDR
// if GetTaskList ( unit ) then
68619: LD_VAR 0 1
68623: PPUSH
68624: CALL_OW 437
68628: IFFALSE 68711
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
68630: LD_STRING M
68632: PUSH
68633: LD_VAR 0 1
68637: PPUSH
68638: CALL_OW 437
68642: PUSH
68643: LD_INT 1
68645: ARRAY
68646: PUSH
68647: LD_INT 1
68649: ARRAY
68650: EQUAL
68651: PUSH
68652: LD_VAR 0 2
68656: PUSH
68657: LD_VAR 0 1
68661: PPUSH
68662: CALL_OW 437
68666: PUSH
68667: LD_INT 1
68669: ARRAY
68670: PUSH
68671: LD_INT 2
68673: ARRAY
68674: EQUAL
68675: AND
68676: PUSH
68677: LD_VAR 0 3
68681: PUSH
68682: LD_VAR 0 1
68686: PPUSH
68687: CALL_OW 437
68691: PUSH
68692: LD_INT 1
68694: ARRAY
68695: PUSH
68696: LD_INT 3
68698: ARRAY
68699: EQUAL
68700: AND
68701: IFFALSE 68711
// result := true ;
68703: LD_ADDR_VAR 0 4
68707: PUSH
68708: LD_INT 1
68710: ST_TO_ADDR
// end ; end ;
68711: LD_VAR 0 4
68715: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
68716: LD_INT 0
68718: PPUSH
68719: PPUSH
68720: PPUSH
68721: PPUSH
// if not unit or not area then
68722: LD_VAR 0 1
68726: NOT
68727: PUSH
68728: LD_VAR 0 2
68732: NOT
68733: OR
68734: IFFALSE 68738
// exit ;
68736: GO 68902
// tmp := AreaToList ( area , i ) ;
68738: LD_ADDR_VAR 0 6
68742: PUSH
68743: LD_VAR 0 2
68747: PPUSH
68748: LD_VAR 0 5
68752: PPUSH
68753: CALL_OW 517
68757: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
68758: LD_ADDR_VAR 0 5
68762: PUSH
68763: DOUBLE
68764: LD_INT 1
68766: DEC
68767: ST_TO_ADDR
68768: LD_VAR 0 6
68772: PUSH
68773: LD_INT 1
68775: ARRAY
68776: PUSH
68777: FOR_TO
68778: IFFALSE 68900
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
68780: LD_ADDR_VAR 0 7
68784: PUSH
68785: LD_VAR 0 6
68789: PUSH
68790: LD_INT 1
68792: ARRAY
68793: PUSH
68794: LD_VAR 0 5
68798: ARRAY
68799: PUSH
68800: LD_VAR 0 6
68804: PUSH
68805: LD_INT 2
68807: ARRAY
68808: PUSH
68809: LD_VAR 0 5
68813: ARRAY
68814: PUSH
68815: EMPTY
68816: LIST
68817: LIST
68818: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
68819: LD_VAR 0 7
68823: PUSH
68824: LD_INT 1
68826: ARRAY
68827: PPUSH
68828: LD_VAR 0 7
68832: PUSH
68833: LD_INT 2
68835: ARRAY
68836: PPUSH
68837: CALL_OW 428
68841: PUSH
68842: LD_INT 0
68844: EQUAL
68845: IFFALSE 68898
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
68847: LD_VAR 0 1
68851: PPUSH
68852: LD_VAR 0 7
68856: PUSH
68857: LD_INT 1
68859: ARRAY
68860: PPUSH
68861: LD_VAR 0 7
68865: PUSH
68866: LD_INT 2
68868: ARRAY
68869: PPUSH
68870: LD_VAR 0 3
68874: PPUSH
68875: CALL_OW 48
// result := IsPlaced ( unit ) ;
68879: LD_ADDR_VAR 0 4
68883: PUSH
68884: LD_VAR 0 1
68888: PPUSH
68889: CALL_OW 305
68893: ST_TO_ADDR
// exit ;
68894: POP
68895: POP
68896: GO 68902
// end ; end ;
68898: GO 68777
68900: POP
68901: POP
// end ;
68902: LD_VAR 0 4
68906: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
68907: LD_INT 0
68909: PPUSH
68910: PPUSH
68911: PPUSH
// if not side or side > 8 then
68912: LD_VAR 0 1
68916: NOT
68917: PUSH
68918: LD_VAR 0 1
68922: PUSH
68923: LD_INT 8
68925: GREATER
68926: OR
68927: IFFALSE 68931
// exit ;
68929: GO 69118
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
68931: LD_ADDR_VAR 0 4
68935: PUSH
68936: LD_INT 22
68938: PUSH
68939: LD_VAR 0 1
68943: PUSH
68944: EMPTY
68945: LIST
68946: LIST
68947: PUSH
68948: LD_INT 21
68950: PUSH
68951: LD_INT 3
68953: PUSH
68954: EMPTY
68955: LIST
68956: LIST
68957: PUSH
68958: EMPTY
68959: LIST
68960: LIST
68961: PPUSH
68962: CALL_OW 69
68966: ST_TO_ADDR
// if not tmp then
68967: LD_VAR 0 4
68971: NOT
68972: IFFALSE 68976
// exit ;
68974: GO 69118
// enable_addtolog := true ;
68976: LD_ADDR_OWVAR 81
68980: PUSH
68981: LD_INT 1
68983: ST_TO_ADDR
// AddToLog ( [ ) ;
68984: LD_STRING [
68986: PPUSH
68987: CALL_OW 561
// for i in tmp do
68991: LD_ADDR_VAR 0 3
68995: PUSH
68996: LD_VAR 0 4
69000: PUSH
69001: FOR_IN
69002: IFFALSE 69109
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
69004: LD_STRING [
69006: PUSH
69007: LD_VAR 0 3
69011: PPUSH
69012: CALL_OW 266
69016: STR
69017: PUSH
69018: LD_STRING , 
69020: STR
69021: PUSH
69022: LD_VAR 0 3
69026: PPUSH
69027: CALL_OW 250
69031: STR
69032: PUSH
69033: LD_STRING , 
69035: STR
69036: PUSH
69037: LD_VAR 0 3
69041: PPUSH
69042: CALL_OW 251
69046: STR
69047: PUSH
69048: LD_STRING , 
69050: STR
69051: PUSH
69052: LD_VAR 0 3
69056: PPUSH
69057: CALL_OW 254
69061: STR
69062: PUSH
69063: LD_STRING , 
69065: STR
69066: PUSH
69067: LD_VAR 0 3
69071: PPUSH
69072: LD_INT 1
69074: PPUSH
69075: CALL_OW 268
69079: STR
69080: PUSH
69081: LD_STRING , 
69083: STR
69084: PUSH
69085: LD_VAR 0 3
69089: PPUSH
69090: LD_INT 2
69092: PPUSH
69093: CALL_OW 268
69097: STR
69098: PUSH
69099: LD_STRING ],
69101: STR
69102: PPUSH
69103: CALL_OW 561
// end ;
69107: GO 69001
69109: POP
69110: POP
// AddToLog ( ]; ) ;
69111: LD_STRING ];
69113: PPUSH
69114: CALL_OW 561
// end ;
69118: LD_VAR 0 2
69122: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
69123: LD_INT 0
69125: PPUSH
69126: PPUSH
69127: PPUSH
69128: PPUSH
69129: PPUSH
// if not area or not rate or not max then
69130: LD_VAR 0 1
69134: NOT
69135: PUSH
69136: LD_VAR 0 2
69140: NOT
69141: OR
69142: PUSH
69143: LD_VAR 0 4
69147: NOT
69148: OR
69149: IFFALSE 69153
// exit ;
69151: GO 69342
// while 1 do
69153: LD_INT 1
69155: IFFALSE 69342
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
69157: LD_ADDR_VAR 0 9
69161: PUSH
69162: LD_VAR 0 1
69166: PPUSH
69167: LD_INT 1
69169: PPUSH
69170: CALL_OW 287
69174: PUSH
69175: LD_INT 10
69177: MUL
69178: ST_TO_ADDR
// r := rate / 10 ;
69179: LD_ADDR_VAR 0 7
69183: PUSH
69184: LD_VAR 0 2
69188: PUSH
69189: LD_INT 10
69191: DIVREAL
69192: ST_TO_ADDR
// time := 1 1$00 ;
69193: LD_ADDR_VAR 0 8
69197: PUSH
69198: LD_INT 2100
69200: ST_TO_ADDR
// if amount < min then
69201: LD_VAR 0 9
69205: PUSH
69206: LD_VAR 0 3
69210: LESS
69211: IFFALSE 69229
// r := r * 2 else
69213: LD_ADDR_VAR 0 7
69217: PUSH
69218: LD_VAR 0 7
69222: PUSH
69223: LD_INT 2
69225: MUL
69226: ST_TO_ADDR
69227: GO 69255
// if amount > max then
69229: LD_VAR 0 9
69233: PUSH
69234: LD_VAR 0 4
69238: GREATER
69239: IFFALSE 69255
// r := r / 2 ;
69241: LD_ADDR_VAR 0 7
69245: PUSH
69246: LD_VAR 0 7
69250: PUSH
69251: LD_INT 2
69253: DIVREAL
69254: ST_TO_ADDR
// time := time / r ;
69255: LD_ADDR_VAR 0 8
69259: PUSH
69260: LD_VAR 0 8
69264: PUSH
69265: LD_VAR 0 7
69269: DIVREAL
69270: ST_TO_ADDR
// if time < 0 then
69271: LD_VAR 0 8
69275: PUSH
69276: LD_INT 0
69278: LESS
69279: IFFALSE 69296
// time := time * - 1 ;
69281: LD_ADDR_VAR 0 8
69285: PUSH
69286: LD_VAR 0 8
69290: PUSH
69291: LD_INT 1
69293: NEG
69294: MUL
69295: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
69296: LD_VAR 0 8
69300: PUSH
69301: LD_INT 35
69303: PPUSH
69304: LD_INT 875
69306: PPUSH
69307: CALL_OW 12
69311: PLUS
69312: PPUSH
69313: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
69317: LD_INT 1
69319: PPUSH
69320: LD_INT 5
69322: PPUSH
69323: CALL_OW 12
69327: PPUSH
69328: LD_VAR 0 1
69332: PPUSH
69333: LD_INT 1
69335: PPUSH
69336: CALL_OW 55
// end ;
69340: GO 69153
// end ;
69342: LD_VAR 0 5
69346: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
69347: LD_INT 0
69349: PPUSH
69350: PPUSH
69351: PPUSH
69352: PPUSH
69353: PPUSH
69354: PPUSH
69355: PPUSH
69356: PPUSH
// if not turrets or not factories then
69357: LD_VAR 0 1
69361: NOT
69362: PUSH
69363: LD_VAR 0 2
69367: NOT
69368: OR
69369: IFFALSE 69373
// exit ;
69371: GO 69680
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
69373: LD_ADDR_VAR 0 10
69377: PUSH
69378: LD_INT 5
69380: PUSH
69381: LD_INT 6
69383: PUSH
69384: EMPTY
69385: LIST
69386: LIST
69387: PUSH
69388: LD_INT 2
69390: PUSH
69391: LD_INT 4
69393: PUSH
69394: EMPTY
69395: LIST
69396: LIST
69397: PUSH
69398: LD_INT 3
69400: PUSH
69401: LD_INT 5
69403: PUSH
69404: EMPTY
69405: LIST
69406: LIST
69407: PUSH
69408: EMPTY
69409: LIST
69410: LIST
69411: LIST
69412: PUSH
69413: LD_INT 24
69415: PUSH
69416: LD_INT 25
69418: PUSH
69419: EMPTY
69420: LIST
69421: LIST
69422: PUSH
69423: LD_INT 23
69425: PUSH
69426: LD_INT 27
69428: PUSH
69429: EMPTY
69430: LIST
69431: LIST
69432: PUSH
69433: EMPTY
69434: LIST
69435: LIST
69436: PUSH
69437: LD_INT 42
69439: PUSH
69440: LD_INT 43
69442: PUSH
69443: EMPTY
69444: LIST
69445: LIST
69446: PUSH
69447: LD_INT 44
69449: PUSH
69450: LD_INT 46
69452: PUSH
69453: EMPTY
69454: LIST
69455: LIST
69456: PUSH
69457: LD_INT 45
69459: PUSH
69460: LD_INT 47
69462: PUSH
69463: EMPTY
69464: LIST
69465: LIST
69466: PUSH
69467: EMPTY
69468: LIST
69469: LIST
69470: LIST
69471: PUSH
69472: EMPTY
69473: LIST
69474: LIST
69475: LIST
69476: ST_TO_ADDR
// result := [ ] ;
69477: LD_ADDR_VAR 0 3
69481: PUSH
69482: EMPTY
69483: ST_TO_ADDR
// for i in turrets do
69484: LD_ADDR_VAR 0 4
69488: PUSH
69489: LD_VAR 0 1
69493: PUSH
69494: FOR_IN
69495: IFFALSE 69678
// begin nat := GetNation ( i ) ;
69497: LD_ADDR_VAR 0 7
69501: PUSH
69502: LD_VAR 0 4
69506: PPUSH
69507: CALL_OW 248
69511: ST_TO_ADDR
// weapon := 0 ;
69512: LD_ADDR_VAR 0 8
69516: PUSH
69517: LD_INT 0
69519: ST_TO_ADDR
// if not nat then
69520: LD_VAR 0 7
69524: NOT
69525: IFFALSE 69529
// continue ;
69527: GO 69494
// for j in list [ nat ] do
69529: LD_ADDR_VAR 0 5
69533: PUSH
69534: LD_VAR 0 10
69538: PUSH
69539: LD_VAR 0 7
69543: ARRAY
69544: PUSH
69545: FOR_IN
69546: IFFALSE 69587
// if GetBWeapon ( i ) = j [ 1 ] then
69548: LD_VAR 0 4
69552: PPUSH
69553: CALL_OW 269
69557: PUSH
69558: LD_VAR 0 5
69562: PUSH
69563: LD_INT 1
69565: ARRAY
69566: EQUAL
69567: IFFALSE 69585
// begin weapon := j [ 2 ] ;
69569: LD_ADDR_VAR 0 8
69573: PUSH
69574: LD_VAR 0 5
69578: PUSH
69579: LD_INT 2
69581: ARRAY
69582: ST_TO_ADDR
// break ;
69583: GO 69587
// end ;
69585: GO 69545
69587: POP
69588: POP
// if not weapon then
69589: LD_VAR 0 8
69593: NOT
69594: IFFALSE 69598
// continue ;
69596: GO 69494
// for k in factories do
69598: LD_ADDR_VAR 0 6
69602: PUSH
69603: LD_VAR 0 2
69607: PUSH
69608: FOR_IN
69609: IFFALSE 69674
// begin weapons := AvailableWeaponList ( k ) ;
69611: LD_ADDR_VAR 0 9
69615: PUSH
69616: LD_VAR 0 6
69620: PPUSH
69621: CALL_OW 478
69625: ST_TO_ADDR
// if not weapons then
69626: LD_VAR 0 9
69630: NOT
69631: IFFALSE 69635
// continue ;
69633: GO 69608
// if weapon in weapons then
69635: LD_VAR 0 8
69639: PUSH
69640: LD_VAR 0 9
69644: IN
69645: IFFALSE 69672
// begin result := [ i , weapon ] ;
69647: LD_ADDR_VAR 0 3
69651: PUSH
69652: LD_VAR 0 4
69656: PUSH
69657: LD_VAR 0 8
69661: PUSH
69662: EMPTY
69663: LIST
69664: LIST
69665: ST_TO_ADDR
// exit ;
69666: POP
69667: POP
69668: POP
69669: POP
69670: GO 69680
// end ; end ;
69672: GO 69608
69674: POP
69675: POP
// end ;
69676: GO 69494
69678: POP
69679: POP
// end ;
69680: LD_VAR 0 3
69684: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
69685: LD_INT 0
69687: PPUSH
// if not side or side > 8 then
69688: LD_VAR 0 3
69692: NOT
69693: PUSH
69694: LD_VAR 0 3
69698: PUSH
69699: LD_INT 8
69701: GREATER
69702: OR
69703: IFFALSE 69707
// exit ;
69705: GO 69766
// if not range then
69707: LD_VAR 0 4
69711: NOT
69712: IFFALSE 69723
// range := - 12 ;
69714: LD_ADDR_VAR 0 4
69718: PUSH
69719: LD_INT 12
69721: NEG
69722: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
69723: LD_VAR 0 1
69727: PPUSH
69728: LD_VAR 0 2
69732: PPUSH
69733: LD_VAR 0 3
69737: PPUSH
69738: LD_VAR 0 4
69742: PPUSH
69743: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
69747: LD_VAR 0 1
69751: PPUSH
69752: LD_VAR 0 2
69756: PPUSH
69757: LD_VAR 0 3
69761: PPUSH
69762: CALL_OW 331
// end ;
69766: LD_VAR 0 5
69770: RET
// export function Video ( mode ) ; begin
69771: LD_INT 0
69773: PPUSH
// ingame_video = mode ;
69774: LD_ADDR_OWVAR 52
69778: PUSH
69779: LD_VAR 0 1
69783: ST_TO_ADDR
// interface_hidden = mode ;
69784: LD_ADDR_OWVAR 54
69788: PUSH
69789: LD_VAR 0 1
69793: ST_TO_ADDR
// end ;
69794: LD_VAR 0 2
69798: RET
// export function Join ( array , element ) ; begin
69799: LD_INT 0
69801: PPUSH
// result := Replace ( array , array + 1 , element ) ;
69802: LD_ADDR_VAR 0 3
69806: PUSH
69807: LD_VAR 0 1
69811: PPUSH
69812: LD_VAR 0 1
69816: PUSH
69817: LD_INT 1
69819: PLUS
69820: PPUSH
69821: LD_VAR 0 2
69825: PPUSH
69826: CALL_OW 1
69830: ST_TO_ADDR
// end ;
69831: LD_VAR 0 3
69835: RET
// export function JoinUnion ( array , element ) ; begin
69836: LD_INT 0
69838: PPUSH
// result := array union element ;
69839: LD_ADDR_VAR 0 3
69843: PUSH
69844: LD_VAR 0 1
69848: PUSH
69849: LD_VAR 0 2
69853: UNION
69854: ST_TO_ADDR
// end ;
69855: LD_VAR 0 3
69859: RET
// export function GetBehemoths ( side ) ; begin
69860: LD_INT 0
69862: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
69863: LD_ADDR_VAR 0 2
69867: PUSH
69868: LD_INT 22
69870: PUSH
69871: LD_VAR 0 1
69875: PUSH
69876: EMPTY
69877: LIST
69878: LIST
69879: PUSH
69880: LD_INT 31
69882: PUSH
69883: LD_INT 25
69885: PUSH
69886: EMPTY
69887: LIST
69888: LIST
69889: PUSH
69890: EMPTY
69891: LIST
69892: LIST
69893: PPUSH
69894: CALL_OW 69
69898: ST_TO_ADDR
// end ;
69899: LD_VAR 0 2
69903: RET
// export function Shuffle ( array ) ; var i , index ; begin
69904: LD_INT 0
69906: PPUSH
69907: PPUSH
69908: PPUSH
// result := [ ] ;
69909: LD_ADDR_VAR 0 2
69913: PUSH
69914: EMPTY
69915: ST_TO_ADDR
// if not array then
69916: LD_VAR 0 1
69920: NOT
69921: IFFALSE 69925
// exit ;
69923: GO 70024
// Randomize ;
69925: CALL_OW 10
// for i = array downto 1 do
69929: LD_ADDR_VAR 0 3
69933: PUSH
69934: DOUBLE
69935: LD_VAR 0 1
69939: INC
69940: ST_TO_ADDR
69941: LD_INT 1
69943: PUSH
69944: FOR_DOWNTO
69945: IFFALSE 70022
// begin index := rand ( 1 , array ) ;
69947: LD_ADDR_VAR 0 4
69951: PUSH
69952: LD_INT 1
69954: PPUSH
69955: LD_VAR 0 1
69959: PPUSH
69960: CALL_OW 12
69964: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
69965: LD_ADDR_VAR 0 2
69969: PUSH
69970: LD_VAR 0 2
69974: PPUSH
69975: LD_VAR 0 2
69979: PUSH
69980: LD_INT 1
69982: PLUS
69983: PPUSH
69984: LD_VAR 0 1
69988: PUSH
69989: LD_VAR 0 4
69993: ARRAY
69994: PPUSH
69995: CALL_OW 2
69999: ST_TO_ADDR
// array := Delete ( array , index ) ;
70000: LD_ADDR_VAR 0 1
70004: PUSH
70005: LD_VAR 0 1
70009: PPUSH
70010: LD_VAR 0 4
70014: PPUSH
70015: CALL_OW 3
70019: ST_TO_ADDR
// end ;
70020: GO 69944
70022: POP
70023: POP
// end ;
70024: LD_VAR 0 2
70028: RET
// export function GetBaseMaterials ( base ) ; begin
70029: LD_INT 0
70031: PPUSH
// result := [ 0 , 0 , 0 ] ;
70032: LD_ADDR_VAR 0 2
70036: PUSH
70037: LD_INT 0
70039: PUSH
70040: LD_INT 0
70042: PUSH
70043: LD_INT 0
70045: PUSH
70046: EMPTY
70047: LIST
70048: LIST
70049: LIST
70050: ST_TO_ADDR
// if not base then
70051: LD_VAR 0 1
70055: NOT
70056: IFFALSE 70060
// exit ;
70058: GO 70109
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
70060: LD_ADDR_VAR 0 2
70064: PUSH
70065: LD_VAR 0 1
70069: PPUSH
70070: LD_INT 1
70072: PPUSH
70073: CALL_OW 275
70077: PUSH
70078: LD_VAR 0 1
70082: PPUSH
70083: LD_INT 2
70085: PPUSH
70086: CALL_OW 275
70090: PUSH
70091: LD_VAR 0 1
70095: PPUSH
70096: LD_INT 3
70098: PPUSH
70099: CALL_OW 275
70103: PUSH
70104: EMPTY
70105: LIST
70106: LIST
70107: LIST
70108: ST_TO_ADDR
// end ;
70109: LD_VAR 0 2
70113: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
70114: LD_INT 0
70116: PPUSH
70117: PPUSH
// result := array ;
70118: LD_ADDR_VAR 0 3
70122: PUSH
70123: LD_VAR 0 1
70127: ST_TO_ADDR
// if size >= result then
70128: LD_VAR 0 2
70132: PUSH
70133: LD_VAR 0 3
70137: GREATEREQUAL
70138: IFFALSE 70142
// exit ;
70140: GO 70192
// if size then
70142: LD_VAR 0 2
70146: IFFALSE 70192
// for i := array downto size do
70148: LD_ADDR_VAR 0 4
70152: PUSH
70153: DOUBLE
70154: LD_VAR 0 1
70158: INC
70159: ST_TO_ADDR
70160: LD_VAR 0 2
70164: PUSH
70165: FOR_DOWNTO
70166: IFFALSE 70190
// result := Delete ( result , result ) ;
70168: LD_ADDR_VAR 0 3
70172: PUSH
70173: LD_VAR 0 3
70177: PPUSH
70178: LD_VAR 0 3
70182: PPUSH
70183: CALL_OW 3
70187: ST_TO_ADDR
70188: GO 70165
70190: POP
70191: POP
// end ;
70192: LD_VAR 0 3
70196: RET
// export function ComExit ( unit ) ; var tmp ; begin
70197: LD_INT 0
70199: PPUSH
70200: PPUSH
// if not IsInUnit ( unit ) then
70201: LD_VAR 0 1
70205: PPUSH
70206: CALL_OW 310
70210: NOT
70211: IFFALSE 70215
// exit ;
70213: GO 70275
// tmp := IsInUnit ( unit ) ;
70215: LD_ADDR_VAR 0 3
70219: PUSH
70220: LD_VAR 0 1
70224: PPUSH
70225: CALL_OW 310
70229: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
70230: LD_VAR 0 3
70234: PPUSH
70235: CALL_OW 247
70239: PUSH
70240: LD_INT 2
70242: EQUAL
70243: IFFALSE 70256
// ComExitVehicle ( unit ) else
70245: LD_VAR 0 1
70249: PPUSH
70250: CALL_OW 121
70254: GO 70265
// ComExitBuilding ( unit ) ;
70256: LD_VAR 0 1
70260: PPUSH
70261: CALL_OW 122
// result := tmp ;
70265: LD_ADDR_VAR 0 2
70269: PUSH
70270: LD_VAR 0 3
70274: ST_TO_ADDR
// end ;
70275: LD_VAR 0 2
70279: RET
// export function ComExitAll ( units ) ; var i ; begin
70280: LD_INT 0
70282: PPUSH
70283: PPUSH
// if not units then
70284: LD_VAR 0 1
70288: NOT
70289: IFFALSE 70293
// exit ;
70291: GO 70319
// for i in units do
70293: LD_ADDR_VAR 0 3
70297: PUSH
70298: LD_VAR 0 1
70302: PUSH
70303: FOR_IN
70304: IFFALSE 70317
// ComExit ( i ) ;
70306: LD_VAR 0 3
70310: PPUSH
70311: CALL 70197 0 1
70315: GO 70303
70317: POP
70318: POP
// end ;
70319: LD_VAR 0 2
70323: RET
// export function ResetHc ; begin
70324: LD_INT 0
70326: PPUSH
// InitHc ;
70327: CALL_OW 19
// hc_importance := 0 ;
70331: LD_ADDR_OWVAR 32
70335: PUSH
70336: LD_INT 0
70338: ST_TO_ADDR
// end ;
70339: LD_VAR 0 1
70343: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
70344: LD_INT 0
70346: PPUSH
70347: PPUSH
70348: PPUSH
// _x := ( x1 + x2 ) div 2 ;
70349: LD_ADDR_VAR 0 6
70353: PUSH
70354: LD_VAR 0 1
70358: PUSH
70359: LD_VAR 0 3
70363: PLUS
70364: PUSH
70365: LD_INT 2
70367: DIV
70368: ST_TO_ADDR
// if _x < 0 then
70369: LD_VAR 0 6
70373: PUSH
70374: LD_INT 0
70376: LESS
70377: IFFALSE 70394
// _x := _x * - 1 ;
70379: LD_ADDR_VAR 0 6
70383: PUSH
70384: LD_VAR 0 6
70388: PUSH
70389: LD_INT 1
70391: NEG
70392: MUL
70393: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
70394: LD_ADDR_VAR 0 7
70398: PUSH
70399: LD_VAR 0 2
70403: PUSH
70404: LD_VAR 0 4
70408: PLUS
70409: PUSH
70410: LD_INT 2
70412: DIV
70413: ST_TO_ADDR
// if _y < 0 then
70414: LD_VAR 0 7
70418: PUSH
70419: LD_INT 0
70421: LESS
70422: IFFALSE 70439
// _y := _y * - 1 ;
70424: LD_ADDR_VAR 0 7
70428: PUSH
70429: LD_VAR 0 7
70433: PUSH
70434: LD_INT 1
70436: NEG
70437: MUL
70438: ST_TO_ADDR
// result := [ _x , _y ] ;
70439: LD_ADDR_VAR 0 5
70443: PUSH
70444: LD_VAR 0 6
70448: PUSH
70449: LD_VAR 0 7
70453: PUSH
70454: EMPTY
70455: LIST
70456: LIST
70457: ST_TO_ADDR
// end ;
70458: LD_VAR 0 5
70462: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
70463: LD_INT 0
70465: PPUSH
70466: PPUSH
70467: PPUSH
70468: PPUSH
// task := GetTaskList ( unit ) ;
70469: LD_ADDR_VAR 0 7
70473: PUSH
70474: LD_VAR 0 1
70478: PPUSH
70479: CALL_OW 437
70483: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
70484: LD_VAR 0 7
70488: NOT
70489: PUSH
70490: LD_VAR 0 1
70494: PPUSH
70495: LD_VAR 0 2
70499: PPUSH
70500: CALL_OW 308
70504: NOT
70505: AND
70506: IFFALSE 70510
// exit ;
70508: GO 70628
// if IsInArea ( unit , area ) then
70510: LD_VAR 0 1
70514: PPUSH
70515: LD_VAR 0 2
70519: PPUSH
70520: CALL_OW 308
70524: IFFALSE 70542
// begin ComMoveToArea ( unit , goAway ) ;
70526: LD_VAR 0 1
70530: PPUSH
70531: LD_VAR 0 3
70535: PPUSH
70536: CALL_OW 113
// exit ;
70540: GO 70628
// end ; if task [ 1 ] [ 1 ] <> M then
70542: LD_VAR 0 7
70546: PUSH
70547: LD_INT 1
70549: ARRAY
70550: PUSH
70551: LD_INT 1
70553: ARRAY
70554: PUSH
70555: LD_STRING M
70557: NONEQUAL
70558: IFFALSE 70562
// exit ;
70560: GO 70628
// x := task [ 1 ] [ 2 ] ;
70562: LD_ADDR_VAR 0 5
70566: PUSH
70567: LD_VAR 0 7
70571: PUSH
70572: LD_INT 1
70574: ARRAY
70575: PUSH
70576: LD_INT 2
70578: ARRAY
70579: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
70580: LD_ADDR_VAR 0 6
70584: PUSH
70585: LD_VAR 0 7
70589: PUSH
70590: LD_INT 1
70592: ARRAY
70593: PUSH
70594: LD_INT 3
70596: ARRAY
70597: ST_TO_ADDR
// if InArea ( x , y , area ) then
70598: LD_VAR 0 5
70602: PPUSH
70603: LD_VAR 0 6
70607: PPUSH
70608: LD_VAR 0 2
70612: PPUSH
70613: CALL_OW 309
70617: IFFALSE 70628
// ComStop ( unit ) ;
70619: LD_VAR 0 1
70623: PPUSH
70624: CALL_OW 141
// end ;
70628: LD_VAR 0 4
70632: RET
// export function Abs ( value ) ; begin
70633: LD_INT 0
70635: PPUSH
// result := value ;
70636: LD_ADDR_VAR 0 2
70640: PUSH
70641: LD_VAR 0 1
70645: ST_TO_ADDR
// if value < 0 then
70646: LD_VAR 0 1
70650: PUSH
70651: LD_INT 0
70653: LESS
70654: IFFALSE 70671
// result := value * - 1 ;
70656: LD_ADDR_VAR 0 2
70660: PUSH
70661: LD_VAR 0 1
70665: PUSH
70666: LD_INT 1
70668: NEG
70669: MUL
70670: ST_TO_ADDR
// end ;
70671: LD_VAR 0 2
70675: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
70676: LD_INT 0
70678: PPUSH
70679: PPUSH
70680: PPUSH
70681: PPUSH
70682: PPUSH
70683: PPUSH
70684: PPUSH
70685: PPUSH
// if not unit or not building then
70686: LD_VAR 0 1
70690: NOT
70691: PUSH
70692: LD_VAR 0 2
70696: NOT
70697: OR
70698: IFFALSE 70702
// exit ;
70700: GO 70928
// x := GetX ( building ) ;
70702: LD_ADDR_VAR 0 4
70706: PUSH
70707: LD_VAR 0 2
70711: PPUSH
70712: CALL_OW 250
70716: ST_TO_ADDR
// y := GetY ( building ) ;
70717: LD_ADDR_VAR 0 6
70721: PUSH
70722: LD_VAR 0 2
70726: PPUSH
70727: CALL_OW 251
70731: ST_TO_ADDR
// d := GetDir ( building ) ;
70732: LD_ADDR_VAR 0 8
70736: PUSH
70737: LD_VAR 0 2
70741: PPUSH
70742: CALL_OW 254
70746: ST_TO_ADDR
// r := 4 ;
70747: LD_ADDR_VAR 0 9
70751: PUSH
70752: LD_INT 4
70754: ST_TO_ADDR
// for i := 1 to 5 do
70755: LD_ADDR_VAR 0 10
70759: PUSH
70760: DOUBLE
70761: LD_INT 1
70763: DEC
70764: ST_TO_ADDR
70765: LD_INT 5
70767: PUSH
70768: FOR_TO
70769: IFFALSE 70926
// begin _x := ShiftX ( x , d , r + i ) ;
70771: LD_ADDR_VAR 0 5
70775: PUSH
70776: LD_VAR 0 4
70780: PPUSH
70781: LD_VAR 0 8
70785: PPUSH
70786: LD_VAR 0 9
70790: PUSH
70791: LD_VAR 0 10
70795: PLUS
70796: PPUSH
70797: CALL_OW 272
70801: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
70802: LD_ADDR_VAR 0 7
70806: PUSH
70807: LD_VAR 0 6
70811: PPUSH
70812: LD_VAR 0 8
70816: PPUSH
70817: LD_VAR 0 9
70821: PUSH
70822: LD_VAR 0 10
70826: PLUS
70827: PPUSH
70828: CALL_OW 273
70832: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
70833: LD_VAR 0 5
70837: PPUSH
70838: LD_VAR 0 7
70842: PPUSH
70843: CALL_OW 488
70847: PUSH
70848: LD_VAR 0 5
70852: PPUSH
70853: LD_VAR 0 7
70857: PPUSH
70858: CALL_OW 428
70862: PPUSH
70863: CALL_OW 247
70867: PUSH
70868: LD_INT 3
70870: PUSH
70871: LD_INT 2
70873: PUSH
70874: EMPTY
70875: LIST
70876: LIST
70877: IN
70878: NOT
70879: AND
70880: IFFALSE 70924
// begin ComMoveXY ( unit , _x , _y ) ;
70882: LD_VAR 0 1
70886: PPUSH
70887: LD_VAR 0 5
70891: PPUSH
70892: LD_VAR 0 7
70896: PPUSH
70897: CALL_OW 111
// result := [ _x , _y ] ;
70901: LD_ADDR_VAR 0 3
70905: PUSH
70906: LD_VAR 0 5
70910: PUSH
70911: LD_VAR 0 7
70915: PUSH
70916: EMPTY
70917: LIST
70918: LIST
70919: ST_TO_ADDR
// exit ;
70920: POP
70921: POP
70922: GO 70928
// end ; end ;
70924: GO 70768
70926: POP
70927: POP
// end ;
70928: LD_VAR 0 3
70932: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
70933: LD_INT 0
70935: PPUSH
70936: PPUSH
70937: PPUSH
// result := 0 ;
70938: LD_ADDR_VAR 0 3
70942: PUSH
70943: LD_INT 0
70945: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
70946: LD_VAR 0 1
70950: PUSH
70951: LD_INT 0
70953: LESS
70954: PUSH
70955: LD_VAR 0 1
70959: PUSH
70960: LD_INT 8
70962: GREATER
70963: OR
70964: PUSH
70965: LD_VAR 0 2
70969: PUSH
70970: LD_INT 0
70972: LESS
70973: OR
70974: PUSH
70975: LD_VAR 0 2
70979: PUSH
70980: LD_INT 8
70982: GREATER
70983: OR
70984: IFFALSE 70988
// exit ;
70986: GO 71063
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
70988: LD_ADDR_VAR 0 4
70992: PUSH
70993: LD_INT 22
70995: PUSH
70996: LD_VAR 0 2
71000: PUSH
71001: EMPTY
71002: LIST
71003: LIST
71004: PPUSH
71005: CALL_OW 69
71009: PUSH
71010: FOR_IN
71011: IFFALSE 71061
// begin un := UnitShoot ( i ) ;
71013: LD_ADDR_VAR 0 5
71017: PUSH
71018: LD_VAR 0 4
71022: PPUSH
71023: CALL_OW 504
71027: ST_TO_ADDR
// if GetSide ( un ) = side1 then
71028: LD_VAR 0 5
71032: PPUSH
71033: CALL_OW 255
71037: PUSH
71038: LD_VAR 0 1
71042: EQUAL
71043: IFFALSE 71059
// begin result := un ;
71045: LD_ADDR_VAR 0 3
71049: PUSH
71050: LD_VAR 0 5
71054: ST_TO_ADDR
// exit ;
71055: POP
71056: POP
71057: GO 71063
// end ; end ;
71059: GO 71010
71061: POP
71062: POP
// end ;
71063: LD_VAR 0 3
71067: RET
// export function GetCargoBay ( units ) ; begin
71068: LD_INT 0
71070: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
71071: LD_ADDR_VAR 0 2
71075: PUSH
71076: LD_VAR 0 1
71080: PPUSH
71081: LD_INT 2
71083: PUSH
71084: LD_INT 34
71086: PUSH
71087: LD_INT 12
71089: PUSH
71090: EMPTY
71091: LIST
71092: LIST
71093: PUSH
71094: LD_INT 34
71096: PUSH
71097: LD_INT 51
71099: PUSH
71100: EMPTY
71101: LIST
71102: LIST
71103: PUSH
71104: LD_INT 34
71106: PUSH
71107: LD_INT 32
71109: PUSH
71110: EMPTY
71111: LIST
71112: LIST
71113: PUSH
71114: LD_INT 34
71116: PUSH
71117: LD_INT 89
71119: PUSH
71120: EMPTY
71121: LIST
71122: LIST
71123: PUSH
71124: EMPTY
71125: LIST
71126: LIST
71127: LIST
71128: LIST
71129: LIST
71130: PPUSH
71131: CALL_OW 72
71135: ST_TO_ADDR
// end ;
71136: LD_VAR 0 2
71140: RET
// export function Negate ( value ) ; begin
71141: LD_INT 0
71143: PPUSH
// result := not value ;
71144: LD_ADDR_VAR 0 2
71148: PUSH
71149: LD_VAR 0 1
71153: NOT
71154: ST_TO_ADDR
// end ;
71155: LD_VAR 0 2
71159: RET
// export function Inc ( value ) ; begin
71160: LD_INT 0
71162: PPUSH
// result := value + 1 ;
71163: LD_ADDR_VAR 0 2
71167: PUSH
71168: LD_VAR 0 1
71172: PUSH
71173: LD_INT 1
71175: PLUS
71176: ST_TO_ADDR
// end ;
71177: LD_VAR 0 2
71181: RET
// export function Dec ( value ) ; begin
71182: LD_INT 0
71184: PPUSH
// result := value - 1 ;
71185: LD_ADDR_VAR 0 2
71189: PUSH
71190: LD_VAR 0 1
71194: PUSH
71195: LD_INT 1
71197: MINUS
71198: ST_TO_ADDR
// end ;
71199: LD_VAR 0 2
71203: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
71204: LD_INT 0
71206: PPUSH
71207: PPUSH
71208: PPUSH
71209: PPUSH
71210: PPUSH
71211: PPUSH
71212: PPUSH
71213: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
71214: LD_VAR 0 1
71218: PPUSH
71219: LD_VAR 0 2
71223: PPUSH
71224: CALL_OW 488
71228: NOT
71229: PUSH
71230: LD_VAR 0 3
71234: PPUSH
71235: LD_VAR 0 4
71239: PPUSH
71240: CALL_OW 488
71244: NOT
71245: OR
71246: IFFALSE 71259
// begin result := - 1 ;
71248: LD_ADDR_VAR 0 5
71252: PUSH
71253: LD_INT 1
71255: NEG
71256: ST_TO_ADDR
// exit ;
71257: GO 71494
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
71259: LD_ADDR_VAR 0 12
71263: PUSH
71264: LD_VAR 0 1
71268: PPUSH
71269: LD_VAR 0 2
71273: PPUSH
71274: LD_VAR 0 3
71278: PPUSH
71279: LD_VAR 0 4
71283: PPUSH
71284: CALL 70344 0 4
71288: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
71289: LD_ADDR_VAR 0 11
71293: PUSH
71294: LD_VAR 0 1
71298: PPUSH
71299: LD_VAR 0 2
71303: PPUSH
71304: LD_VAR 0 12
71308: PUSH
71309: LD_INT 1
71311: ARRAY
71312: PPUSH
71313: LD_VAR 0 12
71317: PUSH
71318: LD_INT 2
71320: ARRAY
71321: PPUSH
71322: CALL_OW 298
71326: ST_TO_ADDR
// distance := 9999 ;
71327: LD_ADDR_VAR 0 10
71331: PUSH
71332: LD_INT 9999
71334: ST_TO_ADDR
// for i := 0 to 5 do
71335: LD_ADDR_VAR 0 6
71339: PUSH
71340: DOUBLE
71341: LD_INT 0
71343: DEC
71344: ST_TO_ADDR
71345: LD_INT 5
71347: PUSH
71348: FOR_TO
71349: IFFALSE 71492
// begin _x := ShiftX ( x1 , i , centerDist ) ;
71351: LD_ADDR_VAR 0 7
71355: PUSH
71356: LD_VAR 0 1
71360: PPUSH
71361: LD_VAR 0 6
71365: PPUSH
71366: LD_VAR 0 11
71370: PPUSH
71371: CALL_OW 272
71375: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
71376: LD_ADDR_VAR 0 8
71380: PUSH
71381: LD_VAR 0 2
71385: PPUSH
71386: LD_VAR 0 6
71390: PPUSH
71391: LD_VAR 0 11
71395: PPUSH
71396: CALL_OW 273
71400: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
71401: LD_VAR 0 7
71405: PPUSH
71406: LD_VAR 0 8
71410: PPUSH
71411: CALL_OW 488
71415: NOT
71416: IFFALSE 71420
// continue ;
71418: GO 71348
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
71420: LD_ADDR_VAR 0 9
71424: PUSH
71425: LD_VAR 0 12
71429: PUSH
71430: LD_INT 1
71432: ARRAY
71433: PPUSH
71434: LD_VAR 0 12
71438: PUSH
71439: LD_INT 2
71441: ARRAY
71442: PPUSH
71443: LD_VAR 0 7
71447: PPUSH
71448: LD_VAR 0 8
71452: PPUSH
71453: CALL_OW 298
71457: ST_TO_ADDR
// if tmp < distance then
71458: LD_VAR 0 9
71462: PUSH
71463: LD_VAR 0 10
71467: LESS
71468: IFFALSE 71490
// begin result := i ;
71470: LD_ADDR_VAR 0 5
71474: PUSH
71475: LD_VAR 0 6
71479: ST_TO_ADDR
// distance := tmp ;
71480: LD_ADDR_VAR 0 10
71484: PUSH
71485: LD_VAR 0 9
71489: ST_TO_ADDR
// end ; end ;
71490: GO 71348
71492: POP
71493: POP
// end ;
71494: LD_VAR 0 5
71498: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
71499: LD_INT 0
71501: PPUSH
71502: PPUSH
// if not driver or not IsInUnit ( driver ) then
71503: LD_VAR 0 1
71507: NOT
71508: PUSH
71509: LD_VAR 0 1
71513: PPUSH
71514: CALL_OW 310
71518: NOT
71519: OR
71520: IFFALSE 71524
// exit ;
71522: GO 71614
// vehicle := IsInUnit ( driver ) ;
71524: LD_ADDR_VAR 0 3
71528: PUSH
71529: LD_VAR 0 1
71533: PPUSH
71534: CALL_OW 310
71538: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
71539: LD_VAR 0 1
71543: PPUSH
71544: LD_STRING \
71546: PUSH
71547: LD_INT 0
71549: PUSH
71550: LD_INT 0
71552: PUSH
71553: LD_INT 0
71555: PUSH
71556: LD_INT 0
71558: PUSH
71559: LD_INT 0
71561: PUSH
71562: LD_INT 0
71564: PUSH
71565: EMPTY
71566: LIST
71567: LIST
71568: LIST
71569: LIST
71570: LIST
71571: LIST
71572: LIST
71573: PUSH
71574: LD_STRING E
71576: PUSH
71577: LD_INT 0
71579: PUSH
71580: LD_INT 0
71582: PUSH
71583: LD_VAR 0 3
71587: PUSH
71588: LD_INT 0
71590: PUSH
71591: LD_INT 0
71593: PUSH
71594: LD_INT 0
71596: PUSH
71597: EMPTY
71598: LIST
71599: LIST
71600: LIST
71601: LIST
71602: LIST
71603: LIST
71604: LIST
71605: PUSH
71606: EMPTY
71607: LIST
71608: LIST
71609: PPUSH
71610: CALL_OW 446
// end ;
71614: LD_VAR 0 2
71618: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
71619: LD_INT 0
71621: PPUSH
71622: PPUSH
// if not driver or not IsInUnit ( driver ) then
71623: LD_VAR 0 1
71627: NOT
71628: PUSH
71629: LD_VAR 0 1
71633: PPUSH
71634: CALL_OW 310
71638: NOT
71639: OR
71640: IFFALSE 71644
// exit ;
71642: GO 71734
// vehicle := IsInUnit ( driver ) ;
71644: LD_ADDR_VAR 0 3
71648: PUSH
71649: LD_VAR 0 1
71653: PPUSH
71654: CALL_OW 310
71658: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
71659: LD_VAR 0 1
71663: PPUSH
71664: LD_STRING \
71666: PUSH
71667: LD_INT 0
71669: PUSH
71670: LD_INT 0
71672: PUSH
71673: LD_INT 0
71675: PUSH
71676: LD_INT 0
71678: PUSH
71679: LD_INT 0
71681: PUSH
71682: LD_INT 0
71684: PUSH
71685: EMPTY
71686: LIST
71687: LIST
71688: LIST
71689: LIST
71690: LIST
71691: LIST
71692: LIST
71693: PUSH
71694: LD_STRING E
71696: PUSH
71697: LD_INT 0
71699: PUSH
71700: LD_INT 0
71702: PUSH
71703: LD_VAR 0 3
71707: PUSH
71708: LD_INT 0
71710: PUSH
71711: LD_INT 0
71713: PUSH
71714: LD_INT 0
71716: PUSH
71717: EMPTY
71718: LIST
71719: LIST
71720: LIST
71721: LIST
71722: LIST
71723: LIST
71724: LIST
71725: PUSH
71726: EMPTY
71727: LIST
71728: LIST
71729: PPUSH
71730: CALL_OW 447
// end ;
71734: LD_VAR 0 2
71738: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
71739: LD_INT 0
71741: PPUSH
71742: PPUSH
71743: PPUSH
// tmp := [ ] ;
71744: LD_ADDR_VAR 0 5
71748: PUSH
71749: EMPTY
71750: ST_TO_ADDR
// for i in units do
71751: LD_ADDR_VAR 0 4
71755: PUSH
71756: LD_VAR 0 1
71760: PUSH
71761: FOR_IN
71762: IFFALSE 71800
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
71764: LD_ADDR_VAR 0 5
71768: PUSH
71769: LD_VAR 0 5
71773: PPUSH
71774: LD_VAR 0 5
71778: PUSH
71779: LD_INT 1
71781: PLUS
71782: PPUSH
71783: LD_VAR 0 4
71787: PPUSH
71788: CALL_OW 256
71792: PPUSH
71793: CALL_OW 2
71797: ST_TO_ADDR
71798: GO 71761
71800: POP
71801: POP
// if not tmp then
71802: LD_VAR 0 5
71806: NOT
71807: IFFALSE 71811
// exit ;
71809: GO 71859
// if asc then
71811: LD_VAR 0 2
71815: IFFALSE 71839
// result := SortListByListAsc ( units , tmp ) else
71817: LD_ADDR_VAR 0 3
71821: PUSH
71822: LD_VAR 0 1
71826: PPUSH
71827: LD_VAR 0 5
71831: PPUSH
71832: CALL_OW 76
71836: ST_TO_ADDR
71837: GO 71859
// result := SortListByListDesc ( units , tmp ) ;
71839: LD_ADDR_VAR 0 3
71843: PUSH
71844: LD_VAR 0 1
71848: PPUSH
71849: LD_VAR 0 5
71853: PPUSH
71854: CALL_OW 77
71858: ST_TO_ADDR
// end ;
71859: LD_VAR 0 3
71863: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
71864: LD_INT 0
71866: PPUSH
71867: PPUSH
// task := GetTaskList ( mech ) ;
71868: LD_ADDR_VAR 0 4
71872: PUSH
71873: LD_VAR 0 1
71877: PPUSH
71878: CALL_OW 437
71882: ST_TO_ADDR
// if not task then
71883: LD_VAR 0 4
71887: NOT
71888: IFFALSE 71892
// exit ;
71890: GO 71934
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
71892: LD_ADDR_VAR 0 3
71896: PUSH
71897: LD_VAR 0 4
71901: PUSH
71902: LD_INT 1
71904: ARRAY
71905: PUSH
71906: LD_INT 1
71908: ARRAY
71909: PUSH
71910: LD_STRING r
71912: EQUAL
71913: PUSH
71914: LD_VAR 0 4
71918: PUSH
71919: LD_INT 1
71921: ARRAY
71922: PUSH
71923: LD_INT 4
71925: ARRAY
71926: PUSH
71927: LD_VAR 0 2
71931: EQUAL
71932: AND
71933: ST_TO_ADDR
// end ;
71934: LD_VAR 0 3
71938: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
71939: LD_INT 0
71941: PPUSH
// SetDir ( unit , d ) ;
71942: LD_VAR 0 1
71946: PPUSH
71947: LD_VAR 0 4
71951: PPUSH
71952: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
71956: LD_VAR 0 1
71960: PPUSH
71961: LD_VAR 0 2
71965: PPUSH
71966: LD_VAR 0 3
71970: PPUSH
71971: LD_VAR 0 5
71975: PPUSH
71976: CALL_OW 48
// end ;
71980: LD_VAR 0 6
71984: RET
// export function ToNaturalNumber ( number ) ; begin
71985: LD_INT 0
71987: PPUSH
// result := number div 1 ;
71988: LD_ADDR_VAR 0 2
71992: PUSH
71993: LD_VAR 0 1
71997: PUSH
71998: LD_INT 1
72000: DIV
72001: ST_TO_ADDR
// if number < 0 then
72002: LD_VAR 0 1
72006: PUSH
72007: LD_INT 0
72009: LESS
72010: IFFALSE 72020
// result := 0 ;
72012: LD_ADDR_VAR 0 2
72016: PUSH
72017: LD_INT 0
72019: ST_TO_ADDR
// end ;
72020: LD_VAR 0 2
72024: RET
// export function SortByClass ( units , class ) ; var un ; begin
72025: LD_INT 0
72027: PPUSH
72028: PPUSH
// if not units or not class then
72029: LD_VAR 0 1
72033: NOT
72034: PUSH
72035: LD_VAR 0 2
72039: NOT
72040: OR
72041: IFFALSE 72045
// exit ;
72043: GO 72140
// result := [ ] ;
72045: LD_ADDR_VAR 0 3
72049: PUSH
72050: EMPTY
72051: ST_TO_ADDR
// for un in units do
72052: LD_ADDR_VAR 0 4
72056: PUSH
72057: LD_VAR 0 1
72061: PUSH
72062: FOR_IN
72063: IFFALSE 72138
// if GetClass ( un ) = class then
72065: LD_VAR 0 4
72069: PPUSH
72070: CALL_OW 257
72074: PUSH
72075: LD_VAR 0 2
72079: EQUAL
72080: IFFALSE 72107
// result := Insert ( result , 1 , un ) else
72082: LD_ADDR_VAR 0 3
72086: PUSH
72087: LD_VAR 0 3
72091: PPUSH
72092: LD_INT 1
72094: PPUSH
72095: LD_VAR 0 4
72099: PPUSH
72100: CALL_OW 2
72104: ST_TO_ADDR
72105: GO 72136
// result := Replace ( result , result + 1 , un ) ;
72107: LD_ADDR_VAR 0 3
72111: PUSH
72112: LD_VAR 0 3
72116: PPUSH
72117: LD_VAR 0 3
72121: PUSH
72122: LD_INT 1
72124: PLUS
72125: PPUSH
72126: LD_VAR 0 4
72130: PPUSH
72131: CALL_OW 1
72135: ST_TO_ADDR
72136: GO 72062
72138: POP
72139: POP
// end ;
72140: LD_VAR 0 3
72144: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
72145: LD_INT 0
72147: PPUSH
72148: PPUSH
72149: PPUSH
72150: PPUSH
72151: PPUSH
72152: PPUSH
72153: PPUSH
// result := [ ] ;
72154: LD_ADDR_VAR 0 4
72158: PUSH
72159: EMPTY
72160: ST_TO_ADDR
// if x - r < 0 then
72161: LD_VAR 0 1
72165: PUSH
72166: LD_VAR 0 3
72170: MINUS
72171: PUSH
72172: LD_INT 0
72174: LESS
72175: IFFALSE 72187
// min_x := 0 else
72177: LD_ADDR_VAR 0 8
72181: PUSH
72182: LD_INT 0
72184: ST_TO_ADDR
72185: GO 72203
// min_x := x - r ;
72187: LD_ADDR_VAR 0 8
72191: PUSH
72192: LD_VAR 0 1
72196: PUSH
72197: LD_VAR 0 3
72201: MINUS
72202: ST_TO_ADDR
// if y - r < 0 then
72203: LD_VAR 0 2
72207: PUSH
72208: LD_VAR 0 3
72212: MINUS
72213: PUSH
72214: LD_INT 0
72216: LESS
72217: IFFALSE 72229
// min_y := 0 else
72219: LD_ADDR_VAR 0 7
72223: PUSH
72224: LD_INT 0
72226: ST_TO_ADDR
72227: GO 72245
// min_y := y - r ;
72229: LD_ADDR_VAR 0 7
72233: PUSH
72234: LD_VAR 0 2
72238: PUSH
72239: LD_VAR 0 3
72243: MINUS
72244: ST_TO_ADDR
// max_x := x + r ;
72245: LD_ADDR_VAR 0 9
72249: PUSH
72250: LD_VAR 0 1
72254: PUSH
72255: LD_VAR 0 3
72259: PLUS
72260: ST_TO_ADDR
// max_y := y + r ;
72261: LD_ADDR_VAR 0 10
72265: PUSH
72266: LD_VAR 0 2
72270: PUSH
72271: LD_VAR 0 3
72275: PLUS
72276: ST_TO_ADDR
// for _x = min_x to max_x do
72277: LD_ADDR_VAR 0 5
72281: PUSH
72282: DOUBLE
72283: LD_VAR 0 8
72287: DEC
72288: ST_TO_ADDR
72289: LD_VAR 0 9
72293: PUSH
72294: FOR_TO
72295: IFFALSE 72396
// for _y = min_y to max_y do
72297: LD_ADDR_VAR 0 6
72301: PUSH
72302: DOUBLE
72303: LD_VAR 0 7
72307: DEC
72308: ST_TO_ADDR
72309: LD_VAR 0 10
72313: PUSH
72314: FOR_TO
72315: IFFALSE 72392
// begin if not ValidHex ( _x , _y ) then
72317: LD_VAR 0 5
72321: PPUSH
72322: LD_VAR 0 6
72326: PPUSH
72327: CALL_OW 488
72331: NOT
72332: IFFALSE 72336
// continue ;
72334: GO 72314
// if GetResourceTypeXY ( _x , _y ) then
72336: LD_VAR 0 5
72340: PPUSH
72341: LD_VAR 0 6
72345: PPUSH
72346: CALL_OW 283
72350: IFFALSE 72390
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
72352: LD_ADDR_VAR 0 4
72356: PUSH
72357: LD_VAR 0 4
72361: PPUSH
72362: LD_VAR 0 4
72366: PUSH
72367: LD_INT 1
72369: PLUS
72370: PPUSH
72371: LD_VAR 0 5
72375: PUSH
72376: LD_VAR 0 6
72380: PUSH
72381: EMPTY
72382: LIST
72383: LIST
72384: PPUSH
72385: CALL_OW 1
72389: ST_TO_ADDR
// end ;
72390: GO 72314
72392: POP
72393: POP
72394: GO 72294
72396: POP
72397: POP
// end ;
72398: LD_VAR 0 4
72402: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
72403: LD_INT 0
72405: PPUSH
72406: PPUSH
72407: PPUSH
72408: PPUSH
72409: PPUSH
72410: PPUSH
72411: PPUSH
72412: PPUSH
// if not units then
72413: LD_VAR 0 1
72417: NOT
72418: IFFALSE 72422
// exit ;
72420: GO 72946
// result := UnitFilter ( units , [ f_ok ] ) ;
72422: LD_ADDR_VAR 0 3
72426: PUSH
72427: LD_VAR 0 1
72431: PPUSH
72432: LD_INT 50
72434: PUSH
72435: EMPTY
72436: LIST
72437: PPUSH
72438: CALL_OW 72
72442: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
72443: LD_ADDR_VAR 0 8
72447: PUSH
72448: LD_VAR 0 1
72452: PUSH
72453: LD_INT 1
72455: ARRAY
72456: PPUSH
72457: CALL_OW 255
72461: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
72462: LD_ADDR_VAR 0 10
72466: PUSH
72467: LD_INT 29
72469: PUSH
72470: LD_INT 91
72472: PUSH
72473: LD_INT 49
72475: PUSH
72476: EMPTY
72477: LIST
72478: LIST
72479: LIST
72480: ST_TO_ADDR
// if not result then
72481: LD_VAR 0 3
72485: NOT
72486: IFFALSE 72490
// exit ;
72488: GO 72946
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
72490: LD_ADDR_VAR 0 5
72494: PUSH
72495: LD_INT 81
72497: PUSH
72498: LD_VAR 0 8
72502: PUSH
72503: EMPTY
72504: LIST
72505: LIST
72506: PPUSH
72507: CALL_OW 69
72511: ST_TO_ADDR
// for i in result do
72512: LD_ADDR_VAR 0 4
72516: PUSH
72517: LD_VAR 0 3
72521: PUSH
72522: FOR_IN
72523: IFFALSE 72944
// begin tag := GetTag ( i ) + 1 ;
72525: LD_ADDR_VAR 0 9
72529: PUSH
72530: LD_VAR 0 4
72534: PPUSH
72535: CALL_OW 110
72539: PUSH
72540: LD_INT 1
72542: PLUS
72543: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
72544: LD_ADDR_VAR 0 7
72548: PUSH
72549: LD_VAR 0 4
72553: PPUSH
72554: CALL_OW 250
72558: PPUSH
72559: LD_VAR 0 4
72563: PPUSH
72564: CALL_OW 251
72568: PPUSH
72569: LD_INT 6
72571: PPUSH
72572: CALL 72145 0 3
72576: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
72577: LD_VAR 0 4
72581: PPUSH
72582: CALL_OW 247
72586: PUSH
72587: LD_INT 2
72589: EQUAL
72590: PUSH
72591: LD_VAR 0 7
72595: AND
72596: PUSH
72597: LD_VAR 0 4
72601: PPUSH
72602: CALL_OW 264
72606: PUSH
72607: LD_VAR 0 10
72611: IN
72612: NOT
72613: AND
72614: IFFALSE 72653
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
72616: LD_VAR 0 4
72620: PPUSH
72621: LD_VAR 0 7
72625: PUSH
72626: LD_INT 1
72628: ARRAY
72629: PUSH
72630: LD_INT 1
72632: ARRAY
72633: PPUSH
72634: LD_VAR 0 7
72638: PUSH
72639: LD_INT 1
72641: ARRAY
72642: PUSH
72643: LD_INT 2
72645: ARRAY
72646: PPUSH
72647: CALL_OW 116
72651: GO 72942
// if path > tag then
72653: LD_VAR 0 2
72657: PUSH
72658: LD_VAR 0 9
72662: GREATER
72663: IFFALSE 72871
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
72665: LD_ADDR_VAR 0 6
72669: PUSH
72670: LD_VAR 0 5
72674: PPUSH
72675: LD_INT 91
72677: PUSH
72678: LD_VAR 0 4
72682: PUSH
72683: LD_INT 8
72685: PUSH
72686: EMPTY
72687: LIST
72688: LIST
72689: LIST
72690: PPUSH
72691: CALL_OW 72
72695: ST_TO_ADDR
// if nearEnemy then
72696: LD_VAR 0 6
72700: IFFALSE 72769
// begin if GetWeapon ( i ) = ru_time_lapser then
72702: LD_VAR 0 4
72706: PPUSH
72707: CALL_OW 264
72711: PUSH
72712: LD_INT 49
72714: EQUAL
72715: IFFALSE 72743
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
72717: LD_VAR 0 4
72721: PPUSH
72722: LD_VAR 0 6
72726: PPUSH
72727: LD_VAR 0 4
72731: PPUSH
72732: CALL_OW 74
72736: PPUSH
72737: CALL_OW 112
72741: GO 72767
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
72743: LD_VAR 0 4
72747: PPUSH
72748: LD_VAR 0 6
72752: PPUSH
72753: LD_VAR 0 4
72757: PPUSH
72758: CALL_OW 74
72762: PPUSH
72763: CALL_OW 115
// end else
72767: GO 72869
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
72769: LD_VAR 0 4
72773: PPUSH
72774: LD_VAR 0 2
72778: PUSH
72779: LD_VAR 0 9
72783: ARRAY
72784: PUSH
72785: LD_INT 1
72787: ARRAY
72788: PPUSH
72789: LD_VAR 0 2
72793: PUSH
72794: LD_VAR 0 9
72798: ARRAY
72799: PUSH
72800: LD_INT 2
72802: ARRAY
72803: PPUSH
72804: CALL_OW 297
72808: PUSH
72809: LD_INT 6
72811: GREATER
72812: IFFALSE 72855
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
72814: LD_VAR 0 4
72818: PPUSH
72819: LD_VAR 0 2
72823: PUSH
72824: LD_VAR 0 9
72828: ARRAY
72829: PUSH
72830: LD_INT 1
72832: ARRAY
72833: PPUSH
72834: LD_VAR 0 2
72838: PUSH
72839: LD_VAR 0 9
72843: ARRAY
72844: PUSH
72845: LD_INT 2
72847: ARRAY
72848: PPUSH
72849: CALL_OW 114
72853: GO 72869
// SetTag ( i , tag ) ;
72855: LD_VAR 0 4
72859: PPUSH
72860: LD_VAR 0 9
72864: PPUSH
72865: CALL_OW 109
// end else
72869: GO 72942
// if enemy then
72871: LD_VAR 0 5
72875: IFFALSE 72942
// begin if GetWeapon ( i ) = ru_time_lapser then
72877: LD_VAR 0 4
72881: PPUSH
72882: CALL_OW 264
72886: PUSH
72887: LD_INT 49
72889: EQUAL
72890: IFFALSE 72918
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
72892: LD_VAR 0 4
72896: PPUSH
72897: LD_VAR 0 5
72901: PPUSH
72902: LD_VAR 0 4
72906: PPUSH
72907: CALL_OW 74
72911: PPUSH
72912: CALL_OW 112
72916: GO 72942
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
72918: LD_VAR 0 4
72922: PPUSH
72923: LD_VAR 0 5
72927: PPUSH
72928: LD_VAR 0 4
72932: PPUSH
72933: CALL_OW 74
72937: PPUSH
72938: CALL_OW 115
// end ; end ;
72942: GO 72522
72944: POP
72945: POP
// end ;
72946: LD_VAR 0 3
72950: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
72951: LD_INT 0
72953: PPUSH
72954: PPUSH
72955: PPUSH
// if not unit or IsInUnit ( unit ) then
72956: LD_VAR 0 1
72960: NOT
72961: PUSH
72962: LD_VAR 0 1
72966: PPUSH
72967: CALL_OW 310
72971: OR
72972: IFFALSE 72976
// exit ;
72974: GO 73067
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
72976: LD_ADDR_VAR 0 4
72980: PUSH
72981: LD_VAR 0 1
72985: PPUSH
72986: CALL_OW 250
72990: PPUSH
72991: LD_VAR 0 2
72995: PPUSH
72996: LD_INT 1
72998: PPUSH
72999: CALL_OW 272
73003: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
73004: LD_ADDR_VAR 0 5
73008: PUSH
73009: LD_VAR 0 1
73013: PPUSH
73014: CALL_OW 251
73018: PPUSH
73019: LD_VAR 0 2
73023: PPUSH
73024: LD_INT 1
73026: PPUSH
73027: CALL_OW 273
73031: ST_TO_ADDR
// if ValidHex ( x , y ) then
73032: LD_VAR 0 4
73036: PPUSH
73037: LD_VAR 0 5
73041: PPUSH
73042: CALL_OW 488
73046: IFFALSE 73067
// ComTurnXY ( unit , x , y ) ;
73048: LD_VAR 0 1
73052: PPUSH
73053: LD_VAR 0 4
73057: PPUSH
73058: LD_VAR 0 5
73062: PPUSH
73063: CALL_OW 118
// end ;
73067: LD_VAR 0 3
73071: RET
// export function SeeUnits ( side , units ) ; var i ; begin
73072: LD_INT 0
73074: PPUSH
73075: PPUSH
// result := false ;
73076: LD_ADDR_VAR 0 3
73080: PUSH
73081: LD_INT 0
73083: ST_TO_ADDR
// if not units then
73084: LD_VAR 0 2
73088: NOT
73089: IFFALSE 73093
// exit ;
73091: GO 73138
// for i in units do
73093: LD_ADDR_VAR 0 4
73097: PUSH
73098: LD_VAR 0 2
73102: PUSH
73103: FOR_IN
73104: IFFALSE 73136
// if See ( side , i ) then
73106: LD_VAR 0 1
73110: PPUSH
73111: LD_VAR 0 4
73115: PPUSH
73116: CALL_OW 292
73120: IFFALSE 73134
// begin result := true ;
73122: LD_ADDR_VAR 0 3
73126: PUSH
73127: LD_INT 1
73129: ST_TO_ADDR
// exit ;
73130: POP
73131: POP
73132: GO 73138
// end ;
73134: GO 73103
73136: POP
73137: POP
// end ;
73138: LD_VAR 0 3
73142: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
73143: LD_INT 0
73145: PPUSH
73146: PPUSH
73147: PPUSH
73148: PPUSH
// if not unit or not points then
73149: LD_VAR 0 1
73153: NOT
73154: PUSH
73155: LD_VAR 0 2
73159: NOT
73160: OR
73161: IFFALSE 73165
// exit ;
73163: GO 73255
// dist := 99999 ;
73165: LD_ADDR_VAR 0 5
73169: PUSH
73170: LD_INT 99999
73172: ST_TO_ADDR
// for i in points do
73173: LD_ADDR_VAR 0 4
73177: PUSH
73178: LD_VAR 0 2
73182: PUSH
73183: FOR_IN
73184: IFFALSE 73253
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
73186: LD_ADDR_VAR 0 6
73190: PUSH
73191: LD_VAR 0 1
73195: PPUSH
73196: LD_VAR 0 4
73200: PUSH
73201: LD_INT 1
73203: ARRAY
73204: PPUSH
73205: LD_VAR 0 4
73209: PUSH
73210: LD_INT 2
73212: ARRAY
73213: PPUSH
73214: CALL_OW 297
73218: ST_TO_ADDR
// if tmpDist < dist then
73219: LD_VAR 0 6
73223: PUSH
73224: LD_VAR 0 5
73228: LESS
73229: IFFALSE 73251
// begin result := i ;
73231: LD_ADDR_VAR 0 3
73235: PUSH
73236: LD_VAR 0 4
73240: ST_TO_ADDR
// dist := tmpDist ;
73241: LD_ADDR_VAR 0 5
73245: PUSH
73246: LD_VAR 0 6
73250: ST_TO_ADDR
// end ; end ;
73251: GO 73183
73253: POP
73254: POP
// end ;
73255: LD_VAR 0 3
73259: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
73260: LD_INT 0
73262: PPUSH
// uc_side := side ;
73263: LD_ADDR_OWVAR 20
73267: PUSH
73268: LD_VAR 0 1
73272: ST_TO_ADDR
// uc_nation := 3 ;
73273: LD_ADDR_OWVAR 21
73277: PUSH
73278: LD_INT 3
73280: ST_TO_ADDR
// vc_chassis := 25 ;
73281: LD_ADDR_OWVAR 37
73285: PUSH
73286: LD_INT 25
73288: ST_TO_ADDR
// vc_engine := engine_siberite ;
73289: LD_ADDR_OWVAR 39
73293: PUSH
73294: LD_INT 3
73296: ST_TO_ADDR
// vc_control := control_computer ;
73297: LD_ADDR_OWVAR 38
73301: PUSH
73302: LD_INT 3
73304: ST_TO_ADDR
// vc_weapon := 59 ;
73305: LD_ADDR_OWVAR 40
73309: PUSH
73310: LD_INT 59
73312: ST_TO_ADDR
// result := CreateVehicle ;
73313: LD_ADDR_VAR 0 5
73317: PUSH
73318: CALL_OW 45
73322: ST_TO_ADDR
// SetDir ( result , d ) ;
73323: LD_VAR 0 5
73327: PPUSH
73328: LD_VAR 0 4
73332: PPUSH
73333: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
73337: LD_VAR 0 5
73341: PPUSH
73342: LD_VAR 0 2
73346: PPUSH
73347: LD_VAR 0 3
73351: PPUSH
73352: LD_INT 0
73354: PPUSH
73355: CALL_OW 48
// end ;
73359: LD_VAR 0 5
73363: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
73364: LD_INT 0
73366: PPUSH
73367: PPUSH
73368: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
73369: LD_ADDR_VAR 0 2
73373: PUSH
73374: LD_INT 0
73376: PUSH
73377: LD_INT 0
73379: PUSH
73380: LD_INT 0
73382: PUSH
73383: LD_INT 0
73385: PUSH
73386: EMPTY
73387: LIST
73388: LIST
73389: LIST
73390: LIST
73391: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
73392: LD_VAR 0 1
73396: NOT
73397: PUSH
73398: LD_VAR 0 1
73402: PPUSH
73403: CALL_OW 264
73407: PUSH
73408: LD_INT 12
73410: PUSH
73411: LD_INT 51
73413: PUSH
73414: LD_INT 32
73416: PUSH
73417: LD_INT 89
73419: PUSH
73420: EMPTY
73421: LIST
73422: LIST
73423: LIST
73424: LIST
73425: IN
73426: NOT
73427: OR
73428: IFFALSE 73432
// exit ;
73430: GO 73530
// for i := 1 to 3 do
73432: LD_ADDR_VAR 0 3
73436: PUSH
73437: DOUBLE
73438: LD_INT 1
73440: DEC
73441: ST_TO_ADDR
73442: LD_INT 3
73444: PUSH
73445: FOR_TO
73446: IFFALSE 73528
// begin tmp := GetCargo ( cargo , i ) ;
73448: LD_ADDR_VAR 0 4
73452: PUSH
73453: LD_VAR 0 1
73457: PPUSH
73458: LD_VAR 0 3
73462: PPUSH
73463: CALL_OW 289
73467: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
73468: LD_ADDR_VAR 0 2
73472: PUSH
73473: LD_VAR 0 2
73477: PPUSH
73478: LD_VAR 0 3
73482: PPUSH
73483: LD_VAR 0 4
73487: PPUSH
73488: CALL_OW 1
73492: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
73493: LD_ADDR_VAR 0 2
73497: PUSH
73498: LD_VAR 0 2
73502: PPUSH
73503: LD_INT 4
73505: PPUSH
73506: LD_VAR 0 2
73510: PUSH
73511: LD_INT 4
73513: ARRAY
73514: PUSH
73515: LD_VAR 0 4
73519: PLUS
73520: PPUSH
73521: CALL_OW 1
73525: ST_TO_ADDR
// end ;
73526: GO 73445
73528: POP
73529: POP
// end ;
73530: LD_VAR 0 2
73534: RET
// export function Length ( array ) ; begin
73535: LD_INT 0
73537: PPUSH
// result := array + 0 ;
73538: LD_ADDR_VAR 0 2
73542: PUSH
73543: LD_VAR 0 1
73547: PUSH
73548: LD_INT 0
73550: PLUS
73551: ST_TO_ADDR
// end ;
73552: LD_VAR 0 2
73556: RET
// export function PrepareArray ( array ) ; begin
73557: LD_INT 0
73559: PPUSH
// result := array diff 0 ;
73560: LD_ADDR_VAR 0 2
73564: PUSH
73565: LD_VAR 0 1
73569: PUSH
73570: LD_INT 0
73572: DIFF
73573: ST_TO_ADDR
// if not result [ 1 ] then
73574: LD_VAR 0 2
73578: PUSH
73579: LD_INT 1
73581: ARRAY
73582: NOT
73583: IFFALSE 73603
// result := Delete ( result , 1 ) ;
73585: LD_ADDR_VAR 0 2
73589: PUSH
73590: LD_VAR 0 2
73594: PPUSH
73595: LD_INT 1
73597: PPUSH
73598: CALL_OW 3
73602: ST_TO_ADDR
// end ;
73603: LD_VAR 0 2
73607: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
73608: LD_INT 0
73610: PPUSH
73611: PPUSH
73612: PPUSH
73613: PPUSH
// sibRocketRange := 25 ;
73614: LD_ADDR_VAR 0 6
73618: PUSH
73619: LD_INT 25
73621: ST_TO_ADDR
// result := false ;
73622: LD_ADDR_VAR 0 4
73626: PUSH
73627: LD_INT 0
73629: ST_TO_ADDR
// for i := 0 to 5 do
73630: LD_ADDR_VAR 0 5
73634: PUSH
73635: DOUBLE
73636: LD_INT 0
73638: DEC
73639: ST_TO_ADDR
73640: LD_INT 5
73642: PUSH
73643: FOR_TO
73644: IFFALSE 73711
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
73646: LD_VAR 0 1
73650: PPUSH
73651: LD_VAR 0 5
73655: PPUSH
73656: LD_VAR 0 6
73660: PPUSH
73661: CALL_OW 272
73665: PPUSH
73666: LD_VAR 0 2
73670: PPUSH
73671: LD_VAR 0 5
73675: PPUSH
73676: LD_VAR 0 6
73680: PPUSH
73681: CALL_OW 273
73685: PPUSH
73686: LD_VAR 0 3
73690: PPUSH
73691: CALL_OW 309
73695: IFFALSE 73709
// begin result := true ;
73697: LD_ADDR_VAR 0 4
73701: PUSH
73702: LD_INT 1
73704: ST_TO_ADDR
// exit ;
73705: POP
73706: POP
73707: GO 73713
// end ;
73709: GO 73643
73711: POP
73712: POP
// end ;
73713: LD_VAR 0 4
73717: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
73718: LD_INT 0
73720: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
73721: LD_VAR 0 1
73725: PPUSH
73726: LD_VAR 0 2
73730: PPUSH
73731: LD_INT 0
73733: PPUSH
73734: LD_INT 0
73736: PPUSH
73737: LD_INT 1
73739: PPUSH
73740: LD_INT 0
73742: PPUSH
73743: CALL_OW 587
// end ; end_of_file
73747: LD_VAR 0 3
73751: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
73752: LD_VAR 0 1
73756: PUSH
73757: LD_INT 200
73759: DOUBLE
73760: GREATEREQUAL
73761: IFFALSE 73769
73763: LD_INT 299
73765: DOUBLE
73766: LESSEQUAL
73767: IFTRUE 73771
73769: GO 73803
73771: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
73772: LD_VAR 0 1
73776: PPUSH
73777: LD_VAR 0 2
73781: PPUSH
73782: LD_VAR 0 3
73786: PPUSH
73787: LD_VAR 0 4
73791: PPUSH
73792: LD_VAR 0 5
73796: PPUSH
73797: CALL 28418 0 5
73801: GO 73880
73803: LD_INT 300
73805: DOUBLE
73806: GREATEREQUAL
73807: IFFALSE 73815
73809: LD_INT 399
73811: DOUBLE
73812: LESSEQUAL
73813: IFTRUE 73817
73815: GO 73879
73817: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
73818: LD_VAR 0 1
73822: PPUSH
73823: LD_VAR 0 2
73827: PPUSH
73828: LD_VAR 0 3
73832: PPUSH
73833: LD_VAR 0 4
73837: PPUSH
73838: LD_VAR 0 5
73842: PPUSH
73843: LD_VAR 0 6
73847: PPUSH
73848: LD_VAR 0 7
73852: PPUSH
73853: LD_VAR 0 8
73857: PPUSH
73858: LD_VAR 0 9
73862: PPUSH
73863: LD_VAR 0 10
73867: PPUSH
73868: LD_VAR 0 11
73872: PPUSH
73873: CALL 24751 0 11
73877: GO 73880
73879: POP
// end ;
73880: PPOPN 11
73882: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
73883: LD_VAR 0 1
73887: PPUSH
73888: LD_VAR 0 2
73892: PPUSH
73893: LD_VAR 0 3
73897: PPUSH
73898: LD_VAR 0 4
73902: PPUSH
73903: LD_VAR 0 5
73907: PPUSH
73908: CALL 28154 0 5
// end ; end_of_file
73912: PPOPN 5
73914: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
73915: LD_VAR 0 1
73919: PPUSH
73920: LD_VAR 0 2
73924: PPUSH
73925: LD_VAR 0 3
73929: PPUSH
73930: LD_VAR 0 4
73934: PPUSH
73935: LD_VAR 0 5
73939: PPUSH
73940: LD_VAR 0 6
73944: PPUSH
73945: CALL 12371 0 6
// end ;
73949: PPOPN 6
73951: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
73952: LD_INT 0
73954: PPUSH
// begin if not units then
73955: LD_VAR 0 1
73959: NOT
73960: IFFALSE 73964
// exit ;
73962: GO 73964
// end ;
73964: PPOPN 7
73966: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
73967: CALL 12265 0 0
// end ;
73971: PPOPN 1
73973: END
