// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// Init ;
   8: CALL 44 0 0
// DebugMode ;
  12: CALL 265 0 0
// AnimateTrees ( true ) ;
  16: LD_INT 1
  18: PPUSH
  19: CALL_OW 573
// CreateNature ;
  23: CALL 1568 0 0
// PrepareRussians ;
  27: CALL 4559 0 0
// PrepareAmericans ;
  31: CALL 3448 0 0
// Action ;
  35: CALL 8677 0 0
// SaveForQuickRestart ;
  39: CALL_OW 22
// end ;
  43: END
// export debug ; export mission_prev_prefix , mission_prefix ; export buildings_counter , time_to_end , can_end , must_end , kill_counter ; function Init ; begin
  44: LD_INT 0
  46: PPUSH
// debug := false ;
  47: LD_ADDR_EXP 1
  51: PUSH
  52: LD_INT 0
  54: ST_TO_ADDR
// mission_prefix := 07c_ ;
  55: LD_ADDR_EXP 3
  59: PUSH
  60: LD_STRING 07c_
  62: ST_TO_ADDR
// mission_prev_prefix := 07_ ;
  63: LD_ADDR_EXP 2
  67: PUSH
  68: LD_STRING 07_
  70: ST_TO_ADDR
// buildings_counter := 0 ;
  71: LD_ADDR_EXP 4
  75: PUSH
  76: LD_INT 0
  78: ST_TO_ADDR
// time_to_end := [ [ 32 32$00 , 29 29$00 , 26 26$00 , 23 23$00 ] [ Difficulty ] , [ 38 38$00 , 36 36$00 , 34 34$00 , 32 32$00 ] [ Difficulty ] , [ 43 43$00 , 41 41$00 , 39 39$00 , 37 37$00 ] [ Difficulty ] ] ;
  79: LD_ADDR_EXP 5
  83: PUSH
  84: LD_INT 67200
  86: PUSH
  87: LD_INT 60900
  89: PUSH
  90: LD_INT 54600
  92: PUSH
  93: LD_INT 48300
  95: PUSH
  96: EMPTY
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: PUSH
 102: LD_OWVAR 67
 106: ARRAY
 107: PUSH
 108: LD_INT 79800
 110: PUSH
 111: LD_INT 75600
 113: PUSH
 114: LD_INT 71400
 116: PUSH
 117: LD_INT 67200
 119: PUSH
 120: EMPTY
 121: LIST
 122: LIST
 123: LIST
 124: LIST
 125: PUSH
 126: LD_OWVAR 67
 130: ARRAY
 131: PUSH
 132: LD_INT 90300
 134: PUSH
 135: LD_INT 86100
 137: PUSH
 138: LD_INT 81900
 140: PUSH
 141: LD_INT 77700
 143: PUSH
 144: EMPTY
 145: LIST
 146: LIST
 147: LIST
 148: LIST
 149: PUSH
 150: LD_OWVAR 67
 154: ARRAY
 155: PUSH
 156: EMPTY
 157: LIST
 158: LIST
 159: LIST
 160: ST_TO_ADDR
// can_end := false ;
 161: LD_ADDR_EXP 6
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// must_end := false ;
 169: LD_ADDR_EXP 7
 173: PUSH
 174: LD_INT 0
 176: ST_TO_ADDR
// kill_counter := 0 ;
 177: LD_ADDR_EXP 8
 181: PUSH
 182: LD_INT 0
 184: ST_TO_ADDR
// end ;
 185: LD_VAR 0 1
 189: RET
// every 0 0$01 trigger not debug do
 190: LD_EXP 1
 194: NOT
 195: IFFALSE 264
 197: GO 199
 199: DISABLE
// begin enable ;
 200: ENABLE
// if not must_end then
 201: LD_EXP 7
 205: NOT
 206: IFFALSE 227
// display_strings := [ #Am07-1 , tick ] else
 208: LD_ADDR_OWVAR 47
 212: PUSH
 213: LD_STRING #Am07-1
 215: PUSH
 216: LD_OWVAR 1
 220: PUSH
 221: EMPTY
 222: LIST
 223: LIST
 224: ST_TO_ADDR
 225: GO 264
// display_strings := [ #Am07-1 , tick , #Am07-2 , time_to_end [ 3 ] - tick ] ;
 227: LD_ADDR_OWVAR 47
 231: PUSH
 232: LD_STRING #Am07-1
 234: PUSH
 235: LD_OWVAR 1
 239: PUSH
 240: LD_STRING #Am07-2
 242: PUSH
 243: LD_EXP 5
 247: PUSH
 248: LD_INT 3
 250: ARRAY
 251: PUSH
 252: LD_OWVAR 1
 256: MINUS
 257: PUSH
 258: EMPTY
 259: LIST
 260: LIST
 261: LIST
 262: LIST
 263: ST_TO_ADDR
// end ;
 264: END
// function DebugMode ; var i ; begin
 265: LD_INT 0
 267: PPUSH
 268: PPUSH
// if not debug then
 269: LD_EXP 1
 273: NOT
 274: IFFALSE 278
// exit ;
 276: GO 293
// Difficulty := 4 ;
 278: LD_ADDR_OWVAR 67
 282: PUSH
 283: LD_INT 4
 285: ST_TO_ADDR
// FogOff ( 1 ) ;
 286: LD_INT 1
 288: PPUSH
 289: CALL_OW 344
// end ;
 293: LD_VAR 0 1
 297: RET
// every 3 trigger debug do var i , filter ;
 298: LD_EXP 1
 302: IFFALSE 391
 304: GO 306
 306: DISABLE
 307: LD_INT 0
 309: PPUSH
 310: PPUSH
// begin enable ;
 311: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 500 ] ] ] ) ;
 312: LD_ADDR_VAR 0 2
 316: PUSH
 317: LD_INT 22
 319: PUSH
 320: LD_INT 1
 322: PUSH
 323: EMPTY
 324: LIST
 325: LIST
 326: PUSH
 327: LD_INT 3
 329: PUSH
 330: LD_INT 24
 332: PUSH
 333: LD_INT 500
 335: PUSH
 336: EMPTY
 337: LIST
 338: LIST
 339: PUSH
 340: EMPTY
 341: LIST
 342: LIST
 343: PUSH
 344: EMPTY
 345: LIST
 346: LIST
 347: PPUSH
 348: CALL_OW 69
 352: ST_TO_ADDR
// if not filter then
 353: LD_VAR 0 2
 357: NOT
 358: IFFALSE 362
// exit ;
 360: GO 391
// for i in filter do
 362: LD_ADDR_VAR 0 1
 366: PUSH
 367: LD_VAR 0 2
 371: PUSH
 372: FOR_IN
 373: IFFALSE 389
// SetLives ( i , 1000 ) ;
 375: LD_VAR 0 1
 379: PPUSH
 380: LD_INT 1000
 382: PPUSH
 383: CALL_OW 234
 387: GO 372
 389: POP
 390: POP
// end ;
 391: PPOPN 2
 393: END
// every 0 0$1 trigger kill_counter >= 20 do
 394: LD_EXP 8
 398: PUSH
 399: LD_INT 20
 401: GREATEREQUAL
 402: IFFALSE 414
 404: GO 406
 406: DISABLE
// SetAchievement ( ACH_HITMAN ) ;
 407: LD_STRING ACH_HITMAN
 409: PPUSH
 410: CALL_OW 543
 414: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] ] ) >= 3 do
 415: LD_INT 22
 417: PUSH
 418: LD_INT 1
 420: PUSH
 421: EMPTY
 422: LIST
 423: LIST
 424: PUSH
 425: LD_INT 23
 427: PUSH
 428: LD_INT 3
 430: PUSH
 431: EMPTY
 432: LIST
 433: LIST
 434: PUSH
 435: LD_INT 21
 437: PUSH
 438: LD_INT 2
 440: PUSH
 441: EMPTY
 442: LIST
 443: LIST
 444: PUSH
 445: EMPTY
 446: LIST
 447: LIST
 448: LIST
 449: PPUSH
 450: CALL_OW 69
 454: PUSH
 455: LD_INT 3
 457: GREATEREQUAL
 458: IFFALSE 470
 460: GO 462
 462: DISABLE
// SetAchievement ( ACH_TANKACE ) ;
 463: LD_STRING ACH_TANKACE
 465: PPUSH
 466: CALL_OW 543
 470: END
// every 0 0$1 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) = 0 do
 471: LD_INT 2
 473: PUSH
 474: LD_INT 30
 476: PUSH
 477: LD_INT 0
 479: PUSH
 480: EMPTY
 481: LIST
 482: LIST
 483: PUSH
 484: LD_INT 30
 486: PUSH
 487: LD_INT 1
 489: PUSH
 490: EMPTY
 491: LIST
 492: LIST
 493: PUSH
 494: EMPTY
 495: LIST
 496: LIST
 497: LIST
 498: PPUSH
 499: CALL_OW 69
 503: PUSH
 504: LD_INT 0
 506: EQUAL
 507: IFFALSE 519
 509: GO 511
 511: DISABLE
// SetAchievement ( ACH_COMMANDO ) ; end_of_file
 512: LD_STRING ACH_COMMANDO
 514: PPUSH
 515: CALL_OW 543
 519: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 520: LD_INT 0
 522: PPUSH
// uc_side := side ;
 523: LD_ADDR_OWVAR 20
 527: PUSH
 528: LD_VAR 0 1
 532: ST_TO_ADDR
// uc_nation := nation ;
 533: LD_ADDR_OWVAR 21
 537: PUSH
 538: LD_VAR 0 2
 542: ST_TO_ADDR
// vc_chassis := chassis ;
 543: LD_ADDR_OWVAR 37
 547: PUSH
 548: LD_VAR 0 3
 552: ST_TO_ADDR
// vc_engine := engine ;
 553: LD_ADDR_OWVAR 39
 557: PUSH
 558: LD_VAR 0 4
 562: ST_TO_ADDR
// vc_control := control ;
 563: LD_ADDR_OWVAR 38
 567: PUSH
 568: LD_VAR 0 5
 572: ST_TO_ADDR
// vc_weapon := weapon ;
 573: LD_ADDR_OWVAR 40
 577: PUSH
 578: LD_VAR 0 6
 582: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 583: LD_ADDR_OWVAR 41
 587: PUSH
 588: LD_VAR 0 7
 592: ST_TO_ADDR
// result := CreateVehicle ;
 593: LD_ADDR_VAR 0 8
 597: PUSH
 598: CALL_OW 45
 602: ST_TO_ADDR
// end ;
 603: LD_VAR 0 8
 607: RET
// export function GetRandom ( sex ) ; var i , filter ; begin
 608: LD_INT 0
 610: PPUSH
 611: PPUSH
 612: PPUSH
// filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam ] ;
 613: LD_ADDR_VAR 0 4
 617: PUSH
 618: LD_INT 22
 620: PUSH
 621: LD_INT 1
 623: PUSH
 624: EMPTY
 625: LIST
 626: LIST
 627: PUSH
 628: LD_INT 21
 630: PUSH
 631: LD_INT 1
 633: PUSH
 634: EMPTY
 635: LIST
 636: LIST
 637: PUSH
 638: LD_INT 50
 640: PUSH
 641: EMPTY
 642: LIST
 643: PUSH
 644: EMPTY
 645: LIST
 646: LIST
 647: LIST
 648: PPUSH
 649: CALL_OW 69
 653: PUSH
 654: LD_EXP 9
 658: PUSH
 659: LD_EXP 10
 663: PUSH
 664: LD_EXP 11
 668: PUSH
 669: LD_EXP 12
 673: PUSH
 674: LD_EXP 13
 678: PUSH
 679: LD_EXP 14
 683: PUSH
 684: LD_EXP 15
 688: PUSH
 689: LD_EXP 16
 693: PUSH
 694: LD_EXP 18
 698: PUSH
 699: LD_EXP 17
 703: PUSH
 704: EMPTY
 705: LIST
 706: LIST
 707: LIST
 708: LIST
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: LIST
 714: LIST
 715: DIFF
 716: ST_TO_ADDR
// if not filter then
 717: LD_VAR 0 4
 721: NOT
 722: IFFALSE 726
// exit ;
 724: GO 753
// result := UnitFilter ( filter , [ f_sex , sex ] ) ;
 726: LD_ADDR_VAR 0 2
 730: PUSH
 731: LD_VAR 0 4
 735: PPUSH
 736: LD_INT 26
 738: PUSH
 739: LD_VAR 0 1
 743: PUSH
 744: EMPTY
 745: LIST
 746: LIST
 747: PPUSH
 748: CALL_OW 72
 752: ST_TO_ADDR
// end ;
 753: LD_VAR 0 2
 757: RET
// export function SayX ( units , ident ) ; var i ; begin
 758: LD_INT 0
 760: PPUSH
 761: PPUSH
// result := false ;
 762: LD_ADDR_VAR 0 3
 766: PUSH
 767: LD_INT 0
 769: ST_TO_ADDR
// if not units then
 770: LD_VAR 0 1
 774: NOT
 775: IFFALSE 779
// exit ;
 777: GO 833
// for i in units do
 779: LD_ADDR_VAR 0 4
 783: PUSH
 784: LD_VAR 0 1
 788: PUSH
 789: FOR_IN
 790: IFFALSE 831
// if IsOk ( i ) then
 792: LD_VAR 0 4
 796: PPUSH
 797: CALL_OW 302
 801: IFFALSE 829
// begin Say ( i , ident ) ;
 803: LD_VAR 0 4
 807: PPUSH
 808: LD_VAR 0 2
 812: PPUSH
 813: CALL_OW 88
// result := i ;
 817: LD_ADDR_VAR 0 3
 821: PUSH
 822: LD_VAR 0 4
 826: ST_TO_ADDR
// break ;
 827: GO 831
// end ;
 829: GO 789
 831: POP
 832: POP
// end ;
 833: LD_VAR 0 3
 837: RET
// export function GoToAnotherTower ( un , b , x , y ) ; var i , filter , barracks , side ; begin
 838: LD_INT 0
 840: PPUSH
 841: PPUSH
 842: PPUSH
 843: PPUSH
 844: PPUSH
// if not un or not IsOk ( un ) then
 845: LD_VAR 0 1
 849: NOT
 850: PUSH
 851: LD_VAR 0 1
 855: PPUSH
 856: CALL_OW 302
 860: NOT
 861: OR
 862: IFFALSE 866
// exit ;
 864: GO 1173
// side := GetSide ( un ) ;
 866: LD_ADDR_VAR 0 9
 870: PUSH
 871: LD_VAR 0 1
 875: PPUSH
 876: CALL_OW 255
 880: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_not , [ f_tag , 7 ] ] , [ f_ok ] , [ f_empty ] ] ) diff b ;
 881: LD_ADDR_VAR 0 7
 885: PUSH
 886: LD_INT 22
 888: PUSH
 889: LD_VAR 0 9
 893: PUSH
 894: EMPTY
 895: LIST
 896: LIST
 897: PUSH
 898: LD_INT 30
 900: PUSH
 901: LD_INT 32
 903: PUSH
 904: EMPTY
 905: LIST
 906: LIST
 907: PUSH
 908: LD_INT 3
 910: PUSH
 911: LD_INT 120
 913: PUSH
 914: LD_INT 7
 916: PUSH
 917: EMPTY
 918: LIST
 919: LIST
 920: PUSH
 921: EMPTY
 922: LIST
 923: LIST
 924: PUSH
 925: LD_INT 50
 927: PUSH
 928: EMPTY
 929: LIST
 930: PUSH
 931: LD_INT 58
 933: PUSH
 934: EMPTY
 935: LIST
 936: PUSH
 937: EMPTY
 938: LIST
 939: LIST
 940: LIST
 941: LIST
 942: LIST
 943: PPUSH
 944: CALL_OW 69
 948: PUSH
 949: LD_VAR 0 2
 953: DIFF
 954: ST_TO_ADDR
// barracks := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_barracks ] ] ) ;
 955: LD_ADDR_VAR 0 8
 959: PUSH
 960: LD_INT 22
 962: PUSH
 963: LD_VAR 0 9
 967: PUSH
 968: EMPTY
 969: LIST
 970: LIST
 971: PUSH
 972: LD_INT 30
 974: PUSH
 975: LD_INT 5
 977: PUSH
 978: EMPTY
 979: LIST
 980: LIST
 981: PUSH
 982: EMPTY
 983: LIST
 984: LIST
 985: PPUSH
 986: CALL_OW 69
 990: ST_TO_ADDR
// if not filter then
 991: LD_VAR 0 7
 995: NOT
 996: IFFALSE 1086
// begin if barracks then
 998: LD_VAR 0 8
1002: IFFALSE 1065
// for i in barracks do
1004: LD_ADDR_VAR 0 6
1008: PUSH
1009: LD_VAR 0 8
1013: PUSH
1014: FOR_IN
1015: IFFALSE 1063
// begin if UnitsInside ( i ) < 6 and IsOk ( i ) then
1017: LD_VAR 0 6
1021: PPUSH
1022: CALL_OW 313
1026: PUSH
1027: LD_INT 6
1029: LESS
1030: PUSH
1031: LD_VAR 0 6
1035: PPUSH
1036: CALL_OW 302
1040: AND
1041: IFFALSE 1061
// begin ComEnterUnit ( un , i ) ;
1043: LD_VAR 0 1
1047: PPUSH
1048: LD_VAR 0 6
1052: PPUSH
1053: CALL_OW 120
// exit ;
1057: POP
1058: POP
1059: GO 1173
// end ; end ;
1061: GO 1014
1063: POP
1064: POP
// ComMoveXY ( un , x , y ) ;
1065: LD_VAR 0 1
1069: PPUSH
1070: LD_VAR 0 3
1074: PPUSH
1075: LD_VAR 0 4
1079: PPUSH
1080: CALL_OW 111
// end else
1084: GO 1173
// begin filter := SortByDistanceUnit ( un , filter , true , true ) ;
1086: LD_ADDR_VAR 0 7
1090: PUSH
1091: LD_VAR 0 1
1095: PPUSH
1096: LD_VAR 0 7
1100: PPUSH
1101: LD_INT 1
1103: PPUSH
1104: LD_INT 1
1106: PPUSH
1107: CALL 38416 0 4
1111: ST_TO_ADDR
// if filter then
1112: LD_VAR 0 7
1116: IFFALSE 1154
// begin SetTag ( filter [ 1 ] , 7 ) ;
1118: LD_VAR 0 7
1122: PUSH
1123: LD_INT 1
1125: ARRAY
1126: PPUSH
1127: LD_INT 7
1129: PPUSH
1130: CALL_OW 109
// ComEnterUnit ( un , filter [ 1 ] ) ;
1134: LD_VAR 0 1
1138: PPUSH
1139: LD_VAR 0 7
1143: PUSH
1144: LD_INT 1
1146: ARRAY
1147: PPUSH
1148: CALL_OW 120
// end else
1152: GO 1173
// ComMoveXY ( un , x , y ) ;
1154: LD_VAR 0 1
1158: PPUSH
1159: LD_VAR 0 3
1163: PPUSH
1164: LD_VAR 0 4
1168: PPUSH
1169: CALL_OW 111
// end ; end ;
1173: LD_VAR 0 5
1177: RET
// export function BaseNeedEnergy ( base ) ; var i , tmp ; begin
1178: LD_INT 0
1180: PPUSH
1181: PPUSH
1182: PPUSH
// if not base then
1183: LD_VAR 0 1
1187: NOT
1188: IFFALSE 1192
// exit ;
1190: GO 1250
// tmp := GetEnergy ( GetBase ( base ) ) ;
1192: LD_ADDR_VAR 0 4
1196: PUSH
1197: LD_VAR 0 1
1201: PPUSH
1202: CALL_OW 274
1206: PPUSH
1207: CALL_OW 278
1211: ST_TO_ADDR
// if tmp [ 1 ] > tmp [ 4 ] then
1212: LD_VAR 0 4
1216: PUSH
1217: LD_INT 1
1219: ARRAY
1220: PUSH
1221: LD_VAR 0 4
1225: PUSH
1226: LD_INT 4
1228: ARRAY
1229: GREATER
1230: IFFALSE 1242
// result := true else
1232: LD_ADDR_VAR 0 2
1236: PUSH
1237: LD_INT 1
1239: ST_TO_ADDR
1240: GO 1250
// result := false ;
1242: LD_ADDR_VAR 0 2
1246: PUSH
1247: LD_INT 0
1249: ST_TO_ADDR
// end ;
1250: LD_VAR 0 2
1254: RET
// export function FilterPeople ( side ) ; begin
1255: LD_INT 0
1257: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] ] ) ;
1258: LD_ADDR_VAR 0 2
1262: PUSH
1263: LD_INT 22
1265: PUSH
1266: LD_VAR 0 1
1270: PUSH
1271: EMPTY
1272: LIST
1273: LIST
1274: PUSH
1275: LD_INT 21
1277: PUSH
1278: LD_INT 1
1280: PUSH
1281: EMPTY
1282: LIST
1283: LIST
1284: PUSH
1285: EMPTY
1286: LIST
1287: LIST
1288: PPUSH
1289: CALL_OW 69
1293: ST_TO_ADDR
// end ;
1294: LD_VAR 0 2
1298: RET
// export function FilterDrivers ( side ) ; begin
1299: LD_INT 0
1301: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_outside ] ] ] ) ;
1302: LD_ADDR_VAR 0 2
1306: PUSH
1307: LD_INT 22
1309: PUSH
1310: LD_VAR 0 1
1314: PUSH
1315: EMPTY
1316: LIST
1317: LIST
1318: PUSH
1319: LD_INT 3
1321: PUSH
1322: LD_INT 56
1324: PUSH
1325: EMPTY
1326: LIST
1327: PUSH
1328: EMPTY
1329: LIST
1330: LIST
1331: PUSH
1332: EMPTY
1333: LIST
1334: LIST
1335: PPUSH
1336: CALL_OW 69
1340: ST_TO_ADDR
// end ;
1341: LD_VAR 0 2
1345: RET
// export function FilterPeopleArea ( side , area ) ; begin
1346: LD_INT 0
1348: PPUSH
// result := FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ;
1349: LD_ADDR_VAR 0 3
1353: PUSH
1354: LD_VAR 0 2
1358: PPUSH
1359: LD_INT 22
1361: PUSH
1362: LD_INT 1
1364: PUSH
1365: EMPTY
1366: LIST
1367: LIST
1368: PUSH
1369: LD_INT 21
1371: PUSH
1372: LD_INT 1
1374: PUSH
1375: EMPTY
1376: LIST
1377: LIST
1378: PUSH
1379: EMPTY
1380: LIST
1381: LIST
1382: PPUSH
1383: CALL_OW 70
1387: ST_TO_ADDR
// end ;
1388: LD_VAR 0 3
1392: RET
// export function FilterDriversArea ( side , area ) ; var i , tmp ; begin
1393: LD_INT 0
1395: PPUSH
1396: PPUSH
1397: PPUSH
// tmp := FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) ;
1398: LD_ADDR_VAR 0 5
1402: PUSH
1403: LD_VAR 0 2
1407: PPUSH
1408: LD_INT 22
1410: PUSH
1411: LD_INT 1
1413: PUSH
1414: EMPTY
1415: LIST
1416: LIST
1417: PUSH
1418: LD_INT 21
1420: PUSH
1421: LD_INT 2
1423: PUSH
1424: EMPTY
1425: LIST
1426: LIST
1427: PUSH
1428: LD_INT 3
1430: PUSH
1431: LD_INT 58
1433: PUSH
1434: EMPTY
1435: LIST
1436: PUSH
1437: EMPTY
1438: LIST
1439: LIST
1440: PUSH
1441: EMPTY
1442: LIST
1443: LIST
1444: LIST
1445: PPUSH
1446: CALL_OW 70
1450: ST_TO_ADDR
// result := [ ] ;
1451: LD_ADDR_VAR 0 3
1455: PUSH
1456: EMPTY
1457: ST_TO_ADDR
// if not tmp then
1458: LD_VAR 0 5
1462: NOT
1463: IFFALSE 1467
// exit ;
1465: GO 1519
// for i in tmp do
1467: LD_ADDR_VAR 0 4
1471: PUSH
1472: LD_VAR 0 5
1476: PUSH
1477: FOR_IN
1478: IFFALSE 1503
// result := result union IsDrivenBy ( i ) ;
1480: LD_ADDR_VAR 0 3
1484: PUSH
1485: LD_VAR 0 3
1489: PUSH
1490: LD_VAR 0 4
1494: PPUSH
1495: CALL_OW 311
1499: UNION
1500: ST_TO_ADDR
1501: GO 1477
1503: POP
1504: POP
// result := result diff 0 ;
1505: LD_ADDR_VAR 0 3
1509: PUSH
1510: LD_VAR 0 3
1514: PUSH
1515: LD_INT 0
1517: DIFF
1518: ST_TO_ADDR
// end ;
1519: LD_VAR 0 3
1523: RET
// export function FilterBuildings ( side ) ; begin
1524: LD_INT 0
1526: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
1527: LD_ADDR_VAR 0 2
1531: PUSH
1532: LD_INT 22
1534: PUSH
1535: LD_VAR 0 1
1539: PUSH
1540: EMPTY
1541: LIST
1542: LIST
1543: PUSH
1544: LD_INT 21
1546: PUSH
1547: LD_INT 3
1549: PUSH
1550: EMPTY
1551: LIST
1552: LIST
1553: PUSH
1554: EMPTY
1555: LIST
1556: LIST
1557: PPUSH
1558: CALL_OW 69
1562: ST_TO_ADDR
// end ;
1563: LD_VAR 0 2
1567: RET
// export function CreateNature ; var i , animal , nat_area ; begin
1568: LD_INT 0
1570: PPUSH
1571: PPUSH
1572: PPUSH
1573: PPUSH
// uc_side = 0 ;
1574: LD_ADDR_OWVAR 20
1578: PUSH
1579: LD_INT 0
1581: ST_TO_ADDR
// uc_nation = 0 ;
1582: LD_ADDR_OWVAR 21
1586: PUSH
1587: LD_INT 0
1589: ST_TO_ADDR
// nat_area := wildArea ;
1590: LD_ADDR_VAR 0 4
1594: PUSH
1595: LD_INT 3
1597: ST_TO_ADDR
// InitHc ;
1598: CALL_OW 19
// for i = 1 to 4 do
1602: LD_ADDR_VAR 0 2
1606: PUSH
1607: DOUBLE
1608: LD_INT 1
1610: DEC
1611: ST_TO_ADDR
1612: LD_INT 4
1614: PUSH
1615: FOR_TO
1616: IFFALSE 1671
// begin hc_class = 18 ;
1618: LD_ADDR_OWVAR 28
1622: PUSH
1623: LD_INT 18
1625: ST_TO_ADDR
// hc_gallery =  ;
1626: LD_ADDR_OWVAR 33
1630: PUSH
1631: LD_STRING 
1633: ST_TO_ADDR
// hc_face_number = 1 ;
1634: LD_ADDR_OWVAR 34
1638: PUSH
1639: LD_INT 1
1641: ST_TO_ADDR
// animal := CreateHuman ;
1642: LD_ADDR_VAR 0 3
1646: PUSH
1647: CALL_OW 44
1651: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
1652: LD_VAR 0 3
1656: PPUSH
1657: LD_VAR 0 4
1661: PPUSH
1662: LD_INT 0
1664: PPUSH
1665: CALL_OW 49
// end ;
1669: GO 1615
1671: POP
1672: POP
// for i = 1 to 6 do
1673: LD_ADDR_VAR 0 2
1677: PUSH
1678: DOUBLE
1679: LD_INT 1
1681: DEC
1682: ST_TO_ADDR
1683: LD_INT 6
1685: PUSH
1686: FOR_TO
1687: IFFALSE 1758
// begin hc_class = class_tiger ;
1689: LD_ADDR_OWVAR 28
1693: PUSH
1694: LD_INT 14
1696: ST_TO_ADDR
// hc_gallery =  ;
1697: LD_ADDR_OWVAR 33
1701: PUSH
1702: LD_STRING 
1704: ST_TO_ADDR
// hc_agressivity = Rand ( 0 , 10 ) ;
1705: LD_ADDR_OWVAR 35
1709: PUSH
1710: LD_INT 0
1712: PPUSH
1713: LD_INT 10
1715: PPUSH
1716: CALL_OW 12
1720: ST_TO_ADDR
// hc_face_number = 3 ;
1721: LD_ADDR_OWVAR 34
1725: PUSH
1726: LD_INT 3
1728: ST_TO_ADDR
// animal := CreateHuman ;
1729: LD_ADDR_VAR 0 3
1733: PUSH
1734: CALL_OW 44
1738: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
1739: LD_VAR 0 3
1743: PPUSH
1744: LD_VAR 0 4
1748: PPUSH
1749: LD_INT 0
1751: PPUSH
1752: CALL_OW 49
// end ;
1756: GO 1686
1758: POP
1759: POP
// for i = 1 to 2 do
1760: LD_ADDR_VAR 0 2
1764: PUSH
1765: DOUBLE
1766: LD_INT 1
1768: DEC
1769: ST_TO_ADDR
1770: LD_INT 2
1772: PUSH
1773: FOR_TO
1774: IFFALSE 1837
// begin hc_class = 21 ;
1776: LD_ADDR_OWVAR 28
1780: PUSH
1781: LD_INT 21
1783: ST_TO_ADDR
// hc_gallery =  ;
1784: LD_ADDR_OWVAR 33
1788: PUSH
1789: LD_STRING 
1791: ST_TO_ADDR
// hc_agressivity = 0 ;
1792: LD_ADDR_OWVAR 35
1796: PUSH
1797: LD_INT 0
1799: ST_TO_ADDR
// hc_face_number = 5 ;
1800: LD_ADDR_OWVAR 34
1804: PUSH
1805: LD_INT 5
1807: ST_TO_ADDR
// animal := CreateHuman ;
1808: LD_ADDR_VAR 0 3
1812: PUSH
1813: CALL_OW 44
1817: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
1818: LD_VAR 0 3
1822: PPUSH
1823: LD_VAR 0 4
1827: PPUSH
1828: LD_INT 0
1830: PPUSH
1831: CALL_OW 49
// end ;
1835: GO 1773
1837: POP
1838: POP
// for i = 1 to 6 do
1839: LD_ADDR_VAR 0 2
1843: PUSH
1844: DOUBLE
1845: LD_INT 1
1847: DEC
1848: ST_TO_ADDR
1849: LD_INT 6
1851: PUSH
1852: FOR_TO
1853: IFFALSE 1908
// begin hc_class = 13 ;
1855: LD_ADDR_OWVAR 28
1859: PUSH
1860: LD_INT 13
1862: ST_TO_ADDR
// hc_gallery =  ;
1863: LD_ADDR_OWVAR 33
1867: PUSH
1868: LD_STRING 
1870: ST_TO_ADDR
// hc_face_number = 4 ;
1871: LD_ADDR_OWVAR 34
1875: PUSH
1876: LD_INT 4
1878: ST_TO_ADDR
// animal := CreateHuman ;
1879: LD_ADDR_VAR 0 3
1883: PUSH
1884: CALL_OW 44
1888: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
1889: LD_VAR 0 3
1893: PPUSH
1894: LD_VAR 0 4
1898: PPUSH
1899: LD_INT 0
1901: PPUSH
1902: CALL_OW 49
// end ;
1906: GO 1852
1908: POP
1909: POP
// for i = 1 to 2 do
1910: LD_ADDR_VAR 0 2
1914: PUSH
1915: DOUBLE
1916: LD_INT 1
1918: DEC
1919: ST_TO_ADDR
1920: LD_INT 2
1922: PUSH
1923: FOR_TO
1924: IFFALSE 1983
// begin hc_class = 20 ;
1926: LD_ADDR_OWVAR 28
1930: PUSH
1931: LD_INT 20
1933: ST_TO_ADDR
// hc_gallery =  ;
1934: LD_ADDR_OWVAR 33
1938: PUSH
1939: LD_STRING 
1941: ST_TO_ADDR
// hc_face_number = 2 ;
1942: LD_ADDR_OWVAR 34
1946: PUSH
1947: LD_INT 2
1949: ST_TO_ADDR
// animal := CreateHuman ;
1950: LD_ADDR_VAR 0 3
1954: PUSH
1955: CALL_OW 44
1959: ST_TO_ADDR
// PlaceUnitXYR ( animal , 101 , 37 , 3 , false ) ;
1960: LD_VAR 0 3
1964: PPUSH
1965: LD_INT 101
1967: PPUSH
1968: LD_INT 37
1970: PPUSH
1971: LD_INT 3
1973: PPUSH
1974: LD_INT 0
1976: PPUSH
1977: CALL_OW 50
// end ;
1981: GO 1923
1983: POP
1984: POP
// for i = 1 to 1 do
1985: LD_ADDR_VAR 0 2
1989: PUSH
1990: DOUBLE
1991: LD_INT 1
1993: DEC
1994: ST_TO_ADDR
1995: LD_INT 1
1997: PUSH
1998: FOR_TO
1999: IFFALSE 2046
// begin vc_chassis := 31 ;
2001: LD_ADDR_OWVAR 37
2005: PUSH
2006: LD_INT 31
2008: ST_TO_ADDR
// vc_control := control_rider ;
2009: LD_ADDR_OWVAR 38
2013: PUSH
2014: LD_INT 4
2016: ST_TO_ADDR
// animal := CreateVehicle ;
2017: LD_ADDR_VAR 0 3
2021: PUSH
2022: CALL_OW 45
2026: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
2027: LD_VAR 0 3
2031: PPUSH
2032: LD_VAR 0 4
2036: PPUSH
2037: LD_INT 0
2039: PPUSH
2040: CALL_OW 49
// end ;
2044: GO 1998
2046: POP
2047: POP
// end ;
2048: LD_VAR 0 1
2052: RET
// export function NearbyTowerHasEnergy ( unit ) ; var i , tmp , energy ; begin
2053: LD_INT 0
2055: PPUSH
2056: PPUSH
2057: PPUSH
2058: PPUSH
// result := [ ] ;
2059: LD_ADDR_VAR 0 2
2063: PUSH
2064: EMPTY
2065: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( unit ) ] , [ f_dist , unit , 15 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) ;
2066: LD_ADDR_VAR 0 4
2070: PUSH
2071: LD_INT 81
2073: PUSH
2074: LD_VAR 0 1
2078: PPUSH
2079: CALL_OW 255
2083: PUSH
2084: EMPTY
2085: LIST
2086: LIST
2087: PUSH
2088: LD_INT 91
2090: PUSH
2091: LD_VAR 0 1
2095: PUSH
2096: LD_INT 15
2098: PUSH
2099: EMPTY
2100: LIST
2101: LIST
2102: LIST
2103: PUSH
2104: LD_INT 2
2106: PUSH
2107: LD_INT 30
2109: PUSH
2110: LD_INT 32
2112: PUSH
2113: EMPTY
2114: LIST
2115: LIST
2116: PUSH
2117: LD_INT 30
2119: PUSH
2120: LD_INT 33
2122: PUSH
2123: EMPTY
2124: LIST
2125: LIST
2126: PUSH
2127: EMPTY
2128: LIST
2129: LIST
2130: LIST
2131: PUSH
2132: EMPTY
2133: LIST
2134: LIST
2135: LIST
2136: PPUSH
2137: CALL_OW 69
2141: ST_TO_ADDR
// if not tmp then
2142: LD_VAR 0 4
2146: NOT
2147: IFFALSE 2151
// exit ;
2149: GO 2220
// for i in tmp do
2151: LD_ADDR_VAR 0 3
2155: PUSH
2156: LD_VAR 0 4
2160: PUSH
2161: FOR_IN
2162: IFFALSE 2218
// begin energy := GetEnergy ( GetBase ( i ) ) ;
2164: LD_ADDR_VAR 0 5
2168: PUSH
2169: LD_VAR 0 3
2173: PPUSH
2174: CALL_OW 274
2178: PPUSH
2179: CALL_OW 278
2183: ST_TO_ADDR
// if energy [ 4 ] > energy [ 1 ] then
2184: LD_VAR 0 5
2188: PUSH
2189: LD_INT 4
2191: ARRAY
2192: PUSH
2193: LD_VAR 0 5
2197: PUSH
2198: LD_INT 1
2200: ARRAY
2201: GREATER
2202: IFFALSE 2216
// begin result := i ;
2204: LD_ADDR_VAR 0 2
2208: PUSH
2209: LD_VAR 0 3
2213: ST_TO_ADDR
// break ;
2214: GO 2218
// end ; end ;
2216: GO 2161
2218: POP
2219: POP
// end ;
2220: LD_VAR 0 2
2224: RET
// export function GetTurretWeaponBase ( tower ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
2225: LD_INT 0
2227: PPUSH
2228: PPUSH
2229: PPUSH
2230: PPUSH
2231: PPUSH
2232: PPUSH
2233: PPUSH
2234: PPUSH
2235: PPUSH
2236: PPUSH
2237: PPUSH
2238: PPUSH
2239: PPUSH
2240: PPUSH
2241: PPUSH
2242: PPUSH
// result := false ;
2243: LD_ADDR_VAR 0 2
2247: PUSH
2248: LD_INT 0
2250: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
2251: LD_VAR 0 1
2255: NOT
2256: PUSH
2257: LD_VAR 0 1
2261: PPUSH
2262: CALL_OW 266
2266: PUSH
2267: LD_INT 32
2269: PUSH
2270: LD_INT 33
2272: PUSH
2273: EMPTY
2274: LIST
2275: LIST
2276: IN
2277: NOT
2278: OR
2279: IFFALSE 2283
// exit ;
2281: GO 3443
// nat := GetNation ( tower ) ;
2283: LD_ADDR_VAR 0 11
2287: PUSH
2288: LD_VAR 0 1
2292: PPUSH
2293: CALL_OW 248
2297: ST_TO_ADDR
// side := GetSide ( tower ) ;
2298: LD_ADDR_VAR 0 15
2302: PUSH
2303: LD_VAR 0 1
2307: PPUSH
2308: CALL_OW 255
2312: ST_TO_ADDR
// x := GetX ( tower ) ;
2313: LD_ADDR_VAR 0 9
2317: PUSH
2318: LD_VAR 0 1
2322: PPUSH
2323: CALL_OW 250
2327: ST_TO_ADDR
// y := GetY ( tower ) ;
2328: LD_ADDR_VAR 0 10
2332: PUSH
2333: LD_VAR 0 1
2337: PPUSH
2338: CALL_OW 251
2342: ST_TO_ADDR
// if not x or not y then
2343: LD_VAR 0 9
2347: NOT
2348: PUSH
2349: LD_VAR 0 10
2353: NOT
2354: OR
2355: IFFALSE 2359
// exit ;
2357: GO 3443
// weapon := 0 ;
2359: LD_ADDR_VAR 0 17
2363: PUSH
2364: LD_INT 0
2366: ST_TO_ADDR
// fac_list := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun ] ;
2367: LD_ADDR_VAR 0 16
2371: PUSH
2372: LD_INT 42
2374: PUSH
2375: LD_INT 43
2377: PUSH
2378: LD_INT 44
2380: PUSH
2381: LD_INT 46
2383: PUSH
2384: EMPTY
2385: LIST
2386: LIST
2387: LIST
2388: LIST
2389: ST_TO_ADDR
// if not fac_list then
2390: LD_VAR 0 16
2394: NOT
2395: IFFALSE 2399
// exit ;
2397: GO 3443
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
2399: LD_ADDR_VAR 0 4
2403: PUSH
2404: LD_INT 4
2406: PUSH
2407: LD_INT 5
2409: PUSH
2410: LD_INT 9
2412: PUSH
2413: LD_INT 10
2415: PUSH
2416: LD_INT 6
2418: PUSH
2419: LD_INT 7
2421: PUSH
2422: LD_INT 11
2424: PUSH
2425: EMPTY
2426: LIST
2427: LIST
2428: LIST
2429: LIST
2430: LIST
2431: LIST
2432: LIST
2433: PUSH
2434: LD_INT 27
2436: PUSH
2437: LD_INT 28
2439: PUSH
2440: LD_INT 26
2442: PUSH
2443: LD_INT 30
2445: PUSH
2446: EMPTY
2447: LIST
2448: LIST
2449: LIST
2450: LIST
2451: PUSH
2452: LD_INT 43
2454: PUSH
2455: LD_INT 44
2457: PUSH
2458: LD_INT 46
2460: PUSH
2461: LD_INT 45
2463: PUSH
2464: LD_INT 47
2466: PUSH
2467: LD_INT 49
2469: PUSH
2470: EMPTY
2471: LIST
2472: LIST
2473: LIST
2474: LIST
2475: LIST
2476: LIST
2477: PUSH
2478: EMPTY
2479: LIST
2480: LIST
2481: LIST
2482: PUSH
2483: LD_VAR 0 11
2487: ARRAY
2488: ST_TO_ADDR
// for i in list do
2489: LD_ADDR_VAR 0 7
2493: PUSH
2494: LD_VAR 0 4
2498: PUSH
2499: FOR_IN
2500: IFFALSE 2533
// if not i in fac_list then
2502: LD_VAR 0 7
2506: PUSH
2507: LD_VAR 0 16
2511: IN
2512: NOT
2513: IFFALSE 2531
// list := list diff i ;
2515: LD_ADDR_VAR 0 4
2519: PUSH
2520: LD_VAR 0 4
2524: PUSH
2525: LD_VAR 0 7
2529: DIFF
2530: ST_TO_ADDR
2531: GO 2499
2533: POP
2534: POP
// if not list then
2535: LD_VAR 0 4
2539: NOT
2540: IFFALSE 2544
// exit ;
2542: GO 3443
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
2544: LD_VAR 0 11
2548: PUSH
2549: LD_INT 3
2551: EQUAL
2552: PUSH
2553: LD_INT 49
2555: PUSH
2556: LD_VAR 0 4
2560: IN
2561: AND
2562: PUSH
2563: LD_INT 31
2565: PPUSH
2566: LD_VAR 0 15
2570: PPUSH
2571: CALL_OW 321
2575: PUSH
2576: LD_INT 2
2578: EQUAL
2579: AND
2580: IFFALSE 2640
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
2582: LD_INT 22
2584: PUSH
2585: LD_VAR 0 15
2589: PUSH
2590: EMPTY
2591: LIST
2592: LIST
2593: PUSH
2594: LD_INT 35
2596: PUSH
2597: LD_INT 49
2599: PUSH
2600: EMPTY
2601: LIST
2602: LIST
2603: PUSH
2604: LD_INT 91
2606: PUSH
2607: LD_VAR 0 1
2611: PUSH
2612: LD_INT 10
2614: PUSH
2615: EMPTY
2616: LIST
2617: LIST
2618: LIST
2619: PUSH
2620: EMPTY
2621: LIST
2622: LIST
2623: LIST
2624: PPUSH
2625: CALL_OW 69
2629: NOT
2630: IFFALSE 2640
// weapon := ru_time_lapser ;
2632: LD_ADDR_VAR 0 17
2636: PUSH
2637: LD_INT 49
2639: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
2640: LD_VAR 0 11
2644: PUSH
2645: LD_INT 1
2647: PUSH
2648: LD_INT 2
2650: PUSH
2651: EMPTY
2652: LIST
2653: LIST
2654: IN
2655: PUSH
2656: LD_INT 11
2658: PUSH
2659: LD_VAR 0 4
2663: IN
2664: PUSH
2665: LD_INT 30
2667: PUSH
2668: LD_VAR 0 4
2672: IN
2673: OR
2674: AND
2675: PUSH
2676: LD_INT 6
2678: PPUSH
2679: LD_VAR 0 15
2683: PPUSH
2684: CALL_OW 321
2688: PUSH
2689: LD_INT 2
2691: EQUAL
2692: AND
2693: IFFALSE 2858
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
2695: LD_INT 22
2697: PUSH
2698: LD_VAR 0 15
2702: PUSH
2703: EMPTY
2704: LIST
2705: LIST
2706: PUSH
2707: LD_INT 2
2709: PUSH
2710: LD_INT 35
2712: PUSH
2713: LD_INT 11
2715: PUSH
2716: EMPTY
2717: LIST
2718: LIST
2719: PUSH
2720: LD_INT 35
2722: PUSH
2723: LD_INT 30
2725: PUSH
2726: EMPTY
2727: LIST
2728: LIST
2729: PUSH
2730: EMPTY
2731: LIST
2732: LIST
2733: LIST
2734: PUSH
2735: LD_INT 91
2737: PUSH
2738: LD_VAR 0 1
2742: PUSH
2743: LD_INT 18
2745: PUSH
2746: EMPTY
2747: LIST
2748: LIST
2749: LIST
2750: PUSH
2751: EMPTY
2752: LIST
2753: LIST
2754: LIST
2755: PPUSH
2756: CALL_OW 69
2760: NOT
2761: PUSH
2762: LD_INT 22
2764: PUSH
2765: LD_VAR 0 15
2769: PUSH
2770: EMPTY
2771: LIST
2772: LIST
2773: PUSH
2774: LD_INT 2
2776: PUSH
2777: LD_INT 30
2779: PUSH
2780: LD_INT 32
2782: PUSH
2783: EMPTY
2784: LIST
2785: LIST
2786: PUSH
2787: LD_INT 30
2789: PUSH
2790: LD_INT 33
2792: PUSH
2793: EMPTY
2794: LIST
2795: LIST
2796: PUSH
2797: EMPTY
2798: LIST
2799: LIST
2800: LIST
2801: PUSH
2802: LD_INT 91
2804: PUSH
2805: LD_VAR 0 1
2809: PUSH
2810: LD_INT 12
2812: PUSH
2813: EMPTY
2814: LIST
2815: LIST
2816: LIST
2817: PUSH
2818: EMPTY
2819: LIST
2820: LIST
2821: LIST
2822: PUSH
2823: EMPTY
2824: LIST
2825: PPUSH
2826: CALL_OW 69
2830: PUSH
2831: LD_INT 2
2833: GREATER
2834: AND
2835: IFFALSE 2858
// weapon := [ us_radar , ar_radar ] [ nat ] ;
2837: LD_ADDR_VAR 0 17
2841: PUSH
2842: LD_INT 11
2844: PUSH
2845: LD_INT 30
2847: PUSH
2848: EMPTY
2849: LIST
2850: LIST
2851: PUSH
2852: LD_VAR 0 11
2856: ARRAY
2857: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
2858: LD_VAR 0 17
2862: NOT
2863: PUSH
2864: LD_INT 40
2866: PPUSH
2867: LD_VAR 0 15
2871: PPUSH
2872: CALL_OW 321
2876: PUSH
2877: LD_INT 2
2879: EQUAL
2880: AND
2881: PUSH
2882: LD_INT 7
2884: PUSH
2885: LD_VAR 0 4
2889: IN
2890: PUSH
2891: LD_INT 28
2893: PUSH
2894: LD_VAR 0 4
2898: IN
2899: OR
2900: PUSH
2901: LD_INT 45
2903: PUSH
2904: LD_VAR 0 4
2908: IN
2909: OR
2910: AND
2911: IFFALSE 3165
// begin hex := GetHexInfo ( x , y ) ;
2913: LD_ADDR_VAR 0 3
2917: PUSH
2918: LD_VAR 0 9
2922: PPUSH
2923: LD_VAR 0 10
2927: PPUSH
2928: CALL_OW 546
2932: ST_TO_ADDR
// if hex [ 1 ] then
2933: LD_VAR 0 3
2937: PUSH
2938: LD_INT 1
2940: ARRAY
2941: IFFALSE 2945
// exit ;
2943: GO 3443
// height := hex [ 2 ] ;
2945: LD_ADDR_VAR 0 14
2949: PUSH
2950: LD_VAR 0 3
2954: PUSH
2955: LD_INT 2
2957: ARRAY
2958: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
2959: LD_ADDR_VAR 0 13
2963: PUSH
2964: LD_INT 0
2966: PUSH
2967: LD_INT 2
2969: PUSH
2970: LD_INT 3
2972: PUSH
2973: LD_INT 5
2975: PUSH
2976: EMPTY
2977: LIST
2978: LIST
2979: LIST
2980: LIST
2981: ST_TO_ADDR
// for i in tmp do
2982: LD_ADDR_VAR 0 7
2986: PUSH
2987: LD_VAR 0 13
2991: PUSH
2992: FOR_IN
2993: IFFALSE 3163
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
2995: LD_ADDR_VAR 0 8
2999: PUSH
3000: LD_VAR 0 9
3004: PPUSH
3005: LD_VAR 0 7
3009: PPUSH
3010: LD_INT 5
3012: PPUSH
3013: CALL_OW 272
3017: PUSH
3018: LD_VAR 0 10
3022: PPUSH
3023: LD_VAR 0 7
3027: PPUSH
3028: LD_INT 5
3030: PPUSH
3031: CALL_OW 273
3035: PUSH
3036: EMPTY
3037: LIST
3038: LIST
3039: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
3040: LD_VAR 0 8
3044: PUSH
3045: LD_INT 1
3047: ARRAY
3048: PPUSH
3049: LD_VAR 0 8
3053: PUSH
3054: LD_INT 2
3056: ARRAY
3057: PPUSH
3058: CALL_OW 488
3062: IFFALSE 3161
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
3064: LD_ADDR_VAR 0 3
3068: PUSH
3069: LD_VAR 0 8
3073: PUSH
3074: LD_INT 1
3076: ARRAY
3077: PPUSH
3078: LD_VAR 0 8
3082: PUSH
3083: LD_INT 2
3085: ARRAY
3086: PPUSH
3087: CALL_OW 546
3091: ST_TO_ADDR
// if hex [ 1 ] then
3092: LD_VAR 0 3
3096: PUSH
3097: LD_INT 1
3099: ARRAY
3100: IFFALSE 3104
// continue ;
3102: GO 2992
// h := hex [ 2 ] ;
3104: LD_ADDR_VAR 0 12
3108: PUSH
3109: LD_VAR 0 3
3113: PUSH
3114: LD_INT 2
3116: ARRAY
3117: ST_TO_ADDR
// if h + 7 < height then
3118: LD_VAR 0 12
3122: PUSH
3123: LD_INT 7
3125: PLUS
3126: PUSH
3127: LD_VAR 0 14
3131: LESS
3132: IFFALSE 3161
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
3134: LD_ADDR_VAR 0 17
3138: PUSH
3139: LD_INT 7
3141: PUSH
3142: LD_INT 28
3144: PUSH
3145: LD_INT 45
3147: PUSH
3148: EMPTY
3149: LIST
3150: LIST
3151: LIST
3152: PUSH
3153: LD_VAR 0 11
3157: ARRAY
3158: ST_TO_ADDR
// break ;
3159: GO 3163
// end ; end ; end ;
3161: GO 2992
3163: POP
3164: POP
// end ; if not weapon then
3165: LD_VAR 0 17
3169: NOT
3170: IFFALSE 3325
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
3172: LD_ADDR_VAR 0 4
3176: PUSH
3177: LD_VAR 0 4
3181: PUSH
3182: LD_INT 11
3184: PUSH
3185: LD_INT 30
3187: PUSH
3188: LD_INT 49
3190: PUSH
3191: EMPTY
3192: LIST
3193: LIST
3194: LIST
3195: DIFF
3196: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , tower , 6 ] , [ f_not , [ f_bweapon , 0 ] ] ] ) ;
3197: LD_ADDR_VAR 0 13
3201: PUSH
3202: LD_INT 22
3204: PUSH
3205: LD_VAR 0 15
3209: PUSH
3210: EMPTY
3211: LIST
3212: LIST
3213: PUSH
3214: LD_INT 91
3216: PUSH
3217: LD_VAR 0 1
3221: PUSH
3222: LD_INT 6
3224: PUSH
3225: EMPTY
3226: LIST
3227: LIST
3228: LIST
3229: PUSH
3230: LD_INT 3
3232: PUSH
3233: LD_INT 35
3235: PUSH
3236: LD_INT 0
3238: PUSH
3239: EMPTY
3240: LIST
3241: LIST
3242: PUSH
3243: EMPTY
3244: LIST
3245: LIST
3246: PUSH
3247: EMPTY
3248: LIST
3249: LIST
3250: LIST
3251: PPUSH
3252: CALL_OW 69
3256: ST_TO_ADDR
// for i in tmp do
3257: LD_ADDR_VAR 0 7
3261: PUSH
3262: LD_VAR 0 13
3266: PUSH
3267: FOR_IN
3268: IFFALSE 3293
// list := list diff GetBWeapon ( i ) ;
3270: LD_ADDR_VAR 0 4
3274: PUSH
3275: LD_VAR 0 4
3279: PUSH
3280: LD_VAR 0 7
3284: PPUSH
3285: CALL_OW 269
3289: DIFF
3290: ST_TO_ADDR
3291: GO 3267
3293: POP
3294: POP
// if list then
3295: LD_VAR 0 4
3299: IFFALSE 3325
// weapon := list [ rand ( 1 , list ) ] ;
3301: LD_ADDR_VAR 0 17
3305: PUSH
3306: LD_VAR 0 4
3310: PUSH
3311: LD_INT 1
3313: PPUSH
3314: LD_VAR 0 4
3318: PPUSH
3319: CALL_OW 12
3323: ARRAY
3324: ST_TO_ADDR
// end ; if weapon then
3325: LD_VAR 0 17
3329: IFFALSE 3443
// begin tmp := CostOfWeapon ( weapon ) ;
3331: LD_ADDR_VAR 0 13
3335: PUSH
3336: LD_VAR 0 17
3340: PPUSH
3341: CALL_OW 451
3345: ST_TO_ADDR
// j := GetBase ( tower ) ;
3346: LD_ADDR_VAR 0 8
3350: PUSH
3351: LD_VAR 0 1
3355: PPUSH
3356: CALL_OW 274
3360: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
3361: LD_VAR 0 8
3365: PPUSH
3366: LD_INT 1
3368: PPUSH
3369: CALL_OW 275
3373: PUSH
3374: LD_VAR 0 13
3378: PUSH
3379: LD_INT 1
3381: ARRAY
3382: GREATEREQUAL
3383: PUSH
3384: LD_VAR 0 8
3388: PPUSH
3389: LD_INT 2
3391: PPUSH
3392: CALL_OW 275
3396: PUSH
3397: LD_VAR 0 13
3401: PUSH
3402: LD_INT 2
3404: ARRAY
3405: GREATEREQUAL
3406: AND
3407: PUSH
3408: LD_VAR 0 8
3412: PPUSH
3413: LD_INT 3
3415: PPUSH
3416: CALL_OW 275
3420: PUSH
3421: LD_VAR 0 13
3425: PUSH
3426: LD_INT 3
3428: ARRAY
3429: GREATEREQUAL
3430: AND
3431: IFFALSE 3443
// result := weapon ;
3433: LD_ADDR_VAR 0 2
3437: PUSH
3438: LD_VAR 0 17
3442: ST_TO_ADDR
// end ; end ; end_of_file
3443: LD_VAR 0 2
3447: RET
// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Khatam , Kikuchi , Harisson ; export function PrepareAmericans ; var i , team , others , veh , m ; begin
3448: LD_INT 0
3450: PPUSH
3451: PPUSH
3452: PPUSH
3453: PPUSH
3454: PPUSH
3455: PPUSH
// uc_side := 1 ;
3456: LD_ADDR_OWVAR 20
3460: PUSH
3461: LD_INT 1
3463: ST_TO_ADDR
// uc_nation := 1 ;
3464: LD_ADDR_OWVAR 21
3468: PUSH
3469: LD_INT 1
3471: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , mission_prev_prefix ) ;
3472: LD_ADDR_EXP 9
3476: PUSH
3477: LD_STRING JMM
3479: PPUSH
3480: LD_EXP 1
3484: NOT
3485: PPUSH
3486: LD_EXP 2
3490: PPUSH
3491: CALL 33019 0 3
3495: ST_TO_ADDR
// team := [ JMM ] ;
3496: LD_ADDR_VAR 0 3
3500: PUSH
3501: LD_EXP 9
3505: PUSH
3506: EMPTY
3507: LIST
3508: ST_TO_ADDR
// if LoadVariable ( BrownIn07 , debug ) then
3509: LD_STRING BrownIn07
3511: PPUSH
3512: LD_EXP 1
3516: PPUSH
3517: CALL_OW 30
3521: IFFALSE 3547
// Brown := PrepareUnit ( Brown , ( not debug ) , mission_prev_prefix ) ;
3523: LD_ADDR_EXP 10
3527: PUSH
3528: LD_STRING Brown
3530: PPUSH
3531: LD_EXP 1
3535: NOT
3536: PPUSH
3537: LD_EXP 2
3541: PPUSH
3542: CALL 33019 0 3
3546: ST_TO_ADDR
// if Brown then
3547: LD_EXP 10
3551: IFFALSE 3569
// team := team ^ Brown ;
3553: LD_ADDR_VAR 0 3
3557: PUSH
3558: LD_VAR 0 3
3562: PUSH
3563: LD_EXP 10
3567: ADD
3568: ST_TO_ADDR
// if LoadVariable ( DonaldsonIn07 , debug ) then
3569: LD_STRING DonaldsonIn07
3571: PPUSH
3572: LD_EXP 1
3576: PPUSH
3577: CALL_OW 30
3581: IFFALSE 3607
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , mission_prev_prefix ) ;
3583: LD_ADDR_EXP 11
3587: PUSH
3588: LD_STRING Donaldson
3590: PPUSH
3591: LD_EXP 1
3595: NOT
3596: PPUSH
3597: LD_EXP 2
3601: PPUSH
3602: CALL 33019 0 3
3606: ST_TO_ADDR
// if Donaldson then
3607: LD_EXP 11
3611: IFFALSE 3629
// team := team ^ Donaldson ;
3613: LD_ADDR_VAR 0 3
3617: PUSH
3618: LD_VAR 0 3
3622: PUSH
3623: LD_EXP 11
3627: ADD
3628: ST_TO_ADDR
// if LoadVariable ( BobbyIn07 , debug ) then
3629: LD_STRING BobbyIn07
3631: PPUSH
3632: LD_EXP 1
3636: PPUSH
3637: CALL_OW 30
3641: IFFALSE 3667
// Bobby := PrepareUnit ( Bobby , ( not debug ) , mission_prev_prefix ) ;
3643: LD_ADDR_EXP 12
3647: PUSH
3648: LD_STRING Bobby
3650: PPUSH
3651: LD_EXP 1
3655: NOT
3656: PPUSH
3657: LD_EXP 2
3661: PPUSH
3662: CALL 33019 0 3
3666: ST_TO_ADDR
// if Bobby then
3667: LD_EXP 12
3671: IFFALSE 3689
// team := team ^ Bobby ;
3673: LD_ADDR_VAR 0 3
3677: PUSH
3678: LD_VAR 0 3
3682: PUSH
3683: LD_EXP 12
3687: ADD
3688: ST_TO_ADDR
// if LoadVariable ( CyrusIn07 , debug ) then
3689: LD_STRING CyrusIn07
3691: PPUSH
3692: LD_EXP 1
3696: PPUSH
3697: CALL_OW 30
3701: IFFALSE 3727
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , mission_prev_prefix ) ;
3703: LD_ADDR_EXP 13
3707: PUSH
3708: LD_STRING Cyrus
3710: PPUSH
3711: LD_EXP 1
3715: NOT
3716: PPUSH
3717: LD_EXP 2
3721: PPUSH
3722: CALL 33019 0 3
3726: ST_TO_ADDR
// if Cyrus then
3727: LD_EXP 13
3731: IFFALSE 3749
// team := team ^ Cyrus ;
3733: LD_ADDR_VAR 0 3
3737: PUSH
3738: LD_VAR 0 3
3742: PUSH
3743: LD_EXP 13
3747: ADD
3748: ST_TO_ADDR
// if LoadVariable ( LisaIn07 , debug ) then
3749: LD_STRING LisaIn07
3751: PPUSH
3752: LD_EXP 1
3756: PPUSH
3757: CALL_OW 30
3761: IFFALSE 3787
// Lisa := PrepareUnit ( Lisa , ( not debug ) , mission_prev_prefix ) ;
3763: LD_ADDR_EXP 14
3767: PUSH
3768: LD_STRING Lisa
3770: PPUSH
3771: LD_EXP 1
3775: NOT
3776: PPUSH
3777: LD_EXP 2
3781: PPUSH
3782: CALL 33019 0 3
3786: ST_TO_ADDR
// if Lisa then
3787: LD_EXP 14
3791: IFFALSE 3809
// team := team ^ Lisa ;
3793: LD_ADDR_VAR 0 3
3797: PUSH
3798: LD_VAR 0 3
3802: PUSH
3803: LD_EXP 14
3807: ADD
3808: ST_TO_ADDR
// if LoadVariable ( GladstoneIn07 , debug ) then
3809: LD_STRING GladstoneIn07
3811: PPUSH
3812: LD_EXP 1
3816: PPUSH
3817: CALL_OW 30
3821: IFFALSE 3847
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , mission_prev_prefix ) ;
3823: LD_ADDR_EXP 16
3827: PUSH
3828: LD_STRING Gladstone
3830: PPUSH
3831: LD_EXP 1
3835: NOT
3836: PPUSH
3837: LD_EXP 2
3841: PPUSH
3842: CALL 33019 0 3
3846: ST_TO_ADDR
// if Gladstone then
3847: LD_EXP 16
3851: IFFALSE 3869
// team := team ^ Gladstone ;
3853: LD_ADDR_VAR 0 3
3857: PUSH
3858: LD_VAR 0 3
3862: PUSH
3863: LD_EXP 16
3867: ADD
3868: ST_TO_ADDR
// if LoadVariable ( KhatamIn07 , debug ) then
3869: LD_STRING KhatamIn07
3871: PPUSH
3872: LD_EXP 1
3876: PPUSH
3877: CALL_OW 30
3881: IFFALSE 3907
// Khatam := PrepareUnit ( Khatam , ( not debug ) , mission_prev_prefix ) ;
3883: LD_ADDR_EXP 17
3887: PUSH
3888: LD_STRING Khatam
3890: PPUSH
3891: LD_EXP 1
3895: NOT
3896: PPUSH
3897: LD_EXP 2
3901: PPUSH
3902: CALL 33019 0 3
3906: ST_TO_ADDR
// if Khatam then
3907: LD_EXP 17
3911: IFFALSE 3929
// team := team ^ Khatam ;
3913: LD_ADDR_VAR 0 3
3917: PUSH
3918: LD_VAR 0 3
3922: PUSH
3923: LD_EXP 17
3927: ADD
3928: ST_TO_ADDR
// others := CreateCharacterSet ( 07_others ) ;
3929: LD_ADDR_VAR 0 4
3933: PUSH
3934: LD_STRING 07_others
3936: PPUSH
3937: CALL_OW 31
3941: ST_TO_ADDR
// if others then
3942: LD_VAR 0 4
3946: IFFALSE 3964
// team := team ^ others ;
3948: LD_ADDR_VAR 0 3
3952: PUSH
3953: LD_VAR 0 3
3957: PUSH
3958: LD_VAR 0 4
3962: ADD
3963: ST_TO_ADDR
// if debug then
3964: LD_EXP 1
3968: IFFALSE 4023
// begin InitHc ;
3970: CALL_OW 19
// for i = 1 to 4 do
3974: LD_ADDR_VAR 0 2
3978: PUSH
3979: DOUBLE
3980: LD_INT 1
3982: DEC
3983: ST_TO_ADDR
3984: LD_INT 4
3986: PUSH
3987: FOR_TO
3988: IFFALSE 4021
// begin PrepareHuman ( false , class_mechanic , 4 ) ;
3990: LD_INT 0
3992: PPUSH
3993: LD_INT 3
3995: PPUSH
3996: LD_INT 4
3998: PPUSH
3999: CALL_OW 380
// team := team ^ CreateHuman ;
4003: LD_ADDR_VAR 0 3
4007: PUSH
4008: LD_VAR 0 3
4012: PUSH
4013: CALL_OW 44
4017: ADD
4018: ST_TO_ADDR
// end ;
4019: GO 3987
4021: POP
4022: POP
// end ; m := 0 ;
4023: LD_ADDR_VAR 0 6
4027: PUSH
4028: LD_INT 0
4030: ST_TO_ADDR
// for i in team do
4031: LD_ADDR_VAR 0 2
4035: PUSH
4036: LD_VAR 0 3
4040: PUSH
4041: FOR_IN
4042: IFFALSE 4249
// if GetClass ( i ) = 3 then
4044: LD_VAR 0 2
4048: PPUSH
4049: CALL_OW 257
4053: PUSH
4054: LD_INT 3
4056: EQUAL
4057: IFFALSE 4205
// begin m := m + 1 ;
4059: LD_ADDR_VAR 0 6
4063: PUSH
4064: LD_VAR 0 6
4068: PUSH
4069: LD_INT 1
4071: PLUS
4072: ST_TO_ADDR
// veh := PrepareTank ( 1 , 1 , [ us_medium_wheeled , us_medium_tracked , us_medium_wheeled , us_light_wheeled ] [ m mod 4 + 1 ] , engine_solar , control_manual , [ us_gatling_gun , us_double_gun , us_light_gun , us_radar ] [ m mod 4 + 1 ] , 60 ) ;
4073: LD_ADDR_VAR 0 5
4077: PUSH
4078: LD_INT 1
4080: PPUSH
4081: LD_INT 1
4083: PPUSH
4084: LD_INT 2
4086: PUSH
4087: LD_INT 3
4089: PUSH
4090: LD_INT 2
4092: PUSH
4093: LD_INT 1
4095: PUSH
4096: EMPTY
4097: LIST
4098: LIST
4099: LIST
4100: LIST
4101: PUSH
4102: LD_VAR 0 6
4106: PUSH
4107: LD_INT 4
4109: MOD
4110: PUSH
4111: LD_INT 1
4113: PLUS
4114: ARRAY
4115: PPUSH
4116: LD_INT 2
4118: PPUSH
4119: LD_INT 1
4121: PPUSH
4122: LD_INT 4
4124: PUSH
4125: LD_INT 5
4127: PUSH
4128: LD_INT 3
4130: PUSH
4131: LD_INT 11
4133: PUSH
4134: EMPTY
4135: LIST
4136: LIST
4137: LIST
4138: LIST
4139: PUSH
4140: LD_VAR 0 6
4144: PUSH
4145: LD_INT 4
4147: MOD
4148: PUSH
4149: LD_INT 1
4151: PLUS
4152: ARRAY
4153: PPUSH
4154: LD_INT 60
4156: PPUSH
4157: CALL 520 0 7
4161: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
4162: LD_VAR 0 5
4166: PPUSH
4167: LD_INT 2
4169: PPUSH
4170: CALL_OW 233
// PlaceUnitArea ( veh , startArea , false ) ;
4174: LD_VAR 0 5
4178: PPUSH
4179: LD_INT 1
4181: PPUSH
4182: LD_INT 0
4184: PPUSH
4185: CALL_OW 49
// PlaceHumanInUnit ( i , veh ) ;
4189: LD_VAR 0 2
4193: PPUSH
4194: LD_VAR 0 5
4198: PPUSH
4199: CALL_OW 52
// end else
4203: GO 4247
// begin if GetClass ( i ) = 2 then
4205: LD_VAR 0 2
4209: PPUSH
4210: CALL_OW 257
4214: PUSH
4215: LD_INT 2
4217: EQUAL
4218: IFFALSE 4232
// SetClass ( i , 1 ) ;
4220: LD_VAR 0 2
4224: PPUSH
4225: LD_INT 1
4227: PPUSH
4228: CALL_OW 336
// PlaceUnitArea ( i , startArea , false ) ;
4232: LD_VAR 0 2
4236: PPUSH
4237: LD_INT 1
4239: PPUSH
4240: LD_INT 0
4242: PPUSH
4243: CALL_OW 49
// end ;
4247: GO 4041
4249: POP
4250: POP
// uc_side := 4 ;
4251: LD_ADDR_OWVAR 20
4255: PUSH
4256: LD_INT 4
4258: ST_TO_ADDR
// Harisson := PrepareUnit ( Harisson , false ,  ) ;
4259: LD_ADDR_EXP 19
4263: PUSH
4264: LD_STRING Harisson
4266: PPUSH
4267: LD_INT 0
4269: PPUSH
4270: LD_STRING 
4272: PPUSH
4273: CALL 33019 0 3
4277: ST_TO_ADDR
// PrepareScout ;
4278: CALL 4287 0 0
// end ;
4282: LD_VAR 0 1
4286: RET
// function PrepareScout ; var ape ; begin
4287: LD_INT 0
4289: PPUSH
4290: PPUSH
// uc_side := 4 ;
4291: LD_ADDR_OWVAR 20
4295: PUSH
4296: LD_INT 4
4298: ST_TO_ADDR
// uc_nation := 1 ;
4299: LD_ADDR_OWVAR 21
4303: PUSH
4304: LD_INT 1
4306: ST_TO_ADDR
// if LoadVariable ( FrankIn06 , 0 ) then
4307: LD_STRING FrankIn06
4309: PPUSH
4310: LD_INT 0
4312: PPUSH
4313: CALL_OW 30
4317: IFFALSE 4334
// Frank := CreateCharacter ( 06c_Frank ) else
4319: LD_ADDR_EXP 15
4323: PUSH
4324: LD_STRING 06c_Frank
4326: PPUSH
4327: CALL_OW 34
4331: ST_TO_ADDR
4332: GO 4374
// if LoadVariable ( FrankInDelta , 0 ) then
4334: LD_STRING FrankInDelta
4336: PPUSH
4337: LD_INT 0
4339: PPUSH
4340: CALL_OW 30
4344: IFFALSE 4361
// Frank := CreateCharacter ( 05_Frank ) else
4346: LD_ADDR_EXP 15
4350: PUSH
4351: LD_STRING 05_Frank
4353: PPUSH
4354: CALL_OW 34
4358: ST_TO_ADDR
4359: GO 4374
// Frank := CreateCharacter ( 04_Frank ) ;
4361: LD_ADDR_EXP 15
4365: PUSH
4366: LD_STRING 04_Frank
4368: PPUSH
4369: CALL_OW 34
4373: ST_TO_ADDR
// if Frank then
4374: LD_EXP 15
4378: IFFALSE 4511
// begin PlaceUnitArea ( Frank , scoutArea , false ) ;
4380: LD_EXP 15
4384: PPUSH
4385: LD_INT 2
4387: PPUSH
4388: LD_INT 0
4390: PPUSH
4391: CALL_OW 49
// SetClass ( Frank , 1 ) ;
4395: LD_EXP 15
4399: PPUSH
4400: LD_INT 1
4402: PPUSH
4403: CALL_OW 336
// uc_side := 0 ;
4407: LD_ADDR_OWVAR 20
4411: PUSH
4412: LD_INT 0
4414: ST_TO_ADDR
// uc_nation := 0 ;
4415: LD_ADDR_OWVAR 21
4419: PUSH
4420: LD_INT 0
4422: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 0 ) ;
4423: LD_INT 0
4425: PPUSH
4426: LD_INT 12
4428: PPUSH
4429: LD_INT 0
4431: PPUSH
4432: CALL_OW 380
// ape := CreateHuman ;
4436: LD_ADDR_VAR 0 2
4440: PUSH
4441: CALL_OW 44
4445: ST_TO_ADDR
// PlaceUnitXYR ( ape , GetX ( Frank ) , GetY ( Frank ) , 5 , false ) ;
4446: LD_VAR 0 2
4450: PPUSH
4451: LD_EXP 15
4455: PPUSH
4456: CALL_OW 250
4460: PPUSH
4461: LD_EXP 15
4465: PPUSH
4466: CALL_OW 251
4470: PPUSH
4471: LD_INT 5
4473: PPUSH
4474: LD_INT 0
4476: PPUSH
4477: CALL_OW 50
// ComTurnUnit ( ape , Frank ) ;
4481: LD_VAR 0 2
4485: PPUSH
4486: LD_EXP 15
4490: PPUSH
4491: CALL_OW 119
// ComTurnUnit ( Frank , ape ) ;
4495: LD_EXP 15
4499: PPUSH
4500: LD_VAR 0 2
4504: PPUSH
4505: CALL_OW 119
// exit ;
4509: GO 4554
// end ; Kikuchi := PrepareUnit ( Yamoko , false ,  ) ;
4511: LD_ADDR_EXP 18
4515: PUSH
4516: LD_STRING Yamoko
4518: PPUSH
4519: LD_INT 0
4521: PPUSH
4522: LD_STRING 
4524: PPUSH
4525: CALL 33019 0 3
4529: ST_TO_ADDR
// PlaceUnitArea ( Kikuchi , scoutArea , false ) ;
4530: LD_EXP 18
4534: PPUSH
4535: LD_INT 2
4537: PPUSH
4538: LD_INT 0
4540: PPUSH
4541: CALL_OW 49
// ComHold ( Kikuchi ) ;
4545: LD_EXP 18
4549: PPUSH
4550: CALL_OW 140
// end ; end_of_file
4554: LD_VAR 0 1
4558: RET
// export ru_rebuild_list ; export function PrepareRussians ; var i , j , r , un , skill , filter , tmp , dep_list , lab_list , fac_list , breastworks_list , bunker_list , turret_list , weapons_list , personel_counter ; begin
4559: LD_INT 0
4561: PPUSH
4562: PPUSH
4563: PPUSH
4564: PPUSH
4565: PPUSH
4566: PPUSH
4567: PPUSH
4568: PPUSH
4569: PPUSH
4570: PPUSH
4571: PPUSH
4572: PPUSH
4573: PPUSH
4574: PPUSH
4575: PPUSH
4576: PPUSH
// ru_rebuild_list := [ ] ;
4577: LD_ADDR_EXP 20
4581: PUSH
4582: EMPTY
4583: ST_TO_ADDR
// uc_side := 3 ;
4584: LD_ADDR_OWVAR 20
4588: PUSH
4589: LD_INT 3
4591: ST_TO_ADDR
// uc_nation := 3 ;
4592: LD_ADDR_OWVAR 21
4596: PUSH
4597: LD_INT 3
4599: ST_TO_ADDR
// if Difficulty > 1 then
4600: LD_OWVAR 67
4604: PUSH
4605: LD_INT 1
4607: GREATER
4608: IFFALSE 4775
// begin bc_type := b_breastwork ;
4610: LD_ADDR_OWVAR 42
4614: PUSH
4615: LD_INT 31
4617: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 78 , 74 , 2 ) ;
4618: LD_INT 78
4620: PPUSH
4621: LD_INT 74
4623: PPUSH
4624: LD_INT 2
4626: PPUSH
4627: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 171 , 193 , 4 ) ;
4631: LD_INT 171
4633: PPUSH
4634: LD_INT 193
4636: PPUSH
4637: LD_INT 4
4639: PPUSH
4640: CALL_OW 47
// bc_type := b_turret ;
4644: LD_ADDR_OWVAR 42
4648: PUSH
4649: LD_INT 33
4651: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 129 , 96 , 3 ) ;
4652: LD_INT 129
4654: PPUSH
4655: LD_INT 96
4657: PPUSH
4658: LD_INT 3
4660: PPUSH
4661: CALL_OW 47
// if Difficulty > 2 then
4665: LD_OWVAR 67
4669: PUSH
4670: LD_INT 2
4672: GREATER
4673: IFFALSE 4744
// begin RemoveUnit ( HexInfo ( 83 , 141 ) ) ;
4675: LD_INT 83
4677: PPUSH
4678: LD_INT 141
4680: PPUSH
4681: CALL_OW 428
4685: PPUSH
4686: CALL_OW 64
// RemoveUnit ( HexInfo ( 78 , 133 ) ) ;
4690: LD_INT 78
4692: PPUSH
4693: LD_INT 133
4695: PPUSH
4696: CALL_OW 428
4700: PPUSH
4701: CALL_OW 64
// CreateAndPlaceBuildingXYD ( 83 , 141 , 2 ) ;
4705: LD_INT 83
4707: PPUSH
4708: LD_INT 141
4710: PPUSH
4711: LD_INT 2
4713: PPUSH
4714: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 78 , 133 , 2 ) ;
4718: LD_INT 78
4720: PPUSH
4721: LD_INT 133
4723: PPUSH
4724: LD_INT 2
4726: PPUSH
4727: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 145 , 112 , 3 ) ;
4731: LD_INT 145
4733: PPUSH
4734: LD_INT 112
4736: PPUSH
4737: LD_INT 3
4739: PPUSH
4740: CALL_OW 47
// end ; if Difficulty > 3 then
4744: LD_OWVAR 67
4748: PUSH
4749: LD_INT 3
4751: GREATER
4752: IFFALSE 4775
// begin bc_type := b_bunker ;
4754: LD_ADDR_OWVAR 42
4758: PUSH
4759: LD_INT 32
4761: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 44 , 50 , 4 ) ;
4762: LD_INT 44
4764: PPUSH
4765: LD_INT 50
4767: PPUSH
4768: LD_INT 4
4770: PPUSH
4771: CALL_OW 47
// end ; end ; dep_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
4775: LD_ADDR_VAR 0 9
4779: PUSH
4780: LD_INT 22
4782: PUSH
4783: LD_INT 3
4785: PUSH
4786: EMPTY
4787: LIST
4788: LIST
4789: PUSH
4790: LD_INT 2
4792: PUSH
4793: LD_INT 30
4795: PUSH
4796: LD_INT 0
4798: PUSH
4799: EMPTY
4800: LIST
4801: LIST
4802: PUSH
4803: LD_INT 30
4805: PUSH
4806: LD_INT 1
4808: PUSH
4809: EMPTY
4810: LIST
4811: LIST
4812: PUSH
4813: EMPTY
4814: LIST
4815: LIST
4816: LIST
4817: PUSH
4818: EMPTY
4819: LIST
4820: LIST
4821: PPUSH
4822: CALL_OW 69
4826: ST_TO_ADDR
// lab_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
4827: LD_ADDR_VAR 0 10
4831: PUSH
4832: LD_INT 22
4834: PUSH
4835: LD_INT 3
4837: PUSH
4838: EMPTY
4839: LIST
4840: LIST
4841: PUSH
4842: LD_INT 2
4844: PUSH
4845: LD_INT 30
4847: PUSH
4848: LD_INT 6
4850: PUSH
4851: EMPTY
4852: LIST
4853: LIST
4854: PUSH
4855: LD_INT 30
4857: PUSH
4858: LD_INT 7
4860: PUSH
4861: EMPTY
4862: LIST
4863: LIST
4864: PUSH
4865: LD_INT 30
4867: PUSH
4868: LD_INT 8
4870: PUSH
4871: EMPTY
4872: LIST
4873: LIST
4874: PUSH
4875: EMPTY
4876: LIST
4877: LIST
4878: LIST
4879: LIST
4880: PUSH
4881: EMPTY
4882: LIST
4883: LIST
4884: PPUSH
4885: CALL_OW 69
4889: ST_TO_ADDR
// fac_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) ;
4890: LD_ADDR_VAR 0 11
4894: PUSH
4895: LD_INT 22
4897: PUSH
4898: LD_INT 3
4900: PUSH
4901: EMPTY
4902: LIST
4903: LIST
4904: PUSH
4905: LD_INT 30
4907: PUSH
4908: LD_INT 3
4910: PUSH
4911: EMPTY
4912: LIST
4913: LIST
4914: PUSH
4915: EMPTY
4916: LIST
4917: LIST
4918: PPUSH
4919: CALL_OW 69
4923: ST_TO_ADDR
// breastworks_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) ;
4924: LD_ADDR_VAR 0 12
4928: PUSH
4929: LD_INT 22
4931: PUSH
4932: LD_INT 3
4934: PUSH
4935: EMPTY
4936: LIST
4937: LIST
4938: PUSH
4939: LD_INT 30
4941: PUSH
4942: LD_INT 31
4944: PUSH
4945: EMPTY
4946: LIST
4947: LIST
4948: PUSH
4949: EMPTY
4950: LIST
4951: LIST
4952: PPUSH
4953: CALL_OW 69
4957: ST_TO_ADDR
// bunker_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) ;
4958: LD_ADDR_VAR 0 13
4962: PUSH
4963: LD_INT 22
4965: PUSH
4966: LD_INT 3
4968: PUSH
4969: EMPTY
4970: LIST
4971: LIST
4972: PUSH
4973: LD_INT 30
4975: PUSH
4976: LD_INT 32
4978: PUSH
4979: EMPTY
4980: LIST
4981: LIST
4982: PUSH
4983: EMPTY
4984: LIST
4985: LIST
4986: PPUSH
4987: CALL_OW 69
4991: ST_TO_ADDR
// turret_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_turret ] ] ) ;
4992: LD_ADDR_VAR 0 14
4996: PUSH
4997: LD_INT 22
4999: PUSH
5000: LD_INT 3
5002: PUSH
5003: EMPTY
5004: LIST
5005: LIST
5006: PUSH
5007: LD_INT 30
5009: PUSH
5010: LD_INT 33
5012: PUSH
5013: EMPTY
5014: LIST
5015: LIST
5016: PUSH
5017: EMPTY
5018: LIST
5019: LIST
5020: PPUSH
5021: CALL_OW 69
5025: ST_TO_ADDR
// weapons_list := [ [ ru_heavy_machine_gun , 5 ] , [ ru_gatling_gun , 50 ] , [ ru_gun , 30 ] , [ ru_heavy_gun , 15 ] ] ;
5026: LD_ADDR_VAR 0 15
5030: PUSH
5031: LD_INT 42
5033: PUSH
5034: LD_INT 5
5036: PUSH
5037: EMPTY
5038: LIST
5039: LIST
5040: PUSH
5041: LD_INT 43
5043: PUSH
5044: LD_INT 50
5046: PUSH
5047: EMPTY
5048: LIST
5049: LIST
5050: PUSH
5051: LD_INT 44
5053: PUSH
5054: LD_INT 30
5056: PUSH
5057: EMPTY
5058: LIST
5059: LIST
5060: PUSH
5061: LD_INT 46
5063: PUSH
5064: LD_INT 15
5066: PUSH
5067: EMPTY
5068: LIST
5069: LIST
5070: PUSH
5071: EMPTY
5072: LIST
5073: LIST
5074: LIST
5075: LIST
5076: ST_TO_ADDR
// personel_counter := [ 0 , 4 , 6 , 3 ] ;
5077: LD_ADDR_VAR 0 16
5081: PUSH
5082: LD_INT 0
5084: PUSH
5085: LD_INT 4
5087: PUSH
5088: LD_INT 6
5090: PUSH
5091: LD_INT 3
5093: PUSH
5094: EMPTY
5095: LIST
5096: LIST
5097: LIST
5098: LIST
5099: ST_TO_ADDR
// skill := [ 4 , 5 , 6 , 7 ] [ Difficulty ] ;
5100: LD_ADDR_VAR 0 6
5104: PUSH
5105: LD_INT 4
5107: PUSH
5108: LD_INT 5
5110: PUSH
5111: LD_INT 6
5113: PUSH
5114: LD_INT 7
5116: PUSH
5117: EMPTY
5118: LIST
5119: LIST
5120: LIST
5121: LIST
5122: PUSH
5123: LD_OWVAR 67
5127: ARRAY
5128: ST_TO_ADDR
// SetBName ( ru_dep_main , am_tukh ) ;
5129: LD_INT 16
5131: PPUSH
5132: LD_STRING am_tukh
5134: PPUSH
5135: CALL_OW 500
// for i in FilterAllUnits ( [ f_type , unit_building ] ) do
5139: LD_ADDR_VAR 0 2
5143: PUSH
5144: LD_INT 21
5146: PUSH
5147: LD_INT 3
5149: PUSH
5150: EMPTY
5151: LIST
5152: LIST
5153: PPUSH
5154: CALL_OW 69
5158: PUSH
5159: FOR_IN
5160: IFFALSE 5197
// SetBLevel ( i , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
5162: LD_VAR 0 2
5166: PPUSH
5167: LD_INT 4
5169: PUSH
5170: LD_INT 5
5172: PUSH
5173: LD_INT 6
5175: PUSH
5176: LD_INT 7
5178: PUSH
5179: EMPTY
5180: LIST
5181: LIST
5182: LIST
5183: LIST
5184: PUSH
5185: LD_OWVAR 67
5189: ARRAY
5190: PPUSH
5191: CALL_OW 241
5195: GO 5159
5197: POP
5198: POP
// for i in dep_list do
5199: LD_ADDR_VAR 0 2
5203: PUSH
5204: LD_VAR 0 9
5208: PUSH
5209: FOR_IN
5210: IFFALSE 5254
// begin SetResourceType ( GetBase ( i ) , mat_cans , 1000 ) ;
5212: LD_VAR 0 2
5216: PPUSH
5217: CALL_OW 274
5221: PPUSH
5222: LD_INT 1
5224: PPUSH
5225: LD_INT 1000
5227: PPUSH
5228: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 1000 ) ;
5232: LD_VAR 0 2
5236: PPUSH
5237: CALL_OW 274
5241: PPUSH
5242: LD_INT 2
5244: PPUSH
5245: LD_INT 1000
5247: PPUSH
5248: CALL_OW 277
// end ;
5252: GO 5209
5254: POP
5255: POP
// InitHc ;
5256: CALL_OW 19
// tmp := bunker_list * [ 45 , 60 , 70 , 80 ] [ Difficulty ] div 100 ;
5260: LD_ADDR_VAR 0 8
5264: PUSH
5265: LD_VAR 0 13
5269: PUSH
5270: LD_INT 45
5272: PUSH
5273: LD_INT 60
5275: PUSH
5276: LD_INT 70
5278: PUSH
5279: LD_INT 80
5281: PUSH
5282: EMPTY
5283: LIST
5284: LIST
5285: LIST
5286: LIST
5287: PUSH
5288: LD_OWVAR 67
5292: ARRAY
5293: MUL
5294: PUSH
5295: LD_INT 100
5297: DIV
5298: ST_TO_ADDR
// personel_counter := Replace ( personel_counter , 1 , tmp ) ;
5299: LD_ADDR_VAR 0 16
5303: PUSH
5304: LD_VAR 0 16
5308: PPUSH
5309: LD_INT 1
5311: PPUSH
5312: LD_VAR 0 8
5316: PPUSH
5317: CALL_OW 1
5321: ST_TO_ADDR
// tmp := [ ] ;
5322: LD_ADDR_VAR 0 8
5326: PUSH
5327: EMPTY
5328: ST_TO_ADDR
// for i in bunker_list do
5329: LD_ADDR_VAR 0 2
5333: PUSH
5334: LD_VAR 0 13
5338: PUSH
5339: FOR_IN
5340: IFFALSE 5436
// if i mod 10 + 1 < tmp then
5342: LD_VAR 0 2
5346: PUSH
5347: LD_INT 10
5349: MOD
5350: PUSH
5351: LD_INT 1
5353: PLUS
5354: PUSH
5355: LD_VAR 0 8
5359: LESS
5360: IFFALSE 5405
// tmp := Insert ( tmp , i mod rand ( 3 , 5 ) + 1 , i ) else
5362: LD_ADDR_VAR 0 8
5366: PUSH
5367: LD_VAR 0 8
5371: PPUSH
5372: LD_VAR 0 2
5376: PUSH
5377: LD_INT 3
5379: PPUSH
5380: LD_INT 5
5382: PPUSH
5383: CALL_OW 12
5387: MOD
5388: PUSH
5389: LD_INT 1
5391: PLUS
5392: PPUSH
5393: LD_VAR 0 2
5397: PPUSH
5398: CALL_OW 2
5402: ST_TO_ADDR
5403: GO 5434
// tmp := Insert ( tmp , tmp + 1 , i ) ;
5405: LD_ADDR_VAR 0 8
5409: PUSH
5410: LD_VAR 0 8
5414: PPUSH
5415: LD_VAR 0 8
5419: PUSH
5420: LD_INT 1
5422: PLUS
5423: PPUSH
5424: LD_VAR 0 2
5428: PPUSH
5429: CALL_OW 2
5433: ST_TO_ADDR
5434: GO 5339
5436: POP
5437: POP
// bunker_list := tmp ;
5438: LD_ADDR_VAR 0 13
5442: PUSH
5443: LD_VAR 0 8
5447: ST_TO_ADDR
// for i in bunker_list ^ turret_list do
5448: LD_ADDR_VAR 0 2
5452: PUSH
5453: LD_VAR 0 13
5457: PUSH
5458: LD_VAR 0 14
5462: ADD
5463: PUSH
5464: FOR_IN
5465: IFFALSE 5488
// PlaceWeaponTurret ( i , GetTurretWeaponBase ( i ) ) ;
5467: LD_VAR 0 2
5471: PPUSH
5472: LD_VAR 0 2
5476: PPUSH
5477: CALL 2225 0 1
5481: PPUSH
5482: CALL_OW 431
5486: GO 5464
5488: POP
5489: POP
// while ( personel_counter [ 1 ] ) do
5490: LD_VAR 0 16
5494: PUSH
5495: LD_INT 1
5497: ARRAY
5498: IFFALSE 5606
// begin i := rand ( 1 , bunker_list ) ;
5500: LD_ADDR_VAR 0 2
5504: PUSH
5505: LD_INT 1
5507: PPUSH
5508: LD_VAR 0 13
5512: PPUSH
5513: CALL_OW 12
5517: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
5518: LD_INT 0
5520: PPUSH
5521: LD_INT 1
5523: PPUSH
5524: LD_VAR 0 6
5528: PPUSH
5529: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , bunker_list [ i ] ) ;
5533: CALL_OW 44
5537: PPUSH
5538: LD_VAR 0 13
5542: PUSH
5543: LD_VAR 0 2
5547: ARRAY
5548: PPUSH
5549: CALL_OW 52
// bunker_list := Delete ( bunker_list , i ) ;
5553: LD_ADDR_VAR 0 13
5557: PUSH
5558: LD_VAR 0 13
5562: PPUSH
5563: LD_VAR 0 2
5567: PPUSH
5568: CALL_OW 3
5572: ST_TO_ADDR
// personel_counter := Replace ( personel_counter , 1 , personel_counter [ 1 ] - 1 ) ;
5573: LD_ADDR_VAR 0 16
5577: PUSH
5578: LD_VAR 0 16
5582: PPUSH
5583: LD_INT 1
5585: PPUSH
5586: LD_VAR 0 16
5590: PUSH
5591: LD_INT 1
5593: ARRAY
5594: PUSH
5595: LD_INT 1
5597: MINUS
5598: PPUSH
5599: CALL_OW 1
5603: ST_TO_ADDR
// end ;
5604: GO 5490
// for i = 1 to personel_counter [ 2 ] do
5606: LD_ADDR_VAR 0 2
5610: PUSH
5611: DOUBLE
5612: LD_INT 1
5614: DEC
5615: ST_TO_ADDR
5616: LD_VAR 0 16
5620: PUSH
5621: LD_INT 2
5623: ARRAY
5624: PUSH
5625: FOR_TO
5626: IFFALSE 5657
// begin PrepareHuman ( false , 2 , skill ) ;
5628: LD_INT 0
5630: PPUSH
5631: LD_INT 2
5633: PPUSH
5634: LD_VAR 0 6
5638: PPUSH
5639: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , ru_dep_main ) ;
5643: CALL_OW 44
5647: PPUSH
5648: LD_INT 16
5650: PPUSH
5651: CALL_OW 52
// end ;
5655: GO 5625
5657: POP
5658: POP
// for i = 1 to personel_counter [ 3 ] do
5659: LD_ADDR_VAR 0 2
5663: PUSH
5664: DOUBLE
5665: LD_INT 1
5667: DEC
5668: ST_TO_ADDR
5669: LD_VAR 0 16
5673: PUSH
5674: LD_INT 3
5676: ARRAY
5677: PUSH
5678: FOR_TO
5679: IFFALSE 5726
// begin PrepareHuman ( false , 3 , skill ) ;
5681: LD_INT 0
5683: PPUSH
5684: LD_INT 3
5686: PPUSH
5687: LD_VAR 0 6
5691: PPUSH
5692: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , fac_list [ i mod 2 + 1 ] ) ;
5696: CALL_OW 44
5700: PPUSH
5701: LD_VAR 0 11
5705: PUSH
5706: LD_VAR 0 2
5710: PUSH
5711: LD_INT 2
5713: MOD
5714: PUSH
5715: LD_INT 1
5717: PLUS
5718: ARRAY
5719: PPUSH
5720: CALL_OW 52
// end ;
5724: GO 5678
5726: POP
5727: POP
// for i = 1 to personel_counter [ 4 ] do
5728: LD_ADDR_VAR 0 2
5732: PUSH
5733: DOUBLE
5734: LD_INT 1
5736: DEC
5737: ST_TO_ADDR
5738: LD_VAR 0 16
5742: PUSH
5743: LD_INT 4
5745: ARRAY
5746: PUSH
5747: FOR_TO
5748: IFFALSE 5785
// begin PrepareHuman ( false , 4 , skill ) ;
5750: LD_INT 0
5752: PPUSH
5753: LD_INT 4
5755: PPUSH
5756: LD_VAR 0 6
5760: PPUSH
5761: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , lab_list [ 1 ] ) ;
5765: CALL_OW 44
5769: PPUSH
5770: LD_VAR 0 10
5774: PUSH
5775: LD_INT 1
5777: ARRAY
5778: PPUSH
5779: CALL_OW 52
// end ;
5783: GO 5747
5785: POP
5786: POP
// for i in breastworks_list do
5787: LD_ADDR_VAR 0 2
5791: PUSH
5792: LD_VAR 0 12
5796: PUSH
5797: FOR_IN
5798: IFFALSE 5910
// begin r := GetDir ( i ) ;
5800: LD_ADDR_VAR 0 4
5804: PUSH
5805: LD_VAR 0 2
5809: PPUSH
5810: CALL_OW 254
5814: ST_TO_ADDR
// if r > 3 then
5815: LD_VAR 0 4
5819: PUSH
5820: LD_INT 3
5822: GREATER
5823: IFFALSE 5841
// r := r - 3 else
5825: LD_ADDR_VAR 0 4
5829: PUSH
5830: LD_VAR 0 4
5834: PUSH
5835: LD_INT 3
5837: MINUS
5838: ST_TO_ADDR
5839: GO 5855
// r := r + 3 ;
5841: LD_ADDR_VAR 0 4
5845: PUSH
5846: LD_VAR 0 4
5850: PUSH
5851: LD_INT 3
5853: PLUS
5854: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
5855: LD_INT 0
5857: PPUSH
5858: LD_INT 1
5860: PPUSH
5861: LD_VAR 0 6
5865: PPUSH
5866: CALL_OW 380
// un := CreateHuman ;
5870: LD_ADDR_VAR 0 5
5874: PUSH
5875: CALL_OW 44
5879: ST_TO_ADDR
// SetDir ( un , r ) ;
5880: LD_VAR 0 5
5884: PPUSH
5885: LD_VAR 0 4
5889: PPUSH
5890: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
5894: LD_VAR 0 5
5898: PPUSH
5899: LD_VAR 0 2
5903: PPUSH
5904: CALL_OW 52
// end ;
5908: GO 5797
5910: POP
5911: POP
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) ;
5912: LD_ADDR_VAR 0 8
5916: PUSH
5917: LD_INT 22
5919: PUSH
5920: LD_INT 3
5922: PUSH
5923: EMPTY
5924: LIST
5925: LIST
5926: PUSH
5927: LD_INT 25
5929: PUSH
5930: LD_INT 3
5932: PUSH
5933: EMPTY
5934: LIST
5935: LIST
5936: PUSH
5937: EMPTY
5938: LIST
5939: LIST
5940: PPUSH
5941: CALL_OW 69
5945: ST_TO_ADDR
// r := [ 4 , 5 , 6 , 6 ] [ Difficulty ] ;
5946: LD_ADDR_VAR 0 4
5950: PUSH
5951: LD_INT 4
5953: PUSH
5954: LD_INT 5
5956: PUSH
5957: LD_INT 6
5959: PUSH
5960: LD_INT 6
5962: PUSH
5963: EMPTY
5964: LIST
5965: LIST
5966: LIST
5967: LIST
5968: PUSH
5969: LD_OWVAR 67
5973: ARRAY
5974: ST_TO_ADDR
// for i = 1 to r do
5975: LD_ADDR_VAR 0 2
5979: PUSH
5980: DOUBLE
5981: LD_INT 1
5983: DEC
5984: ST_TO_ADDR
5985: LD_VAR 0 4
5989: PUSH
5990: FOR_TO
5991: IFFALSE 6164
// begin un := PrepareTank ( 3 , 3 , [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked ] [ i mod 3 + 1 ] , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_machine_gun ] [ i mod 3 + 1 ] , 100 ) ;
5993: LD_ADDR_VAR 0 5
5997: PUSH
5998: LD_INT 3
6000: PPUSH
6001: LD_INT 3
6003: PPUSH
6004: LD_INT 22
6006: PUSH
6007: LD_INT 22
6009: PUSH
6010: LD_INT 24
6012: PUSH
6013: EMPTY
6014: LIST
6015: LIST
6016: LIST
6017: PUSH
6018: LD_VAR 0 2
6022: PUSH
6023: LD_INT 3
6025: MOD
6026: PUSH
6027: LD_INT 1
6029: PLUS
6030: ARRAY
6031: PPUSH
6032: LD_INT 1
6034: PPUSH
6035: LD_INT 1
6037: PPUSH
6038: LD_INT 43
6040: PUSH
6041: LD_INT 44
6043: PUSH
6044: LD_INT 42
6046: PUSH
6047: EMPTY
6048: LIST
6049: LIST
6050: LIST
6051: PUSH
6052: LD_VAR 0 2
6056: PUSH
6057: LD_INT 3
6059: MOD
6060: PUSH
6061: LD_INT 1
6063: PLUS
6064: ARRAY
6065: PPUSH
6066: LD_INT 100
6068: PPUSH
6069: CALL 520 0 7
6073: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
6074: LD_VAR 0 5
6078: PPUSH
6079: LD_INT 0
6081: PPUSH
6082: LD_INT 5
6084: PPUSH
6085: CALL_OW 12
6089: PPUSH
6090: CALL_OW 233
// PlaceUnitArea ( un , parkingArea , false ) ;
6094: LD_VAR 0 5
6098: PPUSH
6099: LD_INT 5
6101: PPUSH
6102: LD_INT 0
6104: PPUSH
6105: CALL_OW 49
// if i > tmp - 2 then
6109: LD_VAR 0 2
6113: PUSH
6114: LD_VAR 0 8
6118: PUSH
6119: LD_INT 2
6121: MINUS
6122: GREATER
6123: IFFALSE 6127
// continue ;
6125: GO 5990
// ComExitBuilding ( tmp [ i ] ) ;
6127: LD_VAR 0 8
6131: PUSH
6132: LD_VAR 0 2
6136: ARRAY
6137: PPUSH
6138: CALL_OW 122
// AddComEnterUnit ( tmp [ i ] , un ) ;
6142: LD_VAR 0 8
6146: PUSH
6147: LD_VAR 0 2
6151: ARRAY
6152: PPUSH
6153: LD_VAR 0 5
6157: PPUSH
6158: CALL_OW 180
// end ;
6162: GO 5990
6164: POP
6165: POP
// end ;
6166: LD_VAR 0 1
6170: RET
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) do var i , filter , tmp , engs , enemy ;
6171: LD_INT 22
6173: PUSH
6174: LD_INT 3
6176: PUSH
6177: EMPTY
6178: LIST
6179: LIST
6180: PUSH
6181: LD_INT 25
6183: PUSH
6184: LD_INT 2
6186: PUSH
6187: EMPTY
6188: LIST
6189: LIST
6190: PUSH
6191: EMPTY
6192: LIST
6193: LIST
6194: PPUSH
6195: CALL_OW 69
6199: IFFALSE 6931
6201: GO 6203
6203: DISABLE
6204: LD_INT 0
6206: PPUSH
6207: PPUSH
6208: PPUSH
6209: PPUSH
6210: PPUSH
// begin enable ;
6211: ENABLE
// filter := FilterUnitsInArea ( baseArea , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
6212: LD_ADDR_VAR 0 2
6216: PUSH
6217: LD_INT 6
6219: PPUSH
6220: LD_INT 3
6222: PUSH
6223: LD_INT 24
6225: PUSH
6226: LD_INT 1000
6228: PUSH
6229: EMPTY
6230: LIST
6231: LIST
6232: PUSH
6233: EMPTY
6234: LIST
6235: LIST
6236: PUSH
6237: LD_INT 21
6239: PUSH
6240: LD_INT 3
6242: PUSH
6243: EMPTY
6244: LIST
6245: LIST
6246: PUSH
6247: EMPTY
6248: LIST
6249: LIST
6250: PPUSH
6251: CALL_OW 70
6255: ST_TO_ADDR
// engs := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
6256: LD_ADDR_VAR 0 4
6260: PUSH
6261: LD_INT 22
6263: PUSH
6264: LD_INT 3
6266: PUSH
6267: EMPTY
6268: LIST
6269: LIST
6270: PUSH
6271: LD_INT 25
6273: PUSH
6274: LD_INT 2
6276: PUSH
6277: EMPTY
6278: LIST
6279: LIST
6280: PUSH
6281: EMPTY
6282: LIST
6283: LIST
6284: PPUSH
6285: CALL_OW 69
6289: ST_TO_ADDR
// if not filter and not ru_rebuild_list then
6290: LD_VAR 0 2
6294: NOT
6295: PUSH
6296: LD_EXP 20
6300: NOT
6301: AND
6302: IFFALSE 6372
// begin for i in engs do
6304: LD_ADDR_VAR 0 1
6308: PUSH
6309: LD_VAR 0 4
6313: PUSH
6314: FOR_IN
6315: IFFALSE 6370
// if GetLives ( i ) = 1000 and not HasTask ( i ) and not IsInUnit ( i ) then
6317: LD_VAR 0 1
6321: PPUSH
6322: CALL_OW 256
6326: PUSH
6327: LD_INT 1000
6329: EQUAL
6330: PUSH
6331: LD_VAR 0 1
6335: PPUSH
6336: CALL_OW 314
6340: NOT
6341: AND
6342: PUSH
6343: LD_VAR 0 1
6347: PPUSH
6348: CALL_OW 310
6352: NOT
6353: AND
6354: IFFALSE 6368
// ComEnterUnit ( i , ru_dep_main ) ;
6356: LD_VAR 0 1
6360: PPUSH
6361: LD_INT 16
6363: PPUSH
6364: CALL_OW 120
6368: GO 6314
6370: POP
6371: POP
// end ; if UnitFilter ( engs , [ f_not , [ f_lives , 650 ] ] ) then
6372: LD_VAR 0 4
6376: PPUSH
6377: LD_INT 3
6379: PUSH
6380: LD_INT 24
6382: PUSH
6383: LD_INT 650
6385: PUSH
6386: EMPTY
6387: LIST
6388: LIST
6389: PUSH
6390: EMPTY
6391: LIST
6392: LIST
6393: PPUSH
6394: CALL_OW 72
6398: IFFALSE 6491
// begin tmp := UnitFilter ( engs , [ f_not , [ f_lives , 650 ] ] ) ;
6400: LD_ADDR_VAR 0 3
6404: PUSH
6405: LD_VAR 0 4
6409: PPUSH
6410: LD_INT 3
6412: PUSH
6413: LD_INT 24
6415: PUSH
6416: LD_INT 650
6418: PUSH
6419: EMPTY
6420: LIST
6421: LIST
6422: PUSH
6423: EMPTY
6424: LIST
6425: LIST
6426: PPUSH
6427: CALL_OW 72
6431: ST_TO_ADDR
// for i in tmp do
6432: LD_ADDR_VAR 0 1
6436: PUSH
6437: LD_VAR 0 3
6441: PUSH
6442: FOR_IN
6443: IFFALSE 6489
// if not IsInArea ( i , mainBaseArea ) then
6445: LD_VAR 0 1
6449: PPUSH
6450: LD_INT 14
6452: PPUSH
6453: CALL_OW 308
6457: NOT
6458: IFFALSE 6487
// begin ComMoveXY ( i , 129 , 125 ) ;
6460: LD_VAR 0 1
6464: PPUSH
6465: LD_INT 129
6467: PPUSH
6468: LD_INT 125
6470: PPUSH
6471: CALL_OW 111
// AddComWait ( i , 0 0$30 ) ;
6475: LD_VAR 0 1
6479: PPUSH
6480: LD_INT 1050
6482: PPUSH
6483: CALL_OW 202
// end ;
6487: GO 6442
6489: POP
6490: POP
// end ; engs := UnitFilter ( engs , [ f_lives , 650 ] ) ;
6491: LD_ADDR_VAR 0 4
6495: PUSH
6496: LD_VAR 0 4
6500: PPUSH
6501: LD_INT 24
6503: PUSH
6504: LD_INT 650
6506: PUSH
6507: EMPTY
6508: LIST
6509: LIST
6510: PPUSH
6511: CALL_OW 72
6515: ST_TO_ADDR
// if not engs then
6516: LD_VAR 0 4
6520: NOT
6521: IFFALSE 6525
// exit ;
6523: GO 6931
// if filter then
6525: LD_VAR 0 2
6529: IFFALSE 6788
// begin for i in engs do
6531: LD_ADDR_VAR 0 1
6535: PUSH
6536: LD_VAR 0 4
6540: PUSH
6541: FOR_IN
6542: IFFALSE 6566
// if IsInUnit ( i ) then
6544: LD_VAR 0 1
6548: PPUSH
6549: CALL_OW 310
6553: IFFALSE 6564
// ComExitBuilding ( i ) ;
6555: LD_VAR 0 1
6559: PPUSH
6560: CALL_OW 122
6564: GO 6541
6566: POP
6567: POP
// wait ( 3 ) ;
6568: LD_INT 3
6570: PPUSH
6571: CALL_OW 67
// if filter >= 2 and engs >= 2 then
6575: LD_VAR 0 2
6579: PUSH
6580: LD_INT 2
6582: GREATEREQUAL
6583: PUSH
6584: LD_VAR 0 4
6588: PUSH
6589: LD_INT 2
6591: GREATEREQUAL
6592: AND
6593: IFFALSE 6741
// begin for i = 1 to engs / 2 do
6595: LD_ADDR_VAR 0 1
6599: PUSH
6600: DOUBLE
6601: LD_INT 1
6603: DEC
6604: ST_TO_ADDR
6605: LD_VAR 0 4
6609: PUSH
6610: LD_INT 2
6612: DIVREAL
6613: PUSH
6614: FOR_TO
6615: IFFALSE 6661
// if not HasTask ( engs [ i ] ) then
6617: LD_VAR 0 4
6621: PUSH
6622: LD_VAR 0 1
6626: ARRAY
6627: PPUSH
6628: CALL_OW 314
6632: NOT
6633: IFFALSE 6659
// ComRepairBuilding ( engs [ i ] , filter [ 1 ] ) ;
6635: LD_VAR 0 4
6639: PUSH
6640: LD_VAR 0 1
6644: ARRAY
6645: PPUSH
6646: LD_VAR 0 2
6650: PUSH
6651: LD_INT 1
6653: ARRAY
6654: PPUSH
6655: CALL_OW 130
6659: GO 6614
6661: POP
6662: POP
// for i = engs / 2 + 1 to engs do
6663: LD_ADDR_VAR 0 1
6667: PUSH
6668: DOUBLE
6669: LD_VAR 0 4
6673: PUSH
6674: LD_INT 2
6676: DIVREAL
6677: PUSH
6678: LD_INT 1
6680: PLUS
6681: DEC
6682: ST_TO_ADDR
6683: LD_VAR 0 4
6687: PUSH
6688: FOR_TO
6689: IFFALSE 6737
// if not HasTask ( engs [ i ] ) then
6691: LD_VAR 0 4
6695: PUSH
6696: LD_VAR 0 1
6700: ARRAY
6701: PPUSH
6702: CALL_OW 314
6706: NOT
6707: IFFALSE 6735
// ComRepairBuilding ( engs [ i ] , filter [ filter ] ) ;
6709: LD_VAR 0 4
6713: PUSH
6714: LD_VAR 0 1
6718: ARRAY
6719: PPUSH
6720: LD_VAR 0 2
6724: PUSH
6725: LD_VAR 0 2
6729: ARRAY
6730: PPUSH
6731: CALL_OW 130
6735: GO 6688
6737: POP
6738: POP
// end else
6739: GO 6788
// for i in engs do
6741: LD_ADDR_VAR 0 1
6745: PUSH
6746: LD_VAR 0 4
6750: PUSH
6751: FOR_IN
6752: IFFALSE 6786
// if not HasTask ( i ) then
6754: LD_VAR 0 1
6758: PPUSH
6759: CALL_OW 314
6763: NOT
6764: IFFALSE 6784
// ComRepairBuilding ( i , filter [ 1 ] ) ;
6766: LD_VAR 0 1
6770: PPUSH
6771: LD_VAR 0 2
6775: PUSH
6776: LD_INT 1
6778: ARRAY
6779: PPUSH
6780: CALL_OW 130
6784: GO 6751
6786: POP
6787: POP
// end ; enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
6788: LD_ADDR_VAR 0 5
6792: PUSH
6793: LD_INT 81
6795: PUSH
6796: LD_INT 3
6798: PUSH
6799: EMPTY
6800: LIST
6801: LIST
6802: PPUSH
6803: CALL_OW 69
6807: ST_TO_ADDR
// if ru_rebuild_list and not filter then
6808: LD_EXP 20
6812: PUSH
6813: LD_VAR 0 2
6817: NOT
6818: AND
6819: IFFALSE 6931
// begin ComExitBuilding ( engs ) ;
6821: LD_VAR 0 4
6825: PPUSH
6826: CALL_OW 122
// if GetDistUnitXY ( NearestUnitToXY ( enemy , ru_rebuild_list [ 2 ] , ru_rebuild_list [ 3 ] ) , ru_rebuild_list [ 2 ] , ru_rebuild_list [ 3 ] ) > 10 then
6830: LD_VAR 0 5
6834: PPUSH
6835: LD_EXP 20
6839: PUSH
6840: LD_INT 2
6842: ARRAY
6843: PPUSH
6844: LD_EXP 20
6848: PUSH
6849: LD_INT 3
6851: ARRAY
6852: PPUSH
6853: CALL_OW 73
6857: PPUSH
6858: LD_EXP 20
6862: PUSH
6863: LD_INT 2
6865: ARRAY
6866: PPUSH
6867: LD_EXP 20
6871: PUSH
6872: LD_INT 3
6874: ARRAY
6875: PPUSH
6876: CALL_OW 297
6880: PUSH
6881: LD_INT 10
6883: GREATER
6884: IFFALSE 6931
// ComBuild ( engs , ru_rebuild_list [ 1 ] , ru_rebuild_list [ 2 ] , ru_rebuild_list [ 3 ] , ru_rebuild_list [ 4 ] ) ;
6886: LD_VAR 0 4
6890: PPUSH
6891: LD_EXP 20
6895: PUSH
6896: LD_INT 1
6898: ARRAY
6899: PPUSH
6900: LD_EXP 20
6904: PUSH
6905: LD_INT 2
6907: ARRAY
6908: PPUSH
6909: LD_EXP 20
6913: PUSH
6914: LD_INT 3
6916: ARRAY
6917: PPUSH
6918: LD_EXP 20
6922: PUSH
6923: LD_INT 4
6925: ARRAY
6926: PPUSH
6927: CALL_OW 145
// end ; end ;
6931: PPOPN 5
6933: END
// every 0 0$1 trigger GetLives ( ru_dep_main ) < 250 do var i , tmp ;
6934: LD_INT 16
6936: PPUSH
6937: CALL_OW 256
6941: PUSH
6942: LD_INT 250
6944: LESS
6945: IFFALSE 7135
6947: GO 6949
6949: DISABLE
6950: LD_INT 0
6952: PPUSH
6953: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_class , 1 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ;
6954: LD_ADDR_VAR 0 2
6958: PUSH
6959: LD_INT 22
6961: PUSH
6962: LD_INT 3
6964: PUSH
6965: EMPTY
6966: LIST
6967: LIST
6968: PUSH
6969: LD_INT 2
6971: PUSH
6972: LD_INT 25
6974: PUSH
6975: LD_INT 1
6977: PUSH
6978: EMPTY
6979: LIST
6980: LIST
6981: PUSH
6982: LD_INT 25
6984: PUSH
6985: LD_INT 3
6987: PUSH
6988: EMPTY
6989: LIST
6990: LIST
6991: PUSH
6992: LD_INT 25
6994: PUSH
6995: LD_INT 4
6997: PUSH
6998: EMPTY
6999: LIST
7000: LIST
7001: PUSH
7002: EMPTY
7003: LIST
7004: LIST
7005: LIST
7006: LIST
7007: PUSH
7008: EMPTY
7009: LIST
7010: LIST
7011: PPUSH
7012: CALL_OW 69
7016: ST_TO_ADDR
// ComExitBuilding ( tmp ) ;
7017: LD_VAR 0 2
7021: PPUSH
7022: CALL_OW 122
// wait ( 3 ) ;
7026: LD_INT 3
7028: PPUSH
7029: CALL_OW 67
// ComMoveXY ( tmp , 156 , 211 ) ;
7033: LD_VAR 0 2
7037: PPUSH
7038: LD_INT 156
7040: PPUSH
7041: LD_INT 211
7043: PPUSH
7044: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
7048: LD_INT 35
7050: PPUSH
7051: CALL_OW 67
// for i in tmp do
7055: LD_ADDR_VAR 0 1
7059: PUSH
7060: LD_VAR 0 2
7064: PUSH
7065: FOR_IN
7066: IFFALSE 7126
// if IsInArea ( i , escapeArea ) then
7068: LD_VAR 0 1
7072: PPUSH
7073: LD_INT 15
7075: PPUSH
7076: CALL_OW 308
7080: IFFALSE 7109
// begin RemoveUnit ( i ) ;
7082: LD_VAR 0 1
7086: PPUSH
7087: CALL_OW 64
// tmp := tmp diff i ;
7091: LD_ADDR_VAR 0 2
7095: PUSH
7096: LD_VAR 0 2
7100: PUSH
7101: LD_VAR 0 1
7105: DIFF
7106: ST_TO_ADDR
// end else
7107: GO 7124
// ComMoveXY ( i , 156 , 211 ) ;
7109: LD_VAR 0 1
7113: PPUSH
7114: LD_INT 156
7116: PPUSH
7117: LD_INT 211
7119: PPUSH
7120: CALL_OW 111
7124: GO 7065
7126: POP
7127: POP
// until not tmp ;
7128: LD_VAR 0 2
7132: NOT
7133: IFFALSE 7048
// end ;
7135: PPOPN 2
7137: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do var i , tmp , doc ;
7138: LD_INT 22
7140: PUSH
7141: LD_INT 3
7143: PUSH
7144: EMPTY
7145: LIST
7146: LIST
7147: PUSH
7148: LD_INT 25
7150: PUSH
7151: LD_INT 4
7153: PUSH
7154: EMPTY
7155: LIST
7156: LIST
7157: PUSH
7158: EMPTY
7159: LIST
7160: LIST
7161: PPUSH
7162: CALL_OW 69
7166: IFFALSE 7420
7168: GO 7170
7170: DISABLE
7171: LD_INT 0
7173: PPUSH
7174: PPUSH
7175: PPUSH
// begin enable ;
7176: ENABLE
// tmp := FilterUnitsInArea ( mainBaseArea , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
7177: LD_ADDR_VAR 0 2
7181: PUSH
7182: LD_INT 14
7184: PPUSH
7185: LD_INT 22
7187: PUSH
7188: LD_INT 3
7190: PUSH
7191: EMPTY
7192: LIST
7193: LIST
7194: PUSH
7195: LD_INT 21
7197: PUSH
7198: LD_INT 1
7200: PUSH
7201: EMPTY
7202: LIST
7203: LIST
7204: PUSH
7205: LD_INT 3
7207: PUSH
7208: LD_INT 24
7210: PUSH
7211: LD_INT 1000
7213: PUSH
7214: EMPTY
7215: LIST
7216: LIST
7217: PUSH
7218: EMPTY
7219: LIST
7220: LIST
7221: PUSH
7222: EMPTY
7223: LIST
7224: LIST
7225: LIST
7226: PPUSH
7227: CALL_OW 70
7231: ST_TO_ADDR
// doc := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) ;
7232: LD_ADDR_VAR 0 3
7236: PUSH
7237: LD_INT 22
7239: PUSH
7240: LD_INT 3
7242: PUSH
7243: EMPTY
7244: LIST
7245: LIST
7246: PUSH
7247: LD_INT 25
7249: PUSH
7250: LD_INT 4
7252: PUSH
7253: EMPTY
7254: LIST
7255: LIST
7256: PUSH
7257: EMPTY
7258: LIST
7259: LIST
7260: PPUSH
7261: CALL_OW 69
7265: ST_TO_ADDR
// if not doc then
7266: LD_VAR 0 3
7270: NOT
7271: IFFALSE 7275
// exit ;
7273: GO 7420
// if not tmp then
7275: LD_VAR 0 2
7279: NOT
7280: IFFALSE 7371
// begin if not IsInUnit ( doc [ 1 ] ) then
7282: LD_VAR 0 3
7286: PUSH
7287: LD_INT 1
7289: ARRAY
7290: PPUSH
7291: CALL_OW 310
7295: NOT
7296: IFFALSE 7369
// ComEnterUnit ( doc , FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) [ 1 ] ) ;
7298: LD_VAR 0 3
7302: PPUSH
7303: LD_INT 22
7305: PUSH
7306: LD_INT 3
7308: PUSH
7309: EMPTY
7310: LIST
7311: LIST
7312: PUSH
7313: LD_INT 2
7315: PUSH
7316: LD_INT 30
7318: PUSH
7319: LD_INT 6
7321: PUSH
7322: EMPTY
7323: LIST
7324: LIST
7325: PUSH
7326: LD_INT 30
7328: PUSH
7329: LD_INT 7
7331: PUSH
7332: EMPTY
7333: LIST
7334: LIST
7335: PUSH
7336: LD_INT 30
7338: PUSH
7339: LD_INT 8
7341: PUSH
7342: EMPTY
7343: LIST
7344: LIST
7345: PUSH
7346: EMPTY
7347: LIST
7348: LIST
7349: LIST
7350: LIST
7351: PUSH
7352: EMPTY
7353: LIST
7354: LIST
7355: PPUSH
7356: CALL_OW 69
7360: PUSH
7361: LD_INT 1
7363: ARRAY
7364: PPUSH
7365: CALL_OW 120
// exit ;
7369: GO 7420
// end ; if IsInUnit ( doc [ 1 ] ) then
7371: LD_VAR 0 3
7375: PUSH
7376: LD_INT 1
7378: ARRAY
7379: PPUSH
7380: CALL_OW 310
7384: IFFALSE 7395
// ComExitBuilding ( doc ) ;
7386: LD_VAR 0 3
7390: PPUSH
7391: CALL_OW 122
// wait ( 3 ) ;
7395: LD_INT 3
7397: PPUSH
7398: CALL_OW 67
// ComHeal ( doc , tmp [ 1 ] ) ;
7402: LD_VAR 0 3
7406: PPUSH
7407: LD_VAR 0 2
7411: PUSH
7412: LD_INT 1
7414: ARRAY
7415: PPUSH
7416: CALL_OW 128
// end ;
7420: PPOPN 3
7422: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) do var i , tmp , attacking , areas , area , mech ;
7423: LD_INT 22
7425: PUSH
7426: LD_INT 3
7428: PUSH
7429: EMPTY
7430: LIST
7431: LIST
7432: PUSH
7433: LD_INT 25
7435: PUSH
7436: LD_INT 3
7438: PUSH
7439: EMPTY
7440: LIST
7441: LIST
7442: PUSH
7443: EMPTY
7444: LIST
7445: LIST
7446: PPUSH
7447: CALL_OW 69
7451: PUSH
7452: LD_INT 22
7454: PUSH
7455: LD_INT 3
7457: PUSH
7458: EMPTY
7459: LIST
7460: LIST
7461: PUSH
7462: LD_INT 21
7464: PUSH
7465: LD_INT 2
7467: PUSH
7468: EMPTY
7469: LIST
7470: LIST
7471: PUSH
7472: EMPTY
7473: LIST
7474: LIST
7475: PPUSH
7476: CALL_OW 69
7480: AND
7481: IFFALSE 8240
7483: GO 7485
7485: DISABLE
7486: LD_INT 0
7488: PPUSH
7489: PPUSH
7490: PPUSH
7491: PPUSH
7492: PPUSH
7493: PPUSH
// begin enable ;
7494: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) ;
7495: LD_ADDR_VAR 0 2
7499: PUSH
7500: LD_INT 22
7502: PUSH
7503: LD_INT 3
7505: PUSH
7506: EMPTY
7507: LIST
7508: LIST
7509: PUSH
7510: LD_INT 21
7512: PUSH
7513: LD_INT 2
7515: PUSH
7516: EMPTY
7517: LIST
7518: LIST
7519: PUSH
7520: LD_INT 3
7522: PUSH
7523: LD_INT 58
7525: PUSH
7526: EMPTY
7527: LIST
7528: PUSH
7529: EMPTY
7530: LIST
7531: LIST
7532: PUSH
7533: EMPTY
7534: LIST
7535: LIST
7536: LIST
7537: PPUSH
7538: CALL_OW 69
7542: ST_TO_ADDR
// areas := [ sectorAlpha , sectorBeta , sectorDelta , mainBaseArea ] ;
7543: LD_ADDR_VAR 0 4
7547: PUSH
7548: LD_INT 10
7550: PUSH
7551: LD_INT 11
7553: PUSH
7554: LD_INT 12
7556: PUSH
7557: LD_INT 14
7559: PUSH
7560: EMPTY
7561: LIST
7562: LIST
7563: LIST
7564: LIST
7565: ST_TO_ADDR
// area := 0 ;
7566: LD_ADDR_VAR 0 5
7570: PUSH
7571: LD_INT 0
7573: ST_TO_ADDR
// attacking := false ;
7574: LD_ADDR_VAR 0 3
7578: PUSH
7579: LD_INT 0
7581: ST_TO_ADDR
// for i in tmp do
7582: LD_ADDR_VAR 0 1
7586: PUSH
7587: LD_VAR 0 2
7591: PUSH
7592: FOR_IN
7593: IFFALSE 8021
// begin if GetDistUnits ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) < 10 and not HasTask ( i ) and not GetTag ( i ) and GetLives ( i ) > 650 then
7595: LD_VAR 0 1
7599: PPUSH
7600: LD_INT 22
7602: PUSH
7603: LD_INT 1
7605: PUSH
7606: EMPTY
7607: LIST
7608: LIST
7609: PPUSH
7610: CALL_OW 69
7614: PPUSH
7615: LD_VAR 0 1
7619: PPUSH
7620: CALL_OW 74
7624: PPUSH
7625: CALL_OW 296
7629: PUSH
7630: LD_INT 10
7632: LESS
7633: PUSH
7634: LD_VAR 0 1
7638: PPUSH
7639: CALL_OW 314
7643: NOT
7644: AND
7645: PUSH
7646: LD_VAR 0 1
7650: PPUSH
7651: CALL_OW 110
7655: NOT
7656: AND
7657: PUSH
7658: LD_VAR 0 1
7662: PPUSH
7663: CALL_OW 256
7667: PUSH
7668: LD_INT 650
7670: GREATER
7671: AND
7672: IFFALSE 7716
// begin ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
7674: LD_VAR 0 1
7678: PPUSH
7679: LD_INT 22
7681: PUSH
7682: LD_INT 1
7684: PUSH
7685: EMPTY
7686: LIST
7687: LIST
7688: PPUSH
7689: CALL_OW 69
7693: PPUSH
7694: LD_VAR 0 1
7698: PPUSH
7699: CALL_OW 74
7703: PPUSH
7704: CALL_OW 115
// attacking := true ;
7708: LD_ADDR_VAR 0 3
7712: PUSH
7713: LD_INT 1
7715: ST_TO_ADDR
// end ; if not GetTag ( i ) and GetLives ( i ) < 650 and GetType ( i ) = unit_vehicle then
7716: LD_VAR 0 1
7720: PPUSH
7721: CALL_OW 110
7725: NOT
7726: PUSH
7727: LD_VAR 0 1
7731: PPUSH
7732: CALL_OW 256
7736: PUSH
7737: LD_INT 650
7739: LESS
7740: AND
7741: PUSH
7742: LD_VAR 0 1
7746: PPUSH
7747: CALL_OW 247
7751: PUSH
7752: LD_INT 2
7754: EQUAL
7755: AND
7756: IFFALSE 7785
// begin SetTag ( i , 1 ) ;
7758: LD_VAR 0 1
7762: PPUSH
7763: LD_INT 1
7765: PPUSH
7766: CALL_OW 109
// ComMoveXY ( i , 130 , 139 ) ;
7770: LD_VAR 0 1
7774: PPUSH
7775: LD_INT 130
7777: PPUSH
7778: LD_INT 139
7780: PPUSH
7781: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 130 , 139 ) < 6 then
7785: LD_VAR 0 1
7789: PPUSH
7790: CALL_OW 110
7794: PUSH
7795: LD_INT 1
7797: EQUAL
7798: PUSH
7799: LD_VAR 0 1
7803: PPUSH
7804: LD_INT 130
7806: PPUSH
7807: LD_INT 139
7809: PPUSH
7810: CALL_OW 297
7814: PUSH
7815: LD_INT 6
7817: LESS
7818: AND
7819: IFFALSE 7833
// SetTag ( i , 2 ) ;
7821: LD_VAR 0 1
7825: PPUSH
7826: LD_INT 2
7828: PPUSH
7829: CALL_OW 109
// if GetTag ( i ) = 2 then
7833: LD_VAR 0 1
7837: PPUSH
7838: CALL_OW 110
7842: PUSH
7843: LD_INT 2
7845: EQUAL
7846: IFFALSE 7981
// begin if GetLives ( i ) = 1000 then
7848: LD_VAR 0 1
7852: PPUSH
7853: CALL_OW 256
7857: PUSH
7858: LD_INT 1000
7860: EQUAL
7861: IFFALSE 7877
// SetTag ( i , 3 ) else
7863: LD_VAR 0 1
7867: PPUSH
7868: LD_INT 3
7870: PPUSH
7871: CALL_OW 109
7875: GO 7981
// if IsDrivenBy ( i ) then
7877: LD_VAR 0 1
7881: PPUSH
7882: CALL_OW 311
7886: IFFALSE 7981
// begin mech := IsDrivenBy ( i ) ;
7888: LD_ADDR_VAR 0 6
7892: PUSH
7893: LD_VAR 0 1
7897: PPUSH
7898: CALL_OW 311
7902: ST_TO_ADDR
// if not See ( 1 , mech ) and GetLives ( mech ) < 1000 then
7903: LD_INT 1
7905: PPUSH
7906: LD_VAR 0 6
7910: PPUSH
7911: CALL_OW 292
7915: NOT
7916: PUSH
7917: LD_VAR 0 6
7921: PPUSH
7922: CALL_OW 256
7926: PUSH
7927: LD_INT 1000
7929: LESS
7930: AND
7931: IFFALSE 7945
// SetLives ( mech , 1000 ) ;
7933: LD_VAR 0 6
7937: PPUSH
7938: LD_INT 1000
7940: PPUSH
7941: CALL_OW 234
// if not See ( 1 , i ) then
7945: LD_INT 1
7947: PPUSH
7948: LD_VAR 0 1
7952: PPUSH
7953: CALL_OW 292
7957: NOT
7958: IFFALSE 7972
// SetFuel ( i , 100 ) ;
7960: LD_VAR 0 1
7964: PPUSH
7965: LD_INT 100
7967: PPUSH
7968: CALL_OW 240
// ComRepairVehicleAndReturn ( mech ) ;
7972: LD_VAR 0 6
7976: PPUSH
7977: CALL 72410 0 1
// end ; end ; if GetTag ( i ) = 3 and IsDrivenBy ( i ) then
7981: LD_VAR 0 1
7985: PPUSH
7986: CALL_OW 110
7990: PUSH
7991: LD_INT 3
7993: EQUAL
7994: PUSH
7995: LD_VAR 0 1
7999: PPUSH
8000: CALL_OW 311
8004: AND
8005: IFFALSE 8019
// SetTag ( i , 0 ) ;
8007: LD_VAR 0 1
8011: PPUSH
8012: LD_INT 0
8014: PPUSH
8015: CALL_OW 109
// end ;
8019: GO 7592
8021: POP
8022: POP
// if attacking then
8023: LD_VAR 0 3
8027: IFFALSE 8031
// exit ;
8029: GO 8240
// if can_end and tmp then
8031: LD_EXP 6
8035: PUSH
8036: LD_VAR 0 2
8040: AND
8041: IFFALSE 8096
// begin for i in tmp do
8043: LD_ADDR_VAR 0 1
8047: PUSH
8048: LD_VAR 0 2
8052: PUSH
8053: FOR_IN
8054: IFFALSE 8092
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
8056: LD_VAR 0 1
8060: PPUSH
8061: LD_INT 22
8063: PUSH
8064: LD_INT 1
8066: PUSH
8067: EMPTY
8068: LIST
8069: LIST
8070: PPUSH
8071: CALL_OW 69
8075: PPUSH
8076: LD_VAR 0 1
8080: PPUSH
8081: CALL_OW 74
8085: PPUSH
8086: CALL_OW 115
8090: GO 8053
8092: POP
8093: POP
// exit ;
8094: GO 8240
// end ; for i in areas do
8096: LD_ADDR_VAR 0 1
8100: PUSH
8101: LD_VAR 0 4
8105: PUSH
8106: FOR_IN
8107: IFFALSE 8144
// if FilterUnitsInArea ( i , [ f_side , 1 ] ) then
8109: LD_VAR 0 1
8113: PPUSH
8114: LD_INT 22
8116: PUSH
8117: LD_INT 1
8119: PUSH
8120: EMPTY
8121: LIST
8122: LIST
8123: PPUSH
8124: CALL_OW 70
8128: IFFALSE 8142
// begin area := i ;
8130: LD_ADDR_VAR 0 5
8134: PUSH
8135: LD_VAR 0 1
8139: ST_TO_ADDR
// break ;
8140: GO 8144
// end ;
8142: GO 8106
8144: POP
8145: POP
// if area then
8146: LD_VAR 0 5
8150: IFFALSE 8240
// begin for i in tmp do
8152: LD_ADDR_VAR 0 1
8156: PUSH
8157: LD_VAR 0 2
8161: PUSH
8162: FOR_IN
8163: IFFALSE 8238
// begin if GetTag ( i ) then
8165: LD_VAR 0 1
8169: PPUSH
8170: CALL_OW 110
8174: IFFALSE 8178
// continue ;
8176: GO 8162
// if GetFuel ( i ) < 33 then
8178: LD_VAR 0 1
8182: PPUSH
8183: CALL_OW 261
8187: PUSH
8188: LD_INT 33
8190: LESS
8191: IFFALSE 8205
// SetFuel ( i , 33 ) ;
8193: LD_VAR 0 1
8197: PPUSH
8198: LD_INT 33
8200: PPUSH
8201: CALL_OW 240
// if not IsInArea ( i , area ) then
8205: LD_VAR 0 1
8209: PPUSH
8210: LD_VAR 0 5
8214: PPUSH
8215: CALL_OW 308
8219: NOT
8220: IFFALSE 8236
// ComMoveToArea ( i , area ) ;
8222: LD_VAR 0 1
8226: PPUSH
8227: LD_VAR 0 5
8231: PPUSH
8232: CALL_OW 113
// end ;
8236: GO 8162
8238: POP
8239: POP
// end ; end ;
8240: PPOPN 6
8242: END
// every 15 15$00 trigger Difficulty > 1 do var i , j , un , veh , time , count ;
8243: LD_OWVAR 67
8247: PUSH
8248: LD_INT 1
8250: GREATER
8251: IFFALSE 8540
8253: GO 8255
8255: DISABLE
8256: LD_INT 0
8258: PPUSH
8259: PPUSH
8260: PPUSH
8261: PPUSH
8262: PPUSH
8263: PPUSH
// begin uc_side := 3 ;
8264: LD_ADDR_OWVAR 20
8268: PUSH
8269: LD_INT 3
8271: ST_TO_ADDR
// uc_nation := 3 ;
8272: LD_ADDR_OWVAR 21
8276: PUSH
8277: LD_INT 3
8279: ST_TO_ADDR
// time := [ 9 9$00 , 7 7$00 , 6 6$00 , 5 5$30 ] [ Difficulty ] ;
8280: LD_ADDR_VAR 0 5
8284: PUSH
8285: LD_INT 18900
8287: PUSH
8288: LD_INT 14700
8290: PUSH
8291: LD_INT 12600
8293: PUSH
8294: LD_INT 11550
8296: PUSH
8297: EMPTY
8298: LIST
8299: LIST
8300: LIST
8301: LIST
8302: PUSH
8303: LD_OWVAR 67
8307: ARRAY
8308: ST_TO_ADDR
// count := [ 2 , 2 , 3 , 3 ] [ Difficulty ] ;
8309: LD_ADDR_VAR 0 6
8313: PUSH
8314: LD_INT 2
8316: PUSH
8317: LD_INT 2
8319: PUSH
8320: LD_INT 3
8322: PUSH
8323: LD_INT 3
8325: PUSH
8326: EMPTY
8327: LIST
8328: LIST
8329: LIST
8330: LIST
8331: PUSH
8332: LD_OWVAR 67
8336: ARRAY
8337: ST_TO_ADDR
// for i = 1 to count do
8338: LD_ADDR_VAR 0 1
8342: PUSH
8343: DOUBLE
8344: LD_INT 1
8346: DEC
8347: ST_TO_ADDR
8348: LD_VAR 0 6
8352: PUSH
8353: FOR_TO
8354: IFFALSE 8538
// begin wait ( time ) ;
8356: LD_VAR 0 5
8360: PPUSH
8361: CALL_OW 67
// for j = 1 to rand ( 1 , Difficulty ) do
8365: LD_ADDR_VAR 0 2
8369: PUSH
8370: DOUBLE
8371: LD_INT 1
8373: DEC
8374: ST_TO_ADDR
8375: LD_INT 1
8377: PPUSH
8378: LD_OWVAR 67
8382: PPUSH
8383: CALL_OW 12
8387: PUSH
8388: FOR_TO
8389: IFFALSE 8534
// begin veh := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_machine_gun ] [ i mod 3 + 1 ] , 80 ) ;
8391: LD_ADDR_VAR 0 4
8395: PUSH
8396: LD_INT 3
8398: PPUSH
8399: LD_INT 3
8401: PPUSH
8402: LD_INT 22
8404: PPUSH
8405: LD_INT 1
8407: PPUSH
8408: LD_INT 1
8410: PPUSH
8411: LD_INT 43
8413: PUSH
8414: LD_INT 44
8416: PUSH
8417: LD_INT 42
8419: PUSH
8420: EMPTY
8421: LIST
8422: LIST
8423: LIST
8424: PUSH
8425: LD_VAR 0 1
8429: PUSH
8430: LD_INT 3
8432: MOD
8433: PUSH
8434: LD_INT 1
8436: PLUS
8437: ARRAY
8438: PPUSH
8439: LD_INT 80
8441: PPUSH
8442: CALL 520 0 7
8446: ST_TO_ADDR
// PlaceUnitArea ( veh , southArea , false ) ;
8447: LD_VAR 0 4
8451: PPUSH
8452: LD_INT 13
8454: PPUSH
8455: LD_INT 0
8457: PPUSH
8458: CALL_OW 49
// PrepareHuman ( false , 3 , [ 4 , 5 , 5 , 7 ] [ Difficulty ] ) ;
8462: LD_INT 0
8464: PPUSH
8465: LD_INT 3
8467: PPUSH
8468: LD_INT 4
8470: PUSH
8471: LD_INT 5
8473: PUSH
8474: LD_INT 5
8476: PUSH
8477: LD_INT 7
8479: PUSH
8480: EMPTY
8481: LIST
8482: LIST
8483: LIST
8484: LIST
8485: PUSH
8486: LD_OWVAR 67
8490: ARRAY
8491: PPUSH
8492: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
8496: CALL_OW 44
8500: PPUSH
8501: LD_VAR 0 4
8505: PPUSH
8506: CALL_OW 52
// wait ( 0 0$01 ) ;
8510: LD_INT 35
8512: PPUSH
8513: CALL_OW 67
// ComMoveXY ( veh , 143 , 143 ) ;
8517: LD_VAR 0 4
8521: PPUSH
8522: LD_INT 143
8524: PPUSH
8525: LD_INT 143
8527: PPUSH
8528: CALL_OW 111
// end ;
8532: GO 8388
8534: POP
8535: POP
// end ;
8536: GO 8353
8538: POP
8539: POP
// end ;
8540: PPOPN 6
8542: END
// every 8 8$00 do var i , un , time ;
8543: GO 8545
8545: DISABLE
8546: LD_INT 0
8548: PPUSH
8549: PPUSH
8550: PPUSH
// begin time := [ 3 3$00 , 1 1$00 , 0 0$30 ] ;
8551: LD_ADDR_VAR 0 3
8555: PUSH
8556: LD_INT 6300
8558: PUSH
8559: LD_INT 2100
8561: PUSH
8562: LD_INT 1050
8564: PUSH
8565: EMPTY
8566: LIST
8567: LIST
8568: LIST
8569: ST_TO_ADDR
// wait ( time ) ;
8570: LD_VAR 0 3
8574: PPUSH
8575: CALL_OW 67
// uc_side := 3 ;
8579: LD_ADDR_OWVAR 20
8583: PUSH
8584: LD_INT 3
8586: ST_TO_ADDR
// uc_nation := 3 ;
8587: LD_ADDR_OWVAR 21
8591: PUSH
8592: LD_INT 3
8594: ST_TO_ADDR
// for i = 1 to 2 do
8595: LD_ADDR_VAR 0 1
8599: PUSH
8600: DOUBLE
8601: LD_INT 1
8603: DEC
8604: ST_TO_ADDR
8605: LD_INT 2
8607: PUSH
8608: FOR_TO
8609: IFFALSE 8672
// begin PrepareHuman ( false , 1 , 4 ) ;
8611: LD_INT 0
8613: PPUSH
8614: LD_INT 1
8616: PPUSH
8617: LD_INT 4
8619: PPUSH
8620: CALL_OW 380
// un := CreateHuman ;
8624: LD_ADDR_VAR 0 2
8628: PUSH
8629: CALL_OW 44
8633: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_dep_main ) ;
8634: LD_VAR 0 2
8638: PPUSH
8639: LD_INT 16
8641: PPUSH
8642: CALL_OW 52
// ComExitBuilding ( un ) ;
8646: LD_VAR 0 2
8650: PPUSH
8651: CALL_OW 122
// AddComAgressiveMove ( un , 41 , 76 ) ;
8655: LD_VAR 0 2
8659: PPUSH
8660: LD_INT 41
8662: PPUSH
8663: LD_INT 76
8665: PPUSH
8666: CALL_OW 174
// end ;
8670: GO 8608
8672: POP
8673: POP
// end ; end_of_file
8674: PPOPN 3
8676: END
// export function Action ; begin
8677: LD_INT 0
8679: PPUSH
// CenterNowOnXY ( 28 , 3 ) ;
8680: LD_INT 28
8682: PPUSH
8683: LD_INT 3
8685: PPUSH
8686: CALL_OW 86
// PlaceSeeing ( 41 , 76 , 1 , 10 ) ;
8690: LD_INT 41
8692: PPUSH
8693: LD_INT 76
8695: PPUSH
8696: LD_INT 1
8698: PPUSH
8699: LD_INT 10
8701: PPUSH
8702: CALL_OW 330
// RemoveSeeing ( 41 , 76 , 1 ) ;
8706: LD_INT 41
8708: PPUSH
8709: LD_INT 76
8711: PPUSH
8712: LD_INT 1
8714: PPUSH
8715: CALL_OW 331
// InGameOn ;
8719: CALL_OW 8
// SayRadio ( Harisson , D2-Har-1 ) ;
8723: LD_EXP 19
8727: PPUSH
8728: LD_STRING D2-Har-1
8730: PPUSH
8731: CALL_OW 94
// InGameOff ;
8735: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
8739: LD_STRING M1
8741: PPUSH
8742: CALL_OW 337
// end ;
8746: LD_VAR 0 1
8750: RET
// every 0 0$1 trigger buildings_counter > 1 do var un ;
8751: LD_EXP 4
8755: PUSH
8756: LD_INT 1
8758: GREATER
8759: IFFALSE 8850
8761: GO 8763
8763: DISABLE
8764: LD_INT 0
8766: PPUSH
// begin un := GetRandom ( sex_male ) [ 1 ] ;
8767: LD_ADDR_VAR 0 1
8771: PUSH
8772: LD_INT 1
8774: PPUSH
8775: CALL 608 0 1
8779: PUSH
8780: LD_INT 1
8782: ARRAY
8783: ST_TO_ADDR
// Say ( un , D2a-Sol1-1 ) ;
8784: LD_VAR 0 1
8788: PPUSH
8789: LD_STRING D2a-Sol1-1
8791: PPUSH
8792: CALL_OW 88
// if not un then
8796: LD_VAR 0 1
8800: NOT
8801: IFFALSE 8832
// begin un := GetRandom ( sex_female ) [ 1 ] ;
8803: LD_ADDR_VAR 0 1
8807: PUSH
8808: LD_INT 2
8810: PPUSH
8811: CALL 608 0 1
8815: PUSH
8816: LD_INT 1
8818: ARRAY
8819: ST_TO_ADDR
// Say ( un , D2a-FSol1-1 ) ;
8820: LD_VAR 0 1
8824: PPUSH
8825: LD_STRING D2a-FSol1-1
8827: PPUSH
8828: CALL_OW 88
// end ; if Khatam then
8832: LD_EXP 17
8836: IFFALSE 8850
// Say ( Khatam , D3b-Khat-3 ) ;
8838: LD_EXP 17
8842: PPUSH
8843: LD_STRING D3b-Khat-3
8845: PPUSH
8846: CALL_OW 88
// end ;
8850: PPOPN 1
8852: END
// every 0 0$1 trigger Frank and not Kikuchi and FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , Frank , 7 ] ] ) and IsOk ( Frank ) and not InBattle ( 1 ) and not InBattle ( 4 ) do var i , ape ;
8853: LD_EXP 15
8857: PUSH
8858: LD_EXP 18
8862: NOT
8863: AND
8864: PUSH
8865: LD_INT 22
8867: PUSH
8868: LD_INT 1
8870: PUSH
8871: EMPTY
8872: LIST
8873: LIST
8874: PUSH
8875: LD_INT 91
8877: PUSH
8878: LD_EXP 15
8882: PUSH
8883: LD_INT 7
8885: PUSH
8886: EMPTY
8887: LIST
8888: LIST
8889: LIST
8890: PUSH
8891: EMPTY
8892: LIST
8893: LIST
8894: PPUSH
8895: CALL_OW 69
8899: AND
8900: PUSH
8901: LD_EXP 15
8905: PPUSH
8906: CALL_OW 302
8910: AND
8911: PUSH
8912: LD_INT 1
8914: PPUSH
8915: CALL_OW 463
8919: NOT
8920: AND
8921: PUSH
8922: LD_INT 4
8924: PPUSH
8925: CALL_OW 463
8929: NOT
8930: AND
8931: IFFALSE 9518
8933: GO 8935
8935: DISABLE
8936: LD_INT 0
8938: PPUSH
8939: PPUSH
// begin InGameOn ;
8940: CALL_OW 8
// ape := FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) ;
8944: LD_ADDR_VAR 0 2
8948: PUSH
8949: LD_INT 22
8951: PUSH
8952: LD_INT 0
8954: PUSH
8955: EMPTY
8956: LIST
8957: LIST
8958: PUSH
8959: LD_INT 25
8961: PUSH
8962: LD_INT 12
8964: PUSH
8965: EMPTY
8966: LIST
8967: LIST
8968: PUSH
8969: EMPTY
8970: LIST
8971: LIST
8972: PPUSH
8973: CALL_OW 69
8977: ST_TO_ADDR
// ape := NearestUnitToUnit ( ape , Frank ) ;
8978: LD_ADDR_VAR 0 2
8982: PUSH
8983: LD_VAR 0 2
8987: PPUSH
8988: LD_EXP 15
8992: PPUSH
8993: CALL_OW 74
8997: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_dist , Frank , 20 ] ] ) do
8998: LD_ADDR_VAR 0 1
9002: PUSH
9003: LD_INT 22
9005: PUSH
9006: LD_INT 1
9008: PUSH
9009: EMPTY
9010: LIST
9011: LIST
9012: PUSH
9013: LD_INT 21
9015: PUSH
9016: LD_INT 1
9018: PUSH
9019: EMPTY
9020: LIST
9021: LIST
9022: PUSH
9023: LD_INT 91
9025: PUSH
9026: LD_EXP 15
9030: PUSH
9031: LD_INT 20
9033: PUSH
9034: EMPTY
9035: LIST
9036: LIST
9037: LIST
9038: PUSH
9039: EMPTY
9040: LIST
9041: LIST
9042: LIST
9043: PPUSH
9044: CALL_OW 69
9048: PUSH
9049: FOR_IN
9050: IFFALSE 9068
// ComTurnUnit ( i , Frank ) ;
9052: LD_VAR 0 1
9056: PPUSH
9057: LD_EXP 15
9061: PPUSH
9062: CALL_OW 119
9066: GO 9049
9068: POP
9069: POP
// SetSide ( Frank , 1 ) ;
9070: LD_EXP 15
9074: PPUSH
9075: LD_INT 1
9077: PPUSH
9078: CALL_OW 235
// ComMoveUnit ( JMM , Frank ) ;
9082: LD_EXP 9
9086: PPUSH
9087: LD_EXP 15
9091: PPUSH
9092: CALL_OW 112
// AddComTurnUnit ( JMM , Frank ) ;
9096: LD_EXP 9
9100: PPUSH
9101: LD_EXP 15
9105: PPUSH
9106: CALL_OW 179
// CenterOnUnits ( Frank ) ;
9110: LD_EXP 15
9114: PPUSH
9115: CALL_OW 85
// Say ( Frank , D3a-Frank-1 ) ;
9119: LD_EXP 15
9123: PPUSH
9124: LD_STRING D3a-Frank-1
9126: PPUSH
9127: CALL_OW 88
// ComMoveXY ( ape , 42 , 78 ) ;
9131: LD_VAR 0 2
9135: PPUSH
9136: LD_INT 42
9138: PPUSH
9139: LD_INT 78
9141: PPUSH
9142: CALL_OW 111
// AddComTurnUnit ( ape , Frank ) ;
9146: LD_VAR 0 2
9150: PPUSH
9151: LD_EXP 15
9155: PPUSH
9156: CALL_OW 179
// if Lisa then
9160: LD_EXP 14
9164: IFFALSE 9178
// Say ( Lisa , D3a-Lisa-1 ) ;
9166: LD_EXP 14
9170: PPUSH
9171: LD_STRING D3a-Lisa-1
9173: PPUSH
9174: CALL_OW 88
// Say ( JMM , D3a-JMM-1 ) ;
9178: LD_EXP 9
9182: PPUSH
9183: LD_STRING D3a-JMM-1
9185: PPUSH
9186: CALL_OW 88
// if Cyrus then
9190: LD_EXP 13
9194: IFFALSE 9208
// Say ( Cyrus , D3a-Cyrus-1 ) ;
9196: LD_EXP 13
9200: PPUSH
9201: LD_STRING D3a-Cyrus-1
9203: PPUSH
9204: CALL_OW 88
// if GetRandom ( sex_male ) then
9208: LD_INT 1
9210: PPUSH
9211: CALL 608 0 1
9215: IFFALSE 9236
// Say ( GetRandom ( sex_male ) [ 1 ] , D3a-Sol1-1 ) ;
9217: LD_INT 1
9219: PPUSH
9220: CALL 608 0 1
9224: PUSH
9225: LD_INT 1
9227: ARRAY
9228: PPUSH
9229: LD_STRING D3a-Sol1-1
9231: PPUSH
9232: CALL_OW 88
// if GetRandom ( sex_female ) then
9236: LD_INT 2
9238: PPUSH
9239: CALL 608 0 1
9243: IFFALSE 9264
// Say ( GetRandom ( sex_female ) [ 1 ] , D3a-FSol1-1 ) ;
9245: LD_INT 2
9247: PPUSH
9248: CALL 608 0 1
9252: PUSH
9253: LD_INT 1
9255: ARRAY
9256: PPUSH
9257: LD_STRING D3a-FSol1-1
9259: PPUSH
9260: CALL_OW 88
// if Gladstone then
9264: LD_EXP 16
9268: IFFALSE 9282
// Say ( Gladstone , D3a-Glad-1 ) ;
9270: LD_EXP 16
9274: PPUSH
9275: LD_STRING D3a-Glad-1
9277: PPUSH
9278: CALL_OW 88
// ComMoveXY ( ape , 60 , 113 ) ;
9282: LD_VAR 0 2
9286: PPUSH
9287: LD_INT 60
9289: PPUSH
9290: LD_INT 113
9292: PPUSH
9293: CALL_OW 111
// Say ( Frank , D3a-Frank-2 ) ;
9297: LD_EXP 15
9301: PPUSH
9302: LD_STRING D3a-Frank-2
9304: PPUSH
9305: CALL_OW 88
// ComTurnUnit ( Frank , JMM ) ;
9309: LD_EXP 15
9313: PPUSH
9314: LD_EXP 9
9318: PPUSH
9319: CALL_OW 119
// Say ( JMM , D3a-JMM-2 ) ;
9323: LD_EXP 9
9327: PPUSH
9328: LD_STRING D3a-JMM-2
9330: PPUSH
9331: CALL_OW 88
// RevealFogArea ( 1 , spotArea ) ;
9335: LD_INT 1
9337: PPUSH
9338: LD_INT 4
9340: PPUSH
9341: CALL_OW 332
// CenterOnXY ( 85 , 134 ) ;
9345: LD_INT 85
9347: PPUSH
9348: LD_INT 134
9350: PPUSH
9351: CALL_OW 84
// Say ( Frank , D3a-Frank-3 ) ;
9355: LD_EXP 15
9359: PPUSH
9360: LD_STRING D3a-Frank-3
9362: PPUSH
9363: CALL_OW 88
// Wait ( 0 0$01 ) ;
9367: LD_INT 35
9369: PPUSH
9370: CALL_OW 67
// CenterOnXY ( 166 , 136 ) ;
9374: LD_INT 166
9376: PPUSH
9377: LD_INT 136
9379: PPUSH
9380: CALL_OW 84
// Say ( JMM , D3a-JMM-3 ) ;
9384: LD_EXP 9
9388: PPUSH
9389: LD_STRING D3a-JMM-3
9391: PPUSH
9392: CALL_OW 88
// Wait ( 0 0$01 ) ;
9396: LD_INT 35
9398: PPUSH
9399: CALL_OW 67
// CenterNowOnUnits ( Frank ) ;
9403: LD_EXP 15
9407: PPUSH
9408: CALL_OW 87
// Say ( Frank , D3a-Frank-4 ) ;
9412: LD_EXP 15
9416: PPUSH
9417: LD_STRING D3a-Frank-4
9419: PPUSH
9420: CALL_OW 88
// if Lisa then
9424: LD_EXP 14
9428: IFFALSE 9442
// Say ( Lisa , D3a-Lisa-4 ) ;
9430: LD_EXP 14
9434: PPUSH
9435: LD_STRING D3a-Lisa-4
9437: PPUSH
9438: CALL_OW 88
// Say ( JMM , D3a-JMM-4 ) ;
9442: LD_EXP 9
9446: PPUSH
9447: LD_STRING D3a-JMM-4
9449: PPUSH
9450: CALL_OW 88
// Say ( Frank , D3a-Frank-5 ) ;
9454: LD_EXP 15
9458: PPUSH
9459: LD_STRING D3a-Frank-5
9461: PPUSH
9462: CALL_OW 88
// Say ( JMM , D3a-JMM-5 ) ;
9466: LD_EXP 9
9470: PPUSH
9471: LD_STRING D3a-JMM-5
9473: PPUSH
9474: CALL_OW 88
// Say ( Frank , D3a-Frank-6 ) ;
9478: LD_EXP 15
9482: PPUSH
9483: LD_STRING D3a-Frank-6
9485: PPUSH
9486: CALL_OW 88
// Say ( JMM , D3a-JMM-6 ) ;
9490: LD_EXP 9
9494: PPUSH
9495: LD_STRING D3a-JMM-6
9497: PPUSH
9498: CALL_OW 88
// Say ( Frank , D3a-Frank-7 ) ;
9502: LD_EXP 15
9506: PPUSH
9507: LD_STRING D3a-Frank-7
9509: PPUSH
9510: CALL_OW 88
// InGameOff ;
9514: CALL_OW 9
// end ;
9518: PPOPN 2
9520: END
// every 0 0$1 trigger Kikuchi and not Frank and FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , Kikuchi , 7 ] ] ) and IsOk ( Kikuchi ) and not InBattle ( 1 ) and not InBattle ( 4 ) do
9521: LD_EXP 18
9525: PUSH
9526: LD_EXP 15
9530: NOT
9531: AND
9532: PUSH
9533: LD_INT 22
9535: PUSH
9536: LD_INT 1
9538: PUSH
9539: EMPTY
9540: LIST
9541: LIST
9542: PUSH
9543: LD_INT 91
9545: PUSH
9546: LD_EXP 18
9550: PUSH
9551: LD_INT 7
9553: PUSH
9554: EMPTY
9555: LIST
9556: LIST
9557: LIST
9558: PUSH
9559: EMPTY
9560: LIST
9561: LIST
9562: PPUSH
9563: CALL_OW 69
9567: AND
9568: PUSH
9569: LD_EXP 18
9573: PPUSH
9574: CALL_OW 302
9578: AND
9579: PUSH
9580: LD_INT 1
9582: PPUSH
9583: CALL_OW 463
9587: NOT
9588: AND
9589: PUSH
9590: LD_INT 4
9592: PPUSH
9593: CALL_OW 463
9597: NOT
9598: AND
9599: IFFALSE 9779
9601: GO 9603
9603: DISABLE
// begin InGameOn ;
9604: CALL_OW 8
// ComTurnUnit ( JMM , Kikuchi ) ;
9608: LD_EXP 9
9612: PPUSH
9613: LD_EXP 18
9617: PPUSH
9618: CALL_OW 119
// ComTurnUnit ( Kikuchi , JMM ) ;
9622: LD_EXP 18
9626: PPUSH
9627: LD_EXP 9
9631: PPUSH
9632: CALL_OW 119
// CenterOnUnits ( Kikuchi ) ;
9636: LD_EXP 18
9640: PPUSH
9641: CALL_OW 85
// Say ( Kikuchi , D3b-Yam-1 ) ;
9645: LD_EXP 18
9649: PPUSH
9650: LD_STRING D3b-Yam-1
9652: PPUSH
9653: CALL_OW 88
// Say ( JMM , D3b-JMM-1 ) ;
9657: LD_EXP 9
9661: PPUSH
9662: LD_STRING D3b-JMM-1
9664: PPUSH
9665: CALL_OW 88
// RevealFogArea ( 1 , spotArea ) ;
9669: LD_INT 1
9671: PPUSH
9672: LD_INT 4
9674: PPUSH
9675: CALL_OW 332
// CenterOnXY ( 85 , 134 ) ;
9679: LD_INT 85
9681: PPUSH
9682: LD_INT 134
9684: PPUSH
9685: CALL_OW 84
// Say ( Kikuchi , D3b-Yam-2 ) ;
9689: LD_EXP 18
9693: PPUSH
9694: LD_STRING D3b-Yam-2
9696: PPUSH
9697: CALL_OW 88
// Wait ( 0 0$01 ) ;
9701: LD_INT 35
9703: PPUSH
9704: CALL_OW 67
// Say ( JMM , D3b-JMM-2 ) ;
9708: LD_EXP 9
9712: PPUSH
9713: LD_STRING D3b-JMM-2
9715: PPUSH
9716: CALL_OW 88
// CenterOnXY ( 166 , 136 ) ;
9720: LD_INT 166
9722: PPUSH
9723: LD_INT 136
9725: PPUSH
9726: CALL_OW 84
// Say ( Kikuchi , D3b-Yam-3 ) ;
9730: LD_EXP 18
9734: PPUSH
9735: LD_STRING D3b-Yam-3
9737: PPUSH
9738: CALL_OW 88
// CenterNowOnUnits ( JMM ) ;
9742: LD_EXP 9
9746: PPUSH
9747: CALL_OW 87
// Say ( JMM , D3b-JMM-3a ) ;
9751: LD_EXP 9
9755: PPUSH
9756: LD_STRING D3b-JMM-3a
9758: PPUSH
9759: CALL_OW 88
// SetSide ( Kikuchi , 1 ) ;
9763: LD_EXP 18
9767: PPUSH
9768: LD_INT 1
9770: PPUSH
9771: CALL_OW 235
// InGameOff ;
9775: CALL_OW 9
// end ;
9779: END
// every 0 0$1 trigger FilterUnitsInArea ( massDamageArea , [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] ] ) do var un , x , tw , i ;
9780: LD_INT 7
9782: PPUSH
9783: LD_INT 22
9785: PUSH
9786: LD_INT 1
9788: PUSH
9789: EMPTY
9790: LIST
9791: LIST
9792: PUSH
9793: LD_INT 3
9795: PUSH
9796: LD_INT 24
9798: PUSH
9799: LD_INT 1000
9801: PUSH
9802: EMPTY
9803: LIST
9804: LIST
9805: PUSH
9806: EMPTY
9807: LIST
9808: LIST
9809: PUSH
9810: EMPTY
9811: LIST
9812: LIST
9813: PPUSH
9814: CALL_OW 70
9818: IFFALSE 10274
9820: GO 9822
9822: DISABLE
9823: LD_INT 0
9825: PPUSH
9826: PPUSH
9827: PPUSH
9828: PPUSH
// begin repeat wait ( 0 0$1 ) ;
9829: LD_INT 35
9831: PPUSH
9832: CALL_OW 67
// un := FilterUnitsInArea ( massDamageArea , [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
9836: LD_ADDR_VAR 0 1
9840: PUSH
9841: LD_INT 7
9843: PPUSH
9844: LD_INT 22
9846: PUSH
9847: LD_INT 1
9849: PUSH
9850: EMPTY
9851: LIST
9852: LIST
9853: PUSH
9854: LD_INT 3
9856: PUSH
9857: LD_INT 24
9859: PUSH
9860: LD_INT 1000
9862: PUSH
9863: EMPTY
9864: LIST
9865: LIST
9866: PUSH
9867: EMPTY
9868: LIST
9869: LIST
9870: PUSH
9871: EMPTY
9872: LIST
9873: LIST
9874: PPUSH
9875: CALL_OW 70
9879: ST_TO_ADDR
// if not un then
9880: LD_VAR 0 1
9884: NOT
9885: IFFALSE 9889
// continue ;
9887: GO 9829
// tw := NearbyTowerHasEnergy ( un [ 1 ] ) ;
9889: LD_ADDR_VAR 0 3
9893: PUSH
9894: LD_VAR 0 1
9898: PUSH
9899: LD_INT 1
9901: ARRAY
9902: PPUSH
9903: CALL 2053 0 1
9907: ST_TO_ADDR
// until tw ;
9908: LD_VAR 0 3
9912: IFFALSE 9829
// DialogueOn ;
9914: CALL_OW 6
// CenterNowOnUnits ( tw ) ;
9918: LD_VAR 0 3
9922: PPUSH
9923: CALL_OW 87
// if Lisa then
9927: LD_EXP 14
9931: IFFALSE 9959
// begin Say ( Lisa , D5-Lisa-1 ) ;
9933: LD_EXP 14
9937: PPUSH
9938: LD_STRING D5-Lisa-1
9940: PPUSH
9941: CALL_OW 88
// Say ( JMM , D5-JMM-1a ) ;
9945: LD_EXP 9
9949: PPUSH
9950: LD_STRING D5-JMM-1a
9952: PPUSH
9953: CALL_OW 88
// end else
9957: GO 9971
// Say ( JMM , D5-JMM-1 ) ;
9959: LD_EXP 9
9963: PPUSH
9964: LD_STRING D5-JMM-1
9966: PPUSH
9967: CALL_OW 88
// DialogueOff ;
9971: CALL_OW 7
// while ( true ) do
9975: LD_INT 1
9977: IFFALSE 10033
// begin wait ( 0 0$01 ) ;
9979: LD_INT 35
9981: PPUSH
9982: CALL_OW 67
// x := FilterUnitsExceptArea ( northElectro , [ [ f_btype , b_oil_power ] , [ f_see , 1 ] ] ) ;
9986: LD_ADDR_VAR 0 2
9990: PUSH
9991: LD_INT 8
9993: PPUSH
9994: LD_INT 30
9996: PUSH
9997: LD_INT 26
9999: PUSH
10000: EMPTY
10001: LIST
10002: LIST
10003: PUSH
10004: LD_INT 101
10006: PUSH
10007: LD_INT 1
10009: PUSH
10010: EMPTY
10011: LIST
10012: LIST
10013: PUSH
10014: EMPTY
10015: LIST
10016: LIST
10017: PPUSH
10018: CALL_OW 71
10022: ST_TO_ADDR
// if x then
10023: LD_VAR 0 2
10027: IFFALSE 10031
// break ;
10029: GO 10033
// end ;
10031: GO 9975
// CenterOnUnits ( x [ 1 ] ) ;
10033: LD_VAR 0 2
10037: PUSH
10038: LD_INT 1
10040: ARRAY
10041: PPUSH
10042: CALL_OW 85
// if Frank and GetSide ( Frank ) = 1 then
10046: LD_EXP 15
10050: PUSH
10051: LD_EXP 15
10055: PPUSH
10056: CALL_OW 255
10060: PUSH
10061: LD_INT 1
10063: EQUAL
10064: AND
10065: IFFALSE 10081
// Say ( Frank , D5a-Frank-1 ) else
10067: LD_EXP 15
10071: PPUSH
10072: LD_STRING D5a-Frank-1
10074: PPUSH
10075: CALL_OW 88
10079: GO 10135
// if Kikuchi and GetSide ( Kikuchi ) = 1 then
10081: LD_EXP 18
10085: PUSH
10086: LD_EXP 18
10090: PPUSH
10091: CALL_OW 255
10095: PUSH
10096: LD_INT 1
10098: EQUAL
10099: AND
10100: IFFALSE 10116
// Say ( Kikuchi , D5a-Yam-1 ) else
10102: LD_EXP 18
10106: PPUSH
10107: LD_STRING D5a-Yam-1
10109: PPUSH
10110: CALL_OW 88
10114: GO 10135
// Say ( GetRandom ( sex_male ) [ 1 ] , D5a-Sol1-1 ) ;
10116: LD_INT 1
10118: PPUSH
10119: CALL 608 0 1
10123: PUSH
10124: LD_INT 1
10126: ARRAY
10127: PPUSH
10128: LD_STRING D5a-Sol1-1
10130: PPUSH
10131: CALL_OW 88
// Say ( JMM , D5a-JMM-1 ) ;
10135: LD_EXP 9
10139: PPUSH
10140: LD_STRING D5a-JMM-1
10142: PPUSH
10143: CALL_OW 88
// if Cyrus then
10147: LD_EXP 13
10151: IFFALSE 10165
// Say ( Cyrus , D5a-Cyrus-1 ) ;
10153: LD_EXP 13
10157: PPUSH
10158: LD_STRING D5a-Cyrus-1
10160: PPUSH
10161: CALL_OW 88
// x := false ;
10165: LD_ADDR_VAR 0 2
10169: PUSH
10170: LD_INT 0
10172: ST_TO_ADDR
// while ( true ) do
10173: LD_INT 1
10175: IFFALSE 10262
// begin wait ( 0 0$01 ) ;
10177: LD_INT 35
10179: PPUSH
10180: CALL_OW 67
// for i in FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) diff ru_dep_west do
10184: LD_ADDR_VAR 0 4
10188: PUSH
10189: LD_INT 2
10191: PUSH
10192: LD_INT 30
10194: PUSH
10195: LD_INT 0
10197: PUSH
10198: EMPTY
10199: LIST
10200: LIST
10201: PUSH
10202: LD_INT 30
10204: PUSH
10205: LD_INT 1
10207: PUSH
10208: EMPTY
10209: LIST
10210: LIST
10211: PUSH
10212: EMPTY
10213: LIST
10214: LIST
10215: LIST
10216: PPUSH
10217: CALL_OW 69
10221: PUSH
10222: LD_INT 1
10224: DIFF
10225: PUSH
10226: FOR_IN
10227: IFFALSE 10250
// if BaseNeedEnergy ( i ) then
10229: LD_VAR 0 4
10233: PPUSH
10234: CALL 1178 0 1
10238: IFFALSE 10248
// x := true ;
10240: LD_ADDR_VAR 0 2
10244: PUSH
10245: LD_INT 1
10247: ST_TO_ADDR
10248: GO 10226
10250: POP
10251: POP
// if x then
10252: LD_VAR 0 2
10256: IFFALSE 10260
// break ;
10258: GO 10262
// end ;
10260: GO 10173
// Say ( JMM , D5b-JMM-1 ) ;
10262: LD_EXP 9
10266: PPUSH
10267: LD_STRING D5b-JMM-1
10269: PPUSH
10270: CALL_OW 88
// end ;
10274: PPOPN 4
10276: END
// every 0 0$1 trigger time_to_end [ 1 ] < tick or FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) < 10 do
10277: LD_EXP 5
10281: PUSH
10282: LD_INT 1
10284: ARRAY
10285: PUSH
10286: LD_OWVAR 1
10290: LESS
10291: PUSH
10292: LD_INT 22
10294: PUSH
10295: LD_INT 3
10297: PUSH
10298: EMPTY
10299: LIST
10300: LIST
10301: PUSH
10302: LD_INT 21
10304: PUSH
10305: LD_INT 3
10307: PUSH
10308: EMPTY
10309: LIST
10310: LIST
10311: PUSH
10312: EMPTY
10313: LIST
10314: LIST
10315: PPUSH
10316: CALL_OW 69
10320: PUSH
10321: LD_INT 10
10323: LESS
10324: OR
10325: IFFALSE 10525
10327: GO 10329
10329: DISABLE
// begin if not IsDead ( ru_dep_main ) then
10330: LD_INT 16
10332: PPUSH
10333: CALL_OW 301
10337: NOT
10338: IFFALSE 10361
// begin SayRadio ( Harisson , D3b-Har-3 ) ;
10340: LD_EXP 19
10344: PPUSH
10345: LD_STRING D3b-Har-3
10347: PPUSH
10348: CALL_OW 94
// ChangeMissionObjectives ( M2a ) ;
10352: LD_STRING M2a
10354: PPUSH
10355: CALL_OW 337
// end else
10359: GO 10380
// begin SayRadio ( Harisson , D3b-Har-3a ) ;
10361: LD_EXP 19
10365: PPUSH
10366: LD_STRING D3b-Har-3a
10368: PPUSH
10369: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
10373: LD_STRING M2
10375: PPUSH
10376: CALL_OW 337
// end ; can_end := true ;
10380: LD_ADDR_EXP 6
10384: PUSH
10385: LD_INT 1
10387: ST_TO_ADDR
// SetAreaMapShow ( endArea , 1 ) ;
10388: LD_INT 9
10390: PPUSH
10391: LD_INT 1
10393: PPUSH
10394: CALL_OW 424
// Wait ( 0 0$02 ) ;
10398: LD_INT 70
10400: PPUSH
10401: CALL_OW 67
// if Lisa then
10405: LD_EXP 14
10409: IFFALSE 10423
// Say ( Lisa , D3b-Lisa ) ;
10411: LD_EXP 14
10415: PPUSH
10416: LD_STRING D3b-Lisa
10418: PPUSH
10419: CALL_OW 88
// if Bobby then
10423: LD_EXP 12
10427: IFFALSE 10441
// Say ( Bobby , D3b-Bobby-3 ) ;
10429: LD_EXP 12
10433: PPUSH
10434: LD_STRING D3b-Bobby-3
10436: PPUSH
10437: CALL_OW 88
// if Cyrus then
10441: LD_EXP 13
10445: IFFALSE 10459
// Say ( Cyrus , D3b-Cyrus-3 ) ;
10447: LD_EXP 13
10451: PPUSH
10452: LD_STRING D3b-Cyrus-3
10454: PPUSH
10455: CALL_OW 88
// if Frank and GetSide ( Frank ) = 1 then
10459: LD_EXP 15
10463: PUSH
10464: LD_EXP 15
10468: PPUSH
10469: CALL_OW 255
10473: PUSH
10474: LD_INT 1
10476: EQUAL
10477: AND
10478: IFFALSE 10492
// Say ( Frank , D3b-Frank-3 ) ;
10480: LD_EXP 15
10484: PPUSH
10485: LD_STRING D3b-Frank-3
10487: PPUSH
10488: CALL_OW 88
// if Kikuchi and GetSide ( Kikuchi ) = 1 then
10492: LD_EXP 18
10496: PUSH
10497: LD_EXP 18
10501: PPUSH
10502: CALL_OW 255
10506: PUSH
10507: LD_INT 1
10509: EQUAL
10510: AND
10511: IFFALSE 10525
// Say ( Kikuchi , D3b-Yam-4 ) ;
10513: LD_EXP 18
10517: PPUSH
10518: LD_STRING D3b-Yam-4
10520: PPUSH
10521: CALL_OW 88
// end ;
10525: END
// every 0 0$1 trigger time_to_end [ 2 ] < tick do
10526: LD_EXP 5
10530: PUSH
10531: LD_INT 2
10533: ARRAY
10534: PUSH
10535: LD_OWVAR 1
10539: LESS
10540: IFFALSE 10572
10542: GO 10544
10544: DISABLE
// begin SayRadio ( Harisson , D4-Har-1 ) ;
10545: LD_EXP 19
10549: PPUSH
10550: LD_STRING D4-Har-1
10552: PPUSH
10553: CALL_OW 94
// ChangeMissionObjectives ( M3 ) ;
10557: LD_STRING M3
10559: PPUSH
10560: CALL_OW 337
// must_end := true ;
10564: LD_ADDR_EXP 7
10568: PUSH
10569: LD_INT 1
10571: ST_TO_ADDR
// end ;
10572: END
// every 0 0$01 trigger time_to_end [ 3 ] < tick do
10573: LD_EXP 5
10577: PUSH
10578: LD_INT 3
10580: ARRAY
10581: PUSH
10582: LD_OWVAR 1
10586: LESS
10587: IFFALSE 10618
10589: GO 10591
10591: DISABLE
// begin if not IsDead ( ru_dep_main ) then
10592: LD_INT 16
10594: PPUSH
10595: CALL_OW 301
10599: NOT
10600: IFFALSE 10611
// YouLost ( TimeOut1 ) else
10602: LD_STRING TimeOut1
10604: PPUSH
10605: CALL_OW 104
10609: GO 10618
// YouLost ( TimeOut2 ) ;
10611: LD_STRING TimeOut2
10613: PPUSH
10614: CALL_OW 104
// end ;
10618: END
// every 0 0$1 trigger IsInArea ( JMM , endArea ) and can_end do var wait_on , i , tmp , m1 , m2 , m3 ;
10619: LD_EXP 9
10623: PPUSH
10624: LD_INT 9
10626: PPUSH
10627: CALL_OW 308
10631: PUSH
10632: LD_EXP 6
10636: AND
10637: IFFALSE 11796
10639: GO 10641
10641: DISABLE
10642: LD_INT 0
10644: PPUSH
10645: PPUSH
10646: PPUSH
10647: PPUSH
10648: PPUSH
10649: PPUSH
// begin if Count ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_ok ] ] ) ) < 5 then
10650: LD_INT 22
10652: PUSH
10653: LD_INT 1
10655: PUSH
10656: EMPTY
10657: LIST
10658: LIST
10659: PUSH
10660: LD_INT 21
10662: PUSH
10663: LD_INT 1
10665: PUSH
10666: EMPTY
10667: LIST
10668: LIST
10669: PUSH
10670: LD_INT 23
10672: PUSH
10673: LD_INT 1
10675: PUSH
10676: EMPTY
10677: LIST
10678: LIST
10679: PUSH
10680: LD_INT 50
10682: PUSH
10683: EMPTY
10684: LIST
10685: PUSH
10686: EMPTY
10687: LIST
10688: LIST
10689: LIST
10690: LIST
10691: PPUSH
10692: CALL_OW 69
10696: PPUSH
10697: CALL 35121 0 1
10701: PUSH
10702: LD_INT 5
10704: LESS
10705: IFFALSE 10714
// YouLost ( LostVictory ) ;
10707: LD_STRING LostVictory
10709: PPUSH
10710: CALL_OW 104
// wait_on := false ;
10714: LD_ADDR_VAR 0 1
10718: PUSH
10719: LD_INT 0
10721: ST_TO_ADDR
// if Count ( FilterPeople ( 1 ) ) > Count ( FilterPeopleArea ( 1 , endArea ) ^ FilterDriversArea ( 1 , endArea ) ) then
10722: LD_INT 1
10724: PPUSH
10725: CALL 1255 0 1
10729: PPUSH
10730: CALL 35121 0 1
10734: PUSH
10735: LD_INT 1
10737: PPUSH
10738: LD_INT 9
10740: PPUSH
10741: CALL 1346 0 2
10745: PUSH
10746: LD_INT 1
10748: PPUSH
10749: LD_INT 9
10751: PPUSH
10752: CALL 1393 0 2
10756: ADD
10757: PPUSH
10758: CALL 35121 0 1
10762: GREATER
10763: IFFALSE 10786
// if Query ( Q1 ) = 1 then
10765: LD_STRING Q1
10767: PPUSH
10768: CALL_OW 97
10772: PUSH
10773: LD_INT 1
10775: EQUAL
10776: IFFALSE 10786
// wait_on := true ;
10778: LD_ADDR_VAR 0 1
10782: PUSH
10783: LD_INT 1
10785: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
10786: LD_INT 35
10788: PPUSH
10789: CALL_OW 67
// until Count ( FilterPeople ( 1 ) ) = Count ( FilterPeopleArea ( 1 , endArea ) union FilterDriversArea ( 1 , endArea ) ) ;
10793: LD_INT 1
10795: PPUSH
10796: CALL 1255 0 1
10800: PPUSH
10801: CALL 35121 0 1
10805: PUSH
10806: LD_INT 1
10808: PPUSH
10809: LD_INT 9
10811: PPUSH
10812: CALL 1346 0 2
10816: PUSH
10817: LD_INT 1
10819: PPUSH
10820: LD_INT 9
10822: PPUSH
10823: CALL 1393 0 2
10827: UNION
10828: PPUSH
10829: CALL 35121 0 1
10833: EQUAL
10834: IFFALSE 10786
// DialogueOn ;
10836: CALL_OW 6
// CenterNowOnUnits ( JMM ) ;
10840: LD_EXP 9
10844: PPUSH
10845: CALL_OW 87
// Say ( JMM , D6-JMM-1 ) ;
10849: LD_EXP 9
10853: PPUSH
10854: LD_STRING D6-JMM-1
10856: PPUSH
10857: CALL_OW 88
// SayRadio ( Harisson , D6-Har-1 ) ;
10861: LD_EXP 19
10865: PPUSH
10866: LD_STRING D6-Har-1
10868: PPUSH
10869: CALL_OW 94
// Say ( JMM , D6-JMM-2 ) ;
10873: LD_EXP 9
10877: PPUSH
10878: LD_STRING D6-JMM-2
10880: PPUSH
10881: CALL_OW 88
// SayRadio ( Harisson , D6-Har-2 ) ;
10885: LD_EXP 19
10889: PPUSH
10890: LD_STRING D6-Har-2
10892: PPUSH
10893: CALL_OW 94
// Say ( JMM , D6-JMM-3 ) ;
10897: LD_EXP 9
10901: PPUSH
10902: LD_STRING D6-JMM-3
10904: PPUSH
10905: CALL_OW 88
// SayRadio ( Harisson , D6-Har-3 ) ;
10909: LD_EXP 19
10913: PPUSH
10914: LD_STRING D6-Har-3
10916: PPUSH
10917: CALL_OW 94
// Say ( JMM , D6-JMM-4 ) ;
10921: LD_EXP 9
10925: PPUSH
10926: LD_STRING D6-JMM-4
10928: PPUSH
10929: CALL_OW 88
// SayRadio ( Harisson , D6-Har-4 ) ;
10933: LD_EXP 19
10937: PPUSH
10938: LD_STRING D6-Har-4
10940: PPUSH
10941: CALL_OW 94
// Say ( JMM , D6-JMM-5 ) ;
10945: LD_EXP 9
10949: PPUSH
10950: LD_STRING D6-JMM-5
10952: PPUSH
10953: CALL_OW 88
// DialogueOff ;
10957: CALL_OW 7
// m1 := false ;
10961: LD_ADDR_VAR 0 4
10965: PUSH
10966: LD_INT 0
10968: ST_TO_ADDR
// m2 := false ;
10969: LD_ADDR_VAR 0 5
10973: PUSH
10974: LD_INT 0
10976: ST_TO_ADDR
// m3 := false ;
10977: LD_ADDR_VAR 0 6
10981: PUSH
10982: LD_INT 0
10984: ST_TO_ADDR
// tmp := FilterBuildings ( 3 ) ;
10985: LD_ADDR_VAR 0 3
10989: PUSH
10990: LD_INT 3
10992: PPUSH
10993: CALL 1524 0 1
10997: ST_TO_ADDR
// if tmp >= 35 then
10998: LD_VAR 0 3
11002: PUSH
11003: LD_INT 35
11005: GREATEREQUAL
11006: IFFALSE 11043
// begin AddMedal ( Destroy1 , - 1 ) ;
11008: LD_STRING Destroy1
11010: PPUSH
11011: LD_INT 1
11013: NEG
11014: PPUSH
11015: CALL_OW 101
// AddMedal ( Destroy2 , - 1 ) ;
11019: LD_STRING Destroy2
11021: PPUSH
11022: LD_INT 1
11024: NEG
11025: PPUSH
11026: CALL_OW 101
// AddMedal ( Destroy3 , - 1 ) ;
11030: LD_STRING Destroy3
11032: PPUSH
11033: LD_INT 1
11035: NEG
11036: PPUSH
11037: CALL_OW 101
// end else
11041: GO 11154
// begin AddMedal ( Destroy1 , 1 ) ;
11043: LD_STRING Destroy1
11045: PPUSH
11046: LD_INT 1
11048: PPUSH
11049: CALL_OW 101
// m1 := true ;
11053: LD_ADDR_VAR 0 4
11057: PUSH
11058: LD_INT 1
11060: ST_TO_ADDR
// if tmp >= 25 then
11061: LD_VAR 0 3
11065: PUSH
11066: LD_INT 25
11068: GREATEREQUAL
11069: IFFALSE 11095
// begin AddMedal ( Destroy2 , - 1 ) ;
11071: LD_STRING Destroy2
11073: PPUSH
11074: LD_INT 1
11076: NEG
11077: PPUSH
11078: CALL_OW 101
// AddMedal ( Destroy3 , - 1 ) ;
11082: LD_STRING Destroy3
11084: PPUSH
11085: LD_INT 1
11087: NEG
11088: PPUSH
11089: CALL_OW 101
// end else
11093: GO 11154
// begin AddMedal ( Destroy2 , 1 ) ;
11095: LD_STRING Destroy2
11097: PPUSH
11098: LD_INT 1
11100: PPUSH
11101: CALL_OW 101
// m2 := true ;
11105: LD_ADDR_VAR 0 5
11109: PUSH
11110: LD_INT 1
11112: ST_TO_ADDR
// if tmp >= 15 then
11113: LD_VAR 0 3
11117: PUSH
11118: LD_INT 15
11120: GREATEREQUAL
11121: IFFALSE 11136
// AddMedal ( Destroy3 , - 1 ) else
11123: LD_STRING Destroy3
11125: PPUSH
11126: LD_INT 1
11128: NEG
11129: PPUSH
11130: CALL_OW 101
11134: GO 11154
// begin AddMedal ( Destroy3 , 1 ) ;
11136: LD_STRING Destroy3
11138: PPUSH
11139: LD_INT 1
11141: PPUSH
11142: CALL_OW 101
// m3 := true ;
11146: LD_ADDR_VAR 0 6
11150: PUSH
11151: LD_INT 1
11153: ST_TO_ADDR
// end ; end ; end ; if tick <= 32 32$00 then
11154: LD_OWVAR 1
11158: PUSH
11159: LD_INT 67200
11161: LESSEQUAL
11162: IFFALSE 11171
// SetAchievement ( ACH_ASPEED_7 ) ;
11164: LD_STRING ACH_ASPEED_7
11166: PPUSH
11167: CALL_OW 543
// if m1 and m2 and m3 and Difficulty >= 3 then
11171: LD_VAR 0 4
11175: PUSH
11176: LD_VAR 0 5
11180: AND
11181: PUSH
11182: LD_VAR 0 6
11186: AND
11187: PUSH
11188: LD_OWVAR 67
11192: PUSH
11193: LD_INT 3
11195: GREATEREQUAL
11196: AND
11197: IFFALSE 11209
// SetAchievementEX ( ACH_AMER , 7 ) ;
11199: LD_STRING ACH_AMER
11201: PPUSH
11202: LD_INT 7
11204: PPUSH
11205: CALL_OW 564
// GiveMedals ( MAIN ) ;
11209: LD_STRING MAIN
11211: PPUSH
11212: CALL_OW 102
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] ] ) ;
11216: LD_ADDR_VAR 0 3
11220: PUSH
11221: LD_INT 22
11223: PUSH
11224: LD_INT 1
11226: PUSH
11227: EMPTY
11228: LIST
11229: LIST
11230: PUSH
11231: LD_INT 23
11233: PUSH
11234: LD_INT 1
11236: PUSH
11237: EMPTY
11238: LIST
11239: LIST
11240: PUSH
11241: EMPTY
11242: LIST
11243: LIST
11244: PPUSH
11245: CALL_OW 69
11249: ST_TO_ADDR
// RewardPeople ( tmp ) ;
11250: LD_VAR 0 3
11254: PPUSH
11255: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
11259: LD_EXP 9
11263: PPUSH
11264: LD_EXP 3
11268: PUSH
11269: LD_STRING JMM
11271: STR
11272: PPUSH
11273: CALL_OW 38
// if Brown in tmp then
11277: LD_EXP 10
11281: PUSH
11282: LD_VAR 0 3
11286: IN
11287: IFFALSE 11307
// SaveCharacters ( Brown , mission_prefix & Brown ) ;
11289: LD_EXP 10
11293: PPUSH
11294: LD_EXP 3
11298: PUSH
11299: LD_STRING Brown
11301: STR
11302: PPUSH
11303: CALL_OW 38
// if Donaldson in tmp then
11307: LD_EXP 11
11311: PUSH
11312: LD_VAR 0 3
11316: IN
11317: IFFALSE 11337
// SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
11319: LD_EXP 11
11323: PPUSH
11324: LD_EXP 3
11328: PUSH
11329: LD_STRING Donaldson
11331: STR
11332: PPUSH
11333: CALL_OW 38
// if Bobby in tmp then
11337: LD_EXP 12
11341: PUSH
11342: LD_VAR 0 3
11346: IN
11347: IFFALSE 11367
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
11349: LD_EXP 12
11353: PPUSH
11354: LD_EXP 3
11358: PUSH
11359: LD_STRING Bobby
11361: STR
11362: PPUSH
11363: CALL_OW 38
// if Cyrus in tmp then
11367: LD_EXP 13
11371: PUSH
11372: LD_VAR 0 3
11376: IN
11377: IFFALSE 11397
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
11379: LD_EXP 13
11383: PPUSH
11384: LD_EXP 3
11388: PUSH
11389: LD_STRING Cyrus
11391: STR
11392: PPUSH
11393: CALL_OW 38
// if Lisa in tmp then
11397: LD_EXP 14
11401: PUSH
11402: LD_VAR 0 3
11406: IN
11407: IFFALSE 11427
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
11409: LD_EXP 14
11413: PPUSH
11414: LD_EXP 3
11418: PUSH
11419: LD_STRING Lisa
11421: STR
11422: PPUSH
11423: CALL_OW 38
// if Frank in tmp then
11427: LD_EXP 15
11431: PUSH
11432: LD_VAR 0 3
11436: IN
11437: IFFALSE 11457
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
11439: LD_EXP 15
11443: PPUSH
11444: LD_EXP 3
11448: PUSH
11449: LD_STRING Frank
11451: STR
11452: PPUSH
11453: CALL_OW 38
// if Gladstone in tmp then
11457: LD_EXP 16
11461: PUSH
11462: LD_VAR 0 3
11466: IN
11467: IFFALSE 11487
// SaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
11469: LD_EXP 16
11473: PPUSH
11474: LD_EXP 3
11478: PUSH
11479: LD_STRING Gladstone
11481: STR
11482: PPUSH
11483: CALL_OW 38
// if Khatam in tmp then
11487: LD_EXP 17
11491: PUSH
11492: LD_VAR 0 3
11496: IN
11497: IFFALSE 11517
// SaveCharacters ( Khatam , mission_prefix & Khatam ) ;
11499: LD_EXP 17
11503: PPUSH
11504: LD_EXP 3
11508: PUSH
11509: LD_STRING Khatam
11511: STR
11512: PPUSH
11513: CALL_OW 38
// if Kikuchi in tmp then
11517: LD_EXP 18
11521: PUSH
11522: LD_VAR 0 3
11526: IN
11527: IFFALSE 11554
// begin ToLua ( enableBioCharacter(BIO_YAMO) ) ;
11529: LD_STRING enableBioCharacter(BIO_YAMO)
11531: PPUSH
11532: CALL_OW 559
// SaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
11536: LD_EXP 18
11540: PPUSH
11541: LD_EXP 3
11545: PUSH
11546: LD_STRING Kikuchi
11548: STR
11549: PPUSH
11550: CALL_OW 38
// end ; SaveCharacters ( tmp diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam ] , mission_prefix & others ) ;
11554: LD_VAR 0 3
11558: PUSH
11559: LD_EXP 9
11563: PUSH
11564: LD_EXP 10
11568: PUSH
11569: LD_EXP 11
11573: PUSH
11574: LD_EXP 12
11578: PUSH
11579: LD_EXP 13
11583: PUSH
11584: LD_EXP 14
11588: PUSH
11589: LD_EXP 15
11593: PUSH
11594: LD_EXP 16
11598: PUSH
11599: LD_EXP 18
11603: PUSH
11604: LD_EXP 17
11608: PUSH
11609: EMPTY
11610: LIST
11611: LIST
11612: LIST
11613: LIST
11614: LIST
11615: LIST
11616: LIST
11617: LIST
11618: LIST
11619: LIST
11620: DIFF
11621: PPUSH
11622: LD_EXP 3
11626: PUSH
11627: LD_STRING others
11629: STR
11630: PPUSH
11631: CALL_OW 38
// SaveVariable ( tick , 07_time ) ;
11635: LD_OWVAR 1
11639: PPUSH
11640: LD_STRING 07_time
11642: PPUSH
11643: CALL_OW 39
// tmp := [ ] ;
11647: LD_ADDR_VAR 0 3
11651: PUSH
11652: EMPTY
11653: ST_TO_ADDR
// for i in FilterUnitsInArea ( endArea , [ [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_vehicle ] , [ f_ok ] ] ] ) do
11654: LD_ADDR_VAR 0 2
11658: PUSH
11659: LD_INT 9
11661: PPUSH
11662: LD_INT 22
11664: PUSH
11665: LD_INT 1
11667: PUSH
11668: EMPTY
11669: LIST
11670: LIST
11671: PUSH
11672: LD_INT 23
11674: PUSH
11675: LD_INT 1
11677: PUSH
11678: EMPTY
11679: LIST
11680: LIST
11681: PUSH
11682: LD_INT 21
11684: PUSH
11685: LD_INT 2
11687: PUSH
11688: EMPTY
11689: LIST
11690: LIST
11691: PUSH
11692: LD_INT 50
11694: PUSH
11695: EMPTY
11696: LIST
11697: PUSH
11698: EMPTY
11699: LIST
11700: LIST
11701: LIST
11702: LIST
11703: PUSH
11704: EMPTY
11705: LIST
11706: PPUSH
11707: CALL_OW 70
11711: PUSH
11712: FOR_IN
11713: IFFALSE 11778
// tmp := Join ( tmp , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ) ;
11715: LD_ADDR_VAR 0 3
11719: PUSH
11720: LD_VAR 0 3
11724: PPUSH
11725: LD_VAR 0 2
11729: PPUSH
11730: CALL_OW 265
11734: PUSH
11735: LD_VAR 0 2
11739: PPUSH
11740: CALL_OW 262
11744: PUSH
11745: LD_VAR 0 2
11749: PPUSH
11750: CALL_OW 263
11754: PUSH
11755: LD_VAR 0 2
11759: PPUSH
11760: CALL_OW 264
11764: PUSH
11765: EMPTY
11766: LIST
11767: LIST
11768: LIST
11769: LIST
11770: PPUSH
11771: CALL 70710 0 2
11775: ST_TO_ADDR
11776: GO 11712
11778: POP
11779: POP
// SaveVariable ( tmp , 07_vehicles ) ;
11780: LD_VAR 0 3
11784: PPUSH
11785: LD_STRING 07_vehicles
11787: PPUSH
11788: CALL_OW 39
// YouWin ;
11792: CALL_OW 103
// end ; end_of_file
11796: PPOPN 6
11798: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
11799: LD_VAR 0 1
11803: PPUSH
11804: CALL 28125 0 1
// if un = JMM then
11808: LD_VAR 0 1
11812: PUSH
11813: LD_EXP 9
11817: EQUAL
11818: IFFALSE 11827
// YouLost ( JMM ) ;
11820: LD_STRING JMM
11822: PPUSH
11823: CALL_OW 104
// if GetType ( un ) = unit_building then
11827: LD_VAR 0 1
11831: PPUSH
11832: CALL_OW 247
11836: PUSH
11837: LD_INT 3
11839: EQUAL
11840: IFFALSE 11856
// buildings_counter := buildings_counter + 1 ;
11842: LD_ADDR_EXP 4
11846: PUSH
11847: LD_EXP 4
11851: PUSH
11852: LD_INT 1
11854: PLUS
11855: ST_TO_ADDR
// if un in FilterUnitsInArea ( baseArea , [ f_or , [ f_btype , b_turret ] , [ f_btype , b_bunker ] ] ) then
11856: LD_VAR 0 1
11860: PUSH
11861: LD_INT 6
11863: PPUSH
11864: LD_INT 2
11866: PUSH
11867: LD_INT 30
11869: PUSH
11870: LD_INT 33
11872: PUSH
11873: EMPTY
11874: LIST
11875: LIST
11876: PUSH
11877: LD_INT 30
11879: PUSH
11880: LD_INT 32
11882: PUSH
11883: EMPTY
11884: LIST
11885: LIST
11886: PUSH
11887: EMPTY
11888: LIST
11889: LIST
11890: LIST
11891: PPUSH
11892: CALL_OW 70
11896: IN
11897: IFFALSE 11956
// ru_rebuild_list := ru_rebuild_list ^ [ GetBType ( un ) , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ;
11899: LD_ADDR_EXP 20
11903: PUSH
11904: LD_EXP 20
11908: PUSH
11909: LD_VAR 0 1
11913: PPUSH
11914: CALL_OW 266
11918: PUSH
11919: LD_VAR 0 1
11923: PPUSH
11924: CALL_OW 250
11928: PUSH
11929: LD_VAR 0 1
11933: PPUSH
11934: CALL_OW 251
11938: PUSH
11939: LD_VAR 0 1
11943: PPUSH
11944: CALL_OW 254
11948: PUSH
11949: EMPTY
11950: LIST
11951: LIST
11952: LIST
11953: LIST
11954: ADD
11955: ST_TO_ADDR
// if un = ru_dep_main then
11956: LD_VAR 0 1
11960: PUSH
11961: LD_INT 16
11963: EQUAL
11964: IFFALSE 11973
// ChangeMissionObjectives ( M1a ) ;
11966: LD_STRING M1a
11968: PPUSH
11969: CALL_OW 337
// if GetType ( un ) = unit_human and GetSide ( un ) = 3 then
11973: LD_VAR 0 1
11977: PPUSH
11978: CALL_OW 247
11982: PUSH
11983: LD_INT 1
11985: EQUAL
11986: PUSH
11987: LD_VAR 0 1
11991: PPUSH
11992: CALL_OW 255
11996: PUSH
11997: LD_INT 3
11999: EQUAL
12000: AND
12001: IFFALSE 12017
// kill_counter := kill_counter + 1 ;
12003: LD_ADDR_EXP 8
12007: PUSH
12008: LD_EXP 8
12012: PUSH
12013: LD_INT 1
12015: PLUS
12016: ST_TO_ADDR
// end ;
12017: PPOPN 1
12019: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
12020: LD_VAR 0 1
12024: PPUSH
12025: LD_VAR 0 2
12029: PPUSH
12030: CALL 28245 0 2
// end ;
12034: PPOPN 2
12036: END
// on UnitGoesToRed ( un ) do begin if GetBType ( un ) = b_bunker and GetTag ( un ) = 7 then
12037: LD_VAR 0 1
12041: PPUSH
12042: CALL_OW 266
12046: PUSH
12047: LD_INT 32
12049: EQUAL
12050: PUSH
12051: LD_VAR 0 1
12055: PPUSH
12056: CALL_OW 110
12060: PUSH
12061: LD_INT 7
12063: EQUAL
12064: AND
12065: IFFALSE 12079
// SetTag ( un , 0 ) ;
12067: LD_VAR 0 1
12071: PPUSH
12072: LD_INT 0
12074: PPUSH
12075: CALL_OW 109
// end ;
12079: PPOPN 1
12081: END
// on BuildingStarted ( b , builder ) do var i ;
12082: LD_INT 0
12084: PPUSH
// begin if GetSide ( b ) = 3 then
12085: LD_VAR 0 1
12089: PPUSH
12090: CALL_OW 255
12094: PUSH
12095: LD_INT 3
12097: EQUAL
12098: IFFALSE 12138
// for i = 1 to 4 do
12100: LD_ADDR_VAR 0 3
12104: PUSH
12105: DOUBLE
12106: LD_INT 1
12108: DEC
12109: ST_TO_ADDR
12110: LD_INT 4
12112: PUSH
12113: FOR_TO
12114: IFFALSE 12136
// ru_rebuild_list := Delete ( ru_rebuild_list , 1 ) ;
12116: LD_ADDR_EXP 20
12120: PUSH
12121: LD_EXP 20
12125: PPUSH
12126: LD_INT 1
12128: PPUSH
12129: CALL_OW 3
12133: ST_TO_ADDR
12134: GO 12113
12136: POP
12137: POP
// end ;
12138: PPOPN 3
12140: END
// on BuildingComplete ( b ) do if GetBType ( b ) in [ b_bunker , b_turret ] then
12141: LD_VAR 0 1
12145: PPUSH
12146: CALL_OW 266
12150: PUSH
12151: LD_INT 32
12153: PUSH
12154: LD_INT 33
12156: PUSH
12157: EMPTY
12158: LIST
12159: LIST
12160: IN
12161: IFFALSE 12175
// ComPlaceWeapon ( b , ru_gatling_gun ) ;
12163: LD_VAR 0 1
12167: PPUSH
12168: LD_INT 43
12170: PPUSH
12171: CALL_OW 148
12175: PPOPN 1
12177: END
// on LeaveBuilding ( b , un ) do begin if b in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) then
12178: LD_VAR 0 1
12182: PUSH
12183: LD_INT 22
12185: PUSH
12186: LD_INT 3
12188: PUSH
12189: EMPTY
12190: LIST
12191: LIST
12192: PUSH
12193: LD_INT 2
12195: PUSH
12196: LD_INT 30
12198: PUSH
12199: LD_INT 31
12201: PUSH
12202: EMPTY
12203: LIST
12204: LIST
12205: PUSH
12206: LD_INT 30
12208: PUSH
12209: LD_INT 32
12211: PUSH
12212: EMPTY
12213: LIST
12214: LIST
12215: PUSH
12216: EMPTY
12217: LIST
12218: LIST
12219: LIST
12220: PUSH
12221: EMPTY
12222: LIST
12223: LIST
12224: PPUSH
12225: CALL_OW 69
12229: IN
12230: IFFALSE 12252
// GoToAnotherTower ( un , b , 134 , 136 ) ;
12232: LD_VAR 0 2
12236: PPUSH
12237: LD_VAR 0 1
12241: PPUSH
12242: LD_INT 134
12244: PPUSH
12245: LD_INT 136
12247: PPUSH
12248: CALL 838 0 4
// end ;
12252: PPOPN 2
12254: END
// on EnterBuilding ( b , un ) do begin if b in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) then
12255: LD_VAR 0 1
12259: PUSH
12260: LD_INT 22
12262: PUSH
12263: LD_INT 3
12265: PUSH
12266: EMPTY
12267: LIST
12268: LIST
12269: PUSH
12270: LD_INT 30
12272: PUSH
12273: LD_INT 32
12275: PUSH
12276: EMPTY
12277: LIST
12278: LIST
12279: PUSH
12280: EMPTY
12281: LIST
12282: LIST
12283: PPUSH
12284: CALL_OW 69
12288: IN
12289: IFFALSE 12303
// SetTag ( b , 0 ) ;
12291: LD_VAR 0 1
12295: PPUSH
12296: LD_INT 0
12298: PPUSH
12299: CALL_OW 109
// end ; end_of_file end_of_file
12303: PPOPN 2
12305: END
// export globalGameSaveCounter ; every 0 0$1 do
12306: GO 12308
12308: DISABLE
// begin enable ;
12309: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
12310: LD_STRING updateTimer(
12312: PUSH
12313: LD_OWVAR 1
12317: STR
12318: PUSH
12319: LD_STRING );
12321: STR
12322: PPUSH
12323: CALL_OW 559
// end ;
12327: END
// every 0 0$1 do
12328: GO 12330
12330: DISABLE
// begin globalGameSaveCounter := 0 ;
12331: LD_ADDR_EXP 21
12335: PUSH
12336: LD_INT 0
12338: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
12339: LD_STRING setGameSaveCounter(0)
12341: PPUSH
12342: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
12346: LD_STRING initStreamRollete();
12348: PPUSH
12349: CALL_OW 559
// InitStreamMode ;
12353: CALL 13696 0 0
// DefineStreamItems ( false ) ;
12357: LD_INT 0
12359: PPUSH
12360: CALL 14160 0 1
// end ;
12364: END
// export function SOS_MapStart ( ) ; begin
12365: LD_INT 0
12367: PPUSH
// if streamModeActive then
12368: LD_EXP 22
12372: IFFALSE 12381
// DefineStreamItems ( true ) ;
12374: LD_INT 1
12376: PPUSH
12377: CALL 14160 0 1
// UpdateLuaVariables ( ) ;
12381: CALL 12398 0 0
// UpdateFactoryWaypoints ( ) ;
12385: CALL 27029 0 0
// UpdateWarehouseGatheringPoints ( ) ;
12389: CALL 27286 0 0
// end ;
12393: LD_VAR 0 1
12397: RET
// function UpdateLuaVariables ( ) ; begin
12398: LD_INT 0
12400: PPUSH
// if globalGameSaveCounter then
12401: LD_EXP 21
12405: IFFALSE 12439
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
12407: LD_ADDR_EXP 21
12411: PUSH
12412: LD_EXP 21
12416: PPUSH
12417: CALL 72071 0 1
12421: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
12422: LD_STRING setGameSaveCounter(
12424: PUSH
12425: LD_EXP 21
12429: STR
12430: PUSH
12431: LD_STRING )
12433: STR
12434: PPUSH
12435: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
12439: LD_STRING setGameDifficulty(
12441: PUSH
12442: LD_OWVAR 67
12446: STR
12447: PUSH
12448: LD_STRING )
12450: STR
12451: PPUSH
12452: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
12456: LD_STRING displayDifficulty(
12458: PUSH
12459: LD_OWVAR 67
12463: STR
12464: PUSH
12465: LD_STRING )
12467: STR
12468: PPUSH
12469: CALL_OW 559
// end ;
12473: LD_VAR 0 1
12477: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
12478: LD_INT 0
12480: PPUSH
// if p2 = stream_mode then
12481: LD_VAR 0 2
12485: PUSH
12486: LD_INT 100
12488: EQUAL
12489: IFFALSE 13492
// begin if not StreamModeActive then
12491: LD_EXP 22
12495: NOT
12496: IFFALSE 12506
// StreamModeActive := true ;
12498: LD_ADDR_EXP 22
12502: PUSH
12503: LD_INT 1
12505: ST_TO_ADDR
// if p3 = 0 then
12506: LD_VAR 0 3
12510: PUSH
12511: LD_INT 0
12513: EQUAL
12514: IFFALSE 12520
// InitStreamMode ;
12516: CALL 13696 0 0
// if p3 = 1 then
12520: LD_VAR 0 3
12524: PUSH
12525: LD_INT 1
12527: EQUAL
12528: IFFALSE 12538
// sRocket := true ;
12530: LD_ADDR_EXP 27
12534: PUSH
12535: LD_INT 1
12537: ST_TO_ADDR
// if p3 = 2 then
12538: LD_VAR 0 3
12542: PUSH
12543: LD_INT 2
12545: EQUAL
12546: IFFALSE 12556
// sSpeed := true ;
12548: LD_ADDR_EXP 26
12552: PUSH
12553: LD_INT 1
12555: ST_TO_ADDR
// if p3 = 3 then
12556: LD_VAR 0 3
12560: PUSH
12561: LD_INT 3
12563: EQUAL
12564: IFFALSE 12574
// sEngine := true ;
12566: LD_ADDR_EXP 28
12570: PUSH
12571: LD_INT 1
12573: ST_TO_ADDR
// if p3 = 4 then
12574: LD_VAR 0 3
12578: PUSH
12579: LD_INT 4
12581: EQUAL
12582: IFFALSE 12592
// sSpec := true ;
12584: LD_ADDR_EXP 25
12588: PUSH
12589: LD_INT 1
12591: ST_TO_ADDR
// if p3 = 5 then
12592: LD_VAR 0 3
12596: PUSH
12597: LD_INT 5
12599: EQUAL
12600: IFFALSE 12610
// sLevel := true ;
12602: LD_ADDR_EXP 29
12606: PUSH
12607: LD_INT 1
12609: ST_TO_ADDR
// if p3 = 6 then
12610: LD_VAR 0 3
12614: PUSH
12615: LD_INT 6
12617: EQUAL
12618: IFFALSE 12628
// sArmoury := true ;
12620: LD_ADDR_EXP 30
12624: PUSH
12625: LD_INT 1
12627: ST_TO_ADDR
// if p3 = 7 then
12628: LD_VAR 0 3
12632: PUSH
12633: LD_INT 7
12635: EQUAL
12636: IFFALSE 12646
// sRadar := true ;
12638: LD_ADDR_EXP 31
12642: PUSH
12643: LD_INT 1
12645: ST_TO_ADDR
// if p3 = 8 then
12646: LD_VAR 0 3
12650: PUSH
12651: LD_INT 8
12653: EQUAL
12654: IFFALSE 12664
// sBunker := true ;
12656: LD_ADDR_EXP 32
12660: PUSH
12661: LD_INT 1
12663: ST_TO_ADDR
// if p3 = 9 then
12664: LD_VAR 0 3
12668: PUSH
12669: LD_INT 9
12671: EQUAL
12672: IFFALSE 12682
// sHack := true ;
12674: LD_ADDR_EXP 33
12678: PUSH
12679: LD_INT 1
12681: ST_TO_ADDR
// if p3 = 10 then
12682: LD_VAR 0 3
12686: PUSH
12687: LD_INT 10
12689: EQUAL
12690: IFFALSE 12700
// sFire := true ;
12692: LD_ADDR_EXP 34
12696: PUSH
12697: LD_INT 1
12699: ST_TO_ADDR
// if p3 = 11 then
12700: LD_VAR 0 3
12704: PUSH
12705: LD_INT 11
12707: EQUAL
12708: IFFALSE 12718
// sRefresh := true ;
12710: LD_ADDR_EXP 35
12714: PUSH
12715: LD_INT 1
12717: ST_TO_ADDR
// if p3 = 12 then
12718: LD_VAR 0 3
12722: PUSH
12723: LD_INT 12
12725: EQUAL
12726: IFFALSE 12736
// sExp := true ;
12728: LD_ADDR_EXP 36
12732: PUSH
12733: LD_INT 1
12735: ST_TO_ADDR
// if p3 = 13 then
12736: LD_VAR 0 3
12740: PUSH
12741: LD_INT 13
12743: EQUAL
12744: IFFALSE 12754
// sDepot := true ;
12746: LD_ADDR_EXP 37
12750: PUSH
12751: LD_INT 1
12753: ST_TO_ADDR
// if p3 = 14 then
12754: LD_VAR 0 3
12758: PUSH
12759: LD_INT 14
12761: EQUAL
12762: IFFALSE 12772
// sFlag := true ;
12764: LD_ADDR_EXP 38
12768: PUSH
12769: LD_INT 1
12771: ST_TO_ADDR
// if p3 = 15 then
12772: LD_VAR 0 3
12776: PUSH
12777: LD_INT 15
12779: EQUAL
12780: IFFALSE 12790
// sKamikadze := true ;
12782: LD_ADDR_EXP 46
12786: PUSH
12787: LD_INT 1
12789: ST_TO_ADDR
// if p3 = 16 then
12790: LD_VAR 0 3
12794: PUSH
12795: LD_INT 16
12797: EQUAL
12798: IFFALSE 12808
// sTroll := true ;
12800: LD_ADDR_EXP 47
12804: PUSH
12805: LD_INT 1
12807: ST_TO_ADDR
// if p3 = 17 then
12808: LD_VAR 0 3
12812: PUSH
12813: LD_INT 17
12815: EQUAL
12816: IFFALSE 12826
// sSlow := true ;
12818: LD_ADDR_EXP 48
12822: PUSH
12823: LD_INT 1
12825: ST_TO_ADDR
// if p3 = 18 then
12826: LD_VAR 0 3
12830: PUSH
12831: LD_INT 18
12833: EQUAL
12834: IFFALSE 12844
// sLack := true ;
12836: LD_ADDR_EXP 49
12840: PUSH
12841: LD_INT 1
12843: ST_TO_ADDR
// if p3 = 19 then
12844: LD_VAR 0 3
12848: PUSH
12849: LD_INT 19
12851: EQUAL
12852: IFFALSE 12862
// sTank := true ;
12854: LD_ADDR_EXP 51
12858: PUSH
12859: LD_INT 1
12861: ST_TO_ADDR
// if p3 = 20 then
12862: LD_VAR 0 3
12866: PUSH
12867: LD_INT 20
12869: EQUAL
12870: IFFALSE 12880
// sRemote := true ;
12872: LD_ADDR_EXP 52
12876: PUSH
12877: LD_INT 1
12879: ST_TO_ADDR
// if p3 = 21 then
12880: LD_VAR 0 3
12884: PUSH
12885: LD_INT 21
12887: EQUAL
12888: IFFALSE 12898
// sPowell := true ;
12890: LD_ADDR_EXP 53
12894: PUSH
12895: LD_INT 1
12897: ST_TO_ADDR
// if p3 = 22 then
12898: LD_VAR 0 3
12902: PUSH
12903: LD_INT 22
12905: EQUAL
12906: IFFALSE 12916
// sTeleport := true ;
12908: LD_ADDR_EXP 56
12912: PUSH
12913: LD_INT 1
12915: ST_TO_ADDR
// if p3 = 23 then
12916: LD_VAR 0 3
12920: PUSH
12921: LD_INT 23
12923: EQUAL
12924: IFFALSE 12934
// sOilTower := true ;
12926: LD_ADDR_EXP 58
12930: PUSH
12931: LD_INT 1
12933: ST_TO_ADDR
// if p3 = 24 then
12934: LD_VAR 0 3
12938: PUSH
12939: LD_INT 24
12941: EQUAL
12942: IFFALSE 12952
// sShovel := true ;
12944: LD_ADDR_EXP 59
12948: PUSH
12949: LD_INT 1
12951: ST_TO_ADDR
// if p3 = 25 then
12952: LD_VAR 0 3
12956: PUSH
12957: LD_INT 25
12959: EQUAL
12960: IFFALSE 12970
// sSheik := true ;
12962: LD_ADDR_EXP 60
12966: PUSH
12967: LD_INT 1
12969: ST_TO_ADDR
// if p3 = 26 then
12970: LD_VAR 0 3
12974: PUSH
12975: LD_INT 26
12977: EQUAL
12978: IFFALSE 12988
// sEarthquake := true ;
12980: LD_ADDR_EXP 62
12984: PUSH
12985: LD_INT 1
12987: ST_TO_ADDR
// if p3 = 27 then
12988: LD_VAR 0 3
12992: PUSH
12993: LD_INT 27
12995: EQUAL
12996: IFFALSE 13006
// sAI := true ;
12998: LD_ADDR_EXP 63
13002: PUSH
13003: LD_INT 1
13005: ST_TO_ADDR
// if p3 = 28 then
13006: LD_VAR 0 3
13010: PUSH
13011: LD_INT 28
13013: EQUAL
13014: IFFALSE 13024
// sCargo := true ;
13016: LD_ADDR_EXP 66
13020: PUSH
13021: LD_INT 1
13023: ST_TO_ADDR
// if p3 = 29 then
13024: LD_VAR 0 3
13028: PUSH
13029: LD_INT 29
13031: EQUAL
13032: IFFALSE 13042
// sDLaser := true ;
13034: LD_ADDR_EXP 67
13038: PUSH
13039: LD_INT 1
13041: ST_TO_ADDR
// if p3 = 30 then
13042: LD_VAR 0 3
13046: PUSH
13047: LD_INT 30
13049: EQUAL
13050: IFFALSE 13060
// sExchange := true ;
13052: LD_ADDR_EXP 68
13056: PUSH
13057: LD_INT 1
13059: ST_TO_ADDR
// if p3 = 31 then
13060: LD_VAR 0 3
13064: PUSH
13065: LD_INT 31
13067: EQUAL
13068: IFFALSE 13078
// sFac := true ;
13070: LD_ADDR_EXP 69
13074: PUSH
13075: LD_INT 1
13077: ST_TO_ADDR
// if p3 = 32 then
13078: LD_VAR 0 3
13082: PUSH
13083: LD_INT 32
13085: EQUAL
13086: IFFALSE 13096
// sPower := true ;
13088: LD_ADDR_EXP 70
13092: PUSH
13093: LD_INT 1
13095: ST_TO_ADDR
// if p3 = 33 then
13096: LD_VAR 0 3
13100: PUSH
13101: LD_INT 33
13103: EQUAL
13104: IFFALSE 13114
// sRandom := true ;
13106: LD_ADDR_EXP 71
13110: PUSH
13111: LD_INT 1
13113: ST_TO_ADDR
// if p3 = 34 then
13114: LD_VAR 0 3
13118: PUSH
13119: LD_INT 34
13121: EQUAL
13122: IFFALSE 13132
// sShield := true ;
13124: LD_ADDR_EXP 72
13128: PUSH
13129: LD_INT 1
13131: ST_TO_ADDR
// if p3 = 35 then
13132: LD_VAR 0 3
13136: PUSH
13137: LD_INT 35
13139: EQUAL
13140: IFFALSE 13150
// sTime := true ;
13142: LD_ADDR_EXP 73
13146: PUSH
13147: LD_INT 1
13149: ST_TO_ADDR
// if p3 = 36 then
13150: LD_VAR 0 3
13154: PUSH
13155: LD_INT 36
13157: EQUAL
13158: IFFALSE 13168
// sTools := true ;
13160: LD_ADDR_EXP 74
13164: PUSH
13165: LD_INT 1
13167: ST_TO_ADDR
// if p3 = 101 then
13168: LD_VAR 0 3
13172: PUSH
13173: LD_INT 101
13175: EQUAL
13176: IFFALSE 13186
// sSold := true ;
13178: LD_ADDR_EXP 39
13182: PUSH
13183: LD_INT 1
13185: ST_TO_ADDR
// if p3 = 102 then
13186: LD_VAR 0 3
13190: PUSH
13191: LD_INT 102
13193: EQUAL
13194: IFFALSE 13204
// sDiff := true ;
13196: LD_ADDR_EXP 40
13200: PUSH
13201: LD_INT 1
13203: ST_TO_ADDR
// if p3 = 103 then
13204: LD_VAR 0 3
13208: PUSH
13209: LD_INT 103
13211: EQUAL
13212: IFFALSE 13222
// sFog := true ;
13214: LD_ADDR_EXP 43
13218: PUSH
13219: LD_INT 1
13221: ST_TO_ADDR
// if p3 = 104 then
13222: LD_VAR 0 3
13226: PUSH
13227: LD_INT 104
13229: EQUAL
13230: IFFALSE 13240
// sReset := true ;
13232: LD_ADDR_EXP 44
13236: PUSH
13237: LD_INT 1
13239: ST_TO_ADDR
// if p3 = 105 then
13240: LD_VAR 0 3
13244: PUSH
13245: LD_INT 105
13247: EQUAL
13248: IFFALSE 13258
// sSun := true ;
13250: LD_ADDR_EXP 45
13254: PUSH
13255: LD_INT 1
13257: ST_TO_ADDR
// if p3 = 106 then
13258: LD_VAR 0 3
13262: PUSH
13263: LD_INT 106
13265: EQUAL
13266: IFFALSE 13276
// sTiger := true ;
13268: LD_ADDR_EXP 41
13272: PUSH
13273: LD_INT 1
13275: ST_TO_ADDR
// if p3 = 107 then
13276: LD_VAR 0 3
13280: PUSH
13281: LD_INT 107
13283: EQUAL
13284: IFFALSE 13294
// sBomb := true ;
13286: LD_ADDR_EXP 42
13290: PUSH
13291: LD_INT 1
13293: ST_TO_ADDR
// if p3 = 108 then
13294: LD_VAR 0 3
13298: PUSH
13299: LD_INT 108
13301: EQUAL
13302: IFFALSE 13312
// sWound := true ;
13304: LD_ADDR_EXP 50
13308: PUSH
13309: LD_INT 1
13311: ST_TO_ADDR
// if p3 = 109 then
13312: LD_VAR 0 3
13316: PUSH
13317: LD_INT 109
13319: EQUAL
13320: IFFALSE 13330
// sBetray := true ;
13322: LD_ADDR_EXP 54
13326: PUSH
13327: LD_INT 1
13329: ST_TO_ADDR
// if p3 = 110 then
13330: LD_VAR 0 3
13334: PUSH
13335: LD_INT 110
13337: EQUAL
13338: IFFALSE 13348
// sContamin := true ;
13340: LD_ADDR_EXP 55
13344: PUSH
13345: LD_INT 1
13347: ST_TO_ADDR
// if p3 = 111 then
13348: LD_VAR 0 3
13352: PUSH
13353: LD_INT 111
13355: EQUAL
13356: IFFALSE 13366
// sOil := true ;
13358: LD_ADDR_EXP 57
13362: PUSH
13363: LD_INT 1
13365: ST_TO_ADDR
// if p3 = 112 then
13366: LD_VAR 0 3
13370: PUSH
13371: LD_INT 112
13373: EQUAL
13374: IFFALSE 13384
// sStu := true ;
13376: LD_ADDR_EXP 61
13380: PUSH
13381: LD_INT 1
13383: ST_TO_ADDR
// if p3 = 113 then
13384: LD_VAR 0 3
13388: PUSH
13389: LD_INT 113
13391: EQUAL
13392: IFFALSE 13402
// sBazooka := true ;
13394: LD_ADDR_EXP 64
13398: PUSH
13399: LD_INT 1
13401: ST_TO_ADDR
// if p3 = 114 then
13402: LD_VAR 0 3
13406: PUSH
13407: LD_INT 114
13409: EQUAL
13410: IFFALSE 13420
// sMortar := true ;
13412: LD_ADDR_EXP 65
13416: PUSH
13417: LD_INT 1
13419: ST_TO_ADDR
// if p3 = 115 then
13420: LD_VAR 0 3
13424: PUSH
13425: LD_INT 115
13427: EQUAL
13428: IFFALSE 13438
// sRanger := true ;
13430: LD_ADDR_EXP 75
13434: PUSH
13435: LD_INT 1
13437: ST_TO_ADDR
// if p3 = 116 then
13438: LD_VAR 0 3
13442: PUSH
13443: LD_INT 116
13445: EQUAL
13446: IFFALSE 13456
// sComputer := true ;
13448: LD_ADDR_EXP 76
13452: PUSH
13453: LD_INT 1
13455: ST_TO_ADDR
// if p3 = 117 then
13456: LD_VAR 0 3
13460: PUSH
13461: LD_INT 117
13463: EQUAL
13464: IFFALSE 13474
// s30 := true ;
13466: LD_ADDR_EXP 77
13470: PUSH
13471: LD_INT 1
13473: ST_TO_ADDR
// if p3 = 118 then
13474: LD_VAR 0 3
13478: PUSH
13479: LD_INT 118
13481: EQUAL
13482: IFFALSE 13492
// s60 := true ;
13484: LD_ADDR_EXP 78
13488: PUSH
13489: LD_INT 1
13491: ST_TO_ADDR
// end ; if p2 = hack_mode then
13492: LD_VAR 0 2
13496: PUSH
13497: LD_INT 101
13499: EQUAL
13500: IFFALSE 13628
// begin case p3 of 1 :
13502: LD_VAR 0 3
13506: PUSH
13507: LD_INT 1
13509: DOUBLE
13510: EQUAL
13511: IFTRUE 13515
13513: GO 13522
13515: POP
// hHackUnlimitedResources ; 2 :
13516: CALL 25775 0 0
13520: GO 13628
13522: LD_INT 2
13524: DOUBLE
13525: EQUAL
13526: IFTRUE 13530
13528: GO 13537
13530: POP
// hHackSetLevel10 ; 3 :
13531: CALL 25908 0 0
13535: GO 13628
13537: LD_INT 3
13539: DOUBLE
13540: EQUAL
13541: IFTRUE 13545
13543: GO 13552
13545: POP
// hHackSetLevel10YourUnits ; 4 :
13546: CALL 25993 0 0
13550: GO 13628
13552: LD_INT 4
13554: DOUBLE
13555: EQUAL
13556: IFTRUE 13560
13558: GO 13567
13560: POP
// hHackInvincible ; 5 :
13561: CALL 26441 0 0
13565: GO 13628
13567: LD_INT 5
13569: DOUBLE
13570: EQUAL
13571: IFTRUE 13575
13573: GO 13582
13575: POP
// hHackInvisible ; 6 :
13576: CALL 26552 0 0
13580: GO 13628
13582: LD_INT 6
13584: DOUBLE
13585: EQUAL
13586: IFTRUE 13590
13588: GO 13597
13590: POP
// hHackChangeYourSide ; 7 :
13591: CALL 26609 0 0
13595: GO 13628
13597: LD_INT 7
13599: DOUBLE
13600: EQUAL
13601: IFTRUE 13605
13603: GO 13612
13605: POP
// hHackChangeUnitSide ; 8 :
13606: CALL 26651 0 0
13610: GO 13628
13612: LD_INT 8
13614: DOUBLE
13615: EQUAL
13616: IFTRUE 13620
13618: GO 13627
13620: POP
// hHackFog ; end ;
13621: CALL 26752 0 0
13625: GO 13628
13627: POP
// end ; if p2 = game_save_mode then
13628: LD_VAR 0 2
13632: PUSH
13633: LD_INT 102
13635: EQUAL
13636: IFFALSE 13691
// begin if p3 = 1 then
13638: LD_VAR 0 3
13642: PUSH
13643: LD_INT 1
13645: EQUAL
13646: IFFALSE 13658
// globalGameSaveCounter := p4 ;
13648: LD_ADDR_EXP 21
13652: PUSH
13653: LD_VAR 0 4
13657: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
13658: LD_VAR 0 3
13662: PUSH
13663: LD_INT 2
13665: EQUAL
13666: PUSH
13667: LD_EXP 21
13671: AND
13672: IFFALSE 13691
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
13674: LD_STRING setGameSaveCounter(
13676: PUSH
13677: LD_EXP 21
13681: STR
13682: PUSH
13683: LD_STRING )
13685: STR
13686: PPUSH
13687: CALL_OW 559
// end ; end ;
13691: LD_VAR 0 7
13695: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
13696: LD_INT 0
13698: PPUSH
// streamModeActive := false ;
13699: LD_ADDR_EXP 22
13703: PUSH
13704: LD_INT 0
13706: ST_TO_ADDR
// normalCounter := 36 ;
13707: LD_ADDR_EXP 23
13711: PUSH
13712: LD_INT 36
13714: ST_TO_ADDR
// hardcoreCounter := 18 ;
13715: LD_ADDR_EXP 24
13719: PUSH
13720: LD_INT 18
13722: ST_TO_ADDR
// sRocket := false ;
13723: LD_ADDR_EXP 27
13727: PUSH
13728: LD_INT 0
13730: ST_TO_ADDR
// sSpeed := false ;
13731: LD_ADDR_EXP 26
13735: PUSH
13736: LD_INT 0
13738: ST_TO_ADDR
// sEngine := false ;
13739: LD_ADDR_EXP 28
13743: PUSH
13744: LD_INT 0
13746: ST_TO_ADDR
// sSpec := false ;
13747: LD_ADDR_EXP 25
13751: PUSH
13752: LD_INT 0
13754: ST_TO_ADDR
// sLevel := false ;
13755: LD_ADDR_EXP 29
13759: PUSH
13760: LD_INT 0
13762: ST_TO_ADDR
// sArmoury := false ;
13763: LD_ADDR_EXP 30
13767: PUSH
13768: LD_INT 0
13770: ST_TO_ADDR
// sRadar := false ;
13771: LD_ADDR_EXP 31
13775: PUSH
13776: LD_INT 0
13778: ST_TO_ADDR
// sBunker := false ;
13779: LD_ADDR_EXP 32
13783: PUSH
13784: LD_INT 0
13786: ST_TO_ADDR
// sHack := false ;
13787: LD_ADDR_EXP 33
13791: PUSH
13792: LD_INT 0
13794: ST_TO_ADDR
// sFire := false ;
13795: LD_ADDR_EXP 34
13799: PUSH
13800: LD_INT 0
13802: ST_TO_ADDR
// sRefresh := false ;
13803: LD_ADDR_EXP 35
13807: PUSH
13808: LD_INT 0
13810: ST_TO_ADDR
// sExp := false ;
13811: LD_ADDR_EXP 36
13815: PUSH
13816: LD_INT 0
13818: ST_TO_ADDR
// sDepot := false ;
13819: LD_ADDR_EXP 37
13823: PUSH
13824: LD_INT 0
13826: ST_TO_ADDR
// sFlag := false ;
13827: LD_ADDR_EXP 38
13831: PUSH
13832: LD_INT 0
13834: ST_TO_ADDR
// sKamikadze := false ;
13835: LD_ADDR_EXP 46
13839: PUSH
13840: LD_INT 0
13842: ST_TO_ADDR
// sTroll := false ;
13843: LD_ADDR_EXP 47
13847: PUSH
13848: LD_INT 0
13850: ST_TO_ADDR
// sSlow := false ;
13851: LD_ADDR_EXP 48
13855: PUSH
13856: LD_INT 0
13858: ST_TO_ADDR
// sLack := false ;
13859: LD_ADDR_EXP 49
13863: PUSH
13864: LD_INT 0
13866: ST_TO_ADDR
// sTank := false ;
13867: LD_ADDR_EXP 51
13871: PUSH
13872: LD_INT 0
13874: ST_TO_ADDR
// sRemote := false ;
13875: LD_ADDR_EXP 52
13879: PUSH
13880: LD_INT 0
13882: ST_TO_ADDR
// sPowell := false ;
13883: LD_ADDR_EXP 53
13887: PUSH
13888: LD_INT 0
13890: ST_TO_ADDR
// sTeleport := false ;
13891: LD_ADDR_EXP 56
13895: PUSH
13896: LD_INT 0
13898: ST_TO_ADDR
// sOilTower := false ;
13899: LD_ADDR_EXP 58
13903: PUSH
13904: LD_INT 0
13906: ST_TO_ADDR
// sShovel := false ;
13907: LD_ADDR_EXP 59
13911: PUSH
13912: LD_INT 0
13914: ST_TO_ADDR
// sSheik := false ;
13915: LD_ADDR_EXP 60
13919: PUSH
13920: LD_INT 0
13922: ST_TO_ADDR
// sEarthquake := false ;
13923: LD_ADDR_EXP 62
13927: PUSH
13928: LD_INT 0
13930: ST_TO_ADDR
// sAI := false ;
13931: LD_ADDR_EXP 63
13935: PUSH
13936: LD_INT 0
13938: ST_TO_ADDR
// sCargo := false ;
13939: LD_ADDR_EXP 66
13943: PUSH
13944: LD_INT 0
13946: ST_TO_ADDR
// sDLaser := false ;
13947: LD_ADDR_EXP 67
13951: PUSH
13952: LD_INT 0
13954: ST_TO_ADDR
// sExchange := false ;
13955: LD_ADDR_EXP 68
13959: PUSH
13960: LD_INT 0
13962: ST_TO_ADDR
// sFac := false ;
13963: LD_ADDR_EXP 69
13967: PUSH
13968: LD_INT 0
13970: ST_TO_ADDR
// sPower := false ;
13971: LD_ADDR_EXP 70
13975: PUSH
13976: LD_INT 0
13978: ST_TO_ADDR
// sRandom := false ;
13979: LD_ADDR_EXP 71
13983: PUSH
13984: LD_INT 0
13986: ST_TO_ADDR
// sShield := false ;
13987: LD_ADDR_EXP 72
13991: PUSH
13992: LD_INT 0
13994: ST_TO_ADDR
// sTime := false ;
13995: LD_ADDR_EXP 73
13999: PUSH
14000: LD_INT 0
14002: ST_TO_ADDR
// sTools := false ;
14003: LD_ADDR_EXP 74
14007: PUSH
14008: LD_INT 0
14010: ST_TO_ADDR
// sSold := false ;
14011: LD_ADDR_EXP 39
14015: PUSH
14016: LD_INT 0
14018: ST_TO_ADDR
// sDiff := false ;
14019: LD_ADDR_EXP 40
14023: PUSH
14024: LD_INT 0
14026: ST_TO_ADDR
// sFog := false ;
14027: LD_ADDR_EXP 43
14031: PUSH
14032: LD_INT 0
14034: ST_TO_ADDR
// sReset := false ;
14035: LD_ADDR_EXP 44
14039: PUSH
14040: LD_INT 0
14042: ST_TO_ADDR
// sSun := false ;
14043: LD_ADDR_EXP 45
14047: PUSH
14048: LD_INT 0
14050: ST_TO_ADDR
// sTiger := false ;
14051: LD_ADDR_EXP 41
14055: PUSH
14056: LD_INT 0
14058: ST_TO_ADDR
// sBomb := false ;
14059: LD_ADDR_EXP 42
14063: PUSH
14064: LD_INT 0
14066: ST_TO_ADDR
// sWound := false ;
14067: LD_ADDR_EXP 50
14071: PUSH
14072: LD_INT 0
14074: ST_TO_ADDR
// sBetray := false ;
14075: LD_ADDR_EXP 54
14079: PUSH
14080: LD_INT 0
14082: ST_TO_ADDR
// sContamin := false ;
14083: LD_ADDR_EXP 55
14087: PUSH
14088: LD_INT 0
14090: ST_TO_ADDR
// sOil := false ;
14091: LD_ADDR_EXP 57
14095: PUSH
14096: LD_INT 0
14098: ST_TO_ADDR
// sStu := false ;
14099: LD_ADDR_EXP 61
14103: PUSH
14104: LD_INT 0
14106: ST_TO_ADDR
// sBazooka := false ;
14107: LD_ADDR_EXP 64
14111: PUSH
14112: LD_INT 0
14114: ST_TO_ADDR
// sMortar := false ;
14115: LD_ADDR_EXP 65
14119: PUSH
14120: LD_INT 0
14122: ST_TO_ADDR
// sRanger := false ;
14123: LD_ADDR_EXP 75
14127: PUSH
14128: LD_INT 0
14130: ST_TO_ADDR
// sComputer := false ;
14131: LD_ADDR_EXP 76
14135: PUSH
14136: LD_INT 0
14138: ST_TO_ADDR
// s30 := false ;
14139: LD_ADDR_EXP 77
14143: PUSH
14144: LD_INT 0
14146: ST_TO_ADDR
// s60 := false ;
14147: LD_ADDR_EXP 78
14151: PUSH
14152: LD_INT 0
14154: ST_TO_ADDR
// end ;
14155: LD_VAR 0 1
14159: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
14160: LD_INT 0
14162: PPUSH
14163: PPUSH
14164: PPUSH
14165: PPUSH
14166: PPUSH
14167: PPUSH
14168: PPUSH
// result := [ ] ;
14169: LD_ADDR_VAR 0 2
14173: PUSH
14174: EMPTY
14175: ST_TO_ADDR
// if campaign_id = 1 then
14176: LD_OWVAR 69
14180: PUSH
14181: LD_INT 1
14183: EQUAL
14184: IFFALSE 17350
// begin case mission_number of 1 :
14186: LD_OWVAR 70
14190: PUSH
14191: LD_INT 1
14193: DOUBLE
14194: EQUAL
14195: IFTRUE 14199
14197: GO 14275
14199: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
14200: LD_ADDR_VAR 0 2
14204: PUSH
14205: LD_INT 2
14207: PUSH
14208: LD_INT 4
14210: PUSH
14211: LD_INT 11
14213: PUSH
14214: LD_INT 12
14216: PUSH
14217: LD_INT 15
14219: PUSH
14220: LD_INT 16
14222: PUSH
14223: LD_INT 22
14225: PUSH
14226: LD_INT 23
14228: PUSH
14229: LD_INT 26
14231: PUSH
14232: EMPTY
14233: LIST
14234: LIST
14235: LIST
14236: LIST
14237: LIST
14238: LIST
14239: LIST
14240: LIST
14241: LIST
14242: PUSH
14243: LD_INT 101
14245: PUSH
14246: LD_INT 102
14248: PUSH
14249: LD_INT 106
14251: PUSH
14252: LD_INT 116
14254: PUSH
14255: LD_INT 117
14257: PUSH
14258: LD_INT 118
14260: PUSH
14261: EMPTY
14262: LIST
14263: LIST
14264: LIST
14265: LIST
14266: LIST
14267: LIST
14268: PUSH
14269: EMPTY
14270: LIST
14271: LIST
14272: ST_TO_ADDR
14273: GO 17348
14275: LD_INT 2
14277: DOUBLE
14278: EQUAL
14279: IFTRUE 14283
14281: GO 14367
14283: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
14284: LD_ADDR_VAR 0 2
14288: PUSH
14289: LD_INT 2
14291: PUSH
14292: LD_INT 4
14294: PUSH
14295: LD_INT 11
14297: PUSH
14298: LD_INT 12
14300: PUSH
14301: LD_INT 15
14303: PUSH
14304: LD_INT 16
14306: PUSH
14307: LD_INT 22
14309: PUSH
14310: LD_INT 23
14312: PUSH
14313: LD_INT 26
14315: PUSH
14316: EMPTY
14317: LIST
14318: LIST
14319: LIST
14320: LIST
14321: LIST
14322: LIST
14323: LIST
14324: LIST
14325: LIST
14326: PUSH
14327: LD_INT 101
14329: PUSH
14330: LD_INT 102
14332: PUSH
14333: LD_INT 105
14335: PUSH
14336: LD_INT 106
14338: PUSH
14339: LD_INT 108
14341: PUSH
14342: LD_INT 116
14344: PUSH
14345: LD_INT 117
14347: PUSH
14348: LD_INT 118
14350: PUSH
14351: EMPTY
14352: LIST
14353: LIST
14354: LIST
14355: LIST
14356: LIST
14357: LIST
14358: LIST
14359: LIST
14360: PUSH
14361: EMPTY
14362: LIST
14363: LIST
14364: ST_TO_ADDR
14365: GO 17348
14367: LD_INT 3
14369: DOUBLE
14370: EQUAL
14371: IFTRUE 14375
14373: GO 14463
14375: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
14376: LD_ADDR_VAR 0 2
14380: PUSH
14381: LD_INT 2
14383: PUSH
14384: LD_INT 4
14386: PUSH
14387: LD_INT 5
14389: PUSH
14390: LD_INT 11
14392: PUSH
14393: LD_INT 12
14395: PUSH
14396: LD_INT 15
14398: PUSH
14399: LD_INT 16
14401: PUSH
14402: LD_INT 22
14404: PUSH
14405: LD_INT 26
14407: PUSH
14408: LD_INT 36
14410: PUSH
14411: EMPTY
14412: LIST
14413: LIST
14414: LIST
14415: LIST
14416: LIST
14417: LIST
14418: LIST
14419: LIST
14420: LIST
14421: LIST
14422: PUSH
14423: LD_INT 101
14425: PUSH
14426: LD_INT 102
14428: PUSH
14429: LD_INT 105
14431: PUSH
14432: LD_INT 106
14434: PUSH
14435: LD_INT 108
14437: PUSH
14438: LD_INT 116
14440: PUSH
14441: LD_INT 117
14443: PUSH
14444: LD_INT 118
14446: PUSH
14447: EMPTY
14448: LIST
14449: LIST
14450: LIST
14451: LIST
14452: LIST
14453: LIST
14454: LIST
14455: LIST
14456: PUSH
14457: EMPTY
14458: LIST
14459: LIST
14460: ST_TO_ADDR
14461: GO 17348
14463: LD_INT 4
14465: DOUBLE
14466: EQUAL
14467: IFTRUE 14471
14469: GO 14567
14471: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
14472: LD_ADDR_VAR 0 2
14476: PUSH
14477: LD_INT 2
14479: PUSH
14480: LD_INT 4
14482: PUSH
14483: LD_INT 5
14485: PUSH
14486: LD_INT 8
14488: PUSH
14489: LD_INT 11
14491: PUSH
14492: LD_INT 12
14494: PUSH
14495: LD_INT 15
14497: PUSH
14498: LD_INT 16
14500: PUSH
14501: LD_INT 22
14503: PUSH
14504: LD_INT 23
14506: PUSH
14507: LD_INT 26
14509: PUSH
14510: LD_INT 36
14512: PUSH
14513: EMPTY
14514: LIST
14515: LIST
14516: LIST
14517: LIST
14518: LIST
14519: LIST
14520: LIST
14521: LIST
14522: LIST
14523: LIST
14524: LIST
14525: LIST
14526: PUSH
14527: LD_INT 101
14529: PUSH
14530: LD_INT 102
14532: PUSH
14533: LD_INT 105
14535: PUSH
14536: LD_INT 106
14538: PUSH
14539: LD_INT 108
14541: PUSH
14542: LD_INT 116
14544: PUSH
14545: LD_INT 117
14547: PUSH
14548: LD_INT 118
14550: PUSH
14551: EMPTY
14552: LIST
14553: LIST
14554: LIST
14555: LIST
14556: LIST
14557: LIST
14558: LIST
14559: LIST
14560: PUSH
14561: EMPTY
14562: LIST
14563: LIST
14564: ST_TO_ADDR
14565: GO 17348
14567: LD_INT 5
14569: DOUBLE
14570: EQUAL
14571: IFTRUE 14575
14573: GO 14687
14575: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
14576: LD_ADDR_VAR 0 2
14580: PUSH
14581: LD_INT 2
14583: PUSH
14584: LD_INT 4
14586: PUSH
14587: LD_INT 5
14589: PUSH
14590: LD_INT 6
14592: PUSH
14593: LD_INT 8
14595: PUSH
14596: LD_INT 11
14598: PUSH
14599: LD_INT 12
14601: PUSH
14602: LD_INT 15
14604: PUSH
14605: LD_INT 16
14607: PUSH
14608: LD_INT 22
14610: PUSH
14611: LD_INT 23
14613: PUSH
14614: LD_INT 25
14616: PUSH
14617: LD_INT 26
14619: PUSH
14620: LD_INT 36
14622: PUSH
14623: EMPTY
14624: LIST
14625: LIST
14626: LIST
14627: LIST
14628: LIST
14629: LIST
14630: LIST
14631: LIST
14632: LIST
14633: LIST
14634: LIST
14635: LIST
14636: LIST
14637: LIST
14638: PUSH
14639: LD_INT 101
14641: PUSH
14642: LD_INT 102
14644: PUSH
14645: LD_INT 105
14647: PUSH
14648: LD_INT 106
14650: PUSH
14651: LD_INT 108
14653: PUSH
14654: LD_INT 109
14656: PUSH
14657: LD_INT 112
14659: PUSH
14660: LD_INT 116
14662: PUSH
14663: LD_INT 117
14665: PUSH
14666: LD_INT 118
14668: PUSH
14669: EMPTY
14670: LIST
14671: LIST
14672: LIST
14673: LIST
14674: LIST
14675: LIST
14676: LIST
14677: LIST
14678: LIST
14679: LIST
14680: PUSH
14681: EMPTY
14682: LIST
14683: LIST
14684: ST_TO_ADDR
14685: GO 17348
14687: LD_INT 6
14689: DOUBLE
14690: EQUAL
14691: IFTRUE 14695
14693: GO 14827
14695: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
14696: LD_ADDR_VAR 0 2
14700: PUSH
14701: LD_INT 2
14703: PUSH
14704: LD_INT 4
14706: PUSH
14707: LD_INT 5
14709: PUSH
14710: LD_INT 6
14712: PUSH
14713: LD_INT 8
14715: PUSH
14716: LD_INT 11
14718: PUSH
14719: LD_INT 12
14721: PUSH
14722: LD_INT 15
14724: PUSH
14725: LD_INT 16
14727: PUSH
14728: LD_INT 20
14730: PUSH
14731: LD_INT 21
14733: PUSH
14734: LD_INT 22
14736: PUSH
14737: LD_INT 23
14739: PUSH
14740: LD_INT 25
14742: PUSH
14743: LD_INT 26
14745: PUSH
14746: LD_INT 30
14748: PUSH
14749: LD_INT 31
14751: PUSH
14752: LD_INT 32
14754: PUSH
14755: LD_INT 36
14757: PUSH
14758: EMPTY
14759: LIST
14760: LIST
14761: LIST
14762: LIST
14763: LIST
14764: LIST
14765: LIST
14766: LIST
14767: LIST
14768: LIST
14769: LIST
14770: LIST
14771: LIST
14772: LIST
14773: LIST
14774: LIST
14775: LIST
14776: LIST
14777: LIST
14778: PUSH
14779: LD_INT 101
14781: PUSH
14782: LD_INT 102
14784: PUSH
14785: LD_INT 105
14787: PUSH
14788: LD_INT 106
14790: PUSH
14791: LD_INT 108
14793: PUSH
14794: LD_INT 109
14796: PUSH
14797: LD_INT 112
14799: PUSH
14800: LD_INT 116
14802: PUSH
14803: LD_INT 117
14805: PUSH
14806: LD_INT 118
14808: PUSH
14809: EMPTY
14810: LIST
14811: LIST
14812: LIST
14813: LIST
14814: LIST
14815: LIST
14816: LIST
14817: LIST
14818: LIST
14819: LIST
14820: PUSH
14821: EMPTY
14822: LIST
14823: LIST
14824: ST_TO_ADDR
14825: GO 17348
14827: LD_INT 7
14829: DOUBLE
14830: EQUAL
14831: IFTRUE 14835
14833: GO 14947
14835: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
14836: LD_ADDR_VAR 0 2
14840: PUSH
14841: LD_INT 2
14843: PUSH
14844: LD_INT 4
14846: PUSH
14847: LD_INT 5
14849: PUSH
14850: LD_INT 7
14852: PUSH
14853: LD_INT 11
14855: PUSH
14856: LD_INT 12
14858: PUSH
14859: LD_INT 15
14861: PUSH
14862: LD_INT 16
14864: PUSH
14865: LD_INT 20
14867: PUSH
14868: LD_INT 21
14870: PUSH
14871: LD_INT 22
14873: PUSH
14874: LD_INT 23
14876: PUSH
14877: LD_INT 25
14879: PUSH
14880: LD_INT 26
14882: PUSH
14883: EMPTY
14884: LIST
14885: LIST
14886: LIST
14887: LIST
14888: LIST
14889: LIST
14890: LIST
14891: LIST
14892: LIST
14893: LIST
14894: LIST
14895: LIST
14896: LIST
14897: LIST
14898: PUSH
14899: LD_INT 101
14901: PUSH
14902: LD_INT 102
14904: PUSH
14905: LD_INT 103
14907: PUSH
14908: LD_INT 105
14910: PUSH
14911: LD_INT 106
14913: PUSH
14914: LD_INT 108
14916: PUSH
14917: LD_INT 112
14919: PUSH
14920: LD_INT 116
14922: PUSH
14923: LD_INT 117
14925: PUSH
14926: LD_INT 118
14928: PUSH
14929: EMPTY
14930: LIST
14931: LIST
14932: LIST
14933: LIST
14934: LIST
14935: LIST
14936: LIST
14937: LIST
14938: LIST
14939: LIST
14940: PUSH
14941: EMPTY
14942: LIST
14943: LIST
14944: ST_TO_ADDR
14945: GO 17348
14947: LD_INT 8
14949: DOUBLE
14950: EQUAL
14951: IFTRUE 14955
14953: GO 15095
14955: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
14956: LD_ADDR_VAR 0 2
14960: PUSH
14961: LD_INT 2
14963: PUSH
14964: LD_INT 4
14966: PUSH
14967: LD_INT 5
14969: PUSH
14970: LD_INT 6
14972: PUSH
14973: LD_INT 7
14975: PUSH
14976: LD_INT 8
14978: PUSH
14979: LD_INT 11
14981: PUSH
14982: LD_INT 12
14984: PUSH
14985: LD_INT 15
14987: PUSH
14988: LD_INT 16
14990: PUSH
14991: LD_INT 20
14993: PUSH
14994: LD_INT 21
14996: PUSH
14997: LD_INT 22
14999: PUSH
15000: LD_INT 23
15002: PUSH
15003: LD_INT 25
15005: PUSH
15006: LD_INT 26
15008: PUSH
15009: LD_INT 30
15011: PUSH
15012: LD_INT 31
15014: PUSH
15015: LD_INT 32
15017: PUSH
15018: LD_INT 36
15020: PUSH
15021: EMPTY
15022: LIST
15023: LIST
15024: LIST
15025: LIST
15026: LIST
15027: LIST
15028: LIST
15029: LIST
15030: LIST
15031: LIST
15032: LIST
15033: LIST
15034: LIST
15035: LIST
15036: LIST
15037: LIST
15038: LIST
15039: LIST
15040: LIST
15041: LIST
15042: PUSH
15043: LD_INT 101
15045: PUSH
15046: LD_INT 102
15048: PUSH
15049: LD_INT 103
15051: PUSH
15052: LD_INT 105
15054: PUSH
15055: LD_INT 106
15057: PUSH
15058: LD_INT 108
15060: PUSH
15061: LD_INT 109
15063: PUSH
15064: LD_INT 112
15066: PUSH
15067: LD_INT 116
15069: PUSH
15070: LD_INT 117
15072: PUSH
15073: LD_INT 118
15075: PUSH
15076: EMPTY
15077: LIST
15078: LIST
15079: LIST
15080: LIST
15081: LIST
15082: LIST
15083: LIST
15084: LIST
15085: LIST
15086: LIST
15087: LIST
15088: PUSH
15089: EMPTY
15090: LIST
15091: LIST
15092: ST_TO_ADDR
15093: GO 17348
15095: LD_INT 9
15097: DOUBLE
15098: EQUAL
15099: IFTRUE 15103
15101: GO 15251
15103: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
15104: LD_ADDR_VAR 0 2
15108: PUSH
15109: LD_INT 2
15111: PUSH
15112: LD_INT 4
15114: PUSH
15115: LD_INT 5
15117: PUSH
15118: LD_INT 6
15120: PUSH
15121: LD_INT 7
15123: PUSH
15124: LD_INT 8
15126: PUSH
15127: LD_INT 11
15129: PUSH
15130: LD_INT 12
15132: PUSH
15133: LD_INT 15
15135: PUSH
15136: LD_INT 16
15138: PUSH
15139: LD_INT 20
15141: PUSH
15142: LD_INT 21
15144: PUSH
15145: LD_INT 22
15147: PUSH
15148: LD_INT 23
15150: PUSH
15151: LD_INT 25
15153: PUSH
15154: LD_INT 26
15156: PUSH
15157: LD_INT 28
15159: PUSH
15160: LD_INT 30
15162: PUSH
15163: LD_INT 31
15165: PUSH
15166: LD_INT 32
15168: PUSH
15169: LD_INT 36
15171: PUSH
15172: EMPTY
15173: LIST
15174: LIST
15175: LIST
15176: LIST
15177: LIST
15178: LIST
15179: LIST
15180: LIST
15181: LIST
15182: LIST
15183: LIST
15184: LIST
15185: LIST
15186: LIST
15187: LIST
15188: LIST
15189: LIST
15190: LIST
15191: LIST
15192: LIST
15193: LIST
15194: PUSH
15195: LD_INT 101
15197: PUSH
15198: LD_INT 102
15200: PUSH
15201: LD_INT 103
15203: PUSH
15204: LD_INT 105
15206: PUSH
15207: LD_INT 106
15209: PUSH
15210: LD_INT 108
15212: PUSH
15213: LD_INT 109
15215: PUSH
15216: LD_INT 112
15218: PUSH
15219: LD_INT 114
15221: PUSH
15222: LD_INT 116
15224: PUSH
15225: LD_INT 117
15227: PUSH
15228: LD_INT 118
15230: PUSH
15231: EMPTY
15232: LIST
15233: LIST
15234: LIST
15235: LIST
15236: LIST
15237: LIST
15238: LIST
15239: LIST
15240: LIST
15241: LIST
15242: LIST
15243: LIST
15244: PUSH
15245: EMPTY
15246: LIST
15247: LIST
15248: ST_TO_ADDR
15249: GO 17348
15251: LD_INT 10
15253: DOUBLE
15254: EQUAL
15255: IFTRUE 15259
15257: GO 15455
15259: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
15260: LD_ADDR_VAR 0 2
15264: PUSH
15265: LD_INT 2
15267: PUSH
15268: LD_INT 4
15270: PUSH
15271: LD_INT 5
15273: PUSH
15274: LD_INT 6
15276: PUSH
15277: LD_INT 7
15279: PUSH
15280: LD_INT 8
15282: PUSH
15283: LD_INT 9
15285: PUSH
15286: LD_INT 10
15288: PUSH
15289: LD_INT 11
15291: PUSH
15292: LD_INT 12
15294: PUSH
15295: LD_INT 13
15297: PUSH
15298: LD_INT 14
15300: PUSH
15301: LD_INT 15
15303: PUSH
15304: LD_INT 16
15306: PUSH
15307: LD_INT 17
15309: PUSH
15310: LD_INT 18
15312: PUSH
15313: LD_INT 19
15315: PUSH
15316: LD_INT 20
15318: PUSH
15319: LD_INT 21
15321: PUSH
15322: LD_INT 22
15324: PUSH
15325: LD_INT 23
15327: PUSH
15328: LD_INT 24
15330: PUSH
15331: LD_INT 25
15333: PUSH
15334: LD_INT 26
15336: PUSH
15337: LD_INT 28
15339: PUSH
15340: LD_INT 30
15342: PUSH
15343: LD_INT 31
15345: PUSH
15346: LD_INT 32
15348: PUSH
15349: LD_INT 36
15351: PUSH
15352: EMPTY
15353: LIST
15354: LIST
15355: LIST
15356: LIST
15357: LIST
15358: LIST
15359: LIST
15360: LIST
15361: LIST
15362: LIST
15363: LIST
15364: LIST
15365: LIST
15366: LIST
15367: LIST
15368: LIST
15369: LIST
15370: LIST
15371: LIST
15372: LIST
15373: LIST
15374: LIST
15375: LIST
15376: LIST
15377: LIST
15378: LIST
15379: LIST
15380: LIST
15381: LIST
15382: PUSH
15383: LD_INT 101
15385: PUSH
15386: LD_INT 102
15388: PUSH
15389: LD_INT 103
15391: PUSH
15392: LD_INT 104
15394: PUSH
15395: LD_INT 105
15397: PUSH
15398: LD_INT 106
15400: PUSH
15401: LD_INT 107
15403: PUSH
15404: LD_INT 108
15406: PUSH
15407: LD_INT 109
15409: PUSH
15410: LD_INT 110
15412: PUSH
15413: LD_INT 111
15415: PUSH
15416: LD_INT 112
15418: PUSH
15419: LD_INT 114
15421: PUSH
15422: LD_INT 116
15424: PUSH
15425: LD_INT 117
15427: PUSH
15428: LD_INT 118
15430: PUSH
15431: EMPTY
15432: LIST
15433: LIST
15434: LIST
15435: LIST
15436: LIST
15437: LIST
15438: LIST
15439: LIST
15440: LIST
15441: LIST
15442: LIST
15443: LIST
15444: LIST
15445: LIST
15446: LIST
15447: LIST
15448: PUSH
15449: EMPTY
15450: LIST
15451: LIST
15452: ST_TO_ADDR
15453: GO 17348
15455: LD_INT 11
15457: DOUBLE
15458: EQUAL
15459: IFTRUE 15463
15461: GO 15667
15463: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
15464: LD_ADDR_VAR 0 2
15468: PUSH
15469: LD_INT 2
15471: PUSH
15472: LD_INT 3
15474: PUSH
15475: LD_INT 4
15477: PUSH
15478: LD_INT 5
15480: PUSH
15481: LD_INT 6
15483: PUSH
15484: LD_INT 7
15486: PUSH
15487: LD_INT 8
15489: PUSH
15490: LD_INT 9
15492: PUSH
15493: LD_INT 10
15495: PUSH
15496: LD_INT 11
15498: PUSH
15499: LD_INT 12
15501: PUSH
15502: LD_INT 13
15504: PUSH
15505: LD_INT 14
15507: PUSH
15508: LD_INT 15
15510: PUSH
15511: LD_INT 16
15513: PUSH
15514: LD_INT 17
15516: PUSH
15517: LD_INT 18
15519: PUSH
15520: LD_INT 19
15522: PUSH
15523: LD_INT 20
15525: PUSH
15526: LD_INT 21
15528: PUSH
15529: LD_INT 22
15531: PUSH
15532: LD_INT 23
15534: PUSH
15535: LD_INT 24
15537: PUSH
15538: LD_INT 25
15540: PUSH
15541: LD_INT 26
15543: PUSH
15544: LD_INT 28
15546: PUSH
15547: LD_INT 30
15549: PUSH
15550: LD_INT 31
15552: PUSH
15553: LD_INT 32
15555: PUSH
15556: LD_INT 34
15558: PUSH
15559: LD_INT 36
15561: PUSH
15562: EMPTY
15563: LIST
15564: LIST
15565: LIST
15566: LIST
15567: LIST
15568: LIST
15569: LIST
15570: LIST
15571: LIST
15572: LIST
15573: LIST
15574: LIST
15575: LIST
15576: LIST
15577: LIST
15578: LIST
15579: LIST
15580: LIST
15581: LIST
15582: LIST
15583: LIST
15584: LIST
15585: LIST
15586: LIST
15587: LIST
15588: LIST
15589: LIST
15590: LIST
15591: LIST
15592: LIST
15593: LIST
15594: PUSH
15595: LD_INT 101
15597: PUSH
15598: LD_INT 102
15600: PUSH
15601: LD_INT 103
15603: PUSH
15604: LD_INT 104
15606: PUSH
15607: LD_INT 105
15609: PUSH
15610: LD_INT 106
15612: PUSH
15613: LD_INT 107
15615: PUSH
15616: LD_INT 108
15618: PUSH
15619: LD_INT 109
15621: PUSH
15622: LD_INT 110
15624: PUSH
15625: LD_INT 111
15627: PUSH
15628: LD_INT 112
15630: PUSH
15631: LD_INT 114
15633: PUSH
15634: LD_INT 116
15636: PUSH
15637: LD_INT 117
15639: PUSH
15640: LD_INT 118
15642: PUSH
15643: EMPTY
15644: LIST
15645: LIST
15646: LIST
15647: LIST
15648: LIST
15649: LIST
15650: LIST
15651: LIST
15652: LIST
15653: LIST
15654: LIST
15655: LIST
15656: LIST
15657: LIST
15658: LIST
15659: LIST
15660: PUSH
15661: EMPTY
15662: LIST
15663: LIST
15664: ST_TO_ADDR
15665: GO 17348
15667: LD_INT 12
15669: DOUBLE
15670: EQUAL
15671: IFTRUE 15675
15673: GO 15895
15675: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
15676: LD_ADDR_VAR 0 2
15680: PUSH
15681: LD_INT 1
15683: PUSH
15684: LD_INT 2
15686: PUSH
15687: LD_INT 3
15689: PUSH
15690: LD_INT 4
15692: PUSH
15693: LD_INT 5
15695: PUSH
15696: LD_INT 6
15698: PUSH
15699: LD_INT 7
15701: PUSH
15702: LD_INT 8
15704: PUSH
15705: LD_INT 9
15707: PUSH
15708: LD_INT 10
15710: PUSH
15711: LD_INT 11
15713: PUSH
15714: LD_INT 12
15716: PUSH
15717: LD_INT 13
15719: PUSH
15720: LD_INT 14
15722: PUSH
15723: LD_INT 15
15725: PUSH
15726: LD_INT 16
15728: PUSH
15729: LD_INT 17
15731: PUSH
15732: LD_INT 18
15734: PUSH
15735: LD_INT 19
15737: PUSH
15738: LD_INT 20
15740: PUSH
15741: LD_INT 21
15743: PUSH
15744: LD_INT 22
15746: PUSH
15747: LD_INT 23
15749: PUSH
15750: LD_INT 24
15752: PUSH
15753: LD_INT 25
15755: PUSH
15756: LD_INT 26
15758: PUSH
15759: LD_INT 27
15761: PUSH
15762: LD_INT 28
15764: PUSH
15765: LD_INT 30
15767: PUSH
15768: LD_INT 31
15770: PUSH
15771: LD_INT 32
15773: PUSH
15774: LD_INT 33
15776: PUSH
15777: LD_INT 34
15779: PUSH
15780: LD_INT 36
15782: PUSH
15783: EMPTY
15784: LIST
15785: LIST
15786: LIST
15787: LIST
15788: LIST
15789: LIST
15790: LIST
15791: LIST
15792: LIST
15793: LIST
15794: LIST
15795: LIST
15796: LIST
15797: LIST
15798: LIST
15799: LIST
15800: LIST
15801: LIST
15802: LIST
15803: LIST
15804: LIST
15805: LIST
15806: LIST
15807: LIST
15808: LIST
15809: LIST
15810: LIST
15811: LIST
15812: LIST
15813: LIST
15814: LIST
15815: LIST
15816: LIST
15817: LIST
15818: PUSH
15819: LD_INT 101
15821: PUSH
15822: LD_INT 102
15824: PUSH
15825: LD_INT 103
15827: PUSH
15828: LD_INT 104
15830: PUSH
15831: LD_INT 105
15833: PUSH
15834: LD_INT 106
15836: PUSH
15837: LD_INT 107
15839: PUSH
15840: LD_INT 108
15842: PUSH
15843: LD_INT 109
15845: PUSH
15846: LD_INT 110
15848: PUSH
15849: LD_INT 111
15851: PUSH
15852: LD_INT 112
15854: PUSH
15855: LD_INT 113
15857: PUSH
15858: LD_INT 114
15860: PUSH
15861: LD_INT 116
15863: PUSH
15864: LD_INT 117
15866: PUSH
15867: LD_INT 118
15869: PUSH
15870: EMPTY
15871: LIST
15872: LIST
15873: LIST
15874: LIST
15875: LIST
15876: LIST
15877: LIST
15878: LIST
15879: LIST
15880: LIST
15881: LIST
15882: LIST
15883: LIST
15884: LIST
15885: LIST
15886: LIST
15887: LIST
15888: PUSH
15889: EMPTY
15890: LIST
15891: LIST
15892: ST_TO_ADDR
15893: GO 17348
15895: LD_INT 13
15897: DOUBLE
15898: EQUAL
15899: IFTRUE 15903
15901: GO 16111
15903: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
15904: LD_ADDR_VAR 0 2
15908: PUSH
15909: LD_INT 1
15911: PUSH
15912: LD_INT 2
15914: PUSH
15915: LD_INT 3
15917: PUSH
15918: LD_INT 4
15920: PUSH
15921: LD_INT 5
15923: PUSH
15924: LD_INT 8
15926: PUSH
15927: LD_INT 9
15929: PUSH
15930: LD_INT 10
15932: PUSH
15933: LD_INT 11
15935: PUSH
15936: LD_INT 12
15938: PUSH
15939: LD_INT 14
15941: PUSH
15942: LD_INT 15
15944: PUSH
15945: LD_INT 16
15947: PUSH
15948: LD_INT 17
15950: PUSH
15951: LD_INT 18
15953: PUSH
15954: LD_INT 19
15956: PUSH
15957: LD_INT 20
15959: PUSH
15960: LD_INT 21
15962: PUSH
15963: LD_INT 22
15965: PUSH
15966: LD_INT 23
15968: PUSH
15969: LD_INT 24
15971: PUSH
15972: LD_INT 25
15974: PUSH
15975: LD_INT 26
15977: PUSH
15978: LD_INT 27
15980: PUSH
15981: LD_INT 28
15983: PUSH
15984: LD_INT 30
15986: PUSH
15987: LD_INT 31
15989: PUSH
15990: LD_INT 32
15992: PUSH
15993: LD_INT 33
15995: PUSH
15996: LD_INT 34
15998: PUSH
15999: LD_INT 36
16001: PUSH
16002: EMPTY
16003: LIST
16004: LIST
16005: LIST
16006: LIST
16007: LIST
16008: LIST
16009: LIST
16010: LIST
16011: LIST
16012: LIST
16013: LIST
16014: LIST
16015: LIST
16016: LIST
16017: LIST
16018: LIST
16019: LIST
16020: LIST
16021: LIST
16022: LIST
16023: LIST
16024: LIST
16025: LIST
16026: LIST
16027: LIST
16028: LIST
16029: LIST
16030: LIST
16031: LIST
16032: LIST
16033: LIST
16034: PUSH
16035: LD_INT 101
16037: PUSH
16038: LD_INT 102
16040: PUSH
16041: LD_INT 103
16043: PUSH
16044: LD_INT 104
16046: PUSH
16047: LD_INT 105
16049: PUSH
16050: LD_INT 106
16052: PUSH
16053: LD_INT 107
16055: PUSH
16056: LD_INT 108
16058: PUSH
16059: LD_INT 109
16061: PUSH
16062: LD_INT 110
16064: PUSH
16065: LD_INT 111
16067: PUSH
16068: LD_INT 112
16070: PUSH
16071: LD_INT 113
16073: PUSH
16074: LD_INT 114
16076: PUSH
16077: LD_INT 116
16079: PUSH
16080: LD_INT 117
16082: PUSH
16083: LD_INT 118
16085: PUSH
16086: EMPTY
16087: LIST
16088: LIST
16089: LIST
16090: LIST
16091: LIST
16092: LIST
16093: LIST
16094: LIST
16095: LIST
16096: LIST
16097: LIST
16098: LIST
16099: LIST
16100: LIST
16101: LIST
16102: LIST
16103: LIST
16104: PUSH
16105: EMPTY
16106: LIST
16107: LIST
16108: ST_TO_ADDR
16109: GO 17348
16111: LD_INT 14
16113: DOUBLE
16114: EQUAL
16115: IFTRUE 16119
16117: GO 16343
16119: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
16120: LD_ADDR_VAR 0 2
16124: PUSH
16125: LD_INT 1
16127: PUSH
16128: LD_INT 2
16130: PUSH
16131: LD_INT 3
16133: PUSH
16134: LD_INT 4
16136: PUSH
16137: LD_INT 5
16139: PUSH
16140: LD_INT 6
16142: PUSH
16143: LD_INT 7
16145: PUSH
16146: LD_INT 8
16148: PUSH
16149: LD_INT 9
16151: PUSH
16152: LD_INT 10
16154: PUSH
16155: LD_INT 11
16157: PUSH
16158: LD_INT 12
16160: PUSH
16161: LD_INT 13
16163: PUSH
16164: LD_INT 14
16166: PUSH
16167: LD_INT 15
16169: PUSH
16170: LD_INT 16
16172: PUSH
16173: LD_INT 17
16175: PUSH
16176: LD_INT 18
16178: PUSH
16179: LD_INT 19
16181: PUSH
16182: LD_INT 20
16184: PUSH
16185: LD_INT 21
16187: PUSH
16188: LD_INT 22
16190: PUSH
16191: LD_INT 23
16193: PUSH
16194: LD_INT 24
16196: PUSH
16197: LD_INT 25
16199: PUSH
16200: LD_INT 26
16202: PUSH
16203: LD_INT 27
16205: PUSH
16206: LD_INT 28
16208: PUSH
16209: LD_INT 29
16211: PUSH
16212: LD_INT 30
16214: PUSH
16215: LD_INT 31
16217: PUSH
16218: LD_INT 32
16220: PUSH
16221: LD_INT 33
16223: PUSH
16224: LD_INT 34
16226: PUSH
16227: LD_INT 36
16229: PUSH
16230: EMPTY
16231: LIST
16232: LIST
16233: LIST
16234: LIST
16235: LIST
16236: LIST
16237: LIST
16238: LIST
16239: LIST
16240: LIST
16241: LIST
16242: LIST
16243: LIST
16244: LIST
16245: LIST
16246: LIST
16247: LIST
16248: LIST
16249: LIST
16250: LIST
16251: LIST
16252: LIST
16253: LIST
16254: LIST
16255: LIST
16256: LIST
16257: LIST
16258: LIST
16259: LIST
16260: LIST
16261: LIST
16262: LIST
16263: LIST
16264: LIST
16265: LIST
16266: PUSH
16267: LD_INT 101
16269: PUSH
16270: LD_INT 102
16272: PUSH
16273: LD_INT 103
16275: PUSH
16276: LD_INT 104
16278: PUSH
16279: LD_INT 105
16281: PUSH
16282: LD_INT 106
16284: PUSH
16285: LD_INT 107
16287: PUSH
16288: LD_INT 108
16290: PUSH
16291: LD_INT 109
16293: PUSH
16294: LD_INT 110
16296: PUSH
16297: LD_INT 111
16299: PUSH
16300: LD_INT 112
16302: PUSH
16303: LD_INT 113
16305: PUSH
16306: LD_INT 114
16308: PUSH
16309: LD_INT 116
16311: PUSH
16312: LD_INT 117
16314: PUSH
16315: LD_INT 118
16317: PUSH
16318: EMPTY
16319: LIST
16320: LIST
16321: LIST
16322: LIST
16323: LIST
16324: LIST
16325: LIST
16326: LIST
16327: LIST
16328: LIST
16329: LIST
16330: LIST
16331: LIST
16332: LIST
16333: LIST
16334: LIST
16335: LIST
16336: PUSH
16337: EMPTY
16338: LIST
16339: LIST
16340: ST_TO_ADDR
16341: GO 17348
16343: LD_INT 15
16345: DOUBLE
16346: EQUAL
16347: IFTRUE 16351
16349: GO 16575
16351: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
16352: LD_ADDR_VAR 0 2
16356: PUSH
16357: LD_INT 1
16359: PUSH
16360: LD_INT 2
16362: PUSH
16363: LD_INT 3
16365: PUSH
16366: LD_INT 4
16368: PUSH
16369: LD_INT 5
16371: PUSH
16372: LD_INT 6
16374: PUSH
16375: LD_INT 7
16377: PUSH
16378: LD_INT 8
16380: PUSH
16381: LD_INT 9
16383: PUSH
16384: LD_INT 10
16386: PUSH
16387: LD_INT 11
16389: PUSH
16390: LD_INT 12
16392: PUSH
16393: LD_INT 13
16395: PUSH
16396: LD_INT 14
16398: PUSH
16399: LD_INT 15
16401: PUSH
16402: LD_INT 16
16404: PUSH
16405: LD_INT 17
16407: PUSH
16408: LD_INT 18
16410: PUSH
16411: LD_INT 19
16413: PUSH
16414: LD_INT 20
16416: PUSH
16417: LD_INT 21
16419: PUSH
16420: LD_INT 22
16422: PUSH
16423: LD_INT 23
16425: PUSH
16426: LD_INT 24
16428: PUSH
16429: LD_INT 25
16431: PUSH
16432: LD_INT 26
16434: PUSH
16435: LD_INT 27
16437: PUSH
16438: LD_INT 28
16440: PUSH
16441: LD_INT 29
16443: PUSH
16444: LD_INT 30
16446: PUSH
16447: LD_INT 31
16449: PUSH
16450: LD_INT 32
16452: PUSH
16453: LD_INT 33
16455: PUSH
16456: LD_INT 34
16458: PUSH
16459: LD_INT 36
16461: PUSH
16462: EMPTY
16463: LIST
16464: LIST
16465: LIST
16466: LIST
16467: LIST
16468: LIST
16469: LIST
16470: LIST
16471: LIST
16472: LIST
16473: LIST
16474: LIST
16475: LIST
16476: LIST
16477: LIST
16478: LIST
16479: LIST
16480: LIST
16481: LIST
16482: LIST
16483: LIST
16484: LIST
16485: LIST
16486: LIST
16487: LIST
16488: LIST
16489: LIST
16490: LIST
16491: LIST
16492: LIST
16493: LIST
16494: LIST
16495: LIST
16496: LIST
16497: LIST
16498: PUSH
16499: LD_INT 101
16501: PUSH
16502: LD_INT 102
16504: PUSH
16505: LD_INT 103
16507: PUSH
16508: LD_INT 104
16510: PUSH
16511: LD_INT 105
16513: PUSH
16514: LD_INT 106
16516: PUSH
16517: LD_INT 107
16519: PUSH
16520: LD_INT 108
16522: PUSH
16523: LD_INT 109
16525: PUSH
16526: LD_INT 110
16528: PUSH
16529: LD_INT 111
16531: PUSH
16532: LD_INT 112
16534: PUSH
16535: LD_INT 113
16537: PUSH
16538: LD_INT 114
16540: PUSH
16541: LD_INT 116
16543: PUSH
16544: LD_INT 117
16546: PUSH
16547: LD_INT 118
16549: PUSH
16550: EMPTY
16551: LIST
16552: LIST
16553: LIST
16554: LIST
16555: LIST
16556: LIST
16557: LIST
16558: LIST
16559: LIST
16560: LIST
16561: LIST
16562: LIST
16563: LIST
16564: LIST
16565: LIST
16566: LIST
16567: LIST
16568: PUSH
16569: EMPTY
16570: LIST
16571: LIST
16572: ST_TO_ADDR
16573: GO 17348
16575: LD_INT 16
16577: DOUBLE
16578: EQUAL
16579: IFTRUE 16583
16581: GO 16719
16583: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
16584: LD_ADDR_VAR 0 2
16588: PUSH
16589: LD_INT 2
16591: PUSH
16592: LD_INT 4
16594: PUSH
16595: LD_INT 5
16597: PUSH
16598: LD_INT 7
16600: PUSH
16601: LD_INT 11
16603: PUSH
16604: LD_INT 12
16606: PUSH
16607: LD_INT 15
16609: PUSH
16610: LD_INT 16
16612: PUSH
16613: LD_INT 20
16615: PUSH
16616: LD_INT 21
16618: PUSH
16619: LD_INT 22
16621: PUSH
16622: LD_INT 23
16624: PUSH
16625: LD_INT 25
16627: PUSH
16628: LD_INT 26
16630: PUSH
16631: LD_INT 30
16633: PUSH
16634: LD_INT 31
16636: PUSH
16637: LD_INT 32
16639: PUSH
16640: LD_INT 33
16642: PUSH
16643: LD_INT 34
16645: PUSH
16646: EMPTY
16647: LIST
16648: LIST
16649: LIST
16650: LIST
16651: LIST
16652: LIST
16653: LIST
16654: LIST
16655: LIST
16656: LIST
16657: LIST
16658: LIST
16659: LIST
16660: LIST
16661: LIST
16662: LIST
16663: LIST
16664: LIST
16665: LIST
16666: PUSH
16667: LD_INT 101
16669: PUSH
16670: LD_INT 102
16672: PUSH
16673: LD_INT 103
16675: PUSH
16676: LD_INT 106
16678: PUSH
16679: LD_INT 108
16681: PUSH
16682: LD_INT 112
16684: PUSH
16685: LD_INT 113
16687: PUSH
16688: LD_INT 114
16690: PUSH
16691: LD_INT 116
16693: PUSH
16694: LD_INT 117
16696: PUSH
16697: LD_INT 118
16699: PUSH
16700: EMPTY
16701: LIST
16702: LIST
16703: LIST
16704: LIST
16705: LIST
16706: LIST
16707: LIST
16708: LIST
16709: LIST
16710: LIST
16711: LIST
16712: PUSH
16713: EMPTY
16714: LIST
16715: LIST
16716: ST_TO_ADDR
16717: GO 17348
16719: LD_INT 17
16721: DOUBLE
16722: EQUAL
16723: IFTRUE 16727
16725: GO 16951
16727: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
16728: LD_ADDR_VAR 0 2
16732: PUSH
16733: LD_INT 1
16735: PUSH
16736: LD_INT 2
16738: PUSH
16739: LD_INT 3
16741: PUSH
16742: LD_INT 4
16744: PUSH
16745: LD_INT 5
16747: PUSH
16748: LD_INT 6
16750: PUSH
16751: LD_INT 7
16753: PUSH
16754: LD_INT 8
16756: PUSH
16757: LD_INT 9
16759: PUSH
16760: LD_INT 10
16762: PUSH
16763: LD_INT 11
16765: PUSH
16766: LD_INT 12
16768: PUSH
16769: LD_INT 13
16771: PUSH
16772: LD_INT 14
16774: PUSH
16775: LD_INT 15
16777: PUSH
16778: LD_INT 16
16780: PUSH
16781: LD_INT 17
16783: PUSH
16784: LD_INT 18
16786: PUSH
16787: LD_INT 19
16789: PUSH
16790: LD_INT 20
16792: PUSH
16793: LD_INT 21
16795: PUSH
16796: LD_INT 22
16798: PUSH
16799: LD_INT 23
16801: PUSH
16802: LD_INT 24
16804: PUSH
16805: LD_INT 25
16807: PUSH
16808: LD_INT 26
16810: PUSH
16811: LD_INT 27
16813: PUSH
16814: LD_INT 28
16816: PUSH
16817: LD_INT 29
16819: PUSH
16820: LD_INT 30
16822: PUSH
16823: LD_INT 31
16825: PUSH
16826: LD_INT 32
16828: PUSH
16829: LD_INT 33
16831: PUSH
16832: LD_INT 34
16834: PUSH
16835: LD_INT 36
16837: PUSH
16838: EMPTY
16839: LIST
16840: LIST
16841: LIST
16842: LIST
16843: LIST
16844: LIST
16845: LIST
16846: LIST
16847: LIST
16848: LIST
16849: LIST
16850: LIST
16851: LIST
16852: LIST
16853: LIST
16854: LIST
16855: LIST
16856: LIST
16857: LIST
16858: LIST
16859: LIST
16860: LIST
16861: LIST
16862: LIST
16863: LIST
16864: LIST
16865: LIST
16866: LIST
16867: LIST
16868: LIST
16869: LIST
16870: LIST
16871: LIST
16872: LIST
16873: LIST
16874: PUSH
16875: LD_INT 101
16877: PUSH
16878: LD_INT 102
16880: PUSH
16881: LD_INT 103
16883: PUSH
16884: LD_INT 104
16886: PUSH
16887: LD_INT 105
16889: PUSH
16890: LD_INT 106
16892: PUSH
16893: LD_INT 107
16895: PUSH
16896: LD_INT 108
16898: PUSH
16899: LD_INT 109
16901: PUSH
16902: LD_INT 110
16904: PUSH
16905: LD_INT 111
16907: PUSH
16908: LD_INT 112
16910: PUSH
16911: LD_INT 113
16913: PUSH
16914: LD_INT 114
16916: PUSH
16917: LD_INT 116
16919: PUSH
16920: LD_INT 117
16922: PUSH
16923: LD_INT 118
16925: PUSH
16926: EMPTY
16927: LIST
16928: LIST
16929: LIST
16930: LIST
16931: LIST
16932: LIST
16933: LIST
16934: LIST
16935: LIST
16936: LIST
16937: LIST
16938: LIST
16939: LIST
16940: LIST
16941: LIST
16942: LIST
16943: LIST
16944: PUSH
16945: EMPTY
16946: LIST
16947: LIST
16948: ST_TO_ADDR
16949: GO 17348
16951: LD_INT 18
16953: DOUBLE
16954: EQUAL
16955: IFTRUE 16959
16957: GO 17107
16959: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
16960: LD_ADDR_VAR 0 2
16964: PUSH
16965: LD_INT 2
16967: PUSH
16968: LD_INT 4
16970: PUSH
16971: LD_INT 5
16973: PUSH
16974: LD_INT 7
16976: PUSH
16977: LD_INT 11
16979: PUSH
16980: LD_INT 12
16982: PUSH
16983: LD_INT 15
16985: PUSH
16986: LD_INT 16
16988: PUSH
16989: LD_INT 20
16991: PUSH
16992: LD_INT 21
16994: PUSH
16995: LD_INT 22
16997: PUSH
16998: LD_INT 23
17000: PUSH
17001: LD_INT 25
17003: PUSH
17004: LD_INT 26
17006: PUSH
17007: LD_INT 30
17009: PUSH
17010: LD_INT 31
17012: PUSH
17013: LD_INT 32
17015: PUSH
17016: LD_INT 33
17018: PUSH
17019: LD_INT 34
17021: PUSH
17022: LD_INT 35
17024: PUSH
17025: LD_INT 36
17027: PUSH
17028: EMPTY
17029: LIST
17030: LIST
17031: LIST
17032: LIST
17033: LIST
17034: LIST
17035: LIST
17036: LIST
17037: LIST
17038: LIST
17039: LIST
17040: LIST
17041: LIST
17042: LIST
17043: LIST
17044: LIST
17045: LIST
17046: LIST
17047: LIST
17048: LIST
17049: LIST
17050: PUSH
17051: LD_INT 101
17053: PUSH
17054: LD_INT 102
17056: PUSH
17057: LD_INT 103
17059: PUSH
17060: LD_INT 106
17062: PUSH
17063: LD_INT 108
17065: PUSH
17066: LD_INT 112
17068: PUSH
17069: LD_INT 113
17071: PUSH
17072: LD_INT 114
17074: PUSH
17075: LD_INT 115
17077: PUSH
17078: LD_INT 116
17080: PUSH
17081: LD_INT 117
17083: PUSH
17084: LD_INT 118
17086: PUSH
17087: EMPTY
17088: LIST
17089: LIST
17090: LIST
17091: LIST
17092: LIST
17093: LIST
17094: LIST
17095: LIST
17096: LIST
17097: LIST
17098: LIST
17099: LIST
17100: PUSH
17101: EMPTY
17102: LIST
17103: LIST
17104: ST_TO_ADDR
17105: GO 17348
17107: LD_INT 19
17109: DOUBLE
17110: EQUAL
17111: IFTRUE 17115
17113: GO 17347
17115: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
17116: LD_ADDR_VAR 0 2
17120: PUSH
17121: LD_INT 1
17123: PUSH
17124: LD_INT 2
17126: PUSH
17127: LD_INT 3
17129: PUSH
17130: LD_INT 4
17132: PUSH
17133: LD_INT 5
17135: PUSH
17136: LD_INT 6
17138: PUSH
17139: LD_INT 7
17141: PUSH
17142: LD_INT 8
17144: PUSH
17145: LD_INT 9
17147: PUSH
17148: LD_INT 10
17150: PUSH
17151: LD_INT 11
17153: PUSH
17154: LD_INT 12
17156: PUSH
17157: LD_INT 13
17159: PUSH
17160: LD_INT 14
17162: PUSH
17163: LD_INT 15
17165: PUSH
17166: LD_INT 16
17168: PUSH
17169: LD_INT 17
17171: PUSH
17172: LD_INT 18
17174: PUSH
17175: LD_INT 19
17177: PUSH
17178: LD_INT 20
17180: PUSH
17181: LD_INT 21
17183: PUSH
17184: LD_INT 22
17186: PUSH
17187: LD_INT 23
17189: PUSH
17190: LD_INT 24
17192: PUSH
17193: LD_INT 25
17195: PUSH
17196: LD_INT 26
17198: PUSH
17199: LD_INT 27
17201: PUSH
17202: LD_INT 28
17204: PUSH
17205: LD_INT 29
17207: PUSH
17208: LD_INT 30
17210: PUSH
17211: LD_INT 31
17213: PUSH
17214: LD_INT 32
17216: PUSH
17217: LD_INT 33
17219: PUSH
17220: LD_INT 34
17222: PUSH
17223: LD_INT 35
17225: PUSH
17226: LD_INT 36
17228: PUSH
17229: EMPTY
17230: LIST
17231: LIST
17232: LIST
17233: LIST
17234: LIST
17235: LIST
17236: LIST
17237: LIST
17238: LIST
17239: LIST
17240: LIST
17241: LIST
17242: LIST
17243: LIST
17244: LIST
17245: LIST
17246: LIST
17247: LIST
17248: LIST
17249: LIST
17250: LIST
17251: LIST
17252: LIST
17253: LIST
17254: LIST
17255: LIST
17256: LIST
17257: LIST
17258: LIST
17259: LIST
17260: LIST
17261: LIST
17262: LIST
17263: LIST
17264: LIST
17265: LIST
17266: PUSH
17267: LD_INT 101
17269: PUSH
17270: LD_INT 102
17272: PUSH
17273: LD_INT 103
17275: PUSH
17276: LD_INT 104
17278: PUSH
17279: LD_INT 105
17281: PUSH
17282: LD_INT 106
17284: PUSH
17285: LD_INT 107
17287: PUSH
17288: LD_INT 108
17290: PUSH
17291: LD_INT 109
17293: PUSH
17294: LD_INT 110
17296: PUSH
17297: LD_INT 111
17299: PUSH
17300: LD_INT 112
17302: PUSH
17303: LD_INT 113
17305: PUSH
17306: LD_INT 114
17308: PUSH
17309: LD_INT 115
17311: PUSH
17312: LD_INT 116
17314: PUSH
17315: LD_INT 117
17317: PUSH
17318: LD_INT 118
17320: PUSH
17321: EMPTY
17322: LIST
17323: LIST
17324: LIST
17325: LIST
17326: LIST
17327: LIST
17328: LIST
17329: LIST
17330: LIST
17331: LIST
17332: LIST
17333: LIST
17334: LIST
17335: LIST
17336: LIST
17337: LIST
17338: LIST
17339: LIST
17340: PUSH
17341: EMPTY
17342: LIST
17343: LIST
17344: ST_TO_ADDR
17345: GO 17348
17347: POP
// end else
17348: GO 17579
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
17350: LD_ADDR_VAR 0 2
17354: PUSH
17355: LD_INT 1
17357: PUSH
17358: LD_INT 2
17360: PUSH
17361: LD_INT 3
17363: PUSH
17364: LD_INT 4
17366: PUSH
17367: LD_INT 5
17369: PUSH
17370: LD_INT 6
17372: PUSH
17373: LD_INT 7
17375: PUSH
17376: LD_INT 8
17378: PUSH
17379: LD_INT 9
17381: PUSH
17382: LD_INT 10
17384: PUSH
17385: LD_INT 11
17387: PUSH
17388: LD_INT 12
17390: PUSH
17391: LD_INT 13
17393: PUSH
17394: LD_INT 14
17396: PUSH
17397: LD_INT 15
17399: PUSH
17400: LD_INT 16
17402: PUSH
17403: LD_INT 17
17405: PUSH
17406: LD_INT 18
17408: PUSH
17409: LD_INT 19
17411: PUSH
17412: LD_INT 20
17414: PUSH
17415: LD_INT 21
17417: PUSH
17418: LD_INT 22
17420: PUSH
17421: LD_INT 23
17423: PUSH
17424: LD_INT 24
17426: PUSH
17427: LD_INT 25
17429: PUSH
17430: LD_INT 26
17432: PUSH
17433: LD_INT 27
17435: PUSH
17436: LD_INT 28
17438: PUSH
17439: LD_INT 29
17441: PUSH
17442: LD_INT 30
17444: PUSH
17445: LD_INT 31
17447: PUSH
17448: LD_INT 32
17450: PUSH
17451: LD_INT 33
17453: PUSH
17454: LD_INT 34
17456: PUSH
17457: LD_INT 35
17459: PUSH
17460: LD_INT 36
17462: PUSH
17463: EMPTY
17464: LIST
17465: LIST
17466: LIST
17467: LIST
17468: LIST
17469: LIST
17470: LIST
17471: LIST
17472: LIST
17473: LIST
17474: LIST
17475: LIST
17476: LIST
17477: LIST
17478: LIST
17479: LIST
17480: LIST
17481: LIST
17482: LIST
17483: LIST
17484: LIST
17485: LIST
17486: LIST
17487: LIST
17488: LIST
17489: LIST
17490: LIST
17491: LIST
17492: LIST
17493: LIST
17494: LIST
17495: LIST
17496: LIST
17497: LIST
17498: LIST
17499: LIST
17500: PUSH
17501: LD_INT 101
17503: PUSH
17504: LD_INT 102
17506: PUSH
17507: LD_INT 103
17509: PUSH
17510: LD_INT 104
17512: PUSH
17513: LD_INT 105
17515: PUSH
17516: LD_INT 106
17518: PUSH
17519: LD_INT 107
17521: PUSH
17522: LD_INT 108
17524: PUSH
17525: LD_INT 109
17527: PUSH
17528: LD_INT 110
17530: PUSH
17531: LD_INT 111
17533: PUSH
17534: LD_INT 112
17536: PUSH
17537: LD_INT 113
17539: PUSH
17540: LD_INT 114
17542: PUSH
17543: LD_INT 115
17545: PUSH
17546: LD_INT 116
17548: PUSH
17549: LD_INT 117
17551: PUSH
17552: LD_INT 118
17554: PUSH
17555: EMPTY
17556: LIST
17557: LIST
17558: LIST
17559: LIST
17560: LIST
17561: LIST
17562: LIST
17563: LIST
17564: LIST
17565: LIST
17566: LIST
17567: LIST
17568: LIST
17569: LIST
17570: LIST
17571: LIST
17572: LIST
17573: LIST
17574: PUSH
17575: EMPTY
17576: LIST
17577: LIST
17578: ST_TO_ADDR
// if result then
17579: LD_VAR 0 2
17583: IFFALSE 18369
// begin normal :=  ;
17585: LD_ADDR_VAR 0 5
17589: PUSH
17590: LD_STRING 
17592: ST_TO_ADDR
// hardcore :=  ;
17593: LD_ADDR_VAR 0 6
17597: PUSH
17598: LD_STRING 
17600: ST_TO_ADDR
// active :=  ;
17601: LD_ADDR_VAR 0 7
17605: PUSH
17606: LD_STRING 
17608: ST_TO_ADDR
// for i = 1 to normalCounter do
17609: LD_ADDR_VAR 0 8
17613: PUSH
17614: DOUBLE
17615: LD_INT 1
17617: DEC
17618: ST_TO_ADDR
17619: LD_EXP 23
17623: PUSH
17624: FOR_TO
17625: IFFALSE 17726
// begin tmp := 0 ;
17627: LD_ADDR_VAR 0 3
17631: PUSH
17632: LD_STRING 0
17634: ST_TO_ADDR
// if result [ 1 ] then
17635: LD_VAR 0 2
17639: PUSH
17640: LD_INT 1
17642: ARRAY
17643: IFFALSE 17708
// if result [ 1 ] [ 1 ] = i then
17645: LD_VAR 0 2
17649: PUSH
17650: LD_INT 1
17652: ARRAY
17653: PUSH
17654: LD_INT 1
17656: ARRAY
17657: PUSH
17658: LD_VAR 0 8
17662: EQUAL
17663: IFFALSE 17708
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
17665: LD_ADDR_VAR 0 2
17669: PUSH
17670: LD_VAR 0 2
17674: PPUSH
17675: LD_INT 1
17677: PPUSH
17678: LD_VAR 0 2
17682: PUSH
17683: LD_INT 1
17685: ARRAY
17686: PPUSH
17687: LD_INT 1
17689: PPUSH
17690: CALL_OW 3
17694: PPUSH
17695: CALL_OW 1
17699: ST_TO_ADDR
// tmp := 1 ;
17700: LD_ADDR_VAR 0 3
17704: PUSH
17705: LD_STRING 1
17707: ST_TO_ADDR
// end ; normal := normal & tmp ;
17708: LD_ADDR_VAR 0 5
17712: PUSH
17713: LD_VAR 0 5
17717: PUSH
17718: LD_VAR 0 3
17722: STR
17723: ST_TO_ADDR
// end ;
17724: GO 17624
17726: POP
17727: POP
// for i = 1 to hardcoreCounter do
17728: LD_ADDR_VAR 0 8
17732: PUSH
17733: DOUBLE
17734: LD_INT 1
17736: DEC
17737: ST_TO_ADDR
17738: LD_EXP 24
17742: PUSH
17743: FOR_TO
17744: IFFALSE 17849
// begin tmp := 0 ;
17746: LD_ADDR_VAR 0 3
17750: PUSH
17751: LD_STRING 0
17753: ST_TO_ADDR
// if result [ 2 ] then
17754: LD_VAR 0 2
17758: PUSH
17759: LD_INT 2
17761: ARRAY
17762: IFFALSE 17831
// if result [ 2 ] [ 1 ] = 100 + i then
17764: LD_VAR 0 2
17768: PUSH
17769: LD_INT 2
17771: ARRAY
17772: PUSH
17773: LD_INT 1
17775: ARRAY
17776: PUSH
17777: LD_INT 100
17779: PUSH
17780: LD_VAR 0 8
17784: PLUS
17785: EQUAL
17786: IFFALSE 17831
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
17788: LD_ADDR_VAR 0 2
17792: PUSH
17793: LD_VAR 0 2
17797: PPUSH
17798: LD_INT 2
17800: PPUSH
17801: LD_VAR 0 2
17805: PUSH
17806: LD_INT 2
17808: ARRAY
17809: PPUSH
17810: LD_INT 1
17812: PPUSH
17813: CALL_OW 3
17817: PPUSH
17818: CALL_OW 1
17822: ST_TO_ADDR
// tmp := 1 ;
17823: LD_ADDR_VAR 0 3
17827: PUSH
17828: LD_STRING 1
17830: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
17831: LD_ADDR_VAR 0 6
17835: PUSH
17836: LD_VAR 0 6
17840: PUSH
17841: LD_VAR 0 3
17845: STR
17846: ST_TO_ADDR
// end ;
17847: GO 17743
17849: POP
17850: POP
// if isGameLoad then
17851: LD_VAR 0 1
17855: IFFALSE 18330
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
17857: LD_ADDR_VAR 0 4
17861: PUSH
17862: LD_EXP 27
17866: PUSH
17867: LD_EXP 26
17871: PUSH
17872: LD_EXP 28
17876: PUSH
17877: LD_EXP 25
17881: PUSH
17882: LD_EXP 29
17886: PUSH
17887: LD_EXP 30
17891: PUSH
17892: LD_EXP 31
17896: PUSH
17897: LD_EXP 32
17901: PUSH
17902: LD_EXP 33
17906: PUSH
17907: LD_EXP 34
17911: PUSH
17912: LD_EXP 35
17916: PUSH
17917: LD_EXP 36
17921: PUSH
17922: LD_EXP 37
17926: PUSH
17927: LD_EXP 38
17931: PUSH
17932: LD_EXP 46
17936: PUSH
17937: LD_EXP 47
17941: PUSH
17942: LD_EXP 48
17946: PUSH
17947: LD_EXP 49
17951: PUSH
17952: LD_EXP 51
17956: PUSH
17957: LD_EXP 52
17961: PUSH
17962: LD_EXP 53
17966: PUSH
17967: LD_EXP 56
17971: PUSH
17972: LD_EXP 58
17976: PUSH
17977: LD_EXP 59
17981: PUSH
17982: LD_EXP 60
17986: PUSH
17987: LD_EXP 62
17991: PUSH
17992: LD_EXP 63
17996: PUSH
17997: LD_EXP 66
18001: PUSH
18002: LD_EXP 67
18006: PUSH
18007: LD_EXP 68
18011: PUSH
18012: LD_EXP 69
18016: PUSH
18017: LD_EXP 70
18021: PUSH
18022: LD_EXP 71
18026: PUSH
18027: LD_EXP 72
18031: PUSH
18032: LD_EXP 73
18036: PUSH
18037: LD_EXP 74
18041: PUSH
18042: LD_EXP 39
18046: PUSH
18047: LD_EXP 40
18051: PUSH
18052: LD_EXP 43
18056: PUSH
18057: LD_EXP 44
18061: PUSH
18062: LD_EXP 45
18066: PUSH
18067: LD_EXP 41
18071: PUSH
18072: LD_EXP 42
18076: PUSH
18077: LD_EXP 50
18081: PUSH
18082: LD_EXP 54
18086: PUSH
18087: LD_EXP 55
18091: PUSH
18092: LD_EXP 57
18096: PUSH
18097: LD_EXP 61
18101: PUSH
18102: LD_EXP 64
18106: PUSH
18107: LD_EXP 65
18111: PUSH
18112: LD_EXP 75
18116: PUSH
18117: LD_EXP 76
18121: PUSH
18122: LD_EXP 77
18126: PUSH
18127: LD_EXP 78
18131: PUSH
18132: EMPTY
18133: LIST
18134: LIST
18135: LIST
18136: LIST
18137: LIST
18138: LIST
18139: LIST
18140: LIST
18141: LIST
18142: LIST
18143: LIST
18144: LIST
18145: LIST
18146: LIST
18147: LIST
18148: LIST
18149: LIST
18150: LIST
18151: LIST
18152: LIST
18153: LIST
18154: LIST
18155: LIST
18156: LIST
18157: LIST
18158: LIST
18159: LIST
18160: LIST
18161: LIST
18162: LIST
18163: LIST
18164: LIST
18165: LIST
18166: LIST
18167: LIST
18168: LIST
18169: LIST
18170: LIST
18171: LIST
18172: LIST
18173: LIST
18174: LIST
18175: LIST
18176: LIST
18177: LIST
18178: LIST
18179: LIST
18180: LIST
18181: LIST
18182: LIST
18183: LIST
18184: LIST
18185: LIST
18186: LIST
18187: ST_TO_ADDR
// tmp :=  ;
18188: LD_ADDR_VAR 0 3
18192: PUSH
18193: LD_STRING 
18195: ST_TO_ADDR
// for i = 1 to normalCounter do
18196: LD_ADDR_VAR 0 8
18200: PUSH
18201: DOUBLE
18202: LD_INT 1
18204: DEC
18205: ST_TO_ADDR
18206: LD_EXP 23
18210: PUSH
18211: FOR_TO
18212: IFFALSE 18248
// begin if flags [ i ] then
18214: LD_VAR 0 4
18218: PUSH
18219: LD_VAR 0 8
18223: ARRAY
18224: IFFALSE 18246
// tmp := tmp & i & ; ;
18226: LD_ADDR_VAR 0 3
18230: PUSH
18231: LD_VAR 0 3
18235: PUSH
18236: LD_VAR 0 8
18240: STR
18241: PUSH
18242: LD_STRING ;
18244: STR
18245: ST_TO_ADDR
// end ;
18246: GO 18211
18248: POP
18249: POP
// for i = 1 to hardcoreCounter do
18250: LD_ADDR_VAR 0 8
18254: PUSH
18255: DOUBLE
18256: LD_INT 1
18258: DEC
18259: ST_TO_ADDR
18260: LD_EXP 24
18264: PUSH
18265: FOR_TO
18266: IFFALSE 18312
// begin if flags [ normalCounter + i ] then
18268: LD_VAR 0 4
18272: PUSH
18273: LD_EXP 23
18277: PUSH
18278: LD_VAR 0 8
18282: PLUS
18283: ARRAY
18284: IFFALSE 18310
// tmp := tmp & ( 100 + i ) & ; ;
18286: LD_ADDR_VAR 0 3
18290: PUSH
18291: LD_VAR 0 3
18295: PUSH
18296: LD_INT 100
18298: PUSH
18299: LD_VAR 0 8
18303: PLUS
18304: STR
18305: PUSH
18306: LD_STRING ;
18308: STR
18309: ST_TO_ADDR
// end ;
18310: GO 18265
18312: POP
18313: POP
// if tmp then
18314: LD_VAR 0 3
18318: IFFALSE 18330
// active := tmp ;
18320: LD_ADDR_VAR 0 7
18324: PUSH
18325: LD_VAR 0 3
18329: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
18330: LD_STRING getStreamItemsFromMission("
18332: PUSH
18333: LD_VAR 0 5
18337: STR
18338: PUSH
18339: LD_STRING ","
18341: STR
18342: PUSH
18343: LD_VAR 0 6
18347: STR
18348: PUSH
18349: LD_STRING ","
18351: STR
18352: PUSH
18353: LD_VAR 0 7
18357: STR
18358: PUSH
18359: LD_STRING ")
18361: STR
18362: PPUSH
18363: CALL_OW 559
// end else
18367: GO 18376
// ToLua ( getStreamItemsFromMission("","","") ) ;
18369: LD_STRING getStreamItemsFromMission("","","")
18371: PPUSH
18372: CALL_OW 559
// end ;
18376: LD_VAR 0 2
18380: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
18381: LD_EXP 22
18385: PUSH
18386: LD_EXP 27
18390: AND
18391: IFFALSE 18515
18393: GO 18395
18395: DISABLE
18396: LD_INT 0
18398: PPUSH
18399: PPUSH
// begin enable ;
18400: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
18401: LD_ADDR_VAR 0 2
18405: PUSH
18406: LD_INT 22
18408: PUSH
18409: LD_OWVAR 2
18413: PUSH
18414: EMPTY
18415: LIST
18416: LIST
18417: PUSH
18418: LD_INT 2
18420: PUSH
18421: LD_INT 34
18423: PUSH
18424: LD_INT 7
18426: PUSH
18427: EMPTY
18428: LIST
18429: LIST
18430: PUSH
18431: LD_INT 34
18433: PUSH
18434: LD_INT 45
18436: PUSH
18437: EMPTY
18438: LIST
18439: LIST
18440: PUSH
18441: LD_INT 34
18443: PUSH
18444: LD_INT 28
18446: PUSH
18447: EMPTY
18448: LIST
18449: LIST
18450: PUSH
18451: LD_INT 34
18453: PUSH
18454: LD_INT 47
18456: PUSH
18457: EMPTY
18458: LIST
18459: LIST
18460: PUSH
18461: EMPTY
18462: LIST
18463: LIST
18464: LIST
18465: LIST
18466: LIST
18467: PUSH
18468: EMPTY
18469: LIST
18470: LIST
18471: PPUSH
18472: CALL_OW 69
18476: ST_TO_ADDR
// if not tmp then
18477: LD_VAR 0 2
18481: NOT
18482: IFFALSE 18486
// exit ;
18484: GO 18515
// for i in tmp do
18486: LD_ADDR_VAR 0 1
18490: PUSH
18491: LD_VAR 0 2
18495: PUSH
18496: FOR_IN
18497: IFFALSE 18513
// begin SetLives ( i , 0 ) ;
18499: LD_VAR 0 1
18503: PPUSH
18504: LD_INT 0
18506: PPUSH
18507: CALL_OW 234
// end ;
18511: GO 18496
18513: POP
18514: POP
// end ;
18515: PPOPN 2
18517: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
18518: LD_EXP 22
18522: PUSH
18523: LD_EXP 28
18527: AND
18528: IFFALSE 18612
18530: GO 18532
18532: DISABLE
18533: LD_INT 0
18535: PPUSH
18536: PPUSH
// begin enable ;
18537: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
18538: LD_ADDR_VAR 0 2
18542: PUSH
18543: LD_INT 22
18545: PUSH
18546: LD_OWVAR 2
18550: PUSH
18551: EMPTY
18552: LIST
18553: LIST
18554: PUSH
18555: LD_INT 32
18557: PUSH
18558: LD_INT 3
18560: PUSH
18561: EMPTY
18562: LIST
18563: LIST
18564: PUSH
18565: EMPTY
18566: LIST
18567: LIST
18568: PPUSH
18569: CALL_OW 69
18573: ST_TO_ADDR
// if not tmp then
18574: LD_VAR 0 2
18578: NOT
18579: IFFALSE 18583
// exit ;
18581: GO 18612
// for i in tmp do
18583: LD_ADDR_VAR 0 1
18587: PUSH
18588: LD_VAR 0 2
18592: PUSH
18593: FOR_IN
18594: IFFALSE 18610
// begin SetLives ( i , 0 ) ;
18596: LD_VAR 0 1
18600: PPUSH
18601: LD_INT 0
18603: PPUSH
18604: CALL_OW 234
// end ;
18608: GO 18593
18610: POP
18611: POP
// end ;
18612: PPOPN 2
18614: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
18615: LD_EXP 22
18619: PUSH
18620: LD_EXP 25
18624: AND
18625: IFFALSE 18718
18627: GO 18629
18629: DISABLE
18630: LD_INT 0
18632: PPUSH
// begin enable ;
18633: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
18634: LD_ADDR_VAR 0 1
18638: PUSH
18639: LD_INT 22
18641: PUSH
18642: LD_OWVAR 2
18646: PUSH
18647: EMPTY
18648: LIST
18649: LIST
18650: PUSH
18651: LD_INT 2
18653: PUSH
18654: LD_INT 25
18656: PUSH
18657: LD_INT 5
18659: PUSH
18660: EMPTY
18661: LIST
18662: LIST
18663: PUSH
18664: LD_INT 25
18666: PUSH
18667: LD_INT 9
18669: PUSH
18670: EMPTY
18671: LIST
18672: LIST
18673: PUSH
18674: LD_INT 25
18676: PUSH
18677: LD_INT 8
18679: PUSH
18680: EMPTY
18681: LIST
18682: LIST
18683: PUSH
18684: EMPTY
18685: LIST
18686: LIST
18687: LIST
18688: LIST
18689: PUSH
18690: EMPTY
18691: LIST
18692: LIST
18693: PPUSH
18694: CALL_OW 69
18698: PUSH
18699: FOR_IN
18700: IFFALSE 18716
// begin SetClass ( i , 1 ) ;
18702: LD_VAR 0 1
18706: PPUSH
18707: LD_INT 1
18709: PPUSH
18710: CALL_OW 336
// end ;
18714: GO 18699
18716: POP
18717: POP
// end ;
18718: PPOPN 1
18720: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
18721: LD_EXP 22
18725: PUSH
18726: LD_EXP 26
18730: AND
18731: PUSH
18732: LD_OWVAR 65
18736: PUSH
18737: LD_INT 7
18739: LESS
18740: AND
18741: IFFALSE 18755
18743: GO 18745
18745: DISABLE
// begin enable ;
18746: ENABLE
// game_speed := 7 ;
18747: LD_ADDR_OWVAR 65
18751: PUSH
18752: LD_INT 7
18754: ST_TO_ADDR
// end ;
18755: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
18756: LD_EXP 22
18760: PUSH
18761: LD_EXP 29
18765: AND
18766: IFFALSE 18968
18768: GO 18770
18770: DISABLE
18771: LD_INT 0
18773: PPUSH
18774: PPUSH
18775: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
18776: LD_ADDR_VAR 0 3
18780: PUSH
18781: LD_INT 81
18783: PUSH
18784: LD_OWVAR 2
18788: PUSH
18789: EMPTY
18790: LIST
18791: LIST
18792: PUSH
18793: LD_INT 21
18795: PUSH
18796: LD_INT 1
18798: PUSH
18799: EMPTY
18800: LIST
18801: LIST
18802: PUSH
18803: EMPTY
18804: LIST
18805: LIST
18806: PPUSH
18807: CALL_OW 69
18811: ST_TO_ADDR
// if not tmp then
18812: LD_VAR 0 3
18816: NOT
18817: IFFALSE 18821
// exit ;
18819: GO 18968
// if tmp > 5 then
18821: LD_VAR 0 3
18825: PUSH
18826: LD_INT 5
18828: GREATER
18829: IFFALSE 18841
// k := 5 else
18831: LD_ADDR_VAR 0 2
18835: PUSH
18836: LD_INT 5
18838: ST_TO_ADDR
18839: GO 18851
// k := tmp ;
18841: LD_ADDR_VAR 0 2
18845: PUSH
18846: LD_VAR 0 3
18850: ST_TO_ADDR
// for i := 1 to k do
18851: LD_ADDR_VAR 0 1
18855: PUSH
18856: DOUBLE
18857: LD_INT 1
18859: DEC
18860: ST_TO_ADDR
18861: LD_VAR 0 2
18865: PUSH
18866: FOR_TO
18867: IFFALSE 18966
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
18869: LD_VAR 0 3
18873: PUSH
18874: LD_VAR 0 1
18878: ARRAY
18879: PPUSH
18880: LD_VAR 0 1
18884: PUSH
18885: LD_INT 4
18887: MOD
18888: PUSH
18889: LD_INT 1
18891: PLUS
18892: PPUSH
18893: CALL_OW 259
18897: PUSH
18898: LD_INT 10
18900: LESS
18901: IFFALSE 18964
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
18903: LD_VAR 0 3
18907: PUSH
18908: LD_VAR 0 1
18912: ARRAY
18913: PPUSH
18914: LD_VAR 0 1
18918: PUSH
18919: LD_INT 4
18921: MOD
18922: PUSH
18923: LD_INT 1
18925: PLUS
18926: PPUSH
18927: LD_VAR 0 3
18931: PUSH
18932: LD_VAR 0 1
18936: ARRAY
18937: PPUSH
18938: LD_VAR 0 1
18942: PUSH
18943: LD_INT 4
18945: MOD
18946: PUSH
18947: LD_INT 1
18949: PLUS
18950: PPUSH
18951: CALL_OW 259
18955: PUSH
18956: LD_INT 1
18958: PLUS
18959: PPUSH
18960: CALL_OW 237
18964: GO 18866
18966: POP
18967: POP
// end ;
18968: PPOPN 3
18970: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
18971: LD_EXP 22
18975: PUSH
18976: LD_EXP 30
18980: AND
18981: IFFALSE 19001
18983: GO 18985
18985: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
18986: LD_INT 4
18988: PPUSH
18989: LD_OWVAR 2
18993: PPUSH
18994: LD_INT 0
18996: PPUSH
18997: CALL_OW 324
19001: END
// every 0 0$1 trigger StreamModeActive and sShovel do
19002: LD_EXP 22
19006: PUSH
19007: LD_EXP 59
19011: AND
19012: IFFALSE 19032
19014: GO 19016
19016: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
19017: LD_INT 19
19019: PPUSH
19020: LD_OWVAR 2
19024: PPUSH
19025: LD_INT 0
19027: PPUSH
19028: CALL_OW 324
19032: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
19033: LD_EXP 22
19037: PUSH
19038: LD_EXP 31
19042: AND
19043: IFFALSE 19145
19045: GO 19047
19047: DISABLE
19048: LD_INT 0
19050: PPUSH
19051: PPUSH
// begin enable ;
19052: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
19053: LD_ADDR_VAR 0 2
19057: PUSH
19058: LD_INT 22
19060: PUSH
19061: LD_OWVAR 2
19065: PUSH
19066: EMPTY
19067: LIST
19068: LIST
19069: PUSH
19070: LD_INT 2
19072: PUSH
19073: LD_INT 34
19075: PUSH
19076: LD_INT 11
19078: PUSH
19079: EMPTY
19080: LIST
19081: LIST
19082: PUSH
19083: LD_INT 34
19085: PUSH
19086: LD_INT 30
19088: PUSH
19089: EMPTY
19090: LIST
19091: LIST
19092: PUSH
19093: EMPTY
19094: LIST
19095: LIST
19096: LIST
19097: PUSH
19098: EMPTY
19099: LIST
19100: LIST
19101: PPUSH
19102: CALL_OW 69
19106: ST_TO_ADDR
// if not tmp then
19107: LD_VAR 0 2
19111: NOT
19112: IFFALSE 19116
// exit ;
19114: GO 19145
// for i in tmp do
19116: LD_ADDR_VAR 0 1
19120: PUSH
19121: LD_VAR 0 2
19125: PUSH
19126: FOR_IN
19127: IFFALSE 19143
// begin SetLives ( i , 0 ) ;
19129: LD_VAR 0 1
19133: PPUSH
19134: LD_INT 0
19136: PPUSH
19137: CALL_OW 234
// end ;
19141: GO 19126
19143: POP
19144: POP
// end ;
19145: PPOPN 2
19147: END
// every 0 0$1 trigger StreamModeActive and sBunker do
19148: LD_EXP 22
19152: PUSH
19153: LD_EXP 32
19157: AND
19158: IFFALSE 19178
19160: GO 19162
19162: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
19163: LD_INT 32
19165: PPUSH
19166: LD_OWVAR 2
19170: PPUSH
19171: LD_INT 0
19173: PPUSH
19174: CALL_OW 324
19178: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
19179: LD_EXP 22
19183: PUSH
19184: LD_EXP 33
19188: AND
19189: IFFALSE 19370
19191: GO 19193
19193: DISABLE
19194: LD_INT 0
19196: PPUSH
19197: PPUSH
19198: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
19199: LD_ADDR_VAR 0 2
19203: PUSH
19204: LD_INT 22
19206: PUSH
19207: LD_OWVAR 2
19211: PUSH
19212: EMPTY
19213: LIST
19214: LIST
19215: PUSH
19216: LD_INT 33
19218: PUSH
19219: LD_INT 3
19221: PUSH
19222: EMPTY
19223: LIST
19224: LIST
19225: PUSH
19226: EMPTY
19227: LIST
19228: LIST
19229: PPUSH
19230: CALL_OW 69
19234: ST_TO_ADDR
// if not tmp then
19235: LD_VAR 0 2
19239: NOT
19240: IFFALSE 19244
// exit ;
19242: GO 19370
// side := 0 ;
19244: LD_ADDR_VAR 0 3
19248: PUSH
19249: LD_INT 0
19251: ST_TO_ADDR
// for i := 1 to 8 do
19252: LD_ADDR_VAR 0 1
19256: PUSH
19257: DOUBLE
19258: LD_INT 1
19260: DEC
19261: ST_TO_ADDR
19262: LD_INT 8
19264: PUSH
19265: FOR_TO
19266: IFFALSE 19314
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
19268: LD_OWVAR 2
19272: PUSH
19273: LD_VAR 0 1
19277: NONEQUAL
19278: PUSH
19279: LD_OWVAR 2
19283: PPUSH
19284: LD_VAR 0 1
19288: PPUSH
19289: CALL_OW 81
19293: PUSH
19294: LD_INT 2
19296: EQUAL
19297: AND
19298: IFFALSE 19312
// begin side := i ;
19300: LD_ADDR_VAR 0 3
19304: PUSH
19305: LD_VAR 0 1
19309: ST_TO_ADDR
// break ;
19310: GO 19314
// end ;
19312: GO 19265
19314: POP
19315: POP
// if not side then
19316: LD_VAR 0 3
19320: NOT
19321: IFFALSE 19325
// exit ;
19323: GO 19370
// for i := 1 to tmp do
19325: LD_ADDR_VAR 0 1
19329: PUSH
19330: DOUBLE
19331: LD_INT 1
19333: DEC
19334: ST_TO_ADDR
19335: LD_VAR 0 2
19339: PUSH
19340: FOR_TO
19341: IFFALSE 19368
// if Prob ( 60 ) then
19343: LD_INT 60
19345: PPUSH
19346: CALL_OW 13
19350: IFFALSE 19366
// SetSide ( i , side ) ;
19352: LD_VAR 0 1
19356: PPUSH
19357: LD_VAR 0 3
19361: PPUSH
19362: CALL_OW 235
19366: GO 19340
19368: POP
19369: POP
// end ;
19370: PPOPN 3
19372: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
19373: LD_EXP 22
19377: PUSH
19378: LD_EXP 35
19382: AND
19383: IFFALSE 19502
19385: GO 19387
19387: DISABLE
19388: LD_INT 0
19390: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
19391: LD_ADDR_VAR 0 1
19395: PUSH
19396: LD_INT 22
19398: PUSH
19399: LD_OWVAR 2
19403: PUSH
19404: EMPTY
19405: LIST
19406: LIST
19407: PUSH
19408: LD_INT 21
19410: PUSH
19411: LD_INT 1
19413: PUSH
19414: EMPTY
19415: LIST
19416: LIST
19417: PUSH
19418: LD_INT 3
19420: PUSH
19421: LD_INT 23
19423: PUSH
19424: LD_INT 0
19426: PUSH
19427: EMPTY
19428: LIST
19429: LIST
19430: PUSH
19431: EMPTY
19432: LIST
19433: LIST
19434: PUSH
19435: EMPTY
19436: LIST
19437: LIST
19438: LIST
19439: PPUSH
19440: CALL_OW 69
19444: PUSH
19445: FOR_IN
19446: IFFALSE 19500
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
19448: LD_VAR 0 1
19452: PPUSH
19453: CALL_OW 257
19457: PUSH
19458: LD_INT 1
19460: PUSH
19461: LD_INT 2
19463: PUSH
19464: LD_INT 3
19466: PUSH
19467: LD_INT 4
19469: PUSH
19470: EMPTY
19471: LIST
19472: LIST
19473: LIST
19474: LIST
19475: IN
19476: IFFALSE 19498
// SetClass ( un , rand ( 1 , 4 ) ) ;
19478: LD_VAR 0 1
19482: PPUSH
19483: LD_INT 1
19485: PPUSH
19486: LD_INT 4
19488: PPUSH
19489: CALL_OW 12
19493: PPUSH
19494: CALL_OW 336
19498: GO 19445
19500: POP
19501: POP
// end ;
19502: PPOPN 1
19504: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
19505: LD_EXP 22
19509: PUSH
19510: LD_EXP 34
19514: AND
19515: IFFALSE 19594
19517: GO 19519
19519: DISABLE
19520: LD_INT 0
19522: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
19523: LD_ADDR_VAR 0 1
19527: PUSH
19528: LD_INT 22
19530: PUSH
19531: LD_OWVAR 2
19535: PUSH
19536: EMPTY
19537: LIST
19538: LIST
19539: PUSH
19540: LD_INT 21
19542: PUSH
19543: LD_INT 3
19545: PUSH
19546: EMPTY
19547: LIST
19548: LIST
19549: PUSH
19550: EMPTY
19551: LIST
19552: LIST
19553: PPUSH
19554: CALL_OW 69
19558: ST_TO_ADDR
// if not tmp then
19559: LD_VAR 0 1
19563: NOT
19564: IFFALSE 19568
// exit ;
19566: GO 19594
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
19568: LD_VAR 0 1
19572: PUSH
19573: LD_INT 1
19575: PPUSH
19576: LD_VAR 0 1
19580: PPUSH
19581: CALL_OW 12
19585: ARRAY
19586: PPUSH
19587: LD_INT 100
19589: PPUSH
19590: CALL_OW 234
// end ;
19594: PPOPN 1
19596: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
19597: LD_EXP 22
19601: PUSH
19602: LD_EXP 36
19606: AND
19607: IFFALSE 19705
19609: GO 19611
19611: DISABLE
19612: LD_INT 0
19614: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19615: LD_ADDR_VAR 0 1
19619: PUSH
19620: LD_INT 22
19622: PUSH
19623: LD_OWVAR 2
19627: PUSH
19628: EMPTY
19629: LIST
19630: LIST
19631: PUSH
19632: LD_INT 21
19634: PUSH
19635: LD_INT 1
19637: PUSH
19638: EMPTY
19639: LIST
19640: LIST
19641: PUSH
19642: EMPTY
19643: LIST
19644: LIST
19645: PPUSH
19646: CALL_OW 69
19650: ST_TO_ADDR
// if not tmp then
19651: LD_VAR 0 1
19655: NOT
19656: IFFALSE 19660
// exit ;
19658: GO 19705
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
19660: LD_VAR 0 1
19664: PUSH
19665: LD_INT 1
19667: PPUSH
19668: LD_VAR 0 1
19672: PPUSH
19673: CALL_OW 12
19677: ARRAY
19678: PPUSH
19679: LD_INT 1
19681: PPUSH
19682: LD_INT 4
19684: PPUSH
19685: CALL_OW 12
19689: PPUSH
19690: LD_INT 3000
19692: PPUSH
19693: LD_INT 9000
19695: PPUSH
19696: CALL_OW 12
19700: PPUSH
19701: CALL_OW 492
// end ;
19705: PPOPN 1
19707: END
// every 0 0$1 trigger StreamModeActive and sDepot do
19708: LD_EXP 22
19712: PUSH
19713: LD_EXP 37
19717: AND
19718: IFFALSE 19738
19720: GO 19722
19722: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
19723: LD_INT 1
19725: PPUSH
19726: LD_OWVAR 2
19730: PPUSH
19731: LD_INT 0
19733: PPUSH
19734: CALL_OW 324
19738: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
19739: LD_EXP 22
19743: PUSH
19744: LD_EXP 38
19748: AND
19749: IFFALSE 19832
19751: GO 19753
19753: DISABLE
19754: LD_INT 0
19756: PPUSH
19757: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
19758: LD_ADDR_VAR 0 2
19762: PUSH
19763: LD_INT 22
19765: PUSH
19766: LD_OWVAR 2
19770: PUSH
19771: EMPTY
19772: LIST
19773: LIST
19774: PUSH
19775: LD_INT 21
19777: PUSH
19778: LD_INT 3
19780: PUSH
19781: EMPTY
19782: LIST
19783: LIST
19784: PUSH
19785: EMPTY
19786: LIST
19787: LIST
19788: PPUSH
19789: CALL_OW 69
19793: ST_TO_ADDR
// if not tmp then
19794: LD_VAR 0 2
19798: NOT
19799: IFFALSE 19803
// exit ;
19801: GO 19832
// for i in tmp do
19803: LD_ADDR_VAR 0 1
19807: PUSH
19808: LD_VAR 0 2
19812: PUSH
19813: FOR_IN
19814: IFFALSE 19830
// SetBLevel ( i , 10 ) ;
19816: LD_VAR 0 1
19820: PPUSH
19821: LD_INT 10
19823: PPUSH
19824: CALL_OW 241
19828: GO 19813
19830: POP
19831: POP
// end ;
19832: PPOPN 2
19834: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
19835: LD_EXP 22
19839: PUSH
19840: LD_EXP 39
19844: AND
19845: IFFALSE 19956
19847: GO 19849
19849: DISABLE
19850: LD_INT 0
19852: PPUSH
19853: PPUSH
19854: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19855: LD_ADDR_VAR 0 3
19859: PUSH
19860: LD_INT 22
19862: PUSH
19863: LD_OWVAR 2
19867: PUSH
19868: EMPTY
19869: LIST
19870: LIST
19871: PUSH
19872: LD_INT 25
19874: PUSH
19875: LD_INT 1
19877: PUSH
19878: EMPTY
19879: LIST
19880: LIST
19881: PUSH
19882: EMPTY
19883: LIST
19884: LIST
19885: PPUSH
19886: CALL_OW 69
19890: ST_TO_ADDR
// if not tmp then
19891: LD_VAR 0 3
19895: NOT
19896: IFFALSE 19900
// exit ;
19898: GO 19956
// un := tmp [ rand ( 1 , tmp ) ] ;
19900: LD_ADDR_VAR 0 2
19904: PUSH
19905: LD_VAR 0 3
19909: PUSH
19910: LD_INT 1
19912: PPUSH
19913: LD_VAR 0 3
19917: PPUSH
19918: CALL_OW 12
19922: ARRAY
19923: ST_TO_ADDR
// if Crawls ( un ) then
19924: LD_VAR 0 2
19928: PPUSH
19929: CALL_OW 318
19933: IFFALSE 19944
// ComWalk ( un ) ;
19935: LD_VAR 0 2
19939: PPUSH
19940: CALL_OW 138
// SetClass ( un , class_sniper ) ;
19944: LD_VAR 0 2
19948: PPUSH
19949: LD_INT 5
19951: PPUSH
19952: CALL_OW 336
// end ;
19956: PPOPN 3
19958: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
19959: LD_EXP 22
19963: PUSH
19964: LD_EXP 40
19968: AND
19969: PUSH
19970: LD_OWVAR 67
19974: PUSH
19975: LD_INT 4
19977: LESS
19978: AND
19979: IFFALSE 19998
19981: GO 19983
19983: DISABLE
// begin Difficulty := Difficulty + 1 ;
19984: LD_ADDR_OWVAR 67
19988: PUSH
19989: LD_OWVAR 67
19993: PUSH
19994: LD_INT 1
19996: PLUS
19997: ST_TO_ADDR
// end ;
19998: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
19999: LD_EXP 22
20003: PUSH
20004: LD_EXP 41
20008: AND
20009: IFFALSE 20112
20011: GO 20013
20013: DISABLE
20014: LD_INT 0
20016: PPUSH
// begin for i := 1 to 5 do
20017: LD_ADDR_VAR 0 1
20021: PUSH
20022: DOUBLE
20023: LD_INT 1
20025: DEC
20026: ST_TO_ADDR
20027: LD_INT 5
20029: PUSH
20030: FOR_TO
20031: IFFALSE 20110
// begin uc_nation := nation_nature ;
20033: LD_ADDR_OWVAR 21
20037: PUSH
20038: LD_INT 0
20040: ST_TO_ADDR
// uc_side := 0 ;
20041: LD_ADDR_OWVAR 20
20045: PUSH
20046: LD_INT 0
20048: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
20049: LD_ADDR_OWVAR 29
20053: PUSH
20054: LD_INT 12
20056: PUSH
20057: LD_INT 12
20059: PUSH
20060: EMPTY
20061: LIST
20062: LIST
20063: ST_TO_ADDR
// hc_agressivity := 20 ;
20064: LD_ADDR_OWVAR 35
20068: PUSH
20069: LD_INT 20
20071: ST_TO_ADDR
// hc_class := class_tiger ;
20072: LD_ADDR_OWVAR 28
20076: PUSH
20077: LD_INT 14
20079: ST_TO_ADDR
// hc_gallery :=  ;
20080: LD_ADDR_OWVAR 33
20084: PUSH
20085: LD_STRING 
20087: ST_TO_ADDR
// hc_name :=  ;
20088: LD_ADDR_OWVAR 26
20092: PUSH
20093: LD_STRING 
20095: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
20096: CALL_OW 44
20100: PPUSH
20101: LD_INT 0
20103: PPUSH
20104: CALL_OW 51
// end ;
20108: GO 20030
20110: POP
20111: POP
// end ;
20112: PPOPN 1
20114: END
// every 0 0$1 trigger StreamModeActive and sBomb do
20115: LD_EXP 22
20119: PUSH
20120: LD_EXP 42
20124: AND
20125: IFFALSE 20134
20127: GO 20129
20129: DISABLE
// StreamSibBomb ;
20130: CALL 20135 0 0
20134: END
// export function StreamSibBomb ; var i , x , y ; begin
20135: LD_INT 0
20137: PPUSH
20138: PPUSH
20139: PPUSH
20140: PPUSH
// result := false ;
20141: LD_ADDR_VAR 0 1
20145: PUSH
20146: LD_INT 0
20148: ST_TO_ADDR
// for i := 1 to 16 do
20149: LD_ADDR_VAR 0 2
20153: PUSH
20154: DOUBLE
20155: LD_INT 1
20157: DEC
20158: ST_TO_ADDR
20159: LD_INT 16
20161: PUSH
20162: FOR_TO
20163: IFFALSE 20362
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
20165: LD_ADDR_VAR 0 3
20169: PUSH
20170: LD_INT 10
20172: PUSH
20173: LD_INT 20
20175: PUSH
20176: LD_INT 30
20178: PUSH
20179: LD_INT 40
20181: PUSH
20182: LD_INT 50
20184: PUSH
20185: LD_INT 60
20187: PUSH
20188: LD_INT 70
20190: PUSH
20191: LD_INT 80
20193: PUSH
20194: LD_INT 90
20196: PUSH
20197: LD_INT 100
20199: PUSH
20200: LD_INT 110
20202: PUSH
20203: LD_INT 120
20205: PUSH
20206: LD_INT 130
20208: PUSH
20209: LD_INT 140
20211: PUSH
20212: LD_INT 150
20214: PUSH
20215: EMPTY
20216: LIST
20217: LIST
20218: LIST
20219: LIST
20220: LIST
20221: LIST
20222: LIST
20223: LIST
20224: LIST
20225: LIST
20226: LIST
20227: LIST
20228: LIST
20229: LIST
20230: LIST
20231: PUSH
20232: LD_INT 1
20234: PPUSH
20235: LD_INT 15
20237: PPUSH
20238: CALL_OW 12
20242: ARRAY
20243: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
20244: LD_ADDR_VAR 0 4
20248: PUSH
20249: LD_INT 10
20251: PUSH
20252: LD_INT 20
20254: PUSH
20255: LD_INT 30
20257: PUSH
20258: LD_INT 40
20260: PUSH
20261: LD_INT 50
20263: PUSH
20264: LD_INT 60
20266: PUSH
20267: LD_INT 70
20269: PUSH
20270: LD_INT 80
20272: PUSH
20273: LD_INT 90
20275: PUSH
20276: LD_INT 100
20278: PUSH
20279: LD_INT 110
20281: PUSH
20282: LD_INT 120
20284: PUSH
20285: LD_INT 130
20287: PUSH
20288: LD_INT 140
20290: PUSH
20291: LD_INT 150
20293: PUSH
20294: EMPTY
20295: LIST
20296: LIST
20297: LIST
20298: LIST
20299: LIST
20300: LIST
20301: LIST
20302: LIST
20303: LIST
20304: LIST
20305: LIST
20306: LIST
20307: LIST
20308: LIST
20309: LIST
20310: PUSH
20311: LD_INT 1
20313: PPUSH
20314: LD_INT 15
20316: PPUSH
20317: CALL_OW 12
20321: ARRAY
20322: ST_TO_ADDR
// if ValidHex ( x , y ) then
20323: LD_VAR 0 3
20327: PPUSH
20328: LD_VAR 0 4
20332: PPUSH
20333: CALL_OW 488
20337: IFFALSE 20360
// begin result := [ x , y ] ;
20339: LD_ADDR_VAR 0 1
20343: PUSH
20344: LD_VAR 0 3
20348: PUSH
20349: LD_VAR 0 4
20353: PUSH
20354: EMPTY
20355: LIST
20356: LIST
20357: ST_TO_ADDR
// break ;
20358: GO 20362
// end ; end ;
20360: GO 20162
20362: POP
20363: POP
// if result then
20364: LD_VAR 0 1
20368: IFFALSE 20428
// begin ToLua ( playSibBomb() ) ;
20370: LD_STRING playSibBomb()
20372: PPUSH
20373: CALL_OW 559
// wait ( 0 0$14 ) ;
20377: LD_INT 490
20379: PPUSH
20380: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
20384: LD_VAR 0 1
20388: PUSH
20389: LD_INT 1
20391: ARRAY
20392: PPUSH
20393: LD_VAR 0 1
20397: PUSH
20398: LD_INT 2
20400: ARRAY
20401: PPUSH
20402: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
20406: LD_VAR 0 1
20410: PUSH
20411: LD_INT 1
20413: ARRAY
20414: PPUSH
20415: LD_VAR 0 1
20419: PUSH
20420: LD_INT 2
20422: ARRAY
20423: PPUSH
20424: CALL_OW 429
// end ; end ;
20428: LD_VAR 0 1
20432: RET
// every 0 0$1 trigger StreamModeActive and sReset do
20433: LD_EXP 22
20437: PUSH
20438: LD_EXP 44
20442: AND
20443: IFFALSE 20455
20445: GO 20447
20447: DISABLE
// YouLost (  ) ;
20448: LD_STRING 
20450: PPUSH
20451: CALL_OW 104
20455: END
// every 0 0$1 trigger StreamModeActive and sFog do
20456: LD_EXP 22
20460: PUSH
20461: LD_EXP 43
20465: AND
20466: IFFALSE 20480
20468: GO 20470
20470: DISABLE
// FogOff ( your_side ) ;
20471: LD_OWVAR 2
20475: PPUSH
20476: CALL_OW 344
20480: END
// every 0 0$1 trigger StreamModeActive and sSun do
20481: LD_EXP 22
20485: PUSH
20486: LD_EXP 45
20490: AND
20491: IFFALSE 20519
20493: GO 20495
20495: DISABLE
// begin solar_recharge_percent := 0 ;
20496: LD_ADDR_OWVAR 79
20500: PUSH
20501: LD_INT 0
20503: ST_TO_ADDR
// wait ( 5 5$00 ) ;
20504: LD_INT 10500
20506: PPUSH
20507: CALL_OW 67
// solar_recharge_percent := 100 ;
20511: LD_ADDR_OWVAR 79
20515: PUSH
20516: LD_INT 100
20518: ST_TO_ADDR
// end ;
20519: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
20520: LD_EXP 22
20524: PUSH
20525: LD_EXP 46
20529: AND
20530: IFFALSE 20769
20532: GO 20534
20534: DISABLE
20535: LD_INT 0
20537: PPUSH
20538: PPUSH
20539: PPUSH
// begin tmp := [ ] ;
20540: LD_ADDR_VAR 0 3
20544: PUSH
20545: EMPTY
20546: ST_TO_ADDR
// for i := 1 to 6 do
20547: LD_ADDR_VAR 0 1
20551: PUSH
20552: DOUBLE
20553: LD_INT 1
20555: DEC
20556: ST_TO_ADDR
20557: LD_INT 6
20559: PUSH
20560: FOR_TO
20561: IFFALSE 20666
// begin uc_nation := nation_nature ;
20563: LD_ADDR_OWVAR 21
20567: PUSH
20568: LD_INT 0
20570: ST_TO_ADDR
// uc_side := 0 ;
20571: LD_ADDR_OWVAR 20
20575: PUSH
20576: LD_INT 0
20578: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
20579: LD_ADDR_OWVAR 29
20583: PUSH
20584: LD_INT 12
20586: PUSH
20587: LD_INT 12
20589: PUSH
20590: EMPTY
20591: LIST
20592: LIST
20593: ST_TO_ADDR
// hc_agressivity := 20 ;
20594: LD_ADDR_OWVAR 35
20598: PUSH
20599: LD_INT 20
20601: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
20602: LD_ADDR_OWVAR 28
20606: PUSH
20607: LD_INT 17
20609: ST_TO_ADDR
// hc_gallery :=  ;
20610: LD_ADDR_OWVAR 33
20614: PUSH
20615: LD_STRING 
20617: ST_TO_ADDR
// hc_name :=  ;
20618: LD_ADDR_OWVAR 26
20622: PUSH
20623: LD_STRING 
20625: ST_TO_ADDR
// un := CreateHuman ;
20626: LD_ADDR_VAR 0 2
20630: PUSH
20631: CALL_OW 44
20635: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
20636: LD_VAR 0 2
20640: PPUSH
20641: LD_INT 1
20643: PPUSH
20644: CALL_OW 51
// tmp := tmp ^ un ;
20648: LD_ADDR_VAR 0 3
20652: PUSH
20653: LD_VAR 0 3
20657: PUSH
20658: LD_VAR 0 2
20662: ADD
20663: ST_TO_ADDR
// end ;
20664: GO 20560
20666: POP
20667: POP
// repeat wait ( 0 0$1 ) ;
20668: LD_INT 35
20670: PPUSH
20671: CALL_OW 67
// for un in tmp do
20675: LD_ADDR_VAR 0 2
20679: PUSH
20680: LD_VAR 0 3
20684: PUSH
20685: FOR_IN
20686: IFFALSE 20760
// begin if IsDead ( un ) then
20688: LD_VAR 0 2
20692: PPUSH
20693: CALL_OW 301
20697: IFFALSE 20717
// begin tmp := tmp diff un ;
20699: LD_ADDR_VAR 0 3
20703: PUSH
20704: LD_VAR 0 3
20708: PUSH
20709: LD_VAR 0 2
20713: DIFF
20714: ST_TO_ADDR
// continue ;
20715: GO 20685
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
20717: LD_VAR 0 2
20721: PPUSH
20722: LD_INT 3
20724: PUSH
20725: LD_INT 22
20727: PUSH
20728: LD_INT 0
20730: PUSH
20731: EMPTY
20732: LIST
20733: LIST
20734: PUSH
20735: EMPTY
20736: LIST
20737: LIST
20738: PPUSH
20739: CALL_OW 69
20743: PPUSH
20744: LD_VAR 0 2
20748: PPUSH
20749: CALL_OW 74
20753: PPUSH
20754: CALL_OW 115
// end ;
20758: GO 20685
20760: POP
20761: POP
// until not tmp ;
20762: LD_VAR 0 3
20766: NOT
20767: IFFALSE 20668
// end ;
20769: PPOPN 3
20771: END
// every 0 0$1 trigger StreamModeActive and sTroll do
20772: LD_EXP 22
20776: PUSH
20777: LD_EXP 47
20781: AND
20782: IFFALSE 20836
20784: GO 20786
20786: DISABLE
// begin ToLua ( displayTroll(); ) ;
20787: LD_STRING displayTroll();
20789: PPUSH
20790: CALL_OW 559
// wait ( 3 3$00 ) ;
20794: LD_INT 6300
20796: PPUSH
20797: CALL_OW 67
// ToLua ( hideTroll(); ) ;
20801: LD_STRING hideTroll();
20803: PPUSH
20804: CALL_OW 559
// wait ( 1 1$00 ) ;
20808: LD_INT 2100
20810: PPUSH
20811: CALL_OW 67
// ToLua ( displayTroll(); ) ;
20815: LD_STRING displayTroll();
20817: PPUSH
20818: CALL_OW 559
// wait ( 1 1$00 ) ;
20822: LD_INT 2100
20824: PPUSH
20825: CALL_OW 67
// ToLua ( hideTroll(); ) ;
20829: LD_STRING hideTroll();
20831: PPUSH
20832: CALL_OW 559
// end ;
20836: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
20837: LD_EXP 22
20841: PUSH
20842: LD_EXP 48
20846: AND
20847: IFFALSE 20910
20849: GO 20851
20851: DISABLE
20852: LD_INT 0
20854: PPUSH
// begin p := 0 ;
20855: LD_ADDR_VAR 0 1
20859: PUSH
20860: LD_INT 0
20862: ST_TO_ADDR
// repeat game_speed := 1 ;
20863: LD_ADDR_OWVAR 65
20867: PUSH
20868: LD_INT 1
20870: ST_TO_ADDR
// wait ( 0 0$1 ) ;
20871: LD_INT 35
20873: PPUSH
20874: CALL_OW 67
// p := p + 1 ;
20878: LD_ADDR_VAR 0 1
20882: PUSH
20883: LD_VAR 0 1
20887: PUSH
20888: LD_INT 1
20890: PLUS
20891: ST_TO_ADDR
// until p >= 60 ;
20892: LD_VAR 0 1
20896: PUSH
20897: LD_INT 60
20899: GREATEREQUAL
20900: IFFALSE 20863
// game_speed := 4 ;
20902: LD_ADDR_OWVAR 65
20906: PUSH
20907: LD_INT 4
20909: ST_TO_ADDR
// end ;
20910: PPOPN 1
20912: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
20913: LD_EXP 22
20917: PUSH
20918: LD_EXP 49
20922: AND
20923: IFFALSE 21069
20925: GO 20927
20927: DISABLE
20928: LD_INT 0
20930: PPUSH
20931: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20932: LD_ADDR_VAR 0 1
20936: PUSH
20937: LD_INT 22
20939: PUSH
20940: LD_OWVAR 2
20944: PUSH
20945: EMPTY
20946: LIST
20947: LIST
20948: PUSH
20949: LD_INT 2
20951: PUSH
20952: LD_INT 30
20954: PUSH
20955: LD_INT 0
20957: PUSH
20958: EMPTY
20959: LIST
20960: LIST
20961: PUSH
20962: LD_INT 30
20964: PUSH
20965: LD_INT 1
20967: PUSH
20968: EMPTY
20969: LIST
20970: LIST
20971: PUSH
20972: EMPTY
20973: LIST
20974: LIST
20975: LIST
20976: PUSH
20977: EMPTY
20978: LIST
20979: LIST
20980: PPUSH
20981: CALL_OW 69
20985: ST_TO_ADDR
// if not depot then
20986: LD_VAR 0 1
20990: NOT
20991: IFFALSE 20995
// exit ;
20993: GO 21069
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
20995: LD_ADDR_VAR 0 2
20999: PUSH
21000: LD_VAR 0 1
21004: PUSH
21005: LD_INT 1
21007: PPUSH
21008: LD_VAR 0 1
21012: PPUSH
21013: CALL_OW 12
21017: ARRAY
21018: PPUSH
21019: CALL_OW 274
21023: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
21024: LD_VAR 0 2
21028: PPUSH
21029: LD_INT 1
21031: PPUSH
21032: LD_INT 0
21034: PPUSH
21035: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
21039: LD_VAR 0 2
21043: PPUSH
21044: LD_INT 2
21046: PPUSH
21047: LD_INT 0
21049: PPUSH
21050: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
21054: LD_VAR 0 2
21058: PPUSH
21059: LD_INT 3
21061: PPUSH
21062: LD_INT 0
21064: PPUSH
21065: CALL_OW 277
// end ;
21069: PPOPN 2
21071: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
21072: LD_EXP 22
21076: PUSH
21077: LD_EXP 50
21081: AND
21082: IFFALSE 21179
21084: GO 21086
21086: DISABLE
21087: LD_INT 0
21089: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21090: LD_ADDR_VAR 0 1
21094: PUSH
21095: LD_INT 22
21097: PUSH
21098: LD_OWVAR 2
21102: PUSH
21103: EMPTY
21104: LIST
21105: LIST
21106: PUSH
21107: LD_INT 21
21109: PUSH
21110: LD_INT 1
21112: PUSH
21113: EMPTY
21114: LIST
21115: LIST
21116: PUSH
21117: LD_INT 3
21119: PUSH
21120: LD_INT 23
21122: PUSH
21123: LD_INT 0
21125: PUSH
21126: EMPTY
21127: LIST
21128: LIST
21129: PUSH
21130: EMPTY
21131: LIST
21132: LIST
21133: PUSH
21134: EMPTY
21135: LIST
21136: LIST
21137: LIST
21138: PPUSH
21139: CALL_OW 69
21143: ST_TO_ADDR
// if not tmp then
21144: LD_VAR 0 1
21148: NOT
21149: IFFALSE 21153
// exit ;
21151: GO 21179
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
21153: LD_VAR 0 1
21157: PUSH
21158: LD_INT 1
21160: PPUSH
21161: LD_VAR 0 1
21165: PPUSH
21166: CALL_OW 12
21170: ARRAY
21171: PPUSH
21172: LD_INT 200
21174: PPUSH
21175: CALL_OW 234
// end ;
21179: PPOPN 1
21181: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
21182: LD_EXP 22
21186: PUSH
21187: LD_EXP 51
21191: AND
21192: IFFALSE 21271
21194: GO 21196
21196: DISABLE
21197: LD_INT 0
21199: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
21200: LD_ADDR_VAR 0 1
21204: PUSH
21205: LD_INT 22
21207: PUSH
21208: LD_OWVAR 2
21212: PUSH
21213: EMPTY
21214: LIST
21215: LIST
21216: PUSH
21217: LD_INT 21
21219: PUSH
21220: LD_INT 2
21222: PUSH
21223: EMPTY
21224: LIST
21225: LIST
21226: PUSH
21227: EMPTY
21228: LIST
21229: LIST
21230: PPUSH
21231: CALL_OW 69
21235: ST_TO_ADDR
// if not tmp then
21236: LD_VAR 0 1
21240: NOT
21241: IFFALSE 21245
// exit ;
21243: GO 21271
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
21245: LD_VAR 0 1
21249: PUSH
21250: LD_INT 1
21252: PPUSH
21253: LD_VAR 0 1
21257: PPUSH
21258: CALL_OW 12
21262: ARRAY
21263: PPUSH
21264: LD_INT 60
21266: PPUSH
21267: CALL_OW 234
// end ;
21271: PPOPN 1
21273: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
21274: LD_EXP 22
21278: PUSH
21279: LD_EXP 52
21283: AND
21284: IFFALSE 21383
21286: GO 21288
21288: DISABLE
21289: LD_INT 0
21291: PPUSH
21292: PPUSH
// begin enable ;
21293: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
21294: LD_ADDR_VAR 0 1
21298: PUSH
21299: LD_INT 22
21301: PUSH
21302: LD_OWVAR 2
21306: PUSH
21307: EMPTY
21308: LIST
21309: LIST
21310: PUSH
21311: LD_INT 61
21313: PUSH
21314: EMPTY
21315: LIST
21316: PUSH
21317: LD_INT 33
21319: PUSH
21320: LD_INT 2
21322: PUSH
21323: EMPTY
21324: LIST
21325: LIST
21326: PUSH
21327: EMPTY
21328: LIST
21329: LIST
21330: LIST
21331: PPUSH
21332: CALL_OW 69
21336: ST_TO_ADDR
// if not tmp then
21337: LD_VAR 0 1
21341: NOT
21342: IFFALSE 21346
// exit ;
21344: GO 21383
// for i in tmp do
21346: LD_ADDR_VAR 0 2
21350: PUSH
21351: LD_VAR 0 1
21355: PUSH
21356: FOR_IN
21357: IFFALSE 21381
// if IsControledBy ( i ) then
21359: LD_VAR 0 2
21363: PPUSH
21364: CALL_OW 312
21368: IFFALSE 21379
// ComUnlink ( i ) ;
21370: LD_VAR 0 2
21374: PPUSH
21375: CALL_OW 136
21379: GO 21356
21381: POP
21382: POP
// end ;
21383: PPOPN 2
21385: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
21386: LD_EXP 22
21390: PUSH
21391: LD_EXP 53
21395: AND
21396: IFFALSE 21536
21398: GO 21400
21400: DISABLE
21401: LD_INT 0
21403: PPUSH
21404: PPUSH
// begin ToLua ( displayPowell(); ) ;
21405: LD_STRING displayPowell();
21407: PPUSH
21408: CALL_OW 559
// uc_side := 0 ;
21412: LD_ADDR_OWVAR 20
21416: PUSH
21417: LD_INT 0
21419: ST_TO_ADDR
// uc_nation := 2 ;
21420: LD_ADDR_OWVAR 21
21424: PUSH
21425: LD_INT 2
21427: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
21428: LD_ADDR_OWVAR 37
21432: PUSH
21433: LD_INT 14
21435: ST_TO_ADDR
// vc_engine := engine_siberite ;
21436: LD_ADDR_OWVAR 39
21440: PUSH
21441: LD_INT 3
21443: ST_TO_ADDR
// vc_control := control_apeman ;
21444: LD_ADDR_OWVAR 38
21448: PUSH
21449: LD_INT 5
21451: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
21452: LD_ADDR_OWVAR 40
21456: PUSH
21457: LD_INT 29
21459: ST_TO_ADDR
// un := CreateVehicle ;
21460: LD_ADDR_VAR 0 2
21464: PUSH
21465: CALL_OW 45
21469: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21470: LD_VAR 0 2
21474: PPUSH
21475: LD_INT 1
21477: PPUSH
21478: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
21482: LD_INT 35
21484: PPUSH
21485: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
21489: LD_VAR 0 2
21493: PPUSH
21494: LD_INT 22
21496: PUSH
21497: LD_OWVAR 2
21501: PUSH
21502: EMPTY
21503: LIST
21504: LIST
21505: PPUSH
21506: CALL_OW 69
21510: PPUSH
21511: LD_VAR 0 2
21515: PPUSH
21516: CALL_OW 74
21520: PPUSH
21521: CALL_OW 115
// until IsDead ( un ) ;
21525: LD_VAR 0 2
21529: PPUSH
21530: CALL_OW 301
21534: IFFALSE 21482
// end ;
21536: PPOPN 2
21538: END
// every 0 0$1 trigger StreamModeActive and sStu do
21539: LD_EXP 22
21543: PUSH
21544: LD_EXP 61
21548: AND
21549: IFFALSE 21565
21551: GO 21553
21553: DISABLE
// begin ToLua ( displayStucuk(); ) ;
21554: LD_STRING displayStucuk();
21556: PPUSH
21557: CALL_OW 559
// ResetFog ;
21561: CALL_OW 335
// end ;
21565: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
21566: LD_EXP 22
21570: PUSH
21571: LD_EXP 54
21575: AND
21576: IFFALSE 21717
21578: GO 21580
21580: DISABLE
21581: LD_INT 0
21583: PPUSH
21584: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
21585: LD_ADDR_VAR 0 2
21589: PUSH
21590: LD_INT 22
21592: PUSH
21593: LD_OWVAR 2
21597: PUSH
21598: EMPTY
21599: LIST
21600: LIST
21601: PUSH
21602: LD_INT 21
21604: PUSH
21605: LD_INT 1
21607: PUSH
21608: EMPTY
21609: LIST
21610: LIST
21611: PUSH
21612: EMPTY
21613: LIST
21614: LIST
21615: PPUSH
21616: CALL_OW 69
21620: ST_TO_ADDR
// if not tmp then
21621: LD_VAR 0 2
21625: NOT
21626: IFFALSE 21630
// exit ;
21628: GO 21717
// un := tmp [ rand ( 1 , tmp ) ] ;
21630: LD_ADDR_VAR 0 1
21634: PUSH
21635: LD_VAR 0 2
21639: PUSH
21640: LD_INT 1
21642: PPUSH
21643: LD_VAR 0 2
21647: PPUSH
21648: CALL_OW 12
21652: ARRAY
21653: ST_TO_ADDR
// SetSide ( un , 0 ) ;
21654: LD_VAR 0 1
21658: PPUSH
21659: LD_INT 0
21661: PPUSH
21662: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
21666: LD_VAR 0 1
21670: PPUSH
21671: LD_OWVAR 3
21675: PUSH
21676: LD_VAR 0 1
21680: DIFF
21681: PPUSH
21682: LD_VAR 0 1
21686: PPUSH
21687: CALL_OW 74
21691: PPUSH
21692: CALL_OW 115
// wait ( 0 0$20 ) ;
21696: LD_INT 700
21698: PPUSH
21699: CALL_OW 67
// SetSide ( un , your_side ) ;
21703: LD_VAR 0 1
21707: PPUSH
21708: LD_OWVAR 2
21712: PPUSH
21713: CALL_OW 235
// end ;
21717: PPOPN 2
21719: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
21720: LD_EXP 22
21724: PUSH
21725: LD_EXP 55
21729: AND
21730: IFFALSE 21836
21732: GO 21734
21734: DISABLE
21735: LD_INT 0
21737: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21738: LD_ADDR_VAR 0 1
21742: PUSH
21743: LD_INT 22
21745: PUSH
21746: LD_OWVAR 2
21750: PUSH
21751: EMPTY
21752: LIST
21753: LIST
21754: PUSH
21755: LD_INT 2
21757: PUSH
21758: LD_INT 30
21760: PUSH
21761: LD_INT 0
21763: PUSH
21764: EMPTY
21765: LIST
21766: LIST
21767: PUSH
21768: LD_INT 30
21770: PUSH
21771: LD_INT 1
21773: PUSH
21774: EMPTY
21775: LIST
21776: LIST
21777: PUSH
21778: EMPTY
21779: LIST
21780: LIST
21781: LIST
21782: PUSH
21783: EMPTY
21784: LIST
21785: LIST
21786: PPUSH
21787: CALL_OW 69
21791: ST_TO_ADDR
// if not depot then
21792: LD_VAR 0 1
21796: NOT
21797: IFFALSE 21801
// exit ;
21799: GO 21836
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
21801: LD_VAR 0 1
21805: PUSH
21806: LD_INT 1
21808: ARRAY
21809: PPUSH
21810: CALL_OW 250
21814: PPUSH
21815: LD_VAR 0 1
21819: PUSH
21820: LD_INT 1
21822: ARRAY
21823: PPUSH
21824: CALL_OW 251
21828: PPUSH
21829: LD_INT 70
21831: PPUSH
21832: CALL_OW 495
// end ;
21836: PPOPN 1
21838: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
21839: LD_EXP 22
21843: PUSH
21844: LD_EXP 56
21848: AND
21849: IFFALSE 22060
21851: GO 21853
21853: DISABLE
21854: LD_INT 0
21856: PPUSH
21857: PPUSH
21858: PPUSH
21859: PPUSH
21860: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
21861: LD_ADDR_VAR 0 5
21865: PUSH
21866: LD_INT 22
21868: PUSH
21869: LD_OWVAR 2
21873: PUSH
21874: EMPTY
21875: LIST
21876: LIST
21877: PUSH
21878: LD_INT 21
21880: PUSH
21881: LD_INT 1
21883: PUSH
21884: EMPTY
21885: LIST
21886: LIST
21887: PUSH
21888: EMPTY
21889: LIST
21890: LIST
21891: PPUSH
21892: CALL_OW 69
21896: ST_TO_ADDR
// if not tmp then
21897: LD_VAR 0 5
21901: NOT
21902: IFFALSE 21906
// exit ;
21904: GO 22060
// for i in tmp do
21906: LD_ADDR_VAR 0 1
21910: PUSH
21911: LD_VAR 0 5
21915: PUSH
21916: FOR_IN
21917: IFFALSE 22058
// begin d := rand ( 0 , 5 ) ;
21919: LD_ADDR_VAR 0 4
21923: PUSH
21924: LD_INT 0
21926: PPUSH
21927: LD_INT 5
21929: PPUSH
21930: CALL_OW 12
21934: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
21935: LD_ADDR_VAR 0 2
21939: PUSH
21940: LD_VAR 0 1
21944: PPUSH
21945: CALL_OW 250
21949: PPUSH
21950: LD_VAR 0 4
21954: PPUSH
21955: LD_INT 3
21957: PPUSH
21958: LD_INT 12
21960: PPUSH
21961: CALL_OW 12
21965: PPUSH
21966: CALL_OW 272
21970: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
21971: LD_ADDR_VAR 0 3
21975: PUSH
21976: LD_VAR 0 1
21980: PPUSH
21981: CALL_OW 251
21985: PPUSH
21986: LD_VAR 0 4
21990: PPUSH
21991: LD_INT 3
21993: PPUSH
21994: LD_INT 12
21996: PPUSH
21997: CALL_OW 12
22001: PPUSH
22002: CALL_OW 273
22006: ST_TO_ADDR
// if ValidHex ( x , y ) then
22007: LD_VAR 0 2
22011: PPUSH
22012: LD_VAR 0 3
22016: PPUSH
22017: CALL_OW 488
22021: IFFALSE 22056
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
22023: LD_VAR 0 1
22027: PPUSH
22028: LD_VAR 0 2
22032: PPUSH
22033: LD_VAR 0 3
22037: PPUSH
22038: LD_INT 3
22040: PPUSH
22041: LD_INT 6
22043: PPUSH
22044: CALL_OW 12
22048: PPUSH
22049: LD_INT 1
22051: PPUSH
22052: CALL_OW 483
// end ;
22056: GO 21916
22058: POP
22059: POP
// end ;
22060: PPOPN 5
22062: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
22063: LD_EXP 22
22067: PUSH
22068: LD_EXP 57
22072: AND
22073: IFFALSE 22167
22075: GO 22077
22077: DISABLE
22078: LD_INT 0
22080: PPUSH
22081: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
22082: LD_ADDR_VAR 0 2
22086: PUSH
22087: LD_INT 22
22089: PUSH
22090: LD_OWVAR 2
22094: PUSH
22095: EMPTY
22096: LIST
22097: LIST
22098: PUSH
22099: LD_INT 32
22101: PUSH
22102: LD_INT 1
22104: PUSH
22105: EMPTY
22106: LIST
22107: LIST
22108: PUSH
22109: LD_INT 21
22111: PUSH
22112: LD_INT 2
22114: PUSH
22115: EMPTY
22116: LIST
22117: LIST
22118: PUSH
22119: EMPTY
22120: LIST
22121: LIST
22122: LIST
22123: PPUSH
22124: CALL_OW 69
22128: ST_TO_ADDR
// if not tmp then
22129: LD_VAR 0 2
22133: NOT
22134: IFFALSE 22138
// exit ;
22136: GO 22167
// for i in tmp do
22138: LD_ADDR_VAR 0 1
22142: PUSH
22143: LD_VAR 0 2
22147: PUSH
22148: FOR_IN
22149: IFFALSE 22165
// SetFuel ( i , 0 ) ;
22151: LD_VAR 0 1
22155: PPUSH
22156: LD_INT 0
22158: PPUSH
22159: CALL_OW 240
22163: GO 22148
22165: POP
22166: POP
// end ;
22167: PPOPN 2
22169: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
22170: LD_EXP 22
22174: PUSH
22175: LD_EXP 58
22179: AND
22180: IFFALSE 22246
22182: GO 22184
22184: DISABLE
22185: LD_INT 0
22187: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
22188: LD_ADDR_VAR 0 1
22192: PUSH
22193: LD_INT 22
22195: PUSH
22196: LD_OWVAR 2
22200: PUSH
22201: EMPTY
22202: LIST
22203: LIST
22204: PUSH
22205: LD_INT 30
22207: PUSH
22208: LD_INT 29
22210: PUSH
22211: EMPTY
22212: LIST
22213: LIST
22214: PUSH
22215: EMPTY
22216: LIST
22217: LIST
22218: PPUSH
22219: CALL_OW 69
22223: ST_TO_ADDR
// if not tmp then
22224: LD_VAR 0 1
22228: NOT
22229: IFFALSE 22233
// exit ;
22231: GO 22246
// DestroyUnit ( tmp [ 1 ] ) ;
22233: LD_VAR 0 1
22237: PUSH
22238: LD_INT 1
22240: ARRAY
22241: PPUSH
22242: CALL_OW 65
// end ;
22246: PPOPN 1
22248: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
22249: LD_EXP 22
22253: PUSH
22254: LD_EXP 60
22258: AND
22259: IFFALSE 22388
22261: GO 22263
22263: DISABLE
22264: LD_INT 0
22266: PPUSH
// begin uc_side := 0 ;
22267: LD_ADDR_OWVAR 20
22271: PUSH
22272: LD_INT 0
22274: ST_TO_ADDR
// uc_nation := nation_arabian ;
22275: LD_ADDR_OWVAR 21
22279: PUSH
22280: LD_INT 2
22282: ST_TO_ADDR
// hc_gallery :=  ;
22283: LD_ADDR_OWVAR 33
22287: PUSH
22288: LD_STRING 
22290: ST_TO_ADDR
// hc_name :=  ;
22291: LD_ADDR_OWVAR 26
22295: PUSH
22296: LD_STRING 
22298: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
22299: LD_INT 1
22301: PPUSH
22302: LD_INT 11
22304: PPUSH
22305: LD_INT 10
22307: PPUSH
22308: CALL_OW 380
// un := CreateHuman ;
22312: LD_ADDR_VAR 0 1
22316: PUSH
22317: CALL_OW 44
22321: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
22322: LD_VAR 0 1
22326: PPUSH
22327: LD_INT 1
22329: PPUSH
22330: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
22334: LD_INT 35
22336: PPUSH
22337: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
22341: LD_VAR 0 1
22345: PPUSH
22346: LD_INT 22
22348: PUSH
22349: LD_OWVAR 2
22353: PUSH
22354: EMPTY
22355: LIST
22356: LIST
22357: PPUSH
22358: CALL_OW 69
22362: PPUSH
22363: LD_VAR 0 1
22367: PPUSH
22368: CALL_OW 74
22372: PPUSH
22373: CALL_OW 115
// until IsDead ( un ) ;
22377: LD_VAR 0 1
22381: PPUSH
22382: CALL_OW 301
22386: IFFALSE 22334
// end ;
22388: PPOPN 1
22390: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
22391: LD_EXP 22
22395: PUSH
22396: LD_EXP 62
22400: AND
22401: IFFALSE 22413
22403: GO 22405
22405: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
22406: LD_STRING earthquake(getX(game), 0, 32)
22408: PPUSH
22409: CALL_OW 559
22413: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
22414: LD_EXP 22
22418: PUSH
22419: LD_EXP 63
22423: AND
22424: IFFALSE 22515
22426: GO 22428
22428: DISABLE
22429: LD_INT 0
22431: PPUSH
// begin enable ;
22432: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
22433: LD_ADDR_VAR 0 1
22437: PUSH
22438: LD_INT 22
22440: PUSH
22441: LD_OWVAR 2
22445: PUSH
22446: EMPTY
22447: LIST
22448: LIST
22449: PUSH
22450: LD_INT 21
22452: PUSH
22453: LD_INT 2
22455: PUSH
22456: EMPTY
22457: LIST
22458: LIST
22459: PUSH
22460: LD_INT 33
22462: PUSH
22463: LD_INT 3
22465: PUSH
22466: EMPTY
22467: LIST
22468: LIST
22469: PUSH
22470: EMPTY
22471: LIST
22472: LIST
22473: LIST
22474: PPUSH
22475: CALL_OW 69
22479: ST_TO_ADDR
// if not tmp then
22480: LD_VAR 0 1
22484: NOT
22485: IFFALSE 22489
// exit ;
22487: GO 22515
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
22489: LD_VAR 0 1
22493: PUSH
22494: LD_INT 1
22496: PPUSH
22497: LD_VAR 0 1
22501: PPUSH
22502: CALL_OW 12
22506: ARRAY
22507: PPUSH
22508: LD_INT 1
22510: PPUSH
22511: CALL_OW 234
// end ;
22515: PPOPN 1
22517: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
22518: LD_EXP 22
22522: PUSH
22523: LD_EXP 64
22527: AND
22528: IFFALSE 22669
22530: GO 22532
22532: DISABLE
22533: LD_INT 0
22535: PPUSH
22536: PPUSH
22537: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22538: LD_ADDR_VAR 0 3
22542: PUSH
22543: LD_INT 22
22545: PUSH
22546: LD_OWVAR 2
22550: PUSH
22551: EMPTY
22552: LIST
22553: LIST
22554: PUSH
22555: LD_INT 25
22557: PUSH
22558: LD_INT 1
22560: PUSH
22561: EMPTY
22562: LIST
22563: LIST
22564: PUSH
22565: EMPTY
22566: LIST
22567: LIST
22568: PPUSH
22569: CALL_OW 69
22573: ST_TO_ADDR
// if not tmp then
22574: LD_VAR 0 3
22578: NOT
22579: IFFALSE 22583
// exit ;
22581: GO 22669
// un := tmp [ rand ( 1 , tmp ) ] ;
22583: LD_ADDR_VAR 0 2
22587: PUSH
22588: LD_VAR 0 3
22592: PUSH
22593: LD_INT 1
22595: PPUSH
22596: LD_VAR 0 3
22600: PPUSH
22601: CALL_OW 12
22605: ARRAY
22606: ST_TO_ADDR
// if Crawls ( un ) then
22607: LD_VAR 0 2
22611: PPUSH
22612: CALL_OW 318
22616: IFFALSE 22627
// ComWalk ( un ) ;
22618: LD_VAR 0 2
22622: PPUSH
22623: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
22627: LD_VAR 0 2
22631: PPUSH
22632: LD_INT 9
22634: PPUSH
22635: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
22639: LD_INT 28
22641: PPUSH
22642: LD_OWVAR 2
22646: PPUSH
22647: LD_INT 2
22649: PPUSH
22650: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
22654: LD_INT 29
22656: PPUSH
22657: LD_OWVAR 2
22661: PPUSH
22662: LD_INT 2
22664: PPUSH
22665: CALL_OW 322
// end ;
22669: PPOPN 3
22671: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
22672: LD_EXP 22
22676: PUSH
22677: LD_EXP 65
22681: AND
22682: IFFALSE 22793
22684: GO 22686
22686: DISABLE
22687: LD_INT 0
22689: PPUSH
22690: PPUSH
22691: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22692: LD_ADDR_VAR 0 3
22696: PUSH
22697: LD_INT 22
22699: PUSH
22700: LD_OWVAR 2
22704: PUSH
22705: EMPTY
22706: LIST
22707: LIST
22708: PUSH
22709: LD_INT 25
22711: PUSH
22712: LD_INT 1
22714: PUSH
22715: EMPTY
22716: LIST
22717: LIST
22718: PUSH
22719: EMPTY
22720: LIST
22721: LIST
22722: PPUSH
22723: CALL_OW 69
22727: ST_TO_ADDR
// if not tmp then
22728: LD_VAR 0 3
22732: NOT
22733: IFFALSE 22737
// exit ;
22735: GO 22793
// un := tmp [ rand ( 1 , tmp ) ] ;
22737: LD_ADDR_VAR 0 2
22741: PUSH
22742: LD_VAR 0 3
22746: PUSH
22747: LD_INT 1
22749: PPUSH
22750: LD_VAR 0 3
22754: PPUSH
22755: CALL_OW 12
22759: ARRAY
22760: ST_TO_ADDR
// if Crawls ( un ) then
22761: LD_VAR 0 2
22765: PPUSH
22766: CALL_OW 318
22770: IFFALSE 22781
// ComWalk ( un ) ;
22772: LD_VAR 0 2
22776: PPUSH
22777: CALL_OW 138
// SetClass ( un , class_mortar ) ;
22781: LD_VAR 0 2
22785: PPUSH
22786: LD_INT 8
22788: PPUSH
22789: CALL_OW 336
// end ;
22793: PPOPN 3
22795: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
22796: LD_EXP 22
22800: PUSH
22801: LD_EXP 66
22805: AND
22806: IFFALSE 22950
22808: GO 22810
22810: DISABLE
22811: LD_INT 0
22813: PPUSH
22814: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
22815: LD_ADDR_VAR 0 2
22819: PUSH
22820: LD_INT 22
22822: PUSH
22823: LD_OWVAR 2
22827: PUSH
22828: EMPTY
22829: LIST
22830: LIST
22831: PUSH
22832: LD_INT 21
22834: PUSH
22835: LD_INT 2
22837: PUSH
22838: EMPTY
22839: LIST
22840: LIST
22841: PUSH
22842: LD_INT 2
22844: PUSH
22845: LD_INT 34
22847: PUSH
22848: LD_INT 12
22850: PUSH
22851: EMPTY
22852: LIST
22853: LIST
22854: PUSH
22855: LD_INT 34
22857: PUSH
22858: LD_INT 51
22860: PUSH
22861: EMPTY
22862: LIST
22863: LIST
22864: PUSH
22865: LD_INT 34
22867: PUSH
22868: LD_INT 32
22870: PUSH
22871: EMPTY
22872: LIST
22873: LIST
22874: PUSH
22875: EMPTY
22876: LIST
22877: LIST
22878: LIST
22879: LIST
22880: PUSH
22881: EMPTY
22882: LIST
22883: LIST
22884: LIST
22885: PPUSH
22886: CALL_OW 69
22890: ST_TO_ADDR
// if not tmp then
22891: LD_VAR 0 2
22895: NOT
22896: IFFALSE 22900
// exit ;
22898: GO 22950
// for i in tmp do
22900: LD_ADDR_VAR 0 1
22904: PUSH
22905: LD_VAR 0 2
22909: PUSH
22910: FOR_IN
22911: IFFALSE 22948
// if GetCargo ( i , mat_artifact ) = 0 then
22913: LD_VAR 0 1
22917: PPUSH
22918: LD_INT 4
22920: PPUSH
22921: CALL_OW 289
22925: PUSH
22926: LD_INT 0
22928: EQUAL
22929: IFFALSE 22946
// SetCargo ( i , mat_siberit , 100 ) ;
22931: LD_VAR 0 1
22935: PPUSH
22936: LD_INT 3
22938: PPUSH
22939: LD_INT 100
22941: PPUSH
22942: CALL_OW 290
22946: GO 22910
22948: POP
22949: POP
// end ;
22950: PPOPN 2
22952: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
22953: LD_EXP 22
22957: PUSH
22958: LD_EXP 67
22962: AND
22963: IFFALSE 23146
22965: GO 22967
22967: DISABLE
22968: LD_INT 0
22970: PPUSH
22971: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22972: LD_ADDR_VAR 0 2
22976: PUSH
22977: LD_INT 22
22979: PUSH
22980: LD_OWVAR 2
22984: PUSH
22985: EMPTY
22986: LIST
22987: LIST
22988: PPUSH
22989: CALL_OW 69
22993: ST_TO_ADDR
// if not tmp then
22994: LD_VAR 0 2
22998: NOT
22999: IFFALSE 23003
// exit ;
23001: GO 23146
// for i := 1 to 2 do
23003: LD_ADDR_VAR 0 1
23007: PUSH
23008: DOUBLE
23009: LD_INT 1
23011: DEC
23012: ST_TO_ADDR
23013: LD_INT 2
23015: PUSH
23016: FOR_TO
23017: IFFALSE 23144
// begin uc_side := your_side ;
23019: LD_ADDR_OWVAR 20
23023: PUSH
23024: LD_OWVAR 2
23028: ST_TO_ADDR
// uc_nation := nation_american ;
23029: LD_ADDR_OWVAR 21
23033: PUSH
23034: LD_INT 1
23036: ST_TO_ADDR
// vc_chassis := us_morphling ;
23037: LD_ADDR_OWVAR 37
23041: PUSH
23042: LD_INT 5
23044: ST_TO_ADDR
// vc_engine := engine_siberite ;
23045: LD_ADDR_OWVAR 39
23049: PUSH
23050: LD_INT 3
23052: ST_TO_ADDR
// vc_control := control_computer ;
23053: LD_ADDR_OWVAR 38
23057: PUSH
23058: LD_INT 3
23060: ST_TO_ADDR
// vc_weapon := us_double_laser ;
23061: LD_ADDR_OWVAR 40
23065: PUSH
23066: LD_INT 10
23068: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
23069: LD_VAR 0 2
23073: PUSH
23074: LD_INT 1
23076: ARRAY
23077: PPUSH
23078: CALL_OW 310
23082: NOT
23083: IFFALSE 23130
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
23085: CALL_OW 45
23089: PPUSH
23090: LD_VAR 0 2
23094: PUSH
23095: LD_INT 1
23097: ARRAY
23098: PPUSH
23099: CALL_OW 250
23103: PPUSH
23104: LD_VAR 0 2
23108: PUSH
23109: LD_INT 1
23111: ARRAY
23112: PPUSH
23113: CALL_OW 251
23117: PPUSH
23118: LD_INT 12
23120: PPUSH
23121: LD_INT 1
23123: PPUSH
23124: CALL_OW 50
23128: GO 23142
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
23130: CALL_OW 45
23134: PPUSH
23135: LD_INT 1
23137: PPUSH
23138: CALL_OW 51
// end ;
23142: GO 23016
23144: POP
23145: POP
// end ;
23146: PPOPN 2
23148: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
23149: LD_EXP 22
23153: PUSH
23154: LD_EXP 68
23158: AND
23159: IFFALSE 23381
23161: GO 23163
23163: DISABLE
23164: LD_INT 0
23166: PPUSH
23167: PPUSH
23168: PPUSH
23169: PPUSH
23170: PPUSH
23171: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
23172: LD_ADDR_VAR 0 6
23176: PUSH
23177: LD_INT 22
23179: PUSH
23180: LD_OWVAR 2
23184: PUSH
23185: EMPTY
23186: LIST
23187: LIST
23188: PUSH
23189: LD_INT 21
23191: PUSH
23192: LD_INT 1
23194: PUSH
23195: EMPTY
23196: LIST
23197: LIST
23198: PUSH
23199: LD_INT 3
23201: PUSH
23202: LD_INT 23
23204: PUSH
23205: LD_INT 0
23207: PUSH
23208: EMPTY
23209: LIST
23210: LIST
23211: PUSH
23212: EMPTY
23213: LIST
23214: LIST
23215: PUSH
23216: EMPTY
23217: LIST
23218: LIST
23219: LIST
23220: PPUSH
23221: CALL_OW 69
23225: ST_TO_ADDR
// if not tmp then
23226: LD_VAR 0 6
23230: NOT
23231: IFFALSE 23235
// exit ;
23233: GO 23381
// s1 := rand ( 1 , 4 ) ;
23235: LD_ADDR_VAR 0 2
23239: PUSH
23240: LD_INT 1
23242: PPUSH
23243: LD_INT 4
23245: PPUSH
23246: CALL_OW 12
23250: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
23251: LD_ADDR_VAR 0 4
23255: PUSH
23256: LD_VAR 0 6
23260: PUSH
23261: LD_INT 1
23263: ARRAY
23264: PPUSH
23265: LD_VAR 0 2
23269: PPUSH
23270: CALL_OW 259
23274: ST_TO_ADDR
// if s1 = 1 then
23275: LD_VAR 0 2
23279: PUSH
23280: LD_INT 1
23282: EQUAL
23283: IFFALSE 23303
// s2 := rand ( 2 , 4 ) else
23285: LD_ADDR_VAR 0 3
23289: PUSH
23290: LD_INT 2
23292: PPUSH
23293: LD_INT 4
23295: PPUSH
23296: CALL_OW 12
23300: ST_TO_ADDR
23301: GO 23311
// s2 := 1 ;
23303: LD_ADDR_VAR 0 3
23307: PUSH
23308: LD_INT 1
23310: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
23311: LD_ADDR_VAR 0 5
23315: PUSH
23316: LD_VAR 0 6
23320: PUSH
23321: LD_INT 1
23323: ARRAY
23324: PPUSH
23325: LD_VAR 0 3
23329: PPUSH
23330: CALL_OW 259
23334: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
23335: LD_VAR 0 6
23339: PUSH
23340: LD_INT 1
23342: ARRAY
23343: PPUSH
23344: LD_VAR 0 2
23348: PPUSH
23349: LD_VAR 0 5
23353: PPUSH
23354: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
23358: LD_VAR 0 6
23362: PUSH
23363: LD_INT 1
23365: ARRAY
23366: PPUSH
23367: LD_VAR 0 3
23371: PPUSH
23372: LD_VAR 0 4
23376: PPUSH
23377: CALL_OW 237
// end ;
23381: PPOPN 6
23383: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
23384: LD_EXP 22
23388: PUSH
23389: LD_EXP 69
23393: AND
23394: IFFALSE 23473
23396: GO 23398
23398: DISABLE
23399: LD_INT 0
23401: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
23402: LD_ADDR_VAR 0 1
23406: PUSH
23407: LD_INT 22
23409: PUSH
23410: LD_OWVAR 2
23414: PUSH
23415: EMPTY
23416: LIST
23417: LIST
23418: PUSH
23419: LD_INT 30
23421: PUSH
23422: LD_INT 3
23424: PUSH
23425: EMPTY
23426: LIST
23427: LIST
23428: PUSH
23429: EMPTY
23430: LIST
23431: LIST
23432: PPUSH
23433: CALL_OW 69
23437: ST_TO_ADDR
// if not tmp then
23438: LD_VAR 0 1
23442: NOT
23443: IFFALSE 23447
// exit ;
23445: GO 23473
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
23447: LD_VAR 0 1
23451: PUSH
23452: LD_INT 1
23454: PPUSH
23455: LD_VAR 0 1
23459: PPUSH
23460: CALL_OW 12
23464: ARRAY
23465: PPUSH
23466: LD_INT 1
23468: PPUSH
23469: CALL_OW 234
// end ;
23473: PPOPN 1
23475: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
23476: LD_EXP 22
23480: PUSH
23481: LD_EXP 70
23485: AND
23486: IFFALSE 23598
23488: GO 23490
23490: DISABLE
23491: LD_INT 0
23493: PPUSH
23494: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
23495: LD_ADDR_VAR 0 2
23499: PUSH
23500: LD_INT 22
23502: PUSH
23503: LD_OWVAR 2
23507: PUSH
23508: EMPTY
23509: LIST
23510: LIST
23511: PUSH
23512: LD_INT 2
23514: PUSH
23515: LD_INT 30
23517: PUSH
23518: LD_INT 27
23520: PUSH
23521: EMPTY
23522: LIST
23523: LIST
23524: PUSH
23525: LD_INT 30
23527: PUSH
23528: LD_INT 26
23530: PUSH
23531: EMPTY
23532: LIST
23533: LIST
23534: PUSH
23535: LD_INT 30
23537: PUSH
23538: LD_INT 28
23540: PUSH
23541: EMPTY
23542: LIST
23543: LIST
23544: PUSH
23545: EMPTY
23546: LIST
23547: LIST
23548: LIST
23549: LIST
23550: PUSH
23551: EMPTY
23552: LIST
23553: LIST
23554: PPUSH
23555: CALL_OW 69
23559: ST_TO_ADDR
// if not tmp then
23560: LD_VAR 0 2
23564: NOT
23565: IFFALSE 23569
// exit ;
23567: GO 23598
// for i in tmp do
23569: LD_ADDR_VAR 0 1
23573: PUSH
23574: LD_VAR 0 2
23578: PUSH
23579: FOR_IN
23580: IFFALSE 23596
// SetLives ( i , 1 ) ;
23582: LD_VAR 0 1
23586: PPUSH
23587: LD_INT 1
23589: PPUSH
23590: CALL_OW 234
23594: GO 23579
23596: POP
23597: POP
// end ;
23598: PPOPN 2
23600: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
23601: LD_EXP 22
23605: PUSH
23606: LD_EXP 71
23610: AND
23611: IFFALSE 23898
23613: GO 23615
23615: DISABLE
23616: LD_INT 0
23618: PPUSH
23619: PPUSH
23620: PPUSH
// begin i := rand ( 1 , 7 ) ;
23621: LD_ADDR_VAR 0 1
23625: PUSH
23626: LD_INT 1
23628: PPUSH
23629: LD_INT 7
23631: PPUSH
23632: CALL_OW 12
23636: ST_TO_ADDR
// case i of 1 :
23637: LD_VAR 0 1
23641: PUSH
23642: LD_INT 1
23644: DOUBLE
23645: EQUAL
23646: IFTRUE 23650
23648: GO 23660
23650: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
23651: LD_STRING earthquake(getX(game), 0, 32)
23653: PPUSH
23654: CALL_OW 559
23658: GO 23898
23660: LD_INT 2
23662: DOUBLE
23663: EQUAL
23664: IFTRUE 23668
23666: GO 23682
23668: POP
// begin ToLua ( displayStucuk(); ) ;
23669: LD_STRING displayStucuk();
23671: PPUSH
23672: CALL_OW 559
// ResetFog ;
23676: CALL_OW 335
// end ; 3 :
23680: GO 23898
23682: LD_INT 3
23684: DOUBLE
23685: EQUAL
23686: IFTRUE 23690
23688: GO 23794
23690: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
23691: LD_ADDR_VAR 0 2
23695: PUSH
23696: LD_INT 22
23698: PUSH
23699: LD_OWVAR 2
23703: PUSH
23704: EMPTY
23705: LIST
23706: LIST
23707: PUSH
23708: LD_INT 25
23710: PUSH
23711: LD_INT 1
23713: PUSH
23714: EMPTY
23715: LIST
23716: LIST
23717: PUSH
23718: EMPTY
23719: LIST
23720: LIST
23721: PPUSH
23722: CALL_OW 69
23726: ST_TO_ADDR
// if not tmp then
23727: LD_VAR 0 2
23731: NOT
23732: IFFALSE 23736
// exit ;
23734: GO 23898
// un := tmp [ rand ( 1 , tmp ) ] ;
23736: LD_ADDR_VAR 0 3
23740: PUSH
23741: LD_VAR 0 2
23745: PUSH
23746: LD_INT 1
23748: PPUSH
23749: LD_VAR 0 2
23753: PPUSH
23754: CALL_OW 12
23758: ARRAY
23759: ST_TO_ADDR
// if Crawls ( un ) then
23760: LD_VAR 0 3
23764: PPUSH
23765: CALL_OW 318
23769: IFFALSE 23780
// ComWalk ( un ) ;
23771: LD_VAR 0 3
23775: PPUSH
23776: CALL_OW 138
// SetClass ( un , class_mortar ) ;
23780: LD_VAR 0 3
23784: PPUSH
23785: LD_INT 8
23787: PPUSH
23788: CALL_OW 336
// end ; 4 :
23792: GO 23898
23794: LD_INT 4
23796: DOUBLE
23797: EQUAL
23798: IFTRUE 23802
23800: GO 23876
23802: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
23803: LD_ADDR_VAR 0 2
23807: PUSH
23808: LD_INT 22
23810: PUSH
23811: LD_OWVAR 2
23815: PUSH
23816: EMPTY
23817: LIST
23818: LIST
23819: PUSH
23820: LD_INT 30
23822: PUSH
23823: LD_INT 29
23825: PUSH
23826: EMPTY
23827: LIST
23828: LIST
23829: PUSH
23830: EMPTY
23831: LIST
23832: LIST
23833: PPUSH
23834: CALL_OW 69
23838: ST_TO_ADDR
// if not tmp then
23839: LD_VAR 0 2
23843: NOT
23844: IFFALSE 23848
// exit ;
23846: GO 23898
// CenterNowOnUnits ( tmp [ 1 ] ) ;
23848: LD_VAR 0 2
23852: PUSH
23853: LD_INT 1
23855: ARRAY
23856: PPUSH
23857: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
23861: LD_VAR 0 2
23865: PUSH
23866: LD_INT 1
23868: ARRAY
23869: PPUSH
23870: CALL_OW 65
// end ; 5 .. 7 :
23874: GO 23898
23876: LD_INT 5
23878: DOUBLE
23879: GREATEREQUAL
23880: IFFALSE 23888
23882: LD_INT 7
23884: DOUBLE
23885: LESSEQUAL
23886: IFTRUE 23890
23888: GO 23897
23890: POP
// StreamSibBomb ; end ;
23891: CALL 20135 0 0
23895: GO 23898
23897: POP
// end ;
23898: PPOPN 3
23900: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
23901: LD_EXP 22
23905: PUSH
23906: LD_EXP 72
23910: AND
23911: IFFALSE 24067
23913: GO 23915
23915: DISABLE
23916: LD_INT 0
23918: PPUSH
23919: PPUSH
23920: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
23921: LD_ADDR_VAR 0 2
23925: PUSH
23926: LD_INT 81
23928: PUSH
23929: LD_OWVAR 2
23933: PUSH
23934: EMPTY
23935: LIST
23936: LIST
23937: PUSH
23938: LD_INT 2
23940: PUSH
23941: LD_INT 21
23943: PUSH
23944: LD_INT 1
23946: PUSH
23947: EMPTY
23948: LIST
23949: LIST
23950: PUSH
23951: LD_INT 21
23953: PUSH
23954: LD_INT 2
23956: PUSH
23957: EMPTY
23958: LIST
23959: LIST
23960: PUSH
23961: EMPTY
23962: LIST
23963: LIST
23964: LIST
23965: PUSH
23966: EMPTY
23967: LIST
23968: LIST
23969: PPUSH
23970: CALL_OW 69
23974: ST_TO_ADDR
// if not tmp then
23975: LD_VAR 0 2
23979: NOT
23980: IFFALSE 23984
// exit ;
23982: GO 24067
// p := 0 ;
23984: LD_ADDR_VAR 0 3
23988: PUSH
23989: LD_INT 0
23991: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23992: LD_INT 35
23994: PPUSH
23995: CALL_OW 67
// p := p + 1 ;
23999: LD_ADDR_VAR 0 3
24003: PUSH
24004: LD_VAR 0 3
24008: PUSH
24009: LD_INT 1
24011: PLUS
24012: ST_TO_ADDR
// for i in tmp do
24013: LD_ADDR_VAR 0 1
24017: PUSH
24018: LD_VAR 0 2
24022: PUSH
24023: FOR_IN
24024: IFFALSE 24055
// if GetLives ( i ) < 1000 then
24026: LD_VAR 0 1
24030: PPUSH
24031: CALL_OW 256
24035: PUSH
24036: LD_INT 1000
24038: LESS
24039: IFFALSE 24053
// SetLives ( i , 1000 ) ;
24041: LD_VAR 0 1
24045: PPUSH
24046: LD_INT 1000
24048: PPUSH
24049: CALL_OW 234
24053: GO 24023
24055: POP
24056: POP
// until p > 20 ;
24057: LD_VAR 0 3
24061: PUSH
24062: LD_INT 20
24064: GREATER
24065: IFFALSE 23992
// end ;
24067: PPOPN 3
24069: END
// every 0 0$1 trigger StreamModeActive and sTime do
24070: LD_EXP 22
24074: PUSH
24075: LD_EXP 73
24079: AND
24080: IFFALSE 24115
24082: GO 24084
24084: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
24085: LD_INT 28
24087: PPUSH
24088: LD_OWVAR 2
24092: PPUSH
24093: LD_INT 2
24095: PPUSH
24096: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
24100: LD_INT 30
24102: PPUSH
24103: LD_OWVAR 2
24107: PPUSH
24108: LD_INT 2
24110: PPUSH
24111: CALL_OW 322
// end ;
24115: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
24116: LD_EXP 22
24120: PUSH
24121: LD_EXP 74
24125: AND
24126: IFFALSE 24247
24128: GO 24130
24130: DISABLE
24131: LD_INT 0
24133: PPUSH
24134: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
24135: LD_ADDR_VAR 0 2
24139: PUSH
24140: LD_INT 22
24142: PUSH
24143: LD_OWVAR 2
24147: PUSH
24148: EMPTY
24149: LIST
24150: LIST
24151: PUSH
24152: LD_INT 21
24154: PUSH
24155: LD_INT 1
24157: PUSH
24158: EMPTY
24159: LIST
24160: LIST
24161: PUSH
24162: LD_INT 3
24164: PUSH
24165: LD_INT 23
24167: PUSH
24168: LD_INT 0
24170: PUSH
24171: EMPTY
24172: LIST
24173: LIST
24174: PUSH
24175: EMPTY
24176: LIST
24177: LIST
24178: PUSH
24179: EMPTY
24180: LIST
24181: LIST
24182: LIST
24183: PPUSH
24184: CALL_OW 69
24188: ST_TO_ADDR
// if not tmp then
24189: LD_VAR 0 2
24193: NOT
24194: IFFALSE 24198
// exit ;
24196: GO 24247
// for i in tmp do
24198: LD_ADDR_VAR 0 1
24202: PUSH
24203: LD_VAR 0 2
24207: PUSH
24208: FOR_IN
24209: IFFALSE 24245
// begin if Crawls ( i ) then
24211: LD_VAR 0 1
24215: PPUSH
24216: CALL_OW 318
24220: IFFALSE 24231
// ComWalk ( i ) ;
24222: LD_VAR 0 1
24226: PPUSH
24227: CALL_OW 138
// SetClass ( i , 2 ) ;
24231: LD_VAR 0 1
24235: PPUSH
24236: LD_INT 2
24238: PPUSH
24239: CALL_OW 336
// end ;
24243: GO 24208
24245: POP
24246: POP
// end ;
24247: PPOPN 2
24249: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
24250: LD_EXP 22
24254: PUSH
24255: LD_EXP 75
24259: AND
24260: IFFALSE 24548
24262: GO 24264
24264: DISABLE
24265: LD_INT 0
24267: PPUSH
24268: PPUSH
24269: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
24270: LD_OWVAR 2
24274: PPUSH
24275: LD_INT 9
24277: PPUSH
24278: LD_INT 1
24280: PPUSH
24281: LD_INT 1
24283: PPUSH
24284: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
24288: LD_INT 9
24290: PPUSH
24291: LD_OWVAR 2
24295: PPUSH
24296: CALL_OW 343
// uc_side := 9 ;
24300: LD_ADDR_OWVAR 20
24304: PUSH
24305: LD_INT 9
24307: ST_TO_ADDR
// uc_nation := 2 ;
24308: LD_ADDR_OWVAR 21
24312: PUSH
24313: LD_INT 2
24315: ST_TO_ADDR
// hc_name := Dark Warrior ;
24316: LD_ADDR_OWVAR 26
24320: PUSH
24321: LD_STRING Dark Warrior
24323: ST_TO_ADDR
// hc_gallery :=  ;
24324: LD_ADDR_OWVAR 33
24328: PUSH
24329: LD_STRING 
24331: ST_TO_ADDR
// hc_noskilllimit := true ;
24332: LD_ADDR_OWVAR 76
24336: PUSH
24337: LD_INT 1
24339: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
24340: LD_ADDR_OWVAR 31
24344: PUSH
24345: LD_INT 30
24347: PUSH
24348: LD_INT 30
24350: PUSH
24351: LD_INT 30
24353: PUSH
24354: LD_INT 30
24356: PUSH
24357: EMPTY
24358: LIST
24359: LIST
24360: LIST
24361: LIST
24362: ST_TO_ADDR
// un := CreateHuman ;
24363: LD_ADDR_VAR 0 3
24367: PUSH
24368: CALL_OW 44
24372: ST_TO_ADDR
// hc_noskilllimit := false ;
24373: LD_ADDR_OWVAR 76
24377: PUSH
24378: LD_INT 0
24380: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
24381: LD_VAR 0 3
24385: PPUSH
24386: LD_INT 1
24388: PPUSH
24389: CALL_OW 51
// ToLua ( playRanger() ) ;
24393: LD_STRING playRanger()
24395: PPUSH
24396: CALL_OW 559
// p := 0 ;
24400: LD_ADDR_VAR 0 2
24404: PUSH
24405: LD_INT 0
24407: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
24408: LD_INT 35
24410: PPUSH
24411: CALL_OW 67
// p := p + 1 ;
24415: LD_ADDR_VAR 0 2
24419: PUSH
24420: LD_VAR 0 2
24424: PUSH
24425: LD_INT 1
24427: PLUS
24428: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
24429: LD_VAR 0 3
24433: PPUSH
24434: CALL_OW 256
24438: PUSH
24439: LD_INT 1000
24441: LESS
24442: IFFALSE 24456
// SetLives ( un , 1000 ) ;
24444: LD_VAR 0 3
24448: PPUSH
24449: LD_INT 1000
24451: PPUSH
24452: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
24456: LD_VAR 0 3
24460: PPUSH
24461: LD_INT 81
24463: PUSH
24464: LD_OWVAR 2
24468: PUSH
24469: EMPTY
24470: LIST
24471: LIST
24472: PUSH
24473: LD_INT 91
24475: PUSH
24476: LD_VAR 0 3
24480: PUSH
24481: LD_INT 30
24483: PUSH
24484: EMPTY
24485: LIST
24486: LIST
24487: LIST
24488: PUSH
24489: EMPTY
24490: LIST
24491: LIST
24492: PPUSH
24493: CALL_OW 69
24497: PPUSH
24498: LD_VAR 0 3
24502: PPUSH
24503: CALL_OW 74
24507: PPUSH
24508: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
24512: LD_VAR 0 2
24516: PUSH
24517: LD_INT 80
24519: GREATER
24520: PUSH
24521: LD_VAR 0 3
24525: PPUSH
24526: CALL_OW 301
24530: OR
24531: IFFALSE 24408
// if un then
24533: LD_VAR 0 3
24537: IFFALSE 24548
// RemoveUnit ( un ) ;
24539: LD_VAR 0 3
24543: PPUSH
24544: CALL_OW 64
// end ;
24548: PPOPN 3
24550: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
24551: LD_EXP 76
24555: IFFALSE 24671
24557: GO 24559
24559: DISABLE
24560: LD_INT 0
24562: PPUSH
24563: PPUSH
24564: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
24565: LD_ADDR_VAR 0 2
24569: PUSH
24570: LD_INT 81
24572: PUSH
24573: LD_OWVAR 2
24577: PUSH
24578: EMPTY
24579: LIST
24580: LIST
24581: PUSH
24582: LD_INT 21
24584: PUSH
24585: LD_INT 1
24587: PUSH
24588: EMPTY
24589: LIST
24590: LIST
24591: PUSH
24592: EMPTY
24593: LIST
24594: LIST
24595: PPUSH
24596: CALL_OW 69
24600: ST_TO_ADDR
// ToLua ( playComputer() ) ;
24601: LD_STRING playComputer()
24603: PPUSH
24604: CALL_OW 559
// if not tmp then
24608: LD_VAR 0 2
24612: NOT
24613: IFFALSE 24617
// exit ;
24615: GO 24671
// for i in tmp do
24617: LD_ADDR_VAR 0 1
24621: PUSH
24622: LD_VAR 0 2
24626: PUSH
24627: FOR_IN
24628: IFFALSE 24669
// for j := 1 to 4 do
24630: LD_ADDR_VAR 0 3
24634: PUSH
24635: DOUBLE
24636: LD_INT 1
24638: DEC
24639: ST_TO_ADDR
24640: LD_INT 4
24642: PUSH
24643: FOR_TO
24644: IFFALSE 24665
// SetSkill ( i , j , 10 ) ;
24646: LD_VAR 0 1
24650: PPUSH
24651: LD_VAR 0 3
24655: PPUSH
24656: LD_INT 10
24658: PPUSH
24659: CALL_OW 237
24663: GO 24643
24665: POP
24666: POP
24667: GO 24627
24669: POP
24670: POP
// end ;
24671: PPOPN 3
24673: END
// every 0 0$1 trigger s30 do var i , tmp ;
24674: LD_EXP 77
24678: IFFALSE 24747
24680: GO 24682
24682: DISABLE
24683: LD_INT 0
24685: PPUSH
24686: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
24687: LD_ADDR_VAR 0 2
24691: PUSH
24692: LD_INT 22
24694: PUSH
24695: LD_OWVAR 2
24699: PUSH
24700: EMPTY
24701: LIST
24702: LIST
24703: PPUSH
24704: CALL_OW 69
24708: ST_TO_ADDR
// if not tmp then
24709: LD_VAR 0 2
24713: NOT
24714: IFFALSE 24718
// exit ;
24716: GO 24747
// for i in tmp do
24718: LD_ADDR_VAR 0 1
24722: PUSH
24723: LD_VAR 0 2
24727: PUSH
24728: FOR_IN
24729: IFFALSE 24745
// SetLives ( i , 300 ) ;
24731: LD_VAR 0 1
24735: PPUSH
24736: LD_INT 300
24738: PPUSH
24739: CALL_OW 234
24743: GO 24728
24745: POP
24746: POP
// end ;
24747: PPOPN 2
24749: END
// every 0 0$1 trigger s60 do var i , tmp ;
24750: LD_EXP 78
24754: IFFALSE 24823
24756: GO 24758
24758: DISABLE
24759: LD_INT 0
24761: PPUSH
24762: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
24763: LD_ADDR_VAR 0 2
24767: PUSH
24768: LD_INT 22
24770: PUSH
24771: LD_OWVAR 2
24775: PUSH
24776: EMPTY
24777: LIST
24778: LIST
24779: PPUSH
24780: CALL_OW 69
24784: ST_TO_ADDR
// if not tmp then
24785: LD_VAR 0 2
24789: NOT
24790: IFFALSE 24794
// exit ;
24792: GO 24823
// for i in tmp do
24794: LD_ADDR_VAR 0 1
24798: PUSH
24799: LD_VAR 0 2
24803: PUSH
24804: FOR_IN
24805: IFFALSE 24821
// SetLives ( i , 600 ) ;
24807: LD_VAR 0 1
24811: PPUSH
24812: LD_INT 600
24814: PPUSH
24815: CALL_OW 234
24819: GO 24804
24821: POP
24822: POP
// end ;
24823: PPOPN 2
24825: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
24826: LD_INT 0
24828: PPUSH
// case cmd of 301 :
24829: LD_VAR 0 1
24833: PUSH
24834: LD_INT 301
24836: DOUBLE
24837: EQUAL
24838: IFTRUE 24842
24840: GO 24874
24842: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
24843: LD_VAR 0 6
24847: PPUSH
24848: LD_VAR 0 7
24852: PPUSH
24853: LD_VAR 0 8
24857: PPUSH
24858: LD_VAR 0 4
24862: PPUSH
24863: LD_VAR 0 5
24867: PPUSH
24868: CALL 26083 0 5
24872: GO 24995
24874: LD_INT 302
24876: DOUBLE
24877: EQUAL
24878: IFTRUE 24882
24880: GO 24919
24882: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
24883: LD_VAR 0 6
24887: PPUSH
24888: LD_VAR 0 7
24892: PPUSH
24893: LD_VAR 0 8
24897: PPUSH
24898: LD_VAR 0 9
24902: PPUSH
24903: LD_VAR 0 4
24907: PPUSH
24908: LD_VAR 0 5
24912: PPUSH
24913: CALL 26174 0 6
24917: GO 24995
24919: LD_INT 303
24921: DOUBLE
24922: EQUAL
24923: IFTRUE 24927
24925: GO 24964
24927: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
24928: LD_VAR 0 6
24932: PPUSH
24933: LD_VAR 0 7
24937: PPUSH
24938: LD_VAR 0 8
24942: PPUSH
24943: LD_VAR 0 9
24947: PPUSH
24948: LD_VAR 0 4
24952: PPUSH
24953: LD_VAR 0 5
24957: PPUSH
24958: CALL 25000 0 6
24962: GO 24995
24964: LD_INT 304
24966: DOUBLE
24967: EQUAL
24968: IFTRUE 24972
24970: GO 24994
24972: POP
// hHackTeleport ( unit , x , y ) ; end ;
24973: LD_VAR 0 2
24977: PPUSH
24978: LD_VAR 0 4
24982: PPUSH
24983: LD_VAR 0 5
24987: PPUSH
24988: CALL 26767 0 3
24992: GO 24995
24994: POP
// end ;
24995: LD_VAR 0 12
24999: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
25000: LD_INT 0
25002: PPUSH
25003: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
25004: LD_VAR 0 1
25008: PUSH
25009: LD_INT 1
25011: LESS
25012: PUSH
25013: LD_VAR 0 1
25017: PUSH
25018: LD_INT 3
25020: GREATER
25021: OR
25022: PUSH
25023: LD_VAR 0 5
25027: PPUSH
25028: LD_VAR 0 6
25032: PPUSH
25033: CALL_OW 428
25037: OR
25038: IFFALSE 25042
// exit ;
25040: GO 25770
// uc_side := your_side ;
25042: LD_ADDR_OWVAR 20
25046: PUSH
25047: LD_OWVAR 2
25051: ST_TO_ADDR
// uc_nation := nation ;
25052: LD_ADDR_OWVAR 21
25056: PUSH
25057: LD_VAR 0 1
25061: ST_TO_ADDR
// bc_level = 1 ;
25062: LD_ADDR_OWVAR 43
25066: PUSH
25067: LD_INT 1
25069: ST_TO_ADDR
// case btype of 1 :
25070: LD_VAR 0 2
25074: PUSH
25075: LD_INT 1
25077: DOUBLE
25078: EQUAL
25079: IFTRUE 25083
25081: GO 25094
25083: POP
// bc_type := b_depot ; 2 :
25084: LD_ADDR_OWVAR 42
25088: PUSH
25089: LD_INT 0
25091: ST_TO_ADDR
25092: GO 25714
25094: LD_INT 2
25096: DOUBLE
25097: EQUAL
25098: IFTRUE 25102
25100: GO 25113
25102: POP
// bc_type := b_warehouse ; 3 :
25103: LD_ADDR_OWVAR 42
25107: PUSH
25108: LD_INT 1
25110: ST_TO_ADDR
25111: GO 25714
25113: LD_INT 3
25115: DOUBLE
25116: EQUAL
25117: IFTRUE 25121
25119: GO 25132
25121: POP
// bc_type := b_lab ; 4 .. 9 :
25122: LD_ADDR_OWVAR 42
25126: PUSH
25127: LD_INT 6
25129: ST_TO_ADDR
25130: GO 25714
25132: LD_INT 4
25134: DOUBLE
25135: GREATEREQUAL
25136: IFFALSE 25144
25138: LD_INT 9
25140: DOUBLE
25141: LESSEQUAL
25142: IFTRUE 25146
25144: GO 25206
25146: POP
// begin bc_type := b_lab_half ;
25147: LD_ADDR_OWVAR 42
25151: PUSH
25152: LD_INT 7
25154: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
25155: LD_ADDR_OWVAR 44
25159: PUSH
25160: LD_INT 10
25162: PUSH
25163: LD_INT 11
25165: PUSH
25166: LD_INT 12
25168: PUSH
25169: LD_INT 15
25171: PUSH
25172: LD_INT 14
25174: PUSH
25175: LD_INT 13
25177: PUSH
25178: EMPTY
25179: LIST
25180: LIST
25181: LIST
25182: LIST
25183: LIST
25184: LIST
25185: PUSH
25186: LD_VAR 0 2
25190: PUSH
25191: LD_INT 3
25193: MINUS
25194: ARRAY
25195: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
25196: LD_ADDR_OWVAR 45
25200: PUSH
25201: LD_INT 9
25203: ST_TO_ADDR
// end ; 10 .. 13 :
25204: GO 25714
25206: LD_INT 10
25208: DOUBLE
25209: GREATEREQUAL
25210: IFFALSE 25218
25212: LD_INT 13
25214: DOUBLE
25215: LESSEQUAL
25216: IFTRUE 25220
25218: GO 25297
25220: POP
// begin bc_type := b_lab_full ;
25221: LD_ADDR_OWVAR 42
25225: PUSH
25226: LD_INT 8
25228: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
25229: LD_ADDR_OWVAR 44
25233: PUSH
25234: LD_INT 10
25236: PUSH
25237: LD_INT 12
25239: PUSH
25240: LD_INT 14
25242: PUSH
25243: LD_INT 13
25245: PUSH
25246: EMPTY
25247: LIST
25248: LIST
25249: LIST
25250: LIST
25251: PUSH
25252: LD_VAR 0 2
25256: PUSH
25257: LD_INT 9
25259: MINUS
25260: ARRAY
25261: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
25262: LD_ADDR_OWVAR 45
25266: PUSH
25267: LD_INT 11
25269: PUSH
25270: LD_INT 15
25272: PUSH
25273: LD_INT 12
25275: PUSH
25276: LD_INT 15
25278: PUSH
25279: EMPTY
25280: LIST
25281: LIST
25282: LIST
25283: LIST
25284: PUSH
25285: LD_VAR 0 2
25289: PUSH
25290: LD_INT 9
25292: MINUS
25293: ARRAY
25294: ST_TO_ADDR
// end ; 14 :
25295: GO 25714
25297: LD_INT 14
25299: DOUBLE
25300: EQUAL
25301: IFTRUE 25305
25303: GO 25316
25305: POP
// bc_type := b_workshop ; 15 :
25306: LD_ADDR_OWVAR 42
25310: PUSH
25311: LD_INT 2
25313: ST_TO_ADDR
25314: GO 25714
25316: LD_INT 15
25318: DOUBLE
25319: EQUAL
25320: IFTRUE 25324
25322: GO 25335
25324: POP
// bc_type := b_factory ; 16 :
25325: LD_ADDR_OWVAR 42
25329: PUSH
25330: LD_INT 3
25332: ST_TO_ADDR
25333: GO 25714
25335: LD_INT 16
25337: DOUBLE
25338: EQUAL
25339: IFTRUE 25343
25341: GO 25354
25343: POP
// bc_type := b_ext_gun ; 17 :
25344: LD_ADDR_OWVAR 42
25348: PUSH
25349: LD_INT 17
25351: ST_TO_ADDR
25352: GO 25714
25354: LD_INT 17
25356: DOUBLE
25357: EQUAL
25358: IFTRUE 25362
25360: GO 25390
25362: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
25363: LD_ADDR_OWVAR 42
25367: PUSH
25368: LD_INT 19
25370: PUSH
25371: LD_INT 23
25373: PUSH
25374: LD_INT 19
25376: PUSH
25377: EMPTY
25378: LIST
25379: LIST
25380: LIST
25381: PUSH
25382: LD_VAR 0 1
25386: ARRAY
25387: ST_TO_ADDR
25388: GO 25714
25390: LD_INT 18
25392: DOUBLE
25393: EQUAL
25394: IFTRUE 25398
25396: GO 25409
25398: POP
// bc_type := b_ext_radar ; 19 :
25399: LD_ADDR_OWVAR 42
25403: PUSH
25404: LD_INT 20
25406: ST_TO_ADDR
25407: GO 25714
25409: LD_INT 19
25411: DOUBLE
25412: EQUAL
25413: IFTRUE 25417
25415: GO 25428
25417: POP
// bc_type := b_ext_radio ; 20 :
25418: LD_ADDR_OWVAR 42
25422: PUSH
25423: LD_INT 22
25425: ST_TO_ADDR
25426: GO 25714
25428: LD_INT 20
25430: DOUBLE
25431: EQUAL
25432: IFTRUE 25436
25434: GO 25447
25436: POP
// bc_type := b_ext_siberium ; 21 :
25437: LD_ADDR_OWVAR 42
25441: PUSH
25442: LD_INT 21
25444: ST_TO_ADDR
25445: GO 25714
25447: LD_INT 21
25449: DOUBLE
25450: EQUAL
25451: IFTRUE 25455
25453: GO 25466
25455: POP
// bc_type := b_ext_computer ; 22 :
25456: LD_ADDR_OWVAR 42
25460: PUSH
25461: LD_INT 24
25463: ST_TO_ADDR
25464: GO 25714
25466: LD_INT 22
25468: DOUBLE
25469: EQUAL
25470: IFTRUE 25474
25472: GO 25485
25474: POP
// bc_type := b_ext_track ; 23 :
25475: LD_ADDR_OWVAR 42
25479: PUSH
25480: LD_INT 16
25482: ST_TO_ADDR
25483: GO 25714
25485: LD_INT 23
25487: DOUBLE
25488: EQUAL
25489: IFTRUE 25493
25491: GO 25504
25493: POP
// bc_type := b_ext_laser ; 24 :
25494: LD_ADDR_OWVAR 42
25498: PUSH
25499: LD_INT 25
25501: ST_TO_ADDR
25502: GO 25714
25504: LD_INT 24
25506: DOUBLE
25507: EQUAL
25508: IFTRUE 25512
25510: GO 25523
25512: POP
// bc_type := b_control_tower ; 25 :
25513: LD_ADDR_OWVAR 42
25517: PUSH
25518: LD_INT 36
25520: ST_TO_ADDR
25521: GO 25714
25523: LD_INT 25
25525: DOUBLE
25526: EQUAL
25527: IFTRUE 25531
25529: GO 25542
25531: POP
// bc_type := b_breastwork ; 26 :
25532: LD_ADDR_OWVAR 42
25536: PUSH
25537: LD_INT 31
25539: ST_TO_ADDR
25540: GO 25714
25542: LD_INT 26
25544: DOUBLE
25545: EQUAL
25546: IFTRUE 25550
25548: GO 25561
25550: POP
// bc_type := b_bunker ; 27 :
25551: LD_ADDR_OWVAR 42
25555: PUSH
25556: LD_INT 32
25558: ST_TO_ADDR
25559: GO 25714
25561: LD_INT 27
25563: DOUBLE
25564: EQUAL
25565: IFTRUE 25569
25567: GO 25580
25569: POP
// bc_type := b_turret ; 28 :
25570: LD_ADDR_OWVAR 42
25574: PUSH
25575: LD_INT 33
25577: ST_TO_ADDR
25578: GO 25714
25580: LD_INT 28
25582: DOUBLE
25583: EQUAL
25584: IFTRUE 25588
25586: GO 25599
25588: POP
// bc_type := b_armoury ; 29 :
25589: LD_ADDR_OWVAR 42
25593: PUSH
25594: LD_INT 4
25596: ST_TO_ADDR
25597: GO 25714
25599: LD_INT 29
25601: DOUBLE
25602: EQUAL
25603: IFTRUE 25607
25605: GO 25618
25607: POP
// bc_type := b_barracks ; 30 :
25608: LD_ADDR_OWVAR 42
25612: PUSH
25613: LD_INT 5
25615: ST_TO_ADDR
25616: GO 25714
25618: LD_INT 30
25620: DOUBLE
25621: EQUAL
25622: IFTRUE 25626
25624: GO 25637
25626: POP
// bc_type := b_solar_power ; 31 :
25627: LD_ADDR_OWVAR 42
25631: PUSH
25632: LD_INT 27
25634: ST_TO_ADDR
25635: GO 25714
25637: LD_INT 31
25639: DOUBLE
25640: EQUAL
25641: IFTRUE 25645
25643: GO 25656
25645: POP
// bc_type := b_oil_power ; 32 :
25646: LD_ADDR_OWVAR 42
25650: PUSH
25651: LD_INT 26
25653: ST_TO_ADDR
25654: GO 25714
25656: LD_INT 32
25658: DOUBLE
25659: EQUAL
25660: IFTRUE 25664
25662: GO 25675
25664: POP
// bc_type := b_siberite_power ; 33 :
25665: LD_ADDR_OWVAR 42
25669: PUSH
25670: LD_INT 28
25672: ST_TO_ADDR
25673: GO 25714
25675: LD_INT 33
25677: DOUBLE
25678: EQUAL
25679: IFTRUE 25683
25681: GO 25694
25683: POP
// bc_type := b_oil_mine ; 34 :
25684: LD_ADDR_OWVAR 42
25688: PUSH
25689: LD_INT 29
25691: ST_TO_ADDR
25692: GO 25714
25694: LD_INT 34
25696: DOUBLE
25697: EQUAL
25698: IFTRUE 25702
25700: GO 25713
25702: POP
// bc_type := b_siberite_mine ; end ;
25703: LD_ADDR_OWVAR 42
25707: PUSH
25708: LD_INT 30
25710: ST_TO_ADDR
25711: GO 25714
25713: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
25714: LD_ADDR_VAR 0 8
25718: PUSH
25719: LD_VAR 0 5
25723: PPUSH
25724: LD_VAR 0 6
25728: PPUSH
25729: LD_VAR 0 3
25733: PPUSH
25734: CALL_OW 47
25738: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
25739: LD_OWVAR 42
25743: PUSH
25744: LD_INT 32
25746: PUSH
25747: LD_INT 33
25749: PUSH
25750: EMPTY
25751: LIST
25752: LIST
25753: IN
25754: IFFALSE 25770
// PlaceWeaponTurret ( b , weapon ) ;
25756: LD_VAR 0 8
25760: PPUSH
25761: LD_VAR 0 4
25765: PPUSH
25766: CALL_OW 431
// end ;
25770: LD_VAR 0 7
25774: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
25775: LD_INT 0
25777: PPUSH
25778: PPUSH
25779: PPUSH
25780: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
25781: LD_ADDR_VAR 0 4
25785: PUSH
25786: LD_INT 22
25788: PUSH
25789: LD_OWVAR 2
25793: PUSH
25794: EMPTY
25795: LIST
25796: LIST
25797: PUSH
25798: LD_INT 2
25800: PUSH
25801: LD_INT 30
25803: PUSH
25804: LD_INT 0
25806: PUSH
25807: EMPTY
25808: LIST
25809: LIST
25810: PUSH
25811: LD_INT 30
25813: PUSH
25814: LD_INT 1
25816: PUSH
25817: EMPTY
25818: LIST
25819: LIST
25820: PUSH
25821: EMPTY
25822: LIST
25823: LIST
25824: LIST
25825: PUSH
25826: EMPTY
25827: LIST
25828: LIST
25829: PPUSH
25830: CALL_OW 69
25834: ST_TO_ADDR
// if not tmp then
25835: LD_VAR 0 4
25839: NOT
25840: IFFALSE 25844
// exit ;
25842: GO 25903
// for i in tmp do
25844: LD_ADDR_VAR 0 2
25848: PUSH
25849: LD_VAR 0 4
25853: PUSH
25854: FOR_IN
25855: IFFALSE 25901
// for j = 1 to 3 do
25857: LD_ADDR_VAR 0 3
25861: PUSH
25862: DOUBLE
25863: LD_INT 1
25865: DEC
25866: ST_TO_ADDR
25867: LD_INT 3
25869: PUSH
25870: FOR_TO
25871: IFFALSE 25897
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
25873: LD_VAR 0 2
25877: PPUSH
25878: CALL_OW 274
25882: PPUSH
25883: LD_VAR 0 3
25887: PPUSH
25888: LD_INT 99999
25890: PPUSH
25891: CALL_OW 277
25895: GO 25870
25897: POP
25898: POP
25899: GO 25854
25901: POP
25902: POP
// end ;
25903: LD_VAR 0 1
25907: RET
// export function hHackSetLevel10 ; var i , j ; begin
25908: LD_INT 0
25910: PPUSH
25911: PPUSH
25912: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
25913: LD_ADDR_VAR 0 2
25917: PUSH
25918: LD_INT 21
25920: PUSH
25921: LD_INT 1
25923: PUSH
25924: EMPTY
25925: LIST
25926: LIST
25927: PPUSH
25928: CALL_OW 69
25932: PUSH
25933: FOR_IN
25934: IFFALSE 25986
// if IsSelected ( i ) then
25936: LD_VAR 0 2
25940: PPUSH
25941: CALL_OW 306
25945: IFFALSE 25984
// begin for j := 1 to 4 do
25947: LD_ADDR_VAR 0 3
25951: PUSH
25952: DOUBLE
25953: LD_INT 1
25955: DEC
25956: ST_TO_ADDR
25957: LD_INT 4
25959: PUSH
25960: FOR_TO
25961: IFFALSE 25982
// SetSkill ( i , j , 10 ) ;
25963: LD_VAR 0 2
25967: PPUSH
25968: LD_VAR 0 3
25972: PPUSH
25973: LD_INT 10
25975: PPUSH
25976: CALL_OW 237
25980: GO 25960
25982: POP
25983: POP
// end ;
25984: GO 25933
25986: POP
25987: POP
// end ;
25988: LD_VAR 0 1
25992: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
25993: LD_INT 0
25995: PPUSH
25996: PPUSH
25997: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
25998: LD_ADDR_VAR 0 2
26002: PUSH
26003: LD_INT 22
26005: PUSH
26006: LD_OWVAR 2
26010: PUSH
26011: EMPTY
26012: LIST
26013: LIST
26014: PUSH
26015: LD_INT 21
26017: PUSH
26018: LD_INT 1
26020: PUSH
26021: EMPTY
26022: LIST
26023: LIST
26024: PUSH
26025: EMPTY
26026: LIST
26027: LIST
26028: PPUSH
26029: CALL_OW 69
26033: PUSH
26034: FOR_IN
26035: IFFALSE 26076
// begin for j := 1 to 4 do
26037: LD_ADDR_VAR 0 3
26041: PUSH
26042: DOUBLE
26043: LD_INT 1
26045: DEC
26046: ST_TO_ADDR
26047: LD_INT 4
26049: PUSH
26050: FOR_TO
26051: IFFALSE 26072
// SetSkill ( i , j , 10 ) ;
26053: LD_VAR 0 2
26057: PPUSH
26058: LD_VAR 0 3
26062: PPUSH
26063: LD_INT 10
26065: PPUSH
26066: CALL_OW 237
26070: GO 26050
26072: POP
26073: POP
// end ;
26074: GO 26034
26076: POP
26077: POP
// end ;
26078: LD_VAR 0 1
26082: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
26083: LD_INT 0
26085: PPUSH
// uc_side := your_side ;
26086: LD_ADDR_OWVAR 20
26090: PUSH
26091: LD_OWVAR 2
26095: ST_TO_ADDR
// uc_nation := nation ;
26096: LD_ADDR_OWVAR 21
26100: PUSH
26101: LD_VAR 0 1
26105: ST_TO_ADDR
// InitHc ;
26106: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
26110: LD_INT 0
26112: PPUSH
26113: LD_VAR 0 2
26117: PPUSH
26118: LD_VAR 0 3
26122: PPUSH
26123: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
26127: LD_VAR 0 4
26131: PPUSH
26132: LD_VAR 0 5
26136: PPUSH
26137: CALL_OW 428
26141: PUSH
26142: LD_INT 0
26144: EQUAL
26145: IFFALSE 26169
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
26147: CALL_OW 44
26151: PPUSH
26152: LD_VAR 0 4
26156: PPUSH
26157: LD_VAR 0 5
26161: PPUSH
26162: LD_INT 1
26164: PPUSH
26165: CALL_OW 48
// end ;
26169: LD_VAR 0 6
26173: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
26174: LD_INT 0
26176: PPUSH
26177: PPUSH
// uc_side := your_side ;
26178: LD_ADDR_OWVAR 20
26182: PUSH
26183: LD_OWVAR 2
26187: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
26188: LD_VAR 0 1
26192: PUSH
26193: LD_INT 1
26195: PUSH
26196: LD_INT 2
26198: PUSH
26199: LD_INT 3
26201: PUSH
26202: LD_INT 4
26204: PUSH
26205: LD_INT 5
26207: PUSH
26208: EMPTY
26209: LIST
26210: LIST
26211: LIST
26212: LIST
26213: LIST
26214: IN
26215: IFFALSE 26227
// uc_nation := nation_american else
26217: LD_ADDR_OWVAR 21
26221: PUSH
26222: LD_INT 1
26224: ST_TO_ADDR
26225: GO 26270
// if chassis in [ 11 , 12 , 13 , 14 ] then
26227: LD_VAR 0 1
26231: PUSH
26232: LD_INT 11
26234: PUSH
26235: LD_INT 12
26237: PUSH
26238: LD_INT 13
26240: PUSH
26241: LD_INT 14
26243: PUSH
26244: EMPTY
26245: LIST
26246: LIST
26247: LIST
26248: LIST
26249: IN
26250: IFFALSE 26262
// uc_nation := nation_arabian else
26252: LD_ADDR_OWVAR 21
26256: PUSH
26257: LD_INT 2
26259: ST_TO_ADDR
26260: GO 26270
// uc_nation := nation_russian ;
26262: LD_ADDR_OWVAR 21
26266: PUSH
26267: LD_INT 3
26269: ST_TO_ADDR
// vc_chassis := chassis ;
26270: LD_ADDR_OWVAR 37
26274: PUSH
26275: LD_VAR 0 1
26279: ST_TO_ADDR
// vc_engine := engine ;
26280: LD_ADDR_OWVAR 39
26284: PUSH
26285: LD_VAR 0 2
26289: ST_TO_ADDR
// vc_control := control ;
26290: LD_ADDR_OWVAR 38
26294: PUSH
26295: LD_VAR 0 3
26299: ST_TO_ADDR
// vc_weapon := weapon ;
26300: LD_ADDR_OWVAR 40
26304: PUSH
26305: LD_VAR 0 4
26309: ST_TO_ADDR
// un := CreateVehicle ;
26310: LD_ADDR_VAR 0 8
26314: PUSH
26315: CALL_OW 45
26319: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
26320: LD_VAR 0 8
26324: PPUSH
26325: LD_INT 0
26327: PPUSH
26328: LD_INT 5
26330: PPUSH
26331: CALL_OW 12
26335: PPUSH
26336: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
26340: LD_VAR 0 8
26344: PPUSH
26345: LD_VAR 0 5
26349: PPUSH
26350: LD_VAR 0 6
26354: PPUSH
26355: LD_INT 1
26357: PPUSH
26358: CALL_OW 48
// end ;
26362: LD_VAR 0 7
26366: RET
// export hInvincible ; every 1 do
26367: GO 26369
26369: DISABLE
// hInvincible := [ ] ;
26370: LD_ADDR_EXP 79
26374: PUSH
26375: EMPTY
26376: ST_TO_ADDR
26377: END
// every 10 do var i ;
26378: GO 26380
26380: DISABLE
26381: LD_INT 0
26383: PPUSH
// begin enable ;
26384: ENABLE
// if not hInvincible then
26385: LD_EXP 79
26389: NOT
26390: IFFALSE 26394
// exit ;
26392: GO 26438
// for i in hInvincible do
26394: LD_ADDR_VAR 0 1
26398: PUSH
26399: LD_EXP 79
26403: PUSH
26404: FOR_IN
26405: IFFALSE 26436
// if GetLives ( i ) < 1000 then
26407: LD_VAR 0 1
26411: PPUSH
26412: CALL_OW 256
26416: PUSH
26417: LD_INT 1000
26419: LESS
26420: IFFALSE 26434
// SetLives ( i , 1000 ) ;
26422: LD_VAR 0 1
26426: PPUSH
26427: LD_INT 1000
26429: PPUSH
26430: CALL_OW 234
26434: GO 26404
26436: POP
26437: POP
// end ;
26438: PPOPN 1
26440: END
// export function hHackInvincible ; var i ; begin
26441: LD_INT 0
26443: PPUSH
26444: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
26445: LD_ADDR_VAR 0 2
26449: PUSH
26450: LD_INT 2
26452: PUSH
26453: LD_INT 21
26455: PUSH
26456: LD_INT 1
26458: PUSH
26459: EMPTY
26460: LIST
26461: LIST
26462: PUSH
26463: LD_INT 21
26465: PUSH
26466: LD_INT 2
26468: PUSH
26469: EMPTY
26470: LIST
26471: LIST
26472: PUSH
26473: EMPTY
26474: LIST
26475: LIST
26476: LIST
26477: PPUSH
26478: CALL_OW 69
26482: PUSH
26483: FOR_IN
26484: IFFALSE 26545
// if IsSelected ( i ) then
26486: LD_VAR 0 2
26490: PPUSH
26491: CALL_OW 306
26495: IFFALSE 26543
// begin if i in hInvincible then
26497: LD_VAR 0 2
26501: PUSH
26502: LD_EXP 79
26506: IN
26507: IFFALSE 26527
// hInvincible := hInvincible diff i else
26509: LD_ADDR_EXP 79
26513: PUSH
26514: LD_EXP 79
26518: PUSH
26519: LD_VAR 0 2
26523: DIFF
26524: ST_TO_ADDR
26525: GO 26543
// hInvincible := hInvincible union i ;
26527: LD_ADDR_EXP 79
26531: PUSH
26532: LD_EXP 79
26536: PUSH
26537: LD_VAR 0 2
26541: UNION
26542: ST_TO_ADDR
// end ;
26543: GO 26483
26545: POP
26546: POP
// end ;
26547: LD_VAR 0 1
26551: RET
// export function hHackInvisible ; var i , j ; begin
26552: LD_INT 0
26554: PPUSH
26555: PPUSH
26556: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
26557: LD_ADDR_VAR 0 2
26561: PUSH
26562: LD_INT 21
26564: PUSH
26565: LD_INT 1
26567: PUSH
26568: EMPTY
26569: LIST
26570: LIST
26571: PPUSH
26572: CALL_OW 69
26576: PUSH
26577: FOR_IN
26578: IFFALSE 26602
// if IsSelected ( i ) then
26580: LD_VAR 0 2
26584: PPUSH
26585: CALL_OW 306
26589: IFFALSE 26600
// ComForceInvisible ( i ) ;
26591: LD_VAR 0 2
26595: PPUSH
26596: CALL_OW 496
26600: GO 26577
26602: POP
26603: POP
// end ;
26604: LD_VAR 0 1
26608: RET
// export function hHackChangeYourSide ; begin
26609: LD_INT 0
26611: PPUSH
// if your_side = 8 then
26612: LD_OWVAR 2
26616: PUSH
26617: LD_INT 8
26619: EQUAL
26620: IFFALSE 26632
// your_side := 0 else
26622: LD_ADDR_OWVAR 2
26626: PUSH
26627: LD_INT 0
26629: ST_TO_ADDR
26630: GO 26646
// your_side := your_side + 1 ;
26632: LD_ADDR_OWVAR 2
26636: PUSH
26637: LD_OWVAR 2
26641: PUSH
26642: LD_INT 1
26644: PLUS
26645: ST_TO_ADDR
// end ;
26646: LD_VAR 0 1
26650: RET
// export function hHackChangeUnitSide ; var i , j ; begin
26651: LD_INT 0
26653: PPUSH
26654: PPUSH
26655: PPUSH
// for i in all_units do
26656: LD_ADDR_VAR 0 2
26660: PUSH
26661: LD_OWVAR 3
26665: PUSH
26666: FOR_IN
26667: IFFALSE 26745
// if IsSelected ( i ) then
26669: LD_VAR 0 2
26673: PPUSH
26674: CALL_OW 306
26678: IFFALSE 26743
// begin j := GetSide ( i ) ;
26680: LD_ADDR_VAR 0 3
26684: PUSH
26685: LD_VAR 0 2
26689: PPUSH
26690: CALL_OW 255
26694: ST_TO_ADDR
// if j = 8 then
26695: LD_VAR 0 3
26699: PUSH
26700: LD_INT 8
26702: EQUAL
26703: IFFALSE 26715
// j := 0 else
26705: LD_ADDR_VAR 0 3
26709: PUSH
26710: LD_INT 0
26712: ST_TO_ADDR
26713: GO 26729
// j := j + 1 ;
26715: LD_ADDR_VAR 0 3
26719: PUSH
26720: LD_VAR 0 3
26724: PUSH
26725: LD_INT 1
26727: PLUS
26728: ST_TO_ADDR
// SetSide ( i , j ) ;
26729: LD_VAR 0 2
26733: PPUSH
26734: LD_VAR 0 3
26738: PPUSH
26739: CALL_OW 235
// end ;
26743: GO 26666
26745: POP
26746: POP
// end ;
26747: LD_VAR 0 1
26751: RET
// export function hHackFog ; begin
26752: LD_INT 0
26754: PPUSH
// FogOff ( true ) ;
26755: LD_INT 1
26757: PPUSH
26758: CALL_OW 344
// end ;
26762: LD_VAR 0 1
26766: RET
// export function hHackTeleport ( unit , x , y ) ; begin
26767: LD_INT 0
26769: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
26770: LD_VAR 0 1
26774: PPUSH
26775: LD_VAR 0 2
26779: PPUSH
26780: LD_VAR 0 3
26784: PPUSH
26785: LD_INT 1
26787: PPUSH
26788: LD_INT 1
26790: PPUSH
26791: CALL_OW 483
// CenterOnXY ( x , y ) ;
26795: LD_VAR 0 2
26799: PPUSH
26800: LD_VAR 0 3
26804: PPUSH
26805: CALL_OW 84
// end ;
26809: LD_VAR 0 4
26813: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
26814: LD_INT 0
26816: PPUSH
26817: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
26818: LD_VAR 0 1
26822: NOT
26823: PUSH
26824: LD_VAR 0 2
26828: PPUSH
26829: LD_VAR 0 3
26833: PPUSH
26834: CALL_OW 488
26838: NOT
26839: OR
26840: PUSH
26841: LD_VAR 0 1
26845: PPUSH
26846: CALL_OW 266
26850: PUSH
26851: LD_INT 3
26853: NONEQUAL
26854: PUSH
26855: LD_VAR 0 1
26859: PPUSH
26860: CALL_OW 247
26864: PUSH
26865: LD_INT 1
26867: EQUAL
26868: NOT
26869: AND
26870: OR
26871: IFFALSE 26875
// exit ;
26873: GO 27024
// if GetType ( factory ) = unit_human then
26875: LD_VAR 0 1
26879: PPUSH
26880: CALL_OW 247
26884: PUSH
26885: LD_INT 1
26887: EQUAL
26888: IFFALSE 26905
// factory := IsInUnit ( factory ) ;
26890: LD_ADDR_VAR 0 1
26894: PUSH
26895: LD_VAR 0 1
26899: PPUSH
26900: CALL_OW 310
26904: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
26905: LD_VAR 0 1
26909: PPUSH
26910: CALL_OW 266
26914: PUSH
26915: LD_INT 3
26917: NONEQUAL
26918: IFFALSE 26922
// exit ;
26920: GO 27024
// if HexInfo ( x , y ) = factory then
26922: LD_VAR 0 2
26926: PPUSH
26927: LD_VAR 0 3
26931: PPUSH
26932: CALL_OW 428
26936: PUSH
26937: LD_VAR 0 1
26941: EQUAL
26942: IFFALSE 26969
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
26944: LD_ADDR_EXP 80
26948: PUSH
26949: LD_EXP 80
26953: PPUSH
26954: LD_VAR 0 1
26958: PPUSH
26959: LD_INT 0
26961: PPUSH
26962: CALL_OW 1
26966: ST_TO_ADDR
26967: GO 27020
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
26969: LD_ADDR_EXP 80
26973: PUSH
26974: LD_EXP 80
26978: PPUSH
26979: LD_VAR 0 1
26983: PPUSH
26984: LD_VAR 0 1
26988: PPUSH
26989: CALL_OW 255
26993: PUSH
26994: LD_VAR 0 1
26998: PUSH
26999: LD_VAR 0 2
27003: PUSH
27004: LD_VAR 0 3
27008: PUSH
27009: EMPTY
27010: LIST
27011: LIST
27012: LIST
27013: LIST
27014: PPUSH
27015: CALL_OW 1
27019: ST_TO_ADDR
// UpdateFactoryWaypoints ;
27020: CALL 27029 0 0
// end ;
27024: LD_VAR 0 4
27028: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
27029: LD_INT 0
27031: PPUSH
27032: PPUSH
27033: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
27034: LD_STRING resetFactoryWaypoint();
27036: PPUSH
27037: CALL_OW 559
// if factoryWaypoints then
27041: LD_EXP 80
27045: IFFALSE 27171
// begin list := PrepareArray ( factoryWaypoints ) ;
27047: LD_ADDR_VAR 0 3
27051: PUSH
27052: LD_EXP 80
27056: PPUSH
27057: CALL 74468 0 1
27061: ST_TO_ADDR
// for i := 1 to list do
27062: LD_ADDR_VAR 0 2
27066: PUSH
27067: DOUBLE
27068: LD_INT 1
27070: DEC
27071: ST_TO_ADDR
27072: LD_VAR 0 3
27076: PUSH
27077: FOR_TO
27078: IFFALSE 27169
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
27080: LD_STRING setFactoryWaypointXY(
27082: PUSH
27083: LD_VAR 0 3
27087: PUSH
27088: LD_VAR 0 2
27092: ARRAY
27093: PUSH
27094: LD_INT 1
27096: ARRAY
27097: STR
27098: PUSH
27099: LD_STRING ,
27101: STR
27102: PUSH
27103: LD_VAR 0 3
27107: PUSH
27108: LD_VAR 0 2
27112: ARRAY
27113: PUSH
27114: LD_INT 2
27116: ARRAY
27117: STR
27118: PUSH
27119: LD_STRING ,
27121: STR
27122: PUSH
27123: LD_VAR 0 3
27127: PUSH
27128: LD_VAR 0 2
27132: ARRAY
27133: PUSH
27134: LD_INT 3
27136: ARRAY
27137: STR
27138: PUSH
27139: LD_STRING ,
27141: STR
27142: PUSH
27143: LD_VAR 0 3
27147: PUSH
27148: LD_VAR 0 2
27152: ARRAY
27153: PUSH
27154: LD_INT 4
27156: ARRAY
27157: STR
27158: PUSH
27159: LD_STRING )
27161: STR
27162: PPUSH
27163: CALL_OW 559
27167: GO 27077
27169: POP
27170: POP
// end ; end ;
27171: LD_VAR 0 1
27175: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
27176: LD_INT 0
27178: PPUSH
// if HexInfo ( x , y ) = warehouse then
27179: LD_VAR 0 2
27183: PPUSH
27184: LD_VAR 0 3
27188: PPUSH
27189: CALL_OW 428
27193: PUSH
27194: LD_VAR 0 1
27198: EQUAL
27199: IFFALSE 27226
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
27201: LD_ADDR_EXP 81
27205: PUSH
27206: LD_EXP 81
27210: PPUSH
27211: LD_VAR 0 1
27215: PPUSH
27216: LD_INT 0
27218: PPUSH
27219: CALL_OW 1
27223: ST_TO_ADDR
27224: GO 27277
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
27226: LD_ADDR_EXP 81
27230: PUSH
27231: LD_EXP 81
27235: PPUSH
27236: LD_VAR 0 1
27240: PPUSH
27241: LD_VAR 0 1
27245: PPUSH
27246: CALL_OW 255
27250: PUSH
27251: LD_VAR 0 1
27255: PUSH
27256: LD_VAR 0 2
27260: PUSH
27261: LD_VAR 0 3
27265: PUSH
27266: EMPTY
27267: LIST
27268: LIST
27269: LIST
27270: LIST
27271: PPUSH
27272: CALL_OW 1
27276: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
27277: CALL 27286 0 0
// end ;
27281: LD_VAR 0 4
27285: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
27286: LD_INT 0
27288: PPUSH
27289: PPUSH
27290: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
27291: LD_STRING resetWarehouseGatheringPoints();
27293: PPUSH
27294: CALL_OW 559
// if warehouseGatheringPoints then
27298: LD_EXP 81
27302: IFFALSE 27428
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
27304: LD_ADDR_VAR 0 3
27308: PUSH
27309: LD_EXP 81
27313: PPUSH
27314: CALL 74468 0 1
27318: ST_TO_ADDR
// for i := 1 to list do
27319: LD_ADDR_VAR 0 2
27323: PUSH
27324: DOUBLE
27325: LD_INT 1
27327: DEC
27328: ST_TO_ADDR
27329: LD_VAR 0 3
27333: PUSH
27334: FOR_TO
27335: IFFALSE 27426
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
27337: LD_STRING setWarehouseGatheringPointXY(
27339: PUSH
27340: LD_VAR 0 3
27344: PUSH
27345: LD_VAR 0 2
27349: ARRAY
27350: PUSH
27351: LD_INT 1
27353: ARRAY
27354: STR
27355: PUSH
27356: LD_STRING ,
27358: STR
27359: PUSH
27360: LD_VAR 0 3
27364: PUSH
27365: LD_VAR 0 2
27369: ARRAY
27370: PUSH
27371: LD_INT 2
27373: ARRAY
27374: STR
27375: PUSH
27376: LD_STRING ,
27378: STR
27379: PUSH
27380: LD_VAR 0 3
27384: PUSH
27385: LD_VAR 0 2
27389: ARRAY
27390: PUSH
27391: LD_INT 3
27393: ARRAY
27394: STR
27395: PUSH
27396: LD_STRING ,
27398: STR
27399: PUSH
27400: LD_VAR 0 3
27404: PUSH
27405: LD_VAR 0 2
27409: ARRAY
27410: PUSH
27411: LD_INT 4
27413: ARRAY
27414: STR
27415: PUSH
27416: LD_STRING )
27418: STR
27419: PPUSH
27420: CALL_OW 559
27424: GO 27334
27426: POP
27427: POP
// end ; end ;
27428: LD_VAR 0 1
27432: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
27433: LD_EXP 81
27437: IFFALSE 28122
27439: GO 27441
27441: DISABLE
27442: LD_INT 0
27444: PPUSH
27445: PPUSH
27446: PPUSH
27447: PPUSH
27448: PPUSH
27449: PPUSH
27450: PPUSH
27451: PPUSH
27452: PPUSH
// begin enable ;
27453: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
27454: LD_ADDR_VAR 0 3
27458: PUSH
27459: LD_EXP 81
27463: PPUSH
27464: CALL 74468 0 1
27468: ST_TO_ADDR
// if not list then
27469: LD_VAR 0 3
27473: NOT
27474: IFFALSE 27478
// exit ;
27476: GO 28122
// for i := 1 to list do
27478: LD_ADDR_VAR 0 1
27482: PUSH
27483: DOUBLE
27484: LD_INT 1
27486: DEC
27487: ST_TO_ADDR
27488: LD_VAR 0 3
27492: PUSH
27493: FOR_TO
27494: IFFALSE 28120
// begin depot := list [ i ] [ 2 ] ;
27496: LD_ADDR_VAR 0 8
27500: PUSH
27501: LD_VAR 0 3
27505: PUSH
27506: LD_VAR 0 1
27510: ARRAY
27511: PUSH
27512: LD_INT 2
27514: ARRAY
27515: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
27516: LD_ADDR_VAR 0 5
27520: PUSH
27521: LD_VAR 0 3
27525: PUSH
27526: LD_VAR 0 1
27530: ARRAY
27531: PUSH
27532: LD_INT 1
27534: ARRAY
27535: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
27536: LD_VAR 0 8
27540: PPUSH
27541: CALL_OW 301
27545: PUSH
27546: LD_VAR 0 5
27550: PUSH
27551: LD_VAR 0 8
27555: PPUSH
27556: CALL_OW 255
27560: NONEQUAL
27561: OR
27562: IFFALSE 27591
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
27564: LD_ADDR_EXP 81
27568: PUSH
27569: LD_EXP 81
27573: PPUSH
27574: LD_VAR 0 8
27578: PPUSH
27579: LD_INT 0
27581: PPUSH
27582: CALL_OW 1
27586: ST_TO_ADDR
// exit ;
27587: POP
27588: POP
27589: GO 28122
// end ; x := list [ i ] [ 3 ] ;
27591: LD_ADDR_VAR 0 6
27595: PUSH
27596: LD_VAR 0 3
27600: PUSH
27601: LD_VAR 0 1
27605: ARRAY
27606: PUSH
27607: LD_INT 3
27609: ARRAY
27610: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
27611: LD_ADDR_VAR 0 7
27615: PUSH
27616: LD_VAR 0 3
27620: PUSH
27621: LD_VAR 0 1
27625: ARRAY
27626: PUSH
27627: LD_INT 4
27629: ARRAY
27630: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
27631: LD_ADDR_VAR 0 9
27635: PUSH
27636: LD_VAR 0 6
27640: PPUSH
27641: LD_VAR 0 7
27645: PPUSH
27646: LD_INT 16
27648: PPUSH
27649: CALL 73056 0 3
27653: ST_TO_ADDR
// if not cratesNearbyPoint then
27654: LD_VAR 0 9
27658: NOT
27659: IFFALSE 27665
// exit ;
27661: POP
27662: POP
27663: GO 28122
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
27665: LD_ADDR_VAR 0 4
27669: PUSH
27670: LD_INT 22
27672: PUSH
27673: LD_VAR 0 5
27677: PUSH
27678: EMPTY
27679: LIST
27680: LIST
27681: PUSH
27682: LD_INT 3
27684: PUSH
27685: LD_INT 60
27687: PUSH
27688: EMPTY
27689: LIST
27690: PUSH
27691: EMPTY
27692: LIST
27693: LIST
27694: PUSH
27695: LD_INT 91
27697: PUSH
27698: LD_VAR 0 8
27702: PUSH
27703: LD_INT 6
27705: PUSH
27706: EMPTY
27707: LIST
27708: LIST
27709: LIST
27710: PUSH
27711: LD_INT 2
27713: PUSH
27714: LD_INT 25
27716: PUSH
27717: LD_INT 2
27719: PUSH
27720: EMPTY
27721: LIST
27722: LIST
27723: PUSH
27724: LD_INT 25
27726: PUSH
27727: LD_INT 16
27729: PUSH
27730: EMPTY
27731: LIST
27732: LIST
27733: PUSH
27734: EMPTY
27735: LIST
27736: LIST
27737: LIST
27738: PUSH
27739: EMPTY
27740: LIST
27741: LIST
27742: LIST
27743: LIST
27744: PPUSH
27745: CALL_OW 69
27749: PUSH
27750: LD_VAR 0 8
27754: PPUSH
27755: CALL_OW 313
27759: PPUSH
27760: LD_INT 3
27762: PUSH
27763: LD_INT 60
27765: PUSH
27766: EMPTY
27767: LIST
27768: PUSH
27769: EMPTY
27770: LIST
27771: LIST
27772: PUSH
27773: LD_INT 2
27775: PUSH
27776: LD_INT 25
27778: PUSH
27779: LD_INT 2
27781: PUSH
27782: EMPTY
27783: LIST
27784: LIST
27785: PUSH
27786: LD_INT 25
27788: PUSH
27789: LD_INT 16
27791: PUSH
27792: EMPTY
27793: LIST
27794: LIST
27795: PUSH
27796: EMPTY
27797: LIST
27798: LIST
27799: LIST
27800: PUSH
27801: EMPTY
27802: LIST
27803: LIST
27804: PPUSH
27805: CALL_OW 72
27809: UNION
27810: ST_TO_ADDR
// if tmp then
27811: LD_VAR 0 4
27815: IFFALSE 27895
// begin tmp := ShrinkArray ( tmp , 3 ) ;
27817: LD_ADDR_VAR 0 4
27821: PUSH
27822: LD_VAR 0 4
27826: PPUSH
27827: LD_INT 3
27829: PPUSH
27830: CALL 71025 0 2
27834: ST_TO_ADDR
// for j in tmp do
27835: LD_ADDR_VAR 0 2
27839: PUSH
27840: LD_VAR 0 4
27844: PUSH
27845: FOR_IN
27846: IFFALSE 27889
// begin if IsInUnit ( j ) then
27848: LD_VAR 0 2
27852: PPUSH
27853: CALL_OW 310
27857: IFFALSE 27868
// ComExit ( j ) ;
27859: LD_VAR 0 2
27863: PPUSH
27864: CALL 71108 0 1
// AddComCollect ( j , x , y ) ;
27868: LD_VAR 0 2
27872: PPUSH
27873: LD_VAR 0 6
27877: PPUSH
27878: LD_VAR 0 7
27882: PPUSH
27883: CALL_OW 177
// end ;
27887: GO 27845
27889: POP
27890: POP
// exit ;
27891: POP
27892: POP
27893: GO 28122
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
27895: LD_ADDR_VAR 0 4
27899: PUSH
27900: LD_INT 22
27902: PUSH
27903: LD_VAR 0 5
27907: PUSH
27908: EMPTY
27909: LIST
27910: LIST
27911: PUSH
27912: LD_INT 91
27914: PUSH
27915: LD_VAR 0 8
27919: PUSH
27920: LD_INT 8
27922: PUSH
27923: EMPTY
27924: LIST
27925: LIST
27926: LIST
27927: PUSH
27928: LD_INT 2
27930: PUSH
27931: LD_INT 34
27933: PUSH
27934: LD_INT 12
27936: PUSH
27937: EMPTY
27938: LIST
27939: LIST
27940: PUSH
27941: LD_INT 34
27943: PUSH
27944: LD_INT 51
27946: PUSH
27947: EMPTY
27948: LIST
27949: LIST
27950: PUSH
27951: LD_INT 34
27953: PUSH
27954: LD_INT 32
27956: PUSH
27957: EMPTY
27958: LIST
27959: LIST
27960: PUSH
27961: LD_INT 34
27963: PUSH
27964: LD_INT 89
27966: PUSH
27967: EMPTY
27968: LIST
27969: LIST
27970: PUSH
27971: EMPTY
27972: LIST
27973: LIST
27974: LIST
27975: LIST
27976: LIST
27977: PUSH
27978: EMPTY
27979: LIST
27980: LIST
27981: LIST
27982: PPUSH
27983: CALL_OW 69
27987: ST_TO_ADDR
// if tmp then
27988: LD_VAR 0 4
27992: IFFALSE 28118
// begin for j in tmp do
27994: LD_ADDR_VAR 0 2
27998: PUSH
27999: LD_VAR 0 4
28003: PUSH
28004: FOR_IN
28005: IFFALSE 28116
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
28007: LD_VAR 0 2
28011: PPUSH
28012: CALL_OW 262
28016: PUSH
28017: LD_INT 3
28019: EQUAL
28020: PUSH
28021: LD_VAR 0 2
28025: PPUSH
28026: CALL_OW 261
28030: PUSH
28031: LD_INT 20
28033: GREATER
28034: OR
28035: PUSH
28036: LD_VAR 0 2
28040: PPUSH
28041: CALL_OW 314
28045: NOT
28046: AND
28047: PUSH
28048: LD_VAR 0 2
28052: PPUSH
28053: CALL_OW 263
28057: PUSH
28058: LD_INT 1
28060: NONEQUAL
28061: PUSH
28062: LD_VAR 0 2
28066: PPUSH
28067: CALL_OW 311
28071: OR
28072: AND
28073: IFFALSE 28114
// begin ComCollect ( j , x , y ) ;
28075: LD_VAR 0 2
28079: PPUSH
28080: LD_VAR 0 6
28084: PPUSH
28085: LD_VAR 0 7
28089: PPUSH
28090: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
28094: LD_VAR 0 2
28098: PPUSH
28099: LD_VAR 0 8
28103: PPUSH
28104: CALL_OW 172
// exit ;
28108: POP
28109: POP
28110: POP
28111: POP
28112: GO 28122
// end ;
28114: GO 28004
28116: POP
28117: POP
// end ; end ;
28118: GO 27493
28120: POP
28121: POP
// end ; end_of_file
28122: PPOPN 9
28124: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
28125: LD_INT 0
28127: PPUSH
28128: PPUSH
28129: PPUSH
28130: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
28131: LD_VAR 0 1
28135: PPUSH
28136: CALL_OW 264
28140: PUSH
28141: LD_INT 91
28143: EQUAL
28144: IFFALSE 28216
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
28146: LD_INT 68
28148: PPUSH
28149: LD_VAR 0 1
28153: PPUSH
28154: CALL_OW 255
28158: PPUSH
28159: CALL_OW 321
28163: PUSH
28164: LD_INT 2
28166: EQUAL
28167: IFFALSE 28179
// eff := 70 else
28169: LD_ADDR_VAR 0 4
28173: PUSH
28174: LD_INT 70
28176: ST_TO_ADDR
28177: GO 28187
// eff := 30 ;
28179: LD_ADDR_VAR 0 4
28183: PUSH
28184: LD_INT 30
28186: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
28187: LD_VAR 0 1
28191: PPUSH
28192: CALL_OW 250
28196: PPUSH
28197: LD_VAR 0 1
28201: PPUSH
28202: CALL_OW 251
28206: PPUSH
28207: LD_VAR 0 4
28211: PPUSH
28212: CALL_OW 495
// end ; end ;
28216: LD_VAR 0 2
28220: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
28221: LD_INT 0
28223: PPUSH
// end ;
28224: LD_VAR 0 4
28228: RET
// export function SOS_Command ( cmd ) ; begin
28229: LD_INT 0
28231: PPUSH
// end ;
28232: LD_VAR 0 2
28236: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
28237: LD_INT 0
28239: PPUSH
// end ;
28240: LD_VAR 0 6
28244: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
28245: LD_INT 0
28247: PPUSH
28248: PPUSH
// if not vehicle or not factory then
28249: LD_VAR 0 1
28253: NOT
28254: PUSH
28255: LD_VAR 0 2
28259: NOT
28260: OR
28261: IFFALSE 28265
// exit ;
28263: GO 28496
// if factoryWaypoints >= factory then
28265: LD_EXP 80
28269: PUSH
28270: LD_VAR 0 2
28274: GREATEREQUAL
28275: IFFALSE 28496
// if factoryWaypoints [ factory ] then
28277: LD_EXP 80
28281: PUSH
28282: LD_VAR 0 2
28286: ARRAY
28287: IFFALSE 28496
// begin if GetControl ( vehicle ) = control_manual then
28289: LD_VAR 0 1
28293: PPUSH
28294: CALL_OW 263
28298: PUSH
28299: LD_INT 1
28301: EQUAL
28302: IFFALSE 28383
// begin driver := IsDrivenBy ( vehicle ) ;
28304: LD_ADDR_VAR 0 4
28308: PUSH
28309: LD_VAR 0 1
28313: PPUSH
28314: CALL_OW 311
28318: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
28319: LD_VAR 0 4
28323: PPUSH
28324: LD_EXP 80
28328: PUSH
28329: LD_VAR 0 2
28333: ARRAY
28334: PUSH
28335: LD_INT 3
28337: ARRAY
28338: PPUSH
28339: LD_EXP 80
28343: PUSH
28344: LD_VAR 0 2
28348: ARRAY
28349: PUSH
28350: LD_INT 4
28352: ARRAY
28353: PPUSH
28354: CALL_OW 171
// AddComExitVehicle ( driver ) ;
28358: LD_VAR 0 4
28362: PPUSH
28363: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
28367: LD_VAR 0 4
28371: PPUSH
28372: LD_VAR 0 2
28376: PPUSH
28377: CALL_OW 180
// end else
28381: GO 28496
// if GetControl ( vehicle ) = control_remote then
28383: LD_VAR 0 1
28387: PPUSH
28388: CALL_OW 263
28392: PUSH
28393: LD_INT 2
28395: EQUAL
28396: IFFALSE 28457
// begin wait ( 0 0$2 ) ;
28398: LD_INT 70
28400: PPUSH
28401: CALL_OW 67
// if Connect ( vehicle ) then
28405: LD_VAR 0 1
28409: PPUSH
28410: CALL 41327 0 1
28414: IFFALSE 28455
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
28416: LD_VAR 0 1
28420: PPUSH
28421: LD_EXP 80
28425: PUSH
28426: LD_VAR 0 2
28430: ARRAY
28431: PUSH
28432: LD_INT 3
28434: ARRAY
28435: PPUSH
28436: LD_EXP 80
28440: PUSH
28441: LD_VAR 0 2
28445: ARRAY
28446: PUSH
28447: LD_INT 4
28449: ARRAY
28450: PPUSH
28451: CALL_OW 171
// end else
28455: GO 28496
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
28457: LD_VAR 0 1
28461: PPUSH
28462: LD_EXP 80
28466: PUSH
28467: LD_VAR 0 2
28471: ARRAY
28472: PUSH
28473: LD_INT 3
28475: ARRAY
28476: PPUSH
28477: LD_EXP 80
28481: PUSH
28482: LD_VAR 0 2
28486: ARRAY
28487: PUSH
28488: LD_INT 4
28490: ARRAY
28491: PPUSH
28492: CALL_OW 171
// end ; end ;
28496: LD_VAR 0 3
28500: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
28501: LD_INT 0
28503: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
28504: LD_VAR 0 1
28508: PUSH
28509: LD_INT 250
28511: EQUAL
28512: PUSH
28513: LD_VAR 0 2
28517: PPUSH
28518: CALL_OW 264
28522: PUSH
28523: LD_INT 81
28525: EQUAL
28526: AND
28527: IFFALSE 28548
// MinerPlaceMine ( unit , x , y ) ;
28529: LD_VAR 0 2
28533: PPUSH
28534: LD_VAR 0 4
28538: PPUSH
28539: LD_VAR 0 5
28543: PPUSH
28544: CALL 31538 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
28548: LD_VAR 0 1
28552: PUSH
28553: LD_INT 251
28555: EQUAL
28556: PUSH
28557: LD_VAR 0 2
28561: PPUSH
28562: CALL_OW 264
28566: PUSH
28567: LD_INT 81
28569: EQUAL
28570: AND
28571: IFFALSE 28592
// MinerDetonateMine ( unit , x , y ) ;
28573: LD_VAR 0 2
28577: PPUSH
28578: LD_VAR 0 4
28582: PPUSH
28583: LD_VAR 0 5
28587: PPUSH
28588: CALL 31813 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
28592: LD_VAR 0 1
28596: PUSH
28597: LD_INT 252
28599: EQUAL
28600: PUSH
28601: LD_VAR 0 2
28605: PPUSH
28606: CALL_OW 264
28610: PUSH
28611: LD_INT 81
28613: EQUAL
28614: AND
28615: IFFALSE 28636
// MinerCreateMinefield ( unit , x , y ) ;
28617: LD_VAR 0 2
28621: PPUSH
28622: LD_VAR 0 4
28626: PPUSH
28627: LD_VAR 0 5
28631: PPUSH
28632: CALL 32230 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
28636: LD_VAR 0 1
28640: PUSH
28641: LD_INT 253
28643: EQUAL
28644: PUSH
28645: LD_VAR 0 2
28649: PPUSH
28650: CALL_OW 257
28654: PUSH
28655: LD_INT 5
28657: EQUAL
28658: AND
28659: IFFALSE 28680
// ComBinocular ( unit , x , y ) ;
28661: LD_VAR 0 2
28665: PPUSH
28666: LD_VAR 0 4
28670: PPUSH
28671: LD_VAR 0 5
28675: PPUSH
28676: CALL 32599 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
28680: LD_VAR 0 1
28684: PUSH
28685: LD_INT 254
28687: EQUAL
28688: PUSH
28689: LD_VAR 0 2
28693: PPUSH
28694: CALL_OW 264
28698: PUSH
28699: LD_INT 99
28701: EQUAL
28702: AND
28703: PUSH
28704: LD_VAR 0 3
28708: PPUSH
28709: CALL_OW 263
28713: PUSH
28714: LD_INT 3
28716: EQUAL
28717: AND
28718: IFFALSE 28734
// HackDestroyVehicle ( unit , selectedUnit ) ;
28720: LD_VAR 0 2
28724: PPUSH
28725: LD_VAR 0 3
28729: PPUSH
28730: CALL 30902 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
28734: LD_VAR 0 1
28738: PUSH
28739: LD_INT 255
28741: EQUAL
28742: PUSH
28743: LD_VAR 0 2
28747: PPUSH
28748: CALL_OW 264
28752: PUSH
28753: LD_INT 14
28755: PUSH
28756: LD_INT 53
28758: PUSH
28759: EMPTY
28760: LIST
28761: LIST
28762: IN
28763: AND
28764: PUSH
28765: LD_VAR 0 4
28769: PPUSH
28770: LD_VAR 0 5
28774: PPUSH
28775: CALL_OW 488
28779: AND
28780: IFFALSE 28804
// CutTreeXYR ( unit , x , y , 12 ) ;
28782: LD_VAR 0 2
28786: PPUSH
28787: LD_VAR 0 4
28791: PPUSH
28792: LD_VAR 0 5
28796: PPUSH
28797: LD_INT 12
28799: PPUSH
28800: CALL 28899 0 4
// if cmd = 256 then
28804: LD_VAR 0 1
28808: PUSH
28809: LD_INT 256
28811: EQUAL
28812: IFFALSE 28833
// SetFactoryWaypoint ( unit , x , y ) ;
28814: LD_VAR 0 2
28818: PPUSH
28819: LD_VAR 0 4
28823: PPUSH
28824: LD_VAR 0 5
28828: PPUSH
28829: CALL 26814 0 3
// if cmd = 257 then
28833: LD_VAR 0 1
28837: PUSH
28838: LD_INT 257
28840: EQUAL
28841: IFFALSE 28862
// SetWarehouseGatheringPoint ( unit , x , y ) ;
28843: LD_VAR 0 2
28847: PPUSH
28848: LD_VAR 0 4
28852: PPUSH
28853: LD_VAR 0 5
28857: PPUSH
28858: CALL 27176 0 3
// if cmd = 258 then
28862: LD_VAR 0 1
28866: PUSH
28867: LD_INT 258
28869: EQUAL
28870: IFFALSE 28894
// BurnTreeXYR ( unit , x , y , 8 ) ;
28872: LD_VAR 0 2
28876: PPUSH
28877: LD_VAR 0 4
28881: PPUSH
28882: LD_VAR 0 5
28886: PPUSH
28887: LD_INT 8
28889: PPUSH
28890: CALL 29293 0 4
// end ;
28894: LD_VAR 0 6
28898: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
28899: LD_INT 0
28901: PPUSH
28902: PPUSH
28903: PPUSH
28904: PPUSH
28905: PPUSH
28906: PPUSH
28907: PPUSH
28908: PPUSH
28909: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
28910: LD_VAR 0 1
28914: PPUSH
28915: CALL_OW 302
28919: NOT
28920: PUSH
28921: LD_VAR 0 2
28925: PPUSH
28926: LD_VAR 0 3
28930: PPUSH
28931: CALL_OW 488
28935: NOT
28936: OR
28937: PUSH
28938: LD_VAR 0 4
28942: NOT
28943: OR
28944: IFFALSE 28948
// exit ;
28946: GO 29288
// list := [ ] ;
28948: LD_ADDR_VAR 0 13
28952: PUSH
28953: EMPTY
28954: ST_TO_ADDR
// if x - r < 0 then
28955: LD_VAR 0 2
28959: PUSH
28960: LD_VAR 0 4
28964: MINUS
28965: PUSH
28966: LD_INT 0
28968: LESS
28969: IFFALSE 28981
// min_x := 0 else
28971: LD_ADDR_VAR 0 7
28975: PUSH
28976: LD_INT 0
28978: ST_TO_ADDR
28979: GO 28997
// min_x := x - r ;
28981: LD_ADDR_VAR 0 7
28985: PUSH
28986: LD_VAR 0 2
28990: PUSH
28991: LD_VAR 0 4
28995: MINUS
28996: ST_TO_ADDR
// if y - r < 0 then
28997: LD_VAR 0 3
29001: PUSH
29002: LD_VAR 0 4
29006: MINUS
29007: PUSH
29008: LD_INT 0
29010: LESS
29011: IFFALSE 29023
// min_y := 0 else
29013: LD_ADDR_VAR 0 8
29017: PUSH
29018: LD_INT 0
29020: ST_TO_ADDR
29021: GO 29039
// min_y := y - r ;
29023: LD_ADDR_VAR 0 8
29027: PUSH
29028: LD_VAR 0 3
29032: PUSH
29033: LD_VAR 0 4
29037: MINUS
29038: ST_TO_ADDR
// max_x := x + r ;
29039: LD_ADDR_VAR 0 9
29043: PUSH
29044: LD_VAR 0 2
29048: PUSH
29049: LD_VAR 0 4
29053: PLUS
29054: ST_TO_ADDR
// max_y := y + r ;
29055: LD_ADDR_VAR 0 10
29059: PUSH
29060: LD_VAR 0 3
29064: PUSH
29065: LD_VAR 0 4
29069: PLUS
29070: ST_TO_ADDR
// for _x = min_x to max_x do
29071: LD_ADDR_VAR 0 11
29075: PUSH
29076: DOUBLE
29077: LD_VAR 0 7
29081: DEC
29082: ST_TO_ADDR
29083: LD_VAR 0 9
29087: PUSH
29088: FOR_TO
29089: IFFALSE 29206
// for _y = min_y to max_y do
29091: LD_ADDR_VAR 0 12
29095: PUSH
29096: DOUBLE
29097: LD_VAR 0 8
29101: DEC
29102: ST_TO_ADDR
29103: LD_VAR 0 10
29107: PUSH
29108: FOR_TO
29109: IFFALSE 29202
// begin if not ValidHex ( _x , _y ) then
29111: LD_VAR 0 11
29115: PPUSH
29116: LD_VAR 0 12
29120: PPUSH
29121: CALL_OW 488
29125: NOT
29126: IFFALSE 29130
// continue ;
29128: GO 29108
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
29130: LD_VAR 0 11
29134: PPUSH
29135: LD_VAR 0 12
29139: PPUSH
29140: CALL_OW 351
29144: PUSH
29145: LD_VAR 0 11
29149: PPUSH
29150: LD_VAR 0 12
29154: PPUSH
29155: CALL_OW 554
29159: AND
29160: IFFALSE 29200
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
29162: LD_ADDR_VAR 0 13
29166: PUSH
29167: LD_VAR 0 13
29171: PPUSH
29172: LD_VAR 0 13
29176: PUSH
29177: LD_INT 1
29179: PLUS
29180: PPUSH
29181: LD_VAR 0 11
29185: PUSH
29186: LD_VAR 0 12
29190: PUSH
29191: EMPTY
29192: LIST
29193: LIST
29194: PPUSH
29195: CALL_OW 2
29199: ST_TO_ADDR
// end ;
29200: GO 29108
29202: POP
29203: POP
29204: GO 29088
29206: POP
29207: POP
// if not list then
29208: LD_VAR 0 13
29212: NOT
29213: IFFALSE 29217
// exit ;
29215: GO 29288
// for i in list do
29217: LD_ADDR_VAR 0 6
29221: PUSH
29222: LD_VAR 0 13
29226: PUSH
29227: FOR_IN
29228: IFFALSE 29286
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
29230: LD_VAR 0 1
29234: PPUSH
29235: LD_STRING M
29237: PUSH
29238: LD_VAR 0 6
29242: PUSH
29243: LD_INT 1
29245: ARRAY
29246: PUSH
29247: LD_VAR 0 6
29251: PUSH
29252: LD_INT 2
29254: ARRAY
29255: PUSH
29256: LD_INT 0
29258: PUSH
29259: LD_INT 0
29261: PUSH
29262: LD_INT 0
29264: PUSH
29265: LD_INT 0
29267: PUSH
29268: EMPTY
29269: LIST
29270: LIST
29271: LIST
29272: LIST
29273: LIST
29274: LIST
29275: LIST
29276: PUSH
29277: EMPTY
29278: LIST
29279: PPUSH
29280: CALL_OW 447
29284: GO 29227
29286: POP
29287: POP
// end ;
29288: LD_VAR 0 5
29292: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
29293: LD_INT 0
29295: PPUSH
29296: PPUSH
29297: PPUSH
29298: PPUSH
29299: PPUSH
29300: PPUSH
29301: PPUSH
29302: PPUSH
29303: PPUSH
29304: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
29305: LD_VAR 0 1
29309: PPUSH
29310: CALL_OW 302
29314: NOT
29315: PUSH
29316: LD_VAR 0 2
29320: PPUSH
29321: LD_VAR 0 3
29325: PPUSH
29326: CALL_OW 488
29330: NOT
29331: OR
29332: PUSH
29333: LD_VAR 0 4
29337: NOT
29338: OR
29339: IFFALSE 29343
// exit ;
29341: GO 29856
// list := [ ] ;
29343: LD_ADDR_VAR 0 13
29347: PUSH
29348: EMPTY
29349: ST_TO_ADDR
// if x - r < 0 then
29350: LD_VAR 0 2
29354: PUSH
29355: LD_VAR 0 4
29359: MINUS
29360: PUSH
29361: LD_INT 0
29363: LESS
29364: IFFALSE 29376
// min_x := 0 else
29366: LD_ADDR_VAR 0 7
29370: PUSH
29371: LD_INT 0
29373: ST_TO_ADDR
29374: GO 29392
// min_x := x - r ;
29376: LD_ADDR_VAR 0 7
29380: PUSH
29381: LD_VAR 0 2
29385: PUSH
29386: LD_VAR 0 4
29390: MINUS
29391: ST_TO_ADDR
// if y - r < 0 then
29392: LD_VAR 0 3
29396: PUSH
29397: LD_VAR 0 4
29401: MINUS
29402: PUSH
29403: LD_INT 0
29405: LESS
29406: IFFALSE 29418
// min_y := 0 else
29408: LD_ADDR_VAR 0 8
29412: PUSH
29413: LD_INT 0
29415: ST_TO_ADDR
29416: GO 29434
// min_y := y - r ;
29418: LD_ADDR_VAR 0 8
29422: PUSH
29423: LD_VAR 0 3
29427: PUSH
29428: LD_VAR 0 4
29432: MINUS
29433: ST_TO_ADDR
// max_x := x + r ;
29434: LD_ADDR_VAR 0 9
29438: PUSH
29439: LD_VAR 0 2
29443: PUSH
29444: LD_VAR 0 4
29448: PLUS
29449: ST_TO_ADDR
// max_y := y + r ;
29450: LD_ADDR_VAR 0 10
29454: PUSH
29455: LD_VAR 0 3
29459: PUSH
29460: LD_VAR 0 4
29464: PLUS
29465: ST_TO_ADDR
// for _x = min_x to max_x do
29466: LD_ADDR_VAR 0 11
29470: PUSH
29471: DOUBLE
29472: LD_VAR 0 7
29476: DEC
29477: ST_TO_ADDR
29478: LD_VAR 0 9
29482: PUSH
29483: FOR_TO
29484: IFFALSE 29601
// for _y = min_y to max_y do
29486: LD_ADDR_VAR 0 12
29490: PUSH
29491: DOUBLE
29492: LD_VAR 0 8
29496: DEC
29497: ST_TO_ADDR
29498: LD_VAR 0 10
29502: PUSH
29503: FOR_TO
29504: IFFALSE 29597
// begin if not ValidHex ( _x , _y ) then
29506: LD_VAR 0 11
29510: PPUSH
29511: LD_VAR 0 12
29515: PPUSH
29516: CALL_OW 488
29520: NOT
29521: IFFALSE 29525
// continue ;
29523: GO 29503
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
29525: LD_VAR 0 11
29529: PPUSH
29530: LD_VAR 0 12
29534: PPUSH
29535: CALL_OW 351
29539: PUSH
29540: LD_VAR 0 11
29544: PPUSH
29545: LD_VAR 0 12
29549: PPUSH
29550: CALL_OW 554
29554: AND
29555: IFFALSE 29595
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
29557: LD_ADDR_VAR 0 13
29561: PUSH
29562: LD_VAR 0 13
29566: PPUSH
29567: LD_VAR 0 13
29571: PUSH
29572: LD_INT 1
29574: PLUS
29575: PPUSH
29576: LD_VAR 0 11
29580: PUSH
29581: LD_VAR 0 12
29585: PUSH
29586: EMPTY
29587: LIST
29588: LIST
29589: PPUSH
29590: CALL_OW 2
29594: ST_TO_ADDR
// end ;
29595: GO 29503
29597: POP
29598: POP
29599: GO 29483
29601: POP
29602: POP
// if not list then
29603: LD_VAR 0 13
29607: NOT
29608: IFFALSE 29612
// exit ;
29610: GO 29856
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
29612: LD_ADDR_VAR 0 13
29616: PUSH
29617: LD_VAR 0 1
29621: PPUSH
29622: LD_VAR 0 13
29626: PPUSH
29627: LD_INT 1
29629: PPUSH
29630: LD_INT 1
29632: PPUSH
29633: CALL 38469 0 4
29637: ST_TO_ADDR
// ComStop ( flame ) ;
29638: LD_VAR 0 1
29642: PPUSH
29643: CALL_OW 141
// for i in list do
29647: LD_ADDR_VAR 0 6
29651: PUSH
29652: LD_VAR 0 13
29656: PUSH
29657: FOR_IN
29658: IFFALSE 29689
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
29660: LD_VAR 0 1
29664: PPUSH
29665: LD_VAR 0 6
29669: PUSH
29670: LD_INT 1
29672: ARRAY
29673: PPUSH
29674: LD_VAR 0 6
29678: PUSH
29679: LD_INT 2
29681: ARRAY
29682: PPUSH
29683: CALL_OW 176
29687: GO 29657
29689: POP
29690: POP
// repeat wait ( 0 0$1 ) ;
29691: LD_INT 35
29693: PPUSH
29694: CALL_OW 67
// task := GetTaskList ( flame ) ;
29698: LD_ADDR_VAR 0 14
29702: PUSH
29703: LD_VAR 0 1
29707: PPUSH
29708: CALL_OW 437
29712: ST_TO_ADDR
// if not task then
29713: LD_VAR 0 14
29717: NOT
29718: IFFALSE 29722
// exit ;
29720: GO 29856
// if task [ 1 ] [ 1 ] <> | then
29722: LD_VAR 0 14
29726: PUSH
29727: LD_INT 1
29729: ARRAY
29730: PUSH
29731: LD_INT 1
29733: ARRAY
29734: PUSH
29735: LD_STRING |
29737: NONEQUAL
29738: IFFALSE 29742
// exit ;
29740: GO 29856
// _x := task [ 1 ] [ 2 ] ;
29742: LD_ADDR_VAR 0 11
29746: PUSH
29747: LD_VAR 0 14
29751: PUSH
29752: LD_INT 1
29754: ARRAY
29755: PUSH
29756: LD_INT 2
29758: ARRAY
29759: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
29760: LD_ADDR_VAR 0 12
29764: PUSH
29765: LD_VAR 0 14
29769: PUSH
29770: LD_INT 1
29772: ARRAY
29773: PUSH
29774: LD_INT 3
29776: ARRAY
29777: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
29778: LD_VAR 0 11
29782: PPUSH
29783: LD_VAR 0 12
29787: PPUSH
29788: CALL_OW 351
29792: NOT
29793: PUSH
29794: LD_VAR 0 11
29798: PPUSH
29799: LD_VAR 0 12
29803: PPUSH
29804: CALL_OW 554
29808: NOT
29809: OR
29810: IFFALSE 29844
// begin task := Delete ( task , 1 ) ;
29812: LD_ADDR_VAR 0 14
29816: PUSH
29817: LD_VAR 0 14
29821: PPUSH
29822: LD_INT 1
29824: PPUSH
29825: CALL_OW 3
29829: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
29830: LD_VAR 0 1
29834: PPUSH
29835: LD_VAR 0 14
29839: PPUSH
29840: CALL_OW 446
// end ; until not HasTask ( flame ) ;
29844: LD_VAR 0 1
29848: PPUSH
29849: CALL_OW 314
29853: NOT
29854: IFFALSE 29691
// end ;
29856: LD_VAR 0 5
29860: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
29861: LD_EXP 83
29865: NOT
29866: IFFALSE 29916
29868: GO 29870
29870: DISABLE
// begin initHack := true ;
29871: LD_ADDR_EXP 83
29875: PUSH
29876: LD_INT 1
29878: ST_TO_ADDR
// hackTanks := [ ] ;
29879: LD_ADDR_EXP 84
29883: PUSH
29884: EMPTY
29885: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
29886: LD_ADDR_EXP 85
29890: PUSH
29891: EMPTY
29892: ST_TO_ADDR
// hackLimit := 3 ;
29893: LD_ADDR_EXP 86
29897: PUSH
29898: LD_INT 3
29900: ST_TO_ADDR
// hackDist := 12 ;
29901: LD_ADDR_EXP 87
29905: PUSH
29906: LD_INT 12
29908: ST_TO_ADDR
// hackCounter := [ ] ;
29909: LD_ADDR_EXP 88
29913: PUSH
29914: EMPTY
29915: ST_TO_ADDR
// end ;
29916: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
29917: LD_EXP 83
29921: PUSH
29922: LD_INT 34
29924: PUSH
29925: LD_INT 99
29927: PUSH
29928: EMPTY
29929: LIST
29930: LIST
29931: PPUSH
29932: CALL_OW 69
29936: AND
29937: IFFALSE 30190
29939: GO 29941
29941: DISABLE
29942: LD_INT 0
29944: PPUSH
29945: PPUSH
// begin enable ;
29946: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
29947: LD_ADDR_VAR 0 1
29951: PUSH
29952: LD_INT 34
29954: PUSH
29955: LD_INT 99
29957: PUSH
29958: EMPTY
29959: LIST
29960: LIST
29961: PPUSH
29962: CALL_OW 69
29966: PUSH
29967: FOR_IN
29968: IFFALSE 30188
// begin if not i in hackTanks then
29970: LD_VAR 0 1
29974: PUSH
29975: LD_EXP 84
29979: IN
29980: NOT
29981: IFFALSE 30064
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
29983: LD_ADDR_EXP 84
29987: PUSH
29988: LD_EXP 84
29992: PPUSH
29993: LD_EXP 84
29997: PUSH
29998: LD_INT 1
30000: PLUS
30001: PPUSH
30002: LD_VAR 0 1
30006: PPUSH
30007: CALL_OW 1
30011: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
30012: LD_ADDR_EXP 85
30016: PUSH
30017: LD_EXP 85
30021: PPUSH
30022: LD_EXP 85
30026: PUSH
30027: LD_INT 1
30029: PLUS
30030: PPUSH
30031: EMPTY
30032: PPUSH
30033: CALL_OW 1
30037: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
30038: LD_ADDR_EXP 88
30042: PUSH
30043: LD_EXP 88
30047: PPUSH
30048: LD_EXP 88
30052: PUSH
30053: LD_INT 1
30055: PLUS
30056: PPUSH
30057: EMPTY
30058: PPUSH
30059: CALL_OW 1
30063: ST_TO_ADDR
// end ; if not IsOk ( i ) then
30064: LD_VAR 0 1
30068: PPUSH
30069: CALL_OW 302
30073: NOT
30074: IFFALSE 30087
// begin HackUnlinkAll ( i ) ;
30076: LD_VAR 0 1
30080: PPUSH
30081: CALL 30193 0 1
// continue ;
30085: GO 29967
// end ; HackCheckCapturedStatus ( i ) ;
30087: LD_VAR 0 1
30091: PPUSH
30092: CALL 30636 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
30096: LD_ADDR_VAR 0 2
30100: PUSH
30101: LD_INT 81
30103: PUSH
30104: LD_VAR 0 1
30108: PPUSH
30109: CALL_OW 255
30113: PUSH
30114: EMPTY
30115: LIST
30116: LIST
30117: PUSH
30118: LD_INT 33
30120: PUSH
30121: LD_INT 3
30123: PUSH
30124: EMPTY
30125: LIST
30126: LIST
30127: PUSH
30128: LD_INT 91
30130: PUSH
30131: LD_VAR 0 1
30135: PUSH
30136: LD_EXP 87
30140: PUSH
30141: EMPTY
30142: LIST
30143: LIST
30144: LIST
30145: PUSH
30146: LD_INT 50
30148: PUSH
30149: EMPTY
30150: LIST
30151: PUSH
30152: EMPTY
30153: LIST
30154: LIST
30155: LIST
30156: LIST
30157: PPUSH
30158: CALL_OW 69
30162: ST_TO_ADDR
// if not tmp then
30163: LD_VAR 0 2
30167: NOT
30168: IFFALSE 30172
// continue ;
30170: GO 29967
// HackLink ( i , tmp ) ;
30172: LD_VAR 0 1
30176: PPUSH
30177: LD_VAR 0 2
30181: PPUSH
30182: CALL 30329 0 2
// end ;
30186: GO 29967
30188: POP
30189: POP
// end ;
30190: PPOPN 2
30192: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
30193: LD_INT 0
30195: PPUSH
30196: PPUSH
30197: PPUSH
// if not hack in hackTanks then
30198: LD_VAR 0 1
30202: PUSH
30203: LD_EXP 84
30207: IN
30208: NOT
30209: IFFALSE 30213
// exit ;
30211: GO 30324
// index := GetElementIndex ( hackTanks , hack ) ;
30213: LD_ADDR_VAR 0 4
30217: PUSH
30218: LD_EXP 84
30222: PPUSH
30223: LD_VAR 0 1
30227: PPUSH
30228: CALL 37766 0 2
30232: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
30233: LD_EXP 85
30237: PUSH
30238: LD_VAR 0 4
30242: ARRAY
30243: IFFALSE 30324
// begin for i in hackTanksCaptured [ index ] do
30245: LD_ADDR_VAR 0 3
30249: PUSH
30250: LD_EXP 85
30254: PUSH
30255: LD_VAR 0 4
30259: ARRAY
30260: PUSH
30261: FOR_IN
30262: IFFALSE 30288
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
30264: LD_VAR 0 3
30268: PUSH
30269: LD_INT 1
30271: ARRAY
30272: PPUSH
30273: LD_VAR 0 3
30277: PUSH
30278: LD_INT 2
30280: ARRAY
30281: PPUSH
30282: CALL_OW 235
30286: GO 30261
30288: POP
30289: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
30290: LD_ADDR_EXP 85
30294: PUSH
30295: LD_EXP 85
30299: PPUSH
30300: LD_VAR 0 4
30304: PPUSH
30305: EMPTY
30306: PPUSH
30307: CALL_OW 1
30311: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
30312: LD_VAR 0 1
30316: PPUSH
30317: LD_INT 0
30319: PPUSH
30320: CALL_OW 505
// end ; end ;
30324: LD_VAR 0 2
30328: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
30329: LD_INT 0
30331: PPUSH
30332: PPUSH
30333: PPUSH
// if not hack in hackTanks or not vehicles then
30334: LD_VAR 0 1
30338: PUSH
30339: LD_EXP 84
30343: IN
30344: NOT
30345: PUSH
30346: LD_VAR 0 2
30350: NOT
30351: OR
30352: IFFALSE 30356
// exit ;
30354: GO 30631
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
30356: LD_ADDR_VAR 0 2
30360: PUSH
30361: LD_VAR 0 1
30365: PPUSH
30366: LD_VAR 0 2
30370: PPUSH
30371: LD_INT 1
30373: PPUSH
30374: LD_INT 1
30376: PPUSH
30377: CALL 38416 0 4
30381: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
30382: LD_ADDR_VAR 0 5
30386: PUSH
30387: LD_EXP 84
30391: PPUSH
30392: LD_VAR 0 1
30396: PPUSH
30397: CALL 37766 0 2
30401: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
30402: LD_EXP 85
30406: PUSH
30407: LD_VAR 0 5
30411: ARRAY
30412: PUSH
30413: LD_EXP 86
30417: LESS
30418: IFFALSE 30607
// begin for i := 1 to vehicles do
30420: LD_ADDR_VAR 0 4
30424: PUSH
30425: DOUBLE
30426: LD_INT 1
30428: DEC
30429: ST_TO_ADDR
30430: LD_VAR 0 2
30434: PUSH
30435: FOR_TO
30436: IFFALSE 30605
// begin if hackTanksCaptured [ index ] = hackLimit then
30438: LD_EXP 85
30442: PUSH
30443: LD_VAR 0 5
30447: ARRAY
30448: PUSH
30449: LD_EXP 86
30453: EQUAL
30454: IFFALSE 30458
// break ;
30456: GO 30605
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
30458: LD_ADDR_EXP 88
30462: PUSH
30463: LD_EXP 88
30467: PPUSH
30468: LD_VAR 0 5
30472: PPUSH
30473: LD_EXP 88
30477: PUSH
30478: LD_VAR 0 5
30482: ARRAY
30483: PUSH
30484: LD_INT 1
30486: PLUS
30487: PPUSH
30488: CALL_OW 1
30492: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
30493: LD_ADDR_EXP 85
30497: PUSH
30498: LD_EXP 85
30502: PPUSH
30503: LD_VAR 0 5
30507: PUSH
30508: LD_EXP 85
30512: PUSH
30513: LD_VAR 0 5
30517: ARRAY
30518: PUSH
30519: LD_INT 1
30521: PLUS
30522: PUSH
30523: EMPTY
30524: LIST
30525: LIST
30526: PPUSH
30527: LD_VAR 0 2
30531: PUSH
30532: LD_VAR 0 4
30536: ARRAY
30537: PUSH
30538: LD_VAR 0 2
30542: PUSH
30543: LD_VAR 0 4
30547: ARRAY
30548: PPUSH
30549: CALL_OW 255
30553: PUSH
30554: EMPTY
30555: LIST
30556: LIST
30557: PPUSH
30558: CALL 37981 0 3
30562: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
30563: LD_VAR 0 2
30567: PUSH
30568: LD_VAR 0 4
30572: ARRAY
30573: PPUSH
30574: LD_VAR 0 1
30578: PPUSH
30579: CALL_OW 255
30583: PPUSH
30584: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
30588: LD_VAR 0 2
30592: PUSH
30593: LD_VAR 0 4
30597: ARRAY
30598: PPUSH
30599: CALL_OW 141
// end ;
30603: GO 30435
30605: POP
30606: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
30607: LD_VAR 0 1
30611: PPUSH
30612: LD_EXP 85
30616: PUSH
30617: LD_VAR 0 5
30621: ARRAY
30622: PUSH
30623: LD_INT 0
30625: PLUS
30626: PPUSH
30627: CALL_OW 505
// end ;
30631: LD_VAR 0 3
30635: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
30636: LD_INT 0
30638: PPUSH
30639: PPUSH
30640: PPUSH
30641: PPUSH
// if not hack in hackTanks then
30642: LD_VAR 0 1
30646: PUSH
30647: LD_EXP 84
30651: IN
30652: NOT
30653: IFFALSE 30657
// exit ;
30655: GO 30897
// index := GetElementIndex ( hackTanks , hack ) ;
30657: LD_ADDR_VAR 0 4
30661: PUSH
30662: LD_EXP 84
30666: PPUSH
30667: LD_VAR 0 1
30671: PPUSH
30672: CALL 37766 0 2
30676: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
30677: LD_ADDR_VAR 0 3
30681: PUSH
30682: DOUBLE
30683: LD_EXP 85
30687: PUSH
30688: LD_VAR 0 4
30692: ARRAY
30693: INC
30694: ST_TO_ADDR
30695: LD_INT 1
30697: PUSH
30698: FOR_DOWNTO
30699: IFFALSE 30871
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
30701: LD_ADDR_VAR 0 5
30705: PUSH
30706: LD_EXP 85
30710: PUSH
30711: LD_VAR 0 4
30715: ARRAY
30716: PUSH
30717: LD_VAR 0 3
30721: ARRAY
30722: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
30723: LD_VAR 0 5
30727: PUSH
30728: LD_INT 1
30730: ARRAY
30731: PPUSH
30732: CALL_OW 302
30736: NOT
30737: PUSH
30738: LD_VAR 0 5
30742: PUSH
30743: LD_INT 1
30745: ARRAY
30746: PPUSH
30747: CALL_OW 255
30751: PUSH
30752: LD_VAR 0 1
30756: PPUSH
30757: CALL_OW 255
30761: NONEQUAL
30762: OR
30763: IFFALSE 30869
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
30765: LD_VAR 0 5
30769: PUSH
30770: LD_INT 1
30772: ARRAY
30773: PPUSH
30774: CALL_OW 305
30778: PUSH
30779: LD_VAR 0 5
30783: PUSH
30784: LD_INT 1
30786: ARRAY
30787: PPUSH
30788: CALL_OW 255
30792: PUSH
30793: LD_VAR 0 1
30797: PPUSH
30798: CALL_OW 255
30802: EQUAL
30803: AND
30804: IFFALSE 30828
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
30806: LD_VAR 0 5
30810: PUSH
30811: LD_INT 1
30813: ARRAY
30814: PPUSH
30815: LD_VAR 0 5
30819: PUSH
30820: LD_INT 2
30822: ARRAY
30823: PPUSH
30824: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
30828: LD_ADDR_EXP 85
30832: PUSH
30833: LD_EXP 85
30837: PPUSH
30838: LD_VAR 0 4
30842: PPUSH
30843: LD_EXP 85
30847: PUSH
30848: LD_VAR 0 4
30852: ARRAY
30853: PPUSH
30854: LD_VAR 0 3
30858: PPUSH
30859: CALL_OW 3
30863: PPUSH
30864: CALL_OW 1
30868: ST_TO_ADDR
// end ; end ;
30869: GO 30698
30871: POP
30872: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
30873: LD_VAR 0 1
30877: PPUSH
30878: LD_EXP 85
30882: PUSH
30883: LD_VAR 0 4
30887: ARRAY
30888: PUSH
30889: LD_INT 0
30891: PLUS
30892: PPUSH
30893: CALL_OW 505
// end ;
30897: LD_VAR 0 2
30901: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
30902: LD_INT 0
30904: PPUSH
30905: PPUSH
30906: PPUSH
30907: PPUSH
// if not hack in hackTanks then
30908: LD_VAR 0 1
30912: PUSH
30913: LD_EXP 84
30917: IN
30918: NOT
30919: IFFALSE 30923
// exit ;
30921: GO 31008
// index := GetElementIndex ( hackTanks , hack ) ;
30923: LD_ADDR_VAR 0 5
30927: PUSH
30928: LD_EXP 84
30932: PPUSH
30933: LD_VAR 0 1
30937: PPUSH
30938: CALL 37766 0 2
30942: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
30943: LD_ADDR_VAR 0 4
30947: PUSH
30948: DOUBLE
30949: LD_INT 1
30951: DEC
30952: ST_TO_ADDR
30953: LD_EXP 85
30957: PUSH
30958: LD_VAR 0 5
30962: ARRAY
30963: PUSH
30964: FOR_TO
30965: IFFALSE 31006
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
30967: LD_EXP 85
30971: PUSH
30972: LD_VAR 0 5
30976: ARRAY
30977: PUSH
30978: LD_VAR 0 4
30982: ARRAY
30983: PUSH
30984: LD_INT 1
30986: ARRAY
30987: PUSH
30988: LD_VAR 0 2
30992: EQUAL
30993: IFFALSE 31004
// KillUnit ( vehicle ) ;
30995: LD_VAR 0 2
30999: PPUSH
31000: CALL_OW 66
31004: GO 30964
31006: POP
31007: POP
// end ;
31008: LD_VAR 0 3
31012: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
31013: LD_EXP 89
31017: NOT
31018: IFFALSE 31053
31020: GO 31022
31022: DISABLE
// begin initMiner := true ;
31023: LD_ADDR_EXP 89
31027: PUSH
31028: LD_INT 1
31030: ST_TO_ADDR
// minersList := [ ] ;
31031: LD_ADDR_EXP 90
31035: PUSH
31036: EMPTY
31037: ST_TO_ADDR
// minerMinesList := [ ] ;
31038: LD_ADDR_EXP 91
31042: PUSH
31043: EMPTY
31044: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
31045: LD_ADDR_EXP 92
31049: PUSH
31050: LD_INT 5
31052: ST_TO_ADDR
// end ;
31053: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
31054: LD_EXP 89
31058: PUSH
31059: LD_INT 34
31061: PUSH
31062: LD_INT 81
31064: PUSH
31065: EMPTY
31066: LIST
31067: LIST
31068: PPUSH
31069: CALL_OW 69
31073: AND
31074: IFFALSE 31535
31076: GO 31078
31078: DISABLE
31079: LD_INT 0
31081: PPUSH
31082: PPUSH
31083: PPUSH
31084: PPUSH
// begin enable ;
31085: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
31086: LD_ADDR_VAR 0 1
31090: PUSH
31091: LD_INT 34
31093: PUSH
31094: LD_INT 81
31096: PUSH
31097: EMPTY
31098: LIST
31099: LIST
31100: PPUSH
31101: CALL_OW 69
31105: PUSH
31106: FOR_IN
31107: IFFALSE 31179
// begin if not i in minersList then
31109: LD_VAR 0 1
31113: PUSH
31114: LD_EXP 90
31118: IN
31119: NOT
31120: IFFALSE 31177
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
31122: LD_ADDR_EXP 90
31126: PUSH
31127: LD_EXP 90
31131: PPUSH
31132: LD_EXP 90
31136: PUSH
31137: LD_INT 1
31139: PLUS
31140: PPUSH
31141: LD_VAR 0 1
31145: PPUSH
31146: CALL_OW 1
31150: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
31151: LD_ADDR_EXP 91
31155: PUSH
31156: LD_EXP 91
31160: PPUSH
31161: LD_EXP 91
31165: PUSH
31166: LD_INT 1
31168: PLUS
31169: PPUSH
31170: EMPTY
31171: PPUSH
31172: CALL_OW 1
31176: ST_TO_ADDR
// end end ;
31177: GO 31106
31179: POP
31180: POP
// for i := minerMinesList downto 1 do
31181: LD_ADDR_VAR 0 1
31185: PUSH
31186: DOUBLE
31187: LD_EXP 91
31191: INC
31192: ST_TO_ADDR
31193: LD_INT 1
31195: PUSH
31196: FOR_DOWNTO
31197: IFFALSE 31533
// begin if IsLive ( minersList [ i ] ) then
31199: LD_EXP 90
31203: PUSH
31204: LD_VAR 0 1
31208: ARRAY
31209: PPUSH
31210: CALL_OW 300
31214: IFFALSE 31242
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
31216: LD_EXP 90
31220: PUSH
31221: LD_VAR 0 1
31225: ARRAY
31226: PPUSH
31227: LD_EXP 91
31231: PUSH
31232: LD_VAR 0 1
31236: ARRAY
31237: PPUSH
31238: CALL_OW 505
// if not minerMinesList [ i ] then
31242: LD_EXP 91
31246: PUSH
31247: LD_VAR 0 1
31251: ARRAY
31252: NOT
31253: IFFALSE 31257
// continue ;
31255: GO 31196
// for j := minerMinesList [ i ] downto 1 do
31257: LD_ADDR_VAR 0 2
31261: PUSH
31262: DOUBLE
31263: LD_EXP 91
31267: PUSH
31268: LD_VAR 0 1
31272: ARRAY
31273: INC
31274: ST_TO_ADDR
31275: LD_INT 1
31277: PUSH
31278: FOR_DOWNTO
31279: IFFALSE 31529
// begin side := GetSide ( minersList [ i ] ) ;
31281: LD_ADDR_VAR 0 3
31285: PUSH
31286: LD_EXP 90
31290: PUSH
31291: LD_VAR 0 1
31295: ARRAY
31296: PPUSH
31297: CALL_OW 255
31301: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
31302: LD_ADDR_VAR 0 4
31306: PUSH
31307: LD_EXP 91
31311: PUSH
31312: LD_VAR 0 1
31316: ARRAY
31317: PUSH
31318: LD_VAR 0 2
31322: ARRAY
31323: PUSH
31324: LD_INT 1
31326: ARRAY
31327: PPUSH
31328: LD_EXP 91
31332: PUSH
31333: LD_VAR 0 1
31337: ARRAY
31338: PUSH
31339: LD_VAR 0 2
31343: ARRAY
31344: PUSH
31345: LD_INT 2
31347: ARRAY
31348: PPUSH
31349: CALL_OW 428
31353: ST_TO_ADDR
// if not tmp then
31354: LD_VAR 0 4
31358: NOT
31359: IFFALSE 31363
// continue ;
31361: GO 31278
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
31363: LD_VAR 0 4
31367: PUSH
31368: LD_INT 81
31370: PUSH
31371: LD_VAR 0 3
31375: PUSH
31376: EMPTY
31377: LIST
31378: LIST
31379: PPUSH
31380: CALL_OW 69
31384: IN
31385: PUSH
31386: LD_EXP 91
31390: PUSH
31391: LD_VAR 0 1
31395: ARRAY
31396: PUSH
31397: LD_VAR 0 2
31401: ARRAY
31402: PUSH
31403: LD_INT 1
31405: ARRAY
31406: PPUSH
31407: LD_EXP 91
31411: PUSH
31412: LD_VAR 0 1
31416: ARRAY
31417: PUSH
31418: LD_VAR 0 2
31422: ARRAY
31423: PUSH
31424: LD_INT 2
31426: ARRAY
31427: PPUSH
31428: CALL_OW 458
31432: AND
31433: IFFALSE 31527
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
31435: LD_EXP 91
31439: PUSH
31440: LD_VAR 0 1
31444: ARRAY
31445: PUSH
31446: LD_VAR 0 2
31450: ARRAY
31451: PUSH
31452: LD_INT 1
31454: ARRAY
31455: PPUSH
31456: LD_EXP 91
31460: PUSH
31461: LD_VAR 0 1
31465: ARRAY
31466: PUSH
31467: LD_VAR 0 2
31471: ARRAY
31472: PUSH
31473: LD_INT 2
31475: ARRAY
31476: PPUSH
31477: LD_VAR 0 3
31481: PPUSH
31482: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
31486: LD_ADDR_EXP 91
31490: PUSH
31491: LD_EXP 91
31495: PPUSH
31496: LD_VAR 0 1
31500: PPUSH
31501: LD_EXP 91
31505: PUSH
31506: LD_VAR 0 1
31510: ARRAY
31511: PPUSH
31512: LD_VAR 0 2
31516: PPUSH
31517: CALL_OW 3
31521: PPUSH
31522: CALL_OW 1
31526: ST_TO_ADDR
// end ; end ;
31527: GO 31278
31529: POP
31530: POP
// end ;
31531: GO 31196
31533: POP
31534: POP
// end ;
31535: PPOPN 4
31537: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
31538: LD_INT 0
31540: PPUSH
31541: PPUSH
// result := false ;
31542: LD_ADDR_VAR 0 4
31546: PUSH
31547: LD_INT 0
31549: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
31550: LD_VAR 0 1
31554: PPUSH
31555: CALL_OW 264
31559: PUSH
31560: LD_INT 81
31562: EQUAL
31563: NOT
31564: IFFALSE 31568
// exit ;
31566: GO 31808
// index := GetElementIndex ( minersList , unit ) ;
31568: LD_ADDR_VAR 0 5
31572: PUSH
31573: LD_EXP 90
31577: PPUSH
31578: LD_VAR 0 1
31582: PPUSH
31583: CALL 37766 0 2
31587: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
31588: LD_EXP 91
31592: PUSH
31593: LD_VAR 0 5
31597: ARRAY
31598: PUSH
31599: LD_EXP 92
31603: GREATEREQUAL
31604: IFFALSE 31608
// exit ;
31606: GO 31808
// ComMoveXY ( unit , x , y ) ;
31608: LD_VAR 0 1
31612: PPUSH
31613: LD_VAR 0 2
31617: PPUSH
31618: LD_VAR 0 3
31622: PPUSH
31623: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
31627: LD_INT 35
31629: PPUSH
31630: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
31634: LD_VAR 0 1
31638: PPUSH
31639: LD_VAR 0 2
31643: PPUSH
31644: LD_VAR 0 3
31648: PPUSH
31649: CALL 69507 0 3
31653: NOT
31654: PUSH
31655: LD_VAR 0 1
31659: PPUSH
31660: CALL_OW 314
31664: AND
31665: IFFALSE 31669
// exit ;
31667: GO 31808
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
31669: LD_VAR 0 2
31673: PPUSH
31674: LD_VAR 0 3
31678: PPUSH
31679: CALL_OW 428
31683: PUSH
31684: LD_VAR 0 1
31688: EQUAL
31689: PUSH
31690: LD_VAR 0 1
31694: PPUSH
31695: CALL_OW 314
31699: NOT
31700: AND
31701: IFFALSE 31627
// PlaySoundXY ( x , y , PlantMine ) ;
31703: LD_VAR 0 2
31707: PPUSH
31708: LD_VAR 0 3
31712: PPUSH
31713: LD_STRING PlantMine
31715: PPUSH
31716: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
31720: LD_VAR 0 2
31724: PPUSH
31725: LD_VAR 0 3
31729: PPUSH
31730: LD_VAR 0 1
31734: PPUSH
31735: CALL_OW 255
31739: PPUSH
31740: LD_INT 0
31742: PPUSH
31743: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
31747: LD_ADDR_EXP 91
31751: PUSH
31752: LD_EXP 91
31756: PPUSH
31757: LD_VAR 0 5
31761: PUSH
31762: LD_EXP 91
31766: PUSH
31767: LD_VAR 0 5
31771: ARRAY
31772: PUSH
31773: LD_INT 1
31775: PLUS
31776: PUSH
31777: EMPTY
31778: LIST
31779: LIST
31780: PPUSH
31781: LD_VAR 0 2
31785: PUSH
31786: LD_VAR 0 3
31790: PUSH
31791: EMPTY
31792: LIST
31793: LIST
31794: PPUSH
31795: CALL 37981 0 3
31799: ST_TO_ADDR
// result := true ;
31800: LD_ADDR_VAR 0 4
31804: PUSH
31805: LD_INT 1
31807: ST_TO_ADDR
// end ;
31808: LD_VAR 0 4
31812: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
31813: LD_INT 0
31815: PPUSH
31816: PPUSH
31817: PPUSH
// if not unit in minersList then
31818: LD_VAR 0 1
31822: PUSH
31823: LD_EXP 90
31827: IN
31828: NOT
31829: IFFALSE 31833
// exit ;
31831: GO 32225
// index := GetElementIndex ( minersList , unit ) ;
31833: LD_ADDR_VAR 0 6
31837: PUSH
31838: LD_EXP 90
31842: PPUSH
31843: LD_VAR 0 1
31847: PPUSH
31848: CALL 37766 0 2
31852: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
31853: LD_ADDR_VAR 0 5
31857: PUSH
31858: DOUBLE
31859: LD_EXP 91
31863: PUSH
31864: LD_VAR 0 6
31868: ARRAY
31869: INC
31870: ST_TO_ADDR
31871: LD_INT 1
31873: PUSH
31874: FOR_DOWNTO
31875: IFFALSE 32036
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
31877: LD_EXP 91
31881: PUSH
31882: LD_VAR 0 6
31886: ARRAY
31887: PUSH
31888: LD_VAR 0 5
31892: ARRAY
31893: PUSH
31894: LD_INT 1
31896: ARRAY
31897: PUSH
31898: LD_VAR 0 2
31902: EQUAL
31903: PUSH
31904: LD_EXP 91
31908: PUSH
31909: LD_VAR 0 6
31913: ARRAY
31914: PUSH
31915: LD_VAR 0 5
31919: ARRAY
31920: PUSH
31921: LD_INT 2
31923: ARRAY
31924: PUSH
31925: LD_VAR 0 3
31929: EQUAL
31930: AND
31931: IFFALSE 32034
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
31933: LD_EXP 91
31937: PUSH
31938: LD_VAR 0 6
31942: ARRAY
31943: PUSH
31944: LD_VAR 0 5
31948: ARRAY
31949: PUSH
31950: LD_INT 1
31952: ARRAY
31953: PPUSH
31954: LD_EXP 91
31958: PUSH
31959: LD_VAR 0 6
31963: ARRAY
31964: PUSH
31965: LD_VAR 0 5
31969: ARRAY
31970: PUSH
31971: LD_INT 2
31973: ARRAY
31974: PPUSH
31975: LD_VAR 0 1
31979: PPUSH
31980: CALL_OW 255
31984: PPUSH
31985: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
31989: LD_ADDR_EXP 91
31993: PUSH
31994: LD_EXP 91
31998: PPUSH
31999: LD_VAR 0 6
32003: PPUSH
32004: LD_EXP 91
32008: PUSH
32009: LD_VAR 0 6
32013: ARRAY
32014: PPUSH
32015: LD_VAR 0 5
32019: PPUSH
32020: CALL_OW 3
32024: PPUSH
32025: CALL_OW 1
32029: ST_TO_ADDR
// exit ;
32030: POP
32031: POP
32032: GO 32225
// end ; end ;
32034: GO 31874
32036: POP
32037: POP
// for i := minerMinesList [ index ] downto 1 do
32038: LD_ADDR_VAR 0 5
32042: PUSH
32043: DOUBLE
32044: LD_EXP 91
32048: PUSH
32049: LD_VAR 0 6
32053: ARRAY
32054: INC
32055: ST_TO_ADDR
32056: LD_INT 1
32058: PUSH
32059: FOR_DOWNTO
32060: IFFALSE 32223
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
32062: LD_EXP 91
32066: PUSH
32067: LD_VAR 0 6
32071: ARRAY
32072: PUSH
32073: LD_VAR 0 5
32077: ARRAY
32078: PUSH
32079: LD_INT 1
32081: ARRAY
32082: PPUSH
32083: LD_EXP 91
32087: PUSH
32088: LD_VAR 0 6
32092: ARRAY
32093: PUSH
32094: LD_VAR 0 5
32098: ARRAY
32099: PUSH
32100: LD_INT 2
32102: ARRAY
32103: PPUSH
32104: LD_VAR 0 2
32108: PPUSH
32109: LD_VAR 0 3
32113: PPUSH
32114: CALL_OW 298
32118: PUSH
32119: LD_INT 6
32121: LESS
32122: IFFALSE 32221
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
32124: LD_EXP 91
32128: PUSH
32129: LD_VAR 0 6
32133: ARRAY
32134: PUSH
32135: LD_VAR 0 5
32139: ARRAY
32140: PUSH
32141: LD_INT 1
32143: ARRAY
32144: PPUSH
32145: LD_EXP 91
32149: PUSH
32150: LD_VAR 0 6
32154: ARRAY
32155: PUSH
32156: LD_VAR 0 5
32160: ARRAY
32161: PUSH
32162: LD_INT 2
32164: ARRAY
32165: PPUSH
32166: LD_VAR 0 1
32170: PPUSH
32171: CALL_OW 255
32175: PPUSH
32176: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
32180: LD_ADDR_EXP 91
32184: PUSH
32185: LD_EXP 91
32189: PPUSH
32190: LD_VAR 0 6
32194: PPUSH
32195: LD_EXP 91
32199: PUSH
32200: LD_VAR 0 6
32204: ARRAY
32205: PPUSH
32206: LD_VAR 0 5
32210: PPUSH
32211: CALL_OW 3
32215: PPUSH
32216: CALL_OW 1
32220: ST_TO_ADDR
// end ; end ;
32221: GO 32059
32223: POP
32224: POP
// end ;
32225: LD_VAR 0 4
32229: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
32230: LD_INT 0
32232: PPUSH
32233: PPUSH
32234: PPUSH
32235: PPUSH
32236: PPUSH
32237: PPUSH
32238: PPUSH
32239: PPUSH
32240: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
32241: LD_VAR 0 1
32245: PPUSH
32246: CALL_OW 264
32250: PUSH
32251: LD_INT 81
32253: EQUAL
32254: NOT
32255: PUSH
32256: LD_VAR 0 1
32260: PUSH
32261: LD_EXP 90
32265: IN
32266: NOT
32267: OR
32268: IFFALSE 32272
// exit ;
32270: GO 32594
// index := GetElementIndex ( minersList , unit ) ;
32272: LD_ADDR_VAR 0 6
32276: PUSH
32277: LD_EXP 90
32281: PPUSH
32282: LD_VAR 0 1
32286: PPUSH
32287: CALL 37766 0 2
32291: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
32292: LD_ADDR_VAR 0 8
32296: PUSH
32297: LD_EXP 92
32301: PUSH
32302: LD_EXP 91
32306: PUSH
32307: LD_VAR 0 6
32311: ARRAY
32312: MINUS
32313: ST_TO_ADDR
// if not minesFreeAmount then
32314: LD_VAR 0 8
32318: NOT
32319: IFFALSE 32323
// exit ;
32321: GO 32594
// tmp := [ ] ;
32323: LD_ADDR_VAR 0 7
32327: PUSH
32328: EMPTY
32329: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
32330: LD_ADDR_VAR 0 5
32334: PUSH
32335: DOUBLE
32336: LD_INT 1
32338: DEC
32339: ST_TO_ADDR
32340: LD_VAR 0 8
32344: PUSH
32345: FOR_TO
32346: IFFALSE 32541
// begin _d := rand ( 0 , 5 ) ;
32348: LD_ADDR_VAR 0 11
32352: PUSH
32353: LD_INT 0
32355: PPUSH
32356: LD_INT 5
32358: PPUSH
32359: CALL_OW 12
32363: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
32364: LD_ADDR_VAR 0 12
32368: PUSH
32369: LD_INT 2
32371: PPUSH
32372: LD_INT 6
32374: PPUSH
32375: CALL_OW 12
32379: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
32380: LD_ADDR_VAR 0 9
32384: PUSH
32385: LD_VAR 0 2
32389: PPUSH
32390: LD_VAR 0 11
32394: PPUSH
32395: LD_VAR 0 12
32399: PPUSH
32400: CALL_OW 272
32404: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
32405: LD_ADDR_VAR 0 10
32409: PUSH
32410: LD_VAR 0 3
32414: PPUSH
32415: LD_VAR 0 11
32419: PPUSH
32420: LD_VAR 0 12
32424: PPUSH
32425: CALL_OW 273
32429: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
32430: LD_VAR 0 9
32434: PPUSH
32435: LD_VAR 0 10
32439: PPUSH
32440: CALL_OW 488
32444: PUSH
32445: LD_VAR 0 9
32449: PUSH
32450: LD_VAR 0 10
32454: PUSH
32455: EMPTY
32456: LIST
32457: LIST
32458: PUSH
32459: LD_VAR 0 7
32463: IN
32464: NOT
32465: AND
32466: PUSH
32467: LD_VAR 0 9
32471: PPUSH
32472: LD_VAR 0 10
32476: PPUSH
32477: CALL_OW 458
32481: NOT
32482: AND
32483: IFFALSE 32525
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
32485: LD_ADDR_VAR 0 7
32489: PUSH
32490: LD_VAR 0 7
32494: PPUSH
32495: LD_VAR 0 7
32499: PUSH
32500: LD_INT 1
32502: PLUS
32503: PPUSH
32504: LD_VAR 0 9
32508: PUSH
32509: LD_VAR 0 10
32513: PUSH
32514: EMPTY
32515: LIST
32516: LIST
32517: PPUSH
32518: CALL_OW 1
32522: ST_TO_ADDR
32523: GO 32539
// i := i - 1 ;
32525: LD_ADDR_VAR 0 5
32529: PUSH
32530: LD_VAR 0 5
32534: PUSH
32535: LD_INT 1
32537: MINUS
32538: ST_TO_ADDR
// end ;
32539: GO 32345
32541: POP
32542: POP
// for i in tmp do
32543: LD_ADDR_VAR 0 5
32547: PUSH
32548: LD_VAR 0 7
32552: PUSH
32553: FOR_IN
32554: IFFALSE 32592
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
32556: LD_VAR 0 1
32560: PPUSH
32561: LD_VAR 0 5
32565: PUSH
32566: LD_INT 1
32568: ARRAY
32569: PPUSH
32570: LD_VAR 0 5
32574: PUSH
32575: LD_INT 2
32577: ARRAY
32578: PPUSH
32579: CALL 31538 0 3
32583: NOT
32584: IFFALSE 32590
// exit ;
32586: POP
32587: POP
32588: GO 32594
32590: GO 32553
32592: POP
32593: POP
// end ;
32594: LD_VAR 0 4
32598: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
32599: LD_INT 0
32601: PPUSH
32602: PPUSH
32603: PPUSH
32604: PPUSH
32605: PPUSH
32606: PPUSH
32607: PPUSH
// if not GetClass ( unit ) = class_sniper then
32608: LD_VAR 0 1
32612: PPUSH
32613: CALL_OW 257
32617: PUSH
32618: LD_INT 5
32620: EQUAL
32621: NOT
32622: IFFALSE 32626
// exit ;
32624: GO 33014
// dist := 8 ;
32626: LD_ADDR_VAR 0 5
32630: PUSH
32631: LD_INT 8
32633: ST_TO_ADDR
// viewRange := 12 ;
32634: LD_ADDR_VAR 0 7
32638: PUSH
32639: LD_INT 12
32641: ST_TO_ADDR
// side := GetSide ( unit ) ;
32642: LD_ADDR_VAR 0 6
32646: PUSH
32647: LD_VAR 0 1
32651: PPUSH
32652: CALL_OW 255
32656: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
32657: LD_INT 61
32659: PPUSH
32660: LD_VAR 0 6
32664: PPUSH
32665: CALL_OW 321
32669: PUSH
32670: LD_INT 2
32672: EQUAL
32673: IFFALSE 32683
// viewRange := 16 ;
32675: LD_ADDR_VAR 0 7
32679: PUSH
32680: LD_INT 16
32682: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
32683: LD_VAR 0 1
32687: PPUSH
32688: LD_VAR 0 2
32692: PPUSH
32693: LD_VAR 0 3
32697: PPUSH
32698: CALL_OW 297
32702: PUSH
32703: LD_VAR 0 5
32707: GREATER
32708: IFFALSE 32787
// begin ComMoveXY ( unit , x , y ) ;
32710: LD_VAR 0 1
32714: PPUSH
32715: LD_VAR 0 2
32719: PPUSH
32720: LD_VAR 0 3
32724: PPUSH
32725: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
32729: LD_INT 35
32731: PPUSH
32732: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
32736: LD_VAR 0 1
32740: PPUSH
32741: LD_VAR 0 2
32745: PPUSH
32746: LD_VAR 0 3
32750: PPUSH
32751: CALL 69507 0 3
32755: NOT
32756: IFFALSE 32760
// exit ;
32758: GO 33014
// until GetDistUnitXY ( unit , x , y ) < dist ;
32760: LD_VAR 0 1
32764: PPUSH
32765: LD_VAR 0 2
32769: PPUSH
32770: LD_VAR 0 3
32774: PPUSH
32775: CALL_OW 297
32779: PUSH
32780: LD_VAR 0 5
32784: LESS
32785: IFFALSE 32729
// end ; ComTurnXY ( unit , x , y ) ;
32787: LD_VAR 0 1
32791: PPUSH
32792: LD_VAR 0 2
32796: PPUSH
32797: LD_VAR 0 3
32801: PPUSH
32802: CALL_OW 118
// wait ( 5 ) ;
32806: LD_INT 5
32808: PPUSH
32809: CALL_OW 67
// _d := GetDir ( unit ) ;
32813: LD_ADDR_VAR 0 10
32817: PUSH
32818: LD_VAR 0 1
32822: PPUSH
32823: CALL_OW 254
32827: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
32828: LD_ADDR_VAR 0 8
32832: PUSH
32833: LD_VAR 0 1
32837: PPUSH
32838: CALL_OW 250
32842: PPUSH
32843: LD_VAR 0 10
32847: PPUSH
32848: LD_VAR 0 5
32852: PPUSH
32853: CALL_OW 272
32857: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
32858: LD_ADDR_VAR 0 9
32862: PUSH
32863: LD_VAR 0 1
32867: PPUSH
32868: CALL_OW 251
32872: PPUSH
32873: LD_VAR 0 10
32877: PPUSH
32878: LD_VAR 0 5
32882: PPUSH
32883: CALL_OW 273
32887: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32888: LD_VAR 0 8
32892: PPUSH
32893: LD_VAR 0 9
32897: PPUSH
32898: CALL_OW 488
32902: NOT
32903: IFFALSE 32907
// exit ;
32905: GO 33014
// ComAnimCustom ( unit , 1 ) ;
32907: LD_VAR 0 1
32911: PPUSH
32912: LD_INT 1
32914: PPUSH
32915: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
32919: LD_VAR 0 8
32923: PPUSH
32924: LD_VAR 0 9
32928: PPUSH
32929: LD_VAR 0 6
32933: PPUSH
32934: LD_VAR 0 7
32938: PPUSH
32939: CALL_OW 330
// repeat wait ( 1 ) ;
32943: LD_INT 1
32945: PPUSH
32946: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
32950: LD_VAR 0 1
32954: PPUSH
32955: CALL_OW 316
32959: PUSH
32960: LD_VAR 0 1
32964: PPUSH
32965: CALL_OW 314
32969: OR
32970: PUSH
32971: LD_VAR 0 1
32975: PPUSH
32976: CALL_OW 302
32980: NOT
32981: OR
32982: PUSH
32983: LD_VAR 0 1
32987: PPUSH
32988: CALL_OW 301
32992: OR
32993: IFFALSE 32943
// RemoveSeeing ( _x , _y , side ) ;
32995: LD_VAR 0 8
32999: PPUSH
33000: LD_VAR 0 9
33004: PPUSH
33005: LD_VAR 0 6
33009: PPUSH
33010: CALL_OW 331
// end ; end_of_file
33014: LD_VAR 0 4
33018: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
33019: LD_INT 0
33021: PPUSH
33022: PPUSH
// if exist_mode then
33023: LD_VAR 0 2
33027: IFFALSE 33052
// unit := CreateCharacter ( prefix & ident ) else
33029: LD_ADDR_VAR 0 5
33033: PUSH
33034: LD_VAR 0 3
33038: PUSH
33039: LD_VAR 0 1
33043: STR
33044: PPUSH
33045: CALL_OW 34
33049: ST_TO_ADDR
33050: GO 33067
// unit := NewCharacter ( ident ) ;
33052: LD_ADDR_VAR 0 5
33056: PUSH
33057: LD_VAR 0 1
33061: PPUSH
33062: CALL_OW 25
33066: ST_TO_ADDR
// result := unit ;
33067: LD_ADDR_VAR 0 4
33071: PUSH
33072: LD_VAR 0 5
33076: ST_TO_ADDR
// end ;
33077: LD_VAR 0 4
33081: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
33082: LD_INT 0
33084: PPUSH
33085: PPUSH
// if not side or not nation then
33086: LD_VAR 0 1
33090: NOT
33091: PUSH
33092: LD_VAR 0 2
33096: NOT
33097: OR
33098: IFFALSE 33102
// exit ;
33100: GO 33870
// case nation of nation_american :
33102: LD_VAR 0 2
33106: PUSH
33107: LD_INT 1
33109: DOUBLE
33110: EQUAL
33111: IFTRUE 33115
33113: GO 33329
33115: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
33116: LD_ADDR_VAR 0 4
33120: PUSH
33121: LD_INT 35
33123: PUSH
33124: LD_INT 45
33126: PUSH
33127: LD_INT 46
33129: PUSH
33130: LD_INT 47
33132: PUSH
33133: LD_INT 82
33135: PUSH
33136: LD_INT 83
33138: PUSH
33139: LD_INT 84
33141: PUSH
33142: LD_INT 85
33144: PUSH
33145: LD_INT 86
33147: PUSH
33148: LD_INT 1
33150: PUSH
33151: LD_INT 2
33153: PUSH
33154: LD_INT 6
33156: PUSH
33157: LD_INT 15
33159: PUSH
33160: LD_INT 16
33162: PUSH
33163: LD_INT 7
33165: PUSH
33166: LD_INT 12
33168: PUSH
33169: LD_INT 13
33171: PUSH
33172: LD_INT 10
33174: PUSH
33175: LD_INT 14
33177: PUSH
33178: LD_INT 20
33180: PUSH
33181: LD_INT 21
33183: PUSH
33184: LD_INT 22
33186: PUSH
33187: LD_INT 25
33189: PUSH
33190: LD_INT 32
33192: PUSH
33193: LD_INT 27
33195: PUSH
33196: LD_INT 36
33198: PUSH
33199: LD_INT 69
33201: PUSH
33202: LD_INT 39
33204: PUSH
33205: LD_INT 34
33207: PUSH
33208: LD_INT 40
33210: PUSH
33211: LD_INT 48
33213: PUSH
33214: LD_INT 49
33216: PUSH
33217: LD_INT 50
33219: PUSH
33220: LD_INT 51
33222: PUSH
33223: LD_INT 52
33225: PUSH
33226: LD_INT 53
33228: PUSH
33229: LD_INT 54
33231: PUSH
33232: LD_INT 55
33234: PUSH
33235: LD_INT 56
33237: PUSH
33238: LD_INT 57
33240: PUSH
33241: LD_INT 58
33243: PUSH
33244: LD_INT 59
33246: PUSH
33247: LD_INT 60
33249: PUSH
33250: LD_INT 61
33252: PUSH
33253: LD_INT 62
33255: PUSH
33256: LD_INT 80
33258: PUSH
33259: LD_INT 82
33261: PUSH
33262: LD_INT 83
33264: PUSH
33265: LD_INT 84
33267: PUSH
33268: LD_INT 85
33270: PUSH
33271: LD_INT 86
33273: PUSH
33274: EMPTY
33275: LIST
33276: LIST
33277: LIST
33278: LIST
33279: LIST
33280: LIST
33281: LIST
33282: LIST
33283: LIST
33284: LIST
33285: LIST
33286: LIST
33287: LIST
33288: LIST
33289: LIST
33290: LIST
33291: LIST
33292: LIST
33293: LIST
33294: LIST
33295: LIST
33296: LIST
33297: LIST
33298: LIST
33299: LIST
33300: LIST
33301: LIST
33302: LIST
33303: LIST
33304: LIST
33305: LIST
33306: LIST
33307: LIST
33308: LIST
33309: LIST
33310: LIST
33311: LIST
33312: LIST
33313: LIST
33314: LIST
33315: LIST
33316: LIST
33317: LIST
33318: LIST
33319: LIST
33320: LIST
33321: LIST
33322: LIST
33323: LIST
33324: LIST
33325: LIST
33326: ST_TO_ADDR
33327: GO 33794
33329: LD_INT 2
33331: DOUBLE
33332: EQUAL
33333: IFTRUE 33337
33335: GO 33563
33337: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
33338: LD_ADDR_VAR 0 4
33342: PUSH
33343: LD_INT 35
33345: PUSH
33346: LD_INT 45
33348: PUSH
33349: LD_INT 46
33351: PUSH
33352: LD_INT 47
33354: PUSH
33355: LD_INT 82
33357: PUSH
33358: LD_INT 83
33360: PUSH
33361: LD_INT 84
33363: PUSH
33364: LD_INT 85
33366: PUSH
33367: LD_INT 87
33369: PUSH
33370: LD_INT 70
33372: PUSH
33373: LD_INT 1
33375: PUSH
33376: LD_INT 11
33378: PUSH
33379: LD_INT 3
33381: PUSH
33382: LD_INT 4
33384: PUSH
33385: LD_INT 5
33387: PUSH
33388: LD_INT 6
33390: PUSH
33391: LD_INT 15
33393: PUSH
33394: LD_INT 18
33396: PUSH
33397: LD_INT 7
33399: PUSH
33400: LD_INT 17
33402: PUSH
33403: LD_INT 8
33405: PUSH
33406: LD_INT 20
33408: PUSH
33409: LD_INT 21
33411: PUSH
33412: LD_INT 22
33414: PUSH
33415: LD_INT 72
33417: PUSH
33418: LD_INT 26
33420: PUSH
33421: LD_INT 69
33423: PUSH
33424: LD_INT 39
33426: PUSH
33427: LD_INT 40
33429: PUSH
33430: LD_INT 41
33432: PUSH
33433: LD_INT 42
33435: PUSH
33436: LD_INT 43
33438: PUSH
33439: LD_INT 48
33441: PUSH
33442: LD_INT 49
33444: PUSH
33445: LD_INT 50
33447: PUSH
33448: LD_INT 51
33450: PUSH
33451: LD_INT 52
33453: PUSH
33454: LD_INT 53
33456: PUSH
33457: LD_INT 54
33459: PUSH
33460: LD_INT 55
33462: PUSH
33463: LD_INT 56
33465: PUSH
33466: LD_INT 60
33468: PUSH
33469: LD_INT 61
33471: PUSH
33472: LD_INT 62
33474: PUSH
33475: LD_INT 66
33477: PUSH
33478: LD_INT 67
33480: PUSH
33481: LD_INT 68
33483: PUSH
33484: LD_INT 81
33486: PUSH
33487: LD_INT 82
33489: PUSH
33490: LD_INT 83
33492: PUSH
33493: LD_INT 84
33495: PUSH
33496: LD_INT 85
33498: PUSH
33499: LD_INT 87
33501: PUSH
33502: LD_INT 88
33504: PUSH
33505: EMPTY
33506: LIST
33507: LIST
33508: LIST
33509: LIST
33510: LIST
33511: LIST
33512: LIST
33513: LIST
33514: LIST
33515: LIST
33516: LIST
33517: LIST
33518: LIST
33519: LIST
33520: LIST
33521: LIST
33522: LIST
33523: LIST
33524: LIST
33525: LIST
33526: LIST
33527: LIST
33528: LIST
33529: LIST
33530: LIST
33531: LIST
33532: LIST
33533: LIST
33534: LIST
33535: LIST
33536: LIST
33537: LIST
33538: LIST
33539: LIST
33540: LIST
33541: LIST
33542: LIST
33543: LIST
33544: LIST
33545: LIST
33546: LIST
33547: LIST
33548: LIST
33549: LIST
33550: LIST
33551: LIST
33552: LIST
33553: LIST
33554: LIST
33555: LIST
33556: LIST
33557: LIST
33558: LIST
33559: LIST
33560: ST_TO_ADDR
33561: GO 33794
33563: LD_INT 3
33565: DOUBLE
33566: EQUAL
33567: IFTRUE 33571
33569: GO 33793
33571: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
33572: LD_ADDR_VAR 0 4
33576: PUSH
33577: LD_INT 46
33579: PUSH
33580: LD_INT 47
33582: PUSH
33583: LD_INT 1
33585: PUSH
33586: LD_INT 2
33588: PUSH
33589: LD_INT 82
33591: PUSH
33592: LD_INT 83
33594: PUSH
33595: LD_INT 84
33597: PUSH
33598: LD_INT 85
33600: PUSH
33601: LD_INT 86
33603: PUSH
33604: LD_INT 11
33606: PUSH
33607: LD_INT 9
33609: PUSH
33610: LD_INT 20
33612: PUSH
33613: LD_INT 19
33615: PUSH
33616: LD_INT 21
33618: PUSH
33619: LD_INT 24
33621: PUSH
33622: LD_INT 22
33624: PUSH
33625: LD_INT 25
33627: PUSH
33628: LD_INT 28
33630: PUSH
33631: LD_INT 29
33633: PUSH
33634: LD_INT 30
33636: PUSH
33637: LD_INT 31
33639: PUSH
33640: LD_INT 37
33642: PUSH
33643: LD_INT 38
33645: PUSH
33646: LD_INT 32
33648: PUSH
33649: LD_INT 27
33651: PUSH
33652: LD_INT 33
33654: PUSH
33655: LD_INT 69
33657: PUSH
33658: LD_INT 39
33660: PUSH
33661: LD_INT 34
33663: PUSH
33664: LD_INT 40
33666: PUSH
33667: LD_INT 71
33669: PUSH
33670: LD_INT 23
33672: PUSH
33673: LD_INT 44
33675: PUSH
33676: LD_INT 48
33678: PUSH
33679: LD_INT 49
33681: PUSH
33682: LD_INT 50
33684: PUSH
33685: LD_INT 51
33687: PUSH
33688: LD_INT 52
33690: PUSH
33691: LD_INT 53
33693: PUSH
33694: LD_INT 54
33696: PUSH
33697: LD_INT 55
33699: PUSH
33700: LD_INT 56
33702: PUSH
33703: LD_INT 57
33705: PUSH
33706: LD_INT 58
33708: PUSH
33709: LD_INT 59
33711: PUSH
33712: LD_INT 63
33714: PUSH
33715: LD_INT 64
33717: PUSH
33718: LD_INT 65
33720: PUSH
33721: LD_INT 82
33723: PUSH
33724: LD_INT 83
33726: PUSH
33727: LD_INT 84
33729: PUSH
33730: LD_INT 85
33732: PUSH
33733: LD_INT 86
33735: PUSH
33736: EMPTY
33737: LIST
33738: LIST
33739: LIST
33740: LIST
33741: LIST
33742: LIST
33743: LIST
33744: LIST
33745: LIST
33746: LIST
33747: LIST
33748: LIST
33749: LIST
33750: LIST
33751: LIST
33752: LIST
33753: LIST
33754: LIST
33755: LIST
33756: LIST
33757: LIST
33758: LIST
33759: LIST
33760: LIST
33761: LIST
33762: LIST
33763: LIST
33764: LIST
33765: LIST
33766: LIST
33767: LIST
33768: LIST
33769: LIST
33770: LIST
33771: LIST
33772: LIST
33773: LIST
33774: LIST
33775: LIST
33776: LIST
33777: LIST
33778: LIST
33779: LIST
33780: LIST
33781: LIST
33782: LIST
33783: LIST
33784: LIST
33785: LIST
33786: LIST
33787: LIST
33788: LIST
33789: LIST
33790: ST_TO_ADDR
33791: GO 33794
33793: POP
// if state > - 1 and state < 3 then
33794: LD_VAR 0 3
33798: PUSH
33799: LD_INT 1
33801: NEG
33802: GREATER
33803: PUSH
33804: LD_VAR 0 3
33808: PUSH
33809: LD_INT 3
33811: LESS
33812: AND
33813: IFFALSE 33870
// for i in result do
33815: LD_ADDR_VAR 0 5
33819: PUSH
33820: LD_VAR 0 4
33824: PUSH
33825: FOR_IN
33826: IFFALSE 33868
// if GetTech ( i , side ) <> state then
33828: LD_VAR 0 5
33832: PPUSH
33833: LD_VAR 0 1
33837: PPUSH
33838: CALL_OW 321
33842: PUSH
33843: LD_VAR 0 3
33847: NONEQUAL
33848: IFFALSE 33866
// result := result diff i ;
33850: LD_ADDR_VAR 0 4
33854: PUSH
33855: LD_VAR 0 4
33859: PUSH
33860: LD_VAR 0 5
33864: DIFF
33865: ST_TO_ADDR
33866: GO 33825
33868: POP
33869: POP
// end ;
33870: LD_VAR 0 4
33874: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
33875: LD_INT 0
33877: PPUSH
33878: PPUSH
33879: PPUSH
// result := true ;
33880: LD_ADDR_VAR 0 3
33884: PUSH
33885: LD_INT 1
33887: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
33888: LD_ADDR_VAR 0 5
33892: PUSH
33893: LD_VAR 0 2
33897: PPUSH
33898: CALL_OW 480
33902: ST_TO_ADDR
// if not tmp then
33903: LD_VAR 0 5
33907: NOT
33908: IFFALSE 33912
// exit ;
33910: GO 33961
// for i in tmp do
33912: LD_ADDR_VAR 0 4
33916: PUSH
33917: LD_VAR 0 5
33921: PUSH
33922: FOR_IN
33923: IFFALSE 33959
// if GetTech ( i , side ) <> state_researched then
33925: LD_VAR 0 4
33929: PPUSH
33930: LD_VAR 0 1
33934: PPUSH
33935: CALL_OW 321
33939: PUSH
33940: LD_INT 2
33942: NONEQUAL
33943: IFFALSE 33957
// begin result := false ;
33945: LD_ADDR_VAR 0 3
33949: PUSH
33950: LD_INT 0
33952: ST_TO_ADDR
// exit ;
33953: POP
33954: POP
33955: GO 33961
// end ;
33957: GO 33922
33959: POP
33960: POP
// end ;
33961: LD_VAR 0 3
33965: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
33966: LD_INT 0
33968: PPUSH
33969: PPUSH
33970: PPUSH
33971: PPUSH
33972: PPUSH
33973: PPUSH
33974: PPUSH
33975: PPUSH
33976: PPUSH
33977: PPUSH
33978: PPUSH
33979: PPUSH
33980: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
33981: LD_VAR 0 1
33985: NOT
33986: PUSH
33987: LD_VAR 0 1
33991: PPUSH
33992: CALL_OW 257
33996: PUSH
33997: LD_INT 9
33999: NONEQUAL
34000: OR
34001: IFFALSE 34005
// exit ;
34003: GO 34578
// side := GetSide ( unit ) ;
34005: LD_ADDR_VAR 0 9
34009: PUSH
34010: LD_VAR 0 1
34014: PPUSH
34015: CALL_OW 255
34019: ST_TO_ADDR
// tech_space := tech_spacanom ;
34020: LD_ADDR_VAR 0 12
34024: PUSH
34025: LD_INT 29
34027: ST_TO_ADDR
// tech_time := tech_taurad ;
34028: LD_ADDR_VAR 0 13
34032: PUSH
34033: LD_INT 28
34035: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
34036: LD_ADDR_VAR 0 11
34040: PUSH
34041: LD_VAR 0 1
34045: PPUSH
34046: CALL_OW 310
34050: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
34051: LD_VAR 0 11
34055: PPUSH
34056: CALL_OW 247
34060: PUSH
34061: LD_INT 2
34063: EQUAL
34064: IFFALSE 34068
// exit ;
34066: GO 34578
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34068: LD_ADDR_VAR 0 8
34072: PUSH
34073: LD_INT 81
34075: PUSH
34076: LD_VAR 0 9
34080: PUSH
34081: EMPTY
34082: LIST
34083: LIST
34084: PUSH
34085: LD_INT 3
34087: PUSH
34088: LD_INT 21
34090: PUSH
34091: LD_INT 3
34093: PUSH
34094: EMPTY
34095: LIST
34096: LIST
34097: PUSH
34098: EMPTY
34099: LIST
34100: LIST
34101: PUSH
34102: EMPTY
34103: LIST
34104: LIST
34105: PPUSH
34106: CALL_OW 69
34110: ST_TO_ADDR
// if not tmp then
34111: LD_VAR 0 8
34115: NOT
34116: IFFALSE 34120
// exit ;
34118: GO 34578
// if in_unit then
34120: LD_VAR 0 11
34124: IFFALSE 34148
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
34126: LD_ADDR_VAR 0 10
34130: PUSH
34131: LD_VAR 0 8
34135: PPUSH
34136: LD_VAR 0 11
34140: PPUSH
34141: CALL_OW 74
34145: ST_TO_ADDR
34146: GO 34168
// enemy := NearestUnitToUnit ( tmp , unit ) ;
34148: LD_ADDR_VAR 0 10
34152: PUSH
34153: LD_VAR 0 8
34157: PPUSH
34158: LD_VAR 0 1
34162: PPUSH
34163: CALL_OW 74
34167: ST_TO_ADDR
// if not enemy then
34168: LD_VAR 0 10
34172: NOT
34173: IFFALSE 34177
// exit ;
34175: GO 34578
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
34177: LD_VAR 0 11
34181: PUSH
34182: LD_VAR 0 11
34186: PPUSH
34187: LD_VAR 0 10
34191: PPUSH
34192: CALL_OW 296
34196: PUSH
34197: LD_INT 13
34199: GREATER
34200: AND
34201: PUSH
34202: LD_VAR 0 1
34206: PPUSH
34207: LD_VAR 0 10
34211: PPUSH
34212: CALL_OW 296
34216: PUSH
34217: LD_INT 12
34219: GREATER
34220: OR
34221: IFFALSE 34225
// exit ;
34223: GO 34578
// missile := [ 1 ] ;
34225: LD_ADDR_VAR 0 14
34229: PUSH
34230: LD_INT 1
34232: PUSH
34233: EMPTY
34234: LIST
34235: ST_TO_ADDR
// if Researched ( side , tech_space ) then
34236: LD_VAR 0 9
34240: PPUSH
34241: LD_VAR 0 12
34245: PPUSH
34246: CALL_OW 325
34250: IFFALSE 34279
// missile := Replace ( missile , missile + 1 , 2 ) ;
34252: LD_ADDR_VAR 0 14
34256: PUSH
34257: LD_VAR 0 14
34261: PPUSH
34262: LD_VAR 0 14
34266: PUSH
34267: LD_INT 1
34269: PLUS
34270: PPUSH
34271: LD_INT 2
34273: PPUSH
34274: CALL_OW 1
34278: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
34279: LD_VAR 0 9
34283: PPUSH
34284: LD_VAR 0 13
34288: PPUSH
34289: CALL_OW 325
34293: PUSH
34294: LD_VAR 0 10
34298: PPUSH
34299: CALL_OW 255
34303: PPUSH
34304: LD_VAR 0 13
34308: PPUSH
34309: CALL_OW 325
34313: NOT
34314: AND
34315: IFFALSE 34344
// missile := Replace ( missile , missile + 1 , 3 ) ;
34317: LD_ADDR_VAR 0 14
34321: PUSH
34322: LD_VAR 0 14
34326: PPUSH
34327: LD_VAR 0 14
34331: PUSH
34332: LD_INT 1
34334: PLUS
34335: PPUSH
34336: LD_INT 3
34338: PPUSH
34339: CALL_OW 1
34343: ST_TO_ADDR
// if missile < 2 then
34344: LD_VAR 0 14
34348: PUSH
34349: LD_INT 2
34351: LESS
34352: IFFALSE 34356
// exit ;
34354: GO 34578
// x := GetX ( enemy ) ;
34356: LD_ADDR_VAR 0 4
34360: PUSH
34361: LD_VAR 0 10
34365: PPUSH
34366: CALL_OW 250
34370: ST_TO_ADDR
// y := GetY ( enemy ) ;
34371: LD_ADDR_VAR 0 5
34375: PUSH
34376: LD_VAR 0 10
34380: PPUSH
34381: CALL_OW 251
34385: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
34386: LD_ADDR_VAR 0 6
34390: PUSH
34391: LD_VAR 0 4
34395: PUSH
34396: LD_INT 1
34398: NEG
34399: PPUSH
34400: LD_INT 1
34402: PPUSH
34403: CALL_OW 12
34407: PLUS
34408: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
34409: LD_ADDR_VAR 0 7
34413: PUSH
34414: LD_VAR 0 5
34418: PUSH
34419: LD_INT 1
34421: NEG
34422: PPUSH
34423: LD_INT 1
34425: PPUSH
34426: CALL_OW 12
34430: PLUS
34431: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
34432: LD_VAR 0 6
34436: PPUSH
34437: LD_VAR 0 7
34441: PPUSH
34442: CALL_OW 488
34446: NOT
34447: IFFALSE 34469
// begin _x := x ;
34449: LD_ADDR_VAR 0 6
34453: PUSH
34454: LD_VAR 0 4
34458: ST_TO_ADDR
// _y := y ;
34459: LD_ADDR_VAR 0 7
34463: PUSH
34464: LD_VAR 0 5
34468: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
34469: LD_ADDR_VAR 0 3
34473: PUSH
34474: LD_INT 1
34476: PPUSH
34477: LD_VAR 0 14
34481: PPUSH
34482: CALL_OW 12
34486: ST_TO_ADDR
// case i of 1 :
34487: LD_VAR 0 3
34491: PUSH
34492: LD_INT 1
34494: DOUBLE
34495: EQUAL
34496: IFTRUE 34500
34498: GO 34517
34500: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
34501: LD_VAR 0 1
34505: PPUSH
34506: LD_VAR 0 10
34510: PPUSH
34511: CALL_OW 115
34515: GO 34578
34517: LD_INT 2
34519: DOUBLE
34520: EQUAL
34521: IFTRUE 34525
34523: GO 34547
34525: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
34526: LD_VAR 0 1
34530: PPUSH
34531: LD_VAR 0 6
34535: PPUSH
34536: LD_VAR 0 7
34540: PPUSH
34541: CALL_OW 153
34545: GO 34578
34547: LD_INT 3
34549: DOUBLE
34550: EQUAL
34551: IFTRUE 34555
34553: GO 34577
34555: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
34556: LD_VAR 0 1
34560: PPUSH
34561: LD_VAR 0 6
34565: PPUSH
34566: LD_VAR 0 7
34570: PPUSH
34571: CALL_OW 154
34575: GO 34578
34577: POP
// end ;
34578: LD_VAR 0 2
34582: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
34583: LD_INT 0
34585: PPUSH
34586: PPUSH
34587: PPUSH
34588: PPUSH
34589: PPUSH
34590: PPUSH
// if not unit or not building then
34591: LD_VAR 0 1
34595: NOT
34596: PUSH
34597: LD_VAR 0 2
34601: NOT
34602: OR
34603: IFFALSE 34607
// exit ;
34605: GO 34765
// x := GetX ( building ) ;
34607: LD_ADDR_VAR 0 5
34611: PUSH
34612: LD_VAR 0 2
34616: PPUSH
34617: CALL_OW 250
34621: ST_TO_ADDR
// y := GetY ( building ) ;
34622: LD_ADDR_VAR 0 6
34626: PUSH
34627: LD_VAR 0 2
34631: PPUSH
34632: CALL_OW 251
34636: ST_TO_ADDR
// for i = 0 to 5 do
34637: LD_ADDR_VAR 0 4
34641: PUSH
34642: DOUBLE
34643: LD_INT 0
34645: DEC
34646: ST_TO_ADDR
34647: LD_INT 5
34649: PUSH
34650: FOR_TO
34651: IFFALSE 34763
// begin _x := ShiftX ( x , i , 3 ) ;
34653: LD_ADDR_VAR 0 7
34657: PUSH
34658: LD_VAR 0 5
34662: PPUSH
34663: LD_VAR 0 4
34667: PPUSH
34668: LD_INT 3
34670: PPUSH
34671: CALL_OW 272
34675: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
34676: LD_ADDR_VAR 0 8
34680: PUSH
34681: LD_VAR 0 6
34685: PPUSH
34686: LD_VAR 0 4
34690: PPUSH
34691: LD_INT 3
34693: PPUSH
34694: CALL_OW 273
34698: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
34699: LD_VAR 0 7
34703: PPUSH
34704: LD_VAR 0 8
34708: PPUSH
34709: CALL_OW 488
34713: NOT
34714: IFFALSE 34718
// continue ;
34716: GO 34650
// if HexInfo ( _x , _y ) = 0 then
34718: LD_VAR 0 7
34722: PPUSH
34723: LD_VAR 0 8
34727: PPUSH
34728: CALL_OW 428
34732: PUSH
34733: LD_INT 0
34735: EQUAL
34736: IFFALSE 34761
// begin ComMoveXY ( unit , _x , _y ) ;
34738: LD_VAR 0 1
34742: PPUSH
34743: LD_VAR 0 7
34747: PPUSH
34748: LD_VAR 0 8
34752: PPUSH
34753: CALL_OW 111
// exit ;
34757: POP
34758: POP
34759: GO 34765
// end ; end ;
34761: GO 34650
34763: POP
34764: POP
// end ;
34765: LD_VAR 0 3
34769: RET
// export function ScanBase ( side , base_area ) ; begin
34770: LD_INT 0
34772: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
34773: LD_ADDR_VAR 0 3
34777: PUSH
34778: LD_VAR 0 2
34782: PPUSH
34783: LD_INT 81
34785: PUSH
34786: LD_VAR 0 1
34790: PUSH
34791: EMPTY
34792: LIST
34793: LIST
34794: PPUSH
34795: CALL_OW 70
34799: ST_TO_ADDR
// end ;
34800: LD_VAR 0 3
34804: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
34805: LD_INT 0
34807: PPUSH
34808: PPUSH
34809: PPUSH
34810: PPUSH
// result := false ;
34811: LD_ADDR_VAR 0 2
34815: PUSH
34816: LD_INT 0
34818: ST_TO_ADDR
// side := GetSide ( unit ) ;
34819: LD_ADDR_VAR 0 3
34823: PUSH
34824: LD_VAR 0 1
34828: PPUSH
34829: CALL_OW 255
34833: ST_TO_ADDR
// nat := GetNation ( unit ) ;
34834: LD_ADDR_VAR 0 4
34838: PUSH
34839: LD_VAR 0 1
34843: PPUSH
34844: CALL_OW 248
34848: ST_TO_ADDR
// case nat of 1 :
34849: LD_VAR 0 4
34853: PUSH
34854: LD_INT 1
34856: DOUBLE
34857: EQUAL
34858: IFTRUE 34862
34860: GO 34873
34862: POP
// tech := tech_lassight ; 2 :
34863: LD_ADDR_VAR 0 5
34867: PUSH
34868: LD_INT 12
34870: ST_TO_ADDR
34871: GO 34912
34873: LD_INT 2
34875: DOUBLE
34876: EQUAL
34877: IFTRUE 34881
34879: GO 34892
34881: POP
// tech := tech_mortar ; 3 :
34882: LD_ADDR_VAR 0 5
34886: PUSH
34887: LD_INT 41
34889: ST_TO_ADDR
34890: GO 34912
34892: LD_INT 3
34894: DOUBLE
34895: EQUAL
34896: IFTRUE 34900
34898: GO 34911
34900: POP
// tech := tech_bazooka ; end ;
34901: LD_ADDR_VAR 0 5
34905: PUSH
34906: LD_INT 44
34908: ST_TO_ADDR
34909: GO 34912
34911: POP
// if Researched ( side , tech ) then
34912: LD_VAR 0 3
34916: PPUSH
34917: LD_VAR 0 5
34921: PPUSH
34922: CALL_OW 325
34926: IFFALSE 34953
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
34928: LD_ADDR_VAR 0 2
34932: PUSH
34933: LD_INT 5
34935: PUSH
34936: LD_INT 8
34938: PUSH
34939: LD_INT 9
34941: PUSH
34942: EMPTY
34943: LIST
34944: LIST
34945: LIST
34946: PUSH
34947: LD_VAR 0 4
34951: ARRAY
34952: ST_TO_ADDR
// end ;
34953: LD_VAR 0 2
34957: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
34958: LD_INT 0
34960: PPUSH
34961: PPUSH
34962: PPUSH
// if not mines then
34963: LD_VAR 0 2
34967: NOT
34968: IFFALSE 34972
// exit ;
34970: GO 35116
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34972: LD_ADDR_VAR 0 5
34976: PUSH
34977: LD_INT 81
34979: PUSH
34980: LD_VAR 0 1
34984: PUSH
34985: EMPTY
34986: LIST
34987: LIST
34988: PUSH
34989: LD_INT 3
34991: PUSH
34992: LD_INT 21
34994: PUSH
34995: LD_INT 3
34997: PUSH
34998: EMPTY
34999: LIST
35000: LIST
35001: PUSH
35002: EMPTY
35003: LIST
35004: LIST
35005: PUSH
35006: EMPTY
35007: LIST
35008: LIST
35009: PPUSH
35010: CALL_OW 69
35014: ST_TO_ADDR
// for i in mines do
35015: LD_ADDR_VAR 0 4
35019: PUSH
35020: LD_VAR 0 2
35024: PUSH
35025: FOR_IN
35026: IFFALSE 35114
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
35028: LD_VAR 0 4
35032: PUSH
35033: LD_INT 1
35035: ARRAY
35036: PPUSH
35037: LD_VAR 0 4
35041: PUSH
35042: LD_INT 2
35044: ARRAY
35045: PPUSH
35046: CALL_OW 458
35050: NOT
35051: IFFALSE 35055
// continue ;
35053: GO 35025
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
35055: LD_VAR 0 4
35059: PUSH
35060: LD_INT 1
35062: ARRAY
35063: PPUSH
35064: LD_VAR 0 4
35068: PUSH
35069: LD_INT 2
35071: ARRAY
35072: PPUSH
35073: CALL_OW 428
35077: PUSH
35078: LD_VAR 0 5
35082: IN
35083: IFFALSE 35112
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
35085: LD_VAR 0 4
35089: PUSH
35090: LD_INT 1
35092: ARRAY
35093: PPUSH
35094: LD_VAR 0 4
35098: PUSH
35099: LD_INT 2
35101: ARRAY
35102: PPUSH
35103: LD_VAR 0 1
35107: PPUSH
35108: CALL_OW 456
// end ;
35112: GO 35025
35114: POP
35115: POP
// end ;
35116: LD_VAR 0 3
35120: RET
// export function Count ( array ) ; begin
35121: LD_INT 0
35123: PPUSH
// result := array + 0 ;
35124: LD_ADDR_VAR 0 2
35128: PUSH
35129: LD_VAR 0 1
35133: PUSH
35134: LD_INT 0
35136: PLUS
35137: ST_TO_ADDR
// end ;
35138: LD_VAR 0 2
35142: RET
// export function IsEmpty ( building ) ; begin
35143: LD_INT 0
35145: PPUSH
// if not building then
35146: LD_VAR 0 1
35150: NOT
35151: IFFALSE 35155
// exit ;
35153: GO 35198
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
35155: LD_ADDR_VAR 0 2
35159: PUSH
35160: LD_VAR 0 1
35164: PUSH
35165: LD_INT 22
35167: PUSH
35168: LD_VAR 0 1
35172: PPUSH
35173: CALL_OW 255
35177: PUSH
35178: EMPTY
35179: LIST
35180: LIST
35181: PUSH
35182: LD_INT 58
35184: PUSH
35185: EMPTY
35186: LIST
35187: PUSH
35188: EMPTY
35189: LIST
35190: LIST
35191: PPUSH
35192: CALL_OW 69
35196: IN
35197: ST_TO_ADDR
// end ;
35198: LD_VAR 0 2
35202: RET
// export function IsNotFull ( building ) ; var places ; begin
35203: LD_INT 0
35205: PPUSH
35206: PPUSH
// if not building then
35207: LD_VAR 0 1
35211: NOT
35212: IFFALSE 35216
// exit ;
35214: GO 35244
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
35216: LD_ADDR_VAR 0 2
35220: PUSH
35221: LD_VAR 0 1
35225: PPUSH
35226: LD_INT 3
35228: PUSH
35229: LD_INT 62
35231: PUSH
35232: EMPTY
35233: LIST
35234: PUSH
35235: EMPTY
35236: LIST
35237: LIST
35238: PPUSH
35239: CALL_OW 72
35243: ST_TO_ADDR
// end ;
35244: LD_VAR 0 2
35248: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
35249: LD_INT 0
35251: PPUSH
35252: PPUSH
35253: PPUSH
35254: PPUSH
// tmp := [ ] ;
35255: LD_ADDR_VAR 0 3
35259: PUSH
35260: EMPTY
35261: ST_TO_ADDR
// list := [ ] ;
35262: LD_ADDR_VAR 0 5
35266: PUSH
35267: EMPTY
35268: ST_TO_ADDR
// for i = 16 to 25 do
35269: LD_ADDR_VAR 0 4
35273: PUSH
35274: DOUBLE
35275: LD_INT 16
35277: DEC
35278: ST_TO_ADDR
35279: LD_INT 25
35281: PUSH
35282: FOR_TO
35283: IFFALSE 35356
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
35285: LD_ADDR_VAR 0 3
35289: PUSH
35290: LD_VAR 0 3
35294: PUSH
35295: LD_INT 22
35297: PUSH
35298: LD_VAR 0 1
35302: PPUSH
35303: CALL_OW 255
35307: PUSH
35308: EMPTY
35309: LIST
35310: LIST
35311: PUSH
35312: LD_INT 91
35314: PUSH
35315: LD_VAR 0 1
35319: PUSH
35320: LD_INT 6
35322: PUSH
35323: EMPTY
35324: LIST
35325: LIST
35326: LIST
35327: PUSH
35328: LD_INT 30
35330: PUSH
35331: LD_VAR 0 4
35335: PUSH
35336: EMPTY
35337: LIST
35338: LIST
35339: PUSH
35340: EMPTY
35341: LIST
35342: LIST
35343: LIST
35344: PUSH
35345: EMPTY
35346: LIST
35347: PPUSH
35348: CALL_OW 69
35352: ADD
35353: ST_TO_ADDR
35354: GO 35282
35356: POP
35357: POP
// for i = 1 to tmp do
35358: LD_ADDR_VAR 0 4
35362: PUSH
35363: DOUBLE
35364: LD_INT 1
35366: DEC
35367: ST_TO_ADDR
35368: LD_VAR 0 3
35372: PUSH
35373: FOR_TO
35374: IFFALSE 35462
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
35376: LD_ADDR_VAR 0 5
35380: PUSH
35381: LD_VAR 0 5
35385: PUSH
35386: LD_VAR 0 3
35390: PUSH
35391: LD_VAR 0 4
35395: ARRAY
35396: PPUSH
35397: CALL_OW 266
35401: PUSH
35402: LD_VAR 0 3
35406: PUSH
35407: LD_VAR 0 4
35411: ARRAY
35412: PPUSH
35413: CALL_OW 250
35417: PUSH
35418: LD_VAR 0 3
35422: PUSH
35423: LD_VAR 0 4
35427: ARRAY
35428: PPUSH
35429: CALL_OW 251
35433: PUSH
35434: LD_VAR 0 3
35438: PUSH
35439: LD_VAR 0 4
35443: ARRAY
35444: PPUSH
35445: CALL_OW 254
35449: PUSH
35450: EMPTY
35451: LIST
35452: LIST
35453: LIST
35454: LIST
35455: PUSH
35456: EMPTY
35457: LIST
35458: ADD
35459: ST_TO_ADDR
35460: GO 35373
35462: POP
35463: POP
// result := list ;
35464: LD_ADDR_VAR 0 2
35468: PUSH
35469: LD_VAR 0 5
35473: ST_TO_ADDR
// end ;
35474: LD_VAR 0 2
35478: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
35479: LD_INT 0
35481: PPUSH
35482: PPUSH
35483: PPUSH
35484: PPUSH
35485: PPUSH
35486: PPUSH
35487: PPUSH
// if not factory then
35488: LD_VAR 0 1
35492: NOT
35493: IFFALSE 35497
// exit ;
35495: GO 36090
// if control = control_apeman then
35497: LD_VAR 0 4
35501: PUSH
35502: LD_INT 5
35504: EQUAL
35505: IFFALSE 35614
// begin tmp := UnitsInside ( factory ) ;
35507: LD_ADDR_VAR 0 8
35511: PUSH
35512: LD_VAR 0 1
35516: PPUSH
35517: CALL_OW 313
35521: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
35522: LD_VAR 0 8
35526: PPUSH
35527: LD_INT 25
35529: PUSH
35530: LD_INT 12
35532: PUSH
35533: EMPTY
35534: LIST
35535: LIST
35536: PPUSH
35537: CALL_OW 72
35541: NOT
35542: IFFALSE 35552
// control := control_manual ;
35544: LD_ADDR_VAR 0 4
35548: PUSH
35549: LD_INT 1
35551: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
35552: LD_ADDR_VAR 0 8
35556: PUSH
35557: LD_VAR 0 1
35561: PPUSH
35562: CALL 35249 0 1
35566: ST_TO_ADDR
// if tmp then
35567: LD_VAR 0 8
35571: IFFALSE 35614
// begin for i in tmp do
35573: LD_ADDR_VAR 0 7
35577: PUSH
35578: LD_VAR 0 8
35582: PUSH
35583: FOR_IN
35584: IFFALSE 35612
// if i [ 1 ] = b_ext_radio then
35586: LD_VAR 0 7
35590: PUSH
35591: LD_INT 1
35593: ARRAY
35594: PUSH
35595: LD_INT 22
35597: EQUAL
35598: IFFALSE 35610
// begin control := control_remote ;
35600: LD_ADDR_VAR 0 4
35604: PUSH
35605: LD_INT 2
35607: ST_TO_ADDR
// break ;
35608: GO 35612
// end ;
35610: GO 35583
35612: POP
35613: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
35614: LD_VAR 0 1
35618: PPUSH
35619: LD_VAR 0 2
35623: PPUSH
35624: LD_VAR 0 3
35628: PPUSH
35629: LD_VAR 0 4
35633: PPUSH
35634: LD_VAR 0 5
35638: PPUSH
35639: CALL_OW 448
35643: IFFALSE 35678
// begin result := [ chassis , engine , control , weapon ] ;
35645: LD_ADDR_VAR 0 6
35649: PUSH
35650: LD_VAR 0 2
35654: PUSH
35655: LD_VAR 0 3
35659: PUSH
35660: LD_VAR 0 4
35664: PUSH
35665: LD_VAR 0 5
35669: PUSH
35670: EMPTY
35671: LIST
35672: LIST
35673: LIST
35674: LIST
35675: ST_TO_ADDR
// exit ;
35676: GO 36090
// end ; _chassis := AvailableChassisList ( factory ) ;
35678: LD_ADDR_VAR 0 9
35682: PUSH
35683: LD_VAR 0 1
35687: PPUSH
35688: CALL_OW 475
35692: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
35693: LD_ADDR_VAR 0 11
35697: PUSH
35698: LD_VAR 0 1
35702: PPUSH
35703: CALL_OW 476
35707: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
35708: LD_ADDR_VAR 0 12
35712: PUSH
35713: LD_VAR 0 1
35717: PPUSH
35718: CALL_OW 477
35722: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
35723: LD_ADDR_VAR 0 10
35727: PUSH
35728: LD_VAR 0 1
35732: PPUSH
35733: CALL_OW 478
35737: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
35738: LD_VAR 0 9
35742: NOT
35743: PUSH
35744: LD_VAR 0 11
35748: NOT
35749: OR
35750: PUSH
35751: LD_VAR 0 12
35755: NOT
35756: OR
35757: PUSH
35758: LD_VAR 0 10
35762: NOT
35763: OR
35764: IFFALSE 35799
// begin result := [ chassis , engine , control , weapon ] ;
35766: LD_ADDR_VAR 0 6
35770: PUSH
35771: LD_VAR 0 2
35775: PUSH
35776: LD_VAR 0 3
35780: PUSH
35781: LD_VAR 0 4
35785: PUSH
35786: LD_VAR 0 5
35790: PUSH
35791: EMPTY
35792: LIST
35793: LIST
35794: LIST
35795: LIST
35796: ST_TO_ADDR
// exit ;
35797: GO 36090
// end ; if not chassis in _chassis then
35799: LD_VAR 0 2
35803: PUSH
35804: LD_VAR 0 9
35808: IN
35809: NOT
35810: IFFALSE 35836
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
35812: LD_ADDR_VAR 0 2
35816: PUSH
35817: LD_VAR 0 9
35821: PUSH
35822: LD_INT 1
35824: PPUSH
35825: LD_VAR 0 9
35829: PPUSH
35830: CALL_OW 12
35834: ARRAY
35835: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
35836: LD_VAR 0 2
35840: PPUSH
35841: LD_VAR 0 3
35845: PPUSH
35846: CALL 36095 0 2
35850: NOT
35851: IFFALSE 35910
// repeat engine := _engine [ 1 ] ;
35853: LD_ADDR_VAR 0 3
35857: PUSH
35858: LD_VAR 0 11
35862: PUSH
35863: LD_INT 1
35865: ARRAY
35866: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
35867: LD_ADDR_VAR 0 11
35871: PUSH
35872: LD_VAR 0 11
35876: PPUSH
35877: LD_INT 1
35879: PPUSH
35880: CALL_OW 3
35884: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
35885: LD_VAR 0 2
35889: PPUSH
35890: LD_VAR 0 3
35894: PPUSH
35895: CALL 36095 0 2
35899: PUSH
35900: LD_VAR 0 11
35904: PUSH
35905: EMPTY
35906: EQUAL
35907: OR
35908: IFFALSE 35853
// if not control in _control then
35910: LD_VAR 0 4
35914: PUSH
35915: LD_VAR 0 12
35919: IN
35920: NOT
35921: IFFALSE 35947
// control := _control [ rand ( 1 , _control ) ] ;
35923: LD_ADDR_VAR 0 4
35927: PUSH
35928: LD_VAR 0 12
35932: PUSH
35933: LD_INT 1
35935: PPUSH
35936: LD_VAR 0 12
35940: PPUSH
35941: CALL_OW 12
35945: ARRAY
35946: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
35947: LD_VAR 0 2
35951: PPUSH
35952: LD_VAR 0 5
35956: PPUSH
35957: CALL 36315 0 2
35961: NOT
35962: IFFALSE 36021
// repeat weapon := _weapon [ 1 ] ;
35964: LD_ADDR_VAR 0 5
35968: PUSH
35969: LD_VAR 0 10
35973: PUSH
35974: LD_INT 1
35976: ARRAY
35977: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
35978: LD_ADDR_VAR 0 10
35982: PUSH
35983: LD_VAR 0 10
35987: PPUSH
35988: LD_INT 1
35990: PPUSH
35991: CALL_OW 3
35995: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
35996: LD_VAR 0 2
36000: PPUSH
36001: LD_VAR 0 5
36005: PPUSH
36006: CALL 36315 0 2
36010: PUSH
36011: LD_VAR 0 10
36015: PUSH
36016: EMPTY
36017: EQUAL
36018: OR
36019: IFFALSE 35964
// result := [ ] ;
36021: LD_ADDR_VAR 0 6
36025: PUSH
36026: EMPTY
36027: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
36028: LD_VAR 0 1
36032: PPUSH
36033: LD_VAR 0 2
36037: PPUSH
36038: LD_VAR 0 3
36042: PPUSH
36043: LD_VAR 0 4
36047: PPUSH
36048: LD_VAR 0 5
36052: PPUSH
36053: CALL_OW 448
36057: IFFALSE 36090
// result := [ chassis , engine , control , weapon ] ;
36059: LD_ADDR_VAR 0 6
36063: PUSH
36064: LD_VAR 0 2
36068: PUSH
36069: LD_VAR 0 3
36073: PUSH
36074: LD_VAR 0 4
36078: PUSH
36079: LD_VAR 0 5
36083: PUSH
36084: EMPTY
36085: LIST
36086: LIST
36087: LIST
36088: LIST
36089: ST_TO_ADDR
// end ;
36090: LD_VAR 0 6
36094: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
36095: LD_INT 0
36097: PPUSH
// if not chassis or not engine then
36098: LD_VAR 0 1
36102: NOT
36103: PUSH
36104: LD_VAR 0 2
36108: NOT
36109: OR
36110: IFFALSE 36114
// exit ;
36112: GO 36310
// case engine of engine_solar :
36114: LD_VAR 0 2
36118: PUSH
36119: LD_INT 2
36121: DOUBLE
36122: EQUAL
36123: IFTRUE 36127
36125: GO 36165
36127: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
36128: LD_ADDR_VAR 0 3
36132: PUSH
36133: LD_INT 11
36135: PUSH
36136: LD_INT 12
36138: PUSH
36139: LD_INT 13
36141: PUSH
36142: LD_INT 14
36144: PUSH
36145: LD_INT 1
36147: PUSH
36148: LD_INT 2
36150: PUSH
36151: LD_INT 3
36153: PUSH
36154: EMPTY
36155: LIST
36156: LIST
36157: LIST
36158: LIST
36159: LIST
36160: LIST
36161: LIST
36162: ST_TO_ADDR
36163: GO 36294
36165: LD_INT 1
36167: DOUBLE
36168: EQUAL
36169: IFTRUE 36173
36171: GO 36235
36173: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
36174: LD_ADDR_VAR 0 3
36178: PUSH
36179: LD_INT 11
36181: PUSH
36182: LD_INT 12
36184: PUSH
36185: LD_INT 13
36187: PUSH
36188: LD_INT 14
36190: PUSH
36191: LD_INT 1
36193: PUSH
36194: LD_INT 2
36196: PUSH
36197: LD_INT 3
36199: PUSH
36200: LD_INT 4
36202: PUSH
36203: LD_INT 5
36205: PUSH
36206: LD_INT 21
36208: PUSH
36209: LD_INT 23
36211: PUSH
36212: LD_INT 22
36214: PUSH
36215: LD_INT 24
36217: PUSH
36218: EMPTY
36219: LIST
36220: LIST
36221: LIST
36222: LIST
36223: LIST
36224: LIST
36225: LIST
36226: LIST
36227: LIST
36228: LIST
36229: LIST
36230: LIST
36231: LIST
36232: ST_TO_ADDR
36233: GO 36294
36235: LD_INT 3
36237: DOUBLE
36238: EQUAL
36239: IFTRUE 36243
36241: GO 36293
36243: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
36244: LD_ADDR_VAR 0 3
36248: PUSH
36249: LD_INT 13
36251: PUSH
36252: LD_INT 14
36254: PUSH
36255: LD_INT 2
36257: PUSH
36258: LD_INT 3
36260: PUSH
36261: LD_INT 4
36263: PUSH
36264: LD_INT 5
36266: PUSH
36267: LD_INT 21
36269: PUSH
36270: LD_INT 22
36272: PUSH
36273: LD_INT 23
36275: PUSH
36276: LD_INT 24
36278: PUSH
36279: EMPTY
36280: LIST
36281: LIST
36282: LIST
36283: LIST
36284: LIST
36285: LIST
36286: LIST
36287: LIST
36288: LIST
36289: LIST
36290: ST_TO_ADDR
36291: GO 36294
36293: POP
// result := ( chassis in result ) ;
36294: LD_ADDR_VAR 0 3
36298: PUSH
36299: LD_VAR 0 1
36303: PUSH
36304: LD_VAR 0 3
36308: IN
36309: ST_TO_ADDR
// end ;
36310: LD_VAR 0 3
36314: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
36315: LD_INT 0
36317: PPUSH
// if not chassis or not weapon then
36318: LD_VAR 0 1
36322: NOT
36323: PUSH
36324: LD_VAR 0 2
36328: NOT
36329: OR
36330: IFFALSE 36334
// exit ;
36332: GO 37394
// case weapon of us_machine_gun :
36334: LD_VAR 0 2
36338: PUSH
36339: LD_INT 2
36341: DOUBLE
36342: EQUAL
36343: IFTRUE 36347
36345: GO 36377
36347: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
36348: LD_ADDR_VAR 0 3
36352: PUSH
36353: LD_INT 1
36355: PUSH
36356: LD_INT 2
36358: PUSH
36359: LD_INT 3
36361: PUSH
36362: LD_INT 4
36364: PUSH
36365: LD_INT 5
36367: PUSH
36368: EMPTY
36369: LIST
36370: LIST
36371: LIST
36372: LIST
36373: LIST
36374: ST_TO_ADDR
36375: GO 37378
36377: LD_INT 3
36379: DOUBLE
36380: EQUAL
36381: IFTRUE 36385
36383: GO 36415
36385: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
36386: LD_ADDR_VAR 0 3
36390: PUSH
36391: LD_INT 1
36393: PUSH
36394: LD_INT 2
36396: PUSH
36397: LD_INT 3
36399: PUSH
36400: LD_INT 4
36402: PUSH
36403: LD_INT 5
36405: PUSH
36406: EMPTY
36407: LIST
36408: LIST
36409: LIST
36410: LIST
36411: LIST
36412: ST_TO_ADDR
36413: GO 37378
36415: LD_INT 11
36417: DOUBLE
36418: EQUAL
36419: IFTRUE 36423
36421: GO 36453
36423: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
36424: LD_ADDR_VAR 0 3
36428: PUSH
36429: LD_INT 1
36431: PUSH
36432: LD_INT 2
36434: PUSH
36435: LD_INT 3
36437: PUSH
36438: LD_INT 4
36440: PUSH
36441: LD_INT 5
36443: PUSH
36444: EMPTY
36445: LIST
36446: LIST
36447: LIST
36448: LIST
36449: LIST
36450: ST_TO_ADDR
36451: GO 37378
36453: LD_INT 4
36455: DOUBLE
36456: EQUAL
36457: IFTRUE 36461
36459: GO 36487
36461: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
36462: LD_ADDR_VAR 0 3
36466: PUSH
36467: LD_INT 2
36469: PUSH
36470: LD_INT 3
36472: PUSH
36473: LD_INT 4
36475: PUSH
36476: LD_INT 5
36478: PUSH
36479: EMPTY
36480: LIST
36481: LIST
36482: LIST
36483: LIST
36484: ST_TO_ADDR
36485: GO 37378
36487: LD_INT 5
36489: DOUBLE
36490: EQUAL
36491: IFTRUE 36495
36493: GO 36521
36495: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
36496: LD_ADDR_VAR 0 3
36500: PUSH
36501: LD_INT 2
36503: PUSH
36504: LD_INT 3
36506: PUSH
36507: LD_INT 4
36509: PUSH
36510: LD_INT 5
36512: PUSH
36513: EMPTY
36514: LIST
36515: LIST
36516: LIST
36517: LIST
36518: ST_TO_ADDR
36519: GO 37378
36521: LD_INT 9
36523: DOUBLE
36524: EQUAL
36525: IFTRUE 36529
36527: GO 36555
36529: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
36530: LD_ADDR_VAR 0 3
36534: PUSH
36535: LD_INT 2
36537: PUSH
36538: LD_INT 3
36540: PUSH
36541: LD_INT 4
36543: PUSH
36544: LD_INT 5
36546: PUSH
36547: EMPTY
36548: LIST
36549: LIST
36550: LIST
36551: LIST
36552: ST_TO_ADDR
36553: GO 37378
36555: LD_INT 7
36557: DOUBLE
36558: EQUAL
36559: IFTRUE 36563
36561: GO 36589
36563: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
36564: LD_ADDR_VAR 0 3
36568: PUSH
36569: LD_INT 2
36571: PUSH
36572: LD_INT 3
36574: PUSH
36575: LD_INT 4
36577: PUSH
36578: LD_INT 5
36580: PUSH
36581: EMPTY
36582: LIST
36583: LIST
36584: LIST
36585: LIST
36586: ST_TO_ADDR
36587: GO 37378
36589: LD_INT 12
36591: DOUBLE
36592: EQUAL
36593: IFTRUE 36597
36595: GO 36623
36597: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
36598: LD_ADDR_VAR 0 3
36602: PUSH
36603: LD_INT 2
36605: PUSH
36606: LD_INT 3
36608: PUSH
36609: LD_INT 4
36611: PUSH
36612: LD_INT 5
36614: PUSH
36615: EMPTY
36616: LIST
36617: LIST
36618: LIST
36619: LIST
36620: ST_TO_ADDR
36621: GO 37378
36623: LD_INT 13
36625: DOUBLE
36626: EQUAL
36627: IFTRUE 36631
36629: GO 36657
36631: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
36632: LD_ADDR_VAR 0 3
36636: PUSH
36637: LD_INT 2
36639: PUSH
36640: LD_INT 3
36642: PUSH
36643: LD_INT 4
36645: PUSH
36646: LD_INT 5
36648: PUSH
36649: EMPTY
36650: LIST
36651: LIST
36652: LIST
36653: LIST
36654: ST_TO_ADDR
36655: GO 37378
36657: LD_INT 14
36659: DOUBLE
36660: EQUAL
36661: IFTRUE 36665
36663: GO 36683
36665: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
36666: LD_ADDR_VAR 0 3
36670: PUSH
36671: LD_INT 4
36673: PUSH
36674: LD_INT 5
36676: PUSH
36677: EMPTY
36678: LIST
36679: LIST
36680: ST_TO_ADDR
36681: GO 37378
36683: LD_INT 6
36685: DOUBLE
36686: EQUAL
36687: IFTRUE 36691
36689: GO 36709
36691: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
36692: LD_ADDR_VAR 0 3
36696: PUSH
36697: LD_INT 4
36699: PUSH
36700: LD_INT 5
36702: PUSH
36703: EMPTY
36704: LIST
36705: LIST
36706: ST_TO_ADDR
36707: GO 37378
36709: LD_INT 10
36711: DOUBLE
36712: EQUAL
36713: IFTRUE 36717
36715: GO 36735
36717: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
36718: LD_ADDR_VAR 0 3
36722: PUSH
36723: LD_INT 4
36725: PUSH
36726: LD_INT 5
36728: PUSH
36729: EMPTY
36730: LIST
36731: LIST
36732: ST_TO_ADDR
36733: GO 37378
36735: LD_INT 22
36737: DOUBLE
36738: EQUAL
36739: IFTRUE 36743
36741: GO 36769
36743: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
36744: LD_ADDR_VAR 0 3
36748: PUSH
36749: LD_INT 11
36751: PUSH
36752: LD_INT 12
36754: PUSH
36755: LD_INT 13
36757: PUSH
36758: LD_INT 14
36760: PUSH
36761: EMPTY
36762: LIST
36763: LIST
36764: LIST
36765: LIST
36766: ST_TO_ADDR
36767: GO 37378
36769: LD_INT 23
36771: DOUBLE
36772: EQUAL
36773: IFTRUE 36777
36775: GO 36803
36777: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
36778: LD_ADDR_VAR 0 3
36782: PUSH
36783: LD_INT 11
36785: PUSH
36786: LD_INT 12
36788: PUSH
36789: LD_INT 13
36791: PUSH
36792: LD_INT 14
36794: PUSH
36795: EMPTY
36796: LIST
36797: LIST
36798: LIST
36799: LIST
36800: ST_TO_ADDR
36801: GO 37378
36803: LD_INT 24
36805: DOUBLE
36806: EQUAL
36807: IFTRUE 36811
36809: GO 36837
36811: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
36812: LD_ADDR_VAR 0 3
36816: PUSH
36817: LD_INT 11
36819: PUSH
36820: LD_INT 12
36822: PUSH
36823: LD_INT 13
36825: PUSH
36826: LD_INT 14
36828: PUSH
36829: EMPTY
36830: LIST
36831: LIST
36832: LIST
36833: LIST
36834: ST_TO_ADDR
36835: GO 37378
36837: LD_INT 30
36839: DOUBLE
36840: EQUAL
36841: IFTRUE 36845
36843: GO 36871
36845: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
36846: LD_ADDR_VAR 0 3
36850: PUSH
36851: LD_INT 11
36853: PUSH
36854: LD_INT 12
36856: PUSH
36857: LD_INT 13
36859: PUSH
36860: LD_INT 14
36862: PUSH
36863: EMPTY
36864: LIST
36865: LIST
36866: LIST
36867: LIST
36868: ST_TO_ADDR
36869: GO 37378
36871: LD_INT 25
36873: DOUBLE
36874: EQUAL
36875: IFTRUE 36879
36877: GO 36897
36879: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
36880: LD_ADDR_VAR 0 3
36884: PUSH
36885: LD_INT 13
36887: PUSH
36888: LD_INT 14
36890: PUSH
36891: EMPTY
36892: LIST
36893: LIST
36894: ST_TO_ADDR
36895: GO 37378
36897: LD_INT 27
36899: DOUBLE
36900: EQUAL
36901: IFTRUE 36905
36903: GO 36923
36905: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
36906: LD_ADDR_VAR 0 3
36910: PUSH
36911: LD_INT 13
36913: PUSH
36914: LD_INT 14
36916: PUSH
36917: EMPTY
36918: LIST
36919: LIST
36920: ST_TO_ADDR
36921: GO 37378
36923: LD_INT 92
36925: DOUBLE
36926: EQUAL
36927: IFTRUE 36931
36929: GO 36957
36931: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
36932: LD_ADDR_VAR 0 3
36936: PUSH
36937: LD_INT 11
36939: PUSH
36940: LD_INT 12
36942: PUSH
36943: LD_INT 13
36945: PUSH
36946: LD_INT 14
36948: PUSH
36949: EMPTY
36950: LIST
36951: LIST
36952: LIST
36953: LIST
36954: ST_TO_ADDR
36955: GO 37378
36957: LD_INT 28
36959: DOUBLE
36960: EQUAL
36961: IFTRUE 36965
36963: GO 36983
36965: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
36966: LD_ADDR_VAR 0 3
36970: PUSH
36971: LD_INT 13
36973: PUSH
36974: LD_INT 14
36976: PUSH
36977: EMPTY
36978: LIST
36979: LIST
36980: ST_TO_ADDR
36981: GO 37378
36983: LD_INT 29
36985: DOUBLE
36986: EQUAL
36987: IFTRUE 36991
36989: GO 37009
36991: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
36992: LD_ADDR_VAR 0 3
36996: PUSH
36997: LD_INT 13
36999: PUSH
37000: LD_INT 14
37002: PUSH
37003: EMPTY
37004: LIST
37005: LIST
37006: ST_TO_ADDR
37007: GO 37378
37009: LD_INT 31
37011: DOUBLE
37012: EQUAL
37013: IFTRUE 37017
37015: GO 37035
37017: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
37018: LD_ADDR_VAR 0 3
37022: PUSH
37023: LD_INT 13
37025: PUSH
37026: LD_INT 14
37028: PUSH
37029: EMPTY
37030: LIST
37031: LIST
37032: ST_TO_ADDR
37033: GO 37378
37035: LD_INT 26
37037: DOUBLE
37038: EQUAL
37039: IFTRUE 37043
37041: GO 37061
37043: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
37044: LD_ADDR_VAR 0 3
37048: PUSH
37049: LD_INT 13
37051: PUSH
37052: LD_INT 14
37054: PUSH
37055: EMPTY
37056: LIST
37057: LIST
37058: ST_TO_ADDR
37059: GO 37378
37061: LD_INT 42
37063: DOUBLE
37064: EQUAL
37065: IFTRUE 37069
37067: GO 37095
37069: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
37070: LD_ADDR_VAR 0 3
37074: PUSH
37075: LD_INT 21
37077: PUSH
37078: LD_INT 22
37080: PUSH
37081: LD_INT 23
37083: PUSH
37084: LD_INT 24
37086: PUSH
37087: EMPTY
37088: LIST
37089: LIST
37090: LIST
37091: LIST
37092: ST_TO_ADDR
37093: GO 37378
37095: LD_INT 43
37097: DOUBLE
37098: EQUAL
37099: IFTRUE 37103
37101: GO 37129
37103: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
37104: LD_ADDR_VAR 0 3
37108: PUSH
37109: LD_INT 21
37111: PUSH
37112: LD_INT 22
37114: PUSH
37115: LD_INT 23
37117: PUSH
37118: LD_INT 24
37120: PUSH
37121: EMPTY
37122: LIST
37123: LIST
37124: LIST
37125: LIST
37126: ST_TO_ADDR
37127: GO 37378
37129: LD_INT 44
37131: DOUBLE
37132: EQUAL
37133: IFTRUE 37137
37135: GO 37163
37137: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
37138: LD_ADDR_VAR 0 3
37142: PUSH
37143: LD_INT 21
37145: PUSH
37146: LD_INT 22
37148: PUSH
37149: LD_INT 23
37151: PUSH
37152: LD_INT 24
37154: PUSH
37155: EMPTY
37156: LIST
37157: LIST
37158: LIST
37159: LIST
37160: ST_TO_ADDR
37161: GO 37378
37163: LD_INT 45
37165: DOUBLE
37166: EQUAL
37167: IFTRUE 37171
37169: GO 37197
37171: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
37172: LD_ADDR_VAR 0 3
37176: PUSH
37177: LD_INT 21
37179: PUSH
37180: LD_INT 22
37182: PUSH
37183: LD_INT 23
37185: PUSH
37186: LD_INT 24
37188: PUSH
37189: EMPTY
37190: LIST
37191: LIST
37192: LIST
37193: LIST
37194: ST_TO_ADDR
37195: GO 37378
37197: LD_INT 49
37199: DOUBLE
37200: EQUAL
37201: IFTRUE 37205
37203: GO 37231
37205: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
37206: LD_ADDR_VAR 0 3
37210: PUSH
37211: LD_INT 21
37213: PUSH
37214: LD_INT 22
37216: PUSH
37217: LD_INT 23
37219: PUSH
37220: LD_INT 24
37222: PUSH
37223: EMPTY
37224: LIST
37225: LIST
37226: LIST
37227: LIST
37228: ST_TO_ADDR
37229: GO 37378
37231: LD_INT 51
37233: DOUBLE
37234: EQUAL
37235: IFTRUE 37239
37237: GO 37265
37239: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
37240: LD_ADDR_VAR 0 3
37244: PUSH
37245: LD_INT 21
37247: PUSH
37248: LD_INT 22
37250: PUSH
37251: LD_INT 23
37253: PUSH
37254: LD_INT 24
37256: PUSH
37257: EMPTY
37258: LIST
37259: LIST
37260: LIST
37261: LIST
37262: ST_TO_ADDR
37263: GO 37378
37265: LD_INT 52
37267: DOUBLE
37268: EQUAL
37269: IFTRUE 37273
37271: GO 37299
37273: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
37274: LD_ADDR_VAR 0 3
37278: PUSH
37279: LD_INT 21
37281: PUSH
37282: LD_INT 22
37284: PUSH
37285: LD_INT 23
37287: PUSH
37288: LD_INT 24
37290: PUSH
37291: EMPTY
37292: LIST
37293: LIST
37294: LIST
37295: LIST
37296: ST_TO_ADDR
37297: GO 37378
37299: LD_INT 53
37301: DOUBLE
37302: EQUAL
37303: IFTRUE 37307
37305: GO 37325
37307: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
37308: LD_ADDR_VAR 0 3
37312: PUSH
37313: LD_INT 23
37315: PUSH
37316: LD_INT 24
37318: PUSH
37319: EMPTY
37320: LIST
37321: LIST
37322: ST_TO_ADDR
37323: GO 37378
37325: LD_INT 46
37327: DOUBLE
37328: EQUAL
37329: IFTRUE 37333
37331: GO 37351
37333: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
37334: LD_ADDR_VAR 0 3
37338: PUSH
37339: LD_INT 23
37341: PUSH
37342: LD_INT 24
37344: PUSH
37345: EMPTY
37346: LIST
37347: LIST
37348: ST_TO_ADDR
37349: GO 37378
37351: LD_INT 47
37353: DOUBLE
37354: EQUAL
37355: IFTRUE 37359
37357: GO 37377
37359: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
37360: LD_ADDR_VAR 0 3
37364: PUSH
37365: LD_INT 23
37367: PUSH
37368: LD_INT 24
37370: PUSH
37371: EMPTY
37372: LIST
37373: LIST
37374: ST_TO_ADDR
37375: GO 37378
37377: POP
// result := ( chassis in result ) ;
37378: LD_ADDR_VAR 0 3
37382: PUSH
37383: LD_VAR 0 1
37387: PUSH
37388: LD_VAR 0 3
37392: IN
37393: ST_TO_ADDR
// end ;
37394: LD_VAR 0 3
37398: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
37399: LD_INT 0
37401: PPUSH
37402: PPUSH
37403: PPUSH
37404: PPUSH
37405: PPUSH
37406: PPUSH
37407: PPUSH
// result := array ;
37408: LD_ADDR_VAR 0 5
37412: PUSH
37413: LD_VAR 0 1
37417: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
37418: LD_VAR 0 1
37422: NOT
37423: PUSH
37424: LD_VAR 0 2
37428: NOT
37429: OR
37430: PUSH
37431: LD_VAR 0 3
37435: NOT
37436: OR
37437: PUSH
37438: LD_VAR 0 2
37442: PUSH
37443: LD_VAR 0 1
37447: GREATER
37448: OR
37449: PUSH
37450: LD_VAR 0 3
37454: PUSH
37455: LD_VAR 0 1
37459: GREATER
37460: OR
37461: IFFALSE 37465
// exit ;
37463: GO 37761
// if direction then
37465: LD_VAR 0 4
37469: IFFALSE 37533
// begin d := 1 ;
37471: LD_ADDR_VAR 0 9
37475: PUSH
37476: LD_INT 1
37478: ST_TO_ADDR
// if i_from > i_to then
37479: LD_VAR 0 2
37483: PUSH
37484: LD_VAR 0 3
37488: GREATER
37489: IFFALSE 37515
// length := ( array - i_from ) + i_to else
37491: LD_ADDR_VAR 0 11
37495: PUSH
37496: LD_VAR 0 1
37500: PUSH
37501: LD_VAR 0 2
37505: MINUS
37506: PUSH
37507: LD_VAR 0 3
37511: PLUS
37512: ST_TO_ADDR
37513: GO 37531
// length := i_to - i_from ;
37515: LD_ADDR_VAR 0 11
37519: PUSH
37520: LD_VAR 0 3
37524: PUSH
37525: LD_VAR 0 2
37529: MINUS
37530: ST_TO_ADDR
// end else
37531: GO 37594
// begin d := - 1 ;
37533: LD_ADDR_VAR 0 9
37537: PUSH
37538: LD_INT 1
37540: NEG
37541: ST_TO_ADDR
// if i_from > i_to then
37542: LD_VAR 0 2
37546: PUSH
37547: LD_VAR 0 3
37551: GREATER
37552: IFFALSE 37572
// length := i_from - i_to else
37554: LD_ADDR_VAR 0 11
37558: PUSH
37559: LD_VAR 0 2
37563: PUSH
37564: LD_VAR 0 3
37568: MINUS
37569: ST_TO_ADDR
37570: GO 37594
// length := ( array - i_to ) + i_from ;
37572: LD_ADDR_VAR 0 11
37576: PUSH
37577: LD_VAR 0 1
37581: PUSH
37582: LD_VAR 0 3
37586: MINUS
37587: PUSH
37588: LD_VAR 0 2
37592: PLUS
37593: ST_TO_ADDR
// end ; if not length then
37594: LD_VAR 0 11
37598: NOT
37599: IFFALSE 37603
// exit ;
37601: GO 37761
// tmp := array ;
37603: LD_ADDR_VAR 0 10
37607: PUSH
37608: LD_VAR 0 1
37612: ST_TO_ADDR
// for i = 1 to length do
37613: LD_ADDR_VAR 0 6
37617: PUSH
37618: DOUBLE
37619: LD_INT 1
37621: DEC
37622: ST_TO_ADDR
37623: LD_VAR 0 11
37627: PUSH
37628: FOR_TO
37629: IFFALSE 37749
// begin for j = 1 to array do
37631: LD_ADDR_VAR 0 7
37635: PUSH
37636: DOUBLE
37637: LD_INT 1
37639: DEC
37640: ST_TO_ADDR
37641: LD_VAR 0 1
37645: PUSH
37646: FOR_TO
37647: IFFALSE 37735
// begin k := j + d ;
37649: LD_ADDR_VAR 0 8
37653: PUSH
37654: LD_VAR 0 7
37658: PUSH
37659: LD_VAR 0 9
37663: PLUS
37664: ST_TO_ADDR
// if k > array then
37665: LD_VAR 0 8
37669: PUSH
37670: LD_VAR 0 1
37674: GREATER
37675: IFFALSE 37685
// k := 1 ;
37677: LD_ADDR_VAR 0 8
37681: PUSH
37682: LD_INT 1
37684: ST_TO_ADDR
// if not k then
37685: LD_VAR 0 8
37689: NOT
37690: IFFALSE 37702
// k := array ;
37692: LD_ADDR_VAR 0 8
37696: PUSH
37697: LD_VAR 0 1
37701: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
37702: LD_ADDR_VAR 0 10
37706: PUSH
37707: LD_VAR 0 10
37711: PPUSH
37712: LD_VAR 0 8
37716: PPUSH
37717: LD_VAR 0 1
37721: PUSH
37722: LD_VAR 0 7
37726: ARRAY
37727: PPUSH
37728: CALL_OW 1
37732: ST_TO_ADDR
// end ;
37733: GO 37646
37735: POP
37736: POP
// array := tmp ;
37737: LD_ADDR_VAR 0 1
37741: PUSH
37742: LD_VAR 0 10
37746: ST_TO_ADDR
// end ;
37747: GO 37628
37749: POP
37750: POP
// result := array ;
37751: LD_ADDR_VAR 0 5
37755: PUSH
37756: LD_VAR 0 1
37760: ST_TO_ADDR
// end ;
37761: LD_VAR 0 5
37765: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
37766: LD_INT 0
37768: PPUSH
37769: PPUSH
// result := 0 ;
37770: LD_ADDR_VAR 0 3
37774: PUSH
37775: LD_INT 0
37777: ST_TO_ADDR
// if not array or not value in array then
37778: LD_VAR 0 1
37782: NOT
37783: PUSH
37784: LD_VAR 0 2
37788: PUSH
37789: LD_VAR 0 1
37793: IN
37794: NOT
37795: OR
37796: IFFALSE 37800
// exit ;
37798: GO 37854
// for i = 1 to array do
37800: LD_ADDR_VAR 0 4
37804: PUSH
37805: DOUBLE
37806: LD_INT 1
37808: DEC
37809: ST_TO_ADDR
37810: LD_VAR 0 1
37814: PUSH
37815: FOR_TO
37816: IFFALSE 37852
// if value = array [ i ] then
37818: LD_VAR 0 2
37822: PUSH
37823: LD_VAR 0 1
37827: PUSH
37828: LD_VAR 0 4
37832: ARRAY
37833: EQUAL
37834: IFFALSE 37850
// begin result := i ;
37836: LD_ADDR_VAR 0 3
37840: PUSH
37841: LD_VAR 0 4
37845: ST_TO_ADDR
// exit ;
37846: POP
37847: POP
37848: GO 37854
// end ;
37850: GO 37815
37852: POP
37853: POP
// end ;
37854: LD_VAR 0 3
37858: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
37859: LD_INT 0
37861: PPUSH
// vc_chassis := chassis ;
37862: LD_ADDR_OWVAR 37
37866: PUSH
37867: LD_VAR 0 1
37871: ST_TO_ADDR
// vc_engine := engine ;
37872: LD_ADDR_OWVAR 39
37876: PUSH
37877: LD_VAR 0 2
37881: ST_TO_ADDR
// vc_control := control ;
37882: LD_ADDR_OWVAR 38
37886: PUSH
37887: LD_VAR 0 3
37891: ST_TO_ADDR
// vc_weapon := weapon ;
37892: LD_ADDR_OWVAR 40
37896: PUSH
37897: LD_VAR 0 4
37901: ST_TO_ADDR
// vc_fuel_battery := fuel ;
37902: LD_ADDR_OWVAR 41
37906: PUSH
37907: LD_VAR 0 5
37911: ST_TO_ADDR
// end ;
37912: LD_VAR 0 6
37916: RET
// export function WantPlant ( unit ) ; var task ; begin
37917: LD_INT 0
37919: PPUSH
37920: PPUSH
// result := false ;
37921: LD_ADDR_VAR 0 2
37925: PUSH
37926: LD_INT 0
37928: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
37929: LD_ADDR_VAR 0 3
37933: PUSH
37934: LD_VAR 0 1
37938: PPUSH
37939: CALL_OW 437
37943: ST_TO_ADDR
// if task then
37944: LD_VAR 0 3
37948: IFFALSE 37976
// if task [ 1 ] [ 1 ] = p then
37950: LD_VAR 0 3
37954: PUSH
37955: LD_INT 1
37957: ARRAY
37958: PUSH
37959: LD_INT 1
37961: ARRAY
37962: PUSH
37963: LD_STRING p
37965: EQUAL
37966: IFFALSE 37976
// result := true ;
37968: LD_ADDR_VAR 0 2
37972: PUSH
37973: LD_INT 1
37975: ST_TO_ADDR
// end ;
37976: LD_VAR 0 2
37980: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
37981: LD_INT 0
37983: PPUSH
37984: PPUSH
37985: PPUSH
37986: PPUSH
// if pos < 1 then
37987: LD_VAR 0 2
37991: PUSH
37992: LD_INT 1
37994: LESS
37995: IFFALSE 37999
// exit ;
37997: GO 38302
// if pos = 1 then
37999: LD_VAR 0 2
38003: PUSH
38004: LD_INT 1
38006: EQUAL
38007: IFFALSE 38040
// result := Replace ( arr , pos [ 1 ] , value ) else
38009: LD_ADDR_VAR 0 4
38013: PUSH
38014: LD_VAR 0 1
38018: PPUSH
38019: LD_VAR 0 2
38023: PUSH
38024: LD_INT 1
38026: ARRAY
38027: PPUSH
38028: LD_VAR 0 3
38032: PPUSH
38033: CALL_OW 1
38037: ST_TO_ADDR
38038: GO 38302
// begin tmp := arr ;
38040: LD_ADDR_VAR 0 6
38044: PUSH
38045: LD_VAR 0 1
38049: ST_TO_ADDR
// s_arr := [ tmp ] ;
38050: LD_ADDR_VAR 0 7
38054: PUSH
38055: LD_VAR 0 6
38059: PUSH
38060: EMPTY
38061: LIST
38062: ST_TO_ADDR
// for i = 1 to pos - 1 do
38063: LD_ADDR_VAR 0 5
38067: PUSH
38068: DOUBLE
38069: LD_INT 1
38071: DEC
38072: ST_TO_ADDR
38073: LD_VAR 0 2
38077: PUSH
38078: LD_INT 1
38080: MINUS
38081: PUSH
38082: FOR_TO
38083: IFFALSE 38128
// begin tmp := tmp [ pos [ i ] ] ;
38085: LD_ADDR_VAR 0 6
38089: PUSH
38090: LD_VAR 0 6
38094: PUSH
38095: LD_VAR 0 2
38099: PUSH
38100: LD_VAR 0 5
38104: ARRAY
38105: ARRAY
38106: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
38107: LD_ADDR_VAR 0 7
38111: PUSH
38112: LD_VAR 0 7
38116: PUSH
38117: LD_VAR 0 6
38121: PUSH
38122: EMPTY
38123: LIST
38124: ADD
38125: ST_TO_ADDR
// end ;
38126: GO 38082
38128: POP
38129: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
38130: LD_ADDR_VAR 0 6
38134: PUSH
38135: LD_VAR 0 6
38139: PPUSH
38140: LD_VAR 0 2
38144: PUSH
38145: LD_VAR 0 2
38149: ARRAY
38150: PPUSH
38151: LD_VAR 0 3
38155: PPUSH
38156: CALL_OW 1
38160: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
38161: LD_ADDR_VAR 0 7
38165: PUSH
38166: LD_VAR 0 7
38170: PPUSH
38171: LD_VAR 0 7
38175: PPUSH
38176: LD_VAR 0 6
38180: PPUSH
38181: CALL_OW 1
38185: ST_TO_ADDR
// for i = s_arr downto 2 do
38186: LD_ADDR_VAR 0 5
38190: PUSH
38191: DOUBLE
38192: LD_VAR 0 7
38196: INC
38197: ST_TO_ADDR
38198: LD_INT 2
38200: PUSH
38201: FOR_DOWNTO
38202: IFFALSE 38286
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
38204: LD_ADDR_VAR 0 6
38208: PUSH
38209: LD_VAR 0 7
38213: PUSH
38214: LD_VAR 0 5
38218: PUSH
38219: LD_INT 1
38221: MINUS
38222: ARRAY
38223: PPUSH
38224: LD_VAR 0 2
38228: PUSH
38229: LD_VAR 0 5
38233: PUSH
38234: LD_INT 1
38236: MINUS
38237: ARRAY
38238: PPUSH
38239: LD_VAR 0 7
38243: PUSH
38244: LD_VAR 0 5
38248: ARRAY
38249: PPUSH
38250: CALL_OW 1
38254: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
38255: LD_ADDR_VAR 0 7
38259: PUSH
38260: LD_VAR 0 7
38264: PPUSH
38265: LD_VAR 0 5
38269: PUSH
38270: LD_INT 1
38272: MINUS
38273: PPUSH
38274: LD_VAR 0 6
38278: PPUSH
38279: CALL_OW 1
38283: ST_TO_ADDR
// end ;
38284: GO 38201
38286: POP
38287: POP
// result := s_arr [ 1 ] ;
38288: LD_ADDR_VAR 0 4
38292: PUSH
38293: LD_VAR 0 7
38297: PUSH
38298: LD_INT 1
38300: ARRAY
38301: ST_TO_ADDR
// end ; end ;
38302: LD_VAR 0 4
38306: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
38307: LD_INT 0
38309: PPUSH
38310: PPUSH
// if not list then
38311: LD_VAR 0 1
38315: NOT
38316: IFFALSE 38320
// exit ;
38318: GO 38411
// i := list [ pos1 ] ;
38320: LD_ADDR_VAR 0 5
38324: PUSH
38325: LD_VAR 0 1
38329: PUSH
38330: LD_VAR 0 2
38334: ARRAY
38335: ST_TO_ADDR
// if not i then
38336: LD_VAR 0 5
38340: NOT
38341: IFFALSE 38345
// exit ;
38343: GO 38411
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
38345: LD_ADDR_VAR 0 1
38349: PUSH
38350: LD_VAR 0 1
38354: PPUSH
38355: LD_VAR 0 2
38359: PPUSH
38360: LD_VAR 0 1
38364: PUSH
38365: LD_VAR 0 3
38369: ARRAY
38370: PPUSH
38371: CALL_OW 1
38375: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
38376: LD_ADDR_VAR 0 1
38380: PUSH
38381: LD_VAR 0 1
38385: PPUSH
38386: LD_VAR 0 3
38390: PPUSH
38391: LD_VAR 0 5
38395: PPUSH
38396: CALL_OW 1
38400: ST_TO_ADDR
// result := list ;
38401: LD_ADDR_VAR 0 4
38405: PUSH
38406: LD_VAR 0 1
38410: ST_TO_ADDR
// end ;
38411: LD_VAR 0 4
38415: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
38416: LD_INT 0
38418: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
38419: LD_ADDR_VAR 0 5
38423: PUSH
38424: LD_VAR 0 1
38428: PPUSH
38429: CALL_OW 250
38433: PPUSH
38434: LD_VAR 0 1
38438: PPUSH
38439: CALL_OW 251
38443: PPUSH
38444: LD_VAR 0 2
38448: PPUSH
38449: LD_VAR 0 3
38453: PPUSH
38454: LD_VAR 0 4
38458: PPUSH
38459: CALL 38837 0 5
38463: ST_TO_ADDR
// end ;
38464: LD_VAR 0 5
38468: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
38469: LD_INT 0
38471: PPUSH
38472: PPUSH
38473: PPUSH
38474: PPUSH
// if not list or not unit then
38475: LD_VAR 0 2
38479: NOT
38480: PUSH
38481: LD_VAR 0 1
38485: NOT
38486: OR
38487: IFFALSE 38491
// exit ;
38489: GO 38832
// result := [ ] ;
38491: LD_ADDR_VAR 0 5
38495: PUSH
38496: EMPTY
38497: ST_TO_ADDR
// for i in list do
38498: LD_ADDR_VAR 0 6
38502: PUSH
38503: LD_VAR 0 2
38507: PUSH
38508: FOR_IN
38509: IFFALSE 38727
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
38511: LD_ADDR_VAR 0 8
38515: PUSH
38516: LD_VAR 0 1
38520: PPUSH
38521: LD_VAR 0 6
38525: PUSH
38526: LD_INT 1
38528: ARRAY
38529: PPUSH
38530: LD_VAR 0 6
38534: PUSH
38535: LD_INT 2
38537: ARRAY
38538: PPUSH
38539: CALL_OW 297
38543: ST_TO_ADDR
// if not Count ( result ) then
38544: LD_VAR 0 5
38548: PPUSH
38549: CALL 35121 0 1
38553: NOT
38554: IFFALSE 38587
// begin result := Join ( result , [ i , tmp ] ) ;
38556: LD_ADDR_VAR 0 5
38560: PUSH
38561: LD_VAR 0 5
38565: PPUSH
38566: LD_VAR 0 6
38570: PUSH
38571: LD_VAR 0 8
38575: PUSH
38576: EMPTY
38577: LIST
38578: LIST
38579: PPUSH
38580: CALL 70710 0 2
38584: ST_TO_ADDR
// continue ;
38585: GO 38508
// end ; if result [ result ] [ 2 ] <= tmp then
38587: LD_VAR 0 5
38591: PUSH
38592: LD_VAR 0 5
38596: ARRAY
38597: PUSH
38598: LD_INT 2
38600: ARRAY
38601: PUSH
38602: LD_VAR 0 8
38606: LESSEQUAL
38607: IFFALSE 38640
// result := Join ( result , [ i , tmp ] ) else
38609: LD_ADDR_VAR 0 5
38613: PUSH
38614: LD_VAR 0 5
38618: PPUSH
38619: LD_VAR 0 6
38623: PUSH
38624: LD_VAR 0 8
38628: PUSH
38629: EMPTY
38630: LIST
38631: LIST
38632: PPUSH
38633: CALL 70710 0 2
38637: ST_TO_ADDR
38638: GO 38725
// begin for j := 1 to Count ( result ) do
38640: LD_ADDR_VAR 0 7
38644: PUSH
38645: DOUBLE
38646: LD_INT 1
38648: DEC
38649: ST_TO_ADDR
38650: LD_VAR 0 5
38654: PPUSH
38655: CALL 35121 0 1
38659: PUSH
38660: FOR_TO
38661: IFFALSE 38723
// begin if tmp < result [ j ] [ 2 ] then
38663: LD_VAR 0 8
38667: PUSH
38668: LD_VAR 0 5
38672: PUSH
38673: LD_VAR 0 7
38677: ARRAY
38678: PUSH
38679: LD_INT 2
38681: ARRAY
38682: LESS
38683: IFFALSE 38721
// begin result := Insert ( result , j , [ i , tmp ] ) ;
38685: LD_ADDR_VAR 0 5
38689: PUSH
38690: LD_VAR 0 5
38694: PPUSH
38695: LD_VAR 0 7
38699: PPUSH
38700: LD_VAR 0 6
38704: PUSH
38705: LD_VAR 0 8
38709: PUSH
38710: EMPTY
38711: LIST
38712: LIST
38713: PPUSH
38714: CALL_OW 2
38718: ST_TO_ADDR
// break ;
38719: GO 38723
// end ; end ;
38721: GO 38660
38723: POP
38724: POP
// end ; end ;
38725: GO 38508
38727: POP
38728: POP
// if result and not asc then
38729: LD_VAR 0 5
38733: PUSH
38734: LD_VAR 0 3
38738: NOT
38739: AND
38740: IFFALSE 38757
// result := ReverseArray ( result ) ;
38742: LD_ADDR_VAR 0 5
38746: PUSH
38747: LD_VAR 0 5
38751: PPUSH
38752: CALL 65997 0 1
38756: ST_TO_ADDR
// tmp := [ ] ;
38757: LD_ADDR_VAR 0 8
38761: PUSH
38762: EMPTY
38763: ST_TO_ADDR
// if mode then
38764: LD_VAR 0 4
38768: IFFALSE 38832
// begin for i := 1 to result do
38770: LD_ADDR_VAR 0 6
38774: PUSH
38775: DOUBLE
38776: LD_INT 1
38778: DEC
38779: ST_TO_ADDR
38780: LD_VAR 0 5
38784: PUSH
38785: FOR_TO
38786: IFFALSE 38820
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
38788: LD_ADDR_VAR 0 8
38792: PUSH
38793: LD_VAR 0 8
38797: PPUSH
38798: LD_VAR 0 5
38802: PUSH
38803: LD_VAR 0 6
38807: ARRAY
38808: PUSH
38809: LD_INT 1
38811: ARRAY
38812: PPUSH
38813: CALL 70710 0 2
38817: ST_TO_ADDR
38818: GO 38785
38820: POP
38821: POP
// result := tmp ;
38822: LD_ADDR_VAR 0 5
38826: PUSH
38827: LD_VAR 0 8
38831: ST_TO_ADDR
// end ; end ;
38832: LD_VAR 0 5
38836: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
38837: LD_INT 0
38839: PPUSH
38840: PPUSH
38841: PPUSH
38842: PPUSH
// if not list then
38843: LD_VAR 0 3
38847: NOT
38848: IFFALSE 38852
// exit ;
38850: GO 39240
// result := [ ] ;
38852: LD_ADDR_VAR 0 6
38856: PUSH
38857: EMPTY
38858: ST_TO_ADDR
// for i in list do
38859: LD_ADDR_VAR 0 7
38863: PUSH
38864: LD_VAR 0 3
38868: PUSH
38869: FOR_IN
38870: IFFALSE 39072
// begin tmp := GetDistUnitXY ( i , x , y ) ;
38872: LD_ADDR_VAR 0 9
38876: PUSH
38877: LD_VAR 0 7
38881: PPUSH
38882: LD_VAR 0 1
38886: PPUSH
38887: LD_VAR 0 2
38891: PPUSH
38892: CALL_OW 297
38896: ST_TO_ADDR
// if not result then
38897: LD_VAR 0 6
38901: NOT
38902: IFFALSE 38928
// result := [ [ i , tmp ] ] else
38904: LD_ADDR_VAR 0 6
38908: PUSH
38909: LD_VAR 0 7
38913: PUSH
38914: LD_VAR 0 9
38918: PUSH
38919: EMPTY
38920: LIST
38921: LIST
38922: PUSH
38923: EMPTY
38924: LIST
38925: ST_TO_ADDR
38926: GO 39070
// begin if result [ result ] [ 2 ] < tmp then
38928: LD_VAR 0 6
38932: PUSH
38933: LD_VAR 0 6
38937: ARRAY
38938: PUSH
38939: LD_INT 2
38941: ARRAY
38942: PUSH
38943: LD_VAR 0 9
38947: LESS
38948: IFFALSE 38990
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
38950: LD_ADDR_VAR 0 6
38954: PUSH
38955: LD_VAR 0 6
38959: PPUSH
38960: LD_VAR 0 6
38964: PUSH
38965: LD_INT 1
38967: PLUS
38968: PPUSH
38969: LD_VAR 0 7
38973: PUSH
38974: LD_VAR 0 9
38978: PUSH
38979: EMPTY
38980: LIST
38981: LIST
38982: PPUSH
38983: CALL_OW 2
38987: ST_TO_ADDR
38988: GO 39070
// for j = 1 to result do
38990: LD_ADDR_VAR 0 8
38994: PUSH
38995: DOUBLE
38996: LD_INT 1
38998: DEC
38999: ST_TO_ADDR
39000: LD_VAR 0 6
39004: PUSH
39005: FOR_TO
39006: IFFALSE 39068
// begin if tmp < result [ j ] [ 2 ] then
39008: LD_VAR 0 9
39012: PUSH
39013: LD_VAR 0 6
39017: PUSH
39018: LD_VAR 0 8
39022: ARRAY
39023: PUSH
39024: LD_INT 2
39026: ARRAY
39027: LESS
39028: IFFALSE 39066
// begin result := Insert ( result , j , [ i , tmp ] ) ;
39030: LD_ADDR_VAR 0 6
39034: PUSH
39035: LD_VAR 0 6
39039: PPUSH
39040: LD_VAR 0 8
39044: PPUSH
39045: LD_VAR 0 7
39049: PUSH
39050: LD_VAR 0 9
39054: PUSH
39055: EMPTY
39056: LIST
39057: LIST
39058: PPUSH
39059: CALL_OW 2
39063: ST_TO_ADDR
// break ;
39064: GO 39068
// end ; end ;
39066: GO 39005
39068: POP
39069: POP
// end ; end ;
39070: GO 38869
39072: POP
39073: POP
// if result and not asc then
39074: LD_VAR 0 6
39078: PUSH
39079: LD_VAR 0 4
39083: NOT
39084: AND
39085: IFFALSE 39160
// begin tmp := result ;
39087: LD_ADDR_VAR 0 9
39091: PUSH
39092: LD_VAR 0 6
39096: ST_TO_ADDR
// for i = tmp downto 1 do
39097: LD_ADDR_VAR 0 7
39101: PUSH
39102: DOUBLE
39103: LD_VAR 0 9
39107: INC
39108: ST_TO_ADDR
39109: LD_INT 1
39111: PUSH
39112: FOR_DOWNTO
39113: IFFALSE 39158
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
39115: LD_ADDR_VAR 0 6
39119: PUSH
39120: LD_VAR 0 6
39124: PPUSH
39125: LD_VAR 0 9
39129: PUSH
39130: LD_VAR 0 7
39134: MINUS
39135: PUSH
39136: LD_INT 1
39138: PLUS
39139: PPUSH
39140: LD_VAR 0 9
39144: PUSH
39145: LD_VAR 0 7
39149: ARRAY
39150: PPUSH
39151: CALL_OW 1
39155: ST_TO_ADDR
39156: GO 39112
39158: POP
39159: POP
// end ; tmp := [ ] ;
39160: LD_ADDR_VAR 0 9
39164: PUSH
39165: EMPTY
39166: ST_TO_ADDR
// if mode then
39167: LD_VAR 0 5
39171: IFFALSE 39240
// begin for i = 1 to result do
39173: LD_ADDR_VAR 0 7
39177: PUSH
39178: DOUBLE
39179: LD_INT 1
39181: DEC
39182: ST_TO_ADDR
39183: LD_VAR 0 6
39187: PUSH
39188: FOR_TO
39189: IFFALSE 39228
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
39191: LD_ADDR_VAR 0 9
39195: PUSH
39196: LD_VAR 0 9
39200: PPUSH
39201: LD_VAR 0 7
39205: PPUSH
39206: LD_VAR 0 6
39210: PUSH
39211: LD_VAR 0 7
39215: ARRAY
39216: PUSH
39217: LD_INT 1
39219: ARRAY
39220: PPUSH
39221: CALL_OW 1
39225: ST_TO_ADDR
39226: GO 39188
39228: POP
39229: POP
// result := tmp ;
39230: LD_ADDR_VAR 0 6
39234: PUSH
39235: LD_VAR 0 9
39239: ST_TO_ADDR
// end ; end ;
39240: LD_VAR 0 6
39244: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
39245: LD_INT 0
39247: PPUSH
39248: PPUSH
39249: PPUSH
39250: PPUSH
39251: PPUSH
39252: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
39253: LD_ADDR_VAR 0 5
39257: PUSH
39258: LD_INT 0
39260: PUSH
39261: LD_INT 0
39263: PUSH
39264: LD_INT 0
39266: PUSH
39267: EMPTY
39268: PUSH
39269: EMPTY
39270: LIST
39271: LIST
39272: LIST
39273: LIST
39274: ST_TO_ADDR
// if not x or not y then
39275: LD_VAR 0 2
39279: NOT
39280: PUSH
39281: LD_VAR 0 3
39285: NOT
39286: OR
39287: IFFALSE 39291
// exit ;
39289: GO 40941
// if not range then
39291: LD_VAR 0 4
39295: NOT
39296: IFFALSE 39306
// range := 10 ;
39298: LD_ADDR_VAR 0 4
39302: PUSH
39303: LD_INT 10
39305: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
39306: LD_ADDR_VAR 0 8
39310: PUSH
39311: LD_INT 81
39313: PUSH
39314: LD_VAR 0 1
39318: PUSH
39319: EMPTY
39320: LIST
39321: LIST
39322: PUSH
39323: LD_INT 92
39325: PUSH
39326: LD_VAR 0 2
39330: PUSH
39331: LD_VAR 0 3
39335: PUSH
39336: LD_VAR 0 4
39340: PUSH
39341: EMPTY
39342: LIST
39343: LIST
39344: LIST
39345: LIST
39346: PUSH
39347: LD_INT 3
39349: PUSH
39350: LD_INT 21
39352: PUSH
39353: LD_INT 3
39355: PUSH
39356: EMPTY
39357: LIST
39358: LIST
39359: PUSH
39360: EMPTY
39361: LIST
39362: LIST
39363: PUSH
39364: EMPTY
39365: LIST
39366: LIST
39367: LIST
39368: PPUSH
39369: CALL_OW 69
39373: ST_TO_ADDR
// if not tmp then
39374: LD_VAR 0 8
39378: NOT
39379: IFFALSE 39383
// exit ;
39381: GO 40941
// for i in tmp do
39383: LD_ADDR_VAR 0 6
39387: PUSH
39388: LD_VAR 0 8
39392: PUSH
39393: FOR_IN
39394: IFFALSE 40916
// begin points := [ 0 , 0 , 0 ] ;
39396: LD_ADDR_VAR 0 9
39400: PUSH
39401: LD_INT 0
39403: PUSH
39404: LD_INT 0
39406: PUSH
39407: LD_INT 0
39409: PUSH
39410: EMPTY
39411: LIST
39412: LIST
39413: LIST
39414: ST_TO_ADDR
// bpoints := 1 ;
39415: LD_ADDR_VAR 0 10
39419: PUSH
39420: LD_INT 1
39422: ST_TO_ADDR
// case GetType ( i ) of unit_human :
39423: LD_VAR 0 6
39427: PPUSH
39428: CALL_OW 247
39432: PUSH
39433: LD_INT 1
39435: DOUBLE
39436: EQUAL
39437: IFTRUE 39441
39439: GO 40019
39441: POP
// begin if GetClass ( i ) = 1 then
39442: LD_VAR 0 6
39446: PPUSH
39447: CALL_OW 257
39451: PUSH
39452: LD_INT 1
39454: EQUAL
39455: IFFALSE 39476
// points := [ 10 , 5 , 3 ] ;
39457: LD_ADDR_VAR 0 9
39461: PUSH
39462: LD_INT 10
39464: PUSH
39465: LD_INT 5
39467: PUSH
39468: LD_INT 3
39470: PUSH
39471: EMPTY
39472: LIST
39473: LIST
39474: LIST
39475: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
39476: LD_VAR 0 6
39480: PPUSH
39481: CALL_OW 257
39485: PUSH
39486: LD_INT 2
39488: PUSH
39489: LD_INT 3
39491: PUSH
39492: LD_INT 4
39494: PUSH
39495: EMPTY
39496: LIST
39497: LIST
39498: LIST
39499: IN
39500: IFFALSE 39521
// points := [ 3 , 2 , 1 ] ;
39502: LD_ADDR_VAR 0 9
39506: PUSH
39507: LD_INT 3
39509: PUSH
39510: LD_INT 2
39512: PUSH
39513: LD_INT 1
39515: PUSH
39516: EMPTY
39517: LIST
39518: LIST
39519: LIST
39520: ST_TO_ADDR
// if GetClass ( i ) = 5 then
39521: LD_VAR 0 6
39525: PPUSH
39526: CALL_OW 257
39530: PUSH
39531: LD_INT 5
39533: EQUAL
39534: IFFALSE 39555
// points := [ 130 , 5 , 2 ] ;
39536: LD_ADDR_VAR 0 9
39540: PUSH
39541: LD_INT 130
39543: PUSH
39544: LD_INT 5
39546: PUSH
39547: LD_INT 2
39549: PUSH
39550: EMPTY
39551: LIST
39552: LIST
39553: LIST
39554: ST_TO_ADDR
// if GetClass ( i ) = 8 then
39555: LD_VAR 0 6
39559: PPUSH
39560: CALL_OW 257
39564: PUSH
39565: LD_INT 8
39567: EQUAL
39568: IFFALSE 39589
// points := [ 35 , 35 , 30 ] ;
39570: LD_ADDR_VAR 0 9
39574: PUSH
39575: LD_INT 35
39577: PUSH
39578: LD_INT 35
39580: PUSH
39581: LD_INT 30
39583: PUSH
39584: EMPTY
39585: LIST
39586: LIST
39587: LIST
39588: ST_TO_ADDR
// if GetClass ( i ) = 9 then
39589: LD_VAR 0 6
39593: PPUSH
39594: CALL_OW 257
39598: PUSH
39599: LD_INT 9
39601: EQUAL
39602: IFFALSE 39623
// points := [ 20 , 55 , 40 ] ;
39604: LD_ADDR_VAR 0 9
39608: PUSH
39609: LD_INT 20
39611: PUSH
39612: LD_INT 55
39614: PUSH
39615: LD_INT 40
39617: PUSH
39618: EMPTY
39619: LIST
39620: LIST
39621: LIST
39622: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
39623: LD_VAR 0 6
39627: PPUSH
39628: CALL_OW 257
39632: PUSH
39633: LD_INT 12
39635: PUSH
39636: LD_INT 16
39638: PUSH
39639: EMPTY
39640: LIST
39641: LIST
39642: IN
39643: IFFALSE 39664
// points := [ 5 , 3 , 2 ] ;
39645: LD_ADDR_VAR 0 9
39649: PUSH
39650: LD_INT 5
39652: PUSH
39653: LD_INT 3
39655: PUSH
39656: LD_INT 2
39658: PUSH
39659: EMPTY
39660: LIST
39661: LIST
39662: LIST
39663: ST_TO_ADDR
// if GetClass ( i ) = 17 then
39664: LD_VAR 0 6
39668: PPUSH
39669: CALL_OW 257
39673: PUSH
39674: LD_INT 17
39676: EQUAL
39677: IFFALSE 39698
// points := [ 100 , 50 , 75 ] ;
39679: LD_ADDR_VAR 0 9
39683: PUSH
39684: LD_INT 100
39686: PUSH
39687: LD_INT 50
39689: PUSH
39690: LD_INT 75
39692: PUSH
39693: EMPTY
39694: LIST
39695: LIST
39696: LIST
39697: ST_TO_ADDR
// if GetClass ( i ) = 15 then
39698: LD_VAR 0 6
39702: PPUSH
39703: CALL_OW 257
39707: PUSH
39708: LD_INT 15
39710: EQUAL
39711: IFFALSE 39732
// points := [ 10 , 5 , 3 ] ;
39713: LD_ADDR_VAR 0 9
39717: PUSH
39718: LD_INT 10
39720: PUSH
39721: LD_INT 5
39723: PUSH
39724: LD_INT 3
39726: PUSH
39727: EMPTY
39728: LIST
39729: LIST
39730: LIST
39731: ST_TO_ADDR
// if GetClass ( i ) = 14 then
39732: LD_VAR 0 6
39736: PPUSH
39737: CALL_OW 257
39741: PUSH
39742: LD_INT 14
39744: EQUAL
39745: IFFALSE 39766
// points := [ 10 , 0 , 0 ] ;
39747: LD_ADDR_VAR 0 9
39751: PUSH
39752: LD_INT 10
39754: PUSH
39755: LD_INT 0
39757: PUSH
39758: LD_INT 0
39760: PUSH
39761: EMPTY
39762: LIST
39763: LIST
39764: LIST
39765: ST_TO_ADDR
// if GetClass ( i ) = 11 then
39766: LD_VAR 0 6
39770: PPUSH
39771: CALL_OW 257
39775: PUSH
39776: LD_INT 11
39778: EQUAL
39779: IFFALSE 39800
// points := [ 30 , 10 , 5 ] ;
39781: LD_ADDR_VAR 0 9
39785: PUSH
39786: LD_INT 30
39788: PUSH
39789: LD_INT 10
39791: PUSH
39792: LD_INT 5
39794: PUSH
39795: EMPTY
39796: LIST
39797: LIST
39798: LIST
39799: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
39800: LD_VAR 0 1
39804: PPUSH
39805: LD_INT 5
39807: PPUSH
39808: CALL_OW 321
39812: PUSH
39813: LD_INT 2
39815: EQUAL
39816: IFFALSE 39833
// bpoints := bpoints * 1.8 ;
39818: LD_ADDR_VAR 0 10
39822: PUSH
39823: LD_VAR 0 10
39827: PUSH
39828: LD_REAL  1.80000000000000E+0000
39831: MUL
39832: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
39833: LD_VAR 0 6
39837: PPUSH
39838: CALL_OW 257
39842: PUSH
39843: LD_INT 1
39845: PUSH
39846: LD_INT 2
39848: PUSH
39849: LD_INT 3
39851: PUSH
39852: LD_INT 4
39854: PUSH
39855: EMPTY
39856: LIST
39857: LIST
39858: LIST
39859: LIST
39860: IN
39861: PUSH
39862: LD_VAR 0 1
39866: PPUSH
39867: LD_INT 51
39869: PPUSH
39870: CALL_OW 321
39874: PUSH
39875: LD_INT 2
39877: EQUAL
39878: AND
39879: IFFALSE 39896
// bpoints := bpoints * 1.2 ;
39881: LD_ADDR_VAR 0 10
39885: PUSH
39886: LD_VAR 0 10
39890: PUSH
39891: LD_REAL  1.20000000000000E+0000
39894: MUL
39895: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
39896: LD_VAR 0 6
39900: PPUSH
39901: CALL_OW 257
39905: PUSH
39906: LD_INT 5
39908: PUSH
39909: LD_INT 7
39911: PUSH
39912: LD_INT 9
39914: PUSH
39915: EMPTY
39916: LIST
39917: LIST
39918: LIST
39919: IN
39920: PUSH
39921: LD_VAR 0 1
39925: PPUSH
39926: LD_INT 52
39928: PPUSH
39929: CALL_OW 321
39933: PUSH
39934: LD_INT 2
39936: EQUAL
39937: AND
39938: IFFALSE 39955
// bpoints := bpoints * 1.5 ;
39940: LD_ADDR_VAR 0 10
39944: PUSH
39945: LD_VAR 0 10
39949: PUSH
39950: LD_REAL  1.50000000000000E+0000
39953: MUL
39954: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
39955: LD_VAR 0 1
39959: PPUSH
39960: LD_INT 66
39962: PPUSH
39963: CALL_OW 321
39967: PUSH
39968: LD_INT 2
39970: EQUAL
39971: IFFALSE 39988
// bpoints := bpoints * 1.1 ;
39973: LD_ADDR_VAR 0 10
39977: PUSH
39978: LD_VAR 0 10
39982: PUSH
39983: LD_REAL  1.10000000000000E+0000
39986: MUL
39987: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
39988: LD_ADDR_VAR 0 10
39992: PUSH
39993: LD_VAR 0 10
39997: PUSH
39998: LD_VAR 0 6
40002: PPUSH
40003: LD_INT 1
40005: PPUSH
40006: CALL_OW 259
40010: PUSH
40011: LD_REAL  1.15000000000000E+0000
40014: MUL
40015: MUL
40016: ST_TO_ADDR
// end ; unit_vehicle :
40017: GO 40845
40019: LD_INT 2
40021: DOUBLE
40022: EQUAL
40023: IFTRUE 40027
40025: GO 40833
40027: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
40028: LD_VAR 0 6
40032: PPUSH
40033: CALL_OW 264
40037: PUSH
40038: LD_INT 2
40040: PUSH
40041: LD_INT 42
40043: PUSH
40044: LD_INT 24
40046: PUSH
40047: EMPTY
40048: LIST
40049: LIST
40050: LIST
40051: IN
40052: IFFALSE 40073
// points := [ 25 , 5 , 3 ] ;
40054: LD_ADDR_VAR 0 9
40058: PUSH
40059: LD_INT 25
40061: PUSH
40062: LD_INT 5
40064: PUSH
40065: LD_INT 3
40067: PUSH
40068: EMPTY
40069: LIST
40070: LIST
40071: LIST
40072: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
40073: LD_VAR 0 6
40077: PPUSH
40078: CALL_OW 264
40082: PUSH
40083: LD_INT 4
40085: PUSH
40086: LD_INT 43
40088: PUSH
40089: LD_INT 25
40091: PUSH
40092: EMPTY
40093: LIST
40094: LIST
40095: LIST
40096: IN
40097: IFFALSE 40118
// points := [ 40 , 15 , 5 ] ;
40099: LD_ADDR_VAR 0 9
40103: PUSH
40104: LD_INT 40
40106: PUSH
40107: LD_INT 15
40109: PUSH
40110: LD_INT 5
40112: PUSH
40113: EMPTY
40114: LIST
40115: LIST
40116: LIST
40117: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
40118: LD_VAR 0 6
40122: PPUSH
40123: CALL_OW 264
40127: PUSH
40128: LD_INT 3
40130: PUSH
40131: LD_INT 23
40133: PUSH
40134: EMPTY
40135: LIST
40136: LIST
40137: IN
40138: IFFALSE 40159
// points := [ 7 , 25 , 8 ] ;
40140: LD_ADDR_VAR 0 9
40144: PUSH
40145: LD_INT 7
40147: PUSH
40148: LD_INT 25
40150: PUSH
40151: LD_INT 8
40153: PUSH
40154: EMPTY
40155: LIST
40156: LIST
40157: LIST
40158: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
40159: LD_VAR 0 6
40163: PPUSH
40164: CALL_OW 264
40168: PUSH
40169: LD_INT 5
40171: PUSH
40172: LD_INT 27
40174: PUSH
40175: LD_INT 44
40177: PUSH
40178: EMPTY
40179: LIST
40180: LIST
40181: LIST
40182: IN
40183: IFFALSE 40204
// points := [ 14 , 50 , 16 ] ;
40185: LD_ADDR_VAR 0 9
40189: PUSH
40190: LD_INT 14
40192: PUSH
40193: LD_INT 50
40195: PUSH
40196: LD_INT 16
40198: PUSH
40199: EMPTY
40200: LIST
40201: LIST
40202: LIST
40203: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
40204: LD_VAR 0 6
40208: PPUSH
40209: CALL_OW 264
40213: PUSH
40214: LD_INT 6
40216: PUSH
40217: LD_INT 46
40219: PUSH
40220: EMPTY
40221: LIST
40222: LIST
40223: IN
40224: IFFALSE 40245
// points := [ 32 , 120 , 70 ] ;
40226: LD_ADDR_VAR 0 9
40230: PUSH
40231: LD_INT 32
40233: PUSH
40234: LD_INT 120
40236: PUSH
40237: LD_INT 70
40239: PUSH
40240: EMPTY
40241: LIST
40242: LIST
40243: LIST
40244: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
40245: LD_VAR 0 6
40249: PPUSH
40250: CALL_OW 264
40254: PUSH
40255: LD_INT 7
40257: PUSH
40258: LD_INT 28
40260: PUSH
40261: LD_INT 45
40263: PUSH
40264: LD_INT 92
40266: PUSH
40267: EMPTY
40268: LIST
40269: LIST
40270: LIST
40271: LIST
40272: IN
40273: IFFALSE 40294
// points := [ 35 , 20 , 45 ] ;
40275: LD_ADDR_VAR 0 9
40279: PUSH
40280: LD_INT 35
40282: PUSH
40283: LD_INT 20
40285: PUSH
40286: LD_INT 45
40288: PUSH
40289: EMPTY
40290: LIST
40291: LIST
40292: LIST
40293: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
40294: LD_VAR 0 6
40298: PPUSH
40299: CALL_OW 264
40303: PUSH
40304: LD_INT 47
40306: PUSH
40307: EMPTY
40308: LIST
40309: IN
40310: IFFALSE 40331
// points := [ 67 , 45 , 75 ] ;
40312: LD_ADDR_VAR 0 9
40316: PUSH
40317: LD_INT 67
40319: PUSH
40320: LD_INT 45
40322: PUSH
40323: LD_INT 75
40325: PUSH
40326: EMPTY
40327: LIST
40328: LIST
40329: LIST
40330: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
40331: LD_VAR 0 6
40335: PPUSH
40336: CALL_OW 264
40340: PUSH
40341: LD_INT 26
40343: PUSH
40344: EMPTY
40345: LIST
40346: IN
40347: IFFALSE 40368
// points := [ 120 , 30 , 80 ] ;
40349: LD_ADDR_VAR 0 9
40353: PUSH
40354: LD_INT 120
40356: PUSH
40357: LD_INT 30
40359: PUSH
40360: LD_INT 80
40362: PUSH
40363: EMPTY
40364: LIST
40365: LIST
40366: LIST
40367: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
40368: LD_VAR 0 6
40372: PPUSH
40373: CALL_OW 264
40377: PUSH
40378: LD_INT 22
40380: PUSH
40381: EMPTY
40382: LIST
40383: IN
40384: IFFALSE 40405
// points := [ 40 , 1 , 1 ] ;
40386: LD_ADDR_VAR 0 9
40390: PUSH
40391: LD_INT 40
40393: PUSH
40394: LD_INT 1
40396: PUSH
40397: LD_INT 1
40399: PUSH
40400: EMPTY
40401: LIST
40402: LIST
40403: LIST
40404: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
40405: LD_VAR 0 6
40409: PPUSH
40410: CALL_OW 264
40414: PUSH
40415: LD_INT 29
40417: PUSH
40418: EMPTY
40419: LIST
40420: IN
40421: IFFALSE 40442
// points := [ 70 , 200 , 400 ] ;
40423: LD_ADDR_VAR 0 9
40427: PUSH
40428: LD_INT 70
40430: PUSH
40431: LD_INT 200
40433: PUSH
40434: LD_INT 400
40436: PUSH
40437: EMPTY
40438: LIST
40439: LIST
40440: LIST
40441: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
40442: LD_VAR 0 6
40446: PPUSH
40447: CALL_OW 264
40451: PUSH
40452: LD_INT 14
40454: PUSH
40455: LD_INT 53
40457: PUSH
40458: EMPTY
40459: LIST
40460: LIST
40461: IN
40462: IFFALSE 40483
// points := [ 40 , 10 , 20 ] ;
40464: LD_ADDR_VAR 0 9
40468: PUSH
40469: LD_INT 40
40471: PUSH
40472: LD_INT 10
40474: PUSH
40475: LD_INT 20
40477: PUSH
40478: EMPTY
40479: LIST
40480: LIST
40481: LIST
40482: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
40483: LD_VAR 0 6
40487: PPUSH
40488: CALL_OW 264
40492: PUSH
40493: LD_INT 9
40495: PUSH
40496: EMPTY
40497: LIST
40498: IN
40499: IFFALSE 40520
// points := [ 5 , 70 , 20 ] ;
40501: LD_ADDR_VAR 0 9
40505: PUSH
40506: LD_INT 5
40508: PUSH
40509: LD_INT 70
40511: PUSH
40512: LD_INT 20
40514: PUSH
40515: EMPTY
40516: LIST
40517: LIST
40518: LIST
40519: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
40520: LD_VAR 0 6
40524: PPUSH
40525: CALL_OW 264
40529: PUSH
40530: LD_INT 10
40532: PUSH
40533: EMPTY
40534: LIST
40535: IN
40536: IFFALSE 40557
// points := [ 35 , 110 , 70 ] ;
40538: LD_ADDR_VAR 0 9
40542: PUSH
40543: LD_INT 35
40545: PUSH
40546: LD_INT 110
40548: PUSH
40549: LD_INT 70
40551: PUSH
40552: EMPTY
40553: LIST
40554: LIST
40555: LIST
40556: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
40557: LD_VAR 0 6
40561: PPUSH
40562: CALL_OW 265
40566: PUSH
40567: LD_INT 25
40569: EQUAL
40570: IFFALSE 40591
// points := [ 80 , 65 , 100 ] ;
40572: LD_ADDR_VAR 0 9
40576: PUSH
40577: LD_INT 80
40579: PUSH
40580: LD_INT 65
40582: PUSH
40583: LD_INT 100
40585: PUSH
40586: EMPTY
40587: LIST
40588: LIST
40589: LIST
40590: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
40591: LD_VAR 0 6
40595: PPUSH
40596: CALL_OW 263
40600: PUSH
40601: LD_INT 1
40603: EQUAL
40604: IFFALSE 40639
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
40606: LD_ADDR_VAR 0 10
40610: PUSH
40611: LD_VAR 0 10
40615: PUSH
40616: LD_VAR 0 6
40620: PPUSH
40621: CALL_OW 311
40625: PPUSH
40626: LD_INT 3
40628: PPUSH
40629: CALL_OW 259
40633: PUSH
40634: LD_INT 4
40636: MUL
40637: MUL
40638: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
40639: LD_VAR 0 6
40643: PPUSH
40644: CALL_OW 263
40648: PUSH
40649: LD_INT 2
40651: EQUAL
40652: IFFALSE 40703
// begin j := IsControledBy ( i ) ;
40654: LD_ADDR_VAR 0 7
40658: PUSH
40659: LD_VAR 0 6
40663: PPUSH
40664: CALL_OW 312
40668: ST_TO_ADDR
// if j then
40669: LD_VAR 0 7
40673: IFFALSE 40703
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
40675: LD_ADDR_VAR 0 10
40679: PUSH
40680: LD_VAR 0 10
40684: PUSH
40685: LD_VAR 0 7
40689: PPUSH
40690: LD_INT 3
40692: PPUSH
40693: CALL_OW 259
40697: PUSH
40698: LD_INT 3
40700: MUL
40701: MUL
40702: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
40703: LD_VAR 0 6
40707: PPUSH
40708: CALL_OW 264
40712: PUSH
40713: LD_INT 5
40715: PUSH
40716: LD_INT 6
40718: PUSH
40719: LD_INT 46
40721: PUSH
40722: LD_INT 44
40724: PUSH
40725: LD_INT 47
40727: PUSH
40728: LD_INT 45
40730: PUSH
40731: LD_INT 28
40733: PUSH
40734: LD_INT 7
40736: PUSH
40737: LD_INT 27
40739: PUSH
40740: LD_INT 29
40742: PUSH
40743: EMPTY
40744: LIST
40745: LIST
40746: LIST
40747: LIST
40748: LIST
40749: LIST
40750: LIST
40751: LIST
40752: LIST
40753: LIST
40754: IN
40755: PUSH
40756: LD_VAR 0 1
40760: PPUSH
40761: LD_INT 52
40763: PPUSH
40764: CALL_OW 321
40768: PUSH
40769: LD_INT 2
40771: EQUAL
40772: AND
40773: IFFALSE 40790
// bpoints := bpoints * 1.2 ;
40775: LD_ADDR_VAR 0 10
40779: PUSH
40780: LD_VAR 0 10
40784: PUSH
40785: LD_REAL  1.20000000000000E+0000
40788: MUL
40789: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
40790: LD_VAR 0 6
40794: PPUSH
40795: CALL_OW 264
40799: PUSH
40800: LD_INT 6
40802: PUSH
40803: LD_INT 46
40805: PUSH
40806: LD_INT 47
40808: PUSH
40809: EMPTY
40810: LIST
40811: LIST
40812: LIST
40813: IN
40814: IFFALSE 40831
// bpoints := bpoints * 1.2 ;
40816: LD_ADDR_VAR 0 10
40820: PUSH
40821: LD_VAR 0 10
40825: PUSH
40826: LD_REAL  1.20000000000000E+0000
40829: MUL
40830: ST_TO_ADDR
// end ; unit_building :
40831: GO 40845
40833: LD_INT 3
40835: DOUBLE
40836: EQUAL
40837: IFTRUE 40841
40839: GO 40844
40841: POP
// ; end ;
40842: GO 40845
40844: POP
// for j = 1 to 3 do
40845: LD_ADDR_VAR 0 7
40849: PUSH
40850: DOUBLE
40851: LD_INT 1
40853: DEC
40854: ST_TO_ADDR
40855: LD_INT 3
40857: PUSH
40858: FOR_TO
40859: IFFALSE 40912
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
40861: LD_ADDR_VAR 0 5
40865: PUSH
40866: LD_VAR 0 5
40870: PPUSH
40871: LD_VAR 0 7
40875: PPUSH
40876: LD_VAR 0 5
40880: PUSH
40881: LD_VAR 0 7
40885: ARRAY
40886: PUSH
40887: LD_VAR 0 9
40891: PUSH
40892: LD_VAR 0 7
40896: ARRAY
40897: PUSH
40898: LD_VAR 0 10
40902: MUL
40903: PLUS
40904: PPUSH
40905: CALL_OW 1
40909: ST_TO_ADDR
40910: GO 40858
40912: POP
40913: POP
// end ;
40914: GO 39393
40916: POP
40917: POP
// result := Replace ( result , 4 , tmp ) ;
40918: LD_ADDR_VAR 0 5
40922: PUSH
40923: LD_VAR 0 5
40927: PPUSH
40928: LD_INT 4
40930: PPUSH
40931: LD_VAR 0 8
40935: PPUSH
40936: CALL_OW 1
40940: ST_TO_ADDR
// end ;
40941: LD_VAR 0 5
40945: RET
// export function DangerAtRange ( unit , range ) ; begin
40946: LD_INT 0
40948: PPUSH
// if not unit then
40949: LD_VAR 0 1
40953: NOT
40954: IFFALSE 40958
// exit ;
40956: GO 41003
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
40958: LD_ADDR_VAR 0 3
40962: PUSH
40963: LD_VAR 0 1
40967: PPUSH
40968: CALL_OW 255
40972: PPUSH
40973: LD_VAR 0 1
40977: PPUSH
40978: CALL_OW 250
40982: PPUSH
40983: LD_VAR 0 1
40987: PPUSH
40988: CALL_OW 251
40992: PPUSH
40993: LD_VAR 0 2
40997: PPUSH
40998: CALL 39245 0 4
41002: ST_TO_ADDR
// end ;
41003: LD_VAR 0 3
41007: RET
// export function DangerInArea ( side , area ) ; begin
41008: LD_INT 0
41010: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
41011: LD_ADDR_VAR 0 3
41015: PUSH
41016: LD_VAR 0 2
41020: PPUSH
41021: LD_INT 81
41023: PUSH
41024: LD_VAR 0 1
41028: PUSH
41029: EMPTY
41030: LIST
41031: LIST
41032: PPUSH
41033: CALL_OW 70
41037: ST_TO_ADDR
// end ;
41038: LD_VAR 0 3
41042: RET
// export function IsExtension ( b ) ; begin
41043: LD_INT 0
41045: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
41046: LD_ADDR_VAR 0 2
41050: PUSH
41051: LD_VAR 0 1
41055: PUSH
41056: LD_INT 23
41058: PUSH
41059: LD_INT 20
41061: PUSH
41062: LD_INT 22
41064: PUSH
41065: LD_INT 17
41067: PUSH
41068: LD_INT 24
41070: PUSH
41071: LD_INT 21
41073: PUSH
41074: LD_INT 19
41076: PUSH
41077: LD_INT 16
41079: PUSH
41080: LD_INT 25
41082: PUSH
41083: LD_INT 18
41085: PUSH
41086: EMPTY
41087: LIST
41088: LIST
41089: LIST
41090: LIST
41091: LIST
41092: LIST
41093: LIST
41094: LIST
41095: LIST
41096: LIST
41097: IN
41098: ST_TO_ADDR
// end ;
41099: LD_VAR 0 2
41103: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
41104: LD_INT 0
41106: PPUSH
41107: PPUSH
41108: PPUSH
// result := [ ] ;
41109: LD_ADDR_VAR 0 4
41113: PUSH
41114: EMPTY
41115: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
41116: LD_ADDR_VAR 0 5
41120: PUSH
41121: LD_VAR 0 2
41125: PPUSH
41126: LD_INT 21
41128: PUSH
41129: LD_INT 3
41131: PUSH
41132: EMPTY
41133: LIST
41134: LIST
41135: PPUSH
41136: CALL_OW 70
41140: ST_TO_ADDR
// if not tmp then
41141: LD_VAR 0 5
41145: NOT
41146: IFFALSE 41150
// exit ;
41148: GO 41214
// if checkLink then
41150: LD_VAR 0 3
41154: IFFALSE 41204
// begin for i in tmp do
41156: LD_ADDR_VAR 0 6
41160: PUSH
41161: LD_VAR 0 5
41165: PUSH
41166: FOR_IN
41167: IFFALSE 41202
// if GetBase ( i ) <> base then
41169: LD_VAR 0 6
41173: PPUSH
41174: CALL_OW 274
41178: PUSH
41179: LD_VAR 0 1
41183: NONEQUAL
41184: IFFALSE 41200
// ComLinkToBase ( base , i ) ;
41186: LD_VAR 0 1
41190: PPUSH
41191: LD_VAR 0 6
41195: PPUSH
41196: CALL_OW 169
41200: GO 41166
41202: POP
41203: POP
// end ; result := tmp ;
41204: LD_ADDR_VAR 0 4
41208: PUSH
41209: LD_VAR 0 5
41213: ST_TO_ADDR
// end ;
41214: LD_VAR 0 4
41218: RET
// export function ComComplete ( units , b ) ; var i ; begin
41219: LD_INT 0
41221: PPUSH
41222: PPUSH
// if not units then
41223: LD_VAR 0 1
41227: NOT
41228: IFFALSE 41232
// exit ;
41230: GO 41322
// for i in units do
41232: LD_ADDR_VAR 0 4
41236: PUSH
41237: LD_VAR 0 1
41241: PUSH
41242: FOR_IN
41243: IFFALSE 41320
// if BuildingStatus ( b ) = bs_build then
41245: LD_VAR 0 2
41249: PPUSH
41250: CALL_OW 461
41254: PUSH
41255: LD_INT 1
41257: EQUAL
41258: IFFALSE 41318
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
41260: LD_VAR 0 4
41264: PPUSH
41265: LD_STRING h
41267: PUSH
41268: LD_VAR 0 2
41272: PPUSH
41273: CALL_OW 250
41277: PUSH
41278: LD_VAR 0 2
41282: PPUSH
41283: CALL_OW 251
41287: PUSH
41288: LD_VAR 0 2
41292: PUSH
41293: LD_INT 0
41295: PUSH
41296: LD_INT 0
41298: PUSH
41299: LD_INT 0
41301: PUSH
41302: EMPTY
41303: LIST
41304: LIST
41305: LIST
41306: LIST
41307: LIST
41308: LIST
41309: LIST
41310: PUSH
41311: EMPTY
41312: LIST
41313: PPUSH
41314: CALL_OW 446
41318: GO 41242
41320: POP
41321: POP
// end ;
41322: LD_VAR 0 3
41326: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
41327: LD_INT 0
41329: PPUSH
41330: PPUSH
41331: PPUSH
41332: PPUSH
41333: PPUSH
41334: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
41335: LD_VAR 0 1
41339: NOT
41340: PUSH
41341: LD_VAR 0 1
41345: PPUSH
41346: CALL_OW 263
41350: PUSH
41351: LD_INT 2
41353: NONEQUAL
41354: OR
41355: IFFALSE 41359
// exit ;
41357: GO 41675
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
41359: LD_ADDR_VAR 0 6
41363: PUSH
41364: LD_INT 22
41366: PUSH
41367: LD_VAR 0 1
41371: PPUSH
41372: CALL_OW 255
41376: PUSH
41377: EMPTY
41378: LIST
41379: LIST
41380: PUSH
41381: LD_INT 2
41383: PUSH
41384: LD_INT 30
41386: PUSH
41387: LD_INT 36
41389: PUSH
41390: EMPTY
41391: LIST
41392: LIST
41393: PUSH
41394: LD_INT 34
41396: PUSH
41397: LD_INT 31
41399: PUSH
41400: EMPTY
41401: LIST
41402: LIST
41403: PUSH
41404: EMPTY
41405: LIST
41406: LIST
41407: LIST
41408: PUSH
41409: EMPTY
41410: LIST
41411: LIST
41412: PPUSH
41413: CALL_OW 69
41417: ST_TO_ADDR
// if not tmp then
41418: LD_VAR 0 6
41422: NOT
41423: IFFALSE 41427
// exit ;
41425: GO 41675
// result := [ ] ;
41427: LD_ADDR_VAR 0 2
41431: PUSH
41432: EMPTY
41433: ST_TO_ADDR
// for i in tmp do
41434: LD_ADDR_VAR 0 3
41438: PUSH
41439: LD_VAR 0 6
41443: PUSH
41444: FOR_IN
41445: IFFALSE 41516
// begin t := UnitsInside ( i ) ;
41447: LD_ADDR_VAR 0 4
41451: PUSH
41452: LD_VAR 0 3
41456: PPUSH
41457: CALL_OW 313
41461: ST_TO_ADDR
// if t then
41462: LD_VAR 0 4
41466: IFFALSE 41514
// for j in t do
41468: LD_ADDR_VAR 0 7
41472: PUSH
41473: LD_VAR 0 4
41477: PUSH
41478: FOR_IN
41479: IFFALSE 41512
// result := Replace ( result , result + 1 , j ) ;
41481: LD_ADDR_VAR 0 2
41485: PUSH
41486: LD_VAR 0 2
41490: PPUSH
41491: LD_VAR 0 2
41495: PUSH
41496: LD_INT 1
41498: PLUS
41499: PPUSH
41500: LD_VAR 0 7
41504: PPUSH
41505: CALL_OW 1
41509: ST_TO_ADDR
41510: GO 41478
41512: POP
41513: POP
// end ;
41514: GO 41444
41516: POP
41517: POP
// if not result then
41518: LD_VAR 0 2
41522: NOT
41523: IFFALSE 41527
// exit ;
41525: GO 41675
// mech := result [ 1 ] ;
41527: LD_ADDR_VAR 0 5
41531: PUSH
41532: LD_VAR 0 2
41536: PUSH
41537: LD_INT 1
41539: ARRAY
41540: ST_TO_ADDR
// if result > 1 then
41541: LD_VAR 0 2
41545: PUSH
41546: LD_INT 1
41548: GREATER
41549: IFFALSE 41661
// begin for i = 2 to result do
41551: LD_ADDR_VAR 0 3
41555: PUSH
41556: DOUBLE
41557: LD_INT 2
41559: DEC
41560: ST_TO_ADDR
41561: LD_VAR 0 2
41565: PUSH
41566: FOR_TO
41567: IFFALSE 41659
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
41569: LD_ADDR_VAR 0 4
41573: PUSH
41574: LD_VAR 0 2
41578: PUSH
41579: LD_VAR 0 3
41583: ARRAY
41584: PPUSH
41585: LD_INT 3
41587: PPUSH
41588: CALL_OW 259
41592: PUSH
41593: LD_VAR 0 2
41597: PUSH
41598: LD_VAR 0 3
41602: ARRAY
41603: PPUSH
41604: CALL_OW 432
41608: MINUS
41609: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
41610: LD_VAR 0 4
41614: PUSH
41615: LD_VAR 0 5
41619: PPUSH
41620: LD_INT 3
41622: PPUSH
41623: CALL_OW 259
41627: PUSH
41628: LD_VAR 0 5
41632: PPUSH
41633: CALL_OW 432
41637: MINUS
41638: GREATEREQUAL
41639: IFFALSE 41657
// mech := result [ i ] ;
41641: LD_ADDR_VAR 0 5
41645: PUSH
41646: LD_VAR 0 2
41650: PUSH
41651: LD_VAR 0 3
41655: ARRAY
41656: ST_TO_ADDR
// end ;
41657: GO 41566
41659: POP
41660: POP
// end ; ComLinkTo ( vehicle , mech ) ;
41661: LD_VAR 0 1
41665: PPUSH
41666: LD_VAR 0 5
41670: PPUSH
41671: CALL_OW 135
// end ;
41675: LD_VAR 0 2
41679: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
41680: LD_INT 0
41682: PPUSH
41683: PPUSH
41684: PPUSH
41685: PPUSH
41686: PPUSH
41687: PPUSH
41688: PPUSH
41689: PPUSH
41690: PPUSH
41691: PPUSH
41692: PPUSH
41693: PPUSH
41694: PPUSH
// result := [ ] ;
41695: LD_ADDR_VAR 0 7
41699: PUSH
41700: EMPTY
41701: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
41702: LD_VAR 0 1
41706: PPUSH
41707: CALL_OW 266
41711: PUSH
41712: LD_INT 0
41714: PUSH
41715: LD_INT 1
41717: PUSH
41718: EMPTY
41719: LIST
41720: LIST
41721: IN
41722: NOT
41723: IFFALSE 41727
// exit ;
41725: GO 43361
// if name then
41727: LD_VAR 0 3
41731: IFFALSE 41747
// SetBName ( base_dep , name ) ;
41733: LD_VAR 0 1
41737: PPUSH
41738: LD_VAR 0 3
41742: PPUSH
41743: CALL_OW 500
// base := GetBase ( base_dep ) ;
41747: LD_ADDR_VAR 0 15
41751: PUSH
41752: LD_VAR 0 1
41756: PPUSH
41757: CALL_OW 274
41761: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
41762: LD_ADDR_VAR 0 16
41766: PUSH
41767: LD_VAR 0 1
41771: PPUSH
41772: CALL_OW 255
41776: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
41777: LD_ADDR_VAR 0 17
41781: PUSH
41782: LD_VAR 0 1
41786: PPUSH
41787: CALL_OW 248
41791: ST_TO_ADDR
// if sources then
41792: LD_VAR 0 5
41796: IFFALSE 41843
// for i = 1 to 3 do
41798: LD_ADDR_VAR 0 8
41802: PUSH
41803: DOUBLE
41804: LD_INT 1
41806: DEC
41807: ST_TO_ADDR
41808: LD_INT 3
41810: PUSH
41811: FOR_TO
41812: IFFALSE 41841
// AddResourceType ( base , i , sources [ i ] ) ;
41814: LD_VAR 0 15
41818: PPUSH
41819: LD_VAR 0 8
41823: PPUSH
41824: LD_VAR 0 5
41828: PUSH
41829: LD_VAR 0 8
41833: ARRAY
41834: PPUSH
41835: CALL_OW 276
41839: GO 41811
41841: POP
41842: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
41843: LD_ADDR_VAR 0 18
41847: PUSH
41848: LD_VAR 0 15
41852: PPUSH
41853: LD_VAR 0 2
41857: PPUSH
41858: LD_INT 1
41860: PPUSH
41861: CALL 41104 0 3
41865: ST_TO_ADDR
// InitHc ;
41866: CALL_OW 19
// InitUc ;
41870: CALL_OW 18
// uc_side := side ;
41874: LD_ADDR_OWVAR 20
41878: PUSH
41879: LD_VAR 0 16
41883: ST_TO_ADDR
// uc_nation := nation ;
41884: LD_ADDR_OWVAR 21
41888: PUSH
41889: LD_VAR 0 17
41893: ST_TO_ADDR
// if buildings then
41894: LD_VAR 0 18
41898: IFFALSE 43220
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
41900: LD_ADDR_VAR 0 19
41904: PUSH
41905: LD_VAR 0 18
41909: PPUSH
41910: LD_INT 2
41912: PUSH
41913: LD_INT 30
41915: PUSH
41916: LD_INT 29
41918: PUSH
41919: EMPTY
41920: LIST
41921: LIST
41922: PUSH
41923: LD_INT 30
41925: PUSH
41926: LD_INT 30
41928: PUSH
41929: EMPTY
41930: LIST
41931: LIST
41932: PUSH
41933: EMPTY
41934: LIST
41935: LIST
41936: LIST
41937: PPUSH
41938: CALL_OW 72
41942: ST_TO_ADDR
// if tmp then
41943: LD_VAR 0 19
41947: IFFALSE 41995
// for i in tmp do
41949: LD_ADDR_VAR 0 8
41953: PUSH
41954: LD_VAR 0 19
41958: PUSH
41959: FOR_IN
41960: IFFALSE 41993
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
41962: LD_VAR 0 8
41966: PPUSH
41967: CALL_OW 250
41971: PPUSH
41972: LD_VAR 0 8
41976: PPUSH
41977: CALL_OW 251
41981: PPUSH
41982: LD_VAR 0 16
41986: PPUSH
41987: CALL_OW 441
41991: GO 41959
41993: POP
41994: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
41995: LD_VAR 0 18
41999: PPUSH
42000: LD_INT 2
42002: PUSH
42003: LD_INT 30
42005: PUSH
42006: LD_INT 32
42008: PUSH
42009: EMPTY
42010: LIST
42011: LIST
42012: PUSH
42013: LD_INT 30
42015: PUSH
42016: LD_INT 33
42018: PUSH
42019: EMPTY
42020: LIST
42021: LIST
42022: PUSH
42023: EMPTY
42024: LIST
42025: LIST
42026: LIST
42027: PPUSH
42028: CALL_OW 72
42032: IFFALSE 42120
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
42034: LD_ADDR_VAR 0 8
42038: PUSH
42039: LD_VAR 0 18
42043: PPUSH
42044: LD_INT 2
42046: PUSH
42047: LD_INT 30
42049: PUSH
42050: LD_INT 32
42052: PUSH
42053: EMPTY
42054: LIST
42055: LIST
42056: PUSH
42057: LD_INT 30
42059: PUSH
42060: LD_INT 33
42062: PUSH
42063: EMPTY
42064: LIST
42065: LIST
42066: PUSH
42067: EMPTY
42068: LIST
42069: LIST
42070: LIST
42071: PPUSH
42072: CALL_OW 72
42076: PUSH
42077: FOR_IN
42078: IFFALSE 42118
// begin if not GetBWeapon ( i ) then
42080: LD_VAR 0 8
42084: PPUSH
42085: CALL_OW 269
42089: NOT
42090: IFFALSE 42116
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
42092: LD_VAR 0 8
42096: PPUSH
42097: LD_VAR 0 8
42101: PPUSH
42102: LD_VAR 0 2
42106: PPUSH
42107: CALL 43366 0 2
42111: PPUSH
42112: CALL_OW 431
// end ;
42116: GO 42077
42118: POP
42119: POP
// end ; for i = 1 to personel do
42120: LD_ADDR_VAR 0 8
42124: PUSH
42125: DOUBLE
42126: LD_INT 1
42128: DEC
42129: ST_TO_ADDR
42130: LD_VAR 0 6
42134: PUSH
42135: FOR_TO
42136: IFFALSE 43200
// begin if i > 4 then
42138: LD_VAR 0 8
42142: PUSH
42143: LD_INT 4
42145: GREATER
42146: IFFALSE 42150
// break ;
42148: GO 43200
// case i of 1 :
42150: LD_VAR 0 8
42154: PUSH
42155: LD_INT 1
42157: DOUBLE
42158: EQUAL
42159: IFTRUE 42163
42161: GO 42243
42163: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
42164: LD_ADDR_VAR 0 12
42168: PUSH
42169: LD_VAR 0 18
42173: PPUSH
42174: LD_INT 22
42176: PUSH
42177: LD_VAR 0 16
42181: PUSH
42182: EMPTY
42183: LIST
42184: LIST
42185: PUSH
42186: LD_INT 58
42188: PUSH
42189: EMPTY
42190: LIST
42191: PUSH
42192: LD_INT 2
42194: PUSH
42195: LD_INT 30
42197: PUSH
42198: LD_INT 32
42200: PUSH
42201: EMPTY
42202: LIST
42203: LIST
42204: PUSH
42205: LD_INT 30
42207: PUSH
42208: LD_INT 4
42210: PUSH
42211: EMPTY
42212: LIST
42213: LIST
42214: PUSH
42215: LD_INT 30
42217: PUSH
42218: LD_INT 5
42220: PUSH
42221: EMPTY
42222: LIST
42223: LIST
42224: PUSH
42225: EMPTY
42226: LIST
42227: LIST
42228: LIST
42229: LIST
42230: PUSH
42231: EMPTY
42232: LIST
42233: LIST
42234: LIST
42235: PPUSH
42236: CALL_OW 72
42240: ST_TO_ADDR
42241: GO 42465
42243: LD_INT 2
42245: DOUBLE
42246: EQUAL
42247: IFTRUE 42251
42249: GO 42313
42251: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
42252: LD_ADDR_VAR 0 12
42256: PUSH
42257: LD_VAR 0 18
42261: PPUSH
42262: LD_INT 22
42264: PUSH
42265: LD_VAR 0 16
42269: PUSH
42270: EMPTY
42271: LIST
42272: LIST
42273: PUSH
42274: LD_INT 2
42276: PUSH
42277: LD_INT 30
42279: PUSH
42280: LD_INT 0
42282: PUSH
42283: EMPTY
42284: LIST
42285: LIST
42286: PUSH
42287: LD_INT 30
42289: PUSH
42290: LD_INT 1
42292: PUSH
42293: EMPTY
42294: LIST
42295: LIST
42296: PUSH
42297: EMPTY
42298: LIST
42299: LIST
42300: LIST
42301: PUSH
42302: EMPTY
42303: LIST
42304: LIST
42305: PPUSH
42306: CALL_OW 72
42310: ST_TO_ADDR
42311: GO 42465
42313: LD_INT 3
42315: DOUBLE
42316: EQUAL
42317: IFTRUE 42321
42319: GO 42383
42321: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
42322: LD_ADDR_VAR 0 12
42326: PUSH
42327: LD_VAR 0 18
42331: PPUSH
42332: LD_INT 22
42334: PUSH
42335: LD_VAR 0 16
42339: PUSH
42340: EMPTY
42341: LIST
42342: LIST
42343: PUSH
42344: LD_INT 2
42346: PUSH
42347: LD_INT 30
42349: PUSH
42350: LD_INT 2
42352: PUSH
42353: EMPTY
42354: LIST
42355: LIST
42356: PUSH
42357: LD_INT 30
42359: PUSH
42360: LD_INT 3
42362: PUSH
42363: EMPTY
42364: LIST
42365: LIST
42366: PUSH
42367: EMPTY
42368: LIST
42369: LIST
42370: LIST
42371: PUSH
42372: EMPTY
42373: LIST
42374: LIST
42375: PPUSH
42376: CALL_OW 72
42380: ST_TO_ADDR
42381: GO 42465
42383: LD_INT 4
42385: DOUBLE
42386: EQUAL
42387: IFTRUE 42391
42389: GO 42464
42391: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
42392: LD_ADDR_VAR 0 12
42396: PUSH
42397: LD_VAR 0 18
42401: PPUSH
42402: LD_INT 22
42404: PUSH
42405: LD_VAR 0 16
42409: PUSH
42410: EMPTY
42411: LIST
42412: LIST
42413: PUSH
42414: LD_INT 2
42416: PUSH
42417: LD_INT 30
42419: PUSH
42420: LD_INT 6
42422: PUSH
42423: EMPTY
42424: LIST
42425: LIST
42426: PUSH
42427: LD_INT 30
42429: PUSH
42430: LD_INT 7
42432: PUSH
42433: EMPTY
42434: LIST
42435: LIST
42436: PUSH
42437: LD_INT 30
42439: PUSH
42440: LD_INT 8
42442: PUSH
42443: EMPTY
42444: LIST
42445: LIST
42446: PUSH
42447: EMPTY
42448: LIST
42449: LIST
42450: LIST
42451: LIST
42452: PUSH
42453: EMPTY
42454: LIST
42455: LIST
42456: PPUSH
42457: CALL_OW 72
42461: ST_TO_ADDR
42462: GO 42465
42464: POP
// if i = 1 then
42465: LD_VAR 0 8
42469: PUSH
42470: LD_INT 1
42472: EQUAL
42473: IFFALSE 42584
// begin tmp := [ ] ;
42475: LD_ADDR_VAR 0 19
42479: PUSH
42480: EMPTY
42481: ST_TO_ADDR
// for j in f do
42482: LD_ADDR_VAR 0 9
42486: PUSH
42487: LD_VAR 0 12
42491: PUSH
42492: FOR_IN
42493: IFFALSE 42566
// if GetBType ( j ) = b_bunker then
42495: LD_VAR 0 9
42499: PPUSH
42500: CALL_OW 266
42504: PUSH
42505: LD_INT 32
42507: EQUAL
42508: IFFALSE 42535
// tmp := Insert ( tmp , 1 , j ) else
42510: LD_ADDR_VAR 0 19
42514: PUSH
42515: LD_VAR 0 19
42519: PPUSH
42520: LD_INT 1
42522: PPUSH
42523: LD_VAR 0 9
42527: PPUSH
42528: CALL_OW 2
42532: ST_TO_ADDR
42533: GO 42564
// tmp := Insert ( tmp , tmp + 1 , j ) ;
42535: LD_ADDR_VAR 0 19
42539: PUSH
42540: LD_VAR 0 19
42544: PPUSH
42545: LD_VAR 0 19
42549: PUSH
42550: LD_INT 1
42552: PLUS
42553: PPUSH
42554: LD_VAR 0 9
42558: PPUSH
42559: CALL_OW 2
42563: ST_TO_ADDR
42564: GO 42492
42566: POP
42567: POP
// if tmp then
42568: LD_VAR 0 19
42572: IFFALSE 42584
// f := tmp ;
42574: LD_ADDR_VAR 0 12
42578: PUSH
42579: LD_VAR 0 19
42583: ST_TO_ADDR
// end ; x := personel [ i ] ;
42584: LD_ADDR_VAR 0 13
42588: PUSH
42589: LD_VAR 0 6
42593: PUSH
42594: LD_VAR 0 8
42598: ARRAY
42599: ST_TO_ADDR
// if x = - 1 then
42600: LD_VAR 0 13
42604: PUSH
42605: LD_INT 1
42607: NEG
42608: EQUAL
42609: IFFALSE 42818
// begin for j in f do
42611: LD_ADDR_VAR 0 9
42615: PUSH
42616: LD_VAR 0 12
42620: PUSH
42621: FOR_IN
42622: IFFALSE 42814
// repeat InitHc ;
42624: CALL_OW 19
// if GetBType ( j ) = b_barracks then
42628: LD_VAR 0 9
42632: PPUSH
42633: CALL_OW 266
42637: PUSH
42638: LD_INT 5
42640: EQUAL
42641: IFFALSE 42711
// begin if UnitsInside ( j ) < 3 then
42643: LD_VAR 0 9
42647: PPUSH
42648: CALL_OW 313
42652: PUSH
42653: LD_INT 3
42655: LESS
42656: IFFALSE 42692
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
42658: LD_INT 0
42660: PPUSH
42661: LD_INT 5
42663: PUSH
42664: LD_INT 8
42666: PUSH
42667: LD_INT 9
42669: PUSH
42670: EMPTY
42671: LIST
42672: LIST
42673: LIST
42674: PUSH
42675: LD_VAR 0 17
42679: ARRAY
42680: PPUSH
42681: LD_VAR 0 4
42685: PPUSH
42686: CALL_OW 380
42690: GO 42709
// PrepareHuman ( false , i , skill ) ;
42692: LD_INT 0
42694: PPUSH
42695: LD_VAR 0 8
42699: PPUSH
42700: LD_VAR 0 4
42704: PPUSH
42705: CALL_OW 380
// end else
42709: GO 42728
// PrepareHuman ( false , i , skill ) ;
42711: LD_INT 0
42713: PPUSH
42714: LD_VAR 0 8
42718: PPUSH
42719: LD_VAR 0 4
42723: PPUSH
42724: CALL_OW 380
// un := CreateHuman ;
42728: LD_ADDR_VAR 0 14
42732: PUSH
42733: CALL_OW 44
42737: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
42738: LD_ADDR_VAR 0 7
42742: PUSH
42743: LD_VAR 0 7
42747: PPUSH
42748: LD_INT 1
42750: PPUSH
42751: LD_VAR 0 14
42755: PPUSH
42756: CALL_OW 2
42760: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
42761: LD_VAR 0 14
42765: PPUSH
42766: LD_VAR 0 9
42770: PPUSH
42771: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
42775: LD_VAR 0 9
42779: PPUSH
42780: CALL_OW 313
42784: PUSH
42785: LD_INT 6
42787: EQUAL
42788: PUSH
42789: LD_VAR 0 9
42793: PPUSH
42794: CALL_OW 266
42798: PUSH
42799: LD_INT 32
42801: PUSH
42802: LD_INT 31
42804: PUSH
42805: EMPTY
42806: LIST
42807: LIST
42808: IN
42809: OR
42810: IFFALSE 42624
42812: GO 42621
42814: POP
42815: POP
// end else
42816: GO 43198
// for j = 1 to x do
42818: LD_ADDR_VAR 0 9
42822: PUSH
42823: DOUBLE
42824: LD_INT 1
42826: DEC
42827: ST_TO_ADDR
42828: LD_VAR 0 13
42832: PUSH
42833: FOR_TO
42834: IFFALSE 43196
// begin InitHc ;
42836: CALL_OW 19
// if not f then
42840: LD_VAR 0 12
42844: NOT
42845: IFFALSE 42934
// begin PrepareHuman ( false , i , skill ) ;
42847: LD_INT 0
42849: PPUSH
42850: LD_VAR 0 8
42854: PPUSH
42855: LD_VAR 0 4
42859: PPUSH
42860: CALL_OW 380
// un := CreateHuman ;
42864: LD_ADDR_VAR 0 14
42868: PUSH
42869: CALL_OW 44
42873: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
42874: LD_ADDR_VAR 0 7
42878: PUSH
42879: LD_VAR 0 7
42883: PPUSH
42884: LD_INT 1
42886: PPUSH
42887: LD_VAR 0 14
42891: PPUSH
42892: CALL_OW 2
42896: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
42897: LD_VAR 0 14
42901: PPUSH
42902: LD_VAR 0 1
42906: PPUSH
42907: CALL_OW 250
42911: PPUSH
42912: LD_VAR 0 1
42916: PPUSH
42917: CALL_OW 251
42921: PPUSH
42922: LD_INT 10
42924: PPUSH
42925: LD_INT 0
42927: PPUSH
42928: CALL_OW 50
// continue ;
42932: GO 42833
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
42934: LD_VAR 0 12
42938: PUSH
42939: LD_INT 1
42941: ARRAY
42942: PPUSH
42943: CALL_OW 313
42947: PUSH
42948: LD_VAR 0 12
42952: PUSH
42953: LD_INT 1
42955: ARRAY
42956: PPUSH
42957: CALL_OW 266
42961: PUSH
42962: LD_INT 32
42964: PUSH
42965: LD_INT 31
42967: PUSH
42968: EMPTY
42969: LIST
42970: LIST
42971: IN
42972: AND
42973: PUSH
42974: LD_VAR 0 12
42978: PUSH
42979: LD_INT 1
42981: ARRAY
42982: PPUSH
42983: CALL_OW 313
42987: PUSH
42988: LD_INT 6
42990: EQUAL
42991: OR
42992: IFFALSE 43012
// f := Delete ( f , 1 ) ;
42994: LD_ADDR_VAR 0 12
42998: PUSH
42999: LD_VAR 0 12
43003: PPUSH
43004: LD_INT 1
43006: PPUSH
43007: CALL_OW 3
43011: ST_TO_ADDR
// if not f then
43012: LD_VAR 0 12
43016: NOT
43017: IFFALSE 43035
// begin x := x + 2 ;
43019: LD_ADDR_VAR 0 13
43023: PUSH
43024: LD_VAR 0 13
43028: PUSH
43029: LD_INT 2
43031: PLUS
43032: ST_TO_ADDR
// continue ;
43033: GO 42833
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
43035: LD_VAR 0 12
43039: PUSH
43040: LD_INT 1
43042: ARRAY
43043: PPUSH
43044: CALL_OW 266
43048: PUSH
43049: LD_INT 5
43051: EQUAL
43052: IFFALSE 43126
// begin if UnitsInside ( f [ 1 ] ) < 3 then
43054: LD_VAR 0 12
43058: PUSH
43059: LD_INT 1
43061: ARRAY
43062: PPUSH
43063: CALL_OW 313
43067: PUSH
43068: LD_INT 3
43070: LESS
43071: IFFALSE 43107
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
43073: LD_INT 0
43075: PPUSH
43076: LD_INT 5
43078: PUSH
43079: LD_INT 8
43081: PUSH
43082: LD_INT 9
43084: PUSH
43085: EMPTY
43086: LIST
43087: LIST
43088: LIST
43089: PUSH
43090: LD_VAR 0 17
43094: ARRAY
43095: PPUSH
43096: LD_VAR 0 4
43100: PPUSH
43101: CALL_OW 380
43105: GO 43124
// PrepareHuman ( false , i , skill ) ;
43107: LD_INT 0
43109: PPUSH
43110: LD_VAR 0 8
43114: PPUSH
43115: LD_VAR 0 4
43119: PPUSH
43120: CALL_OW 380
// end else
43124: GO 43143
// PrepareHuman ( false , i , skill ) ;
43126: LD_INT 0
43128: PPUSH
43129: LD_VAR 0 8
43133: PPUSH
43134: LD_VAR 0 4
43138: PPUSH
43139: CALL_OW 380
// un := CreateHuman ;
43143: LD_ADDR_VAR 0 14
43147: PUSH
43148: CALL_OW 44
43152: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
43153: LD_ADDR_VAR 0 7
43157: PUSH
43158: LD_VAR 0 7
43162: PPUSH
43163: LD_INT 1
43165: PPUSH
43166: LD_VAR 0 14
43170: PPUSH
43171: CALL_OW 2
43175: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
43176: LD_VAR 0 14
43180: PPUSH
43181: LD_VAR 0 12
43185: PUSH
43186: LD_INT 1
43188: ARRAY
43189: PPUSH
43190: CALL_OW 52
// end ;
43194: GO 42833
43196: POP
43197: POP
// end ;
43198: GO 42135
43200: POP
43201: POP
// result := result ^ buildings ;
43202: LD_ADDR_VAR 0 7
43206: PUSH
43207: LD_VAR 0 7
43211: PUSH
43212: LD_VAR 0 18
43216: ADD
43217: ST_TO_ADDR
// end else
43218: GO 43361
// begin for i = 1 to personel do
43220: LD_ADDR_VAR 0 8
43224: PUSH
43225: DOUBLE
43226: LD_INT 1
43228: DEC
43229: ST_TO_ADDR
43230: LD_VAR 0 6
43234: PUSH
43235: FOR_TO
43236: IFFALSE 43359
// begin if i > 4 then
43238: LD_VAR 0 8
43242: PUSH
43243: LD_INT 4
43245: GREATER
43246: IFFALSE 43250
// break ;
43248: GO 43359
// x := personel [ i ] ;
43250: LD_ADDR_VAR 0 13
43254: PUSH
43255: LD_VAR 0 6
43259: PUSH
43260: LD_VAR 0 8
43264: ARRAY
43265: ST_TO_ADDR
// if x = - 1 then
43266: LD_VAR 0 13
43270: PUSH
43271: LD_INT 1
43273: NEG
43274: EQUAL
43275: IFFALSE 43279
// continue ;
43277: GO 43235
// PrepareHuman ( false , i , skill ) ;
43279: LD_INT 0
43281: PPUSH
43282: LD_VAR 0 8
43286: PPUSH
43287: LD_VAR 0 4
43291: PPUSH
43292: CALL_OW 380
// un := CreateHuman ;
43296: LD_ADDR_VAR 0 14
43300: PUSH
43301: CALL_OW 44
43305: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
43306: LD_VAR 0 14
43310: PPUSH
43311: LD_VAR 0 1
43315: PPUSH
43316: CALL_OW 250
43320: PPUSH
43321: LD_VAR 0 1
43325: PPUSH
43326: CALL_OW 251
43330: PPUSH
43331: LD_INT 10
43333: PPUSH
43334: LD_INT 0
43336: PPUSH
43337: CALL_OW 50
// result := result ^ un ;
43341: LD_ADDR_VAR 0 7
43345: PUSH
43346: LD_VAR 0 7
43350: PUSH
43351: LD_VAR 0 14
43355: ADD
43356: ST_TO_ADDR
// end ;
43357: GO 43235
43359: POP
43360: POP
// end ; end ;
43361: LD_VAR 0 7
43365: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
43366: LD_INT 0
43368: PPUSH
43369: PPUSH
43370: PPUSH
43371: PPUSH
43372: PPUSH
43373: PPUSH
43374: PPUSH
43375: PPUSH
43376: PPUSH
43377: PPUSH
43378: PPUSH
43379: PPUSH
43380: PPUSH
43381: PPUSH
43382: PPUSH
43383: PPUSH
// result := false ;
43384: LD_ADDR_VAR 0 3
43388: PUSH
43389: LD_INT 0
43391: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
43392: LD_VAR 0 1
43396: NOT
43397: PUSH
43398: LD_VAR 0 1
43402: PPUSH
43403: CALL_OW 266
43407: PUSH
43408: LD_INT 32
43410: PUSH
43411: LD_INT 33
43413: PUSH
43414: EMPTY
43415: LIST
43416: LIST
43417: IN
43418: NOT
43419: OR
43420: IFFALSE 43424
// exit ;
43422: GO 44533
// nat := GetNation ( tower ) ;
43424: LD_ADDR_VAR 0 12
43428: PUSH
43429: LD_VAR 0 1
43433: PPUSH
43434: CALL_OW 248
43438: ST_TO_ADDR
// side := GetSide ( tower ) ;
43439: LD_ADDR_VAR 0 16
43443: PUSH
43444: LD_VAR 0 1
43448: PPUSH
43449: CALL_OW 255
43453: ST_TO_ADDR
// x := GetX ( tower ) ;
43454: LD_ADDR_VAR 0 10
43458: PUSH
43459: LD_VAR 0 1
43463: PPUSH
43464: CALL_OW 250
43468: ST_TO_ADDR
// y := GetY ( tower ) ;
43469: LD_ADDR_VAR 0 11
43473: PUSH
43474: LD_VAR 0 1
43478: PPUSH
43479: CALL_OW 251
43483: ST_TO_ADDR
// if not x or not y then
43484: LD_VAR 0 10
43488: NOT
43489: PUSH
43490: LD_VAR 0 11
43494: NOT
43495: OR
43496: IFFALSE 43500
// exit ;
43498: GO 44533
// weapon := 0 ;
43500: LD_ADDR_VAR 0 18
43504: PUSH
43505: LD_INT 0
43507: ST_TO_ADDR
// fac_list := [ ] ;
43508: LD_ADDR_VAR 0 17
43512: PUSH
43513: EMPTY
43514: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
43515: LD_ADDR_VAR 0 6
43519: PUSH
43520: LD_VAR 0 1
43524: PPUSH
43525: CALL_OW 274
43529: PPUSH
43530: LD_VAR 0 2
43534: PPUSH
43535: LD_INT 0
43537: PPUSH
43538: CALL 41104 0 3
43542: PPUSH
43543: LD_INT 30
43545: PUSH
43546: LD_INT 3
43548: PUSH
43549: EMPTY
43550: LIST
43551: LIST
43552: PPUSH
43553: CALL_OW 72
43557: ST_TO_ADDR
// if not factories then
43558: LD_VAR 0 6
43562: NOT
43563: IFFALSE 43567
// exit ;
43565: GO 44533
// for i in factories do
43567: LD_ADDR_VAR 0 8
43571: PUSH
43572: LD_VAR 0 6
43576: PUSH
43577: FOR_IN
43578: IFFALSE 43603
// fac_list := fac_list union AvailableWeaponList ( i ) ;
43580: LD_ADDR_VAR 0 17
43584: PUSH
43585: LD_VAR 0 17
43589: PUSH
43590: LD_VAR 0 8
43594: PPUSH
43595: CALL_OW 478
43599: UNION
43600: ST_TO_ADDR
43601: GO 43577
43603: POP
43604: POP
// if not fac_list then
43605: LD_VAR 0 17
43609: NOT
43610: IFFALSE 43614
// exit ;
43612: GO 44533
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
43614: LD_ADDR_VAR 0 5
43618: PUSH
43619: LD_INT 4
43621: PUSH
43622: LD_INT 5
43624: PUSH
43625: LD_INT 9
43627: PUSH
43628: LD_INT 10
43630: PUSH
43631: LD_INT 6
43633: PUSH
43634: LD_INT 7
43636: PUSH
43637: LD_INT 11
43639: PUSH
43640: EMPTY
43641: LIST
43642: LIST
43643: LIST
43644: LIST
43645: LIST
43646: LIST
43647: LIST
43648: PUSH
43649: LD_INT 27
43651: PUSH
43652: LD_INT 28
43654: PUSH
43655: LD_INT 26
43657: PUSH
43658: LD_INT 30
43660: PUSH
43661: EMPTY
43662: LIST
43663: LIST
43664: LIST
43665: LIST
43666: PUSH
43667: LD_INT 43
43669: PUSH
43670: LD_INT 44
43672: PUSH
43673: LD_INT 46
43675: PUSH
43676: LD_INT 45
43678: PUSH
43679: LD_INT 47
43681: PUSH
43682: LD_INT 49
43684: PUSH
43685: EMPTY
43686: LIST
43687: LIST
43688: LIST
43689: LIST
43690: LIST
43691: LIST
43692: PUSH
43693: EMPTY
43694: LIST
43695: LIST
43696: LIST
43697: PUSH
43698: LD_VAR 0 12
43702: ARRAY
43703: ST_TO_ADDR
// list := list isect fac_list ;
43704: LD_ADDR_VAR 0 5
43708: PUSH
43709: LD_VAR 0 5
43713: PUSH
43714: LD_VAR 0 17
43718: ISECT
43719: ST_TO_ADDR
// if not list then
43720: LD_VAR 0 5
43724: NOT
43725: IFFALSE 43729
// exit ;
43727: GO 44533
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
43729: LD_VAR 0 12
43733: PUSH
43734: LD_INT 3
43736: EQUAL
43737: PUSH
43738: LD_INT 49
43740: PUSH
43741: LD_VAR 0 5
43745: IN
43746: AND
43747: PUSH
43748: LD_INT 31
43750: PPUSH
43751: LD_VAR 0 16
43755: PPUSH
43756: CALL_OW 321
43760: PUSH
43761: LD_INT 2
43763: EQUAL
43764: AND
43765: IFFALSE 43825
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
43767: LD_INT 22
43769: PUSH
43770: LD_VAR 0 16
43774: PUSH
43775: EMPTY
43776: LIST
43777: LIST
43778: PUSH
43779: LD_INT 35
43781: PUSH
43782: LD_INT 49
43784: PUSH
43785: EMPTY
43786: LIST
43787: LIST
43788: PUSH
43789: LD_INT 91
43791: PUSH
43792: LD_VAR 0 1
43796: PUSH
43797: LD_INT 10
43799: PUSH
43800: EMPTY
43801: LIST
43802: LIST
43803: LIST
43804: PUSH
43805: EMPTY
43806: LIST
43807: LIST
43808: LIST
43809: PPUSH
43810: CALL_OW 69
43814: NOT
43815: IFFALSE 43825
// weapon := ru_time_lapser ;
43817: LD_ADDR_VAR 0 18
43821: PUSH
43822: LD_INT 49
43824: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
43825: LD_VAR 0 12
43829: PUSH
43830: LD_INT 1
43832: PUSH
43833: LD_INT 2
43835: PUSH
43836: EMPTY
43837: LIST
43838: LIST
43839: IN
43840: PUSH
43841: LD_INT 11
43843: PUSH
43844: LD_VAR 0 5
43848: IN
43849: PUSH
43850: LD_INT 30
43852: PUSH
43853: LD_VAR 0 5
43857: IN
43858: OR
43859: AND
43860: PUSH
43861: LD_INT 6
43863: PPUSH
43864: LD_VAR 0 16
43868: PPUSH
43869: CALL_OW 321
43873: PUSH
43874: LD_INT 2
43876: EQUAL
43877: AND
43878: IFFALSE 44043
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
43880: LD_INT 22
43882: PUSH
43883: LD_VAR 0 16
43887: PUSH
43888: EMPTY
43889: LIST
43890: LIST
43891: PUSH
43892: LD_INT 2
43894: PUSH
43895: LD_INT 35
43897: PUSH
43898: LD_INT 11
43900: PUSH
43901: EMPTY
43902: LIST
43903: LIST
43904: PUSH
43905: LD_INT 35
43907: PUSH
43908: LD_INT 30
43910: PUSH
43911: EMPTY
43912: LIST
43913: LIST
43914: PUSH
43915: EMPTY
43916: LIST
43917: LIST
43918: LIST
43919: PUSH
43920: LD_INT 91
43922: PUSH
43923: LD_VAR 0 1
43927: PUSH
43928: LD_INT 18
43930: PUSH
43931: EMPTY
43932: LIST
43933: LIST
43934: LIST
43935: PUSH
43936: EMPTY
43937: LIST
43938: LIST
43939: LIST
43940: PPUSH
43941: CALL_OW 69
43945: NOT
43946: PUSH
43947: LD_INT 22
43949: PUSH
43950: LD_VAR 0 16
43954: PUSH
43955: EMPTY
43956: LIST
43957: LIST
43958: PUSH
43959: LD_INT 2
43961: PUSH
43962: LD_INT 30
43964: PUSH
43965: LD_INT 32
43967: PUSH
43968: EMPTY
43969: LIST
43970: LIST
43971: PUSH
43972: LD_INT 30
43974: PUSH
43975: LD_INT 33
43977: PUSH
43978: EMPTY
43979: LIST
43980: LIST
43981: PUSH
43982: EMPTY
43983: LIST
43984: LIST
43985: LIST
43986: PUSH
43987: LD_INT 91
43989: PUSH
43990: LD_VAR 0 1
43994: PUSH
43995: LD_INT 12
43997: PUSH
43998: EMPTY
43999: LIST
44000: LIST
44001: LIST
44002: PUSH
44003: EMPTY
44004: LIST
44005: LIST
44006: LIST
44007: PUSH
44008: EMPTY
44009: LIST
44010: PPUSH
44011: CALL_OW 69
44015: PUSH
44016: LD_INT 2
44018: GREATER
44019: AND
44020: IFFALSE 44043
// weapon := [ us_radar , ar_radar ] [ nat ] ;
44022: LD_ADDR_VAR 0 18
44026: PUSH
44027: LD_INT 11
44029: PUSH
44030: LD_INT 30
44032: PUSH
44033: EMPTY
44034: LIST
44035: LIST
44036: PUSH
44037: LD_VAR 0 12
44041: ARRAY
44042: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
44043: LD_VAR 0 18
44047: NOT
44048: PUSH
44049: LD_INT 40
44051: PPUSH
44052: LD_VAR 0 16
44056: PPUSH
44057: CALL_OW 321
44061: PUSH
44062: LD_INT 2
44064: EQUAL
44065: AND
44066: PUSH
44067: LD_INT 7
44069: PUSH
44070: LD_VAR 0 5
44074: IN
44075: PUSH
44076: LD_INT 28
44078: PUSH
44079: LD_VAR 0 5
44083: IN
44084: OR
44085: PUSH
44086: LD_INT 45
44088: PUSH
44089: LD_VAR 0 5
44093: IN
44094: OR
44095: AND
44096: IFFALSE 44350
// begin hex := GetHexInfo ( x , y ) ;
44098: LD_ADDR_VAR 0 4
44102: PUSH
44103: LD_VAR 0 10
44107: PPUSH
44108: LD_VAR 0 11
44112: PPUSH
44113: CALL_OW 546
44117: ST_TO_ADDR
// if hex [ 1 ] then
44118: LD_VAR 0 4
44122: PUSH
44123: LD_INT 1
44125: ARRAY
44126: IFFALSE 44130
// exit ;
44128: GO 44533
// height := hex [ 2 ] ;
44130: LD_ADDR_VAR 0 15
44134: PUSH
44135: LD_VAR 0 4
44139: PUSH
44140: LD_INT 2
44142: ARRAY
44143: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
44144: LD_ADDR_VAR 0 14
44148: PUSH
44149: LD_INT 0
44151: PUSH
44152: LD_INT 2
44154: PUSH
44155: LD_INT 3
44157: PUSH
44158: LD_INT 5
44160: PUSH
44161: EMPTY
44162: LIST
44163: LIST
44164: LIST
44165: LIST
44166: ST_TO_ADDR
// for i in tmp do
44167: LD_ADDR_VAR 0 8
44171: PUSH
44172: LD_VAR 0 14
44176: PUSH
44177: FOR_IN
44178: IFFALSE 44348
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
44180: LD_ADDR_VAR 0 9
44184: PUSH
44185: LD_VAR 0 10
44189: PPUSH
44190: LD_VAR 0 8
44194: PPUSH
44195: LD_INT 5
44197: PPUSH
44198: CALL_OW 272
44202: PUSH
44203: LD_VAR 0 11
44207: PPUSH
44208: LD_VAR 0 8
44212: PPUSH
44213: LD_INT 5
44215: PPUSH
44216: CALL_OW 273
44220: PUSH
44221: EMPTY
44222: LIST
44223: LIST
44224: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
44225: LD_VAR 0 9
44229: PUSH
44230: LD_INT 1
44232: ARRAY
44233: PPUSH
44234: LD_VAR 0 9
44238: PUSH
44239: LD_INT 2
44241: ARRAY
44242: PPUSH
44243: CALL_OW 488
44247: IFFALSE 44346
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
44249: LD_ADDR_VAR 0 4
44253: PUSH
44254: LD_VAR 0 9
44258: PUSH
44259: LD_INT 1
44261: ARRAY
44262: PPUSH
44263: LD_VAR 0 9
44267: PUSH
44268: LD_INT 2
44270: ARRAY
44271: PPUSH
44272: CALL_OW 546
44276: ST_TO_ADDR
// if hex [ 1 ] then
44277: LD_VAR 0 4
44281: PUSH
44282: LD_INT 1
44284: ARRAY
44285: IFFALSE 44289
// continue ;
44287: GO 44177
// h := hex [ 2 ] ;
44289: LD_ADDR_VAR 0 13
44293: PUSH
44294: LD_VAR 0 4
44298: PUSH
44299: LD_INT 2
44301: ARRAY
44302: ST_TO_ADDR
// if h + 7 < height then
44303: LD_VAR 0 13
44307: PUSH
44308: LD_INT 7
44310: PLUS
44311: PUSH
44312: LD_VAR 0 15
44316: LESS
44317: IFFALSE 44346
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
44319: LD_ADDR_VAR 0 18
44323: PUSH
44324: LD_INT 7
44326: PUSH
44327: LD_INT 28
44329: PUSH
44330: LD_INT 45
44332: PUSH
44333: EMPTY
44334: LIST
44335: LIST
44336: LIST
44337: PUSH
44338: LD_VAR 0 12
44342: ARRAY
44343: ST_TO_ADDR
// break ;
44344: GO 44348
// end ; end ; end ;
44346: GO 44177
44348: POP
44349: POP
// end ; if not weapon then
44350: LD_VAR 0 18
44354: NOT
44355: IFFALSE 44415
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
44357: LD_ADDR_VAR 0 5
44361: PUSH
44362: LD_VAR 0 5
44366: PUSH
44367: LD_INT 11
44369: PUSH
44370: LD_INT 30
44372: PUSH
44373: LD_INT 49
44375: PUSH
44376: EMPTY
44377: LIST
44378: LIST
44379: LIST
44380: DIFF
44381: ST_TO_ADDR
// if not list then
44382: LD_VAR 0 5
44386: NOT
44387: IFFALSE 44391
// exit ;
44389: GO 44533
// weapon := list [ rand ( 1 , list ) ] ;
44391: LD_ADDR_VAR 0 18
44395: PUSH
44396: LD_VAR 0 5
44400: PUSH
44401: LD_INT 1
44403: PPUSH
44404: LD_VAR 0 5
44408: PPUSH
44409: CALL_OW 12
44413: ARRAY
44414: ST_TO_ADDR
// end ; if weapon then
44415: LD_VAR 0 18
44419: IFFALSE 44533
// begin tmp := CostOfWeapon ( weapon ) ;
44421: LD_ADDR_VAR 0 14
44425: PUSH
44426: LD_VAR 0 18
44430: PPUSH
44431: CALL_OW 451
44435: ST_TO_ADDR
// j := GetBase ( tower ) ;
44436: LD_ADDR_VAR 0 9
44440: PUSH
44441: LD_VAR 0 1
44445: PPUSH
44446: CALL_OW 274
44450: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
44451: LD_VAR 0 9
44455: PPUSH
44456: LD_INT 1
44458: PPUSH
44459: CALL_OW 275
44463: PUSH
44464: LD_VAR 0 14
44468: PUSH
44469: LD_INT 1
44471: ARRAY
44472: GREATEREQUAL
44473: PUSH
44474: LD_VAR 0 9
44478: PPUSH
44479: LD_INT 2
44481: PPUSH
44482: CALL_OW 275
44486: PUSH
44487: LD_VAR 0 14
44491: PUSH
44492: LD_INT 2
44494: ARRAY
44495: GREATEREQUAL
44496: AND
44497: PUSH
44498: LD_VAR 0 9
44502: PPUSH
44503: LD_INT 3
44505: PPUSH
44506: CALL_OW 275
44510: PUSH
44511: LD_VAR 0 14
44515: PUSH
44516: LD_INT 3
44518: ARRAY
44519: GREATEREQUAL
44520: AND
44521: IFFALSE 44533
// result := weapon ;
44523: LD_ADDR_VAR 0 3
44527: PUSH
44528: LD_VAR 0 18
44532: ST_TO_ADDR
// end ; end ;
44533: LD_VAR 0 3
44537: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
44538: LD_INT 0
44540: PPUSH
44541: PPUSH
// result := true ;
44542: LD_ADDR_VAR 0 3
44546: PUSH
44547: LD_INT 1
44549: ST_TO_ADDR
// if array1 = array2 then
44550: LD_VAR 0 1
44554: PUSH
44555: LD_VAR 0 2
44559: EQUAL
44560: IFFALSE 44620
// begin for i = 1 to array1 do
44562: LD_ADDR_VAR 0 4
44566: PUSH
44567: DOUBLE
44568: LD_INT 1
44570: DEC
44571: ST_TO_ADDR
44572: LD_VAR 0 1
44576: PUSH
44577: FOR_TO
44578: IFFALSE 44616
// if array1 [ i ] <> array2 [ i ] then
44580: LD_VAR 0 1
44584: PUSH
44585: LD_VAR 0 4
44589: ARRAY
44590: PUSH
44591: LD_VAR 0 2
44595: PUSH
44596: LD_VAR 0 4
44600: ARRAY
44601: NONEQUAL
44602: IFFALSE 44614
// begin result := false ;
44604: LD_ADDR_VAR 0 3
44608: PUSH
44609: LD_INT 0
44611: ST_TO_ADDR
// break ;
44612: GO 44616
// end ;
44614: GO 44577
44616: POP
44617: POP
// end else
44618: GO 44628
// result := false ;
44620: LD_ADDR_VAR 0 3
44624: PUSH
44625: LD_INT 0
44627: ST_TO_ADDR
// end ;
44628: LD_VAR 0 3
44632: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
44633: LD_INT 0
44635: PPUSH
44636: PPUSH
// if not array1 or not array2 then
44637: LD_VAR 0 1
44641: NOT
44642: PUSH
44643: LD_VAR 0 2
44647: NOT
44648: OR
44649: IFFALSE 44653
// exit ;
44651: GO 44717
// result := true ;
44653: LD_ADDR_VAR 0 3
44657: PUSH
44658: LD_INT 1
44660: ST_TO_ADDR
// for i = 1 to array1 do
44661: LD_ADDR_VAR 0 4
44665: PUSH
44666: DOUBLE
44667: LD_INT 1
44669: DEC
44670: ST_TO_ADDR
44671: LD_VAR 0 1
44675: PUSH
44676: FOR_TO
44677: IFFALSE 44715
// if array1 [ i ] <> array2 [ i ] then
44679: LD_VAR 0 1
44683: PUSH
44684: LD_VAR 0 4
44688: ARRAY
44689: PUSH
44690: LD_VAR 0 2
44694: PUSH
44695: LD_VAR 0 4
44699: ARRAY
44700: NONEQUAL
44701: IFFALSE 44713
// begin result := false ;
44703: LD_ADDR_VAR 0 3
44707: PUSH
44708: LD_INT 0
44710: ST_TO_ADDR
// break ;
44711: GO 44715
// end ;
44713: GO 44676
44715: POP
44716: POP
// end ;
44717: LD_VAR 0 3
44721: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
44722: LD_INT 0
44724: PPUSH
44725: PPUSH
44726: PPUSH
// pom := GetBase ( fac ) ;
44727: LD_ADDR_VAR 0 5
44731: PUSH
44732: LD_VAR 0 1
44736: PPUSH
44737: CALL_OW 274
44741: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
44742: LD_ADDR_VAR 0 4
44746: PUSH
44747: LD_VAR 0 2
44751: PUSH
44752: LD_INT 1
44754: ARRAY
44755: PPUSH
44756: LD_VAR 0 2
44760: PUSH
44761: LD_INT 2
44763: ARRAY
44764: PPUSH
44765: LD_VAR 0 2
44769: PUSH
44770: LD_INT 3
44772: ARRAY
44773: PPUSH
44774: LD_VAR 0 2
44778: PUSH
44779: LD_INT 4
44781: ARRAY
44782: PPUSH
44783: CALL_OW 449
44787: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
44788: LD_ADDR_VAR 0 3
44792: PUSH
44793: LD_VAR 0 5
44797: PPUSH
44798: LD_INT 1
44800: PPUSH
44801: CALL_OW 275
44805: PUSH
44806: LD_VAR 0 4
44810: PUSH
44811: LD_INT 1
44813: ARRAY
44814: GREATEREQUAL
44815: PUSH
44816: LD_VAR 0 5
44820: PPUSH
44821: LD_INT 2
44823: PPUSH
44824: CALL_OW 275
44828: PUSH
44829: LD_VAR 0 4
44833: PUSH
44834: LD_INT 2
44836: ARRAY
44837: GREATEREQUAL
44838: AND
44839: PUSH
44840: LD_VAR 0 5
44844: PPUSH
44845: LD_INT 3
44847: PPUSH
44848: CALL_OW 275
44852: PUSH
44853: LD_VAR 0 4
44857: PUSH
44858: LD_INT 3
44860: ARRAY
44861: GREATEREQUAL
44862: AND
44863: ST_TO_ADDR
// end ;
44864: LD_VAR 0 3
44868: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
44869: LD_INT 0
44871: PPUSH
44872: PPUSH
44873: PPUSH
44874: PPUSH
// pom := GetBase ( building ) ;
44875: LD_ADDR_VAR 0 3
44879: PUSH
44880: LD_VAR 0 1
44884: PPUSH
44885: CALL_OW 274
44889: ST_TO_ADDR
// if not pom then
44890: LD_VAR 0 3
44894: NOT
44895: IFFALSE 44899
// exit ;
44897: GO 45069
// btype := GetBType ( building ) ;
44899: LD_ADDR_VAR 0 5
44903: PUSH
44904: LD_VAR 0 1
44908: PPUSH
44909: CALL_OW 266
44913: ST_TO_ADDR
// if btype = b_armoury then
44914: LD_VAR 0 5
44918: PUSH
44919: LD_INT 4
44921: EQUAL
44922: IFFALSE 44932
// btype := b_barracks ;
44924: LD_ADDR_VAR 0 5
44928: PUSH
44929: LD_INT 5
44931: ST_TO_ADDR
// if btype = b_depot then
44932: LD_VAR 0 5
44936: PUSH
44937: LD_INT 0
44939: EQUAL
44940: IFFALSE 44950
// btype := b_warehouse ;
44942: LD_ADDR_VAR 0 5
44946: PUSH
44947: LD_INT 1
44949: ST_TO_ADDR
// if btype = b_workshop then
44950: LD_VAR 0 5
44954: PUSH
44955: LD_INT 2
44957: EQUAL
44958: IFFALSE 44968
// btype := b_factory ;
44960: LD_ADDR_VAR 0 5
44964: PUSH
44965: LD_INT 3
44967: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
44968: LD_ADDR_VAR 0 4
44972: PUSH
44973: LD_VAR 0 5
44977: PPUSH
44978: LD_VAR 0 1
44982: PPUSH
44983: CALL_OW 248
44987: PPUSH
44988: CALL_OW 450
44992: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
44993: LD_ADDR_VAR 0 2
44997: PUSH
44998: LD_VAR 0 3
45002: PPUSH
45003: LD_INT 1
45005: PPUSH
45006: CALL_OW 275
45010: PUSH
45011: LD_VAR 0 4
45015: PUSH
45016: LD_INT 1
45018: ARRAY
45019: GREATEREQUAL
45020: PUSH
45021: LD_VAR 0 3
45025: PPUSH
45026: LD_INT 2
45028: PPUSH
45029: CALL_OW 275
45033: PUSH
45034: LD_VAR 0 4
45038: PUSH
45039: LD_INT 2
45041: ARRAY
45042: GREATEREQUAL
45043: AND
45044: PUSH
45045: LD_VAR 0 3
45049: PPUSH
45050: LD_INT 3
45052: PPUSH
45053: CALL_OW 275
45057: PUSH
45058: LD_VAR 0 4
45062: PUSH
45063: LD_INT 3
45065: ARRAY
45066: GREATEREQUAL
45067: AND
45068: ST_TO_ADDR
// end ;
45069: LD_VAR 0 2
45073: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
45074: LD_INT 0
45076: PPUSH
45077: PPUSH
45078: PPUSH
// pom := GetBase ( building ) ;
45079: LD_ADDR_VAR 0 4
45083: PUSH
45084: LD_VAR 0 1
45088: PPUSH
45089: CALL_OW 274
45093: ST_TO_ADDR
// if not pom then
45094: LD_VAR 0 4
45098: NOT
45099: IFFALSE 45103
// exit ;
45101: GO 45204
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
45103: LD_ADDR_VAR 0 5
45107: PUSH
45108: LD_VAR 0 2
45112: PPUSH
45113: LD_VAR 0 1
45117: PPUSH
45118: CALL_OW 248
45122: PPUSH
45123: CALL_OW 450
45127: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
45128: LD_ADDR_VAR 0 3
45132: PUSH
45133: LD_VAR 0 4
45137: PPUSH
45138: LD_INT 1
45140: PPUSH
45141: CALL_OW 275
45145: PUSH
45146: LD_VAR 0 5
45150: PUSH
45151: LD_INT 1
45153: ARRAY
45154: GREATEREQUAL
45155: PUSH
45156: LD_VAR 0 4
45160: PPUSH
45161: LD_INT 2
45163: PPUSH
45164: CALL_OW 275
45168: PUSH
45169: LD_VAR 0 5
45173: PUSH
45174: LD_INT 2
45176: ARRAY
45177: GREATEREQUAL
45178: AND
45179: PUSH
45180: LD_VAR 0 4
45184: PPUSH
45185: LD_INT 3
45187: PPUSH
45188: CALL_OW 275
45192: PUSH
45193: LD_VAR 0 5
45197: PUSH
45198: LD_INT 3
45200: ARRAY
45201: GREATEREQUAL
45202: AND
45203: ST_TO_ADDR
// end ;
45204: LD_VAR 0 3
45208: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
45209: LD_INT 0
45211: PPUSH
45212: PPUSH
45213: PPUSH
45214: PPUSH
45215: PPUSH
45216: PPUSH
45217: PPUSH
45218: PPUSH
45219: PPUSH
45220: PPUSH
45221: PPUSH
// result := false ;
45222: LD_ADDR_VAR 0 8
45226: PUSH
45227: LD_INT 0
45229: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
45230: LD_VAR 0 5
45234: NOT
45235: PUSH
45236: LD_VAR 0 1
45240: NOT
45241: OR
45242: PUSH
45243: LD_VAR 0 2
45247: NOT
45248: OR
45249: PUSH
45250: LD_VAR 0 3
45254: NOT
45255: OR
45256: IFFALSE 45260
// exit ;
45258: GO 46074
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
45260: LD_ADDR_VAR 0 14
45264: PUSH
45265: LD_VAR 0 1
45269: PPUSH
45270: LD_VAR 0 2
45274: PPUSH
45275: LD_VAR 0 3
45279: PPUSH
45280: LD_VAR 0 4
45284: PPUSH
45285: LD_VAR 0 5
45289: PUSH
45290: LD_INT 1
45292: ARRAY
45293: PPUSH
45294: CALL_OW 248
45298: PPUSH
45299: LD_INT 0
45301: PPUSH
45302: CALL 47327 0 6
45306: ST_TO_ADDR
// if not hexes then
45307: LD_VAR 0 14
45311: NOT
45312: IFFALSE 45316
// exit ;
45314: GO 46074
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
45316: LD_ADDR_VAR 0 17
45320: PUSH
45321: LD_VAR 0 5
45325: PPUSH
45326: LD_INT 22
45328: PUSH
45329: LD_VAR 0 13
45333: PPUSH
45334: CALL_OW 255
45338: PUSH
45339: EMPTY
45340: LIST
45341: LIST
45342: PUSH
45343: LD_INT 2
45345: PUSH
45346: LD_INT 30
45348: PUSH
45349: LD_INT 0
45351: PUSH
45352: EMPTY
45353: LIST
45354: LIST
45355: PUSH
45356: LD_INT 30
45358: PUSH
45359: LD_INT 1
45361: PUSH
45362: EMPTY
45363: LIST
45364: LIST
45365: PUSH
45366: EMPTY
45367: LIST
45368: LIST
45369: LIST
45370: PUSH
45371: EMPTY
45372: LIST
45373: LIST
45374: PPUSH
45375: CALL_OW 72
45379: ST_TO_ADDR
// for i = 1 to hexes do
45380: LD_ADDR_VAR 0 9
45384: PUSH
45385: DOUBLE
45386: LD_INT 1
45388: DEC
45389: ST_TO_ADDR
45390: LD_VAR 0 14
45394: PUSH
45395: FOR_TO
45396: IFFALSE 46072
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
45398: LD_ADDR_VAR 0 13
45402: PUSH
45403: LD_VAR 0 14
45407: PUSH
45408: LD_VAR 0 9
45412: ARRAY
45413: PUSH
45414: LD_INT 1
45416: ARRAY
45417: PPUSH
45418: LD_VAR 0 14
45422: PUSH
45423: LD_VAR 0 9
45427: ARRAY
45428: PUSH
45429: LD_INT 2
45431: ARRAY
45432: PPUSH
45433: CALL_OW 428
45437: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
45438: LD_VAR 0 14
45442: PUSH
45443: LD_VAR 0 9
45447: ARRAY
45448: PUSH
45449: LD_INT 1
45451: ARRAY
45452: PPUSH
45453: LD_VAR 0 14
45457: PUSH
45458: LD_VAR 0 9
45462: ARRAY
45463: PUSH
45464: LD_INT 2
45466: ARRAY
45467: PPUSH
45468: CALL_OW 351
45472: PUSH
45473: LD_VAR 0 14
45477: PUSH
45478: LD_VAR 0 9
45482: ARRAY
45483: PUSH
45484: LD_INT 1
45486: ARRAY
45487: PPUSH
45488: LD_VAR 0 14
45492: PUSH
45493: LD_VAR 0 9
45497: ARRAY
45498: PUSH
45499: LD_INT 2
45501: ARRAY
45502: PPUSH
45503: CALL_OW 488
45507: NOT
45508: OR
45509: PUSH
45510: LD_VAR 0 13
45514: PPUSH
45515: CALL_OW 247
45519: PUSH
45520: LD_INT 3
45522: EQUAL
45523: OR
45524: IFFALSE 45530
// exit ;
45526: POP
45527: POP
45528: GO 46074
// if not tmp then
45530: LD_VAR 0 13
45534: NOT
45535: IFFALSE 45539
// continue ;
45537: GO 45395
// result := true ;
45539: LD_ADDR_VAR 0 8
45543: PUSH
45544: LD_INT 1
45546: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
45547: LD_VAR 0 6
45551: PUSH
45552: LD_VAR 0 13
45556: PPUSH
45557: CALL_OW 247
45561: PUSH
45562: LD_INT 2
45564: EQUAL
45565: AND
45566: PUSH
45567: LD_VAR 0 13
45571: PPUSH
45572: CALL_OW 263
45576: PUSH
45577: LD_INT 1
45579: EQUAL
45580: AND
45581: IFFALSE 45745
// begin if IsDrivenBy ( tmp ) then
45583: LD_VAR 0 13
45587: PPUSH
45588: CALL_OW 311
45592: IFFALSE 45596
// continue ;
45594: GO 45395
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
45596: LD_VAR 0 6
45600: PPUSH
45601: LD_INT 3
45603: PUSH
45604: LD_INT 60
45606: PUSH
45607: EMPTY
45608: LIST
45609: PUSH
45610: EMPTY
45611: LIST
45612: LIST
45613: PUSH
45614: LD_INT 3
45616: PUSH
45617: LD_INT 55
45619: PUSH
45620: EMPTY
45621: LIST
45622: PUSH
45623: EMPTY
45624: LIST
45625: LIST
45626: PUSH
45627: EMPTY
45628: LIST
45629: LIST
45630: PPUSH
45631: CALL_OW 72
45635: IFFALSE 45743
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
45637: LD_ADDR_VAR 0 18
45641: PUSH
45642: LD_VAR 0 6
45646: PPUSH
45647: LD_INT 3
45649: PUSH
45650: LD_INT 60
45652: PUSH
45653: EMPTY
45654: LIST
45655: PUSH
45656: EMPTY
45657: LIST
45658: LIST
45659: PUSH
45660: LD_INT 3
45662: PUSH
45663: LD_INT 55
45665: PUSH
45666: EMPTY
45667: LIST
45668: PUSH
45669: EMPTY
45670: LIST
45671: LIST
45672: PUSH
45673: EMPTY
45674: LIST
45675: LIST
45676: PPUSH
45677: CALL_OW 72
45681: PUSH
45682: LD_INT 1
45684: ARRAY
45685: ST_TO_ADDR
// if IsInUnit ( driver ) then
45686: LD_VAR 0 18
45690: PPUSH
45691: CALL_OW 310
45695: IFFALSE 45706
// ComExit ( driver ) ;
45697: LD_VAR 0 18
45701: PPUSH
45702: CALL 71108 0 1
// AddComEnterUnit ( driver , tmp ) ;
45706: LD_VAR 0 18
45710: PPUSH
45711: LD_VAR 0 13
45715: PPUSH
45716: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
45720: LD_VAR 0 18
45724: PPUSH
45725: LD_VAR 0 7
45729: PPUSH
45730: CALL_OW 173
// AddComExitVehicle ( driver ) ;
45734: LD_VAR 0 18
45738: PPUSH
45739: CALL_OW 181
// end ; continue ;
45743: GO 45395
// end ; if not cleaners or not tmp in cleaners then
45745: LD_VAR 0 6
45749: NOT
45750: PUSH
45751: LD_VAR 0 13
45755: PUSH
45756: LD_VAR 0 6
45760: IN
45761: NOT
45762: OR
45763: IFFALSE 46070
// begin if dep then
45765: LD_VAR 0 17
45769: IFFALSE 45905
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
45771: LD_ADDR_VAR 0 16
45775: PUSH
45776: LD_VAR 0 17
45780: PUSH
45781: LD_INT 1
45783: ARRAY
45784: PPUSH
45785: CALL_OW 250
45789: PPUSH
45790: LD_VAR 0 17
45794: PUSH
45795: LD_INT 1
45797: ARRAY
45798: PPUSH
45799: CALL_OW 254
45803: PPUSH
45804: LD_INT 5
45806: PPUSH
45807: CALL_OW 272
45811: PUSH
45812: LD_VAR 0 17
45816: PUSH
45817: LD_INT 1
45819: ARRAY
45820: PPUSH
45821: CALL_OW 251
45825: PPUSH
45826: LD_VAR 0 17
45830: PUSH
45831: LD_INT 1
45833: ARRAY
45834: PPUSH
45835: CALL_OW 254
45839: PPUSH
45840: LD_INT 5
45842: PPUSH
45843: CALL_OW 273
45847: PUSH
45848: EMPTY
45849: LIST
45850: LIST
45851: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
45852: LD_VAR 0 16
45856: PUSH
45857: LD_INT 1
45859: ARRAY
45860: PPUSH
45861: LD_VAR 0 16
45865: PUSH
45866: LD_INT 2
45868: ARRAY
45869: PPUSH
45870: CALL_OW 488
45874: IFFALSE 45905
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
45876: LD_VAR 0 13
45880: PPUSH
45881: LD_VAR 0 16
45885: PUSH
45886: LD_INT 1
45888: ARRAY
45889: PPUSH
45890: LD_VAR 0 16
45894: PUSH
45895: LD_INT 2
45897: ARRAY
45898: PPUSH
45899: CALL_OW 111
// continue ;
45903: GO 45395
// end ; end ; r := GetDir ( tmp ) ;
45905: LD_ADDR_VAR 0 15
45909: PUSH
45910: LD_VAR 0 13
45914: PPUSH
45915: CALL_OW 254
45919: ST_TO_ADDR
// if r = 5 then
45920: LD_VAR 0 15
45924: PUSH
45925: LD_INT 5
45927: EQUAL
45928: IFFALSE 45938
// r := 0 ;
45930: LD_ADDR_VAR 0 15
45934: PUSH
45935: LD_INT 0
45937: ST_TO_ADDR
// for j = r to 5 do
45938: LD_ADDR_VAR 0 10
45942: PUSH
45943: DOUBLE
45944: LD_VAR 0 15
45948: DEC
45949: ST_TO_ADDR
45950: LD_INT 5
45952: PUSH
45953: FOR_TO
45954: IFFALSE 46068
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
45956: LD_ADDR_VAR 0 11
45960: PUSH
45961: LD_VAR 0 13
45965: PPUSH
45966: CALL_OW 250
45970: PPUSH
45971: LD_VAR 0 10
45975: PPUSH
45976: LD_INT 2
45978: PPUSH
45979: CALL_OW 272
45983: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
45984: LD_ADDR_VAR 0 12
45988: PUSH
45989: LD_VAR 0 13
45993: PPUSH
45994: CALL_OW 251
45998: PPUSH
45999: LD_VAR 0 10
46003: PPUSH
46004: LD_INT 2
46006: PPUSH
46007: CALL_OW 273
46011: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
46012: LD_VAR 0 11
46016: PPUSH
46017: LD_VAR 0 12
46021: PPUSH
46022: CALL_OW 488
46026: PUSH
46027: LD_VAR 0 11
46031: PPUSH
46032: LD_VAR 0 12
46036: PPUSH
46037: CALL_OW 428
46041: NOT
46042: AND
46043: IFFALSE 46066
// begin ComMoveXY ( tmp , _x , _y ) ;
46045: LD_VAR 0 13
46049: PPUSH
46050: LD_VAR 0 11
46054: PPUSH
46055: LD_VAR 0 12
46059: PPUSH
46060: CALL_OW 111
// break ;
46064: GO 46068
// end ; end ;
46066: GO 45953
46068: POP
46069: POP
// end ; end ;
46070: GO 45395
46072: POP
46073: POP
// end ;
46074: LD_VAR 0 8
46078: RET
// export function BuildingTechInvented ( side , btype ) ; begin
46079: LD_INT 0
46081: PPUSH
// result := true ;
46082: LD_ADDR_VAR 0 3
46086: PUSH
46087: LD_INT 1
46089: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
46090: LD_VAR 0 2
46094: PUSH
46095: LD_INT 24
46097: DOUBLE
46098: EQUAL
46099: IFTRUE 46109
46101: LD_INT 33
46103: DOUBLE
46104: EQUAL
46105: IFTRUE 46109
46107: GO 46134
46109: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
46110: LD_ADDR_VAR 0 3
46114: PUSH
46115: LD_INT 32
46117: PPUSH
46118: LD_VAR 0 1
46122: PPUSH
46123: CALL_OW 321
46127: PUSH
46128: LD_INT 2
46130: EQUAL
46131: ST_TO_ADDR
46132: GO 46450
46134: LD_INT 20
46136: DOUBLE
46137: EQUAL
46138: IFTRUE 46142
46140: GO 46167
46142: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
46143: LD_ADDR_VAR 0 3
46147: PUSH
46148: LD_INT 6
46150: PPUSH
46151: LD_VAR 0 1
46155: PPUSH
46156: CALL_OW 321
46160: PUSH
46161: LD_INT 2
46163: EQUAL
46164: ST_TO_ADDR
46165: GO 46450
46167: LD_INT 22
46169: DOUBLE
46170: EQUAL
46171: IFTRUE 46181
46173: LD_INT 36
46175: DOUBLE
46176: EQUAL
46177: IFTRUE 46181
46179: GO 46206
46181: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
46182: LD_ADDR_VAR 0 3
46186: PUSH
46187: LD_INT 15
46189: PPUSH
46190: LD_VAR 0 1
46194: PPUSH
46195: CALL_OW 321
46199: PUSH
46200: LD_INT 2
46202: EQUAL
46203: ST_TO_ADDR
46204: GO 46450
46206: LD_INT 30
46208: DOUBLE
46209: EQUAL
46210: IFTRUE 46214
46212: GO 46239
46214: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
46215: LD_ADDR_VAR 0 3
46219: PUSH
46220: LD_INT 20
46222: PPUSH
46223: LD_VAR 0 1
46227: PPUSH
46228: CALL_OW 321
46232: PUSH
46233: LD_INT 2
46235: EQUAL
46236: ST_TO_ADDR
46237: GO 46450
46239: LD_INT 28
46241: DOUBLE
46242: EQUAL
46243: IFTRUE 46253
46245: LD_INT 21
46247: DOUBLE
46248: EQUAL
46249: IFTRUE 46253
46251: GO 46278
46253: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
46254: LD_ADDR_VAR 0 3
46258: PUSH
46259: LD_INT 21
46261: PPUSH
46262: LD_VAR 0 1
46266: PPUSH
46267: CALL_OW 321
46271: PUSH
46272: LD_INT 2
46274: EQUAL
46275: ST_TO_ADDR
46276: GO 46450
46278: LD_INT 16
46280: DOUBLE
46281: EQUAL
46282: IFTRUE 46286
46284: GO 46311
46286: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
46287: LD_ADDR_VAR 0 3
46291: PUSH
46292: LD_INT 84
46294: PPUSH
46295: LD_VAR 0 1
46299: PPUSH
46300: CALL_OW 321
46304: PUSH
46305: LD_INT 2
46307: EQUAL
46308: ST_TO_ADDR
46309: GO 46450
46311: LD_INT 19
46313: DOUBLE
46314: EQUAL
46315: IFTRUE 46325
46317: LD_INT 23
46319: DOUBLE
46320: EQUAL
46321: IFTRUE 46325
46323: GO 46350
46325: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
46326: LD_ADDR_VAR 0 3
46330: PUSH
46331: LD_INT 83
46333: PPUSH
46334: LD_VAR 0 1
46338: PPUSH
46339: CALL_OW 321
46343: PUSH
46344: LD_INT 2
46346: EQUAL
46347: ST_TO_ADDR
46348: GO 46450
46350: LD_INT 17
46352: DOUBLE
46353: EQUAL
46354: IFTRUE 46358
46356: GO 46383
46358: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
46359: LD_ADDR_VAR 0 3
46363: PUSH
46364: LD_INT 39
46366: PPUSH
46367: LD_VAR 0 1
46371: PPUSH
46372: CALL_OW 321
46376: PUSH
46377: LD_INT 2
46379: EQUAL
46380: ST_TO_ADDR
46381: GO 46450
46383: LD_INT 18
46385: DOUBLE
46386: EQUAL
46387: IFTRUE 46391
46389: GO 46416
46391: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
46392: LD_ADDR_VAR 0 3
46396: PUSH
46397: LD_INT 40
46399: PPUSH
46400: LD_VAR 0 1
46404: PPUSH
46405: CALL_OW 321
46409: PUSH
46410: LD_INT 2
46412: EQUAL
46413: ST_TO_ADDR
46414: GO 46450
46416: LD_INT 27
46418: DOUBLE
46419: EQUAL
46420: IFTRUE 46424
46422: GO 46449
46424: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
46425: LD_ADDR_VAR 0 3
46429: PUSH
46430: LD_INT 35
46432: PPUSH
46433: LD_VAR 0 1
46437: PPUSH
46438: CALL_OW 321
46442: PUSH
46443: LD_INT 2
46445: EQUAL
46446: ST_TO_ADDR
46447: GO 46450
46449: POP
// end ;
46450: LD_VAR 0 3
46454: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
46455: LD_INT 0
46457: PPUSH
46458: PPUSH
46459: PPUSH
46460: PPUSH
46461: PPUSH
46462: PPUSH
46463: PPUSH
46464: PPUSH
46465: PPUSH
46466: PPUSH
46467: PPUSH
// result := false ;
46468: LD_ADDR_VAR 0 6
46472: PUSH
46473: LD_INT 0
46475: ST_TO_ADDR
// if btype = b_depot then
46476: LD_VAR 0 2
46480: PUSH
46481: LD_INT 0
46483: EQUAL
46484: IFFALSE 46496
// begin result := true ;
46486: LD_ADDR_VAR 0 6
46490: PUSH
46491: LD_INT 1
46493: ST_TO_ADDR
// exit ;
46494: GO 47322
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
46496: LD_VAR 0 1
46500: NOT
46501: PUSH
46502: LD_VAR 0 1
46506: PPUSH
46507: CALL_OW 266
46511: PUSH
46512: LD_INT 0
46514: PUSH
46515: LD_INT 1
46517: PUSH
46518: EMPTY
46519: LIST
46520: LIST
46521: IN
46522: NOT
46523: OR
46524: PUSH
46525: LD_VAR 0 2
46529: NOT
46530: OR
46531: PUSH
46532: LD_VAR 0 5
46536: PUSH
46537: LD_INT 0
46539: PUSH
46540: LD_INT 1
46542: PUSH
46543: LD_INT 2
46545: PUSH
46546: LD_INT 3
46548: PUSH
46549: LD_INT 4
46551: PUSH
46552: LD_INT 5
46554: PUSH
46555: EMPTY
46556: LIST
46557: LIST
46558: LIST
46559: LIST
46560: LIST
46561: LIST
46562: IN
46563: NOT
46564: OR
46565: PUSH
46566: LD_VAR 0 3
46570: PPUSH
46571: LD_VAR 0 4
46575: PPUSH
46576: CALL_OW 488
46580: NOT
46581: OR
46582: IFFALSE 46586
// exit ;
46584: GO 47322
// side := GetSide ( depot ) ;
46586: LD_ADDR_VAR 0 9
46590: PUSH
46591: LD_VAR 0 1
46595: PPUSH
46596: CALL_OW 255
46600: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
46601: LD_VAR 0 9
46605: PPUSH
46606: LD_VAR 0 2
46610: PPUSH
46611: CALL 46079 0 2
46615: NOT
46616: IFFALSE 46620
// exit ;
46618: GO 47322
// pom := GetBase ( depot ) ;
46620: LD_ADDR_VAR 0 10
46624: PUSH
46625: LD_VAR 0 1
46629: PPUSH
46630: CALL_OW 274
46634: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
46635: LD_ADDR_VAR 0 11
46639: PUSH
46640: LD_VAR 0 2
46644: PPUSH
46645: LD_VAR 0 1
46649: PPUSH
46650: CALL_OW 248
46654: PPUSH
46655: CALL_OW 450
46659: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
46660: LD_VAR 0 10
46664: PPUSH
46665: LD_INT 1
46667: PPUSH
46668: CALL_OW 275
46672: PUSH
46673: LD_VAR 0 11
46677: PUSH
46678: LD_INT 1
46680: ARRAY
46681: GREATEREQUAL
46682: PUSH
46683: LD_VAR 0 10
46687: PPUSH
46688: LD_INT 2
46690: PPUSH
46691: CALL_OW 275
46695: PUSH
46696: LD_VAR 0 11
46700: PUSH
46701: LD_INT 2
46703: ARRAY
46704: GREATEREQUAL
46705: AND
46706: PUSH
46707: LD_VAR 0 10
46711: PPUSH
46712: LD_INT 3
46714: PPUSH
46715: CALL_OW 275
46719: PUSH
46720: LD_VAR 0 11
46724: PUSH
46725: LD_INT 3
46727: ARRAY
46728: GREATEREQUAL
46729: AND
46730: NOT
46731: IFFALSE 46735
// exit ;
46733: GO 47322
// if GetBType ( depot ) = b_depot then
46735: LD_VAR 0 1
46739: PPUSH
46740: CALL_OW 266
46744: PUSH
46745: LD_INT 0
46747: EQUAL
46748: IFFALSE 46760
// dist := 28 else
46750: LD_ADDR_VAR 0 14
46754: PUSH
46755: LD_INT 28
46757: ST_TO_ADDR
46758: GO 46768
// dist := 36 ;
46760: LD_ADDR_VAR 0 14
46764: PUSH
46765: LD_INT 36
46767: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
46768: LD_VAR 0 1
46772: PPUSH
46773: LD_VAR 0 3
46777: PPUSH
46778: LD_VAR 0 4
46782: PPUSH
46783: CALL_OW 297
46787: PUSH
46788: LD_VAR 0 14
46792: GREATER
46793: IFFALSE 46797
// exit ;
46795: GO 47322
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
46797: LD_ADDR_VAR 0 12
46801: PUSH
46802: LD_VAR 0 2
46806: PPUSH
46807: LD_VAR 0 3
46811: PPUSH
46812: LD_VAR 0 4
46816: PPUSH
46817: LD_VAR 0 5
46821: PPUSH
46822: LD_VAR 0 1
46826: PPUSH
46827: CALL_OW 248
46831: PPUSH
46832: LD_INT 0
46834: PPUSH
46835: CALL 47327 0 6
46839: ST_TO_ADDR
// if not hexes then
46840: LD_VAR 0 12
46844: NOT
46845: IFFALSE 46849
// exit ;
46847: GO 47322
// hex := GetHexInfo ( x , y ) ;
46849: LD_ADDR_VAR 0 15
46853: PUSH
46854: LD_VAR 0 3
46858: PPUSH
46859: LD_VAR 0 4
46863: PPUSH
46864: CALL_OW 546
46868: ST_TO_ADDR
// if hex [ 1 ] then
46869: LD_VAR 0 15
46873: PUSH
46874: LD_INT 1
46876: ARRAY
46877: IFFALSE 46881
// exit ;
46879: GO 47322
// height := hex [ 2 ] ;
46881: LD_ADDR_VAR 0 13
46885: PUSH
46886: LD_VAR 0 15
46890: PUSH
46891: LD_INT 2
46893: ARRAY
46894: ST_TO_ADDR
// for i = 1 to hexes do
46895: LD_ADDR_VAR 0 7
46899: PUSH
46900: DOUBLE
46901: LD_INT 1
46903: DEC
46904: ST_TO_ADDR
46905: LD_VAR 0 12
46909: PUSH
46910: FOR_TO
46911: IFFALSE 47241
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
46913: LD_VAR 0 12
46917: PUSH
46918: LD_VAR 0 7
46922: ARRAY
46923: PUSH
46924: LD_INT 1
46926: ARRAY
46927: PPUSH
46928: LD_VAR 0 12
46932: PUSH
46933: LD_VAR 0 7
46937: ARRAY
46938: PUSH
46939: LD_INT 2
46941: ARRAY
46942: PPUSH
46943: CALL_OW 488
46947: NOT
46948: PUSH
46949: LD_VAR 0 12
46953: PUSH
46954: LD_VAR 0 7
46958: ARRAY
46959: PUSH
46960: LD_INT 1
46962: ARRAY
46963: PPUSH
46964: LD_VAR 0 12
46968: PUSH
46969: LD_VAR 0 7
46973: ARRAY
46974: PUSH
46975: LD_INT 2
46977: ARRAY
46978: PPUSH
46979: CALL_OW 428
46983: PUSH
46984: LD_INT 0
46986: GREATER
46987: OR
46988: PUSH
46989: LD_VAR 0 12
46993: PUSH
46994: LD_VAR 0 7
46998: ARRAY
46999: PUSH
47000: LD_INT 1
47002: ARRAY
47003: PPUSH
47004: LD_VAR 0 12
47008: PUSH
47009: LD_VAR 0 7
47013: ARRAY
47014: PUSH
47015: LD_INT 2
47017: ARRAY
47018: PPUSH
47019: CALL_OW 351
47023: OR
47024: IFFALSE 47030
// exit ;
47026: POP
47027: POP
47028: GO 47322
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
47030: LD_ADDR_VAR 0 8
47034: PUSH
47035: LD_VAR 0 12
47039: PUSH
47040: LD_VAR 0 7
47044: ARRAY
47045: PUSH
47046: LD_INT 1
47048: ARRAY
47049: PPUSH
47050: LD_VAR 0 12
47054: PUSH
47055: LD_VAR 0 7
47059: ARRAY
47060: PUSH
47061: LD_INT 2
47063: ARRAY
47064: PPUSH
47065: CALL_OW 546
47069: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
47070: LD_VAR 0 8
47074: PUSH
47075: LD_INT 1
47077: ARRAY
47078: PUSH
47079: LD_VAR 0 8
47083: PUSH
47084: LD_INT 2
47086: ARRAY
47087: PUSH
47088: LD_VAR 0 13
47092: PUSH
47093: LD_INT 2
47095: PLUS
47096: GREATER
47097: OR
47098: PUSH
47099: LD_VAR 0 8
47103: PUSH
47104: LD_INT 2
47106: ARRAY
47107: PUSH
47108: LD_VAR 0 13
47112: PUSH
47113: LD_INT 2
47115: MINUS
47116: LESS
47117: OR
47118: PUSH
47119: LD_VAR 0 8
47123: PUSH
47124: LD_INT 3
47126: ARRAY
47127: PUSH
47128: LD_INT 0
47130: PUSH
47131: LD_INT 8
47133: PUSH
47134: LD_INT 9
47136: PUSH
47137: LD_INT 10
47139: PUSH
47140: LD_INT 11
47142: PUSH
47143: LD_INT 12
47145: PUSH
47146: LD_INT 13
47148: PUSH
47149: LD_INT 16
47151: PUSH
47152: LD_INT 17
47154: PUSH
47155: LD_INT 18
47157: PUSH
47158: LD_INT 19
47160: PUSH
47161: LD_INT 20
47163: PUSH
47164: LD_INT 21
47166: PUSH
47167: EMPTY
47168: LIST
47169: LIST
47170: LIST
47171: LIST
47172: LIST
47173: LIST
47174: LIST
47175: LIST
47176: LIST
47177: LIST
47178: LIST
47179: LIST
47180: LIST
47181: IN
47182: NOT
47183: OR
47184: PUSH
47185: LD_VAR 0 8
47189: PUSH
47190: LD_INT 5
47192: ARRAY
47193: NOT
47194: OR
47195: PUSH
47196: LD_VAR 0 8
47200: PUSH
47201: LD_INT 6
47203: ARRAY
47204: PUSH
47205: LD_INT 1
47207: PUSH
47208: LD_INT 2
47210: PUSH
47211: LD_INT 7
47213: PUSH
47214: LD_INT 9
47216: PUSH
47217: LD_INT 10
47219: PUSH
47220: LD_INT 11
47222: PUSH
47223: EMPTY
47224: LIST
47225: LIST
47226: LIST
47227: LIST
47228: LIST
47229: LIST
47230: IN
47231: NOT
47232: OR
47233: IFFALSE 47239
// exit ;
47235: POP
47236: POP
47237: GO 47322
// end ;
47239: GO 46910
47241: POP
47242: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
47243: LD_VAR 0 9
47247: PPUSH
47248: LD_VAR 0 3
47252: PPUSH
47253: LD_VAR 0 4
47257: PPUSH
47258: LD_INT 20
47260: PPUSH
47261: CALL 39245 0 4
47265: PUSH
47266: LD_INT 4
47268: ARRAY
47269: IFFALSE 47273
// exit ;
47271: GO 47322
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
47273: LD_VAR 0 2
47277: PUSH
47278: LD_INT 29
47280: PUSH
47281: LD_INT 30
47283: PUSH
47284: EMPTY
47285: LIST
47286: LIST
47287: IN
47288: PUSH
47289: LD_VAR 0 3
47293: PPUSH
47294: LD_VAR 0 4
47298: PPUSH
47299: LD_VAR 0 9
47303: PPUSH
47304: CALL_OW 440
47308: NOT
47309: AND
47310: IFFALSE 47314
// exit ;
47312: GO 47322
// result := true ;
47314: LD_ADDR_VAR 0 6
47318: PUSH
47319: LD_INT 1
47321: ST_TO_ADDR
// end ;
47322: LD_VAR 0 6
47326: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
47327: LD_INT 0
47329: PPUSH
47330: PPUSH
47331: PPUSH
47332: PPUSH
47333: PPUSH
47334: PPUSH
47335: PPUSH
47336: PPUSH
47337: PPUSH
47338: PPUSH
47339: PPUSH
47340: PPUSH
47341: PPUSH
47342: PPUSH
47343: PPUSH
47344: PPUSH
47345: PPUSH
47346: PPUSH
47347: PPUSH
47348: PPUSH
47349: PPUSH
47350: PPUSH
47351: PPUSH
47352: PPUSH
47353: PPUSH
47354: PPUSH
47355: PPUSH
47356: PPUSH
47357: PPUSH
47358: PPUSH
47359: PPUSH
47360: PPUSH
47361: PPUSH
47362: PPUSH
47363: PPUSH
47364: PPUSH
47365: PPUSH
47366: PPUSH
47367: PPUSH
47368: PPUSH
47369: PPUSH
47370: PPUSH
47371: PPUSH
47372: PPUSH
47373: PPUSH
47374: PPUSH
47375: PPUSH
47376: PPUSH
47377: PPUSH
47378: PPUSH
47379: PPUSH
47380: PPUSH
47381: PPUSH
47382: PPUSH
47383: PPUSH
47384: PPUSH
47385: PPUSH
47386: PPUSH
// result = [ ] ;
47387: LD_ADDR_VAR 0 7
47391: PUSH
47392: EMPTY
47393: ST_TO_ADDR
// temp_list = [ ] ;
47394: LD_ADDR_VAR 0 9
47398: PUSH
47399: EMPTY
47400: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
47401: LD_VAR 0 4
47405: PUSH
47406: LD_INT 0
47408: PUSH
47409: LD_INT 1
47411: PUSH
47412: LD_INT 2
47414: PUSH
47415: LD_INT 3
47417: PUSH
47418: LD_INT 4
47420: PUSH
47421: LD_INT 5
47423: PUSH
47424: EMPTY
47425: LIST
47426: LIST
47427: LIST
47428: LIST
47429: LIST
47430: LIST
47431: IN
47432: NOT
47433: PUSH
47434: LD_VAR 0 1
47438: PUSH
47439: LD_INT 0
47441: PUSH
47442: LD_INT 1
47444: PUSH
47445: EMPTY
47446: LIST
47447: LIST
47448: IN
47449: PUSH
47450: LD_VAR 0 5
47454: PUSH
47455: LD_INT 1
47457: PUSH
47458: LD_INT 2
47460: PUSH
47461: LD_INT 3
47463: PUSH
47464: EMPTY
47465: LIST
47466: LIST
47467: LIST
47468: IN
47469: NOT
47470: AND
47471: OR
47472: IFFALSE 47476
// exit ;
47474: GO 65867
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
47476: LD_VAR 0 1
47480: PUSH
47481: LD_INT 6
47483: PUSH
47484: LD_INT 7
47486: PUSH
47487: LD_INT 8
47489: PUSH
47490: LD_INT 13
47492: PUSH
47493: LD_INT 12
47495: PUSH
47496: LD_INT 15
47498: PUSH
47499: LD_INT 11
47501: PUSH
47502: LD_INT 14
47504: PUSH
47505: LD_INT 10
47507: PUSH
47508: EMPTY
47509: LIST
47510: LIST
47511: LIST
47512: LIST
47513: LIST
47514: LIST
47515: LIST
47516: LIST
47517: LIST
47518: IN
47519: IFFALSE 47529
// btype = b_lab ;
47521: LD_ADDR_VAR 0 1
47525: PUSH
47526: LD_INT 6
47528: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
47529: LD_VAR 0 6
47533: PUSH
47534: LD_INT 0
47536: PUSH
47537: LD_INT 1
47539: PUSH
47540: LD_INT 2
47542: PUSH
47543: EMPTY
47544: LIST
47545: LIST
47546: LIST
47547: IN
47548: NOT
47549: PUSH
47550: LD_VAR 0 1
47554: PUSH
47555: LD_INT 0
47557: PUSH
47558: LD_INT 1
47560: PUSH
47561: LD_INT 2
47563: PUSH
47564: LD_INT 3
47566: PUSH
47567: LD_INT 6
47569: PUSH
47570: LD_INT 36
47572: PUSH
47573: LD_INT 4
47575: PUSH
47576: LD_INT 5
47578: PUSH
47579: LD_INT 31
47581: PUSH
47582: LD_INT 32
47584: PUSH
47585: LD_INT 33
47587: PUSH
47588: EMPTY
47589: LIST
47590: LIST
47591: LIST
47592: LIST
47593: LIST
47594: LIST
47595: LIST
47596: LIST
47597: LIST
47598: LIST
47599: LIST
47600: IN
47601: NOT
47602: PUSH
47603: LD_VAR 0 6
47607: PUSH
47608: LD_INT 1
47610: EQUAL
47611: AND
47612: OR
47613: PUSH
47614: LD_VAR 0 1
47618: PUSH
47619: LD_INT 2
47621: PUSH
47622: LD_INT 3
47624: PUSH
47625: EMPTY
47626: LIST
47627: LIST
47628: IN
47629: NOT
47630: PUSH
47631: LD_VAR 0 6
47635: PUSH
47636: LD_INT 2
47638: EQUAL
47639: AND
47640: OR
47641: IFFALSE 47651
// mode = 0 ;
47643: LD_ADDR_VAR 0 6
47647: PUSH
47648: LD_INT 0
47650: ST_TO_ADDR
// case mode of 0 :
47651: LD_VAR 0 6
47655: PUSH
47656: LD_INT 0
47658: DOUBLE
47659: EQUAL
47660: IFTRUE 47664
47662: GO 59117
47664: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47665: LD_ADDR_VAR 0 11
47669: PUSH
47670: LD_INT 0
47672: PUSH
47673: LD_INT 0
47675: PUSH
47676: EMPTY
47677: LIST
47678: LIST
47679: PUSH
47680: LD_INT 0
47682: PUSH
47683: LD_INT 1
47685: NEG
47686: PUSH
47687: EMPTY
47688: LIST
47689: LIST
47690: PUSH
47691: LD_INT 1
47693: PUSH
47694: LD_INT 0
47696: PUSH
47697: EMPTY
47698: LIST
47699: LIST
47700: PUSH
47701: LD_INT 1
47703: PUSH
47704: LD_INT 1
47706: PUSH
47707: EMPTY
47708: LIST
47709: LIST
47710: PUSH
47711: LD_INT 0
47713: PUSH
47714: LD_INT 1
47716: PUSH
47717: EMPTY
47718: LIST
47719: LIST
47720: PUSH
47721: LD_INT 1
47723: NEG
47724: PUSH
47725: LD_INT 0
47727: PUSH
47728: EMPTY
47729: LIST
47730: LIST
47731: PUSH
47732: LD_INT 1
47734: NEG
47735: PUSH
47736: LD_INT 1
47738: NEG
47739: PUSH
47740: EMPTY
47741: LIST
47742: LIST
47743: PUSH
47744: LD_INT 1
47746: NEG
47747: PUSH
47748: LD_INT 2
47750: NEG
47751: PUSH
47752: EMPTY
47753: LIST
47754: LIST
47755: PUSH
47756: LD_INT 0
47758: PUSH
47759: LD_INT 2
47761: NEG
47762: PUSH
47763: EMPTY
47764: LIST
47765: LIST
47766: PUSH
47767: LD_INT 1
47769: PUSH
47770: LD_INT 1
47772: NEG
47773: PUSH
47774: EMPTY
47775: LIST
47776: LIST
47777: PUSH
47778: LD_INT 1
47780: PUSH
47781: LD_INT 2
47783: PUSH
47784: EMPTY
47785: LIST
47786: LIST
47787: PUSH
47788: LD_INT 0
47790: PUSH
47791: LD_INT 2
47793: PUSH
47794: EMPTY
47795: LIST
47796: LIST
47797: PUSH
47798: LD_INT 1
47800: NEG
47801: PUSH
47802: LD_INT 1
47804: PUSH
47805: EMPTY
47806: LIST
47807: LIST
47808: PUSH
47809: LD_INT 1
47811: PUSH
47812: LD_INT 3
47814: PUSH
47815: EMPTY
47816: LIST
47817: LIST
47818: PUSH
47819: LD_INT 0
47821: PUSH
47822: LD_INT 3
47824: PUSH
47825: EMPTY
47826: LIST
47827: LIST
47828: PUSH
47829: LD_INT 1
47831: NEG
47832: PUSH
47833: LD_INT 2
47835: PUSH
47836: EMPTY
47837: LIST
47838: LIST
47839: PUSH
47840: EMPTY
47841: LIST
47842: LIST
47843: LIST
47844: LIST
47845: LIST
47846: LIST
47847: LIST
47848: LIST
47849: LIST
47850: LIST
47851: LIST
47852: LIST
47853: LIST
47854: LIST
47855: LIST
47856: LIST
47857: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47858: LD_ADDR_VAR 0 12
47862: PUSH
47863: LD_INT 0
47865: PUSH
47866: LD_INT 0
47868: PUSH
47869: EMPTY
47870: LIST
47871: LIST
47872: PUSH
47873: LD_INT 0
47875: PUSH
47876: LD_INT 1
47878: NEG
47879: PUSH
47880: EMPTY
47881: LIST
47882: LIST
47883: PUSH
47884: LD_INT 1
47886: PUSH
47887: LD_INT 0
47889: PUSH
47890: EMPTY
47891: LIST
47892: LIST
47893: PUSH
47894: LD_INT 1
47896: PUSH
47897: LD_INT 1
47899: PUSH
47900: EMPTY
47901: LIST
47902: LIST
47903: PUSH
47904: LD_INT 0
47906: PUSH
47907: LD_INT 1
47909: PUSH
47910: EMPTY
47911: LIST
47912: LIST
47913: PUSH
47914: LD_INT 1
47916: NEG
47917: PUSH
47918: LD_INT 0
47920: PUSH
47921: EMPTY
47922: LIST
47923: LIST
47924: PUSH
47925: LD_INT 1
47927: NEG
47928: PUSH
47929: LD_INT 1
47931: NEG
47932: PUSH
47933: EMPTY
47934: LIST
47935: LIST
47936: PUSH
47937: LD_INT 1
47939: PUSH
47940: LD_INT 1
47942: NEG
47943: PUSH
47944: EMPTY
47945: LIST
47946: LIST
47947: PUSH
47948: LD_INT 2
47950: PUSH
47951: LD_INT 0
47953: PUSH
47954: EMPTY
47955: LIST
47956: LIST
47957: PUSH
47958: LD_INT 2
47960: PUSH
47961: LD_INT 1
47963: PUSH
47964: EMPTY
47965: LIST
47966: LIST
47967: PUSH
47968: LD_INT 1
47970: NEG
47971: PUSH
47972: LD_INT 1
47974: PUSH
47975: EMPTY
47976: LIST
47977: LIST
47978: PUSH
47979: LD_INT 2
47981: NEG
47982: PUSH
47983: LD_INT 0
47985: PUSH
47986: EMPTY
47987: LIST
47988: LIST
47989: PUSH
47990: LD_INT 2
47992: NEG
47993: PUSH
47994: LD_INT 1
47996: NEG
47997: PUSH
47998: EMPTY
47999: LIST
48000: LIST
48001: PUSH
48002: LD_INT 2
48004: NEG
48005: PUSH
48006: LD_INT 1
48008: PUSH
48009: EMPTY
48010: LIST
48011: LIST
48012: PUSH
48013: LD_INT 3
48015: NEG
48016: PUSH
48017: LD_INT 0
48019: PUSH
48020: EMPTY
48021: LIST
48022: LIST
48023: PUSH
48024: LD_INT 3
48026: NEG
48027: PUSH
48028: LD_INT 1
48030: NEG
48031: PUSH
48032: EMPTY
48033: LIST
48034: LIST
48035: PUSH
48036: EMPTY
48037: LIST
48038: LIST
48039: LIST
48040: LIST
48041: LIST
48042: LIST
48043: LIST
48044: LIST
48045: LIST
48046: LIST
48047: LIST
48048: LIST
48049: LIST
48050: LIST
48051: LIST
48052: LIST
48053: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48054: LD_ADDR_VAR 0 13
48058: PUSH
48059: LD_INT 0
48061: PUSH
48062: LD_INT 0
48064: PUSH
48065: EMPTY
48066: LIST
48067: LIST
48068: PUSH
48069: LD_INT 0
48071: PUSH
48072: LD_INT 1
48074: NEG
48075: PUSH
48076: EMPTY
48077: LIST
48078: LIST
48079: PUSH
48080: LD_INT 1
48082: PUSH
48083: LD_INT 0
48085: PUSH
48086: EMPTY
48087: LIST
48088: LIST
48089: PUSH
48090: LD_INT 1
48092: PUSH
48093: LD_INT 1
48095: PUSH
48096: EMPTY
48097: LIST
48098: LIST
48099: PUSH
48100: LD_INT 0
48102: PUSH
48103: LD_INT 1
48105: PUSH
48106: EMPTY
48107: LIST
48108: LIST
48109: PUSH
48110: LD_INT 1
48112: NEG
48113: PUSH
48114: LD_INT 0
48116: PUSH
48117: EMPTY
48118: LIST
48119: LIST
48120: PUSH
48121: LD_INT 1
48123: NEG
48124: PUSH
48125: LD_INT 1
48127: NEG
48128: PUSH
48129: EMPTY
48130: LIST
48131: LIST
48132: PUSH
48133: LD_INT 1
48135: NEG
48136: PUSH
48137: LD_INT 2
48139: NEG
48140: PUSH
48141: EMPTY
48142: LIST
48143: LIST
48144: PUSH
48145: LD_INT 2
48147: PUSH
48148: LD_INT 1
48150: PUSH
48151: EMPTY
48152: LIST
48153: LIST
48154: PUSH
48155: LD_INT 2
48157: PUSH
48158: LD_INT 2
48160: PUSH
48161: EMPTY
48162: LIST
48163: LIST
48164: PUSH
48165: LD_INT 1
48167: PUSH
48168: LD_INT 2
48170: PUSH
48171: EMPTY
48172: LIST
48173: LIST
48174: PUSH
48175: LD_INT 2
48177: NEG
48178: PUSH
48179: LD_INT 1
48181: NEG
48182: PUSH
48183: EMPTY
48184: LIST
48185: LIST
48186: PUSH
48187: LD_INT 2
48189: NEG
48190: PUSH
48191: LD_INT 2
48193: NEG
48194: PUSH
48195: EMPTY
48196: LIST
48197: LIST
48198: PUSH
48199: LD_INT 2
48201: NEG
48202: PUSH
48203: LD_INT 3
48205: NEG
48206: PUSH
48207: EMPTY
48208: LIST
48209: LIST
48210: PUSH
48211: LD_INT 3
48213: NEG
48214: PUSH
48215: LD_INT 2
48217: NEG
48218: PUSH
48219: EMPTY
48220: LIST
48221: LIST
48222: PUSH
48223: LD_INT 3
48225: NEG
48226: PUSH
48227: LD_INT 3
48229: NEG
48230: PUSH
48231: EMPTY
48232: LIST
48233: LIST
48234: PUSH
48235: EMPTY
48236: LIST
48237: LIST
48238: LIST
48239: LIST
48240: LIST
48241: LIST
48242: LIST
48243: LIST
48244: LIST
48245: LIST
48246: LIST
48247: LIST
48248: LIST
48249: LIST
48250: LIST
48251: LIST
48252: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48253: LD_ADDR_VAR 0 14
48257: PUSH
48258: LD_INT 0
48260: PUSH
48261: LD_INT 0
48263: PUSH
48264: EMPTY
48265: LIST
48266: LIST
48267: PUSH
48268: LD_INT 0
48270: PUSH
48271: LD_INT 1
48273: NEG
48274: PUSH
48275: EMPTY
48276: LIST
48277: LIST
48278: PUSH
48279: LD_INT 1
48281: PUSH
48282: LD_INT 0
48284: PUSH
48285: EMPTY
48286: LIST
48287: LIST
48288: PUSH
48289: LD_INT 1
48291: PUSH
48292: LD_INT 1
48294: PUSH
48295: EMPTY
48296: LIST
48297: LIST
48298: PUSH
48299: LD_INT 0
48301: PUSH
48302: LD_INT 1
48304: PUSH
48305: EMPTY
48306: LIST
48307: LIST
48308: PUSH
48309: LD_INT 1
48311: NEG
48312: PUSH
48313: LD_INT 0
48315: PUSH
48316: EMPTY
48317: LIST
48318: LIST
48319: PUSH
48320: LD_INT 1
48322: NEG
48323: PUSH
48324: LD_INT 1
48326: NEG
48327: PUSH
48328: EMPTY
48329: LIST
48330: LIST
48331: PUSH
48332: LD_INT 1
48334: NEG
48335: PUSH
48336: LD_INT 2
48338: NEG
48339: PUSH
48340: EMPTY
48341: LIST
48342: LIST
48343: PUSH
48344: LD_INT 0
48346: PUSH
48347: LD_INT 2
48349: NEG
48350: PUSH
48351: EMPTY
48352: LIST
48353: LIST
48354: PUSH
48355: LD_INT 1
48357: PUSH
48358: LD_INT 1
48360: NEG
48361: PUSH
48362: EMPTY
48363: LIST
48364: LIST
48365: PUSH
48366: LD_INT 1
48368: PUSH
48369: LD_INT 2
48371: PUSH
48372: EMPTY
48373: LIST
48374: LIST
48375: PUSH
48376: LD_INT 0
48378: PUSH
48379: LD_INT 2
48381: PUSH
48382: EMPTY
48383: LIST
48384: LIST
48385: PUSH
48386: LD_INT 1
48388: NEG
48389: PUSH
48390: LD_INT 1
48392: PUSH
48393: EMPTY
48394: LIST
48395: LIST
48396: PUSH
48397: LD_INT 1
48399: NEG
48400: PUSH
48401: LD_INT 3
48403: NEG
48404: PUSH
48405: EMPTY
48406: LIST
48407: LIST
48408: PUSH
48409: LD_INT 0
48411: PUSH
48412: LD_INT 3
48414: NEG
48415: PUSH
48416: EMPTY
48417: LIST
48418: LIST
48419: PUSH
48420: LD_INT 1
48422: PUSH
48423: LD_INT 2
48425: NEG
48426: PUSH
48427: EMPTY
48428: LIST
48429: LIST
48430: PUSH
48431: EMPTY
48432: LIST
48433: LIST
48434: LIST
48435: LIST
48436: LIST
48437: LIST
48438: LIST
48439: LIST
48440: LIST
48441: LIST
48442: LIST
48443: LIST
48444: LIST
48445: LIST
48446: LIST
48447: LIST
48448: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48449: LD_ADDR_VAR 0 15
48453: PUSH
48454: LD_INT 0
48456: PUSH
48457: LD_INT 0
48459: PUSH
48460: EMPTY
48461: LIST
48462: LIST
48463: PUSH
48464: LD_INT 0
48466: PUSH
48467: LD_INT 1
48469: NEG
48470: PUSH
48471: EMPTY
48472: LIST
48473: LIST
48474: PUSH
48475: LD_INT 1
48477: PUSH
48478: LD_INT 0
48480: PUSH
48481: EMPTY
48482: LIST
48483: LIST
48484: PUSH
48485: LD_INT 1
48487: PUSH
48488: LD_INT 1
48490: PUSH
48491: EMPTY
48492: LIST
48493: LIST
48494: PUSH
48495: LD_INT 0
48497: PUSH
48498: LD_INT 1
48500: PUSH
48501: EMPTY
48502: LIST
48503: LIST
48504: PUSH
48505: LD_INT 1
48507: NEG
48508: PUSH
48509: LD_INT 0
48511: PUSH
48512: EMPTY
48513: LIST
48514: LIST
48515: PUSH
48516: LD_INT 1
48518: NEG
48519: PUSH
48520: LD_INT 1
48522: NEG
48523: PUSH
48524: EMPTY
48525: LIST
48526: LIST
48527: PUSH
48528: LD_INT 1
48530: PUSH
48531: LD_INT 1
48533: NEG
48534: PUSH
48535: EMPTY
48536: LIST
48537: LIST
48538: PUSH
48539: LD_INT 2
48541: PUSH
48542: LD_INT 0
48544: PUSH
48545: EMPTY
48546: LIST
48547: LIST
48548: PUSH
48549: LD_INT 2
48551: PUSH
48552: LD_INT 1
48554: PUSH
48555: EMPTY
48556: LIST
48557: LIST
48558: PUSH
48559: LD_INT 1
48561: NEG
48562: PUSH
48563: LD_INT 1
48565: PUSH
48566: EMPTY
48567: LIST
48568: LIST
48569: PUSH
48570: LD_INT 2
48572: NEG
48573: PUSH
48574: LD_INT 0
48576: PUSH
48577: EMPTY
48578: LIST
48579: LIST
48580: PUSH
48581: LD_INT 2
48583: NEG
48584: PUSH
48585: LD_INT 1
48587: NEG
48588: PUSH
48589: EMPTY
48590: LIST
48591: LIST
48592: PUSH
48593: LD_INT 2
48595: PUSH
48596: LD_INT 1
48598: NEG
48599: PUSH
48600: EMPTY
48601: LIST
48602: LIST
48603: PUSH
48604: LD_INT 3
48606: PUSH
48607: LD_INT 0
48609: PUSH
48610: EMPTY
48611: LIST
48612: LIST
48613: PUSH
48614: LD_INT 3
48616: PUSH
48617: LD_INT 1
48619: PUSH
48620: EMPTY
48621: LIST
48622: LIST
48623: PUSH
48624: EMPTY
48625: LIST
48626: LIST
48627: LIST
48628: LIST
48629: LIST
48630: LIST
48631: LIST
48632: LIST
48633: LIST
48634: LIST
48635: LIST
48636: LIST
48637: LIST
48638: LIST
48639: LIST
48640: LIST
48641: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48642: LD_ADDR_VAR 0 16
48646: PUSH
48647: LD_INT 0
48649: PUSH
48650: LD_INT 0
48652: PUSH
48653: EMPTY
48654: LIST
48655: LIST
48656: PUSH
48657: LD_INT 0
48659: PUSH
48660: LD_INT 1
48662: NEG
48663: PUSH
48664: EMPTY
48665: LIST
48666: LIST
48667: PUSH
48668: LD_INT 1
48670: PUSH
48671: LD_INT 0
48673: PUSH
48674: EMPTY
48675: LIST
48676: LIST
48677: PUSH
48678: LD_INT 1
48680: PUSH
48681: LD_INT 1
48683: PUSH
48684: EMPTY
48685: LIST
48686: LIST
48687: PUSH
48688: LD_INT 0
48690: PUSH
48691: LD_INT 1
48693: PUSH
48694: EMPTY
48695: LIST
48696: LIST
48697: PUSH
48698: LD_INT 1
48700: NEG
48701: PUSH
48702: LD_INT 0
48704: PUSH
48705: EMPTY
48706: LIST
48707: LIST
48708: PUSH
48709: LD_INT 1
48711: NEG
48712: PUSH
48713: LD_INT 1
48715: NEG
48716: PUSH
48717: EMPTY
48718: LIST
48719: LIST
48720: PUSH
48721: LD_INT 1
48723: NEG
48724: PUSH
48725: LD_INT 2
48727: NEG
48728: PUSH
48729: EMPTY
48730: LIST
48731: LIST
48732: PUSH
48733: LD_INT 2
48735: PUSH
48736: LD_INT 1
48738: PUSH
48739: EMPTY
48740: LIST
48741: LIST
48742: PUSH
48743: LD_INT 2
48745: PUSH
48746: LD_INT 2
48748: PUSH
48749: EMPTY
48750: LIST
48751: LIST
48752: PUSH
48753: LD_INT 1
48755: PUSH
48756: LD_INT 2
48758: PUSH
48759: EMPTY
48760: LIST
48761: LIST
48762: PUSH
48763: LD_INT 2
48765: NEG
48766: PUSH
48767: LD_INT 1
48769: NEG
48770: PUSH
48771: EMPTY
48772: LIST
48773: LIST
48774: PUSH
48775: LD_INT 2
48777: NEG
48778: PUSH
48779: LD_INT 2
48781: NEG
48782: PUSH
48783: EMPTY
48784: LIST
48785: LIST
48786: PUSH
48787: LD_INT 3
48789: PUSH
48790: LD_INT 2
48792: PUSH
48793: EMPTY
48794: LIST
48795: LIST
48796: PUSH
48797: LD_INT 3
48799: PUSH
48800: LD_INT 3
48802: PUSH
48803: EMPTY
48804: LIST
48805: LIST
48806: PUSH
48807: LD_INT 2
48809: PUSH
48810: LD_INT 3
48812: PUSH
48813: EMPTY
48814: LIST
48815: LIST
48816: PUSH
48817: EMPTY
48818: LIST
48819: LIST
48820: LIST
48821: LIST
48822: LIST
48823: LIST
48824: LIST
48825: LIST
48826: LIST
48827: LIST
48828: LIST
48829: LIST
48830: LIST
48831: LIST
48832: LIST
48833: LIST
48834: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48835: LD_ADDR_VAR 0 17
48839: PUSH
48840: LD_INT 0
48842: PUSH
48843: LD_INT 0
48845: PUSH
48846: EMPTY
48847: LIST
48848: LIST
48849: PUSH
48850: LD_INT 0
48852: PUSH
48853: LD_INT 1
48855: NEG
48856: PUSH
48857: EMPTY
48858: LIST
48859: LIST
48860: PUSH
48861: LD_INT 1
48863: PUSH
48864: LD_INT 0
48866: PUSH
48867: EMPTY
48868: LIST
48869: LIST
48870: PUSH
48871: LD_INT 1
48873: PUSH
48874: LD_INT 1
48876: PUSH
48877: EMPTY
48878: LIST
48879: LIST
48880: PUSH
48881: LD_INT 0
48883: PUSH
48884: LD_INT 1
48886: PUSH
48887: EMPTY
48888: LIST
48889: LIST
48890: PUSH
48891: LD_INT 1
48893: NEG
48894: PUSH
48895: LD_INT 0
48897: PUSH
48898: EMPTY
48899: LIST
48900: LIST
48901: PUSH
48902: LD_INT 1
48904: NEG
48905: PUSH
48906: LD_INT 1
48908: NEG
48909: PUSH
48910: EMPTY
48911: LIST
48912: LIST
48913: PUSH
48914: LD_INT 1
48916: NEG
48917: PUSH
48918: LD_INT 2
48920: NEG
48921: PUSH
48922: EMPTY
48923: LIST
48924: LIST
48925: PUSH
48926: LD_INT 0
48928: PUSH
48929: LD_INT 2
48931: NEG
48932: PUSH
48933: EMPTY
48934: LIST
48935: LIST
48936: PUSH
48937: LD_INT 1
48939: PUSH
48940: LD_INT 1
48942: NEG
48943: PUSH
48944: EMPTY
48945: LIST
48946: LIST
48947: PUSH
48948: LD_INT 2
48950: PUSH
48951: LD_INT 0
48953: PUSH
48954: EMPTY
48955: LIST
48956: LIST
48957: PUSH
48958: LD_INT 2
48960: PUSH
48961: LD_INT 1
48963: PUSH
48964: EMPTY
48965: LIST
48966: LIST
48967: PUSH
48968: LD_INT 2
48970: PUSH
48971: LD_INT 2
48973: PUSH
48974: EMPTY
48975: LIST
48976: LIST
48977: PUSH
48978: LD_INT 1
48980: PUSH
48981: LD_INT 2
48983: PUSH
48984: EMPTY
48985: LIST
48986: LIST
48987: PUSH
48988: LD_INT 0
48990: PUSH
48991: LD_INT 2
48993: PUSH
48994: EMPTY
48995: LIST
48996: LIST
48997: PUSH
48998: LD_INT 1
49000: NEG
49001: PUSH
49002: LD_INT 1
49004: PUSH
49005: EMPTY
49006: LIST
49007: LIST
49008: PUSH
49009: LD_INT 2
49011: NEG
49012: PUSH
49013: LD_INT 0
49015: PUSH
49016: EMPTY
49017: LIST
49018: LIST
49019: PUSH
49020: LD_INT 2
49022: NEG
49023: PUSH
49024: LD_INT 1
49026: NEG
49027: PUSH
49028: EMPTY
49029: LIST
49030: LIST
49031: PUSH
49032: LD_INT 2
49034: NEG
49035: PUSH
49036: LD_INT 2
49038: NEG
49039: PUSH
49040: EMPTY
49041: LIST
49042: LIST
49043: PUSH
49044: EMPTY
49045: LIST
49046: LIST
49047: LIST
49048: LIST
49049: LIST
49050: LIST
49051: LIST
49052: LIST
49053: LIST
49054: LIST
49055: LIST
49056: LIST
49057: LIST
49058: LIST
49059: LIST
49060: LIST
49061: LIST
49062: LIST
49063: LIST
49064: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49065: LD_ADDR_VAR 0 18
49069: PUSH
49070: LD_INT 0
49072: PUSH
49073: LD_INT 0
49075: PUSH
49076: EMPTY
49077: LIST
49078: LIST
49079: PUSH
49080: LD_INT 0
49082: PUSH
49083: LD_INT 1
49085: NEG
49086: PUSH
49087: EMPTY
49088: LIST
49089: LIST
49090: PUSH
49091: LD_INT 1
49093: PUSH
49094: LD_INT 0
49096: PUSH
49097: EMPTY
49098: LIST
49099: LIST
49100: PUSH
49101: LD_INT 1
49103: PUSH
49104: LD_INT 1
49106: PUSH
49107: EMPTY
49108: LIST
49109: LIST
49110: PUSH
49111: LD_INT 0
49113: PUSH
49114: LD_INT 1
49116: PUSH
49117: EMPTY
49118: LIST
49119: LIST
49120: PUSH
49121: LD_INT 1
49123: NEG
49124: PUSH
49125: LD_INT 0
49127: PUSH
49128: EMPTY
49129: LIST
49130: LIST
49131: PUSH
49132: LD_INT 1
49134: NEG
49135: PUSH
49136: LD_INT 1
49138: NEG
49139: PUSH
49140: EMPTY
49141: LIST
49142: LIST
49143: PUSH
49144: LD_INT 1
49146: NEG
49147: PUSH
49148: LD_INT 2
49150: NEG
49151: PUSH
49152: EMPTY
49153: LIST
49154: LIST
49155: PUSH
49156: LD_INT 0
49158: PUSH
49159: LD_INT 2
49161: NEG
49162: PUSH
49163: EMPTY
49164: LIST
49165: LIST
49166: PUSH
49167: LD_INT 1
49169: PUSH
49170: LD_INT 1
49172: NEG
49173: PUSH
49174: EMPTY
49175: LIST
49176: LIST
49177: PUSH
49178: LD_INT 2
49180: PUSH
49181: LD_INT 0
49183: PUSH
49184: EMPTY
49185: LIST
49186: LIST
49187: PUSH
49188: LD_INT 2
49190: PUSH
49191: LD_INT 1
49193: PUSH
49194: EMPTY
49195: LIST
49196: LIST
49197: PUSH
49198: LD_INT 2
49200: PUSH
49201: LD_INT 2
49203: PUSH
49204: EMPTY
49205: LIST
49206: LIST
49207: PUSH
49208: LD_INT 1
49210: PUSH
49211: LD_INT 2
49213: PUSH
49214: EMPTY
49215: LIST
49216: LIST
49217: PUSH
49218: LD_INT 0
49220: PUSH
49221: LD_INT 2
49223: PUSH
49224: EMPTY
49225: LIST
49226: LIST
49227: PUSH
49228: LD_INT 1
49230: NEG
49231: PUSH
49232: LD_INT 1
49234: PUSH
49235: EMPTY
49236: LIST
49237: LIST
49238: PUSH
49239: LD_INT 2
49241: NEG
49242: PUSH
49243: LD_INT 0
49245: PUSH
49246: EMPTY
49247: LIST
49248: LIST
49249: PUSH
49250: LD_INT 2
49252: NEG
49253: PUSH
49254: LD_INT 1
49256: NEG
49257: PUSH
49258: EMPTY
49259: LIST
49260: LIST
49261: PUSH
49262: LD_INT 2
49264: NEG
49265: PUSH
49266: LD_INT 2
49268: NEG
49269: PUSH
49270: EMPTY
49271: LIST
49272: LIST
49273: PUSH
49274: EMPTY
49275: LIST
49276: LIST
49277: LIST
49278: LIST
49279: LIST
49280: LIST
49281: LIST
49282: LIST
49283: LIST
49284: LIST
49285: LIST
49286: LIST
49287: LIST
49288: LIST
49289: LIST
49290: LIST
49291: LIST
49292: LIST
49293: LIST
49294: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49295: LD_ADDR_VAR 0 19
49299: PUSH
49300: LD_INT 0
49302: PUSH
49303: LD_INT 0
49305: PUSH
49306: EMPTY
49307: LIST
49308: LIST
49309: PUSH
49310: LD_INT 0
49312: PUSH
49313: LD_INT 1
49315: NEG
49316: PUSH
49317: EMPTY
49318: LIST
49319: LIST
49320: PUSH
49321: LD_INT 1
49323: PUSH
49324: LD_INT 0
49326: PUSH
49327: EMPTY
49328: LIST
49329: LIST
49330: PUSH
49331: LD_INT 1
49333: PUSH
49334: LD_INT 1
49336: PUSH
49337: EMPTY
49338: LIST
49339: LIST
49340: PUSH
49341: LD_INT 0
49343: PUSH
49344: LD_INT 1
49346: PUSH
49347: EMPTY
49348: LIST
49349: LIST
49350: PUSH
49351: LD_INT 1
49353: NEG
49354: PUSH
49355: LD_INT 0
49357: PUSH
49358: EMPTY
49359: LIST
49360: LIST
49361: PUSH
49362: LD_INT 1
49364: NEG
49365: PUSH
49366: LD_INT 1
49368: NEG
49369: PUSH
49370: EMPTY
49371: LIST
49372: LIST
49373: PUSH
49374: LD_INT 1
49376: NEG
49377: PUSH
49378: LD_INT 2
49380: NEG
49381: PUSH
49382: EMPTY
49383: LIST
49384: LIST
49385: PUSH
49386: LD_INT 0
49388: PUSH
49389: LD_INT 2
49391: NEG
49392: PUSH
49393: EMPTY
49394: LIST
49395: LIST
49396: PUSH
49397: LD_INT 1
49399: PUSH
49400: LD_INT 1
49402: NEG
49403: PUSH
49404: EMPTY
49405: LIST
49406: LIST
49407: PUSH
49408: LD_INT 2
49410: PUSH
49411: LD_INT 0
49413: PUSH
49414: EMPTY
49415: LIST
49416: LIST
49417: PUSH
49418: LD_INT 2
49420: PUSH
49421: LD_INT 1
49423: PUSH
49424: EMPTY
49425: LIST
49426: LIST
49427: PUSH
49428: LD_INT 2
49430: PUSH
49431: LD_INT 2
49433: PUSH
49434: EMPTY
49435: LIST
49436: LIST
49437: PUSH
49438: LD_INT 1
49440: PUSH
49441: LD_INT 2
49443: PUSH
49444: EMPTY
49445: LIST
49446: LIST
49447: PUSH
49448: LD_INT 0
49450: PUSH
49451: LD_INT 2
49453: PUSH
49454: EMPTY
49455: LIST
49456: LIST
49457: PUSH
49458: LD_INT 1
49460: NEG
49461: PUSH
49462: LD_INT 1
49464: PUSH
49465: EMPTY
49466: LIST
49467: LIST
49468: PUSH
49469: LD_INT 2
49471: NEG
49472: PUSH
49473: LD_INT 0
49475: PUSH
49476: EMPTY
49477: LIST
49478: LIST
49479: PUSH
49480: LD_INT 2
49482: NEG
49483: PUSH
49484: LD_INT 1
49486: NEG
49487: PUSH
49488: EMPTY
49489: LIST
49490: LIST
49491: PUSH
49492: LD_INT 2
49494: NEG
49495: PUSH
49496: LD_INT 2
49498: NEG
49499: PUSH
49500: EMPTY
49501: LIST
49502: LIST
49503: PUSH
49504: EMPTY
49505: LIST
49506: LIST
49507: LIST
49508: LIST
49509: LIST
49510: LIST
49511: LIST
49512: LIST
49513: LIST
49514: LIST
49515: LIST
49516: LIST
49517: LIST
49518: LIST
49519: LIST
49520: LIST
49521: LIST
49522: LIST
49523: LIST
49524: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49525: LD_ADDR_VAR 0 20
49529: PUSH
49530: LD_INT 0
49532: PUSH
49533: LD_INT 0
49535: PUSH
49536: EMPTY
49537: LIST
49538: LIST
49539: PUSH
49540: LD_INT 0
49542: PUSH
49543: LD_INT 1
49545: NEG
49546: PUSH
49547: EMPTY
49548: LIST
49549: LIST
49550: PUSH
49551: LD_INT 1
49553: PUSH
49554: LD_INT 0
49556: PUSH
49557: EMPTY
49558: LIST
49559: LIST
49560: PUSH
49561: LD_INT 1
49563: PUSH
49564: LD_INT 1
49566: PUSH
49567: EMPTY
49568: LIST
49569: LIST
49570: PUSH
49571: LD_INT 0
49573: PUSH
49574: LD_INT 1
49576: PUSH
49577: EMPTY
49578: LIST
49579: LIST
49580: PUSH
49581: LD_INT 1
49583: NEG
49584: PUSH
49585: LD_INT 0
49587: PUSH
49588: EMPTY
49589: LIST
49590: LIST
49591: PUSH
49592: LD_INT 1
49594: NEG
49595: PUSH
49596: LD_INT 1
49598: NEG
49599: PUSH
49600: EMPTY
49601: LIST
49602: LIST
49603: PUSH
49604: LD_INT 1
49606: NEG
49607: PUSH
49608: LD_INT 2
49610: NEG
49611: PUSH
49612: EMPTY
49613: LIST
49614: LIST
49615: PUSH
49616: LD_INT 0
49618: PUSH
49619: LD_INT 2
49621: NEG
49622: PUSH
49623: EMPTY
49624: LIST
49625: LIST
49626: PUSH
49627: LD_INT 1
49629: PUSH
49630: LD_INT 1
49632: NEG
49633: PUSH
49634: EMPTY
49635: LIST
49636: LIST
49637: PUSH
49638: LD_INT 2
49640: PUSH
49641: LD_INT 0
49643: PUSH
49644: EMPTY
49645: LIST
49646: LIST
49647: PUSH
49648: LD_INT 2
49650: PUSH
49651: LD_INT 1
49653: PUSH
49654: EMPTY
49655: LIST
49656: LIST
49657: PUSH
49658: LD_INT 2
49660: PUSH
49661: LD_INT 2
49663: PUSH
49664: EMPTY
49665: LIST
49666: LIST
49667: PUSH
49668: LD_INT 1
49670: PUSH
49671: LD_INT 2
49673: PUSH
49674: EMPTY
49675: LIST
49676: LIST
49677: PUSH
49678: LD_INT 0
49680: PUSH
49681: LD_INT 2
49683: PUSH
49684: EMPTY
49685: LIST
49686: LIST
49687: PUSH
49688: LD_INT 1
49690: NEG
49691: PUSH
49692: LD_INT 1
49694: PUSH
49695: EMPTY
49696: LIST
49697: LIST
49698: PUSH
49699: LD_INT 2
49701: NEG
49702: PUSH
49703: LD_INT 0
49705: PUSH
49706: EMPTY
49707: LIST
49708: LIST
49709: PUSH
49710: LD_INT 2
49712: NEG
49713: PUSH
49714: LD_INT 1
49716: NEG
49717: PUSH
49718: EMPTY
49719: LIST
49720: LIST
49721: PUSH
49722: LD_INT 2
49724: NEG
49725: PUSH
49726: LD_INT 2
49728: NEG
49729: PUSH
49730: EMPTY
49731: LIST
49732: LIST
49733: PUSH
49734: EMPTY
49735: LIST
49736: LIST
49737: LIST
49738: LIST
49739: LIST
49740: LIST
49741: LIST
49742: LIST
49743: LIST
49744: LIST
49745: LIST
49746: LIST
49747: LIST
49748: LIST
49749: LIST
49750: LIST
49751: LIST
49752: LIST
49753: LIST
49754: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49755: LD_ADDR_VAR 0 21
49759: PUSH
49760: LD_INT 0
49762: PUSH
49763: LD_INT 0
49765: PUSH
49766: EMPTY
49767: LIST
49768: LIST
49769: PUSH
49770: LD_INT 0
49772: PUSH
49773: LD_INT 1
49775: NEG
49776: PUSH
49777: EMPTY
49778: LIST
49779: LIST
49780: PUSH
49781: LD_INT 1
49783: PUSH
49784: LD_INT 0
49786: PUSH
49787: EMPTY
49788: LIST
49789: LIST
49790: PUSH
49791: LD_INT 1
49793: PUSH
49794: LD_INT 1
49796: PUSH
49797: EMPTY
49798: LIST
49799: LIST
49800: PUSH
49801: LD_INT 0
49803: PUSH
49804: LD_INT 1
49806: PUSH
49807: EMPTY
49808: LIST
49809: LIST
49810: PUSH
49811: LD_INT 1
49813: NEG
49814: PUSH
49815: LD_INT 0
49817: PUSH
49818: EMPTY
49819: LIST
49820: LIST
49821: PUSH
49822: LD_INT 1
49824: NEG
49825: PUSH
49826: LD_INT 1
49828: NEG
49829: PUSH
49830: EMPTY
49831: LIST
49832: LIST
49833: PUSH
49834: LD_INT 1
49836: NEG
49837: PUSH
49838: LD_INT 2
49840: NEG
49841: PUSH
49842: EMPTY
49843: LIST
49844: LIST
49845: PUSH
49846: LD_INT 0
49848: PUSH
49849: LD_INT 2
49851: NEG
49852: PUSH
49853: EMPTY
49854: LIST
49855: LIST
49856: PUSH
49857: LD_INT 1
49859: PUSH
49860: LD_INT 1
49862: NEG
49863: PUSH
49864: EMPTY
49865: LIST
49866: LIST
49867: PUSH
49868: LD_INT 2
49870: PUSH
49871: LD_INT 0
49873: PUSH
49874: EMPTY
49875: LIST
49876: LIST
49877: PUSH
49878: LD_INT 2
49880: PUSH
49881: LD_INT 1
49883: PUSH
49884: EMPTY
49885: LIST
49886: LIST
49887: PUSH
49888: LD_INT 2
49890: PUSH
49891: LD_INT 2
49893: PUSH
49894: EMPTY
49895: LIST
49896: LIST
49897: PUSH
49898: LD_INT 1
49900: PUSH
49901: LD_INT 2
49903: PUSH
49904: EMPTY
49905: LIST
49906: LIST
49907: PUSH
49908: LD_INT 0
49910: PUSH
49911: LD_INT 2
49913: PUSH
49914: EMPTY
49915: LIST
49916: LIST
49917: PUSH
49918: LD_INT 1
49920: NEG
49921: PUSH
49922: LD_INT 1
49924: PUSH
49925: EMPTY
49926: LIST
49927: LIST
49928: PUSH
49929: LD_INT 2
49931: NEG
49932: PUSH
49933: LD_INT 0
49935: PUSH
49936: EMPTY
49937: LIST
49938: LIST
49939: PUSH
49940: LD_INT 2
49942: NEG
49943: PUSH
49944: LD_INT 1
49946: NEG
49947: PUSH
49948: EMPTY
49949: LIST
49950: LIST
49951: PUSH
49952: LD_INT 2
49954: NEG
49955: PUSH
49956: LD_INT 2
49958: NEG
49959: PUSH
49960: EMPTY
49961: LIST
49962: LIST
49963: PUSH
49964: EMPTY
49965: LIST
49966: LIST
49967: LIST
49968: LIST
49969: LIST
49970: LIST
49971: LIST
49972: LIST
49973: LIST
49974: LIST
49975: LIST
49976: LIST
49977: LIST
49978: LIST
49979: LIST
49980: LIST
49981: LIST
49982: LIST
49983: LIST
49984: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49985: LD_ADDR_VAR 0 22
49989: PUSH
49990: LD_INT 0
49992: PUSH
49993: LD_INT 0
49995: PUSH
49996: EMPTY
49997: LIST
49998: LIST
49999: PUSH
50000: LD_INT 0
50002: PUSH
50003: LD_INT 1
50005: NEG
50006: PUSH
50007: EMPTY
50008: LIST
50009: LIST
50010: PUSH
50011: LD_INT 1
50013: PUSH
50014: LD_INT 0
50016: PUSH
50017: EMPTY
50018: LIST
50019: LIST
50020: PUSH
50021: LD_INT 1
50023: PUSH
50024: LD_INT 1
50026: PUSH
50027: EMPTY
50028: LIST
50029: LIST
50030: PUSH
50031: LD_INT 0
50033: PUSH
50034: LD_INT 1
50036: PUSH
50037: EMPTY
50038: LIST
50039: LIST
50040: PUSH
50041: LD_INT 1
50043: NEG
50044: PUSH
50045: LD_INT 0
50047: PUSH
50048: EMPTY
50049: LIST
50050: LIST
50051: PUSH
50052: LD_INT 1
50054: NEG
50055: PUSH
50056: LD_INT 1
50058: NEG
50059: PUSH
50060: EMPTY
50061: LIST
50062: LIST
50063: PUSH
50064: LD_INT 1
50066: NEG
50067: PUSH
50068: LD_INT 2
50070: NEG
50071: PUSH
50072: EMPTY
50073: LIST
50074: LIST
50075: PUSH
50076: LD_INT 0
50078: PUSH
50079: LD_INT 2
50081: NEG
50082: PUSH
50083: EMPTY
50084: LIST
50085: LIST
50086: PUSH
50087: LD_INT 1
50089: PUSH
50090: LD_INT 1
50092: NEG
50093: PUSH
50094: EMPTY
50095: LIST
50096: LIST
50097: PUSH
50098: LD_INT 2
50100: PUSH
50101: LD_INT 0
50103: PUSH
50104: EMPTY
50105: LIST
50106: LIST
50107: PUSH
50108: LD_INT 2
50110: PUSH
50111: LD_INT 1
50113: PUSH
50114: EMPTY
50115: LIST
50116: LIST
50117: PUSH
50118: LD_INT 2
50120: PUSH
50121: LD_INT 2
50123: PUSH
50124: EMPTY
50125: LIST
50126: LIST
50127: PUSH
50128: LD_INT 1
50130: PUSH
50131: LD_INT 2
50133: PUSH
50134: EMPTY
50135: LIST
50136: LIST
50137: PUSH
50138: LD_INT 0
50140: PUSH
50141: LD_INT 2
50143: PUSH
50144: EMPTY
50145: LIST
50146: LIST
50147: PUSH
50148: LD_INT 1
50150: NEG
50151: PUSH
50152: LD_INT 1
50154: PUSH
50155: EMPTY
50156: LIST
50157: LIST
50158: PUSH
50159: LD_INT 2
50161: NEG
50162: PUSH
50163: LD_INT 0
50165: PUSH
50166: EMPTY
50167: LIST
50168: LIST
50169: PUSH
50170: LD_INT 2
50172: NEG
50173: PUSH
50174: LD_INT 1
50176: NEG
50177: PUSH
50178: EMPTY
50179: LIST
50180: LIST
50181: PUSH
50182: LD_INT 2
50184: NEG
50185: PUSH
50186: LD_INT 2
50188: NEG
50189: PUSH
50190: EMPTY
50191: LIST
50192: LIST
50193: PUSH
50194: EMPTY
50195: LIST
50196: LIST
50197: LIST
50198: LIST
50199: LIST
50200: LIST
50201: LIST
50202: LIST
50203: LIST
50204: LIST
50205: LIST
50206: LIST
50207: LIST
50208: LIST
50209: LIST
50210: LIST
50211: LIST
50212: LIST
50213: LIST
50214: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
50215: LD_ADDR_VAR 0 23
50219: PUSH
50220: LD_INT 0
50222: PUSH
50223: LD_INT 0
50225: PUSH
50226: EMPTY
50227: LIST
50228: LIST
50229: PUSH
50230: LD_INT 0
50232: PUSH
50233: LD_INT 1
50235: NEG
50236: PUSH
50237: EMPTY
50238: LIST
50239: LIST
50240: PUSH
50241: LD_INT 1
50243: PUSH
50244: LD_INT 0
50246: PUSH
50247: EMPTY
50248: LIST
50249: LIST
50250: PUSH
50251: LD_INT 1
50253: PUSH
50254: LD_INT 1
50256: PUSH
50257: EMPTY
50258: LIST
50259: LIST
50260: PUSH
50261: LD_INT 0
50263: PUSH
50264: LD_INT 1
50266: PUSH
50267: EMPTY
50268: LIST
50269: LIST
50270: PUSH
50271: LD_INT 1
50273: NEG
50274: PUSH
50275: LD_INT 0
50277: PUSH
50278: EMPTY
50279: LIST
50280: LIST
50281: PUSH
50282: LD_INT 1
50284: NEG
50285: PUSH
50286: LD_INT 1
50288: NEG
50289: PUSH
50290: EMPTY
50291: LIST
50292: LIST
50293: PUSH
50294: LD_INT 1
50296: NEG
50297: PUSH
50298: LD_INT 2
50300: NEG
50301: PUSH
50302: EMPTY
50303: LIST
50304: LIST
50305: PUSH
50306: LD_INT 0
50308: PUSH
50309: LD_INT 2
50311: NEG
50312: PUSH
50313: EMPTY
50314: LIST
50315: LIST
50316: PUSH
50317: LD_INT 1
50319: PUSH
50320: LD_INT 1
50322: NEG
50323: PUSH
50324: EMPTY
50325: LIST
50326: LIST
50327: PUSH
50328: LD_INT 2
50330: PUSH
50331: LD_INT 0
50333: PUSH
50334: EMPTY
50335: LIST
50336: LIST
50337: PUSH
50338: LD_INT 2
50340: PUSH
50341: LD_INT 1
50343: PUSH
50344: EMPTY
50345: LIST
50346: LIST
50347: PUSH
50348: LD_INT 2
50350: PUSH
50351: LD_INT 2
50353: PUSH
50354: EMPTY
50355: LIST
50356: LIST
50357: PUSH
50358: LD_INT 1
50360: PUSH
50361: LD_INT 2
50363: PUSH
50364: EMPTY
50365: LIST
50366: LIST
50367: PUSH
50368: LD_INT 0
50370: PUSH
50371: LD_INT 2
50373: PUSH
50374: EMPTY
50375: LIST
50376: LIST
50377: PUSH
50378: LD_INT 1
50380: NEG
50381: PUSH
50382: LD_INT 1
50384: PUSH
50385: EMPTY
50386: LIST
50387: LIST
50388: PUSH
50389: LD_INT 2
50391: NEG
50392: PUSH
50393: LD_INT 0
50395: PUSH
50396: EMPTY
50397: LIST
50398: LIST
50399: PUSH
50400: LD_INT 2
50402: NEG
50403: PUSH
50404: LD_INT 1
50406: NEG
50407: PUSH
50408: EMPTY
50409: LIST
50410: LIST
50411: PUSH
50412: LD_INT 2
50414: NEG
50415: PUSH
50416: LD_INT 2
50418: NEG
50419: PUSH
50420: EMPTY
50421: LIST
50422: LIST
50423: PUSH
50424: LD_INT 2
50426: NEG
50427: PUSH
50428: LD_INT 3
50430: NEG
50431: PUSH
50432: EMPTY
50433: LIST
50434: LIST
50435: PUSH
50436: LD_INT 1
50438: NEG
50439: PUSH
50440: LD_INT 3
50442: NEG
50443: PUSH
50444: EMPTY
50445: LIST
50446: LIST
50447: PUSH
50448: LD_INT 1
50450: PUSH
50451: LD_INT 2
50453: NEG
50454: PUSH
50455: EMPTY
50456: LIST
50457: LIST
50458: PUSH
50459: LD_INT 2
50461: PUSH
50462: LD_INT 1
50464: NEG
50465: PUSH
50466: EMPTY
50467: LIST
50468: LIST
50469: PUSH
50470: EMPTY
50471: LIST
50472: LIST
50473: LIST
50474: LIST
50475: LIST
50476: LIST
50477: LIST
50478: LIST
50479: LIST
50480: LIST
50481: LIST
50482: LIST
50483: LIST
50484: LIST
50485: LIST
50486: LIST
50487: LIST
50488: LIST
50489: LIST
50490: LIST
50491: LIST
50492: LIST
50493: LIST
50494: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
50495: LD_ADDR_VAR 0 24
50499: PUSH
50500: LD_INT 0
50502: PUSH
50503: LD_INT 0
50505: PUSH
50506: EMPTY
50507: LIST
50508: LIST
50509: PUSH
50510: LD_INT 0
50512: PUSH
50513: LD_INT 1
50515: NEG
50516: PUSH
50517: EMPTY
50518: LIST
50519: LIST
50520: PUSH
50521: LD_INT 1
50523: PUSH
50524: LD_INT 0
50526: PUSH
50527: EMPTY
50528: LIST
50529: LIST
50530: PUSH
50531: LD_INT 1
50533: PUSH
50534: LD_INT 1
50536: PUSH
50537: EMPTY
50538: LIST
50539: LIST
50540: PUSH
50541: LD_INT 0
50543: PUSH
50544: LD_INT 1
50546: PUSH
50547: EMPTY
50548: LIST
50549: LIST
50550: PUSH
50551: LD_INT 1
50553: NEG
50554: PUSH
50555: LD_INT 0
50557: PUSH
50558: EMPTY
50559: LIST
50560: LIST
50561: PUSH
50562: LD_INT 1
50564: NEG
50565: PUSH
50566: LD_INT 1
50568: NEG
50569: PUSH
50570: EMPTY
50571: LIST
50572: LIST
50573: PUSH
50574: LD_INT 1
50576: NEG
50577: PUSH
50578: LD_INT 2
50580: NEG
50581: PUSH
50582: EMPTY
50583: LIST
50584: LIST
50585: PUSH
50586: LD_INT 0
50588: PUSH
50589: LD_INT 2
50591: NEG
50592: PUSH
50593: EMPTY
50594: LIST
50595: LIST
50596: PUSH
50597: LD_INT 1
50599: PUSH
50600: LD_INT 1
50602: NEG
50603: PUSH
50604: EMPTY
50605: LIST
50606: LIST
50607: PUSH
50608: LD_INT 2
50610: PUSH
50611: LD_INT 0
50613: PUSH
50614: EMPTY
50615: LIST
50616: LIST
50617: PUSH
50618: LD_INT 2
50620: PUSH
50621: LD_INT 1
50623: PUSH
50624: EMPTY
50625: LIST
50626: LIST
50627: PUSH
50628: LD_INT 2
50630: PUSH
50631: LD_INT 2
50633: PUSH
50634: EMPTY
50635: LIST
50636: LIST
50637: PUSH
50638: LD_INT 1
50640: PUSH
50641: LD_INT 2
50643: PUSH
50644: EMPTY
50645: LIST
50646: LIST
50647: PUSH
50648: LD_INT 0
50650: PUSH
50651: LD_INT 2
50653: PUSH
50654: EMPTY
50655: LIST
50656: LIST
50657: PUSH
50658: LD_INT 1
50660: NEG
50661: PUSH
50662: LD_INT 1
50664: PUSH
50665: EMPTY
50666: LIST
50667: LIST
50668: PUSH
50669: LD_INT 2
50671: NEG
50672: PUSH
50673: LD_INT 0
50675: PUSH
50676: EMPTY
50677: LIST
50678: LIST
50679: PUSH
50680: LD_INT 2
50682: NEG
50683: PUSH
50684: LD_INT 1
50686: NEG
50687: PUSH
50688: EMPTY
50689: LIST
50690: LIST
50691: PUSH
50692: LD_INT 2
50694: NEG
50695: PUSH
50696: LD_INT 2
50698: NEG
50699: PUSH
50700: EMPTY
50701: LIST
50702: LIST
50703: PUSH
50704: LD_INT 1
50706: PUSH
50707: LD_INT 2
50709: NEG
50710: PUSH
50711: EMPTY
50712: LIST
50713: LIST
50714: PUSH
50715: LD_INT 2
50717: PUSH
50718: LD_INT 1
50720: NEG
50721: PUSH
50722: EMPTY
50723: LIST
50724: LIST
50725: PUSH
50726: LD_INT 3
50728: PUSH
50729: LD_INT 1
50731: PUSH
50732: EMPTY
50733: LIST
50734: LIST
50735: PUSH
50736: LD_INT 3
50738: PUSH
50739: LD_INT 2
50741: PUSH
50742: EMPTY
50743: LIST
50744: LIST
50745: PUSH
50746: EMPTY
50747: LIST
50748: LIST
50749: LIST
50750: LIST
50751: LIST
50752: LIST
50753: LIST
50754: LIST
50755: LIST
50756: LIST
50757: LIST
50758: LIST
50759: LIST
50760: LIST
50761: LIST
50762: LIST
50763: LIST
50764: LIST
50765: LIST
50766: LIST
50767: LIST
50768: LIST
50769: LIST
50770: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
50771: LD_ADDR_VAR 0 25
50775: PUSH
50776: LD_INT 0
50778: PUSH
50779: LD_INT 0
50781: PUSH
50782: EMPTY
50783: LIST
50784: LIST
50785: PUSH
50786: LD_INT 0
50788: PUSH
50789: LD_INT 1
50791: NEG
50792: PUSH
50793: EMPTY
50794: LIST
50795: LIST
50796: PUSH
50797: LD_INT 1
50799: PUSH
50800: LD_INT 0
50802: PUSH
50803: EMPTY
50804: LIST
50805: LIST
50806: PUSH
50807: LD_INT 1
50809: PUSH
50810: LD_INT 1
50812: PUSH
50813: EMPTY
50814: LIST
50815: LIST
50816: PUSH
50817: LD_INT 0
50819: PUSH
50820: LD_INT 1
50822: PUSH
50823: EMPTY
50824: LIST
50825: LIST
50826: PUSH
50827: LD_INT 1
50829: NEG
50830: PUSH
50831: LD_INT 0
50833: PUSH
50834: EMPTY
50835: LIST
50836: LIST
50837: PUSH
50838: LD_INT 1
50840: NEG
50841: PUSH
50842: LD_INT 1
50844: NEG
50845: PUSH
50846: EMPTY
50847: LIST
50848: LIST
50849: PUSH
50850: LD_INT 1
50852: NEG
50853: PUSH
50854: LD_INT 2
50856: NEG
50857: PUSH
50858: EMPTY
50859: LIST
50860: LIST
50861: PUSH
50862: LD_INT 0
50864: PUSH
50865: LD_INT 2
50867: NEG
50868: PUSH
50869: EMPTY
50870: LIST
50871: LIST
50872: PUSH
50873: LD_INT 1
50875: PUSH
50876: LD_INT 1
50878: NEG
50879: PUSH
50880: EMPTY
50881: LIST
50882: LIST
50883: PUSH
50884: LD_INT 2
50886: PUSH
50887: LD_INT 0
50889: PUSH
50890: EMPTY
50891: LIST
50892: LIST
50893: PUSH
50894: LD_INT 2
50896: PUSH
50897: LD_INT 1
50899: PUSH
50900: EMPTY
50901: LIST
50902: LIST
50903: PUSH
50904: LD_INT 2
50906: PUSH
50907: LD_INT 2
50909: PUSH
50910: EMPTY
50911: LIST
50912: LIST
50913: PUSH
50914: LD_INT 1
50916: PUSH
50917: LD_INT 2
50919: PUSH
50920: EMPTY
50921: LIST
50922: LIST
50923: PUSH
50924: LD_INT 0
50926: PUSH
50927: LD_INT 2
50929: PUSH
50930: EMPTY
50931: LIST
50932: LIST
50933: PUSH
50934: LD_INT 1
50936: NEG
50937: PUSH
50938: LD_INT 1
50940: PUSH
50941: EMPTY
50942: LIST
50943: LIST
50944: PUSH
50945: LD_INT 2
50947: NEG
50948: PUSH
50949: LD_INT 0
50951: PUSH
50952: EMPTY
50953: LIST
50954: LIST
50955: PUSH
50956: LD_INT 2
50958: NEG
50959: PUSH
50960: LD_INT 1
50962: NEG
50963: PUSH
50964: EMPTY
50965: LIST
50966: LIST
50967: PUSH
50968: LD_INT 2
50970: NEG
50971: PUSH
50972: LD_INT 2
50974: NEG
50975: PUSH
50976: EMPTY
50977: LIST
50978: LIST
50979: PUSH
50980: LD_INT 3
50982: PUSH
50983: LD_INT 1
50985: PUSH
50986: EMPTY
50987: LIST
50988: LIST
50989: PUSH
50990: LD_INT 3
50992: PUSH
50993: LD_INT 2
50995: PUSH
50996: EMPTY
50997: LIST
50998: LIST
50999: PUSH
51000: LD_INT 2
51002: PUSH
51003: LD_INT 3
51005: PUSH
51006: EMPTY
51007: LIST
51008: LIST
51009: PUSH
51010: LD_INT 1
51012: PUSH
51013: LD_INT 3
51015: PUSH
51016: EMPTY
51017: LIST
51018: LIST
51019: PUSH
51020: EMPTY
51021: LIST
51022: LIST
51023: LIST
51024: LIST
51025: LIST
51026: LIST
51027: LIST
51028: LIST
51029: LIST
51030: LIST
51031: LIST
51032: LIST
51033: LIST
51034: LIST
51035: LIST
51036: LIST
51037: LIST
51038: LIST
51039: LIST
51040: LIST
51041: LIST
51042: LIST
51043: LIST
51044: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
51045: LD_ADDR_VAR 0 26
51049: PUSH
51050: LD_INT 0
51052: PUSH
51053: LD_INT 0
51055: PUSH
51056: EMPTY
51057: LIST
51058: LIST
51059: PUSH
51060: LD_INT 0
51062: PUSH
51063: LD_INT 1
51065: NEG
51066: PUSH
51067: EMPTY
51068: LIST
51069: LIST
51070: PUSH
51071: LD_INT 1
51073: PUSH
51074: LD_INT 0
51076: PUSH
51077: EMPTY
51078: LIST
51079: LIST
51080: PUSH
51081: LD_INT 1
51083: PUSH
51084: LD_INT 1
51086: PUSH
51087: EMPTY
51088: LIST
51089: LIST
51090: PUSH
51091: LD_INT 0
51093: PUSH
51094: LD_INT 1
51096: PUSH
51097: EMPTY
51098: LIST
51099: LIST
51100: PUSH
51101: LD_INT 1
51103: NEG
51104: PUSH
51105: LD_INT 0
51107: PUSH
51108: EMPTY
51109: LIST
51110: LIST
51111: PUSH
51112: LD_INT 1
51114: NEG
51115: PUSH
51116: LD_INT 1
51118: NEG
51119: PUSH
51120: EMPTY
51121: LIST
51122: LIST
51123: PUSH
51124: LD_INT 1
51126: NEG
51127: PUSH
51128: LD_INT 2
51130: NEG
51131: PUSH
51132: EMPTY
51133: LIST
51134: LIST
51135: PUSH
51136: LD_INT 0
51138: PUSH
51139: LD_INT 2
51141: NEG
51142: PUSH
51143: EMPTY
51144: LIST
51145: LIST
51146: PUSH
51147: LD_INT 1
51149: PUSH
51150: LD_INT 1
51152: NEG
51153: PUSH
51154: EMPTY
51155: LIST
51156: LIST
51157: PUSH
51158: LD_INT 2
51160: PUSH
51161: LD_INT 0
51163: PUSH
51164: EMPTY
51165: LIST
51166: LIST
51167: PUSH
51168: LD_INT 2
51170: PUSH
51171: LD_INT 1
51173: PUSH
51174: EMPTY
51175: LIST
51176: LIST
51177: PUSH
51178: LD_INT 2
51180: PUSH
51181: LD_INT 2
51183: PUSH
51184: EMPTY
51185: LIST
51186: LIST
51187: PUSH
51188: LD_INT 1
51190: PUSH
51191: LD_INT 2
51193: PUSH
51194: EMPTY
51195: LIST
51196: LIST
51197: PUSH
51198: LD_INT 0
51200: PUSH
51201: LD_INT 2
51203: PUSH
51204: EMPTY
51205: LIST
51206: LIST
51207: PUSH
51208: LD_INT 1
51210: NEG
51211: PUSH
51212: LD_INT 1
51214: PUSH
51215: EMPTY
51216: LIST
51217: LIST
51218: PUSH
51219: LD_INT 2
51221: NEG
51222: PUSH
51223: LD_INT 0
51225: PUSH
51226: EMPTY
51227: LIST
51228: LIST
51229: PUSH
51230: LD_INT 2
51232: NEG
51233: PUSH
51234: LD_INT 1
51236: NEG
51237: PUSH
51238: EMPTY
51239: LIST
51240: LIST
51241: PUSH
51242: LD_INT 2
51244: NEG
51245: PUSH
51246: LD_INT 2
51248: NEG
51249: PUSH
51250: EMPTY
51251: LIST
51252: LIST
51253: PUSH
51254: LD_INT 2
51256: PUSH
51257: LD_INT 3
51259: PUSH
51260: EMPTY
51261: LIST
51262: LIST
51263: PUSH
51264: LD_INT 1
51266: PUSH
51267: LD_INT 3
51269: PUSH
51270: EMPTY
51271: LIST
51272: LIST
51273: PUSH
51274: LD_INT 1
51276: NEG
51277: PUSH
51278: LD_INT 2
51280: PUSH
51281: EMPTY
51282: LIST
51283: LIST
51284: PUSH
51285: LD_INT 2
51287: NEG
51288: PUSH
51289: LD_INT 1
51291: PUSH
51292: EMPTY
51293: LIST
51294: LIST
51295: PUSH
51296: EMPTY
51297: LIST
51298: LIST
51299: LIST
51300: LIST
51301: LIST
51302: LIST
51303: LIST
51304: LIST
51305: LIST
51306: LIST
51307: LIST
51308: LIST
51309: LIST
51310: LIST
51311: LIST
51312: LIST
51313: LIST
51314: LIST
51315: LIST
51316: LIST
51317: LIST
51318: LIST
51319: LIST
51320: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
51321: LD_ADDR_VAR 0 27
51325: PUSH
51326: LD_INT 0
51328: PUSH
51329: LD_INT 0
51331: PUSH
51332: EMPTY
51333: LIST
51334: LIST
51335: PUSH
51336: LD_INT 0
51338: PUSH
51339: LD_INT 1
51341: NEG
51342: PUSH
51343: EMPTY
51344: LIST
51345: LIST
51346: PUSH
51347: LD_INT 1
51349: PUSH
51350: LD_INT 0
51352: PUSH
51353: EMPTY
51354: LIST
51355: LIST
51356: PUSH
51357: LD_INT 1
51359: PUSH
51360: LD_INT 1
51362: PUSH
51363: EMPTY
51364: LIST
51365: LIST
51366: PUSH
51367: LD_INT 0
51369: PUSH
51370: LD_INT 1
51372: PUSH
51373: EMPTY
51374: LIST
51375: LIST
51376: PUSH
51377: LD_INT 1
51379: NEG
51380: PUSH
51381: LD_INT 0
51383: PUSH
51384: EMPTY
51385: LIST
51386: LIST
51387: PUSH
51388: LD_INT 1
51390: NEG
51391: PUSH
51392: LD_INT 1
51394: NEG
51395: PUSH
51396: EMPTY
51397: LIST
51398: LIST
51399: PUSH
51400: LD_INT 1
51402: NEG
51403: PUSH
51404: LD_INT 2
51406: NEG
51407: PUSH
51408: EMPTY
51409: LIST
51410: LIST
51411: PUSH
51412: LD_INT 0
51414: PUSH
51415: LD_INT 2
51417: NEG
51418: PUSH
51419: EMPTY
51420: LIST
51421: LIST
51422: PUSH
51423: LD_INT 1
51425: PUSH
51426: LD_INT 1
51428: NEG
51429: PUSH
51430: EMPTY
51431: LIST
51432: LIST
51433: PUSH
51434: LD_INT 2
51436: PUSH
51437: LD_INT 0
51439: PUSH
51440: EMPTY
51441: LIST
51442: LIST
51443: PUSH
51444: LD_INT 2
51446: PUSH
51447: LD_INT 1
51449: PUSH
51450: EMPTY
51451: LIST
51452: LIST
51453: PUSH
51454: LD_INT 2
51456: PUSH
51457: LD_INT 2
51459: PUSH
51460: EMPTY
51461: LIST
51462: LIST
51463: PUSH
51464: LD_INT 1
51466: PUSH
51467: LD_INT 2
51469: PUSH
51470: EMPTY
51471: LIST
51472: LIST
51473: PUSH
51474: LD_INT 0
51476: PUSH
51477: LD_INT 2
51479: PUSH
51480: EMPTY
51481: LIST
51482: LIST
51483: PUSH
51484: LD_INT 1
51486: NEG
51487: PUSH
51488: LD_INT 1
51490: PUSH
51491: EMPTY
51492: LIST
51493: LIST
51494: PUSH
51495: LD_INT 2
51497: NEG
51498: PUSH
51499: LD_INT 0
51501: PUSH
51502: EMPTY
51503: LIST
51504: LIST
51505: PUSH
51506: LD_INT 2
51508: NEG
51509: PUSH
51510: LD_INT 1
51512: NEG
51513: PUSH
51514: EMPTY
51515: LIST
51516: LIST
51517: PUSH
51518: LD_INT 2
51520: NEG
51521: PUSH
51522: LD_INT 2
51524: NEG
51525: PUSH
51526: EMPTY
51527: LIST
51528: LIST
51529: PUSH
51530: LD_INT 1
51532: NEG
51533: PUSH
51534: LD_INT 2
51536: PUSH
51537: EMPTY
51538: LIST
51539: LIST
51540: PUSH
51541: LD_INT 2
51543: NEG
51544: PUSH
51545: LD_INT 1
51547: PUSH
51548: EMPTY
51549: LIST
51550: LIST
51551: PUSH
51552: LD_INT 3
51554: NEG
51555: PUSH
51556: LD_INT 1
51558: NEG
51559: PUSH
51560: EMPTY
51561: LIST
51562: LIST
51563: PUSH
51564: LD_INT 3
51566: NEG
51567: PUSH
51568: LD_INT 2
51570: NEG
51571: PUSH
51572: EMPTY
51573: LIST
51574: LIST
51575: PUSH
51576: EMPTY
51577: LIST
51578: LIST
51579: LIST
51580: LIST
51581: LIST
51582: LIST
51583: LIST
51584: LIST
51585: LIST
51586: LIST
51587: LIST
51588: LIST
51589: LIST
51590: LIST
51591: LIST
51592: LIST
51593: LIST
51594: LIST
51595: LIST
51596: LIST
51597: LIST
51598: LIST
51599: LIST
51600: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
51601: LD_ADDR_VAR 0 28
51605: PUSH
51606: LD_INT 0
51608: PUSH
51609: LD_INT 0
51611: PUSH
51612: EMPTY
51613: LIST
51614: LIST
51615: PUSH
51616: LD_INT 0
51618: PUSH
51619: LD_INT 1
51621: NEG
51622: PUSH
51623: EMPTY
51624: LIST
51625: LIST
51626: PUSH
51627: LD_INT 1
51629: PUSH
51630: LD_INT 0
51632: PUSH
51633: EMPTY
51634: LIST
51635: LIST
51636: PUSH
51637: LD_INT 1
51639: PUSH
51640: LD_INT 1
51642: PUSH
51643: EMPTY
51644: LIST
51645: LIST
51646: PUSH
51647: LD_INT 0
51649: PUSH
51650: LD_INT 1
51652: PUSH
51653: EMPTY
51654: LIST
51655: LIST
51656: PUSH
51657: LD_INT 1
51659: NEG
51660: PUSH
51661: LD_INT 0
51663: PUSH
51664: EMPTY
51665: LIST
51666: LIST
51667: PUSH
51668: LD_INT 1
51670: NEG
51671: PUSH
51672: LD_INT 1
51674: NEG
51675: PUSH
51676: EMPTY
51677: LIST
51678: LIST
51679: PUSH
51680: LD_INT 1
51682: NEG
51683: PUSH
51684: LD_INT 2
51686: NEG
51687: PUSH
51688: EMPTY
51689: LIST
51690: LIST
51691: PUSH
51692: LD_INT 0
51694: PUSH
51695: LD_INT 2
51697: NEG
51698: PUSH
51699: EMPTY
51700: LIST
51701: LIST
51702: PUSH
51703: LD_INT 1
51705: PUSH
51706: LD_INT 1
51708: NEG
51709: PUSH
51710: EMPTY
51711: LIST
51712: LIST
51713: PUSH
51714: LD_INT 2
51716: PUSH
51717: LD_INT 0
51719: PUSH
51720: EMPTY
51721: LIST
51722: LIST
51723: PUSH
51724: LD_INT 2
51726: PUSH
51727: LD_INT 1
51729: PUSH
51730: EMPTY
51731: LIST
51732: LIST
51733: PUSH
51734: LD_INT 2
51736: PUSH
51737: LD_INT 2
51739: PUSH
51740: EMPTY
51741: LIST
51742: LIST
51743: PUSH
51744: LD_INT 1
51746: PUSH
51747: LD_INT 2
51749: PUSH
51750: EMPTY
51751: LIST
51752: LIST
51753: PUSH
51754: LD_INT 0
51756: PUSH
51757: LD_INT 2
51759: PUSH
51760: EMPTY
51761: LIST
51762: LIST
51763: PUSH
51764: LD_INT 1
51766: NEG
51767: PUSH
51768: LD_INT 1
51770: PUSH
51771: EMPTY
51772: LIST
51773: LIST
51774: PUSH
51775: LD_INT 2
51777: NEG
51778: PUSH
51779: LD_INT 0
51781: PUSH
51782: EMPTY
51783: LIST
51784: LIST
51785: PUSH
51786: LD_INT 2
51788: NEG
51789: PUSH
51790: LD_INT 1
51792: NEG
51793: PUSH
51794: EMPTY
51795: LIST
51796: LIST
51797: PUSH
51798: LD_INT 2
51800: NEG
51801: PUSH
51802: LD_INT 2
51804: NEG
51805: PUSH
51806: EMPTY
51807: LIST
51808: LIST
51809: PUSH
51810: LD_INT 2
51812: NEG
51813: PUSH
51814: LD_INT 3
51816: NEG
51817: PUSH
51818: EMPTY
51819: LIST
51820: LIST
51821: PUSH
51822: LD_INT 1
51824: NEG
51825: PUSH
51826: LD_INT 3
51828: NEG
51829: PUSH
51830: EMPTY
51831: LIST
51832: LIST
51833: PUSH
51834: LD_INT 3
51836: NEG
51837: PUSH
51838: LD_INT 1
51840: NEG
51841: PUSH
51842: EMPTY
51843: LIST
51844: LIST
51845: PUSH
51846: LD_INT 3
51848: NEG
51849: PUSH
51850: LD_INT 2
51852: NEG
51853: PUSH
51854: EMPTY
51855: LIST
51856: LIST
51857: PUSH
51858: EMPTY
51859: LIST
51860: LIST
51861: LIST
51862: LIST
51863: LIST
51864: LIST
51865: LIST
51866: LIST
51867: LIST
51868: LIST
51869: LIST
51870: LIST
51871: LIST
51872: LIST
51873: LIST
51874: LIST
51875: LIST
51876: LIST
51877: LIST
51878: LIST
51879: LIST
51880: LIST
51881: LIST
51882: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
51883: LD_ADDR_VAR 0 29
51887: PUSH
51888: LD_INT 0
51890: PUSH
51891: LD_INT 0
51893: PUSH
51894: EMPTY
51895: LIST
51896: LIST
51897: PUSH
51898: LD_INT 0
51900: PUSH
51901: LD_INT 1
51903: NEG
51904: PUSH
51905: EMPTY
51906: LIST
51907: LIST
51908: PUSH
51909: LD_INT 1
51911: PUSH
51912: LD_INT 0
51914: PUSH
51915: EMPTY
51916: LIST
51917: LIST
51918: PUSH
51919: LD_INT 1
51921: PUSH
51922: LD_INT 1
51924: PUSH
51925: EMPTY
51926: LIST
51927: LIST
51928: PUSH
51929: LD_INT 0
51931: PUSH
51932: LD_INT 1
51934: PUSH
51935: EMPTY
51936: LIST
51937: LIST
51938: PUSH
51939: LD_INT 1
51941: NEG
51942: PUSH
51943: LD_INT 0
51945: PUSH
51946: EMPTY
51947: LIST
51948: LIST
51949: PUSH
51950: LD_INT 1
51952: NEG
51953: PUSH
51954: LD_INT 1
51956: NEG
51957: PUSH
51958: EMPTY
51959: LIST
51960: LIST
51961: PUSH
51962: LD_INT 1
51964: NEG
51965: PUSH
51966: LD_INT 2
51968: NEG
51969: PUSH
51970: EMPTY
51971: LIST
51972: LIST
51973: PUSH
51974: LD_INT 0
51976: PUSH
51977: LD_INT 2
51979: NEG
51980: PUSH
51981: EMPTY
51982: LIST
51983: LIST
51984: PUSH
51985: LD_INT 1
51987: PUSH
51988: LD_INT 1
51990: NEG
51991: PUSH
51992: EMPTY
51993: LIST
51994: LIST
51995: PUSH
51996: LD_INT 2
51998: PUSH
51999: LD_INT 0
52001: PUSH
52002: EMPTY
52003: LIST
52004: LIST
52005: PUSH
52006: LD_INT 2
52008: PUSH
52009: LD_INT 1
52011: PUSH
52012: EMPTY
52013: LIST
52014: LIST
52015: PUSH
52016: LD_INT 1
52018: PUSH
52019: LD_INT 2
52021: PUSH
52022: EMPTY
52023: LIST
52024: LIST
52025: PUSH
52026: LD_INT 0
52028: PUSH
52029: LD_INT 2
52031: PUSH
52032: EMPTY
52033: LIST
52034: LIST
52035: PUSH
52036: LD_INT 1
52038: NEG
52039: PUSH
52040: LD_INT 1
52042: PUSH
52043: EMPTY
52044: LIST
52045: LIST
52046: PUSH
52047: LD_INT 2
52049: NEG
52050: PUSH
52051: LD_INT 1
52053: NEG
52054: PUSH
52055: EMPTY
52056: LIST
52057: LIST
52058: PUSH
52059: LD_INT 2
52061: NEG
52062: PUSH
52063: LD_INT 2
52065: NEG
52066: PUSH
52067: EMPTY
52068: LIST
52069: LIST
52070: PUSH
52071: LD_INT 2
52073: NEG
52074: PUSH
52075: LD_INT 3
52077: NEG
52078: PUSH
52079: EMPTY
52080: LIST
52081: LIST
52082: PUSH
52083: LD_INT 2
52085: PUSH
52086: LD_INT 1
52088: NEG
52089: PUSH
52090: EMPTY
52091: LIST
52092: LIST
52093: PUSH
52094: LD_INT 3
52096: PUSH
52097: LD_INT 1
52099: PUSH
52100: EMPTY
52101: LIST
52102: LIST
52103: PUSH
52104: LD_INT 1
52106: PUSH
52107: LD_INT 3
52109: PUSH
52110: EMPTY
52111: LIST
52112: LIST
52113: PUSH
52114: LD_INT 1
52116: NEG
52117: PUSH
52118: LD_INT 2
52120: PUSH
52121: EMPTY
52122: LIST
52123: LIST
52124: PUSH
52125: LD_INT 3
52127: NEG
52128: PUSH
52129: LD_INT 2
52131: NEG
52132: PUSH
52133: EMPTY
52134: LIST
52135: LIST
52136: PUSH
52137: EMPTY
52138: LIST
52139: LIST
52140: LIST
52141: LIST
52142: LIST
52143: LIST
52144: LIST
52145: LIST
52146: LIST
52147: LIST
52148: LIST
52149: LIST
52150: LIST
52151: LIST
52152: LIST
52153: LIST
52154: LIST
52155: LIST
52156: LIST
52157: LIST
52158: LIST
52159: LIST
52160: LIST
52161: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52162: LD_ADDR_VAR 0 30
52166: PUSH
52167: LD_INT 0
52169: PUSH
52170: LD_INT 0
52172: PUSH
52173: EMPTY
52174: LIST
52175: LIST
52176: PUSH
52177: LD_INT 0
52179: PUSH
52180: LD_INT 1
52182: NEG
52183: PUSH
52184: EMPTY
52185: LIST
52186: LIST
52187: PUSH
52188: LD_INT 1
52190: PUSH
52191: LD_INT 0
52193: PUSH
52194: EMPTY
52195: LIST
52196: LIST
52197: PUSH
52198: LD_INT 1
52200: PUSH
52201: LD_INT 1
52203: PUSH
52204: EMPTY
52205: LIST
52206: LIST
52207: PUSH
52208: LD_INT 0
52210: PUSH
52211: LD_INT 1
52213: PUSH
52214: EMPTY
52215: LIST
52216: LIST
52217: PUSH
52218: LD_INT 1
52220: NEG
52221: PUSH
52222: LD_INT 0
52224: PUSH
52225: EMPTY
52226: LIST
52227: LIST
52228: PUSH
52229: LD_INT 1
52231: NEG
52232: PUSH
52233: LD_INT 1
52235: NEG
52236: PUSH
52237: EMPTY
52238: LIST
52239: LIST
52240: PUSH
52241: LD_INT 1
52243: NEG
52244: PUSH
52245: LD_INT 2
52247: NEG
52248: PUSH
52249: EMPTY
52250: LIST
52251: LIST
52252: PUSH
52253: LD_INT 0
52255: PUSH
52256: LD_INT 2
52258: NEG
52259: PUSH
52260: EMPTY
52261: LIST
52262: LIST
52263: PUSH
52264: LD_INT 1
52266: PUSH
52267: LD_INT 1
52269: NEG
52270: PUSH
52271: EMPTY
52272: LIST
52273: LIST
52274: PUSH
52275: LD_INT 2
52277: PUSH
52278: LD_INT 0
52280: PUSH
52281: EMPTY
52282: LIST
52283: LIST
52284: PUSH
52285: LD_INT 2
52287: PUSH
52288: LD_INT 1
52290: PUSH
52291: EMPTY
52292: LIST
52293: LIST
52294: PUSH
52295: LD_INT 2
52297: PUSH
52298: LD_INT 2
52300: PUSH
52301: EMPTY
52302: LIST
52303: LIST
52304: PUSH
52305: LD_INT 1
52307: PUSH
52308: LD_INT 2
52310: PUSH
52311: EMPTY
52312: LIST
52313: LIST
52314: PUSH
52315: LD_INT 1
52317: NEG
52318: PUSH
52319: LD_INT 1
52321: PUSH
52322: EMPTY
52323: LIST
52324: LIST
52325: PUSH
52326: LD_INT 2
52328: NEG
52329: PUSH
52330: LD_INT 0
52332: PUSH
52333: EMPTY
52334: LIST
52335: LIST
52336: PUSH
52337: LD_INT 2
52339: NEG
52340: PUSH
52341: LD_INT 1
52343: NEG
52344: PUSH
52345: EMPTY
52346: LIST
52347: LIST
52348: PUSH
52349: LD_INT 1
52351: NEG
52352: PUSH
52353: LD_INT 3
52355: NEG
52356: PUSH
52357: EMPTY
52358: LIST
52359: LIST
52360: PUSH
52361: LD_INT 1
52363: PUSH
52364: LD_INT 2
52366: NEG
52367: PUSH
52368: EMPTY
52369: LIST
52370: LIST
52371: PUSH
52372: LD_INT 3
52374: PUSH
52375: LD_INT 2
52377: PUSH
52378: EMPTY
52379: LIST
52380: LIST
52381: PUSH
52382: LD_INT 2
52384: PUSH
52385: LD_INT 3
52387: PUSH
52388: EMPTY
52389: LIST
52390: LIST
52391: PUSH
52392: LD_INT 2
52394: NEG
52395: PUSH
52396: LD_INT 1
52398: PUSH
52399: EMPTY
52400: LIST
52401: LIST
52402: PUSH
52403: LD_INT 3
52405: NEG
52406: PUSH
52407: LD_INT 1
52409: NEG
52410: PUSH
52411: EMPTY
52412: LIST
52413: LIST
52414: PUSH
52415: EMPTY
52416: LIST
52417: LIST
52418: LIST
52419: LIST
52420: LIST
52421: LIST
52422: LIST
52423: LIST
52424: LIST
52425: LIST
52426: LIST
52427: LIST
52428: LIST
52429: LIST
52430: LIST
52431: LIST
52432: LIST
52433: LIST
52434: LIST
52435: LIST
52436: LIST
52437: LIST
52438: LIST
52439: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
52440: LD_ADDR_VAR 0 31
52444: PUSH
52445: LD_INT 0
52447: PUSH
52448: LD_INT 0
52450: PUSH
52451: EMPTY
52452: LIST
52453: LIST
52454: PUSH
52455: LD_INT 0
52457: PUSH
52458: LD_INT 1
52460: NEG
52461: PUSH
52462: EMPTY
52463: LIST
52464: LIST
52465: PUSH
52466: LD_INT 1
52468: PUSH
52469: LD_INT 0
52471: PUSH
52472: EMPTY
52473: LIST
52474: LIST
52475: PUSH
52476: LD_INT 1
52478: PUSH
52479: LD_INT 1
52481: PUSH
52482: EMPTY
52483: LIST
52484: LIST
52485: PUSH
52486: LD_INT 0
52488: PUSH
52489: LD_INT 1
52491: PUSH
52492: EMPTY
52493: LIST
52494: LIST
52495: PUSH
52496: LD_INT 1
52498: NEG
52499: PUSH
52500: LD_INT 0
52502: PUSH
52503: EMPTY
52504: LIST
52505: LIST
52506: PUSH
52507: LD_INT 1
52509: NEG
52510: PUSH
52511: LD_INT 1
52513: NEG
52514: PUSH
52515: EMPTY
52516: LIST
52517: LIST
52518: PUSH
52519: LD_INT 1
52521: NEG
52522: PUSH
52523: LD_INT 2
52525: NEG
52526: PUSH
52527: EMPTY
52528: LIST
52529: LIST
52530: PUSH
52531: LD_INT 1
52533: PUSH
52534: LD_INT 1
52536: NEG
52537: PUSH
52538: EMPTY
52539: LIST
52540: LIST
52541: PUSH
52542: LD_INT 2
52544: PUSH
52545: LD_INT 0
52547: PUSH
52548: EMPTY
52549: LIST
52550: LIST
52551: PUSH
52552: LD_INT 2
52554: PUSH
52555: LD_INT 1
52557: PUSH
52558: EMPTY
52559: LIST
52560: LIST
52561: PUSH
52562: LD_INT 2
52564: PUSH
52565: LD_INT 2
52567: PUSH
52568: EMPTY
52569: LIST
52570: LIST
52571: PUSH
52572: LD_INT 1
52574: PUSH
52575: LD_INT 2
52577: PUSH
52578: EMPTY
52579: LIST
52580: LIST
52581: PUSH
52582: LD_INT 0
52584: PUSH
52585: LD_INT 2
52587: PUSH
52588: EMPTY
52589: LIST
52590: LIST
52591: PUSH
52592: LD_INT 1
52594: NEG
52595: PUSH
52596: LD_INT 1
52598: PUSH
52599: EMPTY
52600: LIST
52601: LIST
52602: PUSH
52603: LD_INT 2
52605: NEG
52606: PUSH
52607: LD_INT 1
52609: NEG
52610: PUSH
52611: EMPTY
52612: LIST
52613: LIST
52614: PUSH
52615: LD_INT 2
52617: NEG
52618: PUSH
52619: LD_INT 2
52621: NEG
52622: PUSH
52623: EMPTY
52624: LIST
52625: LIST
52626: PUSH
52627: LD_INT 2
52629: NEG
52630: PUSH
52631: LD_INT 3
52633: NEG
52634: PUSH
52635: EMPTY
52636: LIST
52637: LIST
52638: PUSH
52639: LD_INT 2
52641: PUSH
52642: LD_INT 1
52644: NEG
52645: PUSH
52646: EMPTY
52647: LIST
52648: LIST
52649: PUSH
52650: LD_INT 3
52652: PUSH
52653: LD_INT 1
52655: PUSH
52656: EMPTY
52657: LIST
52658: LIST
52659: PUSH
52660: LD_INT 1
52662: PUSH
52663: LD_INT 3
52665: PUSH
52666: EMPTY
52667: LIST
52668: LIST
52669: PUSH
52670: LD_INT 1
52672: NEG
52673: PUSH
52674: LD_INT 2
52676: PUSH
52677: EMPTY
52678: LIST
52679: LIST
52680: PUSH
52681: LD_INT 3
52683: NEG
52684: PUSH
52685: LD_INT 2
52687: NEG
52688: PUSH
52689: EMPTY
52690: LIST
52691: LIST
52692: PUSH
52693: EMPTY
52694: LIST
52695: LIST
52696: LIST
52697: LIST
52698: LIST
52699: LIST
52700: LIST
52701: LIST
52702: LIST
52703: LIST
52704: LIST
52705: LIST
52706: LIST
52707: LIST
52708: LIST
52709: LIST
52710: LIST
52711: LIST
52712: LIST
52713: LIST
52714: LIST
52715: LIST
52716: LIST
52717: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52718: LD_ADDR_VAR 0 32
52722: PUSH
52723: LD_INT 0
52725: PUSH
52726: LD_INT 0
52728: PUSH
52729: EMPTY
52730: LIST
52731: LIST
52732: PUSH
52733: LD_INT 0
52735: PUSH
52736: LD_INT 1
52738: NEG
52739: PUSH
52740: EMPTY
52741: LIST
52742: LIST
52743: PUSH
52744: LD_INT 1
52746: PUSH
52747: LD_INT 0
52749: PUSH
52750: EMPTY
52751: LIST
52752: LIST
52753: PUSH
52754: LD_INT 1
52756: PUSH
52757: LD_INT 1
52759: PUSH
52760: EMPTY
52761: LIST
52762: LIST
52763: PUSH
52764: LD_INT 0
52766: PUSH
52767: LD_INT 1
52769: PUSH
52770: EMPTY
52771: LIST
52772: LIST
52773: PUSH
52774: LD_INT 1
52776: NEG
52777: PUSH
52778: LD_INT 0
52780: PUSH
52781: EMPTY
52782: LIST
52783: LIST
52784: PUSH
52785: LD_INT 1
52787: NEG
52788: PUSH
52789: LD_INT 1
52791: NEG
52792: PUSH
52793: EMPTY
52794: LIST
52795: LIST
52796: PUSH
52797: LD_INT 1
52799: NEG
52800: PUSH
52801: LD_INT 2
52803: NEG
52804: PUSH
52805: EMPTY
52806: LIST
52807: LIST
52808: PUSH
52809: LD_INT 0
52811: PUSH
52812: LD_INT 2
52814: NEG
52815: PUSH
52816: EMPTY
52817: LIST
52818: LIST
52819: PUSH
52820: LD_INT 1
52822: PUSH
52823: LD_INT 1
52825: NEG
52826: PUSH
52827: EMPTY
52828: LIST
52829: LIST
52830: PUSH
52831: LD_INT 2
52833: PUSH
52834: LD_INT 1
52836: PUSH
52837: EMPTY
52838: LIST
52839: LIST
52840: PUSH
52841: LD_INT 2
52843: PUSH
52844: LD_INT 2
52846: PUSH
52847: EMPTY
52848: LIST
52849: LIST
52850: PUSH
52851: LD_INT 1
52853: PUSH
52854: LD_INT 2
52856: PUSH
52857: EMPTY
52858: LIST
52859: LIST
52860: PUSH
52861: LD_INT 0
52863: PUSH
52864: LD_INT 2
52866: PUSH
52867: EMPTY
52868: LIST
52869: LIST
52870: PUSH
52871: LD_INT 1
52873: NEG
52874: PUSH
52875: LD_INT 1
52877: PUSH
52878: EMPTY
52879: LIST
52880: LIST
52881: PUSH
52882: LD_INT 2
52884: NEG
52885: PUSH
52886: LD_INT 0
52888: PUSH
52889: EMPTY
52890: LIST
52891: LIST
52892: PUSH
52893: LD_INT 2
52895: NEG
52896: PUSH
52897: LD_INT 1
52899: NEG
52900: PUSH
52901: EMPTY
52902: LIST
52903: LIST
52904: PUSH
52905: LD_INT 1
52907: NEG
52908: PUSH
52909: LD_INT 3
52911: NEG
52912: PUSH
52913: EMPTY
52914: LIST
52915: LIST
52916: PUSH
52917: LD_INT 1
52919: PUSH
52920: LD_INT 2
52922: NEG
52923: PUSH
52924: EMPTY
52925: LIST
52926: LIST
52927: PUSH
52928: LD_INT 3
52930: PUSH
52931: LD_INT 2
52933: PUSH
52934: EMPTY
52935: LIST
52936: LIST
52937: PUSH
52938: LD_INT 2
52940: PUSH
52941: LD_INT 3
52943: PUSH
52944: EMPTY
52945: LIST
52946: LIST
52947: PUSH
52948: LD_INT 2
52950: NEG
52951: PUSH
52952: LD_INT 1
52954: PUSH
52955: EMPTY
52956: LIST
52957: LIST
52958: PUSH
52959: LD_INT 3
52961: NEG
52962: PUSH
52963: LD_INT 1
52965: NEG
52966: PUSH
52967: EMPTY
52968: LIST
52969: LIST
52970: PUSH
52971: EMPTY
52972: LIST
52973: LIST
52974: LIST
52975: LIST
52976: LIST
52977: LIST
52978: LIST
52979: LIST
52980: LIST
52981: LIST
52982: LIST
52983: LIST
52984: LIST
52985: LIST
52986: LIST
52987: LIST
52988: LIST
52989: LIST
52990: LIST
52991: LIST
52992: LIST
52993: LIST
52994: LIST
52995: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
52996: LD_ADDR_VAR 0 33
53000: PUSH
53001: LD_INT 0
53003: PUSH
53004: LD_INT 0
53006: PUSH
53007: EMPTY
53008: LIST
53009: LIST
53010: PUSH
53011: LD_INT 0
53013: PUSH
53014: LD_INT 1
53016: NEG
53017: PUSH
53018: EMPTY
53019: LIST
53020: LIST
53021: PUSH
53022: LD_INT 1
53024: PUSH
53025: LD_INT 0
53027: PUSH
53028: EMPTY
53029: LIST
53030: LIST
53031: PUSH
53032: LD_INT 1
53034: PUSH
53035: LD_INT 1
53037: PUSH
53038: EMPTY
53039: LIST
53040: LIST
53041: PUSH
53042: LD_INT 0
53044: PUSH
53045: LD_INT 1
53047: PUSH
53048: EMPTY
53049: LIST
53050: LIST
53051: PUSH
53052: LD_INT 1
53054: NEG
53055: PUSH
53056: LD_INT 0
53058: PUSH
53059: EMPTY
53060: LIST
53061: LIST
53062: PUSH
53063: LD_INT 1
53065: NEG
53066: PUSH
53067: LD_INT 1
53069: NEG
53070: PUSH
53071: EMPTY
53072: LIST
53073: LIST
53074: PUSH
53075: LD_INT 1
53077: NEG
53078: PUSH
53079: LD_INT 2
53081: NEG
53082: PUSH
53083: EMPTY
53084: LIST
53085: LIST
53086: PUSH
53087: LD_INT 1
53089: PUSH
53090: LD_INT 1
53092: NEG
53093: PUSH
53094: EMPTY
53095: LIST
53096: LIST
53097: PUSH
53098: LD_INT 2
53100: PUSH
53101: LD_INT 0
53103: PUSH
53104: EMPTY
53105: LIST
53106: LIST
53107: PUSH
53108: LD_INT 2
53110: PUSH
53111: LD_INT 1
53113: PUSH
53114: EMPTY
53115: LIST
53116: LIST
53117: PUSH
53118: LD_INT 1
53120: PUSH
53121: LD_INT 2
53123: PUSH
53124: EMPTY
53125: LIST
53126: LIST
53127: PUSH
53128: LD_INT 0
53130: PUSH
53131: LD_INT 2
53133: PUSH
53134: EMPTY
53135: LIST
53136: LIST
53137: PUSH
53138: LD_INT 1
53140: NEG
53141: PUSH
53142: LD_INT 1
53144: PUSH
53145: EMPTY
53146: LIST
53147: LIST
53148: PUSH
53149: LD_INT 2
53151: NEG
53152: PUSH
53153: LD_INT 0
53155: PUSH
53156: EMPTY
53157: LIST
53158: LIST
53159: PUSH
53160: LD_INT 2
53162: NEG
53163: PUSH
53164: LD_INT 1
53166: NEG
53167: PUSH
53168: EMPTY
53169: LIST
53170: LIST
53171: PUSH
53172: LD_INT 2
53174: NEG
53175: PUSH
53176: LD_INT 2
53178: NEG
53179: PUSH
53180: EMPTY
53181: LIST
53182: LIST
53183: PUSH
53184: LD_INT 2
53186: NEG
53187: PUSH
53188: LD_INT 3
53190: NEG
53191: PUSH
53192: EMPTY
53193: LIST
53194: LIST
53195: PUSH
53196: LD_INT 2
53198: PUSH
53199: LD_INT 1
53201: NEG
53202: PUSH
53203: EMPTY
53204: LIST
53205: LIST
53206: PUSH
53207: LD_INT 3
53209: PUSH
53210: LD_INT 1
53212: PUSH
53213: EMPTY
53214: LIST
53215: LIST
53216: PUSH
53217: LD_INT 1
53219: PUSH
53220: LD_INT 3
53222: PUSH
53223: EMPTY
53224: LIST
53225: LIST
53226: PUSH
53227: LD_INT 1
53229: NEG
53230: PUSH
53231: LD_INT 2
53233: PUSH
53234: EMPTY
53235: LIST
53236: LIST
53237: PUSH
53238: LD_INT 3
53240: NEG
53241: PUSH
53242: LD_INT 2
53244: NEG
53245: PUSH
53246: EMPTY
53247: LIST
53248: LIST
53249: PUSH
53250: EMPTY
53251: LIST
53252: LIST
53253: LIST
53254: LIST
53255: LIST
53256: LIST
53257: LIST
53258: LIST
53259: LIST
53260: LIST
53261: LIST
53262: LIST
53263: LIST
53264: LIST
53265: LIST
53266: LIST
53267: LIST
53268: LIST
53269: LIST
53270: LIST
53271: LIST
53272: LIST
53273: LIST
53274: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53275: LD_ADDR_VAR 0 34
53279: PUSH
53280: LD_INT 0
53282: PUSH
53283: LD_INT 0
53285: PUSH
53286: EMPTY
53287: LIST
53288: LIST
53289: PUSH
53290: LD_INT 0
53292: PUSH
53293: LD_INT 1
53295: NEG
53296: PUSH
53297: EMPTY
53298: LIST
53299: LIST
53300: PUSH
53301: LD_INT 1
53303: PUSH
53304: LD_INT 0
53306: PUSH
53307: EMPTY
53308: LIST
53309: LIST
53310: PUSH
53311: LD_INT 1
53313: PUSH
53314: LD_INT 1
53316: PUSH
53317: EMPTY
53318: LIST
53319: LIST
53320: PUSH
53321: LD_INT 0
53323: PUSH
53324: LD_INT 1
53326: PUSH
53327: EMPTY
53328: LIST
53329: LIST
53330: PUSH
53331: LD_INT 1
53333: NEG
53334: PUSH
53335: LD_INT 0
53337: PUSH
53338: EMPTY
53339: LIST
53340: LIST
53341: PUSH
53342: LD_INT 1
53344: NEG
53345: PUSH
53346: LD_INT 1
53348: NEG
53349: PUSH
53350: EMPTY
53351: LIST
53352: LIST
53353: PUSH
53354: LD_INT 1
53356: NEG
53357: PUSH
53358: LD_INT 2
53360: NEG
53361: PUSH
53362: EMPTY
53363: LIST
53364: LIST
53365: PUSH
53366: LD_INT 0
53368: PUSH
53369: LD_INT 2
53371: NEG
53372: PUSH
53373: EMPTY
53374: LIST
53375: LIST
53376: PUSH
53377: LD_INT 1
53379: PUSH
53380: LD_INT 1
53382: NEG
53383: PUSH
53384: EMPTY
53385: LIST
53386: LIST
53387: PUSH
53388: LD_INT 2
53390: PUSH
53391: LD_INT 1
53393: PUSH
53394: EMPTY
53395: LIST
53396: LIST
53397: PUSH
53398: LD_INT 2
53400: PUSH
53401: LD_INT 2
53403: PUSH
53404: EMPTY
53405: LIST
53406: LIST
53407: PUSH
53408: LD_INT 1
53410: PUSH
53411: LD_INT 2
53413: PUSH
53414: EMPTY
53415: LIST
53416: LIST
53417: PUSH
53418: LD_INT 1
53420: NEG
53421: PUSH
53422: LD_INT 1
53424: PUSH
53425: EMPTY
53426: LIST
53427: LIST
53428: PUSH
53429: LD_INT 2
53431: NEG
53432: PUSH
53433: LD_INT 0
53435: PUSH
53436: EMPTY
53437: LIST
53438: LIST
53439: PUSH
53440: LD_INT 2
53442: NEG
53443: PUSH
53444: LD_INT 1
53446: NEG
53447: PUSH
53448: EMPTY
53449: LIST
53450: LIST
53451: PUSH
53452: LD_INT 2
53454: NEG
53455: PUSH
53456: LD_INT 2
53458: NEG
53459: PUSH
53460: EMPTY
53461: LIST
53462: LIST
53463: PUSH
53464: LD_INT 1
53466: NEG
53467: PUSH
53468: LD_INT 3
53470: NEG
53471: PUSH
53472: EMPTY
53473: LIST
53474: LIST
53475: PUSH
53476: LD_INT 1
53478: PUSH
53479: LD_INT 2
53481: NEG
53482: PUSH
53483: EMPTY
53484: LIST
53485: LIST
53486: PUSH
53487: LD_INT 3
53489: PUSH
53490: LD_INT 2
53492: PUSH
53493: EMPTY
53494: LIST
53495: LIST
53496: PUSH
53497: LD_INT 2
53499: PUSH
53500: LD_INT 3
53502: PUSH
53503: EMPTY
53504: LIST
53505: LIST
53506: PUSH
53507: LD_INT 2
53509: NEG
53510: PUSH
53511: LD_INT 1
53513: PUSH
53514: EMPTY
53515: LIST
53516: LIST
53517: PUSH
53518: LD_INT 3
53520: NEG
53521: PUSH
53522: LD_INT 1
53524: NEG
53525: PUSH
53526: EMPTY
53527: LIST
53528: LIST
53529: PUSH
53530: EMPTY
53531: LIST
53532: LIST
53533: LIST
53534: LIST
53535: LIST
53536: LIST
53537: LIST
53538: LIST
53539: LIST
53540: LIST
53541: LIST
53542: LIST
53543: LIST
53544: LIST
53545: LIST
53546: LIST
53547: LIST
53548: LIST
53549: LIST
53550: LIST
53551: LIST
53552: LIST
53553: LIST
53554: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
53555: LD_ADDR_VAR 0 35
53559: PUSH
53560: LD_INT 0
53562: PUSH
53563: LD_INT 0
53565: PUSH
53566: EMPTY
53567: LIST
53568: LIST
53569: PUSH
53570: LD_INT 0
53572: PUSH
53573: LD_INT 1
53575: NEG
53576: PUSH
53577: EMPTY
53578: LIST
53579: LIST
53580: PUSH
53581: LD_INT 1
53583: PUSH
53584: LD_INT 0
53586: PUSH
53587: EMPTY
53588: LIST
53589: LIST
53590: PUSH
53591: LD_INT 1
53593: PUSH
53594: LD_INT 1
53596: PUSH
53597: EMPTY
53598: LIST
53599: LIST
53600: PUSH
53601: LD_INT 0
53603: PUSH
53604: LD_INT 1
53606: PUSH
53607: EMPTY
53608: LIST
53609: LIST
53610: PUSH
53611: LD_INT 1
53613: NEG
53614: PUSH
53615: LD_INT 0
53617: PUSH
53618: EMPTY
53619: LIST
53620: LIST
53621: PUSH
53622: LD_INT 1
53624: NEG
53625: PUSH
53626: LD_INT 1
53628: NEG
53629: PUSH
53630: EMPTY
53631: LIST
53632: LIST
53633: PUSH
53634: LD_INT 2
53636: PUSH
53637: LD_INT 1
53639: PUSH
53640: EMPTY
53641: LIST
53642: LIST
53643: PUSH
53644: LD_INT 2
53646: NEG
53647: PUSH
53648: LD_INT 1
53650: NEG
53651: PUSH
53652: EMPTY
53653: LIST
53654: LIST
53655: PUSH
53656: EMPTY
53657: LIST
53658: LIST
53659: LIST
53660: LIST
53661: LIST
53662: LIST
53663: LIST
53664: LIST
53665: LIST
53666: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
53667: LD_ADDR_VAR 0 36
53671: PUSH
53672: LD_INT 0
53674: PUSH
53675: LD_INT 0
53677: PUSH
53678: EMPTY
53679: LIST
53680: LIST
53681: PUSH
53682: LD_INT 0
53684: PUSH
53685: LD_INT 1
53687: NEG
53688: PUSH
53689: EMPTY
53690: LIST
53691: LIST
53692: PUSH
53693: LD_INT 1
53695: PUSH
53696: LD_INT 0
53698: PUSH
53699: EMPTY
53700: LIST
53701: LIST
53702: PUSH
53703: LD_INT 1
53705: PUSH
53706: LD_INT 1
53708: PUSH
53709: EMPTY
53710: LIST
53711: LIST
53712: PUSH
53713: LD_INT 0
53715: PUSH
53716: LD_INT 1
53718: PUSH
53719: EMPTY
53720: LIST
53721: LIST
53722: PUSH
53723: LD_INT 1
53725: NEG
53726: PUSH
53727: LD_INT 0
53729: PUSH
53730: EMPTY
53731: LIST
53732: LIST
53733: PUSH
53734: LD_INT 1
53736: NEG
53737: PUSH
53738: LD_INT 1
53740: NEG
53741: PUSH
53742: EMPTY
53743: LIST
53744: LIST
53745: PUSH
53746: LD_INT 1
53748: NEG
53749: PUSH
53750: LD_INT 2
53752: NEG
53753: PUSH
53754: EMPTY
53755: LIST
53756: LIST
53757: PUSH
53758: LD_INT 1
53760: PUSH
53761: LD_INT 2
53763: PUSH
53764: EMPTY
53765: LIST
53766: LIST
53767: PUSH
53768: EMPTY
53769: LIST
53770: LIST
53771: LIST
53772: LIST
53773: LIST
53774: LIST
53775: LIST
53776: LIST
53777: LIST
53778: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
53779: LD_ADDR_VAR 0 37
53783: PUSH
53784: LD_INT 0
53786: PUSH
53787: LD_INT 0
53789: PUSH
53790: EMPTY
53791: LIST
53792: LIST
53793: PUSH
53794: LD_INT 0
53796: PUSH
53797: LD_INT 1
53799: NEG
53800: PUSH
53801: EMPTY
53802: LIST
53803: LIST
53804: PUSH
53805: LD_INT 1
53807: PUSH
53808: LD_INT 0
53810: PUSH
53811: EMPTY
53812: LIST
53813: LIST
53814: PUSH
53815: LD_INT 1
53817: PUSH
53818: LD_INT 1
53820: PUSH
53821: EMPTY
53822: LIST
53823: LIST
53824: PUSH
53825: LD_INT 0
53827: PUSH
53828: LD_INT 1
53830: PUSH
53831: EMPTY
53832: LIST
53833: LIST
53834: PUSH
53835: LD_INT 1
53837: NEG
53838: PUSH
53839: LD_INT 0
53841: PUSH
53842: EMPTY
53843: LIST
53844: LIST
53845: PUSH
53846: LD_INT 1
53848: NEG
53849: PUSH
53850: LD_INT 1
53852: NEG
53853: PUSH
53854: EMPTY
53855: LIST
53856: LIST
53857: PUSH
53858: LD_INT 1
53860: PUSH
53861: LD_INT 1
53863: NEG
53864: PUSH
53865: EMPTY
53866: LIST
53867: LIST
53868: PUSH
53869: LD_INT 1
53871: NEG
53872: PUSH
53873: LD_INT 1
53875: PUSH
53876: EMPTY
53877: LIST
53878: LIST
53879: PUSH
53880: EMPTY
53881: LIST
53882: LIST
53883: LIST
53884: LIST
53885: LIST
53886: LIST
53887: LIST
53888: LIST
53889: LIST
53890: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
53891: LD_ADDR_VAR 0 38
53895: PUSH
53896: LD_INT 0
53898: PUSH
53899: LD_INT 0
53901: PUSH
53902: EMPTY
53903: LIST
53904: LIST
53905: PUSH
53906: LD_INT 0
53908: PUSH
53909: LD_INT 1
53911: NEG
53912: PUSH
53913: EMPTY
53914: LIST
53915: LIST
53916: PUSH
53917: LD_INT 1
53919: PUSH
53920: LD_INT 0
53922: PUSH
53923: EMPTY
53924: LIST
53925: LIST
53926: PUSH
53927: LD_INT 1
53929: PUSH
53930: LD_INT 1
53932: PUSH
53933: EMPTY
53934: LIST
53935: LIST
53936: PUSH
53937: LD_INT 0
53939: PUSH
53940: LD_INT 1
53942: PUSH
53943: EMPTY
53944: LIST
53945: LIST
53946: PUSH
53947: LD_INT 1
53949: NEG
53950: PUSH
53951: LD_INT 0
53953: PUSH
53954: EMPTY
53955: LIST
53956: LIST
53957: PUSH
53958: LD_INT 1
53960: NEG
53961: PUSH
53962: LD_INT 1
53964: NEG
53965: PUSH
53966: EMPTY
53967: LIST
53968: LIST
53969: PUSH
53970: LD_INT 2
53972: PUSH
53973: LD_INT 1
53975: PUSH
53976: EMPTY
53977: LIST
53978: LIST
53979: PUSH
53980: LD_INT 2
53982: NEG
53983: PUSH
53984: LD_INT 1
53986: NEG
53987: PUSH
53988: EMPTY
53989: LIST
53990: LIST
53991: PUSH
53992: EMPTY
53993: LIST
53994: LIST
53995: LIST
53996: LIST
53997: LIST
53998: LIST
53999: LIST
54000: LIST
54001: LIST
54002: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
54003: LD_ADDR_VAR 0 39
54007: PUSH
54008: LD_INT 0
54010: PUSH
54011: LD_INT 0
54013: PUSH
54014: EMPTY
54015: LIST
54016: LIST
54017: PUSH
54018: LD_INT 0
54020: PUSH
54021: LD_INT 1
54023: NEG
54024: PUSH
54025: EMPTY
54026: LIST
54027: LIST
54028: PUSH
54029: LD_INT 1
54031: PUSH
54032: LD_INT 0
54034: PUSH
54035: EMPTY
54036: LIST
54037: LIST
54038: PUSH
54039: LD_INT 1
54041: PUSH
54042: LD_INT 1
54044: PUSH
54045: EMPTY
54046: LIST
54047: LIST
54048: PUSH
54049: LD_INT 0
54051: PUSH
54052: LD_INT 1
54054: PUSH
54055: EMPTY
54056: LIST
54057: LIST
54058: PUSH
54059: LD_INT 1
54061: NEG
54062: PUSH
54063: LD_INT 0
54065: PUSH
54066: EMPTY
54067: LIST
54068: LIST
54069: PUSH
54070: LD_INT 1
54072: NEG
54073: PUSH
54074: LD_INT 1
54076: NEG
54077: PUSH
54078: EMPTY
54079: LIST
54080: LIST
54081: PUSH
54082: LD_INT 1
54084: NEG
54085: PUSH
54086: LD_INT 2
54088: NEG
54089: PUSH
54090: EMPTY
54091: LIST
54092: LIST
54093: PUSH
54094: LD_INT 1
54096: PUSH
54097: LD_INT 2
54099: PUSH
54100: EMPTY
54101: LIST
54102: LIST
54103: PUSH
54104: EMPTY
54105: LIST
54106: LIST
54107: LIST
54108: LIST
54109: LIST
54110: LIST
54111: LIST
54112: LIST
54113: LIST
54114: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
54115: LD_ADDR_VAR 0 40
54119: PUSH
54120: LD_INT 0
54122: PUSH
54123: LD_INT 0
54125: PUSH
54126: EMPTY
54127: LIST
54128: LIST
54129: PUSH
54130: LD_INT 0
54132: PUSH
54133: LD_INT 1
54135: NEG
54136: PUSH
54137: EMPTY
54138: LIST
54139: LIST
54140: PUSH
54141: LD_INT 1
54143: PUSH
54144: LD_INT 0
54146: PUSH
54147: EMPTY
54148: LIST
54149: LIST
54150: PUSH
54151: LD_INT 1
54153: PUSH
54154: LD_INT 1
54156: PUSH
54157: EMPTY
54158: LIST
54159: LIST
54160: PUSH
54161: LD_INT 0
54163: PUSH
54164: LD_INT 1
54166: PUSH
54167: EMPTY
54168: LIST
54169: LIST
54170: PUSH
54171: LD_INT 1
54173: NEG
54174: PUSH
54175: LD_INT 0
54177: PUSH
54178: EMPTY
54179: LIST
54180: LIST
54181: PUSH
54182: LD_INT 1
54184: NEG
54185: PUSH
54186: LD_INT 1
54188: NEG
54189: PUSH
54190: EMPTY
54191: LIST
54192: LIST
54193: PUSH
54194: LD_INT 1
54196: PUSH
54197: LD_INT 1
54199: NEG
54200: PUSH
54201: EMPTY
54202: LIST
54203: LIST
54204: PUSH
54205: LD_INT 1
54207: NEG
54208: PUSH
54209: LD_INT 1
54211: PUSH
54212: EMPTY
54213: LIST
54214: LIST
54215: PUSH
54216: EMPTY
54217: LIST
54218: LIST
54219: LIST
54220: LIST
54221: LIST
54222: LIST
54223: LIST
54224: LIST
54225: LIST
54226: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54227: LD_ADDR_VAR 0 41
54231: PUSH
54232: LD_INT 0
54234: PUSH
54235: LD_INT 0
54237: PUSH
54238: EMPTY
54239: LIST
54240: LIST
54241: PUSH
54242: LD_INT 0
54244: PUSH
54245: LD_INT 1
54247: NEG
54248: PUSH
54249: EMPTY
54250: LIST
54251: LIST
54252: PUSH
54253: LD_INT 1
54255: PUSH
54256: LD_INT 0
54258: PUSH
54259: EMPTY
54260: LIST
54261: LIST
54262: PUSH
54263: LD_INT 1
54265: PUSH
54266: LD_INT 1
54268: PUSH
54269: EMPTY
54270: LIST
54271: LIST
54272: PUSH
54273: LD_INT 0
54275: PUSH
54276: LD_INT 1
54278: PUSH
54279: EMPTY
54280: LIST
54281: LIST
54282: PUSH
54283: LD_INT 1
54285: NEG
54286: PUSH
54287: LD_INT 0
54289: PUSH
54290: EMPTY
54291: LIST
54292: LIST
54293: PUSH
54294: LD_INT 1
54296: NEG
54297: PUSH
54298: LD_INT 1
54300: NEG
54301: PUSH
54302: EMPTY
54303: LIST
54304: LIST
54305: PUSH
54306: LD_INT 1
54308: NEG
54309: PUSH
54310: LD_INT 2
54312: NEG
54313: PUSH
54314: EMPTY
54315: LIST
54316: LIST
54317: PUSH
54318: LD_INT 1
54320: PUSH
54321: LD_INT 1
54323: NEG
54324: PUSH
54325: EMPTY
54326: LIST
54327: LIST
54328: PUSH
54329: LD_INT 2
54331: PUSH
54332: LD_INT 0
54334: PUSH
54335: EMPTY
54336: LIST
54337: LIST
54338: PUSH
54339: LD_INT 2
54341: PUSH
54342: LD_INT 1
54344: PUSH
54345: EMPTY
54346: LIST
54347: LIST
54348: PUSH
54349: LD_INT 2
54351: PUSH
54352: LD_INT 2
54354: PUSH
54355: EMPTY
54356: LIST
54357: LIST
54358: PUSH
54359: LD_INT 1
54361: PUSH
54362: LD_INT 2
54364: PUSH
54365: EMPTY
54366: LIST
54367: LIST
54368: PUSH
54369: LD_INT 1
54371: NEG
54372: PUSH
54373: LD_INT 1
54375: PUSH
54376: EMPTY
54377: LIST
54378: LIST
54379: PUSH
54380: LD_INT 2
54382: NEG
54383: PUSH
54384: LD_INT 0
54386: PUSH
54387: EMPTY
54388: LIST
54389: LIST
54390: PUSH
54391: LD_INT 2
54393: NEG
54394: PUSH
54395: LD_INT 1
54397: NEG
54398: PUSH
54399: EMPTY
54400: LIST
54401: LIST
54402: PUSH
54403: LD_INT 2
54405: NEG
54406: PUSH
54407: LD_INT 2
54409: NEG
54410: PUSH
54411: EMPTY
54412: LIST
54413: LIST
54414: PUSH
54415: LD_INT 2
54417: NEG
54418: PUSH
54419: LD_INT 3
54421: NEG
54422: PUSH
54423: EMPTY
54424: LIST
54425: LIST
54426: PUSH
54427: LD_INT 2
54429: PUSH
54430: LD_INT 1
54432: NEG
54433: PUSH
54434: EMPTY
54435: LIST
54436: LIST
54437: PUSH
54438: LD_INT 3
54440: PUSH
54441: LD_INT 0
54443: PUSH
54444: EMPTY
54445: LIST
54446: LIST
54447: PUSH
54448: LD_INT 3
54450: PUSH
54451: LD_INT 1
54453: PUSH
54454: EMPTY
54455: LIST
54456: LIST
54457: PUSH
54458: LD_INT 3
54460: PUSH
54461: LD_INT 2
54463: PUSH
54464: EMPTY
54465: LIST
54466: LIST
54467: PUSH
54468: LD_INT 3
54470: PUSH
54471: LD_INT 3
54473: PUSH
54474: EMPTY
54475: LIST
54476: LIST
54477: PUSH
54478: LD_INT 2
54480: PUSH
54481: LD_INT 3
54483: PUSH
54484: EMPTY
54485: LIST
54486: LIST
54487: PUSH
54488: LD_INT 2
54490: NEG
54491: PUSH
54492: LD_INT 1
54494: PUSH
54495: EMPTY
54496: LIST
54497: LIST
54498: PUSH
54499: LD_INT 3
54501: NEG
54502: PUSH
54503: LD_INT 0
54505: PUSH
54506: EMPTY
54507: LIST
54508: LIST
54509: PUSH
54510: LD_INT 3
54512: NEG
54513: PUSH
54514: LD_INT 1
54516: NEG
54517: PUSH
54518: EMPTY
54519: LIST
54520: LIST
54521: PUSH
54522: LD_INT 3
54524: NEG
54525: PUSH
54526: LD_INT 2
54528: NEG
54529: PUSH
54530: EMPTY
54531: LIST
54532: LIST
54533: PUSH
54534: LD_INT 3
54536: NEG
54537: PUSH
54538: LD_INT 3
54540: NEG
54541: PUSH
54542: EMPTY
54543: LIST
54544: LIST
54545: PUSH
54546: EMPTY
54547: LIST
54548: LIST
54549: LIST
54550: LIST
54551: LIST
54552: LIST
54553: LIST
54554: LIST
54555: LIST
54556: LIST
54557: LIST
54558: LIST
54559: LIST
54560: LIST
54561: LIST
54562: LIST
54563: LIST
54564: LIST
54565: LIST
54566: LIST
54567: LIST
54568: LIST
54569: LIST
54570: LIST
54571: LIST
54572: LIST
54573: LIST
54574: LIST
54575: LIST
54576: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54577: LD_ADDR_VAR 0 42
54581: PUSH
54582: LD_INT 0
54584: PUSH
54585: LD_INT 0
54587: PUSH
54588: EMPTY
54589: LIST
54590: LIST
54591: PUSH
54592: LD_INT 0
54594: PUSH
54595: LD_INT 1
54597: NEG
54598: PUSH
54599: EMPTY
54600: LIST
54601: LIST
54602: PUSH
54603: LD_INT 1
54605: PUSH
54606: LD_INT 0
54608: PUSH
54609: EMPTY
54610: LIST
54611: LIST
54612: PUSH
54613: LD_INT 1
54615: PUSH
54616: LD_INT 1
54618: PUSH
54619: EMPTY
54620: LIST
54621: LIST
54622: PUSH
54623: LD_INT 0
54625: PUSH
54626: LD_INT 1
54628: PUSH
54629: EMPTY
54630: LIST
54631: LIST
54632: PUSH
54633: LD_INT 1
54635: NEG
54636: PUSH
54637: LD_INT 0
54639: PUSH
54640: EMPTY
54641: LIST
54642: LIST
54643: PUSH
54644: LD_INT 1
54646: NEG
54647: PUSH
54648: LD_INT 1
54650: NEG
54651: PUSH
54652: EMPTY
54653: LIST
54654: LIST
54655: PUSH
54656: LD_INT 1
54658: NEG
54659: PUSH
54660: LD_INT 2
54662: NEG
54663: PUSH
54664: EMPTY
54665: LIST
54666: LIST
54667: PUSH
54668: LD_INT 0
54670: PUSH
54671: LD_INT 2
54673: NEG
54674: PUSH
54675: EMPTY
54676: LIST
54677: LIST
54678: PUSH
54679: LD_INT 1
54681: PUSH
54682: LD_INT 1
54684: NEG
54685: PUSH
54686: EMPTY
54687: LIST
54688: LIST
54689: PUSH
54690: LD_INT 2
54692: PUSH
54693: LD_INT 1
54695: PUSH
54696: EMPTY
54697: LIST
54698: LIST
54699: PUSH
54700: LD_INT 2
54702: PUSH
54703: LD_INT 2
54705: PUSH
54706: EMPTY
54707: LIST
54708: LIST
54709: PUSH
54710: LD_INT 1
54712: PUSH
54713: LD_INT 2
54715: PUSH
54716: EMPTY
54717: LIST
54718: LIST
54719: PUSH
54720: LD_INT 0
54722: PUSH
54723: LD_INT 2
54725: PUSH
54726: EMPTY
54727: LIST
54728: LIST
54729: PUSH
54730: LD_INT 1
54732: NEG
54733: PUSH
54734: LD_INT 1
54736: PUSH
54737: EMPTY
54738: LIST
54739: LIST
54740: PUSH
54741: LD_INT 2
54743: NEG
54744: PUSH
54745: LD_INT 1
54747: NEG
54748: PUSH
54749: EMPTY
54750: LIST
54751: LIST
54752: PUSH
54753: LD_INT 2
54755: NEG
54756: PUSH
54757: LD_INT 2
54759: NEG
54760: PUSH
54761: EMPTY
54762: LIST
54763: LIST
54764: PUSH
54765: LD_INT 2
54767: NEG
54768: PUSH
54769: LD_INT 3
54771: NEG
54772: PUSH
54773: EMPTY
54774: LIST
54775: LIST
54776: PUSH
54777: LD_INT 1
54779: NEG
54780: PUSH
54781: LD_INT 3
54783: NEG
54784: PUSH
54785: EMPTY
54786: LIST
54787: LIST
54788: PUSH
54789: LD_INT 0
54791: PUSH
54792: LD_INT 3
54794: NEG
54795: PUSH
54796: EMPTY
54797: LIST
54798: LIST
54799: PUSH
54800: LD_INT 1
54802: PUSH
54803: LD_INT 2
54805: NEG
54806: PUSH
54807: EMPTY
54808: LIST
54809: LIST
54810: PUSH
54811: LD_INT 3
54813: PUSH
54814: LD_INT 2
54816: PUSH
54817: EMPTY
54818: LIST
54819: LIST
54820: PUSH
54821: LD_INT 3
54823: PUSH
54824: LD_INT 3
54826: PUSH
54827: EMPTY
54828: LIST
54829: LIST
54830: PUSH
54831: LD_INT 2
54833: PUSH
54834: LD_INT 3
54836: PUSH
54837: EMPTY
54838: LIST
54839: LIST
54840: PUSH
54841: LD_INT 1
54843: PUSH
54844: LD_INT 3
54846: PUSH
54847: EMPTY
54848: LIST
54849: LIST
54850: PUSH
54851: LD_INT 0
54853: PUSH
54854: LD_INT 3
54856: PUSH
54857: EMPTY
54858: LIST
54859: LIST
54860: PUSH
54861: LD_INT 1
54863: NEG
54864: PUSH
54865: LD_INT 2
54867: PUSH
54868: EMPTY
54869: LIST
54870: LIST
54871: PUSH
54872: LD_INT 3
54874: NEG
54875: PUSH
54876: LD_INT 2
54878: NEG
54879: PUSH
54880: EMPTY
54881: LIST
54882: LIST
54883: PUSH
54884: LD_INT 3
54886: NEG
54887: PUSH
54888: LD_INT 3
54890: NEG
54891: PUSH
54892: EMPTY
54893: LIST
54894: LIST
54895: PUSH
54896: EMPTY
54897: LIST
54898: LIST
54899: LIST
54900: LIST
54901: LIST
54902: LIST
54903: LIST
54904: LIST
54905: LIST
54906: LIST
54907: LIST
54908: LIST
54909: LIST
54910: LIST
54911: LIST
54912: LIST
54913: LIST
54914: LIST
54915: LIST
54916: LIST
54917: LIST
54918: LIST
54919: LIST
54920: LIST
54921: LIST
54922: LIST
54923: LIST
54924: LIST
54925: LIST
54926: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54927: LD_ADDR_VAR 0 43
54931: PUSH
54932: LD_INT 0
54934: PUSH
54935: LD_INT 0
54937: PUSH
54938: EMPTY
54939: LIST
54940: LIST
54941: PUSH
54942: LD_INT 0
54944: PUSH
54945: LD_INT 1
54947: NEG
54948: PUSH
54949: EMPTY
54950: LIST
54951: LIST
54952: PUSH
54953: LD_INT 1
54955: PUSH
54956: LD_INT 0
54958: PUSH
54959: EMPTY
54960: LIST
54961: LIST
54962: PUSH
54963: LD_INT 1
54965: PUSH
54966: LD_INT 1
54968: PUSH
54969: EMPTY
54970: LIST
54971: LIST
54972: PUSH
54973: LD_INT 0
54975: PUSH
54976: LD_INT 1
54978: PUSH
54979: EMPTY
54980: LIST
54981: LIST
54982: PUSH
54983: LD_INT 1
54985: NEG
54986: PUSH
54987: LD_INT 0
54989: PUSH
54990: EMPTY
54991: LIST
54992: LIST
54993: PUSH
54994: LD_INT 1
54996: NEG
54997: PUSH
54998: LD_INT 1
55000: NEG
55001: PUSH
55002: EMPTY
55003: LIST
55004: LIST
55005: PUSH
55006: LD_INT 1
55008: NEG
55009: PUSH
55010: LD_INT 2
55012: NEG
55013: PUSH
55014: EMPTY
55015: LIST
55016: LIST
55017: PUSH
55018: LD_INT 0
55020: PUSH
55021: LD_INT 2
55023: NEG
55024: PUSH
55025: EMPTY
55026: LIST
55027: LIST
55028: PUSH
55029: LD_INT 1
55031: PUSH
55032: LD_INT 1
55034: NEG
55035: PUSH
55036: EMPTY
55037: LIST
55038: LIST
55039: PUSH
55040: LD_INT 2
55042: PUSH
55043: LD_INT 0
55045: PUSH
55046: EMPTY
55047: LIST
55048: LIST
55049: PUSH
55050: LD_INT 2
55052: PUSH
55053: LD_INT 1
55055: PUSH
55056: EMPTY
55057: LIST
55058: LIST
55059: PUSH
55060: LD_INT 1
55062: PUSH
55063: LD_INT 2
55065: PUSH
55066: EMPTY
55067: LIST
55068: LIST
55069: PUSH
55070: LD_INT 0
55072: PUSH
55073: LD_INT 2
55075: PUSH
55076: EMPTY
55077: LIST
55078: LIST
55079: PUSH
55080: LD_INT 1
55082: NEG
55083: PUSH
55084: LD_INT 1
55086: PUSH
55087: EMPTY
55088: LIST
55089: LIST
55090: PUSH
55091: LD_INT 2
55093: NEG
55094: PUSH
55095: LD_INT 0
55097: PUSH
55098: EMPTY
55099: LIST
55100: LIST
55101: PUSH
55102: LD_INT 2
55104: NEG
55105: PUSH
55106: LD_INT 1
55108: NEG
55109: PUSH
55110: EMPTY
55111: LIST
55112: LIST
55113: PUSH
55114: LD_INT 1
55116: NEG
55117: PUSH
55118: LD_INT 3
55120: NEG
55121: PUSH
55122: EMPTY
55123: LIST
55124: LIST
55125: PUSH
55126: LD_INT 0
55128: PUSH
55129: LD_INT 3
55131: NEG
55132: PUSH
55133: EMPTY
55134: LIST
55135: LIST
55136: PUSH
55137: LD_INT 1
55139: PUSH
55140: LD_INT 2
55142: NEG
55143: PUSH
55144: EMPTY
55145: LIST
55146: LIST
55147: PUSH
55148: LD_INT 2
55150: PUSH
55151: LD_INT 1
55153: NEG
55154: PUSH
55155: EMPTY
55156: LIST
55157: LIST
55158: PUSH
55159: LD_INT 3
55161: PUSH
55162: LD_INT 0
55164: PUSH
55165: EMPTY
55166: LIST
55167: LIST
55168: PUSH
55169: LD_INT 3
55171: PUSH
55172: LD_INT 1
55174: PUSH
55175: EMPTY
55176: LIST
55177: LIST
55178: PUSH
55179: LD_INT 1
55181: PUSH
55182: LD_INT 3
55184: PUSH
55185: EMPTY
55186: LIST
55187: LIST
55188: PUSH
55189: LD_INT 0
55191: PUSH
55192: LD_INT 3
55194: PUSH
55195: EMPTY
55196: LIST
55197: LIST
55198: PUSH
55199: LD_INT 1
55201: NEG
55202: PUSH
55203: LD_INT 2
55205: PUSH
55206: EMPTY
55207: LIST
55208: LIST
55209: PUSH
55210: LD_INT 2
55212: NEG
55213: PUSH
55214: LD_INT 1
55216: PUSH
55217: EMPTY
55218: LIST
55219: LIST
55220: PUSH
55221: LD_INT 3
55223: NEG
55224: PUSH
55225: LD_INT 0
55227: PUSH
55228: EMPTY
55229: LIST
55230: LIST
55231: PUSH
55232: LD_INT 3
55234: NEG
55235: PUSH
55236: LD_INT 1
55238: NEG
55239: PUSH
55240: EMPTY
55241: LIST
55242: LIST
55243: PUSH
55244: EMPTY
55245: LIST
55246: LIST
55247: LIST
55248: LIST
55249: LIST
55250: LIST
55251: LIST
55252: LIST
55253: LIST
55254: LIST
55255: LIST
55256: LIST
55257: LIST
55258: LIST
55259: LIST
55260: LIST
55261: LIST
55262: LIST
55263: LIST
55264: LIST
55265: LIST
55266: LIST
55267: LIST
55268: LIST
55269: LIST
55270: LIST
55271: LIST
55272: LIST
55273: LIST
55274: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55275: LD_ADDR_VAR 0 44
55279: PUSH
55280: LD_INT 0
55282: PUSH
55283: LD_INT 0
55285: PUSH
55286: EMPTY
55287: LIST
55288: LIST
55289: PUSH
55290: LD_INT 0
55292: PUSH
55293: LD_INT 1
55295: NEG
55296: PUSH
55297: EMPTY
55298: LIST
55299: LIST
55300: PUSH
55301: LD_INT 1
55303: PUSH
55304: LD_INT 0
55306: PUSH
55307: EMPTY
55308: LIST
55309: LIST
55310: PUSH
55311: LD_INT 1
55313: PUSH
55314: LD_INT 1
55316: PUSH
55317: EMPTY
55318: LIST
55319: LIST
55320: PUSH
55321: LD_INT 0
55323: PUSH
55324: LD_INT 1
55326: PUSH
55327: EMPTY
55328: LIST
55329: LIST
55330: PUSH
55331: LD_INT 1
55333: NEG
55334: PUSH
55335: LD_INT 0
55337: PUSH
55338: EMPTY
55339: LIST
55340: LIST
55341: PUSH
55342: LD_INT 1
55344: NEG
55345: PUSH
55346: LD_INT 1
55348: NEG
55349: PUSH
55350: EMPTY
55351: LIST
55352: LIST
55353: PUSH
55354: LD_INT 1
55356: NEG
55357: PUSH
55358: LD_INT 2
55360: NEG
55361: PUSH
55362: EMPTY
55363: LIST
55364: LIST
55365: PUSH
55366: LD_INT 1
55368: PUSH
55369: LD_INT 1
55371: NEG
55372: PUSH
55373: EMPTY
55374: LIST
55375: LIST
55376: PUSH
55377: LD_INT 2
55379: PUSH
55380: LD_INT 0
55382: PUSH
55383: EMPTY
55384: LIST
55385: LIST
55386: PUSH
55387: LD_INT 2
55389: PUSH
55390: LD_INT 1
55392: PUSH
55393: EMPTY
55394: LIST
55395: LIST
55396: PUSH
55397: LD_INT 2
55399: PUSH
55400: LD_INT 2
55402: PUSH
55403: EMPTY
55404: LIST
55405: LIST
55406: PUSH
55407: LD_INT 1
55409: PUSH
55410: LD_INT 2
55412: PUSH
55413: EMPTY
55414: LIST
55415: LIST
55416: PUSH
55417: LD_INT 1
55419: NEG
55420: PUSH
55421: LD_INT 1
55423: PUSH
55424: EMPTY
55425: LIST
55426: LIST
55427: PUSH
55428: LD_INT 2
55430: NEG
55431: PUSH
55432: LD_INT 0
55434: PUSH
55435: EMPTY
55436: LIST
55437: LIST
55438: PUSH
55439: LD_INT 2
55441: NEG
55442: PUSH
55443: LD_INT 1
55445: NEG
55446: PUSH
55447: EMPTY
55448: LIST
55449: LIST
55450: PUSH
55451: LD_INT 2
55453: NEG
55454: PUSH
55455: LD_INT 2
55457: NEG
55458: PUSH
55459: EMPTY
55460: LIST
55461: LIST
55462: PUSH
55463: LD_INT 2
55465: NEG
55466: PUSH
55467: LD_INT 3
55469: NEG
55470: PUSH
55471: EMPTY
55472: LIST
55473: LIST
55474: PUSH
55475: LD_INT 2
55477: PUSH
55478: LD_INT 1
55480: NEG
55481: PUSH
55482: EMPTY
55483: LIST
55484: LIST
55485: PUSH
55486: LD_INT 3
55488: PUSH
55489: LD_INT 0
55491: PUSH
55492: EMPTY
55493: LIST
55494: LIST
55495: PUSH
55496: LD_INT 3
55498: PUSH
55499: LD_INT 1
55501: PUSH
55502: EMPTY
55503: LIST
55504: LIST
55505: PUSH
55506: LD_INT 3
55508: PUSH
55509: LD_INT 2
55511: PUSH
55512: EMPTY
55513: LIST
55514: LIST
55515: PUSH
55516: LD_INT 3
55518: PUSH
55519: LD_INT 3
55521: PUSH
55522: EMPTY
55523: LIST
55524: LIST
55525: PUSH
55526: LD_INT 2
55528: PUSH
55529: LD_INT 3
55531: PUSH
55532: EMPTY
55533: LIST
55534: LIST
55535: PUSH
55536: LD_INT 2
55538: NEG
55539: PUSH
55540: LD_INT 1
55542: PUSH
55543: EMPTY
55544: LIST
55545: LIST
55546: PUSH
55547: LD_INT 3
55549: NEG
55550: PUSH
55551: LD_INT 0
55553: PUSH
55554: EMPTY
55555: LIST
55556: LIST
55557: PUSH
55558: LD_INT 3
55560: NEG
55561: PUSH
55562: LD_INT 1
55564: NEG
55565: PUSH
55566: EMPTY
55567: LIST
55568: LIST
55569: PUSH
55570: LD_INT 3
55572: NEG
55573: PUSH
55574: LD_INT 2
55576: NEG
55577: PUSH
55578: EMPTY
55579: LIST
55580: LIST
55581: PUSH
55582: LD_INT 3
55584: NEG
55585: PUSH
55586: LD_INT 3
55588: NEG
55589: PUSH
55590: EMPTY
55591: LIST
55592: LIST
55593: PUSH
55594: EMPTY
55595: LIST
55596: LIST
55597: LIST
55598: LIST
55599: LIST
55600: LIST
55601: LIST
55602: LIST
55603: LIST
55604: LIST
55605: LIST
55606: LIST
55607: LIST
55608: LIST
55609: LIST
55610: LIST
55611: LIST
55612: LIST
55613: LIST
55614: LIST
55615: LIST
55616: LIST
55617: LIST
55618: LIST
55619: LIST
55620: LIST
55621: LIST
55622: LIST
55623: LIST
55624: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55625: LD_ADDR_VAR 0 45
55629: PUSH
55630: LD_INT 0
55632: PUSH
55633: LD_INT 0
55635: PUSH
55636: EMPTY
55637: LIST
55638: LIST
55639: PUSH
55640: LD_INT 0
55642: PUSH
55643: LD_INT 1
55645: NEG
55646: PUSH
55647: EMPTY
55648: LIST
55649: LIST
55650: PUSH
55651: LD_INT 1
55653: PUSH
55654: LD_INT 0
55656: PUSH
55657: EMPTY
55658: LIST
55659: LIST
55660: PUSH
55661: LD_INT 1
55663: PUSH
55664: LD_INT 1
55666: PUSH
55667: EMPTY
55668: LIST
55669: LIST
55670: PUSH
55671: LD_INT 0
55673: PUSH
55674: LD_INT 1
55676: PUSH
55677: EMPTY
55678: LIST
55679: LIST
55680: PUSH
55681: LD_INT 1
55683: NEG
55684: PUSH
55685: LD_INT 0
55687: PUSH
55688: EMPTY
55689: LIST
55690: LIST
55691: PUSH
55692: LD_INT 1
55694: NEG
55695: PUSH
55696: LD_INT 1
55698: NEG
55699: PUSH
55700: EMPTY
55701: LIST
55702: LIST
55703: PUSH
55704: LD_INT 1
55706: NEG
55707: PUSH
55708: LD_INT 2
55710: NEG
55711: PUSH
55712: EMPTY
55713: LIST
55714: LIST
55715: PUSH
55716: LD_INT 0
55718: PUSH
55719: LD_INT 2
55721: NEG
55722: PUSH
55723: EMPTY
55724: LIST
55725: LIST
55726: PUSH
55727: LD_INT 1
55729: PUSH
55730: LD_INT 1
55732: NEG
55733: PUSH
55734: EMPTY
55735: LIST
55736: LIST
55737: PUSH
55738: LD_INT 2
55740: PUSH
55741: LD_INT 1
55743: PUSH
55744: EMPTY
55745: LIST
55746: LIST
55747: PUSH
55748: LD_INT 2
55750: PUSH
55751: LD_INT 2
55753: PUSH
55754: EMPTY
55755: LIST
55756: LIST
55757: PUSH
55758: LD_INT 1
55760: PUSH
55761: LD_INT 2
55763: PUSH
55764: EMPTY
55765: LIST
55766: LIST
55767: PUSH
55768: LD_INT 0
55770: PUSH
55771: LD_INT 2
55773: PUSH
55774: EMPTY
55775: LIST
55776: LIST
55777: PUSH
55778: LD_INT 1
55780: NEG
55781: PUSH
55782: LD_INT 1
55784: PUSH
55785: EMPTY
55786: LIST
55787: LIST
55788: PUSH
55789: LD_INT 2
55791: NEG
55792: PUSH
55793: LD_INT 1
55795: NEG
55796: PUSH
55797: EMPTY
55798: LIST
55799: LIST
55800: PUSH
55801: LD_INT 2
55803: NEG
55804: PUSH
55805: LD_INT 2
55807: NEG
55808: PUSH
55809: EMPTY
55810: LIST
55811: LIST
55812: PUSH
55813: LD_INT 2
55815: NEG
55816: PUSH
55817: LD_INT 3
55819: NEG
55820: PUSH
55821: EMPTY
55822: LIST
55823: LIST
55824: PUSH
55825: LD_INT 1
55827: NEG
55828: PUSH
55829: LD_INT 3
55831: NEG
55832: PUSH
55833: EMPTY
55834: LIST
55835: LIST
55836: PUSH
55837: LD_INT 0
55839: PUSH
55840: LD_INT 3
55842: NEG
55843: PUSH
55844: EMPTY
55845: LIST
55846: LIST
55847: PUSH
55848: LD_INT 1
55850: PUSH
55851: LD_INT 2
55853: NEG
55854: PUSH
55855: EMPTY
55856: LIST
55857: LIST
55858: PUSH
55859: LD_INT 3
55861: PUSH
55862: LD_INT 2
55864: PUSH
55865: EMPTY
55866: LIST
55867: LIST
55868: PUSH
55869: LD_INT 3
55871: PUSH
55872: LD_INT 3
55874: PUSH
55875: EMPTY
55876: LIST
55877: LIST
55878: PUSH
55879: LD_INT 2
55881: PUSH
55882: LD_INT 3
55884: PUSH
55885: EMPTY
55886: LIST
55887: LIST
55888: PUSH
55889: LD_INT 1
55891: PUSH
55892: LD_INT 3
55894: PUSH
55895: EMPTY
55896: LIST
55897: LIST
55898: PUSH
55899: LD_INT 0
55901: PUSH
55902: LD_INT 3
55904: PUSH
55905: EMPTY
55906: LIST
55907: LIST
55908: PUSH
55909: LD_INT 1
55911: NEG
55912: PUSH
55913: LD_INT 2
55915: PUSH
55916: EMPTY
55917: LIST
55918: LIST
55919: PUSH
55920: LD_INT 3
55922: NEG
55923: PUSH
55924: LD_INT 2
55926: NEG
55927: PUSH
55928: EMPTY
55929: LIST
55930: LIST
55931: PUSH
55932: LD_INT 3
55934: NEG
55935: PUSH
55936: LD_INT 3
55938: NEG
55939: PUSH
55940: EMPTY
55941: LIST
55942: LIST
55943: PUSH
55944: EMPTY
55945: LIST
55946: LIST
55947: LIST
55948: LIST
55949: LIST
55950: LIST
55951: LIST
55952: LIST
55953: LIST
55954: LIST
55955: LIST
55956: LIST
55957: LIST
55958: LIST
55959: LIST
55960: LIST
55961: LIST
55962: LIST
55963: LIST
55964: LIST
55965: LIST
55966: LIST
55967: LIST
55968: LIST
55969: LIST
55970: LIST
55971: LIST
55972: LIST
55973: LIST
55974: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55975: LD_ADDR_VAR 0 46
55979: PUSH
55980: LD_INT 0
55982: PUSH
55983: LD_INT 0
55985: PUSH
55986: EMPTY
55987: LIST
55988: LIST
55989: PUSH
55990: LD_INT 0
55992: PUSH
55993: LD_INT 1
55995: NEG
55996: PUSH
55997: EMPTY
55998: LIST
55999: LIST
56000: PUSH
56001: LD_INT 1
56003: PUSH
56004: LD_INT 0
56006: PUSH
56007: EMPTY
56008: LIST
56009: LIST
56010: PUSH
56011: LD_INT 1
56013: PUSH
56014: LD_INT 1
56016: PUSH
56017: EMPTY
56018: LIST
56019: LIST
56020: PUSH
56021: LD_INT 0
56023: PUSH
56024: LD_INT 1
56026: PUSH
56027: EMPTY
56028: LIST
56029: LIST
56030: PUSH
56031: LD_INT 1
56033: NEG
56034: PUSH
56035: LD_INT 0
56037: PUSH
56038: EMPTY
56039: LIST
56040: LIST
56041: PUSH
56042: LD_INT 1
56044: NEG
56045: PUSH
56046: LD_INT 1
56048: NEG
56049: PUSH
56050: EMPTY
56051: LIST
56052: LIST
56053: PUSH
56054: LD_INT 1
56056: NEG
56057: PUSH
56058: LD_INT 2
56060: NEG
56061: PUSH
56062: EMPTY
56063: LIST
56064: LIST
56065: PUSH
56066: LD_INT 0
56068: PUSH
56069: LD_INT 2
56071: NEG
56072: PUSH
56073: EMPTY
56074: LIST
56075: LIST
56076: PUSH
56077: LD_INT 1
56079: PUSH
56080: LD_INT 1
56082: NEG
56083: PUSH
56084: EMPTY
56085: LIST
56086: LIST
56087: PUSH
56088: LD_INT 2
56090: PUSH
56091: LD_INT 0
56093: PUSH
56094: EMPTY
56095: LIST
56096: LIST
56097: PUSH
56098: LD_INT 2
56100: PUSH
56101: LD_INT 1
56103: PUSH
56104: EMPTY
56105: LIST
56106: LIST
56107: PUSH
56108: LD_INT 1
56110: PUSH
56111: LD_INT 2
56113: PUSH
56114: EMPTY
56115: LIST
56116: LIST
56117: PUSH
56118: LD_INT 0
56120: PUSH
56121: LD_INT 2
56123: PUSH
56124: EMPTY
56125: LIST
56126: LIST
56127: PUSH
56128: LD_INT 1
56130: NEG
56131: PUSH
56132: LD_INT 1
56134: PUSH
56135: EMPTY
56136: LIST
56137: LIST
56138: PUSH
56139: LD_INT 2
56141: NEG
56142: PUSH
56143: LD_INT 0
56145: PUSH
56146: EMPTY
56147: LIST
56148: LIST
56149: PUSH
56150: LD_INT 2
56152: NEG
56153: PUSH
56154: LD_INT 1
56156: NEG
56157: PUSH
56158: EMPTY
56159: LIST
56160: LIST
56161: PUSH
56162: LD_INT 1
56164: NEG
56165: PUSH
56166: LD_INT 3
56168: NEG
56169: PUSH
56170: EMPTY
56171: LIST
56172: LIST
56173: PUSH
56174: LD_INT 0
56176: PUSH
56177: LD_INT 3
56179: NEG
56180: PUSH
56181: EMPTY
56182: LIST
56183: LIST
56184: PUSH
56185: LD_INT 1
56187: PUSH
56188: LD_INT 2
56190: NEG
56191: PUSH
56192: EMPTY
56193: LIST
56194: LIST
56195: PUSH
56196: LD_INT 2
56198: PUSH
56199: LD_INT 1
56201: NEG
56202: PUSH
56203: EMPTY
56204: LIST
56205: LIST
56206: PUSH
56207: LD_INT 3
56209: PUSH
56210: LD_INT 0
56212: PUSH
56213: EMPTY
56214: LIST
56215: LIST
56216: PUSH
56217: LD_INT 3
56219: PUSH
56220: LD_INT 1
56222: PUSH
56223: EMPTY
56224: LIST
56225: LIST
56226: PUSH
56227: LD_INT 1
56229: PUSH
56230: LD_INT 3
56232: PUSH
56233: EMPTY
56234: LIST
56235: LIST
56236: PUSH
56237: LD_INT 0
56239: PUSH
56240: LD_INT 3
56242: PUSH
56243: EMPTY
56244: LIST
56245: LIST
56246: PUSH
56247: LD_INT 1
56249: NEG
56250: PUSH
56251: LD_INT 2
56253: PUSH
56254: EMPTY
56255: LIST
56256: LIST
56257: PUSH
56258: LD_INT 2
56260: NEG
56261: PUSH
56262: LD_INT 1
56264: PUSH
56265: EMPTY
56266: LIST
56267: LIST
56268: PUSH
56269: LD_INT 3
56271: NEG
56272: PUSH
56273: LD_INT 0
56275: PUSH
56276: EMPTY
56277: LIST
56278: LIST
56279: PUSH
56280: LD_INT 3
56282: NEG
56283: PUSH
56284: LD_INT 1
56286: NEG
56287: PUSH
56288: EMPTY
56289: LIST
56290: LIST
56291: PUSH
56292: EMPTY
56293: LIST
56294: LIST
56295: LIST
56296: LIST
56297: LIST
56298: LIST
56299: LIST
56300: LIST
56301: LIST
56302: LIST
56303: LIST
56304: LIST
56305: LIST
56306: LIST
56307: LIST
56308: LIST
56309: LIST
56310: LIST
56311: LIST
56312: LIST
56313: LIST
56314: LIST
56315: LIST
56316: LIST
56317: LIST
56318: LIST
56319: LIST
56320: LIST
56321: LIST
56322: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56323: LD_ADDR_VAR 0 47
56327: PUSH
56328: LD_INT 0
56330: PUSH
56331: LD_INT 0
56333: PUSH
56334: EMPTY
56335: LIST
56336: LIST
56337: PUSH
56338: LD_INT 0
56340: PUSH
56341: LD_INT 1
56343: NEG
56344: PUSH
56345: EMPTY
56346: LIST
56347: LIST
56348: PUSH
56349: LD_INT 1
56351: PUSH
56352: LD_INT 0
56354: PUSH
56355: EMPTY
56356: LIST
56357: LIST
56358: PUSH
56359: LD_INT 1
56361: PUSH
56362: LD_INT 1
56364: PUSH
56365: EMPTY
56366: LIST
56367: LIST
56368: PUSH
56369: LD_INT 0
56371: PUSH
56372: LD_INT 1
56374: PUSH
56375: EMPTY
56376: LIST
56377: LIST
56378: PUSH
56379: LD_INT 1
56381: NEG
56382: PUSH
56383: LD_INT 0
56385: PUSH
56386: EMPTY
56387: LIST
56388: LIST
56389: PUSH
56390: LD_INT 1
56392: NEG
56393: PUSH
56394: LD_INT 1
56396: NEG
56397: PUSH
56398: EMPTY
56399: LIST
56400: LIST
56401: PUSH
56402: LD_INT 1
56404: NEG
56405: PUSH
56406: LD_INT 2
56408: NEG
56409: PUSH
56410: EMPTY
56411: LIST
56412: LIST
56413: PUSH
56414: LD_INT 0
56416: PUSH
56417: LD_INT 2
56419: NEG
56420: PUSH
56421: EMPTY
56422: LIST
56423: LIST
56424: PUSH
56425: LD_INT 1
56427: PUSH
56428: LD_INT 1
56430: NEG
56431: PUSH
56432: EMPTY
56433: LIST
56434: LIST
56435: PUSH
56436: LD_INT 2
56438: NEG
56439: PUSH
56440: LD_INT 1
56442: NEG
56443: PUSH
56444: EMPTY
56445: LIST
56446: LIST
56447: PUSH
56448: LD_INT 2
56450: NEG
56451: PUSH
56452: LD_INT 2
56454: NEG
56455: PUSH
56456: EMPTY
56457: LIST
56458: LIST
56459: PUSH
56460: EMPTY
56461: LIST
56462: LIST
56463: LIST
56464: LIST
56465: LIST
56466: LIST
56467: LIST
56468: LIST
56469: LIST
56470: LIST
56471: LIST
56472: LIST
56473: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
56474: LD_ADDR_VAR 0 48
56478: PUSH
56479: LD_INT 0
56481: PUSH
56482: LD_INT 0
56484: PUSH
56485: EMPTY
56486: LIST
56487: LIST
56488: PUSH
56489: LD_INT 0
56491: PUSH
56492: LD_INT 1
56494: NEG
56495: PUSH
56496: EMPTY
56497: LIST
56498: LIST
56499: PUSH
56500: LD_INT 1
56502: PUSH
56503: LD_INT 0
56505: PUSH
56506: EMPTY
56507: LIST
56508: LIST
56509: PUSH
56510: LD_INT 1
56512: PUSH
56513: LD_INT 1
56515: PUSH
56516: EMPTY
56517: LIST
56518: LIST
56519: PUSH
56520: LD_INT 0
56522: PUSH
56523: LD_INT 1
56525: PUSH
56526: EMPTY
56527: LIST
56528: LIST
56529: PUSH
56530: LD_INT 1
56532: NEG
56533: PUSH
56534: LD_INT 0
56536: PUSH
56537: EMPTY
56538: LIST
56539: LIST
56540: PUSH
56541: LD_INT 1
56543: NEG
56544: PUSH
56545: LD_INT 1
56547: NEG
56548: PUSH
56549: EMPTY
56550: LIST
56551: LIST
56552: PUSH
56553: LD_INT 1
56555: NEG
56556: PUSH
56557: LD_INT 2
56559: NEG
56560: PUSH
56561: EMPTY
56562: LIST
56563: LIST
56564: PUSH
56565: LD_INT 0
56567: PUSH
56568: LD_INT 2
56570: NEG
56571: PUSH
56572: EMPTY
56573: LIST
56574: LIST
56575: PUSH
56576: LD_INT 1
56578: PUSH
56579: LD_INT 1
56581: NEG
56582: PUSH
56583: EMPTY
56584: LIST
56585: LIST
56586: PUSH
56587: LD_INT 2
56589: PUSH
56590: LD_INT 0
56592: PUSH
56593: EMPTY
56594: LIST
56595: LIST
56596: PUSH
56597: LD_INT 2
56599: PUSH
56600: LD_INT 1
56602: PUSH
56603: EMPTY
56604: LIST
56605: LIST
56606: PUSH
56607: EMPTY
56608: LIST
56609: LIST
56610: LIST
56611: LIST
56612: LIST
56613: LIST
56614: LIST
56615: LIST
56616: LIST
56617: LIST
56618: LIST
56619: LIST
56620: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
56621: LD_ADDR_VAR 0 49
56625: PUSH
56626: LD_INT 0
56628: PUSH
56629: LD_INT 0
56631: PUSH
56632: EMPTY
56633: LIST
56634: LIST
56635: PUSH
56636: LD_INT 0
56638: PUSH
56639: LD_INT 1
56641: NEG
56642: PUSH
56643: EMPTY
56644: LIST
56645: LIST
56646: PUSH
56647: LD_INT 1
56649: PUSH
56650: LD_INT 0
56652: PUSH
56653: EMPTY
56654: LIST
56655: LIST
56656: PUSH
56657: LD_INT 1
56659: PUSH
56660: LD_INT 1
56662: PUSH
56663: EMPTY
56664: LIST
56665: LIST
56666: PUSH
56667: LD_INT 0
56669: PUSH
56670: LD_INT 1
56672: PUSH
56673: EMPTY
56674: LIST
56675: LIST
56676: PUSH
56677: LD_INT 1
56679: NEG
56680: PUSH
56681: LD_INT 0
56683: PUSH
56684: EMPTY
56685: LIST
56686: LIST
56687: PUSH
56688: LD_INT 1
56690: NEG
56691: PUSH
56692: LD_INT 1
56694: NEG
56695: PUSH
56696: EMPTY
56697: LIST
56698: LIST
56699: PUSH
56700: LD_INT 1
56702: PUSH
56703: LD_INT 1
56705: NEG
56706: PUSH
56707: EMPTY
56708: LIST
56709: LIST
56710: PUSH
56711: LD_INT 2
56713: PUSH
56714: LD_INT 0
56716: PUSH
56717: EMPTY
56718: LIST
56719: LIST
56720: PUSH
56721: LD_INT 2
56723: PUSH
56724: LD_INT 1
56726: PUSH
56727: EMPTY
56728: LIST
56729: LIST
56730: PUSH
56731: LD_INT 2
56733: PUSH
56734: LD_INT 2
56736: PUSH
56737: EMPTY
56738: LIST
56739: LIST
56740: PUSH
56741: LD_INT 1
56743: PUSH
56744: LD_INT 2
56746: PUSH
56747: EMPTY
56748: LIST
56749: LIST
56750: PUSH
56751: EMPTY
56752: LIST
56753: LIST
56754: LIST
56755: LIST
56756: LIST
56757: LIST
56758: LIST
56759: LIST
56760: LIST
56761: LIST
56762: LIST
56763: LIST
56764: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
56765: LD_ADDR_VAR 0 50
56769: PUSH
56770: LD_INT 0
56772: PUSH
56773: LD_INT 0
56775: PUSH
56776: EMPTY
56777: LIST
56778: LIST
56779: PUSH
56780: LD_INT 0
56782: PUSH
56783: LD_INT 1
56785: NEG
56786: PUSH
56787: EMPTY
56788: LIST
56789: LIST
56790: PUSH
56791: LD_INT 1
56793: PUSH
56794: LD_INT 0
56796: PUSH
56797: EMPTY
56798: LIST
56799: LIST
56800: PUSH
56801: LD_INT 1
56803: PUSH
56804: LD_INT 1
56806: PUSH
56807: EMPTY
56808: LIST
56809: LIST
56810: PUSH
56811: LD_INT 0
56813: PUSH
56814: LD_INT 1
56816: PUSH
56817: EMPTY
56818: LIST
56819: LIST
56820: PUSH
56821: LD_INT 1
56823: NEG
56824: PUSH
56825: LD_INT 0
56827: PUSH
56828: EMPTY
56829: LIST
56830: LIST
56831: PUSH
56832: LD_INT 1
56834: NEG
56835: PUSH
56836: LD_INT 1
56838: NEG
56839: PUSH
56840: EMPTY
56841: LIST
56842: LIST
56843: PUSH
56844: LD_INT 2
56846: PUSH
56847: LD_INT 1
56849: PUSH
56850: EMPTY
56851: LIST
56852: LIST
56853: PUSH
56854: LD_INT 2
56856: PUSH
56857: LD_INT 2
56859: PUSH
56860: EMPTY
56861: LIST
56862: LIST
56863: PUSH
56864: LD_INT 1
56866: PUSH
56867: LD_INT 2
56869: PUSH
56870: EMPTY
56871: LIST
56872: LIST
56873: PUSH
56874: LD_INT 0
56876: PUSH
56877: LD_INT 2
56879: PUSH
56880: EMPTY
56881: LIST
56882: LIST
56883: PUSH
56884: LD_INT 1
56886: NEG
56887: PUSH
56888: LD_INT 1
56890: PUSH
56891: EMPTY
56892: LIST
56893: LIST
56894: PUSH
56895: EMPTY
56896: LIST
56897: LIST
56898: LIST
56899: LIST
56900: LIST
56901: LIST
56902: LIST
56903: LIST
56904: LIST
56905: LIST
56906: LIST
56907: LIST
56908: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
56909: LD_ADDR_VAR 0 51
56913: PUSH
56914: LD_INT 0
56916: PUSH
56917: LD_INT 0
56919: PUSH
56920: EMPTY
56921: LIST
56922: LIST
56923: PUSH
56924: LD_INT 0
56926: PUSH
56927: LD_INT 1
56929: NEG
56930: PUSH
56931: EMPTY
56932: LIST
56933: LIST
56934: PUSH
56935: LD_INT 1
56937: PUSH
56938: LD_INT 0
56940: PUSH
56941: EMPTY
56942: LIST
56943: LIST
56944: PUSH
56945: LD_INT 1
56947: PUSH
56948: LD_INT 1
56950: PUSH
56951: EMPTY
56952: LIST
56953: LIST
56954: PUSH
56955: LD_INT 0
56957: PUSH
56958: LD_INT 1
56960: PUSH
56961: EMPTY
56962: LIST
56963: LIST
56964: PUSH
56965: LD_INT 1
56967: NEG
56968: PUSH
56969: LD_INT 0
56971: PUSH
56972: EMPTY
56973: LIST
56974: LIST
56975: PUSH
56976: LD_INT 1
56978: NEG
56979: PUSH
56980: LD_INT 1
56982: NEG
56983: PUSH
56984: EMPTY
56985: LIST
56986: LIST
56987: PUSH
56988: LD_INT 1
56990: PUSH
56991: LD_INT 2
56993: PUSH
56994: EMPTY
56995: LIST
56996: LIST
56997: PUSH
56998: LD_INT 0
57000: PUSH
57001: LD_INT 2
57003: PUSH
57004: EMPTY
57005: LIST
57006: LIST
57007: PUSH
57008: LD_INT 1
57010: NEG
57011: PUSH
57012: LD_INT 1
57014: PUSH
57015: EMPTY
57016: LIST
57017: LIST
57018: PUSH
57019: LD_INT 2
57021: NEG
57022: PUSH
57023: LD_INT 0
57025: PUSH
57026: EMPTY
57027: LIST
57028: LIST
57029: PUSH
57030: LD_INT 2
57032: NEG
57033: PUSH
57034: LD_INT 1
57036: NEG
57037: PUSH
57038: EMPTY
57039: LIST
57040: LIST
57041: PUSH
57042: EMPTY
57043: LIST
57044: LIST
57045: LIST
57046: LIST
57047: LIST
57048: LIST
57049: LIST
57050: LIST
57051: LIST
57052: LIST
57053: LIST
57054: LIST
57055: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57056: LD_ADDR_VAR 0 52
57060: PUSH
57061: LD_INT 0
57063: PUSH
57064: LD_INT 0
57066: PUSH
57067: EMPTY
57068: LIST
57069: LIST
57070: PUSH
57071: LD_INT 0
57073: PUSH
57074: LD_INT 1
57076: NEG
57077: PUSH
57078: EMPTY
57079: LIST
57080: LIST
57081: PUSH
57082: LD_INT 1
57084: PUSH
57085: LD_INT 0
57087: PUSH
57088: EMPTY
57089: LIST
57090: LIST
57091: PUSH
57092: LD_INT 1
57094: PUSH
57095: LD_INT 1
57097: PUSH
57098: EMPTY
57099: LIST
57100: LIST
57101: PUSH
57102: LD_INT 0
57104: PUSH
57105: LD_INT 1
57107: PUSH
57108: EMPTY
57109: LIST
57110: LIST
57111: PUSH
57112: LD_INT 1
57114: NEG
57115: PUSH
57116: LD_INT 0
57118: PUSH
57119: EMPTY
57120: LIST
57121: LIST
57122: PUSH
57123: LD_INT 1
57125: NEG
57126: PUSH
57127: LD_INT 1
57129: NEG
57130: PUSH
57131: EMPTY
57132: LIST
57133: LIST
57134: PUSH
57135: LD_INT 1
57137: NEG
57138: PUSH
57139: LD_INT 2
57141: NEG
57142: PUSH
57143: EMPTY
57144: LIST
57145: LIST
57146: PUSH
57147: LD_INT 1
57149: NEG
57150: PUSH
57151: LD_INT 1
57153: PUSH
57154: EMPTY
57155: LIST
57156: LIST
57157: PUSH
57158: LD_INT 2
57160: NEG
57161: PUSH
57162: LD_INT 0
57164: PUSH
57165: EMPTY
57166: LIST
57167: LIST
57168: PUSH
57169: LD_INT 2
57171: NEG
57172: PUSH
57173: LD_INT 1
57175: NEG
57176: PUSH
57177: EMPTY
57178: LIST
57179: LIST
57180: PUSH
57181: LD_INT 2
57183: NEG
57184: PUSH
57185: LD_INT 2
57187: NEG
57188: PUSH
57189: EMPTY
57190: LIST
57191: LIST
57192: PUSH
57193: EMPTY
57194: LIST
57195: LIST
57196: LIST
57197: LIST
57198: LIST
57199: LIST
57200: LIST
57201: LIST
57202: LIST
57203: LIST
57204: LIST
57205: LIST
57206: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57207: LD_ADDR_VAR 0 53
57211: PUSH
57212: LD_INT 0
57214: PUSH
57215: LD_INT 0
57217: PUSH
57218: EMPTY
57219: LIST
57220: LIST
57221: PUSH
57222: LD_INT 0
57224: PUSH
57225: LD_INT 1
57227: NEG
57228: PUSH
57229: EMPTY
57230: LIST
57231: LIST
57232: PUSH
57233: LD_INT 1
57235: PUSH
57236: LD_INT 0
57238: PUSH
57239: EMPTY
57240: LIST
57241: LIST
57242: PUSH
57243: LD_INT 1
57245: PUSH
57246: LD_INT 1
57248: PUSH
57249: EMPTY
57250: LIST
57251: LIST
57252: PUSH
57253: LD_INT 0
57255: PUSH
57256: LD_INT 1
57258: PUSH
57259: EMPTY
57260: LIST
57261: LIST
57262: PUSH
57263: LD_INT 1
57265: NEG
57266: PUSH
57267: LD_INT 0
57269: PUSH
57270: EMPTY
57271: LIST
57272: LIST
57273: PUSH
57274: LD_INT 1
57276: NEG
57277: PUSH
57278: LD_INT 1
57280: NEG
57281: PUSH
57282: EMPTY
57283: LIST
57284: LIST
57285: PUSH
57286: LD_INT 1
57288: NEG
57289: PUSH
57290: LD_INT 2
57292: NEG
57293: PUSH
57294: EMPTY
57295: LIST
57296: LIST
57297: PUSH
57298: LD_INT 0
57300: PUSH
57301: LD_INT 2
57303: NEG
57304: PUSH
57305: EMPTY
57306: LIST
57307: LIST
57308: PUSH
57309: LD_INT 1
57311: PUSH
57312: LD_INT 1
57314: NEG
57315: PUSH
57316: EMPTY
57317: LIST
57318: LIST
57319: PUSH
57320: LD_INT 2
57322: PUSH
57323: LD_INT 0
57325: PUSH
57326: EMPTY
57327: LIST
57328: LIST
57329: PUSH
57330: LD_INT 2
57332: PUSH
57333: LD_INT 1
57335: PUSH
57336: EMPTY
57337: LIST
57338: LIST
57339: PUSH
57340: LD_INT 2
57342: PUSH
57343: LD_INT 2
57345: PUSH
57346: EMPTY
57347: LIST
57348: LIST
57349: PUSH
57350: LD_INT 1
57352: PUSH
57353: LD_INT 2
57355: PUSH
57356: EMPTY
57357: LIST
57358: LIST
57359: PUSH
57360: LD_INT 0
57362: PUSH
57363: LD_INT 2
57365: PUSH
57366: EMPTY
57367: LIST
57368: LIST
57369: PUSH
57370: LD_INT 1
57372: NEG
57373: PUSH
57374: LD_INT 1
57376: PUSH
57377: EMPTY
57378: LIST
57379: LIST
57380: PUSH
57381: LD_INT 2
57383: NEG
57384: PUSH
57385: LD_INT 0
57387: PUSH
57388: EMPTY
57389: LIST
57390: LIST
57391: PUSH
57392: LD_INT 2
57394: NEG
57395: PUSH
57396: LD_INT 1
57398: NEG
57399: PUSH
57400: EMPTY
57401: LIST
57402: LIST
57403: PUSH
57404: LD_INT 2
57406: NEG
57407: PUSH
57408: LD_INT 2
57410: NEG
57411: PUSH
57412: EMPTY
57413: LIST
57414: LIST
57415: PUSH
57416: EMPTY
57417: LIST
57418: LIST
57419: LIST
57420: LIST
57421: LIST
57422: LIST
57423: LIST
57424: LIST
57425: LIST
57426: LIST
57427: LIST
57428: LIST
57429: LIST
57430: LIST
57431: LIST
57432: LIST
57433: LIST
57434: LIST
57435: LIST
57436: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57437: LD_ADDR_VAR 0 54
57441: PUSH
57442: LD_INT 0
57444: PUSH
57445: LD_INT 0
57447: PUSH
57448: EMPTY
57449: LIST
57450: LIST
57451: PUSH
57452: LD_INT 0
57454: PUSH
57455: LD_INT 1
57457: NEG
57458: PUSH
57459: EMPTY
57460: LIST
57461: LIST
57462: PUSH
57463: LD_INT 1
57465: PUSH
57466: LD_INT 0
57468: PUSH
57469: EMPTY
57470: LIST
57471: LIST
57472: PUSH
57473: LD_INT 1
57475: PUSH
57476: LD_INT 1
57478: PUSH
57479: EMPTY
57480: LIST
57481: LIST
57482: PUSH
57483: LD_INT 0
57485: PUSH
57486: LD_INT 1
57488: PUSH
57489: EMPTY
57490: LIST
57491: LIST
57492: PUSH
57493: LD_INT 1
57495: NEG
57496: PUSH
57497: LD_INT 0
57499: PUSH
57500: EMPTY
57501: LIST
57502: LIST
57503: PUSH
57504: LD_INT 1
57506: NEG
57507: PUSH
57508: LD_INT 1
57510: NEG
57511: PUSH
57512: EMPTY
57513: LIST
57514: LIST
57515: PUSH
57516: LD_INT 1
57518: NEG
57519: PUSH
57520: LD_INT 2
57522: NEG
57523: PUSH
57524: EMPTY
57525: LIST
57526: LIST
57527: PUSH
57528: LD_INT 0
57530: PUSH
57531: LD_INT 2
57533: NEG
57534: PUSH
57535: EMPTY
57536: LIST
57537: LIST
57538: PUSH
57539: LD_INT 1
57541: PUSH
57542: LD_INT 1
57544: NEG
57545: PUSH
57546: EMPTY
57547: LIST
57548: LIST
57549: PUSH
57550: LD_INT 2
57552: PUSH
57553: LD_INT 0
57555: PUSH
57556: EMPTY
57557: LIST
57558: LIST
57559: PUSH
57560: LD_INT 2
57562: PUSH
57563: LD_INT 1
57565: PUSH
57566: EMPTY
57567: LIST
57568: LIST
57569: PUSH
57570: LD_INT 2
57572: PUSH
57573: LD_INT 2
57575: PUSH
57576: EMPTY
57577: LIST
57578: LIST
57579: PUSH
57580: LD_INT 1
57582: PUSH
57583: LD_INT 2
57585: PUSH
57586: EMPTY
57587: LIST
57588: LIST
57589: PUSH
57590: LD_INT 0
57592: PUSH
57593: LD_INT 2
57595: PUSH
57596: EMPTY
57597: LIST
57598: LIST
57599: PUSH
57600: LD_INT 1
57602: NEG
57603: PUSH
57604: LD_INT 1
57606: PUSH
57607: EMPTY
57608: LIST
57609: LIST
57610: PUSH
57611: LD_INT 2
57613: NEG
57614: PUSH
57615: LD_INT 0
57617: PUSH
57618: EMPTY
57619: LIST
57620: LIST
57621: PUSH
57622: LD_INT 2
57624: NEG
57625: PUSH
57626: LD_INT 1
57628: NEG
57629: PUSH
57630: EMPTY
57631: LIST
57632: LIST
57633: PUSH
57634: LD_INT 2
57636: NEG
57637: PUSH
57638: LD_INT 2
57640: NEG
57641: PUSH
57642: EMPTY
57643: LIST
57644: LIST
57645: PUSH
57646: EMPTY
57647: LIST
57648: LIST
57649: LIST
57650: LIST
57651: LIST
57652: LIST
57653: LIST
57654: LIST
57655: LIST
57656: LIST
57657: LIST
57658: LIST
57659: LIST
57660: LIST
57661: LIST
57662: LIST
57663: LIST
57664: LIST
57665: LIST
57666: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57667: LD_ADDR_VAR 0 55
57671: PUSH
57672: LD_INT 0
57674: PUSH
57675: LD_INT 0
57677: PUSH
57678: EMPTY
57679: LIST
57680: LIST
57681: PUSH
57682: LD_INT 0
57684: PUSH
57685: LD_INT 1
57687: NEG
57688: PUSH
57689: EMPTY
57690: LIST
57691: LIST
57692: PUSH
57693: LD_INT 1
57695: PUSH
57696: LD_INT 0
57698: PUSH
57699: EMPTY
57700: LIST
57701: LIST
57702: PUSH
57703: LD_INT 1
57705: PUSH
57706: LD_INT 1
57708: PUSH
57709: EMPTY
57710: LIST
57711: LIST
57712: PUSH
57713: LD_INT 0
57715: PUSH
57716: LD_INT 1
57718: PUSH
57719: EMPTY
57720: LIST
57721: LIST
57722: PUSH
57723: LD_INT 1
57725: NEG
57726: PUSH
57727: LD_INT 0
57729: PUSH
57730: EMPTY
57731: LIST
57732: LIST
57733: PUSH
57734: LD_INT 1
57736: NEG
57737: PUSH
57738: LD_INT 1
57740: NEG
57741: PUSH
57742: EMPTY
57743: LIST
57744: LIST
57745: PUSH
57746: LD_INT 1
57748: NEG
57749: PUSH
57750: LD_INT 2
57752: NEG
57753: PUSH
57754: EMPTY
57755: LIST
57756: LIST
57757: PUSH
57758: LD_INT 0
57760: PUSH
57761: LD_INT 2
57763: NEG
57764: PUSH
57765: EMPTY
57766: LIST
57767: LIST
57768: PUSH
57769: LD_INT 1
57771: PUSH
57772: LD_INT 1
57774: NEG
57775: PUSH
57776: EMPTY
57777: LIST
57778: LIST
57779: PUSH
57780: LD_INT 2
57782: PUSH
57783: LD_INT 0
57785: PUSH
57786: EMPTY
57787: LIST
57788: LIST
57789: PUSH
57790: LD_INT 2
57792: PUSH
57793: LD_INT 1
57795: PUSH
57796: EMPTY
57797: LIST
57798: LIST
57799: PUSH
57800: LD_INT 2
57802: PUSH
57803: LD_INT 2
57805: PUSH
57806: EMPTY
57807: LIST
57808: LIST
57809: PUSH
57810: LD_INT 1
57812: PUSH
57813: LD_INT 2
57815: PUSH
57816: EMPTY
57817: LIST
57818: LIST
57819: PUSH
57820: LD_INT 0
57822: PUSH
57823: LD_INT 2
57825: PUSH
57826: EMPTY
57827: LIST
57828: LIST
57829: PUSH
57830: LD_INT 1
57832: NEG
57833: PUSH
57834: LD_INT 1
57836: PUSH
57837: EMPTY
57838: LIST
57839: LIST
57840: PUSH
57841: LD_INT 2
57843: NEG
57844: PUSH
57845: LD_INT 0
57847: PUSH
57848: EMPTY
57849: LIST
57850: LIST
57851: PUSH
57852: LD_INT 2
57854: NEG
57855: PUSH
57856: LD_INT 1
57858: NEG
57859: PUSH
57860: EMPTY
57861: LIST
57862: LIST
57863: PUSH
57864: LD_INT 2
57866: NEG
57867: PUSH
57868: LD_INT 2
57870: NEG
57871: PUSH
57872: EMPTY
57873: LIST
57874: LIST
57875: PUSH
57876: EMPTY
57877: LIST
57878: LIST
57879: LIST
57880: LIST
57881: LIST
57882: LIST
57883: LIST
57884: LIST
57885: LIST
57886: LIST
57887: LIST
57888: LIST
57889: LIST
57890: LIST
57891: LIST
57892: LIST
57893: LIST
57894: LIST
57895: LIST
57896: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57897: LD_ADDR_VAR 0 56
57901: PUSH
57902: LD_INT 0
57904: PUSH
57905: LD_INT 0
57907: PUSH
57908: EMPTY
57909: LIST
57910: LIST
57911: PUSH
57912: LD_INT 0
57914: PUSH
57915: LD_INT 1
57917: NEG
57918: PUSH
57919: EMPTY
57920: LIST
57921: LIST
57922: PUSH
57923: LD_INT 1
57925: PUSH
57926: LD_INT 0
57928: PUSH
57929: EMPTY
57930: LIST
57931: LIST
57932: PUSH
57933: LD_INT 1
57935: PUSH
57936: LD_INT 1
57938: PUSH
57939: EMPTY
57940: LIST
57941: LIST
57942: PUSH
57943: LD_INT 0
57945: PUSH
57946: LD_INT 1
57948: PUSH
57949: EMPTY
57950: LIST
57951: LIST
57952: PUSH
57953: LD_INT 1
57955: NEG
57956: PUSH
57957: LD_INT 0
57959: PUSH
57960: EMPTY
57961: LIST
57962: LIST
57963: PUSH
57964: LD_INT 1
57966: NEG
57967: PUSH
57968: LD_INT 1
57970: NEG
57971: PUSH
57972: EMPTY
57973: LIST
57974: LIST
57975: PUSH
57976: LD_INT 1
57978: NEG
57979: PUSH
57980: LD_INT 2
57982: NEG
57983: PUSH
57984: EMPTY
57985: LIST
57986: LIST
57987: PUSH
57988: LD_INT 0
57990: PUSH
57991: LD_INT 2
57993: NEG
57994: PUSH
57995: EMPTY
57996: LIST
57997: LIST
57998: PUSH
57999: LD_INT 1
58001: PUSH
58002: LD_INT 1
58004: NEG
58005: PUSH
58006: EMPTY
58007: LIST
58008: LIST
58009: PUSH
58010: LD_INT 2
58012: PUSH
58013: LD_INT 0
58015: PUSH
58016: EMPTY
58017: LIST
58018: LIST
58019: PUSH
58020: LD_INT 2
58022: PUSH
58023: LD_INT 1
58025: PUSH
58026: EMPTY
58027: LIST
58028: LIST
58029: PUSH
58030: LD_INT 2
58032: PUSH
58033: LD_INT 2
58035: PUSH
58036: EMPTY
58037: LIST
58038: LIST
58039: PUSH
58040: LD_INT 1
58042: PUSH
58043: LD_INT 2
58045: PUSH
58046: EMPTY
58047: LIST
58048: LIST
58049: PUSH
58050: LD_INT 0
58052: PUSH
58053: LD_INT 2
58055: PUSH
58056: EMPTY
58057: LIST
58058: LIST
58059: PUSH
58060: LD_INT 1
58062: NEG
58063: PUSH
58064: LD_INT 1
58066: PUSH
58067: EMPTY
58068: LIST
58069: LIST
58070: PUSH
58071: LD_INT 2
58073: NEG
58074: PUSH
58075: LD_INT 0
58077: PUSH
58078: EMPTY
58079: LIST
58080: LIST
58081: PUSH
58082: LD_INT 2
58084: NEG
58085: PUSH
58086: LD_INT 1
58088: NEG
58089: PUSH
58090: EMPTY
58091: LIST
58092: LIST
58093: PUSH
58094: LD_INT 2
58096: NEG
58097: PUSH
58098: LD_INT 2
58100: NEG
58101: PUSH
58102: EMPTY
58103: LIST
58104: LIST
58105: PUSH
58106: EMPTY
58107: LIST
58108: LIST
58109: LIST
58110: LIST
58111: LIST
58112: LIST
58113: LIST
58114: LIST
58115: LIST
58116: LIST
58117: LIST
58118: LIST
58119: LIST
58120: LIST
58121: LIST
58122: LIST
58123: LIST
58124: LIST
58125: LIST
58126: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58127: LD_ADDR_VAR 0 57
58131: PUSH
58132: LD_INT 0
58134: PUSH
58135: LD_INT 0
58137: PUSH
58138: EMPTY
58139: LIST
58140: LIST
58141: PUSH
58142: LD_INT 0
58144: PUSH
58145: LD_INT 1
58147: NEG
58148: PUSH
58149: EMPTY
58150: LIST
58151: LIST
58152: PUSH
58153: LD_INT 1
58155: PUSH
58156: LD_INT 0
58158: PUSH
58159: EMPTY
58160: LIST
58161: LIST
58162: PUSH
58163: LD_INT 1
58165: PUSH
58166: LD_INT 1
58168: PUSH
58169: EMPTY
58170: LIST
58171: LIST
58172: PUSH
58173: LD_INT 0
58175: PUSH
58176: LD_INT 1
58178: PUSH
58179: EMPTY
58180: LIST
58181: LIST
58182: PUSH
58183: LD_INT 1
58185: NEG
58186: PUSH
58187: LD_INT 0
58189: PUSH
58190: EMPTY
58191: LIST
58192: LIST
58193: PUSH
58194: LD_INT 1
58196: NEG
58197: PUSH
58198: LD_INT 1
58200: NEG
58201: PUSH
58202: EMPTY
58203: LIST
58204: LIST
58205: PUSH
58206: LD_INT 1
58208: NEG
58209: PUSH
58210: LD_INT 2
58212: NEG
58213: PUSH
58214: EMPTY
58215: LIST
58216: LIST
58217: PUSH
58218: LD_INT 0
58220: PUSH
58221: LD_INT 2
58223: NEG
58224: PUSH
58225: EMPTY
58226: LIST
58227: LIST
58228: PUSH
58229: LD_INT 1
58231: PUSH
58232: LD_INT 1
58234: NEG
58235: PUSH
58236: EMPTY
58237: LIST
58238: LIST
58239: PUSH
58240: LD_INT 2
58242: PUSH
58243: LD_INT 0
58245: PUSH
58246: EMPTY
58247: LIST
58248: LIST
58249: PUSH
58250: LD_INT 2
58252: PUSH
58253: LD_INT 1
58255: PUSH
58256: EMPTY
58257: LIST
58258: LIST
58259: PUSH
58260: LD_INT 2
58262: PUSH
58263: LD_INT 2
58265: PUSH
58266: EMPTY
58267: LIST
58268: LIST
58269: PUSH
58270: LD_INT 1
58272: PUSH
58273: LD_INT 2
58275: PUSH
58276: EMPTY
58277: LIST
58278: LIST
58279: PUSH
58280: LD_INT 0
58282: PUSH
58283: LD_INT 2
58285: PUSH
58286: EMPTY
58287: LIST
58288: LIST
58289: PUSH
58290: LD_INT 1
58292: NEG
58293: PUSH
58294: LD_INT 1
58296: PUSH
58297: EMPTY
58298: LIST
58299: LIST
58300: PUSH
58301: LD_INT 2
58303: NEG
58304: PUSH
58305: LD_INT 0
58307: PUSH
58308: EMPTY
58309: LIST
58310: LIST
58311: PUSH
58312: LD_INT 2
58314: NEG
58315: PUSH
58316: LD_INT 1
58318: NEG
58319: PUSH
58320: EMPTY
58321: LIST
58322: LIST
58323: PUSH
58324: LD_INT 2
58326: NEG
58327: PUSH
58328: LD_INT 2
58330: NEG
58331: PUSH
58332: EMPTY
58333: LIST
58334: LIST
58335: PUSH
58336: EMPTY
58337: LIST
58338: LIST
58339: LIST
58340: LIST
58341: LIST
58342: LIST
58343: LIST
58344: LIST
58345: LIST
58346: LIST
58347: LIST
58348: LIST
58349: LIST
58350: LIST
58351: LIST
58352: LIST
58353: LIST
58354: LIST
58355: LIST
58356: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58357: LD_ADDR_VAR 0 58
58361: PUSH
58362: LD_INT 0
58364: PUSH
58365: LD_INT 0
58367: PUSH
58368: EMPTY
58369: LIST
58370: LIST
58371: PUSH
58372: LD_INT 0
58374: PUSH
58375: LD_INT 1
58377: NEG
58378: PUSH
58379: EMPTY
58380: LIST
58381: LIST
58382: PUSH
58383: LD_INT 1
58385: PUSH
58386: LD_INT 0
58388: PUSH
58389: EMPTY
58390: LIST
58391: LIST
58392: PUSH
58393: LD_INT 1
58395: PUSH
58396: LD_INT 1
58398: PUSH
58399: EMPTY
58400: LIST
58401: LIST
58402: PUSH
58403: LD_INT 0
58405: PUSH
58406: LD_INT 1
58408: PUSH
58409: EMPTY
58410: LIST
58411: LIST
58412: PUSH
58413: LD_INT 1
58415: NEG
58416: PUSH
58417: LD_INT 0
58419: PUSH
58420: EMPTY
58421: LIST
58422: LIST
58423: PUSH
58424: LD_INT 1
58426: NEG
58427: PUSH
58428: LD_INT 1
58430: NEG
58431: PUSH
58432: EMPTY
58433: LIST
58434: LIST
58435: PUSH
58436: LD_INT 1
58438: NEG
58439: PUSH
58440: LD_INT 2
58442: NEG
58443: PUSH
58444: EMPTY
58445: LIST
58446: LIST
58447: PUSH
58448: LD_INT 0
58450: PUSH
58451: LD_INT 2
58453: NEG
58454: PUSH
58455: EMPTY
58456: LIST
58457: LIST
58458: PUSH
58459: LD_INT 1
58461: PUSH
58462: LD_INT 1
58464: NEG
58465: PUSH
58466: EMPTY
58467: LIST
58468: LIST
58469: PUSH
58470: LD_INT 2
58472: PUSH
58473: LD_INT 0
58475: PUSH
58476: EMPTY
58477: LIST
58478: LIST
58479: PUSH
58480: LD_INT 2
58482: PUSH
58483: LD_INT 1
58485: PUSH
58486: EMPTY
58487: LIST
58488: LIST
58489: PUSH
58490: LD_INT 2
58492: PUSH
58493: LD_INT 2
58495: PUSH
58496: EMPTY
58497: LIST
58498: LIST
58499: PUSH
58500: LD_INT 1
58502: PUSH
58503: LD_INT 2
58505: PUSH
58506: EMPTY
58507: LIST
58508: LIST
58509: PUSH
58510: LD_INT 0
58512: PUSH
58513: LD_INT 2
58515: PUSH
58516: EMPTY
58517: LIST
58518: LIST
58519: PUSH
58520: LD_INT 1
58522: NEG
58523: PUSH
58524: LD_INT 1
58526: PUSH
58527: EMPTY
58528: LIST
58529: LIST
58530: PUSH
58531: LD_INT 2
58533: NEG
58534: PUSH
58535: LD_INT 0
58537: PUSH
58538: EMPTY
58539: LIST
58540: LIST
58541: PUSH
58542: LD_INT 2
58544: NEG
58545: PUSH
58546: LD_INT 1
58548: NEG
58549: PUSH
58550: EMPTY
58551: LIST
58552: LIST
58553: PUSH
58554: LD_INT 2
58556: NEG
58557: PUSH
58558: LD_INT 2
58560: NEG
58561: PUSH
58562: EMPTY
58563: LIST
58564: LIST
58565: PUSH
58566: EMPTY
58567: LIST
58568: LIST
58569: LIST
58570: LIST
58571: LIST
58572: LIST
58573: LIST
58574: LIST
58575: LIST
58576: LIST
58577: LIST
58578: LIST
58579: LIST
58580: LIST
58581: LIST
58582: LIST
58583: LIST
58584: LIST
58585: LIST
58586: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58587: LD_ADDR_VAR 0 59
58591: PUSH
58592: LD_INT 0
58594: PUSH
58595: LD_INT 0
58597: PUSH
58598: EMPTY
58599: LIST
58600: LIST
58601: PUSH
58602: LD_INT 0
58604: PUSH
58605: LD_INT 1
58607: NEG
58608: PUSH
58609: EMPTY
58610: LIST
58611: LIST
58612: PUSH
58613: LD_INT 1
58615: PUSH
58616: LD_INT 0
58618: PUSH
58619: EMPTY
58620: LIST
58621: LIST
58622: PUSH
58623: LD_INT 1
58625: PUSH
58626: LD_INT 1
58628: PUSH
58629: EMPTY
58630: LIST
58631: LIST
58632: PUSH
58633: LD_INT 0
58635: PUSH
58636: LD_INT 1
58638: PUSH
58639: EMPTY
58640: LIST
58641: LIST
58642: PUSH
58643: LD_INT 1
58645: NEG
58646: PUSH
58647: LD_INT 0
58649: PUSH
58650: EMPTY
58651: LIST
58652: LIST
58653: PUSH
58654: LD_INT 1
58656: NEG
58657: PUSH
58658: LD_INT 1
58660: NEG
58661: PUSH
58662: EMPTY
58663: LIST
58664: LIST
58665: PUSH
58666: EMPTY
58667: LIST
58668: LIST
58669: LIST
58670: LIST
58671: LIST
58672: LIST
58673: LIST
58674: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58675: LD_ADDR_VAR 0 60
58679: PUSH
58680: LD_INT 0
58682: PUSH
58683: LD_INT 0
58685: PUSH
58686: EMPTY
58687: LIST
58688: LIST
58689: PUSH
58690: LD_INT 0
58692: PUSH
58693: LD_INT 1
58695: NEG
58696: PUSH
58697: EMPTY
58698: LIST
58699: LIST
58700: PUSH
58701: LD_INT 1
58703: PUSH
58704: LD_INT 0
58706: PUSH
58707: EMPTY
58708: LIST
58709: LIST
58710: PUSH
58711: LD_INT 1
58713: PUSH
58714: LD_INT 1
58716: PUSH
58717: EMPTY
58718: LIST
58719: LIST
58720: PUSH
58721: LD_INT 0
58723: PUSH
58724: LD_INT 1
58726: PUSH
58727: EMPTY
58728: LIST
58729: LIST
58730: PUSH
58731: LD_INT 1
58733: NEG
58734: PUSH
58735: LD_INT 0
58737: PUSH
58738: EMPTY
58739: LIST
58740: LIST
58741: PUSH
58742: LD_INT 1
58744: NEG
58745: PUSH
58746: LD_INT 1
58748: NEG
58749: PUSH
58750: EMPTY
58751: LIST
58752: LIST
58753: PUSH
58754: EMPTY
58755: LIST
58756: LIST
58757: LIST
58758: LIST
58759: LIST
58760: LIST
58761: LIST
58762: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58763: LD_ADDR_VAR 0 61
58767: PUSH
58768: LD_INT 0
58770: PUSH
58771: LD_INT 0
58773: PUSH
58774: EMPTY
58775: LIST
58776: LIST
58777: PUSH
58778: LD_INT 0
58780: PUSH
58781: LD_INT 1
58783: NEG
58784: PUSH
58785: EMPTY
58786: LIST
58787: LIST
58788: PUSH
58789: LD_INT 1
58791: PUSH
58792: LD_INT 0
58794: PUSH
58795: EMPTY
58796: LIST
58797: LIST
58798: PUSH
58799: LD_INT 1
58801: PUSH
58802: LD_INT 1
58804: PUSH
58805: EMPTY
58806: LIST
58807: LIST
58808: PUSH
58809: LD_INT 0
58811: PUSH
58812: LD_INT 1
58814: PUSH
58815: EMPTY
58816: LIST
58817: LIST
58818: PUSH
58819: LD_INT 1
58821: NEG
58822: PUSH
58823: LD_INT 0
58825: PUSH
58826: EMPTY
58827: LIST
58828: LIST
58829: PUSH
58830: LD_INT 1
58832: NEG
58833: PUSH
58834: LD_INT 1
58836: NEG
58837: PUSH
58838: EMPTY
58839: LIST
58840: LIST
58841: PUSH
58842: EMPTY
58843: LIST
58844: LIST
58845: LIST
58846: LIST
58847: LIST
58848: LIST
58849: LIST
58850: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58851: LD_ADDR_VAR 0 62
58855: PUSH
58856: LD_INT 0
58858: PUSH
58859: LD_INT 0
58861: PUSH
58862: EMPTY
58863: LIST
58864: LIST
58865: PUSH
58866: LD_INT 0
58868: PUSH
58869: LD_INT 1
58871: NEG
58872: PUSH
58873: EMPTY
58874: LIST
58875: LIST
58876: PUSH
58877: LD_INT 1
58879: PUSH
58880: LD_INT 0
58882: PUSH
58883: EMPTY
58884: LIST
58885: LIST
58886: PUSH
58887: LD_INT 1
58889: PUSH
58890: LD_INT 1
58892: PUSH
58893: EMPTY
58894: LIST
58895: LIST
58896: PUSH
58897: LD_INT 0
58899: PUSH
58900: LD_INT 1
58902: PUSH
58903: EMPTY
58904: LIST
58905: LIST
58906: PUSH
58907: LD_INT 1
58909: NEG
58910: PUSH
58911: LD_INT 0
58913: PUSH
58914: EMPTY
58915: LIST
58916: LIST
58917: PUSH
58918: LD_INT 1
58920: NEG
58921: PUSH
58922: LD_INT 1
58924: NEG
58925: PUSH
58926: EMPTY
58927: LIST
58928: LIST
58929: PUSH
58930: EMPTY
58931: LIST
58932: LIST
58933: LIST
58934: LIST
58935: LIST
58936: LIST
58937: LIST
58938: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58939: LD_ADDR_VAR 0 63
58943: PUSH
58944: LD_INT 0
58946: PUSH
58947: LD_INT 0
58949: PUSH
58950: EMPTY
58951: LIST
58952: LIST
58953: PUSH
58954: LD_INT 0
58956: PUSH
58957: LD_INT 1
58959: NEG
58960: PUSH
58961: EMPTY
58962: LIST
58963: LIST
58964: PUSH
58965: LD_INT 1
58967: PUSH
58968: LD_INT 0
58970: PUSH
58971: EMPTY
58972: LIST
58973: LIST
58974: PUSH
58975: LD_INT 1
58977: PUSH
58978: LD_INT 1
58980: PUSH
58981: EMPTY
58982: LIST
58983: LIST
58984: PUSH
58985: LD_INT 0
58987: PUSH
58988: LD_INT 1
58990: PUSH
58991: EMPTY
58992: LIST
58993: LIST
58994: PUSH
58995: LD_INT 1
58997: NEG
58998: PUSH
58999: LD_INT 0
59001: PUSH
59002: EMPTY
59003: LIST
59004: LIST
59005: PUSH
59006: LD_INT 1
59008: NEG
59009: PUSH
59010: LD_INT 1
59012: NEG
59013: PUSH
59014: EMPTY
59015: LIST
59016: LIST
59017: PUSH
59018: EMPTY
59019: LIST
59020: LIST
59021: LIST
59022: LIST
59023: LIST
59024: LIST
59025: LIST
59026: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59027: LD_ADDR_VAR 0 64
59031: PUSH
59032: LD_INT 0
59034: PUSH
59035: LD_INT 0
59037: PUSH
59038: EMPTY
59039: LIST
59040: LIST
59041: PUSH
59042: LD_INT 0
59044: PUSH
59045: LD_INT 1
59047: NEG
59048: PUSH
59049: EMPTY
59050: LIST
59051: LIST
59052: PUSH
59053: LD_INT 1
59055: PUSH
59056: LD_INT 0
59058: PUSH
59059: EMPTY
59060: LIST
59061: LIST
59062: PUSH
59063: LD_INT 1
59065: PUSH
59066: LD_INT 1
59068: PUSH
59069: EMPTY
59070: LIST
59071: LIST
59072: PUSH
59073: LD_INT 0
59075: PUSH
59076: LD_INT 1
59078: PUSH
59079: EMPTY
59080: LIST
59081: LIST
59082: PUSH
59083: LD_INT 1
59085: NEG
59086: PUSH
59087: LD_INT 0
59089: PUSH
59090: EMPTY
59091: LIST
59092: LIST
59093: PUSH
59094: LD_INT 1
59096: NEG
59097: PUSH
59098: LD_INT 1
59100: NEG
59101: PUSH
59102: EMPTY
59103: LIST
59104: LIST
59105: PUSH
59106: EMPTY
59107: LIST
59108: LIST
59109: LIST
59110: LIST
59111: LIST
59112: LIST
59113: LIST
59114: ST_TO_ADDR
// end ; 1 :
59115: GO 65012
59117: LD_INT 1
59119: DOUBLE
59120: EQUAL
59121: IFTRUE 59125
59123: GO 61748
59125: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
59126: LD_ADDR_VAR 0 11
59130: PUSH
59131: LD_INT 1
59133: NEG
59134: PUSH
59135: LD_INT 3
59137: NEG
59138: PUSH
59139: EMPTY
59140: LIST
59141: LIST
59142: PUSH
59143: LD_INT 0
59145: PUSH
59146: LD_INT 3
59148: NEG
59149: PUSH
59150: EMPTY
59151: LIST
59152: LIST
59153: PUSH
59154: LD_INT 1
59156: PUSH
59157: LD_INT 2
59159: NEG
59160: PUSH
59161: EMPTY
59162: LIST
59163: LIST
59164: PUSH
59165: EMPTY
59166: LIST
59167: LIST
59168: LIST
59169: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
59170: LD_ADDR_VAR 0 12
59174: PUSH
59175: LD_INT 2
59177: PUSH
59178: LD_INT 1
59180: NEG
59181: PUSH
59182: EMPTY
59183: LIST
59184: LIST
59185: PUSH
59186: LD_INT 3
59188: PUSH
59189: LD_INT 0
59191: PUSH
59192: EMPTY
59193: LIST
59194: LIST
59195: PUSH
59196: LD_INT 3
59198: PUSH
59199: LD_INT 1
59201: PUSH
59202: EMPTY
59203: LIST
59204: LIST
59205: PUSH
59206: EMPTY
59207: LIST
59208: LIST
59209: LIST
59210: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59211: LD_ADDR_VAR 0 13
59215: PUSH
59216: LD_INT 3
59218: PUSH
59219: LD_INT 2
59221: PUSH
59222: EMPTY
59223: LIST
59224: LIST
59225: PUSH
59226: LD_INT 3
59228: PUSH
59229: LD_INT 3
59231: PUSH
59232: EMPTY
59233: LIST
59234: LIST
59235: PUSH
59236: LD_INT 2
59238: PUSH
59239: LD_INT 3
59241: PUSH
59242: EMPTY
59243: LIST
59244: LIST
59245: PUSH
59246: EMPTY
59247: LIST
59248: LIST
59249: LIST
59250: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
59251: LD_ADDR_VAR 0 14
59255: PUSH
59256: LD_INT 1
59258: PUSH
59259: LD_INT 3
59261: PUSH
59262: EMPTY
59263: LIST
59264: LIST
59265: PUSH
59266: LD_INT 0
59268: PUSH
59269: LD_INT 3
59271: PUSH
59272: EMPTY
59273: LIST
59274: LIST
59275: PUSH
59276: LD_INT 1
59278: NEG
59279: PUSH
59280: LD_INT 2
59282: PUSH
59283: EMPTY
59284: LIST
59285: LIST
59286: PUSH
59287: EMPTY
59288: LIST
59289: LIST
59290: LIST
59291: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59292: LD_ADDR_VAR 0 15
59296: PUSH
59297: LD_INT 2
59299: NEG
59300: PUSH
59301: LD_INT 1
59303: PUSH
59304: EMPTY
59305: LIST
59306: LIST
59307: PUSH
59308: LD_INT 3
59310: NEG
59311: PUSH
59312: LD_INT 0
59314: PUSH
59315: EMPTY
59316: LIST
59317: LIST
59318: PUSH
59319: LD_INT 3
59321: NEG
59322: PUSH
59323: LD_INT 1
59325: NEG
59326: PUSH
59327: EMPTY
59328: LIST
59329: LIST
59330: PUSH
59331: EMPTY
59332: LIST
59333: LIST
59334: LIST
59335: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59336: LD_ADDR_VAR 0 16
59340: PUSH
59341: LD_INT 2
59343: NEG
59344: PUSH
59345: LD_INT 3
59347: NEG
59348: PUSH
59349: EMPTY
59350: LIST
59351: LIST
59352: PUSH
59353: LD_INT 3
59355: NEG
59356: PUSH
59357: LD_INT 2
59359: NEG
59360: PUSH
59361: EMPTY
59362: LIST
59363: LIST
59364: PUSH
59365: LD_INT 3
59367: NEG
59368: PUSH
59369: LD_INT 3
59371: NEG
59372: PUSH
59373: EMPTY
59374: LIST
59375: LIST
59376: PUSH
59377: EMPTY
59378: LIST
59379: LIST
59380: LIST
59381: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
59382: LD_ADDR_VAR 0 17
59386: PUSH
59387: LD_INT 1
59389: NEG
59390: PUSH
59391: LD_INT 3
59393: NEG
59394: PUSH
59395: EMPTY
59396: LIST
59397: LIST
59398: PUSH
59399: LD_INT 0
59401: PUSH
59402: LD_INT 3
59404: NEG
59405: PUSH
59406: EMPTY
59407: LIST
59408: LIST
59409: PUSH
59410: LD_INT 1
59412: PUSH
59413: LD_INT 2
59415: NEG
59416: PUSH
59417: EMPTY
59418: LIST
59419: LIST
59420: PUSH
59421: EMPTY
59422: LIST
59423: LIST
59424: LIST
59425: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
59426: LD_ADDR_VAR 0 18
59430: PUSH
59431: LD_INT 2
59433: PUSH
59434: LD_INT 1
59436: NEG
59437: PUSH
59438: EMPTY
59439: LIST
59440: LIST
59441: PUSH
59442: LD_INT 3
59444: PUSH
59445: LD_INT 0
59447: PUSH
59448: EMPTY
59449: LIST
59450: LIST
59451: PUSH
59452: LD_INT 3
59454: PUSH
59455: LD_INT 1
59457: PUSH
59458: EMPTY
59459: LIST
59460: LIST
59461: PUSH
59462: EMPTY
59463: LIST
59464: LIST
59465: LIST
59466: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59467: LD_ADDR_VAR 0 19
59471: PUSH
59472: LD_INT 3
59474: PUSH
59475: LD_INT 2
59477: PUSH
59478: EMPTY
59479: LIST
59480: LIST
59481: PUSH
59482: LD_INT 3
59484: PUSH
59485: LD_INT 3
59487: PUSH
59488: EMPTY
59489: LIST
59490: LIST
59491: PUSH
59492: LD_INT 2
59494: PUSH
59495: LD_INT 3
59497: PUSH
59498: EMPTY
59499: LIST
59500: LIST
59501: PUSH
59502: EMPTY
59503: LIST
59504: LIST
59505: LIST
59506: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
59507: LD_ADDR_VAR 0 20
59511: PUSH
59512: LD_INT 1
59514: PUSH
59515: LD_INT 3
59517: PUSH
59518: EMPTY
59519: LIST
59520: LIST
59521: PUSH
59522: LD_INT 0
59524: PUSH
59525: LD_INT 3
59527: PUSH
59528: EMPTY
59529: LIST
59530: LIST
59531: PUSH
59532: LD_INT 1
59534: NEG
59535: PUSH
59536: LD_INT 2
59538: PUSH
59539: EMPTY
59540: LIST
59541: LIST
59542: PUSH
59543: EMPTY
59544: LIST
59545: LIST
59546: LIST
59547: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59548: LD_ADDR_VAR 0 21
59552: PUSH
59553: LD_INT 2
59555: NEG
59556: PUSH
59557: LD_INT 1
59559: PUSH
59560: EMPTY
59561: LIST
59562: LIST
59563: PUSH
59564: LD_INT 3
59566: NEG
59567: PUSH
59568: LD_INT 0
59570: PUSH
59571: EMPTY
59572: LIST
59573: LIST
59574: PUSH
59575: LD_INT 3
59577: NEG
59578: PUSH
59579: LD_INT 1
59581: NEG
59582: PUSH
59583: EMPTY
59584: LIST
59585: LIST
59586: PUSH
59587: EMPTY
59588: LIST
59589: LIST
59590: LIST
59591: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59592: LD_ADDR_VAR 0 22
59596: PUSH
59597: LD_INT 2
59599: NEG
59600: PUSH
59601: LD_INT 3
59603: NEG
59604: PUSH
59605: EMPTY
59606: LIST
59607: LIST
59608: PUSH
59609: LD_INT 3
59611: NEG
59612: PUSH
59613: LD_INT 2
59615: NEG
59616: PUSH
59617: EMPTY
59618: LIST
59619: LIST
59620: PUSH
59621: LD_INT 3
59623: NEG
59624: PUSH
59625: LD_INT 3
59627: NEG
59628: PUSH
59629: EMPTY
59630: LIST
59631: LIST
59632: PUSH
59633: EMPTY
59634: LIST
59635: LIST
59636: LIST
59637: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
59638: LD_ADDR_VAR 0 23
59642: PUSH
59643: LD_INT 0
59645: PUSH
59646: LD_INT 3
59648: NEG
59649: PUSH
59650: EMPTY
59651: LIST
59652: LIST
59653: PUSH
59654: LD_INT 1
59656: NEG
59657: PUSH
59658: LD_INT 4
59660: NEG
59661: PUSH
59662: EMPTY
59663: LIST
59664: LIST
59665: PUSH
59666: LD_INT 1
59668: PUSH
59669: LD_INT 3
59671: NEG
59672: PUSH
59673: EMPTY
59674: LIST
59675: LIST
59676: PUSH
59677: EMPTY
59678: LIST
59679: LIST
59680: LIST
59681: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
59682: LD_ADDR_VAR 0 24
59686: PUSH
59687: LD_INT 3
59689: PUSH
59690: LD_INT 0
59692: PUSH
59693: EMPTY
59694: LIST
59695: LIST
59696: PUSH
59697: LD_INT 3
59699: PUSH
59700: LD_INT 1
59702: NEG
59703: PUSH
59704: EMPTY
59705: LIST
59706: LIST
59707: PUSH
59708: LD_INT 4
59710: PUSH
59711: LD_INT 1
59713: PUSH
59714: EMPTY
59715: LIST
59716: LIST
59717: PUSH
59718: EMPTY
59719: LIST
59720: LIST
59721: LIST
59722: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
59723: LD_ADDR_VAR 0 25
59727: PUSH
59728: LD_INT 3
59730: PUSH
59731: LD_INT 3
59733: PUSH
59734: EMPTY
59735: LIST
59736: LIST
59737: PUSH
59738: LD_INT 4
59740: PUSH
59741: LD_INT 3
59743: PUSH
59744: EMPTY
59745: LIST
59746: LIST
59747: PUSH
59748: LD_INT 3
59750: PUSH
59751: LD_INT 4
59753: PUSH
59754: EMPTY
59755: LIST
59756: LIST
59757: PUSH
59758: EMPTY
59759: LIST
59760: LIST
59761: LIST
59762: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
59763: LD_ADDR_VAR 0 26
59767: PUSH
59768: LD_INT 0
59770: PUSH
59771: LD_INT 3
59773: PUSH
59774: EMPTY
59775: LIST
59776: LIST
59777: PUSH
59778: LD_INT 1
59780: PUSH
59781: LD_INT 4
59783: PUSH
59784: EMPTY
59785: LIST
59786: LIST
59787: PUSH
59788: LD_INT 1
59790: NEG
59791: PUSH
59792: LD_INT 3
59794: PUSH
59795: EMPTY
59796: LIST
59797: LIST
59798: PUSH
59799: EMPTY
59800: LIST
59801: LIST
59802: LIST
59803: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
59804: LD_ADDR_VAR 0 27
59808: PUSH
59809: LD_INT 3
59811: NEG
59812: PUSH
59813: LD_INT 0
59815: PUSH
59816: EMPTY
59817: LIST
59818: LIST
59819: PUSH
59820: LD_INT 3
59822: NEG
59823: PUSH
59824: LD_INT 1
59826: PUSH
59827: EMPTY
59828: LIST
59829: LIST
59830: PUSH
59831: LD_INT 4
59833: NEG
59834: PUSH
59835: LD_INT 1
59837: NEG
59838: PUSH
59839: EMPTY
59840: LIST
59841: LIST
59842: PUSH
59843: EMPTY
59844: LIST
59845: LIST
59846: LIST
59847: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
59848: LD_ADDR_VAR 0 28
59852: PUSH
59853: LD_INT 3
59855: NEG
59856: PUSH
59857: LD_INT 3
59859: NEG
59860: PUSH
59861: EMPTY
59862: LIST
59863: LIST
59864: PUSH
59865: LD_INT 3
59867: NEG
59868: PUSH
59869: LD_INT 4
59871: NEG
59872: PUSH
59873: EMPTY
59874: LIST
59875: LIST
59876: PUSH
59877: LD_INT 4
59879: NEG
59880: PUSH
59881: LD_INT 3
59883: NEG
59884: PUSH
59885: EMPTY
59886: LIST
59887: LIST
59888: PUSH
59889: EMPTY
59890: LIST
59891: LIST
59892: LIST
59893: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
59894: LD_ADDR_VAR 0 29
59898: PUSH
59899: LD_INT 1
59901: NEG
59902: PUSH
59903: LD_INT 3
59905: NEG
59906: PUSH
59907: EMPTY
59908: LIST
59909: LIST
59910: PUSH
59911: LD_INT 0
59913: PUSH
59914: LD_INT 3
59916: NEG
59917: PUSH
59918: EMPTY
59919: LIST
59920: LIST
59921: PUSH
59922: LD_INT 1
59924: PUSH
59925: LD_INT 2
59927: NEG
59928: PUSH
59929: EMPTY
59930: LIST
59931: LIST
59932: PUSH
59933: LD_INT 1
59935: NEG
59936: PUSH
59937: LD_INT 4
59939: NEG
59940: PUSH
59941: EMPTY
59942: LIST
59943: LIST
59944: PUSH
59945: LD_INT 0
59947: PUSH
59948: LD_INT 4
59950: NEG
59951: PUSH
59952: EMPTY
59953: LIST
59954: LIST
59955: PUSH
59956: LD_INT 1
59958: PUSH
59959: LD_INT 3
59961: NEG
59962: PUSH
59963: EMPTY
59964: LIST
59965: LIST
59966: PUSH
59967: LD_INT 1
59969: NEG
59970: PUSH
59971: LD_INT 5
59973: NEG
59974: PUSH
59975: EMPTY
59976: LIST
59977: LIST
59978: PUSH
59979: LD_INT 0
59981: PUSH
59982: LD_INT 5
59984: NEG
59985: PUSH
59986: EMPTY
59987: LIST
59988: LIST
59989: PUSH
59990: LD_INT 1
59992: PUSH
59993: LD_INT 4
59995: NEG
59996: PUSH
59997: EMPTY
59998: LIST
59999: LIST
60000: PUSH
60001: LD_INT 1
60003: NEG
60004: PUSH
60005: LD_INT 6
60007: NEG
60008: PUSH
60009: EMPTY
60010: LIST
60011: LIST
60012: PUSH
60013: LD_INT 0
60015: PUSH
60016: LD_INT 6
60018: NEG
60019: PUSH
60020: EMPTY
60021: LIST
60022: LIST
60023: PUSH
60024: LD_INT 1
60026: PUSH
60027: LD_INT 5
60029: NEG
60030: PUSH
60031: EMPTY
60032: LIST
60033: LIST
60034: PUSH
60035: EMPTY
60036: LIST
60037: LIST
60038: LIST
60039: LIST
60040: LIST
60041: LIST
60042: LIST
60043: LIST
60044: LIST
60045: LIST
60046: LIST
60047: LIST
60048: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
60049: LD_ADDR_VAR 0 30
60053: PUSH
60054: LD_INT 2
60056: PUSH
60057: LD_INT 1
60059: NEG
60060: PUSH
60061: EMPTY
60062: LIST
60063: LIST
60064: PUSH
60065: LD_INT 3
60067: PUSH
60068: LD_INT 0
60070: PUSH
60071: EMPTY
60072: LIST
60073: LIST
60074: PUSH
60075: LD_INT 3
60077: PUSH
60078: LD_INT 1
60080: PUSH
60081: EMPTY
60082: LIST
60083: LIST
60084: PUSH
60085: LD_INT 3
60087: PUSH
60088: LD_INT 1
60090: NEG
60091: PUSH
60092: EMPTY
60093: LIST
60094: LIST
60095: PUSH
60096: LD_INT 4
60098: PUSH
60099: LD_INT 0
60101: PUSH
60102: EMPTY
60103: LIST
60104: LIST
60105: PUSH
60106: LD_INT 4
60108: PUSH
60109: LD_INT 1
60111: PUSH
60112: EMPTY
60113: LIST
60114: LIST
60115: PUSH
60116: LD_INT 4
60118: PUSH
60119: LD_INT 1
60121: NEG
60122: PUSH
60123: EMPTY
60124: LIST
60125: LIST
60126: PUSH
60127: LD_INT 5
60129: PUSH
60130: LD_INT 0
60132: PUSH
60133: EMPTY
60134: LIST
60135: LIST
60136: PUSH
60137: LD_INT 5
60139: PUSH
60140: LD_INT 1
60142: PUSH
60143: EMPTY
60144: LIST
60145: LIST
60146: PUSH
60147: LD_INT 5
60149: PUSH
60150: LD_INT 1
60152: NEG
60153: PUSH
60154: EMPTY
60155: LIST
60156: LIST
60157: PUSH
60158: LD_INT 6
60160: PUSH
60161: LD_INT 0
60163: PUSH
60164: EMPTY
60165: LIST
60166: LIST
60167: PUSH
60168: LD_INT 6
60170: PUSH
60171: LD_INT 1
60173: PUSH
60174: EMPTY
60175: LIST
60176: LIST
60177: PUSH
60178: EMPTY
60179: LIST
60180: LIST
60181: LIST
60182: LIST
60183: LIST
60184: LIST
60185: LIST
60186: LIST
60187: LIST
60188: LIST
60189: LIST
60190: LIST
60191: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
60192: LD_ADDR_VAR 0 31
60196: PUSH
60197: LD_INT 3
60199: PUSH
60200: LD_INT 2
60202: PUSH
60203: EMPTY
60204: LIST
60205: LIST
60206: PUSH
60207: LD_INT 3
60209: PUSH
60210: LD_INT 3
60212: PUSH
60213: EMPTY
60214: LIST
60215: LIST
60216: PUSH
60217: LD_INT 2
60219: PUSH
60220: LD_INT 3
60222: PUSH
60223: EMPTY
60224: LIST
60225: LIST
60226: PUSH
60227: LD_INT 4
60229: PUSH
60230: LD_INT 3
60232: PUSH
60233: EMPTY
60234: LIST
60235: LIST
60236: PUSH
60237: LD_INT 4
60239: PUSH
60240: LD_INT 4
60242: PUSH
60243: EMPTY
60244: LIST
60245: LIST
60246: PUSH
60247: LD_INT 3
60249: PUSH
60250: LD_INT 4
60252: PUSH
60253: EMPTY
60254: LIST
60255: LIST
60256: PUSH
60257: LD_INT 5
60259: PUSH
60260: LD_INT 4
60262: PUSH
60263: EMPTY
60264: LIST
60265: LIST
60266: PUSH
60267: LD_INT 5
60269: PUSH
60270: LD_INT 5
60272: PUSH
60273: EMPTY
60274: LIST
60275: LIST
60276: PUSH
60277: LD_INT 4
60279: PUSH
60280: LD_INT 5
60282: PUSH
60283: EMPTY
60284: LIST
60285: LIST
60286: PUSH
60287: LD_INT 6
60289: PUSH
60290: LD_INT 5
60292: PUSH
60293: EMPTY
60294: LIST
60295: LIST
60296: PUSH
60297: LD_INT 6
60299: PUSH
60300: LD_INT 6
60302: PUSH
60303: EMPTY
60304: LIST
60305: LIST
60306: PUSH
60307: LD_INT 5
60309: PUSH
60310: LD_INT 6
60312: PUSH
60313: EMPTY
60314: LIST
60315: LIST
60316: PUSH
60317: EMPTY
60318: LIST
60319: LIST
60320: LIST
60321: LIST
60322: LIST
60323: LIST
60324: LIST
60325: LIST
60326: LIST
60327: LIST
60328: LIST
60329: LIST
60330: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
60331: LD_ADDR_VAR 0 32
60335: PUSH
60336: LD_INT 1
60338: PUSH
60339: LD_INT 3
60341: PUSH
60342: EMPTY
60343: LIST
60344: LIST
60345: PUSH
60346: LD_INT 0
60348: PUSH
60349: LD_INT 3
60351: PUSH
60352: EMPTY
60353: LIST
60354: LIST
60355: PUSH
60356: LD_INT 1
60358: NEG
60359: PUSH
60360: LD_INT 2
60362: PUSH
60363: EMPTY
60364: LIST
60365: LIST
60366: PUSH
60367: LD_INT 1
60369: PUSH
60370: LD_INT 4
60372: PUSH
60373: EMPTY
60374: LIST
60375: LIST
60376: PUSH
60377: LD_INT 0
60379: PUSH
60380: LD_INT 4
60382: PUSH
60383: EMPTY
60384: LIST
60385: LIST
60386: PUSH
60387: LD_INT 1
60389: NEG
60390: PUSH
60391: LD_INT 3
60393: PUSH
60394: EMPTY
60395: LIST
60396: LIST
60397: PUSH
60398: LD_INT 1
60400: PUSH
60401: LD_INT 5
60403: PUSH
60404: EMPTY
60405: LIST
60406: LIST
60407: PUSH
60408: LD_INT 0
60410: PUSH
60411: LD_INT 5
60413: PUSH
60414: EMPTY
60415: LIST
60416: LIST
60417: PUSH
60418: LD_INT 1
60420: NEG
60421: PUSH
60422: LD_INT 4
60424: PUSH
60425: EMPTY
60426: LIST
60427: LIST
60428: PUSH
60429: LD_INT 1
60431: PUSH
60432: LD_INT 6
60434: PUSH
60435: EMPTY
60436: LIST
60437: LIST
60438: PUSH
60439: LD_INT 0
60441: PUSH
60442: LD_INT 6
60444: PUSH
60445: EMPTY
60446: LIST
60447: LIST
60448: PUSH
60449: LD_INT 1
60451: NEG
60452: PUSH
60453: LD_INT 5
60455: PUSH
60456: EMPTY
60457: LIST
60458: LIST
60459: PUSH
60460: EMPTY
60461: LIST
60462: LIST
60463: LIST
60464: LIST
60465: LIST
60466: LIST
60467: LIST
60468: LIST
60469: LIST
60470: LIST
60471: LIST
60472: LIST
60473: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
60474: LD_ADDR_VAR 0 33
60478: PUSH
60479: LD_INT 2
60481: NEG
60482: PUSH
60483: LD_INT 1
60485: PUSH
60486: EMPTY
60487: LIST
60488: LIST
60489: PUSH
60490: LD_INT 3
60492: NEG
60493: PUSH
60494: LD_INT 0
60496: PUSH
60497: EMPTY
60498: LIST
60499: LIST
60500: PUSH
60501: LD_INT 3
60503: NEG
60504: PUSH
60505: LD_INT 1
60507: NEG
60508: PUSH
60509: EMPTY
60510: LIST
60511: LIST
60512: PUSH
60513: LD_INT 3
60515: NEG
60516: PUSH
60517: LD_INT 1
60519: PUSH
60520: EMPTY
60521: LIST
60522: LIST
60523: PUSH
60524: LD_INT 4
60526: NEG
60527: PUSH
60528: LD_INT 0
60530: PUSH
60531: EMPTY
60532: LIST
60533: LIST
60534: PUSH
60535: LD_INT 4
60537: NEG
60538: PUSH
60539: LD_INT 1
60541: NEG
60542: PUSH
60543: EMPTY
60544: LIST
60545: LIST
60546: PUSH
60547: LD_INT 4
60549: NEG
60550: PUSH
60551: LD_INT 1
60553: PUSH
60554: EMPTY
60555: LIST
60556: LIST
60557: PUSH
60558: LD_INT 5
60560: NEG
60561: PUSH
60562: LD_INT 0
60564: PUSH
60565: EMPTY
60566: LIST
60567: LIST
60568: PUSH
60569: LD_INT 5
60571: NEG
60572: PUSH
60573: LD_INT 1
60575: NEG
60576: PUSH
60577: EMPTY
60578: LIST
60579: LIST
60580: PUSH
60581: LD_INT 5
60583: NEG
60584: PUSH
60585: LD_INT 1
60587: PUSH
60588: EMPTY
60589: LIST
60590: LIST
60591: PUSH
60592: LD_INT 6
60594: NEG
60595: PUSH
60596: LD_INT 0
60598: PUSH
60599: EMPTY
60600: LIST
60601: LIST
60602: PUSH
60603: LD_INT 6
60605: NEG
60606: PUSH
60607: LD_INT 1
60609: NEG
60610: PUSH
60611: EMPTY
60612: LIST
60613: LIST
60614: PUSH
60615: EMPTY
60616: LIST
60617: LIST
60618: LIST
60619: LIST
60620: LIST
60621: LIST
60622: LIST
60623: LIST
60624: LIST
60625: LIST
60626: LIST
60627: LIST
60628: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
60629: LD_ADDR_VAR 0 34
60633: PUSH
60634: LD_INT 2
60636: NEG
60637: PUSH
60638: LD_INT 3
60640: NEG
60641: PUSH
60642: EMPTY
60643: LIST
60644: LIST
60645: PUSH
60646: LD_INT 3
60648: NEG
60649: PUSH
60650: LD_INT 2
60652: NEG
60653: PUSH
60654: EMPTY
60655: LIST
60656: LIST
60657: PUSH
60658: LD_INT 3
60660: NEG
60661: PUSH
60662: LD_INT 3
60664: NEG
60665: PUSH
60666: EMPTY
60667: LIST
60668: LIST
60669: PUSH
60670: LD_INT 3
60672: NEG
60673: PUSH
60674: LD_INT 4
60676: NEG
60677: PUSH
60678: EMPTY
60679: LIST
60680: LIST
60681: PUSH
60682: LD_INT 4
60684: NEG
60685: PUSH
60686: LD_INT 3
60688: NEG
60689: PUSH
60690: EMPTY
60691: LIST
60692: LIST
60693: PUSH
60694: LD_INT 4
60696: NEG
60697: PUSH
60698: LD_INT 4
60700: NEG
60701: PUSH
60702: EMPTY
60703: LIST
60704: LIST
60705: PUSH
60706: LD_INT 4
60708: NEG
60709: PUSH
60710: LD_INT 5
60712: NEG
60713: PUSH
60714: EMPTY
60715: LIST
60716: LIST
60717: PUSH
60718: LD_INT 5
60720: NEG
60721: PUSH
60722: LD_INT 4
60724: NEG
60725: PUSH
60726: EMPTY
60727: LIST
60728: LIST
60729: PUSH
60730: LD_INT 5
60732: NEG
60733: PUSH
60734: LD_INT 5
60736: NEG
60737: PUSH
60738: EMPTY
60739: LIST
60740: LIST
60741: PUSH
60742: LD_INT 5
60744: NEG
60745: PUSH
60746: LD_INT 6
60748: NEG
60749: PUSH
60750: EMPTY
60751: LIST
60752: LIST
60753: PUSH
60754: LD_INT 6
60756: NEG
60757: PUSH
60758: LD_INT 5
60760: NEG
60761: PUSH
60762: EMPTY
60763: LIST
60764: LIST
60765: PUSH
60766: LD_INT 6
60768: NEG
60769: PUSH
60770: LD_INT 6
60772: NEG
60773: PUSH
60774: EMPTY
60775: LIST
60776: LIST
60777: PUSH
60778: EMPTY
60779: LIST
60780: LIST
60781: LIST
60782: LIST
60783: LIST
60784: LIST
60785: LIST
60786: LIST
60787: LIST
60788: LIST
60789: LIST
60790: LIST
60791: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
60792: LD_ADDR_VAR 0 41
60796: PUSH
60797: LD_INT 0
60799: PUSH
60800: LD_INT 2
60802: NEG
60803: PUSH
60804: EMPTY
60805: LIST
60806: LIST
60807: PUSH
60808: LD_INT 1
60810: NEG
60811: PUSH
60812: LD_INT 3
60814: NEG
60815: PUSH
60816: EMPTY
60817: LIST
60818: LIST
60819: PUSH
60820: LD_INT 1
60822: PUSH
60823: LD_INT 2
60825: NEG
60826: PUSH
60827: EMPTY
60828: LIST
60829: LIST
60830: PUSH
60831: EMPTY
60832: LIST
60833: LIST
60834: LIST
60835: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
60836: LD_ADDR_VAR 0 42
60840: PUSH
60841: LD_INT 2
60843: PUSH
60844: LD_INT 0
60846: PUSH
60847: EMPTY
60848: LIST
60849: LIST
60850: PUSH
60851: LD_INT 2
60853: PUSH
60854: LD_INT 1
60856: NEG
60857: PUSH
60858: EMPTY
60859: LIST
60860: LIST
60861: PUSH
60862: LD_INT 3
60864: PUSH
60865: LD_INT 1
60867: PUSH
60868: EMPTY
60869: LIST
60870: LIST
60871: PUSH
60872: EMPTY
60873: LIST
60874: LIST
60875: LIST
60876: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
60877: LD_ADDR_VAR 0 43
60881: PUSH
60882: LD_INT 2
60884: PUSH
60885: LD_INT 2
60887: PUSH
60888: EMPTY
60889: LIST
60890: LIST
60891: PUSH
60892: LD_INT 3
60894: PUSH
60895: LD_INT 2
60897: PUSH
60898: EMPTY
60899: LIST
60900: LIST
60901: PUSH
60902: LD_INT 2
60904: PUSH
60905: LD_INT 3
60907: PUSH
60908: EMPTY
60909: LIST
60910: LIST
60911: PUSH
60912: EMPTY
60913: LIST
60914: LIST
60915: LIST
60916: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
60917: LD_ADDR_VAR 0 44
60921: PUSH
60922: LD_INT 0
60924: PUSH
60925: LD_INT 2
60927: PUSH
60928: EMPTY
60929: LIST
60930: LIST
60931: PUSH
60932: LD_INT 1
60934: PUSH
60935: LD_INT 3
60937: PUSH
60938: EMPTY
60939: LIST
60940: LIST
60941: PUSH
60942: LD_INT 1
60944: NEG
60945: PUSH
60946: LD_INT 2
60948: PUSH
60949: EMPTY
60950: LIST
60951: LIST
60952: PUSH
60953: EMPTY
60954: LIST
60955: LIST
60956: LIST
60957: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60958: LD_ADDR_VAR 0 45
60962: PUSH
60963: LD_INT 2
60965: NEG
60966: PUSH
60967: LD_INT 0
60969: PUSH
60970: EMPTY
60971: LIST
60972: LIST
60973: PUSH
60974: LD_INT 2
60976: NEG
60977: PUSH
60978: LD_INT 1
60980: PUSH
60981: EMPTY
60982: LIST
60983: LIST
60984: PUSH
60985: LD_INT 3
60987: NEG
60988: PUSH
60989: LD_INT 1
60991: NEG
60992: PUSH
60993: EMPTY
60994: LIST
60995: LIST
60996: PUSH
60997: EMPTY
60998: LIST
60999: LIST
61000: LIST
61001: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
61002: LD_ADDR_VAR 0 46
61006: PUSH
61007: LD_INT 2
61009: NEG
61010: PUSH
61011: LD_INT 2
61013: NEG
61014: PUSH
61015: EMPTY
61016: LIST
61017: LIST
61018: PUSH
61019: LD_INT 2
61021: NEG
61022: PUSH
61023: LD_INT 3
61025: NEG
61026: PUSH
61027: EMPTY
61028: LIST
61029: LIST
61030: PUSH
61031: LD_INT 3
61033: NEG
61034: PUSH
61035: LD_INT 2
61037: NEG
61038: PUSH
61039: EMPTY
61040: LIST
61041: LIST
61042: PUSH
61043: EMPTY
61044: LIST
61045: LIST
61046: LIST
61047: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
61048: LD_ADDR_VAR 0 47
61052: PUSH
61053: LD_INT 2
61055: NEG
61056: PUSH
61057: LD_INT 3
61059: NEG
61060: PUSH
61061: EMPTY
61062: LIST
61063: LIST
61064: PUSH
61065: LD_INT 1
61067: NEG
61068: PUSH
61069: LD_INT 3
61071: NEG
61072: PUSH
61073: EMPTY
61074: LIST
61075: LIST
61076: PUSH
61077: EMPTY
61078: LIST
61079: LIST
61080: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
61081: LD_ADDR_VAR 0 48
61085: PUSH
61086: LD_INT 1
61088: PUSH
61089: LD_INT 2
61091: NEG
61092: PUSH
61093: EMPTY
61094: LIST
61095: LIST
61096: PUSH
61097: LD_INT 2
61099: PUSH
61100: LD_INT 1
61102: NEG
61103: PUSH
61104: EMPTY
61105: LIST
61106: LIST
61107: PUSH
61108: EMPTY
61109: LIST
61110: LIST
61111: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
61112: LD_ADDR_VAR 0 49
61116: PUSH
61117: LD_INT 3
61119: PUSH
61120: LD_INT 1
61122: PUSH
61123: EMPTY
61124: LIST
61125: LIST
61126: PUSH
61127: LD_INT 3
61129: PUSH
61130: LD_INT 2
61132: PUSH
61133: EMPTY
61134: LIST
61135: LIST
61136: PUSH
61137: EMPTY
61138: LIST
61139: LIST
61140: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
61141: LD_ADDR_VAR 0 50
61145: PUSH
61146: LD_INT 2
61148: PUSH
61149: LD_INT 3
61151: PUSH
61152: EMPTY
61153: LIST
61154: LIST
61155: PUSH
61156: LD_INT 1
61158: PUSH
61159: LD_INT 3
61161: PUSH
61162: EMPTY
61163: LIST
61164: LIST
61165: PUSH
61166: EMPTY
61167: LIST
61168: LIST
61169: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
61170: LD_ADDR_VAR 0 51
61174: PUSH
61175: LD_INT 1
61177: NEG
61178: PUSH
61179: LD_INT 2
61181: PUSH
61182: EMPTY
61183: LIST
61184: LIST
61185: PUSH
61186: LD_INT 2
61188: NEG
61189: PUSH
61190: LD_INT 1
61192: PUSH
61193: EMPTY
61194: LIST
61195: LIST
61196: PUSH
61197: EMPTY
61198: LIST
61199: LIST
61200: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
61201: LD_ADDR_VAR 0 52
61205: PUSH
61206: LD_INT 3
61208: NEG
61209: PUSH
61210: LD_INT 1
61212: NEG
61213: PUSH
61214: EMPTY
61215: LIST
61216: LIST
61217: PUSH
61218: LD_INT 3
61220: NEG
61221: PUSH
61222: LD_INT 2
61224: NEG
61225: PUSH
61226: EMPTY
61227: LIST
61228: LIST
61229: PUSH
61230: EMPTY
61231: LIST
61232: LIST
61233: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
61234: LD_ADDR_VAR 0 53
61238: PUSH
61239: LD_INT 1
61241: NEG
61242: PUSH
61243: LD_INT 3
61245: NEG
61246: PUSH
61247: EMPTY
61248: LIST
61249: LIST
61250: PUSH
61251: LD_INT 0
61253: PUSH
61254: LD_INT 3
61256: NEG
61257: PUSH
61258: EMPTY
61259: LIST
61260: LIST
61261: PUSH
61262: LD_INT 1
61264: PUSH
61265: LD_INT 2
61267: NEG
61268: PUSH
61269: EMPTY
61270: LIST
61271: LIST
61272: PUSH
61273: EMPTY
61274: LIST
61275: LIST
61276: LIST
61277: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
61278: LD_ADDR_VAR 0 54
61282: PUSH
61283: LD_INT 2
61285: PUSH
61286: LD_INT 1
61288: NEG
61289: PUSH
61290: EMPTY
61291: LIST
61292: LIST
61293: PUSH
61294: LD_INT 3
61296: PUSH
61297: LD_INT 0
61299: PUSH
61300: EMPTY
61301: LIST
61302: LIST
61303: PUSH
61304: LD_INT 3
61306: PUSH
61307: LD_INT 1
61309: PUSH
61310: EMPTY
61311: LIST
61312: LIST
61313: PUSH
61314: EMPTY
61315: LIST
61316: LIST
61317: LIST
61318: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
61319: LD_ADDR_VAR 0 55
61323: PUSH
61324: LD_INT 3
61326: PUSH
61327: LD_INT 2
61329: PUSH
61330: EMPTY
61331: LIST
61332: LIST
61333: PUSH
61334: LD_INT 3
61336: PUSH
61337: LD_INT 3
61339: PUSH
61340: EMPTY
61341: LIST
61342: LIST
61343: PUSH
61344: LD_INT 2
61346: PUSH
61347: LD_INT 3
61349: PUSH
61350: EMPTY
61351: LIST
61352: LIST
61353: PUSH
61354: EMPTY
61355: LIST
61356: LIST
61357: LIST
61358: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
61359: LD_ADDR_VAR 0 56
61363: PUSH
61364: LD_INT 1
61366: PUSH
61367: LD_INT 3
61369: PUSH
61370: EMPTY
61371: LIST
61372: LIST
61373: PUSH
61374: LD_INT 0
61376: PUSH
61377: LD_INT 3
61379: PUSH
61380: EMPTY
61381: LIST
61382: LIST
61383: PUSH
61384: LD_INT 1
61386: NEG
61387: PUSH
61388: LD_INT 2
61390: PUSH
61391: EMPTY
61392: LIST
61393: LIST
61394: PUSH
61395: EMPTY
61396: LIST
61397: LIST
61398: LIST
61399: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61400: LD_ADDR_VAR 0 57
61404: PUSH
61405: LD_INT 2
61407: NEG
61408: PUSH
61409: LD_INT 1
61411: PUSH
61412: EMPTY
61413: LIST
61414: LIST
61415: PUSH
61416: LD_INT 3
61418: NEG
61419: PUSH
61420: LD_INT 0
61422: PUSH
61423: EMPTY
61424: LIST
61425: LIST
61426: PUSH
61427: LD_INT 3
61429: NEG
61430: PUSH
61431: LD_INT 1
61433: NEG
61434: PUSH
61435: EMPTY
61436: LIST
61437: LIST
61438: PUSH
61439: EMPTY
61440: LIST
61441: LIST
61442: LIST
61443: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61444: LD_ADDR_VAR 0 58
61448: PUSH
61449: LD_INT 2
61451: NEG
61452: PUSH
61453: LD_INT 3
61455: NEG
61456: PUSH
61457: EMPTY
61458: LIST
61459: LIST
61460: PUSH
61461: LD_INT 3
61463: NEG
61464: PUSH
61465: LD_INT 2
61467: NEG
61468: PUSH
61469: EMPTY
61470: LIST
61471: LIST
61472: PUSH
61473: LD_INT 3
61475: NEG
61476: PUSH
61477: LD_INT 3
61479: NEG
61480: PUSH
61481: EMPTY
61482: LIST
61483: LIST
61484: PUSH
61485: EMPTY
61486: LIST
61487: LIST
61488: LIST
61489: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
61490: LD_ADDR_VAR 0 59
61494: PUSH
61495: LD_INT 1
61497: NEG
61498: PUSH
61499: LD_INT 2
61501: NEG
61502: PUSH
61503: EMPTY
61504: LIST
61505: LIST
61506: PUSH
61507: LD_INT 0
61509: PUSH
61510: LD_INT 2
61512: NEG
61513: PUSH
61514: EMPTY
61515: LIST
61516: LIST
61517: PUSH
61518: LD_INT 1
61520: PUSH
61521: LD_INT 1
61523: NEG
61524: PUSH
61525: EMPTY
61526: LIST
61527: LIST
61528: PUSH
61529: EMPTY
61530: LIST
61531: LIST
61532: LIST
61533: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
61534: LD_ADDR_VAR 0 60
61538: PUSH
61539: LD_INT 1
61541: PUSH
61542: LD_INT 1
61544: NEG
61545: PUSH
61546: EMPTY
61547: LIST
61548: LIST
61549: PUSH
61550: LD_INT 2
61552: PUSH
61553: LD_INT 0
61555: PUSH
61556: EMPTY
61557: LIST
61558: LIST
61559: PUSH
61560: LD_INT 2
61562: PUSH
61563: LD_INT 1
61565: PUSH
61566: EMPTY
61567: LIST
61568: LIST
61569: PUSH
61570: EMPTY
61571: LIST
61572: LIST
61573: LIST
61574: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
61575: LD_ADDR_VAR 0 61
61579: PUSH
61580: LD_INT 2
61582: PUSH
61583: LD_INT 1
61585: PUSH
61586: EMPTY
61587: LIST
61588: LIST
61589: PUSH
61590: LD_INT 2
61592: PUSH
61593: LD_INT 2
61595: PUSH
61596: EMPTY
61597: LIST
61598: LIST
61599: PUSH
61600: LD_INT 1
61602: PUSH
61603: LD_INT 2
61605: PUSH
61606: EMPTY
61607: LIST
61608: LIST
61609: PUSH
61610: EMPTY
61611: LIST
61612: LIST
61613: LIST
61614: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
61615: LD_ADDR_VAR 0 62
61619: PUSH
61620: LD_INT 1
61622: PUSH
61623: LD_INT 2
61625: PUSH
61626: EMPTY
61627: LIST
61628: LIST
61629: PUSH
61630: LD_INT 0
61632: PUSH
61633: LD_INT 2
61635: PUSH
61636: EMPTY
61637: LIST
61638: LIST
61639: PUSH
61640: LD_INT 1
61642: NEG
61643: PUSH
61644: LD_INT 1
61646: PUSH
61647: EMPTY
61648: LIST
61649: LIST
61650: PUSH
61651: EMPTY
61652: LIST
61653: LIST
61654: LIST
61655: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
61656: LD_ADDR_VAR 0 63
61660: PUSH
61661: LD_INT 1
61663: NEG
61664: PUSH
61665: LD_INT 1
61667: PUSH
61668: EMPTY
61669: LIST
61670: LIST
61671: PUSH
61672: LD_INT 2
61674: NEG
61675: PUSH
61676: LD_INT 0
61678: PUSH
61679: EMPTY
61680: LIST
61681: LIST
61682: PUSH
61683: LD_INT 2
61685: NEG
61686: PUSH
61687: LD_INT 1
61689: NEG
61690: PUSH
61691: EMPTY
61692: LIST
61693: LIST
61694: PUSH
61695: EMPTY
61696: LIST
61697: LIST
61698: LIST
61699: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61700: LD_ADDR_VAR 0 64
61704: PUSH
61705: LD_INT 1
61707: NEG
61708: PUSH
61709: LD_INT 2
61711: NEG
61712: PUSH
61713: EMPTY
61714: LIST
61715: LIST
61716: PUSH
61717: LD_INT 2
61719: NEG
61720: PUSH
61721: LD_INT 1
61723: NEG
61724: PUSH
61725: EMPTY
61726: LIST
61727: LIST
61728: PUSH
61729: LD_INT 2
61731: NEG
61732: PUSH
61733: LD_INT 2
61735: NEG
61736: PUSH
61737: EMPTY
61738: LIST
61739: LIST
61740: PUSH
61741: EMPTY
61742: LIST
61743: LIST
61744: LIST
61745: ST_TO_ADDR
// end ; 2 :
61746: GO 65012
61748: LD_INT 2
61750: DOUBLE
61751: EQUAL
61752: IFTRUE 61756
61754: GO 65011
61756: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
61757: LD_ADDR_VAR 0 29
61761: PUSH
61762: LD_INT 4
61764: PUSH
61765: LD_INT 0
61767: PUSH
61768: EMPTY
61769: LIST
61770: LIST
61771: PUSH
61772: LD_INT 4
61774: PUSH
61775: LD_INT 1
61777: NEG
61778: PUSH
61779: EMPTY
61780: LIST
61781: LIST
61782: PUSH
61783: LD_INT 5
61785: PUSH
61786: LD_INT 0
61788: PUSH
61789: EMPTY
61790: LIST
61791: LIST
61792: PUSH
61793: LD_INT 5
61795: PUSH
61796: LD_INT 1
61798: PUSH
61799: EMPTY
61800: LIST
61801: LIST
61802: PUSH
61803: LD_INT 4
61805: PUSH
61806: LD_INT 1
61808: PUSH
61809: EMPTY
61810: LIST
61811: LIST
61812: PUSH
61813: LD_INT 3
61815: PUSH
61816: LD_INT 0
61818: PUSH
61819: EMPTY
61820: LIST
61821: LIST
61822: PUSH
61823: LD_INT 3
61825: PUSH
61826: LD_INT 1
61828: NEG
61829: PUSH
61830: EMPTY
61831: LIST
61832: LIST
61833: PUSH
61834: LD_INT 3
61836: PUSH
61837: LD_INT 2
61839: NEG
61840: PUSH
61841: EMPTY
61842: LIST
61843: LIST
61844: PUSH
61845: LD_INT 5
61847: PUSH
61848: LD_INT 2
61850: PUSH
61851: EMPTY
61852: LIST
61853: LIST
61854: PUSH
61855: LD_INT 3
61857: PUSH
61858: LD_INT 3
61860: PUSH
61861: EMPTY
61862: LIST
61863: LIST
61864: PUSH
61865: LD_INT 3
61867: PUSH
61868: LD_INT 2
61870: PUSH
61871: EMPTY
61872: LIST
61873: LIST
61874: PUSH
61875: LD_INT 4
61877: PUSH
61878: LD_INT 3
61880: PUSH
61881: EMPTY
61882: LIST
61883: LIST
61884: PUSH
61885: LD_INT 4
61887: PUSH
61888: LD_INT 4
61890: PUSH
61891: EMPTY
61892: LIST
61893: LIST
61894: PUSH
61895: LD_INT 3
61897: PUSH
61898: LD_INT 4
61900: PUSH
61901: EMPTY
61902: LIST
61903: LIST
61904: PUSH
61905: LD_INT 2
61907: PUSH
61908: LD_INT 3
61910: PUSH
61911: EMPTY
61912: LIST
61913: LIST
61914: PUSH
61915: LD_INT 2
61917: PUSH
61918: LD_INT 2
61920: PUSH
61921: EMPTY
61922: LIST
61923: LIST
61924: PUSH
61925: LD_INT 4
61927: PUSH
61928: LD_INT 2
61930: PUSH
61931: EMPTY
61932: LIST
61933: LIST
61934: PUSH
61935: LD_INT 2
61937: PUSH
61938: LD_INT 4
61940: PUSH
61941: EMPTY
61942: LIST
61943: LIST
61944: PUSH
61945: LD_INT 0
61947: PUSH
61948: LD_INT 4
61950: PUSH
61951: EMPTY
61952: LIST
61953: LIST
61954: PUSH
61955: LD_INT 0
61957: PUSH
61958: LD_INT 3
61960: PUSH
61961: EMPTY
61962: LIST
61963: LIST
61964: PUSH
61965: LD_INT 1
61967: PUSH
61968: LD_INT 4
61970: PUSH
61971: EMPTY
61972: LIST
61973: LIST
61974: PUSH
61975: LD_INT 1
61977: PUSH
61978: LD_INT 5
61980: PUSH
61981: EMPTY
61982: LIST
61983: LIST
61984: PUSH
61985: LD_INT 0
61987: PUSH
61988: LD_INT 5
61990: PUSH
61991: EMPTY
61992: LIST
61993: LIST
61994: PUSH
61995: LD_INT 1
61997: NEG
61998: PUSH
61999: LD_INT 4
62001: PUSH
62002: EMPTY
62003: LIST
62004: LIST
62005: PUSH
62006: LD_INT 1
62008: NEG
62009: PUSH
62010: LD_INT 3
62012: PUSH
62013: EMPTY
62014: LIST
62015: LIST
62016: PUSH
62017: LD_INT 2
62019: PUSH
62020: LD_INT 5
62022: PUSH
62023: EMPTY
62024: LIST
62025: LIST
62026: PUSH
62027: LD_INT 2
62029: NEG
62030: PUSH
62031: LD_INT 3
62033: PUSH
62034: EMPTY
62035: LIST
62036: LIST
62037: PUSH
62038: LD_INT 3
62040: NEG
62041: PUSH
62042: LD_INT 0
62044: PUSH
62045: EMPTY
62046: LIST
62047: LIST
62048: PUSH
62049: LD_INT 3
62051: NEG
62052: PUSH
62053: LD_INT 1
62055: NEG
62056: PUSH
62057: EMPTY
62058: LIST
62059: LIST
62060: PUSH
62061: LD_INT 2
62063: NEG
62064: PUSH
62065: LD_INT 0
62067: PUSH
62068: EMPTY
62069: LIST
62070: LIST
62071: PUSH
62072: LD_INT 2
62074: NEG
62075: PUSH
62076: LD_INT 1
62078: PUSH
62079: EMPTY
62080: LIST
62081: LIST
62082: PUSH
62083: LD_INT 3
62085: NEG
62086: PUSH
62087: LD_INT 1
62089: PUSH
62090: EMPTY
62091: LIST
62092: LIST
62093: PUSH
62094: LD_INT 4
62096: NEG
62097: PUSH
62098: LD_INT 0
62100: PUSH
62101: EMPTY
62102: LIST
62103: LIST
62104: PUSH
62105: LD_INT 4
62107: NEG
62108: PUSH
62109: LD_INT 1
62111: NEG
62112: PUSH
62113: EMPTY
62114: LIST
62115: LIST
62116: PUSH
62117: LD_INT 4
62119: NEG
62120: PUSH
62121: LD_INT 2
62123: NEG
62124: PUSH
62125: EMPTY
62126: LIST
62127: LIST
62128: PUSH
62129: LD_INT 2
62131: NEG
62132: PUSH
62133: LD_INT 2
62135: PUSH
62136: EMPTY
62137: LIST
62138: LIST
62139: PUSH
62140: LD_INT 4
62142: NEG
62143: PUSH
62144: LD_INT 4
62146: NEG
62147: PUSH
62148: EMPTY
62149: LIST
62150: LIST
62151: PUSH
62152: LD_INT 4
62154: NEG
62155: PUSH
62156: LD_INT 5
62158: NEG
62159: PUSH
62160: EMPTY
62161: LIST
62162: LIST
62163: PUSH
62164: LD_INT 3
62166: NEG
62167: PUSH
62168: LD_INT 4
62170: NEG
62171: PUSH
62172: EMPTY
62173: LIST
62174: LIST
62175: PUSH
62176: LD_INT 3
62178: NEG
62179: PUSH
62180: LD_INT 3
62182: NEG
62183: PUSH
62184: EMPTY
62185: LIST
62186: LIST
62187: PUSH
62188: LD_INT 4
62190: NEG
62191: PUSH
62192: LD_INT 3
62194: NEG
62195: PUSH
62196: EMPTY
62197: LIST
62198: LIST
62199: PUSH
62200: LD_INT 5
62202: NEG
62203: PUSH
62204: LD_INT 4
62206: NEG
62207: PUSH
62208: EMPTY
62209: LIST
62210: LIST
62211: PUSH
62212: LD_INT 5
62214: NEG
62215: PUSH
62216: LD_INT 5
62218: NEG
62219: PUSH
62220: EMPTY
62221: LIST
62222: LIST
62223: PUSH
62224: LD_INT 3
62226: NEG
62227: PUSH
62228: LD_INT 5
62230: NEG
62231: PUSH
62232: EMPTY
62233: LIST
62234: LIST
62235: PUSH
62236: LD_INT 5
62238: NEG
62239: PUSH
62240: LD_INT 3
62242: NEG
62243: PUSH
62244: EMPTY
62245: LIST
62246: LIST
62247: PUSH
62248: EMPTY
62249: LIST
62250: LIST
62251: LIST
62252: LIST
62253: LIST
62254: LIST
62255: LIST
62256: LIST
62257: LIST
62258: LIST
62259: LIST
62260: LIST
62261: LIST
62262: LIST
62263: LIST
62264: LIST
62265: LIST
62266: LIST
62267: LIST
62268: LIST
62269: LIST
62270: LIST
62271: LIST
62272: LIST
62273: LIST
62274: LIST
62275: LIST
62276: LIST
62277: LIST
62278: LIST
62279: LIST
62280: LIST
62281: LIST
62282: LIST
62283: LIST
62284: LIST
62285: LIST
62286: LIST
62287: LIST
62288: LIST
62289: LIST
62290: LIST
62291: LIST
62292: LIST
62293: LIST
62294: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
62295: LD_ADDR_VAR 0 30
62299: PUSH
62300: LD_INT 4
62302: PUSH
62303: LD_INT 4
62305: PUSH
62306: EMPTY
62307: LIST
62308: LIST
62309: PUSH
62310: LD_INT 4
62312: PUSH
62313: LD_INT 3
62315: PUSH
62316: EMPTY
62317: LIST
62318: LIST
62319: PUSH
62320: LD_INT 5
62322: PUSH
62323: LD_INT 4
62325: PUSH
62326: EMPTY
62327: LIST
62328: LIST
62329: PUSH
62330: LD_INT 5
62332: PUSH
62333: LD_INT 5
62335: PUSH
62336: EMPTY
62337: LIST
62338: LIST
62339: PUSH
62340: LD_INT 4
62342: PUSH
62343: LD_INT 5
62345: PUSH
62346: EMPTY
62347: LIST
62348: LIST
62349: PUSH
62350: LD_INT 3
62352: PUSH
62353: LD_INT 4
62355: PUSH
62356: EMPTY
62357: LIST
62358: LIST
62359: PUSH
62360: LD_INT 3
62362: PUSH
62363: LD_INT 3
62365: PUSH
62366: EMPTY
62367: LIST
62368: LIST
62369: PUSH
62370: LD_INT 5
62372: PUSH
62373: LD_INT 3
62375: PUSH
62376: EMPTY
62377: LIST
62378: LIST
62379: PUSH
62380: LD_INT 3
62382: PUSH
62383: LD_INT 5
62385: PUSH
62386: EMPTY
62387: LIST
62388: LIST
62389: PUSH
62390: LD_INT 0
62392: PUSH
62393: LD_INT 3
62395: PUSH
62396: EMPTY
62397: LIST
62398: LIST
62399: PUSH
62400: LD_INT 0
62402: PUSH
62403: LD_INT 2
62405: PUSH
62406: EMPTY
62407: LIST
62408: LIST
62409: PUSH
62410: LD_INT 1
62412: PUSH
62413: LD_INT 3
62415: PUSH
62416: EMPTY
62417: LIST
62418: LIST
62419: PUSH
62420: LD_INT 1
62422: PUSH
62423: LD_INT 4
62425: PUSH
62426: EMPTY
62427: LIST
62428: LIST
62429: PUSH
62430: LD_INT 0
62432: PUSH
62433: LD_INT 4
62435: PUSH
62436: EMPTY
62437: LIST
62438: LIST
62439: PUSH
62440: LD_INT 1
62442: NEG
62443: PUSH
62444: LD_INT 3
62446: PUSH
62447: EMPTY
62448: LIST
62449: LIST
62450: PUSH
62451: LD_INT 1
62453: NEG
62454: PUSH
62455: LD_INT 2
62457: PUSH
62458: EMPTY
62459: LIST
62460: LIST
62461: PUSH
62462: LD_INT 2
62464: PUSH
62465: LD_INT 4
62467: PUSH
62468: EMPTY
62469: LIST
62470: LIST
62471: PUSH
62472: LD_INT 2
62474: NEG
62475: PUSH
62476: LD_INT 2
62478: PUSH
62479: EMPTY
62480: LIST
62481: LIST
62482: PUSH
62483: LD_INT 4
62485: NEG
62486: PUSH
62487: LD_INT 0
62489: PUSH
62490: EMPTY
62491: LIST
62492: LIST
62493: PUSH
62494: LD_INT 4
62496: NEG
62497: PUSH
62498: LD_INT 1
62500: NEG
62501: PUSH
62502: EMPTY
62503: LIST
62504: LIST
62505: PUSH
62506: LD_INT 3
62508: NEG
62509: PUSH
62510: LD_INT 0
62512: PUSH
62513: EMPTY
62514: LIST
62515: LIST
62516: PUSH
62517: LD_INT 3
62519: NEG
62520: PUSH
62521: LD_INT 1
62523: PUSH
62524: EMPTY
62525: LIST
62526: LIST
62527: PUSH
62528: LD_INT 4
62530: NEG
62531: PUSH
62532: LD_INT 1
62534: PUSH
62535: EMPTY
62536: LIST
62537: LIST
62538: PUSH
62539: LD_INT 5
62541: NEG
62542: PUSH
62543: LD_INT 0
62545: PUSH
62546: EMPTY
62547: LIST
62548: LIST
62549: PUSH
62550: LD_INT 5
62552: NEG
62553: PUSH
62554: LD_INT 1
62556: NEG
62557: PUSH
62558: EMPTY
62559: LIST
62560: LIST
62561: PUSH
62562: LD_INT 5
62564: NEG
62565: PUSH
62566: LD_INT 2
62568: NEG
62569: PUSH
62570: EMPTY
62571: LIST
62572: LIST
62573: PUSH
62574: LD_INT 3
62576: NEG
62577: PUSH
62578: LD_INT 2
62580: PUSH
62581: EMPTY
62582: LIST
62583: LIST
62584: PUSH
62585: LD_INT 3
62587: NEG
62588: PUSH
62589: LD_INT 3
62591: NEG
62592: PUSH
62593: EMPTY
62594: LIST
62595: LIST
62596: PUSH
62597: LD_INT 3
62599: NEG
62600: PUSH
62601: LD_INT 4
62603: NEG
62604: PUSH
62605: EMPTY
62606: LIST
62607: LIST
62608: PUSH
62609: LD_INT 2
62611: NEG
62612: PUSH
62613: LD_INT 3
62615: NEG
62616: PUSH
62617: EMPTY
62618: LIST
62619: LIST
62620: PUSH
62621: LD_INT 2
62623: NEG
62624: PUSH
62625: LD_INT 2
62627: NEG
62628: PUSH
62629: EMPTY
62630: LIST
62631: LIST
62632: PUSH
62633: LD_INT 3
62635: NEG
62636: PUSH
62637: LD_INT 2
62639: NEG
62640: PUSH
62641: EMPTY
62642: LIST
62643: LIST
62644: PUSH
62645: LD_INT 4
62647: NEG
62648: PUSH
62649: LD_INT 3
62651: NEG
62652: PUSH
62653: EMPTY
62654: LIST
62655: LIST
62656: PUSH
62657: LD_INT 4
62659: NEG
62660: PUSH
62661: LD_INT 4
62663: NEG
62664: PUSH
62665: EMPTY
62666: LIST
62667: LIST
62668: PUSH
62669: LD_INT 2
62671: NEG
62672: PUSH
62673: LD_INT 4
62675: NEG
62676: PUSH
62677: EMPTY
62678: LIST
62679: LIST
62680: PUSH
62681: LD_INT 4
62683: NEG
62684: PUSH
62685: LD_INT 2
62687: NEG
62688: PUSH
62689: EMPTY
62690: LIST
62691: LIST
62692: PUSH
62693: LD_INT 0
62695: PUSH
62696: LD_INT 4
62698: NEG
62699: PUSH
62700: EMPTY
62701: LIST
62702: LIST
62703: PUSH
62704: LD_INT 0
62706: PUSH
62707: LD_INT 5
62709: NEG
62710: PUSH
62711: EMPTY
62712: LIST
62713: LIST
62714: PUSH
62715: LD_INT 1
62717: PUSH
62718: LD_INT 4
62720: NEG
62721: PUSH
62722: EMPTY
62723: LIST
62724: LIST
62725: PUSH
62726: LD_INT 1
62728: PUSH
62729: LD_INT 3
62731: NEG
62732: PUSH
62733: EMPTY
62734: LIST
62735: LIST
62736: PUSH
62737: LD_INT 0
62739: PUSH
62740: LD_INT 3
62742: NEG
62743: PUSH
62744: EMPTY
62745: LIST
62746: LIST
62747: PUSH
62748: LD_INT 1
62750: NEG
62751: PUSH
62752: LD_INT 4
62754: NEG
62755: PUSH
62756: EMPTY
62757: LIST
62758: LIST
62759: PUSH
62760: LD_INT 1
62762: NEG
62763: PUSH
62764: LD_INT 5
62766: NEG
62767: PUSH
62768: EMPTY
62769: LIST
62770: LIST
62771: PUSH
62772: LD_INT 2
62774: PUSH
62775: LD_INT 3
62777: NEG
62778: PUSH
62779: EMPTY
62780: LIST
62781: LIST
62782: PUSH
62783: LD_INT 2
62785: NEG
62786: PUSH
62787: LD_INT 5
62789: NEG
62790: PUSH
62791: EMPTY
62792: LIST
62793: LIST
62794: PUSH
62795: EMPTY
62796: LIST
62797: LIST
62798: LIST
62799: LIST
62800: LIST
62801: LIST
62802: LIST
62803: LIST
62804: LIST
62805: LIST
62806: LIST
62807: LIST
62808: LIST
62809: LIST
62810: LIST
62811: LIST
62812: LIST
62813: LIST
62814: LIST
62815: LIST
62816: LIST
62817: LIST
62818: LIST
62819: LIST
62820: LIST
62821: LIST
62822: LIST
62823: LIST
62824: LIST
62825: LIST
62826: LIST
62827: LIST
62828: LIST
62829: LIST
62830: LIST
62831: LIST
62832: LIST
62833: LIST
62834: LIST
62835: LIST
62836: LIST
62837: LIST
62838: LIST
62839: LIST
62840: LIST
62841: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
62842: LD_ADDR_VAR 0 31
62846: PUSH
62847: LD_INT 0
62849: PUSH
62850: LD_INT 4
62852: PUSH
62853: EMPTY
62854: LIST
62855: LIST
62856: PUSH
62857: LD_INT 0
62859: PUSH
62860: LD_INT 3
62862: PUSH
62863: EMPTY
62864: LIST
62865: LIST
62866: PUSH
62867: LD_INT 1
62869: PUSH
62870: LD_INT 4
62872: PUSH
62873: EMPTY
62874: LIST
62875: LIST
62876: PUSH
62877: LD_INT 1
62879: PUSH
62880: LD_INT 5
62882: PUSH
62883: EMPTY
62884: LIST
62885: LIST
62886: PUSH
62887: LD_INT 0
62889: PUSH
62890: LD_INT 5
62892: PUSH
62893: EMPTY
62894: LIST
62895: LIST
62896: PUSH
62897: LD_INT 1
62899: NEG
62900: PUSH
62901: LD_INT 4
62903: PUSH
62904: EMPTY
62905: LIST
62906: LIST
62907: PUSH
62908: LD_INT 1
62910: NEG
62911: PUSH
62912: LD_INT 3
62914: PUSH
62915: EMPTY
62916: LIST
62917: LIST
62918: PUSH
62919: LD_INT 2
62921: PUSH
62922: LD_INT 5
62924: PUSH
62925: EMPTY
62926: LIST
62927: LIST
62928: PUSH
62929: LD_INT 2
62931: NEG
62932: PUSH
62933: LD_INT 3
62935: PUSH
62936: EMPTY
62937: LIST
62938: LIST
62939: PUSH
62940: LD_INT 3
62942: NEG
62943: PUSH
62944: LD_INT 0
62946: PUSH
62947: EMPTY
62948: LIST
62949: LIST
62950: PUSH
62951: LD_INT 3
62953: NEG
62954: PUSH
62955: LD_INT 1
62957: NEG
62958: PUSH
62959: EMPTY
62960: LIST
62961: LIST
62962: PUSH
62963: LD_INT 2
62965: NEG
62966: PUSH
62967: LD_INT 0
62969: PUSH
62970: EMPTY
62971: LIST
62972: LIST
62973: PUSH
62974: LD_INT 2
62976: NEG
62977: PUSH
62978: LD_INT 1
62980: PUSH
62981: EMPTY
62982: LIST
62983: LIST
62984: PUSH
62985: LD_INT 3
62987: NEG
62988: PUSH
62989: LD_INT 1
62991: PUSH
62992: EMPTY
62993: LIST
62994: LIST
62995: PUSH
62996: LD_INT 4
62998: NEG
62999: PUSH
63000: LD_INT 0
63002: PUSH
63003: EMPTY
63004: LIST
63005: LIST
63006: PUSH
63007: LD_INT 4
63009: NEG
63010: PUSH
63011: LD_INT 1
63013: NEG
63014: PUSH
63015: EMPTY
63016: LIST
63017: LIST
63018: PUSH
63019: LD_INT 4
63021: NEG
63022: PUSH
63023: LD_INT 2
63025: NEG
63026: PUSH
63027: EMPTY
63028: LIST
63029: LIST
63030: PUSH
63031: LD_INT 2
63033: NEG
63034: PUSH
63035: LD_INT 2
63037: PUSH
63038: EMPTY
63039: LIST
63040: LIST
63041: PUSH
63042: LD_INT 4
63044: NEG
63045: PUSH
63046: LD_INT 4
63048: NEG
63049: PUSH
63050: EMPTY
63051: LIST
63052: LIST
63053: PUSH
63054: LD_INT 4
63056: NEG
63057: PUSH
63058: LD_INT 5
63060: NEG
63061: PUSH
63062: EMPTY
63063: LIST
63064: LIST
63065: PUSH
63066: LD_INT 3
63068: NEG
63069: PUSH
63070: LD_INT 4
63072: NEG
63073: PUSH
63074: EMPTY
63075: LIST
63076: LIST
63077: PUSH
63078: LD_INT 3
63080: NEG
63081: PUSH
63082: LD_INT 3
63084: NEG
63085: PUSH
63086: EMPTY
63087: LIST
63088: LIST
63089: PUSH
63090: LD_INT 4
63092: NEG
63093: PUSH
63094: LD_INT 3
63096: NEG
63097: PUSH
63098: EMPTY
63099: LIST
63100: LIST
63101: PUSH
63102: LD_INT 5
63104: NEG
63105: PUSH
63106: LD_INT 4
63108: NEG
63109: PUSH
63110: EMPTY
63111: LIST
63112: LIST
63113: PUSH
63114: LD_INT 5
63116: NEG
63117: PUSH
63118: LD_INT 5
63120: NEG
63121: PUSH
63122: EMPTY
63123: LIST
63124: LIST
63125: PUSH
63126: LD_INT 3
63128: NEG
63129: PUSH
63130: LD_INT 5
63132: NEG
63133: PUSH
63134: EMPTY
63135: LIST
63136: LIST
63137: PUSH
63138: LD_INT 5
63140: NEG
63141: PUSH
63142: LD_INT 3
63144: NEG
63145: PUSH
63146: EMPTY
63147: LIST
63148: LIST
63149: PUSH
63150: LD_INT 0
63152: PUSH
63153: LD_INT 3
63155: NEG
63156: PUSH
63157: EMPTY
63158: LIST
63159: LIST
63160: PUSH
63161: LD_INT 0
63163: PUSH
63164: LD_INT 4
63166: NEG
63167: PUSH
63168: EMPTY
63169: LIST
63170: LIST
63171: PUSH
63172: LD_INT 1
63174: PUSH
63175: LD_INT 3
63177: NEG
63178: PUSH
63179: EMPTY
63180: LIST
63181: LIST
63182: PUSH
63183: LD_INT 1
63185: PUSH
63186: LD_INT 2
63188: NEG
63189: PUSH
63190: EMPTY
63191: LIST
63192: LIST
63193: PUSH
63194: LD_INT 0
63196: PUSH
63197: LD_INT 2
63199: NEG
63200: PUSH
63201: EMPTY
63202: LIST
63203: LIST
63204: PUSH
63205: LD_INT 1
63207: NEG
63208: PUSH
63209: LD_INT 3
63211: NEG
63212: PUSH
63213: EMPTY
63214: LIST
63215: LIST
63216: PUSH
63217: LD_INT 1
63219: NEG
63220: PUSH
63221: LD_INT 4
63223: NEG
63224: PUSH
63225: EMPTY
63226: LIST
63227: LIST
63228: PUSH
63229: LD_INT 2
63231: PUSH
63232: LD_INT 2
63234: NEG
63235: PUSH
63236: EMPTY
63237: LIST
63238: LIST
63239: PUSH
63240: LD_INT 2
63242: NEG
63243: PUSH
63244: LD_INT 4
63246: NEG
63247: PUSH
63248: EMPTY
63249: LIST
63250: LIST
63251: PUSH
63252: LD_INT 4
63254: PUSH
63255: LD_INT 0
63257: PUSH
63258: EMPTY
63259: LIST
63260: LIST
63261: PUSH
63262: LD_INT 4
63264: PUSH
63265: LD_INT 1
63267: NEG
63268: PUSH
63269: EMPTY
63270: LIST
63271: LIST
63272: PUSH
63273: LD_INT 5
63275: PUSH
63276: LD_INT 0
63278: PUSH
63279: EMPTY
63280: LIST
63281: LIST
63282: PUSH
63283: LD_INT 5
63285: PUSH
63286: LD_INT 1
63288: PUSH
63289: EMPTY
63290: LIST
63291: LIST
63292: PUSH
63293: LD_INT 4
63295: PUSH
63296: LD_INT 1
63298: PUSH
63299: EMPTY
63300: LIST
63301: LIST
63302: PUSH
63303: LD_INT 3
63305: PUSH
63306: LD_INT 0
63308: PUSH
63309: EMPTY
63310: LIST
63311: LIST
63312: PUSH
63313: LD_INT 3
63315: PUSH
63316: LD_INT 1
63318: NEG
63319: PUSH
63320: EMPTY
63321: LIST
63322: LIST
63323: PUSH
63324: LD_INT 3
63326: PUSH
63327: LD_INT 2
63329: NEG
63330: PUSH
63331: EMPTY
63332: LIST
63333: LIST
63334: PUSH
63335: LD_INT 5
63337: PUSH
63338: LD_INT 2
63340: PUSH
63341: EMPTY
63342: LIST
63343: LIST
63344: PUSH
63345: EMPTY
63346: LIST
63347: LIST
63348: LIST
63349: LIST
63350: LIST
63351: LIST
63352: LIST
63353: LIST
63354: LIST
63355: LIST
63356: LIST
63357: LIST
63358: LIST
63359: LIST
63360: LIST
63361: LIST
63362: LIST
63363: LIST
63364: LIST
63365: LIST
63366: LIST
63367: LIST
63368: LIST
63369: LIST
63370: LIST
63371: LIST
63372: LIST
63373: LIST
63374: LIST
63375: LIST
63376: LIST
63377: LIST
63378: LIST
63379: LIST
63380: LIST
63381: LIST
63382: LIST
63383: LIST
63384: LIST
63385: LIST
63386: LIST
63387: LIST
63388: LIST
63389: LIST
63390: LIST
63391: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
63392: LD_ADDR_VAR 0 32
63396: PUSH
63397: LD_INT 4
63399: NEG
63400: PUSH
63401: LD_INT 0
63403: PUSH
63404: EMPTY
63405: LIST
63406: LIST
63407: PUSH
63408: LD_INT 4
63410: NEG
63411: PUSH
63412: LD_INT 1
63414: NEG
63415: PUSH
63416: EMPTY
63417: LIST
63418: LIST
63419: PUSH
63420: LD_INT 3
63422: NEG
63423: PUSH
63424: LD_INT 0
63426: PUSH
63427: EMPTY
63428: LIST
63429: LIST
63430: PUSH
63431: LD_INT 3
63433: NEG
63434: PUSH
63435: LD_INT 1
63437: PUSH
63438: EMPTY
63439: LIST
63440: LIST
63441: PUSH
63442: LD_INT 4
63444: NEG
63445: PUSH
63446: LD_INT 1
63448: PUSH
63449: EMPTY
63450: LIST
63451: LIST
63452: PUSH
63453: LD_INT 5
63455: NEG
63456: PUSH
63457: LD_INT 0
63459: PUSH
63460: EMPTY
63461: LIST
63462: LIST
63463: PUSH
63464: LD_INT 5
63466: NEG
63467: PUSH
63468: LD_INT 1
63470: NEG
63471: PUSH
63472: EMPTY
63473: LIST
63474: LIST
63475: PUSH
63476: LD_INT 5
63478: NEG
63479: PUSH
63480: LD_INT 2
63482: NEG
63483: PUSH
63484: EMPTY
63485: LIST
63486: LIST
63487: PUSH
63488: LD_INT 3
63490: NEG
63491: PUSH
63492: LD_INT 2
63494: PUSH
63495: EMPTY
63496: LIST
63497: LIST
63498: PUSH
63499: LD_INT 3
63501: NEG
63502: PUSH
63503: LD_INT 3
63505: NEG
63506: PUSH
63507: EMPTY
63508: LIST
63509: LIST
63510: PUSH
63511: LD_INT 3
63513: NEG
63514: PUSH
63515: LD_INT 4
63517: NEG
63518: PUSH
63519: EMPTY
63520: LIST
63521: LIST
63522: PUSH
63523: LD_INT 2
63525: NEG
63526: PUSH
63527: LD_INT 3
63529: NEG
63530: PUSH
63531: EMPTY
63532: LIST
63533: LIST
63534: PUSH
63535: LD_INT 2
63537: NEG
63538: PUSH
63539: LD_INT 2
63541: NEG
63542: PUSH
63543: EMPTY
63544: LIST
63545: LIST
63546: PUSH
63547: LD_INT 3
63549: NEG
63550: PUSH
63551: LD_INT 2
63553: NEG
63554: PUSH
63555: EMPTY
63556: LIST
63557: LIST
63558: PUSH
63559: LD_INT 4
63561: NEG
63562: PUSH
63563: LD_INT 3
63565: NEG
63566: PUSH
63567: EMPTY
63568: LIST
63569: LIST
63570: PUSH
63571: LD_INT 4
63573: NEG
63574: PUSH
63575: LD_INT 4
63577: NEG
63578: PUSH
63579: EMPTY
63580: LIST
63581: LIST
63582: PUSH
63583: LD_INT 2
63585: NEG
63586: PUSH
63587: LD_INT 4
63589: NEG
63590: PUSH
63591: EMPTY
63592: LIST
63593: LIST
63594: PUSH
63595: LD_INT 4
63597: NEG
63598: PUSH
63599: LD_INT 2
63601: NEG
63602: PUSH
63603: EMPTY
63604: LIST
63605: LIST
63606: PUSH
63607: LD_INT 0
63609: PUSH
63610: LD_INT 4
63612: NEG
63613: PUSH
63614: EMPTY
63615: LIST
63616: LIST
63617: PUSH
63618: LD_INT 0
63620: PUSH
63621: LD_INT 5
63623: NEG
63624: PUSH
63625: EMPTY
63626: LIST
63627: LIST
63628: PUSH
63629: LD_INT 1
63631: PUSH
63632: LD_INT 4
63634: NEG
63635: PUSH
63636: EMPTY
63637: LIST
63638: LIST
63639: PUSH
63640: LD_INT 1
63642: PUSH
63643: LD_INT 3
63645: NEG
63646: PUSH
63647: EMPTY
63648: LIST
63649: LIST
63650: PUSH
63651: LD_INT 0
63653: PUSH
63654: LD_INT 3
63656: NEG
63657: PUSH
63658: EMPTY
63659: LIST
63660: LIST
63661: PUSH
63662: LD_INT 1
63664: NEG
63665: PUSH
63666: LD_INT 4
63668: NEG
63669: PUSH
63670: EMPTY
63671: LIST
63672: LIST
63673: PUSH
63674: LD_INT 1
63676: NEG
63677: PUSH
63678: LD_INT 5
63680: NEG
63681: PUSH
63682: EMPTY
63683: LIST
63684: LIST
63685: PUSH
63686: LD_INT 2
63688: PUSH
63689: LD_INT 3
63691: NEG
63692: PUSH
63693: EMPTY
63694: LIST
63695: LIST
63696: PUSH
63697: LD_INT 2
63699: NEG
63700: PUSH
63701: LD_INT 5
63703: NEG
63704: PUSH
63705: EMPTY
63706: LIST
63707: LIST
63708: PUSH
63709: LD_INT 3
63711: PUSH
63712: LD_INT 0
63714: PUSH
63715: EMPTY
63716: LIST
63717: LIST
63718: PUSH
63719: LD_INT 3
63721: PUSH
63722: LD_INT 1
63724: NEG
63725: PUSH
63726: EMPTY
63727: LIST
63728: LIST
63729: PUSH
63730: LD_INT 4
63732: PUSH
63733: LD_INT 0
63735: PUSH
63736: EMPTY
63737: LIST
63738: LIST
63739: PUSH
63740: LD_INT 4
63742: PUSH
63743: LD_INT 1
63745: PUSH
63746: EMPTY
63747: LIST
63748: LIST
63749: PUSH
63750: LD_INT 3
63752: PUSH
63753: LD_INT 1
63755: PUSH
63756: EMPTY
63757: LIST
63758: LIST
63759: PUSH
63760: LD_INT 2
63762: PUSH
63763: LD_INT 0
63765: PUSH
63766: EMPTY
63767: LIST
63768: LIST
63769: PUSH
63770: LD_INT 2
63772: PUSH
63773: LD_INT 1
63775: NEG
63776: PUSH
63777: EMPTY
63778: LIST
63779: LIST
63780: PUSH
63781: LD_INT 2
63783: PUSH
63784: LD_INT 2
63786: NEG
63787: PUSH
63788: EMPTY
63789: LIST
63790: LIST
63791: PUSH
63792: LD_INT 4
63794: PUSH
63795: LD_INT 2
63797: PUSH
63798: EMPTY
63799: LIST
63800: LIST
63801: PUSH
63802: LD_INT 4
63804: PUSH
63805: LD_INT 4
63807: PUSH
63808: EMPTY
63809: LIST
63810: LIST
63811: PUSH
63812: LD_INT 4
63814: PUSH
63815: LD_INT 3
63817: PUSH
63818: EMPTY
63819: LIST
63820: LIST
63821: PUSH
63822: LD_INT 5
63824: PUSH
63825: LD_INT 4
63827: PUSH
63828: EMPTY
63829: LIST
63830: LIST
63831: PUSH
63832: LD_INT 5
63834: PUSH
63835: LD_INT 5
63837: PUSH
63838: EMPTY
63839: LIST
63840: LIST
63841: PUSH
63842: LD_INT 4
63844: PUSH
63845: LD_INT 5
63847: PUSH
63848: EMPTY
63849: LIST
63850: LIST
63851: PUSH
63852: LD_INT 3
63854: PUSH
63855: LD_INT 4
63857: PUSH
63858: EMPTY
63859: LIST
63860: LIST
63861: PUSH
63862: LD_INT 3
63864: PUSH
63865: LD_INT 3
63867: PUSH
63868: EMPTY
63869: LIST
63870: LIST
63871: PUSH
63872: LD_INT 5
63874: PUSH
63875: LD_INT 3
63877: PUSH
63878: EMPTY
63879: LIST
63880: LIST
63881: PUSH
63882: LD_INT 3
63884: PUSH
63885: LD_INT 5
63887: PUSH
63888: EMPTY
63889: LIST
63890: LIST
63891: PUSH
63892: EMPTY
63893: LIST
63894: LIST
63895: LIST
63896: LIST
63897: LIST
63898: LIST
63899: LIST
63900: LIST
63901: LIST
63902: LIST
63903: LIST
63904: LIST
63905: LIST
63906: LIST
63907: LIST
63908: LIST
63909: LIST
63910: LIST
63911: LIST
63912: LIST
63913: LIST
63914: LIST
63915: LIST
63916: LIST
63917: LIST
63918: LIST
63919: LIST
63920: LIST
63921: LIST
63922: LIST
63923: LIST
63924: LIST
63925: LIST
63926: LIST
63927: LIST
63928: LIST
63929: LIST
63930: LIST
63931: LIST
63932: LIST
63933: LIST
63934: LIST
63935: LIST
63936: LIST
63937: LIST
63938: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
63939: LD_ADDR_VAR 0 33
63943: PUSH
63944: LD_INT 4
63946: NEG
63947: PUSH
63948: LD_INT 4
63950: NEG
63951: PUSH
63952: EMPTY
63953: LIST
63954: LIST
63955: PUSH
63956: LD_INT 4
63958: NEG
63959: PUSH
63960: LD_INT 5
63962: NEG
63963: PUSH
63964: EMPTY
63965: LIST
63966: LIST
63967: PUSH
63968: LD_INT 3
63970: NEG
63971: PUSH
63972: LD_INT 4
63974: NEG
63975: PUSH
63976: EMPTY
63977: LIST
63978: LIST
63979: PUSH
63980: LD_INT 3
63982: NEG
63983: PUSH
63984: LD_INT 3
63986: NEG
63987: PUSH
63988: EMPTY
63989: LIST
63990: LIST
63991: PUSH
63992: LD_INT 4
63994: NEG
63995: PUSH
63996: LD_INT 3
63998: NEG
63999: PUSH
64000: EMPTY
64001: LIST
64002: LIST
64003: PUSH
64004: LD_INT 5
64006: NEG
64007: PUSH
64008: LD_INT 4
64010: NEG
64011: PUSH
64012: EMPTY
64013: LIST
64014: LIST
64015: PUSH
64016: LD_INT 5
64018: NEG
64019: PUSH
64020: LD_INT 5
64022: NEG
64023: PUSH
64024: EMPTY
64025: LIST
64026: LIST
64027: PUSH
64028: LD_INT 3
64030: NEG
64031: PUSH
64032: LD_INT 5
64034: NEG
64035: PUSH
64036: EMPTY
64037: LIST
64038: LIST
64039: PUSH
64040: LD_INT 5
64042: NEG
64043: PUSH
64044: LD_INT 3
64046: NEG
64047: PUSH
64048: EMPTY
64049: LIST
64050: LIST
64051: PUSH
64052: LD_INT 0
64054: PUSH
64055: LD_INT 3
64057: NEG
64058: PUSH
64059: EMPTY
64060: LIST
64061: LIST
64062: PUSH
64063: LD_INT 0
64065: PUSH
64066: LD_INT 4
64068: NEG
64069: PUSH
64070: EMPTY
64071: LIST
64072: LIST
64073: PUSH
64074: LD_INT 1
64076: PUSH
64077: LD_INT 3
64079: NEG
64080: PUSH
64081: EMPTY
64082: LIST
64083: LIST
64084: PUSH
64085: LD_INT 1
64087: PUSH
64088: LD_INT 2
64090: NEG
64091: PUSH
64092: EMPTY
64093: LIST
64094: LIST
64095: PUSH
64096: LD_INT 0
64098: PUSH
64099: LD_INT 2
64101: NEG
64102: PUSH
64103: EMPTY
64104: LIST
64105: LIST
64106: PUSH
64107: LD_INT 1
64109: NEG
64110: PUSH
64111: LD_INT 3
64113: NEG
64114: PUSH
64115: EMPTY
64116: LIST
64117: LIST
64118: PUSH
64119: LD_INT 1
64121: NEG
64122: PUSH
64123: LD_INT 4
64125: NEG
64126: PUSH
64127: EMPTY
64128: LIST
64129: LIST
64130: PUSH
64131: LD_INT 2
64133: PUSH
64134: LD_INT 2
64136: NEG
64137: PUSH
64138: EMPTY
64139: LIST
64140: LIST
64141: PUSH
64142: LD_INT 2
64144: NEG
64145: PUSH
64146: LD_INT 4
64148: NEG
64149: PUSH
64150: EMPTY
64151: LIST
64152: LIST
64153: PUSH
64154: LD_INT 4
64156: PUSH
64157: LD_INT 0
64159: PUSH
64160: EMPTY
64161: LIST
64162: LIST
64163: PUSH
64164: LD_INT 4
64166: PUSH
64167: LD_INT 1
64169: NEG
64170: PUSH
64171: EMPTY
64172: LIST
64173: LIST
64174: PUSH
64175: LD_INT 5
64177: PUSH
64178: LD_INT 0
64180: PUSH
64181: EMPTY
64182: LIST
64183: LIST
64184: PUSH
64185: LD_INT 5
64187: PUSH
64188: LD_INT 1
64190: PUSH
64191: EMPTY
64192: LIST
64193: LIST
64194: PUSH
64195: LD_INT 4
64197: PUSH
64198: LD_INT 1
64200: PUSH
64201: EMPTY
64202: LIST
64203: LIST
64204: PUSH
64205: LD_INT 3
64207: PUSH
64208: LD_INT 0
64210: PUSH
64211: EMPTY
64212: LIST
64213: LIST
64214: PUSH
64215: LD_INT 3
64217: PUSH
64218: LD_INT 1
64220: NEG
64221: PUSH
64222: EMPTY
64223: LIST
64224: LIST
64225: PUSH
64226: LD_INT 3
64228: PUSH
64229: LD_INT 2
64231: NEG
64232: PUSH
64233: EMPTY
64234: LIST
64235: LIST
64236: PUSH
64237: LD_INT 5
64239: PUSH
64240: LD_INT 2
64242: PUSH
64243: EMPTY
64244: LIST
64245: LIST
64246: PUSH
64247: LD_INT 3
64249: PUSH
64250: LD_INT 3
64252: PUSH
64253: EMPTY
64254: LIST
64255: LIST
64256: PUSH
64257: LD_INT 3
64259: PUSH
64260: LD_INT 2
64262: PUSH
64263: EMPTY
64264: LIST
64265: LIST
64266: PUSH
64267: LD_INT 4
64269: PUSH
64270: LD_INT 3
64272: PUSH
64273: EMPTY
64274: LIST
64275: LIST
64276: PUSH
64277: LD_INT 4
64279: PUSH
64280: LD_INT 4
64282: PUSH
64283: EMPTY
64284: LIST
64285: LIST
64286: PUSH
64287: LD_INT 3
64289: PUSH
64290: LD_INT 4
64292: PUSH
64293: EMPTY
64294: LIST
64295: LIST
64296: PUSH
64297: LD_INT 2
64299: PUSH
64300: LD_INT 3
64302: PUSH
64303: EMPTY
64304: LIST
64305: LIST
64306: PUSH
64307: LD_INT 2
64309: PUSH
64310: LD_INT 2
64312: PUSH
64313: EMPTY
64314: LIST
64315: LIST
64316: PUSH
64317: LD_INT 4
64319: PUSH
64320: LD_INT 2
64322: PUSH
64323: EMPTY
64324: LIST
64325: LIST
64326: PUSH
64327: LD_INT 2
64329: PUSH
64330: LD_INT 4
64332: PUSH
64333: EMPTY
64334: LIST
64335: LIST
64336: PUSH
64337: LD_INT 0
64339: PUSH
64340: LD_INT 4
64342: PUSH
64343: EMPTY
64344: LIST
64345: LIST
64346: PUSH
64347: LD_INT 0
64349: PUSH
64350: LD_INT 3
64352: PUSH
64353: EMPTY
64354: LIST
64355: LIST
64356: PUSH
64357: LD_INT 1
64359: PUSH
64360: LD_INT 4
64362: PUSH
64363: EMPTY
64364: LIST
64365: LIST
64366: PUSH
64367: LD_INT 1
64369: PUSH
64370: LD_INT 5
64372: PUSH
64373: EMPTY
64374: LIST
64375: LIST
64376: PUSH
64377: LD_INT 0
64379: PUSH
64380: LD_INT 5
64382: PUSH
64383: EMPTY
64384: LIST
64385: LIST
64386: PUSH
64387: LD_INT 1
64389: NEG
64390: PUSH
64391: LD_INT 4
64393: PUSH
64394: EMPTY
64395: LIST
64396: LIST
64397: PUSH
64398: LD_INT 1
64400: NEG
64401: PUSH
64402: LD_INT 3
64404: PUSH
64405: EMPTY
64406: LIST
64407: LIST
64408: PUSH
64409: LD_INT 2
64411: PUSH
64412: LD_INT 5
64414: PUSH
64415: EMPTY
64416: LIST
64417: LIST
64418: PUSH
64419: LD_INT 2
64421: NEG
64422: PUSH
64423: LD_INT 3
64425: PUSH
64426: EMPTY
64427: LIST
64428: LIST
64429: PUSH
64430: EMPTY
64431: LIST
64432: LIST
64433: LIST
64434: LIST
64435: LIST
64436: LIST
64437: LIST
64438: LIST
64439: LIST
64440: LIST
64441: LIST
64442: LIST
64443: LIST
64444: LIST
64445: LIST
64446: LIST
64447: LIST
64448: LIST
64449: LIST
64450: LIST
64451: LIST
64452: LIST
64453: LIST
64454: LIST
64455: LIST
64456: LIST
64457: LIST
64458: LIST
64459: LIST
64460: LIST
64461: LIST
64462: LIST
64463: LIST
64464: LIST
64465: LIST
64466: LIST
64467: LIST
64468: LIST
64469: LIST
64470: LIST
64471: LIST
64472: LIST
64473: LIST
64474: LIST
64475: LIST
64476: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
64477: LD_ADDR_VAR 0 34
64481: PUSH
64482: LD_INT 0
64484: PUSH
64485: LD_INT 4
64487: NEG
64488: PUSH
64489: EMPTY
64490: LIST
64491: LIST
64492: PUSH
64493: LD_INT 0
64495: PUSH
64496: LD_INT 5
64498: NEG
64499: PUSH
64500: EMPTY
64501: LIST
64502: LIST
64503: PUSH
64504: LD_INT 1
64506: PUSH
64507: LD_INT 4
64509: NEG
64510: PUSH
64511: EMPTY
64512: LIST
64513: LIST
64514: PUSH
64515: LD_INT 1
64517: PUSH
64518: LD_INT 3
64520: NEG
64521: PUSH
64522: EMPTY
64523: LIST
64524: LIST
64525: PUSH
64526: LD_INT 0
64528: PUSH
64529: LD_INT 3
64531: NEG
64532: PUSH
64533: EMPTY
64534: LIST
64535: LIST
64536: PUSH
64537: LD_INT 1
64539: NEG
64540: PUSH
64541: LD_INT 4
64543: NEG
64544: PUSH
64545: EMPTY
64546: LIST
64547: LIST
64548: PUSH
64549: LD_INT 1
64551: NEG
64552: PUSH
64553: LD_INT 5
64555: NEG
64556: PUSH
64557: EMPTY
64558: LIST
64559: LIST
64560: PUSH
64561: LD_INT 2
64563: PUSH
64564: LD_INT 3
64566: NEG
64567: PUSH
64568: EMPTY
64569: LIST
64570: LIST
64571: PUSH
64572: LD_INT 2
64574: NEG
64575: PUSH
64576: LD_INT 5
64578: NEG
64579: PUSH
64580: EMPTY
64581: LIST
64582: LIST
64583: PUSH
64584: LD_INT 3
64586: PUSH
64587: LD_INT 0
64589: PUSH
64590: EMPTY
64591: LIST
64592: LIST
64593: PUSH
64594: LD_INT 3
64596: PUSH
64597: LD_INT 1
64599: NEG
64600: PUSH
64601: EMPTY
64602: LIST
64603: LIST
64604: PUSH
64605: LD_INT 4
64607: PUSH
64608: LD_INT 0
64610: PUSH
64611: EMPTY
64612: LIST
64613: LIST
64614: PUSH
64615: LD_INT 4
64617: PUSH
64618: LD_INT 1
64620: PUSH
64621: EMPTY
64622: LIST
64623: LIST
64624: PUSH
64625: LD_INT 3
64627: PUSH
64628: LD_INT 1
64630: PUSH
64631: EMPTY
64632: LIST
64633: LIST
64634: PUSH
64635: LD_INT 2
64637: PUSH
64638: LD_INT 0
64640: PUSH
64641: EMPTY
64642: LIST
64643: LIST
64644: PUSH
64645: LD_INT 2
64647: PUSH
64648: LD_INT 1
64650: NEG
64651: PUSH
64652: EMPTY
64653: LIST
64654: LIST
64655: PUSH
64656: LD_INT 2
64658: PUSH
64659: LD_INT 2
64661: NEG
64662: PUSH
64663: EMPTY
64664: LIST
64665: LIST
64666: PUSH
64667: LD_INT 4
64669: PUSH
64670: LD_INT 2
64672: PUSH
64673: EMPTY
64674: LIST
64675: LIST
64676: PUSH
64677: LD_INT 4
64679: PUSH
64680: LD_INT 4
64682: PUSH
64683: EMPTY
64684: LIST
64685: LIST
64686: PUSH
64687: LD_INT 4
64689: PUSH
64690: LD_INT 3
64692: PUSH
64693: EMPTY
64694: LIST
64695: LIST
64696: PUSH
64697: LD_INT 5
64699: PUSH
64700: LD_INT 4
64702: PUSH
64703: EMPTY
64704: LIST
64705: LIST
64706: PUSH
64707: LD_INT 5
64709: PUSH
64710: LD_INT 5
64712: PUSH
64713: EMPTY
64714: LIST
64715: LIST
64716: PUSH
64717: LD_INT 4
64719: PUSH
64720: LD_INT 5
64722: PUSH
64723: EMPTY
64724: LIST
64725: LIST
64726: PUSH
64727: LD_INT 3
64729: PUSH
64730: LD_INT 4
64732: PUSH
64733: EMPTY
64734: LIST
64735: LIST
64736: PUSH
64737: LD_INT 3
64739: PUSH
64740: LD_INT 3
64742: PUSH
64743: EMPTY
64744: LIST
64745: LIST
64746: PUSH
64747: LD_INT 5
64749: PUSH
64750: LD_INT 3
64752: PUSH
64753: EMPTY
64754: LIST
64755: LIST
64756: PUSH
64757: LD_INT 3
64759: PUSH
64760: LD_INT 5
64762: PUSH
64763: EMPTY
64764: LIST
64765: LIST
64766: PUSH
64767: LD_INT 0
64769: PUSH
64770: LD_INT 3
64772: PUSH
64773: EMPTY
64774: LIST
64775: LIST
64776: PUSH
64777: LD_INT 0
64779: PUSH
64780: LD_INT 2
64782: PUSH
64783: EMPTY
64784: LIST
64785: LIST
64786: PUSH
64787: LD_INT 1
64789: PUSH
64790: LD_INT 3
64792: PUSH
64793: EMPTY
64794: LIST
64795: LIST
64796: PUSH
64797: LD_INT 1
64799: PUSH
64800: LD_INT 4
64802: PUSH
64803: EMPTY
64804: LIST
64805: LIST
64806: PUSH
64807: LD_INT 0
64809: PUSH
64810: LD_INT 4
64812: PUSH
64813: EMPTY
64814: LIST
64815: LIST
64816: PUSH
64817: LD_INT 1
64819: NEG
64820: PUSH
64821: LD_INT 3
64823: PUSH
64824: EMPTY
64825: LIST
64826: LIST
64827: PUSH
64828: LD_INT 1
64830: NEG
64831: PUSH
64832: LD_INT 2
64834: PUSH
64835: EMPTY
64836: LIST
64837: LIST
64838: PUSH
64839: LD_INT 2
64841: PUSH
64842: LD_INT 4
64844: PUSH
64845: EMPTY
64846: LIST
64847: LIST
64848: PUSH
64849: LD_INT 2
64851: NEG
64852: PUSH
64853: LD_INT 2
64855: PUSH
64856: EMPTY
64857: LIST
64858: LIST
64859: PUSH
64860: LD_INT 4
64862: NEG
64863: PUSH
64864: LD_INT 0
64866: PUSH
64867: EMPTY
64868: LIST
64869: LIST
64870: PUSH
64871: LD_INT 4
64873: NEG
64874: PUSH
64875: LD_INT 1
64877: NEG
64878: PUSH
64879: EMPTY
64880: LIST
64881: LIST
64882: PUSH
64883: LD_INT 3
64885: NEG
64886: PUSH
64887: LD_INT 0
64889: PUSH
64890: EMPTY
64891: LIST
64892: LIST
64893: PUSH
64894: LD_INT 3
64896: NEG
64897: PUSH
64898: LD_INT 1
64900: PUSH
64901: EMPTY
64902: LIST
64903: LIST
64904: PUSH
64905: LD_INT 4
64907: NEG
64908: PUSH
64909: LD_INT 1
64911: PUSH
64912: EMPTY
64913: LIST
64914: LIST
64915: PUSH
64916: LD_INT 5
64918: NEG
64919: PUSH
64920: LD_INT 0
64922: PUSH
64923: EMPTY
64924: LIST
64925: LIST
64926: PUSH
64927: LD_INT 5
64929: NEG
64930: PUSH
64931: LD_INT 1
64933: NEG
64934: PUSH
64935: EMPTY
64936: LIST
64937: LIST
64938: PUSH
64939: LD_INT 5
64941: NEG
64942: PUSH
64943: LD_INT 2
64945: NEG
64946: PUSH
64947: EMPTY
64948: LIST
64949: LIST
64950: PUSH
64951: LD_INT 3
64953: NEG
64954: PUSH
64955: LD_INT 2
64957: PUSH
64958: EMPTY
64959: LIST
64960: LIST
64961: PUSH
64962: EMPTY
64963: LIST
64964: LIST
64965: LIST
64966: LIST
64967: LIST
64968: LIST
64969: LIST
64970: LIST
64971: LIST
64972: LIST
64973: LIST
64974: LIST
64975: LIST
64976: LIST
64977: LIST
64978: LIST
64979: LIST
64980: LIST
64981: LIST
64982: LIST
64983: LIST
64984: LIST
64985: LIST
64986: LIST
64987: LIST
64988: LIST
64989: LIST
64990: LIST
64991: LIST
64992: LIST
64993: LIST
64994: LIST
64995: LIST
64996: LIST
64997: LIST
64998: LIST
64999: LIST
65000: LIST
65001: LIST
65002: LIST
65003: LIST
65004: LIST
65005: LIST
65006: LIST
65007: LIST
65008: ST_TO_ADDR
// end ; end ;
65009: GO 65012
65011: POP
// case btype of b_depot , b_warehouse :
65012: LD_VAR 0 1
65016: PUSH
65017: LD_INT 0
65019: DOUBLE
65020: EQUAL
65021: IFTRUE 65031
65023: LD_INT 1
65025: DOUBLE
65026: EQUAL
65027: IFTRUE 65031
65029: GO 65232
65031: POP
// case nation of nation_american :
65032: LD_VAR 0 5
65036: PUSH
65037: LD_INT 1
65039: DOUBLE
65040: EQUAL
65041: IFTRUE 65045
65043: GO 65101
65045: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
65046: LD_ADDR_VAR 0 9
65050: PUSH
65051: LD_VAR 0 11
65055: PUSH
65056: LD_VAR 0 12
65060: PUSH
65061: LD_VAR 0 13
65065: PUSH
65066: LD_VAR 0 14
65070: PUSH
65071: LD_VAR 0 15
65075: PUSH
65076: LD_VAR 0 16
65080: PUSH
65081: EMPTY
65082: LIST
65083: LIST
65084: LIST
65085: LIST
65086: LIST
65087: LIST
65088: PUSH
65089: LD_VAR 0 4
65093: PUSH
65094: LD_INT 1
65096: PLUS
65097: ARRAY
65098: ST_TO_ADDR
65099: GO 65230
65101: LD_INT 2
65103: DOUBLE
65104: EQUAL
65105: IFTRUE 65109
65107: GO 65165
65109: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
65110: LD_ADDR_VAR 0 9
65114: PUSH
65115: LD_VAR 0 17
65119: PUSH
65120: LD_VAR 0 18
65124: PUSH
65125: LD_VAR 0 19
65129: PUSH
65130: LD_VAR 0 20
65134: PUSH
65135: LD_VAR 0 21
65139: PUSH
65140: LD_VAR 0 22
65144: PUSH
65145: EMPTY
65146: LIST
65147: LIST
65148: LIST
65149: LIST
65150: LIST
65151: LIST
65152: PUSH
65153: LD_VAR 0 4
65157: PUSH
65158: LD_INT 1
65160: PLUS
65161: ARRAY
65162: ST_TO_ADDR
65163: GO 65230
65165: LD_INT 3
65167: DOUBLE
65168: EQUAL
65169: IFTRUE 65173
65171: GO 65229
65173: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
65174: LD_ADDR_VAR 0 9
65178: PUSH
65179: LD_VAR 0 23
65183: PUSH
65184: LD_VAR 0 24
65188: PUSH
65189: LD_VAR 0 25
65193: PUSH
65194: LD_VAR 0 26
65198: PUSH
65199: LD_VAR 0 27
65203: PUSH
65204: LD_VAR 0 28
65208: PUSH
65209: EMPTY
65210: LIST
65211: LIST
65212: LIST
65213: LIST
65214: LIST
65215: LIST
65216: PUSH
65217: LD_VAR 0 4
65221: PUSH
65222: LD_INT 1
65224: PLUS
65225: ARRAY
65226: ST_TO_ADDR
65227: GO 65230
65229: POP
65230: GO 65785
65232: LD_INT 2
65234: DOUBLE
65235: EQUAL
65236: IFTRUE 65246
65238: LD_INT 3
65240: DOUBLE
65241: EQUAL
65242: IFTRUE 65246
65244: GO 65302
65246: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
65247: LD_ADDR_VAR 0 9
65251: PUSH
65252: LD_VAR 0 29
65256: PUSH
65257: LD_VAR 0 30
65261: PUSH
65262: LD_VAR 0 31
65266: PUSH
65267: LD_VAR 0 32
65271: PUSH
65272: LD_VAR 0 33
65276: PUSH
65277: LD_VAR 0 34
65281: PUSH
65282: EMPTY
65283: LIST
65284: LIST
65285: LIST
65286: LIST
65287: LIST
65288: LIST
65289: PUSH
65290: LD_VAR 0 4
65294: PUSH
65295: LD_INT 1
65297: PLUS
65298: ARRAY
65299: ST_TO_ADDR
65300: GO 65785
65302: LD_INT 16
65304: DOUBLE
65305: EQUAL
65306: IFTRUE 65364
65308: LD_INT 17
65310: DOUBLE
65311: EQUAL
65312: IFTRUE 65364
65314: LD_INT 18
65316: DOUBLE
65317: EQUAL
65318: IFTRUE 65364
65320: LD_INT 19
65322: DOUBLE
65323: EQUAL
65324: IFTRUE 65364
65326: LD_INT 22
65328: DOUBLE
65329: EQUAL
65330: IFTRUE 65364
65332: LD_INT 20
65334: DOUBLE
65335: EQUAL
65336: IFTRUE 65364
65338: LD_INT 21
65340: DOUBLE
65341: EQUAL
65342: IFTRUE 65364
65344: LD_INT 23
65346: DOUBLE
65347: EQUAL
65348: IFTRUE 65364
65350: LD_INT 24
65352: DOUBLE
65353: EQUAL
65354: IFTRUE 65364
65356: LD_INT 25
65358: DOUBLE
65359: EQUAL
65360: IFTRUE 65364
65362: GO 65420
65364: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
65365: LD_ADDR_VAR 0 9
65369: PUSH
65370: LD_VAR 0 35
65374: PUSH
65375: LD_VAR 0 36
65379: PUSH
65380: LD_VAR 0 37
65384: PUSH
65385: LD_VAR 0 38
65389: PUSH
65390: LD_VAR 0 39
65394: PUSH
65395: LD_VAR 0 40
65399: PUSH
65400: EMPTY
65401: LIST
65402: LIST
65403: LIST
65404: LIST
65405: LIST
65406: LIST
65407: PUSH
65408: LD_VAR 0 4
65412: PUSH
65413: LD_INT 1
65415: PLUS
65416: ARRAY
65417: ST_TO_ADDR
65418: GO 65785
65420: LD_INT 6
65422: DOUBLE
65423: EQUAL
65424: IFTRUE 65476
65426: LD_INT 7
65428: DOUBLE
65429: EQUAL
65430: IFTRUE 65476
65432: LD_INT 8
65434: DOUBLE
65435: EQUAL
65436: IFTRUE 65476
65438: LD_INT 13
65440: DOUBLE
65441: EQUAL
65442: IFTRUE 65476
65444: LD_INT 12
65446: DOUBLE
65447: EQUAL
65448: IFTRUE 65476
65450: LD_INT 15
65452: DOUBLE
65453: EQUAL
65454: IFTRUE 65476
65456: LD_INT 11
65458: DOUBLE
65459: EQUAL
65460: IFTRUE 65476
65462: LD_INT 14
65464: DOUBLE
65465: EQUAL
65466: IFTRUE 65476
65468: LD_INT 10
65470: DOUBLE
65471: EQUAL
65472: IFTRUE 65476
65474: GO 65532
65476: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
65477: LD_ADDR_VAR 0 9
65481: PUSH
65482: LD_VAR 0 41
65486: PUSH
65487: LD_VAR 0 42
65491: PUSH
65492: LD_VAR 0 43
65496: PUSH
65497: LD_VAR 0 44
65501: PUSH
65502: LD_VAR 0 45
65506: PUSH
65507: LD_VAR 0 46
65511: PUSH
65512: EMPTY
65513: LIST
65514: LIST
65515: LIST
65516: LIST
65517: LIST
65518: LIST
65519: PUSH
65520: LD_VAR 0 4
65524: PUSH
65525: LD_INT 1
65527: PLUS
65528: ARRAY
65529: ST_TO_ADDR
65530: GO 65785
65532: LD_INT 36
65534: DOUBLE
65535: EQUAL
65536: IFTRUE 65540
65538: GO 65596
65540: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
65541: LD_ADDR_VAR 0 9
65545: PUSH
65546: LD_VAR 0 47
65550: PUSH
65551: LD_VAR 0 48
65555: PUSH
65556: LD_VAR 0 49
65560: PUSH
65561: LD_VAR 0 50
65565: PUSH
65566: LD_VAR 0 51
65570: PUSH
65571: LD_VAR 0 52
65575: PUSH
65576: EMPTY
65577: LIST
65578: LIST
65579: LIST
65580: LIST
65581: LIST
65582: LIST
65583: PUSH
65584: LD_VAR 0 4
65588: PUSH
65589: LD_INT 1
65591: PLUS
65592: ARRAY
65593: ST_TO_ADDR
65594: GO 65785
65596: LD_INT 4
65598: DOUBLE
65599: EQUAL
65600: IFTRUE 65622
65602: LD_INT 5
65604: DOUBLE
65605: EQUAL
65606: IFTRUE 65622
65608: LD_INT 34
65610: DOUBLE
65611: EQUAL
65612: IFTRUE 65622
65614: LD_INT 37
65616: DOUBLE
65617: EQUAL
65618: IFTRUE 65622
65620: GO 65678
65622: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
65623: LD_ADDR_VAR 0 9
65627: PUSH
65628: LD_VAR 0 53
65632: PUSH
65633: LD_VAR 0 54
65637: PUSH
65638: LD_VAR 0 55
65642: PUSH
65643: LD_VAR 0 56
65647: PUSH
65648: LD_VAR 0 57
65652: PUSH
65653: LD_VAR 0 58
65657: PUSH
65658: EMPTY
65659: LIST
65660: LIST
65661: LIST
65662: LIST
65663: LIST
65664: LIST
65665: PUSH
65666: LD_VAR 0 4
65670: PUSH
65671: LD_INT 1
65673: PLUS
65674: ARRAY
65675: ST_TO_ADDR
65676: GO 65785
65678: LD_INT 31
65680: DOUBLE
65681: EQUAL
65682: IFTRUE 65728
65684: LD_INT 32
65686: DOUBLE
65687: EQUAL
65688: IFTRUE 65728
65690: LD_INT 33
65692: DOUBLE
65693: EQUAL
65694: IFTRUE 65728
65696: LD_INT 27
65698: DOUBLE
65699: EQUAL
65700: IFTRUE 65728
65702: LD_INT 26
65704: DOUBLE
65705: EQUAL
65706: IFTRUE 65728
65708: LD_INT 28
65710: DOUBLE
65711: EQUAL
65712: IFTRUE 65728
65714: LD_INT 29
65716: DOUBLE
65717: EQUAL
65718: IFTRUE 65728
65720: LD_INT 30
65722: DOUBLE
65723: EQUAL
65724: IFTRUE 65728
65726: GO 65784
65728: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
65729: LD_ADDR_VAR 0 9
65733: PUSH
65734: LD_VAR 0 59
65738: PUSH
65739: LD_VAR 0 60
65743: PUSH
65744: LD_VAR 0 61
65748: PUSH
65749: LD_VAR 0 62
65753: PUSH
65754: LD_VAR 0 63
65758: PUSH
65759: LD_VAR 0 64
65763: PUSH
65764: EMPTY
65765: LIST
65766: LIST
65767: LIST
65768: LIST
65769: LIST
65770: LIST
65771: PUSH
65772: LD_VAR 0 4
65776: PUSH
65777: LD_INT 1
65779: PLUS
65780: ARRAY
65781: ST_TO_ADDR
65782: GO 65785
65784: POP
// temp_list2 = [ ] ;
65785: LD_ADDR_VAR 0 10
65789: PUSH
65790: EMPTY
65791: ST_TO_ADDR
// for i in temp_list do
65792: LD_ADDR_VAR 0 8
65796: PUSH
65797: LD_VAR 0 9
65801: PUSH
65802: FOR_IN
65803: IFFALSE 65855
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
65805: LD_ADDR_VAR 0 10
65809: PUSH
65810: LD_VAR 0 10
65814: PUSH
65815: LD_VAR 0 8
65819: PUSH
65820: LD_INT 1
65822: ARRAY
65823: PUSH
65824: LD_VAR 0 2
65828: PLUS
65829: PUSH
65830: LD_VAR 0 8
65834: PUSH
65835: LD_INT 2
65837: ARRAY
65838: PUSH
65839: LD_VAR 0 3
65843: PLUS
65844: PUSH
65845: EMPTY
65846: LIST
65847: LIST
65848: PUSH
65849: EMPTY
65850: LIST
65851: ADD
65852: ST_TO_ADDR
65853: GO 65802
65855: POP
65856: POP
// result = temp_list2 ;
65857: LD_ADDR_VAR 0 7
65861: PUSH
65862: LD_VAR 0 10
65866: ST_TO_ADDR
// end ;
65867: LD_VAR 0 7
65871: RET
// export function EnemyInRange ( unit , dist ) ; begin
65872: LD_INT 0
65874: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
65875: LD_ADDR_VAR 0 3
65879: PUSH
65880: LD_VAR 0 1
65884: PPUSH
65885: CALL_OW 255
65889: PPUSH
65890: LD_VAR 0 1
65894: PPUSH
65895: CALL_OW 250
65899: PPUSH
65900: LD_VAR 0 1
65904: PPUSH
65905: CALL_OW 251
65909: PPUSH
65910: LD_VAR 0 2
65914: PPUSH
65915: CALL 39245 0 4
65919: PUSH
65920: LD_INT 4
65922: ARRAY
65923: ST_TO_ADDR
// end ;
65924: LD_VAR 0 3
65928: RET
// export function PlayerSeeMe ( unit ) ; begin
65929: LD_INT 0
65931: PPUSH
// result := See ( your_side , unit ) ;
65932: LD_ADDR_VAR 0 2
65936: PUSH
65937: LD_OWVAR 2
65941: PPUSH
65942: LD_VAR 0 1
65946: PPUSH
65947: CALL_OW 292
65951: ST_TO_ADDR
// end ;
65952: LD_VAR 0 2
65956: RET
// export function ReverseDir ( unit ) ; begin
65957: LD_INT 0
65959: PPUSH
// if not unit then
65960: LD_VAR 0 1
65964: NOT
65965: IFFALSE 65969
// exit ;
65967: GO 65992
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
65969: LD_ADDR_VAR 0 2
65973: PUSH
65974: LD_VAR 0 1
65978: PPUSH
65979: CALL_OW 254
65983: PUSH
65984: LD_INT 3
65986: PLUS
65987: PUSH
65988: LD_INT 6
65990: MOD
65991: ST_TO_ADDR
// end ;
65992: LD_VAR 0 2
65996: RET
// export function ReverseArray ( array ) ; var i ; begin
65997: LD_INT 0
65999: PPUSH
66000: PPUSH
// if not array then
66001: LD_VAR 0 1
66005: NOT
66006: IFFALSE 66010
// exit ;
66008: GO 66065
// result := [ ] ;
66010: LD_ADDR_VAR 0 2
66014: PUSH
66015: EMPTY
66016: ST_TO_ADDR
// for i := array downto 1 do
66017: LD_ADDR_VAR 0 3
66021: PUSH
66022: DOUBLE
66023: LD_VAR 0 1
66027: INC
66028: ST_TO_ADDR
66029: LD_INT 1
66031: PUSH
66032: FOR_DOWNTO
66033: IFFALSE 66063
// result := Join ( result , array [ i ] ) ;
66035: LD_ADDR_VAR 0 2
66039: PUSH
66040: LD_VAR 0 2
66044: PPUSH
66045: LD_VAR 0 1
66049: PUSH
66050: LD_VAR 0 3
66054: ARRAY
66055: PPUSH
66056: CALL 70710 0 2
66060: ST_TO_ADDR
66061: GO 66032
66063: POP
66064: POP
// end ;
66065: LD_VAR 0 2
66069: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
66070: LD_INT 0
66072: PPUSH
66073: PPUSH
66074: PPUSH
66075: PPUSH
66076: PPUSH
66077: PPUSH
// if not unit or not hexes then
66078: LD_VAR 0 1
66082: NOT
66083: PUSH
66084: LD_VAR 0 2
66088: NOT
66089: OR
66090: IFFALSE 66094
// exit ;
66092: GO 66217
// dist := 9999 ;
66094: LD_ADDR_VAR 0 5
66098: PUSH
66099: LD_INT 9999
66101: ST_TO_ADDR
// for i = 1 to hexes do
66102: LD_ADDR_VAR 0 4
66106: PUSH
66107: DOUBLE
66108: LD_INT 1
66110: DEC
66111: ST_TO_ADDR
66112: LD_VAR 0 2
66116: PUSH
66117: FOR_TO
66118: IFFALSE 66205
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
66120: LD_ADDR_VAR 0 6
66124: PUSH
66125: LD_VAR 0 1
66129: PPUSH
66130: LD_VAR 0 2
66134: PUSH
66135: LD_VAR 0 4
66139: ARRAY
66140: PUSH
66141: LD_INT 1
66143: ARRAY
66144: PPUSH
66145: LD_VAR 0 2
66149: PUSH
66150: LD_VAR 0 4
66154: ARRAY
66155: PUSH
66156: LD_INT 2
66158: ARRAY
66159: PPUSH
66160: CALL_OW 297
66164: ST_TO_ADDR
// if tdist < dist then
66165: LD_VAR 0 6
66169: PUSH
66170: LD_VAR 0 5
66174: LESS
66175: IFFALSE 66203
// begin hex := hexes [ i ] ;
66177: LD_ADDR_VAR 0 8
66181: PUSH
66182: LD_VAR 0 2
66186: PUSH
66187: LD_VAR 0 4
66191: ARRAY
66192: ST_TO_ADDR
// dist := tdist ;
66193: LD_ADDR_VAR 0 5
66197: PUSH
66198: LD_VAR 0 6
66202: ST_TO_ADDR
// end ; end ;
66203: GO 66117
66205: POP
66206: POP
// result := hex ;
66207: LD_ADDR_VAR 0 3
66211: PUSH
66212: LD_VAR 0 8
66216: ST_TO_ADDR
// end ;
66217: LD_VAR 0 3
66221: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
66222: LD_INT 0
66224: PPUSH
66225: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
66226: LD_VAR 0 1
66230: NOT
66231: PUSH
66232: LD_VAR 0 1
66236: PUSH
66237: LD_INT 21
66239: PUSH
66240: LD_INT 2
66242: PUSH
66243: EMPTY
66244: LIST
66245: LIST
66246: PUSH
66247: LD_INT 23
66249: PUSH
66250: LD_INT 2
66252: PUSH
66253: EMPTY
66254: LIST
66255: LIST
66256: PUSH
66257: EMPTY
66258: LIST
66259: LIST
66260: PPUSH
66261: CALL_OW 69
66265: IN
66266: NOT
66267: OR
66268: IFFALSE 66272
// exit ;
66270: GO 66319
// for i = 1 to 3 do
66272: LD_ADDR_VAR 0 3
66276: PUSH
66277: DOUBLE
66278: LD_INT 1
66280: DEC
66281: ST_TO_ADDR
66282: LD_INT 3
66284: PUSH
66285: FOR_TO
66286: IFFALSE 66317
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
66288: LD_VAR 0 1
66292: PPUSH
66293: CALL_OW 250
66297: PPUSH
66298: LD_VAR 0 1
66302: PPUSH
66303: CALL_OW 251
66307: PPUSH
66308: LD_INT 1
66310: PPUSH
66311: CALL_OW 453
66315: GO 66285
66317: POP
66318: POP
// end ;
66319: LD_VAR 0 2
66323: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
66324: LD_INT 0
66326: PPUSH
66327: PPUSH
66328: PPUSH
66329: PPUSH
66330: PPUSH
66331: PPUSH
// if not unit or not enemy_unit then
66332: LD_VAR 0 1
66336: NOT
66337: PUSH
66338: LD_VAR 0 2
66342: NOT
66343: OR
66344: IFFALSE 66348
// exit ;
66346: GO 66815
// if GetLives ( i ) < 250 then
66348: LD_VAR 0 4
66352: PPUSH
66353: CALL_OW 256
66357: PUSH
66358: LD_INT 250
66360: LESS
66361: IFFALSE 66374
// begin ComAutodestruct ( i ) ;
66363: LD_VAR 0 4
66367: PPUSH
66368: CALL 66222 0 1
// exit ;
66372: GO 66815
// end ; x := GetX ( enemy_unit ) ;
66374: LD_ADDR_VAR 0 7
66378: PUSH
66379: LD_VAR 0 2
66383: PPUSH
66384: CALL_OW 250
66388: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
66389: LD_ADDR_VAR 0 8
66393: PUSH
66394: LD_VAR 0 2
66398: PPUSH
66399: CALL_OW 251
66403: ST_TO_ADDR
// if not x or not y then
66404: LD_VAR 0 7
66408: NOT
66409: PUSH
66410: LD_VAR 0 8
66414: NOT
66415: OR
66416: IFFALSE 66420
// exit ;
66418: GO 66815
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
66420: LD_ADDR_VAR 0 6
66424: PUSH
66425: LD_VAR 0 7
66429: PPUSH
66430: LD_INT 0
66432: PPUSH
66433: LD_INT 4
66435: PPUSH
66436: CALL_OW 272
66440: PUSH
66441: LD_VAR 0 8
66445: PPUSH
66446: LD_INT 0
66448: PPUSH
66449: LD_INT 4
66451: PPUSH
66452: CALL_OW 273
66456: PUSH
66457: EMPTY
66458: LIST
66459: LIST
66460: PUSH
66461: LD_VAR 0 7
66465: PPUSH
66466: LD_INT 1
66468: PPUSH
66469: LD_INT 4
66471: PPUSH
66472: CALL_OW 272
66476: PUSH
66477: LD_VAR 0 8
66481: PPUSH
66482: LD_INT 1
66484: PPUSH
66485: LD_INT 4
66487: PPUSH
66488: CALL_OW 273
66492: PUSH
66493: EMPTY
66494: LIST
66495: LIST
66496: PUSH
66497: LD_VAR 0 7
66501: PPUSH
66502: LD_INT 2
66504: PPUSH
66505: LD_INT 4
66507: PPUSH
66508: CALL_OW 272
66512: PUSH
66513: LD_VAR 0 8
66517: PPUSH
66518: LD_INT 2
66520: PPUSH
66521: LD_INT 4
66523: PPUSH
66524: CALL_OW 273
66528: PUSH
66529: EMPTY
66530: LIST
66531: LIST
66532: PUSH
66533: LD_VAR 0 7
66537: PPUSH
66538: LD_INT 3
66540: PPUSH
66541: LD_INT 4
66543: PPUSH
66544: CALL_OW 272
66548: PUSH
66549: LD_VAR 0 8
66553: PPUSH
66554: LD_INT 3
66556: PPUSH
66557: LD_INT 4
66559: PPUSH
66560: CALL_OW 273
66564: PUSH
66565: EMPTY
66566: LIST
66567: LIST
66568: PUSH
66569: LD_VAR 0 7
66573: PPUSH
66574: LD_INT 4
66576: PPUSH
66577: LD_INT 4
66579: PPUSH
66580: CALL_OW 272
66584: PUSH
66585: LD_VAR 0 8
66589: PPUSH
66590: LD_INT 4
66592: PPUSH
66593: LD_INT 4
66595: PPUSH
66596: CALL_OW 273
66600: PUSH
66601: EMPTY
66602: LIST
66603: LIST
66604: PUSH
66605: LD_VAR 0 7
66609: PPUSH
66610: LD_INT 5
66612: PPUSH
66613: LD_INT 4
66615: PPUSH
66616: CALL_OW 272
66620: PUSH
66621: LD_VAR 0 8
66625: PPUSH
66626: LD_INT 5
66628: PPUSH
66629: LD_INT 4
66631: PPUSH
66632: CALL_OW 273
66636: PUSH
66637: EMPTY
66638: LIST
66639: LIST
66640: PUSH
66641: EMPTY
66642: LIST
66643: LIST
66644: LIST
66645: LIST
66646: LIST
66647: LIST
66648: ST_TO_ADDR
// for i = tmp downto 1 do
66649: LD_ADDR_VAR 0 4
66653: PUSH
66654: DOUBLE
66655: LD_VAR 0 6
66659: INC
66660: ST_TO_ADDR
66661: LD_INT 1
66663: PUSH
66664: FOR_DOWNTO
66665: IFFALSE 66766
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
66667: LD_VAR 0 6
66671: PUSH
66672: LD_VAR 0 4
66676: ARRAY
66677: PUSH
66678: LD_INT 1
66680: ARRAY
66681: PPUSH
66682: LD_VAR 0 6
66686: PUSH
66687: LD_VAR 0 4
66691: ARRAY
66692: PUSH
66693: LD_INT 2
66695: ARRAY
66696: PPUSH
66697: CALL_OW 488
66701: NOT
66702: PUSH
66703: LD_VAR 0 6
66707: PUSH
66708: LD_VAR 0 4
66712: ARRAY
66713: PUSH
66714: LD_INT 1
66716: ARRAY
66717: PPUSH
66718: LD_VAR 0 6
66722: PUSH
66723: LD_VAR 0 4
66727: ARRAY
66728: PUSH
66729: LD_INT 2
66731: ARRAY
66732: PPUSH
66733: CALL_OW 428
66737: PUSH
66738: LD_INT 0
66740: NONEQUAL
66741: OR
66742: IFFALSE 66764
// tmp := Delete ( tmp , i ) ;
66744: LD_ADDR_VAR 0 6
66748: PUSH
66749: LD_VAR 0 6
66753: PPUSH
66754: LD_VAR 0 4
66758: PPUSH
66759: CALL_OW 3
66763: ST_TO_ADDR
66764: GO 66664
66766: POP
66767: POP
// j := GetClosestHex ( unit , tmp ) ;
66768: LD_ADDR_VAR 0 5
66772: PUSH
66773: LD_VAR 0 1
66777: PPUSH
66778: LD_VAR 0 6
66782: PPUSH
66783: CALL 66070 0 2
66787: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
66788: LD_VAR 0 1
66792: PPUSH
66793: LD_VAR 0 5
66797: PUSH
66798: LD_INT 1
66800: ARRAY
66801: PPUSH
66802: LD_VAR 0 5
66806: PUSH
66807: LD_INT 2
66809: ARRAY
66810: PPUSH
66811: CALL_OW 111
// end ;
66815: LD_VAR 0 3
66819: RET
// export function PrepareApemanSoldier ( ) ; begin
66820: LD_INT 0
66822: PPUSH
// uc_nation := 0 ;
66823: LD_ADDR_OWVAR 21
66827: PUSH
66828: LD_INT 0
66830: ST_TO_ADDR
// hc_sex := sex_male ;
66831: LD_ADDR_OWVAR 27
66835: PUSH
66836: LD_INT 1
66838: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
66839: LD_ADDR_OWVAR 28
66843: PUSH
66844: LD_INT 15
66846: ST_TO_ADDR
// hc_gallery :=  ;
66847: LD_ADDR_OWVAR 33
66851: PUSH
66852: LD_STRING 
66854: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
66855: LD_ADDR_OWVAR 31
66859: PUSH
66860: LD_INT 0
66862: PPUSH
66863: LD_INT 3
66865: PPUSH
66866: CALL_OW 12
66870: PUSH
66871: LD_INT 0
66873: PPUSH
66874: LD_INT 3
66876: PPUSH
66877: CALL_OW 12
66881: PUSH
66882: LD_INT 0
66884: PUSH
66885: LD_INT 0
66887: PUSH
66888: EMPTY
66889: LIST
66890: LIST
66891: LIST
66892: LIST
66893: ST_TO_ADDR
// end ;
66894: LD_VAR 0 1
66898: RET
// export function PrepareApemanEngineer ( ) ; begin
66899: LD_INT 0
66901: PPUSH
// uc_nation := 0 ;
66902: LD_ADDR_OWVAR 21
66906: PUSH
66907: LD_INT 0
66909: ST_TO_ADDR
// hc_sex := sex_male ;
66910: LD_ADDR_OWVAR 27
66914: PUSH
66915: LD_INT 1
66917: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
66918: LD_ADDR_OWVAR 28
66922: PUSH
66923: LD_INT 16
66925: ST_TO_ADDR
// hc_gallery :=  ;
66926: LD_ADDR_OWVAR 33
66930: PUSH
66931: LD_STRING 
66933: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
66934: LD_ADDR_OWVAR 31
66938: PUSH
66939: LD_INT 0
66941: PPUSH
66942: LD_INT 3
66944: PPUSH
66945: CALL_OW 12
66949: PUSH
66950: LD_INT 0
66952: PPUSH
66953: LD_INT 3
66955: PPUSH
66956: CALL_OW 12
66960: PUSH
66961: LD_INT 0
66963: PUSH
66964: LD_INT 0
66966: PUSH
66967: EMPTY
66968: LIST
66969: LIST
66970: LIST
66971: LIST
66972: ST_TO_ADDR
// end ;
66973: LD_VAR 0 1
66977: RET
// export function PrepareApeman ( agressivity ) ; begin
66978: LD_INT 0
66980: PPUSH
// uc_side := 0 ;
66981: LD_ADDR_OWVAR 20
66985: PUSH
66986: LD_INT 0
66988: ST_TO_ADDR
// uc_nation := 0 ;
66989: LD_ADDR_OWVAR 21
66993: PUSH
66994: LD_INT 0
66996: ST_TO_ADDR
// hc_sex := sex_male ;
66997: LD_ADDR_OWVAR 27
67001: PUSH
67002: LD_INT 1
67004: ST_TO_ADDR
// hc_class := class_apeman ;
67005: LD_ADDR_OWVAR 28
67009: PUSH
67010: LD_INT 12
67012: ST_TO_ADDR
// hc_gallery :=  ;
67013: LD_ADDR_OWVAR 33
67017: PUSH
67018: LD_STRING 
67020: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
67021: LD_ADDR_OWVAR 35
67025: PUSH
67026: LD_VAR 0 1
67030: NEG
67031: PPUSH
67032: LD_VAR 0 1
67036: PPUSH
67037: CALL_OW 12
67041: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
67042: LD_ADDR_OWVAR 31
67046: PUSH
67047: LD_INT 0
67049: PPUSH
67050: LD_INT 3
67052: PPUSH
67053: CALL_OW 12
67057: PUSH
67058: LD_INT 0
67060: PPUSH
67061: LD_INT 3
67063: PPUSH
67064: CALL_OW 12
67068: PUSH
67069: LD_INT 0
67071: PUSH
67072: LD_INT 0
67074: PUSH
67075: EMPTY
67076: LIST
67077: LIST
67078: LIST
67079: LIST
67080: ST_TO_ADDR
// end ;
67081: LD_VAR 0 2
67085: RET
// export function PrepareTiger ( agressivity ) ; begin
67086: LD_INT 0
67088: PPUSH
// uc_side := 0 ;
67089: LD_ADDR_OWVAR 20
67093: PUSH
67094: LD_INT 0
67096: ST_TO_ADDR
// uc_nation := 0 ;
67097: LD_ADDR_OWVAR 21
67101: PUSH
67102: LD_INT 0
67104: ST_TO_ADDR
// hc_class := class_tiger ;
67105: LD_ADDR_OWVAR 28
67109: PUSH
67110: LD_INT 14
67112: ST_TO_ADDR
// hc_gallery :=  ;
67113: LD_ADDR_OWVAR 33
67117: PUSH
67118: LD_STRING 
67120: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
67121: LD_ADDR_OWVAR 35
67125: PUSH
67126: LD_VAR 0 1
67130: NEG
67131: PPUSH
67132: LD_VAR 0 1
67136: PPUSH
67137: CALL_OW 12
67141: ST_TO_ADDR
// end ;
67142: LD_VAR 0 2
67146: RET
// export function PrepareEnchidna ( ) ; begin
67147: LD_INT 0
67149: PPUSH
// uc_side := 0 ;
67150: LD_ADDR_OWVAR 20
67154: PUSH
67155: LD_INT 0
67157: ST_TO_ADDR
// uc_nation := 0 ;
67158: LD_ADDR_OWVAR 21
67162: PUSH
67163: LD_INT 0
67165: ST_TO_ADDR
// hc_class := class_baggie ;
67166: LD_ADDR_OWVAR 28
67170: PUSH
67171: LD_INT 13
67173: ST_TO_ADDR
// hc_gallery :=  ;
67174: LD_ADDR_OWVAR 33
67178: PUSH
67179: LD_STRING 
67181: ST_TO_ADDR
// end ;
67182: LD_VAR 0 1
67186: RET
// export function PrepareFrog ( ) ; begin
67187: LD_INT 0
67189: PPUSH
// uc_side := 0 ;
67190: LD_ADDR_OWVAR 20
67194: PUSH
67195: LD_INT 0
67197: ST_TO_ADDR
// uc_nation := 0 ;
67198: LD_ADDR_OWVAR 21
67202: PUSH
67203: LD_INT 0
67205: ST_TO_ADDR
// hc_class := class_frog ;
67206: LD_ADDR_OWVAR 28
67210: PUSH
67211: LD_INT 19
67213: ST_TO_ADDR
// hc_gallery :=  ;
67214: LD_ADDR_OWVAR 33
67218: PUSH
67219: LD_STRING 
67221: ST_TO_ADDR
// end ;
67222: LD_VAR 0 1
67226: RET
// export function PrepareFish ( ) ; begin
67227: LD_INT 0
67229: PPUSH
// uc_side := 0 ;
67230: LD_ADDR_OWVAR 20
67234: PUSH
67235: LD_INT 0
67237: ST_TO_ADDR
// uc_nation := 0 ;
67238: LD_ADDR_OWVAR 21
67242: PUSH
67243: LD_INT 0
67245: ST_TO_ADDR
// hc_class := class_fish ;
67246: LD_ADDR_OWVAR 28
67250: PUSH
67251: LD_INT 20
67253: ST_TO_ADDR
// hc_gallery :=  ;
67254: LD_ADDR_OWVAR 33
67258: PUSH
67259: LD_STRING 
67261: ST_TO_ADDR
// end ;
67262: LD_VAR 0 1
67266: RET
// export function PrepareBird ( ) ; begin
67267: LD_INT 0
67269: PPUSH
// uc_side := 0 ;
67270: LD_ADDR_OWVAR 20
67274: PUSH
67275: LD_INT 0
67277: ST_TO_ADDR
// uc_nation := 0 ;
67278: LD_ADDR_OWVAR 21
67282: PUSH
67283: LD_INT 0
67285: ST_TO_ADDR
// hc_class := class_phororhacos ;
67286: LD_ADDR_OWVAR 28
67290: PUSH
67291: LD_INT 18
67293: ST_TO_ADDR
// hc_gallery :=  ;
67294: LD_ADDR_OWVAR 33
67298: PUSH
67299: LD_STRING 
67301: ST_TO_ADDR
// end ;
67302: LD_VAR 0 1
67306: RET
// export function PrepareHorse ( ) ; begin
67307: LD_INT 0
67309: PPUSH
// uc_side := 0 ;
67310: LD_ADDR_OWVAR 20
67314: PUSH
67315: LD_INT 0
67317: ST_TO_ADDR
// uc_nation := 0 ;
67318: LD_ADDR_OWVAR 21
67322: PUSH
67323: LD_INT 0
67325: ST_TO_ADDR
// hc_class := class_horse ;
67326: LD_ADDR_OWVAR 28
67330: PUSH
67331: LD_INT 21
67333: ST_TO_ADDR
// hc_gallery :=  ;
67334: LD_ADDR_OWVAR 33
67338: PUSH
67339: LD_STRING 
67341: ST_TO_ADDR
// end ;
67342: LD_VAR 0 1
67346: RET
// export function PrepareMastodont ( ) ; begin
67347: LD_INT 0
67349: PPUSH
// uc_side := 0 ;
67350: LD_ADDR_OWVAR 20
67354: PUSH
67355: LD_INT 0
67357: ST_TO_ADDR
// uc_nation := 0 ;
67358: LD_ADDR_OWVAR 21
67362: PUSH
67363: LD_INT 0
67365: ST_TO_ADDR
// vc_chassis := class_mastodont ;
67366: LD_ADDR_OWVAR 37
67370: PUSH
67371: LD_INT 31
67373: ST_TO_ADDR
// vc_control := control_rider ;
67374: LD_ADDR_OWVAR 38
67378: PUSH
67379: LD_INT 4
67381: ST_TO_ADDR
// end ;
67382: LD_VAR 0 1
67386: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
67387: LD_INT 0
67389: PPUSH
67390: PPUSH
67391: PPUSH
// uc_side = 0 ;
67392: LD_ADDR_OWVAR 20
67396: PUSH
67397: LD_INT 0
67399: ST_TO_ADDR
// uc_nation = 0 ;
67400: LD_ADDR_OWVAR 21
67404: PUSH
67405: LD_INT 0
67407: ST_TO_ADDR
// InitHc_All ( ) ;
67408: CALL_OW 584
// InitVc ;
67412: CALL_OW 20
// if mastodonts then
67416: LD_VAR 0 6
67420: IFFALSE 67487
// for i = 1 to mastodonts do
67422: LD_ADDR_VAR 0 11
67426: PUSH
67427: DOUBLE
67428: LD_INT 1
67430: DEC
67431: ST_TO_ADDR
67432: LD_VAR 0 6
67436: PUSH
67437: FOR_TO
67438: IFFALSE 67485
// begin vc_chassis := 31 ;
67440: LD_ADDR_OWVAR 37
67444: PUSH
67445: LD_INT 31
67447: ST_TO_ADDR
// vc_control := control_rider ;
67448: LD_ADDR_OWVAR 38
67452: PUSH
67453: LD_INT 4
67455: ST_TO_ADDR
// animal := CreateVehicle ;
67456: LD_ADDR_VAR 0 12
67460: PUSH
67461: CALL_OW 45
67465: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67466: LD_VAR 0 12
67470: PPUSH
67471: LD_VAR 0 8
67475: PPUSH
67476: LD_INT 0
67478: PPUSH
67479: CALL 69615 0 3
// end ;
67483: GO 67437
67485: POP
67486: POP
// if horses then
67487: LD_VAR 0 5
67491: IFFALSE 67558
// for i = 1 to horses do
67493: LD_ADDR_VAR 0 11
67497: PUSH
67498: DOUBLE
67499: LD_INT 1
67501: DEC
67502: ST_TO_ADDR
67503: LD_VAR 0 5
67507: PUSH
67508: FOR_TO
67509: IFFALSE 67556
// begin hc_class := 21 ;
67511: LD_ADDR_OWVAR 28
67515: PUSH
67516: LD_INT 21
67518: ST_TO_ADDR
// hc_gallery :=  ;
67519: LD_ADDR_OWVAR 33
67523: PUSH
67524: LD_STRING 
67526: ST_TO_ADDR
// animal := CreateHuman ;
67527: LD_ADDR_VAR 0 12
67531: PUSH
67532: CALL_OW 44
67536: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67537: LD_VAR 0 12
67541: PPUSH
67542: LD_VAR 0 8
67546: PPUSH
67547: LD_INT 0
67549: PPUSH
67550: CALL 69615 0 3
// end ;
67554: GO 67508
67556: POP
67557: POP
// if birds then
67558: LD_VAR 0 1
67562: IFFALSE 67629
// for i = 1 to birds do
67564: LD_ADDR_VAR 0 11
67568: PUSH
67569: DOUBLE
67570: LD_INT 1
67572: DEC
67573: ST_TO_ADDR
67574: LD_VAR 0 1
67578: PUSH
67579: FOR_TO
67580: IFFALSE 67627
// begin hc_class := 18 ;
67582: LD_ADDR_OWVAR 28
67586: PUSH
67587: LD_INT 18
67589: ST_TO_ADDR
// hc_gallery =  ;
67590: LD_ADDR_OWVAR 33
67594: PUSH
67595: LD_STRING 
67597: ST_TO_ADDR
// animal := CreateHuman ;
67598: LD_ADDR_VAR 0 12
67602: PUSH
67603: CALL_OW 44
67607: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67608: LD_VAR 0 12
67612: PPUSH
67613: LD_VAR 0 8
67617: PPUSH
67618: LD_INT 0
67620: PPUSH
67621: CALL 69615 0 3
// end ;
67625: GO 67579
67627: POP
67628: POP
// if tigers then
67629: LD_VAR 0 2
67633: IFFALSE 67717
// for i = 1 to tigers do
67635: LD_ADDR_VAR 0 11
67639: PUSH
67640: DOUBLE
67641: LD_INT 1
67643: DEC
67644: ST_TO_ADDR
67645: LD_VAR 0 2
67649: PUSH
67650: FOR_TO
67651: IFFALSE 67715
// begin hc_class = class_tiger ;
67653: LD_ADDR_OWVAR 28
67657: PUSH
67658: LD_INT 14
67660: ST_TO_ADDR
// hc_gallery =  ;
67661: LD_ADDR_OWVAR 33
67665: PUSH
67666: LD_STRING 
67668: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
67669: LD_ADDR_OWVAR 35
67673: PUSH
67674: LD_INT 7
67676: NEG
67677: PPUSH
67678: LD_INT 7
67680: PPUSH
67681: CALL_OW 12
67685: ST_TO_ADDR
// animal := CreateHuman ;
67686: LD_ADDR_VAR 0 12
67690: PUSH
67691: CALL_OW 44
67695: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67696: LD_VAR 0 12
67700: PPUSH
67701: LD_VAR 0 8
67705: PPUSH
67706: LD_INT 0
67708: PPUSH
67709: CALL 69615 0 3
// end ;
67713: GO 67650
67715: POP
67716: POP
// if apemans then
67717: LD_VAR 0 3
67721: IFFALSE 67844
// for i = 1 to apemans do
67723: LD_ADDR_VAR 0 11
67727: PUSH
67728: DOUBLE
67729: LD_INT 1
67731: DEC
67732: ST_TO_ADDR
67733: LD_VAR 0 3
67737: PUSH
67738: FOR_TO
67739: IFFALSE 67842
// begin hc_class = class_apeman ;
67741: LD_ADDR_OWVAR 28
67745: PUSH
67746: LD_INT 12
67748: ST_TO_ADDR
// hc_gallery =  ;
67749: LD_ADDR_OWVAR 33
67753: PUSH
67754: LD_STRING 
67756: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
67757: LD_ADDR_OWVAR 35
67761: PUSH
67762: LD_INT 2
67764: NEG
67765: PPUSH
67766: LD_INT 2
67768: PPUSH
67769: CALL_OW 12
67773: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
67774: LD_ADDR_OWVAR 31
67778: PUSH
67779: LD_INT 1
67781: PPUSH
67782: LD_INT 3
67784: PPUSH
67785: CALL_OW 12
67789: PUSH
67790: LD_INT 1
67792: PPUSH
67793: LD_INT 3
67795: PPUSH
67796: CALL_OW 12
67800: PUSH
67801: LD_INT 0
67803: PUSH
67804: LD_INT 0
67806: PUSH
67807: EMPTY
67808: LIST
67809: LIST
67810: LIST
67811: LIST
67812: ST_TO_ADDR
// animal := CreateHuman ;
67813: LD_ADDR_VAR 0 12
67817: PUSH
67818: CALL_OW 44
67822: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67823: LD_VAR 0 12
67827: PPUSH
67828: LD_VAR 0 8
67832: PPUSH
67833: LD_INT 0
67835: PPUSH
67836: CALL 69615 0 3
// end ;
67840: GO 67738
67842: POP
67843: POP
// if enchidnas then
67844: LD_VAR 0 4
67848: IFFALSE 67915
// for i = 1 to enchidnas do
67850: LD_ADDR_VAR 0 11
67854: PUSH
67855: DOUBLE
67856: LD_INT 1
67858: DEC
67859: ST_TO_ADDR
67860: LD_VAR 0 4
67864: PUSH
67865: FOR_TO
67866: IFFALSE 67913
// begin hc_class = 13 ;
67868: LD_ADDR_OWVAR 28
67872: PUSH
67873: LD_INT 13
67875: ST_TO_ADDR
// hc_gallery =  ;
67876: LD_ADDR_OWVAR 33
67880: PUSH
67881: LD_STRING 
67883: ST_TO_ADDR
// animal := CreateHuman ;
67884: LD_ADDR_VAR 0 12
67888: PUSH
67889: CALL_OW 44
67893: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67894: LD_VAR 0 12
67898: PPUSH
67899: LD_VAR 0 8
67903: PPUSH
67904: LD_INT 0
67906: PPUSH
67907: CALL 69615 0 3
// end ;
67911: GO 67865
67913: POP
67914: POP
// if fishes then
67915: LD_VAR 0 7
67919: IFFALSE 67986
// for i = 1 to fishes do
67921: LD_ADDR_VAR 0 11
67925: PUSH
67926: DOUBLE
67927: LD_INT 1
67929: DEC
67930: ST_TO_ADDR
67931: LD_VAR 0 7
67935: PUSH
67936: FOR_TO
67937: IFFALSE 67984
// begin hc_class = 20 ;
67939: LD_ADDR_OWVAR 28
67943: PUSH
67944: LD_INT 20
67946: ST_TO_ADDR
// hc_gallery =  ;
67947: LD_ADDR_OWVAR 33
67951: PUSH
67952: LD_STRING 
67954: ST_TO_ADDR
// animal := CreateHuman ;
67955: LD_ADDR_VAR 0 12
67959: PUSH
67960: CALL_OW 44
67964: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
67965: LD_VAR 0 12
67969: PPUSH
67970: LD_VAR 0 9
67974: PPUSH
67975: LD_INT 0
67977: PPUSH
67978: CALL 69615 0 3
// end ;
67982: GO 67936
67984: POP
67985: POP
// end ;
67986: LD_VAR 0 10
67990: RET
// export function WantHeal ( sci , unit ) ; begin
67991: LD_INT 0
67993: PPUSH
// if GetTaskList ( sci ) > 0 then
67994: LD_VAR 0 1
67998: PPUSH
67999: CALL_OW 437
68003: PUSH
68004: LD_INT 0
68006: GREATER
68007: IFFALSE 68077
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
68009: LD_VAR 0 1
68013: PPUSH
68014: CALL_OW 437
68018: PUSH
68019: LD_INT 1
68021: ARRAY
68022: PUSH
68023: LD_INT 1
68025: ARRAY
68026: PUSH
68027: LD_STRING l
68029: EQUAL
68030: PUSH
68031: LD_VAR 0 1
68035: PPUSH
68036: CALL_OW 437
68040: PUSH
68041: LD_INT 1
68043: ARRAY
68044: PUSH
68045: LD_INT 4
68047: ARRAY
68048: PUSH
68049: LD_VAR 0 2
68053: EQUAL
68054: AND
68055: IFFALSE 68067
// result := true else
68057: LD_ADDR_VAR 0 3
68061: PUSH
68062: LD_INT 1
68064: ST_TO_ADDR
68065: GO 68075
// result := false ;
68067: LD_ADDR_VAR 0 3
68071: PUSH
68072: LD_INT 0
68074: ST_TO_ADDR
// end else
68075: GO 68085
// result := false ;
68077: LD_ADDR_VAR 0 3
68081: PUSH
68082: LD_INT 0
68084: ST_TO_ADDR
// end ;
68085: LD_VAR 0 3
68089: RET
// export function HealTarget ( sci ) ; begin
68090: LD_INT 0
68092: PPUSH
// if not sci then
68093: LD_VAR 0 1
68097: NOT
68098: IFFALSE 68102
// exit ;
68100: GO 68167
// result := 0 ;
68102: LD_ADDR_VAR 0 2
68106: PUSH
68107: LD_INT 0
68109: ST_TO_ADDR
// if GetTaskList ( sci ) then
68110: LD_VAR 0 1
68114: PPUSH
68115: CALL_OW 437
68119: IFFALSE 68167
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
68121: LD_VAR 0 1
68125: PPUSH
68126: CALL_OW 437
68130: PUSH
68131: LD_INT 1
68133: ARRAY
68134: PUSH
68135: LD_INT 1
68137: ARRAY
68138: PUSH
68139: LD_STRING l
68141: EQUAL
68142: IFFALSE 68167
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
68144: LD_ADDR_VAR 0 2
68148: PUSH
68149: LD_VAR 0 1
68153: PPUSH
68154: CALL_OW 437
68158: PUSH
68159: LD_INT 1
68161: ARRAY
68162: PUSH
68163: LD_INT 4
68165: ARRAY
68166: ST_TO_ADDR
// end ;
68167: LD_VAR 0 2
68171: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
68172: LD_INT 0
68174: PPUSH
68175: PPUSH
68176: PPUSH
68177: PPUSH
// if not base_units then
68178: LD_VAR 0 1
68182: NOT
68183: IFFALSE 68187
// exit ;
68185: GO 68274
// result := false ;
68187: LD_ADDR_VAR 0 2
68191: PUSH
68192: LD_INT 0
68194: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
68195: LD_ADDR_VAR 0 5
68199: PUSH
68200: LD_VAR 0 1
68204: PPUSH
68205: LD_INT 21
68207: PUSH
68208: LD_INT 3
68210: PUSH
68211: EMPTY
68212: LIST
68213: LIST
68214: PPUSH
68215: CALL_OW 72
68219: ST_TO_ADDR
// if not tmp then
68220: LD_VAR 0 5
68224: NOT
68225: IFFALSE 68229
// exit ;
68227: GO 68274
// for i in tmp do
68229: LD_ADDR_VAR 0 3
68233: PUSH
68234: LD_VAR 0 5
68238: PUSH
68239: FOR_IN
68240: IFFALSE 68272
// begin result := EnemyInRange ( i , 22 ) ;
68242: LD_ADDR_VAR 0 2
68246: PUSH
68247: LD_VAR 0 3
68251: PPUSH
68252: LD_INT 22
68254: PPUSH
68255: CALL 65872 0 2
68259: ST_TO_ADDR
// if result then
68260: LD_VAR 0 2
68264: IFFALSE 68270
// exit ;
68266: POP
68267: POP
68268: GO 68274
// end ;
68270: GO 68239
68272: POP
68273: POP
// end ;
68274: LD_VAR 0 2
68278: RET
// export function FilterByTag ( units , tag ) ; begin
68279: LD_INT 0
68281: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
68282: LD_ADDR_VAR 0 3
68286: PUSH
68287: LD_VAR 0 1
68291: PPUSH
68292: LD_INT 120
68294: PUSH
68295: LD_VAR 0 2
68299: PUSH
68300: EMPTY
68301: LIST
68302: LIST
68303: PPUSH
68304: CALL_OW 72
68308: ST_TO_ADDR
// end ;
68309: LD_VAR 0 3
68313: RET
// export function IsDriver ( un ) ; begin
68314: LD_INT 0
68316: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
68317: LD_ADDR_VAR 0 2
68321: PUSH
68322: LD_VAR 0 1
68326: PUSH
68327: LD_INT 55
68329: PUSH
68330: EMPTY
68331: LIST
68332: PPUSH
68333: CALL_OW 69
68337: IN
68338: ST_TO_ADDR
// end ;
68339: LD_VAR 0 2
68343: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
68344: LD_INT 0
68346: PPUSH
68347: PPUSH
// list := [ ] ;
68348: LD_ADDR_VAR 0 5
68352: PUSH
68353: EMPTY
68354: ST_TO_ADDR
// case d of 0 :
68355: LD_VAR 0 3
68359: PUSH
68360: LD_INT 0
68362: DOUBLE
68363: EQUAL
68364: IFTRUE 68368
68366: GO 68501
68368: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
68369: LD_ADDR_VAR 0 5
68373: PUSH
68374: LD_VAR 0 1
68378: PUSH
68379: LD_INT 4
68381: MINUS
68382: PUSH
68383: LD_VAR 0 2
68387: PUSH
68388: LD_INT 4
68390: MINUS
68391: PUSH
68392: LD_INT 2
68394: PUSH
68395: EMPTY
68396: LIST
68397: LIST
68398: LIST
68399: PUSH
68400: LD_VAR 0 1
68404: PUSH
68405: LD_INT 3
68407: MINUS
68408: PUSH
68409: LD_VAR 0 2
68413: PUSH
68414: LD_INT 1
68416: PUSH
68417: EMPTY
68418: LIST
68419: LIST
68420: LIST
68421: PUSH
68422: LD_VAR 0 1
68426: PUSH
68427: LD_INT 4
68429: PLUS
68430: PUSH
68431: LD_VAR 0 2
68435: PUSH
68436: LD_INT 4
68438: PUSH
68439: EMPTY
68440: LIST
68441: LIST
68442: LIST
68443: PUSH
68444: LD_VAR 0 1
68448: PUSH
68449: LD_INT 3
68451: PLUS
68452: PUSH
68453: LD_VAR 0 2
68457: PUSH
68458: LD_INT 3
68460: PLUS
68461: PUSH
68462: LD_INT 5
68464: PUSH
68465: EMPTY
68466: LIST
68467: LIST
68468: LIST
68469: PUSH
68470: LD_VAR 0 1
68474: PUSH
68475: LD_VAR 0 2
68479: PUSH
68480: LD_INT 4
68482: PLUS
68483: PUSH
68484: LD_INT 0
68486: PUSH
68487: EMPTY
68488: LIST
68489: LIST
68490: LIST
68491: PUSH
68492: EMPTY
68493: LIST
68494: LIST
68495: LIST
68496: LIST
68497: LIST
68498: ST_TO_ADDR
// end ; 1 :
68499: GO 69199
68501: LD_INT 1
68503: DOUBLE
68504: EQUAL
68505: IFTRUE 68509
68507: GO 68642
68509: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
68510: LD_ADDR_VAR 0 5
68514: PUSH
68515: LD_VAR 0 1
68519: PUSH
68520: LD_VAR 0 2
68524: PUSH
68525: LD_INT 4
68527: MINUS
68528: PUSH
68529: LD_INT 3
68531: PUSH
68532: EMPTY
68533: LIST
68534: LIST
68535: LIST
68536: PUSH
68537: LD_VAR 0 1
68541: PUSH
68542: LD_INT 3
68544: MINUS
68545: PUSH
68546: LD_VAR 0 2
68550: PUSH
68551: LD_INT 3
68553: MINUS
68554: PUSH
68555: LD_INT 2
68557: PUSH
68558: EMPTY
68559: LIST
68560: LIST
68561: LIST
68562: PUSH
68563: LD_VAR 0 1
68567: PUSH
68568: LD_INT 4
68570: MINUS
68571: PUSH
68572: LD_VAR 0 2
68576: PUSH
68577: LD_INT 1
68579: PUSH
68580: EMPTY
68581: LIST
68582: LIST
68583: LIST
68584: PUSH
68585: LD_VAR 0 1
68589: PUSH
68590: LD_VAR 0 2
68594: PUSH
68595: LD_INT 3
68597: PLUS
68598: PUSH
68599: LD_INT 0
68601: PUSH
68602: EMPTY
68603: LIST
68604: LIST
68605: LIST
68606: PUSH
68607: LD_VAR 0 1
68611: PUSH
68612: LD_INT 4
68614: PLUS
68615: PUSH
68616: LD_VAR 0 2
68620: PUSH
68621: LD_INT 4
68623: PLUS
68624: PUSH
68625: LD_INT 5
68627: PUSH
68628: EMPTY
68629: LIST
68630: LIST
68631: LIST
68632: PUSH
68633: EMPTY
68634: LIST
68635: LIST
68636: LIST
68637: LIST
68638: LIST
68639: ST_TO_ADDR
// end ; 2 :
68640: GO 69199
68642: LD_INT 2
68644: DOUBLE
68645: EQUAL
68646: IFTRUE 68650
68648: GO 68779
68650: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
68651: LD_ADDR_VAR 0 5
68655: PUSH
68656: LD_VAR 0 1
68660: PUSH
68661: LD_VAR 0 2
68665: PUSH
68666: LD_INT 3
68668: MINUS
68669: PUSH
68670: LD_INT 3
68672: PUSH
68673: EMPTY
68674: LIST
68675: LIST
68676: LIST
68677: PUSH
68678: LD_VAR 0 1
68682: PUSH
68683: LD_INT 4
68685: PLUS
68686: PUSH
68687: LD_VAR 0 2
68691: PUSH
68692: LD_INT 4
68694: PUSH
68695: EMPTY
68696: LIST
68697: LIST
68698: LIST
68699: PUSH
68700: LD_VAR 0 1
68704: PUSH
68705: LD_VAR 0 2
68709: PUSH
68710: LD_INT 4
68712: PLUS
68713: PUSH
68714: LD_INT 0
68716: PUSH
68717: EMPTY
68718: LIST
68719: LIST
68720: LIST
68721: PUSH
68722: LD_VAR 0 1
68726: PUSH
68727: LD_INT 3
68729: MINUS
68730: PUSH
68731: LD_VAR 0 2
68735: PUSH
68736: LD_INT 1
68738: PUSH
68739: EMPTY
68740: LIST
68741: LIST
68742: LIST
68743: PUSH
68744: LD_VAR 0 1
68748: PUSH
68749: LD_INT 4
68751: MINUS
68752: PUSH
68753: LD_VAR 0 2
68757: PUSH
68758: LD_INT 4
68760: MINUS
68761: PUSH
68762: LD_INT 2
68764: PUSH
68765: EMPTY
68766: LIST
68767: LIST
68768: LIST
68769: PUSH
68770: EMPTY
68771: LIST
68772: LIST
68773: LIST
68774: LIST
68775: LIST
68776: ST_TO_ADDR
// end ; 3 :
68777: GO 69199
68779: LD_INT 3
68781: DOUBLE
68782: EQUAL
68783: IFTRUE 68787
68785: GO 68920
68787: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
68788: LD_ADDR_VAR 0 5
68792: PUSH
68793: LD_VAR 0 1
68797: PUSH
68798: LD_INT 3
68800: PLUS
68801: PUSH
68802: LD_VAR 0 2
68806: PUSH
68807: LD_INT 4
68809: PUSH
68810: EMPTY
68811: LIST
68812: LIST
68813: LIST
68814: PUSH
68815: LD_VAR 0 1
68819: PUSH
68820: LD_INT 4
68822: PLUS
68823: PUSH
68824: LD_VAR 0 2
68828: PUSH
68829: LD_INT 4
68831: PLUS
68832: PUSH
68833: LD_INT 5
68835: PUSH
68836: EMPTY
68837: LIST
68838: LIST
68839: LIST
68840: PUSH
68841: LD_VAR 0 1
68845: PUSH
68846: LD_INT 4
68848: MINUS
68849: PUSH
68850: LD_VAR 0 2
68854: PUSH
68855: LD_INT 1
68857: PUSH
68858: EMPTY
68859: LIST
68860: LIST
68861: LIST
68862: PUSH
68863: LD_VAR 0 1
68867: PUSH
68868: LD_VAR 0 2
68872: PUSH
68873: LD_INT 4
68875: MINUS
68876: PUSH
68877: LD_INT 3
68879: PUSH
68880: EMPTY
68881: LIST
68882: LIST
68883: LIST
68884: PUSH
68885: LD_VAR 0 1
68889: PUSH
68890: LD_INT 3
68892: MINUS
68893: PUSH
68894: LD_VAR 0 2
68898: PUSH
68899: LD_INT 3
68901: MINUS
68902: PUSH
68903: LD_INT 2
68905: PUSH
68906: EMPTY
68907: LIST
68908: LIST
68909: LIST
68910: PUSH
68911: EMPTY
68912: LIST
68913: LIST
68914: LIST
68915: LIST
68916: LIST
68917: ST_TO_ADDR
// end ; 4 :
68918: GO 69199
68920: LD_INT 4
68922: DOUBLE
68923: EQUAL
68924: IFTRUE 68928
68926: GO 69061
68928: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
68929: LD_ADDR_VAR 0 5
68933: PUSH
68934: LD_VAR 0 1
68938: PUSH
68939: LD_VAR 0 2
68943: PUSH
68944: LD_INT 4
68946: PLUS
68947: PUSH
68948: LD_INT 0
68950: PUSH
68951: EMPTY
68952: LIST
68953: LIST
68954: LIST
68955: PUSH
68956: LD_VAR 0 1
68960: PUSH
68961: LD_INT 3
68963: PLUS
68964: PUSH
68965: LD_VAR 0 2
68969: PUSH
68970: LD_INT 3
68972: PLUS
68973: PUSH
68974: LD_INT 5
68976: PUSH
68977: EMPTY
68978: LIST
68979: LIST
68980: LIST
68981: PUSH
68982: LD_VAR 0 1
68986: PUSH
68987: LD_INT 4
68989: PLUS
68990: PUSH
68991: LD_VAR 0 2
68995: PUSH
68996: LD_INT 4
68998: PUSH
68999: EMPTY
69000: LIST
69001: LIST
69002: LIST
69003: PUSH
69004: LD_VAR 0 1
69008: PUSH
69009: LD_VAR 0 2
69013: PUSH
69014: LD_INT 3
69016: MINUS
69017: PUSH
69018: LD_INT 3
69020: PUSH
69021: EMPTY
69022: LIST
69023: LIST
69024: LIST
69025: PUSH
69026: LD_VAR 0 1
69030: PUSH
69031: LD_INT 4
69033: MINUS
69034: PUSH
69035: LD_VAR 0 2
69039: PUSH
69040: LD_INT 4
69042: MINUS
69043: PUSH
69044: LD_INT 2
69046: PUSH
69047: EMPTY
69048: LIST
69049: LIST
69050: LIST
69051: PUSH
69052: EMPTY
69053: LIST
69054: LIST
69055: LIST
69056: LIST
69057: LIST
69058: ST_TO_ADDR
// end ; 5 :
69059: GO 69199
69061: LD_INT 5
69063: DOUBLE
69064: EQUAL
69065: IFTRUE 69069
69067: GO 69198
69069: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
69070: LD_ADDR_VAR 0 5
69074: PUSH
69075: LD_VAR 0 1
69079: PUSH
69080: LD_INT 4
69082: MINUS
69083: PUSH
69084: LD_VAR 0 2
69088: PUSH
69089: LD_INT 1
69091: PUSH
69092: EMPTY
69093: LIST
69094: LIST
69095: LIST
69096: PUSH
69097: LD_VAR 0 1
69101: PUSH
69102: LD_VAR 0 2
69106: PUSH
69107: LD_INT 4
69109: MINUS
69110: PUSH
69111: LD_INT 3
69113: PUSH
69114: EMPTY
69115: LIST
69116: LIST
69117: LIST
69118: PUSH
69119: LD_VAR 0 1
69123: PUSH
69124: LD_INT 4
69126: PLUS
69127: PUSH
69128: LD_VAR 0 2
69132: PUSH
69133: LD_INT 4
69135: PLUS
69136: PUSH
69137: LD_INT 5
69139: PUSH
69140: EMPTY
69141: LIST
69142: LIST
69143: LIST
69144: PUSH
69145: LD_VAR 0 1
69149: PUSH
69150: LD_INT 3
69152: PLUS
69153: PUSH
69154: LD_VAR 0 2
69158: PUSH
69159: LD_INT 4
69161: PUSH
69162: EMPTY
69163: LIST
69164: LIST
69165: LIST
69166: PUSH
69167: LD_VAR 0 1
69171: PUSH
69172: LD_VAR 0 2
69176: PUSH
69177: LD_INT 3
69179: PLUS
69180: PUSH
69181: LD_INT 0
69183: PUSH
69184: EMPTY
69185: LIST
69186: LIST
69187: LIST
69188: PUSH
69189: EMPTY
69190: LIST
69191: LIST
69192: LIST
69193: LIST
69194: LIST
69195: ST_TO_ADDR
// end ; end ;
69196: GO 69199
69198: POP
// result := list ;
69199: LD_ADDR_VAR 0 4
69203: PUSH
69204: LD_VAR 0 5
69208: ST_TO_ADDR
// end ;
69209: LD_VAR 0 4
69213: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
69214: LD_INT 0
69216: PPUSH
69217: PPUSH
69218: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
69219: LD_VAR 0 1
69223: NOT
69224: PUSH
69225: LD_VAR 0 2
69229: PUSH
69230: LD_INT 1
69232: PUSH
69233: LD_INT 2
69235: PUSH
69236: LD_INT 3
69238: PUSH
69239: LD_INT 4
69241: PUSH
69242: EMPTY
69243: LIST
69244: LIST
69245: LIST
69246: LIST
69247: IN
69248: NOT
69249: OR
69250: IFFALSE 69254
// exit ;
69252: GO 69337
// tmp := [ ] ;
69254: LD_ADDR_VAR 0 5
69258: PUSH
69259: EMPTY
69260: ST_TO_ADDR
// for i in units do
69261: LD_ADDR_VAR 0 4
69265: PUSH
69266: LD_VAR 0 1
69270: PUSH
69271: FOR_IN
69272: IFFALSE 69306
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
69274: LD_ADDR_VAR 0 5
69278: PUSH
69279: LD_VAR 0 5
69283: PPUSH
69284: LD_VAR 0 4
69288: PPUSH
69289: LD_VAR 0 2
69293: PPUSH
69294: CALL_OW 259
69298: PPUSH
69299: CALL 70710 0 2
69303: ST_TO_ADDR
69304: GO 69271
69306: POP
69307: POP
// if not tmp then
69308: LD_VAR 0 5
69312: NOT
69313: IFFALSE 69317
// exit ;
69315: GO 69337
// result := SortListByListDesc ( units , tmp ) ;
69317: LD_ADDR_VAR 0 3
69321: PUSH
69322: LD_VAR 0 1
69326: PPUSH
69327: LD_VAR 0 5
69331: PPUSH
69332: CALL_OW 77
69336: ST_TO_ADDR
// end ;
69337: LD_VAR 0 3
69341: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
69342: LD_INT 0
69344: PPUSH
69345: PPUSH
69346: PPUSH
// result := false ;
69347: LD_ADDR_VAR 0 3
69351: PUSH
69352: LD_INT 0
69354: ST_TO_ADDR
// if not building then
69355: LD_VAR 0 2
69359: NOT
69360: IFFALSE 69364
// exit ;
69362: GO 69502
// x := GetX ( building ) ;
69364: LD_ADDR_VAR 0 4
69368: PUSH
69369: LD_VAR 0 2
69373: PPUSH
69374: CALL_OW 250
69378: ST_TO_ADDR
// y := GetY ( building ) ;
69379: LD_ADDR_VAR 0 5
69383: PUSH
69384: LD_VAR 0 2
69388: PPUSH
69389: CALL_OW 251
69393: ST_TO_ADDR
// if not x or not y then
69394: LD_VAR 0 4
69398: NOT
69399: PUSH
69400: LD_VAR 0 5
69404: NOT
69405: OR
69406: IFFALSE 69410
// exit ;
69408: GO 69502
// if GetTaskList ( unit ) then
69410: LD_VAR 0 1
69414: PPUSH
69415: CALL_OW 437
69419: IFFALSE 69502
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
69421: LD_STRING e
69423: PUSH
69424: LD_VAR 0 1
69428: PPUSH
69429: CALL_OW 437
69433: PUSH
69434: LD_INT 1
69436: ARRAY
69437: PUSH
69438: LD_INT 1
69440: ARRAY
69441: EQUAL
69442: PUSH
69443: LD_VAR 0 4
69447: PUSH
69448: LD_VAR 0 1
69452: PPUSH
69453: CALL_OW 437
69457: PUSH
69458: LD_INT 1
69460: ARRAY
69461: PUSH
69462: LD_INT 2
69464: ARRAY
69465: EQUAL
69466: AND
69467: PUSH
69468: LD_VAR 0 5
69472: PUSH
69473: LD_VAR 0 1
69477: PPUSH
69478: CALL_OW 437
69482: PUSH
69483: LD_INT 1
69485: ARRAY
69486: PUSH
69487: LD_INT 3
69489: ARRAY
69490: EQUAL
69491: AND
69492: IFFALSE 69502
// result := true end ;
69494: LD_ADDR_VAR 0 3
69498: PUSH
69499: LD_INT 1
69501: ST_TO_ADDR
// end ;
69502: LD_VAR 0 3
69506: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
69507: LD_INT 0
69509: PPUSH
// result := false ;
69510: LD_ADDR_VAR 0 4
69514: PUSH
69515: LD_INT 0
69517: ST_TO_ADDR
// if GetTaskList ( unit ) then
69518: LD_VAR 0 1
69522: PPUSH
69523: CALL_OW 437
69527: IFFALSE 69610
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
69529: LD_STRING M
69531: PUSH
69532: LD_VAR 0 1
69536: PPUSH
69537: CALL_OW 437
69541: PUSH
69542: LD_INT 1
69544: ARRAY
69545: PUSH
69546: LD_INT 1
69548: ARRAY
69549: EQUAL
69550: PUSH
69551: LD_VAR 0 2
69555: PUSH
69556: LD_VAR 0 1
69560: PPUSH
69561: CALL_OW 437
69565: PUSH
69566: LD_INT 1
69568: ARRAY
69569: PUSH
69570: LD_INT 2
69572: ARRAY
69573: EQUAL
69574: AND
69575: PUSH
69576: LD_VAR 0 3
69580: PUSH
69581: LD_VAR 0 1
69585: PPUSH
69586: CALL_OW 437
69590: PUSH
69591: LD_INT 1
69593: ARRAY
69594: PUSH
69595: LD_INT 3
69597: ARRAY
69598: EQUAL
69599: AND
69600: IFFALSE 69610
// result := true ;
69602: LD_ADDR_VAR 0 4
69606: PUSH
69607: LD_INT 1
69609: ST_TO_ADDR
// end ; end ;
69610: LD_VAR 0 4
69614: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
69615: LD_INT 0
69617: PPUSH
69618: PPUSH
69619: PPUSH
69620: PPUSH
// if not unit or not area then
69621: LD_VAR 0 1
69625: NOT
69626: PUSH
69627: LD_VAR 0 2
69631: NOT
69632: OR
69633: IFFALSE 69637
// exit ;
69635: GO 69813
// tmp := AreaToList ( area , i ) ;
69637: LD_ADDR_VAR 0 6
69641: PUSH
69642: LD_VAR 0 2
69646: PPUSH
69647: LD_VAR 0 5
69651: PPUSH
69652: CALL_OW 517
69656: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
69657: LD_ADDR_VAR 0 5
69661: PUSH
69662: DOUBLE
69663: LD_INT 1
69665: DEC
69666: ST_TO_ADDR
69667: LD_VAR 0 6
69671: PUSH
69672: LD_INT 1
69674: ARRAY
69675: PUSH
69676: FOR_TO
69677: IFFALSE 69811
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
69679: LD_ADDR_VAR 0 7
69683: PUSH
69684: LD_VAR 0 6
69688: PUSH
69689: LD_INT 1
69691: ARRAY
69692: PUSH
69693: LD_VAR 0 5
69697: ARRAY
69698: PUSH
69699: LD_VAR 0 6
69703: PUSH
69704: LD_INT 2
69706: ARRAY
69707: PUSH
69708: LD_VAR 0 5
69712: ARRAY
69713: PUSH
69714: EMPTY
69715: LIST
69716: LIST
69717: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
69718: LD_INT 92
69720: PUSH
69721: LD_VAR 0 7
69725: PUSH
69726: LD_INT 1
69728: ARRAY
69729: PUSH
69730: LD_VAR 0 7
69734: PUSH
69735: LD_INT 2
69737: ARRAY
69738: PUSH
69739: LD_INT 2
69741: PUSH
69742: EMPTY
69743: LIST
69744: LIST
69745: LIST
69746: LIST
69747: PPUSH
69748: CALL_OW 69
69752: PUSH
69753: LD_INT 0
69755: EQUAL
69756: IFFALSE 69809
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
69758: LD_VAR 0 1
69762: PPUSH
69763: LD_VAR 0 7
69767: PUSH
69768: LD_INT 1
69770: ARRAY
69771: PPUSH
69772: LD_VAR 0 7
69776: PUSH
69777: LD_INT 2
69779: ARRAY
69780: PPUSH
69781: LD_VAR 0 3
69785: PPUSH
69786: CALL_OW 48
// result := IsPlaced ( unit ) ;
69790: LD_ADDR_VAR 0 4
69794: PUSH
69795: LD_VAR 0 1
69799: PPUSH
69800: CALL_OW 305
69804: ST_TO_ADDR
// exit ;
69805: POP
69806: POP
69807: GO 69813
// end ; end ;
69809: GO 69676
69811: POP
69812: POP
// end ;
69813: LD_VAR 0 4
69817: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
69818: LD_INT 0
69820: PPUSH
69821: PPUSH
69822: PPUSH
// if not side or side > 8 then
69823: LD_VAR 0 1
69827: NOT
69828: PUSH
69829: LD_VAR 0 1
69833: PUSH
69834: LD_INT 8
69836: GREATER
69837: OR
69838: IFFALSE 69842
// exit ;
69840: GO 70029
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
69842: LD_ADDR_VAR 0 4
69846: PUSH
69847: LD_INT 22
69849: PUSH
69850: LD_VAR 0 1
69854: PUSH
69855: EMPTY
69856: LIST
69857: LIST
69858: PUSH
69859: LD_INT 21
69861: PUSH
69862: LD_INT 3
69864: PUSH
69865: EMPTY
69866: LIST
69867: LIST
69868: PUSH
69869: EMPTY
69870: LIST
69871: LIST
69872: PPUSH
69873: CALL_OW 69
69877: ST_TO_ADDR
// if not tmp then
69878: LD_VAR 0 4
69882: NOT
69883: IFFALSE 69887
// exit ;
69885: GO 70029
// enable_addtolog := true ;
69887: LD_ADDR_OWVAR 81
69891: PUSH
69892: LD_INT 1
69894: ST_TO_ADDR
// AddToLog ( [ ) ;
69895: LD_STRING [
69897: PPUSH
69898: CALL_OW 561
// for i in tmp do
69902: LD_ADDR_VAR 0 3
69906: PUSH
69907: LD_VAR 0 4
69911: PUSH
69912: FOR_IN
69913: IFFALSE 70020
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
69915: LD_STRING [
69917: PUSH
69918: LD_VAR 0 3
69922: PPUSH
69923: CALL_OW 266
69927: STR
69928: PUSH
69929: LD_STRING , 
69931: STR
69932: PUSH
69933: LD_VAR 0 3
69937: PPUSH
69938: CALL_OW 250
69942: STR
69943: PUSH
69944: LD_STRING , 
69946: STR
69947: PUSH
69948: LD_VAR 0 3
69952: PPUSH
69953: CALL_OW 251
69957: STR
69958: PUSH
69959: LD_STRING , 
69961: STR
69962: PUSH
69963: LD_VAR 0 3
69967: PPUSH
69968: CALL_OW 254
69972: STR
69973: PUSH
69974: LD_STRING , 
69976: STR
69977: PUSH
69978: LD_VAR 0 3
69982: PPUSH
69983: LD_INT 1
69985: PPUSH
69986: CALL_OW 268
69990: STR
69991: PUSH
69992: LD_STRING , 
69994: STR
69995: PUSH
69996: LD_VAR 0 3
70000: PPUSH
70001: LD_INT 2
70003: PPUSH
70004: CALL_OW 268
70008: STR
70009: PUSH
70010: LD_STRING ],
70012: STR
70013: PPUSH
70014: CALL_OW 561
// end ;
70018: GO 69912
70020: POP
70021: POP
// AddToLog ( ]; ) ;
70022: LD_STRING ];
70024: PPUSH
70025: CALL_OW 561
// end ;
70029: LD_VAR 0 2
70033: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
70034: LD_INT 0
70036: PPUSH
70037: PPUSH
70038: PPUSH
70039: PPUSH
70040: PPUSH
// if not area or not rate or not max then
70041: LD_VAR 0 1
70045: NOT
70046: PUSH
70047: LD_VAR 0 2
70051: NOT
70052: OR
70053: PUSH
70054: LD_VAR 0 4
70058: NOT
70059: OR
70060: IFFALSE 70064
// exit ;
70062: GO 70253
// while 1 do
70064: LD_INT 1
70066: IFFALSE 70253
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
70068: LD_ADDR_VAR 0 9
70072: PUSH
70073: LD_VAR 0 1
70077: PPUSH
70078: LD_INT 1
70080: PPUSH
70081: CALL_OW 287
70085: PUSH
70086: LD_INT 10
70088: MUL
70089: ST_TO_ADDR
// r := rate / 10 ;
70090: LD_ADDR_VAR 0 7
70094: PUSH
70095: LD_VAR 0 2
70099: PUSH
70100: LD_INT 10
70102: DIVREAL
70103: ST_TO_ADDR
// time := 1 1$00 ;
70104: LD_ADDR_VAR 0 8
70108: PUSH
70109: LD_INT 2100
70111: ST_TO_ADDR
// if amount < min then
70112: LD_VAR 0 9
70116: PUSH
70117: LD_VAR 0 3
70121: LESS
70122: IFFALSE 70140
// r := r * 2 else
70124: LD_ADDR_VAR 0 7
70128: PUSH
70129: LD_VAR 0 7
70133: PUSH
70134: LD_INT 2
70136: MUL
70137: ST_TO_ADDR
70138: GO 70166
// if amount > max then
70140: LD_VAR 0 9
70144: PUSH
70145: LD_VAR 0 4
70149: GREATER
70150: IFFALSE 70166
// r := r / 2 ;
70152: LD_ADDR_VAR 0 7
70156: PUSH
70157: LD_VAR 0 7
70161: PUSH
70162: LD_INT 2
70164: DIVREAL
70165: ST_TO_ADDR
// time := time / r ;
70166: LD_ADDR_VAR 0 8
70170: PUSH
70171: LD_VAR 0 8
70175: PUSH
70176: LD_VAR 0 7
70180: DIVREAL
70181: ST_TO_ADDR
// if time < 0 then
70182: LD_VAR 0 8
70186: PUSH
70187: LD_INT 0
70189: LESS
70190: IFFALSE 70207
// time := time * - 1 ;
70192: LD_ADDR_VAR 0 8
70196: PUSH
70197: LD_VAR 0 8
70201: PUSH
70202: LD_INT 1
70204: NEG
70205: MUL
70206: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
70207: LD_VAR 0 8
70211: PUSH
70212: LD_INT 35
70214: PPUSH
70215: LD_INT 875
70217: PPUSH
70218: CALL_OW 12
70222: PLUS
70223: PPUSH
70224: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
70228: LD_INT 1
70230: PPUSH
70231: LD_INT 5
70233: PPUSH
70234: CALL_OW 12
70238: PPUSH
70239: LD_VAR 0 1
70243: PPUSH
70244: LD_INT 1
70246: PPUSH
70247: CALL_OW 55
// end ;
70251: GO 70064
// end ;
70253: LD_VAR 0 5
70257: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
70258: LD_INT 0
70260: PPUSH
70261: PPUSH
70262: PPUSH
70263: PPUSH
70264: PPUSH
70265: PPUSH
70266: PPUSH
70267: PPUSH
// if not turrets or not factories then
70268: LD_VAR 0 1
70272: NOT
70273: PUSH
70274: LD_VAR 0 2
70278: NOT
70279: OR
70280: IFFALSE 70284
// exit ;
70282: GO 70591
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
70284: LD_ADDR_VAR 0 10
70288: PUSH
70289: LD_INT 5
70291: PUSH
70292: LD_INT 6
70294: PUSH
70295: EMPTY
70296: LIST
70297: LIST
70298: PUSH
70299: LD_INT 2
70301: PUSH
70302: LD_INT 4
70304: PUSH
70305: EMPTY
70306: LIST
70307: LIST
70308: PUSH
70309: LD_INT 3
70311: PUSH
70312: LD_INT 5
70314: PUSH
70315: EMPTY
70316: LIST
70317: LIST
70318: PUSH
70319: EMPTY
70320: LIST
70321: LIST
70322: LIST
70323: PUSH
70324: LD_INT 24
70326: PUSH
70327: LD_INT 25
70329: PUSH
70330: EMPTY
70331: LIST
70332: LIST
70333: PUSH
70334: LD_INT 23
70336: PUSH
70337: LD_INT 27
70339: PUSH
70340: EMPTY
70341: LIST
70342: LIST
70343: PUSH
70344: EMPTY
70345: LIST
70346: LIST
70347: PUSH
70348: LD_INT 42
70350: PUSH
70351: LD_INT 43
70353: PUSH
70354: EMPTY
70355: LIST
70356: LIST
70357: PUSH
70358: LD_INT 44
70360: PUSH
70361: LD_INT 46
70363: PUSH
70364: EMPTY
70365: LIST
70366: LIST
70367: PUSH
70368: LD_INT 45
70370: PUSH
70371: LD_INT 47
70373: PUSH
70374: EMPTY
70375: LIST
70376: LIST
70377: PUSH
70378: EMPTY
70379: LIST
70380: LIST
70381: LIST
70382: PUSH
70383: EMPTY
70384: LIST
70385: LIST
70386: LIST
70387: ST_TO_ADDR
// result := [ ] ;
70388: LD_ADDR_VAR 0 3
70392: PUSH
70393: EMPTY
70394: ST_TO_ADDR
// for i in turrets do
70395: LD_ADDR_VAR 0 4
70399: PUSH
70400: LD_VAR 0 1
70404: PUSH
70405: FOR_IN
70406: IFFALSE 70589
// begin nat := GetNation ( i ) ;
70408: LD_ADDR_VAR 0 7
70412: PUSH
70413: LD_VAR 0 4
70417: PPUSH
70418: CALL_OW 248
70422: ST_TO_ADDR
// weapon := 0 ;
70423: LD_ADDR_VAR 0 8
70427: PUSH
70428: LD_INT 0
70430: ST_TO_ADDR
// if not nat then
70431: LD_VAR 0 7
70435: NOT
70436: IFFALSE 70440
// continue ;
70438: GO 70405
// for j in list [ nat ] do
70440: LD_ADDR_VAR 0 5
70444: PUSH
70445: LD_VAR 0 10
70449: PUSH
70450: LD_VAR 0 7
70454: ARRAY
70455: PUSH
70456: FOR_IN
70457: IFFALSE 70498
// if GetBWeapon ( i ) = j [ 1 ] then
70459: LD_VAR 0 4
70463: PPUSH
70464: CALL_OW 269
70468: PUSH
70469: LD_VAR 0 5
70473: PUSH
70474: LD_INT 1
70476: ARRAY
70477: EQUAL
70478: IFFALSE 70496
// begin weapon := j [ 2 ] ;
70480: LD_ADDR_VAR 0 8
70484: PUSH
70485: LD_VAR 0 5
70489: PUSH
70490: LD_INT 2
70492: ARRAY
70493: ST_TO_ADDR
// break ;
70494: GO 70498
// end ;
70496: GO 70456
70498: POP
70499: POP
// if not weapon then
70500: LD_VAR 0 8
70504: NOT
70505: IFFALSE 70509
// continue ;
70507: GO 70405
// for k in factories do
70509: LD_ADDR_VAR 0 6
70513: PUSH
70514: LD_VAR 0 2
70518: PUSH
70519: FOR_IN
70520: IFFALSE 70585
// begin weapons := AvailableWeaponList ( k ) ;
70522: LD_ADDR_VAR 0 9
70526: PUSH
70527: LD_VAR 0 6
70531: PPUSH
70532: CALL_OW 478
70536: ST_TO_ADDR
// if not weapons then
70537: LD_VAR 0 9
70541: NOT
70542: IFFALSE 70546
// continue ;
70544: GO 70519
// if weapon in weapons then
70546: LD_VAR 0 8
70550: PUSH
70551: LD_VAR 0 9
70555: IN
70556: IFFALSE 70583
// begin result := [ i , weapon ] ;
70558: LD_ADDR_VAR 0 3
70562: PUSH
70563: LD_VAR 0 4
70567: PUSH
70568: LD_VAR 0 8
70572: PUSH
70573: EMPTY
70574: LIST
70575: LIST
70576: ST_TO_ADDR
// exit ;
70577: POP
70578: POP
70579: POP
70580: POP
70581: GO 70591
// end ; end ;
70583: GO 70519
70585: POP
70586: POP
// end ;
70587: GO 70405
70589: POP
70590: POP
// end ;
70591: LD_VAR 0 3
70595: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
70596: LD_INT 0
70598: PPUSH
// if not side or side > 8 then
70599: LD_VAR 0 3
70603: NOT
70604: PUSH
70605: LD_VAR 0 3
70609: PUSH
70610: LD_INT 8
70612: GREATER
70613: OR
70614: IFFALSE 70618
// exit ;
70616: GO 70677
// if not range then
70618: LD_VAR 0 4
70622: NOT
70623: IFFALSE 70634
// range := - 12 ;
70625: LD_ADDR_VAR 0 4
70629: PUSH
70630: LD_INT 12
70632: NEG
70633: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
70634: LD_VAR 0 1
70638: PPUSH
70639: LD_VAR 0 2
70643: PPUSH
70644: LD_VAR 0 3
70648: PPUSH
70649: LD_VAR 0 4
70653: PPUSH
70654: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
70658: LD_VAR 0 1
70662: PPUSH
70663: LD_VAR 0 2
70667: PPUSH
70668: LD_VAR 0 3
70672: PPUSH
70673: CALL_OW 331
// end ;
70677: LD_VAR 0 5
70681: RET
// export function Video ( mode ) ; begin
70682: LD_INT 0
70684: PPUSH
// ingame_video = mode ;
70685: LD_ADDR_OWVAR 52
70689: PUSH
70690: LD_VAR 0 1
70694: ST_TO_ADDR
// interface_hidden = mode ;
70695: LD_ADDR_OWVAR 54
70699: PUSH
70700: LD_VAR 0 1
70704: ST_TO_ADDR
// end ;
70705: LD_VAR 0 2
70709: RET
// export function Join ( array , element ) ; begin
70710: LD_INT 0
70712: PPUSH
// result := Replace ( array , array + 1 , element ) ;
70713: LD_ADDR_VAR 0 3
70717: PUSH
70718: LD_VAR 0 1
70722: PPUSH
70723: LD_VAR 0 1
70727: PUSH
70728: LD_INT 1
70730: PLUS
70731: PPUSH
70732: LD_VAR 0 2
70736: PPUSH
70737: CALL_OW 1
70741: ST_TO_ADDR
// end ;
70742: LD_VAR 0 3
70746: RET
// export function JoinUnion ( array , element ) ; begin
70747: LD_INT 0
70749: PPUSH
// result := array union element ;
70750: LD_ADDR_VAR 0 3
70754: PUSH
70755: LD_VAR 0 1
70759: PUSH
70760: LD_VAR 0 2
70764: UNION
70765: ST_TO_ADDR
// end ;
70766: LD_VAR 0 3
70770: RET
// export function GetBehemoths ( side ) ; begin
70771: LD_INT 0
70773: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
70774: LD_ADDR_VAR 0 2
70778: PUSH
70779: LD_INT 22
70781: PUSH
70782: LD_VAR 0 1
70786: PUSH
70787: EMPTY
70788: LIST
70789: LIST
70790: PUSH
70791: LD_INT 31
70793: PUSH
70794: LD_INT 25
70796: PUSH
70797: EMPTY
70798: LIST
70799: LIST
70800: PUSH
70801: EMPTY
70802: LIST
70803: LIST
70804: PPUSH
70805: CALL_OW 69
70809: ST_TO_ADDR
// end ;
70810: LD_VAR 0 2
70814: RET
// export function Shuffle ( array ) ; var i , index ; begin
70815: LD_INT 0
70817: PPUSH
70818: PPUSH
70819: PPUSH
// result := [ ] ;
70820: LD_ADDR_VAR 0 2
70824: PUSH
70825: EMPTY
70826: ST_TO_ADDR
// if not array then
70827: LD_VAR 0 1
70831: NOT
70832: IFFALSE 70836
// exit ;
70834: GO 70935
// Randomize ;
70836: CALL_OW 10
// for i = array downto 1 do
70840: LD_ADDR_VAR 0 3
70844: PUSH
70845: DOUBLE
70846: LD_VAR 0 1
70850: INC
70851: ST_TO_ADDR
70852: LD_INT 1
70854: PUSH
70855: FOR_DOWNTO
70856: IFFALSE 70933
// begin index := rand ( 1 , array ) ;
70858: LD_ADDR_VAR 0 4
70862: PUSH
70863: LD_INT 1
70865: PPUSH
70866: LD_VAR 0 1
70870: PPUSH
70871: CALL_OW 12
70875: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
70876: LD_ADDR_VAR 0 2
70880: PUSH
70881: LD_VAR 0 2
70885: PPUSH
70886: LD_VAR 0 2
70890: PUSH
70891: LD_INT 1
70893: PLUS
70894: PPUSH
70895: LD_VAR 0 1
70899: PUSH
70900: LD_VAR 0 4
70904: ARRAY
70905: PPUSH
70906: CALL_OW 2
70910: ST_TO_ADDR
// array := Delete ( array , index ) ;
70911: LD_ADDR_VAR 0 1
70915: PUSH
70916: LD_VAR 0 1
70920: PPUSH
70921: LD_VAR 0 4
70925: PPUSH
70926: CALL_OW 3
70930: ST_TO_ADDR
// end ;
70931: GO 70855
70933: POP
70934: POP
// end ;
70935: LD_VAR 0 2
70939: RET
// export function GetBaseMaterials ( base ) ; begin
70940: LD_INT 0
70942: PPUSH
// result := [ 0 , 0 , 0 ] ;
70943: LD_ADDR_VAR 0 2
70947: PUSH
70948: LD_INT 0
70950: PUSH
70951: LD_INT 0
70953: PUSH
70954: LD_INT 0
70956: PUSH
70957: EMPTY
70958: LIST
70959: LIST
70960: LIST
70961: ST_TO_ADDR
// if not base then
70962: LD_VAR 0 1
70966: NOT
70967: IFFALSE 70971
// exit ;
70969: GO 71020
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
70971: LD_ADDR_VAR 0 2
70975: PUSH
70976: LD_VAR 0 1
70980: PPUSH
70981: LD_INT 1
70983: PPUSH
70984: CALL_OW 275
70988: PUSH
70989: LD_VAR 0 1
70993: PPUSH
70994: LD_INT 2
70996: PPUSH
70997: CALL_OW 275
71001: PUSH
71002: LD_VAR 0 1
71006: PPUSH
71007: LD_INT 3
71009: PPUSH
71010: CALL_OW 275
71014: PUSH
71015: EMPTY
71016: LIST
71017: LIST
71018: LIST
71019: ST_TO_ADDR
// end ;
71020: LD_VAR 0 2
71024: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
71025: LD_INT 0
71027: PPUSH
71028: PPUSH
// result := array ;
71029: LD_ADDR_VAR 0 3
71033: PUSH
71034: LD_VAR 0 1
71038: ST_TO_ADDR
// if size >= result then
71039: LD_VAR 0 2
71043: PUSH
71044: LD_VAR 0 3
71048: GREATEREQUAL
71049: IFFALSE 71053
// exit ;
71051: GO 71103
// if size then
71053: LD_VAR 0 2
71057: IFFALSE 71103
// for i := array downto size do
71059: LD_ADDR_VAR 0 4
71063: PUSH
71064: DOUBLE
71065: LD_VAR 0 1
71069: INC
71070: ST_TO_ADDR
71071: LD_VAR 0 2
71075: PUSH
71076: FOR_DOWNTO
71077: IFFALSE 71101
// result := Delete ( result , result ) ;
71079: LD_ADDR_VAR 0 3
71083: PUSH
71084: LD_VAR 0 3
71088: PPUSH
71089: LD_VAR 0 3
71093: PPUSH
71094: CALL_OW 3
71098: ST_TO_ADDR
71099: GO 71076
71101: POP
71102: POP
// end ;
71103: LD_VAR 0 3
71107: RET
// export function ComExit ( unit ) ; var tmp ; begin
71108: LD_INT 0
71110: PPUSH
71111: PPUSH
// if not IsInUnit ( unit ) then
71112: LD_VAR 0 1
71116: PPUSH
71117: CALL_OW 310
71121: NOT
71122: IFFALSE 71126
// exit ;
71124: GO 71186
// tmp := IsInUnit ( unit ) ;
71126: LD_ADDR_VAR 0 3
71130: PUSH
71131: LD_VAR 0 1
71135: PPUSH
71136: CALL_OW 310
71140: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
71141: LD_VAR 0 3
71145: PPUSH
71146: CALL_OW 247
71150: PUSH
71151: LD_INT 2
71153: EQUAL
71154: IFFALSE 71167
// ComExitVehicle ( unit ) else
71156: LD_VAR 0 1
71160: PPUSH
71161: CALL_OW 121
71165: GO 71176
// ComExitBuilding ( unit ) ;
71167: LD_VAR 0 1
71171: PPUSH
71172: CALL_OW 122
// result := tmp ;
71176: LD_ADDR_VAR 0 2
71180: PUSH
71181: LD_VAR 0 3
71185: ST_TO_ADDR
// end ;
71186: LD_VAR 0 2
71190: RET
// export function ComExitAll ( units ) ; var i ; begin
71191: LD_INT 0
71193: PPUSH
71194: PPUSH
// if not units then
71195: LD_VAR 0 1
71199: NOT
71200: IFFALSE 71204
// exit ;
71202: GO 71230
// for i in units do
71204: LD_ADDR_VAR 0 3
71208: PUSH
71209: LD_VAR 0 1
71213: PUSH
71214: FOR_IN
71215: IFFALSE 71228
// ComExit ( i ) ;
71217: LD_VAR 0 3
71221: PPUSH
71222: CALL 71108 0 1
71226: GO 71214
71228: POP
71229: POP
// end ;
71230: LD_VAR 0 2
71234: RET
// export function ResetHc ; begin
71235: LD_INT 0
71237: PPUSH
// InitHc ;
71238: CALL_OW 19
// hc_importance := 0 ;
71242: LD_ADDR_OWVAR 32
71246: PUSH
71247: LD_INT 0
71249: ST_TO_ADDR
// end ;
71250: LD_VAR 0 1
71254: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
71255: LD_INT 0
71257: PPUSH
71258: PPUSH
71259: PPUSH
// _x := ( x1 + x2 ) div 2 ;
71260: LD_ADDR_VAR 0 6
71264: PUSH
71265: LD_VAR 0 1
71269: PUSH
71270: LD_VAR 0 3
71274: PLUS
71275: PUSH
71276: LD_INT 2
71278: DIV
71279: ST_TO_ADDR
// if _x < 0 then
71280: LD_VAR 0 6
71284: PUSH
71285: LD_INT 0
71287: LESS
71288: IFFALSE 71305
// _x := _x * - 1 ;
71290: LD_ADDR_VAR 0 6
71294: PUSH
71295: LD_VAR 0 6
71299: PUSH
71300: LD_INT 1
71302: NEG
71303: MUL
71304: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
71305: LD_ADDR_VAR 0 7
71309: PUSH
71310: LD_VAR 0 2
71314: PUSH
71315: LD_VAR 0 4
71319: PLUS
71320: PUSH
71321: LD_INT 2
71323: DIV
71324: ST_TO_ADDR
// if _y < 0 then
71325: LD_VAR 0 7
71329: PUSH
71330: LD_INT 0
71332: LESS
71333: IFFALSE 71350
// _y := _y * - 1 ;
71335: LD_ADDR_VAR 0 7
71339: PUSH
71340: LD_VAR 0 7
71344: PUSH
71345: LD_INT 1
71347: NEG
71348: MUL
71349: ST_TO_ADDR
// result := [ _x , _y ] ;
71350: LD_ADDR_VAR 0 5
71354: PUSH
71355: LD_VAR 0 6
71359: PUSH
71360: LD_VAR 0 7
71364: PUSH
71365: EMPTY
71366: LIST
71367: LIST
71368: ST_TO_ADDR
// end ;
71369: LD_VAR 0 5
71373: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
71374: LD_INT 0
71376: PPUSH
71377: PPUSH
71378: PPUSH
71379: PPUSH
// task := GetTaskList ( unit ) ;
71380: LD_ADDR_VAR 0 7
71384: PUSH
71385: LD_VAR 0 1
71389: PPUSH
71390: CALL_OW 437
71394: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
71395: LD_VAR 0 7
71399: NOT
71400: PUSH
71401: LD_VAR 0 1
71405: PPUSH
71406: LD_VAR 0 2
71410: PPUSH
71411: CALL_OW 308
71415: NOT
71416: AND
71417: IFFALSE 71421
// exit ;
71419: GO 71539
// if IsInArea ( unit , area ) then
71421: LD_VAR 0 1
71425: PPUSH
71426: LD_VAR 0 2
71430: PPUSH
71431: CALL_OW 308
71435: IFFALSE 71453
// begin ComMoveToArea ( unit , goAway ) ;
71437: LD_VAR 0 1
71441: PPUSH
71442: LD_VAR 0 3
71446: PPUSH
71447: CALL_OW 113
// exit ;
71451: GO 71539
// end ; if task [ 1 ] [ 1 ] <> M then
71453: LD_VAR 0 7
71457: PUSH
71458: LD_INT 1
71460: ARRAY
71461: PUSH
71462: LD_INT 1
71464: ARRAY
71465: PUSH
71466: LD_STRING M
71468: NONEQUAL
71469: IFFALSE 71473
// exit ;
71471: GO 71539
// x := task [ 1 ] [ 2 ] ;
71473: LD_ADDR_VAR 0 5
71477: PUSH
71478: LD_VAR 0 7
71482: PUSH
71483: LD_INT 1
71485: ARRAY
71486: PUSH
71487: LD_INT 2
71489: ARRAY
71490: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
71491: LD_ADDR_VAR 0 6
71495: PUSH
71496: LD_VAR 0 7
71500: PUSH
71501: LD_INT 1
71503: ARRAY
71504: PUSH
71505: LD_INT 3
71507: ARRAY
71508: ST_TO_ADDR
// if InArea ( x , y , area ) then
71509: LD_VAR 0 5
71513: PPUSH
71514: LD_VAR 0 6
71518: PPUSH
71519: LD_VAR 0 2
71523: PPUSH
71524: CALL_OW 309
71528: IFFALSE 71539
// ComStop ( unit ) ;
71530: LD_VAR 0 1
71534: PPUSH
71535: CALL_OW 141
// end ;
71539: LD_VAR 0 4
71543: RET
// export function Abs ( value ) ; begin
71544: LD_INT 0
71546: PPUSH
// result := value ;
71547: LD_ADDR_VAR 0 2
71551: PUSH
71552: LD_VAR 0 1
71556: ST_TO_ADDR
// if value < 0 then
71557: LD_VAR 0 1
71561: PUSH
71562: LD_INT 0
71564: LESS
71565: IFFALSE 71582
// result := value * - 1 ;
71567: LD_ADDR_VAR 0 2
71571: PUSH
71572: LD_VAR 0 1
71576: PUSH
71577: LD_INT 1
71579: NEG
71580: MUL
71581: ST_TO_ADDR
// end ;
71582: LD_VAR 0 2
71586: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
71587: LD_INT 0
71589: PPUSH
71590: PPUSH
71591: PPUSH
71592: PPUSH
71593: PPUSH
71594: PPUSH
71595: PPUSH
71596: PPUSH
// if not unit or not building then
71597: LD_VAR 0 1
71601: NOT
71602: PUSH
71603: LD_VAR 0 2
71607: NOT
71608: OR
71609: IFFALSE 71613
// exit ;
71611: GO 71839
// x := GetX ( building ) ;
71613: LD_ADDR_VAR 0 4
71617: PUSH
71618: LD_VAR 0 2
71622: PPUSH
71623: CALL_OW 250
71627: ST_TO_ADDR
// y := GetY ( building ) ;
71628: LD_ADDR_VAR 0 6
71632: PUSH
71633: LD_VAR 0 2
71637: PPUSH
71638: CALL_OW 251
71642: ST_TO_ADDR
// d := GetDir ( building ) ;
71643: LD_ADDR_VAR 0 8
71647: PUSH
71648: LD_VAR 0 2
71652: PPUSH
71653: CALL_OW 254
71657: ST_TO_ADDR
// r := 4 ;
71658: LD_ADDR_VAR 0 9
71662: PUSH
71663: LD_INT 4
71665: ST_TO_ADDR
// for i := 1 to 5 do
71666: LD_ADDR_VAR 0 10
71670: PUSH
71671: DOUBLE
71672: LD_INT 1
71674: DEC
71675: ST_TO_ADDR
71676: LD_INT 5
71678: PUSH
71679: FOR_TO
71680: IFFALSE 71837
// begin _x := ShiftX ( x , d , r + i ) ;
71682: LD_ADDR_VAR 0 5
71686: PUSH
71687: LD_VAR 0 4
71691: PPUSH
71692: LD_VAR 0 8
71696: PPUSH
71697: LD_VAR 0 9
71701: PUSH
71702: LD_VAR 0 10
71706: PLUS
71707: PPUSH
71708: CALL_OW 272
71712: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
71713: LD_ADDR_VAR 0 7
71717: PUSH
71718: LD_VAR 0 6
71722: PPUSH
71723: LD_VAR 0 8
71727: PPUSH
71728: LD_VAR 0 9
71732: PUSH
71733: LD_VAR 0 10
71737: PLUS
71738: PPUSH
71739: CALL_OW 273
71743: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
71744: LD_VAR 0 5
71748: PPUSH
71749: LD_VAR 0 7
71753: PPUSH
71754: CALL_OW 488
71758: PUSH
71759: LD_VAR 0 5
71763: PPUSH
71764: LD_VAR 0 7
71768: PPUSH
71769: CALL_OW 428
71773: PPUSH
71774: CALL_OW 247
71778: PUSH
71779: LD_INT 3
71781: PUSH
71782: LD_INT 2
71784: PUSH
71785: EMPTY
71786: LIST
71787: LIST
71788: IN
71789: NOT
71790: AND
71791: IFFALSE 71835
// begin ComMoveXY ( unit , _x , _y ) ;
71793: LD_VAR 0 1
71797: PPUSH
71798: LD_VAR 0 5
71802: PPUSH
71803: LD_VAR 0 7
71807: PPUSH
71808: CALL_OW 111
// result := [ _x , _y ] ;
71812: LD_ADDR_VAR 0 3
71816: PUSH
71817: LD_VAR 0 5
71821: PUSH
71822: LD_VAR 0 7
71826: PUSH
71827: EMPTY
71828: LIST
71829: LIST
71830: ST_TO_ADDR
// exit ;
71831: POP
71832: POP
71833: GO 71839
// end ; end ;
71835: GO 71679
71837: POP
71838: POP
// end ;
71839: LD_VAR 0 3
71843: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
71844: LD_INT 0
71846: PPUSH
71847: PPUSH
71848: PPUSH
// result := 0 ;
71849: LD_ADDR_VAR 0 3
71853: PUSH
71854: LD_INT 0
71856: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
71857: LD_VAR 0 1
71861: PUSH
71862: LD_INT 0
71864: LESS
71865: PUSH
71866: LD_VAR 0 1
71870: PUSH
71871: LD_INT 8
71873: GREATER
71874: OR
71875: PUSH
71876: LD_VAR 0 2
71880: PUSH
71881: LD_INT 0
71883: LESS
71884: OR
71885: PUSH
71886: LD_VAR 0 2
71890: PUSH
71891: LD_INT 8
71893: GREATER
71894: OR
71895: IFFALSE 71899
// exit ;
71897: GO 71974
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
71899: LD_ADDR_VAR 0 4
71903: PUSH
71904: LD_INT 22
71906: PUSH
71907: LD_VAR 0 2
71911: PUSH
71912: EMPTY
71913: LIST
71914: LIST
71915: PPUSH
71916: CALL_OW 69
71920: PUSH
71921: FOR_IN
71922: IFFALSE 71972
// begin un := UnitShoot ( i ) ;
71924: LD_ADDR_VAR 0 5
71928: PUSH
71929: LD_VAR 0 4
71933: PPUSH
71934: CALL_OW 504
71938: ST_TO_ADDR
// if GetSide ( un ) = side1 then
71939: LD_VAR 0 5
71943: PPUSH
71944: CALL_OW 255
71948: PUSH
71949: LD_VAR 0 1
71953: EQUAL
71954: IFFALSE 71970
// begin result := un ;
71956: LD_ADDR_VAR 0 3
71960: PUSH
71961: LD_VAR 0 5
71965: ST_TO_ADDR
// exit ;
71966: POP
71967: POP
71968: GO 71974
// end ; end ;
71970: GO 71921
71972: POP
71973: POP
// end ;
71974: LD_VAR 0 3
71978: RET
// export function GetCargoBay ( units ) ; begin
71979: LD_INT 0
71981: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
71982: LD_ADDR_VAR 0 2
71986: PUSH
71987: LD_VAR 0 1
71991: PPUSH
71992: LD_INT 2
71994: PUSH
71995: LD_INT 34
71997: PUSH
71998: LD_INT 12
72000: PUSH
72001: EMPTY
72002: LIST
72003: LIST
72004: PUSH
72005: LD_INT 34
72007: PUSH
72008: LD_INT 51
72010: PUSH
72011: EMPTY
72012: LIST
72013: LIST
72014: PUSH
72015: LD_INT 34
72017: PUSH
72018: LD_INT 32
72020: PUSH
72021: EMPTY
72022: LIST
72023: LIST
72024: PUSH
72025: LD_INT 34
72027: PUSH
72028: LD_INT 89
72030: PUSH
72031: EMPTY
72032: LIST
72033: LIST
72034: PUSH
72035: EMPTY
72036: LIST
72037: LIST
72038: LIST
72039: LIST
72040: LIST
72041: PPUSH
72042: CALL_OW 72
72046: ST_TO_ADDR
// end ;
72047: LD_VAR 0 2
72051: RET
// export function Negate ( value ) ; begin
72052: LD_INT 0
72054: PPUSH
// result := not value ;
72055: LD_ADDR_VAR 0 2
72059: PUSH
72060: LD_VAR 0 1
72064: NOT
72065: ST_TO_ADDR
// end ;
72066: LD_VAR 0 2
72070: RET
// export function Inc ( value ) ; begin
72071: LD_INT 0
72073: PPUSH
// result := value + 1 ;
72074: LD_ADDR_VAR 0 2
72078: PUSH
72079: LD_VAR 0 1
72083: PUSH
72084: LD_INT 1
72086: PLUS
72087: ST_TO_ADDR
// end ;
72088: LD_VAR 0 2
72092: RET
// export function Dec ( value ) ; begin
72093: LD_INT 0
72095: PPUSH
// result := value - 1 ;
72096: LD_ADDR_VAR 0 2
72100: PUSH
72101: LD_VAR 0 1
72105: PUSH
72106: LD_INT 1
72108: MINUS
72109: ST_TO_ADDR
// end ;
72110: LD_VAR 0 2
72114: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
72115: LD_INT 0
72117: PPUSH
72118: PPUSH
72119: PPUSH
72120: PPUSH
72121: PPUSH
72122: PPUSH
72123: PPUSH
72124: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
72125: LD_VAR 0 1
72129: PPUSH
72130: LD_VAR 0 2
72134: PPUSH
72135: CALL_OW 488
72139: NOT
72140: PUSH
72141: LD_VAR 0 3
72145: PPUSH
72146: LD_VAR 0 4
72150: PPUSH
72151: CALL_OW 488
72155: NOT
72156: OR
72157: IFFALSE 72170
// begin result := - 1 ;
72159: LD_ADDR_VAR 0 5
72163: PUSH
72164: LD_INT 1
72166: NEG
72167: ST_TO_ADDR
// exit ;
72168: GO 72405
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
72170: LD_ADDR_VAR 0 12
72174: PUSH
72175: LD_VAR 0 1
72179: PPUSH
72180: LD_VAR 0 2
72184: PPUSH
72185: LD_VAR 0 3
72189: PPUSH
72190: LD_VAR 0 4
72194: PPUSH
72195: CALL 71255 0 4
72199: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
72200: LD_ADDR_VAR 0 11
72204: PUSH
72205: LD_VAR 0 1
72209: PPUSH
72210: LD_VAR 0 2
72214: PPUSH
72215: LD_VAR 0 12
72219: PUSH
72220: LD_INT 1
72222: ARRAY
72223: PPUSH
72224: LD_VAR 0 12
72228: PUSH
72229: LD_INT 2
72231: ARRAY
72232: PPUSH
72233: CALL_OW 298
72237: ST_TO_ADDR
// distance := 9999 ;
72238: LD_ADDR_VAR 0 10
72242: PUSH
72243: LD_INT 9999
72245: ST_TO_ADDR
// for i := 0 to 5 do
72246: LD_ADDR_VAR 0 6
72250: PUSH
72251: DOUBLE
72252: LD_INT 0
72254: DEC
72255: ST_TO_ADDR
72256: LD_INT 5
72258: PUSH
72259: FOR_TO
72260: IFFALSE 72403
// begin _x := ShiftX ( x1 , i , centerDist ) ;
72262: LD_ADDR_VAR 0 7
72266: PUSH
72267: LD_VAR 0 1
72271: PPUSH
72272: LD_VAR 0 6
72276: PPUSH
72277: LD_VAR 0 11
72281: PPUSH
72282: CALL_OW 272
72286: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
72287: LD_ADDR_VAR 0 8
72291: PUSH
72292: LD_VAR 0 2
72296: PPUSH
72297: LD_VAR 0 6
72301: PPUSH
72302: LD_VAR 0 11
72306: PPUSH
72307: CALL_OW 273
72311: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
72312: LD_VAR 0 7
72316: PPUSH
72317: LD_VAR 0 8
72321: PPUSH
72322: CALL_OW 488
72326: NOT
72327: IFFALSE 72331
// continue ;
72329: GO 72259
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
72331: LD_ADDR_VAR 0 9
72335: PUSH
72336: LD_VAR 0 12
72340: PUSH
72341: LD_INT 1
72343: ARRAY
72344: PPUSH
72345: LD_VAR 0 12
72349: PUSH
72350: LD_INT 2
72352: ARRAY
72353: PPUSH
72354: LD_VAR 0 7
72358: PPUSH
72359: LD_VAR 0 8
72363: PPUSH
72364: CALL_OW 298
72368: ST_TO_ADDR
// if tmp < distance then
72369: LD_VAR 0 9
72373: PUSH
72374: LD_VAR 0 10
72378: LESS
72379: IFFALSE 72401
// begin result := i ;
72381: LD_ADDR_VAR 0 5
72385: PUSH
72386: LD_VAR 0 6
72390: ST_TO_ADDR
// distance := tmp ;
72391: LD_ADDR_VAR 0 10
72395: PUSH
72396: LD_VAR 0 9
72400: ST_TO_ADDR
// end ; end ;
72401: GO 72259
72403: POP
72404: POP
// end ;
72405: LD_VAR 0 5
72409: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
72410: LD_INT 0
72412: PPUSH
72413: PPUSH
// if not driver or not IsInUnit ( driver ) then
72414: LD_VAR 0 1
72418: NOT
72419: PUSH
72420: LD_VAR 0 1
72424: PPUSH
72425: CALL_OW 310
72429: NOT
72430: OR
72431: IFFALSE 72435
// exit ;
72433: GO 72525
// vehicle := IsInUnit ( driver ) ;
72435: LD_ADDR_VAR 0 3
72439: PUSH
72440: LD_VAR 0 1
72444: PPUSH
72445: CALL_OW 310
72449: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
72450: LD_VAR 0 1
72454: PPUSH
72455: LD_STRING \
72457: PUSH
72458: LD_INT 0
72460: PUSH
72461: LD_INT 0
72463: PUSH
72464: LD_INT 0
72466: PUSH
72467: LD_INT 0
72469: PUSH
72470: LD_INT 0
72472: PUSH
72473: LD_INT 0
72475: PUSH
72476: EMPTY
72477: LIST
72478: LIST
72479: LIST
72480: LIST
72481: LIST
72482: LIST
72483: LIST
72484: PUSH
72485: LD_STRING E
72487: PUSH
72488: LD_INT 0
72490: PUSH
72491: LD_INT 0
72493: PUSH
72494: LD_VAR 0 3
72498: PUSH
72499: LD_INT 0
72501: PUSH
72502: LD_INT 0
72504: PUSH
72505: LD_INT 0
72507: PUSH
72508: EMPTY
72509: LIST
72510: LIST
72511: LIST
72512: LIST
72513: LIST
72514: LIST
72515: LIST
72516: PUSH
72517: EMPTY
72518: LIST
72519: LIST
72520: PPUSH
72521: CALL_OW 446
// end ;
72525: LD_VAR 0 2
72529: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
72530: LD_INT 0
72532: PPUSH
72533: PPUSH
// if not driver or not IsInUnit ( driver ) then
72534: LD_VAR 0 1
72538: NOT
72539: PUSH
72540: LD_VAR 0 1
72544: PPUSH
72545: CALL_OW 310
72549: NOT
72550: OR
72551: IFFALSE 72555
// exit ;
72553: GO 72645
// vehicle := IsInUnit ( driver ) ;
72555: LD_ADDR_VAR 0 3
72559: PUSH
72560: LD_VAR 0 1
72564: PPUSH
72565: CALL_OW 310
72569: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
72570: LD_VAR 0 1
72574: PPUSH
72575: LD_STRING \
72577: PUSH
72578: LD_INT 0
72580: PUSH
72581: LD_INT 0
72583: PUSH
72584: LD_INT 0
72586: PUSH
72587: LD_INT 0
72589: PUSH
72590: LD_INT 0
72592: PUSH
72593: LD_INT 0
72595: PUSH
72596: EMPTY
72597: LIST
72598: LIST
72599: LIST
72600: LIST
72601: LIST
72602: LIST
72603: LIST
72604: PUSH
72605: LD_STRING E
72607: PUSH
72608: LD_INT 0
72610: PUSH
72611: LD_INT 0
72613: PUSH
72614: LD_VAR 0 3
72618: PUSH
72619: LD_INT 0
72621: PUSH
72622: LD_INT 0
72624: PUSH
72625: LD_INT 0
72627: PUSH
72628: EMPTY
72629: LIST
72630: LIST
72631: LIST
72632: LIST
72633: LIST
72634: LIST
72635: LIST
72636: PUSH
72637: EMPTY
72638: LIST
72639: LIST
72640: PPUSH
72641: CALL_OW 447
// end ;
72645: LD_VAR 0 2
72649: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
72650: LD_INT 0
72652: PPUSH
72653: PPUSH
72654: PPUSH
// tmp := [ ] ;
72655: LD_ADDR_VAR 0 5
72659: PUSH
72660: EMPTY
72661: ST_TO_ADDR
// for i in units do
72662: LD_ADDR_VAR 0 4
72666: PUSH
72667: LD_VAR 0 1
72671: PUSH
72672: FOR_IN
72673: IFFALSE 72711
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
72675: LD_ADDR_VAR 0 5
72679: PUSH
72680: LD_VAR 0 5
72684: PPUSH
72685: LD_VAR 0 5
72689: PUSH
72690: LD_INT 1
72692: PLUS
72693: PPUSH
72694: LD_VAR 0 4
72698: PPUSH
72699: CALL_OW 256
72703: PPUSH
72704: CALL_OW 2
72708: ST_TO_ADDR
72709: GO 72672
72711: POP
72712: POP
// if not tmp then
72713: LD_VAR 0 5
72717: NOT
72718: IFFALSE 72722
// exit ;
72720: GO 72770
// if asc then
72722: LD_VAR 0 2
72726: IFFALSE 72750
// result := SortListByListAsc ( units , tmp ) else
72728: LD_ADDR_VAR 0 3
72732: PUSH
72733: LD_VAR 0 1
72737: PPUSH
72738: LD_VAR 0 5
72742: PPUSH
72743: CALL_OW 76
72747: ST_TO_ADDR
72748: GO 72770
// result := SortListByListDesc ( units , tmp ) ;
72750: LD_ADDR_VAR 0 3
72754: PUSH
72755: LD_VAR 0 1
72759: PPUSH
72760: LD_VAR 0 5
72764: PPUSH
72765: CALL_OW 77
72769: ST_TO_ADDR
// end ;
72770: LD_VAR 0 3
72774: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
72775: LD_INT 0
72777: PPUSH
72778: PPUSH
// task := GetTaskList ( mech ) ;
72779: LD_ADDR_VAR 0 4
72783: PUSH
72784: LD_VAR 0 1
72788: PPUSH
72789: CALL_OW 437
72793: ST_TO_ADDR
// if not task then
72794: LD_VAR 0 4
72798: NOT
72799: IFFALSE 72803
// exit ;
72801: GO 72845
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
72803: LD_ADDR_VAR 0 3
72807: PUSH
72808: LD_VAR 0 4
72812: PUSH
72813: LD_INT 1
72815: ARRAY
72816: PUSH
72817: LD_INT 1
72819: ARRAY
72820: PUSH
72821: LD_STRING r
72823: EQUAL
72824: PUSH
72825: LD_VAR 0 4
72829: PUSH
72830: LD_INT 1
72832: ARRAY
72833: PUSH
72834: LD_INT 4
72836: ARRAY
72837: PUSH
72838: LD_VAR 0 2
72842: EQUAL
72843: AND
72844: ST_TO_ADDR
// end ;
72845: LD_VAR 0 3
72849: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
72850: LD_INT 0
72852: PPUSH
// SetDir ( unit , d ) ;
72853: LD_VAR 0 1
72857: PPUSH
72858: LD_VAR 0 4
72862: PPUSH
72863: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
72867: LD_VAR 0 1
72871: PPUSH
72872: LD_VAR 0 2
72876: PPUSH
72877: LD_VAR 0 3
72881: PPUSH
72882: LD_VAR 0 5
72886: PPUSH
72887: CALL_OW 48
// end ;
72891: LD_VAR 0 6
72895: RET
// export function ToNaturalNumber ( number ) ; begin
72896: LD_INT 0
72898: PPUSH
// result := number div 1 ;
72899: LD_ADDR_VAR 0 2
72903: PUSH
72904: LD_VAR 0 1
72908: PUSH
72909: LD_INT 1
72911: DIV
72912: ST_TO_ADDR
// if number < 0 then
72913: LD_VAR 0 1
72917: PUSH
72918: LD_INT 0
72920: LESS
72921: IFFALSE 72931
// result := 0 ;
72923: LD_ADDR_VAR 0 2
72927: PUSH
72928: LD_INT 0
72930: ST_TO_ADDR
// end ;
72931: LD_VAR 0 2
72935: RET
// export function SortByClass ( units , class ) ; var un ; begin
72936: LD_INT 0
72938: PPUSH
72939: PPUSH
// if not units or not class then
72940: LD_VAR 0 1
72944: NOT
72945: PUSH
72946: LD_VAR 0 2
72950: NOT
72951: OR
72952: IFFALSE 72956
// exit ;
72954: GO 73051
// result := [ ] ;
72956: LD_ADDR_VAR 0 3
72960: PUSH
72961: EMPTY
72962: ST_TO_ADDR
// for un in units do
72963: LD_ADDR_VAR 0 4
72967: PUSH
72968: LD_VAR 0 1
72972: PUSH
72973: FOR_IN
72974: IFFALSE 73049
// if GetClass ( un ) = class then
72976: LD_VAR 0 4
72980: PPUSH
72981: CALL_OW 257
72985: PUSH
72986: LD_VAR 0 2
72990: EQUAL
72991: IFFALSE 73018
// result := Insert ( result , 1 , un ) else
72993: LD_ADDR_VAR 0 3
72997: PUSH
72998: LD_VAR 0 3
73002: PPUSH
73003: LD_INT 1
73005: PPUSH
73006: LD_VAR 0 4
73010: PPUSH
73011: CALL_OW 2
73015: ST_TO_ADDR
73016: GO 73047
// result := Replace ( result , result + 1 , un ) ;
73018: LD_ADDR_VAR 0 3
73022: PUSH
73023: LD_VAR 0 3
73027: PPUSH
73028: LD_VAR 0 3
73032: PUSH
73033: LD_INT 1
73035: PLUS
73036: PPUSH
73037: LD_VAR 0 4
73041: PPUSH
73042: CALL_OW 1
73046: ST_TO_ADDR
73047: GO 72973
73049: POP
73050: POP
// end ;
73051: LD_VAR 0 3
73055: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
73056: LD_INT 0
73058: PPUSH
73059: PPUSH
73060: PPUSH
73061: PPUSH
73062: PPUSH
73063: PPUSH
73064: PPUSH
// result := [ ] ;
73065: LD_ADDR_VAR 0 4
73069: PUSH
73070: EMPTY
73071: ST_TO_ADDR
// if x - r < 0 then
73072: LD_VAR 0 1
73076: PUSH
73077: LD_VAR 0 3
73081: MINUS
73082: PUSH
73083: LD_INT 0
73085: LESS
73086: IFFALSE 73098
// min_x := 0 else
73088: LD_ADDR_VAR 0 8
73092: PUSH
73093: LD_INT 0
73095: ST_TO_ADDR
73096: GO 73114
// min_x := x - r ;
73098: LD_ADDR_VAR 0 8
73102: PUSH
73103: LD_VAR 0 1
73107: PUSH
73108: LD_VAR 0 3
73112: MINUS
73113: ST_TO_ADDR
// if y - r < 0 then
73114: LD_VAR 0 2
73118: PUSH
73119: LD_VAR 0 3
73123: MINUS
73124: PUSH
73125: LD_INT 0
73127: LESS
73128: IFFALSE 73140
// min_y := 0 else
73130: LD_ADDR_VAR 0 7
73134: PUSH
73135: LD_INT 0
73137: ST_TO_ADDR
73138: GO 73156
// min_y := y - r ;
73140: LD_ADDR_VAR 0 7
73144: PUSH
73145: LD_VAR 0 2
73149: PUSH
73150: LD_VAR 0 3
73154: MINUS
73155: ST_TO_ADDR
// max_x := x + r ;
73156: LD_ADDR_VAR 0 9
73160: PUSH
73161: LD_VAR 0 1
73165: PUSH
73166: LD_VAR 0 3
73170: PLUS
73171: ST_TO_ADDR
// max_y := y + r ;
73172: LD_ADDR_VAR 0 10
73176: PUSH
73177: LD_VAR 0 2
73181: PUSH
73182: LD_VAR 0 3
73186: PLUS
73187: ST_TO_ADDR
// for _x = min_x to max_x do
73188: LD_ADDR_VAR 0 5
73192: PUSH
73193: DOUBLE
73194: LD_VAR 0 8
73198: DEC
73199: ST_TO_ADDR
73200: LD_VAR 0 9
73204: PUSH
73205: FOR_TO
73206: IFFALSE 73307
// for _y = min_y to max_y do
73208: LD_ADDR_VAR 0 6
73212: PUSH
73213: DOUBLE
73214: LD_VAR 0 7
73218: DEC
73219: ST_TO_ADDR
73220: LD_VAR 0 10
73224: PUSH
73225: FOR_TO
73226: IFFALSE 73303
// begin if not ValidHex ( _x , _y ) then
73228: LD_VAR 0 5
73232: PPUSH
73233: LD_VAR 0 6
73237: PPUSH
73238: CALL_OW 488
73242: NOT
73243: IFFALSE 73247
// continue ;
73245: GO 73225
// if GetResourceTypeXY ( _x , _y ) then
73247: LD_VAR 0 5
73251: PPUSH
73252: LD_VAR 0 6
73256: PPUSH
73257: CALL_OW 283
73261: IFFALSE 73301
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
73263: LD_ADDR_VAR 0 4
73267: PUSH
73268: LD_VAR 0 4
73272: PPUSH
73273: LD_VAR 0 4
73277: PUSH
73278: LD_INT 1
73280: PLUS
73281: PPUSH
73282: LD_VAR 0 5
73286: PUSH
73287: LD_VAR 0 6
73291: PUSH
73292: EMPTY
73293: LIST
73294: LIST
73295: PPUSH
73296: CALL_OW 1
73300: ST_TO_ADDR
// end ;
73301: GO 73225
73303: POP
73304: POP
73305: GO 73205
73307: POP
73308: POP
// end ;
73309: LD_VAR 0 4
73313: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
73314: LD_INT 0
73316: PPUSH
73317: PPUSH
73318: PPUSH
73319: PPUSH
73320: PPUSH
73321: PPUSH
73322: PPUSH
73323: PPUSH
// if not units then
73324: LD_VAR 0 1
73328: NOT
73329: IFFALSE 73333
// exit ;
73331: GO 73857
// result := UnitFilter ( units , [ f_ok ] ) ;
73333: LD_ADDR_VAR 0 3
73337: PUSH
73338: LD_VAR 0 1
73342: PPUSH
73343: LD_INT 50
73345: PUSH
73346: EMPTY
73347: LIST
73348: PPUSH
73349: CALL_OW 72
73353: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
73354: LD_ADDR_VAR 0 8
73358: PUSH
73359: LD_VAR 0 1
73363: PUSH
73364: LD_INT 1
73366: ARRAY
73367: PPUSH
73368: CALL_OW 255
73372: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
73373: LD_ADDR_VAR 0 10
73377: PUSH
73378: LD_INT 29
73380: PUSH
73381: LD_INT 91
73383: PUSH
73384: LD_INT 49
73386: PUSH
73387: EMPTY
73388: LIST
73389: LIST
73390: LIST
73391: ST_TO_ADDR
// if not result then
73392: LD_VAR 0 3
73396: NOT
73397: IFFALSE 73401
// exit ;
73399: GO 73857
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
73401: LD_ADDR_VAR 0 5
73405: PUSH
73406: LD_INT 81
73408: PUSH
73409: LD_VAR 0 8
73413: PUSH
73414: EMPTY
73415: LIST
73416: LIST
73417: PPUSH
73418: CALL_OW 69
73422: ST_TO_ADDR
// for i in result do
73423: LD_ADDR_VAR 0 4
73427: PUSH
73428: LD_VAR 0 3
73432: PUSH
73433: FOR_IN
73434: IFFALSE 73855
// begin tag := GetTag ( i ) + 1 ;
73436: LD_ADDR_VAR 0 9
73440: PUSH
73441: LD_VAR 0 4
73445: PPUSH
73446: CALL_OW 110
73450: PUSH
73451: LD_INT 1
73453: PLUS
73454: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
73455: LD_ADDR_VAR 0 7
73459: PUSH
73460: LD_VAR 0 4
73464: PPUSH
73465: CALL_OW 250
73469: PPUSH
73470: LD_VAR 0 4
73474: PPUSH
73475: CALL_OW 251
73479: PPUSH
73480: LD_INT 6
73482: PPUSH
73483: CALL 73056 0 3
73487: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
73488: LD_VAR 0 4
73492: PPUSH
73493: CALL_OW 247
73497: PUSH
73498: LD_INT 2
73500: EQUAL
73501: PUSH
73502: LD_VAR 0 7
73506: AND
73507: PUSH
73508: LD_VAR 0 4
73512: PPUSH
73513: CALL_OW 264
73517: PUSH
73518: LD_VAR 0 10
73522: IN
73523: NOT
73524: AND
73525: IFFALSE 73564
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
73527: LD_VAR 0 4
73531: PPUSH
73532: LD_VAR 0 7
73536: PUSH
73537: LD_INT 1
73539: ARRAY
73540: PUSH
73541: LD_INT 1
73543: ARRAY
73544: PPUSH
73545: LD_VAR 0 7
73549: PUSH
73550: LD_INT 1
73552: ARRAY
73553: PUSH
73554: LD_INT 2
73556: ARRAY
73557: PPUSH
73558: CALL_OW 116
73562: GO 73853
// if path > tag then
73564: LD_VAR 0 2
73568: PUSH
73569: LD_VAR 0 9
73573: GREATER
73574: IFFALSE 73782
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
73576: LD_ADDR_VAR 0 6
73580: PUSH
73581: LD_VAR 0 5
73585: PPUSH
73586: LD_INT 91
73588: PUSH
73589: LD_VAR 0 4
73593: PUSH
73594: LD_INT 8
73596: PUSH
73597: EMPTY
73598: LIST
73599: LIST
73600: LIST
73601: PPUSH
73602: CALL_OW 72
73606: ST_TO_ADDR
// if nearEnemy then
73607: LD_VAR 0 6
73611: IFFALSE 73680
// begin if GetWeapon ( i ) = ru_time_lapser then
73613: LD_VAR 0 4
73617: PPUSH
73618: CALL_OW 264
73622: PUSH
73623: LD_INT 49
73625: EQUAL
73626: IFFALSE 73654
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
73628: LD_VAR 0 4
73632: PPUSH
73633: LD_VAR 0 6
73637: PPUSH
73638: LD_VAR 0 4
73642: PPUSH
73643: CALL_OW 74
73647: PPUSH
73648: CALL_OW 112
73652: GO 73678
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
73654: LD_VAR 0 4
73658: PPUSH
73659: LD_VAR 0 6
73663: PPUSH
73664: LD_VAR 0 4
73668: PPUSH
73669: CALL_OW 74
73673: PPUSH
73674: CALL 74782 0 2
// end else
73678: GO 73780
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
73680: LD_VAR 0 4
73684: PPUSH
73685: LD_VAR 0 2
73689: PUSH
73690: LD_VAR 0 9
73694: ARRAY
73695: PUSH
73696: LD_INT 1
73698: ARRAY
73699: PPUSH
73700: LD_VAR 0 2
73704: PUSH
73705: LD_VAR 0 9
73709: ARRAY
73710: PUSH
73711: LD_INT 2
73713: ARRAY
73714: PPUSH
73715: CALL_OW 297
73719: PUSH
73720: LD_INT 6
73722: GREATER
73723: IFFALSE 73766
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
73725: LD_VAR 0 4
73729: PPUSH
73730: LD_VAR 0 2
73734: PUSH
73735: LD_VAR 0 9
73739: ARRAY
73740: PUSH
73741: LD_INT 1
73743: ARRAY
73744: PPUSH
73745: LD_VAR 0 2
73749: PUSH
73750: LD_VAR 0 9
73754: ARRAY
73755: PUSH
73756: LD_INT 2
73758: ARRAY
73759: PPUSH
73760: CALL_OW 114
73764: GO 73780
// SetTag ( i , tag ) ;
73766: LD_VAR 0 4
73770: PPUSH
73771: LD_VAR 0 9
73775: PPUSH
73776: CALL_OW 109
// end else
73780: GO 73853
// if enemy then
73782: LD_VAR 0 5
73786: IFFALSE 73853
// begin if GetWeapon ( i ) = ru_time_lapser then
73788: LD_VAR 0 4
73792: PPUSH
73793: CALL_OW 264
73797: PUSH
73798: LD_INT 49
73800: EQUAL
73801: IFFALSE 73829
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
73803: LD_VAR 0 4
73807: PPUSH
73808: LD_VAR 0 5
73812: PPUSH
73813: LD_VAR 0 4
73817: PPUSH
73818: CALL_OW 74
73822: PPUSH
73823: CALL_OW 112
73827: GO 73853
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
73829: LD_VAR 0 4
73833: PPUSH
73834: LD_VAR 0 5
73838: PPUSH
73839: LD_VAR 0 4
73843: PPUSH
73844: CALL_OW 74
73848: PPUSH
73849: CALL 74782 0 2
// end ; end ;
73853: GO 73433
73855: POP
73856: POP
// end ;
73857: LD_VAR 0 3
73861: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
73862: LD_INT 0
73864: PPUSH
73865: PPUSH
73866: PPUSH
// if not unit or IsInUnit ( unit ) then
73867: LD_VAR 0 1
73871: NOT
73872: PUSH
73873: LD_VAR 0 1
73877: PPUSH
73878: CALL_OW 310
73882: OR
73883: IFFALSE 73887
// exit ;
73885: GO 73978
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
73887: LD_ADDR_VAR 0 4
73891: PUSH
73892: LD_VAR 0 1
73896: PPUSH
73897: CALL_OW 250
73901: PPUSH
73902: LD_VAR 0 2
73906: PPUSH
73907: LD_INT 1
73909: PPUSH
73910: CALL_OW 272
73914: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
73915: LD_ADDR_VAR 0 5
73919: PUSH
73920: LD_VAR 0 1
73924: PPUSH
73925: CALL_OW 251
73929: PPUSH
73930: LD_VAR 0 2
73934: PPUSH
73935: LD_INT 1
73937: PPUSH
73938: CALL_OW 273
73942: ST_TO_ADDR
// if ValidHex ( x , y ) then
73943: LD_VAR 0 4
73947: PPUSH
73948: LD_VAR 0 5
73952: PPUSH
73953: CALL_OW 488
73957: IFFALSE 73978
// ComTurnXY ( unit , x , y ) ;
73959: LD_VAR 0 1
73963: PPUSH
73964: LD_VAR 0 4
73968: PPUSH
73969: LD_VAR 0 5
73973: PPUSH
73974: CALL_OW 118
// end ;
73978: LD_VAR 0 3
73982: RET
// export function SeeUnits ( side , units ) ; var i ; begin
73983: LD_INT 0
73985: PPUSH
73986: PPUSH
// result := false ;
73987: LD_ADDR_VAR 0 3
73991: PUSH
73992: LD_INT 0
73994: ST_TO_ADDR
// if not units then
73995: LD_VAR 0 2
73999: NOT
74000: IFFALSE 74004
// exit ;
74002: GO 74049
// for i in units do
74004: LD_ADDR_VAR 0 4
74008: PUSH
74009: LD_VAR 0 2
74013: PUSH
74014: FOR_IN
74015: IFFALSE 74047
// if See ( side , i ) then
74017: LD_VAR 0 1
74021: PPUSH
74022: LD_VAR 0 4
74026: PPUSH
74027: CALL_OW 292
74031: IFFALSE 74045
// begin result := true ;
74033: LD_ADDR_VAR 0 3
74037: PUSH
74038: LD_INT 1
74040: ST_TO_ADDR
// exit ;
74041: POP
74042: POP
74043: GO 74049
// end ;
74045: GO 74014
74047: POP
74048: POP
// end ;
74049: LD_VAR 0 3
74053: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
74054: LD_INT 0
74056: PPUSH
74057: PPUSH
74058: PPUSH
74059: PPUSH
// if not unit or not points then
74060: LD_VAR 0 1
74064: NOT
74065: PUSH
74066: LD_VAR 0 2
74070: NOT
74071: OR
74072: IFFALSE 74076
// exit ;
74074: GO 74166
// dist := 99999 ;
74076: LD_ADDR_VAR 0 5
74080: PUSH
74081: LD_INT 99999
74083: ST_TO_ADDR
// for i in points do
74084: LD_ADDR_VAR 0 4
74088: PUSH
74089: LD_VAR 0 2
74093: PUSH
74094: FOR_IN
74095: IFFALSE 74164
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
74097: LD_ADDR_VAR 0 6
74101: PUSH
74102: LD_VAR 0 1
74106: PPUSH
74107: LD_VAR 0 4
74111: PUSH
74112: LD_INT 1
74114: ARRAY
74115: PPUSH
74116: LD_VAR 0 4
74120: PUSH
74121: LD_INT 2
74123: ARRAY
74124: PPUSH
74125: CALL_OW 297
74129: ST_TO_ADDR
// if tmpDist < dist then
74130: LD_VAR 0 6
74134: PUSH
74135: LD_VAR 0 5
74139: LESS
74140: IFFALSE 74162
// begin result := i ;
74142: LD_ADDR_VAR 0 3
74146: PUSH
74147: LD_VAR 0 4
74151: ST_TO_ADDR
// dist := tmpDist ;
74152: LD_ADDR_VAR 0 5
74156: PUSH
74157: LD_VAR 0 6
74161: ST_TO_ADDR
// end ; end ;
74162: GO 74094
74164: POP
74165: POP
// end ;
74166: LD_VAR 0 3
74170: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
74171: LD_INT 0
74173: PPUSH
// uc_side := side ;
74174: LD_ADDR_OWVAR 20
74178: PUSH
74179: LD_VAR 0 1
74183: ST_TO_ADDR
// uc_nation := 3 ;
74184: LD_ADDR_OWVAR 21
74188: PUSH
74189: LD_INT 3
74191: ST_TO_ADDR
// vc_chassis := 25 ;
74192: LD_ADDR_OWVAR 37
74196: PUSH
74197: LD_INT 25
74199: ST_TO_ADDR
// vc_engine := engine_siberite ;
74200: LD_ADDR_OWVAR 39
74204: PUSH
74205: LD_INT 3
74207: ST_TO_ADDR
// vc_control := control_computer ;
74208: LD_ADDR_OWVAR 38
74212: PUSH
74213: LD_INT 3
74215: ST_TO_ADDR
// vc_weapon := 59 ;
74216: LD_ADDR_OWVAR 40
74220: PUSH
74221: LD_INT 59
74223: ST_TO_ADDR
// result := CreateVehicle ;
74224: LD_ADDR_VAR 0 5
74228: PUSH
74229: CALL_OW 45
74233: ST_TO_ADDR
// SetDir ( result , d ) ;
74234: LD_VAR 0 5
74238: PPUSH
74239: LD_VAR 0 4
74243: PPUSH
74244: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
74248: LD_VAR 0 5
74252: PPUSH
74253: LD_VAR 0 2
74257: PPUSH
74258: LD_VAR 0 3
74262: PPUSH
74263: LD_INT 0
74265: PPUSH
74266: CALL_OW 48
// end ;
74270: LD_VAR 0 5
74274: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
74275: LD_INT 0
74277: PPUSH
74278: PPUSH
74279: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
74280: LD_ADDR_VAR 0 2
74284: PUSH
74285: LD_INT 0
74287: PUSH
74288: LD_INT 0
74290: PUSH
74291: LD_INT 0
74293: PUSH
74294: LD_INT 0
74296: PUSH
74297: EMPTY
74298: LIST
74299: LIST
74300: LIST
74301: LIST
74302: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
74303: LD_VAR 0 1
74307: NOT
74308: PUSH
74309: LD_VAR 0 1
74313: PPUSH
74314: CALL_OW 264
74318: PUSH
74319: LD_INT 12
74321: PUSH
74322: LD_INT 51
74324: PUSH
74325: LD_INT 32
74327: PUSH
74328: LD_INT 89
74330: PUSH
74331: EMPTY
74332: LIST
74333: LIST
74334: LIST
74335: LIST
74336: IN
74337: NOT
74338: OR
74339: IFFALSE 74343
// exit ;
74341: GO 74441
// for i := 1 to 3 do
74343: LD_ADDR_VAR 0 3
74347: PUSH
74348: DOUBLE
74349: LD_INT 1
74351: DEC
74352: ST_TO_ADDR
74353: LD_INT 3
74355: PUSH
74356: FOR_TO
74357: IFFALSE 74439
// begin tmp := GetCargo ( cargo , i ) ;
74359: LD_ADDR_VAR 0 4
74363: PUSH
74364: LD_VAR 0 1
74368: PPUSH
74369: LD_VAR 0 3
74373: PPUSH
74374: CALL_OW 289
74378: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
74379: LD_ADDR_VAR 0 2
74383: PUSH
74384: LD_VAR 0 2
74388: PPUSH
74389: LD_VAR 0 3
74393: PPUSH
74394: LD_VAR 0 4
74398: PPUSH
74399: CALL_OW 1
74403: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
74404: LD_ADDR_VAR 0 2
74408: PUSH
74409: LD_VAR 0 2
74413: PPUSH
74414: LD_INT 4
74416: PPUSH
74417: LD_VAR 0 2
74421: PUSH
74422: LD_INT 4
74424: ARRAY
74425: PUSH
74426: LD_VAR 0 4
74430: PLUS
74431: PPUSH
74432: CALL_OW 1
74436: ST_TO_ADDR
// end ;
74437: GO 74356
74439: POP
74440: POP
// end ;
74441: LD_VAR 0 2
74445: RET
// export function Length ( array ) ; begin
74446: LD_INT 0
74448: PPUSH
// result := array + 0 ;
74449: LD_ADDR_VAR 0 2
74453: PUSH
74454: LD_VAR 0 1
74458: PUSH
74459: LD_INT 0
74461: PLUS
74462: ST_TO_ADDR
// end ;
74463: LD_VAR 0 2
74467: RET
// export function PrepareArray ( array ) ; begin
74468: LD_INT 0
74470: PPUSH
// result := array diff 0 ;
74471: LD_ADDR_VAR 0 2
74475: PUSH
74476: LD_VAR 0 1
74480: PUSH
74481: LD_INT 0
74483: DIFF
74484: ST_TO_ADDR
// if not result [ 1 ] then
74485: LD_VAR 0 2
74489: PUSH
74490: LD_INT 1
74492: ARRAY
74493: NOT
74494: IFFALSE 74514
// result := Delete ( result , 1 ) ;
74496: LD_ADDR_VAR 0 2
74500: PUSH
74501: LD_VAR 0 2
74505: PPUSH
74506: LD_INT 1
74508: PPUSH
74509: CALL_OW 3
74513: ST_TO_ADDR
// end ;
74514: LD_VAR 0 2
74518: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
74519: LD_INT 0
74521: PPUSH
74522: PPUSH
74523: PPUSH
74524: PPUSH
// sibRocketRange := 25 ;
74525: LD_ADDR_VAR 0 6
74529: PUSH
74530: LD_INT 25
74532: ST_TO_ADDR
// result := false ;
74533: LD_ADDR_VAR 0 4
74537: PUSH
74538: LD_INT 0
74540: ST_TO_ADDR
// for i := 0 to 5 do
74541: LD_ADDR_VAR 0 5
74545: PUSH
74546: DOUBLE
74547: LD_INT 0
74549: DEC
74550: ST_TO_ADDR
74551: LD_INT 5
74553: PUSH
74554: FOR_TO
74555: IFFALSE 74622
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
74557: LD_VAR 0 1
74561: PPUSH
74562: LD_VAR 0 5
74566: PPUSH
74567: LD_VAR 0 6
74571: PPUSH
74572: CALL_OW 272
74576: PPUSH
74577: LD_VAR 0 2
74581: PPUSH
74582: LD_VAR 0 5
74586: PPUSH
74587: LD_VAR 0 6
74591: PPUSH
74592: CALL_OW 273
74596: PPUSH
74597: LD_VAR 0 3
74601: PPUSH
74602: CALL_OW 309
74606: IFFALSE 74620
// begin result := true ;
74608: LD_ADDR_VAR 0 4
74612: PUSH
74613: LD_INT 1
74615: ST_TO_ADDR
// exit ;
74616: POP
74617: POP
74618: GO 74624
// end ;
74620: GO 74554
74622: POP
74623: POP
// end ;
74624: LD_VAR 0 4
74628: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
74629: LD_INT 0
74631: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
74632: LD_VAR 0 1
74636: PPUSH
74637: LD_VAR 0 2
74641: PPUSH
74642: LD_INT 0
74644: PPUSH
74645: LD_INT 0
74647: PPUSH
74648: LD_INT 1
74650: PPUSH
74651: LD_INT 0
74653: PPUSH
74654: CALL_OW 587
// end ;
74658: LD_VAR 0 3
74662: RET
// export function CenterOnNow ( unit ) ; begin
74663: LD_INT 0
74665: PPUSH
// result := IsInUnit ( unit ) ;
74666: LD_ADDR_VAR 0 2
74670: PUSH
74671: LD_VAR 0 1
74675: PPUSH
74676: CALL_OW 310
74680: ST_TO_ADDR
// if not result then
74681: LD_VAR 0 2
74685: NOT
74686: IFFALSE 74698
// result := unit ;
74688: LD_ADDR_VAR 0 2
74692: PUSH
74693: LD_VAR 0 1
74697: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
74698: LD_VAR 0 1
74702: PPUSH
74703: CALL_OW 87
// end ;
74707: LD_VAR 0 2
74711: RET
// export function ComMoveHex ( unit , hex ) ; begin
74712: LD_INT 0
74714: PPUSH
// if not hex then
74715: LD_VAR 0 2
74719: NOT
74720: IFFALSE 74724
// exit ;
74722: GO 74777
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
74724: LD_VAR 0 2
74728: PUSH
74729: LD_INT 1
74731: ARRAY
74732: PPUSH
74733: LD_VAR 0 2
74737: PUSH
74738: LD_INT 2
74740: ARRAY
74741: PPUSH
74742: CALL_OW 428
74746: IFFALSE 74750
// exit ;
74748: GO 74777
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
74750: LD_VAR 0 1
74754: PPUSH
74755: LD_VAR 0 2
74759: PUSH
74760: LD_INT 1
74762: ARRAY
74763: PPUSH
74764: LD_VAR 0 2
74768: PUSH
74769: LD_INT 2
74771: ARRAY
74772: PPUSH
74773: CALL_OW 111
// end ;
74777: LD_VAR 0 3
74781: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
74782: LD_INT 0
74784: PPUSH
74785: PPUSH
74786: PPUSH
// if not unit or not enemy then
74787: LD_VAR 0 1
74791: NOT
74792: PUSH
74793: LD_VAR 0 2
74797: NOT
74798: OR
74799: IFFALSE 74803
// exit ;
74801: GO 74927
// x := GetX ( enemy ) ;
74803: LD_ADDR_VAR 0 4
74807: PUSH
74808: LD_VAR 0 2
74812: PPUSH
74813: CALL_OW 250
74817: ST_TO_ADDR
// y := GetY ( enemy ) ;
74818: LD_ADDR_VAR 0 5
74822: PUSH
74823: LD_VAR 0 2
74827: PPUSH
74828: CALL_OW 251
74832: ST_TO_ADDR
// if ValidHex ( x , y ) then
74833: LD_VAR 0 4
74837: PPUSH
74838: LD_VAR 0 5
74842: PPUSH
74843: CALL_OW 488
74847: IFFALSE 74927
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
74849: LD_VAR 0 2
74853: PPUSH
74854: CALL_OW 247
74858: PUSH
74859: LD_INT 3
74861: PUSH
74862: LD_INT 2
74864: PUSH
74865: EMPTY
74866: LIST
74867: LIST
74868: IN
74869: PUSH
74870: LD_VAR 0 1
74874: PPUSH
74875: CALL_OW 255
74879: PPUSH
74880: LD_VAR 0 2
74884: PPUSH
74885: CALL_OW 292
74889: OR
74890: IFFALSE 74908
// ComAttackUnit ( unit , enemy ) else
74892: LD_VAR 0 1
74896: PPUSH
74897: LD_VAR 0 2
74901: PPUSH
74902: CALL_OW 115
74906: GO 74927
// ComAgressiveMove ( unit , x , y ) ;
74908: LD_VAR 0 1
74912: PPUSH
74913: LD_VAR 0 4
74917: PPUSH
74918: LD_VAR 0 5
74922: PPUSH
74923: CALL_OW 114
// end ;
74927: LD_VAR 0 3
74931: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
74932: LD_INT 0
74934: PPUSH
74935: PPUSH
74936: PPUSH
// list := AreaToList ( area , 0 ) ;
74937: LD_ADDR_VAR 0 5
74941: PUSH
74942: LD_VAR 0 1
74946: PPUSH
74947: LD_INT 0
74949: PPUSH
74950: CALL_OW 517
74954: ST_TO_ADDR
// if not list then
74955: LD_VAR 0 5
74959: NOT
74960: IFFALSE 74964
// exit ;
74962: GO 75094
// if all then
74964: LD_VAR 0 2
74968: IFFALSE 75056
// begin for i := 1 to list [ 1 ] do
74970: LD_ADDR_VAR 0 4
74974: PUSH
74975: DOUBLE
74976: LD_INT 1
74978: DEC
74979: ST_TO_ADDR
74980: LD_VAR 0 5
74984: PUSH
74985: LD_INT 1
74987: ARRAY
74988: PUSH
74989: FOR_TO
74990: IFFALSE 75052
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
74992: LD_ADDR_VAR 0 3
74996: PUSH
74997: LD_VAR 0 3
75001: PPUSH
75002: LD_VAR 0 3
75006: PUSH
75007: LD_INT 1
75009: PLUS
75010: PPUSH
75011: LD_VAR 0 5
75015: PUSH
75016: LD_INT 1
75018: ARRAY
75019: PUSH
75020: LD_VAR 0 4
75024: ARRAY
75025: PUSH
75026: LD_VAR 0 5
75030: PUSH
75031: LD_INT 2
75033: ARRAY
75034: PUSH
75035: LD_VAR 0 4
75039: ARRAY
75040: PUSH
75041: EMPTY
75042: LIST
75043: LIST
75044: PPUSH
75045: CALL_OW 1
75049: ST_TO_ADDR
75050: GO 74989
75052: POP
75053: POP
// exit ;
75054: GO 75094
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
75056: LD_ADDR_VAR 0 3
75060: PUSH
75061: LD_VAR 0 5
75065: PUSH
75066: LD_INT 1
75068: ARRAY
75069: PUSH
75070: LD_INT 1
75072: ARRAY
75073: PUSH
75074: LD_VAR 0 5
75078: PUSH
75079: LD_INT 2
75081: ARRAY
75082: PUSH
75083: LD_INT 1
75085: ARRAY
75086: PUSH
75087: EMPTY
75088: LIST
75089: LIST
75090: PUSH
75091: EMPTY
75092: LIST
75093: ST_TO_ADDR
// end ;
75094: LD_VAR 0 3
75098: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
75099: LD_INT 0
75101: PPUSH
75102: PPUSH
// list := AreaToList ( area , 0 ) ;
75103: LD_ADDR_VAR 0 4
75107: PUSH
75108: LD_VAR 0 1
75112: PPUSH
75113: LD_INT 0
75115: PPUSH
75116: CALL_OW 517
75120: ST_TO_ADDR
// if not list then
75121: LD_VAR 0 4
75125: NOT
75126: IFFALSE 75130
// exit ;
75128: GO 75171
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
75130: LD_ADDR_VAR 0 3
75134: PUSH
75135: LD_VAR 0 4
75139: PUSH
75140: LD_INT 1
75142: ARRAY
75143: PUSH
75144: LD_INT 1
75146: ARRAY
75147: PUSH
75148: LD_VAR 0 4
75152: PUSH
75153: LD_INT 2
75155: ARRAY
75156: PUSH
75157: LD_INT 1
75159: ARRAY
75160: PUSH
75161: LD_VAR 0 2
75165: PUSH
75166: EMPTY
75167: LIST
75168: LIST
75169: LIST
75170: ST_TO_ADDR
// end ;
75171: LD_VAR 0 3
75175: RET
// export function First ( array ) ; begin
75176: LD_INT 0
75178: PPUSH
// if not array then
75179: LD_VAR 0 1
75183: NOT
75184: IFFALSE 75188
// exit ;
75186: GO 75202
// result := array [ 1 ] ;
75188: LD_ADDR_VAR 0 2
75192: PUSH
75193: LD_VAR 0 1
75197: PUSH
75198: LD_INT 1
75200: ARRAY
75201: ST_TO_ADDR
// end ;
75202: LD_VAR 0 2
75206: RET
// export function Last ( array ) ; begin
75207: LD_INT 0
75209: PPUSH
// if not array then
75210: LD_VAR 0 1
75214: NOT
75215: IFFALSE 75219
// exit ;
75217: GO 75235
// result := array [ array ] ;
75219: LD_ADDR_VAR 0 2
75223: PUSH
75224: LD_VAR 0 1
75228: PUSH
75229: LD_VAR 0 1
75233: ARRAY
75234: ST_TO_ADDR
// end ;
75235: LD_VAR 0 2
75239: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
75240: LD_INT 0
75242: PPUSH
75243: PPUSH
// result := [ ] ;
75244: LD_ADDR_VAR 0 5
75248: PUSH
75249: EMPTY
75250: ST_TO_ADDR
// if not array then
75251: LD_VAR 0 1
75255: NOT
75256: IFFALSE 75260
// exit ;
75258: GO 75372
// for i := 1 to array do
75260: LD_ADDR_VAR 0 6
75264: PUSH
75265: DOUBLE
75266: LD_INT 1
75268: DEC
75269: ST_TO_ADDR
75270: LD_VAR 0 1
75274: PUSH
75275: FOR_TO
75276: IFFALSE 75370
// if array [ i ] [ index ] = value then
75278: LD_VAR 0 1
75282: PUSH
75283: LD_VAR 0 6
75287: ARRAY
75288: PUSH
75289: LD_VAR 0 2
75293: ARRAY
75294: PUSH
75295: LD_VAR 0 3
75299: EQUAL
75300: IFFALSE 75368
// begin if indexColumn then
75302: LD_VAR 0 4
75306: IFFALSE 75342
// result := Join ( result , array [ i ] [ indexColumn ] ) else
75308: LD_ADDR_VAR 0 5
75312: PUSH
75313: LD_VAR 0 5
75317: PPUSH
75318: LD_VAR 0 1
75322: PUSH
75323: LD_VAR 0 6
75327: ARRAY
75328: PUSH
75329: LD_VAR 0 4
75333: ARRAY
75334: PPUSH
75335: CALL 70710 0 2
75339: ST_TO_ADDR
75340: GO 75368
// result := Join ( result , array [ i ] ) ;
75342: LD_ADDR_VAR 0 5
75346: PUSH
75347: LD_VAR 0 5
75351: PPUSH
75352: LD_VAR 0 1
75356: PUSH
75357: LD_VAR 0 6
75361: ARRAY
75362: PPUSH
75363: CALL 70710 0 2
75367: ST_TO_ADDR
// end ;
75368: GO 75275
75370: POP
75371: POP
// end ;
75372: LD_VAR 0 5
75376: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
75377: LD_INT 0
75379: PPUSH
75380: PPUSH
75381: PPUSH
// if btype = b_depot then
75382: LD_VAR 0 2
75386: PUSH
75387: LD_INT 0
75389: EQUAL
75390: IFFALSE 75402
// begin result := true ;
75392: LD_ADDR_VAR 0 3
75396: PUSH
75397: LD_INT 1
75399: ST_TO_ADDR
// exit ;
75400: GO 75518
// end ; pom := GetBase ( depot ) ;
75402: LD_ADDR_VAR 0 4
75406: PUSH
75407: LD_VAR 0 1
75411: PPUSH
75412: CALL_OW 274
75416: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
75417: LD_ADDR_VAR 0 5
75421: PUSH
75422: LD_VAR 0 2
75426: PPUSH
75427: LD_VAR 0 1
75431: PPUSH
75432: CALL_OW 248
75436: PPUSH
75437: CALL_OW 450
75441: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
75442: LD_ADDR_VAR 0 3
75446: PUSH
75447: LD_VAR 0 4
75451: PPUSH
75452: LD_INT 1
75454: PPUSH
75455: CALL_OW 275
75459: PUSH
75460: LD_VAR 0 5
75464: PUSH
75465: LD_INT 1
75467: ARRAY
75468: GREATEREQUAL
75469: PUSH
75470: LD_VAR 0 4
75474: PPUSH
75475: LD_INT 2
75477: PPUSH
75478: CALL_OW 275
75482: PUSH
75483: LD_VAR 0 5
75487: PUSH
75488: LD_INT 2
75490: ARRAY
75491: GREATEREQUAL
75492: AND
75493: PUSH
75494: LD_VAR 0 4
75498: PPUSH
75499: LD_INT 3
75501: PPUSH
75502: CALL_OW 275
75506: PUSH
75507: LD_VAR 0 5
75511: PUSH
75512: LD_INT 3
75514: ARRAY
75515: GREATEREQUAL
75516: AND
75517: ST_TO_ADDR
// end ;
75518: LD_VAR 0 3
75522: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
75523: LD_INT 0
75525: PPUSH
// if not vehicles or not parkingPoint then
75526: LD_VAR 0 1
75530: NOT
75531: PUSH
75532: LD_VAR 0 2
75536: NOT
75537: OR
75538: IFFALSE 75542
// exit ;
75540: GO 75640
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
75542: LD_ADDR_VAR 0 1
75546: PUSH
75547: LD_VAR 0 1
75551: PPUSH
75552: LD_INT 50
75554: PUSH
75555: EMPTY
75556: LIST
75557: PUSH
75558: LD_INT 3
75560: PUSH
75561: LD_INT 92
75563: PUSH
75564: LD_VAR 0 2
75568: PUSH
75569: LD_INT 1
75571: ARRAY
75572: PUSH
75573: LD_VAR 0 2
75577: PUSH
75578: LD_INT 2
75580: ARRAY
75581: PUSH
75582: LD_INT 8
75584: PUSH
75585: EMPTY
75586: LIST
75587: LIST
75588: LIST
75589: LIST
75590: PUSH
75591: EMPTY
75592: LIST
75593: LIST
75594: PUSH
75595: EMPTY
75596: LIST
75597: LIST
75598: PPUSH
75599: CALL_OW 72
75603: ST_TO_ADDR
// if not vehicles then
75604: LD_VAR 0 1
75608: NOT
75609: IFFALSE 75613
// exit ;
75611: GO 75640
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
75613: LD_VAR 0 1
75617: PPUSH
75618: LD_VAR 0 2
75622: PUSH
75623: LD_INT 1
75625: ARRAY
75626: PPUSH
75627: LD_VAR 0 2
75631: PUSH
75632: LD_INT 2
75634: ARRAY
75635: PPUSH
75636: CALL_OW 111
// end ;
75640: LD_VAR 0 3
75644: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
75645: LD_INT 0
75647: PPUSH
75648: PPUSH
75649: PPUSH
// if not side or not area then
75650: LD_VAR 0 1
75654: NOT
75655: PUSH
75656: LD_VAR 0 2
75660: NOT
75661: OR
75662: IFFALSE 75666
// exit ;
75664: GO 75785
// tmp := AreaToList ( area , 0 ) ;
75666: LD_ADDR_VAR 0 5
75670: PUSH
75671: LD_VAR 0 2
75675: PPUSH
75676: LD_INT 0
75678: PPUSH
75679: CALL_OW 517
75683: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
75684: LD_ADDR_VAR 0 4
75688: PUSH
75689: DOUBLE
75690: LD_INT 1
75692: DEC
75693: ST_TO_ADDR
75694: LD_VAR 0 5
75698: PUSH
75699: LD_INT 1
75701: ARRAY
75702: PUSH
75703: FOR_TO
75704: IFFALSE 75783
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
75706: LD_VAR 0 5
75710: PUSH
75711: LD_INT 1
75713: ARRAY
75714: PUSH
75715: LD_VAR 0 4
75719: ARRAY
75720: PPUSH
75721: LD_VAR 0 5
75725: PUSH
75726: LD_INT 2
75728: ARRAY
75729: PUSH
75730: LD_VAR 0 4
75734: ARRAY
75735: PPUSH
75736: CALL_OW 351
75740: IFFALSE 75781
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
75742: LD_VAR 0 5
75746: PUSH
75747: LD_INT 1
75749: ARRAY
75750: PUSH
75751: LD_VAR 0 4
75755: ARRAY
75756: PPUSH
75757: LD_VAR 0 5
75761: PUSH
75762: LD_INT 2
75764: ARRAY
75765: PUSH
75766: LD_VAR 0 4
75770: ARRAY
75771: PPUSH
75772: LD_VAR 0 1
75776: PPUSH
75777: CALL_OW 244
// end ;
75781: GO 75703
75783: POP
75784: POP
// end ; end_of_file
75785: LD_VAR 0 3
75789: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
75790: LD_VAR 0 1
75794: PUSH
75795: LD_INT 200
75797: DOUBLE
75798: GREATEREQUAL
75799: IFFALSE 75807
75801: LD_INT 299
75803: DOUBLE
75804: LESSEQUAL
75805: IFTRUE 75809
75807: GO 75841
75809: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
75810: LD_VAR 0 1
75814: PPUSH
75815: LD_VAR 0 2
75819: PPUSH
75820: LD_VAR 0 3
75824: PPUSH
75825: LD_VAR 0 4
75829: PPUSH
75830: LD_VAR 0 5
75834: PPUSH
75835: CALL 28501 0 5
75839: GO 75918
75841: LD_INT 300
75843: DOUBLE
75844: GREATEREQUAL
75845: IFFALSE 75853
75847: LD_INT 399
75849: DOUBLE
75850: LESSEQUAL
75851: IFTRUE 75855
75853: GO 75917
75855: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
75856: LD_VAR 0 1
75860: PPUSH
75861: LD_VAR 0 2
75865: PPUSH
75866: LD_VAR 0 3
75870: PPUSH
75871: LD_VAR 0 4
75875: PPUSH
75876: LD_VAR 0 5
75880: PPUSH
75881: LD_VAR 0 6
75885: PPUSH
75886: LD_VAR 0 7
75890: PPUSH
75891: LD_VAR 0 8
75895: PPUSH
75896: LD_VAR 0 9
75900: PPUSH
75901: LD_VAR 0 10
75905: PPUSH
75906: LD_VAR 0 11
75910: PPUSH
75911: CALL 24826 0 11
75915: GO 75918
75917: POP
// end ;
75918: PPOPN 11
75920: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
75921: LD_VAR 0 1
75925: PPUSH
75926: LD_VAR 0 2
75930: PPUSH
75931: LD_VAR 0 3
75935: PPUSH
75936: LD_VAR 0 4
75940: PPUSH
75941: LD_VAR 0 5
75945: PPUSH
75946: CALL 28237 0 5
// end ; end_of_file
75950: PPOPN 5
75952: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
75953: LD_VAR 0 1
75957: PPUSH
75958: LD_VAR 0 2
75962: PPUSH
75963: LD_VAR 0 3
75967: PPUSH
75968: LD_VAR 0 4
75972: PPUSH
75973: LD_VAR 0 5
75977: PPUSH
75978: LD_VAR 0 6
75982: PPUSH
75983: CALL 12478 0 6
// end ;
75987: PPOPN 6
75989: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
75990: LD_INT 0
75992: PPUSH
// begin if not units then
75993: LD_VAR 0 1
75997: NOT
75998: IFFALSE 76002
// exit ;
76000: GO 76002
// end ;
76002: PPOPN 7
76004: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
76005: CALL 12365 0 0
// end ;
76009: PPOPN 1
76011: END
