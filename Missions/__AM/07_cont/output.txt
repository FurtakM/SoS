// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// Init ;
   8: CALL 44 0 0
// DebugMode ;
  12: CALL 253 0 0
// AnimateTrees ( true ) ;
  16: LD_INT 1
  18: PPUSH
  19: CALL_OW 573
// PrepareNature ;
  23: CALL 3063 0 0
// PrepareRussians ;
  27: CALL 4804 0 0
// PrepareAmericans ;
  31: CALL 3720 0 0
// Action ;
  35: CALL 8684 0 0
// SaveForQuickRestart ;
  39: CALL_OW 22
// end ;
  43: END
// export debug ; export mission_prev_prefix , mission_prefix ; export buildings_counter , time_to_end , can_end , must_end , kill_counter ; function Init ; begin
  44: LD_INT 0
  46: PPUSH
// debug := false ;
  47: LD_ADDR_EXP 1
  51: PUSH
  52: LD_INT 0
  54: ST_TO_ADDR
// mission_prefix := 07c_ ;
  55: LD_ADDR_EXP 3
  59: PUSH
  60: LD_STRING 07c_
  62: ST_TO_ADDR
// mission_prev_prefix := 07_ ;
  63: LD_ADDR_EXP 2
  67: PUSH
  68: LD_STRING 07_
  70: ST_TO_ADDR
// buildings_counter := 0 ;
  71: LD_ADDR_EXP 4
  75: PUSH
  76: LD_INT 0
  78: ST_TO_ADDR
// time_to_end := [ [ 32 32$00 , 29 29$00 , 26 26$00 ] [ Difficulty ] , [ 38 38$00 , 35 35$00 , 32 32$00 ] [ Difficulty ] , [ 44 44$00 , 41 41$00 , 38 38$00 ] [ Difficulty ] ] ;
  79: LD_ADDR_EXP 5
  83: PUSH
  84: LD_INT 67200
  86: PUSH
  87: LD_INT 60900
  89: PUSH
  90: LD_INT 54600
  92: PUSH
  93: EMPTY
  94: LIST
  95: LIST
  96: LIST
  97: PUSH
  98: LD_OWVAR 67
 102: ARRAY
 103: PUSH
 104: LD_INT 79800
 106: PUSH
 107: LD_INT 73500
 109: PUSH
 110: LD_INT 67200
 112: PUSH
 113: EMPTY
 114: LIST
 115: LIST
 116: LIST
 117: PUSH
 118: LD_OWVAR 67
 122: ARRAY
 123: PUSH
 124: LD_INT 92400
 126: PUSH
 127: LD_INT 86100
 129: PUSH
 130: LD_INT 79800
 132: PUSH
 133: EMPTY
 134: LIST
 135: LIST
 136: LIST
 137: PUSH
 138: LD_OWVAR 67
 142: ARRAY
 143: PUSH
 144: EMPTY
 145: LIST
 146: LIST
 147: LIST
 148: ST_TO_ADDR
// can_end := false ;
 149: LD_ADDR_EXP 6
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// must_end := false ;
 157: LD_ADDR_EXP 7
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// kill_counter := 0 ;
 165: LD_ADDR_EXP 8
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// end ;
 173: LD_VAR 0 1
 177: RET
// every 0 0$01 trigger not debug do
 178: LD_EXP 1
 182: NOT
 183: IFFALSE 252
 185: GO 187
 187: DISABLE
// begin enable ;
 188: ENABLE
// if not must_end then
 189: LD_EXP 7
 193: NOT
 194: IFFALSE 215
// display_strings := [ #Am07-1 , tick ] else
 196: LD_ADDR_OWVAR 47
 200: PUSH
 201: LD_STRING #Am07-1
 203: PUSH
 204: LD_OWVAR 1
 208: PUSH
 209: EMPTY
 210: LIST
 211: LIST
 212: ST_TO_ADDR
 213: GO 252
// display_strings := [ #Am07-1 , tick , #Am07-2 , time_to_end [ 3 ] - tick ] ;
 215: LD_ADDR_OWVAR 47
 219: PUSH
 220: LD_STRING #Am07-1
 222: PUSH
 223: LD_OWVAR 1
 227: PUSH
 228: LD_STRING #Am07-2
 230: PUSH
 231: LD_EXP 5
 235: PUSH
 236: LD_INT 3
 238: ARRAY
 239: PUSH
 240: LD_OWVAR 1
 244: MINUS
 245: PUSH
 246: EMPTY
 247: LIST
 248: LIST
 249: LIST
 250: LIST
 251: ST_TO_ADDR
// end ;
 252: END
// function DebugMode ; var i ; begin
 253: LD_INT 0
 255: PPUSH
 256: PPUSH
// if not debug then
 257: LD_EXP 1
 261: NOT
 262: IFFALSE 266
// exit ;
 264: GO 273
// FogOff ( 1 ) ;
 266: LD_INT 1
 268: PPUSH
 269: CALL_OW 344
// end ;
 273: LD_VAR 0 1
 277: RET
// every 3 trigger debug do var i , filter ;
 278: LD_EXP 1
 282: IFFALSE 371
 284: GO 286
 286: DISABLE
 287: LD_INT 0
 289: PPUSH
 290: PPUSH
// begin enable ;
 291: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 500 ] ] ] ) ;
 292: LD_ADDR_VAR 0 2
 296: PUSH
 297: LD_INT 22
 299: PUSH
 300: LD_INT 1
 302: PUSH
 303: EMPTY
 304: LIST
 305: LIST
 306: PUSH
 307: LD_INT 3
 309: PUSH
 310: LD_INT 24
 312: PUSH
 313: LD_INT 500
 315: PUSH
 316: EMPTY
 317: LIST
 318: LIST
 319: PUSH
 320: EMPTY
 321: LIST
 322: LIST
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: PPUSH
 328: CALL_OW 69
 332: ST_TO_ADDR
// if not filter then
 333: LD_VAR 0 2
 337: NOT
 338: IFFALSE 342
// exit ;
 340: GO 371
// for i in filter do
 342: LD_ADDR_VAR 0 1
 346: PUSH
 347: LD_VAR 0 2
 351: PUSH
 352: FOR_IN
 353: IFFALSE 369
// SetLives ( i , 1000 ) ;
 355: LD_VAR 0 1
 359: PPUSH
 360: LD_INT 1000
 362: PPUSH
 363: CALL_OW 234
 367: GO 352
 369: POP
 370: POP
// end ;
 371: PPOPN 2
 373: END
// every 0 0$1 trigger kill_counter >= 20 do
 374: LD_EXP 8
 378: PUSH
 379: LD_INT 20
 381: GREATEREQUAL
 382: IFFALSE 394
 384: GO 386
 386: DISABLE
// SetAchievement ( ACH_HITMAN ) ;
 387: LD_STRING ACH_HITMAN
 389: PPUSH
 390: CALL_OW 543
 394: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] ] ) >= 3 do
 395: LD_INT 22
 397: PUSH
 398: LD_INT 1
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: PUSH
 405: LD_INT 23
 407: PUSH
 408: LD_INT 3
 410: PUSH
 411: EMPTY
 412: LIST
 413: LIST
 414: PUSH
 415: LD_INT 21
 417: PUSH
 418: LD_INT 2
 420: PUSH
 421: EMPTY
 422: LIST
 423: LIST
 424: PUSH
 425: EMPTY
 426: LIST
 427: LIST
 428: LIST
 429: PPUSH
 430: CALL_OW 69
 434: PUSH
 435: LD_INT 3
 437: GREATEREQUAL
 438: IFFALSE 450
 440: GO 442
 442: DISABLE
// SetAchievement ( ACH_TANKACE ) ;
 443: LD_STRING ACH_TANKACE
 445: PPUSH
 446: CALL_OW 543
 450: END
// every 0 0$1 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) = 0 do
 451: LD_INT 2
 453: PUSH
 454: LD_INT 30
 456: PUSH
 457: LD_INT 0
 459: PUSH
 460: EMPTY
 461: LIST
 462: LIST
 463: PUSH
 464: LD_INT 30
 466: PUSH
 467: LD_INT 1
 469: PUSH
 470: EMPTY
 471: LIST
 472: LIST
 473: PUSH
 474: EMPTY
 475: LIST
 476: LIST
 477: LIST
 478: PPUSH
 479: CALL_OW 69
 483: PUSH
 484: LD_INT 0
 486: EQUAL
 487: IFFALSE 499
 489: GO 491
 491: DISABLE
// SetAchievement ( ACH_COMMANDO ) ; end_of_file
 492: LD_STRING ACH_COMMANDO
 494: PPUSH
 495: CALL_OW 543
 499: END
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
 500: LD_INT 0
 502: PPUSH
 503: PPUSH
// if exist_mode then
 504: LD_VAR 0 2
 508: IFFALSE 533
// unit := CreateCharacter ( mission_prev_prefix & ident ) else
 510: LD_ADDR_VAR 0 4
 514: PUSH
 515: LD_EXP 2
 519: PUSH
 520: LD_VAR 0 1
 524: STR
 525: PPUSH
 526: CALL_OW 34
 530: ST_TO_ADDR
 531: GO 548
// unit := NewCharacter ( ident ) ;
 533: LD_ADDR_VAR 0 4
 537: PUSH
 538: LD_VAR 0 1
 542: PPUSH
 543: CALL_OW 25
 547: ST_TO_ADDR
// result := unit ;
 548: LD_ADDR_VAR 0 3
 552: PUSH
 553: LD_VAR 0 4
 557: ST_TO_ADDR
// end ;
 558: LD_VAR 0 3
 562: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 563: LD_INT 0
 565: PPUSH
// uc_side := side ;
 566: LD_ADDR_OWVAR 20
 570: PUSH
 571: LD_VAR 0 1
 575: ST_TO_ADDR
// uc_nation := nation ;
 576: LD_ADDR_OWVAR 21
 580: PUSH
 581: LD_VAR 0 2
 585: ST_TO_ADDR
// vc_chassis := chassis ;
 586: LD_ADDR_OWVAR 37
 590: PUSH
 591: LD_VAR 0 3
 595: ST_TO_ADDR
// vc_engine := engine ;
 596: LD_ADDR_OWVAR 39
 600: PUSH
 601: LD_VAR 0 4
 605: ST_TO_ADDR
// vc_control := control ;
 606: LD_ADDR_OWVAR 38
 610: PUSH
 611: LD_VAR 0 5
 615: ST_TO_ADDR
// vc_weapon := weapon ;
 616: LD_ADDR_OWVAR 40
 620: PUSH
 621: LD_VAR 0 6
 625: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 626: LD_ADDR_OWVAR 41
 630: PUSH
 631: LD_VAR 0 7
 635: ST_TO_ADDR
// result := CreateVehicle ;
 636: LD_ADDR_VAR 0 8
 640: PUSH
 641: CALL_OW 45
 645: ST_TO_ADDR
// end ;
 646: LD_VAR 0 8
 650: RET
// export function GetRandom ( sex ) ; var i , filter ; begin
 651: LD_INT 0
 653: PPUSH
 654: PPUSH
 655: PPUSH
// filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam ] ;
 656: LD_ADDR_VAR 0 4
 660: PUSH
 661: LD_INT 22
 663: PUSH
 664: LD_INT 1
 666: PUSH
 667: EMPTY
 668: LIST
 669: LIST
 670: PUSH
 671: LD_INT 21
 673: PUSH
 674: LD_INT 1
 676: PUSH
 677: EMPTY
 678: LIST
 679: LIST
 680: PUSH
 681: LD_INT 50
 683: PUSH
 684: EMPTY
 685: LIST
 686: PUSH
 687: EMPTY
 688: LIST
 689: LIST
 690: LIST
 691: PPUSH
 692: CALL_OW 69
 696: PUSH
 697: LD_EXP 9
 701: PUSH
 702: LD_EXP 10
 706: PUSH
 707: LD_EXP 11
 711: PUSH
 712: LD_EXP 12
 716: PUSH
 717: LD_EXP 13
 721: PUSH
 722: LD_EXP 14
 726: PUSH
 727: LD_EXP 15
 731: PUSH
 732: LD_EXP 16
 736: PUSH
 737: LD_EXP 18
 741: PUSH
 742: LD_EXP 17
 746: PUSH
 747: EMPTY
 748: LIST
 749: LIST
 750: LIST
 751: LIST
 752: LIST
 753: LIST
 754: LIST
 755: LIST
 756: LIST
 757: LIST
 758: DIFF
 759: ST_TO_ADDR
// if not filter then
 760: LD_VAR 0 4
 764: NOT
 765: IFFALSE 769
// exit ;
 767: GO 796
// result := UnitFilter ( filter , [ f_sex , sex ] ) ;
 769: LD_ADDR_VAR 0 2
 773: PUSH
 774: LD_VAR 0 4
 778: PPUSH
 779: LD_INT 26
 781: PUSH
 782: LD_VAR 0 1
 786: PUSH
 787: EMPTY
 788: LIST
 789: LIST
 790: PPUSH
 791: CALL_OW 72
 795: ST_TO_ADDR
// end ;
 796: LD_VAR 0 2
 800: RET
// export function SayX ( units , ident ) ; var i ; begin
 801: LD_INT 0
 803: PPUSH
 804: PPUSH
// result := false ;
 805: LD_ADDR_VAR 0 3
 809: PUSH
 810: LD_INT 0
 812: ST_TO_ADDR
// if not units then
 813: LD_VAR 0 1
 817: NOT
 818: IFFALSE 822
// exit ;
 820: GO 876
// for i in units do
 822: LD_ADDR_VAR 0 4
 826: PUSH
 827: LD_VAR 0 1
 831: PUSH
 832: FOR_IN
 833: IFFALSE 874
// if IsOk ( i ) then
 835: LD_VAR 0 4
 839: PPUSH
 840: CALL_OW 302
 844: IFFALSE 872
// begin Say ( i , ident ) ;
 846: LD_VAR 0 4
 850: PPUSH
 851: LD_VAR 0 2
 855: PPUSH
 856: CALL_OW 88
// result := i ;
 860: LD_ADDR_VAR 0 3
 864: PUSH
 865: LD_VAR 0 4
 869: ST_TO_ADDR
// break ;
 870: GO 874
// end ;
 872: GO 832
 874: POP
 875: POP
// end ;
 876: LD_VAR 0 3
 880: RET
// export function GetBaseBuildings ( base ) ; var tmp , i ; begin
 881: LD_INT 0
 883: PPUSH
 884: PPUSH
 885: PPUSH
// result := [ ] ;
 886: LD_ADDR_VAR 0 2
 890: PUSH
 891: EMPTY
 892: ST_TO_ADDR
// tmp := FilterAllUnits ( [ f_type , unit_building ] ) ;
 893: LD_ADDR_VAR 0 3
 897: PUSH
 898: LD_INT 21
 900: PUSH
 901: LD_INT 3
 903: PUSH
 904: EMPTY
 905: LIST
 906: LIST
 907: PPUSH
 908: CALL_OW 69
 912: ST_TO_ADDR
// if not tmp then
 913: LD_VAR 0 3
 917: NOT
 918: IFFALSE 922
// exit ;
 920: GO 972
// for i in tmp do
 922: LD_ADDR_VAR 0 4
 926: PUSH
 927: LD_VAR 0 3
 931: PUSH
 932: FOR_IN
 933: IFFALSE 970
// if GetBase ( i ) = base then
 935: LD_VAR 0 4
 939: PPUSH
 940: CALL_OW 274
 944: PUSH
 945: LD_VAR 0 1
 949: EQUAL
 950: IFFALSE 968
// result := result ^ i ;
 952: LD_ADDR_VAR 0 2
 956: PUSH
 957: LD_VAR 0 2
 961: PUSH
 962: LD_VAR 0 4
 966: ADD
 967: ST_TO_ADDR
 968: GO 932
 970: POP
 971: POP
// end ;
 972: LD_VAR 0 2
 976: RET
// export function GetTurretWeapon ( tower ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
 977: LD_INT 0
 979: PPUSH
 980: PPUSH
 981: PPUSH
 982: PPUSH
 983: PPUSH
 984: PPUSH
 985: PPUSH
 986: PPUSH
 987: PPUSH
 988: PPUSH
 989: PPUSH
 990: PPUSH
 991: PPUSH
 992: PPUSH
 993: PPUSH
 994: PPUSH
// result := false ;
 995: LD_ADDR_VAR 0 2
 999: PUSH
1000: LD_INT 0
1002: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
1003: LD_VAR 0 1
1007: NOT
1008: PUSH
1009: LD_VAR 0 1
1013: PPUSH
1014: CALL_OW 266
1018: PUSH
1019: LD_INT 32
1021: PUSH
1022: LD_INT 33
1024: PUSH
1025: EMPTY
1026: LIST
1027: LIST
1028: IN
1029: NOT
1030: OR
1031: IFFALSE 1035
// exit ;
1033: GO 2195
// nat := GetNation ( tower ) ;
1035: LD_ADDR_VAR 0 11
1039: PUSH
1040: LD_VAR 0 1
1044: PPUSH
1045: CALL_OW 248
1049: ST_TO_ADDR
// side := GetSide ( tower ) ;
1050: LD_ADDR_VAR 0 15
1054: PUSH
1055: LD_VAR 0 1
1059: PPUSH
1060: CALL_OW 255
1064: ST_TO_ADDR
// x := GetX ( tower ) ;
1065: LD_ADDR_VAR 0 9
1069: PUSH
1070: LD_VAR 0 1
1074: PPUSH
1075: CALL_OW 250
1079: ST_TO_ADDR
// y := GetY ( tower ) ;
1080: LD_ADDR_VAR 0 10
1084: PUSH
1085: LD_VAR 0 1
1089: PPUSH
1090: CALL_OW 251
1094: ST_TO_ADDR
// if not x or not y then
1095: LD_VAR 0 9
1099: NOT
1100: PUSH
1101: LD_VAR 0 10
1105: NOT
1106: OR
1107: IFFALSE 1111
// exit ;
1109: GO 2195
// weapon := 0 ;
1111: LD_ADDR_VAR 0 17
1115: PUSH
1116: LD_INT 0
1118: ST_TO_ADDR
// fac_list := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun ] ;
1119: LD_ADDR_VAR 0 16
1123: PUSH
1124: LD_INT 42
1126: PUSH
1127: LD_INT 43
1129: PUSH
1130: LD_INT 44
1132: PUSH
1133: LD_INT 46
1135: PUSH
1136: EMPTY
1137: LIST
1138: LIST
1139: LIST
1140: LIST
1141: ST_TO_ADDR
// if not fac_list then
1142: LD_VAR 0 16
1146: NOT
1147: IFFALSE 1151
// exit ;
1149: GO 2195
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
1151: LD_ADDR_VAR 0 4
1155: PUSH
1156: LD_INT 4
1158: PUSH
1159: LD_INT 5
1161: PUSH
1162: LD_INT 9
1164: PUSH
1165: LD_INT 10
1167: PUSH
1168: LD_INT 6
1170: PUSH
1171: LD_INT 7
1173: PUSH
1174: LD_INT 11
1176: PUSH
1177: EMPTY
1178: LIST
1179: LIST
1180: LIST
1181: LIST
1182: LIST
1183: LIST
1184: LIST
1185: PUSH
1186: LD_INT 27
1188: PUSH
1189: LD_INT 28
1191: PUSH
1192: LD_INT 26
1194: PUSH
1195: LD_INT 30
1197: PUSH
1198: EMPTY
1199: LIST
1200: LIST
1201: LIST
1202: LIST
1203: PUSH
1204: LD_INT 43
1206: PUSH
1207: LD_INT 44
1209: PUSH
1210: LD_INT 46
1212: PUSH
1213: LD_INT 45
1215: PUSH
1216: LD_INT 47
1218: PUSH
1219: LD_INT 49
1221: PUSH
1222: EMPTY
1223: LIST
1224: LIST
1225: LIST
1226: LIST
1227: LIST
1228: LIST
1229: PUSH
1230: EMPTY
1231: LIST
1232: LIST
1233: LIST
1234: PUSH
1235: LD_VAR 0 11
1239: ARRAY
1240: ST_TO_ADDR
// for i in list do
1241: LD_ADDR_VAR 0 7
1245: PUSH
1246: LD_VAR 0 4
1250: PUSH
1251: FOR_IN
1252: IFFALSE 1285
// if not i in fac_list then
1254: LD_VAR 0 7
1258: PUSH
1259: LD_VAR 0 16
1263: IN
1264: NOT
1265: IFFALSE 1283
// list := list diff i ;
1267: LD_ADDR_VAR 0 4
1271: PUSH
1272: LD_VAR 0 4
1276: PUSH
1277: LD_VAR 0 7
1281: DIFF
1282: ST_TO_ADDR
1283: GO 1251
1285: POP
1286: POP
// if not list then
1287: LD_VAR 0 4
1291: NOT
1292: IFFALSE 1296
// exit ;
1294: GO 2195
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
1296: LD_VAR 0 11
1300: PUSH
1301: LD_INT 3
1303: EQUAL
1304: PUSH
1305: LD_INT 49
1307: PUSH
1308: LD_VAR 0 4
1312: IN
1313: AND
1314: PUSH
1315: LD_INT 31
1317: PPUSH
1318: LD_VAR 0 15
1322: PPUSH
1323: CALL_OW 321
1327: PUSH
1328: LD_INT 2
1330: EQUAL
1331: AND
1332: IFFALSE 1392
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
1334: LD_INT 22
1336: PUSH
1337: LD_VAR 0 15
1341: PUSH
1342: EMPTY
1343: LIST
1344: LIST
1345: PUSH
1346: LD_INT 35
1348: PUSH
1349: LD_INT 49
1351: PUSH
1352: EMPTY
1353: LIST
1354: LIST
1355: PUSH
1356: LD_INT 91
1358: PUSH
1359: LD_VAR 0 1
1363: PUSH
1364: LD_INT 10
1366: PUSH
1367: EMPTY
1368: LIST
1369: LIST
1370: LIST
1371: PUSH
1372: EMPTY
1373: LIST
1374: LIST
1375: LIST
1376: PPUSH
1377: CALL_OW 69
1381: NOT
1382: IFFALSE 1392
// weapon := ru_time_lapser ;
1384: LD_ADDR_VAR 0 17
1388: PUSH
1389: LD_INT 49
1391: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
1392: LD_VAR 0 11
1396: PUSH
1397: LD_INT 1
1399: PUSH
1400: LD_INT 2
1402: PUSH
1403: EMPTY
1404: LIST
1405: LIST
1406: IN
1407: PUSH
1408: LD_INT 11
1410: PUSH
1411: LD_VAR 0 4
1415: IN
1416: PUSH
1417: LD_INT 30
1419: PUSH
1420: LD_VAR 0 4
1424: IN
1425: OR
1426: AND
1427: PUSH
1428: LD_INT 6
1430: PPUSH
1431: LD_VAR 0 15
1435: PPUSH
1436: CALL_OW 321
1440: PUSH
1441: LD_INT 2
1443: EQUAL
1444: AND
1445: IFFALSE 1610
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
1447: LD_INT 22
1449: PUSH
1450: LD_VAR 0 15
1454: PUSH
1455: EMPTY
1456: LIST
1457: LIST
1458: PUSH
1459: LD_INT 2
1461: PUSH
1462: LD_INT 35
1464: PUSH
1465: LD_INT 11
1467: PUSH
1468: EMPTY
1469: LIST
1470: LIST
1471: PUSH
1472: LD_INT 35
1474: PUSH
1475: LD_INT 30
1477: PUSH
1478: EMPTY
1479: LIST
1480: LIST
1481: PUSH
1482: EMPTY
1483: LIST
1484: LIST
1485: LIST
1486: PUSH
1487: LD_INT 91
1489: PUSH
1490: LD_VAR 0 1
1494: PUSH
1495: LD_INT 18
1497: PUSH
1498: EMPTY
1499: LIST
1500: LIST
1501: LIST
1502: PUSH
1503: EMPTY
1504: LIST
1505: LIST
1506: LIST
1507: PPUSH
1508: CALL_OW 69
1512: NOT
1513: PUSH
1514: LD_INT 22
1516: PUSH
1517: LD_VAR 0 15
1521: PUSH
1522: EMPTY
1523: LIST
1524: LIST
1525: PUSH
1526: LD_INT 2
1528: PUSH
1529: LD_INT 30
1531: PUSH
1532: LD_INT 32
1534: PUSH
1535: EMPTY
1536: LIST
1537: LIST
1538: PUSH
1539: LD_INT 30
1541: PUSH
1542: LD_INT 33
1544: PUSH
1545: EMPTY
1546: LIST
1547: LIST
1548: PUSH
1549: EMPTY
1550: LIST
1551: LIST
1552: LIST
1553: PUSH
1554: LD_INT 91
1556: PUSH
1557: LD_VAR 0 1
1561: PUSH
1562: LD_INT 12
1564: PUSH
1565: EMPTY
1566: LIST
1567: LIST
1568: LIST
1569: PUSH
1570: EMPTY
1571: LIST
1572: LIST
1573: LIST
1574: PUSH
1575: EMPTY
1576: LIST
1577: PPUSH
1578: CALL_OW 69
1582: PUSH
1583: LD_INT 2
1585: GREATER
1586: AND
1587: IFFALSE 1610
// weapon := [ us_radar , ar_radar ] [ nat ] ;
1589: LD_ADDR_VAR 0 17
1593: PUSH
1594: LD_INT 11
1596: PUSH
1597: LD_INT 30
1599: PUSH
1600: EMPTY
1601: LIST
1602: LIST
1603: PUSH
1604: LD_VAR 0 11
1608: ARRAY
1609: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
1610: LD_VAR 0 17
1614: NOT
1615: PUSH
1616: LD_INT 40
1618: PPUSH
1619: LD_VAR 0 15
1623: PPUSH
1624: CALL_OW 321
1628: PUSH
1629: LD_INT 2
1631: EQUAL
1632: AND
1633: PUSH
1634: LD_INT 7
1636: PUSH
1637: LD_VAR 0 4
1641: IN
1642: PUSH
1643: LD_INT 28
1645: PUSH
1646: LD_VAR 0 4
1650: IN
1651: OR
1652: PUSH
1653: LD_INT 45
1655: PUSH
1656: LD_VAR 0 4
1660: IN
1661: OR
1662: AND
1663: IFFALSE 1917
// begin hex := GetHexInfo ( x , y ) ;
1665: LD_ADDR_VAR 0 3
1669: PUSH
1670: LD_VAR 0 9
1674: PPUSH
1675: LD_VAR 0 10
1679: PPUSH
1680: CALL_OW 546
1684: ST_TO_ADDR
// if hex [ 1 ] then
1685: LD_VAR 0 3
1689: PUSH
1690: LD_INT 1
1692: ARRAY
1693: IFFALSE 1697
// exit ;
1695: GO 2195
// height := hex [ 2 ] ;
1697: LD_ADDR_VAR 0 14
1701: PUSH
1702: LD_VAR 0 3
1706: PUSH
1707: LD_INT 2
1709: ARRAY
1710: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
1711: LD_ADDR_VAR 0 13
1715: PUSH
1716: LD_INT 0
1718: PUSH
1719: LD_INT 2
1721: PUSH
1722: LD_INT 3
1724: PUSH
1725: LD_INT 5
1727: PUSH
1728: EMPTY
1729: LIST
1730: LIST
1731: LIST
1732: LIST
1733: ST_TO_ADDR
// for i in tmp do
1734: LD_ADDR_VAR 0 7
1738: PUSH
1739: LD_VAR 0 13
1743: PUSH
1744: FOR_IN
1745: IFFALSE 1915
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
1747: LD_ADDR_VAR 0 8
1751: PUSH
1752: LD_VAR 0 9
1756: PPUSH
1757: LD_VAR 0 7
1761: PPUSH
1762: LD_INT 5
1764: PPUSH
1765: CALL_OW 272
1769: PUSH
1770: LD_VAR 0 10
1774: PPUSH
1775: LD_VAR 0 7
1779: PPUSH
1780: LD_INT 5
1782: PPUSH
1783: CALL_OW 273
1787: PUSH
1788: EMPTY
1789: LIST
1790: LIST
1791: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
1792: LD_VAR 0 8
1796: PUSH
1797: LD_INT 1
1799: ARRAY
1800: PPUSH
1801: LD_VAR 0 8
1805: PUSH
1806: LD_INT 2
1808: ARRAY
1809: PPUSH
1810: CALL_OW 488
1814: IFFALSE 1913
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
1816: LD_ADDR_VAR 0 3
1820: PUSH
1821: LD_VAR 0 8
1825: PUSH
1826: LD_INT 1
1828: ARRAY
1829: PPUSH
1830: LD_VAR 0 8
1834: PUSH
1835: LD_INT 2
1837: ARRAY
1838: PPUSH
1839: CALL_OW 546
1843: ST_TO_ADDR
// if hex [ 1 ] then
1844: LD_VAR 0 3
1848: PUSH
1849: LD_INT 1
1851: ARRAY
1852: IFFALSE 1856
// continue ;
1854: GO 1744
// h := hex [ 2 ] ;
1856: LD_ADDR_VAR 0 12
1860: PUSH
1861: LD_VAR 0 3
1865: PUSH
1866: LD_INT 2
1868: ARRAY
1869: ST_TO_ADDR
// if h + 7 < height then
1870: LD_VAR 0 12
1874: PUSH
1875: LD_INT 7
1877: PLUS
1878: PUSH
1879: LD_VAR 0 14
1883: LESS
1884: IFFALSE 1913
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
1886: LD_ADDR_VAR 0 17
1890: PUSH
1891: LD_INT 7
1893: PUSH
1894: LD_INT 28
1896: PUSH
1897: LD_INT 45
1899: PUSH
1900: EMPTY
1901: LIST
1902: LIST
1903: LIST
1904: PUSH
1905: LD_VAR 0 11
1909: ARRAY
1910: ST_TO_ADDR
// break ;
1911: GO 1915
// end ; end ; end ;
1913: GO 1744
1915: POP
1916: POP
// end ; if not weapon then
1917: LD_VAR 0 17
1921: NOT
1922: IFFALSE 2077
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
1924: LD_ADDR_VAR 0 4
1928: PUSH
1929: LD_VAR 0 4
1933: PUSH
1934: LD_INT 11
1936: PUSH
1937: LD_INT 30
1939: PUSH
1940: LD_INT 49
1942: PUSH
1943: EMPTY
1944: LIST
1945: LIST
1946: LIST
1947: DIFF
1948: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , tower , 6 ] , [ f_not , [ f_bweapon , 0 ] ] ] ) ;
1949: LD_ADDR_VAR 0 13
1953: PUSH
1954: LD_INT 22
1956: PUSH
1957: LD_VAR 0 15
1961: PUSH
1962: EMPTY
1963: LIST
1964: LIST
1965: PUSH
1966: LD_INT 91
1968: PUSH
1969: LD_VAR 0 1
1973: PUSH
1974: LD_INT 6
1976: PUSH
1977: EMPTY
1978: LIST
1979: LIST
1980: LIST
1981: PUSH
1982: LD_INT 3
1984: PUSH
1985: LD_INT 35
1987: PUSH
1988: LD_INT 0
1990: PUSH
1991: EMPTY
1992: LIST
1993: LIST
1994: PUSH
1995: EMPTY
1996: LIST
1997: LIST
1998: PUSH
1999: EMPTY
2000: LIST
2001: LIST
2002: LIST
2003: PPUSH
2004: CALL_OW 69
2008: ST_TO_ADDR
// for i in tmp do
2009: LD_ADDR_VAR 0 7
2013: PUSH
2014: LD_VAR 0 13
2018: PUSH
2019: FOR_IN
2020: IFFALSE 2045
// list := list diff GetBWeapon ( i ) ;
2022: LD_ADDR_VAR 0 4
2026: PUSH
2027: LD_VAR 0 4
2031: PUSH
2032: LD_VAR 0 7
2036: PPUSH
2037: CALL_OW 269
2041: DIFF
2042: ST_TO_ADDR
2043: GO 2019
2045: POP
2046: POP
// if list then
2047: LD_VAR 0 4
2051: IFFALSE 2077
// weapon := list [ rand ( 1 , list ) ] ;
2053: LD_ADDR_VAR 0 17
2057: PUSH
2058: LD_VAR 0 4
2062: PUSH
2063: LD_INT 1
2065: PPUSH
2066: LD_VAR 0 4
2070: PPUSH
2071: CALL_OW 12
2075: ARRAY
2076: ST_TO_ADDR
// end ; if weapon then
2077: LD_VAR 0 17
2081: IFFALSE 2195
// begin tmp := CostOfWeapon ( weapon ) ;
2083: LD_ADDR_VAR 0 13
2087: PUSH
2088: LD_VAR 0 17
2092: PPUSH
2093: CALL_OW 451
2097: ST_TO_ADDR
// j := GetBase ( tower ) ;
2098: LD_ADDR_VAR 0 8
2102: PUSH
2103: LD_VAR 0 1
2107: PPUSH
2108: CALL_OW 274
2112: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
2113: LD_VAR 0 8
2117: PPUSH
2118: LD_INT 1
2120: PPUSH
2121: CALL_OW 275
2125: PUSH
2126: LD_VAR 0 13
2130: PUSH
2131: LD_INT 1
2133: ARRAY
2134: GREATEREQUAL
2135: PUSH
2136: LD_VAR 0 8
2140: PPUSH
2141: LD_INT 2
2143: PPUSH
2144: CALL_OW 275
2148: PUSH
2149: LD_VAR 0 13
2153: PUSH
2154: LD_INT 2
2156: ARRAY
2157: GREATEREQUAL
2158: AND
2159: PUSH
2160: LD_VAR 0 8
2164: PPUSH
2165: LD_INT 3
2167: PPUSH
2168: CALL_OW 275
2172: PUSH
2173: LD_VAR 0 13
2177: PUSH
2178: LD_INT 3
2180: ARRAY
2181: GREATEREQUAL
2182: AND
2183: IFFALSE 2195
// result := weapon ;
2185: LD_ADDR_VAR 0 2
2189: PUSH
2190: LD_VAR 0 17
2194: ST_TO_ADDR
// end ; end ;
2195: LD_VAR 0 2
2199: RET
// export function GoToAnotherTower ( un , b , x , y ) ; var i , filter , t , side ; begin
2200: LD_INT 0
2202: PPUSH
2203: PPUSH
2204: PPUSH
2205: PPUSH
2206: PPUSH
// if not un or not IsOk ( un ) then
2207: LD_VAR 0 1
2211: NOT
2212: PUSH
2213: LD_VAR 0 1
2217: PPUSH
2218: CALL_OW 302
2222: NOT
2223: OR
2224: IFFALSE 2228
// exit ;
2226: GO 2668
// side := GetSide ( un ) ;
2228: LD_ADDR_VAR 0 9
2232: PUSH
2233: LD_VAR 0 1
2237: PPUSH
2238: CALL_OW 255
2242: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_ok ] , [ f_empty ] ] ) diff b ;
2243: LD_ADDR_VAR 0 7
2247: PUSH
2248: LD_INT 22
2250: PUSH
2251: LD_VAR 0 9
2255: PUSH
2256: EMPTY
2257: LIST
2258: LIST
2259: PUSH
2260: LD_INT 30
2262: PUSH
2263: LD_INT 32
2265: PUSH
2266: EMPTY
2267: LIST
2268: LIST
2269: PUSH
2270: LD_INT 50
2272: PUSH
2273: EMPTY
2274: LIST
2275: PUSH
2276: LD_INT 58
2278: PUSH
2279: EMPTY
2280: LIST
2281: PUSH
2282: EMPTY
2283: LIST
2284: LIST
2285: LIST
2286: LIST
2287: PPUSH
2288: CALL_OW 69
2292: PUSH
2293: LD_VAR 0 2
2297: DIFF
2298: ST_TO_ADDR
// if not filter then
2299: LD_VAR 0 7
2303: NOT
2304: IFFALSE 2533
// begin filter := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_barracks ] ] ) ;
2306: LD_ADDR_VAR 0 7
2310: PUSH
2311: LD_INT 22
2313: PUSH
2314: LD_VAR 0 9
2318: PUSH
2319: EMPTY
2320: LIST
2321: LIST
2322: PUSH
2323: LD_INT 30
2325: PUSH
2326: LD_INT 5
2328: PUSH
2329: EMPTY
2330: LIST
2331: LIST
2332: PUSH
2333: EMPTY
2334: LIST
2335: LIST
2336: PPUSH
2337: CALL_OW 69
2341: ST_TO_ADDR
// if debug then
2342: LD_EXP 1
2346: IFFALSE 2365
// display_strings := [ filter , 1 ] ;
2348: LD_ADDR_OWVAR 47
2352: PUSH
2353: LD_VAR 0 7
2357: PUSH
2358: LD_STRING 1
2360: PUSH
2361: EMPTY
2362: LIST
2363: LIST
2364: ST_TO_ADDR
// if not filter then
2365: LD_VAR 0 7
2369: NOT
2370: IFFALSE 2393
// begin ComMoveXY ( un , x , y ) ;
2372: LD_VAR 0 1
2376: PPUSH
2377: LD_VAR 0 3
2381: PPUSH
2382: LD_VAR 0 4
2386: PPUSH
2387: CALL_OW 111
// exit ;
2391: GO 2668
// end ; repeat t := NearestUnitToUnit ( filter , un ) ;
2393: LD_ADDR_VAR 0 8
2397: PUSH
2398: LD_VAR 0 7
2402: PPUSH
2403: LD_VAR 0 1
2407: PPUSH
2408: CALL_OW 74
2412: ST_TO_ADDR
// if UnitsInside ( t ) = 6 then
2413: LD_VAR 0 8
2417: PPUSH
2418: CALL_OW 313
2422: PUSH
2423: LD_INT 6
2425: EQUAL
2426: IFFALSE 2446
// filter := filter diff t else
2428: LD_ADDR_VAR 0 7
2432: PUSH
2433: LD_VAR 0 7
2437: PUSH
2438: LD_VAR 0 8
2442: DIFF
2443: ST_TO_ADDR
2444: GO 2448
// break ;
2446: GO 2470
// until UnitsInside ( t ) < 6 or not filter ;
2448: LD_VAR 0 8
2452: PPUSH
2453: CALL_OW 313
2457: PUSH
2458: LD_INT 6
2460: LESS
2461: PUSH
2462: LD_VAR 0 7
2466: NOT
2467: OR
2468: IFFALSE 2393
// display_strings := [ filter , t ] ;
2470: LD_ADDR_OWVAR 47
2474: PUSH
2475: LD_VAR 0 7
2479: PUSH
2480: LD_VAR 0 8
2484: PUSH
2485: EMPTY
2486: LIST
2487: LIST
2488: ST_TO_ADDR
// if not filter then
2489: LD_VAR 0 7
2493: NOT
2494: IFFALSE 2517
// ComMoveXY ( un , x , y ) else
2496: LD_VAR 0 1
2500: PPUSH
2501: LD_VAR 0 3
2505: PPUSH
2506: LD_VAR 0 4
2510: PPUSH
2511: CALL_OW 111
2515: GO 2531
// ComEnterUnit ( un , t ) ;
2517: LD_VAR 0 1
2521: PPUSH
2522: LD_VAR 0 8
2526: PPUSH
2527: CALL_OW 120
// end else
2531: GO 2668
// begin repeat t := NearestUnitToUnit ( filter , un ) ;
2533: LD_ADDR_VAR 0 8
2537: PUSH
2538: LD_VAR 0 7
2542: PPUSH
2543: LD_VAR 0 1
2547: PPUSH
2548: CALL_OW 74
2552: ST_TO_ADDR
// if ( GetTag ( t ) = 7 ) then
2553: LD_VAR 0 8
2557: PPUSH
2558: CALL_OW 110
2562: PUSH
2563: LD_INT 7
2565: EQUAL
2566: IFFALSE 2584
// filter := filter diff t ;
2568: LD_ADDR_VAR 0 7
2572: PUSH
2573: LD_VAR 0 7
2577: PUSH
2578: LD_VAR 0 8
2582: DIFF
2583: ST_TO_ADDR
// until GetTag ( t ) <> 7 or not filter ;
2584: LD_VAR 0 8
2588: PPUSH
2589: CALL_OW 110
2593: PUSH
2594: LD_INT 7
2596: NONEQUAL
2597: PUSH
2598: LD_VAR 0 7
2602: NOT
2603: OR
2604: IFFALSE 2533
// if GetTag ( t ) <> 7 then
2606: LD_VAR 0 8
2610: PPUSH
2611: CALL_OW 110
2615: PUSH
2616: LD_INT 7
2618: NONEQUAL
2619: IFFALSE 2649
// begin SetTag ( t , 7 ) ;
2621: LD_VAR 0 8
2625: PPUSH
2626: LD_INT 7
2628: PPUSH
2629: CALL_OW 109
// ComEnterUnit ( un , t ) ;
2633: LD_VAR 0 1
2637: PPUSH
2638: LD_VAR 0 8
2642: PPUSH
2643: CALL_OW 120
// end else
2647: GO 2668
// ComMoveXY ( un , x , y ) ;
2649: LD_VAR 0 1
2653: PPUSH
2654: LD_VAR 0 3
2658: PPUSH
2659: LD_VAR 0 4
2663: PPUSH
2664: CALL_OW 111
// end ; end ;
2668: LD_VAR 0 5
2672: RET
// export function BaseNeedEnergy ( base ) ; var i , tmp ; begin
2673: LD_INT 0
2675: PPUSH
2676: PPUSH
2677: PPUSH
// if not base then
2678: LD_VAR 0 1
2682: NOT
2683: IFFALSE 2687
// exit ;
2685: GO 2745
// tmp := GetEnergy ( GetBase ( base ) ) ;
2687: LD_ADDR_VAR 0 4
2691: PUSH
2692: LD_VAR 0 1
2696: PPUSH
2697: CALL_OW 274
2701: PPUSH
2702: CALL_OW 278
2706: ST_TO_ADDR
// if tmp [ 1 ] > tmp [ 4 ] then
2707: LD_VAR 0 4
2711: PUSH
2712: LD_INT 1
2714: ARRAY
2715: PUSH
2716: LD_VAR 0 4
2720: PUSH
2721: LD_INT 4
2723: ARRAY
2724: GREATER
2725: IFFALSE 2737
// result := true else
2727: LD_ADDR_VAR 0 2
2731: PUSH
2732: LD_INT 1
2734: ST_TO_ADDR
2735: GO 2745
// result := false ;
2737: LD_ADDR_VAR 0 2
2741: PUSH
2742: LD_INT 0
2744: ST_TO_ADDR
// end ;
2745: LD_VAR 0 2
2749: RET
// export function FilterPeople ( side ) ; begin
2750: LD_INT 0
2752: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] ] ) ;
2753: LD_ADDR_VAR 0 2
2757: PUSH
2758: LD_INT 22
2760: PUSH
2761: LD_VAR 0 1
2765: PUSH
2766: EMPTY
2767: LIST
2768: LIST
2769: PUSH
2770: LD_INT 21
2772: PUSH
2773: LD_INT 1
2775: PUSH
2776: EMPTY
2777: LIST
2778: LIST
2779: PUSH
2780: EMPTY
2781: LIST
2782: LIST
2783: PPUSH
2784: CALL_OW 69
2788: ST_TO_ADDR
// end ;
2789: LD_VAR 0 2
2793: RET
// export function FilterDrivers ( side ) ; begin
2794: LD_INT 0
2796: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_outside ] ] ] ) ;
2797: LD_ADDR_VAR 0 2
2801: PUSH
2802: LD_INT 22
2804: PUSH
2805: LD_VAR 0 1
2809: PUSH
2810: EMPTY
2811: LIST
2812: LIST
2813: PUSH
2814: LD_INT 3
2816: PUSH
2817: LD_INT 56
2819: PUSH
2820: EMPTY
2821: LIST
2822: PUSH
2823: EMPTY
2824: LIST
2825: LIST
2826: PUSH
2827: EMPTY
2828: LIST
2829: LIST
2830: PPUSH
2831: CALL_OW 69
2835: ST_TO_ADDR
// end ;
2836: LD_VAR 0 2
2840: RET
// export function FilterPeopleArea ( side , area ) ; begin
2841: LD_INT 0
2843: PPUSH
// result := FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ;
2844: LD_ADDR_VAR 0 3
2848: PUSH
2849: LD_VAR 0 2
2853: PPUSH
2854: LD_INT 22
2856: PUSH
2857: LD_INT 1
2859: PUSH
2860: EMPTY
2861: LIST
2862: LIST
2863: PUSH
2864: LD_INT 21
2866: PUSH
2867: LD_INT 1
2869: PUSH
2870: EMPTY
2871: LIST
2872: LIST
2873: PUSH
2874: EMPTY
2875: LIST
2876: LIST
2877: PPUSH
2878: CALL_OW 70
2882: ST_TO_ADDR
// end ;
2883: LD_VAR 0 3
2887: RET
// export function FilterDriversArea ( side , area ) ; var i , tmp ; begin
2888: LD_INT 0
2890: PPUSH
2891: PPUSH
2892: PPUSH
// tmp := FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) ;
2893: LD_ADDR_VAR 0 5
2897: PUSH
2898: LD_VAR 0 2
2902: PPUSH
2903: LD_INT 22
2905: PUSH
2906: LD_INT 1
2908: PUSH
2909: EMPTY
2910: LIST
2911: LIST
2912: PUSH
2913: LD_INT 21
2915: PUSH
2916: LD_INT 2
2918: PUSH
2919: EMPTY
2920: LIST
2921: LIST
2922: PUSH
2923: LD_INT 3
2925: PUSH
2926: LD_INT 58
2928: PUSH
2929: EMPTY
2930: LIST
2931: PUSH
2932: EMPTY
2933: LIST
2934: LIST
2935: PUSH
2936: EMPTY
2937: LIST
2938: LIST
2939: LIST
2940: PPUSH
2941: CALL_OW 70
2945: ST_TO_ADDR
// result := [ ] ;
2946: LD_ADDR_VAR 0 3
2950: PUSH
2951: EMPTY
2952: ST_TO_ADDR
// if not tmp then
2953: LD_VAR 0 5
2957: NOT
2958: IFFALSE 2962
// exit ;
2960: GO 3014
// for i in tmp do
2962: LD_ADDR_VAR 0 4
2966: PUSH
2967: LD_VAR 0 5
2971: PUSH
2972: FOR_IN
2973: IFFALSE 2998
// result := result union IsDrivenBy ( i ) ;
2975: LD_ADDR_VAR 0 3
2979: PUSH
2980: LD_VAR 0 3
2984: PUSH
2985: LD_VAR 0 4
2989: PPUSH
2990: CALL_OW 311
2994: UNION
2995: ST_TO_ADDR
2996: GO 2972
2998: POP
2999: POP
// result := result diff 0 ;
3000: LD_ADDR_VAR 0 3
3004: PUSH
3005: LD_VAR 0 3
3009: PUSH
3010: LD_INT 0
3012: DIFF
3013: ST_TO_ADDR
// end ;
3014: LD_VAR 0 3
3018: RET
// export function FilterBuildings ( side ) ; begin
3019: LD_INT 0
3021: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
3022: LD_ADDR_VAR 0 2
3026: PUSH
3027: LD_INT 22
3029: PUSH
3030: LD_VAR 0 1
3034: PUSH
3035: EMPTY
3036: LIST
3037: LIST
3038: PUSH
3039: LD_INT 21
3041: PUSH
3042: LD_INT 3
3044: PUSH
3045: EMPTY
3046: LIST
3047: LIST
3048: PUSH
3049: EMPTY
3050: LIST
3051: LIST
3052: PPUSH
3053: CALL_OW 69
3057: ST_TO_ADDR
// end ;
3058: LD_VAR 0 2
3062: RET
// export function PrepareNature ; var i , animal , nat_area ; begin
3063: LD_INT 0
3065: PPUSH
3066: PPUSH
3067: PPUSH
3068: PPUSH
// uc_side = 0 ;
3069: LD_ADDR_OWVAR 20
3073: PUSH
3074: LD_INT 0
3076: ST_TO_ADDR
// uc_nation = 0 ;
3077: LD_ADDR_OWVAR 21
3081: PUSH
3082: LD_INT 0
3084: ST_TO_ADDR
// nat_area := wildArea ;
3085: LD_ADDR_VAR 0 4
3089: PUSH
3090: LD_INT 3
3092: ST_TO_ADDR
// InitHc ;
3093: CALL_OW 19
// for i = 1 to 4 do
3097: LD_ADDR_VAR 0 2
3101: PUSH
3102: DOUBLE
3103: LD_INT 1
3105: DEC
3106: ST_TO_ADDR
3107: LD_INT 4
3109: PUSH
3110: FOR_TO
3111: IFFALSE 3166
// begin hc_class = 18 ;
3113: LD_ADDR_OWVAR 28
3117: PUSH
3118: LD_INT 18
3120: ST_TO_ADDR
// hc_gallery =  ;
3121: LD_ADDR_OWVAR 33
3125: PUSH
3126: LD_STRING 
3128: ST_TO_ADDR
// hc_face_number = 1 ;
3129: LD_ADDR_OWVAR 34
3133: PUSH
3134: LD_INT 1
3136: ST_TO_ADDR
// animal := CreateHuman ;
3137: LD_ADDR_VAR 0 3
3141: PUSH
3142: CALL_OW 44
3146: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
3147: LD_VAR 0 3
3151: PPUSH
3152: LD_VAR 0 4
3156: PPUSH
3157: LD_INT 0
3159: PPUSH
3160: CALL_OW 49
// end ;
3164: GO 3110
3166: POP
3167: POP
// for i = 1 to 6 do
3168: LD_ADDR_VAR 0 2
3172: PUSH
3173: DOUBLE
3174: LD_INT 1
3176: DEC
3177: ST_TO_ADDR
3178: LD_INT 6
3180: PUSH
3181: FOR_TO
3182: IFFALSE 3253
// begin hc_class = class_tiger ;
3184: LD_ADDR_OWVAR 28
3188: PUSH
3189: LD_INT 14
3191: ST_TO_ADDR
// hc_gallery =  ;
3192: LD_ADDR_OWVAR 33
3196: PUSH
3197: LD_STRING 
3199: ST_TO_ADDR
// hc_agressivity = Rand ( 0 , 10 ) ;
3200: LD_ADDR_OWVAR 35
3204: PUSH
3205: LD_INT 0
3207: PPUSH
3208: LD_INT 10
3210: PPUSH
3211: CALL_OW 12
3215: ST_TO_ADDR
// hc_face_number = 3 ;
3216: LD_ADDR_OWVAR 34
3220: PUSH
3221: LD_INT 3
3223: ST_TO_ADDR
// animal := CreateHuman ;
3224: LD_ADDR_VAR 0 3
3228: PUSH
3229: CALL_OW 44
3233: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
3234: LD_VAR 0 3
3238: PPUSH
3239: LD_VAR 0 4
3243: PPUSH
3244: LD_INT 0
3246: PPUSH
3247: CALL_OW 49
// end ;
3251: GO 3181
3253: POP
3254: POP
// for i = 1 to 2 do
3255: LD_ADDR_VAR 0 2
3259: PUSH
3260: DOUBLE
3261: LD_INT 1
3263: DEC
3264: ST_TO_ADDR
3265: LD_INT 2
3267: PUSH
3268: FOR_TO
3269: IFFALSE 3332
// begin hc_class = 21 ;
3271: LD_ADDR_OWVAR 28
3275: PUSH
3276: LD_INT 21
3278: ST_TO_ADDR
// hc_gallery =  ;
3279: LD_ADDR_OWVAR 33
3283: PUSH
3284: LD_STRING 
3286: ST_TO_ADDR
// hc_agressivity = 0 ;
3287: LD_ADDR_OWVAR 35
3291: PUSH
3292: LD_INT 0
3294: ST_TO_ADDR
// hc_face_number = 5 ;
3295: LD_ADDR_OWVAR 34
3299: PUSH
3300: LD_INT 5
3302: ST_TO_ADDR
// animal := CreateHuman ;
3303: LD_ADDR_VAR 0 3
3307: PUSH
3308: CALL_OW 44
3312: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
3313: LD_VAR 0 3
3317: PPUSH
3318: LD_VAR 0 4
3322: PPUSH
3323: LD_INT 0
3325: PPUSH
3326: CALL_OW 49
// end ;
3330: GO 3268
3332: POP
3333: POP
// for i = 1 to 6 do
3334: LD_ADDR_VAR 0 2
3338: PUSH
3339: DOUBLE
3340: LD_INT 1
3342: DEC
3343: ST_TO_ADDR
3344: LD_INT 6
3346: PUSH
3347: FOR_TO
3348: IFFALSE 3403
// begin hc_class = 13 ;
3350: LD_ADDR_OWVAR 28
3354: PUSH
3355: LD_INT 13
3357: ST_TO_ADDR
// hc_gallery =  ;
3358: LD_ADDR_OWVAR 33
3362: PUSH
3363: LD_STRING 
3365: ST_TO_ADDR
// hc_face_number = 4 ;
3366: LD_ADDR_OWVAR 34
3370: PUSH
3371: LD_INT 4
3373: ST_TO_ADDR
// animal := CreateHuman ;
3374: LD_ADDR_VAR 0 3
3378: PUSH
3379: CALL_OW 44
3383: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
3384: LD_VAR 0 3
3388: PPUSH
3389: LD_VAR 0 4
3393: PPUSH
3394: LD_INT 0
3396: PPUSH
3397: CALL_OW 49
// end ;
3401: GO 3347
3403: POP
3404: POP
// for i = 1 to 2 do
3405: LD_ADDR_VAR 0 2
3409: PUSH
3410: DOUBLE
3411: LD_INT 1
3413: DEC
3414: ST_TO_ADDR
3415: LD_INT 2
3417: PUSH
3418: FOR_TO
3419: IFFALSE 3478
// begin hc_class = 20 ;
3421: LD_ADDR_OWVAR 28
3425: PUSH
3426: LD_INT 20
3428: ST_TO_ADDR
// hc_gallery =  ;
3429: LD_ADDR_OWVAR 33
3433: PUSH
3434: LD_STRING 
3436: ST_TO_ADDR
// hc_face_number = 2 ;
3437: LD_ADDR_OWVAR 34
3441: PUSH
3442: LD_INT 2
3444: ST_TO_ADDR
// animal := CreateHuman ;
3445: LD_ADDR_VAR 0 3
3449: PUSH
3450: CALL_OW 44
3454: ST_TO_ADDR
// PlaceUnitXYR ( animal , 101 , 37 , 3 , false ) ;
3455: LD_VAR 0 3
3459: PPUSH
3460: LD_INT 101
3462: PPUSH
3463: LD_INT 37
3465: PPUSH
3466: LD_INT 3
3468: PPUSH
3469: LD_INT 0
3471: PPUSH
3472: CALL_OW 50
// end ;
3476: GO 3418
3478: POP
3479: POP
// for i = 1 to 1 do
3480: LD_ADDR_VAR 0 2
3484: PUSH
3485: DOUBLE
3486: LD_INT 1
3488: DEC
3489: ST_TO_ADDR
3490: LD_INT 1
3492: PUSH
3493: FOR_TO
3494: IFFALSE 3541
// begin vc_chassis := 31 ;
3496: LD_ADDR_OWVAR 37
3500: PUSH
3501: LD_INT 31
3503: ST_TO_ADDR
// vc_control := control_rider ;
3504: LD_ADDR_OWVAR 38
3508: PUSH
3509: LD_INT 4
3511: ST_TO_ADDR
// animal := CreateVehicle ;
3512: LD_ADDR_VAR 0 3
3516: PUSH
3517: CALL_OW 45
3521: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
3522: LD_VAR 0 3
3526: PPUSH
3527: LD_VAR 0 4
3531: PPUSH
3532: LD_INT 0
3534: PPUSH
3535: CALL_OW 49
// end ;
3539: GO 3493
3541: POP
3542: POP
// end ;
3543: LD_VAR 0 1
3547: RET
// export function NearbyTowerHasEnergy ( unit ) ; var i , tmp , energy ; begin
3548: LD_INT 0
3550: PPUSH
3551: PPUSH
3552: PPUSH
3553: PPUSH
// result := [ ] ;
3554: LD_ADDR_VAR 0 2
3558: PUSH
3559: EMPTY
3560: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( unit ) ] , [ f_dist , unit , 15 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) ;
3561: LD_ADDR_VAR 0 4
3565: PUSH
3566: LD_INT 81
3568: PUSH
3569: LD_VAR 0 1
3573: PPUSH
3574: CALL_OW 255
3578: PUSH
3579: EMPTY
3580: LIST
3581: LIST
3582: PUSH
3583: LD_INT 91
3585: PUSH
3586: LD_VAR 0 1
3590: PUSH
3591: LD_INT 15
3593: PUSH
3594: EMPTY
3595: LIST
3596: LIST
3597: LIST
3598: PUSH
3599: LD_INT 2
3601: PUSH
3602: LD_INT 30
3604: PUSH
3605: LD_INT 32
3607: PUSH
3608: EMPTY
3609: LIST
3610: LIST
3611: PUSH
3612: LD_INT 30
3614: PUSH
3615: LD_INT 33
3617: PUSH
3618: EMPTY
3619: LIST
3620: LIST
3621: PUSH
3622: EMPTY
3623: LIST
3624: LIST
3625: LIST
3626: PUSH
3627: EMPTY
3628: LIST
3629: LIST
3630: LIST
3631: PPUSH
3632: CALL_OW 69
3636: ST_TO_ADDR
// if not tmp then
3637: LD_VAR 0 4
3641: NOT
3642: IFFALSE 3646
// exit ;
3644: GO 3715
// for i in tmp do
3646: LD_ADDR_VAR 0 3
3650: PUSH
3651: LD_VAR 0 4
3655: PUSH
3656: FOR_IN
3657: IFFALSE 3713
// begin energy := GetEnergy ( GetBase ( i ) ) ;
3659: LD_ADDR_VAR 0 5
3663: PUSH
3664: LD_VAR 0 3
3668: PPUSH
3669: CALL_OW 274
3673: PPUSH
3674: CALL_OW 278
3678: ST_TO_ADDR
// if energy [ 4 ] > energy [ 1 ] then
3679: LD_VAR 0 5
3683: PUSH
3684: LD_INT 4
3686: ARRAY
3687: PUSH
3688: LD_VAR 0 5
3692: PUSH
3693: LD_INT 1
3695: ARRAY
3696: GREATER
3697: IFFALSE 3711
// begin result := i ;
3699: LD_ADDR_VAR 0 2
3703: PUSH
3704: LD_VAR 0 3
3708: ST_TO_ADDR
// break ;
3709: GO 3713
// end ; end ;
3711: GO 3656
3713: POP
3714: POP
// end ; end_of_file
3715: LD_VAR 0 2
3719: RET
// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Khatam , Kikuchi , Harisson ; export function PrepareAmericans ; var i , team , others , veh , m ; begin
3720: LD_INT 0
3722: PPUSH
3723: PPUSH
3724: PPUSH
3725: PPUSH
3726: PPUSH
3727: PPUSH
// uc_side := 1 ;
3728: LD_ADDR_OWVAR 20
3732: PUSH
3733: LD_INT 1
3735: ST_TO_ADDR
// uc_nation := 1 ;
3736: LD_ADDR_OWVAR 21
3740: PUSH
3741: LD_INT 1
3743: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) ) ;
3744: LD_ADDR_EXP 9
3748: PUSH
3749: LD_STRING JMM
3751: PPUSH
3752: LD_EXP 1
3756: NOT
3757: PPUSH
3758: CALL 500 0 2
3762: ST_TO_ADDR
// team := [ JMM ] ;
3763: LD_ADDR_VAR 0 3
3767: PUSH
3768: LD_EXP 9
3772: PUSH
3773: EMPTY
3774: LIST
3775: ST_TO_ADDR
// if LoadVariable ( BrownIn07 , debug ) then
3776: LD_STRING BrownIn07
3778: PPUSH
3779: LD_EXP 1
3783: PPUSH
3784: CALL_OW 30
3788: IFFALSE 3809
// Brown := PrepareUnit ( Brown , ( not debug ) ) ;
3790: LD_ADDR_EXP 10
3794: PUSH
3795: LD_STRING Brown
3797: PPUSH
3798: LD_EXP 1
3802: NOT
3803: PPUSH
3804: CALL 500 0 2
3808: ST_TO_ADDR
// if Brown then
3809: LD_EXP 10
3813: IFFALSE 3831
// team := team ^ Brown ;
3815: LD_ADDR_VAR 0 3
3819: PUSH
3820: LD_VAR 0 3
3824: PUSH
3825: LD_EXP 10
3829: ADD
3830: ST_TO_ADDR
// if LoadVariable ( DonaldsonIn07 , debug ) then
3831: LD_STRING DonaldsonIn07
3833: PPUSH
3834: LD_EXP 1
3838: PPUSH
3839: CALL_OW 30
3843: IFFALSE 3864
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) ) ;
3845: LD_ADDR_EXP 11
3849: PUSH
3850: LD_STRING Donaldson
3852: PPUSH
3853: LD_EXP 1
3857: NOT
3858: PPUSH
3859: CALL 500 0 2
3863: ST_TO_ADDR
// if Donaldson then
3864: LD_EXP 11
3868: IFFALSE 3886
// team := team ^ Donaldson ;
3870: LD_ADDR_VAR 0 3
3874: PUSH
3875: LD_VAR 0 3
3879: PUSH
3880: LD_EXP 11
3884: ADD
3885: ST_TO_ADDR
// if LoadVariable ( BobbyIn07 , debug ) then
3886: LD_STRING BobbyIn07
3888: PPUSH
3889: LD_EXP 1
3893: PPUSH
3894: CALL_OW 30
3898: IFFALSE 3919
// Bobby := PrepareUnit ( Bobby , ( not debug ) ) ;
3900: LD_ADDR_EXP 12
3904: PUSH
3905: LD_STRING Bobby
3907: PPUSH
3908: LD_EXP 1
3912: NOT
3913: PPUSH
3914: CALL 500 0 2
3918: ST_TO_ADDR
// if Bobby then
3919: LD_EXP 12
3923: IFFALSE 3941
// team := team ^ Bobby ;
3925: LD_ADDR_VAR 0 3
3929: PUSH
3930: LD_VAR 0 3
3934: PUSH
3935: LD_EXP 12
3939: ADD
3940: ST_TO_ADDR
// if LoadVariable ( CyrusIn07 , debug ) then
3941: LD_STRING CyrusIn07
3943: PPUSH
3944: LD_EXP 1
3948: PPUSH
3949: CALL_OW 30
3953: IFFALSE 3974
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) ) ;
3955: LD_ADDR_EXP 13
3959: PUSH
3960: LD_STRING Cyrus
3962: PPUSH
3963: LD_EXP 1
3967: NOT
3968: PPUSH
3969: CALL 500 0 2
3973: ST_TO_ADDR
// if Cyrus then
3974: LD_EXP 13
3978: IFFALSE 3996
// team := team ^ Cyrus ;
3980: LD_ADDR_VAR 0 3
3984: PUSH
3985: LD_VAR 0 3
3989: PUSH
3990: LD_EXP 13
3994: ADD
3995: ST_TO_ADDR
// if LoadVariable ( LisaIn07 , debug ) then
3996: LD_STRING LisaIn07
3998: PPUSH
3999: LD_EXP 1
4003: PPUSH
4004: CALL_OW 30
4008: IFFALSE 4029
// Lisa := PrepareUnit ( Lisa , ( not debug ) ) ;
4010: LD_ADDR_EXP 14
4014: PUSH
4015: LD_STRING Lisa
4017: PPUSH
4018: LD_EXP 1
4022: NOT
4023: PPUSH
4024: CALL 500 0 2
4028: ST_TO_ADDR
// if Lisa then
4029: LD_EXP 14
4033: IFFALSE 4051
// team := team ^ Lisa ;
4035: LD_ADDR_VAR 0 3
4039: PUSH
4040: LD_VAR 0 3
4044: PUSH
4045: LD_EXP 14
4049: ADD
4050: ST_TO_ADDR
// if LoadVariable ( GladstoneIn07 , debug ) then
4051: LD_STRING GladstoneIn07
4053: PPUSH
4054: LD_EXP 1
4058: PPUSH
4059: CALL_OW 30
4063: IFFALSE 4084
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) ) ;
4065: LD_ADDR_EXP 16
4069: PUSH
4070: LD_STRING Gladstone
4072: PPUSH
4073: LD_EXP 1
4077: NOT
4078: PPUSH
4079: CALL 500 0 2
4083: ST_TO_ADDR
// if Gladstone then
4084: LD_EXP 16
4088: IFFALSE 4106
// team := team ^ Gladstone ;
4090: LD_ADDR_VAR 0 3
4094: PUSH
4095: LD_VAR 0 3
4099: PUSH
4100: LD_EXP 16
4104: ADD
4105: ST_TO_ADDR
// if LoadVariable ( KhatamIn07 , debug ) then
4106: LD_STRING KhatamIn07
4108: PPUSH
4109: LD_EXP 1
4113: PPUSH
4114: CALL_OW 30
4118: IFFALSE 4139
// Khatam := PrepareUnit ( Khatam , ( not debug ) ) ;
4120: LD_ADDR_EXP 17
4124: PUSH
4125: LD_STRING Khatam
4127: PPUSH
4128: LD_EXP 1
4132: NOT
4133: PPUSH
4134: CALL 500 0 2
4138: ST_TO_ADDR
// if Khatam then
4139: LD_EXP 17
4143: IFFALSE 4161
// team := team ^ Khatam ;
4145: LD_ADDR_VAR 0 3
4149: PUSH
4150: LD_VAR 0 3
4154: PUSH
4155: LD_EXP 17
4159: ADD
4160: ST_TO_ADDR
// others := CreateCharacterSet ( 07_others ) ;
4161: LD_ADDR_VAR 0 4
4165: PUSH
4166: LD_STRING 07_others
4168: PPUSH
4169: CALL_OW 31
4173: ST_TO_ADDR
// if others then
4174: LD_VAR 0 4
4178: IFFALSE 4196
// team := team ^ others ;
4180: LD_ADDR_VAR 0 3
4184: PUSH
4185: LD_VAR 0 3
4189: PUSH
4190: LD_VAR 0 4
4194: ADD
4195: ST_TO_ADDR
// if debug then
4196: LD_EXP 1
4200: IFFALSE 4274
// begin InitHc ;
4202: CALL_OW 19
// for i = 1 to 4 do
4206: LD_ADDR_VAR 0 2
4210: PUSH
4211: DOUBLE
4212: LD_INT 1
4214: DEC
4215: ST_TO_ADDR
4216: LD_INT 4
4218: PUSH
4219: FOR_TO
4220: IFFALSE 4272
// begin PrepareHuman ( false , [ 1 , 3 ] [ Rand ( 1 , 2 ) ] , 4 ) ;
4222: LD_INT 0
4224: PPUSH
4225: LD_INT 1
4227: PUSH
4228: LD_INT 3
4230: PUSH
4231: EMPTY
4232: LIST
4233: LIST
4234: PUSH
4235: LD_INT 1
4237: PPUSH
4238: LD_INT 2
4240: PPUSH
4241: CALL_OW 12
4245: ARRAY
4246: PPUSH
4247: LD_INT 4
4249: PPUSH
4250: CALL_OW 380
// team := team ^ CreateHuman ;
4254: LD_ADDR_VAR 0 3
4258: PUSH
4259: LD_VAR 0 3
4263: PUSH
4264: CALL_OW 44
4268: ADD
4269: ST_TO_ADDR
// end ;
4270: GO 4219
4272: POP
4273: POP
// end ; m := 0 ;
4274: LD_ADDR_VAR 0 6
4278: PUSH
4279: LD_INT 0
4281: ST_TO_ADDR
// for i in team do
4282: LD_ADDR_VAR 0 2
4286: PUSH
4287: LD_VAR 0 3
4291: PUSH
4292: FOR_IN
4293: IFFALSE 4500
// if GetClass ( i ) = 3 then
4295: LD_VAR 0 2
4299: PPUSH
4300: CALL_OW 257
4304: PUSH
4305: LD_INT 3
4307: EQUAL
4308: IFFALSE 4456
// begin m := m + 1 ;
4310: LD_ADDR_VAR 0 6
4314: PUSH
4315: LD_VAR 0 6
4319: PUSH
4320: LD_INT 1
4322: PLUS
4323: ST_TO_ADDR
// veh := PrepareTank ( 1 , 1 , [ us_medium_wheeled , us_medium_tracked , us_medium_wheeled , us_light_wheeled ] [ m mod 4 + 1 ] , engine_solar , control_manual , [ us_gatling_gun , us_double_gun , us_light_gun , us_radar ] [ m mod 4 + 1 ] , 60 ) ;
4324: LD_ADDR_VAR 0 5
4328: PUSH
4329: LD_INT 1
4331: PPUSH
4332: LD_INT 1
4334: PPUSH
4335: LD_INT 2
4337: PUSH
4338: LD_INT 3
4340: PUSH
4341: LD_INT 2
4343: PUSH
4344: LD_INT 1
4346: PUSH
4347: EMPTY
4348: LIST
4349: LIST
4350: LIST
4351: LIST
4352: PUSH
4353: LD_VAR 0 6
4357: PUSH
4358: LD_INT 4
4360: MOD
4361: PUSH
4362: LD_INT 1
4364: PLUS
4365: ARRAY
4366: PPUSH
4367: LD_INT 2
4369: PPUSH
4370: LD_INT 1
4372: PPUSH
4373: LD_INT 4
4375: PUSH
4376: LD_INT 5
4378: PUSH
4379: LD_INT 3
4381: PUSH
4382: LD_INT 11
4384: PUSH
4385: EMPTY
4386: LIST
4387: LIST
4388: LIST
4389: LIST
4390: PUSH
4391: LD_VAR 0 6
4395: PUSH
4396: LD_INT 4
4398: MOD
4399: PUSH
4400: LD_INT 1
4402: PLUS
4403: ARRAY
4404: PPUSH
4405: LD_INT 60
4407: PPUSH
4408: CALL 563 0 7
4412: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
4413: LD_VAR 0 5
4417: PPUSH
4418: LD_INT 2
4420: PPUSH
4421: CALL_OW 233
// PlaceUnitArea ( veh , startArea , false ) ;
4425: LD_VAR 0 5
4429: PPUSH
4430: LD_INT 1
4432: PPUSH
4433: LD_INT 0
4435: PPUSH
4436: CALL_OW 49
// PlaceHumanInUnit ( i , veh ) ;
4440: LD_VAR 0 2
4444: PPUSH
4445: LD_VAR 0 5
4449: PPUSH
4450: CALL_OW 52
// end else
4454: GO 4498
// begin if GetClass ( i ) = 2 then
4456: LD_VAR 0 2
4460: PPUSH
4461: CALL_OW 257
4465: PUSH
4466: LD_INT 2
4468: EQUAL
4469: IFFALSE 4483
// SetClass ( i , 1 ) ;
4471: LD_VAR 0 2
4475: PPUSH
4476: LD_INT 1
4478: PPUSH
4479: CALL_OW 336
// PlaceUnitArea ( i , startArea , false ) ;
4483: LD_VAR 0 2
4487: PPUSH
4488: LD_INT 1
4490: PPUSH
4491: LD_INT 0
4493: PPUSH
4494: CALL_OW 49
// end ;
4498: GO 4292
4500: POP
4501: POP
// uc_side := 4 ;
4502: LD_ADDR_OWVAR 20
4506: PUSH
4507: LD_INT 4
4509: ST_TO_ADDR
// Harisson := PrepareUnit ( Harisson , false ) ;
4510: LD_ADDR_EXP 19
4514: PUSH
4515: LD_STRING Harisson
4517: PPUSH
4518: LD_INT 0
4520: PPUSH
4521: CALL 500 0 2
4525: ST_TO_ADDR
// PrepareScout ;
4526: CALL 4535 0 0
// end ;
4530: LD_VAR 0 1
4534: RET
// function PrepareScout ; var ape ; begin
4535: LD_INT 0
4537: PPUSH
4538: PPUSH
// uc_side := 4 ;
4539: LD_ADDR_OWVAR 20
4543: PUSH
4544: LD_INT 4
4546: ST_TO_ADDR
// uc_nation := 1 ;
4547: LD_ADDR_OWVAR 21
4551: PUSH
4552: LD_INT 1
4554: ST_TO_ADDR
// if LoadVariable ( FrankIn06 , 0 ) then
4555: LD_STRING FrankIn06
4557: PPUSH
4558: LD_INT 0
4560: PPUSH
4561: CALL_OW 30
4565: IFFALSE 4582
// Frank := CreateCharacter ( 06c_Frank ) else
4567: LD_ADDR_EXP 15
4571: PUSH
4572: LD_STRING 06c_Frank
4574: PPUSH
4575: CALL_OW 34
4579: ST_TO_ADDR
4580: GO 4622
// if LoadVariable ( FrankInDelta , 0 ) then
4582: LD_STRING FrankInDelta
4584: PPUSH
4585: LD_INT 0
4587: PPUSH
4588: CALL_OW 30
4592: IFFALSE 4609
// Frank := CreateCharacter ( 05_Frank ) else
4594: LD_ADDR_EXP 15
4598: PUSH
4599: LD_STRING 05_Frank
4601: PPUSH
4602: CALL_OW 34
4606: ST_TO_ADDR
4607: GO 4622
// Frank := CreateCharacter ( 04_Frank ) ;
4609: LD_ADDR_EXP 15
4613: PUSH
4614: LD_STRING 04_Frank
4616: PPUSH
4617: CALL_OW 34
4621: ST_TO_ADDR
// if Frank then
4622: LD_EXP 15
4626: IFFALSE 4759
// begin PlaceUnitArea ( Frank , scoutArea , false ) ;
4628: LD_EXP 15
4632: PPUSH
4633: LD_INT 2
4635: PPUSH
4636: LD_INT 0
4638: PPUSH
4639: CALL_OW 49
// SetClass ( Frank , 1 ) ;
4643: LD_EXP 15
4647: PPUSH
4648: LD_INT 1
4650: PPUSH
4651: CALL_OW 336
// uc_side := 0 ;
4655: LD_ADDR_OWVAR 20
4659: PUSH
4660: LD_INT 0
4662: ST_TO_ADDR
// uc_nation := 0 ;
4663: LD_ADDR_OWVAR 21
4667: PUSH
4668: LD_INT 0
4670: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 0 ) ;
4671: LD_INT 0
4673: PPUSH
4674: LD_INT 12
4676: PPUSH
4677: LD_INT 0
4679: PPUSH
4680: CALL_OW 380
// ape := CreateHuman ;
4684: LD_ADDR_VAR 0 2
4688: PUSH
4689: CALL_OW 44
4693: ST_TO_ADDR
// PlaceUnitXYR ( ape , GetX ( Frank ) , GetY ( Frank ) , 5 , false ) ;
4694: LD_VAR 0 2
4698: PPUSH
4699: LD_EXP 15
4703: PPUSH
4704: CALL_OW 250
4708: PPUSH
4709: LD_EXP 15
4713: PPUSH
4714: CALL_OW 251
4718: PPUSH
4719: LD_INT 5
4721: PPUSH
4722: LD_INT 0
4724: PPUSH
4725: CALL_OW 50
// ComTurnUnit ( ape , Frank ) ;
4729: LD_VAR 0 2
4733: PPUSH
4734: LD_EXP 15
4738: PPUSH
4739: CALL_OW 119
// ComTurnUnit ( Frank , ape ) ;
4743: LD_EXP 15
4747: PPUSH
4748: LD_VAR 0 2
4752: PPUSH
4753: CALL_OW 119
// exit ;
4757: GO 4799
// end ; Kikuchi := PrepareUnit ( Yamoko , false ) ;
4759: LD_ADDR_EXP 18
4763: PUSH
4764: LD_STRING Yamoko
4766: PPUSH
4767: LD_INT 0
4769: PPUSH
4770: CALL 500 0 2
4774: ST_TO_ADDR
// PlaceUnitArea ( Kikuchi , scoutArea , false ) ;
4775: LD_EXP 18
4779: PPUSH
4780: LD_INT 2
4782: PPUSH
4783: LD_INT 0
4785: PPUSH
4786: CALL_OW 49
// ComHold ( Kikuchi ) ;
4790: LD_EXP 18
4794: PPUSH
4795: CALL_OW 140
// end ; end_of_file
4799: LD_VAR 0 1
4803: RET
// export ru_rebuild_list ; export function PrepareRussians ; var i , j , r , un , skill , filter , tmp , dep_list , lab_list , fac_list , breastworks_list , bunker_list , turret_list , weapons_list , personel_counter ; begin
4804: LD_INT 0
4806: PPUSH
4807: PPUSH
4808: PPUSH
4809: PPUSH
4810: PPUSH
4811: PPUSH
4812: PPUSH
4813: PPUSH
4814: PPUSH
4815: PPUSH
4816: PPUSH
4817: PPUSH
4818: PPUSH
4819: PPUSH
4820: PPUSH
4821: PPUSH
// ru_rebuild_list := [ ] ;
4822: LD_ADDR_EXP 20
4826: PUSH
4827: EMPTY
4828: ST_TO_ADDR
// uc_side := 3 ;
4829: LD_ADDR_OWVAR 20
4833: PUSH
4834: LD_INT 3
4836: ST_TO_ADDR
// uc_nation := 3 ;
4837: LD_ADDR_OWVAR 21
4841: PUSH
4842: LD_INT 3
4844: ST_TO_ADDR
// if Difficulty > 1 then
4845: LD_OWVAR 67
4849: PUSH
4850: LD_INT 1
4852: GREATER
4853: IFFALSE 4989
// begin bc_type := b_breastwork ;
4855: LD_ADDR_OWVAR 42
4859: PUSH
4860: LD_INT 31
4862: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 78 , 74 , 2 ) ;
4863: LD_INT 78
4865: PPUSH
4866: LD_INT 74
4868: PPUSH
4869: LD_INT 2
4871: PPUSH
4872: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 171 , 193 , 4 ) ;
4876: LD_INT 171
4878: PPUSH
4879: LD_INT 193
4881: PPUSH
4882: LD_INT 4
4884: PPUSH
4885: CALL_OW 47
// bc_type := b_turret ;
4889: LD_ADDR_OWVAR 42
4893: PUSH
4894: LD_INT 33
4896: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 129 , 96 , 3 ) ;
4897: LD_INT 129
4899: PPUSH
4900: LD_INT 96
4902: PPUSH
4903: LD_INT 3
4905: PPUSH
4906: CALL_OW 47
// if Difficulty > 2 then
4910: LD_OWVAR 67
4914: PUSH
4915: LD_INT 2
4917: GREATER
4918: IFFALSE 4989
// begin RemoveUnit ( HexInfo ( 83 , 141 ) ) ;
4920: LD_INT 83
4922: PPUSH
4923: LD_INT 141
4925: PPUSH
4926: CALL_OW 428
4930: PPUSH
4931: CALL_OW 64
// RemoveUnit ( HexInfo ( 78 , 133 ) ) ;
4935: LD_INT 78
4937: PPUSH
4938: LD_INT 133
4940: PPUSH
4941: CALL_OW 428
4945: PPUSH
4946: CALL_OW 64
// CreateAndPlaceBuildingXYD ( 83 , 141 , 2 ) ;
4950: LD_INT 83
4952: PPUSH
4953: LD_INT 141
4955: PPUSH
4956: LD_INT 2
4958: PPUSH
4959: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 78 , 133 , 2 ) ;
4963: LD_INT 78
4965: PPUSH
4966: LD_INT 133
4968: PPUSH
4969: LD_INT 2
4971: PPUSH
4972: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 145 , 112 , 3 ) ;
4976: LD_INT 145
4978: PPUSH
4979: LD_INT 112
4981: PPUSH
4982: LD_INT 3
4984: PPUSH
4985: CALL_OW 47
// end ; end ; dep_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
4989: LD_ADDR_VAR 0 9
4993: PUSH
4994: LD_INT 22
4996: PUSH
4997: LD_INT 3
4999: PUSH
5000: EMPTY
5001: LIST
5002: LIST
5003: PUSH
5004: LD_INT 2
5006: PUSH
5007: LD_INT 30
5009: PUSH
5010: LD_INT 0
5012: PUSH
5013: EMPTY
5014: LIST
5015: LIST
5016: PUSH
5017: LD_INT 30
5019: PUSH
5020: LD_INT 1
5022: PUSH
5023: EMPTY
5024: LIST
5025: LIST
5026: PUSH
5027: EMPTY
5028: LIST
5029: LIST
5030: LIST
5031: PUSH
5032: EMPTY
5033: LIST
5034: LIST
5035: PPUSH
5036: CALL_OW 69
5040: ST_TO_ADDR
// lab_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
5041: LD_ADDR_VAR 0 10
5045: PUSH
5046: LD_INT 22
5048: PUSH
5049: LD_INT 3
5051: PUSH
5052: EMPTY
5053: LIST
5054: LIST
5055: PUSH
5056: LD_INT 2
5058: PUSH
5059: LD_INT 30
5061: PUSH
5062: LD_INT 6
5064: PUSH
5065: EMPTY
5066: LIST
5067: LIST
5068: PUSH
5069: LD_INT 30
5071: PUSH
5072: LD_INT 7
5074: PUSH
5075: EMPTY
5076: LIST
5077: LIST
5078: PUSH
5079: LD_INT 30
5081: PUSH
5082: LD_INT 8
5084: PUSH
5085: EMPTY
5086: LIST
5087: LIST
5088: PUSH
5089: EMPTY
5090: LIST
5091: LIST
5092: LIST
5093: LIST
5094: PUSH
5095: EMPTY
5096: LIST
5097: LIST
5098: PPUSH
5099: CALL_OW 69
5103: ST_TO_ADDR
// fac_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) ;
5104: LD_ADDR_VAR 0 11
5108: PUSH
5109: LD_INT 22
5111: PUSH
5112: LD_INT 3
5114: PUSH
5115: EMPTY
5116: LIST
5117: LIST
5118: PUSH
5119: LD_INT 30
5121: PUSH
5122: LD_INT 3
5124: PUSH
5125: EMPTY
5126: LIST
5127: LIST
5128: PUSH
5129: EMPTY
5130: LIST
5131: LIST
5132: PPUSH
5133: CALL_OW 69
5137: ST_TO_ADDR
// breastworks_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) ;
5138: LD_ADDR_VAR 0 12
5142: PUSH
5143: LD_INT 22
5145: PUSH
5146: LD_INT 3
5148: PUSH
5149: EMPTY
5150: LIST
5151: LIST
5152: PUSH
5153: LD_INT 30
5155: PUSH
5156: LD_INT 31
5158: PUSH
5159: EMPTY
5160: LIST
5161: LIST
5162: PUSH
5163: EMPTY
5164: LIST
5165: LIST
5166: PPUSH
5167: CALL_OW 69
5171: ST_TO_ADDR
// bunker_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) ;
5172: LD_ADDR_VAR 0 13
5176: PUSH
5177: LD_INT 22
5179: PUSH
5180: LD_INT 3
5182: PUSH
5183: EMPTY
5184: LIST
5185: LIST
5186: PUSH
5187: LD_INT 30
5189: PUSH
5190: LD_INT 32
5192: PUSH
5193: EMPTY
5194: LIST
5195: LIST
5196: PUSH
5197: EMPTY
5198: LIST
5199: LIST
5200: PPUSH
5201: CALL_OW 69
5205: ST_TO_ADDR
// turret_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_turret ] ] ) ;
5206: LD_ADDR_VAR 0 14
5210: PUSH
5211: LD_INT 22
5213: PUSH
5214: LD_INT 3
5216: PUSH
5217: EMPTY
5218: LIST
5219: LIST
5220: PUSH
5221: LD_INT 30
5223: PUSH
5224: LD_INT 33
5226: PUSH
5227: EMPTY
5228: LIST
5229: LIST
5230: PUSH
5231: EMPTY
5232: LIST
5233: LIST
5234: PPUSH
5235: CALL_OW 69
5239: ST_TO_ADDR
// weapons_list := [ [ ru_heavy_machine_gun , 5 ] , [ ru_gatling_gun , 50 ] , [ ru_gun , 30 ] , [ ru_heavy_gun , 15 ] ] ;
5240: LD_ADDR_VAR 0 15
5244: PUSH
5245: LD_INT 42
5247: PUSH
5248: LD_INT 5
5250: PUSH
5251: EMPTY
5252: LIST
5253: LIST
5254: PUSH
5255: LD_INT 43
5257: PUSH
5258: LD_INT 50
5260: PUSH
5261: EMPTY
5262: LIST
5263: LIST
5264: PUSH
5265: LD_INT 44
5267: PUSH
5268: LD_INT 30
5270: PUSH
5271: EMPTY
5272: LIST
5273: LIST
5274: PUSH
5275: LD_INT 46
5277: PUSH
5278: LD_INT 15
5280: PUSH
5281: EMPTY
5282: LIST
5283: LIST
5284: PUSH
5285: EMPTY
5286: LIST
5287: LIST
5288: LIST
5289: LIST
5290: ST_TO_ADDR
// personel_counter := [ 0 , 4 , 6 , 3 ] ;
5291: LD_ADDR_VAR 0 16
5295: PUSH
5296: LD_INT 0
5298: PUSH
5299: LD_INT 4
5301: PUSH
5302: LD_INT 6
5304: PUSH
5305: LD_INT 3
5307: PUSH
5308: EMPTY
5309: LIST
5310: LIST
5311: LIST
5312: LIST
5313: ST_TO_ADDR
// skill := [ 4 , 5 , 6 ] [ Difficulty ] ;
5314: LD_ADDR_VAR 0 6
5318: PUSH
5319: LD_INT 4
5321: PUSH
5322: LD_INT 5
5324: PUSH
5325: LD_INT 6
5327: PUSH
5328: EMPTY
5329: LIST
5330: LIST
5331: LIST
5332: PUSH
5333: LD_OWVAR 67
5337: ARRAY
5338: ST_TO_ADDR
// SetBName ( ru_dep_main , am_tukh ) ;
5339: LD_INT 16
5341: PPUSH
5342: LD_STRING am_tukh
5344: PPUSH
5345: CALL_OW 500
// for i in FilterAllUnits ( [ f_type , unit_building ] ) do
5349: LD_ADDR_VAR 0 2
5353: PUSH
5354: LD_INT 21
5356: PUSH
5357: LD_INT 3
5359: PUSH
5360: EMPTY
5361: LIST
5362: LIST
5363: PPUSH
5364: CALL_OW 69
5368: PUSH
5369: FOR_IN
5370: IFFALSE 5403
// SetBLevel ( i , [ 4 , 5 , 6 ] [ Difficulty ] ) ;
5372: LD_VAR 0 2
5376: PPUSH
5377: LD_INT 4
5379: PUSH
5380: LD_INT 5
5382: PUSH
5383: LD_INT 6
5385: PUSH
5386: EMPTY
5387: LIST
5388: LIST
5389: LIST
5390: PUSH
5391: LD_OWVAR 67
5395: ARRAY
5396: PPUSH
5397: CALL_OW 241
5401: GO 5369
5403: POP
5404: POP
// for i in dep_list do
5405: LD_ADDR_VAR 0 2
5409: PUSH
5410: LD_VAR 0 9
5414: PUSH
5415: FOR_IN
5416: IFFALSE 5460
// begin SetResourceType ( GetBase ( i ) , mat_cans , 1000 ) ;
5418: LD_VAR 0 2
5422: PPUSH
5423: CALL_OW 274
5427: PPUSH
5428: LD_INT 1
5430: PPUSH
5431: LD_INT 1000
5433: PPUSH
5434: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 1000 ) ;
5438: LD_VAR 0 2
5442: PPUSH
5443: CALL_OW 274
5447: PPUSH
5448: LD_INT 2
5450: PPUSH
5451: LD_INT 1000
5453: PPUSH
5454: CALL_OW 277
// end ;
5458: GO 5415
5460: POP
5461: POP
// InitHc ;
5462: CALL_OW 19
// tmp := bunker_list * [ 45 , 60 , 75 ] [ Difficulty ] div 100 ;
5466: LD_ADDR_VAR 0 8
5470: PUSH
5471: LD_VAR 0 13
5475: PUSH
5476: LD_INT 45
5478: PUSH
5479: LD_INT 60
5481: PUSH
5482: LD_INT 75
5484: PUSH
5485: EMPTY
5486: LIST
5487: LIST
5488: LIST
5489: PUSH
5490: LD_OWVAR 67
5494: ARRAY
5495: MUL
5496: PUSH
5497: LD_INT 100
5499: DIV
5500: ST_TO_ADDR
// personel_counter := Replace ( personel_counter , 1 , tmp ) ;
5501: LD_ADDR_VAR 0 16
5505: PUSH
5506: LD_VAR 0 16
5510: PPUSH
5511: LD_INT 1
5513: PPUSH
5514: LD_VAR 0 8
5518: PPUSH
5519: CALL_OW 1
5523: ST_TO_ADDR
// tmp := [ ] ;
5524: LD_ADDR_VAR 0 8
5528: PUSH
5529: EMPTY
5530: ST_TO_ADDR
// for i in bunker_list do
5531: LD_ADDR_VAR 0 2
5535: PUSH
5536: LD_VAR 0 13
5540: PUSH
5541: FOR_IN
5542: IFFALSE 5638
// if i mod 10 + 1 < tmp then
5544: LD_VAR 0 2
5548: PUSH
5549: LD_INT 10
5551: MOD
5552: PUSH
5553: LD_INT 1
5555: PLUS
5556: PUSH
5557: LD_VAR 0 8
5561: LESS
5562: IFFALSE 5607
// tmp := Insert ( tmp , i mod rand ( 3 , 5 ) + 1 , i ) else
5564: LD_ADDR_VAR 0 8
5568: PUSH
5569: LD_VAR 0 8
5573: PPUSH
5574: LD_VAR 0 2
5578: PUSH
5579: LD_INT 3
5581: PPUSH
5582: LD_INT 5
5584: PPUSH
5585: CALL_OW 12
5589: MOD
5590: PUSH
5591: LD_INT 1
5593: PLUS
5594: PPUSH
5595: LD_VAR 0 2
5599: PPUSH
5600: CALL_OW 2
5604: ST_TO_ADDR
5605: GO 5636
// tmp := Insert ( tmp , tmp + 1 , i ) ;
5607: LD_ADDR_VAR 0 8
5611: PUSH
5612: LD_VAR 0 8
5616: PPUSH
5617: LD_VAR 0 8
5621: PUSH
5622: LD_INT 1
5624: PLUS
5625: PPUSH
5626: LD_VAR 0 2
5630: PPUSH
5631: CALL_OW 2
5635: ST_TO_ADDR
5636: GO 5541
5638: POP
5639: POP
// bunker_list := tmp ;
5640: LD_ADDR_VAR 0 13
5644: PUSH
5645: LD_VAR 0 8
5649: ST_TO_ADDR
// for i in bunker_list ^ turret_list do
5650: LD_ADDR_VAR 0 2
5654: PUSH
5655: LD_VAR 0 13
5659: PUSH
5660: LD_VAR 0 14
5664: ADD
5665: PUSH
5666: FOR_IN
5667: IFFALSE 5690
// PlaceWeaponTurret ( i , GetTurretWeapon ( i ) ) ;
5669: LD_VAR 0 2
5673: PPUSH
5674: LD_VAR 0 2
5678: PPUSH
5679: CALL 977 0 1
5683: PPUSH
5684: CALL_OW 431
5688: GO 5666
5690: POP
5691: POP
// while ( personel_counter [ 1 ] ) do
5692: LD_VAR 0 16
5696: PUSH
5697: LD_INT 1
5699: ARRAY
5700: IFFALSE 5808
// begin i := rand ( 1 , bunker_list ) ;
5702: LD_ADDR_VAR 0 2
5706: PUSH
5707: LD_INT 1
5709: PPUSH
5710: LD_VAR 0 13
5714: PPUSH
5715: CALL_OW 12
5719: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
5720: LD_INT 0
5722: PPUSH
5723: LD_INT 1
5725: PPUSH
5726: LD_VAR 0 6
5730: PPUSH
5731: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , bunker_list [ i ] ) ;
5735: CALL_OW 44
5739: PPUSH
5740: LD_VAR 0 13
5744: PUSH
5745: LD_VAR 0 2
5749: ARRAY
5750: PPUSH
5751: CALL_OW 52
// bunker_list := Delete ( bunker_list , i ) ;
5755: LD_ADDR_VAR 0 13
5759: PUSH
5760: LD_VAR 0 13
5764: PPUSH
5765: LD_VAR 0 2
5769: PPUSH
5770: CALL_OW 3
5774: ST_TO_ADDR
// personel_counter := Replace ( personel_counter , 1 , personel_counter [ 1 ] - 1 ) ;
5775: LD_ADDR_VAR 0 16
5779: PUSH
5780: LD_VAR 0 16
5784: PPUSH
5785: LD_INT 1
5787: PPUSH
5788: LD_VAR 0 16
5792: PUSH
5793: LD_INT 1
5795: ARRAY
5796: PUSH
5797: LD_INT 1
5799: MINUS
5800: PPUSH
5801: CALL_OW 1
5805: ST_TO_ADDR
// end ;
5806: GO 5692
// for i = 1 to personel_counter [ 2 ] do
5808: LD_ADDR_VAR 0 2
5812: PUSH
5813: DOUBLE
5814: LD_INT 1
5816: DEC
5817: ST_TO_ADDR
5818: LD_VAR 0 16
5822: PUSH
5823: LD_INT 2
5825: ARRAY
5826: PUSH
5827: FOR_TO
5828: IFFALSE 5859
// begin PrepareHuman ( false , 2 , skill ) ;
5830: LD_INT 0
5832: PPUSH
5833: LD_INT 2
5835: PPUSH
5836: LD_VAR 0 6
5840: PPUSH
5841: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , ru_dep_main ) ;
5845: CALL_OW 44
5849: PPUSH
5850: LD_INT 16
5852: PPUSH
5853: CALL_OW 52
// end ;
5857: GO 5827
5859: POP
5860: POP
// for i = 1 to personel_counter [ 3 ] do
5861: LD_ADDR_VAR 0 2
5865: PUSH
5866: DOUBLE
5867: LD_INT 1
5869: DEC
5870: ST_TO_ADDR
5871: LD_VAR 0 16
5875: PUSH
5876: LD_INT 3
5878: ARRAY
5879: PUSH
5880: FOR_TO
5881: IFFALSE 5928
// begin PrepareHuman ( false , 3 , skill ) ;
5883: LD_INT 0
5885: PPUSH
5886: LD_INT 3
5888: PPUSH
5889: LD_VAR 0 6
5893: PPUSH
5894: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , fac_list [ i mod 2 + 1 ] ) ;
5898: CALL_OW 44
5902: PPUSH
5903: LD_VAR 0 11
5907: PUSH
5908: LD_VAR 0 2
5912: PUSH
5913: LD_INT 2
5915: MOD
5916: PUSH
5917: LD_INT 1
5919: PLUS
5920: ARRAY
5921: PPUSH
5922: CALL_OW 52
// end ;
5926: GO 5880
5928: POP
5929: POP
// for i = 1 to personel_counter [ 4 ] do
5930: LD_ADDR_VAR 0 2
5934: PUSH
5935: DOUBLE
5936: LD_INT 1
5938: DEC
5939: ST_TO_ADDR
5940: LD_VAR 0 16
5944: PUSH
5945: LD_INT 4
5947: ARRAY
5948: PUSH
5949: FOR_TO
5950: IFFALSE 5987
// begin PrepareHuman ( false , 4 , skill ) ;
5952: LD_INT 0
5954: PPUSH
5955: LD_INT 4
5957: PPUSH
5958: LD_VAR 0 6
5962: PPUSH
5963: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , lab_list [ 1 ] ) ;
5967: CALL_OW 44
5971: PPUSH
5972: LD_VAR 0 10
5976: PUSH
5977: LD_INT 1
5979: ARRAY
5980: PPUSH
5981: CALL_OW 52
// end ;
5985: GO 5949
5987: POP
5988: POP
// for i in breastworks_list do
5989: LD_ADDR_VAR 0 2
5993: PUSH
5994: LD_VAR 0 12
5998: PUSH
5999: FOR_IN
6000: IFFALSE 6112
// begin r := GetDir ( i ) ;
6002: LD_ADDR_VAR 0 4
6006: PUSH
6007: LD_VAR 0 2
6011: PPUSH
6012: CALL_OW 254
6016: ST_TO_ADDR
// if r > 3 then
6017: LD_VAR 0 4
6021: PUSH
6022: LD_INT 3
6024: GREATER
6025: IFFALSE 6043
// r := r - 3 else
6027: LD_ADDR_VAR 0 4
6031: PUSH
6032: LD_VAR 0 4
6036: PUSH
6037: LD_INT 3
6039: MINUS
6040: ST_TO_ADDR
6041: GO 6057
// r := r + 3 ;
6043: LD_ADDR_VAR 0 4
6047: PUSH
6048: LD_VAR 0 4
6052: PUSH
6053: LD_INT 3
6055: PLUS
6056: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
6057: LD_INT 0
6059: PPUSH
6060: LD_INT 1
6062: PPUSH
6063: LD_VAR 0 6
6067: PPUSH
6068: CALL_OW 380
// un := CreateHuman ;
6072: LD_ADDR_VAR 0 5
6076: PUSH
6077: CALL_OW 44
6081: ST_TO_ADDR
// SetDir ( un , r ) ;
6082: LD_VAR 0 5
6086: PPUSH
6087: LD_VAR 0 4
6091: PPUSH
6092: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
6096: LD_VAR 0 5
6100: PPUSH
6101: LD_VAR 0 2
6105: PPUSH
6106: CALL_OW 52
// end ;
6110: GO 5999
6112: POP
6113: POP
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) ;
6114: LD_ADDR_VAR 0 8
6118: PUSH
6119: LD_INT 22
6121: PUSH
6122: LD_INT 3
6124: PUSH
6125: EMPTY
6126: LIST
6127: LIST
6128: PUSH
6129: LD_INT 25
6131: PUSH
6132: LD_INT 3
6134: PUSH
6135: EMPTY
6136: LIST
6137: LIST
6138: PUSH
6139: EMPTY
6140: LIST
6141: LIST
6142: PPUSH
6143: CALL_OW 69
6147: ST_TO_ADDR
// r := [ 4 , 5 , 6 ] [ Difficulty ] ;
6148: LD_ADDR_VAR 0 4
6152: PUSH
6153: LD_INT 4
6155: PUSH
6156: LD_INT 5
6158: PUSH
6159: LD_INT 6
6161: PUSH
6162: EMPTY
6163: LIST
6164: LIST
6165: LIST
6166: PUSH
6167: LD_OWVAR 67
6171: ARRAY
6172: ST_TO_ADDR
// for i = 1 to r do
6173: LD_ADDR_VAR 0 2
6177: PUSH
6178: DOUBLE
6179: LD_INT 1
6181: DEC
6182: ST_TO_ADDR
6183: LD_VAR 0 4
6187: PUSH
6188: FOR_TO
6189: IFFALSE 6362
// begin un := PrepareTank ( 3 , 3 , [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked ] [ i mod 3 + 1 ] , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_machine_gun ] [ i mod 3 + 1 ] , 100 ) ;
6191: LD_ADDR_VAR 0 5
6195: PUSH
6196: LD_INT 3
6198: PPUSH
6199: LD_INT 3
6201: PPUSH
6202: LD_INT 22
6204: PUSH
6205: LD_INT 22
6207: PUSH
6208: LD_INT 24
6210: PUSH
6211: EMPTY
6212: LIST
6213: LIST
6214: LIST
6215: PUSH
6216: LD_VAR 0 2
6220: PUSH
6221: LD_INT 3
6223: MOD
6224: PUSH
6225: LD_INT 1
6227: PLUS
6228: ARRAY
6229: PPUSH
6230: LD_INT 1
6232: PPUSH
6233: LD_INT 1
6235: PPUSH
6236: LD_INT 43
6238: PUSH
6239: LD_INT 44
6241: PUSH
6242: LD_INT 42
6244: PUSH
6245: EMPTY
6246: LIST
6247: LIST
6248: LIST
6249: PUSH
6250: LD_VAR 0 2
6254: PUSH
6255: LD_INT 3
6257: MOD
6258: PUSH
6259: LD_INT 1
6261: PLUS
6262: ARRAY
6263: PPUSH
6264: LD_INT 100
6266: PPUSH
6267: CALL 563 0 7
6271: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
6272: LD_VAR 0 5
6276: PPUSH
6277: LD_INT 0
6279: PPUSH
6280: LD_INT 5
6282: PPUSH
6283: CALL_OW 12
6287: PPUSH
6288: CALL_OW 233
// PlaceUnitArea ( un , parkingArea , false ) ;
6292: LD_VAR 0 5
6296: PPUSH
6297: LD_INT 5
6299: PPUSH
6300: LD_INT 0
6302: PPUSH
6303: CALL_OW 49
// if i > tmp - 2 then
6307: LD_VAR 0 2
6311: PUSH
6312: LD_VAR 0 8
6316: PUSH
6317: LD_INT 2
6319: MINUS
6320: GREATER
6321: IFFALSE 6325
// continue ;
6323: GO 6188
// ComExitBuilding ( tmp [ i ] ) ;
6325: LD_VAR 0 8
6329: PUSH
6330: LD_VAR 0 2
6334: ARRAY
6335: PPUSH
6336: CALL_OW 122
// AddComEnterUnit ( tmp [ i ] , un ) ;
6340: LD_VAR 0 8
6344: PUSH
6345: LD_VAR 0 2
6349: ARRAY
6350: PPUSH
6351: LD_VAR 0 5
6355: PPUSH
6356: CALL_OW 180
// end ;
6360: GO 6188
6362: POP
6363: POP
// end ;
6364: LD_VAR 0 1
6368: RET
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) do var i , filter , tmp , engs , enemy ;
6369: LD_INT 22
6371: PUSH
6372: LD_INT 3
6374: PUSH
6375: EMPTY
6376: LIST
6377: LIST
6378: PUSH
6379: LD_INT 25
6381: PUSH
6382: LD_INT 2
6384: PUSH
6385: EMPTY
6386: LIST
6387: LIST
6388: PUSH
6389: EMPTY
6390: LIST
6391: LIST
6392: PPUSH
6393: CALL_OW 69
6397: IFFALSE 7129
6399: GO 6401
6401: DISABLE
6402: LD_INT 0
6404: PPUSH
6405: PPUSH
6406: PPUSH
6407: PPUSH
6408: PPUSH
// begin enable ;
6409: ENABLE
// filter := FilterUnitsInArea ( baseArea , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
6410: LD_ADDR_VAR 0 2
6414: PUSH
6415: LD_INT 6
6417: PPUSH
6418: LD_INT 3
6420: PUSH
6421: LD_INT 24
6423: PUSH
6424: LD_INT 1000
6426: PUSH
6427: EMPTY
6428: LIST
6429: LIST
6430: PUSH
6431: EMPTY
6432: LIST
6433: LIST
6434: PUSH
6435: LD_INT 21
6437: PUSH
6438: LD_INT 3
6440: PUSH
6441: EMPTY
6442: LIST
6443: LIST
6444: PUSH
6445: EMPTY
6446: LIST
6447: LIST
6448: PPUSH
6449: CALL_OW 70
6453: ST_TO_ADDR
// engs := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
6454: LD_ADDR_VAR 0 4
6458: PUSH
6459: LD_INT 22
6461: PUSH
6462: LD_INT 3
6464: PUSH
6465: EMPTY
6466: LIST
6467: LIST
6468: PUSH
6469: LD_INT 25
6471: PUSH
6472: LD_INT 2
6474: PUSH
6475: EMPTY
6476: LIST
6477: LIST
6478: PUSH
6479: EMPTY
6480: LIST
6481: LIST
6482: PPUSH
6483: CALL_OW 69
6487: ST_TO_ADDR
// if not filter and not ru_rebuild_list then
6488: LD_VAR 0 2
6492: NOT
6493: PUSH
6494: LD_EXP 20
6498: NOT
6499: AND
6500: IFFALSE 6570
// begin for i in engs do
6502: LD_ADDR_VAR 0 1
6506: PUSH
6507: LD_VAR 0 4
6511: PUSH
6512: FOR_IN
6513: IFFALSE 6568
// if GetLives ( i ) = 1000 and not HasTask ( i ) and not IsInUnit ( i ) then
6515: LD_VAR 0 1
6519: PPUSH
6520: CALL_OW 256
6524: PUSH
6525: LD_INT 1000
6527: EQUAL
6528: PUSH
6529: LD_VAR 0 1
6533: PPUSH
6534: CALL_OW 314
6538: NOT
6539: AND
6540: PUSH
6541: LD_VAR 0 1
6545: PPUSH
6546: CALL_OW 310
6550: NOT
6551: AND
6552: IFFALSE 6566
// ComEnterUnit ( i , ru_dep_main ) ;
6554: LD_VAR 0 1
6558: PPUSH
6559: LD_INT 16
6561: PPUSH
6562: CALL_OW 120
6566: GO 6512
6568: POP
6569: POP
// end ; if UnitFilter ( engs , [ f_not , [ f_lives , 650 ] ] ) then
6570: LD_VAR 0 4
6574: PPUSH
6575: LD_INT 3
6577: PUSH
6578: LD_INT 24
6580: PUSH
6581: LD_INT 650
6583: PUSH
6584: EMPTY
6585: LIST
6586: LIST
6587: PUSH
6588: EMPTY
6589: LIST
6590: LIST
6591: PPUSH
6592: CALL_OW 72
6596: IFFALSE 6689
// begin tmp := UnitFilter ( engs , [ f_not , [ f_lives , 650 ] ] ) ;
6598: LD_ADDR_VAR 0 3
6602: PUSH
6603: LD_VAR 0 4
6607: PPUSH
6608: LD_INT 3
6610: PUSH
6611: LD_INT 24
6613: PUSH
6614: LD_INT 650
6616: PUSH
6617: EMPTY
6618: LIST
6619: LIST
6620: PUSH
6621: EMPTY
6622: LIST
6623: LIST
6624: PPUSH
6625: CALL_OW 72
6629: ST_TO_ADDR
// for i in tmp do
6630: LD_ADDR_VAR 0 1
6634: PUSH
6635: LD_VAR 0 3
6639: PUSH
6640: FOR_IN
6641: IFFALSE 6687
// if not IsInArea ( i , mainBaseArea ) then
6643: LD_VAR 0 1
6647: PPUSH
6648: LD_INT 14
6650: PPUSH
6651: CALL_OW 308
6655: NOT
6656: IFFALSE 6685
// begin ComMoveXY ( i , 129 , 125 ) ;
6658: LD_VAR 0 1
6662: PPUSH
6663: LD_INT 129
6665: PPUSH
6666: LD_INT 125
6668: PPUSH
6669: CALL_OW 111
// AddComWait ( i , 0 0$30 ) ;
6673: LD_VAR 0 1
6677: PPUSH
6678: LD_INT 1050
6680: PPUSH
6681: CALL_OW 202
// end ;
6685: GO 6640
6687: POP
6688: POP
// end ; engs := UnitFilter ( engs , [ f_lives , 650 ] ) ;
6689: LD_ADDR_VAR 0 4
6693: PUSH
6694: LD_VAR 0 4
6698: PPUSH
6699: LD_INT 24
6701: PUSH
6702: LD_INT 650
6704: PUSH
6705: EMPTY
6706: LIST
6707: LIST
6708: PPUSH
6709: CALL_OW 72
6713: ST_TO_ADDR
// if not engs then
6714: LD_VAR 0 4
6718: NOT
6719: IFFALSE 6723
// exit ;
6721: GO 7129
// if filter then
6723: LD_VAR 0 2
6727: IFFALSE 6986
// begin for i in engs do
6729: LD_ADDR_VAR 0 1
6733: PUSH
6734: LD_VAR 0 4
6738: PUSH
6739: FOR_IN
6740: IFFALSE 6764
// if IsInUnit ( i ) then
6742: LD_VAR 0 1
6746: PPUSH
6747: CALL_OW 310
6751: IFFALSE 6762
// ComExitBuilding ( i ) ;
6753: LD_VAR 0 1
6757: PPUSH
6758: CALL_OW 122
6762: GO 6739
6764: POP
6765: POP
// wait ( 3 ) ;
6766: LD_INT 3
6768: PPUSH
6769: CALL_OW 67
// if filter >= 2 and engs >= 2 then
6773: LD_VAR 0 2
6777: PUSH
6778: LD_INT 2
6780: GREATEREQUAL
6781: PUSH
6782: LD_VAR 0 4
6786: PUSH
6787: LD_INT 2
6789: GREATEREQUAL
6790: AND
6791: IFFALSE 6939
// begin for i = 1 to engs / 2 do
6793: LD_ADDR_VAR 0 1
6797: PUSH
6798: DOUBLE
6799: LD_INT 1
6801: DEC
6802: ST_TO_ADDR
6803: LD_VAR 0 4
6807: PUSH
6808: LD_INT 2
6810: DIVREAL
6811: PUSH
6812: FOR_TO
6813: IFFALSE 6859
// if not HasTask ( engs [ i ] ) then
6815: LD_VAR 0 4
6819: PUSH
6820: LD_VAR 0 1
6824: ARRAY
6825: PPUSH
6826: CALL_OW 314
6830: NOT
6831: IFFALSE 6857
// ComRepairBuilding ( engs [ i ] , filter [ 1 ] ) ;
6833: LD_VAR 0 4
6837: PUSH
6838: LD_VAR 0 1
6842: ARRAY
6843: PPUSH
6844: LD_VAR 0 2
6848: PUSH
6849: LD_INT 1
6851: ARRAY
6852: PPUSH
6853: CALL_OW 130
6857: GO 6812
6859: POP
6860: POP
// for i = engs / 2 + 1 to engs do
6861: LD_ADDR_VAR 0 1
6865: PUSH
6866: DOUBLE
6867: LD_VAR 0 4
6871: PUSH
6872: LD_INT 2
6874: DIVREAL
6875: PUSH
6876: LD_INT 1
6878: PLUS
6879: DEC
6880: ST_TO_ADDR
6881: LD_VAR 0 4
6885: PUSH
6886: FOR_TO
6887: IFFALSE 6935
// if not HasTask ( engs [ i ] ) then
6889: LD_VAR 0 4
6893: PUSH
6894: LD_VAR 0 1
6898: ARRAY
6899: PPUSH
6900: CALL_OW 314
6904: NOT
6905: IFFALSE 6933
// ComRepairBuilding ( engs [ i ] , filter [ filter ] ) ;
6907: LD_VAR 0 4
6911: PUSH
6912: LD_VAR 0 1
6916: ARRAY
6917: PPUSH
6918: LD_VAR 0 2
6922: PUSH
6923: LD_VAR 0 2
6927: ARRAY
6928: PPUSH
6929: CALL_OW 130
6933: GO 6886
6935: POP
6936: POP
// end else
6937: GO 6986
// for i in engs do
6939: LD_ADDR_VAR 0 1
6943: PUSH
6944: LD_VAR 0 4
6948: PUSH
6949: FOR_IN
6950: IFFALSE 6984
// if not HasTask ( i ) then
6952: LD_VAR 0 1
6956: PPUSH
6957: CALL_OW 314
6961: NOT
6962: IFFALSE 6982
// ComRepairBuilding ( i , filter [ 1 ] ) ;
6964: LD_VAR 0 1
6968: PPUSH
6969: LD_VAR 0 2
6973: PUSH
6974: LD_INT 1
6976: ARRAY
6977: PPUSH
6978: CALL_OW 130
6982: GO 6949
6984: POP
6985: POP
// end ; enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
6986: LD_ADDR_VAR 0 5
6990: PUSH
6991: LD_INT 81
6993: PUSH
6994: LD_INT 3
6996: PUSH
6997: EMPTY
6998: LIST
6999: LIST
7000: PPUSH
7001: CALL_OW 69
7005: ST_TO_ADDR
// if ru_rebuild_list and not filter then
7006: LD_EXP 20
7010: PUSH
7011: LD_VAR 0 2
7015: NOT
7016: AND
7017: IFFALSE 7129
// begin ComExitBuilding ( engs ) ;
7019: LD_VAR 0 4
7023: PPUSH
7024: CALL_OW 122
// if GetDistUnitXY ( NearestUnitToXY ( enemy , ru_rebuild_list [ 2 ] , ru_rebuild_list [ 3 ] ) , ru_rebuild_list [ 2 ] , ru_rebuild_list [ 3 ] ) > 10 then
7028: LD_VAR 0 5
7032: PPUSH
7033: LD_EXP 20
7037: PUSH
7038: LD_INT 2
7040: ARRAY
7041: PPUSH
7042: LD_EXP 20
7046: PUSH
7047: LD_INT 3
7049: ARRAY
7050: PPUSH
7051: CALL_OW 73
7055: PPUSH
7056: LD_EXP 20
7060: PUSH
7061: LD_INT 2
7063: ARRAY
7064: PPUSH
7065: LD_EXP 20
7069: PUSH
7070: LD_INT 3
7072: ARRAY
7073: PPUSH
7074: CALL_OW 297
7078: PUSH
7079: LD_INT 10
7081: GREATER
7082: IFFALSE 7129
// ComBuild ( engs , ru_rebuild_list [ 1 ] , ru_rebuild_list [ 2 ] , ru_rebuild_list [ 3 ] , ru_rebuild_list [ 4 ] ) ;
7084: LD_VAR 0 4
7088: PPUSH
7089: LD_EXP 20
7093: PUSH
7094: LD_INT 1
7096: ARRAY
7097: PPUSH
7098: LD_EXP 20
7102: PUSH
7103: LD_INT 2
7105: ARRAY
7106: PPUSH
7107: LD_EXP 20
7111: PUSH
7112: LD_INT 3
7114: ARRAY
7115: PPUSH
7116: LD_EXP 20
7120: PUSH
7121: LD_INT 4
7123: ARRAY
7124: PPUSH
7125: CALL_OW 145
// end ; end ;
7129: PPOPN 5
7131: END
// every 0 0$1 trigger GetLives ( ru_dep_main ) < 250 do var i , tmp ;
7132: LD_INT 16
7134: PPUSH
7135: CALL_OW 256
7139: PUSH
7140: LD_INT 250
7142: LESS
7143: IFFALSE 7333
7145: GO 7147
7147: DISABLE
7148: LD_INT 0
7150: PPUSH
7151: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_class , 1 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ;
7152: LD_ADDR_VAR 0 2
7156: PUSH
7157: LD_INT 22
7159: PUSH
7160: LD_INT 3
7162: PUSH
7163: EMPTY
7164: LIST
7165: LIST
7166: PUSH
7167: LD_INT 2
7169: PUSH
7170: LD_INT 25
7172: PUSH
7173: LD_INT 1
7175: PUSH
7176: EMPTY
7177: LIST
7178: LIST
7179: PUSH
7180: LD_INT 25
7182: PUSH
7183: LD_INT 3
7185: PUSH
7186: EMPTY
7187: LIST
7188: LIST
7189: PUSH
7190: LD_INT 25
7192: PUSH
7193: LD_INT 4
7195: PUSH
7196: EMPTY
7197: LIST
7198: LIST
7199: PUSH
7200: EMPTY
7201: LIST
7202: LIST
7203: LIST
7204: LIST
7205: PUSH
7206: EMPTY
7207: LIST
7208: LIST
7209: PPUSH
7210: CALL_OW 69
7214: ST_TO_ADDR
// ComExitBuilding ( tmp ) ;
7215: LD_VAR 0 2
7219: PPUSH
7220: CALL_OW 122
// wait ( 3 ) ;
7224: LD_INT 3
7226: PPUSH
7227: CALL_OW 67
// ComMoveXY ( tmp , 156 , 211 ) ;
7231: LD_VAR 0 2
7235: PPUSH
7236: LD_INT 156
7238: PPUSH
7239: LD_INT 211
7241: PPUSH
7242: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
7246: LD_INT 35
7248: PPUSH
7249: CALL_OW 67
// for i in tmp do
7253: LD_ADDR_VAR 0 1
7257: PUSH
7258: LD_VAR 0 2
7262: PUSH
7263: FOR_IN
7264: IFFALSE 7324
// if IsInArea ( i , escapeArea ) then
7266: LD_VAR 0 1
7270: PPUSH
7271: LD_INT 15
7273: PPUSH
7274: CALL_OW 308
7278: IFFALSE 7307
// begin RemoveUnit ( i ) ;
7280: LD_VAR 0 1
7284: PPUSH
7285: CALL_OW 64
// tmp := tmp diff i ;
7289: LD_ADDR_VAR 0 2
7293: PUSH
7294: LD_VAR 0 2
7298: PUSH
7299: LD_VAR 0 1
7303: DIFF
7304: ST_TO_ADDR
// end else
7305: GO 7322
// ComMoveXY ( i , 156 , 211 ) ;
7307: LD_VAR 0 1
7311: PPUSH
7312: LD_INT 156
7314: PPUSH
7315: LD_INT 211
7317: PPUSH
7318: CALL_OW 111
7322: GO 7263
7324: POP
7325: POP
// until not tmp ;
7326: LD_VAR 0 2
7330: NOT
7331: IFFALSE 7246
// end ;
7333: PPOPN 2
7335: END
// every 0 0$01 trigger GetLives ( ru_dep_main ) > 250 and FilterAllUnits ( [ [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_outside ] ] ] ) do var i , tmp ;
7336: LD_INT 16
7338: PPUSH
7339: CALL_OW 256
7343: PUSH
7344: LD_INT 250
7346: GREATER
7347: PUSH
7348: LD_INT 22
7350: PUSH
7351: LD_INT 3
7353: PUSH
7354: EMPTY
7355: LIST
7356: LIST
7357: PUSH
7358: LD_INT 25
7360: PUSH
7361: LD_INT 1
7363: PUSH
7364: EMPTY
7365: LIST
7366: LIST
7367: PUSH
7368: LD_INT 56
7370: PUSH
7371: EMPTY
7372: LIST
7373: PUSH
7374: EMPTY
7375: LIST
7376: LIST
7377: LIST
7378: PUSH
7379: EMPTY
7380: LIST
7381: PPUSH
7382: CALL_OW 69
7386: AND
7387: IFFALSE 7499
7389: GO 7391
7391: DISABLE
7392: LD_INT 0
7394: PPUSH
7395: PPUSH
// begin enable ;
7396: ENABLE
// tmp := FilterAllUnits ( [ [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_outside ] , [ f_not , [ f_hastask ] ] ] ] ) ;
7397: LD_ADDR_VAR 0 2
7401: PUSH
7402: LD_INT 22
7404: PUSH
7405: LD_INT 3
7407: PUSH
7408: EMPTY
7409: LIST
7410: LIST
7411: PUSH
7412: LD_INT 25
7414: PUSH
7415: LD_INT 1
7417: PUSH
7418: EMPTY
7419: LIST
7420: LIST
7421: PUSH
7422: LD_INT 56
7424: PUSH
7425: EMPTY
7426: LIST
7427: PUSH
7428: LD_INT 3
7430: PUSH
7431: LD_INT 60
7433: PUSH
7434: EMPTY
7435: LIST
7436: PUSH
7437: EMPTY
7438: LIST
7439: LIST
7440: PUSH
7441: EMPTY
7442: LIST
7443: LIST
7444: LIST
7445: LIST
7446: PUSH
7447: EMPTY
7448: LIST
7449: PPUSH
7450: CALL_OW 69
7454: ST_TO_ADDR
// if not tmp then
7455: LD_VAR 0 2
7459: NOT
7460: IFFALSE 7464
// exit ;
7462: GO 7499
// for i in tmp do
7464: LD_ADDR_VAR 0 1
7468: PUSH
7469: LD_VAR 0 2
7473: PUSH
7474: FOR_IN
7475: IFFALSE 7497
// GoToAnotherTower ( i , 0 , 143 , 143 ) ;
7477: LD_VAR 0 1
7481: PPUSH
7482: LD_INT 0
7484: PPUSH
7485: LD_INT 143
7487: PPUSH
7488: LD_INT 143
7490: PPUSH
7491: CALL 2200 0 4
7495: GO 7474
7497: POP
7498: POP
// end ;
7499: PPOPN 2
7501: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do var i , tmp , doc ;
7502: LD_INT 22
7504: PUSH
7505: LD_INT 3
7507: PUSH
7508: EMPTY
7509: LIST
7510: LIST
7511: PUSH
7512: LD_INT 25
7514: PUSH
7515: LD_INT 4
7517: PUSH
7518: EMPTY
7519: LIST
7520: LIST
7521: PUSH
7522: EMPTY
7523: LIST
7524: LIST
7525: PPUSH
7526: CALL_OW 69
7530: IFFALSE 7784
7532: GO 7534
7534: DISABLE
7535: LD_INT 0
7537: PPUSH
7538: PPUSH
7539: PPUSH
// begin enable ;
7540: ENABLE
// tmp := FilterUnitsInArea ( mainBaseArea , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
7541: LD_ADDR_VAR 0 2
7545: PUSH
7546: LD_INT 14
7548: PPUSH
7549: LD_INT 22
7551: PUSH
7552: LD_INT 3
7554: PUSH
7555: EMPTY
7556: LIST
7557: LIST
7558: PUSH
7559: LD_INT 21
7561: PUSH
7562: LD_INT 1
7564: PUSH
7565: EMPTY
7566: LIST
7567: LIST
7568: PUSH
7569: LD_INT 3
7571: PUSH
7572: LD_INT 24
7574: PUSH
7575: LD_INT 1000
7577: PUSH
7578: EMPTY
7579: LIST
7580: LIST
7581: PUSH
7582: EMPTY
7583: LIST
7584: LIST
7585: PUSH
7586: EMPTY
7587: LIST
7588: LIST
7589: LIST
7590: PPUSH
7591: CALL_OW 70
7595: ST_TO_ADDR
// doc := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) ;
7596: LD_ADDR_VAR 0 3
7600: PUSH
7601: LD_INT 22
7603: PUSH
7604: LD_INT 3
7606: PUSH
7607: EMPTY
7608: LIST
7609: LIST
7610: PUSH
7611: LD_INT 25
7613: PUSH
7614: LD_INT 4
7616: PUSH
7617: EMPTY
7618: LIST
7619: LIST
7620: PUSH
7621: EMPTY
7622: LIST
7623: LIST
7624: PPUSH
7625: CALL_OW 69
7629: ST_TO_ADDR
// if not doc then
7630: LD_VAR 0 3
7634: NOT
7635: IFFALSE 7639
// exit ;
7637: GO 7784
// if not tmp then
7639: LD_VAR 0 2
7643: NOT
7644: IFFALSE 7735
// begin if not IsInUnit ( doc [ 1 ] ) then
7646: LD_VAR 0 3
7650: PUSH
7651: LD_INT 1
7653: ARRAY
7654: PPUSH
7655: CALL_OW 310
7659: NOT
7660: IFFALSE 7733
// ComEnterUnit ( doc , FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) [ 1 ] ) ;
7662: LD_VAR 0 3
7666: PPUSH
7667: LD_INT 22
7669: PUSH
7670: LD_INT 3
7672: PUSH
7673: EMPTY
7674: LIST
7675: LIST
7676: PUSH
7677: LD_INT 2
7679: PUSH
7680: LD_INT 30
7682: PUSH
7683: LD_INT 6
7685: PUSH
7686: EMPTY
7687: LIST
7688: LIST
7689: PUSH
7690: LD_INT 30
7692: PUSH
7693: LD_INT 7
7695: PUSH
7696: EMPTY
7697: LIST
7698: LIST
7699: PUSH
7700: LD_INT 30
7702: PUSH
7703: LD_INT 8
7705: PUSH
7706: EMPTY
7707: LIST
7708: LIST
7709: PUSH
7710: EMPTY
7711: LIST
7712: LIST
7713: LIST
7714: LIST
7715: PUSH
7716: EMPTY
7717: LIST
7718: LIST
7719: PPUSH
7720: CALL_OW 69
7724: PUSH
7725: LD_INT 1
7727: ARRAY
7728: PPUSH
7729: CALL_OW 120
// exit ;
7733: GO 7784
// end ; if IsInUnit ( doc [ 1 ] ) then
7735: LD_VAR 0 3
7739: PUSH
7740: LD_INT 1
7742: ARRAY
7743: PPUSH
7744: CALL_OW 310
7748: IFFALSE 7759
// ComExitBuilding ( doc ) ;
7750: LD_VAR 0 3
7754: PPUSH
7755: CALL_OW 122
// wait ( 3 ) ;
7759: LD_INT 3
7761: PPUSH
7762: CALL_OW 67
// ComHeal ( doc , tmp [ 1 ] ) ;
7766: LD_VAR 0 3
7770: PPUSH
7771: LD_VAR 0 2
7775: PUSH
7776: LD_INT 1
7778: ARRAY
7779: PPUSH
7780: CALL_OW 128
// end ;
7784: PPOPN 3
7786: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) do var i , tmp , attacking , areas , area ;
7787: LD_INT 22
7789: PUSH
7790: LD_INT 3
7792: PUSH
7793: EMPTY
7794: LIST
7795: LIST
7796: PUSH
7797: LD_INT 25
7799: PUSH
7800: LD_INT 3
7802: PUSH
7803: EMPTY
7804: LIST
7805: LIST
7806: PUSH
7807: EMPTY
7808: LIST
7809: LIST
7810: PPUSH
7811: CALL_OW 69
7815: PUSH
7816: LD_INT 22
7818: PUSH
7819: LD_INT 3
7821: PUSH
7822: EMPTY
7823: LIST
7824: LIST
7825: PUSH
7826: LD_INT 21
7828: PUSH
7829: LD_INT 2
7831: PUSH
7832: EMPTY
7833: LIST
7834: LIST
7835: PUSH
7836: EMPTY
7837: LIST
7838: LIST
7839: PPUSH
7840: CALL_OW 69
7844: AND
7845: IFFALSE 8259
7847: GO 7849
7849: DISABLE
7850: LD_INT 0
7852: PPUSH
7853: PPUSH
7854: PPUSH
7855: PPUSH
7856: PPUSH
// begin enable ;
7857: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) ;
7858: LD_ADDR_VAR 0 2
7862: PUSH
7863: LD_INT 22
7865: PUSH
7866: LD_INT 3
7868: PUSH
7869: EMPTY
7870: LIST
7871: LIST
7872: PUSH
7873: LD_INT 21
7875: PUSH
7876: LD_INT 2
7878: PUSH
7879: EMPTY
7880: LIST
7881: LIST
7882: PUSH
7883: LD_INT 3
7885: PUSH
7886: LD_INT 58
7888: PUSH
7889: EMPTY
7890: LIST
7891: PUSH
7892: EMPTY
7893: LIST
7894: LIST
7895: PUSH
7896: EMPTY
7897: LIST
7898: LIST
7899: LIST
7900: PPUSH
7901: CALL_OW 69
7905: ST_TO_ADDR
// areas := [ sectorAlpha , sectorBeta , sectorDelta , mainBaseArea ] ;
7906: LD_ADDR_VAR 0 4
7910: PUSH
7911: LD_INT 10
7913: PUSH
7914: LD_INT 11
7916: PUSH
7917: LD_INT 12
7919: PUSH
7920: LD_INT 14
7922: PUSH
7923: EMPTY
7924: LIST
7925: LIST
7926: LIST
7927: LIST
7928: ST_TO_ADDR
// area := 0 ;
7929: LD_ADDR_VAR 0 5
7933: PUSH
7934: LD_INT 0
7936: ST_TO_ADDR
// attacking := false ;
7937: LD_ADDR_VAR 0 3
7941: PUSH
7942: LD_INT 0
7944: ST_TO_ADDR
// for i in tmp do
7945: LD_ADDR_VAR 0 1
7949: PUSH
7950: LD_VAR 0 2
7954: PUSH
7955: FOR_IN
7956: IFFALSE 8042
// if GetDistUnits ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) < 10 then
7958: LD_VAR 0 1
7962: PPUSH
7963: LD_INT 22
7965: PUSH
7966: LD_INT 1
7968: PUSH
7969: EMPTY
7970: LIST
7971: LIST
7972: PPUSH
7973: CALL_OW 69
7977: PPUSH
7978: LD_VAR 0 1
7982: PPUSH
7983: CALL_OW 74
7987: PPUSH
7988: CALL_OW 296
7992: PUSH
7993: LD_INT 10
7995: LESS
7996: IFFALSE 8040
// begin ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
7998: LD_VAR 0 1
8002: PPUSH
8003: LD_INT 22
8005: PUSH
8006: LD_INT 1
8008: PUSH
8009: EMPTY
8010: LIST
8011: LIST
8012: PPUSH
8013: CALL_OW 69
8017: PPUSH
8018: LD_VAR 0 1
8022: PPUSH
8023: CALL_OW 74
8027: PPUSH
8028: CALL_OW 115
// attacking := true ;
8032: LD_ADDR_VAR 0 3
8036: PUSH
8037: LD_INT 1
8039: ST_TO_ADDR
// end ;
8040: GO 7955
8042: POP
8043: POP
// if attacking then
8044: LD_VAR 0 3
8048: IFFALSE 8052
// exit ;
8050: GO 8259
// for i in areas do
8052: LD_ADDR_VAR 0 1
8056: PUSH
8057: LD_VAR 0 4
8061: PUSH
8062: FOR_IN
8063: IFFALSE 8100
// if FilterUnitsInArea ( i , [ f_side , 1 ] ) then
8065: LD_VAR 0 1
8069: PPUSH
8070: LD_INT 22
8072: PUSH
8073: LD_INT 1
8075: PUSH
8076: EMPTY
8077: LIST
8078: LIST
8079: PPUSH
8080: CALL_OW 70
8084: IFFALSE 8098
// begin area := i ;
8086: LD_ADDR_VAR 0 5
8090: PUSH
8091: LD_VAR 0 1
8095: ST_TO_ADDR
// break ;
8096: GO 8100
// end ;
8098: GO 8062
8100: POP
8101: POP
// if area then
8102: LD_VAR 0 5
8106: IFFALSE 8259
// begin for i in tmp do
8108: LD_ADDR_VAR 0 1
8112: PUSH
8113: LD_VAR 0 2
8117: PUSH
8118: FOR_IN
8119: IFFALSE 8257
// begin if GetFuel ( i ) < 33 then
8121: LD_VAR 0 1
8125: PPUSH
8126: CALL_OW 261
8130: PUSH
8131: LD_INT 33
8133: LESS
8134: IFFALSE 8148
// SetFuel ( i , 33 ) ;
8136: LD_VAR 0 1
8140: PPUSH
8141: LD_INT 33
8143: PPUSH
8144: CALL_OW 240
// if GetDistUnits ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) < 10 then
8148: LD_VAR 0 1
8152: PPUSH
8153: LD_INT 22
8155: PUSH
8156: LD_INT 1
8158: PUSH
8159: EMPTY
8160: LIST
8161: LIST
8162: PPUSH
8163: CALL_OW 69
8167: PPUSH
8168: LD_VAR 0 1
8172: PPUSH
8173: CALL_OW 74
8177: PPUSH
8178: CALL_OW 296
8182: PUSH
8183: LD_INT 10
8185: LESS
8186: IFFALSE 8224
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) else
8188: LD_VAR 0 1
8192: PPUSH
8193: LD_INT 22
8195: PUSH
8196: LD_INT 1
8198: PUSH
8199: EMPTY
8200: LIST
8201: LIST
8202: PPUSH
8203: CALL_OW 69
8207: PPUSH
8208: LD_VAR 0 1
8212: PPUSH
8213: CALL_OW 74
8217: PPUSH
8218: CALL_OW 115
8222: GO 8255
// if not IsInArea ( i , area ) then
8224: LD_VAR 0 1
8228: PPUSH
8229: LD_VAR 0 5
8233: PPUSH
8234: CALL_OW 308
8238: NOT
8239: IFFALSE 8255
// ComMoveToArea ( i , area ) ;
8241: LD_VAR 0 1
8245: PPUSH
8246: LD_VAR 0 5
8250: PPUSH
8251: CALL_OW 113
// end ;
8255: GO 8118
8257: POP
8258: POP
// end ; end ;
8259: PPOPN 5
8261: END
// every 15 15$00 trigger Difficulty > 1 do var i , j , un , veh , time , count ;
8262: LD_OWVAR 67
8266: PUSH
8267: LD_INT 1
8269: GREATER
8270: IFFALSE 8547
8272: GO 8274
8274: DISABLE
8275: LD_INT 0
8277: PPUSH
8278: PPUSH
8279: PPUSH
8280: PPUSH
8281: PPUSH
8282: PPUSH
// begin uc_side := 3 ;
8283: LD_ADDR_OWVAR 20
8287: PUSH
8288: LD_INT 3
8290: ST_TO_ADDR
// uc_nation := 3 ;
8291: LD_ADDR_OWVAR 21
8295: PUSH
8296: LD_INT 3
8298: ST_TO_ADDR
// time := [ 9 9$00 , 7 7$00 , 6 6$00 ] [ Difficulty ] ;
8299: LD_ADDR_VAR 0 5
8303: PUSH
8304: LD_INT 18900
8306: PUSH
8307: LD_INT 14700
8309: PUSH
8310: LD_INT 12600
8312: PUSH
8313: EMPTY
8314: LIST
8315: LIST
8316: LIST
8317: PUSH
8318: LD_OWVAR 67
8322: ARRAY
8323: ST_TO_ADDR
// count := [ 2 , 2 , 3 ] [ Difficulty ] ;
8324: LD_ADDR_VAR 0 6
8328: PUSH
8329: LD_INT 2
8331: PUSH
8332: LD_INT 2
8334: PUSH
8335: LD_INT 3
8337: PUSH
8338: EMPTY
8339: LIST
8340: LIST
8341: LIST
8342: PUSH
8343: LD_OWVAR 67
8347: ARRAY
8348: ST_TO_ADDR
// for i = 1 to count do
8349: LD_ADDR_VAR 0 1
8353: PUSH
8354: DOUBLE
8355: LD_INT 1
8357: DEC
8358: ST_TO_ADDR
8359: LD_VAR 0 6
8363: PUSH
8364: FOR_TO
8365: IFFALSE 8545
// begin wait ( time ) ;
8367: LD_VAR 0 5
8371: PPUSH
8372: CALL_OW 67
// for j = 1 to rand ( 1 , Difficulty ) do
8376: LD_ADDR_VAR 0 2
8380: PUSH
8381: DOUBLE
8382: LD_INT 1
8384: DEC
8385: ST_TO_ADDR
8386: LD_INT 1
8388: PPUSH
8389: LD_OWVAR 67
8393: PPUSH
8394: CALL_OW 12
8398: PUSH
8399: FOR_TO
8400: IFFALSE 8541
// begin veh := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_machine_gun ] [ i mod 3 + 1 ] , 80 ) ;
8402: LD_ADDR_VAR 0 4
8406: PUSH
8407: LD_INT 3
8409: PPUSH
8410: LD_INT 3
8412: PPUSH
8413: LD_INT 22
8415: PPUSH
8416: LD_INT 1
8418: PPUSH
8419: LD_INT 1
8421: PPUSH
8422: LD_INT 43
8424: PUSH
8425: LD_INT 44
8427: PUSH
8428: LD_INT 42
8430: PUSH
8431: EMPTY
8432: LIST
8433: LIST
8434: LIST
8435: PUSH
8436: LD_VAR 0 1
8440: PUSH
8441: LD_INT 3
8443: MOD
8444: PUSH
8445: LD_INT 1
8447: PLUS
8448: ARRAY
8449: PPUSH
8450: LD_INT 80
8452: PPUSH
8453: CALL 563 0 7
8457: ST_TO_ADDR
// PlaceUnitArea ( veh , southArea , false ) ;
8458: LD_VAR 0 4
8462: PPUSH
8463: LD_INT 13
8465: PPUSH
8466: LD_INT 0
8468: PPUSH
8469: CALL_OW 49
// PrepareHuman ( false , 3 , [ 4 , 5 , 5 ] [ Difficulty ] ) ;
8473: LD_INT 0
8475: PPUSH
8476: LD_INT 3
8478: PPUSH
8479: LD_INT 4
8481: PUSH
8482: LD_INT 5
8484: PUSH
8485: LD_INT 5
8487: PUSH
8488: EMPTY
8489: LIST
8490: LIST
8491: LIST
8492: PUSH
8493: LD_OWVAR 67
8497: ARRAY
8498: PPUSH
8499: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
8503: CALL_OW 44
8507: PPUSH
8508: LD_VAR 0 4
8512: PPUSH
8513: CALL_OW 52
// wait ( 0 0$01 ) ;
8517: LD_INT 35
8519: PPUSH
8520: CALL_OW 67
// ComMoveXY ( veh , 143 , 143 ) ;
8524: LD_VAR 0 4
8528: PPUSH
8529: LD_INT 143
8531: PPUSH
8532: LD_INT 143
8534: PPUSH
8535: CALL_OW 111
// end ;
8539: GO 8399
8541: POP
8542: POP
// end ;
8543: GO 8364
8545: POP
8546: POP
// end ;
8547: PPOPN 6
8549: END
// every 8 8$00 do var i , un , time ;
8550: GO 8552
8552: DISABLE
8553: LD_INT 0
8555: PPUSH
8556: PPUSH
8557: PPUSH
// begin time := [ 3 3$00 , 1 1$00 , 0 0$30 ] ;
8558: LD_ADDR_VAR 0 3
8562: PUSH
8563: LD_INT 6300
8565: PUSH
8566: LD_INT 2100
8568: PUSH
8569: LD_INT 1050
8571: PUSH
8572: EMPTY
8573: LIST
8574: LIST
8575: LIST
8576: ST_TO_ADDR
// wait ( time ) ;
8577: LD_VAR 0 3
8581: PPUSH
8582: CALL_OW 67
// uc_side := 3 ;
8586: LD_ADDR_OWVAR 20
8590: PUSH
8591: LD_INT 3
8593: ST_TO_ADDR
// uc_nation := 3 ;
8594: LD_ADDR_OWVAR 21
8598: PUSH
8599: LD_INT 3
8601: ST_TO_ADDR
// for i = 1 to 2 do
8602: LD_ADDR_VAR 0 1
8606: PUSH
8607: DOUBLE
8608: LD_INT 1
8610: DEC
8611: ST_TO_ADDR
8612: LD_INT 2
8614: PUSH
8615: FOR_TO
8616: IFFALSE 8679
// begin PrepareHuman ( false , 1 , 4 ) ;
8618: LD_INT 0
8620: PPUSH
8621: LD_INT 1
8623: PPUSH
8624: LD_INT 4
8626: PPUSH
8627: CALL_OW 380
// un := CreateHuman ;
8631: LD_ADDR_VAR 0 2
8635: PUSH
8636: CALL_OW 44
8640: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_dep_main ) ;
8641: LD_VAR 0 2
8645: PPUSH
8646: LD_INT 16
8648: PPUSH
8649: CALL_OW 52
// ComExitBuilding ( un ) ;
8653: LD_VAR 0 2
8657: PPUSH
8658: CALL_OW 122
// AddComAgressiveMove ( un , 41 , 76 ) ;
8662: LD_VAR 0 2
8666: PPUSH
8667: LD_INT 41
8669: PPUSH
8670: LD_INT 76
8672: PPUSH
8673: CALL_OW 174
// end ;
8677: GO 8615
8679: POP
8680: POP
// end ; end_of_file
8681: PPOPN 3
8683: END
// export function Action ; begin
8684: LD_INT 0
8686: PPUSH
// CenterNowOnXY ( 28 , 3 ) ;
8687: LD_INT 28
8689: PPUSH
8690: LD_INT 3
8692: PPUSH
8693: CALL_OW 86
// PlaceSeeing ( 41 , 76 , 1 , 10 ) ;
8697: LD_INT 41
8699: PPUSH
8700: LD_INT 76
8702: PPUSH
8703: LD_INT 1
8705: PPUSH
8706: LD_INT 10
8708: PPUSH
8709: CALL_OW 330
// RemoveSeeing ( 41 , 76 , 1 ) ;
8713: LD_INT 41
8715: PPUSH
8716: LD_INT 76
8718: PPUSH
8719: LD_INT 1
8721: PPUSH
8722: CALL_OW 331
// InGameOn ;
8726: CALL_OW 8
// SayRadio ( Harisson , D2-Har-1 ) ;
8730: LD_EXP 19
8734: PPUSH
8735: LD_STRING D2-Har-1
8737: PPUSH
8738: CALL_OW 94
// InGameOff ;
8742: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
8746: LD_STRING M1
8748: PPUSH
8749: CALL_OW 337
// end ;
8753: LD_VAR 0 1
8757: RET
// every 0 0$1 trigger buildings_counter > 1 do var un ;
8758: LD_EXP 4
8762: PUSH
8763: LD_INT 1
8765: GREATER
8766: IFFALSE 8857
8768: GO 8770
8770: DISABLE
8771: LD_INT 0
8773: PPUSH
// begin un := GetRandom ( sex_male ) [ 1 ] ;
8774: LD_ADDR_VAR 0 1
8778: PUSH
8779: LD_INT 1
8781: PPUSH
8782: CALL 651 0 1
8786: PUSH
8787: LD_INT 1
8789: ARRAY
8790: ST_TO_ADDR
// Say ( un , D2a-Sol1-1 ) ;
8791: LD_VAR 0 1
8795: PPUSH
8796: LD_STRING D2a-Sol1-1
8798: PPUSH
8799: CALL_OW 88
// if not un then
8803: LD_VAR 0 1
8807: NOT
8808: IFFALSE 8839
// begin un := GetRandom ( sex_female ) [ 1 ] ;
8810: LD_ADDR_VAR 0 1
8814: PUSH
8815: LD_INT 2
8817: PPUSH
8818: CALL 651 0 1
8822: PUSH
8823: LD_INT 1
8825: ARRAY
8826: ST_TO_ADDR
// Say ( un , D2a-FSol1-1 ) ;
8827: LD_VAR 0 1
8831: PPUSH
8832: LD_STRING D2a-FSol1-1
8834: PPUSH
8835: CALL_OW 88
// end ; if Khatam then
8839: LD_EXP 17
8843: IFFALSE 8857
// Say ( Khatam , D3b-Khat-3 ) ;
8845: LD_EXP 17
8849: PPUSH
8850: LD_STRING D3b-Khat-3
8852: PPUSH
8853: CALL_OW 88
// end ;
8857: PPOPN 1
8859: END
// every 0 0$1 trigger Frank and not Kikuchi and FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , GetX ( Frank ) , GetY ( Frank ) , 7 ] ] ) and not InBattle ( 1 ) do var i , ape ;
8860: LD_EXP 15
8864: PUSH
8865: LD_EXP 18
8869: NOT
8870: AND
8871: PUSH
8872: LD_INT 22
8874: PUSH
8875: LD_INT 1
8877: PUSH
8878: EMPTY
8879: LIST
8880: LIST
8881: PUSH
8882: LD_INT 92
8884: PUSH
8885: LD_EXP 15
8889: PPUSH
8890: CALL_OW 250
8894: PUSH
8895: LD_EXP 15
8899: PPUSH
8900: CALL_OW 251
8904: PUSH
8905: LD_INT 7
8907: PUSH
8908: EMPTY
8909: LIST
8910: LIST
8911: LIST
8912: LIST
8913: PUSH
8914: EMPTY
8915: LIST
8916: LIST
8917: PPUSH
8918: CALL_OW 69
8922: AND
8923: PUSH
8924: LD_INT 1
8926: PPUSH
8927: CALL_OW 463
8931: NOT
8932: AND
8933: IFFALSE 9520
8935: GO 8937
8937: DISABLE
8938: LD_INT 0
8940: PPUSH
8941: PPUSH
// begin InGameOn ;
8942: CALL_OW 8
// ape := FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) ;
8946: LD_ADDR_VAR 0 2
8950: PUSH
8951: LD_INT 22
8953: PUSH
8954: LD_INT 0
8956: PUSH
8957: EMPTY
8958: LIST
8959: LIST
8960: PUSH
8961: LD_INT 25
8963: PUSH
8964: LD_INT 12
8966: PUSH
8967: EMPTY
8968: LIST
8969: LIST
8970: PUSH
8971: EMPTY
8972: LIST
8973: LIST
8974: PPUSH
8975: CALL_OW 69
8979: ST_TO_ADDR
// ape := NearestUnitToUnit ( ape , Frank ) ;
8980: LD_ADDR_VAR 0 2
8984: PUSH
8985: LD_VAR 0 2
8989: PPUSH
8990: LD_EXP 15
8994: PPUSH
8995: CALL_OW 74
8999: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_dist , Frank , 20 ] ] ) do
9000: LD_ADDR_VAR 0 1
9004: PUSH
9005: LD_INT 22
9007: PUSH
9008: LD_INT 1
9010: PUSH
9011: EMPTY
9012: LIST
9013: LIST
9014: PUSH
9015: LD_INT 21
9017: PUSH
9018: LD_INT 1
9020: PUSH
9021: EMPTY
9022: LIST
9023: LIST
9024: PUSH
9025: LD_INT 91
9027: PUSH
9028: LD_EXP 15
9032: PUSH
9033: LD_INT 20
9035: PUSH
9036: EMPTY
9037: LIST
9038: LIST
9039: LIST
9040: PUSH
9041: EMPTY
9042: LIST
9043: LIST
9044: LIST
9045: PPUSH
9046: CALL_OW 69
9050: PUSH
9051: FOR_IN
9052: IFFALSE 9070
// ComTurnUnit ( i , Frank ) ;
9054: LD_VAR 0 1
9058: PPUSH
9059: LD_EXP 15
9063: PPUSH
9064: CALL_OW 119
9068: GO 9051
9070: POP
9071: POP
// SetSide ( Frank , 1 ) ;
9072: LD_EXP 15
9076: PPUSH
9077: LD_INT 1
9079: PPUSH
9080: CALL_OW 235
// ComMoveUnit ( JMM , Frank ) ;
9084: LD_EXP 9
9088: PPUSH
9089: LD_EXP 15
9093: PPUSH
9094: CALL_OW 112
// AddComTurnUnit ( JMM , Frank ) ;
9098: LD_EXP 9
9102: PPUSH
9103: LD_EXP 15
9107: PPUSH
9108: CALL_OW 179
// CenterOnUnits ( Frank ) ;
9112: LD_EXP 15
9116: PPUSH
9117: CALL_OW 85
// Say ( Frank , D3a-Frank-1 ) ;
9121: LD_EXP 15
9125: PPUSH
9126: LD_STRING D3a-Frank-1
9128: PPUSH
9129: CALL_OW 88
// ComMoveXY ( ape , 42 , 78 ) ;
9133: LD_VAR 0 2
9137: PPUSH
9138: LD_INT 42
9140: PPUSH
9141: LD_INT 78
9143: PPUSH
9144: CALL_OW 111
// AddComTurnUnit ( ape , Frank ) ;
9148: LD_VAR 0 2
9152: PPUSH
9153: LD_EXP 15
9157: PPUSH
9158: CALL_OW 179
// if Lisa then
9162: LD_EXP 14
9166: IFFALSE 9180
// Say ( Lisa , D3a-Lisa-1 ) ;
9168: LD_EXP 14
9172: PPUSH
9173: LD_STRING D3a-Lisa-1
9175: PPUSH
9176: CALL_OW 88
// Say ( JMM , D3a-JMM-1 ) ;
9180: LD_EXP 9
9184: PPUSH
9185: LD_STRING D3a-JMM-1
9187: PPUSH
9188: CALL_OW 88
// if Cyrus then
9192: LD_EXP 13
9196: IFFALSE 9210
// Say ( Cyrus , D3a-Cyrus-1 ) ;
9198: LD_EXP 13
9202: PPUSH
9203: LD_STRING D3a-Cyrus-1
9205: PPUSH
9206: CALL_OW 88
// if GetRandom ( sex_male ) then
9210: LD_INT 1
9212: PPUSH
9213: CALL 651 0 1
9217: IFFALSE 9238
// Say ( GetRandom ( sex_male ) [ 1 ] , D3a-Sol1-1 ) ;
9219: LD_INT 1
9221: PPUSH
9222: CALL 651 0 1
9226: PUSH
9227: LD_INT 1
9229: ARRAY
9230: PPUSH
9231: LD_STRING D3a-Sol1-1
9233: PPUSH
9234: CALL_OW 88
// if GetRandom ( sex_female ) then
9238: LD_INT 2
9240: PPUSH
9241: CALL 651 0 1
9245: IFFALSE 9266
// Say ( GetRandom ( sex_female ) [ 1 ] , D3a-FSol1-1 ) ;
9247: LD_INT 2
9249: PPUSH
9250: CALL 651 0 1
9254: PUSH
9255: LD_INT 1
9257: ARRAY
9258: PPUSH
9259: LD_STRING D3a-FSol1-1
9261: PPUSH
9262: CALL_OW 88
// if Gladstone then
9266: LD_EXP 16
9270: IFFALSE 9284
// Say ( Gladstone , D3a-Glad-1 ) ;
9272: LD_EXP 16
9276: PPUSH
9277: LD_STRING D3a-Glad-1
9279: PPUSH
9280: CALL_OW 88
// ComMoveXY ( ape , 60 , 113 ) ;
9284: LD_VAR 0 2
9288: PPUSH
9289: LD_INT 60
9291: PPUSH
9292: LD_INT 113
9294: PPUSH
9295: CALL_OW 111
// Say ( Frank , D3a-Frank-2 ) ;
9299: LD_EXP 15
9303: PPUSH
9304: LD_STRING D3a-Frank-2
9306: PPUSH
9307: CALL_OW 88
// ComTurnUnit ( Frank , JMM ) ;
9311: LD_EXP 15
9315: PPUSH
9316: LD_EXP 9
9320: PPUSH
9321: CALL_OW 119
// Say ( JMM , D3a-JMM-2 ) ;
9325: LD_EXP 9
9329: PPUSH
9330: LD_STRING D3a-JMM-2
9332: PPUSH
9333: CALL_OW 88
// RevealFogArea ( 1 , spotArea ) ;
9337: LD_INT 1
9339: PPUSH
9340: LD_INT 4
9342: PPUSH
9343: CALL_OW 332
// CenterOnXY ( 85 , 134 ) ;
9347: LD_INT 85
9349: PPUSH
9350: LD_INT 134
9352: PPUSH
9353: CALL_OW 84
// Say ( Frank , D3a-Frank-3 ) ;
9357: LD_EXP 15
9361: PPUSH
9362: LD_STRING D3a-Frank-3
9364: PPUSH
9365: CALL_OW 88
// Wait ( 0 0$01 ) ;
9369: LD_INT 35
9371: PPUSH
9372: CALL_OW 67
// CenterOnXY ( 166 , 136 ) ;
9376: LD_INT 166
9378: PPUSH
9379: LD_INT 136
9381: PPUSH
9382: CALL_OW 84
// Say ( JMM , D3a-JMM-3 ) ;
9386: LD_EXP 9
9390: PPUSH
9391: LD_STRING D3a-JMM-3
9393: PPUSH
9394: CALL_OW 88
// Wait ( 0 0$01 ) ;
9398: LD_INT 35
9400: PPUSH
9401: CALL_OW 67
// CenterNowOnUnits ( Frank ) ;
9405: LD_EXP 15
9409: PPUSH
9410: CALL_OW 87
// Say ( Frank , D3a-Frank-4 ) ;
9414: LD_EXP 15
9418: PPUSH
9419: LD_STRING D3a-Frank-4
9421: PPUSH
9422: CALL_OW 88
// if Lisa then
9426: LD_EXP 14
9430: IFFALSE 9444
// Say ( Lisa , D3a-Lisa-4 ) ;
9432: LD_EXP 14
9436: PPUSH
9437: LD_STRING D3a-Lisa-4
9439: PPUSH
9440: CALL_OW 88
// Say ( JMM , D3a-JMM-4 ) ;
9444: LD_EXP 9
9448: PPUSH
9449: LD_STRING D3a-JMM-4
9451: PPUSH
9452: CALL_OW 88
// Say ( Frank , D3a-Frank-5 ) ;
9456: LD_EXP 15
9460: PPUSH
9461: LD_STRING D3a-Frank-5
9463: PPUSH
9464: CALL_OW 88
// Say ( JMM , D3a-JMM-5 ) ;
9468: LD_EXP 9
9472: PPUSH
9473: LD_STRING D3a-JMM-5
9475: PPUSH
9476: CALL_OW 88
// Say ( Frank , D3a-Frank-6 ) ;
9480: LD_EXP 15
9484: PPUSH
9485: LD_STRING D3a-Frank-6
9487: PPUSH
9488: CALL_OW 88
// Say ( JMM , D3a-JMM-6 ) ;
9492: LD_EXP 9
9496: PPUSH
9497: LD_STRING D3a-JMM-6
9499: PPUSH
9500: CALL_OW 88
// Say ( Frank , D3a-Frank-7 ) ;
9504: LD_EXP 15
9508: PPUSH
9509: LD_STRING D3a-Frank-7
9511: PPUSH
9512: CALL_OW 88
// InGameOff ;
9516: CALL_OW 9
// end ;
9520: PPOPN 2
9522: END
// every 0 0$1 trigger Kikuchi and not Frank and FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , GetX ( Kikuchi ) , GetY ( Kikuchi ) , 7 ] ] ) and not InBattle ( 1 ) do
9523: LD_EXP 18
9527: PUSH
9528: LD_EXP 15
9532: NOT
9533: AND
9534: PUSH
9535: LD_INT 22
9537: PUSH
9538: LD_INT 1
9540: PUSH
9541: EMPTY
9542: LIST
9543: LIST
9544: PUSH
9545: LD_INT 92
9547: PUSH
9548: LD_EXP 18
9552: PPUSH
9553: CALL_OW 250
9557: PUSH
9558: LD_EXP 18
9562: PPUSH
9563: CALL_OW 251
9567: PUSH
9568: LD_INT 7
9570: PUSH
9571: EMPTY
9572: LIST
9573: LIST
9574: LIST
9575: LIST
9576: PUSH
9577: EMPTY
9578: LIST
9579: LIST
9580: PPUSH
9581: CALL_OW 69
9585: AND
9586: PUSH
9587: LD_INT 1
9589: PPUSH
9590: CALL_OW 463
9594: NOT
9595: AND
9596: IFFALSE 9776
9598: GO 9600
9600: DISABLE
// begin InGameOn ;
9601: CALL_OW 8
// ComTurnUnit ( JMM , Kikuchi ) ;
9605: LD_EXP 9
9609: PPUSH
9610: LD_EXP 18
9614: PPUSH
9615: CALL_OW 119
// ComTurnUnit ( Kikuchi , JMM ) ;
9619: LD_EXP 18
9623: PPUSH
9624: LD_EXP 9
9628: PPUSH
9629: CALL_OW 119
// CenterOnUnits ( Kikuchi ) ;
9633: LD_EXP 18
9637: PPUSH
9638: CALL_OW 85
// Say ( Kikuchi , D3b-Yam-1 ) ;
9642: LD_EXP 18
9646: PPUSH
9647: LD_STRING D3b-Yam-1
9649: PPUSH
9650: CALL_OW 88
// Say ( JMM , D3b-JMM-1 ) ;
9654: LD_EXP 9
9658: PPUSH
9659: LD_STRING D3b-JMM-1
9661: PPUSH
9662: CALL_OW 88
// RevealFogArea ( 1 , spotArea ) ;
9666: LD_INT 1
9668: PPUSH
9669: LD_INT 4
9671: PPUSH
9672: CALL_OW 332
// CenterOnXY ( 85 , 134 ) ;
9676: LD_INT 85
9678: PPUSH
9679: LD_INT 134
9681: PPUSH
9682: CALL_OW 84
// Say ( Kikuchi , D3b-Yam-2 ) ;
9686: LD_EXP 18
9690: PPUSH
9691: LD_STRING D3b-Yam-2
9693: PPUSH
9694: CALL_OW 88
// Wait ( 0 0$01 ) ;
9698: LD_INT 35
9700: PPUSH
9701: CALL_OW 67
// Say ( JMM , D3b-JMM-2 ) ;
9705: LD_EXP 9
9709: PPUSH
9710: LD_STRING D3b-JMM-2
9712: PPUSH
9713: CALL_OW 88
// CenterOnXY ( 166 , 136 ) ;
9717: LD_INT 166
9719: PPUSH
9720: LD_INT 136
9722: PPUSH
9723: CALL_OW 84
// Say ( Kikuchi , D3b-Yam-3 ) ;
9727: LD_EXP 18
9731: PPUSH
9732: LD_STRING D3b-Yam-3
9734: PPUSH
9735: CALL_OW 88
// CenterNowOnUnits ( JMM ) ;
9739: LD_EXP 9
9743: PPUSH
9744: CALL_OW 87
// Say ( JMM , D3b-JMM-3a ) ;
9748: LD_EXP 9
9752: PPUSH
9753: LD_STRING D3b-JMM-3a
9755: PPUSH
9756: CALL_OW 88
// SetSide ( Kikuchi , 1 ) ;
9760: LD_EXP 18
9764: PPUSH
9765: LD_INT 1
9767: PPUSH
9768: CALL_OW 235
// InGameOff ;
9772: CALL_OW 9
// end ;
9776: END
// every 0 0$1 trigger FilterUnitsInArea ( massDamageArea , [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] ] ) do var un , x , tw , i ;
9777: LD_INT 7
9779: PPUSH
9780: LD_INT 22
9782: PUSH
9783: LD_INT 1
9785: PUSH
9786: EMPTY
9787: LIST
9788: LIST
9789: PUSH
9790: LD_INT 3
9792: PUSH
9793: LD_INT 24
9795: PUSH
9796: LD_INT 1000
9798: PUSH
9799: EMPTY
9800: LIST
9801: LIST
9802: PUSH
9803: EMPTY
9804: LIST
9805: LIST
9806: PUSH
9807: EMPTY
9808: LIST
9809: LIST
9810: PPUSH
9811: CALL_OW 70
9815: IFFALSE 10271
9817: GO 9819
9819: DISABLE
9820: LD_INT 0
9822: PPUSH
9823: PPUSH
9824: PPUSH
9825: PPUSH
// begin repeat wait ( 0 0$1 ) ;
9826: LD_INT 35
9828: PPUSH
9829: CALL_OW 67
// un := FilterUnitsInArea ( massDamageArea , [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
9833: LD_ADDR_VAR 0 1
9837: PUSH
9838: LD_INT 7
9840: PPUSH
9841: LD_INT 22
9843: PUSH
9844: LD_INT 1
9846: PUSH
9847: EMPTY
9848: LIST
9849: LIST
9850: PUSH
9851: LD_INT 3
9853: PUSH
9854: LD_INT 24
9856: PUSH
9857: LD_INT 1000
9859: PUSH
9860: EMPTY
9861: LIST
9862: LIST
9863: PUSH
9864: EMPTY
9865: LIST
9866: LIST
9867: PUSH
9868: EMPTY
9869: LIST
9870: LIST
9871: PPUSH
9872: CALL_OW 70
9876: ST_TO_ADDR
// if not un then
9877: LD_VAR 0 1
9881: NOT
9882: IFFALSE 9886
// continue ;
9884: GO 9826
// tw := NearbyTowerHasEnergy ( un [ 1 ] ) ;
9886: LD_ADDR_VAR 0 3
9890: PUSH
9891: LD_VAR 0 1
9895: PUSH
9896: LD_INT 1
9898: ARRAY
9899: PPUSH
9900: CALL 3548 0 1
9904: ST_TO_ADDR
// until tw ;
9905: LD_VAR 0 3
9909: IFFALSE 9826
// DialogueOn ;
9911: CALL_OW 6
// CenterNowOnUnits ( tw ) ;
9915: LD_VAR 0 3
9919: PPUSH
9920: CALL_OW 87
// if Lisa then
9924: LD_EXP 14
9928: IFFALSE 9956
// begin Say ( Lisa , D5-Lisa-1 ) ;
9930: LD_EXP 14
9934: PPUSH
9935: LD_STRING D5-Lisa-1
9937: PPUSH
9938: CALL_OW 88
// Say ( JMM , D5-JMM-1a ) ;
9942: LD_EXP 9
9946: PPUSH
9947: LD_STRING D5-JMM-1a
9949: PPUSH
9950: CALL_OW 88
// end else
9954: GO 9968
// Say ( JMM , D5-JMM-1 ) ;
9956: LD_EXP 9
9960: PPUSH
9961: LD_STRING D5-JMM-1
9963: PPUSH
9964: CALL_OW 88
// DialogueOff ;
9968: CALL_OW 7
// while ( true ) do
9972: LD_INT 1
9974: IFFALSE 10030
// begin wait ( 0 0$01 ) ;
9976: LD_INT 35
9978: PPUSH
9979: CALL_OW 67
// x := FilterUnitsExceptArea ( northElectro , [ [ f_btype , b_oil_power ] , [ f_see , 1 ] ] ) ;
9983: LD_ADDR_VAR 0 2
9987: PUSH
9988: LD_INT 8
9990: PPUSH
9991: LD_INT 30
9993: PUSH
9994: LD_INT 26
9996: PUSH
9997: EMPTY
9998: LIST
9999: LIST
10000: PUSH
10001: LD_INT 101
10003: PUSH
10004: LD_INT 1
10006: PUSH
10007: EMPTY
10008: LIST
10009: LIST
10010: PUSH
10011: EMPTY
10012: LIST
10013: LIST
10014: PPUSH
10015: CALL_OW 71
10019: ST_TO_ADDR
// if x then
10020: LD_VAR 0 2
10024: IFFALSE 10028
// break ;
10026: GO 10030
// end ;
10028: GO 9972
// CenterOnUnits ( x [ 1 ] ) ;
10030: LD_VAR 0 2
10034: PUSH
10035: LD_INT 1
10037: ARRAY
10038: PPUSH
10039: CALL_OW 85
// if Frank and GetSide ( Frank ) = 1 then
10043: LD_EXP 15
10047: PUSH
10048: LD_EXP 15
10052: PPUSH
10053: CALL_OW 255
10057: PUSH
10058: LD_INT 1
10060: EQUAL
10061: AND
10062: IFFALSE 10078
// Say ( Frank , D5a-Frank-1 ) else
10064: LD_EXP 15
10068: PPUSH
10069: LD_STRING D5a-Frank-1
10071: PPUSH
10072: CALL_OW 88
10076: GO 10132
// if Kikuchi and GetSide ( Kikuchi ) = 1 then
10078: LD_EXP 18
10082: PUSH
10083: LD_EXP 18
10087: PPUSH
10088: CALL_OW 255
10092: PUSH
10093: LD_INT 1
10095: EQUAL
10096: AND
10097: IFFALSE 10113
// Say ( Kikuchi , D5a-Yam-1 ) else
10099: LD_EXP 18
10103: PPUSH
10104: LD_STRING D5a-Yam-1
10106: PPUSH
10107: CALL_OW 88
10111: GO 10132
// Say ( GetRandom ( sex_male ) [ 1 ] , D5a-Sol1-1 ) ;
10113: LD_INT 1
10115: PPUSH
10116: CALL 651 0 1
10120: PUSH
10121: LD_INT 1
10123: ARRAY
10124: PPUSH
10125: LD_STRING D5a-Sol1-1
10127: PPUSH
10128: CALL_OW 88
// Say ( JMM , D5a-JMM-1 ) ;
10132: LD_EXP 9
10136: PPUSH
10137: LD_STRING D5a-JMM-1
10139: PPUSH
10140: CALL_OW 88
// if Cyrus then
10144: LD_EXP 13
10148: IFFALSE 10162
// Say ( Cyrus , D5a-Cyrus-1 ) ;
10150: LD_EXP 13
10154: PPUSH
10155: LD_STRING D5a-Cyrus-1
10157: PPUSH
10158: CALL_OW 88
// x := false ;
10162: LD_ADDR_VAR 0 2
10166: PUSH
10167: LD_INT 0
10169: ST_TO_ADDR
// while ( true ) do
10170: LD_INT 1
10172: IFFALSE 10259
// begin wait ( 0 0$01 ) ;
10174: LD_INT 35
10176: PPUSH
10177: CALL_OW 67
// for i in FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) diff ru_dep_west do
10181: LD_ADDR_VAR 0 4
10185: PUSH
10186: LD_INT 2
10188: PUSH
10189: LD_INT 30
10191: PUSH
10192: LD_INT 0
10194: PUSH
10195: EMPTY
10196: LIST
10197: LIST
10198: PUSH
10199: LD_INT 30
10201: PUSH
10202: LD_INT 1
10204: PUSH
10205: EMPTY
10206: LIST
10207: LIST
10208: PUSH
10209: EMPTY
10210: LIST
10211: LIST
10212: LIST
10213: PPUSH
10214: CALL_OW 69
10218: PUSH
10219: LD_INT 1
10221: DIFF
10222: PUSH
10223: FOR_IN
10224: IFFALSE 10247
// if BaseNeedEnergy ( i ) then
10226: LD_VAR 0 4
10230: PPUSH
10231: CALL 2673 0 1
10235: IFFALSE 10245
// x := true ;
10237: LD_ADDR_VAR 0 2
10241: PUSH
10242: LD_INT 1
10244: ST_TO_ADDR
10245: GO 10223
10247: POP
10248: POP
// if x then
10249: LD_VAR 0 2
10253: IFFALSE 10257
// break ;
10255: GO 10259
// end ;
10257: GO 10170
// Say ( JMM , D5b-JMM-1 ) ;
10259: LD_EXP 9
10263: PPUSH
10264: LD_STRING D5b-JMM-1
10266: PPUSH
10267: CALL_OW 88
// end ;
10271: PPOPN 4
10273: END
// every 0 0$1 trigger time_to_end [ 1 ] < tick do
10274: LD_EXP 5
10278: PUSH
10279: LD_INT 1
10281: ARRAY
10282: PUSH
10283: LD_OWVAR 1
10287: LESS
10288: IFFALSE 10488
10290: GO 10292
10292: DISABLE
// begin if not IsDead ( ru_dep_main ) then
10293: LD_INT 16
10295: PPUSH
10296: CALL_OW 301
10300: NOT
10301: IFFALSE 10324
// begin SayRadio ( Harisson , D3b-Har-3 ) ;
10303: LD_EXP 19
10307: PPUSH
10308: LD_STRING D3b-Har-3
10310: PPUSH
10311: CALL_OW 94
// ChangeMissionObjectives ( M2a ) ;
10315: LD_STRING M2a
10317: PPUSH
10318: CALL_OW 337
// end else
10322: GO 10343
// begin SayRadio ( Harisson , D3b-Har-3a ) ;
10324: LD_EXP 19
10328: PPUSH
10329: LD_STRING D3b-Har-3a
10331: PPUSH
10332: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
10336: LD_STRING M2
10338: PPUSH
10339: CALL_OW 337
// end ; can_end := true ;
10343: LD_ADDR_EXP 6
10347: PUSH
10348: LD_INT 1
10350: ST_TO_ADDR
// SetAreaMapShow ( endArea , 1 ) ;
10351: LD_INT 9
10353: PPUSH
10354: LD_INT 1
10356: PPUSH
10357: CALL_OW 424
// Wait ( 0 0$02 ) ;
10361: LD_INT 70
10363: PPUSH
10364: CALL_OW 67
// if Lisa then
10368: LD_EXP 14
10372: IFFALSE 10386
// Say ( Lisa , D3b-Lisa ) ;
10374: LD_EXP 14
10378: PPUSH
10379: LD_STRING D3b-Lisa
10381: PPUSH
10382: CALL_OW 88
// if Bobby then
10386: LD_EXP 12
10390: IFFALSE 10404
// Say ( Bobby , D3b-Bobby-3 ) ;
10392: LD_EXP 12
10396: PPUSH
10397: LD_STRING D3b-Bobby-3
10399: PPUSH
10400: CALL_OW 88
// if Cyrus then
10404: LD_EXP 13
10408: IFFALSE 10422
// Say ( Cyrus , D3b-Cyrus-3 ) ;
10410: LD_EXP 13
10414: PPUSH
10415: LD_STRING D3b-Cyrus-3
10417: PPUSH
10418: CALL_OW 88
// if Frank and GetSide ( Frank ) = 1 then
10422: LD_EXP 15
10426: PUSH
10427: LD_EXP 15
10431: PPUSH
10432: CALL_OW 255
10436: PUSH
10437: LD_INT 1
10439: EQUAL
10440: AND
10441: IFFALSE 10455
// Say ( Frank , D3b-Frank-3 ) ;
10443: LD_EXP 15
10447: PPUSH
10448: LD_STRING D3b-Frank-3
10450: PPUSH
10451: CALL_OW 88
// if Kikuchi and GetSide ( Kikuchi ) = 1 then
10455: LD_EXP 18
10459: PUSH
10460: LD_EXP 18
10464: PPUSH
10465: CALL_OW 255
10469: PUSH
10470: LD_INT 1
10472: EQUAL
10473: AND
10474: IFFALSE 10488
// Say ( Kikuchi , D3b-Yam-4 ) ;
10476: LD_EXP 18
10480: PPUSH
10481: LD_STRING D3b-Yam-4
10483: PPUSH
10484: CALL_OW 88
// end ;
10488: END
// every 0 0$1 trigger time_to_end [ 2 ] < tick do
10489: LD_EXP 5
10493: PUSH
10494: LD_INT 2
10496: ARRAY
10497: PUSH
10498: LD_OWVAR 1
10502: LESS
10503: IFFALSE 10535
10505: GO 10507
10507: DISABLE
// begin SayRadio ( Harisson , D4-Har-1 ) ;
10508: LD_EXP 19
10512: PPUSH
10513: LD_STRING D4-Har-1
10515: PPUSH
10516: CALL_OW 94
// ChangeMissionObjectives ( M3 ) ;
10520: LD_STRING M3
10522: PPUSH
10523: CALL_OW 337
// must_end := true ;
10527: LD_ADDR_EXP 7
10531: PUSH
10532: LD_INT 1
10534: ST_TO_ADDR
// end ;
10535: END
// every 0 0$01 trigger time_to_end [ 3 ] < tick do
10536: LD_EXP 5
10540: PUSH
10541: LD_INT 3
10543: ARRAY
10544: PUSH
10545: LD_OWVAR 1
10549: LESS
10550: IFFALSE 10581
10552: GO 10554
10554: DISABLE
// begin if not IsDead ( ru_dep_main ) then
10555: LD_INT 16
10557: PPUSH
10558: CALL_OW 301
10562: NOT
10563: IFFALSE 10574
// YouLost ( TimeOut1 ) else
10565: LD_STRING TimeOut1
10567: PPUSH
10568: CALL_OW 104
10572: GO 10581
// YouLost ( TimeOut2 ) ;
10574: LD_STRING TimeOut2
10576: PPUSH
10577: CALL_OW 104
// end ;
10581: END
// every 0 0$1 trigger IsInArea ( JMM , endArea ) and can_end do var wait_on , i , tmp , m1 , m2 , m3 ;
10582: LD_EXP 9
10586: PPUSH
10587: LD_INT 9
10589: PPUSH
10590: CALL_OW 308
10594: PUSH
10595: LD_EXP 6
10599: AND
10600: IFFALSE 11700
10602: GO 10604
10604: DISABLE
10605: LD_INT 0
10607: PPUSH
10608: PPUSH
10609: PPUSH
10610: PPUSH
10611: PPUSH
10612: PPUSH
// begin wait_on := false ;
10613: LD_ADDR_VAR 0 1
10617: PUSH
10618: LD_INT 0
10620: ST_TO_ADDR
// if FilterPeople ( 1 ) + 0 > ( FilterPeopleArea ( 1 , endArea ) ^ FilterDriversArea ( 1 , endArea ) ) + 0 then
10621: LD_INT 1
10623: PPUSH
10624: CALL 2750 0 1
10628: PUSH
10629: LD_INT 0
10631: PLUS
10632: PUSH
10633: LD_INT 1
10635: PPUSH
10636: LD_INT 9
10638: PPUSH
10639: CALL 2841 0 2
10643: PUSH
10644: LD_INT 1
10646: PPUSH
10647: LD_INT 9
10649: PPUSH
10650: CALL 2888 0 2
10654: ADD
10655: PUSH
10656: LD_INT 0
10658: PLUS
10659: GREATER
10660: IFFALSE 10709
// case Query ( Q1 ) of 1 :
10662: LD_STRING Q1
10664: PPUSH
10665: CALL_OW 97
10669: PUSH
10670: LD_INT 1
10672: DOUBLE
10673: EQUAL
10674: IFTRUE 10678
10676: GO 10689
10678: POP
// wait_on := true ; 2 :
10679: LD_ADDR_VAR 0 1
10683: PUSH
10684: LD_INT 1
10686: ST_TO_ADDR
10687: GO 10709
10689: LD_INT 2
10691: DOUBLE
10692: EQUAL
10693: IFTRUE 10697
10695: GO 10708
10697: POP
// wait_on := false ; end ;
10698: LD_ADDR_VAR 0 1
10702: PUSH
10703: LD_INT 0
10705: ST_TO_ADDR
10706: GO 10709
10708: POP
// repeat wait ( 0 0$01 ) ;
10709: LD_INT 35
10711: PPUSH
10712: CALL_OW 67
// until ( not wait_on ) or ( FilterPeople ( 1 ) + 0 ) = ( FilterPeopleArea ( 1 , endArea ) ^ FilterDriversArea ( 1 , endArea ) ) + 0 ;
10716: LD_VAR 0 1
10720: NOT
10721: PUSH
10722: LD_INT 1
10724: PPUSH
10725: CALL 2750 0 1
10729: PUSH
10730: LD_INT 0
10732: PLUS
10733: PUSH
10734: LD_INT 1
10736: PPUSH
10737: LD_INT 9
10739: PPUSH
10740: CALL 2841 0 2
10744: PUSH
10745: LD_INT 1
10747: PPUSH
10748: LD_INT 9
10750: PPUSH
10751: CALL 2888 0 2
10755: ADD
10756: PUSH
10757: LD_INT 0
10759: PLUS
10760: EQUAL
10761: OR
10762: IFFALSE 10709
// DialogueOn ;
10764: CALL_OW 6
// CenterNowOnUnits ( JMM ) ;
10768: LD_EXP 9
10772: PPUSH
10773: CALL_OW 87
// Say ( JMM , D6-JMM-1 ) ;
10777: LD_EXP 9
10781: PPUSH
10782: LD_STRING D6-JMM-1
10784: PPUSH
10785: CALL_OW 88
// SayRadio ( Harisson , D6-Har-1 ) ;
10789: LD_EXP 19
10793: PPUSH
10794: LD_STRING D6-Har-1
10796: PPUSH
10797: CALL_OW 94
// Say ( JMM , D6-JMM-2 ) ;
10801: LD_EXP 9
10805: PPUSH
10806: LD_STRING D6-JMM-2
10808: PPUSH
10809: CALL_OW 88
// SayRadio ( Harisson , D6-Har-2 ) ;
10813: LD_EXP 19
10817: PPUSH
10818: LD_STRING D6-Har-2
10820: PPUSH
10821: CALL_OW 94
// Say ( JMM , D6-JMM-3 ) ;
10825: LD_EXP 9
10829: PPUSH
10830: LD_STRING D6-JMM-3
10832: PPUSH
10833: CALL_OW 88
// SayRadio ( Harisson , D6-Har-3 ) ;
10837: LD_EXP 19
10841: PPUSH
10842: LD_STRING D6-Har-3
10844: PPUSH
10845: CALL_OW 94
// Say ( JMM , D6-JMM-4 ) ;
10849: LD_EXP 9
10853: PPUSH
10854: LD_STRING D6-JMM-4
10856: PPUSH
10857: CALL_OW 88
// SayRadio ( Harisson , D6-Har-4 ) ;
10861: LD_EXP 19
10865: PPUSH
10866: LD_STRING D6-Har-4
10868: PPUSH
10869: CALL_OW 94
// Say ( JMM , D6-JMM-5 ) ;
10873: LD_EXP 9
10877: PPUSH
10878: LD_STRING D6-JMM-5
10880: PPUSH
10881: CALL_OW 88
// DialogueOff ;
10885: CALL_OW 7
// m1 := false ;
10889: LD_ADDR_VAR 0 4
10893: PUSH
10894: LD_INT 0
10896: ST_TO_ADDR
// m2 := false ;
10897: LD_ADDR_VAR 0 5
10901: PUSH
10902: LD_INT 0
10904: ST_TO_ADDR
// m3 := false ;
10905: LD_ADDR_VAR 0 6
10909: PUSH
10910: LD_INT 0
10912: ST_TO_ADDR
// tmp := FilterBuildings ( 3 ) ;
10913: LD_ADDR_VAR 0 3
10917: PUSH
10918: LD_INT 3
10920: PPUSH
10921: CALL 3019 0 1
10925: ST_TO_ADDR
// if tmp >= 35 then
10926: LD_VAR 0 3
10930: PUSH
10931: LD_INT 35
10933: GREATEREQUAL
10934: IFFALSE 10971
// begin AddMedal ( Destroy1 , - 1 ) ;
10936: LD_STRING Destroy1
10938: PPUSH
10939: LD_INT 1
10941: NEG
10942: PPUSH
10943: CALL_OW 101
// AddMedal ( Destroy2 , - 1 ) ;
10947: LD_STRING Destroy2
10949: PPUSH
10950: LD_INT 1
10952: NEG
10953: PPUSH
10954: CALL_OW 101
// AddMedal ( Destroy3 , - 1 ) ;
10958: LD_STRING Destroy3
10960: PPUSH
10961: LD_INT 1
10963: NEG
10964: PPUSH
10965: CALL_OW 101
// end else
10969: GO 11082
// begin AddMedal ( Destroy1 , 1 ) ;
10971: LD_STRING Destroy1
10973: PPUSH
10974: LD_INT 1
10976: PPUSH
10977: CALL_OW 101
// m1 := true ;
10981: LD_ADDR_VAR 0 4
10985: PUSH
10986: LD_INT 1
10988: ST_TO_ADDR
// if tmp >= 25 then
10989: LD_VAR 0 3
10993: PUSH
10994: LD_INT 25
10996: GREATEREQUAL
10997: IFFALSE 11023
// begin AddMedal ( Destroy2 , - 1 ) ;
10999: LD_STRING Destroy2
11001: PPUSH
11002: LD_INT 1
11004: NEG
11005: PPUSH
11006: CALL_OW 101
// AddMedal ( Destroy3 , - 1 ) ;
11010: LD_STRING Destroy3
11012: PPUSH
11013: LD_INT 1
11015: NEG
11016: PPUSH
11017: CALL_OW 101
// end else
11021: GO 11082
// begin AddMedal ( Destroy2 , 1 ) ;
11023: LD_STRING Destroy2
11025: PPUSH
11026: LD_INT 1
11028: PPUSH
11029: CALL_OW 101
// m2 := true ;
11033: LD_ADDR_VAR 0 5
11037: PUSH
11038: LD_INT 1
11040: ST_TO_ADDR
// if tmp >= 15 then
11041: LD_VAR 0 3
11045: PUSH
11046: LD_INT 15
11048: GREATEREQUAL
11049: IFFALSE 11064
// AddMedal ( Destroy3 , - 1 ) else
11051: LD_STRING Destroy3
11053: PPUSH
11054: LD_INT 1
11056: NEG
11057: PPUSH
11058: CALL_OW 101
11062: GO 11082
// begin AddMedal ( Destroy3 , 1 ) ;
11064: LD_STRING Destroy3
11066: PPUSH
11067: LD_INT 1
11069: PPUSH
11070: CALL_OW 101
// m3 := true ;
11074: LD_ADDR_VAR 0 6
11078: PUSH
11079: LD_INT 1
11081: ST_TO_ADDR
// end ; end ; end ; if tick <= 32 32$00 then
11082: LD_OWVAR 1
11086: PUSH
11087: LD_INT 67200
11089: LESSEQUAL
11090: IFFALSE 11099
// SetAchievement ( ACH_ASPEED_7 ) ;
11092: LD_STRING ACH_ASPEED_7
11094: PPUSH
11095: CALL_OW 543
// if m1 and m2 and m3 and Difficulty = 3 then
11099: LD_VAR 0 4
11103: PUSH
11104: LD_VAR 0 5
11108: AND
11109: PUSH
11110: LD_VAR 0 6
11114: AND
11115: PUSH
11116: LD_OWVAR 67
11120: PUSH
11121: LD_INT 3
11123: EQUAL
11124: AND
11125: IFFALSE 11137
// SetAchievementEX ( ACH_AMER , 7 ) ;
11127: LD_STRING ACH_AMER
11129: PPUSH
11130: LD_INT 7
11132: PPUSH
11133: CALL_OW 564
// GiveMedals ( MAIN ) ;
11137: LD_STRING MAIN
11139: PPUSH
11140: CALL_OW 102
// tmp := FilterPeopleArea ( 1 , endArea ) union FilterDriversArea ( 1 , endArea ) ;
11144: LD_ADDR_VAR 0 3
11148: PUSH
11149: LD_INT 1
11151: PPUSH
11152: LD_INT 9
11154: PPUSH
11155: CALL 2841 0 2
11159: PUSH
11160: LD_INT 1
11162: PPUSH
11163: LD_INT 9
11165: PPUSH
11166: CALL 2888 0 2
11170: UNION
11171: ST_TO_ADDR
// RewardPeople ( tmp ) ;
11172: LD_VAR 0 3
11176: PPUSH
11177: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
11181: LD_EXP 9
11185: PPUSH
11186: LD_EXP 3
11190: PUSH
11191: LD_STRING JMM
11193: STR
11194: PPUSH
11195: CALL_OW 38
// if Brown in tmp then
11199: LD_EXP 10
11203: PUSH
11204: LD_VAR 0 3
11208: IN
11209: IFFALSE 11229
// SaveCharacters ( Brown , mission_prefix & Brown ) ;
11211: LD_EXP 10
11215: PPUSH
11216: LD_EXP 3
11220: PUSH
11221: LD_STRING Brown
11223: STR
11224: PPUSH
11225: CALL_OW 38
// if Donaldson in tmp then
11229: LD_EXP 11
11233: PUSH
11234: LD_VAR 0 3
11238: IN
11239: IFFALSE 11259
// SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
11241: LD_EXP 11
11245: PPUSH
11246: LD_EXP 3
11250: PUSH
11251: LD_STRING Donaldson
11253: STR
11254: PPUSH
11255: CALL_OW 38
// if Bobby in tmp then
11259: LD_EXP 12
11263: PUSH
11264: LD_VAR 0 3
11268: IN
11269: IFFALSE 11289
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
11271: LD_EXP 12
11275: PPUSH
11276: LD_EXP 3
11280: PUSH
11281: LD_STRING Bobby
11283: STR
11284: PPUSH
11285: CALL_OW 38
// if Cyrus in tmp then
11289: LD_EXP 13
11293: PUSH
11294: LD_VAR 0 3
11298: IN
11299: IFFALSE 11319
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
11301: LD_EXP 13
11305: PPUSH
11306: LD_EXP 3
11310: PUSH
11311: LD_STRING Cyrus
11313: STR
11314: PPUSH
11315: CALL_OW 38
// if Lisa in tmp then
11319: LD_EXP 14
11323: PUSH
11324: LD_VAR 0 3
11328: IN
11329: IFFALSE 11349
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
11331: LD_EXP 14
11335: PPUSH
11336: LD_EXP 3
11340: PUSH
11341: LD_STRING Lisa
11343: STR
11344: PPUSH
11345: CALL_OW 38
// if Frank in tmp then
11349: LD_EXP 15
11353: PUSH
11354: LD_VAR 0 3
11358: IN
11359: IFFALSE 11379
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
11361: LD_EXP 15
11365: PPUSH
11366: LD_EXP 3
11370: PUSH
11371: LD_STRING Frank
11373: STR
11374: PPUSH
11375: CALL_OW 38
// if Gladstone in tmp then
11379: LD_EXP 16
11383: PUSH
11384: LD_VAR 0 3
11388: IN
11389: IFFALSE 11409
// SaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
11391: LD_EXP 16
11395: PPUSH
11396: LD_EXP 3
11400: PUSH
11401: LD_STRING Gladstone
11403: STR
11404: PPUSH
11405: CALL_OW 38
// if Khatam in tmp then
11409: LD_EXP 17
11413: PUSH
11414: LD_VAR 0 3
11418: IN
11419: IFFALSE 11439
// SaveCharacters ( Khatam , mission_prefix & Khatam ) ;
11421: LD_EXP 17
11425: PPUSH
11426: LD_EXP 3
11430: PUSH
11431: LD_STRING Khatam
11433: STR
11434: PPUSH
11435: CALL_OW 38
// if Kikuchi in tmp then
11439: LD_EXP 18
11443: PUSH
11444: LD_VAR 0 3
11448: IN
11449: IFFALSE 11469
// SaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
11451: LD_EXP 18
11455: PPUSH
11456: LD_EXP 3
11460: PUSH
11461: LD_STRING Kikuchi
11463: STR
11464: PPUSH
11465: CALL_OW 38
// SaveCharacters ( tmp diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam ] , mission_prefix & others ) ;
11469: LD_VAR 0 3
11473: PUSH
11474: LD_EXP 9
11478: PUSH
11479: LD_EXP 10
11483: PUSH
11484: LD_EXP 11
11488: PUSH
11489: LD_EXP 12
11493: PUSH
11494: LD_EXP 13
11498: PUSH
11499: LD_EXP 14
11503: PUSH
11504: LD_EXP 15
11508: PUSH
11509: LD_EXP 16
11513: PUSH
11514: LD_EXP 18
11518: PUSH
11519: LD_EXP 17
11523: PUSH
11524: EMPTY
11525: LIST
11526: LIST
11527: LIST
11528: LIST
11529: LIST
11530: LIST
11531: LIST
11532: LIST
11533: LIST
11534: LIST
11535: DIFF
11536: PPUSH
11537: LD_EXP 3
11541: PUSH
11542: LD_STRING others
11544: STR
11545: PPUSH
11546: CALL_OW 38
// SaveVariable ( tick , 07_time ) ;
11550: LD_OWVAR 1
11554: PPUSH
11555: LD_STRING 07_time
11557: PPUSH
11558: CALL_OW 39
// tmp := [ ] ;
11562: LD_ADDR_VAR 0 3
11566: PUSH
11567: EMPTY
11568: ST_TO_ADDR
// for i in FilterUnitsInArea ( endArea , [ [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_vehicle ] ] ] ) do
11569: LD_ADDR_VAR 0 2
11573: PUSH
11574: LD_INT 9
11576: PPUSH
11577: LD_INT 22
11579: PUSH
11580: LD_INT 1
11582: PUSH
11583: EMPTY
11584: LIST
11585: LIST
11586: PUSH
11587: LD_INT 23
11589: PUSH
11590: LD_INT 1
11592: PUSH
11593: EMPTY
11594: LIST
11595: LIST
11596: PUSH
11597: LD_INT 21
11599: PUSH
11600: LD_INT 2
11602: PUSH
11603: EMPTY
11604: LIST
11605: LIST
11606: PUSH
11607: EMPTY
11608: LIST
11609: LIST
11610: LIST
11611: PUSH
11612: EMPTY
11613: LIST
11614: PPUSH
11615: CALL_OW 70
11619: PUSH
11620: FOR_IN
11621: IFFALSE 11682
// tmp := tmp ^ [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ;
11623: LD_ADDR_VAR 0 3
11627: PUSH
11628: LD_VAR 0 3
11632: PUSH
11633: LD_VAR 0 2
11637: PPUSH
11638: CALL_OW 265
11642: PUSH
11643: LD_VAR 0 2
11647: PPUSH
11648: CALL_OW 262
11652: PUSH
11653: LD_VAR 0 2
11657: PPUSH
11658: CALL_OW 263
11662: PUSH
11663: LD_VAR 0 2
11667: PPUSH
11668: CALL_OW 264
11672: PUSH
11673: EMPTY
11674: LIST
11675: LIST
11676: LIST
11677: LIST
11678: ADD
11679: ST_TO_ADDR
11680: GO 11620
11682: POP
11683: POP
// SaveVariable ( tmp , 07_vehicles ) ;
11684: LD_VAR 0 3
11688: PPUSH
11689: LD_STRING 07_vehicles
11691: PPUSH
11692: CALL_OW 39
// YouWin ;
11696: CALL_OW 103
// end ; end_of_file
11700: PPOPN 6
11702: END
// on UnitDestroyed ( un ) do begin if un = JMM then
11703: LD_VAR 0 1
11707: PUSH
11708: LD_EXP 9
11712: EQUAL
11713: IFFALSE 11722
// YouLost ( JMM ) ;
11715: LD_STRING JMM
11717: PPUSH
11718: CALL_OW 104
// if GetType ( un ) = unit_building then
11722: LD_VAR 0 1
11726: PPUSH
11727: CALL_OW 247
11731: PUSH
11732: LD_INT 3
11734: EQUAL
11735: IFFALSE 11751
// buildings_counter := buildings_counter + 1 ;
11737: LD_ADDR_EXP 4
11741: PUSH
11742: LD_EXP 4
11746: PUSH
11747: LD_INT 1
11749: PLUS
11750: ST_TO_ADDR
// if un in FilterUnitsInArea ( baseArea , [ f_or , [ f_btype , b_turret ] , [ f_btype , b_bunker ] ] ) then
11751: LD_VAR 0 1
11755: PUSH
11756: LD_INT 6
11758: PPUSH
11759: LD_INT 2
11761: PUSH
11762: LD_INT 30
11764: PUSH
11765: LD_INT 33
11767: PUSH
11768: EMPTY
11769: LIST
11770: LIST
11771: PUSH
11772: LD_INT 30
11774: PUSH
11775: LD_INT 32
11777: PUSH
11778: EMPTY
11779: LIST
11780: LIST
11781: PUSH
11782: EMPTY
11783: LIST
11784: LIST
11785: LIST
11786: PPUSH
11787: CALL_OW 70
11791: IN
11792: IFFALSE 11851
// ru_rebuild_list := ru_rebuild_list ^ [ GetBType ( un ) , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ;
11794: LD_ADDR_EXP 20
11798: PUSH
11799: LD_EXP 20
11803: PUSH
11804: LD_VAR 0 1
11808: PPUSH
11809: CALL_OW 266
11813: PUSH
11814: LD_VAR 0 1
11818: PPUSH
11819: CALL_OW 250
11823: PUSH
11824: LD_VAR 0 1
11828: PPUSH
11829: CALL_OW 251
11833: PUSH
11834: LD_VAR 0 1
11838: PPUSH
11839: CALL_OW 254
11843: PUSH
11844: EMPTY
11845: LIST
11846: LIST
11847: LIST
11848: LIST
11849: ADD
11850: ST_TO_ADDR
// if un = ru_dep_main then
11851: LD_VAR 0 1
11855: PUSH
11856: LD_INT 16
11858: EQUAL
11859: IFFALSE 11868
// ChangeMissionObjectives ( M1a ) ;
11861: LD_STRING M1a
11863: PPUSH
11864: CALL_OW 337
// if GetType ( un ) = unit_human and GetSide ( un ) = 3 then
11868: LD_VAR 0 1
11872: PPUSH
11873: CALL_OW 247
11877: PUSH
11878: LD_INT 1
11880: EQUAL
11881: PUSH
11882: LD_VAR 0 1
11886: PPUSH
11887: CALL_OW 255
11891: PUSH
11892: LD_INT 3
11894: EQUAL
11895: AND
11896: IFFALSE 11912
// kill_counter := kill_counter + 1 ;
11898: LD_ADDR_EXP 8
11902: PUSH
11903: LD_EXP 8
11907: PUSH
11908: LD_INT 1
11910: PLUS
11911: ST_TO_ADDR
// end ;
11912: PPOPN 1
11914: END
// on BuildingStarted ( b , builder ) do var i ;
11915: LD_INT 0
11917: PPUSH
// begin if GetSide ( b ) = 3 then
11918: LD_VAR 0 1
11922: PPUSH
11923: CALL_OW 255
11927: PUSH
11928: LD_INT 3
11930: EQUAL
11931: IFFALSE 11971
// for i = 1 to 4 do
11933: LD_ADDR_VAR 0 3
11937: PUSH
11938: DOUBLE
11939: LD_INT 1
11941: DEC
11942: ST_TO_ADDR
11943: LD_INT 4
11945: PUSH
11946: FOR_TO
11947: IFFALSE 11969
// ru_rebuild_list := Delete ( ru_rebuild_list , 1 ) ;
11949: LD_ADDR_EXP 20
11953: PUSH
11954: LD_EXP 20
11958: PPUSH
11959: LD_INT 1
11961: PPUSH
11962: CALL_OW 3
11966: ST_TO_ADDR
11967: GO 11946
11969: POP
11970: POP
// end ;
11971: PPOPN 3
11973: END
// on BuildingComplete ( b ) do if GetBType ( b ) in [ b_bunker , b_turret ] then
11974: LD_VAR 0 1
11978: PPUSH
11979: CALL_OW 266
11983: PUSH
11984: LD_INT 32
11986: PUSH
11987: LD_INT 33
11989: PUSH
11990: EMPTY
11991: LIST
11992: LIST
11993: IN
11994: IFFALSE 12008
// ComPlaceWeapon ( b , ru_gatling_gun ) ;
11996: LD_VAR 0 1
12000: PPUSH
12001: LD_INT 43
12003: PPUSH
12004: CALL_OW 148
12008: PPOPN 1
12010: END
// on LeaveBuilding ( b , un ) do begin if b in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) then
12011: LD_VAR 0 1
12015: PUSH
12016: LD_INT 22
12018: PUSH
12019: LD_INT 3
12021: PUSH
12022: EMPTY
12023: LIST
12024: LIST
12025: PUSH
12026: LD_INT 2
12028: PUSH
12029: LD_INT 30
12031: PUSH
12032: LD_INT 31
12034: PUSH
12035: EMPTY
12036: LIST
12037: LIST
12038: PUSH
12039: LD_INT 30
12041: PUSH
12042: LD_INT 32
12044: PUSH
12045: EMPTY
12046: LIST
12047: LIST
12048: PUSH
12049: EMPTY
12050: LIST
12051: LIST
12052: LIST
12053: PUSH
12054: EMPTY
12055: LIST
12056: LIST
12057: PPUSH
12058: CALL_OW 69
12062: IN
12063: IFFALSE 12085
// GoToAnotherTower ( un , b , 143 , 143 ) ;
12065: LD_VAR 0 2
12069: PPUSH
12070: LD_VAR 0 1
12074: PPUSH
12075: LD_INT 143
12077: PPUSH
12078: LD_INT 143
12080: PPUSH
12081: CALL 2200 0 4
// end ;
12085: PPOPN 2
12087: END
// on EnterBuilding ( b , un ) do begin if b in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) then
12088: LD_VAR 0 1
12092: PUSH
12093: LD_INT 22
12095: PUSH
12096: LD_INT 3
12098: PUSH
12099: EMPTY
12100: LIST
12101: LIST
12102: PUSH
12103: LD_INT 30
12105: PUSH
12106: LD_INT 32
12108: PUSH
12109: EMPTY
12110: LIST
12111: LIST
12112: PUSH
12113: EMPTY
12114: LIST
12115: LIST
12116: PPUSH
12117: CALL_OW 69
12121: IN
12122: IFFALSE 12136
// SetTag ( b , 0 ) ;
12124: LD_VAR 0 1
12128: PPUSH
12129: LD_INT 0
12131: PPUSH
12132: CALL_OW 109
// end ; end_of_file
12136: PPOPN 2
12138: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; every 1 do
12139: GO 12141
12141: DISABLE
// begin ru_radar := 98 ;
12142: LD_ADDR_EXP 21
12146: PUSH
12147: LD_INT 98
12149: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
12150: LD_ADDR_EXP 22
12154: PUSH
12155: LD_INT 89
12157: ST_TO_ADDR
// us_hack := 99 ;
12158: LD_ADDR_EXP 23
12162: PUSH
12163: LD_INT 99
12165: ST_TO_ADDR
// us_artillery := 97 ;
12166: LD_ADDR_EXP 24
12170: PUSH
12171: LD_INT 97
12173: ST_TO_ADDR
// ar_bio_bomb := 91 ;
12174: LD_ADDR_EXP 25
12178: PUSH
12179: LD_INT 91
12181: ST_TO_ADDR
// end ; end_of_file end_of_file
12182: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
12183: GO 12185
12185: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
12186: LD_STRING initStreamRollete();
12188: PPUSH
12189: CALL_OW 559
// InitStreamMode ;
12193: CALL 12202 0 0
// DefineStreamItems ( ) ;
12197: CALL 12642 0 0
// end ;
12201: END
// function InitStreamMode ; begin
12202: LD_INT 0
12204: PPUSH
// streamModeActive := false ;
12205: LD_ADDR_EXP 26
12209: PUSH
12210: LD_INT 0
12212: ST_TO_ADDR
// normalCounter := 26 ;
12213: LD_ADDR_EXP 27
12217: PUSH
12218: LD_INT 26
12220: ST_TO_ADDR
// hardcoreCounter := 12 ;
12221: LD_ADDR_EXP 28
12225: PUSH
12226: LD_INT 12
12228: ST_TO_ADDR
// sRocket := false ;
12229: LD_ADDR_EXP 31
12233: PUSH
12234: LD_INT 0
12236: ST_TO_ADDR
// sSpeed := false ;
12237: LD_ADDR_EXP 30
12241: PUSH
12242: LD_INT 0
12244: ST_TO_ADDR
// sEngine := false ;
12245: LD_ADDR_EXP 32
12249: PUSH
12250: LD_INT 0
12252: ST_TO_ADDR
// sSpec := false ;
12253: LD_ADDR_EXP 29
12257: PUSH
12258: LD_INT 0
12260: ST_TO_ADDR
// sLevel := false ;
12261: LD_ADDR_EXP 33
12265: PUSH
12266: LD_INT 0
12268: ST_TO_ADDR
// sArmoury := false ;
12269: LD_ADDR_EXP 34
12273: PUSH
12274: LD_INT 0
12276: ST_TO_ADDR
// sRadar := false ;
12277: LD_ADDR_EXP 35
12281: PUSH
12282: LD_INT 0
12284: ST_TO_ADDR
// sBunker := false ;
12285: LD_ADDR_EXP 36
12289: PUSH
12290: LD_INT 0
12292: ST_TO_ADDR
// sHack := false ;
12293: LD_ADDR_EXP 37
12297: PUSH
12298: LD_INT 0
12300: ST_TO_ADDR
// sFire := false ;
12301: LD_ADDR_EXP 38
12305: PUSH
12306: LD_INT 0
12308: ST_TO_ADDR
// sRefresh := false ;
12309: LD_ADDR_EXP 39
12313: PUSH
12314: LD_INT 0
12316: ST_TO_ADDR
// sExp := false ;
12317: LD_ADDR_EXP 40
12321: PUSH
12322: LD_INT 0
12324: ST_TO_ADDR
// sDepot := false ;
12325: LD_ADDR_EXP 41
12329: PUSH
12330: LD_INT 0
12332: ST_TO_ADDR
// sFlag := false ;
12333: LD_ADDR_EXP 42
12337: PUSH
12338: LD_INT 0
12340: ST_TO_ADDR
// sKamikadze := false ;
12341: LD_ADDR_EXP 50
12345: PUSH
12346: LD_INT 0
12348: ST_TO_ADDR
// sTroll := false ;
12349: LD_ADDR_EXP 51
12353: PUSH
12354: LD_INT 0
12356: ST_TO_ADDR
// sSlow := false ;
12357: LD_ADDR_EXP 52
12361: PUSH
12362: LD_INT 0
12364: ST_TO_ADDR
// sLack := false ;
12365: LD_ADDR_EXP 53
12369: PUSH
12370: LD_INT 0
12372: ST_TO_ADDR
// sTank := false ;
12373: LD_ADDR_EXP 55
12377: PUSH
12378: LD_INT 0
12380: ST_TO_ADDR
// sRemote := false ;
12381: LD_ADDR_EXP 56
12385: PUSH
12386: LD_INT 0
12388: ST_TO_ADDR
// sPowell := false ;
12389: LD_ADDR_EXP 57
12393: PUSH
12394: LD_INT 0
12396: ST_TO_ADDR
// sTeleport := false ;
12397: LD_ADDR_EXP 60
12401: PUSH
12402: LD_INT 0
12404: ST_TO_ADDR
// sOilTower := false ;
12405: LD_ADDR_EXP 62
12409: PUSH
12410: LD_INT 0
12412: ST_TO_ADDR
// sShovel := false ;
12413: LD_ADDR_EXP 63
12417: PUSH
12418: LD_INT 0
12420: ST_TO_ADDR
// sSheik := false ;
12421: LD_ADDR_EXP 64
12425: PUSH
12426: LD_INT 0
12428: ST_TO_ADDR
// sEarthquake := false ;
12429: LD_ADDR_EXP 66
12433: PUSH
12434: LD_INT 0
12436: ST_TO_ADDR
// sAI := false ;
12437: LD_ADDR_EXP 67
12441: PUSH
12442: LD_INT 0
12444: ST_TO_ADDR
// sCargo := false ;
12445: LD_ADDR_EXP 70
12449: PUSH
12450: LD_INT 0
12452: ST_TO_ADDR
// sDLaser := false ;
12453: LD_ADDR_EXP 71
12457: PUSH
12458: LD_INT 0
12460: ST_TO_ADDR
// sExchange := false ;
12461: LD_ADDR_EXP 72
12465: PUSH
12466: LD_INT 0
12468: ST_TO_ADDR
// sFac := false ;
12469: LD_ADDR_EXP 73
12473: PUSH
12474: LD_INT 0
12476: ST_TO_ADDR
// sPower := false ;
12477: LD_ADDR_EXP 74
12481: PUSH
12482: LD_INT 0
12484: ST_TO_ADDR
// sRandom := false ;
12485: LD_ADDR_EXP 75
12489: PUSH
12490: LD_INT 0
12492: ST_TO_ADDR
// sShield := false ;
12493: LD_ADDR_EXP 76
12497: PUSH
12498: LD_INT 0
12500: ST_TO_ADDR
// sTime := false ;
12501: LD_ADDR_EXP 77
12505: PUSH
12506: LD_INT 0
12508: ST_TO_ADDR
// sTools := false ;
12509: LD_ADDR_EXP 78
12513: PUSH
12514: LD_INT 0
12516: ST_TO_ADDR
// sSold := false ;
12517: LD_ADDR_EXP 43
12521: PUSH
12522: LD_INT 0
12524: ST_TO_ADDR
// sDiff := false ;
12525: LD_ADDR_EXP 44
12529: PUSH
12530: LD_INT 0
12532: ST_TO_ADDR
// sFog := false ;
12533: LD_ADDR_EXP 47
12537: PUSH
12538: LD_INT 0
12540: ST_TO_ADDR
// sReset := false ;
12541: LD_ADDR_EXP 48
12545: PUSH
12546: LD_INT 0
12548: ST_TO_ADDR
// sSun := false ;
12549: LD_ADDR_EXP 49
12553: PUSH
12554: LD_INT 0
12556: ST_TO_ADDR
// sTiger := false ;
12557: LD_ADDR_EXP 45
12561: PUSH
12562: LD_INT 0
12564: ST_TO_ADDR
// sBomb := false ;
12565: LD_ADDR_EXP 46
12569: PUSH
12570: LD_INT 0
12572: ST_TO_ADDR
// sWound := false ;
12573: LD_ADDR_EXP 54
12577: PUSH
12578: LD_INT 0
12580: ST_TO_ADDR
// sBetray := false ;
12581: LD_ADDR_EXP 58
12585: PUSH
12586: LD_INT 0
12588: ST_TO_ADDR
// sContamin := false ;
12589: LD_ADDR_EXP 59
12593: PUSH
12594: LD_INT 0
12596: ST_TO_ADDR
// sOil := false ;
12597: LD_ADDR_EXP 61
12601: PUSH
12602: LD_INT 0
12604: ST_TO_ADDR
// sStu := false ;
12605: LD_ADDR_EXP 65
12609: PUSH
12610: LD_INT 0
12612: ST_TO_ADDR
// sBazooka := false ;
12613: LD_ADDR_EXP 68
12617: PUSH
12618: LD_INT 0
12620: ST_TO_ADDR
// sMortar := false ;
12621: LD_ADDR_EXP 69
12625: PUSH
12626: LD_INT 0
12628: ST_TO_ADDR
// sRanger := false ;
12629: LD_ADDR_EXP 79
12633: PUSH
12634: LD_INT 0
12636: ST_TO_ADDR
// end ;
12637: LD_VAR 0 1
12641: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
12642: LD_INT 0
12644: PPUSH
12645: PPUSH
12646: PPUSH
12647: PPUSH
12648: PPUSH
// result := [ ] ;
12649: LD_ADDR_VAR 0 1
12653: PUSH
12654: EMPTY
12655: ST_TO_ADDR
// if campaign_id = 1 then
12656: LD_OWVAR 69
12660: PUSH
12661: LD_INT 1
12663: EQUAL
12664: IFFALSE 15612
// begin case mission_number of 1 :
12666: LD_OWVAR 70
12670: PUSH
12671: LD_INT 1
12673: DOUBLE
12674: EQUAL
12675: IFTRUE 12679
12677: GO 12743
12679: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
12680: LD_ADDR_VAR 0 1
12684: PUSH
12685: LD_INT 2
12687: PUSH
12688: LD_INT 4
12690: PUSH
12691: LD_INT 11
12693: PUSH
12694: LD_INT 12
12696: PUSH
12697: LD_INT 15
12699: PUSH
12700: LD_INT 16
12702: PUSH
12703: LD_INT 22
12705: PUSH
12706: LD_INT 23
12708: PUSH
12709: LD_INT 26
12711: PUSH
12712: EMPTY
12713: LIST
12714: LIST
12715: LIST
12716: LIST
12717: LIST
12718: LIST
12719: LIST
12720: LIST
12721: LIST
12722: PUSH
12723: LD_INT 101
12725: PUSH
12726: LD_INT 102
12728: PUSH
12729: LD_INT 106
12731: PUSH
12732: EMPTY
12733: LIST
12734: LIST
12735: LIST
12736: PUSH
12737: EMPTY
12738: LIST
12739: LIST
12740: ST_TO_ADDR
12741: GO 15612
12743: LD_INT 2
12745: DOUBLE
12746: EQUAL
12747: IFTRUE 12751
12749: GO 12823
12751: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
12752: LD_ADDR_VAR 0 1
12756: PUSH
12757: LD_INT 2
12759: PUSH
12760: LD_INT 4
12762: PUSH
12763: LD_INT 11
12765: PUSH
12766: LD_INT 12
12768: PUSH
12769: LD_INT 15
12771: PUSH
12772: LD_INT 16
12774: PUSH
12775: LD_INT 22
12777: PUSH
12778: LD_INT 23
12780: PUSH
12781: LD_INT 26
12783: PUSH
12784: EMPTY
12785: LIST
12786: LIST
12787: LIST
12788: LIST
12789: LIST
12790: LIST
12791: LIST
12792: LIST
12793: LIST
12794: PUSH
12795: LD_INT 101
12797: PUSH
12798: LD_INT 102
12800: PUSH
12801: LD_INT 105
12803: PUSH
12804: LD_INT 106
12806: PUSH
12807: LD_INT 108
12809: PUSH
12810: EMPTY
12811: LIST
12812: LIST
12813: LIST
12814: LIST
12815: LIST
12816: PUSH
12817: EMPTY
12818: LIST
12819: LIST
12820: ST_TO_ADDR
12821: GO 15612
12823: LD_INT 3
12825: DOUBLE
12826: EQUAL
12827: IFTRUE 12831
12829: GO 12907
12831: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
12832: LD_ADDR_VAR 0 1
12836: PUSH
12837: LD_INT 2
12839: PUSH
12840: LD_INT 4
12842: PUSH
12843: LD_INT 5
12845: PUSH
12846: LD_INT 11
12848: PUSH
12849: LD_INT 12
12851: PUSH
12852: LD_INT 15
12854: PUSH
12855: LD_INT 16
12857: PUSH
12858: LD_INT 22
12860: PUSH
12861: LD_INT 26
12863: PUSH
12864: LD_INT 36
12866: PUSH
12867: EMPTY
12868: LIST
12869: LIST
12870: LIST
12871: LIST
12872: LIST
12873: LIST
12874: LIST
12875: LIST
12876: LIST
12877: LIST
12878: PUSH
12879: LD_INT 101
12881: PUSH
12882: LD_INT 102
12884: PUSH
12885: LD_INT 105
12887: PUSH
12888: LD_INT 106
12890: PUSH
12891: LD_INT 108
12893: PUSH
12894: EMPTY
12895: LIST
12896: LIST
12897: LIST
12898: LIST
12899: LIST
12900: PUSH
12901: EMPTY
12902: LIST
12903: LIST
12904: ST_TO_ADDR
12905: GO 15612
12907: LD_INT 4
12909: DOUBLE
12910: EQUAL
12911: IFTRUE 12915
12913: GO 12999
12915: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
12916: LD_ADDR_VAR 0 1
12920: PUSH
12921: LD_INT 2
12923: PUSH
12924: LD_INT 4
12926: PUSH
12927: LD_INT 5
12929: PUSH
12930: LD_INT 8
12932: PUSH
12933: LD_INT 11
12935: PUSH
12936: LD_INT 12
12938: PUSH
12939: LD_INT 15
12941: PUSH
12942: LD_INT 16
12944: PUSH
12945: LD_INT 22
12947: PUSH
12948: LD_INT 23
12950: PUSH
12951: LD_INT 26
12953: PUSH
12954: LD_INT 36
12956: PUSH
12957: EMPTY
12958: LIST
12959: LIST
12960: LIST
12961: LIST
12962: LIST
12963: LIST
12964: LIST
12965: LIST
12966: LIST
12967: LIST
12968: LIST
12969: LIST
12970: PUSH
12971: LD_INT 101
12973: PUSH
12974: LD_INT 102
12976: PUSH
12977: LD_INT 105
12979: PUSH
12980: LD_INT 106
12982: PUSH
12983: LD_INT 108
12985: PUSH
12986: EMPTY
12987: LIST
12988: LIST
12989: LIST
12990: LIST
12991: LIST
12992: PUSH
12993: EMPTY
12994: LIST
12995: LIST
12996: ST_TO_ADDR
12997: GO 15612
12999: LD_INT 5
13001: DOUBLE
13002: EQUAL
13003: IFTRUE 13007
13005: GO 13107
13007: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
13008: LD_ADDR_VAR 0 1
13012: PUSH
13013: LD_INT 2
13015: PUSH
13016: LD_INT 4
13018: PUSH
13019: LD_INT 5
13021: PUSH
13022: LD_INT 6
13024: PUSH
13025: LD_INT 8
13027: PUSH
13028: LD_INT 11
13030: PUSH
13031: LD_INT 12
13033: PUSH
13034: LD_INT 15
13036: PUSH
13037: LD_INT 16
13039: PUSH
13040: LD_INT 22
13042: PUSH
13043: LD_INT 23
13045: PUSH
13046: LD_INT 25
13048: PUSH
13049: LD_INT 26
13051: PUSH
13052: LD_INT 36
13054: PUSH
13055: EMPTY
13056: LIST
13057: LIST
13058: LIST
13059: LIST
13060: LIST
13061: LIST
13062: LIST
13063: LIST
13064: LIST
13065: LIST
13066: LIST
13067: LIST
13068: LIST
13069: LIST
13070: PUSH
13071: LD_INT 101
13073: PUSH
13074: LD_INT 102
13076: PUSH
13077: LD_INT 105
13079: PUSH
13080: LD_INT 106
13082: PUSH
13083: LD_INT 108
13085: PUSH
13086: LD_INT 109
13088: PUSH
13089: LD_INT 112
13091: PUSH
13092: EMPTY
13093: LIST
13094: LIST
13095: LIST
13096: LIST
13097: LIST
13098: LIST
13099: LIST
13100: PUSH
13101: EMPTY
13102: LIST
13103: LIST
13104: ST_TO_ADDR
13105: GO 15612
13107: LD_INT 6
13109: DOUBLE
13110: EQUAL
13111: IFTRUE 13115
13113: GO 13235
13115: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
13116: LD_ADDR_VAR 0 1
13120: PUSH
13121: LD_INT 2
13123: PUSH
13124: LD_INT 4
13126: PUSH
13127: LD_INT 5
13129: PUSH
13130: LD_INT 6
13132: PUSH
13133: LD_INT 8
13135: PUSH
13136: LD_INT 11
13138: PUSH
13139: LD_INT 12
13141: PUSH
13142: LD_INT 15
13144: PUSH
13145: LD_INT 16
13147: PUSH
13148: LD_INT 20
13150: PUSH
13151: LD_INT 21
13153: PUSH
13154: LD_INT 22
13156: PUSH
13157: LD_INT 23
13159: PUSH
13160: LD_INT 25
13162: PUSH
13163: LD_INT 26
13165: PUSH
13166: LD_INT 30
13168: PUSH
13169: LD_INT 31
13171: PUSH
13172: LD_INT 32
13174: PUSH
13175: LD_INT 36
13177: PUSH
13178: EMPTY
13179: LIST
13180: LIST
13181: LIST
13182: LIST
13183: LIST
13184: LIST
13185: LIST
13186: LIST
13187: LIST
13188: LIST
13189: LIST
13190: LIST
13191: LIST
13192: LIST
13193: LIST
13194: LIST
13195: LIST
13196: LIST
13197: LIST
13198: PUSH
13199: LD_INT 101
13201: PUSH
13202: LD_INT 102
13204: PUSH
13205: LD_INT 105
13207: PUSH
13208: LD_INT 106
13210: PUSH
13211: LD_INT 108
13213: PUSH
13214: LD_INT 109
13216: PUSH
13217: LD_INT 112
13219: PUSH
13220: EMPTY
13221: LIST
13222: LIST
13223: LIST
13224: LIST
13225: LIST
13226: LIST
13227: LIST
13228: PUSH
13229: EMPTY
13230: LIST
13231: LIST
13232: ST_TO_ADDR
13233: GO 15612
13235: LD_INT 7
13237: DOUBLE
13238: EQUAL
13239: IFTRUE 13243
13241: GO 13343
13243: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
13244: LD_ADDR_VAR 0 1
13248: PUSH
13249: LD_INT 2
13251: PUSH
13252: LD_INT 4
13254: PUSH
13255: LD_INT 5
13257: PUSH
13258: LD_INT 7
13260: PUSH
13261: LD_INT 11
13263: PUSH
13264: LD_INT 12
13266: PUSH
13267: LD_INT 15
13269: PUSH
13270: LD_INT 16
13272: PUSH
13273: LD_INT 20
13275: PUSH
13276: LD_INT 21
13278: PUSH
13279: LD_INT 22
13281: PUSH
13282: LD_INT 23
13284: PUSH
13285: LD_INT 25
13287: PUSH
13288: LD_INT 26
13290: PUSH
13291: EMPTY
13292: LIST
13293: LIST
13294: LIST
13295: LIST
13296: LIST
13297: LIST
13298: LIST
13299: LIST
13300: LIST
13301: LIST
13302: LIST
13303: LIST
13304: LIST
13305: LIST
13306: PUSH
13307: LD_INT 101
13309: PUSH
13310: LD_INT 102
13312: PUSH
13313: LD_INT 103
13315: PUSH
13316: LD_INT 105
13318: PUSH
13319: LD_INT 106
13321: PUSH
13322: LD_INT 108
13324: PUSH
13325: LD_INT 112
13327: PUSH
13328: EMPTY
13329: LIST
13330: LIST
13331: LIST
13332: LIST
13333: LIST
13334: LIST
13335: LIST
13336: PUSH
13337: EMPTY
13338: LIST
13339: LIST
13340: ST_TO_ADDR
13341: GO 15612
13343: LD_INT 8
13345: DOUBLE
13346: EQUAL
13347: IFTRUE 13351
13349: GO 13479
13351: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
13352: LD_ADDR_VAR 0 1
13356: PUSH
13357: LD_INT 2
13359: PUSH
13360: LD_INT 4
13362: PUSH
13363: LD_INT 5
13365: PUSH
13366: LD_INT 6
13368: PUSH
13369: LD_INT 7
13371: PUSH
13372: LD_INT 8
13374: PUSH
13375: LD_INT 11
13377: PUSH
13378: LD_INT 12
13380: PUSH
13381: LD_INT 15
13383: PUSH
13384: LD_INT 16
13386: PUSH
13387: LD_INT 20
13389: PUSH
13390: LD_INT 21
13392: PUSH
13393: LD_INT 22
13395: PUSH
13396: LD_INT 23
13398: PUSH
13399: LD_INT 25
13401: PUSH
13402: LD_INT 26
13404: PUSH
13405: LD_INT 30
13407: PUSH
13408: LD_INT 31
13410: PUSH
13411: LD_INT 32
13413: PUSH
13414: LD_INT 36
13416: PUSH
13417: EMPTY
13418: LIST
13419: LIST
13420: LIST
13421: LIST
13422: LIST
13423: LIST
13424: LIST
13425: LIST
13426: LIST
13427: LIST
13428: LIST
13429: LIST
13430: LIST
13431: LIST
13432: LIST
13433: LIST
13434: LIST
13435: LIST
13436: LIST
13437: LIST
13438: PUSH
13439: LD_INT 101
13441: PUSH
13442: LD_INT 102
13444: PUSH
13445: LD_INT 103
13447: PUSH
13448: LD_INT 105
13450: PUSH
13451: LD_INT 106
13453: PUSH
13454: LD_INT 108
13456: PUSH
13457: LD_INT 109
13459: PUSH
13460: LD_INT 112
13462: PUSH
13463: EMPTY
13464: LIST
13465: LIST
13466: LIST
13467: LIST
13468: LIST
13469: LIST
13470: LIST
13471: LIST
13472: PUSH
13473: EMPTY
13474: LIST
13475: LIST
13476: ST_TO_ADDR
13477: GO 15612
13479: LD_INT 9
13481: DOUBLE
13482: EQUAL
13483: IFTRUE 13487
13485: GO 13623
13487: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
13488: LD_ADDR_VAR 0 1
13492: PUSH
13493: LD_INT 2
13495: PUSH
13496: LD_INT 4
13498: PUSH
13499: LD_INT 5
13501: PUSH
13502: LD_INT 6
13504: PUSH
13505: LD_INT 7
13507: PUSH
13508: LD_INT 8
13510: PUSH
13511: LD_INT 11
13513: PUSH
13514: LD_INT 12
13516: PUSH
13517: LD_INT 15
13519: PUSH
13520: LD_INT 16
13522: PUSH
13523: LD_INT 20
13525: PUSH
13526: LD_INT 21
13528: PUSH
13529: LD_INT 22
13531: PUSH
13532: LD_INT 23
13534: PUSH
13535: LD_INT 25
13537: PUSH
13538: LD_INT 26
13540: PUSH
13541: LD_INT 28
13543: PUSH
13544: LD_INT 30
13546: PUSH
13547: LD_INT 31
13549: PUSH
13550: LD_INT 32
13552: PUSH
13553: LD_INT 36
13555: PUSH
13556: EMPTY
13557: LIST
13558: LIST
13559: LIST
13560: LIST
13561: LIST
13562: LIST
13563: LIST
13564: LIST
13565: LIST
13566: LIST
13567: LIST
13568: LIST
13569: LIST
13570: LIST
13571: LIST
13572: LIST
13573: LIST
13574: LIST
13575: LIST
13576: LIST
13577: LIST
13578: PUSH
13579: LD_INT 101
13581: PUSH
13582: LD_INT 102
13584: PUSH
13585: LD_INT 103
13587: PUSH
13588: LD_INT 105
13590: PUSH
13591: LD_INT 106
13593: PUSH
13594: LD_INT 108
13596: PUSH
13597: LD_INT 109
13599: PUSH
13600: LD_INT 112
13602: PUSH
13603: LD_INT 114
13605: PUSH
13606: EMPTY
13607: LIST
13608: LIST
13609: LIST
13610: LIST
13611: LIST
13612: LIST
13613: LIST
13614: LIST
13615: LIST
13616: PUSH
13617: EMPTY
13618: LIST
13619: LIST
13620: ST_TO_ADDR
13621: GO 15612
13623: LD_INT 10
13625: DOUBLE
13626: EQUAL
13627: IFTRUE 13631
13629: GO 13815
13631: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
13632: LD_ADDR_VAR 0 1
13636: PUSH
13637: LD_INT 2
13639: PUSH
13640: LD_INT 4
13642: PUSH
13643: LD_INT 5
13645: PUSH
13646: LD_INT 6
13648: PUSH
13649: LD_INT 7
13651: PUSH
13652: LD_INT 8
13654: PUSH
13655: LD_INT 9
13657: PUSH
13658: LD_INT 10
13660: PUSH
13661: LD_INT 11
13663: PUSH
13664: LD_INT 12
13666: PUSH
13667: LD_INT 13
13669: PUSH
13670: LD_INT 14
13672: PUSH
13673: LD_INT 15
13675: PUSH
13676: LD_INT 16
13678: PUSH
13679: LD_INT 17
13681: PUSH
13682: LD_INT 18
13684: PUSH
13685: LD_INT 19
13687: PUSH
13688: LD_INT 20
13690: PUSH
13691: LD_INT 21
13693: PUSH
13694: LD_INT 22
13696: PUSH
13697: LD_INT 23
13699: PUSH
13700: LD_INT 24
13702: PUSH
13703: LD_INT 25
13705: PUSH
13706: LD_INT 26
13708: PUSH
13709: LD_INT 28
13711: PUSH
13712: LD_INT 30
13714: PUSH
13715: LD_INT 31
13717: PUSH
13718: LD_INT 32
13720: PUSH
13721: LD_INT 36
13723: PUSH
13724: EMPTY
13725: LIST
13726: LIST
13727: LIST
13728: LIST
13729: LIST
13730: LIST
13731: LIST
13732: LIST
13733: LIST
13734: LIST
13735: LIST
13736: LIST
13737: LIST
13738: LIST
13739: LIST
13740: LIST
13741: LIST
13742: LIST
13743: LIST
13744: LIST
13745: LIST
13746: LIST
13747: LIST
13748: LIST
13749: LIST
13750: LIST
13751: LIST
13752: LIST
13753: LIST
13754: PUSH
13755: LD_INT 101
13757: PUSH
13758: LD_INT 102
13760: PUSH
13761: LD_INT 103
13763: PUSH
13764: LD_INT 104
13766: PUSH
13767: LD_INT 105
13769: PUSH
13770: LD_INT 106
13772: PUSH
13773: LD_INT 107
13775: PUSH
13776: LD_INT 108
13778: PUSH
13779: LD_INT 109
13781: PUSH
13782: LD_INT 110
13784: PUSH
13785: LD_INT 111
13787: PUSH
13788: LD_INT 112
13790: PUSH
13791: LD_INT 114
13793: PUSH
13794: EMPTY
13795: LIST
13796: LIST
13797: LIST
13798: LIST
13799: LIST
13800: LIST
13801: LIST
13802: LIST
13803: LIST
13804: LIST
13805: LIST
13806: LIST
13807: LIST
13808: PUSH
13809: EMPTY
13810: LIST
13811: LIST
13812: ST_TO_ADDR
13813: GO 15612
13815: LD_INT 11
13817: DOUBLE
13818: EQUAL
13819: IFTRUE 13823
13821: GO 14015
13823: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
13824: LD_ADDR_VAR 0 1
13828: PUSH
13829: LD_INT 2
13831: PUSH
13832: LD_INT 3
13834: PUSH
13835: LD_INT 4
13837: PUSH
13838: LD_INT 5
13840: PUSH
13841: LD_INT 6
13843: PUSH
13844: LD_INT 7
13846: PUSH
13847: LD_INT 8
13849: PUSH
13850: LD_INT 9
13852: PUSH
13853: LD_INT 10
13855: PUSH
13856: LD_INT 11
13858: PUSH
13859: LD_INT 12
13861: PUSH
13862: LD_INT 13
13864: PUSH
13865: LD_INT 14
13867: PUSH
13868: LD_INT 15
13870: PUSH
13871: LD_INT 16
13873: PUSH
13874: LD_INT 17
13876: PUSH
13877: LD_INT 18
13879: PUSH
13880: LD_INT 19
13882: PUSH
13883: LD_INT 20
13885: PUSH
13886: LD_INT 21
13888: PUSH
13889: LD_INT 22
13891: PUSH
13892: LD_INT 23
13894: PUSH
13895: LD_INT 24
13897: PUSH
13898: LD_INT 25
13900: PUSH
13901: LD_INT 26
13903: PUSH
13904: LD_INT 28
13906: PUSH
13907: LD_INT 30
13909: PUSH
13910: LD_INT 31
13912: PUSH
13913: LD_INT 32
13915: PUSH
13916: LD_INT 34
13918: PUSH
13919: LD_INT 36
13921: PUSH
13922: EMPTY
13923: LIST
13924: LIST
13925: LIST
13926: LIST
13927: LIST
13928: LIST
13929: LIST
13930: LIST
13931: LIST
13932: LIST
13933: LIST
13934: LIST
13935: LIST
13936: LIST
13937: LIST
13938: LIST
13939: LIST
13940: LIST
13941: LIST
13942: LIST
13943: LIST
13944: LIST
13945: LIST
13946: LIST
13947: LIST
13948: LIST
13949: LIST
13950: LIST
13951: LIST
13952: LIST
13953: LIST
13954: PUSH
13955: LD_INT 101
13957: PUSH
13958: LD_INT 102
13960: PUSH
13961: LD_INT 103
13963: PUSH
13964: LD_INT 104
13966: PUSH
13967: LD_INT 105
13969: PUSH
13970: LD_INT 106
13972: PUSH
13973: LD_INT 107
13975: PUSH
13976: LD_INT 108
13978: PUSH
13979: LD_INT 109
13981: PUSH
13982: LD_INT 110
13984: PUSH
13985: LD_INT 111
13987: PUSH
13988: LD_INT 112
13990: PUSH
13991: LD_INT 114
13993: PUSH
13994: EMPTY
13995: LIST
13996: LIST
13997: LIST
13998: LIST
13999: LIST
14000: LIST
14001: LIST
14002: LIST
14003: LIST
14004: LIST
14005: LIST
14006: LIST
14007: LIST
14008: PUSH
14009: EMPTY
14010: LIST
14011: LIST
14012: ST_TO_ADDR
14013: GO 15612
14015: LD_INT 12
14017: DOUBLE
14018: EQUAL
14019: IFTRUE 14023
14021: GO 14231
14023: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
14024: LD_ADDR_VAR 0 1
14028: PUSH
14029: LD_INT 1
14031: PUSH
14032: LD_INT 2
14034: PUSH
14035: LD_INT 3
14037: PUSH
14038: LD_INT 4
14040: PUSH
14041: LD_INT 5
14043: PUSH
14044: LD_INT 6
14046: PUSH
14047: LD_INT 7
14049: PUSH
14050: LD_INT 8
14052: PUSH
14053: LD_INT 9
14055: PUSH
14056: LD_INT 10
14058: PUSH
14059: LD_INT 11
14061: PUSH
14062: LD_INT 12
14064: PUSH
14065: LD_INT 13
14067: PUSH
14068: LD_INT 14
14070: PUSH
14071: LD_INT 15
14073: PUSH
14074: LD_INT 16
14076: PUSH
14077: LD_INT 17
14079: PUSH
14080: LD_INT 18
14082: PUSH
14083: LD_INT 19
14085: PUSH
14086: LD_INT 20
14088: PUSH
14089: LD_INT 21
14091: PUSH
14092: LD_INT 22
14094: PUSH
14095: LD_INT 23
14097: PUSH
14098: LD_INT 24
14100: PUSH
14101: LD_INT 25
14103: PUSH
14104: LD_INT 26
14106: PUSH
14107: LD_INT 27
14109: PUSH
14110: LD_INT 28
14112: PUSH
14113: LD_INT 30
14115: PUSH
14116: LD_INT 31
14118: PUSH
14119: LD_INT 32
14121: PUSH
14122: LD_INT 33
14124: PUSH
14125: LD_INT 34
14127: PUSH
14128: LD_INT 36
14130: PUSH
14131: EMPTY
14132: LIST
14133: LIST
14134: LIST
14135: LIST
14136: LIST
14137: LIST
14138: LIST
14139: LIST
14140: LIST
14141: LIST
14142: LIST
14143: LIST
14144: LIST
14145: LIST
14146: LIST
14147: LIST
14148: LIST
14149: LIST
14150: LIST
14151: LIST
14152: LIST
14153: LIST
14154: LIST
14155: LIST
14156: LIST
14157: LIST
14158: LIST
14159: LIST
14160: LIST
14161: LIST
14162: LIST
14163: LIST
14164: LIST
14165: LIST
14166: PUSH
14167: LD_INT 101
14169: PUSH
14170: LD_INT 102
14172: PUSH
14173: LD_INT 103
14175: PUSH
14176: LD_INT 104
14178: PUSH
14179: LD_INT 105
14181: PUSH
14182: LD_INT 106
14184: PUSH
14185: LD_INT 107
14187: PUSH
14188: LD_INT 108
14190: PUSH
14191: LD_INT 109
14193: PUSH
14194: LD_INT 110
14196: PUSH
14197: LD_INT 111
14199: PUSH
14200: LD_INT 112
14202: PUSH
14203: LD_INT 113
14205: PUSH
14206: LD_INT 114
14208: PUSH
14209: EMPTY
14210: LIST
14211: LIST
14212: LIST
14213: LIST
14214: LIST
14215: LIST
14216: LIST
14217: LIST
14218: LIST
14219: LIST
14220: LIST
14221: LIST
14222: LIST
14223: LIST
14224: PUSH
14225: EMPTY
14226: LIST
14227: LIST
14228: ST_TO_ADDR
14229: GO 15612
14231: LD_INT 13
14233: DOUBLE
14234: EQUAL
14235: IFTRUE 14239
14237: GO 14447
14239: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
14240: LD_ADDR_VAR 0 1
14244: PUSH
14245: LD_INT 1
14247: PUSH
14248: LD_INT 2
14250: PUSH
14251: LD_INT 3
14253: PUSH
14254: LD_INT 4
14256: PUSH
14257: LD_INT 5
14259: PUSH
14260: LD_INT 6
14262: PUSH
14263: LD_INT 7
14265: PUSH
14266: LD_INT 8
14268: PUSH
14269: LD_INT 9
14271: PUSH
14272: LD_INT 10
14274: PUSH
14275: LD_INT 11
14277: PUSH
14278: LD_INT 12
14280: PUSH
14281: LD_INT 13
14283: PUSH
14284: LD_INT 14
14286: PUSH
14287: LD_INT 15
14289: PUSH
14290: LD_INT 16
14292: PUSH
14293: LD_INT 17
14295: PUSH
14296: LD_INT 18
14298: PUSH
14299: LD_INT 19
14301: PUSH
14302: LD_INT 20
14304: PUSH
14305: LD_INT 21
14307: PUSH
14308: LD_INT 22
14310: PUSH
14311: LD_INT 23
14313: PUSH
14314: LD_INT 24
14316: PUSH
14317: LD_INT 25
14319: PUSH
14320: LD_INT 26
14322: PUSH
14323: LD_INT 27
14325: PUSH
14326: LD_INT 28
14328: PUSH
14329: LD_INT 30
14331: PUSH
14332: LD_INT 31
14334: PUSH
14335: LD_INT 32
14337: PUSH
14338: LD_INT 33
14340: PUSH
14341: LD_INT 34
14343: PUSH
14344: LD_INT 36
14346: PUSH
14347: EMPTY
14348: LIST
14349: LIST
14350: LIST
14351: LIST
14352: LIST
14353: LIST
14354: LIST
14355: LIST
14356: LIST
14357: LIST
14358: LIST
14359: LIST
14360: LIST
14361: LIST
14362: LIST
14363: LIST
14364: LIST
14365: LIST
14366: LIST
14367: LIST
14368: LIST
14369: LIST
14370: LIST
14371: LIST
14372: LIST
14373: LIST
14374: LIST
14375: LIST
14376: LIST
14377: LIST
14378: LIST
14379: LIST
14380: LIST
14381: LIST
14382: PUSH
14383: LD_INT 101
14385: PUSH
14386: LD_INT 102
14388: PUSH
14389: LD_INT 103
14391: PUSH
14392: LD_INT 104
14394: PUSH
14395: LD_INT 105
14397: PUSH
14398: LD_INT 106
14400: PUSH
14401: LD_INT 107
14403: PUSH
14404: LD_INT 108
14406: PUSH
14407: LD_INT 109
14409: PUSH
14410: LD_INT 110
14412: PUSH
14413: LD_INT 111
14415: PUSH
14416: LD_INT 112
14418: PUSH
14419: LD_INT 113
14421: PUSH
14422: LD_INT 114
14424: PUSH
14425: EMPTY
14426: LIST
14427: LIST
14428: LIST
14429: LIST
14430: LIST
14431: LIST
14432: LIST
14433: LIST
14434: LIST
14435: LIST
14436: LIST
14437: LIST
14438: LIST
14439: LIST
14440: PUSH
14441: EMPTY
14442: LIST
14443: LIST
14444: ST_TO_ADDR
14445: GO 15612
14447: LD_INT 14
14449: DOUBLE
14450: EQUAL
14451: IFTRUE 14455
14453: GO 14667
14455: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
14456: LD_ADDR_VAR 0 1
14460: PUSH
14461: LD_INT 1
14463: PUSH
14464: LD_INT 2
14466: PUSH
14467: LD_INT 3
14469: PUSH
14470: LD_INT 4
14472: PUSH
14473: LD_INT 5
14475: PUSH
14476: LD_INT 6
14478: PUSH
14479: LD_INT 7
14481: PUSH
14482: LD_INT 8
14484: PUSH
14485: LD_INT 9
14487: PUSH
14488: LD_INT 10
14490: PUSH
14491: LD_INT 11
14493: PUSH
14494: LD_INT 12
14496: PUSH
14497: LD_INT 13
14499: PUSH
14500: LD_INT 14
14502: PUSH
14503: LD_INT 15
14505: PUSH
14506: LD_INT 16
14508: PUSH
14509: LD_INT 17
14511: PUSH
14512: LD_INT 18
14514: PUSH
14515: LD_INT 19
14517: PUSH
14518: LD_INT 20
14520: PUSH
14521: LD_INT 21
14523: PUSH
14524: LD_INT 22
14526: PUSH
14527: LD_INT 23
14529: PUSH
14530: LD_INT 24
14532: PUSH
14533: LD_INT 25
14535: PUSH
14536: LD_INT 26
14538: PUSH
14539: LD_INT 27
14541: PUSH
14542: LD_INT 28
14544: PUSH
14545: LD_INT 29
14547: PUSH
14548: LD_INT 30
14550: PUSH
14551: LD_INT 31
14553: PUSH
14554: LD_INT 32
14556: PUSH
14557: LD_INT 33
14559: PUSH
14560: LD_INT 34
14562: PUSH
14563: LD_INT 36
14565: PUSH
14566: EMPTY
14567: LIST
14568: LIST
14569: LIST
14570: LIST
14571: LIST
14572: LIST
14573: LIST
14574: LIST
14575: LIST
14576: LIST
14577: LIST
14578: LIST
14579: LIST
14580: LIST
14581: LIST
14582: LIST
14583: LIST
14584: LIST
14585: LIST
14586: LIST
14587: LIST
14588: LIST
14589: LIST
14590: LIST
14591: LIST
14592: LIST
14593: LIST
14594: LIST
14595: LIST
14596: LIST
14597: LIST
14598: LIST
14599: LIST
14600: LIST
14601: LIST
14602: PUSH
14603: LD_INT 101
14605: PUSH
14606: LD_INT 102
14608: PUSH
14609: LD_INT 103
14611: PUSH
14612: LD_INT 104
14614: PUSH
14615: LD_INT 105
14617: PUSH
14618: LD_INT 106
14620: PUSH
14621: LD_INT 107
14623: PUSH
14624: LD_INT 108
14626: PUSH
14627: LD_INT 109
14629: PUSH
14630: LD_INT 110
14632: PUSH
14633: LD_INT 111
14635: PUSH
14636: LD_INT 112
14638: PUSH
14639: LD_INT 113
14641: PUSH
14642: LD_INT 114
14644: PUSH
14645: EMPTY
14646: LIST
14647: LIST
14648: LIST
14649: LIST
14650: LIST
14651: LIST
14652: LIST
14653: LIST
14654: LIST
14655: LIST
14656: LIST
14657: LIST
14658: LIST
14659: LIST
14660: PUSH
14661: EMPTY
14662: LIST
14663: LIST
14664: ST_TO_ADDR
14665: GO 15612
14667: LD_INT 15
14669: DOUBLE
14670: EQUAL
14671: IFTRUE 14675
14673: GO 14887
14675: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
14676: LD_ADDR_VAR 0 1
14680: PUSH
14681: LD_INT 1
14683: PUSH
14684: LD_INT 2
14686: PUSH
14687: LD_INT 3
14689: PUSH
14690: LD_INT 4
14692: PUSH
14693: LD_INT 5
14695: PUSH
14696: LD_INT 6
14698: PUSH
14699: LD_INT 7
14701: PUSH
14702: LD_INT 8
14704: PUSH
14705: LD_INT 9
14707: PUSH
14708: LD_INT 10
14710: PUSH
14711: LD_INT 11
14713: PUSH
14714: LD_INT 12
14716: PUSH
14717: LD_INT 13
14719: PUSH
14720: LD_INT 14
14722: PUSH
14723: LD_INT 15
14725: PUSH
14726: LD_INT 16
14728: PUSH
14729: LD_INT 17
14731: PUSH
14732: LD_INT 18
14734: PUSH
14735: LD_INT 19
14737: PUSH
14738: LD_INT 20
14740: PUSH
14741: LD_INT 21
14743: PUSH
14744: LD_INT 22
14746: PUSH
14747: LD_INT 23
14749: PUSH
14750: LD_INT 24
14752: PUSH
14753: LD_INT 25
14755: PUSH
14756: LD_INT 26
14758: PUSH
14759: LD_INT 27
14761: PUSH
14762: LD_INT 28
14764: PUSH
14765: LD_INT 29
14767: PUSH
14768: LD_INT 30
14770: PUSH
14771: LD_INT 31
14773: PUSH
14774: LD_INT 32
14776: PUSH
14777: LD_INT 33
14779: PUSH
14780: LD_INT 34
14782: PUSH
14783: LD_INT 36
14785: PUSH
14786: EMPTY
14787: LIST
14788: LIST
14789: LIST
14790: LIST
14791: LIST
14792: LIST
14793: LIST
14794: LIST
14795: LIST
14796: LIST
14797: LIST
14798: LIST
14799: LIST
14800: LIST
14801: LIST
14802: LIST
14803: LIST
14804: LIST
14805: LIST
14806: LIST
14807: LIST
14808: LIST
14809: LIST
14810: LIST
14811: LIST
14812: LIST
14813: LIST
14814: LIST
14815: LIST
14816: LIST
14817: LIST
14818: LIST
14819: LIST
14820: LIST
14821: LIST
14822: PUSH
14823: LD_INT 101
14825: PUSH
14826: LD_INT 102
14828: PUSH
14829: LD_INT 103
14831: PUSH
14832: LD_INT 104
14834: PUSH
14835: LD_INT 105
14837: PUSH
14838: LD_INT 106
14840: PUSH
14841: LD_INT 107
14843: PUSH
14844: LD_INT 108
14846: PUSH
14847: LD_INT 109
14849: PUSH
14850: LD_INT 110
14852: PUSH
14853: LD_INT 111
14855: PUSH
14856: LD_INT 112
14858: PUSH
14859: LD_INT 113
14861: PUSH
14862: LD_INT 114
14864: PUSH
14865: EMPTY
14866: LIST
14867: LIST
14868: LIST
14869: LIST
14870: LIST
14871: LIST
14872: LIST
14873: LIST
14874: LIST
14875: LIST
14876: LIST
14877: LIST
14878: LIST
14879: LIST
14880: PUSH
14881: EMPTY
14882: LIST
14883: LIST
14884: ST_TO_ADDR
14885: GO 15612
14887: LD_INT 16
14889: DOUBLE
14890: EQUAL
14891: IFTRUE 14895
14893: GO 15019
14895: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
14896: LD_ADDR_VAR 0 1
14900: PUSH
14901: LD_INT 2
14903: PUSH
14904: LD_INT 4
14906: PUSH
14907: LD_INT 5
14909: PUSH
14910: LD_INT 7
14912: PUSH
14913: LD_INT 11
14915: PUSH
14916: LD_INT 12
14918: PUSH
14919: LD_INT 15
14921: PUSH
14922: LD_INT 16
14924: PUSH
14925: LD_INT 20
14927: PUSH
14928: LD_INT 21
14930: PUSH
14931: LD_INT 22
14933: PUSH
14934: LD_INT 23
14936: PUSH
14937: LD_INT 25
14939: PUSH
14940: LD_INT 26
14942: PUSH
14943: LD_INT 30
14945: PUSH
14946: LD_INT 31
14948: PUSH
14949: LD_INT 32
14951: PUSH
14952: LD_INT 33
14954: PUSH
14955: LD_INT 34
14957: PUSH
14958: EMPTY
14959: LIST
14960: LIST
14961: LIST
14962: LIST
14963: LIST
14964: LIST
14965: LIST
14966: LIST
14967: LIST
14968: LIST
14969: LIST
14970: LIST
14971: LIST
14972: LIST
14973: LIST
14974: LIST
14975: LIST
14976: LIST
14977: LIST
14978: PUSH
14979: LD_INT 101
14981: PUSH
14982: LD_INT 102
14984: PUSH
14985: LD_INT 103
14987: PUSH
14988: LD_INT 106
14990: PUSH
14991: LD_INT 108
14993: PUSH
14994: LD_INT 112
14996: PUSH
14997: LD_INT 113
14999: PUSH
15000: LD_INT 114
15002: PUSH
15003: EMPTY
15004: LIST
15005: LIST
15006: LIST
15007: LIST
15008: LIST
15009: LIST
15010: LIST
15011: LIST
15012: PUSH
15013: EMPTY
15014: LIST
15015: LIST
15016: ST_TO_ADDR
15017: GO 15612
15019: LD_INT 17
15021: DOUBLE
15022: EQUAL
15023: IFTRUE 15027
15025: GO 15239
15027: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
15028: LD_ADDR_VAR 0 1
15032: PUSH
15033: LD_INT 1
15035: PUSH
15036: LD_INT 2
15038: PUSH
15039: LD_INT 3
15041: PUSH
15042: LD_INT 4
15044: PUSH
15045: LD_INT 5
15047: PUSH
15048: LD_INT 6
15050: PUSH
15051: LD_INT 7
15053: PUSH
15054: LD_INT 8
15056: PUSH
15057: LD_INT 9
15059: PUSH
15060: LD_INT 10
15062: PUSH
15063: LD_INT 11
15065: PUSH
15066: LD_INT 12
15068: PUSH
15069: LD_INT 13
15071: PUSH
15072: LD_INT 14
15074: PUSH
15075: LD_INT 15
15077: PUSH
15078: LD_INT 16
15080: PUSH
15081: LD_INT 17
15083: PUSH
15084: LD_INT 18
15086: PUSH
15087: LD_INT 19
15089: PUSH
15090: LD_INT 20
15092: PUSH
15093: LD_INT 21
15095: PUSH
15096: LD_INT 22
15098: PUSH
15099: LD_INT 23
15101: PUSH
15102: LD_INT 24
15104: PUSH
15105: LD_INT 25
15107: PUSH
15108: LD_INT 26
15110: PUSH
15111: LD_INT 27
15113: PUSH
15114: LD_INT 28
15116: PUSH
15117: LD_INT 29
15119: PUSH
15120: LD_INT 30
15122: PUSH
15123: LD_INT 31
15125: PUSH
15126: LD_INT 32
15128: PUSH
15129: LD_INT 33
15131: PUSH
15132: LD_INT 34
15134: PUSH
15135: LD_INT 36
15137: PUSH
15138: EMPTY
15139: LIST
15140: LIST
15141: LIST
15142: LIST
15143: LIST
15144: LIST
15145: LIST
15146: LIST
15147: LIST
15148: LIST
15149: LIST
15150: LIST
15151: LIST
15152: LIST
15153: LIST
15154: LIST
15155: LIST
15156: LIST
15157: LIST
15158: LIST
15159: LIST
15160: LIST
15161: LIST
15162: LIST
15163: LIST
15164: LIST
15165: LIST
15166: LIST
15167: LIST
15168: LIST
15169: LIST
15170: LIST
15171: LIST
15172: LIST
15173: LIST
15174: PUSH
15175: LD_INT 101
15177: PUSH
15178: LD_INT 102
15180: PUSH
15181: LD_INT 103
15183: PUSH
15184: LD_INT 104
15186: PUSH
15187: LD_INT 105
15189: PUSH
15190: LD_INT 106
15192: PUSH
15193: LD_INT 107
15195: PUSH
15196: LD_INT 108
15198: PUSH
15199: LD_INT 109
15201: PUSH
15202: LD_INT 110
15204: PUSH
15205: LD_INT 111
15207: PUSH
15208: LD_INT 112
15210: PUSH
15211: LD_INT 113
15213: PUSH
15214: LD_INT 114
15216: PUSH
15217: EMPTY
15218: LIST
15219: LIST
15220: LIST
15221: LIST
15222: LIST
15223: LIST
15224: LIST
15225: LIST
15226: LIST
15227: LIST
15228: LIST
15229: LIST
15230: LIST
15231: LIST
15232: PUSH
15233: EMPTY
15234: LIST
15235: LIST
15236: ST_TO_ADDR
15237: GO 15612
15239: LD_INT 18
15241: DOUBLE
15242: EQUAL
15243: IFTRUE 15247
15245: GO 15383
15247: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
15248: LD_ADDR_VAR 0 1
15252: PUSH
15253: LD_INT 2
15255: PUSH
15256: LD_INT 4
15258: PUSH
15259: LD_INT 5
15261: PUSH
15262: LD_INT 7
15264: PUSH
15265: LD_INT 11
15267: PUSH
15268: LD_INT 12
15270: PUSH
15271: LD_INT 15
15273: PUSH
15274: LD_INT 16
15276: PUSH
15277: LD_INT 20
15279: PUSH
15280: LD_INT 21
15282: PUSH
15283: LD_INT 22
15285: PUSH
15286: LD_INT 23
15288: PUSH
15289: LD_INT 25
15291: PUSH
15292: LD_INT 26
15294: PUSH
15295: LD_INT 30
15297: PUSH
15298: LD_INT 31
15300: PUSH
15301: LD_INT 32
15303: PUSH
15304: LD_INT 33
15306: PUSH
15307: LD_INT 34
15309: PUSH
15310: LD_INT 35
15312: PUSH
15313: LD_INT 36
15315: PUSH
15316: EMPTY
15317: LIST
15318: LIST
15319: LIST
15320: LIST
15321: LIST
15322: LIST
15323: LIST
15324: LIST
15325: LIST
15326: LIST
15327: LIST
15328: LIST
15329: LIST
15330: LIST
15331: LIST
15332: LIST
15333: LIST
15334: LIST
15335: LIST
15336: LIST
15337: LIST
15338: PUSH
15339: LD_INT 101
15341: PUSH
15342: LD_INT 102
15344: PUSH
15345: LD_INT 103
15347: PUSH
15348: LD_INT 106
15350: PUSH
15351: LD_INT 108
15353: PUSH
15354: LD_INT 112
15356: PUSH
15357: LD_INT 113
15359: PUSH
15360: LD_INT 114
15362: PUSH
15363: LD_INT 115
15365: PUSH
15366: EMPTY
15367: LIST
15368: LIST
15369: LIST
15370: LIST
15371: LIST
15372: LIST
15373: LIST
15374: LIST
15375: LIST
15376: PUSH
15377: EMPTY
15378: LIST
15379: LIST
15380: ST_TO_ADDR
15381: GO 15612
15383: LD_INT 19
15385: DOUBLE
15386: EQUAL
15387: IFTRUE 15391
15389: GO 15611
15391: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
15392: LD_ADDR_VAR 0 1
15396: PUSH
15397: LD_INT 1
15399: PUSH
15400: LD_INT 2
15402: PUSH
15403: LD_INT 3
15405: PUSH
15406: LD_INT 4
15408: PUSH
15409: LD_INT 5
15411: PUSH
15412: LD_INT 6
15414: PUSH
15415: LD_INT 7
15417: PUSH
15418: LD_INT 8
15420: PUSH
15421: LD_INT 9
15423: PUSH
15424: LD_INT 10
15426: PUSH
15427: LD_INT 11
15429: PUSH
15430: LD_INT 12
15432: PUSH
15433: LD_INT 13
15435: PUSH
15436: LD_INT 14
15438: PUSH
15439: LD_INT 15
15441: PUSH
15442: LD_INT 16
15444: PUSH
15445: LD_INT 17
15447: PUSH
15448: LD_INT 18
15450: PUSH
15451: LD_INT 19
15453: PUSH
15454: LD_INT 20
15456: PUSH
15457: LD_INT 21
15459: PUSH
15460: LD_INT 22
15462: PUSH
15463: LD_INT 23
15465: PUSH
15466: LD_INT 24
15468: PUSH
15469: LD_INT 25
15471: PUSH
15472: LD_INT 26
15474: PUSH
15475: LD_INT 27
15477: PUSH
15478: LD_INT 28
15480: PUSH
15481: LD_INT 29
15483: PUSH
15484: LD_INT 30
15486: PUSH
15487: LD_INT 31
15489: PUSH
15490: LD_INT 32
15492: PUSH
15493: LD_INT 33
15495: PUSH
15496: LD_INT 34
15498: PUSH
15499: LD_INT 35
15501: PUSH
15502: LD_INT 36
15504: PUSH
15505: EMPTY
15506: LIST
15507: LIST
15508: LIST
15509: LIST
15510: LIST
15511: LIST
15512: LIST
15513: LIST
15514: LIST
15515: LIST
15516: LIST
15517: LIST
15518: LIST
15519: LIST
15520: LIST
15521: LIST
15522: LIST
15523: LIST
15524: LIST
15525: LIST
15526: LIST
15527: LIST
15528: LIST
15529: LIST
15530: LIST
15531: LIST
15532: LIST
15533: LIST
15534: LIST
15535: LIST
15536: LIST
15537: LIST
15538: LIST
15539: LIST
15540: LIST
15541: LIST
15542: PUSH
15543: LD_INT 101
15545: PUSH
15546: LD_INT 102
15548: PUSH
15549: LD_INT 103
15551: PUSH
15552: LD_INT 104
15554: PUSH
15555: LD_INT 105
15557: PUSH
15558: LD_INT 106
15560: PUSH
15561: LD_INT 107
15563: PUSH
15564: LD_INT 108
15566: PUSH
15567: LD_INT 109
15569: PUSH
15570: LD_INT 110
15572: PUSH
15573: LD_INT 111
15575: PUSH
15576: LD_INT 112
15578: PUSH
15579: LD_INT 113
15581: PUSH
15582: LD_INT 114
15584: PUSH
15585: LD_INT 115
15587: PUSH
15588: EMPTY
15589: LIST
15590: LIST
15591: LIST
15592: LIST
15593: LIST
15594: LIST
15595: LIST
15596: LIST
15597: LIST
15598: LIST
15599: LIST
15600: LIST
15601: LIST
15602: LIST
15603: LIST
15604: PUSH
15605: EMPTY
15606: LIST
15607: LIST
15608: ST_TO_ADDR
15609: GO 15612
15611: POP
// end ; if result then
15612: LD_VAR 0 1
15616: IFFALSE 15905
// begin normal :=  ;
15618: LD_ADDR_VAR 0 3
15622: PUSH
15623: LD_STRING 
15625: ST_TO_ADDR
// hardcore :=  ;
15626: LD_ADDR_VAR 0 4
15630: PUSH
15631: LD_STRING 
15633: ST_TO_ADDR
// for i = 1 to normalCounter do
15634: LD_ADDR_VAR 0 5
15638: PUSH
15639: DOUBLE
15640: LD_INT 1
15642: DEC
15643: ST_TO_ADDR
15644: LD_EXP 27
15648: PUSH
15649: FOR_TO
15650: IFFALSE 15751
// begin tmp := 0 ;
15652: LD_ADDR_VAR 0 2
15656: PUSH
15657: LD_STRING 0
15659: ST_TO_ADDR
// if result [ 1 ] then
15660: LD_VAR 0 1
15664: PUSH
15665: LD_INT 1
15667: ARRAY
15668: IFFALSE 15733
// if result [ 1 ] [ 1 ] = i then
15670: LD_VAR 0 1
15674: PUSH
15675: LD_INT 1
15677: ARRAY
15678: PUSH
15679: LD_INT 1
15681: ARRAY
15682: PUSH
15683: LD_VAR 0 5
15687: EQUAL
15688: IFFALSE 15733
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
15690: LD_ADDR_VAR 0 1
15694: PUSH
15695: LD_VAR 0 1
15699: PPUSH
15700: LD_INT 1
15702: PPUSH
15703: LD_VAR 0 1
15707: PUSH
15708: LD_INT 1
15710: ARRAY
15711: PPUSH
15712: LD_INT 1
15714: PPUSH
15715: CALL_OW 3
15719: PPUSH
15720: CALL_OW 1
15724: ST_TO_ADDR
// tmp := 1 ;
15725: LD_ADDR_VAR 0 2
15729: PUSH
15730: LD_STRING 1
15732: ST_TO_ADDR
// end ; normal := normal & tmp ;
15733: LD_ADDR_VAR 0 3
15737: PUSH
15738: LD_VAR 0 3
15742: PUSH
15743: LD_VAR 0 2
15747: STR
15748: ST_TO_ADDR
// end ;
15749: GO 15649
15751: POP
15752: POP
// for i = 1 to hardcoreCounter do
15753: LD_ADDR_VAR 0 5
15757: PUSH
15758: DOUBLE
15759: LD_INT 1
15761: DEC
15762: ST_TO_ADDR
15763: LD_EXP 28
15767: PUSH
15768: FOR_TO
15769: IFFALSE 15874
// begin tmp := 0 ;
15771: LD_ADDR_VAR 0 2
15775: PUSH
15776: LD_STRING 0
15778: ST_TO_ADDR
// if result [ 2 ] then
15779: LD_VAR 0 1
15783: PUSH
15784: LD_INT 2
15786: ARRAY
15787: IFFALSE 15856
// if result [ 2 ] [ 1 ] = 100 + i then
15789: LD_VAR 0 1
15793: PUSH
15794: LD_INT 2
15796: ARRAY
15797: PUSH
15798: LD_INT 1
15800: ARRAY
15801: PUSH
15802: LD_INT 100
15804: PUSH
15805: LD_VAR 0 5
15809: PLUS
15810: EQUAL
15811: IFFALSE 15856
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
15813: LD_ADDR_VAR 0 1
15817: PUSH
15818: LD_VAR 0 1
15822: PPUSH
15823: LD_INT 2
15825: PPUSH
15826: LD_VAR 0 1
15830: PUSH
15831: LD_INT 2
15833: ARRAY
15834: PPUSH
15835: LD_INT 1
15837: PPUSH
15838: CALL_OW 3
15842: PPUSH
15843: CALL_OW 1
15847: ST_TO_ADDR
// tmp := 1 ;
15848: LD_ADDR_VAR 0 2
15852: PUSH
15853: LD_STRING 1
15855: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
15856: LD_ADDR_VAR 0 4
15860: PUSH
15861: LD_VAR 0 4
15865: PUSH
15866: LD_VAR 0 2
15870: STR
15871: ST_TO_ADDR
// end ;
15872: GO 15768
15874: POP
15875: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
15876: LD_STRING getStreamItemsFromMission("
15878: PUSH
15879: LD_VAR 0 3
15883: STR
15884: PUSH
15885: LD_STRING ","
15887: STR
15888: PUSH
15889: LD_VAR 0 4
15893: STR
15894: PUSH
15895: LD_STRING ")
15897: STR
15898: PPUSH
15899: CALL_OW 559
// end else
15903: GO 15912
// ToLua ( getStreamItemsFromMission("","") ) ;
15905: LD_STRING getStreamItemsFromMission("","")
15907: PPUSH
15908: CALL_OW 559
// end ;
15912: LD_VAR 0 1
15916: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
15917: LD_VAR 0 2
15921: PUSH
15922: LD_INT 100
15924: EQUAL
15925: IFFALSE 16874
// begin if not StreamModeActive then
15927: LD_EXP 26
15931: NOT
15932: IFFALSE 15942
// StreamModeActive := true ;
15934: LD_ADDR_EXP 26
15938: PUSH
15939: LD_INT 1
15941: ST_TO_ADDR
// if p3 = 0 then
15942: LD_VAR 0 3
15946: PUSH
15947: LD_INT 0
15949: EQUAL
15950: IFFALSE 15956
// InitStreamMode ;
15952: CALL 12202 0 0
// if p3 = 1 then
15956: LD_VAR 0 3
15960: PUSH
15961: LD_INT 1
15963: EQUAL
15964: IFFALSE 15974
// sRocket := true ;
15966: LD_ADDR_EXP 31
15970: PUSH
15971: LD_INT 1
15973: ST_TO_ADDR
// if p3 = 2 then
15974: LD_VAR 0 3
15978: PUSH
15979: LD_INT 2
15981: EQUAL
15982: IFFALSE 15992
// sSpeed := true ;
15984: LD_ADDR_EXP 30
15988: PUSH
15989: LD_INT 1
15991: ST_TO_ADDR
// if p3 = 3 then
15992: LD_VAR 0 3
15996: PUSH
15997: LD_INT 3
15999: EQUAL
16000: IFFALSE 16010
// sEngine := true ;
16002: LD_ADDR_EXP 32
16006: PUSH
16007: LD_INT 1
16009: ST_TO_ADDR
// if p3 = 4 then
16010: LD_VAR 0 3
16014: PUSH
16015: LD_INT 4
16017: EQUAL
16018: IFFALSE 16028
// sSpec := true ;
16020: LD_ADDR_EXP 29
16024: PUSH
16025: LD_INT 1
16027: ST_TO_ADDR
// if p3 = 5 then
16028: LD_VAR 0 3
16032: PUSH
16033: LD_INT 5
16035: EQUAL
16036: IFFALSE 16046
// sLevel := true ;
16038: LD_ADDR_EXP 33
16042: PUSH
16043: LD_INT 1
16045: ST_TO_ADDR
// if p3 = 6 then
16046: LD_VAR 0 3
16050: PUSH
16051: LD_INT 6
16053: EQUAL
16054: IFFALSE 16064
// sArmoury := true ;
16056: LD_ADDR_EXP 34
16060: PUSH
16061: LD_INT 1
16063: ST_TO_ADDR
// if p3 = 7 then
16064: LD_VAR 0 3
16068: PUSH
16069: LD_INT 7
16071: EQUAL
16072: IFFALSE 16082
// sRadar := true ;
16074: LD_ADDR_EXP 35
16078: PUSH
16079: LD_INT 1
16081: ST_TO_ADDR
// if p3 = 8 then
16082: LD_VAR 0 3
16086: PUSH
16087: LD_INT 8
16089: EQUAL
16090: IFFALSE 16100
// sBunker := true ;
16092: LD_ADDR_EXP 36
16096: PUSH
16097: LD_INT 1
16099: ST_TO_ADDR
// if p3 = 9 then
16100: LD_VAR 0 3
16104: PUSH
16105: LD_INT 9
16107: EQUAL
16108: IFFALSE 16118
// sHack := true ;
16110: LD_ADDR_EXP 37
16114: PUSH
16115: LD_INT 1
16117: ST_TO_ADDR
// if p3 = 10 then
16118: LD_VAR 0 3
16122: PUSH
16123: LD_INT 10
16125: EQUAL
16126: IFFALSE 16136
// sFire := true ;
16128: LD_ADDR_EXP 38
16132: PUSH
16133: LD_INT 1
16135: ST_TO_ADDR
// if p3 = 11 then
16136: LD_VAR 0 3
16140: PUSH
16141: LD_INT 11
16143: EQUAL
16144: IFFALSE 16154
// sRefresh := true ;
16146: LD_ADDR_EXP 39
16150: PUSH
16151: LD_INT 1
16153: ST_TO_ADDR
// if p3 = 12 then
16154: LD_VAR 0 3
16158: PUSH
16159: LD_INT 12
16161: EQUAL
16162: IFFALSE 16172
// sExp := true ;
16164: LD_ADDR_EXP 40
16168: PUSH
16169: LD_INT 1
16171: ST_TO_ADDR
// if p3 = 13 then
16172: LD_VAR 0 3
16176: PUSH
16177: LD_INT 13
16179: EQUAL
16180: IFFALSE 16190
// sDepot := true ;
16182: LD_ADDR_EXP 41
16186: PUSH
16187: LD_INT 1
16189: ST_TO_ADDR
// if p3 = 14 then
16190: LD_VAR 0 3
16194: PUSH
16195: LD_INT 14
16197: EQUAL
16198: IFFALSE 16208
// sFlag := true ;
16200: LD_ADDR_EXP 42
16204: PUSH
16205: LD_INT 1
16207: ST_TO_ADDR
// if p3 = 15 then
16208: LD_VAR 0 3
16212: PUSH
16213: LD_INT 15
16215: EQUAL
16216: IFFALSE 16226
// sKamikadze := true ;
16218: LD_ADDR_EXP 50
16222: PUSH
16223: LD_INT 1
16225: ST_TO_ADDR
// if p3 = 16 then
16226: LD_VAR 0 3
16230: PUSH
16231: LD_INT 16
16233: EQUAL
16234: IFFALSE 16244
// sTroll := true ;
16236: LD_ADDR_EXP 51
16240: PUSH
16241: LD_INT 1
16243: ST_TO_ADDR
// if p3 = 17 then
16244: LD_VAR 0 3
16248: PUSH
16249: LD_INT 17
16251: EQUAL
16252: IFFALSE 16262
// sSlow := true ;
16254: LD_ADDR_EXP 52
16258: PUSH
16259: LD_INT 1
16261: ST_TO_ADDR
// if p3 = 18 then
16262: LD_VAR 0 3
16266: PUSH
16267: LD_INT 18
16269: EQUAL
16270: IFFALSE 16280
// sLack := true ;
16272: LD_ADDR_EXP 53
16276: PUSH
16277: LD_INT 1
16279: ST_TO_ADDR
// if p3 = 19 then
16280: LD_VAR 0 3
16284: PUSH
16285: LD_INT 19
16287: EQUAL
16288: IFFALSE 16298
// sTank := true ;
16290: LD_ADDR_EXP 55
16294: PUSH
16295: LD_INT 1
16297: ST_TO_ADDR
// if p3 = 20 then
16298: LD_VAR 0 3
16302: PUSH
16303: LD_INT 20
16305: EQUAL
16306: IFFALSE 16316
// sRemote := true ;
16308: LD_ADDR_EXP 56
16312: PUSH
16313: LD_INT 1
16315: ST_TO_ADDR
// if p3 = 21 then
16316: LD_VAR 0 3
16320: PUSH
16321: LD_INT 21
16323: EQUAL
16324: IFFALSE 16334
// sPowell := true ;
16326: LD_ADDR_EXP 57
16330: PUSH
16331: LD_INT 1
16333: ST_TO_ADDR
// if p3 = 22 then
16334: LD_VAR 0 3
16338: PUSH
16339: LD_INT 22
16341: EQUAL
16342: IFFALSE 16352
// sTeleport := true ;
16344: LD_ADDR_EXP 60
16348: PUSH
16349: LD_INT 1
16351: ST_TO_ADDR
// if p3 = 23 then
16352: LD_VAR 0 3
16356: PUSH
16357: LD_INT 23
16359: EQUAL
16360: IFFALSE 16370
// sOilTower := true ;
16362: LD_ADDR_EXP 62
16366: PUSH
16367: LD_INT 1
16369: ST_TO_ADDR
// if p3 = 24 then
16370: LD_VAR 0 3
16374: PUSH
16375: LD_INT 24
16377: EQUAL
16378: IFFALSE 16388
// sShovel := true ;
16380: LD_ADDR_EXP 63
16384: PUSH
16385: LD_INT 1
16387: ST_TO_ADDR
// if p3 = 25 then
16388: LD_VAR 0 3
16392: PUSH
16393: LD_INT 25
16395: EQUAL
16396: IFFALSE 16406
// sSheik := true ;
16398: LD_ADDR_EXP 64
16402: PUSH
16403: LD_INT 1
16405: ST_TO_ADDR
// if p3 = 26 then
16406: LD_VAR 0 3
16410: PUSH
16411: LD_INT 26
16413: EQUAL
16414: IFFALSE 16424
// sEarthquake := true ;
16416: LD_ADDR_EXP 66
16420: PUSH
16421: LD_INT 1
16423: ST_TO_ADDR
// if p3 = 27 then
16424: LD_VAR 0 3
16428: PUSH
16429: LD_INT 27
16431: EQUAL
16432: IFFALSE 16442
// sAI := true ;
16434: LD_ADDR_EXP 67
16438: PUSH
16439: LD_INT 1
16441: ST_TO_ADDR
// if p3 = 28 then
16442: LD_VAR 0 3
16446: PUSH
16447: LD_INT 28
16449: EQUAL
16450: IFFALSE 16460
// sCargo := true ;
16452: LD_ADDR_EXP 70
16456: PUSH
16457: LD_INT 1
16459: ST_TO_ADDR
// if p3 = 29 then
16460: LD_VAR 0 3
16464: PUSH
16465: LD_INT 29
16467: EQUAL
16468: IFFALSE 16478
// sDLaser := true ;
16470: LD_ADDR_EXP 71
16474: PUSH
16475: LD_INT 1
16477: ST_TO_ADDR
// if p3 = 30 then
16478: LD_VAR 0 3
16482: PUSH
16483: LD_INT 30
16485: EQUAL
16486: IFFALSE 16496
// sExchange := true ;
16488: LD_ADDR_EXP 72
16492: PUSH
16493: LD_INT 1
16495: ST_TO_ADDR
// if p3 = 31 then
16496: LD_VAR 0 3
16500: PUSH
16501: LD_INT 31
16503: EQUAL
16504: IFFALSE 16514
// sFac := true ;
16506: LD_ADDR_EXP 73
16510: PUSH
16511: LD_INT 1
16513: ST_TO_ADDR
// if p3 = 32 then
16514: LD_VAR 0 3
16518: PUSH
16519: LD_INT 32
16521: EQUAL
16522: IFFALSE 16532
// sPower := true ;
16524: LD_ADDR_EXP 74
16528: PUSH
16529: LD_INT 1
16531: ST_TO_ADDR
// if p3 = 33 then
16532: LD_VAR 0 3
16536: PUSH
16537: LD_INT 33
16539: EQUAL
16540: IFFALSE 16550
// sRandom := true ;
16542: LD_ADDR_EXP 75
16546: PUSH
16547: LD_INT 1
16549: ST_TO_ADDR
// if p3 = 34 then
16550: LD_VAR 0 3
16554: PUSH
16555: LD_INT 34
16557: EQUAL
16558: IFFALSE 16568
// sShield := true ;
16560: LD_ADDR_EXP 76
16564: PUSH
16565: LD_INT 1
16567: ST_TO_ADDR
// if p3 = 35 then
16568: LD_VAR 0 3
16572: PUSH
16573: LD_INT 35
16575: EQUAL
16576: IFFALSE 16586
// sTime := true ;
16578: LD_ADDR_EXP 77
16582: PUSH
16583: LD_INT 1
16585: ST_TO_ADDR
// if p3 = 36 then
16586: LD_VAR 0 3
16590: PUSH
16591: LD_INT 36
16593: EQUAL
16594: IFFALSE 16604
// sTools := true ;
16596: LD_ADDR_EXP 78
16600: PUSH
16601: LD_INT 1
16603: ST_TO_ADDR
// if p3 = 101 then
16604: LD_VAR 0 3
16608: PUSH
16609: LD_INT 101
16611: EQUAL
16612: IFFALSE 16622
// sSold := true ;
16614: LD_ADDR_EXP 43
16618: PUSH
16619: LD_INT 1
16621: ST_TO_ADDR
// if p3 = 102 then
16622: LD_VAR 0 3
16626: PUSH
16627: LD_INT 102
16629: EQUAL
16630: IFFALSE 16640
// sDiff := true ;
16632: LD_ADDR_EXP 44
16636: PUSH
16637: LD_INT 1
16639: ST_TO_ADDR
// if p3 = 103 then
16640: LD_VAR 0 3
16644: PUSH
16645: LD_INT 103
16647: EQUAL
16648: IFFALSE 16658
// sFog := true ;
16650: LD_ADDR_EXP 47
16654: PUSH
16655: LD_INT 1
16657: ST_TO_ADDR
// if p3 = 104 then
16658: LD_VAR 0 3
16662: PUSH
16663: LD_INT 104
16665: EQUAL
16666: IFFALSE 16676
// sReset := true ;
16668: LD_ADDR_EXP 48
16672: PUSH
16673: LD_INT 1
16675: ST_TO_ADDR
// if p3 = 105 then
16676: LD_VAR 0 3
16680: PUSH
16681: LD_INT 105
16683: EQUAL
16684: IFFALSE 16694
// sSun := true ;
16686: LD_ADDR_EXP 49
16690: PUSH
16691: LD_INT 1
16693: ST_TO_ADDR
// if p3 = 106 then
16694: LD_VAR 0 3
16698: PUSH
16699: LD_INT 106
16701: EQUAL
16702: IFFALSE 16712
// sTiger := true ;
16704: LD_ADDR_EXP 45
16708: PUSH
16709: LD_INT 1
16711: ST_TO_ADDR
// if p3 = 107 then
16712: LD_VAR 0 3
16716: PUSH
16717: LD_INT 107
16719: EQUAL
16720: IFFALSE 16730
// sBomb := true ;
16722: LD_ADDR_EXP 46
16726: PUSH
16727: LD_INT 1
16729: ST_TO_ADDR
// if p3 = 108 then
16730: LD_VAR 0 3
16734: PUSH
16735: LD_INT 108
16737: EQUAL
16738: IFFALSE 16748
// sWound := true ;
16740: LD_ADDR_EXP 54
16744: PUSH
16745: LD_INT 1
16747: ST_TO_ADDR
// if p3 = 109 then
16748: LD_VAR 0 3
16752: PUSH
16753: LD_INT 109
16755: EQUAL
16756: IFFALSE 16766
// sBetray := true ;
16758: LD_ADDR_EXP 58
16762: PUSH
16763: LD_INT 1
16765: ST_TO_ADDR
// if p3 = 110 then
16766: LD_VAR 0 3
16770: PUSH
16771: LD_INT 110
16773: EQUAL
16774: IFFALSE 16784
// sContamin := true ;
16776: LD_ADDR_EXP 59
16780: PUSH
16781: LD_INT 1
16783: ST_TO_ADDR
// if p3 = 111 then
16784: LD_VAR 0 3
16788: PUSH
16789: LD_INT 111
16791: EQUAL
16792: IFFALSE 16802
// sOil := true ;
16794: LD_ADDR_EXP 61
16798: PUSH
16799: LD_INT 1
16801: ST_TO_ADDR
// if p3 = 112 then
16802: LD_VAR 0 3
16806: PUSH
16807: LD_INT 112
16809: EQUAL
16810: IFFALSE 16820
// sStu := true ;
16812: LD_ADDR_EXP 65
16816: PUSH
16817: LD_INT 1
16819: ST_TO_ADDR
// if p3 = 113 then
16820: LD_VAR 0 3
16824: PUSH
16825: LD_INT 113
16827: EQUAL
16828: IFFALSE 16838
// sBazooka := true ;
16830: LD_ADDR_EXP 68
16834: PUSH
16835: LD_INT 1
16837: ST_TO_ADDR
// if p3 = 114 then
16838: LD_VAR 0 3
16842: PUSH
16843: LD_INT 114
16845: EQUAL
16846: IFFALSE 16856
// sMortar := true ;
16848: LD_ADDR_EXP 69
16852: PUSH
16853: LD_INT 1
16855: ST_TO_ADDR
// if p3 = 115 then
16856: LD_VAR 0 3
16860: PUSH
16861: LD_INT 115
16863: EQUAL
16864: IFFALSE 16874
// sRanger := true ;
16866: LD_ADDR_EXP 79
16870: PUSH
16871: LD_INT 1
16873: ST_TO_ADDR
// end ; end ;
16874: PPOPN 6
16876: END
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
16877: LD_EXP 26
16881: PUSH
16882: LD_EXP 31
16886: AND
16887: IFFALSE 17011
16889: GO 16891
16891: DISABLE
16892: LD_INT 0
16894: PPUSH
16895: PPUSH
// begin enable ;
16896: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
16897: LD_ADDR_VAR 0 2
16901: PUSH
16902: LD_INT 22
16904: PUSH
16905: LD_OWVAR 2
16909: PUSH
16910: EMPTY
16911: LIST
16912: LIST
16913: PUSH
16914: LD_INT 2
16916: PUSH
16917: LD_INT 34
16919: PUSH
16920: LD_INT 7
16922: PUSH
16923: EMPTY
16924: LIST
16925: LIST
16926: PUSH
16927: LD_INT 34
16929: PUSH
16930: LD_INT 45
16932: PUSH
16933: EMPTY
16934: LIST
16935: LIST
16936: PUSH
16937: LD_INT 34
16939: PUSH
16940: LD_INT 28
16942: PUSH
16943: EMPTY
16944: LIST
16945: LIST
16946: PUSH
16947: LD_INT 34
16949: PUSH
16950: LD_INT 47
16952: PUSH
16953: EMPTY
16954: LIST
16955: LIST
16956: PUSH
16957: EMPTY
16958: LIST
16959: LIST
16960: LIST
16961: LIST
16962: LIST
16963: PUSH
16964: EMPTY
16965: LIST
16966: LIST
16967: PPUSH
16968: CALL_OW 69
16972: ST_TO_ADDR
// if not tmp then
16973: LD_VAR 0 2
16977: NOT
16978: IFFALSE 16982
// exit ;
16980: GO 17011
// for i in tmp do
16982: LD_ADDR_VAR 0 1
16986: PUSH
16987: LD_VAR 0 2
16991: PUSH
16992: FOR_IN
16993: IFFALSE 17009
// begin SetLives ( i , 0 ) ;
16995: LD_VAR 0 1
16999: PPUSH
17000: LD_INT 0
17002: PPUSH
17003: CALL_OW 234
// end ;
17007: GO 16992
17009: POP
17010: POP
// end ;
17011: PPOPN 2
17013: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
17014: LD_EXP 26
17018: PUSH
17019: LD_EXP 32
17023: AND
17024: IFFALSE 17108
17026: GO 17028
17028: DISABLE
17029: LD_INT 0
17031: PPUSH
17032: PPUSH
// begin enable ;
17033: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
17034: LD_ADDR_VAR 0 2
17038: PUSH
17039: LD_INT 22
17041: PUSH
17042: LD_OWVAR 2
17046: PUSH
17047: EMPTY
17048: LIST
17049: LIST
17050: PUSH
17051: LD_INT 32
17053: PUSH
17054: LD_INT 3
17056: PUSH
17057: EMPTY
17058: LIST
17059: LIST
17060: PUSH
17061: EMPTY
17062: LIST
17063: LIST
17064: PPUSH
17065: CALL_OW 69
17069: ST_TO_ADDR
// if not tmp then
17070: LD_VAR 0 2
17074: NOT
17075: IFFALSE 17079
// exit ;
17077: GO 17108
// for i in tmp do
17079: LD_ADDR_VAR 0 1
17083: PUSH
17084: LD_VAR 0 2
17088: PUSH
17089: FOR_IN
17090: IFFALSE 17106
// begin SetLives ( i , 0 ) ;
17092: LD_VAR 0 1
17096: PPUSH
17097: LD_INT 0
17099: PPUSH
17100: CALL_OW 234
// end ;
17104: GO 17089
17106: POP
17107: POP
// end ;
17108: PPOPN 2
17110: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
17111: LD_EXP 26
17115: PUSH
17116: LD_EXP 29
17120: AND
17121: IFFALSE 17214
17123: GO 17125
17125: DISABLE
17126: LD_INT 0
17128: PPUSH
// begin enable ;
17129: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
17130: LD_ADDR_VAR 0 1
17134: PUSH
17135: LD_INT 22
17137: PUSH
17138: LD_OWVAR 2
17142: PUSH
17143: EMPTY
17144: LIST
17145: LIST
17146: PUSH
17147: LD_INT 2
17149: PUSH
17150: LD_INT 25
17152: PUSH
17153: LD_INT 5
17155: PUSH
17156: EMPTY
17157: LIST
17158: LIST
17159: PUSH
17160: LD_INT 25
17162: PUSH
17163: LD_INT 9
17165: PUSH
17166: EMPTY
17167: LIST
17168: LIST
17169: PUSH
17170: LD_INT 25
17172: PUSH
17173: LD_INT 8
17175: PUSH
17176: EMPTY
17177: LIST
17178: LIST
17179: PUSH
17180: EMPTY
17181: LIST
17182: LIST
17183: LIST
17184: LIST
17185: PUSH
17186: EMPTY
17187: LIST
17188: LIST
17189: PPUSH
17190: CALL_OW 69
17194: PUSH
17195: FOR_IN
17196: IFFALSE 17212
// begin SetClass ( i , 1 ) ;
17198: LD_VAR 0 1
17202: PPUSH
17203: LD_INT 1
17205: PPUSH
17206: CALL_OW 336
// end ;
17210: GO 17195
17212: POP
17213: POP
// end ;
17214: PPOPN 1
17216: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
17217: LD_EXP 26
17221: PUSH
17222: LD_EXP 30
17226: AND
17227: PUSH
17228: LD_OWVAR 65
17232: PUSH
17233: LD_INT 7
17235: LESS
17236: AND
17237: IFFALSE 17251
17239: GO 17241
17241: DISABLE
// begin enable ;
17242: ENABLE
// game_speed := 7 ;
17243: LD_ADDR_OWVAR 65
17247: PUSH
17248: LD_INT 7
17250: ST_TO_ADDR
// end ;
17251: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
17252: LD_EXP 26
17256: PUSH
17257: LD_EXP 33
17261: AND
17262: IFFALSE 17464
17264: GO 17266
17266: DISABLE
17267: LD_INT 0
17269: PPUSH
17270: PPUSH
17271: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
17272: LD_ADDR_VAR 0 3
17276: PUSH
17277: LD_INT 81
17279: PUSH
17280: LD_OWVAR 2
17284: PUSH
17285: EMPTY
17286: LIST
17287: LIST
17288: PUSH
17289: LD_INT 21
17291: PUSH
17292: LD_INT 1
17294: PUSH
17295: EMPTY
17296: LIST
17297: LIST
17298: PUSH
17299: EMPTY
17300: LIST
17301: LIST
17302: PPUSH
17303: CALL_OW 69
17307: ST_TO_ADDR
// if not tmp then
17308: LD_VAR 0 3
17312: NOT
17313: IFFALSE 17317
// exit ;
17315: GO 17464
// if tmp > 5 then
17317: LD_VAR 0 3
17321: PUSH
17322: LD_INT 5
17324: GREATER
17325: IFFALSE 17337
// k := 5 else
17327: LD_ADDR_VAR 0 2
17331: PUSH
17332: LD_INT 5
17334: ST_TO_ADDR
17335: GO 17347
// k := tmp ;
17337: LD_ADDR_VAR 0 2
17341: PUSH
17342: LD_VAR 0 3
17346: ST_TO_ADDR
// for i := 1 to k do
17347: LD_ADDR_VAR 0 1
17351: PUSH
17352: DOUBLE
17353: LD_INT 1
17355: DEC
17356: ST_TO_ADDR
17357: LD_VAR 0 2
17361: PUSH
17362: FOR_TO
17363: IFFALSE 17462
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
17365: LD_VAR 0 3
17369: PUSH
17370: LD_VAR 0 1
17374: ARRAY
17375: PPUSH
17376: LD_VAR 0 1
17380: PUSH
17381: LD_INT 4
17383: MOD
17384: PUSH
17385: LD_INT 1
17387: PLUS
17388: PPUSH
17389: CALL_OW 259
17393: PUSH
17394: LD_INT 10
17396: LESS
17397: IFFALSE 17460
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
17399: LD_VAR 0 3
17403: PUSH
17404: LD_VAR 0 1
17408: ARRAY
17409: PPUSH
17410: LD_VAR 0 1
17414: PUSH
17415: LD_INT 4
17417: MOD
17418: PUSH
17419: LD_INT 1
17421: PLUS
17422: PPUSH
17423: LD_VAR 0 3
17427: PUSH
17428: LD_VAR 0 1
17432: ARRAY
17433: PPUSH
17434: LD_VAR 0 1
17438: PUSH
17439: LD_INT 4
17441: MOD
17442: PUSH
17443: LD_INT 1
17445: PLUS
17446: PPUSH
17447: CALL_OW 259
17451: PUSH
17452: LD_INT 1
17454: PLUS
17455: PPUSH
17456: CALL_OW 237
17460: GO 17362
17462: POP
17463: POP
// end ;
17464: PPOPN 3
17466: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
17467: LD_EXP 26
17471: PUSH
17472: LD_EXP 34
17476: AND
17477: IFFALSE 17497
17479: GO 17481
17481: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
17482: LD_INT 4
17484: PPUSH
17485: LD_OWVAR 2
17489: PPUSH
17490: LD_INT 0
17492: PPUSH
17493: CALL_OW 324
17497: END
// every 0 0$1 trigger StreamModeActive and sShovel do
17498: LD_EXP 26
17502: PUSH
17503: LD_EXP 63
17507: AND
17508: IFFALSE 17528
17510: GO 17512
17512: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
17513: LD_INT 19
17515: PPUSH
17516: LD_OWVAR 2
17520: PPUSH
17521: LD_INT 0
17523: PPUSH
17524: CALL_OW 324
17528: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
17529: LD_EXP 26
17533: PUSH
17534: LD_EXP 35
17538: AND
17539: IFFALSE 17641
17541: GO 17543
17543: DISABLE
17544: LD_INT 0
17546: PPUSH
17547: PPUSH
// begin enable ;
17548: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
17549: LD_ADDR_VAR 0 2
17553: PUSH
17554: LD_INT 22
17556: PUSH
17557: LD_OWVAR 2
17561: PUSH
17562: EMPTY
17563: LIST
17564: LIST
17565: PUSH
17566: LD_INT 2
17568: PUSH
17569: LD_INT 34
17571: PUSH
17572: LD_INT 11
17574: PUSH
17575: EMPTY
17576: LIST
17577: LIST
17578: PUSH
17579: LD_INT 34
17581: PUSH
17582: LD_INT 30
17584: PUSH
17585: EMPTY
17586: LIST
17587: LIST
17588: PUSH
17589: EMPTY
17590: LIST
17591: LIST
17592: LIST
17593: PUSH
17594: EMPTY
17595: LIST
17596: LIST
17597: PPUSH
17598: CALL_OW 69
17602: ST_TO_ADDR
// if not tmp then
17603: LD_VAR 0 2
17607: NOT
17608: IFFALSE 17612
// exit ;
17610: GO 17641
// for i in tmp do
17612: LD_ADDR_VAR 0 1
17616: PUSH
17617: LD_VAR 0 2
17621: PUSH
17622: FOR_IN
17623: IFFALSE 17639
// begin SetLives ( i , 0 ) ;
17625: LD_VAR 0 1
17629: PPUSH
17630: LD_INT 0
17632: PPUSH
17633: CALL_OW 234
// end ;
17637: GO 17622
17639: POP
17640: POP
// end ;
17641: PPOPN 2
17643: END
// every 0 0$1 trigger StreamModeActive and sBunker do
17644: LD_EXP 26
17648: PUSH
17649: LD_EXP 36
17653: AND
17654: IFFALSE 17674
17656: GO 17658
17658: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
17659: LD_INT 32
17661: PPUSH
17662: LD_OWVAR 2
17666: PPUSH
17667: LD_INT 0
17669: PPUSH
17670: CALL_OW 324
17674: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
17675: LD_EXP 26
17679: PUSH
17680: LD_EXP 37
17684: AND
17685: IFFALSE 17866
17687: GO 17689
17689: DISABLE
17690: LD_INT 0
17692: PPUSH
17693: PPUSH
17694: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
17695: LD_ADDR_VAR 0 2
17699: PUSH
17700: LD_INT 22
17702: PUSH
17703: LD_OWVAR 2
17707: PUSH
17708: EMPTY
17709: LIST
17710: LIST
17711: PUSH
17712: LD_INT 33
17714: PUSH
17715: LD_INT 3
17717: PUSH
17718: EMPTY
17719: LIST
17720: LIST
17721: PUSH
17722: EMPTY
17723: LIST
17724: LIST
17725: PPUSH
17726: CALL_OW 69
17730: ST_TO_ADDR
// if not tmp then
17731: LD_VAR 0 2
17735: NOT
17736: IFFALSE 17740
// exit ;
17738: GO 17866
// side := 0 ;
17740: LD_ADDR_VAR 0 3
17744: PUSH
17745: LD_INT 0
17747: ST_TO_ADDR
// for i := 1 to 8 do
17748: LD_ADDR_VAR 0 1
17752: PUSH
17753: DOUBLE
17754: LD_INT 1
17756: DEC
17757: ST_TO_ADDR
17758: LD_INT 8
17760: PUSH
17761: FOR_TO
17762: IFFALSE 17810
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
17764: LD_OWVAR 2
17768: PUSH
17769: LD_VAR 0 1
17773: NONEQUAL
17774: PUSH
17775: LD_OWVAR 2
17779: PPUSH
17780: LD_VAR 0 1
17784: PPUSH
17785: CALL_OW 81
17789: PUSH
17790: LD_INT 2
17792: EQUAL
17793: AND
17794: IFFALSE 17808
// begin side := i ;
17796: LD_ADDR_VAR 0 3
17800: PUSH
17801: LD_VAR 0 1
17805: ST_TO_ADDR
// break ;
17806: GO 17810
// end ;
17808: GO 17761
17810: POP
17811: POP
// if not side then
17812: LD_VAR 0 3
17816: NOT
17817: IFFALSE 17821
// exit ;
17819: GO 17866
// for i := 1 to tmp do
17821: LD_ADDR_VAR 0 1
17825: PUSH
17826: DOUBLE
17827: LD_INT 1
17829: DEC
17830: ST_TO_ADDR
17831: LD_VAR 0 2
17835: PUSH
17836: FOR_TO
17837: IFFALSE 17864
// if Prob ( 30 ) then
17839: LD_INT 30
17841: PPUSH
17842: CALL_OW 13
17846: IFFALSE 17862
// SetSide ( i , side ) ;
17848: LD_VAR 0 1
17852: PPUSH
17853: LD_VAR 0 3
17857: PPUSH
17858: CALL_OW 235
17862: GO 17836
17864: POP
17865: POP
// end ;
17866: PPOPN 3
17868: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
17869: LD_EXP 26
17873: PUSH
17874: LD_EXP 39
17878: AND
17879: IFFALSE 17998
17881: GO 17883
17883: DISABLE
17884: LD_INT 0
17886: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
17887: LD_ADDR_VAR 0 1
17891: PUSH
17892: LD_INT 22
17894: PUSH
17895: LD_OWVAR 2
17899: PUSH
17900: EMPTY
17901: LIST
17902: LIST
17903: PUSH
17904: LD_INT 21
17906: PUSH
17907: LD_INT 1
17909: PUSH
17910: EMPTY
17911: LIST
17912: LIST
17913: PUSH
17914: LD_INT 3
17916: PUSH
17917: LD_INT 23
17919: PUSH
17920: LD_INT 0
17922: PUSH
17923: EMPTY
17924: LIST
17925: LIST
17926: PUSH
17927: EMPTY
17928: LIST
17929: LIST
17930: PUSH
17931: EMPTY
17932: LIST
17933: LIST
17934: LIST
17935: PPUSH
17936: CALL_OW 69
17940: PUSH
17941: FOR_IN
17942: IFFALSE 17996
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
17944: LD_VAR 0 1
17948: PPUSH
17949: CALL_OW 257
17953: PUSH
17954: LD_INT 1
17956: PUSH
17957: LD_INT 2
17959: PUSH
17960: LD_INT 3
17962: PUSH
17963: LD_INT 4
17965: PUSH
17966: EMPTY
17967: LIST
17968: LIST
17969: LIST
17970: LIST
17971: IN
17972: IFFALSE 17994
// SetClass ( un , rand ( 1 , 4 ) ) ;
17974: LD_VAR 0 1
17978: PPUSH
17979: LD_INT 1
17981: PPUSH
17982: LD_INT 4
17984: PPUSH
17985: CALL_OW 12
17989: PPUSH
17990: CALL_OW 336
17994: GO 17941
17996: POP
17997: POP
// end ;
17998: PPOPN 1
18000: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
18001: LD_EXP 26
18005: PUSH
18006: LD_EXP 38
18010: AND
18011: IFFALSE 18090
18013: GO 18015
18015: DISABLE
18016: LD_INT 0
18018: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18019: LD_ADDR_VAR 0 1
18023: PUSH
18024: LD_INT 22
18026: PUSH
18027: LD_OWVAR 2
18031: PUSH
18032: EMPTY
18033: LIST
18034: LIST
18035: PUSH
18036: LD_INT 21
18038: PUSH
18039: LD_INT 3
18041: PUSH
18042: EMPTY
18043: LIST
18044: LIST
18045: PUSH
18046: EMPTY
18047: LIST
18048: LIST
18049: PPUSH
18050: CALL_OW 69
18054: ST_TO_ADDR
// if not tmp then
18055: LD_VAR 0 1
18059: NOT
18060: IFFALSE 18064
// exit ;
18062: GO 18090
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
18064: LD_VAR 0 1
18068: PUSH
18069: LD_INT 1
18071: PPUSH
18072: LD_VAR 0 1
18076: PPUSH
18077: CALL_OW 12
18081: ARRAY
18082: PPUSH
18083: LD_INT 100
18085: PPUSH
18086: CALL_OW 234
// end ;
18090: PPOPN 1
18092: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
18093: LD_EXP 26
18097: PUSH
18098: LD_EXP 40
18102: AND
18103: IFFALSE 18201
18105: GO 18107
18107: DISABLE
18108: LD_INT 0
18110: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18111: LD_ADDR_VAR 0 1
18115: PUSH
18116: LD_INT 22
18118: PUSH
18119: LD_OWVAR 2
18123: PUSH
18124: EMPTY
18125: LIST
18126: LIST
18127: PUSH
18128: LD_INT 21
18130: PUSH
18131: LD_INT 1
18133: PUSH
18134: EMPTY
18135: LIST
18136: LIST
18137: PUSH
18138: EMPTY
18139: LIST
18140: LIST
18141: PPUSH
18142: CALL_OW 69
18146: ST_TO_ADDR
// if not tmp then
18147: LD_VAR 0 1
18151: NOT
18152: IFFALSE 18156
// exit ;
18154: GO 18201
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
18156: LD_VAR 0 1
18160: PUSH
18161: LD_INT 1
18163: PPUSH
18164: LD_VAR 0 1
18168: PPUSH
18169: CALL_OW 12
18173: ARRAY
18174: PPUSH
18175: LD_INT 1
18177: PPUSH
18178: LD_INT 4
18180: PPUSH
18181: CALL_OW 12
18185: PPUSH
18186: LD_INT 3000
18188: PPUSH
18189: LD_INT 9000
18191: PPUSH
18192: CALL_OW 12
18196: PPUSH
18197: CALL_OW 492
// end ;
18201: PPOPN 1
18203: END
// every 0 0$1 trigger StreamModeActive and sDepot do
18204: LD_EXP 26
18208: PUSH
18209: LD_EXP 41
18213: AND
18214: IFFALSE 18234
18216: GO 18218
18218: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
18219: LD_INT 1
18221: PPUSH
18222: LD_OWVAR 2
18226: PPUSH
18227: LD_INT 0
18229: PPUSH
18230: CALL_OW 324
18234: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
18235: LD_EXP 26
18239: PUSH
18240: LD_EXP 42
18244: AND
18245: IFFALSE 18328
18247: GO 18249
18249: DISABLE
18250: LD_INT 0
18252: PPUSH
18253: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18254: LD_ADDR_VAR 0 2
18258: PUSH
18259: LD_INT 22
18261: PUSH
18262: LD_OWVAR 2
18266: PUSH
18267: EMPTY
18268: LIST
18269: LIST
18270: PUSH
18271: LD_INT 21
18273: PUSH
18274: LD_INT 3
18276: PUSH
18277: EMPTY
18278: LIST
18279: LIST
18280: PUSH
18281: EMPTY
18282: LIST
18283: LIST
18284: PPUSH
18285: CALL_OW 69
18289: ST_TO_ADDR
// if not tmp then
18290: LD_VAR 0 2
18294: NOT
18295: IFFALSE 18299
// exit ;
18297: GO 18328
// for i in tmp do
18299: LD_ADDR_VAR 0 1
18303: PUSH
18304: LD_VAR 0 2
18308: PUSH
18309: FOR_IN
18310: IFFALSE 18326
// SetBLevel ( i , 10 ) ;
18312: LD_VAR 0 1
18316: PPUSH
18317: LD_INT 10
18319: PPUSH
18320: CALL_OW 241
18324: GO 18309
18326: POP
18327: POP
// end ;
18328: PPOPN 2
18330: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
18331: LD_EXP 26
18335: PUSH
18336: LD_EXP 43
18340: AND
18341: IFFALSE 18452
18343: GO 18345
18345: DISABLE
18346: LD_INT 0
18348: PPUSH
18349: PPUSH
18350: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18351: LD_ADDR_VAR 0 3
18355: PUSH
18356: LD_INT 22
18358: PUSH
18359: LD_OWVAR 2
18363: PUSH
18364: EMPTY
18365: LIST
18366: LIST
18367: PUSH
18368: LD_INT 25
18370: PUSH
18371: LD_INT 1
18373: PUSH
18374: EMPTY
18375: LIST
18376: LIST
18377: PUSH
18378: EMPTY
18379: LIST
18380: LIST
18381: PPUSH
18382: CALL_OW 69
18386: ST_TO_ADDR
// if not tmp then
18387: LD_VAR 0 3
18391: NOT
18392: IFFALSE 18396
// exit ;
18394: GO 18452
// un := tmp [ rand ( 1 , tmp ) ] ;
18396: LD_ADDR_VAR 0 2
18400: PUSH
18401: LD_VAR 0 3
18405: PUSH
18406: LD_INT 1
18408: PPUSH
18409: LD_VAR 0 3
18413: PPUSH
18414: CALL_OW 12
18418: ARRAY
18419: ST_TO_ADDR
// if Crawls ( un ) then
18420: LD_VAR 0 2
18424: PPUSH
18425: CALL_OW 318
18429: IFFALSE 18440
// ComWalk ( un ) ;
18431: LD_VAR 0 2
18435: PPUSH
18436: CALL_OW 138
// SetClass ( un , class_sniper ) ;
18440: LD_VAR 0 2
18444: PPUSH
18445: LD_INT 5
18447: PPUSH
18448: CALL_OW 336
// end ;
18452: PPOPN 3
18454: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
18455: LD_EXP 26
18459: PUSH
18460: LD_EXP 44
18464: AND
18465: PUSH
18466: LD_OWVAR 67
18470: PUSH
18471: LD_INT 3
18473: LESS
18474: AND
18475: IFFALSE 18494
18477: GO 18479
18479: DISABLE
// Difficulty := Difficulty + 1 ;
18480: LD_ADDR_OWVAR 67
18484: PUSH
18485: LD_OWVAR 67
18489: PUSH
18490: LD_INT 1
18492: PLUS
18493: ST_TO_ADDR
18494: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
18495: LD_EXP 26
18499: PUSH
18500: LD_EXP 45
18504: AND
18505: IFFALSE 18608
18507: GO 18509
18509: DISABLE
18510: LD_INT 0
18512: PPUSH
// begin for i := 1 to 5 do
18513: LD_ADDR_VAR 0 1
18517: PUSH
18518: DOUBLE
18519: LD_INT 1
18521: DEC
18522: ST_TO_ADDR
18523: LD_INT 5
18525: PUSH
18526: FOR_TO
18527: IFFALSE 18606
// begin uc_nation := nation_nature ;
18529: LD_ADDR_OWVAR 21
18533: PUSH
18534: LD_INT 0
18536: ST_TO_ADDR
// uc_side := 0 ;
18537: LD_ADDR_OWVAR 20
18541: PUSH
18542: LD_INT 0
18544: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18545: LD_ADDR_OWVAR 29
18549: PUSH
18550: LD_INT 12
18552: PUSH
18553: LD_INT 12
18555: PUSH
18556: EMPTY
18557: LIST
18558: LIST
18559: ST_TO_ADDR
// hc_agressivity := 20 ;
18560: LD_ADDR_OWVAR 35
18564: PUSH
18565: LD_INT 20
18567: ST_TO_ADDR
// hc_class := class_tiger ;
18568: LD_ADDR_OWVAR 28
18572: PUSH
18573: LD_INT 14
18575: ST_TO_ADDR
// hc_gallery :=  ;
18576: LD_ADDR_OWVAR 33
18580: PUSH
18581: LD_STRING 
18583: ST_TO_ADDR
// hc_name :=  ;
18584: LD_ADDR_OWVAR 26
18588: PUSH
18589: LD_STRING 
18591: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
18592: CALL_OW 44
18596: PPUSH
18597: LD_INT 0
18599: PPUSH
18600: CALL_OW 51
// end ;
18604: GO 18526
18606: POP
18607: POP
// end ;
18608: PPOPN 1
18610: END
// every 0 0$1 trigger StreamModeActive and sBomb do
18611: LD_EXP 26
18615: PUSH
18616: LD_EXP 46
18620: AND
18621: IFFALSE 18630
18623: GO 18625
18625: DISABLE
// StreamSibBomb ;
18626: CALL 18631 0 0
18630: END
// export function StreamSibBomb ; var i , x , y ; begin
18631: LD_INT 0
18633: PPUSH
18634: PPUSH
18635: PPUSH
18636: PPUSH
// result := false ;
18637: LD_ADDR_VAR 0 1
18641: PUSH
18642: LD_INT 0
18644: ST_TO_ADDR
// for i := 1 to 16 do
18645: LD_ADDR_VAR 0 2
18649: PUSH
18650: DOUBLE
18651: LD_INT 1
18653: DEC
18654: ST_TO_ADDR
18655: LD_INT 16
18657: PUSH
18658: FOR_TO
18659: IFFALSE 18858
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18661: LD_ADDR_VAR 0 3
18665: PUSH
18666: LD_INT 10
18668: PUSH
18669: LD_INT 20
18671: PUSH
18672: LD_INT 30
18674: PUSH
18675: LD_INT 40
18677: PUSH
18678: LD_INT 50
18680: PUSH
18681: LD_INT 60
18683: PUSH
18684: LD_INT 70
18686: PUSH
18687: LD_INT 80
18689: PUSH
18690: LD_INT 90
18692: PUSH
18693: LD_INT 100
18695: PUSH
18696: LD_INT 110
18698: PUSH
18699: LD_INT 120
18701: PUSH
18702: LD_INT 130
18704: PUSH
18705: LD_INT 140
18707: PUSH
18708: LD_INT 150
18710: PUSH
18711: EMPTY
18712: LIST
18713: LIST
18714: LIST
18715: LIST
18716: LIST
18717: LIST
18718: LIST
18719: LIST
18720: LIST
18721: LIST
18722: LIST
18723: LIST
18724: LIST
18725: LIST
18726: LIST
18727: PUSH
18728: LD_INT 1
18730: PPUSH
18731: LD_INT 15
18733: PPUSH
18734: CALL_OW 12
18738: ARRAY
18739: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18740: LD_ADDR_VAR 0 4
18744: PUSH
18745: LD_INT 10
18747: PUSH
18748: LD_INT 20
18750: PUSH
18751: LD_INT 30
18753: PUSH
18754: LD_INT 40
18756: PUSH
18757: LD_INT 50
18759: PUSH
18760: LD_INT 60
18762: PUSH
18763: LD_INT 70
18765: PUSH
18766: LD_INT 80
18768: PUSH
18769: LD_INT 90
18771: PUSH
18772: LD_INT 100
18774: PUSH
18775: LD_INT 110
18777: PUSH
18778: LD_INT 120
18780: PUSH
18781: LD_INT 130
18783: PUSH
18784: LD_INT 140
18786: PUSH
18787: LD_INT 150
18789: PUSH
18790: EMPTY
18791: LIST
18792: LIST
18793: LIST
18794: LIST
18795: LIST
18796: LIST
18797: LIST
18798: LIST
18799: LIST
18800: LIST
18801: LIST
18802: LIST
18803: LIST
18804: LIST
18805: LIST
18806: PUSH
18807: LD_INT 1
18809: PPUSH
18810: LD_INT 15
18812: PPUSH
18813: CALL_OW 12
18817: ARRAY
18818: ST_TO_ADDR
// if ValidHex ( x , y ) then
18819: LD_VAR 0 3
18823: PPUSH
18824: LD_VAR 0 4
18828: PPUSH
18829: CALL_OW 488
18833: IFFALSE 18856
// begin result := [ x , y ] ;
18835: LD_ADDR_VAR 0 1
18839: PUSH
18840: LD_VAR 0 3
18844: PUSH
18845: LD_VAR 0 4
18849: PUSH
18850: EMPTY
18851: LIST
18852: LIST
18853: ST_TO_ADDR
// break ;
18854: GO 18858
// end ; end ;
18856: GO 18658
18858: POP
18859: POP
// if result then
18860: LD_VAR 0 1
18864: IFFALSE 18924
// begin ToLua ( playSibBomb() ) ;
18866: LD_STRING playSibBomb()
18868: PPUSH
18869: CALL_OW 559
// wait ( 0 0$14 ) ;
18873: LD_INT 490
18875: PPUSH
18876: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
18880: LD_VAR 0 1
18884: PUSH
18885: LD_INT 1
18887: ARRAY
18888: PPUSH
18889: LD_VAR 0 1
18893: PUSH
18894: LD_INT 2
18896: ARRAY
18897: PPUSH
18898: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
18902: LD_VAR 0 1
18906: PUSH
18907: LD_INT 1
18909: ARRAY
18910: PPUSH
18911: LD_VAR 0 1
18915: PUSH
18916: LD_INT 2
18918: ARRAY
18919: PPUSH
18920: CALL_OW 429
// end ; end ;
18924: LD_VAR 0 1
18928: RET
// every 0 0$1 trigger StreamModeActive and sReset do
18929: LD_EXP 26
18933: PUSH
18934: LD_EXP 48
18938: AND
18939: IFFALSE 18951
18941: GO 18943
18943: DISABLE
// YouLost (  ) ;
18944: LD_STRING 
18946: PPUSH
18947: CALL_OW 104
18951: END
// every 0 0$1 trigger StreamModeActive and sFog do
18952: LD_EXP 26
18956: PUSH
18957: LD_EXP 47
18961: AND
18962: IFFALSE 18976
18964: GO 18966
18966: DISABLE
// FogOff ( your_side ) ;
18967: LD_OWVAR 2
18971: PPUSH
18972: CALL_OW 344
18976: END
// every 0 0$1 trigger StreamModeActive and sSun do
18977: LD_EXP 26
18981: PUSH
18982: LD_EXP 49
18986: AND
18987: IFFALSE 19015
18989: GO 18991
18991: DISABLE
// begin solar_recharge_percent := 0 ;
18992: LD_ADDR_OWVAR 79
18996: PUSH
18997: LD_INT 0
18999: ST_TO_ADDR
// wait ( 5 5$00 ) ;
19000: LD_INT 10500
19002: PPUSH
19003: CALL_OW 67
// solar_recharge_percent := 100 ;
19007: LD_ADDR_OWVAR 79
19011: PUSH
19012: LD_INT 100
19014: ST_TO_ADDR
// end ;
19015: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
19016: LD_EXP 26
19020: PUSH
19021: LD_EXP 50
19025: AND
19026: IFFALSE 19265
19028: GO 19030
19030: DISABLE
19031: LD_INT 0
19033: PPUSH
19034: PPUSH
19035: PPUSH
// begin tmp := [ ] ;
19036: LD_ADDR_VAR 0 3
19040: PUSH
19041: EMPTY
19042: ST_TO_ADDR
// for i := 1 to 6 do
19043: LD_ADDR_VAR 0 1
19047: PUSH
19048: DOUBLE
19049: LD_INT 1
19051: DEC
19052: ST_TO_ADDR
19053: LD_INT 6
19055: PUSH
19056: FOR_TO
19057: IFFALSE 19162
// begin uc_nation := nation_nature ;
19059: LD_ADDR_OWVAR 21
19063: PUSH
19064: LD_INT 0
19066: ST_TO_ADDR
// uc_side := 0 ;
19067: LD_ADDR_OWVAR 20
19071: PUSH
19072: LD_INT 0
19074: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19075: LD_ADDR_OWVAR 29
19079: PUSH
19080: LD_INT 12
19082: PUSH
19083: LD_INT 12
19085: PUSH
19086: EMPTY
19087: LIST
19088: LIST
19089: ST_TO_ADDR
// hc_agressivity := 20 ;
19090: LD_ADDR_OWVAR 35
19094: PUSH
19095: LD_INT 20
19097: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
19098: LD_ADDR_OWVAR 28
19102: PUSH
19103: LD_INT 17
19105: ST_TO_ADDR
// hc_gallery :=  ;
19106: LD_ADDR_OWVAR 33
19110: PUSH
19111: LD_STRING 
19113: ST_TO_ADDR
// hc_name :=  ;
19114: LD_ADDR_OWVAR 26
19118: PUSH
19119: LD_STRING 
19121: ST_TO_ADDR
// un := CreateHuman ;
19122: LD_ADDR_VAR 0 2
19126: PUSH
19127: CALL_OW 44
19131: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
19132: LD_VAR 0 2
19136: PPUSH
19137: LD_INT 1
19139: PPUSH
19140: CALL_OW 51
// tmp := tmp ^ un ;
19144: LD_ADDR_VAR 0 3
19148: PUSH
19149: LD_VAR 0 3
19153: PUSH
19154: LD_VAR 0 2
19158: ADD
19159: ST_TO_ADDR
// end ;
19160: GO 19056
19162: POP
19163: POP
// repeat wait ( 0 0$1 ) ;
19164: LD_INT 35
19166: PPUSH
19167: CALL_OW 67
// for un in tmp do
19171: LD_ADDR_VAR 0 2
19175: PUSH
19176: LD_VAR 0 3
19180: PUSH
19181: FOR_IN
19182: IFFALSE 19256
// begin if IsDead ( un ) then
19184: LD_VAR 0 2
19188: PPUSH
19189: CALL_OW 301
19193: IFFALSE 19213
// begin tmp := tmp diff un ;
19195: LD_ADDR_VAR 0 3
19199: PUSH
19200: LD_VAR 0 3
19204: PUSH
19205: LD_VAR 0 2
19209: DIFF
19210: ST_TO_ADDR
// continue ;
19211: GO 19181
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
19213: LD_VAR 0 2
19217: PPUSH
19218: LD_INT 3
19220: PUSH
19221: LD_INT 22
19223: PUSH
19224: LD_INT 0
19226: PUSH
19227: EMPTY
19228: LIST
19229: LIST
19230: PUSH
19231: EMPTY
19232: LIST
19233: LIST
19234: PPUSH
19235: CALL_OW 69
19239: PPUSH
19240: LD_VAR 0 2
19244: PPUSH
19245: CALL_OW 74
19249: PPUSH
19250: CALL_OW 115
// end ;
19254: GO 19181
19256: POP
19257: POP
// until not tmp ;
19258: LD_VAR 0 3
19262: NOT
19263: IFFALSE 19164
// end ;
19265: PPOPN 3
19267: END
// every 0 0$1 trigger StreamModeActive and sTroll do
19268: LD_EXP 26
19272: PUSH
19273: LD_EXP 51
19277: AND
19278: IFFALSE 19332
19280: GO 19282
19282: DISABLE
// begin ToLua ( displayTroll(); ) ;
19283: LD_STRING displayTroll();
19285: PPUSH
19286: CALL_OW 559
// wait ( 3 3$00 ) ;
19290: LD_INT 6300
19292: PPUSH
19293: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19297: LD_STRING hideTroll();
19299: PPUSH
19300: CALL_OW 559
// wait ( 1 1$00 ) ;
19304: LD_INT 2100
19306: PPUSH
19307: CALL_OW 67
// ToLua ( displayTroll(); ) ;
19311: LD_STRING displayTroll();
19313: PPUSH
19314: CALL_OW 559
// wait ( 1 1$00 ) ;
19318: LD_INT 2100
19320: PPUSH
19321: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19325: LD_STRING hideTroll();
19327: PPUSH
19328: CALL_OW 559
// end ;
19332: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
19333: LD_EXP 26
19337: PUSH
19338: LD_EXP 52
19342: AND
19343: IFFALSE 19406
19345: GO 19347
19347: DISABLE
19348: LD_INT 0
19350: PPUSH
// begin p := 0 ;
19351: LD_ADDR_VAR 0 1
19355: PUSH
19356: LD_INT 0
19358: ST_TO_ADDR
// repeat game_speed := 1 ;
19359: LD_ADDR_OWVAR 65
19363: PUSH
19364: LD_INT 1
19366: ST_TO_ADDR
// wait ( 0 0$1 ) ;
19367: LD_INT 35
19369: PPUSH
19370: CALL_OW 67
// p := p + 1 ;
19374: LD_ADDR_VAR 0 1
19378: PUSH
19379: LD_VAR 0 1
19383: PUSH
19384: LD_INT 1
19386: PLUS
19387: ST_TO_ADDR
// until p >= 60 ;
19388: LD_VAR 0 1
19392: PUSH
19393: LD_INT 60
19395: GREATEREQUAL
19396: IFFALSE 19359
// game_speed := 4 ;
19398: LD_ADDR_OWVAR 65
19402: PUSH
19403: LD_INT 4
19405: ST_TO_ADDR
// end ;
19406: PPOPN 1
19408: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
19409: LD_EXP 26
19413: PUSH
19414: LD_EXP 53
19418: AND
19419: IFFALSE 19565
19421: GO 19423
19423: DISABLE
19424: LD_INT 0
19426: PPUSH
19427: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19428: LD_ADDR_VAR 0 1
19432: PUSH
19433: LD_INT 22
19435: PUSH
19436: LD_OWVAR 2
19440: PUSH
19441: EMPTY
19442: LIST
19443: LIST
19444: PUSH
19445: LD_INT 2
19447: PUSH
19448: LD_INT 30
19450: PUSH
19451: LD_INT 0
19453: PUSH
19454: EMPTY
19455: LIST
19456: LIST
19457: PUSH
19458: LD_INT 30
19460: PUSH
19461: LD_INT 1
19463: PUSH
19464: EMPTY
19465: LIST
19466: LIST
19467: PUSH
19468: EMPTY
19469: LIST
19470: LIST
19471: LIST
19472: PUSH
19473: EMPTY
19474: LIST
19475: LIST
19476: PPUSH
19477: CALL_OW 69
19481: ST_TO_ADDR
// if not depot then
19482: LD_VAR 0 1
19486: NOT
19487: IFFALSE 19491
// exit ;
19489: GO 19565
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
19491: LD_ADDR_VAR 0 2
19495: PUSH
19496: LD_VAR 0 1
19500: PUSH
19501: LD_INT 1
19503: PPUSH
19504: LD_VAR 0 1
19508: PPUSH
19509: CALL_OW 12
19513: ARRAY
19514: PPUSH
19515: CALL_OW 274
19519: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
19520: LD_VAR 0 2
19524: PPUSH
19525: LD_INT 1
19527: PPUSH
19528: LD_INT 0
19530: PPUSH
19531: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
19535: LD_VAR 0 2
19539: PPUSH
19540: LD_INT 2
19542: PPUSH
19543: LD_INT 0
19545: PPUSH
19546: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
19550: LD_VAR 0 2
19554: PPUSH
19555: LD_INT 3
19557: PPUSH
19558: LD_INT 0
19560: PPUSH
19561: CALL_OW 277
// end ;
19565: PPOPN 2
19567: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
19568: LD_EXP 26
19572: PUSH
19573: LD_EXP 54
19577: AND
19578: IFFALSE 19675
19580: GO 19582
19582: DISABLE
19583: LD_INT 0
19585: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19586: LD_ADDR_VAR 0 1
19590: PUSH
19591: LD_INT 22
19593: PUSH
19594: LD_OWVAR 2
19598: PUSH
19599: EMPTY
19600: LIST
19601: LIST
19602: PUSH
19603: LD_INT 21
19605: PUSH
19606: LD_INT 1
19608: PUSH
19609: EMPTY
19610: LIST
19611: LIST
19612: PUSH
19613: LD_INT 3
19615: PUSH
19616: LD_INT 23
19618: PUSH
19619: LD_INT 0
19621: PUSH
19622: EMPTY
19623: LIST
19624: LIST
19625: PUSH
19626: EMPTY
19627: LIST
19628: LIST
19629: PUSH
19630: EMPTY
19631: LIST
19632: LIST
19633: LIST
19634: PPUSH
19635: CALL_OW 69
19639: ST_TO_ADDR
// if not tmp then
19640: LD_VAR 0 1
19644: NOT
19645: IFFALSE 19649
// exit ;
19647: GO 19675
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
19649: LD_VAR 0 1
19653: PUSH
19654: LD_INT 1
19656: PPUSH
19657: LD_VAR 0 1
19661: PPUSH
19662: CALL_OW 12
19666: ARRAY
19667: PPUSH
19668: LD_INT 200
19670: PPUSH
19671: CALL_OW 234
// end ;
19675: PPOPN 1
19677: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
19678: LD_EXP 26
19682: PUSH
19683: LD_EXP 55
19687: AND
19688: IFFALSE 19767
19690: GO 19692
19692: DISABLE
19693: LD_INT 0
19695: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
19696: LD_ADDR_VAR 0 1
19700: PUSH
19701: LD_INT 22
19703: PUSH
19704: LD_OWVAR 2
19708: PUSH
19709: EMPTY
19710: LIST
19711: LIST
19712: PUSH
19713: LD_INT 21
19715: PUSH
19716: LD_INT 2
19718: PUSH
19719: EMPTY
19720: LIST
19721: LIST
19722: PUSH
19723: EMPTY
19724: LIST
19725: LIST
19726: PPUSH
19727: CALL_OW 69
19731: ST_TO_ADDR
// if not tmp then
19732: LD_VAR 0 1
19736: NOT
19737: IFFALSE 19741
// exit ;
19739: GO 19767
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
19741: LD_VAR 0 1
19745: PUSH
19746: LD_INT 1
19748: PPUSH
19749: LD_VAR 0 1
19753: PPUSH
19754: CALL_OW 12
19758: ARRAY
19759: PPUSH
19760: LD_INT 60
19762: PPUSH
19763: CALL_OW 234
// end ;
19767: PPOPN 1
19769: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
19770: LD_EXP 26
19774: PUSH
19775: LD_EXP 56
19779: AND
19780: IFFALSE 19879
19782: GO 19784
19784: DISABLE
19785: LD_INT 0
19787: PPUSH
19788: PPUSH
// begin enable ;
19789: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
19790: LD_ADDR_VAR 0 1
19794: PUSH
19795: LD_INT 22
19797: PUSH
19798: LD_OWVAR 2
19802: PUSH
19803: EMPTY
19804: LIST
19805: LIST
19806: PUSH
19807: LD_INT 61
19809: PUSH
19810: EMPTY
19811: LIST
19812: PUSH
19813: LD_INT 33
19815: PUSH
19816: LD_INT 2
19818: PUSH
19819: EMPTY
19820: LIST
19821: LIST
19822: PUSH
19823: EMPTY
19824: LIST
19825: LIST
19826: LIST
19827: PPUSH
19828: CALL_OW 69
19832: ST_TO_ADDR
// if not tmp then
19833: LD_VAR 0 1
19837: NOT
19838: IFFALSE 19842
// exit ;
19840: GO 19879
// for i in tmp do
19842: LD_ADDR_VAR 0 2
19846: PUSH
19847: LD_VAR 0 1
19851: PUSH
19852: FOR_IN
19853: IFFALSE 19877
// if IsControledBy ( i ) then
19855: LD_VAR 0 2
19859: PPUSH
19860: CALL_OW 312
19864: IFFALSE 19875
// ComUnlink ( i ) ;
19866: LD_VAR 0 2
19870: PPUSH
19871: CALL_OW 136
19875: GO 19852
19877: POP
19878: POP
// end ;
19879: PPOPN 2
19881: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
19882: LD_EXP 26
19886: PUSH
19887: LD_EXP 57
19891: AND
19892: IFFALSE 20026
19894: GO 19896
19896: DISABLE
19897: LD_INT 0
19899: PPUSH
19900: PPUSH
// begin ToLua ( displayPowell(); ) ;
19901: LD_STRING displayPowell();
19903: PPUSH
19904: CALL_OW 559
// uc_side := 0 ;
19908: LD_ADDR_OWVAR 20
19912: PUSH
19913: LD_INT 0
19915: ST_TO_ADDR
// uc_nation := 2 ;
19916: LD_ADDR_OWVAR 21
19920: PUSH
19921: LD_INT 2
19923: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
19924: LD_ADDR_OWVAR 37
19928: PUSH
19929: LD_INT 14
19931: ST_TO_ADDR
// vc_engine := engine_siberite ;
19932: LD_ADDR_OWVAR 39
19936: PUSH
19937: LD_INT 3
19939: ST_TO_ADDR
// vc_control := control_apeman ;
19940: LD_ADDR_OWVAR 38
19944: PUSH
19945: LD_INT 5
19947: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
19948: LD_ADDR_OWVAR 40
19952: PUSH
19953: LD_INT 29
19955: ST_TO_ADDR
// un := CreateVehicle ;
19956: LD_ADDR_VAR 0 2
19960: PUSH
19961: CALL_OW 45
19965: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19966: LD_VAR 0 2
19970: PPUSH
19971: LD_INT 1
19973: PPUSH
19974: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
19978: LD_INT 35
19980: PPUSH
19981: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
19985: LD_VAR 0 2
19989: PPUSH
19990: LD_OWVAR 3
19994: PUSH
19995: LD_VAR 0 2
19999: DIFF
20000: PPUSH
20001: LD_VAR 0 2
20005: PPUSH
20006: CALL_OW 74
20010: PPUSH
20011: CALL_OW 115
// until IsOk ( un ) ;
20015: LD_VAR 0 2
20019: PPUSH
20020: CALL_OW 302
20024: IFFALSE 19978
// end ;
20026: PPOPN 2
20028: END
// every 0 0$1 trigger StreamModeActive and sStu do
20029: LD_EXP 26
20033: PUSH
20034: LD_EXP 65
20038: AND
20039: IFFALSE 20051
20041: GO 20043
20043: DISABLE
// begin ToLua ( displayStucuk(); ) ;
20044: LD_STRING displayStucuk();
20046: PPUSH
20047: CALL_OW 559
// end ;
20051: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
20052: LD_EXP 26
20056: PUSH
20057: LD_EXP 58
20061: AND
20062: IFFALSE 20203
20064: GO 20066
20066: DISABLE
20067: LD_INT 0
20069: PPUSH
20070: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20071: LD_ADDR_VAR 0 2
20075: PUSH
20076: LD_INT 22
20078: PUSH
20079: LD_OWVAR 2
20083: PUSH
20084: EMPTY
20085: LIST
20086: LIST
20087: PUSH
20088: LD_INT 21
20090: PUSH
20091: LD_INT 1
20093: PUSH
20094: EMPTY
20095: LIST
20096: LIST
20097: PUSH
20098: EMPTY
20099: LIST
20100: LIST
20101: PPUSH
20102: CALL_OW 69
20106: ST_TO_ADDR
// if not tmp then
20107: LD_VAR 0 2
20111: NOT
20112: IFFALSE 20116
// exit ;
20114: GO 20203
// un := tmp [ rand ( 1 , tmp ) ] ;
20116: LD_ADDR_VAR 0 1
20120: PUSH
20121: LD_VAR 0 2
20125: PUSH
20126: LD_INT 1
20128: PPUSH
20129: LD_VAR 0 2
20133: PPUSH
20134: CALL_OW 12
20138: ARRAY
20139: ST_TO_ADDR
// SetSide ( un , 0 ) ;
20140: LD_VAR 0 1
20144: PPUSH
20145: LD_INT 0
20147: PPUSH
20148: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
20152: LD_VAR 0 1
20156: PPUSH
20157: LD_OWVAR 3
20161: PUSH
20162: LD_VAR 0 1
20166: DIFF
20167: PPUSH
20168: LD_VAR 0 1
20172: PPUSH
20173: CALL_OW 74
20177: PPUSH
20178: CALL_OW 115
// wait ( 0 0$20 ) ;
20182: LD_INT 700
20184: PPUSH
20185: CALL_OW 67
// SetSide ( un , your_side ) ;
20189: LD_VAR 0 1
20193: PPUSH
20194: LD_OWVAR 2
20198: PPUSH
20199: CALL_OW 235
// end ;
20203: PPOPN 2
20205: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
20206: LD_EXP 26
20210: PUSH
20211: LD_EXP 59
20215: AND
20216: IFFALSE 20322
20218: GO 20220
20220: DISABLE
20221: LD_INT 0
20223: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20224: LD_ADDR_VAR 0 1
20228: PUSH
20229: LD_INT 22
20231: PUSH
20232: LD_OWVAR 2
20236: PUSH
20237: EMPTY
20238: LIST
20239: LIST
20240: PUSH
20241: LD_INT 2
20243: PUSH
20244: LD_INT 30
20246: PUSH
20247: LD_INT 0
20249: PUSH
20250: EMPTY
20251: LIST
20252: LIST
20253: PUSH
20254: LD_INT 30
20256: PUSH
20257: LD_INT 1
20259: PUSH
20260: EMPTY
20261: LIST
20262: LIST
20263: PUSH
20264: EMPTY
20265: LIST
20266: LIST
20267: LIST
20268: PUSH
20269: EMPTY
20270: LIST
20271: LIST
20272: PPUSH
20273: CALL_OW 69
20277: ST_TO_ADDR
// if not depot then
20278: LD_VAR 0 1
20282: NOT
20283: IFFALSE 20287
// exit ;
20285: GO 20322
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
20287: LD_VAR 0 1
20291: PUSH
20292: LD_INT 1
20294: ARRAY
20295: PPUSH
20296: CALL_OW 250
20300: PPUSH
20301: LD_VAR 0 1
20305: PUSH
20306: LD_INT 1
20308: ARRAY
20309: PPUSH
20310: CALL_OW 251
20314: PPUSH
20315: LD_INT 70
20317: PPUSH
20318: CALL_OW 495
// end ;
20322: PPOPN 1
20324: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
20325: LD_EXP 26
20329: PUSH
20330: LD_EXP 60
20334: AND
20335: IFFALSE 20546
20337: GO 20339
20339: DISABLE
20340: LD_INT 0
20342: PPUSH
20343: PPUSH
20344: PPUSH
20345: PPUSH
20346: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20347: LD_ADDR_VAR 0 5
20351: PUSH
20352: LD_INT 22
20354: PUSH
20355: LD_OWVAR 2
20359: PUSH
20360: EMPTY
20361: LIST
20362: LIST
20363: PUSH
20364: LD_INT 21
20366: PUSH
20367: LD_INT 1
20369: PUSH
20370: EMPTY
20371: LIST
20372: LIST
20373: PUSH
20374: EMPTY
20375: LIST
20376: LIST
20377: PPUSH
20378: CALL_OW 69
20382: ST_TO_ADDR
// if not tmp then
20383: LD_VAR 0 5
20387: NOT
20388: IFFALSE 20392
// exit ;
20390: GO 20546
// for i in tmp do
20392: LD_ADDR_VAR 0 1
20396: PUSH
20397: LD_VAR 0 5
20401: PUSH
20402: FOR_IN
20403: IFFALSE 20544
// begin d := rand ( 0 , 5 ) ;
20405: LD_ADDR_VAR 0 4
20409: PUSH
20410: LD_INT 0
20412: PPUSH
20413: LD_INT 5
20415: PPUSH
20416: CALL_OW 12
20420: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
20421: LD_ADDR_VAR 0 2
20425: PUSH
20426: LD_VAR 0 1
20430: PPUSH
20431: CALL_OW 250
20435: PPUSH
20436: LD_VAR 0 4
20440: PPUSH
20441: LD_INT 3
20443: PPUSH
20444: LD_INT 12
20446: PPUSH
20447: CALL_OW 12
20451: PPUSH
20452: CALL_OW 272
20456: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
20457: LD_ADDR_VAR 0 3
20461: PUSH
20462: LD_VAR 0 1
20466: PPUSH
20467: CALL_OW 251
20471: PPUSH
20472: LD_VAR 0 4
20476: PPUSH
20477: LD_INT 3
20479: PPUSH
20480: LD_INT 12
20482: PPUSH
20483: CALL_OW 12
20487: PPUSH
20488: CALL_OW 273
20492: ST_TO_ADDR
// if ValidHex ( x , y ) then
20493: LD_VAR 0 2
20497: PPUSH
20498: LD_VAR 0 3
20502: PPUSH
20503: CALL_OW 488
20507: IFFALSE 20542
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
20509: LD_VAR 0 1
20513: PPUSH
20514: LD_VAR 0 2
20518: PPUSH
20519: LD_VAR 0 3
20523: PPUSH
20524: LD_INT 3
20526: PPUSH
20527: LD_INT 6
20529: PPUSH
20530: CALL_OW 12
20534: PPUSH
20535: LD_INT 1
20537: PPUSH
20538: CALL_OW 483
// end ;
20542: GO 20402
20544: POP
20545: POP
// end ;
20546: PPOPN 5
20548: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
20549: LD_EXP 26
20553: PUSH
20554: LD_EXP 61
20558: AND
20559: IFFALSE 20653
20561: GO 20563
20563: DISABLE
20564: LD_INT 0
20566: PPUSH
20567: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
20568: LD_ADDR_VAR 0 2
20572: PUSH
20573: LD_INT 22
20575: PUSH
20576: LD_OWVAR 2
20580: PUSH
20581: EMPTY
20582: LIST
20583: LIST
20584: PUSH
20585: LD_INT 32
20587: PUSH
20588: LD_INT 1
20590: PUSH
20591: EMPTY
20592: LIST
20593: LIST
20594: PUSH
20595: LD_INT 21
20597: PUSH
20598: LD_INT 2
20600: PUSH
20601: EMPTY
20602: LIST
20603: LIST
20604: PUSH
20605: EMPTY
20606: LIST
20607: LIST
20608: LIST
20609: PPUSH
20610: CALL_OW 69
20614: ST_TO_ADDR
// if not tmp then
20615: LD_VAR 0 2
20619: NOT
20620: IFFALSE 20624
// exit ;
20622: GO 20653
// for i in tmp do
20624: LD_ADDR_VAR 0 1
20628: PUSH
20629: LD_VAR 0 2
20633: PUSH
20634: FOR_IN
20635: IFFALSE 20651
// SetFuel ( i , 0 ) ;
20637: LD_VAR 0 1
20641: PPUSH
20642: LD_INT 0
20644: PPUSH
20645: CALL_OW 240
20649: GO 20634
20651: POP
20652: POP
// end ;
20653: PPOPN 2
20655: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
20656: LD_EXP 26
20660: PUSH
20661: LD_EXP 62
20665: AND
20666: IFFALSE 20732
20668: GO 20670
20670: DISABLE
20671: LD_INT 0
20673: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20674: LD_ADDR_VAR 0 1
20678: PUSH
20679: LD_INT 22
20681: PUSH
20682: LD_OWVAR 2
20686: PUSH
20687: EMPTY
20688: LIST
20689: LIST
20690: PUSH
20691: LD_INT 30
20693: PUSH
20694: LD_INT 29
20696: PUSH
20697: EMPTY
20698: LIST
20699: LIST
20700: PUSH
20701: EMPTY
20702: LIST
20703: LIST
20704: PPUSH
20705: CALL_OW 69
20709: ST_TO_ADDR
// if not tmp then
20710: LD_VAR 0 1
20714: NOT
20715: IFFALSE 20719
// exit ;
20717: GO 20732
// DestroyUnit ( tmp [ 1 ] ) ;
20719: LD_VAR 0 1
20723: PUSH
20724: LD_INT 1
20726: ARRAY
20727: PPUSH
20728: CALL_OW 65
// end ;
20732: PPOPN 1
20734: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
20735: LD_EXP 26
20739: PUSH
20740: LD_EXP 64
20744: AND
20745: IFFALSE 20874
20747: GO 20749
20749: DISABLE
20750: LD_INT 0
20752: PPUSH
// begin uc_side := 0 ;
20753: LD_ADDR_OWVAR 20
20757: PUSH
20758: LD_INT 0
20760: ST_TO_ADDR
// uc_nation := nation_arabian ;
20761: LD_ADDR_OWVAR 21
20765: PUSH
20766: LD_INT 2
20768: ST_TO_ADDR
// hc_gallery :=  ;
20769: LD_ADDR_OWVAR 33
20773: PUSH
20774: LD_STRING 
20776: ST_TO_ADDR
// hc_name :=  ;
20777: LD_ADDR_OWVAR 26
20781: PUSH
20782: LD_STRING 
20784: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
20785: LD_INT 1
20787: PPUSH
20788: LD_INT 11
20790: PPUSH
20791: LD_INT 10
20793: PPUSH
20794: CALL_OW 380
// un := CreateHuman ;
20798: LD_ADDR_VAR 0 1
20802: PUSH
20803: CALL_OW 44
20807: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20808: LD_VAR 0 1
20812: PPUSH
20813: LD_INT 1
20815: PPUSH
20816: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20820: LD_INT 35
20822: PPUSH
20823: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20827: LD_VAR 0 1
20831: PPUSH
20832: LD_INT 22
20834: PUSH
20835: LD_OWVAR 2
20839: PUSH
20840: EMPTY
20841: LIST
20842: LIST
20843: PPUSH
20844: CALL_OW 69
20848: PPUSH
20849: LD_VAR 0 1
20853: PPUSH
20854: CALL_OW 74
20858: PPUSH
20859: CALL_OW 115
// until IsDead ( un ) ;
20863: LD_VAR 0 1
20867: PPUSH
20868: CALL_OW 301
20872: IFFALSE 20820
// end ;
20874: PPOPN 1
20876: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
20877: LD_EXP 26
20881: PUSH
20882: LD_EXP 66
20886: AND
20887: IFFALSE 20899
20889: GO 20891
20891: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
20892: LD_STRING earthquake(getX(game), 0, 32)
20894: PPUSH
20895: CALL_OW 559
20899: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
20900: LD_EXP 26
20904: PUSH
20905: LD_EXP 67
20909: AND
20910: IFFALSE 21001
20912: GO 20914
20914: DISABLE
20915: LD_INT 0
20917: PPUSH
// begin enable ;
20918: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
20919: LD_ADDR_VAR 0 1
20923: PUSH
20924: LD_INT 22
20926: PUSH
20927: LD_OWVAR 2
20931: PUSH
20932: EMPTY
20933: LIST
20934: LIST
20935: PUSH
20936: LD_INT 21
20938: PUSH
20939: LD_INT 2
20941: PUSH
20942: EMPTY
20943: LIST
20944: LIST
20945: PUSH
20946: LD_INT 33
20948: PUSH
20949: LD_INT 3
20951: PUSH
20952: EMPTY
20953: LIST
20954: LIST
20955: PUSH
20956: EMPTY
20957: LIST
20958: LIST
20959: LIST
20960: PPUSH
20961: CALL_OW 69
20965: ST_TO_ADDR
// if not tmp then
20966: LD_VAR 0 1
20970: NOT
20971: IFFALSE 20975
// exit ;
20973: GO 21001
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
20975: LD_VAR 0 1
20979: PUSH
20980: LD_INT 1
20982: PPUSH
20983: LD_VAR 0 1
20987: PPUSH
20988: CALL_OW 12
20992: ARRAY
20993: PPUSH
20994: LD_INT 1
20996: PPUSH
20997: CALL_OW 234
// end ;
21001: PPOPN 1
21003: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
21004: LD_EXP 26
21008: PUSH
21009: LD_EXP 68
21013: AND
21014: IFFALSE 21155
21016: GO 21018
21018: DISABLE
21019: LD_INT 0
21021: PPUSH
21022: PPUSH
21023: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21024: LD_ADDR_VAR 0 3
21028: PUSH
21029: LD_INT 22
21031: PUSH
21032: LD_OWVAR 2
21036: PUSH
21037: EMPTY
21038: LIST
21039: LIST
21040: PUSH
21041: LD_INT 25
21043: PUSH
21044: LD_INT 1
21046: PUSH
21047: EMPTY
21048: LIST
21049: LIST
21050: PUSH
21051: EMPTY
21052: LIST
21053: LIST
21054: PPUSH
21055: CALL_OW 69
21059: ST_TO_ADDR
// if not tmp then
21060: LD_VAR 0 3
21064: NOT
21065: IFFALSE 21069
// exit ;
21067: GO 21155
// un := tmp [ rand ( 1 , tmp ) ] ;
21069: LD_ADDR_VAR 0 2
21073: PUSH
21074: LD_VAR 0 3
21078: PUSH
21079: LD_INT 1
21081: PPUSH
21082: LD_VAR 0 3
21086: PPUSH
21087: CALL_OW 12
21091: ARRAY
21092: ST_TO_ADDR
// if Crawls ( un ) then
21093: LD_VAR 0 2
21097: PPUSH
21098: CALL_OW 318
21102: IFFALSE 21113
// ComWalk ( un ) ;
21104: LD_VAR 0 2
21108: PPUSH
21109: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
21113: LD_VAR 0 2
21117: PPUSH
21118: LD_INT 9
21120: PPUSH
21121: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
21125: LD_INT 28
21127: PPUSH
21128: LD_OWVAR 2
21132: PPUSH
21133: LD_INT 2
21135: PPUSH
21136: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
21140: LD_INT 29
21142: PPUSH
21143: LD_OWVAR 2
21147: PPUSH
21148: LD_INT 2
21150: PPUSH
21151: CALL_OW 322
// end ;
21155: PPOPN 3
21157: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
21158: LD_EXP 26
21162: PUSH
21163: LD_EXP 69
21167: AND
21168: IFFALSE 21279
21170: GO 21172
21172: DISABLE
21173: LD_INT 0
21175: PPUSH
21176: PPUSH
21177: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21178: LD_ADDR_VAR 0 3
21182: PUSH
21183: LD_INT 22
21185: PUSH
21186: LD_OWVAR 2
21190: PUSH
21191: EMPTY
21192: LIST
21193: LIST
21194: PUSH
21195: LD_INT 25
21197: PUSH
21198: LD_INT 1
21200: PUSH
21201: EMPTY
21202: LIST
21203: LIST
21204: PUSH
21205: EMPTY
21206: LIST
21207: LIST
21208: PPUSH
21209: CALL_OW 69
21213: ST_TO_ADDR
// if not tmp then
21214: LD_VAR 0 3
21218: NOT
21219: IFFALSE 21223
// exit ;
21221: GO 21279
// un := tmp [ rand ( 1 , tmp ) ] ;
21223: LD_ADDR_VAR 0 2
21227: PUSH
21228: LD_VAR 0 3
21232: PUSH
21233: LD_INT 1
21235: PPUSH
21236: LD_VAR 0 3
21240: PPUSH
21241: CALL_OW 12
21245: ARRAY
21246: ST_TO_ADDR
// if Crawls ( un ) then
21247: LD_VAR 0 2
21251: PPUSH
21252: CALL_OW 318
21256: IFFALSE 21267
// ComWalk ( un ) ;
21258: LD_VAR 0 2
21262: PPUSH
21263: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21267: LD_VAR 0 2
21271: PPUSH
21272: LD_INT 8
21274: PPUSH
21275: CALL_OW 336
// end ;
21279: PPOPN 3
21281: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
21282: LD_EXP 26
21286: PUSH
21287: LD_EXP 70
21291: AND
21292: IFFALSE 21436
21294: GO 21296
21296: DISABLE
21297: LD_INT 0
21299: PPUSH
21300: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
21301: LD_ADDR_VAR 0 2
21305: PUSH
21306: LD_INT 22
21308: PUSH
21309: LD_OWVAR 2
21313: PUSH
21314: EMPTY
21315: LIST
21316: LIST
21317: PUSH
21318: LD_INT 21
21320: PUSH
21321: LD_INT 2
21323: PUSH
21324: EMPTY
21325: LIST
21326: LIST
21327: PUSH
21328: LD_INT 2
21330: PUSH
21331: LD_INT 34
21333: PUSH
21334: LD_INT 12
21336: PUSH
21337: EMPTY
21338: LIST
21339: LIST
21340: PUSH
21341: LD_INT 34
21343: PUSH
21344: LD_INT 51
21346: PUSH
21347: EMPTY
21348: LIST
21349: LIST
21350: PUSH
21351: LD_INT 34
21353: PUSH
21354: LD_INT 32
21356: PUSH
21357: EMPTY
21358: LIST
21359: LIST
21360: PUSH
21361: EMPTY
21362: LIST
21363: LIST
21364: LIST
21365: LIST
21366: PUSH
21367: EMPTY
21368: LIST
21369: LIST
21370: LIST
21371: PPUSH
21372: CALL_OW 69
21376: ST_TO_ADDR
// if not tmp then
21377: LD_VAR 0 2
21381: NOT
21382: IFFALSE 21386
// exit ;
21384: GO 21436
// for i in tmp do
21386: LD_ADDR_VAR 0 1
21390: PUSH
21391: LD_VAR 0 2
21395: PUSH
21396: FOR_IN
21397: IFFALSE 21434
// if GetCargo ( i , mat_artifact ) = 0 then
21399: LD_VAR 0 1
21403: PPUSH
21404: LD_INT 4
21406: PPUSH
21407: CALL_OW 289
21411: PUSH
21412: LD_INT 0
21414: EQUAL
21415: IFFALSE 21432
// SetCargo ( i , mat_siberit , 100 ) ;
21417: LD_VAR 0 1
21421: PPUSH
21422: LD_INT 3
21424: PPUSH
21425: LD_INT 100
21427: PPUSH
21428: CALL_OW 290
21432: GO 21396
21434: POP
21435: POP
// end ;
21436: PPOPN 2
21438: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
21439: LD_EXP 26
21443: PUSH
21444: LD_EXP 71
21448: AND
21449: IFFALSE 21602
21451: GO 21453
21453: DISABLE
21454: LD_INT 0
21456: PPUSH
21457: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21458: LD_ADDR_VAR 0 2
21462: PUSH
21463: LD_INT 22
21465: PUSH
21466: LD_OWVAR 2
21470: PUSH
21471: EMPTY
21472: LIST
21473: LIST
21474: PPUSH
21475: CALL_OW 69
21479: ST_TO_ADDR
// if not tmp then
21480: LD_VAR 0 2
21484: NOT
21485: IFFALSE 21489
// exit ;
21487: GO 21602
// for i := 1 to 2 do
21489: LD_ADDR_VAR 0 1
21493: PUSH
21494: DOUBLE
21495: LD_INT 1
21497: DEC
21498: ST_TO_ADDR
21499: LD_INT 2
21501: PUSH
21502: FOR_TO
21503: IFFALSE 21600
// begin uc_side := your_side ;
21505: LD_ADDR_OWVAR 20
21509: PUSH
21510: LD_OWVAR 2
21514: ST_TO_ADDR
// uc_nation := nation_american ;
21515: LD_ADDR_OWVAR 21
21519: PUSH
21520: LD_INT 1
21522: ST_TO_ADDR
// vc_chassis := us_morphling ;
21523: LD_ADDR_OWVAR 37
21527: PUSH
21528: LD_INT 5
21530: ST_TO_ADDR
// vc_engine := engine_siberite ;
21531: LD_ADDR_OWVAR 39
21535: PUSH
21536: LD_INT 3
21538: ST_TO_ADDR
// vc_control := control_computer ;
21539: LD_ADDR_OWVAR 38
21543: PUSH
21544: LD_INT 3
21546: ST_TO_ADDR
// vc_weapon := us_double_laser ;
21547: LD_ADDR_OWVAR 40
21551: PUSH
21552: LD_INT 10
21554: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) ;
21555: CALL_OW 45
21559: PPUSH
21560: LD_VAR 0 2
21564: PUSH
21565: LD_INT 1
21567: ARRAY
21568: PPUSH
21569: CALL_OW 250
21573: PPUSH
21574: LD_VAR 0 2
21578: PUSH
21579: LD_INT 1
21581: ARRAY
21582: PPUSH
21583: CALL_OW 251
21587: PPUSH
21588: LD_INT 12
21590: PPUSH
21591: LD_INT 1
21593: PPUSH
21594: CALL_OW 50
// end ;
21598: GO 21502
21600: POP
21601: POP
// end ;
21602: PPOPN 2
21604: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
21605: LD_EXP 26
21609: PUSH
21610: LD_EXP 72
21614: AND
21615: IFFALSE 21837
21617: GO 21619
21619: DISABLE
21620: LD_INT 0
21622: PPUSH
21623: PPUSH
21624: PPUSH
21625: PPUSH
21626: PPUSH
21627: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21628: LD_ADDR_VAR 0 6
21632: PUSH
21633: LD_INT 22
21635: PUSH
21636: LD_OWVAR 2
21640: PUSH
21641: EMPTY
21642: LIST
21643: LIST
21644: PUSH
21645: LD_INT 21
21647: PUSH
21648: LD_INT 1
21650: PUSH
21651: EMPTY
21652: LIST
21653: LIST
21654: PUSH
21655: LD_INT 3
21657: PUSH
21658: LD_INT 23
21660: PUSH
21661: LD_INT 0
21663: PUSH
21664: EMPTY
21665: LIST
21666: LIST
21667: PUSH
21668: EMPTY
21669: LIST
21670: LIST
21671: PUSH
21672: EMPTY
21673: LIST
21674: LIST
21675: LIST
21676: PPUSH
21677: CALL_OW 69
21681: ST_TO_ADDR
// if not tmp then
21682: LD_VAR 0 6
21686: NOT
21687: IFFALSE 21691
// exit ;
21689: GO 21837
// s1 := rand ( 1 , 4 ) ;
21691: LD_ADDR_VAR 0 2
21695: PUSH
21696: LD_INT 1
21698: PPUSH
21699: LD_INT 4
21701: PPUSH
21702: CALL_OW 12
21706: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
21707: LD_ADDR_VAR 0 4
21711: PUSH
21712: LD_VAR 0 6
21716: PUSH
21717: LD_INT 1
21719: ARRAY
21720: PPUSH
21721: LD_VAR 0 2
21725: PPUSH
21726: CALL_OW 259
21730: ST_TO_ADDR
// if s1 = 1 then
21731: LD_VAR 0 2
21735: PUSH
21736: LD_INT 1
21738: EQUAL
21739: IFFALSE 21759
// s2 := rand ( 2 , 4 ) else
21741: LD_ADDR_VAR 0 3
21745: PUSH
21746: LD_INT 2
21748: PPUSH
21749: LD_INT 4
21751: PPUSH
21752: CALL_OW 12
21756: ST_TO_ADDR
21757: GO 21767
// s2 := 1 ;
21759: LD_ADDR_VAR 0 3
21763: PUSH
21764: LD_INT 1
21766: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
21767: LD_ADDR_VAR 0 5
21771: PUSH
21772: LD_VAR 0 6
21776: PUSH
21777: LD_INT 1
21779: ARRAY
21780: PPUSH
21781: LD_VAR 0 3
21785: PPUSH
21786: CALL_OW 259
21790: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
21791: LD_VAR 0 6
21795: PUSH
21796: LD_INT 1
21798: ARRAY
21799: PPUSH
21800: LD_VAR 0 2
21804: PPUSH
21805: LD_VAR 0 5
21809: PPUSH
21810: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
21814: LD_VAR 0 6
21818: PUSH
21819: LD_INT 1
21821: ARRAY
21822: PPUSH
21823: LD_VAR 0 3
21827: PPUSH
21828: LD_VAR 0 4
21832: PPUSH
21833: CALL_OW 237
// end ;
21837: PPOPN 6
21839: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
21840: LD_EXP 26
21844: PUSH
21845: LD_EXP 73
21849: AND
21850: IFFALSE 21929
21852: GO 21854
21854: DISABLE
21855: LD_INT 0
21857: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
21858: LD_ADDR_VAR 0 1
21862: PUSH
21863: LD_INT 22
21865: PUSH
21866: LD_OWVAR 2
21870: PUSH
21871: EMPTY
21872: LIST
21873: LIST
21874: PUSH
21875: LD_INT 30
21877: PUSH
21878: LD_INT 3
21880: PUSH
21881: EMPTY
21882: LIST
21883: LIST
21884: PUSH
21885: EMPTY
21886: LIST
21887: LIST
21888: PPUSH
21889: CALL_OW 69
21893: ST_TO_ADDR
// if not tmp then
21894: LD_VAR 0 1
21898: NOT
21899: IFFALSE 21903
// exit ;
21901: GO 21929
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21903: LD_VAR 0 1
21907: PUSH
21908: LD_INT 1
21910: PPUSH
21911: LD_VAR 0 1
21915: PPUSH
21916: CALL_OW 12
21920: ARRAY
21921: PPUSH
21922: LD_INT 1
21924: PPUSH
21925: CALL_OW 234
// end ;
21929: PPOPN 1
21931: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
21932: LD_EXP 26
21936: PUSH
21937: LD_EXP 74
21941: AND
21942: IFFALSE 22054
21944: GO 21946
21946: DISABLE
21947: LD_INT 0
21949: PPUSH
21950: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
21951: LD_ADDR_VAR 0 2
21955: PUSH
21956: LD_INT 22
21958: PUSH
21959: LD_OWVAR 2
21963: PUSH
21964: EMPTY
21965: LIST
21966: LIST
21967: PUSH
21968: LD_INT 2
21970: PUSH
21971: LD_INT 30
21973: PUSH
21974: LD_INT 27
21976: PUSH
21977: EMPTY
21978: LIST
21979: LIST
21980: PUSH
21981: LD_INT 30
21983: PUSH
21984: LD_INT 26
21986: PUSH
21987: EMPTY
21988: LIST
21989: LIST
21990: PUSH
21991: LD_INT 30
21993: PUSH
21994: LD_INT 28
21996: PUSH
21997: EMPTY
21998: LIST
21999: LIST
22000: PUSH
22001: EMPTY
22002: LIST
22003: LIST
22004: LIST
22005: LIST
22006: PUSH
22007: EMPTY
22008: LIST
22009: LIST
22010: PPUSH
22011: CALL_OW 69
22015: ST_TO_ADDR
// if not tmp then
22016: LD_VAR 0 2
22020: NOT
22021: IFFALSE 22025
// exit ;
22023: GO 22054
// for i in tmp do
22025: LD_ADDR_VAR 0 1
22029: PUSH
22030: LD_VAR 0 2
22034: PUSH
22035: FOR_IN
22036: IFFALSE 22052
// SetLives ( i , 1 ) ;
22038: LD_VAR 0 1
22042: PPUSH
22043: LD_INT 1
22045: PPUSH
22046: CALL_OW 234
22050: GO 22035
22052: POP
22053: POP
// end ;
22054: PPOPN 2
22056: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
22057: LD_EXP 26
22061: PUSH
22062: LD_EXP 75
22066: AND
22067: IFFALSE 22337
22069: GO 22071
22071: DISABLE
22072: LD_INT 0
22074: PPUSH
22075: PPUSH
22076: PPUSH
// begin i := rand ( 1 , 7 ) ;
22077: LD_ADDR_VAR 0 1
22081: PUSH
22082: LD_INT 1
22084: PPUSH
22085: LD_INT 7
22087: PPUSH
22088: CALL_OW 12
22092: ST_TO_ADDR
// case i of 1 :
22093: LD_VAR 0 1
22097: PUSH
22098: LD_INT 1
22100: DOUBLE
22101: EQUAL
22102: IFTRUE 22106
22104: GO 22116
22106: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
22107: LD_STRING earthquake(getX(game), 0, 32)
22109: PPUSH
22110: CALL_OW 559
22114: GO 22337
22116: LD_INT 2
22118: DOUBLE
22119: EQUAL
22120: IFTRUE 22124
22122: GO 22134
22124: POP
// ToLua ( displayStucuk(); ) ; 3 :
22125: LD_STRING displayStucuk();
22127: PPUSH
22128: CALL_OW 559
22132: GO 22337
22134: LD_INT 3
22136: DOUBLE
22137: EQUAL
22138: IFTRUE 22142
22140: GO 22246
22142: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22143: LD_ADDR_VAR 0 2
22147: PUSH
22148: LD_INT 22
22150: PUSH
22151: LD_OWVAR 2
22155: PUSH
22156: EMPTY
22157: LIST
22158: LIST
22159: PUSH
22160: LD_INT 25
22162: PUSH
22163: LD_INT 1
22165: PUSH
22166: EMPTY
22167: LIST
22168: LIST
22169: PUSH
22170: EMPTY
22171: LIST
22172: LIST
22173: PPUSH
22174: CALL_OW 69
22178: ST_TO_ADDR
// if not tmp then
22179: LD_VAR 0 2
22183: NOT
22184: IFFALSE 22188
// exit ;
22186: GO 22337
// un := tmp [ rand ( 1 , tmp ) ] ;
22188: LD_ADDR_VAR 0 3
22192: PUSH
22193: LD_VAR 0 2
22197: PUSH
22198: LD_INT 1
22200: PPUSH
22201: LD_VAR 0 2
22205: PPUSH
22206: CALL_OW 12
22210: ARRAY
22211: ST_TO_ADDR
// if Crawls ( un ) then
22212: LD_VAR 0 3
22216: PPUSH
22217: CALL_OW 318
22221: IFFALSE 22232
// ComWalk ( un ) ;
22223: LD_VAR 0 3
22227: PPUSH
22228: CALL_OW 138
// SetClass ( un , class_mortar ) ;
22232: LD_VAR 0 3
22236: PPUSH
22237: LD_INT 8
22239: PPUSH
22240: CALL_OW 336
// end ; 4 :
22244: GO 22337
22246: LD_INT 4
22248: DOUBLE
22249: EQUAL
22250: IFTRUE 22254
22252: GO 22315
22254: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
22255: LD_ADDR_VAR 0 2
22259: PUSH
22260: LD_INT 22
22262: PUSH
22263: LD_OWVAR 2
22267: PUSH
22268: EMPTY
22269: LIST
22270: LIST
22271: PUSH
22272: LD_INT 30
22274: PUSH
22275: LD_INT 29
22277: PUSH
22278: EMPTY
22279: LIST
22280: LIST
22281: PUSH
22282: EMPTY
22283: LIST
22284: LIST
22285: PPUSH
22286: CALL_OW 69
22290: ST_TO_ADDR
// if not tmp then
22291: LD_VAR 0 2
22295: NOT
22296: IFFALSE 22300
// exit ;
22298: GO 22337
// DestroyUnit ( tmp [ 1 ] ) ;
22300: LD_VAR 0 2
22304: PUSH
22305: LD_INT 1
22307: ARRAY
22308: PPUSH
22309: CALL_OW 65
// end ; 5 .. 7 :
22313: GO 22337
22315: LD_INT 5
22317: DOUBLE
22318: GREATEREQUAL
22319: IFFALSE 22327
22321: LD_INT 7
22323: DOUBLE
22324: LESSEQUAL
22325: IFTRUE 22329
22327: GO 22336
22329: POP
// StreamSibBomb ; end ;
22330: CALL 18631 0 0
22334: GO 22337
22336: POP
// end ;
22337: PPOPN 3
22339: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
22340: LD_EXP 26
22344: PUSH
22345: LD_EXP 76
22349: AND
22350: IFFALSE 22506
22352: GO 22354
22354: DISABLE
22355: LD_INT 0
22357: PPUSH
22358: PPUSH
22359: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
22360: LD_ADDR_VAR 0 2
22364: PUSH
22365: LD_INT 81
22367: PUSH
22368: LD_OWVAR 2
22372: PUSH
22373: EMPTY
22374: LIST
22375: LIST
22376: PUSH
22377: LD_INT 2
22379: PUSH
22380: LD_INT 21
22382: PUSH
22383: LD_INT 1
22385: PUSH
22386: EMPTY
22387: LIST
22388: LIST
22389: PUSH
22390: LD_INT 21
22392: PUSH
22393: LD_INT 2
22395: PUSH
22396: EMPTY
22397: LIST
22398: LIST
22399: PUSH
22400: EMPTY
22401: LIST
22402: LIST
22403: LIST
22404: PUSH
22405: EMPTY
22406: LIST
22407: LIST
22408: PPUSH
22409: CALL_OW 69
22413: ST_TO_ADDR
// if not tmp then
22414: LD_VAR 0 2
22418: NOT
22419: IFFALSE 22423
// exit ;
22421: GO 22506
// p := 0 ;
22423: LD_ADDR_VAR 0 3
22427: PUSH
22428: LD_INT 0
22430: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22431: LD_INT 35
22433: PPUSH
22434: CALL_OW 67
// p := p + 1 ;
22438: LD_ADDR_VAR 0 3
22442: PUSH
22443: LD_VAR 0 3
22447: PUSH
22448: LD_INT 1
22450: PLUS
22451: ST_TO_ADDR
// for i in tmp do
22452: LD_ADDR_VAR 0 1
22456: PUSH
22457: LD_VAR 0 2
22461: PUSH
22462: FOR_IN
22463: IFFALSE 22494
// if GetLives ( i ) < 1000 then
22465: LD_VAR 0 1
22469: PPUSH
22470: CALL_OW 256
22474: PUSH
22475: LD_INT 1000
22477: LESS
22478: IFFALSE 22492
// SetLives ( i , 1000 ) ;
22480: LD_VAR 0 1
22484: PPUSH
22485: LD_INT 1000
22487: PPUSH
22488: CALL_OW 234
22492: GO 22462
22494: POP
22495: POP
// until p > 20 ;
22496: LD_VAR 0 3
22500: PUSH
22501: LD_INT 20
22503: GREATER
22504: IFFALSE 22431
// end ;
22506: PPOPN 3
22508: END
// every 0 0$1 trigger StreamModeActive and sTime do
22509: LD_EXP 26
22513: PUSH
22514: LD_EXP 77
22518: AND
22519: IFFALSE 22554
22521: GO 22523
22523: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
22524: LD_INT 28
22526: PPUSH
22527: LD_OWVAR 2
22531: PPUSH
22532: LD_INT 2
22534: PPUSH
22535: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
22539: LD_INT 30
22541: PPUSH
22542: LD_OWVAR 2
22546: PPUSH
22547: LD_INT 2
22549: PPUSH
22550: CALL_OW 322
// end ;
22554: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
22555: LD_EXP 26
22559: PUSH
22560: LD_EXP 78
22564: AND
22565: IFFALSE 22686
22567: GO 22569
22569: DISABLE
22570: LD_INT 0
22572: PPUSH
22573: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22574: LD_ADDR_VAR 0 2
22578: PUSH
22579: LD_INT 22
22581: PUSH
22582: LD_OWVAR 2
22586: PUSH
22587: EMPTY
22588: LIST
22589: LIST
22590: PUSH
22591: LD_INT 21
22593: PUSH
22594: LD_INT 1
22596: PUSH
22597: EMPTY
22598: LIST
22599: LIST
22600: PUSH
22601: LD_INT 3
22603: PUSH
22604: LD_INT 23
22606: PUSH
22607: LD_INT 0
22609: PUSH
22610: EMPTY
22611: LIST
22612: LIST
22613: PUSH
22614: EMPTY
22615: LIST
22616: LIST
22617: PUSH
22618: EMPTY
22619: LIST
22620: LIST
22621: LIST
22622: PPUSH
22623: CALL_OW 69
22627: ST_TO_ADDR
// if not tmp then
22628: LD_VAR 0 2
22632: NOT
22633: IFFALSE 22637
// exit ;
22635: GO 22686
// for i in tmp do
22637: LD_ADDR_VAR 0 1
22641: PUSH
22642: LD_VAR 0 2
22646: PUSH
22647: FOR_IN
22648: IFFALSE 22684
// begin if Crawls ( i ) then
22650: LD_VAR 0 1
22654: PPUSH
22655: CALL_OW 318
22659: IFFALSE 22670
// ComWalk ( i ) ;
22661: LD_VAR 0 1
22665: PPUSH
22666: CALL_OW 138
// SetClass ( i , 2 ) ;
22670: LD_VAR 0 1
22674: PPUSH
22675: LD_INT 2
22677: PPUSH
22678: CALL_OW 336
// end ;
22682: GO 22647
22684: POP
22685: POP
// end ;
22686: PPOPN 2
22688: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
22689: LD_EXP 26
22693: PUSH
22694: LD_EXP 79
22698: AND
22699: IFFALSE 22904
22701: GO 22703
22703: DISABLE
22704: LD_INT 0
22706: PPUSH
22707: PPUSH
22708: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
22709: LD_OWVAR 2
22713: PPUSH
22714: LD_INT 9
22716: PPUSH
22717: LD_INT 1
22719: PPUSH
22720: LD_INT 1
22722: PPUSH
22723: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
22727: LD_INT 9
22729: PPUSH
22730: LD_OWVAR 2
22734: PPUSH
22735: CALL_OW 343
// hc_name := Dark Warrior ;
22739: LD_ADDR_OWVAR 26
22743: PUSH
22744: LD_STRING Dark Warrior
22746: ST_TO_ADDR
// hc_gallery :=  ;
22747: LD_ADDR_OWVAR 33
22751: PUSH
22752: LD_STRING 
22754: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 10 ) ;
22755: LD_INT 1
22757: PPUSH
22758: LD_INT 1
22760: PPUSH
22761: LD_INT 10
22763: PPUSH
22764: CALL_OW 380
// un := CreateHuman ;
22768: LD_ADDR_VAR 0 3
22772: PUSH
22773: CALL_OW 44
22777: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
22778: LD_VAR 0 3
22782: PPUSH
22783: LD_INT 1
22785: PPUSH
22786: CALL_OW 51
// p := 0 ;
22790: LD_ADDR_VAR 0 2
22794: PUSH
22795: LD_INT 0
22797: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22798: LD_INT 35
22800: PPUSH
22801: CALL_OW 67
// if GetLives ( un ) < 1000 then
22805: LD_VAR 0 3
22809: PPUSH
22810: CALL_OW 256
22814: PUSH
22815: LD_INT 1000
22817: LESS
22818: IFFALSE 22832
// SetLives ( un , 1000 ) ;
22820: LD_VAR 0 3
22824: PPUSH
22825: LD_INT 1000
22827: PPUSH
22828: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , your_side ] ) , un ) ) ;
22832: LD_VAR 0 3
22836: PPUSH
22837: LD_INT 81
22839: PUSH
22840: LD_OWVAR 2
22844: PUSH
22845: EMPTY
22846: LIST
22847: LIST
22848: PPUSH
22849: CALL_OW 69
22853: PPUSH
22854: LD_VAR 0 3
22858: PPUSH
22859: CALL_OW 74
22863: PPUSH
22864: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
22868: LD_VAR 0 2
22872: PUSH
22873: LD_INT 60
22875: GREATER
22876: PUSH
22877: LD_VAR 0 3
22881: PPUSH
22882: CALL_OW 301
22886: OR
22887: IFFALSE 22798
// if un then
22889: LD_VAR 0 3
22893: IFFALSE 22904
// RemoveUnit ( un ) ;
22895: LD_VAR 0 3
22899: PPUSH
22900: CALL_OW 64
// end ; end_of_file
22904: PPOPN 3
22906: END
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; var i , eff , side ; begin
22907: LD_INT 0
22909: PPUSH
22910: PPUSH
22911: PPUSH
22912: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
22913: LD_VAR 0 1
22917: PPUSH
22918: CALL_OW 264
22922: PUSH
22923: LD_EXP 25
22927: EQUAL
22928: IFFALSE 23000
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
22930: LD_INT 68
22932: PPUSH
22933: LD_VAR 0 1
22937: PPUSH
22938: CALL_OW 255
22942: PPUSH
22943: CALL_OW 321
22947: PUSH
22948: LD_INT 2
22950: EQUAL
22951: IFFALSE 22963
// eff := 70 else
22953: LD_ADDR_VAR 0 6
22957: PUSH
22958: LD_INT 70
22960: ST_TO_ADDR
22961: GO 22971
// eff := 30 ;
22963: LD_ADDR_VAR 0 6
22967: PUSH
22968: LD_INT 30
22970: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
22971: LD_VAR 0 1
22975: PPUSH
22976: CALL_OW 250
22980: PPUSH
22981: LD_VAR 0 1
22985: PPUSH
22986: CALL_OW 251
22990: PPUSH
22991: LD_VAR 0 6
22995: PPUSH
22996: CALL_OW 495
// end ; end ;
23000: LD_VAR 0 4
23004: RET
// export function SOS_Command ( cmd ) ; var i , j , tmp , taskList , _taskList ; begin
23005: LD_INT 0
23007: PPUSH
23008: PPUSH
23009: PPUSH
23010: PPUSH
23011: PPUSH
23012: PPUSH
// if cmd = 124 then
23013: LD_VAR 0 1
23017: PUSH
23018: LD_INT 124
23020: EQUAL
23021: IFFALSE 23227
// begin tmp := FilterAllUnits ( [ f_or , [ f_weapon , ru_bulldozer ] , [ f_weapon , us_bulldozer ] ] ) ;
23023: LD_ADDR_VAR 0 5
23027: PUSH
23028: LD_INT 2
23030: PUSH
23031: LD_INT 34
23033: PUSH
23034: LD_INT 53
23036: PUSH
23037: EMPTY
23038: LIST
23039: LIST
23040: PUSH
23041: LD_INT 34
23043: PUSH
23044: LD_INT 14
23046: PUSH
23047: EMPTY
23048: LIST
23049: LIST
23050: PUSH
23051: EMPTY
23052: LIST
23053: LIST
23054: LIST
23055: PPUSH
23056: CALL_OW 69
23060: ST_TO_ADDR
// if not tmp then
23061: LD_VAR 0 5
23065: NOT
23066: IFFALSE 23070
// exit ;
23068: GO 23227
// for i in tmp do
23070: LD_ADDR_VAR 0 3
23074: PUSH
23075: LD_VAR 0 5
23079: PUSH
23080: FOR_IN
23081: IFFALSE 23225
// begin taskList := GetTaskList ( i ) ;
23083: LD_ADDR_VAR 0 6
23087: PUSH
23088: LD_VAR 0 3
23092: PPUSH
23093: CALL_OW 437
23097: ST_TO_ADDR
// if not taskList then
23098: LD_VAR 0 6
23102: NOT
23103: IFFALSE 23107
// continue ;
23105: GO 23080
// for j = 1 to taskList do
23107: LD_ADDR_VAR 0 4
23111: PUSH
23112: DOUBLE
23113: LD_INT 1
23115: DEC
23116: ST_TO_ADDR
23117: LD_VAR 0 6
23121: PUSH
23122: FOR_TO
23123: IFFALSE 23221
// if taskList [ j ] [ 1 ] = | then
23125: LD_VAR 0 6
23129: PUSH
23130: LD_VAR 0 4
23134: ARRAY
23135: PUSH
23136: LD_INT 1
23138: ARRAY
23139: PUSH
23140: LD_STRING |
23142: EQUAL
23143: IFFALSE 23219
// begin _taskList := Delete ( taskList , 1 ) ;
23145: LD_ADDR_VAR 0 7
23149: PUSH
23150: LD_VAR 0 6
23154: PPUSH
23155: LD_INT 1
23157: PPUSH
23158: CALL_OW 3
23162: ST_TO_ADDR
// SetTaskList ( i , _taskList ) ;
23163: LD_VAR 0 3
23167: PPUSH
23168: LD_VAR 0 7
23172: PPUSH
23173: CALL_OW 446
// CutTreeXYR ( i , taskList [ j ] [ 2 ] , taskList [ j ] [ 3 ] , 8 ) ;
23177: LD_VAR 0 3
23181: PPUSH
23182: LD_VAR 0 6
23186: PUSH
23187: LD_VAR 0 4
23191: ARRAY
23192: PUSH
23193: LD_INT 2
23195: ARRAY
23196: PPUSH
23197: LD_VAR 0 6
23201: PUSH
23202: LD_VAR 0 4
23206: ARRAY
23207: PUSH
23208: LD_INT 3
23210: ARRAY
23211: PPUSH
23212: LD_INT 8
23214: PPUSH
23215: CALL 23232 0 4
// end ;
23219: GO 23122
23221: POP
23222: POP
// end ;
23223: GO 23080
23225: POP
23226: POP
// end ; end ;
23227: LD_VAR 0 2
23231: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
23232: LD_INT 0
23234: PPUSH
23235: PPUSH
23236: PPUSH
23237: PPUSH
23238: PPUSH
23239: PPUSH
23240: PPUSH
23241: PPUSH
23242: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
23243: LD_VAR 0 1
23247: NOT
23248: PUSH
23249: LD_VAR 0 2
23253: PPUSH
23254: LD_VAR 0 3
23258: PPUSH
23259: CALL_OW 488
23263: NOT
23264: OR
23265: PUSH
23266: LD_VAR 0 4
23270: NOT
23271: OR
23272: IFFALSE 23276
// exit ;
23274: GO 23616
// list := [ ] ;
23276: LD_ADDR_VAR 0 13
23280: PUSH
23281: EMPTY
23282: ST_TO_ADDR
// if x - r < 0 then
23283: LD_VAR 0 2
23287: PUSH
23288: LD_VAR 0 4
23292: MINUS
23293: PUSH
23294: LD_INT 0
23296: LESS
23297: IFFALSE 23309
// min_x := 0 else
23299: LD_ADDR_VAR 0 7
23303: PUSH
23304: LD_INT 0
23306: ST_TO_ADDR
23307: GO 23325
// min_x := x - r ;
23309: LD_ADDR_VAR 0 7
23313: PUSH
23314: LD_VAR 0 2
23318: PUSH
23319: LD_VAR 0 4
23323: MINUS
23324: ST_TO_ADDR
// if y - r < 0 then
23325: LD_VAR 0 3
23329: PUSH
23330: LD_VAR 0 4
23334: MINUS
23335: PUSH
23336: LD_INT 0
23338: LESS
23339: IFFALSE 23351
// min_y := 0 else
23341: LD_ADDR_VAR 0 8
23345: PUSH
23346: LD_INT 0
23348: ST_TO_ADDR
23349: GO 23367
// min_y := y - r ;
23351: LD_ADDR_VAR 0 8
23355: PUSH
23356: LD_VAR 0 3
23360: PUSH
23361: LD_VAR 0 4
23365: MINUS
23366: ST_TO_ADDR
// max_x := x + r ;
23367: LD_ADDR_VAR 0 9
23371: PUSH
23372: LD_VAR 0 2
23376: PUSH
23377: LD_VAR 0 4
23381: PLUS
23382: ST_TO_ADDR
// max_y := y + r ;
23383: LD_ADDR_VAR 0 10
23387: PUSH
23388: LD_VAR 0 3
23392: PUSH
23393: LD_VAR 0 4
23397: PLUS
23398: ST_TO_ADDR
// for _x = min_x to max_x do
23399: LD_ADDR_VAR 0 11
23403: PUSH
23404: DOUBLE
23405: LD_VAR 0 7
23409: DEC
23410: ST_TO_ADDR
23411: LD_VAR 0 9
23415: PUSH
23416: FOR_TO
23417: IFFALSE 23534
// for _y = min_y to max_y do
23419: LD_ADDR_VAR 0 12
23423: PUSH
23424: DOUBLE
23425: LD_VAR 0 8
23429: DEC
23430: ST_TO_ADDR
23431: LD_VAR 0 10
23435: PUSH
23436: FOR_TO
23437: IFFALSE 23530
// begin if not ValidHex ( _x , _y ) then
23439: LD_VAR 0 11
23443: PPUSH
23444: LD_VAR 0 12
23448: PPUSH
23449: CALL_OW 488
23453: NOT
23454: IFFALSE 23458
// continue ;
23456: GO 23436
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
23458: LD_VAR 0 11
23462: PPUSH
23463: LD_VAR 0 12
23467: PPUSH
23468: CALL_OW 351
23472: PUSH
23473: LD_VAR 0 11
23477: PPUSH
23478: LD_VAR 0 12
23482: PPUSH
23483: CALL_OW 554
23487: AND
23488: IFFALSE 23528
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
23490: LD_ADDR_VAR 0 13
23494: PUSH
23495: LD_VAR 0 13
23499: PPUSH
23500: LD_VAR 0 13
23504: PUSH
23505: LD_INT 1
23507: PLUS
23508: PPUSH
23509: LD_VAR 0 11
23513: PUSH
23514: LD_VAR 0 12
23518: PUSH
23519: EMPTY
23520: LIST
23521: LIST
23522: PPUSH
23523: CALL_OW 2
23527: ST_TO_ADDR
// end ;
23528: GO 23436
23530: POP
23531: POP
23532: GO 23416
23534: POP
23535: POP
// if not list then
23536: LD_VAR 0 13
23540: NOT
23541: IFFALSE 23545
// exit ;
23543: GO 23616
// for i in list do
23545: LD_ADDR_VAR 0 6
23549: PUSH
23550: LD_VAR 0 13
23554: PUSH
23555: FOR_IN
23556: IFFALSE 23614
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
23558: LD_VAR 0 1
23562: PPUSH
23563: LD_STRING M
23565: PUSH
23566: LD_VAR 0 6
23570: PUSH
23571: LD_INT 1
23573: ARRAY
23574: PUSH
23575: LD_VAR 0 6
23579: PUSH
23580: LD_INT 2
23582: ARRAY
23583: PUSH
23584: LD_INT 0
23586: PUSH
23587: LD_INT 0
23589: PUSH
23590: LD_INT 0
23592: PUSH
23593: LD_INT 0
23595: PUSH
23596: EMPTY
23597: LIST
23598: LIST
23599: LIST
23600: LIST
23601: LIST
23602: LIST
23603: LIST
23604: PUSH
23605: EMPTY
23606: LIST
23607: PPUSH
23608: CALL_OW 447
23612: GO 23555
23614: POP
23615: POP
// end ;
23616: LD_VAR 0 5
23620: RET
