// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// Init ;
   8: CALL 44 0 0
// DebugMode ;
  12: CALL 265 0 0
// AnimateTrees ( true ) ;
  16: LD_INT 1
  18: PPUSH
  19: CALL_OW 573
// CreateNature ;
  23: CALL 1568 0 0
// PrepareRussians ;
  27: CALL 4578 0 0
// PrepareAmericans ;
  31: CALL 3448 0 0
// Action ;
  35: CALL 8692 0 0
// SaveForQuickRestart ;
  39: CALL_OW 22
// end ;
  43: END
// export debug ; export mission_prev_prefix , mission_prefix ; export buildings_counter , time_to_end , can_end , must_end , kill_counter ; function Init ; begin
  44: LD_INT 0
  46: PPUSH
// debug := false ;
  47: LD_ADDR_EXP 1
  51: PUSH
  52: LD_INT 0
  54: ST_TO_ADDR
// mission_prefix := 07c_ ;
  55: LD_ADDR_EXP 3
  59: PUSH
  60: LD_STRING 07c_
  62: ST_TO_ADDR
// mission_prev_prefix := 07_ ;
  63: LD_ADDR_EXP 2
  67: PUSH
  68: LD_STRING 07_
  70: ST_TO_ADDR
// buildings_counter := 0 ;
  71: LD_ADDR_EXP 4
  75: PUSH
  76: LD_INT 0
  78: ST_TO_ADDR
// time_to_end := [ [ 32 32$00 , 29 29$00 , 26 26$00 , 23 23$00 ] [ Difficulty ] , [ 38 38$00 , 36 36$00 , 34 34$00 , 32 32$00 ] [ Difficulty ] , [ 43 43$00 , 41 41$00 , 39 39$00 , 37 37$00 ] [ Difficulty ] ] ;
  79: LD_ADDR_EXP 5
  83: PUSH
  84: LD_INT 67200
  86: PUSH
  87: LD_INT 60900
  89: PUSH
  90: LD_INT 54600
  92: PUSH
  93: LD_INT 48300
  95: PUSH
  96: EMPTY
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: PUSH
 102: LD_OWVAR 67
 106: ARRAY
 107: PUSH
 108: LD_INT 79800
 110: PUSH
 111: LD_INT 75600
 113: PUSH
 114: LD_INT 71400
 116: PUSH
 117: LD_INT 67200
 119: PUSH
 120: EMPTY
 121: LIST
 122: LIST
 123: LIST
 124: LIST
 125: PUSH
 126: LD_OWVAR 67
 130: ARRAY
 131: PUSH
 132: LD_INT 90300
 134: PUSH
 135: LD_INT 86100
 137: PUSH
 138: LD_INT 81900
 140: PUSH
 141: LD_INT 77700
 143: PUSH
 144: EMPTY
 145: LIST
 146: LIST
 147: LIST
 148: LIST
 149: PUSH
 150: LD_OWVAR 67
 154: ARRAY
 155: PUSH
 156: EMPTY
 157: LIST
 158: LIST
 159: LIST
 160: ST_TO_ADDR
// can_end := false ;
 161: LD_ADDR_EXP 6
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// must_end := false ;
 169: LD_ADDR_EXP 7
 173: PUSH
 174: LD_INT 0
 176: ST_TO_ADDR
// kill_counter := 0 ;
 177: LD_ADDR_EXP 8
 181: PUSH
 182: LD_INT 0
 184: ST_TO_ADDR
// end ;
 185: LD_VAR 0 1
 189: RET
// every 0 0$01 trigger not debug do
 190: LD_EXP 1
 194: NOT
 195: IFFALSE 264
 197: GO 199
 199: DISABLE
// begin enable ;
 200: ENABLE
// if not must_end then
 201: LD_EXP 7
 205: NOT
 206: IFFALSE 227
// display_strings := [ #Am07-1 , tick ] else
 208: LD_ADDR_OWVAR 47
 212: PUSH
 213: LD_STRING #Am07-1
 215: PUSH
 216: LD_OWVAR 1
 220: PUSH
 221: EMPTY
 222: LIST
 223: LIST
 224: ST_TO_ADDR
 225: GO 264
// display_strings := [ #Am07-1 , tick , #Am07-2 , time_to_end [ 3 ] - tick ] ;
 227: LD_ADDR_OWVAR 47
 231: PUSH
 232: LD_STRING #Am07-1
 234: PUSH
 235: LD_OWVAR 1
 239: PUSH
 240: LD_STRING #Am07-2
 242: PUSH
 243: LD_EXP 5
 247: PUSH
 248: LD_INT 3
 250: ARRAY
 251: PUSH
 252: LD_OWVAR 1
 256: MINUS
 257: PUSH
 258: EMPTY
 259: LIST
 260: LIST
 261: LIST
 262: LIST
 263: ST_TO_ADDR
// end ;
 264: END
// function DebugMode ; var i ; begin
 265: LD_INT 0
 267: PPUSH
 268: PPUSH
// if not debug then
 269: LD_EXP 1
 273: NOT
 274: IFFALSE 278
// exit ;
 276: GO 293
// Difficulty := 4 ;
 278: LD_ADDR_OWVAR 67
 282: PUSH
 283: LD_INT 4
 285: ST_TO_ADDR
// FogOff ( 1 ) ;
 286: LD_INT 1
 288: PPUSH
 289: CALL_OW 344
// end ;
 293: LD_VAR 0 1
 297: RET
// every 3 trigger debug do var i , filter ;
 298: LD_EXP 1
 302: IFFALSE 391
 304: GO 306
 306: DISABLE
 307: LD_INT 0
 309: PPUSH
 310: PPUSH
// begin enable ;
 311: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 500 ] ] ] ) ;
 312: LD_ADDR_VAR 0 2
 316: PUSH
 317: LD_INT 22
 319: PUSH
 320: LD_INT 1
 322: PUSH
 323: EMPTY
 324: LIST
 325: LIST
 326: PUSH
 327: LD_INT 3
 329: PUSH
 330: LD_INT 24
 332: PUSH
 333: LD_INT 500
 335: PUSH
 336: EMPTY
 337: LIST
 338: LIST
 339: PUSH
 340: EMPTY
 341: LIST
 342: LIST
 343: PUSH
 344: EMPTY
 345: LIST
 346: LIST
 347: PPUSH
 348: CALL_OW 69
 352: ST_TO_ADDR
// if not filter then
 353: LD_VAR 0 2
 357: NOT
 358: IFFALSE 362
// exit ;
 360: GO 391
// for i in filter do
 362: LD_ADDR_VAR 0 1
 366: PUSH
 367: LD_VAR 0 2
 371: PUSH
 372: FOR_IN
 373: IFFALSE 389
// SetLives ( i , 1000 ) ;
 375: LD_VAR 0 1
 379: PPUSH
 380: LD_INT 1000
 382: PPUSH
 383: CALL_OW 234
 387: GO 372
 389: POP
 390: POP
// end ;
 391: PPOPN 2
 393: END
// every 0 0$1 trigger kill_counter >= 20 do
 394: LD_EXP 8
 398: PUSH
 399: LD_INT 20
 401: GREATEREQUAL
 402: IFFALSE 414
 404: GO 406
 406: DISABLE
// SetAchievement ( ACH_HITMAN ) ;
 407: LD_STRING ACH_HITMAN
 409: PPUSH
 410: CALL_OW 543
 414: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] ] ) >= 3 do
 415: LD_INT 22
 417: PUSH
 418: LD_INT 1
 420: PUSH
 421: EMPTY
 422: LIST
 423: LIST
 424: PUSH
 425: LD_INT 23
 427: PUSH
 428: LD_INT 3
 430: PUSH
 431: EMPTY
 432: LIST
 433: LIST
 434: PUSH
 435: LD_INT 21
 437: PUSH
 438: LD_INT 2
 440: PUSH
 441: EMPTY
 442: LIST
 443: LIST
 444: PUSH
 445: EMPTY
 446: LIST
 447: LIST
 448: LIST
 449: PPUSH
 450: CALL_OW 69
 454: PUSH
 455: LD_INT 3
 457: GREATEREQUAL
 458: IFFALSE 470
 460: GO 462
 462: DISABLE
// SetAchievement ( ACH_TANKACE ) ;
 463: LD_STRING ACH_TANKACE
 465: PPUSH
 466: CALL_OW 543
 470: END
// every 0 0$1 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) = 0 do
 471: LD_INT 2
 473: PUSH
 474: LD_INT 30
 476: PUSH
 477: LD_INT 0
 479: PUSH
 480: EMPTY
 481: LIST
 482: LIST
 483: PUSH
 484: LD_INT 30
 486: PUSH
 487: LD_INT 1
 489: PUSH
 490: EMPTY
 491: LIST
 492: LIST
 493: PUSH
 494: EMPTY
 495: LIST
 496: LIST
 497: LIST
 498: PPUSH
 499: CALL_OW 69
 503: PUSH
 504: LD_INT 0
 506: EQUAL
 507: IFFALSE 519
 509: GO 511
 511: DISABLE
// SetAchievement ( ACH_COMMANDO ) ; end_of_file
 512: LD_STRING ACH_COMMANDO
 514: PPUSH
 515: CALL_OW 543
 519: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 520: LD_INT 0
 522: PPUSH
// uc_side := side ;
 523: LD_ADDR_OWVAR 20
 527: PUSH
 528: LD_VAR 0 1
 532: ST_TO_ADDR
// uc_nation := nation ;
 533: LD_ADDR_OWVAR 21
 537: PUSH
 538: LD_VAR 0 2
 542: ST_TO_ADDR
// vc_chassis := chassis ;
 543: LD_ADDR_OWVAR 37
 547: PUSH
 548: LD_VAR 0 3
 552: ST_TO_ADDR
// vc_engine := engine ;
 553: LD_ADDR_OWVAR 39
 557: PUSH
 558: LD_VAR 0 4
 562: ST_TO_ADDR
// vc_control := control ;
 563: LD_ADDR_OWVAR 38
 567: PUSH
 568: LD_VAR 0 5
 572: ST_TO_ADDR
// vc_weapon := weapon ;
 573: LD_ADDR_OWVAR 40
 577: PUSH
 578: LD_VAR 0 6
 582: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 583: LD_ADDR_OWVAR 41
 587: PUSH
 588: LD_VAR 0 7
 592: ST_TO_ADDR
// result := CreateVehicle ;
 593: LD_ADDR_VAR 0 8
 597: PUSH
 598: CALL_OW 45
 602: ST_TO_ADDR
// end ;
 603: LD_VAR 0 8
 607: RET
// export function GetRandom ( sex ) ; var i , filter ; begin
 608: LD_INT 0
 610: PPUSH
 611: PPUSH
 612: PPUSH
// filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam ] ;
 613: LD_ADDR_VAR 0 4
 617: PUSH
 618: LD_INT 22
 620: PUSH
 621: LD_INT 1
 623: PUSH
 624: EMPTY
 625: LIST
 626: LIST
 627: PUSH
 628: LD_INT 21
 630: PUSH
 631: LD_INT 1
 633: PUSH
 634: EMPTY
 635: LIST
 636: LIST
 637: PUSH
 638: LD_INT 50
 640: PUSH
 641: EMPTY
 642: LIST
 643: PUSH
 644: EMPTY
 645: LIST
 646: LIST
 647: LIST
 648: PPUSH
 649: CALL_OW 69
 653: PUSH
 654: LD_EXP 9
 658: PUSH
 659: LD_EXP 10
 663: PUSH
 664: LD_EXP 11
 668: PUSH
 669: LD_EXP 12
 673: PUSH
 674: LD_EXP 13
 678: PUSH
 679: LD_EXP 14
 683: PUSH
 684: LD_EXP 15
 688: PUSH
 689: LD_EXP 16
 693: PUSH
 694: LD_EXP 18
 698: PUSH
 699: LD_EXP 17
 703: PUSH
 704: EMPTY
 705: LIST
 706: LIST
 707: LIST
 708: LIST
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: LIST
 714: LIST
 715: DIFF
 716: ST_TO_ADDR
// if not filter then
 717: LD_VAR 0 4
 721: NOT
 722: IFFALSE 726
// exit ;
 724: GO 753
// result := UnitFilter ( filter , [ f_sex , sex ] ) ;
 726: LD_ADDR_VAR 0 2
 730: PUSH
 731: LD_VAR 0 4
 735: PPUSH
 736: LD_INT 26
 738: PUSH
 739: LD_VAR 0 1
 743: PUSH
 744: EMPTY
 745: LIST
 746: LIST
 747: PPUSH
 748: CALL_OW 72
 752: ST_TO_ADDR
// end ;
 753: LD_VAR 0 2
 757: RET
// export function SayX ( units , ident ) ; var i ; begin
 758: LD_INT 0
 760: PPUSH
 761: PPUSH
// result := false ;
 762: LD_ADDR_VAR 0 3
 766: PUSH
 767: LD_INT 0
 769: ST_TO_ADDR
// if not units then
 770: LD_VAR 0 1
 774: NOT
 775: IFFALSE 779
// exit ;
 777: GO 833
// for i in units do
 779: LD_ADDR_VAR 0 4
 783: PUSH
 784: LD_VAR 0 1
 788: PUSH
 789: FOR_IN
 790: IFFALSE 831
// if IsOk ( i ) then
 792: LD_VAR 0 4
 796: PPUSH
 797: CALL_OW 302
 801: IFFALSE 829
// begin Say ( i , ident ) ;
 803: LD_VAR 0 4
 807: PPUSH
 808: LD_VAR 0 2
 812: PPUSH
 813: CALL_OW 88
// result := i ;
 817: LD_ADDR_VAR 0 3
 821: PUSH
 822: LD_VAR 0 4
 826: ST_TO_ADDR
// break ;
 827: GO 831
// end ;
 829: GO 789
 831: POP
 832: POP
// end ;
 833: LD_VAR 0 3
 837: RET
// export function GoToAnotherTower ( un , b , x , y ) ; var i , filter , barracks , side ; begin
 838: LD_INT 0
 840: PPUSH
 841: PPUSH
 842: PPUSH
 843: PPUSH
 844: PPUSH
// if not un or not IsOk ( un ) then
 845: LD_VAR 0 1
 849: NOT
 850: PUSH
 851: LD_VAR 0 1
 855: PPUSH
 856: CALL_OW 302
 860: NOT
 861: OR
 862: IFFALSE 866
// exit ;
 864: GO 1173
// side := GetSide ( un ) ;
 866: LD_ADDR_VAR 0 9
 870: PUSH
 871: LD_VAR 0 1
 875: PPUSH
 876: CALL_OW 255
 880: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_not , [ f_tag , 7 ] ] , [ f_ok ] , [ f_empty ] ] ) diff b ;
 881: LD_ADDR_VAR 0 7
 885: PUSH
 886: LD_INT 22
 888: PUSH
 889: LD_VAR 0 9
 893: PUSH
 894: EMPTY
 895: LIST
 896: LIST
 897: PUSH
 898: LD_INT 30
 900: PUSH
 901: LD_INT 32
 903: PUSH
 904: EMPTY
 905: LIST
 906: LIST
 907: PUSH
 908: LD_INT 3
 910: PUSH
 911: LD_INT 120
 913: PUSH
 914: LD_INT 7
 916: PUSH
 917: EMPTY
 918: LIST
 919: LIST
 920: PUSH
 921: EMPTY
 922: LIST
 923: LIST
 924: PUSH
 925: LD_INT 50
 927: PUSH
 928: EMPTY
 929: LIST
 930: PUSH
 931: LD_INT 58
 933: PUSH
 934: EMPTY
 935: LIST
 936: PUSH
 937: EMPTY
 938: LIST
 939: LIST
 940: LIST
 941: LIST
 942: LIST
 943: PPUSH
 944: CALL_OW 69
 948: PUSH
 949: LD_VAR 0 2
 953: DIFF
 954: ST_TO_ADDR
// barracks := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_barracks ] ] ) ;
 955: LD_ADDR_VAR 0 8
 959: PUSH
 960: LD_INT 22
 962: PUSH
 963: LD_VAR 0 9
 967: PUSH
 968: EMPTY
 969: LIST
 970: LIST
 971: PUSH
 972: LD_INT 30
 974: PUSH
 975: LD_INT 5
 977: PUSH
 978: EMPTY
 979: LIST
 980: LIST
 981: PUSH
 982: EMPTY
 983: LIST
 984: LIST
 985: PPUSH
 986: CALL_OW 69
 990: ST_TO_ADDR
// if not filter then
 991: LD_VAR 0 7
 995: NOT
 996: IFFALSE 1086
// begin if barracks then
 998: LD_VAR 0 8
1002: IFFALSE 1065
// for i in barracks do
1004: LD_ADDR_VAR 0 6
1008: PUSH
1009: LD_VAR 0 8
1013: PUSH
1014: FOR_IN
1015: IFFALSE 1063
// begin if UnitsInside ( i ) < 6 and IsOk ( i ) then
1017: LD_VAR 0 6
1021: PPUSH
1022: CALL_OW 313
1026: PUSH
1027: LD_INT 6
1029: LESS
1030: PUSH
1031: LD_VAR 0 6
1035: PPUSH
1036: CALL_OW 302
1040: AND
1041: IFFALSE 1061
// begin ComEnterUnit ( un , i ) ;
1043: LD_VAR 0 1
1047: PPUSH
1048: LD_VAR 0 6
1052: PPUSH
1053: CALL_OW 120
// exit ;
1057: POP
1058: POP
1059: GO 1173
// end ; end ;
1061: GO 1014
1063: POP
1064: POP
// ComMoveXY ( un , x , y ) ;
1065: LD_VAR 0 1
1069: PPUSH
1070: LD_VAR 0 3
1074: PPUSH
1075: LD_VAR 0 4
1079: PPUSH
1080: CALL_OW 111
// end else
1084: GO 1173
// begin filter := SortByDistanceUnit ( un , filter , true , true ) ;
1086: LD_ADDR_VAR 0 7
1090: PUSH
1091: LD_VAR 0 1
1095: PPUSH
1096: LD_VAR 0 7
1100: PPUSH
1101: LD_INT 1
1103: PPUSH
1104: LD_INT 1
1106: PPUSH
1107: CALL 37898 0 4
1111: ST_TO_ADDR
// if filter then
1112: LD_VAR 0 7
1116: IFFALSE 1154
// begin SetTag ( filter [ 1 ] , 7 ) ;
1118: LD_VAR 0 7
1122: PUSH
1123: LD_INT 1
1125: ARRAY
1126: PPUSH
1127: LD_INT 7
1129: PPUSH
1130: CALL_OW 109
// ComEnterUnit ( un , filter [ 1 ] ) ;
1134: LD_VAR 0 1
1138: PPUSH
1139: LD_VAR 0 7
1143: PUSH
1144: LD_INT 1
1146: ARRAY
1147: PPUSH
1148: CALL_OW 120
// end else
1152: GO 1173
// ComMoveXY ( un , x , y ) ;
1154: LD_VAR 0 1
1158: PPUSH
1159: LD_VAR 0 3
1163: PPUSH
1164: LD_VAR 0 4
1168: PPUSH
1169: CALL_OW 111
// end ; end ;
1173: LD_VAR 0 5
1177: RET
// export function BaseNeedEnergy ( base ) ; var i , tmp ; begin
1178: LD_INT 0
1180: PPUSH
1181: PPUSH
1182: PPUSH
// if not base then
1183: LD_VAR 0 1
1187: NOT
1188: IFFALSE 1192
// exit ;
1190: GO 1250
// tmp := GetEnergy ( GetBase ( base ) ) ;
1192: LD_ADDR_VAR 0 4
1196: PUSH
1197: LD_VAR 0 1
1201: PPUSH
1202: CALL_OW 274
1206: PPUSH
1207: CALL_OW 278
1211: ST_TO_ADDR
// if tmp [ 1 ] > tmp [ 4 ] then
1212: LD_VAR 0 4
1216: PUSH
1217: LD_INT 1
1219: ARRAY
1220: PUSH
1221: LD_VAR 0 4
1225: PUSH
1226: LD_INT 4
1228: ARRAY
1229: GREATER
1230: IFFALSE 1242
// result := true else
1232: LD_ADDR_VAR 0 2
1236: PUSH
1237: LD_INT 1
1239: ST_TO_ADDR
1240: GO 1250
// result := false ;
1242: LD_ADDR_VAR 0 2
1246: PUSH
1247: LD_INT 0
1249: ST_TO_ADDR
// end ;
1250: LD_VAR 0 2
1254: RET
// export function FilterPeople ( side ) ; begin
1255: LD_INT 0
1257: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] ] ) ;
1258: LD_ADDR_VAR 0 2
1262: PUSH
1263: LD_INT 22
1265: PUSH
1266: LD_VAR 0 1
1270: PUSH
1271: EMPTY
1272: LIST
1273: LIST
1274: PUSH
1275: LD_INT 21
1277: PUSH
1278: LD_INT 1
1280: PUSH
1281: EMPTY
1282: LIST
1283: LIST
1284: PUSH
1285: EMPTY
1286: LIST
1287: LIST
1288: PPUSH
1289: CALL_OW 69
1293: ST_TO_ADDR
// end ;
1294: LD_VAR 0 2
1298: RET
// export function FilterDrivers ( side ) ; begin
1299: LD_INT 0
1301: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_outside ] ] ] ) ;
1302: LD_ADDR_VAR 0 2
1306: PUSH
1307: LD_INT 22
1309: PUSH
1310: LD_VAR 0 1
1314: PUSH
1315: EMPTY
1316: LIST
1317: LIST
1318: PUSH
1319: LD_INT 3
1321: PUSH
1322: LD_INT 56
1324: PUSH
1325: EMPTY
1326: LIST
1327: PUSH
1328: EMPTY
1329: LIST
1330: LIST
1331: PUSH
1332: EMPTY
1333: LIST
1334: LIST
1335: PPUSH
1336: CALL_OW 69
1340: ST_TO_ADDR
// end ;
1341: LD_VAR 0 2
1345: RET
// export function FilterPeopleArea ( side , area ) ; begin
1346: LD_INT 0
1348: PPUSH
// result := FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ;
1349: LD_ADDR_VAR 0 3
1353: PUSH
1354: LD_VAR 0 2
1358: PPUSH
1359: LD_INT 22
1361: PUSH
1362: LD_INT 1
1364: PUSH
1365: EMPTY
1366: LIST
1367: LIST
1368: PUSH
1369: LD_INT 21
1371: PUSH
1372: LD_INT 1
1374: PUSH
1375: EMPTY
1376: LIST
1377: LIST
1378: PUSH
1379: EMPTY
1380: LIST
1381: LIST
1382: PPUSH
1383: CALL_OW 70
1387: ST_TO_ADDR
// end ;
1388: LD_VAR 0 3
1392: RET
// export function FilterDriversArea ( side , area ) ; var i , tmp ; begin
1393: LD_INT 0
1395: PPUSH
1396: PPUSH
1397: PPUSH
// tmp := FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) ;
1398: LD_ADDR_VAR 0 5
1402: PUSH
1403: LD_VAR 0 2
1407: PPUSH
1408: LD_INT 22
1410: PUSH
1411: LD_INT 1
1413: PUSH
1414: EMPTY
1415: LIST
1416: LIST
1417: PUSH
1418: LD_INT 21
1420: PUSH
1421: LD_INT 2
1423: PUSH
1424: EMPTY
1425: LIST
1426: LIST
1427: PUSH
1428: LD_INT 3
1430: PUSH
1431: LD_INT 58
1433: PUSH
1434: EMPTY
1435: LIST
1436: PUSH
1437: EMPTY
1438: LIST
1439: LIST
1440: PUSH
1441: EMPTY
1442: LIST
1443: LIST
1444: LIST
1445: PPUSH
1446: CALL_OW 70
1450: ST_TO_ADDR
// result := [ ] ;
1451: LD_ADDR_VAR 0 3
1455: PUSH
1456: EMPTY
1457: ST_TO_ADDR
// if not tmp then
1458: LD_VAR 0 5
1462: NOT
1463: IFFALSE 1467
// exit ;
1465: GO 1519
// for i in tmp do
1467: LD_ADDR_VAR 0 4
1471: PUSH
1472: LD_VAR 0 5
1476: PUSH
1477: FOR_IN
1478: IFFALSE 1503
// result := result union IsDrivenBy ( i ) ;
1480: LD_ADDR_VAR 0 3
1484: PUSH
1485: LD_VAR 0 3
1489: PUSH
1490: LD_VAR 0 4
1494: PPUSH
1495: CALL_OW 311
1499: UNION
1500: ST_TO_ADDR
1501: GO 1477
1503: POP
1504: POP
// result := result diff 0 ;
1505: LD_ADDR_VAR 0 3
1509: PUSH
1510: LD_VAR 0 3
1514: PUSH
1515: LD_INT 0
1517: DIFF
1518: ST_TO_ADDR
// end ;
1519: LD_VAR 0 3
1523: RET
// export function FilterBuildings ( side ) ; begin
1524: LD_INT 0
1526: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
1527: LD_ADDR_VAR 0 2
1531: PUSH
1532: LD_INT 22
1534: PUSH
1535: LD_VAR 0 1
1539: PUSH
1540: EMPTY
1541: LIST
1542: LIST
1543: PUSH
1544: LD_INT 21
1546: PUSH
1547: LD_INT 3
1549: PUSH
1550: EMPTY
1551: LIST
1552: LIST
1553: PUSH
1554: EMPTY
1555: LIST
1556: LIST
1557: PPUSH
1558: CALL_OW 69
1562: ST_TO_ADDR
// end ;
1563: LD_VAR 0 2
1567: RET
// export function CreateNature ; var i , animal , nat_area ; begin
1568: LD_INT 0
1570: PPUSH
1571: PPUSH
1572: PPUSH
1573: PPUSH
// uc_side = 0 ;
1574: LD_ADDR_OWVAR 20
1578: PUSH
1579: LD_INT 0
1581: ST_TO_ADDR
// uc_nation = 0 ;
1582: LD_ADDR_OWVAR 21
1586: PUSH
1587: LD_INT 0
1589: ST_TO_ADDR
// nat_area := wildArea ;
1590: LD_ADDR_VAR 0 4
1594: PUSH
1595: LD_INT 3
1597: ST_TO_ADDR
// InitHc ;
1598: CALL_OW 19
// for i = 1 to 4 do
1602: LD_ADDR_VAR 0 2
1606: PUSH
1607: DOUBLE
1608: LD_INT 1
1610: DEC
1611: ST_TO_ADDR
1612: LD_INT 4
1614: PUSH
1615: FOR_TO
1616: IFFALSE 1671
// begin hc_class = 18 ;
1618: LD_ADDR_OWVAR 28
1622: PUSH
1623: LD_INT 18
1625: ST_TO_ADDR
// hc_gallery =  ;
1626: LD_ADDR_OWVAR 33
1630: PUSH
1631: LD_STRING 
1633: ST_TO_ADDR
// hc_face_number = 1 ;
1634: LD_ADDR_OWVAR 34
1638: PUSH
1639: LD_INT 1
1641: ST_TO_ADDR
// animal := CreateHuman ;
1642: LD_ADDR_VAR 0 3
1646: PUSH
1647: CALL_OW 44
1651: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
1652: LD_VAR 0 3
1656: PPUSH
1657: LD_VAR 0 4
1661: PPUSH
1662: LD_INT 0
1664: PPUSH
1665: CALL_OW 49
// end ;
1669: GO 1615
1671: POP
1672: POP
// for i = 1 to 6 do
1673: LD_ADDR_VAR 0 2
1677: PUSH
1678: DOUBLE
1679: LD_INT 1
1681: DEC
1682: ST_TO_ADDR
1683: LD_INT 6
1685: PUSH
1686: FOR_TO
1687: IFFALSE 1758
// begin hc_class = class_tiger ;
1689: LD_ADDR_OWVAR 28
1693: PUSH
1694: LD_INT 14
1696: ST_TO_ADDR
// hc_gallery =  ;
1697: LD_ADDR_OWVAR 33
1701: PUSH
1702: LD_STRING 
1704: ST_TO_ADDR
// hc_agressivity = Rand ( 0 , 10 ) ;
1705: LD_ADDR_OWVAR 35
1709: PUSH
1710: LD_INT 0
1712: PPUSH
1713: LD_INT 10
1715: PPUSH
1716: CALL_OW 12
1720: ST_TO_ADDR
// hc_face_number = 3 ;
1721: LD_ADDR_OWVAR 34
1725: PUSH
1726: LD_INT 3
1728: ST_TO_ADDR
// animal := CreateHuman ;
1729: LD_ADDR_VAR 0 3
1733: PUSH
1734: CALL_OW 44
1738: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
1739: LD_VAR 0 3
1743: PPUSH
1744: LD_VAR 0 4
1748: PPUSH
1749: LD_INT 0
1751: PPUSH
1752: CALL_OW 49
// end ;
1756: GO 1686
1758: POP
1759: POP
// for i = 1 to 2 do
1760: LD_ADDR_VAR 0 2
1764: PUSH
1765: DOUBLE
1766: LD_INT 1
1768: DEC
1769: ST_TO_ADDR
1770: LD_INT 2
1772: PUSH
1773: FOR_TO
1774: IFFALSE 1837
// begin hc_class = 21 ;
1776: LD_ADDR_OWVAR 28
1780: PUSH
1781: LD_INT 21
1783: ST_TO_ADDR
// hc_gallery =  ;
1784: LD_ADDR_OWVAR 33
1788: PUSH
1789: LD_STRING 
1791: ST_TO_ADDR
// hc_agressivity = 0 ;
1792: LD_ADDR_OWVAR 35
1796: PUSH
1797: LD_INT 0
1799: ST_TO_ADDR
// hc_face_number = 5 ;
1800: LD_ADDR_OWVAR 34
1804: PUSH
1805: LD_INT 5
1807: ST_TO_ADDR
// animal := CreateHuman ;
1808: LD_ADDR_VAR 0 3
1812: PUSH
1813: CALL_OW 44
1817: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
1818: LD_VAR 0 3
1822: PPUSH
1823: LD_VAR 0 4
1827: PPUSH
1828: LD_INT 0
1830: PPUSH
1831: CALL_OW 49
// end ;
1835: GO 1773
1837: POP
1838: POP
// for i = 1 to 6 do
1839: LD_ADDR_VAR 0 2
1843: PUSH
1844: DOUBLE
1845: LD_INT 1
1847: DEC
1848: ST_TO_ADDR
1849: LD_INT 6
1851: PUSH
1852: FOR_TO
1853: IFFALSE 1908
// begin hc_class = 13 ;
1855: LD_ADDR_OWVAR 28
1859: PUSH
1860: LD_INT 13
1862: ST_TO_ADDR
// hc_gallery =  ;
1863: LD_ADDR_OWVAR 33
1867: PUSH
1868: LD_STRING 
1870: ST_TO_ADDR
// hc_face_number = 4 ;
1871: LD_ADDR_OWVAR 34
1875: PUSH
1876: LD_INT 4
1878: ST_TO_ADDR
// animal := CreateHuman ;
1879: LD_ADDR_VAR 0 3
1883: PUSH
1884: CALL_OW 44
1888: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
1889: LD_VAR 0 3
1893: PPUSH
1894: LD_VAR 0 4
1898: PPUSH
1899: LD_INT 0
1901: PPUSH
1902: CALL_OW 49
// end ;
1906: GO 1852
1908: POP
1909: POP
// for i = 1 to 2 do
1910: LD_ADDR_VAR 0 2
1914: PUSH
1915: DOUBLE
1916: LD_INT 1
1918: DEC
1919: ST_TO_ADDR
1920: LD_INT 2
1922: PUSH
1923: FOR_TO
1924: IFFALSE 1983
// begin hc_class = 20 ;
1926: LD_ADDR_OWVAR 28
1930: PUSH
1931: LD_INT 20
1933: ST_TO_ADDR
// hc_gallery =  ;
1934: LD_ADDR_OWVAR 33
1938: PUSH
1939: LD_STRING 
1941: ST_TO_ADDR
// hc_face_number = 2 ;
1942: LD_ADDR_OWVAR 34
1946: PUSH
1947: LD_INT 2
1949: ST_TO_ADDR
// animal := CreateHuman ;
1950: LD_ADDR_VAR 0 3
1954: PUSH
1955: CALL_OW 44
1959: ST_TO_ADDR
// PlaceUnitXYR ( animal , 101 , 37 , 3 , false ) ;
1960: LD_VAR 0 3
1964: PPUSH
1965: LD_INT 101
1967: PPUSH
1968: LD_INT 37
1970: PPUSH
1971: LD_INT 3
1973: PPUSH
1974: LD_INT 0
1976: PPUSH
1977: CALL_OW 50
// end ;
1981: GO 1923
1983: POP
1984: POP
// for i = 1 to 1 do
1985: LD_ADDR_VAR 0 2
1989: PUSH
1990: DOUBLE
1991: LD_INT 1
1993: DEC
1994: ST_TO_ADDR
1995: LD_INT 1
1997: PUSH
1998: FOR_TO
1999: IFFALSE 2046
// begin vc_chassis := 31 ;
2001: LD_ADDR_OWVAR 37
2005: PUSH
2006: LD_INT 31
2008: ST_TO_ADDR
// vc_control := control_rider ;
2009: LD_ADDR_OWVAR 38
2013: PUSH
2014: LD_INT 4
2016: ST_TO_ADDR
// animal := CreateVehicle ;
2017: LD_ADDR_VAR 0 3
2021: PUSH
2022: CALL_OW 45
2026: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
2027: LD_VAR 0 3
2031: PPUSH
2032: LD_VAR 0 4
2036: PPUSH
2037: LD_INT 0
2039: PPUSH
2040: CALL_OW 49
// end ;
2044: GO 1998
2046: POP
2047: POP
// end ;
2048: LD_VAR 0 1
2052: RET
// export function NearbyTowerHasEnergy ( unit ) ; var i , tmp , energy ; begin
2053: LD_INT 0
2055: PPUSH
2056: PPUSH
2057: PPUSH
2058: PPUSH
// result := [ ] ;
2059: LD_ADDR_VAR 0 2
2063: PUSH
2064: EMPTY
2065: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( unit ) ] , [ f_dist , unit , 15 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) ;
2066: LD_ADDR_VAR 0 4
2070: PUSH
2071: LD_INT 81
2073: PUSH
2074: LD_VAR 0 1
2078: PPUSH
2079: CALL_OW 255
2083: PUSH
2084: EMPTY
2085: LIST
2086: LIST
2087: PUSH
2088: LD_INT 91
2090: PUSH
2091: LD_VAR 0 1
2095: PUSH
2096: LD_INT 15
2098: PUSH
2099: EMPTY
2100: LIST
2101: LIST
2102: LIST
2103: PUSH
2104: LD_INT 2
2106: PUSH
2107: LD_INT 30
2109: PUSH
2110: LD_INT 32
2112: PUSH
2113: EMPTY
2114: LIST
2115: LIST
2116: PUSH
2117: LD_INT 30
2119: PUSH
2120: LD_INT 33
2122: PUSH
2123: EMPTY
2124: LIST
2125: LIST
2126: PUSH
2127: EMPTY
2128: LIST
2129: LIST
2130: LIST
2131: PUSH
2132: EMPTY
2133: LIST
2134: LIST
2135: LIST
2136: PPUSH
2137: CALL_OW 69
2141: ST_TO_ADDR
// if not tmp then
2142: LD_VAR 0 4
2146: NOT
2147: IFFALSE 2151
// exit ;
2149: GO 2220
// for i in tmp do
2151: LD_ADDR_VAR 0 3
2155: PUSH
2156: LD_VAR 0 4
2160: PUSH
2161: FOR_IN
2162: IFFALSE 2218
// begin energy := GetEnergy ( GetBase ( i ) ) ;
2164: LD_ADDR_VAR 0 5
2168: PUSH
2169: LD_VAR 0 3
2173: PPUSH
2174: CALL_OW 274
2178: PPUSH
2179: CALL_OW 278
2183: ST_TO_ADDR
// if energy [ 4 ] > energy [ 1 ] then
2184: LD_VAR 0 5
2188: PUSH
2189: LD_INT 4
2191: ARRAY
2192: PUSH
2193: LD_VAR 0 5
2197: PUSH
2198: LD_INT 1
2200: ARRAY
2201: GREATER
2202: IFFALSE 2216
// begin result := i ;
2204: LD_ADDR_VAR 0 2
2208: PUSH
2209: LD_VAR 0 3
2213: ST_TO_ADDR
// break ;
2214: GO 2218
// end ; end ;
2216: GO 2161
2218: POP
2219: POP
// end ;
2220: LD_VAR 0 2
2224: RET
// export function GetTurretWeaponBase ( tower ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
2225: LD_INT 0
2227: PPUSH
2228: PPUSH
2229: PPUSH
2230: PPUSH
2231: PPUSH
2232: PPUSH
2233: PPUSH
2234: PPUSH
2235: PPUSH
2236: PPUSH
2237: PPUSH
2238: PPUSH
2239: PPUSH
2240: PPUSH
2241: PPUSH
2242: PPUSH
// result := false ;
2243: LD_ADDR_VAR 0 2
2247: PUSH
2248: LD_INT 0
2250: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
2251: LD_VAR 0 1
2255: NOT
2256: PUSH
2257: LD_VAR 0 1
2261: PPUSH
2262: CALL_OW 266
2266: PUSH
2267: LD_INT 32
2269: PUSH
2270: LD_INT 33
2272: PUSH
2273: EMPTY
2274: LIST
2275: LIST
2276: IN
2277: NOT
2278: OR
2279: IFFALSE 2283
// exit ;
2281: GO 3443
// nat := GetNation ( tower ) ;
2283: LD_ADDR_VAR 0 11
2287: PUSH
2288: LD_VAR 0 1
2292: PPUSH
2293: CALL_OW 248
2297: ST_TO_ADDR
// side := GetSide ( tower ) ;
2298: LD_ADDR_VAR 0 15
2302: PUSH
2303: LD_VAR 0 1
2307: PPUSH
2308: CALL_OW 255
2312: ST_TO_ADDR
// x := GetX ( tower ) ;
2313: LD_ADDR_VAR 0 9
2317: PUSH
2318: LD_VAR 0 1
2322: PPUSH
2323: CALL_OW 250
2327: ST_TO_ADDR
// y := GetY ( tower ) ;
2328: LD_ADDR_VAR 0 10
2332: PUSH
2333: LD_VAR 0 1
2337: PPUSH
2338: CALL_OW 251
2342: ST_TO_ADDR
// if not x or not y then
2343: LD_VAR 0 9
2347: NOT
2348: PUSH
2349: LD_VAR 0 10
2353: NOT
2354: OR
2355: IFFALSE 2359
// exit ;
2357: GO 3443
// weapon := 0 ;
2359: LD_ADDR_VAR 0 17
2363: PUSH
2364: LD_INT 0
2366: ST_TO_ADDR
// fac_list := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun ] ;
2367: LD_ADDR_VAR 0 16
2371: PUSH
2372: LD_INT 42
2374: PUSH
2375: LD_INT 43
2377: PUSH
2378: LD_INT 44
2380: PUSH
2381: LD_INT 46
2383: PUSH
2384: EMPTY
2385: LIST
2386: LIST
2387: LIST
2388: LIST
2389: ST_TO_ADDR
// if not fac_list then
2390: LD_VAR 0 16
2394: NOT
2395: IFFALSE 2399
// exit ;
2397: GO 3443
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
2399: LD_ADDR_VAR 0 4
2403: PUSH
2404: LD_INT 4
2406: PUSH
2407: LD_INT 5
2409: PUSH
2410: LD_INT 9
2412: PUSH
2413: LD_INT 10
2415: PUSH
2416: LD_INT 6
2418: PUSH
2419: LD_INT 7
2421: PUSH
2422: LD_INT 11
2424: PUSH
2425: EMPTY
2426: LIST
2427: LIST
2428: LIST
2429: LIST
2430: LIST
2431: LIST
2432: LIST
2433: PUSH
2434: LD_INT 27
2436: PUSH
2437: LD_INT 28
2439: PUSH
2440: LD_INT 26
2442: PUSH
2443: LD_INT 30
2445: PUSH
2446: EMPTY
2447: LIST
2448: LIST
2449: LIST
2450: LIST
2451: PUSH
2452: LD_INT 43
2454: PUSH
2455: LD_INT 44
2457: PUSH
2458: LD_INT 46
2460: PUSH
2461: LD_INT 45
2463: PUSH
2464: LD_INT 47
2466: PUSH
2467: LD_INT 49
2469: PUSH
2470: EMPTY
2471: LIST
2472: LIST
2473: LIST
2474: LIST
2475: LIST
2476: LIST
2477: PUSH
2478: EMPTY
2479: LIST
2480: LIST
2481: LIST
2482: PUSH
2483: LD_VAR 0 11
2487: ARRAY
2488: ST_TO_ADDR
// for i in list do
2489: LD_ADDR_VAR 0 7
2493: PUSH
2494: LD_VAR 0 4
2498: PUSH
2499: FOR_IN
2500: IFFALSE 2533
// if not i in fac_list then
2502: LD_VAR 0 7
2506: PUSH
2507: LD_VAR 0 16
2511: IN
2512: NOT
2513: IFFALSE 2531
// list := list diff i ;
2515: LD_ADDR_VAR 0 4
2519: PUSH
2520: LD_VAR 0 4
2524: PUSH
2525: LD_VAR 0 7
2529: DIFF
2530: ST_TO_ADDR
2531: GO 2499
2533: POP
2534: POP
// if not list then
2535: LD_VAR 0 4
2539: NOT
2540: IFFALSE 2544
// exit ;
2542: GO 3443
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
2544: LD_VAR 0 11
2548: PUSH
2549: LD_INT 3
2551: EQUAL
2552: PUSH
2553: LD_INT 49
2555: PUSH
2556: LD_VAR 0 4
2560: IN
2561: AND
2562: PUSH
2563: LD_INT 31
2565: PPUSH
2566: LD_VAR 0 15
2570: PPUSH
2571: CALL_OW 321
2575: PUSH
2576: LD_INT 2
2578: EQUAL
2579: AND
2580: IFFALSE 2640
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
2582: LD_INT 22
2584: PUSH
2585: LD_VAR 0 15
2589: PUSH
2590: EMPTY
2591: LIST
2592: LIST
2593: PUSH
2594: LD_INT 35
2596: PUSH
2597: LD_INT 49
2599: PUSH
2600: EMPTY
2601: LIST
2602: LIST
2603: PUSH
2604: LD_INT 91
2606: PUSH
2607: LD_VAR 0 1
2611: PUSH
2612: LD_INT 10
2614: PUSH
2615: EMPTY
2616: LIST
2617: LIST
2618: LIST
2619: PUSH
2620: EMPTY
2621: LIST
2622: LIST
2623: LIST
2624: PPUSH
2625: CALL_OW 69
2629: NOT
2630: IFFALSE 2640
// weapon := ru_time_lapser ;
2632: LD_ADDR_VAR 0 17
2636: PUSH
2637: LD_INT 49
2639: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
2640: LD_VAR 0 11
2644: PUSH
2645: LD_INT 1
2647: PUSH
2648: LD_INT 2
2650: PUSH
2651: EMPTY
2652: LIST
2653: LIST
2654: IN
2655: PUSH
2656: LD_INT 11
2658: PUSH
2659: LD_VAR 0 4
2663: IN
2664: PUSH
2665: LD_INT 30
2667: PUSH
2668: LD_VAR 0 4
2672: IN
2673: OR
2674: AND
2675: PUSH
2676: LD_INT 6
2678: PPUSH
2679: LD_VAR 0 15
2683: PPUSH
2684: CALL_OW 321
2688: PUSH
2689: LD_INT 2
2691: EQUAL
2692: AND
2693: IFFALSE 2858
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
2695: LD_INT 22
2697: PUSH
2698: LD_VAR 0 15
2702: PUSH
2703: EMPTY
2704: LIST
2705: LIST
2706: PUSH
2707: LD_INT 2
2709: PUSH
2710: LD_INT 35
2712: PUSH
2713: LD_INT 11
2715: PUSH
2716: EMPTY
2717: LIST
2718: LIST
2719: PUSH
2720: LD_INT 35
2722: PUSH
2723: LD_INT 30
2725: PUSH
2726: EMPTY
2727: LIST
2728: LIST
2729: PUSH
2730: EMPTY
2731: LIST
2732: LIST
2733: LIST
2734: PUSH
2735: LD_INT 91
2737: PUSH
2738: LD_VAR 0 1
2742: PUSH
2743: LD_INT 18
2745: PUSH
2746: EMPTY
2747: LIST
2748: LIST
2749: LIST
2750: PUSH
2751: EMPTY
2752: LIST
2753: LIST
2754: LIST
2755: PPUSH
2756: CALL_OW 69
2760: NOT
2761: PUSH
2762: LD_INT 22
2764: PUSH
2765: LD_VAR 0 15
2769: PUSH
2770: EMPTY
2771: LIST
2772: LIST
2773: PUSH
2774: LD_INT 2
2776: PUSH
2777: LD_INT 30
2779: PUSH
2780: LD_INT 32
2782: PUSH
2783: EMPTY
2784: LIST
2785: LIST
2786: PUSH
2787: LD_INT 30
2789: PUSH
2790: LD_INT 33
2792: PUSH
2793: EMPTY
2794: LIST
2795: LIST
2796: PUSH
2797: EMPTY
2798: LIST
2799: LIST
2800: LIST
2801: PUSH
2802: LD_INT 91
2804: PUSH
2805: LD_VAR 0 1
2809: PUSH
2810: LD_INT 12
2812: PUSH
2813: EMPTY
2814: LIST
2815: LIST
2816: LIST
2817: PUSH
2818: EMPTY
2819: LIST
2820: LIST
2821: LIST
2822: PUSH
2823: EMPTY
2824: LIST
2825: PPUSH
2826: CALL_OW 69
2830: PUSH
2831: LD_INT 2
2833: GREATER
2834: AND
2835: IFFALSE 2858
// weapon := [ us_radar , ar_radar ] [ nat ] ;
2837: LD_ADDR_VAR 0 17
2841: PUSH
2842: LD_INT 11
2844: PUSH
2845: LD_INT 30
2847: PUSH
2848: EMPTY
2849: LIST
2850: LIST
2851: PUSH
2852: LD_VAR 0 11
2856: ARRAY
2857: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
2858: LD_VAR 0 17
2862: NOT
2863: PUSH
2864: LD_INT 40
2866: PPUSH
2867: LD_VAR 0 15
2871: PPUSH
2872: CALL_OW 321
2876: PUSH
2877: LD_INT 2
2879: EQUAL
2880: AND
2881: PUSH
2882: LD_INT 7
2884: PUSH
2885: LD_VAR 0 4
2889: IN
2890: PUSH
2891: LD_INT 28
2893: PUSH
2894: LD_VAR 0 4
2898: IN
2899: OR
2900: PUSH
2901: LD_INT 45
2903: PUSH
2904: LD_VAR 0 4
2908: IN
2909: OR
2910: AND
2911: IFFALSE 3165
// begin hex := GetHexInfo ( x , y ) ;
2913: LD_ADDR_VAR 0 3
2917: PUSH
2918: LD_VAR 0 9
2922: PPUSH
2923: LD_VAR 0 10
2927: PPUSH
2928: CALL_OW 546
2932: ST_TO_ADDR
// if hex [ 1 ] then
2933: LD_VAR 0 3
2937: PUSH
2938: LD_INT 1
2940: ARRAY
2941: IFFALSE 2945
// exit ;
2943: GO 3443
// height := hex [ 2 ] ;
2945: LD_ADDR_VAR 0 14
2949: PUSH
2950: LD_VAR 0 3
2954: PUSH
2955: LD_INT 2
2957: ARRAY
2958: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
2959: LD_ADDR_VAR 0 13
2963: PUSH
2964: LD_INT 0
2966: PUSH
2967: LD_INT 2
2969: PUSH
2970: LD_INT 3
2972: PUSH
2973: LD_INT 5
2975: PUSH
2976: EMPTY
2977: LIST
2978: LIST
2979: LIST
2980: LIST
2981: ST_TO_ADDR
// for i in tmp do
2982: LD_ADDR_VAR 0 7
2986: PUSH
2987: LD_VAR 0 13
2991: PUSH
2992: FOR_IN
2993: IFFALSE 3163
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
2995: LD_ADDR_VAR 0 8
2999: PUSH
3000: LD_VAR 0 9
3004: PPUSH
3005: LD_VAR 0 7
3009: PPUSH
3010: LD_INT 5
3012: PPUSH
3013: CALL_OW 272
3017: PUSH
3018: LD_VAR 0 10
3022: PPUSH
3023: LD_VAR 0 7
3027: PPUSH
3028: LD_INT 5
3030: PPUSH
3031: CALL_OW 273
3035: PUSH
3036: EMPTY
3037: LIST
3038: LIST
3039: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
3040: LD_VAR 0 8
3044: PUSH
3045: LD_INT 1
3047: ARRAY
3048: PPUSH
3049: LD_VAR 0 8
3053: PUSH
3054: LD_INT 2
3056: ARRAY
3057: PPUSH
3058: CALL_OW 488
3062: IFFALSE 3161
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
3064: LD_ADDR_VAR 0 3
3068: PUSH
3069: LD_VAR 0 8
3073: PUSH
3074: LD_INT 1
3076: ARRAY
3077: PPUSH
3078: LD_VAR 0 8
3082: PUSH
3083: LD_INT 2
3085: ARRAY
3086: PPUSH
3087: CALL_OW 546
3091: ST_TO_ADDR
// if hex [ 1 ] then
3092: LD_VAR 0 3
3096: PUSH
3097: LD_INT 1
3099: ARRAY
3100: IFFALSE 3104
// continue ;
3102: GO 2992
// h := hex [ 2 ] ;
3104: LD_ADDR_VAR 0 12
3108: PUSH
3109: LD_VAR 0 3
3113: PUSH
3114: LD_INT 2
3116: ARRAY
3117: ST_TO_ADDR
// if h + 7 < height then
3118: LD_VAR 0 12
3122: PUSH
3123: LD_INT 7
3125: PLUS
3126: PUSH
3127: LD_VAR 0 14
3131: LESS
3132: IFFALSE 3161
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
3134: LD_ADDR_VAR 0 17
3138: PUSH
3139: LD_INT 7
3141: PUSH
3142: LD_INT 28
3144: PUSH
3145: LD_INT 45
3147: PUSH
3148: EMPTY
3149: LIST
3150: LIST
3151: LIST
3152: PUSH
3153: LD_VAR 0 11
3157: ARRAY
3158: ST_TO_ADDR
// break ;
3159: GO 3163
// end ; end ; end ;
3161: GO 2992
3163: POP
3164: POP
// end ; if not weapon then
3165: LD_VAR 0 17
3169: NOT
3170: IFFALSE 3325
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
3172: LD_ADDR_VAR 0 4
3176: PUSH
3177: LD_VAR 0 4
3181: PUSH
3182: LD_INT 11
3184: PUSH
3185: LD_INT 30
3187: PUSH
3188: LD_INT 49
3190: PUSH
3191: EMPTY
3192: LIST
3193: LIST
3194: LIST
3195: DIFF
3196: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , tower , 6 ] , [ f_not , [ f_bweapon , 0 ] ] ] ) ;
3197: LD_ADDR_VAR 0 13
3201: PUSH
3202: LD_INT 22
3204: PUSH
3205: LD_VAR 0 15
3209: PUSH
3210: EMPTY
3211: LIST
3212: LIST
3213: PUSH
3214: LD_INT 91
3216: PUSH
3217: LD_VAR 0 1
3221: PUSH
3222: LD_INT 6
3224: PUSH
3225: EMPTY
3226: LIST
3227: LIST
3228: LIST
3229: PUSH
3230: LD_INT 3
3232: PUSH
3233: LD_INT 35
3235: PUSH
3236: LD_INT 0
3238: PUSH
3239: EMPTY
3240: LIST
3241: LIST
3242: PUSH
3243: EMPTY
3244: LIST
3245: LIST
3246: PUSH
3247: EMPTY
3248: LIST
3249: LIST
3250: LIST
3251: PPUSH
3252: CALL_OW 69
3256: ST_TO_ADDR
// for i in tmp do
3257: LD_ADDR_VAR 0 7
3261: PUSH
3262: LD_VAR 0 13
3266: PUSH
3267: FOR_IN
3268: IFFALSE 3293
// list := list diff GetBWeapon ( i ) ;
3270: LD_ADDR_VAR 0 4
3274: PUSH
3275: LD_VAR 0 4
3279: PUSH
3280: LD_VAR 0 7
3284: PPUSH
3285: CALL_OW 269
3289: DIFF
3290: ST_TO_ADDR
3291: GO 3267
3293: POP
3294: POP
// if list then
3295: LD_VAR 0 4
3299: IFFALSE 3325
// weapon := list [ rand ( 1 , list ) ] ;
3301: LD_ADDR_VAR 0 17
3305: PUSH
3306: LD_VAR 0 4
3310: PUSH
3311: LD_INT 1
3313: PPUSH
3314: LD_VAR 0 4
3318: PPUSH
3319: CALL_OW 12
3323: ARRAY
3324: ST_TO_ADDR
// end ; if weapon then
3325: LD_VAR 0 17
3329: IFFALSE 3443
// begin tmp := CostOfWeapon ( weapon ) ;
3331: LD_ADDR_VAR 0 13
3335: PUSH
3336: LD_VAR 0 17
3340: PPUSH
3341: CALL_OW 451
3345: ST_TO_ADDR
// j := GetBase ( tower ) ;
3346: LD_ADDR_VAR 0 8
3350: PUSH
3351: LD_VAR 0 1
3355: PPUSH
3356: CALL_OW 274
3360: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
3361: LD_VAR 0 8
3365: PPUSH
3366: LD_INT 1
3368: PPUSH
3369: CALL_OW 275
3373: PUSH
3374: LD_VAR 0 13
3378: PUSH
3379: LD_INT 1
3381: ARRAY
3382: GREATEREQUAL
3383: PUSH
3384: LD_VAR 0 8
3388: PPUSH
3389: LD_INT 2
3391: PPUSH
3392: CALL_OW 275
3396: PUSH
3397: LD_VAR 0 13
3401: PUSH
3402: LD_INT 2
3404: ARRAY
3405: GREATEREQUAL
3406: AND
3407: PUSH
3408: LD_VAR 0 8
3412: PPUSH
3413: LD_INT 3
3415: PPUSH
3416: CALL_OW 275
3420: PUSH
3421: LD_VAR 0 13
3425: PUSH
3426: LD_INT 3
3428: ARRAY
3429: GREATEREQUAL
3430: AND
3431: IFFALSE 3443
// result := weapon ;
3433: LD_ADDR_VAR 0 2
3437: PUSH
3438: LD_VAR 0 17
3442: ST_TO_ADDR
// end ; end ; end_of_file
3443: LD_VAR 0 2
3447: RET
// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Khatam , Kikuchi , Harisson ; export function PrepareAmericans ; var i , team , others , veh , m ; begin
3448: LD_INT 0
3450: PPUSH
3451: PPUSH
3452: PPUSH
3453: PPUSH
3454: PPUSH
3455: PPUSH
// uc_side := 1 ;
3456: LD_ADDR_OWVAR 20
3460: PUSH
3461: LD_INT 1
3463: ST_TO_ADDR
// uc_nation := 1 ;
3464: LD_ADDR_OWVAR 21
3468: PUSH
3469: LD_INT 1
3471: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , mission_prev_prefix ) ;
3472: LD_ADDR_EXP 9
3476: PUSH
3477: LD_STRING JMM
3479: PPUSH
3480: LD_EXP 1
3484: NOT
3485: PPUSH
3486: LD_EXP 2
3490: PPUSH
3491: CALL 32326 0 3
3495: ST_TO_ADDR
// team := [ JMM ] ;
3496: LD_ADDR_VAR 0 3
3500: PUSH
3501: LD_EXP 9
3505: PUSH
3506: EMPTY
3507: LIST
3508: ST_TO_ADDR
// if LoadVariable ( BrownIn07 , debug ) then
3509: LD_STRING BrownIn07
3511: PPUSH
3512: LD_EXP 1
3516: PPUSH
3517: CALL_OW 30
3521: IFFALSE 3547
// Brown := PrepareUnit ( Brown , ( not debug ) , mission_prev_prefix ) ;
3523: LD_ADDR_EXP 10
3527: PUSH
3528: LD_STRING Brown
3530: PPUSH
3531: LD_EXP 1
3535: NOT
3536: PPUSH
3537: LD_EXP 2
3541: PPUSH
3542: CALL 32326 0 3
3546: ST_TO_ADDR
// if Brown then
3547: LD_EXP 10
3551: IFFALSE 3569
// team := team ^ Brown ;
3553: LD_ADDR_VAR 0 3
3557: PUSH
3558: LD_VAR 0 3
3562: PUSH
3563: LD_EXP 10
3567: ADD
3568: ST_TO_ADDR
// if LoadVariable ( DonaldsonIn07 , debug ) then
3569: LD_STRING DonaldsonIn07
3571: PPUSH
3572: LD_EXP 1
3576: PPUSH
3577: CALL_OW 30
3581: IFFALSE 3607
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , mission_prev_prefix ) ;
3583: LD_ADDR_EXP 11
3587: PUSH
3588: LD_STRING Donaldson
3590: PPUSH
3591: LD_EXP 1
3595: NOT
3596: PPUSH
3597: LD_EXP 2
3601: PPUSH
3602: CALL 32326 0 3
3606: ST_TO_ADDR
// if Donaldson then
3607: LD_EXP 11
3611: IFFALSE 3629
// team := team ^ Donaldson ;
3613: LD_ADDR_VAR 0 3
3617: PUSH
3618: LD_VAR 0 3
3622: PUSH
3623: LD_EXP 11
3627: ADD
3628: ST_TO_ADDR
// if LoadVariable ( BobbyIn07 , debug ) then
3629: LD_STRING BobbyIn07
3631: PPUSH
3632: LD_EXP 1
3636: PPUSH
3637: CALL_OW 30
3641: IFFALSE 3667
// Bobby := PrepareUnit ( Bobby , ( not debug ) , mission_prev_prefix ) ;
3643: LD_ADDR_EXP 12
3647: PUSH
3648: LD_STRING Bobby
3650: PPUSH
3651: LD_EXP 1
3655: NOT
3656: PPUSH
3657: LD_EXP 2
3661: PPUSH
3662: CALL 32326 0 3
3666: ST_TO_ADDR
// if Bobby then
3667: LD_EXP 12
3671: IFFALSE 3689
// team := team ^ Bobby ;
3673: LD_ADDR_VAR 0 3
3677: PUSH
3678: LD_VAR 0 3
3682: PUSH
3683: LD_EXP 12
3687: ADD
3688: ST_TO_ADDR
// if LoadVariable ( CyrusIn07 , debug ) then
3689: LD_STRING CyrusIn07
3691: PPUSH
3692: LD_EXP 1
3696: PPUSH
3697: CALL_OW 30
3701: IFFALSE 3727
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , mission_prev_prefix ) ;
3703: LD_ADDR_EXP 13
3707: PUSH
3708: LD_STRING Cyrus
3710: PPUSH
3711: LD_EXP 1
3715: NOT
3716: PPUSH
3717: LD_EXP 2
3721: PPUSH
3722: CALL 32326 0 3
3726: ST_TO_ADDR
// if Cyrus then
3727: LD_EXP 13
3731: IFFALSE 3749
// team := team ^ Cyrus ;
3733: LD_ADDR_VAR 0 3
3737: PUSH
3738: LD_VAR 0 3
3742: PUSH
3743: LD_EXP 13
3747: ADD
3748: ST_TO_ADDR
// if LoadVariable ( LisaIn07 , debug ) then
3749: LD_STRING LisaIn07
3751: PPUSH
3752: LD_EXP 1
3756: PPUSH
3757: CALL_OW 30
3761: IFFALSE 3787
// Lisa := PrepareUnit ( Lisa , ( not debug ) , mission_prev_prefix ) ;
3763: LD_ADDR_EXP 14
3767: PUSH
3768: LD_STRING Lisa
3770: PPUSH
3771: LD_EXP 1
3775: NOT
3776: PPUSH
3777: LD_EXP 2
3781: PPUSH
3782: CALL 32326 0 3
3786: ST_TO_ADDR
// if Lisa then
3787: LD_EXP 14
3791: IFFALSE 3809
// team := team ^ Lisa ;
3793: LD_ADDR_VAR 0 3
3797: PUSH
3798: LD_VAR 0 3
3802: PUSH
3803: LD_EXP 14
3807: ADD
3808: ST_TO_ADDR
// if LoadVariable ( GladstoneIn07 , debug ) then
3809: LD_STRING GladstoneIn07
3811: PPUSH
3812: LD_EXP 1
3816: PPUSH
3817: CALL_OW 30
3821: IFFALSE 3847
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , mission_prev_prefix ) ;
3823: LD_ADDR_EXP 16
3827: PUSH
3828: LD_STRING Gladstone
3830: PPUSH
3831: LD_EXP 1
3835: NOT
3836: PPUSH
3837: LD_EXP 2
3841: PPUSH
3842: CALL 32326 0 3
3846: ST_TO_ADDR
// if Gladstone then
3847: LD_EXP 16
3851: IFFALSE 3869
// team := team ^ Gladstone ;
3853: LD_ADDR_VAR 0 3
3857: PUSH
3858: LD_VAR 0 3
3862: PUSH
3863: LD_EXP 16
3867: ADD
3868: ST_TO_ADDR
// if LoadVariable ( KhatamIn07 , debug ) then
3869: LD_STRING KhatamIn07
3871: PPUSH
3872: LD_EXP 1
3876: PPUSH
3877: CALL_OW 30
3881: IFFALSE 3907
// Khatam := PrepareUnit ( Khatam , ( not debug ) , mission_prev_prefix ) ;
3883: LD_ADDR_EXP 17
3887: PUSH
3888: LD_STRING Khatam
3890: PPUSH
3891: LD_EXP 1
3895: NOT
3896: PPUSH
3897: LD_EXP 2
3901: PPUSH
3902: CALL 32326 0 3
3906: ST_TO_ADDR
// if Khatam then
3907: LD_EXP 17
3911: IFFALSE 3929
// team := team ^ Khatam ;
3913: LD_ADDR_VAR 0 3
3917: PUSH
3918: LD_VAR 0 3
3922: PUSH
3923: LD_EXP 17
3927: ADD
3928: ST_TO_ADDR
// others := CreateCharacterSet ( 07_others ) ;
3929: LD_ADDR_VAR 0 4
3933: PUSH
3934: LD_STRING 07_others
3936: PPUSH
3937: CALL_OW 31
3941: ST_TO_ADDR
// if others then
3942: LD_VAR 0 4
3946: IFFALSE 3964
// team := team ^ others ;
3948: LD_ADDR_VAR 0 3
3952: PUSH
3953: LD_VAR 0 3
3957: PUSH
3958: LD_VAR 0 4
3962: ADD
3963: ST_TO_ADDR
// if debug then
3964: LD_EXP 1
3968: IFFALSE 4042
// begin InitHc ;
3970: CALL_OW 19
// for i = 1 to 4 do
3974: LD_ADDR_VAR 0 2
3978: PUSH
3979: DOUBLE
3980: LD_INT 1
3982: DEC
3983: ST_TO_ADDR
3984: LD_INT 4
3986: PUSH
3987: FOR_TO
3988: IFFALSE 4040
// begin PrepareHuman ( false , [ 1 , 3 ] [ Rand ( 1 , 2 ) ] , 4 ) ;
3990: LD_INT 0
3992: PPUSH
3993: LD_INT 1
3995: PUSH
3996: LD_INT 3
3998: PUSH
3999: EMPTY
4000: LIST
4001: LIST
4002: PUSH
4003: LD_INT 1
4005: PPUSH
4006: LD_INT 2
4008: PPUSH
4009: CALL_OW 12
4013: ARRAY
4014: PPUSH
4015: LD_INT 4
4017: PPUSH
4018: CALL_OW 380
// team := team ^ CreateHuman ;
4022: LD_ADDR_VAR 0 3
4026: PUSH
4027: LD_VAR 0 3
4031: PUSH
4032: CALL_OW 44
4036: ADD
4037: ST_TO_ADDR
// end ;
4038: GO 3987
4040: POP
4041: POP
// end ; m := 0 ;
4042: LD_ADDR_VAR 0 6
4046: PUSH
4047: LD_INT 0
4049: ST_TO_ADDR
// for i in team do
4050: LD_ADDR_VAR 0 2
4054: PUSH
4055: LD_VAR 0 3
4059: PUSH
4060: FOR_IN
4061: IFFALSE 4268
// if GetClass ( i ) = 3 then
4063: LD_VAR 0 2
4067: PPUSH
4068: CALL_OW 257
4072: PUSH
4073: LD_INT 3
4075: EQUAL
4076: IFFALSE 4224
// begin m := m + 1 ;
4078: LD_ADDR_VAR 0 6
4082: PUSH
4083: LD_VAR 0 6
4087: PUSH
4088: LD_INT 1
4090: PLUS
4091: ST_TO_ADDR
// veh := PrepareTank ( 1 , 1 , [ us_medium_wheeled , us_medium_tracked , us_medium_wheeled , us_light_wheeled ] [ m mod 4 + 1 ] , engine_solar , control_manual , [ us_gatling_gun , us_double_gun , us_light_gun , us_radar ] [ m mod 4 + 1 ] , 60 ) ;
4092: LD_ADDR_VAR 0 5
4096: PUSH
4097: LD_INT 1
4099: PPUSH
4100: LD_INT 1
4102: PPUSH
4103: LD_INT 2
4105: PUSH
4106: LD_INT 3
4108: PUSH
4109: LD_INT 2
4111: PUSH
4112: LD_INT 1
4114: PUSH
4115: EMPTY
4116: LIST
4117: LIST
4118: LIST
4119: LIST
4120: PUSH
4121: LD_VAR 0 6
4125: PUSH
4126: LD_INT 4
4128: MOD
4129: PUSH
4130: LD_INT 1
4132: PLUS
4133: ARRAY
4134: PPUSH
4135: LD_INT 2
4137: PPUSH
4138: LD_INT 1
4140: PPUSH
4141: LD_INT 4
4143: PUSH
4144: LD_INT 5
4146: PUSH
4147: LD_INT 3
4149: PUSH
4150: LD_INT 11
4152: PUSH
4153: EMPTY
4154: LIST
4155: LIST
4156: LIST
4157: LIST
4158: PUSH
4159: LD_VAR 0 6
4163: PUSH
4164: LD_INT 4
4166: MOD
4167: PUSH
4168: LD_INT 1
4170: PLUS
4171: ARRAY
4172: PPUSH
4173: LD_INT 60
4175: PPUSH
4176: CALL 520 0 7
4180: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
4181: LD_VAR 0 5
4185: PPUSH
4186: LD_INT 2
4188: PPUSH
4189: CALL_OW 233
// PlaceUnitArea ( veh , startArea , false ) ;
4193: LD_VAR 0 5
4197: PPUSH
4198: LD_INT 1
4200: PPUSH
4201: LD_INT 0
4203: PPUSH
4204: CALL_OW 49
// PlaceHumanInUnit ( i , veh ) ;
4208: LD_VAR 0 2
4212: PPUSH
4213: LD_VAR 0 5
4217: PPUSH
4218: CALL_OW 52
// end else
4222: GO 4266
// begin if GetClass ( i ) = 2 then
4224: LD_VAR 0 2
4228: PPUSH
4229: CALL_OW 257
4233: PUSH
4234: LD_INT 2
4236: EQUAL
4237: IFFALSE 4251
// SetClass ( i , 1 ) ;
4239: LD_VAR 0 2
4243: PPUSH
4244: LD_INT 1
4246: PPUSH
4247: CALL_OW 336
// PlaceUnitArea ( i , startArea , false ) ;
4251: LD_VAR 0 2
4255: PPUSH
4256: LD_INT 1
4258: PPUSH
4259: LD_INT 0
4261: PPUSH
4262: CALL_OW 49
// end ;
4266: GO 4060
4268: POP
4269: POP
// uc_side := 4 ;
4270: LD_ADDR_OWVAR 20
4274: PUSH
4275: LD_INT 4
4277: ST_TO_ADDR
// Harisson := PrepareUnit ( Harisson , false ,  ) ;
4278: LD_ADDR_EXP 19
4282: PUSH
4283: LD_STRING Harisson
4285: PPUSH
4286: LD_INT 0
4288: PPUSH
4289: LD_STRING 
4291: PPUSH
4292: CALL 32326 0 3
4296: ST_TO_ADDR
// PrepareScout ;
4297: CALL 4306 0 0
// end ;
4301: LD_VAR 0 1
4305: RET
// function PrepareScout ; var ape ; begin
4306: LD_INT 0
4308: PPUSH
4309: PPUSH
// uc_side := 4 ;
4310: LD_ADDR_OWVAR 20
4314: PUSH
4315: LD_INT 4
4317: ST_TO_ADDR
// uc_nation := 1 ;
4318: LD_ADDR_OWVAR 21
4322: PUSH
4323: LD_INT 1
4325: ST_TO_ADDR
// if LoadVariable ( FrankIn06 , 0 ) then
4326: LD_STRING FrankIn06
4328: PPUSH
4329: LD_INT 0
4331: PPUSH
4332: CALL_OW 30
4336: IFFALSE 4353
// Frank := CreateCharacter ( 06c_Frank ) else
4338: LD_ADDR_EXP 15
4342: PUSH
4343: LD_STRING 06c_Frank
4345: PPUSH
4346: CALL_OW 34
4350: ST_TO_ADDR
4351: GO 4393
// if LoadVariable ( FrankInDelta , 0 ) then
4353: LD_STRING FrankInDelta
4355: PPUSH
4356: LD_INT 0
4358: PPUSH
4359: CALL_OW 30
4363: IFFALSE 4380
// Frank := CreateCharacter ( 05_Frank ) else
4365: LD_ADDR_EXP 15
4369: PUSH
4370: LD_STRING 05_Frank
4372: PPUSH
4373: CALL_OW 34
4377: ST_TO_ADDR
4378: GO 4393
// Frank := CreateCharacter ( 04_Frank ) ;
4380: LD_ADDR_EXP 15
4384: PUSH
4385: LD_STRING 04_Frank
4387: PPUSH
4388: CALL_OW 34
4392: ST_TO_ADDR
// if Frank then
4393: LD_EXP 15
4397: IFFALSE 4530
// begin PlaceUnitArea ( Frank , scoutArea , false ) ;
4399: LD_EXP 15
4403: PPUSH
4404: LD_INT 2
4406: PPUSH
4407: LD_INT 0
4409: PPUSH
4410: CALL_OW 49
// SetClass ( Frank , 1 ) ;
4414: LD_EXP 15
4418: PPUSH
4419: LD_INT 1
4421: PPUSH
4422: CALL_OW 336
// uc_side := 0 ;
4426: LD_ADDR_OWVAR 20
4430: PUSH
4431: LD_INT 0
4433: ST_TO_ADDR
// uc_nation := 0 ;
4434: LD_ADDR_OWVAR 21
4438: PUSH
4439: LD_INT 0
4441: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 0 ) ;
4442: LD_INT 0
4444: PPUSH
4445: LD_INT 12
4447: PPUSH
4448: LD_INT 0
4450: PPUSH
4451: CALL_OW 380
// ape := CreateHuman ;
4455: LD_ADDR_VAR 0 2
4459: PUSH
4460: CALL_OW 44
4464: ST_TO_ADDR
// PlaceUnitXYR ( ape , GetX ( Frank ) , GetY ( Frank ) , 5 , false ) ;
4465: LD_VAR 0 2
4469: PPUSH
4470: LD_EXP 15
4474: PPUSH
4475: CALL_OW 250
4479: PPUSH
4480: LD_EXP 15
4484: PPUSH
4485: CALL_OW 251
4489: PPUSH
4490: LD_INT 5
4492: PPUSH
4493: LD_INT 0
4495: PPUSH
4496: CALL_OW 50
// ComTurnUnit ( ape , Frank ) ;
4500: LD_VAR 0 2
4504: PPUSH
4505: LD_EXP 15
4509: PPUSH
4510: CALL_OW 119
// ComTurnUnit ( Frank , ape ) ;
4514: LD_EXP 15
4518: PPUSH
4519: LD_VAR 0 2
4523: PPUSH
4524: CALL_OW 119
// exit ;
4528: GO 4573
// end ; Kikuchi := PrepareUnit ( Yamoko , false ,  ) ;
4530: LD_ADDR_EXP 18
4534: PUSH
4535: LD_STRING Yamoko
4537: PPUSH
4538: LD_INT 0
4540: PPUSH
4541: LD_STRING 
4543: PPUSH
4544: CALL 32326 0 3
4548: ST_TO_ADDR
// PlaceUnitArea ( Kikuchi , scoutArea , false ) ;
4549: LD_EXP 18
4553: PPUSH
4554: LD_INT 2
4556: PPUSH
4557: LD_INT 0
4559: PPUSH
4560: CALL_OW 49
// ComHold ( Kikuchi ) ;
4564: LD_EXP 18
4568: PPUSH
4569: CALL_OW 140
// end ; end_of_file
4573: LD_VAR 0 1
4577: RET
// export ru_rebuild_list ; export function PrepareRussians ; var i , j , r , un , skill , filter , tmp , dep_list , lab_list , fac_list , breastworks_list , bunker_list , turret_list , weapons_list , personel_counter ; begin
4578: LD_INT 0
4580: PPUSH
4581: PPUSH
4582: PPUSH
4583: PPUSH
4584: PPUSH
4585: PPUSH
4586: PPUSH
4587: PPUSH
4588: PPUSH
4589: PPUSH
4590: PPUSH
4591: PPUSH
4592: PPUSH
4593: PPUSH
4594: PPUSH
4595: PPUSH
// ru_rebuild_list := [ ] ;
4596: LD_ADDR_EXP 20
4600: PUSH
4601: EMPTY
4602: ST_TO_ADDR
// uc_side := 3 ;
4603: LD_ADDR_OWVAR 20
4607: PUSH
4608: LD_INT 3
4610: ST_TO_ADDR
// uc_nation := 3 ;
4611: LD_ADDR_OWVAR 21
4615: PUSH
4616: LD_INT 3
4618: ST_TO_ADDR
// if Difficulty > 1 then
4619: LD_OWVAR 67
4623: PUSH
4624: LD_INT 1
4626: GREATER
4627: IFFALSE 4794
// begin bc_type := b_breastwork ;
4629: LD_ADDR_OWVAR 42
4633: PUSH
4634: LD_INT 31
4636: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 78 , 74 , 2 ) ;
4637: LD_INT 78
4639: PPUSH
4640: LD_INT 74
4642: PPUSH
4643: LD_INT 2
4645: PPUSH
4646: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 171 , 193 , 4 ) ;
4650: LD_INT 171
4652: PPUSH
4653: LD_INT 193
4655: PPUSH
4656: LD_INT 4
4658: PPUSH
4659: CALL_OW 47
// bc_type := b_turret ;
4663: LD_ADDR_OWVAR 42
4667: PUSH
4668: LD_INT 33
4670: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 129 , 96 , 3 ) ;
4671: LD_INT 129
4673: PPUSH
4674: LD_INT 96
4676: PPUSH
4677: LD_INT 3
4679: PPUSH
4680: CALL_OW 47
// if Difficulty > 2 then
4684: LD_OWVAR 67
4688: PUSH
4689: LD_INT 2
4691: GREATER
4692: IFFALSE 4763
// begin RemoveUnit ( HexInfo ( 83 , 141 ) ) ;
4694: LD_INT 83
4696: PPUSH
4697: LD_INT 141
4699: PPUSH
4700: CALL_OW 428
4704: PPUSH
4705: CALL_OW 64
// RemoveUnit ( HexInfo ( 78 , 133 ) ) ;
4709: LD_INT 78
4711: PPUSH
4712: LD_INT 133
4714: PPUSH
4715: CALL_OW 428
4719: PPUSH
4720: CALL_OW 64
// CreateAndPlaceBuildingXYD ( 83 , 141 , 2 ) ;
4724: LD_INT 83
4726: PPUSH
4727: LD_INT 141
4729: PPUSH
4730: LD_INT 2
4732: PPUSH
4733: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 78 , 133 , 2 ) ;
4737: LD_INT 78
4739: PPUSH
4740: LD_INT 133
4742: PPUSH
4743: LD_INT 2
4745: PPUSH
4746: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 145 , 112 , 3 ) ;
4750: LD_INT 145
4752: PPUSH
4753: LD_INT 112
4755: PPUSH
4756: LD_INT 3
4758: PPUSH
4759: CALL_OW 47
// end ; if Difficulty > 3 then
4763: LD_OWVAR 67
4767: PUSH
4768: LD_INT 3
4770: GREATER
4771: IFFALSE 4794
// begin bc_type := b_bunker ;
4773: LD_ADDR_OWVAR 42
4777: PUSH
4778: LD_INT 32
4780: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 44 , 50 , 4 ) ;
4781: LD_INT 44
4783: PPUSH
4784: LD_INT 50
4786: PPUSH
4787: LD_INT 4
4789: PPUSH
4790: CALL_OW 47
// end ; end ; dep_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
4794: LD_ADDR_VAR 0 9
4798: PUSH
4799: LD_INT 22
4801: PUSH
4802: LD_INT 3
4804: PUSH
4805: EMPTY
4806: LIST
4807: LIST
4808: PUSH
4809: LD_INT 2
4811: PUSH
4812: LD_INT 30
4814: PUSH
4815: LD_INT 0
4817: PUSH
4818: EMPTY
4819: LIST
4820: LIST
4821: PUSH
4822: LD_INT 30
4824: PUSH
4825: LD_INT 1
4827: PUSH
4828: EMPTY
4829: LIST
4830: LIST
4831: PUSH
4832: EMPTY
4833: LIST
4834: LIST
4835: LIST
4836: PUSH
4837: EMPTY
4838: LIST
4839: LIST
4840: PPUSH
4841: CALL_OW 69
4845: ST_TO_ADDR
// lab_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
4846: LD_ADDR_VAR 0 10
4850: PUSH
4851: LD_INT 22
4853: PUSH
4854: LD_INT 3
4856: PUSH
4857: EMPTY
4858: LIST
4859: LIST
4860: PUSH
4861: LD_INT 2
4863: PUSH
4864: LD_INT 30
4866: PUSH
4867: LD_INT 6
4869: PUSH
4870: EMPTY
4871: LIST
4872: LIST
4873: PUSH
4874: LD_INT 30
4876: PUSH
4877: LD_INT 7
4879: PUSH
4880: EMPTY
4881: LIST
4882: LIST
4883: PUSH
4884: LD_INT 30
4886: PUSH
4887: LD_INT 8
4889: PUSH
4890: EMPTY
4891: LIST
4892: LIST
4893: PUSH
4894: EMPTY
4895: LIST
4896: LIST
4897: LIST
4898: LIST
4899: PUSH
4900: EMPTY
4901: LIST
4902: LIST
4903: PPUSH
4904: CALL_OW 69
4908: ST_TO_ADDR
// fac_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) ;
4909: LD_ADDR_VAR 0 11
4913: PUSH
4914: LD_INT 22
4916: PUSH
4917: LD_INT 3
4919: PUSH
4920: EMPTY
4921: LIST
4922: LIST
4923: PUSH
4924: LD_INT 30
4926: PUSH
4927: LD_INT 3
4929: PUSH
4930: EMPTY
4931: LIST
4932: LIST
4933: PUSH
4934: EMPTY
4935: LIST
4936: LIST
4937: PPUSH
4938: CALL_OW 69
4942: ST_TO_ADDR
// breastworks_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) ;
4943: LD_ADDR_VAR 0 12
4947: PUSH
4948: LD_INT 22
4950: PUSH
4951: LD_INT 3
4953: PUSH
4954: EMPTY
4955: LIST
4956: LIST
4957: PUSH
4958: LD_INT 30
4960: PUSH
4961: LD_INT 31
4963: PUSH
4964: EMPTY
4965: LIST
4966: LIST
4967: PUSH
4968: EMPTY
4969: LIST
4970: LIST
4971: PPUSH
4972: CALL_OW 69
4976: ST_TO_ADDR
// bunker_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) ;
4977: LD_ADDR_VAR 0 13
4981: PUSH
4982: LD_INT 22
4984: PUSH
4985: LD_INT 3
4987: PUSH
4988: EMPTY
4989: LIST
4990: LIST
4991: PUSH
4992: LD_INT 30
4994: PUSH
4995: LD_INT 32
4997: PUSH
4998: EMPTY
4999: LIST
5000: LIST
5001: PUSH
5002: EMPTY
5003: LIST
5004: LIST
5005: PPUSH
5006: CALL_OW 69
5010: ST_TO_ADDR
// turret_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_turret ] ] ) ;
5011: LD_ADDR_VAR 0 14
5015: PUSH
5016: LD_INT 22
5018: PUSH
5019: LD_INT 3
5021: PUSH
5022: EMPTY
5023: LIST
5024: LIST
5025: PUSH
5026: LD_INT 30
5028: PUSH
5029: LD_INT 33
5031: PUSH
5032: EMPTY
5033: LIST
5034: LIST
5035: PUSH
5036: EMPTY
5037: LIST
5038: LIST
5039: PPUSH
5040: CALL_OW 69
5044: ST_TO_ADDR
// weapons_list := [ [ ru_heavy_machine_gun , 5 ] , [ ru_gatling_gun , 50 ] , [ ru_gun , 30 ] , [ ru_heavy_gun , 15 ] ] ;
5045: LD_ADDR_VAR 0 15
5049: PUSH
5050: LD_INT 42
5052: PUSH
5053: LD_INT 5
5055: PUSH
5056: EMPTY
5057: LIST
5058: LIST
5059: PUSH
5060: LD_INT 43
5062: PUSH
5063: LD_INT 50
5065: PUSH
5066: EMPTY
5067: LIST
5068: LIST
5069: PUSH
5070: LD_INT 44
5072: PUSH
5073: LD_INT 30
5075: PUSH
5076: EMPTY
5077: LIST
5078: LIST
5079: PUSH
5080: LD_INT 46
5082: PUSH
5083: LD_INT 15
5085: PUSH
5086: EMPTY
5087: LIST
5088: LIST
5089: PUSH
5090: EMPTY
5091: LIST
5092: LIST
5093: LIST
5094: LIST
5095: ST_TO_ADDR
// personel_counter := [ 0 , 4 , 6 , 3 ] ;
5096: LD_ADDR_VAR 0 16
5100: PUSH
5101: LD_INT 0
5103: PUSH
5104: LD_INT 4
5106: PUSH
5107: LD_INT 6
5109: PUSH
5110: LD_INT 3
5112: PUSH
5113: EMPTY
5114: LIST
5115: LIST
5116: LIST
5117: LIST
5118: ST_TO_ADDR
// skill := [ 4 , 5 , 6 , 7 ] [ Difficulty ] ;
5119: LD_ADDR_VAR 0 6
5123: PUSH
5124: LD_INT 4
5126: PUSH
5127: LD_INT 5
5129: PUSH
5130: LD_INT 6
5132: PUSH
5133: LD_INT 7
5135: PUSH
5136: EMPTY
5137: LIST
5138: LIST
5139: LIST
5140: LIST
5141: PUSH
5142: LD_OWVAR 67
5146: ARRAY
5147: ST_TO_ADDR
// SetBName ( ru_dep_main , am_tukh ) ;
5148: LD_INT 16
5150: PPUSH
5151: LD_STRING am_tukh
5153: PPUSH
5154: CALL_OW 500
// for i in FilterAllUnits ( [ f_type , unit_building ] ) do
5158: LD_ADDR_VAR 0 2
5162: PUSH
5163: LD_INT 21
5165: PUSH
5166: LD_INT 3
5168: PUSH
5169: EMPTY
5170: LIST
5171: LIST
5172: PPUSH
5173: CALL_OW 69
5177: PUSH
5178: FOR_IN
5179: IFFALSE 5216
// SetBLevel ( i , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
5181: LD_VAR 0 2
5185: PPUSH
5186: LD_INT 4
5188: PUSH
5189: LD_INT 5
5191: PUSH
5192: LD_INT 6
5194: PUSH
5195: LD_INT 7
5197: PUSH
5198: EMPTY
5199: LIST
5200: LIST
5201: LIST
5202: LIST
5203: PUSH
5204: LD_OWVAR 67
5208: ARRAY
5209: PPUSH
5210: CALL_OW 241
5214: GO 5178
5216: POP
5217: POP
// for i in dep_list do
5218: LD_ADDR_VAR 0 2
5222: PUSH
5223: LD_VAR 0 9
5227: PUSH
5228: FOR_IN
5229: IFFALSE 5273
// begin SetResourceType ( GetBase ( i ) , mat_cans , 1000 ) ;
5231: LD_VAR 0 2
5235: PPUSH
5236: CALL_OW 274
5240: PPUSH
5241: LD_INT 1
5243: PPUSH
5244: LD_INT 1000
5246: PPUSH
5247: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 1000 ) ;
5251: LD_VAR 0 2
5255: PPUSH
5256: CALL_OW 274
5260: PPUSH
5261: LD_INT 2
5263: PPUSH
5264: LD_INT 1000
5266: PPUSH
5267: CALL_OW 277
// end ;
5271: GO 5228
5273: POP
5274: POP
// InitHc ;
5275: CALL_OW 19
// tmp := bunker_list * [ 45 , 60 , 75 , 80 ] [ Difficulty ] div 100 ;
5279: LD_ADDR_VAR 0 8
5283: PUSH
5284: LD_VAR 0 13
5288: PUSH
5289: LD_INT 45
5291: PUSH
5292: LD_INT 60
5294: PUSH
5295: LD_INT 75
5297: PUSH
5298: LD_INT 80
5300: PUSH
5301: EMPTY
5302: LIST
5303: LIST
5304: LIST
5305: LIST
5306: PUSH
5307: LD_OWVAR 67
5311: ARRAY
5312: MUL
5313: PUSH
5314: LD_INT 100
5316: DIV
5317: ST_TO_ADDR
// personel_counter := Replace ( personel_counter , 1 , tmp ) ;
5318: LD_ADDR_VAR 0 16
5322: PUSH
5323: LD_VAR 0 16
5327: PPUSH
5328: LD_INT 1
5330: PPUSH
5331: LD_VAR 0 8
5335: PPUSH
5336: CALL_OW 1
5340: ST_TO_ADDR
// tmp := [ ] ;
5341: LD_ADDR_VAR 0 8
5345: PUSH
5346: EMPTY
5347: ST_TO_ADDR
// for i in bunker_list do
5348: LD_ADDR_VAR 0 2
5352: PUSH
5353: LD_VAR 0 13
5357: PUSH
5358: FOR_IN
5359: IFFALSE 5455
// if i mod 10 + 1 < tmp then
5361: LD_VAR 0 2
5365: PUSH
5366: LD_INT 10
5368: MOD
5369: PUSH
5370: LD_INT 1
5372: PLUS
5373: PUSH
5374: LD_VAR 0 8
5378: LESS
5379: IFFALSE 5424
// tmp := Insert ( tmp , i mod rand ( 3 , 5 ) + 1 , i ) else
5381: LD_ADDR_VAR 0 8
5385: PUSH
5386: LD_VAR 0 8
5390: PPUSH
5391: LD_VAR 0 2
5395: PUSH
5396: LD_INT 3
5398: PPUSH
5399: LD_INT 5
5401: PPUSH
5402: CALL_OW 12
5406: MOD
5407: PUSH
5408: LD_INT 1
5410: PLUS
5411: PPUSH
5412: LD_VAR 0 2
5416: PPUSH
5417: CALL_OW 2
5421: ST_TO_ADDR
5422: GO 5453
// tmp := Insert ( tmp , tmp + 1 , i ) ;
5424: LD_ADDR_VAR 0 8
5428: PUSH
5429: LD_VAR 0 8
5433: PPUSH
5434: LD_VAR 0 8
5438: PUSH
5439: LD_INT 1
5441: PLUS
5442: PPUSH
5443: LD_VAR 0 2
5447: PPUSH
5448: CALL_OW 2
5452: ST_TO_ADDR
5453: GO 5358
5455: POP
5456: POP
// bunker_list := tmp ;
5457: LD_ADDR_VAR 0 13
5461: PUSH
5462: LD_VAR 0 8
5466: ST_TO_ADDR
// for i in bunker_list ^ turret_list do
5467: LD_ADDR_VAR 0 2
5471: PUSH
5472: LD_VAR 0 13
5476: PUSH
5477: LD_VAR 0 14
5481: ADD
5482: PUSH
5483: FOR_IN
5484: IFFALSE 5507
// PlaceWeaponTurret ( i , GetTurretWeaponBase ( i ) ) ;
5486: LD_VAR 0 2
5490: PPUSH
5491: LD_VAR 0 2
5495: PPUSH
5496: CALL 2225 0 1
5500: PPUSH
5501: CALL_OW 431
5505: GO 5483
5507: POP
5508: POP
// while ( personel_counter [ 1 ] ) do
5509: LD_VAR 0 16
5513: PUSH
5514: LD_INT 1
5516: ARRAY
5517: IFFALSE 5625
// begin i := rand ( 1 , bunker_list ) ;
5519: LD_ADDR_VAR 0 2
5523: PUSH
5524: LD_INT 1
5526: PPUSH
5527: LD_VAR 0 13
5531: PPUSH
5532: CALL_OW 12
5536: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
5537: LD_INT 0
5539: PPUSH
5540: LD_INT 1
5542: PPUSH
5543: LD_VAR 0 6
5547: PPUSH
5548: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , bunker_list [ i ] ) ;
5552: CALL_OW 44
5556: PPUSH
5557: LD_VAR 0 13
5561: PUSH
5562: LD_VAR 0 2
5566: ARRAY
5567: PPUSH
5568: CALL_OW 52
// bunker_list := Delete ( bunker_list , i ) ;
5572: LD_ADDR_VAR 0 13
5576: PUSH
5577: LD_VAR 0 13
5581: PPUSH
5582: LD_VAR 0 2
5586: PPUSH
5587: CALL_OW 3
5591: ST_TO_ADDR
// personel_counter := Replace ( personel_counter , 1 , personel_counter [ 1 ] - 1 ) ;
5592: LD_ADDR_VAR 0 16
5596: PUSH
5597: LD_VAR 0 16
5601: PPUSH
5602: LD_INT 1
5604: PPUSH
5605: LD_VAR 0 16
5609: PUSH
5610: LD_INT 1
5612: ARRAY
5613: PUSH
5614: LD_INT 1
5616: MINUS
5617: PPUSH
5618: CALL_OW 1
5622: ST_TO_ADDR
// end ;
5623: GO 5509
// for i = 1 to personel_counter [ 2 ] do
5625: LD_ADDR_VAR 0 2
5629: PUSH
5630: DOUBLE
5631: LD_INT 1
5633: DEC
5634: ST_TO_ADDR
5635: LD_VAR 0 16
5639: PUSH
5640: LD_INT 2
5642: ARRAY
5643: PUSH
5644: FOR_TO
5645: IFFALSE 5676
// begin PrepareHuman ( false , 2 , skill ) ;
5647: LD_INT 0
5649: PPUSH
5650: LD_INT 2
5652: PPUSH
5653: LD_VAR 0 6
5657: PPUSH
5658: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , ru_dep_main ) ;
5662: CALL_OW 44
5666: PPUSH
5667: LD_INT 16
5669: PPUSH
5670: CALL_OW 52
// end ;
5674: GO 5644
5676: POP
5677: POP
// for i = 1 to personel_counter [ 3 ] do
5678: LD_ADDR_VAR 0 2
5682: PUSH
5683: DOUBLE
5684: LD_INT 1
5686: DEC
5687: ST_TO_ADDR
5688: LD_VAR 0 16
5692: PUSH
5693: LD_INT 3
5695: ARRAY
5696: PUSH
5697: FOR_TO
5698: IFFALSE 5745
// begin PrepareHuman ( false , 3 , skill ) ;
5700: LD_INT 0
5702: PPUSH
5703: LD_INT 3
5705: PPUSH
5706: LD_VAR 0 6
5710: PPUSH
5711: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , fac_list [ i mod 2 + 1 ] ) ;
5715: CALL_OW 44
5719: PPUSH
5720: LD_VAR 0 11
5724: PUSH
5725: LD_VAR 0 2
5729: PUSH
5730: LD_INT 2
5732: MOD
5733: PUSH
5734: LD_INT 1
5736: PLUS
5737: ARRAY
5738: PPUSH
5739: CALL_OW 52
// end ;
5743: GO 5697
5745: POP
5746: POP
// for i = 1 to personel_counter [ 4 ] do
5747: LD_ADDR_VAR 0 2
5751: PUSH
5752: DOUBLE
5753: LD_INT 1
5755: DEC
5756: ST_TO_ADDR
5757: LD_VAR 0 16
5761: PUSH
5762: LD_INT 4
5764: ARRAY
5765: PUSH
5766: FOR_TO
5767: IFFALSE 5804
// begin PrepareHuman ( false , 4 , skill ) ;
5769: LD_INT 0
5771: PPUSH
5772: LD_INT 4
5774: PPUSH
5775: LD_VAR 0 6
5779: PPUSH
5780: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , lab_list [ 1 ] ) ;
5784: CALL_OW 44
5788: PPUSH
5789: LD_VAR 0 10
5793: PUSH
5794: LD_INT 1
5796: ARRAY
5797: PPUSH
5798: CALL_OW 52
// end ;
5802: GO 5766
5804: POP
5805: POP
// for i in breastworks_list do
5806: LD_ADDR_VAR 0 2
5810: PUSH
5811: LD_VAR 0 12
5815: PUSH
5816: FOR_IN
5817: IFFALSE 5929
// begin r := GetDir ( i ) ;
5819: LD_ADDR_VAR 0 4
5823: PUSH
5824: LD_VAR 0 2
5828: PPUSH
5829: CALL_OW 254
5833: ST_TO_ADDR
// if r > 3 then
5834: LD_VAR 0 4
5838: PUSH
5839: LD_INT 3
5841: GREATER
5842: IFFALSE 5860
// r := r - 3 else
5844: LD_ADDR_VAR 0 4
5848: PUSH
5849: LD_VAR 0 4
5853: PUSH
5854: LD_INT 3
5856: MINUS
5857: ST_TO_ADDR
5858: GO 5874
// r := r + 3 ;
5860: LD_ADDR_VAR 0 4
5864: PUSH
5865: LD_VAR 0 4
5869: PUSH
5870: LD_INT 3
5872: PLUS
5873: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
5874: LD_INT 0
5876: PPUSH
5877: LD_INT 1
5879: PPUSH
5880: LD_VAR 0 6
5884: PPUSH
5885: CALL_OW 380
// un := CreateHuman ;
5889: LD_ADDR_VAR 0 5
5893: PUSH
5894: CALL_OW 44
5898: ST_TO_ADDR
// SetDir ( un , r ) ;
5899: LD_VAR 0 5
5903: PPUSH
5904: LD_VAR 0 4
5908: PPUSH
5909: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
5913: LD_VAR 0 5
5917: PPUSH
5918: LD_VAR 0 2
5922: PPUSH
5923: CALL_OW 52
// end ;
5927: GO 5816
5929: POP
5930: POP
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) ;
5931: LD_ADDR_VAR 0 8
5935: PUSH
5936: LD_INT 22
5938: PUSH
5939: LD_INT 3
5941: PUSH
5942: EMPTY
5943: LIST
5944: LIST
5945: PUSH
5946: LD_INT 25
5948: PUSH
5949: LD_INT 3
5951: PUSH
5952: EMPTY
5953: LIST
5954: LIST
5955: PUSH
5956: EMPTY
5957: LIST
5958: LIST
5959: PPUSH
5960: CALL_OW 69
5964: ST_TO_ADDR
// r := [ 4 , 5 , 6 , 6 ] [ Difficulty ] ;
5965: LD_ADDR_VAR 0 4
5969: PUSH
5970: LD_INT 4
5972: PUSH
5973: LD_INT 5
5975: PUSH
5976: LD_INT 6
5978: PUSH
5979: LD_INT 6
5981: PUSH
5982: EMPTY
5983: LIST
5984: LIST
5985: LIST
5986: LIST
5987: PUSH
5988: LD_OWVAR 67
5992: ARRAY
5993: ST_TO_ADDR
// for i = 1 to r do
5994: LD_ADDR_VAR 0 2
5998: PUSH
5999: DOUBLE
6000: LD_INT 1
6002: DEC
6003: ST_TO_ADDR
6004: LD_VAR 0 4
6008: PUSH
6009: FOR_TO
6010: IFFALSE 6183
// begin un := PrepareTank ( 3 , 3 , [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked ] [ i mod 3 + 1 ] , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_machine_gun ] [ i mod 3 + 1 ] , 100 ) ;
6012: LD_ADDR_VAR 0 5
6016: PUSH
6017: LD_INT 3
6019: PPUSH
6020: LD_INT 3
6022: PPUSH
6023: LD_INT 22
6025: PUSH
6026: LD_INT 22
6028: PUSH
6029: LD_INT 24
6031: PUSH
6032: EMPTY
6033: LIST
6034: LIST
6035: LIST
6036: PUSH
6037: LD_VAR 0 2
6041: PUSH
6042: LD_INT 3
6044: MOD
6045: PUSH
6046: LD_INT 1
6048: PLUS
6049: ARRAY
6050: PPUSH
6051: LD_INT 1
6053: PPUSH
6054: LD_INT 1
6056: PPUSH
6057: LD_INT 43
6059: PUSH
6060: LD_INT 44
6062: PUSH
6063: LD_INT 42
6065: PUSH
6066: EMPTY
6067: LIST
6068: LIST
6069: LIST
6070: PUSH
6071: LD_VAR 0 2
6075: PUSH
6076: LD_INT 3
6078: MOD
6079: PUSH
6080: LD_INT 1
6082: PLUS
6083: ARRAY
6084: PPUSH
6085: LD_INT 100
6087: PPUSH
6088: CALL 520 0 7
6092: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
6093: LD_VAR 0 5
6097: PPUSH
6098: LD_INT 0
6100: PPUSH
6101: LD_INT 5
6103: PPUSH
6104: CALL_OW 12
6108: PPUSH
6109: CALL_OW 233
// PlaceUnitArea ( un , parkingArea , false ) ;
6113: LD_VAR 0 5
6117: PPUSH
6118: LD_INT 5
6120: PPUSH
6121: LD_INT 0
6123: PPUSH
6124: CALL_OW 49
// if i > tmp - 2 then
6128: LD_VAR 0 2
6132: PUSH
6133: LD_VAR 0 8
6137: PUSH
6138: LD_INT 2
6140: MINUS
6141: GREATER
6142: IFFALSE 6146
// continue ;
6144: GO 6009
// ComExitBuilding ( tmp [ i ] ) ;
6146: LD_VAR 0 8
6150: PUSH
6151: LD_VAR 0 2
6155: ARRAY
6156: PPUSH
6157: CALL_OW 122
// AddComEnterUnit ( tmp [ i ] , un ) ;
6161: LD_VAR 0 8
6165: PUSH
6166: LD_VAR 0 2
6170: ARRAY
6171: PPUSH
6172: LD_VAR 0 5
6176: PPUSH
6177: CALL_OW 180
// end ;
6181: GO 6009
6183: POP
6184: POP
// end ;
6185: LD_VAR 0 1
6189: RET
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) do var i , filter , tmp , engs , enemy ;
6190: LD_INT 22
6192: PUSH
6193: LD_INT 3
6195: PUSH
6196: EMPTY
6197: LIST
6198: LIST
6199: PUSH
6200: LD_INT 25
6202: PUSH
6203: LD_INT 2
6205: PUSH
6206: EMPTY
6207: LIST
6208: LIST
6209: PUSH
6210: EMPTY
6211: LIST
6212: LIST
6213: PPUSH
6214: CALL_OW 69
6218: IFFALSE 6950
6220: GO 6222
6222: DISABLE
6223: LD_INT 0
6225: PPUSH
6226: PPUSH
6227: PPUSH
6228: PPUSH
6229: PPUSH
// begin enable ;
6230: ENABLE
// filter := FilterUnitsInArea ( baseArea , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
6231: LD_ADDR_VAR 0 2
6235: PUSH
6236: LD_INT 6
6238: PPUSH
6239: LD_INT 3
6241: PUSH
6242: LD_INT 24
6244: PUSH
6245: LD_INT 1000
6247: PUSH
6248: EMPTY
6249: LIST
6250: LIST
6251: PUSH
6252: EMPTY
6253: LIST
6254: LIST
6255: PUSH
6256: LD_INT 21
6258: PUSH
6259: LD_INT 3
6261: PUSH
6262: EMPTY
6263: LIST
6264: LIST
6265: PUSH
6266: EMPTY
6267: LIST
6268: LIST
6269: PPUSH
6270: CALL_OW 70
6274: ST_TO_ADDR
// engs := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
6275: LD_ADDR_VAR 0 4
6279: PUSH
6280: LD_INT 22
6282: PUSH
6283: LD_INT 3
6285: PUSH
6286: EMPTY
6287: LIST
6288: LIST
6289: PUSH
6290: LD_INT 25
6292: PUSH
6293: LD_INT 2
6295: PUSH
6296: EMPTY
6297: LIST
6298: LIST
6299: PUSH
6300: EMPTY
6301: LIST
6302: LIST
6303: PPUSH
6304: CALL_OW 69
6308: ST_TO_ADDR
// if not filter and not ru_rebuild_list then
6309: LD_VAR 0 2
6313: NOT
6314: PUSH
6315: LD_EXP 20
6319: NOT
6320: AND
6321: IFFALSE 6391
// begin for i in engs do
6323: LD_ADDR_VAR 0 1
6327: PUSH
6328: LD_VAR 0 4
6332: PUSH
6333: FOR_IN
6334: IFFALSE 6389
// if GetLives ( i ) = 1000 and not HasTask ( i ) and not IsInUnit ( i ) then
6336: LD_VAR 0 1
6340: PPUSH
6341: CALL_OW 256
6345: PUSH
6346: LD_INT 1000
6348: EQUAL
6349: PUSH
6350: LD_VAR 0 1
6354: PPUSH
6355: CALL_OW 314
6359: NOT
6360: AND
6361: PUSH
6362: LD_VAR 0 1
6366: PPUSH
6367: CALL_OW 310
6371: NOT
6372: AND
6373: IFFALSE 6387
// ComEnterUnit ( i , ru_dep_main ) ;
6375: LD_VAR 0 1
6379: PPUSH
6380: LD_INT 16
6382: PPUSH
6383: CALL_OW 120
6387: GO 6333
6389: POP
6390: POP
// end ; if UnitFilter ( engs , [ f_not , [ f_lives , 650 ] ] ) then
6391: LD_VAR 0 4
6395: PPUSH
6396: LD_INT 3
6398: PUSH
6399: LD_INT 24
6401: PUSH
6402: LD_INT 650
6404: PUSH
6405: EMPTY
6406: LIST
6407: LIST
6408: PUSH
6409: EMPTY
6410: LIST
6411: LIST
6412: PPUSH
6413: CALL_OW 72
6417: IFFALSE 6510
// begin tmp := UnitFilter ( engs , [ f_not , [ f_lives , 650 ] ] ) ;
6419: LD_ADDR_VAR 0 3
6423: PUSH
6424: LD_VAR 0 4
6428: PPUSH
6429: LD_INT 3
6431: PUSH
6432: LD_INT 24
6434: PUSH
6435: LD_INT 650
6437: PUSH
6438: EMPTY
6439: LIST
6440: LIST
6441: PUSH
6442: EMPTY
6443: LIST
6444: LIST
6445: PPUSH
6446: CALL_OW 72
6450: ST_TO_ADDR
// for i in tmp do
6451: LD_ADDR_VAR 0 1
6455: PUSH
6456: LD_VAR 0 3
6460: PUSH
6461: FOR_IN
6462: IFFALSE 6508
// if not IsInArea ( i , mainBaseArea ) then
6464: LD_VAR 0 1
6468: PPUSH
6469: LD_INT 14
6471: PPUSH
6472: CALL_OW 308
6476: NOT
6477: IFFALSE 6506
// begin ComMoveXY ( i , 129 , 125 ) ;
6479: LD_VAR 0 1
6483: PPUSH
6484: LD_INT 129
6486: PPUSH
6487: LD_INT 125
6489: PPUSH
6490: CALL_OW 111
// AddComWait ( i , 0 0$30 ) ;
6494: LD_VAR 0 1
6498: PPUSH
6499: LD_INT 1050
6501: PPUSH
6502: CALL_OW 202
// end ;
6506: GO 6461
6508: POP
6509: POP
// end ; engs := UnitFilter ( engs , [ f_lives , 650 ] ) ;
6510: LD_ADDR_VAR 0 4
6514: PUSH
6515: LD_VAR 0 4
6519: PPUSH
6520: LD_INT 24
6522: PUSH
6523: LD_INT 650
6525: PUSH
6526: EMPTY
6527: LIST
6528: LIST
6529: PPUSH
6530: CALL_OW 72
6534: ST_TO_ADDR
// if not engs then
6535: LD_VAR 0 4
6539: NOT
6540: IFFALSE 6544
// exit ;
6542: GO 6950
// if filter then
6544: LD_VAR 0 2
6548: IFFALSE 6807
// begin for i in engs do
6550: LD_ADDR_VAR 0 1
6554: PUSH
6555: LD_VAR 0 4
6559: PUSH
6560: FOR_IN
6561: IFFALSE 6585
// if IsInUnit ( i ) then
6563: LD_VAR 0 1
6567: PPUSH
6568: CALL_OW 310
6572: IFFALSE 6583
// ComExitBuilding ( i ) ;
6574: LD_VAR 0 1
6578: PPUSH
6579: CALL_OW 122
6583: GO 6560
6585: POP
6586: POP
// wait ( 3 ) ;
6587: LD_INT 3
6589: PPUSH
6590: CALL_OW 67
// if filter >= 2 and engs >= 2 then
6594: LD_VAR 0 2
6598: PUSH
6599: LD_INT 2
6601: GREATEREQUAL
6602: PUSH
6603: LD_VAR 0 4
6607: PUSH
6608: LD_INT 2
6610: GREATEREQUAL
6611: AND
6612: IFFALSE 6760
// begin for i = 1 to engs / 2 do
6614: LD_ADDR_VAR 0 1
6618: PUSH
6619: DOUBLE
6620: LD_INT 1
6622: DEC
6623: ST_TO_ADDR
6624: LD_VAR 0 4
6628: PUSH
6629: LD_INT 2
6631: DIVREAL
6632: PUSH
6633: FOR_TO
6634: IFFALSE 6680
// if not HasTask ( engs [ i ] ) then
6636: LD_VAR 0 4
6640: PUSH
6641: LD_VAR 0 1
6645: ARRAY
6646: PPUSH
6647: CALL_OW 314
6651: NOT
6652: IFFALSE 6678
// ComRepairBuilding ( engs [ i ] , filter [ 1 ] ) ;
6654: LD_VAR 0 4
6658: PUSH
6659: LD_VAR 0 1
6663: ARRAY
6664: PPUSH
6665: LD_VAR 0 2
6669: PUSH
6670: LD_INT 1
6672: ARRAY
6673: PPUSH
6674: CALL_OW 130
6678: GO 6633
6680: POP
6681: POP
// for i = engs / 2 + 1 to engs do
6682: LD_ADDR_VAR 0 1
6686: PUSH
6687: DOUBLE
6688: LD_VAR 0 4
6692: PUSH
6693: LD_INT 2
6695: DIVREAL
6696: PUSH
6697: LD_INT 1
6699: PLUS
6700: DEC
6701: ST_TO_ADDR
6702: LD_VAR 0 4
6706: PUSH
6707: FOR_TO
6708: IFFALSE 6756
// if not HasTask ( engs [ i ] ) then
6710: LD_VAR 0 4
6714: PUSH
6715: LD_VAR 0 1
6719: ARRAY
6720: PPUSH
6721: CALL_OW 314
6725: NOT
6726: IFFALSE 6754
// ComRepairBuilding ( engs [ i ] , filter [ filter ] ) ;
6728: LD_VAR 0 4
6732: PUSH
6733: LD_VAR 0 1
6737: ARRAY
6738: PPUSH
6739: LD_VAR 0 2
6743: PUSH
6744: LD_VAR 0 2
6748: ARRAY
6749: PPUSH
6750: CALL_OW 130
6754: GO 6707
6756: POP
6757: POP
// end else
6758: GO 6807
// for i in engs do
6760: LD_ADDR_VAR 0 1
6764: PUSH
6765: LD_VAR 0 4
6769: PUSH
6770: FOR_IN
6771: IFFALSE 6805
// if not HasTask ( i ) then
6773: LD_VAR 0 1
6777: PPUSH
6778: CALL_OW 314
6782: NOT
6783: IFFALSE 6803
// ComRepairBuilding ( i , filter [ 1 ] ) ;
6785: LD_VAR 0 1
6789: PPUSH
6790: LD_VAR 0 2
6794: PUSH
6795: LD_INT 1
6797: ARRAY
6798: PPUSH
6799: CALL_OW 130
6803: GO 6770
6805: POP
6806: POP
// end ; enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
6807: LD_ADDR_VAR 0 5
6811: PUSH
6812: LD_INT 81
6814: PUSH
6815: LD_INT 3
6817: PUSH
6818: EMPTY
6819: LIST
6820: LIST
6821: PPUSH
6822: CALL_OW 69
6826: ST_TO_ADDR
// if ru_rebuild_list and not filter then
6827: LD_EXP 20
6831: PUSH
6832: LD_VAR 0 2
6836: NOT
6837: AND
6838: IFFALSE 6950
// begin ComExitBuilding ( engs ) ;
6840: LD_VAR 0 4
6844: PPUSH
6845: CALL_OW 122
// if GetDistUnitXY ( NearestUnitToXY ( enemy , ru_rebuild_list [ 2 ] , ru_rebuild_list [ 3 ] ) , ru_rebuild_list [ 2 ] , ru_rebuild_list [ 3 ] ) > 10 then
6849: LD_VAR 0 5
6853: PPUSH
6854: LD_EXP 20
6858: PUSH
6859: LD_INT 2
6861: ARRAY
6862: PPUSH
6863: LD_EXP 20
6867: PUSH
6868: LD_INT 3
6870: ARRAY
6871: PPUSH
6872: CALL_OW 73
6876: PPUSH
6877: LD_EXP 20
6881: PUSH
6882: LD_INT 2
6884: ARRAY
6885: PPUSH
6886: LD_EXP 20
6890: PUSH
6891: LD_INT 3
6893: ARRAY
6894: PPUSH
6895: CALL_OW 297
6899: PUSH
6900: LD_INT 10
6902: GREATER
6903: IFFALSE 6950
// ComBuild ( engs , ru_rebuild_list [ 1 ] , ru_rebuild_list [ 2 ] , ru_rebuild_list [ 3 ] , ru_rebuild_list [ 4 ] ) ;
6905: LD_VAR 0 4
6909: PPUSH
6910: LD_EXP 20
6914: PUSH
6915: LD_INT 1
6917: ARRAY
6918: PPUSH
6919: LD_EXP 20
6923: PUSH
6924: LD_INT 2
6926: ARRAY
6927: PPUSH
6928: LD_EXP 20
6932: PUSH
6933: LD_INT 3
6935: ARRAY
6936: PPUSH
6937: LD_EXP 20
6941: PUSH
6942: LD_INT 4
6944: ARRAY
6945: PPUSH
6946: CALL_OW 145
// end ; end ;
6950: PPOPN 5
6952: END
// every 0 0$1 trigger GetLives ( ru_dep_main ) < 250 do var i , tmp ;
6953: LD_INT 16
6955: PPUSH
6956: CALL_OW 256
6960: PUSH
6961: LD_INT 250
6963: LESS
6964: IFFALSE 7154
6966: GO 6968
6968: DISABLE
6969: LD_INT 0
6971: PPUSH
6972: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_class , 1 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ;
6973: LD_ADDR_VAR 0 2
6977: PUSH
6978: LD_INT 22
6980: PUSH
6981: LD_INT 3
6983: PUSH
6984: EMPTY
6985: LIST
6986: LIST
6987: PUSH
6988: LD_INT 2
6990: PUSH
6991: LD_INT 25
6993: PUSH
6994: LD_INT 1
6996: PUSH
6997: EMPTY
6998: LIST
6999: LIST
7000: PUSH
7001: LD_INT 25
7003: PUSH
7004: LD_INT 3
7006: PUSH
7007: EMPTY
7008: LIST
7009: LIST
7010: PUSH
7011: LD_INT 25
7013: PUSH
7014: LD_INT 4
7016: PUSH
7017: EMPTY
7018: LIST
7019: LIST
7020: PUSH
7021: EMPTY
7022: LIST
7023: LIST
7024: LIST
7025: LIST
7026: PUSH
7027: EMPTY
7028: LIST
7029: LIST
7030: PPUSH
7031: CALL_OW 69
7035: ST_TO_ADDR
// ComExitBuilding ( tmp ) ;
7036: LD_VAR 0 2
7040: PPUSH
7041: CALL_OW 122
// wait ( 3 ) ;
7045: LD_INT 3
7047: PPUSH
7048: CALL_OW 67
// ComMoveXY ( tmp , 156 , 211 ) ;
7052: LD_VAR 0 2
7056: PPUSH
7057: LD_INT 156
7059: PPUSH
7060: LD_INT 211
7062: PPUSH
7063: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
7067: LD_INT 35
7069: PPUSH
7070: CALL_OW 67
// for i in tmp do
7074: LD_ADDR_VAR 0 1
7078: PUSH
7079: LD_VAR 0 2
7083: PUSH
7084: FOR_IN
7085: IFFALSE 7145
// if IsInArea ( i , escapeArea ) then
7087: LD_VAR 0 1
7091: PPUSH
7092: LD_INT 15
7094: PPUSH
7095: CALL_OW 308
7099: IFFALSE 7128
// begin RemoveUnit ( i ) ;
7101: LD_VAR 0 1
7105: PPUSH
7106: CALL_OW 64
// tmp := tmp diff i ;
7110: LD_ADDR_VAR 0 2
7114: PUSH
7115: LD_VAR 0 2
7119: PUSH
7120: LD_VAR 0 1
7124: DIFF
7125: ST_TO_ADDR
// end else
7126: GO 7143
// ComMoveXY ( i , 156 , 211 ) ;
7128: LD_VAR 0 1
7132: PPUSH
7133: LD_INT 156
7135: PPUSH
7136: LD_INT 211
7138: PPUSH
7139: CALL_OW 111
7143: GO 7084
7145: POP
7146: POP
// until not tmp ;
7147: LD_VAR 0 2
7151: NOT
7152: IFFALSE 7067
// end ;
7154: PPOPN 2
7156: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do var i , tmp , doc ;
7157: LD_INT 22
7159: PUSH
7160: LD_INT 3
7162: PUSH
7163: EMPTY
7164: LIST
7165: LIST
7166: PUSH
7167: LD_INT 25
7169: PUSH
7170: LD_INT 4
7172: PUSH
7173: EMPTY
7174: LIST
7175: LIST
7176: PUSH
7177: EMPTY
7178: LIST
7179: LIST
7180: PPUSH
7181: CALL_OW 69
7185: IFFALSE 7439
7187: GO 7189
7189: DISABLE
7190: LD_INT 0
7192: PPUSH
7193: PPUSH
7194: PPUSH
// begin enable ;
7195: ENABLE
// tmp := FilterUnitsInArea ( mainBaseArea , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
7196: LD_ADDR_VAR 0 2
7200: PUSH
7201: LD_INT 14
7203: PPUSH
7204: LD_INT 22
7206: PUSH
7207: LD_INT 3
7209: PUSH
7210: EMPTY
7211: LIST
7212: LIST
7213: PUSH
7214: LD_INT 21
7216: PUSH
7217: LD_INT 1
7219: PUSH
7220: EMPTY
7221: LIST
7222: LIST
7223: PUSH
7224: LD_INT 3
7226: PUSH
7227: LD_INT 24
7229: PUSH
7230: LD_INT 1000
7232: PUSH
7233: EMPTY
7234: LIST
7235: LIST
7236: PUSH
7237: EMPTY
7238: LIST
7239: LIST
7240: PUSH
7241: EMPTY
7242: LIST
7243: LIST
7244: LIST
7245: PPUSH
7246: CALL_OW 70
7250: ST_TO_ADDR
// doc := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) ;
7251: LD_ADDR_VAR 0 3
7255: PUSH
7256: LD_INT 22
7258: PUSH
7259: LD_INT 3
7261: PUSH
7262: EMPTY
7263: LIST
7264: LIST
7265: PUSH
7266: LD_INT 25
7268: PUSH
7269: LD_INT 4
7271: PUSH
7272: EMPTY
7273: LIST
7274: LIST
7275: PUSH
7276: EMPTY
7277: LIST
7278: LIST
7279: PPUSH
7280: CALL_OW 69
7284: ST_TO_ADDR
// if not doc then
7285: LD_VAR 0 3
7289: NOT
7290: IFFALSE 7294
// exit ;
7292: GO 7439
// if not tmp then
7294: LD_VAR 0 2
7298: NOT
7299: IFFALSE 7390
// begin if not IsInUnit ( doc [ 1 ] ) then
7301: LD_VAR 0 3
7305: PUSH
7306: LD_INT 1
7308: ARRAY
7309: PPUSH
7310: CALL_OW 310
7314: NOT
7315: IFFALSE 7388
// ComEnterUnit ( doc , FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) [ 1 ] ) ;
7317: LD_VAR 0 3
7321: PPUSH
7322: LD_INT 22
7324: PUSH
7325: LD_INT 3
7327: PUSH
7328: EMPTY
7329: LIST
7330: LIST
7331: PUSH
7332: LD_INT 2
7334: PUSH
7335: LD_INT 30
7337: PUSH
7338: LD_INT 6
7340: PUSH
7341: EMPTY
7342: LIST
7343: LIST
7344: PUSH
7345: LD_INT 30
7347: PUSH
7348: LD_INT 7
7350: PUSH
7351: EMPTY
7352: LIST
7353: LIST
7354: PUSH
7355: LD_INT 30
7357: PUSH
7358: LD_INT 8
7360: PUSH
7361: EMPTY
7362: LIST
7363: LIST
7364: PUSH
7365: EMPTY
7366: LIST
7367: LIST
7368: LIST
7369: LIST
7370: PUSH
7371: EMPTY
7372: LIST
7373: LIST
7374: PPUSH
7375: CALL_OW 69
7379: PUSH
7380: LD_INT 1
7382: ARRAY
7383: PPUSH
7384: CALL_OW 120
// exit ;
7388: GO 7439
// end ; if IsInUnit ( doc [ 1 ] ) then
7390: LD_VAR 0 3
7394: PUSH
7395: LD_INT 1
7397: ARRAY
7398: PPUSH
7399: CALL_OW 310
7403: IFFALSE 7414
// ComExitBuilding ( doc ) ;
7405: LD_VAR 0 3
7409: PPUSH
7410: CALL_OW 122
// wait ( 3 ) ;
7414: LD_INT 3
7416: PPUSH
7417: CALL_OW 67
// ComHeal ( doc , tmp [ 1 ] ) ;
7421: LD_VAR 0 3
7425: PPUSH
7426: LD_VAR 0 2
7430: PUSH
7431: LD_INT 1
7433: ARRAY
7434: PPUSH
7435: CALL_OW 128
// end ;
7439: PPOPN 3
7441: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) do var i , tmp , attacking , areas , area , mech ;
7442: LD_INT 22
7444: PUSH
7445: LD_INT 3
7447: PUSH
7448: EMPTY
7449: LIST
7450: LIST
7451: PUSH
7452: LD_INT 25
7454: PUSH
7455: LD_INT 3
7457: PUSH
7458: EMPTY
7459: LIST
7460: LIST
7461: PUSH
7462: EMPTY
7463: LIST
7464: LIST
7465: PPUSH
7466: CALL_OW 69
7470: PUSH
7471: LD_INT 22
7473: PUSH
7474: LD_INT 3
7476: PUSH
7477: EMPTY
7478: LIST
7479: LIST
7480: PUSH
7481: LD_INT 21
7483: PUSH
7484: LD_INT 2
7486: PUSH
7487: EMPTY
7488: LIST
7489: LIST
7490: PUSH
7491: EMPTY
7492: LIST
7493: LIST
7494: PPUSH
7495: CALL_OW 69
7499: AND
7500: IFFALSE 8259
7502: GO 7504
7504: DISABLE
7505: LD_INT 0
7507: PPUSH
7508: PPUSH
7509: PPUSH
7510: PPUSH
7511: PPUSH
7512: PPUSH
// begin enable ;
7513: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) ;
7514: LD_ADDR_VAR 0 2
7518: PUSH
7519: LD_INT 22
7521: PUSH
7522: LD_INT 3
7524: PUSH
7525: EMPTY
7526: LIST
7527: LIST
7528: PUSH
7529: LD_INT 21
7531: PUSH
7532: LD_INT 2
7534: PUSH
7535: EMPTY
7536: LIST
7537: LIST
7538: PUSH
7539: LD_INT 3
7541: PUSH
7542: LD_INT 58
7544: PUSH
7545: EMPTY
7546: LIST
7547: PUSH
7548: EMPTY
7549: LIST
7550: LIST
7551: PUSH
7552: EMPTY
7553: LIST
7554: LIST
7555: LIST
7556: PPUSH
7557: CALL_OW 69
7561: ST_TO_ADDR
// areas := [ sectorAlpha , sectorBeta , sectorDelta , mainBaseArea ] ;
7562: LD_ADDR_VAR 0 4
7566: PUSH
7567: LD_INT 10
7569: PUSH
7570: LD_INT 11
7572: PUSH
7573: LD_INT 12
7575: PUSH
7576: LD_INT 14
7578: PUSH
7579: EMPTY
7580: LIST
7581: LIST
7582: LIST
7583: LIST
7584: ST_TO_ADDR
// area := 0 ;
7585: LD_ADDR_VAR 0 5
7589: PUSH
7590: LD_INT 0
7592: ST_TO_ADDR
// attacking := false ;
7593: LD_ADDR_VAR 0 3
7597: PUSH
7598: LD_INT 0
7600: ST_TO_ADDR
// for i in tmp do
7601: LD_ADDR_VAR 0 1
7605: PUSH
7606: LD_VAR 0 2
7610: PUSH
7611: FOR_IN
7612: IFFALSE 8040
// begin if GetDistUnits ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) < 10 and not HasTask ( i ) and not GetTag ( i ) and GetLives ( i ) > 650 then
7614: LD_VAR 0 1
7618: PPUSH
7619: LD_INT 22
7621: PUSH
7622: LD_INT 1
7624: PUSH
7625: EMPTY
7626: LIST
7627: LIST
7628: PPUSH
7629: CALL_OW 69
7633: PPUSH
7634: LD_VAR 0 1
7638: PPUSH
7639: CALL_OW 74
7643: PPUSH
7644: CALL_OW 296
7648: PUSH
7649: LD_INT 10
7651: LESS
7652: PUSH
7653: LD_VAR 0 1
7657: PPUSH
7658: CALL_OW 314
7662: NOT
7663: AND
7664: PUSH
7665: LD_VAR 0 1
7669: PPUSH
7670: CALL_OW 110
7674: NOT
7675: AND
7676: PUSH
7677: LD_VAR 0 1
7681: PPUSH
7682: CALL_OW 256
7686: PUSH
7687: LD_INT 650
7689: GREATER
7690: AND
7691: IFFALSE 7735
// begin ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
7693: LD_VAR 0 1
7697: PPUSH
7698: LD_INT 22
7700: PUSH
7701: LD_INT 1
7703: PUSH
7704: EMPTY
7705: LIST
7706: LIST
7707: PPUSH
7708: CALL_OW 69
7712: PPUSH
7713: LD_VAR 0 1
7717: PPUSH
7718: CALL_OW 74
7722: PPUSH
7723: CALL_OW 115
// attacking := true ;
7727: LD_ADDR_VAR 0 3
7731: PUSH
7732: LD_INT 1
7734: ST_TO_ADDR
// end ; if not GetTag ( i ) and GetLives ( i ) < 650 and GetType ( i ) = unit_vehicle then
7735: LD_VAR 0 1
7739: PPUSH
7740: CALL_OW 110
7744: NOT
7745: PUSH
7746: LD_VAR 0 1
7750: PPUSH
7751: CALL_OW 256
7755: PUSH
7756: LD_INT 650
7758: LESS
7759: AND
7760: PUSH
7761: LD_VAR 0 1
7765: PPUSH
7766: CALL_OW 247
7770: PUSH
7771: LD_INT 2
7773: EQUAL
7774: AND
7775: IFFALSE 7804
// begin SetTag ( i , 1 ) ;
7777: LD_VAR 0 1
7781: PPUSH
7782: LD_INT 1
7784: PPUSH
7785: CALL_OW 109
// ComMoveXY ( i , 130 , 139 ) ;
7789: LD_VAR 0 1
7793: PPUSH
7794: LD_INT 130
7796: PPUSH
7797: LD_INT 139
7799: PPUSH
7800: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 130 , 139 ) < 6 then
7804: LD_VAR 0 1
7808: PPUSH
7809: CALL_OW 110
7813: PUSH
7814: LD_INT 1
7816: EQUAL
7817: PUSH
7818: LD_VAR 0 1
7822: PPUSH
7823: LD_INT 130
7825: PPUSH
7826: LD_INT 139
7828: PPUSH
7829: CALL_OW 297
7833: PUSH
7834: LD_INT 6
7836: LESS
7837: AND
7838: IFFALSE 7852
// SetTag ( i , 2 ) ;
7840: LD_VAR 0 1
7844: PPUSH
7845: LD_INT 2
7847: PPUSH
7848: CALL_OW 109
// if GetTag ( i ) = 2 then
7852: LD_VAR 0 1
7856: PPUSH
7857: CALL_OW 110
7861: PUSH
7862: LD_INT 2
7864: EQUAL
7865: IFFALSE 8000
// begin if GetLives ( i ) = 1000 then
7867: LD_VAR 0 1
7871: PPUSH
7872: CALL_OW 256
7876: PUSH
7877: LD_INT 1000
7879: EQUAL
7880: IFFALSE 7896
// SetTag ( i , 3 ) else
7882: LD_VAR 0 1
7886: PPUSH
7887: LD_INT 3
7889: PPUSH
7890: CALL_OW 109
7894: GO 8000
// if IsDrivenBy ( i ) then
7896: LD_VAR 0 1
7900: PPUSH
7901: CALL_OW 311
7905: IFFALSE 8000
// begin mech := IsDrivenBy ( i ) ;
7907: LD_ADDR_VAR 0 6
7911: PUSH
7912: LD_VAR 0 1
7916: PPUSH
7917: CALL_OW 311
7921: ST_TO_ADDR
// if not See ( 1 , mech ) and GetLives ( mech ) < 1000 then
7922: LD_INT 1
7924: PPUSH
7925: LD_VAR 0 6
7929: PPUSH
7930: CALL_OW 292
7934: NOT
7935: PUSH
7936: LD_VAR 0 6
7940: PPUSH
7941: CALL_OW 256
7945: PUSH
7946: LD_INT 1000
7948: LESS
7949: AND
7950: IFFALSE 7964
// SetLives ( mech , 1000 ) ;
7952: LD_VAR 0 6
7956: PPUSH
7957: LD_INT 1000
7959: PPUSH
7960: CALL_OW 234
// if not See ( 1 , i ) then
7964: LD_INT 1
7966: PPUSH
7967: LD_VAR 0 1
7971: PPUSH
7972: CALL_OW 292
7976: NOT
7977: IFFALSE 7991
// SetFuel ( i , 100 ) ;
7979: LD_VAR 0 1
7983: PPUSH
7984: LD_INT 100
7986: PPUSH
7987: CALL_OW 240
// ComRepairVehicleAndReturn ( mech ) ;
7991: LD_VAR 0 6
7995: PPUSH
7996: CALL 71494 0 1
// end ; end ; if GetTag ( i ) = 3 and IsDrivenBy ( i ) then
8000: LD_VAR 0 1
8004: PPUSH
8005: CALL_OW 110
8009: PUSH
8010: LD_INT 3
8012: EQUAL
8013: PUSH
8014: LD_VAR 0 1
8018: PPUSH
8019: CALL_OW 311
8023: AND
8024: IFFALSE 8038
// SetTag ( i , 0 ) ;
8026: LD_VAR 0 1
8030: PPUSH
8031: LD_INT 0
8033: PPUSH
8034: CALL_OW 109
// end ;
8038: GO 7611
8040: POP
8041: POP
// if attacking then
8042: LD_VAR 0 3
8046: IFFALSE 8050
// exit ;
8048: GO 8259
// if can_end and tmp then
8050: LD_EXP 6
8054: PUSH
8055: LD_VAR 0 2
8059: AND
8060: IFFALSE 8115
// begin for i in tmp do
8062: LD_ADDR_VAR 0 1
8066: PUSH
8067: LD_VAR 0 2
8071: PUSH
8072: FOR_IN
8073: IFFALSE 8111
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
8075: LD_VAR 0 1
8079: PPUSH
8080: LD_INT 22
8082: PUSH
8083: LD_INT 1
8085: PUSH
8086: EMPTY
8087: LIST
8088: LIST
8089: PPUSH
8090: CALL_OW 69
8094: PPUSH
8095: LD_VAR 0 1
8099: PPUSH
8100: CALL_OW 74
8104: PPUSH
8105: CALL_OW 115
8109: GO 8072
8111: POP
8112: POP
// exit ;
8113: GO 8259
// end ; for i in areas do
8115: LD_ADDR_VAR 0 1
8119: PUSH
8120: LD_VAR 0 4
8124: PUSH
8125: FOR_IN
8126: IFFALSE 8163
// if FilterUnitsInArea ( i , [ f_side , 1 ] ) then
8128: LD_VAR 0 1
8132: PPUSH
8133: LD_INT 22
8135: PUSH
8136: LD_INT 1
8138: PUSH
8139: EMPTY
8140: LIST
8141: LIST
8142: PPUSH
8143: CALL_OW 70
8147: IFFALSE 8161
// begin area := i ;
8149: LD_ADDR_VAR 0 5
8153: PUSH
8154: LD_VAR 0 1
8158: ST_TO_ADDR
// break ;
8159: GO 8163
// end ;
8161: GO 8125
8163: POP
8164: POP
// if area then
8165: LD_VAR 0 5
8169: IFFALSE 8259
// begin for i in tmp do
8171: LD_ADDR_VAR 0 1
8175: PUSH
8176: LD_VAR 0 2
8180: PUSH
8181: FOR_IN
8182: IFFALSE 8257
// begin if GetTag ( i ) then
8184: LD_VAR 0 1
8188: PPUSH
8189: CALL_OW 110
8193: IFFALSE 8197
// continue ;
8195: GO 8181
// if GetFuel ( i ) < 33 then
8197: LD_VAR 0 1
8201: PPUSH
8202: CALL_OW 261
8206: PUSH
8207: LD_INT 33
8209: LESS
8210: IFFALSE 8224
// SetFuel ( i , 33 ) ;
8212: LD_VAR 0 1
8216: PPUSH
8217: LD_INT 33
8219: PPUSH
8220: CALL_OW 240
// if not IsInArea ( i , area ) then
8224: LD_VAR 0 1
8228: PPUSH
8229: LD_VAR 0 5
8233: PPUSH
8234: CALL_OW 308
8238: NOT
8239: IFFALSE 8255
// ComMoveToArea ( i , area ) ;
8241: LD_VAR 0 1
8245: PPUSH
8246: LD_VAR 0 5
8250: PPUSH
8251: CALL_OW 113
// end ;
8255: GO 8181
8257: POP
8258: POP
// end ; end ;
8259: PPOPN 6
8261: END
// every 15 15$00 trigger Difficulty > 1 do var i , j , un , veh , time , count ;
8262: LD_OWVAR 67
8266: PUSH
8267: LD_INT 1
8269: GREATER
8270: IFFALSE 8555
8272: GO 8274
8274: DISABLE
8275: LD_INT 0
8277: PPUSH
8278: PPUSH
8279: PPUSH
8280: PPUSH
8281: PPUSH
8282: PPUSH
// begin uc_side := 3 ;
8283: LD_ADDR_OWVAR 20
8287: PUSH
8288: LD_INT 3
8290: ST_TO_ADDR
// uc_nation := 3 ;
8291: LD_ADDR_OWVAR 21
8295: PUSH
8296: LD_INT 3
8298: ST_TO_ADDR
// time := [ 9 9$00 , 7 7$00 , 6 6$00 , 5 5$30 ] [ Difficulty ] ;
8299: LD_ADDR_VAR 0 5
8303: PUSH
8304: LD_INT 18900
8306: PUSH
8307: LD_INT 14700
8309: PUSH
8310: LD_INT 12600
8312: PUSH
8313: LD_INT 11550
8315: PUSH
8316: EMPTY
8317: LIST
8318: LIST
8319: LIST
8320: LIST
8321: PUSH
8322: LD_OWVAR 67
8326: ARRAY
8327: ST_TO_ADDR
// count := [ 2 , 2 , 3 , 3 ] [ Difficulty ] ;
8328: LD_ADDR_VAR 0 6
8332: PUSH
8333: LD_INT 2
8335: PUSH
8336: LD_INT 2
8338: PUSH
8339: LD_INT 3
8341: PUSH
8342: LD_INT 3
8344: PUSH
8345: EMPTY
8346: LIST
8347: LIST
8348: LIST
8349: LIST
8350: PUSH
8351: LD_OWVAR 67
8355: ARRAY
8356: ST_TO_ADDR
// for i = 1 to count do
8357: LD_ADDR_VAR 0 1
8361: PUSH
8362: DOUBLE
8363: LD_INT 1
8365: DEC
8366: ST_TO_ADDR
8367: LD_VAR 0 6
8371: PUSH
8372: FOR_TO
8373: IFFALSE 8553
// begin wait ( time ) ;
8375: LD_VAR 0 5
8379: PPUSH
8380: CALL_OW 67
// for j = 1 to rand ( 1 , Difficulty ) do
8384: LD_ADDR_VAR 0 2
8388: PUSH
8389: DOUBLE
8390: LD_INT 1
8392: DEC
8393: ST_TO_ADDR
8394: LD_INT 1
8396: PPUSH
8397: LD_OWVAR 67
8401: PPUSH
8402: CALL_OW 12
8406: PUSH
8407: FOR_TO
8408: IFFALSE 8549
// begin veh := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_machine_gun ] [ i mod 3 + 1 ] , 80 ) ;
8410: LD_ADDR_VAR 0 4
8414: PUSH
8415: LD_INT 3
8417: PPUSH
8418: LD_INT 3
8420: PPUSH
8421: LD_INT 22
8423: PPUSH
8424: LD_INT 1
8426: PPUSH
8427: LD_INT 1
8429: PPUSH
8430: LD_INT 43
8432: PUSH
8433: LD_INT 44
8435: PUSH
8436: LD_INT 42
8438: PUSH
8439: EMPTY
8440: LIST
8441: LIST
8442: LIST
8443: PUSH
8444: LD_VAR 0 1
8448: PUSH
8449: LD_INT 3
8451: MOD
8452: PUSH
8453: LD_INT 1
8455: PLUS
8456: ARRAY
8457: PPUSH
8458: LD_INT 80
8460: PPUSH
8461: CALL 520 0 7
8465: ST_TO_ADDR
// PlaceUnitArea ( veh , southArea , false ) ;
8466: LD_VAR 0 4
8470: PPUSH
8471: LD_INT 13
8473: PPUSH
8474: LD_INT 0
8476: PPUSH
8477: CALL_OW 49
// PrepareHuman ( false , 3 , [ 4 , 5 , 5 ] [ Difficulty ] ) ;
8481: LD_INT 0
8483: PPUSH
8484: LD_INT 3
8486: PPUSH
8487: LD_INT 4
8489: PUSH
8490: LD_INT 5
8492: PUSH
8493: LD_INT 5
8495: PUSH
8496: EMPTY
8497: LIST
8498: LIST
8499: LIST
8500: PUSH
8501: LD_OWVAR 67
8505: ARRAY
8506: PPUSH
8507: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
8511: CALL_OW 44
8515: PPUSH
8516: LD_VAR 0 4
8520: PPUSH
8521: CALL_OW 52
// wait ( 0 0$01 ) ;
8525: LD_INT 35
8527: PPUSH
8528: CALL_OW 67
// ComMoveXY ( veh , 143 , 143 ) ;
8532: LD_VAR 0 4
8536: PPUSH
8537: LD_INT 143
8539: PPUSH
8540: LD_INT 143
8542: PPUSH
8543: CALL_OW 111
// end ;
8547: GO 8407
8549: POP
8550: POP
// end ;
8551: GO 8372
8553: POP
8554: POP
// end ;
8555: PPOPN 6
8557: END
// every 8 8$00 do var i , un , time ;
8558: GO 8560
8560: DISABLE
8561: LD_INT 0
8563: PPUSH
8564: PPUSH
8565: PPUSH
// begin time := [ 3 3$00 , 1 1$00 , 0 0$30 ] ;
8566: LD_ADDR_VAR 0 3
8570: PUSH
8571: LD_INT 6300
8573: PUSH
8574: LD_INT 2100
8576: PUSH
8577: LD_INT 1050
8579: PUSH
8580: EMPTY
8581: LIST
8582: LIST
8583: LIST
8584: ST_TO_ADDR
// wait ( time ) ;
8585: LD_VAR 0 3
8589: PPUSH
8590: CALL_OW 67
// uc_side := 3 ;
8594: LD_ADDR_OWVAR 20
8598: PUSH
8599: LD_INT 3
8601: ST_TO_ADDR
// uc_nation := 3 ;
8602: LD_ADDR_OWVAR 21
8606: PUSH
8607: LD_INT 3
8609: ST_TO_ADDR
// for i = 1 to 2 do
8610: LD_ADDR_VAR 0 1
8614: PUSH
8615: DOUBLE
8616: LD_INT 1
8618: DEC
8619: ST_TO_ADDR
8620: LD_INT 2
8622: PUSH
8623: FOR_TO
8624: IFFALSE 8687
// begin PrepareHuman ( false , 1 , 4 ) ;
8626: LD_INT 0
8628: PPUSH
8629: LD_INT 1
8631: PPUSH
8632: LD_INT 4
8634: PPUSH
8635: CALL_OW 380
// un := CreateHuman ;
8639: LD_ADDR_VAR 0 2
8643: PUSH
8644: CALL_OW 44
8648: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_dep_main ) ;
8649: LD_VAR 0 2
8653: PPUSH
8654: LD_INT 16
8656: PPUSH
8657: CALL_OW 52
// ComExitBuilding ( un ) ;
8661: LD_VAR 0 2
8665: PPUSH
8666: CALL_OW 122
// AddComAgressiveMove ( un , 41 , 76 ) ;
8670: LD_VAR 0 2
8674: PPUSH
8675: LD_INT 41
8677: PPUSH
8678: LD_INT 76
8680: PPUSH
8681: CALL_OW 174
// end ;
8685: GO 8623
8687: POP
8688: POP
// end ; end_of_file
8689: PPOPN 3
8691: END
// export function Action ; begin
8692: LD_INT 0
8694: PPUSH
// CenterNowOnXY ( 28 , 3 ) ;
8695: LD_INT 28
8697: PPUSH
8698: LD_INT 3
8700: PPUSH
8701: CALL_OW 86
// PlaceSeeing ( 41 , 76 , 1 , 10 ) ;
8705: LD_INT 41
8707: PPUSH
8708: LD_INT 76
8710: PPUSH
8711: LD_INT 1
8713: PPUSH
8714: LD_INT 10
8716: PPUSH
8717: CALL_OW 330
// RemoveSeeing ( 41 , 76 , 1 ) ;
8721: LD_INT 41
8723: PPUSH
8724: LD_INT 76
8726: PPUSH
8727: LD_INT 1
8729: PPUSH
8730: CALL_OW 331
// InGameOn ;
8734: CALL_OW 8
// SayRadio ( Harisson , D2-Har-1 ) ;
8738: LD_EXP 19
8742: PPUSH
8743: LD_STRING D2-Har-1
8745: PPUSH
8746: CALL_OW 94
// InGameOff ;
8750: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
8754: LD_STRING M1
8756: PPUSH
8757: CALL_OW 337
// end ;
8761: LD_VAR 0 1
8765: RET
// every 0 0$1 trigger buildings_counter > 1 do var un ;
8766: LD_EXP 4
8770: PUSH
8771: LD_INT 1
8773: GREATER
8774: IFFALSE 8865
8776: GO 8778
8778: DISABLE
8779: LD_INT 0
8781: PPUSH
// begin un := GetRandom ( sex_male ) [ 1 ] ;
8782: LD_ADDR_VAR 0 1
8786: PUSH
8787: LD_INT 1
8789: PPUSH
8790: CALL 608 0 1
8794: PUSH
8795: LD_INT 1
8797: ARRAY
8798: ST_TO_ADDR
// Say ( un , D2a-Sol1-1 ) ;
8799: LD_VAR 0 1
8803: PPUSH
8804: LD_STRING D2a-Sol1-1
8806: PPUSH
8807: CALL_OW 88
// if not un then
8811: LD_VAR 0 1
8815: NOT
8816: IFFALSE 8847
// begin un := GetRandom ( sex_female ) [ 1 ] ;
8818: LD_ADDR_VAR 0 1
8822: PUSH
8823: LD_INT 2
8825: PPUSH
8826: CALL 608 0 1
8830: PUSH
8831: LD_INT 1
8833: ARRAY
8834: ST_TO_ADDR
// Say ( un , D2a-FSol1-1 ) ;
8835: LD_VAR 0 1
8839: PPUSH
8840: LD_STRING D2a-FSol1-1
8842: PPUSH
8843: CALL_OW 88
// end ; if Khatam then
8847: LD_EXP 17
8851: IFFALSE 8865
// Say ( Khatam , D3b-Khat-3 ) ;
8853: LD_EXP 17
8857: PPUSH
8858: LD_STRING D3b-Khat-3
8860: PPUSH
8861: CALL_OW 88
// end ;
8865: PPOPN 1
8867: END
// every 0 0$1 trigger Frank and not Kikuchi and FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , Frank , 7 ] ] ) and IsOk ( Frank ) and not InBattle ( 1 ) and not InBattle ( 4 ) do var i , ape ;
8868: LD_EXP 15
8872: PUSH
8873: LD_EXP 18
8877: NOT
8878: AND
8879: PUSH
8880: LD_INT 22
8882: PUSH
8883: LD_INT 1
8885: PUSH
8886: EMPTY
8887: LIST
8888: LIST
8889: PUSH
8890: LD_INT 91
8892: PUSH
8893: LD_EXP 15
8897: PUSH
8898: LD_INT 7
8900: PUSH
8901: EMPTY
8902: LIST
8903: LIST
8904: LIST
8905: PUSH
8906: EMPTY
8907: LIST
8908: LIST
8909: PPUSH
8910: CALL_OW 69
8914: AND
8915: PUSH
8916: LD_EXP 15
8920: PPUSH
8921: CALL_OW 302
8925: AND
8926: PUSH
8927: LD_INT 1
8929: PPUSH
8930: CALL_OW 463
8934: NOT
8935: AND
8936: PUSH
8937: LD_INT 4
8939: PPUSH
8940: CALL_OW 463
8944: NOT
8945: AND
8946: IFFALSE 9533
8948: GO 8950
8950: DISABLE
8951: LD_INT 0
8953: PPUSH
8954: PPUSH
// begin InGameOn ;
8955: CALL_OW 8
// ape := FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) ;
8959: LD_ADDR_VAR 0 2
8963: PUSH
8964: LD_INT 22
8966: PUSH
8967: LD_INT 0
8969: PUSH
8970: EMPTY
8971: LIST
8972: LIST
8973: PUSH
8974: LD_INT 25
8976: PUSH
8977: LD_INT 12
8979: PUSH
8980: EMPTY
8981: LIST
8982: LIST
8983: PUSH
8984: EMPTY
8985: LIST
8986: LIST
8987: PPUSH
8988: CALL_OW 69
8992: ST_TO_ADDR
// ape := NearestUnitToUnit ( ape , Frank ) ;
8993: LD_ADDR_VAR 0 2
8997: PUSH
8998: LD_VAR 0 2
9002: PPUSH
9003: LD_EXP 15
9007: PPUSH
9008: CALL_OW 74
9012: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_dist , Frank , 20 ] ] ) do
9013: LD_ADDR_VAR 0 1
9017: PUSH
9018: LD_INT 22
9020: PUSH
9021: LD_INT 1
9023: PUSH
9024: EMPTY
9025: LIST
9026: LIST
9027: PUSH
9028: LD_INT 21
9030: PUSH
9031: LD_INT 1
9033: PUSH
9034: EMPTY
9035: LIST
9036: LIST
9037: PUSH
9038: LD_INT 91
9040: PUSH
9041: LD_EXP 15
9045: PUSH
9046: LD_INT 20
9048: PUSH
9049: EMPTY
9050: LIST
9051: LIST
9052: LIST
9053: PUSH
9054: EMPTY
9055: LIST
9056: LIST
9057: LIST
9058: PPUSH
9059: CALL_OW 69
9063: PUSH
9064: FOR_IN
9065: IFFALSE 9083
// ComTurnUnit ( i , Frank ) ;
9067: LD_VAR 0 1
9071: PPUSH
9072: LD_EXP 15
9076: PPUSH
9077: CALL_OW 119
9081: GO 9064
9083: POP
9084: POP
// SetSide ( Frank , 1 ) ;
9085: LD_EXP 15
9089: PPUSH
9090: LD_INT 1
9092: PPUSH
9093: CALL_OW 235
// ComMoveUnit ( JMM , Frank ) ;
9097: LD_EXP 9
9101: PPUSH
9102: LD_EXP 15
9106: PPUSH
9107: CALL_OW 112
// AddComTurnUnit ( JMM , Frank ) ;
9111: LD_EXP 9
9115: PPUSH
9116: LD_EXP 15
9120: PPUSH
9121: CALL_OW 179
// CenterOnUnits ( Frank ) ;
9125: LD_EXP 15
9129: PPUSH
9130: CALL_OW 85
// Say ( Frank , D3a-Frank-1 ) ;
9134: LD_EXP 15
9138: PPUSH
9139: LD_STRING D3a-Frank-1
9141: PPUSH
9142: CALL_OW 88
// ComMoveXY ( ape , 42 , 78 ) ;
9146: LD_VAR 0 2
9150: PPUSH
9151: LD_INT 42
9153: PPUSH
9154: LD_INT 78
9156: PPUSH
9157: CALL_OW 111
// AddComTurnUnit ( ape , Frank ) ;
9161: LD_VAR 0 2
9165: PPUSH
9166: LD_EXP 15
9170: PPUSH
9171: CALL_OW 179
// if Lisa then
9175: LD_EXP 14
9179: IFFALSE 9193
// Say ( Lisa , D3a-Lisa-1 ) ;
9181: LD_EXP 14
9185: PPUSH
9186: LD_STRING D3a-Lisa-1
9188: PPUSH
9189: CALL_OW 88
// Say ( JMM , D3a-JMM-1 ) ;
9193: LD_EXP 9
9197: PPUSH
9198: LD_STRING D3a-JMM-1
9200: PPUSH
9201: CALL_OW 88
// if Cyrus then
9205: LD_EXP 13
9209: IFFALSE 9223
// Say ( Cyrus , D3a-Cyrus-1 ) ;
9211: LD_EXP 13
9215: PPUSH
9216: LD_STRING D3a-Cyrus-1
9218: PPUSH
9219: CALL_OW 88
// if GetRandom ( sex_male ) then
9223: LD_INT 1
9225: PPUSH
9226: CALL 608 0 1
9230: IFFALSE 9251
// Say ( GetRandom ( sex_male ) [ 1 ] , D3a-Sol1-1 ) ;
9232: LD_INT 1
9234: PPUSH
9235: CALL 608 0 1
9239: PUSH
9240: LD_INT 1
9242: ARRAY
9243: PPUSH
9244: LD_STRING D3a-Sol1-1
9246: PPUSH
9247: CALL_OW 88
// if GetRandom ( sex_female ) then
9251: LD_INT 2
9253: PPUSH
9254: CALL 608 0 1
9258: IFFALSE 9279
// Say ( GetRandom ( sex_female ) [ 1 ] , D3a-FSol1-1 ) ;
9260: LD_INT 2
9262: PPUSH
9263: CALL 608 0 1
9267: PUSH
9268: LD_INT 1
9270: ARRAY
9271: PPUSH
9272: LD_STRING D3a-FSol1-1
9274: PPUSH
9275: CALL_OW 88
// if Gladstone then
9279: LD_EXP 16
9283: IFFALSE 9297
// Say ( Gladstone , D3a-Glad-1 ) ;
9285: LD_EXP 16
9289: PPUSH
9290: LD_STRING D3a-Glad-1
9292: PPUSH
9293: CALL_OW 88
// ComMoveXY ( ape , 60 , 113 ) ;
9297: LD_VAR 0 2
9301: PPUSH
9302: LD_INT 60
9304: PPUSH
9305: LD_INT 113
9307: PPUSH
9308: CALL_OW 111
// Say ( Frank , D3a-Frank-2 ) ;
9312: LD_EXP 15
9316: PPUSH
9317: LD_STRING D3a-Frank-2
9319: PPUSH
9320: CALL_OW 88
// ComTurnUnit ( Frank , JMM ) ;
9324: LD_EXP 15
9328: PPUSH
9329: LD_EXP 9
9333: PPUSH
9334: CALL_OW 119
// Say ( JMM , D3a-JMM-2 ) ;
9338: LD_EXP 9
9342: PPUSH
9343: LD_STRING D3a-JMM-2
9345: PPUSH
9346: CALL_OW 88
// RevealFogArea ( 1 , spotArea ) ;
9350: LD_INT 1
9352: PPUSH
9353: LD_INT 4
9355: PPUSH
9356: CALL_OW 332
// CenterOnXY ( 85 , 134 ) ;
9360: LD_INT 85
9362: PPUSH
9363: LD_INT 134
9365: PPUSH
9366: CALL_OW 84
// Say ( Frank , D3a-Frank-3 ) ;
9370: LD_EXP 15
9374: PPUSH
9375: LD_STRING D3a-Frank-3
9377: PPUSH
9378: CALL_OW 88
// Wait ( 0 0$01 ) ;
9382: LD_INT 35
9384: PPUSH
9385: CALL_OW 67
// CenterOnXY ( 166 , 136 ) ;
9389: LD_INT 166
9391: PPUSH
9392: LD_INT 136
9394: PPUSH
9395: CALL_OW 84
// Say ( JMM , D3a-JMM-3 ) ;
9399: LD_EXP 9
9403: PPUSH
9404: LD_STRING D3a-JMM-3
9406: PPUSH
9407: CALL_OW 88
// Wait ( 0 0$01 ) ;
9411: LD_INT 35
9413: PPUSH
9414: CALL_OW 67
// CenterNowOnUnits ( Frank ) ;
9418: LD_EXP 15
9422: PPUSH
9423: CALL_OW 87
// Say ( Frank , D3a-Frank-4 ) ;
9427: LD_EXP 15
9431: PPUSH
9432: LD_STRING D3a-Frank-4
9434: PPUSH
9435: CALL_OW 88
// if Lisa then
9439: LD_EXP 14
9443: IFFALSE 9457
// Say ( Lisa , D3a-Lisa-4 ) ;
9445: LD_EXP 14
9449: PPUSH
9450: LD_STRING D3a-Lisa-4
9452: PPUSH
9453: CALL_OW 88
// Say ( JMM , D3a-JMM-4 ) ;
9457: LD_EXP 9
9461: PPUSH
9462: LD_STRING D3a-JMM-4
9464: PPUSH
9465: CALL_OW 88
// Say ( Frank , D3a-Frank-5 ) ;
9469: LD_EXP 15
9473: PPUSH
9474: LD_STRING D3a-Frank-5
9476: PPUSH
9477: CALL_OW 88
// Say ( JMM , D3a-JMM-5 ) ;
9481: LD_EXP 9
9485: PPUSH
9486: LD_STRING D3a-JMM-5
9488: PPUSH
9489: CALL_OW 88
// Say ( Frank , D3a-Frank-6 ) ;
9493: LD_EXP 15
9497: PPUSH
9498: LD_STRING D3a-Frank-6
9500: PPUSH
9501: CALL_OW 88
// Say ( JMM , D3a-JMM-6 ) ;
9505: LD_EXP 9
9509: PPUSH
9510: LD_STRING D3a-JMM-6
9512: PPUSH
9513: CALL_OW 88
// Say ( Frank , D3a-Frank-7 ) ;
9517: LD_EXP 15
9521: PPUSH
9522: LD_STRING D3a-Frank-7
9524: PPUSH
9525: CALL_OW 88
// InGameOff ;
9529: CALL_OW 9
// end ;
9533: PPOPN 2
9535: END
// every 0 0$1 trigger Kikuchi and not Frank and FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , Kikuchi , 7 ] ] ) and IsOk ( Kikuchi ) and not InBattle ( 1 ) and not InBattle ( 4 ) do
9536: LD_EXP 18
9540: PUSH
9541: LD_EXP 15
9545: NOT
9546: AND
9547: PUSH
9548: LD_INT 22
9550: PUSH
9551: LD_INT 1
9553: PUSH
9554: EMPTY
9555: LIST
9556: LIST
9557: PUSH
9558: LD_INT 91
9560: PUSH
9561: LD_EXP 18
9565: PUSH
9566: LD_INT 7
9568: PUSH
9569: EMPTY
9570: LIST
9571: LIST
9572: LIST
9573: PUSH
9574: EMPTY
9575: LIST
9576: LIST
9577: PPUSH
9578: CALL_OW 69
9582: AND
9583: PUSH
9584: LD_EXP 18
9588: PPUSH
9589: CALL_OW 302
9593: AND
9594: PUSH
9595: LD_INT 1
9597: PPUSH
9598: CALL_OW 463
9602: NOT
9603: AND
9604: PUSH
9605: LD_INT 4
9607: PPUSH
9608: CALL_OW 463
9612: NOT
9613: AND
9614: IFFALSE 9794
9616: GO 9618
9618: DISABLE
// begin InGameOn ;
9619: CALL_OW 8
// ComTurnUnit ( JMM , Kikuchi ) ;
9623: LD_EXP 9
9627: PPUSH
9628: LD_EXP 18
9632: PPUSH
9633: CALL_OW 119
// ComTurnUnit ( Kikuchi , JMM ) ;
9637: LD_EXP 18
9641: PPUSH
9642: LD_EXP 9
9646: PPUSH
9647: CALL_OW 119
// CenterOnUnits ( Kikuchi ) ;
9651: LD_EXP 18
9655: PPUSH
9656: CALL_OW 85
// Say ( Kikuchi , D3b-Yam-1 ) ;
9660: LD_EXP 18
9664: PPUSH
9665: LD_STRING D3b-Yam-1
9667: PPUSH
9668: CALL_OW 88
// Say ( JMM , D3b-JMM-1 ) ;
9672: LD_EXP 9
9676: PPUSH
9677: LD_STRING D3b-JMM-1
9679: PPUSH
9680: CALL_OW 88
// RevealFogArea ( 1 , spotArea ) ;
9684: LD_INT 1
9686: PPUSH
9687: LD_INT 4
9689: PPUSH
9690: CALL_OW 332
// CenterOnXY ( 85 , 134 ) ;
9694: LD_INT 85
9696: PPUSH
9697: LD_INT 134
9699: PPUSH
9700: CALL_OW 84
// Say ( Kikuchi , D3b-Yam-2 ) ;
9704: LD_EXP 18
9708: PPUSH
9709: LD_STRING D3b-Yam-2
9711: PPUSH
9712: CALL_OW 88
// Wait ( 0 0$01 ) ;
9716: LD_INT 35
9718: PPUSH
9719: CALL_OW 67
// Say ( JMM , D3b-JMM-2 ) ;
9723: LD_EXP 9
9727: PPUSH
9728: LD_STRING D3b-JMM-2
9730: PPUSH
9731: CALL_OW 88
// CenterOnXY ( 166 , 136 ) ;
9735: LD_INT 166
9737: PPUSH
9738: LD_INT 136
9740: PPUSH
9741: CALL_OW 84
// Say ( Kikuchi , D3b-Yam-3 ) ;
9745: LD_EXP 18
9749: PPUSH
9750: LD_STRING D3b-Yam-3
9752: PPUSH
9753: CALL_OW 88
// CenterNowOnUnits ( JMM ) ;
9757: LD_EXP 9
9761: PPUSH
9762: CALL_OW 87
// Say ( JMM , D3b-JMM-3a ) ;
9766: LD_EXP 9
9770: PPUSH
9771: LD_STRING D3b-JMM-3a
9773: PPUSH
9774: CALL_OW 88
// SetSide ( Kikuchi , 1 ) ;
9778: LD_EXP 18
9782: PPUSH
9783: LD_INT 1
9785: PPUSH
9786: CALL_OW 235
// InGameOff ;
9790: CALL_OW 9
// end ;
9794: END
// every 0 0$1 trigger FilterUnitsInArea ( massDamageArea , [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] ] ) do var un , x , tw , i ;
9795: LD_INT 7
9797: PPUSH
9798: LD_INT 22
9800: PUSH
9801: LD_INT 1
9803: PUSH
9804: EMPTY
9805: LIST
9806: LIST
9807: PUSH
9808: LD_INT 3
9810: PUSH
9811: LD_INT 24
9813: PUSH
9814: LD_INT 1000
9816: PUSH
9817: EMPTY
9818: LIST
9819: LIST
9820: PUSH
9821: EMPTY
9822: LIST
9823: LIST
9824: PUSH
9825: EMPTY
9826: LIST
9827: LIST
9828: PPUSH
9829: CALL_OW 70
9833: IFFALSE 10289
9835: GO 9837
9837: DISABLE
9838: LD_INT 0
9840: PPUSH
9841: PPUSH
9842: PPUSH
9843: PPUSH
// begin repeat wait ( 0 0$1 ) ;
9844: LD_INT 35
9846: PPUSH
9847: CALL_OW 67
// un := FilterUnitsInArea ( massDamageArea , [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
9851: LD_ADDR_VAR 0 1
9855: PUSH
9856: LD_INT 7
9858: PPUSH
9859: LD_INT 22
9861: PUSH
9862: LD_INT 1
9864: PUSH
9865: EMPTY
9866: LIST
9867: LIST
9868: PUSH
9869: LD_INT 3
9871: PUSH
9872: LD_INT 24
9874: PUSH
9875: LD_INT 1000
9877: PUSH
9878: EMPTY
9879: LIST
9880: LIST
9881: PUSH
9882: EMPTY
9883: LIST
9884: LIST
9885: PUSH
9886: EMPTY
9887: LIST
9888: LIST
9889: PPUSH
9890: CALL_OW 70
9894: ST_TO_ADDR
// if not un then
9895: LD_VAR 0 1
9899: NOT
9900: IFFALSE 9904
// continue ;
9902: GO 9844
// tw := NearbyTowerHasEnergy ( un [ 1 ] ) ;
9904: LD_ADDR_VAR 0 3
9908: PUSH
9909: LD_VAR 0 1
9913: PUSH
9914: LD_INT 1
9916: ARRAY
9917: PPUSH
9918: CALL 2053 0 1
9922: ST_TO_ADDR
// until tw ;
9923: LD_VAR 0 3
9927: IFFALSE 9844
// DialogueOn ;
9929: CALL_OW 6
// CenterNowOnUnits ( tw ) ;
9933: LD_VAR 0 3
9937: PPUSH
9938: CALL_OW 87
// if Lisa then
9942: LD_EXP 14
9946: IFFALSE 9974
// begin Say ( Lisa , D5-Lisa-1 ) ;
9948: LD_EXP 14
9952: PPUSH
9953: LD_STRING D5-Lisa-1
9955: PPUSH
9956: CALL_OW 88
// Say ( JMM , D5-JMM-1a ) ;
9960: LD_EXP 9
9964: PPUSH
9965: LD_STRING D5-JMM-1a
9967: PPUSH
9968: CALL_OW 88
// end else
9972: GO 9986
// Say ( JMM , D5-JMM-1 ) ;
9974: LD_EXP 9
9978: PPUSH
9979: LD_STRING D5-JMM-1
9981: PPUSH
9982: CALL_OW 88
// DialogueOff ;
9986: CALL_OW 7
// while ( true ) do
9990: LD_INT 1
9992: IFFALSE 10048
// begin wait ( 0 0$01 ) ;
9994: LD_INT 35
9996: PPUSH
9997: CALL_OW 67
// x := FilterUnitsExceptArea ( northElectro , [ [ f_btype , b_oil_power ] , [ f_see , 1 ] ] ) ;
10001: LD_ADDR_VAR 0 2
10005: PUSH
10006: LD_INT 8
10008: PPUSH
10009: LD_INT 30
10011: PUSH
10012: LD_INT 26
10014: PUSH
10015: EMPTY
10016: LIST
10017: LIST
10018: PUSH
10019: LD_INT 101
10021: PUSH
10022: LD_INT 1
10024: PUSH
10025: EMPTY
10026: LIST
10027: LIST
10028: PUSH
10029: EMPTY
10030: LIST
10031: LIST
10032: PPUSH
10033: CALL_OW 71
10037: ST_TO_ADDR
// if x then
10038: LD_VAR 0 2
10042: IFFALSE 10046
// break ;
10044: GO 10048
// end ;
10046: GO 9990
// CenterOnUnits ( x [ 1 ] ) ;
10048: LD_VAR 0 2
10052: PUSH
10053: LD_INT 1
10055: ARRAY
10056: PPUSH
10057: CALL_OW 85
// if Frank and GetSide ( Frank ) = 1 then
10061: LD_EXP 15
10065: PUSH
10066: LD_EXP 15
10070: PPUSH
10071: CALL_OW 255
10075: PUSH
10076: LD_INT 1
10078: EQUAL
10079: AND
10080: IFFALSE 10096
// Say ( Frank , D5a-Frank-1 ) else
10082: LD_EXP 15
10086: PPUSH
10087: LD_STRING D5a-Frank-1
10089: PPUSH
10090: CALL_OW 88
10094: GO 10150
// if Kikuchi and GetSide ( Kikuchi ) = 1 then
10096: LD_EXP 18
10100: PUSH
10101: LD_EXP 18
10105: PPUSH
10106: CALL_OW 255
10110: PUSH
10111: LD_INT 1
10113: EQUAL
10114: AND
10115: IFFALSE 10131
// Say ( Kikuchi , D5a-Yam-1 ) else
10117: LD_EXP 18
10121: PPUSH
10122: LD_STRING D5a-Yam-1
10124: PPUSH
10125: CALL_OW 88
10129: GO 10150
// Say ( GetRandom ( sex_male ) [ 1 ] , D5a-Sol1-1 ) ;
10131: LD_INT 1
10133: PPUSH
10134: CALL 608 0 1
10138: PUSH
10139: LD_INT 1
10141: ARRAY
10142: PPUSH
10143: LD_STRING D5a-Sol1-1
10145: PPUSH
10146: CALL_OW 88
// Say ( JMM , D5a-JMM-1 ) ;
10150: LD_EXP 9
10154: PPUSH
10155: LD_STRING D5a-JMM-1
10157: PPUSH
10158: CALL_OW 88
// if Cyrus then
10162: LD_EXP 13
10166: IFFALSE 10180
// Say ( Cyrus , D5a-Cyrus-1 ) ;
10168: LD_EXP 13
10172: PPUSH
10173: LD_STRING D5a-Cyrus-1
10175: PPUSH
10176: CALL_OW 88
// x := false ;
10180: LD_ADDR_VAR 0 2
10184: PUSH
10185: LD_INT 0
10187: ST_TO_ADDR
// while ( true ) do
10188: LD_INT 1
10190: IFFALSE 10277
// begin wait ( 0 0$01 ) ;
10192: LD_INT 35
10194: PPUSH
10195: CALL_OW 67
// for i in FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) diff ru_dep_west do
10199: LD_ADDR_VAR 0 4
10203: PUSH
10204: LD_INT 2
10206: PUSH
10207: LD_INT 30
10209: PUSH
10210: LD_INT 0
10212: PUSH
10213: EMPTY
10214: LIST
10215: LIST
10216: PUSH
10217: LD_INT 30
10219: PUSH
10220: LD_INT 1
10222: PUSH
10223: EMPTY
10224: LIST
10225: LIST
10226: PUSH
10227: EMPTY
10228: LIST
10229: LIST
10230: LIST
10231: PPUSH
10232: CALL_OW 69
10236: PUSH
10237: LD_INT 1
10239: DIFF
10240: PUSH
10241: FOR_IN
10242: IFFALSE 10265
// if BaseNeedEnergy ( i ) then
10244: LD_VAR 0 4
10248: PPUSH
10249: CALL 1178 0 1
10253: IFFALSE 10263
// x := true ;
10255: LD_ADDR_VAR 0 2
10259: PUSH
10260: LD_INT 1
10262: ST_TO_ADDR
10263: GO 10241
10265: POP
10266: POP
// if x then
10267: LD_VAR 0 2
10271: IFFALSE 10275
// break ;
10273: GO 10277
// end ;
10275: GO 10188
// Say ( JMM , D5b-JMM-1 ) ;
10277: LD_EXP 9
10281: PPUSH
10282: LD_STRING D5b-JMM-1
10284: PPUSH
10285: CALL_OW 88
// end ;
10289: PPOPN 4
10291: END
// every 0 0$1 trigger time_to_end [ 1 ] < tick or FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) < 10 do
10292: LD_EXP 5
10296: PUSH
10297: LD_INT 1
10299: ARRAY
10300: PUSH
10301: LD_OWVAR 1
10305: LESS
10306: PUSH
10307: LD_INT 22
10309: PUSH
10310: LD_INT 3
10312: PUSH
10313: EMPTY
10314: LIST
10315: LIST
10316: PUSH
10317: LD_INT 21
10319: PUSH
10320: LD_INT 3
10322: PUSH
10323: EMPTY
10324: LIST
10325: LIST
10326: PUSH
10327: EMPTY
10328: LIST
10329: LIST
10330: PPUSH
10331: CALL_OW 69
10335: PUSH
10336: LD_INT 10
10338: LESS
10339: OR
10340: IFFALSE 10540
10342: GO 10344
10344: DISABLE
// begin if not IsDead ( ru_dep_main ) then
10345: LD_INT 16
10347: PPUSH
10348: CALL_OW 301
10352: NOT
10353: IFFALSE 10376
// begin SayRadio ( Harisson , D3b-Har-3 ) ;
10355: LD_EXP 19
10359: PPUSH
10360: LD_STRING D3b-Har-3
10362: PPUSH
10363: CALL_OW 94
// ChangeMissionObjectives ( M2a ) ;
10367: LD_STRING M2a
10369: PPUSH
10370: CALL_OW 337
// end else
10374: GO 10395
// begin SayRadio ( Harisson , D3b-Har-3a ) ;
10376: LD_EXP 19
10380: PPUSH
10381: LD_STRING D3b-Har-3a
10383: PPUSH
10384: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
10388: LD_STRING M2
10390: PPUSH
10391: CALL_OW 337
// end ; can_end := true ;
10395: LD_ADDR_EXP 6
10399: PUSH
10400: LD_INT 1
10402: ST_TO_ADDR
// SetAreaMapShow ( endArea , 1 ) ;
10403: LD_INT 9
10405: PPUSH
10406: LD_INT 1
10408: PPUSH
10409: CALL_OW 424
// Wait ( 0 0$02 ) ;
10413: LD_INT 70
10415: PPUSH
10416: CALL_OW 67
// if Lisa then
10420: LD_EXP 14
10424: IFFALSE 10438
// Say ( Lisa , D3b-Lisa ) ;
10426: LD_EXP 14
10430: PPUSH
10431: LD_STRING D3b-Lisa
10433: PPUSH
10434: CALL_OW 88
// if Bobby then
10438: LD_EXP 12
10442: IFFALSE 10456
// Say ( Bobby , D3b-Bobby-3 ) ;
10444: LD_EXP 12
10448: PPUSH
10449: LD_STRING D3b-Bobby-3
10451: PPUSH
10452: CALL_OW 88
// if Cyrus then
10456: LD_EXP 13
10460: IFFALSE 10474
// Say ( Cyrus , D3b-Cyrus-3 ) ;
10462: LD_EXP 13
10466: PPUSH
10467: LD_STRING D3b-Cyrus-3
10469: PPUSH
10470: CALL_OW 88
// if Frank and GetSide ( Frank ) = 1 then
10474: LD_EXP 15
10478: PUSH
10479: LD_EXP 15
10483: PPUSH
10484: CALL_OW 255
10488: PUSH
10489: LD_INT 1
10491: EQUAL
10492: AND
10493: IFFALSE 10507
// Say ( Frank , D3b-Frank-3 ) ;
10495: LD_EXP 15
10499: PPUSH
10500: LD_STRING D3b-Frank-3
10502: PPUSH
10503: CALL_OW 88
// if Kikuchi and GetSide ( Kikuchi ) = 1 then
10507: LD_EXP 18
10511: PUSH
10512: LD_EXP 18
10516: PPUSH
10517: CALL_OW 255
10521: PUSH
10522: LD_INT 1
10524: EQUAL
10525: AND
10526: IFFALSE 10540
// Say ( Kikuchi , D3b-Yam-4 ) ;
10528: LD_EXP 18
10532: PPUSH
10533: LD_STRING D3b-Yam-4
10535: PPUSH
10536: CALL_OW 88
// end ;
10540: END
// every 0 0$1 trigger time_to_end [ 2 ] < tick do
10541: LD_EXP 5
10545: PUSH
10546: LD_INT 2
10548: ARRAY
10549: PUSH
10550: LD_OWVAR 1
10554: LESS
10555: IFFALSE 10587
10557: GO 10559
10559: DISABLE
// begin SayRadio ( Harisson , D4-Har-1 ) ;
10560: LD_EXP 19
10564: PPUSH
10565: LD_STRING D4-Har-1
10567: PPUSH
10568: CALL_OW 94
// ChangeMissionObjectives ( M3 ) ;
10572: LD_STRING M3
10574: PPUSH
10575: CALL_OW 337
// must_end := true ;
10579: LD_ADDR_EXP 7
10583: PUSH
10584: LD_INT 1
10586: ST_TO_ADDR
// end ;
10587: END
// every 0 0$01 trigger time_to_end [ 3 ] < tick do
10588: LD_EXP 5
10592: PUSH
10593: LD_INT 3
10595: ARRAY
10596: PUSH
10597: LD_OWVAR 1
10601: LESS
10602: IFFALSE 10633
10604: GO 10606
10606: DISABLE
// begin if not IsDead ( ru_dep_main ) then
10607: LD_INT 16
10609: PPUSH
10610: CALL_OW 301
10614: NOT
10615: IFFALSE 10626
// YouLost ( TimeOut1 ) else
10617: LD_STRING TimeOut1
10619: PPUSH
10620: CALL_OW 104
10624: GO 10633
// YouLost ( TimeOut2 ) ;
10626: LD_STRING TimeOut2
10628: PPUSH
10629: CALL_OW 104
// end ;
10633: END
// every 0 0$1 trigger IsInArea ( JMM , endArea ) and can_end do var wait_on , i , tmp , m1 , m2 , m3 ;
10634: LD_EXP 9
10638: PPUSH
10639: LD_INT 9
10641: PPUSH
10642: CALL_OW 308
10646: PUSH
10647: LD_EXP 6
10651: AND
10652: IFFALSE 11733
10654: GO 10656
10656: DISABLE
10657: LD_INT 0
10659: PPUSH
10660: PPUSH
10661: PPUSH
10662: PPUSH
10663: PPUSH
10664: PPUSH
// begin wait_on := false ;
10665: LD_ADDR_VAR 0 1
10669: PUSH
10670: LD_INT 0
10672: ST_TO_ADDR
// if Count ( FilterPeople ( 1 ) ) > Count ( FilterPeopleArea ( 1 , endArea ) ^ FilterDriversArea ( 1 , endArea ) ) then
10673: LD_INT 1
10675: PPUSH
10676: CALL 1255 0 1
10680: PPUSH
10681: CALL 34428 0 1
10685: PUSH
10686: LD_INT 1
10688: PPUSH
10689: LD_INT 9
10691: PPUSH
10692: CALL 1346 0 2
10696: PUSH
10697: LD_INT 1
10699: PPUSH
10700: LD_INT 9
10702: PPUSH
10703: CALL 1393 0 2
10707: ADD
10708: PPUSH
10709: CALL 34428 0 1
10713: GREATER
10714: IFFALSE 10737
// if Query ( Q1 ) = 1 then
10716: LD_STRING Q1
10718: PPUSH
10719: CALL_OW 97
10723: PUSH
10724: LD_INT 1
10726: EQUAL
10727: IFFALSE 10737
// wait_on := true ;
10729: LD_ADDR_VAR 0 1
10733: PUSH
10734: LD_INT 1
10736: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
10737: LD_INT 35
10739: PPUSH
10740: CALL_OW 67
// until Count ( FilterPeople ( 1 ) ) = Count ( FilterPeopleArea ( 1 , endArea ) union FilterDriversArea ( 1 , endArea ) ) ;
10744: LD_INT 1
10746: PPUSH
10747: CALL 1255 0 1
10751: PPUSH
10752: CALL 34428 0 1
10756: PUSH
10757: LD_INT 1
10759: PPUSH
10760: LD_INT 9
10762: PPUSH
10763: CALL 1346 0 2
10767: PUSH
10768: LD_INT 1
10770: PPUSH
10771: LD_INT 9
10773: PPUSH
10774: CALL 1393 0 2
10778: UNION
10779: PPUSH
10780: CALL 34428 0 1
10784: EQUAL
10785: IFFALSE 10737
// DialogueOn ;
10787: CALL_OW 6
// CenterNowOnUnits ( JMM ) ;
10791: LD_EXP 9
10795: PPUSH
10796: CALL_OW 87
// Say ( JMM , D6-JMM-1 ) ;
10800: LD_EXP 9
10804: PPUSH
10805: LD_STRING D6-JMM-1
10807: PPUSH
10808: CALL_OW 88
// SayRadio ( Harisson , D6-Har-1 ) ;
10812: LD_EXP 19
10816: PPUSH
10817: LD_STRING D6-Har-1
10819: PPUSH
10820: CALL_OW 94
// Say ( JMM , D6-JMM-2 ) ;
10824: LD_EXP 9
10828: PPUSH
10829: LD_STRING D6-JMM-2
10831: PPUSH
10832: CALL_OW 88
// SayRadio ( Harisson , D6-Har-2 ) ;
10836: LD_EXP 19
10840: PPUSH
10841: LD_STRING D6-Har-2
10843: PPUSH
10844: CALL_OW 94
// Say ( JMM , D6-JMM-3 ) ;
10848: LD_EXP 9
10852: PPUSH
10853: LD_STRING D6-JMM-3
10855: PPUSH
10856: CALL_OW 88
// SayRadio ( Harisson , D6-Har-3 ) ;
10860: LD_EXP 19
10864: PPUSH
10865: LD_STRING D6-Har-3
10867: PPUSH
10868: CALL_OW 94
// Say ( JMM , D6-JMM-4 ) ;
10872: LD_EXP 9
10876: PPUSH
10877: LD_STRING D6-JMM-4
10879: PPUSH
10880: CALL_OW 88
// SayRadio ( Harisson , D6-Har-4 ) ;
10884: LD_EXP 19
10888: PPUSH
10889: LD_STRING D6-Har-4
10891: PPUSH
10892: CALL_OW 94
// Say ( JMM , D6-JMM-5 ) ;
10896: LD_EXP 9
10900: PPUSH
10901: LD_STRING D6-JMM-5
10903: PPUSH
10904: CALL_OW 88
// DialogueOff ;
10908: CALL_OW 7
// m1 := false ;
10912: LD_ADDR_VAR 0 4
10916: PUSH
10917: LD_INT 0
10919: ST_TO_ADDR
// m2 := false ;
10920: LD_ADDR_VAR 0 5
10924: PUSH
10925: LD_INT 0
10927: ST_TO_ADDR
// m3 := false ;
10928: LD_ADDR_VAR 0 6
10932: PUSH
10933: LD_INT 0
10935: ST_TO_ADDR
// tmp := FilterBuildings ( 3 ) ;
10936: LD_ADDR_VAR 0 3
10940: PUSH
10941: LD_INT 3
10943: PPUSH
10944: CALL 1524 0 1
10948: ST_TO_ADDR
// if tmp >= 35 then
10949: LD_VAR 0 3
10953: PUSH
10954: LD_INT 35
10956: GREATEREQUAL
10957: IFFALSE 10994
// begin AddMedal ( Destroy1 , - 1 ) ;
10959: LD_STRING Destroy1
10961: PPUSH
10962: LD_INT 1
10964: NEG
10965: PPUSH
10966: CALL_OW 101
// AddMedal ( Destroy2 , - 1 ) ;
10970: LD_STRING Destroy2
10972: PPUSH
10973: LD_INT 1
10975: NEG
10976: PPUSH
10977: CALL_OW 101
// AddMedal ( Destroy3 , - 1 ) ;
10981: LD_STRING Destroy3
10983: PPUSH
10984: LD_INT 1
10986: NEG
10987: PPUSH
10988: CALL_OW 101
// end else
10992: GO 11105
// begin AddMedal ( Destroy1 , 1 ) ;
10994: LD_STRING Destroy1
10996: PPUSH
10997: LD_INT 1
10999: PPUSH
11000: CALL_OW 101
// m1 := true ;
11004: LD_ADDR_VAR 0 4
11008: PUSH
11009: LD_INT 1
11011: ST_TO_ADDR
// if tmp >= 25 then
11012: LD_VAR 0 3
11016: PUSH
11017: LD_INT 25
11019: GREATEREQUAL
11020: IFFALSE 11046
// begin AddMedal ( Destroy2 , - 1 ) ;
11022: LD_STRING Destroy2
11024: PPUSH
11025: LD_INT 1
11027: NEG
11028: PPUSH
11029: CALL_OW 101
// AddMedal ( Destroy3 , - 1 ) ;
11033: LD_STRING Destroy3
11035: PPUSH
11036: LD_INT 1
11038: NEG
11039: PPUSH
11040: CALL_OW 101
// end else
11044: GO 11105
// begin AddMedal ( Destroy2 , 1 ) ;
11046: LD_STRING Destroy2
11048: PPUSH
11049: LD_INT 1
11051: PPUSH
11052: CALL_OW 101
// m2 := true ;
11056: LD_ADDR_VAR 0 5
11060: PUSH
11061: LD_INT 1
11063: ST_TO_ADDR
// if tmp >= 15 then
11064: LD_VAR 0 3
11068: PUSH
11069: LD_INT 15
11071: GREATEREQUAL
11072: IFFALSE 11087
// AddMedal ( Destroy3 , - 1 ) else
11074: LD_STRING Destroy3
11076: PPUSH
11077: LD_INT 1
11079: NEG
11080: PPUSH
11081: CALL_OW 101
11085: GO 11105
// begin AddMedal ( Destroy3 , 1 ) ;
11087: LD_STRING Destroy3
11089: PPUSH
11090: LD_INT 1
11092: PPUSH
11093: CALL_OW 101
// m3 := true ;
11097: LD_ADDR_VAR 0 6
11101: PUSH
11102: LD_INT 1
11104: ST_TO_ADDR
// end ; end ; end ; if tick <= 32 32$00 then
11105: LD_OWVAR 1
11109: PUSH
11110: LD_INT 67200
11112: LESSEQUAL
11113: IFFALSE 11122
// SetAchievement ( ACH_ASPEED_7 ) ;
11115: LD_STRING ACH_ASPEED_7
11117: PPUSH
11118: CALL_OW 543
// if m1 and m2 and m3 and Difficulty >= 3 then
11122: LD_VAR 0 4
11126: PUSH
11127: LD_VAR 0 5
11131: AND
11132: PUSH
11133: LD_VAR 0 6
11137: AND
11138: PUSH
11139: LD_OWVAR 67
11143: PUSH
11144: LD_INT 3
11146: GREATEREQUAL
11147: AND
11148: IFFALSE 11160
// SetAchievementEX ( ACH_AMER , 7 ) ;
11150: LD_STRING ACH_AMER
11152: PPUSH
11153: LD_INT 7
11155: PPUSH
11156: CALL_OW 564
// GiveMedals ( MAIN ) ;
11160: LD_STRING MAIN
11162: PPUSH
11163: CALL_OW 102
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] ] ) ;
11167: LD_ADDR_VAR 0 3
11171: PUSH
11172: LD_INT 22
11174: PUSH
11175: LD_INT 1
11177: PUSH
11178: EMPTY
11179: LIST
11180: LIST
11181: PUSH
11182: LD_INT 23
11184: PUSH
11185: LD_INT 1
11187: PUSH
11188: EMPTY
11189: LIST
11190: LIST
11191: PUSH
11192: EMPTY
11193: LIST
11194: LIST
11195: PPUSH
11196: CALL_OW 69
11200: ST_TO_ADDR
// RewardPeople ( tmp ) ;
11201: LD_VAR 0 3
11205: PPUSH
11206: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
11210: LD_EXP 9
11214: PPUSH
11215: LD_EXP 3
11219: PUSH
11220: LD_STRING JMM
11222: STR
11223: PPUSH
11224: CALL_OW 38
// if Brown in tmp then
11228: LD_EXP 10
11232: PUSH
11233: LD_VAR 0 3
11237: IN
11238: IFFALSE 11258
// SaveCharacters ( Brown , mission_prefix & Brown ) ;
11240: LD_EXP 10
11244: PPUSH
11245: LD_EXP 3
11249: PUSH
11250: LD_STRING Brown
11252: STR
11253: PPUSH
11254: CALL_OW 38
// if Donaldson in tmp then
11258: LD_EXP 11
11262: PUSH
11263: LD_VAR 0 3
11267: IN
11268: IFFALSE 11288
// SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
11270: LD_EXP 11
11274: PPUSH
11275: LD_EXP 3
11279: PUSH
11280: LD_STRING Donaldson
11282: STR
11283: PPUSH
11284: CALL_OW 38
// if Bobby in tmp then
11288: LD_EXP 12
11292: PUSH
11293: LD_VAR 0 3
11297: IN
11298: IFFALSE 11318
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
11300: LD_EXP 12
11304: PPUSH
11305: LD_EXP 3
11309: PUSH
11310: LD_STRING Bobby
11312: STR
11313: PPUSH
11314: CALL_OW 38
// if Cyrus in tmp then
11318: LD_EXP 13
11322: PUSH
11323: LD_VAR 0 3
11327: IN
11328: IFFALSE 11348
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
11330: LD_EXP 13
11334: PPUSH
11335: LD_EXP 3
11339: PUSH
11340: LD_STRING Cyrus
11342: STR
11343: PPUSH
11344: CALL_OW 38
// if Lisa in tmp then
11348: LD_EXP 14
11352: PUSH
11353: LD_VAR 0 3
11357: IN
11358: IFFALSE 11378
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
11360: LD_EXP 14
11364: PPUSH
11365: LD_EXP 3
11369: PUSH
11370: LD_STRING Lisa
11372: STR
11373: PPUSH
11374: CALL_OW 38
// if Frank in tmp then
11378: LD_EXP 15
11382: PUSH
11383: LD_VAR 0 3
11387: IN
11388: IFFALSE 11408
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
11390: LD_EXP 15
11394: PPUSH
11395: LD_EXP 3
11399: PUSH
11400: LD_STRING Frank
11402: STR
11403: PPUSH
11404: CALL_OW 38
// if Gladstone in tmp then
11408: LD_EXP 16
11412: PUSH
11413: LD_VAR 0 3
11417: IN
11418: IFFALSE 11438
// SaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
11420: LD_EXP 16
11424: PPUSH
11425: LD_EXP 3
11429: PUSH
11430: LD_STRING Gladstone
11432: STR
11433: PPUSH
11434: CALL_OW 38
// if Khatam in tmp then
11438: LD_EXP 17
11442: PUSH
11443: LD_VAR 0 3
11447: IN
11448: IFFALSE 11468
// SaveCharacters ( Khatam , mission_prefix & Khatam ) ;
11450: LD_EXP 17
11454: PPUSH
11455: LD_EXP 3
11459: PUSH
11460: LD_STRING Khatam
11462: STR
11463: PPUSH
11464: CALL_OW 38
// if Kikuchi in tmp then
11468: LD_EXP 18
11472: PUSH
11473: LD_VAR 0 3
11477: IN
11478: IFFALSE 11498
// SaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
11480: LD_EXP 18
11484: PPUSH
11485: LD_EXP 3
11489: PUSH
11490: LD_STRING Kikuchi
11492: STR
11493: PPUSH
11494: CALL_OW 38
// SaveCharacters ( tmp diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam ] , mission_prefix & others ) ;
11498: LD_VAR 0 3
11502: PUSH
11503: LD_EXP 9
11507: PUSH
11508: LD_EXP 10
11512: PUSH
11513: LD_EXP 11
11517: PUSH
11518: LD_EXP 12
11522: PUSH
11523: LD_EXP 13
11527: PUSH
11528: LD_EXP 14
11532: PUSH
11533: LD_EXP 15
11537: PUSH
11538: LD_EXP 16
11542: PUSH
11543: LD_EXP 18
11547: PUSH
11548: LD_EXP 17
11552: PUSH
11553: EMPTY
11554: LIST
11555: LIST
11556: LIST
11557: LIST
11558: LIST
11559: LIST
11560: LIST
11561: LIST
11562: LIST
11563: LIST
11564: DIFF
11565: PPUSH
11566: LD_EXP 3
11570: PUSH
11571: LD_STRING others
11573: STR
11574: PPUSH
11575: CALL_OW 38
// SaveVariable ( tick , 07_time ) ;
11579: LD_OWVAR 1
11583: PPUSH
11584: LD_STRING 07_time
11586: PPUSH
11587: CALL_OW 39
// tmp := [ ] ;
11591: LD_ADDR_VAR 0 3
11595: PUSH
11596: EMPTY
11597: ST_TO_ADDR
// for i in FilterUnitsInArea ( endArea , [ [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_vehicle ] ] ] ) do
11598: LD_ADDR_VAR 0 2
11602: PUSH
11603: LD_INT 9
11605: PPUSH
11606: LD_INT 22
11608: PUSH
11609: LD_INT 1
11611: PUSH
11612: EMPTY
11613: LIST
11614: LIST
11615: PUSH
11616: LD_INT 23
11618: PUSH
11619: LD_INT 1
11621: PUSH
11622: EMPTY
11623: LIST
11624: LIST
11625: PUSH
11626: LD_INT 21
11628: PUSH
11629: LD_INT 2
11631: PUSH
11632: EMPTY
11633: LIST
11634: LIST
11635: PUSH
11636: EMPTY
11637: LIST
11638: LIST
11639: LIST
11640: PUSH
11641: EMPTY
11642: LIST
11643: PPUSH
11644: CALL_OW 70
11648: PUSH
11649: FOR_IN
11650: IFFALSE 11715
// tmp := Join ( tmp , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ) ;
11652: LD_ADDR_VAR 0 3
11656: PUSH
11657: LD_VAR 0 3
11661: PPUSH
11662: LD_VAR 0 2
11666: PPUSH
11667: CALL_OW 265
11671: PUSH
11672: LD_VAR 0 2
11676: PPUSH
11677: CALL_OW 262
11681: PUSH
11682: LD_VAR 0 2
11686: PPUSH
11687: CALL_OW 263
11691: PUSH
11692: LD_VAR 0 2
11696: PPUSH
11697: CALL_OW 264
11701: PUSH
11702: EMPTY
11703: LIST
11704: LIST
11705: LIST
11706: LIST
11707: PPUSH
11708: CALL 69794 0 2
11712: ST_TO_ADDR
11713: GO 11649
11715: POP
11716: POP
// SaveVariable ( tmp , 07_vehicles ) ;
11717: LD_VAR 0 3
11721: PPUSH
11722: LD_STRING 07_vehicles
11724: PPUSH
11725: CALL_OW 39
// YouWin ;
11729: CALL_OW 103
// end ; end_of_file
11733: PPOPN 6
11735: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
11736: LD_VAR 0 1
11740: PPUSH
11741: CALL 28037 0 1
// if un = JMM then
11745: LD_VAR 0 1
11749: PUSH
11750: LD_EXP 9
11754: EQUAL
11755: IFFALSE 11764
// YouLost ( JMM ) ;
11757: LD_STRING JMM
11759: PPUSH
11760: CALL_OW 104
// if GetType ( un ) = unit_building then
11764: LD_VAR 0 1
11768: PPUSH
11769: CALL_OW 247
11773: PUSH
11774: LD_INT 3
11776: EQUAL
11777: IFFALSE 11793
// buildings_counter := buildings_counter + 1 ;
11779: LD_ADDR_EXP 4
11783: PUSH
11784: LD_EXP 4
11788: PUSH
11789: LD_INT 1
11791: PLUS
11792: ST_TO_ADDR
// if un in FilterUnitsInArea ( baseArea , [ f_or , [ f_btype , b_turret ] , [ f_btype , b_bunker ] ] ) then
11793: LD_VAR 0 1
11797: PUSH
11798: LD_INT 6
11800: PPUSH
11801: LD_INT 2
11803: PUSH
11804: LD_INT 30
11806: PUSH
11807: LD_INT 33
11809: PUSH
11810: EMPTY
11811: LIST
11812: LIST
11813: PUSH
11814: LD_INT 30
11816: PUSH
11817: LD_INT 32
11819: PUSH
11820: EMPTY
11821: LIST
11822: LIST
11823: PUSH
11824: EMPTY
11825: LIST
11826: LIST
11827: LIST
11828: PPUSH
11829: CALL_OW 70
11833: IN
11834: IFFALSE 11893
// ru_rebuild_list := ru_rebuild_list ^ [ GetBType ( un ) , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ;
11836: LD_ADDR_EXP 20
11840: PUSH
11841: LD_EXP 20
11845: PUSH
11846: LD_VAR 0 1
11850: PPUSH
11851: CALL_OW 266
11855: PUSH
11856: LD_VAR 0 1
11860: PPUSH
11861: CALL_OW 250
11865: PUSH
11866: LD_VAR 0 1
11870: PPUSH
11871: CALL_OW 251
11875: PUSH
11876: LD_VAR 0 1
11880: PPUSH
11881: CALL_OW 254
11885: PUSH
11886: EMPTY
11887: LIST
11888: LIST
11889: LIST
11890: LIST
11891: ADD
11892: ST_TO_ADDR
// if un = ru_dep_main then
11893: LD_VAR 0 1
11897: PUSH
11898: LD_INT 16
11900: EQUAL
11901: IFFALSE 11910
// ChangeMissionObjectives ( M1a ) ;
11903: LD_STRING M1a
11905: PPUSH
11906: CALL_OW 337
// if GetType ( un ) = unit_human and GetSide ( un ) = 3 then
11910: LD_VAR 0 1
11914: PPUSH
11915: CALL_OW 247
11919: PUSH
11920: LD_INT 1
11922: EQUAL
11923: PUSH
11924: LD_VAR 0 1
11928: PPUSH
11929: CALL_OW 255
11933: PUSH
11934: LD_INT 3
11936: EQUAL
11937: AND
11938: IFFALSE 11954
// kill_counter := kill_counter + 1 ;
11940: LD_ADDR_EXP 8
11944: PUSH
11945: LD_EXP 8
11949: PUSH
11950: LD_INT 1
11952: PLUS
11953: ST_TO_ADDR
// end ;
11954: PPOPN 1
11956: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
11957: LD_VAR 0 1
11961: PPUSH
11962: LD_VAR 0 2
11966: PPUSH
11967: CALL 28157 0 2
// end ;
11971: PPOPN 2
11973: END
// on UnitGoesToRed ( un ) do begin if GetBType ( un ) = b_bunker and GetTag ( un ) = 7 then
11974: LD_VAR 0 1
11978: PPUSH
11979: CALL_OW 266
11983: PUSH
11984: LD_INT 32
11986: EQUAL
11987: PUSH
11988: LD_VAR 0 1
11992: PPUSH
11993: CALL_OW 110
11997: PUSH
11998: LD_INT 7
12000: EQUAL
12001: AND
12002: IFFALSE 12016
// SetTag ( un , 0 ) ;
12004: LD_VAR 0 1
12008: PPUSH
12009: LD_INT 0
12011: PPUSH
12012: CALL_OW 109
// end ;
12016: PPOPN 1
12018: END
// on BuildingStarted ( b , builder ) do var i ;
12019: LD_INT 0
12021: PPUSH
// begin if GetSide ( b ) = 3 then
12022: LD_VAR 0 1
12026: PPUSH
12027: CALL_OW 255
12031: PUSH
12032: LD_INT 3
12034: EQUAL
12035: IFFALSE 12075
// for i = 1 to 4 do
12037: LD_ADDR_VAR 0 3
12041: PUSH
12042: DOUBLE
12043: LD_INT 1
12045: DEC
12046: ST_TO_ADDR
12047: LD_INT 4
12049: PUSH
12050: FOR_TO
12051: IFFALSE 12073
// ru_rebuild_list := Delete ( ru_rebuild_list , 1 ) ;
12053: LD_ADDR_EXP 20
12057: PUSH
12058: LD_EXP 20
12062: PPUSH
12063: LD_INT 1
12065: PPUSH
12066: CALL_OW 3
12070: ST_TO_ADDR
12071: GO 12050
12073: POP
12074: POP
// end ;
12075: PPOPN 3
12077: END
// on BuildingComplete ( b ) do if GetBType ( b ) in [ b_bunker , b_turret ] then
12078: LD_VAR 0 1
12082: PPUSH
12083: CALL_OW 266
12087: PUSH
12088: LD_INT 32
12090: PUSH
12091: LD_INT 33
12093: PUSH
12094: EMPTY
12095: LIST
12096: LIST
12097: IN
12098: IFFALSE 12112
// ComPlaceWeapon ( b , ru_gatling_gun ) ;
12100: LD_VAR 0 1
12104: PPUSH
12105: LD_INT 43
12107: PPUSH
12108: CALL_OW 148
12112: PPOPN 1
12114: END
// on LeaveBuilding ( b , un ) do begin if b in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) then
12115: LD_VAR 0 1
12119: PUSH
12120: LD_INT 22
12122: PUSH
12123: LD_INT 3
12125: PUSH
12126: EMPTY
12127: LIST
12128: LIST
12129: PUSH
12130: LD_INT 2
12132: PUSH
12133: LD_INT 30
12135: PUSH
12136: LD_INT 31
12138: PUSH
12139: EMPTY
12140: LIST
12141: LIST
12142: PUSH
12143: LD_INT 30
12145: PUSH
12146: LD_INT 32
12148: PUSH
12149: EMPTY
12150: LIST
12151: LIST
12152: PUSH
12153: EMPTY
12154: LIST
12155: LIST
12156: LIST
12157: PUSH
12158: EMPTY
12159: LIST
12160: LIST
12161: PPUSH
12162: CALL_OW 69
12166: IN
12167: IFFALSE 12189
// GoToAnotherTower ( un , b , 134 , 136 ) ;
12169: LD_VAR 0 2
12173: PPUSH
12174: LD_VAR 0 1
12178: PPUSH
12179: LD_INT 134
12181: PPUSH
12182: LD_INT 136
12184: PPUSH
12185: CALL 838 0 4
// end ;
12189: PPOPN 2
12191: END
// on EnterBuilding ( b , un ) do begin if b in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) then
12192: LD_VAR 0 1
12196: PUSH
12197: LD_INT 22
12199: PUSH
12200: LD_INT 3
12202: PUSH
12203: EMPTY
12204: LIST
12205: LIST
12206: PUSH
12207: LD_INT 30
12209: PUSH
12210: LD_INT 32
12212: PUSH
12213: EMPTY
12214: LIST
12215: LIST
12216: PUSH
12217: EMPTY
12218: LIST
12219: LIST
12220: PPUSH
12221: CALL_OW 69
12225: IN
12226: IFFALSE 12240
// SetTag ( b , 0 ) ;
12228: LD_VAR 0 1
12232: PPUSH
12233: LD_INT 0
12235: PPUSH
12236: CALL_OW 109
// end ; end_of_file end_of_file
12240: PPOPN 2
12242: END
// export globalGameSaveCounter ; every 0 0$1 do
12243: GO 12245
12245: DISABLE
// begin enable ;
12246: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
12247: LD_STRING updateTimer(
12249: PUSH
12250: LD_OWVAR 1
12254: STR
12255: PUSH
12256: LD_STRING );
12258: STR
12259: PPUSH
12260: CALL_OW 559
// end ;
12264: END
// every 0 0$1 do
12265: GO 12267
12267: DISABLE
// begin globalGameSaveCounter := 0 ;
12268: LD_ADDR_EXP 21
12272: PUSH
12273: LD_INT 0
12275: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
12276: LD_STRING setGameSaveCounter(0)
12278: PPUSH
12279: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
12283: LD_STRING initStreamRollete();
12285: PPUSH
12286: CALL_OW 559
// InitStreamMode ;
12290: CALL 13616 0 0
// DefineStreamItems ( false ) ;
12294: LD_INT 0
12296: PPUSH
12297: CALL 14080 0 1
// end ;
12301: END
// export function SOS_MapStart ( ) ; begin
12302: LD_INT 0
12304: PPUSH
// if streamModeActive then
12305: LD_EXP 22
12309: IFFALSE 12318
// DefineStreamItems ( true ) ;
12311: LD_INT 1
12313: PPUSH
12314: CALL 14080 0 1
// UpdateLuaVariables ( ) ;
12318: CALL 12335 0 0
// UpdateFactoryWaypoints ( ) ;
12322: CALL 26941 0 0
// UpdateWarehouseGatheringPoints ( ) ;
12326: CALL 27198 0 0
// end ;
12330: LD_VAR 0 1
12334: RET
// function UpdateLuaVariables ( ) ; begin
12335: LD_INT 0
12337: PPUSH
// if globalGameSaveCounter then
12338: LD_EXP 21
12342: IFFALSE 12376
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
12344: LD_ADDR_EXP 21
12348: PUSH
12349: LD_EXP 21
12353: PPUSH
12354: CALL 71155 0 1
12358: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
12359: LD_STRING setGameSaveCounter(
12361: PUSH
12362: LD_EXP 21
12366: STR
12367: PUSH
12368: LD_STRING )
12370: STR
12371: PPUSH
12372: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
12376: LD_STRING setGameDifficulty(
12378: PUSH
12379: LD_OWVAR 67
12383: STR
12384: PUSH
12385: LD_STRING )
12387: STR
12388: PPUSH
12389: CALL_OW 559
// end ;
12393: LD_VAR 0 1
12397: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
12398: LD_INT 0
12400: PPUSH
// if p2 = stream_mode then
12401: LD_VAR 0 2
12405: PUSH
12406: LD_INT 100
12408: EQUAL
12409: IFFALSE 13412
// begin if not StreamModeActive then
12411: LD_EXP 22
12415: NOT
12416: IFFALSE 12426
// StreamModeActive := true ;
12418: LD_ADDR_EXP 22
12422: PUSH
12423: LD_INT 1
12425: ST_TO_ADDR
// if p3 = 0 then
12426: LD_VAR 0 3
12430: PUSH
12431: LD_INT 0
12433: EQUAL
12434: IFFALSE 12440
// InitStreamMode ;
12436: CALL 13616 0 0
// if p3 = 1 then
12440: LD_VAR 0 3
12444: PUSH
12445: LD_INT 1
12447: EQUAL
12448: IFFALSE 12458
// sRocket := true ;
12450: LD_ADDR_EXP 27
12454: PUSH
12455: LD_INT 1
12457: ST_TO_ADDR
// if p3 = 2 then
12458: LD_VAR 0 3
12462: PUSH
12463: LD_INT 2
12465: EQUAL
12466: IFFALSE 12476
// sSpeed := true ;
12468: LD_ADDR_EXP 26
12472: PUSH
12473: LD_INT 1
12475: ST_TO_ADDR
// if p3 = 3 then
12476: LD_VAR 0 3
12480: PUSH
12481: LD_INT 3
12483: EQUAL
12484: IFFALSE 12494
// sEngine := true ;
12486: LD_ADDR_EXP 28
12490: PUSH
12491: LD_INT 1
12493: ST_TO_ADDR
// if p3 = 4 then
12494: LD_VAR 0 3
12498: PUSH
12499: LD_INT 4
12501: EQUAL
12502: IFFALSE 12512
// sSpec := true ;
12504: LD_ADDR_EXP 25
12508: PUSH
12509: LD_INT 1
12511: ST_TO_ADDR
// if p3 = 5 then
12512: LD_VAR 0 3
12516: PUSH
12517: LD_INT 5
12519: EQUAL
12520: IFFALSE 12530
// sLevel := true ;
12522: LD_ADDR_EXP 29
12526: PUSH
12527: LD_INT 1
12529: ST_TO_ADDR
// if p3 = 6 then
12530: LD_VAR 0 3
12534: PUSH
12535: LD_INT 6
12537: EQUAL
12538: IFFALSE 12548
// sArmoury := true ;
12540: LD_ADDR_EXP 30
12544: PUSH
12545: LD_INT 1
12547: ST_TO_ADDR
// if p3 = 7 then
12548: LD_VAR 0 3
12552: PUSH
12553: LD_INT 7
12555: EQUAL
12556: IFFALSE 12566
// sRadar := true ;
12558: LD_ADDR_EXP 31
12562: PUSH
12563: LD_INT 1
12565: ST_TO_ADDR
// if p3 = 8 then
12566: LD_VAR 0 3
12570: PUSH
12571: LD_INT 8
12573: EQUAL
12574: IFFALSE 12584
// sBunker := true ;
12576: LD_ADDR_EXP 32
12580: PUSH
12581: LD_INT 1
12583: ST_TO_ADDR
// if p3 = 9 then
12584: LD_VAR 0 3
12588: PUSH
12589: LD_INT 9
12591: EQUAL
12592: IFFALSE 12602
// sHack := true ;
12594: LD_ADDR_EXP 33
12598: PUSH
12599: LD_INT 1
12601: ST_TO_ADDR
// if p3 = 10 then
12602: LD_VAR 0 3
12606: PUSH
12607: LD_INT 10
12609: EQUAL
12610: IFFALSE 12620
// sFire := true ;
12612: LD_ADDR_EXP 34
12616: PUSH
12617: LD_INT 1
12619: ST_TO_ADDR
// if p3 = 11 then
12620: LD_VAR 0 3
12624: PUSH
12625: LD_INT 11
12627: EQUAL
12628: IFFALSE 12638
// sRefresh := true ;
12630: LD_ADDR_EXP 35
12634: PUSH
12635: LD_INT 1
12637: ST_TO_ADDR
// if p3 = 12 then
12638: LD_VAR 0 3
12642: PUSH
12643: LD_INT 12
12645: EQUAL
12646: IFFALSE 12656
// sExp := true ;
12648: LD_ADDR_EXP 36
12652: PUSH
12653: LD_INT 1
12655: ST_TO_ADDR
// if p3 = 13 then
12656: LD_VAR 0 3
12660: PUSH
12661: LD_INT 13
12663: EQUAL
12664: IFFALSE 12674
// sDepot := true ;
12666: LD_ADDR_EXP 37
12670: PUSH
12671: LD_INT 1
12673: ST_TO_ADDR
// if p3 = 14 then
12674: LD_VAR 0 3
12678: PUSH
12679: LD_INT 14
12681: EQUAL
12682: IFFALSE 12692
// sFlag := true ;
12684: LD_ADDR_EXP 38
12688: PUSH
12689: LD_INT 1
12691: ST_TO_ADDR
// if p3 = 15 then
12692: LD_VAR 0 3
12696: PUSH
12697: LD_INT 15
12699: EQUAL
12700: IFFALSE 12710
// sKamikadze := true ;
12702: LD_ADDR_EXP 46
12706: PUSH
12707: LD_INT 1
12709: ST_TO_ADDR
// if p3 = 16 then
12710: LD_VAR 0 3
12714: PUSH
12715: LD_INT 16
12717: EQUAL
12718: IFFALSE 12728
// sTroll := true ;
12720: LD_ADDR_EXP 47
12724: PUSH
12725: LD_INT 1
12727: ST_TO_ADDR
// if p3 = 17 then
12728: LD_VAR 0 3
12732: PUSH
12733: LD_INT 17
12735: EQUAL
12736: IFFALSE 12746
// sSlow := true ;
12738: LD_ADDR_EXP 48
12742: PUSH
12743: LD_INT 1
12745: ST_TO_ADDR
// if p3 = 18 then
12746: LD_VAR 0 3
12750: PUSH
12751: LD_INT 18
12753: EQUAL
12754: IFFALSE 12764
// sLack := true ;
12756: LD_ADDR_EXP 49
12760: PUSH
12761: LD_INT 1
12763: ST_TO_ADDR
// if p3 = 19 then
12764: LD_VAR 0 3
12768: PUSH
12769: LD_INT 19
12771: EQUAL
12772: IFFALSE 12782
// sTank := true ;
12774: LD_ADDR_EXP 51
12778: PUSH
12779: LD_INT 1
12781: ST_TO_ADDR
// if p3 = 20 then
12782: LD_VAR 0 3
12786: PUSH
12787: LD_INT 20
12789: EQUAL
12790: IFFALSE 12800
// sRemote := true ;
12792: LD_ADDR_EXP 52
12796: PUSH
12797: LD_INT 1
12799: ST_TO_ADDR
// if p3 = 21 then
12800: LD_VAR 0 3
12804: PUSH
12805: LD_INT 21
12807: EQUAL
12808: IFFALSE 12818
// sPowell := true ;
12810: LD_ADDR_EXP 53
12814: PUSH
12815: LD_INT 1
12817: ST_TO_ADDR
// if p3 = 22 then
12818: LD_VAR 0 3
12822: PUSH
12823: LD_INT 22
12825: EQUAL
12826: IFFALSE 12836
// sTeleport := true ;
12828: LD_ADDR_EXP 56
12832: PUSH
12833: LD_INT 1
12835: ST_TO_ADDR
// if p3 = 23 then
12836: LD_VAR 0 3
12840: PUSH
12841: LD_INT 23
12843: EQUAL
12844: IFFALSE 12854
// sOilTower := true ;
12846: LD_ADDR_EXP 58
12850: PUSH
12851: LD_INT 1
12853: ST_TO_ADDR
// if p3 = 24 then
12854: LD_VAR 0 3
12858: PUSH
12859: LD_INT 24
12861: EQUAL
12862: IFFALSE 12872
// sShovel := true ;
12864: LD_ADDR_EXP 59
12868: PUSH
12869: LD_INT 1
12871: ST_TO_ADDR
// if p3 = 25 then
12872: LD_VAR 0 3
12876: PUSH
12877: LD_INT 25
12879: EQUAL
12880: IFFALSE 12890
// sSheik := true ;
12882: LD_ADDR_EXP 60
12886: PUSH
12887: LD_INT 1
12889: ST_TO_ADDR
// if p3 = 26 then
12890: LD_VAR 0 3
12894: PUSH
12895: LD_INT 26
12897: EQUAL
12898: IFFALSE 12908
// sEarthquake := true ;
12900: LD_ADDR_EXP 62
12904: PUSH
12905: LD_INT 1
12907: ST_TO_ADDR
// if p3 = 27 then
12908: LD_VAR 0 3
12912: PUSH
12913: LD_INT 27
12915: EQUAL
12916: IFFALSE 12926
// sAI := true ;
12918: LD_ADDR_EXP 63
12922: PUSH
12923: LD_INT 1
12925: ST_TO_ADDR
// if p3 = 28 then
12926: LD_VAR 0 3
12930: PUSH
12931: LD_INT 28
12933: EQUAL
12934: IFFALSE 12944
// sCargo := true ;
12936: LD_ADDR_EXP 66
12940: PUSH
12941: LD_INT 1
12943: ST_TO_ADDR
// if p3 = 29 then
12944: LD_VAR 0 3
12948: PUSH
12949: LD_INT 29
12951: EQUAL
12952: IFFALSE 12962
// sDLaser := true ;
12954: LD_ADDR_EXP 67
12958: PUSH
12959: LD_INT 1
12961: ST_TO_ADDR
// if p3 = 30 then
12962: LD_VAR 0 3
12966: PUSH
12967: LD_INT 30
12969: EQUAL
12970: IFFALSE 12980
// sExchange := true ;
12972: LD_ADDR_EXP 68
12976: PUSH
12977: LD_INT 1
12979: ST_TO_ADDR
// if p3 = 31 then
12980: LD_VAR 0 3
12984: PUSH
12985: LD_INT 31
12987: EQUAL
12988: IFFALSE 12998
// sFac := true ;
12990: LD_ADDR_EXP 69
12994: PUSH
12995: LD_INT 1
12997: ST_TO_ADDR
// if p3 = 32 then
12998: LD_VAR 0 3
13002: PUSH
13003: LD_INT 32
13005: EQUAL
13006: IFFALSE 13016
// sPower := true ;
13008: LD_ADDR_EXP 70
13012: PUSH
13013: LD_INT 1
13015: ST_TO_ADDR
// if p3 = 33 then
13016: LD_VAR 0 3
13020: PUSH
13021: LD_INT 33
13023: EQUAL
13024: IFFALSE 13034
// sRandom := true ;
13026: LD_ADDR_EXP 71
13030: PUSH
13031: LD_INT 1
13033: ST_TO_ADDR
// if p3 = 34 then
13034: LD_VAR 0 3
13038: PUSH
13039: LD_INT 34
13041: EQUAL
13042: IFFALSE 13052
// sShield := true ;
13044: LD_ADDR_EXP 72
13048: PUSH
13049: LD_INT 1
13051: ST_TO_ADDR
// if p3 = 35 then
13052: LD_VAR 0 3
13056: PUSH
13057: LD_INT 35
13059: EQUAL
13060: IFFALSE 13070
// sTime := true ;
13062: LD_ADDR_EXP 73
13066: PUSH
13067: LD_INT 1
13069: ST_TO_ADDR
// if p3 = 36 then
13070: LD_VAR 0 3
13074: PUSH
13075: LD_INT 36
13077: EQUAL
13078: IFFALSE 13088
// sTools := true ;
13080: LD_ADDR_EXP 74
13084: PUSH
13085: LD_INT 1
13087: ST_TO_ADDR
// if p3 = 101 then
13088: LD_VAR 0 3
13092: PUSH
13093: LD_INT 101
13095: EQUAL
13096: IFFALSE 13106
// sSold := true ;
13098: LD_ADDR_EXP 39
13102: PUSH
13103: LD_INT 1
13105: ST_TO_ADDR
// if p3 = 102 then
13106: LD_VAR 0 3
13110: PUSH
13111: LD_INT 102
13113: EQUAL
13114: IFFALSE 13124
// sDiff := true ;
13116: LD_ADDR_EXP 40
13120: PUSH
13121: LD_INT 1
13123: ST_TO_ADDR
// if p3 = 103 then
13124: LD_VAR 0 3
13128: PUSH
13129: LD_INT 103
13131: EQUAL
13132: IFFALSE 13142
// sFog := true ;
13134: LD_ADDR_EXP 43
13138: PUSH
13139: LD_INT 1
13141: ST_TO_ADDR
// if p3 = 104 then
13142: LD_VAR 0 3
13146: PUSH
13147: LD_INT 104
13149: EQUAL
13150: IFFALSE 13160
// sReset := true ;
13152: LD_ADDR_EXP 44
13156: PUSH
13157: LD_INT 1
13159: ST_TO_ADDR
// if p3 = 105 then
13160: LD_VAR 0 3
13164: PUSH
13165: LD_INT 105
13167: EQUAL
13168: IFFALSE 13178
// sSun := true ;
13170: LD_ADDR_EXP 45
13174: PUSH
13175: LD_INT 1
13177: ST_TO_ADDR
// if p3 = 106 then
13178: LD_VAR 0 3
13182: PUSH
13183: LD_INT 106
13185: EQUAL
13186: IFFALSE 13196
// sTiger := true ;
13188: LD_ADDR_EXP 41
13192: PUSH
13193: LD_INT 1
13195: ST_TO_ADDR
// if p3 = 107 then
13196: LD_VAR 0 3
13200: PUSH
13201: LD_INT 107
13203: EQUAL
13204: IFFALSE 13214
// sBomb := true ;
13206: LD_ADDR_EXP 42
13210: PUSH
13211: LD_INT 1
13213: ST_TO_ADDR
// if p3 = 108 then
13214: LD_VAR 0 3
13218: PUSH
13219: LD_INT 108
13221: EQUAL
13222: IFFALSE 13232
// sWound := true ;
13224: LD_ADDR_EXP 50
13228: PUSH
13229: LD_INT 1
13231: ST_TO_ADDR
// if p3 = 109 then
13232: LD_VAR 0 3
13236: PUSH
13237: LD_INT 109
13239: EQUAL
13240: IFFALSE 13250
// sBetray := true ;
13242: LD_ADDR_EXP 54
13246: PUSH
13247: LD_INT 1
13249: ST_TO_ADDR
// if p3 = 110 then
13250: LD_VAR 0 3
13254: PUSH
13255: LD_INT 110
13257: EQUAL
13258: IFFALSE 13268
// sContamin := true ;
13260: LD_ADDR_EXP 55
13264: PUSH
13265: LD_INT 1
13267: ST_TO_ADDR
// if p3 = 111 then
13268: LD_VAR 0 3
13272: PUSH
13273: LD_INT 111
13275: EQUAL
13276: IFFALSE 13286
// sOil := true ;
13278: LD_ADDR_EXP 57
13282: PUSH
13283: LD_INT 1
13285: ST_TO_ADDR
// if p3 = 112 then
13286: LD_VAR 0 3
13290: PUSH
13291: LD_INT 112
13293: EQUAL
13294: IFFALSE 13304
// sStu := true ;
13296: LD_ADDR_EXP 61
13300: PUSH
13301: LD_INT 1
13303: ST_TO_ADDR
// if p3 = 113 then
13304: LD_VAR 0 3
13308: PUSH
13309: LD_INT 113
13311: EQUAL
13312: IFFALSE 13322
// sBazooka := true ;
13314: LD_ADDR_EXP 64
13318: PUSH
13319: LD_INT 1
13321: ST_TO_ADDR
// if p3 = 114 then
13322: LD_VAR 0 3
13326: PUSH
13327: LD_INT 114
13329: EQUAL
13330: IFFALSE 13340
// sMortar := true ;
13332: LD_ADDR_EXP 65
13336: PUSH
13337: LD_INT 1
13339: ST_TO_ADDR
// if p3 = 115 then
13340: LD_VAR 0 3
13344: PUSH
13345: LD_INT 115
13347: EQUAL
13348: IFFALSE 13358
// sRanger := true ;
13350: LD_ADDR_EXP 75
13354: PUSH
13355: LD_INT 1
13357: ST_TO_ADDR
// if p3 = 116 then
13358: LD_VAR 0 3
13362: PUSH
13363: LD_INT 116
13365: EQUAL
13366: IFFALSE 13376
// sComputer := true ;
13368: LD_ADDR_EXP 76
13372: PUSH
13373: LD_INT 1
13375: ST_TO_ADDR
// if p3 = 117 then
13376: LD_VAR 0 3
13380: PUSH
13381: LD_INT 117
13383: EQUAL
13384: IFFALSE 13394
// s30 := true ;
13386: LD_ADDR_EXP 77
13390: PUSH
13391: LD_INT 1
13393: ST_TO_ADDR
// if p3 = 118 then
13394: LD_VAR 0 3
13398: PUSH
13399: LD_INT 118
13401: EQUAL
13402: IFFALSE 13412
// s60 := true ;
13404: LD_ADDR_EXP 78
13408: PUSH
13409: LD_INT 1
13411: ST_TO_ADDR
// end ; if p2 = hack_mode then
13412: LD_VAR 0 2
13416: PUSH
13417: LD_INT 101
13419: EQUAL
13420: IFFALSE 13548
// begin case p3 of 1 :
13422: LD_VAR 0 3
13426: PUSH
13427: LD_INT 1
13429: DOUBLE
13430: EQUAL
13431: IFTRUE 13435
13433: GO 13442
13435: POP
// hHackUnlimitedResources ; 2 :
13436: CALL 25687 0 0
13440: GO 13548
13442: LD_INT 2
13444: DOUBLE
13445: EQUAL
13446: IFTRUE 13450
13448: GO 13457
13450: POP
// hHackSetLevel10 ; 3 :
13451: CALL 25820 0 0
13455: GO 13548
13457: LD_INT 3
13459: DOUBLE
13460: EQUAL
13461: IFTRUE 13465
13463: GO 13472
13465: POP
// hHackSetLevel10YourUnits ; 4 :
13466: CALL 25905 0 0
13470: GO 13548
13472: LD_INT 4
13474: DOUBLE
13475: EQUAL
13476: IFTRUE 13480
13478: GO 13487
13480: POP
// hHackInvincible ; 5 :
13481: CALL 26353 0 0
13485: GO 13548
13487: LD_INT 5
13489: DOUBLE
13490: EQUAL
13491: IFTRUE 13495
13493: GO 13502
13495: POP
// hHackInvisible ; 6 :
13496: CALL 26464 0 0
13500: GO 13548
13502: LD_INT 6
13504: DOUBLE
13505: EQUAL
13506: IFTRUE 13510
13508: GO 13517
13510: POP
// hHackChangeYourSide ; 7 :
13511: CALL 26521 0 0
13515: GO 13548
13517: LD_INT 7
13519: DOUBLE
13520: EQUAL
13521: IFTRUE 13525
13523: GO 13532
13525: POP
// hHackChangeUnitSide ; 8 :
13526: CALL 26563 0 0
13530: GO 13548
13532: LD_INT 8
13534: DOUBLE
13535: EQUAL
13536: IFTRUE 13540
13538: GO 13547
13540: POP
// hHackFog ; end ;
13541: CALL 26664 0 0
13545: GO 13548
13547: POP
// end ; if p2 = game_save_mode then
13548: LD_VAR 0 2
13552: PUSH
13553: LD_INT 102
13555: EQUAL
13556: IFFALSE 13611
// begin if p3 = 1 then
13558: LD_VAR 0 3
13562: PUSH
13563: LD_INT 1
13565: EQUAL
13566: IFFALSE 13578
// globalGameSaveCounter := p4 ;
13568: LD_ADDR_EXP 21
13572: PUSH
13573: LD_VAR 0 4
13577: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
13578: LD_VAR 0 3
13582: PUSH
13583: LD_INT 2
13585: EQUAL
13586: PUSH
13587: LD_EXP 21
13591: AND
13592: IFFALSE 13611
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
13594: LD_STRING setGameSaveCounter(
13596: PUSH
13597: LD_EXP 21
13601: STR
13602: PUSH
13603: LD_STRING )
13605: STR
13606: PPUSH
13607: CALL_OW 559
// end ; end ;
13611: LD_VAR 0 7
13615: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
13616: LD_INT 0
13618: PPUSH
// streamModeActive := false ;
13619: LD_ADDR_EXP 22
13623: PUSH
13624: LD_INT 0
13626: ST_TO_ADDR
// normalCounter := 36 ;
13627: LD_ADDR_EXP 23
13631: PUSH
13632: LD_INT 36
13634: ST_TO_ADDR
// hardcoreCounter := 18 ;
13635: LD_ADDR_EXP 24
13639: PUSH
13640: LD_INT 18
13642: ST_TO_ADDR
// sRocket := false ;
13643: LD_ADDR_EXP 27
13647: PUSH
13648: LD_INT 0
13650: ST_TO_ADDR
// sSpeed := false ;
13651: LD_ADDR_EXP 26
13655: PUSH
13656: LD_INT 0
13658: ST_TO_ADDR
// sEngine := false ;
13659: LD_ADDR_EXP 28
13663: PUSH
13664: LD_INT 0
13666: ST_TO_ADDR
// sSpec := false ;
13667: LD_ADDR_EXP 25
13671: PUSH
13672: LD_INT 0
13674: ST_TO_ADDR
// sLevel := false ;
13675: LD_ADDR_EXP 29
13679: PUSH
13680: LD_INT 0
13682: ST_TO_ADDR
// sArmoury := false ;
13683: LD_ADDR_EXP 30
13687: PUSH
13688: LD_INT 0
13690: ST_TO_ADDR
// sRadar := false ;
13691: LD_ADDR_EXP 31
13695: PUSH
13696: LD_INT 0
13698: ST_TO_ADDR
// sBunker := false ;
13699: LD_ADDR_EXP 32
13703: PUSH
13704: LD_INT 0
13706: ST_TO_ADDR
// sHack := false ;
13707: LD_ADDR_EXP 33
13711: PUSH
13712: LD_INT 0
13714: ST_TO_ADDR
// sFire := false ;
13715: LD_ADDR_EXP 34
13719: PUSH
13720: LD_INT 0
13722: ST_TO_ADDR
// sRefresh := false ;
13723: LD_ADDR_EXP 35
13727: PUSH
13728: LD_INT 0
13730: ST_TO_ADDR
// sExp := false ;
13731: LD_ADDR_EXP 36
13735: PUSH
13736: LD_INT 0
13738: ST_TO_ADDR
// sDepot := false ;
13739: LD_ADDR_EXP 37
13743: PUSH
13744: LD_INT 0
13746: ST_TO_ADDR
// sFlag := false ;
13747: LD_ADDR_EXP 38
13751: PUSH
13752: LD_INT 0
13754: ST_TO_ADDR
// sKamikadze := false ;
13755: LD_ADDR_EXP 46
13759: PUSH
13760: LD_INT 0
13762: ST_TO_ADDR
// sTroll := false ;
13763: LD_ADDR_EXP 47
13767: PUSH
13768: LD_INT 0
13770: ST_TO_ADDR
// sSlow := false ;
13771: LD_ADDR_EXP 48
13775: PUSH
13776: LD_INT 0
13778: ST_TO_ADDR
// sLack := false ;
13779: LD_ADDR_EXP 49
13783: PUSH
13784: LD_INT 0
13786: ST_TO_ADDR
// sTank := false ;
13787: LD_ADDR_EXP 51
13791: PUSH
13792: LD_INT 0
13794: ST_TO_ADDR
// sRemote := false ;
13795: LD_ADDR_EXP 52
13799: PUSH
13800: LD_INT 0
13802: ST_TO_ADDR
// sPowell := false ;
13803: LD_ADDR_EXP 53
13807: PUSH
13808: LD_INT 0
13810: ST_TO_ADDR
// sTeleport := false ;
13811: LD_ADDR_EXP 56
13815: PUSH
13816: LD_INT 0
13818: ST_TO_ADDR
// sOilTower := false ;
13819: LD_ADDR_EXP 58
13823: PUSH
13824: LD_INT 0
13826: ST_TO_ADDR
// sShovel := false ;
13827: LD_ADDR_EXP 59
13831: PUSH
13832: LD_INT 0
13834: ST_TO_ADDR
// sSheik := false ;
13835: LD_ADDR_EXP 60
13839: PUSH
13840: LD_INT 0
13842: ST_TO_ADDR
// sEarthquake := false ;
13843: LD_ADDR_EXP 62
13847: PUSH
13848: LD_INT 0
13850: ST_TO_ADDR
// sAI := false ;
13851: LD_ADDR_EXP 63
13855: PUSH
13856: LD_INT 0
13858: ST_TO_ADDR
// sCargo := false ;
13859: LD_ADDR_EXP 66
13863: PUSH
13864: LD_INT 0
13866: ST_TO_ADDR
// sDLaser := false ;
13867: LD_ADDR_EXP 67
13871: PUSH
13872: LD_INT 0
13874: ST_TO_ADDR
// sExchange := false ;
13875: LD_ADDR_EXP 68
13879: PUSH
13880: LD_INT 0
13882: ST_TO_ADDR
// sFac := false ;
13883: LD_ADDR_EXP 69
13887: PUSH
13888: LD_INT 0
13890: ST_TO_ADDR
// sPower := false ;
13891: LD_ADDR_EXP 70
13895: PUSH
13896: LD_INT 0
13898: ST_TO_ADDR
// sRandom := false ;
13899: LD_ADDR_EXP 71
13903: PUSH
13904: LD_INT 0
13906: ST_TO_ADDR
// sShield := false ;
13907: LD_ADDR_EXP 72
13911: PUSH
13912: LD_INT 0
13914: ST_TO_ADDR
// sTime := false ;
13915: LD_ADDR_EXP 73
13919: PUSH
13920: LD_INT 0
13922: ST_TO_ADDR
// sTools := false ;
13923: LD_ADDR_EXP 74
13927: PUSH
13928: LD_INT 0
13930: ST_TO_ADDR
// sSold := false ;
13931: LD_ADDR_EXP 39
13935: PUSH
13936: LD_INT 0
13938: ST_TO_ADDR
// sDiff := false ;
13939: LD_ADDR_EXP 40
13943: PUSH
13944: LD_INT 0
13946: ST_TO_ADDR
// sFog := false ;
13947: LD_ADDR_EXP 43
13951: PUSH
13952: LD_INT 0
13954: ST_TO_ADDR
// sReset := false ;
13955: LD_ADDR_EXP 44
13959: PUSH
13960: LD_INT 0
13962: ST_TO_ADDR
// sSun := false ;
13963: LD_ADDR_EXP 45
13967: PUSH
13968: LD_INT 0
13970: ST_TO_ADDR
// sTiger := false ;
13971: LD_ADDR_EXP 41
13975: PUSH
13976: LD_INT 0
13978: ST_TO_ADDR
// sBomb := false ;
13979: LD_ADDR_EXP 42
13983: PUSH
13984: LD_INT 0
13986: ST_TO_ADDR
// sWound := false ;
13987: LD_ADDR_EXP 50
13991: PUSH
13992: LD_INT 0
13994: ST_TO_ADDR
// sBetray := false ;
13995: LD_ADDR_EXP 54
13999: PUSH
14000: LD_INT 0
14002: ST_TO_ADDR
// sContamin := false ;
14003: LD_ADDR_EXP 55
14007: PUSH
14008: LD_INT 0
14010: ST_TO_ADDR
// sOil := false ;
14011: LD_ADDR_EXP 57
14015: PUSH
14016: LD_INT 0
14018: ST_TO_ADDR
// sStu := false ;
14019: LD_ADDR_EXP 61
14023: PUSH
14024: LD_INT 0
14026: ST_TO_ADDR
// sBazooka := false ;
14027: LD_ADDR_EXP 64
14031: PUSH
14032: LD_INT 0
14034: ST_TO_ADDR
// sMortar := false ;
14035: LD_ADDR_EXP 65
14039: PUSH
14040: LD_INT 0
14042: ST_TO_ADDR
// sRanger := false ;
14043: LD_ADDR_EXP 75
14047: PUSH
14048: LD_INT 0
14050: ST_TO_ADDR
// sComputer := false ;
14051: LD_ADDR_EXP 76
14055: PUSH
14056: LD_INT 0
14058: ST_TO_ADDR
// s30 := false ;
14059: LD_ADDR_EXP 77
14063: PUSH
14064: LD_INT 0
14066: ST_TO_ADDR
// s60 := false ;
14067: LD_ADDR_EXP 78
14071: PUSH
14072: LD_INT 0
14074: ST_TO_ADDR
// end ;
14075: LD_VAR 0 1
14079: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
14080: LD_INT 0
14082: PPUSH
14083: PPUSH
14084: PPUSH
14085: PPUSH
14086: PPUSH
14087: PPUSH
14088: PPUSH
// result := [ ] ;
14089: LD_ADDR_VAR 0 2
14093: PUSH
14094: EMPTY
14095: ST_TO_ADDR
// if campaign_id = 1 then
14096: LD_OWVAR 69
14100: PUSH
14101: LD_INT 1
14103: EQUAL
14104: IFFALSE 17270
// begin case mission_number of 1 :
14106: LD_OWVAR 70
14110: PUSH
14111: LD_INT 1
14113: DOUBLE
14114: EQUAL
14115: IFTRUE 14119
14117: GO 14195
14119: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
14120: LD_ADDR_VAR 0 2
14124: PUSH
14125: LD_INT 2
14127: PUSH
14128: LD_INT 4
14130: PUSH
14131: LD_INT 11
14133: PUSH
14134: LD_INT 12
14136: PUSH
14137: LD_INT 15
14139: PUSH
14140: LD_INT 16
14142: PUSH
14143: LD_INT 22
14145: PUSH
14146: LD_INT 23
14148: PUSH
14149: LD_INT 26
14151: PUSH
14152: EMPTY
14153: LIST
14154: LIST
14155: LIST
14156: LIST
14157: LIST
14158: LIST
14159: LIST
14160: LIST
14161: LIST
14162: PUSH
14163: LD_INT 101
14165: PUSH
14166: LD_INT 102
14168: PUSH
14169: LD_INT 106
14171: PUSH
14172: LD_INT 116
14174: PUSH
14175: LD_INT 117
14177: PUSH
14178: LD_INT 118
14180: PUSH
14181: EMPTY
14182: LIST
14183: LIST
14184: LIST
14185: LIST
14186: LIST
14187: LIST
14188: PUSH
14189: EMPTY
14190: LIST
14191: LIST
14192: ST_TO_ADDR
14193: GO 17268
14195: LD_INT 2
14197: DOUBLE
14198: EQUAL
14199: IFTRUE 14203
14201: GO 14287
14203: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
14204: LD_ADDR_VAR 0 2
14208: PUSH
14209: LD_INT 2
14211: PUSH
14212: LD_INT 4
14214: PUSH
14215: LD_INT 11
14217: PUSH
14218: LD_INT 12
14220: PUSH
14221: LD_INT 15
14223: PUSH
14224: LD_INT 16
14226: PUSH
14227: LD_INT 22
14229: PUSH
14230: LD_INT 23
14232: PUSH
14233: LD_INT 26
14235: PUSH
14236: EMPTY
14237: LIST
14238: LIST
14239: LIST
14240: LIST
14241: LIST
14242: LIST
14243: LIST
14244: LIST
14245: LIST
14246: PUSH
14247: LD_INT 101
14249: PUSH
14250: LD_INT 102
14252: PUSH
14253: LD_INT 105
14255: PUSH
14256: LD_INT 106
14258: PUSH
14259: LD_INT 108
14261: PUSH
14262: LD_INT 116
14264: PUSH
14265: LD_INT 117
14267: PUSH
14268: LD_INT 118
14270: PUSH
14271: EMPTY
14272: LIST
14273: LIST
14274: LIST
14275: LIST
14276: LIST
14277: LIST
14278: LIST
14279: LIST
14280: PUSH
14281: EMPTY
14282: LIST
14283: LIST
14284: ST_TO_ADDR
14285: GO 17268
14287: LD_INT 3
14289: DOUBLE
14290: EQUAL
14291: IFTRUE 14295
14293: GO 14383
14295: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
14296: LD_ADDR_VAR 0 2
14300: PUSH
14301: LD_INT 2
14303: PUSH
14304: LD_INT 4
14306: PUSH
14307: LD_INT 5
14309: PUSH
14310: LD_INT 11
14312: PUSH
14313: LD_INT 12
14315: PUSH
14316: LD_INT 15
14318: PUSH
14319: LD_INT 16
14321: PUSH
14322: LD_INT 22
14324: PUSH
14325: LD_INT 26
14327: PUSH
14328: LD_INT 36
14330: PUSH
14331: EMPTY
14332: LIST
14333: LIST
14334: LIST
14335: LIST
14336: LIST
14337: LIST
14338: LIST
14339: LIST
14340: LIST
14341: LIST
14342: PUSH
14343: LD_INT 101
14345: PUSH
14346: LD_INT 102
14348: PUSH
14349: LD_INT 105
14351: PUSH
14352: LD_INT 106
14354: PUSH
14355: LD_INT 108
14357: PUSH
14358: LD_INT 116
14360: PUSH
14361: LD_INT 117
14363: PUSH
14364: LD_INT 118
14366: PUSH
14367: EMPTY
14368: LIST
14369: LIST
14370: LIST
14371: LIST
14372: LIST
14373: LIST
14374: LIST
14375: LIST
14376: PUSH
14377: EMPTY
14378: LIST
14379: LIST
14380: ST_TO_ADDR
14381: GO 17268
14383: LD_INT 4
14385: DOUBLE
14386: EQUAL
14387: IFTRUE 14391
14389: GO 14487
14391: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
14392: LD_ADDR_VAR 0 2
14396: PUSH
14397: LD_INT 2
14399: PUSH
14400: LD_INT 4
14402: PUSH
14403: LD_INT 5
14405: PUSH
14406: LD_INT 8
14408: PUSH
14409: LD_INT 11
14411: PUSH
14412: LD_INT 12
14414: PUSH
14415: LD_INT 15
14417: PUSH
14418: LD_INT 16
14420: PUSH
14421: LD_INT 22
14423: PUSH
14424: LD_INT 23
14426: PUSH
14427: LD_INT 26
14429: PUSH
14430: LD_INT 36
14432: PUSH
14433: EMPTY
14434: LIST
14435: LIST
14436: LIST
14437: LIST
14438: LIST
14439: LIST
14440: LIST
14441: LIST
14442: LIST
14443: LIST
14444: LIST
14445: LIST
14446: PUSH
14447: LD_INT 101
14449: PUSH
14450: LD_INT 102
14452: PUSH
14453: LD_INT 105
14455: PUSH
14456: LD_INT 106
14458: PUSH
14459: LD_INT 108
14461: PUSH
14462: LD_INT 116
14464: PUSH
14465: LD_INT 117
14467: PUSH
14468: LD_INT 118
14470: PUSH
14471: EMPTY
14472: LIST
14473: LIST
14474: LIST
14475: LIST
14476: LIST
14477: LIST
14478: LIST
14479: LIST
14480: PUSH
14481: EMPTY
14482: LIST
14483: LIST
14484: ST_TO_ADDR
14485: GO 17268
14487: LD_INT 5
14489: DOUBLE
14490: EQUAL
14491: IFTRUE 14495
14493: GO 14607
14495: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
14496: LD_ADDR_VAR 0 2
14500: PUSH
14501: LD_INT 2
14503: PUSH
14504: LD_INT 4
14506: PUSH
14507: LD_INT 5
14509: PUSH
14510: LD_INT 6
14512: PUSH
14513: LD_INT 8
14515: PUSH
14516: LD_INT 11
14518: PUSH
14519: LD_INT 12
14521: PUSH
14522: LD_INT 15
14524: PUSH
14525: LD_INT 16
14527: PUSH
14528: LD_INT 22
14530: PUSH
14531: LD_INT 23
14533: PUSH
14534: LD_INT 25
14536: PUSH
14537: LD_INT 26
14539: PUSH
14540: LD_INT 36
14542: PUSH
14543: EMPTY
14544: LIST
14545: LIST
14546: LIST
14547: LIST
14548: LIST
14549: LIST
14550: LIST
14551: LIST
14552: LIST
14553: LIST
14554: LIST
14555: LIST
14556: LIST
14557: LIST
14558: PUSH
14559: LD_INT 101
14561: PUSH
14562: LD_INT 102
14564: PUSH
14565: LD_INT 105
14567: PUSH
14568: LD_INT 106
14570: PUSH
14571: LD_INT 108
14573: PUSH
14574: LD_INT 109
14576: PUSH
14577: LD_INT 112
14579: PUSH
14580: LD_INT 116
14582: PUSH
14583: LD_INT 117
14585: PUSH
14586: LD_INT 118
14588: PUSH
14589: EMPTY
14590: LIST
14591: LIST
14592: LIST
14593: LIST
14594: LIST
14595: LIST
14596: LIST
14597: LIST
14598: LIST
14599: LIST
14600: PUSH
14601: EMPTY
14602: LIST
14603: LIST
14604: ST_TO_ADDR
14605: GO 17268
14607: LD_INT 6
14609: DOUBLE
14610: EQUAL
14611: IFTRUE 14615
14613: GO 14747
14615: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
14616: LD_ADDR_VAR 0 2
14620: PUSH
14621: LD_INT 2
14623: PUSH
14624: LD_INT 4
14626: PUSH
14627: LD_INT 5
14629: PUSH
14630: LD_INT 6
14632: PUSH
14633: LD_INT 8
14635: PUSH
14636: LD_INT 11
14638: PUSH
14639: LD_INT 12
14641: PUSH
14642: LD_INT 15
14644: PUSH
14645: LD_INT 16
14647: PUSH
14648: LD_INT 20
14650: PUSH
14651: LD_INT 21
14653: PUSH
14654: LD_INT 22
14656: PUSH
14657: LD_INT 23
14659: PUSH
14660: LD_INT 25
14662: PUSH
14663: LD_INT 26
14665: PUSH
14666: LD_INT 30
14668: PUSH
14669: LD_INT 31
14671: PUSH
14672: LD_INT 32
14674: PUSH
14675: LD_INT 36
14677: PUSH
14678: EMPTY
14679: LIST
14680: LIST
14681: LIST
14682: LIST
14683: LIST
14684: LIST
14685: LIST
14686: LIST
14687: LIST
14688: LIST
14689: LIST
14690: LIST
14691: LIST
14692: LIST
14693: LIST
14694: LIST
14695: LIST
14696: LIST
14697: LIST
14698: PUSH
14699: LD_INT 101
14701: PUSH
14702: LD_INT 102
14704: PUSH
14705: LD_INT 105
14707: PUSH
14708: LD_INT 106
14710: PUSH
14711: LD_INT 108
14713: PUSH
14714: LD_INT 109
14716: PUSH
14717: LD_INT 112
14719: PUSH
14720: LD_INT 116
14722: PUSH
14723: LD_INT 117
14725: PUSH
14726: LD_INT 118
14728: PUSH
14729: EMPTY
14730: LIST
14731: LIST
14732: LIST
14733: LIST
14734: LIST
14735: LIST
14736: LIST
14737: LIST
14738: LIST
14739: LIST
14740: PUSH
14741: EMPTY
14742: LIST
14743: LIST
14744: ST_TO_ADDR
14745: GO 17268
14747: LD_INT 7
14749: DOUBLE
14750: EQUAL
14751: IFTRUE 14755
14753: GO 14867
14755: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
14756: LD_ADDR_VAR 0 2
14760: PUSH
14761: LD_INT 2
14763: PUSH
14764: LD_INT 4
14766: PUSH
14767: LD_INT 5
14769: PUSH
14770: LD_INT 7
14772: PUSH
14773: LD_INT 11
14775: PUSH
14776: LD_INT 12
14778: PUSH
14779: LD_INT 15
14781: PUSH
14782: LD_INT 16
14784: PUSH
14785: LD_INT 20
14787: PUSH
14788: LD_INT 21
14790: PUSH
14791: LD_INT 22
14793: PUSH
14794: LD_INT 23
14796: PUSH
14797: LD_INT 25
14799: PUSH
14800: LD_INT 26
14802: PUSH
14803: EMPTY
14804: LIST
14805: LIST
14806: LIST
14807: LIST
14808: LIST
14809: LIST
14810: LIST
14811: LIST
14812: LIST
14813: LIST
14814: LIST
14815: LIST
14816: LIST
14817: LIST
14818: PUSH
14819: LD_INT 101
14821: PUSH
14822: LD_INT 102
14824: PUSH
14825: LD_INT 103
14827: PUSH
14828: LD_INT 105
14830: PUSH
14831: LD_INT 106
14833: PUSH
14834: LD_INT 108
14836: PUSH
14837: LD_INT 112
14839: PUSH
14840: LD_INT 116
14842: PUSH
14843: LD_INT 117
14845: PUSH
14846: LD_INT 118
14848: PUSH
14849: EMPTY
14850: LIST
14851: LIST
14852: LIST
14853: LIST
14854: LIST
14855: LIST
14856: LIST
14857: LIST
14858: LIST
14859: LIST
14860: PUSH
14861: EMPTY
14862: LIST
14863: LIST
14864: ST_TO_ADDR
14865: GO 17268
14867: LD_INT 8
14869: DOUBLE
14870: EQUAL
14871: IFTRUE 14875
14873: GO 15015
14875: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
14876: LD_ADDR_VAR 0 2
14880: PUSH
14881: LD_INT 2
14883: PUSH
14884: LD_INT 4
14886: PUSH
14887: LD_INT 5
14889: PUSH
14890: LD_INT 6
14892: PUSH
14893: LD_INT 7
14895: PUSH
14896: LD_INT 8
14898: PUSH
14899: LD_INT 11
14901: PUSH
14902: LD_INT 12
14904: PUSH
14905: LD_INT 15
14907: PUSH
14908: LD_INT 16
14910: PUSH
14911: LD_INT 20
14913: PUSH
14914: LD_INT 21
14916: PUSH
14917: LD_INT 22
14919: PUSH
14920: LD_INT 23
14922: PUSH
14923: LD_INT 25
14925: PUSH
14926: LD_INT 26
14928: PUSH
14929: LD_INT 30
14931: PUSH
14932: LD_INT 31
14934: PUSH
14935: LD_INT 32
14937: PUSH
14938: LD_INT 36
14940: PUSH
14941: EMPTY
14942: LIST
14943: LIST
14944: LIST
14945: LIST
14946: LIST
14947: LIST
14948: LIST
14949: LIST
14950: LIST
14951: LIST
14952: LIST
14953: LIST
14954: LIST
14955: LIST
14956: LIST
14957: LIST
14958: LIST
14959: LIST
14960: LIST
14961: LIST
14962: PUSH
14963: LD_INT 101
14965: PUSH
14966: LD_INT 102
14968: PUSH
14969: LD_INT 103
14971: PUSH
14972: LD_INT 105
14974: PUSH
14975: LD_INT 106
14977: PUSH
14978: LD_INT 108
14980: PUSH
14981: LD_INT 109
14983: PUSH
14984: LD_INT 112
14986: PUSH
14987: LD_INT 116
14989: PUSH
14990: LD_INT 117
14992: PUSH
14993: LD_INT 118
14995: PUSH
14996: EMPTY
14997: LIST
14998: LIST
14999: LIST
15000: LIST
15001: LIST
15002: LIST
15003: LIST
15004: LIST
15005: LIST
15006: LIST
15007: LIST
15008: PUSH
15009: EMPTY
15010: LIST
15011: LIST
15012: ST_TO_ADDR
15013: GO 17268
15015: LD_INT 9
15017: DOUBLE
15018: EQUAL
15019: IFTRUE 15023
15021: GO 15171
15023: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
15024: LD_ADDR_VAR 0 2
15028: PUSH
15029: LD_INT 2
15031: PUSH
15032: LD_INT 4
15034: PUSH
15035: LD_INT 5
15037: PUSH
15038: LD_INT 6
15040: PUSH
15041: LD_INT 7
15043: PUSH
15044: LD_INT 8
15046: PUSH
15047: LD_INT 11
15049: PUSH
15050: LD_INT 12
15052: PUSH
15053: LD_INT 15
15055: PUSH
15056: LD_INT 16
15058: PUSH
15059: LD_INT 20
15061: PUSH
15062: LD_INT 21
15064: PUSH
15065: LD_INT 22
15067: PUSH
15068: LD_INT 23
15070: PUSH
15071: LD_INT 25
15073: PUSH
15074: LD_INT 26
15076: PUSH
15077: LD_INT 28
15079: PUSH
15080: LD_INT 30
15082: PUSH
15083: LD_INT 31
15085: PUSH
15086: LD_INT 32
15088: PUSH
15089: LD_INT 36
15091: PUSH
15092: EMPTY
15093: LIST
15094: LIST
15095: LIST
15096: LIST
15097: LIST
15098: LIST
15099: LIST
15100: LIST
15101: LIST
15102: LIST
15103: LIST
15104: LIST
15105: LIST
15106: LIST
15107: LIST
15108: LIST
15109: LIST
15110: LIST
15111: LIST
15112: LIST
15113: LIST
15114: PUSH
15115: LD_INT 101
15117: PUSH
15118: LD_INT 102
15120: PUSH
15121: LD_INT 103
15123: PUSH
15124: LD_INT 105
15126: PUSH
15127: LD_INT 106
15129: PUSH
15130: LD_INT 108
15132: PUSH
15133: LD_INT 109
15135: PUSH
15136: LD_INT 112
15138: PUSH
15139: LD_INT 114
15141: PUSH
15142: LD_INT 116
15144: PUSH
15145: LD_INT 117
15147: PUSH
15148: LD_INT 118
15150: PUSH
15151: EMPTY
15152: LIST
15153: LIST
15154: LIST
15155: LIST
15156: LIST
15157: LIST
15158: LIST
15159: LIST
15160: LIST
15161: LIST
15162: LIST
15163: LIST
15164: PUSH
15165: EMPTY
15166: LIST
15167: LIST
15168: ST_TO_ADDR
15169: GO 17268
15171: LD_INT 10
15173: DOUBLE
15174: EQUAL
15175: IFTRUE 15179
15177: GO 15375
15179: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
15180: LD_ADDR_VAR 0 2
15184: PUSH
15185: LD_INT 2
15187: PUSH
15188: LD_INT 4
15190: PUSH
15191: LD_INT 5
15193: PUSH
15194: LD_INT 6
15196: PUSH
15197: LD_INT 7
15199: PUSH
15200: LD_INT 8
15202: PUSH
15203: LD_INT 9
15205: PUSH
15206: LD_INT 10
15208: PUSH
15209: LD_INT 11
15211: PUSH
15212: LD_INT 12
15214: PUSH
15215: LD_INT 13
15217: PUSH
15218: LD_INT 14
15220: PUSH
15221: LD_INT 15
15223: PUSH
15224: LD_INT 16
15226: PUSH
15227: LD_INT 17
15229: PUSH
15230: LD_INT 18
15232: PUSH
15233: LD_INT 19
15235: PUSH
15236: LD_INT 20
15238: PUSH
15239: LD_INT 21
15241: PUSH
15242: LD_INT 22
15244: PUSH
15245: LD_INT 23
15247: PUSH
15248: LD_INT 24
15250: PUSH
15251: LD_INT 25
15253: PUSH
15254: LD_INT 26
15256: PUSH
15257: LD_INT 28
15259: PUSH
15260: LD_INT 30
15262: PUSH
15263: LD_INT 31
15265: PUSH
15266: LD_INT 32
15268: PUSH
15269: LD_INT 36
15271: PUSH
15272: EMPTY
15273: LIST
15274: LIST
15275: LIST
15276: LIST
15277: LIST
15278: LIST
15279: LIST
15280: LIST
15281: LIST
15282: LIST
15283: LIST
15284: LIST
15285: LIST
15286: LIST
15287: LIST
15288: LIST
15289: LIST
15290: LIST
15291: LIST
15292: LIST
15293: LIST
15294: LIST
15295: LIST
15296: LIST
15297: LIST
15298: LIST
15299: LIST
15300: LIST
15301: LIST
15302: PUSH
15303: LD_INT 101
15305: PUSH
15306: LD_INT 102
15308: PUSH
15309: LD_INT 103
15311: PUSH
15312: LD_INT 104
15314: PUSH
15315: LD_INT 105
15317: PUSH
15318: LD_INT 106
15320: PUSH
15321: LD_INT 107
15323: PUSH
15324: LD_INT 108
15326: PUSH
15327: LD_INT 109
15329: PUSH
15330: LD_INT 110
15332: PUSH
15333: LD_INT 111
15335: PUSH
15336: LD_INT 112
15338: PUSH
15339: LD_INT 114
15341: PUSH
15342: LD_INT 116
15344: PUSH
15345: LD_INT 117
15347: PUSH
15348: LD_INT 118
15350: PUSH
15351: EMPTY
15352: LIST
15353: LIST
15354: LIST
15355: LIST
15356: LIST
15357: LIST
15358: LIST
15359: LIST
15360: LIST
15361: LIST
15362: LIST
15363: LIST
15364: LIST
15365: LIST
15366: LIST
15367: LIST
15368: PUSH
15369: EMPTY
15370: LIST
15371: LIST
15372: ST_TO_ADDR
15373: GO 17268
15375: LD_INT 11
15377: DOUBLE
15378: EQUAL
15379: IFTRUE 15383
15381: GO 15587
15383: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
15384: LD_ADDR_VAR 0 2
15388: PUSH
15389: LD_INT 2
15391: PUSH
15392: LD_INT 3
15394: PUSH
15395: LD_INT 4
15397: PUSH
15398: LD_INT 5
15400: PUSH
15401: LD_INT 6
15403: PUSH
15404: LD_INT 7
15406: PUSH
15407: LD_INT 8
15409: PUSH
15410: LD_INT 9
15412: PUSH
15413: LD_INT 10
15415: PUSH
15416: LD_INT 11
15418: PUSH
15419: LD_INT 12
15421: PUSH
15422: LD_INT 13
15424: PUSH
15425: LD_INT 14
15427: PUSH
15428: LD_INT 15
15430: PUSH
15431: LD_INT 16
15433: PUSH
15434: LD_INT 17
15436: PUSH
15437: LD_INT 18
15439: PUSH
15440: LD_INT 19
15442: PUSH
15443: LD_INT 20
15445: PUSH
15446: LD_INT 21
15448: PUSH
15449: LD_INT 22
15451: PUSH
15452: LD_INT 23
15454: PUSH
15455: LD_INT 24
15457: PUSH
15458: LD_INT 25
15460: PUSH
15461: LD_INT 26
15463: PUSH
15464: LD_INT 28
15466: PUSH
15467: LD_INT 30
15469: PUSH
15470: LD_INT 31
15472: PUSH
15473: LD_INT 32
15475: PUSH
15476: LD_INT 34
15478: PUSH
15479: LD_INT 36
15481: PUSH
15482: EMPTY
15483: LIST
15484: LIST
15485: LIST
15486: LIST
15487: LIST
15488: LIST
15489: LIST
15490: LIST
15491: LIST
15492: LIST
15493: LIST
15494: LIST
15495: LIST
15496: LIST
15497: LIST
15498: LIST
15499: LIST
15500: LIST
15501: LIST
15502: LIST
15503: LIST
15504: LIST
15505: LIST
15506: LIST
15507: LIST
15508: LIST
15509: LIST
15510: LIST
15511: LIST
15512: LIST
15513: LIST
15514: PUSH
15515: LD_INT 101
15517: PUSH
15518: LD_INT 102
15520: PUSH
15521: LD_INT 103
15523: PUSH
15524: LD_INT 104
15526: PUSH
15527: LD_INT 105
15529: PUSH
15530: LD_INT 106
15532: PUSH
15533: LD_INT 107
15535: PUSH
15536: LD_INT 108
15538: PUSH
15539: LD_INT 109
15541: PUSH
15542: LD_INT 110
15544: PUSH
15545: LD_INT 111
15547: PUSH
15548: LD_INT 112
15550: PUSH
15551: LD_INT 114
15553: PUSH
15554: LD_INT 116
15556: PUSH
15557: LD_INT 117
15559: PUSH
15560: LD_INT 118
15562: PUSH
15563: EMPTY
15564: LIST
15565: LIST
15566: LIST
15567: LIST
15568: LIST
15569: LIST
15570: LIST
15571: LIST
15572: LIST
15573: LIST
15574: LIST
15575: LIST
15576: LIST
15577: LIST
15578: LIST
15579: LIST
15580: PUSH
15581: EMPTY
15582: LIST
15583: LIST
15584: ST_TO_ADDR
15585: GO 17268
15587: LD_INT 12
15589: DOUBLE
15590: EQUAL
15591: IFTRUE 15595
15593: GO 15815
15595: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
15596: LD_ADDR_VAR 0 2
15600: PUSH
15601: LD_INT 1
15603: PUSH
15604: LD_INT 2
15606: PUSH
15607: LD_INT 3
15609: PUSH
15610: LD_INT 4
15612: PUSH
15613: LD_INT 5
15615: PUSH
15616: LD_INT 6
15618: PUSH
15619: LD_INT 7
15621: PUSH
15622: LD_INT 8
15624: PUSH
15625: LD_INT 9
15627: PUSH
15628: LD_INT 10
15630: PUSH
15631: LD_INT 11
15633: PUSH
15634: LD_INT 12
15636: PUSH
15637: LD_INT 13
15639: PUSH
15640: LD_INT 14
15642: PUSH
15643: LD_INT 15
15645: PUSH
15646: LD_INT 16
15648: PUSH
15649: LD_INT 17
15651: PUSH
15652: LD_INT 18
15654: PUSH
15655: LD_INT 19
15657: PUSH
15658: LD_INT 20
15660: PUSH
15661: LD_INT 21
15663: PUSH
15664: LD_INT 22
15666: PUSH
15667: LD_INT 23
15669: PUSH
15670: LD_INT 24
15672: PUSH
15673: LD_INT 25
15675: PUSH
15676: LD_INT 26
15678: PUSH
15679: LD_INT 27
15681: PUSH
15682: LD_INT 28
15684: PUSH
15685: LD_INT 30
15687: PUSH
15688: LD_INT 31
15690: PUSH
15691: LD_INT 32
15693: PUSH
15694: LD_INT 33
15696: PUSH
15697: LD_INT 34
15699: PUSH
15700: LD_INT 36
15702: PUSH
15703: EMPTY
15704: LIST
15705: LIST
15706: LIST
15707: LIST
15708: LIST
15709: LIST
15710: LIST
15711: LIST
15712: LIST
15713: LIST
15714: LIST
15715: LIST
15716: LIST
15717: LIST
15718: LIST
15719: LIST
15720: LIST
15721: LIST
15722: LIST
15723: LIST
15724: LIST
15725: LIST
15726: LIST
15727: LIST
15728: LIST
15729: LIST
15730: LIST
15731: LIST
15732: LIST
15733: LIST
15734: LIST
15735: LIST
15736: LIST
15737: LIST
15738: PUSH
15739: LD_INT 101
15741: PUSH
15742: LD_INT 102
15744: PUSH
15745: LD_INT 103
15747: PUSH
15748: LD_INT 104
15750: PUSH
15751: LD_INT 105
15753: PUSH
15754: LD_INT 106
15756: PUSH
15757: LD_INT 107
15759: PUSH
15760: LD_INT 108
15762: PUSH
15763: LD_INT 109
15765: PUSH
15766: LD_INT 110
15768: PUSH
15769: LD_INT 111
15771: PUSH
15772: LD_INT 112
15774: PUSH
15775: LD_INT 113
15777: PUSH
15778: LD_INT 114
15780: PUSH
15781: LD_INT 116
15783: PUSH
15784: LD_INT 117
15786: PUSH
15787: LD_INT 118
15789: PUSH
15790: EMPTY
15791: LIST
15792: LIST
15793: LIST
15794: LIST
15795: LIST
15796: LIST
15797: LIST
15798: LIST
15799: LIST
15800: LIST
15801: LIST
15802: LIST
15803: LIST
15804: LIST
15805: LIST
15806: LIST
15807: LIST
15808: PUSH
15809: EMPTY
15810: LIST
15811: LIST
15812: ST_TO_ADDR
15813: GO 17268
15815: LD_INT 13
15817: DOUBLE
15818: EQUAL
15819: IFTRUE 15823
15821: GO 16031
15823: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
15824: LD_ADDR_VAR 0 2
15828: PUSH
15829: LD_INT 1
15831: PUSH
15832: LD_INT 2
15834: PUSH
15835: LD_INT 3
15837: PUSH
15838: LD_INT 4
15840: PUSH
15841: LD_INT 5
15843: PUSH
15844: LD_INT 8
15846: PUSH
15847: LD_INT 9
15849: PUSH
15850: LD_INT 10
15852: PUSH
15853: LD_INT 11
15855: PUSH
15856: LD_INT 12
15858: PUSH
15859: LD_INT 14
15861: PUSH
15862: LD_INT 15
15864: PUSH
15865: LD_INT 16
15867: PUSH
15868: LD_INT 17
15870: PUSH
15871: LD_INT 18
15873: PUSH
15874: LD_INT 19
15876: PUSH
15877: LD_INT 20
15879: PUSH
15880: LD_INT 21
15882: PUSH
15883: LD_INT 22
15885: PUSH
15886: LD_INT 23
15888: PUSH
15889: LD_INT 24
15891: PUSH
15892: LD_INT 25
15894: PUSH
15895: LD_INT 26
15897: PUSH
15898: LD_INT 27
15900: PUSH
15901: LD_INT 28
15903: PUSH
15904: LD_INT 30
15906: PUSH
15907: LD_INT 31
15909: PUSH
15910: LD_INT 32
15912: PUSH
15913: LD_INT 33
15915: PUSH
15916: LD_INT 34
15918: PUSH
15919: LD_INT 36
15921: PUSH
15922: EMPTY
15923: LIST
15924: LIST
15925: LIST
15926: LIST
15927: LIST
15928: LIST
15929: LIST
15930: LIST
15931: LIST
15932: LIST
15933: LIST
15934: LIST
15935: LIST
15936: LIST
15937: LIST
15938: LIST
15939: LIST
15940: LIST
15941: LIST
15942: LIST
15943: LIST
15944: LIST
15945: LIST
15946: LIST
15947: LIST
15948: LIST
15949: LIST
15950: LIST
15951: LIST
15952: LIST
15953: LIST
15954: PUSH
15955: LD_INT 101
15957: PUSH
15958: LD_INT 102
15960: PUSH
15961: LD_INT 103
15963: PUSH
15964: LD_INT 104
15966: PUSH
15967: LD_INT 105
15969: PUSH
15970: LD_INT 106
15972: PUSH
15973: LD_INT 107
15975: PUSH
15976: LD_INT 108
15978: PUSH
15979: LD_INT 109
15981: PUSH
15982: LD_INT 110
15984: PUSH
15985: LD_INT 111
15987: PUSH
15988: LD_INT 112
15990: PUSH
15991: LD_INT 113
15993: PUSH
15994: LD_INT 114
15996: PUSH
15997: LD_INT 116
15999: PUSH
16000: LD_INT 117
16002: PUSH
16003: LD_INT 118
16005: PUSH
16006: EMPTY
16007: LIST
16008: LIST
16009: LIST
16010: LIST
16011: LIST
16012: LIST
16013: LIST
16014: LIST
16015: LIST
16016: LIST
16017: LIST
16018: LIST
16019: LIST
16020: LIST
16021: LIST
16022: LIST
16023: LIST
16024: PUSH
16025: EMPTY
16026: LIST
16027: LIST
16028: ST_TO_ADDR
16029: GO 17268
16031: LD_INT 14
16033: DOUBLE
16034: EQUAL
16035: IFTRUE 16039
16037: GO 16263
16039: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
16040: LD_ADDR_VAR 0 2
16044: PUSH
16045: LD_INT 1
16047: PUSH
16048: LD_INT 2
16050: PUSH
16051: LD_INT 3
16053: PUSH
16054: LD_INT 4
16056: PUSH
16057: LD_INT 5
16059: PUSH
16060: LD_INT 6
16062: PUSH
16063: LD_INT 7
16065: PUSH
16066: LD_INT 8
16068: PUSH
16069: LD_INT 9
16071: PUSH
16072: LD_INT 10
16074: PUSH
16075: LD_INT 11
16077: PUSH
16078: LD_INT 12
16080: PUSH
16081: LD_INT 13
16083: PUSH
16084: LD_INT 14
16086: PUSH
16087: LD_INT 15
16089: PUSH
16090: LD_INT 16
16092: PUSH
16093: LD_INT 17
16095: PUSH
16096: LD_INT 18
16098: PUSH
16099: LD_INT 19
16101: PUSH
16102: LD_INT 20
16104: PUSH
16105: LD_INT 21
16107: PUSH
16108: LD_INT 22
16110: PUSH
16111: LD_INT 23
16113: PUSH
16114: LD_INT 24
16116: PUSH
16117: LD_INT 25
16119: PUSH
16120: LD_INT 26
16122: PUSH
16123: LD_INT 27
16125: PUSH
16126: LD_INT 28
16128: PUSH
16129: LD_INT 29
16131: PUSH
16132: LD_INT 30
16134: PUSH
16135: LD_INT 31
16137: PUSH
16138: LD_INT 32
16140: PUSH
16141: LD_INT 33
16143: PUSH
16144: LD_INT 34
16146: PUSH
16147: LD_INT 36
16149: PUSH
16150: EMPTY
16151: LIST
16152: LIST
16153: LIST
16154: LIST
16155: LIST
16156: LIST
16157: LIST
16158: LIST
16159: LIST
16160: LIST
16161: LIST
16162: LIST
16163: LIST
16164: LIST
16165: LIST
16166: LIST
16167: LIST
16168: LIST
16169: LIST
16170: LIST
16171: LIST
16172: LIST
16173: LIST
16174: LIST
16175: LIST
16176: LIST
16177: LIST
16178: LIST
16179: LIST
16180: LIST
16181: LIST
16182: LIST
16183: LIST
16184: LIST
16185: LIST
16186: PUSH
16187: LD_INT 101
16189: PUSH
16190: LD_INT 102
16192: PUSH
16193: LD_INT 103
16195: PUSH
16196: LD_INT 104
16198: PUSH
16199: LD_INT 105
16201: PUSH
16202: LD_INT 106
16204: PUSH
16205: LD_INT 107
16207: PUSH
16208: LD_INT 108
16210: PUSH
16211: LD_INT 109
16213: PUSH
16214: LD_INT 110
16216: PUSH
16217: LD_INT 111
16219: PUSH
16220: LD_INT 112
16222: PUSH
16223: LD_INT 113
16225: PUSH
16226: LD_INT 114
16228: PUSH
16229: LD_INT 116
16231: PUSH
16232: LD_INT 117
16234: PUSH
16235: LD_INT 118
16237: PUSH
16238: EMPTY
16239: LIST
16240: LIST
16241: LIST
16242: LIST
16243: LIST
16244: LIST
16245: LIST
16246: LIST
16247: LIST
16248: LIST
16249: LIST
16250: LIST
16251: LIST
16252: LIST
16253: LIST
16254: LIST
16255: LIST
16256: PUSH
16257: EMPTY
16258: LIST
16259: LIST
16260: ST_TO_ADDR
16261: GO 17268
16263: LD_INT 15
16265: DOUBLE
16266: EQUAL
16267: IFTRUE 16271
16269: GO 16495
16271: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
16272: LD_ADDR_VAR 0 2
16276: PUSH
16277: LD_INT 1
16279: PUSH
16280: LD_INT 2
16282: PUSH
16283: LD_INT 3
16285: PUSH
16286: LD_INT 4
16288: PUSH
16289: LD_INT 5
16291: PUSH
16292: LD_INT 6
16294: PUSH
16295: LD_INT 7
16297: PUSH
16298: LD_INT 8
16300: PUSH
16301: LD_INT 9
16303: PUSH
16304: LD_INT 10
16306: PUSH
16307: LD_INT 11
16309: PUSH
16310: LD_INT 12
16312: PUSH
16313: LD_INT 13
16315: PUSH
16316: LD_INT 14
16318: PUSH
16319: LD_INT 15
16321: PUSH
16322: LD_INT 16
16324: PUSH
16325: LD_INT 17
16327: PUSH
16328: LD_INT 18
16330: PUSH
16331: LD_INT 19
16333: PUSH
16334: LD_INT 20
16336: PUSH
16337: LD_INT 21
16339: PUSH
16340: LD_INT 22
16342: PUSH
16343: LD_INT 23
16345: PUSH
16346: LD_INT 24
16348: PUSH
16349: LD_INT 25
16351: PUSH
16352: LD_INT 26
16354: PUSH
16355: LD_INT 27
16357: PUSH
16358: LD_INT 28
16360: PUSH
16361: LD_INT 29
16363: PUSH
16364: LD_INT 30
16366: PUSH
16367: LD_INT 31
16369: PUSH
16370: LD_INT 32
16372: PUSH
16373: LD_INT 33
16375: PUSH
16376: LD_INT 34
16378: PUSH
16379: LD_INT 36
16381: PUSH
16382: EMPTY
16383: LIST
16384: LIST
16385: LIST
16386: LIST
16387: LIST
16388: LIST
16389: LIST
16390: LIST
16391: LIST
16392: LIST
16393: LIST
16394: LIST
16395: LIST
16396: LIST
16397: LIST
16398: LIST
16399: LIST
16400: LIST
16401: LIST
16402: LIST
16403: LIST
16404: LIST
16405: LIST
16406: LIST
16407: LIST
16408: LIST
16409: LIST
16410: LIST
16411: LIST
16412: LIST
16413: LIST
16414: LIST
16415: LIST
16416: LIST
16417: LIST
16418: PUSH
16419: LD_INT 101
16421: PUSH
16422: LD_INT 102
16424: PUSH
16425: LD_INT 103
16427: PUSH
16428: LD_INT 104
16430: PUSH
16431: LD_INT 105
16433: PUSH
16434: LD_INT 106
16436: PUSH
16437: LD_INT 107
16439: PUSH
16440: LD_INT 108
16442: PUSH
16443: LD_INT 109
16445: PUSH
16446: LD_INT 110
16448: PUSH
16449: LD_INT 111
16451: PUSH
16452: LD_INT 112
16454: PUSH
16455: LD_INT 113
16457: PUSH
16458: LD_INT 114
16460: PUSH
16461: LD_INT 116
16463: PUSH
16464: LD_INT 117
16466: PUSH
16467: LD_INT 118
16469: PUSH
16470: EMPTY
16471: LIST
16472: LIST
16473: LIST
16474: LIST
16475: LIST
16476: LIST
16477: LIST
16478: LIST
16479: LIST
16480: LIST
16481: LIST
16482: LIST
16483: LIST
16484: LIST
16485: LIST
16486: LIST
16487: LIST
16488: PUSH
16489: EMPTY
16490: LIST
16491: LIST
16492: ST_TO_ADDR
16493: GO 17268
16495: LD_INT 16
16497: DOUBLE
16498: EQUAL
16499: IFTRUE 16503
16501: GO 16639
16503: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
16504: LD_ADDR_VAR 0 2
16508: PUSH
16509: LD_INT 2
16511: PUSH
16512: LD_INT 4
16514: PUSH
16515: LD_INT 5
16517: PUSH
16518: LD_INT 7
16520: PUSH
16521: LD_INT 11
16523: PUSH
16524: LD_INT 12
16526: PUSH
16527: LD_INT 15
16529: PUSH
16530: LD_INT 16
16532: PUSH
16533: LD_INT 20
16535: PUSH
16536: LD_INT 21
16538: PUSH
16539: LD_INT 22
16541: PUSH
16542: LD_INT 23
16544: PUSH
16545: LD_INT 25
16547: PUSH
16548: LD_INT 26
16550: PUSH
16551: LD_INT 30
16553: PUSH
16554: LD_INT 31
16556: PUSH
16557: LD_INT 32
16559: PUSH
16560: LD_INT 33
16562: PUSH
16563: LD_INT 34
16565: PUSH
16566: EMPTY
16567: LIST
16568: LIST
16569: LIST
16570: LIST
16571: LIST
16572: LIST
16573: LIST
16574: LIST
16575: LIST
16576: LIST
16577: LIST
16578: LIST
16579: LIST
16580: LIST
16581: LIST
16582: LIST
16583: LIST
16584: LIST
16585: LIST
16586: PUSH
16587: LD_INT 101
16589: PUSH
16590: LD_INT 102
16592: PUSH
16593: LD_INT 103
16595: PUSH
16596: LD_INT 106
16598: PUSH
16599: LD_INT 108
16601: PUSH
16602: LD_INT 112
16604: PUSH
16605: LD_INT 113
16607: PUSH
16608: LD_INT 114
16610: PUSH
16611: LD_INT 116
16613: PUSH
16614: LD_INT 117
16616: PUSH
16617: LD_INT 118
16619: PUSH
16620: EMPTY
16621: LIST
16622: LIST
16623: LIST
16624: LIST
16625: LIST
16626: LIST
16627: LIST
16628: LIST
16629: LIST
16630: LIST
16631: LIST
16632: PUSH
16633: EMPTY
16634: LIST
16635: LIST
16636: ST_TO_ADDR
16637: GO 17268
16639: LD_INT 17
16641: DOUBLE
16642: EQUAL
16643: IFTRUE 16647
16645: GO 16871
16647: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
16648: LD_ADDR_VAR 0 2
16652: PUSH
16653: LD_INT 1
16655: PUSH
16656: LD_INT 2
16658: PUSH
16659: LD_INT 3
16661: PUSH
16662: LD_INT 4
16664: PUSH
16665: LD_INT 5
16667: PUSH
16668: LD_INT 6
16670: PUSH
16671: LD_INT 7
16673: PUSH
16674: LD_INT 8
16676: PUSH
16677: LD_INT 9
16679: PUSH
16680: LD_INT 10
16682: PUSH
16683: LD_INT 11
16685: PUSH
16686: LD_INT 12
16688: PUSH
16689: LD_INT 13
16691: PUSH
16692: LD_INT 14
16694: PUSH
16695: LD_INT 15
16697: PUSH
16698: LD_INT 16
16700: PUSH
16701: LD_INT 17
16703: PUSH
16704: LD_INT 18
16706: PUSH
16707: LD_INT 19
16709: PUSH
16710: LD_INT 20
16712: PUSH
16713: LD_INT 21
16715: PUSH
16716: LD_INT 22
16718: PUSH
16719: LD_INT 23
16721: PUSH
16722: LD_INT 24
16724: PUSH
16725: LD_INT 25
16727: PUSH
16728: LD_INT 26
16730: PUSH
16731: LD_INT 27
16733: PUSH
16734: LD_INT 28
16736: PUSH
16737: LD_INT 29
16739: PUSH
16740: LD_INT 30
16742: PUSH
16743: LD_INT 31
16745: PUSH
16746: LD_INT 32
16748: PUSH
16749: LD_INT 33
16751: PUSH
16752: LD_INT 34
16754: PUSH
16755: LD_INT 36
16757: PUSH
16758: EMPTY
16759: LIST
16760: LIST
16761: LIST
16762: LIST
16763: LIST
16764: LIST
16765: LIST
16766: LIST
16767: LIST
16768: LIST
16769: LIST
16770: LIST
16771: LIST
16772: LIST
16773: LIST
16774: LIST
16775: LIST
16776: LIST
16777: LIST
16778: LIST
16779: LIST
16780: LIST
16781: LIST
16782: LIST
16783: LIST
16784: LIST
16785: LIST
16786: LIST
16787: LIST
16788: LIST
16789: LIST
16790: LIST
16791: LIST
16792: LIST
16793: LIST
16794: PUSH
16795: LD_INT 101
16797: PUSH
16798: LD_INT 102
16800: PUSH
16801: LD_INT 103
16803: PUSH
16804: LD_INT 104
16806: PUSH
16807: LD_INT 105
16809: PUSH
16810: LD_INT 106
16812: PUSH
16813: LD_INT 107
16815: PUSH
16816: LD_INT 108
16818: PUSH
16819: LD_INT 109
16821: PUSH
16822: LD_INT 110
16824: PUSH
16825: LD_INT 111
16827: PUSH
16828: LD_INT 112
16830: PUSH
16831: LD_INT 113
16833: PUSH
16834: LD_INT 114
16836: PUSH
16837: LD_INT 116
16839: PUSH
16840: LD_INT 117
16842: PUSH
16843: LD_INT 118
16845: PUSH
16846: EMPTY
16847: LIST
16848: LIST
16849: LIST
16850: LIST
16851: LIST
16852: LIST
16853: LIST
16854: LIST
16855: LIST
16856: LIST
16857: LIST
16858: LIST
16859: LIST
16860: LIST
16861: LIST
16862: LIST
16863: LIST
16864: PUSH
16865: EMPTY
16866: LIST
16867: LIST
16868: ST_TO_ADDR
16869: GO 17268
16871: LD_INT 18
16873: DOUBLE
16874: EQUAL
16875: IFTRUE 16879
16877: GO 17027
16879: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
16880: LD_ADDR_VAR 0 2
16884: PUSH
16885: LD_INT 2
16887: PUSH
16888: LD_INT 4
16890: PUSH
16891: LD_INT 5
16893: PUSH
16894: LD_INT 7
16896: PUSH
16897: LD_INT 11
16899: PUSH
16900: LD_INT 12
16902: PUSH
16903: LD_INT 15
16905: PUSH
16906: LD_INT 16
16908: PUSH
16909: LD_INT 20
16911: PUSH
16912: LD_INT 21
16914: PUSH
16915: LD_INT 22
16917: PUSH
16918: LD_INT 23
16920: PUSH
16921: LD_INT 25
16923: PUSH
16924: LD_INT 26
16926: PUSH
16927: LD_INT 30
16929: PUSH
16930: LD_INT 31
16932: PUSH
16933: LD_INT 32
16935: PUSH
16936: LD_INT 33
16938: PUSH
16939: LD_INT 34
16941: PUSH
16942: LD_INT 35
16944: PUSH
16945: LD_INT 36
16947: PUSH
16948: EMPTY
16949: LIST
16950: LIST
16951: LIST
16952: LIST
16953: LIST
16954: LIST
16955: LIST
16956: LIST
16957: LIST
16958: LIST
16959: LIST
16960: LIST
16961: LIST
16962: LIST
16963: LIST
16964: LIST
16965: LIST
16966: LIST
16967: LIST
16968: LIST
16969: LIST
16970: PUSH
16971: LD_INT 101
16973: PUSH
16974: LD_INT 102
16976: PUSH
16977: LD_INT 103
16979: PUSH
16980: LD_INT 106
16982: PUSH
16983: LD_INT 108
16985: PUSH
16986: LD_INT 112
16988: PUSH
16989: LD_INT 113
16991: PUSH
16992: LD_INT 114
16994: PUSH
16995: LD_INT 115
16997: PUSH
16998: LD_INT 116
17000: PUSH
17001: LD_INT 117
17003: PUSH
17004: LD_INT 118
17006: PUSH
17007: EMPTY
17008: LIST
17009: LIST
17010: LIST
17011: LIST
17012: LIST
17013: LIST
17014: LIST
17015: LIST
17016: LIST
17017: LIST
17018: LIST
17019: LIST
17020: PUSH
17021: EMPTY
17022: LIST
17023: LIST
17024: ST_TO_ADDR
17025: GO 17268
17027: LD_INT 19
17029: DOUBLE
17030: EQUAL
17031: IFTRUE 17035
17033: GO 17267
17035: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
17036: LD_ADDR_VAR 0 2
17040: PUSH
17041: LD_INT 1
17043: PUSH
17044: LD_INT 2
17046: PUSH
17047: LD_INT 3
17049: PUSH
17050: LD_INT 4
17052: PUSH
17053: LD_INT 5
17055: PUSH
17056: LD_INT 6
17058: PUSH
17059: LD_INT 7
17061: PUSH
17062: LD_INT 8
17064: PUSH
17065: LD_INT 9
17067: PUSH
17068: LD_INT 10
17070: PUSH
17071: LD_INT 11
17073: PUSH
17074: LD_INT 12
17076: PUSH
17077: LD_INT 13
17079: PUSH
17080: LD_INT 14
17082: PUSH
17083: LD_INT 15
17085: PUSH
17086: LD_INT 16
17088: PUSH
17089: LD_INT 17
17091: PUSH
17092: LD_INT 18
17094: PUSH
17095: LD_INT 19
17097: PUSH
17098: LD_INT 20
17100: PUSH
17101: LD_INT 21
17103: PUSH
17104: LD_INT 22
17106: PUSH
17107: LD_INT 23
17109: PUSH
17110: LD_INT 24
17112: PUSH
17113: LD_INT 25
17115: PUSH
17116: LD_INT 26
17118: PUSH
17119: LD_INT 27
17121: PUSH
17122: LD_INT 28
17124: PUSH
17125: LD_INT 29
17127: PUSH
17128: LD_INT 30
17130: PUSH
17131: LD_INT 31
17133: PUSH
17134: LD_INT 32
17136: PUSH
17137: LD_INT 33
17139: PUSH
17140: LD_INT 34
17142: PUSH
17143: LD_INT 35
17145: PUSH
17146: LD_INT 36
17148: PUSH
17149: EMPTY
17150: LIST
17151: LIST
17152: LIST
17153: LIST
17154: LIST
17155: LIST
17156: LIST
17157: LIST
17158: LIST
17159: LIST
17160: LIST
17161: LIST
17162: LIST
17163: LIST
17164: LIST
17165: LIST
17166: LIST
17167: LIST
17168: LIST
17169: LIST
17170: LIST
17171: LIST
17172: LIST
17173: LIST
17174: LIST
17175: LIST
17176: LIST
17177: LIST
17178: LIST
17179: LIST
17180: LIST
17181: LIST
17182: LIST
17183: LIST
17184: LIST
17185: LIST
17186: PUSH
17187: LD_INT 101
17189: PUSH
17190: LD_INT 102
17192: PUSH
17193: LD_INT 103
17195: PUSH
17196: LD_INT 104
17198: PUSH
17199: LD_INT 105
17201: PUSH
17202: LD_INT 106
17204: PUSH
17205: LD_INT 107
17207: PUSH
17208: LD_INT 108
17210: PUSH
17211: LD_INT 109
17213: PUSH
17214: LD_INT 110
17216: PUSH
17217: LD_INT 111
17219: PUSH
17220: LD_INT 112
17222: PUSH
17223: LD_INT 113
17225: PUSH
17226: LD_INT 114
17228: PUSH
17229: LD_INT 115
17231: PUSH
17232: LD_INT 116
17234: PUSH
17235: LD_INT 117
17237: PUSH
17238: LD_INT 118
17240: PUSH
17241: EMPTY
17242: LIST
17243: LIST
17244: LIST
17245: LIST
17246: LIST
17247: LIST
17248: LIST
17249: LIST
17250: LIST
17251: LIST
17252: LIST
17253: LIST
17254: LIST
17255: LIST
17256: LIST
17257: LIST
17258: LIST
17259: LIST
17260: PUSH
17261: EMPTY
17262: LIST
17263: LIST
17264: ST_TO_ADDR
17265: GO 17268
17267: POP
// end else
17268: GO 17499
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
17270: LD_ADDR_VAR 0 2
17274: PUSH
17275: LD_INT 1
17277: PUSH
17278: LD_INT 2
17280: PUSH
17281: LD_INT 3
17283: PUSH
17284: LD_INT 4
17286: PUSH
17287: LD_INT 5
17289: PUSH
17290: LD_INT 6
17292: PUSH
17293: LD_INT 7
17295: PUSH
17296: LD_INT 8
17298: PUSH
17299: LD_INT 9
17301: PUSH
17302: LD_INT 10
17304: PUSH
17305: LD_INT 11
17307: PUSH
17308: LD_INT 12
17310: PUSH
17311: LD_INT 13
17313: PUSH
17314: LD_INT 14
17316: PUSH
17317: LD_INT 15
17319: PUSH
17320: LD_INT 16
17322: PUSH
17323: LD_INT 17
17325: PUSH
17326: LD_INT 18
17328: PUSH
17329: LD_INT 19
17331: PUSH
17332: LD_INT 20
17334: PUSH
17335: LD_INT 21
17337: PUSH
17338: LD_INT 22
17340: PUSH
17341: LD_INT 23
17343: PUSH
17344: LD_INT 24
17346: PUSH
17347: LD_INT 25
17349: PUSH
17350: LD_INT 26
17352: PUSH
17353: LD_INT 27
17355: PUSH
17356: LD_INT 28
17358: PUSH
17359: LD_INT 29
17361: PUSH
17362: LD_INT 30
17364: PUSH
17365: LD_INT 31
17367: PUSH
17368: LD_INT 32
17370: PUSH
17371: LD_INT 33
17373: PUSH
17374: LD_INT 34
17376: PUSH
17377: LD_INT 35
17379: PUSH
17380: LD_INT 36
17382: PUSH
17383: EMPTY
17384: LIST
17385: LIST
17386: LIST
17387: LIST
17388: LIST
17389: LIST
17390: LIST
17391: LIST
17392: LIST
17393: LIST
17394: LIST
17395: LIST
17396: LIST
17397: LIST
17398: LIST
17399: LIST
17400: LIST
17401: LIST
17402: LIST
17403: LIST
17404: LIST
17405: LIST
17406: LIST
17407: LIST
17408: LIST
17409: LIST
17410: LIST
17411: LIST
17412: LIST
17413: LIST
17414: LIST
17415: LIST
17416: LIST
17417: LIST
17418: LIST
17419: LIST
17420: PUSH
17421: LD_INT 101
17423: PUSH
17424: LD_INT 102
17426: PUSH
17427: LD_INT 103
17429: PUSH
17430: LD_INT 104
17432: PUSH
17433: LD_INT 105
17435: PUSH
17436: LD_INT 106
17438: PUSH
17439: LD_INT 107
17441: PUSH
17442: LD_INT 108
17444: PUSH
17445: LD_INT 109
17447: PUSH
17448: LD_INT 110
17450: PUSH
17451: LD_INT 111
17453: PUSH
17454: LD_INT 112
17456: PUSH
17457: LD_INT 113
17459: PUSH
17460: LD_INT 114
17462: PUSH
17463: LD_INT 115
17465: PUSH
17466: LD_INT 116
17468: PUSH
17469: LD_INT 117
17471: PUSH
17472: LD_INT 118
17474: PUSH
17475: EMPTY
17476: LIST
17477: LIST
17478: LIST
17479: LIST
17480: LIST
17481: LIST
17482: LIST
17483: LIST
17484: LIST
17485: LIST
17486: LIST
17487: LIST
17488: LIST
17489: LIST
17490: LIST
17491: LIST
17492: LIST
17493: LIST
17494: PUSH
17495: EMPTY
17496: LIST
17497: LIST
17498: ST_TO_ADDR
// if result then
17499: LD_VAR 0 2
17503: IFFALSE 18289
// begin normal :=  ;
17505: LD_ADDR_VAR 0 5
17509: PUSH
17510: LD_STRING 
17512: ST_TO_ADDR
// hardcore :=  ;
17513: LD_ADDR_VAR 0 6
17517: PUSH
17518: LD_STRING 
17520: ST_TO_ADDR
// active :=  ;
17521: LD_ADDR_VAR 0 7
17525: PUSH
17526: LD_STRING 
17528: ST_TO_ADDR
// for i = 1 to normalCounter do
17529: LD_ADDR_VAR 0 8
17533: PUSH
17534: DOUBLE
17535: LD_INT 1
17537: DEC
17538: ST_TO_ADDR
17539: LD_EXP 23
17543: PUSH
17544: FOR_TO
17545: IFFALSE 17646
// begin tmp := 0 ;
17547: LD_ADDR_VAR 0 3
17551: PUSH
17552: LD_STRING 0
17554: ST_TO_ADDR
// if result [ 1 ] then
17555: LD_VAR 0 2
17559: PUSH
17560: LD_INT 1
17562: ARRAY
17563: IFFALSE 17628
// if result [ 1 ] [ 1 ] = i then
17565: LD_VAR 0 2
17569: PUSH
17570: LD_INT 1
17572: ARRAY
17573: PUSH
17574: LD_INT 1
17576: ARRAY
17577: PUSH
17578: LD_VAR 0 8
17582: EQUAL
17583: IFFALSE 17628
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
17585: LD_ADDR_VAR 0 2
17589: PUSH
17590: LD_VAR 0 2
17594: PPUSH
17595: LD_INT 1
17597: PPUSH
17598: LD_VAR 0 2
17602: PUSH
17603: LD_INT 1
17605: ARRAY
17606: PPUSH
17607: LD_INT 1
17609: PPUSH
17610: CALL_OW 3
17614: PPUSH
17615: CALL_OW 1
17619: ST_TO_ADDR
// tmp := 1 ;
17620: LD_ADDR_VAR 0 3
17624: PUSH
17625: LD_STRING 1
17627: ST_TO_ADDR
// end ; normal := normal & tmp ;
17628: LD_ADDR_VAR 0 5
17632: PUSH
17633: LD_VAR 0 5
17637: PUSH
17638: LD_VAR 0 3
17642: STR
17643: ST_TO_ADDR
// end ;
17644: GO 17544
17646: POP
17647: POP
// for i = 1 to hardcoreCounter do
17648: LD_ADDR_VAR 0 8
17652: PUSH
17653: DOUBLE
17654: LD_INT 1
17656: DEC
17657: ST_TO_ADDR
17658: LD_EXP 24
17662: PUSH
17663: FOR_TO
17664: IFFALSE 17769
// begin tmp := 0 ;
17666: LD_ADDR_VAR 0 3
17670: PUSH
17671: LD_STRING 0
17673: ST_TO_ADDR
// if result [ 2 ] then
17674: LD_VAR 0 2
17678: PUSH
17679: LD_INT 2
17681: ARRAY
17682: IFFALSE 17751
// if result [ 2 ] [ 1 ] = 100 + i then
17684: LD_VAR 0 2
17688: PUSH
17689: LD_INT 2
17691: ARRAY
17692: PUSH
17693: LD_INT 1
17695: ARRAY
17696: PUSH
17697: LD_INT 100
17699: PUSH
17700: LD_VAR 0 8
17704: PLUS
17705: EQUAL
17706: IFFALSE 17751
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
17708: LD_ADDR_VAR 0 2
17712: PUSH
17713: LD_VAR 0 2
17717: PPUSH
17718: LD_INT 2
17720: PPUSH
17721: LD_VAR 0 2
17725: PUSH
17726: LD_INT 2
17728: ARRAY
17729: PPUSH
17730: LD_INT 1
17732: PPUSH
17733: CALL_OW 3
17737: PPUSH
17738: CALL_OW 1
17742: ST_TO_ADDR
// tmp := 1 ;
17743: LD_ADDR_VAR 0 3
17747: PUSH
17748: LD_STRING 1
17750: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
17751: LD_ADDR_VAR 0 6
17755: PUSH
17756: LD_VAR 0 6
17760: PUSH
17761: LD_VAR 0 3
17765: STR
17766: ST_TO_ADDR
// end ;
17767: GO 17663
17769: POP
17770: POP
// if isGameLoad then
17771: LD_VAR 0 1
17775: IFFALSE 18250
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
17777: LD_ADDR_VAR 0 4
17781: PUSH
17782: LD_EXP 27
17786: PUSH
17787: LD_EXP 26
17791: PUSH
17792: LD_EXP 28
17796: PUSH
17797: LD_EXP 25
17801: PUSH
17802: LD_EXP 29
17806: PUSH
17807: LD_EXP 30
17811: PUSH
17812: LD_EXP 31
17816: PUSH
17817: LD_EXP 32
17821: PUSH
17822: LD_EXP 33
17826: PUSH
17827: LD_EXP 34
17831: PUSH
17832: LD_EXP 35
17836: PUSH
17837: LD_EXP 36
17841: PUSH
17842: LD_EXP 37
17846: PUSH
17847: LD_EXP 38
17851: PUSH
17852: LD_EXP 46
17856: PUSH
17857: LD_EXP 47
17861: PUSH
17862: LD_EXP 48
17866: PUSH
17867: LD_EXP 49
17871: PUSH
17872: LD_EXP 51
17876: PUSH
17877: LD_EXP 52
17881: PUSH
17882: LD_EXP 53
17886: PUSH
17887: LD_EXP 56
17891: PUSH
17892: LD_EXP 58
17896: PUSH
17897: LD_EXP 59
17901: PUSH
17902: LD_EXP 60
17906: PUSH
17907: LD_EXP 62
17911: PUSH
17912: LD_EXP 63
17916: PUSH
17917: LD_EXP 66
17921: PUSH
17922: LD_EXP 67
17926: PUSH
17927: LD_EXP 68
17931: PUSH
17932: LD_EXP 69
17936: PUSH
17937: LD_EXP 70
17941: PUSH
17942: LD_EXP 71
17946: PUSH
17947: LD_EXP 72
17951: PUSH
17952: LD_EXP 73
17956: PUSH
17957: LD_EXP 74
17961: PUSH
17962: LD_EXP 39
17966: PUSH
17967: LD_EXP 40
17971: PUSH
17972: LD_EXP 43
17976: PUSH
17977: LD_EXP 44
17981: PUSH
17982: LD_EXP 45
17986: PUSH
17987: LD_EXP 41
17991: PUSH
17992: LD_EXP 42
17996: PUSH
17997: LD_EXP 50
18001: PUSH
18002: LD_EXP 54
18006: PUSH
18007: LD_EXP 55
18011: PUSH
18012: LD_EXP 57
18016: PUSH
18017: LD_EXP 61
18021: PUSH
18022: LD_EXP 64
18026: PUSH
18027: LD_EXP 65
18031: PUSH
18032: LD_EXP 75
18036: PUSH
18037: LD_EXP 76
18041: PUSH
18042: LD_EXP 77
18046: PUSH
18047: LD_EXP 78
18051: PUSH
18052: EMPTY
18053: LIST
18054: LIST
18055: LIST
18056: LIST
18057: LIST
18058: LIST
18059: LIST
18060: LIST
18061: LIST
18062: LIST
18063: LIST
18064: LIST
18065: LIST
18066: LIST
18067: LIST
18068: LIST
18069: LIST
18070: LIST
18071: LIST
18072: LIST
18073: LIST
18074: LIST
18075: LIST
18076: LIST
18077: LIST
18078: LIST
18079: LIST
18080: LIST
18081: LIST
18082: LIST
18083: LIST
18084: LIST
18085: LIST
18086: LIST
18087: LIST
18088: LIST
18089: LIST
18090: LIST
18091: LIST
18092: LIST
18093: LIST
18094: LIST
18095: LIST
18096: LIST
18097: LIST
18098: LIST
18099: LIST
18100: LIST
18101: LIST
18102: LIST
18103: LIST
18104: LIST
18105: LIST
18106: LIST
18107: ST_TO_ADDR
// tmp :=  ;
18108: LD_ADDR_VAR 0 3
18112: PUSH
18113: LD_STRING 
18115: ST_TO_ADDR
// for i = 1 to normalCounter do
18116: LD_ADDR_VAR 0 8
18120: PUSH
18121: DOUBLE
18122: LD_INT 1
18124: DEC
18125: ST_TO_ADDR
18126: LD_EXP 23
18130: PUSH
18131: FOR_TO
18132: IFFALSE 18168
// begin if flags [ i ] then
18134: LD_VAR 0 4
18138: PUSH
18139: LD_VAR 0 8
18143: ARRAY
18144: IFFALSE 18166
// tmp := tmp & i & ; ;
18146: LD_ADDR_VAR 0 3
18150: PUSH
18151: LD_VAR 0 3
18155: PUSH
18156: LD_VAR 0 8
18160: STR
18161: PUSH
18162: LD_STRING ;
18164: STR
18165: ST_TO_ADDR
// end ;
18166: GO 18131
18168: POP
18169: POP
// for i = 1 to hardcoreCounter do
18170: LD_ADDR_VAR 0 8
18174: PUSH
18175: DOUBLE
18176: LD_INT 1
18178: DEC
18179: ST_TO_ADDR
18180: LD_EXP 24
18184: PUSH
18185: FOR_TO
18186: IFFALSE 18232
// begin if flags [ normalCounter + i ] then
18188: LD_VAR 0 4
18192: PUSH
18193: LD_EXP 23
18197: PUSH
18198: LD_VAR 0 8
18202: PLUS
18203: ARRAY
18204: IFFALSE 18230
// tmp := tmp & ( 100 + i ) & ; ;
18206: LD_ADDR_VAR 0 3
18210: PUSH
18211: LD_VAR 0 3
18215: PUSH
18216: LD_INT 100
18218: PUSH
18219: LD_VAR 0 8
18223: PLUS
18224: STR
18225: PUSH
18226: LD_STRING ;
18228: STR
18229: ST_TO_ADDR
// end ;
18230: GO 18185
18232: POP
18233: POP
// if tmp then
18234: LD_VAR 0 3
18238: IFFALSE 18250
// active := tmp ;
18240: LD_ADDR_VAR 0 7
18244: PUSH
18245: LD_VAR 0 3
18249: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
18250: LD_STRING getStreamItemsFromMission("
18252: PUSH
18253: LD_VAR 0 5
18257: STR
18258: PUSH
18259: LD_STRING ","
18261: STR
18262: PUSH
18263: LD_VAR 0 6
18267: STR
18268: PUSH
18269: LD_STRING ","
18271: STR
18272: PUSH
18273: LD_VAR 0 7
18277: STR
18278: PUSH
18279: LD_STRING ")
18281: STR
18282: PPUSH
18283: CALL_OW 559
// end else
18287: GO 18296
// ToLua ( getStreamItemsFromMission("","","") ) ;
18289: LD_STRING getStreamItemsFromMission("","","")
18291: PPUSH
18292: CALL_OW 559
// end ;
18296: LD_VAR 0 2
18300: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
18301: LD_EXP 22
18305: PUSH
18306: LD_EXP 27
18310: AND
18311: IFFALSE 18435
18313: GO 18315
18315: DISABLE
18316: LD_INT 0
18318: PPUSH
18319: PPUSH
// begin enable ;
18320: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
18321: LD_ADDR_VAR 0 2
18325: PUSH
18326: LD_INT 22
18328: PUSH
18329: LD_OWVAR 2
18333: PUSH
18334: EMPTY
18335: LIST
18336: LIST
18337: PUSH
18338: LD_INT 2
18340: PUSH
18341: LD_INT 34
18343: PUSH
18344: LD_INT 7
18346: PUSH
18347: EMPTY
18348: LIST
18349: LIST
18350: PUSH
18351: LD_INT 34
18353: PUSH
18354: LD_INT 45
18356: PUSH
18357: EMPTY
18358: LIST
18359: LIST
18360: PUSH
18361: LD_INT 34
18363: PUSH
18364: LD_INT 28
18366: PUSH
18367: EMPTY
18368: LIST
18369: LIST
18370: PUSH
18371: LD_INT 34
18373: PUSH
18374: LD_INT 47
18376: PUSH
18377: EMPTY
18378: LIST
18379: LIST
18380: PUSH
18381: EMPTY
18382: LIST
18383: LIST
18384: LIST
18385: LIST
18386: LIST
18387: PUSH
18388: EMPTY
18389: LIST
18390: LIST
18391: PPUSH
18392: CALL_OW 69
18396: ST_TO_ADDR
// if not tmp then
18397: LD_VAR 0 2
18401: NOT
18402: IFFALSE 18406
// exit ;
18404: GO 18435
// for i in tmp do
18406: LD_ADDR_VAR 0 1
18410: PUSH
18411: LD_VAR 0 2
18415: PUSH
18416: FOR_IN
18417: IFFALSE 18433
// begin SetLives ( i , 0 ) ;
18419: LD_VAR 0 1
18423: PPUSH
18424: LD_INT 0
18426: PPUSH
18427: CALL_OW 234
// end ;
18431: GO 18416
18433: POP
18434: POP
// end ;
18435: PPOPN 2
18437: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
18438: LD_EXP 22
18442: PUSH
18443: LD_EXP 28
18447: AND
18448: IFFALSE 18532
18450: GO 18452
18452: DISABLE
18453: LD_INT 0
18455: PPUSH
18456: PPUSH
// begin enable ;
18457: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
18458: LD_ADDR_VAR 0 2
18462: PUSH
18463: LD_INT 22
18465: PUSH
18466: LD_OWVAR 2
18470: PUSH
18471: EMPTY
18472: LIST
18473: LIST
18474: PUSH
18475: LD_INT 32
18477: PUSH
18478: LD_INT 3
18480: PUSH
18481: EMPTY
18482: LIST
18483: LIST
18484: PUSH
18485: EMPTY
18486: LIST
18487: LIST
18488: PPUSH
18489: CALL_OW 69
18493: ST_TO_ADDR
// if not tmp then
18494: LD_VAR 0 2
18498: NOT
18499: IFFALSE 18503
// exit ;
18501: GO 18532
// for i in tmp do
18503: LD_ADDR_VAR 0 1
18507: PUSH
18508: LD_VAR 0 2
18512: PUSH
18513: FOR_IN
18514: IFFALSE 18530
// begin SetLives ( i , 0 ) ;
18516: LD_VAR 0 1
18520: PPUSH
18521: LD_INT 0
18523: PPUSH
18524: CALL_OW 234
// end ;
18528: GO 18513
18530: POP
18531: POP
// end ;
18532: PPOPN 2
18534: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
18535: LD_EXP 22
18539: PUSH
18540: LD_EXP 25
18544: AND
18545: IFFALSE 18638
18547: GO 18549
18549: DISABLE
18550: LD_INT 0
18552: PPUSH
// begin enable ;
18553: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
18554: LD_ADDR_VAR 0 1
18558: PUSH
18559: LD_INT 22
18561: PUSH
18562: LD_OWVAR 2
18566: PUSH
18567: EMPTY
18568: LIST
18569: LIST
18570: PUSH
18571: LD_INT 2
18573: PUSH
18574: LD_INT 25
18576: PUSH
18577: LD_INT 5
18579: PUSH
18580: EMPTY
18581: LIST
18582: LIST
18583: PUSH
18584: LD_INT 25
18586: PUSH
18587: LD_INT 9
18589: PUSH
18590: EMPTY
18591: LIST
18592: LIST
18593: PUSH
18594: LD_INT 25
18596: PUSH
18597: LD_INT 8
18599: PUSH
18600: EMPTY
18601: LIST
18602: LIST
18603: PUSH
18604: EMPTY
18605: LIST
18606: LIST
18607: LIST
18608: LIST
18609: PUSH
18610: EMPTY
18611: LIST
18612: LIST
18613: PPUSH
18614: CALL_OW 69
18618: PUSH
18619: FOR_IN
18620: IFFALSE 18636
// begin SetClass ( i , 1 ) ;
18622: LD_VAR 0 1
18626: PPUSH
18627: LD_INT 1
18629: PPUSH
18630: CALL_OW 336
// end ;
18634: GO 18619
18636: POP
18637: POP
// end ;
18638: PPOPN 1
18640: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
18641: LD_EXP 22
18645: PUSH
18646: LD_EXP 26
18650: AND
18651: PUSH
18652: LD_OWVAR 65
18656: PUSH
18657: LD_INT 7
18659: LESS
18660: AND
18661: IFFALSE 18675
18663: GO 18665
18665: DISABLE
// begin enable ;
18666: ENABLE
// game_speed := 7 ;
18667: LD_ADDR_OWVAR 65
18671: PUSH
18672: LD_INT 7
18674: ST_TO_ADDR
// end ;
18675: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
18676: LD_EXP 22
18680: PUSH
18681: LD_EXP 29
18685: AND
18686: IFFALSE 18888
18688: GO 18690
18690: DISABLE
18691: LD_INT 0
18693: PPUSH
18694: PPUSH
18695: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
18696: LD_ADDR_VAR 0 3
18700: PUSH
18701: LD_INT 81
18703: PUSH
18704: LD_OWVAR 2
18708: PUSH
18709: EMPTY
18710: LIST
18711: LIST
18712: PUSH
18713: LD_INT 21
18715: PUSH
18716: LD_INT 1
18718: PUSH
18719: EMPTY
18720: LIST
18721: LIST
18722: PUSH
18723: EMPTY
18724: LIST
18725: LIST
18726: PPUSH
18727: CALL_OW 69
18731: ST_TO_ADDR
// if not tmp then
18732: LD_VAR 0 3
18736: NOT
18737: IFFALSE 18741
// exit ;
18739: GO 18888
// if tmp > 5 then
18741: LD_VAR 0 3
18745: PUSH
18746: LD_INT 5
18748: GREATER
18749: IFFALSE 18761
// k := 5 else
18751: LD_ADDR_VAR 0 2
18755: PUSH
18756: LD_INT 5
18758: ST_TO_ADDR
18759: GO 18771
// k := tmp ;
18761: LD_ADDR_VAR 0 2
18765: PUSH
18766: LD_VAR 0 3
18770: ST_TO_ADDR
// for i := 1 to k do
18771: LD_ADDR_VAR 0 1
18775: PUSH
18776: DOUBLE
18777: LD_INT 1
18779: DEC
18780: ST_TO_ADDR
18781: LD_VAR 0 2
18785: PUSH
18786: FOR_TO
18787: IFFALSE 18886
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
18789: LD_VAR 0 3
18793: PUSH
18794: LD_VAR 0 1
18798: ARRAY
18799: PPUSH
18800: LD_VAR 0 1
18804: PUSH
18805: LD_INT 4
18807: MOD
18808: PUSH
18809: LD_INT 1
18811: PLUS
18812: PPUSH
18813: CALL_OW 259
18817: PUSH
18818: LD_INT 10
18820: LESS
18821: IFFALSE 18884
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
18823: LD_VAR 0 3
18827: PUSH
18828: LD_VAR 0 1
18832: ARRAY
18833: PPUSH
18834: LD_VAR 0 1
18838: PUSH
18839: LD_INT 4
18841: MOD
18842: PUSH
18843: LD_INT 1
18845: PLUS
18846: PPUSH
18847: LD_VAR 0 3
18851: PUSH
18852: LD_VAR 0 1
18856: ARRAY
18857: PPUSH
18858: LD_VAR 0 1
18862: PUSH
18863: LD_INT 4
18865: MOD
18866: PUSH
18867: LD_INT 1
18869: PLUS
18870: PPUSH
18871: CALL_OW 259
18875: PUSH
18876: LD_INT 1
18878: PLUS
18879: PPUSH
18880: CALL_OW 237
18884: GO 18786
18886: POP
18887: POP
// end ;
18888: PPOPN 3
18890: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
18891: LD_EXP 22
18895: PUSH
18896: LD_EXP 30
18900: AND
18901: IFFALSE 18921
18903: GO 18905
18905: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
18906: LD_INT 4
18908: PPUSH
18909: LD_OWVAR 2
18913: PPUSH
18914: LD_INT 0
18916: PPUSH
18917: CALL_OW 324
18921: END
// every 0 0$1 trigger StreamModeActive and sShovel do
18922: LD_EXP 22
18926: PUSH
18927: LD_EXP 59
18931: AND
18932: IFFALSE 18952
18934: GO 18936
18936: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
18937: LD_INT 19
18939: PPUSH
18940: LD_OWVAR 2
18944: PPUSH
18945: LD_INT 0
18947: PPUSH
18948: CALL_OW 324
18952: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
18953: LD_EXP 22
18957: PUSH
18958: LD_EXP 31
18962: AND
18963: IFFALSE 19065
18965: GO 18967
18967: DISABLE
18968: LD_INT 0
18970: PPUSH
18971: PPUSH
// begin enable ;
18972: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
18973: LD_ADDR_VAR 0 2
18977: PUSH
18978: LD_INT 22
18980: PUSH
18981: LD_OWVAR 2
18985: PUSH
18986: EMPTY
18987: LIST
18988: LIST
18989: PUSH
18990: LD_INT 2
18992: PUSH
18993: LD_INT 34
18995: PUSH
18996: LD_INT 11
18998: PUSH
18999: EMPTY
19000: LIST
19001: LIST
19002: PUSH
19003: LD_INT 34
19005: PUSH
19006: LD_INT 30
19008: PUSH
19009: EMPTY
19010: LIST
19011: LIST
19012: PUSH
19013: EMPTY
19014: LIST
19015: LIST
19016: LIST
19017: PUSH
19018: EMPTY
19019: LIST
19020: LIST
19021: PPUSH
19022: CALL_OW 69
19026: ST_TO_ADDR
// if not tmp then
19027: LD_VAR 0 2
19031: NOT
19032: IFFALSE 19036
// exit ;
19034: GO 19065
// for i in tmp do
19036: LD_ADDR_VAR 0 1
19040: PUSH
19041: LD_VAR 0 2
19045: PUSH
19046: FOR_IN
19047: IFFALSE 19063
// begin SetLives ( i , 0 ) ;
19049: LD_VAR 0 1
19053: PPUSH
19054: LD_INT 0
19056: PPUSH
19057: CALL_OW 234
// end ;
19061: GO 19046
19063: POP
19064: POP
// end ;
19065: PPOPN 2
19067: END
// every 0 0$1 trigger StreamModeActive and sBunker do
19068: LD_EXP 22
19072: PUSH
19073: LD_EXP 32
19077: AND
19078: IFFALSE 19098
19080: GO 19082
19082: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
19083: LD_INT 32
19085: PPUSH
19086: LD_OWVAR 2
19090: PPUSH
19091: LD_INT 0
19093: PPUSH
19094: CALL_OW 324
19098: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
19099: LD_EXP 22
19103: PUSH
19104: LD_EXP 33
19108: AND
19109: IFFALSE 19290
19111: GO 19113
19113: DISABLE
19114: LD_INT 0
19116: PPUSH
19117: PPUSH
19118: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
19119: LD_ADDR_VAR 0 2
19123: PUSH
19124: LD_INT 22
19126: PUSH
19127: LD_OWVAR 2
19131: PUSH
19132: EMPTY
19133: LIST
19134: LIST
19135: PUSH
19136: LD_INT 33
19138: PUSH
19139: LD_INT 3
19141: PUSH
19142: EMPTY
19143: LIST
19144: LIST
19145: PUSH
19146: EMPTY
19147: LIST
19148: LIST
19149: PPUSH
19150: CALL_OW 69
19154: ST_TO_ADDR
// if not tmp then
19155: LD_VAR 0 2
19159: NOT
19160: IFFALSE 19164
// exit ;
19162: GO 19290
// side := 0 ;
19164: LD_ADDR_VAR 0 3
19168: PUSH
19169: LD_INT 0
19171: ST_TO_ADDR
// for i := 1 to 8 do
19172: LD_ADDR_VAR 0 1
19176: PUSH
19177: DOUBLE
19178: LD_INT 1
19180: DEC
19181: ST_TO_ADDR
19182: LD_INT 8
19184: PUSH
19185: FOR_TO
19186: IFFALSE 19234
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
19188: LD_OWVAR 2
19192: PUSH
19193: LD_VAR 0 1
19197: NONEQUAL
19198: PUSH
19199: LD_OWVAR 2
19203: PPUSH
19204: LD_VAR 0 1
19208: PPUSH
19209: CALL_OW 81
19213: PUSH
19214: LD_INT 2
19216: EQUAL
19217: AND
19218: IFFALSE 19232
// begin side := i ;
19220: LD_ADDR_VAR 0 3
19224: PUSH
19225: LD_VAR 0 1
19229: ST_TO_ADDR
// break ;
19230: GO 19234
// end ;
19232: GO 19185
19234: POP
19235: POP
// if not side then
19236: LD_VAR 0 3
19240: NOT
19241: IFFALSE 19245
// exit ;
19243: GO 19290
// for i := 1 to tmp do
19245: LD_ADDR_VAR 0 1
19249: PUSH
19250: DOUBLE
19251: LD_INT 1
19253: DEC
19254: ST_TO_ADDR
19255: LD_VAR 0 2
19259: PUSH
19260: FOR_TO
19261: IFFALSE 19288
// if Prob ( 60 ) then
19263: LD_INT 60
19265: PPUSH
19266: CALL_OW 13
19270: IFFALSE 19286
// SetSide ( i , side ) ;
19272: LD_VAR 0 1
19276: PPUSH
19277: LD_VAR 0 3
19281: PPUSH
19282: CALL_OW 235
19286: GO 19260
19288: POP
19289: POP
// end ;
19290: PPOPN 3
19292: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
19293: LD_EXP 22
19297: PUSH
19298: LD_EXP 35
19302: AND
19303: IFFALSE 19422
19305: GO 19307
19307: DISABLE
19308: LD_INT 0
19310: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
19311: LD_ADDR_VAR 0 1
19315: PUSH
19316: LD_INT 22
19318: PUSH
19319: LD_OWVAR 2
19323: PUSH
19324: EMPTY
19325: LIST
19326: LIST
19327: PUSH
19328: LD_INT 21
19330: PUSH
19331: LD_INT 1
19333: PUSH
19334: EMPTY
19335: LIST
19336: LIST
19337: PUSH
19338: LD_INT 3
19340: PUSH
19341: LD_INT 23
19343: PUSH
19344: LD_INT 0
19346: PUSH
19347: EMPTY
19348: LIST
19349: LIST
19350: PUSH
19351: EMPTY
19352: LIST
19353: LIST
19354: PUSH
19355: EMPTY
19356: LIST
19357: LIST
19358: LIST
19359: PPUSH
19360: CALL_OW 69
19364: PUSH
19365: FOR_IN
19366: IFFALSE 19420
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
19368: LD_VAR 0 1
19372: PPUSH
19373: CALL_OW 257
19377: PUSH
19378: LD_INT 1
19380: PUSH
19381: LD_INT 2
19383: PUSH
19384: LD_INT 3
19386: PUSH
19387: LD_INT 4
19389: PUSH
19390: EMPTY
19391: LIST
19392: LIST
19393: LIST
19394: LIST
19395: IN
19396: IFFALSE 19418
// SetClass ( un , rand ( 1 , 4 ) ) ;
19398: LD_VAR 0 1
19402: PPUSH
19403: LD_INT 1
19405: PPUSH
19406: LD_INT 4
19408: PPUSH
19409: CALL_OW 12
19413: PPUSH
19414: CALL_OW 336
19418: GO 19365
19420: POP
19421: POP
// end ;
19422: PPOPN 1
19424: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
19425: LD_EXP 22
19429: PUSH
19430: LD_EXP 34
19434: AND
19435: IFFALSE 19514
19437: GO 19439
19439: DISABLE
19440: LD_INT 0
19442: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
19443: LD_ADDR_VAR 0 1
19447: PUSH
19448: LD_INT 22
19450: PUSH
19451: LD_OWVAR 2
19455: PUSH
19456: EMPTY
19457: LIST
19458: LIST
19459: PUSH
19460: LD_INT 21
19462: PUSH
19463: LD_INT 3
19465: PUSH
19466: EMPTY
19467: LIST
19468: LIST
19469: PUSH
19470: EMPTY
19471: LIST
19472: LIST
19473: PPUSH
19474: CALL_OW 69
19478: ST_TO_ADDR
// if not tmp then
19479: LD_VAR 0 1
19483: NOT
19484: IFFALSE 19488
// exit ;
19486: GO 19514
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
19488: LD_VAR 0 1
19492: PUSH
19493: LD_INT 1
19495: PPUSH
19496: LD_VAR 0 1
19500: PPUSH
19501: CALL_OW 12
19505: ARRAY
19506: PPUSH
19507: LD_INT 100
19509: PPUSH
19510: CALL_OW 234
// end ;
19514: PPOPN 1
19516: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
19517: LD_EXP 22
19521: PUSH
19522: LD_EXP 36
19526: AND
19527: IFFALSE 19625
19529: GO 19531
19531: DISABLE
19532: LD_INT 0
19534: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19535: LD_ADDR_VAR 0 1
19539: PUSH
19540: LD_INT 22
19542: PUSH
19543: LD_OWVAR 2
19547: PUSH
19548: EMPTY
19549: LIST
19550: LIST
19551: PUSH
19552: LD_INT 21
19554: PUSH
19555: LD_INT 1
19557: PUSH
19558: EMPTY
19559: LIST
19560: LIST
19561: PUSH
19562: EMPTY
19563: LIST
19564: LIST
19565: PPUSH
19566: CALL_OW 69
19570: ST_TO_ADDR
// if not tmp then
19571: LD_VAR 0 1
19575: NOT
19576: IFFALSE 19580
// exit ;
19578: GO 19625
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
19580: LD_VAR 0 1
19584: PUSH
19585: LD_INT 1
19587: PPUSH
19588: LD_VAR 0 1
19592: PPUSH
19593: CALL_OW 12
19597: ARRAY
19598: PPUSH
19599: LD_INT 1
19601: PPUSH
19602: LD_INT 4
19604: PPUSH
19605: CALL_OW 12
19609: PPUSH
19610: LD_INT 3000
19612: PPUSH
19613: LD_INT 9000
19615: PPUSH
19616: CALL_OW 12
19620: PPUSH
19621: CALL_OW 492
// end ;
19625: PPOPN 1
19627: END
// every 0 0$1 trigger StreamModeActive and sDepot do
19628: LD_EXP 22
19632: PUSH
19633: LD_EXP 37
19637: AND
19638: IFFALSE 19658
19640: GO 19642
19642: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
19643: LD_INT 1
19645: PPUSH
19646: LD_OWVAR 2
19650: PPUSH
19651: LD_INT 0
19653: PPUSH
19654: CALL_OW 324
19658: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
19659: LD_EXP 22
19663: PUSH
19664: LD_EXP 38
19668: AND
19669: IFFALSE 19752
19671: GO 19673
19673: DISABLE
19674: LD_INT 0
19676: PPUSH
19677: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
19678: LD_ADDR_VAR 0 2
19682: PUSH
19683: LD_INT 22
19685: PUSH
19686: LD_OWVAR 2
19690: PUSH
19691: EMPTY
19692: LIST
19693: LIST
19694: PUSH
19695: LD_INT 21
19697: PUSH
19698: LD_INT 3
19700: PUSH
19701: EMPTY
19702: LIST
19703: LIST
19704: PUSH
19705: EMPTY
19706: LIST
19707: LIST
19708: PPUSH
19709: CALL_OW 69
19713: ST_TO_ADDR
// if not tmp then
19714: LD_VAR 0 2
19718: NOT
19719: IFFALSE 19723
// exit ;
19721: GO 19752
// for i in tmp do
19723: LD_ADDR_VAR 0 1
19727: PUSH
19728: LD_VAR 0 2
19732: PUSH
19733: FOR_IN
19734: IFFALSE 19750
// SetBLevel ( i , 10 ) ;
19736: LD_VAR 0 1
19740: PPUSH
19741: LD_INT 10
19743: PPUSH
19744: CALL_OW 241
19748: GO 19733
19750: POP
19751: POP
// end ;
19752: PPOPN 2
19754: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
19755: LD_EXP 22
19759: PUSH
19760: LD_EXP 39
19764: AND
19765: IFFALSE 19876
19767: GO 19769
19769: DISABLE
19770: LD_INT 0
19772: PPUSH
19773: PPUSH
19774: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19775: LD_ADDR_VAR 0 3
19779: PUSH
19780: LD_INT 22
19782: PUSH
19783: LD_OWVAR 2
19787: PUSH
19788: EMPTY
19789: LIST
19790: LIST
19791: PUSH
19792: LD_INT 25
19794: PUSH
19795: LD_INT 1
19797: PUSH
19798: EMPTY
19799: LIST
19800: LIST
19801: PUSH
19802: EMPTY
19803: LIST
19804: LIST
19805: PPUSH
19806: CALL_OW 69
19810: ST_TO_ADDR
// if not tmp then
19811: LD_VAR 0 3
19815: NOT
19816: IFFALSE 19820
// exit ;
19818: GO 19876
// un := tmp [ rand ( 1 , tmp ) ] ;
19820: LD_ADDR_VAR 0 2
19824: PUSH
19825: LD_VAR 0 3
19829: PUSH
19830: LD_INT 1
19832: PPUSH
19833: LD_VAR 0 3
19837: PPUSH
19838: CALL_OW 12
19842: ARRAY
19843: ST_TO_ADDR
// if Crawls ( un ) then
19844: LD_VAR 0 2
19848: PPUSH
19849: CALL_OW 318
19853: IFFALSE 19864
// ComWalk ( un ) ;
19855: LD_VAR 0 2
19859: PPUSH
19860: CALL_OW 138
// SetClass ( un , class_sniper ) ;
19864: LD_VAR 0 2
19868: PPUSH
19869: LD_INT 5
19871: PPUSH
19872: CALL_OW 336
// end ;
19876: PPOPN 3
19878: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
19879: LD_EXP 22
19883: PUSH
19884: LD_EXP 40
19888: AND
19889: PUSH
19890: LD_OWVAR 67
19894: PUSH
19895: LD_INT 4
19897: LESS
19898: AND
19899: IFFALSE 19918
19901: GO 19903
19903: DISABLE
// begin Difficulty := Difficulty + 1 ;
19904: LD_ADDR_OWVAR 67
19908: PUSH
19909: LD_OWVAR 67
19913: PUSH
19914: LD_INT 1
19916: PLUS
19917: ST_TO_ADDR
// end ;
19918: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
19919: LD_EXP 22
19923: PUSH
19924: LD_EXP 41
19928: AND
19929: IFFALSE 20032
19931: GO 19933
19933: DISABLE
19934: LD_INT 0
19936: PPUSH
// begin for i := 1 to 5 do
19937: LD_ADDR_VAR 0 1
19941: PUSH
19942: DOUBLE
19943: LD_INT 1
19945: DEC
19946: ST_TO_ADDR
19947: LD_INT 5
19949: PUSH
19950: FOR_TO
19951: IFFALSE 20030
// begin uc_nation := nation_nature ;
19953: LD_ADDR_OWVAR 21
19957: PUSH
19958: LD_INT 0
19960: ST_TO_ADDR
// uc_side := 0 ;
19961: LD_ADDR_OWVAR 20
19965: PUSH
19966: LD_INT 0
19968: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19969: LD_ADDR_OWVAR 29
19973: PUSH
19974: LD_INT 12
19976: PUSH
19977: LD_INT 12
19979: PUSH
19980: EMPTY
19981: LIST
19982: LIST
19983: ST_TO_ADDR
// hc_agressivity := 20 ;
19984: LD_ADDR_OWVAR 35
19988: PUSH
19989: LD_INT 20
19991: ST_TO_ADDR
// hc_class := class_tiger ;
19992: LD_ADDR_OWVAR 28
19996: PUSH
19997: LD_INT 14
19999: ST_TO_ADDR
// hc_gallery :=  ;
20000: LD_ADDR_OWVAR 33
20004: PUSH
20005: LD_STRING 
20007: ST_TO_ADDR
// hc_name :=  ;
20008: LD_ADDR_OWVAR 26
20012: PUSH
20013: LD_STRING 
20015: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
20016: CALL_OW 44
20020: PPUSH
20021: LD_INT 0
20023: PPUSH
20024: CALL_OW 51
// end ;
20028: GO 19950
20030: POP
20031: POP
// end ;
20032: PPOPN 1
20034: END
// every 0 0$1 trigger StreamModeActive and sBomb do
20035: LD_EXP 22
20039: PUSH
20040: LD_EXP 42
20044: AND
20045: IFFALSE 20054
20047: GO 20049
20049: DISABLE
// StreamSibBomb ;
20050: CALL 20055 0 0
20054: END
// export function StreamSibBomb ; var i , x , y ; begin
20055: LD_INT 0
20057: PPUSH
20058: PPUSH
20059: PPUSH
20060: PPUSH
// result := false ;
20061: LD_ADDR_VAR 0 1
20065: PUSH
20066: LD_INT 0
20068: ST_TO_ADDR
// for i := 1 to 16 do
20069: LD_ADDR_VAR 0 2
20073: PUSH
20074: DOUBLE
20075: LD_INT 1
20077: DEC
20078: ST_TO_ADDR
20079: LD_INT 16
20081: PUSH
20082: FOR_TO
20083: IFFALSE 20282
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
20085: LD_ADDR_VAR 0 3
20089: PUSH
20090: LD_INT 10
20092: PUSH
20093: LD_INT 20
20095: PUSH
20096: LD_INT 30
20098: PUSH
20099: LD_INT 40
20101: PUSH
20102: LD_INT 50
20104: PUSH
20105: LD_INT 60
20107: PUSH
20108: LD_INT 70
20110: PUSH
20111: LD_INT 80
20113: PUSH
20114: LD_INT 90
20116: PUSH
20117: LD_INT 100
20119: PUSH
20120: LD_INT 110
20122: PUSH
20123: LD_INT 120
20125: PUSH
20126: LD_INT 130
20128: PUSH
20129: LD_INT 140
20131: PUSH
20132: LD_INT 150
20134: PUSH
20135: EMPTY
20136: LIST
20137: LIST
20138: LIST
20139: LIST
20140: LIST
20141: LIST
20142: LIST
20143: LIST
20144: LIST
20145: LIST
20146: LIST
20147: LIST
20148: LIST
20149: LIST
20150: LIST
20151: PUSH
20152: LD_INT 1
20154: PPUSH
20155: LD_INT 15
20157: PPUSH
20158: CALL_OW 12
20162: ARRAY
20163: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
20164: LD_ADDR_VAR 0 4
20168: PUSH
20169: LD_INT 10
20171: PUSH
20172: LD_INT 20
20174: PUSH
20175: LD_INT 30
20177: PUSH
20178: LD_INT 40
20180: PUSH
20181: LD_INT 50
20183: PUSH
20184: LD_INT 60
20186: PUSH
20187: LD_INT 70
20189: PUSH
20190: LD_INT 80
20192: PUSH
20193: LD_INT 90
20195: PUSH
20196: LD_INT 100
20198: PUSH
20199: LD_INT 110
20201: PUSH
20202: LD_INT 120
20204: PUSH
20205: LD_INT 130
20207: PUSH
20208: LD_INT 140
20210: PUSH
20211: LD_INT 150
20213: PUSH
20214: EMPTY
20215: LIST
20216: LIST
20217: LIST
20218: LIST
20219: LIST
20220: LIST
20221: LIST
20222: LIST
20223: LIST
20224: LIST
20225: LIST
20226: LIST
20227: LIST
20228: LIST
20229: LIST
20230: PUSH
20231: LD_INT 1
20233: PPUSH
20234: LD_INT 15
20236: PPUSH
20237: CALL_OW 12
20241: ARRAY
20242: ST_TO_ADDR
// if ValidHex ( x , y ) then
20243: LD_VAR 0 3
20247: PPUSH
20248: LD_VAR 0 4
20252: PPUSH
20253: CALL_OW 488
20257: IFFALSE 20280
// begin result := [ x , y ] ;
20259: LD_ADDR_VAR 0 1
20263: PUSH
20264: LD_VAR 0 3
20268: PUSH
20269: LD_VAR 0 4
20273: PUSH
20274: EMPTY
20275: LIST
20276: LIST
20277: ST_TO_ADDR
// break ;
20278: GO 20282
// end ; end ;
20280: GO 20082
20282: POP
20283: POP
// if result then
20284: LD_VAR 0 1
20288: IFFALSE 20348
// begin ToLua ( playSibBomb() ) ;
20290: LD_STRING playSibBomb()
20292: PPUSH
20293: CALL_OW 559
// wait ( 0 0$14 ) ;
20297: LD_INT 490
20299: PPUSH
20300: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
20304: LD_VAR 0 1
20308: PUSH
20309: LD_INT 1
20311: ARRAY
20312: PPUSH
20313: LD_VAR 0 1
20317: PUSH
20318: LD_INT 2
20320: ARRAY
20321: PPUSH
20322: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
20326: LD_VAR 0 1
20330: PUSH
20331: LD_INT 1
20333: ARRAY
20334: PPUSH
20335: LD_VAR 0 1
20339: PUSH
20340: LD_INT 2
20342: ARRAY
20343: PPUSH
20344: CALL_OW 429
// end ; end ;
20348: LD_VAR 0 1
20352: RET
// every 0 0$1 trigger StreamModeActive and sReset do
20353: LD_EXP 22
20357: PUSH
20358: LD_EXP 44
20362: AND
20363: IFFALSE 20375
20365: GO 20367
20367: DISABLE
// YouLost (  ) ;
20368: LD_STRING 
20370: PPUSH
20371: CALL_OW 104
20375: END
// every 0 0$1 trigger StreamModeActive and sFog do
20376: LD_EXP 22
20380: PUSH
20381: LD_EXP 43
20385: AND
20386: IFFALSE 20400
20388: GO 20390
20390: DISABLE
// FogOff ( your_side ) ;
20391: LD_OWVAR 2
20395: PPUSH
20396: CALL_OW 344
20400: END
// every 0 0$1 trigger StreamModeActive and sSun do
20401: LD_EXP 22
20405: PUSH
20406: LD_EXP 45
20410: AND
20411: IFFALSE 20439
20413: GO 20415
20415: DISABLE
// begin solar_recharge_percent := 0 ;
20416: LD_ADDR_OWVAR 79
20420: PUSH
20421: LD_INT 0
20423: ST_TO_ADDR
// wait ( 5 5$00 ) ;
20424: LD_INT 10500
20426: PPUSH
20427: CALL_OW 67
// solar_recharge_percent := 100 ;
20431: LD_ADDR_OWVAR 79
20435: PUSH
20436: LD_INT 100
20438: ST_TO_ADDR
// end ;
20439: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
20440: LD_EXP 22
20444: PUSH
20445: LD_EXP 46
20449: AND
20450: IFFALSE 20689
20452: GO 20454
20454: DISABLE
20455: LD_INT 0
20457: PPUSH
20458: PPUSH
20459: PPUSH
// begin tmp := [ ] ;
20460: LD_ADDR_VAR 0 3
20464: PUSH
20465: EMPTY
20466: ST_TO_ADDR
// for i := 1 to 6 do
20467: LD_ADDR_VAR 0 1
20471: PUSH
20472: DOUBLE
20473: LD_INT 1
20475: DEC
20476: ST_TO_ADDR
20477: LD_INT 6
20479: PUSH
20480: FOR_TO
20481: IFFALSE 20586
// begin uc_nation := nation_nature ;
20483: LD_ADDR_OWVAR 21
20487: PUSH
20488: LD_INT 0
20490: ST_TO_ADDR
// uc_side := 0 ;
20491: LD_ADDR_OWVAR 20
20495: PUSH
20496: LD_INT 0
20498: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
20499: LD_ADDR_OWVAR 29
20503: PUSH
20504: LD_INT 12
20506: PUSH
20507: LD_INT 12
20509: PUSH
20510: EMPTY
20511: LIST
20512: LIST
20513: ST_TO_ADDR
// hc_agressivity := 20 ;
20514: LD_ADDR_OWVAR 35
20518: PUSH
20519: LD_INT 20
20521: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
20522: LD_ADDR_OWVAR 28
20526: PUSH
20527: LD_INT 17
20529: ST_TO_ADDR
// hc_gallery :=  ;
20530: LD_ADDR_OWVAR 33
20534: PUSH
20535: LD_STRING 
20537: ST_TO_ADDR
// hc_name :=  ;
20538: LD_ADDR_OWVAR 26
20542: PUSH
20543: LD_STRING 
20545: ST_TO_ADDR
// un := CreateHuman ;
20546: LD_ADDR_VAR 0 2
20550: PUSH
20551: CALL_OW 44
20555: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
20556: LD_VAR 0 2
20560: PPUSH
20561: LD_INT 1
20563: PPUSH
20564: CALL_OW 51
// tmp := tmp ^ un ;
20568: LD_ADDR_VAR 0 3
20572: PUSH
20573: LD_VAR 0 3
20577: PUSH
20578: LD_VAR 0 2
20582: ADD
20583: ST_TO_ADDR
// end ;
20584: GO 20480
20586: POP
20587: POP
// repeat wait ( 0 0$1 ) ;
20588: LD_INT 35
20590: PPUSH
20591: CALL_OW 67
// for un in tmp do
20595: LD_ADDR_VAR 0 2
20599: PUSH
20600: LD_VAR 0 3
20604: PUSH
20605: FOR_IN
20606: IFFALSE 20680
// begin if IsDead ( un ) then
20608: LD_VAR 0 2
20612: PPUSH
20613: CALL_OW 301
20617: IFFALSE 20637
// begin tmp := tmp diff un ;
20619: LD_ADDR_VAR 0 3
20623: PUSH
20624: LD_VAR 0 3
20628: PUSH
20629: LD_VAR 0 2
20633: DIFF
20634: ST_TO_ADDR
// continue ;
20635: GO 20605
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
20637: LD_VAR 0 2
20641: PPUSH
20642: LD_INT 3
20644: PUSH
20645: LD_INT 22
20647: PUSH
20648: LD_INT 0
20650: PUSH
20651: EMPTY
20652: LIST
20653: LIST
20654: PUSH
20655: EMPTY
20656: LIST
20657: LIST
20658: PPUSH
20659: CALL_OW 69
20663: PPUSH
20664: LD_VAR 0 2
20668: PPUSH
20669: CALL_OW 74
20673: PPUSH
20674: CALL_OW 115
// end ;
20678: GO 20605
20680: POP
20681: POP
// until not tmp ;
20682: LD_VAR 0 3
20686: NOT
20687: IFFALSE 20588
// end ;
20689: PPOPN 3
20691: END
// every 0 0$1 trigger StreamModeActive and sTroll do
20692: LD_EXP 22
20696: PUSH
20697: LD_EXP 47
20701: AND
20702: IFFALSE 20756
20704: GO 20706
20706: DISABLE
// begin ToLua ( displayTroll(); ) ;
20707: LD_STRING displayTroll();
20709: PPUSH
20710: CALL_OW 559
// wait ( 3 3$00 ) ;
20714: LD_INT 6300
20716: PPUSH
20717: CALL_OW 67
// ToLua ( hideTroll(); ) ;
20721: LD_STRING hideTroll();
20723: PPUSH
20724: CALL_OW 559
// wait ( 1 1$00 ) ;
20728: LD_INT 2100
20730: PPUSH
20731: CALL_OW 67
// ToLua ( displayTroll(); ) ;
20735: LD_STRING displayTroll();
20737: PPUSH
20738: CALL_OW 559
// wait ( 1 1$00 ) ;
20742: LD_INT 2100
20744: PPUSH
20745: CALL_OW 67
// ToLua ( hideTroll(); ) ;
20749: LD_STRING hideTroll();
20751: PPUSH
20752: CALL_OW 559
// end ;
20756: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
20757: LD_EXP 22
20761: PUSH
20762: LD_EXP 48
20766: AND
20767: IFFALSE 20830
20769: GO 20771
20771: DISABLE
20772: LD_INT 0
20774: PPUSH
// begin p := 0 ;
20775: LD_ADDR_VAR 0 1
20779: PUSH
20780: LD_INT 0
20782: ST_TO_ADDR
// repeat game_speed := 1 ;
20783: LD_ADDR_OWVAR 65
20787: PUSH
20788: LD_INT 1
20790: ST_TO_ADDR
// wait ( 0 0$1 ) ;
20791: LD_INT 35
20793: PPUSH
20794: CALL_OW 67
// p := p + 1 ;
20798: LD_ADDR_VAR 0 1
20802: PUSH
20803: LD_VAR 0 1
20807: PUSH
20808: LD_INT 1
20810: PLUS
20811: ST_TO_ADDR
// until p >= 60 ;
20812: LD_VAR 0 1
20816: PUSH
20817: LD_INT 60
20819: GREATEREQUAL
20820: IFFALSE 20783
// game_speed := 4 ;
20822: LD_ADDR_OWVAR 65
20826: PUSH
20827: LD_INT 4
20829: ST_TO_ADDR
// end ;
20830: PPOPN 1
20832: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
20833: LD_EXP 22
20837: PUSH
20838: LD_EXP 49
20842: AND
20843: IFFALSE 20989
20845: GO 20847
20847: DISABLE
20848: LD_INT 0
20850: PPUSH
20851: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20852: LD_ADDR_VAR 0 1
20856: PUSH
20857: LD_INT 22
20859: PUSH
20860: LD_OWVAR 2
20864: PUSH
20865: EMPTY
20866: LIST
20867: LIST
20868: PUSH
20869: LD_INT 2
20871: PUSH
20872: LD_INT 30
20874: PUSH
20875: LD_INT 0
20877: PUSH
20878: EMPTY
20879: LIST
20880: LIST
20881: PUSH
20882: LD_INT 30
20884: PUSH
20885: LD_INT 1
20887: PUSH
20888: EMPTY
20889: LIST
20890: LIST
20891: PUSH
20892: EMPTY
20893: LIST
20894: LIST
20895: LIST
20896: PUSH
20897: EMPTY
20898: LIST
20899: LIST
20900: PPUSH
20901: CALL_OW 69
20905: ST_TO_ADDR
// if not depot then
20906: LD_VAR 0 1
20910: NOT
20911: IFFALSE 20915
// exit ;
20913: GO 20989
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
20915: LD_ADDR_VAR 0 2
20919: PUSH
20920: LD_VAR 0 1
20924: PUSH
20925: LD_INT 1
20927: PPUSH
20928: LD_VAR 0 1
20932: PPUSH
20933: CALL_OW 12
20937: ARRAY
20938: PPUSH
20939: CALL_OW 274
20943: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
20944: LD_VAR 0 2
20948: PPUSH
20949: LD_INT 1
20951: PPUSH
20952: LD_INT 0
20954: PPUSH
20955: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
20959: LD_VAR 0 2
20963: PPUSH
20964: LD_INT 2
20966: PPUSH
20967: LD_INT 0
20969: PPUSH
20970: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
20974: LD_VAR 0 2
20978: PPUSH
20979: LD_INT 3
20981: PPUSH
20982: LD_INT 0
20984: PPUSH
20985: CALL_OW 277
// end ;
20989: PPOPN 2
20991: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
20992: LD_EXP 22
20996: PUSH
20997: LD_EXP 50
21001: AND
21002: IFFALSE 21099
21004: GO 21006
21006: DISABLE
21007: LD_INT 0
21009: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21010: LD_ADDR_VAR 0 1
21014: PUSH
21015: LD_INT 22
21017: PUSH
21018: LD_OWVAR 2
21022: PUSH
21023: EMPTY
21024: LIST
21025: LIST
21026: PUSH
21027: LD_INT 21
21029: PUSH
21030: LD_INT 1
21032: PUSH
21033: EMPTY
21034: LIST
21035: LIST
21036: PUSH
21037: LD_INT 3
21039: PUSH
21040: LD_INT 23
21042: PUSH
21043: LD_INT 0
21045: PUSH
21046: EMPTY
21047: LIST
21048: LIST
21049: PUSH
21050: EMPTY
21051: LIST
21052: LIST
21053: PUSH
21054: EMPTY
21055: LIST
21056: LIST
21057: LIST
21058: PPUSH
21059: CALL_OW 69
21063: ST_TO_ADDR
// if not tmp then
21064: LD_VAR 0 1
21068: NOT
21069: IFFALSE 21073
// exit ;
21071: GO 21099
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
21073: LD_VAR 0 1
21077: PUSH
21078: LD_INT 1
21080: PPUSH
21081: LD_VAR 0 1
21085: PPUSH
21086: CALL_OW 12
21090: ARRAY
21091: PPUSH
21092: LD_INT 200
21094: PPUSH
21095: CALL_OW 234
// end ;
21099: PPOPN 1
21101: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
21102: LD_EXP 22
21106: PUSH
21107: LD_EXP 51
21111: AND
21112: IFFALSE 21191
21114: GO 21116
21116: DISABLE
21117: LD_INT 0
21119: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
21120: LD_ADDR_VAR 0 1
21124: PUSH
21125: LD_INT 22
21127: PUSH
21128: LD_OWVAR 2
21132: PUSH
21133: EMPTY
21134: LIST
21135: LIST
21136: PUSH
21137: LD_INT 21
21139: PUSH
21140: LD_INT 2
21142: PUSH
21143: EMPTY
21144: LIST
21145: LIST
21146: PUSH
21147: EMPTY
21148: LIST
21149: LIST
21150: PPUSH
21151: CALL_OW 69
21155: ST_TO_ADDR
// if not tmp then
21156: LD_VAR 0 1
21160: NOT
21161: IFFALSE 21165
// exit ;
21163: GO 21191
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
21165: LD_VAR 0 1
21169: PUSH
21170: LD_INT 1
21172: PPUSH
21173: LD_VAR 0 1
21177: PPUSH
21178: CALL_OW 12
21182: ARRAY
21183: PPUSH
21184: LD_INT 60
21186: PPUSH
21187: CALL_OW 234
// end ;
21191: PPOPN 1
21193: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
21194: LD_EXP 22
21198: PUSH
21199: LD_EXP 52
21203: AND
21204: IFFALSE 21303
21206: GO 21208
21208: DISABLE
21209: LD_INT 0
21211: PPUSH
21212: PPUSH
// begin enable ;
21213: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
21214: LD_ADDR_VAR 0 1
21218: PUSH
21219: LD_INT 22
21221: PUSH
21222: LD_OWVAR 2
21226: PUSH
21227: EMPTY
21228: LIST
21229: LIST
21230: PUSH
21231: LD_INT 61
21233: PUSH
21234: EMPTY
21235: LIST
21236: PUSH
21237: LD_INT 33
21239: PUSH
21240: LD_INT 2
21242: PUSH
21243: EMPTY
21244: LIST
21245: LIST
21246: PUSH
21247: EMPTY
21248: LIST
21249: LIST
21250: LIST
21251: PPUSH
21252: CALL_OW 69
21256: ST_TO_ADDR
// if not tmp then
21257: LD_VAR 0 1
21261: NOT
21262: IFFALSE 21266
// exit ;
21264: GO 21303
// for i in tmp do
21266: LD_ADDR_VAR 0 2
21270: PUSH
21271: LD_VAR 0 1
21275: PUSH
21276: FOR_IN
21277: IFFALSE 21301
// if IsControledBy ( i ) then
21279: LD_VAR 0 2
21283: PPUSH
21284: CALL_OW 312
21288: IFFALSE 21299
// ComUnlink ( i ) ;
21290: LD_VAR 0 2
21294: PPUSH
21295: CALL_OW 136
21299: GO 21276
21301: POP
21302: POP
// end ;
21303: PPOPN 2
21305: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
21306: LD_EXP 22
21310: PUSH
21311: LD_EXP 53
21315: AND
21316: IFFALSE 21456
21318: GO 21320
21320: DISABLE
21321: LD_INT 0
21323: PPUSH
21324: PPUSH
// begin ToLua ( displayPowell(); ) ;
21325: LD_STRING displayPowell();
21327: PPUSH
21328: CALL_OW 559
// uc_side := 0 ;
21332: LD_ADDR_OWVAR 20
21336: PUSH
21337: LD_INT 0
21339: ST_TO_ADDR
// uc_nation := 2 ;
21340: LD_ADDR_OWVAR 21
21344: PUSH
21345: LD_INT 2
21347: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
21348: LD_ADDR_OWVAR 37
21352: PUSH
21353: LD_INT 14
21355: ST_TO_ADDR
// vc_engine := engine_siberite ;
21356: LD_ADDR_OWVAR 39
21360: PUSH
21361: LD_INT 3
21363: ST_TO_ADDR
// vc_control := control_apeman ;
21364: LD_ADDR_OWVAR 38
21368: PUSH
21369: LD_INT 5
21371: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
21372: LD_ADDR_OWVAR 40
21376: PUSH
21377: LD_INT 29
21379: ST_TO_ADDR
// un := CreateVehicle ;
21380: LD_ADDR_VAR 0 2
21384: PUSH
21385: CALL_OW 45
21389: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21390: LD_VAR 0 2
21394: PPUSH
21395: LD_INT 1
21397: PPUSH
21398: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
21402: LD_INT 35
21404: PPUSH
21405: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
21409: LD_VAR 0 2
21413: PPUSH
21414: LD_INT 22
21416: PUSH
21417: LD_OWVAR 2
21421: PUSH
21422: EMPTY
21423: LIST
21424: LIST
21425: PPUSH
21426: CALL_OW 69
21430: PPUSH
21431: LD_VAR 0 2
21435: PPUSH
21436: CALL_OW 74
21440: PPUSH
21441: CALL_OW 115
// until IsDead ( un ) ;
21445: LD_VAR 0 2
21449: PPUSH
21450: CALL_OW 301
21454: IFFALSE 21402
// end ;
21456: PPOPN 2
21458: END
// every 0 0$1 trigger StreamModeActive and sStu do
21459: LD_EXP 22
21463: PUSH
21464: LD_EXP 61
21468: AND
21469: IFFALSE 21485
21471: GO 21473
21473: DISABLE
// begin ToLua ( displayStucuk(); ) ;
21474: LD_STRING displayStucuk();
21476: PPUSH
21477: CALL_OW 559
// ResetFog ;
21481: CALL_OW 335
// end ;
21485: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
21486: LD_EXP 22
21490: PUSH
21491: LD_EXP 54
21495: AND
21496: IFFALSE 21637
21498: GO 21500
21500: DISABLE
21501: LD_INT 0
21503: PPUSH
21504: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
21505: LD_ADDR_VAR 0 2
21509: PUSH
21510: LD_INT 22
21512: PUSH
21513: LD_OWVAR 2
21517: PUSH
21518: EMPTY
21519: LIST
21520: LIST
21521: PUSH
21522: LD_INT 21
21524: PUSH
21525: LD_INT 1
21527: PUSH
21528: EMPTY
21529: LIST
21530: LIST
21531: PUSH
21532: EMPTY
21533: LIST
21534: LIST
21535: PPUSH
21536: CALL_OW 69
21540: ST_TO_ADDR
// if not tmp then
21541: LD_VAR 0 2
21545: NOT
21546: IFFALSE 21550
// exit ;
21548: GO 21637
// un := tmp [ rand ( 1 , tmp ) ] ;
21550: LD_ADDR_VAR 0 1
21554: PUSH
21555: LD_VAR 0 2
21559: PUSH
21560: LD_INT 1
21562: PPUSH
21563: LD_VAR 0 2
21567: PPUSH
21568: CALL_OW 12
21572: ARRAY
21573: ST_TO_ADDR
// SetSide ( un , 0 ) ;
21574: LD_VAR 0 1
21578: PPUSH
21579: LD_INT 0
21581: PPUSH
21582: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
21586: LD_VAR 0 1
21590: PPUSH
21591: LD_OWVAR 3
21595: PUSH
21596: LD_VAR 0 1
21600: DIFF
21601: PPUSH
21602: LD_VAR 0 1
21606: PPUSH
21607: CALL_OW 74
21611: PPUSH
21612: CALL_OW 115
// wait ( 0 0$20 ) ;
21616: LD_INT 700
21618: PPUSH
21619: CALL_OW 67
// SetSide ( un , your_side ) ;
21623: LD_VAR 0 1
21627: PPUSH
21628: LD_OWVAR 2
21632: PPUSH
21633: CALL_OW 235
// end ;
21637: PPOPN 2
21639: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
21640: LD_EXP 22
21644: PUSH
21645: LD_EXP 55
21649: AND
21650: IFFALSE 21756
21652: GO 21654
21654: DISABLE
21655: LD_INT 0
21657: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21658: LD_ADDR_VAR 0 1
21662: PUSH
21663: LD_INT 22
21665: PUSH
21666: LD_OWVAR 2
21670: PUSH
21671: EMPTY
21672: LIST
21673: LIST
21674: PUSH
21675: LD_INT 2
21677: PUSH
21678: LD_INT 30
21680: PUSH
21681: LD_INT 0
21683: PUSH
21684: EMPTY
21685: LIST
21686: LIST
21687: PUSH
21688: LD_INT 30
21690: PUSH
21691: LD_INT 1
21693: PUSH
21694: EMPTY
21695: LIST
21696: LIST
21697: PUSH
21698: EMPTY
21699: LIST
21700: LIST
21701: LIST
21702: PUSH
21703: EMPTY
21704: LIST
21705: LIST
21706: PPUSH
21707: CALL_OW 69
21711: ST_TO_ADDR
// if not depot then
21712: LD_VAR 0 1
21716: NOT
21717: IFFALSE 21721
// exit ;
21719: GO 21756
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
21721: LD_VAR 0 1
21725: PUSH
21726: LD_INT 1
21728: ARRAY
21729: PPUSH
21730: CALL_OW 250
21734: PPUSH
21735: LD_VAR 0 1
21739: PUSH
21740: LD_INT 1
21742: ARRAY
21743: PPUSH
21744: CALL_OW 251
21748: PPUSH
21749: LD_INT 70
21751: PPUSH
21752: CALL_OW 495
// end ;
21756: PPOPN 1
21758: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
21759: LD_EXP 22
21763: PUSH
21764: LD_EXP 56
21768: AND
21769: IFFALSE 21980
21771: GO 21773
21773: DISABLE
21774: LD_INT 0
21776: PPUSH
21777: PPUSH
21778: PPUSH
21779: PPUSH
21780: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
21781: LD_ADDR_VAR 0 5
21785: PUSH
21786: LD_INT 22
21788: PUSH
21789: LD_OWVAR 2
21793: PUSH
21794: EMPTY
21795: LIST
21796: LIST
21797: PUSH
21798: LD_INT 21
21800: PUSH
21801: LD_INT 1
21803: PUSH
21804: EMPTY
21805: LIST
21806: LIST
21807: PUSH
21808: EMPTY
21809: LIST
21810: LIST
21811: PPUSH
21812: CALL_OW 69
21816: ST_TO_ADDR
// if not tmp then
21817: LD_VAR 0 5
21821: NOT
21822: IFFALSE 21826
// exit ;
21824: GO 21980
// for i in tmp do
21826: LD_ADDR_VAR 0 1
21830: PUSH
21831: LD_VAR 0 5
21835: PUSH
21836: FOR_IN
21837: IFFALSE 21978
// begin d := rand ( 0 , 5 ) ;
21839: LD_ADDR_VAR 0 4
21843: PUSH
21844: LD_INT 0
21846: PPUSH
21847: LD_INT 5
21849: PPUSH
21850: CALL_OW 12
21854: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
21855: LD_ADDR_VAR 0 2
21859: PUSH
21860: LD_VAR 0 1
21864: PPUSH
21865: CALL_OW 250
21869: PPUSH
21870: LD_VAR 0 4
21874: PPUSH
21875: LD_INT 3
21877: PPUSH
21878: LD_INT 12
21880: PPUSH
21881: CALL_OW 12
21885: PPUSH
21886: CALL_OW 272
21890: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
21891: LD_ADDR_VAR 0 3
21895: PUSH
21896: LD_VAR 0 1
21900: PPUSH
21901: CALL_OW 251
21905: PPUSH
21906: LD_VAR 0 4
21910: PPUSH
21911: LD_INT 3
21913: PPUSH
21914: LD_INT 12
21916: PPUSH
21917: CALL_OW 12
21921: PPUSH
21922: CALL_OW 273
21926: ST_TO_ADDR
// if ValidHex ( x , y ) then
21927: LD_VAR 0 2
21931: PPUSH
21932: LD_VAR 0 3
21936: PPUSH
21937: CALL_OW 488
21941: IFFALSE 21976
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
21943: LD_VAR 0 1
21947: PPUSH
21948: LD_VAR 0 2
21952: PPUSH
21953: LD_VAR 0 3
21957: PPUSH
21958: LD_INT 3
21960: PPUSH
21961: LD_INT 6
21963: PPUSH
21964: CALL_OW 12
21968: PPUSH
21969: LD_INT 1
21971: PPUSH
21972: CALL_OW 483
// end ;
21976: GO 21836
21978: POP
21979: POP
// end ;
21980: PPOPN 5
21982: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
21983: LD_EXP 22
21987: PUSH
21988: LD_EXP 57
21992: AND
21993: IFFALSE 22087
21995: GO 21997
21997: DISABLE
21998: LD_INT 0
22000: PPUSH
22001: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
22002: LD_ADDR_VAR 0 2
22006: PUSH
22007: LD_INT 22
22009: PUSH
22010: LD_OWVAR 2
22014: PUSH
22015: EMPTY
22016: LIST
22017: LIST
22018: PUSH
22019: LD_INT 32
22021: PUSH
22022: LD_INT 1
22024: PUSH
22025: EMPTY
22026: LIST
22027: LIST
22028: PUSH
22029: LD_INT 21
22031: PUSH
22032: LD_INT 2
22034: PUSH
22035: EMPTY
22036: LIST
22037: LIST
22038: PUSH
22039: EMPTY
22040: LIST
22041: LIST
22042: LIST
22043: PPUSH
22044: CALL_OW 69
22048: ST_TO_ADDR
// if not tmp then
22049: LD_VAR 0 2
22053: NOT
22054: IFFALSE 22058
// exit ;
22056: GO 22087
// for i in tmp do
22058: LD_ADDR_VAR 0 1
22062: PUSH
22063: LD_VAR 0 2
22067: PUSH
22068: FOR_IN
22069: IFFALSE 22085
// SetFuel ( i , 0 ) ;
22071: LD_VAR 0 1
22075: PPUSH
22076: LD_INT 0
22078: PPUSH
22079: CALL_OW 240
22083: GO 22068
22085: POP
22086: POP
// end ;
22087: PPOPN 2
22089: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
22090: LD_EXP 22
22094: PUSH
22095: LD_EXP 58
22099: AND
22100: IFFALSE 22166
22102: GO 22104
22104: DISABLE
22105: LD_INT 0
22107: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
22108: LD_ADDR_VAR 0 1
22112: PUSH
22113: LD_INT 22
22115: PUSH
22116: LD_OWVAR 2
22120: PUSH
22121: EMPTY
22122: LIST
22123: LIST
22124: PUSH
22125: LD_INT 30
22127: PUSH
22128: LD_INT 29
22130: PUSH
22131: EMPTY
22132: LIST
22133: LIST
22134: PUSH
22135: EMPTY
22136: LIST
22137: LIST
22138: PPUSH
22139: CALL_OW 69
22143: ST_TO_ADDR
// if not tmp then
22144: LD_VAR 0 1
22148: NOT
22149: IFFALSE 22153
// exit ;
22151: GO 22166
// DestroyUnit ( tmp [ 1 ] ) ;
22153: LD_VAR 0 1
22157: PUSH
22158: LD_INT 1
22160: ARRAY
22161: PPUSH
22162: CALL_OW 65
// end ;
22166: PPOPN 1
22168: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
22169: LD_EXP 22
22173: PUSH
22174: LD_EXP 60
22178: AND
22179: IFFALSE 22308
22181: GO 22183
22183: DISABLE
22184: LD_INT 0
22186: PPUSH
// begin uc_side := 0 ;
22187: LD_ADDR_OWVAR 20
22191: PUSH
22192: LD_INT 0
22194: ST_TO_ADDR
// uc_nation := nation_arabian ;
22195: LD_ADDR_OWVAR 21
22199: PUSH
22200: LD_INT 2
22202: ST_TO_ADDR
// hc_gallery :=  ;
22203: LD_ADDR_OWVAR 33
22207: PUSH
22208: LD_STRING 
22210: ST_TO_ADDR
// hc_name :=  ;
22211: LD_ADDR_OWVAR 26
22215: PUSH
22216: LD_STRING 
22218: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
22219: LD_INT 1
22221: PPUSH
22222: LD_INT 11
22224: PPUSH
22225: LD_INT 10
22227: PPUSH
22228: CALL_OW 380
// un := CreateHuman ;
22232: LD_ADDR_VAR 0 1
22236: PUSH
22237: CALL_OW 44
22241: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
22242: LD_VAR 0 1
22246: PPUSH
22247: LD_INT 1
22249: PPUSH
22250: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
22254: LD_INT 35
22256: PPUSH
22257: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
22261: LD_VAR 0 1
22265: PPUSH
22266: LD_INT 22
22268: PUSH
22269: LD_OWVAR 2
22273: PUSH
22274: EMPTY
22275: LIST
22276: LIST
22277: PPUSH
22278: CALL_OW 69
22282: PPUSH
22283: LD_VAR 0 1
22287: PPUSH
22288: CALL_OW 74
22292: PPUSH
22293: CALL_OW 115
// until IsDead ( un ) ;
22297: LD_VAR 0 1
22301: PPUSH
22302: CALL_OW 301
22306: IFFALSE 22254
// end ;
22308: PPOPN 1
22310: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
22311: LD_EXP 22
22315: PUSH
22316: LD_EXP 62
22320: AND
22321: IFFALSE 22333
22323: GO 22325
22325: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
22326: LD_STRING earthquake(getX(game), 0, 32)
22328: PPUSH
22329: CALL_OW 559
22333: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
22334: LD_EXP 22
22338: PUSH
22339: LD_EXP 63
22343: AND
22344: IFFALSE 22435
22346: GO 22348
22348: DISABLE
22349: LD_INT 0
22351: PPUSH
// begin enable ;
22352: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
22353: LD_ADDR_VAR 0 1
22357: PUSH
22358: LD_INT 22
22360: PUSH
22361: LD_OWVAR 2
22365: PUSH
22366: EMPTY
22367: LIST
22368: LIST
22369: PUSH
22370: LD_INT 21
22372: PUSH
22373: LD_INT 2
22375: PUSH
22376: EMPTY
22377: LIST
22378: LIST
22379: PUSH
22380: LD_INT 33
22382: PUSH
22383: LD_INT 3
22385: PUSH
22386: EMPTY
22387: LIST
22388: LIST
22389: PUSH
22390: EMPTY
22391: LIST
22392: LIST
22393: LIST
22394: PPUSH
22395: CALL_OW 69
22399: ST_TO_ADDR
// if not tmp then
22400: LD_VAR 0 1
22404: NOT
22405: IFFALSE 22409
// exit ;
22407: GO 22435
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
22409: LD_VAR 0 1
22413: PUSH
22414: LD_INT 1
22416: PPUSH
22417: LD_VAR 0 1
22421: PPUSH
22422: CALL_OW 12
22426: ARRAY
22427: PPUSH
22428: LD_INT 1
22430: PPUSH
22431: CALL_OW 234
// end ;
22435: PPOPN 1
22437: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
22438: LD_EXP 22
22442: PUSH
22443: LD_EXP 64
22447: AND
22448: IFFALSE 22589
22450: GO 22452
22452: DISABLE
22453: LD_INT 0
22455: PPUSH
22456: PPUSH
22457: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22458: LD_ADDR_VAR 0 3
22462: PUSH
22463: LD_INT 22
22465: PUSH
22466: LD_OWVAR 2
22470: PUSH
22471: EMPTY
22472: LIST
22473: LIST
22474: PUSH
22475: LD_INT 25
22477: PUSH
22478: LD_INT 1
22480: PUSH
22481: EMPTY
22482: LIST
22483: LIST
22484: PUSH
22485: EMPTY
22486: LIST
22487: LIST
22488: PPUSH
22489: CALL_OW 69
22493: ST_TO_ADDR
// if not tmp then
22494: LD_VAR 0 3
22498: NOT
22499: IFFALSE 22503
// exit ;
22501: GO 22589
// un := tmp [ rand ( 1 , tmp ) ] ;
22503: LD_ADDR_VAR 0 2
22507: PUSH
22508: LD_VAR 0 3
22512: PUSH
22513: LD_INT 1
22515: PPUSH
22516: LD_VAR 0 3
22520: PPUSH
22521: CALL_OW 12
22525: ARRAY
22526: ST_TO_ADDR
// if Crawls ( un ) then
22527: LD_VAR 0 2
22531: PPUSH
22532: CALL_OW 318
22536: IFFALSE 22547
// ComWalk ( un ) ;
22538: LD_VAR 0 2
22542: PPUSH
22543: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
22547: LD_VAR 0 2
22551: PPUSH
22552: LD_INT 9
22554: PPUSH
22555: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
22559: LD_INT 28
22561: PPUSH
22562: LD_OWVAR 2
22566: PPUSH
22567: LD_INT 2
22569: PPUSH
22570: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
22574: LD_INT 29
22576: PPUSH
22577: LD_OWVAR 2
22581: PPUSH
22582: LD_INT 2
22584: PPUSH
22585: CALL_OW 322
// end ;
22589: PPOPN 3
22591: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
22592: LD_EXP 22
22596: PUSH
22597: LD_EXP 65
22601: AND
22602: IFFALSE 22713
22604: GO 22606
22606: DISABLE
22607: LD_INT 0
22609: PPUSH
22610: PPUSH
22611: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22612: LD_ADDR_VAR 0 3
22616: PUSH
22617: LD_INT 22
22619: PUSH
22620: LD_OWVAR 2
22624: PUSH
22625: EMPTY
22626: LIST
22627: LIST
22628: PUSH
22629: LD_INT 25
22631: PUSH
22632: LD_INT 1
22634: PUSH
22635: EMPTY
22636: LIST
22637: LIST
22638: PUSH
22639: EMPTY
22640: LIST
22641: LIST
22642: PPUSH
22643: CALL_OW 69
22647: ST_TO_ADDR
// if not tmp then
22648: LD_VAR 0 3
22652: NOT
22653: IFFALSE 22657
// exit ;
22655: GO 22713
// un := tmp [ rand ( 1 , tmp ) ] ;
22657: LD_ADDR_VAR 0 2
22661: PUSH
22662: LD_VAR 0 3
22666: PUSH
22667: LD_INT 1
22669: PPUSH
22670: LD_VAR 0 3
22674: PPUSH
22675: CALL_OW 12
22679: ARRAY
22680: ST_TO_ADDR
// if Crawls ( un ) then
22681: LD_VAR 0 2
22685: PPUSH
22686: CALL_OW 318
22690: IFFALSE 22701
// ComWalk ( un ) ;
22692: LD_VAR 0 2
22696: PPUSH
22697: CALL_OW 138
// SetClass ( un , class_mortar ) ;
22701: LD_VAR 0 2
22705: PPUSH
22706: LD_INT 8
22708: PPUSH
22709: CALL_OW 336
// end ;
22713: PPOPN 3
22715: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
22716: LD_EXP 22
22720: PUSH
22721: LD_EXP 66
22725: AND
22726: IFFALSE 22870
22728: GO 22730
22730: DISABLE
22731: LD_INT 0
22733: PPUSH
22734: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
22735: LD_ADDR_VAR 0 2
22739: PUSH
22740: LD_INT 22
22742: PUSH
22743: LD_OWVAR 2
22747: PUSH
22748: EMPTY
22749: LIST
22750: LIST
22751: PUSH
22752: LD_INT 21
22754: PUSH
22755: LD_INT 2
22757: PUSH
22758: EMPTY
22759: LIST
22760: LIST
22761: PUSH
22762: LD_INT 2
22764: PUSH
22765: LD_INT 34
22767: PUSH
22768: LD_INT 12
22770: PUSH
22771: EMPTY
22772: LIST
22773: LIST
22774: PUSH
22775: LD_INT 34
22777: PUSH
22778: LD_INT 51
22780: PUSH
22781: EMPTY
22782: LIST
22783: LIST
22784: PUSH
22785: LD_INT 34
22787: PUSH
22788: LD_INT 32
22790: PUSH
22791: EMPTY
22792: LIST
22793: LIST
22794: PUSH
22795: EMPTY
22796: LIST
22797: LIST
22798: LIST
22799: LIST
22800: PUSH
22801: EMPTY
22802: LIST
22803: LIST
22804: LIST
22805: PPUSH
22806: CALL_OW 69
22810: ST_TO_ADDR
// if not tmp then
22811: LD_VAR 0 2
22815: NOT
22816: IFFALSE 22820
// exit ;
22818: GO 22870
// for i in tmp do
22820: LD_ADDR_VAR 0 1
22824: PUSH
22825: LD_VAR 0 2
22829: PUSH
22830: FOR_IN
22831: IFFALSE 22868
// if GetCargo ( i , mat_artifact ) = 0 then
22833: LD_VAR 0 1
22837: PPUSH
22838: LD_INT 4
22840: PPUSH
22841: CALL_OW 289
22845: PUSH
22846: LD_INT 0
22848: EQUAL
22849: IFFALSE 22866
// SetCargo ( i , mat_siberit , 100 ) ;
22851: LD_VAR 0 1
22855: PPUSH
22856: LD_INT 3
22858: PPUSH
22859: LD_INT 100
22861: PPUSH
22862: CALL_OW 290
22866: GO 22830
22868: POP
22869: POP
// end ;
22870: PPOPN 2
22872: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
22873: LD_EXP 22
22877: PUSH
22878: LD_EXP 67
22882: AND
22883: IFFALSE 23066
22885: GO 22887
22887: DISABLE
22888: LD_INT 0
22890: PPUSH
22891: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22892: LD_ADDR_VAR 0 2
22896: PUSH
22897: LD_INT 22
22899: PUSH
22900: LD_OWVAR 2
22904: PUSH
22905: EMPTY
22906: LIST
22907: LIST
22908: PPUSH
22909: CALL_OW 69
22913: ST_TO_ADDR
// if not tmp then
22914: LD_VAR 0 2
22918: NOT
22919: IFFALSE 22923
// exit ;
22921: GO 23066
// for i := 1 to 2 do
22923: LD_ADDR_VAR 0 1
22927: PUSH
22928: DOUBLE
22929: LD_INT 1
22931: DEC
22932: ST_TO_ADDR
22933: LD_INT 2
22935: PUSH
22936: FOR_TO
22937: IFFALSE 23064
// begin uc_side := your_side ;
22939: LD_ADDR_OWVAR 20
22943: PUSH
22944: LD_OWVAR 2
22948: ST_TO_ADDR
// uc_nation := nation_american ;
22949: LD_ADDR_OWVAR 21
22953: PUSH
22954: LD_INT 1
22956: ST_TO_ADDR
// vc_chassis := us_morphling ;
22957: LD_ADDR_OWVAR 37
22961: PUSH
22962: LD_INT 5
22964: ST_TO_ADDR
// vc_engine := engine_siberite ;
22965: LD_ADDR_OWVAR 39
22969: PUSH
22970: LD_INT 3
22972: ST_TO_ADDR
// vc_control := control_computer ;
22973: LD_ADDR_OWVAR 38
22977: PUSH
22978: LD_INT 3
22980: ST_TO_ADDR
// vc_weapon := us_double_laser ;
22981: LD_ADDR_OWVAR 40
22985: PUSH
22986: LD_INT 10
22988: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
22989: LD_VAR 0 2
22993: PUSH
22994: LD_INT 1
22996: ARRAY
22997: PPUSH
22998: CALL_OW 310
23002: NOT
23003: IFFALSE 23050
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
23005: CALL_OW 45
23009: PPUSH
23010: LD_VAR 0 2
23014: PUSH
23015: LD_INT 1
23017: ARRAY
23018: PPUSH
23019: CALL_OW 250
23023: PPUSH
23024: LD_VAR 0 2
23028: PUSH
23029: LD_INT 1
23031: ARRAY
23032: PPUSH
23033: CALL_OW 251
23037: PPUSH
23038: LD_INT 12
23040: PPUSH
23041: LD_INT 1
23043: PPUSH
23044: CALL_OW 50
23048: GO 23062
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
23050: CALL_OW 45
23054: PPUSH
23055: LD_INT 1
23057: PPUSH
23058: CALL_OW 51
// end ;
23062: GO 22936
23064: POP
23065: POP
// end ;
23066: PPOPN 2
23068: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
23069: LD_EXP 22
23073: PUSH
23074: LD_EXP 68
23078: AND
23079: IFFALSE 23301
23081: GO 23083
23083: DISABLE
23084: LD_INT 0
23086: PPUSH
23087: PPUSH
23088: PPUSH
23089: PPUSH
23090: PPUSH
23091: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
23092: LD_ADDR_VAR 0 6
23096: PUSH
23097: LD_INT 22
23099: PUSH
23100: LD_OWVAR 2
23104: PUSH
23105: EMPTY
23106: LIST
23107: LIST
23108: PUSH
23109: LD_INT 21
23111: PUSH
23112: LD_INT 1
23114: PUSH
23115: EMPTY
23116: LIST
23117: LIST
23118: PUSH
23119: LD_INT 3
23121: PUSH
23122: LD_INT 23
23124: PUSH
23125: LD_INT 0
23127: PUSH
23128: EMPTY
23129: LIST
23130: LIST
23131: PUSH
23132: EMPTY
23133: LIST
23134: LIST
23135: PUSH
23136: EMPTY
23137: LIST
23138: LIST
23139: LIST
23140: PPUSH
23141: CALL_OW 69
23145: ST_TO_ADDR
// if not tmp then
23146: LD_VAR 0 6
23150: NOT
23151: IFFALSE 23155
// exit ;
23153: GO 23301
// s1 := rand ( 1 , 4 ) ;
23155: LD_ADDR_VAR 0 2
23159: PUSH
23160: LD_INT 1
23162: PPUSH
23163: LD_INT 4
23165: PPUSH
23166: CALL_OW 12
23170: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
23171: LD_ADDR_VAR 0 4
23175: PUSH
23176: LD_VAR 0 6
23180: PUSH
23181: LD_INT 1
23183: ARRAY
23184: PPUSH
23185: LD_VAR 0 2
23189: PPUSH
23190: CALL_OW 259
23194: ST_TO_ADDR
// if s1 = 1 then
23195: LD_VAR 0 2
23199: PUSH
23200: LD_INT 1
23202: EQUAL
23203: IFFALSE 23223
// s2 := rand ( 2 , 4 ) else
23205: LD_ADDR_VAR 0 3
23209: PUSH
23210: LD_INT 2
23212: PPUSH
23213: LD_INT 4
23215: PPUSH
23216: CALL_OW 12
23220: ST_TO_ADDR
23221: GO 23231
// s2 := 1 ;
23223: LD_ADDR_VAR 0 3
23227: PUSH
23228: LD_INT 1
23230: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
23231: LD_ADDR_VAR 0 5
23235: PUSH
23236: LD_VAR 0 6
23240: PUSH
23241: LD_INT 1
23243: ARRAY
23244: PPUSH
23245: LD_VAR 0 3
23249: PPUSH
23250: CALL_OW 259
23254: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
23255: LD_VAR 0 6
23259: PUSH
23260: LD_INT 1
23262: ARRAY
23263: PPUSH
23264: LD_VAR 0 2
23268: PPUSH
23269: LD_VAR 0 5
23273: PPUSH
23274: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
23278: LD_VAR 0 6
23282: PUSH
23283: LD_INT 1
23285: ARRAY
23286: PPUSH
23287: LD_VAR 0 3
23291: PPUSH
23292: LD_VAR 0 4
23296: PPUSH
23297: CALL_OW 237
// end ;
23301: PPOPN 6
23303: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
23304: LD_EXP 22
23308: PUSH
23309: LD_EXP 69
23313: AND
23314: IFFALSE 23393
23316: GO 23318
23318: DISABLE
23319: LD_INT 0
23321: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
23322: LD_ADDR_VAR 0 1
23326: PUSH
23327: LD_INT 22
23329: PUSH
23330: LD_OWVAR 2
23334: PUSH
23335: EMPTY
23336: LIST
23337: LIST
23338: PUSH
23339: LD_INT 30
23341: PUSH
23342: LD_INT 3
23344: PUSH
23345: EMPTY
23346: LIST
23347: LIST
23348: PUSH
23349: EMPTY
23350: LIST
23351: LIST
23352: PPUSH
23353: CALL_OW 69
23357: ST_TO_ADDR
// if not tmp then
23358: LD_VAR 0 1
23362: NOT
23363: IFFALSE 23367
// exit ;
23365: GO 23393
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
23367: LD_VAR 0 1
23371: PUSH
23372: LD_INT 1
23374: PPUSH
23375: LD_VAR 0 1
23379: PPUSH
23380: CALL_OW 12
23384: ARRAY
23385: PPUSH
23386: LD_INT 1
23388: PPUSH
23389: CALL_OW 234
// end ;
23393: PPOPN 1
23395: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
23396: LD_EXP 22
23400: PUSH
23401: LD_EXP 70
23405: AND
23406: IFFALSE 23518
23408: GO 23410
23410: DISABLE
23411: LD_INT 0
23413: PPUSH
23414: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
23415: LD_ADDR_VAR 0 2
23419: PUSH
23420: LD_INT 22
23422: PUSH
23423: LD_OWVAR 2
23427: PUSH
23428: EMPTY
23429: LIST
23430: LIST
23431: PUSH
23432: LD_INT 2
23434: PUSH
23435: LD_INT 30
23437: PUSH
23438: LD_INT 27
23440: PUSH
23441: EMPTY
23442: LIST
23443: LIST
23444: PUSH
23445: LD_INT 30
23447: PUSH
23448: LD_INT 26
23450: PUSH
23451: EMPTY
23452: LIST
23453: LIST
23454: PUSH
23455: LD_INT 30
23457: PUSH
23458: LD_INT 28
23460: PUSH
23461: EMPTY
23462: LIST
23463: LIST
23464: PUSH
23465: EMPTY
23466: LIST
23467: LIST
23468: LIST
23469: LIST
23470: PUSH
23471: EMPTY
23472: LIST
23473: LIST
23474: PPUSH
23475: CALL_OW 69
23479: ST_TO_ADDR
// if not tmp then
23480: LD_VAR 0 2
23484: NOT
23485: IFFALSE 23489
// exit ;
23487: GO 23518
// for i in tmp do
23489: LD_ADDR_VAR 0 1
23493: PUSH
23494: LD_VAR 0 2
23498: PUSH
23499: FOR_IN
23500: IFFALSE 23516
// SetLives ( i , 1 ) ;
23502: LD_VAR 0 1
23506: PPUSH
23507: LD_INT 1
23509: PPUSH
23510: CALL_OW 234
23514: GO 23499
23516: POP
23517: POP
// end ;
23518: PPOPN 2
23520: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
23521: LD_EXP 22
23525: PUSH
23526: LD_EXP 71
23530: AND
23531: IFFALSE 23818
23533: GO 23535
23535: DISABLE
23536: LD_INT 0
23538: PPUSH
23539: PPUSH
23540: PPUSH
// begin i := rand ( 1 , 7 ) ;
23541: LD_ADDR_VAR 0 1
23545: PUSH
23546: LD_INT 1
23548: PPUSH
23549: LD_INT 7
23551: PPUSH
23552: CALL_OW 12
23556: ST_TO_ADDR
// case i of 1 :
23557: LD_VAR 0 1
23561: PUSH
23562: LD_INT 1
23564: DOUBLE
23565: EQUAL
23566: IFTRUE 23570
23568: GO 23580
23570: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
23571: LD_STRING earthquake(getX(game), 0, 32)
23573: PPUSH
23574: CALL_OW 559
23578: GO 23818
23580: LD_INT 2
23582: DOUBLE
23583: EQUAL
23584: IFTRUE 23588
23586: GO 23602
23588: POP
// begin ToLua ( displayStucuk(); ) ;
23589: LD_STRING displayStucuk();
23591: PPUSH
23592: CALL_OW 559
// ResetFog ;
23596: CALL_OW 335
// end ; 3 :
23600: GO 23818
23602: LD_INT 3
23604: DOUBLE
23605: EQUAL
23606: IFTRUE 23610
23608: GO 23714
23610: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
23611: LD_ADDR_VAR 0 2
23615: PUSH
23616: LD_INT 22
23618: PUSH
23619: LD_OWVAR 2
23623: PUSH
23624: EMPTY
23625: LIST
23626: LIST
23627: PUSH
23628: LD_INT 25
23630: PUSH
23631: LD_INT 1
23633: PUSH
23634: EMPTY
23635: LIST
23636: LIST
23637: PUSH
23638: EMPTY
23639: LIST
23640: LIST
23641: PPUSH
23642: CALL_OW 69
23646: ST_TO_ADDR
// if not tmp then
23647: LD_VAR 0 2
23651: NOT
23652: IFFALSE 23656
// exit ;
23654: GO 23818
// un := tmp [ rand ( 1 , tmp ) ] ;
23656: LD_ADDR_VAR 0 3
23660: PUSH
23661: LD_VAR 0 2
23665: PUSH
23666: LD_INT 1
23668: PPUSH
23669: LD_VAR 0 2
23673: PPUSH
23674: CALL_OW 12
23678: ARRAY
23679: ST_TO_ADDR
// if Crawls ( un ) then
23680: LD_VAR 0 3
23684: PPUSH
23685: CALL_OW 318
23689: IFFALSE 23700
// ComWalk ( un ) ;
23691: LD_VAR 0 3
23695: PPUSH
23696: CALL_OW 138
// SetClass ( un , class_mortar ) ;
23700: LD_VAR 0 3
23704: PPUSH
23705: LD_INT 8
23707: PPUSH
23708: CALL_OW 336
// end ; 4 :
23712: GO 23818
23714: LD_INT 4
23716: DOUBLE
23717: EQUAL
23718: IFTRUE 23722
23720: GO 23796
23722: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
23723: LD_ADDR_VAR 0 2
23727: PUSH
23728: LD_INT 22
23730: PUSH
23731: LD_OWVAR 2
23735: PUSH
23736: EMPTY
23737: LIST
23738: LIST
23739: PUSH
23740: LD_INT 30
23742: PUSH
23743: LD_INT 29
23745: PUSH
23746: EMPTY
23747: LIST
23748: LIST
23749: PUSH
23750: EMPTY
23751: LIST
23752: LIST
23753: PPUSH
23754: CALL_OW 69
23758: ST_TO_ADDR
// if not tmp then
23759: LD_VAR 0 2
23763: NOT
23764: IFFALSE 23768
// exit ;
23766: GO 23818
// CenterNowOnUnits ( tmp [ 1 ] ) ;
23768: LD_VAR 0 2
23772: PUSH
23773: LD_INT 1
23775: ARRAY
23776: PPUSH
23777: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
23781: LD_VAR 0 2
23785: PUSH
23786: LD_INT 1
23788: ARRAY
23789: PPUSH
23790: CALL_OW 65
// end ; 5 .. 7 :
23794: GO 23818
23796: LD_INT 5
23798: DOUBLE
23799: GREATEREQUAL
23800: IFFALSE 23808
23802: LD_INT 7
23804: DOUBLE
23805: LESSEQUAL
23806: IFTRUE 23810
23808: GO 23817
23810: POP
// StreamSibBomb ; end ;
23811: CALL 20055 0 0
23815: GO 23818
23817: POP
// end ;
23818: PPOPN 3
23820: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
23821: LD_EXP 22
23825: PUSH
23826: LD_EXP 72
23830: AND
23831: IFFALSE 23987
23833: GO 23835
23835: DISABLE
23836: LD_INT 0
23838: PPUSH
23839: PPUSH
23840: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
23841: LD_ADDR_VAR 0 2
23845: PUSH
23846: LD_INT 81
23848: PUSH
23849: LD_OWVAR 2
23853: PUSH
23854: EMPTY
23855: LIST
23856: LIST
23857: PUSH
23858: LD_INT 2
23860: PUSH
23861: LD_INT 21
23863: PUSH
23864: LD_INT 1
23866: PUSH
23867: EMPTY
23868: LIST
23869: LIST
23870: PUSH
23871: LD_INT 21
23873: PUSH
23874: LD_INT 2
23876: PUSH
23877: EMPTY
23878: LIST
23879: LIST
23880: PUSH
23881: EMPTY
23882: LIST
23883: LIST
23884: LIST
23885: PUSH
23886: EMPTY
23887: LIST
23888: LIST
23889: PPUSH
23890: CALL_OW 69
23894: ST_TO_ADDR
// if not tmp then
23895: LD_VAR 0 2
23899: NOT
23900: IFFALSE 23904
// exit ;
23902: GO 23987
// p := 0 ;
23904: LD_ADDR_VAR 0 3
23908: PUSH
23909: LD_INT 0
23911: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23912: LD_INT 35
23914: PPUSH
23915: CALL_OW 67
// p := p + 1 ;
23919: LD_ADDR_VAR 0 3
23923: PUSH
23924: LD_VAR 0 3
23928: PUSH
23929: LD_INT 1
23931: PLUS
23932: ST_TO_ADDR
// for i in tmp do
23933: LD_ADDR_VAR 0 1
23937: PUSH
23938: LD_VAR 0 2
23942: PUSH
23943: FOR_IN
23944: IFFALSE 23975
// if GetLives ( i ) < 1000 then
23946: LD_VAR 0 1
23950: PPUSH
23951: CALL_OW 256
23955: PUSH
23956: LD_INT 1000
23958: LESS
23959: IFFALSE 23973
// SetLives ( i , 1000 ) ;
23961: LD_VAR 0 1
23965: PPUSH
23966: LD_INT 1000
23968: PPUSH
23969: CALL_OW 234
23973: GO 23943
23975: POP
23976: POP
// until p > 20 ;
23977: LD_VAR 0 3
23981: PUSH
23982: LD_INT 20
23984: GREATER
23985: IFFALSE 23912
// end ;
23987: PPOPN 3
23989: END
// every 0 0$1 trigger StreamModeActive and sTime do
23990: LD_EXP 22
23994: PUSH
23995: LD_EXP 73
23999: AND
24000: IFFALSE 24035
24002: GO 24004
24004: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
24005: LD_INT 28
24007: PPUSH
24008: LD_OWVAR 2
24012: PPUSH
24013: LD_INT 2
24015: PPUSH
24016: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
24020: LD_INT 30
24022: PPUSH
24023: LD_OWVAR 2
24027: PPUSH
24028: LD_INT 2
24030: PPUSH
24031: CALL_OW 322
// end ;
24035: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
24036: LD_EXP 22
24040: PUSH
24041: LD_EXP 74
24045: AND
24046: IFFALSE 24167
24048: GO 24050
24050: DISABLE
24051: LD_INT 0
24053: PPUSH
24054: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
24055: LD_ADDR_VAR 0 2
24059: PUSH
24060: LD_INT 22
24062: PUSH
24063: LD_OWVAR 2
24067: PUSH
24068: EMPTY
24069: LIST
24070: LIST
24071: PUSH
24072: LD_INT 21
24074: PUSH
24075: LD_INT 1
24077: PUSH
24078: EMPTY
24079: LIST
24080: LIST
24081: PUSH
24082: LD_INT 3
24084: PUSH
24085: LD_INT 23
24087: PUSH
24088: LD_INT 0
24090: PUSH
24091: EMPTY
24092: LIST
24093: LIST
24094: PUSH
24095: EMPTY
24096: LIST
24097: LIST
24098: PUSH
24099: EMPTY
24100: LIST
24101: LIST
24102: LIST
24103: PPUSH
24104: CALL_OW 69
24108: ST_TO_ADDR
// if not tmp then
24109: LD_VAR 0 2
24113: NOT
24114: IFFALSE 24118
// exit ;
24116: GO 24167
// for i in tmp do
24118: LD_ADDR_VAR 0 1
24122: PUSH
24123: LD_VAR 0 2
24127: PUSH
24128: FOR_IN
24129: IFFALSE 24165
// begin if Crawls ( i ) then
24131: LD_VAR 0 1
24135: PPUSH
24136: CALL_OW 318
24140: IFFALSE 24151
// ComWalk ( i ) ;
24142: LD_VAR 0 1
24146: PPUSH
24147: CALL_OW 138
// SetClass ( i , 2 ) ;
24151: LD_VAR 0 1
24155: PPUSH
24156: LD_INT 2
24158: PPUSH
24159: CALL_OW 336
// end ;
24163: GO 24128
24165: POP
24166: POP
// end ;
24167: PPOPN 2
24169: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
24170: LD_EXP 22
24174: PUSH
24175: LD_EXP 75
24179: AND
24180: IFFALSE 24468
24182: GO 24184
24184: DISABLE
24185: LD_INT 0
24187: PPUSH
24188: PPUSH
24189: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
24190: LD_OWVAR 2
24194: PPUSH
24195: LD_INT 9
24197: PPUSH
24198: LD_INT 1
24200: PPUSH
24201: LD_INT 1
24203: PPUSH
24204: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
24208: LD_INT 9
24210: PPUSH
24211: LD_OWVAR 2
24215: PPUSH
24216: CALL_OW 343
// uc_side := 9 ;
24220: LD_ADDR_OWVAR 20
24224: PUSH
24225: LD_INT 9
24227: ST_TO_ADDR
// uc_nation := 2 ;
24228: LD_ADDR_OWVAR 21
24232: PUSH
24233: LD_INT 2
24235: ST_TO_ADDR
// hc_name := Dark Warrior ;
24236: LD_ADDR_OWVAR 26
24240: PUSH
24241: LD_STRING Dark Warrior
24243: ST_TO_ADDR
// hc_gallery :=  ;
24244: LD_ADDR_OWVAR 33
24248: PUSH
24249: LD_STRING 
24251: ST_TO_ADDR
// hc_noskilllimit := true ;
24252: LD_ADDR_OWVAR 76
24256: PUSH
24257: LD_INT 1
24259: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
24260: LD_ADDR_OWVAR 31
24264: PUSH
24265: LD_INT 30
24267: PUSH
24268: LD_INT 30
24270: PUSH
24271: LD_INT 30
24273: PUSH
24274: LD_INT 30
24276: PUSH
24277: EMPTY
24278: LIST
24279: LIST
24280: LIST
24281: LIST
24282: ST_TO_ADDR
// un := CreateHuman ;
24283: LD_ADDR_VAR 0 3
24287: PUSH
24288: CALL_OW 44
24292: ST_TO_ADDR
// hc_noskilllimit := false ;
24293: LD_ADDR_OWVAR 76
24297: PUSH
24298: LD_INT 0
24300: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
24301: LD_VAR 0 3
24305: PPUSH
24306: LD_INT 1
24308: PPUSH
24309: CALL_OW 51
// ToLua ( playRanger() ) ;
24313: LD_STRING playRanger()
24315: PPUSH
24316: CALL_OW 559
// p := 0 ;
24320: LD_ADDR_VAR 0 2
24324: PUSH
24325: LD_INT 0
24327: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
24328: LD_INT 35
24330: PPUSH
24331: CALL_OW 67
// p := p + 1 ;
24335: LD_ADDR_VAR 0 2
24339: PUSH
24340: LD_VAR 0 2
24344: PUSH
24345: LD_INT 1
24347: PLUS
24348: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
24349: LD_VAR 0 3
24353: PPUSH
24354: CALL_OW 256
24358: PUSH
24359: LD_INT 1000
24361: LESS
24362: IFFALSE 24376
// SetLives ( un , 1000 ) ;
24364: LD_VAR 0 3
24368: PPUSH
24369: LD_INT 1000
24371: PPUSH
24372: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
24376: LD_VAR 0 3
24380: PPUSH
24381: LD_INT 81
24383: PUSH
24384: LD_OWVAR 2
24388: PUSH
24389: EMPTY
24390: LIST
24391: LIST
24392: PUSH
24393: LD_INT 91
24395: PUSH
24396: LD_VAR 0 3
24400: PUSH
24401: LD_INT 30
24403: PUSH
24404: EMPTY
24405: LIST
24406: LIST
24407: LIST
24408: PUSH
24409: EMPTY
24410: LIST
24411: LIST
24412: PPUSH
24413: CALL_OW 69
24417: PPUSH
24418: LD_VAR 0 3
24422: PPUSH
24423: CALL_OW 74
24427: PPUSH
24428: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
24432: LD_VAR 0 2
24436: PUSH
24437: LD_INT 80
24439: GREATER
24440: PUSH
24441: LD_VAR 0 3
24445: PPUSH
24446: CALL_OW 301
24450: OR
24451: IFFALSE 24328
// if un then
24453: LD_VAR 0 3
24457: IFFALSE 24468
// RemoveUnit ( un ) ;
24459: LD_VAR 0 3
24463: PPUSH
24464: CALL_OW 64
// end ;
24468: PPOPN 3
24470: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
24471: LD_EXP 76
24475: IFFALSE 24591
24477: GO 24479
24479: DISABLE
24480: LD_INT 0
24482: PPUSH
24483: PPUSH
24484: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
24485: LD_ADDR_VAR 0 2
24489: PUSH
24490: LD_INT 81
24492: PUSH
24493: LD_OWVAR 2
24497: PUSH
24498: EMPTY
24499: LIST
24500: LIST
24501: PUSH
24502: LD_INT 21
24504: PUSH
24505: LD_INT 1
24507: PUSH
24508: EMPTY
24509: LIST
24510: LIST
24511: PUSH
24512: EMPTY
24513: LIST
24514: LIST
24515: PPUSH
24516: CALL_OW 69
24520: ST_TO_ADDR
// ToLua ( playComputer() ) ;
24521: LD_STRING playComputer()
24523: PPUSH
24524: CALL_OW 559
// if not tmp then
24528: LD_VAR 0 2
24532: NOT
24533: IFFALSE 24537
// exit ;
24535: GO 24591
// for i in tmp do
24537: LD_ADDR_VAR 0 1
24541: PUSH
24542: LD_VAR 0 2
24546: PUSH
24547: FOR_IN
24548: IFFALSE 24589
// for j := 1 to 4 do
24550: LD_ADDR_VAR 0 3
24554: PUSH
24555: DOUBLE
24556: LD_INT 1
24558: DEC
24559: ST_TO_ADDR
24560: LD_INT 4
24562: PUSH
24563: FOR_TO
24564: IFFALSE 24585
// SetSkill ( i , j , 10 ) ;
24566: LD_VAR 0 1
24570: PPUSH
24571: LD_VAR 0 3
24575: PPUSH
24576: LD_INT 10
24578: PPUSH
24579: CALL_OW 237
24583: GO 24563
24585: POP
24586: POP
24587: GO 24547
24589: POP
24590: POP
// end ;
24591: PPOPN 3
24593: END
// every 0 0$1 trigger s30 do var i , tmp ;
24594: LD_EXP 77
24598: IFFALSE 24667
24600: GO 24602
24602: DISABLE
24603: LD_INT 0
24605: PPUSH
24606: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
24607: LD_ADDR_VAR 0 2
24611: PUSH
24612: LD_INT 22
24614: PUSH
24615: LD_OWVAR 2
24619: PUSH
24620: EMPTY
24621: LIST
24622: LIST
24623: PPUSH
24624: CALL_OW 69
24628: ST_TO_ADDR
// if not tmp then
24629: LD_VAR 0 2
24633: NOT
24634: IFFALSE 24638
// exit ;
24636: GO 24667
// for i in tmp do
24638: LD_ADDR_VAR 0 1
24642: PUSH
24643: LD_VAR 0 2
24647: PUSH
24648: FOR_IN
24649: IFFALSE 24665
// SetLives ( i , 300 ) ;
24651: LD_VAR 0 1
24655: PPUSH
24656: LD_INT 300
24658: PPUSH
24659: CALL_OW 234
24663: GO 24648
24665: POP
24666: POP
// end ;
24667: PPOPN 2
24669: END
// every 0 0$1 trigger s60 do var i , tmp ;
24670: LD_EXP 78
24674: IFFALSE 24743
24676: GO 24678
24678: DISABLE
24679: LD_INT 0
24681: PPUSH
24682: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
24683: LD_ADDR_VAR 0 2
24687: PUSH
24688: LD_INT 22
24690: PUSH
24691: LD_OWVAR 2
24695: PUSH
24696: EMPTY
24697: LIST
24698: LIST
24699: PPUSH
24700: CALL_OW 69
24704: ST_TO_ADDR
// if not tmp then
24705: LD_VAR 0 2
24709: NOT
24710: IFFALSE 24714
// exit ;
24712: GO 24743
// for i in tmp do
24714: LD_ADDR_VAR 0 1
24718: PUSH
24719: LD_VAR 0 2
24723: PUSH
24724: FOR_IN
24725: IFFALSE 24741
// SetLives ( i , 600 ) ;
24727: LD_VAR 0 1
24731: PPUSH
24732: LD_INT 600
24734: PPUSH
24735: CALL_OW 234
24739: GO 24724
24741: POP
24742: POP
// end ;
24743: PPOPN 2
24745: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
24746: LD_INT 0
24748: PPUSH
// case cmd of 301 :
24749: LD_VAR 0 1
24753: PUSH
24754: LD_INT 301
24756: DOUBLE
24757: EQUAL
24758: IFTRUE 24762
24760: GO 24794
24762: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
24763: LD_VAR 0 6
24767: PPUSH
24768: LD_VAR 0 7
24772: PPUSH
24773: LD_VAR 0 8
24777: PPUSH
24778: LD_VAR 0 4
24782: PPUSH
24783: LD_VAR 0 5
24787: PPUSH
24788: CALL 25995 0 5
24792: GO 24915
24794: LD_INT 302
24796: DOUBLE
24797: EQUAL
24798: IFTRUE 24802
24800: GO 24839
24802: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
24803: LD_VAR 0 6
24807: PPUSH
24808: LD_VAR 0 7
24812: PPUSH
24813: LD_VAR 0 8
24817: PPUSH
24818: LD_VAR 0 9
24822: PPUSH
24823: LD_VAR 0 4
24827: PPUSH
24828: LD_VAR 0 5
24832: PPUSH
24833: CALL 26086 0 6
24837: GO 24915
24839: LD_INT 303
24841: DOUBLE
24842: EQUAL
24843: IFTRUE 24847
24845: GO 24884
24847: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
24848: LD_VAR 0 6
24852: PPUSH
24853: LD_VAR 0 7
24857: PPUSH
24858: LD_VAR 0 8
24862: PPUSH
24863: LD_VAR 0 9
24867: PPUSH
24868: LD_VAR 0 4
24872: PPUSH
24873: LD_VAR 0 5
24877: PPUSH
24878: CALL 24920 0 6
24882: GO 24915
24884: LD_INT 304
24886: DOUBLE
24887: EQUAL
24888: IFTRUE 24892
24890: GO 24914
24892: POP
// hHackTeleport ( unit , x , y ) ; end ;
24893: LD_VAR 0 2
24897: PPUSH
24898: LD_VAR 0 4
24902: PPUSH
24903: LD_VAR 0 5
24907: PPUSH
24908: CALL 26679 0 3
24912: GO 24915
24914: POP
// end ;
24915: LD_VAR 0 12
24919: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
24920: LD_INT 0
24922: PPUSH
24923: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
24924: LD_VAR 0 1
24928: PUSH
24929: LD_INT 1
24931: LESS
24932: PUSH
24933: LD_VAR 0 1
24937: PUSH
24938: LD_INT 3
24940: GREATER
24941: OR
24942: PUSH
24943: LD_VAR 0 5
24947: PPUSH
24948: LD_VAR 0 6
24952: PPUSH
24953: CALL_OW 428
24957: OR
24958: IFFALSE 24962
// exit ;
24960: GO 25682
// uc_side := your_side ;
24962: LD_ADDR_OWVAR 20
24966: PUSH
24967: LD_OWVAR 2
24971: ST_TO_ADDR
// uc_nation := nation ;
24972: LD_ADDR_OWVAR 21
24976: PUSH
24977: LD_VAR 0 1
24981: ST_TO_ADDR
// bc_level = 1 ;
24982: LD_ADDR_OWVAR 43
24986: PUSH
24987: LD_INT 1
24989: ST_TO_ADDR
// case btype of 1 :
24990: LD_VAR 0 2
24994: PUSH
24995: LD_INT 1
24997: DOUBLE
24998: EQUAL
24999: IFTRUE 25003
25001: GO 25014
25003: POP
// bc_type := b_depot ; 2 :
25004: LD_ADDR_OWVAR 42
25008: PUSH
25009: LD_INT 0
25011: ST_TO_ADDR
25012: GO 25626
25014: LD_INT 2
25016: DOUBLE
25017: EQUAL
25018: IFTRUE 25022
25020: GO 25033
25022: POP
// bc_type := b_warehouse ; 3 :
25023: LD_ADDR_OWVAR 42
25027: PUSH
25028: LD_INT 1
25030: ST_TO_ADDR
25031: GO 25626
25033: LD_INT 3
25035: DOUBLE
25036: EQUAL
25037: IFTRUE 25041
25039: GO 25052
25041: POP
// bc_type := b_lab ; 4 .. 9 :
25042: LD_ADDR_OWVAR 42
25046: PUSH
25047: LD_INT 6
25049: ST_TO_ADDR
25050: GO 25626
25052: LD_INT 4
25054: DOUBLE
25055: GREATEREQUAL
25056: IFFALSE 25064
25058: LD_INT 9
25060: DOUBLE
25061: LESSEQUAL
25062: IFTRUE 25066
25064: GO 25118
25066: POP
// begin bc_type := b_lab_half ;
25067: LD_ADDR_OWVAR 42
25071: PUSH
25072: LD_INT 7
25074: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
25075: LD_ADDR_OWVAR 44
25079: PUSH
25080: LD_INT 10
25082: PUSH
25083: LD_INT 11
25085: PUSH
25086: LD_INT 12
25088: PUSH
25089: LD_INT 15
25091: PUSH
25092: LD_INT 14
25094: PUSH
25095: LD_INT 13
25097: PUSH
25098: EMPTY
25099: LIST
25100: LIST
25101: LIST
25102: LIST
25103: LIST
25104: LIST
25105: PUSH
25106: LD_VAR 0 2
25110: PUSH
25111: LD_INT 3
25113: MINUS
25114: ARRAY
25115: ST_TO_ADDR
// end ; 10 .. 13 :
25116: GO 25626
25118: LD_INT 10
25120: DOUBLE
25121: GREATEREQUAL
25122: IFFALSE 25130
25124: LD_INT 13
25126: DOUBLE
25127: LESSEQUAL
25128: IFTRUE 25132
25130: GO 25209
25132: POP
// begin bc_type := b_lab_full ;
25133: LD_ADDR_OWVAR 42
25137: PUSH
25138: LD_INT 8
25140: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
25141: LD_ADDR_OWVAR 44
25145: PUSH
25146: LD_INT 10
25148: PUSH
25149: LD_INT 12
25151: PUSH
25152: LD_INT 14
25154: PUSH
25155: LD_INT 13
25157: PUSH
25158: EMPTY
25159: LIST
25160: LIST
25161: LIST
25162: LIST
25163: PUSH
25164: LD_VAR 0 2
25168: PUSH
25169: LD_INT 9
25171: MINUS
25172: ARRAY
25173: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
25174: LD_ADDR_OWVAR 45
25178: PUSH
25179: LD_INT 11
25181: PUSH
25182: LD_INT 15
25184: PUSH
25185: LD_INT 12
25187: PUSH
25188: LD_INT 15
25190: PUSH
25191: EMPTY
25192: LIST
25193: LIST
25194: LIST
25195: LIST
25196: PUSH
25197: LD_VAR 0 2
25201: PUSH
25202: LD_INT 9
25204: MINUS
25205: ARRAY
25206: ST_TO_ADDR
// end ; 14 :
25207: GO 25626
25209: LD_INT 14
25211: DOUBLE
25212: EQUAL
25213: IFTRUE 25217
25215: GO 25228
25217: POP
// bc_type := b_workshop ; 15 :
25218: LD_ADDR_OWVAR 42
25222: PUSH
25223: LD_INT 2
25225: ST_TO_ADDR
25226: GO 25626
25228: LD_INT 15
25230: DOUBLE
25231: EQUAL
25232: IFTRUE 25236
25234: GO 25247
25236: POP
// bc_type := b_factory ; 16 :
25237: LD_ADDR_OWVAR 42
25241: PUSH
25242: LD_INT 3
25244: ST_TO_ADDR
25245: GO 25626
25247: LD_INT 16
25249: DOUBLE
25250: EQUAL
25251: IFTRUE 25255
25253: GO 25266
25255: POP
// bc_type := b_ext_gun ; 17 :
25256: LD_ADDR_OWVAR 42
25260: PUSH
25261: LD_INT 17
25263: ST_TO_ADDR
25264: GO 25626
25266: LD_INT 17
25268: DOUBLE
25269: EQUAL
25270: IFTRUE 25274
25272: GO 25302
25274: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
25275: LD_ADDR_OWVAR 42
25279: PUSH
25280: LD_INT 19
25282: PUSH
25283: LD_INT 23
25285: PUSH
25286: LD_INT 19
25288: PUSH
25289: EMPTY
25290: LIST
25291: LIST
25292: LIST
25293: PUSH
25294: LD_VAR 0 1
25298: ARRAY
25299: ST_TO_ADDR
25300: GO 25626
25302: LD_INT 18
25304: DOUBLE
25305: EQUAL
25306: IFTRUE 25310
25308: GO 25321
25310: POP
// bc_type := b_ext_radar ; 19 :
25311: LD_ADDR_OWVAR 42
25315: PUSH
25316: LD_INT 20
25318: ST_TO_ADDR
25319: GO 25626
25321: LD_INT 19
25323: DOUBLE
25324: EQUAL
25325: IFTRUE 25329
25327: GO 25340
25329: POP
// bc_type := b_ext_radio ; 20 :
25330: LD_ADDR_OWVAR 42
25334: PUSH
25335: LD_INT 22
25337: ST_TO_ADDR
25338: GO 25626
25340: LD_INT 20
25342: DOUBLE
25343: EQUAL
25344: IFTRUE 25348
25346: GO 25359
25348: POP
// bc_type := b_ext_siberium ; 21 :
25349: LD_ADDR_OWVAR 42
25353: PUSH
25354: LD_INT 21
25356: ST_TO_ADDR
25357: GO 25626
25359: LD_INT 21
25361: DOUBLE
25362: EQUAL
25363: IFTRUE 25367
25365: GO 25378
25367: POP
// bc_type := b_ext_computer ; 22 :
25368: LD_ADDR_OWVAR 42
25372: PUSH
25373: LD_INT 24
25375: ST_TO_ADDR
25376: GO 25626
25378: LD_INT 22
25380: DOUBLE
25381: EQUAL
25382: IFTRUE 25386
25384: GO 25397
25386: POP
// bc_type := b_ext_track ; 23 :
25387: LD_ADDR_OWVAR 42
25391: PUSH
25392: LD_INT 16
25394: ST_TO_ADDR
25395: GO 25626
25397: LD_INT 23
25399: DOUBLE
25400: EQUAL
25401: IFTRUE 25405
25403: GO 25416
25405: POP
// bc_type := b_ext_laser ; 24 :
25406: LD_ADDR_OWVAR 42
25410: PUSH
25411: LD_INT 25
25413: ST_TO_ADDR
25414: GO 25626
25416: LD_INT 24
25418: DOUBLE
25419: EQUAL
25420: IFTRUE 25424
25422: GO 25435
25424: POP
// bc_type := b_control_tower ; 25 :
25425: LD_ADDR_OWVAR 42
25429: PUSH
25430: LD_INT 36
25432: ST_TO_ADDR
25433: GO 25626
25435: LD_INT 25
25437: DOUBLE
25438: EQUAL
25439: IFTRUE 25443
25441: GO 25454
25443: POP
// bc_type := b_breastwork ; 26 :
25444: LD_ADDR_OWVAR 42
25448: PUSH
25449: LD_INT 31
25451: ST_TO_ADDR
25452: GO 25626
25454: LD_INT 26
25456: DOUBLE
25457: EQUAL
25458: IFTRUE 25462
25460: GO 25473
25462: POP
// bc_type := b_bunker ; 27 :
25463: LD_ADDR_OWVAR 42
25467: PUSH
25468: LD_INT 32
25470: ST_TO_ADDR
25471: GO 25626
25473: LD_INT 27
25475: DOUBLE
25476: EQUAL
25477: IFTRUE 25481
25479: GO 25492
25481: POP
// bc_type := b_turret ; 28 :
25482: LD_ADDR_OWVAR 42
25486: PUSH
25487: LD_INT 33
25489: ST_TO_ADDR
25490: GO 25626
25492: LD_INT 28
25494: DOUBLE
25495: EQUAL
25496: IFTRUE 25500
25498: GO 25511
25500: POP
// bc_type := b_armoury ; 29 :
25501: LD_ADDR_OWVAR 42
25505: PUSH
25506: LD_INT 4
25508: ST_TO_ADDR
25509: GO 25626
25511: LD_INT 29
25513: DOUBLE
25514: EQUAL
25515: IFTRUE 25519
25517: GO 25530
25519: POP
// bc_type := b_barracks ; 30 :
25520: LD_ADDR_OWVAR 42
25524: PUSH
25525: LD_INT 5
25527: ST_TO_ADDR
25528: GO 25626
25530: LD_INT 30
25532: DOUBLE
25533: EQUAL
25534: IFTRUE 25538
25536: GO 25549
25538: POP
// bc_type := b_solar_power ; 31 :
25539: LD_ADDR_OWVAR 42
25543: PUSH
25544: LD_INT 27
25546: ST_TO_ADDR
25547: GO 25626
25549: LD_INT 31
25551: DOUBLE
25552: EQUAL
25553: IFTRUE 25557
25555: GO 25568
25557: POP
// bc_type := b_oil_power ; 32 :
25558: LD_ADDR_OWVAR 42
25562: PUSH
25563: LD_INT 26
25565: ST_TO_ADDR
25566: GO 25626
25568: LD_INT 32
25570: DOUBLE
25571: EQUAL
25572: IFTRUE 25576
25574: GO 25587
25576: POP
// bc_type := b_siberite_power ; 33 :
25577: LD_ADDR_OWVAR 42
25581: PUSH
25582: LD_INT 28
25584: ST_TO_ADDR
25585: GO 25626
25587: LD_INT 33
25589: DOUBLE
25590: EQUAL
25591: IFTRUE 25595
25593: GO 25606
25595: POP
// bc_type := b_oil_mine ; 34 :
25596: LD_ADDR_OWVAR 42
25600: PUSH
25601: LD_INT 29
25603: ST_TO_ADDR
25604: GO 25626
25606: LD_INT 34
25608: DOUBLE
25609: EQUAL
25610: IFTRUE 25614
25612: GO 25625
25614: POP
// bc_type := b_siberite_mine ; end ;
25615: LD_ADDR_OWVAR 42
25619: PUSH
25620: LD_INT 30
25622: ST_TO_ADDR
25623: GO 25626
25625: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
25626: LD_ADDR_VAR 0 8
25630: PUSH
25631: LD_VAR 0 5
25635: PPUSH
25636: LD_VAR 0 6
25640: PPUSH
25641: LD_VAR 0 3
25645: PPUSH
25646: CALL_OW 47
25650: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
25651: LD_OWVAR 42
25655: PUSH
25656: LD_INT 32
25658: PUSH
25659: LD_INT 33
25661: PUSH
25662: EMPTY
25663: LIST
25664: LIST
25665: IN
25666: IFFALSE 25682
// PlaceWeaponTurret ( b , weapon ) ;
25668: LD_VAR 0 8
25672: PPUSH
25673: LD_VAR 0 4
25677: PPUSH
25678: CALL_OW 431
// end ;
25682: LD_VAR 0 7
25686: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
25687: LD_INT 0
25689: PPUSH
25690: PPUSH
25691: PPUSH
25692: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
25693: LD_ADDR_VAR 0 4
25697: PUSH
25698: LD_INT 22
25700: PUSH
25701: LD_OWVAR 2
25705: PUSH
25706: EMPTY
25707: LIST
25708: LIST
25709: PUSH
25710: LD_INT 2
25712: PUSH
25713: LD_INT 30
25715: PUSH
25716: LD_INT 0
25718: PUSH
25719: EMPTY
25720: LIST
25721: LIST
25722: PUSH
25723: LD_INT 30
25725: PUSH
25726: LD_INT 1
25728: PUSH
25729: EMPTY
25730: LIST
25731: LIST
25732: PUSH
25733: EMPTY
25734: LIST
25735: LIST
25736: LIST
25737: PUSH
25738: EMPTY
25739: LIST
25740: LIST
25741: PPUSH
25742: CALL_OW 69
25746: ST_TO_ADDR
// if not tmp then
25747: LD_VAR 0 4
25751: NOT
25752: IFFALSE 25756
// exit ;
25754: GO 25815
// for i in tmp do
25756: LD_ADDR_VAR 0 2
25760: PUSH
25761: LD_VAR 0 4
25765: PUSH
25766: FOR_IN
25767: IFFALSE 25813
// for j = 1 to 3 do
25769: LD_ADDR_VAR 0 3
25773: PUSH
25774: DOUBLE
25775: LD_INT 1
25777: DEC
25778: ST_TO_ADDR
25779: LD_INT 3
25781: PUSH
25782: FOR_TO
25783: IFFALSE 25809
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
25785: LD_VAR 0 2
25789: PPUSH
25790: CALL_OW 274
25794: PPUSH
25795: LD_VAR 0 3
25799: PPUSH
25800: LD_INT 99999
25802: PPUSH
25803: CALL_OW 277
25807: GO 25782
25809: POP
25810: POP
25811: GO 25766
25813: POP
25814: POP
// end ;
25815: LD_VAR 0 1
25819: RET
// export function hHackSetLevel10 ; var i , j ; begin
25820: LD_INT 0
25822: PPUSH
25823: PPUSH
25824: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
25825: LD_ADDR_VAR 0 2
25829: PUSH
25830: LD_INT 21
25832: PUSH
25833: LD_INT 1
25835: PUSH
25836: EMPTY
25837: LIST
25838: LIST
25839: PPUSH
25840: CALL_OW 69
25844: PUSH
25845: FOR_IN
25846: IFFALSE 25898
// if IsSelected ( i ) then
25848: LD_VAR 0 2
25852: PPUSH
25853: CALL_OW 306
25857: IFFALSE 25896
// begin for j := 1 to 4 do
25859: LD_ADDR_VAR 0 3
25863: PUSH
25864: DOUBLE
25865: LD_INT 1
25867: DEC
25868: ST_TO_ADDR
25869: LD_INT 4
25871: PUSH
25872: FOR_TO
25873: IFFALSE 25894
// SetSkill ( i , j , 10 ) ;
25875: LD_VAR 0 2
25879: PPUSH
25880: LD_VAR 0 3
25884: PPUSH
25885: LD_INT 10
25887: PPUSH
25888: CALL_OW 237
25892: GO 25872
25894: POP
25895: POP
// end ;
25896: GO 25845
25898: POP
25899: POP
// end ;
25900: LD_VAR 0 1
25904: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
25905: LD_INT 0
25907: PPUSH
25908: PPUSH
25909: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
25910: LD_ADDR_VAR 0 2
25914: PUSH
25915: LD_INT 22
25917: PUSH
25918: LD_OWVAR 2
25922: PUSH
25923: EMPTY
25924: LIST
25925: LIST
25926: PUSH
25927: LD_INT 21
25929: PUSH
25930: LD_INT 1
25932: PUSH
25933: EMPTY
25934: LIST
25935: LIST
25936: PUSH
25937: EMPTY
25938: LIST
25939: LIST
25940: PPUSH
25941: CALL_OW 69
25945: PUSH
25946: FOR_IN
25947: IFFALSE 25988
// begin for j := 1 to 4 do
25949: LD_ADDR_VAR 0 3
25953: PUSH
25954: DOUBLE
25955: LD_INT 1
25957: DEC
25958: ST_TO_ADDR
25959: LD_INT 4
25961: PUSH
25962: FOR_TO
25963: IFFALSE 25984
// SetSkill ( i , j , 10 ) ;
25965: LD_VAR 0 2
25969: PPUSH
25970: LD_VAR 0 3
25974: PPUSH
25975: LD_INT 10
25977: PPUSH
25978: CALL_OW 237
25982: GO 25962
25984: POP
25985: POP
// end ;
25986: GO 25946
25988: POP
25989: POP
// end ;
25990: LD_VAR 0 1
25994: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
25995: LD_INT 0
25997: PPUSH
// uc_side := your_side ;
25998: LD_ADDR_OWVAR 20
26002: PUSH
26003: LD_OWVAR 2
26007: ST_TO_ADDR
// uc_nation := nation ;
26008: LD_ADDR_OWVAR 21
26012: PUSH
26013: LD_VAR 0 1
26017: ST_TO_ADDR
// InitHc ;
26018: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
26022: LD_INT 0
26024: PPUSH
26025: LD_VAR 0 2
26029: PPUSH
26030: LD_VAR 0 3
26034: PPUSH
26035: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
26039: LD_VAR 0 4
26043: PPUSH
26044: LD_VAR 0 5
26048: PPUSH
26049: CALL_OW 428
26053: PUSH
26054: LD_INT 0
26056: EQUAL
26057: IFFALSE 26081
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
26059: CALL_OW 44
26063: PPUSH
26064: LD_VAR 0 4
26068: PPUSH
26069: LD_VAR 0 5
26073: PPUSH
26074: LD_INT 1
26076: PPUSH
26077: CALL_OW 48
// end ;
26081: LD_VAR 0 6
26085: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
26086: LD_INT 0
26088: PPUSH
26089: PPUSH
// uc_side := your_side ;
26090: LD_ADDR_OWVAR 20
26094: PUSH
26095: LD_OWVAR 2
26099: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
26100: LD_VAR 0 1
26104: PUSH
26105: LD_INT 1
26107: PUSH
26108: LD_INT 2
26110: PUSH
26111: LD_INT 3
26113: PUSH
26114: LD_INT 4
26116: PUSH
26117: LD_INT 5
26119: PUSH
26120: EMPTY
26121: LIST
26122: LIST
26123: LIST
26124: LIST
26125: LIST
26126: IN
26127: IFFALSE 26139
// uc_nation := nation_american else
26129: LD_ADDR_OWVAR 21
26133: PUSH
26134: LD_INT 1
26136: ST_TO_ADDR
26137: GO 26182
// if chassis in [ 11 , 12 , 13 , 14 ] then
26139: LD_VAR 0 1
26143: PUSH
26144: LD_INT 11
26146: PUSH
26147: LD_INT 12
26149: PUSH
26150: LD_INT 13
26152: PUSH
26153: LD_INT 14
26155: PUSH
26156: EMPTY
26157: LIST
26158: LIST
26159: LIST
26160: LIST
26161: IN
26162: IFFALSE 26174
// uc_nation := nation_arabian else
26164: LD_ADDR_OWVAR 21
26168: PUSH
26169: LD_INT 2
26171: ST_TO_ADDR
26172: GO 26182
// uc_nation := nation_russian ;
26174: LD_ADDR_OWVAR 21
26178: PUSH
26179: LD_INT 3
26181: ST_TO_ADDR
// vc_chassis := chassis ;
26182: LD_ADDR_OWVAR 37
26186: PUSH
26187: LD_VAR 0 1
26191: ST_TO_ADDR
// vc_engine := engine ;
26192: LD_ADDR_OWVAR 39
26196: PUSH
26197: LD_VAR 0 2
26201: ST_TO_ADDR
// vc_control := control ;
26202: LD_ADDR_OWVAR 38
26206: PUSH
26207: LD_VAR 0 3
26211: ST_TO_ADDR
// vc_weapon := weapon ;
26212: LD_ADDR_OWVAR 40
26216: PUSH
26217: LD_VAR 0 4
26221: ST_TO_ADDR
// un := CreateVehicle ;
26222: LD_ADDR_VAR 0 8
26226: PUSH
26227: CALL_OW 45
26231: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
26232: LD_VAR 0 8
26236: PPUSH
26237: LD_INT 0
26239: PPUSH
26240: LD_INT 5
26242: PPUSH
26243: CALL_OW 12
26247: PPUSH
26248: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
26252: LD_VAR 0 8
26256: PPUSH
26257: LD_VAR 0 5
26261: PPUSH
26262: LD_VAR 0 6
26266: PPUSH
26267: LD_INT 1
26269: PPUSH
26270: CALL_OW 48
// end ;
26274: LD_VAR 0 7
26278: RET
// export hInvincible ; every 1 do
26279: GO 26281
26281: DISABLE
// hInvincible := [ ] ;
26282: LD_ADDR_EXP 79
26286: PUSH
26287: EMPTY
26288: ST_TO_ADDR
26289: END
// every 10 do var i ;
26290: GO 26292
26292: DISABLE
26293: LD_INT 0
26295: PPUSH
// begin enable ;
26296: ENABLE
// if not hInvincible then
26297: LD_EXP 79
26301: NOT
26302: IFFALSE 26306
// exit ;
26304: GO 26350
// for i in hInvincible do
26306: LD_ADDR_VAR 0 1
26310: PUSH
26311: LD_EXP 79
26315: PUSH
26316: FOR_IN
26317: IFFALSE 26348
// if GetLives ( i ) < 1000 then
26319: LD_VAR 0 1
26323: PPUSH
26324: CALL_OW 256
26328: PUSH
26329: LD_INT 1000
26331: LESS
26332: IFFALSE 26346
// SetLives ( i , 1000 ) ;
26334: LD_VAR 0 1
26338: PPUSH
26339: LD_INT 1000
26341: PPUSH
26342: CALL_OW 234
26346: GO 26316
26348: POP
26349: POP
// end ;
26350: PPOPN 1
26352: END
// export function hHackInvincible ; var i ; begin
26353: LD_INT 0
26355: PPUSH
26356: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
26357: LD_ADDR_VAR 0 2
26361: PUSH
26362: LD_INT 2
26364: PUSH
26365: LD_INT 21
26367: PUSH
26368: LD_INT 1
26370: PUSH
26371: EMPTY
26372: LIST
26373: LIST
26374: PUSH
26375: LD_INT 21
26377: PUSH
26378: LD_INT 2
26380: PUSH
26381: EMPTY
26382: LIST
26383: LIST
26384: PUSH
26385: EMPTY
26386: LIST
26387: LIST
26388: LIST
26389: PPUSH
26390: CALL_OW 69
26394: PUSH
26395: FOR_IN
26396: IFFALSE 26457
// if IsSelected ( i ) then
26398: LD_VAR 0 2
26402: PPUSH
26403: CALL_OW 306
26407: IFFALSE 26455
// begin if i in hInvincible then
26409: LD_VAR 0 2
26413: PUSH
26414: LD_EXP 79
26418: IN
26419: IFFALSE 26439
// hInvincible := hInvincible diff i else
26421: LD_ADDR_EXP 79
26425: PUSH
26426: LD_EXP 79
26430: PUSH
26431: LD_VAR 0 2
26435: DIFF
26436: ST_TO_ADDR
26437: GO 26455
// hInvincible := hInvincible union i ;
26439: LD_ADDR_EXP 79
26443: PUSH
26444: LD_EXP 79
26448: PUSH
26449: LD_VAR 0 2
26453: UNION
26454: ST_TO_ADDR
// end ;
26455: GO 26395
26457: POP
26458: POP
// end ;
26459: LD_VAR 0 1
26463: RET
// export function hHackInvisible ; var i , j ; begin
26464: LD_INT 0
26466: PPUSH
26467: PPUSH
26468: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
26469: LD_ADDR_VAR 0 2
26473: PUSH
26474: LD_INT 21
26476: PUSH
26477: LD_INT 1
26479: PUSH
26480: EMPTY
26481: LIST
26482: LIST
26483: PPUSH
26484: CALL_OW 69
26488: PUSH
26489: FOR_IN
26490: IFFALSE 26514
// if IsSelected ( i ) then
26492: LD_VAR 0 2
26496: PPUSH
26497: CALL_OW 306
26501: IFFALSE 26512
// ComForceInvisible ( i ) ;
26503: LD_VAR 0 2
26507: PPUSH
26508: CALL_OW 496
26512: GO 26489
26514: POP
26515: POP
// end ;
26516: LD_VAR 0 1
26520: RET
// export function hHackChangeYourSide ; begin
26521: LD_INT 0
26523: PPUSH
// if your_side = 8 then
26524: LD_OWVAR 2
26528: PUSH
26529: LD_INT 8
26531: EQUAL
26532: IFFALSE 26544
// your_side := 0 else
26534: LD_ADDR_OWVAR 2
26538: PUSH
26539: LD_INT 0
26541: ST_TO_ADDR
26542: GO 26558
// your_side := your_side + 1 ;
26544: LD_ADDR_OWVAR 2
26548: PUSH
26549: LD_OWVAR 2
26553: PUSH
26554: LD_INT 1
26556: PLUS
26557: ST_TO_ADDR
// end ;
26558: LD_VAR 0 1
26562: RET
// export function hHackChangeUnitSide ; var i , j ; begin
26563: LD_INT 0
26565: PPUSH
26566: PPUSH
26567: PPUSH
// for i in all_units do
26568: LD_ADDR_VAR 0 2
26572: PUSH
26573: LD_OWVAR 3
26577: PUSH
26578: FOR_IN
26579: IFFALSE 26657
// if IsSelected ( i ) then
26581: LD_VAR 0 2
26585: PPUSH
26586: CALL_OW 306
26590: IFFALSE 26655
// begin j := GetSide ( i ) ;
26592: LD_ADDR_VAR 0 3
26596: PUSH
26597: LD_VAR 0 2
26601: PPUSH
26602: CALL_OW 255
26606: ST_TO_ADDR
// if j = 8 then
26607: LD_VAR 0 3
26611: PUSH
26612: LD_INT 8
26614: EQUAL
26615: IFFALSE 26627
// j := 0 else
26617: LD_ADDR_VAR 0 3
26621: PUSH
26622: LD_INT 0
26624: ST_TO_ADDR
26625: GO 26641
// j := j + 1 ;
26627: LD_ADDR_VAR 0 3
26631: PUSH
26632: LD_VAR 0 3
26636: PUSH
26637: LD_INT 1
26639: PLUS
26640: ST_TO_ADDR
// SetSide ( i , j ) ;
26641: LD_VAR 0 2
26645: PPUSH
26646: LD_VAR 0 3
26650: PPUSH
26651: CALL_OW 235
// end ;
26655: GO 26578
26657: POP
26658: POP
// end ;
26659: LD_VAR 0 1
26663: RET
// export function hHackFog ; begin
26664: LD_INT 0
26666: PPUSH
// FogOff ( true ) ;
26667: LD_INT 1
26669: PPUSH
26670: CALL_OW 344
// end ;
26674: LD_VAR 0 1
26678: RET
// export function hHackTeleport ( unit , x , y ) ; begin
26679: LD_INT 0
26681: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
26682: LD_VAR 0 1
26686: PPUSH
26687: LD_VAR 0 2
26691: PPUSH
26692: LD_VAR 0 3
26696: PPUSH
26697: LD_INT 1
26699: PPUSH
26700: LD_INT 1
26702: PPUSH
26703: CALL_OW 483
// CenterOnXY ( x , y ) ;
26707: LD_VAR 0 2
26711: PPUSH
26712: LD_VAR 0 3
26716: PPUSH
26717: CALL_OW 84
// end ;
26721: LD_VAR 0 4
26725: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
26726: LD_INT 0
26728: PPUSH
26729: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
26730: LD_VAR 0 1
26734: NOT
26735: PUSH
26736: LD_VAR 0 2
26740: PPUSH
26741: LD_VAR 0 3
26745: PPUSH
26746: CALL_OW 488
26750: NOT
26751: OR
26752: PUSH
26753: LD_VAR 0 1
26757: PPUSH
26758: CALL_OW 266
26762: PUSH
26763: LD_INT 3
26765: NONEQUAL
26766: PUSH
26767: LD_VAR 0 1
26771: PPUSH
26772: CALL_OW 247
26776: PUSH
26777: LD_INT 1
26779: EQUAL
26780: NOT
26781: AND
26782: OR
26783: IFFALSE 26787
// exit ;
26785: GO 26936
// if GetType ( factory ) = unit_human then
26787: LD_VAR 0 1
26791: PPUSH
26792: CALL_OW 247
26796: PUSH
26797: LD_INT 1
26799: EQUAL
26800: IFFALSE 26817
// factory := IsInUnit ( factory ) ;
26802: LD_ADDR_VAR 0 1
26806: PUSH
26807: LD_VAR 0 1
26811: PPUSH
26812: CALL_OW 310
26816: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
26817: LD_VAR 0 1
26821: PPUSH
26822: CALL_OW 266
26826: PUSH
26827: LD_INT 3
26829: NONEQUAL
26830: IFFALSE 26834
// exit ;
26832: GO 26936
// if HexInfo ( x , y ) = factory then
26834: LD_VAR 0 2
26838: PPUSH
26839: LD_VAR 0 3
26843: PPUSH
26844: CALL_OW 428
26848: PUSH
26849: LD_VAR 0 1
26853: EQUAL
26854: IFFALSE 26881
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
26856: LD_ADDR_EXP 80
26860: PUSH
26861: LD_EXP 80
26865: PPUSH
26866: LD_VAR 0 1
26870: PPUSH
26871: LD_INT 0
26873: PPUSH
26874: CALL_OW 1
26878: ST_TO_ADDR
26879: GO 26932
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
26881: LD_ADDR_EXP 80
26885: PUSH
26886: LD_EXP 80
26890: PPUSH
26891: LD_VAR 0 1
26895: PPUSH
26896: LD_VAR 0 1
26900: PPUSH
26901: CALL_OW 255
26905: PUSH
26906: LD_VAR 0 1
26910: PUSH
26911: LD_VAR 0 2
26915: PUSH
26916: LD_VAR 0 3
26920: PUSH
26921: EMPTY
26922: LIST
26923: LIST
26924: LIST
26925: LIST
26926: PPUSH
26927: CALL_OW 1
26931: ST_TO_ADDR
// UpdateFactoryWaypoints ;
26932: CALL 26941 0 0
// end ;
26936: LD_VAR 0 4
26940: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
26941: LD_INT 0
26943: PPUSH
26944: PPUSH
26945: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
26946: LD_STRING resetFactoryWaypoint();
26948: PPUSH
26949: CALL_OW 559
// if factoryWaypoints then
26953: LD_EXP 80
26957: IFFALSE 27083
// begin list := PrepareArray ( factoryWaypoints ) ;
26959: LD_ADDR_VAR 0 3
26963: PUSH
26964: LD_EXP 80
26968: PPUSH
26969: CALL 73552 0 1
26973: ST_TO_ADDR
// for i := 1 to list do
26974: LD_ADDR_VAR 0 2
26978: PUSH
26979: DOUBLE
26980: LD_INT 1
26982: DEC
26983: ST_TO_ADDR
26984: LD_VAR 0 3
26988: PUSH
26989: FOR_TO
26990: IFFALSE 27081
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
26992: LD_STRING setFactoryWaypointXY(
26994: PUSH
26995: LD_VAR 0 3
26999: PUSH
27000: LD_VAR 0 2
27004: ARRAY
27005: PUSH
27006: LD_INT 1
27008: ARRAY
27009: STR
27010: PUSH
27011: LD_STRING ,
27013: STR
27014: PUSH
27015: LD_VAR 0 3
27019: PUSH
27020: LD_VAR 0 2
27024: ARRAY
27025: PUSH
27026: LD_INT 2
27028: ARRAY
27029: STR
27030: PUSH
27031: LD_STRING ,
27033: STR
27034: PUSH
27035: LD_VAR 0 3
27039: PUSH
27040: LD_VAR 0 2
27044: ARRAY
27045: PUSH
27046: LD_INT 3
27048: ARRAY
27049: STR
27050: PUSH
27051: LD_STRING ,
27053: STR
27054: PUSH
27055: LD_VAR 0 3
27059: PUSH
27060: LD_VAR 0 2
27064: ARRAY
27065: PUSH
27066: LD_INT 4
27068: ARRAY
27069: STR
27070: PUSH
27071: LD_STRING )
27073: STR
27074: PPUSH
27075: CALL_OW 559
27079: GO 26989
27081: POP
27082: POP
// end ; end ;
27083: LD_VAR 0 1
27087: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
27088: LD_INT 0
27090: PPUSH
// if HexInfo ( x , y ) = warehouse then
27091: LD_VAR 0 2
27095: PPUSH
27096: LD_VAR 0 3
27100: PPUSH
27101: CALL_OW 428
27105: PUSH
27106: LD_VAR 0 1
27110: EQUAL
27111: IFFALSE 27138
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
27113: LD_ADDR_EXP 81
27117: PUSH
27118: LD_EXP 81
27122: PPUSH
27123: LD_VAR 0 1
27127: PPUSH
27128: LD_INT 0
27130: PPUSH
27131: CALL_OW 1
27135: ST_TO_ADDR
27136: GO 27189
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
27138: LD_ADDR_EXP 81
27142: PUSH
27143: LD_EXP 81
27147: PPUSH
27148: LD_VAR 0 1
27152: PPUSH
27153: LD_VAR 0 1
27157: PPUSH
27158: CALL_OW 255
27162: PUSH
27163: LD_VAR 0 1
27167: PUSH
27168: LD_VAR 0 2
27172: PUSH
27173: LD_VAR 0 3
27177: PUSH
27178: EMPTY
27179: LIST
27180: LIST
27181: LIST
27182: LIST
27183: PPUSH
27184: CALL_OW 1
27188: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
27189: CALL 27198 0 0
// end ;
27193: LD_VAR 0 4
27197: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
27198: LD_INT 0
27200: PPUSH
27201: PPUSH
27202: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
27203: LD_STRING resetWarehouseGatheringPoints();
27205: PPUSH
27206: CALL_OW 559
// if warehouseGatheringPoints then
27210: LD_EXP 81
27214: IFFALSE 27340
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
27216: LD_ADDR_VAR 0 3
27220: PUSH
27221: LD_EXP 81
27225: PPUSH
27226: CALL 73552 0 1
27230: ST_TO_ADDR
// for i := 1 to list do
27231: LD_ADDR_VAR 0 2
27235: PUSH
27236: DOUBLE
27237: LD_INT 1
27239: DEC
27240: ST_TO_ADDR
27241: LD_VAR 0 3
27245: PUSH
27246: FOR_TO
27247: IFFALSE 27338
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
27249: LD_STRING setWarehouseGatheringPointXY(
27251: PUSH
27252: LD_VAR 0 3
27256: PUSH
27257: LD_VAR 0 2
27261: ARRAY
27262: PUSH
27263: LD_INT 1
27265: ARRAY
27266: STR
27267: PUSH
27268: LD_STRING ,
27270: STR
27271: PUSH
27272: LD_VAR 0 3
27276: PUSH
27277: LD_VAR 0 2
27281: ARRAY
27282: PUSH
27283: LD_INT 2
27285: ARRAY
27286: STR
27287: PUSH
27288: LD_STRING ,
27290: STR
27291: PUSH
27292: LD_VAR 0 3
27296: PUSH
27297: LD_VAR 0 2
27301: ARRAY
27302: PUSH
27303: LD_INT 3
27305: ARRAY
27306: STR
27307: PUSH
27308: LD_STRING ,
27310: STR
27311: PUSH
27312: LD_VAR 0 3
27316: PUSH
27317: LD_VAR 0 2
27321: ARRAY
27322: PUSH
27323: LD_INT 4
27325: ARRAY
27326: STR
27327: PUSH
27328: LD_STRING )
27330: STR
27331: PPUSH
27332: CALL_OW 559
27336: GO 27246
27338: POP
27339: POP
// end ; end ;
27340: LD_VAR 0 1
27344: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
27345: LD_EXP 81
27349: IFFALSE 28034
27351: GO 27353
27353: DISABLE
27354: LD_INT 0
27356: PPUSH
27357: PPUSH
27358: PPUSH
27359: PPUSH
27360: PPUSH
27361: PPUSH
27362: PPUSH
27363: PPUSH
27364: PPUSH
// begin enable ;
27365: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
27366: LD_ADDR_VAR 0 3
27370: PUSH
27371: LD_EXP 81
27375: PPUSH
27376: CALL 73552 0 1
27380: ST_TO_ADDR
// if not list then
27381: LD_VAR 0 3
27385: NOT
27386: IFFALSE 27390
// exit ;
27388: GO 28034
// for i := 1 to list do
27390: LD_ADDR_VAR 0 1
27394: PUSH
27395: DOUBLE
27396: LD_INT 1
27398: DEC
27399: ST_TO_ADDR
27400: LD_VAR 0 3
27404: PUSH
27405: FOR_TO
27406: IFFALSE 28032
// begin depot := list [ i ] [ 2 ] ;
27408: LD_ADDR_VAR 0 8
27412: PUSH
27413: LD_VAR 0 3
27417: PUSH
27418: LD_VAR 0 1
27422: ARRAY
27423: PUSH
27424: LD_INT 2
27426: ARRAY
27427: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
27428: LD_ADDR_VAR 0 5
27432: PUSH
27433: LD_VAR 0 3
27437: PUSH
27438: LD_VAR 0 1
27442: ARRAY
27443: PUSH
27444: LD_INT 1
27446: ARRAY
27447: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
27448: LD_VAR 0 8
27452: PPUSH
27453: CALL_OW 301
27457: PUSH
27458: LD_VAR 0 5
27462: PUSH
27463: LD_VAR 0 8
27467: PPUSH
27468: CALL_OW 255
27472: NONEQUAL
27473: OR
27474: IFFALSE 27503
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
27476: LD_ADDR_EXP 81
27480: PUSH
27481: LD_EXP 81
27485: PPUSH
27486: LD_VAR 0 8
27490: PPUSH
27491: LD_INT 0
27493: PPUSH
27494: CALL_OW 1
27498: ST_TO_ADDR
// exit ;
27499: POP
27500: POP
27501: GO 28034
// end ; x := list [ i ] [ 3 ] ;
27503: LD_ADDR_VAR 0 6
27507: PUSH
27508: LD_VAR 0 3
27512: PUSH
27513: LD_VAR 0 1
27517: ARRAY
27518: PUSH
27519: LD_INT 3
27521: ARRAY
27522: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
27523: LD_ADDR_VAR 0 7
27527: PUSH
27528: LD_VAR 0 3
27532: PUSH
27533: LD_VAR 0 1
27537: ARRAY
27538: PUSH
27539: LD_INT 4
27541: ARRAY
27542: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
27543: LD_ADDR_VAR 0 9
27547: PUSH
27548: LD_VAR 0 6
27552: PPUSH
27553: LD_VAR 0 7
27557: PPUSH
27558: LD_INT 16
27560: PPUSH
27561: CALL 72140 0 3
27565: ST_TO_ADDR
// if not cratesNearbyPoint then
27566: LD_VAR 0 9
27570: NOT
27571: IFFALSE 27577
// exit ;
27573: POP
27574: POP
27575: GO 28034
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
27577: LD_ADDR_VAR 0 4
27581: PUSH
27582: LD_INT 22
27584: PUSH
27585: LD_VAR 0 5
27589: PUSH
27590: EMPTY
27591: LIST
27592: LIST
27593: PUSH
27594: LD_INT 3
27596: PUSH
27597: LD_INT 60
27599: PUSH
27600: EMPTY
27601: LIST
27602: PUSH
27603: EMPTY
27604: LIST
27605: LIST
27606: PUSH
27607: LD_INT 91
27609: PUSH
27610: LD_VAR 0 8
27614: PUSH
27615: LD_INT 6
27617: PUSH
27618: EMPTY
27619: LIST
27620: LIST
27621: LIST
27622: PUSH
27623: LD_INT 2
27625: PUSH
27626: LD_INT 25
27628: PUSH
27629: LD_INT 2
27631: PUSH
27632: EMPTY
27633: LIST
27634: LIST
27635: PUSH
27636: LD_INT 25
27638: PUSH
27639: LD_INT 16
27641: PUSH
27642: EMPTY
27643: LIST
27644: LIST
27645: PUSH
27646: EMPTY
27647: LIST
27648: LIST
27649: LIST
27650: PUSH
27651: EMPTY
27652: LIST
27653: LIST
27654: LIST
27655: LIST
27656: PPUSH
27657: CALL_OW 69
27661: PUSH
27662: LD_VAR 0 8
27666: PPUSH
27667: CALL_OW 313
27671: PPUSH
27672: LD_INT 3
27674: PUSH
27675: LD_INT 60
27677: PUSH
27678: EMPTY
27679: LIST
27680: PUSH
27681: EMPTY
27682: LIST
27683: LIST
27684: PUSH
27685: LD_INT 2
27687: PUSH
27688: LD_INT 25
27690: PUSH
27691: LD_INT 2
27693: PUSH
27694: EMPTY
27695: LIST
27696: LIST
27697: PUSH
27698: LD_INT 25
27700: PUSH
27701: LD_INT 16
27703: PUSH
27704: EMPTY
27705: LIST
27706: LIST
27707: PUSH
27708: EMPTY
27709: LIST
27710: LIST
27711: LIST
27712: PUSH
27713: EMPTY
27714: LIST
27715: LIST
27716: PPUSH
27717: CALL_OW 72
27721: UNION
27722: ST_TO_ADDR
// if tmp then
27723: LD_VAR 0 4
27727: IFFALSE 27807
// begin tmp := ShrinkArray ( tmp , 3 ) ;
27729: LD_ADDR_VAR 0 4
27733: PUSH
27734: LD_VAR 0 4
27738: PPUSH
27739: LD_INT 3
27741: PPUSH
27742: CALL 70109 0 2
27746: ST_TO_ADDR
// for j in tmp do
27747: LD_ADDR_VAR 0 2
27751: PUSH
27752: LD_VAR 0 4
27756: PUSH
27757: FOR_IN
27758: IFFALSE 27801
// begin if IsInUnit ( j ) then
27760: LD_VAR 0 2
27764: PPUSH
27765: CALL_OW 310
27769: IFFALSE 27780
// ComExit ( j ) ;
27771: LD_VAR 0 2
27775: PPUSH
27776: CALL 70192 0 1
// AddComCollect ( j , x , y ) ;
27780: LD_VAR 0 2
27784: PPUSH
27785: LD_VAR 0 6
27789: PPUSH
27790: LD_VAR 0 7
27794: PPUSH
27795: CALL_OW 177
// end ;
27799: GO 27757
27801: POP
27802: POP
// exit ;
27803: POP
27804: POP
27805: GO 28034
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
27807: LD_ADDR_VAR 0 4
27811: PUSH
27812: LD_INT 22
27814: PUSH
27815: LD_VAR 0 5
27819: PUSH
27820: EMPTY
27821: LIST
27822: LIST
27823: PUSH
27824: LD_INT 91
27826: PUSH
27827: LD_VAR 0 8
27831: PUSH
27832: LD_INT 8
27834: PUSH
27835: EMPTY
27836: LIST
27837: LIST
27838: LIST
27839: PUSH
27840: LD_INT 2
27842: PUSH
27843: LD_INT 34
27845: PUSH
27846: LD_INT 12
27848: PUSH
27849: EMPTY
27850: LIST
27851: LIST
27852: PUSH
27853: LD_INT 34
27855: PUSH
27856: LD_INT 51
27858: PUSH
27859: EMPTY
27860: LIST
27861: LIST
27862: PUSH
27863: LD_INT 34
27865: PUSH
27866: LD_INT 32
27868: PUSH
27869: EMPTY
27870: LIST
27871: LIST
27872: PUSH
27873: LD_INT 34
27875: PUSH
27876: LD_INT 89
27878: PUSH
27879: EMPTY
27880: LIST
27881: LIST
27882: PUSH
27883: EMPTY
27884: LIST
27885: LIST
27886: LIST
27887: LIST
27888: LIST
27889: PUSH
27890: EMPTY
27891: LIST
27892: LIST
27893: LIST
27894: PPUSH
27895: CALL_OW 69
27899: ST_TO_ADDR
// if tmp then
27900: LD_VAR 0 4
27904: IFFALSE 28030
// begin for j in tmp do
27906: LD_ADDR_VAR 0 2
27910: PUSH
27911: LD_VAR 0 4
27915: PUSH
27916: FOR_IN
27917: IFFALSE 28028
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
27919: LD_VAR 0 2
27923: PPUSH
27924: CALL_OW 262
27928: PUSH
27929: LD_INT 3
27931: EQUAL
27932: PUSH
27933: LD_VAR 0 2
27937: PPUSH
27938: CALL_OW 261
27942: PUSH
27943: LD_INT 20
27945: GREATER
27946: OR
27947: PUSH
27948: LD_VAR 0 2
27952: PPUSH
27953: CALL_OW 314
27957: NOT
27958: AND
27959: PUSH
27960: LD_VAR 0 2
27964: PPUSH
27965: CALL_OW 263
27969: PUSH
27970: LD_INT 1
27972: NONEQUAL
27973: PUSH
27974: LD_VAR 0 2
27978: PPUSH
27979: CALL_OW 311
27983: OR
27984: AND
27985: IFFALSE 28026
// begin ComCollect ( j , x , y ) ;
27987: LD_VAR 0 2
27991: PPUSH
27992: LD_VAR 0 6
27996: PPUSH
27997: LD_VAR 0 7
28001: PPUSH
28002: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
28006: LD_VAR 0 2
28010: PPUSH
28011: LD_VAR 0 8
28015: PPUSH
28016: CALL_OW 172
// exit ;
28020: POP
28021: POP
28022: POP
28023: POP
28024: GO 28034
// end ;
28026: GO 27916
28028: POP
28029: POP
// end ; end ;
28030: GO 27405
28032: POP
28033: POP
// end ; end_of_file
28034: PPOPN 9
28036: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
28037: LD_INT 0
28039: PPUSH
28040: PPUSH
28041: PPUSH
28042: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
28043: LD_VAR 0 1
28047: PPUSH
28048: CALL_OW 264
28052: PUSH
28053: LD_INT 91
28055: EQUAL
28056: IFFALSE 28128
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
28058: LD_INT 68
28060: PPUSH
28061: LD_VAR 0 1
28065: PPUSH
28066: CALL_OW 255
28070: PPUSH
28071: CALL_OW 321
28075: PUSH
28076: LD_INT 2
28078: EQUAL
28079: IFFALSE 28091
// eff := 70 else
28081: LD_ADDR_VAR 0 4
28085: PUSH
28086: LD_INT 70
28088: ST_TO_ADDR
28089: GO 28099
// eff := 30 ;
28091: LD_ADDR_VAR 0 4
28095: PUSH
28096: LD_INT 30
28098: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
28099: LD_VAR 0 1
28103: PPUSH
28104: CALL_OW 250
28108: PPUSH
28109: LD_VAR 0 1
28113: PPUSH
28114: CALL_OW 251
28118: PPUSH
28119: LD_VAR 0 4
28123: PPUSH
28124: CALL_OW 495
// end ; end ;
28128: LD_VAR 0 2
28132: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
28133: LD_INT 0
28135: PPUSH
// end ;
28136: LD_VAR 0 4
28140: RET
// export function SOS_Command ( cmd ) ; begin
28141: LD_INT 0
28143: PPUSH
// end ;
28144: LD_VAR 0 2
28148: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
28149: LD_INT 0
28151: PPUSH
// end ;
28152: LD_VAR 0 6
28156: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
28157: LD_INT 0
28159: PPUSH
28160: PPUSH
// if not vehicle or not factory then
28161: LD_VAR 0 1
28165: NOT
28166: PUSH
28167: LD_VAR 0 2
28171: NOT
28172: OR
28173: IFFALSE 28177
// exit ;
28175: GO 28408
// if factoryWaypoints >= factory then
28177: LD_EXP 80
28181: PUSH
28182: LD_VAR 0 2
28186: GREATEREQUAL
28187: IFFALSE 28408
// if factoryWaypoints [ factory ] then
28189: LD_EXP 80
28193: PUSH
28194: LD_VAR 0 2
28198: ARRAY
28199: IFFALSE 28408
// begin if GetControl ( vehicle ) = control_manual then
28201: LD_VAR 0 1
28205: PPUSH
28206: CALL_OW 263
28210: PUSH
28211: LD_INT 1
28213: EQUAL
28214: IFFALSE 28295
// begin driver := IsDrivenBy ( vehicle ) ;
28216: LD_ADDR_VAR 0 4
28220: PUSH
28221: LD_VAR 0 1
28225: PPUSH
28226: CALL_OW 311
28230: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
28231: LD_VAR 0 4
28235: PPUSH
28236: LD_EXP 80
28240: PUSH
28241: LD_VAR 0 2
28245: ARRAY
28246: PUSH
28247: LD_INT 3
28249: ARRAY
28250: PPUSH
28251: LD_EXP 80
28255: PUSH
28256: LD_VAR 0 2
28260: ARRAY
28261: PUSH
28262: LD_INT 4
28264: ARRAY
28265: PPUSH
28266: CALL_OW 171
// AddComExitVehicle ( driver ) ;
28270: LD_VAR 0 4
28274: PPUSH
28275: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
28279: LD_VAR 0 4
28283: PPUSH
28284: LD_VAR 0 2
28288: PPUSH
28289: CALL_OW 180
// end else
28293: GO 28408
// if GetControl ( vehicle ) = control_remote then
28295: LD_VAR 0 1
28299: PPUSH
28300: CALL_OW 263
28304: PUSH
28305: LD_INT 2
28307: EQUAL
28308: IFFALSE 28369
// begin wait ( 0 0$2 ) ;
28310: LD_INT 70
28312: PPUSH
28313: CALL_OW 67
// if Connect ( vehicle ) then
28317: LD_VAR 0 1
28321: PPUSH
28322: CALL 40432 0 1
28326: IFFALSE 28367
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
28328: LD_VAR 0 1
28332: PPUSH
28333: LD_EXP 80
28337: PUSH
28338: LD_VAR 0 2
28342: ARRAY
28343: PUSH
28344: LD_INT 3
28346: ARRAY
28347: PPUSH
28348: LD_EXP 80
28352: PUSH
28353: LD_VAR 0 2
28357: ARRAY
28358: PUSH
28359: LD_INT 4
28361: ARRAY
28362: PPUSH
28363: CALL_OW 171
// end else
28367: GO 28408
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
28369: LD_VAR 0 1
28373: PPUSH
28374: LD_EXP 80
28378: PUSH
28379: LD_VAR 0 2
28383: ARRAY
28384: PUSH
28385: LD_INT 3
28387: ARRAY
28388: PPUSH
28389: LD_EXP 80
28393: PUSH
28394: LD_VAR 0 2
28398: ARRAY
28399: PUSH
28400: LD_INT 4
28402: ARRAY
28403: PPUSH
28404: CALL_OW 171
// end ; end ;
28408: LD_VAR 0 3
28412: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
28413: LD_INT 0
28415: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
28416: LD_VAR 0 1
28420: PUSH
28421: LD_INT 250
28423: EQUAL
28424: PUSH
28425: LD_VAR 0 2
28429: PPUSH
28430: CALL_OW 264
28434: PUSH
28435: LD_INT 81
28437: EQUAL
28438: AND
28439: IFFALSE 28460
// MinerPlaceMine ( unit , x , y ) ;
28441: LD_VAR 0 2
28445: PPUSH
28446: LD_VAR 0 4
28450: PPUSH
28451: LD_VAR 0 5
28455: PPUSH
28456: CALL 30845 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
28460: LD_VAR 0 1
28464: PUSH
28465: LD_INT 251
28467: EQUAL
28468: PUSH
28469: LD_VAR 0 2
28473: PPUSH
28474: CALL_OW 264
28478: PUSH
28479: LD_INT 81
28481: EQUAL
28482: AND
28483: IFFALSE 28504
// MinerDetonateMine ( unit , x , y ) ;
28485: LD_VAR 0 2
28489: PPUSH
28490: LD_VAR 0 4
28494: PPUSH
28495: LD_VAR 0 5
28499: PPUSH
28500: CALL 31120 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
28504: LD_VAR 0 1
28508: PUSH
28509: LD_INT 252
28511: EQUAL
28512: PUSH
28513: LD_VAR 0 2
28517: PPUSH
28518: CALL_OW 264
28522: PUSH
28523: LD_INT 81
28525: EQUAL
28526: AND
28527: IFFALSE 28548
// MinerCreateMinefield ( unit , x , y ) ;
28529: LD_VAR 0 2
28533: PPUSH
28534: LD_VAR 0 4
28538: PPUSH
28539: LD_VAR 0 5
28543: PPUSH
28544: CALL 31537 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
28548: LD_VAR 0 1
28552: PUSH
28553: LD_INT 253
28555: EQUAL
28556: PUSH
28557: LD_VAR 0 2
28561: PPUSH
28562: CALL_OW 257
28566: PUSH
28567: LD_INT 5
28569: EQUAL
28570: AND
28571: IFFALSE 28592
// ComBinocular ( unit , x , y ) ;
28573: LD_VAR 0 2
28577: PPUSH
28578: LD_VAR 0 4
28582: PPUSH
28583: LD_VAR 0 5
28587: PPUSH
28588: CALL 31906 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
28592: LD_VAR 0 1
28596: PUSH
28597: LD_INT 254
28599: EQUAL
28600: PUSH
28601: LD_VAR 0 2
28605: PPUSH
28606: CALL_OW 264
28610: PUSH
28611: LD_INT 99
28613: EQUAL
28614: AND
28615: PUSH
28616: LD_VAR 0 3
28620: PPUSH
28621: CALL_OW 263
28625: PUSH
28626: LD_INT 3
28628: EQUAL
28629: AND
28630: IFFALSE 28646
// HackDestroyVehicle ( unit , selectedUnit ) ;
28632: LD_VAR 0 2
28636: PPUSH
28637: LD_VAR 0 3
28641: PPUSH
28642: CALL 30209 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
28646: LD_VAR 0 1
28650: PUSH
28651: LD_INT 255
28653: EQUAL
28654: PUSH
28655: LD_VAR 0 2
28659: PPUSH
28660: CALL_OW 264
28664: PUSH
28665: LD_INT 14
28667: PUSH
28668: LD_INT 53
28670: PUSH
28671: EMPTY
28672: LIST
28673: LIST
28674: IN
28675: AND
28676: PUSH
28677: LD_VAR 0 4
28681: PPUSH
28682: LD_VAR 0 5
28686: PPUSH
28687: CALL_OW 488
28691: AND
28692: IFFALSE 28716
// CutTreeXYR ( unit , x , y , 12 ) ;
28694: LD_VAR 0 2
28698: PPUSH
28699: LD_VAR 0 4
28703: PPUSH
28704: LD_VAR 0 5
28708: PPUSH
28709: LD_INT 12
28711: PPUSH
28712: CALL 28779 0 4
// if cmd = 256 then
28716: LD_VAR 0 1
28720: PUSH
28721: LD_INT 256
28723: EQUAL
28724: IFFALSE 28745
// SetFactoryWaypoint ( unit , x , y ) ;
28726: LD_VAR 0 2
28730: PPUSH
28731: LD_VAR 0 4
28735: PPUSH
28736: LD_VAR 0 5
28740: PPUSH
28741: CALL 26726 0 3
// if cmd = 257 then
28745: LD_VAR 0 1
28749: PUSH
28750: LD_INT 257
28752: EQUAL
28753: IFFALSE 28774
// SetWarehouseGatheringPoint ( unit , x , y ) ;
28755: LD_VAR 0 2
28759: PPUSH
28760: LD_VAR 0 4
28764: PPUSH
28765: LD_VAR 0 5
28769: PPUSH
28770: CALL 27088 0 3
// end ;
28774: LD_VAR 0 6
28778: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
28779: LD_INT 0
28781: PPUSH
28782: PPUSH
28783: PPUSH
28784: PPUSH
28785: PPUSH
28786: PPUSH
28787: PPUSH
28788: PPUSH
28789: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
28790: LD_VAR 0 1
28794: NOT
28795: PUSH
28796: LD_VAR 0 2
28800: PPUSH
28801: LD_VAR 0 3
28805: PPUSH
28806: CALL_OW 488
28810: NOT
28811: OR
28812: PUSH
28813: LD_VAR 0 4
28817: NOT
28818: OR
28819: IFFALSE 28823
// exit ;
28821: GO 29163
// list := [ ] ;
28823: LD_ADDR_VAR 0 13
28827: PUSH
28828: EMPTY
28829: ST_TO_ADDR
// if x - r < 0 then
28830: LD_VAR 0 2
28834: PUSH
28835: LD_VAR 0 4
28839: MINUS
28840: PUSH
28841: LD_INT 0
28843: LESS
28844: IFFALSE 28856
// min_x := 0 else
28846: LD_ADDR_VAR 0 7
28850: PUSH
28851: LD_INT 0
28853: ST_TO_ADDR
28854: GO 28872
// min_x := x - r ;
28856: LD_ADDR_VAR 0 7
28860: PUSH
28861: LD_VAR 0 2
28865: PUSH
28866: LD_VAR 0 4
28870: MINUS
28871: ST_TO_ADDR
// if y - r < 0 then
28872: LD_VAR 0 3
28876: PUSH
28877: LD_VAR 0 4
28881: MINUS
28882: PUSH
28883: LD_INT 0
28885: LESS
28886: IFFALSE 28898
// min_y := 0 else
28888: LD_ADDR_VAR 0 8
28892: PUSH
28893: LD_INT 0
28895: ST_TO_ADDR
28896: GO 28914
// min_y := y - r ;
28898: LD_ADDR_VAR 0 8
28902: PUSH
28903: LD_VAR 0 3
28907: PUSH
28908: LD_VAR 0 4
28912: MINUS
28913: ST_TO_ADDR
// max_x := x + r ;
28914: LD_ADDR_VAR 0 9
28918: PUSH
28919: LD_VAR 0 2
28923: PUSH
28924: LD_VAR 0 4
28928: PLUS
28929: ST_TO_ADDR
// max_y := y + r ;
28930: LD_ADDR_VAR 0 10
28934: PUSH
28935: LD_VAR 0 3
28939: PUSH
28940: LD_VAR 0 4
28944: PLUS
28945: ST_TO_ADDR
// for _x = min_x to max_x do
28946: LD_ADDR_VAR 0 11
28950: PUSH
28951: DOUBLE
28952: LD_VAR 0 7
28956: DEC
28957: ST_TO_ADDR
28958: LD_VAR 0 9
28962: PUSH
28963: FOR_TO
28964: IFFALSE 29081
// for _y = min_y to max_y do
28966: LD_ADDR_VAR 0 12
28970: PUSH
28971: DOUBLE
28972: LD_VAR 0 8
28976: DEC
28977: ST_TO_ADDR
28978: LD_VAR 0 10
28982: PUSH
28983: FOR_TO
28984: IFFALSE 29077
// begin if not ValidHex ( _x , _y ) then
28986: LD_VAR 0 11
28990: PPUSH
28991: LD_VAR 0 12
28995: PPUSH
28996: CALL_OW 488
29000: NOT
29001: IFFALSE 29005
// continue ;
29003: GO 28983
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
29005: LD_VAR 0 11
29009: PPUSH
29010: LD_VAR 0 12
29014: PPUSH
29015: CALL_OW 351
29019: PUSH
29020: LD_VAR 0 11
29024: PPUSH
29025: LD_VAR 0 12
29029: PPUSH
29030: CALL_OW 554
29034: AND
29035: IFFALSE 29075
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
29037: LD_ADDR_VAR 0 13
29041: PUSH
29042: LD_VAR 0 13
29046: PPUSH
29047: LD_VAR 0 13
29051: PUSH
29052: LD_INT 1
29054: PLUS
29055: PPUSH
29056: LD_VAR 0 11
29060: PUSH
29061: LD_VAR 0 12
29065: PUSH
29066: EMPTY
29067: LIST
29068: LIST
29069: PPUSH
29070: CALL_OW 2
29074: ST_TO_ADDR
// end ;
29075: GO 28983
29077: POP
29078: POP
29079: GO 28963
29081: POP
29082: POP
// if not list then
29083: LD_VAR 0 13
29087: NOT
29088: IFFALSE 29092
// exit ;
29090: GO 29163
// for i in list do
29092: LD_ADDR_VAR 0 6
29096: PUSH
29097: LD_VAR 0 13
29101: PUSH
29102: FOR_IN
29103: IFFALSE 29161
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
29105: LD_VAR 0 1
29109: PPUSH
29110: LD_STRING M
29112: PUSH
29113: LD_VAR 0 6
29117: PUSH
29118: LD_INT 1
29120: ARRAY
29121: PUSH
29122: LD_VAR 0 6
29126: PUSH
29127: LD_INT 2
29129: ARRAY
29130: PUSH
29131: LD_INT 0
29133: PUSH
29134: LD_INT 0
29136: PUSH
29137: LD_INT 0
29139: PUSH
29140: LD_INT 0
29142: PUSH
29143: EMPTY
29144: LIST
29145: LIST
29146: LIST
29147: LIST
29148: LIST
29149: LIST
29150: LIST
29151: PUSH
29152: EMPTY
29153: LIST
29154: PPUSH
29155: CALL_OW 447
29159: GO 29102
29161: POP
29162: POP
// end ;
29163: LD_VAR 0 5
29167: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
29168: LD_EXP 83
29172: NOT
29173: IFFALSE 29223
29175: GO 29177
29177: DISABLE
// begin initHack := true ;
29178: LD_ADDR_EXP 83
29182: PUSH
29183: LD_INT 1
29185: ST_TO_ADDR
// hackTanks := [ ] ;
29186: LD_ADDR_EXP 84
29190: PUSH
29191: EMPTY
29192: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
29193: LD_ADDR_EXP 85
29197: PUSH
29198: EMPTY
29199: ST_TO_ADDR
// hackLimit := 3 ;
29200: LD_ADDR_EXP 86
29204: PUSH
29205: LD_INT 3
29207: ST_TO_ADDR
// hackDist := 12 ;
29208: LD_ADDR_EXP 87
29212: PUSH
29213: LD_INT 12
29215: ST_TO_ADDR
// hackCounter := [ ] ;
29216: LD_ADDR_EXP 88
29220: PUSH
29221: EMPTY
29222: ST_TO_ADDR
// end ;
29223: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
29224: LD_EXP 83
29228: PUSH
29229: LD_INT 34
29231: PUSH
29232: LD_INT 99
29234: PUSH
29235: EMPTY
29236: LIST
29237: LIST
29238: PPUSH
29239: CALL_OW 69
29243: AND
29244: IFFALSE 29497
29246: GO 29248
29248: DISABLE
29249: LD_INT 0
29251: PPUSH
29252: PPUSH
// begin enable ;
29253: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
29254: LD_ADDR_VAR 0 1
29258: PUSH
29259: LD_INT 34
29261: PUSH
29262: LD_INT 99
29264: PUSH
29265: EMPTY
29266: LIST
29267: LIST
29268: PPUSH
29269: CALL_OW 69
29273: PUSH
29274: FOR_IN
29275: IFFALSE 29495
// begin if not i in hackTanks then
29277: LD_VAR 0 1
29281: PUSH
29282: LD_EXP 84
29286: IN
29287: NOT
29288: IFFALSE 29371
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
29290: LD_ADDR_EXP 84
29294: PUSH
29295: LD_EXP 84
29299: PPUSH
29300: LD_EXP 84
29304: PUSH
29305: LD_INT 1
29307: PLUS
29308: PPUSH
29309: LD_VAR 0 1
29313: PPUSH
29314: CALL_OW 1
29318: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
29319: LD_ADDR_EXP 85
29323: PUSH
29324: LD_EXP 85
29328: PPUSH
29329: LD_EXP 85
29333: PUSH
29334: LD_INT 1
29336: PLUS
29337: PPUSH
29338: EMPTY
29339: PPUSH
29340: CALL_OW 1
29344: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
29345: LD_ADDR_EXP 88
29349: PUSH
29350: LD_EXP 88
29354: PPUSH
29355: LD_EXP 88
29359: PUSH
29360: LD_INT 1
29362: PLUS
29363: PPUSH
29364: EMPTY
29365: PPUSH
29366: CALL_OW 1
29370: ST_TO_ADDR
// end ; if not IsOk ( i ) then
29371: LD_VAR 0 1
29375: PPUSH
29376: CALL_OW 302
29380: NOT
29381: IFFALSE 29394
// begin HackUnlinkAll ( i ) ;
29383: LD_VAR 0 1
29387: PPUSH
29388: CALL 29500 0 1
// continue ;
29392: GO 29274
// end ; HackCheckCapturedStatus ( i ) ;
29394: LD_VAR 0 1
29398: PPUSH
29399: CALL 29943 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
29403: LD_ADDR_VAR 0 2
29407: PUSH
29408: LD_INT 81
29410: PUSH
29411: LD_VAR 0 1
29415: PPUSH
29416: CALL_OW 255
29420: PUSH
29421: EMPTY
29422: LIST
29423: LIST
29424: PUSH
29425: LD_INT 33
29427: PUSH
29428: LD_INT 3
29430: PUSH
29431: EMPTY
29432: LIST
29433: LIST
29434: PUSH
29435: LD_INT 91
29437: PUSH
29438: LD_VAR 0 1
29442: PUSH
29443: LD_EXP 87
29447: PUSH
29448: EMPTY
29449: LIST
29450: LIST
29451: LIST
29452: PUSH
29453: LD_INT 50
29455: PUSH
29456: EMPTY
29457: LIST
29458: PUSH
29459: EMPTY
29460: LIST
29461: LIST
29462: LIST
29463: LIST
29464: PPUSH
29465: CALL_OW 69
29469: ST_TO_ADDR
// if not tmp then
29470: LD_VAR 0 2
29474: NOT
29475: IFFALSE 29479
// continue ;
29477: GO 29274
// HackLink ( i , tmp ) ;
29479: LD_VAR 0 1
29483: PPUSH
29484: LD_VAR 0 2
29488: PPUSH
29489: CALL 29636 0 2
// end ;
29493: GO 29274
29495: POP
29496: POP
// end ;
29497: PPOPN 2
29499: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
29500: LD_INT 0
29502: PPUSH
29503: PPUSH
29504: PPUSH
// if not hack in hackTanks then
29505: LD_VAR 0 1
29509: PUSH
29510: LD_EXP 84
29514: IN
29515: NOT
29516: IFFALSE 29520
// exit ;
29518: GO 29631
// index := GetElementIndex ( hackTanks , hack ) ;
29520: LD_ADDR_VAR 0 4
29524: PUSH
29525: LD_EXP 84
29529: PPUSH
29530: LD_VAR 0 1
29534: PPUSH
29535: CALL 37248 0 2
29539: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
29540: LD_EXP 85
29544: PUSH
29545: LD_VAR 0 4
29549: ARRAY
29550: IFFALSE 29631
// begin for i in hackTanksCaptured [ index ] do
29552: LD_ADDR_VAR 0 3
29556: PUSH
29557: LD_EXP 85
29561: PUSH
29562: LD_VAR 0 4
29566: ARRAY
29567: PUSH
29568: FOR_IN
29569: IFFALSE 29595
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
29571: LD_VAR 0 3
29575: PUSH
29576: LD_INT 1
29578: ARRAY
29579: PPUSH
29580: LD_VAR 0 3
29584: PUSH
29585: LD_INT 2
29587: ARRAY
29588: PPUSH
29589: CALL_OW 235
29593: GO 29568
29595: POP
29596: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
29597: LD_ADDR_EXP 85
29601: PUSH
29602: LD_EXP 85
29606: PPUSH
29607: LD_VAR 0 4
29611: PPUSH
29612: EMPTY
29613: PPUSH
29614: CALL_OW 1
29618: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
29619: LD_VAR 0 1
29623: PPUSH
29624: LD_INT 0
29626: PPUSH
29627: CALL_OW 505
// end ; end ;
29631: LD_VAR 0 2
29635: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
29636: LD_INT 0
29638: PPUSH
29639: PPUSH
29640: PPUSH
// if not hack in hackTanks or not vehicles then
29641: LD_VAR 0 1
29645: PUSH
29646: LD_EXP 84
29650: IN
29651: NOT
29652: PUSH
29653: LD_VAR 0 2
29657: NOT
29658: OR
29659: IFFALSE 29663
// exit ;
29661: GO 29938
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
29663: LD_ADDR_VAR 0 2
29667: PUSH
29668: LD_VAR 0 1
29672: PPUSH
29673: LD_VAR 0 2
29677: PPUSH
29678: LD_INT 1
29680: PPUSH
29681: LD_INT 1
29683: PPUSH
29684: CALL 37898 0 4
29688: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
29689: LD_ADDR_VAR 0 5
29693: PUSH
29694: LD_EXP 84
29698: PPUSH
29699: LD_VAR 0 1
29703: PPUSH
29704: CALL 37248 0 2
29708: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
29709: LD_EXP 85
29713: PUSH
29714: LD_VAR 0 5
29718: ARRAY
29719: PUSH
29720: LD_EXP 86
29724: LESS
29725: IFFALSE 29914
// begin for i := 1 to vehicles do
29727: LD_ADDR_VAR 0 4
29731: PUSH
29732: DOUBLE
29733: LD_INT 1
29735: DEC
29736: ST_TO_ADDR
29737: LD_VAR 0 2
29741: PUSH
29742: FOR_TO
29743: IFFALSE 29912
// begin if hackTanksCaptured [ index ] = hackLimit then
29745: LD_EXP 85
29749: PUSH
29750: LD_VAR 0 5
29754: ARRAY
29755: PUSH
29756: LD_EXP 86
29760: EQUAL
29761: IFFALSE 29765
// break ;
29763: GO 29912
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
29765: LD_ADDR_EXP 88
29769: PUSH
29770: LD_EXP 88
29774: PPUSH
29775: LD_VAR 0 5
29779: PPUSH
29780: LD_EXP 88
29784: PUSH
29785: LD_VAR 0 5
29789: ARRAY
29790: PUSH
29791: LD_INT 1
29793: PLUS
29794: PPUSH
29795: CALL_OW 1
29799: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
29800: LD_ADDR_EXP 85
29804: PUSH
29805: LD_EXP 85
29809: PPUSH
29810: LD_VAR 0 5
29814: PUSH
29815: LD_EXP 85
29819: PUSH
29820: LD_VAR 0 5
29824: ARRAY
29825: PUSH
29826: LD_INT 1
29828: PLUS
29829: PUSH
29830: EMPTY
29831: LIST
29832: LIST
29833: PPUSH
29834: LD_VAR 0 2
29838: PUSH
29839: LD_VAR 0 4
29843: ARRAY
29844: PUSH
29845: LD_VAR 0 2
29849: PUSH
29850: LD_VAR 0 4
29854: ARRAY
29855: PPUSH
29856: CALL_OW 255
29860: PUSH
29861: EMPTY
29862: LIST
29863: LIST
29864: PPUSH
29865: CALL 37463 0 3
29869: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
29870: LD_VAR 0 2
29874: PUSH
29875: LD_VAR 0 4
29879: ARRAY
29880: PPUSH
29881: LD_VAR 0 1
29885: PPUSH
29886: CALL_OW 255
29890: PPUSH
29891: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
29895: LD_VAR 0 2
29899: PUSH
29900: LD_VAR 0 4
29904: ARRAY
29905: PPUSH
29906: CALL_OW 141
// end ;
29910: GO 29742
29912: POP
29913: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
29914: LD_VAR 0 1
29918: PPUSH
29919: LD_EXP 85
29923: PUSH
29924: LD_VAR 0 5
29928: ARRAY
29929: PUSH
29930: LD_INT 0
29932: PLUS
29933: PPUSH
29934: CALL_OW 505
// end ;
29938: LD_VAR 0 3
29942: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
29943: LD_INT 0
29945: PPUSH
29946: PPUSH
29947: PPUSH
29948: PPUSH
// if not hack in hackTanks then
29949: LD_VAR 0 1
29953: PUSH
29954: LD_EXP 84
29958: IN
29959: NOT
29960: IFFALSE 29964
// exit ;
29962: GO 30204
// index := GetElementIndex ( hackTanks , hack ) ;
29964: LD_ADDR_VAR 0 4
29968: PUSH
29969: LD_EXP 84
29973: PPUSH
29974: LD_VAR 0 1
29978: PPUSH
29979: CALL 37248 0 2
29983: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
29984: LD_ADDR_VAR 0 3
29988: PUSH
29989: DOUBLE
29990: LD_EXP 85
29994: PUSH
29995: LD_VAR 0 4
29999: ARRAY
30000: INC
30001: ST_TO_ADDR
30002: LD_INT 1
30004: PUSH
30005: FOR_DOWNTO
30006: IFFALSE 30178
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
30008: LD_ADDR_VAR 0 5
30012: PUSH
30013: LD_EXP 85
30017: PUSH
30018: LD_VAR 0 4
30022: ARRAY
30023: PUSH
30024: LD_VAR 0 3
30028: ARRAY
30029: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
30030: LD_VAR 0 5
30034: PUSH
30035: LD_INT 1
30037: ARRAY
30038: PPUSH
30039: CALL_OW 302
30043: NOT
30044: PUSH
30045: LD_VAR 0 5
30049: PUSH
30050: LD_INT 1
30052: ARRAY
30053: PPUSH
30054: CALL_OW 255
30058: PUSH
30059: LD_VAR 0 1
30063: PPUSH
30064: CALL_OW 255
30068: NONEQUAL
30069: OR
30070: IFFALSE 30176
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
30072: LD_VAR 0 5
30076: PUSH
30077: LD_INT 1
30079: ARRAY
30080: PPUSH
30081: CALL_OW 305
30085: PUSH
30086: LD_VAR 0 5
30090: PUSH
30091: LD_INT 1
30093: ARRAY
30094: PPUSH
30095: CALL_OW 255
30099: PUSH
30100: LD_VAR 0 1
30104: PPUSH
30105: CALL_OW 255
30109: EQUAL
30110: AND
30111: IFFALSE 30135
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
30113: LD_VAR 0 5
30117: PUSH
30118: LD_INT 1
30120: ARRAY
30121: PPUSH
30122: LD_VAR 0 5
30126: PUSH
30127: LD_INT 2
30129: ARRAY
30130: PPUSH
30131: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
30135: LD_ADDR_EXP 85
30139: PUSH
30140: LD_EXP 85
30144: PPUSH
30145: LD_VAR 0 4
30149: PPUSH
30150: LD_EXP 85
30154: PUSH
30155: LD_VAR 0 4
30159: ARRAY
30160: PPUSH
30161: LD_VAR 0 3
30165: PPUSH
30166: CALL_OW 3
30170: PPUSH
30171: CALL_OW 1
30175: ST_TO_ADDR
// end ; end ;
30176: GO 30005
30178: POP
30179: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
30180: LD_VAR 0 1
30184: PPUSH
30185: LD_EXP 85
30189: PUSH
30190: LD_VAR 0 4
30194: ARRAY
30195: PUSH
30196: LD_INT 0
30198: PLUS
30199: PPUSH
30200: CALL_OW 505
// end ;
30204: LD_VAR 0 2
30208: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
30209: LD_INT 0
30211: PPUSH
30212: PPUSH
30213: PPUSH
30214: PPUSH
// if not hack in hackTanks then
30215: LD_VAR 0 1
30219: PUSH
30220: LD_EXP 84
30224: IN
30225: NOT
30226: IFFALSE 30230
// exit ;
30228: GO 30315
// index := GetElementIndex ( hackTanks , hack ) ;
30230: LD_ADDR_VAR 0 5
30234: PUSH
30235: LD_EXP 84
30239: PPUSH
30240: LD_VAR 0 1
30244: PPUSH
30245: CALL 37248 0 2
30249: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
30250: LD_ADDR_VAR 0 4
30254: PUSH
30255: DOUBLE
30256: LD_INT 1
30258: DEC
30259: ST_TO_ADDR
30260: LD_EXP 85
30264: PUSH
30265: LD_VAR 0 5
30269: ARRAY
30270: PUSH
30271: FOR_TO
30272: IFFALSE 30313
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
30274: LD_EXP 85
30278: PUSH
30279: LD_VAR 0 5
30283: ARRAY
30284: PUSH
30285: LD_VAR 0 4
30289: ARRAY
30290: PUSH
30291: LD_INT 1
30293: ARRAY
30294: PUSH
30295: LD_VAR 0 2
30299: EQUAL
30300: IFFALSE 30311
// KillUnit ( vehicle ) ;
30302: LD_VAR 0 2
30306: PPUSH
30307: CALL_OW 66
30311: GO 30271
30313: POP
30314: POP
// end ;
30315: LD_VAR 0 3
30319: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
30320: LD_EXP 89
30324: NOT
30325: IFFALSE 30360
30327: GO 30329
30329: DISABLE
// begin initMiner := true ;
30330: LD_ADDR_EXP 89
30334: PUSH
30335: LD_INT 1
30337: ST_TO_ADDR
// minersList := [ ] ;
30338: LD_ADDR_EXP 90
30342: PUSH
30343: EMPTY
30344: ST_TO_ADDR
// minerMinesList := [ ] ;
30345: LD_ADDR_EXP 91
30349: PUSH
30350: EMPTY
30351: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
30352: LD_ADDR_EXP 92
30356: PUSH
30357: LD_INT 5
30359: ST_TO_ADDR
// end ;
30360: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
30361: LD_EXP 89
30365: PUSH
30366: LD_INT 34
30368: PUSH
30369: LD_INT 81
30371: PUSH
30372: EMPTY
30373: LIST
30374: LIST
30375: PPUSH
30376: CALL_OW 69
30380: AND
30381: IFFALSE 30842
30383: GO 30385
30385: DISABLE
30386: LD_INT 0
30388: PPUSH
30389: PPUSH
30390: PPUSH
30391: PPUSH
// begin enable ;
30392: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
30393: LD_ADDR_VAR 0 1
30397: PUSH
30398: LD_INT 34
30400: PUSH
30401: LD_INT 81
30403: PUSH
30404: EMPTY
30405: LIST
30406: LIST
30407: PPUSH
30408: CALL_OW 69
30412: PUSH
30413: FOR_IN
30414: IFFALSE 30486
// begin if not i in minersList then
30416: LD_VAR 0 1
30420: PUSH
30421: LD_EXP 90
30425: IN
30426: NOT
30427: IFFALSE 30484
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
30429: LD_ADDR_EXP 90
30433: PUSH
30434: LD_EXP 90
30438: PPUSH
30439: LD_EXP 90
30443: PUSH
30444: LD_INT 1
30446: PLUS
30447: PPUSH
30448: LD_VAR 0 1
30452: PPUSH
30453: CALL_OW 1
30457: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
30458: LD_ADDR_EXP 91
30462: PUSH
30463: LD_EXP 91
30467: PPUSH
30468: LD_EXP 91
30472: PUSH
30473: LD_INT 1
30475: PLUS
30476: PPUSH
30477: EMPTY
30478: PPUSH
30479: CALL_OW 1
30483: ST_TO_ADDR
// end end ;
30484: GO 30413
30486: POP
30487: POP
// for i := minerMinesList downto 1 do
30488: LD_ADDR_VAR 0 1
30492: PUSH
30493: DOUBLE
30494: LD_EXP 91
30498: INC
30499: ST_TO_ADDR
30500: LD_INT 1
30502: PUSH
30503: FOR_DOWNTO
30504: IFFALSE 30840
// begin if IsLive ( minersList [ i ] ) then
30506: LD_EXP 90
30510: PUSH
30511: LD_VAR 0 1
30515: ARRAY
30516: PPUSH
30517: CALL_OW 300
30521: IFFALSE 30549
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
30523: LD_EXP 90
30527: PUSH
30528: LD_VAR 0 1
30532: ARRAY
30533: PPUSH
30534: LD_EXP 91
30538: PUSH
30539: LD_VAR 0 1
30543: ARRAY
30544: PPUSH
30545: CALL_OW 505
// if not minerMinesList [ i ] then
30549: LD_EXP 91
30553: PUSH
30554: LD_VAR 0 1
30558: ARRAY
30559: NOT
30560: IFFALSE 30564
// continue ;
30562: GO 30503
// for j := minerMinesList [ i ] downto 1 do
30564: LD_ADDR_VAR 0 2
30568: PUSH
30569: DOUBLE
30570: LD_EXP 91
30574: PUSH
30575: LD_VAR 0 1
30579: ARRAY
30580: INC
30581: ST_TO_ADDR
30582: LD_INT 1
30584: PUSH
30585: FOR_DOWNTO
30586: IFFALSE 30836
// begin side := GetSide ( minersList [ i ] ) ;
30588: LD_ADDR_VAR 0 3
30592: PUSH
30593: LD_EXP 90
30597: PUSH
30598: LD_VAR 0 1
30602: ARRAY
30603: PPUSH
30604: CALL_OW 255
30608: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
30609: LD_ADDR_VAR 0 4
30613: PUSH
30614: LD_EXP 91
30618: PUSH
30619: LD_VAR 0 1
30623: ARRAY
30624: PUSH
30625: LD_VAR 0 2
30629: ARRAY
30630: PUSH
30631: LD_INT 1
30633: ARRAY
30634: PPUSH
30635: LD_EXP 91
30639: PUSH
30640: LD_VAR 0 1
30644: ARRAY
30645: PUSH
30646: LD_VAR 0 2
30650: ARRAY
30651: PUSH
30652: LD_INT 2
30654: ARRAY
30655: PPUSH
30656: CALL_OW 428
30660: ST_TO_ADDR
// if not tmp then
30661: LD_VAR 0 4
30665: NOT
30666: IFFALSE 30670
// continue ;
30668: GO 30585
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
30670: LD_VAR 0 4
30674: PUSH
30675: LD_INT 81
30677: PUSH
30678: LD_VAR 0 3
30682: PUSH
30683: EMPTY
30684: LIST
30685: LIST
30686: PPUSH
30687: CALL_OW 69
30691: IN
30692: PUSH
30693: LD_EXP 91
30697: PUSH
30698: LD_VAR 0 1
30702: ARRAY
30703: PUSH
30704: LD_VAR 0 2
30708: ARRAY
30709: PUSH
30710: LD_INT 1
30712: ARRAY
30713: PPUSH
30714: LD_EXP 91
30718: PUSH
30719: LD_VAR 0 1
30723: ARRAY
30724: PUSH
30725: LD_VAR 0 2
30729: ARRAY
30730: PUSH
30731: LD_INT 2
30733: ARRAY
30734: PPUSH
30735: CALL_OW 458
30739: AND
30740: IFFALSE 30834
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
30742: LD_EXP 91
30746: PUSH
30747: LD_VAR 0 1
30751: ARRAY
30752: PUSH
30753: LD_VAR 0 2
30757: ARRAY
30758: PUSH
30759: LD_INT 1
30761: ARRAY
30762: PPUSH
30763: LD_EXP 91
30767: PUSH
30768: LD_VAR 0 1
30772: ARRAY
30773: PUSH
30774: LD_VAR 0 2
30778: ARRAY
30779: PUSH
30780: LD_INT 2
30782: ARRAY
30783: PPUSH
30784: LD_VAR 0 3
30788: PPUSH
30789: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
30793: LD_ADDR_EXP 91
30797: PUSH
30798: LD_EXP 91
30802: PPUSH
30803: LD_VAR 0 1
30807: PPUSH
30808: LD_EXP 91
30812: PUSH
30813: LD_VAR 0 1
30817: ARRAY
30818: PPUSH
30819: LD_VAR 0 2
30823: PPUSH
30824: CALL_OW 3
30828: PPUSH
30829: CALL_OW 1
30833: ST_TO_ADDR
// end ; end ;
30834: GO 30585
30836: POP
30837: POP
// end ;
30838: GO 30503
30840: POP
30841: POP
// end ;
30842: PPOPN 4
30844: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
30845: LD_INT 0
30847: PPUSH
30848: PPUSH
// result := false ;
30849: LD_ADDR_VAR 0 4
30853: PUSH
30854: LD_INT 0
30856: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
30857: LD_VAR 0 1
30861: PPUSH
30862: CALL_OW 264
30866: PUSH
30867: LD_INT 81
30869: EQUAL
30870: NOT
30871: IFFALSE 30875
// exit ;
30873: GO 31115
// index := GetElementIndex ( minersList , unit ) ;
30875: LD_ADDR_VAR 0 5
30879: PUSH
30880: LD_EXP 90
30884: PPUSH
30885: LD_VAR 0 1
30889: PPUSH
30890: CALL 37248 0 2
30894: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
30895: LD_EXP 91
30899: PUSH
30900: LD_VAR 0 5
30904: ARRAY
30905: PUSH
30906: LD_EXP 92
30910: GREATEREQUAL
30911: IFFALSE 30915
// exit ;
30913: GO 31115
// ComMoveXY ( unit , x , y ) ;
30915: LD_VAR 0 1
30919: PPUSH
30920: LD_VAR 0 2
30924: PPUSH
30925: LD_VAR 0 3
30929: PPUSH
30930: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
30934: LD_INT 35
30936: PPUSH
30937: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
30941: LD_VAR 0 1
30945: PPUSH
30946: LD_VAR 0 2
30950: PPUSH
30951: LD_VAR 0 3
30955: PPUSH
30956: CALL 68603 0 3
30960: NOT
30961: PUSH
30962: LD_VAR 0 1
30966: PPUSH
30967: CALL_OW 314
30971: AND
30972: IFFALSE 30976
// exit ;
30974: GO 31115
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
30976: LD_VAR 0 2
30980: PPUSH
30981: LD_VAR 0 3
30985: PPUSH
30986: CALL_OW 428
30990: PUSH
30991: LD_VAR 0 1
30995: EQUAL
30996: PUSH
30997: LD_VAR 0 1
31001: PPUSH
31002: CALL_OW 314
31006: NOT
31007: AND
31008: IFFALSE 30934
// PlaySoundXY ( x , y , PlantMine ) ;
31010: LD_VAR 0 2
31014: PPUSH
31015: LD_VAR 0 3
31019: PPUSH
31020: LD_STRING PlantMine
31022: PPUSH
31023: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
31027: LD_VAR 0 2
31031: PPUSH
31032: LD_VAR 0 3
31036: PPUSH
31037: LD_VAR 0 1
31041: PPUSH
31042: CALL_OW 255
31046: PPUSH
31047: LD_INT 0
31049: PPUSH
31050: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
31054: LD_ADDR_EXP 91
31058: PUSH
31059: LD_EXP 91
31063: PPUSH
31064: LD_VAR 0 5
31068: PUSH
31069: LD_EXP 91
31073: PUSH
31074: LD_VAR 0 5
31078: ARRAY
31079: PUSH
31080: LD_INT 1
31082: PLUS
31083: PUSH
31084: EMPTY
31085: LIST
31086: LIST
31087: PPUSH
31088: LD_VAR 0 2
31092: PUSH
31093: LD_VAR 0 3
31097: PUSH
31098: EMPTY
31099: LIST
31100: LIST
31101: PPUSH
31102: CALL 37463 0 3
31106: ST_TO_ADDR
// result := true ;
31107: LD_ADDR_VAR 0 4
31111: PUSH
31112: LD_INT 1
31114: ST_TO_ADDR
// end ;
31115: LD_VAR 0 4
31119: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
31120: LD_INT 0
31122: PPUSH
31123: PPUSH
31124: PPUSH
// if not unit in minersList then
31125: LD_VAR 0 1
31129: PUSH
31130: LD_EXP 90
31134: IN
31135: NOT
31136: IFFALSE 31140
// exit ;
31138: GO 31532
// index := GetElementIndex ( minersList , unit ) ;
31140: LD_ADDR_VAR 0 6
31144: PUSH
31145: LD_EXP 90
31149: PPUSH
31150: LD_VAR 0 1
31154: PPUSH
31155: CALL 37248 0 2
31159: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
31160: LD_ADDR_VAR 0 5
31164: PUSH
31165: DOUBLE
31166: LD_EXP 91
31170: PUSH
31171: LD_VAR 0 6
31175: ARRAY
31176: INC
31177: ST_TO_ADDR
31178: LD_INT 1
31180: PUSH
31181: FOR_DOWNTO
31182: IFFALSE 31343
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
31184: LD_EXP 91
31188: PUSH
31189: LD_VAR 0 6
31193: ARRAY
31194: PUSH
31195: LD_VAR 0 5
31199: ARRAY
31200: PUSH
31201: LD_INT 1
31203: ARRAY
31204: PUSH
31205: LD_VAR 0 2
31209: EQUAL
31210: PUSH
31211: LD_EXP 91
31215: PUSH
31216: LD_VAR 0 6
31220: ARRAY
31221: PUSH
31222: LD_VAR 0 5
31226: ARRAY
31227: PUSH
31228: LD_INT 2
31230: ARRAY
31231: PUSH
31232: LD_VAR 0 3
31236: EQUAL
31237: AND
31238: IFFALSE 31341
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
31240: LD_EXP 91
31244: PUSH
31245: LD_VAR 0 6
31249: ARRAY
31250: PUSH
31251: LD_VAR 0 5
31255: ARRAY
31256: PUSH
31257: LD_INT 1
31259: ARRAY
31260: PPUSH
31261: LD_EXP 91
31265: PUSH
31266: LD_VAR 0 6
31270: ARRAY
31271: PUSH
31272: LD_VAR 0 5
31276: ARRAY
31277: PUSH
31278: LD_INT 2
31280: ARRAY
31281: PPUSH
31282: LD_VAR 0 1
31286: PPUSH
31287: CALL_OW 255
31291: PPUSH
31292: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
31296: LD_ADDR_EXP 91
31300: PUSH
31301: LD_EXP 91
31305: PPUSH
31306: LD_VAR 0 6
31310: PPUSH
31311: LD_EXP 91
31315: PUSH
31316: LD_VAR 0 6
31320: ARRAY
31321: PPUSH
31322: LD_VAR 0 5
31326: PPUSH
31327: CALL_OW 3
31331: PPUSH
31332: CALL_OW 1
31336: ST_TO_ADDR
// exit ;
31337: POP
31338: POP
31339: GO 31532
// end ; end ;
31341: GO 31181
31343: POP
31344: POP
// for i := minerMinesList [ index ] downto 1 do
31345: LD_ADDR_VAR 0 5
31349: PUSH
31350: DOUBLE
31351: LD_EXP 91
31355: PUSH
31356: LD_VAR 0 6
31360: ARRAY
31361: INC
31362: ST_TO_ADDR
31363: LD_INT 1
31365: PUSH
31366: FOR_DOWNTO
31367: IFFALSE 31530
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
31369: LD_EXP 91
31373: PUSH
31374: LD_VAR 0 6
31378: ARRAY
31379: PUSH
31380: LD_VAR 0 5
31384: ARRAY
31385: PUSH
31386: LD_INT 1
31388: ARRAY
31389: PPUSH
31390: LD_EXP 91
31394: PUSH
31395: LD_VAR 0 6
31399: ARRAY
31400: PUSH
31401: LD_VAR 0 5
31405: ARRAY
31406: PUSH
31407: LD_INT 2
31409: ARRAY
31410: PPUSH
31411: LD_VAR 0 2
31415: PPUSH
31416: LD_VAR 0 3
31420: PPUSH
31421: CALL_OW 298
31425: PUSH
31426: LD_INT 6
31428: LESS
31429: IFFALSE 31528
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
31431: LD_EXP 91
31435: PUSH
31436: LD_VAR 0 6
31440: ARRAY
31441: PUSH
31442: LD_VAR 0 5
31446: ARRAY
31447: PUSH
31448: LD_INT 1
31450: ARRAY
31451: PPUSH
31452: LD_EXP 91
31456: PUSH
31457: LD_VAR 0 6
31461: ARRAY
31462: PUSH
31463: LD_VAR 0 5
31467: ARRAY
31468: PUSH
31469: LD_INT 2
31471: ARRAY
31472: PPUSH
31473: LD_VAR 0 1
31477: PPUSH
31478: CALL_OW 255
31482: PPUSH
31483: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
31487: LD_ADDR_EXP 91
31491: PUSH
31492: LD_EXP 91
31496: PPUSH
31497: LD_VAR 0 6
31501: PPUSH
31502: LD_EXP 91
31506: PUSH
31507: LD_VAR 0 6
31511: ARRAY
31512: PPUSH
31513: LD_VAR 0 5
31517: PPUSH
31518: CALL_OW 3
31522: PPUSH
31523: CALL_OW 1
31527: ST_TO_ADDR
// end ; end ;
31528: GO 31366
31530: POP
31531: POP
// end ;
31532: LD_VAR 0 4
31536: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
31537: LD_INT 0
31539: PPUSH
31540: PPUSH
31541: PPUSH
31542: PPUSH
31543: PPUSH
31544: PPUSH
31545: PPUSH
31546: PPUSH
31547: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
31548: LD_VAR 0 1
31552: PPUSH
31553: CALL_OW 264
31557: PUSH
31558: LD_INT 81
31560: EQUAL
31561: NOT
31562: PUSH
31563: LD_VAR 0 1
31567: PUSH
31568: LD_EXP 90
31572: IN
31573: NOT
31574: OR
31575: IFFALSE 31579
// exit ;
31577: GO 31901
// index := GetElementIndex ( minersList , unit ) ;
31579: LD_ADDR_VAR 0 6
31583: PUSH
31584: LD_EXP 90
31588: PPUSH
31589: LD_VAR 0 1
31593: PPUSH
31594: CALL 37248 0 2
31598: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
31599: LD_ADDR_VAR 0 8
31603: PUSH
31604: LD_EXP 92
31608: PUSH
31609: LD_EXP 91
31613: PUSH
31614: LD_VAR 0 6
31618: ARRAY
31619: MINUS
31620: ST_TO_ADDR
// if not minesFreeAmount then
31621: LD_VAR 0 8
31625: NOT
31626: IFFALSE 31630
// exit ;
31628: GO 31901
// tmp := [ ] ;
31630: LD_ADDR_VAR 0 7
31634: PUSH
31635: EMPTY
31636: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
31637: LD_ADDR_VAR 0 5
31641: PUSH
31642: DOUBLE
31643: LD_INT 1
31645: DEC
31646: ST_TO_ADDR
31647: LD_VAR 0 8
31651: PUSH
31652: FOR_TO
31653: IFFALSE 31848
// begin _d := rand ( 0 , 5 ) ;
31655: LD_ADDR_VAR 0 11
31659: PUSH
31660: LD_INT 0
31662: PPUSH
31663: LD_INT 5
31665: PPUSH
31666: CALL_OW 12
31670: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
31671: LD_ADDR_VAR 0 12
31675: PUSH
31676: LD_INT 2
31678: PPUSH
31679: LD_INT 6
31681: PPUSH
31682: CALL_OW 12
31686: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
31687: LD_ADDR_VAR 0 9
31691: PUSH
31692: LD_VAR 0 2
31696: PPUSH
31697: LD_VAR 0 11
31701: PPUSH
31702: LD_VAR 0 12
31706: PPUSH
31707: CALL_OW 272
31711: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
31712: LD_ADDR_VAR 0 10
31716: PUSH
31717: LD_VAR 0 3
31721: PPUSH
31722: LD_VAR 0 11
31726: PPUSH
31727: LD_VAR 0 12
31731: PPUSH
31732: CALL_OW 273
31736: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
31737: LD_VAR 0 9
31741: PPUSH
31742: LD_VAR 0 10
31746: PPUSH
31747: CALL_OW 488
31751: PUSH
31752: LD_VAR 0 9
31756: PUSH
31757: LD_VAR 0 10
31761: PUSH
31762: EMPTY
31763: LIST
31764: LIST
31765: PUSH
31766: LD_VAR 0 7
31770: IN
31771: NOT
31772: AND
31773: PUSH
31774: LD_VAR 0 9
31778: PPUSH
31779: LD_VAR 0 10
31783: PPUSH
31784: CALL_OW 458
31788: NOT
31789: AND
31790: IFFALSE 31832
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
31792: LD_ADDR_VAR 0 7
31796: PUSH
31797: LD_VAR 0 7
31801: PPUSH
31802: LD_VAR 0 7
31806: PUSH
31807: LD_INT 1
31809: PLUS
31810: PPUSH
31811: LD_VAR 0 9
31815: PUSH
31816: LD_VAR 0 10
31820: PUSH
31821: EMPTY
31822: LIST
31823: LIST
31824: PPUSH
31825: CALL_OW 1
31829: ST_TO_ADDR
31830: GO 31846
// i := i - 1 ;
31832: LD_ADDR_VAR 0 5
31836: PUSH
31837: LD_VAR 0 5
31841: PUSH
31842: LD_INT 1
31844: MINUS
31845: ST_TO_ADDR
// end ;
31846: GO 31652
31848: POP
31849: POP
// for i in tmp do
31850: LD_ADDR_VAR 0 5
31854: PUSH
31855: LD_VAR 0 7
31859: PUSH
31860: FOR_IN
31861: IFFALSE 31899
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
31863: LD_VAR 0 1
31867: PPUSH
31868: LD_VAR 0 5
31872: PUSH
31873: LD_INT 1
31875: ARRAY
31876: PPUSH
31877: LD_VAR 0 5
31881: PUSH
31882: LD_INT 2
31884: ARRAY
31885: PPUSH
31886: CALL 30845 0 3
31890: NOT
31891: IFFALSE 31897
// exit ;
31893: POP
31894: POP
31895: GO 31901
31897: GO 31860
31899: POP
31900: POP
// end ;
31901: LD_VAR 0 4
31905: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
31906: LD_INT 0
31908: PPUSH
31909: PPUSH
31910: PPUSH
31911: PPUSH
31912: PPUSH
31913: PPUSH
31914: PPUSH
// if not GetClass ( unit ) = class_sniper then
31915: LD_VAR 0 1
31919: PPUSH
31920: CALL_OW 257
31924: PUSH
31925: LD_INT 5
31927: EQUAL
31928: NOT
31929: IFFALSE 31933
// exit ;
31931: GO 32321
// dist := 8 ;
31933: LD_ADDR_VAR 0 5
31937: PUSH
31938: LD_INT 8
31940: ST_TO_ADDR
// viewRange := 12 ;
31941: LD_ADDR_VAR 0 7
31945: PUSH
31946: LD_INT 12
31948: ST_TO_ADDR
// side := GetSide ( unit ) ;
31949: LD_ADDR_VAR 0 6
31953: PUSH
31954: LD_VAR 0 1
31958: PPUSH
31959: CALL_OW 255
31963: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
31964: LD_INT 61
31966: PPUSH
31967: LD_VAR 0 6
31971: PPUSH
31972: CALL_OW 321
31976: PUSH
31977: LD_INT 2
31979: EQUAL
31980: IFFALSE 31990
// viewRange := 16 ;
31982: LD_ADDR_VAR 0 7
31986: PUSH
31987: LD_INT 16
31989: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
31990: LD_VAR 0 1
31994: PPUSH
31995: LD_VAR 0 2
31999: PPUSH
32000: LD_VAR 0 3
32004: PPUSH
32005: CALL_OW 297
32009: PUSH
32010: LD_VAR 0 5
32014: GREATER
32015: IFFALSE 32094
// begin ComMoveXY ( unit , x , y ) ;
32017: LD_VAR 0 1
32021: PPUSH
32022: LD_VAR 0 2
32026: PPUSH
32027: LD_VAR 0 3
32031: PPUSH
32032: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
32036: LD_INT 35
32038: PPUSH
32039: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
32043: LD_VAR 0 1
32047: PPUSH
32048: LD_VAR 0 2
32052: PPUSH
32053: LD_VAR 0 3
32057: PPUSH
32058: CALL 68603 0 3
32062: NOT
32063: IFFALSE 32067
// exit ;
32065: GO 32321
// until GetDistUnitXY ( unit , x , y ) < dist ;
32067: LD_VAR 0 1
32071: PPUSH
32072: LD_VAR 0 2
32076: PPUSH
32077: LD_VAR 0 3
32081: PPUSH
32082: CALL_OW 297
32086: PUSH
32087: LD_VAR 0 5
32091: LESS
32092: IFFALSE 32036
// end ; ComTurnXY ( unit , x , y ) ;
32094: LD_VAR 0 1
32098: PPUSH
32099: LD_VAR 0 2
32103: PPUSH
32104: LD_VAR 0 3
32108: PPUSH
32109: CALL_OW 118
// wait ( 5 ) ;
32113: LD_INT 5
32115: PPUSH
32116: CALL_OW 67
// _d := GetDir ( unit ) ;
32120: LD_ADDR_VAR 0 10
32124: PUSH
32125: LD_VAR 0 1
32129: PPUSH
32130: CALL_OW 254
32134: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
32135: LD_ADDR_VAR 0 8
32139: PUSH
32140: LD_VAR 0 1
32144: PPUSH
32145: CALL_OW 250
32149: PPUSH
32150: LD_VAR 0 10
32154: PPUSH
32155: LD_VAR 0 5
32159: PPUSH
32160: CALL_OW 272
32164: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
32165: LD_ADDR_VAR 0 9
32169: PUSH
32170: LD_VAR 0 1
32174: PPUSH
32175: CALL_OW 251
32179: PPUSH
32180: LD_VAR 0 10
32184: PPUSH
32185: LD_VAR 0 5
32189: PPUSH
32190: CALL_OW 273
32194: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32195: LD_VAR 0 8
32199: PPUSH
32200: LD_VAR 0 9
32204: PPUSH
32205: CALL_OW 488
32209: NOT
32210: IFFALSE 32214
// exit ;
32212: GO 32321
// ComAnimCustom ( unit , 1 ) ;
32214: LD_VAR 0 1
32218: PPUSH
32219: LD_INT 1
32221: PPUSH
32222: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
32226: LD_VAR 0 8
32230: PPUSH
32231: LD_VAR 0 9
32235: PPUSH
32236: LD_VAR 0 6
32240: PPUSH
32241: LD_VAR 0 7
32245: PPUSH
32246: CALL_OW 330
// repeat wait ( 1 ) ;
32250: LD_INT 1
32252: PPUSH
32253: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
32257: LD_VAR 0 1
32261: PPUSH
32262: CALL_OW 316
32266: PUSH
32267: LD_VAR 0 1
32271: PPUSH
32272: CALL_OW 314
32276: OR
32277: PUSH
32278: LD_VAR 0 1
32282: PPUSH
32283: CALL_OW 302
32287: NOT
32288: OR
32289: PUSH
32290: LD_VAR 0 1
32294: PPUSH
32295: CALL_OW 301
32299: OR
32300: IFFALSE 32250
// RemoveSeeing ( _x , _y , side ) ;
32302: LD_VAR 0 8
32306: PPUSH
32307: LD_VAR 0 9
32311: PPUSH
32312: LD_VAR 0 6
32316: PPUSH
32317: CALL_OW 331
// end ; end_of_file
32321: LD_VAR 0 4
32325: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
32326: LD_INT 0
32328: PPUSH
32329: PPUSH
// if exist_mode then
32330: LD_VAR 0 2
32334: IFFALSE 32359
// unit := CreateCharacter ( prefix & ident ) else
32336: LD_ADDR_VAR 0 5
32340: PUSH
32341: LD_VAR 0 3
32345: PUSH
32346: LD_VAR 0 1
32350: STR
32351: PPUSH
32352: CALL_OW 34
32356: ST_TO_ADDR
32357: GO 32374
// unit := NewCharacter ( ident ) ;
32359: LD_ADDR_VAR 0 5
32363: PUSH
32364: LD_VAR 0 1
32368: PPUSH
32369: CALL_OW 25
32373: ST_TO_ADDR
// result := unit ;
32374: LD_ADDR_VAR 0 4
32378: PUSH
32379: LD_VAR 0 5
32383: ST_TO_ADDR
// end ;
32384: LD_VAR 0 4
32388: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
32389: LD_INT 0
32391: PPUSH
32392: PPUSH
// if not side or not nation then
32393: LD_VAR 0 1
32397: NOT
32398: PUSH
32399: LD_VAR 0 2
32403: NOT
32404: OR
32405: IFFALSE 32409
// exit ;
32407: GO 33177
// case nation of nation_american :
32409: LD_VAR 0 2
32413: PUSH
32414: LD_INT 1
32416: DOUBLE
32417: EQUAL
32418: IFTRUE 32422
32420: GO 32636
32422: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
32423: LD_ADDR_VAR 0 4
32427: PUSH
32428: LD_INT 35
32430: PUSH
32431: LD_INT 45
32433: PUSH
32434: LD_INT 46
32436: PUSH
32437: LD_INT 47
32439: PUSH
32440: LD_INT 82
32442: PUSH
32443: LD_INT 83
32445: PUSH
32446: LD_INT 84
32448: PUSH
32449: LD_INT 85
32451: PUSH
32452: LD_INT 86
32454: PUSH
32455: LD_INT 1
32457: PUSH
32458: LD_INT 2
32460: PUSH
32461: LD_INT 6
32463: PUSH
32464: LD_INT 15
32466: PUSH
32467: LD_INT 16
32469: PUSH
32470: LD_INT 7
32472: PUSH
32473: LD_INT 12
32475: PUSH
32476: LD_INT 13
32478: PUSH
32479: LD_INT 10
32481: PUSH
32482: LD_INT 14
32484: PUSH
32485: LD_INT 20
32487: PUSH
32488: LD_INT 21
32490: PUSH
32491: LD_INT 22
32493: PUSH
32494: LD_INT 25
32496: PUSH
32497: LD_INT 32
32499: PUSH
32500: LD_INT 27
32502: PUSH
32503: LD_INT 36
32505: PUSH
32506: LD_INT 69
32508: PUSH
32509: LD_INT 39
32511: PUSH
32512: LD_INT 34
32514: PUSH
32515: LD_INT 40
32517: PUSH
32518: LD_INT 48
32520: PUSH
32521: LD_INT 49
32523: PUSH
32524: LD_INT 50
32526: PUSH
32527: LD_INT 51
32529: PUSH
32530: LD_INT 52
32532: PUSH
32533: LD_INT 53
32535: PUSH
32536: LD_INT 54
32538: PUSH
32539: LD_INT 55
32541: PUSH
32542: LD_INT 56
32544: PUSH
32545: LD_INT 57
32547: PUSH
32548: LD_INT 58
32550: PUSH
32551: LD_INT 59
32553: PUSH
32554: LD_INT 60
32556: PUSH
32557: LD_INT 61
32559: PUSH
32560: LD_INT 62
32562: PUSH
32563: LD_INT 80
32565: PUSH
32566: LD_INT 82
32568: PUSH
32569: LD_INT 83
32571: PUSH
32572: LD_INT 84
32574: PUSH
32575: LD_INT 85
32577: PUSH
32578: LD_INT 86
32580: PUSH
32581: EMPTY
32582: LIST
32583: LIST
32584: LIST
32585: LIST
32586: LIST
32587: LIST
32588: LIST
32589: LIST
32590: LIST
32591: LIST
32592: LIST
32593: LIST
32594: LIST
32595: LIST
32596: LIST
32597: LIST
32598: LIST
32599: LIST
32600: LIST
32601: LIST
32602: LIST
32603: LIST
32604: LIST
32605: LIST
32606: LIST
32607: LIST
32608: LIST
32609: LIST
32610: LIST
32611: LIST
32612: LIST
32613: LIST
32614: LIST
32615: LIST
32616: LIST
32617: LIST
32618: LIST
32619: LIST
32620: LIST
32621: LIST
32622: LIST
32623: LIST
32624: LIST
32625: LIST
32626: LIST
32627: LIST
32628: LIST
32629: LIST
32630: LIST
32631: LIST
32632: LIST
32633: ST_TO_ADDR
32634: GO 33101
32636: LD_INT 2
32638: DOUBLE
32639: EQUAL
32640: IFTRUE 32644
32642: GO 32870
32644: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
32645: LD_ADDR_VAR 0 4
32649: PUSH
32650: LD_INT 35
32652: PUSH
32653: LD_INT 45
32655: PUSH
32656: LD_INT 46
32658: PUSH
32659: LD_INT 47
32661: PUSH
32662: LD_INT 82
32664: PUSH
32665: LD_INT 83
32667: PUSH
32668: LD_INT 84
32670: PUSH
32671: LD_INT 85
32673: PUSH
32674: LD_INT 87
32676: PUSH
32677: LD_INT 70
32679: PUSH
32680: LD_INT 1
32682: PUSH
32683: LD_INT 11
32685: PUSH
32686: LD_INT 3
32688: PUSH
32689: LD_INT 4
32691: PUSH
32692: LD_INT 5
32694: PUSH
32695: LD_INT 6
32697: PUSH
32698: LD_INT 15
32700: PUSH
32701: LD_INT 18
32703: PUSH
32704: LD_INT 7
32706: PUSH
32707: LD_INT 17
32709: PUSH
32710: LD_INT 8
32712: PUSH
32713: LD_INT 20
32715: PUSH
32716: LD_INT 21
32718: PUSH
32719: LD_INT 22
32721: PUSH
32722: LD_INT 72
32724: PUSH
32725: LD_INT 26
32727: PUSH
32728: LD_INT 69
32730: PUSH
32731: LD_INT 39
32733: PUSH
32734: LD_INT 40
32736: PUSH
32737: LD_INT 41
32739: PUSH
32740: LD_INT 42
32742: PUSH
32743: LD_INT 43
32745: PUSH
32746: LD_INT 48
32748: PUSH
32749: LD_INT 49
32751: PUSH
32752: LD_INT 50
32754: PUSH
32755: LD_INT 51
32757: PUSH
32758: LD_INT 52
32760: PUSH
32761: LD_INT 53
32763: PUSH
32764: LD_INT 54
32766: PUSH
32767: LD_INT 55
32769: PUSH
32770: LD_INT 56
32772: PUSH
32773: LD_INT 60
32775: PUSH
32776: LD_INT 61
32778: PUSH
32779: LD_INT 62
32781: PUSH
32782: LD_INT 66
32784: PUSH
32785: LD_INT 67
32787: PUSH
32788: LD_INT 68
32790: PUSH
32791: LD_INT 81
32793: PUSH
32794: LD_INT 82
32796: PUSH
32797: LD_INT 83
32799: PUSH
32800: LD_INT 84
32802: PUSH
32803: LD_INT 85
32805: PUSH
32806: LD_INT 87
32808: PUSH
32809: LD_INT 88
32811: PUSH
32812: EMPTY
32813: LIST
32814: LIST
32815: LIST
32816: LIST
32817: LIST
32818: LIST
32819: LIST
32820: LIST
32821: LIST
32822: LIST
32823: LIST
32824: LIST
32825: LIST
32826: LIST
32827: LIST
32828: LIST
32829: LIST
32830: LIST
32831: LIST
32832: LIST
32833: LIST
32834: LIST
32835: LIST
32836: LIST
32837: LIST
32838: LIST
32839: LIST
32840: LIST
32841: LIST
32842: LIST
32843: LIST
32844: LIST
32845: LIST
32846: LIST
32847: LIST
32848: LIST
32849: LIST
32850: LIST
32851: LIST
32852: LIST
32853: LIST
32854: LIST
32855: LIST
32856: LIST
32857: LIST
32858: LIST
32859: LIST
32860: LIST
32861: LIST
32862: LIST
32863: LIST
32864: LIST
32865: LIST
32866: LIST
32867: ST_TO_ADDR
32868: GO 33101
32870: LD_INT 3
32872: DOUBLE
32873: EQUAL
32874: IFTRUE 32878
32876: GO 33100
32878: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
32879: LD_ADDR_VAR 0 4
32883: PUSH
32884: LD_INT 46
32886: PUSH
32887: LD_INT 47
32889: PUSH
32890: LD_INT 1
32892: PUSH
32893: LD_INT 2
32895: PUSH
32896: LD_INT 82
32898: PUSH
32899: LD_INT 83
32901: PUSH
32902: LD_INT 84
32904: PUSH
32905: LD_INT 85
32907: PUSH
32908: LD_INT 86
32910: PUSH
32911: LD_INT 11
32913: PUSH
32914: LD_INT 9
32916: PUSH
32917: LD_INT 20
32919: PUSH
32920: LD_INT 19
32922: PUSH
32923: LD_INT 21
32925: PUSH
32926: LD_INT 24
32928: PUSH
32929: LD_INT 22
32931: PUSH
32932: LD_INT 25
32934: PUSH
32935: LD_INT 28
32937: PUSH
32938: LD_INT 29
32940: PUSH
32941: LD_INT 30
32943: PUSH
32944: LD_INT 31
32946: PUSH
32947: LD_INT 37
32949: PUSH
32950: LD_INT 38
32952: PUSH
32953: LD_INT 32
32955: PUSH
32956: LD_INT 27
32958: PUSH
32959: LD_INT 33
32961: PUSH
32962: LD_INT 69
32964: PUSH
32965: LD_INT 39
32967: PUSH
32968: LD_INT 34
32970: PUSH
32971: LD_INT 40
32973: PUSH
32974: LD_INT 71
32976: PUSH
32977: LD_INT 23
32979: PUSH
32980: LD_INT 44
32982: PUSH
32983: LD_INT 48
32985: PUSH
32986: LD_INT 49
32988: PUSH
32989: LD_INT 50
32991: PUSH
32992: LD_INT 51
32994: PUSH
32995: LD_INT 52
32997: PUSH
32998: LD_INT 53
33000: PUSH
33001: LD_INT 54
33003: PUSH
33004: LD_INT 55
33006: PUSH
33007: LD_INT 56
33009: PUSH
33010: LD_INT 57
33012: PUSH
33013: LD_INT 58
33015: PUSH
33016: LD_INT 59
33018: PUSH
33019: LD_INT 63
33021: PUSH
33022: LD_INT 64
33024: PUSH
33025: LD_INT 65
33027: PUSH
33028: LD_INT 82
33030: PUSH
33031: LD_INT 83
33033: PUSH
33034: LD_INT 84
33036: PUSH
33037: LD_INT 85
33039: PUSH
33040: LD_INT 86
33042: PUSH
33043: EMPTY
33044: LIST
33045: LIST
33046: LIST
33047: LIST
33048: LIST
33049: LIST
33050: LIST
33051: LIST
33052: LIST
33053: LIST
33054: LIST
33055: LIST
33056: LIST
33057: LIST
33058: LIST
33059: LIST
33060: LIST
33061: LIST
33062: LIST
33063: LIST
33064: LIST
33065: LIST
33066: LIST
33067: LIST
33068: LIST
33069: LIST
33070: LIST
33071: LIST
33072: LIST
33073: LIST
33074: LIST
33075: LIST
33076: LIST
33077: LIST
33078: LIST
33079: LIST
33080: LIST
33081: LIST
33082: LIST
33083: LIST
33084: LIST
33085: LIST
33086: LIST
33087: LIST
33088: LIST
33089: LIST
33090: LIST
33091: LIST
33092: LIST
33093: LIST
33094: LIST
33095: LIST
33096: LIST
33097: ST_TO_ADDR
33098: GO 33101
33100: POP
// if state > - 1 and state < 3 then
33101: LD_VAR 0 3
33105: PUSH
33106: LD_INT 1
33108: NEG
33109: GREATER
33110: PUSH
33111: LD_VAR 0 3
33115: PUSH
33116: LD_INT 3
33118: LESS
33119: AND
33120: IFFALSE 33177
// for i in result do
33122: LD_ADDR_VAR 0 5
33126: PUSH
33127: LD_VAR 0 4
33131: PUSH
33132: FOR_IN
33133: IFFALSE 33175
// if GetTech ( i , side ) <> state then
33135: LD_VAR 0 5
33139: PPUSH
33140: LD_VAR 0 1
33144: PPUSH
33145: CALL_OW 321
33149: PUSH
33150: LD_VAR 0 3
33154: NONEQUAL
33155: IFFALSE 33173
// result := result diff i ;
33157: LD_ADDR_VAR 0 4
33161: PUSH
33162: LD_VAR 0 4
33166: PUSH
33167: LD_VAR 0 5
33171: DIFF
33172: ST_TO_ADDR
33173: GO 33132
33175: POP
33176: POP
// end ;
33177: LD_VAR 0 4
33181: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
33182: LD_INT 0
33184: PPUSH
33185: PPUSH
33186: PPUSH
// result := true ;
33187: LD_ADDR_VAR 0 3
33191: PUSH
33192: LD_INT 1
33194: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
33195: LD_ADDR_VAR 0 5
33199: PUSH
33200: LD_VAR 0 2
33204: PPUSH
33205: CALL_OW 480
33209: ST_TO_ADDR
// if not tmp then
33210: LD_VAR 0 5
33214: NOT
33215: IFFALSE 33219
// exit ;
33217: GO 33268
// for i in tmp do
33219: LD_ADDR_VAR 0 4
33223: PUSH
33224: LD_VAR 0 5
33228: PUSH
33229: FOR_IN
33230: IFFALSE 33266
// if GetTech ( i , side ) <> state_researched then
33232: LD_VAR 0 4
33236: PPUSH
33237: LD_VAR 0 1
33241: PPUSH
33242: CALL_OW 321
33246: PUSH
33247: LD_INT 2
33249: NONEQUAL
33250: IFFALSE 33264
// begin result := false ;
33252: LD_ADDR_VAR 0 3
33256: PUSH
33257: LD_INT 0
33259: ST_TO_ADDR
// exit ;
33260: POP
33261: POP
33262: GO 33268
// end ;
33264: GO 33229
33266: POP
33267: POP
// end ;
33268: LD_VAR 0 3
33272: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
33273: LD_INT 0
33275: PPUSH
33276: PPUSH
33277: PPUSH
33278: PPUSH
33279: PPUSH
33280: PPUSH
33281: PPUSH
33282: PPUSH
33283: PPUSH
33284: PPUSH
33285: PPUSH
33286: PPUSH
33287: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
33288: LD_VAR 0 1
33292: NOT
33293: PUSH
33294: LD_VAR 0 1
33298: PPUSH
33299: CALL_OW 257
33303: PUSH
33304: LD_INT 9
33306: NONEQUAL
33307: OR
33308: IFFALSE 33312
// exit ;
33310: GO 33885
// side := GetSide ( unit ) ;
33312: LD_ADDR_VAR 0 9
33316: PUSH
33317: LD_VAR 0 1
33321: PPUSH
33322: CALL_OW 255
33326: ST_TO_ADDR
// tech_space := tech_spacanom ;
33327: LD_ADDR_VAR 0 12
33331: PUSH
33332: LD_INT 29
33334: ST_TO_ADDR
// tech_time := tech_taurad ;
33335: LD_ADDR_VAR 0 13
33339: PUSH
33340: LD_INT 28
33342: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
33343: LD_ADDR_VAR 0 11
33347: PUSH
33348: LD_VAR 0 1
33352: PPUSH
33353: CALL_OW 310
33357: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
33358: LD_VAR 0 11
33362: PPUSH
33363: CALL_OW 247
33367: PUSH
33368: LD_INT 2
33370: EQUAL
33371: IFFALSE 33375
// exit ;
33373: GO 33885
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33375: LD_ADDR_VAR 0 8
33379: PUSH
33380: LD_INT 81
33382: PUSH
33383: LD_VAR 0 9
33387: PUSH
33388: EMPTY
33389: LIST
33390: LIST
33391: PUSH
33392: LD_INT 3
33394: PUSH
33395: LD_INT 21
33397: PUSH
33398: LD_INT 3
33400: PUSH
33401: EMPTY
33402: LIST
33403: LIST
33404: PUSH
33405: EMPTY
33406: LIST
33407: LIST
33408: PUSH
33409: EMPTY
33410: LIST
33411: LIST
33412: PPUSH
33413: CALL_OW 69
33417: ST_TO_ADDR
// if not tmp then
33418: LD_VAR 0 8
33422: NOT
33423: IFFALSE 33427
// exit ;
33425: GO 33885
// if in_unit then
33427: LD_VAR 0 11
33431: IFFALSE 33455
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
33433: LD_ADDR_VAR 0 10
33437: PUSH
33438: LD_VAR 0 8
33442: PPUSH
33443: LD_VAR 0 11
33447: PPUSH
33448: CALL_OW 74
33452: ST_TO_ADDR
33453: GO 33475
// enemy := NearestUnitToUnit ( tmp , unit ) ;
33455: LD_ADDR_VAR 0 10
33459: PUSH
33460: LD_VAR 0 8
33464: PPUSH
33465: LD_VAR 0 1
33469: PPUSH
33470: CALL_OW 74
33474: ST_TO_ADDR
// if not enemy then
33475: LD_VAR 0 10
33479: NOT
33480: IFFALSE 33484
// exit ;
33482: GO 33885
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
33484: LD_VAR 0 11
33488: PUSH
33489: LD_VAR 0 11
33493: PPUSH
33494: LD_VAR 0 10
33498: PPUSH
33499: CALL_OW 296
33503: PUSH
33504: LD_INT 13
33506: GREATER
33507: AND
33508: PUSH
33509: LD_VAR 0 1
33513: PPUSH
33514: LD_VAR 0 10
33518: PPUSH
33519: CALL_OW 296
33523: PUSH
33524: LD_INT 12
33526: GREATER
33527: OR
33528: IFFALSE 33532
// exit ;
33530: GO 33885
// missile := [ 1 ] ;
33532: LD_ADDR_VAR 0 14
33536: PUSH
33537: LD_INT 1
33539: PUSH
33540: EMPTY
33541: LIST
33542: ST_TO_ADDR
// if Researched ( side , tech_space ) then
33543: LD_VAR 0 9
33547: PPUSH
33548: LD_VAR 0 12
33552: PPUSH
33553: CALL_OW 325
33557: IFFALSE 33586
// missile := Replace ( missile , missile + 1 , 2 ) ;
33559: LD_ADDR_VAR 0 14
33563: PUSH
33564: LD_VAR 0 14
33568: PPUSH
33569: LD_VAR 0 14
33573: PUSH
33574: LD_INT 1
33576: PLUS
33577: PPUSH
33578: LD_INT 2
33580: PPUSH
33581: CALL_OW 1
33585: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
33586: LD_VAR 0 9
33590: PPUSH
33591: LD_VAR 0 13
33595: PPUSH
33596: CALL_OW 325
33600: PUSH
33601: LD_VAR 0 10
33605: PPUSH
33606: CALL_OW 255
33610: PPUSH
33611: LD_VAR 0 13
33615: PPUSH
33616: CALL_OW 325
33620: NOT
33621: AND
33622: IFFALSE 33651
// missile := Replace ( missile , missile + 1 , 3 ) ;
33624: LD_ADDR_VAR 0 14
33628: PUSH
33629: LD_VAR 0 14
33633: PPUSH
33634: LD_VAR 0 14
33638: PUSH
33639: LD_INT 1
33641: PLUS
33642: PPUSH
33643: LD_INT 3
33645: PPUSH
33646: CALL_OW 1
33650: ST_TO_ADDR
// if missile < 2 then
33651: LD_VAR 0 14
33655: PUSH
33656: LD_INT 2
33658: LESS
33659: IFFALSE 33663
// exit ;
33661: GO 33885
// x := GetX ( enemy ) ;
33663: LD_ADDR_VAR 0 4
33667: PUSH
33668: LD_VAR 0 10
33672: PPUSH
33673: CALL_OW 250
33677: ST_TO_ADDR
// y := GetY ( enemy ) ;
33678: LD_ADDR_VAR 0 5
33682: PUSH
33683: LD_VAR 0 10
33687: PPUSH
33688: CALL_OW 251
33692: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
33693: LD_ADDR_VAR 0 6
33697: PUSH
33698: LD_VAR 0 4
33702: PUSH
33703: LD_INT 1
33705: NEG
33706: PPUSH
33707: LD_INT 1
33709: PPUSH
33710: CALL_OW 12
33714: PLUS
33715: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
33716: LD_ADDR_VAR 0 7
33720: PUSH
33721: LD_VAR 0 5
33725: PUSH
33726: LD_INT 1
33728: NEG
33729: PPUSH
33730: LD_INT 1
33732: PPUSH
33733: CALL_OW 12
33737: PLUS
33738: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
33739: LD_VAR 0 6
33743: PPUSH
33744: LD_VAR 0 7
33748: PPUSH
33749: CALL_OW 488
33753: NOT
33754: IFFALSE 33776
// begin _x := x ;
33756: LD_ADDR_VAR 0 6
33760: PUSH
33761: LD_VAR 0 4
33765: ST_TO_ADDR
// _y := y ;
33766: LD_ADDR_VAR 0 7
33770: PUSH
33771: LD_VAR 0 5
33775: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
33776: LD_ADDR_VAR 0 3
33780: PUSH
33781: LD_INT 1
33783: PPUSH
33784: LD_VAR 0 14
33788: PPUSH
33789: CALL_OW 12
33793: ST_TO_ADDR
// case i of 1 :
33794: LD_VAR 0 3
33798: PUSH
33799: LD_INT 1
33801: DOUBLE
33802: EQUAL
33803: IFTRUE 33807
33805: GO 33824
33807: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
33808: LD_VAR 0 1
33812: PPUSH
33813: LD_VAR 0 10
33817: PPUSH
33818: CALL_OW 115
33822: GO 33885
33824: LD_INT 2
33826: DOUBLE
33827: EQUAL
33828: IFTRUE 33832
33830: GO 33854
33832: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
33833: LD_VAR 0 1
33837: PPUSH
33838: LD_VAR 0 6
33842: PPUSH
33843: LD_VAR 0 7
33847: PPUSH
33848: CALL_OW 153
33852: GO 33885
33854: LD_INT 3
33856: DOUBLE
33857: EQUAL
33858: IFTRUE 33862
33860: GO 33884
33862: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
33863: LD_VAR 0 1
33867: PPUSH
33868: LD_VAR 0 6
33872: PPUSH
33873: LD_VAR 0 7
33877: PPUSH
33878: CALL_OW 154
33882: GO 33885
33884: POP
// end ;
33885: LD_VAR 0 2
33889: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
33890: LD_INT 0
33892: PPUSH
33893: PPUSH
33894: PPUSH
33895: PPUSH
33896: PPUSH
33897: PPUSH
// if not unit or not building then
33898: LD_VAR 0 1
33902: NOT
33903: PUSH
33904: LD_VAR 0 2
33908: NOT
33909: OR
33910: IFFALSE 33914
// exit ;
33912: GO 34072
// x := GetX ( building ) ;
33914: LD_ADDR_VAR 0 5
33918: PUSH
33919: LD_VAR 0 2
33923: PPUSH
33924: CALL_OW 250
33928: ST_TO_ADDR
// y := GetY ( building ) ;
33929: LD_ADDR_VAR 0 6
33933: PUSH
33934: LD_VAR 0 2
33938: PPUSH
33939: CALL_OW 251
33943: ST_TO_ADDR
// for i = 0 to 5 do
33944: LD_ADDR_VAR 0 4
33948: PUSH
33949: DOUBLE
33950: LD_INT 0
33952: DEC
33953: ST_TO_ADDR
33954: LD_INT 5
33956: PUSH
33957: FOR_TO
33958: IFFALSE 34070
// begin _x := ShiftX ( x , i , 3 ) ;
33960: LD_ADDR_VAR 0 7
33964: PUSH
33965: LD_VAR 0 5
33969: PPUSH
33970: LD_VAR 0 4
33974: PPUSH
33975: LD_INT 3
33977: PPUSH
33978: CALL_OW 272
33982: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
33983: LD_ADDR_VAR 0 8
33987: PUSH
33988: LD_VAR 0 6
33992: PPUSH
33993: LD_VAR 0 4
33997: PPUSH
33998: LD_INT 3
34000: PPUSH
34001: CALL_OW 273
34005: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
34006: LD_VAR 0 7
34010: PPUSH
34011: LD_VAR 0 8
34015: PPUSH
34016: CALL_OW 488
34020: NOT
34021: IFFALSE 34025
// continue ;
34023: GO 33957
// if HexInfo ( _x , _y ) = 0 then
34025: LD_VAR 0 7
34029: PPUSH
34030: LD_VAR 0 8
34034: PPUSH
34035: CALL_OW 428
34039: PUSH
34040: LD_INT 0
34042: EQUAL
34043: IFFALSE 34068
// begin ComMoveXY ( unit , _x , _y ) ;
34045: LD_VAR 0 1
34049: PPUSH
34050: LD_VAR 0 7
34054: PPUSH
34055: LD_VAR 0 8
34059: PPUSH
34060: CALL_OW 111
// exit ;
34064: POP
34065: POP
34066: GO 34072
// end ; end ;
34068: GO 33957
34070: POP
34071: POP
// end ;
34072: LD_VAR 0 3
34076: RET
// export function ScanBase ( side , base_area ) ; begin
34077: LD_INT 0
34079: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
34080: LD_ADDR_VAR 0 3
34084: PUSH
34085: LD_VAR 0 2
34089: PPUSH
34090: LD_INT 81
34092: PUSH
34093: LD_VAR 0 1
34097: PUSH
34098: EMPTY
34099: LIST
34100: LIST
34101: PPUSH
34102: CALL_OW 70
34106: ST_TO_ADDR
// end ;
34107: LD_VAR 0 3
34111: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
34112: LD_INT 0
34114: PPUSH
34115: PPUSH
34116: PPUSH
34117: PPUSH
// result := false ;
34118: LD_ADDR_VAR 0 2
34122: PUSH
34123: LD_INT 0
34125: ST_TO_ADDR
// side := GetSide ( unit ) ;
34126: LD_ADDR_VAR 0 3
34130: PUSH
34131: LD_VAR 0 1
34135: PPUSH
34136: CALL_OW 255
34140: ST_TO_ADDR
// nat := GetNation ( unit ) ;
34141: LD_ADDR_VAR 0 4
34145: PUSH
34146: LD_VAR 0 1
34150: PPUSH
34151: CALL_OW 248
34155: ST_TO_ADDR
// case nat of 1 :
34156: LD_VAR 0 4
34160: PUSH
34161: LD_INT 1
34163: DOUBLE
34164: EQUAL
34165: IFTRUE 34169
34167: GO 34180
34169: POP
// tech := tech_lassight ; 2 :
34170: LD_ADDR_VAR 0 5
34174: PUSH
34175: LD_INT 12
34177: ST_TO_ADDR
34178: GO 34219
34180: LD_INT 2
34182: DOUBLE
34183: EQUAL
34184: IFTRUE 34188
34186: GO 34199
34188: POP
// tech := tech_mortar ; 3 :
34189: LD_ADDR_VAR 0 5
34193: PUSH
34194: LD_INT 41
34196: ST_TO_ADDR
34197: GO 34219
34199: LD_INT 3
34201: DOUBLE
34202: EQUAL
34203: IFTRUE 34207
34205: GO 34218
34207: POP
// tech := tech_bazooka ; end ;
34208: LD_ADDR_VAR 0 5
34212: PUSH
34213: LD_INT 44
34215: ST_TO_ADDR
34216: GO 34219
34218: POP
// if Researched ( side , tech ) then
34219: LD_VAR 0 3
34223: PPUSH
34224: LD_VAR 0 5
34228: PPUSH
34229: CALL_OW 325
34233: IFFALSE 34260
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
34235: LD_ADDR_VAR 0 2
34239: PUSH
34240: LD_INT 5
34242: PUSH
34243: LD_INT 8
34245: PUSH
34246: LD_INT 9
34248: PUSH
34249: EMPTY
34250: LIST
34251: LIST
34252: LIST
34253: PUSH
34254: LD_VAR 0 4
34258: ARRAY
34259: ST_TO_ADDR
// end ;
34260: LD_VAR 0 2
34264: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
34265: LD_INT 0
34267: PPUSH
34268: PPUSH
34269: PPUSH
// if not mines then
34270: LD_VAR 0 2
34274: NOT
34275: IFFALSE 34279
// exit ;
34277: GO 34423
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34279: LD_ADDR_VAR 0 5
34283: PUSH
34284: LD_INT 81
34286: PUSH
34287: LD_VAR 0 1
34291: PUSH
34292: EMPTY
34293: LIST
34294: LIST
34295: PUSH
34296: LD_INT 3
34298: PUSH
34299: LD_INT 21
34301: PUSH
34302: LD_INT 3
34304: PUSH
34305: EMPTY
34306: LIST
34307: LIST
34308: PUSH
34309: EMPTY
34310: LIST
34311: LIST
34312: PUSH
34313: EMPTY
34314: LIST
34315: LIST
34316: PPUSH
34317: CALL_OW 69
34321: ST_TO_ADDR
// for i in mines do
34322: LD_ADDR_VAR 0 4
34326: PUSH
34327: LD_VAR 0 2
34331: PUSH
34332: FOR_IN
34333: IFFALSE 34421
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
34335: LD_VAR 0 4
34339: PUSH
34340: LD_INT 1
34342: ARRAY
34343: PPUSH
34344: LD_VAR 0 4
34348: PUSH
34349: LD_INT 2
34351: ARRAY
34352: PPUSH
34353: CALL_OW 458
34357: NOT
34358: IFFALSE 34362
// continue ;
34360: GO 34332
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
34362: LD_VAR 0 4
34366: PUSH
34367: LD_INT 1
34369: ARRAY
34370: PPUSH
34371: LD_VAR 0 4
34375: PUSH
34376: LD_INT 2
34378: ARRAY
34379: PPUSH
34380: CALL_OW 428
34384: PUSH
34385: LD_VAR 0 5
34389: IN
34390: IFFALSE 34419
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
34392: LD_VAR 0 4
34396: PUSH
34397: LD_INT 1
34399: ARRAY
34400: PPUSH
34401: LD_VAR 0 4
34405: PUSH
34406: LD_INT 2
34408: ARRAY
34409: PPUSH
34410: LD_VAR 0 1
34414: PPUSH
34415: CALL_OW 456
// end ;
34419: GO 34332
34421: POP
34422: POP
// end ;
34423: LD_VAR 0 3
34427: RET
// export function Count ( array ) ; var i ; begin
34428: LD_INT 0
34430: PPUSH
34431: PPUSH
// result := 0 ;
34432: LD_ADDR_VAR 0 2
34436: PUSH
34437: LD_INT 0
34439: ST_TO_ADDR
// for i in array do
34440: LD_ADDR_VAR 0 3
34444: PUSH
34445: LD_VAR 0 1
34449: PUSH
34450: FOR_IN
34451: IFFALSE 34475
// if i then
34453: LD_VAR 0 3
34457: IFFALSE 34473
// result := result + 1 ;
34459: LD_ADDR_VAR 0 2
34463: PUSH
34464: LD_VAR 0 2
34468: PUSH
34469: LD_INT 1
34471: PLUS
34472: ST_TO_ADDR
34473: GO 34450
34475: POP
34476: POP
// end ;
34477: LD_VAR 0 2
34481: RET
// export function IsEmpty ( building ) ; begin
34482: LD_INT 0
34484: PPUSH
// if not building then
34485: LD_VAR 0 1
34489: NOT
34490: IFFALSE 34494
// exit ;
34492: GO 34537
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
34494: LD_ADDR_VAR 0 2
34498: PUSH
34499: LD_VAR 0 1
34503: PUSH
34504: LD_INT 22
34506: PUSH
34507: LD_VAR 0 1
34511: PPUSH
34512: CALL_OW 255
34516: PUSH
34517: EMPTY
34518: LIST
34519: LIST
34520: PUSH
34521: LD_INT 58
34523: PUSH
34524: EMPTY
34525: LIST
34526: PUSH
34527: EMPTY
34528: LIST
34529: LIST
34530: PPUSH
34531: CALL_OW 69
34535: IN
34536: ST_TO_ADDR
// end ;
34537: LD_VAR 0 2
34541: RET
// export function IsNotFull ( building ) ; var places ; begin
34542: LD_INT 0
34544: PPUSH
34545: PPUSH
// if not building then
34546: LD_VAR 0 1
34550: NOT
34551: IFFALSE 34555
// exit ;
34553: GO 34726
// result := false ;
34555: LD_ADDR_VAR 0 2
34559: PUSH
34560: LD_INT 0
34562: ST_TO_ADDR
// places := 0 ;
34563: LD_ADDR_VAR 0 3
34567: PUSH
34568: LD_INT 0
34570: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
34571: LD_VAR 0 1
34575: PPUSH
34576: CALL_OW 266
34580: PUSH
34581: LD_INT 0
34583: DOUBLE
34584: EQUAL
34585: IFTRUE 34643
34587: LD_INT 1
34589: DOUBLE
34590: EQUAL
34591: IFTRUE 34643
34593: LD_INT 6
34595: DOUBLE
34596: EQUAL
34597: IFTRUE 34643
34599: LD_INT 7
34601: DOUBLE
34602: EQUAL
34603: IFTRUE 34643
34605: LD_INT 8
34607: DOUBLE
34608: EQUAL
34609: IFTRUE 34643
34611: LD_INT 4
34613: DOUBLE
34614: EQUAL
34615: IFTRUE 34643
34617: LD_INT 5
34619: DOUBLE
34620: EQUAL
34621: IFTRUE 34643
34623: LD_INT 2
34625: DOUBLE
34626: EQUAL
34627: IFTRUE 34643
34629: LD_INT 3
34631: DOUBLE
34632: EQUAL
34633: IFTRUE 34643
34635: LD_INT 35
34637: DOUBLE
34638: EQUAL
34639: IFTRUE 34643
34641: GO 34654
34643: POP
// places := 6 ; b_bunker , b_breastwork :
34644: LD_ADDR_VAR 0 3
34648: PUSH
34649: LD_INT 6
34651: ST_TO_ADDR
34652: GO 34699
34654: LD_INT 32
34656: DOUBLE
34657: EQUAL
34658: IFTRUE 34668
34660: LD_INT 31
34662: DOUBLE
34663: EQUAL
34664: IFTRUE 34668
34666: GO 34679
34668: POP
// places := 1 ; b_control_tower :
34669: LD_ADDR_VAR 0 3
34673: PUSH
34674: LD_INT 1
34676: ST_TO_ADDR
34677: GO 34699
34679: LD_INT 36
34681: DOUBLE
34682: EQUAL
34683: IFTRUE 34687
34685: GO 34698
34687: POP
// places := 3 ; end ;
34688: LD_ADDR_VAR 0 3
34692: PUSH
34693: LD_INT 3
34695: ST_TO_ADDR
34696: GO 34699
34698: POP
// if places then
34699: LD_VAR 0 3
34703: IFFALSE 34726
// result := UnitsInside ( building ) < places ;
34705: LD_ADDR_VAR 0 2
34709: PUSH
34710: LD_VAR 0 1
34714: PPUSH
34715: CALL_OW 313
34719: PUSH
34720: LD_VAR 0 3
34724: LESS
34725: ST_TO_ADDR
// end ;
34726: LD_VAR 0 2
34730: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
34731: LD_INT 0
34733: PPUSH
34734: PPUSH
34735: PPUSH
34736: PPUSH
// tmp := [ ] ;
34737: LD_ADDR_VAR 0 3
34741: PUSH
34742: EMPTY
34743: ST_TO_ADDR
// list := [ ] ;
34744: LD_ADDR_VAR 0 5
34748: PUSH
34749: EMPTY
34750: ST_TO_ADDR
// for i = 16 to 25 do
34751: LD_ADDR_VAR 0 4
34755: PUSH
34756: DOUBLE
34757: LD_INT 16
34759: DEC
34760: ST_TO_ADDR
34761: LD_INT 25
34763: PUSH
34764: FOR_TO
34765: IFFALSE 34838
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
34767: LD_ADDR_VAR 0 3
34771: PUSH
34772: LD_VAR 0 3
34776: PUSH
34777: LD_INT 22
34779: PUSH
34780: LD_VAR 0 1
34784: PPUSH
34785: CALL_OW 255
34789: PUSH
34790: EMPTY
34791: LIST
34792: LIST
34793: PUSH
34794: LD_INT 91
34796: PUSH
34797: LD_VAR 0 1
34801: PUSH
34802: LD_INT 6
34804: PUSH
34805: EMPTY
34806: LIST
34807: LIST
34808: LIST
34809: PUSH
34810: LD_INT 30
34812: PUSH
34813: LD_VAR 0 4
34817: PUSH
34818: EMPTY
34819: LIST
34820: LIST
34821: PUSH
34822: EMPTY
34823: LIST
34824: LIST
34825: LIST
34826: PUSH
34827: EMPTY
34828: LIST
34829: PPUSH
34830: CALL_OW 69
34834: ADD
34835: ST_TO_ADDR
34836: GO 34764
34838: POP
34839: POP
// for i = 1 to tmp do
34840: LD_ADDR_VAR 0 4
34844: PUSH
34845: DOUBLE
34846: LD_INT 1
34848: DEC
34849: ST_TO_ADDR
34850: LD_VAR 0 3
34854: PUSH
34855: FOR_TO
34856: IFFALSE 34944
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
34858: LD_ADDR_VAR 0 5
34862: PUSH
34863: LD_VAR 0 5
34867: PUSH
34868: LD_VAR 0 3
34872: PUSH
34873: LD_VAR 0 4
34877: ARRAY
34878: PPUSH
34879: CALL_OW 266
34883: PUSH
34884: LD_VAR 0 3
34888: PUSH
34889: LD_VAR 0 4
34893: ARRAY
34894: PPUSH
34895: CALL_OW 250
34899: PUSH
34900: LD_VAR 0 3
34904: PUSH
34905: LD_VAR 0 4
34909: ARRAY
34910: PPUSH
34911: CALL_OW 251
34915: PUSH
34916: LD_VAR 0 3
34920: PUSH
34921: LD_VAR 0 4
34925: ARRAY
34926: PPUSH
34927: CALL_OW 254
34931: PUSH
34932: EMPTY
34933: LIST
34934: LIST
34935: LIST
34936: LIST
34937: PUSH
34938: EMPTY
34939: LIST
34940: ADD
34941: ST_TO_ADDR
34942: GO 34855
34944: POP
34945: POP
// result := list ;
34946: LD_ADDR_VAR 0 2
34950: PUSH
34951: LD_VAR 0 5
34955: ST_TO_ADDR
// end ;
34956: LD_VAR 0 2
34960: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
34961: LD_INT 0
34963: PPUSH
34964: PPUSH
34965: PPUSH
34966: PPUSH
34967: PPUSH
34968: PPUSH
34969: PPUSH
// if not factory then
34970: LD_VAR 0 1
34974: NOT
34975: IFFALSE 34979
// exit ;
34977: GO 35572
// if control = control_apeman then
34979: LD_VAR 0 4
34983: PUSH
34984: LD_INT 5
34986: EQUAL
34987: IFFALSE 35096
// begin tmp := UnitsInside ( factory ) ;
34989: LD_ADDR_VAR 0 8
34993: PUSH
34994: LD_VAR 0 1
34998: PPUSH
34999: CALL_OW 313
35003: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
35004: LD_VAR 0 8
35008: PPUSH
35009: LD_INT 25
35011: PUSH
35012: LD_INT 12
35014: PUSH
35015: EMPTY
35016: LIST
35017: LIST
35018: PPUSH
35019: CALL_OW 72
35023: NOT
35024: IFFALSE 35034
// control := control_manual ;
35026: LD_ADDR_VAR 0 4
35030: PUSH
35031: LD_INT 1
35033: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
35034: LD_ADDR_VAR 0 8
35038: PUSH
35039: LD_VAR 0 1
35043: PPUSH
35044: CALL 34731 0 1
35048: ST_TO_ADDR
// if tmp then
35049: LD_VAR 0 8
35053: IFFALSE 35096
// begin for i in tmp do
35055: LD_ADDR_VAR 0 7
35059: PUSH
35060: LD_VAR 0 8
35064: PUSH
35065: FOR_IN
35066: IFFALSE 35094
// if i [ 1 ] = b_ext_radio then
35068: LD_VAR 0 7
35072: PUSH
35073: LD_INT 1
35075: ARRAY
35076: PUSH
35077: LD_INT 22
35079: EQUAL
35080: IFFALSE 35092
// begin control := control_remote ;
35082: LD_ADDR_VAR 0 4
35086: PUSH
35087: LD_INT 2
35089: ST_TO_ADDR
// break ;
35090: GO 35094
// end ;
35092: GO 35065
35094: POP
35095: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
35096: LD_VAR 0 1
35100: PPUSH
35101: LD_VAR 0 2
35105: PPUSH
35106: LD_VAR 0 3
35110: PPUSH
35111: LD_VAR 0 4
35115: PPUSH
35116: LD_VAR 0 5
35120: PPUSH
35121: CALL_OW 448
35125: IFFALSE 35160
// begin result := [ chassis , engine , control , weapon ] ;
35127: LD_ADDR_VAR 0 6
35131: PUSH
35132: LD_VAR 0 2
35136: PUSH
35137: LD_VAR 0 3
35141: PUSH
35142: LD_VAR 0 4
35146: PUSH
35147: LD_VAR 0 5
35151: PUSH
35152: EMPTY
35153: LIST
35154: LIST
35155: LIST
35156: LIST
35157: ST_TO_ADDR
// exit ;
35158: GO 35572
// end ; _chassis := AvailableChassisList ( factory ) ;
35160: LD_ADDR_VAR 0 9
35164: PUSH
35165: LD_VAR 0 1
35169: PPUSH
35170: CALL_OW 475
35174: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
35175: LD_ADDR_VAR 0 11
35179: PUSH
35180: LD_VAR 0 1
35184: PPUSH
35185: CALL_OW 476
35189: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
35190: LD_ADDR_VAR 0 12
35194: PUSH
35195: LD_VAR 0 1
35199: PPUSH
35200: CALL_OW 477
35204: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
35205: LD_ADDR_VAR 0 10
35209: PUSH
35210: LD_VAR 0 1
35214: PPUSH
35215: CALL_OW 478
35219: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
35220: LD_VAR 0 9
35224: NOT
35225: PUSH
35226: LD_VAR 0 11
35230: NOT
35231: OR
35232: PUSH
35233: LD_VAR 0 12
35237: NOT
35238: OR
35239: PUSH
35240: LD_VAR 0 10
35244: NOT
35245: OR
35246: IFFALSE 35281
// begin result := [ chassis , engine , control , weapon ] ;
35248: LD_ADDR_VAR 0 6
35252: PUSH
35253: LD_VAR 0 2
35257: PUSH
35258: LD_VAR 0 3
35262: PUSH
35263: LD_VAR 0 4
35267: PUSH
35268: LD_VAR 0 5
35272: PUSH
35273: EMPTY
35274: LIST
35275: LIST
35276: LIST
35277: LIST
35278: ST_TO_ADDR
// exit ;
35279: GO 35572
// end ; if not chassis in _chassis then
35281: LD_VAR 0 2
35285: PUSH
35286: LD_VAR 0 9
35290: IN
35291: NOT
35292: IFFALSE 35318
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
35294: LD_ADDR_VAR 0 2
35298: PUSH
35299: LD_VAR 0 9
35303: PUSH
35304: LD_INT 1
35306: PPUSH
35307: LD_VAR 0 9
35311: PPUSH
35312: CALL_OW 12
35316: ARRAY
35317: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
35318: LD_VAR 0 2
35322: PPUSH
35323: LD_VAR 0 3
35327: PPUSH
35328: CALL 35577 0 2
35332: NOT
35333: IFFALSE 35392
// repeat engine := _engine [ 1 ] ;
35335: LD_ADDR_VAR 0 3
35339: PUSH
35340: LD_VAR 0 11
35344: PUSH
35345: LD_INT 1
35347: ARRAY
35348: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
35349: LD_ADDR_VAR 0 11
35353: PUSH
35354: LD_VAR 0 11
35358: PPUSH
35359: LD_INT 1
35361: PPUSH
35362: CALL_OW 3
35366: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
35367: LD_VAR 0 2
35371: PPUSH
35372: LD_VAR 0 3
35376: PPUSH
35377: CALL 35577 0 2
35381: PUSH
35382: LD_VAR 0 11
35386: PUSH
35387: EMPTY
35388: EQUAL
35389: OR
35390: IFFALSE 35335
// if not control in _control then
35392: LD_VAR 0 4
35396: PUSH
35397: LD_VAR 0 12
35401: IN
35402: NOT
35403: IFFALSE 35429
// control := _control [ rand ( 1 , _control ) ] ;
35405: LD_ADDR_VAR 0 4
35409: PUSH
35410: LD_VAR 0 12
35414: PUSH
35415: LD_INT 1
35417: PPUSH
35418: LD_VAR 0 12
35422: PPUSH
35423: CALL_OW 12
35427: ARRAY
35428: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
35429: LD_VAR 0 2
35433: PPUSH
35434: LD_VAR 0 5
35438: PPUSH
35439: CALL 35797 0 2
35443: NOT
35444: IFFALSE 35503
// repeat weapon := _weapon [ 1 ] ;
35446: LD_ADDR_VAR 0 5
35450: PUSH
35451: LD_VAR 0 10
35455: PUSH
35456: LD_INT 1
35458: ARRAY
35459: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
35460: LD_ADDR_VAR 0 10
35464: PUSH
35465: LD_VAR 0 10
35469: PPUSH
35470: LD_INT 1
35472: PPUSH
35473: CALL_OW 3
35477: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
35478: LD_VAR 0 2
35482: PPUSH
35483: LD_VAR 0 5
35487: PPUSH
35488: CALL 35797 0 2
35492: PUSH
35493: LD_VAR 0 10
35497: PUSH
35498: EMPTY
35499: EQUAL
35500: OR
35501: IFFALSE 35446
// result := [ ] ;
35503: LD_ADDR_VAR 0 6
35507: PUSH
35508: EMPTY
35509: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
35510: LD_VAR 0 1
35514: PPUSH
35515: LD_VAR 0 2
35519: PPUSH
35520: LD_VAR 0 3
35524: PPUSH
35525: LD_VAR 0 4
35529: PPUSH
35530: LD_VAR 0 5
35534: PPUSH
35535: CALL_OW 448
35539: IFFALSE 35572
// result := [ chassis , engine , control , weapon ] ;
35541: LD_ADDR_VAR 0 6
35545: PUSH
35546: LD_VAR 0 2
35550: PUSH
35551: LD_VAR 0 3
35555: PUSH
35556: LD_VAR 0 4
35560: PUSH
35561: LD_VAR 0 5
35565: PUSH
35566: EMPTY
35567: LIST
35568: LIST
35569: LIST
35570: LIST
35571: ST_TO_ADDR
// end ;
35572: LD_VAR 0 6
35576: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
35577: LD_INT 0
35579: PPUSH
// if not chassis or not engine then
35580: LD_VAR 0 1
35584: NOT
35585: PUSH
35586: LD_VAR 0 2
35590: NOT
35591: OR
35592: IFFALSE 35596
// exit ;
35594: GO 35792
// case engine of engine_solar :
35596: LD_VAR 0 2
35600: PUSH
35601: LD_INT 2
35603: DOUBLE
35604: EQUAL
35605: IFTRUE 35609
35607: GO 35647
35609: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
35610: LD_ADDR_VAR 0 3
35614: PUSH
35615: LD_INT 11
35617: PUSH
35618: LD_INT 12
35620: PUSH
35621: LD_INT 13
35623: PUSH
35624: LD_INT 14
35626: PUSH
35627: LD_INT 1
35629: PUSH
35630: LD_INT 2
35632: PUSH
35633: LD_INT 3
35635: PUSH
35636: EMPTY
35637: LIST
35638: LIST
35639: LIST
35640: LIST
35641: LIST
35642: LIST
35643: LIST
35644: ST_TO_ADDR
35645: GO 35776
35647: LD_INT 1
35649: DOUBLE
35650: EQUAL
35651: IFTRUE 35655
35653: GO 35717
35655: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
35656: LD_ADDR_VAR 0 3
35660: PUSH
35661: LD_INT 11
35663: PUSH
35664: LD_INT 12
35666: PUSH
35667: LD_INT 13
35669: PUSH
35670: LD_INT 14
35672: PUSH
35673: LD_INT 1
35675: PUSH
35676: LD_INT 2
35678: PUSH
35679: LD_INT 3
35681: PUSH
35682: LD_INT 4
35684: PUSH
35685: LD_INT 5
35687: PUSH
35688: LD_INT 21
35690: PUSH
35691: LD_INT 23
35693: PUSH
35694: LD_INT 22
35696: PUSH
35697: LD_INT 24
35699: PUSH
35700: EMPTY
35701: LIST
35702: LIST
35703: LIST
35704: LIST
35705: LIST
35706: LIST
35707: LIST
35708: LIST
35709: LIST
35710: LIST
35711: LIST
35712: LIST
35713: LIST
35714: ST_TO_ADDR
35715: GO 35776
35717: LD_INT 3
35719: DOUBLE
35720: EQUAL
35721: IFTRUE 35725
35723: GO 35775
35725: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
35726: LD_ADDR_VAR 0 3
35730: PUSH
35731: LD_INT 13
35733: PUSH
35734: LD_INT 14
35736: PUSH
35737: LD_INT 2
35739: PUSH
35740: LD_INT 3
35742: PUSH
35743: LD_INT 4
35745: PUSH
35746: LD_INT 5
35748: PUSH
35749: LD_INT 21
35751: PUSH
35752: LD_INT 22
35754: PUSH
35755: LD_INT 23
35757: PUSH
35758: LD_INT 24
35760: PUSH
35761: EMPTY
35762: LIST
35763: LIST
35764: LIST
35765: LIST
35766: LIST
35767: LIST
35768: LIST
35769: LIST
35770: LIST
35771: LIST
35772: ST_TO_ADDR
35773: GO 35776
35775: POP
// result := ( chassis in result ) ;
35776: LD_ADDR_VAR 0 3
35780: PUSH
35781: LD_VAR 0 1
35785: PUSH
35786: LD_VAR 0 3
35790: IN
35791: ST_TO_ADDR
// end ;
35792: LD_VAR 0 3
35796: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
35797: LD_INT 0
35799: PPUSH
// if not chassis or not weapon then
35800: LD_VAR 0 1
35804: NOT
35805: PUSH
35806: LD_VAR 0 2
35810: NOT
35811: OR
35812: IFFALSE 35816
// exit ;
35814: GO 36876
// case weapon of us_machine_gun :
35816: LD_VAR 0 2
35820: PUSH
35821: LD_INT 2
35823: DOUBLE
35824: EQUAL
35825: IFTRUE 35829
35827: GO 35859
35829: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
35830: LD_ADDR_VAR 0 3
35834: PUSH
35835: LD_INT 1
35837: PUSH
35838: LD_INT 2
35840: PUSH
35841: LD_INT 3
35843: PUSH
35844: LD_INT 4
35846: PUSH
35847: LD_INT 5
35849: PUSH
35850: EMPTY
35851: LIST
35852: LIST
35853: LIST
35854: LIST
35855: LIST
35856: ST_TO_ADDR
35857: GO 36860
35859: LD_INT 3
35861: DOUBLE
35862: EQUAL
35863: IFTRUE 35867
35865: GO 35897
35867: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
35868: LD_ADDR_VAR 0 3
35872: PUSH
35873: LD_INT 1
35875: PUSH
35876: LD_INT 2
35878: PUSH
35879: LD_INT 3
35881: PUSH
35882: LD_INT 4
35884: PUSH
35885: LD_INT 5
35887: PUSH
35888: EMPTY
35889: LIST
35890: LIST
35891: LIST
35892: LIST
35893: LIST
35894: ST_TO_ADDR
35895: GO 36860
35897: LD_INT 11
35899: DOUBLE
35900: EQUAL
35901: IFTRUE 35905
35903: GO 35935
35905: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
35906: LD_ADDR_VAR 0 3
35910: PUSH
35911: LD_INT 1
35913: PUSH
35914: LD_INT 2
35916: PUSH
35917: LD_INT 3
35919: PUSH
35920: LD_INT 4
35922: PUSH
35923: LD_INT 5
35925: PUSH
35926: EMPTY
35927: LIST
35928: LIST
35929: LIST
35930: LIST
35931: LIST
35932: ST_TO_ADDR
35933: GO 36860
35935: LD_INT 4
35937: DOUBLE
35938: EQUAL
35939: IFTRUE 35943
35941: GO 35969
35943: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
35944: LD_ADDR_VAR 0 3
35948: PUSH
35949: LD_INT 2
35951: PUSH
35952: LD_INT 3
35954: PUSH
35955: LD_INT 4
35957: PUSH
35958: LD_INT 5
35960: PUSH
35961: EMPTY
35962: LIST
35963: LIST
35964: LIST
35965: LIST
35966: ST_TO_ADDR
35967: GO 36860
35969: LD_INT 5
35971: DOUBLE
35972: EQUAL
35973: IFTRUE 35977
35975: GO 36003
35977: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
35978: LD_ADDR_VAR 0 3
35982: PUSH
35983: LD_INT 2
35985: PUSH
35986: LD_INT 3
35988: PUSH
35989: LD_INT 4
35991: PUSH
35992: LD_INT 5
35994: PUSH
35995: EMPTY
35996: LIST
35997: LIST
35998: LIST
35999: LIST
36000: ST_TO_ADDR
36001: GO 36860
36003: LD_INT 9
36005: DOUBLE
36006: EQUAL
36007: IFTRUE 36011
36009: GO 36037
36011: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
36012: LD_ADDR_VAR 0 3
36016: PUSH
36017: LD_INT 2
36019: PUSH
36020: LD_INT 3
36022: PUSH
36023: LD_INT 4
36025: PUSH
36026: LD_INT 5
36028: PUSH
36029: EMPTY
36030: LIST
36031: LIST
36032: LIST
36033: LIST
36034: ST_TO_ADDR
36035: GO 36860
36037: LD_INT 7
36039: DOUBLE
36040: EQUAL
36041: IFTRUE 36045
36043: GO 36071
36045: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
36046: LD_ADDR_VAR 0 3
36050: PUSH
36051: LD_INT 2
36053: PUSH
36054: LD_INT 3
36056: PUSH
36057: LD_INT 4
36059: PUSH
36060: LD_INT 5
36062: PUSH
36063: EMPTY
36064: LIST
36065: LIST
36066: LIST
36067: LIST
36068: ST_TO_ADDR
36069: GO 36860
36071: LD_INT 12
36073: DOUBLE
36074: EQUAL
36075: IFTRUE 36079
36077: GO 36105
36079: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
36080: LD_ADDR_VAR 0 3
36084: PUSH
36085: LD_INT 2
36087: PUSH
36088: LD_INT 3
36090: PUSH
36091: LD_INT 4
36093: PUSH
36094: LD_INT 5
36096: PUSH
36097: EMPTY
36098: LIST
36099: LIST
36100: LIST
36101: LIST
36102: ST_TO_ADDR
36103: GO 36860
36105: LD_INT 13
36107: DOUBLE
36108: EQUAL
36109: IFTRUE 36113
36111: GO 36139
36113: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
36114: LD_ADDR_VAR 0 3
36118: PUSH
36119: LD_INT 2
36121: PUSH
36122: LD_INT 3
36124: PUSH
36125: LD_INT 4
36127: PUSH
36128: LD_INT 5
36130: PUSH
36131: EMPTY
36132: LIST
36133: LIST
36134: LIST
36135: LIST
36136: ST_TO_ADDR
36137: GO 36860
36139: LD_INT 14
36141: DOUBLE
36142: EQUAL
36143: IFTRUE 36147
36145: GO 36165
36147: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
36148: LD_ADDR_VAR 0 3
36152: PUSH
36153: LD_INT 4
36155: PUSH
36156: LD_INT 5
36158: PUSH
36159: EMPTY
36160: LIST
36161: LIST
36162: ST_TO_ADDR
36163: GO 36860
36165: LD_INT 6
36167: DOUBLE
36168: EQUAL
36169: IFTRUE 36173
36171: GO 36191
36173: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
36174: LD_ADDR_VAR 0 3
36178: PUSH
36179: LD_INT 4
36181: PUSH
36182: LD_INT 5
36184: PUSH
36185: EMPTY
36186: LIST
36187: LIST
36188: ST_TO_ADDR
36189: GO 36860
36191: LD_INT 10
36193: DOUBLE
36194: EQUAL
36195: IFTRUE 36199
36197: GO 36217
36199: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
36200: LD_ADDR_VAR 0 3
36204: PUSH
36205: LD_INT 4
36207: PUSH
36208: LD_INT 5
36210: PUSH
36211: EMPTY
36212: LIST
36213: LIST
36214: ST_TO_ADDR
36215: GO 36860
36217: LD_INT 22
36219: DOUBLE
36220: EQUAL
36221: IFTRUE 36225
36223: GO 36251
36225: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
36226: LD_ADDR_VAR 0 3
36230: PUSH
36231: LD_INT 11
36233: PUSH
36234: LD_INT 12
36236: PUSH
36237: LD_INT 13
36239: PUSH
36240: LD_INT 14
36242: PUSH
36243: EMPTY
36244: LIST
36245: LIST
36246: LIST
36247: LIST
36248: ST_TO_ADDR
36249: GO 36860
36251: LD_INT 23
36253: DOUBLE
36254: EQUAL
36255: IFTRUE 36259
36257: GO 36285
36259: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
36260: LD_ADDR_VAR 0 3
36264: PUSH
36265: LD_INT 11
36267: PUSH
36268: LD_INT 12
36270: PUSH
36271: LD_INT 13
36273: PUSH
36274: LD_INT 14
36276: PUSH
36277: EMPTY
36278: LIST
36279: LIST
36280: LIST
36281: LIST
36282: ST_TO_ADDR
36283: GO 36860
36285: LD_INT 24
36287: DOUBLE
36288: EQUAL
36289: IFTRUE 36293
36291: GO 36319
36293: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
36294: LD_ADDR_VAR 0 3
36298: PUSH
36299: LD_INT 11
36301: PUSH
36302: LD_INT 12
36304: PUSH
36305: LD_INT 13
36307: PUSH
36308: LD_INT 14
36310: PUSH
36311: EMPTY
36312: LIST
36313: LIST
36314: LIST
36315: LIST
36316: ST_TO_ADDR
36317: GO 36860
36319: LD_INT 30
36321: DOUBLE
36322: EQUAL
36323: IFTRUE 36327
36325: GO 36353
36327: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
36328: LD_ADDR_VAR 0 3
36332: PUSH
36333: LD_INT 11
36335: PUSH
36336: LD_INT 12
36338: PUSH
36339: LD_INT 13
36341: PUSH
36342: LD_INT 14
36344: PUSH
36345: EMPTY
36346: LIST
36347: LIST
36348: LIST
36349: LIST
36350: ST_TO_ADDR
36351: GO 36860
36353: LD_INT 25
36355: DOUBLE
36356: EQUAL
36357: IFTRUE 36361
36359: GO 36379
36361: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
36362: LD_ADDR_VAR 0 3
36366: PUSH
36367: LD_INT 13
36369: PUSH
36370: LD_INT 14
36372: PUSH
36373: EMPTY
36374: LIST
36375: LIST
36376: ST_TO_ADDR
36377: GO 36860
36379: LD_INT 27
36381: DOUBLE
36382: EQUAL
36383: IFTRUE 36387
36385: GO 36405
36387: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
36388: LD_ADDR_VAR 0 3
36392: PUSH
36393: LD_INT 13
36395: PUSH
36396: LD_INT 14
36398: PUSH
36399: EMPTY
36400: LIST
36401: LIST
36402: ST_TO_ADDR
36403: GO 36860
36405: LD_INT 92
36407: DOUBLE
36408: EQUAL
36409: IFTRUE 36413
36411: GO 36439
36413: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
36414: LD_ADDR_VAR 0 3
36418: PUSH
36419: LD_INT 11
36421: PUSH
36422: LD_INT 12
36424: PUSH
36425: LD_INT 13
36427: PUSH
36428: LD_INT 14
36430: PUSH
36431: EMPTY
36432: LIST
36433: LIST
36434: LIST
36435: LIST
36436: ST_TO_ADDR
36437: GO 36860
36439: LD_INT 28
36441: DOUBLE
36442: EQUAL
36443: IFTRUE 36447
36445: GO 36465
36447: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
36448: LD_ADDR_VAR 0 3
36452: PUSH
36453: LD_INT 13
36455: PUSH
36456: LD_INT 14
36458: PUSH
36459: EMPTY
36460: LIST
36461: LIST
36462: ST_TO_ADDR
36463: GO 36860
36465: LD_INT 29
36467: DOUBLE
36468: EQUAL
36469: IFTRUE 36473
36471: GO 36491
36473: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
36474: LD_ADDR_VAR 0 3
36478: PUSH
36479: LD_INT 13
36481: PUSH
36482: LD_INT 14
36484: PUSH
36485: EMPTY
36486: LIST
36487: LIST
36488: ST_TO_ADDR
36489: GO 36860
36491: LD_INT 31
36493: DOUBLE
36494: EQUAL
36495: IFTRUE 36499
36497: GO 36517
36499: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
36500: LD_ADDR_VAR 0 3
36504: PUSH
36505: LD_INT 13
36507: PUSH
36508: LD_INT 14
36510: PUSH
36511: EMPTY
36512: LIST
36513: LIST
36514: ST_TO_ADDR
36515: GO 36860
36517: LD_INT 26
36519: DOUBLE
36520: EQUAL
36521: IFTRUE 36525
36523: GO 36543
36525: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
36526: LD_ADDR_VAR 0 3
36530: PUSH
36531: LD_INT 13
36533: PUSH
36534: LD_INT 14
36536: PUSH
36537: EMPTY
36538: LIST
36539: LIST
36540: ST_TO_ADDR
36541: GO 36860
36543: LD_INT 42
36545: DOUBLE
36546: EQUAL
36547: IFTRUE 36551
36549: GO 36577
36551: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
36552: LD_ADDR_VAR 0 3
36556: PUSH
36557: LD_INT 21
36559: PUSH
36560: LD_INT 22
36562: PUSH
36563: LD_INT 23
36565: PUSH
36566: LD_INT 24
36568: PUSH
36569: EMPTY
36570: LIST
36571: LIST
36572: LIST
36573: LIST
36574: ST_TO_ADDR
36575: GO 36860
36577: LD_INT 43
36579: DOUBLE
36580: EQUAL
36581: IFTRUE 36585
36583: GO 36611
36585: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
36586: LD_ADDR_VAR 0 3
36590: PUSH
36591: LD_INT 21
36593: PUSH
36594: LD_INT 22
36596: PUSH
36597: LD_INT 23
36599: PUSH
36600: LD_INT 24
36602: PUSH
36603: EMPTY
36604: LIST
36605: LIST
36606: LIST
36607: LIST
36608: ST_TO_ADDR
36609: GO 36860
36611: LD_INT 44
36613: DOUBLE
36614: EQUAL
36615: IFTRUE 36619
36617: GO 36645
36619: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
36620: LD_ADDR_VAR 0 3
36624: PUSH
36625: LD_INT 21
36627: PUSH
36628: LD_INT 22
36630: PUSH
36631: LD_INT 23
36633: PUSH
36634: LD_INT 24
36636: PUSH
36637: EMPTY
36638: LIST
36639: LIST
36640: LIST
36641: LIST
36642: ST_TO_ADDR
36643: GO 36860
36645: LD_INT 45
36647: DOUBLE
36648: EQUAL
36649: IFTRUE 36653
36651: GO 36679
36653: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
36654: LD_ADDR_VAR 0 3
36658: PUSH
36659: LD_INT 21
36661: PUSH
36662: LD_INT 22
36664: PUSH
36665: LD_INT 23
36667: PUSH
36668: LD_INT 24
36670: PUSH
36671: EMPTY
36672: LIST
36673: LIST
36674: LIST
36675: LIST
36676: ST_TO_ADDR
36677: GO 36860
36679: LD_INT 49
36681: DOUBLE
36682: EQUAL
36683: IFTRUE 36687
36685: GO 36713
36687: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
36688: LD_ADDR_VAR 0 3
36692: PUSH
36693: LD_INT 21
36695: PUSH
36696: LD_INT 22
36698: PUSH
36699: LD_INT 23
36701: PUSH
36702: LD_INT 24
36704: PUSH
36705: EMPTY
36706: LIST
36707: LIST
36708: LIST
36709: LIST
36710: ST_TO_ADDR
36711: GO 36860
36713: LD_INT 51
36715: DOUBLE
36716: EQUAL
36717: IFTRUE 36721
36719: GO 36747
36721: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
36722: LD_ADDR_VAR 0 3
36726: PUSH
36727: LD_INT 21
36729: PUSH
36730: LD_INT 22
36732: PUSH
36733: LD_INT 23
36735: PUSH
36736: LD_INT 24
36738: PUSH
36739: EMPTY
36740: LIST
36741: LIST
36742: LIST
36743: LIST
36744: ST_TO_ADDR
36745: GO 36860
36747: LD_INT 52
36749: DOUBLE
36750: EQUAL
36751: IFTRUE 36755
36753: GO 36781
36755: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
36756: LD_ADDR_VAR 0 3
36760: PUSH
36761: LD_INT 21
36763: PUSH
36764: LD_INT 22
36766: PUSH
36767: LD_INT 23
36769: PUSH
36770: LD_INT 24
36772: PUSH
36773: EMPTY
36774: LIST
36775: LIST
36776: LIST
36777: LIST
36778: ST_TO_ADDR
36779: GO 36860
36781: LD_INT 53
36783: DOUBLE
36784: EQUAL
36785: IFTRUE 36789
36787: GO 36807
36789: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
36790: LD_ADDR_VAR 0 3
36794: PUSH
36795: LD_INT 23
36797: PUSH
36798: LD_INT 24
36800: PUSH
36801: EMPTY
36802: LIST
36803: LIST
36804: ST_TO_ADDR
36805: GO 36860
36807: LD_INT 46
36809: DOUBLE
36810: EQUAL
36811: IFTRUE 36815
36813: GO 36833
36815: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
36816: LD_ADDR_VAR 0 3
36820: PUSH
36821: LD_INT 23
36823: PUSH
36824: LD_INT 24
36826: PUSH
36827: EMPTY
36828: LIST
36829: LIST
36830: ST_TO_ADDR
36831: GO 36860
36833: LD_INT 47
36835: DOUBLE
36836: EQUAL
36837: IFTRUE 36841
36839: GO 36859
36841: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
36842: LD_ADDR_VAR 0 3
36846: PUSH
36847: LD_INT 23
36849: PUSH
36850: LD_INT 24
36852: PUSH
36853: EMPTY
36854: LIST
36855: LIST
36856: ST_TO_ADDR
36857: GO 36860
36859: POP
// result := ( chassis in result ) ;
36860: LD_ADDR_VAR 0 3
36864: PUSH
36865: LD_VAR 0 1
36869: PUSH
36870: LD_VAR 0 3
36874: IN
36875: ST_TO_ADDR
// end ;
36876: LD_VAR 0 3
36880: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
36881: LD_INT 0
36883: PPUSH
36884: PPUSH
36885: PPUSH
36886: PPUSH
36887: PPUSH
36888: PPUSH
36889: PPUSH
// result := array ;
36890: LD_ADDR_VAR 0 5
36894: PUSH
36895: LD_VAR 0 1
36899: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
36900: LD_VAR 0 1
36904: NOT
36905: PUSH
36906: LD_VAR 0 2
36910: NOT
36911: OR
36912: PUSH
36913: LD_VAR 0 3
36917: NOT
36918: OR
36919: PUSH
36920: LD_VAR 0 2
36924: PUSH
36925: LD_VAR 0 1
36929: GREATER
36930: OR
36931: PUSH
36932: LD_VAR 0 3
36936: PUSH
36937: LD_VAR 0 1
36941: GREATER
36942: OR
36943: IFFALSE 36947
// exit ;
36945: GO 37243
// if direction then
36947: LD_VAR 0 4
36951: IFFALSE 37015
// begin d := 1 ;
36953: LD_ADDR_VAR 0 9
36957: PUSH
36958: LD_INT 1
36960: ST_TO_ADDR
// if i_from > i_to then
36961: LD_VAR 0 2
36965: PUSH
36966: LD_VAR 0 3
36970: GREATER
36971: IFFALSE 36997
// length := ( array - i_from ) + i_to else
36973: LD_ADDR_VAR 0 11
36977: PUSH
36978: LD_VAR 0 1
36982: PUSH
36983: LD_VAR 0 2
36987: MINUS
36988: PUSH
36989: LD_VAR 0 3
36993: PLUS
36994: ST_TO_ADDR
36995: GO 37013
// length := i_to - i_from ;
36997: LD_ADDR_VAR 0 11
37001: PUSH
37002: LD_VAR 0 3
37006: PUSH
37007: LD_VAR 0 2
37011: MINUS
37012: ST_TO_ADDR
// end else
37013: GO 37076
// begin d := - 1 ;
37015: LD_ADDR_VAR 0 9
37019: PUSH
37020: LD_INT 1
37022: NEG
37023: ST_TO_ADDR
// if i_from > i_to then
37024: LD_VAR 0 2
37028: PUSH
37029: LD_VAR 0 3
37033: GREATER
37034: IFFALSE 37054
// length := i_from - i_to else
37036: LD_ADDR_VAR 0 11
37040: PUSH
37041: LD_VAR 0 2
37045: PUSH
37046: LD_VAR 0 3
37050: MINUS
37051: ST_TO_ADDR
37052: GO 37076
// length := ( array - i_to ) + i_from ;
37054: LD_ADDR_VAR 0 11
37058: PUSH
37059: LD_VAR 0 1
37063: PUSH
37064: LD_VAR 0 3
37068: MINUS
37069: PUSH
37070: LD_VAR 0 2
37074: PLUS
37075: ST_TO_ADDR
// end ; if not length then
37076: LD_VAR 0 11
37080: NOT
37081: IFFALSE 37085
// exit ;
37083: GO 37243
// tmp := array ;
37085: LD_ADDR_VAR 0 10
37089: PUSH
37090: LD_VAR 0 1
37094: ST_TO_ADDR
// for i = 1 to length do
37095: LD_ADDR_VAR 0 6
37099: PUSH
37100: DOUBLE
37101: LD_INT 1
37103: DEC
37104: ST_TO_ADDR
37105: LD_VAR 0 11
37109: PUSH
37110: FOR_TO
37111: IFFALSE 37231
// begin for j = 1 to array do
37113: LD_ADDR_VAR 0 7
37117: PUSH
37118: DOUBLE
37119: LD_INT 1
37121: DEC
37122: ST_TO_ADDR
37123: LD_VAR 0 1
37127: PUSH
37128: FOR_TO
37129: IFFALSE 37217
// begin k := j + d ;
37131: LD_ADDR_VAR 0 8
37135: PUSH
37136: LD_VAR 0 7
37140: PUSH
37141: LD_VAR 0 9
37145: PLUS
37146: ST_TO_ADDR
// if k > array then
37147: LD_VAR 0 8
37151: PUSH
37152: LD_VAR 0 1
37156: GREATER
37157: IFFALSE 37167
// k := 1 ;
37159: LD_ADDR_VAR 0 8
37163: PUSH
37164: LD_INT 1
37166: ST_TO_ADDR
// if not k then
37167: LD_VAR 0 8
37171: NOT
37172: IFFALSE 37184
// k := array ;
37174: LD_ADDR_VAR 0 8
37178: PUSH
37179: LD_VAR 0 1
37183: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
37184: LD_ADDR_VAR 0 10
37188: PUSH
37189: LD_VAR 0 10
37193: PPUSH
37194: LD_VAR 0 8
37198: PPUSH
37199: LD_VAR 0 1
37203: PUSH
37204: LD_VAR 0 7
37208: ARRAY
37209: PPUSH
37210: CALL_OW 1
37214: ST_TO_ADDR
// end ;
37215: GO 37128
37217: POP
37218: POP
// array := tmp ;
37219: LD_ADDR_VAR 0 1
37223: PUSH
37224: LD_VAR 0 10
37228: ST_TO_ADDR
// end ;
37229: GO 37110
37231: POP
37232: POP
// result := array ;
37233: LD_ADDR_VAR 0 5
37237: PUSH
37238: LD_VAR 0 1
37242: ST_TO_ADDR
// end ;
37243: LD_VAR 0 5
37247: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
37248: LD_INT 0
37250: PPUSH
37251: PPUSH
// result := 0 ;
37252: LD_ADDR_VAR 0 3
37256: PUSH
37257: LD_INT 0
37259: ST_TO_ADDR
// if not array or not value in array then
37260: LD_VAR 0 1
37264: NOT
37265: PUSH
37266: LD_VAR 0 2
37270: PUSH
37271: LD_VAR 0 1
37275: IN
37276: NOT
37277: OR
37278: IFFALSE 37282
// exit ;
37280: GO 37336
// for i = 1 to array do
37282: LD_ADDR_VAR 0 4
37286: PUSH
37287: DOUBLE
37288: LD_INT 1
37290: DEC
37291: ST_TO_ADDR
37292: LD_VAR 0 1
37296: PUSH
37297: FOR_TO
37298: IFFALSE 37334
// if value = array [ i ] then
37300: LD_VAR 0 2
37304: PUSH
37305: LD_VAR 0 1
37309: PUSH
37310: LD_VAR 0 4
37314: ARRAY
37315: EQUAL
37316: IFFALSE 37332
// begin result := i ;
37318: LD_ADDR_VAR 0 3
37322: PUSH
37323: LD_VAR 0 4
37327: ST_TO_ADDR
// exit ;
37328: POP
37329: POP
37330: GO 37336
// end ;
37332: GO 37297
37334: POP
37335: POP
// end ;
37336: LD_VAR 0 3
37340: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
37341: LD_INT 0
37343: PPUSH
// vc_chassis := chassis ;
37344: LD_ADDR_OWVAR 37
37348: PUSH
37349: LD_VAR 0 1
37353: ST_TO_ADDR
// vc_engine := engine ;
37354: LD_ADDR_OWVAR 39
37358: PUSH
37359: LD_VAR 0 2
37363: ST_TO_ADDR
// vc_control := control ;
37364: LD_ADDR_OWVAR 38
37368: PUSH
37369: LD_VAR 0 3
37373: ST_TO_ADDR
// vc_weapon := weapon ;
37374: LD_ADDR_OWVAR 40
37378: PUSH
37379: LD_VAR 0 4
37383: ST_TO_ADDR
// vc_fuel_battery := fuel ;
37384: LD_ADDR_OWVAR 41
37388: PUSH
37389: LD_VAR 0 5
37393: ST_TO_ADDR
// end ;
37394: LD_VAR 0 6
37398: RET
// export function WantPlant ( unit ) ; var task ; begin
37399: LD_INT 0
37401: PPUSH
37402: PPUSH
// result := false ;
37403: LD_ADDR_VAR 0 2
37407: PUSH
37408: LD_INT 0
37410: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
37411: LD_ADDR_VAR 0 3
37415: PUSH
37416: LD_VAR 0 1
37420: PPUSH
37421: CALL_OW 437
37425: ST_TO_ADDR
// if task then
37426: LD_VAR 0 3
37430: IFFALSE 37458
// if task [ 1 ] [ 1 ] = p then
37432: LD_VAR 0 3
37436: PUSH
37437: LD_INT 1
37439: ARRAY
37440: PUSH
37441: LD_INT 1
37443: ARRAY
37444: PUSH
37445: LD_STRING p
37447: EQUAL
37448: IFFALSE 37458
// result := true ;
37450: LD_ADDR_VAR 0 2
37454: PUSH
37455: LD_INT 1
37457: ST_TO_ADDR
// end ;
37458: LD_VAR 0 2
37462: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
37463: LD_INT 0
37465: PPUSH
37466: PPUSH
37467: PPUSH
37468: PPUSH
// if pos < 1 then
37469: LD_VAR 0 2
37473: PUSH
37474: LD_INT 1
37476: LESS
37477: IFFALSE 37481
// exit ;
37479: GO 37784
// if pos = 1 then
37481: LD_VAR 0 2
37485: PUSH
37486: LD_INT 1
37488: EQUAL
37489: IFFALSE 37522
// result := Replace ( arr , pos [ 1 ] , value ) else
37491: LD_ADDR_VAR 0 4
37495: PUSH
37496: LD_VAR 0 1
37500: PPUSH
37501: LD_VAR 0 2
37505: PUSH
37506: LD_INT 1
37508: ARRAY
37509: PPUSH
37510: LD_VAR 0 3
37514: PPUSH
37515: CALL_OW 1
37519: ST_TO_ADDR
37520: GO 37784
// begin tmp := arr ;
37522: LD_ADDR_VAR 0 6
37526: PUSH
37527: LD_VAR 0 1
37531: ST_TO_ADDR
// s_arr := [ tmp ] ;
37532: LD_ADDR_VAR 0 7
37536: PUSH
37537: LD_VAR 0 6
37541: PUSH
37542: EMPTY
37543: LIST
37544: ST_TO_ADDR
// for i = 1 to pos - 1 do
37545: LD_ADDR_VAR 0 5
37549: PUSH
37550: DOUBLE
37551: LD_INT 1
37553: DEC
37554: ST_TO_ADDR
37555: LD_VAR 0 2
37559: PUSH
37560: LD_INT 1
37562: MINUS
37563: PUSH
37564: FOR_TO
37565: IFFALSE 37610
// begin tmp := tmp [ pos [ i ] ] ;
37567: LD_ADDR_VAR 0 6
37571: PUSH
37572: LD_VAR 0 6
37576: PUSH
37577: LD_VAR 0 2
37581: PUSH
37582: LD_VAR 0 5
37586: ARRAY
37587: ARRAY
37588: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
37589: LD_ADDR_VAR 0 7
37593: PUSH
37594: LD_VAR 0 7
37598: PUSH
37599: LD_VAR 0 6
37603: PUSH
37604: EMPTY
37605: LIST
37606: ADD
37607: ST_TO_ADDR
// end ;
37608: GO 37564
37610: POP
37611: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
37612: LD_ADDR_VAR 0 6
37616: PUSH
37617: LD_VAR 0 6
37621: PPUSH
37622: LD_VAR 0 2
37626: PUSH
37627: LD_VAR 0 2
37631: ARRAY
37632: PPUSH
37633: LD_VAR 0 3
37637: PPUSH
37638: CALL_OW 1
37642: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
37643: LD_ADDR_VAR 0 7
37647: PUSH
37648: LD_VAR 0 7
37652: PPUSH
37653: LD_VAR 0 7
37657: PPUSH
37658: LD_VAR 0 6
37662: PPUSH
37663: CALL_OW 1
37667: ST_TO_ADDR
// for i = s_arr downto 2 do
37668: LD_ADDR_VAR 0 5
37672: PUSH
37673: DOUBLE
37674: LD_VAR 0 7
37678: INC
37679: ST_TO_ADDR
37680: LD_INT 2
37682: PUSH
37683: FOR_DOWNTO
37684: IFFALSE 37768
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
37686: LD_ADDR_VAR 0 6
37690: PUSH
37691: LD_VAR 0 7
37695: PUSH
37696: LD_VAR 0 5
37700: PUSH
37701: LD_INT 1
37703: MINUS
37704: ARRAY
37705: PPUSH
37706: LD_VAR 0 2
37710: PUSH
37711: LD_VAR 0 5
37715: PUSH
37716: LD_INT 1
37718: MINUS
37719: ARRAY
37720: PPUSH
37721: LD_VAR 0 7
37725: PUSH
37726: LD_VAR 0 5
37730: ARRAY
37731: PPUSH
37732: CALL_OW 1
37736: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
37737: LD_ADDR_VAR 0 7
37741: PUSH
37742: LD_VAR 0 7
37746: PPUSH
37747: LD_VAR 0 5
37751: PUSH
37752: LD_INT 1
37754: MINUS
37755: PPUSH
37756: LD_VAR 0 6
37760: PPUSH
37761: CALL_OW 1
37765: ST_TO_ADDR
// end ;
37766: GO 37683
37768: POP
37769: POP
// result := s_arr [ 1 ] ;
37770: LD_ADDR_VAR 0 4
37774: PUSH
37775: LD_VAR 0 7
37779: PUSH
37780: LD_INT 1
37782: ARRAY
37783: ST_TO_ADDR
// end ; end ;
37784: LD_VAR 0 4
37788: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
37789: LD_INT 0
37791: PPUSH
37792: PPUSH
// if not list then
37793: LD_VAR 0 1
37797: NOT
37798: IFFALSE 37802
// exit ;
37800: GO 37893
// i := list [ pos1 ] ;
37802: LD_ADDR_VAR 0 5
37806: PUSH
37807: LD_VAR 0 1
37811: PUSH
37812: LD_VAR 0 2
37816: ARRAY
37817: ST_TO_ADDR
// if not i then
37818: LD_VAR 0 5
37822: NOT
37823: IFFALSE 37827
// exit ;
37825: GO 37893
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
37827: LD_ADDR_VAR 0 1
37831: PUSH
37832: LD_VAR 0 1
37836: PPUSH
37837: LD_VAR 0 2
37841: PPUSH
37842: LD_VAR 0 1
37846: PUSH
37847: LD_VAR 0 3
37851: ARRAY
37852: PPUSH
37853: CALL_OW 1
37857: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
37858: LD_ADDR_VAR 0 1
37862: PUSH
37863: LD_VAR 0 1
37867: PPUSH
37868: LD_VAR 0 3
37872: PPUSH
37873: LD_VAR 0 5
37877: PPUSH
37878: CALL_OW 1
37882: ST_TO_ADDR
// result := list ;
37883: LD_ADDR_VAR 0 4
37887: PUSH
37888: LD_VAR 0 1
37892: ST_TO_ADDR
// end ;
37893: LD_VAR 0 4
37897: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
37898: LD_INT 0
37900: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
37901: LD_ADDR_VAR 0 5
37905: PUSH
37906: LD_VAR 0 1
37910: PPUSH
37911: CALL_OW 250
37915: PPUSH
37916: LD_VAR 0 1
37920: PPUSH
37921: CALL_OW 251
37925: PPUSH
37926: LD_VAR 0 2
37930: PPUSH
37931: LD_VAR 0 3
37935: PPUSH
37936: LD_VAR 0 4
37940: PPUSH
37941: CALL 37951 0 5
37945: ST_TO_ADDR
// end ;
37946: LD_VAR 0 5
37950: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
37951: LD_INT 0
37953: PPUSH
37954: PPUSH
37955: PPUSH
37956: PPUSH
// if not list then
37957: LD_VAR 0 3
37961: NOT
37962: IFFALSE 37966
// exit ;
37964: GO 38354
// result := [ ] ;
37966: LD_ADDR_VAR 0 6
37970: PUSH
37971: EMPTY
37972: ST_TO_ADDR
// for i in list do
37973: LD_ADDR_VAR 0 7
37977: PUSH
37978: LD_VAR 0 3
37982: PUSH
37983: FOR_IN
37984: IFFALSE 38186
// begin tmp := GetDistUnitXY ( i , x , y ) ;
37986: LD_ADDR_VAR 0 9
37990: PUSH
37991: LD_VAR 0 7
37995: PPUSH
37996: LD_VAR 0 1
38000: PPUSH
38001: LD_VAR 0 2
38005: PPUSH
38006: CALL_OW 297
38010: ST_TO_ADDR
// if not result then
38011: LD_VAR 0 6
38015: NOT
38016: IFFALSE 38042
// result := [ [ i , tmp ] ] else
38018: LD_ADDR_VAR 0 6
38022: PUSH
38023: LD_VAR 0 7
38027: PUSH
38028: LD_VAR 0 9
38032: PUSH
38033: EMPTY
38034: LIST
38035: LIST
38036: PUSH
38037: EMPTY
38038: LIST
38039: ST_TO_ADDR
38040: GO 38184
// begin if result [ result ] [ 2 ] < tmp then
38042: LD_VAR 0 6
38046: PUSH
38047: LD_VAR 0 6
38051: ARRAY
38052: PUSH
38053: LD_INT 2
38055: ARRAY
38056: PUSH
38057: LD_VAR 0 9
38061: LESS
38062: IFFALSE 38104
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
38064: LD_ADDR_VAR 0 6
38068: PUSH
38069: LD_VAR 0 6
38073: PPUSH
38074: LD_VAR 0 6
38078: PUSH
38079: LD_INT 1
38081: PLUS
38082: PPUSH
38083: LD_VAR 0 7
38087: PUSH
38088: LD_VAR 0 9
38092: PUSH
38093: EMPTY
38094: LIST
38095: LIST
38096: PPUSH
38097: CALL_OW 2
38101: ST_TO_ADDR
38102: GO 38184
// for j = 1 to result do
38104: LD_ADDR_VAR 0 8
38108: PUSH
38109: DOUBLE
38110: LD_INT 1
38112: DEC
38113: ST_TO_ADDR
38114: LD_VAR 0 6
38118: PUSH
38119: FOR_TO
38120: IFFALSE 38182
// begin if tmp < result [ j ] [ 2 ] then
38122: LD_VAR 0 9
38126: PUSH
38127: LD_VAR 0 6
38131: PUSH
38132: LD_VAR 0 8
38136: ARRAY
38137: PUSH
38138: LD_INT 2
38140: ARRAY
38141: LESS
38142: IFFALSE 38180
// begin result := Insert ( result , j , [ i , tmp ] ) ;
38144: LD_ADDR_VAR 0 6
38148: PUSH
38149: LD_VAR 0 6
38153: PPUSH
38154: LD_VAR 0 8
38158: PPUSH
38159: LD_VAR 0 7
38163: PUSH
38164: LD_VAR 0 9
38168: PUSH
38169: EMPTY
38170: LIST
38171: LIST
38172: PPUSH
38173: CALL_OW 2
38177: ST_TO_ADDR
// break ;
38178: GO 38182
// end ; end ;
38180: GO 38119
38182: POP
38183: POP
// end ; end ;
38184: GO 37983
38186: POP
38187: POP
// if result and not asc then
38188: LD_VAR 0 6
38192: PUSH
38193: LD_VAR 0 4
38197: NOT
38198: AND
38199: IFFALSE 38274
// begin tmp := result ;
38201: LD_ADDR_VAR 0 9
38205: PUSH
38206: LD_VAR 0 6
38210: ST_TO_ADDR
// for i = tmp downto 1 do
38211: LD_ADDR_VAR 0 7
38215: PUSH
38216: DOUBLE
38217: LD_VAR 0 9
38221: INC
38222: ST_TO_ADDR
38223: LD_INT 1
38225: PUSH
38226: FOR_DOWNTO
38227: IFFALSE 38272
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
38229: LD_ADDR_VAR 0 6
38233: PUSH
38234: LD_VAR 0 6
38238: PPUSH
38239: LD_VAR 0 9
38243: PUSH
38244: LD_VAR 0 7
38248: MINUS
38249: PUSH
38250: LD_INT 1
38252: PLUS
38253: PPUSH
38254: LD_VAR 0 9
38258: PUSH
38259: LD_VAR 0 7
38263: ARRAY
38264: PPUSH
38265: CALL_OW 1
38269: ST_TO_ADDR
38270: GO 38226
38272: POP
38273: POP
// end ; tmp := [ ] ;
38274: LD_ADDR_VAR 0 9
38278: PUSH
38279: EMPTY
38280: ST_TO_ADDR
// if mode then
38281: LD_VAR 0 5
38285: IFFALSE 38354
// begin for i = 1 to result do
38287: LD_ADDR_VAR 0 7
38291: PUSH
38292: DOUBLE
38293: LD_INT 1
38295: DEC
38296: ST_TO_ADDR
38297: LD_VAR 0 6
38301: PUSH
38302: FOR_TO
38303: IFFALSE 38342
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
38305: LD_ADDR_VAR 0 9
38309: PUSH
38310: LD_VAR 0 9
38314: PPUSH
38315: LD_VAR 0 7
38319: PPUSH
38320: LD_VAR 0 6
38324: PUSH
38325: LD_VAR 0 7
38329: ARRAY
38330: PUSH
38331: LD_INT 1
38333: ARRAY
38334: PPUSH
38335: CALL_OW 1
38339: ST_TO_ADDR
38340: GO 38302
38342: POP
38343: POP
// result := tmp ;
38344: LD_ADDR_VAR 0 6
38348: PUSH
38349: LD_VAR 0 9
38353: ST_TO_ADDR
// end ; end ;
38354: LD_VAR 0 6
38358: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
38359: LD_INT 0
38361: PPUSH
38362: PPUSH
38363: PPUSH
38364: PPUSH
38365: PPUSH
38366: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
38367: LD_ADDR_VAR 0 5
38371: PUSH
38372: LD_INT 0
38374: PUSH
38375: LD_INT 0
38377: PUSH
38378: LD_INT 0
38380: PUSH
38381: EMPTY
38382: PUSH
38383: EMPTY
38384: LIST
38385: LIST
38386: LIST
38387: LIST
38388: ST_TO_ADDR
// if not x or not y then
38389: LD_VAR 0 2
38393: NOT
38394: PUSH
38395: LD_VAR 0 3
38399: NOT
38400: OR
38401: IFFALSE 38405
// exit ;
38403: GO 40055
// if not range then
38405: LD_VAR 0 4
38409: NOT
38410: IFFALSE 38420
// range := 10 ;
38412: LD_ADDR_VAR 0 4
38416: PUSH
38417: LD_INT 10
38419: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38420: LD_ADDR_VAR 0 8
38424: PUSH
38425: LD_INT 81
38427: PUSH
38428: LD_VAR 0 1
38432: PUSH
38433: EMPTY
38434: LIST
38435: LIST
38436: PUSH
38437: LD_INT 92
38439: PUSH
38440: LD_VAR 0 2
38444: PUSH
38445: LD_VAR 0 3
38449: PUSH
38450: LD_VAR 0 4
38454: PUSH
38455: EMPTY
38456: LIST
38457: LIST
38458: LIST
38459: LIST
38460: PUSH
38461: LD_INT 3
38463: PUSH
38464: LD_INT 21
38466: PUSH
38467: LD_INT 3
38469: PUSH
38470: EMPTY
38471: LIST
38472: LIST
38473: PUSH
38474: EMPTY
38475: LIST
38476: LIST
38477: PUSH
38478: EMPTY
38479: LIST
38480: LIST
38481: LIST
38482: PPUSH
38483: CALL_OW 69
38487: ST_TO_ADDR
// if not tmp then
38488: LD_VAR 0 8
38492: NOT
38493: IFFALSE 38497
// exit ;
38495: GO 40055
// for i in tmp do
38497: LD_ADDR_VAR 0 6
38501: PUSH
38502: LD_VAR 0 8
38506: PUSH
38507: FOR_IN
38508: IFFALSE 40030
// begin points := [ 0 , 0 , 0 ] ;
38510: LD_ADDR_VAR 0 9
38514: PUSH
38515: LD_INT 0
38517: PUSH
38518: LD_INT 0
38520: PUSH
38521: LD_INT 0
38523: PUSH
38524: EMPTY
38525: LIST
38526: LIST
38527: LIST
38528: ST_TO_ADDR
// bpoints := 1 ;
38529: LD_ADDR_VAR 0 10
38533: PUSH
38534: LD_INT 1
38536: ST_TO_ADDR
// case GetType ( i ) of unit_human :
38537: LD_VAR 0 6
38541: PPUSH
38542: CALL_OW 247
38546: PUSH
38547: LD_INT 1
38549: DOUBLE
38550: EQUAL
38551: IFTRUE 38555
38553: GO 39133
38555: POP
// begin if GetClass ( i ) = 1 then
38556: LD_VAR 0 6
38560: PPUSH
38561: CALL_OW 257
38565: PUSH
38566: LD_INT 1
38568: EQUAL
38569: IFFALSE 38590
// points := [ 10 , 5 , 3 ] ;
38571: LD_ADDR_VAR 0 9
38575: PUSH
38576: LD_INT 10
38578: PUSH
38579: LD_INT 5
38581: PUSH
38582: LD_INT 3
38584: PUSH
38585: EMPTY
38586: LIST
38587: LIST
38588: LIST
38589: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
38590: LD_VAR 0 6
38594: PPUSH
38595: CALL_OW 257
38599: PUSH
38600: LD_INT 2
38602: PUSH
38603: LD_INT 3
38605: PUSH
38606: LD_INT 4
38608: PUSH
38609: EMPTY
38610: LIST
38611: LIST
38612: LIST
38613: IN
38614: IFFALSE 38635
// points := [ 3 , 2 , 1 ] ;
38616: LD_ADDR_VAR 0 9
38620: PUSH
38621: LD_INT 3
38623: PUSH
38624: LD_INT 2
38626: PUSH
38627: LD_INT 1
38629: PUSH
38630: EMPTY
38631: LIST
38632: LIST
38633: LIST
38634: ST_TO_ADDR
// if GetClass ( i ) = 5 then
38635: LD_VAR 0 6
38639: PPUSH
38640: CALL_OW 257
38644: PUSH
38645: LD_INT 5
38647: EQUAL
38648: IFFALSE 38669
// points := [ 130 , 5 , 2 ] ;
38650: LD_ADDR_VAR 0 9
38654: PUSH
38655: LD_INT 130
38657: PUSH
38658: LD_INT 5
38660: PUSH
38661: LD_INT 2
38663: PUSH
38664: EMPTY
38665: LIST
38666: LIST
38667: LIST
38668: ST_TO_ADDR
// if GetClass ( i ) = 8 then
38669: LD_VAR 0 6
38673: PPUSH
38674: CALL_OW 257
38678: PUSH
38679: LD_INT 8
38681: EQUAL
38682: IFFALSE 38703
// points := [ 35 , 35 , 30 ] ;
38684: LD_ADDR_VAR 0 9
38688: PUSH
38689: LD_INT 35
38691: PUSH
38692: LD_INT 35
38694: PUSH
38695: LD_INT 30
38697: PUSH
38698: EMPTY
38699: LIST
38700: LIST
38701: LIST
38702: ST_TO_ADDR
// if GetClass ( i ) = 9 then
38703: LD_VAR 0 6
38707: PPUSH
38708: CALL_OW 257
38712: PUSH
38713: LD_INT 9
38715: EQUAL
38716: IFFALSE 38737
// points := [ 20 , 55 , 40 ] ;
38718: LD_ADDR_VAR 0 9
38722: PUSH
38723: LD_INT 20
38725: PUSH
38726: LD_INT 55
38728: PUSH
38729: LD_INT 40
38731: PUSH
38732: EMPTY
38733: LIST
38734: LIST
38735: LIST
38736: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
38737: LD_VAR 0 6
38741: PPUSH
38742: CALL_OW 257
38746: PUSH
38747: LD_INT 12
38749: PUSH
38750: LD_INT 16
38752: PUSH
38753: EMPTY
38754: LIST
38755: LIST
38756: IN
38757: IFFALSE 38778
// points := [ 5 , 3 , 2 ] ;
38759: LD_ADDR_VAR 0 9
38763: PUSH
38764: LD_INT 5
38766: PUSH
38767: LD_INT 3
38769: PUSH
38770: LD_INT 2
38772: PUSH
38773: EMPTY
38774: LIST
38775: LIST
38776: LIST
38777: ST_TO_ADDR
// if GetClass ( i ) = 17 then
38778: LD_VAR 0 6
38782: PPUSH
38783: CALL_OW 257
38787: PUSH
38788: LD_INT 17
38790: EQUAL
38791: IFFALSE 38812
// points := [ 100 , 50 , 75 ] ;
38793: LD_ADDR_VAR 0 9
38797: PUSH
38798: LD_INT 100
38800: PUSH
38801: LD_INT 50
38803: PUSH
38804: LD_INT 75
38806: PUSH
38807: EMPTY
38808: LIST
38809: LIST
38810: LIST
38811: ST_TO_ADDR
// if GetClass ( i ) = 15 then
38812: LD_VAR 0 6
38816: PPUSH
38817: CALL_OW 257
38821: PUSH
38822: LD_INT 15
38824: EQUAL
38825: IFFALSE 38846
// points := [ 10 , 5 , 3 ] ;
38827: LD_ADDR_VAR 0 9
38831: PUSH
38832: LD_INT 10
38834: PUSH
38835: LD_INT 5
38837: PUSH
38838: LD_INT 3
38840: PUSH
38841: EMPTY
38842: LIST
38843: LIST
38844: LIST
38845: ST_TO_ADDR
// if GetClass ( i ) = 14 then
38846: LD_VAR 0 6
38850: PPUSH
38851: CALL_OW 257
38855: PUSH
38856: LD_INT 14
38858: EQUAL
38859: IFFALSE 38880
// points := [ 10 , 0 , 0 ] ;
38861: LD_ADDR_VAR 0 9
38865: PUSH
38866: LD_INT 10
38868: PUSH
38869: LD_INT 0
38871: PUSH
38872: LD_INT 0
38874: PUSH
38875: EMPTY
38876: LIST
38877: LIST
38878: LIST
38879: ST_TO_ADDR
// if GetClass ( i ) = 11 then
38880: LD_VAR 0 6
38884: PPUSH
38885: CALL_OW 257
38889: PUSH
38890: LD_INT 11
38892: EQUAL
38893: IFFALSE 38914
// points := [ 30 , 10 , 5 ] ;
38895: LD_ADDR_VAR 0 9
38899: PUSH
38900: LD_INT 30
38902: PUSH
38903: LD_INT 10
38905: PUSH
38906: LD_INT 5
38908: PUSH
38909: EMPTY
38910: LIST
38911: LIST
38912: LIST
38913: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
38914: LD_VAR 0 1
38918: PPUSH
38919: LD_INT 5
38921: PPUSH
38922: CALL_OW 321
38926: PUSH
38927: LD_INT 2
38929: EQUAL
38930: IFFALSE 38947
// bpoints := bpoints * 1.8 ;
38932: LD_ADDR_VAR 0 10
38936: PUSH
38937: LD_VAR 0 10
38941: PUSH
38942: LD_REAL  1.80000000000000E+0000
38945: MUL
38946: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
38947: LD_VAR 0 6
38951: PPUSH
38952: CALL_OW 257
38956: PUSH
38957: LD_INT 1
38959: PUSH
38960: LD_INT 2
38962: PUSH
38963: LD_INT 3
38965: PUSH
38966: LD_INT 4
38968: PUSH
38969: EMPTY
38970: LIST
38971: LIST
38972: LIST
38973: LIST
38974: IN
38975: PUSH
38976: LD_VAR 0 1
38980: PPUSH
38981: LD_INT 51
38983: PPUSH
38984: CALL_OW 321
38988: PUSH
38989: LD_INT 2
38991: EQUAL
38992: AND
38993: IFFALSE 39010
// bpoints := bpoints * 1.2 ;
38995: LD_ADDR_VAR 0 10
38999: PUSH
39000: LD_VAR 0 10
39004: PUSH
39005: LD_REAL  1.20000000000000E+0000
39008: MUL
39009: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
39010: LD_VAR 0 6
39014: PPUSH
39015: CALL_OW 257
39019: PUSH
39020: LD_INT 5
39022: PUSH
39023: LD_INT 7
39025: PUSH
39026: LD_INT 9
39028: PUSH
39029: EMPTY
39030: LIST
39031: LIST
39032: LIST
39033: IN
39034: PUSH
39035: LD_VAR 0 1
39039: PPUSH
39040: LD_INT 52
39042: PPUSH
39043: CALL_OW 321
39047: PUSH
39048: LD_INT 2
39050: EQUAL
39051: AND
39052: IFFALSE 39069
// bpoints := bpoints * 1.5 ;
39054: LD_ADDR_VAR 0 10
39058: PUSH
39059: LD_VAR 0 10
39063: PUSH
39064: LD_REAL  1.50000000000000E+0000
39067: MUL
39068: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
39069: LD_VAR 0 1
39073: PPUSH
39074: LD_INT 66
39076: PPUSH
39077: CALL_OW 321
39081: PUSH
39082: LD_INT 2
39084: EQUAL
39085: IFFALSE 39102
// bpoints := bpoints * 1.1 ;
39087: LD_ADDR_VAR 0 10
39091: PUSH
39092: LD_VAR 0 10
39096: PUSH
39097: LD_REAL  1.10000000000000E+0000
39100: MUL
39101: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
39102: LD_ADDR_VAR 0 10
39106: PUSH
39107: LD_VAR 0 10
39111: PUSH
39112: LD_VAR 0 6
39116: PPUSH
39117: LD_INT 1
39119: PPUSH
39120: CALL_OW 259
39124: PUSH
39125: LD_REAL  1.15000000000000E+0000
39128: MUL
39129: MUL
39130: ST_TO_ADDR
// end ; unit_vehicle :
39131: GO 39959
39133: LD_INT 2
39135: DOUBLE
39136: EQUAL
39137: IFTRUE 39141
39139: GO 39947
39141: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
39142: LD_VAR 0 6
39146: PPUSH
39147: CALL_OW 264
39151: PUSH
39152: LD_INT 2
39154: PUSH
39155: LD_INT 42
39157: PUSH
39158: LD_INT 24
39160: PUSH
39161: EMPTY
39162: LIST
39163: LIST
39164: LIST
39165: IN
39166: IFFALSE 39187
// points := [ 25 , 5 , 3 ] ;
39168: LD_ADDR_VAR 0 9
39172: PUSH
39173: LD_INT 25
39175: PUSH
39176: LD_INT 5
39178: PUSH
39179: LD_INT 3
39181: PUSH
39182: EMPTY
39183: LIST
39184: LIST
39185: LIST
39186: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
39187: LD_VAR 0 6
39191: PPUSH
39192: CALL_OW 264
39196: PUSH
39197: LD_INT 4
39199: PUSH
39200: LD_INT 43
39202: PUSH
39203: LD_INT 25
39205: PUSH
39206: EMPTY
39207: LIST
39208: LIST
39209: LIST
39210: IN
39211: IFFALSE 39232
// points := [ 40 , 15 , 5 ] ;
39213: LD_ADDR_VAR 0 9
39217: PUSH
39218: LD_INT 40
39220: PUSH
39221: LD_INT 15
39223: PUSH
39224: LD_INT 5
39226: PUSH
39227: EMPTY
39228: LIST
39229: LIST
39230: LIST
39231: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
39232: LD_VAR 0 6
39236: PPUSH
39237: CALL_OW 264
39241: PUSH
39242: LD_INT 3
39244: PUSH
39245: LD_INT 23
39247: PUSH
39248: EMPTY
39249: LIST
39250: LIST
39251: IN
39252: IFFALSE 39273
// points := [ 7 , 25 , 8 ] ;
39254: LD_ADDR_VAR 0 9
39258: PUSH
39259: LD_INT 7
39261: PUSH
39262: LD_INT 25
39264: PUSH
39265: LD_INT 8
39267: PUSH
39268: EMPTY
39269: LIST
39270: LIST
39271: LIST
39272: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
39273: LD_VAR 0 6
39277: PPUSH
39278: CALL_OW 264
39282: PUSH
39283: LD_INT 5
39285: PUSH
39286: LD_INT 27
39288: PUSH
39289: LD_INT 44
39291: PUSH
39292: EMPTY
39293: LIST
39294: LIST
39295: LIST
39296: IN
39297: IFFALSE 39318
// points := [ 14 , 50 , 16 ] ;
39299: LD_ADDR_VAR 0 9
39303: PUSH
39304: LD_INT 14
39306: PUSH
39307: LD_INT 50
39309: PUSH
39310: LD_INT 16
39312: PUSH
39313: EMPTY
39314: LIST
39315: LIST
39316: LIST
39317: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
39318: LD_VAR 0 6
39322: PPUSH
39323: CALL_OW 264
39327: PUSH
39328: LD_INT 6
39330: PUSH
39331: LD_INT 46
39333: PUSH
39334: EMPTY
39335: LIST
39336: LIST
39337: IN
39338: IFFALSE 39359
// points := [ 32 , 120 , 70 ] ;
39340: LD_ADDR_VAR 0 9
39344: PUSH
39345: LD_INT 32
39347: PUSH
39348: LD_INT 120
39350: PUSH
39351: LD_INT 70
39353: PUSH
39354: EMPTY
39355: LIST
39356: LIST
39357: LIST
39358: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
39359: LD_VAR 0 6
39363: PPUSH
39364: CALL_OW 264
39368: PUSH
39369: LD_INT 7
39371: PUSH
39372: LD_INT 28
39374: PUSH
39375: LD_INT 45
39377: PUSH
39378: LD_INT 92
39380: PUSH
39381: EMPTY
39382: LIST
39383: LIST
39384: LIST
39385: LIST
39386: IN
39387: IFFALSE 39408
// points := [ 35 , 20 , 45 ] ;
39389: LD_ADDR_VAR 0 9
39393: PUSH
39394: LD_INT 35
39396: PUSH
39397: LD_INT 20
39399: PUSH
39400: LD_INT 45
39402: PUSH
39403: EMPTY
39404: LIST
39405: LIST
39406: LIST
39407: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
39408: LD_VAR 0 6
39412: PPUSH
39413: CALL_OW 264
39417: PUSH
39418: LD_INT 47
39420: PUSH
39421: EMPTY
39422: LIST
39423: IN
39424: IFFALSE 39445
// points := [ 67 , 45 , 75 ] ;
39426: LD_ADDR_VAR 0 9
39430: PUSH
39431: LD_INT 67
39433: PUSH
39434: LD_INT 45
39436: PUSH
39437: LD_INT 75
39439: PUSH
39440: EMPTY
39441: LIST
39442: LIST
39443: LIST
39444: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
39445: LD_VAR 0 6
39449: PPUSH
39450: CALL_OW 264
39454: PUSH
39455: LD_INT 26
39457: PUSH
39458: EMPTY
39459: LIST
39460: IN
39461: IFFALSE 39482
// points := [ 120 , 30 , 80 ] ;
39463: LD_ADDR_VAR 0 9
39467: PUSH
39468: LD_INT 120
39470: PUSH
39471: LD_INT 30
39473: PUSH
39474: LD_INT 80
39476: PUSH
39477: EMPTY
39478: LIST
39479: LIST
39480: LIST
39481: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
39482: LD_VAR 0 6
39486: PPUSH
39487: CALL_OW 264
39491: PUSH
39492: LD_INT 22
39494: PUSH
39495: EMPTY
39496: LIST
39497: IN
39498: IFFALSE 39519
// points := [ 40 , 1 , 1 ] ;
39500: LD_ADDR_VAR 0 9
39504: PUSH
39505: LD_INT 40
39507: PUSH
39508: LD_INT 1
39510: PUSH
39511: LD_INT 1
39513: PUSH
39514: EMPTY
39515: LIST
39516: LIST
39517: LIST
39518: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
39519: LD_VAR 0 6
39523: PPUSH
39524: CALL_OW 264
39528: PUSH
39529: LD_INT 29
39531: PUSH
39532: EMPTY
39533: LIST
39534: IN
39535: IFFALSE 39556
// points := [ 70 , 200 , 400 ] ;
39537: LD_ADDR_VAR 0 9
39541: PUSH
39542: LD_INT 70
39544: PUSH
39545: LD_INT 200
39547: PUSH
39548: LD_INT 400
39550: PUSH
39551: EMPTY
39552: LIST
39553: LIST
39554: LIST
39555: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
39556: LD_VAR 0 6
39560: PPUSH
39561: CALL_OW 264
39565: PUSH
39566: LD_INT 14
39568: PUSH
39569: LD_INT 53
39571: PUSH
39572: EMPTY
39573: LIST
39574: LIST
39575: IN
39576: IFFALSE 39597
// points := [ 40 , 10 , 20 ] ;
39578: LD_ADDR_VAR 0 9
39582: PUSH
39583: LD_INT 40
39585: PUSH
39586: LD_INT 10
39588: PUSH
39589: LD_INT 20
39591: PUSH
39592: EMPTY
39593: LIST
39594: LIST
39595: LIST
39596: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
39597: LD_VAR 0 6
39601: PPUSH
39602: CALL_OW 264
39606: PUSH
39607: LD_INT 9
39609: PUSH
39610: EMPTY
39611: LIST
39612: IN
39613: IFFALSE 39634
// points := [ 5 , 70 , 20 ] ;
39615: LD_ADDR_VAR 0 9
39619: PUSH
39620: LD_INT 5
39622: PUSH
39623: LD_INT 70
39625: PUSH
39626: LD_INT 20
39628: PUSH
39629: EMPTY
39630: LIST
39631: LIST
39632: LIST
39633: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
39634: LD_VAR 0 6
39638: PPUSH
39639: CALL_OW 264
39643: PUSH
39644: LD_INT 10
39646: PUSH
39647: EMPTY
39648: LIST
39649: IN
39650: IFFALSE 39671
// points := [ 35 , 110 , 70 ] ;
39652: LD_ADDR_VAR 0 9
39656: PUSH
39657: LD_INT 35
39659: PUSH
39660: LD_INT 110
39662: PUSH
39663: LD_INT 70
39665: PUSH
39666: EMPTY
39667: LIST
39668: LIST
39669: LIST
39670: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
39671: LD_VAR 0 6
39675: PPUSH
39676: CALL_OW 265
39680: PUSH
39681: LD_INT 25
39683: EQUAL
39684: IFFALSE 39705
// points := [ 80 , 65 , 100 ] ;
39686: LD_ADDR_VAR 0 9
39690: PUSH
39691: LD_INT 80
39693: PUSH
39694: LD_INT 65
39696: PUSH
39697: LD_INT 100
39699: PUSH
39700: EMPTY
39701: LIST
39702: LIST
39703: LIST
39704: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
39705: LD_VAR 0 6
39709: PPUSH
39710: CALL_OW 263
39714: PUSH
39715: LD_INT 1
39717: EQUAL
39718: IFFALSE 39753
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
39720: LD_ADDR_VAR 0 10
39724: PUSH
39725: LD_VAR 0 10
39729: PUSH
39730: LD_VAR 0 6
39734: PPUSH
39735: CALL_OW 311
39739: PPUSH
39740: LD_INT 3
39742: PPUSH
39743: CALL_OW 259
39747: PUSH
39748: LD_INT 4
39750: MUL
39751: MUL
39752: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
39753: LD_VAR 0 6
39757: PPUSH
39758: CALL_OW 263
39762: PUSH
39763: LD_INT 2
39765: EQUAL
39766: IFFALSE 39817
// begin j := IsControledBy ( i ) ;
39768: LD_ADDR_VAR 0 7
39772: PUSH
39773: LD_VAR 0 6
39777: PPUSH
39778: CALL_OW 312
39782: ST_TO_ADDR
// if j then
39783: LD_VAR 0 7
39787: IFFALSE 39817
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
39789: LD_ADDR_VAR 0 10
39793: PUSH
39794: LD_VAR 0 10
39798: PUSH
39799: LD_VAR 0 7
39803: PPUSH
39804: LD_INT 3
39806: PPUSH
39807: CALL_OW 259
39811: PUSH
39812: LD_INT 3
39814: MUL
39815: MUL
39816: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
39817: LD_VAR 0 6
39821: PPUSH
39822: CALL_OW 264
39826: PUSH
39827: LD_INT 5
39829: PUSH
39830: LD_INT 6
39832: PUSH
39833: LD_INT 46
39835: PUSH
39836: LD_INT 44
39838: PUSH
39839: LD_INT 47
39841: PUSH
39842: LD_INT 45
39844: PUSH
39845: LD_INT 28
39847: PUSH
39848: LD_INT 7
39850: PUSH
39851: LD_INT 27
39853: PUSH
39854: LD_INT 29
39856: PUSH
39857: EMPTY
39858: LIST
39859: LIST
39860: LIST
39861: LIST
39862: LIST
39863: LIST
39864: LIST
39865: LIST
39866: LIST
39867: LIST
39868: IN
39869: PUSH
39870: LD_VAR 0 1
39874: PPUSH
39875: LD_INT 52
39877: PPUSH
39878: CALL_OW 321
39882: PUSH
39883: LD_INT 2
39885: EQUAL
39886: AND
39887: IFFALSE 39904
// bpoints := bpoints * 1.2 ;
39889: LD_ADDR_VAR 0 10
39893: PUSH
39894: LD_VAR 0 10
39898: PUSH
39899: LD_REAL  1.20000000000000E+0000
39902: MUL
39903: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
39904: LD_VAR 0 6
39908: PPUSH
39909: CALL_OW 264
39913: PUSH
39914: LD_INT 6
39916: PUSH
39917: LD_INT 46
39919: PUSH
39920: LD_INT 47
39922: PUSH
39923: EMPTY
39924: LIST
39925: LIST
39926: LIST
39927: IN
39928: IFFALSE 39945
// bpoints := bpoints * 1.2 ;
39930: LD_ADDR_VAR 0 10
39934: PUSH
39935: LD_VAR 0 10
39939: PUSH
39940: LD_REAL  1.20000000000000E+0000
39943: MUL
39944: ST_TO_ADDR
// end ; unit_building :
39945: GO 39959
39947: LD_INT 3
39949: DOUBLE
39950: EQUAL
39951: IFTRUE 39955
39953: GO 39958
39955: POP
// ; end ;
39956: GO 39959
39958: POP
// for j = 1 to 3 do
39959: LD_ADDR_VAR 0 7
39963: PUSH
39964: DOUBLE
39965: LD_INT 1
39967: DEC
39968: ST_TO_ADDR
39969: LD_INT 3
39971: PUSH
39972: FOR_TO
39973: IFFALSE 40026
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
39975: LD_ADDR_VAR 0 5
39979: PUSH
39980: LD_VAR 0 5
39984: PPUSH
39985: LD_VAR 0 7
39989: PPUSH
39990: LD_VAR 0 5
39994: PUSH
39995: LD_VAR 0 7
39999: ARRAY
40000: PUSH
40001: LD_VAR 0 9
40005: PUSH
40006: LD_VAR 0 7
40010: ARRAY
40011: PUSH
40012: LD_VAR 0 10
40016: MUL
40017: PLUS
40018: PPUSH
40019: CALL_OW 1
40023: ST_TO_ADDR
40024: GO 39972
40026: POP
40027: POP
// end ;
40028: GO 38507
40030: POP
40031: POP
// result := Replace ( result , 4 , tmp ) ;
40032: LD_ADDR_VAR 0 5
40036: PUSH
40037: LD_VAR 0 5
40041: PPUSH
40042: LD_INT 4
40044: PPUSH
40045: LD_VAR 0 8
40049: PPUSH
40050: CALL_OW 1
40054: ST_TO_ADDR
// end ;
40055: LD_VAR 0 5
40059: RET
// export function DangerAtRange ( unit , range ) ; begin
40060: LD_INT 0
40062: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
40063: LD_ADDR_VAR 0 3
40067: PUSH
40068: LD_VAR 0 1
40072: PPUSH
40073: CALL_OW 255
40077: PPUSH
40078: LD_VAR 0 1
40082: PPUSH
40083: CALL_OW 250
40087: PPUSH
40088: LD_VAR 0 1
40092: PPUSH
40093: CALL_OW 251
40097: PPUSH
40098: LD_VAR 0 2
40102: PPUSH
40103: CALL 38359 0 4
40107: ST_TO_ADDR
// end ;
40108: LD_VAR 0 3
40112: RET
// export function DangerInArea ( side , area ) ; begin
40113: LD_INT 0
40115: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
40116: LD_ADDR_VAR 0 3
40120: PUSH
40121: LD_VAR 0 2
40125: PPUSH
40126: LD_INT 81
40128: PUSH
40129: LD_VAR 0 1
40133: PUSH
40134: EMPTY
40135: LIST
40136: LIST
40137: PPUSH
40138: CALL_OW 70
40142: ST_TO_ADDR
// end ;
40143: LD_VAR 0 3
40147: RET
// export function IsExtension ( b ) ; begin
40148: LD_INT 0
40150: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
40151: LD_ADDR_VAR 0 2
40155: PUSH
40156: LD_VAR 0 1
40160: PUSH
40161: LD_INT 23
40163: PUSH
40164: LD_INT 20
40166: PUSH
40167: LD_INT 22
40169: PUSH
40170: LD_INT 17
40172: PUSH
40173: LD_INT 24
40175: PUSH
40176: LD_INT 21
40178: PUSH
40179: LD_INT 19
40181: PUSH
40182: LD_INT 16
40184: PUSH
40185: LD_INT 25
40187: PUSH
40188: LD_INT 18
40190: PUSH
40191: EMPTY
40192: LIST
40193: LIST
40194: LIST
40195: LIST
40196: LIST
40197: LIST
40198: LIST
40199: LIST
40200: LIST
40201: LIST
40202: IN
40203: ST_TO_ADDR
// end ;
40204: LD_VAR 0 2
40208: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
40209: LD_INT 0
40211: PPUSH
40212: PPUSH
40213: PPUSH
// result := [ ] ;
40214: LD_ADDR_VAR 0 4
40218: PUSH
40219: EMPTY
40220: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
40221: LD_ADDR_VAR 0 5
40225: PUSH
40226: LD_VAR 0 2
40230: PPUSH
40231: LD_INT 21
40233: PUSH
40234: LD_INT 3
40236: PUSH
40237: EMPTY
40238: LIST
40239: LIST
40240: PPUSH
40241: CALL_OW 70
40245: ST_TO_ADDR
// if not tmp then
40246: LD_VAR 0 5
40250: NOT
40251: IFFALSE 40255
// exit ;
40253: GO 40319
// if checkLink then
40255: LD_VAR 0 3
40259: IFFALSE 40309
// begin for i in tmp do
40261: LD_ADDR_VAR 0 6
40265: PUSH
40266: LD_VAR 0 5
40270: PUSH
40271: FOR_IN
40272: IFFALSE 40307
// if GetBase ( i ) <> base then
40274: LD_VAR 0 6
40278: PPUSH
40279: CALL_OW 274
40283: PUSH
40284: LD_VAR 0 1
40288: NONEQUAL
40289: IFFALSE 40305
// ComLinkToBase ( base , i ) ;
40291: LD_VAR 0 1
40295: PPUSH
40296: LD_VAR 0 6
40300: PPUSH
40301: CALL_OW 169
40305: GO 40271
40307: POP
40308: POP
// end ; result := tmp ;
40309: LD_ADDR_VAR 0 4
40313: PUSH
40314: LD_VAR 0 5
40318: ST_TO_ADDR
// end ;
40319: LD_VAR 0 4
40323: RET
// export function ComComplete ( units , b ) ; var i ; begin
40324: LD_INT 0
40326: PPUSH
40327: PPUSH
// if not units then
40328: LD_VAR 0 1
40332: NOT
40333: IFFALSE 40337
// exit ;
40335: GO 40427
// for i in units do
40337: LD_ADDR_VAR 0 4
40341: PUSH
40342: LD_VAR 0 1
40346: PUSH
40347: FOR_IN
40348: IFFALSE 40425
// if BuildingStatus ( b ) = bs_build then
40350: LD_VAR 0 2
40354: PPUSH
40355: CALL_OW 461
40359: PUSH
40360: LD_INT 1
40362: EQUAL
40363: IFFALSE 40423
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
40365: LD_VAR 0 4
40369: PPUSH
40370: LD_STRING h
40372: PUSH
40373: LD_VAR 0 2
40377: PPUSH
40378: CALL_OW 250
40382: PUSH
40383: LD_VAR 0 2
40387: PPUSH
40388: CALL_OW 251
40392: PUSH
40393: LD_VAR 0 2
40397: PUSH
40398: LD_INT 0
40400: PUSH
40401: LD_INT 0
40403: PUSH
40404: LD_INT 0
40406: PUSH
40407: EMPTY
40408: LIST
40409: LIST
40410: LIST
40411: LIST
40412: LIST
40413: LIST
40414: LIST
40415: PUSH
40416: EMPTY
40417: LIST
40418: PPUSH
40419: CALL_OW 446
40423: GO 40347
40425: POP
40426: POP
// end ;
40427: LD_VAR 0 3
40431: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
40432: LD_INT 0
40434: PPUSH
40435: PPUSH
40436: PPUSH
40437: PPUSH
40438: PPUSH
40439: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
40440: LD_VAR 0 1
40444: NOT
40445: PUSH
40446: LD_VAR 0 1
40450: PPUSH
40451: CALL_OW 263
40455: PUSH
40456: LD_INT 2
40458: NONEQUAL
40459: OR
40460: IFFALSE 40464
// exit ;
40462: GO 40780
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
40464: LD_ADDR_VAR 0 6
40468: PUSH
40469: LD_INT 22
40471: PUSH
40472: LD_VAR 0 1
40476: PPUSH
40477: CALL_OW 255
40481: PUSH
40482: EMPTY
40483: LIST
40484: LIST
40485: PUSH
40486: LD_INT 2
40488: PUSH
40489: LD_INT 30
40491: PUSH
40492: LD_INT 36
40494: PUSH
40495: EMPTY
40496: LIST
40497: LIST
40498: PUSH
40499: LD_INT 34
40501: PUSH
40502: LD_INT 31
40504: PUSH
40505: EMPTY
40506: LIST
40507: LIST
40508: PUSH
40509: EMPTY
40510: LIST
40511: LIST
40512: LIST
40513: PUSH
40514: EMPTY
40515: LIST
40516: LIST
40517: PPUSH
40518: CALL_OW 69
40522: ST_TO_ADDR
// if not tmp then
40523: LD_VAR 0 6
40527: NOT
40528: IFFALSE 40532
// exit ;
40530: GO 40780
// result := [ ] ;
40532: LD_ADDR_VAR 0 2
40536: PUSH
40537: EMPTY
40538: ST_TO_ADDR
// for i in tmp do
40539: LD_ADDR_VAR 0 3
40543: PUSH
40544: LD_VAR 0 6
40548: PUSH
40549: FOR_IN
40550: IFFALSE 40621
// begin t := UnitsInside ( i ) ;
40552: LD_ADDR_VAR 0 4
40556: PUSH
40557: LD_VAR 0 3
40561: PPUSH
40562: CALL_OW 313
40566: ST_TO_ADDR
// if t then
40567: LD_VAR 0 4
40571: IFFALSE 40619
// for j in t do
40573: LD_ADDR_VAR 0 7
40577: PUSH
40578: LD_VAR 0 4
40582: PUSH
40583: FOR_IN
40584: IFFALSE 40617
// result := Replace ( result , result + 1 , j ) ;
40586: LD_ADDR_VAR 0 2
40590: PUSH
40591: LD_VAR 0 2
40595: PPUSH
40596: LD_VAR 0 2
40600: PUSH
40601: LD_INT 1
40603: PLUS
40604: PPUSH
40605: LD_VAR 0 7
40609: PPUSH
40610: CALL_OW 1
40614: ST_TO_ADDR
40615: GO 40583
40617: POP
40618: POP
// end ;
40619: GO 40549
40621: POP
40622: POP
// if not result then
40623: LD_VAR 0 2
40627: NOT
40628: IFFALSE 40632
// exit ;
40630: GO 40780
// mech := result [ 1 ] ;
40632: LD_ADDR_VAR 0 5
40636: PUSH
40637: LD_VAR 0 2
40641: PUSH
40642: LD_INT 1
40644: ARRAY
40645: ST_TO_ADDR
// if result > 1 then
40646: LD_VAR 0 2
40650: PUSH
40651: LD_INT 1
40653: GREATER
40654: IFFALSE 40766
// begin for i = 2 to result do
40656: LD_ADDR_VAR 0 3
40660: PUSH
40661: DOUBLE
40662: LD_INT 2
40664: DEC
40665: ST_TO_ADDR
40666: LD_VAR 0 2
40670: PUSH
40671: FOR_TO
40672: IFFALSE 40764
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
40674: LD_ADDR_VAR 0 4
40678: PUSH
40679: LD_VAR 0 2
40683: PUSH
40684: LD_VAR 0 3
40688: ARRAY
40689: PPUSH
40690: LD_INT 3
40692: PPUSH
40693: CALL_OW 259
40697: PUSH
40698: LD_VAR 0 2
40702: PUSH
40703: LD_VAR 0 3
40707: ARRAY
40708: PPUSH
40709: CALL_OW 432
40713: MINUS
40714: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
40715: LD_VAR 0 4
40719: PUSH
40720: LD_VAR 0 5
40724: PPUSH
40725: LD_INT 3
40727: PPUSH
40728: CALL_OW 259
40732: PUSH
40733: LD_VAR 0 5
40737: PPUSH
40738: CALL_OW 432
40742: MINUS
40743: GREATEREQUAL
40744: IFFALSE 40762
// mech := result [ i ] ;
40746: LD_ADDR_VAR 0 5
40750: PUSH
40751: LD_VAR 0 2
40755: PUSH
40756: LD_VAR 0 3
40760: ARRAY
40761: ST_TO_ADDR
// end ;
40762: GO 40671
40764: POP
40765: POP
// end ; ComLinkTo ( vehicle , mech ) ;
40766: LD_VAR 0 1
40770: PPUSH
40771: LD_VAR 0 5
40775: PPUSH
40776: CALL_OW 135
// end ;
40780: LD_VAR 0 2
40784: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
40785: LD_INT 0
40787: PPUSH
40788: PPUSH
40789: PPUSH
40790: PPUSH
40791: PPUSH
40792: PPUSH
40793: PPUSH
40794: PPUSH
40795: PPUSH
40796: PPUSH
40797: PPUSH
40798: PPUSH
40799: PPUSH
// result := [ ] ;
40800: LD_ADDR_VAR 0 7
40804: PUSH
40805: EMPTY
40806: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
40807: LD_VAR 0 1
40811: PPUSH
40812: CALL_OW 266
40816: PUSH
40817: LD_INT 0
40819: PUSH
40820: LD_INT 1
40822: PUSH
40823: EMPTY
40824: LIST
40825: LIST
40826: IN
40827: NOT
40828: IFFALSE 40832
// exit ;
40830: GO 42466
// if name then
40832: LD_VAR 0 3
40836: IFFALSE 40852
// SetBName ( base_dep , name ) ;
40838: LD_VAR 0 1
40842: PPUSH
40843: LD_VAR 0 3
40847: PPUSH
40848: CALL_OW 500
// base := GetBase ( base_dep ) ;
40852: LD_ADDR_VAR 0 15
40856: PUSH
40857: LD_VAR 0 1
40861: PPUSH
40862: CALL_OW 274
40866: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
40867: LD_ADDR_VAR 0 16
40871: PUSH
40872: LD_VAR 0 1
40876: PPUSH
40877: CALL_OW 255
40881: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
40882: LD_ADDR_VAR 0 17
40886: PUSH
40887: LD_VAR 0 1
40891: PPUSH
40892: CALL_OW 248
40896: ST_TO_ADDR
// if sources then
40897: LD_VAR 0 5
40901: IFFALSE 40948
// for i = 1 to 3 do
40903: LD_ADDR_VAR 0 8
40907: PUSH
40908: DOUBLE
40909: LD_INT 1
40911: DEC
40912: ST_TO_ADDR
40913: LD_INT 3
40915: PUSH
40916: FOR_TO
40917: IFFALSE 40946
// AddResourceType ( base , i , sources [ i ] ) ;
40919: LD_VAR 0 15
40923: PPUSH
40924: LD_VAR 0 8
40928: PPUSH
40929: LD_VAR 0 5
40933: PUSH
40934: LD_VAR 0 8
40938: ARRAY
40939: PPUSH
40940: CALL_OW 276
40944: GO 40916
40946: POP
40947: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
40948: LD_ADDR_VAR 0 18
40952: PUSH
40953: LD_VAR 0 15
40957: PPUSH
40958: LD_VAR 0 2
40962: PPUSH
40963: LD_INT 1
40965: PPUSH
40966: CALL 40209 0 3
40970: ST_TO_ADDR
// InitHc ;
40971: CALL_OW 19
// InitUc ;
40975: CALL_OW 18
// uc_side := side ;
40979: LD_ADDR_OWVAR 20
40983: PUSH
40984: LD_VAR 0 16
40988: ST_TO_ADDR
// uc_nation := nation ;
40989: LD_ADDR_OWVAR 21
40993: PUSH
40994: LD_VAR 0 17
40998: ST_TO_ADDR
// if buildings then
40999: LD_VAR 0 18
41003: IFFALSE 42325
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
41005: LD_ADDR_VAR 0 19
41009: PUSH
41010: LD_VAR 0 18
41014: PPUSH
41015: LD_INT 2
41017: PUSH
41018: LD_INT 30
41020: PUSH
41021: LD_INT 29
41023: PUSH
41024: EMPTY
41025: LIST
41026: LIST
41027: PUSH
41028: LD_INT 30
41030: PUSH
41031: LD_INT 30
41033: PUSH
41034: EMPTY
41035: LIST
41036: LIST
41037: PUSH
41038: EMPTY
41039: LIST
41040: LIST
41041: LIST
41042: PPUSH
41043: CALL_OW 72
41047: ST_TO_ADDR
// if tmp then
41048: LD_VAR 0 19
41052: IFFALSE 41100
// for i in tmp do
41054: LD_ADDR_VAR 0 8
41058: PUSH
41059: LD_VAR 0 19
41063: PUSH
41064: FOR_IN
41065: IFFALSE 41098
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
41067: LD_VAR 0 8
41071: PPUSH
41072: CALL_OW 250
41076: PPUSH
41077: LD_VAR 0 8
41081: PPUSH
41082: CALL_OW 251
41086: PPUSH
41087: LD_VAR 0 16
41091: PPUSH
41092: CALL_OW 441
41096: GO 41064
41098: POP
41099: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
41100: LD_VAR 0 18
41104: PPUSH
41105: LD_INT 2
41107: PUSH
41108: LD_INT 30
41110: PUSH
41111: LD_INT 32
41113: PUSH
41114: EMPTY
41115: LIST
41116: LIST
41117: PUSH
41118: LD_INT 30
41120: PUSH
41121: LD_INT 33
41123: PUSH
41124: EMPTY
41125: LIST
41126: LIST
41127: PUSH
41128: EMPTY
41129: LIST
41130: LIST
41131: LIST
41132: PPUSH
41133: CALL_OW 72
41137: IFFALSE 41225
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
41139: LD_ADDR_VAR 0 8
41143: PUSH
41144: LD_VAR 0 18
41148: PPUSH
41149: LD_INT 2
41151: PUSH
41152: LD_INT 30
41154: PUSH
41155: LD_INT 32
41157: PUSH
41158: EMPTY
41159: LIST
41160: LIST
41161: PUSH
41162: LD_INT 30
41164: PUSH
41165: LD_INT 33
41167: PUSH
41168: EMPTY
41169: LIST
41170: LIST
41171: PUSH
41172: EMPTY
41173: LIST
41174: LIST
41175: LIST
41176: PPUSH
41177: CALL_OW 72
41181: PUSH
41182: FOR_IN
41183: IFFALSE 41223
// begin if not GetBWeapon ( i ) then
41185: LD_VAR 0 8
41189: PPUSH
41190: CALL_OW 269
41194: NOT
41195: IFFALSE 41221
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
41197: LD_VAR 0 8
41201: PPUSH
41202: LD_VAR 0 8
41206: PPUSH
41207: LD_VAR 0 2
41211: PPUSH
41212: CALL 42471 0 2
41216: PPUSH
41217: CALL_OW 431
// end ;
41221: GO 41182
41223: POP
41224: POP
// end ; for i = 1 to personel do
41225: LD_ADDR_VAR 0 8
41229: PUSH
41230: DOUBLE
41231: LD_INT 1
41233: DEC
41234: ST_TO_ADDR
41235: LD_VAR 0 6
41239: PUSH
41240: FOR_TO
41241: IFFALSE 42305
// begin if i > 4 then
41243: LD_VAR 0 8
41247: PUSH
41248: LD_INT 4
41250: GREATER
41251: IFFALSE 41255
// break ;
41253: GO 42305
// case i of 1 :
41255: LD_VAR 0 8
41259: PUSH
41260: LD_INT 1
41262: DOUBLE
41263: EQUAL
41264: IFTRUE 41268
41266: GO 41348
41268: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
41269: LD_ADDR_VAR 0 12
41273: PUSH
41274: LD_VAR 0 18
41278: PPUSH
41279: LD_INT 22
41281: PUSH
41282: LD_VAR 0 16
41286: PUSH
41287: EMPTY
41288: LIST
41289: LIST
41290: PUSH
41291: LD_INT 58
41293: PUSH
41294: EMPTY
41295: LIST
41296: PUSH
41297: LD_INT 2
41299: PUSH
41300: LD_INT 30
41302: PUSH
41303: LD_INT 32
41305: PUSH
41306: EMPTY
41307: LIST
41308: LIST
41309: PUSH
41310: LD_INT 30
41312: PUSH
41313: LD_INT 4
41315: PUSH
41316: EMPTY
41317: LIST
41318: LIST
41319: PUSH
41320: LD_INT 30
41322: PUSH
41323: LD_INT 5
41325: PUSH
41326: EMPTY
41327: LIST
41328: LIST
41329: PUSH
41330: EMPTY
41331: LIST
41332: LIST
41333: LIST
41334: LIST
41335: PUSH
41336: EMPTY
41337: LIST
41338: LIST
41339: LIST
41340: PPUSH
41341: CALL_OW 72
41345: ST_TO_ADDR
41346: GO 41570
41348: LD_INT 2
41350: DOUBLE
41351: EQUAL
41352: IFTRUE 41356
41354: GO 41418
41356: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
41357: LD_ADDR_VAR 0 12
41361: PUSH
41362: LD_VAR 0 18
41366: PPUSH
41367: LD_INT 22
41369: PUSH
41370: LD_VAR 0 16
41374: PUSH
41375: EMPTY
41376: LIST
41377: LIST
41378: PUSH
41379: LD_INT 2
41381: PUSH
41382: LD_INT 30
41384: PUSH
41385: LD_INT 0
41387: PUSH
41388: EMPTY
41389: LIST
41390: LIST
41391: PUSH
41392: LD_INT 30
41394: PUSH
41395: LD_INT 1
41397: PUSH
41398: EMPTY
41399: LIST
41400: LIST
41401: PUSH
41402: EMPTY
41403: LIST
41404: LIST
41405: LIST
41406: PUSH
41407: EMPTY
41408: LIST
41409: LIST
41410: PPUSH
41411: CALL_OW 72
41415: ST_TO_ADDR
41416: GO 41570
41418: LD_INT 3
41420: DOUBLE
41421: EQUAL
41422: IFTRUE 41426
41424: GO 41488
41426: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
41427: LD_ADDR_VAR 0 12
41431: PUSH
41432: LD_VAR 0 18
41436: PPUSH
41437: LD_INT 22
41439: PUSH
41440: LD_VAR 0 16
41444: PUSH
41445: EMPTY
41446: LIST
41447: LIST
41448: PUSH
41449: LD_INT 2
41451: PUSH
41452: LD_INT 30
41454: PUSH
41455: LD_INT 2
41457: PUSH
41458: EMPTY
41459: LIST
41460: LIST
41461: PUSH
41462: LD_INT 30
41464: PUSH
41465: LD_INT 3
41467: PUSH
41468: EMPTY
41469: LIST
41470: LIST
41471: PUSH
41472: EMPTY
41473: LIST
41474: LIST
41475: LIST
41476: PUSH
41477: EMPTY
41478: LIST
41479: LIST
41480: PPUSH
41481: CALL_OW 72
41485: ST_TO_ADDR
41486: GO 41570
41488: LD_INT 4
41490: DOUBLE
41491: EQUAL
41492: IFTRUE 41496
41494: GO 41569
41496: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
41497: LD_ADDR_VAR 0 12
41501: PUSH
41502: LD_VAR 0 18
41506: PPUSH
41507: LD_INT 22
41509: PUSH
41510: LD_VAR 0 16
41514: PUSH
41515: EMPTY
41516: LIST
41517: LIST
41518: PUSH
41519: LD_INT 2
41521: PUSH
41522: LD_INT 30
41524: PUSH
41525: LD_INT 6
41527: PUSH
41528: EMPTY
41529: LIST
41530: LIST
41531: PUSH
41532: LD_INT 30
41534: PUSH
41535: LD_INT 7
41537: PUSH
41538: EMPTY
41539: LIST
41540: LIST
41541: PUSH
41542: LD_INT 30
41544: PUSH
41545: LD_INT 8
41547: PUSH
41548: EMPTY
41549: LIST
41550: LIST
41551: PUSH
41552: EMPTY
41553: LIST
41554: LIST
41555: LIST
41556: LIST
41557: PUSH
41558: EMPTY
41559: LIST
41560: LIST
41561: PPUSH
41562: CALL_OW 72
41566: ST_TO_ADDR
41567: GO 41570
41569: POP
// if i = 1 then
41570: LD_VAR 0 8
41574: PUSH
41575: LD_INT 1
41577: EQUAL
41578: IFFALSE 41689
// begin tmp := [ ] ;
41580: LD_ADDR_VAR 0 19
41584: PUSH
41585: EMPTY
41586: ST_TO_ADDR
// for j in f do
41587: LD_ADDR_VAR 0 9
41591: PUSH
41592: LD_VAR 0 12
41596: PUSH
41597: FOR_IN
41598: IFFALSE 41671
// if GetBType ( j ) = b_bunker then
41600: LD_VAR 0 9
41604: PPUSH
41605: CALL_OW 266
41609: PUSH
41610: LD_INT 32
41612: EQUAL
41613: IFFALSE 41640
// tmp := Insert ( tmp , 1 , j ) else
41615: LD_ADDR_VAR 0 19
41619: PUSH
41620: LD_VAR 0 19
41624: PPUSH
41625: LD_INT 1
41627: PPUSH
41628: LD_VAR 0 9
41632: PPUSH
41633: CALL_OW 2
41637: ST_TO_ADDR
41638: GO 41669
// tmp := Insert ( tmp , tmp + 1 , j ) ;
41640: LD_ADDR_VAR 0 19
41644: PUSH
41645: LD_VAR 0 19
41649: PPUSH
41650: LD_VAR 0 19
41654: PUSH
41655: LD_INT 1
41657: PLUS
41658: PPUSH
41659: LD_VAR 0 9
41663: PPUSH
41664: CALL_OW 2
41668: ST_TO_ADDR
41669: GO 41597
41671: POP
41672: POP
// if tmp then
41673: LD_VAR 0 19
41677: IFFALSE 41689
// f := tmp ;
41679: LD_ADDR_VAR 0 12
41683: PUSH
41684: LD_VAR 0 19
41688: ST_TO_ADDR
// end ; x := personel [ i ] ;
41689: LD_ADDR_VAR 0 13
41693: PUSH
41694: LD_VAR 0 6
41698: PUSH
41699: LD_VAR 0 8
41703: ARRAY
41704: ST_TO_ADDR
// if x = - 1 then
41705: LD_VAR 0 13
41709: PUSH
41710: LD_INT 1
41712: NEG
41713: EQUAL
41714: IFFALSE 41923
// begin for j in f do
41716: LD_ADDR_VAR 0 9
41720: PUSH
41721: LD_VAR 0 12
41725: PUSH
41726: FOR_IN
41727: IFFALSE 41919
// repeat InitHc ;
41729: CALL_OW 19
// if GetBType ( j ) = b_barracks then
41733: LD_VAR 0 9
41737: PPUSH
41738: CALL_OW 266
41742: PUSH
41743: LD_INT 5
41745: EQUAL
41746: IFFALSE 41816
// begin if UnitsInside ( j ) < 3 then
41748: LD_VAR 0 9
41752: PPUSH
41753: CALL_OW 313
41757: PUSH
41758: LD_INT 3
41760: LESS
41761: IFFALSE 41797
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
41763: LD_INT 0
41765: PPUSH
41766: LD_INT 5
41768: PUSH
41769: LD_INT 8
41771: PUSH
41772: LD_INT 9
41774: PUSH
41775: EMPTY
41776: LIST
41777: LIST
41778: LIST
41779: PUSH
41780: LD_VAR 0 17
41784: ARRAY
41785: PPUSH
41786: LD_VAR 0 4
41790: PPUSH
41791: CALL_OW 380
41795: GO 41814
// PrepareHuman ( false , i , skill ) ;
41797: LD_INT 0
41799: PPUSH
41800: LD_VAR 0 8
41804: PPUSH
41805: LD_VAR 0 4
41809: PPUSH
41810: CALL_OW 380
// end else
41814: GO 41833
// PrepareHuman ( false , i , skill ) ;
41816: LD_INT 0
41818: PPUSH
41819: LD_VAR 0 8
41823: PPUSH
41824: LD_VAR 0 4
41828: PPUSH
41829: CALL_OW 380
// un := CreateHuman ;
41833: LD_ADDR_VAR 0 14
41837: PUSH
41838: CALL_OW 44
41842: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41843: LD_ADDR_VAR 0 7
41847: PUSH
41848: LD_VAR 0 7
41852: PPUSH
41853: LD_INT 1
41855: PPUSH
41856: LD_VAR 0 14
41860: PPUSH
41861: CALL_OW 2
41865: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
41866: LD_VAR 0 14
41870: PPUSH
41871: LD_VAR 0 9
41875: PPUSH
41876: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
41880: LD_VAR 0 9
41884: PPUSH
41885: CALL_OW 313
41889: PUSH
41890: LD_INT 6
41892: EQUAL
41893: PUSH
41894: LD_VAR 0 9
41898: PPUSH
41899: CALL_OW 266
41903: PUSH
41904: LD_INT 32
41906: PUSH
41907: LD_INT 31
41909: PUSH
41910: EMPTY
41911: LIST
41912: LIST
41913: IN
41914: OR
41915: IFFALSE 41729
41917: GO 41726
41919: POP
41920: POP
// end else
41921: GO 42303
// for j = 1 to x do
41923: LD_ADDR_VAR 0 9
41927: PUSH
41928: DOUBLE
41929: LD_INT 1
41931: DEC
41932: ST_TO_ADDR
41933: LD_VAR 0 13
41937: PUSH
41938: FOR_TO
41939: IFFALSE 42301
// begin InitHc ;
41941: CALL_OW 19
// if not f then
41945: LD_VAR 0 12
41949: NOT
41950: IFFALSE 42039
// begin PrepareHuman ( false , i , skill ) ;
41952: LD_INT 0
41954: PPUSH
41955: LD_VAR 0 8
41959: PPUSH
41960: LD_VAR 0 4
41964: PPUSH
41965: CALL_OW 380
// un := CreateHuman ;
41969: LD_ADDR_VAR 0 14
41973: PUSH
41974: CALL_OW 44
41978: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41979: LD_ADDR_VAR 0 7
41983: PUSH
41984: LD_VAR 0 7
41988: PPUSH
41989: LD_INT 1
41991: PPUSH
41992: LD_VAR 0 14
41996: PPUSH
41997: CALL_OW 2
42001: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
42002: LD_VAR 0 14
42006: PPUSH
42007: LD_VAR 0 1
42011: PPUSH
42012: CALL_OW 250
42016: PPUSH
42017: LD_VAR 0 1
42021: PPUSH
42022: CALL_OW 251
42026: PPUSH
42027: LD_INT 10
42029: PPUSH
42030: LD_INT 0
42032: PPUSH
42033: CALL_OW 50
// continue ;
42037: GO 41938
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
42039: LD_VAR 0 12
42043: PUSH
42044: LD_INT 1
42046: ARRAY
42047: PPUSH
42048: CALL_OW 313
42052: PUSH
42053: LD_VAR 0 12
42057: PUSH
42058: LD_INT 1
42060: ARRAY
42061: PPUSH
42062: CALL_OW 266
42066: PUSH
42067: LD_INT 32
42069: PUSH
42070: LD_INT 31
42072: PUSH
42073: EMPTY
42074: LIST
42075: LIST
42076: IN
42077: AND
42078: PUSH
42079: LD_VAR 0 12
42083: PUSH
42084: LD_INT 1
42086: ARRAY
42087: PPUSH
42088: CALL_OW 313
42092: PUSH
42093: LD_INT 6
42095: EQUAL
42096: OR
42097: IFFALSE 42117
// f := Delete ( f , 1 ) ;
42099: LD_ADDR_VAR 0 12
42103: PUSH
42104: LD_VAR 0 12
42108: PPUSH
42109: LD_INT 1
42111: PPUSH
42112: CALL_OW 3
42116: ST_TO_ADDR
// if not f then
42117: LD_VAR 0 12
42121: NOT
42122: IFFALSE 42140
// begin x := x + 2 ;
42124: LD_ADDR_VAR 0 13
42128: PUSH
42129: LD_VAR 0 13
42133: PUSH
42134: LD_INT 2
42136: PLUS
42137: ST_TO_ADDR
// continue ;
42138: GO 41938
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
42140: LD_VAR 0 12
42144: PUSH
42145: LD_INT 1
42147: ARRAY
42148: PPUSH
42149: CALL_OW 266
42153: PUSH
42154: LD_INT 5
42156: EQUAL
42157: IFFALSE 42231
// begin if UnitsInside ( f [ 1 ] ) < 3 then
42159: LD_VAR 0 12
42163: PUSH
42164: LD_INT 1
42166: ARRAY
42167: PPUSH
42168: CALL_OW 313
42172: PUSH
42173: LD_INT 3
42175: LESS
42176: IFFALSE 42212
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
42178: LD_INT 0
42180: PPUSH
42181: LD_INT 5
42183: PUSH
42184: LD_INT 8
42186: PUSH
42187: LD_INT 9
42189: PUSH
42190: EMPTY
42191: LIST
42192: LIST
42193: LIST
42194: PUSH
42195: LD_VAR 0 17
42199: ARRAY
42200: PPUSH
42201: LD_VAR 0 4
42205: PPUSH
42206: CALL_OW 380
42210: GO 42229
// PrepareHuman ( false , i , skill ) ;
42212: LD_INT 0
42214: PPUSH
42215: LD_VAR 0 8
42219: PPUSH
42220: LD_VAR 0 4
42224: PPUSH
42225: CALL_OW 380
// end else
42229: GO 42248
// PrepareHuman ( false , i , skill ) ;
42231: LD_INT 0
42233: PPUSH
42234: LD_VAR 0 8
42238: PPUSH
42239: LD_VAR 0 4
42243: PPUSH
42244: CALL_OW 380
// un := CreateHuman ;
42248: LD_ADDR_VAR 0 14
42252: PUSH
42253: CALL_OW 44
42257: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
42258: LD_ADDR_VAR 0 7
42262: PUSH
42263: LD_VAR 0 7
42267: PPUSH
42268: LD_INT 1
42270: PPUSH
42271: LD_VAR 0 14
42275: PPUSH
42276: CALL_OW 2
42280: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
42281: LD_VAR 0 14
42285: PPUSH
42286: LD_VAR 0 12
42290: PUSH
42291: LD_INT 1
42293: ARRAY
42294: PPUSH
42295: CALL_OW 52
// end ;
42299: GO 41938
42301: POP
42302: POP
// end ;
42303: GO 41240
42305: POP
42306: POP
// result := result ^ buildings ;
42307: LD_ADDR_VAR 0 7
42311: PUSH
42312: LD_VAR 0 7
42316: PUSH
42317: LD_VAR 0 18
42321: ADD
42322: ST_TO_ADDR
// end else
42323: GO 42466
// begin for i = 1 to personel do
42325: LD_ADDR_VAR 0 8
42329: PUSH
42330: DOUBLE
42331: LD_INT 1
42333: DEC
42334: ST_TO_ADDR
42335: LD_VAR 0 6
42339: PUSH
42340: FOR_TO
42341: IFFALSE 42464
// begin if i > 4 then
42343: LD_VAR 0 8
42347: PUSH
42348: LD_INT 4
42350: GREATER
42351: IFFALSE 42355
// break ;
42353: GO 42464
// x := personel [ i ] ;
42355: LD_ADDR_VAR 0 13
42359: PUSH
42360: LD_VAR 0 6
42364: PUSH
42365: LD_VAR 0 8
42369: ARRAY
42370: ST_TO_ADDR
// if x = - 1 then
42371: LD_VAR 0 13
42375: PUSH
42376: LD_INT 1
42378: NEG
42379: EQUAL
42380: IFFALSE 42384
// continue ;
42382: GO 42340
// PrepareHuman ( false , i , skill ) ;
42384: LD_INT 0
42386: PPUSH
42387: LD_VAR 0 8
42391: PPUSH
42392: LD_VAR 0 4
42396: PPUSH
42397: CALL_OW 380
// un := CreateHuman ;
42401: LD_ADDR_VAR 0 14
42405: PUSH
42406: CALL_OW 44
42410: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
42411: LD_VAR 0 14
42415: PPUSH
42416: LD_VAR 0 1
42420: PPUSH
42421: CALL_OW 250
42425: PPUSH
42426: LD_VAR 0 1
42430: PPUSH
42431: CALL_OW 251
42435: PPUSH
42436: LD_INT 10
42438: PPUSH
42439: LD_INT 0
42441: PPUSH
42442: CALL_OW 50
// result := result ^ un ;
42446: LD_ADDR_VAR 0 7
42450: PUSH
42451: LD_VAR 0 7
42455: PUSH
42456: LD_VAR 0 14
42460: ADD
42461: ST_TO_ADDR
// end ;
42462: GO 42340
42464: POP
42465: POP
// end ; end ;
42466: LD_VAR 0 7
42470: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
42471: LD_INT 0
42473: PPUSH
42474: PPUSH
42475: PPUSH
42476: PPUSH
42477: PPUSH
42478: PPUSH
42479: PPUSH
42480: PPUSH
42481: PPUSH
42482: PPUSH
42483: PPUSH
42484: PPUSH
42485: PPUSH
42486: PPUSH
42487: PPUSH
42488: PPUSH
// result := false ;
42489: LD_ADDR_VAR 0 3
42493: PUSH
42494: LD_INT 0
42496: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
42497: LD_VAR 0 1
42501: NOT
42502: PUSH
42503: LD_VAR 0 1
42507: PPUSH
42508: CALL_OW 266
42512: PUSH
42513: LD_INT 32
42515: PUSH
42516: LD_INT 33
42518: PUSH
42519: EMPTY
42520: LIST
42521: LIST
42522: IN
42523: NOT
42524: OR
42525: IFFALSE 42529
// exit ;
42527: GO 43638
// nat := GetNation ( tower ) ;
42529: LD_ADDR_VAR 0 12
42533: PUSH
42534: LD_VAR 0 1
42538: PPUSH
42539: CALL_OW 248
42543: ST_TO_ADDR
// side := GetSide ( tower ) ;
42544: LD_ADDR_VAR 0 16
42548: PUSH
42549: LD_VAR 0 1
42553: PPUSH
42554: CALL_OW 255
42558: ST_TO_ADDR
// x := GetX ( tower ) ;
42559: LD_ADDR_VAR 0 10
42563: PUSH
42564: LD_VAR 0 1
42568: PPUSH
42569: CALL_OW 250
42573: ST_TO_ADDR
// y := GetY ( tower ) ;
42574: LD_ADDR_VAR 0 11
42578: PUSH
42579: LD_VAR 0 1
42583: PPUSH
42584: CALL_OW 251
42588: ST_TO_ADDR
// if not x or not y then
42589: LD_VAR 0 10
42593: NOT
42594: PUSH
42595: LD_VAR 0 11
42599: NOT
42600: OR
42601: IFFALSE 42605
// exit ;
42603: GO 43638
// weapon := 0 ;
42605: LD_ADDR_VAR 0 18
42609: PUSH
42610: LD_INT 0
42612: ST_TO_ADDR
// fac_list := [ ] ;
42613: LD_ADDR_VAR 0 17
42617: PUSH
42618: EMPTY
42619: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
42620: LD_ADDR_VAR 0 6
42624: PUSH
42625: LD_VAR 0 1
42629: PPUSH
42630: CALL_OW 274
42634: PPUSH
42635: LD_VAR 0 2
42639: PPUSH
42640: LD_INT 0
42642: PPUSH
42643: CALL 40209 0 3
42647: PPUSH
42648: LD_INT 30
42650: PUSH
42651: LD_INT 3
42653: PUSH
42654: EMPTY
42655: LIST
42656: LIST
42657: PPUSH
42658: CALL_OW 72
42662: ST_TO_ADDR
// if not factories then
42663: LD_VAR 0 6
42667: NOT
42668: IFFALSE 42672
// exit ;
42670: GO 43638
// for i in factories do
42672: LD_ADDR_VAR 0 8
42676: PUSH
42677: LD_VAR 0 6
42681: PUSH
42682: FOR_IN
42683: IFFALSE 42708
// fac_list := fac_list union AvailableWeaponList ( i ) ;
42685: LD_ADDR_VAR 0 17
42689: PUSH
42690: LD_VAR 0 17
42694: PUSH
42695: LD_VAR 0 8
42699: PPUSH
42700: CALL_OW 478
42704: UNION
42705: ST_TO_ADDR
42706: GO 42682
42708: POP
42709: POP
// if not fac_list then
42710: LD_VAR 0 17
42714: NOT
42715: IFFALSE 42719
// exit ;
42717: GO 43638
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
42719: LD_ADDR_VAR 0 5
42723: PUSH
42724: LD_INT 4
42726: PUSH
42727: LD_INT 5
42729: PUSH
42730: LD_INT 9
42732: PUSH
42733: LD_INT 10
42735: PUSH
42736: LD_INT 6
42738: PUSH
42739: LD_INT 7
42741: PUSH
42742: LD_INT 11
42744: PUSH
42745: EMPTY
42746: LIST
42747: LIST
42748: LIST
42749: LIST
42750: LIST
42751: LIST
42752: LIST
42753: PUSH
42754: LD_INT 27
42756: PUSH
42757: LD_INT 28
42759: PUSH
42760: LD_INT 26
42762: PUSH
42763: LD_INT 30
42765: PUSH
42766: EMPTY
42767: LIST
42768: LIST
42769: LIST
42770: LIST
42771: PUSH
42772: LD_INT 43
42774: PUSH
42775: LD_INT 44
42777: PUSH
42778: LD_INT 46
42780: PUSH
42781: LD_INT 45
42783: PUSH
42784: LD_INT 47
42786: PUSH
42787: LD_INT 49
42789: PUSH
42790: EMPTY
42791: LIST
42792: LIST
42793: LIST
42794: LIST
42795: LIST
42796: LIST
42797: PUSH
42798: EMPTY
42799: LIST
42800: LIST
42801: LIST
42802: PUSH
42803: LD_VAR 0 12
42807: ARRAY
42808: ST_TO_ADDR
// list := list isect fac_list ;
42809: LD_ADDR_VAR 0 5
42813: PUSH
42814: LD_VAR 0 5
42818: PUSH
42819: LD_VAR 0 17
42823: ISECT
42824: ST_TO_ADDR
// if not list then
42825: LD_VAR 0 5
42829: NOT
42830: IFFALSE 42834
// exit ;
42832: GO 43638
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
42834: LD_VAR 0 12
42838: PUSH
42839: LD_INT 3
42841: EQUAL
42842: PUSH
42843: LD_INT 49
42845: PUSH
42846: LD_VAR 0 5
42850: IN
42851: AND
42852: PUSH
42853: LD_INT 31
42855: PPUSH
42856: LD_VAR 0 16
42860: PPUSH
42861: CALL_OW 321
42865: PUSH
42866: LD_INT 2
42868: EQUAL
42869: AND
42870: IFFALSE 42930
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
42872: LD_INT 22
42874: PUSH
42875: LD_VAR 0 16
42879: PUSH
42880: EMPTY
42881: LIST
42882: LIST
42883: PUSH
42884: LD_INT 35
42886: PUSH
42887: LD_INT 49
42889: PUSH
42890: EMPTY
42891: LIST
42892: LIST
42893: PUSH
42894: LD_INT 91
42896: PUSH
42897: LD_VAR 0 1
42901: PUSH
42902: LD_INT 10
42904: PUSH
42905: EMPTY
42906: LIST
42907: LIST
42908: LIST
42909: PUSH
42910: EMPTY
42911: LIST
42912: LIST
42913: LIST
42914: PPUSH
42915: CALL_OW 69
42919: NOT
42920: IFFALSE 42930
// weapon := ru_time_lapser ;
42922: LD_ADDR_VAR 0 18
42926: PUSH
42927: LD_INT 49
42929: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
42930: LD_VAR 0 12
42934: PUSH
42935: LD_INT 1
42937: PUSH
42938: LD_INT 2
42940: PUSH
42941: EMPTY
42942: LIST
42943: LIST
42944: IN
42945: PUSH
42946: LD_INT 11
42948: PUSH
42949: LD_VAR 0 5
42953: IN
42954: PUSH
42955: LD_INT 30
42957: PUSH
42958: LD_VAR 0 5
42962: IN
42963: OR
42964: AND
42965: PUSH
42966: LD_INT 6
42968: PPUSH
42969: LD_VAR 0 16
42973: PPUSH
42974: CALL_OW 321
42978: PUSH
42979: LD_INT 2
42981: EQUAL
42982: AND
42983: IFFALSE 43148
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
42985: LD_INT 22
42987: PUSH
42988: LD_VAR 0 16
42992: PUSH
42993: EMPTY
42994: LIST
42995: LIST
42996: PUSH
42997: LD_INT 2
42999: PUSH
43000: LD_INT 35
43002: PUSH
43003: LD_INT 11
43005: PUSH
43006: EMPTY
43007: LIST
43008: LIST
43009: PUSH
43010: LD_INT 35
43012: PUSH
43013: LD_INT 30
43015: PUSH
43016: EMPTY
43017: LIST
43018: LIST
43019: PUSH
43020: EMPTY
43021: LIST
43022: LIST
43023: LIST
43024: PUSH
43025: LD_INT 91
43027: PUSH
43028: LD_VAR 0 1
43032: PUSH
43033: LD_INT 18
43035: PUSH
43036: EMPTY
43037: LIST
43038: LIST
43039: LIST
43040: PUSH
43041: EMPTY
43042: LIST
43043: LIST
43044: LIST
43045: PPUSH
43046: CALL_OW 69
43050: NOT
43051: PUSH
43052: LD_INT 22
43054: PUSH
43055: LD_VAR 0 16
43059: PUSH
43060: EMPTY
43061: LIST
43062: LIST
43063: PUSH
43064: LD_INT 2
43066: PUSH
43067: LD_INT 30
43069: PUSH
43070: LD_INT 32
43072: PUSH
43073: EMPTY
43074: LIST
43075: LIST
43076: PUSH
43077: LD_INT 30
43079: PUSH
43080: LD_INT 33
43082: PUSH
43083: EMPTY
43084: LIST
43085: LIST
43086: PUSH
43087: EMPTY
43088: LIST
43089: LIST
43090: LIST
43091: PUSH
43092: LD_INT 91
43094: PUSH
43095: LD_VAR 0 1
43099: PUSH
43100: LD_INT 12
43102: PUSH
43103: EMPTY
43104: LIST
43105: LIST
43106: LIST
43107: PUSH
43108: EMPTY
43109: LIST
43110: LIST
43111: LIST
43112: PUSH
43113: EMPTY
43114: LIST
43115: PPUSH
43116: CALL_OW 69
43120: PUSH
43121: LD_INT 2
43123: GREATER
43124: AND
43125: IFFALSE 43148
// weapon := [ us_radar , ar_radar ] [ nat ] ;
43127: LD_ADDR_VAR 0 18
43131: PUSH
43132: LD_INT 11
43134: PUSH
43135: LD_INT 30
43137: PUSH
43138: EMPTY
43139: LIST
43140: LIST
43141: PUSH
43142: LD_VAR 0 12
43146: ARRAY
43147: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
43148: LD_VAR 0 18
43152: NOT
43153: PUSH
43154: LD_INT 40
43156: PPUSH
43157: LD_VAR 0 16
43161: PPUSH
43162: CALL_OW 321
43166: PUSH
43167: LD_INT 2
43169: EQUAL
43170: AND
43171: PUSH
43172: LD_INT 7
43174: PUSH
43175: LD_VAR 0 5
43179: IN
43180: PUSH
43181: LD_INT 28
43183: PUSH
43184: LD_VAR 0 5
43188: IN
43189: OR
43190: PUSH
43191: LD_INT 45
43193: PUSH
43194: LD_VAR 0 5
43198: IN
43199: OR
43200: AND
43201: IFFALSE 43455
// begin hex := GetHexInfo ( x , y ) ;
43203: LD_ADDR_VAR 0 4
43207: PUSH
43208: LD_VAR 0 10
43212: PPUSH
43213: LD_VAR 0 11
43217: PPUSH
43218: CALL_OW 546
43222: ST_TO_ADDR
// if hex [ 1 ] then
43223: LD_VAR 0 4
43227: PUSH
43228: LD_INT 1
43230: ARRAY
43231: IFFALSE 43235
// exit ;
43233: GO 43638
// height := hex [ 2 ] ;
43235: LD_ADDR_VAR 0 15
43239: PUSH
43240: LD_VAR 0 4
43244: PUSH
43245: LD_INT 2
43247: ARRAY
43248: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
43249: LD_ADDR_VAR 0 14
43253: PUSH
43254: LD_INT 0
43256: PUSH
43257: LD_INT 2
43259: PUSH
43260: LD_INT 3
43262: PUSH
43263: LD_INT 5
43265: PUSH
43266: EMPTY
43267: LIST
43268: LIST
43269: LIST
43270: LIST
43271: ST_TO_ADDR
// for i in tmp do
43272: LD_ADDR_VAR 0 8
43276: PUSH
43277: LD_VAR 0 14
43281: PUSH
43282: FOR_IN
43283: IFFALSE 43453
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
43285: LD_ADDR_VAR 0 9
43289: PUSH
43290: LD_VAR 0 10
43294: PPUSH
43295: LD_VAR 0 8
43299: PPUSH
43300: LD_INT 5
43302: PPUSH
43303: CALL_OW 272
43307: PUSH
43308: LD_VAR 0 11
43312: PPUSH
43313: LD_VAR 0 8
43317: PPUSH
43318: LD_INT 5
43320: PPUSH
43321: CALL_OW 273
43325: PUSH
43326: EMPTY
43327: LIST
43328: LIST
43329: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
43330: LD_VAR 0 9
43334: PUSH
43335: LD_INT 1
43337: ARRAY
43338: PPUSH
43339: LD_VAR 0 9
43343: PUSH
43344: LD_INT 2
43346: ARRAY
43347: PPUSH
43348: CALL_OW 488
43352: IFFALSE 43451
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
43354: LD_ADDR_VAR 0 4
43358: PUSH
43359: LD_VAR 0 9
43363: PUSH
43364: LD_INT 1
43366: ARRAY
43367: PPUSH
43368: LD_VAR 0 9
43372: PUSH
43373: LD_INT 2
43375: ARRAY
43376: PPUSH
43377: CALL_OW 546
43381: ST_TO_ADDR
// if hex [ 1 ] then
43382: LD_VAR 0 4
43386: PUSH
43387: LD_INT 1
43389: ARRAY
43390: IFFALSE 43394
// continue ;
43392: GO 43282
// h := hex [ 2 ] ;
43394: LD_ADDR_VAR 0 13
43398: PUSH
43399: LD_VAR 0 4
43403: PUSH
43404: LD_INT 2
43406: ARRAY
43407: ST_TO_ADDR
// if h + 7 < height then
43408: LD_VAR 0 13
43412: PUSH
43413: LD_INT 7
43415: PLUS
43416: PUSH
43417: LD_VAR 0 15
43421: LESS
43422: IFFALSE 43451
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
43424: LD_ADDR_VAR 0 18
43428: PUSH
43429: LD_INT 7
43431: PUSH
43432: LD_INT 28
43434: PUSH
43435: LD_INT 45
43437: PUSH
43438: EMPTY
43439: LIST
43440: LIST
43441: LIST
43442: PUSH
43443: LD_VAR 0 12
43447: ARRAY
43448: ST_TO_ADDR
// break ;
43449: GO 43453
// end ; end ; end ;
43451: GO 43282
43453: POP
43454: POP
// end ; if not weapon then
43455: LD_VAR 0 18
43459: NOT
43460: IFFALSE 43520
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
43462: LD_ADDR_VAR 0 5
43466: PUSH
43467: LD_VAR 0 5
43471: PUSH
43472: LD_INT 11
43474: PUSH
43475: LD_INT 30
43477: PUSH
43478: LD_INT 49
43480: PUSH
43481: EMPTY
43482: LIST
43483: LIST
43484: LIST
43485: DIFF
43486: ST_TO_ADDR
// if not list then
43487: LD_VAR 0 5
43491: NOT
43492: IFFALSE 43496
// exit ;
43494: GO 43638
// weapon := list [ rand ( 1 , list ) ] ;
43496: LD_ADDR_VAR 0 18
43500: PUSH
43501: LD_VAR 0 5
43505: PUSH
43506: LD_INT 1
43508: PPUSH
43509: LD_VAR 0 5
43513: PPUSH
43514: CALL_OW 12
43518: ARRAY
43519: ST_TO_ADDR
// end ; if weapon then
43520: LD_VAR 0 18
43524: IFFALSE 43638
// begin tmp := CostOfWeapon ( weapon ) ;
43526: LD_ADDR_VAR 0 14
43530: PUSH
43531: LD_VAR 0 18
43535: PPUSH
43536: CALL_OW 451
43540: ST_TO_ADDR
// j := GetBase ( tower ) ;
43541: LD_ADDR_VAR 0 9
43545: PUSH
43546: LD_VAR 0 1
43550: PPUSH
43551: CALL_OW 274
43555: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
43556: LD_VAR 0 9
43560: PPUSH
43561: LD_INT 1
43563: PPUSH
43564: CALL_OW 275
43568: PUSH
43569: LD_VAR 0 14
43573: PUSH
43574: LD_INT 1
43576: ARRAY
43577: GREATEREQUAL
43578: PUSH
43579: LD_VAR 0 9
43583: PPUSH
43584: LD_INT 2
43586: PPUSH
43587: CALL_OW 275
43591: PUSH
43592: LD_VAR 0 14
43596: PUSH
43597: LD_INT 2
43599: ARRAY
43600: GREATEREQUAL
43601: AND
43602: PUSH
43603: LD_VAR 0 9
43607: PPUSH
43608: LD_INT 3
43610: PPUSH
43611: CALL_OW 275
43615: PUSH
43616: LD_VAR 0 14
43620: PUSH
43621: LD_INT 3
43623: ARRAY
43624: GREATEREQUAL
43625: AND
43626: IFFALSE 43638
// result := weapon ;
43628: LD_ADDR_VAR 0 3
43632: PUSH
43633: LD_VAR 0 18
43637: ST_TO_ADDR
// end ; end ;
43638: LD_VAR 0 3
43642: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
43643: LD_INT 0
43645: PPUSH
43646: PPUSH
// result := true ;
43647: LD_ADDR_VAR 0 3
43651: PUSH
43652: LD_INT 1
43654: ST_TO_ADDR
// if array1 = array2 then
43655: LD_VAR 0 1
43659: PUSH
43660: LD_VAR 0 2
43664: EQUAL
43665: IFFALSE 43725
// begin for i = 1 to array1 do
43667: LD_ADDR_VAR 0 4
43671: PUSH
43672: DOUBLE
43673: LD_INT 1
43675: DEC
43676: ST_TO_ADDR
43677: LD_VAR 0 1
43681: PUSH
43682: FOR_TO
43683: IFFALSE 43721
// if array1 [ i ] <> array2 [ i ] then
43685: LD_VAR 0 1
43689: PUSH
43690: LD_VAR 0 4
43694: ARRAY
43695: PUSH
43696: LD_VAR 0 2
43700: PUSH
43701: LD_VAR 0 4
43705: ARRAY
43706: NONEQUAL
43707: IFFALSE 43719
// begin result := false ;
43709: LD_ADDR_VAR 0 3
43713: PUSH
43714: LD_INT 0
43716: ST_TO_ADDR
// break ;
43717: GO 43721
// end ;
43719: GO 43682
43721: POP
43722: POP
// end else
43723: GO 43733
// result := false ;
43725: LD_ADDR_VAR 0 3
43729: PUSH
43730: LD_INT 0
43732: ST_TO_ADDR
// end ;
43733: LD_VAR 0 3
43737: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
43738: LD_INT 0
43740: PPUSH
43741: PPUSH
// if not array1 or not array2 then
43742: LD_VAR 0 1
43746: NOT
43747: PUSH
43748: LD_VAR 0 2
43752: NOT
43753: OR
43754: IFFALSE 43758
// exit ;
43756: GO 43822
// result := true ;
43758: LD_ADDR_VAR 0 3
43762: PUSH
43763: LD_INT 1
43765: ST_TO_ADDR
// for i = 1 to array1 do
43766: LD_ADDR_VAR 0 4
43770: PUSH
43771: DOUBLE
43772: LD_INT 1
43774: DEC
43775: ST_TO_ADDR
43776: LD_VAR 0 1
43780: PUSH
43781: FOR_TO
43782: IFFALSE 43820
// if array1 [ i ] <> array2 [ i ] then
43784: LD_VAR 0 1
43788: PUSH
43789: LD_VAR 0 4
43793: ARRAY
43794: PUSH
43795: LD_VAR 0 2
43799: PUSH
43800: LD_VAR 0 4
43804: ARRAY
43805: NONEQUAL
43806: IFFALSE 43818
// begin result := false ;
43808: LD_ADDR_VAR 0 3
43812: PUSH
43813: LD_INT 0
43815: ST_TO_ADDR
// break ;
43816: GO 43820
// end ;
43818: GO 43781
43820: POP
43821: POP
// end ;
43822: LD_VAR 0 3
43826: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
43827: LD_INT 0
43829: PPUSH
43830: PPUSH
43831: PPUSH
// pom := GetBase ( fac ) ;
43832: LD_ADDR_VAR 0 5
43836: PUSH
43837: LD_VAR 0 1
43841: PPUSH
43842: CALL_OW 274
43846: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
43847: LD_ADDR_VAR 0 4
43851: PUSH
43852: LD_VAR 0 2
43856: PUSH
43857: LD_INT 1
43859: ARRAY
43860: PPUSH
43861: LD_VAR 0 2
43865: PUSH
43866: LD_INT 2
43868: ARRAY
43869: PPUSH
43870: LD_VAR 0 2
43874: PUSH
43875: LD_INT 3
43877: ARRAY
43878: PPUSH
43879: LD_VAR 0 2
43883: PUSH
43884: LD_INT 4
43886: ARRAY
43887: PPUSH
43888: CALL_OW 449
43892: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43893: LD_ADDR_VAR 0 3
43897: PUSH
43898: LD_VAR 0 5
43902: PPUSH
43903: LD_INT 1
43905: PPUSH
43906: CALL_OW 275
43910: PUSH
43911: LD_VAR 0 4
43915: PUSH
43916: LD_INT 1
43918: ARRAY
43919: GREATEREQUAL
43920: PUSH
43921: LD_VAR 0 5
43925: PPUSH
43926: LD_INT 2
43928: PPUSH
43929: CALL_OW 275
43933: PUSH
43934: LD_VAR 0 4
43938: PUSH
43939: LD_INT 2
43941: ARRAY
43942: GREATEREQUAL
43943: AND
43944: PUSH
43945: LD_VAR 0 5
43949: PPUSH
43950: LD_INT 3
43952: PPUSH
43953: CALL_OW 275
43957: PUSH
43958: LD_VAR 0 4
43962: PUSH
43963: LD_INT 3
43965: ARRAY
43966: GREATEREQUAL
43967: AND
43968: ST_TO_ADDR
// end ;
43969: LD_VAR 0 3
43973: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
43974: LD_INT 0
43976: PPUSH
43977: PPUSH
43978: PPUSH
43979: PPUSH
// pom := GetBase ( building ) ;
43980: LD_ADDR_VAR 0 3
43984: PUSH
43985: LD_VAR 0 1
43989: PPUSH
43990: CALL_OW 274
43994: ST_TO_ADDR
// if not pom then
43995: LD_VAR 0 3
43999: NOT
44000: IFFALSE 44004
// exit ;
44002: GO 44174
// btype := GetBType ( building ) ;
44004: LD_ADDR_VAR 0 5
44008: PUSH
44009: LD_VAR 0 1
44013: PPUSH
44014: CALL_OW 266
44018: ST_TO_ADDR
// if btype = b_armoury then
44019: LD_VAR 0 5
44023: PUSH
44024: LD_INT 4
44026: EQUAL
44027: IFFALSE 44037
// btype := b_barracks ;
44029: LD_ADDR_VAR 0 5
44033: PUSH
44034: LD_INT 5
44036: ST_TO_ADDR
// if btype = b_depot then
44037: LD_VAR 0 5
44041: PUSH
44042: LD_INT 0
44044: EQUAL
44045: IFFALSE 44055
// btype := b_warehouse ;
44047: LD_ADDR_VAR 0 5
44051: PUSH
44052: LD_INT 1
44054: ST_TO_ADDR
// if btype = b_workshop then
44055: LD_VAR 0 5
44059: PUSH
44060: LD_INT 2
44062: EQUAL
44063: IFFALSE 44073
// btype := b_factory ;
44065: LD_ADDR_VAR 0 5
44069: PUSH
44070: LD_INT 3
44072: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
44073: LD_ADDR_VAR 0 4
44077: PUSH
44078: LD_VAR 0 5
44082: PPUSH
44083: LD_VAR 0 1
44087: PPUSH
44088: CALL_OW 248
44092: PPUSH
44093: CALL_OW 450
44097: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
44098: LD_ADDR_VAR 0 2
44102: PUSH
44103: LD_VAR 0 3
44107: PPUSH
44108: LD_INT 1
44110: PPUSH
44111: CALL_OW 275
44115: PUSH
44116: LD_VAR 0 4
44120: PUSH
44121: LD_INT 1
44123: ARRAY
44124: GREATEREQUAL
44125: PUSH
44126: LD_VAR 0 3
44130: PPUSH
44131: LD_INT 2
44133: PPUSH
44134: CALL_OW 275
44138: PUSH
44139: LD_VAR 0 4
44143: PUSH
44144: LD_INT 2
44146: ARRAY
44147: GREATEREQUAL
44148: AND
44149: PUSH
44150: LD_VAR 0 3
44154: PPUSH
44155: LD_INT 3
44157: PPUSH
44158: CALL_OW 275
44162: PUSH
44163: LD_VAR 0 4
44167: PUSH
44168: LD_INT 3
44170: ARRAY
44171: GREATEREQUAL
44172: AND
44173: ST_TO_ADDR
// end ;
44174: LD_VAR 0 2
44178: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
44179: LD_INT 0
44181: PPUSH
44182: PPUSH
44183: PPUSH
// pom := GetBase ( building ) ;
44184: LD_ADDR_VAR 0 4
44188: PUSH
44189: LD_VAR 0 1
44193: PPUSH
44194: CALL_OW 274
44198: ST_TO_ADDR
// if not pom then
44199: LD_VAR 0 4
44203: NOT
44204: IFFALSE 44208
// exit ;
44206: GO 44309
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
44208: LD_ADDR_VAR 0 5
44212: PUSH
44213: LD_VAR 0 2
44217: PPUSH
44218: LD_VAR 0 1
44222: PPUSH
44223: CALL_OW 248
44227: PPUSH
44228: CALL_OW 450
44232: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
44233: LD_ADDR_VAR 0 3
44237: PUSH
44238: LD_VAR 0 4
44242: PPUSH
44243: LD_INT 1
44245: PPUSH
44246: CALL_OW 275
44250: PUSH
44251: LD_VAR 0 5
44255: PUSH
44256: LD_INT 1
44258: ARRAY
44259: GREATEREQUAL
44260: PUSH
44261: LD_VAR 0 4
44265: PPUSH
44266: LD_INT 2
44268: PPUSH
44269: CALL_OW 275
44273: PUSH
44274: LD_VAR 0 5
44278: PUSH
44279: LD_INT 2
44281: ARRAY
44282: GREATEREQUAL
44283: AND
44284: PUSH
44285: LD_VAR 0 4
44289: PPUSH
44290: LD_INT 3
44292: PPUSH
44293: CALL_OW 275
44297: PUSH
44298: LD_VAR 0 5
44302: PUSH
44303: LD_INT 3
44305: ARRAY
44306: GREATEREQUAL
44307: AND
44308: ST_TO_ADDR
// end ;
44309: LD_VAR 0 3
44313: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
44314: LD_INT 0
44316: PPUSH
44317: PPUSH
44318: PPUSH
44319: PPUSH
44320: PPUSH
44321: PPUSH
44322: PPUSH
44323: PPUSH
44324: PPUSH
44325: PPUSH
44326: PPUSH
// result := false ;
44327: LD_ADDR_VAR 0 8
44331: PUSH
44332: LD_INT 0
44334: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
44335: LD_VAR 0 5
44339: NOT
44340: PUSH
44341: LD_VAR 0 1
44345: NOT
44346: OR
44347: PUSH
44348: LD_VAR 0 2
44352: NOT
44353: OR
44354: PUSH
44355: LD_VAR 0 3
44359: NOT
44360: OR
44361: IFFALSE 44365
// exit ;
44363: GO 45179
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
44365: LD_ADDR_VAR 0 14
44369: PUSH
44370: LD_VAR 0 1
44374: PPUSH
44375: LD_VAR 0 2
44379: PPUSH
44380: LD_VAR 0 3
44384: PPUSH
44385: LD_VAR 0 4
44389: PPUSH
44390: LD_VAR 0 5
44394: PUSH
44395: LD_INT 1
44397: ARRAY
44398: PPUSH
44399: CALL_OW 248
44403: PPUSH
44404: LD_INT 0
44406: PPUSH
44407: CALL 46412 0 6
44411: ST_TO_ADDR
// if not hexes then
44412: LD_VAR 0 14
44416: NOT
44417: IFFALSE 44421
// exit ;
44419: GO 45179
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
44421: LD_ADDR_VAR 0 17
44425: PUSH
44426: LD_VAR 0 5
44430: PPUSH
44431: LD_INT 22
44433: PUSH
44434: LD_VAR 0 13
44438: PPUSH
44439: CALL_OW 255
44443: PUSH
44444: EMPTY
44445: LIST
44446: LIST
44447: PUSH
44448: LD_INT 2
44450: PUSH
44451: LD_INT 30
44453: PUSH
44454: LD_INT 0
44456: PUSH
44457: EMPTY
44458: LIST
44459: LIST
44460: PUSH
44461: LD_INT 30
44463: PUSH
44464: LD_INT 1
44466: PUSH
44467: EMPTY
44468: LIST
44469: LIST
44470: PUSH
44471: EMPTY
44472: LIST
44473: LIST
44474: LIST
44475: PUSH
44476: EMPTY
44477: LIST
44478: LIST
44479: PPUSH
44480: CALL_OW 72
44484: ST_TO_ADDR
// for i = 1 to hexes do
44485: LD_ADDR_VAR 0 9
44489: PUSH
44490: DOUBLE
44491: LD_INT 1
44493: DEC
44494: ST_TO_ADDR
44495: LD_VAR 0 14
44499: PUSH
44500: FOR_TO
44501: IFFALSE 45177
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44503: LD_ADDR_VAR 0 13
44507: PUSH
44508: LD_VAR 0 14
44512: PUSH
44513: LD_VAR 0 9
44517: ARRAY
44518: PUSH
44519: LD_INT 1
44521: ARRAY
44522: PPUSH
44523: LD_VAR 0 14
44527: PUSH
44528: LD_VAR 0 9
44532: ARRAY
44533: PUSH
44534: LD_INT 2
44536: ARRAY
44537: PPUSH
44538: CALL_OW 428
44542: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
44543: LD_VAR 0 14
44547: PUSH
44548: LD_VAR 0 9
44552: ARRAY
44553: PUSH
44554: LD_INT 1
44556: ARRAY
44557: PPUSH
44558: LD_VAR 0 14
44562: PUSH
44563: LD_VAR 0 9
44567: ARRAY
44568: PUSH
44569: LD_INT 2
44571: ARRAY
44572: PPUSH
44573: CALL_OW 351
44577: PUSH
44578: LD_VAR 0 14
44582: PUSH
44583: LD_VAR 0 9
44587: ARRAY
44588: PUSH
44589: LD_INT 1
44591: ARRAY
44592: PPUSH
44593: LD_VAR 0 14
44597: PUSH
44598: LD_VAR 0 9
44602: ARRAY
44603: PUSH
44604: LD_INT 2
44606: ARRAY
44607: PPUSH
44608: CALL_OW 488
44612: NOT
44613: OR
44614: PUSH
44615: LD_VAR 0 13
44619: PPUSH
44620: CALL_OW 247
44624: PUSH
44625: LD_INT 3
44627: EQUAL
44628: OR
44629: IFFALSE 44635
// exit ;
44631: POP
44632: POP
44633: GO 45179
// if not tmp then
44635: LD_VAR 0 13
44639: NOT
44640: IFFALSE 44644
// continue ;
44642: GO 44500
// result := true ;
44644: LD_ADDR_VAR 0 8
44648: PUSH
44649: LD_INT 1
44651: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
44652: LD_VAR 0 6
44656: PUSH
44657: LD_VAR 0 13
44661: PPUSH
44662: CALL_OW 247
44666: PUSH
44667: LD_INT 2
44669: EQUAL
44670: AND
44671: PUSH
44672: LD_VAR 0 13
44676: PPUSH
44677: CALL_OW 263
44681: PUSH
44682: LD_INT 1
44684: EQUAL
44685: AND
44686: IFFALSE 44850
// begin if IsDrivenBy ( tmp ) then
44688: LD_VAR 0 13
44692: PPUSH
44693: CALL_OW 311
44697: IFFALSE 44701
// continue ;
44699: GO 44500
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
44701: LD_VAR 0 6
44705: PPUSH
44706: LD_INT 3
44708: PUSH
44709: LD_INT 60
44711: PUSH
44712: EMPTY
44713: LIST
44714: PUSH
44715: EMPTY
44716: LIST
44717: LIST
44718: PUSH
44719: LD_INT 3
44721: PUSH
44722: LD_INT 55
44724: PUSH
44725: EMPTY
44726: LIST
44727: PUSH
44728: EMPTY
44729: LIST
44730: LIST
44731: PUSH
44732: EMPTY
44733: LIST
44734: LIST
44735: PPUSH
44736: CALL_OW 72
44740: IFFALSE 44848
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
44742: LD_ADDR_VAR 0 18
44746: PUSH
44747: LD_VAR 0 6
44751: PPUSH
44752: LD_INT 3
44754: PUSH
44755: LD_INT 60
44757: PUSH
44758: EMPTY
44759: LIST
44760: PUSH
44761: EMPTY
44762: LIST
44763: LIST
44764: PUSH
44765: LD_INT 3
44767: PUSH
44768: LD_INT 55
44770: PUSH
44771: EMPTY
44772: LIST
44773: PUSH
44774: EMPTY
44775: LIST
44776: LIST
44777: PUSH
44778: EMPTY
44779: LIST
44780: LIST
44781: PPUSH
44782: CALL_OW 72
44786: PUSH
44787: LD_INT 1
44789: ARRAY
44790: ST_TO_ADDR
// if IsInUnit ( driver ) then
44791: LD_VAR 0 18
44795: PPUSH
44796: CALL_OW 310
44800: IFFALSE 44811
// ComExit ( driver ) ;
44802: LD_VAR 0 18
44806: PPUSH
44807: CALL 70192 0 1
// AddComEnterUnit ( driver , tmp ) ;
44811: LD_VAR 0 18
44815: PPUSH
44816: LD_VAR 0 13
44820: PPUSH
44821: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
44825: LD_VAR 0 18
44829: PPUSH
44830: LD_VAR 0 7
44834: PPUSH
44835: CALL_OW 173
// AddComExitVehicle ( driver ) ;
44839: LD_VAR 0 18
44843: PPUSH
44844: CALL_OW 181
// end ; continue ;
44848: GO 44500
// end ; if not cleaners or not tmp in cleaners then
44850: LD_VAR 0 6
44854: NOT
44855: PUSH
44856: LD_VAR 0 13
44860: PUSH
44861: LD_VAR 0 6
44865: IN
44866: NOT
44867: OR
44868: IFFALSE 45175
// begin if dep then
44870: LD_VAR 0 17
44874: IFFALSE 45010
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
44876: LD_ADDR_VAR 0 16
44880: PUSH
44881: LD_VAR 0 17
44885: PUSH
44886: LD_INT 1
44888: ARRAY
44889: PPUSH
44890: CALL_OW 250
44894: PPUSH
44895: LD_VAR 0 17
44899: PUSH
44900: LD_INT 1
44902: ARRAY
44903: PPUSH
44904: CALL_OW 254
44908: PPUSH
44909: LD_INT 5
44911: PPUSH
44912: CALL_OW 272
44916: PUSH
44917: LD_VAR 0 17
44921: PUSH
44922: LD_INT 1
44924: ARRAY
44925: PPUSH
44926: CALL_OW 251
44930: PPUSH
44931: LD_VAR 0 17
44935: PUSH
44936: LD_INT 1
44938: ARRAY
44939: PPUSH
44940: CALL_OW 254
44944: PPUSH
44945: LD_INT 5
44947: PPUSH
44948: CALL_OW 273
44952: PUSH
44953: EMPTY
44954: LIST
44955: LIST
44956: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
44957: LD_VAR 0 16
44961: PUSH
44962: LD_INT 1
44964: ARRAY
44965: PPUSH
44966: LD_VAR 0 16
44970: PUSH
44971: LD_INT 2
44973: ARRAY
44974: PPUSH
44975: CALL_OW 488
44979: IFFALSE 45010
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
44981: LD_VAR 0 13
44985: PPUSH
44986: LD_VAR 0 16
44990: PUSH
44991: LD_INT 1
44993: ARRAY
44994: PPUSH
44995: LD_VAR 0 16
44999: PUSH
45000: LD_INT 2
45002: ARRAY
45003: PPUSH
45004: CALL_OW 111
// continue ;
45008: GO 44500
// end ; end ; r := GetDir ( tmp ) ;
45010: LD_ADDR_VAR 0 15
45014: PUSH
45015: LD_VAR 0 13
45019: PPUSH
45020: CALL_OW 254
45024: ST_TO_ADDR
// if r = 5 then
45025: LD_VAR 0 15
45029: PUSH
45030: LD_INT 5
45032: EQUAL
45033: IFFALSE 45043
// r := 0 ;
45035: LD_ADDR_VAR 0 15
45039: PUSH
45040: LD_INT 0
45042: ST_TO_ADDR
// for j = r to 5 do
45043: LD_ADDR_VAR 0 10
45047: PUSH
45048: DOUBLE
45049: LD_VAR 0 15
45053: DEC
45054: ST_TO_ADDR
45055: LD_INT 5
45057: PUSH
45058: FOR_TO
45059: IFFALSE 45173
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
45061: LD_ADDR_VAR 0 11
45065: PUSH
45066: LD_VAR 0 13
45070: PPUSH
45071: CALL_OW 250
45075: PPUSH
45076: LD_VAR 0 10
45080: PPUSH
45081: LD_INT 2
45083: PPUSH
45084: CALL_OW 272
45088: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
45089: LD_ADDR_VAR 0 12
45093: PUSH
45094: LD_VAR 0 13
45098: PPUSH
45099: CALL_OW 251
45103: PPUSH
45104: LD_VAR 0 10
45108: PPUSH
45109: LD_INT 2
45111: PPUSH
45112: CALL_OW 273
45116: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
45117: LD_VAR 0 11
45121: PPUSH
45122: LD_VAR 0 12
45126: PPUSH
45127: CALL_OW 488
45131: PUSH
45132: LD_VAR 0 11
45136: PPUSH
45137: LD_VAR 0 12
45141: PPUSH
45142: CALL_OW 428
45146: NOT
45147: AND
45148: IFFALSE 45171
// begin ComMoveXY ( tmp , _x , _y ) ;
45150: LD_VAR 0 13
45154: PPUSH
45155: LD_VAR 0 11
45159: PPUSH
45160: LD_VAR 0 12
45164: PPUSH
45165: CALL_OW 111
// break ;
45169: GO 45173
// end ; end ;
45171: GO 45058
45173: POP
45174: POP
// end ; end ;
45175: GO 44500
45177: POP
45178: POP
// end ;
45179: LD_VAR 0 8
45183: RET
// export function BuildingTechInvented ( side , btype ) ; begin
45184: LD_INT 0
45186: PPUSH
// result := true ;
45187: LD_ADDR_VAR 0 3
45191: PUSH
45192: LD_INT 1
45194: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
45195: LD_VAR 0 2
45199: PUSH
45200: LD_INT 24
45202: DOUBLE
45203: EQUAL
45204: IFTRUE 45214
45206: LD_INT 33
45208: DOUBLE
45209: EQUAL
45210: IFTRUE 45214
45212: GO 45239
45214: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
45215: LD_ADDR_VAR 0 3
45219: PUSH
45220: LD_INT 32
45222: PPUSH
45223: LD_VAR 0 1
45227: PPUSH
45228: CALL_OW 321
45232: PUSH
45233: LD_INT 2
45235: EQUAL
45236: ST_TO_ADDR
45237: GO 45555
45239: LD_INT 20
45241: DOUBLE
45242: EQUAL
45243: IFTRUE 45247
45245: GO 45272
45247: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
45248: LD_ADDR_VAR 0 3
45252: PUSH
45253: LD_INT 6
45255: PPUSH
45256: LD_VAR 0 1
45260: PPUSH
45261: CALL_OW 321
45265: PUSH
45266: LD_INT 2
45268: EQUAL
45269: ST_TO_ADDR
45270: GO 45555
45272: LD_INT 22
45274: DOUBLE
45275: EQUAL
45276: IFTRUE 45286
45278: LD_INT 36
45280: DOUBLE
45281: EQUAL
45282: IFTRUE 45286
45284: GO 45311
45286: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
45287: LD_ADDR_VAR 0 3
45291: PUSH
45292: LD_INT 15
45294: PPUSH
45295: LD_VAR 0 1
45299: PPUSH
45300: CALL_OW 321
45304: PUSH
45305: LD_INT 2
45307: EQUAL
45308: ST_TO_ADDR
45309: GO 45555
45311: LD_INT 30
45313: DOUBLE
45314: EQUAL
45315: IFTRUE 45319
45317: GO 45344
45319: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
45320: LD_ADDR_VAR 0 3
45324: PUSH
45325: LD_INT 20
45327: PPUSH
45328: LD_VAR 0 1
45332: PPUSH
45333: CALL_OW 321
45337: PUSH
45338: LD_INT 2
45340: EQUAL
45341: ST_TO_ADDR
45342: GO 45555
45344: LD_INT 28
45346: DOUBLE
45347: EQUAL
45348: IFTRUE 45358
45350: LD_INT 21
45352: DOUBLE
45353: EQUAL
45354: IFTRUE 45358
45356: GO 45383
45358: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
45359: LD_ADDR_VAR 0 3
45363: PUSH
45364: LD_INT 21
45366: PPUSH
45367: LD_VAR 0 1
45371: PPUSH
45372: CALL_OW 321
45376: PUSH
45377: LD_INT 2
45379: EQUAL
45380: ST_TO_ADDR
45381: GO 45555
45383: LD_INT 16
45385: DOUBLE
45386: EQUAL
45387: IFTRUE 45391
45389: GO 45416
45391: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
45392: LD_ADDR_VAR 0 3
45396: PUSH
45397: LD_INT 84
45399: PPUSH
45400: LD_VAR 0 1
45404: PPUSH
45405: CALL_OW 321
45409: PUSH
45410: LD_INT 2
45412: EQUAL
45413: ST_TO_ADDR
45414: GO 45555
45416: LD_INT 19
45418: DOUBLE
45419: EQUAL
45420: IFTRUE 45430
45422: LD_INT 23
45424: DOUBLE
45425: EQUAL
45426: IFTRUE 45430
45428: GO 45455
45430: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
45431: LD_ADDR_VAR 0 3
45435: PUSH
45436: LD_INT 83
45438: PPUSH
45439: LD_VAR 0 1
45443: PPUSH
45444: CALL_OW 321
45448: PUSH
45449: LD_INT 2
45451: EQUAL
45452: ST_TO_ADDR
45453: GO 45555
45455: LD_INT 17
45457: DOUBLE
45458: EQUAL
45459: IFTRUE 45463
45461: GO 45488
45463: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
45464: LD_ADDR_VAR 0 3
45468: PUSH
45469: LD_INT 39
45471: PPUSH
45472: LD_VAR 0 1
45476: PPUSH
45477: CALL_OW 321
45481: PUSH
45482: LD_INT 2
45484: EQUAL
45485: ST_TO_ADDR
45486: GO 45555
45488: LD_INT 18
45490: DOUBLE
45491: EQUAL
45492: IFTRUE 45496
45494: GO 45521
45496: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
45497: LD_ADDR_VAR 0 3
45501: PUSH
45502: LD_INT 40
45504: PPUSH
45505: LD_VAR 0 1
45509: PPUSH
45510: CALL_OW 321
45514: PUSH
45515: LD_INT 2
45517: EQUAL
45518: ST_TO_ADDR
45519: GO 45555
45521: LD_INT 27
45523: DOUBLE
45524: EQUAL
45525: IFTRUE 45529
45527: GO 45554
45529: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
45530: LD_ADDR_VAR 0 3
45534: PUSH
45535: LD_INT 35
45537: PPUSH
45538: LD_VAR 0 1
45542: PPUSH
45543: CALL_OW 321
45547: PUSH
45548: LD_INT 2
45550: EQUAL
45551: ST_TO_ADDR
45552: GO 45555
45554: POP
// end ;
45555: LD_VAR 0 3
45559: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
45560: LD_INT 0
45562: PPUSH
45563: PPUSH
45564: PPUSH
45565: PPUSH
45566: PPUSH
45567: PPUSH
45568: PPUSH
45569: PPUSH
45570: PPUSH
45571: PPUSH
45572: PPUSH
// result := false ;
45573: LD_ADDR_VAR 0 6
45577: PUSH
45578: LD_INT 0
45580: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
45581: LD_VAR 0 1
45585: NOT
45586: PUSH
45587: LD_VAR 0 1
45591: PPUSH
45592: CALL_OW 266
45596: PUSH
45597: LD_INT 0
45599: PUSH
45600: LD_INT 1
45602: PUSH
45603: EMPTY
45604: LIST
45605: LIST
45606: IN
45607: NOT
45608: OR
45609: PUSH
45610: LD_VAR 0 2
45614: NOT
45615: OR
45616: PUSH
45617: LD_VAR 0 5
45621: PUSH
45622: LD_INT 0
45624: PUSH
45625: LD_INT 1
45627: PUSH
45628: LD_INT 2
45630: PUSH
45631: LD_INT 3
45633: PUSH
45634: LD_INT 4
45636: PUSH
45637: LD_INT 5
45639: PUSH
45640: EMPTY
45641: LIST
45642: LIST
45643: LIST
45644: LIST
45645: LIST
45646: LIST
45647: IN
45648: NOT
45649: OR
45650: PUSH
45651: LD_VAR 0 3
45655: PPUSH
45656: LD_VAR 0 4
45660: PPUSH
45661: CALL_OW 488
45665: NOT
45666: OR
45667: IFFALSE 45671
// exit ;
45669: GO 46407
// side := GetSide ( depot ) ;
45671: LD_ADDR_VAR 0 9
45675: PUSH
45676: LD_VAR 0 1
45680: PPUSH
45681: CALL_OW 255
45685: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
45686: LD_VAR 0 9
45690: PPUSH
45691: LD_VAR 0 2
45695: PPUSH
45696: CALL 45184 0 2
45700: NOT
45701: IFFALSE 45705
// exit ;
45703: GO 46407
// pom := GetBase ( depot ) ;
45705: LD_ADDR_VAR 0 10
45709: PUSH
45710: LD_VAR 0 1
45714: PPUSH
45715: CALL_OW 274
45719: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
45720: LD_ADDR_VAR 0 11
45724: PUSH
45725: LD_VAR 0 2
45729: PPUSH
45730: LD_VAR 0 1
45734: PPUSH
45735: CALL_OW 248
45739: PPUSH
45740: CALL_OW 450
45744: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
45745: LD_VAR 0 10
45749: PPUSH
45750: LD_INT 1
45752: PPUSH
45753: CALL_OW 275
45757: PUSH
45758: LD_VAR 0 11
45762: PUSH
45763: LD_INT 1
45765: ARRAY
45766: GREATEREQUAL
45767: PUSH
45768: LD_VAR 0 10
45772: PPUSH
45773: LD_INT 2
45775: PPUSH
45776: CALL_OW 275
45780: PUSH
45781: LD_VAR 0 11
45785: PUSH
45786: LD_INT 2
45788: ARRAY
45789: GREATEREQUAL
45790: AND
45791: PUSH
45792: LD_VAR 0 10
45796: PPUSH
45797: LD_INT 3
45799: PPUSH
45800: CALL_OW 275
45804: PUSH
45805: LD_VAR 0 11
45809: PUSH
45810: LD_INT 3
45812: ARRAY
45813: GREATEREQUAL
45814: AND
45815: NOT
45816: IFFALSE 45820
// exit ;
45818: GO 46407
// if GetBType ( depot ) = b_depot then
45820: LD_VAR 0 1
45824: PPUSH
45825: CALL_OW 266
45829: PUSH
45830: LD_INT 0
45832: EQUAL
45833: IFFALSE 45845
// dist := 28 else
45835: LD_ADDR_VAR 0 14
45839: PUSH
45840: LD_INT 28
45842: ST_TO_ADDR
45843: GO 45853
// dist := 36 ;
45845: LD_ADDR_VAR 0 14
45849: PUSH
45850: LD_INT 36
45852: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
45853: LD_VAR 0 1
45857: PPUSH
45858: LD_VAR 0 3
45862: PPUSH
45863: LD_VAR 0 4
45867: PPUSH
45868: CALL_OW 297
45872: PUSH
45873: LD_VAR 0 14
45877: GREATER
45878: IFFALSE 45882
// exit ;
45880: GO 46407
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
45882: LD_ADDR_VAR 0 12
45886: PUSH
45887: LD_VAR 0 2
45891: PPUSH
45892: LD_VAR 0 3
45896: PPUSH
45897: LD_VAR 0 4
45901: PPUSH
45902: LD_VAR 0 5
45906: PPUSH
45907: LD_VAR 0 1
45911: PPUSH
45912: CALL_OW 248
45916: PPUSH
45917: LD_INT 0
45919: PPUSH
45920: CALL 46412 0 6
45924: ST_TO_ADDR
// if not hexes then
45925: LD_VAR 0 12
45929: NOT
45930: IFFALSE 45934
// exit ;
45932: GO 46407
// hex := GetHexInfo ( x , y ) ;
45934: LD_ADDR_VAR 0 15
45938: PUSH
45939: LD_VAR 0 3
45943: PPUSH
45944: LD_VAR 0 4
45948: PPUSH
45949: CALL_OW 546
45953: ST_TO_ADDR
// if hex [ 1 ] then
45954: LD_VAR 0 15
45958: PUSH
45959: LD_INT 1
45961: ARRAY
45962: IFFALSE 45966
// exit ;
45964: GO 46407
// height := hex [ 2 ] ;
45966: LD_ADDR_VAR 0 13
45970: PUSH
45971: LD_VAR 0 15
45975: PUSH
45976: LD_INT 2
45978: ARRAY
45979: ST_TO_ADDR
// for i = 1 to hexes do
45980: LD_ADDR_VAR 0 7
45984: PUSH
45985: DOUBLE
45986: LD_INT 1
45988: DEC
45989: ST_TO_ADDR
45990: LD_VAR 0 12
45994: PUSH
45995: FOR_TO
45996: IFFALSE 46326
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
45998: LD_VAR 0 12
46002: PUSH
46003: LD_VAR 0 7
46007: ARRAY
46008: PUSH
46009: LD_INT 1
46011: ARRAY
46012: PPUSH
46013: LD_VAR 0 12
46017: PUSH
46018: LD_VAR 0 7
46022: ARRAY
46023: PUSH
46024: LD_INT 2
46026: ARRAY
46027: PPUSH
46028: CALL_OW 488
46032: NOT
46033: PUSH
46034: LD_VAR 0 12
46038: PUSH
46039: LD_VAR 0 7
46043: ARRAY
46044: PUSH
46045: LD_INT 1
46047: ARRAY
46048: PPUSH
46049: LD_VAR 0 12
46053: PUSH
46054: LD_VAR 0 7
46058: ARRAY
46059: PUSH
46060: LD_INT 2
46062: ARRAY
46063: PPUSH
46064: CALL_OW 428
46068: PUSH
46069: LD_INT 0
46071: GREATER
46072: OR
46073: PUSH
46074: LD_VAR 0 12
46078: PUSH
46079: LD_VAR 0 7
46083: ARRAY
46084: PUSH
46085: LD_INT 1
46087: ARRAY
46088: PPUSH
46089: LD_VAR 0 12
46093: PUSH
46094: LD_VAR 0 7
46098: ARRAY
46099: PUSH
46100: LD_INT 2
46102: ARRAY
46103: PPUSH
46104: CALL_OW 351
46108: OR
46109: IFFALSE 46115
// exit ;
46111: POP
46112: POP
46113: GO 46407
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
46115: LD_ADDR_VAR 0 8
46119: PUSH
46120: LD_VAR 0 12
46124: PUSH
46125: LD_VAR 0 7
46129: ARRAY
46130: PUSH
46131: LD_INT 1
46133: ARRAY
46134: PPUSH
46135: LD_VAR 0 12
46139: PUSH
46140: LD_VAR 0 7
46144: ARRAY
46145: PUSH
46146: LD_INT 2
46148: ARRAY
46149: PPUSH
46150: CALL_OW 546
46154: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
46155: LD_VAR 0 8
46159: PUSH
46160: LD_INT 1
46162: ARRAY
46163: PUSH
46164: LD_VAR 0 8
46168: PUSH
46169: LD_INT 2
46171: ARRAY
46172: PUSH
46173: LD_VAR 0 13
46177: PUSH
46178: LD_INT 2
46180: PLUS
46181: GREATER
46182: OR
46183: PUSH
46184: LD_VAR 0 8
46188: PUSH
46189: LD_INT 2
46191: ARRAY
46192: PUSH
46193: LD_VAR 0 13
46197: PUSH
46198: LD_INT 2
46200: MINUS
46201: LESS
46202: OR
46203: PUSH
46204: LD_VAR 0 8
46208: PUSH
46209: LD_INT 3
46211: ARRAY
46212: PUSH
46213: LD_INT 0
46215: PUSH
46216: LD_INT 8
46218: PUSH
46219: LD_INT 9
46221: PUSH
46222: LD_INT 10
46224: PUSH
46225: LD_INT 11
46227: PUSH
46228: LD_INT 12
46230: PUSH
46231: LD_INT 13
46233: PUSH
46234: LD_INT 16
46236: PUSH
46237: LD_INT 17
46239: PUSH
46240: LD_INT 18
46242: PUSH
46243: LD_INT 19
46245: PUSH
46246: LD_INT 20
46248: PUSH
46249: LD_INT 21
46251: PUSH
46252: EMPTY
46253: LIST
46254: LIST
46255: LIST
46256: LIST
46257: LIST
46258: LIST
46259: LIST
46260: LIST
46261: LIST
46262: LIST
46263: LIST
46264: LIST
46265: LIST
46266: IN
46267: NOT
46268: OR
46269: PUSH
46270: LD_VAR 0 8
46274: PUSH
46275: LD_INT 5
46277: ARRAY
46278: NOT
46279: OR
46280: PUSH
46281: LD_VAR 0 8
46285: PUSH
46286: LD_INT 6
46288: ARRAY
46289: PUSH
46290: LD_INT 1
46292: PUSH
46293: LD_INT 2
46295: PUSH
46296: LD_INT 7
46298: PUSH
46299: LD_INT 9
46301: PUSH
46302: LD_INT 10
46304: PUSH
46305: LD_INT 11
46307: PUSH
46308: EMPTY
46309: LIST
46310: LIST
46311: LIST
46312: LIST
46313: LIST
46314: LIST
46315: IN
46316: NOT
46317: OR
46318: IFFALSE 46324
// exit ;
46320: POP
46321: POP
46322: GO 46407
// end ;
46324: GO 45995
46326: POP
46327: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
46328: LD_VAR 0 9
46332: PPUSH
46333: LD_VAR 0 3
46337: PPUSH
46338: LD_VAR 0 4
46342: PPUSH
46343: LD_INT 20
46345: PPUSH
46346: CALL 38359 0 4
46350: PUSH
46351: LD_INT 4
46353: ARRAY
46354: IFFALSE 46358
// exit ;
46356: GO 46407
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
46358: LD_VAR 0 2
46362: PUSH
46363: LD_INT 29
46365: PUSH
46366: LD_INT 30
46368: PUSH
46369: EMPTY
46370: LIST
46371: LIST
46372: IN
46373: PUSH
46374: LD_VAR 0 3
46378: PPUSH
46379: LD_VAR 0 4
46383: PPUSH
46384: LD_VAR 0 9
46388: PPUSH
46389: CALL_OW 440
46393: NOT
46394: AND
46395: IFFALSE 46399
// exit ;
46397: GO 46407
// result := true ;
46399: LD_ADDR_VAR 0 6
46403: PUSH
46404: LD_INT 1
46406: ST_TO_ADDR
// end ;
46407: LD_VAR 0 6
46411: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
46412: LD_INT 0
46414: PPUSH
46415: PPUSH
46416: PPUSH
46417: PPUSH
46418: PPUSH
46419: PPUSH
46420: PPUSH
46421: PPUSH
46422: PPUSH
46423: PPUSH
46424: PPUSH
46425: PPUSH
46426: PPUSH
46427: PPUSH
46428: PPUSH
46429: PPUSH
46430: PPUSH
46431: PPUSH
46432: PPUSH
46433: PPUSH
46434: PPUSH
46435: PPUSH
46436: PPUSH
46437: PPUSH
46438: PPUSH
46439: PPUSH
46440: PPUSH
46441: PPUSH
46442: PPUSH
46443: PPUSH
46444: PPUSH
46445: PPUSH
46446: PPUSH
46447: PPUSH
46448: PPUSH
46449: PPUSH
46450: PPUSH
46451: PPUSH
46452: PPUSH
46453: PPUSH
46454: PPUSH
46455: PPUSH
46456: PPUSH
46457: PPUSH
46458: PPUSH
46459: PPUSH
46460: PPUSH
46461: PPUSH
46462: PPUSH
46463: PPUSH
46464: PPUSH
46465: PPUSH
46466: PPUSH
46467: PPUSH
46468: PPUSH
46469: PPUSH
46470: PPUSH
46471: PPUSH
// result = [ ] ;
46472: LD_ADDR_VAR 0 7
46476: PUSH
46477: EMPTY
46478: ST_TO_ADDR
// temp_list = [ ] ;
46479: LD_ADDR_VAR 0 9
46483: PUSH
46484: EMPTY
46485: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
46486: LD_VAR 0 4
46490: PUSH
46491: LD_INT 0
46493: PUSH
46494: LD_INT 1
46496: PUSH
46497: LD_INT 2
46499: PUSH
46500: LD_INT 3
46502: PUSH
46503: LD_INT 4
46505: PUSH
46506: LD_INT 5
46508: PUSH
46509: EMPTY
46510: LIST
46511: LIST
46512: LIST
46513: LIST
46514: LIST
46515: LIST
46516: IN
46517: NOT
46518: PUSH
46519: LD_VAR 0 1
46523: PUSH
46524: LD_INT 0
46526: PUSH
46527: LD_INT 1
46529: PUSH
46530: EMPTY
46531: LIST
46532: LIST
46533: IN
46534: PUSH
46535: LD_VAR 0 5
46539: PUSH
46540: LD_INT 1
46542: PUSH
46543: LD_INT 2
46545: PUSH
46546: LD_INT 3
46548: PUSH
46549: EMPTY
46550: LIST
46551: LIST
46552: LIST
46553: IN
46554: NOT
46555: AND
46556: OR
46557: IFFALSE 46561
// exit ;
46559: GO 64952
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
46561: LD_VAR 0 1
46565: PUSH
46566: LD_INT 6
46568: PUSH
46569: LD_INT 7
46571: PUSH
46572: LD_INT 8
46574: PUSH
46575: LD_INT 13
46577: PUSH
46578: LD_INT 12
46580: PUSH
46581: LD_INT 15
46583: PUSH
46584: LD_INT 11
46586: PUSH
46587: LD_INT 14
46589: PUSH
46590: LD_INT 10
46592: PUSH
46593: EMPTY
46594: LIST
46595: LIST
46596: LIST
46597: LIST
46598: LIST
46599: LIST
46600: LIST
46601: LIST
46602: LIST
46603: IN
46604: IFFALSE 46614
// btype = b_lab ;
46606: LD_ADDR_VAR 0 1
46610: PUSH
46611: LD_INT 6
46613: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
46614: LD_VAR 0 6
46618: PUSH
46619: LD_INT 0
46621: PUSH
46622: LD_INT 1
46624: PUSH
46625: LD_INT 2
46627: PUSH
46628: EMPTY
46629: LIST
46630: LIST
46631: LIST
46632: IN
46633: NOT
46634: PUSH
46635: LD_VAR 0 1
46639: PUSH
46640: LD_INT 0
46642: PUSH
46643: LD_INT 1
46645: PUSH
46646: LD_INT 2
46648: PUSH
46649: LD_INT 3
46651: PUSH
46652: LD_INT 6
46654: PUSH
46655: LD_INT 36
46657: PUSH
46658: LD_INT 4
46660: PUSH
46661: LD_INT 5
46663: PUSH
46664: LD_INT 31
46666: PUSH
46667: LD_INT 32
46669: PUSH
46670: LD_INT 33
46672: PUSH
46673: EMPTY
46674: LIST
46675: LIST
46676: LIST
46677: LIST
46678: LIST
46679: LIST
46680: LIST
46681: LIST
46682: LIST
46683: LIST
46684: LIST
46685: IN
46686: NOT
46687: PUSH
46688: LD_VAR 0 6
46692: PUSH
46693: LD_INT 1
46695: EQUAL
46696: AND
46697: OR
46698: PUSH
46699: LD_VAR 0 1
46703: PUSH
46704: LD_INT 2
46706: PUSH
46707: LD_INT 3
46709: PUSH
46710: EMPTY
46711: LIST
46712: LIST
46713: IN
46714: NOT
46715: PUSH
46716: LD_VAR 0 6
46720: PUSH
46721: LD_INT 2
46723: EQUAL
46724: AND
46725: OR
46726: IFFALSE 46736
// mode = 0 ;
46728: LD_ADDR_VAR 0 6
46732: PUSH
46733: LD_INT 0
46735: ST_TO_ADDR
// case mode of 0 :
46736: LD_VAR 0 6
46740: PUSH
46741: LD_INT 0
46743: DOUBLE
46744: EQUAL
46745: IFTRUE 46749
46747: GO 58202
46749: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46750: LD_ADDR_VAR 0 11
46754: PUSH
46755: LD_INT 0
46757: PUSH
46758: LD_INT 0
46760: PUSH
46761: EMPTY
46762: LIST
46763: LIST
46764: PUSH
46765: LD_INT 0
46767: PUSH
46768: LD_INT 1
46770: NEG
46771: PUSH
46772: EMPTY
46773: LIST
46774: LIST
46775: PUSH
46776: LD_INT 1
46778: PUSH
46779: LD_INT 0
46781: PUSH
46782: EMPTY
46783: LIST
46784: LIST
46785: PUSH
46786: LD_INT 1
46788: PUSH
46789: LD_INT 1
46791: PUSH
46792: EMPTY
46793: LIST
46794: LIST
46795: PUSH
46796: LD_INT 0
46798: PUSH
46799: LD_INT 1
46801: PUSH
46802: EMPTY
46803: LIST
46804: LIST
46805: PUSH
46806: LD_INT 1
46808: NEG
46809: PUSH
46810: LD_INT 0
46812: PUSH
46813: EMPTY
46814: LIST
46815: LIST
46816: PUSH
46817: LD_INT 1
46819: NEG
46820: PUSH
46821: LD_INT 1
46823: NEG
46824: PUSH
46825: EMPTY
46826: LIST
46827: LIST
46828: PUSH
46829: LD_INT 1
46831: NEG
46832: PUSH
46833: LD_INT 2
46835: NEG
46836: PUSH
46837: EMPTY
46838: LIST
46839: LIST
46840: PUSH
46841: LD_INT 0
46843: PUSH
46844: LD_INT 2
46846: NEG
46847: PUSH
46848: EMPTY
46849: LIST
46850: LIST
46851: PUSH
46852: LD_INT 1
46854: PUSH
46855: LD_INT 1
46857: NEG
46858: PUSH
46859: EMPTY
46860: LIST
46861: LIST
46862: PUSH
46863: LD_INT 1
46865: PUSH
46866: LD_INT 2
46868: PUSH
46869: EMPTY
46870: LIST
46871: LIST
46872: PUSH
46873: LD_INT 0
46875: PUSH
46876: LD_INT 2
46878: PUSH
46879: EMPTY
46880: LIST
46881: LIST
46882: PUSH
46883: LD_INT 1
46885: NEG
46886: PUSH
46887: LD_INT 1
46889: PUSH
46890: EMPTY
46891: LIST
46892: LIST
46893: PUSH
46894: LD_INT 1
46896: PUSH
46897: LD_INT 3
46899: PUSH
46900: EMPTY
46901: LIST
46902: LIST
46903: PUSH
46904: LD_INT 0
46906: PUSH
46907: LD_INT 3
46909: PUSH
46910: EMPTY
46911: LIST
46912: LIST
46913: PUSH
46914: LD_INT 1
46916: NEG
46917: PUSH
46918: LD_INT 2
46920: PUSH
46921: EMPTY
46922: LIST
46923: LIST
46924: PUSH
46925: EMPTY
46926: LIST
46927: LIST
46928: LIST
46929: LIST
46930: LIST
46931: LIST
46932: LIST
46933: LIST
46934: LIST
46935: LIST
46936: LIST
46937: LIST
46938: LIST
46939: LIST
46940: LIST
46941: LIST
46942: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46943: LD_ADDR_VAR 0 12
46947: PUSH
46948: LD_INT 0
46950: PUSH
46951: LD_INT 0
46953: PUSH
46954: EMPTY
46955: LIST
46956: LIST
46957: PUSH
46958: LD_INT 0
46960: PUSH
46961: LD_INT 1
46963: NEG
46964: PUSH
46965: EMPTY
46966: LIST
46967: LIST
46968: PUSH
46969: LD_INT 1
46971: PUSH
46972: LD_INT 0
46974: PUSH
46975: EMPTY
46976: LIST
46977: LIST
46978: PUSH
46979: LD_INT 1
46981: PUSH
46982: LD_INT 1
46984: PUSH
46985: EMPTY
46986: LIST
46987: LIST
46988: PUSH
46989: LD_INT 0
46991: PUSH
46992: LD_INT 1
46994: PUSH
46995: EMPTY
46996: LIST
46997: LIST
46998: PUSH
46999: LD_INT 1
47001: NEG
47002: PUSH
47003: LD_INT 0
47005: PUSH
47006: EMPTY
47007: LIST
47008: LIST
47009: PUSH
47010: LD_INT 1
47012: NEG
47013: PUSH
47014: LD_INT 1
47016: NEG
47017: PUSH
47018: EMPTY
47019: LIST
47020: LIST
47021: PUSH
47022: LD_INT 1
47024: PUSH
47025: LD_INT 1
47027: NEG
47028: PUSH
47029: EMPTY
47030: LIST
47031: LIST
47032: PUSH
47033: LD_INT 2
47035: PUSH
47036: LD_INT 0
47038: PUSH
47039: EMPTY
47040: LIST
47041: LIST
47042: PUSH
47043: LD_INT 2
47045: PUSH
47046: LD_INT 1
47048: PUSH
47049: EMPTY
47050: LIST
47051: LIST
47052: PUSH
47053: LD_INT 1
47055: NEG
47056: PUSH
47057: LD_INT 1
47059: PUSH
47060: EMPTY
47061: LIST
47062: LIST
47063: PUSH
47064: LD_INT 2
47066: NEG
47067: PUSH
47068: LD_INT 0
47070: PUSH
47071: EMPTY
47072: LIST
47073: LIST
47074: PUSH
47075: LD_INT 2
47077: NEG
47078: PUSH
47079: LD_INT 1
47081: NEG
47082: PUSH
47083: EMPTY
47084: LIST
47085: LIST
47086: PUSH
47087: LD_INT 2
47089: NEG
47090: PUSH
47091: LD_INT 1
47093: PUSH
47094: EMPTY
47095: LIST
47096: LIST
47097: PUSH
47098: LD_INT 3
47100: NEG
47101: PUSH
47102: LD_INT 0
47104: PUSH
47105: EMPTY
47106: LIST
47107: LIST
47108: PUSH
47109: LD_INT 3
47111: NEG
47112: PUSH
47113: LD_INT 1
47115: NEG
47116: PUSH
47117: EMPTY
47118: LIST
47119: LIST
47120: PUSH
47121: EMPTY
47122: LIST
47123: LIST
47124: LIST
47125: LIST
47126: LIST
47127: LIST
47128: LIST
47129: LIST
47130: LIST
47131: LIST
47132: LIST
47133: LIST
47134: LIST
47135: LIST
47136: LIST
47137: LIST
47138: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47139: LD_ADDR_VAR 0 13
47143: PUSH
47144: LD_INT 0
47146: PUSH
47147: LD_INT 0
47149: PUSH
47150: EMPTY
47151: LIST
47152: LIST
47153: PUSH
47154: LD_INT 0
47156: PUSH
47157: LD_INT 1
47159: NEG
47160: PUSH
47161: EMPTY
47162: LIST
47163: LIST
47164: PUSH
47165: LD_INT 1
47167: PUSH
47168: LD_INT 0
47170: PUSH
47171: EMPTY
47172: LIST
47173: LIST
47174: PUSH
47175: LD_INT 1
47177: PUSH
47178: LD_INT 1
47180: PUSH
47181: EMPTY
47182: LIST
47183: LIST
47184: PUSH
47185: LD_INT 0
47187: PUSH
47188: LD_INT 1
47190: PUSH
47191: EMPTY
47192: LIST
47193: LIST
47194: PUSH
47195: LD_INT 1
47197: NEG
47198: PUSH
47199: LD_INT 0
47201: PUSH
47202: EMPTY
47203: LIST
47204: LIST
47205: PUSH
47206: LD_INT 1
47208: NEG
47209: PUSH
47210: LD_INT 1
47212: NEG
47213: PUSH
47214: EMPTY
47215: LIST
47216: LIST
47217: PUSH
47218: LD_INT 1
47220: NEG
47221: PUSH
47222: LD_INT 2
47224: NEG
47225: PUSH
47226: EMPTY
47227: LIST
47228: LIST
47229: PUSH
47230: LD_INT 2
47232: PUSH
47233: LD_INT 1
47235: PUSH
47236: EMPTY
47237: LIST
47238: LIST
47239: PUSH
47240: LD_INT 2
47242: PUSH
47243: LD_INT 2
47245: PUSH
47246: EMPTY
47247: LIST
47248: LIST
47249: PUSH
47250: LD_INT 1
47252: PUSH
47253: LD_INT 2
47255: PUSH
47256: EMPTY
47257: LIST
47258: LIST
47259: PUSH
47260: LD_INT 2
47262: NEG
47263: PUSH
47264: LD_INT 1
47266: NEG
47267: PUSH
47268: EMPTY
47269: LIST
47270: LIST
47271: PUSH
47272: LD_INT 2
47274: NEG
47275: PUSH
47276: LD_INT 2
47278: NEG
47279: PUSH
47280: EMPTY
47281: LIST
47282: LIST
47283: PUSH
47284: LD_INT 2
47286: NEG
47287: PUSH
47288: LD_INT 3
47290: NEG
47291: PUSH
47292: EMPTY
47293: LIST
47294: LIST
47295: PUSH
47296: LD_INT 3
47298: NEG
47299: PUSH
47300: LD_INT 2
47302: NEG
47303: PUSH
47304: EMPTY
47305: LIST
47306: LIST
47307: PUSH
47308: LD_INT 3
47310: NEG
47311: PUSH
47312: LD_INT 3
47314: NEG
47315: PUSH
47316: EMPTY
47317: LIST
47318: LIST
47319: PUSH
47320: EMPTY
47321: LIST
47322: LIST
47323: LIST
47324: LIST
47325: LIST
47326: LIST
47327: LIST
47328: LIST
47329: LIST
47330: LIST
47331: LIST
47332: LIST
47333: LIST
47334: LIST
47335: LIST
47336: LIST
47337: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47338: LD_ADDR_VAR 0 14
47342: PUSH
47343: LD_INT 0
47345: PUSH
47346: LD_INT 0
47348: PUSH
47349: EMPTY
47350: LIST
47351: LIST
47352: PUSH
47353: LD_INT 0
47355: PUSH
47356: LD_INT 1
47358: NEG
47359: PUSH
47360: EMPTY
47361: LIST
47362: LIST
47363: PUSH
47364: LD_INT 1
47366: PUSH
47367: LD_INT 0
47369: PUSH
47370: EMPTY
47371: LIST
47372: LIST
47373: PUSH
47374: LD_INT 1
47376: PUSH
47377: LD_INT 1
47379: PUSH
47380: EMPTY
47381: LIST
47382: LIST
47383: PUSH
47384: LD_INT 0
47386: PUSH
47387: LD_INT 1
47389: PUSH
47390: EMPTY
47391: LIST
47392: LIST
47393: PUSH
47394: LD_INT 1
47396: NEG
47397: PUSH
47398: LD_INT 0
47400: PUSH
47401: EMPTY
47402: LIST
47403: LIST
47404: PUSH
47405: LD_INT 1
47407: NEG
47408: PUSH
47409: LD_INT 1
47411: NEG
47412: PUSH
47413: EMPTY
47414: LIST
47415: LIST
47416: PUSH
47417: LD_INT 1
47419: NEG
47420: PUSH
47421: LD_INT 2
47423: NEG
47424: PUSH
47425: EMPTY
47426: LIST
47427: LIST
47428: PUSH
47429: LD_INT 0
47431: PUSH
47432: LD_INT 2
47434: NEG
47435: PUSH
47436: EMPTY
47437: LIST
47438: LIST
47439: PUSH
47440: LD_INT 1
47442: PUSH
47443: LD_INT 1
47445: NEG
47446: PUSH
47447: EMPTY
47448: LIST
47449: LIST
47450: PUSH
47451: LD_INT 1
47453: PUSH
47454: LD_INT 2
47456: PUSH
47457: EMPTY
47458: LIST
47459: LIST
47460: PUSH
47461: LD_INT 0
47463: PUSH
47464: LD_INT 2
47466: PUSH
47467: EMPTY
47468: LIST
47469: LIST
47470: PUSH
47471: LD_INT 1
47473: NEG
47474: PUSH
47475: LD_INT 1
47477: PUSH
47478: EMPTY
47479: LIST
47480: LIST
47481: PUSH
47482: LD_INT 1
47484: NEG
47485: PUSH
47486: LD_INT 3
47488: NEG
47489: PUSH
47490: EMPTY
47491: LIST
47492: LIST
47493: PUSH
47494: LD_INT 0
47496: PUSH
47497: LD_INT 3
47499: NEG
47500: PUSH
47501: EMPTY
47502: LIST
47503: LIST
47504: PUSH
47505: LD_INT 1
47507: PUSH
47508: LD_INT 2
47510: NEG
47511: PUSH
47512: EMPTY
47513: LIST
47514: LIST
47515: PUSH
47516: EMPTY
47517: LIST
47518: LIST
47519: LIST
47520: LIST
47521: LIST
47522: LIST
47523: LIST
47524: LIST
47525: LIST
47526: LIST
47527: LIST
47528: LIST
47529: LIST
47530: LIST
47531: LIST
47532: LIST
47533: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47534: LD_ADDR_VAR 0 15
47538: PUSH
47539: LD_INT 0
47541: PUSH
47542: LD_INT 0
47544: PUSH
47545: EMPTY
47546: LIST
47547: LIST
47548: PUSH
47549: LD_INT 0
47551: PUSH
47552: LD_INT 1
47554: NEG
47555: PUSH
47556: EMPTY
47557: LIST
47558: LIST
47559: PUSH
47560: LD_INT 1
47562: PUSH
47563: LD_INT 0
47565: PUSH
47566: EMPTY
47567: LIST
47568: LIST
47569: PUSH
47570: LD_INT 1
47572: PUSH
47573: LD_INT 1
47575: PUSH
47576: EMPTY
47577: LIST
47578: LIST
47579: PUSH
47580: LD_INT 0
47582: PUSH
47583: LD_INT 1
47585: PUSH
47586: EMPTY
47587: LIST
47588: LIST
47589: PUSH
47590: LD_INT 1
47592: NEG
47593: PUSH
47594: LD_INT 0
47596: PUSH
47597: EMPTY
47598: LIST
47599: LIST
47600: PUSH
47601: LD_INT 1
47603: NEG
47604: PUSH
47605: LD_INT 1
47607: NEG
47608: PUSH
47609: EMPTY
47610: LIST
47611: LIST
47612: PUSH
47613: LD_INT 1
47615: PUSH
47616: LD_INT 1
47618: NEG
47619: PUSH
47620: EMPTY
47621: LIST
47622: LIST
47623: PUSH
47624: LD_INT 2
47626: PUSH
47627: LD_INT 0
47629: PUSH
47630: EMPTY
47631: LIST
47632: LIST
47633: PUSH
47634: LD_INT 2
47636: PUSH
47637: LD_INT 1
47639: PUSH
47640: EMPTY
47641: LIST
47642: LIST
47643: PUSH
47644: LD_INT 1
47646: NEG
47647: PUSH
47648: LD_INT 1
47650: PUSH
47651: EMPTY
47652: LIST
47653: LIST
47654: PUSH
47655: LD_INT 2
47657: NEG
47658: PUSH
47659: LD_INT 0
47661: PUSH
47662: EMPTY
47663: LIST
47664: LIST
47665: PUSH
47666: LD_INT 2
47668: NEG
47669: PUSH
47670: LD_INT 1
47672: NEG
47673: PUSH
47674: EMPTY
47675: LIST
47676: LIST
47677: PUSH
47678: LD_INT 2
47680: PUSH
47681: LD_INT 1
47683: NEG
47684: PUSH
47685: EMPTY
47686: LIST
47687: LIST
47688: PUSH
47689: LD_INT 3
47691: PUSH
47692: LD_INT 0
47694: PUSH
47695: EMPTY
47696: LIST
47697: LIST
47698: PUSH
47699: LD_INT 3
47701: PUSH
47702: LD_INT 1
47704: PUSH
47705: EMPTY
47706: LIST
47707: LIST
47708: PUSH
47709: EMPTY
47710: LIST
47711: LIST
47712: LIST
47713: LIST
47714: LIST
47715: LIST
47716: LIST
47717: LIST
47718: LIST
47719: LIST
47720: LIST
47721: LIST
47722: LIST
47723: LIST
47724: LIST
47725: LIST
47726: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47727: LD_ADDR_VAR 0 16
47731: PUSH
47732: LD_INT 0
47734: PUSH
47735: LD_INT 0
47737: PUSH
47738: EMPTY
47739: LIST
47740: LIST
47741: PUSH
47742: LD_INT 0
47744: PUSH
47745: LD_INT 1
47747: NEG
47748: PUSH
47749: EMPTY
47750: LIST
47751: LIST
47752: PUSH
47753: LD_INT 1
47755: PUSH
47756: LD_INT 0
47758: PUSH
47759: EMPTY
47760: LIST
47761: LIST
47762: PUSH
47763: LD_INT 1
47765: PUSH
47766: LD_INT 1
47768: PUSH
47769: EMPTY
47770: LIST
47771: LIST
47772: PUSH
47773: LD_INT 0
47775: PUSH
47776: LD_INT 1
47778: PUSH
47779: EMPTY
47780: LIST
47781: LIST
47782: PUSH
47783: LD_INT 1
47785: NEG
47786: PUSH
47787: LD_INT 0
47789: PUSH
47790: EMPTY
47791: LIST
47792: LIST
47793: PUSH
47794: LD_INT 1
47796: NEG
47797: PUSH
47798: LD_INT 1
47800: NEG
47801: PUSH
47802: EMPTY
47803: LIST
47804: LIST
47805: PUSH
47806: LD_INT 1
47808: NEG
47809: PUSH
47810: LD_INT 2
47812: NEG
47813: PUSH
47814: EMPTY
47815: LIST
47816: LIST
47817: PUSH
47818: LD_INT 2
47820: PUSH
47821: LD_INT 1
47823: PUSH
47824: EMPTY
47825: LIST
47826: LIST
47827: PUSH
47828: LD_INT 2
47830: PUSH
47831: LD_INT 2
47833: PUSH
47834: EMPTY
47835: LIST
47836: LIST
47837: PUSH
47838: LD_INT 1
47840: PUSH
47841: LD_INT 2
47843: PUSH
47844: EMPTY
47845: LIST
47846: LIST
47847: PUSH
47848: LD_INT 2
47850: NEG
47851: PUSH
47852: LD_INT 1
47854: NEG
47855: PUSH
47856: EMPTY
47857: LIST
47858: LIST
47859: PUSH
47860: LD_INT 2
47862: NEG
47863: PUSH
47864: LD_INT 2
47866: NEG
47867: PUSH
47868: EMPTY
47869: LIST
47870: LIST
47871: PUSH
47872: LD_INT 3
47874: PUSH
47875: LD_INT 2
47877: PUSH
47878: EMPTY
47879: LIST
47880: LIST
47881: PUSH
47882: LD_INT 3
47884: PUSH
47885: LD_INT 3
47887: PUSH
47888: EMPTY
47889: LIST
47890: LIST
47891: PUSH
47892: LD_INT 2
47894: PUSH
47895: LD_INT 3
47897: PUSH
47898: EMPTY
47899: LIST
47900: LIST
47901: PUSH
47902: EMPTY
47903: LIST
47904: LIST
47905: LIST
47906: LIST
47907: LIST
47908: LIST
47909: LIST
47910: LIST
47911: LIST
47912: LIST
47913: LIST
47914: LIST
47915: LIST
47916: LIST
47917: LIST
47918: LIST
47919: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47920: LD_ADDR_VAR 0 17
47924: PUSH
47925: LD_INT 0
47927: PUSH
47928: LD_INT 0
47930: PUSH
47931: EMPTY
47932: LIST
47933: LIST
47934: PUSH
47935: LD_INT 0
47937: PUSH
47938: LD_INT 1
47940: NEG
47941: PUSH
47942: EMPTY
47943: LIST
47944: LIST
47945: PUSH
47946: LD_INT 1
47948: PUSH
47949: LD_INT 0
47951: PUSH
47952: EMPTY
47953: LIST
47954: LIST
47955: PUSH
47956: LD_INT 1
47958: PUSH
47959: LD_INT 1
47961: PUSH
47962: EMPTY
47963: LIST
47964: LIST
47965: PUSH
47966: LD_INT 0
47968: PUSH
47969: LD_INT 1
47971: PUSH
47972: EMPTY
47973: LIST
47974: LIST
47975: PUSH
47976: LD_INT 1
47978: NEG
47979: PUSH
47980: LD_INT 0
47982: PUSH
47983: EMPTY
47984: LIST
47985: LIST
47986: PUSH
47987: LD_INT 1
47989: NEG
47990: PUSH
47991: LD_INT 1
47993: NEG
47994: PUSH
47995: EMPTY
47996: LIST
47997: LIST
47998: PUSH
47999: LD_INT 1
48001: NEG
48002: PUSH
48003: LD_INT 2
48005: NEG
48006: PUSH
48007: EMPTY
48008: LIST
48009: LIST
48010: PUSH
48011: LD_INT 0
48013: PUSH
48014: LD_INT 2
48016: NEG
48017: PUSH
48018: EMPTY
48019: LIST
48020: LIST
48021: PUSH
48022: LD_INT 1
48024: PUSH
48025: LD_INT 1
48027: NEG
48028: PUSH
48029: EMPTY
48030: LIST
48031: LIST
48032: PUSH
48033: LD_INT 2
48035: PUSH
48036: LD_INT 0
48038: PUSH
48039: EMPTY
48040: LIST
48041: LIST
48042: PUSH
48043: LD_INT 2
48045: PUSH
48046: LD_INT 1
48048: PUSH
48049: EMPTY
48050: LIST
48051: LIST
48052: PUSH
48053: LD_INT 2
48055: PUSH
48056: LD_INT 2
48058: PUSH
48059: EMPTY
48060: LIST
48061: LIST
48062: PUSH
48063: LD_INT 1
48065: PUSH
48066: LD_INT 2
48068: PUSH
48069: EMPTY
48070: LIST
48071: LIST
48072: PUSH
48073: LD_INT 0
48075: PUSH
48076: LD_INT 2
48078: PUSH
48079: EMPTY
48080: LIST
48081: LIST
48082: PUSH
48083: LD_INT 1
48085: NEG
48086: PUSH
48087: LD_INT 1
48089: PUSH
48090: EMPTY
48091: LIST
48092: LIST
48093: PUSH
48094: LD_INT 2
48096: NEG
48097: PUSH
48098: LD_INT 0
48100: PUSH
48101: EMPTY
48102: LIST
48103: LIST
48104: PUSH
48105: LD_INT 2
48107: NEG
48108: PUSH
48109: LD_INT 1
48111: NEG
48112: PUSH
48113: EMPTY
48114: LIST
48115: LIST
48116: PUSH
48117: LD_INT 2
48119: NEG
48120: PUSH
48121: LD_INT 2
48123: NEG
48124: PUSH
48125: EMPTY
48126: LIST
48127: LIST
48128: PUSH
48129: EMPTY
48130: LIST
48131: LIST
48132: LIST
48133: LIST
48134: LIST
48135: LIST
48136: LIST
48137: LIST
48138: LIST
48139: LIST
48140: LIST
48141: LIST
48142: LIST
48143: LIST
48144: LIST
48145: LIST
48146: LIST
48147: LIST
48148: LIST
48149: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48150: LD_ADDR_VAR 0 18
48154: PUSH
48155: LD_INT 0
48157: PUSH
48158: LD_INT 0
48160: PUSH
48161: EMPTY
48162: LIST
48163: LIST
48164: PUSH
48165: LD_INT 0
48167: PUSH
48168: LD_INT 1
48170: NEG
48171: PUSH
48172: EMPTY
48173: LIST
48174: LIST
48175: PUSH
48176: LD_INT 1
48178: PUSH
48179: LD_INT 0
48181: PUSH
48182: EMPTY
48183: LIST
48184: LIST
48185: PUSH
48186: LD_INT 1
48188: PUSH
48189: LD_INT 1
48191: PUSH
48192: EMPTY
48193: LIST
48194: LIST
48195: PUSH
48196: LD_INT 0
48198: PUSH
48199: LD_INT 1
48201: PUSH
48202: EMPTY
48203: LIST
48204: LIST
48205: PUSH
48206: LD_INT 1
48208: NEG
48209: PUSH
48210: LD_INT 0
48212: PUSH
48213: EMPTY
48214: LIST
48215: LIST
48216: PUSH
48217: LD_INT 1
48219: NEG
48220: PUSH
48221: LD_INT 1
48223: NEG
48224: PUSH
48225: EMPTY
48226: LIST
48227: LIST
48228: PUSH
48229: LD_INT 1
48231: NEG
48232: PUSH
48233: LD_INT 2
48235: NEG
48236: PUSH
48237: EMPTY
48238: LIST
48239: LIST
48240: PUSH
48241: LD_INT 0
48243: PUSH
48244: LD_INT 2
48246: NEG
48247: PUSH
48248: EMPTY
48249: LIST
48250: LIST
48251: PUSH
48252: LD_INT 1
48254: PUSH
48255: LD_INT 1
48257: NEG
48258: PUSH
48259: EMPTY
48260: LIST
48261: LIST
48262: PUSH
48263: LD_INT 2
48265: PUSH
48266: LD_INT 0
48268: PUSH
48269: EMPTY
48270: LIST
48271: LIST
48272: PUSH
48273: LD_INT 2
48275: PUSH
48276: LD_INT 1
48278: PUSH
48279: EMPTY
48280: LIST
48281: LIST
48282: PUSH
48283: LD_INT 2
48285: PUSH
48286: LD_INT 2
48288: PUSH
48289: EMPTY
48290: LIST
48291: LIST
48292: PUSH
48293: LD_INT 1
48295: PUSH
48296: LD_INT 2
48298: PUSH
48299: EMPTY
48300: LIST
48301: LIST
48302: PUSH
48303: LD_INT 0
48305: PUSH
48306: LD_INT 2
48308: PUSH
48309: EMPTY
48310: LIST
48311: LIST
48312: PUSH
48313: LD_INT 1
48315: NEG
48316: PUSH
48317: LD_INT 1
48319: PUSH
48320: EMPTY
48321: LIST
48322: LIST
48323: PUSH
48324: LD_INT 2
48326: NEG
48327: PUSH
48328: LD_INT 0
48330: PUSH
48331: EMPTY
48332: LIST
48333: LIST
48334: PUSH
48335: LD_INT 2
48337: NEG
48338: PUSH
48339: LD_INT 1
48341: NEG
48342: PUSH
48343: EMPTY
48344: LIST
48345: LIST
48346: PUSH
48347: LD_INT 2
48349: NEG
48350: PUSH
48351: LD_INT 2
48353: NEG
48354: PUSH
48355: EMPTY
48356: LIST
48357: LIST
48358: PUSH
48359: EMPTY
48360: LIST
48361: LIST
48362: LIST
48363: LIST
48364: LIST
48365: LIST
48366: LIST
48367: LIST
48368: LIST
48369: LIST
48370: LIST
48371: LIST
48372: LIST
48373: LIST
48374: LIST
48375: LIST
48376: LIST
48377: LIST
48378: LIST
48379: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48380: LD_ADDR_VAR 0 19
48384: PUSH
48385: LD_INT 0
48387: PUSH
48388: LD_INT 0
48390: PUSH
48391: EMPTY
48392: LIST
48393: LIST
48394: PUSH
48395: LD_INT 0
48397: PUSH
48398: LD_INT 1
48400: NEG
48401: PUSH
48402: EMPTY
48403: LIST
48404: LIST
48405: PUSH
48406: LD_INT 1
48408: PUSH
48409: LD_INT 0
48411: PUSH
48412: EMPTY
48413: LIST
48414: LIST
48415: PUSH
48416: LD_INT 1
48418: PUSH
48419: LD_INT 1
48421: PUSH
48422: EMPTY
48423: LIST
48424: LIST
48425: PUSH
48426: LD_INT 0
48428: PUSH
48429: LD_INT 1
48431: PUSH
48432: EMPTY
48433: LIST
48434: LIST
48435: PUSH
48436: LD_INT 1
48438: NEG
48439: PUSH
48440: LD_INT 0
48442: PUSH
48443: EMPTY
48444: LIST
48445: LIST
48446: PUSH
48447: LD_INT 1
48449: NEG
48450: PUSH
48451: LD_INT 1
48453: NEG
48454: PUSH
48455: EMPTY
48456: LIST
48457: LIST
48458: PUSH
48459: LD_INT 1
48461: NEG
48462: PUSH
48463: LD_INT 2
48465: NEG
48466: PUSH
48467: EMPTY
48468: LIST
48469: LIST
48470: PUSH
48471: LD_INT 0
48473: PUSH
48474: LD_INT 2
48476: NEG
48477: PUSH
48478: EMPTY
48479: LIST
48480: LIST
48481: PUSH
48482: LD_INT 1
48484: PUSH
48485: LD_INT 1
48487: NEG
48488: PUSH
48489: EMPTY
48490: LIST
48491: LIST
48492: PUSH
48493: LD_INT 2
48495: PUSH
48496: LD_INT 0
48498: PUSH
48499: EMPTY
48500: LIST
48501: LIST
48502: PUSH
48503: LD_INT 2
48505: PUSH
48506: LD_INT 1
48508: PUSH
48509: EMPTY
48510: LIST
48511: LIST
48512: PUSH
48513: LD_INT 2
48515: PUSH
48516: LD_INT 2
48518: PUSH
48519: EMPTY
48520: LIST
48521: LIST
48522: PUSH
48523: LD_INT 1
48525: PUSH
48526: LD_INT 2
48528: PUSH
48529: EMPTY
48530: LIST
48531: LIST
48532: PUSH
48533: LD_INT 0
48535: PUSH
48536: LD_INT 2
48538: PUSH
48539: EMPTY
48540: LIST
48541: LIST
48542: PUSH
48543: LD_INT 1
48545: NEG
48546: PUSH
48547: LD_INT 1
48549: PUSH
48550: EMPTY
48551: LIST
48552: LIST
48553: PUSH
48554: LD_INT 2
48556: NEG
48557: PUSH
48558: LD_INT 0
48560: PUSH
48561: EMPTY
48562: LIST
48563: LIST
48564: PUSH
48565: LD_INT 2
48567: NEG
48568: PUSH
48569: LD_INT 1
48571: NEG
48572: PUSH
48573: EMPTY
48574: LIST
48575: LIST
48576: PUSH
48577: LD_INT 2
48579: NEG
48580: PUSH
48581: LD_INT 2
48583: NEG
48584: PUSH
48585: EMPTY
48586: LIST
48587: LIST
48588: PUSH
48589: EMPTY
48590: LIST
48591: LIST
48592: LIST
48593: LIST
48594: LIST
48595: LIST
48596: LIST
48597: LIST
48598: LIST
48599: LIST
48600: LIST
48601: LIST
48602: LIST
48603: LIST
48604: LIST
48605: LIST
48606: LIST
48607: LIST
48608: LIST
48609: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48610: LD_ADDR_VAR 0 20
48614: PUSH
48615: LD_INT 0
48617: PUSH
48618: LD_INT 0
48620: PUSH
48621: EMPTY
48622: LIST
48623: LIST
48624: PUSH
48625: LD_INT 0
48627: PUSH
48628: LD_INT 1
48630: NEG
48631: PUSH
48632: EMPTY
48633: LIST
48634: LIST
48635: PUSH
48636: LD_INT 1
48638: PUSH
48639: LD_INT 0
48641: PUSH
48642: EMPTY
48643: LIST
48644: LIST
48645: PUSH
48646: LD_INT 1
48648: PUSH
48649: LD_INT 1
48651: PUSH
48652: EMPTY
48653: LIST
48654: LIST
48655: PUSH
48656: LD_INT 0
48658: PUSH
48659: LD_INT 1
48661: PUSH
48662: EMPTY
48663: LIST
48664: LIST
48665: PUSH
48666: LD_INT 1
48668: NEG
48669: PUSH
48670: LD_INT 0
48672: PUSH
48673: EMPTY
48674: LIST
48675: LIST
48676: PUSH
48677: LD_INT 1
48679: NEG
48680: PUSH
48681: LD_INT 1
48683: NEG
48684: PUSH
48685: EMPTY
48686: LIST
48687: LIST
48688: PUSH
48689: LD_INT 1
48691: NEG
48692: PUSH
48693: LD_INT 2
48695: NEG
48696: PUSH
48697: EMPTY
48698: LIST
48699: LIST
48700: PUSH
48701: LD_INT 0
48703: PUSH
48704: LD_INT 2
48706: NEG
48707: PUSH
48708: EMPTY
48709: LIST
48710: LIST
48711: PUSH
48712: LD_INT 1
48714: PUSH
48715: LD_INT 1
48717: NEG
48718: PUSH
48719: EMPTY
48720: LIST
48721: LIST
48722: PUSH
48723: LD_INT 2
48725: PUSH
48726: LD_INT 0
48728: PUSH
48729: EMPTY
48730: LIST
48731: LIST
48732: PUSH
48733: LD_INT 2
48735: PUSH
48736: LD_INT 1
48738: PUSH
48739: EMPTY
48740: LIST
48741: LIST
48742: PUSH
48743: LD_INT 2
48745: PUSH
48746: LD_INT 2
48748: PUSH
48749: EMPTY
48750: LIST
48751: LIST
48752: PUSH
48753: LD_INT 1
48755: PUSH
48756: LD_INT 2
48758: PUSH
48759: EMPTY
48760: LIST
48761: LIST
48762: PUSH
48763: LD_INT 0
48765: PUSH
48766: LD_INT 2
48768: PUSH
48769: EMPTY
48770: LIST
48771: LIST
48772: PUSH
48773: LD_INT 1
48775: NEG
48776: PUSH
48777: LD_INT 1
48779: PUSH
48780: EMPTY
48781: LIST
48782: LIST
48783: PUSH
48784: LD_INT 2
48786: NEG
48787: PUSH
48788: LD_INT 0
48790: PUSH
48791: EMPTY
48792: LIST
48793: LIST
48794: PUSH
48795: LD_INT 2
48797: NEG
48798: PUSH
48799: LD_INT 1
48801: NEG
48802: PUSH
48803: EMPTY
48804: LIST
48805: LIST
48806: PUSH
48807: LD_INT 2
48809: NEG
48810: PUSH
48811: LD_INT 2
48813: NEG
48814: PUSH
48815: EMPTY
48816: LIST
48817: LIST
48818: PUSH
48819: EMPTY
48820: LIST
48821: LIST
48822: LIST
48823: LIST
48824: LIST
48825: LIST
48826: LIST
48827: LIST
48828: LIST
48829: LIST
48830: LIST
48831: LIST
48832: LIST
48833: LIST
48834: LIST
48835: LIST
48836: LIST
48837: LIST
48838: LIST
48839: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48840: LD_ADDR_VAR 0 21
48844: PUSH
48845: LD_INT 0
48847: PUSH
48848: LD_INT 0
48850: PUSH
48851: EMPTY
48852: LIST
48853: LIST
48854: PUSH
48855: LD_INT 0
48857: PUSH
48858: LD_INT 1
48860: NEG
48861: PUSH
48862: EMPTY
48863: LIST
48864: LIST
48865: PUSH
48866: LD_INT 1
48868: PUSH
48869: LD_INT 0
48871: PUSH
48872: EMPTY
48873: LIST
48874: LIST
48875: PUSH
48876: LD_INT 1
48878: PUSH
48879: LD_INT 1
48881: PUSH
48882: EMPTY
48883: LIST
48884: LIST
48885: PUSH
48886: LD_INT 0
48888: PUSH
48889: LD_INT 1
48891: PUSH
48892: EMPTY
48893: LIST
48894: LIST
48895: PUSH
48896: LD_INT 1
48898: NEG
48899: PUSH
48900: LD_INT 0
48902: PUSH
48903: EMPTY
48904: LIST
48905: LIST
48906: PUSH
48907: LD_INT 1
48909: NEG
48910: PUSH
48911: LD_INT 1
48913: NEG
48914: PUSH
48915: EMPTY
48916: LIST
48917: LIST
48918: PUSH
48919: LD_INT 1
48921: NEG
48922: PUSH
48923: LD_INT 2
48925: NEG
48926: PUSH
48927: EMPTY
48928: LIST
48929: LIST
48930: PUSH
48931: LD_INT 0
48933: PUSH
48934: LD_INT 2
48936: NEG
48937: PUSH
48938: EMPTY
48939: LIST
48940: LIST
48941: PUSH
48942: LD_INT 1
48944: PUSH
48945: LD_INT 1
48947: NEG
48948: PUSH
48949: EMPTY
48950: LIST
48951: LIST
48952: PUSH
48953: LD_INT 2
48955: PUSH
48956: LD_INT 0
48958: PUSH
48959: EMPTY
48960: LIST
48961: LIST
48962: PUSH
48963: LD_INT 2
48965: PUSH
48966: LD_INT 1
48968: PUSH
48969: EMPTY
48970: LIST
48971: LIST
48972: PUSH
48973: LD_INT 2
48975: PUSH
48976: LD_INT 2
48978: PUSH
48979: EMPTY
48980: LIST
48981: LIST
48982: PUSH
48983: LD_INT 1
48985: PUSH
48986: LD_INT 2
48988: PUSH
48989: EMPTY
48990: LIST
48991: LIST
48992: PUSH
48993: LD_INT 0
48995: PUSH
48996: LD_INT 2
48998: PUSH
48999: EMPTY
49000: LIST
49001: LIST
49002: PUSH
49003: LD_INT 1
49005: NEG
49006: PUSH
49007: LD_INT 1
49009: PUSH
49010: EMPTY
49011: LIST
49012: LIST
49013: PUSH
49014: LD_INT 2
49016: NEG
49017: PUSH
49018: LD_INT 0
49020: PUSH
49021: EMPTY
49022: LIST
49023: LIST
49024: PUSH
49025: LD_INT 2
49027: NEG
49028: PUSH
49029: LD_INT 1
49031: NEG
49032: PUSH
49033: EMPTY
49034: LIST
49035: LIST
49036: PUSH
49037: LD_INT 2
49039: NEG
49040: PUSH
49041: LD_INT 2
49043: NEG
49044: PUSH
49045: EMPTY
49046: LIST
49047: LIST
49048: PUSH
49049: EMPTY
49050: LIST
49051: LIST
49052: LIST
49053: LIST
49054: LIST
49055: LIST
49056: LIST
49057: LIST
49058: LIST
49059: LIST
49060: LIST
49061: LIST
49062: LIST
49063: LIST
49064: LIST
49065: LIST
49066: LIST
49067: LIST
49068: LIST
49069: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49070: LD_ADDR_VAR 0 22
49074: PUSH
49075: LD_INT 0
49077: PUSH
49078: LD_INT 0
49080: PUSH
49081: EMPTY
49082: LIST
49083: LIST
49084: PUSH
49085: LD_INT 0
49087: PUSH
49088: LD_INT 1
49090: NEG
49091: PUSH
49092: EMPTY
49093: LIST
49094: LIST
49095: PUSH
49096: LD_INT 1
49098: PUSH
49099: LD_INT 0
49101: PUSH
49102: EMPTY
49103: LIST
49104: LIST
49105: PUSH
49106: LD_INT 1
49108: PUSH
49109: LD_INT 1
49111: PUSH
49112: EMPTY
49113: LIST
49114: LIST
49115: PUSH
49116: LD_INT 0
49118: PUSH
49119: LD_INT 1
49121: PUSH
49122: EMPTY
49123: LIST
49124: LIST
49125: PUSH
49126: LD_INT 1
49128: NEG
49129: PUSH
49130: LD_INT 0
49132: PUSH
49133: EMPTY
49134: LIST
49135: LIST
49136: PUSH
49137: LD_INT 1
49139: NEG
49140: PUSH
49141: LD_INT 1
49143: NEG
49144: PUSH
49145: EMPTY
49146: LIST
49147: LIST
49148: PUSH
49149: LD_INT 1
49151: NEG
49152: PUSH
49153: LD_INT 2
49155: NEG
49156: PUSH
49157: EMPTY
49158: LIST
49159: LIST
49160: PUSH
49161: LD_INT 0
49163: PUSH
49164: LD_INT 2
49166: NEG
49167: PUSH
49168: EMPTY
49169: LIST
49170: LIST
49171: PUSH
49172: LD_INT 1
49174: PUSH
49175: LD_INT 1
49177: NEG
49178: PUSH
49179: EMPTY
49180: LIST
49181: LIST
49182: PUSH
49183: LD_INT 2
49185: PUSH
49186: LD_INT 0
49188: PUSH
49189: EMPTY
49190: LIST
49191: LIST
49192: PUSH
49193: LD_INT 2
49195: PUSH
49196: LD_INT 1
49198: PUSH
49199: EMPTY
49200: LIST
49201: LIST
49202: PUSH
49203: LD_INT 2
49205: PUSH
49206: LD_INT 2
49208: PUSH
49209: EMPTY
49210: LIST
49211: LIST
49212: PUSH
49213: LD_INT 1
49215: PUSH
49216: LD_INT 2
49218: PUSH
49219: EMPTY
49220: LIST
49221: LIST
49222: PUSH
49223: LD_INT 0
49225: PUSH
49226: LD_INT 2
49228: PUSH
49229: EMPTY
49230: LIST
49231: LIST
49232: PUSH
49233: LD_INT 1
49235: NEG
49236: PUSH
49237: LD_INT 1
49239: PUSH
49240: EMPTY
49241: LIST
49242: LIST
49243: PUSH
49244: LD_INT 2
49246: NEG
49247: PUSH
49248: LD_INT 0
49250: PUSH
49251: EMPTY
49252: LIST
49253: LIST
49254: PUSH
49255: LD_INT 2
49257: NEG
49258: PUSH
49259: LD_INT 1
49261: NEG
49262: PUSH
49263: EMPTY
49264: LIST
49265: LIST
49266: PUSH
49267: LD_INT 2
49269: NEG
49270: PUSH
49271: LD_INT 2
49273: NEG
49274: PUSH
49275: EMPTY
49276: LIST
49277: LIST
49278: PUSH
49279: EMPTY
49280: LIST
49281: LIST
49282: LIST
49283: LIST
49284: LIST
49285: LIST
49286: LIST
49287: LIST
49288: LIST
49289: LIST
49290: LIST
49291: LIST
49292: LIST
49293: LIST
49294: LIST
49295: LIST
49296: LIST
49297: LIST
49298: LIST
49299: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
49300: LD_ADDR_VAR 0 23
49304: PUSH
49305: LD_INT 0
49307: PUSH
49308: LD_INT 0
49310: PUSH
49311: EMPTY
49312: LIST
49313: LIST
49314: PUSH
49315: LD_INT 0
49317: PUSH
49318: LD_INT 1
49320: NEG
49321: PUSH
49322: EMPTY
49323: LIST
49324: LIST
49325: PUSH
49326: LD_INT 1
49328: PUSH
49329: LD_INT 0
49331: PUSH
49332: EMPTY
49333: LIST
49334: LIST
49335: PUSH
49336: LD_INT 1
49338: PUSH
49339: LD_INT 1
49341: PUSH
49342: EMPTY
49343: LIST
49344: LIST
49345: PUSH
49346: LD_INT 0
49348: PUSH
49349: LD_INT 1
49351: PUSH
49352: EMPTY
49353: LIST
49354: LIST
49355: PUSH
49356: LD_INT 1
49358: NEG
49359: PUSH
49360: LD_INT 0
49362: PUSH
49363: EMPTY
49364: LIST
49365: LIST
49366: PUSH
49367: LD_INT 1
49369: NEG
49370: PUSH
49371: LD_INT 1
49373: NEG
49374: PUSH
49375: EMPTY
49376: LIST
49377: LIST
49378: PUSH
49379: LD_INT 1
49381: NEG
49382: PUSH
49383: LD_INT 2
49385: NEG
49386: PUSH
49387: EMPTY
49388: LIST
49389: LIST
49390: PUSH
49391: LD_INT 0
49393: PUSH
49394: LD_INT 2
49396: NEG
49397: PUSH
49398: EMPTY
49399: LIST
49400: LIST
49401: PUSH
49402: LD_INT 1
49404: PUSH
49405: LD_INT 1
49407: NEG
49408: PUSH
49409: EMPTY
49410: LIST
49411: LIST
49412: PUSH
49413: LD_INT 2
49415: PUSH
49416: LD_INT 0
49418: PUSH
49419: EMPTY
49420: LIST
49421: LIST
49422: PUSH
49423: LD_INT 2
49425: PUSH
49426: LD_INT 1
49428: PUSH
49429: EMPTY
49430: LIST
49431: LIST
49432: PUSH
49433: LD_INT 2
49435: PUSH
49436: LD_INT 2
49438: PUSH
49439: EMPTY
49440: LIST
49441: LIST
49442: PUSH
49443: LD_INT 1
49445: PUSH
49446: LD_INT 2
49448: PUSH
49449: EMPTY
49450: LIST
49451: LIST
49452: PUSH
49453: LD_INT 0
49455: PUSH
49456: LD_INT 2
49458: PUSH
49459: EMPTY
49460: LIST
49461: LIST
49462: PUSH
49463: LD_INT 1
49465: NEG
49466: PUSH
49467: LD_INT 1
49469: PUSH
49470: EMPTY
49471: LIST
49472: LIST
49473: PUSH
49474: LD_INT 2
49476: NEG
49477: PUSH
49478: LD_INT 0
49480: PUSH
49481: EMPTY
49482: LIST
49483: LIST
49484: PUSH
49485: LD_INT 2
49487: NEG
49488: PUSH
49489: LD_INT 1
49491: NEG
49492: PUSH
49493: EMPTY
49494: LIST
49495: LIST
49496: PUSH
49497: LD_INT 2
49499: NEG
49500: PUSH
49501: LD_INT 2
49503: NEG
49504: PUSH
49505: EMPTY
49506: LIST
49507: LIST
49508: PUSH
49509: LD_INT 2
49511: NEG
49512: PUSH
49513: LD_INT 3
49515: NEG
49516: PUSH
49517: EMPTY
49518: LIST
49519: LIST
49520: PUSH
49521: LD_INT 1
49523: NEG
49524: PUSH
49525: LD_INT 3
49527: NEG
49528: PUSH
49529: EMPTY
49530: LIST
49531: LIST
49532: PUSH
49533: LD_INT 1
49535: PUSH
49536: LD_INT 2
49538: NEG
49539: PUSH
49540: EMPTY
49541: LIST
49542: LIST
49543: PUSH
49544: LD_INT 2
49546: PUSH
49547: LD_INT 1
49549: NEG
49550: PUSH
49551: EMPTY
49552: LIST
49553: LIST
49554: PUSH
49555: EMPTY
49556: LIST
49557: LIST
49558: LIST
49559: LIST
49560: LIST
49561: LIST
49562: LIST
49563: LIST
49564: LIST
49565: LIST
49566: LIST
49567: LIST
49568: LIST
49569: LIST
49570: LIST
49571: LIST
49572: LIST
49573: LIST
49574: LIST
49575: LIST
49576: LIST
49577: LIST
49578: LIST
49579: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
49580: LD_ADDR_VAR 0 24
49584: PUSH
49585: LD_INT 0
49587: PUSH
49588: LD_INT 0
49590: PUSH
49591: EMPTY
49592: LIST
49593: LIST
49594: PUSH
49595: LD_INT 0
49597: PUSH
49598: LD_INT 1
49600: NEG
49601: PUSH
49602: EMPTY
49603: LIST
49604: LIST
49605: PUSH
49606: LD_INT 1
49608: PUSH
49609: LD_INT 0
49611: PUSH
49612: EMPTY
49613: LIST
49614: LIST
49615: PUSH
49616: LD_INT 1
49618: PUSH
49619: LD_INT 1
49621: PUSH
49622: EMPTY
49623: LIST
49624: LIST
49625: PUSH
49626: LD_INT 0
49628: PUSH
49629: LD_INT 1
49631: PUSH
49632: EMPTY
49633: LIST
49634: LIST
49635: PUSH
49636: LD_INT 1
49638: NEG
49639: PUSH
49640: LD_INT 0
49642: PUSH
49643: EMPTY
49644: LIST
49645: LIST
49646: PUSH
49647: LD_INT 1
49649: NEG
49650: PUSH
49651: LD_INT 1
49653: NEG
49654: PUSH
49655: EMPTY
49656: LIST
49657: LIST
49658: PUSH
49659: LD_INT 1
49661: NEG
49662: PUSH
49663: LD_INT 2
49665: NEG
49666: PUSH
49667: EMPTY
49668: LIST
49669: LIST
49670: PUSH
49671: LD_INT 0
49673: PUSH
49674: LD_INT 2
49676: NEG
49677: PUSH
49678: EMPTY
49679: LIST
49680: LIST
49681: PUSH
49682: LD_INT 1
49684: PUSH
49685: LD_INT 1
49687: NEG
49688: PUSH
49689: EMPTY
49690: LIST
49691: LIST
49692: PUSH
49693: LD_INT 2
49695: PUSH
49696: LD_INT 0
49698: PUSH
49699: EMPTY
49700: LIST
49701: LIST
49702: PUSH
49703: LD_INT 2
49705: PUSH
49706: LD_INT 1
49708: PUSH
49709: EMPTY
49710: LIST
49711: LIST
49712: PUSH
49713: LD_INT 2
49715: PUSH
49716: LD_INT 2
49718: PUSH
49719: EMPTY
49720: LIST
49721: LIST
49722: PUSH
49723: LD_INT 1
49725: PUSH
49726: LD_INT 2
49728: PUSH
49729: EMPTY
49730: LIST
49731: LIST
49732: PUSH
49733: LD_INT 0
49735: PUSH
49736: LD_INT 2
49738: PUSH
49739: EMPTY
49740: LIST
49741: LIST
49742: PUSH
49743: LD_INT 1
49745: NEG
49746: PUSH
49747: LD_INT 1
49749: PUSH
49750: EMPTY
49751: LIST
49752: LIST
49753: PUSH
49754: LD_INT 2
49756: NEG
49757: PUSH
49758: LD_INT 0
49760: PUSH
49761: EMPTY
49762: LIST
49763: LIST
49764: PUSH
49765: LD_INT 2
49767: NEG
49768: PUSH
49769: LD_INT 1
49771: NEG
49772: PUSH
49773: EMPTY
49774: LIST
49775: LIST
49776: PUSH
49777: LD_INT 2
49779: NEG
49780: PUSH
49781: LD_INT 2
49783: NEG
49784: PUSH
49785: EMPTY
49786: LIST
49787: LIST
49788: PUSH
49789: LD_INT 1
49791: PUSH
49792: LD_INT 2
49794: NEG
49795: PUSH
49796: EMPTY
49797: LIST
49798: LIST
49799: PUSH
49800: LD_INT 2
49802: PUSH
49803: LD_INT 1
49805: NEG
49806: PUSH
49807: EMPTY
49808: LIST
49809: LIST
49810: PUSH
49811: LD_INT 3
49813: PUSH
49814: LD_INT 1
49816: PUSH
49817: EMPTY
49818: LIST
49819: LIST
49820: PUSH
49821: LD_INT 3
49823: PUSH
49824: LD_INT 2
49826: PUSH
49827: EMPTY
49828: LIST
49829: LIST
49830: PUSH
49831: EMPTY
49832: LIST
49833: LIST
49834: LIST
49835: LIST
49836: LIST
49837: LIST
49838: LIST
49839: LIST
49840: LIST
49841: LIST
49842: LIST
49843: LIST
49844: LIST
49845: LIST
49846: LIST
49847: LIST
49848: LIST
49849: LIST
49850: LIST
49851: LIST
49852: LIST
49853: LIST
49854: LIST
49855: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
49856: LD_ADDR_VAR 0 25
49860: PUSH
49861: LD_INT 0
49863: PUSH
49864: LD_INT 0
49866: PUSH
49867: EMPTY
49868: LIST
49869: LIST
49870: PUSH
49871: LD_INT 0
49873: PUSH
49874: LD_INT 1
49876: NEG
49877: PUSH
49878: EMPTY
49879: LIST
49880: LIST
49881: PUSH
49882: LD_INT 1
49884: PUSH
49885: LD_INT 0
49887: PUSH
49888: EMPTY
49889: LIST
49890: LIST
49891: PUSH
49892: LD_INT 1
49894: PUSH
49895: LD_INT 1
49897: PUSH
49898: EMPTY
49899: LIST
49900: LIST
49901: PUSH
49902: LD_INT 0
49904: PUSH
49905: LD_INT 1
49907: PUSH
49908: EMPTY
49909: LIST
49910: LIST
49911: PUSH
49912: LD_INT 1
49914: NEG
49915: PUSH
49916: LD_INT 0
49918: PUSH
49919: EMPTY
49920: LIST
49921: LIST
49922: PUSH
49923: LD_INT 1
49925: NEG
49926: PUSH
49927: LD_INT 1
49929: NEG
49930: PUSH
49931: EMPTY
49932: LIST
49933: LIST
49934: PUSH
49935: LD_INT 1
49937: NEG
49938: PUSH
49939: LD_INT 2
49941: NEG
49942: PUSH
49943: EMPTY
49944: LIST
49945: LIST
49946: PUSH
49947: LD_INT 0
49949: PUSH
49950: LD_INT 2
49952: NEG
49953: PUSH
49954: EMPTY
49955: LIST
49956: LIST
49957: PUSH
49958: LD_INT 1
49960: PUSH
49961: LD_INT 1
49963: NEG
49964: PUSH
49965: EMPTY
49966: LIST
49967: LIST
49968: PUSH
49969: LD_INT 2
49971: PUSH
49972: LD_INT 0
49974: PUSH
49975: EMPTY
49976: LIST
49977: LIST
49978: PUSH
49979: LD_INT 2
49981: PUSH
49982: LD_INT 1
49984: PUSH
49985: EMPTY
49986: LIST
49987: LIST
49988: PUSH
49989: LD_INT 2
49991: PUSH
49992: LD_INT 2
49994: PUSH
49995: EMPTY
49996: LIST
49997: LIST
49998: PUSH
49999: LD_INT 1
50001: PUSH
50002: LD_INT 2
50004: PUSH
50005: EMPTY
50006: LIST
50007: LIST
50008: PUSH
50009: LD_INT 0
50011: PUSH
50012: LD_INT 2
50014: PUSH
50015: EMPTY
50016: LIST
50017: LIST
50018: PUSH
50019: LD_INT 1
50021: NEG
50022: PUSH
50023: LD_INT 1
50025: PUSH
50026: EMPTY
50027: LIST
50028: LIST
50029: PUSH
50030: LD_INT 2
50032: NEG
50033: PUSH
50034: LD_INT 0
50036: PUSH
50037: EMPTY
50038: LIST
50039: LIST
50040: PUSH
50041: LD_INT 2
50043: NEG
50044: PUSH
50045: LD_INT 1
50047: NEG
50048: PUSH
50049: EMPTY
50050: LIST
50051: LIST
50052: PUSH
50053: LD_INT 2
50055: NEG
50056: PUSH
50057: LD_INT 2
50059: NEG
50060: PUSH
50061: EMPTY
50062: LIST
50063: LIST
50064: PUSH
50065: LD_INT 3
50067: PUSH
50068: LD_INT 1
50070: PUSH
50071: EMPTY
50072: LIST
50073: LIST
50074: PUSH
50075: LD_INT 3
50077: PUSH
50078: LD_INT 2
50080: PUSH
50081: EMPTY
50082: LIST
50083: LIST
50084: PUSH
50085: LD_INT 2
50087: PUSH
50088: LD_INT 3
50090: PUSH
50091: EMPTY
50092: LIST
50093: LIST
50094: PUSH
50095: LD_INT 1
50097: PUSH
50098: LD_INT 3
50100: PUSH
50101: EMPTY
50102: LIST
50103: LIST
50104: PUSH
50105: EMPTY
50106: LIST
50107: LIST
50108: LIST
50109: LIST
50110: LIST
50111: LIST
50112: LIST
50113: LIST
50114: LIST
50115: LIST
50116: LIST
50117: LIST
50118: LIST
50119: LIST
50120: LIST
50121: LIST
50122: LIST
50123: LIST
50124: LIST
50125: LIST
50126: LIST
50127: LIST
50128: LIST
50129: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
50130: LD_ADDR_VAR 0 26
50134: PUSH
50135: LD_INT 0
50137: PUSH
50138: LD_INT 0
50140: PUSH
50141: EMPTY
50142: LIST
50143: LIST
50144: PUSH
50145: LD_INT 0
50147: PUSH
50148: LD_INT 1
50150: NEG
50151: PUSH
50152: EMPTY
50153: LIST
50154: LIST
50155: PUSH
50156: LD_INT 1
50158: PUSH
50159: LD_INT 0
50161: PUSH
50162: EMPTY
50163: LIST
50164: LIST
50165: PUSH
50166: LD_INT 1
50168: PUSH
50169: LD_INT 1
50171: PUSH
50172: EMPTY
50173: LIST
50174: LIST
50175: PUSH
50176: LD_INT 0
50178: PUSH
50179: LD_INT 1
50181: PUSH
50182: EMPTY
50183: LIST
50184: LIST
50185: PUSH
50186: LD_INT 1
50188: NEG
50189: PUSH
50190: LD_INT 0
50192: PUSH
50193: EMPTY
50194: LIST
50195: LIST
50196: PUSH
50197: LD_INT 1
50199: NEG
50200: PUSH
50201: LD_INT 1
50203: NEG
50204: PUSH
50205: EMPTY
50206: LIST
50207: LIST
50208: PUSH
50209: LD_INT 1
50211: NEG
50212: PUSH
50213: LD_INT 2
50215: NEG
50216: PUSH
50217: EMPTY
50218: LIST
50219: LIST
50220: PUSH
50221: LD_INT 0
50223: PUSH
50224: LD_INT 2
50226: NEG
50227: PUSH
50228: EMPTY
50229: LIST
50230: LIST
50231: PUSH
50232: LD_INT 1
50234: PUSH
50235: LD_INT 1
50237: NEG
50238: PUSH
50239: EMPTY
50240: LIST
50241: LIST
50242: PUSH
50243: LD_INT 2
50245: PUSH
50246: LD_INT 0
50248: PUSH
50249: EMPTY
50250: LIST
50251: LIST
50252: PUSH
50253: LD_INT 2
50255: PUSH
50256: LD_INT 1
50258: PUSH
50259: EMPTY
50260: LIST
50261: LIST
50262: PUSH
50263: LD_INT 2
50265: PUSH
50266: LD_INT 2
50268: PUSH
50269: EMPTY
50270: LIST
50271: LIST
50272: PUSH
50273: LD_INT 1
50275: PUSH
50276: LD_INT 2
50278: PUSH
50279: EMPTY
50280: LIST
50281: LIST
50282: PUSH
50283: LD_INT 0
50285: PUSH
50286: LD_INT 2
50288: PUSH
50289: EMPTY
50290: LIST
50291: LIST
50292: PUSH
50293: LD_INT 1
50295: NEG
50296: PUSH
50297: LD_INT 1
50299: PUSH
50300: EMPTY
50301: LIST
50302: LIST
50303: PUSH
50304: LD_INT 2
50306: NEG
50307: PUSH
50308: LD_INT 0
50310: PUSH
50311: EMPTY
50312: LIST
50313: LIST
50314: PUSH
50315: LD_INT 2
50317: NEG
50318: PUSH
50319: LD_INT 1
50321: NEG
50322: PUSH
50323: EMPTY
50324: LIST
50325: LIST
50326: PUSH
50327: LD_INT 2
50329: NEG
50330: PUSH
50331: LD_INT 2
50333: NEG
50334: PUSH
50335: EMPTY
50336: LIST
50337: LIST
50338: PUSH
50339: LD_INT 2
50341: PUSH
50342: LD_INT 3
50344: PUSH
50345: EMPTY
50346: LIST
50347: LIST
50348: PUSH
50349: LD_INT 1
50351: PUSH
50352: LD_INT 3
50354: PUSH
50355: EMPTY
50356: LIST
50357: LIST
50358: PUSH
50359: LD_INT 1
50361: NEG
50362: PUSH
50363: LD_INT 2
50365: PUSH
50366: EMPTY
50367: LIST
50368: LIST
50369: PUSH
50370: LD_INT 2
50372: NEG
50373: PUSH
50374: LD_INT 1
50376: PUSH
50377: EMPTY
50378: LIST
50379: LIST
50380: PUSH
50381: EMPTY
50382: LIST
50383: LIST
50384: LIST
50385: LIST
50386: LIST
50387: LIST
50388: LIST
50389: LIST
50390: LIST
50391: LIST
50392: LIST
50393: LIST
50394: LIST
50395: LIST
50396: LIST
50397: LIST
50398: LIST
50399: LIST
50400: LIST
50401: LIST
50402: LIST
50403: LIST
50404: LIST
50405: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
50406: LD_ADDR_VAR 0 27
50410: PUSH
50411: LD_INT 0
50413: PUSH
50414: LD_INT 0
50416: PUSH
50417: EMPTY
50418: LIST
50419: LIST
50420: PUSH
50421: LD_INT 0
50423: PUSH
50424: LD_INT 1
50426: NEG
50427: PUSH
50428: EMPTY
50429: LIST
50430: LIST
50431: PUSH
50432: LD_INT 1
50434: PUSH
50435: LD_INT 0
50437: PUSH
50438: EMPTY
50439: LIST
50440: LIST
50441: PUSH
50442: LD_INT 1
50444: PUSH
50445: LD_INT 1
50447: PUSH
50448: EMPTY
50449: LIST
50450: LIST
50451: PUSH
50452: LD_INT 0
50454: PUSH
50455: LD_INT 1
50457: PUSH
50458: EMPTY
50459: LIST
50460: LIST
50461: PUSH
50462: LD_INT 1
50464: NEG
50465: PUSH
50466: LD_INT 0
50468: PUSH
50469: EMPTY
50470: LIST
50471: LIST
50472: PUSH
50473: LD_INT 1
50475: NEG
50476: PUSH
50477: LD_INT 1
50479: NEG
50480: PUSH
50481: EMPTY
50482: LIST
50483: LIST
50484: PUSH
50485: LD_INT 1
50487: NEG
50488: PUSH
50489: LD_INT 2
50491: NEG
50492: PUSH
50493: EMPTY
50494: LIST
50495: LIST
50496: PUSH
50497: LD_INT 0
50499: PUSH
50500: LD_INT 2
50502: NEG
50503: PUSH
50504: EMPTY
50505: LIST
50506: LIST
50507: PUSH
50508: LD_INT 1
50510: PUSH
50511: LD_INT 1
50513: NEG
50514: PUSH
50515: EMPTY
50516: LIST
50517: LIST
50518: PUSH
50519: LD_INT 2
50521: PUSH
50522: LD_INT 0
50524: PUSH
50525: EMPTY
50526: LIST
50527: LIST
50528: PUSH
50529: LD_INT 2
50531: PUSH
50532: LD_INT 1
50534: PUSH
50535: EMPTY
50536: LIST
50537: LIST
50538: PUSH
50539: LD_INT 2
50541: PUSH
50542: LD_INT 2
50544: PUSH
50545: EMPTY
50546: LIST
50547: LIST
50548: PUSH
50549: LD_INT 1
50551: PUSH
50552: LD_INT 2
50554: PUSH
50555: EMPTY
50556: LIST
50557: LIST
50558: PUSH
50559: LD_INT 0
50561: PUSH
50562: LD_INT 2
50564: PUSH
50565: EMPTY
50566: LIST
50567: LIST
50568: PUSH
50569: LD_INT 1
50571: NEG
50572: PUSH
50573: LD_INT 1
50575: PUSH
50576: EMPTY
50577: LIST
50578: LIST
50579: PUSH
50580: LD_INT 2
50582: NEG
50583: PUSH
50584: LD_INT 0
50586: PUSH
50587: EMPTY
50588: LIST
50589: LIST
50590: PUSH
50591: LD_INT 2
50593: NEG
50594: PUSH
50595: LD_INT 1
50597: NEG
50598: PUSH
50599: EMPTY
50600: LIST
50601: LIST
50602: PUSH
50603: LD_INT 2
50605: NEG
50606: PUSH
50607: LD_INT 2
50609: NEG
50610: PUSH
50611: EMPTY
50612: LIST
50613: LIST
50614: PUSH
50615: LD_INT 1
50617: NEG
50618: PUSH
50619: LD_INT 2
50621: PUSH
50622: EMPTY
50623: LIST
50624: LIST
50625: PUSH
50626: LD_INT 2
50628: NEG
50629: PUSH
50630: LD_INT 1
50632: PUSH
50633: EMPTY
50634: LIST
50635: LIST
50636: PUSH
50637: LD_INT 3
50639: NEG
50640: PUSH
50641: LD_INT 1
50643: NEG
50644: PUSH
50645: EMPTY
50646: LIST
50647: LIST
50648: PUSH
50649: LD_INT 3
50651: NEG
50652: PUSH
50653: LD_INT 2
50655: NEG
50656: PUSH
50657: EMPTY
50658: LIST
50659: LIST
50660: PUSH
50661: EMPTY
50662: LIST
50663: LIST
50664: LIST
50665: LIST
50666: LIST
50667: LIST
50668: LIST
50669: LIST
50670: LIST
50671: LIST
50672: LIST
50673: LIST
50674: LIST
50675: LIST
50676: LIST
50677: LIST
50678: LIST
50679: LIST
50680: LIST
50681: LIST
50682: LIST
50683: LIST
50684: LIST
50685: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
50686: LD_ADDR_VAR 0 28
50690: PUSH
50691: LD_INT 0
50693: PUSH
50694: LD_INT 0
50696: PUSH
50697: EMPTY
50698: LIST
50699: LIST
50700: PUSH
50701: LD_INT 0
50703: PUSH
50704: LD_INT 1
50706: NEG
50707: PUSH
50708: EMPTY
50709: LIST
50710: LIST
50711: PUSH
50712: LD_INT 1
50714: PUSH
50715: LD_INT 0
50717: PUSH
50718: EMPTY
50719: LIST
50720: LIST
50721: PUSH
50722: LD_INT 1
50724: PUSH
50725: LD_INT 1
50727: PUSH
50728: EMPTY
50729: LIST
50730: LIST
50731: PUSH
50732: LD_INT 0
50734: PUSH
50735: LD_INT 1
50737: PUSH
50738: EMPTY
50739: LIST
50740: LIST
50741: PUSH
50742: LD_INT 1
50744: NEG
50745: PUSH
50746: LD_INT 0
50748: PUSH
50749: EMPTY
50750: LIST
50751: LIST
50752: PUSH
50753: LD_INT 1
50755: NEG
50756: PUSH
50757: LD_INT 1
50759: NEG
50760: PUSH
50761: EMPTY
50762: LIST
50763: LIST
50764: PUSH
50765: LD_INT 1
50767: NEG
50768: PUSH
50769: LD_INT 2
50771: NEG
50772: PUSH
50773: EMPTY
50774: LIST
50775: LIST
50776: PUSH
50777: LD_INT 0
50779: PUSH
50780: LD_INT 2
50782: NEG
50783: PUSH
50784: EMPTY
50785: LIST
50786: LIST
50787: PUSH
50788: LD_INT 1
50790: PUSH
50791: LD_INT 1
50793: NEG
50794: PUSH
50795: EMPTY
50796: LIST
50797: LIST
50798: PUSH
50799: LD_INT 2
50801: PUSH
50802: LD_INT 0
50804: PUSH
50805: EMPTY
50806: LIST
50807: LIST
50808: PUSH
50809: LD_INT 2
50811: PUSH
50812: LD_INT 1
50814: PUSH
50815: EMPTY
50816: LIST
50817: LIST
50818: PUSH
50819: LD_INT 2
50821: PUSH
50822: LD_INT 2
50824: PUSH
50825: EMPTY
50826: LIST
50827: LIST
50828: PUSH
50829: LD_INT 1
50831: PUSH
50832: LD_INT 2
50834: PUSH
50835: EMPTY
50836: LIST
50837: LIST
50838: PUSH
50839: LD_INT 0
50841: PUSH
50842: LD_INT 2
50844: PUSH
50845: EMPTY
50846: LIST
50847: LIST
50848: PUSH
50849: LD_INT 1
50851: NEG
50852: PUSH
50853: LD_INT 1
50855: PUSH
50856: EMPTY
50857: LIST
50858: LIST
50859: PUSH
50860: LD_INT 2
50862: NEG
50863: PUSH
50864: LD_INT 0
50866: PUSH
50867: EMPTY
50868: LIST
50869: LIST
50870: PUSH
50871: LD_INT 2
50873: NEG
50874: PUSH
50875: LD_INT 1
50877: NEG
50878: PUSH
50879: EMPTY
50880: LIST
50881: LIST
50882: PUSH
50883: LD_INT 2
50885: NEG
50886: PUSH
50887: LD_INT 2
50889: NEG
50890: PUSH
50891: EMPTY
50892: LIST
50893: LIST
50894: PUSH
50895: LD_INT 2
50897: NEG
50898: PUSH
50899: LD_INT 3
50901: NEG
50902: PUSH
50903: EMPTY
50904: LIST
50905: LIST
50906: PUSH
50907: LD_INT 1
50909: NEG
50910: PUSH
50911: LD_INT 3
50913: NEG
50914: PUSH
50915: EMPTY
50916: LIST
50917: LIST
50918: PUSH
50919: LD_INT 3
50921: NEG
50922: PUSH
50923: LD_INT 1
50925: NEG
50926: PUSH
50927: EMPTY
50928: LIST
50929: LIST
50930: PUSH
50931: LD_INT 3
50933: NEG
50934: PUSH
50935: LD_INT 2
50937: NEG
50938: PUSH
50939: EMPTY
50940: LIST
50941: LIST
50942: PUSH
50943: EMPTY
50944: LIST
50945: LIST
50946: LIST
50947: LIST
50948: LIST
50949: LIST
50950: LIST
50951: LIST
50952: LIST
50953: LIST
50954: LIST
50955: LIST
50956: LIST
50957: LIST
50958: LIST
50959: LIST
50960: LIST
50961: LIST
50962: LIST
50963: LIST
50964: LIST
50965: LIST
50966: LIST
50967: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50968: LD_ADDR_VAR 0 29
50972: PUSH
50973: LD_INT 0
50975: PUSH
50976: LD_INT 0
50978: PUSH
50979: EMPTY
50980: LIST
50981: LIST
50982: PUSH
50983: LD_INT 0
50985: PUSH
50986: LD_INT 1
50988: NEG
50989: PUSH
50990: EMPTY
50991: LIST
50992: LIST
50993: PUSH
50994: LD_INT 1
50996: PUSH
50997: LD_INT 0
50999: PUSH
51000: EMPTY
51001: LIST
51002: LIST
51003: PUSH
51004: LD_INT 1
51006: PUSH
51007: LD_INT 1
51009: PUSH
51010: EMPTY
51011: LIST
51012: LIST
51013: PUSH
51014: LD_INT 0
51016: PUSH
51017: LD_INT 1
51019: PUSH
51020: EMPTY
51021: LIST
51022: LIST
51023: PUSH
51024: LD_INT 1
51026: NEG
51027: PUSH
51028: LD_INT 0
51030: PUSH
51031: EMPTY
51032: LIST
51033: LIST
51034: PUSH
51035: LD_INT 1
51037: NEG
51038: PUSH
51039: LD_INT 1
51041: NEG
51042: PUSH
51043: EMPTY
51044: LIST
51045: LIST
51046: PUSH
51047: LD_INT 1
51049: NEG
51050: PUSH
51051: LD_INT 2
51053: NEG
51054: PUSH
51055: EMPTY
51056: LIST
51057: LIST
51058: PUSH
51059: LD_INT 0
51061: PUSH
51062: LD_INT 2
51064: NEG
51065: PUSH
51066: EMPTY
51067: LIST
51068: LIST
51069: PUSH
51070: LD_INT 1
51072: PUSH
51073: LD_INT 1
51075: NEG
51076: PUSH
51077: EMPTY
51078: LIST
51079: LIST
51080: PUSH
51081: LD_INT 2
51083: PUSH
51084: LD_INT 0
51086: PUSH
51087: EMPTY
51088: LIST
51089: LIST
51090: PUSH
51091: LD_INT 2
51093: PUSH
51094: LD_INT 1
51096: PUSH
51097: EMPTY
51098: LIST
51099: LIST
51100: PUSH
51101: LD_INT 1
51103: PUSH
51104: LD_INT 2
51106: PUSH
51107: EMPTY
51108: LIST
51109: LIST
51110: PUSH
51111: LD_INT 0
51113: PUSH
51114: LD_INT 2
51116: PUSH
51117: EMPTY
51118: LIST
51119: LIST
51120: PUSH
51121: LD_INT 1
51123: NEG
51124: PUSH
51125: LD_INT 1
51127: PUSH
51128: EMPTY
51129: LIST
51130: LIST
51131: PUSH
51132: LD_INT 2
51134: NEG
51135: PUSH
51136: LD_INT 1
51138: NEG
51139: PUSH
51140: EMPTY
51141: LIST
51142: LIST
51143: PUSH
51144: LD_INT 2
51146: NEG
51147: PUSH
51148: LD_INT 2
51150: NEG
51151: PUSH
51152: EMPTY
51153: LIST
51154: LIST
51155: PUSH
51156: LD_INT 2
51158: NEG
51159: PUSH
51160: LD_INT 3
51162: NEG
51163: PUSH
51164: EMPTY
51165: LIST
51166: LIST
51167: PUSH
51168: LD_INT 2
51170: PUSH
51171: LD_INT 1
51173: NEG
51174: PUSH
51175: EMPTY
51176: LIST
51177: LIST
51178: PUSH
51179: LD_INT 3
51181: PUSH
51182: LD_INT 1
51184: PUSH
51185: EMPTY
51186: LIST
51187: LIST
51188: PUSH
51189: LD_INT 1
51191: PUSH
51192: LD_INT 3
51194: PUSH
51195: EMPTY
51196: LIST
51197: LIST
51198: PUSH
51199: LD_INT 1
51201: NEG
51202: PUSH
51203: LD_INT 2
51205: PUSH
51206: EMPTY
51207: LIST
51208: LIST
51209: PUSH
51210: LD_INT 3
51212: NEG
51213: PUSH
51214: LD_INT 2
51216: NEG
51217: PUSH
51218: EMPTY
51219: LIST
51220: LIST
51221: PUSH
51222: EMPTY
51223: LIST
51224: LIST
51225: LIST
51226: LIST
51227: LIST
51228: LIST
51229: LIST
51230: LIST
51231: LIST
51232: LIST
51233: LIST
51234: LIST
51235: LIST
51236: LIST
51237: LIST
51238: LIST
51239: LIST
51240: LIST
51241: LIST
51242: LIST
51243: LIST
51244: LIST
51245: LIST
51246: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51247: LD_ADDR_VAR 0 30
51251: PUSH
51252: LD_INT 0
51254: PUSH
51255: LD_INT 0
51257: PUSH
51258: EMPTY
51259: LIST
51260: LIST
51261: PUSH
51262: LD_INT 0
51264: PUSH
51265: LD_INT 1
51267: NEG
51268: PUSH
51269: EMPTY
51270: LIST
51271: LIST
51272: PUSH
51273: LD_INT 1
51275: PUSH
51276: LD_INT 0
51278: PUSH
51279: EMPTY
51280: LIST
51281: LIST
51282: PUSH
51283: LD_INT 1
51285: PUSH
51286: LD_INT 1
51288: PUSH
51289: EMPTY
51290: LIST
51291: LIST
51292: PUSH
51293: LD_INT 0
51295: PUSH
51296: LD_INT 1
51298: PUSH
51299: EMPTY
51300: LIST
51301: LIST
51302: PUSH
51303: LD_INT 1
51305: NEG
51306: PUSH
51307: LD_INT 0
51309: PUSH
51310: EMPTY
51311: LIST
51312: LIST
51313: PUSH
51314: LD_INT 1
51316: NEG
51317: PUSH
51318: LD_INT 1
51320: NEG
51321: PUSH
51322: EMPTY
51323: LIST
51324: LIST
51325: PUSH
51326: LD_INT 1
51328: NEG
51329: PUSH
51330: LD_INT 2
51332: NEG
51333: PUSH
51334: EMPTY
51335: LIST
51336: LIST
51337: PUSH
51338: LD_INT 0
51340: PUSH
51341: LD_INT 2
51343: NEG
51344: PUSH
51345: EMPTY
51346: LIST
51347: LIST
51348: PUSH
51349: LD_INT 1
51351: PUSH
51352: LD_INT 1
51354: NEG
51355: PUSH
51356: EMPTY
51357: LIST
51358: LIST
51359: PUSH
51360: LD_INT 2
51362: PUSH
51363: LD_INT 0
51365: PUSH
51366: EMPTY
51367: LIST
51368: LIST
51369: PUSH
51370: LD_INT 2
51372: PUSH
51373: LD_INT 1
51375: PUSH
51376: EMPTY
51377: LIST
51378: LIST
51379: PUSH
51380: LD_INT 2
51382: PUSH
51383: LD_INT 2
51385: PUSH
51386: EMPTY
51387: LIST
51388: LIST
51389: PUSH
51390: LD_INT 1
51392: PUSH
51393: LD_INT 2
51395: PUSH
51396: EMPTY
51397: LIST
51398: LIST
51399: PUSH
51400: LD_INT 1
51402: NEG
51403: PUSH
51404: LD_INT 1
51406: PUSH
51407: EMPTY
51408: LIST
51409: LIST
51410: PUSH
51411: LD_INT 2
51413: NEG
51414: PUSH
51415: LD_INT 0
51417: PUSH
51418: EMPTY
51419: LIST
51420: LIST
51421: PUSH
51422: LD_INT 2
51424: NEG
51425: PUSH
51426: LD_INT 1
51428: NEG
51429: PUSH
51430: EMPTY
51431: LIST
51432: LIST
51433: PUSH
51434: LD_INT 1
51436: NEG
51437: PUSH
51438: LD_INT 3
51440: NEG
51441: PUSH
51442: EMPTY
51443: LIST
51444: LIST
51445: PUSH
51446: LD_INT 1
51448: PUSH
51449: LD_INT 2
51451: NEG
51452: PUSH
51453: EMPTY
51454: LIST
51455: LIST
51456: PUSH
51457: LD_INT 3
51459: PUSH
51460: LD_INT 2
51462: PUSH
51463: EMPTY
51464: LIST
51465: LIST
51466: PUSH
51467: LD_INT 2
51469: PUSH
51470: LD_INT 3
51472: PUSH
51473: EMPTY
51474: LIST
51475: LIST
51476: PUSH
51477: LD_INT 2
51479: NEG
51480: PUSH
51481: LD_INT 1
51483: PUSH
51484: EMPTY
51485: LIST
51486: LIST
51487: PUSH
51488: LD_INT 3
51490: NEG
51491: PUSH
51492: LD_INT 1
51494: NEG
51495: PUSH
51496: EMPTY
51497: LIST
51498: LIST
51499: PUSH
51500: EMPTY
51501: LIST
51502: LIST
51503: LIST
51504: LIST
51505: LIST
51506: LIST
51507: LIST
51508: LIST
51509: LIST
51510: LIST
51511: LIST
51512: LIST
51513: LIST
51514: LIST
51515: LIST
51516: LIST
51517: LIST
51518: LIST
51519: LIST
51520: LIST
51521: LIST
51522: LIST
51523: LIST
51524: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
51525: LD_ADDR_VAR 0 31
51529: PUSH
51530: LD_INT 0
51532: PUSH
51533: LD_INT 0
51535: PUSH
51536: EMPTY
51537: LIST
51538: LIST
51539: PUSH
51540: LD_INT 0
51542: PUSH
51543: LD_INT 1
51545: NEG
51546: PUSH
51547: EMPTY
51548: LIST
51549: LIST
51550: PUSH
51551: LD_INT 1
51553: PUSH
51554: LD_INT 0
51556: PUSH
51557: EMPTY
51558: LIST
51559: LIST
51560: PUSH
51561: LD_INT 1
51563: PUSH
51564: LD_INT 1
51566: PUSH
51567: EMPTY
51568: LIST
51569: LIST
51570: PUSH
51571: LD_INT 0
51573: PUSH
51574: LD_INT 1
51576: PUSH
51577: EMPTY
51578: LIST
51579: LIST
51580: PUSH
51581: LD_INT 1
51583: NEG
51584: PUSH
51585: LD_INT 0
51587: PUSH
51588: EMPTY
51589: LIST
51590: LIST
51591: PUSH
51592: LD_INT 1
51594: NEG
51595: PUSH
51596: LD_INT 1
51598: NEG
51599: PUSH
51600: EMPTY
51601: LIST
51602: LIST
51603: PUSH
51604: LD_INT 1
51606: NEG
51607: PUSH
51608: LD_INT 2
51610: NEG
51611: PUSH
51612: EMPTY
51613: LIST
51614: LIST
51615: PUSH
51616: LD_INT 1
51618: PUSH
51619: LD_INT 1
51621: NEG
51622: PUSH
51623: EMPTY
51624: LIST
51625: LIST
51626: PUSH
51627: LD_INT 2
51629: PUSH
51630: LD_INT 0
51632: PUSH
51633: EMPTY
51634: LIST
51635: LIST
51636: PUSH
51637: LD_INT 2
51639: PUSH
51640: LD_INT 1
51642: PUSH
51643: EMPTY
51644: LIST
51645: LIST
51646: PUSH
51647: LD_INT 2
51649: PUSH
51650: LD_INT 2
51652: PUSH
51653: EMPTY
51654: LIST
51655: LIST
51656: PUSH
51657: LD_INT 1
51659: PUSH
51660: LD_INT 2
51662: PUSH
51663: EMPTY
51664: LIST
51665: LIST
51666: PUSH
51667: LD_INT 0
51669: PUSH
51670: LD_INT 2
51672: PUSH
51673: EMPTY
51674: LIST
51675: LIST
51676: PUSH
51677: LD_INT 1
51679: NEG
51680: PUSH
51681: LD_INT 1
51683: PUSH
51684: EMPTY
51685: LIST
51686: LIST
51687: PUSH
51688: LD_INT 2
51690: NEG
51691: PUSH
51692: LD_INT 1
51694: NEG
51695: PUSH
51696: EMPTY
51697: LIST
51698: LIST
51699: PUSH
51700: LD_INT 2
51702: NEG
51703: PUSH
51704: LD_INT 2
51706: NEG
51707: PUSH
51708: EMPTY
51709: LIST
51710: LIST
51711: PUSH
51712: LD_INT 2
51714: NEG
51715: PUSH
51716: LD_INT 3
51718: NEG
51719: PUSH
51720: EMPTY
51721: LIST
51722: LIST
51723: PUSH
51724: LD_INT 2
51726: PUSH
51727: LD_INT 1
51729: NEG
51730: PUSH
51731: EMPTY
51732: LIST
51733: LIST
51734: PUSH
51735: LD_INT 3
51737: PUSH
51738: LD_INT 1
51740: PUSH
51741: EMPTY
51742: LIST
51743: LIST
51744: PUSH
51745: LD_INT 1
51747: PUSH
51748: LD_INT 3
51750: PUSH
51751: EMPTY
51752: LIST
51753: LIST
51754: PUSH
51755: LD_INT 1
51757: NEG
51758: PUSH
51759: LD_INT 2
51761: PUSH
51762: EMPTY
51763: LIST
51764: LIST
51765: PUSH
51766: LD_INT 3
51768: NEG
51769: PUSH
51770: LD_INT 2
51772: NEG
51773: PUSH
51774: EMPTY
51775: LIST
51776: LIST
51777: PUSH
51778: EMPTY
51779: LIST
51780: LIST
51781: LIST
51782: LIST
51783: LIST
51784: LIST
51785: LIST
51786: LIST
51787: LIST
51788: LIST
51789: LIST
51790: LIST
51791: LIST
51792: LIST
51793: LIST
51794: LIST
51795: LIST
51796: LIST
51797: LIST
51798: LIST
51799: LIST
51800: LIST
51801: LIST
51802: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51803: LD_ADDR_VAR 0 32
51807: PUSH
51808: LD_INT 0
51810: PUSH
51811: LD_INT 0
51813: PUSH
51814: EMPTY
51815: LIST
51816: LIST
51817: PUSH
51818: LD_INT 0
51820: PUSH
51821: LD_INT 1
51823: NEG
51824: PUSH
51825: EMPTY
51826: LIST
51827: LIST
51828: PUSH
51829: LD_INT 1
51831: PUSH
51832: LD_INT 0
51834: PUSH
51835: EMPTY
51836: LIST
51837: LIST
51838: PUSH
51839: LD_INT 1
51841: PUSH
51842: LD_INT 1
51844: PUSH
51845: EMPTY
51846: LIST
51847: LIST
51848: PUSH
51849: LD_INT 0
51851: PUSH
51852: LD_INT 1
51854: PUSH
51855: EMPTY
51856: LIST
51857: LIST
51858: PUSH
51859: LD_INT 1
51861: NEG
51862: PUSH
51863: LD_INT 0
51865: PUSH
51866: EMPTY
51867: LIST
51868: LIST
51869: PUSH
51870: LD_INT 1
51872: NEG
51873: PUSH
51874: LD_INT 1
51876: NEG
51877: PUSH
51878: EMPTY
51879: LIST
51880: LIST
51881: PUSH
51882: LD_INT 1
51884: NEG
51885: PUSH
51886: LD_INT 2
51888: NEG
51889: PUSH
51890: EMPTY
51891: LIST
51892: LIST
51893: PUSH
51894: LD_INT 0
51896: PUSH
51897: LD_INT 2
51899: NEG
51900: PUSH
51901: EMPTY
51902: LIST
51903: LIST
51904: PUSH
51905: LD_INT 1
51907: PUSH
51908: LD_INT 1
51910: NEG
51911: PUSH
51912: EMPTY
51913: LIST
51914: LIST
51915: PUSH
51916: LD_INT 2
51918: PUSH
51919: LD_INT 1
51921: PUSH
51922: EMPTY
51923: LIST
51924: LIST
51925: PUSH
51926: LD_INT 2
51928: PUSH
51929: LD_INT 2
51931: PUSH
51932: EMPTY
51933: LIST
51934: LIST
51935: PUSH
51936: LD_INT 1
51938: PUSH
51939: LD_INT 2
51941: PUSH
51942: EMPTY
51943: LIST
51944: LIST
51945: PUSH
51946: LD_INT 0
51948: PUSH
51949: LD_INT 2
51951: PUSH
51952: EMPTY
51953: LIST
51954: LIST
51955: PUSH
51956: LD_INT 1
51958: NEG
51959: PUSH
51960: LD_INT 1
51962: PUSH
51963: EMPTY
51964: LIST
51965: LIST
51966: PUSH
51967: LD_INT 2
51969: NEG
51970: PUSH
51971: LD_INT 0
51973: PUSH
51974: EMPTY
51975: LIST
51976: LIST
51977: PUSH
51978: LD_INT 2
51980: NEG
51981: PUSH
51982: LD_INT 1
51984: NEG
51985: PUSH
51986: EMPTY
51987: LIST
51988: LIST
51989: PUSH
51990: LD_INT 1
51992: NEG
51993: PUSH
51994: LD_INT 3
51996: NEG
51997: PUSH
51998: EMPTY
51999: LIST
52000: LIST
52001: PUSH
52002: LD_INT 1
52004: PUSH
52005: LD_INT 2
52007: NEG
52008: PUSH
52009: EMPTY
52010: LIST
52011: LIST
52012: PUSH
52013: LD_INT 3
52015: PUSH
52016: LD_INT 2
52018: PUSH
52019: EMPTY
52020: LIST
52021: LIST
52022: PUSH
52023: LD_INT 2
52025: PUSH
52026: LD_INT 3
52028: PUSH
52029: EMPTY
52030: LIST
52031: LIST
52032: PUSH
52033: LD_INT 2
52035: NEG
52036: PUSH
52037: LD_INT 1
52039: PUSH
52040: EMPTY
52041: LIST
52042: LIST
52043: PUSH
52044: LD_INT 3
52046: NEG
52047: PUSH
52048: LD_INT 1
52050: NEG
52051: PUSH
52052: EMPTY
52053: LIST
52054: LIST
52055: PUSH
52056: EMPTY
52057: LIST
52058: LIST
52059: LIST
52060: LIST
52061: LIST
52062: LIST
52063: LIST
52064: LIST
52065: LIST
52066: LIST
52067: LIST
52068: LIST
52069: LIST
52070: LIST
52071: LIST
52072: LIST
52073: LIST
52074: LIST
52075: LIST
52076: LIST
52077: LIST
52078: LIST
52079: LIST
52080: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
52081: LD_ADDR_VAR 0 33
52085: PUSH
52086: LD_INT 0
52088: PUSH
52089: LD_INT 0
52091: PUSH
52092: EMPTY
52093: LIST
52094: LIST
52095: PUSH
52096: LD_INT 0
52098: PUSH
52099: LD_INT 1
52101: NEG
52102: PUSH
52103: EMPTY
52104: LIST
52105: LIST
52106: PUSH
52107: LD_INT 1
52109: PUSH
52110: LD_INT 0
52112: PUSH
52113: EMPTY
52114: LIST
52115: LIST
52116: PUSH
52117: LD_INT 1
52119: PUSH
52120: LD_INT 1
52122: PUSH
52123: EMPTY
52124: LIST
52125: LIST
52126: PUSH
52127: LD_INT 0
52129: PUSH
52130: LD_INT 1
52132: PUSH
52133: EMPTY
52134: LIST
52135: LIST
52136: PUSH
52137: LD_INT 1
52139: NEG
52140: PUSH
52141: LD_INT 0
52143: PUSH
52144: EMPTY
52145: LIST
52146: LIST
52147: PUSH
52148: LD_INT 1
52150: NEG
52151: PUSH
52152: LD_INT 1
52154: NEG
52155: PUSH
52156: EMPTY
52157: LIST
52158: LIST
52159: PUSH
52160: LD_INT 1
52162: NEG
52163: PUSH
52164: LD_INT 2
52166: NEG
52167: PUSH
52168: EMPTY
52169: LIST
52170: LIST
52171: PUSH
52172: LD_INT 1
52174: PUSH
52175: LD_INT 1
52177: NEG
52178: PUSH
52179: EMPTY
52180: LIST
52181: LIST
52182: PUSH
52183: LD_INT 2
52185: PUSH
52186: LD_INT 0
52188: PUSH
52189: EMPTY
52190: LIST
52191: LIST
52192: PUSH
52193: LD_INT 2
52195: PUSH
52196: LD_INT 1
52198: PUSH
52199: EMPTY
52200: LIST
52201: LIST
52202: PUSH
52203: LD_INT 1
52205: PUSH
52206: LD_INT 2
52208: PUSH
52209: EMPTY
52210: LIST
52211: LIST
52212: PUSH
52213: LD_INT 0
52215: PUSH
52216: LD_INT 2
52218: PUSH
52219: EMPTY
52220: LIST
52221: LIST
52222: PUSH
52223: LD_INT 1
52225: NEG
52226: PUSH
52227: LD_INT 1
52229: PUSH
52230: EMPTY
52231: LIST
52232: LIST
52233: PUSH
52234: LD_INT 2
52236: NEG
52237: PUSH
52238: LD_INT 0
52240: PUSH
52241: EMPTY
52242: LIST
52243: LIST
52244: PUSH
52245: LD_INT 2
52247: NEG
52248: PUSH
52249: LD_INT 1
52251: NEG
52252: PUSH
52253: EMPTY
52254: LIST
52255: LIST
52256: PUSH
52257: LD_INT 2
52259: NEG
52260: PUSH
52261: LD_INT 2
52263: NEG
52264: PUSH
52265: EMPTY
52266: LIST
52267: LIST
52268: PUSH
52269: LD_INT 2
52271: NEG
52272: PUSH
52273: LD_INT 3
52275: NEG
52276: PUSH
52277: EMPTY
52278: LIST
52279: LIST
52280: PUSH
52281: LD_INT 2
52283: PUSH
52284: LD_INT 1
52286: NEG
52287: PUSH
52288: EMPTY
52289: LIST
52290: LIST
52291: PUSH
52292: LD_INT 3
52294: PUSH
52295: LD_INT 1
52297: PUSH
52298: EMPTY
52299: LIST
52300: LIST
52301: PUSH
52302: LD_INT 1
52304: PUSH
52305: LD_INT 3
52307: PUSH
52308: EMPTY
52309: LIST
52310: LIST
52311: PUSH
52312: LD_INT 1
52314: NEG
52315: PUSH
52316: LD_INT 2
52318: PUSH
52319: EMPTY
52320: LIST
52321: LIST
52322: PUSH
52323: LD_INT 3
52325: NEG
52326: PUSH
52327: LD_INT 2
52329: NEG
52330: PUSH
52331: EMPTY
52332: LIST
52333: LIST
52334: PUSH
52335: EMPTY
52336: LIST
52337: LIST
52338: LIST
52339: LIST
52340: LIST
52341: LIST
52342: LIST
52343: LIST
52344: LIST
52345: LIST
52346: LIST
52347: LIST
52348: LIST
52349: LIST
52350: LIST
52351: LIST
52352: LIST
52353: LIST
52354: LIST
52355: LIST
52356: LIST
52357: LIST
52358: LIST
52359: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52360: LD_ADDR_VAR 0 34
52364: PUSH
52365: LD_INT 0
52367: PUSH
52368: LD_INT 0
52370: PUSH
52371: EMPTY
52372: LIST
52373: LIST
52374: PUSH
52375: LD_INT 0
52377: PUSH
52378: LD_INT 1
52380: NEG
52381: PUSH
52382: EMPTY
52383: LIST
52384: LIST
52385: PUSH
52386: LD_INT 1
52388: PUSH
52389: LD_INT 0
52391: PUSH
52392: EMPTY
52393: LIST
52394: LIST
52395: PUSH
52396: LD_INT 1
52398: PUSH
52399: LD_INT 1
52401: PUSH
52402: EMPTY
52403: LIST
52404: LIST
52405: PUSH
52406: LD_INT 0
52408: PUSH
52409: LD_INT 1
52411: PUSH
52412: EMPTY
52413: LIST
52414: LIST
52415: PUSH
52416: LD_INT 1
52418: NEG
52419: PUSH
52420: LD_INT 0
52422: PUSH
52423: EMPTY
52424: LIST
52425: LIST
52426: PUSH
52427: LD_INT 1
52429: NEG
52430: PUSH
52431: LD_INT 1
52433: NEG
52434: PUSH
52435: EMPTY
52436: LIST
52437: LIST
52438: PUSH
52439: LD_INT 1
52441: NEG
52442: PUSH
52443: LD_INT 2
52445: NEG
52446: PUSH
52447: EMPTY
52448: LIST
52449: LIST
52450: PUSH
52451: LD_INT 0
52453: PUSH
52454: LD_INT 2
52456: NEG
52457: PUSH
52458: EMPTY
52459: LIST
52460: LIST
52461: PUSH
52462: LD_INT 1
52464: PUSH
52465: LD_INT 1
52467: NEG
52468: PUSH
52469: EMPTY
52470: LIST
52471: LIST
52472: PUSH
52473: LD_INT 2
52475: PUSH
52476: LD_INT 1
52478: PUSH
52479: EMPTY
52480: LIST
52481: LIST
52482: PUSH
52483: LD_INT 2
52485: PUSH
52486: LD_INT 2
52488: PUSH
52489: EMPTY
52490: LIST
52491: LIST
52492: PUSH
52493: LD_INT 1
52495: PUSH
52496: LD_INT 2
52498: PUSH
52499: EMPTY
52500: LIST
52501: LIST
52502: PUSH
52503: LD_INT 1
52505: NEG
52506: PUSH
52507: LD_INT 1
52509: PUSH
52510: EMPTY
52511: LIST
52512: LIST
52513: PUSH
52514: LD_INT 2
52516: NEG
52517: PUSH
52518: LD_INT 0
52520: PUSH
52521: EMPTY
52522: LIST
52523: LIST
52524: PUSH
52525: LD_INT 2
52527: NEG
52528: PUSH
52529: LD_INT 1
52531: NEG
52532: PUSH
52533: EMPTY
52534: LIST
52535: LIST
52536: PUSH
52537: LD_INT 2
52539: NEG
52540: PUSH
52541: LD_INT 2
52543: NEG
52544: PUSH
52545: EMPTY
52546: LIST
52547: LIST
52548: PUSH
52549: LD_INT 1
52551: NEG
52552: PUSH
52553: LD_INT 3
52555: NEG
52556: PUSH
52557: EMPTY
52558: LIST
52559: LIST
52560: PUSH
52561: LD_INT 1
52563: PUSH
52564: LD_INT 2
52566: NEG
52567: PUSH
52568: EMPTY
52569: LIST
52570: LIST
52571: PUSH
52572: LD_INT 3
52574: PUSH
52575: LD_INT 2
52577: PUSH
52578: EMPTY
52579: LIST
52580: LIST
52581: PUSH
52582: LD_INT 2
52584: PUSH
52585: LD_INT 3
52587: PUSH
52588: EMPTY
52589: LIST
52590: LIST
52591: PUSH
52592: LD_INT 2
52594: NEG
52595: PUSH
52596: LD_INT 1
52598: PUSH
52599: EMPTY
52600: LIST
52601: LIST
52602: PUSH
52603: LD_INT 3
52605: NEG
52606: PUSH
52607: LD_INT 1
52609: NEG
52610: PUSH
52611: EMPTY
52612: LIST
52613: LIST
52614: PUSH
52615: EMPTY
52616: LIST
52617: LIST
52618: LIST
52619: LIST
52620: LIST
52621: LIST
52622: LIST
52623: LIST
52624: LIST
52625: LIST
52626: LIST
52627: LIST
52628: LIST
52629: LIST
52630: LIST
52631: LIST
52632: LIST
52633: LIST
52634: LIST
52635: LIST
52636: LIST
52637: LIST
52638: LIST
52639: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
52640: LD_ADDR_VAR 0 35
52644: PUSH
52645: LD_INT 0
52647: PUSH
52648: LD_INT 0
52650: PUSH
52651: EMPTY
52652: LIST
52653: LIST
52654: PUSH
52655: LD_INT 0
52657: PUSH
52658: LD_INT 1
52660: NEG
52661: PUSH
52662: EMPTY
52663: LIST
52664: LIST
52665: PUSH
52666: LD_INT 1
52668: PUSH
52669: LD_INT 0
52671: PUSH
52672: EMPTY
52673: LIST
52674: LIST
52675: PUSH
52676: LD_INT 1
52678: PUSH
52679: LD_INT 1
52681: PUSH
52682: EMPTY
52683: LIST
52684: LIST
52685: PUSH
52686: LD_INT 0
52688: PUSH
52689: LD_INT 1
52691: PUSH
52692: EMPTY
52693: LIST
52694: LIST
52695: PUSH
52696: LD_INT 1
52698: NEG
52699: PUSH
52700: LD_INT 0
52702: PUSH
52703: EMPTY
52704: LIST
52705: LIST
52706: PUSH
52707: LD_INT 1
52709: NEG
52710: PUSH
52711: LD_INT 1
52713: NEG
52714: PUSH
52715: EMPTY
52716: LIST
52717: LIST
52718: PUSH
52719: LD_INT 2
52721: PUSH
52722: LD_INT 1
52724: PUSH
52725: EMPTY
52726: LIST
52727: LIST
52728: PUSH
52729: LD_INT 2
52731: NEG
52732: PUSH
52733: LD_INT 1
52735: NEG
52736: PUSH
52737: EMPTY
52738: LIST
52739: LIST
52740: PUSH
52741: EMPTY
52742: LIST
52743: LIST
52744: LIST
52745: LIST
52746: LIST
52747: LIST
52748: LIST
52749: LIST
52750: LIST
52751: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
52752: LD_ADDR_VAR 0 36
52756: PUSH
52757: LD_INT 0
52759: PUSH
52760: LD_INT 0
52762: PUSH
52763: EMPTY
52764: LIST
52765: LIST
52766: PUSH
52767: LD_INT 0
52769: PUSH
52770: LD_INT 1
52772: NEG
52773: PUSH
52774: EMPTY
52775: LIST
52776: LIST
52777: PUSH
52778: LD_INT 1
52780: PUSH
52781: LD_INT 0
52783: PUSH
52784: EMPTY
52785: LIST
52786: LIST
52787: PUSH
52788: LD_INT 1
52790: PUSH
52791: LD_INT 1
52793: PUSH
52794: EMPTY
52795: LIST
52796: LIST
52797: PUSH
52798: LD_INT 0
52800: PUSH
52801: LD_INT 1
52803: PUSH
52804: EMPTY
52805: LIST
52806: LIST
52807: PUSH
52808: LD_INT 1
52810: NEG
52811: PUSH
52812: LD_INT 0
52814: PUSH
52815: EMPTY
52816: LIST
52817: LIST
52818: PUSH
52819: LD_INT 1
52821: NEG
52822: PUSH
52823: LD_INT 1
52825: NEG
52826: PUSH
52827: EMPTY
52828: LIST
52829: LIST
52830: PUSH
52831: LD_INT 1
52833: NEG
52834: PUSH
52835: LD_INT 2
52837: NEG
52838: PUSH
52839: EMPTY
52840: LIST
52841: LIST
52842: PUSH
52843: LD_INT 1
52845: PUSH
52846: LD_INT 2
52848: PUSH
52849: EMPTY
52850: LIST
52851: LIST
52852: PUSH
52853: EMPTY
52854: LIST
52855: LIST
52856: LIST
52857: LIST
52858: LIST
52859: LIST
52860: LIST
52861: LIST
52862: LIST
52863: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
52864: LD_ADDR_VAR 0 37
52868: PUSH
52869: LD_INT 0
52871: PUSH
52872: LD_INT 0
52874: PUSH
52875: EMPTY
52876: LIST
52877: LIST
52878: PUSH
52879: LD_INT 0
52881: PUSH
52882: LD_INT 1
52884: NEG
52885: PUSH
52886: EMPTY
52887: LIST
52888: LIST
52889: PUSH
52890: LD_INT 1
52892: PUSH
52893: LD_INT 0
52895: PUSH
52896: EMPTY
52897: LIST
52898: LIST
52899: PUSH
52900: LD_INT 1
52902: PUSH
52903: LD_INT 1
52905: PUSH
52906: EMPTY
52907: LIST
52908: LIST
52909: PUSH
52910: LD_INT 0
52912: PUSH
52913: LD_INT 1
52915: PUSH
52916: EMPTY
52917: LIST
52918: LIST
52919: PUSH
52920: LD_INT 1
52922: NEG
52923: PUSH
52924: LD_INT 0
52926: PUSH
52927: EMPTY
52928: LIST
52929: LIST
52930: PUSH
52931: LD_INT 1
52933: NEG
52934: PUSH
52935: LD_INT 1
52937: NEG
52938: PUSH
52939: EMPTY
52940: LIST
52941: LIST
52942: PUSH
52943: LD_INT 1
52945: PUSH
52946: LD_INT 1
52948: NEG
52949: PUSH
52950: EMPTY
52951: LIST
52952: LIST
52953: PUSH
52954: LD_INT 1
52956: NEG
52957: PUSH
52958: LD_INT 1
52960: PUSH
52961: EMPTY
52962: LIST
52963: LIST
52964: PUSH
52965: EMPTY
52966: LIST
52967: LIST
52968: LIST
52969: LIST
52970: LIST
52971: LIST
52972: LIST
52973: LIST
52974: LIST
52975: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
52976: LD_ADDR_VAR 0 38
52980: PUSH
52981: LD_INT 0
52983: PUSH
52984: LD_INT 0
52986: PUSH
52987: EMPTY
52988: LIST
52989: LIST
52990: PUSH
52991: LD_INT 0
52993: PUSH
52994: LD_INT 1
52996: NEG
52997: PUSH
52998: EMPTY
52999: LIST
53000: LIST
53001: PUSH
53002: LD_INT 1
53004: PUSH
53005: LD_INT 0
53007: PUSH
53008: EMPTY
53009: LIST
53010: LIST
53011: PUSH
53012: LD_INT 1
53014: PUSH
53015: LD_INT 1
53017: PUSH
53018: EMPTY
53019: LIST
53020: LIST
53021: PUSH
53022: LD_INT 0
53024: PUSH
53025: LD_INT 1
53027: PUSH
53028: EMPTY
53029: LIST
53030: LIST
53031: PUSH
53032: LD_INT 1
53034: NEG
53035: PUSH
53036: LD_INT 0
53038: PUSH
53039: EMPTY
53040: LIST
53041: LIST
53042: PUSH
53043: LD_INT 1
53045: NEG
53046: PUSH
53047: LD_INT 1
53049: NEG
53050: PUSH
53051: EMPTY
53052: LIST
53053: LIST
53054: PUSH
53055: LD_INT 2
53057: PUSH
53058: LD_INT 1
53060: PUSH
53061: EMPTY
53062: LIST
53063: LIST
53064: PUSH
53065: LD_INT 2
53067: NEG
53068: PUSH
53069: LD_INT 1
53071: NEG
53072: PUSH
53073: EMPTY
53074: LIST
53075: LIST
53076: PUSH
53077: EMPTY
53078: LIST
53079: LIST
53080: LIST
53081: LIST
53082: LIST
53083: LIST
53084: LIST
53085: LIST
53086: LIST
53087: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
53088: LD_ADDR_VAR 0 39
53092: PUSH
53093: LD_INT 0
53095: PUSH
53096: LD_INT 0
53098: PUSH
53099: EMPTY
53100: LIST
53101: LIST
53102: PUSH
53103: LD_INT 0
53105: PUSH
53106: LD_INT 1
53108: NEG
53109: PUSH
53110: EMPTY
53111: LIST
53112: LIST
53113: PUSH
53114: LD_INT 1
53116: PUSH
53117: LD_INT 0
53119: PUSH
53120: EMPTY
53121: LIST
53122: LIST
53123: PUSH
53124: LD_INT 1
53126: PUSH
53127: LD_INT 1
53129: PUSH
53130: EMPTY
53131: LIST
53132: LIST
53133: PUSH
53134: LD_INT 0
53136: PUSH
53137: LD_INT 1
53139: PUSH
53140: EMPTY
53141: LIST
53142: LIST
53143: PUSH
53144: LD_INT 1
53146: NEG
53147: PUSH
53148: LD_INT 0
53150: PUSH
53151: EMPTY
53152: LIST
53153: LIST
53154: PUSH
53155: LD_INT 1
53157: NEG
53158: PUSH
53159: LD_INT 1
53161: NEG
53162: PUSH
53163: EMPTY
53164: LIST
53165: LIST
53166: PUSH
53167: LD_INT 1
53169: NEG
53170: PUSH
53171: LD_INT 2
53173: NEG
53174: PUSH
53175: EMPTY
53176: LIST
53177: LIST
53178: PUSH
53179: LD_INT 1
53181: PUSH
53182: LD_INT 2
53184: PUSH
53185: EMPTY
53186: LIST
53187: LIST
53188: PUSH
53189: EMPTY
53190: LIST
53191: LIST
53192: LIST
53193: LIST
53194: LIST
53195: LIST
53196: LIST
53197: LIST
53198: LIST
53199: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
53200: LD_ADDR_VAR 0 40
53204: PUSH
53205: LD_INT 0
53207: PUSH
53208: LD_INT 0
53210: PUSH
53211: EMPTY
53212: LIST
53213: LIST
53214: PUSH
53215: LD_INT 0
53217: PUSH
53218: LD_INT 1
53220: NEG
53221: PUSH
53222: EMPTY
53223: LIST
53224: LIST
53225: PUSH
53226: LD_INT 1
53228: PUSH
53229: LD_INT 0
53231: PUSH
53232: EMPTY
53233: LIST
53234: LIST
53235: PUSH
53236: LD_INT 1
53238: PUSH
53239: LD_INT 1
53241: PUSH
53242: EMPTY
53243: LIST
53244: LIST
53245: PUSH
53246: LD_INT 0
53248: PUSH
53249: LD_INT 1
53251: PUSH
53252: EMPTY
53253: LIST
53254: LIST
53255: PUSH
53256: LD_INT 1
53258: NEG
53259: PUSH
53260: LD_INT 0
53262: PUSH
53263: EMPTY
53264: LIST
53265: LIST
53266: PUSH
53267: LD_INT 1
53269: NEG
53270: PUSH
53271: LD_INT 1
53273: NEG
53274: PUSH
53275: EMPTY
53276: LIST
53277: LIST
53278: PUSH
53279: LD_INT 1
53281: PUSH
53282: LD_INT 1
53284: NEG
53285: PUSH
53286: EMPTY
53287: LIST
53288: LIST
53289: PUSH
53290: LD_INT 1
53292: NEG
53293: PUSH
53294: LD_INT 1
53296: PUSH
53297: EMPTY
53298: LIST
53299: LIST
53300: PUSH
53301: EMPTY
53302: LIST
53303: LIST
53304: LIST
53305: LIST
53306: LIST
53307: LIST
53308: LIST
53309: LIST
53310: LIST
53311: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53312: LD_ADDR_VAR 0 41
53316: PUSH
53317: LD_INT 0
53319: PUSH
53320: LD_INT 0
53322: PUSH
53323: EMPTY
53324: LIST
53325: LIST
53326: PUSH
53327: LD_INT 0
53329: PUSH
53330: LD_INT 1
53332: NEG
53333: PUSH
53334: EMPTY
53335: LIST
53336: LIST
53337: PUSH
53338: LD_INT 1
53340: PUSH
53341: LD_INT 0
53343: PUSH
53344: EMPTY
53345: LIST
53346: LIST
53347: PUSH
53348: LD_INT 1
53350: PUSH
53351: LD_INT 1
53353: PUSH
53354: EMPTY
53355: LIST
53356: LIST
53357: PUSH
53358: LD_INT 0
53360: PUSH
53361: LD_INT 1
53363: PUSH
53364: EMPTY
53365: LIST
53366: LIST
53367: PUSH
53368: LD_INT 1
53370: NEG
53371: PUSH
53372: LD_INT 0
53374: PUSH
53375: EMPTY
53376: LIST
53377: LIST
53378: PUSH
53379: LD_INT 1
53381: NEG
53382: PUSH
53383: LD_INT 1
53385: NEG
53386: PUSH
53387: EMPTY
53388: LIST
53389: LIST
53390: PUSH
53391: LD_INT 1
53393: NEG
53394: PUSH
53395: LD_INT 2
53397: NEG
53398: PUSH
53399: EMPTY
53400: LIST
53401: LIST
53402: PUSH
53403: LD_INT 1
53405: PUSH
53406: LD_INT 1
53408: NEG
53409: PUSH
53410: EMPTY
53411: LIST
53412: LIST
53413: PUSH
53414: LD_INT 2
53416: PUSH
53417: LD_INT 0
53419: PUSH
53420: EMPTY
53421: LIST
53422: LIST
53423: PUSH
53424: LD_INT 2
53426: PUSH
53427: LD_INT 1
53429: PUSH
53430: EMPTY
53431: LIST
53432: LIST
53433: PUSH
53434: LD_INT 2
53436: PUSH
53437: LD_INT 2
53439: PUSH
53440: EMPTY
53441: LIST
53442: LIST
53443: PUSH
53444: LD_INT 1
53446: PUSH
53447: LD_INT 2
53449: PUSH
53450: EMPTY
53451: LIST
53452: LIST
53453: PUSH
53454: LD_INT 1
53456: NEG
53457: PUSH
53458: LD_INT 1
53460: PUSH
53461: EMPTY
53462: LIST
53463: LIST
53464: PUSH
53465: LD_INT 2
53467: NEG
53468: PUSH
53469: LD_INT 0
53471: PUSH
53472: EMPTY
53473: LIST
53474: LIST
53475: PUSH
53476: LD_INT 2
53478: NEG
53479: PUSH
53480: LD_INT 1
53482: NEG
53483: PUSH
53484: EMPTY
53485: LIST
53486: LIST
53487: PUSH
53488: LD_INT 2
53490: NEG
53491: PUSH
53492: LD_INT 2
53494: NEG
53495: PUSH
53496: EMPTY
53497: LIST
53498: LIST
53499: PUSH
53500: LD_INT 2
53502: NEG
53503: PUSH
53504: LD_INT 3
53506: NEG
53507: PUSH
53508: EMPTY
53509: LIST
53510: LIST
53511: PUSH
53512: LD_INT 2
53514: PUSH
53515: LD_INT 1
53517: NEG
53518: PUSH
53519: EMPTY
53520: LIST
53521: LIST
53522: PUSH
53523: LD_INT 3
53525: PUSH
53526: LD_INT 0
53528: PUSH
53529: EMPTY
53530: LIST
53531: LIST
53532: PUSH
53533: LD_INT 3
53535: PUSH
53536: LD_INT 1
53538: PUSH
53539: EMPTY
53540: LIST
53541: LIST
53542: PUSH
53543: LD_INT 3
53545: PUSH
53546: LD_INT 2
53548: PUSH
53549: EMPTY
53550: LIST
53551: LIST
53552: PUSH
53553: LD_INT 3
53555: PUSH
53556: LD_INT 3
53558: PUSH
53559: EMPTY
53560: LIST
53561: LIST
53562: PUSH
53563: LD_INT 2
53565: PUSH
53566: LD_INT 3
53568: PUSH
53569: EMPTY
53570: LIST
53571: LIST
53572: PUSH
53573: LD_INT 2
53575: NEG
53576: PUSH
53577: LD_INT 1
53579: PUSH
53580: EMPTY
53581: LIST
53582: LIST
53583: PUSH
53584: LD_INT 3
53586: NEG
53587: PUSH
53588: LD_INT 0
53590: PUSH
53591: EMPTY
53592: LIST
53593: LIST
53594: PUSH
53595: LD_INT 3
53597: NEG
53598: PUSH
53599: LD_INT 1
53601: NEG
53602: PUSH
53603: EMPTY
53604: LIST
53605: LIST
53606: PUSH
53607: LD_INT 3
53609: NEG
53610: PUSH
53611: LD_INT 2
53613: NEG
53614: PUSH
53615: EMPTY
53616: LIST
53617: LIST
53618: PUSH
53619: LD_INT 3
53621: NEG
53622: PUSH
53623: LD_INT 3
53625: NEG
53626: PUSH
53627: EMPTY
53628: LIST
53629: LIST
53630: PUSH
53631: EMPTY
53632: LIST
53633: LIST
53634: LIST
53635: LIST
53636: LIST
53637: LIST
53638: LIST
53639: LIST
53640: LIST
53641: LIST
53642: LIST
53643: LIST
53644: LIST
53645: LIST
53646: LIST
53647: LIST
53648: LIST
53649: LIST
53650: LIST
53651: LIST
53652: LIST
53653: LIST
53654: LIST
53655: LIST
53656: LIST
53657: LIST
53658: LIST
53659: LIST
53660: LIST
53661: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53662: LD_ADDR_VAR 0 42
53666: PUSH
53667: LD_INT 0
53669: PUSH
53670: LD_INT 0
53672: PUSH
53673: EMPTY
53674: LIST
53675: LIST
53676: PUSH
53677: LD_INT 0
53679: PUSH
53680: LD_INT 1
53682: NEG
53683: PUSH
53684: EMPTY
53685: LIST
53686: LIST
53687: PUSH
53688: LD_INT 1
53690: PUSH
53691: LD_INT 0
53693: PUSH
53694: EMPTY
53695: LIST
53696: LIST
53697: PUSH
53698: LD_INT 1
53700: PUSH
53701: LD_INT 1
53703: PUSH
53704: EMPTY
53705: LIST
53706: LIST
53707: PUSH
53708: LD_INT 0
53710: PUSH
53711: LD_INT 1
53713: PUSH
53714: EMPTY
53715: LIST
53716: LIST
53717: PUSH
53718: LD_INT 1
53720: NEG
53721: PUSH
53722: LD_INT 0
53724: PUSH
53725: EMPTY
53726: LIST
53727: LIST
53728: PUSH
53729: LD_INT 1
53731: NEG
53732: PUSH
53733: LD_INT 1
53735: NEG
53736: PUSH
53737: EMPTY
53738: LIST
53739: LIST
53740: PUSH
53741: LD_INT 1
53743: NEG
53744: PUSH
53745: LD_INT 2
53747: NEG
53748: PUSH
53749: EMPTY
53750: LIST
53751: LIST
53752: PUSH
53753: LD_INT 0
53755: PUSH
53756: LD_INT 2
53758: NEG
53759: PUSH
53760: EMPTY
53761: LIST
53762: LIST
53763: PUSH
53764: LD_INT 1
53766: PUSH
53767: LD_INT 1
53769: NEG
53770: PUSH
53771: EMPTY
53772: LIST
53773: LIST
53774: PUSH
53775: LD_INT 2
53777: PUSH
53778: LD_INT 1
53780: PUSH
53781: EMPTY
53782: LIST
53783: LIST
53784: PUSH
53785: LD_INT 2
53787: PUSH
53788: LD_INT 2
53790: PUSH
53791: EMPTY
53792: LIST
53793: LIST
53794: PUSH
53795: LD_INT 1
53797: PUSH
53798: LD_INT 2
53800: PUSH
53801: EMPTY
53802: LIST
53803: LIST
53804: PUSH
53805: LD_INT 0
53807: PUSH
53808: LD_INT 2
53810: PUSH
53811: EMPTY
53812: LIST
53813: LIST
53814: PUSH
53815: LD_INT 1
53817: NEG
53818: PUSH
53819: LD_INT 1
53821: PUSH
53822: EMPTY
53823: LIST
53824: LIST
53825: PUSH
53826: LD_INT 2
53828: NEG
53829: PUSH
53830: LD_INT 1
53832: NEG
53833: PUSH
53834: EMPTY
53835: LIST
53836: LIST
53837: PUSH
53838: LD_INT 2
53840: NEG
53841: PUSH
53842: LD_INT 2
53844: NEG
53845: PUSH
53846: EMPTY
53847: LIST
53848: LIST
53849: PUSH
53850: LD_INT 2
53852: NEG
53853: PUSH
53854: LD_INT 3
53856: NEG
53857: PUSH
53858: EMPTY
53859: LIST
53860: LIST
53861: PUSH
53862: LD_INT 1
53864: NEG
53865: PUSH
53866: LD_INT 3
53868: NEG
53869: PUSH
53870: EMPTY
53871: LIST
53872: LIST
53873: PUSH
53874: LD_INT 0
53876: PUSH
53877: LD_INT 3
53879: NEG
53880: PUSH
53881: EMPTY
53882: LIST
53883: LIST
53884: PUSH
53885: LD_INT 1
53887: PUSH
53888: LD_INT 2
53890: NEG
53891: PUSH
53892: EMPTY
53893: LIST
53894: LIST
53895: PUSH
53896: LD_INT 3
53898: PUSH
53899: LD_INT 2
53901: PUSH
53902: EMPTY
53903: LIST
53904: LIST
53905: PUSH
53906: LD_INT 3
53908: PUSH
53909: LD_INT 3
53911: PUSH
53912: EMPTY
53913: LIST
53914: LIST
53915: PUSH
53916: LD_INT 2
53918: PUSH
53919: LD_INT 3
53921: PUSH
53922: EMPTY
53923: LIST
53924: LIST
53925: PUSH
53926: LD_INT 1
53928: PUSH
53929: LD_INT 3
53931: PUSH
53932: EMPTY
53933: LIST
53934: LIST
53935: PUSH
53936: LD_INT 0
53938: PUSH
53939: LD_INT 3
53941: PUSH
53942: EMPTY
53943: LIST
53944: LIST
53945: PUSH
53946: LD_INT 1
53948: NEG
53949: PUSH
53950: LD_INT 2
53952: PUSH
53953: EMPTY
53954: LIST
53955: LIST
53956: PUSH
53957: LD_INT 3
53959: NEG
53960: PUSH
53961: LD_INT 2
53963: NEG
53964: PUSH
53965: EMPTY
53966: LIST
53967: LIST
53968: PUSH
53969: LD_INT 3
53971: NEG
53972: PUSH
53973: LD_INT 3
53975: NEG
53976: PUSH
53977: EMPTY
53978: LIST
53979: LIST
53980: PUSH
53981: EMPTY
53982: LIST
53983: LIST
53984: LIST
53985: LIST
53986: LIST
53987: LIST
53988: LIST
53989: LIST
53990: LIST
53991: LIST
53992: LIST
53993: LIST
53994: LIST
53995: LIST
53996: LIST
53997: LIST
53998: LIST
53999: LIST
54000: LIST
54001: LIST
54002: LIST
54003: LIST
54004: LIST
54005: LIST
54006: LIST
54007: LIST
54008: LIST
54009: LIST
54010: LIST
54011: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54012: LD_ADDR_VAR 0 43
54016: PUSH
54017: LD_INT 0
54019: PUSH
54020: LD_INT 0
54022: PUSH
54023: EMPTY
54024: LIST
54025: LIST
54026: PUSH
54027: LD_INT 0
54029: PUSH
54030: LD_INT 1
54032: NEG
54033: PUSH
54034: EMPTY
54035: LIST
54036: LIST
54037: PUSH
54038: LD_INT 1
54040: PUSH
54041: LD_INT 0
54043: PUSH
54044: EMPTY
54045: LIST
54046: LIST
54047: PUSH
54048: LD_INT 1
54050: PUSH
54051: LD_INT 1
54053: PUSH
54054: EMPTY
54055: LIST
54056: LIST
54057: PUSH
54058: LD_INT 0
54060: PUSH
54061: LD_INT 1
54063: PUSH
54064: EMPTY
54065: LIST
54066: LIST
54067: PUSH
54068: LD_INT 1
54070: NEG
54071: PUSH
54072: LD_INT 0
54074: PUSH
54075: EMPTY
54076: LIST
54077: LIST
54078: PUSH
54079: LD_INT 1
54081: NEG
54082: PUSH
54083: LD_INT 1
54085: NEG
54086: PUSH
54087: EMPTY
54088: LIST
54089: LIST
54090: PUSH
54091: LD_INT 1
54093: NEG
54094: PUSH
54095: LD_INT 2
54097: NEG
54098: PUSH
54099: EMPTY
54100: LIST
54101: LIST
54102: PUSH
54103: LD_INT 0
54105: PUSH
54106: LD_INT 2
54108: NEG
54109: PUSH
54110: EMPTY
54111: LIST
54112: LIST
54113: PUSH
54114: LD_INT 1
54116: PUSH
54117: LD_INT 1
54119: NEG
54120: PUSH
54121: EMPTY
54122: LIST
54123: LIST
54124: PUSH
54125: LD_INT 2
54127: PUSH
54128: LD_INT 0
54130: PUSH
54131: EMPTY
54132: LIST
54133: LIST
54134: PUSH
54135: LD_INT 2
54137: PUSH
54138: LD_INT 1
54140: PUSH
54141: EMPTY
54142: LIST
54143: LIST
54144: PUSH
54145: LD_INT 1
54147: PUSH
54148: LD_INT 2
54150: PUSH
54151: EMPTY
54152: LIST
54153: LIST
54154: PUSH
54155: LD_INT 0
54157: PUSH
54158: LD_INT 2
54160: PUSH
54161: EMPTY
54162: LIST
54163: LIST
54164: PUSH
54165: LD_INT 1
54167: NEG
54168: PUSH
54169: LD_INT 1
54171: PUSH
54172: EMPTY
54173: LIST
54174: LIST
54175: PUSH
54176: LD_INT 2
54178: NEG
54179: PUSH
54180: LD_INT 0
54182: PUSH
54183: EMPTY
54184: LIST
54185: LIST
54186: PUSH
54187: LD_INT 2
54189: NEG
54190: PUSH
54191: LD_INT 1
54193: NEG
54194: PUSH
54195: EMPTY
54196: LIST
54197: LIST
54198: PUSH
54199: LD_INT 1
54201: NEG
54202: PUSH
54203: LD_INT 3
54205: NEG
54206: PUSH
54207: EMPTY
54208: LIST
54209: LIST
54210: PUSH
54211: LD_INT 0
54213: PUSH
54214: LD_INT 3
54216: NEG
54217: PUSH
54218: EMPTY
54219: LIST
54220: LIST
54221: PUSH
54222: LD_INT 1
54224: PUSH
54225: LD_INT 2
54227: NEG
54228: PUSH
54229: EMPTY
54230: LIST
54231: LIST
54232: PUSH
54233: LD_INT 2
54235: PUSH
54236: LD_INT 1
54238: NEG
54239: PUSH
54240: EMPTY
54241: LIST
54242: LIST
54243: PUSH
54244: LD_INT 3
54246: PUSH
54247: LD_INT 0
54249: PUSH
54250: EMPTY
54251: LIST
54252: LIST
54253: PUSH
54254: LD_INT 3
54256: PUSH
54257: LD_INT 1
54259: PUSH
54260: EMPTY
54261: LIST
54262: LIST
54263: PUSH
54264: LD_INT 1
54266: PUSH
54267: LD_INT 3
54269: PUSH
54270: EMPTY
54271: LIST
54272: LIST
54273: PUSH
54274: LD_INT 0
54276: PUSH
54277: LD_INT 3
54279: PUSH
54280: EMPTY
54281: LIST
54282: LIST
54283: PUSH
54284: LD_INT 1
54286: NEG
54287: PUSH
54288: LD_INT 2
54290: PUSH
54291: EMPTY
54292: LIST
54293: LIST
54294: PUSH
54295: LD_INT 2
54297: NEG
54298: PUSH
54299: LD_INT 1
54301: PUSH
54302: EMPTY
54303: LIST
54304: LIST
54305: PUSH
54306: LD_INT 3
54308: NEG
54309: PUSH
54310: LD_INT 0
54312: PUSH
54313: EMPTY
54314: LIST
54315: LIST
54316: PUSH
54317: LD_INT 3
54319: NEG
54320: PUSH
54321: LD_INT 1
54323: NEG
54324: PUSH
54325: EMPTY
54326: LIST
54327: LIST
54328: PUSH
54329: EMPTY
54330: LIST
54331: LIST
54332: LIST
54333: LIST
54334: LIST
54335: LIST
54336: LIST
54337: LIST
54338: LIST
54339: LIST
54340: LIST
54341: LIST
54342: LIST
54343: LIST
54344: LIST
54345: LIST
54346: LIST
54347: LIST
54348: LIST
54349: LIST
54350: LIST
54351: LIST
54352: LIST
54353: LIST
54354: LIST
54355: LIST
54356: LIST
54357: LIST
54358: LIST
54359: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54360: LD_ADDR_VAR 0 44
54364: PUSH
54365: LD_INT 0
54367: PUSH
54368: LD_INT 0
54370: PUSH
54371: EMPTY
54372: LIST
54373: LIST
54374: PUSH
54375: LD_INT 0
54377: PUSH
54378: LD_INT 1
54380: NEG
54381: PUSH
54382: EMPTY
54383: LIST
54384: LIST
54385: PUSH
54386: LD_INT 1
54388: PUSH
54389: LD_INT 0
54391: PUSH
54392: EMPTY
54393: LIST
54394: LIST
54395: PUSH
54396: LD_INT 1
54398: PUSH
54399: LD_INT 1
54401: PUSH
54402: EMPTY
54403: LIST
54404: LIST
54405: PUSH
54406: LD_INT 0
54408: PUSH
54409: LD_INT 1
54411: PUSH
54412: EMPTY
54413: LIST
54414: LIST
54415: PUSH
54416: LD_INT 1
54418: NEG
54419: PUSH
54420: LD_INT 0
54422: PUSH
54423: EMPTY
54424: LIST
54425: LIST
54426: PUSH
54427: LD_INT 1
54429: NEG
54430: PUSH
54431: LD_INT 1
54433: NEG
54434: PUSH
54435: EMPTY
54436: LIST
54437: LIST
54438: PUSH
54439: LD_INT 1
54441: NEG
54442: PUSH
54443: LD_INT 2
54445: NEG
54446: PUSH
54447: EMPTY
54448: LIST
54449: LIST
54450: PUSH
54451: LD_INT 1
54453: PUSH
54454: LD_INT 1
54456: NEG
54457: PUSH
54458: EMPTY
54459: LIST
54460: LIST
54461: PUSH
54462: LD_INT 2
54464: PUSH
54465: LD_INT 0
54467: PUSH
54468: EMPTY
54469: LIST
54470: LIST
54471: PUSH
54472: LD_INT 2
54474: PUSH
54475: LD_INT 1
54477: PUSH
54478: EMPTY
54479: LIST
54480: LIST
54481: PUSH
54482: LD_INT 2
54484: PUSH
54485: LD_INT 2
54487: PUSH
54488: EMPTY
54489: LIST
54490: LIST
54491: PUSH
54492: LD_INT 1
54494: PUSH
54495: LD_INT 2
54497: PUSH
54498: EMPTY
54499: LIST
54500: LIST
54501: PUSH
54502: LD_INT 1
54504: NEG
54505: PUSH
54506: LD_INT 1
54508: PUSH
54509: EMPTY
54510: LIST
54511: LIST
54512: PUSH
54513: LD_INT 2
54515: NEG
54516: PUSH
54517: LD_INT 0
54519: PUSH
54520: EMPTY
54521: LIST
54522: LIST
54523: PUSH
54524: LD_INT 2
54526: NEG
54527: PUSH
54528: LD_INT 1
54530: NEG
54531: PUSH
54532: EMPTY
54533: LIST
54534: LIST
54535: PUSH
54536: LD_INT 2
54538: NEG
54539: PUSH
54540: LD_INT 2
54542: NEG
54543: PUSH
54544: EMPTY
54545: LIST
54546: LIST
54547: PUSH
54548: LD_INT 2
54550: NEG
54551: PUSH
54552: LD_INT 3
54554: NEG
54555: PUSH
54556: EMPTY
54557: LIST
54558: LIST
54559: PUSH
54560: LD_INT 2
54562: PUSH
54563: LD_INT 1
54565: NEG
54566: PUSH
54567: EMPTY
54568: LIST
54569: LIST
54570: PUSH
54571: LD_INT 3
54573: PUSH
54574: LD_INT 0
54576: PUSH
54577: EMPTY
54578: LIST
54579: LIST
54580: PUSH
54581: LD_INT 3
54583: PUSH
54584: LD_INT 1
54586: PUSH
54587: EMPTY
54588: LIST
54589: LIST
54590: PUSH
54591: LD_INT 3
54593: PUSH
54594: LD_INT 2
54596: PUSH
54597: EMPTY
54598: LIST
54599: LIST
54600: PUSH
54601: LD_INT 3
54603: PUSH
54604: LD_INT 3
54606: PUSH
54607: EMPTY
54608: LIST
54609: LIST
54610: PUSH
54611: LD_INT 2
54613: PUSH
54614: LD_INT 3
54616: PUSH
54617: EMPTY
54618: LIST
54619: LIST
54620: PUSH
54621: LD_INT 2
54623: NEG
54624: PUSH
54625: LD_INT 1
54627: PUSH
54628: EMPTY
54629: LIST
54630: LIST
54631: PUSH
54632: LD_INT 3
54634: NEG
54635: PUSH
54636: LD_INT 0
54638: PUSH
54639: EMPTY
54640: LIST
54641: LIST
54642: PUSH
54643: LD_INT 3
54645: NEG
54646: PUSH
54647: LD_INT 1
54649: NEG
54650: PUSH
54651: EMPTY
54652: LIST
54653: LIST
54654: PUSH
54655: LD_INT 3
54657: NEG
54658: PUSH
54659: LD_INT 2
54661: NEG
54662: PUSH
54663: EMPTY
54664: LIST
54665: LIST
54666: PUSH
54667: LD_INT 3
54669: NEG
54670: PUSH
54671: LD_INT 3
54673: NEG
54674: PUSH
54675: EMPTY
54676: LIST
54677: LIST
54678: PUSH
54679: EMPTY
54680: LIST
54681: LIST
54682: LIST
54683: LIST
54684: LIST
54685: LIST
54686: LIST
54687: LIST
54688: LIST
54689: LIST
54690: LIST
54691: LIST
54692: LIST
54693: LIST
54694: LIST
54695: LIST
54696: LIST
54697: LIST
54698: LIST
54699: LIST
54700: LIST
54701: LIST
54702: LIST
54703: LIST
54704: LIST
54705: LIST
54706: LIST
54707: LIST
54708: LIST
54709: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54710: LD_ADDR_VAR 0 45
54714: PUSH
54715: LD_INT 0
54717: PUSH
54718: LD_INT 0
54720: PUSH
54721: EMPTY
54722: LIST
54723: LIST
54724: PUSH
54725: LD_INT 0
54727: PUSH
54728: LD_INT 1
54730: NEG
54731: PUSH
54732: EMPTY
54733: LIST
54734: LIST
54735: PUSH
54736: LD_INT 1
54738: PUSH
54739: LD_INT 0
54741: PUSH
54742: EMPTY
54743: LIST
54744: LIST
54745: PUSH
54746: LD_INT 1
54748: PUSH
54749: LD_INT 1
54751: PUSH
54752: EMPTY
54753: LIST
54754: LIST
54755: PUSH
54756: LD_INT 0
54758: PUSH
54759: LD_INT 1
54761: PUSH
54762: EMPTY
54763: LIST
54764: LIST
54765: PUSH
54766: LD_INT 1
54768: NEG
54769: PUSH
54770: LD_INT 0
54772: PUSH
54773: EMPTY
54774: LIST
54775: LIST
54776: PUSH
54777: LD_INT 1
54779: NEG
54780: PUSH
54781: LD_INT 1
54783: NEG
54784: PUSH
54785: EMPTY
54786: LIST
54787: LIST
54788: PUSH
54789: LD_INT 1
54791: NEG
54792: PUSH
54793: LD_INT 2
54795: NEG
54796: PUSH
54797: EMPTY
54798: LIST
54799: LIST
54800: PUSH
54801: LD_INT 0
54803: PUSH
54804: LD_INT 2
54806: NEG
54807: PUSH
54808: EMPTY
54809: LIST
54810: LIST
54811: PUSH
54812: LD_INT 1
54814: PUSH
54815: LD_INT 1
54817: NEG
54818: PUSH
54819: EMPTY
54820: LIST
54821: LIST
54822: PUSH
54823: LD_INT 2
54825: PUSH
54826: LD_INT 1
54828: PUSH
54829: EMPTY
54830: LIST
54831: LIST
54832: PUSH
54833: LD_INT 2
54835: PUSH
54836: LD_INT 2
54838: PUSH
54839: EMPTY
54840: LIST
54841: LIST
54842: PUSH
54843: LD_INT 1
54845: PUSH
54846: LD_INT 2
54848: PUSH
54849: EMPTY
54850: LIST
54851: LIST
54852: PUSH
54853: LD_INT 0
54855: PUSH
54856: LD_INT 2
54858: PUSH
54859: EMPTY
54860: LIST
54861: LIST
54862: PUSH
54863: LD_INT 1
54865: NEG
54866: PUSH
54867: LD_INT 1
54869: PUSH
54870: EMPTY
54871: LIST
54872: LIST
54873: PUSH
54874: LD_INT 2
54876: NEG
54877: PUSH
54878: LD_INT 1
54880: NEG
54881: PUSH
54882: EMPTY
54883: LIST
54884: LIST
54885: PUSH
54886: LD_INT 2
54888: NEG
54889: PUSH
54890: LD_INT 2
54892: NEG
54893: PUSH
54894: EMPTY
54895: LIST
54896: LIST
54897: PUSH
54898: LD_INT 2
54900: NEG
54901: PUSH
54902: LD_INT 3
54904: NEG
54905: PUSH
54906: EMPTY
54907: LIST
54908: LIST
54909: PUSH
54910: LD_INT 1
54912: NEG
54913: PUSH
54914: LD_INT 3
54916: NEG
54917: PUSH
54918: EMPTY
54919: LIST
54920: LIST
54921: PUSH
54922: LD_INT 0
54924: PUSH
54925: LD_INT 3
54927: NEG
54928: PUSH
54929: EMPTY
54930: LIST
54931: LIST
54932: PUSH
54933: LD_INT 1
54935: PUSH
54936: LD_INT 2
54938: NEG
54939: PUSH
54940: EMPTY
54941: LIST
54942: LIST
54943: PUSH
54944: LD_INT 3
54946: PUSH
54947: LD_INT 2
54949: PUSH
54950: EMPTY
54951: LIST
54952: LIST
54953: PUSH
54954: LD_INT 3
54956: PUSH
54957: LD_INT 3
54959: PUSH
54960: EMPTY
54961: LIST
54962: LIST
54963: PUSH
54964: LD_INT 2
54966: PUSH
54967: LD_INT 3
54969: PUSH
54970: EMPTY
54971: LIST
54972: LIST
54973: PUSH
54974: LD_INT 1
54976: PUSH
54977: LD_INT 3
54979: PUSH
54980: EMPTY
54981: LIST
54982: LIST
54983: PUSH
54984: LD_INT 0
54986: PUSH
54987: LD_INT 3
54989: PUSH
54990: EMPTY
54991: LIST
54992: LIST
54993: PUSH
54994: LD_INT 1
54996: NEG
54997: PUSH
54998: LD_INT 2
55000: PUSH
55001: EMPTY
55002: LIST
55003: LIST
55004: PUSH
55005: LD_INT 3
55007: NEG
55008: PUSH
55009: LD_INT 2
55011: NEG
55012: PUSH
55013: EMPTY
55014: LIST
55015: LIST
55016: PUSH
55017: LD_INT 3
55019: NEG
55020: PUSH
55021: LD_INT 3
55023: NEG
55024: PUSH
55025: EMPTY
55026: LIST
55027: LIST
55028: PUSH
55029: EMPTY
55030: LIST
55031: LIST
55032: LIST
55033: LIST
55034: LIST
55035: LIST
55036: LIST
55037: LIST
55038: LIST
55039: LIST
55040: LIST
55041: LIST
55042: LIST
55043: LIST
55044: LIST
55045: LIST
55046: LIST
55047: LIST
55048: LIST
55049: LIST
55050: LIST
55051: LIST
55052: LIST
55053: LIST
55054: LIST
55055: LIST
55056: LIST
55057: LIST
55058: LIST
55059: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55060: LD_ADDR_VAR 0 46
55064: PUSH
55065: LD_INT 0
55067: PUSH
55068: LD_INT 0
55070: PUSH
55071: EMPTY
55072: LIST
55073: LIST
55074: PUSH
55075: LD_INT 0
55077: PUSH
55078: LD_INT 1
55080: NEG
55081: PUSH
55082: EMPTY
55083: LIST
55084: LIST
55085: PUSH
55086: LD_INT 1
55088: PUSH
55089: LD_INT 0
55091: PUSH
55092: EMPTY
55093: LIST
55094: LIST
55095: PUSH
55096: LD_INT 1
55098: PUSH
55099: LD_INT 1
55101: PUSH
55102: EMPTY
55103: LIST
55104: LIST
55105: PUSH
55106: LD_INT 0
55108: PUSH
55109: LD_INT 1
55111: PUSH
55112: EMPTY
55113: LIST
55114: LIST
55115: PUSH
55116: LD_INT 1
55118: NEG
55119: PUSH
55120: LD_INT 0
55122: PUSH
55123: EMPTY
55124: LIST
55125: LIST
55126: PUSH
55127: LD_INT 1
55129: NEG
55130: PUSH
55131: LD_INT 1
55133: NEG
55134: PUSH
55135: EMPTY
55136: LIST
55137: LIST
55138: PUSH
55139: LD_INT 1
55141: NEG
55142: PUSH
55143: LD_INT 2
55145: NEG
55146: PUSH
55147: EMPTY
55148: LIST
55149: LIST
55150: PUSH
55151: LD_INT 0
55153: PUSH
55154: LD_INT 2
55156: NEG
55157: PUSH
55158: EMPTY
55159: LIST
55160: LIST
55161: PUSH
55162: LD_INT 1
55164: PUSH
55165: LD_INT 1
55167: NEG
55168: PUSH
55169: EMPTY
55170: LIST
55171: LIST
55172: PUSH
55173: LD_INT 2
55175: PUSH
55176: LD_INT 0
55178: PUSH
55179: EMPTY
55180: LIST
55181: LIST
55182: PUSH
55183: LD_INT 2
55185: PUSH
55186: LD_INT 1
55188: PUSH
55189: EMPTY
55190: LIST
55191: LIST
55192: PUSH
55193: LD_INT 1
55195: PUSH
55196: LD_INT 2
55198: PUSH
55199: EMPTY
55200: LIST
55201: LIST
55202: PUSH
55203: LD_INT 0
55205: PUSH
55206: LD_INT 2
55208: PUSH
55209: EMPTY
55210: LIST
55211: LIST
55212: PUSH
55213: LD_INT 1
55215: NEG
55216: PUSH
55217: LD_INT 1
55219: PUSH
55220: EMPTY
55221: LIST
55222: LIST
55223: PUSH
55224: LD_INT 2
55226: NEG
55227: PUSH
55228: LD_INT 0
55230: PUSH
55231: EMPTY
55232: LIST
55233: LIST
55234: PUSH
55235: LD_INT 2
55237: NEG
55238: PUSH
55239: LD_INT 1
55241: NEG
55242: PUSH
55243: EMPTY
55244: LIST
55245: LIST
55246: PUSH
55247: LD_INT 1
55249: NEG
55250: PUSH
55251: LD_INT 3
55253: NEG
55254: PUSH
55255: EMPTY
55256: LIST
55257: LIST
55258: PUSH
55259: LD_INT 0
55261: PUSH
55262: LD_INT 3
55264: NEG
55265: PUSH
55266: EMPTY
55267: LIST
55268: LIST
55269: PUSH
55270: LD_INT 1
55272: PUSH
55273: LD_INT 2
55275: NEG
55276: PUSH
55277: EMPTY
55278: LIST
55279: LIST
55280: PUSH
55281: LD_INT 2
55283: PUSH
55284: LD_INT 1
55286: NEG
55287: PUSH
55288: EMPTY
55289: LIST
55290: LIST
55291: PUSH
55292: LD_INT 3
55294: PUSH
55295: LD_INT 0
55297: PUSH
55298: EMPTY
55299: LIST
55300: LIST
55301: PUSH
55302: LD_INT 3
55304: PUSH
55305: LD_INT 1
55307: PUSH
55308: EMPTY
55309: LIST
55310: LIST
55311: PUSH
55312: LD_INT 1
55314: PUSH
55315: LD_INT 3
55317: PUSH
55318: EMPTY
55319: LIST
55320: LIST
55321: PUSH
55322: LD_INT 0
55324: PUSH
55325: LD_INT 3
55327: PUSH
55328: EMPTY
55329: LIST
55330: LIST
55331: PUSH
55332: LD_INT 1
55334: NEG
55335: PUSH
55336: LD_INT 2
55338: PUSH
55339: EMPTY
55340: LIST
55341: LIST
55342: PUSH
55343: LD_INT 2
55345: NEG
55346: PUSH
55347: LD_INT 1
55349: PUSH
55350: EMPTY
55351: LIST
55352: LIST
55353: PUSH
55354: LD_INT 3
55356: NEG
55357: PUSH
55358: LD_INT 0
55360: PUSH
55361: EMPTY
55362: LIST
55363: LIST
55364: PUSH
55365: LD_INT 3
55367: NEG
55368: PUSH
55369: LD_INT 1
55371: NEG
55372: PUSH
55373: EMPTY
55374: LIST
55375: LIST
55376: PUSH
55377: EMPTY
55378: LIST
55379: LIST
55380: LIST
55381: LIST
55382: LIST
55383: LIST
55384: LIST
55385: LIST
55386: LIST
55387: LIST
55388: LIST
55389: LIST
55390: LIST
55391: LIST
55392: LIST
55393: LIST
55394: LIST
55395: LIST
55396: LIST
55397: LIST
55398: LIST
55399: LIST
55400: LIST
55401: LIST
55402: LIST
55403: LIST
55404: LIST
55405: LIST
55406: LIST
55407: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55408: LD_ADDR_VAR 0 47
55412: PUSH
55413: LD_INT 0
55415: PUSH
55416: LD_INT 0
55418: PUSH
55419: EMPTY
55420: LIST
55421: LIST
55422: PUSH
55423: LD_INT 0
55425: PUSH
55426: LD_INT 1
55428: NEG
55429: PUSH
55430: EMPTY
55431: LIST
55432: LIST
55433: PUSH
55434: LD_INT 1
55436: PUSH
55437: LD_INT 0
55439: PUSH
55440: EMPTY
55441: LIST
55442: LIST
55443: PUSH
55444: LD_INT 1
55446: PUSH
55447: LD_INT 1
55449: PUSH
55450: EMPTY
55451: LIST
55452: LIST
55453: PUSH
55454: LD_INT 0
55456: PUSH
55457: LD_INT 1
55459: PUSH
55460: EMPTY
55461: LIST
55462: LIST
55463: PUSH
55464: LD_INT 1
55466: NEG
55467: PUSH
55468: LD_INT 0
55470: PUSH
55471: EMPTY
55472: LIST
55473: LIST
55474: PUSH
55475: LD_INT 1
55477: NEG
55478: PUSH
55479: LD_INT 1
55481: NEG
55482: PUSH
55483: EMPTY
55484: LIST
55485: LIST
55486: PUSH
55487: LD_INT 1
55489: NEG
55490: PUSH
55491: LD_INT 2
55493: NEG
55494: PUSH
55495: EMPTY
55496: LIST
55497: LIST
55498: PUSH
55499: LD_INT 0
55501: PUSH
55502: LD_INT 2
55504: NEG
55505: PUSH
55506: EMPTY
55507: LIST
55508: LIST
55509: PUSH
55510: LD_INT 1
55512: PUSH
55513: LD_INT 1
55515: NEG
55516: PUSH
55517: EMPTY
55518: LIST
55519: LIST
55520: PUSH
55521: LD_INT 2
55523: NEG
55524: PUSH
55525: LD_INT 1
55527: NEG
55528: PUSH
55529: EMPTY
55530: LIST
55531: LIST
55532: PUSH
55533: LD_INT 2
55535: NEG
55536: PUSH
55537: LD_INT 2
55539: NEG
55540: PUSH
55541: EMPTY
55542: LIST
55543: LIST
55544: PUSH
55545: EMPTY
55546: LIST
55547: LIST
55548: LIST
55549: LIST
55550: LIST
55551: LIST
55552: LIST
55553: LIST
55554: LIST
55555: LIST
55556: LIST
55557: LIST
55558: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
55559: LD_ADDR_VAR 0 48
55563: PUSH
55564: LD_INT 0
55566: PUSH
55567: LD_INT 0
55569: PUSH
55570: EMPTY
55571: LIST
55572: LIST
55573: PUSH
55574: LD_INT 0
55576: PUSH
55577: LD_INT 1
55579: NEG
55580: PUSH
55581: EMPTY
55582: LIST
55583: LIST
55584: PUSH
55585: LD_INT 1
55587: PUSH
55588: LD_INT 0
55590: PUSH
55591: EMPTY
55592: LIST
55593: LIST
55594: PUSH
55595: LD_INT 1
55597: PUSH
55598: LD_INT 1
55600: PUSH
55601: EMPTY
55602: LIST
55603: LIST
55604: PUSH
55605: LD_INT 0
55607: PUSH
55608: LD_INT 1
55610: PUSH
55611: EMPTY
55612: LIST
55613: LIST
55614: PUSH
55615: LD_INT 1
55617: NEG
55618: PUSH
55619: LD_INT 0
55621: PUSH
55622: EMPTY
55623: LIST
55624: LIST
55625: PUSH
55626: LD_INT 1
55628: NEG
55629: PUSH
55630: LD_INT 1
55632: NEG
55633: PUSH
55634: EMPTY
55635: LIST
55636: LIST
55637: PUSH
55638: LD_INT 1
55640: NEG
55641: PUSH
55642: LD_INT 2
55644: NEG
55645: PUSH
55646: EMPTY
55647: LIST
55648: LIST
55649: PUSH
55650: LD_INT 0
55652: PUSH
55653: LD_INT 2
55655: NEG
55656: PUSH
55657: EMPTY
55658: LIST
55659: LIST
55660: PUSH
55661: LD_INT 1
55663: PUSH
55664: LD_INT 1
55666: NEG
55667: PUSH
55668: EMPTY
55669: LIST
55670: LIST
55671: PUSH
55672: LD_INT 2
55674: PUSH
55675: LD_INT 0
55677: PUSH
55678: EMPTY
55679: LIST
55680: LIST
55681: PUSH
55682: LD_INT 2
55684: PUSH
55685: LD_INT 1
55687: PUSH
55688: EMPTY
55689: LIST
55690: LIST
55691: PUSH
55692: EMPTY
55693: LIST
55694: LIST
55695: LIST
55696: LIST
55697: LIST
55698: LIST
55699: LIST
55700: LIST
55701: LIST
55702: LIST
55703: LIST
55704: LIST
55705: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
55706: LD_ADDR_VAR 0 49
55710: PUSH
55711: LD_INT 0
55713: PUSH
55714: LD_INT 0
55716: PUSH
55717: EMPTY
55718: LIST
55719: LIST
55720: PUSH
55721: LD_INT 0
55723: PUSH
55724: LD_INT 1
55726: NEG
55727: PUSH
55728: EMPTY
55729: LIST
55730: LIST
55731: PUSH
55732: LD_INT 1
55734: PUSH
55735: LD_INT 0
55737: PUSH
55738: EMPTY
55739: LIST
55740: LIST
55741: PUSH
55742: LD_INT 1
55744: PUSH
55745: LD_INT 1
55747: PUSH
55748: EMPTY
55749: LIST
55750: LIST
55751: PUSH
55752: LD_INT 0
55754: PUSH
55755: LD_INT 1
55757: PUSH
55758: EMPTY
55759: LIST
55760: LIST
55761: PUSH
55762: LD_INT 1
55764: NEG
55765: PUSH
55766: LD_INT 0
55768: PUSH
55769: EMPTY
55770: LIST
55771: LIST
55772: PUSH
55773: LD_INT 1
55775: NEG
55776: PUSH
55777: LD_INT 1
55779: NEG
55780: PUSH
55781: EMPTY
55782: LIST
55783: LIST
55784: PUSH
55785: LD_INT 1
55787: PUSH
55788: LD_INT 1
55790: NEG
55791: PUSH
55792: EMPTY
55793: LIST
55794: LIST
55795: PUSH
55796: LD_INT 2
55798: PUSH
55799: LD_INT 0
55801: PUSH
55802: EMPTY
55803: LIST
55804: LIST
55805: PUSH
55806: LD_INT 2
55808: PUSH
55809: LD_INT 1
55811: PUSH
55812: EMPTY
55813: LIST
55814: LIST
55815: PUSH
55816: LD_INT 2
55818: PUSH
55819: LD_INT 2
55821: PUSH
55822: EMPTY
55823: LIST
55824: LIST
55825: PUSH
55826: LD_INT 1
55828: PUSH
55829: LD_INT 2
55831: PUSH
55832: EMPTY
55833: LIST
55834: LIST
55835: PUSH
55836: EMPTY
55837: LIST
55838: LIST
55839: LIST
55840: LIST
55841: LIST
55842: LIST
55843: LIST
55844: LIST
55845: LIST
55846: LIST
55847: LIST
55848: LIST
55849: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
55850: LD_ADDR_VAR 0 50
55854: PUSH
55855: LD_INT 0
55857: PUSH
55858: LD_INT 0
55860: PUSH
55861: EMPTY
55862: LIST
55863: LIST
55864: PUSH
55865: LD_INT 0
55867: PUSH
55868: LD_INT 1
55870: NEG
55871: PUSH
55872: EMPTY
55873: LIST
55874: LIST
55875: PUSH
55876: LD_INT 1
55878: PUSH
55879: LD_INT 0
55881: PUSH
55882: EMPTY
55883: LIST
55884: LIST
55885: PUSH
55886: LD_INT 1
55888: PUSH
55889: LD_INT 1
55891: PUSH
55892: EMPTY
55893: LIST
55894: LIST
55895: PUSH
55896: LD_INT 0
55898: PUSH
55899: LD_INT 1
55901: PUSH
55902: EMPTY
55903: LIST
55904: LIST
55905: PUSH
55906: LD_INT 1
55908: NEG
55909: PUSH
55910: LD_INT 0
55912: PUSH
55913: EMPTY
55914: LIST
55915: LIST
55916: PUSH
55917: LD_INT 1
55919: NEG
55920: PUSH
55921: LD_INT 1
55923: NEG
55924: PUSH
55925: EMPTY
55926: LIST
55927: LIST
55928: PUSH
55929: LD_INT 2
55931: PUSH
55932: LD_INT 1
55934: PUSH
55935: EMPTY
55936: LIST
55937: LIST
55938: PUSH
55939: LD_INT 2
55941: PUSH
55942: LD_INT 2
55944: PUSH
55945: EMPTY
55946: LIST
55947: LIST
55948: PUSH
55949: LD_INT 1
55951: PUSH
55952: LD_INT 2
55954: PUSH
55955: EMPTY
55956: LIST
55957: LIST
55958: PUSH
55959: LD_INT 0
55961: PUSH
55962: LD_INT 2
55964: PUSH
55965: EMPTY
55966: LIST
55967: LIST
55968: PUSH
55969: LD_INT 1
55971: NEG
55972: PUSH
55973: LD_INT 1
55975: PUSH
55976: EMPTY
55977: LIST
55978: LIST
55979: PUSH
55980: EMPTY
55981: LIST
55982: LIST
55983: LIST
55984: LIST
55985: LIST
55986: LIST
55987: LIST
55988: LIST
55989: LIST
55990: LIST
55991: LIST
55992: LIST
55993: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
55994: LD_ADDR_VAR 0 51
55998: PUSH
55999: LD_INT 0
56001: PUSH
56002: LD_INT 0
56004: PUSH
56005: EMPTY
56006: LIST
56007: LIST
56008: PUSH
56009: LD_INT 0
56011: PUSH
56012: LD_INT 1
56014: NEG
56015: PUSH
56016: EMPTY
56017: LIST
56018: LIST
56019: PUSH
56020: LD_INT 1
56022: PUSH
56023: LD_INT 0
56025: PUSH
56026: EMPTY
56027: LIST
56028: LIST
56029: PUSH
56030: LD_INT 1
56032: PUSH
56033: LD_INT 1
56035: PUSH
56036: EMPTY
56037: LIST
56038: LIST
56039: PUSH
56040: LD_INT 0
56042: PUSH
56043: LD_INT 1
56045: PUSH
56046: EMPTY
56047: LIST
56048: LIST
56049: PUSH
56050: LD_INT 1
56052: NEG
56053: PUSH
56054: LD_INT 0
56056: PUSH
56057: EMPTY
56058: LIST
56059: LIST
56060: PUSH
56061: LD_INT 1
56063: NEG
56064: PUSH
56065: LD_INT 1
56067: NEG
56068: PUSH
56069: EMPTY
56070: LIST
56071: LIST
56072: PUSH
56073: LD_INT 1
56075: PUSH
56076: LD_INT 2
56078: PUSH
56079: EMPTY
56080: LIST
56081: LIST
56082: PUSH
56083: LD_INT 0
56085: PUSH
56086: LD_INT 2
56088: PUSH
56089: EMPTY
56090: LIST
56091: LIST
56092: PUSH
56093: LD_INT 1
56095: NEG
56096: PUSH
56097: LD_INT 1
56099: PUSH
56100: EMPTY
56101: LIST
56102: LIST
56103: PUSH
56104: LD_INT 2
56106: NEG
56107: PUSH
56108: LD_INT 0
56110: PUSH
56111: EMPTY
56112: LIST
56113: LIST
56114: PUSH
56115: LD_INT 2
56117: NEG
56118: PUSH
56119: LD_INT 1
56121: NEG
56122: PUSH
56123: EMPTY
56124: LIST
56125: LIST
56126: PUSH
56127: EMPTY
56128: LIST
56129: LIST
56130: LIST
56131: LIST
56132: LIST
56133: LIST
56134: LIST
56135: LIST
56136: LIST
56137: LIST
56138: LIST
56139: LIST
56140: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56141: LD_ADDR_VAR 0 52
56145: PUSH
56146: LD_INT 0
56148: PUSH
56149: LD_INT 0
56151: PUSH
56152: EMPTY
56153: LIST
56154: LIST
56155: PUSH
56156: LD_INT 0
56158: PUSH
56159: LD_INT 1
56161: NEG
56162: PUSH
56163: EMPTY
56164: LIST
56165: LIST
56166: PUSH
56167: LD_INT 1
56169: PUSH
56170: LD_INT 0
56172: PUSH
56173: EMPTY
56174: LIST
56175: LIST
56176: PUSH
56177: LD_INT 1
56179: PUSH
56180: LD_INT 1
56182: PUSH
56183: EMPTY
56184: LIST
56185: LIST
56186: PUSH
56187: LD_INT 0
56189: PUSH
56190: LD_INT 1
56192: PUSH
56193: EMPTY
56194: LIST
56195: LIST
56196: PUSH
56197: LD_INT 1
56199: NEG
56200: PUSH
56201: LD_INT 0
56203: PUSH
56204: EMPTY
56205: LIST
56206: LIST
56207: PUSH
56208: LD_INT 1
56210: NEG
56211: PUSH
56212: LD_INT 1
56214: NEG
56215: PUSH
56216: EMPTY
56217: LIST
56218: LIST
56219: PUSH
56220: LD_INT 1
56222: NEG
56223: PUSH
56224: LD_INT 2
56226: NEG
56227: PUSH
56228: EMPTY
56229: LIST
56230: LIST
56231: PUSH
56232: LD_INT 1
56234: NEG
56235: PUSH
56236: LD_INT 1
56238: PUSH
56239: EMPTY
56240: LIST
56241: LIST
56242: PUSH
56243: LD_INT 2
56245: NEG
56246: PUSH
56247: LD_INT 0
56249: PUSH
56250: EMPTY
56251: LIST
56252: LIST
56253: PUSH
56254: LD_INT 2
56256: NEG
56257: PUSH
56258: LD_INT 1
56260: NEG
56261: PUSH
56262: EMPTY
56263: LIST
56264: LIST
56265: PUSH
56266: LD_INT 2
56268: NEG
56269: PUSH
56270: LD_INT 2
56272: NEG
56273: PUSH
56274: EMPTY
56275: LIST
56276: LIST
56277: PUSH
56278: EMPTY
56279: LIST
56280: LIST
56281: LIST
56282: LIST
56283: LIST
56284: LIST
56285: LIST
56286: LIST
56287: LIST
56288: LIST
56289: LIST
56290: LIST
56291: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56292: LD_ADDR_VAR 0 53
56296: PUSH
56297: LD_INT 0
56299: PUSH
56300: LD_INT 0
56302: PUSH
56303: EMPTY
56304: LIST
56305: LIST
56306: PUSH
56307: LD_INT 0
56309: PUSH
56310: LD_INT 1
56312: NEG
56313: PUSH
56314: EMPTY
56315: LIST
56316: LIST
56317: PUSH
56318: LD_INT 1
56320: PUSH
56321: LD_INT 0
56323: PUSH
56324: EMPTY
56325: LIST
56326: LIST
56327: PUSH
56328: LD_INT 1
56330: PUSH
56331: LD_INT 1
56333: PUSH
56334: EMPTY
56335: LIST
56336: LIST
56337: PUSH
56338: LD_INT 0
56340: PUSH
56341: LD_INT 1
56343: PUSH
56344: EMPTY
56345: LIST
56346: LIST
56347: PUSH
56348: LD_INT 1
56350: NEG
56351: PUSH
56352: LD_INT 0
56354: PUSH
56355: EMPTY
56356: LIST
56357: LIST
56358: PUSH
56359: LD_INT 1
56361: NEG
56362: PUSH
56363: LD_INT 1
56365: NEG
56366: PUSH
56367: EMPTY
56368: LIST
56369: LIST
56370: PUSH
56371: LD_INT 1
56373: NEG
56374: PUSH
56375: LD_INT 2
56377: NEG
56378: PUSH
56379: EMPTY
56380: LIST
56381: LIST
56382: PUSH
56383: LD_INT 0
56385: PUSH
56386: LD_INT 2
56388: NEG
56389: PUSH
56390: EMPTY
56391: LIST
56392: LIST
56393: PUSH
56394: LD_INT 1
56396: PUSH
56397: LD_INT 1
56399: NEG
56400: PUSH
56401: EMPTY
56402: LIST
56403: LIST
56404: PUSH
56405: LD_INT 2
56407: PUSH
56408: LD_INT 0
56410: PUSH
56411: EMPTY
56412: LIST
56413: LIST
56414: PUSH
56415: LD_INT 2
56417: PUSH
56418: LD_INT 1
56420: PUSH
56421: EMPTY
56422: LIST
56423: LIST
56424: PUSH
56425: LD_INT 2
56427: PUSH
56428: LD_INT 2
56430: PUSH
56431: EMPTY
56432: LIST
56433: LIST
56434: PUSH
56435: LD_INT 1
56437: PUSH
56438: LD_INT 2
56440: PUSH
56441: EMPTY
56442: LIST
56443: LIST
56444: PUSH
56445: LD_INT 0
56447: PUSH
56448: LD_INT 2
56450: PUSH
56451: EMPTY
56452: LIST
56453: LIST
56454: PUSH
56455: LD_INT 1
56457: NEG
56458: PUSH
56459: LD_INT 1
56461: PUSH
56462: EMPTY
56463: LIST
56464: LIST
56465: PUSH
56466: LD_INT 2
56468: NEG
56469: PUSH
56470: LD_INT 0
56472: PUSH
56473: EMPTY
56474: LIST
56475: LIST
56476: PUSH
56477: LD_INT 2
56479: NEG
56480: PUSH
56481: LD_INT 1
56483: NEG
56484: PUSH
56485: EMPTY
56486: LIST
56487: LIST
56488: PUSH
56489: LD_INT 2
56491: NEG
56492: PUSH
56493: LD_INT 2
56495: NEG
56496: PUSH
56497: EMPTY
56498: LIST
56499: LIST
56500: PUSH
56501: EMPTY
56502: LIST
56503: LIST
56504: LIST
56505: LIST
56506: LIST
56507: LIST
56508: LIST
56509: LIST
56510: LIST
56511: LIST
56512: LIST
56513: LIST
56514: LIST
56515: LIST
56516: LIST
56517: LIST
56518: LIST
56519: LIST
56520: LIST
56521: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56522: LD_ADDR_VAR 0 54
56526: PUSH
56527: LD_INT 0
56529: PUSH
56530: LD_INT 0
56532: PUSH
56533: EMPTY
56534: LIST
56535: LIST
56536: PUSH
56537: LD_INT 0
56539: PUSH
56540: LD_INT 1
56542: NEG
56543: PUSH
56544: EMPTY
56545: LIST
56546: LIST
56547: PUSH
56548: LD_INT 1
56550: PUSH
56551: LD_INT 0
56553: PUSH
56554: EMPTY
56555: LIST
56556: LIST
56557: PUSH
56558: LD_INT 1
56560: PUSH
56561: LD_INT 1
56563: PUSH
56564: EMPTY
56565: LIST
56566: LIST
56567: PUSH
56568: LD_INT 0
56570: PUSH
56571: LD_INT 1
56573: PUSH
56574: EMPTY
56575: LIST
56576: LIST
56577: PUSH
56578: LD_INT 1
56580: NEG
56581: PUSH
56582: LD_INT 0
56584: PUSH
56585: EMPTY
56586: LIST
56587: LIST
56588: PUSH
56589: LD_INT 1
56591: NEG
56592: PUSH
56593: LD_INT 1
56595: NEG
56596: PUSH
56597: EMPTY
56598: LIST
56599: LIST
56600: PUSH
56601: LD_INT 1
56603: NEG
56604: PUSH
56605: LD_INT 2
56607: NEG
56608: PUSH
56609: EMPTY
56610: LIST
56611: LIST
56612: PUSH
56613: LD_INT 0
56615: PUSH
56616: LD_INT 2
56618: NEG
56619: PUSH
56620: EMPTY
56621: LIST
56622: LIST
56623: PUSH
56624: LD_INT 1
56626: PUSH
56627: LD_INT 1
56629: NEG
56630: PUSH
56631: EMPTY
56632: LIST
56633: LIST
56634: PUSH
56635: LD_INT 2
56637: PUSH
56638: LD_INT 0
56640: PUSH
56641: EMPTY
56642: LIST
56643: LIST
56644: PUSH
56645: LD_INT 2
56647: PUSH
56648: LD_INT 1
56650: PUSH
56651: EMPTY
56652: LIST
56653: LIST
56654: PUSH
56655: LD_INT 2
56657: PUSH
56658: LD_INT 2
56660: PUSH
56661: EMPTY
56662: LIST
56663: LIST
56664: PUSH
56665: LD_INT 1
56667: PUSH
56668: LD_INT 2
56670: PUSH
56671: EMPTY
56672: LIST
56673: LIST
56674: PUSH
56675: LD_INT 0
56677: PUSH
56678: LD_INT 2
56680: PUSH
56681: EMPTY
56682: LIST
56683: LIST
56684: PUSH
56685: LD_INT 1
56687: NEG
56688: PUSH
56689: LD_INT 1
56691: PUSH
56692: EMPTY
56693: LIST
56694: LIST
56695: PUSH
56696: LD_INT 2
56698: NEG
56699: PUSH
56700: LD_INT 0
56702: PUSH
56703: EMPTY
56704: LIST
56705: LIST
56706: PUSH
56707: LD_INT 2
56709: NEG
56710: PUSH
56711: LD_INT 1
56713: NEG
56714: PUSH
56715: EMPTY
56716: LIST
56717: LIST
56718: PUSH
56719: LD_INT 2
56721: NEG
56722: PUSH
56723: LD_INT 2
56725: NEG
56726: PUSH
56727: EMPTY
56728: LIST
56729: LIST
56730: PUSH
56731: EMPTY
56732: LIST
56733: LIST
56734: LIST
56735: LIST
56736: LIST
56737: LIST
56738: LIST
56739: LIST
56740: LIST
56741: LIST
56742: LIST
56743: LIST
56744: LIST
56745: LIST
56746: LIST
56747: LIST
56748: LIST
56749: LIST
56750: LIST
56751: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56752: LD_ADDR_VAR 0 55
56756: PUSH
56757: LD_INT 0
56759: PUSH
56760: LD_INT 0
56762: PUSH
56763: EMPTY
56764: LIST
56765: LIST
56766: PUSH
56767: LD_INT 0
56769: PUSH
56770: LD_INT 1
56772: NEG
56773: PUSH
56774: EMPTY
56775: LIST
56776: LIST
56777: PUSH
56778: LD_INT 1
56780: PUSH
56781: LD_INT 0
56783: PUSH
56784: EMPTY
56785: LIST
56786: LIST
56787: PUSH
56788: LD_INT 1
56790: PUSH
56791: LD_INT 1
56793: PUSH
56794: EMPTY
56795: LIST
56796: LIST
56797: PUSH
56798: LD_INT 0
56800: PUSH
56801: LD_INT 1
56803: PUSH
56804: EMPTY
56805: LIST
56806: LIST
56807: PUSH
56808: LD_INT 1
56810: NEG
56811: PUSH
56812: LD_INT 0
56814: PUSH
56815: EMPTY
56816: LIST
56817: LIST
56818: PUSH
56819: LD_INT 1
56821: NEG
56822: PUSH
56823: LD_INT 1
56825: NEG
56826: PUSH
56827: EMPTY
56828: LIST
56829: LIST
56830: PUSH
56831: LD_INT 1
56833: NEG
56834: PUSH
56835: LD_INT 2
56837: NEG
56838: PUSH
56839: EMPTY
56840: LIST
56841: LIST
56842: PUSH
56843: LD_INT 0
56845: PUSH
56846: LD_INT 2
56848: NEG
56849: PUSH
56850: EMPTY
56851: LIST
56852: LIST
56853: PUSH
56854: LD_INT 1
56856: PUSH
56857: LD_INT 1
56859: NEG
56860: PUSH
56861: EMPTY
56862: LIST
56863: LIST
56864: PUSH
56865: LD_INT 2
56867: PUSH
56868: LD_INT 0
56870: PUSH
56871: EMPTY
56872: LIST
56873: LIST
56874: PUSH
56875: LD_INT 2
56877: PUSH
56878: LD_INT 1
56880: PUSH
56881: EMPTY
56882: LIST
56883: LIST
56884: PUSH
56885: LD_INT 2
56887: PUSH
56888: LD_INT 2
56890: PUSH
56891: EMPTY
56892: LIST
56893: LIST
56894: PUSH
56895: LD_INT 1
56897: PUSH
56898: LD_INT 2
56900: PUSH
56901: EMPTY
56902: LIST
56903: LIST
56904: PUSH
56905: LD_INT 0
56907: PUSH
56908: LD_INT 2
56910: PUSH
56911: EMPTY
56912: LIST
56913: LIST
56914: PUSH
56915: LD_INT 1
56917: NEG
56918: PUSH
56919: LD_INT 1
56921: PUSH
56922: EMPTY
56923: LIST
56924: LIST
56925: PUSH
56926: LD_INT 2
56928: NEG
56929: PUSH
56930: LD_INT 0
56932: PUSH
56933: EMPTY
56934: LIST
56935: LIST
56936: PUSH
56937: LD_INT 2
56939: NEG
56940: PUSH
56941: LD_INT 1
56943: NEG
56944: PUSH
56945: EMPTY
56946: LIST
56947: LIST
56948: PUSH
56949: LD_INT 2
56951: NEG
56952: PUSH
56953: LD_INT 2
56955: NEG
56956: PUSH
56957: EMPTY
56958: LIST
56959: LIST
56960: PUSH
56961: EMPTY
56962: LIST
56963: LIST
56964: LIST
56965: LIST
56966: LIST
56967: LIST
56968: LIST
56969: LIST
56970: LIST
56971: LIST
56972: LIST
56973: LIST
56974: LIST
56975: LIST
56976: LIST
56977: LIST
56978: LIST
56979: LIST
56980: LIST
56981: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56982: LD_ADDR_VAR 0 56
56986: PUSH
56987: LD_INT 0
56989: PUSH
56990: LD_INT 0
56992: PUSH
56993: EMPTY
56994: LIST
56995: LIST
56996: PUSH
56997: LD_INT 0
56999: PUSH
57000: LD_INT 1
57002: NEG
57003: PUSH
57004: EMPTY
57005: LIST
57006: LIST
57007: PUSH
57008: LD_INT 1
57010: PUSH
57011: LD_INT 0
57013: PUSH
57014: EMPTY
57015: LIST
57016: LIST
57017: PUSH
57018: LD_INT 1
57020: PUSH
57021: LD_INT 1
57023: PUSH
57024: EMPTY
57025: LIST
57026: LIST
57027: PUSH
57028: LD_INT 0
57030: PUSH
57031: LD_INT 1
57033: PUSH
57034: EMPTY
57035: LIST
57036: LIST
57037: PUSH
57038: LD_INT 1
57040: NEG
57041: PUSH
57042: LD_INT 0
57044: PUSH
57045: EMPTY
57046: LIST
57047: LIST
57048: PUSH
57049: LD_INT 1
57051: NEG
57052: PUSH
57053: LD_INT 1
57055: NEG
57056: PUSH
57057: EMPTY
57058: LIST
57059: LIST
57060: PUSH
57061: LD_INT 1
57063: NEG
57064: PUSH
57065: LD_INT 2
57067: NEG
57068: PUSH
57069: EMPTY
57070: LIST
57071: LIST
57072: PUSH
57073: LD_INT 0
57075: PUSH
57076: LD_INT 2
57078: NEG
57079: PUSH
57080: EMPTY
57081: LIST
57082: LIST
57083: PUSH
57084: LD_INT 1
57086: PUSH
57087: LD_INT 1
57089: NEG
57090: PUSH
57091: EMPTY
57092: LIST
57093: LIST
57094: PUSH
57095: LD_INT 2
57097: PUSH
57098: LD_INT 0
57100: PUSH
57101: EMPTY
57102: LIST
57103: LIST
57104: PUSH
57105: LD_INT 2
57107: PUSH
57108: LD_INT 1
57110: PUSH
57111: EMPTY
57112: LIST
57113: LIST
57114: PUSH
57115: LD_INT 2
57117: PUSH
57118: LD_INT 2
57120: PUSH
57121: EMPTY
57122: LIST
57123: LIST
57124: PUSH
57125: LD_INT 1
57127: PUSH
57128: LD_INT 2
57130: PUSH
57131: EMPTY
57132: LIST
57133: LIST
57134: PUSH
57135: LD_INT 0
57137: PUSH
57138: LD_INT 2
57140: PUSH
57141: EMPTY
57142: LIST
57143: LIST
57144: PUSH
57145: LD_INT 1
57147: NEG
57148: PUSH
57149: LD_INT 1
57151: PUSH
57152: EMPTY
57153: LIST
57154: LIST
57155: PUSH
57156: LD_INT 2
57158: NEG
57159: PUSH
57160: LD_INT 0
57162: PUSH
57163: EMPTY
57164: LIST
57165: LIST
57166: PUSH
57167: LD_INT 2
57169: NEG
57170: PUSH
57171: LD_INT 1
57173: NEG
57174: PUSH
57175: EMPTY
57176: LIST
57177: LIST
57178: PUSH
57179: LD_INT 2
57181: NEG
57182: PUSH
57183: LD_INT 2
57185: NEG
57186: PUSH
57187: EMPTY
57188: LIST
57189: LIST
57190: PUSH
57191: EMPTY
57192: LIST
57193: LIST
57194: LIST
57195: LIST
57196: LIST
57197: LIST
57198: LIST
57199: LIST
57200: LIST
57201: LIST
57202: LIST
57203: LIST
57204: LIST
57205: LIST
57206: LIST
57207: LIST
57208: LIST
57209: LIST
57210: LIST
57211: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57212: LD_ADDR_VAR 0 57
57216: PUSH
57217: LD_INT 0
57219: PUSH
57220: LD_INT 0
57222: PUSH
57223: EMPTY
57224: LIST
57225: LIST
57226: PUSH
57227: LD_INT 0
57229: PUSH
57230: LD_INT 1
57232: NEG
57233: PUSH
57234: EMPTY
57235: LIST
57236: LIST
57237: PUSH
57238: LD_INT 1
57240: PUSH
57241: LD_INT 0
57243: PUSH
57244: EMPTY
57245: LIST
57246: LIST
57247: PUSH
57248: LD_INT 1
57250: PUSH
57251: LD_INT 1
57253: PUSH
57254: EMPTY
57255: LIST
57256: LIST
57257: PUSH
57258: LD_INT 0
57260: PUSH
57261: LD_INT 1
57263: PUSH
57264: EMPTY
57265: LIST
57266: LIST
57267: PUSH
57268: LD_INT 1
57270: NEG
57271: PUSH
57272: LD_INT 0
57274: PUSH
57275: EMPTY
57276: LIST
57277: LIST
57278: PUSH
57279: LD_INT 1
57281: NEG
57282: PUSH
57283: LD_INT 1
57285: NEG
57286: PUSH
57287: EMPTY
57288: LIST
57289: LIST
57290: PUSH
57291: LD_INT 1
57293: NEG
57294: PUSH
57295: LD_INT 2
57297: NEG
57298: PUSH
57299: EMPTY
57300: LIST
57301: LIST
57302: PUSH
57303: LD_INT 0
57305: PUSH
57306: LD_INT 2
57308: NEG
57309: PUSH
57310: EMPTY
57311: LIST
57312: LIST
57313: PUSH
57314: LD_INT 1
57316: PUSH
57317: LD_INT 1
57319: NEG
57320: PUSH
57321: EMPTY
57322: LIST
57323: LIST
57324: PUSH
57325: LD_INT 2
57327: PUSH
57328: LD_INT 0
57330: PUSH
57331: EMPTY
57332: LIST
57333: LIST
57334: PUSH
57335: LD_INT 2
57337: PUSH
57338: LD_INT 1
57340: PUSH
57341: EMPTY
57342: LIST
57343: LIST
57344: PUSH
57345: LD_INT 2
57347: PUSH
57348: LD_INT 2
57350: PUSH
57351: EMPTY
57352: LIST
57353: LIST
57354: PUSH
57355: LD_INT 1
57357: PUSH
57358: LD_INT 2
57360: PUSH
57361: EMPTY
57362: LIST
57363: LIST
57364: PUSH
57365: LD_INT 0
57367: PUSH
57368: LD_INT 2
57370: PUSH
57371: EMPTY
57372: LIST
57373: LIST
57374: PUSH
57375: LD_INT 1
57377: NEG
57378: PUSH
57379: LD_INT 1
57381: PUSH
57382: EMPTY
57383: LIST
57384: LIST
57385: PUSH
57386: LD_INT 2
57388: NEG
57389: PUSH
57390: LD_INT 0
57392: PUSH
57393: EMPTY
57394: LIST
57395: LIST
57396: PUSH
57397: LD_INT 2
57399: NEG
57400: PUSH
57401: LD_INT 1
57403: NEG
57404: PUSH
57405: EMPTY
57406: LIST
57407: LIST
57408: PUSH
57409: LD_INT 2
57411: NEG
57412: PUSH
57413: LD_INT 2
57415: NEG
57416: PUSH
57417: EMPTY
57418: LIST
57419: LIST
57420: PUSH
57421: EMPTY
57422: LIST
57423: LIST
57424: LIST
57425: LIST
57426: LIST
57427: LIST
57428: LIST
57429: LIST
57430: LIST
57431: LIST
57432: LIST
57433: LIST
57434: LIST
57435: LIST
57436: LIST
57437: LIST
57438: LIST
57439: LIST
57440: LIST
57441: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57442: LD_ADDR_VAR 0 58
57446: PUSH
57447: LD_INT 0
57449: PUSH
57450: LD_INT 0
57452: PUSH
57453: EMPTY
57454: LIST
57455: LIST
57456: PUSH
57457: LD_INT 0
57459: PUSH
57460: LD_INT 1
57462: NEG
57463: PUSH
57464: EMPTY
57465: LIST
57466: LIST
57467: PUSH
57468: LD_INT 1
57470: PUSH
57471: LD_INT 0
57473: PUSH
57474: EMPTY
57475: LIST
57476: LIST
57477: PUSH
57478: LD_INT 1
57480: PUSH
57481: LD_INT 1
57483: PUSH
57484: EMPTY
57485: LIST
57486: LIST
57487: PUSH
57488: LD_INT 0
57490: PUSH
57491: LD_INT 1
57493: PUSH
57494: EMPTY
57495: LIST
57496: LIST
57497: PUSH
57498: LD_INT 1
57500: NEG
57501: PUSH
57502: LD_INT 0
57504: PUSH
57505: EMPTY
57506: LIST
57507: LIST
57508: PUSH
57509: LD_INT 1
57511: NEG
57512: PUSH
57513: LD_INT 1
57515: NEG
57516: PUSH
57517: EMPTY
57518: LIST
57519: LIST
57520: PUSH
57521: LD_INT 1
57523: NEG
57524: PUSH
57525: LD_INT 2
57527: NEG
57528: PUSH
57529: EMPTY
57530: LIST
57531: LIST
57532: PUSH
57533: LD_INT 0
57535: PUSH
57536: LD_INT 2
57538: NEG
57539: PUSH
57540: EMPTY
57541: LIST
57542: LIST
57543: PUSH
57544: LD_INT 1
57546: PUSH
57547: LD_INT 1
57549: NEG
57550: PUSH
57551: EMPTY
57552: LIST
57553: LIST
57554: PUSH
57555: LD_INT 2
57557: PUSH
57558: LD_INT 0
57560: PUSH
57561: EMPTY
57562: LIST
57563: LIST
57564: PUSH
57565: LD_INT 2
57567: PUSH
57568: LD_INT 1
57570: PUSH
57571: EMPTY
57572: LIST
57573: LIST
57574: PUSH
57575: LD_INT 2
57577: PUSH
57578: LD_INT 2
57580: PUSH
57581: EMPTY
57582: LIST
57583: LIST
57584: PUSH
57585: LD_INT 1
57587: PUSH
57588: LD_INT 2
57590: PUSH
57591: EMPTY
57592: LIST
57593: LIST
57594: PUSH
57595: LD_INT 0
57597: PUSH
57598: LD_INT 2
57600: PUSH
57601: EMPTY
57602: LIST
57603: LIST
57604: PUSH
57605: LD_INT 1
57607: NEG
57608: PUSH
57609: LD_INT 1
57611: PUSH
57612: EMPTY
57613: LIST
57614: LIST
57615: PUSH
57616: LD_INT 2
57618: NEG
57619: PUSH
57620: LD_INT 0
57622: PUSH
57623: EMPTY
57624: LIST
57625: LIST
57626: PUSH
57627: LD_INT 2
57629: NEG
57630: PUSH
57631: LD_INT 1
57633: NEG
57634: PUSH
57635: EMPTY
57636: LIST
57637: LIST
57638: PUSH
57639: LD_INT 2
57641: NEG
57642: PUSH
57643: LD_INT 2
57645: NEG
57646: PUSH
57647: EMPTY
57648: LIST
57649: LIST
57650: PUSH
57651: EMPTY
57652: LIST
57653: LIST
57654: LIST
57655: LIST
57656: LIST
57657: LIST
57658: LIST
57659: LIST
57660: LIST
57661: LIST
57662: LIST
57663: LIST
57664: LIST
57665: LIST
57666: LIST
57667: LIST
57668: LIST
57669: LIST
57670: LIST
57671: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57672: LD_ADDR_VAR 0 59
57676: PUSH
57677: LD_INT 0
57679: PUSH
57680: LD_INT 0
57682: PUSH
57683: EMPTY
57684: LIST
57685: LIST
57686: PUSH
57687: LD_INT 0
57689: PUSH
57690: LD_INT 1
57692: NEG
57693: PUSH
57694: EMPTY
57695: LIST
57696: LIST
57697: PUSH
57698: LD_INT 1
57700: PUSH
57701: LD_INT 0
57703: PUSH
57704: EMPTY
57705: LIST
57706: LIST
57707: PUSH
57708: LD_INT 1
57710: PUSH
57711: LD_INT 1
57713: PUSH
57714: EMPTY
57715: LIST
57716: LIST
57717: PUSH
57718: LD_INT 0
57720: PUSH
57721: LD_INT 1
57723: PUSH
57724: EMPTY
57725: LIST
57726: LIST
57727: PUSH
57728: LD_INT 1
57730: NEG
57731: PUSH
57732: LD_INT 0
57734: PUSH
57735: EMPTY
57736: LIST
57737: LIST
57738: PUSH
57739: LD_INT 1
57741: NEG
57742: PUSH
57743: LD_INT 1
57745: NEG
57746: PUSH
57747: EMPTY
57748: LIST
57749: LIST
57750: PUSH
57751: EMPTY
57752: LIST
57753: LIST
57754: LIST
57755: LIST
57756: LIST
57757: LIST
57758: LIST
57759: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57760: LD_ADDR_VAR 0 60
57764: PUSH
57765: LD_INT 0
57767: PUSH
57768: LD_INT 0
57770: PUSH
57771: EMPTY
57772: LIST
57773: LIST
57774: PUSH
57775: LD_INT 0
57777: PUSH
57778: LD_INT 1
57780: NEG
57781: PUSH
57782: EMPTY
57783: LIST
57784: LIST
57785: PUSH
57786: LD_INT 1
57788: PUSH
57789: LD_INT 0
57791: PUSH
57792: EMPTY
57793: LIST
57794: LIST
57795: PUSH
57796: LD_INT 1
57798: PUSH
57799: LD_INT 1
57801: PUSH
57802: EMPTY
57803: LIST
57804: LIST
57805: PUSH
57806: LD_INT 0
57808: PUSH
57809: LD_INT 1
57811: PUSH
57812: EMPTY
57813: LIST
57814: LIST
57815: PUSH
57816: LD_INT 1
57818: NEG
57819: PUSH
57820: LD_INT 0
57822: PUSH
57823: EMPTY
57824: LIST
57825: LIST
57826: PUSH
57827: LD_INT 1
57829: NEG
57830: PUSH
57831: LD_INT 1
57833: NEG
57834: PUSH
57835: EMPTY
57836: LIST
57837: LIST
57838: PUSH
57839: EMPTY
57840: LIST
57841: LIST
57842: LIST
57843: LIST
57844: LIST
57845: LIST
57846: LIST
57847: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57848: LD_ADDR_VAR 0 61
57852: PUSH
57853: LD_INT 0
57855: PUSH
57856: LD_INT 0
57858: PUSH
57859: EMPTY
57860: LIST
57861: LIST
57862: PUSH
57863: LD_INT 0
57865: PUSH
57866: LD_INT 1
57868: NEG
57869: PUSH
57870: EMPTY
57871: LIST
57872: LIST
57873: PUSH
57874: LD_INT 1
57876: PUSH
57877: LD_INT 0
57879: PUSH
57880: EMPTY
57881: LIST
57882: LIST
57883: PUSH
57884: LD_INT 1
57886: PUSH
57887: LD_INT 1
57889: PUSH
57890: EMPTY
57891: LIST
57892: LIST
57893: PUSH
57894: LD_INT 0
57896: PUSH
57897: LD_INT 1
57899: PUSH
57900: EMPTY
57901: LIST
57902: LIST
57903: PUSH
57904: LD_INT 1
57906: NEG
57907: PUSH
57908: LD_INT 0
57910: PUSH
57911: EMPTY
57912: LIST
57913: LIST
57914: PUSH
57915: LD_INT 1
57917: NEG
57918: PUSH
57919: LD_INT 1
57921: NEG
57922: PUSH
57923: EMPTY
57924: LIST
57925: LIST
57926: PUSH
57927: EMPTY
57928: LIST
57929: LIST
57930: LIST
57931: LIST
57932: LIST
57933: LIST
57934: LIST
57935: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57936: LD_ADDR_VAR 0 62
57940: PUSH
57941: LD_INT 0
57943: PUSH
57944: LD_INT 0
57946: PUSH
57947: EMPTY
57948: LIST
57949: LIST
57950: PUSH
57951: LD_INT 0
57953: PUSH
57954: LD_INT 1
57956: NEG
57957: PUSH
57958: EMPTY
57959: LIST
57960: LIST
57961: PUSH
57962: LD_INT 1
57964: PUSH
57965: LD_INT 0
57967: PUSH
57968: EMPTY
57969: LIST
57970: LIST
57971: PUSH
57972: LD_INT 1
57974: PUSH
57975: LD_INT 1
57977: PUSH
57978: EMPTY
57979: LIST
57980: LIST
57981: PUSH
57982: LD_INT 0
57984: PUSH
57985: LD_INT 1
57987: PUSH
57988: EMPTY
57989: LIST
57990: LIST
57991: PUSH
57992: LD_INT 1
57994: NEG
57995: PUSH
57996: LD_INT 0
57998: PUSH
57999: EMPTY
58000: LIST
58001: LIST
58002: PUSH
58003: LD_INT 1
58005: NEG
58006: PUSH
58007: LD_INT 1
58009: NEG
58010: PUSH
58011: EMPTY
58012: LIST
58013: LIST
58014: PUSH
58015: EMPTY
58016: LIST
58017: LIST
58018: LIST
58019: LIST
58020: LIST
58021: LIST
58022: LIST
58023: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58024: LD_ADDR_VAR 0 63
58028: PUSH
58029: LD_INT 0
58031: PUSH
58032: LD_INT 0
58034: PUSH
58035: EMPTY
58036: LIST
58037: LIST
58038: PUSH
58039: LD_INT 0
58041: PUSH
58042: LD_INT 1
58044: NEG
58045: PUSH
58046: EMPTY
58047: LIST
58048: LIST
58049: PUSH
58050: LD_INT 1
58052: PUSH
58053: LD_INT 0
58055: PUSH
58056: EMPTY
58057: LIST
58058: LIST
58059: PUSH
58060: LD_INT 1
58062: PUSH
58063: LD_INT 1
58065: PUSH
58066: EMPTY
58067: LIST
58068: LIST
58069: PUSH
58070: LD_INT 0
58072: PUSH
58073: LD_INT 1
58075: PUSH
58076: EMPTY
58077: LIST
58078: LIST
58079: PUSH
58080: LD_INT 1
58082: NEG
58083: PUSH
58084: LD_INT 0
58086: PUSH
58087: EMPTY
58088: LIST
58089: LIST
58090: PUSH
58091: LD_INT 1
58093: NEG
58094: PUSH
58095: LD_INT 1
58097: NEG
58098: PUSH
58099: EMPTY
58100: LIST
58101: LIST
58102: PUSH
58103: EMPTY
58104: LIST
58105: LIST
58106: LIST
58107: LIST
58108: LIST
58109: LIST
58110: LIST
58111: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58112: LD_ADDR_VAR 0 64
58116: PUSH
58117: LD_INT 0
58119: PUSH
58120: LD_INT 0
58122: PUSH
58123: EMPTY
58124: LIST
58125: LIST
58126: PUSH
58127: LD_INT 0
58129: PUSH
58130: LD_INT 1
58132: NEG
58133: PUSH
58134: EMPTY
58135: LIST
58136: LIST
58137: PUSH
58138: LD_INT 1
58140: PUSH
58141: LD_INT 0
58143: PUSH
58144: EMPTY
58145: LIST
58146: LIST
58147: PUSH
58148: LD_INT 1
58150: PUSH
58151: LD_INT 1
58153: PUSH
58154: EMPTY
58155: LIST
58156: LIST
58157: PUSH
58158: LD_INT 0
58160: PUSH
58161: LD_INT 1
58163: PUSH
58164: EMPTY
58165: LIST
58166: LIST
58167: PUSH
58168: LD_INT 1
58170: NEG
58171: PUSH
58172: LD_INT 0
58174: PUSH
58175: EMPTY
58176: LIST
58177: LIST
58178: PUSH
58179: LD_INT 1
58181: NEG
58182: PUSH
58183: LD_INT 1
58185: NEG
58186: PUSH
58187: EMPTY
58188: LIST
58189: LIST
58190: PUSH
58191: EMPTY
58192: LIST
58193: LIST
58194: LIST
58195: LIST
58196: LIST
58197: LIST
58198: LIST
58199: ST_TO_ADDR
// end ; 1 :
58200: GO 64097
58202: LD_INT 1
58204: DOUBLE
58205: EQUAL
58206: IFTRUE 58210
58208: GO 60833
58210: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58211: LD_ADDR_VAR 0 11
58215: PUSH
58216: LD_INT 1
58218: NEG
58219: PUSH
58220: LD_INT 3
58222: NEG
58223: PUSH
58224: EMPTY
58225: LIST
58226: LIST
58227: PUSH
58228: LD_INT 0
58230: PUSH
58231: LD_INT 3
58233: NEG
58234: PUSH
58235: EMPTY
58236: LIST
58237: LIST
58238: PUSH
58239: LD_INT 1
58241: PUSH
58242: LD_INT 2
58244: NEG
58245: PUSH
58246: EMPTY
58247: LIST
58248: LIST
58249: PUSH
58250: EMPTY
58251: LIST
58252: LIST
58253: LIST
58254: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58255: LD_ADDR_VAR 0 12
58259: PUSH
58260: LD_INT 2
58262: PUSH
58263: LD_INT 1
58265: NEG
58266: PUSH
58267: EMPTY
58268: LIST
58269: LIST
58270: PUSH
58271: LD_INT 3
58273: PUSH
58274: LD_INT 0
58276: PUSH
58277: EMPTY
58278: LIST
58279: LIST
58280: PUSH
58281: LD_INT 3
58283: PUSH
58284: LD_INT 1
58286: PUSH
58287: EMPTY
58288: LIST
58289: LIST
58290: PUSH
58291: EMPTY
58292: LIST
58293: LIST
58294: LIST
58295: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58296: LD_ADDR_VAR 0 13
58300: PUSH
58301: LD_INT 3
58303: PUSH
58304: LD_INT 2
58306: PUSH
58307: EMPTY
58308: LIST
58309: LIST
58310: PUSH
58311: LD_INT 3
58313: PUSH
58314: LD_INT 3
58316: PUSH
58317: EMPTY
58318: LIST
58319: LIST
58320: PUSH
58321: LD_INT 2
58323: PUSH
58324: LD_INT 3
58326: PUSH
58327: EMPTY
58328: LIST
58329: LIST
58330: PUSH
58331: EMPTY
58332: LIST
58333: LIST
58334: LIST
58335: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58336: LD_ADDR_VAR 0 14
58340: PUSH
58341: LD_INT 1
58343: PUSH
58344: LD_INT 3
58346: PUSH
58347: EMPTY
58348: LIST
58349: LIST
58350: PUSH
58351: LD_INT 0
58353: PUSH
58354: LD_INT 3
58356: PUSH
58357: EMPTY
58358: LIST
58359: LIST
58360: PUSH
58361: LD_INT 1
58363: NEG
58364: PUSH
58365: LD_INT 2
58367: PUSH
58368: EMPTY
58369: LIST
58370: LIST
58371: PUSH
58372: EMPTY
58373: LIST
58374: LIST
58375: LIST
58376: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58377: LD_ADDR_VAR 0 15
58381: PUSH
58382: LD_INT 2
58384: NEG
58385: PUSH
58386: LD_INT 1
58388: PUSH
58389: EMPTY
58390: LIST
58391: LIST
58392: PUSH
58393: LD_INT 3
58395: NEG
58396: PUSH
58397: LD_INT 0
58399: PUSH
58400: EMPTY
58401: LIST
58402: LIST
58403: PUSH
58404: LD_INT 3
58406: NEG
58407: PUSH
58408: LD_INT 1
58410: NEG
58411: PUSH
58412: EMPTY
58413: LIST
58414: LIST
58415: PUSH
58416: EMPTY
58417: LIST
58418: LIST
58419: LIST
58420: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58421: LD_ADDR_VAR 0 16
58425: PUSH
58426: LD_INT 2
58428: NEG
58429: PUSH
58430: LD_INT 3
58432: NEG
58433: PUSH
58434: EMPTY
58435: LIST
58436: LIST
58437: PUSH
58438: LD_INT 3
58440: NEG
58441: PUSH
58442: LD_INT 2
58444: NEG
58445: PUSH
58446: EMPTY
58447: LIST
58448: LIST
58449: PUSH
58450: LD_INT 3
58452: NEG
58453: PUSH
58454: LD_INT 3
58456: NEG
58457: PUSH
58458: EMPTY
58459: LIST
58460: LIST
58461: PUSH
58462: EMPTY
58463: LIST
58464: LIST
58465: LIST
58466: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58467: LD_ADDR_VAR 0 17
58471: PUSH
58472: LD_INT 1
58474: NEG
58475: PUSH
58476: LD_INT 3
58478: NEG
58479: PUSH
58480: EMPTY
58481: LIST
58482: LIST
58483: PUSH
58484: LD_INT 0
58486: PUSH
58487: LD_INT 3
58489: NEG
58490: PUSH
58491: EMPTY
58492: LIST
58493: LIST
58494: PUSH
58495: LD_INT 1
58497: PUSH
58498: LD_INT 2
58500: NEG
58501: PUSH
58502: EMPTY
58503: LIST
58504: LIST
58505: PUSH
58506: EMPTY
58507: LIST
58508: LIST
58509: LIST
58510: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58511: LD_ADDR_VAR 0 18
58515: PUSH
58516: LD_INT 2
58518: PUSH
58519: LD_INT 1
58521: NEG
58522: PUSH
58523: EMPTY
58524: LIST
58525: LIST
58526: PUSH
58527: LD_INT 3
58529: PUSH
58530: LD_INT 0
58532: PUSH
58533: EMPTY
58534: LIST
58535: LIST
58536: PUSH
58537: LD_INT 3
58539: PUSH
58540: LD_INT 1
58542: PUSH
58543: EMPTY
58544: LIST
58545: LIST
58546: PUSH
58547: EMPTY
58548: LIST
58549: LIST
58550: LIST
58551: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58552: LD_ADDR_VAR 0 19
58556: PUSH
58557: LD_INT 3
58559: PUSH
58560: LD_INT 2
58562: PUSH
58563: EMPTY
58564: LIST
58565: LIST
58566: PUSH
58567: LD_INT 3
58569: PUSH
58570: LD_INT 3
58572: PUSH
58573: EMPTY
58574: LIST
58575: LIST
58576: PUSH
58577: LD_INT 2
58579: PUSH
58580: LD_INT 3
58582: PUSH
58583: EMPTY
58584: LIST
58585: LIST
58586: PUSH
58587: EMPTY
58588: LIST
58589: LIST
58590: LIST
58591: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58592: LD_ADDR_VAR 0 20
58596: PUSH
58597: LD_INT 1
58599: PUSH
58600: LD_INT 3
58602: PUSH
58603: EMPTY
58604: LIST
58605: LIST
58606: PUSH
58607: LD_INT 0
58609: PUSH
58610: LD_INT 3
58612: PUSH
58613: EMPTY
58614: LIST
58615: LIST
58616: PUSH
58617: LD_INT 1
58619: NEG
58620: PUSH
58621: LD_INT 2
58623: PUSH
58624: EMPTY
58625: LIST
58626: LIST
58627: PUSH
58628: EMPTY
58629: LIST
58630: LIST
58631: LIST
58632: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58633: LD_ADDR_VAR 0 21
58637: PUSH
58638: LD_INT 2
58640: NEG
58641: PUSH
58642: LD_INT 1
58644: PUSH
58645: EMPTY
58646: LIST
58647: LIST
58648: PUSH
58649: LD_INT 3
58651: NEG
58652: PUSH
58653: LD_INT 0
58655: PUSH
58656: EMPTY
58657: LIST
58658: LIST
58659: PUSH
58660: LD_INT 3
58662: NEG
58663: PUSH
58664: LD_INT 1
58666: NEG
58667: PUSH
58668: EMPTY
58669: LIST
58670: LIST
58671: PUSH
58672: EMPTY
58673: LIST
58674: LIST
58675: LIST
58676: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58677: LD_ADDR_VAR 0 22
58681: PUSH
58682: LD_INT 2
58684: NEG
58685: PUSH
58686: LD_INT 3
58688: NEG
58689: PUSH
58690: EMPTY
58691: LIST
58692: LIST
58693: PUSH
58694: LD_INT 3
58696: NEG
58697: PUSH
58698: LD_INT 2
58700: NEG
58701: PUSH
58702: EMPTY
58703: LIST
58704: LIST
58705: PUSH
58706: LD_INT 3
58708: NEG
58709: PUSH
58710: LD_INT 3
58712: NEG
58713: PUSH
58714: EMPTY
58715: LIST
58716: LIST
58717: PUSH
58718: EMPTY
58719: LIST
58720: LIST
58721: LIST
58722: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
58723: LD_ADDR_VAR 0 23
58727: PUSH
58728: LD_INT 0
58730: PUSH
58731: LD_INT 3
58733: NEG
58734: PUSH
58735: EMPTY
58736: LIST
58737: LIST
58738: PUSH
58739: LD_INT 1
58741: NEG
58742: PUSH
58743: LD_INT 4
58745: NEG
58746: PUSH
58747: EMPTY
58748: LIST
58749: LIST
58750: PUSH
58751: LD_INT 1
58753: PUSH
58754: LD_INT 3
58756: NEG
58757: PUSH
58758: EMPTY
58759: LIST
58760: LIST
58761: PUSH
58762: EMPTY
58763: LIST
58764: LIST
58765: LIST
58766: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
58767: LD_ADDR_VAR 0 24
58771: PUSH
58772: LD_INT 3
58774: PUSH
58775: LD_INT 0
58777: PUSH
58778: EMPTY
58779: LIST
58780: LIST
58781: PUSH
58782: LD_INT 3
58784: PUSH
58785: LD_INT 1
58787: NEG
58788: PUSH
58789: EMPTY
58790: LIST
58791: LIST
58792: PUSH
58793: LD_INT 4
58795: PUSH
58796: LD_INT 1
58798: PUSH
58799: EMPTY
58800: LIST
58801: LIST
58802: PUSH
58803: EMPTY
58804: LIST
58805: LIST
58806: LIST
58807: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
58808: LD_ADDR_VAR 0 25
58812: PUSH
58813: LD_INT 3
58815: PUSH
58816: LD_INT 3
58818: PUSH
58819: EMPTY
58820: LIST
58821: LIST
58822: PUSH
58823: LD_INT 4
58825: PUSH
58826: LD_INT 3
58828: PUSH
58829: EMPTY
58830: LIST
58831: LIST
58832: PUSH
58833: LD_INT 3
58835: PUSH
58836: LD_INT 4
58838: PUSH
58839: EMPTY
58840: LIST
58841: LIST
58842: PUSH
58843: EMPTY
58844: LIST
58845: LIST
58846: LIST
58847: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
58848: LD_ADDR_VAR 0 26
58852: PUSH
58853: LD_INT 0
58855: PUSH
58856: LD_INT 3
58858: PUSH
58859: EMPTY
58860: LIST
58861: LIST
58862: PUSH
58863: LD_INT 1
58865: PUSH
58866: LD_INT 4
58868: PUSH
58869: EMPTY
58870: LIST
58871: LIST
58872: PUSH
58873: LD_INT 1
58875: NEG
58876: PUSH
58877: LD_INT 3
58879: PUSH
58880: EMPTY
58881: LIST
58882: LIST
58883: PUSH
58884: EMPTY
58885: LIST
58886: LIST
58887: LIST
58888: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
58889: LD_ADDR_VAR 0 27
58893: PUSH
58894: LD_INT 3
58896: NEG
58897: PUSH
58898: LD_INT 0
58900: PUSH
58901: EMPTY
58902: LIST
58903: LIST
58904: PUSH
58905: LD_INT 3
58907: NEG
58908: PUSH
58909: LD_INT 1
58911: PUSH
58912: EMPTY
58913: LIST
58914: LIST
58915: PUSH
58916: LD_INT 4
58918: NEG
58919: PUSH
58920: LD_INT 1
58922: NEG
58923: PUSH
58924: EMPTY
58925: LIST
58926: LIST
58927: PUSH
58928: EMPTY
58929: LIST
58930: LIST
58931: LIST
58932: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
58933: LD_ADDR_VAR 0 28
58937: PUSH
58938: LD_INT 3
58940: NEG
58941: PUSH
58942: LD_INT 3
58944: NEG
58945: PUSH
58946: EMPTY
58947: LIST
58948: LIST
58949: PUSH
58950: LD_INT 3
58952: NEG
58953: PUSH
58954: LD_INT 4
58956: NEG
58957: PUSH
58958: EMPTY
58959: LIST
58960: LIST
58961: PUSH
58962: LD_INT 4
58964: NEG
58965: PUSH
58966: LD_INT 3
58968: NEG
58969: PUSH
58970: EMPTY
58971: LIST
58972: LIST
58973: PUSH
58974: EMPTY
58975: LIST
58976: LIST
58977: LIST
58978: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
58979: LD_ADDR_VAR 0 29
58983: PUSH
58984: LD_INT 1
58986: NEG
58987: PUSH
58988: LD_INT 3
58990: NEG
58991: PUSH
58992: EMPTY
58993: LIST
58994: LIST
58995: PUSH
58996: LD_INT 0
58998: PUSH
58999: LD_INT 3
59001: NEG
59002: PUSH
59003: EMPTY
59004: LIST
59005: LIST
59006: PUSH
59007: LD_INT 1
59009: PUSH
59010: LD_INT 2
59012: NEG
59013: PUSH
59014: EMPTY
59015: LIST
59016: LIST
59017: PUSH
59018: LD_INT 1
59020: NEG
59021: PUSH
59022: LD_INT 4
59024: NEG
59025: PUSH
59026: EMPTY
59027: LIST
59028: LIST
59029: PUSH
59030: LD_INT 0
59032: PUSH
59033: LD_INT 4
59035: NEG
59036: PUSH
59037: EMPTY
59038: LIST
59039: LIST
59040: PUSH
59041: LD_INT 1
59043: PUSH
59044: LD_INT 3
59046: NEG
59047: PUSH
59048: EMPTY
59049: LIST
59050: LIST
59051: PUSH
59052: LD_INT 1
59054: NEG
59055: PUSH
59056: LD_INT 5
59058: NEG
59059: PUSH
59060: EMPTY
59061: LIST
59062: LIST
59063: PUSH
59064: LD_INT 0
59066: PUSH
59067: LD_INT 5
59069: NEG
59070: PUSH
59071: EMPTY
59072: LIST
59073: LIST
59074: PUSH
59075: LD_INT 1
59077: PUSH
59078: LD_INT 4
59080: NEG
59081: PUSH
59082: EMPTY
59083: LIST
59084: LIST
59085: PUSH
59086: LD_INT 1
59088: NEG
59089: PUSH
59090: LD_INT 6
59092: NEG
59093: PUSH
59094: EMPTY
59095: LIST
59096: LIST
59097: PUSH
59098: LD_INT 0
59100: PUSH
59101: LD_INT 6
59103: NEG
59104: PUSH
59105: EMPTY
59106: LIST
59107: LIST
59108: PUSH
59109: LD_INT 1
59111: PUSH
59112: LD_INT 5
59114: NEG
59115: PUSH
59116: EMPTY
59117: LIST
59118: LIST
59119: PUSH
59120: EMPTY
59121: LIST
59122: LIST
59123: LIST
59124: LIST
59125: LIST
59126: LIST
59127: LIST
59128: LIST
59129: LIST
59130: LIST
59131: LIST
59132: LIST
59133: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
59134: LD_ADDR_VAR 0 30
59138: PUSH
59139: LD_INT 2
59141: PUSH
59142: LD_INT 1
59144: NEG
59145: PUSH
59146: EMPTY
59147: LIST
59148: LIST
59149: PUSH
59150: LD_INT 3
59152: PUSH
59153: LD_INT 0
59155: PUSH
59156: EMPTY
59157: LIST
59158: LIST
59159: PUSH
59160: LD_INT 3
59162: PUSH
59163: LD_INT 1
59165: PUSH
59166: EMPTY
59167: LIST
59168: LIST
59169: PUSH
59170: LD_INT 3
59172: PUSH
59173: LD_INT 1
59175: NEG
59176: PUSH
59177: EMPTY
59178: LIST
59179: LIST
59180: PUSH
59181: LD_INT 4
59183: PUSH
59184: LD_INT 0
59186: PUSH
59187: EMPTY
59188: LIST
59189: LIST
59190: PUSH
59191: LD_INT 4
59193: PUSH
59194: LD_INT 1
59196: PUSH
59197: EMPTY
59198: LIST
59199: LIST
59200: PUSH
59201: LD_INT 4
59203: PUSH
59204: LD_INT 1
59206: NEG
59207: PUSH
59208: EMPTY
59209: LIST
59210: LIST
59211: PUSH
59212: LD_INT 5
59214: PUSH
59215: LD_INT 0
59217: PUSH
59218: EMPTY
59219: LIST
59220: LIST
59221: PUSH
59222: LD_INT 5
59224: PUSH
59225: LD_INT 1
59227: PUSH
59228: EMPTY
59229: LIST
59230: LIST
59231: PUSH
59232: LD_INT 5
59234: PUSH
59235: LD_INT 1
59237: NEG
59238: PUSH
59239: EMPTY
59240: LIST
59241: LIST
59242: PUSH
59243: LD_INT 6
59245: PUSH
59246: LD_INT 0
59248: PUSH
59249: EMPTY
59250: LIST
59251: LIST
59252: PUSH
59253: LD_INT 6
59255: PUSH
59256: LD_INT 1
59258: PUSH
59259: EMPTY
59260: LIST
59261: LIST
59262: PUSH
59263: EMPTY
59264: LIST
59265: LIST
59266: LIST
59267: LIST
59268: LIST
59269: LIST
59270: LIST
59271: LIST
59272: LIST
59273: LIST
59274: LIST
59275: LIST
59276: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
59277: LD_ADDR_VAR 0 31
59281: PUSH
59282: LD_INT 3
59284: PUSH
59285: LD_INT 2
59287: PUSH
59288: EMPTY
59289: LIST
59290: LIST
59291: PUSH
59292: LD_INT 3
59294: PUSH
59295: LD_INT 3
59297: PUSH
59298: EMPTY
59299: LIST
59300: LIST
59301: PUSH
59302: LD_INT 2
59304: PUSH
59305: LD_INT 3
59307: PUSH
59308: EMPTY
59309: LIST
59310: LIST
59311: PUSH
59312: LD_INT 4
59314: PUSH
59315: LD_INT 3
59317: PUSH
59318: EMPTY
59319: LIST
59320: LIST
59321: PUSH
59322: LD_INT 4
59324: PUSH
59325: LD_INT 4
59327: PUSH
59328: EMPTY
59329: LIST
59330: LIST
59331: PUSH
59332: LD_INT 3
59334: PUSH
59335: LD_INT 4
59337: PUSH
59338: EMPTY
59339: LIST
59340: LIST
59341: PUSH
59342: LD_INT 5
59344: PUSH
59345: LD_INT 4
59347: PUSH
59348: EMPTY
59349: LIST
59350: LIST
59351: PUSH
59352: LD_INT 5
59354: PUSH
59355: LD_INT 5
59357: PUSH
59358: EMPTY
59359: LIST
59360: LIST
59361: PUSH
59362: LD_INT 4
59364: PUSH
59365: LD_INT 5
59367: PUSH
59368: EMPTY
59369: LIST
59370: LIST
59371: PUSH
59372: LD_INT 6
59374: PUSH
59375: LD_INT 5
59377: PUSH
59378: EMPTY
59379: LIST
59380: LIST
59381: PUSH
59382: LD_INT 6
59384: PUSH
59385: LD_INT 6
59387: PUSH
59388: EMPTY
59389: LIST
59390: LIST
59391: PUSH
59392: LD_INT 5
59394: PUSH
59395: LD_INT 6
59397: PUSH
59398: EMPTY
59399: LIST
59400: LIST
59401: PUSH
59402: EMPTY
59403: LIST
59404: LIST
59405: LIST
59406: LIST
59407: LIST
59408: LIST
59409: LIST
59410: LIST
59411: LIST
59412: LIST
59413: LIST
59414: LIST
59415: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
59416: LD_ADDR_VAR 0 32
59420: PUSH
59421: LD_INT 1
59423: PUSH
59424: LD_INT 3
59426: PUSH
59427: EMPTY
59428: LIST
59429: LIST
59430: PUSH
59431: LD_INT 0
59433: PUSH
59434: LD_INT 3
59436: PUSH
59437: EMPTY
59438: LIST
59439: LIST
59440: PUSH
59441: LD_INT 1
59443: NEG
59444: PUSH
59445: LD_INT 2
59447: PUSH
59448: EMPTY
59449: LIST
59450: LIST
59451: PUSH
59452: LD_INT 1
59454: PUSH
59455: LD_INT 4
59457: PUSH
59458: EMPTY
59459: LIST
59460: LIST
59461: PUSH
59462: LD_INT 0
59464: PUSH
59465: LD_INT 4
59467: PUSH
59468: EMPTY
59469: LIST
59470: LIST
59471: PUSH
59472: LD_INT 1
59474: NEG
59475: PUSH
59476: LD_INT 3
59478: PUSH
59479: EMPTY
59480: LIST
59481: LIST
59482: PUSH
59483: LD_INT 1
59485: PUSH
59486: LD_INT 5
59488: PUSH
59489: EMPTY
59490: LIST
59491: LIST
59492: PUSH
59493: LD_INT 0
59495: PUSH
59496: LD_INT 5
59498: PUSH
59499: EMPTY
59500: LIST
59501: LIST
59502: PUSH
59503: LD_INT 1
59505: NEG
59506: PUSH
59507: LD_INT 4
59509: PUSH
59510: EMPTY
59511: LIST
59512: LIST
59513: PUSH
59514: LD_INT 1
59516: PUSH
59517: LD_INT 6
59519: PUSH
59520: EMPTY
59521: LIST
59522: LIST
59523: PUSH
59524: LD_INT 0
59526: PUSH
59527: LD_INT 6
59529: PUSH
59530: EMPTY
59531: LIST
59532: LIST
59533: PUSH
59534: LD_INT 1
59536: NEG
59537: PUSH
59538: LD_INT 5
59540: PUSH
59541: EMPTY
59542: LIST
59543: LIST
59544: PUSH
59545: EMPTY
59546: LIST
59547: LIST
59548: LIST
59549: LIST
59550: LIST
59551: LIST
59552: LIST
59553: LIST
59554: LIST
59555: LIST
59556: LIST
59557: LIST
59558: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
59559: LD_ADDR_VAR 0 33
59563: PUSH
59564: LD_INT 2
59566: NEG
59567: PUSH
59568: LD_INT 1
59570: PUSH
59571: EMPTY
59572: LIST
59573: LIST
59574: PUSH
59575: LD_INT 3
59577: NEG
59578: PUSH
59579: LD_INT 0
59581: PUSH
59582: EMPTY
59583: LIST
59584: LIST
59585: PUSH
59586: LD_INT 3
59588: NEG
59589: PUSH
59590: LD_INT 1
59592: NEG
59593: PUSH
59594: EMPTY
59595: LIST
59596: LIST
59597: PUSH
59598: LD_INT 3
59600: NEG
59601: PUSH
59602: LD_INT 1
59604: PUSH
59605: EMPTY
59606: LIST
59607: LIST
59608: PUSH
59609: LD_INT 4
59611: NEG
59612: PUSH
59613: LD_INT 0
59615: PUSH
59616: EMPTY
59617: LIST
59618: LIST
59619: PUSH
59620: LD_INT 4
59622: NEG
59623: PUSH
59624: LD_INT 1
59626: NEG
59627: PUSH
59628: EMPTY
59629: LIST
59630: LIST
59631: PUSH
59632: LD_INT 4
59634: NEG
59635: PUSH
59636: LD_INT 1
59638: PUSH
59639: EMPTY
59640: LIST
59641: LIST
59642: PUSH
59643: LD_INT 5
59645: NEG
59646: PUSH
59647: LD_INT 0
59649: PUSH
59650: EMPTY
59651: LIST
59652: LIST
59653: PUSH
59654: LD_INT 5
59656: NEG
59657: PUSH
59658: LD_INT 1
59660: NEG
59661: PUSH
59662: EMPTY
59663: LIST
59664: LIST
59665: PUSH
59666: LD_INT 5
59668: NEG
59669: PUSH
59670: LD_INT 1
59672: PUSH
59673: EMPTY
59674: LIST
59675: LIST
59676: PUSH
59677: LD_INT 6
59679: NEG
59680: PUSH
59681: LD_INT 0
59683: PUSH
59684: EMPTY
59685: LIST
59686: LIST
59687: PUSH
59688: LD_INT 6
59690: NEG
59691: PUSH
59692: LD_INT 1
59694: NEG
59695: PUSH
59696: EMPTY
59697: LIST
59698: LIST
59699: PUSH
59700: EMPTY
59701: LIST
59702: LIST
59703: LIST
59704: LIST
59705: LIST
59706: LIST
59707: LIST
59708: LIST
59709: LIST
59710: LIST
59711: LIST
59712: LIST
59713: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
59714: LD_ADDR_VAR 0 34
59718: PUSH
59719: LD_INT 2
59721: NEG
59722: PUSH
59723: LD_INT 3
59725: NEG
59726: PUSH
59727: EMPTY
59728: LIST
59729: LIST
59730: PUSH
59731: LD_INT 3
59733: NEG
59734: PUSH
59735: LD_INT 2
59737: NEG
59738: PUSH
59739: EMPTY
59740: LIST
59741: LIST
59742: PUSH
59743: LD_INT 3
59745: NEG
59746: PUSH
59747: LD_INT 3
59749: NEG
59750: PUSH
59751: EMPTY
59752: LIST
59753: LIST
59754: PUSH
59755: LD_INT 3
59757: NEG
59758: PUSH
59759: LD_INT 4
59761: NEG
59762: PUSH
59763: EMPTY
59764: LIST
59765: LIST
59766: PUSH
59767: LD_INT 4
59769: NEG
59770: PUSH
59771: LD_INT 3
59773: NEG
59774: PUSH
59775: EMPTY
59776: LIST
59777: LIST
59778: PUSH
59779: LD_INT 4
59781: NEG
59782: PUSH
59783: LD_INT 4
59785: NEG
59786: PUSH
59787: EMPTY
59788: LIST
59789: LIST
59790: PUSH
59791: LD_INT 4
59793: NEG
59794: PUSH
59795: LD_INT 5
59797: NEG
59798: PUSH
59799: EMPTY
59800: LIST
59801: LIST
59802: PUSH
59803: LD_INT 5
59805: NEG
59806: PUSH
59807: LD_INT 4
59809: NEG
59810: PUSH
59811: EMPTY
59812: LIST
59813: LIST
59814: PUSH
59815: LD_INT 5
59817: NEG
59818: PUSH
59819: LD_INT 5
59821: NEG
59822: PUSH
59823: EMPTY
59824: LIST
59825: LIST
59826: PUSH
59827: LD_INT 5
59829: NEG
59830: PUSH
59831: LD_INT 6
59833: NEG
59834: PUSH
59835: EMPTY
59836: LIST
59837: LIST
59838: PUSH
59839: LD_INT 6
59841: NEG
59842: PUSH
59843: LD_INT 5
59845: NEG
59846: PUSH
59847: EMPTY
59848: LIST
59849: LIST
59850: PUSH
59851: LD_INT 6
59853: NEG
59854: PUSH
59855: LD_INT 6
59857: NEG
59858: PUSH
59859: EMPTY
59860: LIST
59861: LIST
59862: PUSH
59863: EMPTY
59864: LIST
59865: LIST
59866: LIST
59867: LIST
59868: LIST
59869: LIST
59870: LIST
59871: LIST
59872: LIST
59873: LIST
59874: LIST
59875: LIST
59876: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
59877: LD_ADDR_VAR 0 41
59881: PUSH
59882: LD_INT 0
59884: PUSH
59885: LD_INT 2
59887: NEG
59888: PUSH
59889: EMPTY
59890: LIST
59891: LIST
59892: PUSH
59893: LD_INT 1
59895: NEG
59896: PUSH
59897: LD_INT 3
59899: NEG
59900: PUSH
59901: EMPTY
59902: LIST
59903: LIST
59904: PUSH
59905: LD_INT 1
59907: PUSH
59908: LD_INT 2
59910: NEG
59911: PUSH
59912: EMPTY
59913: LIST
59914: LIST
59915: PUSH
59916: EMPTY
59917: LIST
59918: LIST
59919: LIST
59920: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
59921: LD_ADDR_VAR 0 42
59925: PUSH
59926: LD_INT 2
59928: PUSH
59929: LD_INT 0
59931: PUSH
59932: EMPTY
59933: LIST
59934: LIST
59935: PUSH
59936: LD_INT 2
59938: PUSH
59939: LD_INT 1
59941: NEG
59942: PUSH
59943: EMPTY
59944: LIST
59945: LIST
59946: PUSH
59947: LD_INT 3
59949: PUSH
59950: LD_INT 1
59952: PUSH
59953: EMPTY
59954: LIST
59955: LIST
59956: PUSH
59957: EMPTY
59958: LIST
59959: LIST
59960: LIST
59961: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
59962: LD_ADDR_VAR 0 43
59966: PUSH
59967: LD_INT 2
59969: PUSH
59970: LD_INT 2
59972: PUSH
59973: EMPTY
59974: LIST
59975: LIST
59976: PUSH
59977: LD_INT 3
59979: PUSH
59980: LD_INT 2
59982: PUSH
59983: EMPTY
59984: LIST
59985: LIST
59986: PUSH
59987: LD_INT 2
59989: PUSH
59990: LD_INT 3
59992: PUSH
59993: EMPTY
59994: LIST
59995: LIST
59996: PUSH
59997: EMPTY
59998: LIST
59999: LIST
60000: LIST
60001: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
60002: LD_ADDR_VAR 0 44
60006: PUSH
60007: LD_INT 0
60009: PUSH
60010: LD_INT 2
60012: PUSH
60013: EMPTY
60014: LIST
60015: LIST
60016: PUSH
60017: LD_INT 1
60019: PUSH
60020: LD_INT 3
60022: PUSH
60023: EMPTY
60024: LIST
60025: LIST
60026: PUSH
60027: LD_INT 1
60029: NEG
60030: PUSH
60031: LD_INT 2
60033: PUSH
60034: EMPTY
60035: LIST
60036: LIST
60037: PUSH
60038: EMPTY
60039: LIST
60040: LIST
60041: LIST
60042: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60043: LD_ADDR_VAR 0 45
60047: PUSH
60048: LD_INT 2
60050: NEG
60051: PUSH
60052: LD_INT 0
60054: PUSH
60055: EMPTY
60056: LIST
60057: LIST
60058: PUSH
60059: LD_INT 2
60061: NEG
60062: PUSH
60063: LD_INT 1
60065: PUSH
60066: EMPTY
60067: LIST
60068: LIST
60069: PUSH
60070: LD_INT 3
60072: NEG
60073: PUSH
60074: LD_INT 1
60076: NEG
60077: PUSH
60078: EMPTY
60079: LIST
60080: LIST
60081: PUSH
60082: EMPTY
60083: LIST
60084: LIST
60085: LIST
60086: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
60087: LD_ADDR_VAR 0 46
60091: PUSH
60092: LD_INT 2
60094: NEG
60095: PUSH
60096: LD_INT 2
60098: NEG
60099: PUSH
60100: EMPTY
60101: LIST
60102: LIST
60103: PUSH
60104: LD_INT 2
60106: NEG
60107: PUSH
60108: LD_INT 3
60110: NEG
60111: PUSH
60112: EMPTY
60113: LIST
60114: LIST
60115: PUSH
60116: LD_INT 3
60118: NEG
60119: PUSH
60120: LD_INT 2
60122: NEG
60123: PUSH
60124: EMPTY
60125: LIST
60126: LIST
60127: PUSH
60128: EMPTY
60129: LIST
60130: LIST
60131: LIST
60132: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
60133: LD_ADDR_VAR 0 47
60137: PUSH
60138: LD_INT 2
60140: NEG
60141: PUSH
60142: LD_INT 3
60144: NEG
60145: PUSH
60146: EMPTY
60147: LIST
60148: LIST
60149: PUSH
60150: LD_INT 1
60152: NEG
60153: PUSH
60154: LD_INT 3
60156: NEG
60157: PUSH
60158: EMPTY
60159: LIST
60160: LIST
60161: PUSH
60162: EMPTY
60163: LIST
60164: LIST
60165: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
60166: LD_ADDR_VAR 0 48
60170: PUSH
60171: LD_INT 1
60173: PUSH
60174: LD_INT 2
60176: NEG
60177: PUSH
60178: EMPTY
60179: LIST
60180: LIST
60181: PUSH
60182: LD_INT 2
60184: PUSH
60185: LD_INT 1
60187: NEG
60188: PUSH
60189: EMPTY
60190: LIST
60191: LIST
60192: PUSH
60193: EMPTY
60194: LIST
60195: LIST
60196: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
60197: LD_ADDR_VAR 0 49
60201: PUSH
60202: LD_INT 3
60204: PUSH
60205: LD_INT 1
60207: PUSH
60208: EMPTY
60209: LIST
60210: LIST
60211: PUSH
60212: LD_INT 3
60214: PUSH
60215: LD_INT 2
60217: PUSH
60218: EMPTY
60219: LIST
60220: LIST
60221: PUSH
60222: EMPTY
60223: LIST
60224: LIST
60225: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
60226: LD_ADDR_VAR 0 50
60230: PUSH
60231: LD_INT 2
60233: PUSH
60234: LD_INT 3
60236: PUSH
60237: EMPTY
60238: LIST
60239: LIST
60240: PUSH
60241: LD_INT 1
60243: PUSH
60244: LD_INT 3
60246: PUSH
60247: EMPTY
60248: LIST
60249: LIST
60250: PUSH
60251: EMPTY
60252: LIST
60253: LIST
60254: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
60255: LD_ADDR_VAR 0 51
60259: PUSH
60260: LD_INT 1
60262: NEG
60263: PUSH
60264: LD_INT 2
60266: PUSH
60267: EMPTY
60268: LIST
60269: LIST
60270: PUSH
60271: LD_INT 2
60273: NEG
60274: PUSH
60275: LD_INT 1
60277: PUSH
60278: EMPTY
60279: LIST
60280: LIST
60281: PUSH
60282: EMPTY
60283: LIST
60284: LIST
60285: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
60286: LD_ADDR_VAR 0 52
60290: PUSH
60291: LD_INT 3
60293: NEG
60294: PUSH
60295: LD_INT 1
60297: NEG
60298: PUSH
60299: EMPTY
60300: LIST
60301: LIST
60302: PUSH
60303: LD_INT 3
60305: NEG
60306: PUSH
60307: LD_INT 2
60309: NEG
60310: PUSH
60311: EMPTY
60312: LIST
60313: LIST
60314: PUSH
60315: EMPTY
60316: LIST
60317: LIST
60318: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
60319: LD_ADDR_VAR 0 53
60323: PUSH
60324: LD_INT 1
60326: NEG
60327: PUSH
60328: LD_INT 3
60330: NEG
60331: PUSH
60332: EMPTY
60333: LIST
60334: LIST
60335: PUSH
60336: LD_INT 0
60338: PUSH
60339: LD_INT 3
60341: NEG
60342: PUSH
60343: EMPTY
60344: LIST
60345: LIST
60346: PUSH
60347: LD_INT 1
60349: PUSH
60350: LD_INT 2
60352: NEG
60353: PUSH
60354: EMPTY
60355: LIST
60356: LIST
60357: PUSH
60358: EMPTY
60359: LIST
60360: LIST
60361: LIST
60362: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
60363: LD_ADDR_VAR 0 54
60367: PUSH
60368: LD_INT 2
60370: PUSH
60371: LD_INT 1
60373: NEG
60374: PUSH
60375: EMPTY
60376: LIST
60377: LIST
60378: PUSH
60379: LD_INT 3
60381: PUSH
60382: LD_INT 0
60384: PUSH
60385: EMPTY
60386: LIST
60387: LIST
60388: PUSH
60389: LD_INT 3
60391: PUSH
60392: LD_INT 1
60394: PUSH
60395: EMPTY
60396: LIST
60397: LIST
60398: PUSH
60399: EMPTY
60400: LIST
60401: LIST
60402: LIST
60403: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
60404: LD_ADDR_VAR 0 55
60408: PUSH
60409: LD_INT 3
60411: PUSH
60412: LD_INT 2
60414: PUSH
60415: EMPTY
60416: LIST
60417: LIST
60418: PUSH
60419: LD_INT 3
60421: PUSH
60422: LD_INT 3
60424: PUSH
60425: EMPTY
60426: LIST
60427: LIST
60428: PUSH
60429: LD_INT 2
60431: PUSH
60432: LD_INT 3
60434: PUSH
60435: EMPTY
60436: LIST
60437: LIST
60438: PUSH
60439: EMPTY
60440: LIST
60441: LIST
60442: LIST
60443: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
60444: LD_ADDR_VAR 0 56
60448: PUSH
60449: LD_INT 1
60451: PUSH
60452: LD_INT 3
60454: PUSH
60455: EMPTY
60456: LIST
60457: LIST
60458: PUSH
60459: LD_INT 0
60461: PUSH
60462: LD_INT 3
60464: PUSH
60465: EMPTY
60466: LIST
60467: LIST
60468: PUSH
60469: LD_INT 1
60471: NEG
60472: PUSH
60473: LD_INT 2
60475: PUSH
60476: EMPTY
60477: LIST
60478: LIST
60479: PUSH
60480: EMPTY
60481: LIST
60482: LIST
60483: LIST
60484: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60485: LD_ADDR_VAR 0 57
60489: PUSH
60490: LD_INT 2
60492: NEG
60493: PUSH
60494: LD_INT 1
60496: PUSH
60497: EMPTY
60498: LIST
60499: LIST
60500: PUSH
60501: LD_INT 3
60503: NEG
60504: PUSH
60505: LD_INT 0
60507: PUSH
60508: EMPTY
60509: LIST
60510: LIST
60511: PUSH
60512: LD_INT 3
60514: NEG
60515: PUSH
60516: LD_INT 1
60518: NEG
60519: PUSH
60520: EMPTY
60521: LIST
60522: LIST
60523: PUSH
60524: EMPTY
60525: LIST
60526: LIST
60527: LIST
60528: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60529: LD_ADDR_VAR 0 58
60533: PUSH
60534: LD_INT 2
60536: NEG
60537: PUSH
60538: LD_INT 3
60540: NEG
60541: PUSH
60542: EMPTY
60543: LIST
60544: LIST
60545: PUSH
60546: LD_INT 3
60548: NEG
60549: PUSH
60550: LD_INT 2
60552: NEG
60553: PUSH
60554: EMPTY
60555: LIST
60556: LIST
60557: PUSH
60558: LD_INT 3
60560: NEG
60561: PUSH
60562: LD_INT 3
60564: NEG
60565: PUSH
60566: EMPTY
60567: LIST
60568: LIST
60569: PUSH
60570: EMPTY
60571: LIST
60572: LIST
60573: LIST
60574: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
60575: LD_ADDR_VAR 0 59
60579: PUSH
60580: LD_INT 1
60582: NEG
60583: PUSH
60584: LD_INT 2
60586: NEG
60587: PUSH
60588: EMPTY
60589: LIST
60590: LIST
60591: PUSH
60592: LD_INT 0
60594: PUSH
60595: LD_INT 2
60597: NEG
60598: PUSH
60599: EMPTY
60600: LIST
60601: LIST
60602: PUSH
60603: LD_INT 1
60605: PUSH
60606: LD_INT 1
60608: NEG
60609: PUSH
60610: EMPTY
60611: LIST
60612: LIST
60613: PUSH
60614: EMPTY
60615: LIST
60616: LIST
60617: LIST
60618: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
60619: LD_ADDR_VAR 0 60
60623: PUSH
60624: LD_INT 1
60626: PUSH
60627: LD_INT 1
60629: NEG
60630: PUSH
60631: EMPTY
60632: LIST
60633: LIST
60634: PUSH
60635: LD_INT 2
60637: PUSH
60638: LD_INT 0
60640: PUSH
60641: EMPTY
60642: LIST
60643: LIST
60644: PUSH
60645: LD_INT 2
60647: PUSH
60648: LD_INT 1
60650: PUSH
60651: EMPTY
60652: LIST
60653: LIST
60654: PUSH
60655: EMPTY
60656: LIST
60657: LIST
60658: LIST
60659: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
60660: LD_ADDR_VAR 0 61
60664: PUSH
60665: LD_INT 2
60667: PUSH
60668: LD_INT 1
60670: PUSH
60671: EMPTY
60672: LIST
60673: LIST
60674: PUSH
60675: LD_INT 2
60677: PUSH
60678: LD_INT 2
60680: PUSH
60681: EMPTY
60682: LIST
60683: LIST
60684: PUSH
60685: LD_INT 1
60687: PUSH
60688: LD_INT 2
60690: PUSH
60691: EMPTY
60692: LIST
60693: LIST
60694: PUSH
60695: EMPTY
60696: LIST
60697: LIST
60698: LIST
60699: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
60700: LD_ADDR_VAR 0 62
60704: PUSH
60705: LD_INT 1
60707: PUSH
60708: LD_INT 2
60710: PUSH
60711: EMPTY
60712: LIST
60713: LIST
60714: PUSH
60715: LD_INT 0
60717: PUSH
60718: LD_INT 2
60720: PUSH
60721: EMPTY
60722: LIST
60723: LIST
60724: PUSH
60725: LD_INT 1
60727: NEG
60728: PUSH
60729: LD_INT 1
60731: PUSH
60732: EMPTY
60733: LIST
60734: LIST
60735: PUSH
60736: EMPTY
60737: LIST
60738: LIST
60739: LIST
60740: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
60741: LD_ADDR_VAR 0 63
60745: PUSH
60746: LD_INT 1
60748: NEG
60749: PUSH
60750: LD_INT 1
60752: PUSH
60753: EMPTY
60754: LIST
60755: LIST
60756: PUSH
60757: LD_INT 2
60759: NEG
60760: PUSH
60761: LD_INT 0
60763: PUSH
60764: EMPTY
60765: LIST
60766: LIST
60767: PUSH
60768: LD_INT 2
60770: NEG
60771: PUSH
60772: LD_INT 1
60774: NEG
60775: PUSH
60776: EMPTY
60777: LIST
60778: LIST
60779: PUSH
60780: EMPTY
60781: LIST
60782: LIST
60783: LIST
60784: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60785: LD_ADDR_VAR 0 64
60789: PUSH
60790: LD_INT 1
60792: NEG
60793: PUSH
60794: LD_INT 2
60796: NEG
60797: PUSH
60798: EMPTY
60799: LIST
60800: LIST
60801: PUSH
60802: LD_INT 2
60804: NEG
60805: PUSH
60806: LD_INT 1
60808: NEG
60809: PUSH
60810: EMPTY
60811: LIST
60812: LIST
60813: PUSH
60814: LD_INT 2
60816: NEG
60817: PUSH
60818: LD_INT 2
60820: NEG
60821: PUSH
60822: EMPTY
60823: LIST
60824: LIST
60825: PUSH
60826: EMPTY
60827: LIST
60828: LIST
60829: LIST
60830: ST_TO_ADDR
// end ; 2 :
60831: GO 64097
60833: LD_INT 2
60835: DOUBLE
60836: EQUAL
60837: IFTRUE 60841
60839: GO 64096
60841: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
60842: LD_ADDR_VAR 0 29
60846: PUSH
60847: LD_INT 4
60849: PUSH
60850: LD_INT 0
60852: PUSH
60853: EMPTY
60854: LIST
60855: LIST
60856: PUSH
60857: LD_INT 4
60859: PUSH
60860: LD_INT 1
60862: NEG
60863: PUSH
60864: EMPTY
60865: LIST
60866: LIST
60867: PUSH
60868: LD_INT 5
60870: PUSH
60871: LD_INT 0
60873: PUSH
60874: EMPTY
60875: LIST
60876: LIST
60877: PUSH
60878: LD_INT 5
60880: PUSH
60881: LD_INT 1
60883: PUSH
60884: EMPTY
60885: LIST
60886: LIST
60887: PUSH
60888: LD_INT 4
60890: PUSH
60891: LD_INT 1
60893: PUSH
60894: EMPTY
60895: LIST
60896: LIST
60897: PUSH
60898: LD_INT 3
60900: PUSH
60901: LD_INT 0
60903: PUSH
60904: EMPTY
60905: LIST
60906: LIST
60907: PUSH
60908: LD_INT 3
60910: PUSH
60911: LD_INT 1
60913: NEG
60914: PUSH
60915: EMPTY
60916: LIST
60917: LIST
60918: PUSH
60919: LD_INT 3
60921: PUSH
60922: LD_INT 2
60924: NEG
60925: PUSH
60926: EMPTY
60927: LIST
60928: LIST
60929: PUSH
60930: LD_INT 5
60932: PUSH
60933: LD_INT 2
60935: PUSH
60936: EMPTY
60937: LIST
60938: LIST
60939: PUSH
60940: LD_INT 3
60942: PUSH
60943: LD_INT 3
60945: PUSH
60946: EMPTY
60947: LIST
60948: LIST
60949: PUSH
60950: LD_INT 3
60952: PUSH
60953: LD_INT 2
60955: PUSH
60956: EMPTY
60957: LIST
60958: LIST
60959: PUSH
60960: LD_INT 4
60962: PUSH
60963: LD_INT 3
60965: PUSH
60966: EMPTY
60967: LIST
60968: LIST
60969: PUSH
60970: LD_INT 4
60972: PUSH
60973: LD_INT 4
60975: PUSH
60976: EMPTY
60977: LIST
60978: LIST
60979: PUSH
60980: LD_INT 3
60982: PUSH
60983: LD_INT 4
60985: PUSH
60986: EMPTY
60987: LIST
60988: LIST
60989: PUSH
60990: LD_INT 2
60992: PUSH
60993: LD_INT 3
60995: PUSH
60996: EMPTY
60997: LIST
60998: LIST
60999: PUSH
61000: LD_INT 2
61002: PUSH
61003: LD_INT 2
61005: PUSH
61006: EMPTY
61007: LIST
61008: LIST
61009: PUSH
61010: LD_INT 4
61012: PUSH
61013: LD_INT 2
61015: PUSH
61016: EMPTY
61017: LIST
61018: LIST
61019: PUSH
61020: LD_INT 2
61022: PUSH
61023: LD_INT 4
61025: PUSH
61026: EMPTY
61027: LIST
61028: LIST
61029: PUSH
61030: LD_INT 0
61032: PUSH
61033: LD_INT 4
61035: PUSH
61036: EMPTY
61037: LIST
61038: LIST
61039: PUSH
61040: LD_INT 0
61042: PUSH
61043: LD_INT 3
61045: PUSH
61046: EMPTY
61047: LIST
61048: LIST
61049: PUSH
61050: LD_INT 1
61052: PUSH
61053: LD_INT 4
61055: PUSH
61056: EMPTY
61057: LIST
61058: LIST
61059: PUSH
61060: LD_INT 1
61062: PUSH
61063: LD_INT 5
61065: PUSH
61066: EMPTY
61067: LIST
61068: LIST
61069: PUSH
61070: LD_INT 0
61072: PUSH
61073: LD_INT 5
61075: PUSH
61076: EMPTY
61077: LIST
61078: LIST
61079: PUSH
61080: LD_INT 1
61082: NEG
61083: PUSH
61084: LD_INT 4
61086: PUSH
61087: EMPTY
61088: LIST
61089: LIST
61090: PUSH
61091: LD_INT 1
61093: NEG
61094: PUSH
61095: LD_INT 3
61097: PUSH
61098: EMPTY
61099: LIST
61100: LIST
61101: PUSH
61102: LD_INT 2
61104: PUSH
61105: LD_INT 5
61107: PUSH
61108: EMPTY
61109: LIST
61110: LIST
61111: PUSH
61112: LD_INT 2
61114: NEG
61115: PUSH
61116: LD_INT 3
61118: PUSH
61119: EMPTY
61120: LIST
61121: LIST
61122: PUSH
61123: LD_INT 3
61125: NEG
61126: PUSH
61127: LD_INT 0
61129: PUSH
61130: EMPTY
61131: LIST
61132: LIST
61133: PUSH
61134: LD_INT 3
61136: NEG
61137: PUSH
61138: LD_INT 1
61140: NEG
61141: PUSH
61142: EMPTY
61143: LIST
61144: LIST
61145: PUSH
61146: LD_INT 2
61148: NEG
61149: PUSH
61150: LD_INT 0
61152: PUSH
61153: EMPTY
61154: LIST
61155: LIST
61156: PUSH
61157: LD_INT 2
61159: NEG
61160: PUSH
61161: LD_INT 1
61163: PUSH
61164: EMPTY
61165: LIST
61166: LIST
61167: PUSH
61168: LD_INT 3
61170: NEG
61171: PUSH
61172: LD_INT 1
61174: PUSH
61175: EMPTY
61176: LIST
61177: LIST
61178: PUSH
61179: LD_INT 4
61181: NEG
61182: PUSH
61183: LD_INT 0
61185: PUSH
61186: EMPTY
61187: LIST
61188: LIST
61189: PUSH
61190: LD_INT 4
61192: NEG
61193: PUSH
61194: LD_INT 1
61196: NEG
61197: PUSH
61198: EMPTY
61199: LIST
61200: LIST
61201: PUSH
61202: LD_INT 4
61204: NEG
61205: PUSH
61206: LD_INT 2
61208: NEG
61209: PUSH
61210: EMPTY
61211: LIST
61212: LIST
61213: PUSH
61214: LD_INT 2
61216: NEG
61217: PUSH
61218: LD_INT 2
61220: PUSH
61221: EMPTY
61222: LIST
61223: LIST
61224: PUSH
61225: LD_INT 4
61227: NEG
61228: PUSH
61229: LD_INT 4
61231: NEG
61232: PUSH
61233: EMPTY
61234: LIST
61235: LIST
61236: PUSH
61237: LD_INT 4
61239: NEG
61240: PUSH
61241: LD_INT 5
61243: NEG
61244: PUSH
61245: EMPTY
61246: LIST
61247: LIST
61248: PUSH
61249: LD_INT 3
61251: NEG
61252: PUSH
61253: LD_INT 4
61255: NEG
61256: PUSH
61257: EMPTY
61258: LIST
61259: LIST
61260: PUSH
61261: LD_INT 3
61263: NEG
61264: PUSH
61265: LD_INT 3
61267: NEG
61268: PUSH
61269: EMPTY
61270: LIST
61271: LIST
61272: PUSH
61273: LD_INT 4
61275: NEG
61276: PUSH
61277: LD_INT 3
61279: NEG
61280: PUSH
61281: EMPTY
61282: LIST
61283: LIST
61284: PUSH
61285: LD_INT 5
61287: NEG
61288: PUSH
61289: LD_INT 4
61291: NEG
61292: PUSH
61293: EMPTY
61294: LIST
61295: LIST
61296: PUSH
61297: LD_INT 5
61299: NEG
61300: PUSH
61301: LD_INT 5
61303: NEG
61304: PUSH
61305: EMPTY
61306: LIST
61307: LIST
61308: PUSH
61309: LD_INT 3
61311: NEG
61312: PUSH
61313: LD_INT 5
61315: NEG
61316: PUSH
61317: EMPTY
61318: LIST
61319: LIST
61320: PUSH
61321: LD_INT 5
61323: NEG
61324: PUSH
61325: LD_INT 3
61327: NEG
61328: PUSH
61329: EMPTY
61330: LIST
61331: LIST
61332: PUSH
61333: EMPTY
61334: LIST
61335: LIST
61336: LIST
61337: LIST
61338: LIST
61339: LIST
61340: LIST
61341: LIST
61342: LIST
61343: LIST
61344: LIST
61345: LIST
61346: LIST
61347: LIST
61348: LIST
61349: LIST
61350: LIST
61351: LIST
61352: LIST
61353: LIST
61354: LIST
61355: LIST
61356: LIST
61357: LIST
61358: LIST
61359: LIST
61360: LIST
61361: LIST
61362: LIST
61363: LIST
61364: LIST
61365: LIST
61366: LIST
61367: LIST
61368: LIST
61369: LIST
61370: LIST
61371: LIST
61372: LIST
61373: LIST
61374: LIST
61375: LIST
61376: LIST
61377: LIST
61378: LIST
61379: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
61380: LD_ADDR_VAR 0 30
61384: PUSH
61385: LD_INT 4
61387: PUSH
61388: LD_INT 4
61390: PUSH
61391: EMPTY
61392: LIST
61393: LIST
61394: PUSH
61395: LD_INT 4
61397: PUSH
61398: LD_INT 3
61400: PUSH
61401: EMPTY
61402: LIST
61403: LIST
61404: PUSH
61405: LD_INT 5
61407: PUSH
61408: LD_INT 4
61410: PUSH
61411: EMPTY
61412: LIST
61413: LIST
61414: PUSH
61415: LD_INT 5
61417: PUSH
61418: LD_INT 5
61420: PUSH
61421: EMPTY
61422: LIST
61423: LIST
61424: PUSH
61425: LD_INT 4
61427: PUSH
61428: LD_INT 5
61430: PUSH
61431: EMPTY
61432: LIST
61433: LIST
61434: PUSH
61435: LD_INT 3
61437: PUSH
61438: LD_INT 4
61440: PUSH
61441: EMPTY
61442: LIST
61443: LIST
61444: PUSH
61445: LD_INT 3
61447: PUSH
61448: LD_INT 3
61450: PUSH
61451: EMPTY
61452: LIST
61453: LIST
61454: PUSH
61455: LD_INT 5
61457: PUSH
61458: LD_INT 3
61460: PUSH
61461: EMPTY
61462: LIST
61463: LIST
61464: PUSH
61465: LD_INT 3
61467: PUSH
61468: LD_INT 5
61470: PUSH
61471: EMPTY
61472: LIST
61473: LIST
61474: PUSH
61475: LD_INT 0
61477: PUSH
61478: LD_INT 3
61480: PUSH
61481: EMPTY
61482: LIST
61483: LIST
61484: PUSH
61485: LD_INT 0
61487: PUSH
61488: LD_INT 2
61490: PUSH
61491: EMPTY
61492: LIST
61493: LIST
61494: PUSH
61495: LD_INT 1
61497: PUSH
61498: LD_INT 3
61500: PUSH
61501: EMPTY
61502: LIST
61503: LIST
61504: PUSH
61505: LD_INT 1
61507: PUSH
61508: LD_INT 4
61510: PUSH
61511: EMPTY
61512: LIST
61513: LIST
61514: PUSH
61515: LD_INT 0
61517: PUSH
61518: LD_INT 4
61520: PUSH
61521: EMPTY
61522: LIST
61523: LIST
61524: PUSH
61525: LD_INT 1
61527: NEG
61528: PUSH
61529: LD_INT 3
61531: PUSH
61532: EMPTY
61533: LIST
61534: LIST
61535: PUSH
61536: LD_INT 1
61538: NEG
61539: PUSH
61540: LD_INT 2
61542: PUSH
61543: EMPTY
61544: LIST
61545: LIST
61546: PUSH
61547: LD_INT 2
61549: PUSH
61550: LD_INT 4
61552: PUSH
61553: EMPTY
61554: LIST
61555: LIST
61556: PUSH
61557: LD_INT 2
61559: NEG
61560: PUSH
61561: LD_INT 2
61563: PUSH
61564: EMPTY
61565: LIST
61566: LIST
61567: PUSH
61568: LD_INT 4
61570: NEG
61571: PUSH
61572: LD_INT 0
61574: PUSH
61575: EMPTY
61576: LIST
61577: LIST
61578: PUSH
61579: LD_INT 4
61581: NEG
61582: PUSH
61583: LD_INT 1
61585: NEG
61586: PUSH
61587: EMPTY
61588: LIST
61589: LIST
61590: PUSH
61591: LD_INT 3
61593: NEG
61594: PUSH
61595: LD_INT 0
61597: PUSH
61598: EMPTY
61599: LIST
61600: LIST
61601: PUSH
61602: LD_INT 3
61604: NEG
61605: PUSH
61606: LD_INT 1
61608: PUSH
61609: EMPTY
61610: LIST
61611: LIST
61612: PUSH
61613: LD_INT 4
61615: NEG
61616: PUSH
61617: LD_INT 1
61619: PUSH
61620: EMPTY
61621: LIST
61622: LIST
61623: PUSH
61624: LD_INT 5
61626: NEG
61627: PUSH
61628: LD_INT 0
61630: PUSH
61631: EMPTY
61632: LIST
61633: LIST
61634: PUSH
61635: LD_INT 5
61637: NEG
61638: PUSH
61639: LD_INT 1
61641: NEG
61642: PUSH
61643: EMPTY
61644: LIST
61645: LIST
61646: PUSH
61647: LD_INT 5
61649: NEG
61650: PUSH
61651: LD_INT 2
61653: NEG
61654: PUSH
61655: EMPTY
61656: LIST
61657: LIST
61658: PUSH
61659: LD_INT 3
61661: NEG
61662: PUSH
61663: LD_INT 2
61665: PUSH
61666: EMPTY
61667: LIST
61668: LIST
61669: PUSH
61670: LD_INT 3
61672: NEG
61673: PUSH
61674: LD_INT 3
61676: NEG
61677: PUSH
61678: EMPTY
61679: LIST
61680: LIST
61681: PUSH
61682: LD_INT 3
61684: NEG
61685: PUSH
61686: LD_INT 4
61688: NEG
61689: PUSH
61690: EMPTY
61691: LIST
61692: LIST
61693: PUSH
61694: LD_INT 2
61696: NEG
61697: PUSH
61698: LD_INT 3
61700: NEG
61701: PUSH
61702: EMPTY
61703: LIST
61704: LIST
61705: PUSH
61706: LD_INT 2
61708: NEG
61709: PUSH
61710: LD_INT 2
61712: NEG
61713: PUSH
61714: EMPTY
61715: LIST
61716: LIST
61717: PUSH
61718: LD_INT 3
61720: NEG
61721: PUSH
61722: LD_INT 2
61724: NEG
61725: PUSH
61726: EMPTY
61727: LIST
61728: LIST
61729: PUSH
61730: LD_INT 4
61732: NEG
61733: PUSH
61734: LD_INT 3
61736: NEG
61737: PUSH
61738: EMPTY
61739: LIST
61740: LIST
61741: PUSH
61742: LD_INT 4
61744: NEG
61745: PUSH
61746: LD_INT 4
61748: NEG
61749: PUSH
61750: EMPTY
61751: LIST
61752: LIST
61753: PUSH
61754: LD_INT 2
61756: NEG
61757: PUSH
61758: LD_INT 4
61760: NEG
61761: PUSH
61762: EMPTY
61763: LIST
61764: LIST
61765: PUSH
61766: LD_INT 4
61768: NEG
61769: PUSH
61770: LD_INT 2
61772: NEG
61773: PUSH
61774: EMPTY
61775: LIST
61776: LIST
61777: PUSH
61778: LD_INT 0
61780: PUSH
61781: LD_INT 4
61783: NEG
61784: PUSH
61785: EMPTY
61786: LIST
61787: LIST
61788: PUSH
61789: LD_INT 0
61791: PUSH
61792: LD_INT 5
61794: NEG
61795: PUSH
61796: EMPTY
61797: LIST
61798: LIST
61799: PUSH
61800: LD_INT 1
61802: PUSH
61803: LD_INT 4
61805: NEG
61806: PUSH
61807: EMPTY
61808: LIST
61809: LIST
61810: PUSH
61811: LD_INT 1
61813: PUSH
61814: LD_INT 3
61816: NEG
61817: PUSH
61818: EMPTY
61819: LIST
61820: LIST
61821: PUSH
61822: LD_INT 0
61824: PUSH
61825: LD_INT 3
61827: NEG
61828: PUSH
61829: EMPTY
61830: LIST
61831: LIST
61832: PUSH
61833: LD_INT 1
61835: NEG
61836: PUSH
61837: LD_INT 4
61839: NEG
61840: PUSH
61841: EMPTY
61842: LIST
61843: LIST
61844: PUSH
61845: LD_INT 1
61847: NEG
61848: PUSH
61849: LD_INT 5
61851: NEG
61852: PUSH
61853: EMPTY
61854: LIST
61855: LIST
61856: PUSH
61857: LD_INT 2
61859: PUSH
61860: LD_INT 3
61862: NEG
61863: PUSH
61864: EMPTY
61865: LIST
61866: LIST
61867: PUSH
61868: LD_INT 2
61870: NEG
61871: PUSH
61872: LD_INT 5
61874: NEG
61875: PUSH
61876: EMPTY
61877: LIST
61878: LIST
61879: PUSH
61880: EMPTY
61881: LIST
61882: LIST
61883: LIST
61884: LIST
61885: LIST
61886: LIST
61887: LIST
61888: LIST
61889: LIST
61890: LIST
61891: LIST
61892: LIST
61893: LIST
61894: LIST
61895: LIST
61896: LIST
61897: LIST
61898: LIST
61899: LIST
61900: LIST
61901: LIST
61902: LIST
61903: LIST
61904: LIST
61905: LIST
61906: LIST
61907: LIST
61908: LIST
61909: LIST
61910: LIST
61911: LIST
61912: LIST
61913: LIST
61914: LIST
61915: LIST
61916: LIST
61917: LIST
61918: LIST
61919: LIST
61920: LIST
61921: LIST
61922: LIST
61923: LIST
61924: LIST
61925: LIST
61926: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
61927: LD_ADDR_VAR 0 31
61931: PUSH
61932: LD_INT 0
61934: PUSH
61935: LD_INT 4
61937: PUSH
61938: EMPTY
61939: LIST
61940: LIST
61941: PUSH
61942: LD_INT 0
61944: PUSH
61945: LD_INT 3
61947: PUSH
61948: EMPTY
61949: LIST
61950: LIST
61951: PUSH
61952: LD_INT 1
61954: PUSH
61955: LD_INT 4
61957: PUSH
61958: EMPTY
61959: LIST
61960: LIST
61961: PUSH
61962: LD_INT 1
61964: PUSH
61965: LD_INT 5
61967: PUSH
61968: EMPTY
61969: LIST
61970: LIST
61971: PUSH
61972: LD_INT 0
61974: PUSH
61975: LD_INT 5
61977: PUSH
61978: EMPTY
61979: LIST
61980: LIST
61981: PUSH
61982: LD_INT 1
61984: NEG
61985: PUSH
61986: LD_INT 4
61988: PUSH
61989: EMPTY
61990: LIST
61991: LIST
61992: PUSH
61993: LD_INT 1
61995: NEG
61996: PUSH
61997: LD_INT 3
61999: PUSH
62000: EMPTY
62001: LIST
62002: LIST
62003: PUSH
62004: LD_INT 2
62006: PUSH
62007: LD_INT 5
62009: PUSH
62010: EMPTY
62011: LIST
62012: LIST
62013: PUSH
62014: LD_INT 2
62016: NEG
62017: PUSH
62018: LD_INT 3
62020: PUSH
62021: EMPTY
62022: LIST
62023: LIST
62024: PUSH
62025: LD_INT 3
62027: NEG
62028: PUSH
62029: LD_INT 0
62031: PUSH
62032: EMPTY
62033: LIST
62034: LIST
62035: PUSH
62036: LD_INT 3
62038: NEG
62039: PUSH
62040: LD_INT 1
62042: NEG
62043: PUSH
62044: EMPTY
62045: LIST
62046: LIST
62047: PUSH
62048: LD_INT 2
62050: NEG
62051: PUSH
62052: LD_INT 0
62054: PUSH
62055: EMPTY
62056: LIST
62057: LIST
62058: PUSH
62059: LD_INT 2
62061: NEG
62062: PUSH
62063: LD_INT 1
62065: PUSH
62066: EMPTY
62067: LIST
62068: LIST
62069: PUSH
62070: LD_INT 3
62072: NEG
62073: PUSH
62074: LD_INT 1
62076: PUSH
62077: EMPTY
62078: LIST
62079: LIST
62080: PUSH
62081: LD_INT 4
62083: NEG
62084: PUSH
62085: LD_INT 0
62087: PUSH
62088: EMPTY
62089: LIST
62090: LIST
62091: PUSH
62092: LD_INT 4
62094: NEG
62095: PUSH
62096: LD_INT 1
62098: NEG
62099: PUSH
62100: EMPTY
62101: LIST
62102: LIST
62103: PUSH
62104: LD_INT 4
62106: NEG
62107: PUSH
62108: LD_INT 2
62110: NEG
62111: PUSH
62112: EMPTY
62113: LIST
62114: LIST
62115: PUSH
62116: LD_INT 2
62118: NEG
62119: PUSH
62120: LD_INT 2
62122: PUSH
62123: EMPTY
62124: LIST
62125: LIST
62126: PUSH
62127: LD_INT 4
62129: NEG
62130: PUSH
62131: LD_INT 4
62133: NEG
62134: PUSH
62135: EMPTY
62136: LIST
62137: LIST
62138: PUSH
62139: LD_INT 4
62141: NEG
62142: PUSH
62143: LD_INT 5
62145: NEG
62146: PUSH
62147: EMPTY
62148: LIST
62149: LIST
62150: PUSH
62151: LD_INT 3
62153: NEG
62154: PUSH
62155: LD_INT 4
62157: NEG
62158: PUSH
62159: EMPTY
62160: LIST
62161: LIST
62162: PUSH
62163: LD_INT 3
62165: NEG
62166: PUSH
62167: LD_INT 3
62169: NEG
62170: PUSH
62171: EMPTY
62172: LIST
62173: LIST
62174: PUSH
62175: LD_INT 4
62177: NEG
62178: PUSH
62179: LD_INT 3
62181: NEG
62182: PUSH
62183: EMPTY
62184: LIST
62185: LIST
62186: PUSH
62187: LD_INT 5
62189: NEG
62190: PUSH
62191: LD_INT 4
62193: NEG
62194: PUSH
62195: EMPTY
62196: LIST
62197: LIST
62198: PUSH
62199: LD_INT 5
62201: NEG
62202: PUSH
62203: LD_INT 5
62205: NEG
62206: PUSH
62207: EMPTY
62208: LIST
62209: LIST
62210: PUSH
62211: LD_INT 3
62213: NEG
62214: PUSH
62215: LD_INT 5
62217: NEG
62218: PUSH
62219: EMPTY
62220: LIST
62221: LIST
62222: PUSH
62223: LD_INT 5
62225: NEG
62226: PUSH
62227: LD_INT 3
62229: NEG
62230: PUSH
62231: EMPTY
62232: LIST
62233: LIST
62234: PUSH
62235: LD_INT 0
62237: PUSH
62238: LD_INT 3
62240: NEG
62241: PUSH
62242: EMPTY
62243: LIST
62244: LIST
62245: PUSH
62246: LD_INT 0
62248: PUSH
62249: LD_INT 4
62251: NEG
62252: PUSH
62253: EMPTY
62254: LIST
62255: LIST
62256: PUSH
62257: LD_INT 1
62259: PUSH
62260: LD_INT 3
62262: NEG
62263: PUSH
62264: EMPTY
62265: LIST
62266: LIST
62267: PUSH
62268: LD_INT 1
62270: PUSH
62271: LD_INT 2
62273: NEG
62274: PUSH
62275: EMPTY
62276: LIST
62277: LIST
62278: PUSH
62279: LD_INT 0
62281: PUSH
62282: LD_INT 2
62284: NEG
62285: PUSH
62286: EMPTY
62287: LIST
62288: LIST
62289: PUSH
62290: LD_INT 1
62292: NEG
62293: PUSH
62294: LD_INT 3
62296: NEG
62297: PUSH
62298: EMPTY
62299: LIST
62300: LIST
62301: PUSH
62302: LD_INT 1
62304: NEG
62305: PUSH
62306: LD_INT 4
62308: NEG
62309: PUSH
62310: EMPTY
62311: LIST
62312: LIST
62313: PUSH
62314: LD_INT 2
62316: PUSH
62317: LD_INT 2
62319: NEG
62320: PUSH
62321: EMPTY
62322: LIST
62323: LIST
62324: PUSH
62325: LD_INT 2
62327: NEG
62328: PUSH
62329: LD_INT 4
62331: NEG
62332: PUSH
62333: EMPTY
62334: LIST
62335: LIST
62336: PUSH
62337: LD_INT 4
62339: PUSH
62340: LD_INT 0
62342: PUSH
62343: EMPTY
62344: LIST
62345: LIST
62346: PUSH
62347: LD_INT 4
62349: PUSH
62350: LD_INT 1
62352: NEG
62353: PUSH
62354: EMPTY
62355: LIST
62356: LIST
62357: PUSH
62358: LD_INT 5
62360: PUSH
62361: LD_INT 0
62363: PUSH
62364: EMPTY
62365: LIST
62366: LIST
62367: PUSH
62368: LD_INT 5
62370: PUSH
62371: LD_INT 1
62373: PUSH
62374: EMPTY
62375: LIST
62376: LIST
62377: PUSH
62378: LD_INT 4
62380: PUSH
62381: LD_INT 1
62383: PUSH
62384: EMPTY
62385: LIST
62386: LIST
62387: PUSH
62388: LD_INT 3
62390: PUSH
62391: LD_INT 0
62393: PUSH
62394: EMPTY
62395: LIST
62396: LIST
62397: PUSH
62398: LD_INT 3
62400: PUSH
62401: LD_INT 1
62403: NEG
62404: PUSH
62405: EMPTY
62406: LIST
62407: LIST
62408: PUSH
62409: LD_INT 3
62411: PUSH
62412: LD_INT 2
62414: NEG
62415: PUSH
62416: EMPTY
62417: LIST
62418: LIST
62419: PUSH
62420: LD_INT 5
62422: PUSH
62423: LD_INT 2
62425: PUSH
62426: EMPTY
62427: LIST
62428: LIST
62429: PUSH
62430: EMPTY
62431: LIST
62432: LIST
62433: LIST
62434: LIST
62435: LIST
62436: LIST
62437: LIST
62438: LIST
62439: LIST
62440: LIST
62441: LIST
62442: LIST
62443: LIST
62444: LIST
62445: LIST
62446: LIST
62447: LIST
62448: LIST
62449: LIST
62450: LIST
62451: LIST
62452: LIST
62453: LIST
62454: LIST
62455: LIST
62456: LIST
62457: LIST
62458: LIST
62459: LIST
62460: LIST
62461: LIST
62462: LIST
62463: LIST
62464: LIST
62465: LIST
62466: LIST
62467: LIST
62468: LIST
62469: LIST
62470: LIST
62471: LIST
62472: LIST
62473: LIST
62474: LIST
62475: LIST
62476: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
62477: LD_ADDR_VAR 0 32
62481: PUSH
62482: LD_INT 4
62484: NEG
62485: PUSH
62486: LD_INT 0
62488: PUSH
62489: EMPTY
62490: LIST
62491: LIST
62492: PUSH
62493: LD_INT 4
62495: NEG
62496: PUSH
62497: LD_INT 1
62499: NEG
62500: PUSH
62501: EMPTY
62502: LIST
62503: LIST
62504: PUSH
62505: LD_INT 3
62507: NEG
62508: PUSH
62509: LD_INT 0
62511: PUSH
62512: EMPTY
62513: LIST
62514: LIST
62515: PUSH
62516: LD_INT 3
62518: NEG
62519: PUSH
62520: LD_INT 1
62522: PUSH
62523: EMPTY
62524: LIST
62525: LIST
62526: PUSH
62527: LD_INT 4
62529: NEG
62530: PUSH
62531: LD_INT 1
62533: PUSH
62534: EMPTY
62535: LIST
62536: LIST
62537: PUSH
62538: LD_INT 5
62540: NEG
62541: PUSH
62542: LD_INT 0
62544: PUSH
62545: EMPTY
62546: LIST
62547: LIST
62548: PUSH
62549: LD_INT 5
62551: NEG
62552: PUSH
62553: LD_INT 1
62555: NEG
62556: PUSH
62557: EMPTY
62558: LIST
62559: LIST
62560: PUSH
62561: LD_INT 5
62563: NEG
62564: PUSH
62565: LD_INT 2
62567: NEG
62568: PUSH
62569: EMPTY
62570: LIST
62571: LIST
62572: PUSH
62573: LD_INT 3
62575: NEG
62576: PUSH
62577: LD_INT 2
62579: PUSH
62580: EMPTY
62581: LIST
62582: LIST
62583: PUSH
62584: LD_INT 3
62586: NEG
62587: PUSH
62588: LD_INT 3
62590: NEG
62591: PUSH
62592: EMPTY
62593: LIST
62594: LIST
62595: PUSH
62596: LD_INT 3
62598: NEG
62599: PUSH
62600: LD_INT 4
62602: NEG
62603: PUSH
62604: EMPTY
62605: LIST
62606: LIST
62607: PUSH
62608: LD_INT 2
62610: NEG
62611: PUSH
62612: LD_INT 3
62614: NEG
62615: PUSH
62616: EMPTY
62617: LIST
62618: LIST
62619: PUSH
62620: LD_INT 2
62622: NEG
62623: PUSH
62624: LD_INT 2
62626: NEG
62627: PUSH
62628: EMPTY
62629: LIST
62630: LIST
62631: PUSH
62632: LD_INT 3
62634: NEG
62635: PUSH
62636: LD_INT 2
62638: NEG
62639: PUSH
62640: EMPTY
62641: LIST
62642: LIST
62643: PUSH
62644: LD_INT 4
62646: NEG
62647: PUSH
62648: LD_INT 3
62650: NEG
62651: PUSH
62652: EMPTY
62653: LIST
62654: LIST
62655: PUSH
62656: LD_INT 4
62658: NEG
62659: PUSH
62660: LD_INT 4
62662: NEG
62663: PUSH
62664: EMPTY
62665: LIST
62666: LIST
62667: PUSH
62668: LD_INT 2
62670: NEG
62671: PUSH
62672: LD_INT 4
62674: NEG
62675: PUSH
62676: EMPTY
62677: LIST
62678: LIST
62679: PUSH
62680: LD_INT 4
62682: NEG
62683: PUSH
62684: LD_INT 2
62686: NEG
62687: PUSH
62688: EMPTY
62689: LIST
62690: LIST
62691: PUSH
62692: LD_INT 0
62694: PUSH
62695: LD_INT 4
62697: NEG
62698: PUSH
62699: EMPTY
62700: LIST
62701: LIST
62702: PUSH
62703: LD_INT 0
62705: PUSH
62706: LD_INT 5
62708: NEG
62709: PUSH
62710: EMPTY
62711: LIST
62712: LIST
62713: PUSH
62714: LD_INT 1
62716: PUSH
62717: LD_INT 4
62719: NEG
62720: PUSH
62721: EMPTY
62722: LIST
62723: LIST
62724: PUSH
62725: LD_INT 1
62727: PUSH
62728: LD_INT 3
62730: NEG
62731: PUSH
62732: EMPTY
62733: LIST
62734: LIST
62735: PUSH
62736: LD_INT 0
62738: PUSH
62739: LD_INT 3
62741: NEG
62742: PUSH
62743: EMPTY
62744: LIST
62745: LIST
62746: PUSH
62747: LD_INT 1
62749: NEG
62750: PUSH
62751: LD_INT 4
62753: NEG
62754: PUSH
62755: EMPTY
62756: LIST
62757: LIST
62758: PUSH
62759: LD_INT 1
62761: NEG
62762: PUSH
62763: LD_INT 5
62765: NEG
62766: PUSH
62767: EMPTY
62768: LIST
62769: LIST
62770: PUSH
62771: LD_INT 2
62773: PUSH
62774: LD_INT 3
62776: NEG
62777: PUSH
62778: EMPTY
62779: LIST
62780: LIST
62781: PUSH
62782: LD_INT 2
62784: NEG
62785: PUSH
62786: LD_INT 5
62788: NEG
62789: PUSH
62790: EMPTY
62791: LIST
62792: LIST
62793: PUSH
62794: LD_INT 3
62796: PUSH
62797: LD_INT 0
62799: PUSH
62800: EMPTY
62801: LIST
62802: LIST
62803: PUSH
62804: LD_INT 3
62806: PUSH
62807: LD_INT 1
62809: NEG
62810: PUSH
62811: EMPTY
62812: LIST
62813: LIST
62814: PUSH
62815: LD_INT 4
62817: PUSH
62818: LD_INT 0
62820: PUSH
62821: EMPTY
62822: LIST
62823: LIST
62824: PUSH
62825: LD_INT 4
62827: PUSH
62828: LD_INT 1
62830: PUSH
62831: EMPTY
62832: LIST
62833: LIST
62834: PUSH
62835: LD_INT 3
62837: PUSH
62838: LD_INT 1
62840: PUSH
62841: EMPTY
62842: LIST
62843: LIST
62844: PUSH
62845: LD_INT 2
62847: PUSH
62848: LD_INT 0
62850: PUSH
62851: EMPTY
62852: LIST
62853: LIST
62854: PUSH
62855: LD_INT 2
62857: PUSH
62858: LD_INT 1
62860: NEG
62861: PUSH
62862: EMPTY
62863: LIST
62864: LIST
62865: PUSH
62866: LD_INT 2
62868: PUSH
62869: LD_INT 2
62871: NEG
62872: PUSH
62873: EMPTY
62874: LIST
62875: LIST
62876: PUSH
62877: LD_INT 4
62879: PUSH
62880: LD_INT 2
62882: PUSH
62883: EMPTY
62884: LIST
62885: LIST
62886: PUSH
62887: LD_INT 4
62889: PUSH
62890: LD_INT 4
62892: PUSH
62893: EMPTY
62894: LIST
62895: LIST
62896: PUSH
62897: LD_INT 4
62899: PUSH
62900: LD_INT 3
62902: PUSH
62903: EMPTY
62904: LIST
62905: LIST
62906: PUSH
62907: LD_INT 5
62909: PUSH
62910: LD_INT 4
62912: PUSH
62913: EMPTY
62914: LIST
62915: LIST
62916: PUSH
62917: LD_INT 5
62919: PUSH
62920: LD_INT 5
62922: PUSH
62923: EMPTY
62924: LIST
62925: LIST
62926: PUSH
62927: LD_INT 4
62929: PUSH
62930: LD_INT 5
62932: PUSH
62933: EMPTY
62934: LIST
62935: LIST
62936: PUSH
62937: LD_INT 3
62939: PUSH
62940: LD_INT 4
62942: PUSH
62943: EMPTY
62944: LIST
62945: LIST
62946: PUSH
62947: LD_INT 3
62949: PUSH
62950: LD_INT 3
62952: PUSH
62953: EMPTY
62954: LIST
62955: LIST
62956: PUSH
62957: LD_INT 5
62959: PUSH
62960: LD_INT 3
62962: PUSH
62963: EMPTY
62964: LIST
62965: LIST
62966: PUSH
62967: LD_INT 3
62969: PUSH
62970: LD_INT 5
62972: PUSH
62973: EMPTY
62974: LIST
62975: LIST
62976: PUSH
62977: EMPTY
62978: LIST
62979: LIST
62980: LIST
62981: LIST
62982: LIST
62983: LIST
62984: LIST
62985: LIST
62986: LIST
62987: LIST
62988: LIST
62989: LIST
62990: LIST
62991: LIST
62992: LIST
62993: LIST
62994: LIST
62995: LIST
62996: LIST
62997: LIST
62998: LIST
62999: LIST
63000: LIST
63001: LIST
63002: LIST
63003: LIST
63004: LIST
63005: LIST
63006: LIST
63007: LIST
63008: LIST
63009: LIST
63010: LIST
63011: LIST
63012: LIST
63013: LIST
63014: LIST
63015: LIST
63016: LIST
63017: LIST
63018: LIST
63019: LIST
63020: LIST
63021: LIST
63022: LIST
63023: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
63024: LD_ADDR_VAR 0 33
63028: PUSH
63029: LD_INT 4
63031: NEG
63032: PUSH
63033: LD_INT 4
63035: NEG
63036: PUSH
63037: EMPTY
63038: LIST
63039: LIST
63040: PUSH
63041: LD_INT 4
63043: NEG
63044: PUSH
63045: LD_INT 5
63047: NEG
63048: PUSH
63049: EMPTY
63050: LIST
63051: LIST
63052: PUSH
63053: LD_INT 3
63055: NEG
63056: PUSH
63057: LD_INT 4
63059: NEG
63060: PUSH
63061: EMPTY
63062: LIST
63063: LIST
63064: PUSH
63065: LD_INT 3
63067: NEG
63068: PUSH
63069: LD_INT 3
63071: NEG
63072: PUSH
63073: EMPTY
63074: LIST
63075: LIST
63076: PUSH
63077: LD_INT 4
63079: NEG
63080: PUSH
63081: LD_INT 3
63083: NEG
63084: PUSH
63085: EMPTY
63086: LIST
63087: LIST
63088: PUSH
63089: LD_INT 5
63091: NEG
63092: PUSH
63093: LD_INT 4
63095: NEG
63096: PUSH
63097: EMPTY
63098: LIST
63099: LIST
63100: PUSH
63101: LD_INT 5
63103: NEG
63104: PUSH
63105: LD_INT 5
63107: NEG
63108: PUSH
63109: EMPTY
63110: LIST
63111: LIST
63112: PUSH
63113: LD_INT 3
63115: NEG
63116: PUSH
63117: LD_INT 5
63119: NEG
63120: PUSH
63121: EMPTY
63122: LIST
63123: LIST
63124: PUSH
63125: LD_INT 5
63127: NEG
63128: PUSH
63129: LD_INT 3
63131: NEG
63132: PUSH
63133: EMPTY
63134: LIST
63135: LIST
63136: PUSH
63137: LD_INT 0
63139: PUSH
63140: LD_INT 3
63142: NEG
63143: PUSH
63144: EMPTY
63145: LIST
63146: LIST
63147: PUSH
63148: LD_INT 0
63150: PUSH
63151: LD_INT 4
63153: NEG
63154: PUSH
63155: EMPTY
63156: LIST
63157: LIST
63158: PUSH
63159: LD_INT 1
63161: PUSH
63162: LD_INT 3
63164: NEG
63165: PUSH
63166: EMPTY
63167: LIST
63168: LIST
63169: PUSH
63170: LD_INT 1
63172: PUSH
63173: LD_INT 2
63175: NEG
63176: PUSH
63177: EMPTY
63178: LIST
63179: LIST
63180: PUSH
63181: LD_INT 0
63183: PUSH
63184: LD_INT 2
63186: NEG
63187: PUSH
63188: EMPTY
63189: LIST
63190: LIST
63191: PUSH
63192: LD_INT 1
63194: NEG
63195: PUSH
63196: LD_INT 3
63198: NEG
63199: PUSH
63200: EMPTY
63201: LIST
63202: LIST
63203: PUSH
63204: LD_INT 1
63206: NEG
63207: PUSH
63208: LD_INT 4
63210: NEG
63211: PUSH
63212: EMPTY
63213: LIST
63214: LIST
63215: PUSH
63216: LD_INT 2
63218: PUSH
63219: LD_INT 2
63221: NEG
63222: PUSH
63223: EMPTY
63224: LIST
63225: LIST
63226: PUSH
63227: LD_INT 2
63229: NEG
63230: PUSH
63231: LD_INT 4
63233: NEG
63234: PUSH
63235: EMPTY
63236: LIST
63237: LIST
63238: PUSH
63239: LD_INT 4
63241: PUSH
63242: LD_INT 0
63244: PUSH
63245: EMPTY
63246: LIST
63247: LIST
63248: PUSH
63249: LD_INT 4
63251: PUSH
63252: LD_INT 1
63254: NEG
63255: PUSH
63256: EMPTY
63257: LIST
63258: LIST
63259: PUSH
63260: LD_INT 5
63262: PUSH
63263: LD_INT 0
63265: PUSH
63266: EMPTY
63267: LIST
63268: LIST
63269: PUSH
63270: LD_INT 5
63272: PUSH
63273: LD_INT 1
63275: PUSH
63276: EMPTY
63277: LIST
63278: LIST
63279: PUSH
63280: LD_INT 4
63282: PUSH
63283: LD_INT 1
63285: PUSH
63286: EMPTY
63287: LIST
63288: LIST
63289: PUSH
63290: LD_INT 3
63292: PUSH
63293: LD_INT 0
63295: PUSH
63296: EMPTY
63297: LIST
63298: LIST
63299: PUSH
63300: LD_INT 3
63302: PUSH
63303: LD_INT 1
63305: NEG
63306: PUSH
63307: EMPTY
63308: LIST
63309: LIST
63310: PUSH
63311: LD_INT 3
63313: PUSH
63314: LD_INT 2
63316: NEG
63317: PUSH
63318: EMPTY
63319: LIST
63320: LIST
63321: PUSH
63322: LD_INT 5
63324: PUSH
63325: LD_INT 2
63327: PUSH
63328: EMPTY
63329: LIST
63330: LIST
63331: PUSH
63332: LD_INT 3
63334: PUSH
63335: LD_INT 3
63337: PUSH
63338: EMPTY
63339: LIST
63340: LIST
63341: PUSH
63342: LD_INT 3
63344: PUSH
63345: LD_INT 2
63347: PUSH
63348: EMPTY
63349: LIST
63350: LIST
63351: PUSH
63352: LD_INT 4
63354: PUSH
63355: LD_INT 3
63357: PUSH
63358: EMPTY
63359: LIST
63360: LIST
63361: PUSH
63362: LD_INT 4
63364: PUSH
63365: LD_INT 4
63367: PUSH
63368: EMPTY
63369: LIST
63370: LIST
63371: PUSH
63372: LD_INT 3
63374: PUSH
63375: LD_INT 4
63377: PUSH
63378: EMPTY
63379: LIST
63380: LIST
63381: PUSH
63382: LD_INT 2
63384: PUSH
63385: LD_INT 3
63387: PUSH
63388: EMPTY
63389: LIST
63390: LIST
63391: PUSH
63392: LD_INT 2
63394: PUSH
63395: LD_INT 2
63397: PUSH
63398: EMPTY
63399: LIST
63400: LIST
63401: PUSH
63402: LD_INT 4
63404: PUSH
63405: LD_INT 2
63407: PUSH
63408: EMPTY
63409: LIST
63410: LIST
63411: PUSH
63412: LD_INT 2
63414: PUSH
63415: LD_INT 4
63417: PUSH
63418: EMPTY
63419: LIST
63420: LIST
63421: PUSH
63422: LD_INT 0
63424: PUSH
63425: LD_INT 4
63427: PUSH
63428: EMPTY
63429: LIST
63430: LIST
63431: PUSH
63432: LD_INT 0
63434: PUSH
63435: LD_INT 3
63437: PUSH
63438: EMPTY
63439: LIST
63440: LIST
63441: PUSH
63442: LD_INT 1
63444: PUSH
63445: LD_INT 4
63447: PUSH
63448: EMPTY
63449: LIST
63450: LIST
63451: PUSH
63452: LD_INT 1
63454: PUSH
63455: LD_INT 5
63457: PUSH
63458: EMPTY
63459: LIST
63460: LIST
63461: PUSH
63462: LD_INT 0
63464: PUSH
63465: LD_INT 5
63467: PUSH
63468: EMPTY
63469: LIST
63470: LIST
63471: PUSH
63472: LD_INT 1
63474: NEG
63475: PUSH
63476: LD_INT 4
63478: PUSH
63479: EMPTY
63480: LIST
63481: LIST
63482: PUSH
63483: LD_INT 1
63485: NEG
63486: PUSH
63487: LD_INT 3
63489: PUSH
63490: EMPTY
63491: LIST
63492: LIST
63493: PUSH
63494: LD_INT 2
63496: PUSH
63497: LD_INT 5
63499: PUSH
63500: EMPTY
63501: LIST
63502: LIST
63503: PUSH
63504: LD_INT 2
63506: NEG
63507: PUSH
63508: LD_INT 3
63510: PUSH
63511: EMPTY
63512: LIST
63513: LIST
63514: PUSH
63515: EMPTY
63516: LIST
63517: LIST
63518: LIST
63519: LIST
63520: LIST
63521: LIST
63522: LIST
63523: LIST
63524: LIST
63525: LIST
63526: LIST
63527: LIST
63528: LIST
63529: LIST
63530: LIST
63531: LIST
63532: LIST
63533: LIST
63534: LIST
63535: LIST
63536: LIST
63537: LIST
63538: LIST
63539: LIST
63540: LIST
63541: LIST
63542: LIST
63543: LIST
63544: LIST
63545: LIST
63546: LIST
63547: LIST
63548: LIST
63549: LIST
63550: LIST
63551: LIST
63552: LIST
63553: LIST
63554: LIST
63555: LIST
63556: LIST
63557: LIST
63558: LIST
63559: LIST
63560: LIST
63561: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
63562: LD_ADDR_VAR 0 34
63566: PUSH
63567: LD_INT 0
63569: PUSH
63570: LD_INT 4
63572: NEG
63573: PUSH
63574: EMPTY
63575: LIST
63576: LIST
63577: PUSH
63578: LD_INT 0
63580: PUSH
63581: LD_INT 5
63583: NEG
63584: PUSH
63585: EMPTY
63586: LIST
63587: LIST
63588: PUSH
63589: LD_INT 1
63591: PUSH
63592: LD_INT 4
63594: NEG
63595: PUSH
63596: EMPTY
63597: LIST
63598: LIST
63599: PUSH
63600: LD_INT 1
63602: PUSH
63603: LD_INT 3
63605: NEG
63606: PUSH
63607: EMPTY
63608: LIST
63609: LIST
63610: PUSH
63611: LD_INT 0
63613: PUSH
63614: LD_INT 3
63616: NEG
63617: PUSH
63618: EMPTY
63619: LIST
63620: LIST
63621: PUSH
63622: LD_INT 1
63624: NEG
63625: PUSH
63626: LD_INT 4
63628: NEG
63629: PUSH
63630: EMPTY
63631: LIST
63632: LIST
63633: PUSH
63634: LD_INT 1
63636: NEG
63637: PUSH
63638: LD_INT 5
63640: NEG
63641: PUSH
63642: EMPTY
63643: LIST
63644: LIST
63645: PUSH
63646: LD_INT 2
63648: PUSH
63649: LD_INT 3
63651: NEG
63652: PUSH
63653: EMPTY
63654: LIST
63655: LIST
63656: PUSH
63657: LD_INT 2
63659: NEG
63660: PUSH
63661: LD_INT 5
63663: NEG
63664: PUSH
63665: EMPTY
63666: LIST
63667: LIST
63668: PUSH
63669: LD_INT 3
63671: PUSH
63672: LD_INT 0
63674: PUSH
63675: EMPTY
63676: LIST
63677: LIST
63678: PUSH
63679: LD_INT 3
63681: PUSH
63682: LD_INT 1
63684: NEG
63685: PUSH
63686: EMPTY
63687: LIST
63688: LIST
63689: PUSH
63690: LD_INT 4
63692: PUSH
63693: LD_INT 0
63695: PUSH
63696: EMPTY
63697: LIST
63698: LIST
63699: PUSH
63700: LD_INT 4
63702: PUSH
63703: LD_INT 1
63705: PUSH
63706: EMPTY
63707: LIST
63708: LIST
63709: PUSH
63710: LD_INT 3
63712: PUSH
63713: LD_INT 1
63715: PUSH
63716: EMPTY
63717: LIST
63718: LIST
63719: PUSH
63720: LD_INT 2
63722: PUSH
63723: LD_INT 0
63725: PUSH
63726: EMPTY
63727: LIST
63728: LIST
63729: PUSH
63730: LD_INT 2
63732: PUSH
63733: LD_INT 1
63735: NEG
63736: PUSH
63737: EMPTY
63738: LIST
63739: LIST
63740: PUSH
63741: LD_INT 2
63743: PUSH
63744: LD_INT 2
63746: NEG
63747: PUSH
63748: EMPTY
63749: LIST
63750: LIST
63751: PUSH
63752: LD_INT 4
63754: PUSH
63755: LD_INT 2
63757: PUSH
63758: EMPTY
63759: LIST
63760: LIST
63761: PUSH
63762: LD_INT 4
63764: PUSH
63765: LD_INT 4
63767: PUSH
63768: EMPTY
63769: LIST
63770: LIST
63771: PUSH
63772: LD_INT 4
63774: PUSH
63775: LD_INT 3
63777: PUSH
63778: EMPTY
63779: LIST
63780: LIST
63781: PUSH
63782: LD_INT 5
63784: PUSH
63785: LD_INT 4
63787: PUSH
63788: EMPTY
63789: LIST
63790: LIST
63791: PUSH
63792: LD_INT 5
63794: PUSH
63795: LD_INT 5
63797: PUSH
63798: EMPTY
63799: LIST
63800: LIST
63801: PUSH
63802: LD_INT 4
63804: PUSH
63805: LD_INT 5
63807: PUSH
63808: EMPTY
63809: LIST
63810: LIST
63811: PUSH
63812: LD_INT 3
63814: PUSH
63815: LD_INT 4
63817: PUSH
63818: EMPTY
63819: LIST
63820: LIST
63821: PUSH
63822: LD_INT 3
63824: PUSH
63825: LD_INT 3
63827: PUSH
63828: EMPTY
63829: LIST
63830: LIST
63831: PUSH
63832: LD_INT 5
63834: PUSH
63835: LD_INT 3
63837: PUSH
63838: EMPTY
63839: LIST
63840: LIST
63841: PUSH
63842: LD_INT 3
63844: PUSH
63845: LD_INT 5
63847: PUSH
63848: EMPTY
63849: LIST
63850: LIST
63851: PUSH
63852: LD_INT 0
63854: PUSH
63855: LD_INT 3
63857: PUSH
63858: EMPTY
63859: LIST
63860: LIST
63861: PUSH
63862: LD_INT 0
63864: PUSH
63865: LD_INT 2
63867: PUSH
63868: EMPTY
63869: LIST
63870: LIST
63871: PUSH
63872: LD_INT 1
63874: PUSH
63875: LD_INT 3
63877: PUSH
63878: EMPTY
63879: LIST
63880: LIST
63881: PUSH
63882: LD_INT 1
63884: PUSH
63885: LD_INT 4
63887: PUSH
63888: EMPTY
63889: LIST
63890: LIST
63891: PUSH
63892: LD_INT 0
63894: PUSH
63895: LD_INT 4
63897: PUSH
63898: EMPTY
63899: LIST
63900: LIST
63901: PUSH
63902: LD_INT 1
63904: NEG
63905: PUSH
63906: LD_INT 3
63908: PUSH
63909: EMPTY
63910: LIST
63911: LIST
63912: PUSH
63913: LD_INT 1
63915: NEG
63916: PUSH
63917: LD_INT 2
63919: PUSH
63920: EMPTY
63921: LIST
63922: LIST
63923: PUSH
63924: LD_INT 2
63926: PUSH
63927: LD_INT 4
63929: PUSH
63930: EMPTY
63931: LIST
63932: LIST
63933: PUSH
63934: LD_INT 2
63936: NEG
63937: PUSH
63938: LD_INT 2
63940: PUSH
63941: EMPTY
63942: LIST
63943: LIST
63944: PUSH
63945: LD_INT 4
63947: NEG
63948: PUSH
63949: LD_INT 0
63951: PUSH
63952: EMPTY
63953: LIST
63954: LIST
63955: PUSH
63956: LD_INT 4
63958: NEG
63959: PUSH
63960: LD_INT 1
63962: NEG
63963: PUSH
63964: EMPTY
63965: LIST
63966: LIST
63967: PUSH
63968: LD_INT 3
63970: NEG
63971: PUSH
63972: LD_INT 0
63974: PUSH
63975: EMPTY
63976: LIST
63977: LIST
63978: PUSH
63979: LD_INT 3
63981: NEG
63982: PUSH
63983: LD_INT 1
63985: PUSH
63986: EMPTY
63987: LIST
63988: LIST
63989: PUSH
63990: LD_INT 4
63992: NEG
63993: PUSH
63994: LD_INT 1
63996: PUSH
63997: EMPTY
63998: LIST
63999: LIST
64000: PUSH
64001: LD_INT 5
64003: NEG
64004: PUSH
64005: LD_INT 0
64007: PUSH
64008: EMPTY
64009: LIST
64010: LIST
64011: PUSH
64012: LD_INT 5
64014: NEG
64015: PUSH
64016: LD_INT 1
64018: NEG
64019: PUSH
64020: EMPTY
64021: LIST
64022: LIST
64023: PUSH
64024: LD_INT 5
64026: NEG
64027: PUSH
64028: LD_INT 2
64030: NEG
64031: PUSH
64032: EMPTY
64033: LIST
64034: LIST
64035: PUSH
64036: LD_INT 3
64038: NEG
64039: PUSH
64040: LD_INT 2
64042: PUSH
64043: EMPTY
64044: LIST
64045: LIST
64046: PUSH
64047: EMPTY
64048: LIST
64049: LIST
64050: LIST
64051: LIST
64052: LIST
64053: LIST
64054: LIST
64055: LIST
64056: LIST
64057: LIST
64058: LIST
64059: LIST
64060: LIST
64061: LIST
64062: LIST
64063: LIST
64064: LIST
64065: LIST
64066: LIST
64067: LIST
64068: LIST
64069: LIST
64070: LIST
64071: LIST
64072: LIST
64073: LIST
64074: LIST
64075: LIST
64076: LIST
64077: LIST
64078: LIST
64079: LIST
64080: LIST
64081: LIST
64082: LIST
64083: LIST
64084: LIST
64085: LIST
64086: LIST
64087: LIST
64088: LIST
64089: LIST
64090: LIST
64091: LIST
64092: LIST
64093: ST_TO_ADDR
// end ; end ;
64094: GO 64097
64096: POP
// case btype of b_depot , b_warehouse :
64097: LD_VAR 0 1
64101: PUSH
64102: LD_INT 0
64104: DOUBLE
64105: EQUAL
64106: IFTRUE 64116
64108: LD_INT 1
64110: DOUBLE
64111: EQUAL
64112: IFTRUE 64116
64114: GO 64317
64116: POP
// case nation of nation_american :
64117: LD_VAR 0 5
64121: PUSH
64122: LD_INT 1
64124: DOUBLE
64125: EQUAL
64126: IFTRUE 64130
64128: GO 64186
64130: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
64131: LD_ADDR_VAR 0 9
64135: PUSH
64136: LD_VAR 0 11
64140: PUSH
64141: LD_VAR 0 12
64145: PUSH
64146: LD_VAR 0 13
64150: PUSH
64151: LD_VAR 0 14
64155: PUSH
64156: LD_VAR 0 15
64160: PUSH
64161: LD_VAR 0 16
64165: PUSH
64166: EMPTY
64167: LIST
64168: LIST
64169: LIST
64170: LIST
64171: LIST
64172: LIST
64173: PUSH
64174: LD_VAR 0 4
64178: PUSH
64179: LD_INT 1
64181: PLUS
64182: ARRAY
64183: ST_TO_ADDR
64184: GO 64315
64186: LD_INT 2
64188: DOUBLE
64189: EQUAL
64190: IFTRUE 64194
64192: GO 64250
64194: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
64195: LD_ADDR_VAR 0 9
64199: PUSH
64200: LD_VAR 0 17
64204: PUSH
64205: LD_VAR 0 18
64209: PUSH
64210: LD_VAR 0 19
64214: PUSH
64215: LD_VAR 0 20
64219: PUSH
64220: LD_VAR 0 21
64224: PUSH
64225: LD_VAR 0 22
64229: PUSH
64230: EMPTY
64231: LIST
64232: LIST
64233: LIST
64234: LIST
64235: LIST
64236: LIST
64237: PUSH
64238: LD_VAR 0 4
64242: PUSH
64243: LD_INT 1
64245: PLUS
64246: ARRAY
64247: ST_TO_ADDR
64248: GO 64315
64250: LD_INT 3
64252: DOUBLE
64253: EQUAL
64254: IFTRUE 64258
64256: GO 64314
64258: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
64259: LD_ADDR_VAR 0 9
64263: PUSH
64264: LD_VAR 0 23
64268: PUSH
64269: LD_VAR 0 24
64273: PUSH
64274: LD_VAR 0 25
64278: PUSH
64279: LD_VAR 0 26
64283: PUSH
64284: LD_VAR 0 27
64288: PUSH
64289: LD_VAR 0 28
64293: PUSH
64294: EMPTY
64295: LIST
64296: LIST
64297: LIST
64298: LIST
64299: LIST
64300: LIST
64301: PUSH
64302: LD_VAR 0 4
64306: PUSH
64307: LD_INT 1
64309: PLUS
64310: ARRAY
64311: ST_TO_ADDR
64312: GO 64315
64314: POP
64315: GO 64870
64317: LD_INT 2
64319: DOUBLE
64320: EQUAL
64321: IFTRUE 64331
64323: LD_INT 3
64325: DOUBLE
64326: EQUAL
64327: IFTRUE 64331
64329: GO 64387
64331: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
64332: LD_ADDR_VAR 0 9
64336: PUSH
64337: LD_VAR 0 29
64341: PUSH
64342: LD_VAR 0 30
64346: PUSH
64347: LD_VAR 0 31
64351: PUSH
64352: LD_VAR 0 32
64356: PUSH
64357: LD_VAR 0 33
64361: PUSH
64362: LD_VAR 0 34
64366: PUSH
64367: EMPTY
64368: LIST
64369: LIST
64370: LIST
64371: LIST
64372: LIST
64373: LIST
64374: PUSH
64375: LD_VAR 0 4
64379: PUSH
64380: LD_INT 1
64382: PLUS
64383: ARRAY
64384: ST_TO_ADDR
64385: GO 64870
64387: LD_INT 16
64389: DOUBLE
64390: EQUAL
64391: IFTRUE 64449
64393: LD_INT 17
64395: DOUBLE
64396: EQUAL
64397: IFTRUE 64449
64399: LD_INT 18
64401: DOUBLE
64402: EQUAL
64403: IFTRUE 64449
64405: LD_INT 19
64407: DOUBLE
64408: EQUAL
64409: IFTRUE 64449
64411: LD_INT 22
64413: DOUBLE
64414: EQUAL
64415: IFTRUE 64449
64417: LD_INT 20
64419: DOUBLE
64420: EQUAL
64421: IFTRUE 64449
64423: LD_INT 21
64425: DOUBLE
64426: EQUAL
64427: IFTRUE 64449
64429: LD_INT 23
64431: DOUBLE
64432: EQUAL
64433: IFTRUE 64449
64435: LD_INT 24
64437: DOUBLE
64438: EQUAL
64439: IFTRUE 64449
64441: LD_INT 25
64443: DOUBLE
64444: EQUAL
64445: IFTRUE 64449
64447: GO 64505
64449: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
64450: LD_ADDR_VAR 0 9
64454: PUSH
64455: LD_VAR 0 35
64459: PUSH
64460: LD_VAR 0 36
64464: PUSH
64465: LD_VAR 0 37
64469: PUSH
64470: LD_VAR 0 38
64474: PUSH
64475: LD_VAR 0 39
64479: PUSH
64480: LD_VAR 0 40
64484: PUSH
64485: EMPTY
64486: LIST
64487: LIST
64488: LIST
64489: LIST
64490: LIST
64491: LIST
64492: PUSH
64493: LD_VAR 0 4
64497: PUSH
64498: LD_INT 1
64500: PLUS
64501: ARRAY
64502: ST_TO_ADDR
64503: GO 64870
64505: LD_INT 6
64507: DOUBLE
64508: EQUAL
64509: IFTRUE 64561
64511: LD_INT 7
64513: DOUBLE
64514: EQUAL
64515: IFTRUE 64561
64517: LD_INT 8
64519: DOUBLE
64520: EQUAL
64521: IFTRUE 64561
64523: LD_INT 13
64525: DOUBLE
64526: EQUAL
64527: IFTRUE 64561
64529: LD_INT 12
64531: DOUBLE
64532: EQUAL
64533: IFTRUE 64561
64535: LD_INT 15
64537: DOUBLE
64538: EQUAL
64539: IFTRUE 64561
64541: LD_INT 11
64543: DOUBLE
64544: EQUAL
64545: IFTRUE 64561
64547: LD_INT 14
64549: DOUBLE
64550: EQUAL
64551: IFTRUE 64561
64553: LD_INT 10
64555: DOUBLE
64556: EQUAL
64557: IFTRUE 64561
64559: GO 64617
64561: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
64562: LD_ADDR_VAR 0 9
64566: PUSH
64567: LD_VAR 0 41
64571: PUSH
64572: LD_VAR 0 42
64576: PUSH
64577: LD_VAR 0 43
64581: PUSH
64582: LD_VAR 0 44
64586: PUSH
64587: LD_VAR 0 45
64591: PUSH
64592: LD_VAR 0 46
64596: PUSH
64597: EMPTY
64598: LIST
64599: LIST
64600: LIST
64601: LIST
64602: LIST
64603: LIST
64604: PUSH
64605: LD_VAR 0 4
64609: PUSH
64610: LD_INT 1
64612: PLUS
64613: ARRAY
64614: ST_TO_ADDR
64615: GO 64870
64617: LD_INT 36
64619: DOUBLE
64620: EQUAL
64621: IFTRUE 64625
64623: GO 64681
64625: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
64626: LD_ADDR_VAR 0 9
64630: PUSH
64631: LD_VAR 0 47
64635: PUSH
64636: LD_VAR 0 48
64640: PUSH
64641: LD_VAR 0 49
64645: PUSH
64646: LD_VAR 0 50
64650: PUSH
64651: LD_VAR 0 51
64655: PUSH
64656: LD_VAR 0 52
64660: PUSH
64661: EMPTY
64662: LIST
64663: LIST
64664: LIST
64665: LIST
64666: LIST
64667: LIST
64668: PUSH
64669: LD_VAR 0 4
64673: PUSH
64674: LD_INT 1
64676: PLUS
64677: ARRAY
64678: ST_TO_ADDR
64679: GO 64870
64681: LD_INT 4
64683: DOUBLE
64684: EQUAL
64685: IFTRUE 64707
64687: LD_INT 5
64689: DOUBLE
64690: EQUAL
64691: IFTRUE 64707
64693: LD_INT 34
64695: DOUBLE
64696: EQUAL
64697: IFTRUE 64707
64699: LD_INT 37
64701: DOUBLE
64702: EQUAL
64703: IFTRUE 64707
64705: GO 64763
64707: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
64708: LD_ADDR_VAR 0 9
64712: PUSH
64713: LD_VAR 0 53
64717: PUSH
64718: LD_VAR 0 54
64722: PUSH
64723: LD_VAR 0 55
64727: PUSH
64728: LD_VAR 0 56
64732: PUSH
64733: LD_VAR 0 57
64737: PUSH
64738: LD_VAR 0 58
64742: PUSH
64743: EMPTY
64744: LIST
64745: LIST
64746: LIST
64747: LIST
64748: LIST
64749: LIST
64750: PUSH
64751: LD_VAR 0 4
64755: PUSH
64756: LD_INT 1
64758: PLUS
64759: ARRAY
64760: ST_TO_ADDR
64761: GO 64870
64763: LD_INT 31
64765: DOUBLE
64766: EQUAL
64767: IFTRUE 64813
64769: LD_INT 32
64771: DOUBLE
64772: EQUAL
64773: IFTRUE 64813
64775: LD_INT 33
64777: DOUBLE
64778: EQUAL
64779: IFTRUE 64813
64781: LD_INT 27
64783: DOUBLE
64784: EQUAL
64785: IFTRUE 64813
64787: LD_INT 26
64789: DOUBLE
64790: EQUAL
64791: IFTRUE 64813
64793: LD_INT 28
64795: DOUBLE
64796: EQUAL
64797: IFTRUE 64813
64799: LD_INT 29
64801: DOUBLE
64802: EQUAL
64803: IFTRUE 64813
64805: LD_INT 30
64807: DOUBLE
64808: EQUAL
64809: IFTRUE 64813
64811: GO 64869
64813: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
64814: LD_ADDR_VAR 0 9
64818: PUSH
64819: LD_VAR 0 59
64823: PUSH
64824: LD_VAR 0 60
64828: PUSH
64829: LD_VAR 0 61
64833: PUSH
64834: LD_VAR 0 62
64838: PUSH
64839: LD_VAR 0 63
64843: PUSH
64844: LD_VAR 0 64
64848: PUSH
64849: EMPTY
64850: LIST
64851: LIST
64852: LIST
64853: LIST
64854: LIST
64855: LIST
64856: PUSH
64857: LD_VAR 0 4
64861: PUSH
64862: LD_INT 1
64864: PLUS
64865: ARRAY
64866: ST_TO_ADDR
64867: GO 64870
64869: POP
// temp_list2 = [ ] ;
64870: LD_ADDR_VAR 0 10
64874: PUSH
64875: EMPTY
64876: ST_TO_ADDR
// for i in temp_list do
64877: LD_ADDR_VAR 0 8
64881: PUSH
64882: LD_VAR 0 9
64886: PUSH
64887: FOR_IN
64888: IFFALSE 64940
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
64890: LD_ADDR_VAR 0 10
64894: PUSH
64895: LD_VAR 0 10
64899: PUSH
64900: LD_VAR 0 8
64904: PUSH
64905: LD_INT 1
64907: ARRAY
64908: PUSH
64909: LD_VAR 0 2
64913: PLUS
64914: PUSH
64915: LD_VAR 0 8
64919: PUSH
64920: LD_INT 2
64922: ARRAY
64923: PUSH
64924: LD_VAR 0 3
64928: PLUS
64929: PUSH
64930: EMPTY
64931: LIST
64932: LIST
64933: PUSH
64934: EMPTY
64935: LIST
64936: ADD
64937: ST_TO_ADDR
64938: GO 64887
64940: POP
64941: POP
// result = temp_list2 ;
64942: LD_ADDR_VAR 0 7
64946: PUSH
64947: LD_VAR 0 10
64951: ST_TO_ADDR
// end ;
64952: LD_VAR 0 7
64956: RET
// export function EnemyInRange ( unit , dist ) ; begin
64957: LD_INT 0
64959: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
64960: LD_ADDR_VAR 0 3
64964: PUSH
64965: LD_VAR 0 1
64969: PPUSH
64970: CALL_OW 255
64974: PPUSH
64975: LD_VAR 0 1
64979: PPUSH
64980: CALL_OW 250
64984: PPUSH
64985: LD_VAR 0 1
64989: PPUSH
64990: CALL_OW 251
64994: PPUSH
64995: LD_VAR 0 2
64999: PPUSH
65000: CALL 38359 0 4
65004: PUSH
65005: LD_INT 4
65007: ARRAY
65008: ST_TO_ADDR
// end ;
65009: LD_VAR 0 3
65013: RET
// export function PlayerSeeMe ( unit ) ; begin
65014: LD_INT 0
65016: PPUSH
// result := See ( your_side , unit ) ;
65017: LD_ADDR_VAR 0 2
65021: PUSH
65022: LD_OWVAR 2
65026: PPUSH
65027: LD_VAR 0 1
65031: PPUSH
65032: CALL_OW 292
65036: ST_TO_ADDR
// end ;
65037: LD_VAR 0 2
65041: RET
// export function ReverseDir ( unit ) ; begin
65042: LD_INT 0
65044: PPUSH
// if not unit then
65045: LD_VAR 0 1
65049: NOT
65050: IFFALSE 65054
// exit ;
65052: GO 65077
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
65054: LD_ADDR_VAR 0 2
65058: PUSH
65059: LD_VAR 0 1
65063: PPUSH
65064: CALL_OW 254
65068: PUSH
65069: LD_INT 3
65071: PLUS
65072: PUSH
65073: LD_INT 6
65075: MOD
65076: ST_TO_ADDR
// end ;
65077: LD_VAR 0 2
65081: RET
// export function ReverseArray ( array ) ; var i ; begin
65082: LD_INT 0
65084: PPUSH
65085: PPUSH
// if not array then
65086: LD_VAR 0 1
65090: NOT
65091: IFFALSE 65095
// exit ;
65093: GO 65150
// result := [ ] ;
65095: LD_ADDR_VAR 0 2
65099: PUSH
65100: EMPTY
65101: ST_TO_ADDR
// for i := array downto 1 do
65102: LD_ADDR_VAR 0 3
65106: PUSH
65107: DOUBLE
65108: LD_VAR 0 1
65112: INC
65113: ST_TO_ADDR
65114: LD_INT 1
65116: PUSH
65117: FOR_DOWNTO
65118: IFFALSE 65148
// result := Join ( result , array [ i ] ) ;
65120: LD_ADDR_VAR 0 2
65124: PUSH
65125: LD_VAR 0 2
65129: PPUSH
65130: LD_VAR 0 1
65134: PUSH
65135: LD_VAR 0 3
65139: ARRAY
65140: PPUSH
65141: CALL 69794 0 2
65145: ST_TO_ADDR
65146: GO 65117
65148: POP
65149: POP
// end ;
65150: LD_VAR 0 2
65154: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
65155: LD_INT 0
65157: PPUSH
65158: PPUSH
65159: PPUSH
65160: PPUSH
65161: PPUSH
65162: PPUSH
// if not unit or not hexes then
65163: LD_VAR 0 1
65167: NOT
65168: PUSH
65169: LD_VAR 0 2
65173: NOT
65174: OR
65175: IFFALSE 65179
// exit ;
65177: GO 65302
// dist := 9999 ;
65179: LD_ADDR_VAR 0 5
65183: PUSH
65184: LD_INT 9999
65186: ST_TO_ADDR
// for i = 1 to hexes do
65187: LD_ADDR_VAR 0 4
65191: PUSH
65192: DOUBLE
65193: LD_INT 1
65195: DEC
65196: ST_TO_ADDR
65197: LD_VAR 0 2
65201: PUSH
65202: FOR_TO
65203: IFFALSE 65290
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
65205: LD_ADDR_VAR 0 6
65209: PUSH
65210: LD_VAR 0 1
65214: PPUSH
65215: LD_VAR 0 2
65219: PUSH
65220: LD_VAR 0 4
65224: ARRAY
65225: PUSH
65226: LD_INT 1
65228: ARRAY
65229: PPUSH
65230: LD_VAR 0 2
65234: PUSH
65235: LD_VAR 0 4
65239: ARRAY
65240: PUSH
65241: LD_INT 2
65243: ARRAY
65244: PPUSH
65245: CALL_OW 297
65249: ST_TO_ADDR
// if tdist < dist then
65250: LD_VAR 0 6
65254: PUSH
65255: LD_VAR 0 5
65259: LESS
65260: IFFALSE 65288
// begin hex := hexes [ i ] ;
65262: LD_ADDR_VAR 0 8
65266: PUSH
65267: LD_VAR 0 2
65271: PUSH
65272: LD_VAR 0 4
65276: ARRAY
65277: ST_TO_ADDR
// dist := tdist ;
65278: LD_ADDR_VAR 0 5
65282: PUSH
65283: LD_VAR 0 6
65287: ST_TO_ADDR
// end ; end ;
65288: GO 65202
65290: POP
65291: POP
// result := hex ;
65292: LD_ADDR_VAR 0 3
65296: PUSH
65297: LD_VAR 0 8
65301: ST_TO_ADDR
// end ;
65302: LD_VAR 0 3
65306: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
65307: LD_INT 0
65309: PPUSH
65310: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
65311: LD_VAR 0 1
65315: NOT
65316: PUSH
65317: LD_VAR 0 1
65321: PUSH
65322: LD_INT 21
65324: PUSH
65325: LD_INT 2
65327: PUSH
65328: EMPTY
65329: LIST
65330: LIST
65331: PUSH
65332: LD_INT 23
65334: PUSH
65335: LD_INT 2
65337: PUSH
65338: EMPTY
65339: LIST
65340: LIST
65341: PUSH
65342: EMPTY
65343: LIST
65344: LIST
65345: PPUSH
65346: CALL_OW 69
65350: IN
65351: NOT
65352: OR
65353: IFFALSE 65357
// exit ;
65355: GO 65404
// for i = 1 to 3 do
65357: LD_ADDR_VAR 0 3
65361: PUSH
65362: DOUBLE
65363: LD_INT 1
65365: DEC
65366: ST_TO_ADDR
65367: LD_INT 3
65369: PUSH
65370: FOR_TO
65371: IFFALSE 65402
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
65373: LD_VAR 0 1
65377: PPUSH
65378: CALL_OW 250
65382: PPUSH
65383: LD_VAR 0 1
65387: PPUSH
65388: CALL_OW 251
65392: PPUSH
65393: LD_INT 1
65395: PPUSH
65396: CALL_OW 453
65400: GO 65370
65402: POP
65403: POP
// end ;
65404: LD_VAR 0 2
65408: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
65409: LD_INT 0
65411: PPUSH
65412: PPUSH
65413: PPUSH
65414: PPUSH
65415: PPUSH
65416: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
65417: LD_VAR 0 1
65421: NOT
65422: PUSH
65423: LD_VAR 0 2
65427: NOT
65428: OR
65429: PUSH
65430: LD_VAR 0 1
65434: PPUSH
65435: CALL_OW 314
65439: OR
65440: IFFALSE 65444
// exit ;
65442: GO 65911
// if GetLives ( i ) < 250 then
65444: LD_VAR 0 4
65448: PPUSH
65449: CALL_OW 256
65453: PUSH
65454: LD_INT 250
65456: LESS
65457: IFFALSE 65470
// begin ComAutodestruct ( i ) ;
65459: LD_VAR 0 4
65463: PPUSH
65464: CALL 65307 0 1
// exit ;
65468: GO 65911
// end ; x := GetX ( enemy_unit ) ;
65470: LD_ADDR_VAR 0 7
65474: PUSH
65475: LD_VAR 0 2
65479: PPUSH
65480: CALL_OW 250
65484: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
65485: LD_ADDR_VAR 0 8
65489: PUSH
65490: LD_VAR 0 2
65494: PPUSH
65495: CALL_OW 251
65499: ST_TO_ADDR
// if not x or not y then
65500: LD_VAR 0 7
65504: NOT
65505: PUSH
65506: LD_VAR 0 8
65510: NOT
65511: OR
65512: IFFALSE 65516
// exit ;
65514: GO 65911
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
65516: LD_ADDR_VAR 0 6
65520: PUSH
65521: LD_VAR 0 7
65525: PPUSH
65526: LD_INT 0
65528: PPUSH
65529: LD_INT 4
65531: PPUSH
65532: CALL_OW 272
65536: PUSH
65537: LD_VAR 0 8
65541: PPUSH
65542: LD_INT 0
65544: PPUSH
65545: LD_INT 4
65547: PPUSH
65548: CALL_OW 273
65552: PUSH
65553: EMPTY
65554: LIST
65555: LIST
65556: PUSH
65557: LD_VAR 0 7
65561: PPUSH
65562: LD_INT 1
65564: PPUSH
65565: LD_INT 4
65567: PPUSH
65568: CALL_OW 272
65572: PUSH
65573: LD_VAR 0 8
65577: PPUSH
65578: LD_INT 1
65580: PPUSH
65581: LD_INT 4
65583: PPUSH
65584: CALL_OW 273
65588: PUSH
65589: EMPTY
65590: LIST
65591: LIST
65592: PUSH
65593: LD_VAR 0 7
65597: PPUSH
65598: LD_INT 2
65600: PPUSH
65601: LD_INT 4
65603: PPUSH
65604: CALL_OW 272
65608: PUSH
65609: LD_VAR 0 8
65613: PPUSH
65614: LD_INT 2
65616: PPUSH
65617: LD_INT 4
65619: PPUSH
65620: CALL_OW 273
65624: PUSH
65625: EMPTY
65626: LIST
65627: LIST
65628: PUSH
65629: LD_VAR 0 7
65633: PPUSH
65634: LD_INT 3
65636: PPUSH
65637: LD_INT 4
65639: PPUSH
65640: CALL_OW 272
65644: PUSH
65645: LD_VAR 0 8
65649: PPUSH
65650: LD_INT 3
65652: PPUSH
65653: LD_INT 4
65655: PPUSH
65656: CALL_OW 273
65660: PUSH
65661: EMPTY
65662: LIST
65663: LIST
65664: PUSH
65665: LD_VAR 0 7
65669: PPUSH
65670: LD_INT 4
65672: PPUSH
65673: LD_INT 4
65675: PPUSH
65676: CALL_OW 272
65680: PUSH
65681: LD_VAR 0 8
65685: PPUSH
65686: LD_INT 4
65688: PPUSH
65689: LD_INT 4
65691: PPUSH
65692: CALL_OW 273
65696: PUSH
65697: EMPTY
65698: LIST
65699: LIST
65700: PUSH
65701: LD_VAR 0 7
65705: PPUSH
65706: LD_INT 5
65708: PPUSH
65709: LD_INT 4
65711: PPUSH
65712: CALL_OW 272
65716: PUSH
65717: LD_VAR 0 8
65721: PPUSH
65722: LD_INT 5
65724: PPUSH
65725: LD_INT 4
65727: PPUSH
65728: CALL_OW 273
65732: PUSH
65733: EMPTY
65734: LIST
65735: LIST
65736: PUSH
65737: EMPTY
65738: LIST
65739: LIST
65740: LIST
65741: LIST
65742: LIST
65743: LIST
65744: ST_TO_ADDR
// for i = tmp downto 1 do
65745: LD_ADDR_VAR 0 4
65749: PUSH
65750: DOUBLE
65751: LD_VAR 0 6
65755: INC
65756: ST_TO_ADDR
65757: LD_INT 1
65759: PUSH
65760: FOR_DOWNTO
65761: IFFALSE 65862
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
65763: LD_VAR 0 6
65767: PUSH
65768: LD_VAR 0 4
65772: ARRAY
65773: PUSH
65774: LD_INT 1
65776: ARRAY
65777: PPUSH
65778: LD_VAR 0 6
65782: PUSH
65783: LD_VAR 0 4
65787: ARRAY
65788: PUSH
65789: LD_INT 2
65791: ARRAY
65792: PPUSH
65793: CALL_OW 488
65797: NOT
65798: PUSH
65799: LD_VAR 0 6
65803: PUSH
65804: LD_VAR 0 4
65808: ARRAY
65809: PUSH
65810: LD_INT 1
65812: ARRAY
65813: PPUSH
65814: LD_VAR 0 6
65818: PUSH
65819: LD_VAR 0 4
65823: ARRAY
65824: PUSH
65825: LD_INT 2
65827: ARRAY
65828: PPUSH
65829: CALL_OW 428
65833: PUSH
65834: LD_INT 0
65836: NONEQUAL
65837: OR
65838: IFFALSE 65860
// tmp := Delete ( tmp , i ) ;
65840: LD_ADDR_VAR 0 6
65844: PUSH
65845: LD_VAR 0 6
65849: PPUSH
65850: LD_VAR 0 4
65854: PPUSH
65855: CALL_OW 3
65859: ST_TO_ADDR
65860: GO 65760
65862: POP
65863: POP
// j := GetClosestHex ( unit , tmp ) ;
65864: LD_ADDR_VAR 0 5
65868: PUSH
65869: LD_VAR 0 1
65873: PPUSH
65874: LD_VAR 0 6
65878: PPUSH
65879: CALL 65155 0 2
65883: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
65884: LD_VAR 0 1
65888: PPUSH
65889: LD_VAR 0 5
65893: PUSH
65894: LD_INT 1
65896: ARRAY
65897: PPUSH
65898: LD_VAR 0 5
65902: PUSH
65903: LD_INT 2
65905: ARRAY
65906: PPUSH
65907: CALL_OW 111
// end ;
65911: LD_VAR 0 3
65915: RET
// export function PrepareApemanSoldier ( ) ; begin
65916: LD_INT 0
65918: PPUSH
// uc_nation := 0 ;
65919: LD_ADDR_OWVAR 21
65923: PUSH
65924: LD_INT 0
65926: ST_TO_ADDR
// hc_sex := sex_male ;
65927: LD_ADDR_OWVAR 27
65931: PUSH
65932: LD_INT 1
65934: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
65935: LD_ADDR_OWVAR 28
65939: PUSH
65940: LD_INT 15
65942: ST_TO_ADDR
// hc_gallery :=  ;
65943: LD_ADDR_OWVAR 33
65947: PUSH
65948: LD_STRING 
65950: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
65951: LD_ADDR_OWVAR 31
65955: PUSH
65956: LD_INT 0
65958: PPUSH
65959: LD_INT 3
65961: PPUSH
65962: CALL_OW 12
65966: PUSH
65967: LD_INT 0
65969: PPUSH
65970: LD_INT 3
65972: PPUSH
65973: CALL_OW 12
65977: PUSH
65978: LD_INT 0
65980: PUSH
65981: LD_INT 0
65983: PUSH
65984: EMPTY
65985: LIST
65986: LIST
65987: LIST
65988: LIST
65989: ST_TO_ADDR
// end ;
65990: LD_VAR 0 1
65994: RET
// export function PrepareApemanEngineer ( ) ; begin
65995: LD_INT 0
65997: PPUSH
// uc_nation := 0 ;
65998: LD_ADDR_OWVAR 21
66002: PUSH
66003: LD_INT 0
66005: ST_TO_ADDR
// hc_sex := sex_male ;
66006: LD_ADDR_OWVAR 27
66010: PUSH
66011: LD_INT 1
66013: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
66014: LD_ADDR_OWVAR 28
66018: PUSH
66019: LD_INT 16
66021: ST_TO_ADDR
// hc_gallery :=  ;
66022: LD_ADDR_OWVAR 33
66026: PUSH
66027: LD_STRING 
66029: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
66030: LD_ADDR_OWVAR 31
66034: PUSH
66035: LD_INT 0
66037: PPUSH
66038: LD_INT 3
66040: PPUSH
66041: CALL_OW 12
66045: PUSH
66046: LD_INT 0
66048: PPUSH
66049: LD_INT 3
66051: PPUSH
66052: CALL_OW 12
66056: PUSH
66057: LD_INT 0
66059: PUSH
66060: LD_INT 0
66062: PUSH
66063: EMPTY
66064: LIST
66065: LIST
66066: LIST
66067: LIST
66068: ST_TO_ADDR
// end ;
66069: LD_VAR 0 1
66073: RET
// export function PrepareApeman ( agressivity ) ; begin
66074: LD_INT 0
66076: PPUSH
// uc_side := 0 ;
66077: LD_ADDR_OWVAR 20
66081: PUSH
66082: LD_INT 0
66084: ST_TO_ADDR
// uc_nation := 0 ;
66085: LD_ADDR_OWVAR 21
66089: PUSH
66090: LD_INT 0
66092: ST_TO_ADDR
// hc_sex := sex_male ;
66093: LD_ADDR_OWVAR 27
66097: PUSH
66098: LD_INT 1
66100: ST_TO_ADDR
// hc_class := class_apeman ;
66101: LD_ADDR_OWVAR 28
66105: PUSH
66106: LD_INT 12
66108: ST_TO_ADDR
// hc_gallery :=  ;
66109: LD_ADDR_OWVAR 33
66113: PUSH
66114: LD_STRING 
66116: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
66117: LD_ADDR_OWVAR 35
66121: PUSH
66122: LD_VAR 0 1
66126: NEG
66127: PPUSH
66128: LD_VAR 0 1
66132: PPUSH
66133: CALL_OW 12
66137: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
66138: LD_ADDR_OWVAR 31
66142: PUSH
66143: LD_INT 0
66145: PPUSH
66146: LD_INT 3
66148: PPUSH
66149: CALL_OW 12
66153: PUSH
66154: LD_INT 0
66156: PPUSH
66157: LD_INT 3
66159: PPUSH
66160: CALL_OW 12
66164: PUSH
66165: LD_INT 0
66167: PUSH
66168: LD_INT 0
66170: PUSH
66171: EMPTY
66172: LIST
66173: LIST
66174: LIST
66175: LIST
66176: ST_TO_ADDR
// end ;
66177: LD_VAR 0 2
66181: RET
// export function PrepareTiger ( agressivity ) ; begin
66182: LD_INT 0
66184: PPUSH
// uc_side := 0 ;
66185: LD_ADDR_OWVAR 20
66189: PUSH
66190: LD_INT 0
66192: ST_TO_ADDR
// uc_nation := 0 ;
66193: LD_ADDR_OWVAR 21
66197: PUSH
66198: LD_INT 0
66200: ST_TO_ADDR
// hc_class := class_tiger ;
66201: LD_ADDR_OWVAR 28
66205: PUSH
66206: LD_INT 14
66208: ST_TO_ADDR
// hc_gallery :=  ;
66209: LD_ADDR_OWVAR 33
66213: PUSH
66214: LD_STRING 
66216: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
66217: LD_ADDR_OWVAR 35
66221: PUSH
66222: LD_VAR 0 1
66226: NEG
66227: PPUSH
66228: LD_VAR 0 1
66232: PPUSH
66233: CALL_OW 12
66237: ST_TO_ADDR
// end ;
66238: LD_VAR 0 2
66242: RET
// export function PrepareEnchidna ( ) ; begin
66243: LD_INT 0
66245: PPUSH
// uc_side := 0 ;
66246: LD_ADDR_OWVAR 20
66250: PUSH
66251: LD_INT 0
66253: ST_TO_ADDR
// uc_nation := 0 ;
66254: LD_ADDR_OWVAR 21
66258: PUSH
66259: LD_INT 0
66261: ST_TO_ADDR
// hc_class := class_baggie ;
66262: LD_ADDR_OWVAR 28
66266: PUSH
66267: LD_INT 13
66269: ST_TO_ADDR
// hc_gallery :=  ;
66270: LD_ADDR_OWVAR 33
66274: PUSH
66275: LD_STRING 
66277: ST_TO_ADDR
// end ;
66278: LD_VAR 0 1
66282: RET
// export function PrepareFrog ( ) ; begin
66283: LD_INT 0
66285: PPUSH
// uc_side := 0 ;
66286: LD_ADDR_OWVAR 20
66290: PUSH
66291: LD_INT 0
66293: ST_TO_ADDR
// uc_nation := 0 ;
66294: LD_ADDR_OWVAR 21
66298: PUSH
66299: LD_INT 0
66301: ST_TO_ADDR
// hc_class := class_frog ;
66302: LD_ADDR_OWVAR 28
66306: PUSH
66307: LD_INT 19
66309: ST_TO_ADDR
// hc_gallery :=  ;
66310: LD_ADDR_OWVAR 33
66314: PUSH
66315: LD_STRING 
66317: ST_TO_ADDR
// end ;
66318: LD_VAR 0 1
66322: RET
// export function PrepareFish ( ) ; begin
66323: LD_INT 0
66325: PPUSH
// uc_side := 0 ;
66326: LD_ADDR_OWVAR 20
66330: PUSH
66331: LD_INT 0
66333: ST_TO_ADDR
// uc_nation := 0 ;
66334: LD_ADDR_OWVAR 21
66338: PUSH
66339: LD_INT 0
66341: ST_TO_ADDR
// hc_class := class_fish ;
66342: LD_ADDR_OWVAR 28
66346: PUSH
66347: LD_INT 20
66349: ST_TO_ADDR
// hc_gallery :=  ;
66350: LD_ADDR_OWVAR 33
66354: PUSH
66355: LD_STRING 
66357: ST_TO_ADDR
// end ;
66358: LD_VAR 0 1
66362: RET
// export function PrepareBird ( ) ; begin
66363: LD_INT 0
66365: PPUSH
// uc_side := 0 ;
66366: LD_ADDR_OWVAR 20
66370: PUSH
66371: LD_INT 0
66373: ST_TO_ADDR
// uc_nation := 0 ;
66374: LD_ADDR_OWVAR 21
66378: PUSH
66379: LD_INT 0
66381: ST_TO_ADDR
// hc_class := class_phororhacos ;
66382: LD_ADDR_OWVAR 28
66386: PUSH
66387: LD_INT 18
66389: ST_TO_ADDR
// hc_gallery :=  ;
66390: LD_ADDR_OWVAR 33
66394: PUSH
66395: LD_STRING 
66397: ST_TO_ADDR
// end ;
66398: LD_VAR 0 1
66402: RET
// export function PrepareHorse ( ) ; begin
66403: LD_INT 0
66405: PPUSH
// uc_side := 0 ;
66406: LD_ADDR_OWVAR 20
66410: PUSH
66411: LD_INT 0
66413: ST_TO_ADDR
// uc_nation := 0 ;
66414: LD_ADDR_OWVAR 21
66418: PUSH
66419: LD_INT 0
66421: ST_TO_ADDR
// hc_class := class_horse ;
66422: LD_ADDR_OWVAR 28
66426: PUSH
66427: LD_INT 21
66429: ST_TO_ADDR
// hc_gallery :=  ;
66430: LD_ADDR_OWVAR 33
66434: PUSH
66435: LD_STRING 
66437: ST_TO_ADDR
// end ;
66438: LD_VAR 0 1
66442: RET
// export function PrepareMastodont ( ) ; begin
66443: LD_INT 0
66445: PPUSH
// uc_side := 0 ;
66446: LD_ADDR_OWVAR 20
66450: PUSH
66451: LD_INT 0
66453: ST_TO_ADDR
// uc_nation := 0 ;
66454: LD_ADDR_OWVAR 21
66458: PUSH
66459: LD_INT 0
66461: ST_TO_ADDR
// vc_chassis := class_mastodont ;
66462: LD_ADDR_OWVAR 37
66466: PUSH
66467: LD_INT 31
66469: ST_TO_ADDR
// vc_control := control_rider ;
66470: LD_ADDR_OWVAR 38
66474: PUSH
66475: LD_INT 4
66477: ST_TO_ADDR
// end ;
66478: LD_VAR 0 1
66482: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
66483: LD_INT 0
66485: PPUSH
66486: PPUSH
66487: PPUSH
// uc_side = 0 ;
66488: LD_ADDR_OWVAR 20
66492: PUSH
66493: LD_INT 0
66495: ST_TO_ADDR
// uc_nation = 0 ;
66496: LD_ADDR_OWVAR 21
66500: PUSH
66501: LD_INT 0
66503: ST_TO_ADDR
// InitHc_All ( ) ;
66504: CALL_OW 584
// InitVc ;
66508: CALL_OW 20
// if mastodonts then
66512: LD_VAR 0 6
66516: IFFALSE 66583
// for i = 1 to mastodonts do
66518: LD_ADDR_VAR 0 11
66522: PUSH
66523: DOUBLE
66524: LD_INT 1
66526: DEC
66527: ST_TO_ADDR
66528: LD_VAR 0 6
66532: PUSH
66533: FOR_TO
66534: IFFALSE 66581
// begin vc_chassis := 31 ;
66536: LD_ADDR_OWVAR 37
66540: PUSH
66541: LD_INT 31
66543: ST_TO_ADDR
// vc_control := control_rider ;
66544: LD_ADDR_OWVAR 38
66548: PUSH
66549: LD_INT 4
66551: ST_TO_ADDR
// animal := CreateVehicle ;
66552: LD_ADDR_VAR 0 12
66556: PUSH
66557: CALL_OW 45
66561: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66562: LD_VAR 0 12
66566: PPUSH
66567: LD_VAR 0 8
66571: PPUSH
66572: LD_INT 0
66574: PPUSH
66575: CALL 68711 0 3
// end ;
66579: GO 66533
66581: POP
66582: POP
// if horses then
66583: LD_VAR 0 5
66587: IFFALSE 66654
// for i = 1 to horses do
66589: LD_ADDR_VAR 0 11
66593: PUSH
66594: DOUBLE
66595: LD_INT 1
66597: DEC
66598: ST_TO_ADDR
66599: LD_VAR 0 5
66603: PUSH
66604: FOR_TO
66605: IFFALSE 66652
// begin hc_class := 21 ;
66607: LD_ADDR_OWVAR 28
66611: PUSH
66612: LD_INT 21
66614: ST_TO_ADDR
// hc_gallery :=  ;
66615: LD_ADDR_OWVAR 33
66619: PUSH
66620: LD_STRING 
66622: ST_TO_ADDR
// animal := CreateHuman ;
66623: LD_ADDR_VAR 0 12
66627: PUSH
66628: CALL_OW 44
66632: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66633: LD_VAR 0 12
66637: PPUSH
66638: LD_VAR 0 8
66642: PPUSH
66643: LD_INT 0
66645: PPUSH
66646: CALL 68711 0 3
// end ;
66650: GO 66604
66652: POP
66653: POP
// if birds then
66654: LD_VAR 0 1
66658: IFFALSE 66725
// for i = 1 to birds do
66660: LD_ADDR_VAR 0 11
66664: PUSH
66665: DOUBLE
66666: LD_INT 1
66668: DEC
66669: ST_TO_ADDR
66670: LD_VAR 0 1
66674: PUSH
66675: FOR_TO
66676: IFFALSE 66723
// begin hc_class = 18 ;
66678: LD_ADDR_OWVAR 28
66682: PUSH
66683: LD_INT 18
66685: ST_TO_ADDR
// hc_gallery =  ;
66686: LD_ADDR_OWVAR 33
66690: PUSH
66691: LD_STRING 
66693: ST_TO_ADDR
// animal := CreateHuman ;
66694: LD_ADDR_VAR 0 12
66698: PUSH
66699: CALL_OW 44
66703: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66704: LD_VAR 0 12
66708: PPUSH
66709: LD_VAR 0 8
66713: PPUSH
66714: LD_INT 0
66716: PPUSH
66717: CALL 68711 0 3
// end ;
66721: GO 66675
66723: POP
66724: POP
// if tigers then
66725: LD_VAR 0 2
66729: IFFALSE 66813
// for i = 1 to tigers do
66731: LD_ADDR_VAR 0 11
66735: PUSH
66736: DOUBLE
66737: LD_INT 1
66739: DEC
66740: ST_TO_ADDR
66741: LD_VAR 0 2
66745: PUSH
66746: FOR_TO
66747: IFFALSE 66811
// begin hc_class = class_tiger ;
66749: LD_ADDR_OWVAR 28
66753: PUSH
66754: LD_INT 14
66756: ST_TO_ADDR
// hc_gallery =  ;
66757: LD_ADDR_OWVAR 33
66761: PUSH
66762: LD_STRING 
66764: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
66765: LD_ADDR_OWVAR 35
66769: PUSH
66770: LD_INT 7
66772: NEG
66773: PPUSH
66774: LD_INT 7
66776: PPUSH
66777: CALL_OW 12
66781: ST_TO_ADDR
// animal := CreateHuman ;
66782: LD_ADDR_VAR 0 12
66786: PUSH
66787: CALL_OW 44
66791: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66792: LD_VAR 0 12
66796: PPUSH
66797: LD_VAR 0 8
66801: PPUSH
66802: LD_INT 0
66804: PPUSH
66805: CALL 68711 0 3
// end ;
66809: GO 66746
66811: POP
66812: POP
// if apemans then
66813: LD_VAR 0 3
66817: IFFALSE 66940
// for i = 1 to apemans do
66819: LD_ADDR_VAR 0 11
66823: PUSH
66824: DOUBLE
66825: LD_INT 1
66827: DEC
66828: ST_TO_ADDR
66829: LD_VAR 0 3
66833: PUSH
66834: FOR_TO
66835: IFFALSE 66938
// begin hc_class = class_apeman ;
66837: LD_ADDR_OWVAR 28
66841: PUSH
66842: LD_INT 12
66844: ST_TO_ADDR
// hc_gallery =  ;
66845: LD_ADDR_OWVAR 33
66849: PUSH
66850: LD_STRING 
66852: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
66853: LD_ADDR_OWVAR 35
66857: PUSH
66858: LD_INT 2
66860: NEG
66861: PPUSH
66862: LD_INT 2
66864: PPUSH
66865: CALL_OW 12
66869: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
66870: LD_ADDR_OWVAR 31
66874: PUSH
66875: LD_INT 1
66877: PPUSH
66878: LD_INT 3
66880: PPUSH
66881: CALL_OW 12
66885: PUSH
66886: LD_INT 1
66888: PPUSH
66889: LD_INT 3
66891: PPUSH
66892: CALL_OW 12
66896: PUSH
66897: LD_INT 0
66899: PUSH
66900: LD_INT 0
66902: PUSH
66903: EMPTY
66904: LIST
66905: LIST
66906: LIST
66907: LIST
66908: ST_TO_ADDR
// animal := CreateHuman ;
66909: LD_ADDR_VAR 0 12
66913: PUSH
66914: CALL_OW 44
66918: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66919: LD_VAR 0 12
66923: PPUSH
66924: LD_VAR 0 8
66928: PPUSH
66929: LD_INT 0
66931: PPUSH
66932: CALL 68711 0 3
// end ;
66936: GO 66834
66938: POP
66939: POP
// if enchidnas then
66940: LD_VAR 0 4
66944: IFFALSE 67011
// for i = 1 to enchidnas do
66946: LD_ADDR_VAR 0 11
66950: PUSH
66951: DOUBLE
66952: LD_INT 1
66954: DEC
66955: ST_TO_ADDR
66956: LD_VAR 0 4
66960: PUSH
66961: FOR_TO
66962: IFFALSE 67009
// begin hc_class = 13 ;
66964: LD_ADDR_OWVAR 28
66968: PUSH
66969: LD_INT 13
66971: ST_TO_ADDR
// hc_gallery =  ;
66972: LD_ADDR_OWVAR 33
66976: PUSH
66977: LD_STRING 
66979: ST_TO_ADDR
// animal := CreateHuman ;
66980: LD_ADDR_VAR 0 12
66984: PUSH
66985: CALL_OW 44
66989: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66990: LD_VAR 0 12
66994: PPUSH
66995: LD_VAR 0 8
66999: PPUSH
67000: LD_INT 0
67002: PPUSH
67003: CALL 68711 0 3
// end ;
67007: GO 66961
67009: POP
67010: POP
// if fishes then
67011: LD_VAR 0 7
67015: IFFALSE 67082
// for i = 1 to fishes do
67017: LD_ADDR_VAR 0 11
67021: PUSH
67022: DOUBLE
67023: LD_INT 1
67025: DEC
67026: ST_TO_ADDR
67027: LD_VAR 0 7
67031: PUSH
67032: FOR_TO
67033: IFFALSE 67080
// begin hc_class = 20 ;
67035: LD_ADDR_OWVAR 28
67039: PUSH
67040: LD_INT 20
67042: ST_TO_ADDR
// hc_gallery =  ;
67043: LD_ADDR_OWVAR 33
67047: PUSH
67048: LD_STRING 
67050: ST_TO_ADDR
// animal := CreateHuman ;
67051: LD_ADDR_VAR 0 12
67055: PUSH
67056: CALL_OW 44
67060: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
67061: LD_VAR 0 12
67065: PPUSH
67066: LD_VAR 0 9
67070: PPUSH
67071: LD_INT 0
67073: PPUSH
67074: CALL 68711 0 3
// end ;
67078: GO 67032
67080: POP
67081: POP
// end ;
67082: LD_VAR 0 10
67086: RET
// export function WantHeal ( sci , unit ) ; begin
67087: LD_INT 0
67089: PPUSH
// if GetTaskList ( sci ) > 0 then
67090: LD_VAR 0 1
67094: PPUSH
67095: CALL_OW 437
67099: PUSH
67100: LD_INT 0
67102: GREATER
67103: IFFALSE 67173
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
67105: LD_VAR 0 1
67109: PPUSH
67110: CALL_OW 437
67114: PUSH
67115: LD_INT 1
67117: ARRAY
67118: PUSH
67119: LD_INT 1
67121: ARRAY
67122: PUSH
67123: LD_STRING l
67125: EQUAL
67126: PUSH
67127: LD_VAR 0 1
67131: PPUSH
67132: CALL_OW 437
67136: PUSH
67137: LD_INT 1
67139: ARRAY
67140: PUSH
67141: LD_INT 4
67143: ARRAY
67144: PUSH
67145: LD_VAR 0 2
67149: EQUAL
67150: AND
67151: IFFALSE 67163
// result := true else
67153: LD_ADDR_VAR 0 3
67157: PUSH
67158: LD_INT 1
67160: ST_TO_ADDR
67161: GO 67171
// result := false ;
67163: LD_ADDR_VAR 0 3
67167: PUSH
67168: LD_INT 0
67170: ST_TO_ADDR
// end else
67171: GO 67181
// result := false ;
67173: LD_ADDR_VAR 0 3
67177: PUSH
67178: LD_INT 0
67180: ST_TO_ADDR
// end ;
67181: LD_VAR 0 3
67185: RET
// export function HealTarget ( sci ) ; begin
67186: LD_INT 0
67188: PPUSH
// if not sci then
67189: LD_VAR 0 1
67193: NOT
67194: IFFALSE 67198
// exit ;
67196: GO 67263
// result := 0 ;
67198: LD_ADDR_VAR 0 2
67202: PUSH
67203: LD_INT 0
67205: ST_TO_ADDR
// if GetTaskList ( sci ) then
67206: LD_VAR 0 1
67210: PPUSH
67211: CALL_OW 437
67215: IFFALSE 67263
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
67217: LD_VAR 0 1
67221: PPUSH
67222: CALL_OW 437
67226: PUSH
67227: LD_INT 1
67229: ARRAY
67230: PUSH
67231: LD_INT 1
67233: ARRAY
67234: PUSH
67235: LD_STRING l
67237: EQUAL
67238: IFFALSE 67263
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
67240: LD_ADDR_VAR 0 2
67244: PUSH
67245: LD_VAR 0 1
67249: PPUSH
67250: CALL_OW 437
67254: PUSH
67255: LD_INT 1
67257: ARRAY
67258: PUSH
67259: LD_INT 4
67261: ARRAY
67262: ST_TO_ADDR
// end ;
67263: LD_VAR 0 2
67267: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
67268: LD_INT 0
67270: PPUSH
67271: PPUSH
67272: PPUSH
67273: PPUSH
// if not base_units then
67274: LD_VAR 0 1
67278: NOT
67279: IFFALSE 67283
// exit ;
67281: GO 67370
// result := false ;
67283: LD_ADDR_VAR 0 2
67287: PUSH
67288: LD_INT 0
67290: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
67291: LD_ADDR_VAR 0 5
67295: PUSH
67296: LD_VAR 0 1
67300: PPUSH
67301: LD_INT 21
67303: PUSH
67304: LD_INT 3
67306: PUSH
67307: EMPTY
67308: LIST
67309: LIST
67310: PPUSH
67311: CALL_OW 72
67315: ST_TO_ADDR
// if not tmp then
67316: LD_VAR 0 5
67320: NOT
67321: IFFALSE 67325
// exit ;
67323: GO 67370
// for i in tmp do
67325: LD_ADDR_VAR 0 3
67329: PUSH
67330: LD_VAR 0 5
67334: PUSH
67335: FOR_IN
67336: IFFALSE 67368
// begin result := EnemyInRange ( i , 22 ) ;
67338: LD_ADDR_VAR 0 2
67342: PUSH
67343: LD_VAR 0 3
67347: PPUSH
67348: LD_INT 22
67350: PPUSH
67351: CALL 64957 0 2
67355: ST_TO_ADDR
// if result then
67356: LD_VAR 0 2
67360: IFFALSE 67366
// exit ;
67362: POP
67363: POP
67364: GO 67370
// end ;
67366: GO 67335
67368: POP
67369: POP
// end ;
67370: LD_VAR 0 2
67374: RET
// export function FilterByTag ( units , tag ) ; begin
67375: LD_INT 0
67377: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
67378: LD_ADDR_VAR 0 3
67382: PUSH
67383: LD_VAR 0 1
67387: PPUSH
67388: LD_INT 120
67390: PUSH
67391: LD_VAR 0 2
67395: PUSH
67396: EMPTY
67397: LIST
67398: LIST
67399: PPUSH
67400: CALL_OW 72
67404: ST_TO_ADDR
// end ;
67405: LD_VAR 0 3
67409: RET
// export function IsDriver ( un ) ; begin
67410: LD_INT 0
67412: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
67413: LD_ADDR_VAR 0 2
67417: PUSH
67418: LD_VAR 0 1
67422: PUSH
67423: LD_INT 55
67425: PUSH
67426: EMPTY
67427: LIST
67428: PPUSH
67429: CALL_OW 69
67433: IN
67434: ST_TO_ADDR
// end ;
67435: LD_VAR 0 2
67439: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
67440: LD_INT 0
67442: PPUSH
67443: PPUSH
// list := [ ] ;
67444: LD_ADDR_VAR 0 5
67448: PUSH
67449: EMPTY
67450: ST_TO_ADDR
// case d of 0 :
67451: LD_VAR 0 3
67455: PUSH
67456: LD_INT 0
67458: DOUBLE
67459: EQUAL
67460: IFTRUE 67464
67462: GO 67597
67464: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
67465: LD_ADDR_VAR 0 5
67469: PUSH
67470: LD_VAR 0 1
67474: PUSH
67475: LD_INT 4
67477: MINUS
67478: PUSH
67479: LD_VAR 0 2
67483: PUSH
67484: LD_INT 4
67486: MINUS
67487: PUSH
67488: LD_INT 2
67490: PUSH
67491: EMPTY
67492: LIST
67493: LIST
67494: LIST
67495: PUSH
67496: LD_VAR 0 1
67500: PUSH
67501: LD_INT 3
67503: MINUS
67504: PUSH
67505: LD_VAR 0 2
67509: PUSH
67510: LD_INT 1
67512: PUSH
67513: EMPTY
67514: LIST
67515: LIST
67516: LIST
67517: PUSH
67518: LD_VAR 0 1
67522: PUSH
67523: LD_INT 4
67525: PLUS
67526: PUSH
67527: LD_VAR 0 2
67531: PUSH
67532: LD_INT 4
67534: PUSH
67535: EMPTY
67536: LIST
67537: LIST
67538: LIST
67539: PUSH
67540: LD_VAR 0 1
67544: PUSH
67545: LD_INT 3
67547: PLUS
67548: PUSH
67549: LD_VAR 0 2
67553: PUSH
67554: LD_INT 3
67556: PLUS
67557: PUSH
67558: LD_INT 5
67560: PUSH
67561: EMPTY
67562: LIST
67563: LIST
67564: LIST
67565: PUSH
67566: LD_VAR 0 1
67570: PUSH
67571: LD_VAR 0 2
67575: PUSH
67576: LD_INT 4
67578: PLUS
67579: PUSH
67580: LD_INT 0
67582: PUSH
67583: EMPTY
67584: LIST
67585: LIST
67586: LIST
67587: PUSH
67588: EMPTY
67589: LIST
67590: LIST
67591: LIST
67592: LIST
67593: LIST
67594: ST_TO_ADDR
// end ; 1 :
67595: GO 68295
67597: LD_INT 1
67599: DOUBLE
67600: EQUAL
67601: IFTRUE 67605
67603: GO 67738
67605: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
67606: LD_ADDR_VAR 0 5
67610: PUSH
67611: LD_VAR 0 1
67615: PUSH
67616: LD_VAR 0 2
67620: PUSH
67621: LD_INT 4
67623: MINUS
67624: PUSH
67625: LD_INT 3
67627: PUSH
67628: EMPTY
67629: LIST
67630: LIST
67631: LIST
67632: PUSH
67633: LD_VAR 0 1
67637: PUSH
67638: LD_INT 3
67640: MINUS
67641: PUSH
67642: LD_VAR 0 2
67646: PUSH
67647: LD_INT 3
67649: MINUS
67650: PUSH
67651: LD_INT 2
67653: PUSH
67654: EMPTY
67655: LIST
67656: LIST
67657: LIST
67658: PUSH
67659: LD_VAR 0 1
67663: PUSH
67664: LD_INT 4
67666: MINUS
67667: PUSH
67668: LD_VAR 0 2
67672: PUSH
67673: LD_INT 1
67675: PUSH
67676: EMPTY
67677: LIST
67678: LIST
67679: LIST
67680: PUSH
67681: LD_VAR 0 1
67685: PUSH
67686: LD_VAR 0 2
67690: PUSH
67691: LD_INT 3
67693: PLUS
67694: PUSH
67695: LD_INT 0
67697: PUSH
67698: EMPTY
67699: LIST
67700: LIST
67701: LIST
67702: PUSH
67703: LD_VAR 0 1
67707: PUSH
67708: LD_INT 4
67710: PLUS
67711: PUSH
67712: LD_VAR 0 2
67716: PUSH
67717: LD_INT 4
67719: PLUS
67720: PUSH
67721: LD_INT 5
67723: PUSH
67724: EMPTY
67725: LIST
67726: LIST
67727: LIST
67728: PUSH
67729: EMPTY
67730: LIST
67731: LIST
67732: LIST
67733: LIST
67734: LIST
67735: ST_TO_ADDR
// end ; 2 :
67736: GO 68295
67738: LD_INT 2
67740: DOUBLE
67741: EQUAL
67742: IFTRUE 67746
67744: GO 67875
67746: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
67747: LD_ADDR_VAR 0 5
67751: PUSH
67752: LD_VAR 0 1
67756: PUSH
67757: LD_VAR 0 2
67761: PUSH
67762: LD_INT 3
67764: MINUS
67765: PUSH
67766: LD_INT 3
67768: PUSH
67769: EMPTY
67770: LIST
67771: LIST
67772: LIST
67773: PUSH
67774: LD_VAR 0 1
67778: PUSH
67779: LD_INT 4
67781: PLUS
67782: PUSH
67783: LD_VAR 0 2
67787: PUSH
67788: LD_INT 4
67790: PUSH
67791: EMPTY
67792: LIST
67793: LIST
67794: LIST
67795: PUSH
67796: LD_VAR 0 1
67800: PUSH
67801: LD_VAR 0 2
67805: PUSH
67806: LD_INT 4
67808: PLUS
67809: PUSH
67810: LD_INT 0
67812: PUSH
67813: EMPTY
67814: LIST
67815: LIST
67816: LIST
67817: PUSH
67818: LD_VAR 0 1
67822: PUSH
67823: LD_INT 3
67825: MINUS
67826: PUSH
67827: LD_VAR 0 2
67831: PUSH
67832: LD_INT 1
67834: PUSH
67835: EMPTY
67836: LIST
67837: LIST
67838: LIST
67839: PUSH
67840: LD_VAR 0 1
67844: PUSH
67845: LD_INT 4
67847: MINUS
67848: PUSH
67849: LD_VAR 0 2
67853: PUSH
67854: LD_INT 4
67856: MINUS
67857: PUSH
67858: LD_INT 2
67860: PUSH
67861: EMPTY
67862: LIST
67863: LIST
67864: LIST
67865: PUSH
67866: EMPTY
67867: LIST
67868: LIST
67869: LIST
67870: LIST
67871: LIST
67872: ST_TO_ADDR
// end ; 3 :
67873: GO 68295
67875: LD_INT 3
67877: DOUBLE
67878: EQUAL
67879: IFTRUE 67883
67881: GO 68016
67883: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
67884: LD_ADDR_VAR 0 5
67888: PUSH
67889: LD_VAR 0 1
67893: PUSH
67894: LD_INT 3
67896: PLUS
67897: PUSH
67898: LD_VAR 0 2
67902: PUSH
67903: LD_INT 4
67905: PUSH
67906: EMPTY
67907: LIST
67908: LIST
67909: LIST
67910: PUSH
67911: LD_VAR 0 1
67915: PUSH
67916: LD_INT 4
67918: PLUS
67919: PUSH
67920: LD_VAR 0 2
67924: PUSH
67925: LD_INT 4
67927: PLUS
67928: PUSH
67929: LD_INT 5
67931: PUSH
67932: EMPTY
67933: LIST
67934: LIST
67935: LIST
67936: PUSH
67937: LD_VAR 0 1
67941: PUSH
67942: LD_INT 4
67944: MINUS
67945: PUSH
67946: LD_VAR 0 2
67950: PUSH
67951: LD_INT 1
67953: PUSH
67954: EMPTY
67955: LIST
67956: LIST
67957: LIST
67958: PUSH
67959: LD_VAR 0 1
67963: PUSH
67964: LD_VAR 0 2
67968: PUSH
67969: LD_INT 4
67971: MINUS
67972: PUSH
67973: LD_INT 3
67975: PUSH
67976: EMPTY
67977: LIST
67978: LIST
67979: LIST
67980: PUSH
67981: LD_VAR 0 1
67985: PUSH
67986: LD_INT 3
67988: MINUS
67989: PUSH
67990: LD_VAR 0 2
67994: PUSH
67995: LD_INT 3
67997: MINUS
67998: PUSH
67999: LD_INT 2
68001: PUSH
68002: EMPTY
68003: LIST
68004: LIST
68005: LIST
68006: PUSH
68007: EMPTY
68008: LIST
68009: LIST
68010: LIST
68011: LIST
68012: LIST
68013: ST_TO_ADDR
// end ; 4 :
68014: GO 68295
68016: LD_INT 4
68018: DOUBLE
68019: EQUAL
68020: IFTRUE 68024
68022: GO 68157
68024: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
68025: LD_ADDR_VAR 0 5
68029: PUSH
68030: LD_VAR 0 1
68034: PUSH
68035: LD_VAR 0 2
68039: PUSH
68040: LD_INT 4
68042: PLUS
68043: PUSH
68044: LD_INT 0
68046: PUSH
68047: EMPTY
68048: LIST
68049: LIST
68050: LIST
68051: PUSH
68052: LD_VAR 0 1
68056: PUSH
68057: LD_INT 3
68059: PLUS
68060: PUSH
68061: LD_VAR 0 2
68065: PUSH
68066: LD_INT 3
68068: PLUS
68069: PUSH
68070: LD_INT 5
68072: PUSH
68073: EMPTY
68074: LIST
68075: LIST
68076: LIST
68077: PUSH
68078: LD_VAR 0 1
68082: PUSH
68083: LD_INT 4
68085: PLUS
68086: PUSH
68087: LD_VAR 0 2
68091: PUSH
68092: LD_INT 4
68094: PUSH
68095: EMPTY
68096: LIST
68097: LIST
68098: LIST
68099: PUSH
68100: LD_VAR 0 1
68104: PUSH
68105: LD_VAR 0 2
68109: PUSH
68110: LD_INT 3
68112: MINUS
68113: PUSH
68114: LD_INT 3
68116: PUSH
68117: EMPTY
68118: LIST
68119: LIST
68120: LIST
68121: PUSH
68122: LD_VAR 0 1
68126: PUSH
68127: LD_INT 4
68129: MINUS
68130: PUSH
68131: LD_VAR 0 2
68135: PUSH
68136: LD_INT 4
68138: MINUS
68139: PUSH
68140: LD_INT 2
68142: PUSH
68143: EMPTY
68144: LIST
68145: LIST
68146: LIST
68147: PUSH
68148: EMPTY
68149: LIST
68150: LIST
68151: LIST
68152: LIST
68153: LIST
68154: ST_TO_ADDR
// end ; 5 :
68155: GO 68295
68157: LD_INT 5
68159: DOUBLE
68160: EQUAL
68161: IFTRUE 68165
68163: GO 68294
68165: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
68166: LD_ADDR_VAR 0 5
68170: PUSH
68171: LD_VAR 0 1
68175: PUSH
68176: LD_INT 4
68178: MINUS
68179: PUSH
68180: LD_VAR 0 2
68184: PUSH
68185: LD_INT 1
68187: PUSH
68188: EMPTY
68189: LIST
68190: LIST
68191: LIST
68192: PUSH
68193: LD_VAR 0 1
68197: PUSH
68198: LD_VAR 0 2
68202: PUSH
68203: LD_INT 4
68205: MINUS
68206: PUSH
68207: LD_INT 3
68209: PUSH
68210: EMPTY
68211: LIST
68212: LIST
68213: LIST
68214: PUSH
68215: LD_VAR 0 1
68219: PUSH
68220: LD_INT 4
68222: PLUS
68223: PUSH
68224: LD_VAR 0 2
68228: PUSH
68229: LD_INT 4
68231: PLUS
68232: PUSH
68233: LD_INT 5
68235: PUSH
68236: EMPTY
68237: LIST
68238: LIST
68239: LIST
68240: PUSH
68241: LD_VAR 0 1
68245: PUSH
68246: LD_INT 3
68248: PLUS
68249: PUSH
68250: LD_VAR 0 2
68254: PUSH
68255: LD_INT 4
68257: PUSH
68258: EMPTY
68259: LIST
68260: LIST
68261: LIST
68262: PUSH
68263: LD_VAR 0 1
68267: PUSH
68268: LD_VAR 0 2
68272: PUSH
68273: LD_INT 3
68275: PLUS
68276: PUSH
68277: LD_INT 0
68279: PUSH
68280: EMPTY
68281: LIST
68282: LIST
68283: LIST
68284: PUSH
68285: EMPTY
68286: LIST
68287: LIST
68288: LIST
68289: LIST
68290: LIST
68291: ST_TO_ADDR
// end ; end ;
68292: GO 68295
68294: POP
// result := list ;
68295: LD_ADDR_VAR 0 4
68299: PUSH
68300: LD_VAR 0 5
68304: ST_TO_ADDR
// end ;
68305: LD_VAR 0 4
68309: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
68310: LD_INT 0
68312: PPUSH
68313: PPUSH
68314: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
68315: LD_VAR 0 1
68319: NOT
68320: PUSH
68321: LD_VAR 0 2
68325: PUSH
68326: LD_INT 1
68328: PUSH
68329: LD_INT 2
68331: PUSH
68332: LD_INT 3
68334: PUSH
68335: LD_INT 4
68337: PUSH
68338: EMPTY
68339: LIST
68340: LIST
68341: LIST
68342: LIST
68343: IN
68344: NOT
68345: OR
68346: IFFALSE 68350
// exit ;
68348: GO 68433
// tmp := [ ] ;
68350: LD_ADDR_VAR 0 5
68354: PUSH
68355: EMPTY
68356: ST_TO_ADDR
// for i in units do
68357: LD_ADDR_VAR 0 4
68361: PUSH
68362: LD_VAR 0 1
68366: PUSH
68367: FOR_IN
68368: IFFALSE 68402
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
68370: LD_ADDR_VAR 0 5
68374: PUSH
68375: LD_VAR 0 5
68379: PPUSH
68380: LD_VAR 0 4
68384: PPUSH
68385: LD_VAR 0 2
68389: PPUSH
68390: CALL_OW 259
68394: PPUSH
68395: CALL 69794 0 2
68399: ST_TO_ADDR
68400: GO 68367
68402: POP
68403: POP
// if not tmp then
68404: LD_VAR 0 5
68408: NOT
68409: IFFALSE 68413
// exit ;
68411: GO 68433
// result := SortListByListDesc ( units , tmp ) ;
68413: LD_ADDR_VAR 0 3
68417: PUSH
68418: LD_VAR 0 1
68422: PPUSH
68423: LD_VAR 0 5
68427: PPUSH
68428: CALL_OW 77
68432: ST_TO_ADDR
// end ;
68433: LD_VAR 0 3
68437: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
68438: LD_INT 0
68440: PPUSH
68441: PPUSH
68442: PPUSH
// result := false ;
68443: LD_ADDR_VAR 0 3
68447: PUSH
68448: LD_INT 0
68450: ST_TO_ADDR
// if not building then
68451: LD_VAR 0 2
68455: NOT
68456: IFFALSE 68460
// exit ;
68458: GO 68598
// x := GetX ( building ) ;
68460: LD_ADDR_VAR 0 4
68464: PUSH
68465: LD_VAR 0 2
68469: PPUSH
68470: CALL_OW 250
68474: ST_TO_ADDR
// y := GetY ( building ) ;
68475: LD_ADDR_VAR 0 5
68479: PUSH
68480: LD_VAR 0 2
68484: PPUSH
68485: CALL_OW 251
68489: ST_TO_ADDR
// if not x or not y then
68490: LD_VAR 0 4
68494: NOT
68495: PUSH
68496: LD_VAR 0 5
68500: NOT
68501: OR
68502: IFFALSE 68506
// exit ;
68504: GO 68598
// if GetTaskList ( unit ) then
68506: LD_VAR 0 1
68510: PPUSH
68511: CALL_OW 437
68515: IFFALSE 68598
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
68517: LD_STRING e
68519: PUSH
68520: LD_VAR 0 1
68524: PPUSH
68525: CALL_OW 437
68529: PUSH
68530: LD_INT 1
68532: ARRAY
68533: PUSH
68534: LD_INT 1
68536: ARRAY
68537: EQUAL
68538: PUSH
68539: LD_VAR 0 4
68543: PUSH
68544: LD_VAR 0 1
68548: PPUSH
68549: CALL_OW 437
68553: PUSH
68554: LD_INT 1
68556: ARRAY
68557: PUSH
68558: LD_INT 2
68560: ARRAY
68561: EQUAL
68562: AND
68563: PUSH
68564: LD_VAR 0 5
68568: PUSH
68569: LD_VAR 0 1
68573: PPUSH
68574: CALL_OW 437
68578: PUSH
68579: LD_INT 1
68581: ARRAY
68582: PUSH
68583: LD_INT 3
68585: ARRAY
68586: EQUAL
68587: AND
68588: IFFALSE 68598
// result := true end ;
68590: LD_ADDR_VAR 0 3
68594: PUSH
68595: LD_INT 1
68597: ST_TO_ADDR
// end ;
68598: LD_VAR 0 3
68602: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
68603: LD_INT 0
68605: PPUSH
// result := false ;
68606: LD_ADDR_VAR 0 4
68610: PUSH
68611: LD_INT 0
68613: ST_TO_ADDR
// if GetTaskList ( unit ) then
68614: LD_VAR 0 1
68618: PPUSH
68619: CALL_OW 437
68623: IFFALSE 68706
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
68625: LD_STRING M
68627: PUSH
68628: LD_VAR 0 1
68632: PPUSH
68633: CALL_OW 437
68637: PUSH
68638: LD_INT 1
68640: ARRAY
68641: PUSH
68642: LD_INT 1
68644: ARRAY
68645: EQUAL
68646: PUSH
68647: LD_VAR 0 2
68651: PUSH
68652: LD_VAR 0 1
68656: PPUSH
68657: CALL_OW 437
68661: PUSH
68662: LD_INT 1
68664: ARRAY
68665: PUSH
68666: LD_INT 2
68668: ARRAY
68669: EQUAL
68670: AND
68671: PUSH
68672: LD_VAR 0 3
68676: PUSH
68677: LD_VAR 0 1
68681: PPUSH
68682: CALL_OW 437
68686: PUSH
68687: LD_INT 1
68689: ARRAY
68690: PUSH
68691: LD_INT 3
68693: ARRAY
68694: EQUAL
68695: AND
68696: IFFALSE 68706
// result := true ;
68698: LD_ADDR_VAR 0 4
68702: PUSH
68703: LD_INT 1
68705: ST_TO_ADDR
// end ; end ;
68706: LD_VAR 0 4
68710: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
68711: LD_INT 0
68713: PPUSH
68714: PPUSH
68715: PPUSH
68716: PPUSH
// if not unit or not area then
68717: LD_VAR 0 1
68721: NOT
68722: PUSH
68723: LD_VAR 0 2
68727: NOT
68728: OR
68729: IFFALSE 68733
// exit ;
68731: GO 68897
// tmp := AreaToList ( area , i ) ;
68733: LD_ADDR_VAR 0 6
68737: PUSH
68738: LD_VAR 0 2
68742: PPUSH
68743: LD_VAR 0 5
68747: PPUSH
68748: CALL_OW 517
68752: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
68753: LD_ADDR_VAR 0 5
68757: PUSH
68758: DOUBLE
68759: LD_INT 1
68761: DEC
68762: ST_TO_ADDR
68763: LD_VAR 0 6
68767: PUSH
68768: LD_INT 1
68770: ARRAY
68771: PUSH
68772: FOR_TO
68773: IFFALSE 68895
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
68775: LD_ADDR_VAR 0 7
68779: PUSH
68780: LD_VAR 0 6
68784: PUSH
68785: LD_INT 1
68787: ARRAY
68788: PUSH
68789: LD_VAR 0 5
68793: ARRAY
68794: PUSH
68795: LD_VAR 0 6
68799: PUSH
68800: LD_INT 2
68802: ARRAY
68803: PUSH
68804: LD_VAR 0 5
68808: ARRAY
68809: PUSH
68810: EMPTY
68811: LIST
68812: LIST
68813: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
68814: LD_VAR 0 7
68818: PUSH
68819: LD_INT 1
68821: ARRAY
68822: PPUSH
68823: LD_VAR 0 7
68827: PUSH
68828: LD_INT 2
68830: ARRAY
68831: PPUSH
68832: CALL_OW 428
68836: PUSH
68837: LD_INT 0
68839: EQUAL
68840: IFFALSE 68893
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
68842: LD_VAR 0 1
68846: PPUSH
68847: LD_VAR 0 7
68851: PUSH
68852: LD_INT 1
68854: ARRAY
68855: PPUSH
68856: LD_VAR 0 7
68860: PUSH
68861: LD_INT 2
68863: ARRAY
68864: PPUSH
68865: LD_VAR 0 3
68869: PPUSH
68870: CALL_OW 48
// result := IsPlaced ( unit ) ;
68874: LD_ADDR_VAR 0 4
68878: PUSH
68879: LD_VAR 0 1
68883: PPUSH
68884: CALL_OW 305
68888: ST_TO_ADDR
// exit ;
68889: POP
68890: POP
68891: GO 68897
// end ; end ;
68893: GO 68772
68895: POP
68896: POP
// end ;
68897: LD_VAR 0 4
68901: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
68902: LD_INT 0
68904: PPUSH
68905: PPUSH
68906: PPUSH
// if not side or side > 8 then
68907: LD_VAR 0 1
68911: NOT
68912: PUSH
68913: LD_VAR 0 1
68917: PUSH
68918: LD_INT 8
68920: GREATER
68921: OR
68922: IFFALSE 68926
// exit ;
68924: GO 69113
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
68926: LD_ADDR_VAR 0 4
68930: PUSH
68931: LD_INT 22
68933: PUSH
68934: LD_VAR 0 1
68938: PUSH
68939: EMPTY
68940: LIST
68941: LIST
68942: PUSH
68943: LD_INT 21
68945: PUSH
68946: LD_INT 3
68948: PUSH
68949: EMPTY
68950: LIST
68951: LIST
68952: PUSH
68953: EMPTY
68954: LIST
68955: LIST
68956: PPUSH
68957: CALL_OW 69
68961: ST_TO_ADDR
// if not tmp then
68962: LD_VAR 0 4
68966: NOT
68967: IFFALSE 68971
// exit ;
68969: GO 69113
// enable_addtolog := true ;
68971: LD_ADDR_OWVAR 81
68975: PUSH
68976: LD_INT 1
68978: ST_TO_ADDR
// AddToLog ( [ ) ;
68979: LD_STRING [
68981: PPUSH
68982: CALL_OW 561
// for i in tmp do
68986: LD_ADDR_VAR 0 3
68990: PUSH
68991: LD_VAR 0 4
68995: PUSH
68996: FOR_IN
68997: IFFALSE 69104
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
68999: LD_STRING [
69001: PUSH
69002: LD_VAR 0 3
69006: PPUSH
69007: CALL_OW 266
69011: STR
69012: PUSH
69013: LD_STRING , 
69015: STR
69016: PUSH
69017: LD_VAR 0 3
69021: PPUSH
69022: CALL_OW 250
69026: STR
69027: PUSH
69028: LD_STRING , 
69030: STR
69031: PUSH
69032: LD_VAR 0 3
69036: PPUSH
69037: CALL_OW 251
69041: STR
69042: PUSH
69043: LD_STRING , 
69045: STR
69046: PUSH
69047: LD_VAR 0 3
69051: PPUSH
69052: CALL_OW 254
69056: STR
69057: PUSH
69058: LD_STRING , 
69060: STR
69061: PUSH
69062: LD_VAR 0 3
69066: PPUSH
69067: LD_INT 1
69069: PPUSH
69070: CALL_OW 268
69074: STR
69075: PUSH
69076: LD_STRING , 
69078: STR
69079: PUSH
69080: LD_VAR 0 3
69084: PPUSH
69085: LD_INT 2
69087: PPUSH
69088: CALL_OW 268
69092: STR
69093: PUSH
69094: LD_STRING ],
69096: STR
69097: PPUSH
69098: CALL_OW 561
// end ;
69102: GO 68996
69104: POP
69105: POP
// AddToLog ( ]; ) ;
69106: LD_STRING ];
69108: PPUSH
69109: CALL_OW 561
// end ;
69113: LD_VAR 0 2
69117: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
69118: LD_INT 0
69120: PPUSH
69121: PPUSH
69122: PPUSH
69123: PPUSH
69124: PPUSH
// if not area or not rate or not max then
69125: LD_VAR 0 1
69129: NOT
69130: PUSH
69131: LD_VAR 0 2
69135: NOT
69136: OR
69137: PUSH
69138: LD_VAR 0 4
69142: NOT
69143: OR
69144: IFFALSE 69148
// exit ;
69146: GO 69337
// while 1 do
69148: LD_INT 1
69150: IFFALSE 69337
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
69152: LD_ADDR_VAR 0 9
69156: PUSH
69157: LD_VAR 0 1
69161: PPUSH
69162: LD_INT 1
69164: PPUSH
69165: CALL_OW 287
69169: PUSH
69170: LD_INT 10
69172: MUL
69173: ST_TO_ADDR
// r := rate / 10 ;
69174: LD_ADDR_VAR 0 7
69178: PUSH
69179: LD_VAR 0 2
69183: PUSH
69184: LD_INT 10
69186: DIVREAL
69187: ST_TO_ADDR
// time := 1 1$00 ;
69188: LD_ADDR_VAR 0 8
69192: PUSH
69193: LD_INT 2100
69195: ST_TO_ADDR
// if amount < min then
69196: LD_VAR 0 9
69200: PUSH
69201: LD_VAR 0 3
69205: LESS
69206: IFFALSE 69224
// r := r * 2 else
69208: LD_ADDR_VAR 0 7
69212: PUSH
69213: LD_VAR 0 7
69217: PUSH
69218: LD_INT 2
69220: MUL
69221: ST_TO_ADDR
69222: GO 69250
// if amount > max then
69224: LD_VAR 0 9
69228: PUSH
69229: LD_VAR 0 4
69233: GREATER
69234: IFFALSE 69250
// r := r / 2 ;
69236: LD_ADDR_VAR 0 7
69240: PUSH
69241: LD_VAR 0 7
69245: PUSH
69246: LD_INT 2
69248: DIVREAL
69249: ST_TO_ADDR
// time := time / r ;
69250: LD_ADDR_VAR 0 8
69254: PUSH
69255: LD_VAR 0 8
69259: PUSH
69260: LD_VAR 0 7
69264: DIVREAL
69265: ST_TO_ADDR
// if time < 0 then
69266: LD_VAR 0 8
69270: PUSH
69271: LD_INT 0
69273: LESS
69274: IFFALSE 69291
// time := time * - 1 ;
69276: LD_ADDR_VAR 0 8
69280: PUSH
69281: LD_VAR 0 8
69285: PUSH
69286: LD_INT 1
69288: NEG
69289: MUL
69290: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
69291: LD_VAR 0 8
69295: PUSH
69296: LD_INT 35
69298: PPUSH
69299: LD_INT 875
69301: PPUSH
69302: CALL_OW 12
69306: PLUS
69307: PPUSH
69308: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
69312: LD_INT 1
69314: PPUSH
69315: LD_INT 5
69317: PPUSH
69318: CALL_OW 12
69322: PPUSH
69323: LD_VAR 0 1
69327: PPUSH
69328: LD_INT 1
69330: PPUSH
69331: CALL_OW 55
// end ;
69335: GO 69148
// end ;
69337: LD_VAR 0 5
69341: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
69342: LD_INT 0
69344: PPUSH
69345: PPUSH
69346: PPUSH
69347: PPUSH
69348: PPUSH
69349: PPUSH
69350: PPUSH
69351: PPUSH
// if not turrets or not factories then
69352: LD_VAR 0 1
69356: NOT
69357: PUSH
69358: LD_VAR 0 2
69362: NOT
69363: OR
69364: IFFALSE 69368
// exit ;
69366: GO 69675
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
69368: LD_ADDR_VAR 0 10
69372: PUSH
69373: LD_INT 5
69375: PUSH
69376: LD_INT 6
69378: PUSH
69379: EMPTY
69380: LIST
69381: LIST
69382: PUSH
69383: LD_INT 2
69385: PUSH
69386: LD_INT 4
69388: PUSH
69389: EMPTY
69390: LIST
69391: LIST
69392: PUSH
69393: LD_INT 3
69395: PUSH
69396: LD_INT 5
69398: PUSH
69399: EMPTY
69400: LIST
69401: LIST
69402: PUSH
69403: EMPTY
69404: LIST
69405: LIST
69406: LIST
69407: PUSH
69408: LD_INT 24
69410: PUSH
69411: LD_INT 25
69413: PUSH
69414: EMPTY
69415: LIST
69416: LIST
69417: PUSH
69418: LD_INT 23
69420: PUSH
69421: LD_INT 27
69423: PUSH
69424: EMPTY
69425: LIST
69426: LIST
69427: PUSH
69428: EMPTY
69429: LIST
69430: LIST
69431: PUSH
69432: LD_INT 42
69434: PUSH
69435: LD_INT 43
69437: PUSH
69438: EMPTY
69439: LIST
69440: LIST
69441: PUSH
69442: LD_INT 44
69444: PUSH
69445: LD_INT 46
69447: PUSH
69448: EMPTY
69449: LIST
69450: LIST
69451: PUSH
69452: LD_INT 45
69454: PUSH
69455: LD_INT 47
69457: PUSH
69458: EMPTY
69459: LIST
69460: LIST
69461: PUSH
69462: EMPTY
69463: LIST
69464: LIST
69465: LIST
69466: PUSH
69467: EMPTY
69468: LIST
69469: LIST
69470: LIST
69471: ST_TO_ADDR
// result := [ ] ;
69472: LD_ADDR_VAR 0 3
69476: PUSH
69477: EMPTY
69478: ST_TO_ADDR
// for i in turrets do
69479: LD_ADDR_VAR 0 4
69483: PUSH
69484: LD_VAR 0 1
69488: PUSH
69489: FOR_IN
69490: IFFALSE 69673
// begin nat := GetNation ( i ) ;
69492: LD_ADDR_VAR 0 7
69496: PUSH
69497: LD_VAR 0 4
69501: PPUSH
69502: CALL_OW 248
69506: ST_TO_ADDR
// weapon := 0 ;
69507: LD_ADDR_VAR 0 8
69511: PUSH
69512: LD_INT 0
69514: ST_TO_ADDR
// if not nat then
69515: LD_VAR 0 7
69519: NOT
69520: IFFALSE 69524
// continue ;
69522: GO 69489
// for j in list [ nat ] do
69524: LD_ADDR_VAR 0 5
69528: PUSH
69529: LD_VAR 0 10
69533: PUSH
69534: LD_VAR 0 7
69538: ARRAY
69539: PUSH
69540: FOR_IN
69541: IFFALSE 69582
// if GetBWeapon ( i ) = j [ 1 ] then
69543: LD_VAR 0 4
69547: PPUSH
69548: CALL_OW 269
69552: PUSH
69553: LD_VAR 0 5
69557: PUSH
69558: LD_INT 1
69560: ARRAY
69561: EQUAL
69562: IFFALSE 69580
// begin weapon := j [ 2 ] ;
69564: LD_ADDR_VAR 0 8
69568: PUSH
69569: LD_VAR 0 5
69573: PUSH
69574: LD_INT 2
69576: ARRAY
69577: ST_TO_ADDR
// break ;
69578: GO 69582
// end ;
69580: GO 69540
69582: POP
69583: POP
// if not weapon then
69584: LD_VAR 0 8
69588: NOT
69589: IFFALSE 69593
// continue ;
69591: GO 69489
// for k in factories do
69593: LD_ADDR_VAR 0 6
69597: PUSH
69598: LD_VAR 0 2
69602: PUSH
69603: FOR_IN
69604: IFFALSE 69669
// begin weapons := AvailableWeaponList ( k ) ;
69606: LD_ADDR_VAR 0 9
69610: PUSH
69611: LD_VAR 0 6
69615: PPUSH
69616: CALL_OW 478
69620: ST_TO_ADDR
// if not weapons then
69621: LD_VAR 0 9
69625: NOT
69626: IFFALSE 69630
// continue ;
69628: GO 69603
// if weapon in weapons then
69630: LD_VAR 0 8
69634: PUSH
69635: LD_VAR 0 9
69639: IN
69640: IFFALSE 69667
// begin result := [ i , weapon ] ;
69642: LD_ADDR_VAR 0 3
69646: PUSH
69647: LD_VAR 0 4
69651: PUSH
69652: LD_VAR 0 8
69656: PUSH
69657: EMPTY
69658: LIST
69659: LIST
69660: ST_TO_ADDR
// exit ;
69661: POP
69662: POP
69663: POP
69664: POP
69665: GO 69675
// end ; end ;
69667: GO 69603
69669: POP
69670: POP
// end ;
69671: GO 69489
69673: POP
69674: POP
// end ;
69675: LD_VAR 0 3
69679: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
69680: LD_INT 0
69682: PPUSH
// if not side or side > 8 then
69683: LD_VAR 0 3
69687: NOT
69688: PUSH
69689: LD_VAR 0 3
69693: PUSH
69694: LD_INT 8
69696: GREATER
69697: OR
69698: IFFALSE 69702
// exit ;
69700: GO 69761
// if not range then
69702: LD_VAR 0 4
69706: NOT
69707: IFFALSE 69718
// range := - 12 ;
69709: LD_ADDR_VAR 0 4
69713: PUSH
69714: LD_INT 12
69716: NEG
69717: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
69718: LD_VAR 0 1
69722: PPUSH
69723: LD_VAR 0 2
69727: PPUSH
69728: LD_VAR 0 3
69732: PPUSH
69733: LD_VAR 0 4
69737: PPUSH
69738: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
69742: LD_VAR 0 1
69746: PPUSH
69747: LD_VAR 0 2
69751: PPUSH
69752: LD_VAR 0 3
69756: PPUSH
69757: CALL_OW 331
// end ;
69761: LD_VAR 0 5
69765: RET
// export function Video ( mode ) ; begin
69766: LD_INT 0
69768: PPUSH
// ingame_video = mode ;
69769: LD_ADDR_OWVAR 52
69773: PUSH
69774: LD_VAR 0 1
69778: ST_TO_ADDR
// interface_hidden = mode ;
69779: LD_ADDR_OWVAR 54
69783: PUSH
69784: LD_VAR 0 1
69788: ST_TO_ADDR
// end ;
69789: LD_VAR 0 2
69793: RET
// export function Join ( array , element ) ; begin
69794: LD_INT 0
69796: PPUSH
// result := Replace ( array , array + 1 , element ) ;
69797: LD_ADDR_VAR 0 3
69801: PUSH
69802: LD_VAR 0 1
69806: PPUSH
69807: LD_VAR 0 1
69811: PUSH
69812: LD_INT 1
69814: PLUS
69815: PPUSH
69816: LD_VAR 0 2
69820: PPUSH
69821: CALL_OW 1
69825: ST_TO_ADDR
// end ;
69826: LD_VAR 0 3
69830: RET
// export function JoinUnion ( array , element ) ; begin
69831: LD_INT 0
69833: PPUSH
// result := array union element ;
69834: LD_ADDR_VAR 0 3
69838: PUSH
69839: LD_VAR 0 1
69843: PUSH
69844: LD_VAR 0 2
69848: UNION
69849: ST_TO_ADDR
// end ;
69850: LD_VAR 0 3
69854: RET
// export function GetBehemoths ( side ) ; begin
69855: LD_INT 0
69857: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
69858: LD_ADDR_VAR 0 2
69862: PUSH
69863: LD_INT 22
69865: PUSH
69866: LD_VAR 0 1
69870: PUSH
69871: EMPTY
69872: LIST
69873: LIST
69874: PUSH
69875: LD_INT 31
69877: PUSH
69878: LD_INT 25
69880: PUSH
69881: EMPTY
69882: LIST
69883: LIST
69884: PUSH
69885: EMPTY
69886: LIST
69887: LIST
69888: PPUSH
69889: CALL_OW 69
69893: ST_TO_ADDR
// end ;
69894: LD_VAR 0 2
69898: RET
// export function Shuffle ( array ) ; var i , index ; begin
69899: LD_INT 0
69901: PPUSH
69902: PPUSH
69903: PPUSH
// result := [ ] ;
69904: LD_ADDR_VAR 0 2
69908: PUSH
69909: EMPTY
69910: ST_TO_ADDR
// if not array then
69911: LD_VAR 0 1
69915: NOT
69916: IFFALSE 69920
// exit ;
69918: GO 70019
// Randomize ;
69920: CALL_OW 10
// for i = array downto 1 do
69924: LD_ADDR_VAR 0 3
69928: PUSH
69929: DOUBLE
69930: LD_VAR 0 1
69934: INC
69935: ST_TO_ADDR
69936: LD_INT 1
69938: PUSH
69939: FOR_DOWNTO
69940: IFFALSE 70017
// begin index := rand ( 1 , array ) ;
69942: LD_ADDR_VAR 0 4
69946: PUSH
69947: LD_INT 1
69949: PPUSH
69950: LD_VAR 0 1
69954: PPUSH
69955: CALL_OW 12
69959: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
69960: LD_ADDR_VAR 0 2
69964: PUSH
69965: LD_VAR 0 2
69969: PPUSH
69970: LD_VAR 0 2
69974: PUSH
69975: LD_INT 1
69977: PLUS
69978: PPUSH
69979: LD_VAR 0 1
69983: PUSH
69984: LD_VAR 0 4
69988: ARRAY
69989: PPUSH
69990: CALL_OW 2
69994: ST_TO_ADDR
// array := Delete ( array , index ) ;
69995: LD_ADDR_VAR 0 1
69999: PUSH
70000: LD_VAR 0 1
70004: PPUSH
70005: LD_VAR 0 4
70009: PPUSH
70010: CALL_OW 3
70014: ST_TO_ADDR
// end ;
70015: GO 69939
70017: POP
70018: POP
// end ;
70019: LD_VAR 0 2
70023: RET
// export function GetBaseMaterials ( base ) ; begin
70024: LD_INT 0
70026: PPUSH
// result := [ 0 , 0 , 0 ] ;
70027: LD_ADDR_VAR 0 2
70031: PUSH
70032: LD_INT 0
70034: PUSH
70035: LD_INT 0
70037: PUSH
70038: LD_INT 0
70040: PUSH
70041: EMPTY
70042: LIST
70043: LIST
70044: LIST
70045: ST_TO_ADDR
// if not base then
70046: LD_VAR 0 1
70050: NOT
70051: IFFALSE 70055
// exit ;
70053: GO 70104
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
70055: LD_ADDR_VAR 0 2
70059: PUSH
70060: LD_VAR 0 1
70064: PPUSH
70065: LD_INT 1
70067: PPUSH
70068: CALL_OW 275
70072: PUSH
70073: LD_VAR 0 1
70077: PPUSH
70078: LD_INT 2
70080: PPUSH
70081: CALL_OW 275
70085: PUSH
70086: LD_VAR 0 1
70090: PPUSH
70091: LD_INT 3
70093: PPUSH
70094: CALL_OW 275
70098: PUSH
70099: EMPTY
70100: LIST
70101: LIST
70102: LIST
70103: ST_TO_ADDR
// end ;
70104: LD_VAR 0 2
70108: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
70109: LD_INT 0
70111: PPUSH
70112: PPUSH
// result := array ;
70113: LD_ADDR_VAR 0 3
70117: PUSH
70118: LD_VAR 0 1
70122: ST_TO_ADDR
// if size >= result then
70123: LD_VAR 0 2
70127: PUSH
70128: LD_VAR 0 3
70132: GREATEREQUAL
70133: IFFALSE 70137
// exit ;
70135: GO 70187
// if size then
70137: LD_VAR 0 2
70141: IFFALSE 70187
// for i := array downto size do
70143: LD_ADDR_VAR 0 4
70147: PUSH
70148: DOUBLE
70149: LD_VAR 0 1
70153: INC
70154: ST_TO_ADDR
70155: LD_VAR 0 2
70159: PUSH
70160: FOR_DOWNTO
70161: IFFALSE 70185
// result := Delete ( result , result ) ;
70163: LD_ADDR_VAR 0 3
70167: PUSH
70168: LD_VAR 0 3
70172: PPUSH
70173: LD_VAR 0 3
70177: PPUSH
70178: CALL_OW 3
70182: ST_TO_ADDR
70183: GO 70160
70185: POP
70186: POP
// end ;
70187: LD_VAR 0 3
70191: RET
// export function ComExit ( unit ) ; var tmp ; begin
70192: LD_INT 0
70194: PPUSH
70195: PPUSH
// if not IsInUnit ( unit ) then
70196: LD_VAR 0 1
70200: PPUSH
70201: CALL_OW 310
70205: NOT
70206: IFFALSE 70210
// exit ;
70208: GO 70270
// tmp := IsInUnit ( unit ) ;
70210: LD_ADDR_VAR 0 3
70214: PUSH
70215: LD_VAR 0 1
70219: PPUSH
70220: CALL_OW 310
70224: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
70225: LD_VAR 0 3
70229: PPUSH
70230: CALL_OW 247
70234: PUSH
70235: LD_INT 2
70237: EQUAL
70238: IFFALSE 70251
// ComExitVehicle ( unit ) else
70240: LD_VAR 0 1
70244: PPUSH
70245: CALL_OW 121
70249: GO 70260
// ComExitBuilding ( unit ) ;
70251: LD_VAR 0 1
70255: PPUSH
70256: CALL_OW 122
// result := tmp ;
70260: LD_ADDR_VAR 0 2
70264: PUSH
70265: LD_VAR 0 3
70269: ST_TO_ADDR
// end ;
70270: LD_VAR 0 2
70274: RET
// export function ComExitAll ( units ) ; var i ; begin
70275: LD_INT 0
70277: PPUSH
70278: PPUSH
// if not units then
70279: LD_VAR 0 1
70283: NOT
70284: IFFALSE 70288
// exit ;
70286: GO 70314
// for i in units do
70288: LD_ADDR_VAR 0 3
70292: PUSH
70293: LD_VAR 0 1
70297: PUSH
70298: FOR_IN
70299: IFFALSE 70312
// ComExit ( i ) ;
70301: LD_VAR 0 3
70305: PPUSH
70306: CALL 70192 0 1
70310: GO 70298
70312: POP
70313: POP
// end ;
70314: LD_VAR 0 2
70318: RET
// export function ResetHc ; begin
70319: LD_INT 0
70321: PPUSH
// InitHc ;
70322: CALL_OW 19
// hc_importance := 0 ;
70326: LD_ADDR_OWVAR 32
70330: PUSH
70331: LD_INT 0
70333: ST_TO_ADDR
// end ;
70334: LD_VAR 0 1
70338: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
70339: LD_INT 0
70341: PPUSH
70342: PPUSH
70343: PPUSH
// _x := ( x1 + x2 ) div 2 ;
70344: LD_ADDR_VAR 0 6
70348: PUSH
70349: LD_VAR 0 1
70353: PUSH
70354: LD_VAR 0 3
70358: PLUS
70359: PUSH
70360: LD_INT 2
70362: DIV
70363: ST_TO_ADDR
// if _x < 0 then
70364: LD_VAR 0 6
70368: PUSH
70369: LD_INT 0
70371: LESS
70372: IFFALSE 70389
// _x := _x * - 1 ;
70374: LD_ADDR_VAR 0 6
70378: PUSH
70379: LD_VAR 0 6
70383: PUSH
70384: LD_INT 1
70386: NEG
70387: MUL
70388: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
70389: LD_ADDR_VAR 0 7
70393: PUSH
70394: LD_VAR 0 2
70398: PUSH
70399: LD_VAR 0 4
70403: PLUS
70404: PUSH
70405: LD_INT 2
70407: DIV
70408: ST_TO_ADDR
// if _y < 0 then
70409: LD_VAR 0 7
70413: PUSH
70414: LD_INT 0
70416: LESS
70417: IFFALSE 70434
// _y := _y * - 1 ;
70419: LD_ADDR_VAR 0 7
70423: PUSH
70424: LD_VAR 0 7
70428: PUSH
70429: LD_INT 1
70431: NEG
70432: MUL
70433: ST_TO_ADDR
// result := [ _x , _y ] ;
70434: LD_ADDR_VAR 0 5
70438: PUSH
70439: LD_VAR 0 6
70443: PUSH
70444: LD_VAR 0 7
70448: PUSH
70449: EMPTY
70450: LIST
70451: LIST
70452: ST_TO_ADDR
// end ;
70453: LD_VAR 0 5
70457: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
70458: LD_INT 0
70460: PPUSH
70461: PPUSH
70462: PPUSH
70463: PPUSH
// task := GetTaskList ( unit ) ;
70464: LD_ADDR_VAR 0 7
70468: PUSH
70469: LD_VAR 0 1
70473: PPUSH
70474: CALL_OW 437
70478: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
70479: LD_VAR 0 7
70483: NOT
70484: PUSH
70485: LD_VAR 0 1
70489: PPUSH
70490: LD_VAR 0 2
70494: PPUSH
70495: CALL_OW 308
70499: NOT
70500: AND
70501: IFFALSE 70505
// exit ;
70503: GO 70623
// if IsInArea ( unit , area ) then
70505: LD_VAR 0 1
70509: PPUSH
70510: LD_VAR 0 2
70514: PPUSH
70515: CALL_OW 308
70519: IFFALSE 70537
// begin ComMoveToArea ( unit , goAway ) ;
70521: LD_VAR 0 1
70525: PPUSH
70526: LD_VAR 0 3
70530: PPUSH
70531: CALL_OW 113
// exit ;
70535: GO 70623
// end ; if task [ 1 ] [ 1 ] <> M then
70537: LD_VAR 0 7
70541: PUSH
70542: LD_INT 1
70544: ARRAY
70545: PUSH
70546: LD_INT 1
70548: ARRAY
70549: PUSH
70550: LD_STRING M
70552: NONEQUAL
70553: IFFALSE 70557
// exit ;
70555: GO 70623
// x := task [ 1 ] [ 2 ] ;
70557: LD_ADDR_VAR 0 5
70561: PUSH
70562: LD_VAR 0 7
70566: PUSH
70567: LD_INT 1
70569: ARRAY
70570: PUSH
70571: LD_INT 2
70573: ARRAY
70574: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
70575: LD_ADDR_VAR 0 6
70579: PUSH
70580: LD_VAR 0 7
70584: PUSH
70585: LD_INT 1
70587: ARRAY
70588: PUSH
70589: LD_INT 3
70591: ARRAY
70592: ST_TO_ADDR
// if InArea ( x , y , area ) then
70593: LD_VAR 0 5
70597: PPUSH
70598: LD_VAR 0 6
70602: PPUSH
70603: LD_VAR 0 2
70607: PPUSH
70608: CALL_OW 309
70612: IFFALSE 70623
// ComStop ( unit ) ;
70614: LD_VAR 0 1
70618: PPUSH
70619: CALL_OW 141
// end ;
70623: LD_VAR 0 4
70627: RET
// export function Abs ( value ) ; begin
70628: LD_INT 0
70630: PPUSH
// result := value ;
70631: LD_ADDR_VAR 0 2
70635: PUSH
70636: LD_VAR 0 1
70640: ST_TO_ADDR
// if value < 0 then
70641: LD_VAR 0 1
70645: PUSH
70646: LD_INT 0
70648: LESS
70649: IFFALSE 70666
// result := value * - 1 ;
70651: LD_ADDR_VAR 0 2
70655: PUSH
70656: LD_VAR 0 1
70660: PUSH
70661: LD_INT 1
70663: NEG
70664: MUL
70665: ST_TO_ADDR
// end ;
70666: LD_VAR 0 2
70670: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
70671: LD_INT 0
70673: PPUSH
70674: PPUSH
70675: PPUSH
70676: PPUSH
70677: PPUSH
70678: PPUSH
70679: PPUSH
70680: PPUSH
// if not unit or not building then
70681: LD_VAR 0 1
70685: NOT
70686: PUSH
70687: LD_VAR 0 2
70691: NOT
70692: OR
70693: IFFALSE 70697
// exit ;
70695: GO 70923
// x := GetX ( building ) ;
70697: LD_ADDR_VAR 0 4
70701: PUSH
70702: LD_VAR 0 2
70706: PPUSH
70707: CALL_OW 250
70711: ST_TO_ADDR
// y := GetY ( building ) ;
70712: LD_ADDR_VAR 0 6
70716: PUSH
70717: LD_VAR 0 2
70721: PPUSH
70722: CALL_OW 251
70726: ST_TO_ADDR
// d := GetDir ( building ) ;
70727: LD_ADDR_VAR 0 8
70731: PUSH
70732: LD_VAR 0 2
70736: PPUSH
70737: CALL_OW 254
70741: ST_TO_ADDR
// r := 4 ;
70742: LD_ADDR_VAR 0 9
70746: PUSH
70747: LD_INT 4
70749: ST_TO_ADDR
// for i := 1 to 5 do
70750: LD_ADDR_VAR 0 10
70754: PUSH
70755: DOUBLE
70756: LD_INT 1
70758: DEC
70759: ST_TO_ADDR
70760: LD_INT 5
70762: PUSH
70763: FOR_TO
70764: IFFALSE 70921
// begin _x := ShiftX ( x , d , r + i ) ;
70766: LD_ADDR_VAR 0 5
70770: PUSH
70771: LD_VAR 0 4
70775: PPUSH
70776: LD_VAR 0 8
70780: PPUSH
70781: LD_VAR 0 9
70785: PUSH
70786: LD_VAR 0 10
70790: PLUS
70791: PPUSH
70792: CALL_OW 272
70796: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
70797: LD_ADDR_VAR 0 7
70801: PUSH
70802: LD_VAR 0 6
70806: PPUSH
70807: LD_VAR 0 8
70811: PPUSH
70812: LD_VAR 0 9
70816: PUSH
70817: LD_VAR 0 10
70821: PLUS
70822: PPUSH
70823: CALL_OW 273
70827: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
70828: LD_VAR 0 5
70832: PPUSH
70833: LD_VAR 0 7
70837: PPUSH
70838: CALL_OW 488
70842: PUSH
70843: LD_VAR 0 5
70847: PPUSH
70848: LD_VAR 0 7
70852: PPUSH
70853: CALL_OW 428
70857: PPUSH
70858: CALL_OW 247
70862: PUSH
70863: LD_INT 3
70865: PUSH
70866: LD_INT 2
70868: PUSH
70869: EMPTY
70870: LIST
70871: LIST
70872: IN
70873: NOT
70874: AND
70875: IFFALSE 70919
// begin ComMoveXY ( unit , _x , _y ) ;
70877: LD_VAR 0 1
70881: PPUSH
70882: LD_VAR 0 5
70886: PPUSH
70887: LD_VAR 0 7
70891: PPUSH
70892: CALL_OW 111
// result := [ _x , _y ] ;
70896: LD_ADDR_VAR 0 3
70900: PUSH
70901: LD_VAR 0 5
70905: PUSH
70906: LD_VAR 0 7
70910: PUSH
70911: EMPTY
70912: LIST
70913: LIST
70914: ST_TO_ADDR
// exit ;
70915: POP
70916: POP
70917: GO 70923
// end ; end ;
70919: GO 70763
70921: POP
70922: POP
// end ;
70923: LD_VAR 0 3
70927: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
70928: LD_INT 0
70930: PPUSH
70931: PPUSH
70932: PPUSH
// result := 0 ;
70933: LD_ADDR_VAR 0 3
70937: PUSH
70938: LD_INT 0
70940: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
70941: LD_VAR 0 1
70945: PUSH
70946: LD_INT 0
70948: LESS
70949: PUSH
70950: LD_VAR 0 1
70954: PUSH
70955: LD_INT 8
70957: GREATER
70958: OR
70959: PUSH
70960: LD_VAR 0 2
70964: PUSH
70965: LD_INT 0
70967: LESS
70968: OR
70969: PUSH
70970: LD_VAR 0 2
70974: PUSH
70975: LD_INT 8
70977: GREATER
70978: OR
70979: IFFALSE 70983
// exit ;
70981: GO 71058
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
70983: LD_ADDR_VAR 0 4
70987: PUSH
70988: LD_INT 22
70990: PUSH
70991: LD_VAR 0 2
70995: PUSH
70996: EMPTY
70997: LIST
70998: LIST
70999: PPUSH
71000: CALL_OW 69
71004: PUSH
71005: FOR_IN
71006: IFFALSE 71056
// begin un := UnitShoot ( i ) ;
71008: LD_ADDR_VAR 0 5
71012: PUSH
71013: LD_VAR 0 4
71017: PPUSH
71018: CALL_OW 504
71022: ST_TO_ADDR
// if GetSide ( un ) = side1 then
71023: LD_VAR 0 5
71027: PPUSH
71028: CALL_OW 255
71032: PUSH
71033: LD_VAR 0 1
71037: EQUAL
71038: IFFALSE 71054
// begin result := un ;
71040: LD_ADDR_VAR 0 3
71044: PUSH
71045: LD_VAR 0 5
71049: ST_TO_ADDR
// exit ;
71050: POP
71051: POP
71052: GO 71058
// end ; end ;
71054: GO 71005
71056: POP
71057: POP
// end ;
71058: LD_VAR 0 3
71062: RET
// export function GetCargoBay ( units ) ; begin
71063: LD_INT 0
71065: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
71066: LD_ADDR_VAR 0 2
71070: PUSH
71071: LD_VAR 0 1
71075: PPUSH
71076: LD_INT 2
71078: PUSH
71079: LD_INT 34
71081: PUSH
71082: LD_INT 12
71084: PUSH
71085: EMPTY
71086: LIST
71087: LIST
71088: PUSH
71089: LD_INT 34
71091: PUSH
71092: LD_INT 51
71094: PUSH
71095: EMPTY
71096: LIST
71097: LIST
71098: PUSH
71099: LD_INT 34
71101: PUSH
71102: LD_INT 32
71104: PUSH
71105: EMPTY
71106: LIST
71107: LIST
71108: PUSH
71109: LD_INT 34
71111: PUSH
71112: LD_INT 89
71114: PUSH
71115: EMPTY
71116: LIST
71117: LIST
71118: PUSH
71119: EMPTY
71120: LIST
71121: LIST
71122: LIST
71123: LIST
71124: LIST
71125: PPUSH
71126: CALL_OW 72
71130: ST_TO_ADDR
// end ;
71131: LD_VAR 0 2
71135: RET
// export function Negate ( value ) ; begin
71136: LD_INT 0
71138: PPUSH
// result := not value ;
71139: LD_ADDR_VAR 0 2
71143: PUSH
71144: LD_VAR 0 1
71148: NOT
71149: ST_TO_ADDR
// end ;
71150: LD_VAR 0 2
71154: RET
// export function Inc ( value ) ; begin
71155: LD_INT 0
71157: PPUSH
// result := value + 1 ;
71158: LD_ADDR_VAR 0 2
71162: PUSH
71163: LD_VAR 0 1
71167: PUSH
71168: LD_INT 1
71170: PLUS
71171: ST_TO_ADDR
// end ;
71172: LD_VAR 0 2
71176: RET
// export function Dec ( value ) ; begin
71177: LD_INT 0
71179: PPUSH
// result := value - 1 ;
71180: LD_ADDR_VAR 0 2
71184: PUSH
71185: LD_VAR 0 1
71189: PUSH
71190: LD_INT 1
71192: MINUS
71193: ST_TO_ADDR
// end ;
71194: LD_VAR 0 2
71198: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
71199: LD_INT 0
71201: PPUSH
71202: PPUSH
71203: PPUSH
71204: PPUSH
71205: PPUSH
71206: PPUSH
71207: PPUSH
71208: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
71209: LD_VAR 0 1
71213: PPUSH
71214: LD_VAR 0 2
71218: PPUSH
71219: CALL_OW 488
71223: NOT
71224: PUSH
71225: LD_VAR 0 3
71229: PPUSH
71230: LD_VAR 0 4
71234: PPUSH
71235: CALL_OW 488
71239: NOT
71240: OR
71241: IFFALSE 71254
// begin result := - 1 ;
71243: LD_ADDR_VAR 0 5
71247: PUSH
71248: LD_INT 1
71250: NEG
71251: ST_TO_ADDR
// exit ;
71252: GO 71489
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
71254: LD_ADDR_VAR 0 12
71258: PUSH
71259: LD_VAR 0 1
71263: PPUSH
71264: LD_VAR 0 2
71268: PPUSH
71269: LD_VAR 0 3
71273: PPUSH
71274: LD_VAR 0 4
71278: PPUSH
71279: CALL 70339 0 4
71283: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
71284: LD_ADDR_VAR 0 11
71288: PUSH
71289: LD_VAR 0 1
71293: PPUSH
71294: LD_VAR 0 2
71298: PPUSH
71299: LD_VAR 0 12
71303: PUSH
71304: LD_INT 1
71306: ARRAY
71307: PPUSH
71308: LD_VAR 0 12
71312: PUSH
71313: LD_INT 2
71315: ARRAY
71316: PPUSH
71317: CALL_OW 298
71321: ST_TO_ADDR
// distance := 9999 ;
71322: LD_ADDR_VAR 0 10
71326: PUSH
71327: LD_INT 9999
71329: ST_TO_ADDR
// for i := 0 to 5 do
71330: LD_ADDR_VAR 0 6
71334: PUSH
71335: DOUBLE
71336: LD_INT 0
71338: DEC
71339: ST_TO_ADDR
71340: LD_INT 5
71342: PUSH
71343: FOR_TO
71344: IFFALSE 71487
// begin _x := ShiftX ( x1 , i , centerDist ) ;
71346: LD_ADDR_VAR 0 7
71350: PUSH
71351: LD_VAR 0 1
71355: PPUSH
71356: LD_VAR 0 6
71360: PPUSH
71361: LD_VAR 0 11
71365: PPUSH
71366: CALL_OW 272
71370: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
71371: LD_ADDR_VAR 0 8
71375: PUSH
71376: LD_VAR 0 2
71380: PPUSH
71381: LD_VAR 0 6
71385: PPUSH
71386: LD_VAR 0 11
71390: PPUSH
71391: CALL_OW 273
71395: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
71396: LD_VAR 0 7
71400: PPUSH
71401: LD_VAR 0 8
71405: PPUSH
71406: CALL_OW 488
71410: NOT
71411: IFFALSE 71415
// continue ;
71413: GO 71343
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
71415: LD_ADDR_VAR 0 9
71419: PUSH
71420: LD_VAR 0 12
71424: PUSH
71425: LD_INT 1
71427: ARRAY
71428: PPUSH
71429: LD_VAR 0 12
71433: PUSH
71434: LD_INT 2
71436: ARRAY
71437: PPUSH
71438: LD_VAR 0 7
71442: PPUSH
71443: LD_VAR 0 8
71447: PPUSH
71448: CALL_OW 298
71452: ST_TO_ADDR
// if tmp < distance then
71453: LD_VAR 0 9
71457: PUSH
71458: LD_VAR 0 10
71462: LESS
71463: IFFALSE 71485
// begin result := i ;
71465: LD_ADDR_VAR 0 5
71469: PUSH
71470: LD_VAR 0 6
71474: ST_TO_ADDR
// distance := tmp ;
71475: LD_ADDR_VAR 0 10
71479: PUSH
71480: LD_VAR 0 9
71484: ST_TO_ADDR
// end ; end ;
71485: GO 71343
71487: POP
71488: POP
// end ;
71489: LD_VAR 0 5
71493: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
71494: LD_INT 0
71496: PPUSH
71497: PPUSH
// if not driver or not IsInUnit ( driver ) then
71498: LD_VAR 0 1
71502: NOT
71503: PUSH
71504: LD_VAR 0 1
71508: PPUSH
71509: CALL_OW 310
71513: NOT
71514: OR
71515: IFFALSE 71519
// exit ;
71517: GO 71609
// vehicle := IsInUnit ( driver ) ;
71519: LD_ADDR_VAR 0 3
71523: PUSH
71524: LD_VAR 0 1
71528: PPUSH
71529: CALL_OW 310
71533: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
71534: LD_VAR 0 1
71538: PPUSH
71539: LD_STRING \
71541: PUSH
71542: LD_INT 0
71544: PUSH
71545: LD_INT 0
71547: PUSH
71548: LD_INT 0
71550: PUSH
71551: LD_INT 0
71553: PUSH
71554: LD_INT 0
71556: PUSH
71557: LD_INT 0
71559: PUSH
71560: EMPTY
71561: LIST
71562: LIST
71563: LIST
71564: LIST
71565: LIST
71566: LIST
71567: LIST
71568: PUSH
71569: LD_STRING E
71571: PUSH
71572: LD_INT 0
71574: PUSH
71575: LD_INT 0
71577: PUSH
71578: LD_VAR 0 3
71582: PUSH
71583: LD_INT 0
71585: PUSH
71586: LD_INT 0
71588: PUSH
71589: LD_INT 0
71591: PUSH
71592: EMPTY
71593: LIST
71594: LIST
71595: LIST
71596: LIST
71597: LIST
71598: LIST
71599: LIST
71600: PUSH
71601: EMPTY
71602: LIST
71603: LIST
71604: PPUSH
71605: CALL_OW 446
// end ;
71609: LD_VAR 0 2
71613: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
71614: LD_INT 0
71616: PPUSH
71617: PPUSH
// if not driver or not IsInUnit ( driver ) then
71618: LD_VAR 0 1
71622: NOT
71623: PUSH
71624: LD_VAR 0 1
71628: PPUSH
71629: CALL_OW 310
71633: NOT
71634: OR
71635: IFFALSE 71639
// exit ;
71637: GO 71729
// vehicle := IsInUnit ( driver ) ;
71639: LD_ADDR_VAR 0 3
71643: PUSH
71644: LD_VAR 0 1
71648: PPUSH
71649: CALL_OW 310
71653: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
71654: LD_VAR 0 1
71658: PPUSH
71659: LD_STRING \
71661: PUSH
71662: LD_INT 0
71664: PUSH
71665: LD_INT 0
71667: PUSH
71668: LD_INT 0
71670: PUSH
71671: LD_INT 0
71673: PUSH
71674: LD_INT 0
71676: PUSH
71677: LD_INT 0
71679: PUSH
71680: EMPTY
71681: LIST
71682: LIST
71683: LIST
71684: LIST
71685: LIST
71686: LIST
71687: LIST
71688: PUSH
71689: LD_STRING E
71691: PUSH
71692: LD_INT 0
71694: PUSH
71695: LD_INT 0
71697: PUSH
71698: LD_VAR 0 3
71702: PUSH
71703: LD_INT 0
71705: PUSH
71706: LD_INT 0
71708: PUSH
71709: LD_INT 0
71711: PUSH
71712: EMPTY
71713: LIST
71714: LIST
71715: LIST
71716: LIST
71717: LIST
71718: LIST
71719: LIST
71720: PUSH
71721: EMPTY
71722: LIST
71723: LIST
71724: PPUSH
71725: CALL_OW 447
// end ;
71729: LD_VAR 0 2
71733: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
71734: LD_INT 0
71736: PPUSH
71737: PPUSH
71738: PPUSH
// tmp := [ ] ;
71739: LD_ADDR_VAR 0 5
71743: PUSH
71744: EMPTY
71745: ST_TO_ADDR
// for i in units do
71746: LD_ADDR_VAR 0 4
71750: PUSH
71751: LD_VAR 0 1
71755: PUSH
71756: FOR_IN
71757: IFFALSE 71795
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
71759: LD_ADDR_VAR 0 5
71763: PUSH
71764: LD_VAR 0 5
71768: PPUSH
71769: LD_VAR 0 5
71773: PUSH
71774: LD_INT 1
71776: PLUS
71777: PPUSH
71778: LD_VAR 0 4
71782: PPUSH
71783: CALL_OW 256
71787: PPUSH
71788: CALL_OW 2
71792: ST_TO_ADDR
71793: GO 71756
71795: POP
71796: POP
// if not tmp then
71797: LD_VAR 0 5
71801: NOT
71802: IFFALSE 71806
// exit ;
71804: GO 71854
// if asc then
71806: LD_VAR 0 2
71810: IFFALSE 71834
// result := SortListByListAsc ( units , tmp ) else
71812: LD_ADDR_VAR 0 3
71816: PUSH
71817: LD_VAR 0 1
71821: PPUSH
71822: LD_VAR 0 5
71826: PPUSH
71827: CALL_OW 76
71831: ST_TO_ADDR
71832: GO 71854
// result := SortListByListDesc ( units , tmp ) ;
71834: LD_ADDR_VAR 0 3
71838: PUSH
71839: LD_VAR 0 1
71843: PPUSH
71844: LD_VAR 0 5
71848: PPUSH
71849: CALL_OW 77
71853: ST_TO_ADDR
// end ;
71854: LD_VAR 0 3
71858: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
71859: LD_INT 0
71861: PPUSH
71862: PPUSH
// task := GetTaskList ( mech ) ;
71863: LD_ADDR_VAR 0 4
71867: PUSH
71868: LD_VAR 0 1
71872: PPUSH
71873: CALL_OW 437
71877: ST_TO_ADDR
// if not task then
71878: LD_VAR 0 4
71882: NOT
71883: IFFALSE 71887
// exit ;
71885: GO 71929
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
71887: LD_ADDR_VAR 0 3
71891: PUSH
71892: LD_VAR 0 4
71896: PUSH
71897: LD_INT 1
71899: ARRAY
71900: PUSH
71901: LD_INT 1
71903: ARRAY
71904: PUSH
71905: LD_STRING r
71907: EQUAL
71908: PUSH
71909: LD_VAR 0 4
71913: PUSH
71914: LD_INT 1
71916: ARRAY
71917: PUSH
71918: LD_INT 4
71920: ARRAY
71921: PUSH
71922: LD_VAR 0 2
71926: EQUAL
71927: AND
71928: ST_TO_ADDR
// end ;
71929: LD_VAR 0 3
71933: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
71934: LD_INT 0
71936: PPUSH
// SetDir ( unit , d ) ;
71937: LD_VAR 0 1
71941: PPUSH
71942: LD_VAR 0 4
71946: PPUSH
71947: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
71951: LD_VAR 0 1
71955: PPUSH
71956: LD_VAR 0 2
71960: PPUSH
71961: LD_VAR 0 3
71965: PPUSH
71966: LD_VAR 0 5
71970: PPUSH
71971: CALL_OW 48
// end ;
71975: LD_VAR 0 6
71979: RET
// export function ToNaturalNumber ( number ) ; begin
71980: LD_INT 0
71982: PPUSH
// result := number div 1 ;
71983: LD_ADDR_VAR 0 2
71987: PUSH
71988: LD_VAR 0 1
71992: PUSH
71993: LD_INT 1
71995: DIV
71996: ST_TO_ADDR
// if number < 0 then
71997: LD_VAR 0 1
72001: PUSH
72002: LD_INT 0
72004: LESS
72005: IFFALSE 72015
// result := 0 ;
72007: LD_ADDR_VAR 0 2
72011: PUSH
72012: LD_INT 0
72014: ST_TO_ADDR
// end ;
72015: LD_VAR 0 2
72019: RET
// export function SortByClass ( units , class ) ; var un ; begin
72020: LD_INT 0
72022: PPUSH
72023: PPUSH
// if not units or not class then
72024: LD_VAR 0 1
72028: NOT
72029: PUSH
72030: LD_VAR 0 2
72034: NOT
72035: OR
72036: IFFALSE 72040
// exit ;
72038: GO 72135
// result := [ ] ;
72040: LD_ADDR_VAR 0 3
72044: PUSH
72045: EMPTY
72046: ST_TO_ADDR
// for un in units do
72047: LD_ADDR_VAR 0 4
72051: PUSH
72052: LD_VAR 0 1
72056: PUSH
72057: FOR_IN
72058: IFFALSE 72133
// if GetClass ( un ) = class then
72060: LD_VAR 0 4
72064: PPUSH
72065: CALL_OW 257
72069: PUSH
72070: LD_VAR 0 2
72074: EQUAL
72075: IFFALSE 72102
// result := Insert ( result , 1 , un ) else
72077: LD_ADDR_VAR 0 3
72081: PUSH
72082: LD_VAR 0 3
72086: PPUSH
72087: LD_INT 1
72089: PPUSH
72090: LD_VAR 0 4
72094: PPUSH
72095: CALL_OW 2
72099: ST_TO_ADDR
72100: GO 72131
// result := Replace ( result , result + 1 , un ) ;
72102: LD_ADDR_VAR 0 3
72106: PUSH
72107: LD_VAR 0 3
72111: PPUSH
72112: LD_VAR 0 3
72116: PUSH
72117: LD_INT 1
72119: PLUS
72120: PPUSH
72121: LD_VAR 0 4
72125: PPUSH
72126: CALL_OW 1
72130: ST_TO_ADDR
72131: GO 72057
72133: POP
72134: POP
// end ;
72135: LD_VAR 0 3
72139: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
72140: LD_INT 0
72142: PPUSH
72143: PPUSH
72144: PPUSH
72145: PPUSH
72146: PPUSH
72147: PPUSH
72148: PPUSH
// result := [ ] ;
72149: LD_ADDR_VAR 0 4
72153: PUSH
72154: EMPTY
72155: ST_TO_ADDR
// if x - r < 0 then
72156: LD_VAR 0 1
72160: PUSH
72161: LD_VAR 0 3
72165: MINUS
72166: PUSH
72167: LD_INT 0
72169: LESS
72170: IFFALSE 72182
// min_x := 0 else
72172: LD_ADDR_VAR 0 8
72176: PUSH
72177: LD_INT 0
72179: ST_TO_ADDR
72180: GO 72198
// min_x := x - r ;
72182: LD_ADDR_VAR 0 8
72186: PUSH
72187: LD_VAR 0 1
72191: PUSH
72192: LD_VAR 0 3
72196: MINUS
72197: ST_TO_ADDR
// if y - r < 0 then
72198: LD_VAR 0 2
72202: PUSH
72203: LD_VAR 0 3
72207: MINUS
72208: PUSH
72209: LD_INT 0
72211: LESS
72212: IFFALSE 72224
// min_y := 0 else
72214: LD_ADDR_VAR 0 7
72218: PUSH
72219: LD_INT 0
72221: ST_TO_ADDR
72222: GO 72240
// min_y := y - r ;
72224: LD_ADDR_VAR 0 7
72228: PUSH
72229: LD_VAR 0 2
72233: PUSH
72234: LD_VAR 0 3
72238: MINUS
72239: ST_TO_ADDR
// max_x := x + r ;
72240: LD_ADDR_VAR 0 9
72244: PUSH
72245: LD_VAR 0 1
72249: PUSH
72250: LD_VAR 0 3
72254: PLUS
72255: ST_TO_ADDR
// max_y := y + r ;
72256: LD_ADDR_VAR 0 10
72260: PUSH
72261: LD_VAR 0 2
72265: PUSH
72266: LD_VAR 0 3
72270: PLUS
72271: ST_TO_ADDR
// for _x = min_x to max_x do
72272: LD_ADDR_VAR 0 5
72276: PUSH
72277: DOUBLE
72278: LD_VAR 0 8
72282: DEC
72283: ST_TO_ADDR
72284: LD_VAR 0 9
72288: PUSH
72289: FOR_TO
72290: IFFALSE 72391
// for _y = min_y to max_y do
72292: LD_ADDR_VAR 0 6
72296: PUSH
72297: DOUBLE
72298: LD_VAR 0 7
72302: DEC
72303: ST_TO_ADDR
72304: LD_VAR 0 10
72308: PUSH
72309: FOR_TO
72310: IFFALSE 72387
// begin if not ValidHex ( _x , _y ) then
72312: LD_VAR 0 5
72316: PPUSH
72317: LD_VAR 0 6
72321: PPUSH
72322: CALL_OW 488
72326: NOT
72327: IFFALSE 72331
// continue ;
72329: GO 72309
// if GetResourceTypeXY ( _x , _y ) then
72331: LD_VAR 0 5
72335: PPUSH
72336: LD_VAR 0 6
72340: PPUSH
72341: CALL_OW 283
72345: IFFALSE 72385
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
72347: LD_ADDR_VAR 0 4
72351: PUSH
72352: LD_VAR 0 4
72356: PPUSH
72357: LD_VAR 0 4
72361: PUSH
72362: LD_INT 1
72364: PLUS
72365: PPUSH
72366: LD_VAR 0 5
72370: PUSH
72371: LD_VAR 0 6
72375: PUSH
72376: EMPTY
72377: LIST
72378: LIST
72379: PPUSH
72380: CALL_OW 1
72384: ST_TO_ADDR
// end ;
72385: GO 72309
72387: POP
72388: POP
72389: GO 72289
72391: POP
72392: POP
// end ;
72393: LD_VAR 0 4
72397: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
72398: LD_INT 0
72400: PPUSH
72401: PPUSH
72402: PPUSH
72403: PPUSH
72404: PPUSH
72405: PPUSH
72406: PPUSH
72407: PPUSH
// if not units then
72408: LD_VAR 0 1
72412: NOT
72413: IFFALSE 72417
// exit ;
72415: GO 72941
// result := UnitFilter ( units , [ f_ok ] ) ;
72417: LD_ADDR_VAR 0 3
72421: PUSH
72422: LD_VAR 0 1
72426: PPUSH
72427: LD_INT 50
72429: PUSH
72430: EMPTY
72431: LIST
72432: PPUSH
72433: CALL_OW 72
72437: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
72438: LD_ADDR_VAR 0 8
72442: PUSH
72443: LD_VAR 0 1
72447: PUSH
72448: LD_INT 1
72450: ARRAY
72451: PPUSH
72452: CALL_OW 255
72456: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
72457: LD_ADDR_VAR 0 10
72461: PUSH
72462: LD_INT 29
72464: PUSH
72465: LD_INT 91
72467: PUSH
72468: LD_INT 49
72470: PUSH
72471: EMPTY
72472: LIST
72473: LIST
72474: LIST
72475: ST_TO_ADDR
// if not result then
72476: LD_VAR 0 3
72480: NOT
72481: IFFALSE 72485
// exit ;
72483: GO 72941
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
72485: LD_ADDR_VAR 0 5
72489: PUSH
72490: LD_INT 81
72492: PUSH
72493: LD_VAR 0 8
72497: PUSH
72498: EMPTY
72499: LIST
72500: LIST
72501: PPUSH
72502: CALL_OW 69
72506: ST_TO_ADDR
// for i in result do
72507: LD_ADDR_VAR 0 4
72511: PUSH
72512: LD_VAR 0 3
72516: PUSH
72517: FOR_IN
72518: IFFALSE 72939
// begin tag := GetTag ( i ) + 1 ;
72520: LD_ADDR_VAR 0 9
72524: PUSH
72525: LD_VAR 0 4
72529: PPUSH
72530: CALL_OW 110
72534: PUSH
72535: LD_INT 1
72537: PLUS
72538: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
72539: LD_ADDR_VAR 0 7
72543: PUSH
72544: LD_VAR 0 4
72548: PPUSH
72549: CALL_OW 250
72553: PPUSH
72554: LD_VAR 0 4
72558: PPUSH
72559: CALL_OW 251
72563: PPUSH
72564: LD_INT 6
72566: PPUSH
72567: CALL 72140 0 3
72571: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
72572: LD_VAR 0 4
72576: PPUSH
72577: CALL_OW 247
72581: PUSH
72582: LD_INT 2
72584: EQUAL
72585: PUSH
72586: LD_VAR 0 7
72590: AND
72591: PUSH
72592: LD_VAR 0 4
72596: PPUSH
72597: CALL_OW 264
72601: PUSH
72602: LD_VAR 0 10
72606: IN
72607: NOT
72608: AND
72609: IFFALSE 72648
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
72611: LD_VAR 0 4
72615: PPUSH
72616: LD_VAR 0 7
72620: PUSH
72621: LD_INT 1
72623: ARRAY
72624: PUSH
72625: LD_INT 1
72627: ARRAY
72628: PPUSH
72629: LD_VAR 0 7
72633: PUSH
72634: LD_INT 1
72636: ARRAY
72637: PUSH
72638: LD_INT 2
72640: ARRAY
72641: PPUSH
72642: CALL_OW 116
72646: GO 72937
// if path > tag then
72648: LD_VAR 0 2
72652: PUSH
72653: LD_VAR 0 9
72657: GREATER
72658: IFFALSE 72866
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
72660: LD_ADDR_VAR 0 6
72664: PUSH
72665: LD_VAR 0 5
72669: PPUSH
72670: LD_INT 91
72672: PUSH
72673: LD_VAR 0 4
72677: PUSH
72678: LD_INT 8
72680: PUSH
72681: EMPTY
72682: LIST
72683: LIST
72684: LIST
72685: PPUSH
72686: CALL_OW 72
72690: ST_TO_ADDR
// if nearEnemy then
72691: LD_VAR 0 6
72695: IFFALSE 72764
// begin if GetWeapon ( i ) = ru_time_lapser then
72697: LD_VAR 0 4
72701: PPUSH
72702: CALL_OW 264
72706: PUSH
72707: LD_INT 49
72709: EQUAL
72710: IFFALSE 72738
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
72712: LD_VAR 0 4
72716: PPUSH
72717: LD_VAR 0 6
72721: PPUSH
72722: LD_VAR 0 4
72726: PPUSH
72727: CALL_OW 74
72731: PPUSH
72732: CALL_OW 112
72736: GO 72762
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
72738: LD_VAR 0 4
72742: PPUSH
72743: LD_VAR 0 6
72747: PPUSH
72748: LD_VAR 0 4
72752: PPUSH
72753: CALL_OW 74
72757: PPUSH
72758: CALL_OW 115
// end else
72762: GO 72864
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
72764: LD_VAR 0 4
72768: PPUSH
72769: LD_VAR 0 2
72773: PUSH
72774: LD_VAR 0 9
72778: ARRAY
72779: PUSH
72780: LD_INT 1
72782: ARRAY
72783: PPUSH
72784: LD_VAR 0 2
72788: PUSH
72789: LD_VAR 0 9
72793: ARRAY
72794: PUSH
72795: LD_INT 2
72797: ARRAY
72798: PPUSH
72799: CALL_OW 297
72803: PUSH
72804: LD_INT 6
72806: GREATER
72807: IFFALSE 72850
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
72809: LD_VAR 0 4
72813: PPUSH
72814: LD_VAR 0 2
72818: PUSH
72819: LD_VAR 0 9
72823: ARRAY
72824: PUSH
72825: LD_INT 1
72827: ARRAY
72828: PPUSH
72829: LD_VAR 0 2
72833: PUSH
72834: LD_VAR 0 9
72838: ARRAY
72839: PUSH
72840: LD_INT 2
72842: ARRAY
72843: PPUSH
72844: CALL_OW 114
72848: GO 72864
// SetTag ( i , tag ) ;
72850: LD_VAR 0 4
72854: PPUSH
72855: LD_VAR 0 9
72859: PPUSH
72860: CALL_OW 109
// end else
72864: GO 72937
// if enemy then
72866: LD_VAR 0 5
72870: IFFALSE 72937
// begin if GetWeapon ( i ) = ru_time_lapser then
72872: LD_VAR 0 4
72876: PPUSH
72877: CALL_OW 264
72881: PUSH
72882: LD_INT 49
72884: EQUAL
72885: IFFALSE 72913
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
72887: LD_VAR 0 4
72891: PPUSH
72892: LD_VAR 0 5
72896: PPUSH
72897: LD_VAR 0 4
72901: PPUSH
72902: CALL_OW 74
72906: PPUSH
72907: CALL_OW 112
72911: GO 72937
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
72913: LD_VAR 0 4
72917: PPUSH
72918: LD_VAR 0 5
72922: PPUSH
72923: LD_VAR 0 4
72927: PPUSH
72928: CALL_OW 74
72932: PPUSH
72933: CALL_OW 115
// end ; end ;
72937: GO 72517
72939: POP
72940: POP
// end ;
72941: LD_VAR 0 3
72945: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
72946: LD_INT 0
72948: PPUSH
72949: PPUSH
72950: PPUSH
// if not unit or IsInUnit ( unit ) then
72951: LD_VAR 0 1
72955: NOT
72956: PUSH
72957: LD_VAR 0 1
72961: PPUSH
72962: CALL_OW 310
72966: OR
72967: IFFALSE 72971
// exit ;
72969: GO 73062
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
72971: LD_ADDR_VAR 0 4
72975: PUSH
72976: LD_VAR 0 1
72980: PPUSH
72981: CALL_OW 250
72985: PPUSH
72986: LD_VAR 0 2
72990: PPUSH
72991: LD_INT 1
72993: PPUSH
72994: CALL_OW 272
72998: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
72999: LD_ADDR_VAR 0 5
73003: PUSH
73004: LD_VAR 0 1
73008: PPUSH
73009: CALL_OW 251
73013: PPUSH
73014: LD_VAR 0 2
73018: PPUSH
73019: LD_INT 1
73021: PPUSH
73022: CALL_OW 273
73026: ST_TO_ADDR
// if ValidHex ( x , y ) then
73027: LD_VAR 0 4
73031: PPUSH
73032: LD_VAR 0 5
73036: PPUSH
73037: CALL_OW 488
73041: IFFALSE 73062
// ComTurnXY ( unit , x , y ) ;
73043: LD_VAR 0 1
73047: PPUSH
73048: LD_VAR 0 4
73052: PPUSH
73053: LD_VAR 0 5
73057: PPUSH
73058: CALL_OW 118
// end ;
73062: LD_VAR 0 3
73066: RET
// export function SeeUnits ( side , units ) ; var i ; begin
73067: LD_INT 0
73069: PPUSH
73070: PPUSH
// result := false ;
73071: LD_ADDR_VAR 0 3
73075: PUSH
73076: LD_INT 0
73078: ST_TO_ADDR
// if not units then
73079: LD_VAR 0 2
73083: NOT
73084: IFFALSE 73088
// exit ;
73086: GO 73133
// for i in units do
73088: LD_ADDR_VAR 0 4
73092: PUSH
73093: LD_VAR 0 2
73097: PUSH
73098: FOR_IN
73099: IFFALSE 73131
// if See ( side , i ) then
73101: LD_VAR 0 1
73105: PPUSH
73106: LD_VAR 0 4
73110: PPUSH
73111: CALL_OW 292
73115: IFFALSE 73129
// begin result := true ;
73117: LD_ADDR_VAR 0 3
73121: PUSH
73122: LD_INT 1
73124: ST_TO_ADDR
// exit ;
73125: POP
73126: POP
73127: GO 73133
// end ;
73129: GO 73098
73131: POP
73132: POP
// end ;
73133: LD_VAR 0 3
73137: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
73138: LD_INT 0
73140: PPUSH
73141: PPUSH
73142: PPUSH
73143: PPUSH
// if not unit or not points then
73144: LD_VAR 0 1
73148: NOT
73149: PUSH
73150: LD_VAR 0 2
73154: NOT
73155: OR
73156: IFFALSE 73160
// exit ;
73158: GO 73250
// dist := 99999 ;
73160: LD_ADDR_VAR 0 5
73164: PUSH
73165: LD_INT 99999
73167: ST_TO_ADDR
// for i in points do
73168: LD_ADDR_VAR 0 4
73172: PUSH
73173: LD_VAR 0 2
73177: PUSH
73178: FOR_IN
73179: IFFALSE 73248
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
73181: LD_ADDR_VAR 0 6
73185: PUSH
73186: LD_VAR 0 1
73190: PPUSH
73191: LD_VAR 0 4
73195: PUSH
73196: LD_INT 1
73198: ARRAY
73199: PPUSH
73200: LD_VAR 0 4
73204: PUSH
73205: LD_INT 2
73207: ARRAY
73208: PPUSH
73209: CALL_OW 297
73213: ST_TO_ADDR
// if tmpDist < dist then
73214: LD_VAR 0 6
73218: PUSH
73219: LD_VAR 0 5
73223: LESS
73224: IFFALSE 73246
// begin result := i ;
73226: LD_ADDR_VAR 0 3
73230: PUSH
73231: LD_VAR 0 4
73235: ST_TO_ADDR
// dist := tmpDist ;
73236: LD_ADDR_VAR 0 5
73240: PUSH
73241: LD_VAR 0 6
73245: ST_TO_ADDR
// end ; end ;
73246: GO 73178
73248: POP
73249: POP
// end ;
73250: LD_VAR 0 3
73254: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
73255: LD_INT 0
73257: PPUSH
// uc_side := side ;
73258: LD_ADDR_OWVAR 20
73262: PUSH
73263: LD_VAR 0 1
73267: ST_TO_ADDR
// uc_nation := 3 ;
73268: LD_ADDR_OWVAR 21
73272: PUSH
73273: LD_INT 3
73275: ST_TO_ADDR
// vc_chassis := 25 ;
73276: LD_ADDR_OWVAR 37
73280: PUSH
73281: LD_INT 25
73283: ST_TO_ADDR
// vc_engine := engine_siberite ;
73284: LD_ADDR_OWVAR 39
73288: PUSH
73289: LD_INT 3
73291: ST_TO_ADDR
// vc_control := control_computer ;
73292: LD_ADDR_OWVAR 38
73296: PUSH
73297: LD_INT 3
73299: ST_TO_ADDR
// vc_weapon := 59 ;
73300: LD_ADDR_OWVAR 40
73304: PUSH
73305: LD_INT 59
73307: ST_TO_ADDR
// result := CreateVehicle ;
73308: LD_ADDR_VAR 0 5
73312: PUSH
73313: CALL_OW 45
73317: ST_TO_ADDR
// SetDir ( result , d ) ;
73318: LD_VAR 0 5
73322: PPUSH
73323: LD_VAR 0 4
73327: PPUSH
73328: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
73332: LD_VAR 0 5
73336: PPUSH
73337: LD_VAR 0 2
73341: PPUSH
73342: LD_VAR 0 3
73346: PPUSH
73347: LD_INT 0
73349: PPUSH
73350: CALL_OW 48
// end ;
73354: LD_VAR 0 5
73358: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
73359: LD_INT 0
73361: PPUSH
73362: PPUSH
73363: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
73364: LD_ADDR_VAR 0 2
73368: PUSH
73369: LD_INT 0
73371: PUSH
73372: LD_INT 0
73374: PUSH
73375: LD_INT 0
73377: PUSH
73378: LD_INT 0
73380: PUSH
73381: EMPTY
73382: LIST
73383: LIST
73384: LIST
73385: LIST
73386: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
73387: LD_VAR 0 1
73391: NOT
73392: PUSH
73393: LD_VAR 0 1
73397: PPUSH
73398: CALL_OW 264
73402: PUSH
73403: LD_INT 12
73405: PUSH
73406: LD_INT 51
73408: PUSH
73409: LD_INT 32
73411: PUSH
73412: LD_INT 89
73414: PUSH
73415: EMPTY
73416: LIST
73417: LIST
73418: LIST
73419: LIST
73420: IN
73421: NOT
73422: OR
73423: IFFALSE 73427
// exit ;
73425: GO 73525
// for i := 1 to 3 do
73427: LD_ADDR_VAR 0 3
73431: PUSH
73432: DOUBLE
73433: LD_INT 1
73435: DEC
73436: ST_TO_ADDR
73437: LD_INT 3
73439: PUSH
73440: FOR_TO
73441: IFFALSE 73523
// begin tmp := GetCargo ( cargo , i ) ;
73443: LD_ADDR_VAR 0 4
73447: PUSH
73448: LD_VAR 0 1
73452: PPUSH
73453: LD_VAR 0 3
73457: PPUSH
73458: CALL_OW 289
73462: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
73463: LD_ADDR_VAR 0 2
73467: PUSH
73468: LD_VAR 0 2
73472: PPUSH
73473: LD_VAR 0 3
73477: PPUSH
73478: LD_VAR 0 4
73482: PPUSH
73483: CALL_OW 1
73487: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
73488: LD_ADDR_VAR 0 2
73492: PUSH
73493: LD_VAR 0 2
73497: PPUSH
73498: LD_INT 4
73500: PPUSH
73501: LD_VAR 0 2
73505: PUSH
73506: LD_INT 4
73508: ARRAY
73509: PUSH
73510: LD_VAR 0 4
73514: PLUS
73515: PPUSH
73516: CALL_OW 1
73520: ST_TO_ADDR
// end ;
73521: GO 73440
73523: POP
73524: POP
// end ;
73525: LD_VAR 0 2
73529: RET
// export function Length ( array ) ; begin
73530: LD_INT 0
73532: PPUSH
// result := array + 0 ;
73533: LD_ADDR_VAR 0 2
73537: PUSH
73538: LD_VAR 0 1
73542: PUSH
73543: LD_INT 0
73545: PLUS
73546: ST_TO_ADDR
// end ;
73547: LD_VAR 0 2
73551: RET
// export function PrepareArray ( array ) ; begin
73552: LD_INT 0
73554: PPUSH
// result := array diff 0 ;
73555: LD_ADDR_VAR 0 2
73559: PUSH
73560: LD_VAR 0 1
73564: PUSH
73565: LD_INT 0
73567: DIFF
73568: ST_TO_ADDR
// if not result [ 1 ] then
73569: LD_VAR 0 2
73573: PUSH
73574: LD_INT 1
73576: ARRAY
73577: NOT
73578: IFFALSE 73598
// result := Delete ( result , 1 ) ;
73580: LD_ADDR_VAR 0 2
73584: PUSH
73585: LD_VAR 0 2
73589: PPUSH
73590: LD_INT 1
73592: PPUSH
73593: CALL_OW 3
73597: ST_TO_ADDR
// end ;
73598: LD_VAR 0 2
73602: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
73603: LD_INT 0
73605: PPUSH
73606: PPUSH
73607: PPUSH
73608: PPUSH
// sibRocketRange := 25 ;
73609: LD_ADDR_VAR 0 6
73613: PUSH
73614: LD_INT 25
73616: ST_TO_ADDR
// result := false ;
73617: LD_ADDR_VAR 0 4
73621: PUSH
73622: LD_INT 0
73624: ST_TO_ADDR
// for i := 0 to 5 do
73625: LD_ADDR_VAR 0 5
73629: PUSH
73630: DOUBLE
73631: LD_INT 0
73633: DEC
73634: ST_TO_ADDR
73635: LD_INT 5
73637: PUSH
73638: FOR_TO
73639: IFFALSE 73706
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
73641: LD_VAR 0 1
73645: PPUSH
73646: LD_VAR 0 5
73650: PPUSH
73651: LD_VAR 0 6
73655: PPUSH
73656: CALL_OW 272
73660: PPUSH
73661: LD_VAR 0 2
73665: PPUSH
73666: LD_VAR 0 5
73670: PPUSH
73671: LD_VAR 0 6
73675: PPUSH
73676: CALL_OW 273
73680: PPUSH
73681: LD_VAR 0 3
73685: PPUSH
73686: CALL_OW 309
73690: IFFALSE 73704
// begin result := true ;
73692: LD_ADDR_VAR 0 4
73696: PUSH
73697: LD_INT 1
73699: ST_TO_ADDR
// exit ;
73700: POP
73701: POP
73702: GO 73708
// end ;
73704: GO 73638
73706: POP
73707: POP
// end ;
73708: LD_VAR 0 4
73712: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
73713: LD_INT 0
73715: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
73716: LD_VAR 0 1
73720: PPUSH
73721: LD_VAR 0 2
73725: PPUSH
73726: LD_INT 0
73728: PPUSH
73729: LD_INT 0
73731: PPUSH
73732: LD_INT 1
73734: PPUSH
73735: LD_INT 0
73737: PPUSH
73738: CALL_OW 587
// end ; end_of_file
73742: LD_VAR 0 3
73746: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
73747: LD_VAR 0 1
73751: PUSH
73752: LD_INT 200
73754: DOUBLE
73755: GREATEREQUAL
73756: IFFALSE 73764
73758: LD_INT 299
73760: DOUBLE
73761: LESSEQUAL
73762: IFTRUE 73766
73764: GO 73798
73766: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
73767: LD_VAR 0 1
73771: PPUSH
73772: LD_VAR 0 2
73776: PPUSH
73777: LD_VAR 0 3
73781: PPUSH
73782: LD_VAR 0 4
73786: PPUSH
73787: LD_VAR 0 5
73791: PPUSH
73792: CALL 28413 0 5
73796: GO 73875
73798: LD_INT 300
73800: DOUBLE
73801: GREATEREQUAL
73802: IFFALSE 73810
73804: LD_INT 399
73806: DOUBLE
73807: LESSEQUAL
73808: IFTRUE 73812
73810: GO 73874
73812: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
73813: LD_VAR 0 1
73817: PPUSH
73818: LD_VAR 0 2
73822: PPUSH
73823: LD_VAR 0 3
73827: PPUSH
73828: LD_VAR 0 4
73832: PPUSH
73833: LD_VAR 0 5
73837: PPUSH
73838: LD_VAR 0 6
73842: PPUSH
73843: LD_VAR 0 7
73847: PPUSH
73848: LD_VAR 0 8
73852: PPUSH
73853: LD_VAR 0 9
73857: PPUSH
73858: LD_VAR 0 10
73862: PPUSH
73863: LD_VAR 0 11
73867: PPUSH
73868: CALL 24746 0 11
73872: GO 73875
73874: POP
// end ;
73875: PPOPN 11
73877: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
73878: LD_VAR 0 1
73882: PPUSH
73883: LD_VAR 0 2
73887: PPUSH
73888: LD_VAR 0 3
73892: PPUSH
73893: LD_VAR 0 4
73897: PPUSH
73898: LD_VAR 0 5
73902: PPUSH
73903: CALL 28149 0 5
// end ; end_of_file
73907: PPOPN 5
73909: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
73910: LD_VAR 0 1
73914: PPUSH
73915: LD_VAR 0 2
73919: PPUSH
73920: LD_VAR 0 3
73924: PPUSH
73925: LD_VAR 0 4
73929: PPUSH
73930: LD_VAR 0 5
73934: PPUSH
73935: LD_VAR 0 6
73939: PPUSH
73940: CALL 12398 0 6
// end ;
73944: PPOPN 6
73946: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
73947: LD_INT 0
73949: PPUSH
// begin if not units then
73950: LD_VAR 0 1
73954: NOT
73955: IFFALSE 73959
// exit ;
73957: GO 73959
// end ;
73959: PPOPN 7
73961: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
73962: CALL 12302 0 0
// end ;
73966: PPOPN 1
73968: END
