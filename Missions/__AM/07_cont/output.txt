// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// Init ;
   8: CALL 44 0 0
// DebugMode ;
  12: CALL 265 0 0
// AnimateTrees ( true ) ;
  16: LD_INT 1
  18: PPUSH
  19: CALL_OW 573
// CreateNature ;
  23: CALL 1572 0 0
// PrepareRussians ;
  27: CALL 4591 0 0
// PrepareAmericans ;
  31: CALL 3480 0 0
// Action ;
  35: CALL 8739 0 0
// SaveForQuickRestart ;
  39: CALL_OW 22
// end ;
  43: END
// export debug ; export mission_prev_prefix , mission_prefix ; export buildings_counter , time_to_end , can_end , must_end , kill_counter ; function Init ; begin
  44: LD_INT 0
  46: PPUSH
// debug := false ;
  47: LD_ADDR_EXP 1
  51: PUSH
  52: LD_INT 0
  54: ST_TO_ADDR
// mission_prefix := 07c_ ;
  55: LD_ADDR_EXP 3
  59: PUSH
  60: LD_STRING 07c_
  62: ST_TO_ADDR
// mission_prev_prefix := 07_ ;
  63: LD_ADDR_EXP 2
  67: PUSH
  68: LD_STRING 07_
  70: ST_TO_ADDR
// buildings_counter := 0 ;
  71: LD_ADDR_EXP 4
  75: PUSH
  76: LD_INT 0
  78: ST_TO_ADDR
// time_to_end := [ [ 32 32$00 , 29 29$00 , 26 26$00 , 23 23$00 ] [ Difficulty ] , [ 38 38$00 , 36 36$00 , 34 34$00 , 32 32$00 ] [ Difficulty ] , [ 43 43$00 , 41 41$00 , 39 39$00 , 37 37$00 ] [ Difficulty ] ] ;
  79: LD_ADDR_EXP 5
  83: PUSH
  84: LD_INT 67200
  86: PUSH
  87: LD_INT 60900
  89: PUSH
  90: LD_INT 54600
  92: PUSH
  93: LD_INT 48300
  95: PUSH
  96: EMPTY
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: PUSH
 102: LD_OWVAR 67
 106: ARRAY
 107: PUSH
 108: LD_INT 79800
 110: PUSH
 111: LD_INT 75600
 113: PUSH
 114: LD_INT 71400
 116: PUSH
 117: LD_INT 67200
 119: PUSH
 120: EMPTY
 121: LIST
 122: LIST
 123: LIST
 124: LIST
 125: PUSH
 126: LD_OWVAR 67
 130: ARRAY
 131: PUSH
 132: LD_INT 90300
 134: PUSH
 135: LD_INT 86100
 137: PUSH
 138: LD_INT 81900
 140: PUSH
 141: LD_INT 77700
 143: PUSH
 144: EMPTY
 145: LIST
 146: LIST
 147: LIST
 148: LIST
 149: PUSH
 150: LD_OWVAR 67
 154: ARRAY
 155: PUSH
 156: EMPTY
 157: LIST
 158: LIST
 159: LIST
 160: ST_TO_ADDR
// can_end := false ;
 161: LD_ADDR_EXP 6
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// must_end := false ;
 169: LD_ADDR_EXP 7
 173: PUSH
 174: LD_INT 0
 176: ST_TO_ADDR
// kill_counter := 0 ;
 177: LD_ADDR_EXP 8
 181: PUSH
 182: LD_INT 0
 184: ST_TO_ADDR
// end ;
 185: LD_VAR 0 1
 189: RET
// every 0 0$01 trigger not debug do
 190: LD_EXP 1
 194: NOT
 195: IFFALSE 264
 197: GO 199
 199: DISABLE
// begin enable ;
 200: ENABLE
// if not must_end then
 201: LD_EXP 7
 205: NOT
 206: IFFALSE 227
// display_strings := [ #Am07-1 , tick ] else
 208: LD_ADDR_OWVAR 47
 212: PUSH
 213: LD_STRING #Am07-1
 215: PUSH
 216: LD_OWVAR 1
 220: PUSH
 221: EMPTY
 222: LIST
 223: LIST
 224: ST_TO_ADDR
 225: GO 264
// display_strings := [ #Am07-1 , tick , #Am07-2 , time_to_end [ 3 ] - tick ] ;
 227: LD_ADDR_OWVAR 47
 231: PUSH
 232: LD_STRING #Am07-1
 234: PUSH
 235: LD_OWVAR 1
 239: PUSH
 240: LD_STRING #Am07-2
 242: PUSH
 243: LD_EXP 5
 247: PUSH
 248: LD_INT 3
 250: ARRAY
 251: PUSH
 252: LD_OWVAR 1
 256: MINUS
 257: PUSH
 258: EMPTY
 259: LIST
 260: LIST
 261: LIST
 262: LIST
 263: ST_TO_ADDR
// end ;
 264: END
// function DebugMode ; var i ; begin
 265: LD_INT 0
 267: PPUSH
 268: PPUSH
// if not debug then
 269: LD_EXP 1
 273: NOT
 274: IFFALSE 278
// exit ;
 276: GO 293
// Difficulty := 4 ;
 278: LD_ADDR_OWVAR 67
 282: PUSH
 283: LD_INT 4
 285: ST_TO_ADDR
// FogOff ( 1 ) ;
 286: LD_INT 1
 288: PPUSH
 289: CALL_OW 344
// end ;
 293: LD_VAR 0 1
 297: RET
// every 3 trigger debug do var i , filter ;
 298: LD_EXP 1
 302: IFFALSE 391
 304: GO 306
 306: DISABLE
 307: LD_INT 0
 309: PPUSH
 310: PPUSH
// begin enable ;
 311: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 500 ] ] ] ) ;
 312: LD_ADDR_VAR 0 2
 316: PUSH
 317: LD_INT 22
 319: PUSH
 320: LD_INT 1
 322: PUSH
 323: EMPTY
 324: LIST
 325: LIST
 326: PUSH
 327: LD_INT 3
 329: PUSH
 330: LD_INT 24
 332: PUSH
 333: LD_INT 500
 335: PUSH
 336: EMPTY
 337: LIST
 338: LIST
 339: PUSH
 340: EMPTY
 341: LIST
 342: LIST
 343: PUSH
 344: EMPTY
 345: LIST
 346: LIST
 347: PPUSH
 348: CALL_OW 69
 352: ST_TO_ADDR
// if not filter then
 353: LD_VAR 0 2
 357: NOT
 358: IFFALSE 362
// exit ;
 360: GO 391
// for i in filter do
 362: LD_ADDR_VAR 0 1
 366: PUSH
 367: LD_VAR 0 2
 371: PUSH
 372: FOR_IN
 373: IFFALSE 389
// SetLives ( i , 1000 ) ;
 375: LD_VAR 0 1
 379: PPUSH
 380: LD_INT 1000
 382: PPUSH
 383: CALL_OW 234
 387: GO 372
 389: POP
 390: POP
// end ;
 391: PPOPN 2
 393: END
// every 0 0$1 trigger kill_counter >= 20 do
 394: LD_EXP 8
 398: PUSH
 399: LD_INT 20
 401: GREATEREQUAL
 402: IFFALSE 414
 404: GO 406
 406: DISABLE
// SetAchievement ( ACH_HITMAN ) ;
 407: LD_STRING ACH_HITMAN
 409: PPUSH
 410: CALL_OW 543
 414: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] ] ) >= 3 do
 415: LD_INT 22
 417: PUSH
 418: LD_INT 1
 420: PUSH
 421: EMPTY
 422: LIST
 423: LIST
 424: PUSH
 425: LD_INT 23
 427: PUSH
 428: LD_INT 3
 430: PUSH
 431: EMPTY
 432: LIST
 433: LIST
 434: PUSH
 435: LD_INT 21
 437: PUSH
 438: LD_INT 2
 440: PUSH
 441: EMPTY
 442: LIST
 443: LIST
 444: PUSH
 445: EMPTY
 446: LIST
 447: LIST
 448: LIST
 449: PPUSH
 450: CALL_OW 69
 454: PUSH
 455: LD_INT 3
 457: GREATEREQUAL
 458: IFFALSE 470
 460: GO 462
 462: DISABLE
// SetAchievement ( ACH_TANKACE ) ;
 463: LD_STRING ACH_TANKACE
 465: PPUSH
 466: CALL_OW 543
 470: END
// every 0 0$1 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) = 0 do
 471: LD_INT 2
 473: PUSH
 474: LD_INT 30
 476: PUSH
 477: LD_INT 0
 479: PUSH
 480: EMPTY
 481: LIST
 482: LIST
 483: PUSH
 484: LD_INT 30
 486: PUSH
 487: LD_INT 1
 489: PUSH
 490: EMPTY
 491: LIST
 492: LIST
 493: PUSH
 494: EMPTY
 495: LIST
 496: LIST
 497: LIST
 498: PPUSH
 499: CALL_OW 69
 503: PUSH
 504: LD_INT 0
 506: EQUAL
 507: IFFALSE 519
 509: GO 511
 511: DISABLE
// SetAchievement ( ACH_COMMANDO ) ; end_of_file
 512: LD_STRING ACH_COMMANDO
 514: PPUSH
 515: CALL_OW 543
 519: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 520: LD_INT 0
 522: PPUSH
// uc_side := side ;
 523: LD_ADDR_OWVAR 20
 527: PUSH
 528: LD_VAR 0 1
 532: ST_TO_ADDR
// uc_nation := nation ;
 533: LD_ADDR_OWVAR 21
 537: PUSH
 538: LD_VAR 0 2
 542: ST_TO_ADDR
// vc_chassis := chassis ;
 543: LD_ADDR_OWVAR 37
 547: PUSH
 548: LD_VAR 0 3
 552: ST_TO_ADDR
// vc_engine := engine ;
 553: LD_ADDR_OWVAR 39
 557: PUSH
 558: LD_VAR 0 4
 562: ST_TO_ADDR
// vc_control := control ;
 563: LD_ADDR_OWVAR 38
 567: PUSH
 568: LD_VAR 0 5
 572: ST_TO_ADDR
// vc_weapon := weapon ;
 573: LD_ADDR_OWVAR 40
 577: PUSH
 578: LD_VAR 0 6
 582: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 583: LD_ADDR_OWVAR 41
 587: PUSH
 588: LD_VAR 0 7
 592: ST_TO_ADDR
// result := CreateVehicle ;
 593: LD_ADDR_VAR 0 8
 597: PUSH
 598: CALL_OW 45
 602: ST_TO_ADDR
// end ;
 603: LD_VAR 0 8
 607: RET
// export function GetRandom ( sex ) ; var i , filter ; begin
 608: LD_INT 0
 610: PPUSH
 611: PPUSH
 612: PPUSH
// filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam ] ;
 613: LD_ADDR_VAR 0 4
 617: PUSH
 618: LD_INT 22
 620: PUSH
 621: LD_INT 1
 623: PUSH
 624: EMPTY
 625: LIST
 626: LIST
 627: PUSH
 628: LD_INT 21
 630: PUSH
 631: LD_INT 1
 633: PUSH
 634: EMPTY
 635: LIST
 636: LIST
 637: PUSH
 638: LD_INT 50
 640: PUSH
 641: EMPTY
 642: LIST
 643: PUSH
 644: EMPTY
 645: LIST
 646: LIST
 647: LIST
 648: PPUSH
 649: CALL_OW 69
 653: PUSH
 654: LD_EXP 9
 658: PUSH
 659: LD_EXP 10
 663: PUSH
 664: LD_EXP 11
 668: PUSH
 669: LD_EXP 12
 673: PUSH
 674: LD_EXP 13
 678: PUSH
 679: LD_EXP 14
 683: PUSH
 684: LD_EXP 15
 688: PUSH
 689: LD_EXP 16
 693: PUSH
 694: LD_EXP 18
 698: PUSH
 699: LD_EXP 17
 703: PUSH
 704: EMPTY
 705: LIST
 706: LIST
 707: LIST
 708: LIST
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: LIST
 714: LIST
 715: DIFF
 716: ST_TO_ADDR
// if not filter then
 717: LD_VAR 0 4
 721: NOT
 722: IFFALSE 726
// exit ;
 724: GO 753
// result := UnitFilter ( filter , [ f_sex , sex ] ) ;
 726: LD_ADDR_VAR 0 2
 730: PUSH
 731: LD_VAR 0 4
 735: PPUSH
 736: LD_INT 26
 738: PUSH
 739: LD_VAR 0 1
 743: PUSH
 744: EMPTY
 745: LIST
 746: LIST
 747: PPUSH
 748: CALL_OW 72
 752: ST_TO_ADDR
// end ;
 753: LD_VAR 0 2
 757: RET
// export function SayX ( units , ident ) ; var i ; begin
 758: LD_INT 0
 760: PPUSH
 761: PPUSH
// result := false ;
 762: LD_ADDR_VAR 0 3
 766: PUSH
 767: LD_INT 0
 769: ST_TO_ADDR
// if not units then
 770: LD_VAR 0 1
 774: NOT
 775: IFFALSE 779
// exit ;
 777: GO 833
// for i in units do
 779: LD_ADDR_VAR 0 4
 783: PUSH
 784: LD_VAR 0 1
 788: PUSH
 789: FOR_IN
 790: IFFALSE 831
// if IsOk ( i ) then
 792: LD_VAR 0 4
 796: PPUSH
 797: CALL_OW 302
 801: IFFALSE 829
// begin Say ( i , ident ) ;
 803: LD_VAR 0 4
 807: PPUSH
 808: LD_VAR 0 2
 812: PPUSH
 813: CALL_OW 88
// result := i ;
 817: LD_ADDR_VAR 0 3
 821: PUSH
 822: LD_VAR 0 4
 826: ST_TO_ADDR
// break ;
 827: GO 831
// end ;
 829: GO 789
 831: POP
 832: POP
// end ;
 833: LD_VAR 0 3
 837: RET
// export function GoToAnotherTower ( un , b , x , y ) ; var i , filter , barracks , side ; begin
 838: LD_INT 0
 840: PPUSH
 841: PPUSH
 842: PPUSH
 843: PPUSH
 844: PPUSH
// if not un or not IsOk ( un ) then
 845: LD_VAR 0 1
 849: NOT
 850: IFTRUE 864
 852: PUSH
 853: LD_VAR 0 1
 857: PPUSH
 858: CALL_OW 302
 862: NOT
 863: OR
 864: IFFALSE 868
// exit ;
 866: GO 1177
// side := GetSide ( un ) ;
 868: LD_ADDR_VAR 0 9
 872: PUSH
 873: LD_VAR 0 1
 877: PPUSH
 878: CALL_OW 255
 882: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_not , [ f_tag , 7 ] ] , [ f_ok ] , [ f_empty ] ] ) diff b ;
 883: LD_ADDR_VAR 0 7
 887: PUSH
 888: LD_INT 22
 890: PUSH
 891: LD_VAR 0 9
 895: PUSH
 896: EMPTY
 897: LIST
 898: LIST
 899: PUSH
 900: LD_INT 30
 902: PUSH
 903: LD_INT 32
 905: PUSH
 906: EMPTY
 907: LIST
 908: LIST
 909: PUSH
 910: LD_INT 3
 912: PUSH
 913: LD_INT 120
 915: PUSH
 916: LD_INT 7
 918: PUSH
 919: EMPTY
 920: LIST
 921: LIST
 922: PUSH
 923: EMPTY
 924: LIST
 925: LIST
 926: PUSH
 927: LD_INT 50
 929: PUSH
 930: EMPTY
 931: LIST
 932: PUSH
 933: LD_INT 58
 935: PUSH
 936: EMPTY
 937: LIST
 938: PUSH
 939: EMPTY
 940: LIST
 941: LIST
 942: LIST
 943: LIST
 944: LIST
 945: PPUSH
 946: CALL_OW 69
 950: PUSH
 951: LD_VAR 0 2
 955: DIFF
 956: ST_TO_ADDR
// barracks := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_barracks ] ] ) ;
 957: LD_ADDR_VAR 0 8
 961: PUSH
 962: LD_INT 22
 964: PUSH
 965: LD_VAR 0 9
 969: PUSH
 970: EMPTY
 971: LIST
 972: LIST
 973: PUSH
 974: LD_INT 30
 976: PUSH
 977: LD_INT 5
 979: PUSH
 980: EMPTY
 981: LIST
 982: LIST
 983: PUSH
 984: EMPTY
 985: LIST
 986: LIST
 987: PPUSH
 988: CALL_OW 69
 992: ST_TO_ADDR
// if not filter then
 993: LD_VAR 0 7
 997: NOT
 998: IFFALSE 1090
// begin if barracks then
1000: LD_VAR 0 8
1004: IFFALSE 1069
// for i in barracks do
1006: LD_ADDR_VAR 0 6
1010: PUSH
1011: LD_VAR 0 8
1015: PUSH
1016: FOR_IN
1017: IFFALSE 1067
// begin if UnitsInside ( i ) < 6 and IsOk ( i ) then
1019: LD_VAR 0 6
1023: PPUSH
1024: CALL_OW 313
1028: PUSH
1029: LD_INT 6
1031: LESS
1032: IFFALSE 1045
1034: PUSH
1035: LD_VAR 0 6
1039: PPUSH
1040: CALL_OW 302
1044: AND
1045: IFFALSE 1065
// begin ComEnterUnit ( un , i ) ;
1047: LD_VAR 0 1
1051: PPUSH
1052: LD_VAR 0 6
1056: PPUSH
1057: CALL_OW 120
// exit ;
1061: POP
1062: POP
1063: GO 1177
// end ; end ;
1065: GO 1016
1067: POP
1068: POP
// ComMoveXY ( un , x , y ) ;
1069: LD_VAR 0 1
1073: PPUSH
1074: LD_VAR 0 3
1078: PPUSH
1079: LD_VAR 0 4
1083: PPUSH
1084: CALL_OW 111
// end else
1088: GO 1177
// begin filter := SortByDistanceUnit ( un , filter , true , true ) ;
1090: LD_ADDR_VAR 0 7
1094: PUSH
1095: LD_VAR 0 1
1099: PPUSH
1100: LD_VAR 0 7
1104: PPUSH
1105: LD_INT 1
1107: PPUSH
1108: LD_INT 1
1110: PPUSH
1111: CALL 40549 0 4
1115: ST_TO_ADDR
// if filter then
1116: LD_VAR 0 7
1120: IFFALSE 1158
// begin SetTag ( filter [ 1 ] , 7 ) ;
1122: LD_VAR 0 7
1126: PUSH
1127: LD_INT 1
1129: ARRAY
1130: PPUSH
1131: LD_INT 7
1133: PPUSH
1134: CALL_OW 109
// ComEnterUnit ( un , filter [ 1 ] ) ;
1138: LD_VAR 0 1
1142: PPUSH
1143: LD_VAR 0 7
1147: PUSH
1148: LD_INT 1
1150: ARRAY
1151: PPUSH
1152: CALL_OW 120
// end else
1156: GO 1177
// ComMoveXY ( un , x , y ) ;
1158: LD_VAR 0 1
1162: PPUSH
1163: LD_VAR 0 3
1167: PPUSH
1168: LD_VAR 0 4
1172: PPUSH
1173: CALL_OW 111
// end ; end ;
1177: LD_VAR 0 5
1181: RET
// export function BaseNeedEnergy ( base ) ; var i , tmp ; begin
1182: LD_INT 0
1184: PPUSH
1185: PPUSH
1186: PPUSH
// if not base then
1187: LD_VAR 0 1
1191: NOT
1192: IFFALSE 1196
// exit ;
1194: GO 1254
// tmp := GetEnergy ( GetBase ( base ) ) ;
1196: LD_ADDR_VAR 0 4
1200: PUSH
1201: LD_VAR 0 1
1205: PPUSH
1206: CALL_OW 274
1210: PPUSH
1211: CALL_OW 278
1215: ST_TO_ADDR
// if tmp [ 1 ] > tmp [ 4 ] then
1216: LD_VAR 0 4
1220: PUSH
1221: LD_INT 1
1223: ARRAY
1224: PUSH
1225: LD_VAR 0 4
1229: PUSH
1230: LD_INT 4
1232: ARRAY
1233: GREATER
1234: IFFALSE 1246
// result := true else
1236: LD_ADDR_VAR 0 2
1240: PUSH
1241: LD_INT 1
1243: ST_TO_ADDR
1244: GO 1254
// result := false ;
1246: LD_ADDR_VAR 0 2
1250: PUSH
1251: LD_INT 0
1253: ST_TO_ADDR
// end ;
1254: LD_VAR 0 2
1258: RET
// export function FilterPeople ( side ) ; begin
1259: LD_INT 0
1261: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] ] ) ;
1262: LD_ADDR_VAR 0 2
1266: PUSH
1267: LD_INT 22
1269: PUSH
1270: LD_VAR 0 1
1274: PUSH
1275: EMPTY
1276: LIST
1277: LIST
1278: PUSH
1279: LD_INT 21
1281: PUSH
1282: LD_INT 1
1284: PUSH
1285: EMPTY
1286: LIST
1287: LIST
1288: PUSH
1289: EMPTY
1290: LIST
1291: LIST
1292: PPUSH
1293: CALL_OW 69
1297: ST_TO_ADDR
// end ;
1298: LD_VAR 0 2
1302: RET
// export function FilterDrivers ( side ) ; begin
1303: LD_INT 0
1305: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_outside ] ] ] ) ;
1306: LD_ADDR_VAR 0 2
1310: PUSH
1311: LD_INT 22
1313: PUSH
1314: LD_VAR 0 1
1318: PUSH
1319: EMPTY
1320: LIST
1321: LIST
1322: PUSH
1323: LD_INT 3
1325: PUSH
1326: LD_INT 56
1328: PUSH
1329: EMPTY
1330: LIST
1331: PUSH
1332: EMPTY
1333: LIST
1334: LIST
1335: PUSH
1336: EMPTY
1337: LIST
1338: LIST
1339: PPUSH
1340: CALL_OW 69
1344: ST_TO_ADDR
// end ;
1345: LD_VAR 0 2
1349: RET
// export function FilterPeopleArea ( side , area ) ; begin
1350: LD_INT 0
1352: PPUSH
// result := FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ;
1353: LD_ADDR_VAR 0 3
1357: PUSH
1358: LD_VAR 0 2
1362: PPUSH
1363: LD_INT 22
1365: PUSH
1366: LD_INT 1
1368: PUSH
1369: EMPTY
1370: LIST
1371: LIST
1372: PUSH
1373: LD_INT 21
1375: PUSH
1376: LD_INT 1
1378: PUSH
1379: EMPTY
1380: LIST
1381: LIST
1382: PUSH
1383: EMPTY
1384: LIST
1385: LIST
1386: PPUSH
1387: CALL_OW 70
1391: ST_TO_ADDR
// end ;
1392: LD_VAR 0 3
1396: RET
// export function FilterDriversArea ( side , area ) ; var i , tmp ; begin
1397: LD_INT 0
1399: PPUSH
1400: PPUSH
1401: PPUSH
// tmp := FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) ;
1402: LD_ADDR_VAR 0 5
1406: PUSH
1407: LD_VAR 0 2
1411: PPUSH
1412: LD_INT 22
1414: PUSH
1415: LD_INT 1
1417: PUSH
1418: EMPTY
1419: LIST
1420: LIST
1421: PUSH
1422: LD_INT 21
1424: PUSH
1425: LD_INT 2
1427: PUSH
1428: EMPTY
1429: LIST
1430: LIST
1431: PUSH
1432: LD_INT 3
1434: PUSH
1435: LD_INT 58
1437: PUSH
1438: EMPTY
1439: LIST
1440: PUSH
1441: EMPTY
1442: LIST
1443: LIST
1444: PUSH
1445: EMPTY
1446: LIST
1447: LIST
1448: LIST
1449: PPUSH
1450: CALL_OW 70
1454: ST_TO_ADDR
// result := [ ] ;
1455: LD_ADDR_VAR 0 3
1459: PUSH
1460: EMPTY
1461: ST_TO_ADDR
// if not tmp then
1462: LD_VAR 0 5
1466: NOT
1467: IFFALSE 1471
// exit ;
1469: GO 1523
// for i in tmp do
1471: LD_ADDR_VAR 0 4
1475: PUSH
1476: LD_VAR 0 5
1480: PUSH
1481: FOR_IN
1482: IFFALSE 1507
// result := result union IsDrivenBy ( i ) ;
1484: LD_ADDR_VAR 0 3
1488: PUSH
1489: LD_VAR 0 3
1493: PUSH
1494: LD_VAR 0 4
1498: PPUSH
1499: CALL_OW 311
1503: UNION
1504: ST_TO_ADDR
1505: GO 1481
1507: POP
1508: POP
// result := result diff 0 ;
1509: LD_ADDR_VAR 0 3
1513: PUSH
1514: LD_VAR 0 3
1518: PUSH
1519: LD_INT 0
1521: DIFF
1522: ST_TO_ADDR
// end ;
1523: LD_VAR 0 3
1527: RET
// export function FilterBuildings ( side ) ; begin
1528: LD_INT 0
1530: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
1531: LD_ADDR_VAR 0 2
1535: PUSH
1536: LD_INT 22
1538: PUSH
1539: LD_VAR 0 1
1543: PUSH
1544: EMPTY
1545: LIST
1546: LIST
1547: PUSH
1548: LD_INT 21
1550: PUSH
1551: LD_INT 3
1553: PUSH
1554: EMPTY
1555: LIST
1556: LIST
1557: PUSH
1558: EMPTY
1559: LIST
1560: LIST
1561: PPUSH
1562: CALL_OW 69
1566: ST_TO_ADDR
// end ;
1567: LD_VAR 0 2
1571: RET
// export function CreateNature ; var i , animal , nat_area ; begin
1572: LD_INT 0
1574: PPUSH
1575: PPUSH
1576: PPUSH
1577: PPUSH
// uc_side = 0 ;
1578: LD_ADDR_OWVAR 20
1582: PUSH
1583: LD_INT 0
1585: ST_TO_ADDR
// uc_nation = 0 ;
1586: LD_ADDR_OWVAR 21
1590: PUSH
1591: LD_INT 0
1593: ST_TO_ADDR
// nat_area := wildArea ;
1594: LD_ADDR_VAR 0 4
1598: PUSH
1599: LD_INT 3
1601: ST_TO_ADDR
// InitHc ;
1602: CALL_OW 19
// for i = 1 to 4 do
1606: LD_ADDR_VAR 0 2
1610: PUSH
1611: DOUBLE
1612: LD_INT 1
1614: DEC
1615: ST_TO_ADDR
1616: LD_INT 4
1618: PUSH
1619: FOR_TO
1620: IFFALSE 1675
// begin hc_class = 18 ;
1622: LD_ADDR_OWVAR 28
1626: PUSH
1627: LD_INT 18
1629: ST_TO_ADDR
// hc_gallery =  ;
1630: LD_ADDR_OWVAR 33
1634: PUSH
1635: LD_STRING 
1637: ST_TO_ADDR
// hc_face_number = 1 ;
1638: LD_ADDR_OWVAR 34
1642: PUSH
1643: LD_INT 1
1645: ST_TO_ADDR
// animal := CreateHuman ;
1646: LD_ADDR_VAR 0 3
1650: PUSH
1651: CALL_OW 44
1655: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
1656: LD_VAR 0 3
1660: PPUSH
1661: LD_VAR 0 4
1665: PPUSH
1666: LD_INT 0
1668: PPUSH
1669: CALL_OW 49
// end ;
1673: GO 1619
1675: POP
1676: POP
// for i = 1 to 6 do
1677: LD_ADDR_VAR 0 2
1681: PUSH
1682: DOUBLE
1683: LD_INT 1
1685: DEC
1686: ST_TO_ADDR
1687: LD_INT 6
1689: PUSH
1690: FOR_TO
1691: IFFALSE 1762
// begin hc_class = class_tiger ;
1693: LD_ADDR_OWVAR 28
1697: PUSH
1698: LD_INT 14
1700: ST_TO_ADDR
// hc_gallery =  ;
1701: LD_ADDR_OWVAR 33
1705: PUSH
1706: LD_STRING 
1708: ST_TO_ADDR
// hc_agressivity = Rand ( 0 , 10 ) ;
1709: LD_ADDR_OWVAR 35
1713: PUSH
1714: LD_INT 0
1716: PPUSH
1717: LD_INT 10
1719: PPUSH
1720: CALL_OW 12
1724: ST_TO_ADDR
// hc_face_number = 3 ;
1725: LD_ADDR_OWVAR 34
1729: PUSH
1730: LD_INT 3
1732: ST_TO_ADDR
// animal := CreateHuman ;
1733: LD_ADDR_VAR 0 3
1737: PUSH
1738: CALL_OW 44
1742: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
1743: LD_VAR 0 3
1747: PPUSH
1748: LD_VAR 0 4
1752: PPUSH
1753: LD_INT 0
1755: PPUSH
1756: CALL_OW 49
// end ;
1760: GO 1690
1762: POP
1763: POP
// for i = 1 to 2 do
1764: LD_ADDR_VAR 0 2
1768: PUSH
1769: DOUBLE
1770: LD_INT 1
1772: DEC
1773: ST_TO_ADDR
1774: LD_INT 2
1776: PUSH
1777: FOR_TO
1778: IFFALSE 1841
// begin hc_class = 21 ;
1780: LD_ADDR_OWVAR 28
1784: PUSH
1785: LD_INT 21
1787: ST_TO_ADDR
// hc_gallery =  ;
1788: LD_ADDR_OWVAR 33
1792: PUSH
1793: LD_STRING 
1795: ST_TO_ADDR
// hc_agressivity = 0 ;
1796: LD_ADDR_OWVAR 35
1800: PUSH
1801: LD_INT 0
1803: ST_TO_ADDR
// hc_face_number = 5 ;
1804: LD_ADDR_OWVAR 34
1808: PUSH
1809: LD_INT 5
1811: ST_TO_ADDR
// animal := CreateHuman ;
1812: LD_ADDR_VAR 0 3
1816: PUSH
1817: CALL_OW 44
1821: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
1822: LD_VAR 0 3
1826: PPUSH
1827: LD_VAR 0 4
1831: PPUSH
1832: LD_INT 0
1834: PPUSH
1835: CALL_OW 49
// end ;
1839: GO 1777
1841: POP
1842: POP
// for i = 1 to 6 do
1843: LD_ADDR_VAR 0 2
1847: PUSH
1848: DOUBLE
1849: LD_INT 1
1851: DEC
1852: ST_TO_ADDR
1853: LD_INT 6
1855: PUSH
1856: FOR_TO
1857: IFFALSE 1912
// begin hc_class = 13 ;
1859: LD_ADDR_OWVAR 28
1863: PUSH
1864: LD_INT 13
1866: ST_TO_ADDR
// hc_gallery =  ;
1867: LD_ADDR_OWVAR 33
1871: PUSH
1872: LD_STRING 
1874: ST_TO_ADDR
// hc_face_number = 4 ;
1875: LD_ADDR_OWVAR 34
1879: PUSH
1880: LD_INT 4
1882: ST_TO_ADDR
// animal := CreateHuman ;
1883: LD_ADDR_VAR 0 3
1887: PUSH
1888: CALL_OW 44
1892: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
1893: LD_VAR 0 3
1897: PPUSH
1898: LD_VAR 0 4
1902: PPUSH
1903: LD_INT 0
1905: PPUSH
1906: CALL_OW 49
// end ;
1910: GO 1856
1912: POP
1913: POP
// for i = 1 to 2 do
1914: LD_ADDR_VAR 0 2
1918: PUSH
1919: DOUBLE
1920: LD_INT 1
1922: DEC
1923: ST_TO_ADDR
1924: LD_INT 2
1926: PUSH
1927: FOR_TO
1928: IFFALSE 1987
// begin hc_class = 20 ;
1930: LD_ADDR_OWVAR 28
1934: PUSH
1935: LD_INT 20
1937: ST_TO_ADDR
// hc_gallery =  ;
1938: LD_ADDR_OWVAR 33
1942: PUSH
1943: LD_STRING 
1945: ST_TO_ADDR
// hc_face_number = 2 ;
1946: LD_ADDR_OWVAR 34
1950: PUSH
1951: LD_INT 2
1953: ST_TO_ADDR
// animal := CreateHuman ;
1954: LD_ADDR_VAR 0 3
1958: PUSH
1959: CALL_OW 44
1963: ST_TO_ADDR
// PlaceUnitXYR ( animal , 101 , 37 , 3 , false ) ;
1964: LD_VAR 0 3
1968: PPUSH
1969: LD_INT 101
1971: PPUSH
1972: LD_INT 37
1974: PPUSH
1975: LD_INT 3
1977: PPUSH
1978: LD_INT 0
1980: PPUSH
1981: CALL_OW 50
// end ;
1985: GO 1927
1987: POP
1988: POP
// for i = 1 to 1 do
1989: LD_ADDR_VAR 0 2
1993: PUSH
1994: DOUBLE
1995: LD_INT 1
1997: DEC
1998: ST_TO_ADDR
1999: LD_INT 1
2001: PUSH
2002: FOR_TO
2003: IFFALSE 2050
// begin vc_chassis := 31 ;
2005: LD_ADDR_OWVAR 37
2009: PUSH
2010: LD_INT 31
2012: ST_TO_ADDR
// vc_control := control_rider ;
2013: LD_ADDR_OWVAR 38
2017: PUSH
2018: LD_INT 4
2020: ST_TO_ADDR
// animal := CreateVehicle ;
2021: LD_ADDR_VAR 0 3
2025: PUSH
2026: CALL_OW 45
2030: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
2031: LD_VAR 0 3
2035: PPUSH
2036: LD_VAR 0 4
2040: PPUSH
2041: LD_INT 0
2043: PPUSH
2044: CALL_OW 49
// end ;
2048: GO 2002
2050: POP
2051: POP
// end ;
2052: LD_VAR 0 1
2056: RET
// export function NearbyTowerHasEnergy ( unit ) ; var i , tmp , energy ; begin
2057: LD_INT 0
2059: PPUSH
2060: PPUSH
2061: PPUSH
2062: PPUSH
// result := [ ] ;
2063: LD_ADDR_VAR 0 2
2067: PUSH
2068: EMPTY
2069: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( unit ) ] , [ f_dist , unit , 15 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) ;
2070: LD_ADDR_VAR 0 4
2074: PUSH
2075: LD_INT 81
2077: PUSH
2078: LD_VAR 0 1
2082: PPUSH
2083: CALL_OW 255
2087: PUSH
2088: EMPTY
2089: LIST
2090: LIST
2091: PUSH
2092: LD_INT 91
2094: PUSH
2095: LD_VAR 0 1
2099: PUSH
2100: LD_INT 15
2102: PUSH
2103: EMPTY
2104: LIST
2105: LIST
2106: LIST
2107: PUSH
2108: LD_INT 2
2110: PUSH
2111: LD_INT 30
2113: PUSH
2114: LD_INT 32
2116: PUSH
2117: EMPTY
2118: LIST
2119: LIST
2120: PUSH
2121: LD_INT 30
2123: PUSH
2124: LD_INT 33
2126: PUSH
2127: EMPTY
2128: LIST
2129: LIST
2130: PUSH
2131: EMPTY
2132: LIST
2133: LIST
2134: LIST
2135: PUSH
2136: EMPTY
2137: LIST
2138: LIST
2139: LIST
2140: PPUSH
2141: CALL_OW 69
2145: ST_TO_ADDR
// if not tmp then
2146: LD_VAR 0 4
2150: NOT
2151: IFFALSE 2155
// exit ;
2153: GO 2224
// for i in tmp do
2155: LD_ADDR_VAR 0 3
2159: PUSH
2160: LD_VAR 0 4
2164: PUSH
2165: FOR_IN
2166: IFFALSE 2222
// begin energy := GetEnergy ( GetBase ( i ) ) ;
2168: LD_ADDR_VAR 0 5
2172: PUSH
2173: LD_VAR 0 3
2177: PPUSH
2178: CALL_OW 274
2182: PPUSH
2183: CALL_OW 278
2187: ST_TO_ADDR
// if energy [ 4 ] > energy [ 1 ] then
2188: LD_VAR 0 5
2192: PUSH
2193: LD_INT 4
2195: ARRAY
2196: PUSH
2197: LD_VAR 0 5
2201: PUSH
2202: LD_INT 1
2204: ARRAY
2205: GREATER
2206: IFFALSE 2220
// begin result := i ;
2208: LD_ADDR_VAR 0 2
2212: PUSH
2213: LD_VAR 0 3
2217: ST_TO_ADDR
// break ;
2218: GO 2222
// end ; end ;
2220: GO 2165
2222: POP
2223: POP
// end ;
2224: LD_VAR 0 2
2228: RET
// export function GetTurretWeaponBase ( tower ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
2229: LD_INT 0
2231: PPUSH
2232: PPUSH
2233: PPUSH
2234: PPUSH
2235: PPUSH
2236: PPUSH
2237: PPUSH
2238: PPUSH
2239: PPUSH
2240: PPUSH
2241: PPUSH
2242: PPUSH
2243: PPUSH
2244: PPUSH
2245: PPUSH
2246: PPUSH
// result := false ;
2247: LD_ADDR_VAR 0 2
2251: PUSH
2252: LD_INT 0
2254: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
2255: LD_VAR 0 1
2259: NOT
2260: IFTRUE 2285
2262: PUSH
2263: LD_VAR 0 1
2267: PPUSH
2268: CALL_OW 266
2272: PUSH
2273: LD_INT 32
2275: PUSH
2276: LD_INT 33
2278: PUSH
2279: EMPTY
2280: LIST
2281: LIST
2282: IN
2283: NOT
2284: OR
2285: IFFALSE 2289
// exit ;
2287: GO 3475
// nat := GetNation ( tower ) ;
2289: LD_ADDR_VAR 0 11
2293: PUSH
2294: LD_VAR 0 1
2298: PPUSH
2299: CALL_OW 248
2303: ST_TO_ADDR
// side := GetSide ( tower ) ;
2304: LD_ADDR_VAR 0 15
2308: PUSH
2309: LD_VAR 0 1
2313: PPUSH
2314: CALL_OW 255
2318: ST_TO_ADDR
// x := GetX ( tower ) ;
2319: LD_ADDR_VAR 0 9
2323: PUSH
2324: LD_VAR 0 1
2328: PPUSH
2329: CALL_OW 250
2333: ST_TO_ADDR
// y := GetY ( tower ) ;
2334: LD_ADDR_VAR 0 10
2338: PUSH
2339: LD_VAR 0 1
2343: PPUSH
2344: CALL_OW 251
2348: ST_TO_ADDR
// if not x or not y then
2349: LD_VAR 0 9
2353: NOT
2354: IFTRUE 2363
2356: PUSH
2357: LD_VAR 0 10
2361: NOT
2362: OR
2363: IFFALSE 2367
// exit ;
2365: GO 3475
// weapon := 0 ;
2367: LD_ADDR_VAR 0 17
2371: PUSH
2372: LD_INT 0
2374: ST_TO_ADDR
// fac_list := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun ] ;
2375: LD_ADDR_VAR 0 16
2379: PUSH
2380: LD_INT 42
2382: PUSH
2383: LD_INT 43
2385: PUSH
2386: LD_INT 44
2388: PUSH
2389: LD_INT 46
2391: PUSH
2392: EMPTY
2393: LIST
2394: LIST
2395: LIST
2396: LIST
2397: ST_TO_ADDR
// if not fac_list then
2398: LD_VAR 0 16
2402: NOT
2403: IFFALSE 2407
// exit ;
2405: GO 3475
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
2407: LD_ADDR_VAR 0 4
2411: PUSH
2412: LD_INT 4
2414: PUSH
2415: LD_INT 5
2417: PUSH
2418: LD_INT 9
2420: PUSH
2421: LD_INT 10
2423: PUSH
2424: LD_INT 6
2426: PUSH
2427: LD_INT 7
2429: PUSH
2430: LD_INT 11
2432: PUSH
2433: EMPTY
2434: LIST
2435: LIST
2436: LIST
2437: LIST
2438: LIST
2439: LIST
2440: LIST
2441: PUSH
2442: LD_INT 27
2444: PUSH
2445: LD_INT 28
2447: PUSH
2448: LD_INT 26
2450: PUSH
2451: LD_INT 30
2453: PUSH
2454: EMPTY
2455: LIST
2456: LIST
2457: LIST
2458: LIST
2459: PUSH
2460: LD_INT 43
2462: PUSH
2463: LD_INT 44
2465: PUSH
2466: LD_INT 46
2468: PUSH
2469: LD_INT 45
2471: PUSH
2472: LD_INT 47
2474: PUSH
2475: LD_INT 49
2477: PUSH
2478: EMPTY
2479: LIST
2480: LIST
2481: LIST
2482: LIST
2483: LIST
2484: LIST
2485: PUSH
2486: EMPTY
2487: LIST
2488: LIST
2489: LIST
2490: PUSH
2491: LD_VAR 0 11
2495: ARRAY
2496: ST_TO_ADDR
// for i in list do
2497: LD_ADDR_VAR 0 7
2501: PUSH
2502: LD_VAR 0 4
2506: PUSH
2507: FOR_IN
2508: IFFALSE 2541
// if not i in fac_list then
2510: LD_VAR 0 7
2514: PUSH
2515: LD_VAR 0 16
2519: IN
2520: NOT
2521: IFFALSE 2539
// list := list diff i ;
2523: LD_ADDR_VAR 0 4
2527: PUSH
2528: LD_VAR 0 4
2532: PUSH
2533: LD_VAR 0 7
2537: DIFF
2538: ST_TO_ADDR
2539: GO 2507
2541: POP
2542: POP
// if not list then
2543: LD_VAR 0 4
2547: NOT
2548: IFFALSE 2552
// exit ;
2550: GO 3475
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
2552: LD_VAR 0 11
2556: PUSH
2557: LD_INT 3
2559: EQUAL
2560: IFFALSE 2572
2562: PUSH
2563: LD_INT 49
2565: PUSH
2566: LD_VAR 0 4
2570: IN
2571: AND
2572: IFFALSE 2592
2574: PUSH
2575: LD_INT 31
2577: PPUSH
2578: LD_VAR 0 15
2582: PPUSH
2583: CALL_OW 321
2587: PUSH
2588: LD_INT 2
2590: EQUAL
2591: AND
2592: IFFALSE 2652
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
2594: LD_INT 22
2596: PUSH
2597: LD_VAR 0 15
2601: PUSH
2602: EMPTY
2603: LIST
2604: LIST
2605: PUSH
2606: LD_INT 35
2608: PUSH
2609: LD_INT 49
2611: PUSH
2612: EMPTY
2613: LIST
2614: LIST
2615: PUSH
2616: LD_INT 91
2618: PUSH
2619: LD_VAR 0 1
2623: PUSH
2624: LD_INT 10
2626: PUSH
2627: EMPTY
2628: LIST
2629: LIST
2630: LIST
2631: PUSH
2632: EMPTY
2633: LIST
2634: LIST
2635: LIST
2636: PPUSH
2637: CALL_OW 69
2641: NOT
2642: IFFALSE 2652
// weapon := ru_time_lapser ;
2644: LD_ADDR_VAR 0 17
2648: PUSH
2649: LD_INT 49
2651: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
2652: LD_VAR 0 11
2656: PUSH
2657: LD_INT 1
2659: PUSH
2660: LD_INT 2
2662: PUSH
2663: EMPTY
2664: LIST
2665: LIST
2666: IN
2667: IFFALSE 2691
2669: PUSH
2670: LD_INT 11
2672: PUSH
2673: LD_VAR 0 4
2677: IN
2678: IFTRUE 2690
2680: PUSH
2681: LD_INT 30
2683: PUSH
2684: LD_VAR 0 4
2688: IN
2689: OR
2690: AND
2691: IFFALSE 2711
2693: PUSH
2694: LD_INT 6
2696: PPUSH
2697: LD_VAR 0 15
2701: PPUSH
2702: CALL_OW 321
2706: PUSH
2707: LD_INT 2
2709: EQUAL
2710: AND
2711: IFFALSE 2878
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
2713: LD_INT 22
2715: PUSH
2716: LD_VAR 0 15
2720: PUSH
2721: EMPTY
2722: LIST
2723: LIST
2724: PUSH
2725: LD_INT 2
2727: PUSH
2728: LD_INT 35
2730: PUSH
2731: LD_INT 11
2733: PUSH
2734: EMPTY
2735: LIST
2736: LIST
2737: PUSH
2738: LD_INT 35
2740: PUSH
2741: LD_INT 30
2743: PUSH
2744: EMPTY
2745: LIST
2746: LIST
2747: PUSH
2748: EMPTY
2749: LIST
2750: LIST
2751: LIST
2752: PUSH
2753: LD_INT 91
2755: PUSH
2756: LD_VAR 0 1
2760: PUSH
2761: LD_INT 18
2763: PUSH
2764: EMPTY
2765: LIST
2766: LIST
2767: LIST
2768: PUSH
2769: EMPTY
2770: LIST
2771: LIST
2772: LIST
2773: PPUSH
2774: CALL_OW 69
2778: NOT
2779: IFFALSE 2855
2781: PUSH
2782: LD_INT 22
2784: PUSH
2785: LD_VAR 0 15
2789: PUSH
2790: EMPTY
2791: LIST
2792: LIST
2793: PUSH
2794: LD_INT 2
2796: PUSH
2797: LD_INT 30
2799: PUSH
2800: LD_INT 32
2802: PUSH
2803: EMPTY
2804: LIST
2805: LIST
2806: PUSH
2807: LD_INT 30
2809: PUSH
2810: LD_INT 33
2812: PUSH
2813: EMPTY
2814: LIST
2815: LIST
2816: PUSH
2817: EMPTY
2818: LIST
2819: LIST
2820: LIST
2821: PUSH
2822: LD_INT 91
2824: PUSH
2825: LD_VAR 0 1
2829: PUSH
2830: LD_INT 12
2832: PUSH
2833: EMPTY
2834: LIST
2835: LIST
2836: LIST
2837: PUSH
2838: EMPTY
2839: LIST
2840: LIST
2841: LIST
2842: PUSH
2843: EMPTY
2844: LIST
2845: PPUSH
2846: CALL_OW 69
2850: PUSH
2851: LD_INT 2
2853: GREATER
2854: AND
2855: IFFALSE 2878
// weapon := [ us_radar , ar_radar ] [ nat ] ;
2857: LD_ADDR_VAR 0 17
2861: PUSH
2862: LD_INT 11
2864: PUSH
2865: LD_INT 30
2867: PUSH
2868: EMPTY
2869: LIST
2870: LIST
2871: PUSH
2872: LD_VAR 0 11
2876: ARRAY
2877: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
2878: LD_VAR 0 17
2882: NOT
2883: IFFALSE 2903
2885: PUSH
2886: LD_INT 40
2888: PPUSH
2889: LD_VAR 0 15
2893: PPUSH
2894: CALL_OW 321
2898: PUSH
2899: LD_INT 2
2901: EQUAL
2902: AND
2903: IFFALSE 2939
2905: PUSH
2906: LD_INT 7
2908: PUSH
2909: LD_VAR 0 4
2913: IN
2914: IFTRUE 2926
2916: PUSH
2917: LD_INT 28
2919: PUSH
2920: LD_VAR 0 4
2924: IN
2925: OR
2926: IFTRUE 2938
2928: PUSH
2929: LD_INT 45
2931: PUSH
2932: LD_VAR 0 4
2936: IN
2937: OR
2938: AND
2939: IFFALSE 3193
// begin hex := GetHexInfo ( x , y ) ;
2941: LD_ADDR_VAR 0 3
2945: PUSH
2946: LD_VAR 0 9
2950: PPUSH
2951: LD_VAR 0 10
2955: PPUSH
2956: CALL_OW 546
2960: ST_TO_ADDR
// if hex [ 1 ] then
2961: LD_VAR 0 3
2965: PUSH
2966: LD_INT 1
2968: ARRAY
2969: IFFALSE 2973
// exit ;
2971: GO 3475
// height := hex [ 2 ] ;
2973: LD_ADDR_VAR 0 14
2977: PUSH
2978: LD_VAR 0 3
2982: PUSH
2983: LD_INT 2
2985: ARRAY
2986: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
2987: LD_ADDR_VAR 0 13
2991: PUSH
2992: LD_INT 0
2994: PUSH
2995: LD_INT 2
2997: PUSH
2998: LD_INT 3
3000: PUSH
3001: LD_INT 5
3003: PUSH
3004: EMPTY
3005: LIST
3006: LIST
3007: LIST
3008: LIST
3009: ST_TO_ADDR
// for i in tmp do
3010: LD_ADDR_VAR 0 7
3014: PUSH
3015: LD_VAR 0 13
3019: PUSH
3020: FOR_IN
3021: IFFALSE 3191
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
3023: LD_ADDR_VAR 0 8
3027: PUSH
3028: LD_VAR 0 9
3032: PPUSH
3033: LD_VAR 0 7
3037: PPUSH
3038: LD_INT 5
3040: PPUSH
3041: CALL_OW 272
3045: PUSH
3046: LD_VAR 0 10
3050: PPUSH
3051: LD_VAR 0 7
3055: PPUSH
3056: LD_INT 5
3058: PPUSH
3059: CALL_OW 273
3063: PUSH
3064: EMPTY
3065: LIST
3066: LIST
3067: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
3068: LD_VAR 0 8
3072: PUSH
3073: LD_INT 1
3075: ARRAY
3076: PPUSH
3077: LD_VAR 0 8
3081: PUSH
3082: LD_INT 2
3084: ARRAY
3085: PPUSH
3086: CALL_OW 488
3090: IFFALSE 3189
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
3092: LD_ADDR_VAR 0 3
3096: PUSH
3097: LD_VAR 0 8
3101: PUSH
3102: LD_INT 1
3104: ARRAY
3105: PPUSH
3106: LD_VAR 0 8
3110: PUSH
3111: LD_INT 2
3113: ARRAY
3114: PPUSH
3115: CALL_OW 546
3119: ST_TO_ADDR
// if hex [ 1 ] then
3120: LD_VAR 0 3
3124: PUSH
3125: LD_INT 1
3127: ARRAY
3128: IFFALSE 3132
// continue ;
3130: GO 3020
// h := hex [ 2 ] ;
3132: LD_ADDR_VAR 0 12
3136: PUSH
3137: LD_VAR 0 3
3141: PUSH
3142: LD_INT 2
3144: ARRAY
3145: ST_TO_ADDR
// if h + 7 < height then
3146: LD_VAR 0 12
3150: PUSH
3151: LD_INT 7
3153: PLUS
3154: PUSH
3155: LD_VAR 0 14
3159: LESS
3160: IFFALSE 3189
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
3162: LD_ADDR_VAR 0 17
3166: PUSH
3167: LD_INT 7
3169: PUSH
3170: LD_INT 28
3172: PUSH
3173: LD_INT 45
3175: PUSH
3176: EMPTY
3177: LIST
3178: LIST
3179: LIST
3180: PUSH
3181: LD_VAR 0 11
3185: ARRAY
3186: ST_TO_ADDR
// break ;
3187: GO 3191
// end ; end ; end ;
3189: GO 3020
3191: POP
3192: POP
// end ; if not weapon then
3193: LD_VAR 0 17
3197: NOT
3198: IFFALSE 3353
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
3200: LD_ADDR_VAR 0 4
3204: PUSH
3205: LD_VAR 0 4
3209: PUSH
3210: LD_INT 11
3212: PUSH
3213: LD_INT 30
3215: PUSH
3216: LD_INT 49
3218: PUSH
3219: EMPTY
3220: LIST
3221: LIST
3222: LIST
3223: DIFF
3224: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , tower , 6 ] , [ f_not , [ f_bweapon , 0 ] ] ] ) ;
3225: LD_ADDR_VAR 0 13
3229: PUSH
3230: LD_INT 22
3232: PUSH
3233: LD_VAR 0 15
3237: PUSH
3238: EMPTY
3239: LIST
3240: LIST
3241: PUSH
3242: LD_INT 91
3244: PUSH
3245: LD_VAR 0 1
3249: PUSH
3250: LD_INT 6
3252: PUSH
3253: EMPTY
3254: LIST
3255: LIST
3256: LIST
3257: PUSH
3258: LD_INT 3
3260: PUSH
3261: LD_INT 35
3263: PUSH
3264: LD_INT 0
3266: PUSH
3267: EMPTY
3268: LIST
3269: LIST
3270: PUSH
3271: EMPTY
3272: LIST
3273: LIST
3274: PUSH
3275: EMPTY
3276: LIST
3277: LIST
3278: LIST
3279: PPUSH
3280: CALL_OW 69
3284: ST_TO_ADDR
// for i in tmp do
3285: LD_ADDR_VAR 0 7
3289: PUSH
3290: LD_VAR 0 13
3294: PUSH
3295: FOR_IN
3296: IFFALSE 3321
// list := list diff GetBWeapon ( i ) ;
3298: LD_ADDR_VAR 0 4
3302: PUSH
3303: LD_VAR 0 4
3307: PUSH
3308: LD_VAR 0 7
3312: PPUSH
3313: CALL_OW 269
3317: DIFF
3318: ST_TO_ADDR
3319: GO 3295
3321: POP
3322: POP
// if list then
3323: LD_VAR 0 4
3327: IFFALSE 3353
// weapon := list [ rand ( 1 , list ) ] ;
3329: LD_ADDR_VAR 0 17
3333: PUSH
3334: LD_VAR 0 4
3338: PUSH
3339: LD_INT 1
3341: PPUSH
3342: LD_VAR 0 4
3346: PPUSH
3347: CALL_OW 12
3351: ARRAY
3352: ST_TO_ADDR
// end ; if weapon then
3353: LD_VAR 0 17
3357: IFFALSE 3475
// begin tmp := CostOfWeapon ( weapon ) ;
3359: LD_ADDR_VAR 0 13
3363: PUSH
3364: LD_VAR 0 17
3368: PPUSH
3369: CALL_OW 451
3373: ST_TO_ADDR
// j := GetBase ( tower ) ;
3374: LD_ADDR_VAR 0 8
3378: PUSH
3379: LD_VAR 0 1
3383: PPUSH
3384: CALL_OW 274
3388: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
3389: LD_VAR 0 8
3393: PPUSH
3394: LD_INT 1
3396: PPUSH
3397: CALL_OW 275
3401: PUSH
3402: LD_VAR 0 13
3406: PUSH
3407: LD_INT 1
3409: ARRAY
3410: GREATEREQUAL
3411: IFFALSE 3437
3413: PUSH
3414: LD_VAR 0 8
3418: PPUSH
3419: LD_INT 2
3421: PPUSH
3422: CALL_OW 275
3426: PUSH
3427: LD_VAR 0 13
3431: PUSH
3432: LD_INT 2
3434: ARRAY
3435: GREATEREQUAL
3436: AND
3437: IFFALSE 3463
3439: PUSH
3440: LD_VAR 0 8
3444: PPUSH
3445: LD_INT 3
3447: PPUSH
3448: CALL_OW 275
3452: PUSH
3453: LD_VAR 0 13
3457: PUSH
3458: LD_INT 3
3460: ARRAY
3461: GREATEREQUAL
3462: AND
3463: IFFALSE 3475
// result := weapon ;
3465: LD_ADDR_VAR 0 2
3469: PUSH
3470: LD_VAR 0 17
3474: ST_TO_ADDR
// end ; end ; end_of_file
3475: LD_VAR 0 2
3479: RET
// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Khatam , Kikuchi , Harisson ; export function PrepareAmericans ; var i , team , others , veh , m ; begin
3480: LD_INT 0
3482: PPUSH
3483: PPUSH
3484: PPUSH
3485: PPUSH
3486: PPUSH
3487: PPUSH
// uc_side := 1 ;
3488: LD_ADDR_OWVAR 20
3492: PUSH
3493: LD_INT 1
3495: ST_TO_ADDR
// uc_nation := 1 ;
3496: LD_ADDR_OWVAR 21
3500: PUSH
3501: LD_INT 1
3503: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , mission_prev_prefix ) ;
3504: LD_ADDR_EXP 9
3508: PUSH
3509: LD_STRING JMM
3511: PPUSH
3512: LD_EXP 1
3516: NOT
3517: PPUSH
3518: LD_EXP 2
3522: PPUSH
3523: CALL 34972 0 3
3527: ST_TO_ADDR
// team := [ JMM ] ;
3528: LD_ADDR_VAR 0 3
3532: PUSH
3533: LD_EXP 9
3537: PUSH
3538: EMPTY
3539: LIST
3540: ST_TO_ADDR
// if LoadVariable ( BrownIn07 , debug ) then
3541: LD_STRING BrownIn07
3543: PPUSH
3544: LD_EXP 1
3548: PPUSH
3549: CALL_OW 30
3553: IFFALSE 3579
// Brown := PrepareUnit ( Brown , ( not debug ) , mission_prev_prefix ) ;
3555: LD_ADDR_EXP 10
3559: PUSH
3560: LD_STRING Brown
3562: PPUSH
3563: LD_EXP 1
3567: NOT
3568: PPUSH
3569: LD_EXP 2
3573: PPUSH
3574: CALL 34972 0 3
3578: ST_TO_ADDR
// if Brown then
3579: LD_EXP 10
3583: IFFALSE 3601
// team := team ^ Brown ;
3585: LD_ADDR_VAR 0 3
3589: PUSH
3590: LD_VAR 0 3
3594: PUSH
3595: LD_EXP 10
3599: ADD
3600: ST_TO_ADDR
// if LoadVariable ( DonaldsonIn07 , debug ) then
3601: LD_STRING DonaldsonIn07
3603: PPUSH
3604: LD_EXP 1
3608: PPUSH
3609: CALL_OW 30
3613: IFFALSE 3639
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , mission_prev_prefix ) ;
3615: LD_ADDR_EXP 11
3619: PUSH
3620: LD_STRING Donaldson
3622: PPUSH
3623: LD_EXP 1
3627: NOT
3628: PPUSH
3629: LD_EXP 2
3633: PPUSH
3634: CALL 34972 0 3
3638: ST_TO_ADDR
// if Donaldson then
3639: LD_EXP 11
3643: IFFALSE 3661
// team := team ^ Donaldson ;
3645: LD_ADDR_VAR 0 3
3649: PUSH
3650: LD_VAR 0 3
3654: PUSH
3655: LD_EXP 11
3659: ADD
3660: ST_TO_ADDR
// if LoadVariable ( BobbyIn07 , debug ) then
3661: LD_STRING BobbyIn07
3663: PPUSH
3664: LD_EXP 1
3668: PPUSH
3669: CALL_OW 30
3673: IFFALSE 3699
// Bobby := PrepareUnit ( Bobby , ( not debug ) , mission_prev_prefix ) ;
3675: LD_ADDR_EXP 12
3679: PUSH
3680: LD_STRING Bobby
3682: PPUSH
3683: LD_EXP 1
3687: NOT
3688: PPUSH
3689: LD_EXP 2
3693: PPUSH
3694: CALL 34972 0 3
3698: ST_TO_ADDR
// if Bobby then
3699: LD_EXP 12
3703: IFFALSE 3721
// team := team ^ Bobby ;
3705: LD_ADDR_VAR 0 3
3709: PUSH
3710: LD_VAR 0 3
3714: PUSH
3715: LD_EXP 12
3719: ADD
3720: ST_TO_ADDR
// if LoadVariable ( CyrusIn07 , debug ) then
3721: LD_STRING CyrusIn07
3723: PPUSH
3724: LD_EXP 1
3728: PPUSH
3729: CALL_OW 30
3733: IFFALSE 3759
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , mission_prev_prefix ) ;
3735: LD_ADDR_EXP 13
3739: PUSH
3740: LD_STRING Cyrus
3742: PPUSH
3743: LD_EXP 1
3747: NOT
3748: PPUSH
3749: LD_EXP 2
3753: PPUSH
3754: CALL 34972 0 3
3758: ST_TO_ADDR
// if Cyrus then
3759: LD_EXP 13
3763: IFFALSE 3781
// team := team ^ Cyrus ;
3765: LD_ADDR_VAR 0 3
3769: PUSH
3770: LD_VAR 0 3
3774: PUSH
3775: LD_EXP 13
3779: ADD
3780: ST_TO_ADDR
// if LoadVariable ( LisaIn07 , debug ) then
3781: LD_STRING LisaIn07
3783: PPUSH
3784: LD_EXP 1
3788: PPUSH
3789: CALL_OW 30
3793: IFFALSE 3819
// Lisa := PrepareUnit ( Lisa , ( not debug ) , mission_prev_prefix ) ;
3795: LD_ADDR_EXP 14
3799: PUSH
3800: LD_STRING Lisa
3802: PPUSH
3803: LD_EXP 1
3807: NOT
3808: PPUSH
3809: LD_EXP 2
3813: PPUSH
3814: CALL 34972 0 3
3818: ST_TO_ADDR
// if Lisa then
3819: LD_EXP 14
3823: IFFALSE 3841
// team := team ^ Lisa ;
3825: LD_ADDR_VAR 0 3
3829: PUSH
3830: LD_VAR 0 3
3834: PUSH
3835: LD_EXP 14
3839: ADD
3840: ST_TO_ADDR
// if LoadVariable ( GladstoneIn07 , debug ) then
3841: LD_STRING GladstoneIn07
3843: PPUSH
3844: LD_EXP 1
3848: PPUSH
3849: CALL_OW 30
3853: IFFALSE 3879
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , mission_prev_prefix ) ;
3855: LD_ADDR_EXP 16
3859: PUSH
3860: LD_STRING Gladstone
3862: PPUSH
3863: LD_EXP 1
3867: NOT
3868: PPUSH
3869: LD_EXP 2
3873: PPUSH
3874: CALL 34972 0 3
3878: ST_TO_ADDR
// if Gladstone then
3879: LD_EXP 16
3883: IFFALSE 3901
// team := team ^ Gladstone ;
3885: LD_ADDR_VAR 0 3
3889: PUSH
3890: LD_VAR 0 3
3894: PUSH
3895: LD_EXP 16
3899: ADD
3900: ST_TO_ADDR
// if LoadVariable ( KhatamIn07 , debug ) then
3901: LD_STRING KhatamIn07
3903: PPUSH
3904: LD_EXP 1
3908: PPUSH
3909: CALL_OW 30
3913: IFFALSE 3939
// Khatam := PrepareUnit ( Khatam , ( not debug ) , mission_prev_prefix ) ;
3915: LD_ADDR_EXP 17
3919: PUSH
3920: LD_STRING Khatam
3922: PPUSH
3923: LD_EXP 1
3927: NOT
3928: PPUSH
3929: LD_EXP 2
3933: PPUSH
3934: CALL 34972 0 3
3938: ST_TO_ADDR
// if Khatam then
3939: LD_EXP 17
3943: IFFALSE 3961
// team := team ^ Khatam ;
3945: LD_ADDR_VAR 0 3
3949: PUSH
3950: LD_VAR 0 3
3954: PUSH
3955: LD_EXP 17
3959: ADD
3960: ST_TO_ADDR
// others := CreateCharacterSet ( 07_others ) ;
3961: LD_ADDR_VAR 0 4
3965: PUSH
3966: LD_STRING 07_others
3968: PPUSH
3969: CALL_OW 31
3973: ST_TO_ADDR
// if others then
3974: LD_VAR 0 4
3978: IFFALSE 3996
// team := team ^ others ;
3980: LD_ADDR_VAR 0 3
3984: PUSH
3985: LD_VAR 0 3
3989: PUSH
3990: LD_VAR 0 4
3994: ADD
3995: ST_TO_ADDR
// if debug then
3996: LD_EXP 1
4000: IFFALSE 4055
// begin InitHc ;
4002: CALL_OW 19
// for i = 1 to 4 do
4006: LD_ADDR_VAR 0 2
4010: PUSH
4011: DOUBLE
4012: LD_INT 1
4014: DEC
4015: ST_TO_ADDR
4016: LD_INT 4
4018: PUSH
4019: FOR_TO
4020: IFFALSE 4053
// begin PrepareHuman ( false , class_mechanic , 4 ) ;
4022: LD_INT 0
4024: PPUSH
4025: LD_INT 3
4027: PPUSH
4028: LD_INT 4
4030: PPUSH
4031: CALL_OW 380
// team := team ^ CreateHuman ;
4035: LD_ADDR_VAR 0 3
4039: PUSH
4040: LD_VAR 0 3
4044: PUSH
4045: CALL_OW 44
4049: ADD
4050: ST_TO_ADDR
// end ;
4051: GO 4019
4053: POP
4054: POP
// end ; m := 0 ;
4055: LD_ADDR_VAR 0 6
4059: PUSH
4060: LD_INT 0
4062: ST_TO_ADDR
// for i in team do
4063: LD_ADDR_VAR 0 2
4067: PUSH
4068: LD_VAR 0 3
4072: PUSH
4073: FOR_IN
4074: IFFALSE 4281
// if GetClass ( i ) = 3 then
4076: LD_VAR 0 2
4080: PPUSH
4081: CALL_OW 257
4085: PUSH
4086: LD_INT 3
4088: EQUAL
4089: IFFALSE 4237
// begin m := m + 1 ;
4091: LD_ADDR_VAR 0 6
4095: PUSH
4096: LD_VAR 0 6
4100: PUSH
4101: LD_INT 1
4103: PLUS
4104: ST_TO_ADDR
// veh := PrepareTank ( 1 , 1 , [ us_medium_wheeled , us_medium_tracked , us_medium_wheeled , us_light_wheeled ] [ m mod 4 + 1 ] , engine_solar , control_manual , [ us_gatling_gun , us_double_gun , us_light_gun , us_radar ] [ m mod 4 + 1 ] , 60 ) ;
4105: LD_ADDR_VAR 0 5
4109: PUSH
4110: LD_INT 1
4112: PPUSH
4113: LD_INT 1
4115: PPUSH
4116: LD_INT 2
4118: PUSH
4119: LD_INT 3
4121: PUSH
4122: LD_INT 2
4124: PUSH
4125: LD_INT 1
4127: PUSH
4128: EMPTY
4129: LIST
4130: LIST
4131: LIST
4132: LIST
4133: PUSH
4134: LD_VAR 0 6
4138: PUSH
4139: LD_INT 4
4141: MOD
4142: PUSH
4143: LD_INT 1
4145: PLUS
4146: ARRAY
4147: PPUSH
4148: LD_INT 2
4150: PPUSH
4151: LD_INT 1
4153: PPUSH
4154: LD_INT 4
4156: PUSH
4157: LD_INT 5
4159: PUSH
4160: LD_INT 3
4162: PUSH
4163: LD_INT 11
4165: PUSH
4166: EMPTY
4167: LIST
4168: LIST
4169: LIST
4170: LIST
4171: PUSH
4172: LD_VAR 0 6
4176: PUSH
4177: LD_INT 4
4179: MOD
4180: PUSH
4181: LD_INT 1
4183: PLUS
4184: ARRAY
4185: PPUSH
4186: LD_INT 60
4188: PPUSH
4189: CALL 520 0 7
4193: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
4194: LD_VAR 0 5
4198: PPUSH
4199: LD_INT 2
4201: PPUSH
4202: CALL_OW 233
// PlaceUnitArea ( veh , startArea , false ) ;
4206: LD_VAR 0 5
4210: PPUSH
4211: LD_INT 1
4213: PPUSH
4214: LD_INT 0
4216: PPUSH
4217: CALL_OW 49
// PlaceHumanInUnit ( i , veh ) ;
4221: LD_VAR 0 2
4225: PPUSH
4226: LD_VAR 0 5
4230: PPUSH
4231: CALL_OW 52
// end else
4235: GO 4279
// begin if GetClass ( i ) = 2 then
4237: LD_VAR 0 2
4241: PPUSH
4242: CALL_OW 257
4246: PUSH
4247: LD_INT 2
4249: EQUAL
4250: IFFALSE 4264
// SetClass ( i , 1 ) ;
4252: LD_VAR 0 2
4256: PPUSH
4257: LD_INT 1
4259: PPUSH
4260: CALL_OW 336
// PlaceUnitArea ( i , startArea , false ) ;
4264: LD_VAR 0 2
4268: PPUSH
4269: LD_INT 1
4271: PPUSH
4272: LD_INT 0
4274: PPUSH
4275: CALL_OW 49
// end ;
4279: GO 4073
4281: POP
4282: POP
// uc_side := 4 ;
4283: LD_ADDR_OWVAR 20
4287: PUSH
4288: LD_INT 4
4290: ST_TO_ADDR
// Harisson := PrepareUnit ( Harisson , false ,  ) ;
4291: LD_ADDR_EXP 19
4295: PUSH
4296: LD_STRING Harisson
4298: PPUSH
4299: LD_INT 0
4301: PPUSH
4302: LD_STRING 
4304: PPUSH
4305: CALL 34972 0 3
4309: ST_TO_ADDR
// PrepareScout ;
4310: CALL 4319 0 0
// end ;
4314: LD_VAR 0 1
4318: RET
// function PrepareScout ; var ape ; begin
4319: LD_INT 0
4321: PPUSH
4322: PPUSH
// uc_side := 4 ;
4323: LD_ADDR_OWVAR 20
4327: PUSH
4328: LD_INT 4
4330: ST_TO_ADDR
// uc_nation := 1 ;
4331: LD_ADDR_OWVAR 21
4335: PUSH
4336: LD_INT 1
4338: ST_TO_ADDR
// if LoadVariable ( FrankIn06 , 0 ) then
4339: LD_STRING FrankIn06
4341: PPUSH
4342: LD_INT 0
4344: PPUSH
4345: CALL_OW 30
4349: IFFALSE 4366
// Frank := CreateCharacter ( 06c_Frank ) else
4351: LD_ADDR_EXP 15
4355: PUSH
4356: LD_STRING 06c_Frank
4358: PPUSH
4359: CALL_OW 34
4363: ST_TO_ADDR
4364: GO 4406
// if LoadVariable ( FrankInDelta , 0 ) then
4366: LD_STRING FrankInDelta
4368: PPUSH
4369: LD_INT 0
4371: PPUSH
4372: CALL_OW 30
4376: IFFALSE 4393
// Frank := CreateCharacter ( 05_Frank ) else
4378: LD_ADDR_EXP 15
4382: PUSH
4383: LD_STRING 05_Frank
4385: PPUSH
4386: CALL_OW 34
4390: ST_TO_ADDR
4391: GO 4406
// Frank := CreateCharacter ( 04_Frank ) ;
4393: LD_ADDR_EXP 15
4397: PUSH
4398: LD_STRING 04_Frank
4400: PPUSH
4401: CALL_OW 34
4405: ST_TO_ADDR
// if Frank then
4406: LD_EXP 15
4410: IFFALSE 4543
// begin PlaceUnitArea ( Frank , scoutArea , false ) ;
4412: LD_EXP 15
4416: PPUSH
4417: LD_INT 2
4419: PPUSH
4420: LD_INT 0
4422: PPUSH
4423: CALL_OW 49
// SetClass ( Frank , 1 ) ;
4427: LD_EXP 15
4431: PPUSH
4432: LD_INT 1
4434: PPUSH
4435: CALL_OW 336
// uc_side := 0 ;
4439: LD_ADDR_OWVAR 20
4443: PUSH
4444: LD_INT 0
4446: ST_TO_ADDR
// uc_nation := 0 ;
4447: LD_ADDR_OWVAR 21
4451: PUSH
4452: LD_INT 0
4454: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 0 ) ;
4455: LD_INT 0
4457: PPUSH
4458: LD_INT 12
4460: PPUSH
4461: LD_INT 0
4463: PPUSH
4464: CALL_OW 380
// ape := CreateHuman ;
4468: LD_ADDR_VAR 0 2
4472: PUSH
4473: CALL_OW 44
4477: ST_TO_ADDR
// PlaceUnitXYR ( ape , GetX ( Frank ) , GetY ( Frank ) , 5 , false ) ;
4478: LD_VAR 0 2
4482: PPUSH
4483: LD_EXP 15
4487: PPUSH
4488: CALL_OW 250
4492: PPUSH
4493: LD_EXP 15
4497: PPUSH
4498: CALL_OW 251
4502: PPUSH
4503: LD_INT 5
4505: PPUSH
4506: LD_INT 0
4508: PPUSH
4509: CALL_OW 50
// ComTurnUnit ( ape , Frank ) ;
4513: LD_VAR 0 2
4517: PPUSH
4518: LD_EXP 15
4522: PPUSH
4523: CALL_OW 119
// ComTurnUnit ( Frank , ape ) ;
4527: LD_EXP 15
4531: PPUSH
4532: LD_VAR 0 2
4536: PPUSH
4537: CALL_OW 119
// exit ;
4541: GO 4586
// end ; Kikuchi := PrepareUnit ( Yamoko , false ,  ) ;
4543: LD_ADDR_EXP 18
4547: PUSH
4548: LD_STRING Yamoko
4550: PPUSH
4551: LD_INT 0
4553: PPUSH
4554: LD_STRING 
4556: PPUSH
4557: CALL 34972 0 3
4561: ST_TO_ADDR
// PlaceUnitArea ( Kikuchi , scoutArea , false ) ;
4562: LD_EXP 18
4566: PPUSH
4567: LD_INT 2
4569: PPUSH
4570: LD_INT 0
4572: PPUSH
4573: CALL_OW 49
// ComHold ( Kikuchi ) ;
4577: LD_EXP 18
4581: PPUSH
4582: CALL_OW 140
// end ; end_of_file
4586: LD_VAR 0 1
4590: RET
// export ru_rebuild_list ; export function PrepareRussians ; var i , j , r , un , skill , filter , tmp , dep_list , lab_list , fac_list , breastworks_list , bunker_list , turret_list , weapons_list , personel_counter ; begin
4591: LD_INT 0
4593: PPUSH
4594: PPUSH
4595: PPUSH
4596: PPUSH
4597: PPUSH
4598: PPUSH
4599: PPUSH
4600: PPUSH
4601: PPUSH
4602: PPUSH
4603: PPUSH
4604: PPUSH
4605: PPUSH
4606: PPUSH
4607: PPUSH
4608: PPUSH
// ru_rebuild_list := [ ] ;
4609: LD_ADDR_EXP 20
4613: PUSH
4614: EMPTY
4615: ST_TO_ADDR
// uc_side := 3 ;
4616: LD_ADDR_OWVAR 20
4620: PUSH
4621: LD_INT 3
4623: ST_TO_ADDR
// uc_nation := 3 ;
4624: LD_ADDR_OWVAR 21
4628: PUSH
4629: LD_INT 3
4631: ST_TO_ADDR
// if Difficulty > 1 then
4632: LD_OWVAR 67
4636: PUSH
4637: LD_INT 1
4639: GREATER
4640: IFFALSE 4807
// begin bc_type := b_breastwork ;
4642: LD_ADDR_OWVAR 42
4646: PUSH
4647: LD_INT 31
4649: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 78 , 74 , 2 ) ;
4650: LD_INT 78
4652: PPUSH
4653: LD_INT 74
4655: PPUSH
4656: LD_INT 2
4658: PPUSH
4659: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 171 , 193 , 4 ) ;
4663: LD_INT 171
4665: PPUSH
4666: LD_INT 193
4668: PPUSH
4669: LD_INT 4
4671: PPUSH
4672: CALL_OW 47
// bc_type := b_turret ;
4676: LD_ADDR_OWVAR 42
4680: PUSH
4681: LD_INT 33
4683: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 129 , 96 , 3 ) ;
4684: LD_INT 129
4686: PPUSH
4687: LD_INT 96
4689: PPUSH
4690: LD_INT 3
4692: PPUSH
4693: CALL_OW 47
// if Difficulty > 2 then
4697: LD_OWVAR 67
4701: PUSH
4702: LD_INT 2
4704: GREATER
4705: IFFALSE 4776
// begin RemoveUnit ( HexInfo ( 83 , 141 ) ) ;
4707: LD_INT 83
4709: PPUSH
4710: LD_INT 141
4712: PPUSH
4713: CALL_OW 428
4717: PPUSH
4718: CALL_OW 64
// RemoveUnit ( HexInfo ( 78 , 133 ) ) ;
4722: LD_INT 78
4724: PPUSH
4725: LD_INT 133
4727: PPUSH
4728: CALL_OW 428
4732: PPUSH
4733: CALL_OW 64
// CreateAndPlaceBuildingXYD ( 83 , 141 , 2 ) ;
4737: LD_INT 83
4739: PPUSH
4740: LD_INT 141
4742: PPUSH
4743: LD_INT 2
4745: PPUSH
4746: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 78 , 133 , 2 ) ;
4750: LD_INT 78
4752: PPUSH
4753: LD_INT 133
4755: PPUSH
4756: LD_INT 2
4758: PPUSH
4759: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 145 , 112 , 3 ) ;
4763: LD_INT 145
4765: PPUSH
4766: LD_INT 112
4768: PPUSH
4769: LD_INT 3
4771: PPUSH
4772: CALL_OW 47
// end ; if Difficulty > 3 then
4776: LD_OWVAR 67
4780: PUSH
4781: LD_INT 3
4783: GREATER
4784: IFFALSE 4807
// begin bc_type := b_bunker ;
4786: LD_ADDR_OWVAR 42
4790: PUSH
4791: LD_INT 32
4793: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 44 , 50 , 4 ) ;
4794: LD_INT 44
4796: PPUSH
4797: LD_INT 50
4799: PPUSH
4800: LD_INT 4
4802: PPUSH
4803: CALL_OW 47
// end ; end ; dep_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
4807: LD_ADDR_VAR 0 9
4811: PUSH
4812: LD_INT 22
4814: PUSH
4815: LD_INT 3
4817: PUSH
4818: EMPTY
4819: LIST
4820: LIST
4821: PUSH
4822: LD_INT 2
4824: PUSH
4825: LD_INT 30
4827: PUSH
4828: LD_INT 0
4830: PUSH
4831: EMPTY
4832: LIST
4833: LIST
4834: PUSH
4835: LD_INT 30
4837: PUSH
4838: LD_INT 1
4840: PUSH
4841: EMPTY
4842: LIST
4843: LIST
4844: PUSH
4845: EMPTY
4846: LIST
4847: LIST
4848: LIST
4849: PUSH
4850: EMPTY
4851: LIST
4852: LIST
4853: PPUSH
4854: CALL_OW 69
4858: ST_TO_ADDR
// lab_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
4859: LD_ADDR_VAR 0 10
4863: PUSH
4864: LD_INT 22
4866: PUSH
4867: LD_INT 3
4869: PUSH
4870: EMPTY
4871: LIST
4872: LIST
4873: PUSH
4874: LD_INT 2
4876: PUSH
4877: LD_INT 30
4879: PUSH
4880: LD_INT 6
4882: PUSH
4883: EMPTY
4884: LIST
4885: LIST
4886: PUSH
4887: LD_INT 30
4889: PUSH
4890: LD_INT 7
4892: PUSH
4893: EMPTY
4894: LIST
4895: LIST
4896: PUSH
4897: LD_INT 30
4899: PUSH
4900: LD_INT 8
4902: PUSH
4903: EMPTY
4904: LIST
4905: LIST
4906: PUSH
4907: EMPTY
4908: LIST
4909: LIST
4910: LIST
4911: LIST
4912: PUSH
4913: EMPTY
4914: LIST
4915: LIST
4916: PPUSH
4917: CALL_OW 69
4921: ST_TO_ADDR
// fac_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) ;
4922: LD_ADDR_VAR 0 11
4926: PUSH
4927: LD_INT 22
4929: PUSH
4930: LD_INT 3
4932: PUSH
4933: EMPTY
4934: LIST
4935: LIST
4936: PUSH
4937: LD_INT 30
4939: PUSH
4940: LD_INT 3
4942: PUSH
4943: EMPTY
4944: LIST
4945: LIST
4946: PUSH
4947: EMPTY
4948: LIST
4949: LIST
4950: PPUSH
4951: CALL_OW 69
4955: ST_TO_ADDR
// breastworks_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) ;
4956: LD_ADDR_VAR 0 12
4960: PUSH
4961: LD_INT 22
4963: PUSH
4964: LD_INT 3
4966: PUSH
4967: EMPTY
4968: LIST
4969: LIST
4970: PUSH
4971: LD_INT 30
4973: PUSH
4974: LD_INT 31
4976: PUSH
4977: EMPTY
4978: LIST
4979: LIST
4980: PUSH
4981: EMPTY
4982: LIST
4983: LIST
4984: PPUSH
4985: CALL_OW 69
4989: ST_TO_ADDR
// bunker_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) ;
4990: LD_ADDR_VAR 0 13
4994: PUSH
4995: LD_INT 22
4997: PUSH
4998: LD_INT 3
5000: PUSH
5001: EMPTY
5002: LIST
5003: LIST
5004: PUSH
5005: LD_INT 30
5007: PUSH
5008: LD_INT 32
5010: PUSH
5011: EMPTY
5012: LIST
5013: LIST
5014: PUSH
5015: EMPTY
5016: LIST
5017: LIST
5018: PPUSH
5019: CALL_OW 69
5023: ST_TO_ADDR
// turret_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_turret ] ] ) ;
5024: LD_ADDR_VAR 0 14
5028: PUSH
5029: LD_INT 22
5031: PUSH
5032: LD_INT 3
5034: PUSH
5035: EMPTY
5036: LIST
5037: LIST
5038: PUSH
5039: LD_INT 30
5041: PUSH
5042: LD_INT 33
5044: PUSH
5045: EMPTY
5046: LIST
5047: LIST
5048: PUSH
5049: EMPTY
5050: LIST
5051: LIST
5052: PPUSH
5053: CALL_OW 69
5057: ST_TO_ADDR
// weapons_list := [ [ ru_heavy_machine_gun , 5 ] , [ ru_gatling_gun , 50 ] , [ ru_gun , 30 ] , [ ru_heavy_gun , 15 ] ] ;
5058: LD_ADDR_VAR 0 15
5062: PUSH
5063: LD_INT 42
5065: PUSH
5066: LD_INT 5
5068: PUSH
5069: EMPTY
5070: LIST
5071: LIST
5072: PUSH
5073: LD_INT 43
5075: PUSH
5076: LD_INT 50
5078: PUSH
5079: EMPTY
5080: LIST
5081: LIST
5082: PUSH
5083: LD_INT 44
5085: PUSH
5086: LD_INT 30
5088: PUSH
5089: EMPTY
5090: LIST
5091: LIST
5092: PUSH
5093: LD_INT 46
5095: PUSH
5096: LD_INT 15
5098: PUSH
5099: EMPTY
5100: LIST
5101: LIST
5102: PUSH
5103: EMPTY
5104: LIST
5105: LIST
5106: LIST
5107: LIST
5108: ST_TO_ADDR
// personel_counter := [ 0 , 4 , 6 , 3 ] ;
5109: LD_ADDR_VAR 0 16
5113: PUSH
5114: LD_INT 0
5116: PUSH
5117: LD_INT 4
5119: PUSH
5120: LD_INT 6
5122: PUSH
5123: LD_INT 3
5125: PUSH
5126: EMPTY
5127: LIST
5128: LIST
5129: LIST
5130: LIST
5131: ST_TO_ADDR
// skill := [ 4 , 5 , 6 , 7 ] [ Difficulty ] ;
5132: LD_ADDR_VAR 0 6
5136: PUSH
5137: LD_INT 4
5139: PUSH
5140: LD_INT 5
5142: PUSH
5143: LD_INT 6
5145: PUSH
5146: LD_INT 7
5148: PUSH
5149: EMPTY
5150: LIST
5151: LIST
5152: LIST
5153: LIST
5154: PUSH
5155: LD_OWVAR 67
5159: ARRAY
5160: ST_TO_ADDR
// SetBName ( ru_dep_main , am_tukh ) ;
5161: LD_INT 16
5163: PPUSH
5164: LD_STRING am_tukh
5166: PPUSH
5167: CALL_OW 500
// for i in FilterAllUnits ( [ f_type , unit_building ] ) do
5171: LD_ADDR_VAR 0 2
5175: PUSH
5176: LD_INT 21
5178: PUSH
5179: LD_INT 3
5181: PUSH
5182: EMPTY
5183: LIST
5184: LIST
5185: PPUSH
5186: CALL_OW 69
5190: PUSH
5191: FOR_IN
5192: IFFALSE 5229
// SetBLevel ( i , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
5194: LD_VAR 0 2
5198: PPUSH
5199: LD_INT 4
5201: PUSH
5202: LD_INT 5
5204: PUSH
5205: LD_INT 6
5207: PUSH
5208: LD_INT 7
5210: PUSH
5211: EMPTY
5212: LIST
5213: LIST
5214: LIST
5215: LIST
5216: PUSH
5217: LD_OWVAR 67
5221: ARRAY
5222: PPUSH
5223: CALL_OW 241
5227: GO 5191
5229: POP
5230: POP
// for i in dep_list do
5231: LD_ADDR_VAR 0 2
5235: PUSH
5236: LD_VAR 0 9
5240: PUSH
5241: FOR_IN
5242: IFFALSE 5286
// begin SetResourceType ( GetBase ( i ) , mat_cans , 1000 ) ;
5244: LD_VAR 0 2
5248: PPUSH
5249: CALL_OW 274
5253: PPUSH
5254: LD_INT 1
5256: PPUSH
5257: LD_INT 1000
5259: PPUSH
5260: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 1000 ) ;
5264: LD_VAR 0 2
5268: PPUSH
5269: CALL_OW 274
5273: PPUSH
5274: LD_INT 2
5276: PPUSH
5277: LD_INT 1000
5279: PPUSH
5280: CALL_OW 277
// end ;
5284: GO 5241
5286: POP
5287: POP
// InitHc ;
5288: CALL_OW 19
// tmp := bunker_list * [ 45 , 60 , 70 , 80 ] [ Difficulty ] div 100 ;
5292: LD_ADDR_VAR 0 8
5296: PUSH
5297: LD_VAR 0 13
5301: PUSH
5302: LD_INT 45
5304: PUSH
5305: LD_INT 60
5307: PUSH
5308: LD_INT 70
5310: PUSH
5311: LD_INT 80
5313: PUSH
5314: EMPTY
5315: LIST
5316: LIST
5317: LIST
5318: LIST
5319: PUSH
5320: LD_OWVAR 67
5324: ARRAY
5325: MUL
5326: PUSH
5327: LD_INT 100
5329: DIV
5330: ST_TO_ADDR
// personel_counter := Replace ( personel_counter , 1 , tmp ) ;
5331: LD_ADDR_VAR 0 16
5335: PUSH
5336: LD_VAR 0 16
5340: PPUSH
5341: LD_INT 1
5343: PPUSH
5344: LD_VAR 0 8
5348: PPUSH
5349: CALL_OW 1
5353: ST_TO_ADDR
// tmp := [ ] ;
5354: LD_ADDR_VAR 0 8
5358: PUSH
5359: EMPTY
5360: ST_TO_ADDR
// for i in bunker_list do
5361: LD_ADDR_VAR 0 2
5365: PUSH
5366: LD_VAR 0 13
5370: PUSH
5371: FOR_IN
5372: IFFALSE 5468
// if i mod 10 + 1 < tmp then
5374: LD_VAR 0 2
5378: PUSH
5379: LD_INT 10
5381: MOD
5382: PUSH
5383: LD_INT 1
5385: PLUS
5386: PUSH
5387: LD_VAR 0 8
5391: LESS
5392: IFFALSE 5437
// tmp := Insert ( tmp , i mod rand ( 3 , 5 ) + 1 , i ) else
5394: LD_ADDR_VAR 0 8
5398: PUSH
5399: LD_VAR 0 8
5403: PPUSH
5404: LD_VAR 0 2
5408: PUSH
5409: LD_INT 3
5411: PPUSH
5412: LD_INT 5
5414: PPUSH
5415: CALL_OW 12
5419: MOD
5420: PUSH
5421: LD_INT 1
5423: PLUS
5424: PPUSH
5425: LD_VAR 0 2
5429: PPUSH
5430: CALL_OW 2
5434: ST_TO_ADDR
5435: GO 5466
// tmp := Insert ( tmp , tmp + 1 , i ) ;
5437: LD_ADDR_VAR 0 8
5441: PUSH
5442: LD_VAR 0 8
5446: PPUSH
5447: LD_VAR 0 8
5451: PUSH
5452: LD_INT 1
5454: PLUS
5455: PPUSH
5456: LD_VAR 0 2
5460: PPUSH
5461: CALL_OW 2
5465: ST_TO_ADDR
5466: GO 5371
5468: POP
5469: POP
// bunker_list := tmp ;
5470: LD_ADDR_VAR 0 13
5474: PUSH
5475: LD_VAR 0 8
5479: ST_TO_ADDR
// for i in bunker_list ^ turret_list do
5480: LD_ADDR_VAR 0 2
5484: PUSH
5485: LD_VAR 0 13
5489: PUSH
5490: LD_VAR 0 14
5494: ADD
5495: PUSH
5496: FOR_IN
5497: IFFALSE 5520
// PlaceWeaponTurret ( i , GetTurretWeaponBase ( i ) ) ;
5499: LD_VAR 0 2
5503: PPUSH
5504: LD_VAR 0 2
5508: PPUSH
5509: CALL 2229 0 1
5513: PPUSH
5514: CALL_OW 431
5518: GO 5496
5520: POP
5521: POP
// while ( personel_counter [ 1 ] ) do
5522: LD_VAR 0 16
5526: PUSH
5527: LD_INT 1
5529: ARRAY
5530: IFFALSE 5638
// begin i := rand ( 1 , bunker_list ) ;
5532: LD_ADDR_VAR 0 2
5536: PUSH
5537: LD_INT 1
5539: PPUSH
5540: LD_VAR 0 13
5544: PPUSH
5545: CALL_OW 12
5549: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
5550: LD_INT 0
5552: PPUSH
5553: LD_INT 1
5555: PPUSH
5556: LD_VAR 0 6
5560: PPUSH
5561: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , bunker_list [ i ] ) ;
5565: CALL_OW 44
5569: PPUSH
5570: LD_VAR 0 13
5574: PUSH
5575: LD_VAR 0 2
5579: ARRAY
5580: PPUSH
5581: CALL_OW 52
// bunker_list := Delete ( bunker_list , i ) ;
5585: LD_ADDR_VAR 0 13
5589: PUSH
5590: LD_VAR 0 13
5594: PPUSH
5595: LD_VAR 0 2
5599: PPUSH
5600: CALL_OW 3
5604: ST_TO_ADDR
// personel_counter := Replace ( personel_counter , 1 , personel_counter [ 1 ] - 1 ) ;
5605: LD_ADDR_VAR 0 16
5609: PUSH
5610: LD_VAR 0 16
5614: PPUSH
5615: LD_INT 1
5617: PPUSH
5618: LD_VAR 0 16
5622: PUSH
5623: LD_INT 1
5625: ARRAY
5626: PUSH
5627: LD_INT 1
5629: MINUS
5630: PPUSH
5631: CALL_OW 1
5635: ST_TO_ADDR
// end ;
5636: GO 5522
// for i = 1 to personel_counter [ 2 ] do
5638: LD_ADDR_VAR 0 2
5642: PUSH
5643: DOUBLE
5644: LD_INT 1
5646: DEC
5647: ST_TO_ADDR
5648: LD_VAR 0 16
5652: PUSH
5653: LD_INT 2
5655: ARRAY
5656: PUSH
5657: FOR_TO
5658: IFFALSE 5689
// begin PrepareHuman ( false , 2 , skill ) ;
5660: LD_INT 0
5662: PPUSH
5663: LD_INT 2
5665: PPUSH
5666: LD_VAR 0 6
5670: PPUSH
5671: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , ru_dep_main ) ;
5675: CALL_OW 44
5679: PPUSH
5680: LD_INT 16
5682: PPUSH
5683: CALL_OW 52
// end ;
5687: GO 5657
5689: POP
5690: POP
// for i = 1 to personel_counter [ 3 ] do
5691: LD_ADDR_VAR 0 2
5695: PUSH
5696: DOUBLE
5697: LD_INT 1
5699: DEC
5700: ST_TO_ADDR
5701: LD_VAR 0 16
5705: PUSH
5706: LD_INT 3
5708: ARRAY
5709: PUSH
5710: FOR_TO
5711: IFFALSE 5758
// begin PrepareHuman ( false , 3 , skill ) ;
5713: LD_INT 0
5715: PPUSH
5716: LD_INT 3
5718: PPUSH
5719: LD_VAR 0 6
5723: PPUSH
5724: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , fac_list [ i mod 2 + 1 ] ) ;
5728: CALL_OW 44
5732: PPUSH
5733: LD_VAR 0 11
5737: PUSH
5738: LD_VAR 0 2
5742: PUSH
5743: LD_INT 2
5745: MOD
5746: PUSH
5747: LD_INT 1
5749: PLUS
5750: ARRAY
5751: PPUSH
5752: CALL_OW 52
// end ;
5756: GO 5710
5758: POP
5759: POP
// for i = 1 to personel_counter [ 4 ] do
5760: LD_ADDR_VAR 0 2
5764: PUSH
5765: DOUBLE
5766: LD_INT 1
5768: DEC
5769: ST_TO_ADDR
5770: LD_VAR 0 16
5774: PUSH
5775: LD_INT 4
5777: ARRAY
5778: PUSH
5779: FOR_TO
5780: IFFALSE 5817
// begin PrepareHuman ( false , 4 , skill ) ;
5782: LD_INT 0
5784: PPUSH
5785: LD_INT 4
5787: PPUSH
5788: LD_VAR 0 6
5792: PPUSH
5793: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , lab_list [ 1 ] ) ;
5797: CALL_OW 44
5801: PPUSH
5802: LD_VAR 0 10
5806: PUSH
5807: LD_INT 1
5809: ARRAY
5810: PPUSH
5811: CALL_OW 52
// end ;
5815: GO 5779
5817: POP
5818: POP
// for i in breastworks_list do
5819: LD_ADDR_VAR 0 2
5823: PUSH
5824: LD_VAR 0 12
5828: PUSH
5829: FOR_IN
5830: IFFALSE 5942
// begin r := GetDir ( i ) ;
5832: LD_ADDR_VAR 0 4
5836: PUSH
5837: LD_VAR 0 2
5841: PPUSH
5842: CALL_OW 254
5846: ST_TO_ADDR
// if r > 3 then
5847: LD_VAR 0 4
5851: PUSH
5852: LD_INT 3
5854: GREATER
5855: IFFALSE 5873
// r := r - 3 else
5857: LD_ADDR_VAR 0 4
5861: PUSH
5862: LD_VAR 0 4
5866: PUSH
5867: LD_INT 3
5869: MINUS
5870: ST_TO_ADDR
5871: GO 5887
// r := r + 3 ;
5873: LD_ADDR_VAR 0 4
5877: PUSH
5878: LD_VAR 0 4
5882: PUSH
5883: LD_INT 3
5885: PLUS
5886: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
5887: LD_INT 0
5889: PPUSH
5890: LD_INT 1
5892: PPUSH
5893: LD_VAR 0 6
5897: PPUSH
5898: CALL_OW 380
// un := CreateHuman ;
5902: LD_ADDR_VAR 0 5
5906: PUSH
5907: CALL_OW 44
5911: ST_TO_ADDR
// SetDir ( un , r ) ;
5912: LD_VAR 0 5
5916: PPUSH
5917: LD_VAR 0 4
5921: PPUSH
5922: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
5926: LD_VAR 0 5
5930: PPUSH
5931: LD_VAR 0 2
5935: PPUSH
5936: CALL_OW 52
// end ;
5940: GO 5829
5942: POP
5943: POP
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) ;
5944: LD_ADDR_VAR 0 8
5948: PUSH
5949: LD_INT 22
5951: PUSH
5952: LD_INT 3
5954: PUSH
5955: EMPTY
5956: LIST
5957: LIST
5958: PUSH
5959: LD_INT 25
5961: PUSH
5962: LD_INT 3
5964: PUSH
5965: EMPTY
5966: LIST
5967: LIST
5968: PUSH
5969: EMPTY
5970: LIST
5971: LIST
5972: PPUSH
5973: CALL_OW 69
5977: ST_TO_ADDR
// r := [ 4 , 5 , 6 , 6 ] [ Difficulty ] ;
5978: LD_ADDR_VAR 0 4
5982: PUSH
5983: LD_INT 4
5985: PUSH
5986: LD_INT 5
5988: PUSH
5989: LD_INT 6
5991: PUSH
5992: LD_INT 6
5994: PUSH
5995: EMPTY
5996: LIST
5997: LIST
5998: LIST
5999: LIST
6000: PUSH
6001: LD_OWVAR 67
6005: ARRAY
6006: ST_TO_ADDR
// for i = 1 to r do
6007: LD_ADDR_VAR 0 2
6011: PUSH
6012: DOUBLE
6013: LD_INT 1
6015: DEC
6016: ST_TO_ADDR
6017: LD_VAR 0 4
6021: PUSH
6022: FOR_TO
6023: IFFALSE 6196
// begin un := PrepareTank ( 3 , 3 , [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked ] [ i mod 3 + 1 ] , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_machine_gun ] [ i mod 3 + 1 ] , 100 ) ;
6025: LD_ADDR_VAR 0 5
6029: PUSH
6030: LD_INT 3
6032: PPUSH
6033: LD_INT 3
6035: PPUSH
6036: LD_INT 22
6038: PUSH
6039: LD_INT 22
6041: PUSH
6042: LD_INT 24
6044: PUSH
6045: EMPTY
6046: LIST
6047: LIST
6048: LIST
6049: PUSH
6050: LD_VAR 0 2
6054: PUSH
6055: LD_INT 3
6057: MOD
6058: PUSH
6059: LD_INT 1
6061: PLUS
6062: ARRAY
6063: PPUSH
6064: LD_INT 1
6066: PPUSH
6067: LD_INT 1
6069: PPUSH
6070: LD_INT 43
6072: PUSH
6073: LD_INT 44
6075: PUSH
6076: LD_INT 42
6078: PUSH
6079: EMPTY
6080: LIST
6081: LIST
6082: LIST
6083: PUSH
6084: LD_VAR 0 2
6088: PUSH
6089: LD_INT 3
6091: MOD
6092: PUSH
6093: LD_INT 1
6095: PLUS
6096: ARRAY
6097: PPUSH
6098: LD_INT 100
6100: PPUSH
6101: CALL 520 0 7
6105: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
6106: LD_VAR 0 5
6110: PPUSH
6111: LD_INT 0
6113: PPUSH
6114: LD_INT 5
6116: PPUSH
6117: CALL_OW 12
6121: PPUSH
6122: CALL_OW 233
// PlaceUnitArea ( un , parkingArea , false ) ;
6126: LD_VAR 0 5
6130: PPUSH
6131: LD_INT 5
6133: PPUSH
6134: LD_INT 0
6136: PPUSH
6137: CALL_OW 49
// if i > tmp - 2 then
6141: LD_VAR 0 2
6145: PUSH
6146: LD_VAR 0 8
6150: PUSH
6151: LD_INT 2
6153: MINUS
6154: GREATER
6155: IFFALSE 6159
// continue ;
6157: GO 6022
// ComExitBuilding ( tmp [ i ] ) ;
6159: LD_VAR 0 8
6163: PUSH
6164: LD_VAR 0 2
6168: ARRAY
6169: PPUSH
6170: CALL_OW 122
// AddComEnterUnit ( tmp [ i ] , un ) ;
6174: LD_VAR 0 8
6178: PUSH
6179: LD_VAR 0 2
6183: ARRAY
6184: PPUSH
6185: LD_VAR 0 5
6189: PPUSH
6190: CALL_OW 180
// end ;
6194: GO 6022
6196: POP
6197: POP
// end ;
6198: LD_VAR 0 1
6202: RET
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) do var i , filter , tmp , engs , enemy ;
6203: LD_INT 22
6205: PUSH
6206: LD_INT 3
6208: PUSH
6209: EMPTY
6210: LIST
6211: LIST
6212: PUSH
6213: LD_INT 25
6215: PUSH
6216: LD_INT 2
6218: PUSH
6219: EMPTY
6220: LIST
6221: LIST
6222: PUSH
6223: EMPTY
6224: LIST
6225: LIST
6226: PPUSH
6227: CALL_OW 69
6231: IFFALSE 6973
6233: GO 6235
6235: DISABLE
6236: LD_INT 0
6238: PPUSH
6239: PPUSH
6240: PPUSH
6241: PPUSH
6242: PPUSH
// begin enable ;
6243: ENABLE
// filter := FilterUnitsInArea ( baseArea , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
6244: LD_ADDR_VAR 0 2
6248: PUSH
6249: LD_INT 6
6251: PPUSH
6252: LD_INT 3
6254: PUSH
6255: LD_INT 24
6257: PUSH
6258: LD_INT 1000
6260: PUSH
6261: EMPTY
6262: LIST
6263: LIST
6264: PUSH
6265: EMPTY
6266: LIST
6267: LIST
6268: PUSH
6269: LD_INT 21
6271: PUSH
6272: LD_INT 3
6274: PUSH
6275: EMPTY
6276: LIST
6277: LIST
6278: PUSH
6279: EMPTY
6280: LIST
6281: LIST
6282: PPUSH
6283: CALL_OW 70
6287: ST_TO_ADDR
// engs := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
6288: LD_ADDR_VAR 0 4
6292: PUSH
6293: LD_INT 22
6295: PUSH
6296: LD_INT 3
6298: PUSH
6299: EMPTY
6300: LIST
6301: LIST
6302: PUSH
6303: LD_INT 25
6305: PUSH
6306: LD_INT 2
6308: PUSH
6309: EMPTY
6310: LIST
6311: LIST
6312: PUSH
6313: EMPTY
6314: LIST
6315: LIST
6316: PPUSH
6317: CALL_OW 69
6321: ST_TO_ADDR
// if not filter and not ru_rebuild_list then
6322: LD_VAR 0 2
6326: NOT
6327: IFFALSE 6336
6329: PUSH
6330: LD_EXP 20
6334: NOT
6335: AND
6336: IFFALSE 6410
// begin for i in engs do
6338: LD_ADDR_VAR 0 1
6342: PUSH
6343: LD_VAR 0 4
6347: PUSH
6348: FOR_IN
6349: IFFALSE 6408
// if GetLives ( i ) = 1000 and not HasTask ( i ) and not IsInUnit ( i ) then
6351: LD_VAR 0 1
6355: PPUSH
6356: CALL_OW 256
6360: PUSH
6361: LD_INT 1000
6363: EQUAL
6364: IFFALSE 6378
6366: PUSH
6367: LD_VAR 0 1
6371: PPUSH
6372: CALL_OW 314
6376: NOT
6377: AND
6378: IFFALSE 6392
6380: PUSH
6381: LD_VAR 0 1
6385: PPUSH
6386: CALL_OW 310
6390: NOT
6391: AND
6392: IFFALSE 6406
// ComEnterUnit ( i , ru_dep_main ) ;
6394: LD_VAR 0 1
6398: PPUSH
6399: LD_INT 16
6401: PPUSH
6402: CALL_OW 120
6406: GO 6348
6408: POP
6409: POP
// end ; if UnitFilter ( engs , [ f_not , [ f_lives , 650 ] ] ) then
6410: LD_VAR 0 4
6414: PPUSH
6415: LD_INT 3
6417: PUSH
6418: LD_INT 24
6420: PUSH
6421: LD_INT 650
6423: PUSH
6424: EMPTY
6425: LIST
6426: LIST
6427: PUSH
6428: EMPTY
6429: LIST
6430: LIST
6431: PPUSH
6432: CALL_OW 72
6436: IFFALSE 6529
// begin tmp := UnitFilter ( engs , [ f_not , [ f_lives , 650 ] ] ) ;
6438: LD_ADDR_VAR 0 3
6442: PUSH
6443: LD_VAR 0 4
6447: PPUSH
6448: LD_INT 3
6450: PUSH
6451: LD_INT 24
6453: PUSH
6454: LD_INT 650
6456: PUSH
6457: EMPTY
6458: LIST
6459: LIST
6460: PUSH
6461: EMPTY
6462: LIST
6463: LIST
6464: PPUSH
6465: CALL_OW 72
6469: ST_TO_ADDR
// for i in tmp do
6470: LD_ADDR_VAR 0 1
6474: PUSH
6475: LD_VAR 0 3
6479: PUSH
6480: FOR_IN
6481: IFFALSE 6527
// if not IsInArea ( i , mainBaseArea ) then
6483: LD_VAR 0 1
6487: PPUSH
6488: LD_INT 14
6490: PPUSH
6491: CALL_OW 308
6495: NOT
6496: IFFALSE 6525
// begin ComMoveXY ( i , 129 , 125 ) ;
6498: LD_VAR 0 1
6502: PPUSH
6503: LD_INT 129
6505: PPUSH
6506: LD_INT 125
6508: PPUSH
6509: CALL_OW 111
// AddComWait ( i , 0 0$30 ) ;
6513: LD_VAR 0 1
6517: PPUSH
6518: LD_INT 1050
6520: PPUSH
6521: CALL_OW 202
// end ;
6525: GO 6480
6527: POP
6528: POP
// end ; engs := UnitFilter ( engs , [ f_lives , 650 ] ) ;
6529: LD_ADDR_VAR 0 4
6533: PUSH
6534: LD_VAR 0 4
6538: PPUSH
6539: LD_INT 24
6541: PUSH
6542: LD_INT 650
6544: PUSH
6545: EMPTY
6546: LIST
6547: LIST
6548: PPUSH
6549: CALL_OW 72
6553: ST_TO_ADDR
// if not engs then
6554: LD_VAR 0 4
6558: NOT
6559: IFFALSE 6563
// exit ;
6561: GO 6973
// if filter then
6563: LD_VAR 0 2
6567: IFFALSE 6828
// begin for i in engs do
6569: LD_ADDR_VAR 0 1
6573: PUSH
6574: LD_VAR 0 4
6578: PUSH
6579: FOR_IN
6580: IFFALSE 6604
// if IsInUnit ( i ) then
6582: LD_VAR 0 1
6586: PPUSH
6587: CALL_OW 310
6591: IFFALSE 6602
// ComExitBuilding ( i ) ;
6593: LD_VAR 0 1
6597: PPUSH
6598: CALL_OW 122
6602: GO 6579
6604: POP
6605: POP
// wait ( 3 ) ;
6606: LD_INT 3
6608: PPUSH
6609: CALL_OW 67
// if filter >= 2 and engs >= 2 then
6613: LD_VAR 0 2
6617: PUSH
6618: LD_INT 2
6620: GREATEREQUAL
6621: IFFALSE 6633
6623: PUSH
6624: LD_VAR 0 4
6628: PUSH
6629: LD_INT 2
6631: GREATEREQUAL
6632: AND
6633: IFFALSE 6781
// begin for i = 1 to engs / 2 do
6635: LD_ADDR_VAR 0 1
6639: PUSH
6640: DOUBLE
6641: LD_INT 1
6643: DEC
6644: ST_TO_ADDR
6645: LD_VAR 0 4
6649: PUSH
6650: LD_INT 2
6652: DIVREAL
6653: PUSH
6654: FOR_TO
6655: IFFALSE 6701
// if not HasTask ( engs [ i ] ) then
6657: LD_VAR 0 4
6661: PUSH
6662: LD_VAR 0 1
6666: ARRAY
6667: PPUSH
6668: CALL_OW 314
6672: NOT
6673: IFFALSE 6699
// ComRepairBuilding ( engs [ i ] , filter [ 1 ] ) ;
6675: LD_VAR 0 4
6679: PUSH
6680: LD_VAR 0 1
6684: ARRAY
6685: PPUSH
6686: LD_VAR 0 2
6690: PUSH
6691: LD_INT 1
6693: ARRAY
6694: PPUSH
6695: CALL_OW 130
6699: GO 6654
6701: POP
6702: POP
// for i = engs / 2 + 1 to engs do
6703: LD_ADDR_VAR 0 1
6707: PUSH
6708: DOUBLE
6709: LD_VAR 0 4
6713: PUSH
6714: LD_INT 2
6716: DIVREAL
6717: PUSH
6718: LD_INT 1
6720: PLUS
6721: DEC
6722: ST_TO_ADDR
6723: LD_VAR 0 4
6727: PUSH
6728: FOR_TO
6729: IFFALSE 6777
// if not HasTask ( engs [ i ] ) then
6731: LD_VAR 0 4
6735: PUSH
6736: LD_VAR 0 1
6740: ARRAY
6741: PPUSH
6742: CALL_OW 314
6746: NOT
6747: IFFALSE 6775
// ComRepairBuilding ( engs [ i ] , filter [ filter ] ) ;
6749: LD_VAR 0 4
6753: PUSH
6754: LD_VAR 0 1
6758: ARRAY
6759: PPUSH
6760: LD_VAR 0 2
6764: PUSH
6765: LD_VAR 0 2
6769: ARRAY
6770: PPUSH
6771: CALL_OW 130
6775: GO 6728
6777: POP
6778: POP
// end else
6779: GO 6828
// for i in engs do
6781: LD_ADDR_VAR 0 1
6785: PUSH
6786: LD_VAR 0 4
6790: PUSH
6791: FOR_IN
6792: IFFALSE 6826
// if not HasTask ( i ) then
6794: LD_VAR 0 1
6798: PPUSH
6799: CALL_OW 314
6803: NOT
6804: IFFALSE 6824
// ComRepairBuilding ( i , filter [ 1 ] ) ;
6806: LD_VAR 0 1
6810: PPUSH
6811: LD_VAR 0 2
6815: PUSH
6816: LD_INT 1
6818: ARRAY
6819: PPUSH
6820: CALL_OW 130
6824: GO 6791
6826: POP
6827: POP
// end ; enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
6828: LD_ADDR_VAR 0 5
6832: PUSH
6833: LD_INT 81
6835: PUSH
6836: LD_INT 3
6838: PUSH
6839: EMPTY
6840: LIST
6841: LIST
6842: PPUSH
6843: CALL_OW 69
6847: ST_TO_ADDR
// if ru_rebuild_list and not filter then
6848: LD_EXP 20
6852: IFFALSE 6861
6854: PUSH
6855: LD_VAR 0 2
6859: NOT
6860: AND
6861: IFFALSE 6973
// begin ComExitBuilding ( engs ) ;
6863: LD_VAR 0 4
6867: PPUSH
6868: CALL_OW 122
// if GetDistUnitXY ( NearestUnitToXY ( enemy , ru_rebuild_list [ 2 ] , ru_rebuild_list [ 3 ] ) , ru_rebuild_list [ 2 ] , ru_rebuild_list [ 3 ] ) > 10 then
6872: LD_VAR 0 5
6876: PPUSH
6877: LD_EXP 20
6881: PUSH
6882: LD_INT 2
6884: ARRAY
6885: PPUSH
6886: LD_EXP 20
6890: PUSH
6891: LD_INT 3
6893: ARRAY
6894: PPUSH
6895: CALL_OW 73
6899: PPUSH
6900: LD_EXP 20
6904: PUSH
6905: LD_INT 2
6907: ARRAY
6908: PPUSH
6909: LD_EXP 20
6913: PUSH
6914: LD_INT 3
6916: ARRAY
6917: PPUSH
6918: CALL_OW 297
6922: PUSH
6923: LD_INT 10
6925: GREATER
6926: IFFALSE 6973
// ComBuild ( engs , ru_rebuild_list [ 1 ] , ru_rebuild_list [ 2 ] , ru_rebuild_list [ 3 ] , ru_rebuild_list [ 4 ] ) ;
6928: LD_VAR 0 4
6932: PPUSH
6933: LD_EXP 20
6937: PUSH
6938: LD_INT 1
6940: ARRAY
6941: PPUSH
6942: LD_EXP 20
6946: PUSH
6947: LD_INT 2
6949: ARRAY
6950: PPUSH
6951: LD_EXP 20
6955: PUSH
6956: LD_INT 3
6958: ARRAY
6959: PPUSH
6960: LD_EXP 20
6964: PUSH
6965: LD_INT 4
6967: ARRAY
6968: PPUSH
6969: CALL_OW 145
// end ; end ;
6973: PPOPN 5
6975: END
// every 0 0$1 trigger GetLives ( ru_dep_main ) < 250 do var i , tmp ;
6976: LD_INT 16
6978: PPUSH
6979: CALL_OW 256
6983: PUSH
6984: LD_INT 250
6986: LESS
6987: IFFALSE 7177
6989: GO 6991
6991: DISABLE
6992: LD_INT 0
6994: PPUSH
6995: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_class , 1 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ;
6996: LD_ADDR_VAR 0 2
7000: PUSH
7001: LD_INT 22
7003: PUSH
7004: LD_INT 3
7006: PUSH
7007: EMPTY
7008: LIST
7009: LIST
7010: PUSH
7011: LD_INT 2
7013: PUSH
7014: LD_INT 25
7016: PUSH
7017: LD_INT 1
7019: PUSH
7020: EMPTY
7021: LIST
7022: LIST
7023: PUSH
7024: LD_INT 25
7026: PUSH
7027: LD_INT 3
7029: PUSH
7030: EMPTY
7031: LIST
7032: LIST
7033: PUSH
7034: LD_INT 25
7036: PUSH
7037: LD_INT 4
7039: PUSH
7040: EMPTY
7041: LIST
7042: LIST
7043: PUSH
7044: EMPTY
7045: LIST
7046: LIST
7047: LIST
7048: LIST
7049: PUSH
7050: EMPTY
7051: LIST
7052: LIST
7053: PPUSH
7054: CALL_OW 69
7058: ST_TO_ADDR
// ComExitBuilding ( tmp ) ;
7059: LD_VAR 0 2
7063: PPUSH
7064: CALL_OW 122
// wait ( 3 ) ;
7068: LD_INT 3
7070: PPUSH
7071: CALL_OW 67
// ComMoveXY ( tmp , 156 , 211 ) ;
7075: LD_VAR 0 2
7079: PPUSH
7080: LD_INT 156
7082: PPUSH
7083: LD_INT 211
7085: PPUSH
7086: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
7090: LD_INT 35
7092: PPUSH
7093: CALL_OW 67
// for i in tmp do
7097: LD_ADDR_VAR 0 1
7101: PUSH
7102: LD_VAR 0 2
7106: PUSH
7107: FOR_IN
7108: IFFALSE 7168
// if IsInArea ( i , escapeArea ) then
7110: LD_VAR 0 1
7114: PPUSH
7115: LD_INT 15
7117: PPUSH
7118: CALL_OW 308
7122: IFFALSE 7151
// begin RemoveUnit ( i ) ;
7124: LD_VAR 0 1
7128: PPUSH
7129: CALL_OW 64
// tmp := tmp diff i ;
7133: LD_ADDR_VAR 0 2
7137: PUSH
7138: LD_VAR 0 2
7142: PUSH
7143: LD_VAR 0 1
7147: DIFF
7148: ST_TO_ADDR
// end else
7149: GO 7166
// ComMoveXY ( i , 156 , 211 ) ;
7151: LD_VAR 0 1
7155: PPUSH
7156: LD_INT 156
7158: PPUSH
7159: LD_INT 211
7161: PPUSH
7162: CALL_OW 111
7166: GO 7107
7168: POP
7169: POP
// until not tmp ;
7170: LD_VAR 0 2
7174: NOT
7175: IFFALSE 7090
// end ;
7177: PPOPN 2
7179: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do var i , tmp , doc ;
7180: LD_INT 22
7182: PUSH
7183: LD_INT 3
7185: PUSH
7186: EMPTY
7187: LIST
7188: LIST
7189: PUSH
7190: LD_INT 25
7192: PUSH
7193: LD_INT 4
7195: PUSH
7196: EMPTY
7197: LIST
7198: LIST
7199: PUSH
7200: EMPTY
7201: LIST
7202: LIST
7203: PPUSH
7204: CALL_OW 69
7208: IFFALSE 7462
7210: GO 7212
7212: DISABLE
7213: LD_INT 0
7215: PPUSH
7216: PPUSH
7217: PPUSH
// begin enable ;
7218: ENABLE
// tmp := FilterUnitsInArea ( mainBaseArea , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
7219: LD_ADDR_VAR 0 2
7223: PUSH
7224: LD_INT 14
7226: PPUSH
7227: LD_INT 22
7229: PUSH
7230: LD_INT 3
7232: PUSH
7233: EMPTY
7234: LIST
7235: LIST
7236: PUSH
7237: LD_INT 21
7239: PUSH
7240: LD_INT 1
7242: PUSH
7243: EMPTY
7244: LIST
7245: LIST
7246: PUSH
7247: LD_INT 3
7249: PUSH
7250: LD_INT 24
7252: PUSH
7253: LD_INT 1000
7255: PUSH
7256: EMPTY
7257: LIST
7258: LIST
7259: PUSH
7260: EMPTY
7261: LIST
7262: LIST
7263: PUSH
7264: EMPTY
7265: LIST
7266: LIST
7267: LIST
7268: PPUSH
7269: CALL_OW 70
7273: ST_TO_ADDR
// doc := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) ;
7274: LD_ADDR_VAR 0 3
7278: PUSH
7279: LD_INT 22
7281: PUSH
7282: LD_INT 3
7284: PUSH
7285: EMPTY
7286: LIST
7287: LIST
7288: PUSH
7289: LD_INT 25
7291: PUSH
7292: LD_INT 4
7294: PUSH
7295: EMPTY
7296: LIST
7297: LIST
7298: PUSH
7299: EMPTY
7300: LIST
7301: LIST
7302: PPUSH
7303: CALL_OW 69
7307: ST_TO_ADDR
// if not doc then
7308: LD_VAR 0 3
7312: NOT
7313: IFFALSE 7317
// exit ;
7315: GO 7462
// if not tmp then
7317: LD_VAR 0 2
7321: NOT
7322: IFFALSE 7413
// begin if not IsInUnit ( doc [ 1 ] ) then
7324: LD_VAR 0 3
7328: PUSH
7329: LD_INT 1
7331: ARRAY
7332: PPUSH
7333: CALL_OW 310
7337: NOT
7338: IFFALSE 7411
// ComEnterUnit ( doc , FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) [ 1 ] ) ;
7340: LD_VAR 0 3
7344: PPUSH
7345: LD_INT 22
7347: PUSH
7348: LD_INT 3
7350: PUSH
7351: EMPTY
7352: LIST
7353: LIST
7354: PUSH
7355: LD_INT 2
7357: PUSH
7358: LD_INT 30
7360: PUSH
7361: LD_INT 6
7363: PUSH
7364: EMPTY
7365: LIST
7366: LIST
7367: PUSH
7368: LD_INT 30
7370: PUSH
7371: LD_INT 7
7373: PUSH
7374: EMPTY
7375: LIST
7376: LIST
7377: PUSH
7378: LD_INT 30
7380: PUSH
7381: LD_INT 8
7383: PUSH
7384: EMPTY
7385: LIST
7386: LIST
7387: PUSH
7388: EMPTY
7389: LIST
7390: LIST
7391: LIST
7392: LIST
7393: PUSH
7394: EMPTY
7395: LIST
7396: LIST
7397: PPUSH
7398: CALL_OW 69
7402: PUSH
7403: LD_INT 1
7405: ARRAY
7406: PPUSH
7407: CALL_OW 120
// exit ;
7411: GO 7462
// end ; if IsInUnit ( doc [ 1 ] ) then
7413: LD_VAR 0 3
7417: PUSH
7418: LD_INT 1
7420: ARRAY
7421: PPUSH
7422: CALL_OW 310
7426: IFFALSE 7437
// ComExitBuilding ( doc ) ;
7428: LD_VAR 0 3
7432: PPUSH
7433: CALL_OW 122
// wait ( 3 ) ;
7437: LD_INT 3
7439: PPUSH
7440: CALL_OW 67
// ComHeal ( doc , tmp [ 1 ] ) ;
7444: LD_VAR 0 3
7448: PPUSH
7449: LD_VAR 0 2
7453: PUSH
7454: LD_INT 1
7456: ARRAY
7457: PPUSH
7458: CALL_OW 128
// end ;
7462: PPOPN 3
7464: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) do var i , tmp , attacking , areas , area , mech ;
7465: LD_INT 22
7467: PUSH
7468: LD_INT 3
7470: PUSH
7471: EMPTY
7472: LIST
7473: LIST
7474: PUSH
7475: LD_INT 25
7477: PUSH
7478: LD_INT 3
7480: PUSH
7481: EMPTY
7482: LIST
7483: LIST
7484: PUSH
7485: EMPTY
7486: LIST
7487: LIST
7488: PPUSH
7489: CALL_OW 69
7493: IFFALSE 7525
7495: PUSH
7496: LD_INT 22
7498: PUSH
7499: LD_INT 3
7501: PUSH
7502: EMPTY
7503: LIST
7504: LIST
7505: PUSH
7506: LD_INT 21
7508: PUSH
7509: LD_INT 2
7511: PUSH
7512: EMPTY
7513: LIST
7514: LIST
7515: PUSH
7516: EMPTY
7517: LIST
7518: LIST
7519: PPUSH
7520: CALL_OW 69
7524: AND
7525: IFFALSE 8302
7527: GO 7529
7529: DISABLE
7530: LD_INT 0
7532: PPUSH
7533: PPUSH
7534: PPUSH
7535: PPUSH
7536: PPUSH
7537: PPUSH
// begin enable ;
7538: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) ;
7539: LD_ADDR_VAR 0 2
7543: PUSH
7544: LD_INT 22
7546: PUSH
7547: LD_INT 3
7549: PUSH
7550: EMPTY
7551: LIST
7552: LIST
7553: PUSH
7554: LD_INT 21
7556: PUSH
7557: LD_INT 2
7559: PUSH
7560: EMPTY
7561: LIST
7562: LIST
7563: PUSH
7564: LD_INT 3
7566: PUSH
7567: LD_INT 58
7569: PUSH
7570: EMPTY
7571: LIST
7572: PUSH
7573: EMPTY
7574: LIST
7575: LIST
7576: PUSH
7577: EMPTY
7578: LIST
7579: LIST
7580: LIST
7581: PPUSH
7582: CALL_OW 69
7586: ST_TO_ADDR
// areas := [ sectorAlpha , sectorBeta , sectorDelta , mainBaseArea ] ;
7587: LD_ADDR_VAR 0 4
7591: PUSH
7592: LD_INT 10
7594: PUSH
7595: LD_INT 11
7597: PUSH
7598: LD_INT 12
7600: PUSH
7601: LD_INT 14
7603: PUSH
7604: EMPTY
7605: LIST
7606: LIST
7607: LIST
7608: LIST
7609: ST_TO_ADDR
// area := 0 ;
7610: LD_ADDR_VAR 0 5
7614: PUSH
7615: LD_INT 0
7617: ST_TO_ADDR
// attacking := false ;
7618: LD_ADDR_VAR 0 3
7622: PUSH
7623: LD_INT 0
7625: ST_TO_ADDR
// for i in tmp do
7626: LD_ADDR_VAR 0 1
7630: PUSH
7631: LD_VAR 0 2
7635: PUSH
7636: FOR_IN
7637: IFFALSE 8081
// begin if GetDistUnits ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) < 10 and not HasTask ( i ) and not GetTag ( i ) and GetLives ( i ) > 650 then
7639: LD_VAR 0 1
7643: PPUSH
7644: LD_INT 22
7646: PUSH
7647: LD_INT 1
7649: PUSH
7650: EMPTY
7651: LIST
7652: LIST
7653: PPUSH
7654: CALL_OW 69
7658: PPUSH
7659: LD_VAR 0 1
7663: PPUSH
7664: CALL_OW 74
7668: PPUSH
7669: CALL_OW 296
7673: PUSH
7674: LD_INT 10
7676: LESS
7677: IFFALSE 7691
7679: PUSH
7680: LD_VAR 0 1
7684: PPUSH
7685: CALL_OW 314
7689: NOT
7690: AND
7691: IFFALSE 7705
7693: PUSH
7694: LD_VAR 0 1
7698: PPUSH
7699: CALL_OW 110
7703: NOT
7704: AND
7705: IFFALSE 7722
7707: PUSH
7708: LD_VAR 0 1
7712: PPUSH
7713: CALL_OW 256
7717: PUSH
7718: LD_INT 650
7720: GREATER
7721: AND
7722: IFFALSE 7766
// begin ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
7724: LD_VAR 0 1
7728: PPUSH
7729: LD_INT 22
7731: PUSH
7732: LD_INT 1
7734: PUSH
7735: EMPTY
7736: LIST
7737: LIST
7738: PPUSH
7739: CALL_OW 69
7743: PPUSH
7744: LD_VAR 0 1
7748: PPUSH
7749: CALL_OW 74
7753: PPUSH
7754: CALL_OW 115
// attacking := true ;
7758: LD_ADDR_VAR 0 3
7762: PUSH
7763: LD_INT 1
7765: ST_TO_ADDR
// end ; if not GetTag ( i ) and GetLives ( i ) < 650 and GetType ( i ) = unit_vehicle then
7766: LD_VAR 0 1
7770: PPUSH
7771: CALL_OW 110
7775: NOT
7776: IFFALSE 7793
7778: PUSH
7779: LD_VAR 0 1
7783: PPUSH
7784: CALL_OW 256
7788: PUSH
7789: LD_INT 650
7791: LESS
7792: AND
7793: IFFALSE 7810
7795: PUSH
7796: LD_VAR 0 1
7800: PPUSH
7801: CALL_OW 247
7805: PUSH
7806: LD_INT 2
7808: EQUAL
7809: AND
7810: IFFALSE 7839
// begin SetTag ( i , 1 ) ;
7812: LD_VAR 0 1
7816: PPUSH
7817: LD_INT 1
7819: PPUSH
7820: CALL_OW 109
// ComMoveXY ( i , 130 , 139 ) ;
7824: LD_VAR 0 1
7828: PPUSH
7829: LD_INT 130
7831: PPUSH
7832: LD_INT 139
7834: PPUSH
7835: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 130 , 139 ) < 6 then
7839: LD_VAR 0 1
7843: PPUSH
7844: CALL_OW 110
7848: PUSH
7849: LD_INT 1
7851: EQUAL
7852: IFFALSE 7875
7854: PUSH
7855: LD_VAR 0 1
7859: PPUSH
7860: LD_INT 130
7862: PPUSH
7863: LD_INT 139
7865: PPUSH
7866: CALL_OW 297
7870: PUSH
7871: LD_INT 6
7873: LESS
7874: AND
7875: IFFALSE 7889
// SetTag ( i , 2 ) ;
7877: LD_VAR 0 1
7881: PPUSH
7882: LD_INT 2
7884: PPUSH
7885: CALL_OW 109
// if GetTag ( i ) = 2 then
7889: LD_VAR 0 1
7893: PPUSH
7894: CALL_OW 110
7898: PUSH
7899: LD_INT 2
7901: EQUAL
7902: IFFALSE 8039
// begin if GetLives ( i ) = 1000 then
7904: LD_VAR 0 1
7908: PPUSH
7909: CALL_OW 256
7913: PUSH
7914: LD_INT 1000
7916: EQUAL
7917: IFFALSE 7933
// SetTag ( i , 3 ) else
7919: LD_VAR 0 1
7923: PPUSH
7924: LD_INT 3
7926: PPUSH
7927: CALL_OW 109
7931: GO 8039
// if IsDrivenBy ( i ) then
7933: LD_VAR 0 1
7937: PPUSH
7938: CALL_OW 311
7942: IFFALSE 8039
// begin mech := IsDrivenBy ( i ) ;
7944: LD_ADDR_VAR 0 6
7948: PUSH
7949: LD_VAR 0 1
7953: PPUSH
7954: CALL_OW 311
7958: ST_TO_ADDR
// if not See ( 1 , mech ) and GetLives ( mech ) < 1000 then
7959: LD_INT 1
7961: PPUSH
7962: LD_VAR 0 6
7966: PPUSH
7967: CALL_OW 292
7971: NOT
7972: IFFALSE 7989
7974: PUSH
7975: LD_VAR 0 6
7979: PPUSH
7980: CALL_OW 256
7984: PUSH
7985: LD_INT 1000
7987: LESS
7988: AND
7989: IFFALSE 8003
// SetLives ( mech , 1000 ) ;
7991: LD_VAR 0 6
7995: PPUSH
7996: LD_INT 1000
7998: PPUSH
7999: CALL_OW 234
// if not See ( 1 , i ) then
8003: LD_INT 1
8005: PPUSH
8006: LD_VAR 0 1
8010: PPUSH
8011: CALL_OW 292
8015: NOT
8016: IFFALSE 8030
// SetFuel ( i , 100 ) ;
8018: LD_VAR 0 1
8022: PPUSH
8023: LD_INT 100
8025: PPUSH
8026: CALL_OW 240
// ComRepairVehicleAndReturn ( mech ) ;
8030: LD_VAR 0 6
8034: PPUSH
8035: CALL 74886 0 1
// end ; end ; if GetTag ( i ) = 3 and IsDrivenBy ( i ) then
8039: LD_VAR 0 1
8043: PPUSH
8044: CALL_OW 110
8048: PUSH
8049: LD_INT 3
8051: EQUAL
8052: IFFALSE 8065
8054: PUSH
8055: LD_VAR 0 1
8059: PPUSH
8060: CALL_OW 311
8064: AND
8065: IFFALSE 8079
// SetTag ( i , 0 ) ;
8067: LD_VAR 0 1
8071: PPUSH
8072: LD_INT 0
8074: PPUSH
8075: CALL_OW 109
// end ;
8079: GO 7636
8081: POP
8082: POP
// if attacking then
8083: LD_VAR 0 3
8087: IFFALSE 8091
// exit ;
8089: GO 8302
// if can_end and tmp then
8091: LD_EXP 6
8095: IFFALSE 8103
8097: PUSH
8098: LD_VAR 0 2
8102: AND
8103: IFFALSE 8158
// begin for i in tmp do
8105: LD_ADDR_VAR 0 1
8109: PUSH
8110: LD_VAR 0 2
8114: PUSH
8115: FOR_IN
8116: IFFALSE 8154
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
8118: LD_VAR 0 1
8122: PPUSH
8123: LD_INT 22
8125: PUSH
8126: LD_INT 1
8128: PUSH
8129: EMPTY
8130: LIST
8131: LIST
8132: PPUSH
8133: CALL_OW 69
8137: PPUSH
8138: LD_VAR 0 1
8142: PPUSH
8143: CALL_OW 74
8147: PPUSH
8148: CALL_OW 115
8152: GO 8115
8154: POP
8155: POP
// exit ;
8156: GO 8302
// end ; for i in areas do
8158: LD_ADDR_VAR 0 1
8162: PUSH
8163: LD_VAR 0 4
8167: PUSH
8168: FOR_IN
8169: IFFALSE 8206
// if FilterUnitsInArea ( i , [ f_side , 1 ] ) then
8171: LD_VAR 0 1
8175: PPUSH
8176: LD_INT 22
8178: PUSH
8179: LD_INT 1
8181: PUSH
8182: EMPTY
8183: LIST
8184: LIST
8185: PPUSH
8186: CALL_OW 70
8190: IFFALSE 8204
// begin area := i ;
8192: LD_ADDR_VAR 0 5
8196: PUSH
8197: LD_VAR 0 1
8201: ST_TO_ADDR
// break ;
8202: GO 8206
// end ;
8204: GO 8168
8206: POP
8207: POP
// if area then
8208: LD_VAR 0 5
8212: IFFALSE 8302
// begin for i in tmp do
8214: LD_ADDR_VAR 0 1
8218: PUSH
8219: LD_VAR 0 2
8223: PUSH
8224: FOR_IN
8225: IFFALSE 8300
// begin if GetTag ( i ) then
8227: LD_VAR 0 1
8231: PPUSH
8232: CALL_OW 110
8236: IFFALSE 8240
// continue ;
8238: GO 8224
// if GetFuel ( i ) < 33 then
8240: LD_VAR 0 1
8244: PPUSH
8245: CALL_OW 261
8249: PUSH
8250: LD_INT 33
8252: LESS
8253: IFFALSE 8267
// SetFuel ( i , 33 ) ;
8255: LD_VAR 0 1
8259: PPUSH
8260: LD_INT 33
8262: PPUSH
8263: CALL_OW 240
// if not IsInArea ( i , area ) then
8267: LD_VAR 0 1
8271: PPUSH
8272: LD_VAR 0 5
8276: PPUSH
8277: CALL_OW 308
8281: NOT
8282: IFFALSE 8298
// ComMoveToArea ( i , area ) ;
8284: LD_VAR 0 1
8288: PPUSH
8289: LD_VAR 0 5
8293: PPUSH
8294: CALL_OW 113
// end ;
8298: GO 8224
8300: POP
8301: POP
// end ; end ;
8302: PPOPN 6
8304: END
// every 15 15$00 trigger Difficulty > 1 do var i , j , un , veh , time , count ;
8305: LD_OWVAR 67
8309: PUSH
8310: LD_INT 1
8312: GREATER
8313: IFFALSE 8602
8315: GO 8317
8317: DISABLE
8318: LD_INT 0
8320: PPUSH
8321: PPUSH
8322: PPUSH
8323: PPUSH
8324: PPUSH
8325: PPUSH
// begin uc_side := 3 ;
8326: LD_ADDR_OWVAR 20
8330: PUSH
8331: LD_INT 3
8333: ST_TO_ADDR
// uc_nation := 3 ;
8334: LD_ADDR_OWVAR 21
8338: PUSH
8339: LD_INT 3
8341: ST_TO_ADDR
// time := [ 9 9$00 , 7 7$00 , 6 6$00 , 5 5$30 ] [ Difficulty ] ;
8342: LD_ADDR_VAR 0 5
8346: PUSH
8347: LD_INT 18900
8349: PUSH
8350: LD_INT 14700
8352: PUSH
8353: LD_INT 12600
8355: PUSH
8356: LD_INT 11550
8358: PUSH
8359: EMPTY
8360: LIST
8361: LIST
8362: LIST
8363: LIST
8364: PUSH
8365: LD_OWVAR 67
8369: ARRAY
8370: ST_TO_ADDR
// count := [ 2 , 2 , 3 , 3 ] [ Difficulty ] ;
8371: LD_ADDR_VAR 0 6
8375: PUSH
8376: LD_INT 2
8378: PUSH
8379: LD_INT 2
8381: PUSH
8382: LD_INT 3
8384: PUSH
8385: LD_INT 3
8387: PUSH
8388: EMPTY
8389: LIST
8390: LIST
8391: LIST
8392: LIST
8393: PUSH
8394: LD_OWVAR 67
8398: ARRAY
8399: ST_TO_ADDR
// for i = 1 to count do
8400: LD_ADDR_VAR 0 1
8404: PUSH
8405: DOUBLE
8406: LD_INT 1
8408: DEC
8409: ST_TO_ADDR
8410: LD_VAR 0 6
8414: PUSH
8415: FOR_TO
8416: IFFALSE 8600
// begin wait ( time ) ;
8418: LD_VAR 0 5
8422: PPUSH
8423: CALL_OW 67
// for j = 1 to rand ( 1 , Difficulty ) do
8427: LD_ADDR_VAR 0 2
8431: PUSH
8432: DOUBLE
8433: LD_INT 1
8435: DEC
8436: ST_TO_ADDR
8437: LD_INT 1
8439: PPUSH
8440: LD_OWVAR 67
8444: PPUSH
8445: CALL_OW 12
8449: PUSH
8450: FOR_TO
8451: IFFALSE 8596
// begin veh := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_machine_gun ] [ i mod 3 + 1 ] , 80 ) ;
8453: LD_ADDR_VAR 0 4
8457: PUSH
8458: LD_INT 3
8460: PPUSH
8461: LD_INT 3
8463: PPUSH
8464: LD_INT 22
8466: PPUSH
8467: LD_INT 1
8469: PPUSH
8470: LD_INT 1
8472: PPUSH
8473: LD_INT 43
8475: PUSH
8476: LD_INT 44
8478: PUSH
8479: LD_INT 42
8481: PUSH
8482: EMPTY
8483: LIST
8484: LIST
8485: LIST
8486: PUSH
8487: LD_VAR 0 1
8491: PUSH
8492: LD_INT 3
8494: MOD
8495: PUSH
8496: LD_INT 1
8498: PLUS
8499: ARRAY
8500: PPUSH
8501: LD_INT 80
8503: PPUSH
8504: CALL 520 0 7
8508: ST_TO_ADDR
// PlaceUnitArea ( veh , southArea , false ) ;
8509: LD_VAR 0 4
8513: PPUSH
8514: LD_INT 13
8516: PPUSH
8517: LD_INT 0
8519: PPUSH
8520: CALL_OW 49
// PrepareHuman ( false , 3 , [ 4 , 5 , 5 , 7 ] [ Difficulty ] ) ;
8524: LD_INT 0
8526: PPUSH
8527: LD_INT 3
8529: PPUSH
8530: LD_INT 4
8532: PUSH
8533: LD_INT 5
8535: PUSH
8536: LD_INT 5
8538: PUSH
8539: LD_INT 7
8541: PUSH
8542: EMPTY
8543: LIST
8544: LIST
8545: LIST
8546: LIST
8547: PUSH
8548: LD_OWVAR 67
8552: ARRAY
8553: PPUSH
8554: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
8558: CALL_OW 44
8562: PPUSH
8563: LD_VAR 0 4
8567: PPUSH
8568: CALL_OW 52
// wait ( 0 0$01 ) ;
8572: LD_INT 35
8574: PPUSH
8575: CALL_OW 67
// ComMoveXY ( veh , 143 , 143 ) ;
8579: LD_VAR 0 4
8583: PPUSH
8584: LD_INT 143
8586: PPUSH
8587: LD_INT 143
8589: PPUSH
8590: CALL_OW 111
// end ;
8594: GO 8450
8596: POP
8597: POP
// end ;
8598: GO 8415
8600: POP
8601: POP
// end ;
8602: PPOPN 6
8604: END
// every 8 8$00 do var i , un , time ;
8605: GO 8607
8607: DISABLE
8608: LD_INT 0
8610: PPUSH
8611: PPUSH
8612: PPUSH
// begin time := [ 3 3$00 , 1 1$00 , 0 0$30 ] ;
8613: LD_ADDR_VAR 0 3
8617: PUSH
8618: LD_INT 6300
8620: PUSH
8621: LD_INT 2100
8623: PUSH
8624: LD_INT 1050
8626: PUSH
8627: EMPTY
8628: LIST
8629: LIST
8630: LIST
8631: ST_TO_ADDR
// wait ( time ) ;
8632: LD_VAR 0 3
8636: PPUSH
8637: CALL_OW 67
// uc_side := 3 ;
8641: LD_ADDR_OWVAR 20
8645: PUSH
8646: LD_INT 3
8648: ST_TO_ADDR
// uc_nation := 3 ;
8649: LD_ADDR_OWVAR 21
8653: PUSH
8654: LD_INT 3
8656: ST_TO_ADDR
// for i = 1 to 2 do
8657: LD_ADDR_VAR 0 1
8661: PUSH
8662: DOUBLE
8663: LD_INT 1
8665: DEC
8666: ST_TO_ADDR
8667: LD_INT 2
8669: PUSH
8670: FOR_TO
8671: IFFALSE 8734
// begin PrepareHuman ( false , 1 , 4 ) ;
8673: LD_INT 0
8675: PPUSH
8676: LD_INT 1
8678: PPUSH
8679: LD_INT 4
8681: PPUSH
8682: CALL_OW 380
// un := CreateHuman ;
8686: LD_ADDR_VAR 0 2
8690: PUSH
8691: CALL_OW 44
8695: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_dep_main ) ;
8696: LD_VAR 0 2
8700: PPUSH
8701: LD_INT 16
8703: PPUSH
8704: CALL_OW 52
// ComExitBuilding ( un ) ;
8708: LD_VAR 0 2
8712: PPUSH
8713: CALL_OW 122
// AddComAgressiveMove ( un , 41 , 76 ) ;
8717: LD_VAR 0 2
8721: PPUSH
8722: LD_INT 41
8724: PPUSH
8725: LD_INT 76
8727: PPUSH
8728: CALL_OW 174
// end ;
8732: GO 8670
8734: POP
8735: POP
// end ; end_of_file
8736: PPOPN 3
8738: END
// export function Action ; begin
8739: LD_INT 0
8741: PPUSH
// CenterNowOnXY ( 28 , 3 ) ;
8742: LD_INT 28
8744: PPUSH
8745: LD_INT 3
8747: PPUSH
8748: CALL_OW 86
// PlaceSeeing ( 41 , 76 , 1 , 10 ) ;
8752: LD_INT 41
8754: PPUSH
8755: LD_INT 76
8757: PPUSH
8758: LD_INT 1
8760: PPUSH
8761: LD_INT 10
8763: PPUSH
8764: CALL_OW 330
// RemoveSeeing ( 41 , 76 , 1 ) ;
8768: LD_INT 41
8770: PPUSH
8771: LD_INT 76
8773: PPUSH
8774: LD_INT 1
8776: PPUSH
8777: CALL_OW 331
// InGameOn ;
8781: CALL_OW 8
// SayRadio ( Harisson , D2-Har-1 ) ;
8785: LD_EXP 19
8789: PPUSH
8790: LD_STRING D2-Har-1
8792: PPUSH
8793: CALL_OW 94
// InGameOff ;
8797: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
8801: LD_STRING M1
8803: PPUSH
8804: CALL_OW 337
// end ;
8808: LD_VAR 0 1
8812: RET
// every 0 0$1 trigger buildings_counter > 1 do var un ;
8813: LD_EXP 4
8817: PUSH
8818: LD_INT 1
8820: GREATER
8821: IFFALSE 8912
8823: GO 8825
8825: DISABLE
8826: LD_INT 0
8828: PPUSH
// begin un := GetRandom ( sex_male ) [ 1 ] ;
8829: LD_ADDR_VAR 0 1
8833: PUSH
8834: LD_INT 1
8836: PPUSH
8837: CALL 608 0 1
8841: PUSH
8842: LD_INT 1
8844: ARRAY
8845: ST_TO_ADDR
// Say ( un , D2a-Sol1-1 ) ;
8846: LD_VAR 0 1
8850: PPUSH
8851: LD_STRING D2a-Sol1-1
8853: PPUSH
8854: CALL_OW 88
// if not un then
8858: LD_VAR 0 1
8862: NOT
8863: IFFALSE 8894
// begin un := GetRandom ( sex_female ) [ 1 ] ;
8865: LD_ADDR_VAR 0 1
8869: PUSH
8870: LD_INT 2
8872: PPUSH
8873: CALL 608 0 1
8877: PUSH
8878: LD_INT 1
8880: ARRAY
8881: ST_TO_ADDR
// Say ( un , D2a-FSol1-1 ) ;
8882: LD_VAR 0 1
8886: PPUSH
8887: LD_STRING D2a-FSol1-1
8889: PPUSH
8890: CALL_OW 88
// end ; if Khatam then
8894: LD_EXP 17
8898: IFFALSE 8912
// Say ( Khatam , D3b-Khat-3 ) ;
8900: LD_EXP 17
8904: PPUSH
8905: LD_STRING D3b-Khat-3
8907: PPUSH
8908: CALL_OW 88
// end ;
8912: PPOPN 1
8914: END
// every 0 0$1 trigger Frank and not Kikuchi and FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , Frank , 7 ] ] ) and IsOk ( Frank ) and not InBattle ( 1 ) and not InBattle ( 4 ) do var i , ape ;
8915: LD_EXP 15
8919: IFFALSE 8928
8921: PUSH
8922: LD_EXP 18
8926: NOT
8927: AND
8928: IFFALSE 8966
8930: PUSH
8931: LD_INT 22
8933: PUSH
8934: LD_INT 1
8936: PUSH
8937: EMPTY
8938: LIST
8939: LIST
8940: PUSH
8941: LD_INT 91
8943: PUSH
8944: LD_EXP 15
8948: PUSH
8949: LD_INT 7
8951: PUSH
8952: EMPTY
8953: LIST
8954: LIST
8955: LIST
8956: PUSH
8957: EMPTY
8958: LIST
8959: LIST
8960: PPUSH
8961: CALL_OW 69
8965: AND
8966: IFFALSE 8979
8968: PUSH
8969: LD_EXP 15
8973: PPUSH
8974: CALL_OW 302
8978: AND
8979: IFFALSE 8991
8981: PUSH
8982: LD_INT 1
8984: PPUSH
8985: CALL_OW 463
8989: NOT
8990: AND
8991: IFFALSE 9003
8993: PUSH
8994: LD_INT 4
8996: PPUSH
8997: CALL_OW 463
9001: NOT
9002: AND
9003: IFFALSE 9590
9005: GO 9007
9007: DISABLE
9008: LD_INT 0
9010: PPUSH
9011: PPUSH
// begin InGameOn ;
9012: CALL_OW 8
// ape := FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) ;
9016: LD_ADDR_VAR 0 2
9020: PUSH
9021: LD_INT 22
9023: PUSH
9024: LD_INT 0
9026: PUSH
9027: EMPTY
9028: LIST
9029: LIST
9030: PUSH
9031: LD_INT 25
9033: PUSH
9034: LD_INT 12
9036: PUSH
9037: EMPTY
9038: LIST
9039: LIST
9040: PUSH
9041: EMPTY
9042: LIST
9043: LIST
9044: PPUSH
9045: CALL_OW 69
9049: ST_TO_ADDR
// ape := NearestUnitToUnit ( ape , Frank ) ;
9050: LD_ADDR_VAR 0 2
9054: PUSH
9055: LD_VAR 0 2
9059: PPUSH
9060: LD_EXP 15
9064: PPUSH
9065: CALL_OW 74
9069: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_dist , Frank , 20 ] ] ) do
9070: LD_ADDR_VAR 0 1
9074: PUSH
9075: LD_INT 22
9077: PUSH
9078: LD_INT 1
9080: PUSH
9081: EMPTY
9082: LIST
9083: LIST
9084: PUSH
9085: LD_INT 21
9087: PUSH
9088: LD_INT 1
9090: PUSH
9091: EMPTY
9092: LIST
9093: LIST
9094: PUSH
9095: LD_INT 91
9097: PUSH
9098: LD_EXP 15
9102: PUSH
9103: LD_INT 20
9105: PUSH
9106: EMPTY
9107: LIST
9108: LIST
9109: LIST
9110: PUSH
9111: EMPTY
9112: LIST
9113: LIST
9114: LIST
9115: PPUSH
9116: CALL_OW 69
9120: PUSH
9121: FOR_IN
9122: IFFALSE 9140
// ComTurnUnit ( i , Frank ) ;
9124: LD_VAR 0 1
9128: PPUSH
9129: LD_EXP 15
9133: PPUSH
9134: CALL_OW 119
9138: GO 9121
9140: POP
9141: POP
// SetSide ( Frank , 1 ) ;
9142: LD_EXP 15
9146: PPUSH
9147: LD_INT 1
9149: PPUSH
9150: CALL_OW 235
// ComMoveUnit ( JMM , Frank ) ;
9154: LD_EXP 9
9158: PPUSH
9159: LD_EXP 15
9163: PPUSH
9164: CALL_OW 112
// AddComTurnUnit ( JMM , Frank ) ;
9168: LD_EXP 9
9172: PPUSH
9173: LD_EXP 15
9177: PPUSH
9178: CALL_OW 179
// CenterOnUnits ( Frank ) ;
9182: LD_EXP 15
9186: PPUSH
9187: CALL_OW 85
// Say ( Frank , D3a-Frank-1 ) ;
9191: LD_EXP 15
9195: PPUSH
9196: LD_STRING D3a-Frank-1
9198: PPUSH
9199: CALL_OW 88
// ComMoveXY ( ape , 42 , 78 ) ;
9203: LD_VAR 0 2
9207: PPUSH
9208: LD_INT 42
9210: PPUSH
9211: LD_INT 78
9213: PPUSH
9214: CALL_OW 111
// AddComTurnUnit ( ape , Frank ) ;
9218: LD_VAR 0 2
9222: PPUSH
9223: LD_EXP 15
9227: PPUSH
9228: CALL_OW 179
// if Lisa then
9232: LD_EXP 14
9236: IFFALSE 9250
// Say ( Lisa , D3a-Lisa-1 ) ;
9238: LD_EXP 14
9242: PPUSH
9243: LD_STRING D3a-Lisa-1
9245: PPUSH
9246: CALL_OW 88
// Say ( JMM , D3a-JMM-1 ) ;
9250: LD_EXP 9
9254: PPUSH
9255: LD_STRING D3a-JMM-1
9257: PPUSH
9258: CALL_OW 88
// if Cyrus then
9262: LD_EXP 13
9266: IFFALSE 9280
// Say ( Cyrus , D3a-Cyrus-1 ) ;
9268: LD_EXP 13
9272: PPUSH
9273: LD_STRING D3a-Cyrus-1
9275: PPUSH
9276: CALL_OW 88
// if GetRandom ( sex_male ) then
9280: LD_INT 1
9282: PPUSH
9283: CALL 608 0 1
9287: IFFALSE 9308
// Say ( GetRandom ( sex_male ) [ 1 ] , D3a-Sol1-1 ) ;
9289: LD_INT 1
9291: PPUSH
9292: CALL 608 0 1
9296: PUSH
9297: LD_INT 1
9299: ARRAY
9300: PPUSH
9301: LD_STRING D3a-Sol1-1
9303: PPUSH
9304: CALL_OW 88
// if GetRandom ( sex_female ) then
9308: LD_INT 2
9310: PPUSH
9311: CALL 608 0 1
9315: IFFALSE 9336
// Say ( GetRandom ( sex_female ) [ 1 ] , D3a-FSol1-1 ) ;
9317: LD_INT 2
9319: PPUSH
9320: CALL 608 0 1
9324: PUSH
9325: LD_INT 1
9327: ARRAY
9328: PPUSH
9329: LD_STRING D3a-FSol1-1
9331: PPUSH
9332: CALL_OW 88
// if Gladstone then
9336: LD_EXP 16
9340: IFFALSE 9354
// Say ( Gladstone , D3a-Glad-1 ) ;
9342: LD_EXP 16
9346: PPUSH
9347: LD_STRING D3a-Glad-1
9349: PPUSH
9350: CALL_OW 88
// ComMoveXY ( ape , 60 , 113 ) ;
9354: LD_VAR 0 2
9358: PPUSH
9359: LD_INT 60
9361: PPUSH
9362: LD_INT 113
9364: PPUSH
9365: CALL_OW 111
// Say ( Frank , D3a-Frank-2 ) ;
9369: LD_EXP 15
9373: PPUSH
9374: LD_STRING D3a-Frank-2
9376: PPUSH
9377: CALL_OW 88
// ComTurnUnit ( Frank , JMM ) ;
9381: LD_EXP 15
9385: PPUSH
9386: LD_EXP 9
9390: PPUSH
9391: CALL_OW 119
// Say ( JMM , D3a-JMM-2 ) ;
9395: LD_EXP 9
9399: PPUSH
9400: LD_STRING D3a-JMM-2
9402: PPUSH
9403: CALL_OW 88
// RevealFogArea ( 1 , spotArea ) ;
9407: LD_INT 1
9409: PPUSH
9410: LD_INT 4
9412: PPUSH
9413: CALL_OW 332
// CenterOnXY ( 85 , 134 ) ;
9417: LD_INT 85
9419: PPUSH
9420: LD_INT 134
9422: PPUSH
9423: CALL_OW 84
// Say ( Frank , D3a-Frank-3 ) ;
9427: LD_EXP 15
9431: PPUSH
9432: LD_STRING D3a-Frank-3
9434: PPUSH
9435: CALL_OW 88
// Wait ( 0 0$01 ) ;
9439: LD_INT 35
9441: PPUSH
9442: CALL_OW 67
// CenterOnXY ( 166 , 136 ) ;
9446: LD_INT 166
9448: PPUSH
9449: LD_INT 136
9451: PPUSH
9452: CALL_OW 84
// Say ( JMM , D3a-JMM-3 ) ;
9456: LD_EXP 9
9460: PPUSH
9461: LD_STRING D3a-JMM-3
9463: PPUSH
9464: CALL_OW 88
// Wait ( 0 0$01 ) ;
9468: LD_INT 35
9470: PPUSH
9471: CALL_OW 67
// CenterNowOnUnits ( Frank ) ;
9475: LD_EXP 15
9479: PPUSH
9480: CALL_OW 87
// Say ( Frank , D3a-Frank-4 ) ;
9484: LD_EXP 15
9488: PPUSH
9489: LD_STRING D3a-Frank-4
9491: PPUSH
9492: CALL_OW 88
// if Lisa then
9496: LD_EXP 14
9500: IFFALSE 9514
// Say ( Lisa , D3a-Lisa-4 ) ;
9502: LD_EXP 14
9506: PPUSH
9507: LD_STRING D3a-Lisa-4
9509: PPUSH
9510: CALL_OW 88
// Say ( JMM , D3a-JMM-4 ) ;
9514: LD_EXP 9
9518: PPUSH
9519: LD_STRING D3a-JMM-4
9521: PPUSH
9522: CALL_OW 88
// Say ( Frank , D3a-Frank-5 ) ;
9526: LD_EXP 15
9530: PPUSH
9531: LD_STRING D3a-Frank-5
9533: PPUSH
9534: CALL_OW 88
// Say ( JMM , D3a-JMM-5 ) ;
9538: LD_EXP 9
9542: PPUSH
9543: LD_STRING D3a-JMM-5
9545: PPUSH
9546: CALL_OW 88
// Say ( Frank , D3a-Frank-6 ) ;
9550: LD_EXP 15
9554: PPUSH
9555: LD_STRING D3a-Frank-6
9557: PPUSH
9558: CALL_OW 88
// Say ( JMM , D3a-JMM-6 ) ;
9562: LD_EXP 9
9566: PPUSH
9567: LD_STRING D3a-JMM-6
9569: PPUSH
9570: CALL_OW 88
// Say ( Frank , D3a-Frank-7 ) ;
9574: LD_EXP 15
9578: PPUSH
9579: LD_STRING D3a-Frank-7
9581: PPUSH
9582: CALL_OW 88
// InGameOff ;
9586: CALL_OW 9
// end ;
9590: PPOPN 2
9592: END
// every 0 0$1 trigger Kikuchi and not Frank and FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , Kikuchi , 7 ] ] ) and IsOk ( Kikuchi ) and not InBattle ( 1 ) and not InBattle ( 4 ) do
9593: LD_EXP 18
9597: IFFALSE 9606
9599: PUSH
9600: LD_EXP 15
9604: NOT
9605: AND
9606: IFFALSE 9644
9608: PUSH
9609: LD_INT 22
9611: PUSH
9612: LD_INT 1
9614: PUSH
9615: EMPTY
9616: LIST
9617: LIST
9618: PUSH
9619: LD_INT 91
9621: PUSH
9622: LD_EXP 18
9626: PUSH
9627: LD_INT 7
9629: PUSH
9630: EMPTY
9631: LIST
9632: LIST
9633: LIST
9634: PUSH
9635: EMPTY
9636: LIST
9637: LIST
9638: PPUSH
9639: CALL_OW 69
9643: AND
9644: IFFALSE 9657
9646: PUSH
9647: LD_EXP 18
9651: PPUSH
9652: CALL_OW 302
9656: AND
9657: IFFALSE 9669
9659: PUSH
9660: LD_INT 1
9662: PPUSH
9663: CALL_OW 463
9667: NOT
9668: AND
9669: IFFALSE 9681
9671: PUSH
9672: LD_INT 4
9674: PPUSH
9675: CALL_OW 463
9679: NOT
9680: AND
9681: IFFALSE 9861
9683: GO 9685
9685: DISABLE
// begin InGameOn ;
9686: CALL_OW 8
// ComTurnUnit ( JMM , Kikuchi ) ;
9690: LD_EXP 9
9694: PPUSH
9695: LD_EXP 18
9699: PPUSH
9700: CALL_OW 119
// ComTurnUnit ( Kikuchi , JMM ) ;
9704: LD_EXP 18
9708: PPUSH
9709: LD_EXP 9
9713: PPUSH
9714: CALL_OW 119
// CenterOnUnits ( Kikuchi ) ;
9718: LD_EXP 18
9722: PPUSH
9723: CALL_OW 85
// Say ( Kikuchi , D3b-Yam-1 ) ;
9727: LD_EXP 18
9731: PPUSH
9732: LD_STRING D3b-Yam-1
9734: PPUSH
9735: CALL_OW 88
// Say ( JMM , D3b-JMM-1 ) ;
9739: LD_EXP 9
9743: PPUSH
9744: LD_STRING D3b-JMM-1
9746: PPUSH
9747: CALL_OW 88
// RevealFogArea ( 1 , spotArea ) ;
9751: LD_INT 1
9753: PPUSH
9754: LD_INT 4
9756: PPUSH
9757: CALL_OW 332
// CenterOnXY ( 85 , 134 ) ;
9761: LD_INT 85
9763: PPUSH
9764: LD_INT 134
9766: PPUSH
9767: CALL_OW 84
// Say ( Kikuchi , D3b-Yam-2 ) ;
9771: LD_EXP 18
9775: PPUSH
9776: LD_STRING D3b-Yam-2
9778: PPUSH
9779: CALL_OW 88
// Wait ( 0 0$01 ) ;
9783: LD_INT 35
9785: PPUSH
9786: CALL_OW 67
// Say ( JMM , D3b-JMM-2 ) ;
9790: LD_EXP 9
9794: PPUSH
9795: LD_STRING D3b-JMM-2
9797: PPUSH
9798: CALL_OW 88
// CenterOnXY ( 166 , 136 ) ;
9802: LD_INT 166
9804: PPUSH
9805: LD_INT 136
9807: PPUSH
9808: CALL_OW 84
// Say ( Kikuchi , D3b-Yam-3 ) ;
9812: LD_EXP 18
9816: PPUSH
9817: LD_STRING D3b-Yam-3
9819: PPUSH
9820: CALL_OW 88
// CenterNowOnUnits ( JMM ) ;
9824: LD_EXP 9
9828: PPUSH
9829: CALL_OW 87
// Say ( JMM , D3b-JMM-3a ) ;
9833: LD_EXP 9
9837: PPUSH
9838: LD_STRING D3b-JMM-3a
9840: PPUSH
9841: CALL_OW 88
// SetSide ( Kikuchi , 1 ) ;
9845: LD_EXP 18
9849: PPUSH
9850: LD_INT 1
9852: PPUSH
9853: CALL_OW 235
// InGameOff ;
9857: CALL_OW 9
// end ;
9861: END
// every 0 0$1 trigger FilterUnitsInArea ( massDamageArea , [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] ] ) do var un , x , tw , i ;
9862: LD_INT 7
9864: PPUSH
9865: LD_INT 22
9867: PUSH
9868: LD_INT 1
9870: PUSH
9871: EMPTY
9872: LIST
9873: LIST
9874: PUSH
9875: LD_INT 3
9877: PUSH
9878: LD_INT 24
9880: PUSH
9881: LD_INT 1000
9883: PUSH
9884: EMPTY
9885: LIST
9886: LIST
9887: PUSH
9888: EMPTY
9889: LIST
9890: LIST
9891: PUSH
9892: EMPTY
9893: LIST
9894: LIST
9895: PPUSH
9896: CALL_OW 70
9900: IFFALSE 10360
9902: GO 9904
9904: DISABLE
9905: LD_INT 0
9907: PPUSH
9908: PPUSH
9909: PPUSH
9910: PPUSH
// begin repeat wait ( 0 0$1 ) ;
9911: LD_INT 35
9913: PPUSH
9914: CALL_OW 67
// un := FilterUnitsInArea ( massDamageArea , [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
9918: LD_ADDR_VAR 0 1
9922: PUSH
9923: LD_INT 7
9925: PPUSH
9926: LD_INT 22
9928: PUSH
9929: LD_INT 1
9931: PUSH
9932: EMPTY
9933: LIST
9934: LIST
9935: PUSH
9936: LD_INT 3
9938: PUSH
9939: LD_INT 24
9941: PUSH
9942: LD_INT 1000
9944: PUSH
9945: EMPTY
9946: LIST
9947: LIST
9948: PUSH
9949: EMPTY
9950: LIST
9951: LIST
9952: PUSH
9953: EMPTY
9954: LIST
9955: LIST
9956: PPUSH
9957: CALL_OW 70
9961: ST_TO_ADDR
// if not un then
9962: LD_VAR 0 1
9966: NOT
9967: IFFALSE 9971
// continue ;
9969: GO 9911
// tw := NearbyTowerHasEnergy ( un [ 1 ] ) ;
9971: LD_ADDR_VAR 0 3
9975: PUSH
9976: LD_VAR 0 1
9980: PUSH
9981: LD_INT 1
9983: ARRAY
9984: PPUSH
9985: CALL 2057 0 1
9989: ST_TO_ADDR
// until tw ;
9990: LD_VAR 0 3
9994: IFFALSE 9911
// DialogueOn ;
9996: CALL_OW 6
// CenterNowOnUnits ( tw ) ;
10000: LD_VAR 0 3
10004: PPUSH
10005: CALL_OW 87
// if Lisa then
10009: LD_EXP 14
10013: IFFALSE 10041
// begin Say ( Lisa , D5-Lisa-1 ) ;
10015: LD_EXP 14
10019: PPUSH
10020: LD_STRING D5-Lisa-1
10022: PPUSH
10023: CALL_OW 88
// Say ( JMM , D5-JMM-1a ) ;
10027: LD_EXP 9
10031: PPUSH
10032: LD_STRING D5-JMM-1a
10034: PPUSH
10035: CALL_OW 88
// end else
10039: GO 10053
// Say ( JMM , D5-JMM-1 ) ;
10041: LD_EXP 9
10045: PPUSH
10046: LD_STRING D5-JMM-1
10048: PPUSH
10049: CALL_OW 88
// DialogueOff ;
10053: CALL_OW 7
// while ( true ) do
10057: LD_INT 1
10059: IFFALSE 10115
// begin wait ( 0 0$01 ) ;
10061: LD_INT 35
10063: PPUSH
10064: CALL_OW 67
// x := FilterUnitsExceptArea ( northElectro , [ [ f_btype , b_oil_power ] , [ f_see , 1 ] ] ) ;
10068: LD_ADDR_VAR 0 2
10072: PUSH
10073: LD_INT 8
10075: PPUSH
10076: LD_INT 30
10078: PUSH
10079: LD_INT 26
10081: PUSH
10082: EMPTY
10083: LIST
10084: LIST
10085: PUSH
10086: LD_INT 101
10088: PUSH
10089: LD_INT 1
10091: PUSH
10092: EMPTY
10093: LIST
10094: LIST
10095: PUSH
10096: EMPTY
10097: LIST
10098: LIST
10099: PPUSH
10100: CALL_OW 71
10104: ST_TO_ADDR
// if x then
10105: LD_VAR 0 2
10109: IFFALSE 10113
// break ;
10111: GO 10115
// end ;
10113: GO 10057
// CenterOnUnits ( x [ 1 ] ) ;
10115: LD_VAR 0 2
10119: PUSH
10120: LD_INT 1
10122: ARRAY
10123: PPUSH
10124: CALL_OW 85
// if Frank and GetSide ( Frank ) = 1 then
10128: LD_EXP 15
10132: IFFALSE 10149
10134: PUSH
10135: LD_EXP 15
10139: PPUSH
10140: CALL_OW 255
10144: PUSH
10145: LD_INT 1
10147: EQUAL
10148: AND
10149: IFFALSE 10165
// Say ( Frank , D5a-Frank-1 ) else
10151: LD_EXP 15
10155: PPUSH
10156: LD_STRING D5a-Frank-1
10158: PPUSH
10159: CALL_OW 88
10163: GO 10221
// if Kikuchi and GetSide ( Kikuchi ) = 1 then
10165: LD_EXP 18
10169: IFFALSE 10186
10171: PUSH
10172: LD_EXP 18
10176: PPUSH
10177: CALL_OW 255
10181: PUSH
10182: LD_INT 1
10184: EQUAL
10185: AND
10186: IFFALSE 10202
// Say ( Kikuchi , D5a-Yam-1 ) else
10188: LD_EXP 18
10192: PPUSH
10193: LD_STRING D5a-Yam-1
10195: PPUSH
10196: CALL_OW 88
10200: GO 10221
// Say ( GetRandom ( sex_male ) [ 1 ] , D5a-Sol1-1 ) ;
10202: LD_INT 1
10204: PPUSH
10205: CALL 608 0 1
10209: PUSH
10210: LD_INT 1
10212: ARRAY
10213: PPUSH
10214: LD_STRING D5a-Sol1-1
10216: PPUSH
10217: CALL_OW 88
// Say ( JMM , D5a-JMM-1 ) ;
10221: LD_EXP 9
10225: PPUSH
10226: LD_STRING D5a-JMM-1
10228: PPUSH
10229: CALL_OW 88
// if Cyrus then
10233: LD_EXP 13
10237: IFFALSE 10251
// Say ( Cyrus , D5a-Cyrus-1 ) ;
10239: LD_EXP 13
10243: PPUSH
10244: LD_STRING D5a-Cyrus-1
10246: PPUSH
10247: CALL_OW 88
// x := false ;
10251: LD_ADDR_VAR 0 2
10255: PUSH
10256: LD_INT 0
10258: ST_TO_ADDR
// while ( true ) do
10259: LD_INT 1
10261: IFFALSE 10348
// begin wait ( 0 0$01 ) ;
10263: LD_INT 35
10265: PPUSH
10266: CALL_OW 67
// for i in FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) diff ru_dep_west do
10270: LD_ADDR_VAR 0 4
10274: PUSH
10275: LD_INT 2
10277: PUSH
10278: LD_INT 30
10280: PUSH
10281: LD_INT 0
10283: PUSH
10284: EMPTY
10285: LIST
10286: LIST
10287: PUSH
10288: LD_INT 30
10290: PUSH
10291: LD_INT 1
10293: PUSH
10294: EMPTY
10295: LIST
10296: LIST
10297: PUSH
10298: EMPTY
10299: LIST
10300: LIST
10301: LIST
10302: PPUSH
10303: CALL_OW 69
10307: PUSH
10308: LD_INT 1
10310: DIFF
10311: PUSH
10312: FOR_IN
10313: IFFALSE 10336
// if BaseNeedEnergy ( i ) then
10315: LD_VAR 0 4
10319: PPUSH
10320: CALL 1182 0 1
10324: IFFALSE 10334
// x := true ;
10326: LD_ADDR_VAR 0 2
10330: PUSH
10331: LD_INT 1
10333: ST_TO_ADDR
10334: GO 10312
10336: POP
10337: POP
// if x then
10338: LD_VAR 0 2
10342: IFFALSE 10346
// break ;
10344: GO 10348
// end ;
10346: GO 10259
// Say ( JMM , D5b-JMM-1 ) ;
10348: LD_EXP 9
10352: PPUSH
10353: LD_STRING D5b-JMM-1
10355: PPUSH
10356: CALL_OW 88
// end ;
10360: PPOPN 4
10362: END
// every 0 0$1 trigger time_to_end [ 1 ] < tick or FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) < 10 do
10363: LD_EXP 5
10367: PUSH
10368: LD_INT 1
10370: ARRAY
10371: PUSH
10372: LD_OWVAR 1
10376: LESS
10377: IFTRUE 10413
10379: PUSH
10380: LD_INT 22
10382: PUSH
10383: LD_INT 3
10385: PUSH
10386: EMPTY
10387: LIST
10388: LIST
10389: PUSH
10390: LD_INT 21
10392: PUSH
10393: LD_INT 3
10395: PUSH
10396: EMPTY
10397: LIST
10398: LIST
10399: PUSH
10400: EMPTY
10401: LIST
10402: LIST
10403: PPUSH
10404: CALL_OW 69
10408: PUSH
10409: LD_INT 10
10411: LESS
10412: OR
10413: IFFALSE 10617
10415: GO 10417
10417: DISABLE
// begin if not IsDead ( ru_dep_main ) then
10418: LD_INT 16
10420: PPUSH
10421: CALL_OW 301
10425: NOT
10426: IFFALSE 10449
// begin SayRadio ( Harisson , D3b-Har-3 ) ;
10428: LD_EXP 19
10432: PPUSH
10433: LD_STRING D3b-Har-3
10435: PPUSH
10436: CALL_OW 94
// ChangeMissionObjectives ( M2a ) ;
10440: LD_STRING M2a
10442: PPUSH
10443: CALL_OW 337
// end else
10447: GO 10468
// begin SayRadio ( Harisson , D3b-Har-3a ) ;
10449: LD_EXP 19
10453: PPUSH
10454: LD_STRING D3b-Har-3a
10456: PPUSH
10457: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
10461: LD_STRING M2
10463: PPUSH
10464: CALL_OW 337
// end ; can_end := true ;
10468: LD_ADDR_EXP 6
10472: PUSH
10473: LD_INT 1
10475: ST_TO_ADDR
// SetAreaMapShow ( endArea , 1 ) ;
10476: LD_INT 9
10478: PPUSH
10479: LD_INT 1
10481: PPUSH
10482: CALL_OW 424
// Wait ( 0 0$02 ) ;
10486: LD_INT 70
10488: PPUSH
10489: CALL_OW 67
// if Lisa then
10493: LD_EXP 14
10497: IFFALSE 10511
// Say ( Lisa , D3b-Lisa ) ;
10499: LD_EXP 14
10503: PPUSH
10504: LD_STRING D3b-Lisa
10506: PPUSH
10507: CALL_OW 88
// if Bobby then
10511: LD_EXP 12
10515: IFFALSE 10529
// Say ( Bobby , D3b-Bobby-3 ) ;
10517: LD_EXP 12
10521: PPUSH
10522: LD_STRING D3b-Bobby-3
10524: PPUSH
10525: CALL_OW 88
// if Cyrus then
10529: LD_EXP 13
10533: IFFALSE 10547
// Say ( Cyrus , D3b-Cyrus-3 ) ;
10535: LD_EXP 13
10539: PPUSH
10540: LD_STRING D3b-Cyrus-3
10542: PPUSH
10543: CALL_OW 88
// if Frank and GetSide ( Frank ) = 1 then
10547: LD_EXP 15
10551: IFFALSE 10568
10553: PUSH
10554: LD_EXP 15
10558: PPUSH
10559: CALL_OW 255
10563: PUSH
10564: LD_INT 1
10566: EQUAL
10567: AND
10568: IFFALSE 10582
// Say ( Frank , D3b-Frank-3 ) ;
10570: LD_EXP 15
10574: PPUSH
10575: LD_STRING D3b-Frank-3
10577: PPUSH
10578: CALL_OW 88
// if Kikuchi and GetSide ( Kikuchi ) = 1 then
10582: LD_EXP 18
10586: IFFALSE 10603
10588: PUSH
10589: LD_EXP 18
10593: PPUSH
10594: CALL_OW 255
10598: PUSH
10599: LD_INT 1
10601: EQUAL
10602: AND
10603: IFFALSE 10617
// Say ( Kikuchi , D3b-Yam-4 ) ;
10605: LD_EXP 18
10609: PPUSH
10610: LD_STRING D3b-Yam-4
10612: PPUSH
10613: CALL_OW 88
// end ;
10617: END
// every 0 0$1 trigger time_to_end [ 2 ] < tick do
10618: LD_EXP 5
10622: PUSH
10623: LD_INT 2
10625: ARRAY
10626: PUSH
10627: LD_OWVAR 1
10631: LESS
10632: IFFALSE 10664
10634: GO 10636
10636: DISABLE
// begin SayRadio ( Harisson , D4-Har-1 ) ;
10637: LD_EXP 19
10641: PPUSH
10642: LD_STRING D4-Har-1
10644: PPUSH
10645: CALL_OW 94
// ChangeMissionObjectives ( M3 ) ;
10649: LD_STRING M3
10651: PPUSH
10652: CALL_OW 337
// must_end := true ;
10656: LD_ADDR_EXP 7
10660: PUSH
10661: LD_INT 1
10663: ST_TO_ADDR
// end ;
10664: END
// every 0 0$01 trigger time_to_end [ 3 ] < tick do
10665: LD_EXP 5
10669: PUSH
10670: LD_INT 3
10672: ARRAY
10673: PUSH
10674: LD_OWVAR 1
10678: LESS
10679: IFFALSE 10710
10681: GO 10683
10683: DISABLE
// begin if not IsDead ( ru_dep_main ) then
10684: LD_INT 16
10686: PPUSH
10687: CALL_OW 301
10691: NOT
10692: IFFALSE 10703
// YouLost ( TimeOut1 ) else
10694: LD_STRING TimeOut1
10696: PPUSH
10697: CALL_OW 104
10701: GO 10710
// YouLost ( TimeOut2 ) ;
10703: LD_STRING TimeOut2
10705: PPUSH
10706: CALL_OW 104
// end ;
10710: END
// every 0 0$1 trigger IsInArea ( JMM , endArea ) and can_end do var wait_on , i , tmp , m1 , m2 , m3 ;
10711: LD_EXP 9
10715: PPUSH
10716: LD_INT 9
10718: PPUSH
10719: CALL_OW 308
10723: IFFALSE 10731
10725: PUSH
10726: LD_EXP 6
10730: AND
10731: IFFALSE 11898
10733: GO 10735
10735: DISABLE
10736: LD_INT 0
10738: PPUSH
10739: PPUSH
10740: PPUSH
10741: PPUSH
10742: PPUSH
10743: PPUSH
// begin if Count ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_ok ] ] ) ) < 5 then
10744: LD_INT 22
10746: PUSH
10747: LD_INT 1
10749: PUSH
10750: EMPTY
10751: LIST
10752: LIST
10753: PUSH
10754: LD_INT 21
10756: PUSH
10757: LD_INT 1
10759: PUSH
10760: EMPTY
10761: LIST
10762: LIST
10763: PUSH
10764: LD_INT 23
10766: PUSH
10767: LD_INT 1
10769: PUSH
10770: EMPTY
10771: LIST
10772: LIST
10773: PUSH
10774: LD_INT 50
10776: PUSH
10777: EMPTY
10778: LIST
10779: PUSH
10780: EMPTY
10781: LIST
10782: LIST
10783: LIST
10784: LIST
10785: PPUSH
10786: CALL_OW 69
10790: PPUSH
10791: CALL 37196 0 1
10795: PUSH
10796: LD_INT 5
10798: LESS
10799: IFFALSE 10810
// begin YouLost ( LostVictory ) ;
10801: LD_STRING LostVictory
10803: PPUSH
10804: CALL_OW 104
// exit ;
10808: GO 11898
// end ; wait_on := false ;
10810: LD_ADDR_VAR 0 1
10814: PUSH
10815: LD_INT 0
10817: ST_TO_ADDR
// if Count ( FilterPeople ( 1 ) ) > Count ( FilterPeopleArea ( 1 , endArea ) ^ FilterDriversArea ( 1 , endArea ) ) then
10818: LD_INT 1
10820: PPUSH
10821: CALL 1259 0 1
10825: PPUSH
10826: CALL 37196 0 1
10830: PUSH
10831: LD_INT 1
10833: PPUSH
10834: LD_INT 9
10836: PPUSH
10837: CALL 1350 0 2
10841: PUSH
10842: LD_INT 1
10844: PPUSH
10845: LD_INT 9
10847: PPUSH
10848: CALL 1397 0 2
10852: ADD
10853: PPUSH
10854: CALL 37196 0 1
10858: GREATER
10859: IFFALSE 10882
// if Query ( Q1 ) = 1 then
10861: LD_STRING Q1
10863: PPUSH
10864: CALL_OW 97
10868: PUSH
10869: LD_INT 1
10871: EQUAL
10872: IFFALSE 10882
// wait_on := true ;
10874: LD_ADDR_VAR 0 1
10878: PUSH
10879: LD_INT 1
10881: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
10882: LD_INT 35
10884: PPUSH
10885: CALL_OW 67
// until Count ( FilterPeople ( 1 ) ) = Count ( FilterPeopleArea ( 1 , endArea ) union FilterDriversArea ( 1 , endArea ) ) ;
10889: LD_INT 1
10891: PPUSH
10892: CALL 1259 0 1
10896: PPUSH
10897: CALL 37196 0 1
10901: PUSH
10902: LD_INT 1
10904: PPUSH
10905: LD_INT 9
10907: PPUSH
10908: CALL 1350 0 2
10912: PUSH
10913: LD_INT 1
10915: PPUSH
10916: LD_INT 9
10918: PPUSH
10919: CALL 1397 0 2
10923: UNION
10924: PPUSH
10925: CALL 37196 0 1
10929: EQUAL
10930: IFFALSE 10882
// DialogueOn ;
10932: CALL_OW 6
// CenterNowOnUnits ( JMM ) ;
10936: LD_EXP 9
10940: PPUSH
10941: CALL_OW 87
// Say ( JMM , D6-JMM-1 ) ;
10945: LD_EXP 9
10949: PPUSH
10950: LD_STRING D6-JMM-1
10952: PPUSH
10953: CALL_OW 88
// SayRadio ( Harisson , D6-Har-1 ) ;
10957: LD_EXP 19
10961: PPUSH
10962: LD_STRING D6-Har-1
10964: PPUSH
10965: CALL_OW 94
// Say ( JMM , D6-JMM-2 ) ;
10969: LD_EXP 9
10973: PPUSH
10974: LD_STRING D6-JMM-2
10976: PPUSH
10977: CALL_OW 88
// SayRadio ( Harisson , D6-Har-2 ) ;
10981: LD_EXP 19
10985: PPUSH
10986: LD_STRING D6-Har-2
10988: PPUSH
10989: CALL_OW 94
// Say ( JMM , D6-JMM-3 ) ;
10993: LD_EXP 9
10997: PPUSH
10998: LD_STRING D6-JMM-3
11000: PPUSH
11001: CALL_OW 88
// SayRadio ( Harisson , D6-Har-3 ) ;
11005: LD_EXP 19
11009: PPUSH
11010: LD_STRING D6-Har-3
11012: PPUSH
11013: CALL_OW 94
// Say ( JMM , D6-JMM-4 ) ;
11017: LD_EXP 9
11021: PPUSH
11022: LD_STRING D6-JMM-4
11024: PPUSH
11025: CALL_OW 88
// SayRadio ( Harisson , D6-Har-4 ) ;
11029: LD_EXP 19
11033: PPUSH
11034: LD_STRING D6-Har-4
11036: PPUSH
11037: CALL_OW 94
// Say ( JMM , D6-JMM-5 ) ;
11041: LD_EXP 9
11045: PPUSH
11046: LD_STRING D6-JMM-5
11048: PPUSH
11049: CALL_OW 88
// DialogueOff ;
11053: CALL_OW 7
// m1 := false ;
11057: LD_ADDR_VAR 0 4
11061: PUSH
11062: LD_INT 0
11064: ST_TO_ADDR
// m2 := false ;
11065: LD_ADDR_VAR 0 5
11069: PUSH
11070: LD_INT 0
11072: ST_TO_ADDR
// m3 := false ;
11073: LD_ADDR_VAR 0 6
11077: PUSH
11078: LD_INT 0
11080: ST_TO_ADDR
// tmp := FilterBuildings ( 3 ) ;
11081: LD_ADDR_VAR 0 3
11085: PUSH
11086: LD_INT 3
11088: PPUSH
11089: CALL 1528 0 1
11093: ST_TO_ADDR
// if tmp >= 35 then
11094: LD_VAR 0 3
11098: PUSH
11099: LD_INT 35
11101: GREATEREQUAL
11102: IFFALSE 11139
// begin AddMedal ( Destroy1 , - 1 ) ;
11104: LD_STRING Destroy1
11106: PPUSH
11107: LD_INT 1
11109: NEG
11110: PPUSH
11111: CALL_OW 101
// AddMedal ( Destroy2 , - 1 ) ;
11115: LD_STRING Destroy2
11117: PPUSH
11118: LD_INT 1
11120: NEG
11121: PPUSH
11122: CALL_OW 101
// AddMedal ( Destroy3 , - 1 ) ;
11126: LD_STRING Destroy3
11128: PPUSH
11129: LD_INT 1
11131: NEG
11132: PPUSH
11133: CALL_OW 101
// end else
11137: GO 11250
// begin AddMedal ( Destroy1 , 1 ) ;
11139: LD_STRING Destroy1
11141: PPUSH
11142: LD_INT 1
11144: PPUSH
11145: CALL_OW 101
// m1 := true ;
11149: LD_ADDR_VAR 0 4
11153: PUSH
11154: LD_INT 1
11156: ST_TO_ADDR
// if tmp >= 25 then
11157: LD_VAR 0 3
11161: PUSH
11162: LD_INT 25
11164: GREATEREQUAL
11165: IFFALSE 11191
// begin AddMedal ( Destroy2 , - 1 ) ;
11167: LD_STRING Destroy2
11169: PPUSH
11170: LD_INT 1
11172: NEG
11173: PPUSH
11174: CALL_OW 101
// AddMedal ( Destroy3 , - 1 ) ;
11178: LD_STRING Destroy3
11180: PPUSH
11181: LD_INT 1
11183: NEG
11184: PPUSH
11185: CALL_OW 101
// end else
11189: GO 11250
// begin AddMedal ( Destroy2 , 1 ) ;
11191: LD_STRING Destroy2
11193: PPUSH
11194: LD_INT 1
11196: PPUSH
11197: CALL_OW 101
// m2 := true ;
11201: LD_ADDR_VAR 0 5
11205: PUSH
11206: LD_INT 1
11208: ST_TO_ADDR
// if tmp >= 15 then
11209: LD_VAR 0 3
11213: PUSH
11214: LD_INT 15
11216: GREATEREQUAL
11217: IFFALSE 11232
// AddMedal ( Destroy3 , - 1 ) else
11219: LD_STRING Destroy3
11221: PPUSH
11222: LD_INT 1
11224: NEG
11225: PPUSH
11226: CALL_OW 101
11230: GO 11250
// begin AddMedal ( Destroy3 , 1 ) ;
11232: LD_STRING Destroy3
11234: PPUSH
11235: LD_INT 1
11237: PPUSH
11238: CALL_OW 101
// m3 := true ;
11242: LD_ADDR_VAR 0 6
11246: PUSH
11247: LD_INT 1
11249: ST_TO_ADDR
// end ; end ; end ; if tick <= 32 32$00 then
11250: LD_OWVAR 1
11254: PUSH
11255: LD_INT 67200
11257: LESSEQUAL
11258: IFFALSE 11267
// SetAchievement ( ACH_ASPEED_7 ) ;
11260: LD_STRING ACH_ASPEED_7
11262: PPUSH
11263: CALL_OW 543
// if m1 and m2 and m3 and Difficulty >= 3 then
11267: LD_VAR 0 4
11271: IFFALSE 11279
11273: PUSH
11274: LD_VAR 0 5
11278: AND
11279: IFFALSE 11287
11281: PUSH
11282: LD_VAR 0 6
11286: AND
11287: IFFALSE 11299
11289: PUSH
11290: LD_OWVAR 67
11294: PUSH
11295: LD_INT 3
11297: GREATEREQUAL
11298: AND
11299: IFFALSE 11311
// SetAchievementEX ( ACH_AMER , 7 ) ;
11301: LD_STRING ACH_AMER
11303: PPUSH
11304: LD_INT 7
11306: PPUSH
11307: CALL_OW 564
// GiveMedals ( MAIN ) ;
11311: LD_STRING MAIN
11313: PPUSH
11314: CALL_OW 102
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] ] ) ;
11318: LD_ADDR_VAR 0 3
11322: PUSH
11323: LD_INT 22
11325: PUSH
11326: LD_INT 1
11328: PUSH
11329: EMPTY
11330: LIST
11331: LIST
11332: PUSH
11333: LD_INT 23
11335: PUSH
11336: LD_INT 1
11338: PUSH
11339: EMPTY
11340: LIST
11341: LIST
11342: PUSH
11343: EMPTY
11344: LIST
11345: LIST
11346: PPUSH
11347: CALL_OW 69
11351: ST_TO_ADDR
// RewardPeople ( tmp ) ;
11352: LD_VAR 0 3
11356: PPUSH
11357: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
11361: LD_EXP 9
11365: PPUSH
11366: LD_EXP 3
11370: PUSH
11371: LD_STRING JMM
11373: STR
11374: PPUSH
11375: CALL_OW 38
// if Brown in tmp then
11379: LD_EXP 10
11383: PUSH
11384: LD_VAR 0 3
11388: IN
11389: IFFALSE 11409
// SaveCharacters ( Brown , mission_prefix & Brown ) ;
11391: LD_EXP 10
11395: PPUSH
11396: LD_EXP 3
11400: PUSH
11401: LD_STRING Brown
11403: STR
11404: PPUSH
11405: CALL_OW 38
// if Donaldson in tmp then
11409: LD_EXP 11
11413: PUSH
11414: LD_VAR 0 3
11418: IN
11419: IFFALSE 11439
// SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
11421: LD_EXP 11
11425: PPUSH
11426: LD_EXP 3
11430: PUSH
11431: LD_STRING Donaldson
11433: STR
11434: PPUSH
11435: CALL_OW 38
// if Bobby in tmp then
11439: LD_EXP 12
11443: PUSH
11444: LD_VAR 0 3
11448: IN
11449: IFFALSE 11469
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
11451: LD_EXP 12
11455: PPUSH
11456: LD_EXP 3
11460: PUSH
11461: LD_STRING Bobby
11463: STR
11464: PPUSH
11465: CALL_OW 38
// if Cyrus in tmp then
11469: LD_EXP 13
11473: PUSH
11474: LD_VAR 0 3
11478: IN
11479: IFFALSE 11499
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
11481: LD_EXP 13
11485: PPUSH
11486: LD_EXP 3
11490: PUSH
11491: LD_STRING Cyrus
11493: STR
11494: PPUSH
11495: CALL_OW 38
// if Lisa in tmp then
11499: LD_EXP 14
11503: PUSH
11504: LD_VAR 0 3
11508: IN
11509: IFFALSE 11529
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
11511: LD_EXP 14
11515: PPUSH
11516: LD_EXP 3
11520: PUSH
11521: LD_STRING Lisa
11523: STR
11524: PPUSH
11525: CALL_OW 38
// if Frank in tmp then
11529: LD_EXP 15
11533: PUSH
11534: LD_VAR 0 3
11538: IN
11539: IFFALSE 11559
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
11541: LD_EXP 15
11545: PPUSH
11546: LD_EXP 3
11550: PUSH
11551: LD_STRING Frank
11553: STR
11554: PPUSH
11555: CALL_OW 38
// if Gladstone in tmp then
11559: LD_EXP 16
11563: PUSH
11564: LD_VAR 0 3
11568: IN
11569: IFFALSE 11589
// SaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
11571: LD_EXP 16
11575: PPUSH
11576: LD_EXP 3
11580: PUSH
11581: LD_STRING Gladstone
11583: STR
11584: PPUSH
11585: CALL_OW 38
// if Khatam in tmp then
11589: LD_EXP 17
11593: PUSH
11594: LD_VAR 0 3
11598: IN
11599: IFFALSE 11619
// SaveCharacters ( Khatam , mission_prefix & Khatam ) ;
11601: LD_EXP 17
11605: PPUSH
11606: LD_EXP 3
11610: PUSH
11611: LD_STRING Khatam
11613: STR
11614: PPUSH
11615: CALL_OW 38
// if Kikuchi in tmp then
11619: LD_EXP 18
11623: PUSH
11624: LD_VAR 0 3
11628: IN
11629: IFFALSE 11656
// begin ToLua ( enableBioCharacter(BIO_YAMO) ) ;
11631: LD_STRING enableBioCharacter(BIO_YAMO)
11633: PPUSH
11634: CALL_OW 559
// SaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
11638: LD_EXP 18
11642: PPUSH
11643: LD_EXP 3
11647: PUSH
11648: LD_STRING Kikuchi
11650: STR
11651: PPUSH
11652: CALL_OW 38
// end ; SaveCharacters ( tmp diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam ] , mission_prefix & others ) ;
11656: LD_VAR 0 3
11660: PUSH
11661: LD_EXP 9
11665: PUSH
11666: LD_EXP 10
11670: PUSH
11671: LD_EXP 11
11675: PUSH
11676: LD_EXP 12
11680: PUSH
11681: LD_EXP 13
11685: PUSH
11686: LD_EXP 14
11690: PUSH
11691: LD_EXP 15
11695: PUSH
11696: LD_EXP 16
11700: PUSH
11701: LD_EXP 18
11705: PUSH
11706: LD_EXP 17
11710: PUSH
11711: EMPTY
11712: LIST
11713: LIST
11714: LIST
11715: LIST
11716: LIST
11717: LIST
11718: LIST
11719: LIST
11720: LIST
11721: LIST
11722: DIFF
11723: PPUSH
11724: LD_EXP 3
11728: PUSH
11729: LD_STRING others
11731: STR
11732: PPUSH
11733: CALL_OW 38
// SaveVariable ( tick , 07_time ) ;
11737: LD_OWVAR 1
11741: PPUSH
11742: LD_STRING 07_time
11744: PPUSH
11745: CALL_OW 39
// tmp := [ ] ;
11749: LD_ADDR_VAR 0 3
11753: PUSH
11754: EMPTY
11755: ST_TO_ADDR
// for i in FilterUnitsInArea ( endArea , [ [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_vehicle ] , [ f_ok ] ] ] ) do
11756: LD_ADDR_VAR 0 2
11760: PUSH
11761: LD_INT 9
11763: PPUSH
11764: LD_INT 22
11766: PUSH
11767: LD_INT 1
11769: PUSH
11770: EMPTY
11771: LIST
11772: LIST
11773: PUSH
11774: LD_INT 23
11776: PUSH
11777: LD_INT 1
11779: PUSH
11780: EMPTY
11781: LIST
11782: LIST
11783: PUSH
11784: LD_INT 21
11786: PUSH
11787: LD_INT 2
11789: PUSH
11790: EMPTY
11791: LIST
11792: LIST
11793: PUSH
11794: LD_INT 50
11796: PUSH
11797: EMPTY
11798: LIST
11799: PUSH
11800: EMPTY
11801: LIST
11802: LIST
11803: LIST
11804: LIST
11805: PUSH
11806: EMPTY
11807: LIST
11808: PPUSH
11809: CALL_OW 70
11813: PUSH
11814: FOR_IN
11815: IFFALSE 11880
// tmp := Join ( tmp , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ) ;
11817: LD_ADDR_VAR 0 3
11821: PUSH
11822: LD_VAR 0 3
11826: PPUSH
11827: LD_VAR 0 2
11831: PPUSH
11832: CALL_OW 265
11836: PUSH
11837: LD_VAR 0 2
11841: PPUSH
11842: CALL_OW 262
11846: PUSH
11847: LD_VAR 0 2
11851: PPUSH
11852: CALL_OW 263
11856: PUSH
11857: LD_VAR 0 2
11861: PPUSH
11862: CALL_OW 264
11866: PUSH
11867: EMPTY
11868: LIST
11869: LIST
11870: LIST
11871: LIST
11872: PPUSH
11873: CALL 73172 0 2
11877: ST_TO_ADDR
11878: GO 11814
11880: POP
11881: POP
// SaveVariable ( tmp , 07_vehicles ) ;
11882: LD_VAR 0 3
11886: PPUSH
11887: LD_STRING 07_vehicles
11889: PPUSH
11890: CALL_OW 39
// YouWin ;
11894: CALL_OW 103
// end ; end_of_file
11898: PPOPN 6
11900: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
11901: LD_VAR 0 1
11905: PPUSH
11906: CALL 28498 0 1
// if un = JMM then
11910: LD_VAR 0 1
11914: PUSH
11915: LD_EXP 9
11919: EQUAL
11920: IFFALSE 11929
// YouLost ( JMM ) ;
11922: LD_STRING JMM
11924: PPUSH
11925: CALL_OW 104
// if GetType ( un ) = unit_building then
11929: LD_VAR 0 1
11933: PPUSH
11934: CALL_OW 247
11938: PUSH
11939: LD_INT 3
11941: EQUAL
11942: IFFALSE 11958
// buildings_counter := buildings_counter + 1 ;
11944: LD_ADDR_EXP 4
11948: PUSH
11949: LD_EXP 4
11953: PUSH
11954: LD_INT 1
11956: PLUS
11957: ST_TO_ADDR
// if un in FilterUnitsInArea ( baseArea , [ f_or , [ f_btype , b_turret ] , [ f_btype , b_bunker ] ] ) then
11958: LD_VAR 0 1
11962: PUSH
11963: LD_INT 6
11965: PPUSH
11966: LD_INT 2
11968: PUSH
11969: LD_INT 30
11971: PUSH
11972: LD_INT 33
11974: PUSH
11975: EMPTY
11976: LIST
11977: LIST
11978: PUSH
11979: LD_INT 30
11981: PUSH
11982: LD_INT 32
11984: PUSH
11985: EMPTY
11986: LIST
11987: LIST
11988: PUSH
11989: EMPTY
11990: LIST
11991: LIST
11992: LIST
11993: PPUSH
11994: CALL_OW 70
11998: IN
11999: IFFALSE 12058
// ru_rebuild_list := ru_rebuild_list ^ [ GetBType ( un ) , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ;
12001: LD_ADDR_EXP 20
12005: PUSH
12006: LD_EXP 20
12010: PUSH
12011: LD_VAR 0 1
12015: PPUSH
12016: CALL_OW 266
12020: PUSH
12021: LD_VAR 0 1
12025: PPUSH
12026: CALL_OW 250
12030: PUSH
12031: LD_VAR 0 1
12035: PPUSH
12036: CALL_OW 251
12040: PUSH
12041: LD_VAR 0 1
12045: PPUSH
12046: CALL_OW 254
12050: PUSH
12051: EMPTY
12052: LIST
12053: LIST
12054: LIST
12055: LIST
12056: ADD
12057: ST_TO_ADDR
// if un = ru_dep_main then
12058: LD_VAR 0 1
12062: PUSH
12063: LD_INT 16
12065: EQUAL
12066: IFFALSE 12075
// ChangeMissionObjectives ( M1a ) ;
12068: LD_STRING M1a
12070: PPUSH
12071: CALL_OW 337
// if GetType ( un ) = unit_human and GetSide ( un ) = 3 then
12075: LD_VAR 0 1
12079: PPUSH
12080: CALL_OW 247
12084: PUSH
12085: LD_INT 1
12087: EQUAL
12088: IFFALSE 12105
12090: PUSH
12091: LD_VAR 0 1
12095: PPUSH
12096: CALL_OW 255
12100: PUSH
12101: LD_INT 3
12103: EQUAL
12104: AND
12105: IFFALSE 12121
// kill_counter := kill_counter + 1 ;
12107: LD_ADDR_EXP 8
12111: PUSH
12112: LD_EXP 8
12116: PUSH
12117: LD_INT 1
12119: PLUS
12120: ST_TO_ADDR
// end ;
12121: PPOPN 1
12123: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
12124: LD_VAR 0 1
12128: PPUSH
12129: LD_VAR 0 2
12133: PPUSH
12134: CALL 28556 0 2
// end ;
12138: PPOPN 2
12140: END
// on UnitGoesToRed ( un ) do begin if GetBType ( un ) = b_bunker and GetTag ( un ) = 7 then
12141: LD_VAR 0 1
12145: PPUSH
12146: CALL_OW 266
12150: PUSH
12151: LD_INT 32
12153: EQUAL
12154: IFFALSE 12171
12156: PUSH
12157: LD_VAR 0 1
12161: PPUSH
12162: CALL_OW 110
12166: PUSH
12167: LD_INT 7
12169: EQUAL
12170: AND
12171: IFFALSE 12185
// SetTag ( un , 0 ) ;
12173: LD_VAR 0 1
12177: PPUSH
12178: LD_INT 0
12180: PPUSH
12181: CALL_OW 109
// end ;
12185: PPOPN 1
12187: END
// on BuildingStarted ( b , builder ) do var i ;
12188: LD_INT 0
12190: PPUSH
// begin if GetSide ( b ) = 3 then
12191: LD_VAR 0 1
12195: PPUSH
12196: CALL_OW 255
12200: PUSH
12201: LD_INT 3
12203: EQUAL
12204: IFFALSE 12244
// for i = 1 to 4 do
12206: LD_ADDR_VAR 0 3
12210: PUSH
12211: DOUBLE
12212: LD_INT 1
12214: DEC
12215: ST_TO_ADDR
12216: LD_INT 4
12218: PUSH
12219: FOR_TO
12220: IFFALSE 12242
// ru_rebuild_list := Delete ( ru_rebuild_list , 1 ) ;
12222: LD_ADDR_EXP 20
12226: PUSH
12227: LD_EXP 20
12231: PPUSH
12232: LD_INT 1
12234: PPUSH
12235: CALL_OW 3
12239: ST_TO_ADDR
12240: GO 12219
12242: POP
12243: POP
// end ;
12244: PPOPN 3
12246: END
// on BuildingComplete ( b ) do if GetBType ( b ) in [ b_bunker , b_turret ] then
12247: LD_VAR 0 1
12251: PPUSH
12252: CALL_OW 266
12256: PUSH
12257: LD_INT 32
12259: PUSH
12260: LD_INT 33
12262: PUSH
12263: EMPTY
12264: LIST
12265: LIST
12266: IN
12267: IFFALSE 12281
// ComPlaceWeapon ( b , ru_gatling_gun ) ;
12269: LD_VAR 0 1
12273: PPUSH
12274: LD_INT 43
12276: PPUSH
12277: CALL_OW 148
12281: PPOPN 1
12283: END
// on LeaveBuilding ( b , un ) do begin if b in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) then
12284: LD_VAR 0 1
12288: PUSH
12289: LD_INT 22
12291: PUSH
12292: LD_INT 3
12294: PUSH
12295: EMPTY
12296: LIST
12297: LIST
12298: PUSH
12299: LD_INT 2
12301: PUSH
12302: LD_INT 30
12304: PUSH
12305: LD_INT 31
12307: PUSH
12308: EMPTY
12309: LIST
12310: LIST
12311: PUSH
12312: LD_INT 30
12314: PUSH
12315: LD_INT 32
12317: PUSH
12318: EMPTY
12319: LIST
12320: LIST
12321: PUSH
12322: EMPTY
12323: LIST
12324: LIST
12325: LIST
12326: PUSH
12327: EMPTY
12328: LIST
12329: LIST
12330: PPUSH
12331: CALL_OW 69
12335: IN
12336: IFFALSE 12358
// GoToAnotherTower ( un , b , 134 , 136 ) ;
12338: LD_VAR 0 2
12342: PPUSH
12343: LD_VAR 0 1
12347: PPUSH
12348: LD_INT 134
12350: PPUSH
12351: LD_INT 136
12353: PPUSH
12354: CALL 838 0 4
// end ;
12358: PPOPN 2
12360: END
// on EnterBuilding ( b , un ) do begin if b in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) then
12361: LD_VAR 0 1
12365: PUSH
12366: LD_INT 22
12368: PUSH
12369: LD_INT 3
12371: PUSH
12372: EMPTY
12373: LIST
12374: LIST
12375: PUSH
12376: LD_INT 30
12378: PUSH
12379: LD_INT 32
12381: PUSH
12382: EMPTY
12383: LIST
12384: LIST
12385: PUSH
12386: EMPTY
12387: LIST
12388: LIST
12389: PPUSH
12390: CALL_OW 69
12394: IN
12395: IFFALSE 12409
// SetTag ( b , 0 ) ;
12397: LD_VAR 0 1
12401: PPUSH
12402: LD_INT 0
12404: PPUSH
12405: CALL_OW 109
// end ; end_of_file end_of_file
12409: PPOPN 2
12411: END
// export globalGameSaveCounter ; every 0 0$1 do
12412: GO 12414
12414: DISABLE
// begin enable ;
12415: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
12416: LD_STRING updateTimer(
12418: PUSH
12419: LD_OWVAR 1
12423: STR
12424: PUSH
12425: LD_STRING );
12427: STR
12428: PPUSH
12429: CALL_OW 559
// end ;
12433: END
// every 0 0$1 do
12434: GO 12436
12436: DISABLE
// begin globalGameSaveCounter := 0 ;
12437: LD_ADDR_EXP 21
12441: PUSH
12442: LD_INT 0
12444: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
12445: LD_STRING setGameSaveCounter(0)
12447: PPUSH
12448: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
12452: LD_STRING initStreamRollete();
12454: PPUSH
12455: CALL_OW 559
// InitStreamMode ;
12459: CALL 13811 0 0
// DefineStreamItems ( false ) ;
12463: LD_INT 0
12465: PPUSH
12466: CALL 14275 0 1
// end ;
12470: END
// export function SOS_MapStart ( ) ; begin
12471: LD_INT 0
12473: PPUSH
// if streamModeActive then
12474: LD_EXP 22
12478: IFFALSE 12487
// DefineStreamItems ( true ) ;
12480: LD_INT 1
12482: PPUSH
12483: CALL 14275 0 1
// ToLua ( LFC_UNITS_CUSTOM_ICON = {}; ) ;
12487: LD_STRING LFC_UNITS_CUSTOM_ICON = {};
12489: PPUSH
12490: CALL_OW 559
// UpdateLuaVariables ( ) ;
12494: CALL 12511 0 0
// UpdateFactoryWaypoints ( ) ;
12498: CALL 27397 0 0
// UpdateWarehouseGatheringPoints ( ) ;
12502: CALL 27649 0 0
// end ;
12506: LD_VAR 0 1
12510: RET
// function UpdateLuaVariables ( ) ; begin
12511: LD_INT 0
12513: PPUSH
// if globalGameSaveCounter then
12514: LD_EXP 21
12518: IFFALSE 12552
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
12520: LD_ADDR_EXP 21
12524: PUSH
12525: LD_EXP 21
12529: PPUSH
12530: CALL 74545 0 1
12534: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
12535: LD_STRING setGameSaveCounter(
12537: PUSH
12538: LD_EXP 21
12542: STR
12543: PUSH
12544: LD_STRING )
12546: STR
12547: PPUSH
12548: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
12552: LD_STRING setGameDifficulty(
12554: PUSH
12555: LD_OWVAR 67
12559: STR
12560: PUSH
12561: LD_STRING )
12563: STR
12564: PPUSH
12565: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
12569: LD_STRING displayDifficulty(
12571: PUSH
12572: LD_OWVAR 67
12576: STR
12577: PUSH
12578: LD_STRING )
12580: STR
12581: PPUSH
12582: CALL_OW 559
// end ;
12586: LD_VAR 0 1
12590: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
12591: LD_INT 0
12593: PPUSH
// if p2 = stream_mode then
12594: LD_VAR 0 2
12598: PUSH
12599: LD_INT 100
12601: EQUAL
12602: IFFALSE 13605
// begin if not StreamModeActive then
12604: LD_EXP 22
12608: NOT
12609: IFFALSE 12619
// StreamModeActive := true ;
12611: LD_ADDR_EXP 22
12615: PUSH
12616: LD_INT 1
12618: ST_TO_ADDR
// if p3 = 0 then
12619: LD_VAR 0 3
12623: PUSH
12624: LD_INT 0
12626: EQUAL
12627: IFFALSE 12633
// InitStreamMode ;
12629: CALL 13811 0 0
// if p3 = 1 then
12633: LD_VAR 0 3
12637: PUSH
12638: LD_INT 1
12640: EQUAL
12641: IFFALSE 12651
// sRocket := true ;
12643: LD_ADDR_EXP 27
12647: PUSH
12648: LD_INT 1
12650: ST_TO_ADDR
// if p3 = 2 then
12651: LD_VAR 0 3
12655: PUSH
12656: LD_INT 2
12658: EQUAL
12659: IFFALSE 12669
// sSpeed := true ;
12661: LD_ADDR_EXP 26
12665: PUSH
12666: LD_INT 1
12668: ST_TO_ADDR
// if p3 = 3 then
12669: LD_VAR 0 3
12673: PUSH
12674: LD_INT 3
12676: EQUAL
12677: IFFALSE 12687
// sEngine := true ;
12679: LD_ADDR_EXP 28
12683: PUSH
12684: LD_INT 1
12686: ST_TO_ADDR
// if p3 = 4 then
12687: LD_VAR 0 3
12691: PUSH
12692: LD_INT 4
12694: EQUAL
12695: IFFALSE 12705
// sSpec := true ;
12697: LD_ADDR_EXP 25
12701: PUSH
12702: LD_INT 1
12704: ST_TO_ADDR
// if p3 = 5 then
12705: LD_VAR 0 3
12709: PUSH
12710: LD_INT 5
12712: EQUAL
12713: IFFALSE 12723
// sLevel := true ;
12715: LD_ADDR_EXP 29
12719: PUSH
12720: LD_INT 1
12722: ST_TO_ADDR
// if p3 = 6 then
12723: LD_VAR 0 3
12727: PUSH
12728: LD_INT 6
12730: EQUAL
12731: IFFALSE 12741
// sArmoury := true ;
12733: LD_ADDR_EXP 30
12737: PUSH
12738: LD_INT 1
12740: ST_TO_ADDR
// if p3 = 7 then
12741: LD_VAR 0 3
12745: PUSH
12746: LD_INT 7
12748: EQUAL
12749: IFFALSE 12759
// sRadar := true ;
12751: LD_ADDR_EXP 31
12755: PUSH
12756: LD_INT 1
12758: ST_TO_ADDR
// if p3 = 8 then
12759: LD_VAR 0 3
12763: PUSH
12764: LD_INT 8
12766: EQUAL
12767: IFFALSE 12777
// sBunker := true ;
12769: LD_ADDR_EXP 32
12773: PUSH
12774: LD_INT 1
12776: ST_TO_ADDR
// if p3 = 9 then
12777: LD_VAR 0 3
12781: PUSH
12782: LD_INT 9
12784: EQUAL
12785: IFFALSE 12795
// sHack := true ;
12787: LD_ADDR_EXP 33
12791: PUSH
12792: LD_INT 1
12794: ST_TO_ADDR
// if p3 = 10 then
12795: LD_VAR 0 3
12799: PUSH
12800: LD_INT 10
12802: EQUAL
12803: IFFALSE 12813
// sFire := true ;
12805: LD_ADDR_EXP 34
12809: PUSH
12810: LD_INT 1
12812: ST_TO_ADDR
// if p3 = 11 then
12813: LD_VAR 0 3
12817: PUSH
12818: LD_INT 11
12820: EQUAL
12821: IFFALSE 12831
// sRefresh := true ;
12823: LD_ADDR_EXP 35
12827: PUSH
12828: LD_INT 1
12830: ST_TO_ADDR
// if p3 = 12 then
12831: LD_VAR 0 3
12835: PUSH
12836: LD_INT 12
12838: EQUAL
12839: IFFALSE 12849
// sExp := true ;
12841: LD_ADDR_EXP 36
12845: PUSH
12846: LD_INT 1
12848: ST_TO_ADDR
// if p3 = 13 then
12849: LD_VAR 0 3
12853: PUSH
12854: LD_INT 13
12856: EQUAL
12857: IFFALSE 12867
// sDepot := true ;
12859: LD_ADDR_EXP 37
12863: PUSH
12864: LD_INT 1
12866: ST_TO_ADDR
// if p3 = 14 then
12867: LD_VAR 0 3
12871: PUSH
12872: LD_INT 14
12874: EQUAL
12875: IFFALSE 12885
// sFlag := true ;
12877: LD_ADDR_EXP 38
12881: PUSH
12882: LD_INT 1
12884: ST_TO_ADDR
// if p3 = 15 then
12885: LD_VAR 0 3
12889: PUSH
12890: LD_INT 15
12892: EQUAL
12893: IFFALSE 12903
// sKamikadze := true ;
12895: LD_ADDR_EXP 46
12899: PUSH
12900: LD_INT 1
12902: ST_TO_ADDR
// if p3 = 16 then
12903: LD_VAR 0 3
12907: PUSH
12908: LD_INT 16
12910: EQUAL
12911: IFFALSE 12921
// sTroll := true ;
12913: LD_ADDR_EXP 47
12917: PUSH
12918: LD_INT 1
12920: ST_TO_ADDR
// if p3 = 17 then
12921: LD_VAR 0 3
12925: PUSH
12926: LD_INT 17
12928: EQUAL
12929: IFFALSE 12939
// sSlow := true ;
12931: LD_ADDR_EXP 48
12935: PUSH
12936: LD_INT 1
12938: ST_TO_ADDR
// if p3 = 18 then
12939: LD_VAR 0 3
12943: PUSH
12944: LD_INT 18
12946: EQUAL
12947: IFFALSE 12957
// sLack := true ;
12949: LD_ADDR_EXP 49
12953: PUSH
12954: LD_INT 1
12956: ST_TO_ADDR
// if p3 = 19 then
12957: LD_VAR 0 3
12961: PUSH
12962: LD_INT 19
12964: EQUAL
12965: IFFALSE 12975
// sTank := true ;
12967: LD_ADDR_EXP 51
12971: PUSH
12972: LD_INT 1
12974: ST_TO_ADDR
// if p3 = 20 then
12975: LD_VAR 0 3
12979: PUSH
12980: LD_INT 20
12982: EQUAL
12983: IFFALSE 12993
// sRemote := true ;
12985: LD_ADDR_EXP 52
12989: PUSH
12990: LD_INT 1
12992: ST_TO_ADDR
// if p3 = 21 then
12993: LD_VAR 0 3
12997: PUSH
12998: LD_INT 21
13000: EQUAL
13001: IFFALSE 13011
// sPowell := true ;
13003: LD_ADDR_EXP 53
13007: PUSH
13008: LD_INT 1
13010: ST_TO_ADDR
// if p3 = 22 then
13011: LD_VAR 0 3
13015: PUSH
13016: LD_INT 22
13018: EQUAL
13019: IFFALSE 13029
// sTeleport := true ;
13021: LD_ADDR_EXP 56
13025: PUSH
13026: LD_INT 1
13028: ST_TO_ADDR
// if p3 = 23 then
13029: LD_VAR 0 3
13033: PUSH
13034: LD_INT 23
13036: EQUAL
13037: IFFALSE 13047
// sOilTower := true ;
13039: LD_ADDR_EXP 58
13043: PUSH
13044: LD_INT 1
13046: ST_TO_ADDR
// if p3 = 24 then
13047: LD_VAR 0 3
13051: PUSH
13052: LD_INT 24
13054: EQUAL
13055: IFFALSE 13065
// sShovel := true ;
13057: LD_ADDR_EXP 59
13061: PUSH
13062: LD_INT 1
13064: ST_TO_ADDR
// if p3 = 25 then
13065: LD_VAR 0 3
13069: PUSH
13070: LD_INT 25
13072: EQUAL
13073: IFFALSE 13083
// sSheik := true ;
13075: LD_ADDR_EXP 60
13079: PUSH
13080: LD_INT 1
13082: ST_TO_ADDR
// if p3 = 26 then
13083: LD_VAR 0 3
13087: PUSH
13088: LD_INT 26
13090: EQUAL
13091: IFFALSE 13101
// sEarthquake := true ;
13093: LD_ADDR_EXP 62
13097: PUSH
13098: LD_INT 1
13100: ST_TO_ADDR
// if p3 = 27 then
13101: LD_VAR 0 3
13105: PUSH
13106: LD_INT 27
13108: EQUAL
13109: IFFALSE 13119
// sAI := true ;
13111: LD_ADDR_EXP 63
13115: PUSH
13116: LD_INT 1
13118: ST_TO_ADDR
// if p3 = 28 then
13119: LD_VAR 0 3
13123: PUSH
13124: LD_INT 28
13126: EQUAL
13127: IFFALSE 13137
// sCargo := true ;
13129: LD_ADDR_EXP 66
13133: PUSH
13134: LD_INT 1
13136: ST_TO_ADDR
// if p3 = 29 then
13137: LD_VAR 0 3
13141: PUSH
13142: LD_INT 29
13144: EQUAL
13145: IFFALSE 13155
// sDLaser := true ;
13147: LD_ADDR_EXP 67
13151: PUSH
13152: LD_INT 1
13154: ST_TO_ADDR
// if p3 = 30 then
13155: LD_VAR 0 3
13159: PUSH
13160: LD_INT 30
13162: EQUAL
13163: IFFALSE 13173
// sExchange := true ;
13165: LD_ADDR_EXP 68
13169: PUSH
13170: LD_INT 1
13172: ST_TO_ADDR
// if p3 = 31 then
13173: LD_VAR 0 3
13177: PUSH
13178: LD_INT 31
13180: EQUAL
13181: IFFALSE 13191
// sFac := true ;
13183: LD_ADDR_EXP 69
13187: PUSH
13188: LD_INT 1
13190: ST_TO_ADDR
// if p3 = 32 then
13191: LD_VAR 0 3
13195: PUSH
13196: LD_INT 32
13198: EQUAL
13199: IFFALSE 13209
// sPower := true ;
13201: LD_ADDR_EXP 70
13205: PUSH
13206: LD_INT 1
13208: ST_TO_ADDR
// if p3 = 33 then
13209: LD_VAR 0 3
13213: PUSH
13214: LD_INT 33
13216: EQUAL
13217: IFFALSE 13227
// sRandom := true ;
13219: LD_ADDR_EXP 71
13223: PUSH
13224: LD_INT 1
13226: ST_TO_ADDR
// if p3 = 34 then
13227: LD_VAR 0 3
13231: PUSH
13232: LD_INT 34
13234: EQUAL
13235: IFFALSE 13245
// sShield := true ;
13237: LD_ADDR_EXP 72
13241: PUSH
13242: LD_INT 1
13244: ST_TO_ADDR
// if p3 = 35 then
13245: LD_VAR 0 3
13249: PUSH
13250: LD_INT 35
13252: EQUAL
13253: IFFALSE 13263
// sTime := true ;
13255: LD_ADDR_EXP 73
13259: PUSH
13260: LD_INT 1
13262: ST_TO_ADDR
// if p3 = 36 then
13263: LD_VAR 0 3
13267: PUSH
13268: LD_INT 36
13270: EQUAL
13271: IFFALSE 13281
// sTools := true ;
13273: LD_ADDR_EXP 74
13277: PUSH
13278: LD_INT 1
13280: ST_TO_ADDR
// if p3 = 101 then
13281: LD_VAR 0 3
13285: PUSH
13286: LD_INT 101
13288: EQUAL
13289: IFFALSE 13299
// sSold := true ;
13291: LD_ADDR_EXP 39
13295: PUSH
13296: LD_INT 1
13298: ST_TO_ADDR
// if p3 = 102 then
13299: LD_VAR 0 3
13303: PUSH
13304: LD_INT 102
13306: EQUAL
13307: IFFALSE 13317
// sDiff := true ;
13309: LD_ADDR_EXP 40
13313: PUSH
13314: LD_INT 1
13316: ST_TO_ADDR
// if p3 = 103 then
13317: LD_VAR 0 3
13321: PUSH
13322: LD_INT 103
13324: EQUAL
13325: IFFALSE 13335
// sFog := true ;
13327: LD_ADDR_EXP 43
13331: PUSH
13332: LD_INT 1
13334: ST_TO_ADDR
// if p3 = 104 then
13335: LD_VAR 0 3
13339: PUSH
13340: LD_INT 104
13342: EQUAL
13343: IFFALSE 13353
// sReset := true ;
13345: LD_ADDR_EXP 44
13349: PUSH
13350: LD_INT 1
13352: ST_TO_ADDR
// if p3 = 105 then
13353: LD_VAR 0 3
13357: PUSH
13358: LD_INT 105
13360: EQUAL
13361: IFFALSE 13371
// sSun := true ;
13363: LD_ADDR_EXP 45
13367: PUSH
13368: LD_INT 1
13370: ST_TO_ADDR
// if p3 = 106 then
13371: LD_VAR 0 3
13375: PUSH
13376: LD_INT 106
13378: EQUAL
13379: IFFALSE 13389
// sTiger := true ;
13381: LD_ADDR_EXP 41
13385: PUSH
13386: LD_INT 1
13388: ST_TO_ADDR
// if p3 = 107 then
13389: LD_VAR 0 3
13393: PUSH
13394: LD_INT 107
13396: EQUAL
13397: IFFALSE 13407
// sBomb := true ;
13399: LD_ADDR_EXP 42
13403: PUSH
13404: LD_INT 1
13406: ST_TO_ADDR
// if p3 = 108 then
13407: LD_VAR 0 3
13411: PUSH
13412: LD_INT 108
13414: EQUAL
13415: IFFALSE 13425
// sWound := true ;
13417: LD_ADDR_EXP 50
13421: PUSH
13422: LD_INT 1
13424: ST_TO_ADDR
// if p3 = 109 then
13425: LD_VAR 0 3
13429: PUSH
13430: LD_INT 109
13432: EQUAL
13433: IFFALSE 13443
// sBetray := true ;
13435: LD_ADDR_EXP 54
13439: PUSH
13440: LD_INT 1
13442: ST_TO_ADDR
// if p3 = 110 then
13443: LD_VAR 0 3
13447: PUSH
13448: LD_INT 110
13450: EQUAL
13451: IFFALSE 13461
// sContamin := true ;
13453: LD_ADDR_EXP 55
13457: PUSH
13458: LD_INT 1
13460: ST_TO_ADDR
// if p3 = 111 then
13461: LD_VAR 0 3
13465: PUSH
13466: LD_INT 111
13468: EQUAL
13469: IFFALSE 13479
// sOil := true ;
13471: LD_ADDR_EXP 57
13475: PUSH
13476: LD_INT 1
13478: ST_TO_ADDR
// if p3 = 112 then
13479: LD_VAR 0 3
13483: PUSH
13484: LD_INT 112
13486: EQUAL
13487: IFFALSE 13497
// sStu := true ;
13489: LD_ADDR_EXP 61
13493: PUSH
13494: LD_INT 1
13496: ST_TO_ADDR
// if p3 = 113 then
13497: LD_VAR 0 3
13501: PUSH
13502: LD_INT 113
13504: EQUAL
13505: IFFALSE 13515
// sBazooka := true ;
13507: LD_ADDR_EXP 64
13511: PUSH
13512: LD_INT 1
13514: ST_TO_ADDR
// if p3 = 114 then
13515: LD_VAR 0 3
13519: PUSH
13520: LD_INT 114
13522: EQUAL
13523: IFFALSE 13533
// sMortar := true ;
13525: LD_ADDR_EXP 65
13529: PUSH
13530: LD_INT 1
13532: ST_TO_ADDR
// if p3 = 115 then
13533: LD_VAR 0 3
13537: PUSH
13538: LD_INT 115
13540: EQUAL
13541: IFFALSE 13551
// sRanger := true ;
13543: LD_ADDR_EXP 75
13547: PUSH
13548: LD_INT 1
13550: ST_TO_ADDR
// if p3 = 116 then
13551: LD_VAR 0 3
13555: PUSH
13556: LD_INT 116
13558: EQUAL
13559: IFFALSE 13569
// sComputer := true ;
13561: LD_ADDR_EXP 76
13565: PUSH
13566: LD_INT 1
13568: ST_TO_ADDR
// if p3 = 117 then
13569: LD_VAR 0 3
13573: PUSH
13574: LD_INT 117
13576: EQUAL
13577: IFFALSE 13587
// s30 := true ;
13579: LD_ADDR_EXP 77
13583: PUSH
13584: LD_INT 1
13586: ST_TO_ADDR
// if p3 = 118 then
13587: LD_VAR 0 3
13591: PUSH
13592: LD_INT 118
13594: EQUAL
13595: IFFALSE 13605
// s60 := true ;
13597: LD_ADDR_EXP 78
13601: PUSH
13602: LD_INT 1
13604: ST_TO_ADDR
// end ; if p2 = hack_mode then
13605: LD_VAR 0 2
13609: PUSH
13610: LD_INT 101
13612: EQUAL
13613: IFFALSE 13741
// begin case p3 of 1 :
13615: LD_VAR 0 3
13619: PUSH
13620: LD_INT 1
13622: DOUBLE
13623: EQUAL
13624: IFTRUE 13628
13626: GO 13635
13628: POP
// hHackUnlimitedResources ; 2 :
13629: CALL 26004 0 0
13633: GO 13741
13635: LD_INT 2
13637: DOUBLE
13638: EQUAL
13639: IFTRUE 13643
13641: GO 13650
13643: POP
// hHackSetLevel10 ; 3 :
13644: CALL 26137 0 0
13648: GO 13741
13650: LD_INT 3
13652: DOUBLE
13653: EQUAL
13654: IFTRUE 13658
13656: GO 13665
13658: POP
// hHackSetLevel10YourUnits ; 4 :
13659: CALL 26222 0 0
13663: GO 13741
13665: LD_INT 4
13667: DOUBLE
13668: EQUAL
13669: IFTRUE 13673
13671: GO 13680
13673: POP
// hHackInvincible ; 5 :
13674: CALL 26670 0 0
13678: GO 13741
13680: LD_INT 5
13682: DOUBLE
13683: EQUAL
13684: IFTRUE 13688
13686: GO 13695
13688: POP
// hHackInvisible ; 6 :
13689: CALL 26781 0 0
13693: GO 13741
13695: LD_INT 6
13697: DOUBLE
13698: EQUAL
13699: IFTRUE 13703
13701: GO 13710
13703: POP
// hHackChangeYourSide ; 7 :
13704: CALL 26838 0 0
13708: GO 13741
13710: LD_INT 7
13712: DOUBLE
13713: EQUAL
13714: IFTRUE 13718
13716: GO 13725
13718: POP
// hHackChangeUnitSide ; 8 :
13719: CALL 26880 0 0
13723: GO 13741
13725: LD_INT 8
13727: DOUBLE
13728: EQUAL
13729: IFTRUE 13733
13731: GO 13740
13733: POP
// hHackFog ; end ;
13734: CALL 26981 0 0
13738: GO 13741
13740: POP
// end ; if p2 = game_save_mode then
13741: LD_VAR 0 2
13745: PUSH
13746: LD_INT 102
13748: EQUAL
13749: IFFALSE 13806
// begin if p3 = 1 then
13751: LD_VAR 0 3
13755: PUSH
13756: LD_INT 1
13758: EQUAL
13759: IFFALSE 13771
// globalGameSaveCounter := p4 ;
13761: LD_ADDR_EXP 21
13765: PUSH
13766: LD_VAR 0 4
13770: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
13771: LD_VAR 0 3
13775: PUSH
13776: LD_INT 2
13778: EQUAL
13779: IFFALSE 13787
13781: PUSH
13782: LD_EXP 21
13786: AND
13787: IFFALSE 13806
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
13789: LD_STRING setGameSaveCounter(
13791: PUSH
13792: LD_EXP 21
13796: STR
13797: PUSH
13798: LD_STRING )
13800: STR
13801: PPUSH
13802: CALL_OW 559
// end ; end ;
13806: LD_VAR 0 7
13810: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
13811: LD_INT 0
13813: PPUSH
// streamModeActive := false ;
13814: LD_ADDR_EXP 22
13818: PUSH
13819: LD_INT 0
13821: ST_TO_ADDR
// normalCounter := 36 ;
13822: LD_ADDR_EXP 23
13826: PUSH
13827: LD_INT 36
13829: ST_TO_ADDR
// hardcoreCounter := 18 ;
13830: LD_ADDR_EXP 24
13834: PUSH
13835: LD_INT 18
13837: ST_TO_ADDR
// sRocket := false ;
13838: LD_ADDR_EXP 27
13842: PUSH
13843: LD_INT 0
13845: ST_TO_ADDR
// sSpeed := false ;
13846: LD_ADDR_EXP 26
13850: PUSH
13851: LD_INT 0
13853: ST_TO_ADDR
// sEngine := false ;
13854: LD_ADDR_EXP 28
13858: PUSH
13859: LD_INT 0
13861: ST_TO_ADDR
// sSpec := false ;
13862: LD_ADDR_EXP 25
13866: PUSH
13867: LD_INT 0
13869: ST_TO_ADDR
// sLevel := false ;
13870: LD_ADDR_EXP 29
13874: PUSH
13875: LD_INT 0
13877: ST_TO_ADDR
// sArmoury := false ;
13878: LD_ADDR_EXP 30
13882: PUSH
13883: LD_INT 0
13885: ST_TO_ADDR
// sRadar := false ;
13886: LD_ADDR_EXP 31
13890: PUSH
13891: LD_INT 0
13893: ST_TO_ADDR
// sBunker := false ;
13894: LD_ADDR_EXP 32
13898: PUSH
13899: LD_INT 0
13901: ST_TO_ADDR
// sHack := false ;
13902: LD_ADDR_EXP 33
13906: PUSH
13907: LD_INT 0
13909: ST_TO_ADDR
// sFire := false ;
13910: LD_ADDR_EXP 34
13914: PUSH
13915: LD_INT 0
13917: ST_TO_ADDR
// sRefresh := false ;
13918: LD_ADDR_EXP 35
13922: PUSH
13923: LD_INT 0
13925: ST_TO_ADDR
// sExp := false ;
13926: LD_ADDR_EXP 36
13930: PUSH
13931: LD_INT 0
13933: ST_TO_ADDR
// sDepot := false ;
13934: LD_ADDR_EXP 37
13938: PUSH
13939: LD_INT 0
13941: ST_TO_ADDR
// sFlag := false ;
13942: LD_ADDR_EXP 38
13946: PUSH
13947: LD_INT 0
13949: ST_TO_ADDR
// sKamikadze := false ;
13950: LD_ADDR_EXP 46
13954: PUSH
13955: LD_INT 0
13957: ST_TO_ADDR
// sTroll := false ;
13958: LD_ADDR_EXP 47
13962: PUSH
13963: LD_INT 0
13965: ST_TO_ADDR
// sSlow := false ;
13966: LD_ADDR_EXP 48
13970: PUSH
13971: LD_INT 0
13973: ST_TO_ADDR
// sLack := false ;
13974: LD_ADDR_EXP 49
13978: PUSH
13979: LD_INT 0
13981: ST_TO_ADDR
// sTank := false ;
13982: LD_ADDR_EXP 51
13986: PUSH
13987: LD_INT 0
13989: ST_TO_ADDR
// sRemote := false ;
13990: LD_ADDR_EXP 52
13994: PUSH
13995: LD_INT 0
13997: ST_TO_ADDR
// sPowell := false ;
13998: LD_ADDR_EXP 53
14002: PUSH
14003: LD_INT 0
14005: ST_TO_ADDR
// sTeleport := false ;
14006: LD_ADDR_EXP 56
14010: PUSH
14011: LD_INT 0
14013: ST_TO_ADDR
// sOilTower := false ;
14014: LD_ADDR_EXP 58
14018: PUSH
14019: LD_INT 0
14021: ST_TO_ADDR
// sShovel := false ;
14022: LD_ADDR_EXP 59
14026: PUSH
14027: LD_INT 0
14029: ST_TO_ADDR
// sSheik := false ;
14030: LD_ADDR_EXP 60
14034: PUSH
14035: LD_INT 0
14037: ST_TO_ADDR
// sEarthquake := false ;
14038: LD_ADDR_EXP 62
14042: PUSH
14043: LD_INT 0
14045: ST_TO_ADDR
// sAI := false ;
14046: LD_ADDR_EXP 63
14050: PUSH
14051: LD_INT 0
14053: ST_TO_ADDR
// sCargo := false ;
14054: LD_ADDR_EXP 66
14058: PUSH
14059: LD_INT 0
14061: ST_TO_ADDR
// sDLaser := false ;
14062: LD_ADDR_EXP 67
14066: PUSH
14067: LD_INT 0
14069: ST_TO_ADDR
// sExchange := false ;
14070: LD_ADDR_EXP 68
14074: PUSH
14075: LD_INT 0
14077: ST_TO_ADDR
// sFac := false ;
14078: LD_ADDR_EXP 69
14082: PUSH
14083: LD_INT 0
14085: ST_TO_ADDR
// sPower := false ;
14086: LD_ADDR_EXP 70
14090: PUSH
14091: LD_INT 0
14093: ST_TO_ADDR
// sRandom := false ;
14094: LD_ADDR_EXP 71
14098: PUSH
14099: LD_INT 0
14101: ST_TO_ADDR
// sShield := false ;
14102: LD_ADDR_EXP 72
14106: PUSH
14107: LD_INT 0
14109: ST_TO_ADDR
// sTime := false ;
14110: LD_ADDR_EXP 73
14114: PUSH
14115: LD_INT 0
14117: ST_TO_ADDR
// sTools := false ;
14118: LD_ADDR_EXP 74
14122: PUSH
14123: LD_INT 0
14125: ST_TO_ADDR
// sSold := false ;
14126: LD_ADDR_EXP 39
14130: PUSH
14131: LD_INT 0
14133: ST_TO_ADDR
// sDiff := false ;
14134: LD_ADDR_EXP 40
14138: PUSH
14139: LD_INT 0
14141: ST_TO_ADDR
// sFog := false ;
14142: LD_ADDR_EXP 43
14146: PUSH
14147: LD_INT 0
14149: ST_TO_ADDR
// sReset := false ;
14150: LD_ADDR_EXP 44
14154: PUSH
14155: LD_INT 0
14157: ST_TO_ADDR
// sSun := false ;
14158: LD_ADDR_EXP 45
14162: PUSH
14163: LD_INT 0
14165: ST_TO_ADDR
// sTiger := false ;
14166: LD_ADDR_EXP 41
14170: PUSH
14171: LD_INT 0
14173: ST_TO_ADDR
// sBomb := false ;
14174: LD_ADDR_EXP 42
14178: PUSH
14179: LD_INT 0
14181: ST_TO_ADDR
// sWound := false ;
14182: LD_ADDR_EXP 50
14186: PUSH
14187: LD_INT 0
14189: ST_TO_ADDR
// sBetray := false ;
14190: LD_ADDR_EXP 54
14194: PUSH
14195: LD_INT 0
14197: ST_TO_ADDR
// sContamin := false ;
14198: LD_ADDR_EXP 55
14202: PUSH
14203: LD_INT 0
14205: ST_TO_ADDR
// sOil := false ;
14206: LD_ADDR_EXP 57
14210: PUSH
14211: LD_INT 0
14213: ST_TO_ADDR
// sStu := false ;
14214: LD_ADDR_EXP 61
14218: PUSH
14219: LD_INT 0
14221: ST_TO_ADDR
// sBazooka := false ;
14222: LD_ADDR_EXP 64
14226: PUSH
14227: LD_INT 0
14229: ST_TO_ADDR
// sMortar := false ;
14230: LD_ADDR_EXP 65
14234: PUSH
14235: LD_INT 0
14237: ST_TO_ADDR
// sRanger := false ;
14238: LD_ADDR_EXP 75
14242: PUSH
14243: LD_INT 0
14245: ST_TO_ADDR
// sComputer := false ;
14246: LD_ADDR_EXP 76
14250: PUSH
14251: LD_INT 0
14253: ST_TO_ADDR
// s30 := false ;
14254: LD_ADDR_EXP 77
14258: PUSH
14259: LD_INT 0
14261: ST_TO_ADDR
// s60 := false ;
14262: LD_ADDR_EXP 78
14266: PUSH
14267: LD_INT 0
14269: ST_TO_ADDR
// end ;
14270: LD_VAR 0 1
14274: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
14275: LD_INT 0
14277: PPUSH
14278: PPUSH
14279: PPUSH
14280: PPUSH
14281: PPUSH
14282: PPUSH
14283: PPUSH
// result := [ ] ;
14284: LD_ADDR_VAR 0 2
14288: PUSH
14289: EMPTY
14290: ST_TO_ADDR
// if campaign_id = 1 then
14291: LD_OWVAR 69
14295: PUSH
14296: LD_INT 1
14298: EQUAL
14299: IFFALSE 17465
// begin case mission_number of 1 :
14301: LD_OWVAR 70
14305: PUSH
14306: LD_INT 1
14308: DOUBLE
14309: EQUAL
14310: IFTRUE 14314
14312: GO 14390
14314: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
14315: LD_ADDR_VAR 0 2
14319: PUSH
14320: LD_INT 2
14322: PUSH
14323: LD_INT 4
14325: PUSH
14326: LD_INT 11
14328: PUSH
14329: LD_INT 12
14331: PUSH
14332: LD_INT 15
14334: PUSH
14335: LD_INT 16
14337: PUSH
14338: LD_INT 22
14340: PUSH
14341: LD_INT 23
14343: PUSH
14344: LD_INT 26
14346: PUSH
14347: EMPTY
14348: LIST
14349: LIST
14350: LIST
14351: LIST
14352: LIST
14353: LIST
14354: LIST
14355: LIST
14356: LIST
14357: PUSH
14358: LD_INT 101
14360: PUSH
14361: LD_INT 102
14363: PUSH
14364: LD_INT 106
14366: PUSH
14367: LD_INT 116
14369: PUSH
14370: LD_INT 117
14372: PUSH
14373: LD_INT 118
14375: PUSH
14376: EMPTY
14377: LIST
14378: LIST
14379: LIST
14380: LIST
14381: LIST
14382: LIST
14383: PUSH
14384: EMPTY
14385: LIST
14386: LIST
14387: ST_TO_ADDR
14388: GO 17463
14390: LD_INT 2
14392: DOUBLE
14393: EQUAL
14394: IFTRUE 14398
14396: GO 14482
14398: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
14399: LD_ADDR_VAR 0 2
14403: PUSH
14404: LD_INT 2
14406: PUSH
14407: LD_INT 4
14409: PUSH
14410: LD_INT 11
14412: PUSH
14413: LD_INT 12
14415: PUSH
14416: LD_INT 15
14418: PUSH
14419: LD_INT 16
14421: PUSH
14422: LD_INT 22
14424: PUSH
14425: LD_INT 23
14427: PUSH
14428: LD_INT 26
14430: PUSH
14431: EMPTY
14432: LIST
14433: LIST
14434: LIST
14435: LIST
14436: LIST
14437: LIST
14438: LIST
14439: LIST
14440: LIST
14441: PUSH
14442: LD_INT 101
14444: PUSH
14445: LD_INT 102
14447: PUSH
14448: LD_INT 105
14450: PUSH
14451: LD_INT 106
14453: PUSH
14454: LD_INT 108
14456: PUSH
14457: LD_INT 116
14459: PUSH
14460: LD_INT 117
14462: PUSH
14463: LD_INT 118
14465: PUSH
14466: EMPTY
14467: LIST
14468: LIST
14469: LIST
14470: LIST
14471: LIST
14472: LIST
14473: LIST
14474: LIST
14475: PUSH
14476: EMPTY
14477: LIST
14478: LIST
14479: ST_TO_ADDR
14480: GO 17463
14482: LD_INT 3
14484: DOUBLE
14485: EQUAL
14486: IFTRUE 14490
14488: GO 14578
14490: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
14491: LD_ADDR_VAR 0 2
14495: PUSH
14496: LD_INT 2
14498: PUSH
14499: LD_INT 4
14501: PUSH
14502: LD_INT 5
14504: PUSH
14505: LD_INT 11
14507: PUSH
14508: LD_INT 12
14510: PUSH
14511: LD_INT 15
14513: PUSH
14514: LD_INT 16
14516: PUSH
14517: LD_INT 22
14519: PUSH
14520: LD_INT 26
14522: PUSH
14523: LD_INT 36
14525: PUSH
14526: EMPTY
14527: LIST
14528: LIST
14529: LIST
14530: LIST
14531: LIST
14532: LIST
14533: LIST
14534: LIST
14535: LIST
14536: LIST
14537: PUSH
14538: LD_INT 101
14540: PUSH
14541: LD_INT 102
14543: PUSH
14544: LD_INT 105
14546: PUSH
14547: LD_INT 106
14549: PUSH
14550: LD_INT 108
14552: PUSH
14553: LD_INT 116
14555: PUSH
14556: LD_INT 117
14558: PUSH
14559: LD_INT 118
14561: PUSH
14562: EMPTY
14563: LIST
14564: LIST
14565: LIST
14566: LIST
14567: LIST
14568: LIST
14569: LIST
14570: LIST
14571: PUSH
14572: EMPTY
14573: LIST
14574: LIST
14575: ST_TO_ADDR
14576: GO 17463
14578: LD_INT 4
14580: DOUBLE
14581: EQUAL
14582: IFTRUE 14586
14584: GO 14682
14586: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
14587: LD_ADDR_VAR 0 2
14591: PUSH
14592: LD_INT 2
14594: PUSH
14595: LD_INT 4
14597: PUSH
14598: LD_INT 5
14600: PUSH
14601: LD_INT 8
14603: PUSH
14604: LD_INT 11
14606: PUSH
14607: LD_INT 12
14609: PUSH
14610: LD_INT 15
14612: PUSH
14613: LD_INT 16
14615: PUSH
14616: LD_INT 22
14618: PUSH
14619: LD_INT 23
14621: PUSH
14622: LD_INT 26
14624: PUSH
14625: LD_INT 36
14627: PUSH
14628: EMPTY
14629: LIST
14630: LIST
14631: LIST
14632: LIST
14633: LIST
14634: LIST
14635: LIST
14636: LIST
14637: LIST
14638: LIST
14639: LIST
14640: LIST
14641: PUSH
14642: LD_INT 101
14644: PUSH
14645: LD_INT 102
14647: PUSH
14648: LD_INT 105
14650: PUSH
14651: LD_INT 106
14653: PUSH
14654: LD_INT 108
14656: PUSH
14657: LD_INT 116
14659: PUSH
14660: LD_INT 117
14662: PUSH
14663: LD_INT 118
14665: PUSH
14666: EMPTY
14667: LIST
14668: LIST
14669: LIST
14670: LIST
14671: LIST
14672: LIST
14673: LIST
14674: LIST
14675: PUSH
14676: EMPTY
14677: LIST
14678: LIST
14679: ST_TO_ADDR
14680: GO 17463
14682: LD_INT 5
14684: DOUBLE
14685: EQUAL
14686: IFTRUE 14690
14688: GO 14802
14690: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
14691: LD_ADDR_VAR 0 2
14695: PUSH
14696: LD_INT 2
14698: PUSH
14699: LD_INT 4
14701: PUSH
14702: LD_INT 5
14704: PUSH
14705: LD_INT 6
14707: PUSH
14708: LD_INT 8
14710: PUSH
14711: LD_INT 11
14713: PUSH
14714: LD_INT 12
14716: PUSH
14717: LD_INT 15
14719: PUSH
14720: LD_INT 16
14722: PUSH
14723: LD_INT 22
14725: PUSH
14726: LD_INT 23
14728: PUSH
14729: LD_INT 25
14731: PUSH
14732: LD_INT 26
14734: PUSH
14735: LD_INT 36
14737: PUSH
14738: EMPTY
14739: LIST
14740: LIST
14741: LIST
14742: LIST
14743: LIST
14744: LIST
14745: LIST
14746: LIST
14747: LIST
14748: LIST
14749: LIST
14750: LIST
14751: LIST
14752: LIST
14753: PUSH
14754: LD_INT 101
14756: PUSH
14757: LD_INT 102
14759: PUSH
14760: LD_INT 105
14762: PUSH
14763: LD_INT 106
14765: PUSH
14766: LD_INT 108
14768: PUSH
14769: LD_INT 109
14771: PUSH
14772: LD_INT 112
14774: PUSH
14775: LD_INT 116
14777: PUSH
14778: LD_INT 117
14780: PUSH
14781: LD_INT 118
14783: PUSH
14784: EMPTY
14785: LIST
14786: LIST
14787: LIST
14788: LIST
14789: LIST
14790: LIST
14791: LIST
14792: LIST
14793: LIST
14794: LIST
14795: PUSH
14796: EMPTY
14797: LIST
14798: LIST
14799: ST_TO_ADDR
14800: GO 17463
14802: LD_INT 6
14804: DOUBLE
14805: EQUAL
14806: IFTRUE 14810
14808: GO 14942
14810: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
14811: LD_ADDR_VAR 0 2
14815: PUSH
14816: LD_INT 2
14818: PUSH
14819: LD_INT 4
14821: PUSH
14822: LD_INT 5
14824: PUSH
14825: LD_INT 6
14827: PUSH
14828: LD_INT 8
14830: PUSH
14831: LD_INT 11
14833: PUSH
14834: LD_INT 12
14836: PUSH
14837: LD_INT 15
14839: PUSH
14840: LD_INT 16
14842: PUSH
14843: LD_INT 20
14845: PUSH
14846: LD_INT 21
14848: PUSH
14849: LD_INT 22
14851: PUSH
14852: LD_INT 23
14854: PUSH
14855: LD_INT 25
14857: PUSH
14858: LD_INT 26
14860: PUSH
14861: LD_INT 30
14863: PUSH
14864: LD_INT 31
14866: PUSH
14867: LD_INT 32
14869: PUSH
14870: LD_INT 36
14872: PUSH
14873: EMPTY
14874: LIST
14875: LIST
14876: LIST
14877: LIST
14878: LIST
14879: LIST
14880: LIST
14881: LIST
14882: LIST
14883: LIST
14884: LIST
14885: LIST
14886: LIST
14887: LIST
14888: LIST
14889: LIST
14890: LIST
14891: LIST
14892: LIST
14893: PUSH
14894: LD_INT 101
14896: PUSH
14897: LD_INT 102
14899: PUSH
14900: LD_INT 105
14902: PUSH
14903: LD_INT 106
14905: PUSH
14906: LD_INT 108
14908: PUSH
14909: LD_INT 109
14911: PUSH
14912: LD_INT 112
14914: PUSH
14915: LD_INT 116
14917: PUSH
14918: LD_INT 117
14920: PUSH
14921: LD_INT 118
14923: PUSH
14924: EMPTY
14925: LIST
14926: LIST
14927: LIST
14928: LIST
14929: LIST
14930: LIST
14931: LIST
14932: LIST
14933: LIST
14934: LIST
14935: PUSH
14936: EMPTY
14937: LIST
14938: LIST
14939: ST_TO_ADDR
14940: GO 17463
14942: LD_INT 7
14944: DOUBLE
14945: EQUAL
14946: IFTRUE 14950
14948: GO 15062
14950: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
14951: LD_ADDR_VAR 0 2
14955: PUSH
14956: LD_INT 2
14958: PUSH
14959: LD_INT 4
14961: PUSH
14962: LD_INT 5
14964: PUSH
14965: LD_INT 7
14967: PUSH
14968: LD_INT 11
14970: PUSH
14971: LD_INT 12
14973: PUSH
14974: LD_INT 15
14976: PUSH
14977: LD_INT 16
14979: PUSH
14980: LD_INT 20
14982: PUSH
14983: LD_INT 21
14985: PUSH
14986: LD_INT 22
14988: PUSH
14989: LD_INT 23
14991: PUSH
14992: LD_INT 25
14994: PUSH
14995: LD_INT 26
14997: PUSH
14998: EMPTY
14999: LIST
15000: LIST
15001: LIST
15002: LIST
15003: LIST
15004: LIST
15005: LIST
15006: LIST
15007: LIST
15008: LIST
15009: LIST
15010: LIST
15011: LIST
15012: LIST
15013: PUSH
15014: LD_INT 101
15016: PUSH
15017: LD_INT 102
15019: PUSH
15020: LD_INT 103
15022: PUSH
15023: LD_INT 105
15025: PUSH
15026: LD_INT 106
15028: PUSH
15029: LD_INT 108
15031: PUSH
15032: LD_INT 112
15034: PUSH
15035: LD_INT 116
15037: PUSH
15038: LD_INT 117
15040: PUSH
15041: LD_INT 118
15043: PUSH
15044: EMPTY
15045: LIST
15046: LIST
15047: LIST
15048: LIST
15049: LIST
15050: LIST
15051: LIST
15052: LIST
15053: LIST
15054: LIST
15055: PUSH
15056: EMPTY
15057: LIST
15058: LIST
15059: ST_TO_ADDR
15060: GO 17463
15062: LD_INT 8
15064: DOUBLE
15065: EQUAL
15066: IFTRUE 15070
15068: GO 15210
15070: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
15071: LD_ADDR_VAR 0 2
15075: PUSH
15076: LD_INT 2
15078: PUSH
15079: LD_INT 4
15081: PUSH
15082: LD_INT 5
15084: PUSH
15085: LD_INT 6
15087: PUSH
15088: LD_INT 7
15090: PUSH
15091: LD_INT 8
15093: PUSH
15094: LD_INT 11
15096: PUSH
15097: LD_INT 12
15099: PUSH
15100: LD_INT 15
15102: PUSH
15103: LD_INT 16
15105: PUSH
15106: LD_INT 20
15108: PUSH
15109: LD_INT 21
15111: PUSH
15112: LD_INT 22
15114: PUSH
15115: LD_INT 23
15117: PUSH
15118: LD_INT 25
15120: PUSH
15121: LD_INT 26
15123: PUSH
15124: LD_INT 30
15126: PUSH
15127: LD_INT 31
15129: PUSH
15130: LD_INT 32
15132: PUSH
15133: LD_INT 36
15135: PUSH
15136: EMPTY
15137: LIST
15138: LIST
15139: LIST
15140: LIST
15141: LIST
15142: LIST
15143: LIST
15144: LIST
15145: LIST
15146: LIST
15147: LIST
15148: LIST
15149: LIST
15150: LIST
15151: LIST
15152: LIST
15153: LIST
15154: LIST
15155: LIST
15156: LIST
15157: PUSH
15158: LD_INT 101
15160: PUSH
15161: LD_INT 102
15163: PUSH
15164: LD_INT 103
15166: PUSH
15167: LD_INT 105
15169: PUSH
15170: LD_INT 106
15172: PUSH
15173: LD_INT 108
15175: PUSH
15176: LD_INT 109
15178: PUSH
15179: LD_INT 112
15181: PUSH
15182: LD_INT 116
15184: PUSH
15185: LD_INT 117
15187: PUSH
15188: LD_INT 118
15190: PUSH
15191: EMPTY
15192: LIST
15193: LIST
15194: LIST
15195: LIST
15196: LIST
15197: LIST
15198: LIST
15199: LIST
15200: LIST
15201: LIST
15202: LIST
15203: PUSH
15204: EMPTY
15205: LIST
15206: LIST
15207: ST_TO_ADDR
15208: GO 17463
15210: LD_INT 9
15212: DOUBLE
15213: EQUAL
15214: IFTRUE 15218
15216: GO 15366
15218: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
15219: LD_ADDR_VAR 0 2
15223: PUSH
15224: LD_INT 2
15226: PUSH
15227: LD_INT 4
15229: PUSH
15230: LD_INT 5
15232: PUSH
15233: LD_INT 6
15235: PUSH
15236: LD_INT 7
15238: PUSH
15239: LD_INT 8
15241: PUSH
15242: LD_INT 11
15244: PUSH
15245: LD_INT 12
15247: PUSH
15248: LD_INT 15
15250: PUSH
15251: LD_INT 16
15253: PUSH
15254: LD_INT 20
15256: PUSH
15257: LD_INT 21
15259: PUSH
15260: LD_INT 22
15262: PUSH
15263: LD_INT 23
15265: PUSH
15266: LD_INT 25
15268: PUSH
15269: LD_INT 26
15271: PUSH
15272: LD_INT 28
15274: PUSH
15275: LD_INT 30
15277: PUSH
15278: LD_INT 31
15280: PUSH
15281: LD_INT 32
15283: PUSH
15284: LD_INT 36
15286: PUSH
15287: EMPTY
15288: LIST
15289: LIST
15290: LIST
15291: LIST
15292: LIST
15293: LIST
15294: LIST
15295: LIST
15296: LIST
15297: LIST
15298: LIST
15299: LIST
15300: LIST
15301: LIST
15302: LIST
15303: LIST
15304: LIST
15305: LIST
15306: LIST
15307: LIST
15308: LIST
15309: PUSH
15310: LD_INT 101
15312: PUSH
15313: LD_INT 102
15315: PUSH
15316: LD_INT 103
15318: PUSH
15319: LD_INT 105
15321: PUSH
15322: LD_INT 106
15324: PUSH
15325: LD_INT 108
15327: PUSH
15328: LD_INT 109
15330: PUSH
15331: LD_INT 112
15333: PUSH
15334: LD_INT 114
15336: PUSH
15337: LD_INT 116
15339: PUSH
15340: LD_INT 117
15342: PUSH
15343: LD_INT 118
15345: PUSH
15346: EMPTY
15347: LIST
15348: LIST
15349: LIST
15350: LIST
15351: LIST
15352: LIST
15353: LIST
15354: LIST
15355: LIST
15356: LIST
15357: LIST
15358: LIST
15359: PUSH
15360: EMPTY
15361: LIST
15362: LIST
15363: ST_TO_ADDR
15364: GO 17463
15366: LD_INT 10
15368: DOUBLE
15369: EQUAL
15370: IFTRUE 15374
15372: GO 15570
15374: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
15375: LD_ADDR_VAR 0 2
15379: PUSH
15380: LD_INT 2
15382: PUSH
15383: LD_INT 4
15385: PUSH
15386: LD_INT 5
15388: PUSH
15389: LD_INT 6
15391: PUSH
15392: LD_INT 7
15394: PUSH
15395: LD_INT 8
15397: PUSH
15398: LD_INT 9
15400: PUSH
15401: LD_INT 10
15403: PUSH
15404: LD_INT 11
15406: PUSH
15407: LD_INT 12
15409: PUSH
15410: LD_INT 13
15412: PUSH
15413: LD_INT 14
15415: PUSH
15416: LD_INT 15
15418: PUSH
15419: LD_INT 16
15421: PUSH
15422: LD_INT 17
15424: PUSH
15425: LD_INT 18
15427: PUSH
15428: LD_INT 19
15430: PUSH
15431: LD_INT 20
15433: PUSH
15434: LD_INT 21
15436: PUSH
15437: LD_INT 22
15439: PUSH
15440: LD_INT 23
15442: PUSH
15443: LD_INT 24
15445: PUSH
15446: LD_INT 25
15448: PUSH
15449: LD_INT 26
15451: PUSH
15452: LD_INT 28
15454: PUSH
15455: LD_INT 30
15457: PUSH
15458: LD_INT 31
15460: PUSH
15461: LD_INT 32
15463: PUSH
15464: LD_INT 36
15466: PUSH
15467: EMPTY
15468: LIST
15469: LIST
15470: LIST
15471: LIST
15472: LIST
15473: LIST
15474: LIST
15475: LIST
15476: LIST
15477: LIST
15478: LIST
15479: LIST
15480: LIST
15481: LIST
15482: LIST
15483: LIST
15484: LIST
15485: LIST
15486: LIST
15487: LIST
15488: LIST
15489: LIST
15490: LIST
15491: LIST
15492: LIST
15493: LIST
15494: LIST
15495: LIST
15496: LIST
15497: PUSH
15498: LD_INT 101
15500: PUSH
15501: LD_INT 102
15503: PUSH
15504: LD_INT 103
15506: PUSH
15507: LD_INT 104
15509: PUSH
15510: LD_INT 105
15512: PUSH
15513: LD_INT 106
15515: PUSH
15516: LD_INT 107
15518: PUSH
15519: LD_INT 108
15521: PUSH
15522: LD_INT 109
15524: PUSH
15525: LD_INT 110
15527: PUSH
15528: LD_INT 111
15530: PUSH
15531: LD_INT 112
15533: PUSH
15534: LD_INT 114
15536: PUSH
15537: LD_INT 116
15539: PUSH
15540: LD_INT 117
15542: PUSH
15543: LD_INT 118
15545: PUSH
15546: EMPTY
15547: LIST
15548: LIST
15549: LIST
15550: LIST
15551: LIST
15552: LIST
15553: LIST
15554: LIST
15555: LIST
15556: LIST
15557: LIST
15558: LIST
15559: LIST
15560: LIST
15561: LIST
15562: LIST
15563: PUSH
15564: EMPTY
15565: LIST
15566: LIST
15567: ST_TO_ADDR
15568: GO 17463
15570: LD_INT 11
15572: DOUBLE
15573: EQUAL
15574: IFTRUE 15578
15576: GO 15782
15578: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
15579: LD_ADDR_VAR 0 2
15583: PUSH
15584: LD_INT 2
15586: PUSH
15587: LD_INT 3
15589: PUSH
15590: LD_INT 4
15592: PUSH
15593: LD_INT 5
15595: PUSH
15596: LD_INT 6
15598: PUSH
15599: LD_INT 7
15601: PUSH
15602: LD_INT 8
15604: PUSH
15605: LD_INT 9
15607: PUSH
15608: LD_INT 10
15610: PUSH
15611: LD_INT 11
15613: PUSH
15614: LD_INT 12
15616: PUSH
15617: LD_INT 13
15619: PUSH
15620: LD_INT 14
15622: PUSH
15623: LD_INT 15
15625: PUSH
15626: LD_INT 16
15628: PUSH
15629: LD_INT 17
15631: PUSH
15632: LD_INT 18
15634: PUSH
15635: LD_INT 19
15637: PUSH
15638: LD_INT 20
15640: PUSH
15641: LD_INT 21
15643: PUSH
15644: LD_INT 22
15646: PUSH
15647: LD_INT 23
15649: PUSH
15650: LD_INT 24
15652: PUSH
15653: LD_INT 25
15655: PUSH
15656: LD_INT 26
15658: PUSH
15659: LD_INT 28
15661: PUSH
15662: LD_INT 30
15664: PUSH
15665: LD_INT 31
15667: PUSH
15668: LD_INT 32
15670: PUSH
15671: LD_INT 34
15673: PUSH
15674: LD_INT 36
15676: PUSH
15677: EMPTY
15678: LIST
15679: LIST
15680: LIST
15681: LIST
15682: LIST
15683: LIST
15684: LIST
15685: LIST
15686: LIST
15687: LIST
15688: LIST
15689: LIST
15690: LIST
15691: LIST
15692: LIST
15693: LIST
15694: LIST
15695: LIST
15696: LIST
15697: LIST
15698: LIST
15699: LIST
15700: LIST
15701: LIST
15702: LIST
15703: LIST
15704: LIST
15705: LIST
15706: LIST
15707: LIST
15708: LIST
15709: PUSH
15710: LD_INT 101
15712: PUSH
15713: LD_INT 102
15715: PUSH
15716: LD_INT 103
15718: PUSH
15719: LD_INT 104
15721: PUSH
15722: LD_INT 105
15724: PUSH
15725: LD_INT 106
15727: PUSH
15728: LD_INT 107
15730: PUSH
15731: LD_INT 108
15733: PUSH
15734: LD_INT 109
15736: PUSH
15737: LD_INT 110
15739: PUSH
15740: LD_INT 111
15742: PUSH
15743: LD_INT 112
15745: PUSH
15746: LD_INT 114
15748: PUSH
15749: LD_INT 116
15751: PUSH
15752: LD_INT 117
15754: PUSH
15755: LD_INT 118
15757: PUSH
15758: EMPTY
15759: LIST
15760: LIST
15761: LIST
15762: LIST
15763: LIST
15764: LIST
15765: LIST
15766: LIST
15767: LIST
15768: LIST
15769: LIST
15770: LIST
15771: LIST
15772: LIST
15773: LIST
15774: LIST
15775: PUSH
15776: EMPTY
15777: LIST
15778: LIST
15779: ST_TO_ADDR
15780: GO 17463
15782: LD_INT 12
15784: DOUBLE
15785: EQUAL
15786: IFTRUE 15790
15788: GO 16010
15790: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
15791: LD_ADDR_VAR 0 2
15795: PUSH
15796: LD_INT 1
15798: PUSH
15799: LD_INT 2
15801: PUSH
15802: LD_INT 3
15804: PUSH
15805: LD_INT 4
15807: PUSH
15808: LD_INT 5
15810: PUSH
15811: LD_INT 6
15813: PUSH
15814: LD_INT 7
15816: PUSH
15817: LD_INT 8
15819: PUSH
15820: LD_INT 9
15822: PUSH
15823: LD_INT 10
15825: PUSH
15826: LD_INT 11
15828: PUSH
15829: LD_INT 12
15831: PUSH
15832: LD_INT 13
15834: PUSH
15835: LD_INT 14
15837: PUSH
15838: LD_INT 15
15840: PUSH
15841: LD_INT 16
15843: PUSH
15844: LD_INT 17
15846: PUSH
15847: LD_INT 18
15849: PUSH
15850: LD_INT 19
15852: PUSH
15853: LD_INT 20
15855: PUSH
15856: LD_INT 21
15858: PUSH
15859: LD_INT 22
15861: PUSH
15862: LD_INT 23
15864: PUSH
15865: LD_INT 24
15867: PUSH
15868: LD_INT 25
15870: PUSH
15871: LD_INT 26
15873: PUSH
15874: LD_INT 27
15876: PUSH
15877: LD_INT 28
15879: PUSH
15880: LD_INT 30
15882: PUSH
15883: LD_INT 31
15885: PUSH
15886: LD_INT 32
15888: PUSH
15889: LD_INT 33
15891: PUSH
15892: LD_INT 34
15894: PUSH
15895: LD_INT 36
15897: PUSH
15898: EMPTY
15899: LIST
15900: LIST
15901: LIST
15902: LIST
15903: LIST
15904: LIST
15905: LIST
15906: LIST
15907: LIST
15908: LIST
15909: LIST
15910: LIST
15911: LIST
15912: LIST
15913: LIST
15914: LIST
15915: LIST
15916: LIST
15917: LIST
15918: LIST
15919: LIST
15920: LIST
15921: LIST
15922: LIST
15923: LIST
15924: LIST
15925: LIST
15926: LIST
15927: LIST
15928: LIST
15929: LIST
15930: LIST
15931: LIST
15932: LIST
15933: PUSH
15934: LD_INT 101
15936: PUSH
15937: LD_INT 102
15939: PUSH
15940: LD_INT 103
15942: PUSH
15943: LD_INT 104
15945: PUSH
15946: LD_INT 105
15948: PUSH
15949: LD_INT 106
15951: PUSH
15952: LD_INT 107
15954: PUSH
15955: LD_INT 108
15957: PUSH
15958: LD_INT 109
15960: PUSH
15961: LD_INT 110
15963: PUSH
15964: LD_INT 111
15966: PUSH
15967: LD_INT 112
15969: PUSH
15970: LD_INT 113
15972: PUSH
15973: LD_INT 114
15975: PUSH
15976: LD_INT 116
15978: PUSH
15979: LD_INT 117
15981: PUSH
15982: LD_INT 118
15984: PUSH
15985: EMPTY
15986: LIST
15987: LIST
15988: LIST
15989: LIST
15990: LIST
15991: LIST
15992: LIST
15993: LIST
15994: LIST
15995: LIST
15996: LIST
15997: LIST
15998: LIST
15999: LIST
16000: LIST
16001: LIST
16002: LIST
16003: PUSH
16004: EMPTY
16005: LIST
16006: LIST
16007: ST_TO_ADDR
16008: GO 17463
16010: LD_INT 13
16012: DOUBLE
16013: EQUAL
16014: IFTRUE 16018
16016: GO 16226
16018: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
16019: LD_ADDR_VAR 0 2
16023: PUSH
16024: LD_INT 1
16026: PUSH
16027: LD_INT 2
16029: PUSH
16030: LD_INT 3
16032: PUSH
16033: LD_INT 4
16035: PUSH
16036: LD_INT 5
16038: PUSH
16039: LD_INT 8
16041: PUSH
16042: LD_INT 9
16044: PUSH
16045: LD_INT 10
16047: PUSH
16048: LD_INT 11
16050: PUSH
16051: LD_INT 12
16053: PUSH
16054: LD_INT 14
16056: PUSH
16057: LD_INT 15
16059: PUSH
16060: LD_INT 16
16062: PUSH
16063: LD_INT 17
16065: PUSH
16066: LD_INT 18
16068: PUSH
16069: LD_INT 19
16071: PUSH
16072: LD_INT 20
16074: PUSH
16075: LD_INT 21
16077: PUSH
16078: LD_INT 22
16080: PUSH
16081: LD_INT 23
16083: PUSH
16084: LD_INT 24
16086: PUSH
16087: LD_INT 25
16089: PUSH
16090: LD_INT 26
16092: PUSH
16093: LD_INT 27
16095: PUSH
16096: LD_INT 28
16098: PUSH
16099: LD_INT 30
16101: PUSH
16102: LD_INT 31
16104: PUSH
16105: LD_INT 32
16107: PUSH
16108: LD_INT 33
16110: PUSH
16111: LD_INT 34
16113: PUSH
16114: LD_INT 36
16116: PUSH
16117: EMPTY
16118: LIST
16119: LIST
16120: LIST
16121: LIST
16122: LIST
16123: LIST
16124: LIST
16125: LIST
16126: LIST
16127: LIST
16128: LIST
16129: LIST
16130: LIST
16131: LIST
16132: LIST
16133: LIST
16134: LIST
16135: LIST
16136: LIST
16137: LIST
16138: LIST
16139: LIST
16140: LIST
16141: LIST
16142: LIST
16143: LIST
16144: LIST
16145: LIST
16146: LIST
16147: LIST
16148: LIST
16149: PUSH
16150: LD_INT 101
16152: PUSH
16153: LD_INT 102
16155: PUSH
16156: LD_INT 103
16158: PUSH
16159: LD_INT 104
16161: PUSH
16162: LD_INT 105
16164: PUSH
16165: LD_INT 106
16167: PUSH
16168: LD_INT 107
16170: PUSH
16171: LD_INT 108
16173: PUSH
16174: LD_INT 109
16176: PUSH
16177: LD_INT 110
16179: PUSH
16180: LD_INT 111
16182: PUSH
16183: LD_INT 112
16185: PUSH
16186: LD_INT 113
16188: PUSH
16189: LD_INT 114
16191: PUSH
16192: LD_INT 116
16194: PUSH
16195: LD_INT 117
16197: PUSH
16198: LD_INT 118
16200: PUSH
16201: EMPTY
16202: LIST
16203: LIST
16204: LIST
16205: LIST
16206: LIST
16207: LIST
16208: LIST
16209: LIST
16210: LIST
16211: LIST
16212: LIST
16213: LIST
16214: LIST
16215: LIST
16216: LIST
16217: LIST
16218: LIST
16219: PUSH
16220: EMPTY
16221: LIST
16222: LIST
16223: ST_TO_ADDR
16224: GO 17463
16226: LD_INT 14
16228: DOUBLE
16229: EQUAL
16230: IFTRUE 16234
16232: GO 16458
16234: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
16235: LD_ADDR_VAR 0 2
16239: PUSH
16240: LD_INT 1
16242: PUSH
16243: LD_INT 2
16245: PUSH
16246: LD_INT 3
16248: PUSH
16249: LD_INT 4
16251: PUSH
16252: LD_INT 5
16254: PUSH
16255: LD_INT 6
16257: PUSH
16258: LD_INT 7
16260: PUSH
16261: LD_INT 8
16263: PUSH
16264: LD_INT 9
16266: PUSH
16267: LD_INT 10
16269: PUSH
16270: LD_INT 11
16272: PUSH
16273: LD_INT 12
16275: PUSH
16276: LD_INT 13
16278: PUSH
16279: LD_INT 14
16281: PUSH
16282: LD_INT 15
16284: PUSH
16285: LD_INT 16
16287: PUSH
16288: LD_INT 17
16290: PUSH
16291: LD_INT 18
16293: PUSH
16294: LD_INT 19
16296: PUSH
16297: LD_INT 20
16299: PUSH
16300: LD_INT 21
16302: PUSH
16303: LD_INT 22
16305: PUSH
16306: LD_INT 23
16308: PUSH
16309: LD_INT 24
16311: PUSH
16312: LD_INT 25
16314: PUSH
16315: LD_INT 26
16317: PUSH
16318: LD_INT 27
16320: PUSH
16321: LD_INT 28
16323: PUSH
16324: LD_INT 29
16326: PUSH
16327: LD_INT 30
16329: PUSH
16330: LD_INT 31
16332: PUSH
16333: LD_INT 32
16335: PUSH
16336: LD_INT 33
16338: PUSH
16339: LD_INT 34
16341: PUSH
16342: LD_INT 36
16344: PUSH
16345: EMPTY
16346: LIST
16347: LIST
16348: LIST
16349: LIST
16350: LIST
16351: LIST
16352: LIST
16353: LIST
16354: LIST
16355: LIST
16356: LIST
16357: LIST
16358: LIST
16359: LIST
16360: LIST
16361: LIST
16362: LIST
16363: LIST
16364: LIST
16365: LIST
16366: LIST
16367: LIST
16368: LIST
16369: LIST
16370: LIST
16371: LIST
16372: LIST
16373: LIST
16374: LIST
16375: LIST
16376: LIST
16377: LIST
16378: LIST
16379: LIST
16380: LIST
16381: PUSH
16382: LD_INT 101
16384: PUSH
16385: LD_INT 102
16387: PUSH
16388: LD_INT 103
16390: PUSH
16391: LD_INT 104
16393: PUSH
16394: LD_INT 105
16396: PUSH
16397: LD_INT 106
16399: PUSH
16400: LD_INT 107
16402: PUSH
16403: LD_INT 108
16405: PUSH
16406: LD_INT 109
16408: PUSH
16409: LD_INT 110
16411: PUSH
16412: LD_INT 111
16414: PUSH
16415: LD_INT 112
16417: PUSH
16418: LD_INT 113
16420: PUSH
16421: LD_INT 114
16423: PUSH
16424: LD_INT 116
16426: PUSH
16427: LD_INT 117
16429: PUSH
16430: LD_INT 118
16432: PUSH
16433: EMPTY
16434: LIST
16435: LIST
16436: LIST
16437: LIST
16438: LIST
16439: LIST
16440: LIST
16441: LIST
16442: LIST
16443: LIST
16444: LIST
16445: LIST
16446: LIST
16447: LIST
16448: LIST
16449: LIST
16450: LIST
16451: PUSH
16452: EMPTY
16453: LIST
16454: LIST
16455: ST_TO_ADDR
16456: GO 17463
16458: LD_INT 15
16460: DOUBLE
16461: EQUAL
16462: IFTRUE 16466
16464: GO 16690
16466: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
16467: LD_ADDR_VAR 0 2
16471: PUSH
16472: LD_INT 1
16474: PUSH
16475: LD_INT 2
16477: PUSH
16478: LD_INT 3
16480: PUSH
16481: LD_INT 4
16483: PUSH
16484: LD_INT 5
16486: PUSH
16487: LD_INT 6
16489: PUSH
16490: LD_INT 7
16492: PUSH
16493: LD_INT 8
16495: PUSH
16496: LD_INT 9
16498: PUSH
16499: LD_INT 10
16501: PUSH
16502: LD_INT 11
16504: PUSH
16505: LD_INT 12
16507: PUSH
16508: LD_INT 13
16510: PUSH
16511: LD_INT 14
16513: PUSH
16514: LD_INT 15
16516: PUSH
16517: LD_INT 16
16519: PUSH
16520: LD_INT 17
16522: PUSH
16523: LD_INT 18
16525: PUSH
16526: LD_INT 19
16528: PUSH
16529: LD_INT 20
16531: PUSH
16532: LD_INT 21
16534: PUSH
16535: LD_INT 22
16537: PUSH
16538: LD_INT 23
16540: PUSH
16541: LD_INT 24
16543: PUSH
16544: LD_INT 25
16546: PUSH
16547: LD_INT 26
16549: PUSH
16550: LD_INT 27
16552: PUSH
16553: LD_INT 28
16555: PUSH
16556: LD_INT 29
16558: PUSH
16559: LD_INT 30
16561: PUSH
16562: LD_INT 31
16564: PUSH
16565: LD_INT 32
16567: PUSH
16568: LD_INT 33
16570: PUSH
16571: LD_INT 34
16573: PUSH
16574: LD_INT 36
16576: PUSH
16577: EMPTY
16578: LIST
16579: LIST
16580: LIST
16581: LIST
16582: LIST
16583: LIST
16584: LIST
16585: LIST
16586: LIST
16587: LIST
16588: LIST
16589: LIST
16590: LIST
16591: LIST
16592: LIST
16593: LIST
16594: LIST
16595: LIST
16596: LIST
16597: LIST
16598: LIST
16599: LIST
16600: LIST
16601: LIST
16602: LIST
16603: LIST
16604: LIST
16605: LIST
16606: LIST
16607: LIST
16608: LIST
16609: LIST
16610: LIST
16611: LIST
16612: LIST
16613: PUSH
16614: LD_INT 101
16616: PUSH
16617: LD_INT 102
16619: PUSH
16620: LD_INT 103
16622: PUSH
16623: LD_INT 104
16625: PUSH
16626: LD_INT 105
16628: PUSH
16629: LD_INT 106
16631: PUSH
16632: LD_INT 107
16634: PUSH
16635: LD_INT 108
16637: PUSH
16638: LD_INT 109
16640: PUSH
16641: LD_INT 110
16643: PUSH
16644: LD_INT 111
16646: PUSH
16647: LD_INT 112
16649: PUSH
16650: LD_INT 113
16652: PUSH
16653: LD_INT 114
16655: PUSH
16656: LD_INT 116
16658: PUSH
16659: LD_INT 117
16661: PUSH
16662: LD_INT 118
16664: PUSH
16665: EMPTY
16666: LIST
16667: LIST
16668: LIST
16669: LIST
16670: LIST
16671: LIST
16672: LIST
16673: LIST
16674: LIST
16675: LIST
16676: LIST
16677: LIST
16678: LIST
16679: LIST
16680: LIST
16681: LIST
16682: LIST
16683: PUSH
16684: EMPTY
16685: LIST
16686: LIST
16687: ST_TO_ADDR
16688: GO 17463
16690: LD_INT 16
16692: DOUBLE
16693: EQUAL
16694: IFTRUE 16698
16696: GO 16834
16698: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
16699: LD_ADDR_VAR 0 2
16703: PUSH
16704: LD_INT 2
16706: PUSH
16707: LD_INT 4
16709: PUSH
16710: LD_INT 5
16712: PUSH
16713: LD_INT 7
16715: PUSH
16716: LD_INT 11
16718: PUSH
16719: LD_INT 12
16721: PUSH
16722: LD_INT 15
16724: PUSH
16725: LD_INT 16
16727: PUSH
16728: LD_INT 20
16730: PUSH
16731: LD_INT 21
16733: PUSH
16734: LD_INT 22
16736: PUSH
16737: LD_INT 23
16739: PUSH
16740: LD_INT 25
16742: PUSH
16743: LD_INT 26
16745: PUSH
16746: LD_INT 30
16748: PUSH
16749: LD_INT 31
16751: PUSH
16752: LD_INT 32
16754: PUSH
16755: LD_INT 33
16757: PUSH
16758: LD_INT 34
16760: PUSH
16761: EMPTY
16762: LIST
16763: LIST
16764: LIST
16765: LIST
16766: LIST
16767: LIST
16768: LIST
16769: LIST
16770: LIST
16771: LIST
16772: LIST
16773: LIST
16774: LIST
16775: LIST
16776: LIST
16777: LIST
16778: LIST
16779: LIST
16780: LIST
16781: PUSH
16782: LD_INT 101
16784: PUSH
16785: LD_INT 102
16787: PUSH
16788: LD_INT 103
16790: PUSH
16791: LD_INT 106
16793: PUSH
16794: LD_INT 108
16796: PUSH
16797: LD_INT 112
16799: PUSH
16800: LD_INT 113
16802: PUSH
16803: LD_INT 114
16805: PUSH
16806: LD_INT 116
16808: PUSH
16809: LD_INT 117
16811: PUSH
16812: LD_INT 118
16814: PUSH
16815: EMPTY
16816: LIST
16817: LIST
16818: LIST
16819: LIST
16820: LIST
16821: LIST
16822: LIST
16823: LIST
16824: LIST
16825: LIST
16826: LIST
16827: PUSH
16828: EMPTY
16829: LIST
16830: LIST
16831: ST_TO_ADDR
16832: GO 17463
16834: LD_INT 17
16836: DOUBLE
16837: EQUAL
16838: IFTRUE 16842
16840: GO 17066
16842: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
16843: LD_ADDR_VAR 0 2
16847: PUSH
16848: LD_INT 1
16850: PUSH
16851: LD_INT 2
16853: PUSH
16854: LD_INT 3
16856: PUSH
16857: LD_INT 4
16859: PUSH
16860: LD_INT 5
16862: PUSH
16863: LD_INT 6
16865: PUSH
16866: LD_INT 7
16868: PUSH
16869: LD_INT 8
16871: PUSH
16872: LD_INT 9
16874: PUSH
16875: LD_INT 10
16877: PUSH
16878: LD_INT 11
16880: PUSH
16881: LD_INT 12
16883: PUSH
16884: LD_INT 13
16886: PUSH
16887: LD_INT 14
16889: PUSH
16890: LD_INT 15
16892: PUSH
16893: LD_INT 16
16895: PUSH
16896: LD_INT 17
16898: PUSH
16899: LD_INT 18
16901: PUSH
16902: LD_INT 19
16904: PUSH
16905: LD_INT 20
16907: PUSH
16908: LD_INT 21
16910: PUSH
16911: LD_INT 22
16913: PUSH
16914: LD_INT 23
16916: PUSH
16917: LD_INT 24
16919: PUSH
16920: LD_INT 25
16922: PUSH
16923: LD_INT 26
16925: PUSH
16926: LD_INT 27
16928: PUSH
16929: LD_INT 28
16931: PUSH
16932: LD_INT 29
16934: PUSH
16935: LD_INT 30
16937: PUSH
16938: LD_INT 31
16940: PUSH
16941: LD_INT 32
16943: PUSH
16944: LD_INT 33
16946: PUSH
16947: LD_INT 34
16949: PUSH
16950: LD_INT 36
16952: PUSH
16953: EMPTY
16954: LIST
16955: LIST
16956: LIST
16957: LIST
16958: LIST
16959: LIST
16960: LIST
16961: LIST
16962: LIST
16963: LIST
16964: LIST
16965: LIST
16966: LIST
16967: LIST
16968: LIST
16969: LIST
16970: LIST
16971: LIST
16972: LIST
16973: LIST
16974: LIST
16975: LIST
16976: LIST
16977: LIST
16978: LIST
16979: LIST
16980: LIST
16981: LIST
16982: LIST
16983: LIST
16984: LIST
16985: LIST
16986: LIST
16987: LIST
16988: LIST
16989: PUSH
16990: LD_INT 101
16992: PUSH
16993: LD_INT 102
16995: PUSH
16996: LD_INT 103
16998: PUSH
16999: LD_INT 104
17001: PUSH
17002: LD_INT 105
17004: PUSH
17005: LD_INT 106
17007: PUSH
17008: LD_INT 107
17010: PUSH
17011: LD_INT 108
17013: PUSH
17014: LD_INT 109
17016: PUSH
17017: LD_INT 110
17019: PUSH
17020: LD_INT 111
17022: PUSH
17023: LD_INT 112
17025: PUSH
17026: LD_INT 113
17028: PUSH
17029: LD_INT 114
17031: PUSH
17032: LD_INT 116
17034: PUSH
17035: LD_INT 117
17037: PUSH
17038: LD_INT 118
17040: PUSH
17041: EMPTY
17042: LIST
17043: LIST
17044: LIST
17045: LIST
17046: LIST
17047: LIST
17048: LIST
17049: LIST
17050: LIST
17051: LIST
17052: LIST
17053: LIST
17054: LIST
17055: LIST
17056: LIST
17057: LIST
17058: LIST
17059: PUSH
17060: EMPTY
17061: LIST
17062: LIST
17063: ST_TO_ADDR
17064: GO 17463
17066: LD_INT 18
17068: DOUBLE
17069: EQUAL
17070: IFTRUE 17074
17072: GO 17222
17074: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
17075: LD_ADDR_VAR 0 2
17079: PUSH
17080: LD_INT 2
17082: PUSH
17083: LD_INT 4
17085: PUSH
17086: LD_INT 5
17088: PUSH
17089: LD_INT 7
17091: PUSH
17092: LD_INT 11
17094: PUSH
17095: LD_INT 12
17097: PUSH
17098: LD_INT 15
17100: PUSH
17101: LD_INT 16
17103: PUSH
17104: LD_INT 20
17106: PUSH
17107: LD_INT 21
17109: PUSH
17110: LD_INT 22
17112: PUSH
17113: LD_INT 23
17115: PUSH
17116: LD_INT 25
17118: PUSH
17119: LD_INT 26
17121: PUSH
17122: LD_INT 30
17124: PUSH
17125: LD_INT 31
17127: PUSH
17128: LD_INT 32
17130: PUSH
17131: LD_INT 33
17133: PUSH
17134: LD_INT 34
17136: PUSH
17137: LD_INT 35
17139: PUSH
17140: LD_INT 36
17142: PUSH
17143: EMPTY
17144: LIST
17145: LIST
17146: LIST
17147: LIST
17148: LIST
17149: LIST
17150: LIST
17151: LIST
17152: LIST
17153: LIST
17154: LIST
17155: LIST
17156: LIST
17157: LIST
17158: LIST
17159: LIST
17160: LIST
17161: LIST
17162: LIST
17163: LIST
17164: LIST
17165: PUSH
17166: LD_INT 101
17168: PUSH
17169: LD_INT 102
17171: PUSH
17172: LD_INT 103
17174: PUSH
17175: LD_INT 106
17177: PUSH
17178: LD_INT 108
17180: PUSH
17181: LD_INT 112
17183: PUSH
17184: LD_INT 113
17186: PUSH
17187: LD_INT 114
17189: PUSH
17190: LD_INT 115
17192: PUSH
17193: LD_INT 116
17195: PUSH
17196: LD_INT 117
17198: PUSH
17199: LD_INT 118
17201: PUSH
17202: EMPTY
17203: LIST
17204: LIST
17205: LIST
17206: LIST
17207: LIST
17208: LIST
17209: LIST
17210: LIST
17211: LIST
17212: LIST
17213: LIST
17214: LIST
17215: PUSH
17216: EMPTY
17217: LIST
17218: LIST
17219: ST_TO_ADDR
17220: GO 17463
17222: LD_INT 19
17224: DOUBLE
17225: EQUAL
17226: IFTRUE 17230
17228: GO 17462
17230: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
17231: LD_ADDR_VAR 0 2
17235: PUSH
17236: LD_INT 1
17238: PUSH
17239: LD_INT 2
17241: PUSH
17242: LD_INT 3
17244: PUSH
17245: LD_INT 4
17247: PUSH
17248: LD_INT 5
17250: PUSH
17251: LD_INT 6
17253: PUSH
17254: LD_INT 7
17256: PUSH
17257: LD_INT 8
17259: PUSH
17260: LD_INT 9
17262: PUSH
17263: LD_INT 10
17265: PUSH
17266: LD_INT 11
17268: PUSH
17269: LD_INT 12
17271: PUSH
17272: LD_INT 13
17274: PUSH
17275: LD_INT 14
17277: PUSH
17278: LD_INT 15
17280: PUSH
17281: LD_INT 16
17283: PUSH
17284: LD_INT 17
17286: PUSH
17287: LD_INT 18
17289: PUSH
17290: LD_INT 19
17292: PUSH
17293: LD_INT 20
17295: PUSH
17296: LD_INT 21
17298: PUSH
17299: LD_INT 22
17301: PUSH
17302: LD_INT 23
17304: PUSH
17305: LD_INT 24
17307: PUSH
17308: LD_INT 25
17310: PUSH
17311: LD_INT 26
17313: PUSH
17314: LD_INT 27
17316: PUSH
17317: LD_INT 28
17319: PUSH
17320: LD_INT 29
17322: PUSH
17323: LD_INT 30
17325: PUSH
17326: LD_INT 31
17328: PUSH
17329: LD_INT 32
17331: PUSH
17332: LD_INT 33
17334: PUSH
17335: LD_INT 34
17337: PUSH
17338: LD_INT 35
17340: PUSH
17341: LD_INT 36
17343: PUSH
17344: EMPTY
17345: LIST
17346: LIST
17347: LIST
17348: LIST
17349: LIST
17350: LIST
17351: LIST
17352: LIST
17353: LIST
17354: LIST
17355: LIST
17356: LIST
17357: LIST
17358: LIST
17359: LIST
17360: LIST
17361: LIST
17362: LIST
17363: LIST
17364: LIST
17365: LIST
17366: LIST
17367: LIST
17368: LIST
17369: LIST
17370: LIST
17371: LIST
17372: LIST
17373: LIST
17374: LIST
17375: LIST
17376: LIST
17377: LIST
17378: LIST
17379: LIST
17380: LIST
17381: PUSH
17382: LD_INT 101
17384: PUSH
17385: LD_INT 102
17387: PUSH
17388: LD_INT 103
17390: PUSH
17391: LD_INT 104
17393: PUSH
17394: LD_INT 105
17396: PUSH
17397: LD_INT 106
17399: PUSH
17400: LD_INT 107
17402: PUSH
17403: LD_INT 108
17405: PUSH
17406: LD_INT 109
17408: PUSH
17409: LD_INT 110
17411: PUSH
17412: LD_INT 111
17414: PUSH
17415: LD_INT 112
17417: PUSH
17418: LD_INT 113
17420: PUSH
17421: LD_INT 114
17423: PUSH
17424: LD_INT 115
17426: PUSH
17427: LD_INT 116
17429: PUSH
17430: LD_INT 117
17432: PUSH
17433: LD_INT 118
17435: PUSH
17436: EMPTY
17437: LIST
17438: LIST
17439: LIST
17440: LIST
17441: LIST
17442: LIST
17443: LIST
17444: LIST
17445: LIST
17446: LIST
17447: LIST
17448: LIST
17449: LIST
17450: LIST
17451: LIST
17452: LIST
17453: LIST
17454: LIST
17455: PUSH
17456: EMPTY
17457: LIST
17458: LIST
17459: ST_TO_ADDR
17460: GO 17463
17462: POP
// end else
17463: GO 17694
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
17465: LD_ADDR_VAR 0 2
17469: PUSH
17470: LD_INT 1
17472: PUSH
17473: LD_INT 2
17475: PUSH
17476: LD_INT 3
17478: PUSH
17479: LD_INT 4
17481: PUSH
17482: LD_INT 5
17484: PUSH
17485: LD_INT 6
17487: PUSH
17488: LD_INT 7
17490: PUSH
17491: LD_INT 8
17493: PUSH
17494: LD_INT 9
17496: PUSH
17497: LD_INT 10
17499: PUSH
17500: LD_INT 11
17502: PUSH
17503: LD_INT 12
17505: PUSH
17506: LD_INT 13
17508: PUSH
17509: LD_INT 14
17511: PUSH
17512: LD_INT 15
17514: PUSH
17515: LD_INT 16
17517: PUSH
17518: LD_INT 17
17520: PUSH
17521: LD_INT 18
17523: PUSH
17524: LD_INT 19
17526: PUSH
17527: LD_INT 20
17529: PUSH
17530: LD_INT 21
17532: PUSH
17533: LD_INT 22
17535: PUSH
17536: LD_INT 23
17538: PUSH
17539: LD_INT 24
17541: PUSH
17542: LD_INT 25
17544: PUSH
17545: LD_INT 26
17547: PUSH
17548: LD_INT 27
17550: PUSH
17551: LD_INT 28
17553: PUSH
17554: LD_INT 29
17556: PUSH
17557: LD_INT 30
17559: PUSH
17560: LD_INT 31
17562: PUSH
17563: LD_INT 32
17565: PUSH
17566: LD_INT 33
17568: PUSH
17569: LD_INT 34
17571: PUSH
17572: LD_INT 35
17574: PUSH
17575: LD_INT 36
17577: PUSH
17578: EMPTY
17579: LIST
17580: LIST
17581: LIST
17582: LIST
17583: LIST
17584: LIST
17585: LIST
17586: LIST
17587: LIST
17588: LIST
17589: LIST
17590: LIST
17591: LIST
17592: LIST
17593: LIST
17594: LIST
17595: LIST
17596: LIST
17597: LIST
17598: LIST
17599: LIST
17600: LIST
17601: LIST
17602: LIST
17603: LIST
17604: LIST
17605: LIST
17606: LIST
17607: LIST
17608: LIST
17609: LIST
17610: LIST
17611: LIST
17612: LIST
17613: LIST
17614: LIST
17615: PUSH
17616: LD_INT 101
17618: PUSH
17619: LD_INT 102
17621: PUSH
17622: LD_INT 103
17624: PUSH
17625: LD_INT 104
17627: PUSH
17628: LD_INT 105
17630: PUSH
17631: LD_INT 106
17633: PUSH
17634: LD_INT 107
17636: PUSH
17637: LD_INT 108
17639: PUSH
17640: LD_INT 109
17642: PUSH
17643: LD_INT 110
17645: PUSH
17646: LD_INT 111
17648: PUSH
17649: LD_INT 112
17651: PUSH
17652: LD_INT 113
17654: PUSH
17655: LD_INT 114
17657: PUSH
17658: LD_INT 115
17660: PUSH
17661: LD_INT 116
17663: PUSH
17664: LD_INT 117
17666: PUSH
17667: LD_INT 118
17669: PUSH
17670: EMPTY
17671: LIST
17672: LIST
17673: LIST
17674: LIST
17675: LIST
17676: LIST
17677: LIST
17678: LIST
17679: LIST
17680: LIST
17681: LIST
17682: LIST
17683: LIST
17684: LIST
17685: LIST
17686: LIST
17687: LIST
17688: LIST
17689: PUSH
17690: EMPTY
17691: LIST
17692: LIST
17693: ST_TO_ADDR
// if result then
17694: LD_VAR 0 2
17698: IFFALSE 18484
// begin normal :=  ;
17700: LD_ADDR_VAR 0 5
17704: PUSH
17705: LD_STRING 
17707: ST_TO_ADDR
// hardcore :=  ;
17708: LD_ADDR_VAR 0 6
17712: PUSH
17713: LD_STRING 
17715: ST_TO_ADDR
// active :=  ;
17716: LD_ADDR_VAR 0 7
17720: PUSH
17721: LD_STRING 
17723: ST_TO_ADDR
// for i = 1 to normalCounter do
17724: LD_ADDR_VAR 0 8
17728: PUSH
17729: DOUBLE
17730: LD_INT 1
17732: DEC
17733: ST_TO_ADDR
17734: LD_EXP 23
17738: PUSH
17739: FOR_TO
17740: IFFALSE 17841
// begin tmp := 0 ;
17742: LD_ADDR_VAR 0 3
17746: PUSH
17747: LD_STRING 0
17749: ST_TO_ADDR
// if result [ 1 ] then
17750: LD_VAR 0 2
17754: PUSH
17755: LD_INT 1
17757: ARRAY
17758: IFFALSE 17823
// if result [ 1 ] [ 1 ] = i then
17760: LD_VAR 0 2
17764: PUSH
17765: LD_INT 1
17767: ARRAY
17768: PUSH
17769: LD_INT 1
17771: ARRAY
17772: PUSH
17773: LD_VAR 0 8
17777: EQUAL
17778: IFFALSE 17823
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
17780: LD_ADDR_VAR 0 2
17784: PUSH
17785: LD_VAR 0 2
17789: PPUSH
17790: LD_INT 1
17792: PPUSH
17793: LD_VAR 0 2
17797: PUSH
17798: LD_INT 1
17800: ARRAY
17801: PPUSH
17802: LD_INT 1
17804: PPUSH
17805: CALL_OW 3
17809: PPUSH
17810: CALL_OW 1
17814: ST_TO_ADDR
// tmp := 1 ;
17815: LD_ADDR_VAR 0 3
17819: PUSH
17820: LD_STRING 1
17822: ST_TO_ADDR
// end ; normal := normal & tmp ;
17823: LD_ADDR_VAR 0 5
17827: PUSH
17828: LD_VAR 0 5
17832: PUSH
17833: LD_VAR 0 3
17837: STR
17838: ST_TO_ADDR
// end ;
17839: GO 17739
17841: POP
17842: POP
// for i = 1 to hardcoreCounter do
17843: LD_ADDR_VAR 0 8
17847: PUSH
17848: DOUBLE
17849: LD_INT 1
17851: DEC
17852: ST_TO_ADDR
17853: LD_EXP 24
17857: PUSH
17858: FOR_TO
17859: IFFALSE 17964
// begin tmp := 0 ;
17861: LD_ADDR_VAR 0 3
17865: PUSH
17866: LD_STRING 0
17868: ST_TO_ADDR
// if result [ 2 ] then
17869: LD_VAR 0 2
17873: PUSH
17874: LD_INT 2
17876: ARRAY
17877: IFFALSE 17946
// if result [ 2 ] [ 1 ] = 100 + i then
17879: LD_VAR 0 2
17883: PUSH
17884: LD_INT 2
17886: ARRAY
17887: PUSH
17888: LD_INT 1
17890: ARRAY
17891: PUSH
17892: LD_INT 100
17894: PUSH
17895: LD_VAR 0 8
17899: PLUS
17900: EQUAL
17901: IFFALSE 17946
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
17903: LD_ADDR_VAR 0 2
17907: PUSH
17908: LD_VAR 0 2
17912: PPUSH
17913: LD_INT 2
17915: PPUSH
17916: LD_VAR 0 2
17920: PUSH
17921: LD_INT 2
17923: ARRAY
17924: PPUSH
17925: LD_INT 1
17927: PPUSH
17928: CALL_OW 3
17932: PPUSH
17933: CALL_OW 1
17937: ST_TO_ADDR
// tmp := 1 ;
17938: LD_ADDR_VAR 0 3
17942: PUSH
17943: LD_STRING 1
17945: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
17946: LD_ADDR_VAR 0 6
17950: PUSH
17951: LD_VAR 0 6
17955: PUSH
17956: LD_VAR 0 3
17960: STR
17961: ST_TO_ADDR
// end ;
17962: GO 17858
17964: POP
17965: POP
// if isGameLoad then
17966: LD_VAR 0 1
17970: IFFALSE 18445
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
17972: LD_ADDR_VAR 0 4
17976: PUSH
17977: LD_EXP 27
17981: PUSH
17982: LD_EXP 26
17986: PUSH
17987: LD_EXP 28
17991: PUSH
17992: LD_EXP 25
17996: PUSH
17997: LD_EXP 29
18001: PUSH
18002: LD_EXP 30
18006: PUSH
18007: LD_EXP 31
18011: PUSH
18012: LD_EXP 32
18016: PUSH
18017: LD_EXP 33
18021: PUSH
18022: LD_EXP 34
18026: PUSH
18027: LD_EXP 35
18031: PUSH
18032: LD_EXP 36
18036: PUSH
18037: LD_EXP 37
18041: PUSH
18042: LD_EXP 38
18046: PUSH
18047: LD_EXP 46
18051: PUSH
18052: LD_EXP 47
18056: PUSH
18057: LD_EXP 48
18061: PUSH
18062: LD_EXP 49
18066: PUSH
18067: LD_EXP 51
18071: PUSH
18072: LD_EXP 52
18076: PUSH
18077: LD_EXP 53
18081: PUSH
18082: LD_EXP 56
18086: PUSH
18087: LD_EXP 58
18091: PUSH
18092: LD_EXP 59
18096: PUSH
18097: LD_EXP 60
18101: PUSH
18102: LD_EXP 62
18106: PUSH
18107: LD_EXP 63
18111: PUSH
18112: LD_EXP 66
18116: PUSH
18117: LD_EXP 67
18121: PUSH
18122: LD_EXP 68
18126: PUSH
18127: LD_EXP 69
18131: PUSH
18132: LD_EXP 70
18136: PUSH
18137: LD_EXP 71
18141: PUSH
18142: LD_EXP 72
18146: PUSH
18147: LD_EXP 73
18151: PUSH
18152: LD_EXP 74
18156: PUSH
18157: LD_EXP 39
18161: PUSH
18162: LD_EXP 40
18166: PUSH
18167: LD_EXP 43
18171: PUSH
18172: LD_EXP 44
18176: PUSH
18177: LD_EXP 45
18181: PUSH
18182: LD_EXP 41
18186: PUSH
18187: LD_EXP 42
18191: PUSH
18192: LD_EXP 50
18196: PUSH
18197: LD_EXP 54
18201: PUSH
18202: LD_EXP 55
18206: PUSH
18207: LD_EXP 57
18211: PUSH
18212: LD_EXP 61
18216: PUSH
18217: LD_EXP 64
18221: PUSH
18222: LD_EXP 65
18226: PUSH
18227: LD_EXP 75
18231: PUSH
18232: LD_EXP 76
18236: PUSH
18237: LD_EXP 77
18241: PUSH
18242: LD_EXP 78
18246: PUSH
18247: EMPTY
18248: LIST
18249: LIST
18250: LIST
18251: LIST
18252: LIST
18253: LIST
18254: LIST
18255: LIST
18256: LIST
18257: LIST
18258: LIST
18259: LIST
18260: LIST
18261: LIST
18262: LIST
18263: LIST
18264: LIST
18265: LIST
18266: LIST
18267: LIST
18268: LIST
18269: LIST
18270: LIST
18271: LIST
18272: LIST
18273: LIST
18274: LIST
18275: LIST
18276: LIST
18277: LIST
18278: LIST
18279: LIST
18280: LIST
18281: LIST
18282: LIST
18283: LIST
18284: LIST
18285: LIST
18286: LIST
18287: LIST
18288: LIST
18289: LIST
18290: LIST
18291: LIST
18292: LIST
18293: LIST
18294: LIST
18295: LIST
18296: LIST
18297: LIST
18298: LIST
18299: LIST
18300: LIST
18301: LIST
18302: ST_TO_ADDR
// tmp :=  ;
18303: LD_ADDR_VAR 0 3
18307: PUSH
18308: LD_STRING 
18310: ST_TO_ADDR
// for i = 1 to normalCounter do
18311: LD_ADDR_VAR 0 8
18315: PUSH
18316: DOUBLE
18317: LD_INT 1
18319: DEC
18320: ST_TO_ADDR
18321: LD_EXP 23
18325: PUSH
18326: FOR_TO
18327: IFFALSE 18363
// begin if flags [ i ] then
18329: LD_VAR 0 4
18333: PUSH
18334: LD_VAR 0 8
18338: ARRAY
18339: IFFALSE 18361
// tmp := tmp & i & ; ;
18341: LD_ADDR_VAR 0 3
18345: PUSH
18346: LD_VAR 0 3
18350: PUSH
18351: LD_VAR 0 8
18355: STR
18356: PUSH
18357: LD_STRING ;
18359: STR
18360: ST_TO_ADDR
// end ;
18361: GO 18326
18363: POP
18364: POP
// for i = 1 to hardcoreCounter do
18365: LD_ADDR_VAR 0 8
18369: PUSH
18370: DOUBLE
18371: LD_INT 1
18373: DEC
18374: ST_TO_ADDR
18375: LD_EXP 24
18379: PUSH
18380: FOR_TO
18381: IFFALSE 18427
// begin if flags [ normalCounter + i ] then
18383: LD_VAR 0 4
18387: PUSH
18388: LD_EXP 23
18392: PUSH
18393: LD_VAR 0 8
18397: PLUS
18398: ARRAY
18399: IFFALSE 18425
// tmp := tmp & ( 100 + i ) & ; ;
18401: LD_ADDR_VAR 0 3
18405: PUSH
18406: LD_VAR 0 3
18410: PUSH
18411: LD_INT 100
18413: PUSH
18414: LD_VAR 0 8
18418: PLUS
18419: STR
18420: PUSH
18421: LD_STRING ;
18423: STR
18424: ST_TO_ADDR
// end ;
18425: GO 18380
18427: POP
18428: POP
// if tmp then
18429: LD_VAR 0 3
18433: IFFALSE 18445
// active := tmp ;
18435: LD_ADDR_VAR 0 7
18439: PUSH
18440: LD_VAR 0 3
18444: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
18445: LD_STRING getStreamItemsFromMission("
18447: PUSH
18448: LD_VAR 0 5
18452: STR
18453: PUSH
18454: LD_STRING ","
18456: STR
18457: PUSH
18458: LD_VAR 0 6
18462: STR
18463: PUSH
18464: LD_STRING ","
18466: STR
18467: PUSH
18468: LD_VAR 0 7
18472: STR
18473: PUSH
18474: LD_STRING ")
18476: STR
18477: PPUSH
18478: CALL_OW 559
// end else
18482: GO 18491
// ToLua ( getStreamItemsFromMission("","","") ) ;
18484: LD_STRING getStreamItemsFromMission("","","")
18486: PPUSH
18487: CALL_OW 559
// end ;
18491: LD_VAR 0 2
18495: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
18496: LD_EXP 22
18500: IFFALSE 18508
18502: PUSH
18503: LD_EXP 27
18507: AND
18508: IFFALSE 18632
18510: GO 18512
18512: DISABLE
18513: LD_INT 0
18515: PPUSH
18516: PPUSH
// begin enable ;
18517: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
18518: LD_ADDR_VAR 0 2
18522: PUSH
18523: LD_INT 22
18525: PUSH
18526: LD_OWVAR 2
18530: PUSH
18531: EMPTY
18532: LIST
18533: LIST
18534: PUSH
18535: LD_INT 2
18537: PUSH
18538: LD_INT 34
18540: PUSH
18541: LD_INT 7
18543: PUSH
18544: EMPTY
18545: LIST
18546: LIST
18547: PUSH
18548: LD_INT 34
18550: PUSH
18551: LD_INT 45
18553: PUSH
18554: EMPTY
18555: LIST
18556: LIST
18557: PUSH
18558: LD_INT 34
18560: PUSH
18561: LD_INT 28
18563: PUSH
18564: EMPTY
18565: LIST
18566: LIST
18567: PUSH
18568: LD_INT 34
18570: PUSH
18571: LD_INT 47
18573: PUSH
18574: EMPTY
18575: LIST
18576: LIST
18577: PUSH
18578: EMPTY
18579: LIST
18580: LIST
18581: LIST
18582: LIST
18583: LIST
18584: PUSH
18585: EMPTY
18586: LIST
18587: LIST
18588: PPUSH
18589: CALL_OW 69
18593: ST_TO_ADDR
// if not tmp then
18594: LD_VAR 0 2
18598: NOT
18599: IFFALSE 18603
// exit ;
18601: GO 18632
// for i in tmp do
18603: LD_ADDR_VAR 0 1
18607: PUSH
18608: LD_VAR 0 2
18612: PUSH
18613: FOR_IN
18614: IFFALSE 18630
// begin SetLives ( i , 0 ) ;
18616: LD_VAR 0 1
18620: PPUSH
18621: LD_INT 0
18623: PPUSH
18624: CALL_OW 234
// end ;
18628: GO 18613
18630: POP
18631: POP
// end ;
18632: PPOPN 2
18634: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
18635: LD_EXP 22
18639: IFFALSE 18647
18641: PUSH
18642: LD_EXP 28
18646: AND
18647: IFFALSE 18731
18649: GO 18651
18651: DISABLE
18652: LD_INT 0
18654: PPUSH
18655: PPUSH
// begin enable ;
18656: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
18657: LD_ADDR_VAR 0 2
18661: PUSH
18662: LD_INT 22
18664: PUSH
18665: LD_OWVAR 2
18669: PUSH
18670: EMPTY
18671: LIST
18672: LIST
18673: PUSH
18674: LD_INT 32
18676: PUSH
18677: LD_INT 3
18679: PUSH
18680: EMPTY
18681: LIST
18682: LIST
18683: PUSH
18684: EMPTY
18685: LIST
18686: LIST
18687: PPUSH
18688: CALL_OW 69
18692: ST_TO_ADDR
// if not tmp then
18693: LD_VAR 0 2
18697: NOT
18698: IFFALSE 18702
// exit ;
18700: GO 18731
// for i in tmp do
18702: LD_ADDR_VAR 0 1
18706: PUSH
18707: LD_VAR 0 2
18711: PUSH
18712: FOR_IN
18713: IFFALSE 18729
// begin SetLives ( i , 0 ) ;
18715: LD_VAR 0 1
18719: PPUSH
18720: LD_INT 0
18722: PPUSH
18723: CALL_OW 234
// end ;
18727: GO 18712
18729: POP
18730: POP
// end ;
18731: PPOPN 2
18733: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
18734: LD_EXP 22
18738: IFFALSE 18746
18740: PUSH
18741: LD_EXP 25
18745: AND
18746: IFFALSE 18839
18748: GO 18750
18750: DISABLE
18751: LD_INT 0
18753: PPUSH
// begin enable ;
18754: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
18755: LD_ADDR_VAR 0 1
18759: PUSH
18760: LD_INT 22
18762: PUSH
18763: LD_OWVAR 2
18767: PUSH
18768: EMPTY
18769: LIST
18770: LIST
18771: PUSH
18772: LD_INT 2
18774: PUSH
18775: LD_INT 25
18777: PUSH
18778: LD_INT 5
18780: PUSH
18781: EMPTY
18782: LIST
18783: LIST
18784: PUSH
18785: LD_INT 25
18787: PUSH
18788: LD_INT 9
18790: PUSH
18791: EMPTY
18792: LIST
18793: LIST
18794: PUSH
18795: LD_INT 25
18797: PUSH
18798: LD_INT 8
18800: PUSH
18801: EMPTY
18802: LIST
18803: LIST
18804: PUSH
18805: EMPTY
18806: LIST
18807: LIST
18808: LIST
18809: LIST
18810: PUSH
18811: EMPTY
18812: LIST
18813: LIST
18814: PPUSH
18815: CALL_OW 69
18819: PUSH
18820: FOR_IN
18821: IFFALSE 18837
// begin SetClass ( i , 1 ) ;
18823: LD_VAR 0 1
18827: PPUSH
18828: LD_INT 1
18830: PPUSH
18831: CALL_OW 336
// end ;
18835: GO 18820
18837: POP
18838: POP
// end ;
18839: PPOPN 1
18841: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
18842: LD_EXP 22
18846: IFFALSE 18854
18848: PUSH
18849: LD_EXP 26
18853: AND
18854: IFFALSE 18866
18856: PUSH
18857: LD_OWVAR 65
18861: PUSH
18862: LD_INT 7
18864: LESS
18865: AND
18866: IFFALSE 18880
18868: GO 18870
18870: DISABLE
// begin enable ;
18871: ENABLE
// game_speed := 7 ;
18872: LD_ADDR_OWVAR 65
18876: PUSH
18877: LD_INT 7
18879: ST_TO_ADDR
// end ;
18880: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
18881: LD_EXP 22
18885: IFFALSE 18893
18887: PUSH
18888: LD_EXP 29
18892: AND
18893: IFFALSE 19095
18895: GO 18897
18897: DISABLE
18898: LD_INT 0
18900: PPUSH
18901: PPUSH
18902: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
18903: LD_ADDR_VAR 0 3
18907: PUSH
18908: LD_INT 81
18910: PUSH
18911: LD_OWVAR 2
18915: PUSH
18916: EMPTY
18917: LIST
18918: LIST
18919: PUSH
18920: LD_INT 21
18922: PUSH
18923: LD_INT 1
18925: PUSH
18926: EMPTY
18927: LIST
18928: LIST
18929: PUSH
18930: EMPTY
18931: LIST
18932: LIST
18933: PPUSH
18934: CALL_OW 69
18938: ST_TO_ADDR
// if not tmp then
18939: LD_VAR 0 3
18943: NOT
18944: IFFALSE 18948
// exit ;
18946: GO 19095
// if tmp > 5 then
18948: LD_VAR 0 3
18952: PUSH
18953: LD_INT 5
18955: GREATER
18956: IFFALSE 18968
// k := 5 else
18958: LD_ADDR_VAR 0 2
18962: PUSH
18963: LD_INT 5
18965: ST_TO_ADDR
18966: GO 18978
// k := tmp ;
18968: LD_ADDR_VAR 0 2
18972: PUSH
18973: LD_VAR 0 3
18977: ST_TO_ADDR
// for i := 1 to k do
18978: LD_ADDR_VAR 0 1
18982: PUSH
18983: DOUBLE
18984: LD_INT 1
18986: DEC
18987: ST_TO_ADDR
18988: LD_VAR 0 2
18992: PUSH
18993: FOR_TO
18994: IFFALSE 19093
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
18996: LD_VAR 0 3
19000: PUSH
19001: LD_VAR 0 1
19005: ARRAY
19006: PPUSH
19007: LD_VAR 0 1
19011: PUSH
19012: LD_INT 4
19014: MOD
19015: PUSH
19016: LD_INT 1
19018: PLUS
19019: PPUSH
19020: CALL_OW 259
19024: PUSH
19025: LD_INT 10
19027: LESS
19028: IFFALSE 19091
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
19030: LD_VAR 0 3
19034: PUSH
19035: LD_VAR 0 1
19039: ARRAY
19040: PPUSH
19041: LD_VAR 0 1
19045: PUSH
19046: LD_INT 4
19048: MOD
19049: PUSH
19050: LD_INT 1
19052: PLUS
19053: PPUSH
19054: LD_VAR 0 3
19058: PUSH
19059: LD_VAR 0 1
19063: ARRAY
19064: PPUSH
19065: LD_VAR 0 1
19069: PUSH
19070: LD_INT 4
19072: MOD
19073: PUSH
19074: LD_INT 1
19076: PLUS
19077: PPUSH
19078: CALL_OW 259
19082: PUSH
19083: LD_INT 1
19085: PLUS
19086: PPUSH
19087: CALL_OW 237
19091: GO 18993
19093: POP
19094: POP
// end ;
19095: PPOPN 3
19097: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
19098: LD_EXP 22
19102: IFFALSE 19110
19104: PUSH
19105: LD_EXP 30
19109: AND
19110: IFFALSE 19130
19112: GO 19114
19114: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
19115: LD_INT 4
19117: PPUSH
19118: LD_OWVAR 2
19122: PPUSH
19123: LD_INT 0
19125: PPUSH
19126: CALL_OW 324
19130: END
// every 0 0$1 trigger StreamModeActive and sShovel do
19131: LD_EXP 22
19135: IFFALSE 19143
19137: PUSH
19138: LD_EXP 59
19142: AND
19143: IFFALSE 19163
19145: GO 19147
19147: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
19148: LD_INT 19
19150: PPUSH
19151: LD_OWVAR 2
19155: PPUSH
19156: LD_INT 0
19158: PPUSH
19159: CALL_OW 324
19163: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
19164: LD_EXP 22
19168: IFFALSE 19176
19170: PUSH
19171: LD_EXP 31
19175: AND
19176: IFFALSE 19278
19178: GO 19180
19180: DISABLE
19181: LD_INT 0
19183: PPUSH
19184: PPUSH
// begin enable ;
19185: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
19186: LD_ADDR_VAR 0 2
19190: PUSH
19191: LD_INT 22
19193: PUSH
19194: LD_OWVAR 2
19198: PUSH
19199: EMPTY
19200: LIST
19201: LIST
19202: PUSH
19203: LD_INT 2
19205: PUSH
19206: LD_INT 34
19208: PUSH
19209: LD_INT 11
19211: PUSH
19212: EMPTY
19213: LIST
19214: LIST
19215: PUSH
19216: LD_INT 34
19218: PUSH
19219: LD_INT 30
19221: PUSH
19222: EMPTY
19223: LIST
19224: LIST
19225: PUSH
19226: EMPTY
19227: LIST
19228: LIST
19229: LIST
19230: PUSH
19231: EMPTY
19232: LIST
19233: LIST
19234: PPUSH
19235: CALL_OW 69
19239: ST_TO_ADDR
// if not tmp then
19240: LD_VAR 0 2
19244: NOT
19245: IFFALSE 19249
// exit ;
19247: GO 19278
// for i in tmp do
19249: LD_ADDR_VAR 0 1
19253: PUSH
19254: LD_VAR 0 2
19258: PUSH
19259: FOR_IN
19260: IFFALSE 19276
// begin SetLives ( i , 0 ) ;
19262: LD_VAR 0 1
19266: PPUSH
19267: LD_INT 0
19269: PPUSH
19270: CALL_OW 234
// end ;
19274: GO 19259
19276: POP
19277: POP
// end ;
19278: PPOPN 2
19280: END
// every 0 0$1 trigger StreamModeActive and sBunker do
19281: LD_EXP 22
19285: IFFALSE 19293
19287: PUSH
19288: LD_EXP 32
19292: AND
19293: IFFALSE 19313
19295: GO 19297
19297: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
19298: LD_INT 32
19300: PPUSH
19301: LD_OWVAR 2
19305: PPUSH
19306: LD_INT 0
19308: PPUSH
19309: CALL_OW 324
19313: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
19314: LD_EXP 22
19318: IFFALSE 19326
19320: PUSH
19321: LD_EXP 33
19325: AND
19326: IFFALSE 19509
19328: GO 19330
19330: DISABLE
19331: LD_INT 0
19333: PPUSH
19334: PPUSH
19335: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
19336: LD_ADDR_VAR 0 2
19340: PUSH
19341: LD_INT 22
19343: PUSH
19344: LD_OWVAR 2
19348: PUSH
19349: EMPTY
19350: LIST
19351: LIST
19352: PUSH
19353: LD_INT 33
19355: PUSH
19356: LD_INT 3
19358: PUSH
19359: EMPTY
19360: LIST
19361: LIST
19362: PUSH
19363: EMPTY
19364: LIST
19365: LIST
19366: PPUSH
19367: CALL_OW 69
19371: ST_TO_ADDR
// if not tmp then
19372: LD_VAR 0 2
19376: NOT
19377: IFFALSE 19381
// exit ;
19379: GO 19509
// side := 0 ;
19381: LD_ADDR_VAR 0 3
19385: PUSH
19386: LD_INT 0
19388: ST_TO_ADDR
// for i := 1 to 8 do
19389: LD_ADDR_VAR 0 1
19393: PUSH
19394: DOUBLE
19395: LD_INT 1
19397: DEC
19398: ST_TO_ADDR
19399: LD_INT 8
19401: PUSH
19402: FOR_TO
19403: IFFALSE 19453
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
19405: LD_OWVAR 2
19409: PUSH
19410: LD_VAR 0 1
19414: NONEQUAL
19415: IFFALSE 19437
19417: PUSH
19418: LD_OWVAR 2
19422: PPUSH
19423: LD_VAR 0 1
19427: PPUSH
19428: CALL_OW 81
19432: PUSH
19433: LD_INT 2
19435: EQUAL
19436: AND
19437: IFFALSE 19451
// begin side := i ;
19439: LD_ADDR_VAR 0 3
19443: PUSH
19444: LD_VAR 0 1
19448: ST_TO_ADDR
// break ;
19449: GO 19453
// end ;
19451: GO 19402
19453: POP
19454: POP
// if not side then
19455: LD_VAR 0 3
19459: NOT
19460: IFFALSE 19464
// exit ;
19462: GO 19509
// for i := 1 to tmp do
19464: LD_ADDR_VAR 0 1
19468: PUSH
19469: DOUBLE
19470: LD_INT 1
19472: DEC
19473: ST_TO_ADDR
19474: LD_VAR 0 2
19478: PUSH
19479: FOR_TO
19480: IFFALSE 19507
// if Prob ( 60 ) then
19482: LD_INT 60
19484: PPUSH
19485: CALL_OW 13
19489: IFFALSE 19505
// SetSide ( i , side ) ;
19491: LD_VAR 0 1
19495: PPUSH
19496: LD_VAR 0 3
19500: PPUSH
19501: CALL_OW 235
19505: GO 19479
19507: POP
19508: POP
// end ;
19509: PPOPN 3
19511: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
19512: LD_EXP 22
19516: IFFALSE 19524
19518: PUSH
19519: LD_EXP 35
19523: AND
19524: IFFALSE 19643
19526: GO 19528
19528: DISABLE
19529: LD_INT 0
19531: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
19532: LD_ADDR_VAR 0 1
19536: PUSH
19537: LD_INT 22
19539: PUSH
19540: LD_OWVAR 2
19544: PUSH
19545: EMPTY
19546: LIST
19547: LIST
19548: PUSH
19549: LD_INT 21
19551: PUSH
19552: LD_INT 1
19554: PUSH
19555: EMPTY
19556: LIST
19557: LIST
19558: PUSH
19559: LD_INT 3
19561: PUSH
19562: LD_INT 23
19564: PUSH
19565: LD_INT 0
19567: PUSH
19568: EMPTY
19569: LIST
19570: LIST
19571: PUSH
19572: EMPTY
19573: LIST
19574: LIST
19575: PUSH
19576: EMPTY
19577: LIST
19578: LIST
19579: LIST
19580: PPUSH
19581: CALL_OW 69
19585: PUSH
19586: FOR_IN
19587: IFFALSE 19641
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
19589: LD_VAR 0 1
19593: PPUSH
19594: CALL_OW 257
19598: PUSH
19599: LD_INT 1
19601: PUSH
19602: LD_INT 2
19604: PUSH
19605: LD_INT 3
19607: PUSH
19608: LD_INT 4
19610: PUSH
19611: EMPTY
19612: LIST
19613: LIST
19614: LIST
19615: LIST
19616: IN
19617: IFFALSE 19639
// SetClass ( un , rand ( 1 , 4 ) ) ;
19619: LD_VAR 0 1
19623: PPUSH
19624: LD_INT 1
19626: PPUSH
19627: LD_INT 4
19629: PPUSH
19630: CALL_OW 12
19634: PPUSH
19635: CALL_OW 336
19639: GO 19586
19641: POP
19642: POP
// end ;
19643: PPOPN 1
19645: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
19646: LD_EXP 22
19650: IFFALSE 19658
19652: PUSH
19653: LD_EXP 34
19657: AND
19658: IFFALSE 19737
19660: GO 19662
19662: DISABLE
19663: LD_INT 0
19665: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
19666: LD_ADDR_VAR 0 1
19670: PUSH
19671: LD_INT 22
19673: PUSH
19674: LD_OWVAR 2
19678: PUSH
19679: EMPTY
19680: LIST
19681: LIST
19682: PUSH
19683: LD_INT 21
19685: PUSH
19686: LD_INT 3
19688: PUSH
19689: EMPTY
19690: LIST
19691: LIST
19692: PUSH
19693: EMPTY
19694: LIST
19695: LIST
19696: PPUSH
19697: CALL_OW 69
19701: ST_TO_ADDR
// if not tmp then
19702: LD_VAR 0 1
19706: NOT
19707: IFFALSE 19711
// exit ;
19709: GO 19737
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
19711: LD_VAR 0 1
19715: PUSH
19716: LD_INT 1
19718: PPUSH
19719: LD_VAR 0 1
19723: PPUSH
19724: CALL_OW 12
19728: ARRAY
19729: PPUSH
19730: LD_INT 100
19732: PPUSH
19733: CALL_OW 234
// end ;
19737: PPOPN 1
19739: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
19740: LD_EXP 22
19744: IFFALSE 19752
19746: PUSH
19747: LD_EXP 36
19751: AND
19752: IFFALSE 19850
19754: GO 19756
19756: DISABLE
19757: LD_INT 0
19759: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19760: LD_ADDR_VAR 0 1
19764: PUSH
19765: LD_INT 22
19767: PUSH
19768: LD_OWVAR 2
19772: PUSH
19773: EMPTY
19774: LIST
19775: LIST
19776: PUSH
19777: LD_INT 21
19779: PUSH
19780: LD_INT 1
19782: PUSH
19783: EMPTY
19784: LIST
19785: LIST
19786: PUSH
19787: EMPTY
19788: LIST
19789: LIST
19790: PPUSH
19791: CALL_OW 69
19795: ST_TO_ADDR
// if not tmp then
19796: LD_VAR 0 1
19800: NOT
19801: IFFALSE 19805
// exit ;
19803: GO 19850
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
19805: LD_VAR 0 1
19809: PUSH
19810: LD_INT 1
19812: PPUSH
19813: LD_VAR 0 1
19817: PPUSH
19818: CALL_OW 12
19822: ARRAY
19823: PPUSH
19824: LD_INT 1
19826: PPUSH
19827: LD_INT 4
19829: PPUSH
19830: CALL_OW 12
19834: PPUSH
19835: LD_INT 3000
19837: PPUSH
19838: LD_INT 9000
19840: PPUSH
19841: CALL_OW 12
19845: PPUSH
19846: CALL_OW 492
// end ;
19850: PPOPN 1
19852: END
// every 0 0$1 trigger StreamModeActive and sDepot do
19853: LD_EXP 22
19857: IFFALSE 19865
19859: PUSH
19860: LD_EXP 37
19864: AND
19865: IFFALSE 19885
19867: GO 19869
19869: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
19870: LD_INT 1
19872: PPUSH
19873: LD_OWVAR 2
19877: PPUSH
19878: LD_INT 0
19880: PPUSH
19881: CALL_OW 324
19885: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
19886: LD_EXP 22
19890: IFFALSE 19898
19892: PUSH
19893: LD_EXP 38
19897: AND
19898: IFFALSE 19981
19900: GO 19902
19902: DISABLE
19903: LD_INT 0
19905: PPUSH
19906: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
19907: LD_ADDR_VAR 0 2
19911: PUSH
19912: LD_INT 22
19914: PUSH
19915: LD_OWVAR 2
19919: PUSH
19920: EMPTY
19921: LIST
19922: LIST
19923: PUSH
19924: LD_INT 21
19926: PUSH
19927: LD_INT 3
19929: PUSH
19930: EMPTY
19931: LIST
19932: LIST
19933: PUSH
19934: EMPTY
19935: LIST
19936: LIST
19937: PPUSH
19938: CALL_OW 69
19942: ST_TO_ADDR
// if not tmp then
19943: LD_VAR 0 2
19947: NOT
19948: IFFALSE 19952
// exit ;
19950: GO 19981
// for i in tmp do
19952: LD_ADDR_VAR 0 1
19956: PUSH
19957: LD_VAR 0 2
19961: PUSH
19962: FOR_IN
19963: IFFALSE 19979
// SetBLevel ( i , 10 ) ;
19965: LD_VAR 0 1
19969: PPUSH
19970: LD_INT 10
19972: PPUSH
19973: CALL_OW 241
19977: GO 19962
19979: POP
19980: POP
// end ;
19981: PPOPN 2
19983: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
19984: LD_EXP 22
19988: IFFALSE 19996
19990: PUSH
19991: LD_EXP 39
19995: AND
19996: IFFALSE 20107
19998: GO 20000
20000: DISABLE
20001: LD_INT 0
20003: PPUSH
20004: PPUSH
20005: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20006: LD_ADDR_VAR 0 3
20010: PUSH
20011: LD_INT 22
20013: PUSH
20014: LD_OWVAR 2
20018: PUSH
20019: EMPTY
20020: LIST
20021: LIST
20022: PUSH
20023: LD_INT 25
20025: PUSH
20026: LD_INT 1
20028: PUSH
20029: EMPTY
20030: LIST
20031: LIST
20032: PUSH
20033: EMPTY
20034: LIST
20035: LIST
20036: PPUSH
20037: CALL_OW 69
20041: ST_TO_ADDR
// if not tmp then
20042: LD_VAR 0 3
20046: NOT
20047: IFFALSE 20051
// exit ;
20049: GO 20107
// un := tmp [ rand ( 1 , tmp ) ] ;
20051: LD_ADDR_VAR 0 2
20055: PUSH
20056: LD_VAR 0 3
20060: PUSH
20061: LD_INT 1
20063: PPUSH
20064: LD_VAR 0 3
20068: PPUSH
20069: CALL_OW 12
20073: ARRAY
20074: ST_TO_ADDR
// if Crawls ( un ) then
20075: LD_VAR 0 2
20079: PPUSH
20080: CALL_OW 318
20084: IFFALSE 20095
// ComWalk ( un ) ;
20086: LD_VAR 0 2
20090: PPUSH
20091: CALL_OW 138
// SetClass ( un , class_sniper ) ;
20095: LD_VAR 0 2
20099: PPUSH
20100: LD_INT 5
20102: PPUSH
20103: CALL_OW 336
// end ;
20107: PPOPN 3
20109: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
20110: LD_EXP 22
20114: IFFALSE 20122
20116: PUSH
20117: LD_EXP 40
20121: AND
20122: IFFALSE 20134
20124: PUSH
20125: LD_OWVAR 67
20129: PUSH
20130: LD_INT 4
20132: LESS
20133: AND
20134: IFFALSE 20153
20136: GO 20138
20138: DISABLE
// begin Difficulty := Difficulty + 1 ;
20139: LD_ADDR_OWVAR 67
20143: PUSH
20144: LD_OWVAR 67
20148: PUSH
20149: LD_INT 1
20151: PLUS
20152: ST_TO_ADDR
// end ;
20153: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
20154: LD_EXP 22
20158: IFFALSE 20166
20160: PUSH
20161: LD_EXP 41
20165: AND
20166: IFFALSE 20269
20168: GO 20170
20170: DISABLE
20171: LD_INT 0
20173: PPUSH
// begin for i := 1 to 5 do
20174: LD_ADDR_VAR 0 1
20178: PUSH
20179: DOUBLE
20180: LD_INT 1
20182: DEC
20183: ST_TO_ADDR
20184: LD_INT 5
20186: PUSH
20187: FOR_TO
20188: IFFALSE 20267
// begin uc_nation := nation_nature ;
20190: LD_ADDR_OWVAR 21
20194: PUSH
20195: LD_INT 0
20197: ST_TO_ADDR
// uc_side := 0 ;
20198: LD_ADDR_OWVAR 20
20202: PUSH
20203: LD_INT 0
20205: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
20206: LD_ADDR_OWVAR 29
20210: PUSH
20211: LD_INT 12
20213: PUSH
20214: LD_INT 12
20216: PUSH
20217: EMPTY
20218: LIST
20219: LIST
20220: ST_TO_ADDR
// hc_agressivity := 20 ;
20221: LD_ADDR_OWVAR 35
20225: PUSH
20226: LD_INT 20
20228: ST_TO_ADDR
// hc_class := class_tiger ;
20229: LD_ADDR_OWVAR 28
20233: PUSH
20234: LD_INT 14
20236: ST_TO_ADDR
// hc_gallery :=  ;
20237: LD_ADDR_OWVAR 33
20241: PUSH
20242: LD_STRING 
20244: ST_TO_ADDR
// hc_name :=  ;
20245: LD_ADDR_OWVAR 26
20249: PUSH
20250: LD_STRING 
20252: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
20253: CALL_OW 44
20257: PPUSH
20258: LD_INT 0
20260: PPUSH
20261: CALL_OW 51
// end ;
20265: GO 20187
20267: POP
20268: POP
// end ;
20269: PPOPN 1
20271: END
// every 0 0$1 trigger StreamModeActive and sBomb do
20272: LD_EXP 22
20276: IFFALSE 20284
20278: PUSH
20279: LD_EXP 42
20283: AND
20284: IFFALSE 20293
20286: GO 20288
20288: DISABLE
// StreamSibBomb ;
20289: CALL 20294 0 0
20293: END
// export function StreamSibBomb ; var i , x , y ; begin
20294: LD_INT 0
20296: PPUSH
20297: PPUSH
20298: PPUSH
20299: PPUSH
// result := false ;
20300: LD_ADDR_VAR 0 1
20304: PUSH
20305: LD_INT 0
20307: ST_TO_ADDR
// for i := 1 to 16 do
20308: LD_ADDR_VAR 0 2
20312: PUSH
20313: DOUBLE
20314: LD_INT 1
20316: DEC
20317: ST_TO_ADDR
20318: LD_INT 16
20320: PUSH
20321: FOR_TO
20322: IFFALSE 20521
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
20324: LD_ADDR_VAR 0 3
20328: PUSH
20329: LD_INT 10
20331: PUSH
20332: LD_INT 20
20334: PUSH
20335: LD_INT 30
20337: PUSH
20338: LD_INT 40
20340: PUSH
20341: LD_INT 50
20343: PUSH
20344: LD_INT 60
20346: PUSH
20347: LD_INT 70
20349: PUSH
20350: LD_INT 80
20352: PUSH
20353: LD_INT 90
20355: PUSH
20356: LD_INT 100
20358: PUSH
20359: LD_INT 110
20361: PUSH
20362: LD_INT 120
20364: PUSH
20365: LD_INT 130
20367: PUSH
20368: LD_INT 140
20370: PUSH
20371: LD_INT 150
20373: PUSH
20374: EMPTY
20375: LIST
20376: LIST
20377: LIST
20378: LIST
20379: LIST
20380: LIST
20381: LIST
20382: LIST
20383: LIST
20384: LIST
20385: LIST
20386: LIST
20387: LIST
20388: LIST
20389: LIST
20390: PUSH
20391: LD_INT 1
20393: PPUSH
20394: LD_INT 15
20396: PPUSH
20397: CALL_OW 12
20401: ARRAY
20402: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
20403: LD_ADDR_VAR 0 4
20407: PUSH
20408: LD_INT 10
20410: PUSH
20411: LD_INT 20
20413: PUSH
20414: LD_INT 30
20416: PUSH
20417: LD_INT 40
20419: PUSH
20420: LD_INT 50
20422: PUSH
20423: LD_INT 60
20425: PUSH
20426: LD_INT 70
20428: PUSH
20429: LD_INT 80
20431: PUSH
20432: LD_INT 90
20434: PUSH
20435: LD_INT 100
20437: PUSH
20438: LD_INT 110
20440: PUSH
20441: LD_INT 120
20443: PUSH
20444: LD_INT 130
20446: PUSH
20447: LD_INT 140
20449: PUSH
20450: LD_INT 150
20452: PUSH
20453: EMPTY
20454: LIST
20455: LIST
20456: LIST
20457: LIST
20458: LIST
20459: LIST
20460: LIST
20461: LIST
20462: LIST
20463: LIST
20464: LIST
20465: LIST
20466: LIST
20467: LIST
20468: LIST
20469: PUSH
20470: LD_INT 1
20472: PPUSH
20473: LD_INT 15
20475: PPUSH
20476: CALL_OW 12
20480: ARRAY
20481: ST_TO_ADDR
// if ValidHex ( x , y ) then
20482: LD_VAR 0 3
20486: PPUSH
20487: LD_VAR 0 4
20491: PPUSH
20492: CALL_OW 488
20496: IFFALSE 20519
// begin result := [ x , y ] ;
20498: LD_ADDR_VAR 0 1
20502: PUSH
20503: LD_VAR 0 3
20507: PUSH
20508: LD_VAR 0 4
20512: PUSH
20513: EMPTY
20514: LIST
20515: LIST
20516: ST_TO_ADDR
// break ;
20517: GO 20521
// end ; end ;
20519: GO 20321
20521: POP
20522: POP
// if result then
20523: LD_VAR 0 1
20527: IFFALSE 20587
// begin ToLua ( playSibBomb() ) ;
20529: LD_STRING playSibBomb()
20531: PPUSH
20532: CALL_OW 559
// wait ( 0 0$14 ) ;
20536: LD_INT 490
20538: PPUSH
20539: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
20543: LD_VAR 0 1
20547: PUSH
20548: LD_INT 1
20550: ARRAY
20551: PPUSH
20552: LD_VAR 0 1
20556: PUSH
20557: LD_INT 2
20559: ARRAY
20560: PPUSH
20561: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
20565: LD_VAR 0 1
20569: PUSH
20570: LD_INT 1
20572: ARRAY
20573: PPUSH
20574: LD_VAR 0 1
20578: PUSH
20579: LD_INT 2
20581: ARRAY
20582: PPUSH
20583: CALL_OW 429
// end ; end ;
20587: LD_VAR 0 1
20591: RET
// every 0 0$1 trigger StreamModeActive and sReset do
20592: LD_EXP 22
20596: IFFALSE 20604
20598: PUSH
20599: LD_EXP 44
20603: AND
20604: IFFALSE 20616
20606: GO 20608
20608: DISABLE
// YouLost (  ) ;
20609: LD_STRING 
20611: PPUSH
20612: CALL_OW 104
20616: END
// every 0 0$1 trigger StreamModeActive and sFog do
20617: LD_EXP 22
20621: IFFALSE 20629
20623: PUSH
20624: LD_EXP 43
20628: AND
20629: IFFALSE 20643
20631: GO 20633
20633: DISABLE
// FogOff ( your_side ) ;
20634: LD_OWVAR 2
20638: PPUSH
20639: CALL_OW 344
20643: END
// every 0 0$1 trigger StreamModeActive and sSun do
20644: LD_EXP 22
20648: IFFALSE 20656
20650: PUSH
20651: LD_EXP 45
20655: AND
20656: IFFALSE 20684
20658: GO 20660
20660: DISABLE
// begin solar_recharge_percent := 0 ;
20661: LD_ADDR_OWVAR 79
20665: PUSH
20666: LD_INT 0
20668: ST_TO_ADDR
// wait ( 5 5$00 ) ;
20669: LD_INT 10500
20671: PPUSH
20672: CALL_OW 67
// solar_recharge_percent := 100 ;
20676: LD_ADDR_OWVAR 79
20680: PUSH
20681: LD_INT 100
20683: ST_TO_ADDR
// end ;
20684: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
20685: LD_EXP 22
20689: IFFALSE 20697
20691: PUSH
20692: LD_EXP 46
20696: AND
20697: IFFALSE 20936
20699: GO 20701
20701: DISABLE
20702: LD_INT 0
20704: PPUSH
20705: PPUSH
20706: PPUSH
// begin tmp := [ ] ;
20707: LD_ADDR_VAR 0 3
20711: PUSH
20712: EMPTY
20713: ST_TO_ADDR
// for i := 1 to 6 do
20714: LD_ADDR_VAR 0 1
20718: PUSH
20719: DOUBLE
20720: LD_INT 1
20722: DEC
20723: ST_TO_ADDR
20724: LD_INT 6
20726: PUSH
20727: FOR_TO
20728: IFFALSE 20833
// begin uc_nation := nation_nature ;
20730: LD_ADDR_OWVAR 21
20734: PUSH
20735: LD_INT 0
20737: ST_TO_ADDR
// uc_side := 0 ;
20738: LD_ADDR_OWVAR 20
20742: PUSH
20743: LD_INT 0
20745: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
20746: LD_ADDR_OWVAR 29
20750: PUSH
20751: LD_INT 12
20753: PUSH
20754: LD_INT 12
20756: PUSH
20757: EMPTY
20758: LIST
20759: LIST
20760: ST_TO_ADDR
// hc_agressivity := 20 ;
20761: LD_ADDR_OWVAR 35
20765: PUSH
20766: LD_INT 20
20768: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
20769: LD_ADDR_OWVAR 28
20773: PUSH
20774: LD_INT 17
20776: ST_TO_ADDR
// hc_gallery :=  ;
20777: LD_ADDR_OWVAR 33
20781: PUSH
20782: LD_STRING 
20784: ST_TO_ADDR
// hc_name :=  ;
20785: LD_ADDR_OWVAR 26
20789: PUSH
20790: LD_STRING 
20792: ST_TO_ADDR
// un := CreateHuman ;
20793: LD_ADDR_VAR 0 2
20797: PUSH
20798: CALL_OW 44
20802: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
20803: LD_VAR 0 2
20807: PPUSH
20808: LD_INT 1
20810: PPUSH
20811: CALL_OW 51
// tmp := tmp ^ un ;
20815: LD_ADDR_VAR 0 3
20819: PUSH
20820: LD_VAR 0 3
20824: PUSH
20825: LD_VAR 0 2
20829: ADD
20830: ST_TO_ADDR
// end ;
20831: GO 20727
20833: POP
20834: POP
// repeat wait ( 0 0$1 ) ;
20835: LD_INT 35
20837: PPUSH
20838: CALL_OW 67
// for un in tmp do
20842: LD_ADDR_VAR 0 2
20846: PUSH
20847: LD_VAR 0 3
20851: PUSH
20852: FOR_IN
20853: IFFALSE 20927
// begin if IsDead ( un ) then
20855: LD_VAR 0 2
20859: PPUSH
20860: CALL_OW 301
20864: IFFALSE 20884
// begin tmp := tmp diff un ;
20866: LD_ADDR_VAR 0 3
20870: PUSH
20871: LD_VAR 0 3
20875: PUSH
20876: LD_VAR 0 2
20880: DIFF
20881: ST_TO_ADDR
// continue ;
20882: GO 20852
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
20884: LD_VAR 0 2
20888: PPUSH
20889: LD_INT 3
20891: PUSH
20892: LD_INT 22
20894: PUSH
20895: LD_INT 0
20897: PUSH
20898: EMPTY
20899: LIST
20900: LIST
20901: PUSH
20902: EMPTY
20903: LIST
20904: LIST
20905: PPUSH
20906: CALL_OW 69
20910: PPUSH
20911: LD_VAR 0 2
20915: PPUSH
20916: CALL_OW 74
20920: PPUSH
20921: CALL_OW 115
// end ;
20925: GO 20852
20927: POP
20928: POP
// until not tmp ;
20929: LD_VAR 0 3
20933: NOT
20934: IFFALSE 20835
// end ;
20936: PPOPN 3
20938: END
// every 0 0$1 trigger StreamModeActive and sTroll do
20939: LD_EXP 22
20943: IFFALSE 20951
20945: PUSH
20946: LD_EXP 47
20950: AND
20951: IFFALSE 21005
20953: GO 20955
20955: DISABLE
// begin ToLua ( displayTroll(); ) ;
20956: LD_STRING displayTroll();
20958: PPUSH
20959: CALL_OW 559
// wait ( 3 3$00 ) ;
20963: LD_INT 6300
20965: PPUSH
20966: CALL_OW 67
// ToLua ( hideTroll(); ) ;
20970: LD_STRING hideTroll();
20972: PPUSH
20973: CALL_OW 559
// wait ( 1 1$00 ) ;
20977: LD_INT 2100
20979: PPUSH
20980: CALL_OW 67
// ToLua ( displayTroll(); ) ;
20984: LD_STRING displayTroll();
20986: PPUSH
20987: CALL_OW 559
// wait ( 1 1$00 ) ;
20991: LD_INT 2100
20993: PPUSH
20994: CALL_OW 67
// ToLua ( hideTroll(); ) ;
20998: LD_STRING hideTroll();
21000: PPUSH
21001: CALL_OW 559
// end ;
21005: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
21006: LD_EXP 22
21010: IFFALSE 21018
21012: PUSH
21013: LD_EXP 48
21017: AND
21018: IFFALSE 21081
21020: GO 21022
21022: DISABLE
21023: LD_INT 0
21025: PPUSH
// begin p := 0 ;
21026: LD_ADDR_VAR 0 1
21030: PUSH
21031: LD_INT 0
21033: ST_TO_ADDR
// repeat game_speed := 1 ;
21034: LD_ADDR_OWVAR 65
21038: PUSH
21039: LD_INT 1
21041: ST_TO_ADDR
// wait ( 0 0$1 ) ;
21042: LD_INT 35
21044: PPUSH
21045: CALL_OW 67
// p := p + 1 ;
21049: LD_ADDR_VAR 0 1
21053: PUSH
21054: LD_VAR 0 1
21058: PUSH
21059: LD_INT 1
21061: PLUS
21062: ST_TO_ADDR
// until p >= 60 ;
21063: LD_VAR 0 1
21067: PUSH
21068: LD_INT 60
21070: GREATEREQUAL
21071: IFFALSE 21034
// game_speed := 4 ;
21073: LD_ADDR_OWVAR 65
21077: PUSH
21078: LD_INT 4
21080: ST_TO_ADDR
// end ;
21081: PPOPN 1
21083: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
21084: LD_EXP 22
21088: IFFALSE 21096
21090: PUSH
21091: LD_EXP 49
21095: AND
21096: IFFALSE 21242
21098: GO 21100
21100: DISABLE
21101: LD_INT 0
21103: PPUSH
21104: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21105: LD_ADDR_VAR 0 1
21109: PUSH
21110: LD_INT 22
21112: PUSH
21113: LD_OWVAR 2
21117: PUSH
21118: EMPTY
21119: LIST
21120: LIST
21121: PUSH
21122: LD_INT 2
21124: PUSH
21125: LD_INT 30
21127: PUSH
21128: LD_INT 0
21130: PUSH
21131: EMPTY
21132: LIST
21133: LIST
21134: PUSH
21135: LD_INT 30
21137: PUSH
21138: LD_INT 1
21140: PUSH
21141: EMPTY
21142: LIST
21143: LIST
21144: PUSH
21145: EMPTY
21146: LIST
21147: LIST
21148: LIST
21149: PUSH
21150: EMPTY
21151: LIST
21152: LIST
21153: PPUSH
21154: CALL_OW 69
21158: ST_TO_ADDR
// if not depot then
21159: LD_VAR 0 1
21163: NOT
21164: IFFALSE 21168
// exit ;
21166: GO 21242
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
21168: LD_ADDR_VAR 0 2
21172: PUSH
21173: LD_VAR 0 1
21177: PUSH
21178: LD_INT 1
21180: PPUSH
21181: LD_VAR 0 1
21185: PPUSH
21186: CALL_OW 12
21190: ARRAY
21191: PPUSH
21192: CALL_OW 274
21196: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
21197: LD_VAR 0 2
21201: PPUSH
21202: LD_INT 1
21204: PPUSH
21205: LD_INT 0
21207: PPUSH
21208: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
21212: LD_VAR 0 2
21216: PPUSH
21217: LD_INT 2
21219: PPUSH
21220: LD_INT 0
21222: PPUSH
21223: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
21227: LD_VAR 0 2
21231: PPUSH
21232: LD_INT 3
21234: PPUSH
21235: LD_INT 0
21237: PPUSH
21238: CALL_OW 277
// end ;
21242: PPOPN 2
21244: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
21245: LD_EXP 22
21249: IFFALSE 21257
21251: PUSH
21252: LD_EXP 50
21256: AND
21257: IFFALSE 21354
21259: GO 21261
21261: DISABLE
21262: LD_INT 0
21264: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21265: LD_ADDR_VAR 0 1
21269: PUSH
21270: LD_INT 22
21272: PUSH
21273: LD_OWVAR 2
21277: PUSH
21278: EMPTY
21279: LIST
21280: LIST
21281: PUSH
21282: LD_INT 21
21284: PUSH
21285: LD_INT 1
21287: PUSH
21288: EMPTY
21289: LIST
21290: LIST
21291: PUSH
21292: LD_INT 3
21294: PUSH
21295: LD_INT 23
21297: PUSH
21298: LD_INT 0
21300: PUSH
21301: EMPTY
21302: LIST
21303: LIST
21304: PUSH
21305: EMPTY
21306: LIST
21307: LIST
21308: PUSH
21309: EMPTY
21310: LIST
21311: LIST
21312: LIST
21313: PPUSH
21314: CALL_OW 69
21318: ST_TO_ADDR
// if not tmp then
21319: LD_VAR 0 1
21323: NOT
21324: IFFALSE 21328
// exit ;
21326: GO 21354
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
21328: LD_VAR 0 1
21332: PUSH
21333: LD_INT 1
21335: PPUSH
21336: LD_VAR 0 1
21340: PPUSH
21341: CALL_OW 12
21345: ARRAY
21346: PPUSH
21347: LD_INT 200
21349: PPUSH
21350: CALL_OW 234
// end ;
21354: PPOPN 1
21356: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
21357: LD_EXP 22
21361: IFFALSE 21369
21363: PUSH
21364: LD_EXP 51
21368: AND
21369: IFFALSE 21448
21371: GO 21373
21373: DISABLE
21374: LD_INT 0
21376: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
21377: LD_ADDR_VAR 0 1
21381: PUSH
21382: LD_INT 22
21384: PUSH
21385: LD_OWVAR 2
21389: PUSH
21390: EMPTY
21391: LIST
21392: LIST
21393: PUSH
21394: LD_INT 21
21396: PUSH
21397: LD_INT 2
21399: PUSH
21400: EMPTY
21401: LIST
21402: LIST
21403: PUSH
21404: EMPTY
21405: LIST
21406: LIST
21407: PPUSH
21408: CALL_OW 69
21412: ST_TO_ADDR
// if not tmp then
21413: LD_VAR 0 1
21417: NOT
21418: IFFALSE 21422
// exit ;
21420: GO 21448
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
21422: LD_VAR 0 1
21426: PUSH
21427: LD_INT 1
21429: PPUSH
21430: LD_VAR 0 1
21434: PPUSH
21435: CALL_OW 12
21439: ARRAY
21440: PPUSH
21441: LD_INT 60
21443: PPUSH
21444: CALL_OW 234
// end ;
21448: PPOPN 1
21450: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
21451: LD_EXP 22
21455: IFFALSE 21463
21457: PUSH
21458: LD_EXP 52
21462: AND
21463: IFFALSE 21562
21465: GO 21467
21467: DISABLE
21468: LD_INT 0
21470: PPUSH
21471: PPUSH
// begin enable ;
21472: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
21473: LD_ADDR_VAR 0 1
21477: PUSH
21478: LD_INT 22
21480: PUSH
21481: LD_OWVAR 2
21485: PUSH
21486: EMPTY
21487: LIST
21488: LIST
21489: PUSH
21490: LD_INT 61
21492: PUSH
21493: EMPTY
21494: LIST
21495: PUSH
21496: LD_INT 33
21498: PUSH
21499: LD_INT 2
21501: PUSH
21502: EMPTY
21503: LIST
21504: LIST
21505: PUSH
21506: EMPTY
21507: LIST
21508: LIST
21509: LIST
21510: PPUSH
21511: CALL_OW 69
21515: ST_TO_ADDR
// if not tmp then
21516: LD_VAR 0 1
21520: NOT
21521: IFFALSE 21525
// exit ;
21523: GO 21562
// for i in tmp do
21525: LD_ADDR_VAR 0 2
21529: PUSH
21530: LD_VAR 0 1
21534: PUSH
21535: FOR_IN
21536: IFFALSE 21560
// if IsControledBy ( i ) then
21538: LD_VAR 0 2
21542: PPUSH
21543: CALL_OW 312
21547: IFFALSE 21558
// ComUnlink ( i ) ;
21549: LD_VAR 0 2
21553: PPUSH
21554: CALL_OW 136
21558: GO 21535
21560: POP
21561: POP
// end ;
21562: PPOPN 2
21564: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
21565: LD_EXP 22
21569: IFFALSE 21577
21571: PUSH
21572: LD_EXP 53
21576: AND
21577: IFFALSE 21717
21579: GO 21581
21581: DISABLE
21582: LD_INT 0
21584: PPUSH
21585: PPUSH
// begin ToLua ( displayPowell(); ) ;
21586: LD_STRING displayPowell();
21588: PPUSH
21589: CALL_OW 559
// uc_side := 0 ;
21593: LD_ADDR_OWVAR 20
21597: PUSH
21598: LD_INT 0
21600: ST_TO_ADDR
// uc_nation := 2 ;
21601: LD_ADDR_OWVAR 21
21605: PUSH
21606: LD_INT 2
21608: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
21609: LD_ADDR_OWVAR 37
21613: PUSH
21614: LD_INT 14
21616: ST_TO_ADDR
// vc_engine := engine_siberite ;
21617: LD_ADDR_OWVAR 39
21621: PUSH
21622: LD_INT 3
21624: ST_TO_ADDR
// vc_control := control_apeman ;
21625: LD_ADDR_OWVAR 38
21629: PUSH
21630: LD_INT 5
21632: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
21633: LD_ADDR_OWVAR 40
21637: PUSH
21638: LD_INT 29
21640: ST_TO_ADDR
// un := CreateVehicle ;
21641: LD_ADDR_VAR 0 2
21645: PUSH
21646: CALL_OW 45
21650: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21651: LD_VAR 0 2
21655: PPUSH
21656: LD_INT 1
21658: PPUSH
21659: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
21663: LD_INT 35
21665: PPUSH
21666: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
21670: LD_VAR 0 2
21674: PPUSH
21675: LD_INT 22
21677: PUSH
21678: LD_OWVAR 2
21682: PUSH
21683: EMPTY
21684: LIST
21685: LIST
21686: PPUSH
21687: CALL_OW 69
21691: PPUSH
21692: LD_VAR 0 2
21696: PPUSH
21697: CALL_OW 74
21701: PPUSH
21702: CALL_OW 115
// until IsDead ( un ) ;
21706: LD_VAR 0 2
21710: PPUSH
21711: CALL_OW 301
21715: IFFALSE 21663
// end ;
21717: PPOPN 2
21719: END
// every 0 0$1 trigger StreamModeActive and sStu do
21720: LD_EXP 22
21724: IFFALSE 21732
21726: PUSH
21727: LD_EXP 61
21731: AND
21732: IFFALSE 21748
21734: GO 21736
21736: DISABLE
// begin ToLua ( displayStucuk(); ) ;
21737: LD_STRING displayStucuk();
21739: PPUSH
21740: CALL_OW 559
// ResetFog ;
21744: CALL_OW 335
// end ;
21748: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
21749: LD_EXP 22
21753: IFFALSE 21761
21755: PUSH
21756: LD_EXP 54
21760: AND
21761: IFFALSE 21902
21763: GO 21765
21765: DISABLE
21766: LD_INT 0
21768: PPUSH
21769: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
21770: LD_ADDR_VAR 0 2
21774: PUSH
21775: LD_INT 22
21777: PUSH
21778: LD_OWVAR 2
21782: PUSH
21783: EMPTY
21784: LIST
21785: LIST
21786: PUSH
21787: LD_INT 21
21789: PUSH
21790: LD_INT 1
21792: PUSH
21793: EMPTY
21794: LIST
21795: LIST
21796: PUSH
21797: EMPTY
21798: LIST
21799: LIST
21800: PPUSH
21801: CALL_OW 69
21805: ST_TO_ADDR
// if not tmp then
21806: LD_VAR 0 2
21810: NOT
21811: IFFALSE 21815
// exit ;
21813: GO 21902
// un := tmp [ rand ( 1 , tmp ) ] ;
21815: LD_ADDR_VAR 0 1
21819: PUSH
21820: LD_VAR 0 2
21824: PUSH
21825: LD_INT 1
21827: PPUSH
21828: LD_VAR 0 2
21832: PPUSH
21833: CALL_OW 12
21837: ARRAY
21838: ST_TO_ADDR
// SetSide ( un , 0 ) ;
21839: LD_VAR 0 1
21843: PPUSH
21844: LD_INT 0
21846: PPUSH
21847: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
21851: LD_VAR 0 1
21855: PPUSH
21856: LD_OWVAR 3
21860: PUSH
21861: LD_VAR 0 1
21865: DIFF
21866: PPUSH
21867: LD_VAR 0 1
21871: PPUSH
21872: CALL_OW 74
21876: PPUSH
21877: CALL_OW 115
// wait ( 0 0$20 ) ;
21881: LD_INT 700
21883: PPUSH
21884: CALL_OW 67
// SetSide ( un , your_side ) ;
21888: LD_VAR 0 1
21892: PPUSH
21893: LD_OWVAR 2
21897: PPUSH
21898: CALL_OW 235
// end ;
21902: PPOPN 2
21904: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
21905: LD_EXP 22
21909: IFFALSE 21917
21911: PUSH
21912: LD_EXP 55
21916: AND
21917: IFFALSE 22023
21919: GO 21921
21921: DISABLE
21922: LD_INT 0
21924: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21925: LD_ADDR_VAR 0 1
21929: PUSH
21930: LD_INT 22
21932: PUSH
21933: LD_OWVAR 2
21937: PUSH
21938: EMPTY
21939: LIST
21940: LIST
21941: PUSH
21942: LD_INT 2
21944: PUSH
21945: LD_INT 30
21947: PUSH
21948: LD_INT 0
21950: PUSH
21951: EMPTY
21952: LIST
21953: LIST
21954: PUSH
21955: LD_INT 30
21957: PUSH
21958: LD_INT 1
21960: PUSH
21961: EMPTY
21962: LIST
21963: LIST
21964: PUSH
21965: EMPTY
21966: LIST
21967: LIST
21968: LIST
21969: PUSH
21970: EMPTY
21971: LIST
21972: LIST
21973: PPUSH
21974: CALL_OW 69
21978: ST_TO_ADDR
// if not depot then
21979: LD_VAR 0 1
21983: NOT
21984: IFFALSE 21988
// exit ;
21986: GO 22023
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
21988: LD_VAR 0 1
21992: PUSH
21993: LD_INT 1
21995: ARRAY
21996: PPUSH
21997: CALL_OW 250
22001: PPUSH
22002: LD_VAR 0 1
22006: PUSH
22007: LD_INT 1
22009: ARRAY
22010: PPUSH
22011: CALL_OW 251
22015: PPUSH
22016: LD_INT 70
22018: PPUSH
22019: CALL_OW 495
// end ;
22023: PPOPN 1
22025: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
22026: LD_EXP 22
22030: IFFALSE 22038
22032: PUSH
22033: LD_EXP 56
22037: AND
22038: IFFALSE 22249
22040: GO 22042
22042: DISABLE
22043: LD_INT 0
22045: PPUSH
22046: PPUSH
22047: PPUSH
22048: PPUSH
22049: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
22050: LD_ADDR_VAR 0 5
22054: PUSH
22055: LD_INT 22
22057: PUSH
22058: LD_OWVAR 2
22062: PUSH
22063: EMPTY
22064: LIST
22065: LIST
22066: PUSH
22067: LD_INT 21
22069: PUSH
22070: LD_INT 1
22072: PUSH
22073: EMPTY
22074: LIST
22075: LIST
22076: PUSH
22077: EMPTY
22078: LIST
22079: LIST
22080: PPUSH
22081: CALL_OW 69
22085: ST_TO_ADDR
// if not tmp then
22086: LD_VAR 0 5
22090: NOT
22091: IFFALSE 22095
// exit ;
22093: GO 22249
// for i in tmp do
22095: LD_ADDR_VAR 0 1
22099: PUSH
22100: LD_VAR 0 5
22104: PUSH
22105: FOR_IN
22106: IFFALSE 22247
// begin d := rand ( 0 , 5 ) ;
22108: LD_ADDR_VAR 0 4
22112: PUSH
22113: LD_INT 0
22115: PPUSH
22116: LD_INT 5
22118: PPUSH
22119: CALL_OW 12
22123: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
22124: LD_ADDR_VAR 0 2
22128: PUSH
22129: LD_VAR 0 1
22133: PPUSH
22134: CALL_OW 250
22138: PPUSH
22139: LD_VAR 0 4
22143: PPUSH
22144: LD_INT 3
22146: PPUSH
22147: LD_INT 12
22149: PPUSH
22150: CALL_OW 12
22154: PPUSH
22155: CALL_OW 272
22159: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
22160: LD_ADDR_VAR 0 3
22164: PUSH
22165: LD_VAR 0 1
22169: PPUSH
22170: CALL_OW 251
22174: PPUSH
22175: LD_VAR 0 4
22179: PPUSH
22180: LD_INT 3
22182: PPUSH
22183: LD_INT 12
22185: PPUSH
22186: CALL_OW 12
22190: PPUSH
22191: CALL_OW 273
22195: ST_TO_ADDR
// if ValidHex ( x , y ) then
22196: LD_VAR 0 2
22200: PPUSH
22201: LD_VAR 0 3
22205: PPUSH
22206: CALL_OW 488
22210: IFFALSE 22245
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
22212: LD_VAR 0 1
22216: PPUSH
22217: LD_VAR 0 2
22221: PPUSH
22222: LD_VAR 0 3
22226: PPUSH
22227: LD_INT 3
22229: PPUSH
22230: LD_INT 6
22232: PPUSH
22233: CALL_OW 12
22237: PPUSH
22238: LD_INT 1
22240: PPUSH
22241: CALL_OW 483
// end ;
22245: GO 22105
22247: POP
22248: POP
// end ;
22249: PPOPN 5
22251: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
22252: LD_EXP 22
22256: IFFALSE 22264
22258: PUSH
22259: LD_EXP 57
22263: AND
22264: IFFALSE 22358
22266: GO 22268
22268: DISABLE
22269: LD_INT 0
22271: PPUSH
22272: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
22273: LD_ADDR_VAR 0 2
22277: PUSH
22278: LD_INT 22
22280: PUSH
22281: LD_OWVAR 2
22285: PUSH
22286: EMPTY
22287: LIST
22288: LIST
22289: PUSH
22290: LD_INT 32
22292: PUSH
22293: LD_INT 1
22295: PUSH
22296: EMPTY
22297: LIST
22298: LIST
22299: PUSH
22300: LD_INT 21
22302: PUSH
22303: LD_INT 2
22305: PUSH
22306: EMPTY
22307: LIST
22308: LIST
22309: PUSH
22310: EMPTY
22311: LIST
22312: LIST
22313: LIST
22314: PPUSH
22315: CALL_OW 69
22319: ST_TO_ADDR
// if not tmp then
22320: LD_VAR 0 2
22324: NOT
22325: IFFALSE 22329
// exit ;
22327: GO 22358
// for i in tmp do
22329: LD_ADDR_VAR 0 1
22333: PUSH
22334: LD_VAR 0 2
22338: PUSH
22339: FOR_IN
22340: IFFALSE 22356
// SetFuel ( i , 0 ) ;
22342: LD_VAR 0 1
22346: PPUSH
22347: LD_INT 0
22349: PPUSH
22350: CALL_OW 240
22354: GO 22339
22356: POP
22357: POP
// end ;
22358: PPOPN 2
22360: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
22361: LD_EXP 22
22365: IFFALSE 22373
22367: PUSH
22368: LD_EXP 58
22372: AND
22373: IFFALSE 22439
22375: GO 22377
22377: DISABLE
22378: LD_INT 0
22380: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
22381: LD_ADDR_VAR 0 1
22385: PUSH
22386: LD_INT 22
22388: PUSH
22389: LD_OWVAR 2
22393: PUSH
22394: EMPTY
22395: LIST
22396: LIST
22397: PUSH
22398: LD_INT 30
22400: PUSH
22401: LD_INT 29
22403: PUSH
22404: EMPTY
22405: LIST
22406: LIST
22407: PUSH
22408: EMPTY
22409: LIST
22410: LIST
22411: PPUSH
22412: CALL_OW 69
22416: ST_TO_ADDR
// if not tmp then
22417: LD_VAR 0 1
22421: NOT
22422: IFFALSE 22426
// exit ;
22424: GO 22439
// DestroyUnit ( tmp [ 1 ] ) ;
22426: LD_VAR 0 1
22430: PUSH
22431: LD_INT 1
22433: ARRAY
22434: PPUSH
22435: CALL_OW 65
// end ;
22439: PPOPN 1
22441: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
22442: LD_EXP 22
22446: IFFALSE 22454
22448: PUSH
22449: LD_EXP 60
22453: AND
22454: IFFALSE 22583
22456: GO 22458
22458: DISABLE
22459: LD_INT 0
22461: PPUSH
// begin uc_side := 0 ;
22462: LD_ADDR_OWVAR 20
22466: PUSH
22467: LD_INT 0
22469: ST_TO_ADDR
// uc_nation := nation_arabian ;
22470: LD_ADDR_OWVAR 21
22474: PUSH
22475: LD_INT 2
22477: ST_TO_ADDR
// hc_gallery :=  ;
22478: LD_ADDR_OWVAR 33
22482: PUSH
22483: LD_STRING 
22485: ST_TO_ADDR
// hc_name :=  ;
22486: LD_ADDR_OWVAR 26
22490: PUSH
22491: LD_STRING 
22493: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
22494: LD_INT 1
22496: PPUSH
22497: LD_INT 11
22499: PPUSH
22500: LD_INT 10
22502: PPUSH
22503: CALL_OW 380
// un := CreateHuman ;
22507: LD_ADDR_VAR 0 1
22511: PUSH
22512: CALL_OW 44
22516: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
22517: LD_VAR 0 1
22521: PPUSH
22522: LD_INT 1
22524: PPUSH
22525: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
22529: LD_INT 35
22531: PPUSH
22532: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
22536: LD_VAR 0 1
22540: PPUSH
22541: LD_INT 22
22543: PUSH
22544: LD_OWVAR 2
22548: PUSH
22549: EMPTY
22550: LIST
22551: LIST
22552: PPUSH
22553: CALL_OW 69
22557: PPUSH
22558: LD_VAR 0 1
22562: PPUSH
22563: CALL_OW 74
22567: PPUSH
22568: CALL_OW 115
// until IsDead ( un ) ;
22572: LD_VAR 0 1
22576: PPUSH
22577: CALL_OW 301
22581: IFFALSE 22529
// end ;
22583: PPOPN 1
22585: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
22586: LD_EXP 22
22590: IFFALSE 22598
22592: PUSH
22593: LD_EXP 62
22597: AND
22598: IFFALSE 22610
22600: GO 22602
22602: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
22603: LD_STRING earthquake(getX(game), 0, 32)
22605: PPUSH
22606: CALL_OW 559
22610: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
22611: LD_EXP 22
22615: IFFALSE 22623
22617: PUSH
22618: LD_EXP 63
22622: AND
22623: IFFALSE 22714
22625: GO 22627
22627: DISABLE
22628: LD_INT 0
22630: PPUSH
// begin enable ;
22631: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
22632: LD_ADDR_VAR 0 1
22636: PUSH
22637: LD_INT 22
22639: PUSH
22640: LD_OWVAR 2
22644: PUSH
22645: EMPTY
22646: LIST
22647: LIST
22648: PUSH
22649: LD_INT 21
22651: PUSH
22652: LD_INT 2
22654: PUSH
22655: EMPTY
22656: LIST
22657: LIST
22658: PUSH
22659: LD_INT 33
22661: PUSH
22662: LD_INT 3
22664: PUSH
22665: EMPTY
22666: LIST
22667: LIST
22668: PUSH
22669: EMPTY
22670: LIST
22671: LIST
22672: LIST
22673: PPUSH
22674: CALL_OW 69
22678: ST_TO_ADDR
// if not tmp then
22679: LD_VAR 0 1
22683: NOT
22684: IFFALSE 22688
// exit ;
22686: GO 22714
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
22688: LD_VAR 0 1
22692: PUSH
22693: LD_INT 1
22695: PPUSH
22696: LD_VAR 0 1
22700: PPUSH
22701: CALL_OW 12
22705: ARRAY
22706: PPUSH
22707: LD_INT 1
22709: PPUSH
22710: CALL_OW 234
// end ;
22714: PPOPN 1
22716: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
22717: LD_EXP 22
22721: IFFALSE 22729
22723: PUSH
22724: LD_EXP 64
22728: AND
22729: IFFALSE 22870
22731: GO 22733
22733: DISABLE
22734: LD_INT 0
22736: PPUSH
22737: PPUSH
22738: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22739: LD_ADDR_VAR 0 3
22743: PUSH
22744: LD_INT 22
22746: PUSH
22747: LD_OWVAR 2
22751: PUSH
22752: EMPTY
22753: LIST
22754: LIST
22755: PUSH
22756: LD_INT 25
22758: PUSH
22759: LD_INT 1
22761: PUSH
22762: EMPTY
22763: LIST
22764: LIST
22765: PUSH
22766: EMPTY
22767: LIST
22768: LIST
22769: PPUSH
22770: CALL_OW 69
22774: ST_TO_ADDR
// if not tmp then
22775: LD_VAR 0 3
22779: NOT
22780: IFFALSE 22784
// exit ;
22782: GO 22870
// un := tmp [ rand ( 1 , tmp ) ] ;
22784: LD_ADDR_VAR 0 2
22788: PUSH
22789: LD_VAR 0 3
22793: PUSH
22794: LD_INT 1
22796: PPUSH
22797: LD_VAR 0 3
22801: PPUSH
22802: CALL_OW 12
22806: ARRAY
22807: ST_TO_ADDR
// if Crawls ( un ) then
22808: LD_VAR 0 2
22812: PPUSH
22813: CALL_OW 318
22817: IFFALSE 22828
// ComWalk ( un ) ;
22819: LD_VAR 0 2
22823: PPUSH
22824: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
22828: LD_VAR 0 2
22832: PPUSH
22833: LD_INT 9
22835: PPUSH
22836: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
22840: LD_INT 28
22842: PPUSH
22843: LD_OWVAR 2
22847: PPUSH
22848: LD_INT 2
22850: PPUSH
22851: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
22855: LD_INT 29
22857: PPUSH
22858: LD_OWVAR 2
22862: PPUSH
22863: LD_INT 2
22865: PPUSH
22866: CALL_OW 322
// end ;
22870: PPOPN 3
22872: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
22873: LD_EXP 22
22877: IFFALSE 22885
22879: PUSH
22880: LD_EXP 65
22884: AND
22885: IFFALSE 22996
22887: GO 22889
22889: DISABLE
22890: LD_INT 0
22892: PPUSH
22893: PPUSH
22894: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22895: LD_ADDR_VAR 0 3
22899: PUSH
22900: LD_INT 22
22902: PUSH
22903: LD_OWVAR 2
22907: PUSH
22908: EMPTY
22909: LIST
22910: LIST
22911: PUSH
22912: LD_INT 25
22914: PUSH
22915: LD_INT 1
22917: PUSH
22918: EMPTY
22919: LIST
22920: LIST
22921: PUSH
22922: EMPTY
22923: LIST
22924: LIST
22925: PPUSH
22926: CALL_OW 69
22930: ST_TO_ADDR
// if not tmp then
22931: LD_VAR 0 3
22935: NOT
22936: IFFALSE 22940
// exit ;
22938: GO 22996
// un := tmp [ rand ( 1 , tmp ) ] ;
22940: LD_ADDR_VAR 0 2
22944: PUSH
22945: LD_VAR 0 3
22949: PUSH
22950: LD_INT 1
22952: PPUSH
22953: LD_VAR 0 3
22957: PPUSH
22958: CALL_OW 12
22962: ARRAY
22963: ST_TO_ADDR
// if Crawls ( un ) then
22964: LD_VAR 0 2
22968: PPUSH
22969: CALL_OW 318
22973: IFFALSE 22984
// ComWalk ( un ) ;
22975: LD_VAR 0 2
22979: PPUSH
22980: CALL_OW 138
// SetClass ( un , class_mortar ) ;
22984: LD_VAR 0 2
22988: PPUSH
22989: LD_INT 8
22991: PPUSH
22992: CALL_OW 336
// end ;
22996: PPOPN 3
22998: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
22999: LD_EXP 22
23003: IFFALSE 23011
23005: PUSH
23006: LD_EXP 66
23010: AND
23011: IFFALSE 23155
23013: GO 23015
23015: DISABLE
23016: LD_INT 0
23018: PPUSH
23019: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
23020: LD_ADDR_VAR 0 2
23024: PUSH
23025: LD_INT 22
23027: PUSH
23028: LD_OWVAR 2
23032: PUSH
23033: EMPTY
23034: LIST
23035: LIST
23036: PUSH
23037: LD_INT 21
23039: PUSH
23040: LD_INT 2
23042: PUSH
23043: EMPTY
23044: LIST
23045: LIST
23046: PUSH
23047: LD_INT 2
23049: PUSH
23050: LD_INT 34
23052: PUSH
23053: LD_INT 12
23055: PUSH
23056: EMPTY
23057: LIST
23058: LIST
23059: PUSH
23060: LD_INT 34
23062: PUSH
23063: LD_INT 51
23065: PUSH
23066: EMPTY
23067: LIST
23068: LIST
23069: PUSH
23070: LD_INT 34
23072: PUSH
23073: LD_INT 32
23075: PUSH
23076: EMPTY
23077: LIST
23078: LIST
23079: PUSH
23080: EMPTY
23081: LIST
23082: LIST
23083: LIST
23084: LIST
23085: PUSH
23086: EMPTY
23087: LIST
23088: LIST
23089: LIST
23090: PPUSH
23091: CALL_OW 69
23095: ST_TO_ADDR
// if not tmp then
23096: LD_VAR 0 2
23100: NOT
23101: IFFALSE 23105
// exit ;
23103: GO 23155
// for i in tmp do
23105: LD_ADDR_VAR 0 1
23109: PUSH
23110: LD_VAR 0 2
23114: PUSH
23115: FOR_IN
23116: IFFALSE 23153
// if GetCargo ( i , mat_artifact ) = 0 then
23118: LD_VAR 0 1
23122: PPUSH
23123: LD_INT 4
23125: PPUSH
23126: CALL_OW 289
23130: PUSH
23131: LD_INT 0
23133: EQUAL
23134: IFFALSE 23151
// SetCargo ( i , mat_siberit , 100 ) ;
23136: LD_VAR 0 1
23140: PPUSH
23141: LD_INT 3
23143: PPUSH
23144: LD_INT 100
23146: PPUSH
23147: CALL_OW 290
23151: GO 23115
23153: POP
23154: POP
// end ;
23155: PPOPN 2
23157: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
23158: LD_EXP 22
23162: IFFALSE 23170
23164: PUSH
23165: LD_EXP 67
23169: AND
23170: IFFALSE 23353
23172: GO 23174
23174: DISABLE
23175: LD_INT 0
23177: PPUSH
23178: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23179: LD_ADDR_VAR 0 2
23183: PUSH
23184: LD_INT 22
23186: PUSH
23187: LD_OWVAR 2
23191: PUSH
23192: EMPTY
23193: LIST
23194: LIST
23195: PPUSH
23196: CALL_OW 69
23200: ST_TO_ADDR
// if not tmp then
23201: LD_VAR 0 2
23205: NOT
23206: IFFALSE 23210
// exit ;
23208: GO 23353
// for i := 1 to 2 do
23210: LD_ADDR_VAR 0 1
23214: PUSH
23215: DOUBLE
23216: LD_INT 1
23218: DEC
23219: ST_TO_ADDR
23220: LD_INT 2
23222: PUSH
23223: FOR_TO
23224: IFFALSE 23351
// begin uc_side := your_side ;
23226: LD_ADDR_OWVAR 20
23230: PUSH
23231: LD_OWVAR 2
23235: ST_TO_ADDR
// uc_nation := nation_american ;
23236: LD_ADDR_OWVAR 21
23240: PUSH
23241: LD_INT 1
23243: ST_TO_ADDR
// vc_chassis := us_morphling ;
23244: LD_ADDR_OWVAR 37
23248: PUSH
23249: LD_INT 5
23251: ST_TO_ADDR
// vc_engine := engine_siberite ;
23252: LD_ADDR_OWVAR 39
23256: PUSH
23257: LD_INT 3
23259: ST_TO_ADDR
// vc_control := control_computer ;
23260: LD_ADDR_OWVAR 38
23264: PUSH
23265: LD_INT 3
23267: ST_TO_ADDR
// vc_weapon := us_double_laser ;
23268: LD_ADDR_OWVAR 40
23272: PUSH
23273: LD_INT 10
23275: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
23276: LD_VAR 0 2
23280: PUSH
23281: LD_INT 1
23283: ARRAY
23284: PPUSH
23285: CALL_OW 310
23289: NOT
23290: IFFALSE 23337
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
23292: CALL_OW 45
23296: PPUSH
23297: LD_VAR 0 2
23301: PUSH
23302: LD_INT 1
23304: ARRAY
23305: PPUSH
23306: CALL_OW 250
23310: PPUSH
23311: LD_VAR 0 2
23315: PUSH
23316: LD_INT 1
23318: ARRAY
23319: PPUSH
23320: CALL_OW 251
23324: PPUSH
23325: LD_INT 12
23327: PPUSH
23328: LD_INT 1
23330: PPUSH
23331: CALL_OW 50
23335: GO 23349
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
23337: CALL_OW 45
23341: PPUSH
23342: LD_INT 1
23344: PPUSH
23345: CALL_OW 51
// end ;
23349: GO 23223
23351: POP
23352: POP
// end ;
23353: PPOPN 2
23355: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
23356: LD_EXP 22
23360: IFFALSE 23368
23362: PUSH
23363: LD_EXP 68
23367: AND
23368: IFFALSE 23590
23370: GO 23372
23372: DISABLE
23373: LD_INT 0
23375: PPUSH
23376: PPUSH
23377: PPUSH
23378: PPUSH
23379: PPUSH
23380: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
23381: LD_ADDR_VAR 0 6
23385: PUSH
23386: LD_INT 22
23388: PUSH
23389: LD_OWVAR 2
23393: PUSH
23394: EMPTY
23395: LIST
23396: LIST
23397: PUSH
23398: LD_INT 21
23400: PUSH
23401: LD_INT 1
23403: PUSH
23404: EMPTY
23405: LIST
23406: LIST
23407: PUSH
23408: LD_INT 3
23410: PUSH
23411: LD_INT 23
23413: PUSH
23414: LD_INT 0
23416: PUSH
23417: EMPTY
23418: LIST
23419: LIST
23420: PUSH
23421: EMPTY
23422: LIST
23423: LIST
23424: PUSH
23425: EMPTY
23426: LIST
23427: LIST
23428: LIST
23429: PPUSH
23430: CALL_OW 69
23434: ST_TO_ADDR
// if not tmp then
23435: LD_VAR 0 6
23439: NOT
23440: IFFALSE 23444
// exit ;
23442: GO 23590
// s1 := rand ( 1 , 4 ) ;
23444: LD_ADDR_VAR 0 2
23448: PUSH
23449: LD_INT 1
23451: PPUSH
23452: LD_INT 4
23454: PPUSH
23455: CALL_OW 12
23459: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
23460: LD_ADDR_VAR 0 4
23464: PUSH
23465: LD_VAR 0 6
23469: PUSH
23470: LD_INT 1
23472: ARRAY
23473: PPUSH
23474: LD_VAR 0 2
23478: PPUSH
23479: CALL_OW 259
23483: ST_TO_ADDR
// if s1 = 1 then
23484: LD_VAR 0 2
23488: PUSH
23489: LD_INT 1
23491: EQUAL
23492: IFFALSE 23512
// s2 := rand ( 2 , 4 ) else
23494: LD_ADDR_VAR 0 3
23498: PUSH
23499: LD_INT 2
23501: PPUSH
23502: LD_INT 4
23504: PPUSH
23505: CALL_OW 12
23509: ST_TO_ADDR
23510: GO 23520
// s2 := 1 ;
23512: LD_ADDR_VAR 0 3
23516: PUSH
23517: LD_INT 1
23519: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
23520: LD_ADDR_VAR 0 5
23524: PUSH
23525: LD_VAR 0 6
23529: PUSH
23530: LD_INT 1
23532: ARRAY
23533: PPUSH
23534: LD_VAR 0 3
23538: PPUSH
23539: CALL_OW 259
23543: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
23544: LD_VAR 0 6
23548: PUSH
23549: LD_INT 1
23551: ARRAY
23552: PPUSH
23553: LD_VAR 0 2
23557: PPUSH
23558: LD_VAR 0 5
23562: PPUSH
23563: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
23567: LD_VAR 0 6
23571: PUSH
23572: LD_INT 1
23574: ARRAY
23575: PPUSH
23576: LD_VAR 0 3
23580: PPUSH
23581: LD_VAR 0 4
23585: PPUSH
23586: CALL_OW 237
// end ;
23590: PPOPN 6
23592: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
23593: LD_EXP 22
23597: IFFALSE 23605
23599: PUSH
23600: LD_EXP 69
23604: AND
23605: IFFALSE 23684
23607: GO 23609
23609: DISABLE
23610: LD_INT 0
23612: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
23613: LD_ADDR_VAR 0 1
23617: PUSH
23618: LD_INT 22
23620: PUSH
23621: LD_OWVAR 2
23625: PUSH
23626: EMPTY
23627: LIST
23628: LIST
23629: PUSH
23630: LD_INT 30
23632: PUSH
23633: LD_INT 3
23635: PUSH
23636: EMPTY
23637: LIST
23638: LIST
23639: PUSH
23640: EMPTY
23641: LIST
23642: LIST
23643: PPUSH
23644: CALL_OW 69
23648: ST_TO_ADDR
// if not tmp then
23649: LD_VAR 0 1
23653: NOT
23654: IFFALSE 23658
// exit ;
23656: GO 23684
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
23658: LD_VAR 0 1
23662: PUSH
23663: LD_INT 1
23665: PPUSH
23666: LD_VAR 0 1
23670: PPUSH
23671: CALL_OW 12
23675: ARRAY
23676: PPUSH
23677: LD_INT 1
23679: PPUSH
23680: CALL_OW 234
// end ;
23684: PPOPN 1
23686: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
23687: LD_EXP 22
23691: IFFALSE 23699
23693: PUSH
23694: LD_EXP 70
23698: AND
23699: IFFALSE 23811
23701: GO 23703
23703: DISABLE
23704: LD_INT 0
23706: PPUSH
23707: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
23708: LD_ADDR_VAR 0 2
23712: PUSH
23713: LD_INT 22
23715: PUSH
23716: LD_OWVAR 2
23720: PUSH
23721: EMPTY
23722: LIST
23723: LIST
23724: PUSH
23725: LD_INT 2
23727: PUSH
23728: LD_INT 30
23730: PUSH
23731: LD_INT 27
23733: PUSH
23734: EMPTY
23735: LIST
23736: LIST
23737: PUSH
23738: LD_INT 30
23740: PUSH
23741: LD_INT 26
23743: PUSH
23744: EMPTY
23745: LIST
23746: LIST
23747: PUSH
23748: LD_INT 30
23750: PUSH
23751: LD_INT 28
23753: PUSH
23754: EMPTY
23755: LIST
23756: LIST
23757: PUSH
23758: EMPTY
23759: LIST
23760: LIST
23761: LIST
23762: LIST
23763: PUSH
23764: EMPTY
23765: LIST
23766: LIST
23767: PPUSH
23768: CALL_OW 69
23772: ST_TO_ADDR
// if not tmp then
23773: LD_VAR 0 2
23777: NOT
23778: IFFALSE 23782
// exit ;
23780: GO 23811
// for i in tmp do
23782: LD_ADDR_VAR 0 1
23786: PUSH
23787: LD_VAR 0 2
23791: PUSH
23792: FOR_IN
23793: IFFALSE 23809
// SetLives ( i , 1 ) ;
23795: LD_VAR 0 1
23799: PPUSH
23800: LD_INT 1
23802: PPUSH
23803: CALL_OW 234
23807: GO 23792
23809: POP
23810: POP
// end ;
23811: PPOPN 2
23813: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
23814: LD_EXP 22
23818: IFFALSE 23826
23820: PUSH
23821: LD_EXP 71
23825: AND
23826: IFFALSE 24113
23828: GO 23830
23830: DISABLE
23831: LD_INT 0
23833: PPUSH
23834: PPUSH
23835: PPUSH
// begin i := rand ( 1 , 7 ) ;
23836: LD_ADDR_VAR 0 1
23840: PUSH
23841: LD_INT 1
23843: PPUSH
23844: LD_INT 7
23846: PPUSH
23847: CALL_OW 12
23851: ST_TO_ADDR
// case i of 1 :
23852: LD_VAR 0 1
23856: PUSH
23857: LD_INT 1
23859: DOUBLE
23860: EQUAL
23861: IFTRUE 23865
23863: GO 23875
23865: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
23866: LD_STRING earthquake(getX(game), 0, 32)
23868: PPUSH
23869: CALL_OW 559
23873: GO 24113
23875: LD_INT 2
23877: DOUBLE
23878: EQUAL
23879: IFTRUE 23883
23881: GO 23897
23883: POP
// begin ToLua ( displayStucuk(); ) ;
23884: LD_STRING displayStucuk();
23886: PPUSH
23887: CALL_OW 559
// ResetFog ;
23891: CALL_OW 335
// end ; 3 :
23895: GO 24113
23897: LD_INT 3
23899: DOUBLE
23900: EQUAL
23901: IFTRUE 23905
23903: GO 24009
23905: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
23906: LD_ADDR_VAR 0 2
23910: PUSH
23911: LD_INT 22
23913: PUSH
23914: LD_OWVAR 2
23918: PUSH
23919: EMPTY
23920: LIST
23921: LIST
23922: PUSH
23923: LD_INT 25
23925: PUSH
23926: LD_INT 1
23928: PUSH
23929: EMPTY
23930: LIST
23931: LIST
23932: PUSH
23933: EMPTY
23934: LIST
23935: LIST
23936: PPUSH
23937: CALL_OW 69
23941: ST_TO_ADDR
// if not tmp then
23942: LD_VAR 0 2
23946: NOT
23947: IFFALSE 23951
// exit ;
23949: GO 24113
// un := tmp [ rand ( 1 , tmp ) ] ;
23951: LD_ADDR_VAR 0 3
23955: PUSH
23956: LD_VAR 0 2
23960: PUSH
23961: LD_INT 1
23963: PPUSH
23964: LD_VAR 0 2
23968: PPUSH
23969: CALL_OW 12
23973: ARRAY
23974: ST_TO_ADDR
// if Crawls ( un ) then
23975: LD_VAR 0 3
23979: PPUSH
23980: CALL_OW 318
23984: IFFALSE 23995
// ComWalk ( un ) ;
23986: LD_VAR 0 3
23990: PPUSH
23991: CALL_OW 138
// SetClass ( un , class_mortar ) ;
23995: LD_VAR 0 3
23999: PPUSH
24000: LD_INT 8
24002: PPUSH
24003: CALL_OW 336
// end ; 4 :
24007: GO 24113
24009: LD_INT 4
24011: DOUBLE
24012: EQUAL
24013: IFTRUE 24017
24015: GO 24091
24017: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
24018: LD_ADDR_VAR 0 2
24022: PUSH
24023: LD_INT 22
24025: PUSH
24026: LD_OWVAR 2
24030: PUSH
24031: EMPTY
24032: LIST
24033: LIST
24034: PUSH
24035: LD_INT 30
24037: PUSH
24038: LD_INT 29
24040: PUSH
24041: EMPTY
24042: LIST
24043: LIST
24044: PUSH
24045: EMPTY
24046: LIST
24047: LIST
24048: PPUSH
24049: CALL_OW 69
24053: ST_TO_ADDR
// if not tmp then
24054: LD_VAR 0 2
24058: NOT
24059: IFFALSE 24063
// exit ;
24061: GO 24113
// CenterNowOnUnits ( tmp [ 1 ] ) ;
24063: LD_VAR 0 2
24067: PUSH
24068: LD_INT 1
24070: ARRAY
24071: PPUSH
24072: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
24076: LD_VAR 0 2
24080: PUSH
24081: LD_INT 1
24083: ARRAY
24084: PPUSH
24085: CALL_OW 65
// end ; 5 .. 7 :
24089: GO 24113
24091: LD_INT 5
24093: DOUBLE
24094: GREATEREQUAL
24095: IFFALSE 24103
24097: LD_INT 7
24099: DOUBLE
24100: LESSEQUAL
24101: IFTRUE 24105
24103: GO 24112
24105: POP
// StreamSibBomb ; end ;
24106: CALL 20294 0 0
24110: GO 24113
24112: POP
// end ;
24113: PPOPN 3
24115: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
24116: LD_EXP 22
24120: IFFALSE 24128
24122: PUSH
24123: LD_EXP 72
24127: AND
24128: IFFALSE 24284
24130: GO 24132
24132: DISABLE
24133: LD_INT 0
24135: PPUSH
24136: PPUSH
24137: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
24138: LD_ADDR_VAR 0 2
24142: PUSH
24143: LD_INT 81
24145: PUSH
24146: LD_OWVAR 2
24150: PUSH
24151: EMPTY
24152: LIST
24153: LIST
24154: PUSH
24155: LD_INT 2
24157: PUSH
24158: LD_INT 21
24160: PUSH
24161: LD_INT 1
24163: PUSH
24164: EMPTY
24165: LIST
24166: LIST
24167: PUSH
24168: LD_INT 21
24170: PUSH
24171: LD_INT 2
24173: PUSH
24174: EMPTY
24175: LIST
24176: LIST
24177: PUSH
24178: EMPTY
24179: LIST
24180: LIST
24181: LIST
24182: PUSH
24183: EMPTY
24184: LIST
24185: LIST
24186: PPUSH
24187: CALL_OW 69
24191: ST_TO_ADDR
// if not tmp then
24192: LD_VAR 0 2
24196: NOT
24197: IFFALSE 24201
// exit ;
24199: GO 24284
// p := 0 ;
24201: LD_ADDR_VAR 0 3
24205: PUSH
24206: LD_INT 0
24208: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
24209: LD_INT 35
24211: PPUSH
24212: CALL_OW 67
// p := p + 1 ;
24216: LD_ADDR_VAR 0 3
24220: PUSH
24221: LD_VAR 0 3
24225: PUSH
24226: LD_INT 1
24228: PLUS
24229: ST_TO_ADDR
// for i in tmp do
24230: LD_ADDR_VAR 0 1
24234: PUSH
24235: LD_VAR 0 2
24239: PUSH
24240: FOR_IN
24241: IFFALSE 24272
// if GetLives ( i ) < 1000 then
24243: LD_VAR 0 1
24247: PPUSH
24248: CALL_OW 256
24252: PUSH
24253: LD_INT 1000
24255: LESS
24256: IFFALSE 24270
// SetLives ( i , 1000 ) ;
24258: LD_VAR 0 1
24262: PPUSH
24263: LD_INT 1000
24265: PPUSH
24266: CALL_OW 234
24270: GO 24240
24272: POP
24273: POP
// until p > 20 ;
24274: LD_VAR 0 3
24278: PUSH
24279: LD_INT 20
24281: GREATER
24282: IFFALSE 24209
// end ;
24284: PPOPN 3
24286: END
// every 0 0$1 trigger StreamModeActive and sTime do
24287: LD_EXP 22
24291: IFFALSE 24299
24293: PUSH
24294: LD_EXP 73
24298: AND
24299: IFFALSE 24334
24301: GO 24303
24303: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
24304: LD_INT 28
24306: PPUSH
24307: LD_OWVAR 2
24311: PPUSH
24312: LD_INT 2
24314: PPUSH
24315: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
24319: LD_INT 30
24321: PPUSH
24322: LD_OWVAR 2
24326: PPUSH
24327: LD_INT 2
24329: PPUSH
24330: CALL_OW 322
// end ;
24334: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
24335: LD_EXP 22
24339: IFFALSE 24347
24341: PUSH
24342: LD_EXP 74
24346: AND
24347: IFFALSE 24468
24349: GO 24351
24351: DISABLE
24352: LD_INT 0
24354: PPUSH
24355: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
24356: LD_ADDR_VAR 0 2
24360: PUSH
24361: LD_INT 22
24363: PUSH
24364: LD_OWVAR 2
24368: PUSH
24369: EMPTY
24370: LIST
24371: LIST
24372: PUSH
24373: LD_INT 21
24375: PUSH
24376: LD_INT 1
24378: PUSH
24379: EMPTY
24380: LIST
24381: LIST
24382: PUSH
24383: LD_INT 3
24385: PUSH
24386: LD_INT 23
24388: PUSH
24389: LD_INT 0
24391: PUSH
24392: EMPTY
24393: LIST
24394: LIST
24395: PUSH
24396: EMPTY
24397: LIST
24398: LIST
24399: PUSH
24400: EMPTY
24401: LIST
24402: LIST
24403: LIST
24404: PPUSH
24405: CALL_OW 69
24409: ST_TO_ADDR
// if not tmp then
24410: LD_VAR 0 2
24414: NOT
24415: IFFALSE 24419
// exit ;
24417: GO 24468
// for i in tmp do
24419: LD_ADDR_VAR 0 1
24423: PUSH
24424: LD_VAR 0 2
24428: PUSH
24429: FOR_IN
24430: IFFALSE 24466
// begin if Crawls ( i ) then
24432: LD_VAR 0 1
24436: PPUSH
24437: CALL_OW 318
24441: IFFALSE 24452
// ComWalk ( i ) ;
24443: LD_VAR 0 1
24447: PPUSH
24448: CALL_OW 138
// SetClass ( i , 2 ) ;
24452: LD_VAR 0 1
24456: PPUSH
24457: LD_INT 2
24459: PPUSH
24460: CALL_OW 336
// end ;
24464: GO 24429
24466: POP
24467: POP
// end ;
24468: PPOPN 2
24470: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
24471: LD_EXP 22
24475: IFFALSE 24483
24477: PUSH
24478: LD_EXP 75
24482: AND
24483: IFFALSE 24773
24485: GO 24487
24487: DISABLE
24488: LD_INT 0
24490: PPUSH
24491: PPUSH
24492: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
24493: LD_OWVAR 2
24497: PPUSH
24498: LD_INT 9
24500: PPUSH
24501: LD_INT 1
24503: PPUSH
24504: LD_INT 1
24506: PPUSH
24507: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
24511: LD_INT 9
24513: PPUSH
24514: LD_OWVAR 2
24518: PPUSH
24519: CALL_OW 343
// uc_side := 9 ;
24523: LD_ADDR_OWVAR 20
24527: PUSH
24528: LD_INT 9
24530: ST_TO_ADDR
// uc_nation := 2 ;
24531: LD_ADDR_OWVAR 21
24535: PUSH
24536: LD_INT 2
24538: ST_TO_ADDR
// hc_name := Dark Warrior ;
24539: LD_ADDR_OWVAR 26
24543: PUSH
24544: LD_STRING Dark Warrior
24546: ST_TO_ADDR
// hc_gallery :=  ;
24547: LD_ADDR_OWVAR 33
24551: PUSH
24552: LD_STRING 
24554: ST_TO_ADDR
// hc_noskilllimit := true ;
24555: LD_ADDR_OWVAR 76
24559: PUSH
24560: LD_INT 1
24562: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
24563: LD_ADDR_OWVAR 31
24567: PUSH
24568: LD_INT 30
24570: PUSH
24571: LD_INT 30
24573: PUSH
24574: LD_INT 30
24576: PUSH
24577: LD_INT 30
24579: PUSH
24580: EMPTY
24581: LIST
24582: LIST
24583: LIST
24584: LIST
24585: ST_TO_ADDR
// un := CreateHuman ;
24586: LD_ADDR_VAR 0 3
24590: PUSH
24591: CALL_OW 44
24595: ST_TO_ADDR
// hc_noskilllimit := false ;
24596: LD_ADDR_OWVAR 76
24600: PUSH
24601: LD_INT 0
24603: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
24604: LD_VAR 0 3
24608: PPUSH
24609: LD_INT 1
24611: PPUSH
24612: CALL_OW 51
// ToLua ( playRanger() ) ;
24616: LD_STRING playRanger()
24618: PPUSH
24619: CALL_OW 559
// p := 0 ;
24623: LD_ADDR_VAR 0 2
24627: PUSH
24628: LD_INT 0
24630: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
24631: LD_INT 35
24633: PPUSH
24634: CALL_OW 67
// p := p + 1 ;
24638: LD_ADDR_VAR 0 2
24642: PUSH
24643: LD_VAR 0 2
24647: PUSH
24648: LD_INT 1
24650: PLUS
24651: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
24652: LD_VAR 0 3
24656: PPUSH
24657: CALL_OW 256
24661: PUSH
24662: LD_INT 1000
24664: LESS
24665: IFFALSE 24679
// SetLives ( un , 1000 ) ;
24667: LD_VAR 0 3
24671: PPUSH
24672: LD_INT 1000
24674: PPUSH
24675: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
24679: LD_VAR 0 3
24683: PPUSH
24684: LD_INT 81
24686: PUSH
24687: LD_OWVAR 2
24691: PUSH
24692: EMPTY
24693: LIST
24694: LIST
24695: PUSH
24696: LD_INT 91
24698: PUSH
24699: LD_VAR 0 3
24703: PUSH
24704: LD_INT 30
24706: PUSH
24707: EMPTY
24708: LIST
24709: LIST
24710: LIST
24711: PUSH
24712: EMPTY
24713: LIST
24714: LIST
24715: PPUSH
24716: CALL_OW 69
24720: PPUSH
24721: LD_VAR 0 3
24725: PPUSH
24726: CALL_OW 74
24730: PPUSH
24731: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
24735: LD_VAR 0 2
24739: PUSH
24740: LD_INT 80
24742: GREATER
24743: IFTRUE 24756
24745: PUSH
24746: LD_VAR 0 3
24750: PPUSH
24751: CALL_OW 301
24755: OR
24756: IFFALSE 24631
// if un then
24758: LD_VAR 0 3
24762: IFFALSE 24773
// RemoveUnit ( un ) ;
24764: LD_VAR 0 3
24768: PPUSH
24769: CALL_OW 64
// end ;
24773: PPOPN 3
24775: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
24776: LD_EXP 76
24780: IFFALSE 24896
24782: GO 24784
24784: DISABLE
24785: LD_INT 0
24787: PPUSH
24788: PPUSH
24789: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
24790: LD_ADDR_VAR 0 2
24794: PUSH
24795: LD_INT 81
24797: PUSH
24798: LD_OWVAR 2
24802: PUSH
24803: EMPTY
24804: LIST
24805: LIST
24806: PUSH
24807: LD_INT 21
24809: PUSH
24810: LD_INT 1
24812: PUSH
24813: EMPTY
24814: LIST
24815: LIST
24816: PUSH
24817: EMPTY
24818: LIST
24819: LIST
24820: PPUSH
24821: CALL_OW 69
24825: ST_TO_ADDR
// ToLua ( playComputer() ) ;
24826: LD_STRING playComputer()
24828: PPUSH
24829: CALL_OW 559
// if not tmp then
24833: LD_VAR 0 2
24837: NOT
24838: IFFALSE 24842
// exit ;
24840: GO 24896
// for i in tmp do
24842: LD_ADDR_VAR 0 1
24846: PUSH
24847: LD_VAR 0 2
24851: PUSH
24852: FOR_IN
24853: IFFALSE 24894
// for j := 1 to 4 do
24855: LD_ADDR_VAR 0 3
24859: PUSH
24860: DOUBLE
24861: LD_INT 1
24863: DEC
24864: ST_TO_ADDR
24865: LD_INT 4
24867: PUSH
24868: FOR_TO
24869: IFFALSE 24890
// SetSkill ( i , j , 10 ) ;
24871: LD_VAR 0 1
24875: PPUSH
24876: LD_VAR 0 3
24880: PPUSH
24881: LD_INT 10
24883: PPUSH
24884: CALL_OW 237
24888: GO 24868
24890: POP
24891: POP
24892: GO 24852
24894: POP
24895: POP
// end ;
24896: PPOPN 3
24898: END
// every 0 0$1 trigger s30 do var i , tmp ;
24899: LD_EXP 77
24903: IFFALSE 24972
24905: GO 24907
24907: DISABLE
24908: LD_INT 0
24910: PPUSH
24911: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
24912: LD_ADDR_VAR 0 2
24916: PUSH
24917: LD_INT 22
24919: PUSH
24920: LD_OWVAR 2
24924: PUSH
24925: EMPTY
24926: LIST
24927: LIST
24928: PPUSH
24929: CALL_OW 69
24933: ST_TO_ADDR
// if not tmp then
24934: LD_VAR 0 2
24938: NOT
24939: IFFALSE 24943
// exit ;
24941: GO 24972
// for i in tmp do
24943: LD_ADDR_VAR 0 1
24947: PUSH
24948: LD_VAR 0 2
24952: PUSH
24953: FOR_IN
24954: IFFALSE 24970
// SetLives ( i , 300 ) ;
24956: LD_VAR 0 1
24960: PPUSH
24961: LD_INT 300
24963: PPUSH
24964: CALL_OW 234
24968: GO 24953
24970: POP
24971: POP
// end ;
24972: PPOPN 2
24974: END
// every 0 0$1 trigger s60 do var i , tmp ;
24975: LD_EXP 78
24979: IFFALSE 25048
24981: GO 24983
24983: DISABLE
24984: LD_INT 0
24986: PPUSH
24987: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
24988: LD_ADDR_VAR 0 2
24992: PUSH
24993: LD_INT 22
24995: PUSH
24996: LD_OWVAR 2
25000: PUSH
25001: EMPTY
25002: LIST
25003: LIST
25004: PPUSH
25005: CALL_OW 69
25009: ST_TO_ADDR
// if not tmp then
25010: LD_VAR 0 2
25014: NOT
25015: IFFALSE 25019
// exit ;
25017: GO 25048
// for i in tmp do
25019: LD_ADDR_VAR 0 1
25023: PUSH
25024: LD_VAR 0 2
25028: PUSH
25029: FOR_IN
25030: IFFALSE 25046
// SetLives ( i , 600 ) ;
25032: LD_VAR 0 1
25036: PPUSH
25037: LD_INT 600
25039: PPUSH
25040: CALL_OW 234
25044: GO 25029
25046: POP
25047: POP
// end ;
25048: PPOPN 2
25050: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
25051: LD_INT 0
25053: PPUSH
// case cmd of 301 :
25054: LD_VAR 0 1
25058: PUSH
25059: LD_INT 301
25061: DOUBLE
25062: EQUAL
25063: IFTRUE 25067
25065: GO 25099
25067: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
25068: LD_VAR 0 6
25072: PPUSH
25073: LD_VAR 0 7
25077: PPUSH
25078: LD_VAR 0 8
25082: PPUSH
25083: LD_VAR 0 4
25087: PPUSH
25088: LD_VAR 0 5
25092: PPUSH
25093: CALL 26312 0 5
25097: GO 25220
25099: LD_INT 302
25101: DOUBLE
25102: EQUAL
25103: IFTRUE 25107
25105: GO 25144
25107: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
25108: LD_VAR 0 6
25112: PPUSH
25113: LD_VAR 0 7
25117: PPUSH
25118: LD_VAR 0 8
25122: PPUSH
25123: LD_VAR 0 9
25127: PPUSH
25128: LD_VAR 0 4
25132: PPUSH
25133: LD_VAR 0 5
25137: PPUSH
25138: CALL 26403 0 6
25142: GO 25220
25144: LD_INT 303
25146: DOUBLE
25147: EQUAL
25148: IFTRUE 25152
25150: GO 25189
25152: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
25153: LD_VAR 0 6
25157: PPUSH
25158: LD_VAR 0 7
25162: PPUSH
25163: LD_VAR 0 8
25167: PPUSH
25168: LD_VAR 0 9
25172: PPUSH
25173: LD_VAR 0 4
25177: PPUSH
25178: LD_VAR 0 5
25182: PPUSH
25183: CALL 25225 0 6
25187: GO 25220
25189: LD_INT 304
25191: DOUBLE
25192: EQUAL
25193: IFTRUE 25197
25195: GO 25219
25197: POP
// hHackTeleport ( unit , x , y ) ; end ;
25198: LD_VAR 0 2
25202: PPUSH
25203: LD_VAR 0 4
25207: PPUSH
25208: LD_VAR 0 5
25212: PPUSH
25213: CALL 26996 0 3
25217: GO 25220
25219: POP
// end ;
25220: LD_VAR 0 12
25224: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
25225: LD_INT 0
25227: PPUSH
25228: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
25229: LD_VAR 0 1
25233: PUSH
25234: LD_INT 1
25236: LESS
25237: IFTRUE 25249
25239: PUSH
25240: LD_VAR 0 1
25244: PUSH
25245: LD_INT 3
25247: GREATER
25248: OR
25249: IFTRUE 25267
25251: PUSH
25252: LD_VAR 0 5
25256: PPUSH
25257: LD_VAR 0 6
25261: PPUSH
25262: CALL_OW 428
25266: OR
25267: IFFALSE 25271
// exit ;
25269: GO 25999
// uc_side := your_side ;
25271: LD_ADDR_OWVAR 20
25275: PUSH
25276: LD_OWVAR 2
25280: ST_TO_ADDR
// uc_nation := nation ;
25281: LD_ADDR_OWVAR 21
25285: PUSH
25286: LD_VAR 0 1
25290: ST_TO_ADDR
// bc_level = 1 ;
25291: LD_ADDR_OWVAR 43
25295: PUSH
25296: LD_INT 1
25298: ST_TO_ADDR
// case btype of 1 :
25299: LD_VAR 0 2
25303: PUSH
25304: LD_INT 1
25306: DOUBLE
25307: EQUAL
25308: IFTRUE 25312
25310: GO 25323
25312: POP
// bc_type := b_depot ; 2 :
25313: LD_ADDR_OWVAR 42
25317: PUSH
25318: LD_INT 0
25320: ST_TO_ADDR
25321: GO 25943
25323: LD_INT 2
25325: DOUBLE
25326: EQUAL
25327: IFTRUE 25331
25329: GO 25342
25331: POP
// bc_type := b_warehouse ; 3 :
25332: LD_ADDR_OWVAR 42
25336: PUSH
25337: LD_INT 1
25339: ST_TO_ADDR
25340: GO 25943
25342: LD_INT 3
25344: DOUBLE
25345: EQUAL
25346: IFTRUE 25350
25348: GO 25361
25350: POP
// bc_type := b_lab ; 4 .. 9 :
25351: LD_ADDR_OWVAR 42
25355: PUSH
25356: LD_INT 6
25358: ST_TO_ADDR
25359: GO 25943
25361: LD_INT 4
25363: DOUBLE
25364: GREATEREQUAL
25365: IFFALSE 25373
25367: LD_INT 9
25369: DOUBLE
25370: LESSEQUAL
25371: IFTRUE 25375
25373: GO 25435
25375: POP
// begin bc_type := b_lab_half ;
25376: LD_ADDR_OWVAR 42
25380: PUSH
25381: LD_INT 7
25383: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
25384: LD_ADDR_OWVAR 44
25388: PUSH
25389: LD_INT 10
25391: PUSH
25392: LD_INT 11
25394: PUSH
25395: LD_INT 12
25397: PUSH
25398: LD_INT 15
25400: PUSH
25401: LD_INT 14
25403: PUSH
25404: LD_INT 13
25406: PUSH
25407: EMPTY
25408: LIST
25409: LIST
25410: LIST
25411: LIST
25412: LIST
25413: LIST
25414: PUSH
25415: LD_VAR 0 2
25419: PUSH
25420: LD_INT 3
25422: MINUS
25423: ARRAY
25424: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
25425: LD_ADDR_OWVAR 45
25429: PUSH
25430: LD_INT 9
25432: ST_TO_ADDR
// end ; 10 .. 13 :
25433: GO 25943
25435: LD_INT 10
25437: DOUBLE
25438: GREATEREQUAL
25439: IFFALSE 25447
25441: LD_INT 13
25443: DOUBLE
25444: LESSEQUAL
25445: IFTRUE 25449
25447: GO 25526
25449: POP
// begin bc_type := b_lab_full ;
25450: LD_ADDR_OWVAR 42
25454: PUSH
25455: LD_INT 8
25457: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
25458: LD_ADDR_OWVAR 44
25462: PUSH
25463: LD_INT 10
25465: PUSH
25466: LD_INT 12
25468: PUSH
25469: LD_INT 14
25471: PUSH
25472: LD_INT 13
25474: PUSH
25475: EMPTY
25476: LIST
25477: LIST
25478: LIST
25479: LIST
25480: PUSH
25481: LD_VAR 0 2
25485: PUSH
25486: LD_INT 9
25488: MINUS
25489: ARRAY
25490: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
25491: LD_ADDR_OWVAR 45
25495: PUSH
25496: LD_INT 11
25498: PUSH
25499: LD_INT 15
25501: PUSH
25502: LD_INT 12
25504: PUSH
25505: LD_INT 15
25507: PUSH
25508: EMPTY
25509: LIST
25510: LIST
25511: LIST
25512: LIST
25513: PUSH
25514: LD_VAR 0 2
25518: PUSH
25519: LD_INT 9
25521: MINUS
25522: ARRAY
25523: ST_TO_ADDR
// end ; 14 :
25524: GO 25943
25526: LD_INT 14
25528: DOUBLE
25529: EQUAL
25530: IFTRUE 25534
25532: GO 25545
25534: POP
// bc_type := b_workshop ; 15 :
25535: LD_ADDR_OWVAR 42
25539: PUSH
25540: LD_INT 2
25542: ST_TO_ADDR
25543: GO 25943
25545: LD_INT 15
25547: DOUBLE
25548: EQUAL
25549: IFTRUE 25553
25551: GO 25564
25553: POP
// bc_type := b_factory ; 16 :
25554: LD_ADDR_OWVAR 42
25558: PUSH
25559: LD_INT 3
25561: ST_TO_ADDR
25562: GO 25943
25564: LD_INT 16
25566: DOUBLE
25567: EQUAL
25568: IFTRUE 25572
25570: GO 25583
25572: POP
// bc_type := b_ext_gun ; 17 :
25573: LD_ADDR_OWVAR 42
25577: PUSH
25578: LD_INT 17
25580: ST_TO_ADDR
25581: GO 25943
25583: LD_INT 17
25585: DOUBLE
25586: EQUAL
25587: IFTRUE 25591
25589: GO 25619
25591: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
25592: LD_ADDR_OWVAR 42
25596: PUSH
25597: LD_INT 19
25599: PUSH
25600: LD_INT 23
25602: PUSH
25603: LD_INT 19
25605: PUSH
25606: EMPTY
25607: LIST
25608: LIST
25609: LIST
25610: PUSH
25611: LD_VAR 0 1
25615: ARRAY
25616: ST_TO_ADDR
25617: GO 25943
25619: LD_INT 18
25621: DOUBLE
25622: EQUAL
25623: IFTRUE 25627
25625: GO 25638
25627: POP
// bc_type := b_ext_radar ; 19 :
25628: LD_ADDR_OWVAR 42
25632: PUSH
25633: LD_INT 20
25635: ST_TO_ADDR
25636: GO 25943
25638: LD_INT 19
25640: DOUBLE
25641: EQUAL
25642: IFTRUE 25646
25644: GO 25657
25646: POP
// bc_type := b_ext_radio ; 20 :
25647: LD_ADDR_OWVAR 42
25651: PUSH
25652: LD_INT 22
25654: ST_TO_ADDR
25655: GO 25943
25657: LD_INT 20
25659: DOUBLE
25660: EQUAL
25661: IFTRUE 25665
25663: GO 25676
25665: POP
// bc_type := b_ext_siberium ; 21 :
25666: LD_ADDR_OWVAR 42
25670: PUSH
25671: LD_INT 21
25673: ST_TO_ADDR
25674: GO 25943
25676: LD_INT 21
25678: DOUBLE
25679: EQUAL
25680: IFTRUE 25684
25682: GO 25695
25684: POP
// bc_type := b_ext_computer ; 22 :
25685: LD_ADDR_OWVAR 42
25689: PUSH
25690: LD_INT 24
25692: ST_TO_ADDR
25693: GO 25943
25695: LD_INT 22
25697: DOUBLE
25698: EQUAL
25699: IFTRUE 25703
25701: GO 25714
25703: POP
// bc_type := b_ext_track ; 23 :
25704: LD_ADDR_OWVAR 42
25708: PUSH
25709: LD_INT 16
25711: ST_TO_ADDR
25712: GO 25943
25714: LD_INT 23
25716: DOUBLE
25717: EQUAL
25718: IFTRUE 25722
25720: GO 25733
25722: POP
// bc_type := b_ext_laser ; 24 :
25723: LD_ADDR_OWVAR 42
25727: PUSH
25728: LD_INT 25
25730: ST_TO_ADDR
25731: GO 25943
25733: LD_INT 24
25735: DOUBLE
25736: EQUAL
25737: IFTRUE 25741
25739: GO 25752
25741: POP
// bc_type := b_control_tower ; 25 :
25742: LD_ADDR_OWVAR 42
25746: PUSH
25747: LD_INT 36
25749: ST_TO_ADDR
25750: GO 25943
25752: LD_INT 25
25754: DOUBLE
25755: EQUAL
25756: IFTRUE 25760
25758: GO 25771
25760: POP
// bc_type := b_breastwork ; 26 :
25761: LD_ADDR_OWVAR 42
25765: PUSH
25766: LD_INT 31
25768: ST_TO_ADDR
25769: GO 25943
25771: LD_INT 26
25773: DOUBLE
25774: EQUAL
25775: IFTRUE 25779
25777: GO 25790
25779: POP
// bc_type := b_bunker ; 27 :
25780: LD_ADDR_OWVAR 42
25784: PUSH
25785: LD_INT 32
25787: ST_TO_ADDR
25788: GO 25943
25790: LD_INT 27
25792: DOUBLE
25793: EQUAL
25794: IFTRUE 25798
25796: GO 25809
25798: POP
// bc_type := b_turret ; 28 :
25799: LD_ADDR_OWVAR 42
25803: PUSH
25804: LD_INT 33
25806: ST_TO_ADDR
25807: GO 25943
25809: LD_INT 28
25811: DOUBLE
25812: EQUAL
25813: IFTRUE 25817
25815: GO 25828
25817: POP
// bc_type := b_armoury ; 29 :
25818: LD_ADDR_OWVAR 42
25822: PUSH
25823: LD_INT 4
25825: ST_TO_ADDR
25826: GO 25943
25828: LD_INT 29
25830: DOUBLE
25831: EQUAL
25832: IFTRUE 25836
25834: GO 25847
25836: POP
// bc_type := b_barracks ; 30 :
25837: LD_ADDR_OWVAR 42
25841: PUSH
25842: LD_INT 5
25844: ST_TO_ADDR
25845: GO 25943
25847: LD_INT 30
25849: DOUBLE
25850: EQUAL
25851: IFTRUE 25855
25853: GO 25866
25855: POP
// bc_type := b_solar_power ; 31 :
25856: LD_ADDR_OWVAR 42
25860: PUSH
25861: LD_INT 27
25863: ST_TO_ADDR
25864: GO 25943
25866: LD_INT 31
25868: DOUBLE
25869: EQUAL
25870: IFTRUE 25874
25872: GO 25885
25874: POP
// bc_type := b_oil_power ; 32 :
25875: LD_ADDR_OWVAR 42
25879: PUSH
25880: LD_INT 26
25882: ST_TO_ADDR
25883: GO 25943
25885: LD_INT 32
25887: DOUBLE
25888: EQUAL
25889: IFTRUE 25893
25891: GO 25904
25893: POP
// bc_type := b_siberite_power ; 33 :
25894: LD_ADDR_OWVAR 42
25898: PUSH
25899: LD_INT 28
25901: ST_TO_ADDR
25902: GO 25943
25904: LD_INT 33
25906: DOUBLE
25907: EQUAL
25908: IFTRUE 25912
25910: GO 25923
25912: POP
// bc_type := b_oil_mine ; 34 :
25913: LD_ADDR_OWVAR 42
25917: PUSH
25918: LD_INT 29
25920: ST_TO_ADDR
25921: GO 25943
25923: LD_INT 34
25925: DOUBLE
25926: EQUAL
25927: IFTRUE 25931
25929: GO 25942
25931: POP
// bc_type := b_siberite_mine ; end ;
25932: LD_ADDR_OWVAR 42
25936: PUSH
25937: LD_INT 30
25939: ST_TO_ADDR
25940: GO 25943
25942: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
25943: LD_ADDR_VAR 0 8
25947: PUSH
25948: LD_VAR 0 5
25952: PPUSH
25953: LD_VAR 0 6
25957: PPUSH
25958: LD_VAR 0 3
25962: PPUSH
25963: CALL_OW 47
25967: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
25968: LD_OWVAR 42
25972: PUSH
25973: LD_INT 32
25975: PUSH
25976: LD_INT 33
25978: PUSH
25979: EMPTY
25980: LIST
25981: LIST
25982: IN
25983: IFFALSE 25999
// PlaceWeaponTurret ( b , weapon ) ;
25985: LD_VAR 0 8
25989: PPUSH
25990: LD_VAR 0 4
25994: PPUSH
25995: CALL_OW 431
// end ;
25999: LD_VAR 0 7
26003: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
26004: LD_INT 0
26006: PPUSH
26007: PPUSH
26008: PPUSH
26009: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26010: LD_ADDR_VAR 0 4
26014: PUSH
26015: LD_INT 22
26017: PUSH
26018: LD_OWVAR 2
26022: PUSH
26023: EMPTY
26024: LIST
26025: LIST
26026: PUSH
26027: LD_INT 2
26029: PUSH
26030: LD_INT 30
26032: PUSH
26033: LD_INT 0
26035: PUSH
26036: EMPTY
26037: LIST
26038: LIST
26039: PUSH
26040: LD_INT 30
26042: PUSH
26043: LD_INT 1
26045: PUSH
26046: EMPTY
26047: LIST
26048: LIST
26049: PUSH
26050: EMPTY
26051: LIST
26052: LIST
26053: LIST
26054: PUSH
26055: EMPTY
26056: LIST
26057: LIST
26058: PPUSH
26059: CALL_OW 69
26063: ST_TO_ADDR
// if not tmp then
26064: LD_VAR 0 4
26068: NOT
26069: IFFALSE 26073
// exit ;
26071: GO 26132
// for i in tmp do
26073: LD_ADDR_VAR 0 2
26077: PUSH
26078: LD_VAR 0 4
26082: PUSH
26083: FOR_IN
26084: IFFALSE 26130
// for j = 1 to 3 do
26086: LD_ADDR_VAR 0 3
26090: PUSH
26091: DOUBLE
26092: LD_INT 1
26094: DEC
26095: ST_TO_ADDR
26096: LD_INT 3
26098: PUSH
26099: FOR_TO
26100: IFFALSE 26126
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
26102: LD_VAR 0 2
26106: PPUSH
26107: CALL_OW 274
26111: PPUSH
26112: LD_VAR 0 3
26116: PPUSH
26117: LD_INT 99999
26119: PPUSH
26120: CALL_OW 277
26124: GO 26099
26126: POP
26127: POP
26128: GO 26083
26130: POP
26131: POP
// end ;
26132: LD_VAR 0 1
26136: RET
// export function hHackSetLevel10 ; var i , j ; begin
26137: LD_INT 0
26139: PPUSH
26140: PPUSH
26141: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
26142: LD_ADDR_VAR 0 2
26146: PUSH
26147: LD_INT 21
26149: PUSH
26150: LD_INT 1
26152: PUSH
26153: EMPTY
26154: LIST
26155: LIST
26156: PPUSH
26157: CALL_OW 69
26161: PUSH
26162: FOR_IN
26163: IFFALSE 26215
// if IsSelected ( i ) then
26165: LD_VAR 0 2
26169: PPUSH
26170: CALL_OW 306
26174: IFFALSE 26213
// begin for j := 1 to 4 do
26176: LD_ADDR_VAR 0 3
26180: PUSH
26181: DOUBLE
26182: LD_INT 1
26184: DEC
26185: ST_TO_ADDR
26186: LD_INT 4
26188: PUSH
26189: FOR_TO
26190: IFFALSE 26211
// SetSkill ( i , j , 10 ) ;
26192: LD_VAR 0 2
26196: PPUSH
26197: LD_VAR 0 3
26201: PPUSH
26202: LD_INT 10
26204: PPUSH
26205: CALL_OW 237
26209: GO 26189
26211: POP
26212: POP
// end ;
26213: GO 26162
26215: POP
26216: POP
// end ;
26217: LD_VAR 0 1
26221: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
26222: LD_INT 0
26224: PPUSH
26225: PPUSH
26226: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
26227: LD_ADDR_VAR 0 2
26231: PUSH
26232: LD_INT 22
26234: PUSH
26235: LD_OWVAR 2
26239: PUSH
26240: EMPTY
26241: LIST
26242: LIST
26243: PUSH
26244: LD_INT 21
26246: PUSH
26247: LD_INT 1
26249: PUSH
26250: EMPTY
26251: LIST
26252: LIST
26253: PUSH
26254: EMPTY
26255: LIST
26256: LIST
26257: PPUSH
26258: CALL_OW 69
26262: PUSH
26263: FOR_IN
26264: IFFALSE 26305
// begin for j := 1 to 4 do
26266: LD_ADDR_VAR 0 3
26270: PUSH
26271: DOUBLE
26272: LD_INT 1
26274: DEC
26275: ST_TO_ADDR
26276: LD_INT 4
26278: PUSH
26279: FOR_TO
26280: IFFALSE 26301
// SetSkill ( i , j , 10 ) ;
26282: LD_VAR 0 2
26286: PPUSH
26287: LD_VAR 0 3
26291: PPUSH
26292: LD_INT 10
26294: PPUSH
26295: CALL_OW 237
26299: GO 26279
26301: POP
26302: POP
// end ;
26303: GO 26263
26305: POP
26306: POP
// end ;
26307: LD_VAR 0 1
26311: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
26312: LD_INT 0
26314: PPUSH
// uc_side := your_side ;
26315: LD_ADDR_OWVAR 20
26319: PUSH
26320: LD_OWVAR 2
26324: ST_TO_ADDR
// uc_nation := nation ;
26325: LD_ADDR_OWVAR 21
26329: PUSH
26330: LD_VAR 0 1
26334: ST_TO_ADDR
// InitHc ;
26335: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
26339: LD_INT 0
26341: PPUSH
26342: LD_VAR 0 2
26346: PPUSH
26347: LD_VAR 0 3
26351: PPUSH
26352: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
26356: LD_VAR 0 4
26360: PPUSH
26361: LD_VAR 0 5
26365: PPUSH
26366: CALL_OW 428
26370: PUSH
26371: LD_INT 0
26373: EQUAL
26374: IFFALSE 26398
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
26376: CALL_OW 44
26380: PPUSH
26381: LD_VAR 0 4
26385: PPUSH
26386: LD_VAR 0 5
26390: PPUSH
26391: LD_INT 1
26393: PPUSH
26394: CALL_OW 48
// end ;
26398: LD_VAR 0 6
26402: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
26403: LD_INT 0
26405: PPUSH
26406: PPUSH
// uc_side := your_side ;
26407: LD_ADDR_OWVAR 20
26411: PUSH
26412: LD_OWVAR 2
26416: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
26417: LD_VAR 0 1
26421: PUSH
26422: LD_INT 1
26424: PUSH
26425: LD_INT 2
26427: PUSH
26428: LD_INT 3
26430: PUSH
26431: LD_INT 4
26433: PUSH
26434: LD_INT 5
26436: PUSH
26437: EMPTY
26438: LIST
26439: LIST
26440: LIST
26441: LIST
26442: LIST
26443: IN
26444: IFFALSE 26456
// uc_nation := nation_american else
26446: LD_ADDR_OWVAR 21
26450: PUSH
26451: LD_INT 1
26453: ST_TO_ADDR
26454: GO 26499
// if chassis in [ 11 , 12 , 13 , 14 ] then
26456: LD_VAR 0 1
26460: PUSH
26461: LD_INT 11
26463: PUSH
26464: LD_INT 12
26466: PUSH
26467: LD_INT 13
26469: PUSH
26470: LD_INT 14
26472: PUSH
26473: EMPTY
26474: LIST
26475: LIST
26476: LIST
26477: LIST
26478: IN
26479: IFFALSE 26491
// uc_nation := nation_arabian else
26481: LD_ADDR_OWVAR 21
26485: PUSH
26486: LD_INT 2
26488: ST_TO_ADDR
26489: GO 26499
// uc_nation := nation_russian ;
26491: LD_ADDR_OWVAR 21
26495: PUSH
26496: LD_INT 3
26498: ST_TO_ADDR
// vc_chassis := chassis ;
26499: LD_ADDR_OWVAR 37
26503: PUSH
26504: LD_VAR 0 1
26508: ST_TO_ADDR
// vc_engine := engine ;
26509: LD_ADDR_OWVAR 39
26513: PUSH
26514: LD_VAR 0 2
26518: ST_TO_ADDR
// vc_control := control ;
26519: LD_ADDR_OWVAR 38
26523: PUSH
26524: LD_VAR 0 3
26528: ST_TO_ADDR
// vc_weapon := weapon ;
26529: LD_ADDR_OWVAR 40
26533: PUSH
26534: LD_VAR 0 4
26538: ST_TO_ADDR
// un := CreateVehicle ;
26539: LD_ADDR_VAR 0 8
26543: PUSH
26544: CALL_OW 45
26548: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
26549: LD_VAR 0 8
26553: PPUSH
26554: LD_INT 0
26556: PPUSH
26557: LD_INT 5
26559: PPUSH
26560: CALL_OW 12
26564: PPUSH
26565: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
26569: LD_VAR 0 8
26573: PPUSH
26574: LD_VAR 0 5
26578: PPUSH
26579: LD_VAR 0 6
26583: PPUSH
26584: LD_INT 1
26586: PPUSH
26587: CALL_OW 48
// end ;
26591: LD_VAR 0 7
26595: RET
// export hInvincible ; every 1 do
26596: GO 26598
26598: DISABLE
// hInvincible := [ ] ;
26599: LD_ADDR_EXP 79
26603: PUSH
26604: EMPTY
26605: ST_TO_ADDR
26606: END
// every 10 do var i ;
26607: GO 26609
26609: DISABLE
26610: LD_INT 0
26612: PPUSH
// begin enable ;
26613: ENABLE
// if not hInvincible then
26614: LD_EXP 79
26618: NOT
26619: IFFALSE 26623
// exit ;
26621: GO 26667
// for i in hInvincible do
26623: LD_ADDR_VAR 0 1
26627: PUSH
26628: LD_EXP 79
26632: PUSH
26633: FOR_IN
26634: IFFALSE 26665
// if GetLives ( i ) < 1000 then
26636: LD_VAR 0 1
26640: PPUSH
26641: CALL_OW 256
26645: PUSH
26646: LD_INT 1000
26648: LESS
26649: IFFALSE 26663
// SetLives ( i , 1000 ) ;
26651: LD_VAR 0 1
26655: PPUSH
26656: LD_INT 1000
26658: PPUSH
26659: CALL_OW 234
26663: GO 26633
26665: POP
26666: POP
// end ;
26667: PPOPN 1
26669: END
// export function hHackInvincible ; var i ; begin
26670: LD_INT 0
26672: PPUSH
26673: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
26674: LD_ADDR_VAR 0 2
26678: PUSH
26679: LD_INT 2
26681: PUSH
26682: LD_INT 21
26684: PUSH
26685: LD_INT 1
26687: PUSH
26688: EMPTY
26689: LIST
26690: LIST
26691: PUSH
26692: LD_INT 21
26694: PUSH
26695: LD_INT 2
26697: PUSH
26698: EMPTY
26699: LIST
26700: LIST
26701: PUSH
26702: EMPTY
26703: LIST
26704: LIST
26705: LIST
26706: PPUSH
26707: CALL_OW 69
26711: PUSH
26712: FOR_IN
26713: IFFALSE 26774
// if IsSelected ( i ) then
26715: LD_VAR 0 2
26719: PPUSH
26720: CALL_OW 306
26724: IFFALSE 26772
// begin if i in hInvincible then
26726: LD_VAR 0 2
26730: PUSH
26731: LD_EXP 79
26735: IN
26736: IFFALSE 26756
// hInvincible := hInvincible diff i else
26738: LD_ADDR_EXP 79
26742: PUSH
26743: LD_EXP 79
26747: PUSH
26748: LD_VAR 0 2
26752: DIFF
26753: ST_TO_ADDR
26754: GO 26772
// hInvincible := hInvincible union i ;
26756: LD_ADDR_EXP 79
26760: PUSH
26761: LD_EXP 79
26765: PUSH
26766: LD_VAR 0 2
26770: UNION
26771: ST_TO_ADDR
// end ;
26772: GO 26712
26774: POP
26775: POP
// end ;
26776: LD_VAR 0 1
26780: RET
// export function hHackInvisible ; var i , j ; begin
26781: LD_INT 0
26783: PPUSH
26784: PPUSH
26785: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
26786: LD_ADDR_VAR 0 2
26790: PUSH
26791: LD_INT 21
26793: PUSH
26794: LD_INT 1
26796: PUSH
26797: EMPTY
26798: LIST
26799: LIST
26800: PPUSH
26801: CALL_OW 69
26805: PUSH
26806: FOR_IN
26807: IFFALSE 26831
// if IsSelected ( i ) then
26809: LD_VAR 0 2
26813: PPUSH
26814: CALL_OW 306
26818: IFFALSE 26829
// ComForceInvisible ( i ) ;
26820: LD_VAR 0 2
26824: PPUSH
26825: CALL_OW 496
26829: GO 26806
26831: POP
26832: POP
// end ;
26833: LD_VAR 0 1
26837: RET
// export function hHackChangeYourSide ; begin
26838: LD_INT 0
26840: PPUSH
// if your_side = 8 then
26841: LD_OWVAR 2
26845: PUSH
26846: LD_INT 8
26848: EQUAL
26849: IFFALSE 26861
// your_side := 0 else
26851: LD_ADDR_OWVAR 2
26855: PUSH
26856: LD_INT 0
26858: ST_TO_ADDR
26859: GO 26875
// your_side := your_side + 1 ;
26861: LD_ADDR_OWVAR 2
26865: PUSH
26866: LD_OWVAR 2
26870: PUSH
26871: LD_INT 1
26873: PLUS
26874: ST_TO_ADDR
// end ;
26875: LD_VAR 0 1
26879: RET
// export function hHackChangeUnitSide ; var i , j ; begin
26880: LD_INT 0
26882: PPUSH
26883: PPUSH
26884: PPUSH
// for i in all_units do
26885: LD_ADDR_VAR 0 2
26889: PUSH
26890: LD_OWVAR 3
26894: PUSH
26895: FOR_IN
26896: IFFALSE 26974
// if IsSelected ( i ) then
26898: LD_VAR 0 2
26902: PPUSH
26903: CALL_OW 306
26907: IFFALSE 26972
// begin j := GetSide ( i ) ;
26909: LD_ADDR_VAR 0 3
26913: PUSH
26914: LD_VAR 0 2
26918: PPUSH
26919: CALL_OW 255
26923: ST_TO_ADDR
// if j = 8 then
26924: LD_VAR 0 3
26928: PUSH
26929: LD_INT 8
26931: EQUAL
26932: IFFALSE 26944
// j := 0 else
26934: LD_ADDR_VAR 0 3
26938: PUSH
26939: LD_INT 0
26941: ST_TO_ADDR
26942: GO 26958
// j := j + 1 ;
26944: LD_ADDR_VAR 0 3
26948: PUSH
26949: LD_VAR 0 3
26953: PUSH
26954: LD_INT 1
26956: PLUS
26957: ST_TO_ADDR
// SetSide ( i , j ) ;
26958: LD_VAR 0 2
26962: PPUSH
26963: LD_VAR 0 3
26967: PPUSH
26968: CALL_OW 235
// end ;
26972: GO 26895
26974: POP
26975: POP
// end ;
26976: LD_VAR 0 1
26980: RET
// export function hHackFog ; begin
26981: LD_INT 0
26983: PPUSH
// FogOff ( true ) ;
26984: LD_INT 1
26986: PPUSH
26987: CALL_OW 344
// end ;
26991: LD_VAR 0 1
26995: RET
// export function hHackTeleport ( unit , x , y ) ; begin
26996: LD_INT 0
26998: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
26999: LD_VAR 0 1
27003: PPUSH
27004: LD_VAR 0 2
27008: PPUSH
27009: LD_VAR 0 3
27013: PPUSH
27014: LD_INT 1
27016: PPUSH
27017: LD_INT 1
27019: PPUSH
27020: CALL_OW 483
// CenterOnXY ( x , y ) ;
27024: LD_VAR 0 2
27028: PPUSH
27029: LD_VAR 0 3
27033: PPUSH
27034: CALL_OW 84
// end ;
27038: LD_VAR 0 4
27042: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
27043: LD_INT 0
27045: PPUSH
27046: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
27047: LD_VAR 0 1
27051: NOT
27052: IFTRUE 27071
27054: PUSH
27055: LD_VAR 0 2
27059: PPUSH
27060: LD_VAR 0 3
27064: PPUSH
27065: CALL_OW 488
27069: NOT
27070: OR
27071: IFTRUE 27106
27073: PUSH
27074: LD_VAR 0 1
27078: PPUSH
27079: CALL_OW 266
27083: PUSH
27084: LD_INT 3
27086: NONEQUAL
27087: IFFALSE 27105
27089: PUSH
27090: LD_VAR 0 1
27094: PPUSH
27095: CALL_OW 247
27099: PUSH
27100: LD_INT 1
27102: EQUAL
27103: NOT
27104: AND
27105: OR
27106: IFFALSE 27110
// exit ;
27108: GO 27392
// if GetType ( factory ) = unit_human then
27110: LD_VAR 0 1
27114: PPUSH
27115: CALL_OW 247
27119: PUSH
27120: LD_INT 1
27122: EQUAL
27123: IFFALSE 27140
// factory := IsInUnit ( factory ) ;
27125: LD_ADDR_VAR 0 1
27129: PUSH
27130: LD_VAR 0 1
27134: PPUSH
27135: CALL_OW 310
27139: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
27140: LD_VAR 0 1
27144: PPUSH
27145: CALL_OW 266
27149: PUSH
27150: LD_INT 3
27152: NONEQUAL
27153: IFFALSE 27157
// exit ;
27155: GO 27392
// for i := 1 to Count ( factoryWaypoints ) do
27157: LD_ADDR_VAR 0 5
27161: PUSH
27162: DOUBLE
27163: LD_INT 1
27165: DEC
27166: ST_TO_ADDR
27167: LD_EXP 80
27171: PPUSH
27172: CALL 37196 0 1
27176: PUSH
27177: FOR_TO
27178: IFFALSE 27340
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
27180: LD_VAR 0 2
27184: PPUSH
27185: LD_VAR 0 3
27189: PPUSH
27190: CALL_OW 428
27194: PUSH
27195: LD_EXP 80
27199: PUSH
27200: LD_VAR 0 5
27204: ARRAY
27205: PUSH
27206: LD_INT 2
27208: ARRAY
27209: EQUAL
27210: IFFALSE 27242
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
27212: LD_ADDR_EXP 80
27216: PUSH
27217: LD_EXP 80
27221: PPUSH
27222: LD_VAR 0 5
27226: PPUSH
27227: CALL_OW 3
27231: ST_TO_ADDR
// UpdateFactoryWaypoints ;
27232: CALL 27397 0 0
// exit ;
27236: POP
27237: POP
27238: GO 27392
// end else
27240: GO 27338
// if factory = factoryWaypoints [ i ] [ 2 ] then
27242: LD_VAR 0 1
27246: PUSH
27247: LD_EXP 80
27251: PUSH
27252: LD_VAR 0 5
27256: ARRAY
27257: PUSH
27258: LD_INT 2
27260: ARRAY
27261: EQUAL
27262: IFFALSE 27338
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
27264: LD_ADDR_EXP 80
27268: PUSH
27269: LD_EXP 80
27273: PPUSH
27274: LD_VAR 0 5
27278: PPUSH
27279: CALL_OW 3
27283: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
27284: LD_ADDR_EXP 80
27288: PUSH
27289: LD_EXP 80
27293: PPUSH
27294: LD_VAR 0 1
27298: PPUSH
27299: CALL_OW 255
27303: PUSH
27304: LD_VAR 0 1
27308: PUSH
27309: LD_VAR 0 2
27313: PUSH
27314: LD_VAR 0 3
27318: PUSH
27319: EMPTY
27320: LIST
27321: LIST
27322: LIST
27323: LIST
27324: PPUSH
27325: CALL 73172 0 2
27329: ST_TO_ADDR
// UpdateFactoryWaypoints ;
27330: CALL 27397 0 0
// exit ;
27334: POP
27335: POP
27336: GO 27392
// end ; end ;
27338: GO 27177
27340: POP
27341: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
27342: LD_ADDR_EXP 80
27346: PUSH
27347: LD_EXP 80
27351: PPUSH
27352: LD_VAR 0 1
27356: PPUSH
27357: CALL_OW 255
27361: PUSH
27362: LD_VAR 0 1
27366: PUSH
27367: LD_VAR 0 2
27371: PUSH
27372: LD_VAR 0 3
27376: PUSH
27377: EMPTY
27378: LIST
27379: LIST
27380: LIST
27381: LIST
27382: PPUSH
27383: CALL 73172 0 2
27387: ST_TO_ADDR
// UpdateFactoryWaypoints ;
27388: CALL 27397 0 0
// end ;
27392: LD_VAR 0 4
27396: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
27397: LD_INT 0
27399: PPUSH
27400: PPUSH
27401: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
27402: LD_STRING resetFactoryWaypoint();
27404: PPUSH
27405: CALL_OW 559
// if factoryWaypoints then
27409: LD_EXP 80
27413: IFFALSE 27534
// begin list := factoryWaypoints ;
27415: LD_ADDR_VAR 0 3
27419: PUSH
27420: LD_EXP 80
27424: ST_TO_ADDR
// for i := 1 to list do
27425: LD_ADDR_VAR 0 2
27429: PUSH
27430: DOUBLE
27431: LD_INT 1
27433: DEC
27434: ST_TO_ADDR
27435: LD_VAR 0 3
27439: PUSH
27440: FOR_TO
27441: IFFALSE 27532
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
27443: LD_STRING setFactoryWaypointXY(
27445: PUSH
27446: LD_VAR 0 3
27450: PUSH
27451: LD_VAR 0 2
27455: ARRAY
27456: PUSH
27457: LD_INT 1
27459: ARRAY
27460: STR
27461: PUSH
27462: LD_STRING ,
27464: STR
27465: PUSH
27466: LD_VAR 0 3
27470: PUSH
27471: LD_VAR 0 2
27475: ARRAY
27476: PUSH
27477: LD_INT 2
27479: ARRAY
27480: STR
27481: PUSH
27482: LD_STRING ,
27484: STR
27485: PUSH
27486: LD_VAR 0 3
27490: PUSH
27491: LD_VAR 0 2
27495: ARRAY
27496: PUSH
27497: LD_INT 3
27499: ARRAY
27500: STR
27501: PUSH
27502: LD_STRING ,
27504: STR
27505: PUSH
27506: LD_VAR 0 3
27510: PUSH
27511: LD_VAR 0 2
27515: ARRAY
27516: PUSH
27517: LD_INT 4
27519: ARRAY
27520: STR
27521: PUSH
27522: LD_STRING )
27524: STR
27525: PPUSH
27526: CALL_OW 559
27530: GO 27440
27532: POP
27533: POP
// end ; end ;
27534: LD_VAR 0 1
27538: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
27539: LD_INT 0
27541: PPUSH
// if HexInfo ( x , y ) = warehouse then
27542: LD_VAR 0 2
27546: PPUSH
27547: LD_VAR 0 3
27551: PPUSH
27552: CALL_OW 428
27556: PUSH
27557: LD_VAR 0 1
27561: EQUAL
27562: IFFALSE 27589
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
27564: LD_ADDR_EXP 82
27568: PUSH
27569: LD_EXP 82
27573: PPUSH
27574: LD_VAR 0 1
27578: PPUSH
27579: LD_INT 0
27581: PPUSH
27582: CALL_OW 1
27586: ST_TO_ADDR
27587: GO 27640
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
27589: LD_ADDR_EXP 82
27593: PUSH
27594: LD_EXP 82
27598: PPUSH
27599: LD_VAR 0 1
27603: PPUSH
27604: LD_VAR 0 1
27608: PPUSH
27609: CALL_OW 255
27613: PUSH
27614: LD_VAR 0 1
27618: PUSH
27619: LD_VAR 0 2
27623: PUSH
27624: LD_VAR 0 3
27628: PUSH
27629: EMPTY
27630: LIST
27631: LIST
27632: LIST
27633: LIST
27634: PPUSH
27635: CALL_OW 1
27639: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
27640: CALL 27649 0 0
// end ;
27644: LD_VAR 0 4
27648: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
27649: LD_INT 0
27651: PPUSH
27652: PPUSH
27653: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
27654: LD_STRING resetWarehouseGatheringPoints();
27656: PPUSH
27657: CALL_OW 559
// if warehouseGatheringPoints then
27661: LD_EXP 82
27665: IFFALSE 27791
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
27667: LD_ADDR_VAR 0 3
27671: PUSH
27672: LD_EXP 82
27676: PPUSH
27677: CALL 77106 0 1
27681: ST_TO_ADDR
// for i := 1 to list do
27682: LD_ADDR_VAR 0 2
27686: PUSH
27687: DOUBLE
27688: LD_INT 1
27690: DEC
27691: ST_TO_ADDR
27692: LD_VAR 0 3
27696: PUSH
27697: FOR_TO
27698: IFFALSE 27789
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
27700: LD_STRING setWarehouseGatheringPointXY(
27702: PUSH
27703: LD_VAR 0 3
27707: PUSH
27708: LD_VAR 0 2
27712: ARRAY
27713: PUSH
27714: LD_INT 1
27716: ARRAY
27717: STR
27718: PUSH
27719: LD_STRING ,
27721: STR
27722: PUSH
27723: LD_VAR 0 3
27727: PUSH
27728: LD_VAR 0 2
27732: ARRAY
27733: PUSH
27734: LD_INT 2
27736: ARRAY
27737: STR
27738: PUSH
27739: LD_STRING ,
27741: STR
27742: PUSH
27743: LD_VAR 0 3
27747: PUSH
27748: LD_VAR 0 2
27752: ARRAY
27753: PUSH
27754: LD_INT 3
27756: ARRAY
27757: STR
27758: PUSH
27759: LD_STRING ,
27761: STR
27762: PUSH
27763: LD_VAR 0 3
27767: PUSH
27768: LD_VAR 0 2
27772: ARRAY
27773: PUSH
27774: LD_INT 4
27776: ARRAY
27777: STR
27778: PUSH
27779: LD_STRING )
27781: STR
27782: PPUSH
27783: CALL_OW 559
27787: GO 27697
27789: POP
27790: POP
// end ; end ;
27791: LD_VAR 0 1
27795: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
27796: LD_EXP 82
27800: IFFALSE 28495
27802: GO 27804
27804: DISABLE
27805: LD_INT 0
27807: PPUSH
27808: PPUSH
27809: PPUSH
27810: PPUSH
27811: PPUSH
27812: PPUSH
27813: PPUSH
27814: PPUSH
27815: PPUSH
// begin enable ;
27816: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
27817: LD_ADDR_VAR 0 3
27821: PUSH
27822: LD_EXP 82
27826: PPUSH
27827: CALL 77106 0 1
27831: ST_TO_ADDR
// if not list then
27832: LD_VAR 0 3
27836: NOT
27837: IFFALSE 27841
// exit ;
27839: GO 28495
// for i := 1 to list do
27841: LD_ADDR_VAR 0 1
27845: PUSH
27846: DOUBLE
27847: LD_INT 1
27849: DEC
27850: ST_TO_ADDR
27851: LD_VAR 0 3
27855: PUSH
27856: FOR_TO
27857: IFFALSE 28493
// begin depot := list [ i ] [ 2 ] ;
27859: LD_ADDR_VAR 0 8
27863: PUSH
27864: LD_VAR 0 3
27868: PUSH
27869: LD_VAR 0 1
27873: ARRAY
27874: PUSH
27875: LD_INT 2
27877: ARRAY
27878: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
27879: LD_ADDR_VAR 0 5
27883: PUSH
27884: LD_VAR 0 3
27888: PUSH
27889: LD_VAR 0 1
27893: ARRAY
27894: PUSH
27895: LD_INT 1
27897: ARRAY
27898: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
27899: LD_VAR 0 8
27903: PPUSH
27904: CALL_OW 301
27908: IFTRUE 27927
27910: PUSH
27911: LD_VAR 0 5
27915: PUSH
27916: LD_VAR 0 8
27920: PPUSH
27921: CALL_OW 255
27925: NONEQUAL
27926: OR
27927: IFFALSE 27956
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
27929: LD_ADDR_EXP 82
27933: PUSH
27934: LD_EXP 82
27938: PPUSH
27939: LD_VAR 0 8
27943: PPUSH
27944: LD_INT 0
27946: PPUSH
27947: CALL_OW 1
27951: ST_TO_ADDR
// exit ;
27952: POP
27953: POP
27954: GO 28495
// end ; x := list [ i ] [ 3 ] ;
27956: LD_ADDR_VAR 0 6
27960: PUSH
27961: LD_VAR 0 3
27965: PUSH
27966: LD_VAR 0 1
27970: ARRAY
27971: PUSH
27972: LD_INT 3
27974: ARRAY
27975: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
27976: LD_ADDR_VAR 0 7
27980: PUSH
27981: LD_VAR 0 3
27985: PUSH
27986: LD_VAR 0 1
27990: ARRAY
27991: PUSH
27992: LD_INT 4
27994: ARRAY
27995: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
27996: LD_ADDR_VAR 0 9
28000: PUSH
28001: LD_VAR 0 6
28005: PPUSH
28006: LD_VAR 0 7
28010: PPUSH
28011: LD_INT 16
28013: PPUSH
28014: CALL 75680 0 3
28018: ST_TO_ADDR
// if not cratesNearbyPoint then
28019: LD_VAR 0 9
28023: NOT
28024: IFFALSE 28030
// exit ;
28026: POP
28027: POP
28028: GO 28495
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
28030: LD_ADDR_VAR 0 4
28034: PUSH
28035: LD_INT 22
28037: PUSH
28038: LD_VAR 0 5
28042: PUSH
28043: EMPTY
28044: LIST
28045: LIST
28046: PUSH
28047: LD_INT 3
28049: PUSH
28050: LD_INT 60
28052: PUSH
28053: EMPTY
28054: LIST
28055: PUSH
28056: EMPTY
28057: LIST
28058: LIST
28059: PUSH
28060: LD_INT 91
28062: PUSH
28063: LD_VAR 0 8
28067: PUSH
28068: LD_INT 6
28070: PUSH
28071: EMPTY
28072: LIST
28073: LIST
28074: LIST
28075: PUSH
28076: LD_INT 2
28078: PUSH
28079: LD_INT 25
28081: PUSH
28082: LD_INT 2
28084: PUSH
28085: EMPTY
28086: LIST
28087: LIST
28088: PUSH
28089: LD_INT 25
28091: PUSH
28092: LD_INT 16
28094: PUSH
28095: EMPTY
28096: LIST
28097: LIST
28098: PUSH
28099: EMPTY
28100: LIST
28101: LIST
28102: LIST
28103: PUSH
28104: EMPTY
28105: LIST
28106: LIST
28107: LIST
28108: LIST
28109: PPUSH
28110: CALL_OW 69
28114: PUSH
28115: LD_VAR 0 8
28119: PPUSH
28120: CALL_OW 313
28124: PPUSH
28125: LD_INT 3
28127: PUSH
28128: LD_INT 60
28130: PUSH
28131: EMPTY
28132: LIST
28133: PUSH
28134: EMPTY
28135: LIST
28136: LIST
28137: PUSH
28138: LD_INT 2
28140: PUSH
28141: LD_INT 25
28143: PUSH
28144: LD_INT 2
28146: PUSH
28147: EMPTY
28148: LIST
28149: LIST
28150: PUSH
28151: LD_INT 25
28153: PUSH
28154: LD_INT 16
28156: PUSH
28157: EMPTY
28158: LIST
28159: LIST
28160: PUSH
28161: EMPTY
28162: LIST
28163: LIST
28164: LIST
28165: PUSH
28166: EMPTY
28167: LIST
28168: LIST
28169: PPUSH
28170: CALL_OW 72
28174: UNION
28175: ST_TO_ADDR
// if tmp then
28176: LD_VAR 0 4
28180: IFFALSE 28260
// begin tmp := ShrinkArray ( tmp , 3 ) ;
28182: LD_ADDR_VAR 0 4
28186: PUSH
28187: LD_VAR 0 4
28191: PPUSH
28192: LD_INT 3
28194: PPUSH
28195: CALL 73487 0 2
28199: ST_TO_ADDR
// for j in tmp do
28200: LD_ADDR_VAR 0 2
28204: PUSH
28205: LD_VAR 0 4
28209: PUSH
28210: FOR_IN
28211: IFFALSE 28254
// begin if IsInUnit ( j ) then
28213: LD_VAR 0 2
28217: PPUSH
28218: CALL_OW 310
28222: IFFALSE 28233
// ComExit ( j ) ;
28224: LD_VAR 0 2
28228: PPUSH
28229: CALL 73570 0 1
// AddComCollect ( j , x , y ) ;
28233: LD_VAR 0 2
28237: PPUSH
28238: LD_VAR 0 6
28242: PPUSH
28243: LD_VAR 0 7
28247: PPUSH
28248: CALL_OW 177
// end ;
28252: GO 28210
28254: POP
28255: POP
// exit ;
28256: POP
28257: POP
28258: GO 28495
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
28260: LD_ADDR_VAR 0 4
28264: PUSH
28265: LD_INT 22
28267: PUSH
28268: LD_VAR 0 5
28272: PUSH
28273: EMPTY
28274: LIST
28275: LIST
28276: PUSH
28277: LD_INT 91
28279: PUSH
28280: LD_VAR 0 8
28284: PUSH
28285: LD_INT 8
28287: PUSH
28288: EMPTY
28289: LIST
28290: LIST
28291: LIST
28292: PUSH
28293: LD_INT 2
28295: PUSH
28296: LD_INT 34
28298: PUSH
28299: LD_INT 12
28301: PUSH
28302: EMPTY
28303: LIST
28304: LIST
28305: PUSH
28306: LD_INT 34
28308: PUSH
28309: LD_INT 51
28311: PUSH
28312: EMPTY
28313: LIST
28314: LIST
28315: PUSH
28316: LD_INT 34
28318: PUSH
28319: LD_INT 32
28321: PUSH
28322: EMPTY
28323: LIST
28324: LIST
28325: PUSH
28326: LD_INT 34
28328: PUSH
28329: LD_INT 89
28331: PUSH
28332: EMPTY
28333: LIST
28334: LIST
28335: PUSH
28336: EMPTY
28337: LIST
28338: LIST
28339: LIST
28340: LIST
28341: LIST
28342: PUSH
28343: EMPTY
28344: LIST
28345: LIST
28346: LIST
28347: PPUSH
28348: CALL_OW 69
28352: ST_TO_ADDR
// if tmp then
28353: LD_VAR 0 4
28357: IFFALSE 28491
// begin for j in tmp do
28359: LD_ADDR_VAR 0 2
28363: PUSH
28364: LD_VAR 0 4
28368: PUSH
28369: FOR_IN
28370: IFFALSE 28489
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
28372: LD_VAR 0 2
28376: PPUSH
28377: CALL_OW 262
28381: PUSH
28382: LD_INT 3
28384: EQUAL
28385: IFTRUE 28402
28387: PUSH
28388: LD_VAR 0 2
28392: PPUSH
28393: CALL_OW 261
28397: PUSH
28398: LD_INT 20
28400: GREATER
28401: OR
28402: IFFALSE 28416
28404: PUSH
28405: LD_VAR 0 2
28409: PPUSH
28410: CALL_OW 314
28414: NOT
28415: AND
28416: IFFALSE 28446
28418: PUSH
28419: LD_VAR 0 2
28423: PPUSH
28424: CALL_OW 263
28428: PUSH
28429: LD_INT 1
28431: NONEQUAL
28432: IFTRUE 28445
28434: PUSH
28435: LD_VAR 0 2
28439: PPUSH
28440: CALL_OW 311
28444: OR
28445: AND
28446: IFFALSE 28487
// begin ComCollect ( j , x , y ) ;
28448: LD_VAR 0 2
28452: PPUSH
28453: LD_VAR 0 6
28457: PPUSH
28458: LD_VAR 0 7
28462: PPUSH
28463: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
28467: LD_VAR 0 2
28471: PPUSH
28472: LD_VAR 0 8
28476: PPUSH
28477: CALL_OW 172
// exit ;
28481: POP
28482: POP
28483: POP
28484: POP
28485: GO 28495
// end ;
28487: GO 28369
28489: POP
28490: POP
// end ; end ;
28491: GO 27856
28493: POP
28494: POP
// end ; end_of_file
28495: PPOPN 9
28497: END
// export function SOS_UnitDestroyed ( un ) ; begin
28498: LD_INT 0
28500: PPUSH
// ComRadiation ( un ) ;
28501: LD_VAR 0 1
28505: PPUSH
28506: CALL 29668 0 1
// end ;
28510: LD_VAR 0 2
28514: RET
// export function SOS_UnitKamikazed ( un ) ; begin
28515: LD_INT 0
28517: PPUSH
// ComRadiation ( un ) ;
28518: LD_VAR 0 1
28522: PPUSH
28523: CALL 29668 0 1
// end ;
28527: LD_VAR 0 2
28531: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
28532: LD_INT 0
28534: PPUSH
// end ;
28535: LD_VAR 0 4
28539: RET
// export function SOS_Command ( cmd ) ; begin
28540: LD_INT 0
28542: PPUSH
// end ;
28543: LD_VAR 0 2
28547: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
28548: LD_INT 0
28550: PPUSH
// end ;
28551: LD_VAR 0 6
28555: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex , weapon ; begin
28556: LD_INT 0
28558: PPUSH
28559: PPUSH
28560: PPUSH
28561: PPUSH
28562: PPUSH
// if not vehicle or not factory then
28563: LD_VAR 0 1
28567: NOT
28568: IFTRUE 28577
28570: PUSH
28571: LD_VAR 0 2
28575: NOT
28576: OR
28577: IFFALSE 28581
// exit ;
28579: GO 29243
// weapon := GetWeapon ( vehicle ) ;
28581: LD_ADDR_VAR 0 7
28585: PUSH
28586: LD_VAR 0 1
28590: PPUSH
28591: CALL_OW 264
28595: ST_TO_ADDR
// if weapon = ar_miner then
28596: LD_VAR 0 7
28600: PUSH
28601: LD_INT 81
28603: EQUAL
28604: IFFALSE 28661
// begin minersList := Replace ( minersList , minersList + 1 , vehicle ) ;
28606: LD_ADDR_EXP 91
28610: PUSH
28611: LD_EXP 91
28615: PPUSH
28616: LD_EXP 91
28620: PUSH
28621: LD_INT 1
28623: PLUS
28624: PPUSH
28625: LD_VAR 0 1
28629: PPUSH
28630: CALL_OW 1
28634: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
28635: LD_ADDR_EXP 92
28639: PUSH
28640: LD_EXP 92
28644: PPUSH
28645: LD_EXP 92
28649: PUSH
28650: LD_INT 1
28652: PLUS
28653: PPUSH
28654: EMPTY
28655: PPUSH
28656: CALL_OW 1
28660: ST_TO_ADDR
// end ; if not factoryWaypoints then
28661: LD_EXP 80
28665: NOT
28666: IFFALSE 28670
// exit ;
28668: GO 29243
// for i := 1 to Count ( factoryWaypoints ) do
28670: LD_ADDR_VAR 0 4
28674: PUSH
28675: DOUBLE
28676: LD_INT 1
28678: DEC
28679: ST_TO_ADDR
28680: LD_EXP 80
28684: PPUSH
28685: CALL 37196 0 1
28689: PUSH
28690: FOR_TO
28691: IFFALSE 29241
// if factoryWaypoints [ i ] [ 2 ] = factory then
28693: LD_EXP 80
28697: PUSH
28698: LD_VAR 0 4
28702: ARRAY
28703: PUSH
28704: LD_INT 2
28706: ARRAY
28707: PUSH
28708: LD_VAR 0 2
28712: EQUAL
28713: IFFALSE 29239
// begin if GetControl ( vehicle ) = control_manual then
28715: LD_VAR 0 1
28719: PPUSH
28720: CALL_OW 263
28724: PUSH
28725: LD_INT 1
28727: EQUAL
28728: IFFALSE 29092
// begin driver := IsDrivenBy ( vehicle ) ;
28730: LD_ADDR_VAR 0 5
28734: PUSH
28735: LD_VAR 0 1
28739: PPUSH
28740: CALL_OW 311
28744: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
28745: LD_VAR 0 5
28749: PUSH
28750: LD_EXP 81
28754: IN
28755: IFTRUE 28769
28757: PUSH
28758: LD_VAR 0 1
28762: PUSH
28763: LD_EXP 81
28767: IN
28768: OR
28769: IFFALSE 28775
// exit ;
28771: POP
28772: POP
28773: GO 29243
// if not HasTask ( driver ) then
28775: LD_VAR 0 5
28779: PPUSH
28780: CALL_OW 314
28784: NOT
28785: IFFALSE 29090
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
28787: LD_ADDR_EXP 81
28791: PUSH
28792: LD_EXP 81
28796: PPUSH
28797: LD_VAR 0 5
28801: PPUSH
28802: CALL 73172 0 2
28806: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
28807: LD_ADDR_EXP 81
28811: PUSH
28812: LD_EXP 81
28816: PPUSH
28817: LD_VAR 0 1
28821: PPUSH
28822: CALL 73172 0 2
28826: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
28827: LD_ADDR_VAR 0 6
28831: PUSH
28832: LD_EXP 80
28836: PUSH
28837: LD_VAR 0 4
28841: ARRAY
28842: PUSH
28843: LD_INT 3
28845: ARRAY
28846: PPUSH
28847: LD_EXP 80
28851: PUSH
28852: LD_VAR 0 4
28856: ARRAY
28857: PUSH
28858: LD_INT 4
28860: ARRAY
28861: PPUSH
28862: CALL_OW 428
28866: ST_TO_ADDR
// if hex then
28867: LD_VAR 0 6
28871: IFFALSE 28889
// ComMoveUnit ( driver , hex ) else
28873: LD_VAR 0 5
28877: PPUSH
28878: LD_VAR 0 6
28882: PPUSH
28883: CALL_OW 112
28887: GO 28973
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
28889: LD_VAR 0 1
28893: PPUSH
28894: LD_EXP 80
28898: PUSH
28899: LD_VAR 0 4
28903: ARRAY
28904: PUSH
28905: LD_INT 3
28907: ARRAY
28908: PPUSH
28909: LD_EXP 80
28913: PUSH
28914: LD_VAR 0 4
28918: ARRAY
28919: PUSH
28920: LD_INT 4
28922: ARRAY
28923: PPUSH
28924: CALL_OW 297
28928: PUSH
28929: LD_INT 0
28931: GREATER
28932: IFFALSE 28973
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
28934: LD_VAR 0 5
28938: PPUSH
28939: LD_EXP 80
28943: PUSH
28944: LD_VAR 0 4
28948: ARRAY
28949: PUSH
28950: LD_INT 3
28952: ARRAY
28953: PPUSH
28954: LD_EXP 80
28958: PUSH
28959: LD_VAR 0 4
28963: ARRAY
28964: PUSH
28965: LD_INT 4
28967: ARRAY
28968: PPUSH
28969: CALL_OW 111
// AddComExitVehicle ( driver ) ;
28973: LD_VAR 0 5
28977: PPUSH
28978: CALL_OW 181
// if Multiplayer then
28982: LD_OWVAR 4
28986: IFFALSE 29035
// begin repeat wait ( 10 ) ;
28988: LD_INT 10
28990: PPUSH
28991: CALL_OW 67
// until not IsInUnit ( driver ) ;
28995: LD_VAR 0 5
28999: PPUSH
29000: CALL_OW 310
29004: NOT
29005: IFFALSE 28988
// if not HasTask ( driver ) then
29007: LD_VAR 0 5
29011: PPUSH
29012: CALL_OW 314
29016: NOT
29017: IFFALSE 29033
// ComEnterUnit ( driver , factory ) ;
29019: LD_VAR 0 5
29023: PPUSH
29024: LD_VAR 0 2
29028: PPUSH
29029: CALL_OW 120
// end else
29033: GO 29049
// AddComEnterUnit ( driver , factory ) ;
29035: LD_VAR 0 5
29039: PPUSH
29040: LD_VAR 0 2
29044: PPUSH
29045: CALL_OW 180
// wait ( 0 0$1 ) ;
29049: LD_INT 35
29051: PPUSH
29052: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
29056: LD_ADDR_EXP 81
29060: PUSH
29061: LD_EXP 81
29065: PUSH
29066: LD_VAR 0 5
29070: DIFF
29071: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
29072: LD_ADDR_EXP 81
29076: PUSH
29077: LD_EXP 81
29081: PUSH
29082: LD_VAR 0 1
29086: DIFF
29087: ST_TO_ADDR
// break ;
29088: GO 29241
// end ; end else
29090: GO 29239
// if GetControl ( vehicle ) = control_remote then
29092: LD_VAR 0 1
29096: PPUSH
29097: CALL_OW 263
29101: PUSH
29102: LD_INT 2
29104: EQUAL
29105: IFFALSE 29191
// begin wait ( 0 0$2 ) ;
29107: LD_INT 70
29109: PPUSH
29110: CALL_OW 67
// repeat wait ( 10 ) ;
29114: LD_INT 10
29116: PPUSH
29117: CALL_OW 67
// Connect ( vehicle ) ;
29121: LD_VAR 0 1
29125: PPUSH
29126: CALL 43474 0 1
// until IsControledBy ( vehicle ) ;
29130: LD_VAR 0 1
29134: PPUSH
29135: CALL_OW 312
29139: IFFALSE 29114
// wait ( 10 ) ;
29141: LD_INT 10
29143: PPUSH
29144: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
29148: LD_VAR 0 1
29152: PPUSH
29153: LD_EXP 80
29157: PUSH
29158: LD_VAR 0 4
29162: ARRAY
29163: PUSH
29164: LD_INT 3
29166: ARRAY
29167: PPUSH
29168: LD_EXP 80
29172: PUSH
29173: LD_VAR 0 4
29177: ARRAY
29178: PUSH
29179: LD_INT 4
29181: ARRAY
29182: PPUSH
29183: CALL_OW 111
// break ;
29187: GO 29241
// end else
29189: GO 29239
// begin wait ( 0 0$3 ) ;
29191: LD_INT 105
29193: PPUSH
29194: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
29198: LD_VAR 0 1
29202: PPUSH
29203: LD_EXP 80
29207: PUSH
29208: LD_VAR 0 4
29212: ARRAY
29213: PUSH
29214: LD_INT 3
29216: ARRAY
29217: PPUSH
29218: LD_EXP 80
29222: PUSH
29223: LD_VAR 0 4
29227: ARRAY
29228: PUSH
29229: LD_INT 4
29231: ARRAY
29232: PPUSH
29233: CALL_OW 111
// break ;
29237: GO 29241
// end ; end ;
29239: GO 28690
29241: POP
29242: POP
// end ;
29243: LD_VAR 0 3
29247: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
29248: LD_INT 0
29250: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
29251: LD_VAR 0 1
29255: PUSH
29256: LD_INT 250
29258: EQUAL
29259: IFFALSE 29276
29261: PUSH
29262: LD_VAR 0 2
29266: PPUSH
29267: CALL_OW 264
29271: PUSH
29272: LD_INT 81
29274: EQUAL
29275: AND
29276: IFFALSE 29297
// MinerPlaceMine ( unit , x , y ) ;
29278: LD_VAR 0 2
29282: PPUSH
29283: LD_VAR 0 4
29287: PPUSH
29288: LD_VAR 0 5
29292: PPUSH
29293: CALL 32643 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
29297: LD_VAR 0 1
29301: PUSH
29302: LD_INT 251
29304: EQUAL
29305: IFFALSE 29322
29307: PUSH
29308: LD_VAR 0 2
29312: PPUSH
29313: CALL_OW 264
29317: PUSH
29318: LD_INT 81
29320: EQUAL
29321: AND
29322: IFFALSE 29343
// MinerDetonateMine ( unit , x , y ) ;
29324: LD_VAR 0 2
29328: PPUSH
29329: LD_VAR 0 4
29333: PPUSH
29334: LD_VAR 0 5
29338: PPUSH
29339: CALL 33050 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
29343: LD_VAR 0 1
29347: PUSH
29348: LD_INT 252
29350: EQUAL
29351: IFFALSE 29368
29353: PUSH
29354: LD_VAR 0 2
29358: PPUSH
29359: CALL_OW 264
29363: PUSH
29364: LD_INT 81
29366: EQUAL
29367: AND
29368: IFFALSE 29389
// MinerCreateMinefield ( unit , x , y ) ;
29370: LD_VAR 0 2
29374: PPUSH
29375: LD_VAR 0 4
29379: PPUSH
29380: LD_VAR 0 5
29384: PPUSH
29385: CALL 33282 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
29389: LD_VAR 0 1
29393: PUSH
29394: LD_INT 253
29396: EQUAL
29397: IFFALSE 29414
29399: PUSH
29400: LD_VAR 0 2
29404: PPUSH
29405: CALL_OW 257
29409: PUSH
29410: LD_INT 5
29412: EQUAL
29413: AND
29414: IFFALSE 29435
// ComBinocular ( unit , x , y ) ;
29416: LD_VAR 0 2
29420: PPUSH
29421: LD_VAR 0 4
29425: PPUSH
29426: LD_VAR 0 5
29430: PPUSH
29431: CALL 33657 0 3
// if selectedUnit then
29435: LD_VAR 0 3
29439: IFFALSE 29499
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
29441: LD_VAR 0 1
29445: PUSH
29446: LD_INT 254
29448: EQUAL
29449: IFFALSE 29466
29451: PUSH
29452: LD_VAR 0 2
29456: PPUSH
29457: CALL_OW 264
29461: PUSH
29462: LD_INT 99
29464: EQUAL
29465: AND
29466: IFFALSE 29483
29468: PUSH
29469: LD_VAR 0 3
29473: PPUSH
29474: CALL_OW 263
29478: PUSH
29479: LD_INT 3
29481: EQUAL
29482: AND
29483: IFFALSE 29499
// HackDestroyVehicle ( unit , selectedUnit ) ;
29485: LD_VAR 0 2
29489: PPUSH
29490: LD_VAR 0 3
29494: PPUSH
29495: CALL 31833 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
29499: LD_VAR 0 1
29503: PUSH
29504: LD_INT 255
29506: EQUAL
29507: IFFALSE 29531
29509: PUSH
29510: LD_VAR 0 2
29514: PPUSH
29515: CALL_OW 264
29519: PUSH
29520: LD_INT 14
29522: PUSH
29523: LD_INT 53
29525: PUSH
29526: EMPTY
29527: LIST
29528: LIST
29529: IN
29530: AND
29531: IFFALSE 29549
29533: PUSH
29534: LD_VAR 0 4
29538: PPUSH
29539: LD_VAR 0 5
29543: PPUSH
29544: CALL_OW 488
29548: AND
29549: IFFALSE 29573
// CutTreeXYR ( unit , x , y , 12 ) ;
29551: LD_VAR 0 2
29555: PPUSH
29556: LD_VAR 0 4
29560: PPUSH
29561: LD_VAR 0 5
29565: PPUSH
29566: LD_INT 12
29568: PPUSH
29569: CALL 29764 0 4
// if cmd = 256 then
29573: LD_VAR 0 1
29577: PUSH
29578: LD_INT 256
29580: EQUAL
29581: IFFALSE 29602
// SetFactoryWaypoint ( unit , x , y ) ;
29583: LD_VAR 0 2
29587: PPUSH
29588: LD_VAR 0 4
29592: PPUSH
29593: LD_VAR 0 5
29597: PPUSH
29598: CALL 27043 0 3
// if cmd = 257 then
29602: LD_VAR 0 1
29606: PUSH
29607: LD_INT 257
29609: EQUAL
29610: IFFALSE 29631
// SetWarehouseGatheringPoint ( unit , x , y ) ;
29612: LD_VAR 0 2
29616: PPUSH
29617: LD_VAR 0 4
29621: PPUSH
29622: LD_VAR 0 5
29626: PPUSH
29627: CALL 27539 0 3
// if cmd = 258 then
29631: LD_VAR 0 1
29635: PUSH
29636: LD_INT 258
29638: EQUAL
29639: IFFALSE 29663
// BurnTreeXYR ( unit , x , y , 8 ) ;
29641: LD_VAR 0 2
29645: PPUSH
29646: LD_VAR 0 4
29650: PPUSH
29651: LD_VAR 0 5
29655: PPUSH
29656: LD_INT 8
29658: PPUSH
29659: CALL 30186 0 4
// end ;
29663: LD_VAR 0 6
29667: RET
// export function ComRadiation ( un ) ; var eff ; begin
29668: LD_INT 0
29670: PPUSH
29671: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
29672: LD_VAR 0 1
29676: PPUSH
29677: CALL_OW 264
29681: PUSH
29682: LD_INT 91
29684: NONEQUAL
29685: IFFALSE 29689
// exit ;
29687: GO 29759
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
29689: LD_INT 68
29691: PPUSH
29692: LD_VAR 0 1
29696: PPUSH
29697: CALL_OW 255
29701: PPUSH
29702: CALL_OW 321
29706: PUSH
29707: LD_INT 2
29709: EQUAL
29710: IFFALSE 29722
// eff := 50 else
29712: LD_ADDR_VAR 0 3
29716: PUSH
29717: LD_INT 50
29719: ST_TO_ADDR
29720: GO 29730
// eff := 25 ;
29722: LD_ADDR_VAR 0 3
29726: PUSH
29727: LD_INT 25
29729: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
29730: LD_VAR 0 1
29734: PPUSH
29735: CALL_OW 250
29739: PPUSH
29740: LD_VAR 0 1
29744: PPUSH
29745: CALL_OW 251
29749: PPUSH
29750: LD_VAR 0 3
29754: PPUSH
29755: CALL_OW 495
// end ;
29759: LD_VAR 0 2
29763: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
29764: LD_INT 0
29766: PPUSH
29767: PPUSH
29768: PPUSH
29769: PPUSH
29770: PPUSH
29771: PPUSH
29772: PPUSH
29773: PPUSH
29774: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
29775: LD_VAR 0 1
29779: PPUSH
29780: CALL_OW 302
29784: NOT
29785: IFTRUE 29804
29787: PUSH
29788: LD_VAR 0 2
29792: PPUSH
29793: LD_VAR 0 3
29797: PPUSH
29798: CALL_OW 488
29802: NOT
29803: OR
29804: IFTRUE 29813
29806: PUSH
29807: LD_VAR 0 4
29811: NOT
29812: OR
29813: IFFALSE 29817
// exit ;
29815: GO 30181
// if Count ( GetTaskList ( bulldozer ) ) > 10 then
29817: LD_VAR 0 1
29821: PPUSH
29822: CALL_OW 437
29826: PPUSH
29827: CALL 37196 0 1
29831: PUSH
29832: LD_INT 10
29834: GREATER
29835: IFFALSE 29839
// exit ;
29837: GO 30181
// list := [ ] ;
29839: LD_ADDR_VAR 0 13
29843: PUSH
29844: EMPTY
29845: ST_TO_ADDR
// if x - r < 0 then
29846: LD_VAR 0 2
29850: PUSH
29851: LD_VAR 0 4
29855: MINUS
29856: PUSH
29857: LD_INT 0
29859: LESS
29860: IFFALSE 29872
// min_x := 0 else
29862: LD_ADDR_VAR 0 7
29866: PUSH
29867: LD_INT 0
29869: ST_TO_ADDR
29870: GO 29888
// min_x := x - r ;
29872: LD_ADDR_VAR 0 7
29876: PUSH
29877: LD_VAR 0 2
29881: PUSH
29882: LD_VAR 0 4
29886: MINUS
29887: ST_TO_ADDR
// if y - r < 0 then
29888: LD_VAR 0 3
29892: PUSH
29893: LD_VAR 0 4
29897: MINUS
29898: PUSH
29899: LD_INT 0
29901: LESS
29902: IFFALSE 29914
// min_y := 0 else
29904: LD_ADDR_VAR 0 8
29908: PUSH
29909: LD_INT 0
29911: ST_TO_ADDR
29912: GO 29930
// min_y := y - r ;
29914: LD_ADDR_VAR 0 8
29918: PUSH
29919: LD_VAR 0 3
29923: PUSH
29924: LD_VAR 0 4
29928: MINUS
29929: ST_TO_ADDR
// max_x := x + r ;
29930: LD_ADDR_VAR 0 9
29934: PUSH
29935: LD_VAR 0 2
29939: PUSH
29940: LD_VAR 0 4
29944: PLUS
29945: ST_TO_ADDR
// max_y := y + r ;
29946: LD_ADDR_VAR 0 10
29950: PUSH
29951: LD_VAR 0 3
29955: PUSH
29956: LD_VAR 0 4
29960: PLUS
29961: ST_TO_ADDR
// for _x = min_x to max_x do
29962: LD_ADDR_VAR 0 11
29966: PUSH
29967: DOUBLE
29968: LD_VAR 0 7
29972: DEC
29973: ST_TO_ADDR
29974: LD_VAR 0 9
29978: PUSH
29979: FOR_TO
29980: IFFALSE 30099
// for _y = min_y to max_y do
29982: LD_ADDR_VAR 0 12
29986: PUSH
29987: DOUBLE
29988: LD_VAR 0 8
29992: DEC
29993: ST_TO_ADDR
29994: LD_VAR 0 10
29998: PUSH
29999: FOR_TO
30000: IFFALSE 30095
// begin if not ValidHex ( _x , _y ) then
30002: LD_VAR 0 11
30006: PPUSH
30007: LD_VAR 0 12
30011: PPUSH
30012: CALL_OW 488
30016: NOT
30017: IFFALSE 30021
// continue ;
30019: GO 29999
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
30021: LD_VAR 0 11
30025: PPUSH
30026: LD_VAR 0 12
30030: PPUSH
30031: CALL_OW 351
30035: IFFALSE 30053
30037: PUSH
30038: LD_VAR 0 11
30042: PPUSH
30043: LD_VAR 0 12
30047: PPUSH
30048: CALL_OW 554
30052: AND
30053: IFFALSE 30093
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
30055: LD_ADDR_VAR 0 13
30059: PUSH
30060: LD_VAR 0 13
30064: PPUSH
30065: LD_VAR 0 13
30069: PUSH
30070: LD_INT 1
30072: PLUS
30073: PPUSH
30074: LD_VAR 0 11
30078: PUSH
30079: LD_VAR 0 12
30083: PUSH
30084: EMPTY
30085: LIST
30086: LIST
30087: PPUSH
30088: CALL_OW 2
30092: ST_TO_ADDR
// end ;
30093: GO 29999
30095: POP
30096: POP
30097: GO 29979
30099: POP
30100: POP
// if not list then
30101: LD_VAR 0 13
30105: NOT
30106: IFFALSE 30110
// exit ;
30108: GO 30181
// for i in list do
30110: LD_ADDR_VAR 0 6
30114: PUSH
30115: LD_VAR 0 13
30119: PUSH
30120: FOR_IN
30121: IFFALSE 30179
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
30123: LD_VAR 0 1
30127: PPUSH
30128: LD_STRING M
30130: PUSH
30131: LD_VAR 0 6
30135: PUSH
30136: LD_INT 1
30138: ARRAY
30139: PUSH
30140: LD_VAR 0 6
30144: PUSH
30145: LD_INT 2
30147: ARRAY
30148: PUSH
30149: LD_INT 0
30151: PUSH
30152: LD_INT 0
30154: PUSH
30155: LD_INT 0
30157: PUSH
30158: LD_INT 0
30160: PUSH
30161: EMPTY
30162: LIST
30163: LIST
30164: LIST
30165: LIST
30166: LIST
30167: LIST
30168: LIST
30169: PUSH
30170: EMPTY
30171: LIST
30172: PPUSH
30173: CALL_OW 447
30177: GO 30120
30179: POP
30180: POP
// end ;
30181: LD_VAR 0 5
30185: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
30186: LD_INT 0
30188: PPUSH
30189: PPUSH
30190: PPUSH
30191: PPUSH
30192: PPUSH
30193: PPUSH
30194: PPUSH
30195: PPUSH
30196: PPUSH
30197: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
30198: LD_VAR 0 1
30202: PPUSH
30203: CALL_OW 302
30207: NOT
30208: IFTRUE 30227
30210: PUSH
30211: LD_VAR 0 2
30215: PPUSH
30216: LD_VAR 0 3
30220: PPUSH
30221: CALL_OW 488
30225: NOT
30226: OR
30227: IFTRUE 30236
30229: PUSH
30230: LD_VAR 0 4
30234: NOT
30235: OR
30236: IFFALSE 30240
// exit ;
30238: GO 30779
// if Count ( GetTaskList ( flame ) ) > 10 then
30240: LD_VAR 0 1
30244: PPUSH
30245: CALL_OW 437
30249: PPUSH
30250: CALL 37196 0 1
30254: PUSH
30255: LD_INT 10
30257: GREATER
30258: IFFALSE 30262
// exit ;
30260: GO 30779
// list := [ ] ;
30262: LD_ADDR_VAR 0 13
30266: PUSH
30267: EMPTY
30268: ST_TO_ADDR
// if x - r < 0 then
30269: LD_VAR 0 2
30273: PUSH
30274: LD_VAR 0 4
30278: MINUS
30279: PUSH
30280: LD_INT 0
30282: LESS
30283: IFFALSE 30295
// min_x := 0 else
30285: LD_ADDR_VAR 0 7
30289: PUSH
30290: LD_INT 0
30292: ST_TO_ADDR
30293: GO 30311
// min_x := x - r ;
30295: LD_ADDR_VAR 0 7
30299: PUSH
30300: LD_VAR 0 2
30304: PUSH
30305: LD_VAR 0 4
30309: MINUS
30310: ST_TO_ADDR
// if y - r < 0 then
30311: LD_VAR 0 3
30315: PUSH
30316: LD_VAR 0 4
30320: MINUS
30321: PUSH
30322: LD_INT 0
30324: LESS
30325: IFFALSE 30337
// min_y := 0 else
30327: LD_ADDR_VAR 0 8
30331: PUSH
30332: LD_INT 0
30334: ST_TO_ADDR
30335: GO 30353
// min_y := y - r ;
30337: LD_ADDR_VAR 0 8
30341: PUSH
30342: LD_VAR 0 3
30346: PUSH
30347: LD_VAR 0 4
30351: MINUS
30352: ST_TO_ADDR
// max_x := x + r ;
30353: LD_ADDR_VAR 0 9
30357: PUSH
30358: LD_VAR 0 2
30362: PUSH
30363: LD_VAR 0 4
30367: PLUS
30368: ST_TO_ADDR
// max_y := y + r ;
30369: LD_ADDR_VAR 0 10
30373: PUSH
30374: LD_VAR 0 3
30378: PUSH
30379: LD_VAR 0 4
30383: PLUS
30384: ST_TO_ADDR
// for _x = min_x to max_x do
30385: LD_ADDR_VAR 0 11
30389: PUSH
30390: DOUBLE
30391: LD_VAR 0 7
30395: DEC
30396: ST_TO_ADDR
30397: LD_VAR 0 9
30401: PUSH
30402: FOR_TO
30403: IFFALSE 30522
// for _y = min_y to max_y do
30405: LD_ADDR_VAR 0 12
30409: PUSH
30410: DOUBLE
30411: LD_VAR 0 8
30415: DEC
30416: ST_TO_ADDR
30417: LD_VAR 0 10
30421: PUSH
30422: FOR_TO
30423: IFFALSE 30518
// begin if not ValidHex ( _x , _y ) then
30425: LD_VAR 0 11
30429: PPUSH
30430: LD_VAR 0 12
30434: PPUSH
30435: CALL_OW 488
30439: NOT
30440: IFFALSE 30444
// continue ;
30442: GO 30422
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
30444: LD_VAR 0 11
30448: PPUSH
30449: LD_VAR 0 12
30453: PPUSH
30454: CALL_OW 351
30458: IFFALSE 30476
30460: PUSH
30461: LD_VAR 0 11
30465: PPUSH
30466: LD_VAR 0 12
30470: PPUSH
30471: CALL_OW 554
30475: AND
30476: IFFALSE 30516
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
30478: LD_ADDR_VAR 0 13
30482: PUSH
30483: LD_VAR 0 13
30487: PPUSH
30488: LD_VAR 0 13
30492: PUSH
30493: LD_INT 1
30495: PLUS
30496: PPUSH
30497: LD_VAR 0 11
30501: PUSH
30502: LD_VAR 0 12
30506: PUSH
30507: EMPTY
30508: LIST
30509: LIST
30510: PPUSH
30511: CALL_OW 2
30515: ST_TO_ADDR
// end ;
30516: GO 30422
30518: POP
30519: POP
30520: GO 30402
30522: POP
30523: POP
// if not list then
30524: LD_VAR 0 13
30528: NOT
30529: IFFALSE 30533
// exit ;
30531: GO 30779
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
30533: LD_ADDR_VAR 0 13
30537: PUSH
30538: LD_VAR 0 1
30542: PPUSH
30543: LD_VAR 0 13
30547: PPUSH
30548: LD_INT 1
30550: PPUSH
30551: LD_INT 1
30553: PPUSH
30554: CALL 40602 0 4
30558: ST_TO_ADDR
// ComStop ( flame ) ;
30559: LD_VAR 0 1
30563: PPUSH
30564: CALL_OW 141
// for i in list do
30568: LD_ADDR_VAR 0 6
30572: PUSH
30573: LD_VAR 0 13
30577: PUSH
30578: FOR_IN
30579: IFFALSE 30610
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
30581: LD_VAR 0 1
30585: PPUSH
30586: LD_VAR 0 6
30590: PUSH
30591: LD_INT 1
30593: ARRAY
30594: PPUSH
30595: LD_VAR 0 6
30599: PUSH
30600: LD_INT 2
30602: ARRAY
30603: PPUSH
30604: CALL_OW 176
30608: GO 30578
30610: POP
30611: POP
// repeat wait ( 0 0$1 ) ;
30612: LD_INT 35
30614: PPUSH
30615: CALL_OW 67
// task := GetTaskList ( flame ) ;
30619: LD_ADDR_VAR 0 14
30623: PUSH
30624: LD_VAR 0 1
30628: PPUSH
30629: CALL_OW 437
30633: ST_TO_ADDR
// if not task then
30634: LD_VAR 0 14
30638: NOT
30639: IFFALSE 30643
// exit ;
30641: GO 30779
// if task [ 1 ] [ 1 ] <> | then
30643: LD_VAR 0 14
30647: PUSH
30648: LD_INT 1
30650: ARRAY
30651: PUSH
30652: LD_INT 1
30654: ARRAY
30655: PUSH
30656: LD_STRING |
30658: NONEQUAL
30659: IFFALSE 30663
// exit ;
30661: GO 30779
// _x := task [ 1 ] [ 2 ] ;
30663: LD_ADDR_VAR 0 11
30667: PUSH
30668: LD_VAR 0 14
30672: PUSH
30673: LD_INT 1
30675: ARRAY
30676: PUSH
30677: LD_INT 2
30679: ARRAY
30680: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
30681: LD_ADDR_VAR 0 12
30685: PUSH
30686: LD_VAR 0 14
30690: PUSH
30691: LD_INT 1
30693: ARRAY
30694: PUSH
30695: LD_INT 3
30697: ARRAY
30698: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
30699: LD_VAR 0 11
30703: PPUSH
30704: LD_VAR 0 12
30708: PPUSH
30709: CALL_OW 351
30713: NOT
30714: IFTRUE 30733
30716: PUSH
30717: LD_VAR 0 11
30721: PPUSH
30722: LD_VAR 0 12
30726: PPUSH
30727: CALL_OW 554
30731: NOT
30732: OR
30733: IFFALSE 30767
// begin task := Delete ( task , 1 ) ;
30735: LD_ADDR_VAR 0 14
30739: PUSH
30740: LD_VAR 0 14
30744: PPUSH
30745: LD_INT 1
30747: PPUSH
30748: CALL_OW 3
30752: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
30753: LD_VAR 0 1
30757: PPUSH
30758: LD_VAR 0 14
30762: PPUSH
30763: CALL_OW 446
// end ; until not HasTask ( flame ) ;
30767: LD_VAR 0 1
30771: PPUSH
30772: CALL_OW 314
30776: NOT
30777: IFFALSE 30612
// end ;
30779: LD_VAR 0 5
30783: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
30784: LD_EXP 84
30788: NOT
30789: IFFALSE 30839
30791: GO 30793
30793: DISABLE
// begin initHack := true ;
30794: LD_ADDR_EXP 84
30798: PUSH
30799: LD_INT 1
30801: ST_TO_ADDR
// hackTanks := [ ] ;
30802: LD_ADDR_EXP 85
30806: PUSH
30807: EMPTY
30808: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
30809: LD_ADDR_EXP 86
30813: PUSH
30814: EMPTY
30815: ST_TO_ADDR
// hackLimit := 3 ;
30816: LD_ADDR_EXP 87
30820: PUSH
30821: LD_INT 3
30823: ST_TO_ADDR
// hackDist := 12 ;
30824: LD_ADDR_EXP 88
30828: PUSH
30829: LD_INT 12
30831: ST_TO_ADDR
// hackCounter := [ ] ;
30832: LD_ADDR_EXP 89
30836: PUSH
30837: EMPTY
30838: ST_TO_ADDR
// end ;
30839: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
30840: LD_EXP 84
30844: IFFALSE 30862
30846: PUSH
30847: LD_INT 34
30849: PUSH
30850: LD_INT 99
30852: PUSH
30853: EMPTY
30854: LIST
30855: LIST
30856: PPUSH
30857: CALL_OW 69
30861: AND
30862: IFFALSE 31115
30864: GO 30866
30866: DISABLE
30867: LD_INT 0
30869: PPUSH
30870: PPUSH
// begin enable ;
30871: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
30872: LD_ADDR_VAR 0 1
30876: PUSH
30877: LD_INT 34
30879: PUSH
30880: LD_INT 99
30882: PUSH
30883: EMPTY
30884: LIST
30885: LIST
30886: PPUSH
30887: CALL_OW 69
30891: PUSH
30892: FOR_IN
30893: IFFALSE 31113
// begin if not i in hackTanks then
30895: LD_VAR 0 1
30899: PUSH
30900: LD_EXP 85
30904: IN
30905: NOT
30906: IFFALSE 30989
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
30908: LD_ADDR_EXP 85
30912: PUSH
30913: LD_EXP 85
30917: PPUSH
30918: LD_EXP 85
30922: PUSH
30923: LD_INT 1
30925: PLUS
30926: PPUSH
30927: LD_VAR 0 1
30931: PPUSH
30932: CALL_OW 1
30936: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
30937: LD_ADDR_EXP 86
30941: PUSH
30942: LD_EXP 86
30946: PPUSH
30947: LD_EXP 86
30951: PUSH
30952: LD_INT 1
30954: PLUS
30955: PPUSH
30956: EMPTY
30957: PPUSH
30958: CALL_OW 1
30962: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
30963: LD_ADDR_EXP 89
30967: PUSH
30968: LD_EXP 89
30972: PPUSH
30973: LD_EXP 89
30977: PUSH
30978: LD_INT 1
30980: PLUS
30981: PPUSH
30982: EMPTY
30983: PPUSH
30984: CALL_OW 1
30988: ST_TO_ADDR
// end ; if not IsOk ( i ) then
30989: LD_VAR 0 1
30993: PPUSH
30994: CALL_OW 302
30998: NOT
30999: IFFALSE 31012
// begin HackUnlinkAll ( i ) ;
31001: LD_VAR 0 1
31005: PPUSH
31006: CALL 31118 0 1
// continue ;
31010: GO 30892
// end ; HackCheckCapturedStatus ( i ) ;
31012: LD_VAR 0 1
31016: PPUSH
31017: CALL 31563 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
31021: LD_ADDR_VAR 0 2
31025: PUSH
31026: LD_INT 81
31028: PUSH
31029: LD_VAR 0 1
31033: PPUSH
31034: CALL_OW 255
31038: PUSH
31039: EMPTY
31040: LIST
31041: LIST
31042: PUSH
31043: LD_INT 33
31045: PUSH
31046: LD_INT 3
31048: PUSH
31049: EMPTY
31050: LIST
31051: LIST
31052: PUSH
31053: LD_INT 91
31055: PUSH
31056: LD_VAR 0 1
31060: PUSH
31061: LD_EXP 88
31065: PUSH
31066: EMPTY
31067: LIST
31068: LIST
31069: LIST
31070: PUSH
31071: LD_INT 50
31073: PUSH
31074: EMPTY
31075: LIST
31076: PUSH
31077: EMPTY
31078: LIST
31079: LIST
31080: LIST
31081: LIST
31082: PPUSH
31083: CALL_OW 69
31087: ST_TO_ADDR
// if not tmp then
31088: LD_VAR 0 2
31092: NOT
31093: IFFALSE 31097
// continue ;
31095: GO 30892
// HackLink ( i , tmp ) ;
31097: LD_VAR 0 1
31101: PPUSH
31102: LD_VAR 0 2
31106: PPUSH
31107: CALL 31254 0 2
// end ;
31111: GO 30892
31113: POP
31114: POP
// end ;
31115: PPOPN 2
31117: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
31118: LD_INT 0
31120: PPUSH
31121: PPUSH
31122: PPUSH
// if not hack in hackTanks then
31123: LD_VAR 0 1
31127: PUSH
31128: LD_EXP 85
31132: IN
31133: NOT
31134: IFFALSE 31138
// exit ;
31136: GO 31249
// index := GetElementIndex ( hackTanks , hack ) ;
31138: LD_ADDR_VAR 0 4
31142: PUSH
31143: LD_EXP 85
31147: PPUSH
31148: LD_VAR 0 1
31152: PPUSH
31153: CALL 39897 0 2
31157: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
31158: LD_EXP 86
31162: PUSH
31163: LD_VAR 0 4
31167: ARRAY
31168: IFFALSE 31249
// begin for i in hackTanksCaptured [ index ] do
31170: LD_ADDR_VAR 0 3
31174: PUSH
31175: LD_EXP 86
31179: PUSH
31180: LD_VAR 0 4
31184: ARRAY
31185: PUSH
31186: FOR_IN
31187: IFFALSE 31213
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
31189: LD_VAR 0 3
31193: PUSH
31194: LD_INT 1
31196: ARRAY
31197: PPUSH
31198: LD_VAR 0 3
31202: PUSH
31203: LD_INT 2
31205: ARRAY
31206: PPUSH
31207: CALL_OW 235
31211: GO 31186
31213: POP
31214: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
31215: LD_ADDR_EXP 86
31219: PUSH
31220: LD_EXP 86
31224: PPUSH
31225: LD_VAR 0 4
31229: PPUSH
31230: EMPTY
31231: PPUSH
31232: CALL_OW 1
31236: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
31237: LD_VAR 0 1
31241: PPUSH
31242: LD_INT 0
31244: PPUSH
31245: CALL_OW 505
// end ; end ;
31249: LD_VAR 0 2
31253: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
31254: LD_INT 0
31256: PPUSH
31257: PPUSH
31258: PPUSH
// if not hack in hackTanks or not vehicles then
31259: LD_VAR 0 1
31263: PUSH
31264: LD_EXP 85
31268: IN
31269: NOT
31270: IFTRUE 31279
31272: PUSH
31273: LD_VAR 0 2
31277: NOT
31278: OR
31279: IFFALSE 31283
// exit ;
31281: GO 31558
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
31283: LD_ADDR_VAR 0 2
31287: PUSH
31288: LD_VAR 0 1
31292: PPUSH
31293: LD_VAR 0 2
31297: PPUSH
31298: LD_INT 1
31300: PPUSH
31301: LD_INT 1
31303: PPUSH
31304: CALL 40549 0 4
31308: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
31309: LD_ADDR_VAR 0 5
31313: PUSH
31314: LD_EXP 85
31318: PPUSH
31319: LD_VAR 0 1
31323: PPUSH
31324: CALL 39897 0 2
31328: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
31329: LD_EXP 86
31333: PUSH
31334: LD_VAR 0 5
31338: ARRAY
31339: PUSH
31340: LD_EXP 87
31344: LESS
31345: IFFALSE 31534
// begin for i := 1 to vehicles do
31347: LD_ADDR_VAR 0 4
31351: PUSH
31352: DOUBLE
31353: LD_INT 1
31355: DEC
31356: ST_TO_ADDR
31357: LD_VAR 0 2
31361: PUSH
31362: FOR_TO
31363: IFFALSE 31532
// begin if hackTanksCaptured [ index ] = hackLimit then
31365: LD_EXP 86
31369: PUSH
31370: LD_VAR 0 5
31374: ARRAY
31375: PUSH
31376: LD_EXP 87
31380: EQUAL
31381: IFFALSE 31385
// break ;
31383: GO 31532
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
31385: LD_ADDR_EXP 89
31389: PUSH
31390: LD_EXP 89
31394: PPUSH
31395: LD_VAR 0 5
31399: PPUSH
31400: LD_EXP 89
31404: PUSH
31405: LD_VAR 0 5
31409: ARRAY
31410: PUSH
31411: LD_INT 1
31413: PLUS
31414: PPUSH
31415: CALL_OW 1
31419: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
31420: LD_ADDR_EXP 86
31424: PUSH
31425: LD_EXP 86
31429: PPUSH
31430: LD_VAR 0 5
31434: PUSH
31435: LD_EXP 86
31439: PUSH
31440: LD_VAR 0 5
31444: ARRAY
31445: PUSH
31446: LD_INT 1
31448: PLUS
31449: PUSH
31450: EMPTY
31451: LIST
31452: LIST
31453: PPUSH
31454: LD_VAR 0 2
31458: PUSH
31459: LD_VAR 0 4
31463: ARRAY
31464: PUSH
31465: LD_VAR 0 2
31469: PUSH
31470: LD_VAR 0 4
31474: ARRAY
31475: PPUSH
31476: CALL_OW 255
31480: PUSH
31481: EMPTY
31482: LIST
31483: LIST
31484: PPUSH
31485: CALL 40114 0 3
31489: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
31490: LD_VAR 0 2
31494: PUSH
31495: LD_VAR 0 4
31499: ARRAY
31500: PPUSH
31501: LD_VAR 0 1
31505: PPUSH
31506: CALL_OW 255
31510: PPUSH
31511: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
31515: LD_VAR 0 2
31519: PUSH
31520: LD_VAR 0 4
31524: ARRAY
31525: PPUSH
31526: CALL_OW 141
// end ;
31530: GO 31362
31532: POP
31533: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
31534: LD_VAR 0 1
31538: PPUSH
31539: LD_EXP 86
31543: PUSH
31544: LD_VAR 0 5
31548: ARRAY
31549: PUSH
31550: LD_INT 0
31552: PLUS
31553: PPUSH
31554: CALL_OW 505
// end ;
31558: LD_VAR 0 3
31562: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
31563: LD_INT 0
31565: PPUSH
31566: PPUSH
31567: PPUSH
31568: PPUSH
// if not hack in hackTanks then
31569: LD_VAR 0 1
31573: PUSH
31574: LD_EXP 85
31578: IN
31579: NOT
31580: IFFALSE 31584
// exit ;
31582: GO 31828
// index := GetElementIndex ( hackTanks , hack ) ;
31584: LD_ADDR_VAR 0 4
31588: PUSH
31589: LD_EXP 85
31593: PPUSH
31594: LD_VAR 0 1
31598: PPUSH
31599: CALL 39897 0 2
31603: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
31604: LD_ADDR_VAR 0 3
31608: PUSH
31609: DOUBLE
31610: LD_EXP 86
31614: PUSH
31615: LD_VAR 0 4
31619: ARRAY
31620: INC
31621: ST_TO_ADDR
31622: LD_INT 1
31624: PUSH
31625: FOR_DOWNTO
31626: IFFALSE 31802
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
31628: LD_ADDR_VAR 0 5
31632: PUSH
31633: LD_EXP 86
31637: PUSH
31638: LD_VAR 0 4
31642: ARRAY
31643: PUSH
31644: LD_VAR 0 3
31648: ARRAY
31649: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
31650: LD_VAR 0 5
31654: PUSH
31655: LD_INT 1
31657: ARRAY
31658: PPUSH
31659: CALL_OW 302
31663: NOT
31664: IFTRUE 31692
31666: PUSH
31667: LD_VAR 0 5
31671: PUSH
31672: LD_INT 1
31674: ARRAY
31675: PPUSH
31676: CALL_OW 255
31680: PUSH
31681: LD_VAR 0 1
31685: PPUSH
31686: CALL_OW 255
31690: NONEQUAL
31691: OR
31692: IFFALSE 31800
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
31694: LD_VAR 0 5
31698: PUSH
31699: LD_INT 1
31701: ARRAY
31702: PPUSH
31703: CALL_OW 305
31707: IFFALSE 31735
31709: PUSH
31710: LD_VAR 0 5
31714: PUSH
31715: LD_INT 1
31717: ARRAY
31718: PPUSH
31719: CALL_OW 255
31723: PUSH
31724: LD_VAR 0 1
31728: PPUSH
31729: CALL_OW 255
31733: EQUAL
31734: AND
31735: IFFALSE 31759
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
31737: LD_VAR 0 5
31741: PUSH
31742: LD_INT 1
31744: ARRAY
31745: PPUSH
31746: LD_VAR 0 5
31750: PUSH
31751: LD_INT 2
31753: ARRAY
31754: PPUSH
31755: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
31759: LD_ADDR_EXP 86
31763: PUSH
31764: LD_EXP 86
31768: PPUSH
31769: LD_VAR 0 4
31773: PPUSH
31774: LD_EXP 86
31778: PUSH
31779: LD_VAR 0 4
31783: ARRAY
31784: PPUSH
31785: LD_VAR 0 3
31789: PPUSH
31790: CALL_OW 3
31794: PPUSH
31795: CALL_OW 1
31799: ST_TO_ADDR
// end ; end ;
31800: GO 31625
31802: POP
31803: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
31804: LD_VAR 0 1
31808: PPUSH
31809: LD_EXP 86
31813: PUSH
31814: LD_VAR 0 4
31818: ARRAY
31819: PUSH
31820: LD_INT 0
31822: PLUS
31823: PPUSH
31824: CALL_OW 505
// end ;
31828: LD_VAR 0 2
31832: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
31833: LD_INT 0
31835: PPUSH
31836: PPUSH
31837: PPUSH
31838: PPUSH
// if not hack in hackTanks then
31839: LD_VAR 0 1
31843: PUSH
31844: LD_EXP 85
31848: IN
31849: NOT
31850: IFFALSE 31854
// exit ;
31852: GO 31939
// index := GetElementIndex ( hackTanks , hack ) ;
31854: LD_ADDR_VAR 0 5
31858: PUSH
31859: LD_EXP 85
31863: PPUSH
31864: LD_VAR 0 1
31868: PPUSH
31869: CALL 39897 0 2
31873: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
31874: LD_ADDR_VAR 0 4
31878: PUSH
31879: DOUBLE
31880: LD_INT 1
31882: DEC
31883: ST_TO_ADDR
31884: LD_EXP 86
31888: PUSH
31889: LD_VAR 0 5
31893: ARRAY
31894: PUSH
31895: FOR_TO
31896: IFFALSE 31937
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
31898: LD_EXP 86
31902: PUSH
31903: LD_VAR 0 5
31907: ARRAY
31908: PUSH
31909: LD_VAR 0 4
31913: ARRAY
31914: PUSH
31915: LD_INT 1
31917: ARRAY
31918: PUSH
31919: LD_VAR 0 2
31923: EQUAL
31924: IFFALSE 31935
// KillUnit ( vehicle ) ;
31926: LD_VAR 0 2
31930: PPUSH
31931: CALL_OW 66
31935: GO 31895
31937: POP
31938: POP
// end ;
31939: LD_VAR 0 3
31943: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do var i ;
31944: LD_EXP 90
31948: NOT
31949: IFFALSE 32082
31951: GO 31953
31953: DISABLE
31954: LD_INT 0
31956: PPUSH
// begin initMiner := true ;
31957: LD_ADDR_EXP 90
31961: PUSH
31962: LD_INT 1
31964: ST_TO_ADDR
// minersList := [ ] ;
31965: LD_ADDR_EXP 91
31969: PUSH
31970: EMPTY
31971: ST_TO_ADDR
// minerMinesList := [ ] ;
31972: LD_ADDR_EXP 92
31976: PUSH
31977: EMPTY
31978: ST_TO_ADDR
// minesLimitPerVehicle := 10 ;
31979: LD_ADDR_EXP 93
31983: PUSH
31984: LD_INT 10
31986: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
31987: LD_ADDR_VAR 0 1
31991: PUSH
31992: LD_INT 34
31994: PUSH
31995: LD_INT 81
31997: PUSH
31998: EMPTY
31999: LIST
32000: LIST
32001: PPUSH
32002: CALL_OW 69
32006: PUSH
32007: FOR_IN
32008: IFFALSE 32080
// begin if not i in minersList then
32010: LD_VAR 0 1
32014: PUSH
32015: LD_EXP 91
32019: IN
32020: NOT
32021: IFFALSE 32078
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
32023: LD_ADDR_EXP 91
32027: PUSH
32028: LD_EXP 91
32032: PPUSH
32033: LD_EXP 91
32037: PUSH
32038: LD_INT 1
32040: PLUS
32041: PPUSH
32042: LD_VAR 0 1
32046: PPUSH
32047: CALL_OW 1
32051: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
32052: LD_ADDR_EXP 92
32056: PUSH
32057: LD_EXP 92
32061: PPUSH
32062: LD_EXP 92
32066: PUSH
32067: LD_INT 1
32069: PLUS
32070: PPUSH
32071: EMPTY
32072: PPUSH
32073: CALL_OW 1
32077: ST_TO_ADDR
// end end ;
32078: GO 32007
32080: POP
32081: POP
// end ;
32082: PPOPN 1
32084: END
// every 0 0$1 trigger initMiner and ( Count ( minerMinesList ) or FilterAllUnits ( [ f_weapon , ar_miner ] ) ) do var i , j , side , tmp ;
32085: LD_EXP 90
32089: IFFALSE 32120
32091: PUSH
32092: LD_EXP 92
32096: PPUSH
32097: CALL 37196 0 1
32101: IFTRUE 32119
32103: PUSH
32104: LD_INT 34
32106: PUSH
32107: LD_INT 81
32109: PUSH
32110: EMPTY
32111: LIST
32112: LIST
32113: PPUSH
32114: CALL_OW 69
32118: OR
32119: AND
32120: IFFALSE 32640
32122: GO 32124
32124: DISABLE
32125: LD_INT 0
32127: PPUSH
32128: PPUSH
32129: PPUSH
32130: PPUSH
// begin enable ;
32131: ENABLE
// for i := minerMinesList downto 1 do
32132: LD_ADDR_VAR 0 1
32136: PUSH
32137: DOUBLE
32138: LD_EXP 92
32142: INC
32143: ST_TO_ADDR
32144: LD_INT 1
32146: PUSH
32147: FOR_DOWNTO
32148: IFFALSE 32638
// begin side := GetSide ( minersList [ i ] ) ;
32150: LD_ADDR_VAR 0 3
32154: PUSH
32155: LD_EXP 91
32159: PUSH
32160: LD_VAR 0 1
32164: ARRAY
32165: PPUSH
32166: CALL_OW 255
32170: ST_TO_ADDR
// if IsLive ( minersList [ i ] ) and side in [ your_side , 9 ] then
32171: LD_EXP 91
32175: PUSH
32176: LD_VAR 0 1
32180: ARRAY
32181: PPUSH
32182: CALL_OW 300
32186: IFFALSE 32207
32188: PUSH
32189: LD_VAR 0 3
32193: PUSH
32194: LD_OWVAR 2
32198: PUSH
32199: LD_INT 9
32201: PUSH
32202: EMPTY
32203: LIST
32204: LIST
32205: IN
32206: AND
32207: IFFALSE 32240
// SetUnitDisplayNumber ( minersList [ i ] , Count ( minerMinesList [ i ] ) ) ;
32209: LD_EXP 91
32213: PUSH
32214: LD_VAR 0 1
32218: ARRAY
32219: PPUSH
32220: LD_EXP 92
32224: PUSH
32225: LD_VAR 0 1
32229: ARRAY
32230: PPUSH
32231: CALL 37196 0 1
32235: PPUSH
32236: CALL_OW 505
// if not minerMinesList [ i ] then
32240: LD_EXP 92
32244: PUSH
32245: LD_VAR 0 1
32249: ARRAY
32250: NOT
32251: IFFALSE 32255
// continue ;
32253: GO 32147
// for j := minerMinesList [ i ] downto 1 do
32255: LD_ADDR_VAR 0 2
32259: PUSH
32260: DOUBLE
32261: LD_EXP 92
32265: PUSH
32266: LD_VAR 0 1
32270: ARRAY
32271: INC
32272: ST_TO_ADDR
32273: LD_INT 1
32275: PUSH
32276: FOR_DOWNTO
32277: IFFALSE 32634
// begin if IsDead ( minersList [ i ] ) or not IsPlaced ( minersList [ i ] ) then
32279: LD_EXP 91
32283: PUSH
32284: LD_VAR 0 1
32288: ARRAY
32289: PPUSH
32290: CALL_OW 301
32294: IFTRUE 32314
32296: PUSH
32297: LD_EXP 91
32301: PUSH
32302: LD_VAR 0 1
32306: ARRAY
32307: PPUSH
32308: CALL_OW 305
32312: NOT
32313: OR
32314: IFFALSE 32405
// begin RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
32316: LD_EXP 92
32320: PUSH
32321: LD_VAR 0 1
32325: ARRAY
32326: PUSH
32327: LD_VAR 0 2
32331: ARRAY
32332: PUSH
32333: LD_INT 1
32335: ARRAY
32336: PPUSH
32337: LD_EXP 92
32341: PUSH
32342: LD_VAR 0 1
32346: ARRAY
32347: PUSH
32348: LD_VAR 0 2
32352: ARRAY
32353: PUSH
32354: LD_INT 2
32356: ARRAY
32357: PPUSH
32358: CALL_OW 612
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
32362: LD_ADDR_EXP 92
32366: PUSH
32367: LD_EXP 92
32371: PPUSH
32372: LD_VAR 0 1
32376: PPUSH
32377: LD_EXP 92
32381: PUSH
32382: LD_VAR 0 1
32386: ARRAY
32387: PPUSH
32388: LD_VAR 0 2
32392: PPUSH
32393: CALL_OW 3
32397: PPUSH
32398: CALL_OW 1
32402: ST_TO_ADDR
// continue ;
32403: GO 32276
// end ; tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
32405: LD_ADDR_VAR 0 4
32409: PUSH
32410: LD_EXP 92
32414: PUSH
32415: LD_VAR 0 1
32419: ARRAY
32420: PUSH
32421: LD_VAR 0 2
32425: ARRAY
32426: PUSH
32427: LD_INT 1
32429: ARRAY
32430: PPUSH
32431: LD_EXP 92
32435: PUSH
32436: LD_VAR 0 1
32440: ARRAY
32441: PUSH
32442: LD_VAR 0 2
32446: ARRAY
32447: PUSH
32448: LD_INT 2
32450: ARRAY
32451: PPUSH
32452: CALL_OW 428
32456: ST_TO_ADDR
// if not tmp then
32457: LD_VAR 0 4
32461: NOT
32462: IFFALSE 32466
// continue ;
32464: GO 32276
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
32466: LD_VAR 0 4
32470: PUSH
32471: LD_INT 81
32473: PUSH
32474: LD_VAR 0 3
32478: PUSH
32479: EMPTY
32480: LIST
32481: LIST
32482: PPUSH
32483: CALL_OW 69
32487: IN
32488: IFFALSE 32538
32490: PUSH
32491: LD_EXP 92
32495: PUSH
32496: LD_VAR 0 1
32500: ARRAY
32501: PUSH
32502: LD_VAR 0 2
32506: ARRAY
32507: PUSH
32508: LD_INT 1
32510: ARRAY
32511: PPUSH
32512: LD_EXP 92
32516: PUSH
32517: LD_VAR 0 1
32521: ARRAY
32522: PUSH
32523: LD_VAR 0 2
32527: ARRAY
32528: PUSH
32529: LD_INT 2
32531: ARRAY
32532: PPUSH
32533: CALL_OW 458
32537: AND
32538: IFFALSE 32632
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
32540: LD_EXP 92
32544: PUSH
32545: LD_VAR 0 1
32549: ARRAY
32550: PUSH
32551: LD_VAR 0 2
32555: ARRAY
32556: PUSH
32557: LD_INT 1
32559: ARRAY
32560: PPUSH
32561: LD_EXP 92
32565: PUSH
32566: LD_VAR 0 1
32570: ARRAY
32571: PUSH
32572: LD_VAR 0 2
32576: ARRAY
32577: PUSH
32578: LD_INT 2
32580: ARRAY
32581: PPUSH
32582: LD_VAR 0 3
32586: PPUSH
32587: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
32591: LD_ADDR_EXP 92
32595: PUSH
32596: LD_EXP 92
32600: PPUSH
32601: LD_VAR 0 1
32605: PPUSH
32606: LD_EXP 92
32610: PUSH
32611: LD_VAR 0 1
32615: ARRAY
32616: PPUSH
32617: LD_VAR 0 2
32621: PPUSH
32622: CALL_OW 3
32626: PPUSH
32627: CALL_OW 1
32631: ST_TO_ADDR
// end ; end ;
32632: GO 32276
32634: POP
32635: POP
// end ;
32636: GO 32147
32638: POP
32639: POP
// end ;
32640: PPOPN 4
32642: END
// export function MinerPlaceMine ( unit , x , y ) ; var index , side , i ; begin
32643: LD_INT 0
32645: PPUSH
32646: PPUSH
32647: PPUSH
32648: PPUSH
// result := false ;
32649: LD_ADDR_VAR 0 4
32653: PUSH
32654: LD_INT 0
32656: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
32657: LD_VAR 0 1
32661: PPUSH
32662: CALL_OW 264
32666: PUSH
32667: LD_INT 81
32669: EQUAL
32670: NOT
32671: IFFALSE 32675
// exit ;
32673: GO 33045
// side := GetSide ( unit ) ;
32675: LD_ADDR_VAR 0 6
32679: PUSH
32680: LD_VAR 0 1
32684: PPUSH
32685: CALL_OW 255
32689: ST_TO_ADDR
// index := GetElementIndex ( minersList , unit ) ;
32690: LD_ADDR_VAR 0 5
32694: PUSH
32695: LD_EXP 91
32699: PPUSH
32700: LD_VAR 0 1
32704: PPUSH
32705: CALL 39897 0 2
32709: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
32710: LD_EXP 92
32714: PUSH
32715: LD_VAR 0 5
32719: ARRAY
32720: PUSH
32721: LD_EXP 93
32725: GREATEREQUAL
32726: IFFALSE 32730
// exit ;
32728: GO 33045
// ComMoveXY ( unit , x , y ) ;
32730: LD_VAR 0 1
32734: PPUSH
32735: LD_VAR 0 2
32739: PPUSH
32740: LD_VAR 0 3
32744: PPUSH
32745: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
32749: LD_INT 35
32751: PPUSH
32752: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
32756: LD_VAR 0 1
32760: PPUSH
32761: LD_VAR 0 2
32765: PPUSH
32766: LD_VAR 0 3
32770: PPUSH
32771: CALL 71953 0 3
32775: NOT
32776: IFFALSE 32789
32778: PUSH
32779: LD_VAR 0 1
32783: PPUSH
32784: CALL_OW 314
32788: AND
32789: IFFALSE 32793
// exit ;
32791: GO 33045
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
32793: LD_VAR 0 2
32797: PPUSH
32798: LD_VAR 0 3
32802: PPUSH
32803: CALL_OW 428
32807: PUSH
32808: LD_VAR 0 1
32812: EQUAL
32813: IFFALSE 32827
32815: PUSH
32816: LD_VAR 0 1
32820: PPUSH
32821: CALL_OW 314
32825: NOT
32826: AND
32827: IFFALSE 32749
// if MineAtPos ( x , y ) then
32829: LD_VAR 0 2
32833: PPUSH
32834: LD_VAR 0 3
32838: PPUSH
32839: CALL_OW 458
32843: IFFALSE 32847
// exit ;
32845: GO 33045
// if your_side = side then
32847: LD_OWVAR 2
32851: PUSH
32852: LD_VAR 0 6
32856: EQUAL
32857: IFFALSE 32876
// PlaySoundXY ( x , y , PlantMine ) ;
32859: LD_VAR 0 2
32863: PPUSH
32864: LD_VAR 0 3
32868: PPUSH
32869: LD_STRING PlantMine
32871: PPUSH
32872: CALL_OW 366
// repeat wait ( 1 ) ;
32876: LD_INT 1
32878: PPUSH
32879: CALL_OW 67
// until PlaceMine ( x , y , side , 0 ) ;
32883: LD_VAR 0 2
32887: PPUSH
32888: LD_VAR 0 3
32892: PPUSH
32893: LD_VAR 0 6
32897: PPUSH
32898: LD_INT 0
32900: PPUSH
32901: CALL_OW 454
32905: IFFALSE 32876
// if MineAtPos ( x , y ) then
32907: LD_VAR 0 2
32911: PPUSH
32912: LD_VAR 0 3
32916: PPUSH
32917: CALL_OW 458
32921: IFFALSE 33037
// begin for i in minerMinesList [ index ] do
32923: LD_ADDR_VAR 0 7
32927: PUSH
32928: LD_EXP 92
32932: PUSH
32933: LD_VAR 0 5
32937: ARRAY
32938: PUSH
32939: FOR_IN
32940: IFFALSE 32982
// if i [ 1 ] = x and i [ 2 ] = y then
32942: LD_VAR 0 7
32946: PUSH
32947: LD_INT 1
32949: ARRAY
32950: PUSH
32951: LD_VAR 0 2
32955: EQUAL
32956: IFFALSE 32974
32958: PUSH
32959: LD_VAR 0 7
32963: PUSH
32964: LD_INT 2
32966: ARRAY
32967: PUSH
32968: LD_VAR 0 3
32972: EQUAL
32973: AND
32974: IFFALSE 32980
// exit ;
32976: POP
32977: POP
32978: GO 33045
32980: GO 32939
32982: POP
32983: POP
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
32984: LD_ADDR_EXP 92
32988: PUSH
32989: LD_EXP 92
32993: PPUSH
32994: LD_VAR 0 5
32998: PUSH
32999: LD_EXP 92
33003: PUSH
33004: LD_VAR 0 5
33008: ARRAY
33009: PUSH
33010: LD_INT 1
33012: PLUS
33013: PUSH
33014: EMPTY
33015: LIST
33016: LIST
33017: PPUSH
33018: LD_VAR 0 2
33022: PUSH
33023: LD_VAR 0 3
33027: PUSH
33028: EMPTY
33029: LIST
33030: LIST
33031: PPUSH
33032: CALL 40114 0 3
33036: ST_TO_ADDR
// end ; result := true ;
33037: LD_ADDR_VAR 0 4
33041: PUSH
33042: LD_INT 1
33044: ST_TO_ADDR
// end ;
33045: LD_VAR 0 4
33049: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
33050: LD_INT 0
33052: PPUSH
33053: PPUSH
33054: PPUSH
// if not unit in minersList then
33055: LD_VAR 0 1
33059: PUSH
33060: LD_EXP 91
33064: IN
33065: NOT
33066: IFFALSE 33070
// exit ;
33068: GO 33277
// index := GetElementIndex ( minersList , unit ) ;
33070: LD_ADDR_VAR 0 6
33074: PUSH
33075: LD_EXP 91
33079: PPUSH
33080: LD_VAR 0 1
33084: PPUSH
33085: CALL 39897 0 2
33089: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
33090: LD_ADDR_VAR 0 5
33094: PUSH
33095: DOUBLE
33096: LD_EXP 92
33100: PUSH
33101: LD_VAR 0 6
33105: ARRAY
33106: INC
33107: ST_TO_ADDR
33108: LD_INT 1
33110: PUSH
33111: FOR_DOWNTO
33112: IFFALSE 33275
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
33114: LD_EXP 92
33118: PUSH
33119: LD_VAR 0 6
33123: ARRAY
33124: PUSH
33125: LD_VAR 0 5
33129: ARRAY
33130: PUSH
33131: LD_INT 1
33133: ARRAY
33134: PPUSH
33135: LD_EXP 92
33139: PUSH
33140: LD_VAR 0 6
33144: ARRAY
33145: PUSH
33146: LD_VAR 0 5
33150: ARRAY
33151: PUSH
33152: LD_INT 2
33154: ARRAY
33155: PPUSH
33156: LD_VAR 0 2
33160: PPUSH
33161: LD_VAR 0 3
33165: PPUSH
33166: CALL_OW 298
33170: PUSH
33171: LD_INT 6
33173: LESS
33174: IFFALSE 33273
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
33176: LD_EXP 92
33180: PUSH
33181: LD_VAR 0 6
33185: ARRAY
33186: PUSH
33187: LD_VAR 0 5
33191: ARRAY
33192: PUSH
33193: LD_INT 1
33195: ARRAY
33196: PPUSH
33197: LD_EXP 92
33201: PUSH
33202: LD_VAR 0 6
33206: ARRAY
33207: PUSH
33208: LD_VAR 0 5
33212: ARRAY
33213: PUSH
33214: LD_INT 2
33216: ARRAY
33217: PPUSH
33218: LD_VAR 0 1
33222: PPUSH
33223: CALL_OW 255
33227: PPUSH
33228: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
33232: LD_ADDR_EXP 92
33236: PUSH
33237: LD_EXP 92
33241: PPUSH
33242: LD_VAR 0 6
33246: PPUSH
33247: LD_EXP 92
33251: PUSH
33252: LD_VAR 0 6
33256: ARRAY
33257: PPUSH
33258: LD_VAR 0 5
33262: PPUSH
33263: CALL_OW 3
33267: PPUSH
33268: CALL_OW 1
33272: ST_TO_ADDR
// end ; end ;
33273: GO 33111
33275: POP
33276: POP
// end ;
33277: LD_VAR 0 4
33281: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
33282: LD_INT 0
33284: PPUSH
33285: PPUSH
33286: PPUSH
33287: PPUSH
33288: PPUSH
33289: PPUSH
33290: PPUSH
33291: PPUSH
33292: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
33293: LD_VAR 0 1
33297: PPUSH
33298: CALL_OW 264
33302: PUSH
33303: LD_INT 81
33305: EQUAL
33306: NOT
33307: IFTRUE 33322
33309: PUSH
33310: LD_VAR 0 1
33314: PUSH
33315: LD_EXP 91
33319: IN
33320: NOT
33321: OR
33322: IFFALSE 33326
// exit ;
33324: GO 33652
// index := GetElementIndex ( minersList , unit ) ;
33326: LD_ADDR_VAR 0 6
33330: PUSH
33331: LD_EXP 91
33335: PPUSH
33336: LD_VAR 0 1
33340: PPUSH
33341: CALL 39897 0 2
33345: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
33346: LD_ADDR_VAR 0 8
33350: PUSH
33351: LD_EXP 93
33355: PUSH
33356: LD_EXP 92
33360: PUSH
33361: LD_VAR 0 6
33365: ARRAY
33366: MINUS
33367: ST_TO_ADDR
// if not minesFreeAmount then
33368: LD_VAR 0 8
33372: NOT
33373: IFFALSE 33377
// exit ;
33375: GO 33652
// tmp := [ ] ;
33377: LD_ADDR_VAR 0 7
33381: PUSH
33382: EMPTY
33383: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
33384: LD_ADDR_VAR 0 5
33388: PUSH
33389: DOUBLE
33390: LD_INT 1
33392: DEC
33393: ST_TO_ADDR
33394: LD_VAR 0 8
33398: PUSH
33399: FOR_TO
33400: IFFALSE 33599
// begin _d := rand ( 0 , 5 ) ;
33402: LD_ADDR_VAR 0 11
33406: PUSH
33407: LD_INT 0
33409: PPUSH
33410: LD_INT 5
33412: PPUSH
33413: CALL_OW 12
33417: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
33418: LD_ADDR_VAR 0 12
33422: PUSH
33423: LD_INT 2
33425: PPUSH
33426: LD_INT 6
33428: PPUSH
33429: CALL_OW 12
33433: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
33434: LD_ADDR_VAR 0 9
33438: PUSH
33439: LD_VAR 0 2
33443: PPUSH
33444: LD_VAR 0 11
33448: PPUSH
33449: LD_VAR 0 12
33453: PPUSH
33454: CALL_OW 272
33458: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
33459: LD_ADDR_VAR 0 10
33463: PUSH
33464: LD_VAR 0 3
33468: PPUSH
33469: LD_VAR 0 11
33473: PPUSH
33474: LD_VAR 0 12
33478: PPUSH
33479: CALL_OW 273
33483: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
33484: LD_VAR 0 9
33488: PPUSH
33489: LD_VAR 0 10
33493: PPUSH
33494: CALL_OW 488
33498: IFFALSE 33522
33500: PUSH
33501: LD_VAR 0 9
33505: PUSH
33506: LD_VAR 0 10
33510: PUSH
33511: EMPTY
33512: LIST
33513: LIST
33514: PUSH
33515: LD_VAR 0 7
33519: IN
33520: NOT
33521: AND
33522: IFFALSE 33541
33524: PUSH
33525: LD_VAR 0 9
33529: PPUSH
33530: LD_VAR 0 10
33534: PPUSH
33535: CALL_OW 458
33539: NOT
33540: AND
33541: IFFALSE 33583
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
33543: LD_ADDR_VAR 0 7
33547: PUSH
33548: LD_VAR 0 7
33552: PPUSH
33553: LD_VAR 0 7
33557: PUSH
33558: LD_INT 1
33560: PLUS
33561: PPUSH
33562: LD_VAR 0 9
33566: PUSH
33567: LD_VAR 0 10
33571: PUSH
33572: EMPTY
33573: LIST
33574: LIST
33575: PPUSH
33576: CALL_OW 1
33580: ST_TO_ADDR
33581: GO 33597
// i := i - 1 ;
33583: LD_ADDR_VAR 0 5
33587: PUSH
33588: LD_VAR 0 5
33592: PUSH
33593: LD_INT 1
33595: MINUS
33596: ST_TO_ADDR
// end ;
33597: GO 33399
33599: POP
33600: POP
// for i in tmp do
33601: LD_ADDR_VAR 0 5
33605: PUSH
33606: LD_VAR 0 7
33610: PUSH
33611: FOR_IN
33612: IFFALSE 33650
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
33614: LD_VAR 0 1
33618: PPUSH
33619: LD_VAR 0 5
33623: PUSH
33624: LD_INT 1
33626: ARRAY
33627: PPUSH
33628: LD_VAR 0 5
33632: PUSH
33633: LD_INT 2
33635: ARRAY
33636: PPUSH
33637: CALL 32643 0 3
33641: NOT
33642: IFFALSE 33648
// exit ;
33644: POP
33645: POP
33646: GO 33652
33648: GO 33611
33650: POP
33651: POP
// end ;
33652: LD_VAR 0 4
33656: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
33657: LD_INT 0
33659: PPUSH
33660: PPUSH
33661: PPUSH
33662: PPUSH
33663: PPUSH
33664: PPUSH
33665: PPUSH
33666: PPUSH
33667: PPUSH
// if GetClass ( unit ) <> class_sniper then
33668: LD_VAR 0 1
33672: PPUSH
33673: CALL_OW 257
33677: PUSH
33678: LD_INT 5
33680: NONEQUAL
33681: IFFALSE 33685
// exit ;
33683: GO 34155
// dist := 8 ;
33685: LD_ADDR_VAR 0 5
33689: PUSH
33690: LD_INT 8
33692: ST_TO_ADDR
// viewRange := 12 ;
33693: LD_ADDR_VAR 0 8
33697: PUSH
33698: LD_INT 12
33700: ST_TO_ADDR
// side := GetSide ( unit ) ;
33701: LD_ADDR_VAR 0 6
33705: PUSH
33706: LD_VAR 0 1
33710: PPUSH
33711: CALL_OW 255
33715: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
33716: LD_INT 61
33718: PPUSH
33719: LD_VAR 0 6
33723: PPUSH
33724: CALL_OW 321
33728: PUSH
33729: LD_INT 2
33731: EQUAL
33732: IFFALSE 33742
// viewRange := 16 ;
33734: LD_ADDR_VAR 0 8
33738: PUSH
33739: LD_INT 16
33741: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
33742: LD_VAR 0 1
33746: PPUSH
33747: LD_VAR 0 2
33751: PPUSH
33752: LD_VAR 0 3
33756: PPUSH
33757: CALL_OW 297
33761: PUSH
33762: LD_VAR 0 5
33766: GREATER
33767: IFFALSE 33846
// begin ComMoveXY ( unit , x , y ) ;
33769: LD_VAR 0 1
33773: PPUSH
33774: LD_VAR 0 2
33778: PPUSH
33779: LD_VAR 0 3
33783: PPUSH
33784: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
33788: LD_INT 35
33790: PPUSH
33791: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
33795: LD_VAR 0 1
33799: PPUSH
33800: LD_VAR 0 2
33804: PPUSH
33805: LD_VAR 0 3
33809: PPUSH
33810: CALL 71953 0 3
33814: NOT
33815: IFFALSE 33819
// exit ;
33817: GO 34155
// until GetDistUnitXY ( unit , x , y ) < dist ;
33819: LD_VAR 0 1
33823: PPUSH
33824: LD_VAR 0 2
33828: PPUSH
33829: LD_VAR 0 3
33833: PPUSH
33834: CALL_OW 297
33838: PUSH
33839: LD_VAR 0 5
33843: LESS
33844: IFFALSE 33788
// end ; ComTurnXY ( unit , x , y ) ;
33846: LD_VAR 0 1
33850: PPUSH
33851: LD_VAR 0 2
33855: PPUSH
33856: LD_VAR 0 3
33860: PPUSH
33861: CALL_OW 118
// repeat if Multiplayer then
33865: LD_OWVAR 4
33869: IFFALSE 33880
// wait ( 35 ) else
33871: LD_INT 35
33873: PPUSH
33874: CALL_OW 67
33878: GO 33887
// wait ( 5 ) ;
33880: LD_INT 5
33882: PPUSH
33883: CALL_OW 67
// _d := GetDir ( unit ) ;
33887: LD_ADDR_VAR 0 11
33891: PUSH
33892: LD_VAR 0 1
33896: PPUSH
33897: CALL_OW 254
33901: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
33902: LD_ADDR_VAR 0 7
33906: PUSH
33907: LD_VAR 0 1
33911: PPUSH
33912: CALL_OW 250
33916: PPUSH
33917: LD_VAR 0 1
33921: PPUSH
33922: CALL_OW 251
33926: PPUSH
33927: LD_VAR 0 2
33931: PPUSH
33932: LD_VAR 0 3
33936: PPUSH
33937: CALL 74589 0 4
33941: ST_TO_ADDR
// until dir = _d ;
33942: LD_VAR 0 7
33946: PUSH
33947: LD_VAR 0 11
33951: EQUAL
33952: IFFALSE 33865
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
33954: LD_ADDR_VAR 0 9
33958: PUSH
33959: LD_VAR 0 1
33963: PPUSH
33964: CALL_OW 250
33968: PPUSH
33969: LD_VAR 0 7
33973: PPUSH
33974: LD_VAR 0 5
33978: PPUSH
33979: CALL_OW 272
33983: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
33984: LD_ADDR_VAR 0 10
33988: PUSH
33989: LD_VAR 0 1
33993: PPUSH
33994: CALL_OW 251
33998: PPUSH
33999: LD_VAR 0 7
34003: PPUSH
34004: LD_VAR 0 5
34008: PPUSH
34009: CALL_OW 273
34013: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
34014: LD_VAR 0 9
34018: PPUSH
34019: LD_VAR 0 10
34023: PPUSH
34024: CALL_OW 488
34028: NOT
34029: IFFALSE 34033
// exit ;
34031: GO 34155
// ComAnimCustom ( unit , 1 ) ;
34033: LD_VAR 0 1
34037: PPUSH
34038: LD_INT 1
34040: PPUSH
34041: CALL_OW 592
// p := 0 ;
34045: LD_ADDR_VAR 0 12
34049: PUSH
34050: LD_INT 0
34052: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
34053: LD_VAR 0 9
34057: PPUSH
34058: LD_VAR 0 10
34062: PPUSH
34063: LD_VAR 0 6
34067: PPUSH
34068: LD_VAR 0 8
34072: PPUSH
34073: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
34077: LD_INT 35
34079: PPUSH
34080: CALL_OW 67
// p := Inc ( p ) ;
34084: LD_ADDR_VAR 0 12
34088: PUSH
34089: LD_VAR 0 12
34093: PPUSH
34094: CALL 74545 0 1
34098: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
34099: LD_VAR 0 12
34103: PUSH
34104: LD_INT 3
34106: EQUAL
34107: IFTRUE 34121
34109: PUSH
34110: LD_VAR 0 1
34114: PPUSH
34115: CALL_OW 302
34119: NOT
34120: OR
34121: IFTRUE 34134
34123: PUSH
34124: LD_VAR 0 1
34128: PPUSH
34129: CALL_OW 301
34133: OR
34134: IFFALSE 34077
// RemoveSeeing ( _x , _y , side ) ;
34136: LD_VAR 0 9
34140: PPUSH
34141: LD_VAR 0 10
34145: PPUSH
34146: LD_VAR 0 6
34150: PPUSH
34151: CALL_OW 331
// end ;
34155: LD_VAR 0 4
34159: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
34160: LD_INT 0
34162: PPUSH
34163: PPUSH
34164: PPUSH
34165: PPUSH
34166: PPUSH
34167: PPUSH
34168: PPUSH
34169: PPUSH
34170: PPUSH
34171: PPUSH
34172: PPUSH
// if not unit then
34173: LD_VAR 0 1
34177: NOT
34178: IFFALSE 34182
// exit ;
34180: GO 34453
// side := GetSide ( unit ) ;
34182: LD_ADDR_VAR 0 3
34186: PUSH
34187: LD_VAR 0 1
34191: PPUSH
34192: CALL_OW 255
34196: ST_TO_ADDR
// x := GetX ( unit ) ;
34197: LD_ADDR_VAR 0 5
34201: PUSH
34202: LD_VAR 0 1
34206: PPUSH
34207: CALL_OW 250
34211: ST_TO_ADDR
// y := GetY ( unit ) ;
34212: LD_ADDR_VAR 0 6
34216: PUSH
34217: LD_VAR 0 1
34221: PPUSH
34222: CALL_OW 251
34226: ST_TO_ADDR
// r := 8 ;
34227: LD_ADDR_VAR 0 4
34231: PUSH
34232: LD_INT 8
34234: ST_TO_ADDR
// if x - r < 0 then
34235: LD_VAR 0 5
34239: PUSH
34240: LD_VAR 0 4
34244: MINUS
34245: PUSH
34246: LD_INT 0
34248: LESS
34249: IFFALSE 34261
// min_x := 0 else
34251: LD_ADDR_VAR 0 7
34255: PUSH
34256: LD_INT 0
34258: ST_TO_ADDR
34259: GO 34277
// min_x := x - r ;
34261: LD_ADDR_VAR 0 7
34265: PUSH
34266: LD_VAR 0 5
34270: PUSH
34271: LD_VAR 0 4
34275: MINUS
34276: ST_TO_ADDR
// if y - r < 0 then
34277: LD_VAR 0 6
34281: PUSH
34282: LD_VAR 0 4
34286: MINUS
34287: PUSH
34288: LD_INT 0
34290: LESS
34291: IFFALSE 34303
// min_y := 0 else
34293: LD_ADDR_VAR 0 8
34297: PUSH
34298: LD_INT 0
34300: ST_TO_ADDR
34301: GO 34319
// min_y := y - r ;
34303: LD_ADDR_VAR 0 8
34307: PUSH
34308: LD_VAR 0 6
34312: PUSH
34313: LD_VAR 0 4
34317: MINUS
34318: ST_TO_ADDR
// max_x := x + r ;
34319: LD_ADDR_VAR 0 9
34323: PUSH
34324: LD_VAR 0 5
34328: PUSH
34329: LD_VAR 0 4
34333: PLUS
34334: ST_TO_ADDR
// max_y := y + r ;
34335: LD_ADDR_VAR 0 10
34339: PUSH
34340: LD_VAR 0 6
34344: PUSH
34345: LD_VAR 0 4
34349: PLUS
34350: ST_TO_ADDR
// for _x = min_x to max_x do
34351: LD_ADDR_VAR 0 11
34355: PUSH
34356: DOUBLE
34357: LD_VAR 0 7
34361: DEC
34362: ST_TO_ADDR
34363: LD_VAR 0 9
34367: PUSH
34368: FOR_TO
34369: IFFALSE 34451
// for _y = min_y to max_y do
34371: LD_ADDR_VAR 0 12
34375: PUSH
34376: DOUBLE
34377: LD_VAR 0 8
34381: DEC
34382: ST_TO_ADDR
34383: LD_VAR 0 10
34387: PUSH
34388: FOR_TO
34389: IFFALSE 34447
// begin if not ValidHex ( _x , _y ) then
34391: LD_VAR 0 11
34395: PPUSH
34396: LD_VAR 0 12
34400: PPUSH
34401: CALL_OW 488
34405: NOT
34406: IFFALSE 34410
// continue ;
34408: GO 34388
// if MineAtPos ( _x , _y ) then
34410: LD_VAR 0 11
34414: PPUSH
34415: LD_VAR 0 12
34419: PPUSH
34420: CALL_OW 458
34424: IFFALSE 34445
// ViewMineAtPos ( _x , _y , side ) ;
34426: LD_VAR 0 11
34430: PPUSH
34431: LD_VAR 0 12
34435: PPUSH
34436: LD_VAR 0 3
34440: PPUSH
34441: CALL_OW 457
// end ;
34445: GO 34388
34447: POP
34448: POP
34449: GO 34368
34451: POP
34452: POP
// end ;
34453: LD_VAR 0 2
34457: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer , side ; begin
34458: LD_INT 0
34460: PPUSH
34461: PPUSH
34462: PPUSH
34463: PPUSH
34464: PPUSH
34465: PPUSH
34466: PPUSH
// if not units then
34467: LD_VAR 0 1
34471: NOT
34472: IFFALSE 34476
// exit ;
34474: GO 34940
// scaners := [ ] ;
34476: LD_ADDR_VAR 0 6
34480: PUSH
34481: EMPTY
34482: ST_TO_ADDR
// for i in units do
34483: LD_ADDR_VAR 0 3
34487: PUSH
34488: LD_VAR 0 1
34492: PUSH
34493: FOR_IN
34494: IFFALSE 34651
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
34496: LD_VAR 0 3
34500: PPUSH
34501: CALL_OW 264
34505: PUSH
34506: LD_INT 11
34508: NONEQUAL
34509: IFTRUE 34523
34511: PUSH
34512: LD_VAR 0 3
34516: PPUSH
34517: CALL_OW 302
34521: NOT
34522: OR
34523: IFTRUE 34540
34525: PUSH
34526: LD_VAR 0 3
34530: PPUSH
34531: CALL_OW 110
34535: PUSH
34536: LD_INT 502
34538: EQUAL
34539: OR
34540: IFFALSE 34544
// continue ;
34542: GO 34493
// ComStop ( i ) ;
34544: LD_VAR 0 3
34548: PPUSH
34549: CALL_OW 141
// x := GetX ( i ) ;
34553: LD_ADDR_VAR 0 4
34557: PUSH
34558: LD_VAR 0 3
34562: PPUSH
34563: CALL_OW 250
34567: ST_TO_ADDR
// y := GetY ( i ) ;
34568: LD_ADDR_VAR 0 5
34572: PUSH
34573: LD_VAR 0 3
34577: PPUSH
34578: CALL_OW 251
34582: ST_TO_ADDR
// if GetSide ( i ) = your_side then
34583: LD_VAR 0 3
34587: PPUSH
34588: CALL_OW 255
34592: PUSH
34593: LD_OWVAR 2
34597: EQUAL
34598: IFFALSE 34617
// PlaySoundXY ( x , y , mineDetector ) ;
34600: LD_VAR 0 4
34604: PPUSH
34605: LD_VAR 0 5
34609: PPUSH
34610: LD_STRING mineDetector
34612: PPUSH
34613: CALL_OW 366
// scaners := Join ( scaners , i ) ;
34617: LD_ADDR_VAR 0 6
34621: PUSH
34622: LD_VAR 0 6
34626: PPUSH
34627: LD_VAR 0 3
34631: PPUSH
34632: CALL 73172 0 2
34636: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
34637: LD_VAR 0 3
34641: PPUSH
34642: LD_INT 502
34644: PPUSH
34645: CALL_OW 109
// end ;
34649: GO 34493
34651: POP
34652: POP
// if not scaners then
34653: LD_VAR 0 6
34657: NOT
34658: IFFALSE 34662
// exit ;
34660: GO 34940
// wait ( 3 ) ;
34662: LD_INT 3
34664: PPUSH
34665: CALL_OW 67
// timer := 6 ;
34669: LD_ADDR_VAR 0 7
34673: PUSH
34674: LD_INT 6
34676: ST_TO_ADDR
// repeat for i in scaners do
34677: LD_ADDR_VAR 0 3
34681: PUSH
34682: LD_VAR 0 6
34686: PUSH
34687: FOR_IN
34688: IFFALSE 34838
// begin side := GetSide ( i ) ;
34690: LD_ADDR_VAR 0 8
34694: PUSH
34695: LD_VAR 0 3
34699: PPUSH
34700: CALL_OW 255
34704: ST_TO_ADDR
// if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
34705: LD_VAR 0 3
34709: PPUSH
34710: CALL_OW 302
34714: NOT
34715: IFTRUE 34728
34717: PUSH
34718: LD_VAR 0 3
34722: PPUSH
34723: CALL_OW 314
34727: OR
34728: IFTRUE 34759
34730: PUSH
34731: LD_VAR 0 3
34735: PPUSH
34736: CALL_OW 263
34740: PUSH
34741: LD_INT 1
34743: EQUAL
34744: IFFALSE 34758
34746: PUSH
34747: LD_VAR 0 3
34751: PPUSH
34752: CALL_OW 311
34756: NOT
34757: AND
34758: OR
34759: IFFALSE 34803
// begin SetUnitDisplayNumber ( i , 0 ) ;
34761: LD_VAR 0 3
34765: PPUSH
34766: LD_INT 0
34768: PPUSH
34769: CALL_OW 505
// SetTag ( i , 0 ) ;
34773: LD_VAR 0 3
34777: PPUSH
34778: LD_INT 0
34780: PPUSH
34781: CALL_OW 109
// scaners := scaners diff i ;
34785: LD_ADDR_VAR 0 6
34789: PUSH
34790: LD_VAR 0 6
34794: PUSH
34795: LD_VAR 0 3
34799: DIFF
34800: ST_TO_ADDR
// continue ;
34801: GO 34687
// end ; if side in [ your_side , 9 ] then
34803: LD_VAR 0 8
34807: PUSH
34808: LD_OWVAR 2
34812: PUSH
34813: LD_INT 9
34815: PUSH
34816: EMPTY
34817: LIST
34818: LIST
34819: IN
34820: IFFALSE 34836
// SetUnitDisplayNumber ( i , timer ) ;
34822: LD_VAR 0 3
34826: PPUSH
34827: LD_VAR 0 7
34831: PPUSH
34832: CALL_OW 505
// end ;
34836: GO 34687
34838: POP
34839: POP
// if not scaners then
34840: LD_VAR 0 6
34844: NOT
34845: IFFALSE 34849
// exit ;
34847: GO 34940
// timer := Dec ( timer ) ;
34849: LD_ADDR_VAR 0 7
34853: PUSH
34854: LD_VAR 0 7
34858: PPUSH
34859: CALL 74567 0 1
34863: ST_TO_ADDR
// wait ( 0 0$1 ) ;
34864: LD_INT 35
34866: PPUSH
34867: CALL_OW 67
// until timer = 0 ;
34871: LD_VAR 0 7
34875: PUSH
34876: LD_INT 0
34878: EQUAL
34879: IFFALSE 34677
// if not scaners then
34881: LD_VAR 0 6
34885: NOT
34886: IFFALSE 34890
// exit ;
34888: GO 34940
// for i in scaners do
34890: LD_ADDR_VAR 0 3
34894: PUSH
34895: LD_VAR 0 6
34899: PUSH
34900: FOR_IN
34901: IFFALSE 34938
// begin SetUnitDisplayNumber ( i , 0 ) ;
34903: LD_VAR 0 3
34907: PPUSH
34908: LD_INT 0
34910: PPUSH
34911: CALL_OW 505
// SetTag ( i , 0 ) ;
34915: LD_VAR 0 3
34919: PPUSH
34920: LD_INT 0
34922: PPUSH
34923: CALL_OW 109
// RevealDetectorMine ( i ) ;
34927: LD_VAR 0 3
34931: PPUSH
34932: CALL 34160 0 1
// end ;
34936: GO 34900
34938: POP
34939: POP
// end ;
34940: LD_VAR 0 2
34944: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
34945: LD_INT 0
34947: PPUSH
// if p1 = mine_detector_mode then
34948: LD_VAR 0 2
34952: PUSH
34953: LD_INT 103
34955: EQUAL
34956: IFFALSE 34967
// DetectMine ( units ) ;
34958: LD_VAR 0 1
34962: PPUSH
34963: CALL 34458 0 1
// end ; end_of_file
34967: LD_VAR 0 7
34971: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
34972: LD_INT 0
34974: PPUSH
34975: PPUSH
// if exist_mode then
34976: LD_VAR 0 2
34980: IFFALSE 35026
// begin unit := CreateCharacter ( prefix & ident ) ;
34982: LD_ADDR_VAR 0 5
34986: PUSH
34987: LD_VAR 0 3
34991: PUSH
34992: LD_VAR 0 1
34996: STR
34997: PPUSH
34998: CALL_OW 34
35002: ST_TO_ADDR
// if unit then
35003: LD_VAR 0 5
35007: IFFALSE 35024
// DeleteCharacters ( prefix & ident ) ;
35009: LD_VAR 0 3
35013: PUSH
35014: LD_VAR 0 1
35018: STR
35019: PPUSH
35020: CALL_OW 40
// end else
35024: GO 35041
// unit := NewCharacter ( ident ) ;
35026: LD_ADDR_VAR 0 5
35030: PUSH
35031: LD_VAR 0 1
35035: PPUSH
35036: CALL_OW 25
35040: ST_TO_ADDR
// result := unit ;
35041: LD_ADDR_VAR 0 4
35045: PUSH
35046: LD_VAR 0 5
35050: ST_TO_ADDR
// end ;
35051: LD_VAR 0 4
35055: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
35056: LD_INT 0
35058: PPUSH
35059: PPUSH
// if exist_mode then
35060: LD_VAR 0 2
35064: IFFALSE 35089
// unit := CreateCharacter ( prefix & ident ) else
35066: LD_ADDR_VAR 0 5
35070: PUSH
35071: LD_VAR 0 3
35075: PUSH
35076: LD_VAR 0 1
35080: STR
35081: PPUSH
35082: CALL_OW 34
35086: ST_TO_ADDR
35087: GO 35104
// unit := NewCharacter ( ident ) ;
35089: LD_ADDR_VAR 0 5
35093: PUSH
35094: LD_VAR 0 1
35098: PPUSH
35099: CALL_OW 25
35103: ST_TO_ADDR
// result := unit ;
35104: LD_ADDR_VAR 0 4
35108: PUSH
35109: LD_VAR 0 5
35113: ST_TO_ADDR
// end ;
35114: LD_VAR 0 4
35118: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
35119: LD_INT 0
35121: PPUSH
35122: PPUSH
// if not side or not nation then
35123: LD_VAR 0 1
35127: NOT
35128: IFTRUE 35137
35130: PUSH
35131: LD_VAR 0 2
35135: NOT
35136: OR
35137: IFFALSE 35141
// exit ;
35139: GO 35935
// case nation of nation_american :
35141: LD_VAR 0 2
35145: PUSH
35146: LD_INT 1
35148: DOUBLE
35149: EQUAL
35150: IFTRUE 35154
35152: GO 35376
35154: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
35155: LD_ADDR_VAR 0 4
35159: PUSH
35160: LD_INT 35
35162: PUSH
35163: LD_INT 45
35165: PUSH
35166: LD_INT 46
35168: PUSH
35169: LD_INT 47
35171: PUSH
35172: LD_INT 82
35174: PUSH
35175: LD_INT 83
35177: PUSH
35178: LD_INT 84
35180: PUSH
35181: LD_INT 85
35183: PUSH
35184: LD_INT 86
35186: PUSH
35187: LD_INT 1
35189: PUSH
35190: LD_INT 2
35192: PUSH
35193: LD_INT 6
35195: PUSH
35196: LD_INT 15
35198: PUSH
35199: LD_INT 16
35201: PUSH
35202: LD_INT 7
35204: PUSH
35205: LD_INT 12
35207: PUSH
35208: LD_INT 13
35210: PUSH
35211: LD_INT 10
35213: PUSH
35214: LD_INT 14
35216: PUSH
35217: LD_INT 20
35219: PUSH
35220: LD_INT 21
35222: PUSH
35223: LD_INT 22
35225: PUSH
35226: LD_INT 25
35228: PUSH
35229: LD_INT 32
35231: PUSH
35232: LD_INT 27
35234: PUSH
35235: LD_INT 36
35237: PUSH
35238: LD_INT 69
35240: PUSH
35241: LD_INT 39
35243: PUSH
35244: LD_INT 34
35246: PUSH
35247: LD_INT 40
35249: PUSH
35250: LD_INT 48
35252: PUSH
35253: LD_INT 49
35255: PUSH
35256: LD_INT 50
35258: PUSH
35259: LD_INT 51
35261: PUSH
35262: LD_INT 52
35264: PUSH
35265: LD_INT 53
35267: PUSH
35268: LD_INT 54
35270: PUSH
35271: LD_INT 55
35273: PUSH
35274: LD_INT 56
35276: PUSH
35277: LD_INT 57
35279: PUSH
35280: LD_INT 58
35282: PUSH
35283: LD_INT 59
35285: PUSH
35286: LD_INT 60
35288: PUSH
35289: LD_INT 61
35291: PUSH
35292: LD_INT 62
35294: PUSH
35295: LD_INT 80
35297: PUSH
35298: LD_INT 82
35300: PUSH
35301: LD_INT 83
35303: PUSH
35304: LD_INT 84
35306: PUSH
35307: LD_INT 85
35309: PUSH
35310: LD_INT 86
35312: PUSH
35313: LD_INT 90
35315: PUSH
35316: LD_INT 93
35318: PUSH
35319: EMPTY
35320: LIST
35321: LIST
35322: LIST
35323: LIST
35324: LIST
35325: LIST
35326: LIST
35327: LIST
35328: LIST
35329: LIST
35330: LIST
35331: LIST
35332: LIST
35333: LIST
35334: LIST
35335: LIST
35336: LIST
35337: LIST
35338: LIST
35339: LIST
35340: LIST
35341: LIST
35342: LIST
35343: LIST
35344: LIST
35345: LIST
35346: LIST
35347: LIST
35348: LIST
35349: LIST
35350: LIST
35351: LIST
35352: LIST
35353: LIST
35354: LIST
35355: LIST
35356: LIST
35357: LIST
35358: LIST
35359: LIST
35360: LIST
35361: LIST
35362: LIST
35363: LIST
35364: LIST
35365: LIST
35366: LIST
35367: LIST
35368: LIST
35369: LIST
35370: LIST
35371: LIST
35372: LIST
35373: ST_TO_ADDR
35374: GO 35857
35376: LD_INT 2
35378: DOUBLE
35379: EQUAL
35380: IFTRUE 35384
35382: GO 35618
35384: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
35385: LD_ADDR_VAR 0 4
35389: PUSH
35390: LD_INT 35
35392: PUSH
35393: LD_INT 45
35395: PUSH
35396: LD_INT 46
35398: PUSH
35399: LD_INT 47
35401: PUSH
35402: LD_INT 82
35404: PUSH
35405: LD_INT 83
35407: PUSH
35408: LD_INT 84
35410: PUSH
35411: LD_INT 85
35413: PUSH
35414: LD_INT 87
35416: PUSH
35417: LD_INT 70
35419: PUSH
35420: LD_INT 1
35422: PUSH
35423: LD_INT 11
35425: PUSH
35426: LD_INT 3
35428: PUSH
35429: LD_INT 4
35431: PUSH
35432: LD_INT 5
35434: PUSH
35435: LD_INT 6
35437: PUSH
35438: LD_INT 15
35440: PUSH
35441: LD_INT 18
35443: PUSH
35444: LD_INT 7
35446: PUSH
35447: LD_INT 17
35449: PUSH
35450: LD_INT 8
35452: PUSH
35453: LD_INT 20
35455: PUSH
35456: LD_INT 21
35458: PUSH
35459: LD_INT 22
35461: PUSH
35462: LD_INT 72
35464: PUSH
35465: LD_INT 26
35467: PUSH
35468: LD_INT 69
35470: PUSH
35471: LD_INT 39
35473: PUSH
35474: LD_INT 40
35476: PUSH
35477: LD_INT 41
35479: PUSH
35480: LD_INT 42
35482: PUSH
35483: LD_INT 43
35485: PUSH
35486: LD_INT 48
35488: PUSH
35489: LD_INT 49
35491: PUSH
35492: LD_INT 50
35494: PUSH
35495: LD_INT 51
35497: PUSH
35498: LD_INT 52
35500: PUSH
35501: LD_INT 53
35503: PUSH
35504: LD_INT 54
35506: PUSH
35507: LD_INT 55
35509: PUSH
35510: LD_INT 56
35512: PUSH
35513: LD_INT 60
35515: PUSH
35516: LD_INT 61
35518: PUSH
35519: LD_INT 62
35521: PUSH
35522: LD_INT 66
35524: PUSH
35525: LD_INT 67
35527: PUSH
35528: LD_INT 68
35530: PUSH
35531: LD_INT 81
35533: PUSH
35534: LD_INT 82
35536: PUSH
35537: LD_INT 83
35539: PUSH
35540: LD_INT 84
35542: PUSH
35543: LD_INT 85
35545: PUSH
35546: LD_INT 87
35548: PUSH
35549: LD_INT 88
35551: PUSH
35552: LD_INT 92
35554: PUSH
35555: LD_INT 94
35557: PUSH
35558: EMPTY
35559: LIST
35560: LIST
35561: LIST
35562: LIST
35563: LIST
35564: LIST
35565: LIST
35566: LIST
35567: LIST
35568: LIST
35569: LIST
35570: LIST
35571: LIST
35572: LIST
35573: LIST
35574: LIST
35575: LIST
35576: LIST
35577: LIST
35578: LIST
35579: LIST
35580: LIST
35581: LIST
35582: LIST
35583: LIST
35584: LIST
35585: LIST
35586: LIST
35587: LIST
35588: LIST
35589: LIST
35590: LIST
35591: LIST
35592: LIST
35593: LIST
35594: LIST
35595: LIST
35596: LIST
35597: LIST
35598: LIST
35599: LIST
35600: LIST
35601: LIST
35602: LIST
35603: LIST
35604: LIST
35605: LIST
35606: LIST
35607: LIST
35608: LIST
35609: LIST
35610: LIST
35611: LIST
35612: LIST
35613: LIST
35614: LIST
35615: ST_TO_ADDR
35616: GO 35857
35618: LD_INT 3
35620: DOUBLE
35621: EQUAL
35622: IFTRUE 35626
35624: GO 35856
35626: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
35627: LD_ADDR_VAR 0 4
35631: PUSH
35632: LD_INT 46
35634: PUSH
35635: LD_INT 47
35637: PUSH
35638: LD_INT 1
35640: PUSH
35641: LD_INT 2
35643: PUSH
35644: LD_INT 82
35646: PUSH
35647: LD_INT 83
35649: PUSH
35650: LD_INT 84
35652: PUSH
35653: LD_INT 85
35655: PUSH
35656: LD_INT 86
35658: PUSH
35659: LD_INT 11
35661: PUSH
35662: LD_INT 9
35664: PUSH
35665: LD_INT 20
35667: PUSH
35668: LD_INT 19
35670: PUSH
35671: LD_INT 21
35673: PUSH
35674: LD_INT 24
35676: PUSH
35677: LD_INT 22
35679: PUSH
35680: LD_INT 25
35682: PUSH
35683: LD_INT 28
35685: PUSH
35686: LD_INT 29
35688: PUSH
35689: LD_INT 30
35691: PUSH
35692: LD_INT 31
35694: PUSH
35695: LD_INT 37
35697: PUSH
35698: LD_INT 38
35700: PUSH
35701: LD_INT 32
35703: PUSH
35704: LD_INT 27
35706: PUSH
35707: LD_INT 33
35709: PUSH
35710: LD_INT 69
35712: PUSH
35713: LD_INT 39
35715: PUSH
35716: LD_INT 34
35718: PUSH
35719: LD_INT 40
35721: PUSH
35722: LD_INT 71
35724: PUSH
35725: LD_INT 23
35727: PUSH
35728: LD_INT 44
35730: PUSH
35731: LD_INT 48
35733: PUSH
35734: LD_INT 49
35736: PUSH
35737: LD_INT 50
35739: PUSH
35740: LD_INT 51
35742: PUSH
35743: LD_INT 52
35745: PUSH
35746: LD_INT 53
35748: PUSH
35749: LD_INT 54
35751: PUSH
35752: LD_INT 55
35754: PUSH
35755: LD_INT 56
35757: PUSH
35758: LD_INT 57
35760: PUSH
35761: LD_INT 58
35763: PUSH
35764: LD_INT 59
35766: PUSH
35767: LD_INT 63
35769: PUSH
35770: LD_INT 64
35772: PUSH
35773: LD_INT 65
35775: PUSH
35776: LD_INT 82
35778: PUSH
35779: LD_INT 83
35781: PUSH
35782: LD_INT 84
35784: PUSH
35785: LD_INT 85
35787: PUSH
35788: LD_INT 86
35790: PUSH
35791: LD_INT 89
35793: PUSH
35794: LD_INT 91
35796: PUSH
35797: EMPTY
35798: LIST
35799: LIST
35800: LIST
35801: LIST
35802: LIST
35803: LIST
35804: LIST
35805: LIST
35806: LIST
35807: LIST
35808: LIST
35809: LIST
35810: LIST
35811: LIST
35812: LIST
35813: LIST
35814: LIST
35815: LIST
35816: LIST
35817: LIST
35818: LIST
35819: LIST
35820: LIST
35821: LIST
35822: LIST
35823: LIST
35824: LIST
35825: LIST
35826: LIST
35827: LIST
35828: LIST
35829: LIST
35830: LIST
35831: LIST
35832: LIST
35833: LIST
35834: LIST
35835: LIST
35836: LIST
35837: LIST
35838: LIST
35839: LIST
35840: LIST
35841: LIST
35842: LIST
35843: LIST
35844: LIST
35845: LIST
35846: LIST
35847: LIST
35848: LIST
35849: LIST
35850: LIST
35851: LIST
35852: LIST
35853: ST_TO_ADDR
35854: GO 35857
35856: POP
// if state > - 1 and state < 3 then
35857: LD_VAR 0 3
35861: PUSH
35862: LD_INT 1
35864: NEG
35865: GREATER
35866: IFFALSE 35878
35868: PUSH
35869: LD_VAR 0 3
35873: PUSH
35874: LD_INT 3
35876: LESS
35877: AND
35878: IFFALSE 35935
// for i in result do
35880: LD_ADDR_VAR 0 5
35884: PUSH
35885: LD_VAR 0 4
35889: PUSH
35890: FOR_IN
35891: IFFALSE 35933
// if GetTech ( i , side ) <> state then
35893: LD_VAR 0 5
35897: PPUSH
35898: LD_VAR 0 1
35902: PPUSH
35903: CALL_OW 321
35907: PUSH
35908: LD_VAR 0 3
35912: NONEQUAL
35913: IFFALSE 35931
// result := result diff i ;
35915: LD_ADDR_VAR 0 4
35919: PUSH
35920: LD_VAR 0 4
35924: PUSH
35925: LD_VAR 0 5
35929: DIFF
35930: ST_TO_ADDR
35931: GO 35890
35933: POP
35934: POP
// end ;
35935: LD_VAR 0 4
35939: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
35940: LD_INT 0
35942: PPUSH
35943: PPUSH
35944: PPUSH
// result := true ;
35945: LD_ADDR_VAR 0 3
35949: PUSH
35950: LD_INT 1
35952: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
35953: LD_ADDR_VAR 0 5
35957: PUSH
35958: LD_VAR 0 2
35962: PPUSH
35963: CALL_OW 480
35967: ST_TO_ADDR
// if not tmp then
35968: LD_VAR 0 5
35972: NOT
35973: IFFALSE 35977
// exit ;
35975: GO 36026
// for i in tmp do
35977: LD_ADDR_VAR 0 4
35981: PUSH
35982: LD_VAR 0 5
35986: PUSH
35987: FOR_IN
35988: IFFALSE 36024
// if GetTech ( i , side ) <> state_researched then
35990: LD_VAR 0 4
35994: PPUSH
35995: LD_VAR 0 1
35999: PPUSH
36000: CALL_OW 321
36004: PUSH
36005: LD_INT 2
36007: NONEQUAL
36008: IFFALSE 36022
// begin result := false ;
36010: LD_ADDR_VAR 0 3
36014: PUSH
36015: LD_INT 0
36017: ST_TO_ADDR
// exit ;
36018: POP
36019: POP
36020: GO 36026
// end ;
36022: GO 35987
36024: POP
36025: POP
// end ;
36026: LD_VAR 0 3
36030: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
36031: LD_INT 0
36033: PPUSH
36034: PPUSH
36035: PPUSH
36036: PPUSH
36037: PPUSH
36038: PPUSH
36039: PPUSH
36040: PPUSH
36041: PPUSH
36042: PPUSH
36043: PPUSH
36044: PPUSH
36045: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
36046: LD_VAR 0 1
36050: NOT
36051: IFTRUE 36068
36053: PUSH
36054: LD_VAR 0 1
36058: PPUSH
36059: CALL_OW 257
36063: PUSH
36064: LD_INT 9
36066: NONEQUAL
36067: OR
36068: IFFALSE 36072
// exit ;
36070: GO 36651
// side := GetSide ( unit ) ;
36072: LD_ADDR_VAR 0 9
36076: PUSH
36077: LD_VAR 0 1
36081: PPUSH
36082: CALL_OW 255
36086: ST_TO_ADDR
// tech_space := tech_spacanom ;
36087: LD_ADDR_VAR 0 12
36091: PUSH
36092: LD_INT 29
36094: ST_TO_ADDR
// tech_time := tech_taurad ;
36095: LD_ADDR_VAR 0 13
36099: PUSH
36100: LD_INT 28
36102: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
36103: LD_ADDR_VAR 0 11
36107: PUSH
36108: LD_VAR 0 1
36112: PPUSH
36113: CALL_OW 310
36117: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
36118: LD_VAR 0 11
36122: PPUSH
36123: CALL_OW 247
36127: PUSH
36128: LD_INT 2
36130: EQUAL
36131: IFFALSE 36135
// exit ;
36133: GO 36651
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
36135: LD_ADDR_VAR 0 8
36139: PUSH
36140: LD_INT 81
36142: PUSH
36143: LD_VAR 0 9
36147: PUSH
36148: EMPTY
36149: LIST
36150: LIST
36151: PUSH
36152: LD_INT 3
36154: PUSH
36155: LD_INT 21
36157: PUSH
36158: LD_INT 3
36160: PUSH
36161: EMPTY
36162: LIST
36163: LIST
36164: PUSH
36165: EMPTY
36166: LIST
36167: LIST
36168: PUSH
36169: EMPTY
36170: LIST
36171: LIST
36172: PPUSH
36173: CALL_OW 69
36177: ST_TO_ADDR
// if not tmp then
36178: LD_VAR 0 8
36182: NOT
36183: IFFALSE 36187
// exit ;
36185: GO 36651
// if in_unit then
36187: LD_VAR 0 11
36191: IFFALSE 36215
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
36193: LD_ADDR_VAR 0 10
36197: PUSH
36198: LD_VAR 0 8
36202: PPUSH
36203: LD_VAR 0 11
36207: PPUSH
36208: CALL_OW 74
36212: ST_TO_ADDR
36213: GO 36235
// enemy := NearestUnitToUnit ( tmp , unit ) ;
36215: LD_ADDR_VAR 0 10
36219: PUSH
36220: LD_VAR 0 8
36224: PPUSH
36225: LD_VAR 0 1
36229: PPUSH
36230: CALL_OW 74
36234: ST_TO_ADDR
// if not enemy then
36235: LD_VAR 0 10
36239: NOT
36240: IFFALSE 36244
// exit ;
36242: GO 36651
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
36244: LD_VAR 0 11
36248: IFFALSE 36270
36250: PUSH
36251: LD_VAR 0 11
36255: PPUSH
36256: LD_VAR 0 10
36260: PPUSH
36261: CALL_OW 296
36265: PUSH
36266: LD_INT 13
36268: GREATER
36269: AND
36270: IFTRUE 36292
36272: PUSH
36273: LD_VAR 0 1
36277: PPUSH
36278: LD_VAR 0 10
36282: PPUSH
36283: CALL_OW 296
36287: PUSH
36288: LD_INT 12
36290: GREATER
36291: OR
36292: IFFALSE 36296
// exit ;
36294: GO 36651
// missile := [ 1 ] ;
36296: LD_ADDR_VAR 0 14
36300: PUSH
36301: LD_INT 1
36303: PUSH
36304: EMPTY
36305: LIST
36306: ST_TO_ADDR
// if Researched ( side , tech_space ) then
36307: LD_VAR 0 9
36311: PPUSH
36312: LD_VAR 0 12
36316: PPUSH
36317: CALL_OW 325
36321: IFFALSE 36350
// missile := Replace ( missile , missile + 1 , 2 ) ;
36323: LD_ADDR_VAR 0 14
36327: PUSH
36328: LD_VAR 0 14
36332: PPUSH
36333: LD_VAR 0 14
36337: PUSH
36338: LD_INT 1
36340: PLUS
36341: PPUSH
36342: LD_INT 2
36344: PPUSH
36345: CALL_OW 1
36349: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
36350: LD_VAR 0 9
36354: PPUSH
36355: LD_VAR 0 13
36359: PPUSH
36360: CALL_OW 325
36364: IFFALSE 36388
36366: PUSH
36367: LD_VAR 0 10
36371: PPUSH
36372: CALL_OW 255
36376: PPUSH
36377: LD_VAR 0 13
36381: PPUSH
36382: CALL_OW 325
36386: NOT
36387: AND
36388: IFFALSE 36417
// missile := Replace ( missile , missile + 1 , 3 ) ;
36390: LD_ADDR_VAR 0 14
36394: PUSH
36395: LD_VAR 0 14
36399: PPUSH
36400: LD_VAR 0 14
36404: PUSH
36405: LD_INT 1
36407: PLUS
36408: PPUSH
36409: LD_INT 3
36411: PPUSH
36412: CALL_OW 1
36416: ST_TO_ADDR
// if missile < 2 then
36417: LD_VAR 0 14
36421: PUSH
36422: LD_INT 2
36424: LESS
36425: IFFALSE 36429
// exit ;
36427: GO 36651
// x := GetX ( enemy ) ;
36429: LD_ADDR_VAR 0 4
36433: PUSH
36434: LD_VAR 0 10
36438: PPUSH
36439: CALL_OW 250
36443: ST_TO_ADDR
// y := GetY ( enemy ) ;
36444: LD_ADDR_VAR 0 5
36448: PUSH
36449: LD_VAR 0 10
36453: PPUSH
36454: CALL_OW 251
36458: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
36459: LD_ADDR_VAR 0 6
36463: PUSH
36464: LD_VAR 0 4
36468: PUSH
36469: LD_INT 1
36471: NEG
36472: PPUSH
36473: LD_INT 1
36475: PPUSH
36476: CALL_OW 12
36480: PLUS
36481: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
36482: LD_ADDR_VAR 0 7
36486: PUSH
36487: LD_VAR 0 5
36491: PUSH
36492: LD_INT 1
36494: NEG
36495: PPUSH
36496: LD_INT 1
36498: PPUSH
36499: CALL_OW 12
36503: PLUS
36504: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
36505: LD_VAR 0 6
36509: PPUSH
36510: LD_VAR 0 7
36514: PPUSH
36515: CALL_OW 488
36519: NOT
36520: IFFALSE 36542
// begin _x := x ;
36522: LD_ADDR_VAR 0 6
36526: PUSH
36527: LD_VAR 0 4
36531: ST_TO_ADDR
// _y := y ;
36532: LD_ADDR_VAR 0 7
36536: PUSH
36537: LD_VAR 0 5
36541: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
36542: LD_ADDR_VAR 0 3
36546: PUSH
36547: LD_INT 1
36549: PPUSH
36550: LD_VAR 0 14
36554: PPUSH
36555: CALL_OW 12
36559: ST_TO_ADDR
// case i of 1 :
36560: LD_VAR 0 3
36564: PUSH
36565: LD_INT 1
36567: DOUBLE
36568: EQUAL
36569: IFTRUE 36573
36571: GO 36590
36573: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
36574: LD_VAR 0 1
36578: PPUSH
36579: LD_VAR 0 10
36583: PPUSH
36584: CALL_OW 115
36588: GO 36651
36590: LD_INT 2
36592: DOUBLE
36593: EQUAL
36594: IFTRUE 36598
36596: GO 36620
36598: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
36599: LD_VAR 0 1
36603: PPUSH
36604: LD_VAR 0 6
36608: PPUSH
36609: LD_VAR 0 7
36613: PPUSH
36614: CALL_OW 153
36618: GO 36651
36620: LD_INT 3
36622: DOUBLE
36623: EQUAL
36624: IFTRUE 36628
36626: GO 36650
36628: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
36629: LD_VAR 0 1
36633: PPUSH
36634: LD_VAR 0 6
36638: PPUSH
36639: LD_VAR 0 7
36643: PPUSH
36644: CALL_OW 154
36648: GO 36651
36650: POP
// end ;
36651: LD_VAR 0 2
36655: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
36656: LD_INT 0
36658: PPUSH
36659: PPUSH
36660: PPUSH
36661: PPUSH
36662: PPUSH
36663: PPUSH
// if not unit or not building then
36664: LD_VAR 0 1
36668: NOT
36669: IFTRUE 36678
36671: PUSH
36672: LD_VAR 0 2
36676: NOT
36677: OR
36678: IFFALSE 36682
// exit ;
36680: GO 36840
// x := GetX ( building ) ;
36682: LD_ADDR_VAR 0 5
36686: PUSH
36687: LD_VAR 0 2
36691: PPUSH
36692: CALL_OW 250
36696: ST_TO_ADDR
// y := GetY ( building ) ;
36697: LD_ADDR_VAR 0 6
36701: PUSH
36702: LD_VAR 0 2
36706: PPUSH
36707: CALL_OW 251
36711: ST_TO_ADDR
// for i := 0 to 5 do
36712: LD_ADDR_VAR 0 4
36716: PUSH
36717: DOUBLE
36718: LD_INT 0
36720: DEC
36721: ST_TO_ADDR
36722: LD_INT 5
36724: PUSH
36725: FOR_TO
36726: IFFALSE 36838
// begin _x := ShiftX ( x , i , 3 ) ;
36728: LD_ADDR_VAR 0 7
36732: PUSH
36733: LD_VAR 0 5
36737: PPUSH
36738: LD_VAR 0 4
36742: PPUSH
36743: LD_INT 3
36745: PPUSH
36746: CALL_OW 272
36750: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
36751: LD_ADDR_VAR 0 8
36755: PUSH
36756: LD_VAR 0 6
36760: PPUSH
36761: LD_VAR 0 4
36765: PPUSH
36766: LD_INT 3
36768: PPUSH
36769: CALL_OW 273
36773: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
36774: LD_VAR 0 7
36778: PPUSH
36779: LD_VAR 0 8
36783: PPUSH
36784: CALL_OW 488
36788: NOT
36789: IFFALSE 36793
// continue ;
36791: GO 36725
// if HexInfo ( _x , _y ) = 0 then
36793: LD_VAR 0 7
36797: PPUSH
36798: LD_VAR 0 8
36802: PPUSH
36803: CALL_OW 428
36807: PUSH
36808: LD_INT 0
36810: EQUAL
36811: IFFALSE 36836
// begin ComMoveXY ( unit , _x , _y ) ;
36813: LD_VAR 0 1
36817: PPUSH
36818: LD_VAR 0 7
36822: PPUSH
36823: LD_VAR 0 8
36827: PPUSH
36828: CALL_OW 111
// exit ;
36832: POP
36833: POP
36834: GO 36840
// end ; end ;
36836: GO 36725
36838: POP
36839: POP
// end ;
36840: LD_VAR 0 3
36844: RET
// export function ScanBase ( side , base_area ) ; begin
36845: LD_INT 0
36847: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
36848: LD_ADDR_VAR 0 3
36852: PUSH
36853: LD_VAR 0 2
36857: PPUSH
36858: LD_INT 81
36860: PUSH
36861: LD_VAR 0 1
36865: PUSH
36866: EMPTY
36867: LIST
36868: LIST
36869: PPUSH
36870: CALL_OW 70
36874: ST_TO_ADDR
// end ;
36875: LD_VAR 0 3
36879: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
36880: LD_INT 0
36882: PPUSH
36883: PPUSH
36884: PPUSH
36885: PPUSH
// result := false ;
36886: LD_ADDR_VAR 0 2
36890: PUSH
36891: LD_INT 0
36893: ST_TO_ADDR
// side := GetSide ( unit ) ;
36894: LD_ADDR_VAR 0 3
36898: PUSH
36899: LD_VAR 0 1
36903: PPUSH
36904: CALL_OW 255
36908: ST_TO_ADDR
// nat := GetNation ( unit ) ;
36909: LD_ADDR_VAR 0 4
36913: PUSH
36914: LD_VAR 0 1
36918: PPUSH
36919: CALL_OW 248
36923: ST_TO_ADDR
// case nat of 1 :
36924: LD_VAR 0 4
36928: PUSH
36929: LD_INT 1
36931: DOUBLE
36932: EQUAL
36933: IFTRUE 36937
36935: GO 36948
36937: POP
// tech := tech_lassight ; 2 :
36938: LD_ADDR_VAR 0 5
36942: PUSH
36943: LD_INT 12
36945: ST_TO_ADDR
36946: GO 36987
36948: LD_INT 2
36950: DOUBLE
36951: EQUAL
36952: IFTRUE 36956
36954: GO 36967
36956: POP
// tech := tech_mortar ; 3 :
36957: LD_ADDR_VAR 0 5
36961: PUSH
36962: LD_INT 41
36964: ST_TO_ADDR
36965: GO 36987
36967: LD_INT 3
36969: DOUBLE
36970: EQUAL
36971: IFTRUE 36975
36973: GO 36986
36975: POP
// tech := tech_bazooka ; end ;
36976: LD_ADDR_VAR 0 5
36980: PUSH
36981: LD_INT 44
36983: ST_TO_ADDR
36984: GO 36987
36986: POP
// if Researched ( side , tech ) then
36987: LD_VAR 0 3
36991: PPUSH
36992: LD_VAR 0 5
36996: PPUSH
36997: CALL_OW 325
37001: IFFALSE 37028
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
37003: LD_ADDR_VAR 0 2
37007: PUSH
37008: LD_INT 5
37010: PUSH
37011: LD_INT 8
37013: PUSH
37014: LD_INT 9
37016: PUSH
37017: EMPTY
37018: LIST
37019: LIST
37020: LIST
37021: PUSH
37022: LD_VAR 0 4
37026: ARRAY
37027: ST_TO_ADDR
// end ;
37028: LD_VAR 0 2
37032: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
37033: LD_INT 0
37035: PPUSH
37036: PPUSH
37037: PPUSH
// if not mines then
37038: LD_VAR 0 2
37042: NOT
37043: IFFALSE 37047
// exit ;
37045: GO 37191
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37047: LD_ADDR_VAR 0 5
37051: PUSH
37052: LD_INT 81
37054: PUSH
37055: LD_VAR 0 1
37059: PUSH
37060: EMPTY
37061: LIST
37062: LIST
37063: PUSH
37064: LD_INT 3
37066: PUSH
37067: LD_INT 21
37069: PUSH
37070: LD_INT 3
37072: PUSH
37073: EMPTY
37074: LIST
37075: LIST
37076: PUSH
37077: EMPTY
37078: LIST
37079: LIST
37080: PUSH
37081: EMPTY
37082: LIST
37083: LIST
37084: PPUSH
37085: CALL_OW 69
37089: ST_TO_ADDR
// for i in mines do
37090: LD_ADDR_VAR 0 4
37094: PUSH
37095: LD_VAR 0 2
37099: PUSH
37100: FOR_IN
37101: IFFALSE 37189
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
37103: LD_VAR 0 4
37107: PUSH
37108: LD_INT 1
37110: ARRAY
37111: PPUSH
37112: LD_VAR 0 4
37116: PUSH
37117: LD_INT 2
37119: ARRAY
37120: PPUSH
37121: CALL_OW 458
37125: NOT
37126: IFFALSE 37130
// continue ;
37128: GO 37100
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
37130: LD_VAR 0 4
37134: PUSH
37135: LD_INT 1
37137: ARRAY
37138: PPUSH
37139: LD_VAR 0 4
37143: PUSH
37144: LD_INT 2
37146: ARRAY
37147: PPUSH
37148: CALL_OW 428
37152: PUSH
37153: LD_VAR 0 5
37157: IN
37158: IFFALSE 37187
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
37160: LD_VAR 0 4
37164: PUSH
37165: LD_INT 1
37167: ARRAY
37168: PPUSH
37169: LD_VAR 0 4
37173: PUSH
37174: LD_INT 2
37176: ARRAY
37177: PPUSH
37178: LD_VAR 0 1
37182: PPUSH
37183: CALL_OW 456
// end ;
37187: GO 37100
37189: POP
37190: POP
// end ;
37191: LD_VAR 0 3
37195: RET
// export function Count ( array ) ; begin
37196: LD_INT 0
37198: PPUSH
// result := array + 0 ;
37199: LD_ADDR_VAR 0 2
37203: PUSH
37204: LD_VAR 0 1
37208: PUSH
37209: LD_INT 0
37211: PLUS
37212: ST_TO_ADDR
// end ;
37213: LD_VAR 0 2
37217: RET
// export function IsEmpty ( building ) ; begin
37218: LD_INT 0
37220: PPUSH
// if not building then
37221: LD_VAR 0 1
37225: NOT
37226: IFFALSE 37230
// exit ;
37228: GO 37273
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
37230: LD_ADDR_VAR 0 2
37234: PUSH
37235: LD_VAR 0 1
37239: PUSH
37240: LD_INT 22
37242: PUSH
37243: LD_VAR 0 1
37247: PPUSH
37248: CALL_OW 255
37252: PUSH
37253: EMPTY
37254: LIST
37255: LIST
37256: PUSH
37257: LD_INT 58
37259: PUSH
37260: EMPTY
37261: LIST
37262: PUSH
37263: EMPTY
37264: LIST
37265: LIST
37266: PPUSH
37267: CALL_OW 69
37271: IN
37272: ST_TO_ADDR
// end ;
37273: LD_VAR 0 2
37277: RET
// export function IsNotFull ( building ) ; var places ; begin
37278: LD_INT 0
37280: PPUSH
37281: PPUSH
// if not building then
37282: LD_VAR 0 1
37286: NOT
37287: IFFALSE 37291
// exit ;
37289: GO 37319
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
37291: LD_ADDR_VAR 0 2
37295: PUSH
37296: LD_VAR 0 1
37300: PPUSH
37301: LD_INT 3
37303: PUSH
37304: LD_INT 62
37306: PUSH
37307: EMPTY
37308: LIST
37309: PUSH
37310: EMPTY
37311: LIST
37312: LIST
37313: PPUSH
37314: CALL_OW 72
37318: ST_TO_ADDR
// end ;
37319: LD_VAR 0 2
37323: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
37324: LD_INT 0
37326: PPUSH
37327: PPUSH
37328: PPUSH
37329: PPUSH
// tmp := [ ] ;
37330: LD_ADDR_VAR 0 3
37334: PUSH
37335: EMPTY
37336: ST_TO_ADDR
// list := [ ] ;
37337: LD_ADDR_VAR 0 5
37341: PUSH
37342: EMPTY
37343: ST_TO_ADDR
// for i = 16 to 25 do
37344: LD_ADDR_VAR 0 4
37348: PUSH
37349: DOUBLE
37350: LD_INT 16
37352: DEC
37353: ST_TO_ADDR
37354: LD_INT 25
37356: PUSH
37357: FOR_TO
37358: IFFALSE 37431
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
37360: LD_ADDR_VAR 0 3
37364: PUSH
37365: LD_VAR 0 3
37369: PUSH
37370: LD_INT 22
37372: PUSH
37373: LD_VAR 0 1
37377: PPUSH
37378: CALL_OW 255
37382: PUSH
37383: EMPTY
37384: LIST
37385: LIST
37386: PUSH
37387: LD_INT 91
37389: PUSH
37390: LD_VAR 0 1
37394: PUSH
37395: LD_INT 6
37397: PUSH
37398: EMPTY
37399: LIST
37400: LIST
37401: LIST
37402: PUSH
37403: LD_INT 30
37405: PUSH
37406: LD_VAR 0 4
37410: PUSH
37411: EMPTY
37412: LIST
37413: LIST
37414: PUSH
37415: EMPTY
37416: LIST
37417: LIST
37418: LIST
37419: PUSH
37420: EMPTY
37421: LIST
37422: PPUSH
37423: CALL_OW 69
37427: ADD
37428: ST_TO_ADDR
37429: GO 37357
37431: POP
37432: POP
// for i = 1 to tmp do
37433: LD_ADDR_VAR 0 4
37437: PUSH
37438: DOUBLE
37439: LD_INT 1
37441: DEC
37442: ST_TO_ADDR
37443: LD_VAR 0 3
37447: PUSH
37448: FOR_TO
37449: IFFALSE 37537
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
37451: LD_ADDR_VAR 0 5
37455: PUSH
37456: LD_VAR 0 5
37460: PUSH
37461: LD_VAR 0 3
37465: PUSH
37466: LD_VAR 0 4
37470: ARRAY
37471: PPUSH
37472: CALL_OW 266
37476: PUSH
37477: LD_VAR 0 3
37481: PUSH
37482: LD_VAR 0 4
37486: ARRAY
37487: PPUSH
37488: CALL_OW 250
37492: PUSH
37493: LD_VAR 0 3
37497: PUSH
37498: LD_VAR 0 4
37502: ARRAY
37503: PPUSH
37504: CALL_OW 251
37508: PUSH
37509: LD_VAR 0 3
37513: PUSH
37514: LD_VAR 0 4
37518: ARRAY
37519: PPUSH
37520: CALL_OW 254
37524: PUSH
37525: EMPTY
37526: LIST
37527: LIST
37528: LIST
37529: LIST
37530: PUSH
37531: EMPTY
37532: LIST
37533: ADD
37534: ST_TO_ADDR
37535: GO 37448
37537: POP
37538: POP
// result := list ;
37539: LD_ADDR_VAR 0 2
37543: PUSH
37544: LD_VAR 0 5
37548: ST_TO_ADDR
// end ;
37549: LD_VAR 0 2
37553: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
37554: LD_INT 0
37556: PPUSH
37557: PPUSH
37558: PPUSH
37559: PPUSH
37560: PPUSH
37561: PPUSH
37562: PPUSH
// if not factory then
37563: LD_VAR 0 1
37567: NOT
37568: IFFALSE 37572
// exit ;
37570: GO 38175
// if control = control_apeman then
37572: LD_VAR 0 4
37576: PUSH
37577: LD_INT 5
37579: EQUAL
37580: IFFALSE 37689
// begin tmp := UnitsInside ( factory ) ;
37582: LD_ADDR_VAR 0 8
37586: PUSH
37587: LD_VAR 0 1
37591: PPUSH
37592: CALL_OW 313
37596: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
37597: LD_VAR 0 8
37601: PPUSH
37602: LD_INT 25
37604: PUSH
37605: LD_INT 12
37607: PUSH
37608: EMPTY
37609: LIST
37610: LIST
37611: PPUSH
37612: CALL_OW 72
37616: NOT
37617: IFFALSE 37627
// control := control_manual ;
37619: LD_ADDR_VAR 0 4
37623: PUSH
37624: LD_INT 1
37626: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
37627: LD_ADDR_VAR 0 8
37631: PUSH
37632: LD_VAR 0 1
37636: PPUSH
37637: CALL 37324 0 1
37641: ST_TO_ADDR
// if tmp then
37642: LD_VAR 0 8
37646: IFFALSE 37689
// begin for i in tmp do
37648: LD_ADDR_VAR 0 7
37652: PUSH
37653: LD_VAR 0 8
37657: PUSH
37658: FOR_IN
37659: IFFALSE 37687
// if i [ 1 ] = b_ext_radio then
37661: LD_VAR 0 7
37665: PUSH
37666: LD_INT 1
37668: ARRAY
37669: PUSH
37670: LD_INT 22
37672: EQUAL
37673: IFFALSE 37685
// begin control := control_remote ;
37675: LD_ADDR_VAR 0 4
37679: PUSH
37680: LD_INT 2
37682: ST_TO_ADDR
// break ;
37683: GO 37687
// end ;
37685: GO 37658
37687: POP
37688: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
37689: LD_VAR 0 1
37693: PPUSH
37694: LD_VAR 0 2
37698: PPUSH
37699: LD_VAR 0 3
37703: PPUSH
37704: LD_VAR 0 4
37708: PPUSH
37709: LD_VAR 0 5
37713: PPUSH
37714: CALL_OW 448
37718: IFFALSE 37753
// begin result := [ chassis , engine , control , weapon ] ;
37720: LD_ADDR_VAR 0 6
37724: PUSH
37725: LD_VAR 0 2
37729: PUSH
37730: LD_VAR 0 3
37734: PUSH
37735: LD_VAR 0 4
37739: PUSH
37740: LD_VAR 0 5
37744: PUSH
37745: EMPTY
37746: LIST
37747: LIST
37748: LIST
37749: LIST
37750: ST_TO_ADDR
// exit ;
37751: GO 38175
// end ; _chassis := AvailableChassisList ( factory ) ;
37753: LD_ADDR_VAR 0 9
37757: PUSH
37758: LD_VAR 0 1
37762: PPUSH
37763: CALL_OW 475
37767: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
37768: LD_ADDR_VAR 0 11
37772: PUSH
37773: LD_VAR 0 1
37777: PPUSH
37778: CALL_OW 476
37782: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
37783: LD_ADDR_VAR 0 12
37787: PUSH
37788: LD_VAR 0 1
37792: PPUSH
37793: CALL_OW 477
37797: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
37798: LD_ADDR_VAR 0 10
37802: PUSH
37803: LD_VAR 0 1
37807: PPUSH
37808: CALL_OW 478
37812: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
37813: LD_VAR 0 9
37817: NOT
37818: IFTRUE 37827
37820: PUSH
37821: LD_VAR 0 11
37825: NOT
37826: OR
37827: IFTRUE 37836
37829: PUSH
37830: LD_VAR 0 12
37834: NOT
37835: OR
37836: IFTRUE 37845
37838: PUSH
37839: LD_VAR 0 10
37843: NOT
37844: OR
37845: IFFALSE 37880
// begin result := [ chassis , engine , control , weapon ] ;
37847: LD_ADDR_VAR 0 6
37851: PUSH
37852: LD_VAR 0 2
37856: PUSH
37857: LD_VAR 0 3
37861: PUSH
37862: LD_VAR 0 4
37866: PUSH
37867: LD_VAR 0 5
37871: PUSH
37872: EMPTY
37873: LIST
37874: LIST
37875: LIST
37876: LIST
37877: ST_TO_ADDR
// exit ;
37878: GO 38175
// end ; if not chassis in _chassis then
37880: LD_VAR 0 2
37884: PUSH
37885: LD_VAR 0 9
37889: IN
37890: NOT
37891: IFFALSE 37917
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
37893: LD_ADDR_VAR 0 2
37897: PUSH
37898: LD_VAR 0 9
37902: PUSH
37903: LD_INT 1
37905: PPUSH
37906: LD_VAR 0 9
37910: PPUSH
37911: CALL_OW 12
37915: ARRAY
37916: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
37917: LD_VAR 0 2
37921: PPUSH
37922: LD_VAR 0 3
37926: PPUSH
37927: CALL 38180 0 2
37931: NOT
37932: IFFALSE 37993
// repeat engine := _engine [ 1 ] ;
37934: LD_ADDR_VAR 0 3
37938: PUSH
37939: LD_VAR 0 11
37943: PUSH
37944: LD_INT 1
37946: ARRAY
37947: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
37948: LD_ADDR_VAR 0 11
37952: PUSH
37953: LD_VAR 0 11
37957: PPUSH
37958: LD_INT 1
37960: PPUSH
37961: CALL_OW 3
37965: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
37966: LD_VAR 0 2
37970: PPUSH
37971: LD_VAR 0 3
37975: PPUSH
37976: CALL 38180 0 2
37980: IFTRUE 37991
37982: PUSH
37983: LD_VAR 0 11
37987: PUSH
37988: EMPTY
37989: EQUAL
37990: OR
37991: IFFALSE 37934
// if not control in _control then
37993: LD_VAR 0 4
37997: PUSH
37998: LD_VAR 0 12
38002: IN
38003: NOT
38004: IFFALSE 38030
// control := _control [ rand ( 1 , _control ) ] ;
38006: LD_ADDR_VAR 0 4
38010: PUSH
38011: LD_VAR 0 12
38015: PUSH
38016: LD_INT 1
38018: PPUSH
38019: LD_VAR 0 12
38023: PPUSH
38024: CALL_OW 12
38028: ARRAY
38029: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
38030: LD_VAR 0 2
38034: PPUSH
38035: LD_VAR 0 5
38039: PPUSH
38040: CALL 38402 0 2
38044: NOT
38045: IFFALSE 38106
// repeat weapon := _weapon [ 1 ] ;
38047: LD_ADDR_VAR 0 5
38051: PUSH
38052: LD_VAR 0 10
38056: PUSH
38057: LD_INT 1
38059: ARRAY
38060: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
38061: LD_ADDR_VAR 0 10
38065: PUSH
38066: LD_VAR 0 10
38070: PPUSH
38071: LD_INT 1
38073: PPUSH
38074: CALL_OW 3
38078: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
38079: LD_VAR 0 2
38083: PPUSH
38084: LD_VAR 0 5
38088: PPUSH
38089: CALL 38402 0 2
38093: IFTRUE 38104
38095: PUSH
38096: LD_VAR 0 10
38100: PUSH
38101: EMPTY
38102: EQUAL
38103: OR
38104: IFFALSE 38047
// result := [ ] ;
38106: LD_ADDR_VAR 0 6
38110: PUSH
38111: EMPTY
38112: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
38113: LD_VAR 0 1
38117: PPUSH
38118: LD_VAR 0 2
38122: PPUSH
38123: LD_VAR 0 3
38127: PPUSH
38128: LD_VAR 0 4
38132: PPUSH
38133: LD_VAR 0 5
38137: PPUSH
38138: CALL_OW 448
38142: IFFALSE 38175
// result := [ chassis , engine , control , weapon ] ;
38144: LD_ADDR_VAR 0 6
38148: PUSH
38149: LD_VAR 0 2
38153: PUSH
38154: LD_VAR 0 3
38158: PUSH
38159: LD_VAR 0 4
38163: PUSH
38164: LD_VAR 0 5
38168: PUSH
38169: EMPTY
38170: LIST
38171: LIST
38172: LIST
38173: LIST
38174: ST_TO_ADDR
// end ;
38175: LD_VAR 0 6
38179: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
38180: LD_INT 0
38182: PPUSH
// if not chassis or not engine then
38183: LD_VAR 0 1
38187: NOT
38188: IFTRUE 38197
38190: PUSH
38191: LD_VAR 0 2
38195: NOT
38196: OR
38197: IFFALSE 38201
// exit ;
38199: GO 38397
// case engine of engine_solar :
38201: LD_VAR 0 2
38205: PUSH
38206: LD_INT 2
38208: DOUBLE
38209: EQUAL
38210: IFTRUE 38214
38212: GO 38252
38214: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
38215: LD_ADDR_VAR 0 3
38219: PUSH
38220: LD_INT 11
38222: PUSH
38223: LD_INT 12
38225: PUSH
38226: LD_INT 13
38228: PUSH
38229: LD_INT 14
38231: PUSH
38232: LD_INT 1
38234: PUSH
38235: LD_INT 2
38237: PUSH
38238: LD_INT 3
38240: PUSH
38241: EMPTY
38242: LIST
38243: LIST
38244: LIST
38245: LIST
38246: LIST
38247: LIST
38248: LIST
38249: ST_TO_ADDR
38250: GO 38381
38252: LD_INT 1
38254: DOUBLE
38255: EQUAL
38256: IFTRUE 38260
38258: GO 38322
38260: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
38261: LD_ADDR_VAR 0 3
38265: PUSH
38266: LD_INT 11
38268: PUSH
38269: LD_INT 12
38271: PUSH
38272: LD_INT 13
38274: PUSH
38275: LD_INT 14
38277: PUSH
38278: LD_INT 1
38280: PUSH
38281: LD_INT 2
38283: PUSH
38284: LD_INT 3
38286: PUSH
38287: LD_INT 4
38289: PUSH
38290: LD_INT 5
38292: PUSH
38293: LD_INT 21
38295: PUSH
38296: LD_INT 23
38298: PUSH
38299: LD_INT 22
38301: PUSH
38302: LD_INT 24
38304: PUSH
38305: EMPTY
38306: LIST
38307: LIST
38308: LIST
38309: LIST
38310: LIST
38311: LIST
38312: LIST
38313: LIST
38314: LIST
38315: LIST
38316: LIST
38317: LIST
38318: LIST
38319: ST_TO_ADDR
38320: GO 38381
38322: LD_INT 3
38324: DOUBLE
38325: EQUAL
38326: IFTRUE 38330
38328: GO 38380
38330: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
38331: LD_ADDR_VAR 0 3
38335: PUSH
38336: LD_INT 13
38338: PUSH
38339: LD_INT 14
38341: PUSH
38342: LD_INT 2
38344: PUSH
38345: LD_INT 3
38347: PUSH
38348: LD_INT 4
38350: PUSH
38351: LD_INT 5
38353: PUSH
38354: LD_INT 21
38356: PUSH
38357: LD_INT 22
38359: PUSH
38360: LD_INT 23
38362: PUSH
38363: LD_INT 24
38365: PUSH
38366: EMPTY
38367: LIST
38368: LIST
38369: LIST
38370: LIST
38371: LIST
38372: LIST
38373: LIST
38374: LIST
38375: LIST
38376: LIST
38377: ST_TO_ADDR
38378: GO 38381
38380: POP
// result := ( chassis in result ) ;
38381: LD_ADDR_VAR 0 3
38385: PUSH
38386: LD_VAR 0 1
38390: PUSH
38391: LD_VAR 0 3
38395: IN
38396: ST_TO_ADDR
// end ;
38397: LD_VAR 0 3
38401: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
38402: LD_INT 0
38404: PPUSH
// if not chassis or not weapon then
38405: LD_VAR 0 1
38409: NOT
38410: IFTRUE 38419
38412: PUSH
38413: LD_VAR 0 2
38417: NOT
38418: OR
38419: IFFALSE 38423
// exit ;
38421: GO 39517
// case weapon of us_machine_gun :
38423: LD_VAR 0 2
38427: PUSH
38428: LD_INT 2
38430: DOUBLE
38431: EQUAL
38432: IFTRUE 38436
38434: GO 38466
38436: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
38437: LD_ADDR_VAR 0 3
38441: PUSH
38442: LD_INT 1
38444: PUSH
38445: LD_INT 2
38447: PUSH
38448: LD_INT 3
38450: PUSH
38451: LD_INT 4
38453: PUSH
38454: LD_INT 5
38456: PUSH
38457: EMPTY
38458: LIST
38459: LIST
38460: LIST
38461: LIST
38462: LIST
38463: ST_TO_ADDR
38464: GO 39501
38466: LD_INT 3
38468: DOUBLE
38469: EQUAL
38470: IFTRUE 38474
38472: GO 38504
38474: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
38475: LD_ADDR_VAR 0 3
38479: PUSH
38480: LD_INT 1
38482: PUSH
38483: LD_INT 2
38485: PUSH
38486: LD_INT 3
38488: PUSH
38489: LD_INT 4
38491: PUSH
38492: LD_INT 5
38494: PUSH
38495: EMPTY
38496: LIST
38497: LIST
38498: LIST
38499: LIST
38500: LIST
38501: ST_TO_ADDR
38502: GO 39501
38504: LD_INT 11
38506: DOUBLE
38507: EQUAL
38508: IFTRUE 38512
38510: GO 38542
38512: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
38513: LD_ADDR_VAR 0 3
38517: PUSH
38518: LD_INT 1
38520: PUSH
38521: LD_INT 2
38523: PUSH
38524: LD_INT 3
38526: PUSH
38527: LD_INT 4
38529: PUSH
38530: LD_INT 5
38532: PUSH
38533: EMPTY
38534: LIST
38535: LIST
38536: LIST
38537: LIST
38538: LIST
38539: ST_TO_ADDR
38540: GO 39501
38542: LD_INT 4
38544: DOUBLE
38545: EQUAL
38546: IFTRUE 38550
38548: GO 38576
38550: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
38551: LD_ADDR_VAR 0 3
38555: PUSH
38556: LD_INT 2
38558: PUSH
38559: LD_INT 3
38561: PUSH
38562: LD_INT 4
38564: PUSH
38565: LD_INT 5
38567: PUSH
38568: EMPTY
38569: LIST
38570: LIST
38571: LIST
38572: LIST
38573: ST_TO_ADDR
38574: GO 39501
38576: LD_INT 5
38578: DOUBLE
38579: EQUAL
38580: IFTRUE 38584
38582: GO 38610
38584: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
38585: LD_ADDR_VAR 0 3
38589: PUSH
38590: LD_INT 2
38592: PUSH
38593: LD_INT 3
38595: PUSH
38596: LD_INT 4
38598: PUSH
38599: LD_INT 5
38601: PUSH
38602: EMPTY
38603: LIST
38604: LIST
38605: LIST
38606: LIST
38607: ST_TO_ADDR
38608: GO 39501
38610: LD_INT 9
38612: DOUBLE
38613: EQUAL
38614: IFTRUE 38618
38616: GO 38644
38618: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
38619: LD_ADDR_VAR 0 3
38623: PUSH
38624: LD_INT 2
38626: PUSH
38627: LD_INT 3
38629: PUSH
38630: LD_INT 4
38632: PUSH
38633: LD_INT 5
38635: PUSH
38636: EMPTY
38637: LIST
38638: LIST
38639: LIST
38640: LIST
38641: ST_TO_ADDR
38642: GO 39501
38644: LD_INT 7
38646: DOUBLE
38647: EQUAL
38648: IFTRUE 38652
38650: GO 38678
38652: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
38653: LD_ADDR_VAR 0 3
38657: PUSH
38658: LD_INT 2
38660: PUSH
38661: LD_INT 3
38663: PUSH
38664: LD_INT 4
38666: PUSH
38667: LD_INT 5
38669: PUSH
38670: EMPTY
38671: LIST
38672: LIST
38673: LIST
38674: LIST
38675: ST_TO_ADDR
38676: GO 39501
38678: LD_INT 12
38680: DOUBLE
38681: EQUAL
38682: IFTRUE 38686
38684: GO 38712
38686: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
38687: LD_ADDR_VAR 0 3
38691: PUSH
38692: LD_INT 2
38694: PUSH
38695: LD_INT 3
38697: PUSH
38698: LD_INT 4
38700: PUSH
38701: LD_INT 5
38703: PUSH
38704: EMPTY
38705: LIST
38706: LIST
38707: LIST
38708: LIST
38709: ST_TO_ADDR
38710: GO 39501
38712: LD_INT 13
38714: DOUBLE
38715: EQUAL
38716: IFTRUE 38720
38718: GO 38746
38720: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
38721: LD_ADDR_VAR 0 3
38725: PUSH
38726: LD_INT 2
38728: PUSH
38729: LD_INT 3
38731: PUSH
38732: LD_INT 4
38734: PUSH
38735: LD_INT 5
38737: PUSH
38738: EMPTY
38739: LIST
38740: LIST
38741: LIST
38742: LIST
38743: ST_TO_ADDR
38744: GO 39501
38746: LD_INT 14
38748: DOUBLE
38749: EQUAL
38750: IFTRUE 38754
38752: GO 38772
38754: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
38755: LD_ADDR_VAR 0 3
38759: PUSH
38760: LD_INT 4
38762: PUSH
38763: LD_INT 5
38765: PUSH
38766: EMPTY
38767: LIST
38768: LIST
38769: ST_TO_ADDR
38770: GO 39501
38772: LD_INT 6
38774: DOUBLE
38775: EQUAL
38776: IFTRUE 38780
38778: GO 38798
38780: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
38781: LD_ADDR_VAR 0 3
38785: PUSH
38786: LD_INT 4
38788: PUSH
38789: LD_INT 5
38791: PUSH
38792: EMPTY
38793: LIST
38794: LIST
38795: ST_TO_ADDR
38796: GO 39501
38798: LD_INT 10
38800: DOUBLE
38801: EQUAL
38802: IFTRUE 38806
38804: GO 38824
38806: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
38807: LD_ADDR_VAR 0 3
38811: PUSH
38812: LD_INT 4
38814: PUSH
38815: LD_INT 5
38817: PUSH
38818: EMPTY
38819: LIST
38820: LIST
38821: ST_TO_ADDR
38822: GO 39501
38824: LD_INT 22
38826: DOUBLE
38827: EQUAL
38828: IFTRUE 38832
38830: GO 38858
38832: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
38833: LD_ADDR_VAR 0 3
38837: PUSH
38838: LD_INT 11
38840: PUSH
38841: LD_INT 12
38843: PUSH
38844: LD_INT 13
38846: PUSH
38847: LD_INT 14
38849: PUSH
38850: EMPTY
38851: LIST
38852: LIST
38853: LIST
38854: LIST
38855: ST_TO_ADDR
38856: GO 39501
38858: LD_INT 23
38860: DOUBLE
38861: EQUAL
38862: IFTRUE 38866
38864: GO 38892
38866: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
38867: LD_ADDR_VAR 0 3
38871: PUSH
38872: LD_INT 11
38874: PUSH
38875: LD_INT 12
38877: PUSH
38878: LD_INT 13
38880: PUSH
38881: LD_INT 14
38883: PUSH
38884: EMPTY
38885: LIST
38886: LIST
38887: LIST
38888: LIST
38889: ST_TO_ADDR
38890: GO 39501
38892: LD_INT 24
38894: DOUBLE
38895: EQUAL
38896: IFTRUE 38900
38898: GO 38926
38900: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
38901: LD_ADDR_VAR 0 3
38905: PUSH
38906: LD_INT 11
38908: PUSH
38909: LD_INT 12
38911: PUSH
38912: LD_INT 13
38914: PUSH
38915: LD_INT 14
38917: PUSH
38918: EMPTY
38919: LIST
38920: LIST
38921: LIST
38922: LIST
38923: ST_TO_ADDR
38924: GO 39501
38926: LD_INT 30
38928: DOUBLE
38929: EQUAL
38930: IFTRUE 38934
38932: GO 38960
38934: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
38935: LD_ADDR_VAR 0 3
38939: PUSH
38940: LD_INT 11
38942: PUSH
38943: LD_INT 12
38945: PUSH
38946: LD_INT 13
38948: PUSH
38949: LD_INT 14
38951: PUSH
38952: EMPTY
38953: LIST
38954: LIST
38955: LIST
38956: LIST
38957: ST_TO_ADDR
38958: GO 39501
38960: LD_INT 25
38962: DOUBLE
38963: EQUAL
38964: IFTRUE 38968
38966: GO 38986
38968: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
38969: LD_ADDR_VAR 0 3
38973: PUSH
38974: LD_INT 13
38976: PUSH
38977: LD_INT 14
38979: PUSH
38980: EMPTY
38981: LIST
38982: LIST
38983: ST_TO_ADDR
38984: GO 39501
38986: LD_INT 27
38988: DOUBLE
38989: EQUAL
38990: IFTRUE 38994
38992: GO 39012
38994: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
38995: LD_ADDR_VAR 0 3
38999: PUSH
39000: LD_INT 13
39002: PUSH
39003: LD_INT 14
39005: PUSH
39006: EMPTY
39007: LIST
39008: LIST
39009: ST_TO_ADDR
39010: GO 39501
39012: LD_INT 92
39014: DOUBLE
39015: EQUAL
39016: IFTRUE 39020
39018: GO 39046
39020: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
39021: LD_ADDR_VAR 0 3
39025: PUSH
39026: LD_INT 11
39028: PUSH
39029: LD_INT 12
39031: PUSH
39032: LD_INT 13
39034: PUSH
39035: LD_INT 14
39037: PUSH
39038: EMPTY
39039: LIST
39040: LIST
39041: LIST
39042: LIST
39043: ST_TO_ADDR
39044: GO 39501
39046: LD_INT 28
39048: DOUBLE
39049: EQUAL
39050: IFTRUE 39054
39052: GO 39072
39054: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
39055: LD_ADDR_VAR 0 3
39059: PUSH
39060: LD_INT 13
39062: PUSH
39063: LD_INT 14
39065: PUSH
39066: EMPTY
39067: LIST
39068: LIST
39069: ST_TO_ADDR
39070: GO 39501
39072: LD_INT 29
39074: DOUBLE
39075: EQUAL
39076: IFTRUE 39080
39078: GO 39098
39080: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
39081: LD_ADDR_VAR 0 3
39085: PUSH
39086: LD_INT 13
39088: PUSH
39089: LD_INT 14
39091: PUSH
39092: EMPTY
39093: LIST
39094: LIST
39095: ST_TO_ADDR
39096: GO 39501
39098: LD_INT 31
39100: DOUBLE
39101: EQUAL
39102: IFTRUE 39106
39104: GO 39124
39106: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
39107: LD_ADDR_VAR 0 3
39111: PUSH
39112: LD_INT 13
39114: PUSH
39115: LD_INT 14
39117: PUSH
39118: EMPTY
39119: LIST
39120: LIST
39121: ST_TO_ADDR
39122: GO 39501
39124: LD_INT 26
39126: DOUBLE
39127: EQUAL
39128: IFTRUE 39132
39130: GO 39150
39132: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
39133: LD_ADDR_VAR 0 3
39137: PUSH
39138: LD_INT 13
39140: PUSH
39141: LD_INT 14
39143: PUSH
39144: EMPTY
39145: LIST
39146: LIST
39147: ST_TO_ADDR
39148: GO 39501
39150: LD_INT 42
39152: DOUBLE
39153: EQUAL
39154: IFTRUE 39158
39156: GO 39184
39158: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
39159: LD_ADDR_VAR 0 3
39163: PUSH
39164: LD_INT 21
39166: PUSH
39167: LD_INT 22
39169: PUSH
39170: LD_INT 23
39172: PUSH
39173: LD_INT 24
39175: PUSH
39176: EMPTY
39177: LIST
39178: LIST
39179: LIST
39180: LIST
39181: ST_TO_ADDR
39182: GO 39501
39184: LD_INT 43
39186: DOUBLE
39187: EQUAL
39188: IFTRUE 39192
39190: GO 39218
39192: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
39193: LD_ADDR_VAR 0 3
39197: PUSH
39198: LD_INT 21
39200: PUSH
39201: LD_INT 22
39203: PUSH
39204: LD_INT 23
39206: PUSH
39207: LD_INT 24
39209: PUSH
39210: EMPTY
39211: LIST
39212: LIST
39213: LIST
39214: LIST
39215: ST_TO_ADDR
39216: GO 39501
39218: LD_INT 44
39220: DOUBLE
39221: EQUAL
39222: IFTRUE 39226
39224: GO 39252
39226: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
39227: LD_ADDR_VAR 0 3
39231: PUSH
39232: LD_INT 21
39234: PUSH
39235: LD_INT 22
39237: PUSH
39238: LD_INT 23
39240: PUSH
39241: LD_INT 24
39243: PUSH
39244: EMPTY
39245: LIST
39246: LIST
39247: LIST
39248: LIST
39249: ST_TO_ADDR
39250: GO 39501
39252: LD_INT 45
39254: DOUBLE
39255: EQUAL
39256: IFTRUE 39260
39258: GO 39286
39260: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
39261: LD_ADDR_VAR 0 3
39265: PUSH
39266: LD_INT 21
39268: PUSH
39269: LD_INT 22
39271: PUSH
39272: LD_INT 23
39274: PUSH
39275: LD_INT 24
39277: PUSH
39278: EMPTY
39279: LIST
39280: LIST
39281: LIST
39282: LIST
39283: ST_TO_ADDR
39284: GO 39501
39286: LD_INT 49
39288: DOUBLE
39289: EQUAL
39290: IFTRUE 39294
39292: GO 39320
39294: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
39295: LD_ADDR_VAR 0 3
39299: PUSH
39300: LD_INT 21
39302: PUSH
39303: LD_INT 22
39305: PUSH
39306: LD_INT 23
39308: PUSH
39309: LD_INT 24
39311: PUSH
39312: EMPTY
39313: LIST
39314: LIST
39315: LIST
39316: LIST
39317: ST_TO_ADDR
39318: GO 39501
39320: LD_INT 51
39322: DOUBLE
39323: EQUAL
39324: IFTRUE 39328
39326: GO 39354
39328: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
39329: LD_ADDR_VAR 0 3
39333: PUSH
39334: LD_INT 21
39336: PUSH
39337: LD_INT 22
39339: PUSH
39340: LD_INT 23
39342: PUSH
39343: LD_INT 24
39345: PUSH
39346: EMPTY
39347: LIST
39348: LIST
39349: LIST
39350: LIST
39351: ST_TO_ADDR
39352: GO 39501
39354: LD_INT 52
39356: DOUBLE
39357: EQUAL
39358: IFTRUE 39362
39360: GO 39388
39362: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
39363: LD_ADDR_VAR 0 3
39367: PUSH
39368: LD_INT 21
39370: PUSH
39371: LD_INT 22
39373: PUSH
39374: LD_INT 23
39376: PUSH
39377: LD_INT 24
39379: PUSH
39380: EMPTY
39381: LIST
39382: LIST
39383: LIST
39384: LIST
39385: ST_TO_ADDR
39386: GO 39501
39388: LD_INT 53
39390: DOUBLE
39391: EQUAL
39392: IFTRUE 39396
39394: GO 39414
39396: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
39397: LD_ADDR_VAR 0 3
39401: PUSH
39402: LD_INT 23
39404: PUSH
39405: LD_INT 24
39407: PUSH
39408: EMPTY
39409: LIST
39410: LIST
39411: ST_TO_ADDR
39412: GO 39501
39414: LD_INT 46
39416: DOUBLE
39417: EQUAL
39418: IFTRUE 39422
39420: GO 39440
39422: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
39423: LD_ADDR_VAR 0 3
39427: PUSH
39428: LD_INT 23
39430: PUSH
39431: LD_INT 24
39433: PUSH
39434: EMPTY
39435: LIST
39436: LIST
39437: ST_TO_ADDR
39438: GO 39501
39440: LD_INT 47
39442: DOUBLE
39443: EQUAL
39444: IFTRUE 39448
39446: GO 39466
39448: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
39449: LD_ADDR_VAR 0 3
39453: PUSH
39454: LD_INT 23
39456: PUSH
39457: LD_INT 24
39459: PUSH
39460: EMPTY
39461: LIST
39462: LIST
39463: ST_TO_ADDR
39464: GO 39501
39466: LD_INT 98
39468: DOUBLE
39469: EQUAL
39470: IFTRUE 39474
39472: GO 39500
39474: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
39475: LD_ADDR_VAR 0 3
39479: PUSH
39480: LD_INT 21
39482: PUSH
39483: LD_INT 22
39485: PUSH
39486: LD_INT 23
39488: PUSH
39489: LD_INT 24
39491: PUSH
39492: EMPTY
39493: LIST
39494: LIST
39495: LIST
39496: LIST
39497: ST_TO_ADDR
39498: GO 39501
39500: POP
// result := ( chassis in result ) ;
39501: LD_ADDR_VAR 0 3
39505: PUSH
39506: LD_VAR 0 1
39510: PUSH
39511: LD_VAR 0 3
39515: IN
39516: ST_TO_ADDR
// end ;
39517: LD_VAR 0 3
39521: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
39522: LD_INT 0
39524: PPUSH
39525: PPUSH
39526: PPUSH
39527: PPUSH
39528: PPUSH
39529: PPUSH
39530: PPUSH
// result := array ;
39531: LD_ADDR_VAR 0 5
39535: PUSH
39536: LD_VAR 0 1
39540: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
39541: LD_VAR 0 1
39545: NOT
39546: IFTRUE 39555
39548: PUSH
39549: LD_VAR 0 2
39553: NOT
39554: OR
39555: IFTRUE 39564
39557: PUSH
39558: LD_VAR 0 3
39562: NOT
39563: OR
39564: IFTRUE 39578
39566: PUSH
39567: LD_VAR 0 2
39571: PUSH
39572: LD_VAR 0 1
39576: GREATER
39577: OR
39578: IFTRUE 39592
39580: PUSH
39581: LD_VAR 0 3
39585: PUSH
39586: LD_VAR 0 1
39590: GREATER
39591: OR
39592: IFFALSE 39596
// exit ;
39594: GO 39892
// if direction then
39596: LD_VAR 0 4
39600: IFFALSE 39664
// begin d := 1 ;
39602: LD_ADDR_VAR 0 9
39606: PUSH
39607: LD_INT 1
39609: ST_TO_ADDR
// if i_from > i_to then
39610: LD_VAR 0 2
39614: PUSH
39615: LD_VAR 0 3
39619: GREATER
39620: IFFALSE 39646
// length := ( array - i_from ) + i_to else
39622: LD_ADDR_VAR 0 11
39626: PUSH
39627: LD_VAR 0 1
39631: PUSH
39632: LD_VAR 0 2
39636: MINUS
39637: PUSH
39638: LD_VAR 0 3
39642: PLUS
39643: ST_TO_ADDR
39644: GO 39662
// length := i_to - i_from ;
39646: LD_ADDR_VAR 0 11
39650: PUSH
39651: LD_VAR 0 3
39655: PUSH
39656: LD_VAR 0 2
39660: MINUS
39661: ST_TO_ADDR
// end else
39662: GO 39725
// begin d := - 1 ;
39664: LD_ADDR_VAR 0 9
39668: PUSH
39669: LD_INT 1
39671: NEG
39672: ST_TO_ADDR
// if i_from > i_to then
39673: LD_VAR 0 2
39677: PUSH
39678: LD_VAR 0 3
39682: GREATER
39683: IFFALSE 39703
// length := i_from - i_to else
39685: LD_ADDR_VAR 0 11
39689: PUSH
39690: LD_VAR 0 2
39694: PUSH
39695: LD_VAR 0 3
39699: MINUS
39700: ST_TO_ADDR
39701: GO 39725
// length := ( array - i_to ) + i_from ;
39703: LD_ADDR_VAR 0 11
39707: PUSH
39708: LD_VAR 0 1
39712: PUSH
39713: LD_VAR 0 3
39717: MINUS
39718: PUSH
39719: LD_VAR 0 2
39723: PLUS
39724: ST_TO_ADDR
// end ; if not length then
39725: LD_VAR 0 11
39729: NOT
39730: IFFALSE 39734
// exit ;
39732: GO 39892
// tmp := array ;
39734: LD_ADDR_VAR 0 10
39738: PUSH
39739: LD_VAR 0 1
39743: ST_TO_ADDR
// for i = 1 to length do
39744: LD_ADDR_VAR 0 6
39748: PUSH
39749: DOUBLE
39750: LD_INT 1
39752: DEC
39753: ST_TO_ADDR
39754: LD_VAR 0 11
39758: PUSH
39759: FOR_TO
39760: IFFALSE 39880
// begin for j = 1 to array do
39762: LD_ADDR_VAR 0 7
39766: PUSH
39767: DOUBLE
39768: LD_INT 1
39770: DEC
39771: ST_TO_ADDR
39772: LD_VAR 0 1
39776: PUSH
39777: FOR_TO
39778: IFFALSE 39866
// begin k := j + d ;
39780: LD_ADDR_VAR 0 8
39784: PUSH
39785: LD_VAR 0 7
39789: PUSH
39790: LD_VAR 0 9
39794: PLUS
39795: ST_TO_ADDR
// if k > array then
39796: LD_VAR 0 8
39800: PUSH
39801: LD_VAR 0 1
39805: GREATER
39806: IFFALSE 39816
// k := 1 ;
39808: LD_ADDR_VAR 0 8
39812: PUSH
39813: LD_INT 1
39815: ST_TO_ADDR
// if not k then
39816: LD_VAR 0 8
39820: NOT
39821: IFFALSE 39833
// k := array ;
39823: LD_ADDR_VAR 0 8
39827: PUSH
39828: LD_VAR 0 1
39832: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
39833: LD_ADDR_VAR 0 10
39837: PUSH
39838: LD_VAR 0 10
39842: PPUSH
39843: LD_VAR 0 8
39847: PPUSH
39848: LD_VAR 0 1
39852: PUSH
39853: LD_VAR 0 7
39857: ARRAY
39858: PPUSH
39859: CALL_OW 1
39863: ST_TO_ADDR
// end ;
39864: GO 39777
39866: POP
39867: POP
// array := tmp ;
39868: LD_ADDR_VAR 0 1
39872: PUSH
39873: LD_VAR 0 10
39877: ST_TO_ADDR
// end ;
39878: GO 39759
39880: POP
39881: POP
// result := array ;
39882: LD_ADDR_VAR 0 5
39886: PUSH
39887: LD_VAR 0 1
39891: ST_TO_ADDR
// end ;
39892: LD_VAR 0 5
39896: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
39897: LD_INT 0
39899: PPUSH
39900: PPUSH
// result := 0 ;
39901: LD_ADDR_VAR 0 3
39905: PUSH
39906: LD_INT 0
39908: ST_TO_ADDR
// if not array or not value in array then
39909: LD_VAR 0 1
39913: NOT
39914: IFTRUE 39929
39916: PUSH
39917: LD_VAR 0 2
39921: PUSH
39922: LD_VAR 0 1
39926: IN
39927: NOT
39928: OR
39929: IFFALSE 39933
// exit ;
39931: GO 39987
// for i = 1 to array do
39933: LD_ADDR_VAR 0 4
39937: PUSH
39938: DOUBLE
39939: LD_INT 1
39941: DEC
39942: ST_TO_ADDR
39943: LD_VAR 0 1
39947: PUSH
39948: FOR_TO
39949: IFFALSE 39985
// if value = array [ i ] then
39951: LD_VAR 0 2
39955: PUSH
39956: LD_VAR 0 1
39960: PUSH
39961: LD_VAR 0 4
39965: ARRAY
39966: EQUAL
39967: IFFALSE 39983
// begin result := i ;
39969: LD_ADDR_VAR 0 3
39973: PUSH
39974: LD_VAR 0 4
39978: ST_TO_ADDR
// exit ;
39979: POP
39980: POP
39981: GO 39987
// end ;
39983: GO 39948
39985: POP
39986: POP
// end ;
39987: LD_VAR 0 3
39991: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
39992: LD_INT 0
39994: PPUSH
// vc_chassis := chassis ;
39995: LD_ADDR_OWVAR 37
39999: PUSH
40000: LD_VAR 0 1
40004: ST_TO_ADDR
// vc_engine := engine ;
40005: LD_ADDR_OWVAR 39
40009: PUSH
40010: LD_VAR 0 2
40014: ST_TO_ADDR
// vc_control := control ;
40015: LD_ADDR_OWVAR 38
40019: PUSH
40020: LD_VAR 0 3
40024: ST_TO_ADDR
// vc_weapon := weapon ;
40025: LD_ADDR_OWVAR 40
40029: PUSH
40030: LD_VAR 0 4
40034: ST_TO_ADDR
// vc_fuel_battery := fuel ;
40035: LD_ADDR_OWVAR 41
40039: PUSH
40040: LD_VAR 0 5
40044: ST_TO_ADDR
// end ;
40045: LD_VAR 0 6
40049: RET
// export function WantPlant ( unit ) ; var task ; begin
40050: LD_INT 0
40052: PPUSH
40053: PPUSH
// result := false ;
40054: LD_ADDR_VAR 0 2
40058: PUSH
40059: LD_INT 0
40061: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
40062: LD_ADDR_VAR 0 3
40066: PUSH
40067: LD_VAR 0 1
40071: PPUSH
40072: CALL_OW 437
40076: ST_TO_ADDR
// if task then
40077: LD_VAR 0 3
40081: IFFALSE 40109
// if task [ 1 ] [ 1 ] = p then
40083: LD_VAR 0 3
40087: PUSH
40088: LD_INT 1
40090: ARRAY
40091: PUSH
40092: LD_INT 1
40094: ARRAY
40095: PUSH
40096: LD_STRING p
40098: EQUAL
40099: IFFALSE 40109
// result := true ;
40101: LD_ADDR_VAR 0 2
40105: PUSH
40106: LD_INT 1
40108: ST_TO_ADDR
// end ;
40109: LD_VAR 0 2
40113: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
40114: LD_INT 0
40116: PPUSH
40117: PPUSH
40118: PPUSH
40119: PPUSH
// if pos < 1 then
40120: LD_VAR 0 2
40124: PUSH
40125: LD_INT 1
40127: LESS
40128: IFFALSE 40132
// exit ;
40130: GO 40435
// if pos = 1 then
40132: LD_VAR 0 2
40136: PUSH
40137: LD_INT 1
40139: EQUAL
40140: IFFALSE 40173
// result := Replace ( arr , pos [ 1 ] , value ) else
40142: LD_ADDR_VAR 0 4
40146: PUSH
40147: LD_VAR 0 1
40151: PPUSH
40152: LD_VAR 0 2
40156: PUSH
40157: LD_INT 1
40159: ARRAY
40160: PPUSH
40161: LD_VAR 0 3
40165: PPUSH
40166: CALL_OW 1
40170: ST_TO_ADDR
40171: GO 40435
// begin tmp := arr ;
40173: LD_ADDR_VAR 0 6
40177: PUSH
40178: LD_VAR 0 1
40182: ST_TO_ADDR
// s_arr := [ tmp ] ;
40183: LD_ADDR_VAR 0 7
40187: PUSH
40188: LD_VAR 0 6
40192: PUSH
40193: EMPTY
40194: LIST
40195: ST_TO_ADDR
// for i = 1 to pos - 1 do
40196: LD_ADDR_VAR 0 5
40200: PUSH
40201: DOUBLE
40202: LD_INT 1
40204: DEC
40205: ST_TO_ADDR
40206: LD_VAR 0 2
40210: PUSH
40211: LD_INT 1
40213: MINUS
40214: PUSH
40215: FOR_TO
40216: IFFALSE 40261
// begin tmp := tmp [ pos [ i ] ] ;
40218: LD_ADDR_VAR 0 6
40222: PUSH
40223: LD_VAR 0 6
40227: PUSH
40228: LD_VAR 0 2
40232: PUSH
40233: LD_VAR 0 5
40237: ARRAY
40238: ARRAY
40239: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
40240: LD_ADDR_VAR 0 7
40244: PUSH
40245: LD_VAR 0 7
40249: PUSH
40250: LD_VAR 0 6
40254: PUSH
40255: EMPTY
40256: LIST
40257: ADD
40258: ST_TO_ADDR
// end ;
40259: GO 40215
40261: POP
40262: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
40263: LD_ADDR_VAR 0 6
40267: PUSH
40268: LD_VAR 0 6
40272: PPUSH
40273: LD_VAR 0 2
40277: PUSH
40278: LD_VAR 0 2
40282: ARRAY
40283: PPUSH
40284: LD_VAR 0 3
40288: PPUSH
40289: CALL_OW 1
40293: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
40294: LD_ADDR_VAR 0 7
40298: PUSH
40299: LD_VAR 0 7
40303: PPUSH
40304: LD_VAR 0 7
40308: PPUSH
40309: LD_VAR 0 6
40313: PPUSH
40314: CALL_OW 1
40318: ST_TO_ADDR
// for i = s_arr downto 2 do
40319: LD_ADDR_VAR 0 5
40323: PUSH
40324: DOUBLE
40325: LD_VAR 0 7
40329: INC
40330: ST_TO_ADDR
40331: LD_INT 2
40333: PUSH
40334: FOR_DOWNTO
40335: IFFALSE 40419
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
40337: LD_ADDR_VAR 0 6
40341: PUSH
40342: LD_VAR 0 7
40346: PUSH
40347: LD_VAR 0 5
40351: PUSH
40352: LD_INT 1
40354: MINUS
40355: ARRAY
40356: PPUSH
40357: LD_VAR 0 2
40361: PUSH
40362: LD_VAR 0 5
40366: PUSH
40367: LD_INT 1
40369: MINUS
40370: ARRAY
40371: PPUSH
40372: LD_VAR 0 7
40376: PUSH
40377: LD_VAR 0 5
40381: ARRAY
40382: PPUSH
40383: CALL_OW 1
40387: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
40388: LD_ADDR_VAR 0 7
40392: PUSH
40393: LD_VAR 0 7
40397: PPUSH
40398: LD_VAR 0 5
40402: PUSH
40403: LD_INT 1
40405: MINUS
40406: PPUSH
40407: LD_VAR 0 6
40411: PPUSH
40412: CALL_OW 1
40416: ST_TO_ADDR
// end ;
40417: GO 40334
40419: POP
40420: POP
// result := s_arr [ 1 ] ;
40421: LD_ADDR_VAR 0 4
40425: PUSH
40426: LD_VAR 0 7
40430: PUSH
40431: LD_INT 1
40433: ARRAY
40434: ST_TO_ADDR
// end ; end ;
40435: LD_VAR 0 4
40439: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
40440: LD_INT 0
40442: PPUSH
40443: PPUSH
// if not list then
40444: LD_VAR 0 1
40448: NOT
40449: IFFALSE 40453
// exit ;
40451: GO 40544
// i := list [ pos1 ] ;
40453: LD_ADDR_VAR 0 5
40457: PUSH
40458: LD_VAR 0 1
40462: PUSH
40463: LD_VAR 0 2
40467: ARRAY
40468: ST_TO_ADDR
// if not i then
40469: LD_VAR 0 5
40473: NOT
40474: IFFALSE 40478
// exit ;
40476: GO 40544
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
40478: LD_ADDR_VAR 0 1
40482: PUSH
40483: LD_VAR 0 1
40487: PPUSH
40488: LD_VAR 0 2
40492: PPUSH
40493: LD_VAR 0 1
40497: PUSH
40498: LD_VAR 0 3
40502: ARRAY
40503: PPUSH
40504: CALL_OW 1
40508: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
40509: LD_ADDR_VAR 0 1
40513: PUSH
40514: LD_VAR 0 1
40518: PPUSH
40519: LD_VAR 0 3
40523: PPUSH
40524: LD_VAR 0 5
40528: PPUSH
40529: CALL_OW 1
40533: ST_TO_ADDR
// result := list ;
40534: LD_ADDR_VAR 0 4
40538: PUSH
40539: LD_VAR 0 1
40543: ST_TO_ADDR
// end ;
40544: LD_VAR 0 4
40548: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
40549: LD_INT 0
40551: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
40552: LD_ADDR_VAR 0 5
40556: PUSH
40557: LD_VAR 0 1
40561: PPUSH
40562: CALL_OW 250
40566: PPUSH
40567: LD_VAR 0 1
40571: PPUSH
40572: CALL_OW 251
40576: PPUSH
40577: LD_VAR 0 2
40581: PPUSH
40582: LD_VAR 0 3
40586: PPUSH
40587: LD_VAR 0 4
40591: PPUSH
40592: CALL 40974 0 5
40596: ST_TO_ADDR
// end ;
40597: LD_VAR 0 5
40601: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
40602: LD_INT 0
40604: PPUSH
40605: PPUSH
40606: PPUSH
40607: PPUSH
// if not list or not unit then
40608: LD_VAR 0 2
40612: NOT
40613: IFTRUE 40622
40615: PUSH
40616: LD_VAR 0 1
40620: NOT
40621: OR
40622: IFFALSE 40626
// exit ;
40624: GO 40969
// result := [ ] ;
40626: LD_ADDR_VAR 0 5
40630: PUSH
40631: EMPTY
40632: ST_TO_ADDR
// for i in list do
40633: LD_ADDR_VAR 0 6
40637: PUSH
40638: LD_VAR 0 2
40642: PUSH
40643: FOR_IN
40644: IFFALSE 40862
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
40646: LD_ADDR_VAR 0 8
40650: PUSH
40651: LD_VAR 0 1
40655: PPUSH
40656: LD_VAR 0 6
40660: PUSH
40661: LD_INT 1
40663: ARRAY
40664: PPUSH
40665: LD_VAR 0 6
40669: PUSH
40670: LD_INT 2
40672: ARRAY
40673: PPUSH
40674: CALL_OW 297
40678: ST_TO_ADDR
// if not Count ( result ) then
40679: LD_VAR 0 5
40683: PPUSH
40684: CALL 37196 0 1
40688: NOT
40689: IFFALSE 40722
// begin result := Join ( result , [ i , tmp ] ) ;
40691: LD_ADDR_VAR 0 5
40695: PUSH
40696: LD_VAR 0 5
40700: PPUSH
40701: LD_VAR 0 6
40705: PUSH
40706: LD_VAR 0 8
40710: PUSH
40711: EMPTY
40712: LIST
40713: LIST
40714: PPUSH
40715: CALL 73172 0 2
40719: ST_TO_ADDR
// continue ;
40720: GO 40643
// end ; if result [ result ] [ 2 ] <= tmp then
40722: LD_VAR 0 5
40726: PUSH
40727: LD_VAR 0 5
40731: ARRAY
40732: PUSH
40733: LD_INT 2
40735: ARRAY
40736: PUSH
40737: LD_VAR 0 8
40741: LESSEQUAL
40742: IFFALSE 40775
// result := Join ( result , [ i , tmp ] ) else
40744: LD_ADDR_VAR 0 5
40748: PUSH
40749: LD_VAR 0 5
40753: PPUSH
40754: LD_VAR 0 6
40758: PUSH
40759: LD_VAR 0 8
40763: PUSH
40764: EMPTY
40765: LIST
40766: LIST
40767: PPUSH
40768: CALL 73172 0 2
40772: ST_TO_ADDR
40773: GO 40860
// begin for j := 1 to Count ( result ) do
40775: LD_ADDR_VAR 0 7
40779: PUSH
40780: DOUBLE
40781: LD_INT 1
40783: DEC
40784: ST_TO_ADDR
40785: LD_VAR 0 5
40789: PPUSH
40790: CALL 37196 0 1
40794: PUSH
40795: FOR_TO
40796: IFFALSE 40858
// begin if tmp < result [ j ] [ 2 ] then
40798: LD_VAR 0 8
40802: PUSH
40803: LD_VAR 0 5
40807: PUSH
40808: LD_VAR 0 7
40812: ARRAY
40813: PUSH
40814: LD_INT 2
40816: ARRAY
40817: LESS
40818: IFFALSE 40856
// begin result := Insert ( result , j , [ i , tmp ] ) ;
40820: LD_ADDR_VAR 0 5
40824: PUSH
40825: LD_VAR 0 5
40829: PPUSH
40830: LD_VAR 0 7
40834: PPUSH
40835: LD_VAR 0 6
40839: PUSH
40840: LD_VAR 0 8
40844: PUSH
40845: EMPTY
40846: LIST
40847: LIST
40848: PPUSH
40849: CALL_OW 2
40853: ST_TO_ADDR
// break ;
40854: GO 40858
// end ; end ;
40856: GO 40795
40858: POP
40859: POP
// end ; end ;
40860: GO 40643
40862: POP
40863: POP
// if result and not asc then
40864: LD_VAR 0 5
40868: IFFALSE 40877
40870: PUSH
40871: LD_VAR 0 3
40875: NOT
40876: AND
40877: IFFALSE 40894
// result := ReverseArray ( result ) ;
40879: LD_ADDR_VAR 0 5
40883: PUSH
40884: LD_VAR 0 5
40888: PPUSH
40889: CALL 68252 0 1
40893: ST_TO_ADDR
// tmp := [ ] ;
40894: LD_ADDR_VAR 0 8
40898: PUSH
40899: EMPTY
40900: ST_TO_ADDR
// if mode then
40901: LD_VAR 0 4
40905: IFFALSE 40969
// begin for i := 1 to result do
40907: LD_ADDR_VAR 0 6
40911: PUSH
40912: DOUBLE
40913: LD_INT 1
40915: DEC
40916: ST_TO_ADDR
40917: LD_VAR 0 5
40921: PUSH
40922: FOR_TO
40923: IFFALSE 40957
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
40925: LD_ADDR_VAR 0 8
40929: PUSH
40930: LD_VAR 0 8
40934: PPUSH
40935: LD_VAR 0 5
40939: PUSH
40940: LD_VAR 0 6
40944: ARRAY
40945: PUSH
40946: LD_INT 1
40948: ARRAY
40949: PPUSH
40950: CALL 73172 0 2
40954: ST_TO_ADDR
40955: GO 40922
40957: POP
40958: POP
// result := tmp ;
40959: LD_ADDR_VAR 0 5
40963: PUSH
40964: LD_VAR 0 8
40968: ST_TO_ADDR
// end ; end ;
40969: LD_VAR 0 5
40973: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
40974: LD_INT 0
40976: PPUSH
40977: PPUSH
40978: PPUSH
40979: PPUSH
// if not list then
40980: LD_VAR 0 3
40984: NOT
40985: IFFALSE 40989
// exit ;
40987: GO 41379
// result := [ ] ;
40989: LD_ADDR_VAR 0 6
40993: PUSH
40994: EMPTY
40995: ST_TO_ADDR
// for i in list do
40996: LD_ADDR_VAR 0 7
41000: PUSH
41001: LD_VAR 0 3
41005: PUSH
41006: FOR_IN
41007: IFFALSE 41209
// begin tmp := GetDistUnitXY ( i , x , y ) ;
41009: LD_ADDR_VAR 0 9
41013: PUSH
41014: LD_VAR 0 7
41018: PPUSH
41019: LD_VAR 0 1
41023: PPUSH
41024: LD_VAR 0 2
41028: PPUSH
41029: CALL_OW 297
41033: ST_TO_ADDR
// if not result then
41034: LD_VAR 0 6
41038: NOT
41039: IFFALSE 41065
// result := [ [ i , tmp ] ] else
41041: LD_ADDR_VAR 0 6
41045: PUSH
41046: LD_VAR 0 7
41050: PUSH
41051: LD_VAR 0 9
41055: PUSH
41056: EMPTY
41057: LIST
41058: LIST
41059: PUSH
41060: EMPTY
41061: LIST
41062: ST_TO_ADDR
41063: GO 41207
// begin if result [ result ] [ 2 ] <= tmp then
41065: LD_VAR 0 6
41069: PUSH
41070: LD_VAR 0 6
41074: ARRAY
41075: PUSH
41076: LD_INT 2
41078: ARRAY
41079: PUSH
41080: LD_VAR 0 9
41084: LESSEQUAL
41085: IFFALSE 41127
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
41087: LD_ADDR_VAR 0 6
41091: PUSH
41092: LD_VAR 0 6
41096: PPUSH
41097: LD_VAR 0 6
41101: PUSH
41102: LD_INT 1
41104: PLUS
41105: PPUSH
41106: LD_VAR 0 7
41110: PUSH
41111: LD_VAR 0 9
41115: PUSH
41116: EMPTY
41117: LIST
41118: LIST
41119: PPUSH
41120: CALL_OW 2
41124: ST_TO_ADDR
41125: GO 41207
// for j := 1 to result do
41127: LD_ADDR_VAR 0 8
41131: PUSH
41132: DOUBLE
41133: LD_INT 1
41135: DEC
41136: ST_TO_ADDR
41137: LD_VAR 0 6
41141: PUSH
41142: FOR_TO
41143: IFFALSE 41205
// begin if tmp < result [ j ] [ 2 ] then
41145: LD_VAR 0 9
41149: PUSH
41150: LD_VAR 0 6
41154: PUSH
41155: LD_VAR 0 8
41159: ARRAY
41160: PUSH
41161: LD_INT 2
41163: ARRAY
41164: LESS
41165: IFFALSE 41203
// begin result := Insert ( result , j , [ i , tmp ] ) ;
41167: LD_ADDR_VAR 0 6
41171: PUSH
41172: LD_VAR 0 6
41176: PPUSH
41177: LD_VAR 0 8
41181: PPUSH
41182: LD_VAR 0 7
41186: PUSH
41187: LD_VAR 0 9
41191: PUSH
41192: EMPTY
41193: LIST
41194: LIST
41195: PPUSH
41196: CALL_OW 2
41200: ST_TO_ADDR
// break ;
41201: GO 41205
// end ; end ;
41203: GO 41142
41205: POP
41206: POP
// end ; end ;
41207: GO 41006
41209: POP
41210: POP
// if result and not asc then
41211: LD_VAR 0 6
41215: IFFALSE 41224
41217: PUSH
41218: LD_VAR 0 4
41222: NOT
41223: AND
41224: IFFALSE 41299
// begin tmp := result ;
41226: LD_ADDR_VAR 0 9
41230: PUSH
41231: LD_VAR 0 6
41235: ST_TO_ADDR
// for i = tmp downto 1 do
41236: LD_ADDR_VAR 0 7
41240: PUSH
41241: DOUBLE
41242: LD_VAR 0 9
41246: INC
41247: ST_TO_ADDR
41248: LD_INT 1
41250: PUSH
41251: FOR_DOWNTO
41252: IFFALSE 41297
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
41254: LD_ADDR_VAR 0 6
41258: PUSH
41259: LD_VAR 0 6
41263: PPUSH
41264: LD_VAR 0 9
41268: PUSH
41269: LD_VAR 0 7
41273: MINUS
41274: PUSH
41275: LD_INT 1
41277: PLUS
41278: PPUSH
41279: LD_VAR 0 9
41283: PUSH
41284: LD_VAR 0 7
41288: ARRAY
41289: PPUSH
41290: CALL_OW 1
41294: ST_TO_ADDR
41295: GO 41251
41297: POP
41298: POP
// end ; tmp := [ ] ;
41299: LD_ADDR_VAR 0 9
41303: PUSH
41304: EMPTY
41305: ST_TO_ADDR
// if mode then
41306: LD_VAR 0 5
41310: IFFALSE 41379
// begin for i = 1 to result do
41312: LD_ADDR_VAR 0 7
41316: PUSH
41317: DOUBLE
41318: LD_INT 1
41320: DEC
41321: ST_TO_ADDR
41322: LD_VAR 0 6
41326: PUSH
41327: FOR_TO
41328: IFFALSE 41367
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
41330: LD_ADDR_VAR 0 9
41334: PUSH
41335: LD_VAR 0 9
41339: PPUSH
41340: LD_VAR 0 7
41344: PPUSH
41345: LD_VAR 0 6
41349: PUSH
41350: LD_VAR 0 7
41354: ARRAY
41355: PUSH
41356: LD_INT 1
41358: ARRAY
41359: PPUSH
41360: CALL_OW 1
41364: ST_TO_ADDR
41365: GO 41327
41367: POP
41368: POP
// result := tmp ;
41369: LD_ADDR_VAR 0 6
41373: PUSH
41374: LD_VAR 0 9
41378: ST_TO_ADDR
// end ; end ;
41379: LD_VAR 0 6
41383: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
41384: LD_INT 0
41386: PPUSH
41387: PPUSH
41388: PPUSH
41389: PPUSH
41390: PPUSH
41391: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
41392: LD_ADDR_VAR 0 5
41396: PUSH
41397: LD_INT 0
41399: PUSH
41400: LD_INT 0
41402: PUSH
41403: LD_INT 0
41405: PUSH
41406: EMPTY
41407: PUSH
41408: EMPTY
41409: LIST
41410: LIST
41411: LIST
41412: LIST
41413: ST_TO_ADDR
// if not x or not y then
41414: LD_VAR 0 2
41418: NOT
41419: IFTRUE 41428
41421: PUSH
41422: LD_VAR 0 3
41426: NOT
41427: OR
41428: IFFALSE 41432
// exit ;
41430: GO 43088
// if not range then
41432: LD_VAR 0 4
41436: NOT
41437: IFFALSE 41447
// range := 10 ;
41439: LD_ADDR_VAR 0 4
41443: PUSH
41444: LD_INT 10
41446: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
41447: LD_ADDR_VAR 0 8
41451: PUSH
41452: LD_INT 81
41454: PUSH
41455: LD_VAR 0 1
41459: PUSH
41460: EMPTY
41461: LIST
41462: LIST
41463: PUSH
41464: LD_INT 92
41466: PUSH
41467: LD_VAR 0 2
41471: PUSH
41472: LD_VAR 0 3
41476: PUSH
41477: LD_VAR 0 4
41481: PUSH
41482: EMPTY
41483: LIST
41484: LIST
41485: LIST
41486: LIST
41487: PUSH
41488: LD_INT 3
41490: PUSH
41491: LD_INT 21
41493: PUSH
41494: LD_INT 3
41496: PUSH
41497: EMPTY
41498: LIST
41499: LIST
41500: PUSH
41501: EMPTY
41502: LIST
41503: LIST
41504: PUSH
41505: EMPTY
41506: LIST
41507: LIST
41508: LIST
41509: PPUSH
41510: CALL_OW 69
41514: ST_TO_ADDR
// if not tmp then
41515: LD_VAR 0 8
41519: NOT
41520: IFFALSE 41524
// exit ;
41522: GO 43088
// for i in tmp do
41524: LD_ADDR_VAR 0 6
41528: PUSH
41529: LD_VAR 0 8
41533: PUSH
41534: FOR_IN
41535: IFFALSE 43063
// begin points := [ 0 , 0 , 0 ] ;
41537: LD_ADDR_VAR 0 9
41541: PUSH
41542: LD_INT 0
41544: PUSH
41545: LD_INT 0
41547: PUSH
41548: LD_INT 0
41550: PUSH
41551: EMPTY
41552: LIST
41553: LIST
41554: LIST
41555: ST_TO_ADDR
// bpoints := 1 ;
41556: LD_ADDR_VAR 0 10
41560: PUSH
41561: LD_INT 1
41563: ST_TO_ADDR
// case GetType ( i ) of unit_human :
41564: LD_VAR 0 6
41568: PPUSH
41569: CALL_OW 247
41573: PUSH
41574: LD_INT 1
41576: DOUBLE
41577: EQUAL
41578: IFTRUE 41582
41580: GO 42164
41582: POP
// begin if GetClass ( i ) = 1 then
41583: LD_VAR 0 6
41587: PPUSH
41588: CALL_OW 257
41592: PUSH
41593: LD_INT 1
41595: EQUAL
41596: IFFALSE 41617
// points := [ 10 , 5 , 3 ] ;
41598: LD_ADDR_VAR 0 9
41602: PUSH
41603: LD_INT 10
41605: PUSH
41606: LD_INT 5
41608: PUSH
41609: LD_INT 3
41611: PUSH
41612: EMPTY
41613: LIST
41614: LIST
41615: LIST
41616: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
41617: LD_VAR 0 6
41621: PPUSH
41622: CALL_OW 257
41626: PUSH
41627: LD_INT 2
41629: PUSH
41630: LD_INT 3
41632: PUSH
41633: LD_INT 4
41635: PUSH
41636: EMPTY
41637: LIST
41638: LIST
41639: LIST
41640: IN
41641: IFFALSE 41662
// points := [ 3 , 2 , 1 ] ;
41643: LD_ADDR_VAR 0 9
41647: PUSH
41648: LD_INT 3
41650: PUSH
41651: LD_INT 2
41653: PUSH
41654: LD_INT 1
41656: PUSH
41657: EMPTY
41658: LIST
41659: LIST
41660: LIST
41661: ST_TO_ADDR
// if GetClass ( i ) = 5 then
41662: LD_VAR 0 6
41666: PPUSH
41667: CALL_OW 257
41671: PUSH
41672: LD_INT 5
41674: EQUAL
41675: IFFALSE 41696
// points := [ 130 , 5 , 2 ] ;
41677: LD_ADDR_VAR 0 9
41681: PUSH
41682: LD_INT 130
41684: PUSH
41685: LD_INT 5
41687: PUSH
41688: LD_INT 2
41690: PUSH
41691: EMPTY
41692: LIST
41693: LIST
41694: LIST
41695: ST_TO_ADDR
// if GetClass ( i ) = 8 then
41696: LD_VAR 0 6
41700: PPUSH
41701: CALL_OW 257
41705: PUSH
41706: LD_INT 8
41708: EQUAL
41709: IFFALSE 41730
// points := [ 35 , 35 , 30 ] ;
41711: LD_ADDR_VAR 0 9
41715: PUSH
41716: LD_INT 35
41718: PUSH
41719: LD_INT 35
41721: PUSH
41722: LD_INT 30
41724: PUSH
41725: EMPTY
41726: LIST
41727: LIST
41728: LIST
41729: ST_TO_ADDR
// if GetClass ( i ) = 9 then
41730: LD_VAR 0 6
41734: PPUSH
41735: CALL_OW 257
41739: PUSH
41740: LD_INT 9
41742: EQUAL
41743: IFFALSE 41764
// points := [ 20 , 55 , 40 ] ;
41745: LD_ADDR_VAR 0 9
41749: PUSH
41750: LD_INT 20
41752: PUSH
41753: LD_INT 55
41755: PUSH
41756: LD_INT 40
41758: PUSH
41759: EMPTY
41760: LIST
41761: LIST
41762: LIST
41763: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
41764: LD_VAR 0 6
41768: PPUSH
41769: CALL_OW 257
41773: PUSH
41774: LD_INT 12
41776: PUSH
41777: LD_INT 16
41779: PUSH
41780: EMPTY
41781: LIST
41782: LIST
41783: IN
41784: IFFALSE 41805
// points := [ 5 , 3 , 2 ] ;
41786: LD_ADDR_VAR 0 9
41790: PUSH
41791: LD_INT 5
41793: PUSH
41794: LD_INT 3
41796: PUSH
41797: LD_INT 2
41799: PUSH
41800: EMPTY
41801: LIST
41802: LIST
41803: LIST
41804: ST_TO_ADDR
// if GetClass ( i ) = 17 then
41805: LD_VAR 0 6
41809: PPUSH
41810: CALL_OW 257
41814: PUSH
41815: LD_INT 17
41817: EQUAL
41818: IFFALSE 41839
// points := [ 100 , 50 , 75 ] ;
41820: LD_ADDR_VAR 0 9
41824: PUSH
41825: LD_INT 100
41827: PUSH
41828: LD_INT 50
41830: PUSH
41831: LD_INT 75
41833: PUSH
41834: EMPTY
41835: LIST
41836: LIST
41837: LIST
41838: ST_TO_ADDR
// if GetClass ( i ) = 15 then
41839: LD_VAR 0 6
41843: PPUSH
41844: CALL_OW 257
41848: PUSH
41849: LD_INT 15
41851: EQUAL
41852: IFFALSE 41873
// points := [ 10 , 5 , 3 ] ;
41854: LD_ADDR_VAR 0 9
41858: PUSH
41859: LD_INT 10
41861: PUSH
41862: LD_INT 5
41864: PUSH
41865: LD_INT 3
41867: PUSH
41868: EMPTY
41869: LIST
41870: LIST
41871: LIST
41872: ST_TO_ADDR
// if GetClass ( i ) = 14 then
41873: LD_VAR 0 6
41877: PPUSH
41878: CALL_OW 257
41882: PUSH
41883: LD_INT 14
41885: EQUAL
41886: IFFALSE 41907
// points := [ 10 , 0 , 0 ] ;
41888: LD_ADDR_VAR 0 9
41892: PUSH
41893: LD_INT 10
41895: PUSH
41896: LD_INT 0
41898: PUSH
41899: LD_INT 0
41901: PUSH
41902: EMPTY
41903: LIST
41904: LIST
41905: LIST
41906: ST_TO_ADDR
// if GetClass ( i ) = 11 then
41907: LD_VAR 0 6
41911: PPUSH
41912: CALL_OW 257
41916: PUSH
41917: LD_INT 11
41919: EQUAL
41920: IFFALSE 41941
// points := [ 30 , 10 , 5 ] ;
41922: LD_ADDR_VAR 0 9
41926: PUSH
41927: LD_INT 30
41929: PUSH
41930: LD_INT 10
41932: PUSH
41933: LD_INT 5
41935: PUSH
41936: EMPTY
41937: LIST
41938: LIST
41939: LIST
41940: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
41941: LD_VAR 0 1
41945: PPUSH
41946: LD_INT 5
41948: PPUSH
41949: CALL_OW 321
41953: PUSH
41954: LD_INT 2
41956: EQUAL
41957: IFFALSE 41974
// bpoints := bpoints * 1.8 ;
41959: LD_ADDR_VAR 0 10
41963: PUSH
41964: LD_VAR 0 10
41968: PUSH
41969: LD_REAL  1.80000000000000E+0000
41972: MUL
41973: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
41974: LD_VAR 0 6
41978: PPUSH
41979: CALL_OW 257
41983: PUSH
41984: LD_INT 1
41986: PUSH
41987: LD_INT 2
41989: PUSH
41990: LD_INT 3
41992: PUSH
41993: LD_INT 4
41995: PUSH
41996: EMPTY
41997: LIST
41998: LIST
41999: LIST
42000: LIST
42001: IN
42002: IFFALSE 42022
42004: PUSH
42005: LD_VAR 0 1
42009: PPUSH
42010: LD_INT 51
42012: PPUSH
42013: CALL_OW 321
42017: PUSH
42018: LD_INT 2
42020: EQUAL
42021: AND
42022: IFFALSE 42039
// bpoints := bpoints * 1.2 ;
42024: LD_ADDR_VAR 0 10
42028: PUSH
42029: LD_VAR 0 10
42033: PUSH
42034: LD_REAL  1.20000000000000E+0000
42037: MUL
42038: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
42039: LD_VAR 0 6
42043: PPUSH
42044: CALL_OW 257
42048: PUSH
42049: LD_INT 5
42051: PUSH
42052: LD_INT 7
42054: PUSH
42055: LD_INT 9
42057: PUSH
42058: EMPTY
42059: LIST
42060: LIST
42061: LIST
42062: IN
42063: IFFALSE 42083
42065: PUSH
42066: LD_VAR 0 1
42070: PPUSH
42071: LD_INT 52
42073: PPUSH
42074: CALL_OW 321
42078: PUSH
42079: LD_INT 2
42081: EQUAL
42082: AND
42083: IFFALSE 42100
// bpoints := bpoints * 1.5 ;
42085: LD_ADDR_VAR 0 10
42089: PUSH
42090: LD_VAR 0 10
42094: PUSH
42095: LD_REAL  1.50000000000000E+0000
42098: MUL
42099: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
42100: LD_VAR 0 1
42104: PPUSH
42105: LD_INT 66
42107: PPUSH
42108: CALL_OW 321
42112: PUSH
42113: LD_INT 2
42115: EQUAL
42116: IFFALSE 42133
// bpoints := bpoints * 1.1 ;
42118: LD_ADDR_VAR 0 10
42122: PUSH
42123: LD_VAR 0 10
42127: PUSH
42128: LD_REAL  1.10000000000000E+0000
42131: MUL
42132: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
42133: LD_ADDR_VAR 0 10
42137: PUSH
42138: LD_VAR 0 10
42142: PUSH
42143: LD_VAR 0 6
42147: PPUSH
42148: LD_INT 1
42150: PPUSH
42151: CALL_OW 259
42155: PUSH
42156: LD_REAL  1.15000000000000E+0000
42159: MUL
42160: MUL
42161: ST_TO_ADDR
// end ; unit_vehicle :
42162: GO 42992
42164: LD_INT 2
42166: DOUBLE
42167: EQUAL
42168: IFTRUE 42172
42170: GO 42980
42172: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
42173: LD_VAR 0 6
42177: PPUSH
42178: CALL_OW 264
42182: PUSH
42183: LD_INT 2
42185: PUSH
42186: LD_INT 42
42188: PUSH
42189: LD_INT 24
42191: PUSH
42192: EMPTY
42193: LIST
42194: LIST
42195: LIST
42196: IN
42197: IFFALSE 42218
// points := [ 25 , 5 , 3 ] ;
42199: LD_ADDR_VAR 0 9
42203: PUSH
42204: LD_INT 25
42206: PUSH
42207: LD_INT 5
42209: PUSH
42210: LD_INT 3
42212: PUSH
42213: EMPTY
42214: LIST
42215: LIST
42216: LIST
42217: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
42218: LD_VAR 0 6
42222: PPUSH
42223: CALL_OW 264
42227: PUSH
42228: LD_INT 4
42230: PUSH
42231: LD_INT 43
42233: PUSH
42234: LD_INT 25
42236: PUSH
42237: EMPTY
42238: LIST
42239: LIST
42240: LIST
42241: IN
42242: IFFALSE 42263
// points := [ 40 , 15 , 5 ] ;
42244: LD_ADDR_VAR 0 9
42248: PUSH
42249: LD_INT 40
42251: PUSH
42252: LD_INT 15
42254: PUSH
42255: LD_INT 5
42257: PUSH
42258: EMPTY
42259: LIST
42260: LIST
42261: LIST
42262: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
42263: LD_VAR 0 6
42267: PPUSH
42268: CALL_OW 264
42272: PUSH
42273: LD_INT 3
42275: PUSH
42276: LD_INT 23
42278: PUSH
42279: EMPTY
42280: LIST
42281: LIST
42282: IN
42283: IFFALSE 42304
// points := [ 7 , 25 , 8 ] ;
42285: LD_ADDR_VAR 0 9
42289: PUSH
42290: LD_INT 7
42292: PUSH
42293: LD_INT 25
42295: PUSH
42296: LD_INT 8
42298: PUSH
42299: EMPTY
42300: LIST
42301: LIST
42302: LIST
42303: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
42304: LD_VAR 0 6
42308: PPUSH
42309: CALL_OW 264
42313: PUSH
42314: LD_INT 5
42316: PUSH
42317: LD_INT 27
42319: PUSH
42320: LD_INT 44
42322: PUSH
42323: EMPTY
42324: LIST
42325: LIST
42326: LIST
42327: IN
42328: IFFALSE 42349
// points := [ 14 , 50 , 16 ] ;
42330: LD_ADDR_VAR 0 9
42334: PUSH
42335: LD_INT 14
42337: PUSH
42338: LD_INT 50
42340: PUSH
42341: LD_INT 16
42343: PUSH
42344: EMPTY
42345: LIST
42346: LIST
42347: LIST
42348: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
42349: LD_VAR 0 6
42353: PPUSH
42354: CALL_OW 264
42358: PUSH
42359: LD_INT 6
42361: PUSH
42362: LD_INT 46
42364: PUSH
42365: EMPTY
42366: LIST
42367: LIST
42368: IN
42369: IFFALSE 42390
// points := [ 32 , 120 , 70 ] ;
42371: LD_ADDR_VAR 0 9
42375: PUSH
42376: LD_INT 32
42378: PUSH
42379: LD_INT 120
42381: PUSH
42382: LD_INT 70
42384: PUSH
42385: EMPTY
42386: LIST
42387: LIST
42388: LIST
42389: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
42390: LD_VAR 0 6
42394: PPUSH
42395: CALL_OW 264
42399: PUSH
42400: LD_INT 7
42402: PUSH
42403: LD_INT 28
42405: PUSH
42406: LD_INT 45
42408: PUSH
42409: LD_INT 92
42411: PUSH
42412: EMPTY
42413: LIST
42414: LIST
42415: LIST
42416: LIST
42417: IN
42418: IFFALSE 42439
// points := [ 35 , 20 , 45 ] ;
42420: LD_ADDR_VAR 0 9
42424: PUSH
42425: LD_INT 35
42427: PUSH
42428: LD_INT 20
42430: PUSH
42431: LD_INT 45
42433: PUSH
42434: EMPTY
42435: LIST
42436: LIST
42437: LIST
42438: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
42439: LD_VAR 0 6
42443: PPUSH
42444: CALL_OW 264
42448: PUSH
42449: LD_INT 47
42451: PUSH
42452: EMPTY
42453: LIST
42454: IN
42455: IFFALSE 42476
// points := [ 67 , 45 , 75 ] ;
42457: LD_ADDR_VAR 0 9
42461: PUSH
42462: LD_INT 67
42464: PUSH
42465: LD_INT 45
42467: PUSH
42468: LD_INT 75
42470: PUSH
42471: EMPTY
42472: LIST
42473: LIST
42474: LIST
42475: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
42476: LD_VAR 0 6
42480: PPUSH
42481: CALL_OW 264
42485: PUSH
42486: LD_INT 26
42488: PUSH
42489: EMPTY
42490: LIST
42491: IN
42492: IFFALSE 42513
// points := [ 120 , 30 , 80 ] ;
42494: LD_ADDR_VAR 0 9
42498: PUSH
42499: LD_INT 120
42501: PUSH
42502: LD_INT 30
42504: PUSH
42505: LD_INT 80
42507: PUSH
42508: EMPTY
42509: LIST
42510: LIST
42511: LIST
42512: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
42513: LD_VAR 0 6
42517: PPUSH
42518: CALL_OW 264
42522: PUSH
42523: LD_INT 22
42525: PUSH
42526: EMPTY
42527: LIST
42528: IN
42529: IFFALSE 42550
// points := [ 40 , 1 , 1 ] ;
42531: LD_ADDR_VAR 0 9
42535: PUSH
42536: LD_INT 40
42538: PUSH
42539: LD_INT 1
42541: PUSH
42542: LD_INT 1
42544: PUSH
42545: EMPTY
42546: LIST
42547: LIST
42548: LIST
42549: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
42550: LD_VAR 0 6
42554: PPUSH
42555: CALL_OW 264
42559: PUSH
42560: LD_INT 29
42562: PUSH
42563: EMPTY
42564: LIST
42565: IN
42566: IFFALSE 42587
// points := [ 70 , 200 , 400 ] ;
42568: LD_ADDR_VAR 0 9
42572: PUSH
42573: LD_INT 70
42575: PUSH
42576: LD_INT 200
42578: PUSH
42579: LD_INT 400
42581: PUSH
42582: EMPTY
42583: LIST
42584: LIST
42585: LIST
42586: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
42587: LD_VAR 0 6
42591: PPUSH
42592: CALL_OW 264
42596: PUSH
42597: LD_INT 14
42599: PUSH
42600: LD_INT 53
42602: PUSH
42603: EMPTY
42604: LIST
42605: LIST
42606: IN
42607: IFFALSE 42628
// points := [ 40 , 10 , 20 ] ;
42609: LD_ADDR_VAR 0 9
42613: PUSH
42614: LD_INT 40
42616: PUSH
42617: LD_INT 10
42619: PUSH
42620: LD_INT 20
42622: PUSH
42623: EMPTY
42624: LIST
42625: LIST
42626: LIST
42627: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
42628: LD_VAR 0 6
42632: PPUSH
42633: CALL_OW 264
42637: PUSH
42638: LD_INT 9
42640: PUSH
42641: EMPTY
42642: LIST
42643: IN
42644: IFFALSE 42665
// points := [ 5 , 70 , 20 ] ;
42646: LD_ADDR_VAR 0 9
42650: PUSH
42651: LD_INT 5
42653: PUSH
42654: LD_INT 70
42656: PUSH
42657: LD_INT 20
42659: PUSH
42660: EMPTY
42661: LIST
42662: LIST
42663: LIST
42664: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
42665: LD_VAR 0 6
42669: PPUSH
42670: CALL_OW 264
42674: PUSH
42675: LD_INT 10
42677: PUSH
42678: EMPTY
42679: LIST
42680: IN
42681: IFFALSE 42702
// points := [ 35 , 110 , 70 ] ;
42683: LD_ADDR_VAR 0 9
42687: PUSH
42688: LD_INT 35
42690: PUSH
42691: LD_INT 110
42693: PUSH
42694: LD_INT 70
42696: PUSH
42697: EMPTY
42698: LIST
42699: LIST
42700: LIST
42701: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
42702: LD_VAR 0 6
42706: PPUSH
42707: CALL_OW 265
42711: PUSH
42712: LD_INT 25
42714: EQUAL
42715: IFFALSE 42736
// points := [ 80 , 65 , 100 ] ;
42717: LD_ADDR_VAR 0 9
42721: PUSH
42722: LD_INT 80
42724: PUSH
42725: LD_INT 65
42727: PUSH
42728: LD_INT 100
42730: PUSH
42731: EMPTY
42732: LIST
42733: LIST
42734: LIST
42735: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
42736: LD_VAR 0 6
42740: PPUSH
42741: CALL_OW 263
42745: PUSH
42746: LD_INT 1
42748: EQUAL
42749: IFFALSE 42784
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
42751: LD_ADDR_VAR 0 10
42755: PUSH
42756: LD_VAR 0 10
42760: PUSH
42761: LD_VAR 0 6
42765: PPUSH
42766: CALL_OW 311
42770: PPUSH
42771: LD_INT 3
42773: PPUSH
42774: CALL_OW 259
42778: PUSH
42779: LD_INT 4
42781: MUL
42782: MUL
42783: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
42784: LD_VAR 0 6
42788: PPUSH
42789: CALL_OW 263
42793: PUSH
42794: LD_INT 2
42796: EQUAL
42797: IFFALSE 42848
// begin j := IsControledBy ( i ) ;
42799: LD_ADDR_VAR 0 7
42803: PUSH
42804: LD_VAR 0 6
42808: PPUSH
42809: CALL_OW 312
42813: ST_TO_ADDR
// if j then
42814: LD_VAR 0 7
42818: IFFALSE 42848
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
42820: LD_ADDR_VAR 0 10
42824: PUSH
42825: LD_VAR 0 10
42829: PUSH
42830: LD_VAR 0 7
42834: PPUSH
42835: LD_INT 3
42837: PPUSH
42838: CALL_OW 259
42842: PUSH
42843: LD_INT 3
42845: MUL
42846: MUL
42847: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
42848: LD_VAR 0 6
42852: PPUSH
42853: CALL_OW 264
42857: PUSH
42858: LD_INT 5
42860: PUSH
42861: LD_INT 6
42863: PUSH
42864: LD_INT 46
42866: PUSH
42867: LD_INT 44
42869: PUSH
42870: LD_INT 47
42872: PUSH
42873: LD_INT 45
42875: PUSH
42876: LD_INT 28
42878: PUSH
42879: LD_INT 7
42881: PUSH
42882: LD_INT 27
42884: PUSH
42885: LD_INT 29
42887: PUSH
42888: EMPTY
42889: LIST
42890: LIST
42891: LIST
42892: LIST
42893: LIST
42894: LIST
42895: LIST
42896: LIST
42897: LIST
42898: LIST
42899: IN
42900: IFFALSE 42920
42902: PUSH
42903: LD_VAR 0 1
42907: PPUSH
42908: LD_INT 52
42910: PPUSH
42911: CALL_OW 321
42915: PUSH
42916: LD_INT 2
42918: EQUAL
42919: AND
42920: IFFALSE 42937
// bpoints := bpoints * 1.2 ;
42922: LD_ADDR_VAR 0 10
42926: PUSH
42927: LD_VAR 0 10
42931: PUSH
42932: LD_REAL  1.20000000000000E+0000
42935: MUL
42936: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
42937: LD_VAR 0 6
42941: PPUSH
42942: CALL_OW 264
42946: PUSH
42947: LD_INT 6
42949: PUSH
42950: LD_INT 46
42952: PUSH
42953: LD_INT 47
42955: PUSH
42956: EMPTY
42957: LIST
42958: LIST
42959: LIST
42960: IN
42961: IFFALSE 42978
// bpoints := bpoints * 1.2 ;
42963: LD_ADDR_VAR 0 10
42967: PUSH
42968: LD_VAR 0 10
42972: PUSH
42973: LD_REAL  1.20000000000000E+0000
42976: MUL
42977: ST_TO_ADDR
// end ; unit_building :
42978: GO 42992
42980: LD_INT 3
42982: DOUBLE
42983: EQUAL
42984: IFTRUE 42988
42986: GO 42991
42988: POP
// ; end ;
42989: GO 42992
42991: POP
// for j = 1 to 3 do
42992: LD_ADDR_VAR 0 7
42996: PUSH
42997: DOUBLE
42998: LD_INT 1
43000: DEC
43001: ST_TO_ADDR
43002: LD_INT 3
43004: PUSH
43005: FOR_TO
43006: IFFALSE 43059
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
43008: LD_ADDR_VAR 0 5
43012: PUSH
43013: LD_VAR 0 5
43017: PPUSH
43018: LD_VAR 0 7
43022: PPUSH
43023: LD_VAR 0 5
43027: PUSH
43028: LD_VAR 0 7
43032: ARRAY
43033: PUSH
43034: LD_VAR 0 9
43038: PUSH
43039: LD_VAR 0 7
43043: ARRAY
43044: PUSH
43045: LD_VAR 0 10
43049: MUL
43050: PLUS
43051: PPUSH
43052: CALL_OW 1
43056: ST_TO_ADDR
43057: GO 43005
43059: POP
43060: POP
// end ;
43061: GO 41534
43063: POP
43064: POP
// result := Replace ( result , 4 , tmp ) ;
43065: LD_ADDR_VAR 0 5
43069: PUSH
43070: LD_VAR 0 5
43074: PPUSH
43075: LD_INT 4
43077: PPUSH
43078: LD_VAR 0 8
43082: PPUSH
43083: CALL_OW 1
43087: ST_TO_ADDR
// end ;
43088: LD_VAR 0 5
43092: RET
// export function DangerAtRange ( unit , range ) ; begin
43093: LD_INT 0
43095: PPUSH
// if not unit then
43096: LD_VAR 0 1
43100: NOT
43101: IFFALSE 43105
// exit ;
43103: GO 43150
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
43105: LD_ADDR_VAR 0 3
43109: PUSH
43110: LD_VAR 0 1
43114: PPUSH
43115: CALL_OW 255
43119: PPUSH
43120: LD_VAR 0 1
43124: PPUSH
43125: CALL_OW 250
43129: PPUSH
43130: LD_VAR 0 1
43134: PPUSH
43135: CALL_OW 251
43139: PPUSH
43140: LD_VAR 0 2
43144: PPUSH
43145: CALL 41384 0 4
43149: ST_TO_ADDR
// end ;
43150: LD_VAR 0 3
43154: RET
// export function DangerInArea ( side , area ) ; begin
43155: LD_INT 0
43157: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
43158: LD_ADDR_VAR 0 3
43162: PUSH
43163: LD_VAR 0 2
43167: PPUSH
43168: LD_INT 81
43170: PUSH
43171: LD_VAR 0 1
43175: PUSH
43176: EMPTY
43177: LIST
43178: LIST
43179: PPUSH
43180: CALL_OW 70
43184: ST_TO_ADDR
// end ;
43185: LD_VAR 0 3
43189: RET
// export function IsExtension ( b ) ; begin
43190: LD_INT 0
43192: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
43193: LD_ADDR_VAR 0 2
43197: PUSH
43198: LD_VAR 0 1
43202: PUSH
43203: LD_INT 23
43205: PUSH
43206: LD_INT 20
43208: PUSH
43209: LD_INT 22
43211: PUSH
43212: LD_INT 17
43214: PUSH
43215: LD_INT 24
43217: PUSH
43218: LD_INT 21
43220: PUSH
43221: LD_INT 19
43223: PUSH
43224: LD_INT 16
43226: PUSH
43227: LD_INT 25
43229: PUSH
43230: LD_INT 18
43232: PUSH
43233: EMPTY
43234: LIST
43235: LIST
43236: LIST
43237: LIST
43238: LIST
43239: LIST
43240: LIST
43241: LIST
43242: LIST
43243: LIST
43244: IN
43245: ST_TO_ADDR
// end ;
43246: LD_VAR 0 2
43250: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
43251: LD_INT 0
43253: PPUSH
43254: PPUSH
43255: PPUSH
// result := [ ] ;
43256: LD_ADDR_VAR 0 4
43260: PUSH
43261: EMPTY
43262: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
43263: LD_ADDR_VAR 0 5
43267: PUSH
43268: LD_VAR 0 2
43272: PPUSH
43273: LD_INT 21
43275: PUSH
43276: LD_INT 3
43278: PUSH
43279: EMPTY
43280: LIST
43281: LIST
43282: PPUSH
43283: CALL_OW 70
43287: ST_TO_ADDR
// if not tmp then
43288: LD_VAR 0 5
43292: NOT
43293: IFFALSE 43297
// exit ;
43295: GO 43361
// if checkLink then
43297: LD_VAR 0 3
43301: IFFALSE 43351
// begin for i in tmp do
43303: LD_ADDR_VAR 0 6
43307: PUSH
43308: LD_VAR 0 5
43312: PUSH
43313: FOR_IN
43314: IFFALSE 43349
// if GetBase ( i ) <> base then
43316: LD_VAR 0 6
43320: PPUSH
43321: CALL_OW 274
43325: PUSH
43326: LD_VAR 0 1
43330: NONEQUAL
43331: IFFALSE 43347
// ComLinkToBase ( base , i ) ;
43333: LD_VAR 0 1
43337: PPUSH
43338: LD_VAR 0 6
43342: PPUSH
43343: CALL_OW 169
43347: GO 43313
43349: POP
43350: POP
// end ; result := tmp ;
43351: LD_ADDR_VAR 0 4
43355: PUSH
43356: LD_VAR 0 5
43360: ST_TO_ADDR
// end ;
43361: LD_VAR 0 4
43365: RET
// export function ComComplete ( units , b ) ; var i ; begin
43366: LD_INT 0
43368: PPUSH
43369: PPUSH
// if not units then
43370: LD_VAR 0 1
43374: NOT
43375: IFFALSE 43379
// exit ;
43377: GO 43469
// for i in units do
43379: LD_ADDR_VAR 0 4
43383: PUSH
43384: LD_VAR 0 1
43388: PUSH
43389: FOR_IN
43390: IFFALSE 43467
// if BuildingStatus ( b ) = bs_build then
43392: LD_VAR 0 2
43396: PPUSH
43397: CALL_OW 461
43401: PUSH
43402: LD_INT 1
43404: EQUAL
43405: IFFALSE 43465
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
43407: LD_VAR 0 4
43411: PPUSH
43412: LD_STRING h
43414: PUSH
43415: LD_VAR 0 2
43419: PPUSH
43420: CALL_OW 250
43424: PUSH
43425: LD_VAR 0 2
43429: PPUSH
43430: CALL_OW 251
43434: PUSH
43435: LD_VAR 0 2
43439: PUSH
43440: LD_INT 0
43442: PUSH
43443: LD_INT 0
43445: PUSH
43446: LD_INT 0
43448: PUSH
43449: EMPTY
43450: LIST
43451: LIST
43452: LIST
43453: LIST
43454: LIST
43455: LIST
43456: LIST
43457: PUSH
43458: EMPTY
43459: LIST
43460: PPUSH
43461: CALL_OW 446
43465: GO 43389
43467: POP
43468: POP
// end ;
43469: LD_VAR 0 3
43473: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
43474: LD_INT 0
43476: PPUSH
43477: PPUSH
43478: PPUSH
43479: PPUSH
43480: PPUSH
43481: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
43482: LD_VAR 0 1
43486: NOT
43487: IFTRUE 43504
43489: PUSH
43490: LD_VAR 0 1
43494: PPUSH
43495: CALL_OW 263
43499: PUSH
43500: LD_INT 2
43502: NONEQUAL
43503: OR
43504: IFFALSE 43508
// exit ;
43506: GO 43824
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
43508: LD_ADDR_VAR 0 6
43512: PUSH
43513: LD_INT 22
43515: PUSH
43516: LD_VAR 0 1
43520: PPUSH
43521: CALL_OW 255
43525: PUSH
43526: EMPTY
43527: LIST
43528: LIST
43529: PUSH
43530: LD_INT 2
43532: PUSH
43533: LD_INT 30
43535: PUSH
43536: LD_INT 36
43538: PUSH
43539: EMPTY
43540: LIST
43541: LIST
43542: PUSH
43543: LD_INT 34
43545: PUSH
43546: LD_INT 31
43548: PUSH
43549: EMPTY
43550: LIST
43551: LIST
43552: PUSH
43553: EMPTY
43554: LIST
43555: LIST
43556: LIST
43557: PUSH
43558: EMPTY
43559: LIST
43560: LIST
43561: PPUSH
43562: CALL_OW 69
43566: ST_TO_ADDR
// if not tmp then
43567: LD_VAR 0 6
43571: NOT
43572: IFFALSE 43576
// exit ;
43574: GO 43824
// result := [ ] ;
43576: LD_ADDR_VAR 0 2
43580: PUSH
43581: EMPTY
43582: ST_TO_ADDR
// for i in tmp do
43583: LD_ADDR_VAR 0 3
43587: PUSH
43588: LD_VAR 0 6
43592: PUSH
43593: FOR_IN
43594: IFFALSE 43665
// begin t := UnitsInside ( i ) ;
43596: LD_ADDR_VAR 0 4
43600: PUSH
43601: LD_VAR 0 3
43605: PPUSH
43606: CALL_OW 313
43610: ST_TO_ADDR
// if t then
43611: LD_VAR 0 4
43615: IFFALSE 43663
// for j in t do
43617: LD_ADDR_VAR 0 7
43621: PUSH
43622: LD_VAR 0 4
43626: PUSH
43627: FOR_IN
43628: IFFALSE 43661
// result := Replace ( result , result + 1 , j ) ;
43630: LD_ADDR_VAR 0 2
43634: PUSH
43635: LD_VAR 0 2
43639: PPUSH
43640: LD_VAR 0 2
43644: PUSH
43645: LD_INT 1
43647: PLUS
43648: PPUSH
43649: LD_VAR 0 7
43653: PPUSH
43654: CALL_OW 1
43658: ST_TO_ADDR
43659: GO 43627
43661: POP
43662: POP
// end ;
43663: GO 43593
43665: POP
43666: POP
// if not result then
43667: LD_VAR 0 2
43671: NOT
43672: IFFALSE 43676
// exit ;
43674: GO 43824
// mech := result [ 1 ] ;
43676: LD_ADDR_VAR 0 5
43680: PUSH
43681: LD_VAR 0 2
43685: PUSH
43686: LD_INT 1
43688: ARRAY
43689: ST_TO_ADDR
// if result > 1 then
43690: LD_VAR 0 2
43694: PUSH
43695: LD_INT 1
43697: GREATER
43698: IFFALSE 43810
// begin for i = 2 to result do
43700: LD_ADDR_VAR 0 3
43704: PUSH
43705: DOUBLE
43706: LD_INT 2
43708: DEC
43709: ST_TO_ADDR
43710: LD_VAR 0 2
43714: PUSH
43715: FOR_TO
43716: IFFALSE 43808
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
43718: LD_ADDR_VAR 0 4
43722: PUSH
43723: LD_VAR 0 2
43727: PUSH
43728: LD_VAR 0 3
43732: ARRAY
43733: PPUSH
43734: LD_INT 3
43736: PPUSH
43737: CALL_OW 259
43741: PUSH
43742: LD_VAR 0 2
43746: PUSH
43747: LD_VAR 0 3
43751: ARRAY
43752: PPUSH
43753: CALL_OW 432
43757: MINUS
43758: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
43759: LD_VAR 0 4
43763: PUSH
43764: LD_VAR 0 5
43768: PPUSH
43769: LD_INT 3
43771: PPUSH
43772: CALL_OW 259
43776: PUSH
43777: LD_VAR 0 5
43781: PPUSH
43782: CALL_OW 432
43786: MINUS
43787: GREATEREQUAL
43788: IFFALSE 43806
// mech := result [ i ] ;
43790: LD_ADDR_VAR 0 5
43794: PUSH
43795: LD_VAR 0 2
43799: PUSH
43800: LD_VAR 0 3
43804: ARRAY
43805: ST_TO_ADDR
// end ;
43806: GO 43715
43808: POP
43809: POP
// end ; ComLinkTo ( vehicle , mech ) ;
43810: LD_VAR 0 1
43814: PPUSH
43815: LD_VAR 0 5
43819: PPUSH
43820: CALL_OW 135
// end ;
43824: LD_VAR 0 2
43828: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
43829: LD_INT 0
43831: PPUSH
43832: PPUSH
43833: PPUSH
43834: PPUSH
43835: PPUSH
43836: PPUSH
43837: PPUSH
43838: PPUSH
43839: PPUSH
43840: PPUSH
43841: PPUSH
43842: PPUSH
43843: PPUSH
// result := [ ] ;
43844: LD_ADDR_VAR 0 7
43848: PUSH
43849: EMPTY
43850: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
43851: LD_VAR 0 1
43855: PPUSH
43856: CALL_OW 266
43860: PUSH
43861: LD_INT 0
43863: PUSH
43864: LD_INT 1
43866: PUSH
43867: EMPTY
43868: LIST
43869: LIST
43870: IN
43871: NOT
43872: IFFALSE 43876
// exit ;
43874: GO 45516
// if name then
43876: LD_VAR 0 3
43880: IFFALSE 43896
// SetBName ( base_dep , name ) ;
43882: LD_VAR 0 1
43886: PPUSH
43887: LD_VAR 0 3
43891: PPUSH
43892: CALL_OW 500
// base := GetBase ( base_dep ) ;
43896: LD_ADDR_VAR 0 15
43900: PUSH
43901: LD_VAR 0 1
43905: PPUSH
43906: CALL_OW 274
43910: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
43911: LD_ADDR_VAR 0 16
43915: PUSH
43916: LD_VAR 0 1
43920: PPUSH
43921: CALL_OW 255
43925: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
43926: LD_ADDR_VAR 0 17
43930: PUSH
43931: LD_VAR 0 1
43935: PPUSH
43936: CALL_OW 248
43940: ST_TO_ADDR
// if sources then
43941: LD_VAR 0 5
43945: IFFALSE 43992
// for i = 1 to 3 do
43947: LD_ADDR_VAR 0 8
43951: PUSH
43952: DOUBLE
43953: LD_INT 1
43955: DEC
43956: ST_TO_ADDR
43957: LD_INT 3
43959: PUSH
43960: FOR_TO
43961: IFFALSE 43990
// AddResourceType ( base , i , sources [ i ] ) ;
43963: LD_VAR 0 15
43967: PPUSH
43968: LD_VAR 0 8
43972: PPUSH
43973: LD_VAR 0 5
43977: PUSH
43978: LD_VAR 0 8
43982: ARRAY
43983: PPUSH
43984: CALL_OW 276
43988: GO 43960
43990: POP
43991: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
43992: LD_ADDR_VAR 0 18
43996: PUSH
43997: LD_VAR 0 15
44001: PPUSH
44002: LD_VAR 0 2
44006: PPUSH
44007: LD_INT 1
44009: PPUSH
44010: CALL 43251 0 3
44014: ST_TO_ADDR
// InitHc ;
44015: CALL_OW 19
// InitUc ;
44019: CALL_OW 18
// uc_side := side ;
44023: LD_ADDR_OWVAR 20
44027: PUSH
44028: LD_VAR 0 16
44032: ST_TO_ADDR
// uc_nation := nation ;
44033: LD_ADDR_OWVAR 21
44037: PUSH
44038: LD_VAR 0 17
44042: ST_TO_ADDR
// if buildings then
44043: LD_VAR 0 18
44047: IFFALSE 45375
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
44049: LD_ADDR_VAR 0 19
44053: PUSH
44054: LD_VAR 0 18
44058: PPUSH
44059: LD_INT 2
44061: PUSH
44062: LD_INT 30
44064: PUSH
44065: LD_INT 29
44067: PUSH
44068: EMPTY
44069: LIST
44070: LIST
44071: PUSH
44072: LD_INT 30
44074: PUSH
44075: LD_INT 30
44077: PUSH
44078: EMPTY
44079: LIST
44080: LIST
44081: PUSH
44082: EMPTY
44083: LIST
44084: LIST
44085: LIST
44086: PPUSH
44087: CALL_OW 72
44091: ST_TO_ADDR
// if tmp then
44092: LD_VAR 0 19
44096: IFFALSE 44144
// for i in tmp do
44098: LD_ADDR_VAR 0 8
44102: PUSH
44103: LD_VAR 0 19
44107: PUSH
44108: FOR_IN
44109: IFFALSE 44142
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
44111: LD_VAR 0 8
44115: PPUSH
44116: CALL_OW 250
44120: PPUSH
44121: LD_VAR 0 8
44125: PPUSH
44126: CALL_OW 251
44130: PPUSH
44131: LD_VAR 0 16
44135: PPUSH
44136: CALL_OW 441
44140: GO 44108
44142: POP
44143: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
44144: LD_VAR 0 18
44148: PPUSH
44149: LD_INT 2
44151: PUSH
44152: LD_INT 30
44154: PUSH
44155: LD_INT 32
44157: PUSH
44158: EMPTY
44159: LIST
44160: LIST
44161: PUSH
44162: LD_INT 30
44164: PUSH
44165: LD_INT 33
44167: PUSH
44168: EMPTY
44169: LIST
44170: LIST
44171: PUSH
44172: EMPTY
44173: LIST
44174: LIST
44175: LIST
44176: PPUSH
44177: CALL_OW 72
44181: IFFALSE 44269
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
44183: LD_ADDR_VAR 0 8
44187: PUSH
44188: LD_VAR 0 18
44192: PPUSH
44193: LD_INT 2
44195: PUSH
44196: LD_INT 30
44198: PUSH
44199: LD_INT 32
44201: PUSH
44202: EMPTY
44203: LIST
44204: LIST
44205: PUSH
44206: LD_INT 30
44208: PUSH
44209: LD_INT 33
44211: PUSH
44212: EMPTY
44213: LIST
44214: LIST
44215: PUSH
44216: EMPTY
44217: LIST
44218: LIST
44219: LIST
44220: PPUSH
44221: CALL_OW 72
44225: PUSH
44226: FOR_IN
44227: IFFALSE 44267
// begin if not GetBWeapon ( i ) then
44229: LD_VAR 0 8
44233: PPUSH
44234: CALL_OW 269
44238: NOT
44239: IFFALSE 44265
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
44241: LD_VAR 0 8
44245: PPUSH
44246: LD_VAR 0 8
44250: PPUSH
44251: LD_VAR 0 2
44255: PPUSH
44256: CALL 45521 0 2
44260: PPUSH
44261: CALL_OW 431
// end ;
44265: GO 44226
44267: POP
44268: POP
// end ; for i = 1 to personel do
44269: LD_ADDR_VAR 0 8
44273: PUSH
44274: DOUBLE
44275: LD_INT 1
44277: DEC
44278: ST_TO_ADDR
44279: LD_VAR 0 6
44283: PUSH
44284: FOR_TO
44285: IFFALSE 45355
// begin if i > 4 then
44287: LD_VAR 0 8
44291: PUSH
44292: LD_INT 4
44294: GREATER
44295: IFFALSE 44299
// break ;
44297: GO 45355
// case i of 1 :
44299: LD_VAR 0 8
44303: PUSH
44304: LD_INT 1
44306: DOUBLE
44307: EQUAL
44308: IFTRUE 44312
44310: GO 44392
44312: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
44313: LD_ADDR_VAR 0 12
44317: PUSH
44318: LD_VAR 0 18
44322: PPUSH
44323: LD_INT 22
44325: PUSH
44326: LD_VAR 0 16
44330: PUSH
44331: EMPTY
44332: LIST
44333: LIST
44334: PUSH
44335: LD_INT 58
44337: PUSH
44338: EMPTY
44339: LIST
44340: PUSH
44341: LD_INT 2
44343: PUSH
44344: LD_INT 30
44346: PUSH
44347: LD_INT 32
44349: PUSH
44350: EMPTY
44351: LIST
44352: LIST
44353: PUSH
44354: LD_INT 30
44356: PUSH
44357: LD_INT 4
44359: PUSH
44360: EMPTY
44361: LIST
44362: LIST
44363: PUSH
44364: LD_INT 30
44366: PUSH
44367: LD_INT 5
44369: PUSH
44370: EMPTY
44371: LIST
44372: LIST
44373: PUSH
44374: EMPTY
44375: LIST
44376: LIST
44377: LIST
44378: LIST
44379: PUSH
44380: EMPTY
44381: LIST
44382: LIST
44383: LIST
44384: PPUSH
44385: CALL_OW 72
44389: ST_TO_ADDR
44390: GO 44614
44392: LD_INT 2
44394: DOUBLE
44395: EQUAL
44396: IFTRUE 44400
44398: GO 44462
44400: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
44401: LD_ADDR_VAR 0 12
44405: PUSH
44406: LD_VAR 0 18
44410: PPUSH
44411: LD_INT 22
44413: PUSH
44414: LD_VAR 0 16
44418: PUSH
44419: EMPTY
44420: LIST
44421: LIST
44422: PUSH
44423: LD_INT 2
44425: PUSH
44426: LD_INT 30
44428: PUSH
44429: LD_INT 0
44431: PUSH
44432: EMPTY
44433: LIST
44434: LIST
44435: PUSH
44436: LD_INT 30
44438: PUSH
44439: LD_INT 1
44441: PUSH
44442: EMPTY
44443: LIST
44444: LIST
44445: PUSH
44446: EMPTY
44447: LIST
44448: LIST
44449: LIST
44450: PUSH
44451: EMPTY
44452: LIST
44453: LIST
44454: PPUSH
44455: CALL_OW 72
44459: ST_TO_ADDR
44460: GO 44614
44462: LD_INT 3
44464: DOUBLE
44465: EQUAL
44466: IFTRUE 44470
44468: GO 44532
44470: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
44471: LD_ADDR_VAR 0 12
44475: PUSH
44476: LD_VAR 0 18
44480: PPUSH
44481: LD_INT 22
44483: PUSH
44484: LD_VAR 0 16
44488: PUSH
44489: EMPTY
44490: LIST
44491: LIST
44492: PUSH
44493: LD_INT 2
44495: PUSH
44496: LD_INT 30
44498: PUSH
44499: LD_INT 2
44501: PUSH
44502: EMPTY
44503: LIST
44504: LIST
44505: PUSH
44506: LD_INT 30
44508: PUSH
44509: LD_INT 3
44511: PUSH
44512: EMPTY
44513: LIST
44514: LIST
44515: PUSH
44516: EMPTY
44517: LIST
44518: LIST
44519: LIST
44520: PUSH
44521: EMPTY
44522: LIST
44523: LIST
44524: PPUSH
44525: CALL_OW 72
44529: ST_TO_ADDR
44530: GO 44614
44532: LD_INT 4
44534: DOUBLE
44535: EQUAL
44536: IFTRUE 44540
44538: GO 44613
44540: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
44541: LD_ADDR_VAR 0 12
44545: PUSH
44546: LD_VAR 0 18
44550: PPUSH
44551: LD_INT 22
44553: PUSH
44554: LD_VAR 0 16
44558: PUSH
44559: EMPTY
44560: LIST
44561: LIST
44562: PUSH
44563: LD_INT 2
44565: PUSH
44566: LD_INT 30
44568: PUSH
44569: LD_INT 6
44571: PUSH
44572: EMPTY
44573: LIST
44574: LIST
44575: PUSH
44576: LD_INT 30
44578: PUSH
44579: LD_INT 7
44581: PUSH
44582: EMPTY
44583: LIST
44584: LIST
44585: PUSH
44586: LD_INT 30
44588: PUSH
44589: LD_INT 8
44591: PUSH
44592: EMPTY
44593: LIST
44594: LIST
44595: PUSH
44596: EMPTY
44597: LIST
44598: LIST
44599: LIST
44600: LIST
44601: PUSH
44602: EMPTY
44603: LIST
44604: LIST
44605: PPUSH
44606: CALL_OW 72
44610: ST_TO_ADDR
44611: GO 44614
44613: POP
// if i = 1 then
44614: LD_VAR 0 8
44618: PUSH
44619: LD_INT 1
44621: EQUAL
44622: IFFALSE 44733
// begin tmp := [ ] ;
44624: LD_ADDR_VAR 0 19
44628: PUSH
44629: EMPTY
44630: ST_TO_ADDR
// for j in f do
44631: LD_ADDR_VAR 0 9
44635: PUSH
44636: LD_VAR 0 12
44640: PUSH
44641: FOR_IN
44642: IFFALSE 44715
// if GetBType ( j ) = b_bunker then
44644: LD_VAR 0 9
44648: PPUSH
44649: CALL_OW 266
44653: PUSH
44654: LD_INT 32
44656: EQUAL
44657: IFFALSE 44684
// tmp := Insert ( tmp , 1 , j ) else
44659: LD_ADDR_VAR 0 19
44663: PUSH
44664: LD_VAR 0 19
44668: PPUSH
44669: LD_INT 1
44671: PPUSH
44672: LD_VAR 0 9
44676: PPUSH
44677: CALL_OW 2
44681: ST_TO_ADDR
44682: GO 44713
// tmp := Insert ( tmp , tmp + 1 , j ) ;
44684: LD_ADDR_VAR 0 19
44688: PUSH
44689: LD_VAR 0 19
44693: PPUSH
44694: LD_VAR 0 19
44698: PUSH
44699: LD_INT 1
44701: PLUS
44702: PPUSH
44703: LD_VAR 0 9
44707: PPUSH
44708: CALL_OW 2
44712: ST_TO_ADDR
44713: GO 44641
44715: POP
44716: POP
// if tmp then
44717: LD_VAR 0 19
44721: IFFALSE 44733
// f := tmp ;
44723: LD_ADDR_VAR 0 12
44727: PUSH
44728: LD_VAR 0 19
44732: ST_TO_ADDR
// end ; x := personel [ i ] ;
44733: LD_ADDR_VAR 0 13
44737: PUSH
44738: LD_VAR 0 6
44742: PUSH
44743: LD_VAR 0 8
44747: ARRAY
44748: ST_TO_ADDR
// if x = - 1 then
44749: LD_VAR 0 13
44753: PUSH
44754: LD_INT 1
44756: NEG
44757: EQUAL
44758: IFFALSE 44969
// begin for j in f do
44760: LD_ADDR_VAR 0 9
44764: PUSH
44765: LD_VAR 0 12
44769: PUSH
44770: FOR_IN
44771: IFFALSE 44965
// repeat InitHc ;
44773: CALL_OW 19
// if GetBType ( j ) = b_barracks then
44777: LD_VAR 0 9
44781: PPUSH
44782: CALL_OW 266
44786: PUSH
44787: LD_INT 5
44789: EQUAL
44790: IFFALSE 44860
// begin if UnitsInside ( j ) < 3 then
44792: LD_VAR 0 9
44796: PPUSH
44797: CALL_OW 313
44801: PUSH
44802: LD_INT 3
44804: LESS
44805: IFFALSE 44841
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
44807: LD_INT 0
44809: PPUSH
44810: LD_INT 5
44812: PUSH
44813: LD_INT 8
44815: PUSH
44816: LD_INT 9
44818: PUSH
44819: EMPTY
44820: LIST
44821: LIST
44822: LIST
44823: PUSH
44824: LD_VAR 0 17
44828: ARRAY
44829: PPUSH
44830: LD_VAR 0 4
44834: PPUSH
44835: CALL_OW 380
44839: GO 44858
// PrepareHuman ( false , i , skill ) ;
44841: LD_INT 0
44843: PPUSH
44844: LD_VAR 0 8
44848: PPUSH
44849: LD_VAR 0 4
44853: PPUSH
44854: CALL_OW 380
// end else
44858: GO 44877
// PrepareHuman ( false , i , skill ) ;
44860: LD_INT 0
44862: PPUSH
44863: LD_VAR 0 8
44867: PPUSH
44868: LD_VAR 0 4
44872: PPUSH
44873: CALL_OW 380
// un := CreateHuman ;
44877: LD_ADDR_VAR 0 14
44881: PUSH
44882: CALL_OW 44
44886: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
44887: LD_ADDR_VAR 0 7
44891: PUSH
44892: LD_VAR 0 7
44896: PPUSH
44897: LD_INT 1
44899: PPUSH
44900: LD_VAR 0 14
44904: PPUSH
44905: CALL_OW 2
44909: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
44910: LD_VAR 0 14
44914: PPUSH
44915: LD_VAR 0 9
44919: PPUSH
44920: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
44924: LD_VAR 0 9
44928: PPUSH
44929: CALL_OW 313
44933: PUSH
44934: LD_INT 6
44936: EQUAL
44937: IFTRUE 44961
44939: PUSH
44940: LD_VAR 0 9
44944: PPUSH
44945: CALL_OW 266
44949: PUSH
44950: LD_INT 32
44952: PUSH
44953: LD_INT 31
44955: PUSH
44956: EMPTY
44957: LIST
44958: LIST
44959: IN
44960: OR
44961: IFFALSE 44773
44963: GO 44770
44965: POP
44966: POP
// end else
44967: GO 45353
// for j = 1 to x do
44969: LD_ADDR_VAR 0 9
44973: PUSH
44974: DOUBLE
44975: LD_INT 1
44977: DEC
44978: ST_TO_ADDR
44979: LD_VAR 0 13
44983: PUSH
44984: FOR_TO
44985: IFFALSE 45351
// begin InitHc ;
44987: CALL_OW 19
// if not f then
44991: LD_VAR 0 12
44995: NOT
44996: IFFALSE 45085
// begin PrepareHuman ( false , i , skill ) ;
44998: LD_INT 0
45000: PPUSH
45001: LD_VAR 0 8
45005: PPUSH
45006: LD_VAR 0 4
45010: PPUSH
45011: CALL_OW 380
// un := CreateHuman ;
45015: LD_ADDR_VAR 0 14
45019: PUSH
45020: CALL_OW 44
45024: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
45025: LD_ADDR_VAR 0 7
45029: PUSH
45030: LD_VAR 0 7
45034: PPUSH
45035: LD_INT 1
45037: PPUSH
45038: LD_VAR 0 14
45042: PPUSH
45043: CALL_OW 2
45047: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
45048: LD_VAR 0 14
45052: PPUSH
45053: LD_VAR 0 1
45057: PPUSH
45058: CALL_OW 250
45062: PPUSH
45063: LD_VAR 0 1
45067: PPUSH
45068: CALL_OW 251
45072: PPUSH
45073: LD_INT 10
45075: PPUSH
45076: LD_INT 0
45078: PPUSH
45079: CALL_OW 50
// continue ;
45083: GO 44984
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
45085: LD_VAR 0 12
45089: PUSH
45090: LD_INT 1
45092: ARRAY
45093: PPUSH
45094: CALL_OW 313
45098: IFFALSE 45126
45100: PUSH
45101: LD_VAR 0 12
45105: PUSH
45106: LD_INT 1
45108: ARRAY
45109: PPUSH
45110: CALL_OW 266
45114: PUSH
45115: LD_INT 32
45117: PUSH
45118: LD_INT 31
45120: PUSH
45121: EMPTY
45122: LIST
45123: LIST
45124: IN
45125: AND
45126: IFTRUE 45147
45128: PUSH
45129: LD_VAR 0 12
45133: PUSH
45134: LD_INT 1
45136: ARRAY
45137: PPUSH
45138: CALL_OW 313
45142: PUSH
45143: LD_INT 6
45145: EQUAL
45146: OR
45147: IFFALSE 45167
// f := Delete ( f , 1 ) ;
45149: LD_ADDR_VAR 0 12
45153: PUSH
45154: LD_VAR 0 12
45158: PPUSH
45159: LD_INT 1
45161: PPUSH
45162: CALL_OW 3
45166: ST_TO_ADDR
// if not f then
45167: LD_VAR 0 12
45171: NOT
45172: IFFALSE 45190
// begin x := x + 2 ;
45174: LD_ADDR_VAR 0 13
45178: PUSH
45179: LD_VAR 0 13
45183: PUSH
45184: LD_INT 2
45186: PLUS
45187: ST_TO_ADDR
// continue ;
45188: GO 44984
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
45190: LD_VAR 0 12
45194: PUSH
45195: LD_INT 1
45197: ARRAY
45198: PPUSH
45199: CALL_OW 266
45203: PUSH
45204: LD_INT 5
45206: EQUAL
45207: IFFALSE 45281
// begin if UnitsInside ( f [ 1 ] ) < 3 then
45209: LD_VAR 0 12
45213: PUSH
45214: LD_INT 1
45216: ARRAY
45217: PPUSH
45218: CALL_OW 313
45222: PUSH
45223: LD_INT 3
45225: LESS
45226: IFFALSE 45262
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
45228: LD_INT 0
45230: PPUSH
45231: LD_INT 5
45233: PUSH
45234: LD_INT 8
45236: PUSH
45237: LD_INT 9
45239: PUSH
45240: EMPTY
45241: LIST
45242: LIST
45243: LIST
45244: PUSH
45245: LD_VAR 0 17
45249: ARRAY
45250: PPUSH
45251: LD_VAR 0 4
45255: PPUSH
45256: CALL_OW 380
45260: GO 45279
// PrepareHuman ( false , i , skill ) ;
45262: LD_INT 0
45264: PPUSH
45265: LD_VAR 0 8
45269: PPUSH
45270: LD_VAR 0 4
45274: PPUSH
45275: CALL_OW 380
// end else
45279: GO 45298
// PrepareHuman ( false , i , skill ) ;
45281: LD_INT 0
45283: PPUSH
45284: LD_VAR 0 8
45288: PPUSH
45289: LD_VAR 0 4
45293: PPUSH
45294: CALL_OW 380
// un := CreateHuman ;
45298: LD_ADDR_VAR 0 14
45302: PUSH
45303: CALL_OW 44
45307: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
45308: LD_ADDR_VAR 0 7
45312: PUSH
45313: LD_VAR 0 7
45317: PPUSH
45318: LD_INT 1
45320: PPUSH
45321: LD_VAR 0 14
45325: PPUSH
45326: CALL_OW 2
45330: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
45331: LD_VAR 0 14
45335: PPUSH
45336: LD_VAR 0 12
45340: PUSH
45341: LD_INT 1
45343: ARRAY
45344: PPUSH
45345: CALL_OW 52
// end ;
45349: GO 44984
45351: POP
45352: POP
// end ;
45353: GO 44284
45355: POP
45356: POP
// result := result ^ buildings ;
45357: LD_ADDR_VAR 0 7
45361: PUSH
45362: LD_VAR 0 7
45366: PUSH
45367: LD_VAR 0 18
45371: ADD
45372: ST_TO_ADDR
// end else
45373: GO 45516
// begin for i = 1 to personel do
45375: LD_ADDR_VAR 0 8
45379: PUSH
45380: DOUBLE
45381: LD_INT 1
45383: DEC
45384: ST_TO_ADDR
45385: LD_VAR 0 6
45389: PUSH
45390: FOR_TO
45391: IFFALSE 45514
// begin if i > 4 then
45393: LD_VAR 0 8
45397: PUSH
45398: LD_INT 4
45400: GREATER
45401: IFFALSE 45405
// break ;
45403: GO 45514
// x := personel [ i ] ;
45405: LD_ADDR_VAR 0 13
45409: PUSH
45410: LD_VAR 0 6
45414: PUSH
45415: LD_VAR 0 8
45419: ARRAY
45420: ST_TO_ADDR
// if x = - 1 then
45421: LD_VAR 0 13
45425: PUSH
45426: LD_INT 1
45428: NEG
45429: EQUAL
45430: IFFALSE 45434
// continue ;
45432: GO 45390
// PrepareHuman ( false , i , skill ) ;
45434: LD_INT 0
45436: PPUSH
45437: LD_VAR 0 8
45441: PPUSH
45442: LD_VAR 0 4
45446: PPUSH
45447: CALL_OW 380
// un := CreateHuman ;
45451: LD_ADDR_VAR 0 14
45455: PUSH
45456: CALL_OW 44
45460: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
45461: LD_VAR 0 14
45465: PPUSH
45466: LD_VAR 0 1
45470: PPUSH
45471: CALL_OW 250
45475: PPUSH
45476: LD_VAR 0 1
45480: PPUSH
45481: CALL_OW 251
45485: PPUSH
45486: LD_INT 10
45488: PPUSH
45489: LD_INT 0
45491: PPUSH
45492: CALL_OW 50
// result := result ^ un ;
45496: LD_ADDR_VAR 0 7
45500: PUSH
45501: LD_VAR 0 7
45505: PUSH
45506: LD_VAR 0 14
45510: ADD
45511: ST_TO_ADDR
// end ;
45512: GO 45390
45514: POP
45515: POP
// end ; end ;
45516: LD_VAR 0 7
45520: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
45521: LD_INT 0
45523: PPUSH
45524: PPUSH
45525: PPUSH
45526: PPUSH
45527: PPUSH
45528: PPUSH
45529: PPUSH
45530: PPUSH
45531: PPUSH
45532: PPUSH
45533: PPUSH
45534: PPUSH
45535: PPUSH
45536: PPUSH
45537: PPUSH
45538: PPUSH
// result := false ;
45539: LD_ADDR_VAR 0 3
45543: PUSH
45544: LD_INT 0
45546: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
45547: LD_VAR 0 1
45551: NOT
45552: IFTRUE 45577
45554: PUSH
45555: LD_VAR 0 1
45559: PPUSH
45560: CALL_OW 266
45564: PUSH
45565: LD_INT 32
45567: PUSH
45568: LD_INT 33
45570: PUSH
45571: EMPTY
45572: LIST
45573: LIST
45574: IN
45575: NOT
45576: OR
45577: IFFALSE 45581
// exit ;
45579: GO 46716
// nat := GetNation ( tower ) ;
45581: LD_ADDR_VAR 0 12
45585: PUSH
45586: LD_VAR 0 1
45590: PPUSH
45591: CALL_OW 248
45595: ST_TO_ADDR
// side := GetSide ( tower ) ;
45596: LD_ADDR_VAR 0 16
45600: PUSH
45601: LD_VAR 0 1
45605: PPUSH
45606: CALL_OW 255
45610: ST_TO_ADDR
// x := GetX ( tower ) ;
45611: LD_ADDR_VAR 0 10
45615: PUSH
45616: LD_VAR 0 1
45620: PPUSH
45621: CALL_OW 250
45625: ST_TO_ADDR
// y := GetY ( tower ) ;
45626: LD_ADDR_VAR 0 11
45630: PUSH
45631: LD_VAR 0 1
45635: PPUSH
45636: CALL_OW 251
45640: ST_TO_ADDR
// if not x or not y then
45641: LD_VAR 0 10
45645: NOT
45646: IFTRUE 45655
45648: PUSH
45649: LD_VAR 0 11
45653: NOT
45654: OR
45655: IFFALSE 45659
// exit ;
45657: GO 46716
// weapon := 0 ;
45659: LD_ADDR_VAR 0 18
45663: PUSH
45664: LD_INT 0
45666: ST_TO_ADDR
// fac_list := [ ] ;
45667: LD_ADDR_VAR 0 17
45671: PUSH
45672: EMPTY
45673: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
45674: LD_ADDR_VAR 0 6
45678: PUSH
45679: LD_VAR 0 1
45683: PPUSH
45684: CALL_OW 274
45688: PPUSH
45689: LD_VAR 0 2
45693: PPUSH
45694: LD_INT 0
45696: PPUSH
45697: CALL 43251 0 3
45701: PPUSH
45702: LD_INT 30
45704: PUSH
45705: LD_INT 3
45707: PUSH
45708: EMPTY
45709: LIST
45710: LIST
45711: PPUSH
45712: CALL_OW 72
45716: ST_TO_ADDR
// if not factories then
45717: LD_VAR 0 6
45721: NOT
45722: IFFALSE 45726
// exit ;
45724: GO 46716
// for i in factories do
45726: LD_ADDR_VAR 0 8
45730: PUSH
45731: LD_VAR 0 6
45735: PUSH
45736: FOR_IN
45737: IFFALSE 45762
// fac_list := fac_list union AvailableWeaponList ( i ) ;
45739: LD_ADDR_VAR 0 17
45743: PUSH
45744: LD_VAR 0 17
45748: PUSH
45749: LD_VAR 0 8
45753: PPUSH
45754: CALL_OW 478
45758: UNION
45759: ST_TO_ADDR
45760: GO 45736
45762: POP
45763: POP
// if not fac_list then
45764: LD_VAR 0 17
45768: NOT
45769: IFFALSE 45773
// exit ;
45771: GO 46716
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
45773: LD_ADDR_VAR 0 5
45777: PUSH
45778: LD_INT 4
45780: PUSH
45781: LD_INT 5
45783: PUSH
45784: LD_INT 9
45786: PUSH
45787: LD_INT 10
45789: PUSH
45790: LD_INT 6
45792: PUSH
45793: LD_INT 7
45795: PUSH
45796: LD_INT 11
45798: PUSH
45799: EMPTY
45800: LIST
45801: LIST
45802: LIST
45803: LIST
45804: LIST
45805: LIST
45806: LIST
45807: PUSH
45808: LD_INT 27
45810: PUSH
45811: LD_INT 28
45813: PUSH
45814: LD_INT 26
45816: PUSH
45817: LD_INT 30
45819: PUSH
45820: EMPTY
45821: LIST
45822: LIST
45823: LIST
45824: LIST
45825: PUSH
45826: LD_INT 43
45828: PUSH
45829: LD_INT 44
45831: PUSH
45832: LD_INT 46
45834: PUSH
45835: LD_INT 45
45837: PUSH
45838: LD_INT 47
45840: PUSH
45841: LD_INT 49
45843: PUSH
45844: EMPTY
45845: LIST
45846: LIST
45847: LIST
45848: LIST
45849: LIST
45850: LIST
45851: PUSH
45852: EMPTY
45853: LIST
45854: LIST
45855: LIST
45856: PUSH
45857: LD_VAR 0 12
45861: ARRAY
45862: ST_TO_ADDR
// list := list isect fac_list ;
45863: LD_ADDR_VAR 0 5
45867: PUSH
45868: LD_VAR 0 5
45872: PUSH
45873: LD_VAR 0 17
45877: ISECT
45878: ST_TO_ADDR
// if not list then
45879: LD_VAR 0 5
45883: NOT
45884: IFFALSE 45888
// exit ;
45886: GO 46716
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
45888: LD_VAR 0 12
45892: PUSH
45893: LD_INT 3
45895: EQUAL
45896: IFFALSE 45908
45898: PUSH
45899: LD_INT 49
45901: PUSH
45902: LD_VAR 0 5
45906: IN
45907: AND
45908: IFFALSE 45928
45910: PUSH
45911: LD_INT 31
45913: PPUSH
45914: LD_VAR 0 16
45918: PPUSH
45919: CALL_OW 321
45923: PUSH
45924: LD_INT 2
45926: EQUAL
45927: AND
45928: IFFALSE 45988
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
45930: LD_INT 22
45932: PUSH
45933: LD_VAR 0 16
45937: PUSH
45938: EMPTY
45939: LIST
45940: LIST
45941: PUSH
45942: LD_INT 35
45944: PUSH
45945: LD_INT 49
45947: PUSH
45948: EMPTY
45949: LIST
45950: LIST
45951: PUSH
45952: LD_INT 91
45954: PUSH
45955: LD_VAR 0 1
45959: PUSH
45960: LD_INT 10
45962: PUSH
45963: EMPTY
45964: LIST
45965: LIST
45966: LIST
45967: PUSH
45968: EMPTY
45969: LIST
45970: LIST
45971: LIST
45972: PPUSH
45973: CALL_OW 69
45977: NOT
45978: IFFALSE 45988
// weapon := ru_time_lapser ;
45980: LD_ADDR_VAR 0 18
45984: PUSH
45985: LD_INT 49
45987: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
45988: LD_VAR 0 12
45992: PUSH
45993: LD_INT 1
45995: PUSH
45996: LD_INT 2
45998: PUSH
45999: EMPTY
46000: LIST
46001: LIST
46002: IN
46003: IFFALSE 46027
46005: PUSH
46006: LD_INT 11
46008: PUSH
46009: LD_VAR 0 5
46013: IN
46014: IFTRUE 46026
46016: PUSH
46017: LD_INT 30
46019: PUSH
46020: LD_VAR 0 5
46024: IN
46025: OR
46026: AND
46027: IFFALSE 46047
46029: PUSH
46030: LD_INT 6
46032: PPUSH
46033: LD_VAR 0 16
46037: PPUSH
46038: CALL_OW 321
46042: PUSH
46043: LD_INT 2
46045: EQUAL
46046: AND
46047: IFFALSE 46214
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
46049: LD_INT 22
46051: PUSH
46052: LD_VAR 0 16
46056: PUSH
46057: EMPTY
46058: LIST
46059: LIST
46060: PUSH
46061: LD_INT 2
46063: PUSH
46064: LD_INT 35
46066: PUSH
46067: LD_INT 11
46069: PUSH
46070: EMPTY
46071: LIST
46072: LIST
46073: PUSH
46074: LD_INT 35
46076: PUSH
46077: LD_INT 30
46079: PUSH
46080: EMPTY
46081: LIST
46082: LIST
46083: PUSH
46084: EMPTY
46085: LIST
46086: LIST
46087: LIST
46088: PUSH
46089: LD_INT 91
46091: PUSH
46092: LD_VAR 0 1
46096: PUSH
46097: LD_INT 18
46099: PUSH
46100: EMPTY
46101: LIST
46102: LIST
46103: LIST
46104: PUSH
46105: EMPTY
46106: LIST
46107: LIST
46108: LIST
46109: PPUSH
46110: CALL_OW 69
46114: NOT
46115: IFFALSE 46191
46117: PUSH
46118: LD_INT 22
46120: PUSH
46121: LD_VAR 0 16
46125: PUSH
46126: EMPTY
46127: LIST
46128: LIST
46129: PUSH
46130: LD_INT 2
46132: PUSH
46133: LD_INT 30
46135: PUSH
46136: LD_INT 32
46138: PUSH
46139: EMPTY
46140: LIST
46141: LIST
46142: PUSH
46143: LD_INT 30
46145: PUSH
46146: LD_INT 33
46148: PUSH
46149: EMPTY
46150: LIST
46151: LIST
46152: PUSH
46153: EMPTY
46154: LIST
46155: LIST
46156: LIST
46157: PUSH
46158: LD_INT 91
46160: PUSH
46161: LD_VAR 0 1
46165: PUSH
46166: LD_INT 12
46168: PUSH
46169: EMPTY
46170: LIST
46171: LIST
46172: LIST
46173: PUSH
46174: EMPTY
46175: LIST
46176: LIST
46177: LIST
46178: PUSH
46179: EMPTY
46180: LIST
46181: PPUSH
46182: CALL_OW 69
46186: PUSH
46187: LD_INT 2
46189: GREATER
46190: AND
46191: IFFALSE 46214
// weapon := [ us_radar , ar_radar ] [ nat ] ;
46193: LD_ADDR_VAR 0 18
46197: PUSH
46198: LD_INT 11
46200: PUSH
46201: LD_INT 30
46203: PUSH
46204: EMPTY
46205: LIST
46206: LIST
46207: PUSH
46208: LD_VAR 0 12
46212: ARRAY
46213: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
46214: LD_VAR 0 18
46218: NOT
46219: IFFALSE 46239
46221: PUSH
46222: LD_INT 40
46224: PPUSH
46225: LD_VAR 0 16
46229: PPUSH
46230: CALL_OW 321
46234: PUSH
46235: LD_INT 2
46237: EQUAL
46238: AND
46239: IFFALSE 46275
46241: PUSH
46242: LD_INT 7
46244: PUSH
46245: LD_VAR 0 5
46249: IN
46250: IFTRUE 46262
46252: PUSH
46253: LD_INT 28
46255: PUSH
46256: LD_VAR 0 5
46260: IN
46261: OR
46262: IFTRUE 46274
46264: PUSH
46265: LD_INT 45
46267: PUSH
46268: LD_VAR 0 5
46272: IN
46273: OR
46274: AND
46275: IFFALSE 46529
// begin hex := GetHexInfo ( x , y ) ;
46277: LD_ADDR_VAR 0 4
46281: PUSH
46282: LD_VAR 0 10
46286: PPUSH
46287: LD_VAR 0 11
46291: PPUSH
46292: CALL_OW 546
46296: ST_TO_ADDR
// if hex [ 1 ] then
46297: LD_VAR 0 4
46301: PUSH
46302: LD_INT 1
46304: ARRAY
46305: IFFALSE 46309
// exit ;
46307: GO 46716
// height := hex [ 2 ] ;
46309: LD_ADDR_VAR 0 15
46313: PUSH
46314: LD_VAR 0 4
46318: PUSH
46319: LD_INT 2
46321: ARRAY
46322: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
46323: LD_ADDR_VAR 0 14
46327: PUSH
46328: LD_INT 0
46330: PUSH
46331: LD_INT 2
46333: PUSH
46334: LD_INT 3
46336: PUSH
46337: LD_INT 5
46339: PUSH
46340: EMPTY
46341: LIST
46342: LIST
46343: LIST
46344: LIST
46345: ST_TO_ADDR
// for i in tmp do
46346: LD_ADDR_VAR 0 8
46350: PUSH
46351: LD_VAR 0 14
46355: PUSH
46356: FOR_IN
46357: IFFALSE 46527
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
46359: LD_ADDR_VAR 0 9
46363: PUSH
46364: LD_VAR 0 10
46368: PPUSH
46369: LD_VAR 0 8
46373: PPUSH
46374: LD_INT 5
46376: PPUSH
46377: CALL_OW 272
46381: PUSH
46382: LD_VAR 0 11
46386: PPUSH
46387: LD_VAR 0 8
46391: PPUSH
46392: LD_INT 5
46394: PPUSH
46395: CALL_OW 273
46399: PUSH
46400: EMPTY
46401: LIST
46402: LIST
46403: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
46404: LD_VAR 0 9
46408: PUSH
46409: LD_INT 1
46411: ARRAY
46412: PPUSH
46413: LD_VAR 0 9
46417: PUSH
46418: LD_INT 2
46420: ARRAY
46421: PPUSH
46422: CALL_OW 488
46426: IFFALSE 46525
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
46428: LD_ADDR_VAR 0 4
46432: PUSH
46433: LD_VAR 0 9
46437: PUSH
46438: LD_INT 1
46440: ARRAY
46441: PPUSH
46442: LD_VAR 0 9
46446: PUSH
46447: LD_INT 2
46449: ARRAY
46450: PPUSH
46451: CALL_OW 546
46455: ST_TO_ADDR
// if hex [ 1 ] then
46456: LD_VAR 0 4
46460: PUSH
46461: LD_INT 1
46463: ARRAY
46464: IFFALSE 46468
// continue ;
46466: GO 46356
// h := hex [ 2 ] ;
46468: LD_ADDR_VAR 0 13
46472: PUSH
46473: LD_VAR 0 4
46477: PUSH
46478: LD_INT 2
46480: ARRAY
46481: ST_TO_ADDR
// if h + 7 < height then
46482: LD_VAR 0 13
46486: PUSH
46487: LD_INT 7
46489: PLUS
46490: PUSH
46491: LD_VAR 0 15
46495: LESS
46496: IFFALSE 46525
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
46498: LD_ADDR_VAR 0 18
46502: PUSH
46503: LD_INT 7
46505: PUSH
46506: LD_INT 28
46508: PUSH
46509: LD_INT 45
46511: PUSH
46512: EMPTY
46513: LIST
46514: LIST
46515: LIST
46516: PUSH
46517: LD_VAR 0 12
46521: ARRAY
46522: ST_TO_ADDR
// break ;
46523: GO 46527
// end ; end ; end ;
46525: GO 46356
46527: POP
46528: POP
// end ; if not weapon then
46529: LD_VAR 0 18
46533: NOT
46534: IFFALSE 46594
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
46536: LD_ADDR_VAR 0 5
46540: PUSH
46541: LD_VAR 0 5
46545: PUSH
46546: LD_INT 11
46548: PUSH
46549: LD_INT 30
46551: PUSH
46552: LD_INT 49
46554: PUSH
46555: EMPTY
46556: LIST
46557: LIST
46558: LIST
46559: DIFF
46560: ST_TO_ADDR
// if not list then
46561: LD_VAR 0 5
46565: NOT
46566: IFFALSE 46570
// exit ;
46568: GO 46716
// weapon := list [ rand ( 1 , list ) ] ;
46570: LD_ADDR_VAR 0 18
46574: PUSH
46575: LD_VAR 0 5
46579: PUSH
46580: LD_INT 1
46582: PPUSH
46583: LD_VAR 0 5
46587: PPUSH
46588: CALL_OW 12
46592: ARRAY
46593: ST_TO_ADDR
// end ; if weapon then
46594: LD_VAR 0 18
46598: IFFALSE 46716
// begin tmp := CostOfWeapon ( weapon ) ;
46600: LD_ADDR_VAR 0 14
46604: PUSH
46605: LD_VAR 0 18
46609: PPUSH
46610: CALL_OW 451
46614: ST_TO_ADDR
// j := GetBase ( tower ) ;
46615: LD_ADDR_VAR 0 9
46619: PUSH
46620: LD_VAR 0 1
46624: PPUSH
46625: CALL_OW 274
46629: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
46630: LD_VAR 0 9
46634: PPUSH
46635: LD_INT 1
46637: PPUSH
46638: CALL_OW 275
46642: PUSH
46643: LD_VAR 0 14
46647: PUSH
46648: LD_INT 1
46650: ARRAY
46651: GREATEREQUAL
46652: IFFALSE 46678
46654: PUSH
46655: LD_VAR 0 9
46659: PPUSH
46660: LD_INT 2
46662: PPUSH
46663: CALL_OW 275
46667: PUSH
46668: LD_VAR 0 14
46672: PUSH
46673: LD_INT 2
46675: ARRAY
46676: GREATEREQUAL
46677: AND
46678: IFFALSE 46704
46680: PUSH
46681: LD_VAR 0 9
46685: PPUSH
46686: LD_INT 3
46688: PPUSH
46689: CALL_OW 275
46693: PUSH
46694: LD_VAR 0 14
46698: PUSH
46699: LD_INT 3
46701: ARRAY
46702: GREATEREQUAL
46703: AND
46704: IFFALSE 46716
// result := weapon ;
46706: LD_ADDR_VAR 0 3
46710: PUSH
46711: LD_VAR 0 18
46715: ST_TO_ADDR
// end ; end ;
46716: LD_VAR 0 3
46720: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
46721: LD_INT 0
46723: PPUSH
46724: PPUSH
// result := true ;
46725: LD_ADDR_VAR 0 3
46729: PUSH
46730: LD_INT 1
46732: ST_TO_ADDR
// if array1 = array2 then
46733: LD_VAR 0 1
46737: PUSH
46738: LD_VAR 0 2
46742: EQUAL
46743: IFFALSE 46803
// begin for i = 1 to array1 do
46745: LD_ADDR_VAR 0 4
46749: PUSH
46750: DOUBLE
46751: LD_INT 1
46753: DEC
46754: ST_TO_ADDR
46755: LD_VAR 0 1
46759: PUSH
46760: FOR_TO
46761: IFFALSE 46799
// if array1 [ i ] <> array2 [ i ] then
46763: LD_VAR 0 1
46767: PUSH
46768: LD_VAR 0 4
46772: ARRAY
46773: PUSH
46774: LD_VAR 0 2
46778: PUSH
46779: LD_VAR 0 4
46783: ARRAY
46784: NONEQUAL
46785: IFFALSE 46797
// begin result := false ;
46787: LD_ADDR_VAR 0 3
46791: PUSH
46792: LD_INT 0
46794: ST_TO_ADDR
// break ;
46795: GO 46799
// end ;
46797: GO 46760
46799: POP
46800: POP
// end else
46801: GO 46811
// result := false ;
46803: LD_ADDR_VAR 0 3
46807: PUSH
46808: LD_INT 0
46810: ST_TO_ADDR
// end ;
46811: LD_VAR 0 3
46815: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
46816: LD_INT 0
46818: PPUSH
46819: PPUSH
// if not array1 or not array2 then
46820: LD_VAR 0 1
46824: NOT
46825: IFTRUE 46834
46827: PUSH
46828: LD_VAR 0 2
46832: NOT
46833: OR
46834: IFFALSE 46838
// exit ;
46836: GO 46902
// result := true ;
46838: LD_ADDR_VAR 0 3
46842: PUSH
46843: LD_INT 1
46845: ST_TO_ADDR
// for i = 1 to array1 do
46846: LD_ADDR_VAR 0 4
46850: PUSH
46851: DOUBLE
46852: LD_INT 1
46854: DEC
46855: ST_TO_ADDR
46856: LD_VAR 0 1
46860: PUSH
46861: FOR_TO
46862: IFFALSE 46900
// if array1 [ i ] <> array2 [ i ] then
46864: LD_VAR 0 1
46868: PUSH
46869: LD_VAR 0 4
46873: ARRAY
46874: PUSH
46875: LD_VAR 0 2
46879: PUSH
46880: LD_VAR 0 4
46884: ARRAY
46885: NONEQUAL
46886: IFFALSE 46898
// begin result := false ;
46888: LD_ADDR_VAR 0 3
46892: PUSH
46893: LD_INT 0
46895: ST_TO_ADDR
// break ;
46896: GO 46900
// end ;
46898: GO 46861
46900: POP
46901: POP
// end ;
46902: LD_VAR 0 3
46906: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
46907: LD_INT 0
46909: PPUSH
46910: PPUSH
46911: PPUSH
// pom := GetBase ( fac ) ;
46912: LD_ADDR_VAR 0 5
46916: PUSH
46917: LD_VAR 0 1
46921: PPUSH
46922: CALL_OW 274
46926: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
46927: LD_ADDR_VAR 0 4
46931: PUSH
46932: LD_VAR 0 2
46936: PUSH
46937: LD_INT 1
46939: ARRAY
46940: PPUSH
46941: LD_VAR 0 2
46945: PUSH
46946: LD_INT 2
46948: ARRAY
46949: PPUSH
46950: LD_VAR 0 2
46954: PUSH
46955: LD_INT 3
46957: ARRAY
46958: PPUSH
46959: LD_VAR 0 2
46963: PUSH
46964: LD_INT 4
46966: ARRAY
46967: PPUSH
46968: CALL_OW 449
46972: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
46973: LD_ADDR_VAR 0 3
46977: PUSH
46978: LD_VAR 0 5
46982: PPUSH
46983: LD_INT 1
46985: PPUSH
46986: CALL_OW 275
46990: PUSH
46991: LD_VAR 0 4
46995: PUSH
46996: LD_INT 1
46998: ARRAY
46999: GREATEREQUAL
47000: IFFALSE 47026
47002: PUSH
47003: LD_VAR 0 5
47007: PPUSH
47008: LD_INT 2
47010: PPUSH
47011: CALL_OW 275
47015: PUSH
47016: LD_VAR 0 4
47020: PUSH
47021: LD_INT 2
47023: ARRAY
47024: GREATEREQUAL
47025: AND
47026: IFFALSE 47052
47028: PUSH
47029: LD_VAR 0 5
47033: PPUSH
47034: LD_INT 3
47036: PPUSH
47037: CALL_OW 275
47041: PUSH
47042: LD_VAR 0 4
47046: PUSH
47047: LD_INT 3
47049: ARRAY
47050: GREATEREQUAL
47051: AND
47052: ST_TO_ADDR
// end ;
47053: LD_VAR 0 3
47057: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
47058: LD_INT 0
47060: PPUSH
47061: PPUSH
47062: PPUSH
47063: PPUSH
// pom := GetBase ( building ) ;
47064: LD_ADDR_VAR 0 3
47068: PUSH
47069: LD_VAR 0 1
47073: PPUSH
47074: CALL_OW 274
47078: ST_TO_ADDR
// if not pom then
47079: LD_VAR 0 3
47083: NOT
47084: IFFALSE 47088
// exit ;
47086: GO 47262
// btype := GetBType ( building ) ;
47088: LD_ADDR_VAR 0 5
47092: PUSH
47093: LD_VAR 0 1
47097: PPUSH
47098: CALL_OW 266
47102: ST_TO_ADDR
// if btype = b_armoury then
47103: LD_VAR 0 5
47107: PUSH
47108: LD_INT 4
47110: EQUAL
47111: IFFALSE 47121
// btype := b_barracks ;
47113: LD_ADDR_VAR 0 5
47117: PUSH
47118: LD_INT 5
47120: ST_TO_ADDR
// if btype = b_depot then
47121: LD_VAR 0 5
47125: PUSH
47126: LD_INT 0
47128: EQUAL
47129: IFFALSE 47139
// btype := b_warehouse ;
47131: LD_ADDR_VAR 0 5
47135: PUSH
47136: LD_INT 1
47138: ST_TO_ADDR
// if btype = b_workshop then
47139: LD_VAR 0 5
47143: PUSH
47144: LD_INT 2
47146: EQUAL
47147: IFFALSE 47157
// btype := b_factory ;
47149: LD_ADDR_VAR 0 5
47153: PUSH
47154: LD_INT 3
47156: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
47157: LD_ADDR_VAR 0 4
47161: PUSH
47162: LD_VAR 0 5
47166: PPUSH
47167: LD_VAR 0 1
47171: PPUSH
47172: CALL_OW 248
47176: PPUSH
47177: CALL_OW 450
47181: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
47182: LD_ADDR_VAR 0 2
47186: PUSH
47187: LD_VAR 0 3
47191: PPUSH
47192: LD_INT 1
47194: PPUSH
47195: CALL_OW 275
47199: PUSH
47200: LD_VAR 0 4
47204: PUSH
47205: LD_INT 1
47207: ARRAY
47208: GREATEREQUAL
47209: IFFALSE 47235
47211: PUSH
47212: LD_VAR 0 3
47216: PPUSH
47217: LD_INT 2
47219: PPUSH
47220: CALL_OW 275
47224: PUSH
47225: LD_VAR 0 4
47229: PUSH
47230: LD_INT 2
47232: ARRAY
47233: GREATEREQUAL
47234: AND
47235: IFFALSE 47261
47237: PUSH
47238: LD_VAR 0 3
47242: PPUSH
47243: LD_INT 3
47245: PPUSH
47246: CALL_OW 275
47250: PUSH
47251: LD_VAR 0 4
47255: PUSH
47256: LD_INT 3
47258: ARRAY
47259: GREATEREQUAL
47260: AND
47261: ST_TO_ADDR
// end ;
47262: LD_VAR 0 2
47266: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
47267: LD_INT 0
47269: PPUSH
47270: PPUSH
47271: PPUSH
// pom := GetBase ( building ) ;
47272: LD_ADDR_VAR 0 4
47276: PUSH
47277: LD_VAR 0 1
47281: PPUSH
47282: CALL_OW 274
47286: ST_TO_ADDR
// if not pom then
47287: LD_VAR 0 4
47291: NOT
47292: IFFALSE 47296
// exit ;
47294: GO 47401
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
47296: LD_ADDR_VAR 0 5
47300: PUSH
47301: LD_VAR 0 2
47305: PPUSH
47306: LD_VAR 0 1
47310: PPUSH
47311: CALL_OW 248
47315: PPUSH
47316: CALL_OW 450
47320: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
47321: LD_ADDR_VAR 0 3
47325: PUSH
47326: LD_VAR 0 4
47330: PPUSH
47331: LD_INT 1
47333: PPUSH
47334: CALL_OW 275
47338: PUSH
47339: LD_VAR 0 5
47343: PUSH
47344: LD_INT 1
47346: ARRAY
47347: GREATEREQUAL
47348: IFFALSE 47374
47350: PUSH
47351: LD_VAR 0 4
47355: PPUSH
47356: LD_INT 2
47358: PPUSH
47359: CALL_OW 275
47363: PUSH
47364: LD_VAR 0 5
47368: PUSH
47369: LD_INT 2
47371: ARRAY
47372: GREATEREQUAL
47373: AND
47374: IFFALSE 47400
47376: PUSH
47377: LD_VAR 0 4
47381: PPUSH
47382: LD_INT 3
47384: PPUSH
47385: CALL_OW 275
47389: PUSH
47390: LD_VAR 0 5
47394: PUSH
47395: LD_INT 3
47397: ARRAY
47398: GREATEREQUAL
47399: AND
47400: ST_TO_ADDR
// end ;
47401: LD_VAR 0 3
47405: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
47406: LD_INT 0
47408: PPUSH
47409: PPUSH
47410: PPUSH
47411: PPUSH
47412: PPUSH
47413: PPUSH
47414: PPUSH
47415: PPUSH
47416: PPUSH
47417: PPUSH
47418: PPUSH
// result := false ;
47419: LD_ADDR_VAR 0 8
47423: PUSH
47424: LD_INT 0
47426: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
47427: LD_VAR 0 5
47431: NOT
47432: IFTRUE 47441
47434: PUSH
47435: LD_VAR 0 1
47439: NOT
47440: OR
47441: IFTRUE 47450
47443: PUSH
47444: LD_VAR 0 2
47448: NOT
47449: OR
47450: IFTRUE 47459
47452: PUSH
47453: LD_VAR 0 3
47457: NOT
47458: OR
47459: IFFALSE 47463
// exit ;
47461: GO 48289
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
47463: LD_ADDR_VAR 0 14
47467: PUSH
47468: LD_VAR 0 1
47472: PPUSH
47473: LD_VAR 0 2
47477: PPUSH
47478: LD_VAR 0 3
47482: PPUSH
47483: LD_VAR 0 4
47487: PPUSH
47488: LD_VAR 0 5
47492: PUSH
47493: LD_INT 1
47495: ARRAY
47496: PPUSH
47497: CALL_OW 248
47501: PPUSH
47502: LD_INT 0
47504: PPUSH
47505: CALL 49570 0 6
47509: ST_TO_ADDR
// if not hexes then
47510: LD_VAR 0 14
47514: NOT
47515: IFFALSE 47519
// exit ;
47517: GO 48289
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
47519: LD_ADDR_VAR 0 17
47523: PUSH
47524: LD_VAR 0 5
47528: PPUSH
47529: LD_INT 22
47531: PUSH
47532: LD_VAR 0 13
47536: PPUSH
47537: CALL_OW 255
47541: PUSH
47542: EMPTY
47543: LIST
47544: LIST
47545: PUSH
47546: LD_INT 2
47548: PUSH
47549: LD_INT 30
47551: PUSH
47552: LD_INT 0
47554: PUSH
47555: EMPTY
47556: LIST
47557: LIST
47558: PUSH
47559: LD_INT 30
47561: PUSH
47562: LD_INT 1
47564: PUSH
47565: EMPTY
47566: LIST
47567: LIST
47568: PUSH
47569: EMPTY
47570: LIST
47571: LIST
47572: LIST
47573: PUSH
47574: EMPTY
47575: LIST
47576: LIST
47577: PPUSH
47578: CALL_OW 72
47582: ST_TO_ADDR
// for i = 1 to hexes do
47583: LD_ADDR_VAR 0 9
47587: PUSH
47588: DOUBLE
47589: LD_INT 1
47591: DEC
47592: ST_TO_ADDR
47593: LD_VAR 0 14
47597: PUSH
47598: FOR_TO
47599: IFFALSE 48287
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
47601: LD_ADDR_VAR 0 13
47605: PUSH
47606: LD_VAR 0 14
47610: PUSH
47611: LD_VAR 0 9
47615: ARRAY
47616: PUSH
47617: LD_INT 1
47619: ARRAY
47620: PPUSH
47621: LD_VAR 0 14
47625: PUSH
47626: LD_VAR 0 9
47630: ARRAY
47631: PUSH
47632: LD_INT 2
47634: ARRAY
47635: PPUSH
47636: CALL_OW 428
47640: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
47641: LD_VAR 0 14
47645: PUSH
47646: LD_VAR 0 9
47650: ARRAY
47651: PUSH
47652: LD_INT 1
47654: ARRAY
47655: PPUSH
47656: LD_VAR 0 14
47660: PUSH
47661: LD_VAR 0 9
47665: ARRAY
47666: PUSH
47667: LD_INT 2
47669: ARRAY
47670: PPUSH
47671: CALL_OW 351
47675: IFTRUE 47714
47677: PUSH
47678: LD_VAR 0 14
47682: PUSH
47683: LD_VAR 0 9
47687: ARRAY
47688: PUSH
47689: LD_INT 1
47691: ARRAY
47692: PPUSH
47693: LD_VAR 0 14
47697: PUSH
47698: LD_VAR 0 9
47702: ARRAY
47703: PUSH
47704: LD_INT 2
47706: ARRAY
47707: PPUSH
47708: CALL_OW 488
47712: NOT
47713: OR
47714: IFTRUE 47731
47716: PUSH
47717: LD_VAR 0 13
47721: PPUSH
47722: CALL_OW 247
47726: PUSH
47727: LD_INT 3
47729: EQUAL
47730: OR
47731: IFFALSE 47737
// exit ;
47733: POP
47734: POP
47735: GO 48289
// if not tmp then
47737: LD_VAR 0 13
47741: NOT
47742: IFFALSE 47746
// continue ;
47744: GO 47598
// result := true ;
47746: LD_ADDR_VAR 0 8
47750: PUSH
47751: LD_INT 1
47753: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
47754: LD_VAR 0 6
47758: IFFALSE 47775
47760: PUSH
47761: LD_VAR 0 13
47765: PPUSH
47766: CALL_OW 247
47770: PUSH
47771: LD_INT 2
47773: EQUAL
47774: AND
47775: IFFALSE 47792
47777: PUSH
47778: LD_VAR 0 13
47782: PPUSH
47783: CALL_OW 263
47787: PUSH
47788: LD_INT 1
47790: EQUAL
47791: AND
47792: IFFALSE 47956
// begin if IsDrivenBy ( tmp ) then
47794: LD_VAR 0 13
47798: PPUSH
47799: CALL_OW 311
47803: IFFALSE 47807
// continue ;
47805: GO 47598
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
47807: LD_VAR 0 6
47811: PPUSH
47812: LD_INT 3
47814: PUSH
47815: LD_INT 60
47817: PUSH
47818: EMPTY
47819: LIST
47820: PUSH
47821: EMPTY
47822: LIST
47823: LIST
47824: PUSH
47825: LD_INT 3
47827: PUSH
47828: LD_INT 55
47830: PUSH
47831: EMPTY
47832: LIST
47833: PUSH
47834: EMPTY
47835: LIST
47836: LIST
47837: PUSH
47838: EMPTY
47839: LIST
47840: LIST
47841: PPUSH
47842: CALL_OW 72
47846: IFFALSE 47954
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
47848: LD_ADDR_VAR 0 18
47852: PUSH
47853: LD_VAR 0 6
47857: PPUSH
47858: LD_INT 3
47860: PUSH
47861: LD_INT 60
47863: PUSH
47864: EMPTY
47865: LIST
47866: PUSH
47867: EMPTY
47868: LIST
47869: LIST
47870: PUSH
47871: LD_INT 3
47873: PUSH
47874: LD_INT 55
47876: PUSH
47877: EMPTY
47878: LIST
47879: PUSH
47880: EMPTY
47881: LIST
47882: LIST
47883: PUSH
47884: EMPTY
47885: LIST
47886: LIST
47887: PPUSH
47888: CALL_OW 72
47892: PUSH
47893: LD_INT 1
47895: ARRAY
47896: ST_TO_ADDR
// if IsInUnit ( driver ) then
47897: LD_VAR 0 18
47901: PPUSH
47902: CALL_OW 310
47906: IFFALSE 47917
// ComExit ( driver ) ;
47908: LD_VAR 0 18
47912: PPUSH
47913: CALL 73570 0 1
// AddComEnterUnit ( driver , tmp ) ;
47917: LD_VAR 0 18
47921: PPUSH
47922: LD_VAR 0 13
47926: PPUSH
47927: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
47931: LD_VAR 0 18
47935: PPUSH
47936: LD_VAR 0 7
47940: PPUSH
47941: CALL_OW 173
// AddComExitVehicle ( driver ) ;
47945: LD_VAR 0 18
47949: PPUSH
47950: CALL_OW 181
// end ; continue ;
47954: GO 47598
// end ; if not cleaners or not tmp in cleaners then
47956: LD_VAR 0 6
47960: NOT
47961: IFTRUE 47976
47963: PUSH
47964: LD_VAR 0 13
47968: PUSH
47969: LD_VAR 0 6
47973: IN
47974: NOT
47975: OR
47976: IFFALSE 48285
// begin if dep then
47978: LD_VAR 0 17
47982: IFFALSE 48118
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
47984: LD_ADDR_VAR 0 16
47988: PUSH
47989: LD_VAR 0 17
47993: PUSH
47994: LD_INT 1
47996: ARRAY
47997: PPUSH
47998: CALL_OW 250
48002: PPUSH
48003: LD_VAR 0 17
48007: PUSH
48008: LD_INT 1
48010: ARRAY
48011: PPUSH
48012: CALL_OW 254
48016: PPUSH
48017: LD_INT 5
48019: PPUSH
48020: CALL_OW 272
48024: PUSH
48025: LD_VAR 0 17
48029: PUSH
48030: LD_INT 1
48032: ARRAY
48033: PPUSH
48034: CALL_OW 251
48038: PPUSH
48039: LD_VAR 0 17
48043: PUSH
48044: LD_INT 1
48046: ARRAY
48047: PPUSH
48048: CALL_OW 254
48052: PPUSH
48053: LD_INT 5
48055: PPUSH
48056: CALL_OW 273
48060: PUSH
48061: EMPTY
48062: LIST
48063: LIST
48064: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
48065: LD_VAR 0 16
48069: PUSH
48070: LD_INT 1
48072: ARRAY
48073: PPUSH
48074: LD_VAR 0 16
48078: PUSH
48079: LD_INT 2
48081: ARRAY
48082: PPUSH
48083: CALL_OW 488
48087: IFFALSE 48118
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
48089: LD_VAR 0 13
48093: PPUSH
48094: LD_VAR 0 16
48098: PUSH
48099: LD_INT 1
48101: ARRAY
48102: PPUSH
48103: LD_VAR 0 16
48107: PUSH
48108: LD_INT 2
48110: ARRAY
48111: PPUSH
48112: CALL_OW 111
// continue ;
48116: GO 47598
// end ; end ; r := GetDir ( tmp ) ;
48118: LD_ADDR_VAR 0 15
48122: PUSH
48123: LD_VAR 0 13
48127: PPUSH
48128: CALL_OW 254
48132: ST_TO_ADDR
// if r = 5 then
48133: LD_VAR 0 15
48137: PUSH
48138: LD_INT 5
48140: EQUAL
48141: IFFALSE 48151
// r := 0 ;
48143: LD_ADDR_VAR 0 15
48147: PUSH
48148: LD_INT 0
48150: ST_TO_ADDR
// for j = r to 5 do
48151: LD_ADDR_VAR 0 10
48155: PUSH
48156: DOUBLE
48157: LD_VAR 0 15
48161: DEC
48162: ST_TO_ADDR
48163: LD_INT 5
48165: PUSH
48166: FOR_TO
48167: IFFALSE 48283
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
48169: LD_ADDR_VAR 0 11
48173: PUSH
48174: LD_VAR 0 13
48178: PPUSH
48179: CALL_OW 250
48183: PPUSH
48184: LD_VAR 0 10
48188: PPUSH
48189: LD_INT 2
48191: PPUSH
48192: CALL_OW 272
48196: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
48197: LD_ADDR_VAR 0 12
48201: PUSH
48202: LD_VAR 0 13
48206: PPUSH
48207: CALL_OW 251
48211: PPUSH
48212: LD_VAR 0 10
48216: PPUSH
48217: LD_INT 2
48219: PPUSH
48220: CALL_OW 273
48224: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
48225: LD_VAR 0 11
48229: PPUSH
48230: LD_VAR 0 12
48234: PPUSH
48235: CALL_OW 488
48239: IFFALSE 48258
48241: PUSH
48242: LD_VAR 0 11
48246: PPUSH
48247: LD_VAR 0 12
48251: PPUSH
48252: CALL_OW 428
48256: NOT
48257: AND
48258: IFFALSE 48281
// begin ComMoveXY ( tmp , _x , _y ) ;
48260: LD_VAR 0 13
48264: PPUSH
48265: LD_VAR 0 11
48269: PPUSH
48270: LD_VAR 0 12
48274: PPUSH
48275: CALL_OW 111
// break ;
48279: GO 48283
// end ; end ;
48281: GO 48166
48283: POP
48284: POP
// end ; end ;
48285: GO 47598
48287: POP
48288: POP
// end ;
48289: LD_VAR 0 8
48293: RET
// export function BuildingTechInvented ( side , btype ) ; begin
48294: LD_INT 0
48296: PPUSH
// result := true ;
48297: LD_ADDR_VAR 0 3
48301: PUSH
48302: LD_INT 1
48304: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
48305: LD_VAR 0 2
48309: PUSH
48310: LD_INT 24
48312: DOUBLE
48313: EQUAL
48314: IFTRUE 48324
48316: LD_INT 33
48318: DOUBLE
48319: EQUAL
48320: IFTRUE 48324
48322: GO 48349
48324: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
48325: LD_ADDR_VAR 0 3
48329: PUSH
48330: LD_INT 32
48332: PPUSH
48333: LD_VAR 0 1
48337: PPUSH
48338: CALL_OW 321
48342: PUSH
48343: LD_INT 2
48345: EQUAL
48346: ST_TO_ADDR
48347: GO 48665
48349: LD_INT 20
48351: DOUBLE
48352: EQUAL
48353: IFTRUE 48357
48355: GO 48382
48357: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
48358: LD_ADDR_VAR 0 3
48362: PUSH
48363: LD_INT 6
48365: PPUSH
48366: LD_VAR 0 1
48370: PPUSH
48371: CALL_OW 321
48375: PUSH
48376: LD_INT 2
48378: EQUAL
48379: ST_TO_ADDR
48380: GO 48665
48382: LD_INT 22
48384: DOUBLE
48385: EQUAL
48386: IFTRUE 48396
48388: LD_INT 36
48390: DOUBLE
48391: EQUAL
48392: IFTRUE 48396
48394: GO 48421
48396: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
48397: LD_ADDR_VAR 0 3
48401: PUSH
48402: LD_INT 15
48404: PPUSH
48405: LD_VAR 0 1
48409: PPUSH
48410: CALL_OW 321
48414: PUSH
48415: LD_INT 2
48417: EQUAL
48418: ST_TO_ADDR
48419: GO 48665
48421: LD_INT 30
48423: DOUBLE
48424: EQUAL
48425: IFTRUE 48429
48427: GO 48454
48429: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
48430: LD_ADDR_VAR 0 3
48434: PUSH
48435: LD_INT 20
48437: PPUSH
48438: LD_VAR 0 1
48442: PPUSH
48443: CALL_OW 321
48447: PUSH
48448: LD_INT 2
48450: EQUAL
48451: ST_TO_ADDR
48452: GO 48665
48454: LD_INT 28
48456: DOUBLE
48457: EQUAL
48458: IFTRUE 48468
48460: LD_INT 21
48462: DOUBLE
48463: EQUAL
48464: IFTRUE 48468
48466: GO 48493
48468: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
48469: LD_ADDR_VAR 0 3
48473: PUSH
48474: LD_INT 21
48476: PPUSH
48477: LD_VAR 0 1
48481: PPUSH
48482: CALL_OW 321
48486: PUSH
48487: LD_INT 2
48489: EQUAL
48490: ST_TO_ADDR
48491: GO 48665
48493: LD_INT 16
48495: DOUBLE
48496: EQUAL
48497: IFTRUE 48501
48499: GO 48526
48501: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
48502: LD_ADDR_VAR 0 3
48506: PUSH
48507: LD_INT 84
48509: PPUSH
48510: LD_VAR 0 1
48514: PPUSH
48515: CALL_OW 321
48519: PUSH
48520: LD_INT 2
48522: EQUAL
48523: ST_TO_ADDR
48524: GO 48665
48526: LD_INT 19
48528: DOUBLE
48529: EQUAL
48530: IFTRUE 48540
48532: LD_INT 23
48534: DOUBLE
48535: EQUAL
48536: IFTRUE 48540
48538: GO 48565
48540: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
48541: LD_ADDR_VAR 0 3
48545: PUSH
48546: LD_INT 83
48548: PPUSH
48549: LD_VAR 0 1
48553: PPUSH
48554: CALL_OW 321
48558: PUSH
48559: LD_INT 2
48561: EQUAL
48562: ST_TO_ADDR
48563: GO 48665
48565: LD_INT 17
48567: DOUBLE
48568: EQUAL
48569: IFTRUE 48573
48571: GO 48598
48573: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
48574: LD_ADDR_VAR 0 3
48578: PUSH
48579: LD_INT 39
48581: PPUSH
48582: LD_VAR 0 1
48586: PPUSH
48587: CALL_OW 321
48591: PUSH
48592: LD_INT 2
48594: EQUAL
48595: ST_TO_ADDR
48596: GO 48665
48598: LD_INT 18
48600: DOUBLE
48601: EQUAL
48602: IFTRUE 48606
48604: GO 48631
48606: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
48607: LD_ADDR_VAR 0 3
48611: PUSH
48612: LD_INT 40
48614: PPUSH
48615: LD_VAR 0 1
48619: PPUSH
48620: CALL_OW 321
48624: PUSH
48625: LD_INT 2
48627: EQUAL
48628: ST_TO_ADDR
48629: GO 48665
48631: LD_INT 27
48633: DOUBLE
48634: EQUAL
48635: IFTRUE 48639
48637: GO 48664
48639: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
48640: LD_ADDR_VAR 0 3
48644: PUSH
48645: LD_INT 35
48647: PPUSH
48648: LD_VAR 0 1
48652: PPUSH
48653: CALL_OW 321
48657: PUSH
48658: LD_INT 2
48660: EQUAL
48661: ST_TO_ADDR
48662: GO 48665
48664: POP
// end ;
48665: LD_VAR 0 3
48669: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
48670: LD_INT 0
48672: PPUSH
48673: PPUSH
48674: PPUSH
48675: PPUSH
48676: PPUSH
48677: PPUSH
48678: PPUSH
48679: PPUSH
48680: PPUSH
48681: PPUSH
48682: PPUSH
// result := false ;
48683: LD_ADDR_VAR 0 6
48687: PUSH
48688: LD_INT 0
48690: ST_TO_ADDR
// if btype = b_depot then
48691: LD_VAR 0 2
48695: PUSH
48696: LD_INT 0
48698: EQUAL
48699: IFFALSE 48711
// begin result := true ;
48701: LD_ADDR_VAR 0 6
48705: PUSH
48706: LD_INT 1
48708: ST_TO_ADDR
// exit ;
48709: GO 49565
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
48711: LD_VAR 0 1
48715: NOT
48716: IFTRUE 48741
48718: PUSH
48719: LD_VAR 0 1
48723: PPUSH
48724: CALL_OW 266
48728: PUSH
48729: LD_INT 0
48731: PUSH
48732: LD_INT 1
48734: PUSH
48735: EMPTY
48736: LIST
48737: LIST
48738: IN
48739: NOT
48740: OR
48741: IFTRUE 48750
48743: PUSH
48744: LD_VAR 0 2
48748: NOT
48749: OR
48750: IFTRUE 48786
48752: PUSH
48753: LD_VAR 0 5
48757: PUSH
48758: LD_INT 0
48760: PUSH
48761: LD_INT 1
48763: PUSH
48764: LD_INT 2
48766: PUSH
48767: LD_INT 3
48769: PUSH
48770: LD_INT 4
48772: PUSH
48773: LD_INT 5
48775: PUSH
48776: EMPTY
48777: LIST
48778: LIST
48779: LIST
48780: LIST
48781: LIST
48782: LIST
48783: IN
48784: NOT
48785: OR
48786: IFTRUE 48805
48788: PUSH
48789: LD_VAR 0 3
48793: PPUSH
48794: LD_VAR 0 4
48798: PPUSH
48799: CALL_OW 488
48803: NOT
48804: OR
48805: IFFALSE 48809
// exit ;
48807: GO 49565
// side := GetSide ( depot ) ;
48809: LD_ADDR_VAR 0 9
48813: PUSH
48814: LD_VAR 0 1
48818: PPUSH
48819: CALL_OW 255
48823: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
48824: LD_VAR 0 9
48828: PPUSH
48829: LD_VAR 0 2
48833: PPUSH
48834: CALL 48294 0 2
48838: NOT
48839: IFFALSE 48843
// exit ;
48841: GO 49565
// pom := GetBase ( depot ) ;
48843: LD_ADDR_VAR 0 10
48847: PUSH
48848: LD_VAR 0 1
48852: PPUSH
48853: CALL_OW 274
48857: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
48858: LD_ADDR_VAR 0 11
48862: PUSH
48863: LD_VAR 0 2
48867: PPUSH
48868: LD_VAR 0 1
48872: PPUSH
48873: CALL_OW 248
48877: PPUSH
48878: CALL_OW 450
48882: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
48883: LD_VAR 0 10
48887: PPUSH
48888: LD_INT 1
48890: PPUSH
48891: CALL_OW 275
48895: PUSH
48896: LD_VAR 0 11
48900: PUSH
48901: LD_INT 1
48903: ARRAY
48904: GREATEREQUAL
48905: IFFALSE 48931
48907: PUSH
48908: LD_VAR 0 10
48912: PPUSH
48913: LD_INT 2
48915: PPUSH
48916: CALL_OW 275
48920: PUSH
48921: LD_VAR 0 11
48925: PUSH
48926: LD_INT 2
48928: ARRAY
48929: GREATEREQUAL
48930: AND
48931: IFFALSE 48957
48933: PUSH
48934: LD_VAR 0 10
48938: PPUSH
48939: LD_INT 3
48941: PPUSH
48942: CALL_OW 275
48946: PUSH
48947: LD_VAR 0 11
48951: PUSH
48952: LD_INT 3
48954: ARRAY
48955: GREATEREQUAL
48956: AND
48957: NOT
48958: IFFALSE 48962
// exit ;
48960: GO 49565
// if GetBType ( depot ) = b_depot then
48962: LD_VAR 0 1
48966: PPUSH
48967: CALL_OW 266
48971: PUSH
48972: LD_INT 0
48974: EQUAL
48975: IFFALSE 48987
// dist := 28 else
48977: LD_ADDR_VAR 0 14
48981: PUSH
48982: LD_INT 28
48984: ST_TO_ADDR
48985: GO 48995
// dist := 36 ;
48987: LD_ADDR_VAR 0 14
48991: PUSH
48992: LD_INT 36
48994: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
48995: LD_VAR 0 1
48999: PPUSH
49000: LD_VAR 0 3
49004: PPUSH
49005: LD_VAR 0 4
49009: PPUSH
49010: CALL_OW 297
49014: PUSH
49015: LD_VAR 0 14
49019: GREATER
49020: IFFALSE 49024
// exit ;
49022: GO 49565
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
49024: LD_ADDR_VAR 0 12
49028: PUSH
49029: LD_VAR 0 2
49033: PPUSH
49034: LD_VAR 0 3
49038: PPUSH
49039: LD_VAR 0 4
49043: PPUSH
49044: LD_VAR 0 5
49048: PPUSH
49049: LD_VAR 0 1
49053: PPUSH
49054: CALL_OW 248
49058: PPUSH
49059: LD_INT 0
49061: PPUSH
49062: CALL 49570 0 6
49066: ST_TO_ADDR
// if not hexes then
49067: LD_VAR 0 12
49071: NOT
49072: IFFALSE 49076
// exit ;
49074: GO 49565
// hex := GetHexInfo ( x , y ) ;
49076: LD_ADDR_VAR 0 15
49080: PUSH
49081: LD_VAR 0 3
49085: PPUSH
49086: LD_VAR 0 4
49090: PPUSH
49091: CALL_OW 546
49095: ST_TO_ADDR
// if hex [ 1 ] then
49096: LD_VAR 0 15
49100: PUSH
49101: LD_INT 1
49103: ARRAY
49104: IFFALSE 49108
// exit ;
49106: GO 49565
// height := hex [ 2 ] ;
49108: LD_ADDR_VAR 0 13
49112: PUSH
49113: LD_VAR 0 15
49117: PUSH
49118: LD_INT 2
49120: ARRAY
49121: ST_TO_ADDR
// for i = 1 to hexes do
49122: LD_ADDR_VAR 0 7
49126: PUSH
49127: DOUBLE
49128: LD_INT 1
49130: DEC
49131: ST_TO_ADDR
49132: LD_VAR 0 12
49136: PUSH
49137: FOR_TO
49138: IFFALSE 49482
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
49140: LD_VAR 0 12
49144: PUSH
49145: LD_VAR 0 7
49149: ARRAY
49150: PUSH
49151: LD_INT 1
49153: ARRAY
49154: PPUSH
49155: LD_VAR 0 12
49159: PUSH
49160: LD_VAR 0 7
49164: ARRAY
49165: PUSH
49166: LD_INT 2
49168: ARRAY
49169: PPUSH
49170: CALL_OW 488
49174: NOT
49175: IFTRUE 49217
49177: PUSH
49178: LD_VAR 0 12
49182: PUSH
49183: LD_VAR 0 7
49187: ARRAY
49188: PUSH
49189: LD_INT 1
49191: ARRAY
49192: PPUSH
49193: LD_VAR 0 12
49197: PUSH
49198: LD_VAR 0 7
49202: ARRAY
49203: PUSH
49204: LD_INT 2
49206: ARRAY
49207: PPUSH
49208: CALL_OW 428
49212: PUSH
49213: LD_INT 0
49215: GREATER
49216: OR
49217: IFTRUE 49255
49219: PUSH
49220: LD_VAR 0 12
49224: PUSH
49225: LD_VAR 0 7
49229: ARRAY
49230: PUSH
49231: LD_INT 1
49233: ARRAY
49234: PPUSH
49235: LD_VAR 0 12
49239: PUSH
49240: LD_VAR 0 7
49244: ARRAY
49245: PUSH
49246: LD_INT 2
49248: ARRAY
49249: PPUSH
49250: CALL_OW 351
49254: OR
49255: IFFALSE 49261
// exit ;
49257: POP
49258: POP
49259: GO 49565
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
49261: LD_ADDR_VAR 0 8
49265: PUSH
49266: LD_VAR 0 12
49270: PUSH
49271: LD_VAR 0 7
49275: ARRAY
49276: PUSH
49277: LD_INT 1
49279: ARRAY
49280: PPUSH
49281: LD_VAR 0 12
49285: PUSH
49286: LD_VAR 0 7
49290: ARRAY
49291: PUSH
49292: LD_INT 2
49294: ARRAY
49295: PPUSH
49296: CALL_OW 546
49300: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
49301: LD_VAR 0 8
49305: PUSH
49306: LD_INT 1
49308: ARRAY
49309: IFTRUE 49331
49311: PUSH
49312: LD_VAR 0 8
49316: PUSH
49317: LD_INT 2
49319: ARRAY
49320: PUSH
49321: LD_VAR 0 13
49325: PUSH
49326: LD_INT 2
49328: PLUS
49329: GREATER
49330: OR
49331: IFTRUE 49353
49333: PUSH
49334: LD_VAR 0 8
49338: PUSH
49339: LD_INT 2
49341: ARRAY
49342: PUSH
49343: LD_VAR 0 13
49347: PUSH
49348: LD_INT 2
49350: MINUS
49351: LESS
49352: OR
49353: IFTRUE 49421
49355: PUSH
49356: LD_VAR 0 8
49360: PUSH
49361: LD_INT 3
49363: ARRAY
49364: PUSH
49365: LD_INT 0
49367: PUSH
49368: LD_INT 8
49370: PUSH
49371: LD_INT 9
49373: PUSH
49374: LD_INT 10
49376: PUSH
49377: LD_INT 11
49379: PUSH
49380: LD_INT 12
49382: PUSH
49383: LD_INT 13
49385: PUSH
49386: LD_INT 16
49388: PUSH
49389: LD_INT 17
49391: PUSH
49392: LD_INT 18
49394: PUSH
49395: LD_INT 19
49397: PUSH
49398: LD_INT 20
49400: PUSH
49401: LD_INT 21
49403: PUSH
49404: EMPTY
49405: LIST
49406: LIST
49407: LIST
49408: LIST
49409: LIST
49410: LIST
49411: LIST
49412: LIST
49413: LIST
49414: LIST
49415: LIST
49416: LIST
49417: LIST
49418: IN
49419: NOT
49420: OR
49421: IFTRUE 49434
49423: PUSH
49424: LD_VAR 0 8
49428: PUSH
49429: LD_INT 5
49431: ARRAY
49432: NOT
49433: OR
49434: IFTRUE 49474
49436: PUSH
49437: LD_VAR 0 8
49441: PUSH
49442: LD_INT 6
49444: ARRAY
49445: PUSH
49446: LD_INT 1
49448: PUSH
49449: LD_INT 2
49451: PUSH
49452: LD_INT 7
49454: PUSH
49455: LD_INT 9
49457: PUSH
49458: LD_INT 10
49460: PUSH
49461: LD_INT 11
49463: PUSH
49464: EMPTY
49465: LIST
49466: LIST
49467: LIST
49468: LIST
49469: LIST
49470: LIST
49471: IN
49472: NOT
49473: OR
49474: IFFALSE 49480
// exit ;
49476: POP
49477: POP
49478: GO 49565
// end ;
49480: GO 49137
49482: POP
49483: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
49484: LD_VAR 0 9
49488: PPUSH
49489: LD_VAR 0 3
49493: PPUSH
49494: LD_VAR 0 4
49498: PPUSH
49499: LD_INT 20
49501: PPUSH
49502: CALL 41384 0 4
49506: PUSH
49507: LD_INT 4
49509: ARRAY
49510: IFFALSE 49514
// exit ;
49512: GO 49565
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
49514: LD_VAR 0 2
49518: PUSH
49519: LD_INT 29
49521: PUSH
49522: LD_INT 30
49524: PUSH
49525: EMPTY
49526: LIST
49527: LIST
49528: IN
49529: IFFALSE 49553
49531: PUSH
49532: LD_VAR 0 3
49536: PPUSH
49537: LD_VAR 0 4
49541: PPUSH
49542: LD_VAR 0 9
49546: PPUSH
49547: CALL_OW 440
49551: NOT
49552: AND
49553: IFFALSE 49557
// exit ;
49555: GO 49565
// result := true ;
49557: LD_ADDR_VAR 0 6
49561: PUSH
49562: LD_INT 1
49564: ST_TO_ADDR
// end ;
49565: LD_VAR 0 6
49569: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
49570: LD_INT 0
49572: PPUSH
49573: PPUSH
49574: PPUSH
49575: PPUSH
49576: PPUSH
49577: PPUSH
49578: PPUSH
49579: PPUSH
49580: PPUSH
49581: PPUSH
49582: PPUSH
49583: PPUSH
49584: PPUSH
49585: PPUSH
49586: PPUSH
49587: PPUSH
49588: PPUSH
49589: PPUSH
49590: PPUSH
49591: PPUSH
49592: PPUSH
49593: PPUSH
49594: PPUSH
49595: PPUSH
49596: PPUSH
49597: PPUSH
49598: PPUSH
49599: PPUSH
49600: PPUSH
49601: PPUSH
49602: PPUSH
49603: PPUSH
49604: PPUSH
49605: PPUSH
49606: PPUSH
49607: PPUSH
49608: PPUSH
49609: PPUSH
49610: PPUSH
49611: PPUSH
49612: PPUSH
49613: PPUSH
49614: PPUSH
49615: PPUSH
49616: PPUSH
49617: PPUSH
49618: PPUSH
49619: PPUSH
49620: PPUSH
49621: PPUSH
49622: PPUSH
49623: PPUSH
49624: PPUSH
49625: PPUSH
49626: PPUSH
49627: PPUSH
49628: PPUSH
49629: PPUSH
// result = [ ] ;
49630: LD_ADDR_VAR 0 7
49634: PUSH
49635: EMPTY
49636: ST_TO_ADDR
// temp_list = [ ] ;
49637: LD_ADDR_VAR 0 9
49641: PUSH
49642: EMPTY
49643: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
49644: LD_VAR 0 4
49648: PUSH
49649: LD_INT 0
49651: PUSH
49652: LD_INT 1
49654: PUSH
49655: LD_INT 2
49657: PUSH
49658: LD_INT 3
49660: PUSH
49661: LD_INT 4
49663: PUSH
49664: LD_INT 5
49666: PUSH
49667: EMPTY
49668: LIST
49669: LIST
49670: LIST
49671: LIST
49672: LIST
49673: LIST
49674: IN
49675: NOT
49676: IFTRUE 49719
49678: PUSH
49679: LD_VAR 0 1
49683: PUSH
49684: LD_INT 0
49686: PUSH
49687: LD_INT 1
49689: PUSH
49690: EMPTY
49691: LIST
49692: LIST
49693: IN
49694: IFFALSE 49718
49696: PUSH
49697: LD_VAR 0 5
49701: PUSH
49702: LD_INT 1
49704: PUSH
49705: LD_INT 2
49707: PUSH
49708: LD_INT 3
49710: PUSH
49711: EMPTY
49712: LIST
49713: LIST
49714: LIST
49715: IN
49716: NOT
49717: AND
49718: OR
49719: IFFALSE 49723
// exit ;
49721: GO 68122
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
49723: LD_VAR 0 1
49727: PUSH
49728: LD_INT 6
49730: PUSH
49731: LD_INT 7
49733: PUSH
49734: LD_INT 8
49736: PUSH
49737: LD_INT 13
49739: PUSH
49740: LD_INT 12
49742: PUSH
49743: LD_INT 15
49745: PUSH
49746: LD_INT 11
49748: PUSH
49749: LD_INT 14
49751: PUSH
49752: LD_INT 10
49754: PUSH
49755: EMPTY
49756: LIST
49757: LIST
49758: LIST
49759: LIST
49760: LIST
49761: LIST
49762: LIST
49763: LIST
49764: LIST
49765: IN
49766: IFFALSE 49776
// btype = b_lab ;
49768: LD_ADDR_VAR 0 1
49772: PUSH
49773: LD_INT 6
49775: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
49776: LD_VAR 0 6
49780: PUSH
49781: LD_INT 0
49783: PUSH
49784: LD_INT 1
49786: PUSH
49787: LD_INT 2
49789: PUSH
49790: EMPTY
49791: LIST
49792: LIST
49793: LIST
49794: IN
49795: NOT
49796: IFTRUE 49864
49798: PUSH
49799: LD_VAR 0 1
49803: PUSH
49804: LD_INT 0
49806: PUSH
49807: LD_INT 1
49809: PUSH
49810: LD_INT 2
49812: PUSH
49813: LD_INT 3
49815: PUSH
49816: LD_INT 6
49818: PUSH
49819: LD_INT 36
49821: PUSH
49822: LD_INT 4
49824: PUSH
49825: LD_INT 5
49827: PUSH
49828: LD_INT 31
49830: PUSH
49831: LD_INT 32
49833: PUSH
49834: LD_INT 33
49836: PUSH
49837: EMPTY
49838: LIST
49839: LIST
49840: LIST
49841: LIST
49842: LIST
49843: LIST
49844: LIST
49845: LIST
49846: LIST
49847: LIST
49848: LIST
49849: IN
49850: NOT
49851: IFFALSE 49863
49853: PUSH
49854: LD_VAR 0 6
49858: PUSH
49859: LD_INT 1
49861: EQUAL
49862: AND
49863: OR
49864: IFTRUE 49896
49866: PUSH
49867: LD_VAR 0 1
49871: PUSH
49872: LD_INT 2
49874: PUSH
49875: LD_INT 3
49877: PUSH
49878: EMPTY
49879: LIST
49880: LIST
49881: IN
49882: NOT
49883: IFFALSE 49895
49885: PUSH
49886: LD_VAR 0 6
49890: PUSH
49891: LD_INT 2
49893: EQUAL
49894: AND
49895: OR
49896: IFFALSE 49906
// mode = 0 ;
49898: LD_ADDR_VAR 0 6
49902: PUSH
49903: LD_INT 0
49905: ST_TO_ADDR
// case mode of 0 :
49906: LD_VAR 0 6
49910: PUSH
49911: LD_INT 0
49913: DOUBLE
49914: EQUAL
49915: IFTRUE 49919
49917: GO 61372
49919: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49920: LD_ADDR_VAR 0 11
49924: PUSH
49925: LD_INT 0
49927: PUSH
49928: LD_INT 0
49930: PUSH
49931: EMPTY
49932: LIST
49933: LIST
49934: PUSH
49935: LD_INT 0
49937: PUSH
49938: LD_INT 1
49940: NEG
49941: PUSH
49942: EMPTY
49943: LIST
49944: LIST
49945: PUSH
49946: LD_INT 1
49948: PUSH
49949: LD_INT 0
49951: PUSH
49952: EMPTY
49953: LIST
49954: LIST
49955: PUSH
49956: LD_INT 1
49958: PUSH
49959: LD_INT 1
49961: PUSH
49962: EMPTY
49963: LIST
49964: LIST
49965: PUSH
49966: LD_INT 0
49968: PUSH
49969: LD_INT 1
49971: PUSH
49972: EMPTY
49973: LIST
49974: LIST
49975: PUSH
49976: LD_INT 1
49978: NEG
49979: PUSH
49980: LD_INT 0
49982: PUSH
49983: EMPTY
49984: LIST
49985: LIST
49986: PUSH
49987: LD_INT 1
49989: NEG
49990: PUSH
49991: LD_INT 1
49993: NEG
49994: PUSH
49995: EMPTY
49996: LIST
49997: LIST
49998: PUSH
49999: LD_INT 1
50001: NEG
50002: PUSH
50003: LD_INT 2
50005: NEG
50006: PUSH
50007: EMPTY
50008: LIST
50009: LIST
50010: PUSH
50011: LD_INT 0
50013: PUSH
50014: LD_INT 2
50016: NEG
50017: PUSH
50018: EMPTY
50019: LIST
50020: LIST
50021: PUSH
50022: LD_INT 1
50024: PUSH
50025: LD_INT 1
50027: NEG
50028: PUSH
50029: EMPTY
50030: LIST
50031: LIST
50032: PUSH
50033: LD_INT 1
50035: PUSH
50036: LD_INT 2
50038: PUSH
50039: EMPTY
50040: LIST
50041: LIST
50042: PUSH
50043: LD_INT 0
50045: PUSH
50046: LD_INT 2
50048: PUSH
50049: EMPTY
50050: LIST
50051: LIST
50052: PUSH
50053: LD_INT 1
50055: NEG
50056: PUSH
50057: LD_INT 1
50059: PUSH
50060: EMPTY
50061: LIST
50062: LIST
50063: PUSH
50064: LD_INT 1
50066: PUSH
50067: LD_INT 3
50069: PUSH
50070: EMPTY
50071: LIST
50072: LIST
50073: PUSH
50074: LD_INT 0
50076: PUSH
50077: LD_INT 3
50079: PUSH
50080: EMPTY
50081: LIST
50082: LIST
50083: PUSH
50084: LD_INT 1
50086: NEG
50087: PUSH
50088: LD_INT 2
50090: PUSH
50091: EMPTY
50092: LIST
50093: LIST
50094: PUSH
50095: EMPTY
50096: LIST
50097: LIST
50098: LIST
50099: LIST
50100: LIST
50101: LIST
50102: LIST
50103: LIST
50104: LIST
50105: LIST
50106: LIST
50107: LIST
50108: LIST
50109: LIST
50110: LIST
50111: LIST
50112: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50113: LD_ADDR_VAR 0 12
50117: PUSH
50118: LD_INT 0
50120: PUSH
50121: LD_INT 0
50123: PUSH
50124: EMPTY
50125: LIST
50126: LIST
50127: PUSH
50128: LD_INT 0
50130: PUSH
50131: LD_INT 1
50133: NEG
50134: PUSH
50135: EMPTY
50136: LIST
50137: LIST
50138: PUSH
50139: LD_INT 1
50141: PUSH
50142: LD_INT 0
50144: PUSH
50145: EMPTY
50146: LIST
50147: LIST
50148: PUSH
50149: LD_INT 1
50151: PUSH
50152: LD_INT 1
50154: PUSH
50155: EMPTY
50156: LIST
50157: LIST
50158: PUSH
50159: LD_INT 0
50161: PUSH
50162: LD_INT 1
50164: PUSH
50165: EMPTY
50166: LIST
50167: LIST
50168: PUSH
50169: LD_INT 1
50171: NEG
50172: PUSH
50173: LD_INT 0
50175: PUSH
50176: EMPTY
50177: LIST
50178: LIST
50179: PUSH
50180: LD_INT 1
50182: NEG
50183: PUSH
50184: LD_INT 1
50186: NEG
50187: PUSH
50188: EMPTY
50189: LIST
50190: LIST
50191: PUSH
50192: LD_INT 1
50194: PUSH
50195: LD_INT 1
50197: NEG
50198: PUSH
50199: EMPTY
50200: LIST
50201: LIST
50202: PUSH
50203: LD_INT 2
50205: PUSH
50206: LD_INT 0
50208: PUSH
50209: EMPTY
50210: LIST
50211: LIST
50212: PUSH
50213: LD_INT 2
50215: PUSH
50216: LD_INT 1
50218: PUSH
50219: EMPTY
50220: LIST
50221: LIST
50222: PUSH
50223: LD_INT 1
50225: NEG
50226: PUSH
50227: LD_INT 1
50229: PUSH
50230: EMPTY
50231: LIST
50232: LIST
50233: PUSH
50234: LD_INT 2
50236: NEG
50237: PUSH
50238: LD_INT 0
50240: PUSH
50241: EMPTY
50242: LIST
50243: LIST
50244: PUSH
50245: LD_INT 2
50247: NEG
50248: PUSH
50249: LD_INT 1
50251: NEG
50252: PUSH
50253: EMPTY
50254: LIST
50255: LIST
50256: PUSH
50257: LD_INT 2
50259: NEG
50260: PUSH
50261: LD_INT 1
50263: PUSH
50264: EMPTY
50265: LIST
50266: LIST
50267: PUSH
50268: LD_INT 3
50270: NEG
50271: PUSH
50272: LD_INT 0
50274: PUSH
50275: EMPTY
50276: LIST
50277: LIST
50278: PUSH
50279: LD_INT 3
50281: NEG
50282: PUSH
50283: LD_INT 1
50285: NEG
50286: PUSH
50287: EMPTY
50288: LIST
50289: LIST
50290: PUSH
50291: EMPTY
50292: LIST
50293: LIST
50294: LIST
50295: LIST
50296: LIST
50297: LIST
50298: LIST
50299: LIST
50300: LIST
50301: LIST
50302: LIST
50303: LIST
50304: LIST
50305: LIST
50306: LIST
50307: LIST
50308: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50309: LD_ADDR_VAR 0 13
50313: PUSH
50314: LD_INT 0
50316: PUSH
50317: LD_INT 0
50319: PUSH
50320: EMPTY
50321: LIST
50322: LIST
50323: PUSH
50324: LD_INT 0
50326: PUSH
50327: LD_INT 1
50329: NEG
50330: PUSH
50331: EMPTY
50332: LIST
50333: LIST
50334: PUSH
50335: LD_INT 1
50337: PUSH
50338: LD_INT 0
50340: PUSH
50341: EMPTY
50342: LIST
50343: LIST
50344: PUSH
50345: LD_INT 1
50347: PUSH
50348: LD_INT 1
50350: PUSH
50351: EMPTY
50352: LIST
50353: LIST
50354: PUSH
50355: LD_INT 0
50357: PUSH
50358: LD_INT 1
50360: PUSH
50361: EMPTY
50362: LIST
50363: LIST
50364: PUSH
50365: LD_INT 1
50367: NEG
50368: PUSH
50369: LD_INT 0
50371: PUSH
50372: EMPTY
50373: LIST
50374: LIST
50375: PUSH
50376: LD_INT 1
50378: NEG
50379: PUSH
50380: LD_INT 1
50382: NEG
50383: PUSH
50384: EMPTY
50385: LIST
50386: LIST
50387: PUSH
50388: LD_INT 1
50390: NEG
50391: PUSH
50392: LD_INT 2
50394: NEG
50395: PUSH
50396: EMPTY
50397: LIST
50398: LIST
50399: PUSH
50400: LD_INT 2
50402: PUSH
50403: LD_INT 1
50405: PUSH
50406: EMPTY
50407: LIST
50408: LIST
50409: PUSH
50410: LD_INT 2
50412: PUSH
50413: LD_INT 2
50415: PUSH
50416: EMPTY
50417: LIST
50418: LIST
50419: PUSH
50420: LD_INT 1
50422: PUSH
50423: LD_INT 2
50425: PUSH
50426: EMPTY
50427: LIST
50428: LIST
50429: PUSH
50430: LD_INT 2
50432: NEG
50433: PUSH
50434: LD_INT 1
50436: NEG
50437: PUSH
50438: EMPTY
50439: LIST
50440: LIST
50441: PUSH
50442: LD_INT 2
50444: NEG
50445: PUSH
50446: LD_INT 2
50448: NEG
50449: PUSH
50450: EMPTY
50451: LIST
50452: LIST
50453: PUSH
50454: LD_INT 2
50456: NEG
50457: PUSH
50458: LD_INT 3
50460: NEG
50461: PUSH
50462: EMPTY
50463: LIST
50464: LIST
50465: PUSH
50466: LD_INT 3
50468: NEG
50469: PUSH
50470: LD_INT 2
50472: NEG
50473: PUSH
50474: EMPTY
50475: LIST
50476: LIST
50477: PUSH
50478: LD_INT 3
50480: NEG
50481: PUSH
50482: LD_INT 3
50484: NEG
50485: PUSH
50486: EMPTY
50487: LIST
50488: LIST
50489: PUSH
50490: EMPTY
50491: LIST
50492: LIST
50493: LIST
50494: LIST
50495: LIST
50496: LIST
50497: LIST
50498: LIST
50499: LIST
50500: LIST
50501: LIST
50502: LIST
50503: LIST
50504: LIST
50505: LIST
50506: LIST
50507: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50508: LD_ADDR_VAR 0 14
50512: PUSH
50513: LD_INT 0
50515: PUSH
50516: LD_INT 0
50518: PUSH
50519: EMPTY
50520: LIST
50521: LIST
50522: PUSH
50523: LD_INT 0
50525: PUSH
50526: LD_INT 1
50528: NEG
50529: PUSH
50530: EMPTY
50531: LIST
50532: LIST
50533: PUSH
50534: LD_INT 1
50536: PUSH
50537: LD_INT 0
50539: PUSH
50540: EMPTY
50541: LIST
50542: LIST
50543: PUSH
50544: LD_INT 1
50546: PUSH
50547: LD_INT 1
50549: PUSH
50550: EMPTY
50551: LIST
50552: LIST
50553: PUSH
50554: LD_INT 0
50556: PUSH
50557: LD_INT 1
50559: PUSH
50560: EMPTY
50561: LIST
50562: LIST
50563: PUSH
50564: LD_INT 1
50566: NEG
50567: PUSH
50568: LD_INT 0
50570: PUSH
50571: EMPTY
50572: LIST
50573: LIST
50574: PUSH
50575: LD_INT 1
50577: NEG
50578: PUSH
50579: LD_INT 1
50581: NEG
50582: PUSH
50583: EMPTY
50584: LIST
50585: LIST
50586: PUSH
50587: LD_INT 1
50589: NEG
50590: PUSH
50591: LD_INT 2
50593: NEG
50594: PUSH
50595: EMPTY
50596: LIST
50597: LIST
50598: PUSH
50599: LD_INT 0
50601: PUSH
50602: LD_INT 2
50604: NEG
50605: PUSH
50606: EMPTY
50607: LIST
50608: LIST
50609: PUSH
50610: LD_INT 1
50612: PUSH
50613: LD_INT 1
50615: NEG
50616: PUSH
50617: EMPTY
50618: LIST
50619: LIST
50620: PUSH
50621: LD_INT 1
50623: PUSH
50624: LD_INT 2
50626: PUSH
50627: EMPTY
50628: LIST
50629: LIST
50630: PUSH
50631: LD_INT 0
50633: PUSH
50634: LD_INT 2
50636: PUSH
50637: EMPTY
50638: LIST
50639: LIST
50640: PUSH
50641: LD_INT 1
50643: NEG
50644: PUSH
50645: LD_INT 1
50647: PUSH
50648: EMPTY
50649: LIST
50650: LIST
50651: PUSH
50652: LD_INT 1
50654: NEG
50655: PUSH
50656: LD_INT 3
50658: NEG
50659: PUSH
50660: EMPTY
50661: LIST
50662: LIST
50663: PUSH
50664: LD_INT 0
50666: PUSH
50667: LD_INT 3
50669: NEG
50670: PUSH
50671: EMPTY
50672: LIST
50673: LIST
50674: PUSH
50675: LD_INT 1
50677: PUSH
50678: LD_INT 2
50680: NEG
50681: PUSH
50682: EMPTY
50683: LIST
50684: LIST
50685: PUSH
50686: EMPTY
50687: LIST
50688: LIST
50689: LIST
50690: LIST
50691: LIST
50692: LIST
50693: LIST
50694: LIST
50695: LIST
50696: LIST
50697: LIST
50698: LIST
50699: LIST
50700: LIST
50701: LIST
50702: LIST
50703: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50704: LD_ADDR_VAR 0 15
50708: PUSH
50709: LD_INT 0
50711: PUSH
50712: LD_INT 0
50714: PUSH
50715: EMPTY
50716: LIST
50717: LIST
50718: PUSH
50719: LD_INT 0
50721: PUSH
50722: LD_INT 1
50724: NEG
50725: PUSH
50726: EMPTY
50727: LIST
50728: LIST
50729: PUSH
50730: LD_INT 1
50732: PUSH
50733: LD_INT 0
50735: PUSH
50736: EMPTY
50737: LIST
50738: LIST
50739: PUSH
50740: LD_INT 1
50742: PUSH
50743: LD_INT 1
50745: PUSH
50746: EMPTY
50747: LIST
50748: LIST
50749: PUSH
50750: LD_INT 0
50752: PUSH
50753: LD_INT 1
50755: PUSH
50756: EMPTY
50757: LIST
50758: LIST
50759: PUSH
50760: LD_INT 1
50762: NEG
50763: PUSH
50764: LD_INT 0
50766: PUSH
50767: EMPTY
50768: LIST
50769: LIST
50770: PUSH
50771: LD_INT 1
50773: NEG
50774: PUSH
50775: LD_INT 1
50777: NEG
50778: PUSH
50779: EMPTY
50780: LIST
50781: LIST
50782: PUSH
50783: LD_INT 1
50785: PUSH
50786: LD_INT 1
50788: NEG
50789: PUSH
50790: EMPTY
50791: LIST
50792: LIST
50793: PUSH
50794: LD_INT 2
50796: PUSH
50797: LD_INT 0
50799: PUSH
50800: EMPTY
50801: LIST
50802: LIST
50803: PUSH
50804: LD_INT 2
50806: PUSH
50807: LD_INT 1
50809: PUSH
50810: EMPTY
50811: LIST
50812: LIST
50813: PUSH
50814: LD_INT 1
50816: NEG
50817: PUSH
50818: LD_INT 1
50820: PUSH
50821: EMPTY
50822: LIST
50823: LIST
50824: PUSH
50825: LD_INT 2
50827: NEG
50828: PUSH
50829: LD_INT 0
50831: PUSH
50832: EMPTY
50833: LIST
50834: LIST
50835: PUSH
50836: LD_INT 2
50838: NEG
50839: PUSH
50840: LD_INT 1
50842: NEG
50843: PUSH
50844: EMPTY
50845: LIST
50846: LIST
50847: PUSH
50848: LD_INT 2
50850: PUSH
50851: LD_INT 1
50853: NEG
50854: PUSH
50855: EMPTY
50856: LIST
50857: LIST
50858: PUSH
50859: LD_INT 3
50861: PUSH
50862: LD_INT 0
50864: PUSH
50865: EMPTY
50866: LIST
50867: LIST
50868: PUSH
50869: LD_INT 3
50871: PUSH
50872: LD_INT 1
50874: PUSH
50875: EMPTY
50876: LIST
50877: LIST
50878: PUSH
50879: EMPTY
50880: LIST
50881: LIST
50882: LIST
50883: LIST
50884: LIST
50885: LIST
50886: LIST
50887: LIST
50888: LIST
50889: LIST
50890: LIST
50891: LIST
50892: LIST
50893: LIST
50894: LIST
50895: LIST
50896: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50897: LD_ADDR_VAR 0 16
50901: PUSH
50902: LD_INT 0
50904: PUSH
50905: LD_INT 0
50907: PUSH
50908: EMPTY
50909: LIST
50910: LIST
50911: PUSH
50912: LD_INT 0
50914: PUSH
50915: LD_INT 1
50917: NEG
50918: PUSH
50919: EMPTY
50920: LIST
50921: LIST
50922: PUSH
50923: LD_INT 1
50925: PUSH
50926: LD_INT 0
50928: PUSH
50929: EMPTY
50930: LIST
50931: LIST
50932: PUSH
50933: LD_INT 1
50935: PUSH
50936: LD_INT 1
50938: PUSH
50939: EMPTY
50940: LIST
50941: LIST
50942: PUSH
50943: LD_INT 0
50945: PUSH
50946: LD_INT 1
50948: PUSH
50949: EMPTY
50950: LIST
50951: LIST
50952: PUSH
50953: LD_INT 1
50955: NEG
50956: PUSH
50957: LD_INT 0
50959: PUSH
50960: EMPTY
50961: LIST
50962: LIST
50963: PUSH
50964: LD_INT 1
50966: NEG
50967: PUSH
50968: LD_INT 1
50970: NEG
50971: PUSH
50972: EMPTY
50973: LIST
50974: LIST
50975: PUSH
50976: LD_INT 1
50978: NEG
50979: PUSH
50980: LD_INT 2
50982: NEG
50983: PUSH
50984: EMPTY
50985: LIST
50986: LIST
50987: PUSH
50988: LD_INT 2
50990: PUSH
50991: LD_INT 1
50993: PUSH
50994: EMPTY
50995: LIST
50996: LIST
50997: PUSH
50998: LD_INT 2
51000: PUSH
51001: LD_INT 2
51003: PUSH
51004: EMPTY
51005: LIST
51006: LIST
51007: PUSH
51008: LD_INT 1
51010: PUSH
51011: LD_INT 2
51013: PUSH
51014: EMPTY
51015: LIST
51016: LIST
51017: PUSH
51018: LD_INT 2
51020: NEG
51021: PUSH
51022: LD_INT 1
51024: NEG
51025: PUSH
51026: EMPTY
51027: LIST
51028: LIST
51029: PUSH
51030: LD_INT 2
51032: NEG
51033: PUSH
51034: LD_INT 2
51036: NEG
51037: PUSH
51038: EMPTY
51039: LIST
51040: LIST
51041: PUSH
51042: LD_INT 3
51044: PUSH
51045: LD_INT 2
51047: PUSH
51048: EMPTY
51049: LIST
51050: LIST
51051: PUSH
51052: LD_INT 3
51054: PUSH
51055: LD_INT 3
51057: PUSH
51058: EMPTY
51059: LIST
51060: LIST
51061: PUSH
51062: LD_INT 2
51064: PUSH
51065: LD_INT 3
51067: PUSH
51068: EMPTY
51069: LIST
51070: LIST
51071: PUSH
51072: EMPTY
51073: LIST
51074: LIST
51075: LIST
51076: LIST
51077: LIST
51078: LIST
51079: LIST
51080: LIST
51081: LIST
51082: LIST
51083: LIST
51084: LIST
51085: LIST
51086: LIST
51087: LIST
51088: LIST
51089: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51090: LD_ADDR_VAR 0 17
51094: PUSH
51095: LD_INT 0
51097: PUSH
51098: LD_INT 0
51100: PUSH
51101: EMPTY
51102: LIST
51103: LIST
51104: PUSH
51105: LD_INT 0
51107: PUSH
51108: LD_INT 1
51110: NEG
51111: PUSH
51112: EMPTY
51113: LIST
51114: LIST
51115: PUSH
51116: LD_INT 1
51118: PUSH
51119: LD_INT 0
51121: PUSH
51122: EMPTY
51123: LIST
51124: LIST
51125: PUSH
51126: LD_INT 1
51128: PUSH
51129: LD_INT 1
51131: PUSH
51132: EMPTY
51133: LIST
51134: LIST
51135: PUSH
51136: LD_INT 0
51138: PUSH
51139: LD_INT 1
51141: PUSH
51142: EMPTY
51143: LIST
51144: LIST
51145: PUSH
51146: LD_INT 1
51148: NEG
51149: PUSH
51150: LD_INT 0
51152: PUSH
51153: EMPTY
51154: LIST
51155: LIST
51156: PUSH
51157: LD_INT 1
51159: NEG
51160: PUSH
51161: LD_INT 1
51163: NEG
51164: PUSH
51165: EMPTY
51166: LIST
51167: LIST
51168: PUSH
51169: LD_INT 1
51171: NEG
51172: PUSH
51173: LD_INT 2
51175: NEG
51176: PUSH
51177: EMPTY
51178: LIST
51179: LIST
51180: PUSH
51181: LD_INT 0
51183: PUSH
51184: LD_INT 2
51186: NEG
51187: PUSH
51188: EMPTY
51189: LIST
51190: LIST
51191: PUSH
51192: LD_INT 1
51194: PUSH
51195: LD_INT 1
51197: NEG
51198: PUSH
51199: EMPTY
51200: LIST
51201: LIST
51202: PUSH
51203: LD_INT 2
51205: PUSH
51206: LD_INT 0
51208: PUSH
51209: EMPTY
51210: LIST
51211: LIST
51212: PUSH
51213: LD_INT 2
51215: PUSH
51216: LD_INT 1
51218: PUSH
51219: EMPTY
51220: LIST
51221: LIST
51222: PUSH
51223: LD_INT 2
51225: PUSH
51226: LD_INT 2
51228: PUSH
51229: EMPTY
51230: LIST
51231: LIST
51232: PUSH
51233: LD_INT 1
51235: PUSH
51236: LD_INT 2
51238: PUSH
51239: EMPTY
51240: LIST
51241: LIST
51242: PUSH
51243: LD_INT 0
51245: PUSH
51246: LD_INT 2
51248: PUSH
51249: EMPTY
51250: LIST
51251: LIST
51252: PUSH
51253: LD_INT 1
51255: NEG
51256: PUSH
51257: LD_INT 1
51259: PUSH
51260: EMPTY
51261: LIST
51262: LIST
51263: PUSH
51264: LD_INT 2
51266: NEG
51267: PUSH
51268: LD_INT 0
51270: PUSH
51271: EMPTY
51272: LIST
51273: LIST
51274: PUSH
51275: LD_INT 2
51277: NEG
51278: PUSH
51279: LD_INT 1
51281: NEG
51282: PUSH
51283: EMPTY
51284: LIST
51285: LIST
51286: PUSH
51287: LD_INT 2
51289: NEG
51290: PUSH
51291: LD_INT 2
51293: NEG
51294: PUSH
51295: EMPTY
51296: LIST
51297: LIST
51298: PUSH
51299: EMPTY
51300: LIST
51301: LIST
51302: LIST
51303: LIST
51304: LIST
51305: LIST
51306: LIST
51307: LIST
51308: LIST
51309: LIST
51310: LIST
51311: LIST
51312: LIST
51313: LIST
51314: LIST
51315: LIST
51316: LIST
51317: LIST
51318: LIST
51319: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51320: LD_ADDR_VAR 0 18
51324: PUSH
51325: LD_INT 0
51327: PUSH
51328: LD_INT 0
51330: PUSH
51331: EMPTY
51332: LIST
51333: LIST
51334: PUSH
51335: LD_INT 0
51337: PUSH
51338: LD_INT 1
51340: NEG
51341: PUSH
51342: EMPTY
51343: LIST
51344: LIST
51345: PUSH
51346: LD_INT 1
51348: PUSH
51349: LD_INT 0
51351: PUSH
51352: EMPTY
51353: LIST
51354: LIST
51355: PUSH
51356: LD_INT 1
51358: PUSH
51359: LD_INT 1
51361: PUSH
51362: EMPTY
51363: LIST
51364: LIST
51365: PUSH
51366: LD_INT 0
51368: PUSH
51369: LD_INT 1
51371: PUSH
51372: EMPTY
51373: LIST
51374: LIST
51375: PUSH
51376: LD_INT 1
51378: NEG
51379: PUSH
51380: LD_INT 0
51382: PUSH
51383: EMPTY
51384: LIST
51385: LIST
51386: PUSH
51387: LD_INT 1
51389: NEG
51390: PUSH
51391: LD_INT 1
51393: NEG
51394: PUSH
51395: EMPTY
51396: LIST
51397: LIST
51398: PUSH
51399: LD_INT 1
51401: NEG
51402: PUSH
51403: LD_INT 2
51405: NEG
51406: PUSH
51407: EMPTY
51408: LIST
51409: LIST
51410: PUSH
51411: LD_INT 0
51413: PUSH
51414: LD_INT 2
51416: NEG
51417: PUSH
51418: EMPTY
51419: LIST
51420: LIST
51421: PUSH
51422: LD_INT 1
51424: PUSH
51425: LD_INT 1
51427: NEG
51428: PUSH
51429: EMPTY
51430: LIST
51431: LIST
51432: PUSH
51433: LD_INT 2
51435: PUSH
51436: LD_INT 0
51438: PUSH
51439: EMPTY
51440: LIST
51441: LIST
51442: PUSH
51443: LD_INT 2
51445: PUSH
51446: LD_INT 1
51448: PUSH
51449: EMPTY
51450: LIST
51451: LIST
51452: PUSH
51453: LD_INT 2
51455: PUSH
51456: LD_INT 2
51458: PUSH
51459: EMPTY
51460: LIST
51461: LIST
51462: PUSH
51463: LD_INT 1
51465: PUSH
51466: LD_INT 2
51468: PUSH
51469: EMPTY
51470: LIST
51471: LIST
51472: PUSH
51473: LD_INT 0
51475: PUSH
51476: LD_INT 2
51478: PUSH
51479: EMPTY
51480: LIST
51481: LIST
51482: PUSH
51483: LD_INT 1
51485: NEG
51486: PUSH
51487: LD_INT 1
51489: PUSH
51490: EMPTY
51491: LIST
51492: LIST
51493: PUSH
51494: LD_INT 2
51496: NEG
51497: PUSH
51498: LD_INT 0
51500: PUSH
51501: EMPTY
51502: LIST
51503: LIST
51504: PUSH
51505: LD_INT 2
51507: NEG
51508: PUSH
51509: LD_INT 1
51511: NEG
51512: PUSH
51513: EMPTY
51514: LIST
51515: LIST
51516: PUSH
51517: LD_INT 2
51519: NEG
51520: PUSH
51521: LD_INT 2
51523: NEG
51524: PUSH
51525: EMPTY
51526: LIST
51527: LIST
51528: PUSH
51529: EMPTY
51530: LIST
51531: LIST
51532: LIST
51533: LIST
51534: LIST
51535: LIST
51536: LIST
51537: LIST
51538: LIST
51539: LIST
51540: LIST
51541: LIST
51542: LIST
51543: LIST
51544: LIST
51545: LIST
51546: LIST
51547: LIST
51548: LIST
51549: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51550: LD_ADDR_VAR 0 19
51554: PUSH
51555: LD_INT 0
51557: PUSH
51558: LD_INT 0
51560: PUSH
51561: EMPTY
51562: LIST
51563: LIST
51564: PUSH
51565: LD_INT 0
51567: PUSH
51568: LD_INT 1
51570: NEG
51571: PUSH
51572: EMPTY
51573: LIST
51574: LIST
51575: PUSH
51576: LD_INT 1
51578: PUSH
51579: LD_INT 0
51581: PUSH
51582: EMPTY
51583: LIST
51584: LIST
51585: PUSH
51586: LD_INT 1
51588: PUSH
51589: LD_INT 1
51591: PUSH
51592: EMPTY
51593: LIST
51594: LIST
51595: PUSH
51596: LD_INT 0
51598: PUSH
51599: LD_INT 1
51601: PUSH
51602: EMPTY
51603: LIST
51604: LIST
51605: PUSH
51606: LD_INT 1
51608: NEG
51609: PUSH
51610: LD_INT 0
51612: PUSH
51613: EMPTY
51614: LIST
51615: LIST
51616: PUSH
51617: LD_INT 1
51619: NEG
51620: PUSH
51621: LD_INT 1
51623: NEG
51624: PUSH
51625: EMPTY
51626: LIST
51627: LIST
51628: PUSH
51629: LD_INT 1
51631: NEG
51632: PUSH
51633: LD_INT 2
51635: NEG
51636: PUSH
51637: EMPTY
51638: LIST
51639: LIST
51640: PUSH
51641: LD_INT 0
51643: PUSH
51644: LD_INT 2
51646: NEG
51647: PUSH
51648: EMPTY
51649: LIST
51650: LIST
51651: PUSH
51652: LD_INT 1
51654: PUSH
51655: LD_INT 1
51657: NEG
51658: PUSH
51659: EMPTY
51660: LIST
51661: LIST
51662: PUSH
51663: LD_INT 2
51665: PUSH
51666: LD_INT 0
51668: PUSH
51669: EMPTY
51670: LIST
51671: LIST
51672: PUSH
51673: LD_INT 2
51675: PUSH
51676: LD_INT 1
51678: PUSH
51679: EMPTY
51680: LIST
51681: LIST
51682: PUSH
51683: LD_INT 2
51685: PUSH
51686: LD_INT 2
51688: PUSH
51689: EMPTY
51690: LIST
51691: LIST
51692: PUSH
51693: LD_INT 1
51695: PUSH
51696: LD_INT 2
51698: PUSH
51699: EMPTY
51700: LIST
51701: LIST
51702: PUSH
51703: LD_INT 0
51705: PUSH
51706: LD_INT 2
51708: PUSH
51709: EMPTY
51710: LIST
51711: LIST
51712: PUSH
51713: LD_INT 1
51715: NEG
51716: PUSH
51717: LD_INT 1
51719: PUSH
51720: EMPTY
51721: LIST
51722: LIST
51723: PUSH
51724: LD_INT 2
51726: NEG
51727: PUSH
51728: LD_INT 0
51730: PUSH
51731: EMPTY
51732: LIST
51733: LIST
51734: PUSH
51735: LD_INT 2
51737: NEG
51738: PUSH
51739: LD_INT 1
51741: NEG
51742: PUSH
51743: EMPTY
51744: LIST
51745: LIST
51746: PUSH
51747: LD_INT 2
51749: NEG
51750: PUSH
51751: LD_INT 2
51753: NEG
51754: PUSH
51755: EMPTY
51756: LIST
51757: LIST
51758: PUSH
51759: EMPTY
51760: LIST
51761: LIST
51762: LIST
51763: LIST
51764: LIST
51765: LIST
51766: LIST
51767: LIST
51768: LIST
51769: LIST
51770: LIST
51771: LIST
51772: LIST
51773: LIST
51774: LIST
51775: LIST
51776: LIST
51777: LIST
51778: LIST
51779: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51780: LD_ADDR_VAR 0 20
51784: PUSH
51785: LD_INT 0
51787: PUSH
51788: LD_INT 0
51790: PUSH
51791: EMPTY
51792: LIST
51793: LIST
51794: PUSH
51795: LD_INT 0
51797: PUSH
51798: LD_INT 1
51800: NEG
51801: PUSH
51802: EMPTY
51803: LIST
51804: LIST
51805: PUSH
51806: LD_INT 1
51808: PUSH
51809: LD_INT 0
51811: PUSH
51812: EMPTY
51813: LIST
51814: LIST
51815: PUSH
51816: LD_INT 1
51818: PUSH
51819: LD_INT 1
51821: PUSH
51822: EMPTY
51823: LIST
51824: LIST
51825: PUSH
51826: LD_INT 0
51828: PUSH
51829: LD_INT 1
51831: PUSH
51832: EMPTY
51833: LIST
51834: LIST
51835: PUSH
51836: LD_INT 1
51838: NEG
51839: PUSH
51840: LD_INT 0
51842: PUSH
51843: EMPTY
51844: LIST
51845: LIST
51846: PUSH
51847: LD_INT 1
51849: NEG
51850: PUSH
51851: LD_INT 1
51853: NEG
51854: PUSH
51855: EMPTY
51856: LIST
51857: LIST
51858: PUSH
51859: LD_INT 1
51861: NEG
51862: PUSH
51863: LD_INT 2
51865: NEG
51866: PUSH
51867: EMPTY
51868: LIST
51869: LIST
51870: PUSH
51871: LD_INT 0
51873: PUSH
51874: LD_INT 2
51876: NEG
51877: PUSH
51878: EMPTY
51879: LIST
51880: LIST
51881: PUSH
51882: LD_INT 1
51884: PUSH
51885: LD_INT 1
51887: NEG
51888: PUSH
51889: EMPTY
51890: LIST
51891: LIST
51892: PUSH
51893: LD_INT 2
51895: PUSH
51896: LD_INT 0
51898: PUSH
51899: EMPTY
51900: LIST
51901: LIST
51902: PUSH
51903: LD_INT 2
51905: PUSH
51906: LD_INT 1
51908: PUSH
51909: EMPTY
51910: LIST
51911: LIST
51912: PUSH
51913: LD_INT 2
51915: PUSH
51916: LD_INT 2
51918: PUSH
51919: EMPTY
51920: LIST
51921: LIST
51922: PUSH
51923: LD_INT 1
51925: PUSH
51926: LD_INT 2
51928: PUSH
51929: EMPTY
51930: LIST
51931: LIST
51932: PUSH
51933: LD_INT 0
51935: PUSH
51936: LD_INT 2
51938: PUSH
51939: EMPTY
51940: LIST
51941: LIST
51942: PUSH
51943: LD_INT 1
51945: NEG
51946: PUSH
51947: LD_INT 1
51949: PUSH
51950: EMPTY
51951: LIST
51952: LIST
51953: PUSH
51954: LD_INT 2
51956: NEG
51957: PUSH
51958: LD_INT 0
51960: PUSH
51961: EMPTY
51962: LIST
51963: LIST
51964: PUSH
51965: LD_INT 2
51967: NEG
51968: PUSH
51969: LD_INT 1
51971: NEG
51972: PUSH
51973: EMPTY
51974: LIST
51975: LIST
51976: PUSH
51977: LD_INT 2
51979: NEG
51980: PUSH
51981: LD_INT 2
51983: NEG
51984: PUSH
51985: EMPTY
51986: LIST
51987: LIST
51988: PUSH
51989: EMPTY
51990: LIST
51991: LIST
51992: LIST
51993: LIST
51994: LIST
51995: LIST
51996: LIST
51997: LIST
51998: LIST
51999: LIST
52000: LIST
52001: LIST
52002: LIST
52003: LIST
52004: LIST
52005: LIST
52006: LIST
52007: LIST
52008: LIST
52009: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52010: LD_ADDR_VAR 0 21
52014: PUSH
52015: LD_INT 0
52017: PUSH
52018: LD_INT 0
52020: PUSH
52021: EMPTY
52022: LIST
52023: LIST
52024: PUSH
52025: LD_INT 0
52027: PUSH
52028: LD_INT 1
52030: NEG
52031: PUSH
52032: EMPTY
52033: LIST
52034: LIST
52035: PUSH
52036: LD_INT 1
52038: PUSH
52039: LD_INT 0
52041: PUSH
52042: EMPTY
52043: LIST
52044: LIST
52045: PUSH
52046: LD_INT 1
52048: PUSH
52049: LD_INT 1
52051: PUSH
52052: EMPTY
52053: LIST
52054: LIST
52055: PUSH
52056: LD_INT 0
52058: PUSH
52059: LD_INT 1
52061: PUSH
52062: EMPTY
52063: LIST
52064: LIST
52065: PUSH
52066: LD_INT 1
52068: NEG
52069: PUSH
52070: LD_INT 0
52072: PUSH
52073: EMPTY
52074: LIST
52075: LIST
52076: PUSH
52077: LD_INT 1
52079: NEG
52080: PUSH
52081: LD_INT 1
52083: NEG
52084: PUSH
52085: EMPTY
52086: LIST
52087: LIST
52088: PUSH
52089: LD_INT 1
52091: NEG
52092: PUSH
52093: LD_INT 2
52095: NEG
52096: PUSH
52097: EMPTY
52098: LIST
52099: LIST
52100: PUSH
52101: LD_INT 0
52103: PUSH
52104: LD_INT 2
52106: NEG
52107: PUSH
52108: EMPTY
52109: LIST
52110: LIST
52111: PUSH
52112: LD_INT 1
52114: PUSH
52115: LD_INT 1
52117: NEG
52118: PUSH
52119: EMPTY
52120: LIST
52121: LIST
52122: PUSH
52123: LD_INT 2
52125: PUSH
52126: LD_INT 0
52128: PUSH
52129: EMPTY
52130: LIST
52131: LIST
52132: PUSH
52133: LD_INT 2
52135: PUSH
52136: LD_INT 1
52138: PUSH
52139: EMPTY
52140: LIST
52141: LIST
52142: PUSH
52143: LD_INT 2
52145: PUSH
52146: LD_INT 2
52148: PUSH
52149: EMPTY
52150: LIST
52151: LIST
52152: PUSH
52153: LD_INT 1
52155: PUSH
52156: LD_INT 2
52158: PUSH
52159: EMPTY
52160: LIST
52161: LIST
52162: PUSH
52163: LD_INT 0
52165: PUSH
52166: LD_INT 2
52168: PUSH
52169: EMPTY
52170: LIST
52171: LIST
52172: PUSH
52173: LD_INT 1
52175: NEG
52176: PUSH
52177: LD_INT 1
52179: PUSH
52180: EMPTY
52181: LIST
52182: LIST
52183: PUSH
52184: LD_INT 2
52186: NEG
52187: PUSH
52188: LD_INT 0
52190: PUSH
52191: EMPTY
52192: LIST
52193: LIST
52194: PUSH
52195: LD_INT 2
52197: NEG
52198: PUSH
52199: LD_INT 1
52201: NEG
52202: PUSH
52203: EMPTY
52204: LIST
52205: LIST
52206: PUSH
52207: LD_INT 2
52209: NEG
52210: PUSH
52211: LD_INT 2
52213: NEG
52214: PUSH
52215: EMPTY
52216: LIST
52217: LIST
52218: PUSH
52219: EMPTY
52220: LIST
52221: LIST
52222: LIST
52223: LIST
52224: LIST
52225: LIST
52226: LIST
52227: LIST
52228: LIST
52229: LIST
52230: LIST
52231: LIST
52232: LIST
52233: LIST
52234: LIST
52235: LIST
52236: LIST
52237: LIST
52238: LIST
52239: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52240: LD_ADDR_VAR 0 22
52244: PUSH
52245: LD_INT 0
52247: PUSH
52248: LD_INT 0
52250: PUSH
52251: EMPTY
52252: LIST
52253: LIST
52254: PUSH
52255: LD_INT 0
52257: PUSH
52258: LD_INT 1
52260: NEG
52261: PUSH
52262: EMPTY
52263: LIST
52264: LIST
52265: PUSH
52266: LD_INT 1
52268: PUSH
52269: LD_INT 0
52271: PUSH
52272: EMPTY
52273: LIST
52274: LIST
52275: PUSH
52276: LD_INT 1
52278: PUSH
52279: LD_INT 1
52281: PUSH
52282: EMPTY
52283: LIST
52284: LIST
52285: PUSH
52286: LD_INT 0
52288: PUSH
52289: LD_INT 1
52291: PUSH
52292: EMPTY
52293: LIST
52294: LIST
52295: PUSH
52296: LD_INT 1
52298: NEG
52299: PUSH
52300: LD_INT 0
52302: PUSH
52303: EMPTY
52304: LIST
52305: LIST
52306: PUSH
52307: LD_INT 1
52309: NEG
52310: PUSH
52311: LD_INT 1
52313: NEG
52314: PUSH
52315: EMPTY
52316: LIST
52317: LIST
52318: PUSH
52319: LD_INT 1
52321: NEG
52322: PUSH
52323: LD_INT 2
52325: NEG
52326: PUSH
52327: EMPTY
52328: LIST
52329: LIST
52330: PUSH
52331: LD_INT 0
52333: PUSH
52334: LD_INT 2
52336: NEG
52337: PUSH
52338: EMPTY
52339: LIST
52340: LIST
52341: PUSH
52342: LD_INT 1
52344: PUSH
52345: LD_INT 1
52347: NEG
52348: PUSH
52349: EMPTY
52350: LIST
52351: LIST
52352: PUSH
52353: LD_INT 2
52355: PUSH
52356: LD_INT 0
52358: PUSH
52359: EMPTY
52360: LIST
52361: LIST
52362: PUSH
52363: LD_INT 2
52365: PUSH
52366: LD_INT 1
52368: PUSH
52369: EMPTY
52370: LIST
52371: LIST
52372: PUSH
52373: LD_INT 2
52375: PUSH
52376: LD_INT 2
52378: PUSH
52379: EMPTY
52380: LIST
52381: LIST
52382: PUSH
52383: LD_INT 1
52385: PUSH
52386: LD_INT 2
52388: PUSH
52389: EMPTY
52390: LIST
52391: LIST
52392: PUSH
52393: LD_INT 0
52395: PUSH
52396: LD_INT 2
52398: PUSH
52399: EMPTY
52400: LIST
52401: LIST
52402: PUSH
52403: LD_INT 1
52405: NEG
52406: PUSH
52407: LD_INT 1
52409: PUSH
52410: EMPTY
52411: LIST
52412: LIST
52413: PUSH
52414: LD_INT 2
52416: NEG
52417: PUSH
52418: LD_INT 0
52420: PUSH
52421: EMPTY
52422: LIST
52423: LIST
52424: PUSH
52425: LD_INT 2
52427: NEG
52428: PUSH
52429: LD_INT 1
52431: NEG
52432: PUSH
52433: EMPTY
52434: LIST
52435: LIST
52436: PUSH
52437: LD_INT 2
52439: NEG
52440: PUSH
52441: LD_INT 2
52443: NEG
52444: PUSH
52445: EMPTY
52446: LIST
52447: LIST
52448: PUSH
52449: EMPTY
52450: LIST
52451: LIST
52452: LIST
52453: LIST
52454: LIST
52455: LIST
52456: LIST
52457: LIST
52458: LIST
52459: LIST
52460: LIST
52461: LIST
52462: LIST
52463: LIST
52464: LIST
52465: LIST
52466: LIST
52467: LIST
52468: LIST
52469: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
52470: LD_ADDR_VAR 0 23
52474: PUSH
52475: LD_INT 0
52477: PUSH
52478: LD_INT 0
52480: PUSH
52481: EMPTY
52482: LIST
52483: LIST
52484: PUSH
52485: LD_INT 0
52487: PUSH
52488: LD_INT 1
52490: NEG
52491: PUSH
52492: EMPTY
52493: LIST
52494: LIST
52495: PUSH
52496: LD_INT 1
52498: PUSH
52499: LD_INT 0
52501: PUSH
52502: EMPTY
52503: LIST
52504: LIST
52505: PUSH
52506: LD_INT 1
52508: PUSH
52509: LD_INT 1
52511: PUSH
52512: EMPTY
52513: LIST
52514: LIST
52515: PUSH
52516: LD_INT 0
52518: PUSH
52519: LD_INT 1
52521: PUSH
52522: EMPTY
52523: LIST
52524: LIST
52525: PUSH
52526: LD_INT 1
52528: NEG
52529: PUSH
52530: LD_INT 0
52532: PUSH
52533: EMPTY
52534: LIST
52535: LIST
52536: PUSH
52537: LD_INT 1
52539: NEG
52540: PUSH
52541: LD_INT 1
52543: NEG
52544: PUSH
52545: EMPTY
52546: LIST
52547: LIST
52548: PUSH
52549: LD_INT 1
52551: NEG
52552: PUSH
52553: LD_INT 2
52555: NEG
52556: PUSH
52557: EMPTY
52558: LIST
52559: LIST
52560: PUSH
52561: LD_INT 0
52563: PUSH
52564: LD_INT 2
52566: NEG
52567: PUSH
52568: EMPTY
52569: LIST
52570: LIST
52571: PUSH
52572: LD_INT 1
52574: PUSH
52575: LD_INT 1
52577: NEG
52578: PUSH
52579: EMPTY
52580: LIST
52581: LIST
52582: PUSH
52583: LD_INT 2
52585: PUSH
52586: LD_INT 0
52588: PUSH
52589: EMPTY
52590: LIST
52591: LIST
52592: PUSH
52593: LD_INT 2
52595: PUSH
52596: LD_INT 1
52598: PUSH
52599: EMPTY
52600: LIST
52601: LIST
52602: PUSH
52603: LD_INT 2
52605: PUSH
52606: LD_INT 2
52608: PUSH
52609: EMPTY
52610: LIST
52611: LIST
52612: PUSH
52613: LD_INT 1
52615: PUSH
52616: LD_INT 2
52618: PUSH
52619: EMPTY
52620: LIST
52621: LIST
52622: PUSH
52623: LD_INT 0
52625: PUSH
52626: LD_INT 2
52628: PUSH
52629: EMPTY
52630: LIST
52631: LIST
52632: PUSH
52633: LD_INT 1
52635: NEG
52636: PUSH
52637: LD_INT 1
52639: PUSH
52640: EMPTY
52641: LIST
52642: LIST
52643: PUSH
52644: LD_INT 2
52646: NEG
52647: PUSH
52648: LD_INT 0
52650: PUSH
52651: EMPTY
52652: LIST
52653: LIST
52654: PUSH
52655: LD_INT 2
52657: NEG
52658: PUSH
52659: LD_INT 1
52661: NEG
52662: PUSH
52663: EMPTY
52664: LIST
52665: LIST
52666: PUSH
52667: LD_INT 2
52669: NEG
52670: PUSH
52671: LD_INT 2
52673: NEG
52674: PUSH
52675: EMPTY
52676: LIST
52677: LIST
52678: PUSH
52679: LD_INT 2
52681: NEG
52682: PUSH
52683: LD_INT 3
52685: NEG
52686: PUSH
52687: EMPTY
52688: LIST
52689: LIST
52690: PUSH
52691: LD_INT 1
52693: NEG
52694: PUSH
52695: LD_INT 3
52697: NEG
52698: PUSH
52699: EMPTY
52700: LIST
52701: LIST
52702: PUSH
52703: LD_INT 1
52705: PUSH
52706: LD_INT 2
52708: NEG
52709: PUSH
52710: EMPTY
52711: LIST
52712: LIST
52713: PUSH
52714: LD_INT 2
52716: PUSH
52717: LD_INT 1
52719: NEG
52720: PUSH
52721: EMPTY
52722: LIST
52723: LIST
52724: PUSH
52725: EMPTY
52726: LIST
52727: LIST
52728: LIST
52729: LIST
52730: LIST
52731: LIST
52732: LIST
52733: LIST
52734: LIST
52735: LIST
52736: LIST
52737: LIST
52738: LIST
52739: LIST
52740: LIST
52741: LIST
52742: LIST
52743: LIST
52744: LIST
52745: LIST
52746: LIST
52747: LIST
52748: LIST
52749: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
52750: LD_ADDR_VAR 0 24
52754: PUSH
52755: LD_INT 0
52757: PUSH
52758: LD_INT 0
52760: PUSH
52761: EMPTY
52762: LIST
52763: LIST
52764: PUSH
52765: LD_INT 0
52767: PUSH
52768: LD_INT 1
52770: NEG
52771: PUSH
52772: EMPTY
52773: LIST
52774: LIST
52775: PUSH
52776: LD_INT 1
52778: PUSH
52779: LD_INT 0
52781: PUSH
52782: EMPTY
52783: LIST
52784: LIST
52785: PUSH
52786: LD_INT 1
52788: PUSH
52789: LD_INT 1
52791: PUSH
52792: EMPTY
52793: LIST
52794: LIST
52795: PUSH
52796: LD_INT 0
52798: PUSH
52799: LD_INT 1
52801: PUSH
52802: EMPTY
52803: LIST
52804: LIST
52805: PUSH
52806: LD_INT 1
52808: NEG
52809: PUSH
52810: LD_INT 0
52812: PUSH
52813: EMPTY
52814: LIST
52815: LIST
52816: PUSH
52817: LD_INT 1
52819: NEG
52820: PUSH
52821: LD_INT 1
52823: NEG
52824: PUSH
52825: EMPTY
52826: LIST
52827: LIST
52828: PUSH
52829: LD_INT 1
52831: NEG
52832: PUSH
52833: LD_INT 2
52835: NEG
52836: PUSH
52837: EMPTY
52838: LIST
52839: LIST
52840: PUSH
52841: LD_INT 0
52843: PUSH
52844: LD_INT 2
52846: NEG
52847: PUSH
52848: EMPTY
52849: LIST
52850: LIST
52851: PUSH
52852: LD_INT 1
52854: PUSH
52855: LD_INT 1
52857: NEG
52858: PUSH
52859: EMPTY
52860: LIST
52861: LIST
52862: PUSH
52863: LD_INT 2
52865: PUSH
52866: LD_INT 0
52868: PUSH
52869: EMPTY
52870: LIST
52871: LIST
52872: PUSH
52873: LD_INT 2
52875: PUSH
52876: LD_INT 1
52878: PUSH
52879: EMPTY
52880: LIST
52881: LIST
52882: PUSH
52883: LD_INT 2
52885: PUSH
52886: LD_INT 2
52888: PUSH
52889: EMPTY
52890: LIST
52891: LIST
52892: PUSH
52893: LD_INT 1
52895: PUSH
52896: LD_INT 2
52898: PUSH
52899: EMPTY
52900: LIST
52901: LIST
52902: PUSH
52903: LD_INT 0
52905: PUSH
52906: LD_INT 2
52908: PUSH
52909: EMPTY
52910: LIST
52911: LIST
52912: PUSH
52913: LD_INT 1
52915: NEG
52916: PUSH
52917: LD_INT 1
52919: PUSH
52920: EMPTY
52921: LIST
52922: LIST
52923: PUSH
52924: LD_INT 2
52926: NEG
52927: PUSH
52928: LD_INT 0
52930: PUSH
52931: EMPTY
52932: LIST
52933: LIST
52934: PUSH
52935: LD_INT 2
52937: NEG
52938: PUSH
52939: LD_INT 1
52941: NEG
52942: PUSH
52943: EMPTY
52944: LIST
52945: LIST
52946: PUSH
52947: LD_INT 2
52949: NEG
52950: PUSH
52951: LD_INT 2
52953: NEG
52954: PUSH
52955: EMPTY
52956: LIST
52957: LIST
52958: PUSH
52959: LD_INT 1
52961: PUSH
52962: LD_INT 2
52964: NEG
52965: PUSH
52966: EMPTY
52967: LIST
52968: LIST
52969: PUSH
52970: LD_INT 2
52972: PUSH
52973: LD_INT 1
52975: NEG
52976: PUSH
52977: EMPTY
52978: LIST
52979: LIST
52980: PUSH
52981: LD_INT 3
52983: PUSH
52984: LD_INT 1
52986: PUSH
52987: EMPTY
52988: LIST
52989: LIST
52990: PUSH
52991: LD_INT 3
52993: PUSH
52994: LD_INT 2
52996: PUSH
52997: EMPTY
52998: LIST
52999: LIST
53000: PUSH
53001: EMPTY
53002: LIST
53003: LIST
53004: LIST
53005: LIST
53006: LIST
53007: LIST
53008: LIST
53009: LIST
53010: LIST
53011: LIST
53012: LIST
53013: LIST
53014: LIST
53015: LIST
53016: LIST
53017: LIST
53018: LIST
53019: LIST
53020: LIST
53021: LIST
53022: LIST
53023: LIST
53024: LIST
53025: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
53026: LD_ADDR_VAR 0 25
53030: PUSH
53031: LD_INT 0
53033: PUSH
53034: LD_INT 0
53036: PUSH
53037: EMPTY
53038: LIST
53039: LIST
53040: PUSH
53041: LD_INT 0
53043: PUSH
53044: LD_INT 1
53046: NEG
53047: PUSH
53048: EMPTY
53049: LIST
53050: LIST
53051: PUSH
53052: LD_INT 1
53054: PUSH
53055: LD_INT 0
53057: PUSH
53058: EMPTY
53059: LIST
53060: LIST
53061: PUSH
53062: LD_INT 1
53064: PUSH
53065: LD_INT 1
53067: PUSH
53068: EMPTY
53069: LIST
53070: LIST
53071: PUSH
53072: LD_INT 0
53074: PUSH
53075: LD_INT 1
53077: PUSH
53078: EMPTY
53079: LIST
53080: LIST
53081: PUSH
53082: LD_INT 1
53084: NEG
53085: PUSH
53086: LD_INT 0
53088: PUSH
53089: EMPTY
53090: LIST
53091: LIST
53092: PUSH
53093: LD_INT 1
53095: NEG
53096: PUSH
53097: LD_INT 1
53099: NEG
53100: PUSH
53101: EMPTY
53102: LIST
53103: LIST
53104: PUSH
53105: LD_INT 1
53107: NEG
53108: PUSH
53109: LD_INT 2
53111: NEG
53112: PUSH
53113: EMPTY
53114: LIST
53115: LIST
53116: PUSH
53117: LD_INT 0
53119: PUSH
53120: LD_INT 2
53122: NEG
53123: PUSH
53124: EMPTY
53125: LIST
53126: LIST
53127: PUSH
53128: LD_INT 1
53130: PUSH
53131: LD_INT 1
53133: NEG
53134: PUSH
53135: EMPTY
53136: LIST
53137: LIST
53138: PUSH
53139: LD_INT 2
53141: PUSH
53142: LD_INT 0
53144: PUSH
53145: EMPTY
53146: LIST
53147: LIST
53148: PUSH
53149: LD_INT 2
53151: PUSH
53152: LD_INT 1
53154: PUSH
53155: EMPTY
53156: LIST
53157: LIST
53158: PUSH
53159: LD_INT 2
53161: PUSH
53162: LD_INT 2
53164: PUSH
53165: EMPTY
53166: LIST
53167: LIST
53168: PUSH
53169: LD_INT 1
53171: PUSH
53172: LD_INT 2
53174: PUSH
53175: EMPTY
53176: LIST
53177: LIST
53178: PUSH
53179: LD_INT 0
53181: PUSH
53182: LD_INT 2
53184: PUSH
53185: EMPTY
53186: LIST
53187: LIST
53188: PUSH
53189: LD_INT 1
53191: NEG
53192: PUSH
53193: LD_INT 1
53195: PUSH
53196: EMPTY
53197: LIST
53198: LIST
53199: PUSH
53200: LD_INT 2
53202: NEG
53203: PUSH
53204: LD_INT 0
53206: PUSH
53207: EMPTY
53208: LIST
53209: LIST
53210: PUSH
53211: LD_INT 2
53213: NEG
53214: PUSH
53215: LD_INT 1
53217: NEG
53218: PUSH
53219: EMPTY
53220: LIST
53221: LIST
53222: PUSH
53223: LD_INT 2
53225: NEG
53226: PUSH
53227: LD_INT 2
53229: NEG
53230: PUSH
53231: EMPTY
53232: LIST
53233: LIST
53234: PUSH
53235: LD_INT 3
53237: PUSH
53238: LD_INT 1
53240: PUSH
53241: EMPTY
53242: LIST
53243: LIST
53244: PUSH
53245: LD_INT 3
53247: PUSH
53248: LD_INT 2
53250: PUSH
53251: EMPTY
53252: LIST
53253: LIST
53254: PUSH
53255: LD_INT 2
53257: PUSH
53258: LD_INT 3
53260: PUSH
53261: EMPTY
53262: LIST
53263: LIST
53264: PUSH
53265: LD_INT 1
53267: PUSH
53268: LD_INT 3
53270: PUSH
53271: EMPTY
53272: LIST
53273: LIST
53274: PUSH
53275: EMPTY
53276: LIST
53277: LIST
53278: LIST
53279: LIST
53280: LIST
53281: LIST
53282: LIST
53283: LIST
53284: LIST
53285: LIST
53286: LIST
53287: LIST
53288: LIST
53289: LIST
53290: LIST
53291: LIST
53292: LIST
53293: LIST
53294: LIST
53295: LIST
53296: LIST
53297: LIST
53298: LIST
53299: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
53300: LD_ADDR_VAR 0 26
53304: PUSH
53305: LD_INT 0
53307: PUSH
53308: LD_INT 0
53310: PUSH
53311: EMPTY
53312: LIST
53313: LIST
53314: PUSH
53315: LD_INT 0
53317: PUSH
53318: LD_INT 1
53320: NEG
53321: PUSH
53322: EMPTY
53323: LIST
53324: LIST
53325: PUSH
53326: LD_INT 1
53328: PUSH
53329: LD_INT 0
53331: PUSH
53332: EMPTY
53333: LIST
53334: LIST
53335: PUSH
53336: LD_INT 1
53338: PUSH
53339: LD_INT 1
53341: PUSH
53342: EMPTY
53343: LIST
53344: LIST
53345: PUSH
53346: LD_INT 0
53348: PUSH
53349: LD_INT 1
53351: PUSH
53352: EMPTY
53353: LIST
53354: LIST
53355: PUSH
53356: LD_INT 1
53358: NEG
53359: PUSH
53360: LD_INT 0
53362: PUSH
53363: EMPTY
53364: LIST
53365: LIST
53366: PUSH
53367: LD_INT 1
53369: NEG
53370: PUSH
53371: LD_INT 1
53373: NEG
53374: PUSH
53375: EMPTY
53376: LIST
53377: LIST
53378: PUSH
53379: LD_INT 1
53381: NEG
53382: PUSH
53383: LD_INT 2
53385: NEG
53386: PUSH
53387: EMPTY
53388: LIST
53389: LIST
53390: PUSH
53391: LD_INT 0
53393: PUSH
53394: LD_INT 2
53396: NEG
53397: PUSH
53398: EMPTY
53399: LIST
53400: LIST
53401: PUSH
53402: LD_INT 1
53404: PUSH
53405: LD_INT 1
53407: NEG
53408: PUSH
53409: EMPTY
53410: LIST
53411: LIST
53412: PUSH
53413: LD_INT 2
53415: PUSH
53416: LD_INT 0
53418: PUSH
53419: EMPTY
53420: LIST
53421: LIST
53422: PUSH
53423: LD_INT 2
53425: PUSH
53426: LD_INT 1
53428: PUSH
53429: EMPTY
53430: LIST
53431: LIST
53432: PUSH
53433: LD_INT 2
53435: PUSH
53436: LD_INT 2
53438: PUSH
53439: EMPTY
53440: LIST
53441: LIST
53442: PUSH
53443: LD_INT 1
53445: PUSH
53446: LD_INT 2
53448: PUSH
53449: EMPTY
53450: LIST
53451: LIST
53452: PUSH
53453: LD_INT 0
53455: PUSH
53456: LD_INT 2
53458: PUSH
53459: EMPTY
53460: LIST
53461: LIST
53462: PUSH
53463: LD_INT 1
53465: NEG
53466: PUSH
53467: LD_INT 1
53469: PUSH
53470: EMPTY
53471: LIST
53472: LIST
53473: PUSH
53474: LD_INT 2
53476: NEG
53477: PUSH
53478: LD_INT 0
53480: PUSH
53481: EMPTY
53482: LIST
53483: LIST
53484: PUSH
53485: LD_INT 2
53487: NEG
53488: PUSH
53489: LD_INT 1
53491: NEG
53492: PUSH
53493: EMPTY
53494: LIST
53495: LIST
53496: PUSH
53497: LD_INT 2
53499: NEG
53500: PUSH
53501: LD_INT 2
53503: NEG
53504: PUSH
53505: EMPTY
53506: LIST
53507: LIST
53508: PUSH
53509: LD_INT 2
53511: PUSH
53512: LD_INT 3
53514: PUSH
53515: EMPTY
53516: LIST
53517: LIST
53518: PUSH
53519: LD_INT 1
53521: PUSH
53522: LD_INT 3
53524: PUSH
53525: EMPTY
53526: LIST
53527: LIST
53528: PUSH
53529: LD_INT 1
53531: NEG
53532: PUSH
53533: LD_INT 2
53535: PUSH
53536: EMPTY
53537: LIST
53538: LIST
53539: PUSH
53540: LD_INT 2
53542: NEG
53543: PUSH
53544: LD_INT 1
53546: PUSH
53547: EMPTY
53548: LIST
53549: LIST
53550: PUSH
53551: EMPTY
53552: LIST
53553: LIST
53554: LIST
53555: LIST
53556: LIST
53557: LIST
53558: LIST
53559: LIST
53560: LIST
53561: LIST
53562: LIST
53563: LIST
53564: LIST
53565: LIST
53566: LIST
53567: LIST
53568: LIST
53569: LIST
53570: LIST
53571: LIST
53572: LIST
53573: LIST
53574: LIST
53575: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
53576: LD_ADDR_VAR 0 27
53580: PUSH
53581: LD_INT 0
53583: PUSH
53584: LD_INT 0
53586: PUSH
53587: EMPTY
53588: LIST
53589: LIST
53590: PUSH
53591: LD_INT 0
53593: PUSH
53594: LD_INT 1
53596: NEG
53597: PUSH
53598: EMPTY
53599: LIST
53600: LIST
53601: PUSH
53602: LD_INT 1
53604: PUSH
53605: LD_INT 0
53607: PUSH
53608: EMPTY
53609: LIST
53610: LIST
53611: PUSH
53612: LD_INT 1
53614: PUSH
53615: LD_INT 1
53617: PUSH
53618: EMPTY
53619: LIST
53620: LIST
53621: PUSH
53622: LD_INT 0
53624: PUSH
53625: LD_INT 1
53627: PUSH
53628: EMPTY
53629: LIST
53630: LIST
53631: PUSH
53632: LD_INT 1
53634: NEG
53635: PUSH
53636: LD_INT 0
53638: PUSH
53639: EMPTY
53640: LIST
53641: LIST
53642: PUSH
53643: LD_INT 1
53645: NEG
53646: PUSH
53647: LD_INT 1
53649: NEG
53650: PUSH
53651: EMPTY
53652: LIST
53653: LIST
53654: PUSH
53655: LD_INT 1
53657: NEG
53658: PUSH
53659: LD_INT 2
53661: NEG
53662: PUSH
53663: EMPTY
53664: LIST
53665: LIST
53666: PUSH
53667: LD_INT 0
53669: PUSH
53670: LD_INT 2
53672: NEG
53673: PUSH
53674: EMPTY
53675: LIST
53676: LIST
53677: PUSH
53678: LD_INT 1
53680: PUSH
53681: LD_INT 1
53683: NEG
53684: PUSH
53685: EMPTY
53686: LIST
53687: LIST
53688: PUSH
53689: LD_INT 2
53691: PUSH
53692: LD_INT 0
53694: PUSH
53695: EMPTY
53696: LIST
53697: LIST
53698: PUSH
53699: LD_INT 2
53701: PUSH
53702: LD_INT 1
53704: PUSH
53705: EMPTY
53706: LIST
53707: LIST
53708: PUSH
53709: LD_INT 2
53711: PUSH
53712: LD_INT 2
53714: PUSH
53715: EMPTY
53716: LIST
53717: LIST
53718: PUSH
53719: LD_INT 1
53721: PUSH
53722: LD_INT 2
53724: PUSH
53725: EMPTY
53726: LIST
53727: LIST
53728: PUSH
53729: LD_INT 0
53731: PUSH
53732: LD_INT 2
53734: PUSH
53735: EMPTY
53736: LIST
53737: LIST
53738: PUSH
53739: LD_INT 1
53741: NEG
53742: PUSH
53743: LD_INT 1
53745: PUSH
53746: EMPTY
53747: LIST
53748: LIST
53749: PUSH
53750: LD_INT 2
53752: NEG
53753: PUSH
53754: LD_INT 0
53756: PUSH
53757: EMPTY
53758: LIST
53759: LIST
53760: PUSH
53761: LD_INT 2
53763: NEG
53764: PUSH
53765: LD_INT 1
53767: NEG
53768: PUSH
53769: EMPTY
53770: LIST
53771: LIST
53772: PUSH
53773: LD_INT 2
53775: NEG
53776: PUSH
53777: LD_INT 2
53779: NEG
53780: PUSH
53781: EMPTY
53782: LIST
53783: LIST
53784: PUSH
53785: LD_INT 1
53787: NEG
53788: PUSH
53789: LD_INT 2
53791: PUSH
53792: EMPTY
53793: LIST
53794: LIST
53795: PUSH
53796: LD_INT 2
53798: NEG
53799: PUSH
53800: LD_INT 1
53802: PUSH
53803: EMPTY
53804: LIST
53805: LIST
53806: PUSH
53807: LD_INT 3
53809: NEG
53810: PUSH
53811: LD_INT 1
53813: NEG
53814: PUSH
53815: EMPTY
53816: LIST
53817: LIST
53818: PUSH
53819: LD_INT 3
53821: NEG
53822: PUSH
53823: LD_INT 2
53825: NEG
53826: PUSH
53827: EMPTY
53828: LIST
53829: LIST
53830: PUSH
53831: EMPTY
53832: LIST
53833: LIST
53834: LIST
53835: LIST
53836: LIST
53837: LIST
53838: LIST
53839: LIST
53840: LIST
53841: LIST
53842: LIST
53843: LIST
53844: LIST
53845: LIST
53846: LIST
53847: LIST
53848: LIST
53849: LIST
53850: LIST
53851: LIST
53852: LIST
53853: LIST
53854: LIST
53855: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
53856: LD_ADDR_VAR 0 28
53860: PUSH
53861: LD_INT 0
53863: PUSH
53864: LD_INT 0
53866: PUSH
53867: EMPTY
53868: LIST
53869: LIST
53870: PUSH
53871: LD_INT 0
53873: PUSH
53874: LD_INT 1
53876: NEG
53877: PUSH
53878: EMPTY
53879: LIST
53880: LIST
53881: PUSH
53882: LD_INT 1
53884: PUSH
53885: LD_INT 0
53887: PUSH
53888: EMPTY
53889: LIST
53890: LIST
53891: PUSH
53892: LD_INT 1
53894: PUSH
53895: LD_INT 1
53897: PUSH
53898: EMPTY
53899: LIST
53900: LIST
53901: PUSH
53902: LD_INT 0
53904: PUSH
53905: LD_INT 1
53907: PUSH
53908: EMPTY
53909: LIST
53910: LIST
53911: PUSH
53912: LD_INT 1
53914: NEG
53915: PUSH
53916: LD_INT 0
53918: PUSH
53919: EMPTY
53920: LIST
53921: LIST
53922: PUSH
53923: LD_INT 1
53925: NEG
53926: PUSH
53927: LD_INT 1
53929: NEG
53930: PUSH
53931: EMPTY
53932: LIST
53933: LIST
53934: PUSH
53935: LD_INT 1
53937: NEG
53938: PUSH
53939: LD_INT 2
53941: NEG
53942: PUSH
53943: EMPTY
53944: LIST
53945: LIST
53946: PUSH
53947: LD_INT 0
53949: PUSH
53950: LD_INT 2
53952: NEG
53953: PUSH
53954: EMPTY
53955: LIST
53956: LIST
53957: PUSH
53958: LD_INT 1
53960: PUSH
53961: LD_INT 1
53963: NEG
53964: PUSH
53965: EMPTY
53966: LIST
53967: LIST
53968: PUSH
53969: LD_INT 2
53971: PUSH
53972: LD_INT 0
53974: PUSH
53975: EMPTY
53976: LIST
53977: LIST
53978: PUSH
53979: LD_INT 2
53981: PUSH
53982: LD_INT 1
53984: PUSH
53985: EMPTY
53986: LIST
53987: LIST
53988: PUSH
53989: LD_INT 2
53991: PUSH
53992: LD_INT 2
53994: PUSH
53995: EMPTY
53996: LIST
53997: LIST
53998: PUSH
53999: LD_INT 1
54001: PUSH
54002: LD_INT 2
54004: PUSH
54005: EMPTY
54006: LIST
54007: LIST
54008: PUSH
54009: LD_INT 0
54011: PUSH
54012: LD_INT 2
54014: PUSH
54015: EMPTY
54016: LIST
54017: LIST
54018: PUSH
54019: LD_INT 1
54021: NEG
54022: PUSH
54023: LD_INT 1
54025: PUSH
54026: EMPTY
54027: LIST
54028: LIST
54029: PUSH
54030: LD_INT 2
54032: NEG
54033: PUSH
54034: LD_INT 0
54036: PUSH
54037: EMPTY
54038: LIST
54039: LIST
54040: PUSH
54041: LD_INT 2
54043: NEG
54044: PUSH
54045: LD_INT 1
54047: NEG
54048: PUSH
54049: EMPTY
54050: LIST
54051: LIST
54052: PUSH
54053: LD_INT 2
54055: NEG
54056: PUSH
54057: LD_INT 2
54059: NEG
54060: PUSH
54061: EMPTY
54062: LIST
54063: LIST
54064: PUSH
54065: LD_INT 2
54067: NEG
54068: PUSH
54069: LD_INT 3
54071: NEG
54072: PUSH
54073: EMPTY
54074: LIST
54075: LIST
54076: PUSH
54077: LD_INT 1
54079: NEG
54080: PUSH
54081: LD_INT 3
54083: NEG
54084: PUSH
54085: EMPTY
54086: LIST
54087: LIST
54088: PUSH
54089: LD_INT 3
54091: NEG
54092: PUSH
54093: LD_INT 1
54095: NEG
54096: PUSH
54097: EMPTY
54098: LIST
54099: LIST
54100: PUSH
54101: LD_INT 3
54103: NEG
54104: PUSH
54105: LD_INT 2
54107: NEG
54108: PUSH
54109: EMPTY
54110: LIST
54111: LIST
54112: PUSH
54113: EMPTY
54114: LIST
54115: LIST
54116: LIST
54117: LIST
54118: LIST
54119: LIST
54120: LIST
54121: LIST
54122: LIST
54123: LIST
54124: LIST
54125: LIST
54126: LIST
54127: LIST
54128: LIST
54129: LIST
54130: LIST
54131: LIST
54132: LIST
54133: LIST
54134: LIST
54135: LIST
54136: LIST
54137: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
54138: LD_ADDR_VAR 0 29
54142: PUSH
54143: LD_INT 0
54145: PUSH
54146: LD_INT 0
54148: PUSH
54149: EMPTY
54150: LIST
54151: LIST
54152: PUSH
54153: LD_INT 0
54155: PUSH
54156: LD_INT 1
54158: NEG
54159: PUSH
54160: EMPTY
54161: LIST
54162: LIST
54163: PUSH
54164: LD_INT 1
54166: PUSH
54167: LD_INT 0
54169: PUSH
54170: EMPTY
54171: LIST
54172: LIST
54173: PUSH
54174: LD_INT 1
54176: PUSH
54177: LD_INT 1
54179: PUSH
54180: EMPTY
54181: LIST
54182: LIST
54183: PUSH
54184: LD_INT 0
54186: PUSH
54187: LD_INT 1
54189: PUSH
54190: EMPTY
54191: LIST
54192: LIST
54193: PUSH
54194: LD_INT 1
54196: NEG
54197: PUSH
54198: LD_INT 0
54200: PUSH
54201: EMPTY
54202: LIST
54203: LIST
54204: PUSH
54205: LD_INT 1
54207: NEG
54208: PUSH
54209: LD_INT 1
54211: NEG
54212: PUSH
54213: EMPTY
54214: LIST
54215: LIST
54216: PUSH
54217: LD_INT 1
54219: NEG
54220: PUSH
54221: LD_INT 2
54223: NEG
54224: PUSH
54225: EMPTY
54226: LIST
54227: LIST
54228: PUSH
54229: LD_INT 0
54231: PUSH
54232: LD_INT 2
54234: NEG
54235: PUSH
54236: EMPTY
54237: LIST
54238: LIST
54239: PUSH
54240: LD_INT 1
54242: PUSH
54243: LD_INT 1
54245: NEG
54246: PUSH
54247: EMPTY
54248: LIST
54249: LIST
54250: PUSH
54251: LD_INT 2
54253: PUSH
54254: LD_INT 0
54256: PUSH
54257: EMPTY
54258: LIST
54259: LIST
54260: PUSH
54261: LD_INT 2
54263: PUSH
54264: LD_INT 1
54266: PUSH
54267: EMPTY
54268: LIST
54269: LIST
54270: PUSH
54271: LD_INT 1
54273: PUSH
54274: LD_INT 2
54276: PUSH
54277: EMPTY
54278: LIST
54279: LIST
54280: PUSH
54281: LD_INT 0
54283: PUSH
54284: LD_INT 2
54286: PUSH
54287: EMPTY
54288: LIST
54289: LIST
54290: PUSH
54291: LD_INT 1
54293: NEG
54294: PUSH
54295: LD_INT 1
54297: PUSH
54298: EMPTY
54299: LIST
54300: LIST
54301: PUSH
54302: LD_INT 2
54304: NEG
54305: PUSH
54306: LD_INT 1
54308: NEG
54309: PUSH
54310: EMPTY
54311: LIST
54312: LIST
54313: PUSH
54314: LD_INT 2
54316: NEG
54317: PUSH
54318: LD_INT 2
54320: NEG
54321: PUSH
54322: EMPTY
54323: LIST
54324: LIST
54325: PUSH
54326: LD_INT 2
54328: NEG
54329: PUSH
54330: LD_INT 3
54332: NEG
54333: PUSH
54334: EMPTY
54335: LIST
54336: LIST
54337: PUSH
54338: LD_INT 2
54340: PUSH
54341: LD_INT 1
54343: NEG
54344: PUSH
54345: EMPTY
54346: LIST
54347: LIST
54348: PUSH
54349: LD_INT 3
54351: PUSH
54352: LD_INT 1
54354: PUSH
54355: EMPTY
54356: LIST
54357: LIST
54358: PUSH
54359: LD_INT 1
54361: PUSH
54362: LD_INT 3
54364: PUSH
54365: EMPTY
54366: LIST
54367: LIST
54368: PUSH
54369: LD_INT 1
54371: NEG
54372: PUSH
54373: LD_INT 2
54375: PUSH
54376: EMPTY
54377: LIST
54378: LIST
54379: PUSH
54380: LD_INT 3
54382: NEG
54383: PUSH
54384: LD_INT 2
54386: NEG
54387: PUSH
54388: EMPTY
54389: LIST
54390: LIST
54391: PUSH
54392: EMPTY
54393: LIST
54394: LIST
54395: LIST
54396: LIST
54397: LIST
54398: LIST
54399: LIST
54400: LIST
54401: LIST
54402: LIST
54403: LIST
54404: LIST
54405: LIST
54406: LIST
54407: LIST
54408: LIST
54409: LIST
54410: LIST
54411: LIST
54412: LIST
54413: LIST
54414: LIST
54415: LIST
54416: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54417: LD_ADDR_VAR 0 30
54421: PUSH
54422: LD_INT 0
54424: PUSH
54425: LD_INT 0
54427: PUSH
54428: EMPTY
54429: LIST
54430: LIST
54431: PUSH
54432: LD_INT 0
54434: PUSH
54435: LD_INT 1
54437: NEG
54438: PUSH
54439: EMPTY
54440: LIST
54441: LIST
54442: PUSH
54443: LD_INT 1
54445: PUSH
54446: LD_INT 0
54448: PUSH
54449: EMPTY
54450: LIST
54451: LIST
54452: PUSH
54453: LD_INT 1
54455: PUSH
54456: LD_INT 1
54458: PUSH
54459: EMPTY
54460: LIST
54461: LIST
54462: PUSH
54463: LD_INT 0
54465: PUSH
54466: LD_INT 1
54468: PUSH
54469: EMPTY
54470: LIST
54471: LIST
54472: PUSH
54473: LD_INT 1
54475: NEG
54476: PUSH
54477: LD_INT 0
54479: PUSH
54480: EMPTY
54481: LIST
54482: LIST
54483: PUSH
54484: LD_INT 1
54486: NEG
54487: PUSH
54488: LD_INT 1
54490: NEG
54491: PUSH
54492: EMPTY
54493: LIST
54494: LIST
54495: PUSH
54496: LD_INT 1
54498: NEG
54499: PUSH
54500: LD_INT 2
54502: NEG
54503: PUSH
54504: EMPTY
54505: LIST
54506: LIST
54507: PUSH
54508: LD_INT 0
54510: PUSH
54511: LD_INT 2
54513: NEG
54514: PUSH
54515: EMPTY
54516: LIST
54517: LIST
54518: PUSH
54519: LD_INT 1
54521: PUSH
54522: LD_INT 1
54524: NEG
54525: PUSH
54526: EMPTY
54527: LIST
54528: LIST
54529: PUSH
54530: LD_INT 2
54532: PUSH
54533: LD_INT 0
54535: PUSH
54536: EMPTY
54537: LIST
54538: LIST
54539: PUSH
54540: LD_INT 2
54542: PUSH
54543: LD_INT 1
54545: PUSH
54546: EMPTY
54547: LIST
54548: LIST
54549: PUSH
54550: LD_INT 2
54552: PUSH
54553: LD_INT 2
54555: PUSH
54556: EMPTY
54557: LIST
54558: LIST
54559: PUSH
54560: LD_INT 1
54562: PUSH
54563: LD_INT 2
54565: PUSH
54566: EMPTY
54567: LIST
54568: LIST
54569: PUSH
54570: LD_INT 1
54572: NEG
54573: PUSH
54574: LD_INT 1
54576: PUSH
54577: EMPTY
54578: LIST
54579: LIST
54580: PUSH
54581: LD_INT 2
54583: NEG
54584: PUSH
54585: LD_INT 0
54587: PUSH
54588: EMPTY
54589: LIST
54590: LIST
54591: PUSH
54592: LD_INT 2
54594: NEG
54595: PUSH
54596: LD_INT 1
54598: NEG
54599: PUSH
54600: EMPTY
54601: LIST
54602: LIST
54603: PUSH
54604: LD_INT 1
54606: NEG
54607: PUSH
54608: LD_INT 3
54610: NEG
54611: PUSH
54612: EMPTY
54613: LIST
54614: LIST
54615: PUSH
54616: LD_INT 1
54618: PUSH
54619: LD_INT 2
54621: NEG
54622: PUSH
54623: EMPTY
54624: LIST
54625: LIST
54626: PUSH
54627: LD_INT 3
54629: PUSH
54630: LD_INT 2
54632: PUSH
54633: EMPTY
54634: LIST
54635: LIST
54636: PUSH
54637: LD_INT 2
54639: PUSH
54640: LD_INT 3
54642: PUSH
54643: EMPTY
54644: LIST
54645: LIST
54646: PUSH
54647: LD_INT 2
54649: NEG
54650: PUSH
54651: LD_INT 1
54653: PUSH
54654: EMPTY
54655: LIST
54656: LIST
54657: PUSH
54658: LD_INT 3
54660: NEG
54661: PUSH
54662: LD_INT 1
54664: NEG
54665: PUSH
54666: EMPTY
54667: LIST
54668: LIST
54669: PUSH
54670: EMPTY
54671: LIST
54672: LIST
54673: LIST
54674: LIST
54675: LIST
54676: LIST
54677: LIST
54678: LIST
54679: LIST
54680: LIST
54681: LIST
54682: LIST
54683: LIST
54684: LIST
54685: LIST
54686: LIST
54687: LIST
54688: LIST
54689: LIST
54690: LIST
54691: LIST
54692: LIST
54693: LIST
54694: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
54695: LD_ADDR_VAR 0 31
54699: PUSH
54700: LD_INT 0
54702: PUSH
54703: LD_INT 0
54705: PUSH
54706: EMPTY
54707: LIST
54708: LIST
54709: PUSH
54710: LD_INT 0
54712: PUSH
54713: LD_INT 1
54715: NEG
54716: PUSH
54717: EMPTY
54718: LIST
54719: LIST
54720: PUSH
54721: LD_INT 1
54723: PUSH
54724: LD_INT 0
54726: PUSH
54727: EMPTY
54728: LIST
54729: LIST
54730: PUSH
54731: LD_INT 1
54733: PUSH
54734: LD_INT 1
54736: PUSH
54737: EMPTY
54738: LIST
54739: LIST
54740: PUSH
54741: LD_INT 0
54743: PUSH
54744: LD_INT 1
54746: PUSH
54747: EMPTY
54748: LIST
54749: LIST
54750: PUSH
54751: LD_INT 1
54753: NEG
54754: PUSH
54755: LD_INT 0
54757: PUSH
54758: EMPTY
54759: LIST
54760: LIST
54761: PUSH
54762: LD_INT 1
54764: NEG
54765: PUSH
54766: LD_INT 1
54768: NEG
54769: PUSH
54770: EMPTY
54771: LIST
54772: LIST
54773: PUSH
54774: LD_INT 1
54776: NEG
54777: PUSH
54778: LD_INT 2
54780: NEG
54781: PUSH
54782: EMPTY
54783: LIST
54784: LIST
54785: PUSH
54786: LD_INT 1
54788: PUSH
54789: LD_INT 1
54791: NEG
54792: PUSH
54793: EMPTY
54794: LIST
54795: LIST
54796: PUSH
54797: LD_INT 2
54799: PUSH
54800: LD_INT 0
54802: PUSH
54803: EMPTY
54804: LIST
54805: LIST
54806: PUSH
54807: LD_INT 2
54809: PUSH
54810: LD_INT 1
54812: PUSH
54813: EMPTY
54814: LIST
54815: LIST
54816: PUSH
54817: LD_INT 2
54819: PUSH
54820: LD_INT 2
54822: PUSH
54823: EMPTY
54824: LIST
54825: LIST
54826: PUSH
54827: LD_INT 1
54829: PUSH
54830: LD_INT 2
54832: PUSH
54833: EMPTY
54834: LIST
54835: LIST
54836: PUSH
54837: LD_INT 0
54839: PUSH
54840: LD_INT 2
54842: PUSH
54843: EMPTY
54844: LIST
54845: LIST
54846: PUSH
54847: LD_INT 1
54849: NEG
54850: PUSH
54851: LD_INT 1
54853: PUSH
54854: EMPTY
54855: LIST
54856: LIST
54857: PUSH
54858: LD_INT 2
54860: NEG
54861: PUSH
54862: LD_INT 1
54864: NEG
54865: PUSH
54866: EMPTY
54867: LIST
54868: LIST
54869: PUSH
54870: LD_INT 2
54872: NEG
54873: PUSH
54874: LD_INT 2
54876: NEG
54877: PUSH
54878: EMPTY
54879: LIST
54880: LIST
54881: PUSH
54882: LD_INT 2
54884: NEG
54885: PUSH
54886: LD_INT 3
54888: NEG
54889: PUSH
54890: EMPTY
54891: LIST
54892: LIST
54893: PUSH
54894: LD_INT 2
54896: PUSH
54897: LD_INT 1
54899: NEG
54900: PUSH
54901: EMPTY
54902: LIST
54903: LIST
54904: PUSH
54905: LD_INT 3
54907: PUSH
54908: LD_INT 1
54910: PUSH
54911: EMPTY
54912: LIST
54913: LIST
54914: PUSH
54915: LD_INT 1
54917: PUSH
54918: LD_INT 3
54920: PUSH
54921: EMPTY
54922: LIST
54923: LIST
54924: PUSH
54925: LD_INT 1
54927: NEG
54928: PUSH
54929: LD_INT 2
54931: PUSH
54932: EMPTY
54933: LIST
54934: LIST
54935: PUSH
54936: LD_INT 3
54938: NEG
54939: PUSH
54940: LD_INT 2
54942: NEG
54943: PUSH
54944: EMPTY
54945: LIST
54946: LIST
54947: PUSH
54948: EMPTY
54949: LIST
54950: LIST
54951: LIST
54952: LIST
54953: LIST
54954: LIST
54955: LIST
54956: LIST
54957: LIST
54958: LIST
54959: LIST
54960: LIST
54961: LIST
54962: LIST
54963: LIST
54964: LIST
54965: LIST
54966: LIST
54967: LIST
54968: LIST
54969: LIST
54970: LIST
54971: LIST
54972: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54973: LD_ADDR_VAR 0 32
54977: PUSH
54978: LD_INT 0
54980: PUSH
54981: LD_INT 0
54983: PUSH
54984: EMPTY
54985: LIST
54986: LIST
54987: PUSH
54988: LD_INT 0
54990: PUSH
54991: LD_INT 1
54993: NEG
54994: PUSH
54995: EMPTY
54996: LIST
54997: LIST
54998: PUSH
54999: LD_INT 1
55001: PUSH
55002: LD_INT 0
55004: PUSH
55005: EMPTY
55006: LIST
55007: LIST
55008: PUSH
55009: LD_INT 1
55011: PUSH
55012: LD_INT 1
55014: PUSH
55015: EMPTY
55016: LIST
55017: LIST
55018: PUSH
55019: LD_INT 0
55021: PUSH
55022: LD_INT 1
55024: PUSH
55025: EMPTY
55026: LIST
55027: LIST
55028: PUSH
55029: LD_INT 1
55031: NEG
55032: PUSH
55033: LD_INT 0
55035: PUSH
55036: EMPTY
55037: LIST
55038: LIST
55039: PUSH
55040: LD_INT 1
55042: NEG
55043: PUSH
55044: LD_INT 1
55046: NEG
55047: PUSH
55048: EMPTY
55049: LIST
55050: LIST
55051: PUSH
55052: LD_INT 1
55054: NEG
55055: PUSH
55056: LD_INT 2
55058: NEG
55059: PUSH
55060: EMPTY
55061: LIST
55062: LIST
55063: PUSH
55064: LD_INT 0
55066: PUSH
55067: LD_INT 2
55069: NEG
55070: PUSH
55071: EMPTY
55072: LIST
55073: LIST
55074: PUSH
55075: LD_INT 1
55077: PUSH
55078: LD_INT 1
55080: NEG
55081: PUSH
55082: EMPTY
55083: LIST
55084: LIST
55085: PUSH
55086: LD_INT 2
55088: PUSH
55089: LD_INT 1
55091: PUSH
55092: EMPTY
55093: LIST
55094: LIST
55095: PUSH
55096: LD_INT 2
55098: PUSH
55099: LD_INT 2
55101: PUSH
55102: EMPTY
55103: LIST
55104: LIST
55105: PUSH
55106: LD_INT 1
55108: PUSH
55109: LD_INT 2
55111: PUSH
55112: EMPTY
55113: LIST
55114: LIST
55115: PUSH
55116: LD_INT 0
55118: PUSH
55119: LD_INT 2
55121: PUSH
55122: EMPTY
55123: LIST
55124: LIST
55125: PUSH
55126: LD_INT 1
55128: NEG
55129: PUSH
55130: LD_INT 1
55132: PUSH
55133: EMPTY
55134: LIST
55135: LIST
55136: PUSH
55137: LD_INT 2
55139: NEG
55140: PUSH
55141: LD_INT 0
55143: PUSH
55144: EMPTY
55145: LIST
55146: LIST
55147: PUSH
55148: LD_INT 2
55150: NEG
55151: PUSH
55152: LD_INT 1
55154: NEG
55155: PUSH
55156: EMPTY
55157: LIST
55158: LIST
55159: PUSH
55160: LD_INT 1
55162: NEG
55163: PUSH
55164: LD_INT 3
55166: NEG
55167: PUSH
55168: EMPTY
55169: LIST
55170: LIST
55171: PUSH
55172: LD_INT 1
55174: PUSH
55175: LD_INT 2
55177: NEG
55178: PUSH
55179: EMPTY
55180: LIST
55181: LIST
55182: PUSH
55183: LD_INT 3
55185: PUSH
55186: LD_INT 2
55188: PUSH
55189: EMPTY
55190: LIST
55191: LIST
55192: PUSH
55193: LD_INT 2
55195: PUSH
55196: LD_INT 3
55198: PUSH
55199: EMPTY
55200: LIST
55201: LIST
55202: PUSH
55203: LD_INT 2
55205: NEG
55206: PUSH
55207: LD_INT 1
55209: PUSH
55210: EMPTY
55211: LIST
55212: LIST
55213: PUSH
55214: LD_INT 3
55216: NEG
55217: PUSH
55218: LD_INT 1
55220: NEG
55221: PUSH
55222: EMPTY
55223: LIST
55224: LIST
55225: PUSH
55226: EMPTY
55227: LIST
55228: LIST
55229: LIST
55230: LIST
55231: LIST
55232: LIST
55233: LIST
55234: LIST
55235: LIST
55236: LIST
55237: LIST
55238: LIST
55239: LIST
55240: LIST
55241: LIST
55242: LIST
55243: LIST
55244: LIST
55245: LIST
55246: LIST
55247: LIST
55248: LIST
55249: LIST
55250: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
55251: LD_ADDR_VAR 0 33
55255: PUSH
55256: LD_INT 0
55258: PUSH
55259: LD_INT 0
55261: PUSH
55262: EMPTY
55263: LIST
55264: LIST
55265: PUSH
55266: LD_INT 0
55268: PUSH
55269: LD_INT 1
55271: NEG
55272: PUSH
55273: EMPTY
55274: LIST
55275: LIST
55276: PUSH
55277: LD_INT 1
55279: PUSH
55280: LD_INT 0
55282: PUSH
55283: EMPTY
55284: LIST
55285: LIST
55286: PUSH
55287: LD_INT 1
55289: PUSH
55290: LD_INT 1
55292: PUSH
55293: EMPTY
55294: LIST
55295: LIST
55296: PUSH
55297: LD_INT 0
55299: PUSH
55300: LD_INT 1
55302: PUSH
55303: EMPTY
55304: LIST
55305: LIST
55306: PUSH
55307: LD_INT 1
55309: NEG
55310: PUSH
55311: LD_INT 0
55313: PUSH
55314: EMPTY
55315: LIST
55316: LIST
55317: PUSH
55318: LD_INT 1
55320: NEG
55321: PUSH
55322: LD_INT 1
55324: NEG
55325: PUSH
55326: EMPTY
55327: LIST
55328: LIST
55329: PUSH
55330: LD_INT 1
55332: NEG
55333: PUSH
55334: LD_INT 2
55336: NEG
55337: PUSH
55338: EMPTY
55339: LIST
55340: LIST
55341: PUSH
55342: LD_INT 1
55344: PUSH
55345: LD_INT 1
55347: NEG
55348: PUSH
55349: EMPTY
55350: LIST
55351: LIST
55352: PUSH
55353: LD_INT 2
55355: PUSH
55356: LD_INT 0
55358: PUSH
55359: EMPTY
55360: LIST
55361: LIST
55362: PUSH
55363: LD_INT 2
55365: PUSH
55366: LD_INT 1
55368: PUSH
55369: EMPTY
55370: LIST
55371: LIST
55372: PUSH
55373: LD_INT 1
55375: PUSH
55376: LD_INT 2
55378: PUSH
55379: EMPTY
55380: LIST
55381: LIST
55382: PUSH
55383: LD_INT 0
55385: PUSH
55386: LD_INT 2
55388: PUSH
55389: EMPTY
55390: LIST
55391: LIST
55392: PUSH
55393: LD_INT 1
55395: NEG
55396: PUSH
55397: LD_INT 1
55399: PUSH
55400: EMPTY
55401: LIST
55402: LIST
55403: PUSH
55404: LD_INT 2
55406: NEG
55407: PUSH
55408: LD_INT 0
55410: PUSH
55411: EMPTY
55412: LIST
55413: LIST
55414: PUSH
55415: LD_INT 2
55417: NEG
55418: PUSH
55419: LD_INT 1
55421: NEG
55422: PUSH
55423: EMPTY
55424: LIST
55425: LIST
55426: PUSH
55427: LD_INT 2
55429: NEG
55430: PUSH
55431: LD_INT 2
55433: NEG
55434: PUSH
55435: EMPTY
55436: LIST
55437: LIST
55438: PUSH
55439: LD_INT 2
55441: NEG
55442: PUSH
55443: LD_INT 3
55445: NEG
55446: PUSH
55447: EMPTY
55448: LIST
55449: LIST
55450: PUSH
55451: LD_INT 2
55453: PUSH
55454: LD_INT 1
55456: NEG
55457: PUSH
55458: EMPTY
55459: LIST
55460: LIST
55461: PUSH
55462: LD_INT 3
55464: PUSH
55465: LD_INT 1
55467: PUSH
55468: EMPTY
55469: LIST
55470: LIST
55471: PUSH
55472: LD_INT 1
55474: PUSH
55475: LD_INT 3
55477: PUSH
55478: EMPTY
55479: LIST
55480: LIST
55481: PUSH
55482: LD_INT 1
55484: NEG
55485: PUSH
55486: LD_INT 2
55488: PUSH
55489: EMPTY
55490: LIST
55491: LIST
55492: PUSH
55493: LD_INT 3
55495: NEG
55496: PUSH
55497: LD_INT 2
55499: NEG
55500: PUSH
55501: EMPTY
55502: LIST
55503: LIST
55504: PUSH
55505: EMPTY
55506: LIST
55507: LIST
55508: LIST
55509: LIST
55510: LIST
55511: LIST
55512: LIST
55513: LIST
55514: LIST
55515: LIST
55516: LIST
55517: LIST
55518: LIST
55519: LIST
55520: LIST
55521: LIST
55522: LIST
55523: LIST
55524: LIST
55525: LIST
55526: LIST
55527: LIST
55528: LIST
55529: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55530: LD_ADDR_VAR 0 34
55534: PUSH
55535: LD_INT 0
55537: PUSH
55538: LD_INT 0
55540: PUSH
55541: EMPTY
55542: LIST
55543: LIST
55544: PUSH
55545: LD_INT 0
55547: PUSH
55548: LD_INT 1
55550: NEG
55551: PUSH
55552: EMPTY
55553: LIST
55554: LIST
55555: PUSH
55556: LD_INT 1
55558: PUSH
55559: LD_INT 0
55561: PUSH
55562: EMPTY
55563: LIST
55564: LIST
55565: PUSH
55566: LD_INT 1
55568: PUSH
55569: LD_INT 1
55571: PUSH
55572: EMPTY
55573: LIST
55574: LIST
55575: PUSH
55576: LD_INT 0
55578: PUSH
55579: LD_INT 1
55581: PUSH
55582: EMPTY
55583: LIST
55584: LIST
55585: PUSH
55586: LD_INT 1
55588: NEG
55589: PUSH
55590: LD_INT 0
55592: PUSH
55593: EMPTY
55594: LIST
55595: LIST
55596: PUSH
55597: LD_INT 1
55599: NEG
55600: PUSH
55601: LD_INT 1
55603: NEG
55604: PUSH
55605: EMPTY
55606: LIST
55607: LIST
55608: PUSH
55609: LD_INT 1
55611: NEG
55612: PUSH
55613: LD_INT 2
55615: NEG
55616: PUSH
55617: EMPTY
55618: LIST
55619: LIST
55620: PUSH
55621: LD_INT 0
55623: PUSH
55624: LD_INT 2
55626: NEG
55627: PUSH
55628: EMPTY
55629: LIST
55630: LIST
55631: PUSH
55632: LD_INT 1
55634: PUSH
55635: LD_INT 1
55637: NEG
55638: PUSH
55639: EMPTY
55640: LIST
55641: LIST
55642: PUSH
55643: LD_INT 2
55645: PUSH
55646: LD_INT 1
55648: PUSH
55649: EMPTY
55650: LIST
55651: LIST
55652: PUSH
55653: LD_INT 2
55655: PUSH
55656: LD_INT 2
55658: PUSH
55659: EMPTY
55660: LIST
55661: LIST
55662: PUSH
55663: LD_INT 1
55665: PUSH
55666: LD_INT 2
55668: PUSH
55669: EMPTY
55670: LIST
55671: LIST
55672: PUSH
55673: LD_INT 1
55675: NEG
55676: PUSH
55677: LD_INT 1
55679: PUSH
55680: EMPTY
55681: LIST
55682: LIST
55683: PUSH
55684: LD_INT 2
55686: NEG
55687: PUSH
55688: LD_INT 0
55690: PUSH
55691: EMPTY
55692: LIST
55693: LIST
55694: PUSH
55695: LD_INT 2
55697: NEG
55698: PUSH
55699: LD_INT 1
55701: NEG
55702: PUSH
55703: EMPTY
55704: LIST
55705: LIST
55706: PUSH
55707: LD_INT 2
55709: NEG
55710: PUSH
55711: LD_INT 2
55713: NEG
55714: PUSH
55715: EMPTY
55716: LIST
55717: LIST
55718: PUSH
55719: LD_INT 1
55721: NEG
55722: PUSH
55723: LD_INT 3
55725: NEG
55726: PUSH
55727: EMPTY
55728: LIST
55729: LIST
55730: PUSH
55731: LD_INT 1
55733: PUSH
55734: LD_INT 2
55736: NEG
55737: PUSH
55738: EMPTY
55739: LIST
55740: LIST
55741: PUSH
55742: LD_INT 3
55744: PUSH
55745: LD_INT 2
55747: PUSH
55748: EMPTY
55749: LIST
55750: LIST
55751: PUSH
55752: LD_INT 2
55754: PUSH
55755: LD_INT 3
55757: PUSH
55758: EMPTY
55759: LIST
55760: LIST
55761: PUSH
55762: LD_INT 2
55764: NEG
55765: PUSH
55766: LD_INT 1
55768: PUSH
55769: EMPTY
55770: LIST
55771: LIST
55772: PUSH
55773: LD_INT 3
55775: NEG
55776: PUSH
55777: LD_INT 1
55779: NEG
55780: PUSH
55781: EMPTY
55782: LIST
55783: LIST
55784: PUSH
55785: EMPTY
55786: LIST
55787: LIST
55788: LIST
55789: LIST
55790: LIST
55791: LIST
55792: LIST
55793: LIST
55794: LIST
55795: LIST
55796: LIST
55797: LIST
55798: LIST
55799: LIST
55800: LIST
55801: LIST
55802: LIST
55803: LIST
55804: LIST
55805: LIST
55806: LIST
55807: LIST
55808: LIST
55809: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
55810: LD_ADDR_VAR 0 35
55814: PUSH
55815: LD_INT 0
55817: PUSH
55818: LD_INT 0
55820: PUSH
55821: EMPTY
55822: LIST
55823: LIST
55824: PUSH
55825: LD_INT 0
55827: PUSH
55828: LD_INT 1
55830: NEG
55831: PUSH
55832: EMPTY
55833: LIST
55834: LIST
55835: PUSH
55836: LD_INT 1
55838: PUSH
55839: LD_INT 0
55841: PUSH
55842: EMPTY
55843: LIST
55844: LIST
55845: PUSH
55846: LD_INT 1
55848: PUSH
55849: LD_INT 1
55851: PUSH
55852: EMPTY
55853: LIST
55854: LIST
55855: PUSH
55856: LD_INT 0
55858: PUSH
55859: LD_INT 1
55861: PUSH
55862: EMPTY
55863: LIST
55864: LIST
55865: PUSH
55866: LD_INT 1
55868: NEG
55869: PUSH
55870: LD_INT 0
55872: PUSH
55873: EMPTY
55874: LIST
55875: LIST
55876: PUSH
55877: LD_INT 1
55879: NEG
55880: PUSH
55881: LD_INT 1
55883: NEG
55884: PUSH
55885: EMPTY
55886: LIST
55887: LIST
55888: PUSH
55889: LD_INT 2
55891: PUSH
55892: LD_INT 1
55894: PUSH
55895: EMPTY
55896: LIST
55897: LIST
55898: PUSH
55899: LD_INT 2
55901: NEG
55902: PUSH
55903: LD_INT 1
55905: NEG
55906: PUSH
55907: EMPTY
55908: LIST
55909: LIST
55910: PUSH
55911: EMPTY
55912: LIST
55913: LIST
55914: LIST
55915: LIST
55916: LIST
55917: LIST
55918: LIST
55919: LIST
55920: LIST
55921: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
55922: LD_ADDR_VAR 0 36
55926: PUSH
55927: LD_INT 0
55929: PUSH
55930: LD_INT 0
55932: PUSH
55933: EMPTY
55934: LIST
55935: LIST
55936: PUSH
55937: LD_INT 0
55939: PUSH
55940: LD_INT 1
55942: NEG
55943: PUSH
55944: EMPTY
55945: LIST
55946: LIST
55947: PUSH
55948: LD_INT 1
55950: PUSH
55951: LD_INT 0
55953: PUSH
55954: EMPTY
55955: LIST
55956: LIST
55957: PUSH
55958: LD_INT 1
55960: PUSH
55961: LD_INT 1
55963: PUSH
55964: EMPTY
55965: LIST
55966: LIST
55967: PUSH
55968: LD_INT 0
55970: PUSH
55971: LD_INT 1
55973: PUSH
55974: EMPTY
55975: LIST
55976: LIST
55977: PUSH
55978: LD_INT 1
55980: NEG
55981: PUSH
55982: LD_INT 0
55984: PUSH
55985: EMPTY
55986: LIST
55987: LIST
55988: PUSH
55989: LD_INT 1
55991: NEG
55992: PUSH
55993: LD_INT 1
55995: NEG
55996: PUSH
55997: EMPTY
55998: LIST
55999: LIST
56000: PUSH
56001: LD_INT 1
56003: NEG
56004: PUSH
56005: LD_INT 2
56007: NEG
56008: PUSH
56009: EMPTY
56010: LIST
56011: LIST
56012: PUSH
56013: LD_INT 1
56015: PUSH
56016: LD_INT 2
56018: PUSH
56019: EMPTY
56020: LIST
56021: LIST
56022: PUSH
56023: EMPTY
56024: LIST
56025: LIST
56026: LIST
56027: LIST
56028: LIST
56029: LIST
56030: LIST
56031: LIST
56032: LIST
56033: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
56034: LD_ADDR_VAR 0 37
56038: PUSH
56039: LD_INT 0
56041: PUSH
56042: LD_INT 0
56044: PUSH
56045: EMPTY
56046: LIST
56047: LIST
56048: PUSH
56049: LD_INT 0
56051: PUSH
56052: LD_INT 1
56054: NEG
56055: PUSH
56056: EMPTY
56057: LIST
56058: LIST
56059: PUSH
56060: LD_INT 1
56062: PUSH
56063: LD_INT 0
56065: PUSH
56066: EMPTY
56067: LIST
56068: LIST
56069: PUSH
56070: LD_INT 1
56072: PUSH
56073: LD_INT 1
56075: PUSH
56076: EMPTY
56077: LIST
56078: LIST
56079: PUSH
56080: LD_INT 0
56082: PUSH
56083: LD_INT 1
56085: PUSH
56086: EMPTY
56087: LIST
56088: LIST
56089: PUSH
56090: LD_INT 1
56092: NEG
56093: PUSH
56094: LD_INT 0
56096: PUSH
56097: EMPTY
56098: LIST
56099: LIST
56100: PUSH
56101: LD_INT 1
56103: NEG
56104: PUSH
56105: LD_INT 1
56107: NEG
56108: PUSH
56109: EMPTY
56110: LIST
56111: LIST
56112: PUSH
56113: LD_INT 1
56115: PUSH
56116: LD_INT 1
56118: NEG
56119: PUSH
56120: EMPTY
56121: LIST
56122: LIST
56123: PUSH
56124: LD_INT 1
56126: NEG
56127: PUSH
56128: LD_INT 1
56130: PUSH
56131: EMPTY
56132: LIST
56133: LIST
56134: PUSH
56135: EMPTY
56136: LIST
56137: LIST
56138: LIST
56139: LIST
56140: LIST
56141: LIST
56142: LIST
56143: LIST
56144: LIST
56145: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
56146: LD_ADDR_VAR 0 38
56150: PUSH
56151: LD_INT 0
56153: PUSH
56154: LD_INT 0
56156: PUSH
56157: EMPTY
56158: LIST
56159: LIST
56160: PUSH
56161: LD_INT 0
56163: PUSH
56164: LD_INT 1
56166: NEG
56167: PUSH
56168: EMPTY
56169: LIST
56170: LIST
56171: PUSH
56172: LD_INT 1
56174: PUSH
56175: LD_INT 0
56177: PUSH
56178: EMPTY
56179: LIST
56180: LIST
56181: PUSH
56182: LD_INT 1
56184: PUSH
56185: LD_INT 1
56187: PUSH
56188: EMPTY
56189: LIST
56190: LIST
56191: PUSH
56192: LD_INT 0
56194: PUSH
56195: LD_INT 1
56197: PUSH
56198: EMPTY
56199: LIST
56200: LIST
56201: PUSH
56202: LD_INT 1
56204: NEG
56205: PUSH
56206: LD_INT 0
56208: PUSH
56209: EMPTY
56210: LIST
56211: LIST
56212: PUSH
56213: LD_INT 1
56215: NEG
56216: PUSH
56217: LD_INT 1
56219: NEG
56220: PUSH
56221: EMPTY
56222: LIST
56223: LIST
56224: PUSH
56225: LD_INT 2
56227: PUSH
56228: LD_INT 1
56230: PUSH
56231: EMPTY
56232: LIST
56233: LIST
56234: PUSH
56235: LD_INT 2
56237: NEG
56238: PUSH
56239: LD_INT 1
56241: NEG
56242: PUSH
56243: EMPTY
56244: LIST
56245: LIST
56246: PUSH
56247: EMPTY
56248: LIST
56249: LIST
56250: LIST
56251: LIST
56252: LIST
56253: LIST
56254: LIST
56255: LIST
56256: LIST
56257: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
56258: LD_ADDR_VAR 0 39
56262: PUSH
56263: LD_INT 0
56265: PUSH
56266: LD_INT 0
56268: PUSH
56269: EMPTY
56270: LIST
56271: LIST
56272: PUSH
56273: LD_INT 0
56275: PUSH
56276: LD_INT 1
56278: NEG
56279: PUSH
56280: EMPTY
56281: LIST
56282: LIST
56283: PUSH
56284: LD_INT 1
56286: PUSH
56287: LD_INT 0
56289: PUSH
56290: EMPTY
56291: LIST
56292: LIST
56293: PUSH
56294: LD_INT 1
56296: PUSH
56297: LD_INT 1
56299: PUSH
56300: EMPTY
56301: LIST
56302: LIST
56303: PUSH
56304: LD_INT 0
56306: PUSH
56307: LD_INT 1
56309: PUSH
56310: EMPTY
56311: LIST
56312: LIST
56313: PUSH
56314: LD_INT 1
56316: NEG
56317: PUSH
56318: LD_INT 0
56320: PUSH
56321: EMPTY
56322: LIST
56323: LIST
56324: PUSH
56325: LD_INT 1
56327: NEG
56328: PUSH
56329: LD_INT 1
56331: NEG
56332: PUSH
56333: EMPTY
56334: LIST
56335: LIST
56336: PUSH
56337: LD_INT 1
56339: NEG
56340: PUSH
56341: LD_INT 2
56343: NEG
56344: PUSH
56345: EMPTY
56346: LIST
56347: LIST
56348: PUSH
56349: LD_INT 1
56351: PUSH
56352: LD_INT 2
56354: PUSH
56355: EMPTY
56356: LIST
56357: LIST
56358: PUSH
56359: EMPTY
56360: LIST
56361: LIST
56362: LIST
56363: LIST
56364: LIST
56365: LIST
56366: LIST
56367: LIST
56368: LIST
56369: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
56370: LD_ADDR_VAR 0 40
56374: PUSH
56375: LD_INT 0
56377: PUSH
56378: LD_INT 0
56380: PUSH
56381: EMPTY
56382: LIST
56383: LIST
56384: PUSH
56385: LD_INT 0
56387: PUSH
56388: LD_INT 1
56390: NEG
56391: PUSH
56392: EMPTY
56393: LIST
56394: LIST
56395: PUSH
56396: LD_INT 1
56398: PUSH
56399: LD_INT 0
56401: PUSH
56402: EMPTY
56403: LIST
56404: LIST
56405: PUSH
56406: LD_INT 1
56408: PUSH
56409: LD_INT 1
56411: PUSH
56412: EMPTY
56413: LIST
56414: LIST
56415: PUSH
56416: LD_INT 0
56418: PUSH
56419: LD_INT 1
56421: PUSH
56422: EMPTY
56423: LIST
56424: LIST
56425: PUSH
56426: LD_INT 1
56428: NEG
56429: PUSH
56430: LD_INT 0
56432: PUSH
56433: EMPTY
56434: LIST
56435: LIST
56436: PUSH
56437: LD_INT 1
56439: NEG
56440: PUSH
56441: LD_INT 1
56443: NEG
56444: PUSH
56445: EMPTY
56446: LIST
56447: LIST
56448: PUSH
56449: LD_INT 1
56451: PUSH
56452: LD_INT 1
56454: NEG
56455: PUSH
56456: EMPTY
56457: LIST
56458: LIST
56459: PUSH
56460: LD_INT 1
56462: NEG
56463: PUSH
56464: LD_INT 1
56466: PUSH
56467: EMPTY
56468: LIST
56469: LIST
56470: PUSH
56471: EMPTY
56472: LIST
56473: LIST
56474: LIST
56475: LIST
56476: LIST
56477: LIST
56478: LIST
56479: LIST
56480: LIST
56481: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56482: LD_ADDR_VAR 0 41
56486: PUSH
56487: LD_INT 0
56489: PUSH
56490: LD_INT 0
56492: PUSH
56493: EMPTY
56494: LIST
56495: LIST
56496: PUSH
56497: LD_INT 0
56499: PUSH
56500: LD_INT 1
56502: NEG
56503: PUSH
56504: EMPTY
56505: LIST
56506: LIST
56507: PUSH
56508: LD_INT 1
56510: PUSH
56511: LD_INT 0
56513: PUSH
56514: EMPTY
56515: LIST
56516: LIST
56517: PUSH
56518: LD_INT 1
56520: PUSH
56521: LD_INT 1
56523: PUSH
56524: EMPTY
56525: LIST
56526: LIST
56527: PUSH
56528: LD_INT 0
56530: PUSH
56531: LD_INT 1
56533: PUSH
56534: EMPTY
56535: LIST
56536: LIST
56537: PUSH
56538: LD_INT 1
56540: NEG
56541: PUSH
56542: LD_INT 0
56544: PUSH
56545: EMPTY
56546: LIST
56547: LIST
56548: PUSH
56549: LD_INT 1
56551: NEG
56552: PUSH
56553: LD_INT 1
56555: NEG
56556: PUSH
56557: EMPTY
56558: LIST
56559: LIST
56560: PUSH
56561: LD_INT 1
56563: NEG
56564: PUSH
56565: LD_INT 2
56567: NEG
56568: PUSH
56569: EMPTY
56570: LIST
56571: LIST
56572: PUSH
56573: LD_INT 1
56575: PUSH
56576: LD_INT 1
56578: NEG
56579: PUSH
56580: EMPTY
56581: LIST
56582: LIST
56583: PUSH
56584: LD_INT 2
56586: PUSH
56587: LD_INT 0
56589: PUSH
56590: EMPTY
56591: LIST
56592: LIST
56593: PUSH
56594: LD_INT 2
56596: PUSH
56597: LD_INT 1
56599: PUSH
56600: EMPTY
56601: LIST
56602: LIST
56603: PUSH
56604: LD_INT 2
56606: PUSH
56607: LD_INT 2
56609: PUSH
56610: EMPTY
56611: LIST
56612: LIST
56613: PUSH
56614: LD_INT 1
56616: PUSH
56617: LD_INT 2
56619: PUSH
56620: EMPTY
56621: LIST
56622: LIST
56623: PUSH
56624: LD_INT 1
56626: NEG
56627: PUSH
56628: LD_INT 1
56630: PUSH
56631: EMPTY
56632: LIST
56633: LIST
56634: PUSH
56635: LD_INT 2
56637: NEG
56638: PUSH
56639: LD_INT 0
56641: PUSH
56642: EMPTY
56643: LIST
56644: LIST
56645: PUSH
56646: LD_INT 2
56648: NEG
56649: PUSH
56650: LD_INT 1
56652: NEG
56653: PUSH
56654: EMPTY
56655: LIST
56656: LIST
56657: PUSH
56658: LD_INT 2
56660: NEG
56661: PUSH
56662: LD_INT 2
56664: NEG
56665: PUSH
56666: EMPTY
56667: LIST
56668: LIST
56669: PUSH
56670: LD_INT 2
56672: NEG
56673: PUSH
56674: LD_INT 3
56676: NEG
56677: PUSH
56678: EMPTY
56679: LIST
56680: LIST
56681: PUSH
56682: LD_INT 2
56684: PUSH
56685: LD_INT 1
56687: NEG
56688: PUSH
56689: EMPTY
56690: LIST
56691: LIST
56692: PUSH
56693: LD_INT 3
56695: PUSH
56696: LD_INT 0
56698: PUSH
56699: EMPTY
56700: LIST
56701: LIST
56702: PUSH
56703: LD_INT 3
56705: PUSH
56706: LD_INT 1
56708: PUSH
56709: EMPTY
56710: LIST
56711: LIST
56712: PUSH
56713: LD_INT 3
56715: PUSH
56716: LD_INT 2
56718: PUSH
56719: EMPTY
56720: LIST
56721: LIST
56722: PUSH
56723: LD_INT 3
56725: PUSH
56726: LD_INT 3
56728: PUSH
56729: EMPTY
56730: LIST
56731: LIST
56732: PUSH
56733: LD_INT 2
56735: PUSH
56736: LD_INT 3
56738: PUSH
56739: EMPTY
56740: LIST
56741: LIST
56742: PUSH
56743: LD_INT 2
56745: NEG
56746: PUSH
56747: LD_INT 1
56749: PUSH
56750: EMPTY
56751: LIST
56752: LIST
56753: PUSH
56754: LD_INT 3
56756: NEG
56757: PUSH
56758: LD_INT 0
56760: PUSH
56761: EMPTY
56762: LIST
56763: LIST
56764: PUSH
56765: LD_INT 3
56767: NEG
56768: PUSH
56769: LD_INT 1
56771: NEG
56772: PUSH
56773: EMPTY
56774: LIST
56775: LIST
56776: PUSH
56777: LD_INT 3
56779: NEG
56780: PUSH
56781: LD_INT 2
56783: NEG
56784: PUSH
56785: EMPTY
56786: LIST
56787: LIST
56788: PUSH
56789: LD_INT 3
56791: NEG
56792: PUSH
56793: LD_INT 3
56795: NEG
56796: PUSH
56797: EMPTY
56798: LIST
56799: LIST
56800: PUSH
56801: EMPTY
56802: LIST
56803: LIST
56804: LIST
56805: LIST
56806: LIST
56807: LIST
56808: LIST
56809: LIST
56810: LIST
56811: LIST
56812: LIST
56813: LIST
56814: LIST
56815: LIST
56816: LIST
56817: LIST
56818: LIST
56819: LIST
56820: LIST
56821: LIST
56822: LIST
56823: LIST
56824: LIST
56825: LIST
56826: LIST
56827: LIST
56828: LIST
56829: LIST
56830: LIST
56831: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56832: LD_ADDR_VAR 0 42
56836: PUSH
56837: LD_INT 0
56839: PUSH
56840: LD_INT 0
56842: PUSH
56843: EMPTY
56844: LIST
56845: LIST
56846: PUSH
56847: LD_INT 0
56849: PUSH
56850: LD_INT 1
56852: NEG
56853: PUSH
56854: EMPTY
56855: LIST
56856: LIST
56857: PUSH
56858: LD_INT 1
56860: PUSH
56861: LD_INT 0
56863: PUSH
56864: EMPTY
56865: LIST
56866: LIST
56867: PUSH
56868: LD_INT 1
56870: PUSH
56871: LD_INT 1
56873: PUSH
56874: EMPTY
56875: LIST
56876: LIST
56877: PUSH
56878: LD_INT 0
56880: PUSH
56881: LD_INT 1
56883: PUSH
56884: EMPTY
56885: LIST
56886: LIST
56887: PUSH
56888: LD_INT 1
56890: NEG
56891: PUSH
56892: LD_INT 0
56894: PUSH
56895: EMPTY
56896: LIST
56897: LIST
56898: PUSH
56899: LD_INT 1
56901: NEG
56902: PUSH
56903: LD_INT 1
56905: NEG
56906: PUSH
56907: EMPTY
56908: LIST
56909: LIST
56910: PUSH
56911: LD_INT 1
56913: NEG
56914: PUSH
56915: LD_INT 2
56917: NEG
56918: PUSH
56919: EMPTY
56920: LIST
56921: LIST
56922: PUSH
56923: LD_INT 0
56925: PUSH
56926: LD_INT 2
56928: NEG
56929: PUSH
56930: EMPTY
56931: LIST
56932: LIST
56933: PUSH
56934: LD_INT 1
56936: PUSH
56937: LD_INT 1
56939: NEG
56940: PUSH
56941: EMPTY
56942: LIST
56943: LIST
56944: PUSH
56945: LD_INT 2
56947: PUSH
56948: LD_INT 1
56950: PUSH
56951: EMPTY
56952: LIST
56953: LIST
56954: PUSH
56955: LD_INT 2
56957: PUSH
56958: LD_INT 2
56960: PUSH
56961: EMPTY
56962: LIST
56963: LIST
56964: PUSH
56965: LD_INT 1
56967: PUSH
56968: LD_INT 2
56970: PUSH
56971: EMPTY
56972: LIST
56973: LIST
56974: PUSH
56975: LD_INT 0
56977: PUSH
56978: LD_INT 2
56980: PUSH
56981: EMPTY
56982: LIST
56983: LIST
56984: PUSH
56985: LD_INT 1
56987: NEG
56988: PUSH
56989: LD_INT 1
56991: PUSH
56992: EMPTY
56993: LIST
56994: LIST
56995: PUSH
56996: LD_INT 2
56998: NEG
56999: PUSH
57000: LD_INT 1
57002: NEG
57003: PUSH
57004: EMPTY
57005: LIST
57006: LIST
57007: PUSH
57008: LD_INT 2
57010: NEG
57011: PUSH
57012: LD_INT 2
57014: NEG
57015: PUSH
57016: EMPTY
57017: LIST
57018: LIST
57019: PUSH
57020: LD_INT 2
57022: NEG
57023: PUSH
57024: LD_INT 3
57026: NEG
57027: PUSH
57028: EMPTY
57029: LIST
57030: LIST
57031: PUSH
57032: LD_INT 1
57034: NEG
57035: PUSH
57036: LD_INT 3
57038: NEG
57039: PUSH
57040: EMPTY
57041: LIST
57042: LIST
57043: PUSH
57044: LD_INT 0
57046: PUSH
57047: LD_INT 3
57049: NEG
57050: PUSH
57051: EMPTY
57052: LIST
57053: LIST
57054: PUSH
57055: LD_INT 1
57057: PUSH
57058: LD_INT 2
57060: NEG
57061: PUSH
57062: EMPTY
57063: LIST
57064: LIST
57065: PUSH
57066: LD_INT 3
57068: PUSH
57069: LD_INT 2
57071: PUSH
57072: EMPTY
57073: LIST
57074: LIST
57075: PUSH
57076: LD_INT 3
57078: PUSH
57079: LD_INT 3
57081: PUSH
57082: EMPTY
57083: LIST
57084: LIST
57085: PUSH
57086: LD_INT 2
57088: PUSH
57089: LD_INT 3
57091: PUSH
57092: EMPTY
57093: LIST
57094: LIST
57095: PUSH
57096: LD_INT 1
57098: PUSH
57099: LD_INT 3
57101: PUSH
57102: EMPTY
57103: LIST
57104: LIST
57105: PUSH
57106: LD_INT 0
57108: PUSH
57109: LD_INT 3
57111: PUSH
57112: EMPTY
57113: LIST
57114: LIST
57115: PUSH
57116: LD_INT 1
57118: NEG
57119: PUSH
57120: LD_INT 2
57122: PUSH
57123: EMPTY
57124: LIST
57125: LIST
57126: PUSH
57127: LD_INT 3
57129: NEG
57130: PUSH
57131: LD_INT 2
57133: NEG
57134: PUSH
57135: EMPTY
57136: LIST
57137: LIST
57138: PUSH
57139: LD_INT 3
57141: NEG
57142: PUSH
57143: LD_INT 3
57145: NEG
57146: PUSH
57147: EMPTY
57148: LIST
57149: LIST
57150: PUSH
57151: EMPTY
57152: LIST
57153: LIST
57154: LIST
57155: LIST
57156: LIST
57157: LIST
57158: LIST
57159: LIST
57160: LIST
57161: LIST
57162: LIST
57163: LIST
57164: LIST
57165: LIST
57166: LIST
57167: LIST
57168: LIST
57169: LIST
57170: LIST
57171: LIST
57172: LIST
57173: LIST
57174: LIST
57175: LIST
57176: LIST
57177: LIST
57178: LIST
57179: LIST
57180: LIST
57181: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57182: LD_ADDR_VAR 0 43
57186: PUSH
57187: LD_INT 0
57189: PUSH
57190: LD_INT 0
57192: PUSH
57193: EMPTY
57194: LIST
57195: LIST
57196: PUSH
57197: LD_INT 0
57199: PUSH
57200: LD_INT 1
57202: NEG
57203: PUSH
57204: EMPTY
57205: LIST
57206: LIST
57207: PUSH
57208: LD_INT 1
57210: PUSH
57211: LD_INT 0
57213: PUSH
57214: EMPTY
57215: LIST
57216: LIST
57217: PUSH
57218: LD_INT 1
57220: PUSH
57221: LD_INT 1
57223: PUSH
57224: EMPTY
57225: LIST
57226: LIST
57227: PUSH
57228: LD_INT 0
57230: PUSH
57231: LD_INT 1
57233: PUSH
57234: EMPTY
57235: LIST
57236: LIST
57237: PUSH
57238: LD_INT 1
57240: NEG
57241: PUSH
57242: LD_INT 0
57244: PUSH
57245: EMPTY
57246: LIST
57247: LIST
57248: PUSH
57249: LD_INT 1
57251: NEG
57252: PUSH
57253: LD_INT 1
57255: NEG
57256: PUSH
57257: EMPTY
57258: LIST
57259: LIST
57260: PUSH
57261: LD_INT 1
57263: NEG
57264: PUSH
57265: LD_INT 2
57267: NEG
57268: PUSH
57269: EMPTY
57270: LIST
57271: LIST
57272: PUSH
57273: LD_INT 0
57275: PUSH
57276: LD_INT 2
57278: NEG
57279: PUSH
57280: EMPTY
57281: LIST
57282: LIST
57283: PUSH
57284: LD_INT 1
57286: PUSH
57287: LD_INT 1
57289: NEG
57290: PUSH
57291: EMPTY
57292: LIST
57293: LIST
57294: PUSH
57295: LD_INT 2
57297: PUSH
57298: LD_INT 0
57300: PUSH
57301: EMPTY
57302: LIST
57303: LIST
57304: PUSH
57305: LD_INT 2
57307: PUSH
57308: LD_INT 1
57310: PUSH
57311: EMPTY
57312: LIST
57313: LIST
57314: PUSH
57315: LD_INT 1
57317: PUSH
57318: LD_INT 2
57320: PUSH
57321: EMPTY
57322: LIST
57323: LIST
57324: PUSH
57325: LD_INT 0
57327: PUSH
57328: LD_INT 2
57330: PUSH
57331: EMPTY
57332: LIST
57333: LIST
57334: PUSH
57335: LD_INT 1
57337: NEG
57338: PUSH
57339: LD_INT 1
57341: PUSH
57342: EMPTY
57343: LIST
57344: LIST
57345: PUSH
57346: LD_INT 2
57348: NEG
57349: PUSH
57350: LD_INT 0
57352: PUSH
57353: EMPTY
57354: LIST
57355: LIST
57356: PUSH
57357: LD_INT 2
57359: NEG
57360: PUSH
57361: LD_INT 1
57363: NEG
57364: PUSH
57365: EMPTY
57366: LIST
57367: LIST
57368: PUSH
57369: LD_INT 1
57371: NEG
57372: PUSH
57373: LD_INT 3
57375: NEG
57376: PUSH
57377: EMPTY
57378: LIST
57379: LIST
57380: PUSH
57381: LD_INT 0
57383: PUSH
57384: LD_INT 3
57386: NEG
57387: PUSH
57388: EMPTY
57389: LIST
57390: LIST
57391: PUSH
57392: LD_INT 1
57394: PUSH
57395: LD_INT 2
57397: NEG
57398: PUSH
57399: EMPTY
57400: LIST
57401: LIST
57402: PUSH
57403: LD_INT 2
57405: PUSH
57406: LD_INT 1
57408: NEG
57409: PUSH
57410: EMPTY
57411: LIST
57412: LIST
57413: PUSH
57414: LD_INT 3
57416: PUSH
57417: LD_INT 0
57419: PUSH
57420: EMPTY
57421: LIST
57422: LIST
57423: PUSH
57424: LD_INT 3
57426: PUSH
57427: LD_INT 1
57429: PUSH
57430: EMPTY
57431: LIST
57432: LIST
57433: PUSH
57434: LD_INT 1
57436: PUSH
57437: LD_INT 3
57439: PUSH
57440: EMPTY
57441: LIST
57442: LIST
57443: PUSH
57444: LD_INT 0
57446: PUSH
57447: LD_INT 3
57449: PUSH
57450: EMPTY
57451: LIST
57452: LIST
57453: PUSH
57454: LD_INT 1
57456: NEG
57457: PUSH
57458: LD_INT 2
57460: PUSH
57461: EMPTY
57462: LIST
57463: LIST
57464: PUSH
57465: LD_INT 2
57467: NEG
57468: PUSH
57469: LD_INT 1
57471: PUSH
57472: EMPTY
57473: LIST
57474: LIST
57475: PUSH
57476: LD_INT 3
57478: NEG
57479: PUSH
57480: LD_INT 0
57482: PUSH
57483: EMPTY
57484: LIST
57485: LIST
57486: PUSH
57487: LD_INT 3
57489: NEG
57490: PUSH
57491: LD_INT 1
57493: NEG
57494: PUSH
57495: EMPTY
57496: LIST
57497: LIST
57498: PUSH
57499: EMPTY
57500: LIST
57501: LIST
57502: LIST
57503: LIST
57504: LIST
57505: LIST
57506: LIST
57507: LIST
57508: LIST
57509: LIST
57510: LIST
57511: LIST
57512: LIST
57513: LIST
57514: LIST
57515: LIST
57516: LIST
57517: LIST
57518: LIST
57519: LIST
57520: LIST
57521: LIST
57522: LIST
57523: LIST
57524: LIST
57525: LIST
57526: LIST
57527: LIST
57528: LIST
57529: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57530: LD_ADDR_VAR 0 44
57534: PUSH
57535: LD_INT 0
57537: PUSH
57538: LD_INT 0
57540: PUSH
57541: EMPTY
57542: LIST
57543: LIST
57544: PUSH
57545: LD_INT 0
57547: PUSH
57548: LD_INT 1
57550: NEG
57551: PUSH
57552: EMPTY
57553: LIST
57554: LIST
57555: PUSH
57556: LD_INT 1
57558: PUSH
57559: LD_INT 0
57561: PUSH
57562: EMPTY
57563: LIST
57564: LIST
57565: PUSH
57566: LD_INT 1
57568: PUSH
57569: LD_INT 1
57571: PUSH
57572: EMPTY
57573: LIST
57574: LIST
57575: PUSH
57576: LD_INT 0
57578: PUSH
57579: LD_INT 1
57581: PUSH
57582: EMPTY
57583: LIST
57584: LIST
57585: PUSH
57586: LD_INT 1
57588: NEG
57589: PUSH
57590: LD_INT 0
57592: PUSH
57593: EMPTY
57594: LIST
57595: LIST
57596: PUSH
57597: LD_INT 1
57599: NEG
57600: PUSH
57601: LD_INT 1
57603: NEG
57604: PUSH
57605: EMPTY
57606: LIST
57607: LIST
57608: PUSH
57609: LD_INT 1
57611: NEG
57612: PUSH
57613: LD_INT 2
57615: NEG
57616: PUSH
57617: EMPTY
57618: LIST
57619: LIST
57620: PUSH
57621: LD_INT 1
57623: PUSH
57624: LD_INT 1
57626: NEG
57627: PUSH
57628: EMPTY
57629: LIST
57630: LIST
57631: PUSH
57632: LD_INT 2
57634: PUSH
57635: LD_INT 0
57637: PUSH
57638: EMPTY
57639: LIST
57640: LIST
57641: PUSH
57642: LD_INT 2
57644: PUSH
57645: LD_INT 1
57647: PUSH
57648: EMPTY
57649: LIST
57650: LIST
57651: PUSH
57652: LD_INT 2
57654: PUSH
57655: LD_INT 2
57657: PUSH
57658: EMPTY
57659: LIST
57660: LIST
57661: PUSH
57662: LD_INT 1
57664: PUSH
57665: LD_INT 2
57667: PUSH
57668: EMPTY
57669: LIST
57670: LIST
57671: PUSH
57672: LD_INT 1
57674: NEG
57675: PUSH
57676: LD_INT 1
57678: PUSH
57679: EMPTY
57680: LIST
57681: LIST
57682: PUSH
57683: LD_INT 2
57685: NEG
57686: PUSH
57687: LD_INT 0
57689: PUSH
57690: EMPTY
57691: LIST
57692: LIST
57693: PUSH
57694: LD_INT 2
57696: NEG
57697: PUSH
57698: LD_INT 1
57700: NEG
57701: PUSH
57702: EMPTY
57703: LIST
57704: LIST
57705: PUSH
57706: LD_INT 2
57708: NEG
57709: PUSH
57710: LD_INT 2
57712: NEG
57713: PUSH
57714: EMPTY
57715: LIST
57716: LIST
57717: PUSH
57718: LD_INT 2
57720: NEG
57721: PUSH
57722: LD_INT 3
57724: NEG
57725: PUSH
57726: EMPTY
57727: LIST
57728: LIST
57729: PUSH
57730: LD_INT 2
57732: PUSH
57733: LD_INT 1
57735: NEG
57736: PUSH
57737: EMPTY
57738: LIST
57739: LIST
57740: PUSH
57741: LD_INT 3
57743: PUSH
57744: LD_INT 0
57746: PUSH
57747: EMPTY
57748: LIST
57749: LIST
57750: PUSH
57751: LD_INT 3
57753: PUSH
57754: LD_INT 1
57756: PUSH
57757: EMPTY
57758: LIST
57759: LIST
57760: PUSH
57761: LD_INT 3
57763: PUSH
57764: LD_INT 2
57766: PUSH
57767: EMPTY
57768: LIST
57769: LIST
57770: PUSH
57771: LD_INT 3
57773: PUSH
57774: LD_INT 3
57776: PUSH
57777: EMPTY
57778: LIST
57779: LIST
57780: PUSH
57781: LD_INT 2
57783: PUSH
57784: LD_INT 3
57786: PUSH
57787: EMPTY
57788: LIST
57789: LIST
57790: PUSH
57791: LD_INT 2
57793: NEG
57794: PUSH
57795: LD_INT 1
57797: PUSH
57798: EMPTY
57799: LIST
57800: LIST
57801: PUSH
57802: LD_INT 3
57804: NEG
57805: PUSH
57806: LD_INT 0
57808: PUSH
57809: EMPTY
57810: LIST
57811: LIST
57812: PUSH
57813: LD_INT 3
57815: NEG
57816: PUSH
57817: LD_INT 1
57819: NEG
57820: PUSH
57821: EMPTY
57822: LIST
57823: LIST
57824: PUSH
57825: LD_INT 3
57827: NEG
57828: PUSH
57829: LD_INT 2
57831: NEG
57832: PUSH
57833: EMPTY
57834: LIST
57835: LIST
57836: PUSH
57837: LD_INT 3
57839: NEG
57840: PUSH
57841: LD_INT 3
57843: NEG
57844: PUSH
57845: EMPTY
57846: LIST
57847: LIST
57848: PUSH
57849: EMPTY
57850: LIST
57851: LIST
57852: LIST
57853: LIST
57854: LIST
57855: LIST
57856: LIST
57857: LIST
57858: LIST
57859: LIST
57860: LIST
57861: LIST
57862: LIST
57863: LIST
57864: LIST
57865: LIST
57866: LIST
57867: LIST
57868: LIST
57869: LIST
57870: LIST
57871: LIST
57872: LIST
57873: LIST
57874: LIST
57875: LIST
57876: LIST
57877: LIST
57878: LIST
57879: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57880: LD_ADDR_VAR 0 45
57884: PUSH
57885: LD_INT 0
57887: PUSH
57888: LD_INT 0
57890: PUSH
57891: EMPTY
57892: LIST
57893: LIST
57894: PUSH
57895: LD_INT 0
57897: PUSH
57898: LD_INT 1
57900: NEG
57901: PUSH
57902: EMPTY
57903: LIST
57904: LIST
57905: PUSH
57906: LD_INT 1
57908: PUSH
57909: LD_INT 0
57911: PUSH
57912: EMPTY
57913: LIST
57914: LIST
57915: PUSH
57916: LD_INT 1
57918: PUSH
57919: LD_INT 1
57921: PUSH
57922: EMPTY
57923: LIST
57924: LIST
57925: PUSH
57926: LD_INT 0
57928: PUSH
57929: LD_INT 1
57931: PUSH
57932: EMPTY
57933: LIST
57934: LIST
57935: PUSH
57936: LD_INT 1
57938: NEG
57939: PUSH
57940: LD_INT 0
57942: PUSH
57943: EMPTY
57944: LIST
57945: LIST
57946: PUSH
57947: LD_INT 1
57949: NEG
57950: PUSH
57951: LD_INT 1
57953: NEG
57954: PUSH
57955: EMPTY
57956: LIST
57957: LIST
57958: PUSH
57959: LD_INT 1
57961: NEG
57962: PUSH
57963: LD_INT 2
57965: NEG
57966: PUSH
57967: EMPTY
57968: LIST
57969: LIST
57970: PUSH
57971: LD_INT 0
57973: PUSH
57974: LD_INT 2
57976: NEG
57977: PUSH
57978: EMPTY
57979: LIST
57980: LIST
57981: PUSH
57982: LD_INT 1
57984: PUSH
57985: LD_INT 1
57987: NEG
57988: PUSH
57989: EMPTY
57990: LIST
57991: LIST
57992: PUSH
57993: LD_INT 2
57995: PUSH
57996: LD_INT 1
57998: PUSH
57999: EMPTY
58000: LIST
58001: LIST
58002: PUSH
58003: LD_INT 2
58005: PUSH
58006: LD_INT 2
58008: PUSH
58009: EMPTY
58010: LIST
58011: LIST
58012: PUSH
58013: LD_INT 1
58015: PUSH
58016: LD_INT 2
58018: PUSH
58019: EMPTY
58020: LIST
58021: LIST
58022: PUSH
58023: LD_INT 0
58025: PUSH
58026: LD_INT 2
58028: PUSH
58029: EMPTY
58030: LIST
58031: LIST
58032: PUSH
58033: LD_INT 1
58035: NEG
58036: PUSH
58037: LD_INT 1
58039: PUSH
58040: EMPTY
58041: LIST
58042: LIST
58043: PUSH
58044: LD_INT 2
58046: NEG
58047: PUSH
58048: LD_INT 1
58050: NEG
58051: PUSH
58052: EMPTY
58053: LIST
58054: LIST
58055: PUSH
58056: LD_INT 2
58058: NEG
58059: PUSH
58060: LD_INT 2
58062: NEG
58063: PUSH
58064: EMPTY
58065: LIST
58066: LIST
58067: PUSH
58068: LD_INT 2
58070: NEG
58071: PUSH
58072: LD_INT 3
58074: NEG
58075: PUSH
58076: EMPTY
58077: LIST
58078: LIST
58079: PUSH
58080: LD_INT 1
58082: NEG
58083: PUSH
58084: LD_INT 3
58086: NEG
58087: PUSH
58088: EMPTY
58089: LIST
58090: LIST
58091: PUSH
58092: LD_INT 0
58094: PUSH
58095: LD_INT 3
58097: NEG
58098: PUSH
58099: EMPTY
58100: LIST
58101: LIST
58102: PUSH
58103: LD_INT 1
58105: PUSH
58106: LD_INT 2
58108: NEG
58109: PUSH
58110: EMPTY
58111: LIST
58112: LIST
58113: PUSH
58114: LD_INT 3
58116: PUSH
58117: LD_INT 2
58119: PUSH
58120: EMPTY
58121: LIST
58122: LIST
58123: PUSH
58124: LD_INT 3
58126: PUSH
58127: LD_INT 3
58129: PUSH
58130: EMPTY
58131: LIST
58132: LIST
58133: PUSH
58134: LD_INT 2
58136: PUSH
58137: LD_INT 3
58139: PUSH
58140: EMPTY
58141: LIST
58142: LIST
58143: PUSH
58144: LD_INT 1
58146: PUSH
58147: LD_INT 3
58149: PUSH
58150: EMPTY
58151: LIST
58152: LIST
58153: PUSH
58154: LD_INT 0
58156: PUSH
58157: LD_INT 3
58159: PUSH
58160: EMPTY
58161: LIST
58162: LIST
58163: PUSH
58164: LD_INT 1
58166: NEG
58167: PUSH
58168: LD_INT 2
58170: PUSH
58171: EMPTY
58172: LIST
58173: LIST
58174: PUSH
58175: LD_INT 3
58177: NEG
58178: PUSH
58179: LD_INT 2
58181: NEG
58182: PUSH
58183: EMPTY
58184: LIST
58185: LIST
58186: PUSH
58187: LD_INT 3
58189: NEG
58190: PUSH
58191: LD_INT 3
58193: NEG
58194: PUSH
58195: EMPTY
58196: LIST
58197: LIST
58198: PUSH
58199: EMPTY
58200: LIST
58201: LIST
58202: LIST
58203: LIST
58204: LIST
58205: LIST
58206: LIST
58207: LIST
58208: LIST
58209: LIST
58210: LIST
58211: LIST
58212: LIST
58213: LIST
58214: LIST
58215: LIST
58216: LIST
58217: LIST
58218: LIST
58219: LIST
58220: LIST
58221: LIST
58222: LIST
58223: LIST
58224: LIST
58225: LIST
58226: LIST
58227: LIST
58228: LIST
58229: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58230: LD_ADDR_VAR 0 46
58234: PUSH
58235: LD_INT 0
58237: PUSH
58238: LD_INT 0
58240: PUSH
58241: EMPTY
58242: LIST
58243: LIST
58244: PUSH
58245: LD_INT 0
58247: PUSH
58248: LD_INT 1
58250: NEG
58251: PUSH
58252: EMPTY
58253: LIST
58254: LIST
58255: PUSH
58256: LD_INT 1
58258: PUSH
58259: LD_INT 0
58261: PUSH
58262: EMPTY
58263: LIST
58264: LIST
58265: PUSH
58266: LD_INT 1
58268: PUSH
58269: LD_INT 1
58271: PUSH
58272: EMPTY
58273: LIST
58274: LIST
58275: PUSH
58276: LD_INT 0
58278: PUSH
58279: LD_INT 1
58281: PUSH
58282: EMPTY
58283: LIST
58284: LIST
58285: PUSH
58286: LD_INT 1
58288: NEG
58289: PUSH
58290: LD_INT 0
58292: PUSH
58293: EMPTY
58294: LIST
58295: LIST
58296: PUSH
58297: LD_INT 1
58299: NEG
58300: PUSH
58301: LD_INT 1
58303: NEG
58304: PUSH
58305: EMPTY
58306: LIST
58307: LIST
58308: PUSH
58309: LD_INT 1
58311: NEG
58312: PUSH
58313: LD_INT 2
58315: NEG
58316: PUSH
58317: EMPTY
58318: LIST
58319: LIST
58320: PUSH
58321: LD_INT 0
58323: PUSH
58324: LD_INT 2
58326: NEG
58327: PUSH
58328: EMPTY
58329: LIST
58330: LIST
58331: PUSH
58332: LD_INT 1
58334: PUSH
58335: LD_INT 1
58337: NEG
58338: PUSH
58339: EMPTY
58340: LIST
58341: LIST
58342: PUSH
58343: LD_INT 2
58345: PUSH
58346: LD_INT 0
58348: PUSH
58349: EMPTY
58350: LIST
58351: LIST
58352: PUSH
58353: LD_INT 2
58355: PUSH
58356: LD_INT 1
58358: PUSH
58359: EMPTY
58360: LIST
58361: LIST
58362: PUSH
58363: LD_INT 1
58365: PUSH
58366: LD_INT 2
58368: PUSH
58369: EMPTY
58370: LIST
58371: LIST
58372: PUSH
58373: LD_INT 0
58375: PUSH
58376: LD_INT 2
58378: PUSH
58379: EMPTY
58380: LIST
58381: LIST
58382: PUSH
58383: LD_INT 1
58385: NEG
58386: PUSH
58387: LD_INT 1
58389: PUSH
58390: EMPTY
58391: LIST
58392: LIST
58393: PUSH
58394: LD_INT 2
58396: NEG
58397: PUSH
58398: LD_INT 0
58400: PUSH
58401: EMPTY
58402: LIST
58403: LIST
58404: PUSH
58405: LD_INT 2
58407: NEG
58408: PUSH
58409: LD_INT 1
58411: NEG
58412: PUSH
58413: EMPTY
58414: LIST
58415: LIST
58416: PUSH
58417: LD_INT 1
58419: NEG
58420: PUSH
58421: LD_INT 3
58423: NEG
58424: PUSH
58425: EMPTY
58426: LIST
58427: LIST
58428: PUSH
58429: LD_INT 0
58431: PUSH
58432: LD_INT 3
58434: NEG
58435: PUSH
58436: EMPTY
58437: LIST
58438: LIST
58439: PUSH
58440: LD_INT 1
58442: PUSH
58443: LD_INT 2
58445: NEG
58446: PUSH
58447: EMPTY
58448: LIST
58449: LIST
58450: PUSH
58451: LD_INT 2
58453: PUSH
58454: LD_INT 1
58456: NEG
58457: PUSH
58458: EMPTY
58459: LIST
58460: LIST
58461: PUSH
58462: LD_INT 3
58464: PUSH
58465: LD_INT 0
58467: PUSH
58468: EMPTY
58469: LIST
58470: LIST
58471: PUSH
58472: LD_INT 3
58474: PUSH
58475: LD_INT 1
58477: PUSH
58478: EMPTY
58479: LIST
58480: LIST
58481: PUSH
58482: LD_INT 1
58484: PUSH
58485: LD_INT 3
58487: PUSH
58488: EMPTY
58489: LIST
58490: LIST
58491: PUSH
58492: LD_INT 0
58494: PUSH
58495: LD_INT 3
58497: PUSH
58498: EMPTY
58499: LIST
58500: LIST
58501: PUSH
58502: LD_INT 1
58504: NEG
58505: PUSH
58506: LD_INT 2
58508: PUSH
58509: EMPTY
58510: LIST
58511: LIST
58512: PUSH
58513: LD_INT 2
58515: NEG
58516: PUSH
58517: LD_INT 1
58519: PUSH
58520: EMPTY
58521: LIST
58522: LIST
58523: PUSH
58524: LD_INT 3
58526: NEG
58527: PUSH
58528: LD_INT 0
58530: PUSH
58531: EMPTY
58532: LIST
58533: LIST
58534: PUSH
58535: LD_INT 3
58537: NEG
58538: PUSH
58539: LD_INT 1
58541: NEG
58542: PUSH
58543: EMPTY
58544: LIST
58545: LIST
58546: PUSH
58547: EMPTY
58548: LIST
58549: LIST
58550: LIST
58551: LIST
58552: LIST
58553: LIST
58554: LIST
58555: LIST
58556: LIST
58557: LIST
58558: LIST
58559: LIST
58560: LIST
58561: LIST
58562: LIST
58563: LIST
58564: LIST
58565: LIST
58566: LIST
58567: LIST
58568: LIST
58569: LIST
58570: LIST
58571: LIST
58572: LIST
58573: LIST
58574: LIST
58575: LIST
58576: LIST
58577: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58578: LD_ADDR_VAR 0 47
58582: PUSH
58583: LD_INT 0
58585: PUSH
58586: LD_INT 0
58588: PUSH
58589: EMPTY
58590: LIST
58591: LIST
58592: PUSH
58593: LD_INT 0
58595: PUSH
58596: LD_INT 1
58598: NEG
58599: PUSH
58600: EMPTY
58601: LIST
58602: LIST
58603: PUSH
58604: LD_INT 1
58606: PUSH
58607: LD_INT 0
58609: PUSH
58610: EMPTY
58611: LIST
58612: LIST
58613: PUSH
58614: LD_INT 1
58616: PUSH
58617: LD_INT 1
58619: PUSH
58620: EMPTY
58621: LIST
58622: LIST
58623: PUSH
58624: LD_INT 0
58626: PUSH
58627: LD_INT 1
58629: PUSH
58630: EMPTY
58631: LIST
58632: LIST
58633: PUSH
58634: LD_INT 1
58636: NEG
58637: PUSH
58638: LD_INT 0
58640: PUSH
58641: EMPTY
58642: LIST
58643: LIST
58644: PUSH
58645: LD_INT 1
58647: NEG
58648: PUSH
58649: LD_INT 1
58651: NEG
58652: PUSH
58653: EMPTY
58654: LIST
58655: LIST
58656: PUSH
58657: LD_INT 1
58659: NEG
58660: PUSH
58661: LD_INT 2
58663: NEG
58664: PUSH
58665: EMPTY
58666: LIST
58667: LIST
58668: PUSH
58669: LD_INT 0
58671: PUSH
58672: LD_INT 2
58674: NEG
58675: PUSH
58676: EMPTY
58677: LIST
58678: LIST
58679: PUSH
58680: LD_INT 1
58682: PUSH
58683: LD_INT 1
58685: NEG
58686: PUSH
58687: EMPTY
58688: LIST
58689: LIST
58690: PUSH
58691: LD_INT 2
58693: NEG
58694: PUSH
58695: LD_INT 1
58697: NEG
58698: PUSH
58699: EMPTY
58700: LIST
58701: LIST
58702: PUSH
58703: LD_INT 2
58705: NEG
58706: PUSH
58707: LD_INT 2
58709: NEG
58710: PUSH
58711: EMPTY
58712: LIST
58713: LIST
58714: PUSH
58715: EMPTY
58716: LIST
58717: LIST
58718: LIST
58719: LIST
58720: LIST
58721: LIST
58722: LIST
58723: LIST
58724: LIST
58725: LIST
58726: LIST
58727: LIST
58728: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
58729: LD_ADDR_VAR 0 48
58733: PUSH
58734: LD_INT 0
58736: PUSH
58737: LD_INT 0
58739: PUSH
58740: EMPTY
58741: LIST
58742: LIST
58743: PUSH
58744: LD_INT 0
58746: PUSH
58747: LD_INT 1
58749: NEG
58750: PUSH
58751: EMPTY
58752: LIST
58753: LIST
58754: PUSH
58755: LD_INT 1
58757: PUSH
58758: LD_INT 0
58760: PUSH
58761: EMPTY
58762: LIST
58763: LIST
58764: PUSH
58765: LD_INT 1
58767: PUSH
58768: LD_INT 1
58770: PUSH
58771: EMPTY
58772: LIST
58773: LIST
58774: PUSH
58775: LD_INT 0
58777: PUSH
58778: LD_INT 1
58780: PUSH
58781: EMPTY
58782: LIST
58783: LIST
58784: PUSH
58785: LD_INT 1
58787: NEG
58788: PUSH
58789: LD_INT 0
58791: PUSH
58792: EMPTY
58793: LIST
58794: LIST
58795: PUSH
58796: LD_INT 1
58798: NEG
58799: PUSH
58800: LD_INT 1
58802: NEG
58803: PUSH
58804: EMPTY
58805: LIST
58806: LIST
58807: PUSH
58808: LD_INT 1
58810: NEG
58811: PUSH
58812: LD_INT 2
58814: NEG
58815: PUSH
58816: EMPTY
58817: LIST
58818: LIST
58819: PUSH
58820: LD_INT 0
58822: PUSH
58823: LD_INT 2
58825: NEG
58826: PUSH
58827: EMPTY
58828: LIST
58829: LIST
58830: PUSH
58831: LD_INT 1
58833: PUSH
58834: LD_INT 1
58836: NEG
58837: PUSH
58838: EMPTY
58839: LIST
58840: LIST
58841: PUSH
58842: LD_INT 2
58844: PUSH
58845: LD_INT 0
58847: PUSH
58848: EMPTY
58849: LIST
58850: LIST
58851: PUSH
58852: LD_INT 2
58854: PUSH
58855: LD_INT 1
58857: PUSH
58858: EMPTY
58859: LIST
58860: LIST
58861: PUSH
58862: EMPTY
58863: LIST
58864: LIST
58865: LIST
58866: LIST
58867: LIST
58868: LIST
58869: LIST
58870: LIST
58871: LIST
58872: LIST
58873: LIST
58874: LIST
58875: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
58876: LD_ADDR_VAR 0 49
58880: PUSH
58881: LD_INT 0
58883: PUSH
58884: LD_INT 0
58886: PUSH
58887: EMPTY
58888: LIST
58889: LIST
58890: PUSH
58891: LD_INT 0
58893: PUSH
58894: LD_INT 1
58896: NEG
58897: PUSH
58898: EMPTY
58899: LIST
58900: LIST
58901: PUSH
58902: LD_INT 1
58904: PUSH
58905: LD_INT 0
58907: PUSH
58908: EMPTY
58909: LIST
58910: LIST
58911: PUSH
58912: LD_INT 1
58914: PUSH
58915: LD_INT 1
58917: PUSH
58918: EMPTY
58919: LIST
58920: LIST
58921: PUSH
58922: LD_INT 0
58924: PUSH
58925: LD_INT 1
58927: PUSH
58928: EMPTY
58929: LIST
58930: LIST
58931: PUSH
58932: LD_INT 1
58934: NEG
58935: PUSH
58936: LD_INT 0
58938: PUSH
58939: EMPTY
58940: LIST
58941: LIST
58942: PUSH
58943: LD_INT 1
58945: NEG
58946: PUSH
58947: LD_INT 1
58949: NEG
58950: PUSH
58951: EMPTY
58952: LIST
58953: LIST
58954: PUSH
58955: LD_INT 1
58957: PUSH
58958: LD_INT 1
58960: NEG
58961: PUSH
58962: EMPTY
58963: LIST
58964: LIST
58965: PUSH
58966: LD_INT 2
58968: PUSH
58969: LD_INT 0
58971: PUSH
58972: EMPTY
58973: LIST
58974: LIST
58975: PUSH
58976: LD_INT 2
58978: PUSH
58979: LD_INT 1
58981: PUSH
58982: EMPTY
58983: LIST
58984: LIST
58985: PUSH
58986: LD_INT 2
58988: PUSH
58989: LD_INT 2
58991: PUSH
58992: EMPTY
58993: LIST
58994: LIST
58995: PUSH
58996: LD_INT 1
58998: PUSH
58999: LD_INT 2
59001: PUSH
59002: EMPTY
59003: LIST
59004: LIST
59005: PUSH
59006: EMPTY
59007: LIST
59008: LIST
59009: LIST
59010: LIST
59011: LIST
59012: LIST
59013: LIST
59014: LIST
59015: LIST
59016: LIST
59017: LIST
59018: LIST
59019: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
59020: LD_ADDR_VAR 0 50
59024: PUSH
59025: LD_INT 0
59027: PUSH
59028: LD_INT 0
59030: PUSH
59031: EMPTY
59032: LIST
59033: LIST
59034: PUSH
59035: LD_INT 0
59037: PUSH
59038: LD_INT 1
59040: NEG
59041: PUSH
59042: EMPTY
59043: LIST
59044: LIST
59045: PUSH
59046: LD_INT 1
59048: PUSH
59049: LD_INT 0
59051: PUSH
59052: EMPTY
59053: LIST
59054: LIST
59055: PUSH
59056: LD_INT 1
59058: PUSH
59059: LD_INT 1
59061: PUSH
59062: EMPTY
59063: LIST
59064: LIST
59065: PUSH
59066: LD_INT 0
59068: PUSH
59069: LD_INT 1
59071: PUSH
59072: EMPTY
59073: LIST
59074: LIST
59075: PUSH
59076: LD_INT 1
59078: NEG
59079: PUSH
59080: LD_INT 0
59082: PUSH
59083: EMPTY
59084: LIST
59085: LIST
59086: PUSH
59087: LD_INT 1
59089: NEG
59090: PUSH
59091: LD_INT 1
59093: NEG
59094: PUSH
59095: EMPTY
59096: LIST
59097: LIST
59098: PUSH
59099: LD_INT 2
59101: PUSH
59102: LD_INT 1
59104: PUSH
59105: EMPTY
59106: LIST
59107: LIST
59108: PUSH
59109: LD_INT 2
59111: PUSH
59112: LD_INT 2
59114: PUSH
59115: EMPTY
59116: LIST
59117: LIST
59118: PUSH
59119: LD_INT 1
59121: PUSH
59122: LD_INT 2
59124: PUSH
59125: EMPTY
59126: LIST
59127: LIST
59128: PUSH
59129: LD_INT 0
59131: PUSH
59132: LD_INT 2
59134: PUSH
59135: EMPTY
59136: LIST
59137: LIST
59138: PUSH
59139: LD_INT 1
59141: NEG
59142: PUSH
59143: LD_INT 1
59145: PUSH
59146: EMPTY
59147: LIST
59148: LIST
59149: PUSH
59150: EMPTY
59151: LIST
59152: LIST
59153: LIST
59154: LIST
59155: LIST
59156: LIST
59157: LIST
59158: LIST
59159: LIST
59160: LIST
59161: LIST
59162: LIST
59163: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
59164: LD_ADDR_VAR 0 51
59168: PUSH
59169: LD_INT 0
59171: PUSH
59172: LD_INT 0
59174: PUSH
59175: EMPTY
59176: LIST
59177: LIST
59178: PUSH
59179: LD_INT 0
59181: PUSH
59182: LD_INT 1
59184: NEG
59185: PUSH
59186: EMPTY
59187: LIST
59188: LIST
59189: PUSH
59190: LD_INT 1
59192: PUSH
59193: LD_INT 0
59195: PUSH
59196: EMPTY
59197: LIST
59198: LIST
59199: PUSH
59200: LD_INT 1
59202: PUSH
59203: LD_INT 1
59205: PUSH
59206: EMPTY
59207: LIST
59208: LIST
59209: PUSH
59210: LD_INT 0
59212: PUSH
59213: LD_INT 1
59215: PUSH
59216: EMPTY
59217: LIST
59218: LIST
59219: PUSH
59220: LD_INT 1
59222: NEG
59223: PUSH
59224: LD_INT 0
59226: PUSH
59227: EMPTY
59228: LIST
59229: LIST
59230: PUSH
59231: LD_INT 1
59233: NEG
59234: PUSH
59235: LD_INT 1
59237: NEG
59238: PUSH
59239: EMPTY
59240: LIST
59241: LIST
59242: PUSH
59243: LD_INT 1
59245: PUSH
59246: LD_INT 2
59248: PUSH
59249: EMPTY
59250: LIST
59251: LIST
59252: PUSH
59253: LD_INT 0
59255: PUSH
59256: LD_INT 2
59258: PUSH
59259: EMPTY
59260: LIST
59261: LIST
59262: PUSH
59263: LD_INT 1
59265: NEG
59266: PUSH
59267: LD_INT 1
59269: PUSH
59270: EMPTY
59271: LIST
59272: LIST
59273: PUSH
59274: LD_INT 2
59276: NEG
59277: PUSH
59278: LD_INT 0
59280: PUSH
59281: EMPTY
59282: LIST
59283: LIST
59284: PUSH
59285: LD_INT 2
59287: NEG
59288: PUSH
59289: LD_INT 1
59291: NEG
59292: PUSH
59293: EMPTY
59294: LIST
59295: LIST
59296: PUSH
59297: EMPTY
59298: LIST
59299: LIST
59300: LIST
59301: LIST
59302: LIST
59303: LIST
59304: LIST
59305: LIST
59306: LIST
59307: LIST
59308: LIST
59309: LIST
59310: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59311: LD_ADDR_VAR 0 52
59315: PUSH
59316: LD_INT 0
59318: PUSH
59319: LD_INT 0
59321: PUSH
59322: EMPTY
59323: LIST
59324: LIST
59325: PUSH
59326: LD_INT 0
59328: PUSH
59329: LD_INT 1
59331: NEG
59332: PUSH
59333: EMPTY
59334: LIST
59335: LIST
59336: PUSH
59337: LD_INT 1
59339: PUSH
59340: LD_INT 0
59342: PUSH
59343: EMPTY
59344: LIST
59345: LIST
59346: PUSH
59347: LD_INT 1
59349: PUSH
59350: LD_INT 1
59352: PUSH
59353: EMPTY
59354: LIST
59355: LIST
59356: PUSH
59357: LD_INT 0
59359: PUSH
59360: LD_INT 1
59362: PUSH
59363: EMPTY
59364: LIST
59365: LIST
59366: PUSH
59367: LD_INT 1
59369: NEG
59370: PUSH
59371: LD_INT 0
59373: PUSH
59374: EMPTY
59375: LIST
59376: LIST
59377: PUSH
59378: LD_INT 1
59380: NEG
59381: PUSH
59382: LD_INT 1
59384: NEG
59385: PUSH
59386: EMPTY
59387: LIST
59388: LIST
59389: PUSH
59390: LD_INT 1
59392: NEG
59393: PUSH
59394: LD_INT 2
59396: NEG
59397: PUSH
59398: EMPTY
59399: LIST
59400: LIST
59401: PUSH
59402: LD_INT 1
59404: NEG
59405: PUSH
59406: LD_INT 1
59408: PUSH
59409: EMPTY
59410: LIST
59411: LIST
59412: PUSH
59413: LD_INT 2
59415: NEG
59416: PUSH
59417: LD_INT 0
59419: PUSH
59420: EMPTY
59421: LIST
59422: LIST
59423: PUSH
59424: LD_INT 2
59426: NEG
59427: PUSH
59428: LD_INT 1
59430: NEG
59431: PUSH
59432: EMPTY
59433: LIST
59434: LIST
59435: PUSH
59436: LD_INT 2
59438: NEG
59439: PUSH
59440: LD_INT 2
59442: NEG
59443: PUSH
59444: EMPTY
59445: LIST
59446: LIST
59447: PUSH
59448: EMPTY
59449: LIST
59450: LIST
59451: LIST
59452: LIST
59453: LIST
59454: LIST
59455: LIST
59456: LIST
59457: LIST
59458: LIST
59459: LIST
59460: LIST
59461: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59462: LD_ADDR_VAR 0 53
59466: PUSH
59467: LD_INT 0
59469: PUSH
59470: LD_INT 0
59472: PUSH
59473: EMPTY
59474: LIST
59475: LIST
59476: PUSH
59477: LD_INT 0
59479: PUSH
59480: LD_INT 1
59482: NEG
59483: PUSH
59484: EMPTY
59485: LIST
59486: LIST
59487: PUSH
59488: LD_INT 1
59490: PUSH
59491: LD_INT 0
59493: PUSH
59494: EMPTY
59495: LIST
59496: LIST
59497: PUSH
59498: LD_INT 1
59500: PUSH
59501: LD_INT 1
59503: PUSH
59504: EMPTY
59505: LIST
59506: LIST
59507: PUSH
59508: LD_INT 0
59510: PUSH
59511: LD_INT 1
59513: PUSH
59514: EMPTY
59515: LIST
59516: LIST
59517: PUSH
59518: LD_INT 1
59520: NEG
59521: PUSH
59522: LD_INT 0
59524: PUSH
59525: EMPTY
59526: LIST
59527: LIST
59528: PUSH
59529: LD_INT 1
59531: NEG
59532: PUSH
59533: LD_INT 1
59535: NEG
59536: PUSH
59537: EMPTY
59538: LIST
59539: LIST
59540: PUSH
59541: LD_INT 1
59543: NEG
59544: PUSH
59545: LD_INT 2
59547: NEG
59548: PUSH
59549: EMPTY
59550: LIST
59551: LIST
59552: PUSH
59553: LD_INT 0
59555: PUSH
59556: LD_INT 2
59558: NEG
59559: PUSH
59560: EMPTY
59561: LIST
59562: LIST
59563: PUSH
59564: LD_INT 1
59566: PUSH
59567: LD_INT 1
59569: NEG
59570: PUSH
59571: EMPTY
59572: LIST
59573: LIST
59574: PUSH
59575: LD_INT 2
59577: PUSH
59578: LD_INT 0
59580: PUSH
59581: EMPTY
59582: LIST
59583: LIST
59584: PUSH
59585: LD_INT 2
59587: PUSH
59588: LD_INT 1
59590: PUSH
59591: EMPTY
59592: LIST
59593: LIST
59594: PUSH
59595: LD_INT 2
59597: PUSH
59598: LD_INT 2
59600: PUSH
59601: EMPTY
59602: LIST
59603: LIST
59604: PUSH
59605: LD_INT 1
59607: PUSH
59608: LD_INT 2
59610: PUSH
59611: EMPTY
59612: LIST
59613: LIST
59614: PUSH
59615: LD_INT 0
59617: PUSH
59618: LD_INT 2
59620: PUSH
59621: EMPTY
59622: LIST
59623: LIST
59624: PUSH
59625: LD_INT 1
59627: NEG
59628: PUSH
59629: LD_INT 1
59631: PUSH
59632: EMPTY
59633: LIST
59634: LIST
59635: PUSH
59636: LD_INT 2
59638: NEG
59639: PUSH
59640: LD_INT 0
59642: PUSH
59643: EMPTY
59644: LIST
59645: LIST
59646: PUSH
59647: LD_INT 2
59649: NEG
59650: PUSH
59651: LD_INT 1
59653: NEG
59654: PUSH
59655: EMPTY
59656: LIST
59657: LIST
59658: PUSH
59659: LD_INT 2
59661: NEG
59662: PUSH
59663: LD_INT 2
59665: NEG
59666: PUSH
59667: EMPTY
59668: LIST
59669: LIST
59670: PUSH
59671: EMPTY
59672: LIST
59673: LIST
59674: LIST
59675: LIST
59676: LIST
59677: LIST
59678: LIST
59679: LIST
59680: LIST
59681: LIST
59682: LIST
59683: LIST
59684: LIST
59685: LIST
59686: LIST
59687: LIST
59688: LIST
59689: LIST
59690: LIST
59691: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59692: LD_ADDR_VAR 0 54
59696: PUSH
59697: LD_INT 0
59699: PUSH
59700: LD_INT 0
59702: PUSH
59703: EMPTY
59704: LIST
59705: LIST
59706: PUSH
59707: LD_INT 0
59709: PUSH
59710: LD_INT 1
59712: NEG
59713: PUSH
59714: EMPTY
59715: LIST
59716: LIST
59717: PUSH
59718: LD_INT 1
59720: PUSH
59721: LD_INT 0
59723: PUSH
59724: EMPTY
59725: LIST
59726: LIST
59727: PUSH
59728: LD_INT 1
59730: PUSH
59731: LD_INT 1
59733: PUSH
59734: EMPTY
59735: LIST
59736: LIST
59737: PUSH
59738: LD_INT 0
59740: PUSH
59741: LD_INT 1
59743: PUSH
59744: EMPTY
59745: LIST
59746: LIST
59747: PUSH
59748: LD_INT 1
59750: NEG
59751: PUSH
59752: LD_INT 0
59754: PUSH
59755: EMPTY
59756: LIST
59757: LIST
59758: PUSH
59759: LD_INT 1
59761: NEG
59762: PUSH
59763: LD_INT 1
59765: NEG
59766: PUSH
59767: EMPTY
59768: LIST
59769: LIST
59770: PUSH
59771: LD_INT 1
59773: NEG
59774: PUSH
59775: LD_INT 2
59777: NEG
59778: PUSH
59779: EMPTY
59780: LIST
59781: LIST
59782: PUSH
59783: LD_INT 0
59785: PUSH
59786: LD_INT 2
59788: NEG
59789: PUSH
59790: EMPTY
59791: LIST
59792: LIST
59793: PUSH
59794: LD_INT 1
59796: PUSH
59797: LD_INT 1
59799: NEG
59800: PUSH
59801: EMPTY
59802: LIST
59803: LIST
59804: PUSH
59805: LD_INT 2
59807: PUSH
59808: LD_INT 0
59810: PUSH
59811: EMPTY
59812: LIST
59813: LIST
59814: PUSH
59815: LD_INT 2
59817: PUSH
59818: LD_INT 1
59820: PUSH
59821: EMPTY
59822: LIST
59823: LIST
59824: PUSH
59825: LD_INT 2
59827: PUSH
59828: LD_INT 2
59830: PUSH
59831: EMPTY
59832: LIST
59833: LIST
59834: PUSH
59835: LD_INT 1
59837: PUSH
59838: LD_INT 2
59840: PUSH
59841: EMPTY
59842: LIST
59843: LIST
59844: PUSH
59845: LD_INT 0
59847: PUSH
59848: LD_INT 2
59850: PUSH
59851: EMPTY
59852: LIST
59853: LIST
59854: PUSH
59855: LD_INT 1
59857: NEG
59858: PUSH
59859: LD_INT 1
59861: PUSH
59862: EMPTY
59863: LIST
59864: LIST
59865: PUSH
59866: LD_INT 2
59868: NEG
59869: PUSH
59870: LD_INT 0
59872: PUSH
59873: EMPTY
59874: LIST
59875: LIST
59876: PUSH
59877: LD_INT 2
59879: NEG
59880: PUSH
59881: LD_INT 1
59883: NEG
59884: PUSH
59885: EMPTY
59886: LIST
59887: LIST
59888: PUSH
59889: LD_INT 2
59891: NEG
59892: PUSH
59893: LD_INT 2
59895: NEG
59896: PUSH
59897: EMPTY
59898: LIST
59899: LIST
59900: PUSH
59901: EMPTY
59902: LIST
59903: LIST
59904: LIST
59905: LIST
59906: LIST
59907: LIST
59908: LIST
59909: LIST
59910: LIST
59911: LIST
59912: LIST
59913: LIST
59914: LIST
59915: LIST
59916: LIST
59917: LIST
59918: LIST
59919: LIST
59920: LIST
59921: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59922: LD_ADDR_VAR 0 55
59926: PUSH
59927: LD_INT 0
59929: PUSH
59930: LD_INT 0
59932: PUSH
59933: EMPTY
59934: LIST
59935: LIST
59936: PUSH
59937: LD_INT 0
59939: PUSH
59940: LD_INT 1
59942: NEG
59943: PUSH
59944: EMPTY
59945: LIST
59946: LIST
59947: PUSH
59948: LD_INT 1
59950: PUSH
59951: LD_INT 0
59953: PUSH
59954: EMPTY
59955: LIST
59956: LIST
59957: PUSH
59958: LD_INT 1
59960: PUSH
59961: LD_INT 1
59963: PUSH
59964: EMPTY
59965: LIST
59966: LIST
59967: PUSH
59968: LD_INT 0
59970: PUSH
59971: LD_INT 1
59973: PUSH
59974: EMPTY
59975: LIST
59976: LIST
59977: PUSH
59978: LD_INT 1
59980: NEG
59981: PUSH
59982: LD_INT 0
59984: PUSH
59985: EMPTY
59986: LIST
59987: LIST
59988: PUSH
59989: LD_INT 1
59991: NEG
59992: PUSH
59993: LD_INT 1
59995: NEG
59996: PUSH
59997: EMPTY
59998: LIST
59999: LIST
60000: PUSH
60001: LD_INT 1
60003: NEG
60004: PUSH
60005: LD_INT 2
60007: NEG
60008: PUSH
60009: EMPTY
60010: LIST
60011: LIST
60012: PUSH
60013: LD_INT 0
60015: PUSH
60016: LD_INT 2
60018: NEG
60019: PUSH
60020: EMPTY
60021: LIST
60022: LIST
60023: PUSH
60024: LD_INT 1
60026: PUSH
60027: LD_INT 1
60029: NEG
60030: PUSH
60031: EMPTY
60032: LIST
60033: LIST
60034: PUSH
60035: LD_INT 2
60037: PUSH
60038: LD_INT 0
60040: PUSH
60041: EMPTY
60042: LIST
60043: LIST
60044: PUSH
60045: LD_INT 2
60047: PUSH
60048: LD_INT 1
60050: PUSH
60051: EMPTY
60052: LIST
60053: LIST
60054: PUSH
60055: LD_INT 2
60057: PUSH
60058: LD_INT 2
60060: PUSH
60061: EMPTY
60062: LIST
60063: LIST
60064: PUSH
60065: LD_INT 1
60067: PUSH
60068: LD_INT 2
60070: PUSH
60071: EMPTY
60072: LIST
60073: LIST
60074: PUSH
60075: LD_INT 0
60077: PUSH
60078: LD_INT 2
60080: PUSH
60081: EMPTY
60082: LIST
60083: LIST
60084: PUSH
60085: LD_INT 1
60087: NEG
60088: PUSH
60089: LD_INT 1
60091: PUSH
60092: EMPTY
60093: LIST
60094: LIST
60095: PUSH
60096: LD_INT 2
60098: NEG
60099: PUSH
60100: LD_INT 0
60102: PUSH
60103: EMPTY
60104: LIST
60105: LIST
60106: PUSH
60107: LD_INT 2
60109: NEG
60110: PUSH
60111: LD_INT 1
60113: NEG
60114: PUSH
60115: EMPTY
60116: LIST
60117: LIST
60118: PUSH
60119: LD_INT 2
60121: NEG
60122: PUSH
60123: LD_INT 2
60125: NEG
60126: PUSH
60127: EMPTY
60128: LIST
60129: LIST
60130: PUSH
60131: EMPTY
60132: LIST
60133: LIST
60134: LIST
60135: LIST
60136: LIST
60137: LIST
60138: LIST
60139: LIST
60140: LIST
60141: LIST
60142: LIST
60143: LIST
60144: LIST
60145: LIST
60146: LIST
60147: LIST
60148: LIST
60149: LIST
60150: LIST
60151: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60152: LD_ADDR_VAR 0 56
60156: PUSH
60157: LD_INT 0
60159: PUSH
60160: LD_INT 0
60162: PUSH
60163: EMPTY
60164: LIST
60165: LIST
60166: PUSH
60167: LD_INT 0
60169: PUSH
60170: LD_INT 1
60172: NEG
60173: PUSH
60174: EMPTY
60175: LIST
60176: LIST
60177: PUSH
60178: LD_INT 1
60180: PUSH
60181: LD_INT 0
60183: PUSH
60184: EMPTY
60185: LIST
60186: LIST
60187: PUSH
60188: LD_INT 1
60190: PUSH
60191: LD_INT 1
60193: PUSH
60194: EMPTY
60195: LIST
60196: LIST
60197: PUSH
60198: LD_INT 0
60200: PUSH
60201: LD_INT 1
60203: PUSH
60204: EMPTY
60205: LIST
60206: LIST
60207: PUSH
60208: LD_INT 1
60210: NEG
60211: PUSH
60212: LD_INT 0
60214: PUSH
60215: EMPTY
60216: LIST
60217: LIST
60218: PUSH
60219: LD_INT 1
60221: NEG
60222: PUSH
60223: LD_INT 1
60225: NEG
60226: PUSH
60227: EMPTY
60228: LIST
60229: LIST
60230: PUSH
60231: LD_INT 1
60233: NEG
60234: PUSH
60235: LD_INT 2
60237: NEG
60238: PUSH
60239: EMPTY
60240: LIST
60241: LIST
60242: PUSH
60243: LD_INT 0
60245: PUSH
60246: LD_INT 2
60248: NEG
60249: PUSH
60250: EMPTY
60251: LIST
60252: LIST
60253: PUSH
60254: LD_INT 1
60256: PUSH
60257: LD_INT 1
60259: NEG
60260: PUSH
60261: EMPTY
60262: LIST
60263: LIST
60264: PUSH
60265: LD_INT 2
60267: PUSH
60268: LD_INT 0
60270: PUSH
60271: EMPTY
60272: LIST
60273: LIST
60274: PUSH
60275: LD_INT 2
60277: PUSH
60278: LD_INT 1
60280: PUSH
60281: EMPTY
60282: LIST
60283: LIST
60284: PUSH
60285: LD_INT 2
60287: PUSH
60288: LD_INT 2
60290: PUSH
60291: EMPTY
60292: LIST
60293: LIST
60294: PUSH
60295: LD_INT 1
60297: PUSH
60298: LD_INT 2
60300: PUSH
60301: EMPTY
60302: LIST
60303: LIST
60304: PUSH
60305: LD_INT 0
60307: PUSH
60308: LD_INT 2
60310: PUSH
60311: EMPTY
60312: LIST
60313: LIST
60314: PUSH
60315: LD_INT 1
60317: NEG
60318: PUSH
60319: LD_INT 1
60321: PUSH
60322: EMPTY
60323: LIST
60324: LIST
60325: PUSH
60326: LD_INT 2
60328: NEG
60329: PUSH
60330: LD_INT 0
60332: PUSH
60333: EMPTY
60334: LIST
60335: LIST
60336: PUSH
60337: LD_INT 2
60339: NEG
60340: PUSH
60341: LD_INT 1
60343: NEG
60344: PUSH
60345: EMPTY
60346: LIST
60347: LIST
60348: PUSH
60349: LD_INT 2
60351: NEG
60352: PUSH
60353: LD_INT 2
60355: NEG
60356: PUSH
60357: EMPTY
60358: LIST
60359: LIST
60360: PUSH
60361: EMPTY
60362: LIST
60363: LIST
60364: LIST
60365: LIST
60366: LIST
60367: LIST
60368: LIST
60369: LIST
60370: LIST
60371: LIST
60372: LIST
60373: LIST
60374: LIST
60375: LIST
60376: LIST
60377: LIST
60378: LIST
60379: LIST
60380: LIST
60381: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60382: LD_ADDR_VAR 0 57
60386: PUSH
60387: LD_INT 0
60389: PUSH
60390: LD_INT 0
60392: PUSH
60393: EMPTY
60394: LIST
60395: LIST
60396: PUSH
60397: LD_INT 0
60399: PUSH
60400: LD_INT 1
60402: NEG
60403: PUSH
60404: EMPTY
60405: LIST
60406: LIST
60407: PUSH
60408: LD_INT 1
60410: PUSH
60411: LD_INT 0
60413: PUSH
60414: EMPTY
60415: LIST
60416: LIST
60417: PUSH
60418: LD_INT 1
60420: PUSH
60421: LD_INT 1
60423: PUSH
60424: EMPTY
60425: LIST
60426: LIST
60427: PUSH
60428: LD_INT 0
60430: PUSH
60431: LD_INT 1
60433: PUSH
60434: EMPTY
60435: LIST
60436: LIST
60437: PUSH
60438: LD_INT 1
60440: NEG
60441: PUSH
60442: LD_INT 0
60444: PUSH
60445: EMPTY
60446: LIST
60447: LIST
60448: PUSH
60449: LD_INT 1
60451: NEG
60452: PUSH
60453: LD_INT 1
60455: NEG
60456: PUSH
60457: EMPTY
60458: LIST
60459: LIST
60460: PUSH
60461: LD_INT 1
60463: NEG
60464: PUSH
60465: LD_INT 2
60467: NEG
60468: PUSH
60469: EMPTY
60470: LIST
60471: LIST
60472: PUSH
60473: LD_INT 0
60475: PUSH
60476: LD_INT 2
60478: NEG
60479: PUSH
60480: EMPTY
60481: LIST
60482: LIST
60483: PUSH
60484: LD_INT 1
60486: PUSH
60487: LD_INT 1
60489: NEG
60490: PUSH
60491: EMPTY
60492: LIST
60493: LIST
60494: PUSH
60495: LD_INT 2
60497: PUSH
60498: LD_INT 0
60500: PUSH
60501: EMPTY
60502: LIST
60503: LIST
60504: PUSH
60505: LD_INT 2
60507: PUSH
60508: LD_INT 1
60510: PUSH
60511: EMPTY
60512: LIST
60513: LIST
60514: PUSH
60515: LD_INT 2
60517: PUSH
60518: LD_INT 2
60520: PUSH
60521: EMPTY
60522: LIST
60523: LIST
60524: PUSH
60525: LD_INT 1
60527: PUSH
60528: LD_INT 2
60530: PUSH
60531: EMPTY
60532: LIST
60533: LIST
60534: PUSH
60535: LD_INT 0
60537: PUSH
60538: LD_INT 2
60540: PUSH
60541: EMPTY
60542: LIST
60543: LIST
60544: PUSH
60545: LD_INT 1
60547: NEG
60548: PUSH
60549: LD_INT 1
60551: PUSH
60552: EMPTY
60553: LIST
60554: LIST
60555: PUSH
60556: LD_INT 2
60558: NEG
60559: PUSH
60560: LD_INT 0
60562: PUSH
60563: EMPTY
60564: LIST
60565: LIST
60566: PUSH
60567: LD_INT 2
60569: NEG
60570: PUSH
60571: LD_INT 1
60573: NEG
60574: PUSH
60575: EMPTY
60576: LIST
60577: LIST
60578: PUSH
60579: LD_INT 2
60581: NEG
60582: PUSH
60583: LD_INT 2
60585: NEG
60586: PUSH
60587: EMPTY
60588: LIST
60589: LIST
60590: PUSH
60591: EMPTY
60592: LIST
60593: LIST
60594: LIST
60595: LIST
60596: LIST
60597: LIST
60598: LIST
60599: LIST
60600: LIST
60601: LIST
60602: LIST
60603: LIST
60604: LIST
60605: LIST
60606: LIST
60607: LIST
60608: LIST
60609: LIST
60610: LIST
60611: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60612: LD_ADDR_VAR 0 58
60616: PUSH
60617: LD_INT 0
60619: PUSH
60620: LD_INT 0
60622: PUSH
60623: EMPTY
60624: LIST
60625: LIST
60626: PUSH
60627: LD_INT 0
60629: PUSH
60630: LD_INT 1
60632: NEG
60633: PUSH
60634: EMPTY
60635: LIST
60636: LIST
60637: PUSH
60638: LD_INT 1
60640: PUSH
60641: LD_INT 0
60643: PUSH
60644: EMPTY
60645: LIST
60646: LIST
60647: PUSH
60648: LD_INT 1
60650: PUSH
60651: LD_INT 1
60653: PUSH
60654: EMPTY
60655: LIST
60656: LIST
60657: PUSH
60658: LD_INT 0
60660: PUSH
60661: LD_INT 1
60663: PUSH
60664: EMPTY
60665: LIST
60666: LIST
60667: PUSH
60668: LD_INT 1
60670: NEG
60671: PUSH
60672: LD_INT 0
60674: PUSH
60675: EMPTY
60676: LIST
60677: LIST
60678: PUSH
60679: LD_INT 1
60681: NEG
60682: PUSH
60683: LD_INT 1
60685: NEG
60686: PUSH
60687: EMPTY
60688: LIST
60689: LIST
60690: PUSH
60691: LD_INT 1
60693: NEG
60694: PUSH
60695: LD_INT 2
60697: NEG
60698: PUSH
60699: EMPTY
60700: LIST
60701: LIST
60702: PUSH
60703: LD_INT 0
60705: PUSH
60706: LD_INT 2
60708: NEG
60709: PUSH
60710: EMPTY
60711: LIST
60712: LIST
60713: PUSH
60714: LD_INT 1
60716: PUSH
60717: LD_INT 1
60719: NEG
60720: PUSH
60721: EMPTY
60722: LIST
60723: LIST
60724: PUSH
60725: LD_INT 2
60727: PUSH
60728: LD_INT 0
60730: PUSH
60731: EMPTY
60732: LIST
60733: LIST
60734: PUSH
60735: LD_INT 2
60737: PUSH
60738: LD_INT 1
60740: PUSH
60741: EMPTY
60742: LIST
60743: LIST
60744: PUSH
60745: LD_INT 2
60747: PUSH
60748: LD_INT 2
60750: PUSH
60751: EMPTY
60752: LIST
60753: LIST
60754: PUSH
60755: LD_INT 1
60757: PUSH
60758: LD_INT 2
60760: PUSH
60761: EMPTY
60762: LIST
60763: LIST
60764: PUSH
60765: LD_INT 0
60767: PUSH
60768: LD_INT 2
60770: PUSH
60771: EMPTY
60772: LIST
60773: LIST
60774: PUSH
60775: LD_INT 1
60777: NEG
60778: PUSH
60779: LD_INT 1
60781: PUSH
60782: EMPTY
60783: LIST
60784: LIST
60785: PUSH
60786: LD_INT 2
60788: NEG
60789: PUSH
60790: LD_INT 0
60792: PUSH
60793: EMPTY
60794: LIST
60795: LIST
60796: PUSH
60797: LD_INT 2
60799: NEG
60800: PUSH
60801: LD_INT 1
60803: NEG
60804: PUSH
60805: EMPTY
60806: LIST
60807: LIST
60808: PUSH
60809: LD_INT 2
60811: NEG
60812: PUSH
60813: LD_INT 2
60815: NEG
60816: PUSH
60817: EMPTY
60818: LIST
60819: LIST
60820: PUSH
60821: EMPTY
60822: LIST
60823: LIST
60824: LIST
60825: LIST
60826: LIST
60827: LIST
60828: LIST
60829: LIST
60830: LIST
60831: LIST
60832: LIST
60833: LIST
60834: LIST
60835: LIST
60836: LIST
60837: LIST
60838: LIST
60839: LIST
60840: LIST
60841: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60842: LD_ADDR_VAR 0 59
60846: PUSH
60847: LD_INT 0
60849: PUSH
60850: LD_INT 0
60852: PUSH
60853: EMPTY
60854: LIST
60855: LIST
60856: PUSH
60857: LD_INT 0
60859: PUSH
60860: LD_INT 1
60862: NEG
60863: PUSH
60864: EMPTY
60865: LIST
60866: LIST
60867: PUSH
60868: LD_INT 1
60870: PUSH
60871: LD_INT 0
60873: PUSH
60874: EMPTY
60875: LIST
60876: LIST
60877: PUSH
60878: LD_INT 1
60880: PUSH
60881: LD_INT 1
60883: PUSH
60884: EMPTY
60885: LIST
60886: LIST
60887: PUSH
60888: LD_INT 0
60890: PUSH
60891: LD_INT 1
60893: PUSH
60894: EMPTY
60895: LIST
60896: LIST
60897: PUSH
60898: LD_INT 1
60900: NEG
60901: PUSH
60902: LD_INT 0
60904: PUSH
60905: EMPTY
60906: LIST
60907: LIST
60908: PUSH
60909: LD_INT 1
60911: NEG
60912: PUSH
60913: LD_INT 1
60915: NEG
60916: PUSH
60917: EMPTY
60918: LIST
60919: LIST
60920: PUSH
60921: EMPTY
60922: LIST
60923: LIST
60924: LIST
60925: LIST
60926: LIST
60927: LIST
60928: LIST
60929: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60930: LD_ADDR_VAR 0 60
60934: PUSH
60935: LD_INT 0
60937: PUSH
60938: LD_INT 0
60940: PUSH
60941: EMPTY
60942: LIST
60943: LIST
60944: PUSH
60945: LD_INT 0
60947: PUSH
60948: LD_INT 1
60950: NEG
60951: PUSH
60952: EMPTY
60953: LIST
60954: LIST
60955: PUSH
60956: LD_INT 1
60958: PUSH
60959: LD_INT 0
60961: PUSH
60962: EMPTY
60963: LIST
60964: LIST
60965: PUSH
60966: LD_INT 1
60968: PUSH
60969: LD_INT 1
60971: PUSH
60972: EMPTY
60973: LIST
60974: LIST
60975: PUSH
60976: LD_INT 0
60978: PUSH
60979: LD_INT 1
60981: PUSH
60982: EMPTY
60983: LIST
60984: LIST
60985: PUSH
60986: LD_INT 1
60988: NEG
60989: PUSH
60990: LD_INT 0
60992: PUSH
60993: EMPTY
60994: LIST
60995: LIST
60996: PUSH
60997: LD_INT 1
60999: NEG
61000: PUSH
61001: LD_INT 1
61003: NEG
61004: PUSH
61005: EMPTY
61006: LIST
61007: LIST
61008: PUSH
61009: EMPTY
61010: LIST
61011: LIST
61012: LIST
61013: LIST
61014: LIST
61015: LIST
61016: LIST
61017: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61018: LD_ADDR_VAR 0 61
61022: PUSH
61023: LD_INT 0
61025: PUSH
61026: LD_INT 0
61028: PUSH
61029: EMPTY
61030: LIST
61031: LIST
61032: PUSH
61033: LD_INT 0
61035: PUSH
61036: LD_INT 1
61038: NEG
61039: PUSH
61040: EMPTY
61041: LIST
61042: LIST
61043: PUSH
61044: LD_INT 1
61046: PUSH
61047: LD_INT 0
61049: PUSH
61050: EMPTY
61051: LIST
61052: LIST
61053: PUSH
61054: LD_INT 1
61056: PUSH
61057: LD_INT 1
61059: PUSH
61060: EMPTY
61061: LIST
61062: LIST
61063: PUSH
61064: LD_INT 0
61066: PUSH
61067: LD_INT 1
61069: PUSH
61070: EMPTY
61071: LIST
61072: LIST
61073: PUSH
61074: LD_INT 1
61076: NEG
61077: PUSH
61078: LD_INT 0
61080: PUSH
61081: EMPTY
61082: LIST
61083: LIST
61084: PUSH
61085: LD_INT 1
61087: NEG
61088: PUSH
61089: LD_INT 1
61091: NEG
61092: PUSH
61093: EMPTY
61094: LIST
61095: LIST
61096: PUSH
61097: EMPTY
61098: LIST
61099: LIST
61100: LIST
61101: LIST
61102: LIST
61103: LIST
61104: LIST
61105: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61106: LD_ADDR_VAR 0 62
61110: PUSH
61111: LD_INT 0
61113: PUSH
61114: LD_INT 0
61116: PUSH
61117: EMPTY
61118: LIST
61119: LIST
61120: PUSH
61121: LD_INT 0
61123: PUSH
61124: LD_INT 1
61126: NEG
61127: PUSH
61128: EMPTY
61129: LIST
61130: LIST
61131: PUSH
61132: LD_INT 1
61134: PUSH
61135: LD_INT 0
61137: PUSH
61138: EMPTY
61139: LIST
61140: LIST
61141: PUSH
61142: LD_INT 1
61144: PUSH
61145: LD_INT 1
61147: PUSH
61148: EMPTY
61149: LIST
61150: LIST
61151: PUSH
61152: LD_INT 0
61154: PUSH
61155: LD_INT 1
61157: PUSH
61158: EMPTY
61159: LIST
61160: LIST
61161: PUSH
61162: LD_INT 1
61164: NEG
61165: PUSH
61166: LD_INT 0
61168: PUSH
61169: EMPTY
61170: LIST
61171: LIST
61172: PUSH
61173: LD_INT 1
61175: NEG
61176: PUSH
61177: LD_INT 1
61179: NEG
61180: PUSH
61181: EMPTY
61182: LIST
61183: LIST
61184: PUSH
61185: EMPTY
61186: LIST
61187: LIST
61188: LIST
61189: LIST
61190: LIST
61191: LIST
61192: LIST
61193: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61194: LD_ADDR_VAR 0 63
61198: PUSH
61199: LD_INT 0
61201: PUSH
61202: LD_INT 0
61204: PUSH
61205: EMPTY
61206: LIST
61207: LIST
61208: PUSH
61209: LD_INT 0
61211: PUSH
61212: LD_INT 1
61214: NEG
61215: PUSH
61216: EMPTY
61217: LIST
61218: LIST
61219: PUSH
61220: LD_INT 1
61222: PUSH
61223: LD_INT 0
61225: PUSH
61226: EMPTY
61227: LIST
61228: LIST
61229: PUSH
61230: LD_INT 1
61232: PUSH
61233: LD_INT 1
61235: PUSH
61236: EMPTY
61237: LIST
61238: LIST
61239: PUSH
61240: LD_INT 0
61242: PUSH
61243: LD_INT 1
61245: PUSH
61246: EMPTY
61247: LIST
61248: LIST
61249: PUSH
61250: LD_INT 1
61252: NEG
61253: PUSH
61254: LD_INT 0
61256: PUSH
61257: EMPTY
61258: LIST
61259: LIST
61260: PUSH
61261: LD_INT 1
61263: NEG
61264: PUSH
61265: LD_INT 1
61267: NEG
61268: PUSH
61269: EMPTY
61270: LIST
61271: LIST
61272: PUSH
61273: EMPTY
61274: LIST
61275: LIST
61276: LIST
61277: LIST
61278: LIST
61279: LIST
61280: LIST
61281: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61282: LD_ADDR_VAR 0 64
61286: PUSH
61287: LD_INT 0
61289: PUSH
61290: LD_INT 0
61292: PUSH
61293: EMPTY
61294: LIST
61295: LIST
61296: PUSH
61297: LD_INT 0
61299: PUSH
61300: LD_INT 1
61302: NEG
61303: PUSH
61304: EMPTY
61305: LIST
61306: LIST
61307: PUSH
61308: LD_INT 1
61310: PUSH
61311: LD_INT 0
61313: PUSH
61314: EMPTY
61315: LIST
61316: LIST
61317: PUSH
61318: LD_INT 1
61320: PUSH
61321: LD_INT 1
61323: PUSH
61324: EMPTY
61325: LIST
61326: LIST
61327: PUSH
61328: LD_INT 0
61330: PUSH
61331: LD_INT 1
61333: PUSH
61334: EMPTY
61335: LIST
61336: LIST
61337: PUSH
61338: LD_INT 1
61340: NEG
61341: PUSH
61342: LD_INT 0
61344: PUSH
61345: EMPTY
61346: LIST
61347: LIST
61348: PUSH
61349: LD_INT 1
61351: NEG
61352: PUSH
61353: LD_INT 1
61355: NEG
61356: PUSH
61357: EMPTY
61358: LIST
61359: LIST
61360: PUSH
61361: EMPTY
61362: LIST
61363: LIST
61364: LIST
61365: LIST
61366: LIST
61367: LIST
61368: LIST
61369: ST_TO_ADDR
// end ; 1 :
61370: GO 67267
61372: LD_INT 1
61374: DOUBLE
61375: EQUAL
61376: IFTRUE 61380
61378: GO 64003
61380: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
61381: LD_ADDR_VAR 0 11
61385: PUSH
61386: LD_INT 1
61388: NEG
61389: PUSH
61390: LD_INT 3
61392: NEG
61393: PUSH
61394: EMPTY
61395: LIST
61396: LIST
61397: PUSH
61398: LD_INT 0
61400: PUSH
61401: LD_INT 3
61403: NEG
61404: PUSH
61405: EMPTY
61406: LIST
61407: LIST
61408: PUSH
61409: LD_INT 1
61411: PUSH
61412: LD_INT 2
61414: NEG
61415: PUSH
61416: EMPTY
61417: LIST
61418: LIST
61419: PUSH
61420: EMPTY
61421: LIST
61422: LIST
61423: LIST
61424: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
61425: LD_ADDR_VAR 0 12
61429: PUSH
61430: LD_INT 2
61432: PUSH
61433: LD_INT 1
61435: NEG
61436: PUSH
61437: EMPTY
61438: LIST
61439: LIST
61440: PUSH
61441: LD_INT 3
61443: PUSH
61444: LD_INT 0
61446: PUSH
61447: EMPTY
61448: LIST
61449: LIST
61450: PUSH
61451: LD_INT 3
61453: PUSH
61454: LD_INT 1
61456: PUSH
61457: EMPTY
61458: LIST
61459: LIST
61460: PUSH
61461: EMPTY
61462: LIST
61463: LIST
61464: LIST
61465: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
61466: LD_ADDR_VAR 0 13
61470: PUSH
61471: LD_INT 3
61473: PUSH
61474: LD_INT 2
61476: PUSH
61477: EMPTY
61478: LIST
61479: LIST
61480: PUSH
61481: LD_INT 3
61483: PUSH
61484: LD_INT 3
61486: PUSH
61487: EMPTY
61488: LIST
61489: LIST
61490: PUSH
61491: LD_INT 2
61493: PUSH
61494: LD_INT 3
61496: PUSH
61497: EMPTY
61498: LIST
61499: LIST
61500: PUSH
61501: EMPTY
61502: LIST
61503: LIST
61504: LIST
61505: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
61506: LD_ADDR_VAR 0 14
61510: PUSH
61511: LD_INT 1
61513: PUSH
61514: LD_INT 3
61516: PUSH
61517: EMPTY
61518: LIST
61519: LIST
61520: PUSH
61521: LD_INT 0
61523: PUSH
61524: LD_INT 3
61526: PUSH
61527: EMPTY
61528: LIST
61529: LIST
61530: PUSH
61531: LD_INT 1
61533: NEG
61534: PUSH
61535: LD_INT 2
61537: PUSH
61538: EMPTY
61539: LIST
61540: LIST
61541: PUSH
61542: EMPTY
61543: LIST
61544: LIST
61545: LIST
61546: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61547: LD_ADDR_VAR 0 15
61551: PUSH
61552: LD_INT 2
61554: NEG
61555: PUSH
61556: LD_INT 1
61558: PUSH
61559: EMPTY
61560: LIST
61561: LIST
61562: PUSH
61563: LD_INT 3
61565: NEG
61566: PUSH
61567: LD_INT 0
61569: PUSH
61570: EMPTY
61571: LIST
61572: LIST
61573: PUSH
61574: LD_INT 3
61576: NEG
61577: PUSH
61578: LD_INT 1
61580: NEG
61581: PUSH
61582: EMPTY
61583: LIST
61584: LIST
61585: PUSH
61586: EMPTY
61587: LIST
61588: LIST
61589: LIST
61590: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61591: LD_ADDR_VAR 0 16
61595: PUSH
61596: LD_INT 2
61598: NEG
61599: PUSH
61600: LD_INT 3
61602: NEG
61603: PUSH
61604: EMPTY
61605: LIST
61606: LIST
61607: PUSH
61608: LD_INT 3
61610: NEG
61611: PUSH
61612: LD_INT 2
61614: NEG
61615: PUSH
61616: EMPTY
61617: LIST
61618: LIST
61619: PUSH
61620: LD_INT 3
61622: NEG
61623: PUSH
61624: LD_INT 3
61626: NEG
61627: PUSH
61628: EMPTY
61629: LIST
61630: LIST
61631: PUSH
61632: EMPTY
61633: LIST
61634: LIST
61635: LIST
61636: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
61637: LD_ADDR_VAR 0 17
61641: PUSH
61642: LD_INT 1
61644: NEG
61645: PUSH
61646: LD_INT 3
61648: NEG
61649: PUSH
61650: EMPTY
61651: LIST
61652: LIST
61653: PUSH
61654: LD_INT 0
61656: PUSH
61657: LD_INT 3
61659: NEG
61660: PUSH
61661: EMPTY
61662: LIST
61663: LIST
61664: PUSH
61665: LD_INT 1
61667: PUSH
61668: LD_INT 2
61670: NEG
61671: PUSH
61672: EMPTY
61673: LIST
61674: LIST
61675: PUSH
61676: EMPTY
61677: LIST
61678: LIST
61679: LIST
61680: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
61681: LD_ADDR_VAR 0 18
61685: PUSH
61686: LD_INT 2
61688: PUSH
61689: LD_INT 1
61691: NEG
61692: PUSH
61693: EMPTY
61694: LIST
61695: LIST
61696: PUSH
61697: LD_INT 3
61699: PUSH
61700: LD_INT 0
61702: PUSH
61703: EMPTY
61704: LIST
61705: LIST
61706: PUSH
61707: LD_INT 3
61709: PUSH
61710: LD_INT 1
61712: PUSH
61713: EMPTY
61714: LIST
61715: LIST
61716: PUSH
61717: EMPTY
61718: LIST
61719: LIST
61720: LIST
61721: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
61722: LD_ADDR_VAR 0 19
61726: PUSH
61727: LD_INT 3
61729: PUSH
61730: LD_INT 2
61732: PUSH
61733: EMPTY
61734: LIST
61735: LIST
61736: PUSH
61737: LD_INT 3
61739: PUSH
61740: LD_INT 3
61742: PUSH
61743: EMPTY
61744: LIST
61745: LIST
61746: PUSH
61747: LD_INT 2
61749: PUSH
61750: LD_INT 3
61752: PUSH
61753: EMPTY
61754: LIST
61755: LIST
61756: PUSH
61757: EMPTY
61758: LIST
61759: LIST
61760: LIST
61761: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
61762: LD_ADDR_VAR 0 20
61766: PUSH
61767: LD_INT 1
61769: PUSH
61770: LD_INT 3
61772: PUSH
61773: EMPTY
61774: LIST
61775: LIST
61776: PUSH
61777: LD_INT 0
61779: PUSH
61780: LD_INT 3
61782: PUSH
61783: EMPTY
61784: LIST
61785: LIST
61786: PUSH
61787: LD_INT 1
61789: NEG
61790: PUSH
61791: LD_INT 2
61793: PUSH
61794: EMPTY
61795: LIST
61796: LIST
61797: PUSH
61798: EMPTY
61799: LIST
61800: LIST
61801: LIST
61802: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61803: LD_ADDR_VAR 0 21
61807: PUSH
61808: LD_INT 2
61810: NEG
61811: PUSH
61812: LD_INT 1
61814: PUSH
61815: EMPTY
61816: LIST
61817: LIST
61818: PUSH
61819: LD_INT 3
61821: NEG
61822: PUSH
61823: LD_INT 0
61825: PUSH
61826: EMPTY
61827: LIST
61828: LIST
61829: PUSH
61830: LD_INT 3
61832: NEG
61833: PUSH
61834: LD_INT 1
61836: NEG
61837: PUSH
61838: EMPTY
61839: LIST
61840: LIST
61841: PUSH
61842: EMPTY
61843: LIST
61844: LIST
61845: LIST
61846: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61847: LD_ADDR_VAR 0 22
61851: PUSH
61852: LD_INT 2
61854: NEG
61855: PUSH
61856: LD_INT 3
61858: NEG
61859: PUSH
61860: EMPTY
61861: LIST
61862: LIST
61863: PUSH
61864: LD_INT 3
61866: NEG
61867: PUSH
61868: LD_INT 2
61870: NEG
61871: PUSH
61872: EMPTY
61873: LIST
61874: LIST
61875: PUSH
61876: LD_INT 3
61878: NEG
61879: PUSH
61880: LD_INT 3
61882: NEG
61883: PUSH
61884: EMPTY
61885: LIST
61886: LIST
61887: PUSH
61888: EMPTY
61889: LIST
61890: LIST
61891: LIST
61892: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
61893: LD_ADDR_VAR 0 23
61897: PUSH
61898: LD_INT 0
61900: PUSH
61901: LD_INT 3
61903: NEG
61904: PUSH
61905: EMPTY
61906: LIST
61907: LIST
61908: PUSH
61909: LD_INT 1
61911: NEG
61912: PUSH
61913: LD_INT 4
61915: NEG
61916: PUSH
61917: EMPTY
61918: LIST
61919: LIST
61920: PUSH
61921: LD_INT 1
61923: PUSH
61924: LD_INT 3
61926: NEG
61927: PUSH
61928: EMPTY
61929: LIST
61930: LIST
61931: PUSH
61932: EMPTY
61933: LIST
61934: LIST
61935: LIST
61936: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
61937: LD_ADDR_VAR 0 24
61941: PUSH
61942: LD_INT 3
61944: PUSH
61945: LD_INT 0
61947: PUSH
61948: EMPTY
61949: LIST
61950: LIST
61951: PUSH
61952: LD_INT 3
61954: PUSH
61955: LD_INT 1
61957: NEG
61958: PUSH
61959: EMPTY
61960: LIST
61961: LIST
61962: PUSH
61963: LD_INT 4
61965: PUSH
61966: LD_INT 1
61968: PUSH
61969: EMPTY
61970: LIST
61971: LIST
61972: PUSH
61973: EMPTY
61974: LIST
61975: LIST
61976: LIST
61977: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
61978: LD_ADDR_VAR 0 25
61982: PUSH
61983: LD_INT 3
61985: PUSH
61986: LD_INT 3
61988: PUSH
61989: EMPTY
61990: LIST
61991: LIST
61992: PUSH
61993: LD_INT 4
61995: PUSH
61996: LD_INT 3
61998: PUSH
61999: EMPTY
62000: LIST
62001: LIST
62002: PUSH
62003: LD_INT 3
62005: PUSH
62006: LD_INT 4
62008: PUSH
62009: EMPTY
62010: LIST
62011: LIST
62012: PUSH
62013: EMPTY
62014: LIST
62015: LIST
62016: LIST
62017: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
62018: LD_ADDR_VAR 0 26
62022: PUSH
62023: LD_INT 0
62025: PUSH
62026: LD_INT 3
62028: PUSH
62029: EMPTY
62030: LIST
62031: LIST
62032: PUSH
62033: LD_INT 1
62035: PUSH
62036: LD_INT 4
62038: PUSH
62039: EMPTY
62040: LIST
62041: LIST
62042: PUSH
62043: LD_INT 1
62045: NEG
62046: PUSH
62047: LD_INT 3
62049: PUSH
62050: EMPTY
62051: LIST
62052: LIST
62053: PUSH
62054: EMPTY
62055: LIST
62056: LIST
62057: LIST
62058: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
62059: LD_ADDR_VAR 0 27
62063: PUSH
62064: LD_INT 3
62066: NEG
62067: PUSH
62068: LD_INT 0
62070: PUSH
62071: EMPTY
62072: LIST
62073: LIST
62074: PUSH
62075: LD_INT 3
62077: NEG
62078: PUSH
62079: LD_INT 1
62081: PUSH
62082: EMPTY
62083: LIST
62084: LIST
62085: PUSH
62086: LD_INT 4
62088: NEG
62089: PUSH
62090: LD_INT 1
62092: NEG
62093: PUSH
62094: EMPTY
62095: LIST
62096: LIST
62097: PUSH
62098: EMPTY
62099: LIST
62100: LIST
62101: LIST
62102: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
62103: LD_ADDR_VAR 0 28
62107: PUSH
62108: LD_INT 3
62110: NEG
62111: PUSH
62112: LD_INT 3
62114: NEG
62115: PUSH
62116: EMPTY
62117: LIST
62118: LIST
62119: PUSH
62120: LD_INT 3
62122: NEG
62123: PUSH
62124: LD_INT 4
62126: NEG
62127: PUSH
62128: EMPTY
62129: LIST
62130: LIST
62131: PUSH
62132: LD_INT 4
62134: NEG
62135: PUSH
62136: LD_INT 3
62138: NEG
62139: PUSH
62140: EMPTY
62141: LIST
62142: LIST
62143: PUSH
62144: EMPTY
62145: LIST
62146: LIST
62147: LIST
62148: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
62149: LD_ADDR_VAR 0 29
62153: PUSH
62154: LD_INT 1
62156: NEG
62157: PUSH
62158: LD_INT 3
62160: NEG
62161: PUSH
62162: EMPTY
62163: LIST
62164: LIST
62165: PUSH
62166: LD_INT 0
62168: PUSH
62169: LD_INT 3
62171: NEG
62172: PUSH
62173: EMPTY
62174: LIST
62175: LIST
62176: PUSH
62177: LD_INT 1
62179: PUSH
62180: LD_INT 2
62182: NEG
62183: PUSH
62184: EMPTY
62185: LIST
62186: LIST
62187: PUSH
62188: LD_INT 1
62190: NEG
62191: PUSH
62192: LD_INT 4
62194: NEG
62195: PUSH
62196: EMPTY
62197: LIST
62198: LIST
62199: PUSH
62200: LD_INT 0
62202: PUSH
62203: LD_INT 4
62205: NEG
62206: PUSH
62207: EMPTY
62208: LIST
62209: LIST
62210: PUSH
62211: LD_INT 1
62213: PUSH
62214: LD_INT 3
62216: NEG
62217: PUSH
62218: EMPTY
62219: LIST
62220: LIST
62221: PUSH
62222: LD_INT 1
62224: NEG
62225: PUSH
62226: LD_INT 5
62228: NEG
62229: PUSH
62230: EMPTY
62231: LIST
62232: LIST
62233: PUSH
62234: LD_INT 0
62236: PUSH
62237: LD_INT 5
62239: NEG
62240: PUSH
62241: EMPTY
62242: LIST
62243: LIST
62244: PUSH
62245: LD_INT 1
62247: PUSH
62248: LD_INT 4
62250: NEG
62251: PUSH
62252: EMPTY
62253: LIST
62254: LIST
62255: PUSH
62256: LD_INT 1
62258: NEG
62259: PUSH
62260: LD_INT 6
62262: NEG
62263: PUSH
62264: EMPTY
62265: LIST
62266: LIST
62267: PUSH
62268: LD_INT 0
62270: PUSH
62271: LD_INT 6
62273: NEG
62274: PUSH
62275: EMPTY
62276: LIST
62277: LIST
62278: PUSH
62279: LD_INT 1
62281: PUSH
62282: LD_INT 5
62284: NEG
62285: PUSH
62286: EMPTY
62287: LIST
62288: LIST
62289: PUSH
62290: EMPTY
62291: LIST
62292: LIST
62293: LIST
62294: LIST
62295: LIST
62296: LIST
62297: LIST
62298: LIST
62299: LIST
62300: LIST
62301: LIST
62302: LIST
62303: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
62304: LD_ADDR_VAR 0 30
62308: PUSH
62309: LD_INT 2
62311: PUSH
62312: LD_INT 1
62314: NEG
62315: PUSH
62316: EMPTY
62317: LIST
62318: LIST
62319: PUSH
62320: LD_INT 3
62322: PUSH
62323: LD_INT 0
62325: PUSH
62326: EMPTY
62327: LIST
62328: LIST
62329: PUSH
62330: LD_INT 3
62332: PUSH
62333: LD_INT 1
62335: PUSH
62336: EMPTY
62337: LIST
62338: LIST
62339: PUSH
62340: LD_INT 3
62342: PUSH
62343: LD_INT 1
62345: NEG
62346: PUSH
62347: EMPTY
62348: LIST
62349: LIST
62350: PUSH
62351: LD_INT 4
62353: PUSH
62354: LD_INT 0
62356: PUSH
62357: EMPTY
62358: LIST
62359: LIST
62360: PUSH
62361: LD_INT 4
62363: PUSH
62364: LD_INT 1
62366: PUSH
62367: EMPTY
62368: LIST
62369: LIST
62370: PUSH
62371: LD_INT 4
62373: PUSH
62374: LD_INT 1
62376: NEG
62377: PUSH
62378: EMPTY
62379: LIST
62380: LIST
62381: PUSH
62382: LD_INT 5
62384: PUSH
62385: LD_INT 0
62387: PUSH
62388: EMPTY
62389: LIST
62390: LIST
62391: PUSH
62392: LD_INT 5
62394: PUSH
62395: LD_INT 1
62397: PUSH
62398: EMPTY
62399: LIST
62400: LIST
62401: PUSH
62402: LD_INT 5
62404: PUSH
62405: LD_INT 1
62407: NEG
62408: PUSH
62409: EMPTY
62410: LIST
62411: LIST
62412: PUSH
62413: LD_INT 6
62415: PUSH
62416: LD_INT 0
62418: PUSH
62419: EMPTY
62420: LIST
62421: LIST
62422: PUSH
62423: LD_INT 6
62425: PUSH
62426: LD_INT 1
62428: PUSH
62429: EMPTY
62430: LIST
62431: LIST
62432: PUSH
62433: EMPTY
62434: LIST
62435: LIST
62436: LIST
62437: LIST
62438: LIST
62439: LIST
62440: LIST
62441: LIST
62442: LIST
62443: LIST
62444: LIST
62445: LIST
62446: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
62447: LD_ADDR_VAR 0 31
62451: PUSH
62452: LD_INT 3
62454: PUSH
62455: LD_INT 2
62457: PUSH
62458: EMPTY
62459: LIST
62460: LIST
62461: PUSH
62462: LD_INT 3
62464: PUSH
62465: LD_INT 3
62467: PUSH
62468: EMPTY
62469: LIST
62470: LIST
62471: PUSH
62472: LD_INT 2
62474: PUSH
62475: LD_INT 3
62477: PUSH
62478: EMPTY
62479: LIST
62480: LIST
62481: PUSH
62482: LD_INT 4
62484: PUSH
62485: LD_INT 3
62487: PUSH
62488: EMPTY
62489: LIST
62490: LIST
62491: PUSH
62492: LD_INT 4
62494: PUSH
62495: LD_INT 4
62497: PUSH
62498: EMPTY
62499: LIST
62500: LIST
62501: PUSH
62502: LD_INT 3
62504: PUSH
62505: LD_INT 4
62507: PUSH
62508: EMPTY
62509: LIST
62510: LIST
62511: PUSH
62512: LD_INT 5
62514: PUSH
62515: LD_INT 4
62517: PUSH
62518: EMPTY
62519: LIST
62520: LIST
62521: PUSH
62522: LD_INT 5
62524: PUSH
62525: LD_INT 5
62527: PUSH
62528: EMPTY
62529: LIST
62530: LIST
62531: PUSH
62532: LD_INT 4
62534: PUSH
62535: LD_INT 5
62537: PUSH
62538: EMPTY
62539: LIST
62540: LIST
62541: PUSH
62542: LD_INT 6
62544: PUSH
62545: LD_INT 5
62547: PUSH
62548: EMPTY
62549: LIST
62550: LIST
62551: PUSH
62552: LD_INT 6
62554: PUSH
62555: LD_INT 6
62557: PUSH
62558: EMPTY
62559: LIST
62560: LIST
62561: PUSH
62562: LD_INT 5
62564: PUSH
62565: LD_INT 6
62567: PUSH
62568: EMPTY
62569: LIST
62570: LIST
62571: PUSH
62572: EMPTY
62573: LIST
62574: LIST
62575: LIST
62576: LIST
62577: LIST
62578: LIST
62579: LIST
62580: LIST
62581: LIST
62582: LIST
62583: LIST
62584: LIST
62585: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
62586: LD_ADDR_VAR 0 32
62590: PUSH
62591: LD_INT 1
62593: PUSH
62594: LD_INT 3
62596: PUSH
62597: EMPTY
62598: LIST
62599: LIST
62600: PUSH
62601: LD_INT 0
62603: PUSH
62604: LD_INT 3
62606: PUSH
62607: EMPTY
62608: LIST
62609: LIST
62610: PUSH
62611: LD_INT 1
62613: NEG
62614: PUSH
62615: LD_INT 2
62617: PUSH
62618: EMPTY
62619: LIST
62620: LIST
62621: PUSH
62622: LD_INT 1
62624: PUSH
62625: LD_INT 4
62627: PUSH
62628: EMPTY
62629: LIST
62630: LIST
62631: PUSH
62632: LD_INT 0
62634: PUSH
62635: LD_INT 4
62637: PUSH
62638: EMPTY
62639: LIST
62640: LIST
62641: PUSH
62642: LD_INT 1
62644: NEG
62645: PUSH
62646: LD_INT 3
62648: PUSH
62649: EMPTY
62650: LIST
62651: LIST
62652: PUSH
62653: LD_INT 1
62655: PUSH
62656: LD_INT 5
62658: PUSH
62659: EMPTY
62660: LIST
62661: LIST
62662: PUSH
62663: LD_INT 0
62665: PUSH
62666: LD_INT 5
62668: PUSH
62669: EMPTY
62670: LIST
62671: LIST
62672: PUSH
62673: LD_INT 1
62675: NEG
62676: PUSH
62677: LD_INT 4
62679: PUSH
62680: EMPTY
62681: LIST
62682: LIST
62683: PUSH
62684: LD_INT 1
62686: PUSH
62687: LD_INT 6
62689: PUSH
62690: EMPTY
62691: LIST
62692: LIST
62693: PUSH
62694: LD_INT 0
62696: PUSH
62697: LD_INT 6
62699: PUSH
62700: EMPTY
62701: LIST
62702: LIST
62703: PUSH
62704: LD_INT 1
62706: NEG
62707: PUSH
62708: LD_INT 5
62710: PUSH
62711: EMPTY
62712: LIST
62713: LIST
62714: PUSH
62715: EMPTY
62716: LIST
62717: LIST
62718: LIST
62719: LIST
62720: LIST
62721: LIST
62722: LIST
62723: LIST
62724: LIST
62725: LIST
62726: LIST
62727: LIST
62728: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
62729: LD_ADDR_VAR 0 33
62733: PUSH
62734: LD_INT 2
62736: NEG
62737: PUSH
62738: LD_INT 1
62740: PUSH
62741: EMPTY
62742: LIST
62743: LIST
62744: PUSH
62745: LD_INT 3
62747: NEG
62748: PUSH
62749: LD_INT 0
62751: PUSH
62752: EMPTY
62753: LIST
62754: LIST
62755: PUSH
62756: LD_INT 3
62758: NEG
62759: PUSH
62760: LD_INT 1
62762: NEG
62763: PUSH
62764: EMPTY
62765: LIST
62766: LIST
62767: PUSH
62768: LD_INT 3
62770: NEG
62771: PUSH
62772: LD_INT 1
62774: PUSH
62775: EMPTY
62776: LIST
62777: LIST
62778: PUSH
62779: LD_INT 4
62781: NEG
62782: PUSH
62783: LD_INT 0
62785: PUSH
62786: EMPTY
62787: LIST
62788: LIST
62789: PUSH
62790: LD_INT 4
62792: NEG
62793: PUSH
62794: LD_INT 1
62796: NEG
62797: PUSH
62798: EMPTY
62799: LIST
62800: LIST
62801: PUSH
62802: LD_INT 4
62804: NEG
62805: PUSH
62806: LD_INT 1
62808: PUSH
62809: EMPTY
62810: LIST
62811: LIST
62812: PUSH
62813: LD_INT 5
62815: NEG
62816: PUSH
62817: LD_INT 0
62819: PUSH
62820: EMPTY
62821: LIST
62822: LIST
62823: PUSH
62824: LD_INT 5
62826: NEG
62827: PUSH
62828: LD_INT 1
62830: NEG
62831: PUSH
62832: EMPTY
62833: LIST
62834: LIST
62835: PUSH
62836: LD_INT 5
62838: NEG
62839: PUSH
62840: LD_INT 1
62842: PUSH
62843: EMPTY
62844: LIST
62845: LIST
62846: PUSH
62847: LD_INT 6
62849: NEG
62850: PUSH
62851: LD_INT 0
62853: PUSH
62854: EMPTY
62855: LIST
62856: LIST
62857: PUSH
62858: LD_INT 6
62860: NEG
62861: PUSH
62862: LD_INT 1
62864: NEG
62865: PUSH
62866: EMPTY
62867: LIST
62868: LIST
62869: PUSH
62870: EMPTY
62871: LIST
62872: LIST
62873: LIST
62874: LIST
62875: LIST
62876: LIST
62877: LIST
62878: LIST
62879: LIST
62880: LIST
62881: LIST
62882: LIST
62883: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
62884: LD_ADDR_VAR 0 34
62888: PUSH
62889: LD_INT 2
62891: NEG
62892: PUSH
62893: LD_INT 3
62895: NEG
62896: PUSH
62897: EMPTY
62898: LIST
62899: LIST
62900: PUSH
62901: LD_INT 3
62903: NEG
62904: PUSH
62905: LD_INT 2
62907: NEG
62908: PUSH
62909: EMPTY
62910: LIST
62911: LIST
62912: PUSH
62913: LD_INT 3
62915: NEG
62916: PUSH
62917: LD_INT 3
62919: NEG
62920: PUSH
62921: EMPTY
62922: LIST
62923: LIST
62924: PUSH
62925: LD_INT 3
62927: NEG
62928: PUSH
62929: LD_INT 4
62931: NEG
62932: PUSH
62933: EMPTY
62934: LIST
62935: LIST
62936: PUSH
62937: LD_INT 4
62939: NEG
62940: PUSH
62941: LD_INT 3
62943: NEG
62944: PUSH
62945: EMPTY
62946: LIST
62947: LIST
62948: PUSH
62949: LD_INT 4
62951: NEG
62952: PUSH
62953: LD_INT 4
62955: NEG
62956: PUSH
62957: EMPTY
62958: LIST
62959: LIST
62960: PUSH
62961: LD_INT 4
62963: NEG
62964: PUSH
62965: LD_INT 5
62967: NEG
62968: PUSH
62969: EMPTY
62970: LIST
62971: LIST
62972: PUSH
62973: LD_INT 5
62975: NEG
62976: PUSH
62977: LD_INT 4
62979: NEG
62980: PUSH
62981: EMPTY
62982: LIST
62983: LIST
62984: PUSH
62985: LD_INT 5
62987: NEG
62988: PUSH
62989: LD_INT 5
62991: NEG
62992: PUSH
62993: EMPTY
62994: LIST
62995: LIST
62996: PUSH
62997: LD_INT 5
62999: NEG
63000: PUSH
63001: LD_INT 6
63003: NEG
63004: PUSH
63005: EMPTY
63006: LIST
63007: LIST
63008: PUSH
63009: LD_INT 6
63011: NEG
63012: PUSH
63013: LD_INT 5
63015: NEG
63016: PUSH
63017: EMPTY
63018: LIST
63019: LIST
63020: PUSH
63021: LD_INT 6
63023: NEG
63024: PUSH
63025: LD_INT 6
63027: NEG
63028: PUSH
63029: EMPTY
63030: LIST
63031: LIST
63032: PUSH
63033: EMPTY
63034: LIST
63035: LIST
63036: LIST
63037: LIST
63038: LIST
63039: LIST
63040: LIST
63041: LIST
63042: LIST
63043: LIST
63044: LIST
63045: LIST
63046: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
63047: LD_ADDR_VAR 0 41
63051: PUSH
63052: LD_INT 0
63054: PUSH
63055: LD_INT 2
63057: NEG
63058: PUSH
63059: EMPTY
63060: LIST
63061: LIST
63062: PUSH
63063: LD_INT 1
63065: NEG
63066: PUSH
63067: LD_INT 3
63069: NEG
63070: PUSH
63071: EMPTY
63072: LIST
63073: LIST
63074: PUSH
63075: LD_INT 1
63077: PUSH
63078: LD_INT 2
63080: NEG
63081: PUSH
63082: EMPTY
63083: LIST
63084: LIST
63085: PUSH
63086: EMPTY
63087: LIST
63088: LIST
63089: LIST
63090: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
63091: LD_ADDR_VAR 0 42
63095: PUSH
63096: LD_INT 2
63098: PUSH
63099: LD_INT 0
63101: PUSH
63102: EMPTY
63103: LIST
63104: LIST
63105: PUSH
63106: LD_INT 2
63108: PUSH
63109: LD_INT 1
63111: NEG
63112: PUSH
63113: EMPTY
63114: LIST
63115: LIST
63116: PUSH
63117: LD_INT 3
63119: PUSH
63120: LD_INT 1
63122: PUSH
63123: EMPTY
63124: LIST
63125: LIST
63126: PUSH
63127: EMPTY
63128: LIST
63129: LIST
63130: LIST
63131: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
63132: LD_ADDR_VAR 0 43
63136: PUSH
63137: LD_INT 2
63139: PUSH
63140: LD_INT 2
63142: PUSH
63143: EMPTY
63144: LIST
63145: LIST
63146: PUSH
63147: LD_INT 3
63149: PUSH
63150: LD_INT 2
63152: PUSH
63153: EMPTY
63154: LIST
63155: LIST
63156: PUSH
63157: LD_INT 2
63159: PUSH
63160: LD_INT 3
63162: PUSH
63163: EMPTY
63164: LIST
63165: LIST
63166: PUSH
63167: EMPTY
63168: LIST
63169: LIST
63170: LIST
63171: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
63172: LD_ADDR_VAR 0 44
63176: PUSH
63177: LD_INT 0
63179: PUSH
63180: LD_INT 2
63182: PUSH
63183: EMPTY
63184: LIST
63185: LIST
63186: PUSH
63187: LD_INT 1
63189: PUSH
63190: LD_INT 3
63192: PUSH
63193: EMPTY
63194: LIST
63195: LIST
63196: PUSH
63197: LD_INT 1
63199: NEG
63200: PUSH
63201: LD_INT 2
63203: PUSH
63204: EMPTY
63205: LIST
63206: LIST
63207: PUSH
63208: EMPTY
63209: LIST
63210: LIST
63211: LIST
63212: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
63213: LD_ADDR_VAR 0 45
63217: PUSH
63218: LD_INT 2
63220: NEG
63221: PUSH
63222: LD_INT 0
63224: PUSH
63225: EMPTY
63226: LIST
63227: LIST
63228: PUSH
63229: LD_INT 2
63231: NEG
63232: PUSH
63233: LD_INT 1
63235: PUSH
63236: EMPTY
63237: LIST
63238: LIST
63239: PUSH
63240: LD_INT 3
63242: NEG
63243: PUSH
63244: LD_INT 1
63246: NEG
63247: PUSH
63248: EMPTY
63249: LIST
63250: LIST
63251: PUSH
63252: EMPTY
63253: LIST
63254: LIST
63255: LIST
63256: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
63257: LD_ADDR_VAR 0 46
63261: PUSH
63262: LD_INT 2
63264: NEG
63265: PUSH
63266: LD_INT 2
63268: NEG
63269: PUSH
63270: EMPTY
63271: LIST
63272: LIST
63273: PUSH
63274: LD_INT 2
63276: NEG
63277: PUSH
63278: LD_INT 3
63280: NEG
63281: PUSH
63282: EMPTY
63283: LIST
63284: LIST
63285: PUSH
63286: LD_INT 3
63288: NEG
63289: PUSH
63290: LD_INT 2
63292: NEG
63293: PUSH
63294: EMPTY
63295: LIST
63296: LIST
63297: PUSH
63298: EMPTY
63299: LIST
63300: LIST
63301: LIST
63302: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
63303: LD_ADDR_VAR 0 47
63307: PUSH
63308: LD_INT 2
63310: NEG
63311: PUSH
63312: LD_INT 3
63314: NEG
63315: PUSH
63316: EMPTY
63317: LIST
63318: LIST
63319: PUSH
63320: LD_INT 1
63322: NEG
63323: PUSH
63324: LD_INT 3
63326: NEG
63327: PUSH
63328: EMPTY
63329: LIST
63330: LIST
63331: PUSH
63332: EMPTY
63333: LIST
63334: LIST
63335: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
63336: LD_ADDR_VAR 0 48
63340: PUSH
63341: LD_INT 1
63343: PUSH
63344: LD_INT 2
63346: NEG
63347: PUSH
63348: EMPTY
63349: LIST
63350: LIST
63351: PUSH
63352: LD_INT 2
63354: PUSH
63355: LD_INT 1
63357: NEG
63358: PUSH
63359: EMPTY
63360: LIST
63361: LIST
63362: PUSH
63363: EMPTY
63364: LIST
63365: LIST
63366: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
63367: LD_ADDR_VAR 0 49
63371: PUSH
63372: LD_INT 3
63374: PUSH
63375: LD_INT 1
63377: PUSH
63378: EMPTY
63379: LIST
63380: LIST
63381: PUSH
63382: LD_INT 3
63384: PUSH
63385: LD_INT 2
63387: PUSH
63388: EMPTY
63389: LIST
63390: LIST
63391: PUSH
63392: EMPTY
63393: LIST
63394: LIST
63395: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
63396: LD_ADDR_VAR 0 50
63400: PUSH
63401: LD_INT 2
63403: PUSH
63404: LD_INT 3
63406: PUSH
63407: EMPTY
63408: LIST
63409: LIST
63410: PUSH
63411: LD_INT 1
63413: PUSH
63414: LD_INT 3
63416: PUSH
63417: EMPTY
63418: LIST
63419: LIST
63420: PUSH
63421: EMPTY
63422: LIST
63423: LIST
63424: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
63425: LD_ADDR_VAR 0 51
63429: PUSH
63430: LD_INT 1
63432: NEG
63433: PUSH
63434: LD_INT 2
63436: PUSH
63437: EMPTY
63438: LIST
63439: LIST
63440: PUSH
63441: LD_INT 2
63443: NEG
63444: PUSH
63445: LD_INT 1
63447: PUSH
63448: EMPTY
63449: LIST
63450: LIST
63451: PUSH
63452: EMPTY
63453: LIST
63454: LIST
63455: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
63456: LD_ADDR_VAR 0 52
63460: PUSH
63461: LD_INT 3
63463: NEG
63464: PUSH
63465: LD_INT 1
63467: NEG
63468: PUSH
63469: EMPTY
63470: LIST
63471: LIST
63472: PUSH
63473: LD_INT 3
63475: NEG
63476: PUSH
63477: LD_INT 2
63479: NEG
63480: PUSH
63481: EMPTY
63482: LIST
63483: LIST
63484: PUSH
63485: EMPTY
63486: LIST
63487: LIST
63488: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
63489: LD_ADDR_VAR 0 53
63493: PUSH
63494: LD_INT 1
63496: NEG
63497: PUSH
63498: LD_INT 3
63500: NEG
63501: PUSH
63502: EMPTY
63503: LIST
63504: LIST
63505: PUSH
63506: LD_INT 0
63508: PUSH
63509: LD_INT 3
63511: NEG
63512: PUSH
63513: EMPTY
63514: LIST
63515: LIST
63516: PUSH
63517: LD_INT 1
63519: PUSH
63520: LD_INT 2
63522: NEG
63523: PUSH
63524: EMPTY
63525: LIST
63526: LIST
63527: PUSH
63528: EMPTY
63529: LIST
63530: LIST
63531: LIST
63532: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
63533: LD_ADDR_VAR 0 54
63537: PUSH
63538: LD_INT 2
63540: PUSH
63541: LD_INT 1
63543: NEG
63544: PUSH
63545: EMPTY
63546: LIST
63547: LIST
63548: PUSH
63549: LD_INT 3
63551: PUSH
63552: LD_INT 0
63554: PUSH
63555: EMPTY
63556: LIST
63557: LIST
63558: PUSH
63559: LD_INT 3
63561: PUSH
63562: LD_INT 1
63564: PUSH
63565: EMPTY
63566: LIST
63567: LIST
63568: PUSH
63569: EMPTY
63570: LIST
63571: LIST
63572: LIST
63573: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
63574: LD_ADDR_VAR 0 55
63578: PUSH
63579: LD_INT 3
63581: PUSH
63582: LD_INT 2
63584: PUSH
63585: EMPTY
63586: LIST
63587: LIST
63588: PUSH
63589: LD_INT 3
63591: PUSH
63592: LD_INT 3
63594: PUSH
63595: EMPTY
63596: LIST
63597: LIST
63598: PUSH
63599: LD_INT 2
63601: PUSH
63602: LD_INT 3
63604: PUSH
63605: EMPTY
63606: LIST
63607: LIST
63608: PUSH
63609: EMPTY
63610: LIST
63611: LIST
63612: LIST
63613: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
63614: LD_ADDR_VAR 0 56
63618: PUSH
63619: LD_INT 1
63621: PUSH
63622: LD_INT 3
63624: PUSH
63625: EMPTY
63626: LIST
63627: LIST
63628: PUSH
63629: LD_INT 0
63631: PUSH
63632: LD_INT 3
63634: PUSH
63635: EMPTY
63636: LIST
63637: LIST
63638: PUSH
63639: LD_INT 1
63641: NEG
63642: PUSH
63643: LD_INT 2
63645: PUSH
63646: EMPTY
63647: LIST
63648: LIST
63649: PUSH
63650: EMPTY
63651: LIST
63652: LIST
63653: LIST
63654: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63655: LD_ADDR_VAR 0 57
63659: PUSH
63660: LD_INT 2
63662: NEG
63663: PUSH
63664: LD_INT 1
63666: PUSH
63667: EMPTY
63668: LIST
63669: LIST
63670: PUSH
63671: LD_INT 3
63673: NEG
63674: PUSH
63675: LD_INT 0
63677: PUSH
63678: EMPTY
63679: LIST
63680: LIST
63681: PUSH
63682: LD_INT 3
63684: NEG
63685: PUSH
63686: LD_INT 1
63688: NEG
63689: PUSH
63690: EMPTY
63691: LIST
63692: LIST
63693: PUSH
63694: EMPTY
63695: LIST
63696: LIST
63697: LIST
63698: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63699: LD_ADDR_VAR 0 58
63703: PUSH
63704: LD_INT 2
63706: NEG
63707: PUSH
63708: LD_INT 3
63710: NEG
63711: PUSH
63712: EMPTY
63713: LIST
63714: LIST
63715: PUSH
63716: LD_INT 3
63718: NEG
63719: PUSH
63720: LD_INT 2
63722: NEG
63723: PUSH
63724: EMPTY
63725: LIST
63726: LIST
63727: PUSH
63728: LD_INT 3
63730: NEG
63731: PUSH
63732: LD_INT 3
63734: NEG
63735: PUSH
63736: EMPTY
63737: LIST
63738: LIST
63739: PUSH
63740: EMPTY
63741: LIST
63742: LIST
63743: LIST
63744: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
63745: LD_ADDR_VAR 0 59
63749: PUSH
63750: LD_INT 1
63752: NEG
63753: PUSH
63754: LD_INT 2
63756: NEG
63757: PUSH
63758: EMPTY
63759: LIST
63760: LIST
63761: PUSH
63762: LD_INT 0
63764: PUSH
63765: LD_INT 2
63767: NEG
63768: PUSH
63769: EMPTY
63770: LIST
63771: LIST
63772: PUSH
63773: LD_INT 1
63775: PUSH
63776: LD_INT 1
63778: NEG
63779: PUSH
63780: EMPTY
63781: LIST
63782: LIST
63783: PUSH
63784: EMPTY
63785: LIST
63786: LIST
63787: LIST
63788: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
63789: LD_ADDR_VAR 0 60
63793: PUSH
63794: LD_INT 1
63796: PUSH
63797: LD_INT 1
63799: NEG
63800: PUSH
63801: EMPTY
63802: LIST
63803: LIST
63804: PUSH
63805: LD_INT 2
63807: PUSH
63808: LD_INT 0
63810: PUSH
63811: EMPTY
63812: LIST
63813: LIST
63814: PUSH
63815: LD_INT 2
63817: PUSH
63818: LD_INT 1
63820: PUSH
63821: EMPTY
63822: LIST
63823: LIST
63824: PUSH
63825: EMPTY
63826: LIST
63827: LIST
63828: LIST
63829: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
63830: LD_ADDR_VAR 0 61
63834: PUSH
63835: LD_INT 2
63837: PUSH
63838: LD_INT 1
63840: PUSH
63841: EMPTY
63842: LIST
63843: LIST
63844: PUSH
63845: LD_INT 2
63847: PUSH
63848: LD_INT 2
63850: PUSH
63851: EMPTY
63852: LIST
63853: LIST
63854: PUSH
63855: LD_INT 1
63857: PUSH
63858: LD_INT 2
63860: PUSH
63861: EMPTY
63862: LIST
63863: LIST
63864: PUSH
63865: EMPTY
63866: LIST
63867: LIST
63868: LIST
63869: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
63870: LD_ADDR_VAR 0 62
63874: PUSH
63875: LD_INT 1
63877: PUSH
63878: LD_INT 2
63880: PUSH
63881: EMPTY
63882: LIST
63883: LIST
63884: PUSH
63885: LD_INT 0
63887: PUSH
63888: LD_INT 2
63890: PUSH
63891: EMPTY
63892: LIST
63893: LIST
63894: PUSH
63895: LD_INT 1
63897: NEG
63898: PUSH
63899: LD_INT 1
63901: PUSH
63902: EMPTY
63903: LIST
63904: LIST
63905: PUSH
63906: EMPTY
63907: LIST
63908: LIST
63909: LIST
63910: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
63911: LD_ADDR_VAR 0 63
63915: PUSH
63916: LD_INT 1
63918: NEG
63919: PUSH
63920: LD_INT 1
63922: PUSH
63923: EMPTY
63924: LIST
63925: LIST
63926: PUSH
63927: LD_INT 2
63929: NEG
63930: PUSH
63931: LD_INT 0
63933: PUSH
63934: EMPTY
63935: LIST
63936: LIST
63937: PUSH
63938: LD_INT 2
63940: NEG
63941: PUSH
63942: LD_INT 1
63944: NEG
63945: PUSH
63946: EMPTY
63947: LIST
63948: LIST
63949: PUSH
63950: EMPTY
63951: LIST
63952: LIST
63953: LIST
63954: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63955: LD_ADDR_VAR 0 64
63959: PUSH
63960: LD_INT 1
63962: NEG
63963: PUSH
63964: LD_INT 2
63966: NEG
63967: PUSH
63968: EMPTY
63969: LIST
63970: LIST
63971: PUSH
63972: LD_INT 2
63974: NEG
63975: PUSH
63976: LD_INT 1
63978: NEG
63979: PUSH
63980: EMPTY
63981: LIST
63982: LIST
63983: PUSH
63984: LD_INT 2
63986: NEG
63987: PUSH
63988: LD_INT 2
63990: NEG
63991: PUSH
63992: EMPTY
63993: LIST
63994: LIST
63995: PUSH
63996: EMPTY
63997: LIST
63998: LIST
63999: LIST
64000: ST_TO_ADDR
// end ; 2 :
64001: GO 67267
64003: LD_INT 2
64005: DOUBLE
64006: EQUAL
64007: IFTRUE 64011
64009: GO 67266
64011: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
64012: LD_ADDR_VAR 0 29
64016: PUSH
64017: LD_INT 4
64019: PUSH
64020: LD_INT 0
64022: PUSH
64023: EMPTY
64024: LIST
64025: LIST
64026: PUSH
64027: LD_INT 4
64029: PUSH
64030: LD_INT 1
64032: NEG
64033: PUSH
64034: EMPTY
64035: LIST
64036: LIST
64037: PUSH
64038: LD_INT 5
64040: PUSH
64041: LD_INT 0
64043: PUSH
64044: EMPTY
64045: LIST
64046: LIST
64047: PUSH
64048: LD_INT 5
64050: PUSH
64051: LD_INT 1
64053: PUSH
64054: EMPTY
64055: LIST
64056: LIST
64057: PUSH
64058: LD_INT 4
64060: PUSH
64061: LD_INT 1
64063: PUSH
64064: EMPTY
64065: LIST
64066: LIST
64067: PUSH
64068: LD_INT 3
64070: PUSH
64071: LD_INT 0
64073: PUSH
64074: EMPTY
64075: LIST
64076: LIST
64077: PUSH
64078: LD_INT 3
64080: PUSH
64081: LD_INT 1
64083: NEG
64084: PUSH
64085: EMPTY
64086: LIST
64087: LIST
64088: PUSH
64089: LD_INT 3
64091: PUSH
64092: LD_INT 2
64094: NEG
64095: PUSH
64096: EMPTY
64097: LIST
64098: LIST
64099: PUSH
64100: LD_INT 5
64102: PUSH
64103: LD_INT 2
64105: PUSH
64106: EMPTY
64107: LIST
64108: LIST
64109: PUSH
64110: LD_INT 3
64112: PUSH
64113: LD_INT 3
64115: PUSH
64116: EMPTY
64117: LIST
64118: LIST
64119: PUSH
64120: LD_INT 3
64122: PUSH
64123: LD_INT 2
64125: PUSH
64126: EMPTY
64127: LIST
64128: LIST
64129: PUSH
64130: LD_INT 4
64132: PUSH
64133: LD_INT 3
64135: PUSH
64136: EMPTY
64137: LIST
64138: LIST
64139: PUSH
64140: LD_INT 4
64142: PUSH
64143: LD_INT 4
64145: PUSH
64146: EMPTY
64147: LIST
64148: LIST
64149: PUSH
64150: LD_INT 3
64152: PUSH
64153: LD_INT 4
64155: PUSH
64156: EMPTY
64157: LIST
64158: LIST
64159: PUSH
64160: LD_INT 2
64162: PUSH
64163: LD_INT 3
64165: PUSH
64166: EMPTY
64167: LIST
64168: LIST
64169: PUSH
64170: LD_INT 2
64172: PUSH
64173: LD_INT 2
64175: PUSH
64176: EMPTY
64177: LIST
64178: LIST
64179: PUSH
64180: LD_INT 4
64182: PUSH
64183: LD_INT 2
64185: PUSH
64186: EMPTY
64187: LIST
64188: LIST
64189: PUSH
64190: LD_INT 2
64192: PUSH
64193: LD_INT 4
64195: PUSH
64196: EMPTY
64197: LIST
64198: LIST
64199: PUSH
64200: LD_INT 0
64202: PUSH
64203: LD_INT 4
64205: PUSH
64206: EMPTY
64207: LIST
64208: LIST
64209: PUSH
64210: LD_INT 0
64212: PUSH
64213: LD_INT 3
64215: PUSH
64216: EMPTY
64217: LIST
64218: LIST
64219: PUSH
64220: LD_INT 1
64222: PUSH
64223: LD_INT 4
64225: PUSH
64226: EMPTY
64227: LIST
64228: LIST
64229: PUSH
64230: LD_INT 1
64232: PUSH
64233: LD_INT 5
64235: PUSH
64236: EMPTY
64237: LIST
64238: LIST
64239: PUSH
64240: LD_INT 0
64242: PUSH
64243: LD_INT 5
64245: PUSH
64246: EMPTY
64247: LIST
64248: LIST
64249: PUSH
64250: LD_INT 1
64252: NEG
64253: PUSH
64254: LD_INT 4
64256: PUSH
64257: EMPTY
64258: LIST
64259: LIST
64260: PUSH
64261: LD_INT 1
64263: NEG
64264: PUSH
64265: LD_INT 3
64267: PUSH
64268: EMPTY
64269: LIST
64270: LIST
64271: PUSH
64272: LD_INT 2
64274: PUSH
64275: LD_INT 5
64277: PUSH
64278: EMPTY
64279: LIST
64280: LIST
64281: PUSH
64282: LD_INT 2
64284: NEG
64285: PUSH
64286: LD_INT 3
64288: PUSH
64289: EMPTY
64290: LIST
64291: LIST
64292: PUSH
64293: LD_INT 3
64295: NEG
64296: PUSH
64297: LD_INT 0
64299: PUSH
64300: EMPTY
64301: LIST
64302: LIST
64303: PUSH
64304: LD_INT 3
64306: NEG
64307: PUSH
64308: LD_INT 1
64310: NEG
64311: PUSH
64312: EMPTY
64313: LIST
64314: LIST
64315: PUSH
64316: LD_INT 2
64318: NEG
64319: PUSH
64320: LD_INT 0
64322: PUSH
64323: EMPTY
64324: LIST
64325: LIST
64326: PUSH
64327: LD_INT 2
64329: NEG
64330: PUSH
64331: LD_INT 1
64333: PUSH
64334: EMPTY
64335: LIST
64336: LIST
64337: PUSH
64338: LD_INT 3
64340: NEG
64341: PUSH
64342: LD_INT 1
64344: PUSH
64345: EMPTY
64346: LIST
64347: LIST
64348: PUSH
64349: LD_INT 4
64351: NEG
64352: PUSH
64353: LD_INT 0
64355: PUSH
64356: EMPTY
64357: LIST
64358: LIST
64359: PUSH
64360: LD_INT 4
64362: NEG
64363: PUSH
64364: LD_INT 1
64366: NEG
64367: PUSH
64368: EMPTY
64369: LIST
64370: LIST
64371: PUSH
64372: LD_INT 4
64374: NEG
64375: PUSH
64376: LD_INT 2
64378: NEG
64379: PUSH
64380: EMPTY
64381: LIST
64382: LIST
64383: PUSH
64384: LD_INT 2
64386: NEG
64387: PUSH
64388: LD_INT 2
64390: PUSH
64391: EMPTY
64392: LIST
64393: LIST
64394: PUSH
64395: LD_INT 4
64397: NEG
64398: PUSH
64399: LD_INT 4
64401: NEG
64402: PUSH
64403: EMPTY
64404: LIST
64405: LIST
64406: PUSH
64407: LD_INT 4
64409: NEG
64410: PUSH
64411: LD_INT 5
64413: NEG
64414: PUSH
64415: EMPTY
64416: LIST
64417: LIST
64418: PUSH
64419: LD_INT 3
64421: NEG
64422: PUSH
64423: LD_INT 4
64425: NEG
64426: PUSH
64427: EMPTY
64428: LIST
64429: LIST
64430: PUSH
64431: LD_INT 3
64433: NEG
64434: PUSH
64435: LD_INT 3
64437: NEG
64438: PUSH
64439: EMPTY
64440: LIST
64441: LIST
64442: PUSH
64443: LD_INT 4
64445: NEG
64446: PUSH
64447: LD_INT 3
64449: NEG
64450: PUSH
64451: EMPTY
64452: LIST
64453: LIST
64454: PUSH
64455: LD_INT 5
64457: NEG
64458: PUSH
64459: LD_INT 4
64461: NEG
64462: PUSH
64463: EMPTY
64464: LIST
64465: LIST
64466: PUSH
64467: LD_INT 5
64469: NEG
64470: PUSH
64471: LD_INT 5
64473: NEG
64474: PUSH
64475: EMPTY
64476: LIST
64477: LIST
64478: PUSH
64479: LD_INT 3
64481: NEG
64482: PUSH
64483: LD_INT 5
64485: NEG
64486: PUSH
64487: EMPTY
64488: LIST
64489: LIST
64490: PUSH
64491: LD_INT 5
64493: NEG
64494: PUSH
64495: LD_INT 3
64497: NEG
64498: PUSH
64499: EMPTY
64500: LIST
64501: LIST
64502: PUSH
64503: EMPTY
64504: LIST
64505: LIST
64506: LIST
64507: LIST
64508: LIST
64509: LIST
64510: LIST
64511: LIST
64512: LIST
64513: LIST
64514: LIST
64515: LIST
64516: LIST
64517: LIST
64518: LIST
64519: LIST
64520: LIST
64521: LIST
64522: LIST
64523: LIST
64524: LIST
64525: LIST
64526: LIST
64527: LIST
64528: LIST
64529: LIST
64530: LIST
64531: LIST
64532: LIST
64533: LIST
64534: LIST
64535: LIST
64536: LIST
64537: LIST
64538: LIST
64539: LIST
64540: LIST
64541: LIST
64542: LIST
64543: LIST
64544: LIST
64545: LIST
64546: LIST
64547: LIST
64548: LIST
64549: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
64550: LD_ADDR_VAR 0 30
64554: PUSH
64555: LD_INT 4
64557: PUSH
64558: LD_INT 4
64560: PUSH
64561: EMPTY
64562: LIST
64563: LIST
64564: PUSH
64565: LD_INT 4
64567: PUSH
64568: LD_INT 3
64570: PUSH
64571: EMPTY
64572: LIST
64573: LIST
64574: PUSH
64575: LD_INT 5
64577: PUSH
64578: LD_INT 4
64580: PUSH
64581: EMPTY
64582: LIST
64583: LIST
64584: PUSH
64585: LD_INT 5
64587: PUSH
64588: LD_INT 5
64590: PUSH
64591: EMPTY
64592: LIST
64593: LIST
64594: PUSH
64595: LD_INT 4
64597: PUSH
64598: LD_INT 5
64600: PUSH
64601: EMPTY
64602: LIST
64603: LIST
64604: PUSH
64605: LD_INT 3
64607: PUSH
64608: LD_INT 4
64610: PUSH
64611: EMPTY
64612: LIST
64613: LIST
64614: PUSH
64615: LD_INT 3
64617: PUSH
64618: LD_INT 3
64620: PUSH
64621: EMPTY
64622: LIST
64623: LIST
64624: PUSH
64625: LD_INT 5
64627: PUSH
64628: LD_INT 3
64630: PUSH
64631: EMPTY
64632: LIST
64633: LIST
64634: PUSH
64635: LD_INT 3
64637: PUSH
64638: LD_INT 5
64640: PUSH
64641: EMPTY
64642: LIST
64643: LIST
64644: PUSH
64645: LD_INT 0
64647: PUSH
64648: LD_INT 3
64650: PUSH
64651: EMPTY
64652: LIST
64653: LIST
64654: PUSH
64655: LD_INT 0
64657: PUSH
64658: LD_INT 2
64660: PUSH
64661: EMPTY
64662: LIST
64663: LIST
64664: PUSH
64665: LD_INT 1
64667: PUSH
64668: LD_INT 3
64670: PUSH
64671: EMPTY
64672: LIST
64673: LIST
64674: PUSH
64675: LD_INT 1
64677: PUSH
64678: LD_INT 4
64680: PUSH
64681: EMPTY
64682: LIST
64683: LIST
64684: PUSH
64685: LD_INT 0
64687: PUSH
64688: LD_INT 4
64690: PUSH
64691: EMPTY
64692: LIST
64693: LIST
64694: PUSH
64695: LD_INT 1
64697: NEG
64698: PUSH
64699: LD_INT 3
64701: PUSH
64702: EMPTY
64703: LIST
64704: LIST
64705: PUSH
64706: LD_INT 1
64708: NEG
64709: PUSH
64710: LD_INT 2
64712: PUSH
64713: EMPTY
64714: LIST
64715: LIST
64716: PUSH
64717: LD_INT 2
64719: PUSH
64720: LD_INT 4
64722: PUSH
64723: EMPTY
64724: LIST
64725: LIST
64726: PUSH
64727: LD_INT 2
64729: NEG
64730: PUSH
64731: LD_INT 2
64733: PUSH
64734: EMPTY
64735: LIST
64736: LIST
64737: PUSH
64738: LD_INT 4
64740: NEG
64741: PUSH
64742: LD_INT 0
64744: PUSH
64745: EMPTY
64746: LIST
64747: LIST
64748: PUSH
64749: LD_INT 4
64751: NEG
64752: PUSH
64753: LD_INT 1
64755: NEG
64756: PUSH
64757: EMPTY
64758: LIST
64759: LIST
64760: PUSH
64761: LD_INT 3
64763: NEG
64764: PUSH
64765: LD_INT 0
64767: PUSH
64768: EMPTY
64769: LIST
64770: LIST
64771: PUSH
64772: LD_INT 3
64774: NEG
64775: PUSH
64776: LD_INT 1
64778: PUSH
64779: EMPTY
64780: LIST
64781: LIST
64782: PUSH
64783: LD_INT 4
64785: NEG
64786: PUSH
64787: LD_INT 1
64789: PUSH
64790: EMPTY
64791: LIST
64792: LIST
64793: PUSH
64794: LD_INT 5
64796: NEG
64797: PUSH
64798: LD_INT 0
64800: PUSH
64801: EMPTY
64802: LIST
64803: LIST
64804: PUSH
64805: LD_INT 5
64807: NEG
64808: PUSH
64809: LD_INT 1
64811: NEG
64812: PUSH
64813: EMPTY
64814: LIST
64815: LIST
64816: PUSH
64817: LD_INT 5
64819: NEG
64820: PUSH
64821: LD_INT 2
64823: NEG
64824: PUSH
64825: EMPTY
64826: LIST
64827: LIST
64828: PUSH
64829: LD_INT 3
64831: NEG
64832: PUSH
64833: LD_INT 2
64835: PUSH
64836: EMPTY
64837: LIST
64838: LIST
64839: PUSH
64840: LD_INT 3
64842: NEG
64843: PUSH
64844: LD_INT 3
64846: NEG
64847: PUSH
64848: EMPTY
64849: LIST
64850: LIST
64851: PUSH
64852: LD_INT 3
64854: NEG
64855: PUSH
64856: LD_INT 4
64858: NEG
64859: PUSH
64860: EMPTY
64861: LIST
64862: LIST
64863: PUSH
64864: LD_INT 2
64866: NEG
64867: PUSH
64868: LD_INT 3
64870: NEG
64871: PUSH
64872: EMPTY
64873: LIST
64874: LIST
64875: PUSH
64876: LD_INT 2
64878: NEG
64879: PUSH
64880: LD_INT 2
64882: NEG
64883: PUSH
64884: EMPTY
64885: LIST
64886: LIST
64887: PUSH
64888: LD_INT 3
64890: NEG
64891: PUSH
64892: LD_INT 2
64894: NEG
64895: PUSH
64896: EMPTY
64897: LIST
64898: LIST
64899: PUSH
64900: LD_INT 4
64902: NEG
64903: PUSH
64904: LD_INT 3
64906: NEG
64907: PUSH
64908: EMPTY
64909: LIST
64910: LIST
64911: PUSH
64912: LD_INT 4
64914: NEG
64915: PUSH
64916: LD_INT 4
64918: NEG
64919: PUSH
64920: EMPTY
64921: LIST
64922: LIST
64923: PUSH
64924: LD_INT 2
64926: NEG
64927: PUSH
64928: LD_INT 4
64930: NEG
64931: PUSH
64932: EMPTY
64933: LIST
64934: LIST
64935: PUSH
64936: LD_INT 4
64938: NEG
64939: PUSH
64940: LD_INT 2
64942: NEG
64943: PUSH
64944: EMPTY
64945: LIST
64946: LIST
64947: PUSH
64948: LD_INT 0
64950: PUSH
64951: LD_INT 4
64953: NEG
64954: PUSH
64955: EMPTY
64956: LIST
64957: LIST
64958: PUSH
64959: LD_INT 0
64961: PUSH
64962: LD_INT 5
64964: NEG
64965: PUSH
64966: EMPTY
64967: LIST
64968: LIST
64969: PUSH
64970: LD_INT 1
64972: PUSH
64973: LD_INT 4
64975: NEG
64976: PUSH
64977: EMPTY
64978: LIST
64979: LIST
64980: PUSH
64981: LD_INT 1
64983: PUSH
64984: LD_INT 3
64986: NEG
64987: PUSH
64988: EMPTY
64989: LIST
64990: LIST
64991: PUSH
64992: LD_INT 0
64994: PUSH
64995: LD_INT 3
64997: NEG
64998: PUSH
64999: EMPTY
65000: LIST
65001: LIST
65002: PUSH
65003: LD_INT 1
65005: NEG
65006: PUSH
65007: LD_INT 4
65009: NEG
65010: PUSH
65011: EMPTY
65012: LIST
65013: LIST
65014: PUSH
65015: LD_INT 1
65017: NEG
65018: PUSH
65019: LD_INT 5
65021: NEG
65022: PUSH
65023: EMPTY
65024: LIST
65025: LIST
65026: PUSH
65027: LD_INT 2
65029: PUSH
65030: LD_INT 3
65032: NEG
65033: PUSH
65034: EMPTY
65035: LIST
65036: LIST
65037: PUSH
65038: LD_INT 2
65040: NEG
65041: PUSH
65042: LD_INT 5
65044: NEG
65045: PUSH
65046: EMPTY
65047: LIST
65048: LIST
65049: PUSH
65050: EMPTY
65051: LIST
65052: LIST
65053: LIST
65054: LIST
65055: LIST
65056: LIST
65057: LIST
65058: LIST
65059: LIST
65060: LIST
65061: LIST
65062: LIST
65063: LIST
65064: LIST
65065: LIST
65066: LIST
65067: LIST
65068: LIST
65069: LIST
65070: LIST
65071: LIST
65072: LIST
65073: LIST
65074: LIST
65075: LIST
65076: LIST
65077: LIST
65078: LIST
65079: LIST
65080: LIST
65081: LIST
65082: LIST
65083: LIST
65084: LIST
65085: LIST
65086: LIST
65087: LIST
65088: LIST
65089: LIST
65090: LIST
65091: LIST
65092: LIST
65093: LIST
65094: LIST
65095: LIST
65096: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
65097: LD_ADDR_VAR 0 31
65101: PUSH
65102: LD_INT 0
65104: PUSH
65105: LD_INT 4
65107: PUSH
65108: EMPTY
65109: LIST
65110: LIST
65111: PUSH
65112: LD_INT 0
65114: PUSH
65115: LD_INT 3
65117: PUSH
65118: EMPTY
65119: LIST
65120: LIST
65121: PUSH
65122: LD_INT 1
65124: PUSH
65125: LD_INT 4
65127: PUSH
65128: EMPTY
65129: LIST
65130: LIST
65131: PUSH
65132: LD_INT 1
65134: PUSH
65135: LD_INT 5
65137: PUSH
65138: EMPTY
65139: LIST
65140: LIST
65141: PUSH
65142: LD_INT 0
65144: PUSH
65145: LD_INT 5
65147: PUSH
65148: EMPTY
65149: LIST
65150: LIST
65151: PUSH
65152: LD_INT 1
65154: NEG
65155: PUSH
65156: LD_INT 4
65158: PUSH
65159: EMPTY
65160: LIST
65161: LIST
65162: PUSH
65163: LD_INT 1
65165: NEG
65166: PUSH
65167: LD_INT 3
65169: PUSH
65170: EMPTY
65171: LIST
65172: LIST
65173: PUSH
65174: LD_INT 2
65176: PUSH
65177: LD_INT 5
65179: PUSH
65180: EMPTY
65181: LIST
65182: LIST
65183: PUSH
65184: LD_INT 2
65186: NEG
65187: PUSH
65188: LD_INT 3
65190: PUSH
65191: EMPTY
65192: LIST
65193: LIST
65194: PUSH
65195: LD_INT 3
65197: NEG
65198: PUSH
65199: LD_INT 0
65201: PUSH
65202: EMPTY
65203: LIST
65204: LIST
65205: PUSH
65206: LD_INT 3
65208: NEG
65209: PUSH
65210: LD_INT 1
65212: NEG
65213: PUSH
65214: EMPTY
65215: LIST
65216: LIST
65217: PUSH
65218: LD_INT 2
65220: NEG
65221: PUSH
65222: LD_INT 0
65224: PUSH
65225: EMPTY
65226: LIST
65227: LIST
65228: PUSH
65229: LD_INT 2
65231: NEG
65232: PUSH
65233: LD_INT 1
65235: PUSH
65236: EMPTY
65237: LIST
65238: LIST
65239: PUSH
65240: LD_INT 3
65242: NEG
65243: PUSH
65244: LD_INT 1
65246: PUSH
65247: EMPTY
65248: LIST
65249: LIST
65250: PUSH
65251: LD_INT 4
65253: NEG
65254: PUSH
65255: LD_INT 0
65257: PUSH
65258: EMPTY
65259: LIST
65260: LIST
65261: PUSH
65262: LD_INT 4
65264: NEG
65265: PUSH
65266: LD_INT 1
65268: NEG
65269: PUSH
65270: EMPTY
65271: LIST
65272: LIST
65273: PUSH
65274: LD_INT 4
65276: NEG
65277: PUSH
65278: LD_INT 2
65280: NEG
65281: PUSH
65282: EMPTY
65283: LIST
65284: LIST
65285: PUSH
65286: LD_INT 2
65288: NEG
65289: PUSH
65290: LD_INT 2
65292: PUSH
65293: EMPTY
65294: LIST
65295: LIST
65296: PUSH
65297: LD_INT 4
65299: NEG
65300: PUSH
65301: LD_INT 4
65303: NEG
65304: PUSH
65305: EMPTY
65306: LIST
65307: LIST
65308: PUSH
65309: LD_INT 4
65311: NEG
65312: PUSH
65313: LD_INT 5
65315: NEG
65316: PUSH
65317: EMPTY
65318: LIST
65319: LIST
65320: PUSH
65321: LD_INT 3
65323: NEG
65324: PUSH
65325: LD_INT 4
65327: NEG
65328: PUSH
65329: EMPTY
65330: LIST
65331: LIST
65332: PUSH
65333: LD_INT 3
65335: NEG
65336: PUSH
65337: LD_INT 3
65339: NEG
65340: PUSH
65341: EMPTY
65342: LIST
65343: LIST
65344: PUSH
65345: LD_INT 4
65347: NEG
65348: PUSH
65349: LD_INT 3
65351: NEG
65352: PUSH
65353: EMPTY
65354: LIST
65355: LIST
65356: PUSH
65357: LD_INT 5
65359: NEG
65360: PUSH
65361: LD_INT 4
65363: NEG
65364: PUSH
65365: EMPTY
65366: LIST
65367: LIST
65368: PUSH
65369: LD_INT 5
65371: NEG
65372: PUSH
65373: LD_INT 5
65375: NEG
65376: PUSH
65377: EMPTY
65378: LIST
65379: LIST
65380: PUSH
65381: LD_INT 3
65383: NEG
65384: PUSH
65385: LD_INT 5
65387: NEG
65388: PUSH
65389: EMPTY
65390: LIST
65391: LIST
65392: PUSH
65393: LD_INT 5
65395: NEG
65396: PUSH
65397: LD_INT 3
65399: NEG
65400: PUSH
65401: EMPTY
65402: LIST
65403: LIST
65404: PUSH
65405: LD_INT 0
65407: PUSH
65408: LD_INT 3
65410: NEG
65411: PUSH
65412: EMPTY
65413: LIST
65414: LIST
65415: PUSH
65416: LD_INT 0
65418: PUSH
65419: LD_INT 4
65421: NEG
65422: PUSH
65423: EMPTY
65424: LIST
65425: LIST
65426: PUSH
65427: LD_INT 1
65429: PUSH
65430: LD_INT 3
65432: NEG
65433: PUSH
65434: EMPTY
65435: LIST
65436: LIST
65437: PUSH
65438: LD_INT 1
65440: PUSH
65441: LD_INT 2
65443: NEG
65444: PUSH
65445: EMPTY
65446: LIST
65447: LIST
65448: PUSH
65449: LD_INT 0
65451: PUSH
65452: LD_INT 2
65454: NEG
65455: PUSH
65456: EMPTY
65457: LIST
65458: LIST
65459: PUSH
65460: LD_INT 1
65462: NEG
65463: PUSH
65464: LD_INT 3
65466: NEG
65467: PUSH
65468: EMPTY
65469: LIST
65470: LIST
65471: PUSH
65472: LD_INT 1
65474: NEG
65475: PUSH
65476: LD_INT 4
65478: NEG
65479: PUSH
65480: EMPTY
65481: LIST
65482: LIST
65483: PUSH
65484: LD_INT 2
65486: PUSH
65487: LD_INT 2
65489: NEG
65490: PUSH
65491: EMPTY
65492: LIST
65493: LIST
65494: PUSH
65495: LD_INT 2
65497: NEG
65498: PUSH
65499: LD_INT 4
65501: NEG
65502: PUSH
65503: EMPTY
65504: LIST
65505: LIST
65506: PUSH
65507: LD_INT 4
65509: PUSH
65510: LD_INT 0
65512: PUSH
65513: EMPTY
65514: LIST
65515: LIST
65516: PUSH
65517: LD_INT 4
65519: PUSH
65520: LD_INT 1
65522: NEG
65523: PUSH
65524: EMPTY
65525: LIST
65526: LIST
65527: PUSH
65528: LD_INT 5
65530: PUSH
65531: LD_INT 0
65533: PUSH
65534: EMPTY
65535: LIST
65536: LIST
65537: PUSH
65538: LD_INT 5
65540: PUSH
65541: LD_INT 1
65543: PUSH
65544: EMPTY
65545: LIST
65546: LIST
65547: PUSH
65548: LD_INT 4
65550: PUSH
65551: LD_INT 1
65553: PUSH
65554: EMPTY
65555: LIST
65556: LIST
65557: PUSH
65558: LD_INT 3
65560: PUSH
65561: LD_INT 0
65563: PUSH
65564: EMPTY
65565: LIST
65566: LIST
65567: PUSH
65568: LD_INT 3
65570: PUSH
65571: LD_INT 1
65573: NEG
65574: PUSH
65575: EMPTY
65576: LIST
65577: LIST
65578: PUSH
65579: LD_INT 3
65581: PUSH
65582: LD_INT 2
65584: NEG
65585: PUSH
65586: EMPTY
65587: LIST
65588: LIST
65589: PUSH
65590: LD_INT 5
65592: PUSH
65593: LD_INT 2
65595: PUSH
65596: EMPTY
65597: LIST
65598: LIST
65599: PUSH
65600: EMPTY
65601: LIST
65602: LIST
65603: LIST
65604: LIST
65605: LIST
65606: LIST
65607: LIST
65608: LIST
65609: LIST
65610: LIST
65611: LIST
65612: LIST
65613: LIST
65614: LIST
65615: LIST
65616: LIST
65617: LIST
65618: LIST
65619: LIST
65620: LIST
65621: LIST
65622: LIST
65623: LIST
65624: LIST
65625: LIST
65626: LIST
65627: LIST
65628: LIST
65629: LIST
65630: LIST
65631: LIST
65632: LIST
65633: LIST
65634: LIST
65635: LIST
65636: LIST
65637: LIST
65638: LIST
65639: LIST
65640: LIST
65641: LIST
65642: LIST
65643: LIST
65644: LIST
65645: LIST
65646: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
65647: LD_ADDR_VAR 0 32
65651: PUSH
65652: LD_INT 4
65654: NEG
65655: PUSH
65656: LD_INT 0
65658: PUSH
65659: EMPTY
65660: LIST
65661: LIST
65662: PUSH
65663: LD_INT 4
65665: NEG
65666: PUSH
65667: LD_INT 1
65669: NEG
65670: PUSH
65671: EMPTY
65672: LIST
65673: LIST
65674: PUSH
65675: LD_INT 3
65677: NEG
65678: PUSH
65679: LD_INT 0
65681: PUSH
65682: EMPTY
65683: LIST
65684: LIST
65685: PUSH
65686: LD_INT 3
65688: NEG
65689: PUSH
65690: LD_INT 1
65692: PUSH
65693: EMPTY
65694: LIST
65695: LIST
65696: PUSH
65697: LD_INT 4
65699: NEG
65700: PUSH
65701: LD_INT 1
65703: PUSH
65704: EMPTY
65705: LIST
65706: LIST
65707: PUSH
65708: LD_INT 5
65710: NEG
65711: PUSH
65712: LD_INT 0
65714: PUSH
65715: EMPTY
65716: LIST
65717: LIST
65718: PUSH
65719: LD_INT 5
65721: NEG
65722: PUSH
65723: LD_INT 1
65725: NEG
65726: PUSH
65727: EMPTY
65728: LIST
65729: LIST
65730: PUSH
65731: LD_INT 5
65733: NEG
65734: PUSH
65735: LD_INT 2
65737: NEG
65738: PUSH
65739: EMPTY
65740: LIST
65741: LIST
65742: PUSH
65743: LD_INT 3
65745: NEG
65746: PUSH
65747: LD_INT 2
65749: PUSH
65750: EMPTY
65751: LIST
65752: LIST
65753: PUSH
65754: LD_INT 3
65756: NEG
65757: PUSH
65758: LD_INT 3
65760: NEG
65761: PUSH
65762: EMPTY
65763: LIST
65764: LIST
65765: PUSH
65766: LD_INT 3
65768: NEG
65769: PUSH
65770: LD_INT 4
65772: NEG
65773: PUSH
65774: EMPTY
65775: LIST
65776: LIST
65777: PUSH
65778: LD_INT 2
65780: NEG
65781: PUSH
65782: LD_INT 3
65784: NEG
65785: PUSH
65786: EMPTY
65787: LIST
65788: LIST
65789: PUSH
65790: LD_INT 2
65792: NEG
65793: PUSH
65794: LD_INT 2
65796: NEG
65797: PUSH
65798: EMPTY
65799: LIST
65800: LIST
65801: PUSH
65802: LD_INT 3
65804: NEG
65805: PUSH
65806: LD_INT 2
65808: NEG
65809: PUSH
65810: EMPTY
65811: LIST
65812: LIST
65813: PUSH
65814: LD_INT 4
65816: NEG
65817: PUSH
65818: LD_INT 3
65820: NEG
65821: PUSH
65822: EMPTY
65823: LIST
65824: LIST
65825: PUSH
65826: LD_INT 4
65828: NEG
65829: PUSH
65830: LD_INT 4
65832: NEG
65833: PUSH
65834: EMPTY
65835: LIST
65836: LIST
65837: PUSH
65838: LD_INT 2
65840: NEG
65841: PUSH
65842: LD_INT 4
65844: NEG
65845: PUSH
65846: EMPTY
65847: LIST
65848: LIST
65849: PUSH
65850: LD_INT 4
65852: NEG
65853: PUSH
65854: LD_INT 2
65856: NEG
65857: PUSH
65858: EMPTY
65859: LIST
65860: LIST
65861: PUSH
65862: LD_INT 0
65864: PUSH
65865: LD_INT 4
65867: NEG
65868: PUSH
65869: EMPTY
65870: LIST
65871: LIST
65872: PUSH
65873: LD_INT 0
65875: PUSH
65876: LD_INT 5
65878: NEG
65879: PUSH
65880: EMPTY
65881: LIST
65882: LIST
65883: PUSH
65884: LD_INT 1
65886: PUSH
65887: LD_INT 4
65889: NEG
65890: PUSH
65891: EMPTY
65892: LIST
65893: LIST
65894: PUSH
65895: LD_INT 1
65897: PUSH
65898: LD_INT 3
65900: NEG
65901: PUSH
65902: EMPTY
65903: LIST
65904: LIST
65905: PUSH
65906: LD_INT 0
65908: PUSH
65909: LD_INT 3
65911: NEG
65912: PUSH
65913: EMPTY
65914: LIST
65915: LIST
65916: PUSH
65917: LD_INT 1
65919: NEG
65920: PUSH
65921: LD_INT 4
65923: NEG
65924: PUSH
65925: EMPTY
65926: LIST
65927: LIST
65928: PUSH
65929: LD_INT 1
65931: NEG
65932: PUSH
65933: LD_INT 5
65935: NEG
65936: PUSH
65937: EMPTY
65938: LIST
65939: LIST
65940: PUSH
65941: LD_INT 2
65943: PUSH
65944: LD_INT 3
65946: NEG
65947: PUSH
65948: EMPTY
65949: LIST
65950: LIST
65951: PUSH
65952: LD_INT 2
65954: NEG
65955: PUSH
65956: LD_INT 5
65958: NEG
65959: PUSH
65960: EMPTY
65961: LIST
65962: LIST
65963: PUSH
65964: LD_INT 3
65966: PUSH
65967: LD_INT 0
65969: PUSH
65970: EMPTY
65971: LIST
65972: LIST
65973: PUSH
65974: LD_INT 3
65976: PUSH
65977: LD_INT 1
65979: NEG
65980: PUSH
65981: EMPTY
65982: LIST
65983: LIST
65984: PUSH
65985: LD_INT 4
65987: PUSH
65988: LD_INT 0
65990: PUSH
65991: EMPTY
65992: LIST
65993: LIST
65994: PUSH
65995: LD_INT 4
65997: PUSH
65998: LD_INT 1
66000: PUSH
66001: EMPTY
66002: LIST
66003: LIST
66004: PUSH
66005: LD_INT 3
66007: PUSH
66008: LD_INT 1
66010: PUSH
66011: EMPTY
66012: LIST
66013: LIST
66014: PUSH
66015: LD_INT 2
66017: PUSH
66018: LD_INT 0
66020: PUSH
66021: EMPTY
66022: LIST
66023: LIST
66024: PUSH
66025: LD_INT 2
66027: PUSH
66028: LD_INT 1
66030: NEG
66031: PUSH
66032: EMPTY
66033: LIST
66034: LIST
66035: PUSH
66036: LD_INT 2
66038: PUSH
66039: LD_INT 2
66041: NEG
66042: PUSH
66043: EMPTY
66044: LIST
66045: LIST
66046: PUSH
66047: LD_INT 4
66049: PUSH
66050: LD_INT 2
66052: PUSH
66053: EMPTY
66054: LIST
66055: LIST
66056: PUSH
66057: LD_INT 4
66059: PUSH
66060: LD_INT 4
66062: PUSH
66063: EMPTY
66064: LIST
66065: LIST
66066: PUSH
66067: LD_INT 4
66069: PUSH
66070: LD_INT 3
66072: PUSH
66073: EMPTY
66074: LIST
66075: LIST
66076: PUSH
66077: LD_INT 5
66079: PUSH
66080: LD_INT 4
66082: PUSH
66083: EMPTY
66084: LIST
66085: LIST
66086: PUSH
66087: LD_INT 5
66089: PUSH
66090: LD_INT 5
66092: PUSH
66093: EMPTY
66094: LIST
66095: LIST
66096: PUSH
66097: LD_INT 4
66099: PUSH
66100: LD_INT 5
66102: PUSH
66103: EMPTY
66104: LIST
66105: LIST
66106: PUSH
66107: LD_INT 3
66109: PUSH
66110: LD_INT 4
66112: PUSH
66113: EMPTY
66114: LIST
66115: LIST
66116: PUSH
66117: LD_INT 3
66119: PUSH
66120: LD_INT 3
66122: PUSH
66123: EMPTY
66124: LIST
66125: LIST
66126: PUSH
66127: LD_INT 5
66129: PUSH
66130: LD_INT 3
66132: PUSH
66133: EMPTY
66134: LIST
66135: LIST
66136: PUSH
66137: LD_INT 3
66139: PUSH
66140: LD_INT 5
66142: PUSH
66143: EMPTY
66144: LIST
66145: LIST
66146: PUSH
66147: EMPTY
66148: LIST
66149: LIST
66150: LIST
66151: LIST
66152: LIST
66153: LIST
66154: LIST
66155: LIST
66156: LIST
66157: LIST
66158: LIST
66159: LIST
66160: LIST
66161: LIST
66162: LIST
66163: LIST
66164: LIST
66165: LIST
66166: LIST
66167: LIST
66168: LIST
66169: LIST
66170: LIST
66171: LIST
66172: LIST
66173: LIST
66174: LIST
66175: LIST
66176: LIST
66177: LIST
66178: LIST
66179: LIST
66180: LIST
66181: LIST
66182: LIST
66183: LIST
66184: LIST
66185: LIST
66186: LIST
66187: LIST
66188: LIST
66189: LIST
66190: LIST
66191: LIST
66192: LIST
66193: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
66194: LD_ADDR_VAR 0 33
66198: PUSH
66199: LD_INT 4
66201: NEG
66202: PUSH
66203: LD_INT 4
66205: NEG
66206: PUSH
66207: EMPTY
66208: LIST
66209: LIST
66210: PUSH
66211: LD_INT 4
66213: NEG
66214: PUSH
66215: LD_INT 5
66217: NEG
66218: PUSH
66219: EMPTY
66220: LIST
66221: LIST
66222: PUSH
66223: LD_INT 3
66225: NEG
66226: PUSH
66227: LD_INT 4
66229: NEG
66230: PUSH
66231: EMPTY
66232: LIST
66233: LIST
66234: PUSH
66235: LD_INT 3
66237: NEG
66238: PUSH
66239: LD_INT 3
66241: NEG
66242: PUSH
66243: EMPTY
66244: LIST
66245: LIST
66246: PUSH
66247: LD_INT 4
66249: NEG
66250: PUSH
66251: LD_INT 3
66253: NEG
66254: PUSH
66255: EMPTY
66256: LIST
66257: LIST
66258: PUSH
66259: LD_INT 5
66261: NEG
66262: PUSH
66263: LD_INT 4
66265: NEG
66266: PUSH
66267: EMPTY
66268: LIST
66269: LIST
66270: PUSH
66271: LD_INT 5
66273: NEG
66274: PUSH
66275: LD_INT 5
66277: NEG
66278: PUSH
66279: EMPTY
66280: LIST
66281: LIST
66282: PUSH
66283: LD_INT 3
66285: NEG
66286: PUSH
66287: LD_INT 5
66289: NEG
66290: PUSH
66291: EMPTY
66292: LIST
66293: LIST
66294: PUSH
66295: LD_INT 5
66297: NEG
66298: PUSH
66299: LD_INT 3
66301: NEG
66302: PUSH
66303: EMPTY
66304: LIST
66305: LIST
66306: PUSH
66307: LD_INT 0
66309: PUSH
66310: LD_INT 3
66312: NEG
66313: PUSH
66314: EMPTY
66315: LIST
66316: LIST
66317: PUSH
66318: LD_INT 0
66320: PUSH
66321: LD_INT 4
66323: NEG
66324: PUSH
66325: EMPTY
66326: LIST
66327: LIST
66328: PUSH
66329: LD_INT 1
66331: PUSH
66332: LD_INT 3
66334: NEG
66335: PUSH
66336: EMPTY
66337: LIST
66338: LIST
66339: PUSH
66340: LD_INT 1
66342: PUSH
66343: LD_INT 2
66345: NEG
66346: PUSH
66347: EMPTY
66348: LIST
66349: LIST
66350: PUSH
66351: LD_INT 0
66353: PUSH
66354: LD_INT 2
66356: NEG
66357: PUSH
66358: EMPTY
66359: LIST
66360: LIST
66361: PUSH
66362: LD_INT 1
66364: NEG
66365: PUSH
66366: LD_INT 3
66368: NEG
66369: PUSH
66370: EMPTY
66371: LIST
66372: LIST
66373: PUSH
66374: LD_INT 1
66376: NEG
66377: PUSH
66378: LD_INT 4
66380: NEG
66381: PUSH
66382: EMPTY
66383: LIST
66384: LIST
66385: PUSH
66386: LD_INT 2
66388: PUSH
66389: LD_INT 2
66391: NEG
66392: PUSH
66393: EMPTY
66394: LIST
66395: LIST
66396: PUSH
66397: LD_INT 2
66399: NEG
66400: PUSH
66401: LD_INT 4
66403: NEG
66404: PUSH
66405: EMPTY
66406: LIST
66407: LIST
66408: PUSH
66409: LD_INT 4
66411: PUSH
66412: LD_INT 0
66414: PUSH
66415: EMPTY
66416: LIST
66417: LIST
66418: PUSH
66419: LD_INT 4
66421: PUSH
66422: LD_INT 1
66424: NEG
66425: PUSH
66426: EMPTY
66427: LIST
66428: LIST
66429: PUSH
66430: LD_INT 5
66432: PUSH
66433: LD_INT 0
66435: PUSH
66436: EMPTY
66437: LIST
66438: LIST
66439: PUSH
66440: LD_INT 5
66442: PUSH
66443: LD_INT 1
66445: PUSH
66446: EMPTY
66447: LIST
66448: LIST
66449: PUSH
66450: LD_INT 4
66452: PUSH
66453: LD_INT 1
66455: PUSH
66456: EMPTY
66457: LIST
66458: LIST
66459: PUSH
66460: LD_INT 3
66462: PUSH
66463: LD_INT 0
66465: PUSH
66466: EMPTY
66467: LIST
66468: LIST
66469: PUSH
66470: LD_INT 3
66472: PUSH
66473: LD_INT 1
66475: NEG
66476: PUSH
66477: EMPTY
66478: LIST
66479: LIST
66480: PUSH
66481: LD_INT 3
66483: PUSH
66484: LD_INT 2
66486: NEG
66487: PUSH
66488: EMPTY
66489: LIST
66490: LIST
66491: PUSH
66492: LD_INT 5
66494: PUSH
66495: LD_INT 2
66497: PUSH
66498: EMPTY
66499: LIST
66500: LIST
66501: PUSH
66502: LD_INT 3
66504: PUSH
66505: LD_INT 3
66507: PUSH
66508: EMPTY
66509: LIST
66510: LIST
66511: PUSH
66512: LD_INT 3
66514: PUSH
66515: LD_INT 2
66517: PUSH
66518: EMPTY
66519: LIST
66520: LIST
66521: PUSH
66522: LD_INT 4
66524: PUSH
66525: LD_INT 3
66527: PUSH
66528: EMPTY
66529: LIST
66530: LIST
66531: PUSH
66532: LD_INT 4
66534: PUSH
66535: LD_INT 4
66537: PUSH
66538: EMPTY
66539: LIST
66540: LIST
66541: PUSH
66542: LD_INT 3
66544: PUSH
66545: LD_INT 4
66547: PUSH
66548: EMPTY
66549: LIST
66550: LIST
66551: PUSH
66552: LD_INT 2
66554: PUSH
66555: LD_INT 3
66557: PUSH
66558: EMPTY
66559: LIST
66560: LIST
66561: PUSH
66562: LD_INT 2
66564: PUSH
66565: LD_INT 2
66567: PUSH
66568: EMPTY
66569: LIST
66570: LIST
66571: PUSH
66572: LD_INT 4
66574: PUSH
66575: LD_INT 2
66577: PUSH
66578: EMPTY
66579: LIST
66580: LIST
66581: PUSH
66582: LD_INT 2
66584: PUSH
66585: LD_INT 4
66587: PUSH
66588: EMPTY
66589: LIST
66590: LIST
66591: PUSH
66592: LD_INT 0
66594: PUSH
66595: LD_INT 4
66597: PUSH
66598: EMPTY
66599: LIST
66600: LIST
66601: PUSH
66602: LD_INT 0
66604: PUSH
66605: LD_INT 3
66607: PUSH
66608: EMPTY
66609: LIST
66610: LIST
66611: PUSH
66612: LD_INT 1
66614: PUSH
66615: LD_INT 4
66617: PUSH
66618: EMPTY
66619: LIST
66620: LIST
66621: PUSH
66622: LD_INT 1
66624: PUSH
66625: LD_INT 5
66627: PUSH
66628: EMPTY
66629: LIST
66630: LIST
66631: PUSH
66632: LD_INT 0
66634: PUSH
66635: LD_INT 5
66637: PUSH
66638: EMPTY
66639: LIST
66640: LIST
66641: PUSH
66642: LD_INT 1
66644: NEG
66645: PUSH
66646: LD_INT 4
66648: PUSH
66649: EMPTY
66650: LIST
66651: LIST
66652: PUSH
66653: LD_INT 1
66655: NEG
66656: PUSH
66657: LD_INT 3
66659: PUSH
66660: EMPTY
66661: LIST
66662: LIST
66663: PUSH
66664: LD_INT 2
66666: PUSH
66667: LD_INT 5
66669: PUSH
66670: EMPTY
66671: LIST
66672: LIST
66673: PUSH
66674: LD_INT 2
66676: NEG
66677: PUSH
66678: LD_INT 3
66680: PUSH
66681: EMPTY
66682: LIST
66683: LIST
66684: PUSH
66685: EMPTY
66686: LIST
66687: LIST
66688: LIST
66689: LIST
66690: LIST
66691: LIST
66692: LIST
66693: LIST
66694: LIST
66695: LIST
66696: LIST
66697: LIST
66698: LIST
66699: LIST
66700: LIST
66701: LIST
66702: LIST
66703: LIST
66704: LIST
66705: LIST
66706: LIST
66707: LIST
66708: LIST
66709: LIST
66710: LIST
66711: LIST
66712: LIST
66713: LIST
66714: LIST
66715: LIST
66716: LIST
66717: LIST
66718: LIST
66719: LIST
66720: LIST
66721: LIST
66722: LIST
66723: LIST
66724: LIST
66725: LIST
66726: LIST
66727: LIST
66728: LIST
66729: LIST
66730: LIST
66731: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
66732: LD_ADDR_VAR 0 34
66736: PUSH
66737: LD_INT 0
66739: PUSH
66740: LD_INT 4
66742: NEG
66743: PUSH
66744: EMPTY
66745: LIST
66746: LIST
66747: PUSH
66748: LD_INT 0
66750: PUSH
66751: LD_INT 5
66753: NEG
66754: PUSH
66755: EMPTY
66756: LIST
66757: LIST
66758: PUSH
66759: LD_INT 1
66761: PUSH
66762: LD_INT 4
66764: NEG
66765: PUSH
66766: EMPTY
66767: LIST
66768: LIST
66769: PUSH
66770: LD_INT 1
66772: PUSH
66773: LD_INT 3
66775: NEG
66776: PUSH
66777: EMPTY
66778: LIST
66779: LIST
66780: PUSH
66781: LD_INT 0
66783: PUSH
66784: LD_INT 3
66786: NEG
66787: PUSH
66788: EMPTY
66789: LIST
66790: LIST
66791: PUSH
66792: LD_INT 1
66794: NEG
66795: PUSH
66796: LD_INT 4
66798: NEG
66799: PUSH
66800: EMPTY
66801: LIST
66802: LIST
66803: PUSH
66804: LD_INT 1
66806: NEG
66807: PUSH
66808: LD_INT 5
66810: NEG
66811: PUSH
66812: EMPTY
66813: LIST
66814: LIST
66815: PUSH
66816: LD_INT 2
66818: PUSH
66819: LD_INT 3
66821: NEG
66822: PUSH
66823: EMPTY
66824: LIST
66825: LIST
66826: PUSH
66827: LD_INT 2
66829: NEG
66830: PUSH
66831: LD_INT 5
66833: NEG
66834: PUSH
66835: EMPTY
66836: LIST
66837: LIST
66838: PUSH
66839: LD_INT 3
66841: PUSH
66842: LD_INT 0
66844: PUSH
66845: EMPTY
66846: LIST
66847: LIST
66848: PUSH
66849: LD_INT 3
66851: PUSH
66852: LD_INT 1
66854: NEG
66855: PUSH
66856: EMPTY
66857: LIST
66858: LIST
66859: PUSH
66860: LD_INT 4
66862: PUSH
66863: LD_INT 0
66865: PUSH
66866: EMPTY
66867: LIST
66868: LIST
66869: PUSH
66870: LD_INT 4
66872: PUSH
66873: LD_INT 1
66875: PUSH
66876: EMPTY
66877: LIST
66878: LIST
66879: PUSH
66880: LD_INT 3
66882: PUSH
66883: LD_INT 1
66885: PUSH
66886: EMPTY
66887: LIST
66888: LIST
66889: PUSH
66890: LD_INT 2
66892: PUSH
66893: LD_INT 0
66895: PUSH
66896: EMPTY
66897: LIST
66898: LIST
66899: PUSH
66900: LD_INT 2
66902: PUSH
66903: LD_INT 1
66905: NEG
66906: PUSH
66907: EMPTY
66908: LIST
66909: LIST
66910: PUSH
66911: LD_INT 2
66913: PUSH
66914: LD_INT 2
66916: NEG
66917: PUSH
66918: EMPTY
66919: LIST
66920: LIST
66921: PUSH
66922: LD_INT 4
66924: PUSH
66925: LD_INT 2
66927: PUSH
66928: EMPTY
66929: LIST
66930: LIST
66931: PUSH
66932: LD_INT 4
66934: PUSH
66935: LD_INT 4
66937: PUSH
66938: EMPTY
66939: LIST
66940: LIST
66941: PUSH
66942: LD_INT 4
66944: PUSH
66945: LD_INT 3
66947: PUSH
66948: EMPTY
66949: LIST
66950: LIST
66951: PUSH
66952: LD_INT 5
66954: PUSH
66955: LD_INT 4
66957: PUSH
66958: EMPTY
66959: LIST
66960: LIST
66961: PUSH
66962: LD_INT 5
66964: PUSH
66965: LD_INT 5
66967: PUSH
66968: EMPTY
66969: LIST
66970: LIST
66971: PUSH
66972: LD_INT 4
66974: PUSH
66975: LD_INT 5
66977: PUSH
66978: EMPTY
66979: LIST
66980: LIST
66981: PUSH
66982: LD_INT 3
66984: PUSH
66985: LD_INT 4
66987: PUSH
66988: EMPTY
66989: LIST
66990: LIST
66991: PUSH
66992: LD_INT 3
66994: PUSH
66995: LD_INT 3
66997: PUSH
66998: EMPTY
66999: LIST
67000: LIST
67001: PUSH
67002: LD_INT 5
67004: PUSH
67005: LD_INT 3
67007: PUSH
67008: EMPTY
67009: LIST
67010: LIST
67011: PUSH
67012: LD_INT 3
67014: PUSH
67015: LD_INT 5
67017: PUSH
67018: EMPTY
67019: LIST
67020: LIST
67021: PUSH
67022: LD_INT 0
67024: PUSH
67025: LD_INT 3
67027: PUSH
67028: EMPTY
67029: LIST
67030: LIST
67031: PUSH
67032: LD_INT 0
67034: PUSH
67035: LD_INT 2
67037: PUSH
67038: EMPTY
67039: LIST
67040: LIST
67041: PUSH
67042: LD_INT 1
67044: PUSH
67045: LD_INT 3
67047: PUSH
67048: EMPTY
67049: LIST
67050: LIST
67051: PUSH
67052: LD_INT 1
67054: PUSH
67055: LD_INT 4
67057: PUSH
67058: EMPTY
67059: LIST
67060: LIST
67061: PUSH
67062: LD_INT 0
67064: PUSH
67065: LD_INT 4
67067: PUSH
67068: EMPTY
67069: LIST
67070: LIST
67071: PUSH
67072: LD_INT 1
67074: NEG
67075: PUSH
67076: LD_INT 3
67078: PUSH
67079: EMPTY
67080: LIST
67081: LIST
67082: PUSH
67083: LD_INT 1
67085: NEG
67086: PUSH
67087: LD_INT 2
67089: PUSH
67090: EMPTY
67091: LIST
67092: LIST
67093: PUSH
67094: LD_INT 2
67096: PUSH
67097: LD_INT 4
67099: PUSH
67100: EMPTY
67101: LIST
67102: LIST
67103: PUSH
67104: LD_INT 2
67106: NEG
67107: PUSH
67108: LD_INT 2
67110: PUSH
67111: EMPTY
67112: LIST
67113: LIST
67114: PUSH
67115: LD_INT 4
67117: NEG
67118: PUSH
67119: LD_INT 0
67121: PUSH
67122: EMPTY
67123: LIST
67124: LIST
67125: PUSH
67126: LD_INT 4
67128: NEG
67129: PUSH
67130: LD_INT 1
67132: NEG
67133: PUSH
67134: EMPTY
67135: LIST
67136: LIST
67137: PUSH
67138: LD_INT 3
67140: NEG
67141: PUSH
67142: LD_INT 0
67144: PUSH
67145: EMPTY
67146: LIST
67147: LIST
67148: PUSH
67149: LD_INT 3
67151: NEG
67152: PUSH
67153: LD_INT 1
67155: PUSH
67156: EMPTY
67157: LIST
67158: LIST
67159: PUSH
67160: LD_INT 4
67162: NEG
67163: PUSH
67164: LD_INT 1
67166: PUSH
67167: EMPTY
67168: LIST
67169: LIST
67170: PUSH
67171: LD_INT 5
67173: NEG
67174: PUSH
67175: LD_INT 0
67177: PUSH
67178: EMPTY
67179: LIST
67180: LIST
67181: PUSH
67182: LD_INT 5
67184: NEG
67185: PUSH
67186: LD_INT 1
67188: NEG
67189: PUSH
67190: EMPTY
67191: LIST
67192: LIST
67193: PUSH
67194: LD_INT 5
67196: NEG
67197: PUSH
67198: LD_INT 2
67200: NEG
67201: PUSH
67202: EMPTY
67203: LIST
67204: LIST
67205: PUSH
67206: LD_INT 3
67208: NEG
67209: PUSH
67210: LD_INT 2
67212: PUSH
67213: EMPTY
67214: LIST
67215: LIST
67216: PUSH
67217: EMPTY
67218: LIST
67219: LIST
67220: LIST
67221: LIST
67222: LIST
67223: LIST
67224: LIST
67225: LIST
67226: LIST
67227: LIST
67228: LIST
67229: LIST
67230: LIST
67231: LIST
67232: LIST
67233: LIST
67234: LIST
67235: LIST
67236: LIST
67237: LIST
67238: LIST
67239: LIST
67240: LIST
67241: LIST
67242: LIST
67243: LIST
67244: LIST
67245: LIST
67246: LIST
67247: LIST
67248: LIST
67249: LIST
67250: LIST
67251: LIST
67252: LIST
67253: LIST
67254: LIST
67255: LIST
67256: LIST
67257: LIST
67258: LIST
67259: LIST
67260: LIST
67261: LIST
67262: LIST
67263: ST_TO_ADDR
// end ; end ;
67264: GO 67267
67266: POP
// case btype of b_depot , b_warehouse :
67267: LD_VAR 0 1
67271: PUSH
67272: LD_INT 0
67274: DOUBLE
67275: EQUAL
67276: IFTRUE 67286
67278: LD_INT 1
67280: DOUBLE
67281: EQUAL
67282: IFTRUE 67286
67284: GO 67487
67286: POP
// case nation of nation_american :
67287: LD_VAR 0 5
67291: PUSH
67292: LD_INT 1
67294: DOUBLE
67295: EQUAL
67296: IFTRUE 67300
67298: GO 67356
67300: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
67301: LD_ADDR_VAR 0 9
67305: PUSH
67306: LD_VAR 0 11
67310: PUSH
67311: LD_VAR 0 12
67315: PUSH
67316: LD_VAR 0 13
67320: PUSH
67321: LD_VAR 0 14
67325: PUSH
67326: LD_VAR 0 15
67330: PUSH
67331: LD_VAR 0 16
67335: PUSH
67336: EMPTY
67337: LIST
67338: LIST
67339: LIST
67340: LIST
67341: LIST
67342: LIST
67343: PUSH
67344: LD_VAR 0 4
67348: PUSH
67349: LD_INT 1
67351: PLUS
67352: ARRAY
67353: ST_TO_ADDR
67354: GO 67485
67356: LD_INT 2
67358: DOUBLE
67359: EQUAL
67360: IFTRUE 67364
67362: GO 67420
67364: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
67365: LD_ADDR_VAR 0 9
67369: PUSH
67370: LD_VAR 0 17
67374: PUSH
67375: LD_VAR 0 18
67379: PUSH
67380: LD_VAR 0 19
67384: PUSH
67385: LD_VAR 0 20
67389: PUSH
67390: LD_VAR 0 21
67394: PUSH
67395: LD_VAR 0 22
67399: PUSH
67400: EMPTY
67401: LIST
67402: LIST
67403: LIST
67404: LIST
67405: LIST
67406: LIST
67407: PUSH
67408: LD_VAR 0 4
67412: PUSH
67413: LD_INT 1
67415: PLUS
67416: ARRAY
67417: ST_TO_ADDR
67418: GO 67485
67420: LD_INT 3
67422: DOUBLE
67423: EQUAL
67424: IFTRUE 67428
67426: GO 67484
67428: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
67429: LD_ADDR_VAR 0 9
67433: PUSH
67434: LD_VAR 0 23
67438: PUSH
67439: LD_VAR 0 24
67443: PUSH
67444: LD_VAR 0 25
67448: PUSH
67449: LD_VAR 0 26
67453: PUSH
67454: LD_VAR 0 27
67458: PUSH
67459: LD_VAR 0 28
67463: PUSH
67464: EMPTY
67465: LIST
67466: LIST
67467: LIST
67468: LIST
67469: LIST
67470: LIST
67471: PUSH
67472: LD_VAR 0 4
67476: PUSH
67477: LD_INT 1
67479: PLUS
67480: ARRAY
67481: ST_TO_ADDR
67482: GO 67485
67484: POP
67485: GO 68040
67487: LD_INT 2
67489: DOUBLE
67490: EQUAL
67491: IFTRUE 67501
67493: LD_INT 3
67495: DOUBLE
67496: EQUAL
67497: IFTRUE 67501
67499: GO 67557
67501: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
67502: LD_ADDR_VAR 0 9
67506: PUSH
67507: LD_VAR 0 29
67511: PUSH
67512: LD_VAR 0 30
67516: PUSH
67517: LD_VAR 0 31
67521: PUSH
67522: LD_VAR 0 32
67526: PUSH
67527: LD_VAR 0 33
67531: PUSH
67532: LD_VAR 0 34
67536: PUSH
67537: EMPTY
67538: LIST
67539: LIST
67540: LIST
67541: LIST
67542: LIST
67543: LIST
67544: PUSH
67545: LD_VAR 0 4
67549: PUSH
67550: LD_INT 1
67552: PLUS
67553: ARRAY
67554: ST_TO_ADDR
67555: GO 68040
67557: LD_INT 16
67559: DOUBLE
67560: EQUAL
67561: IFTRUE 67619
67563: LD_INT 17
67565: DOUBLE
67566: EQUAL
67567: IFTRUE 67619
67569: LD_INT 18
67571: DOUBLE
67572: EQUAL
67573: IFTRUE 67619
67575: LD_INT 19
67577: DOUBLE
67578: EQUAL
67579: IFTRUE 67619
67581: LD_INT 22
67583: DOUBLE
67584: EQUAL
67585: IFTRUE 67619
67587: LD_INT 20
67589: DOUBLE
67590: EQUAL
67591: IFTRUE 67619
67593: LD_INT 21
67595: DOUBLE
67596: EQUAL
67597: IFTRUE 67619
67599: LD_INT 23
67601: DOUBLE
67602: EQUAL
67603: IFTRUE 67619
67605: LD_INT 24
67607: DOUBLE
67608: EQUAL
67609: IFTRUE 67619
67611: LD_INT 25
67613: DOUBLE
67614: EQUAL
67615: IFTRUE 67619
67617: GO 67675
67619: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
67620: LD_ADDR_VAR 0 9
67624: PUSH
67625: LD_VAR 0 35
67629: PUSH
67630: LD_VAR 0 36
67634: PUSH
67635: LD_VAR 0 37
67639: PUSH
67640: LD_VAR 0 38
67644: PUSH
67645: LD_VAR 0 39
67649: PUSH
67650: LD_VAR 0 40
67654: PUSH
67655: EMPTY
67656: LIST
67657: LIST
67658: LIST
67659: LIST
67660: LIST
67661: LIST
67662: PUSH
67663: LD_VAR 0 4
67667: PUSH
67668: LD_INT 1
67670: PLUS
67671: ARRAY
67672: ST_TO_ADDR
67673: GO 68040
67675: LD_INT 6
67677: DOUBLE
67678: EQUAL
67679: IFTRUE 67731
67681: LD_INT 7
67683: DOUBLE
67684: EQUAL
67685: IFTRUE 67731
67687: LD_INT 8
67689: DOUBLE
67690: EQUAL
67691: IFTRUE 67731
67693: LD_INT 13
67695: DOUBLE
67696: EQUAL
67697: IFTRUE 67731
67699: LD_INT 12
67701: DOUBLE
67702: EQUAL
67703: IFTRUE 67731
67705: LD_INT 15
67707: DOUBLE
67708: EQUAL
67709: IFTRUE 67731
67711: LD_INT 11
67713: DOUBLE
67714: EQUAL
67715: IFTRUE 67731
67717: LD_INT 14
67719: DOUBLE
67720: EQUAL
67721: IFTRUE 67731
67723: LD_INT 10
67725: DOUBLE
67726: EQUAL
67727: IFTRUE 67731
67729: GO 67787
67731: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
67732: LD_ADDR_VAR 0 9
67736: PUSH
67737: LD_VAR 0 41
67741: PUSH
67742: LD_VAR 0 42
67746: PUSH
67747: LD_VAR 0 43
67751: PUSH
67752: LD_VAR 0 44
67756: PUSH
67757: LD_VAR 0 45
67761: PUSH
67762: LD_VAR 0 46
67766: PUSH
67767: EMPTY
67768: LIST
67769: LIST
67770: LIST
67771: LIST
67772: LIST
67773: LIST
67774: PUSH
67775: LD_VAR 0 4
67779: PUSH
67780: LD_INT 1
67782: PLUS
67783: ARRAY
67784: ST_TO_ADDR
67785: GO 68040
67787: LD_INT 36
67789: DOUBLE
67790: EQUAL
67791: IFTRUE 67795
67793: GO 67851
67795: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
67796: LD_ADDR_VAR 0 9
67800: PUSH
67801: LD_VAR 0 47
67805: PUSH
67806: LD_VAR 0 48
67810: PUSH
67811: LD_VAR 0 49
67815: PUSH
67816: LD_VAR 0 50
67820: PUSH
67821: LD_VAR 0 51
67825: PUSH
67826: LD_VAR 0 52
67830: PUSH
67831: EMPTY
67832: LIST
67833: LIST
67834: LIST
67835: LIST
67836: LIST
67837: LIST
67838: PUSH
67839: LD_VAR 0 4
67843: PUSH
67844: LD_INT 1
67846: PLUS
67847: ARRAY
67848: ST_TO_ADDR
67849: GO 68040
67851: LD_INT 4
67853: DOUBLE
67854: EQUAL
67855: IFTRUE 67877
67857: LD_INT 5
67859: DOUBLE
67860: EQUAL
67861: IFTRUE 67877
67863: LD_INT 34
67865: DOUBLE
67866: EQUAL
67867: IFTRUE 67877
67869: LD_INT 37
67871: DOUBLE
67872: EQUAL
67873: IFTRUE 67877
67875: GO 67933
67877: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
67878: LD_ADDR_VAR 0 9
67882: PUSH
67883: LD_VAR 0 53
67887: PUSH
67888: LD_VAR 0 54
67892: PUSH
67893: LD_VAR 0 55
67897: PUSH
67898: LD_VAR 0 56
67902: PUSH
67903: LD_VAR 0 57
67907: PUSH
67908: LD_VAR 0 58
67912: PUSH
67913: EMPTY
67914: LIST
67915: LIST
67916: LIST
67917: LIST
67918: LIST
67919: LIST
67920: PUSH
67921: LD_VAR 0 4
67925: PUSH
67926: LD_INT 1
67928: PLUS
67929: ARRAY
67930: ST_TO_ADDR
67931: GO 68040
67933: LD_INT 31
67935: DOUBLE
67936: EQUAL
67937: IFTRUE 67983
67939: LD_INT 32
67941: DOUBLE
67942: EQUAL
67943: IFTRUE 67983
67945: LD_INT 33
67947: DOUBLE
67948: EQUAL
67949: IFTRUE 67983
67951: LD_INT 27
67953: DOUBLE
67954: EQUAL
67955: IFTRUE 67983
67957: LD_INT 26
67959: DOUBLE
67960: EQUAL
67961: IFTRUE 67983
67963: LD_INT 28
67965: DOUBLE
67966: EQUAL
67967: IFTRUE 67983
67969: LD_INT 29
67971: DOUBLE
67972: EQUAL
67973: IFTRUE 67983
67975: LD_INT 30
67977: DOUBLE
67978: EQUAL
67979: IFTRUE 67983
67981: GO 68039
67983: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
67984: LD_ADDR_VAR 0 9
67988: PUSH
67989: LD_VAR 0 59
67993: PUSH
67994: LD_VAR 0 60
67998: PUSH
67999: LD_VAR 0 61
68003: PUSH
68004: LD_VAR 0 62
68008: PUSH
68009: LD_VAR 0 63
68013: PUSH
68014: LD_VAR 0 64
68018: PUSH
68019: EMPTY
68020: LIST
68021: LIST
68022: LIST
68023: LIST
68024: LIST
68025: LIST
68026: PUSH
68027: LD_VAR 0 4
68031: PUSH
68032: LD_INT 1
68034: PLUS
68035: ARRAY
68036: ST_TO_ADDR
68037: GO 68040
68039: POP
// temp_list2 = [ ] ;
68040: LD_ADDR_VAR 0 10
68044: PUSH
68045: EMPTY
68046: ST_TO_ADDR
// for i in temp_list do
68047: LD_ADDR_VAR 0 8
68051: PUSH
68052: LD_VAR 0 9
68056: PUSH
68057: FOR_IN
68058: IFFALSE 68110
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
68060: LD_ADDR_VAR 0 10
68064: PUSH
68065: LD_VAR 0 10
68069: PUSH
68070: LD_VAR 0 8
68074: PUSH
68075: LD_INT 1
68077: ARRAY
68078: PUSH
68079: LD_VAR 0 2
68083: PLUS
68084: PUSH
68085: LD_VAR 0 8
68089: PUSH
68090: LD_INT 2
68092: ARRAY
68093: PUSH
68094: LD_VAR 0 3
68098: PLUS
68099: PUSH
68100: EMPTY
68101: LIST
68102: LIST
68103: PUSH
68104: EMPTY
68105: LIST
68106: ADD
68107: ST_TO_ADDR
68108: GO 68057
68110: POP
68111: POP
// result = temp_list2 ;
68112: LD_ADDR_VAR 0 7
68116: PUSH
68117: LD_VAR 0 10
68121: ST_TO_ADDR
// end ;
68122: LD_VAR 0 7
68126: RET
// export function EnemyInRange ( unit , dist ) ; begin
68127: LD_INT 0
68129: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
68130: LD_ADDR_VAR 0 3
68134: PUSH
68135: LD_VAR 0 1
68139: PPUSH
68140: CALL_OW 255
68144: PPUSH
68145: LD_VAR 0 1
68149: PPUSH
68150: CALL_OW 250
68154: PPUSH
68155: LD_VAR 0 1
68159: PPUSH
68160: CALL_OW 251
68164: PPUSH
68165: LD_VAR 0 2
68169: PPUSH
68170: CALL 41384 0 4
68174: PUSH
68175: LD_INT 4
68177: ARRAY
68178: ST_TO_ADDR
// end ;
68179: LD_VAR 0 3
68183: RET
// export function PlayerSeeMe ( unit ) ; begin
68184: LD_INT 0
68186: PPUSH
// result := See ( your_side , unit ) ;
68187: LD_ADDR_VAR 0 2
68191: PUSH
68192: LD_OWVAR 2
68196: PPUSH
68197: LD_VAR 0 1
68201: PPUSH
68202: CALL_OW 292
68206: ST_TO_ADDR
// end ;
68207: LD_VAR 0 2
68211: RET
// export function ReverseDir ( unit ) ; begin
68212: LD_INT 0
68214: PPUSH
// if not unit then
68215: LD_VAR 0 1
68219: NOT
68220: IFFALSE 68224
// exit ;
68222: GO 68247
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
68224: LD_ADDR_VAR 0 2
68228: PUSH
68229: LD_VAR 0 1
68233: PPUSH
68234: CALL_OW 254
68238: PUSH
68239: LD_INT 3
68241: PLUS
68242: PUSH
68243: LD_INT 6
68245: MOD
68246: ST_TO_ADDR
// end ;
68247: LD_VAR 0 2
68251: RET
// export function ReverseArray ( array ) ; var i ; begin
68252: LD_INT 0
68254: PPUSH
68255: PPUSH
// if not array then
68256: LD_VAR 0 1
68260: NOT
68261: IFFALSE 68265
// exit ;
68263: GO 68320
// result := [ ] ;
68265: LD_ADDR_VAR 0 2
68269: PUSH
68270: EMPTY
68271: ST_TO_ADDR
// for i := array downto 1 do
68272: LD_ADDR_VAR 0 3
68276: PUSH
68277: DOUBLE
68278: LD_VAR 0 1
68282: INC
68283: ST_TO_ADDR
68284: LD_INT 1
68286: PUSH
68287: FOR_DOWNTO
68288: IFFALSE 68318
// result := Join ( result , array [ i ] ) ;
68290: LD_ADDR_VAR 0 2
68294: PUSH
68295: LD_VAR 0 2
68299: PPUSH
68300: LD_VAR 0 1
68304: PUSH
68305: LD_VAR 0 3
68309: ARRAY
68310: PPUSH
68311: CALL 73172 0 2
68315: ST_TO_ADDR
68316: GO 68287
68318: POP
68319: POP
// end ;
68320: LD_VAR 0 2
68324: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
68325: LD_INT 0
68327: PPUSH
68328: PPUSH
68329: PPUSH
68330: PPUSH
68331: PPUSH
68332: PPUSH
// if not unit or not hexes then
68333: LD_VAR 0 1
68337: NOT
68338: IFTRUE 68347
68340: PUSH
68341: LD_VAR 0 2
68345: NOT
68346: OR
68347: IFFALSE 68351
// exit ;
68349: GO 68474
// dist := 9999 ;
68351: LD_ADDR_VAR 0 5
68355: PUSH
68356: LD_INT 9999
68358: ST_TO_ADDR
// for i = 1 to hexes do
68359: LD_ADDR_VAR 0 4
68363: PUSH
68364: DOUBLE
68365: LD_INT 1
68367: DEC
68368: ST_TO_ADDR
68369: LD_VAR 0 2
68373: PUSH
68374: FOR_TO
68375: IFFALSE 68462
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
68377: LD_ADDR_VAR 0 6
68381: PUSH
68382: LD_VAR 0 1
68386: PPUSH
68387: LD_VAR 0 2
68391: PUSH
68392: LD_VAR 0 4
68396: ARRAY
68397: PUSH
68398: LD_INT 1
68400: ARRAY
68401: PPUSH
68402: LD_VAR 0 2
68406: PUSH
68407: LD_VAR 0 4
68411: ARRAY
68412: PUSH
68413: LD_INT 2
68415: ARRAY
68416: PPUSH
68417: CALL_OW 297
68421: ST_TO_ADDR
// if tdist < dist then
68422: LD_VAR 0 6
68426: PUSH
68427: LD_VAR 0 5
68431: LESS
68432: IFFALSE 68460
// begin hex := hexes [ i ] ;
68434: LD_ADDR_VAR 0 8
68438: PUSH
68439: LD_VAR 0 2
68443: PUSH
68444: LD_VAR 0 4
68448: ARRAY
68449: ST_TO_ADDR
// dist := tdist ;
68450: LD_ADDR_VAR 0 5
68454: PUSH
68455: LD_VAR 0 6
68459: ST_TO_ADDR
// end ; end ;
68460: GO 68374
68462: POP
68463: POP
// result := hex ;
68464: LD_ADDR_VAR 0 3
68468: PUSH
68469: LD_VAR 0 8
68473: ST_TO_ADDR
// end ;
68474: LD_VAR 0 3
68478: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
68479: LD_INT 0
68481: PPUSH
68482: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
68483: LD_VAR 0 1
68487: NOT
68488: IFTRUE 68527
68490: PUSH
68491: LD_VAR 0 1
68495: PUSH
68496: LD_INT 21
68498: PUSH
68499: LD_INT 2
68501: PUSH
68502: EMPTY
68503: LIST
68504: LIST
68505: PUSH
68506: LD_INT 23
68508: PUSH
68509: LD_INT 2
68511: PUSH
68512: EMPTY
68513: LIST
68514: LIST
68515: PUSH
68516: EMPTY
68517: LIST
68518: LIST
68519: PPUSH
68520: CALL_OW 69
68524: IN
68525: NOT
68526: OR
68527: IFFALSE 68531
// exit ;
68529: GO 68578
// for i = 1 to 3 do
68531: LD_ADDR_VAR 0 3
68535: PUSH
68536: DOUBLE
68537: LD_INT 1
68539: DEC
68540: ST_TO_ADDR
68541: LD_INT 3
68543: PUSH
68544: FOR_TO
68545: IFFALSE 68576
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
68547: LD_VAR 0 1
68551: PPUSH
68552: CALL_OW 250
68556: PPUSH
68557: LD_VAR 0 1
68561: PPUSH
68562: CALL_OW 251
68566: PPUSH
68567: LD_INT 1
68569: PPUSH
68570: CALL_OW 453
68574: GO 68544
68576: POP
68577: POP
// end ;
68578: LD_VAR 0 2
68582: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
68583: LD_INT 0
68585: PPUSH
68586: PPUSH
68587: PPUSH
68588: PPUSH
68589: PPUSH
68590: PPUSH
// if not unit or not enemy_unit then
68591: LD_VAR 0 1
68595: NOT
68596: IFTRUE 68605
68598: PUSH
68599: LD_VAR 0 2
68603: NOT
68604: OR
68605: IFFALSE 68609
// exit ;
68607: GO 69090
// if GetLives ( i ) < 250 then
68609: LD_VAR 0 4
68613: PPUSH
68614: CALL_OW 256
68618: PUSH
68619: LD_INT 250
68621: LESS
68622: IFFALSE 68635
// begin ComAutodestruct ( i ) ;
68624: LD_VAR 0 4
68628: PPUSH
68629: CALL 68479 0 1
// exit ;
68633: GO 69090
// end ; x := GetX ( enemy_unit ) ;
68635: LD_ADDR_VAR 0 7
68639: PUSH
68640: LD_VAR 0 2
68644: PPUSH
68645: CALL_OW 250
68649: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
68650: LD_ADDR_VAR 0 8
68654: PUSH
68655: LD_VAR 0 2
68659: PPUSH
68660: CALL_OW 251
68664: ST_TO_ADDR
// if not x or not y then
68665: LD_VAR 0 7
68669: NOT
68670: IFTRUE 68679
68672: PUSH
68673: LD_VAR 0 8
68677: NOT
68678: OR
68679: IFFALSE 68683
// exit ;
68681: GO 69090
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
68683: LD_ADDR_VAR 0 6
68687: PUSH
68688: LD_VAR 0 7
68692: PPUSH
68693: LD_INT 0
68695: PPUSH
68696: LD_INT 4
68698: PPUSH
68699: CALL_OW 272
68703: PUSH
68704: LD_VAR 0 8
68708: PPUSH
68709: LD_INT 0
68711: PPUSH
68712: LD_INT 4
68714: PPUSH
68715: CALL_OW 273
68719: PUSH
68720: EMPTY
68721: LIST
68722: LIST
68723: PUSH
68724: LD_VAR 0 7
68728: PPUSH
68729: LD_INT 1
68731: PPUSH
68732: LD_INT 4
68734: PPUSH
68735: CALL_OW 272
68739: PUSH
68740: LD_VAR 0 8
68744: PPUSH
68745: LD_INT 1
68747: PPUSH
68748: LD_INT 4
68750: PPUSH
68751: CALL_OW 273
68755: PUSH
68756: EMPTY
68757: LIST
68758: LIST
68759: PUSH
68760: LD_VAR 0 7
68764: PPUSH
68765: LD_INT 2
68767: PPUSH
68768: LD_INT 4
68770: PPUSH
68771: CALL_OW 272
68775: PUSH
68776: LD_VAR 0 8
68780: PPUSH
68781: LD_INT 2
68783: PPUSH
68784: LD_INT 4
68786: PPUSH
68787: CALL_OW 273
68791: PUSH
68792: EMPTY
68793: LIST
68794: LIST
68795: PUSH
68796: LD_VAR 0 7
68800: PPUSH
68801: LD_INT 3
68803: PPUSH
68804: LD_INT 4
68806: PPUSH
68807: CALL_OW 272
68811: PUSH
68812: LD_VAR 0 8
68816: PPUSH
68817: LD_INT 3
68819: PPUSH
68820: LD_INT 4
68822: PPUSH
68823: CALL_OW 273
68827: PUSH
68828: EMPTY
68829: LIST
68830: LIST
68831: PUSH
68832: LD_VAR 0 7
68836: PPUSH
68837: LD_INT 4
68839: PPUSH
68840: LD_INT 4
68842: PPUSH
68843: CALL_OW 272
68847: PUSH
68848: LD_VAR 0 8
68852: PPUSH
68853: LD_INT 4
68855: PPUSH
68856: LD_INT 4
68858: PPUSH
68859: CALL_OW 273
68863: PUSH
68864: EMPTY
68865: LIST
68866: LIST
68867: PUSH
68868: LD_VAR 0 7
68872: PPUSH
68873: LD_INT 5
68875: PPUSH
68876: LD_INT 4
68878: PPUSH
68879: CALL_OW 272
68883: PUSH
68884: LD_VAR 0 8
68888: PPUSH
68889: LD_INT 5
68891: PPUSH
68892: LD_INT 4
68894: PPUSH
68895: CALL_OW 273
68899: PUSH
68900: EMPTY
68901: LIST
68902: LIST
68903: PUSH
68904: EMPTY
68905: LIST
68906: LIST
68907: LIST
68908: LIST
68909: LIST
68910: LIST
68911: ST_TO_ADDR
// for i = tmp downto 1 do
68912: LD_ADDR_VAR 0 4
68916: PUSH
68917: DOUBLE
68918: LD_VAR 0 6
68922: INC
68923: ST_TO_ADDR
68924: LD_INT 1
68926: PUSH
68927: FOR_DOWNTO
68928: IFFALSE 69031
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
68930: LD_VAR 0 6
68934: PUSH
68935: LD_VAR 0 4
68939: ARRAY
68940: PUSH
68941: LD_INT 1
68943: ARRAY
68944: PPUSH
68945: LD_VAR 0 6
68949: PUSH
68950: LD_VAR 0 4
68954: ARRAY
68955: PUSH
68956: LD_INT 2
68958: ARRAY
68959: PPUSH
68960: CALL_OW 488
68964: NOT
68965: IFTRUE 69007
68967: PUSH
68968: LD_VAR 0 6
68972: PUSH
68973: LD_VAR 0 4
68977: ARRAY
68978: PUSH
68979: LD_INT 1
68981: ARRAY
68982: PPUSH
68983: LD_VAR 0 6
68987: PUSH
68988: LD_VAR 0 4
68992: ARRAY
68993: PUSH
68994: LD_INT 2
68996: ARRAY
68997: PPUSH
68998: CALL_OW 428
69002: PUSH
69003: LD_INT 0
69005: NONEQUAL
69006: OR
69007: IFFALSE 69029
// tmp := Delete ( tmp , i ) ;
69009: LD_ADDR_VAR 0 6
69013: PUSH
69014: LD_VAR 0 6
69018: PPUSH
69019: LD_VAR 0 4
69023: PPUSH
69024: CALL_OW 3
69028: ST_TO_ADDR
69029: GO 68927
69031: POP
69032: POP
// j := GetClosestHex ( unit , tmp ) ;
69033: LD_ADDR_VAR 0 5
69037: PUSH
69038: LD_VAR 0 1
69042: PPUSH
69043: LD_VAR 0 6
69047: PPUSH
69048: CALL 68325 0 2
69052: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
69053: LD_VAR 0 1
69057: PPUSH
69058: LD_VAR 0 5
69062: PUSH
69063: LD_INT 1
69065: ARRAY
69066: PPUSH
69067: LD_VAR 0 5
69071: PUSH
69072: LD_INT 2
69074: ARRAY
69075: PPUSH
69076: CALL_OW 111
// result := j ;
69080: LD_ADDR_VAR 0 3
69084: PUSH
69085: LD_VAR 0 5
69089: ST_TO_ADDR
// end ;
69090: LD_VAR 0 3
69094: RET
// export function PrepareApemanSoldier ( ) ; begin
69095: LD_INT 0
69097: PPUSH
// uc_nation := 0 ;
69098: LD_ADDR_OWVAR 21
69102: PUSH
69103: LD_INT 0
69105: ST_TO_ADDR
// hc_sex := sex_male ;
69106: LD_ADDR_OWVAR 27
69110: PUSH
69111: LD_INT 1
69113: ST_TO_ADDR
// hc_name :=  ;
69114: LD_ADDR_OWVAR 26
69118: PUSH
69119: LD_STRING 
69121: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
69122: LD_ADDR_OWVAR 28
69126: PUSH
69127: LD_INT 15
69129: ST_TO_ADDR
// hc_gallery :=  ;
69130: LD_ADDR_OWVAR 33
69134: PUSH
69135: LD_STRING 
69137: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
69138: LD_ADDR_OWVAR 31
69142: PUSH
69143: LD_INT 0
69145: PPUSH
69146: LD_INT 3
69148: PPUSH
69149: CALL_OW 12
69153: PUSH
69154: LD_INT 0
69156: PPUSH
69157: LD_INT 3
69159: PPUSH
69160: CALL_OW 12
69164: PUSH
69165: LD_INT 0
69167: PUSH
69168: LD_INT 0
69170: PUSH
69171: EMPTY
69172: LIST
69173: LIST
69174: LIST
69175: LIST
69176: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
69177: LD_ADDR_OWVAR 29
69181: PUSH
69182: LD_INT 10
69184: PUSH
69185: LD_INT 12
69187: PUSH
69188: EMPTY
69189: LIST
69190: LIST
69191: ST_TO_ADDR
// end ;
69192: LD_VAR 0 1
69196: RET
// export function PrepareApemanEngineer ( ) ; begin
69197: LD_INT 0
69199: PPUSH
// uc_nation := 0 ;
69200: LD_ADDR_OWVAR 21
69204: PUSH
69205: LD_INT 0
69207: ST_TO_ADDR
// hc_sex := sex_male ;
69208: LD_ADDR_OWVAR 27
69212: PUSH
69213: LD_INT 1
69215: ST_TO_ADDR
// hc_name :=  ;
69216: LD_ADDR_OWVAR 26
69220: PUSH
69221: LD_STRING 
69223: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
69224: LD_ADDR_OWVAR 28
69228: PUSH
69229: LD_INT 16
69231: ST_TO_ADDR
// hc_gallery :=  ;
69232: LD_ADDR_OWVAR 33
69236: PUSH
69237: LD_STRING 
69239: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
69240: LD_ADDR_OWVAR 31
69244: PUSH
69245: LD_INT 0
69247: PPUSH
69248: LD_INT 3
69250: PPUSH
69251: CALL_OW 12
69255: PUSH
69256: LD_INT 0
69258: PPUSH
69259: LD_INT 3
69261: PPUSH
69262: CALL_OW 12
69266: PUSH
69267: LD_INT 0
69269: PUSH
69270: LD_INT 0
69272: PUSH
69273: EMPTY
69274: LIST
69275: LIST
69276: LIST
69277: LIST
69278: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
69279: LD_ADDR_OWVAR 29
69283: PUSH
69284: LD_INT 10
69286: PUSH
69287: LD_INT 12
69289: PUSH
69290: EMPTY
69291: LIST
69292: LIST
69293: ST_TO_ADDR
// end ;
69294: LD_VAR 0 1
69298: RET
// export function PrepareApeman ( agressivity ) ; begin
69299: LD_INT 0
69301: PPUSH
// uc_side := 0 ;
69302: LD_ADDR_OWVAR 20
69306: PUSH
69307: LD_INT 0
69309: ST_TO_ADDR
// uc_nation := 0 ;
69310: LD_ADDR_OWVAR 21
69314: PUSH
69315: LD_INT 0
69317: ST_TO_ADDR
// hc_sex := sex_male ;
69318: LD_ADDR_OWVAR 27
69322: PUSH
69323: LD_INT 1
69325: ST_TO_ADDR
// hc_class := class_apeman ;
69326: LD_ADDR_OWVAR 28
69330: PUSH
69331: LD_INT 12
69333: ST_TO_ADDR
// hc_gallery :=  ;
69334: LD_ADDR_OWVAR 33
69338: PUSH
69339: LD_STRING 
69341: ST_TO_ADDR
// hc_name :=  ;
69342: LD_ADDR_OWVAR 26
69346: PUSH
69347: LD_STRING 
69349: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
69350: LD_ADDR_OWVAR 29
69354: PUSH
69355: LD_INT 10
69357: PUSH
69358: LD_INT 12
69360: PUSH
69361: EMPTY
69362: LIST
69363: LIST
69364: ST_TO_ADDR
// if agressivity = 0 then
69365: LD_VAR 0 1
69369: PUSH
69370: LD_INT 0
69372: EQUAL
69373: IFFALSE 69385
// hc_agressivity := 0 else
69375: LD_ADDR_OWVAR 35
69379: PUSH
69380: LD_INT 0
69382: ST_TO_ADDR
69383: GO 69406
// hc_agressivity := rand ( - agressivity , agressivity ) ;
69385: LD_ADDR_OWVAR 35
69389: PUSH
69390: LD_VAR 0 1
69394: NEG
69395: PPUSH
69396: LD_VAR 0 1
69400: PPUSH
69401: CALL_OW 12
69405: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
69406: LD_ADDR_OWVAR 31
69410: PUSH
69411: LD_INT 0
69413: PPUSH
69414: LD_INT 3
69416: PPUSH
69417: CALL_OW 12
69421: PUSH
69422: LD_INT 0
69424: PPUSH
69425: LD_INT 3
69427: PPUSH
69428: CALL_OW 12
69432: PUSH
69433: LD_INT 0
69435: PUSH
69436: LD_INT 0
69438: PUSH
69439: EMPTY
69440: LIST
69441: LIST
69442: LIST
69443: LIST
69444: ST_TO_ADDR
// end ;
69445: LD_VAR 0 2
69449: RET
// export function PrepareTiger ( agressivity ) ; begin
69450: LD_INT 0
69452: PPUSH
// uc_side := 0 ;
69453: LD_ADDR_OWVAR 20
69457: PUSH
69458: LD_INT 0
69460: ST_TO_ADDR
// uc_nation := 0 ;
69461: LD_ADDR_OWVAR 21
69465: PUSH
69466: LD_INT 0
69468: ST_TO_ADDR
// InitHc ;
69469: CALL_OW 19
// hc_class := class_tiger ;
69473: LD_ADDR_OWVAR 28
69477: PUSH
69478: LD_INT 14
69480: ST_TO_ADDR
// hc_gallery :=  ;
69481: LD_ADDR_OWVAR 33
69485: PUSH
69486: LD_STRING 
69488: ST_TO_ADDR
// hc_name :=  ;
69489: LD_ADDR_OWVAR 26
69493: PUSH
69494: LD_STRING 
69496: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
69497: LD_ADDR_OWVAR 35
69501: PUSH
69502: LD_VAR 0 1
69506: NEG
69507: PPUSH
69508: LD_VAR 0 1
69512: PPUSH
69513: CALL_OW 12
69517: ST_TO_ADDR
// end ;
69518: LD_VAR 0 2
69522: RET
// export function PrepareEnchidna ( ) ; begin
69523: LD_INT 0
69525: PPUSH
// uc_side := 0 ;
69526: LD_ADDR_OWVAR 20
69530: PUSH
69531: LD_INT 0
69533: ST_TO_ADDR
// uc_nation := 0 ;
69534: LD_ADDR_OWVAR 21
69538: PUSH
69539: LD_INT 0
69541: ST_TO_ADDR
// InitHc ;
69542: CALL_OW 19
// hc_class := class_baggie ;
69546: LD_ADDR_OWVAR 28
69550: PUSH
69551: LD_INT 13
69553: ST_TO_ADDR
// hc_gallery :=  ;
69554: LD_ADDR_OWVAR 33
69558: PUSH
69559: LD_STRING 
69561: ST_TO_ADDR
// hc_name :=  ;
69562: LD_ADDR_OWVAR 26
69566: PUSH
69567: LD_STRING 
69569: ST_TO_ADDR
// end ;
69570: LD_VAR 0 1
69574: RET
// export function PrepareFrog ( ) ; begin
69575: LD_INT 0
69577: PPUSH
// uc_side := 0 ;
69578: LD_ADDR_OWVAR 20
69582: PUSH
69583: LD_INT 0
69585: ST_TO_ADDR
// uc_nation := 0 ;
69586: LD_ADDR_OWVAR 21
69590: PUSH
69591: LD_INT 0
69593: ST_TO_ADDR
// InitHc ;
69594: CALL_OW 19
// hc_class := class_frog ;
69598: LD_ADDR_OWVAR 28
69602: PUSH
69603: LD_INT 19
69605: ST_TO_ADDR
// hc_gallery :=  ;
69606: LD_ADDR_OWVAR 33
69610: PUSH
69611: LD_STRING 
69613: ST_TO_ADDR
// hc_name :=  ;
69614: LD_ADDR_OWVAR 26
69618: PUSH
69619: LD_STRING 
69621: ST_TO_ADDR
// end ;
69622: LD_VAR 0 1
69626: RET
// export function PrepareFish ( ) ; begin
69627: LD_INT 0
69629: PPUSH
// uc_side := 0 ;
69630: LD_ADDR_OWVAR 20
69634: PUSH
69635: LD_INT 0
69637: ST_TO_ADDR
// uc_nation := 0 ;
69638: LD_ADDR_OWVAR 21
69642: PUSH
69643: LD_INT 0
69645: ST_TO_ADDR
// InitHc ;
69646: CALL_OW 19
// hc_class := class_fish ;
69650: LD_ADDR_OWVAR 28
69654: PUSH
69655: LD_INT 20
69657: ST_TO_ADDR
// hc_gallery :=  ;
69658: LD_ADDR_OWVAR 33
69662: PUSH
69663: LD_STRING 
69665: ST_TO_ADDR
// hc_name :=  ;
69666: LD_ADDR_OWVAR 26
69670: PUSH
69671: LD_STRING 
69673: ST_TO_ADDR
// end ;
69674: LD_VAR 0 1
69678: RET
// export function PrepareBird ( ) ; begin
69679: LD_INT 0
69681: PPUSH
// uc_side := 0 ;
69682: LD_ADDR_OWVAR 20
69686: PUSH
69687: LD_INT 0
69689: ST_TO_ADDR
// uc_nation := 0 ;
69690: LD_ADDR_OWVAR 21
69694: PUSH
69695: LD_INT 0
69697: ST_TO_ADDR
// InitHc ;
69698: CALL_OW 19
// hc_class := class_phororhacos ;
69702: LD_ADDR_OWVAR 28
69706: PUSH
69707: LD_INT 18
69709: ST_TO_ADDR
// hc_gallery :=  ;
69710: LD_ADDR_OWVAR 33
69714: PUSH
69715: LD_STRING 
69717: ST_TO_ADDR
// hc_name :=  ;
69718: LD_ADDR_OWVAR 26
69722: PUSH
69723: LD_STRING 
69725: ST_TO_ADDR
// end ;
69726: LD_VAR 0 1
69730: RET
// export function PrepareHorse ( ) ; begin
69731: LD_INT 0
69733: PPUSH
// uc_side := 0 ;
69734: LD_ADDR_OWVAR 20
69738: PUSH
69739: LD_INT 0
69741: ST_TO_ADDR
// uc_nation := 0 ;
69742: LD_ADDR_OWVAR 21
69746: PUSH
69747: LD_INT 0
69749: ST_TO_ADDR
// InitHc ;
69750: CALL_OW 19
// hc_class := class_horse ;
69754: LD_ADDR_OWVAR 28
69758: PUSH
69759: LD_INT 21
69761: ST_TO_ADDR
// hc_gallery :=  ;
69762: LD_ADDR_OWVAR 33
69766: PUSH
69767: LD_STRING 
69769: ST_TO_ADDR
// hc_name :=  ;
69770: LD_ADDR_OWVAR 26
69774: PUSH
69775: LD_STRING 
69777: ST_TO_ADDR
// end ;
69778: LD_VAR 0 1
69782: RET
// export function PrepareMastodont ( ) ; begin
69783: LD_INT 0
69785: PPUSH
// uc_side := 0 ;
69786: LD_ADDR_OWVAR 20
69790: PUSH
69791: LD_INT 0
69793: ST_TO_ADDR
// uc_nation := 0 ;
69794: LD_ADDR_OWVAR 21
69798: PUSH
69799: LD_INT 0
69801: ST_TO_ADDR
// vc_chassis := class_mastodont ;
69802: LD_ADDR_OWVAR 37
69806: PUSH
69807: LD_INT 31
69809: ST_TO_ADDR
// vc_control := control_rider ;
69810: LD_ADDR_OWVAR 38
69814: PUSH
69815: LD_INT 4
69817: ST_TO_ADDR
// end ;
69818: LD_VAR 0 1
69822: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
69823: LD_INT 0
69825: PPUSH
69826: PPUSH
69827: PPUSH
// uc_side = 0 ;
69828: LD_ADDR_OWVAR 20
69832: PUSH
69833: LD_INT 0
69835: ST_TO_ADDR
// uc_nation = 0 ;
69836: LD_ADDR_OWVAR 21
69840: PUSH
69841: LD_INT 0
69843: ST_TO_ADDR
// InitHc_All ( ) ;
69844: CALL_OW 584
// InitVc ;
69848: CALL_OW 20
// if mastodonts then
69852: LD_VAR 0 6
69856: IFFALSE 69923
// for i = 1 to mastodonts do
69858: LD_ADDR_VAR 0 11
69862: PUSH
69863: DOUBLE
69864: LD_INT 1
69866: DEC
69867: ST_TO_ADDR
69868: LD_VAR 0 6
69872: PUSH
69873: FOR_TO
69874: IFFALSE 69921
// begin vc_chassis := 31 ;
69876: LD_ADDR_OWVAR 37
69880: PUSH
69881: LD_INT 31
69883: ST_TO_ADDR
// vc_control := control_rider ;
69884: LD_ADDR_OWVAR 38
69888: PUSH
69889: LD_INT 4
69891: ST_TO_ADDR
// animal := CreateVehicle ;
69892: LD_ADDR_VAR 0 12
69896: PUSH
69897: CALL_OW 45
69901: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69902: LD_VAR 0 12
69906: PPUSH
69907: LD_VAR 0 8
69911: PPUSH
69912: LD_INT 0
69914: PPUSH
69915: CALL 72065 0 3
// end ;
69919: GO 69873
69921: POP
69922: POP
// if horses then
69923: LD_VAR 0 5
69927: IFFALSE 69994
// for i = 1 to horses do
69929: LD_ADDR_VAR 0 11
69933: PUSH
69934: DOUBLE
69935: LD_INT 1
69937: DEC
69938: ST_TO_ADDR
69939: LD_VAR 0 5
69943: PUSH
69944: FOR_TO
69945: IFFALSE 69992
// begin hc_class := 21 ;
69947: LD_ADDR_OWVAR 28
69951: PUSH
69952: LD_INT 21
69954: ST_TO_ADDR
// hc_gallery :=  ;
69955: LD_ADDR_OWVAR 33
69959: PUSH
69960: LD_STRING 
69962: ST_TO_ADDR
// animal := CreateHuman ;
69963: LD_ADDR_VAR 0 12
69967: PUSH
69968: CALL_OW 44
69972: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69973: LD_VAR 0 12
69977: PPUSH
69978: LD_VAR 0 8
69982: PPUSH
69983: LD_INT 0
69985: PPUSH
69986: CALL 72065 0 3
// end ;
69990: GO 69944
69992: POP
69993: POP
// if birds then
69994: LD_VAR 0 1
69998: IFFALSE 70065
// for i = 1 to birds do
70000: LD_ADDR_VAR 0 11
70004: PUSH
70005: DOUBLE
70006: LD_INT 1
70008: DEC
70009: ST_TO_ADDR
70010: LD_VAR 0 1
70014: PUSH
70015: FOR_TO
70016: IFFALSE 70063
// begin hc_class := 18 ;
70018: LD_ADDR_OWVAR 28
70022: PUSH
70023: LD_INT 18
70025: ST_TO_ADDR
// hc_gallery =  ;
70026: LD_ADDR_OWVAR 33
70030: PUSH
70031: LD_STRING 
70033: ST_TO_ADDR
// animal := CreateHuman ;
70034: LD_ADDR_VAR 0 12
70038: PUSH
70039: CALL_OW 44
70043: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70044: LD_VAR 0 12
70048: PPUSH
70049: LD_VAR 0 8
70053: PPUSH
70054: LD_INT 0
70056: PPUSH
70057: CALL 72065 0 3
// end ;
70061: GO 70015
70063: POP
70064: POP
// if tigers then
70065: LD_VAR 0 2
70069: IFFALSE 70153
// for i = 1 to tigers do
70071: LD_ADDR_VAR 0 11
70075: PUSH
70076: DOUBLE
70077: LD_INT 1
70079: DEC
70080: ST_TO_ADDR
70081: LD_VAR 0 2
70085: PUSH
70086: FOR_TO
70087: IFFALSE 70151
// begin hc_class = class_tiger ;
70089: LD_ADDR_OWVAR 28
70093: PUSH
70094: LD_INT 14
70096: ST_TO_ADDR
// hc_gallery =  ;
70097: LD_ADDR_OWVAR 33
70101: PUSH
70102: LD_STRING 
70104: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
70105: LD_ADDR_OWVAR 35
70109: PUSH
70110: LD_INT 7
70112: NEG
70113: PPUSH
70114: LD_INT 7
70116: PPUSH
70117: CALL_OW 12
70121: ST_TO_ADDR
// animal := CreateHuman ;
70122: LD_ADDR_VAR 0 12
70126: PUSH
70127: CALL_OW 44
70131: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70132: LD_VAR 0 12
70136: PPUSH
70137: LD_VAR 0 8
70141: PPUSH
70142: LD_INT 0
70144: PPUSH
70145: CALL 72065 0 3
// end ;
70149: GO 70086
70151: POP
70152: POP
// if apemans then
70153: LD_VAR 0 3
70157: IFFALSE 70280
// for i = 1 to apemans do
70159: LD_ADDR_VAR 0 11
70163: PUSH
70164: DOUBLE
70165: LD_INT 1
70167: DEC
70168: ST_TO_ADDR
70169: LD_VAR 0 3
70173: PUSH
70174: FOR_TO
70175: IFFALSE 70278
// begin hc_class = class_apeman ;
70177: LD_ADDR_OWVAR 28
70181: PUSH
70182: LD_INT 12
70184: ST_TO_ADDR
// hc_gallery =  ;
70185: LD_ADDR_OWVAR 33
70189: PUSH
70190: LD_STRING 
70192: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
70193: LD_ADDR_OWVAR 35
70197: PUSH
70198: LD_INT 2
70200: NEG
70201: PPUSH
70202: LD_INT 2
70204: PPUSH
70205: CALL_OW 12
70209: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
70210: LD_ADDR_OWVAR 31
70214: PUSH
70215: LD_INT 1
70217: PPUSH
70218: LD_INT 3
70220: PPUSH
70221: CALL_OW 12
70225: PUSH
70226: LD_INT 1
70228: PPUSH
70229: LD_INT 3
70231: PPUSH
70232: CALL_OW 12
70236: PUSH
70237: LD_INT 0
70239: PUSH
70240: LD_INT 0
70242: PUSH
70243: EMPTY
70244: LIST
70245: LIST
70246: LIST
70247: LIST
70248: ST_TO_ADDR
// animal := CreateHuman ;
70249: LD_ADDR_VAR 0 12
70253: PUSH
70254: CALL_OW 44
70258: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70259: LD_VAR 0 12
70263: PPUSH
70264: LD_VAR 0 8
70268: PPUSH
70269: LD_INT 0
70271: PPUSH
70272: CALL 72065 0 3
// end ;
70276: GO 70174
70278: POP
70279: POP
// if enchidnas then
70280: LD_VAR 0 4
70284: IFFALSE 70351
// for i = 1 to enchidnas do
70286: LD_ADDR_VAR 0 11
70290: PUSH
70291: DOUBLE
70292: LD_INT 1
70294: DEC
70295: ST_TO_ADDR
70296: LD_VAR 0 4
70300: PUSH
70301: FOR_TO
70302: IFFALSE 70349
// begin hc_class = 13 ;
70304: LD_ADDR_OWVAR 28
70308: PUSH
70309: LD_INT 13
70311: ST_TO_ADDR
// hc_gallery =  ;
70312: LD_ADDR_OWVAR 33
70316: PUSH
70317: LD_STRING 
70319: ST_TO_ADDR
// animal := CreateHuman ;
70320: LD_ADDR_VAR 0 12
70324: PUSH
70325: CALL_OW 44
70329: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70330: LD_VAR 0 12
70334: PPUSH
70335: LD_VAR 0 8
70339: PPUSH
70340: LD_INT 0
70342: PPUSH
70343: CALL 72065 0 3
// end ;
70347: GO 70301
70349: POP
70350: POP
// if fishes then
70351: LD_VAR 0 7
70355: IFFALSE 70422
// for i = 1 to fishes do
70357: LD_ADDR_VAR 0 11
70361: PUSH
70362: DOUBLE
70363: LD_INT 1
70365: DEC
70366: ST_TO_ADDR
70367: LD_VAR 0 7
70371: PUSH
70372: FOR_TO
70373: IFFALSE 70420
// begin hc_class = 20 ;
70375: LD_ADDR_OWVAR 28
70379: PUSH
70380: LD_INT 20
70382: ST_TO_ADDR
// hc_gallery =  ;
70383: LD_ADDR_OWVAR 33
70387: PUSH
70388: LD_STRING 
70390: ST_TO_ADDR
// animal := CreateHuman ;
70391: LD_ADDR_VAR 0 12
70395: PUSH
70396: CALL_OW 44
70400: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
70401: LD_VAR 0 12
70405: PPUSH
70406: LD_VAR 0 9
70410: PPUSH
70411: LD_INT 0
70413: PPUSH
70414: CALL 72065 0 3
// end ;
70418: GO 70372
70420: POP
70421: POP
// end ;
70422: LD_VAR 0 10
70426: RET
// export function WantHeal ( sci , unit ) ; begin
70427: LD_INT 0
70429: PPUSH
// if GetTaskList ( sci ) > 0 then
70430: LD_VAR 0 1
70434: PPUSH
70435: CALL_OW 437
70439: PUSH
70440: LD_INT 0
70442: GREATER
70443: IFFALSE 70515
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
70445: LD_VAR 0 1
70449: PPUSH
70450: CALL_OW 437
70454: PUSH
70455: LD_INT 1
70457: ARRAY
70458: PUSH
70459: LD_INT 1
70461: ARRAY
70462: PUSH
70463: LD_STRING l
70465: EQUAL
70466: IFFALSE 70493
70468: PUSH
70469: LD_VAR 0 1
70473: PPUSH
70474: CALL_OW 437
70478: PUSH
70479: LD_INT 1
70481: ARRAY
70482: PUSH
70483: LD_INT 4
70485: ARRAY
70486: PUSH
70487: LD_VAR 0 2
70491: EQUAL
70492: AND
70493: IFFALSE 70505
// result := true else
70495: LD_ADDR_VAR 0 3
70499: PUSH
70500: LD_INT 1
70502: ST_TO_ADDR
70503: GO 70513
// result := false ;
70505: LD_ADDR_VAR 0 3
70509: PUSH
70510: LD_INT 0
70512: ST_TO_ADDR
// end else
70513: GO 70523
// result := false ;
70515: LD_ADDR_VAR 0 3
70519: PUSH
70520: LD_INT 0
70522: ST_TO_ADDR
// end ;
70523: LD_VAR 0 3
70527: RET
// export function HealTarget ( sci ) ; begin
70528: LD_INT 0
70530: PPUSH
// if not sci then
70531: LD_VAR 0 1
70535: NOT
70536: IFFALSE 70540
// exit ;
70538: GO 70605
// result := 0 ;
70540: LD_ADDR_VAR 0 2
70544: PUSH
70545: LD_INT 0
70547: ST_TO_ADDR
// if GetTaskList ( sci ) then
70548: LD_VAR 0 1
70552: PPUSH
70553: CALL_OW 437
70557: IFFALSE 70605
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
70559: LD_VAR 0 1
70563: PPUSH
70564: CALL_OW 437
70568: PUSH
70569: LD_INT 1
70571: ARRAY
70572: PUSH
70573: LD_INT 1
70575: ARRAY
70576: PUSH
70577: LD_STRING l
70579: EQUAL
70580: IFFALSE 70605
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
70582: LD_ADDR_VAR 0 2
70586: PUSH
70587: LD_VAR 0 1
70591: PPUSH
70592: CALL_OW 437
70596: PUSH
70597: LD_INT 1
70599: ARRAY
70600: PUSH
70601: LD_INT 4
70603: ARRAY
70604: ST_TO_ADDR
// end ;
70605: LD_VAR 0 2
70609: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
70610: LD_INT 0
70612: PPUSH
70613: PPUSH
70614: PPUSH
70615: PPUSH
// if not base_units then
70616: LD_VAR 0 1
70620: NOT
70621: IFFALSE 70625
// exit ;
70623: GO 70712
// result := false ;
70625: LD_ADDR_VAR 0 2
70629: PUSH
70630: LD_INT 0
70632: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
70633: LD_ADDR_VAR 0 5
70637: PUSH
70638: LD_VAR 0 1
70642: PPUSH
70643: LD_INT 21
70645: PUSH
70646: LD_INT 3
70648: PUSH
70649: EMPTY
70650: LIST
70651: LIST
70652: PPUSH
70653: CALL_OW 72
70657: ST_TO_ADDR
// if not tmp then
70658: LD_VAR 0 5
70662: NOT
70663: IFFALSE 70667
// exit ;
70665: GO 70712
// for i in tmp do
70667: LD_ADDR_VAR 0 3
70671: PUSH
70672: LD_VAR 0 5
70676: PUSH
70677: FOR_IN
70678: IFFALSE 70710
// begin result := EnemyInRange ( i , 22 ) ;
70680: LD_ADDR_VAR 0 2
70684: PUSH
70685: LD_VAR 0 3
70689: PPUSH
70690: LD_INT 22
70692: PPUSH
70693: CALL 68127 0 2
70697: ST_TO_ADDR
// if result then
70698: LD_VAR 0 2
70702: IFFALSE 70708
// exit ;
70704: POP
70705: POP
70706: GO 70712
// end ;
70708: GO 70677
70710: POP
70711: POP
// end ;
70712: LD_VAR 0 2
70716: RET
// export function FilterByTag ( units , tag ) ; begin
70717: LD_INT 0
70719: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
70720: LD_ADDR_VAR 0 3
70724: PUSH
70725: LD_VAR 0 1
70729: PPUSH
70730: LD_INT 120
70732: PUSH
70733: LD_VAR 0 2
70737: PUSH
70738: EMPTY
70739: LIST
70740: LIST
70741: PPUSH
70742: CALL_OW 72
70746: ST_TO_ADDR
// end ;
70747: LD_VAR 0 3
70751: RET
// export function IsDriver ( un ) ; begin
70752: LD_INT 0
70754: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
70755: LD_ADDR_VAR 0 2
70759: PUSH
70760: LD_VAR 0 1
70764: PUSH
70765: LD_INT 55
70767: PUSH
70768: EMPTY
70769: LIST
70770: PPUSH
70771: CALL_OW 69
70775: IN
70776: ST_TO_ADDR
// end ;
70777: LD_VAR 0 2
70781: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
70782: LD_INT 0
70784: PPUSH
70785: PPUSH
// list := [ ] ;
70786: LD_ADDR_VAR 0 5
70790: PUSH
70791: EMPTY
70792: ST_TO_ADDR
// case d of 0 :
70793: LD_VAR 0 3
70797: PUSH
70798: LD_INT 0
70800: DOUBLE
70801: EQUAL
70802: IFTRUE 70806
70804: GO 70939
70806: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
70807: LD_ADDR_VAR 0 5
70811: PUSH
70812: LD_VAR 0 1
70816: PUSH
70817: LD_INT 4
70819: MINUS
70820: PUSH
70821: LD_VAR 0 2
70825: PUSH
70826: LD_INT 4
70828: MINUS
70829: PUSH
70830: LD_INT 2
70832: PUSH
70833: EMPTY
70834: LIST
70835: LIST
70836: LIST
70837: PUSH
70838: LD_VAR 0 1
70842: PUSH
70843: LD_INT 3
70845: MINUS
70846: PUSH
70847: LD_VAR 0 2
70851: PUSH
70852: LD_INT 1
70854: PUSH
70855: EMPTY
70856: LIST
70857: LIST
70858: LIST
70859: PUSH
70860: LD_VAR 0 1
70864: PUSH
70865: LD_INT 4
70867: PLUS
70868: PUSH
70869: LD_VAR 0 2
70873: PUSH
70874: LD_INT 4
70876: PUSH
70877: EMPTY
70878: LIST
70879: LIST
70880: LIST
70881: PUSH
70882: LD_VAR 0 1
70886: PUSH
70887: LD_INT 3
70889: PLUS
70890: PUSH
70891: LD_VAR 0 2
70895: PUSH
70896: LD_INT 3
70898: PLUS
70899: PUSH
70900: LD_INT 5
70902: PUSH
70903: EMPTY
70904: LIST
70905: LIST
70906: LIST
70907: PUSH
70908: LD_VAR 0 1
70912: PUSH
70913: LD_VAR 0 2
70917: PUSH
70918: LD_INT 4
70920: PLUS
70921: PUSH
70922: LD_INT 0
70924: PUSH
70925: EMPTY
70926: LIST
70927: LIST
70928: LIST
70929: PUSH
70930: EMPTY
70931: LIST
70932: LIST
70933: LIST
70934: LIST
70935: LIST
70936: ST_TO_ADDR
// end ; 1 :
70937: GO 71637
70939: LD_INT 1
70941: DOUBLE
70942: EQUAL
70943: IFTRUE 70947
70945: GO 71080
70947: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
70948: LD_ADDR_VAR 0 5
70952: PUSH
70953: LD_VAR 0 1
70957: PUSH
70958: LD_VAR 0 2
70962: PUSH
70963: LD_INT 4
70965: MINUS
70966: PUSH
70967: LD_INT 3
70969: PUSH
70970: EMPTY
70971: LIST
70972: LIST
70973: LIST
70974: PUSH
70975: LD_VAR 0 1
70979: PUSH
70980: LD_INT 3
70982: MINUS
70983: PUSH
70984: LD_VAR 0 2
70988: PUSH
70989: LD_INT 3
70991: MINUS
70992: PUSH
70993: LD_INT 2
70995: PUSH
70996: EMPTY
70997: LIST
70998: LIST
70999: LIST
71000: PUSH
71001: LD_VAR 0 1
71005: PUSH
71006: LD_INT 4
71008: MINUS
71009: PUSH
71010: LD_VAR 0 2
71014: PUSH
71015: LD_INT 1
71017: PUSH
71018: EMPTY
71019: LIST
71020: LIST
71021: LIST
71022: PUSH
71023: LD_VAR 0 1
71027: PUSH
71028: LD_VAR 0 2
71032: PUSH
71033: LD_INT 3
71035: PLUS
71036: PUSH
71037: LD_INT 0
71039: PUSH
71040: EMPTY
71041: LIST
71042: LIST
71043: LIST
71044: PUSH
71045: LD_VAR 0 1
71049: PUSH
71050: LD_INT 4
71052: PLUS
71053: PUSH
71054: LD_VAR 0 2
71058: PUSH
71059: LD_INT 4
71061: PLUS
71062: PUSH
71063: LD_INT 5
71065: PUSH
71066: EMPTY
71067: LIST
71068: LIST
71069: LIST
71070: PUSH
71071: EMPTY
71072: LIST
71073: LIST
71074: LIST
71075: LIST
71076: LIST
71077: ST_TO_ADDR
// end ; 2 :
71078: GO 71637
71080: LD_INT 2
71082: DOUBLE
71083: EQUAL
71084: IFTRUE 71088
71086: GO 71217
71088: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
71089: LD_ADDR_VAR 0 5
71093: PUSH
71094: LD_VAR 0 1
71098: PUSH
71099: LD_VAR 0 2
71103: PUSH
71104: LD_INT 3
71106: MINUS
71107: PUSH
71108: LD_INT 3
71110: PUSH
71111: EMPTY
71112: LIST
71113: LIST
71114: LIST
71115: PUSH
71116: LD_VAR 0 1
71120: PUSH
71121: LD_INT 4
71123: PLUS
71124: PUSH
71125: LD_VAR 0 2
71129: PUSH
71130: LD_INT 4
71132: PUSH
71133: EMPTY
71134: LIST
71135: LIST
71136: LIST
71137: PUSH
71138: LD_VAR 0 1
71142: PUSH
71143: LD_VAR 0 2
71147: PUSH
71148: LD_INT 4
71150: PLUS
71151: PUSH
71152: LD_INT 0
71154: PUSH
71155: EMPTY
71156: LIST
71157: LIST
71158: LIST
71159: PUSH
71160: LD_VAR 0 1
71164: PUSH
71165: LD_INT 3
71167: MINUS
71168: PUSH
71169: LD_VAR 0 2
71173: PUSH
71174: LD_INT 1
71176: PUSH
71177: EMPTY
71178: LIST
71179: LIST
71180: LIST
71181: PUSH
71182: LD_VAR 0 1
71186: PUSH
71187: LD_INT 4
71189: MINUS
71190: PUSH
71191: LD_VAR 0 2
71195: PUSH
71196: LD_INT 4
71198: MINUS
71199: PUSH
71200: LD_INT 2
71202: PUSH
71203: EMPTY
71204: LIST
71205: LIST
71206: LIST
71207: PUSH
71208: EMPTY
71209: LIST
71210: LIST
71211: LIST
71212: LIST
71213: LIST
71214: ST_TO_ADDR
// end ; 3 :
71215: GO 71637
71217: LD_INT 3
71219: DOUBLE
71220: EQUAL
71221: IFTRUE 71225
71223: GO 71358
71225: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
71226: LD_ADDR_VAR 0 5
71230: PUSH
71231: LD_VAR 0 1
71235: PUSH
71236: LD_INT 3
71238: PLUS
71239: PUSH
71240: LD_VAR 0 2
71244: PUSH
71245: LD_INT 4
71247: PUSH
71248: EMPTY
71249: LIST
71250: LIST
71251: LIST
71252: PUSH
71253: LD_VAR 0 1
71257: PUSH
71258: LD_INT 4
71260: PLUS
71261: PUSH
71262: LD_VAR 0 2
71266: PUSH
71267: LD_INT 4
71269: PLUS
71270: PUSH
71271: LD_INT 5
71273: PUSH
71274: EMPTY
71275: LIST
71276: LIST
71277: LIST
71278: PUSH
71279: LD_VAR 0 1
71283: PUSH
71284: LD_INT 4
71286: MINUS
71287: PUSH
71288: LD_VAR 0 2
71292: PUSH
71293: LD_INT 1
71295: PUSH
71296: EMPTY
71297: LIST
71298: LIST
71299: LIST
71300: PUSH
71301: LD_VAR 0 1
71305: PUSH
71306: LD_VAR 0 2
71310: PUSH
71311: LD_INT 4
71313: MINUS
71314: PUSH
71315: LD_INT 3
71317: PUSH
71318: EMPTY
71319: LIST
71320: LIST
71321: LIST
71322: PUSH
71323: LD_VAR 0 1
71327: PUSH
71328: LD_INT 3
71330: MINUS
71331: PUSH
71332: LD_VAR 0 2
71336: PUSH
71337: LD_INT 3
71339: MINUS
71340: PUSH
71341: LD_INT 2
71343: PUSH
71344: EMPTY
71345: LIST
71346: LIST
71347: LIST
71348: PUSH
71349: EMPTY
71350: LIST
71351: LIST
71352: LIST
71353: LIST
71354: LIST
71355: ST_TO_ADDR
// end ; 4 :
71356: GO 71637
71358: LD_INT 4
71360: DOUBLE
71361: EQUAL
71362: IFTRUE 71366
71364: GO 71499
71366: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
71367: LD_ADDR_VAR 0 5
71371: PUSH
71372: LD_VAR 0 1
71376: PUSH
71377: LD_VAR 0 2
71381: PUSH
71382: LD_INT 4
71384: PLUS
71385: PUSH
71386: LD_INT 0
71388: PUSH
71389: EMPTY
71390: LIST
71391: LIST
71392: LIST
71393: PUSH
71394: LD_VAR 0 1
71398: PUSH
71399: LD_INT 3
71401: PLUS
71402: PUSH
71403: LD_VAR 0 2
71407: PUSH
71408: LD_INT 3
71410: PLUS
71411: PUSH
71412: LD_INT 5
71414: PUSH
71415: EMPTY
71416: LIST
71417: LIST
71418: LIST
71419: PUSH
71420: LD_VAR 0 1
71424: PUSH
71425: LD_INT 4
71427: PLUS
71428: PUSH
71429: LD_VAR 0 2
71433: PUSH
71434: LD_INT 4
71436: PUSH
71437: EMPTY
71438: LIST
71439: LIST
71440: LIST
71441: PUSH
71442: LD_VAR 0 1
71446: PUSH
71447: LD_VAR 0 2
71451: PUSH
71452: LD_INT 3
71454: MINUS
71455: PUSH
71456: LD_INT 3
71458: PUSH
71459: EMPTY
71460: LIST
71461: LIST
71462: LIST
71463: PUSH
71464: LD_VAR 0 1
71468: PUSH
71469: LD_INT 4
71471: MINUS
71472: PUSH
71473: LD_VAR 0 2
71477: PUSH
71478: LD_INT 4
71480: MINUS
71481: PUSH
71482: LD_INT 2
71484: PUSH
71485: EMPTY
71486: LIST
71487: LIST
71488: LIST
71489: PUSH
71490: EMPTY
71491: LIST
71492: LIST
71493: LIST
71494: LIST
71495: LIST
71496: ST_TO_ADDR
// end ; 5 :
71497: GO 71637
71499: LD_INT 5
71501: DOUBLE
71502: EQUAL
71503: IFTRUE 71507
71505: GO 71636
71507: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
71508: LD_ADDR_VAR 0 5
71512: PUSH
71513: LD_VAR 0 1
71517: PUSH
71518: LD_INT 4
71520: MINUS
71521: PUSH
71522: LD_VAR 0 2
71526: PUSH
71527: LD_INT 1
71529: PUSH
71530: EMPTY
71531: LIST
71532: LIST
71533: LIST
71534: PUSH
71535: LD_VAR 0 1
71539: PUSH
71540: LD_VAR 0 2
71544: PUSH
71545: LD_INT 4
71547: MINUS
71548: PUSH
71549: LD_INT 3
71551: PUSH
71552: EMPTY
71553: LIST
71554: LIST
71555: LIST
71556: PUSH
71557: LD_VAR 0 1
71561: PUSH
71562: LD_INT 4
71564: PLUS
71565: PUSH
71566: LD_VAR 0 2
71570: PUSH
71571: LD_INT 4
71573: PLUS
71574: PUSH
71575: LD_INT 5
71577: PUSH
71578: EMPTY
71579: LIST
71580: LIST
71581: LIST
71582: PUSH
71583: LD_VAR 0 1
71587: PUSH
71588: LD_INT 3
71590: PLUS
71591: PUSH
71592: LD_VAR 0 2
71596: PUSH
71597: LD_INT 4
71599: PUSH
71600: EMPTY
71601: LIST
71602: LIST
71603: LIST
71604: PUSH
71605: LD_VAR 0 1
71609: PUSH
71610: LD_VAR 0 2
71614: PUSH
71615: LD_INT 3
71617: PLUS
71618: PUSH
71619: LD_INT 0
71621: PUSH
71622: EMPTY
71623: LIST
71624: LIST
71625: LIST
71626: PUSH
71627: EMPTY
71628: LIST
71629: LIST
71630: LIST
71631: LIST
71632: LIST
71633: ST_TO_ADDR
// end ; end ;
71634: GO 71637
71636: POP
// result := list ;
71637: LD_ADDR_VAR 0 4
71641: PUSH
71642: LD_VAR 0 5
71646: ST_TO_ADDR
// end ;
71647: LD_VAR 0 4
71651: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
71652: LD_INT 0
71654: PPUSH
71655: PPUSH
71656: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
71657: LD_VAR 0 1
71661: NOT
71662: IFTRUE 71690
71664: PUSH
71665: LD_VAR 0 2
71669: PUSH
71670: LD_INT 1
71672: PUSH
71673: LD_INT 2
71675: PUSH
71676: LD_INT 3
71678: PUSH
71679: LD_INT 4
71681: PUSH
71682: EMPTY
71683: LIST
71684: LIST
71685: LIST
71686: LIST
71687: IN
71688: NOT
71689: OR
71690: IFFALSE 71694
// exit ;
71692: GO 71777
// tmp := [ ] ;
71694: LD_ADDR_VAR 0 5
71698: PUSH
71699: EMPTY
71700: ST_TO_ADDR
// for i in units do
71701: LD_ADDR_VAR 0 4
71705: PUSH
71706: LD_VAR 0 1
71710: PUSH
71711: FOR_IN
71712: IFFALSE 71746
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
71714: LD_ADDR_VAR 0 5
71718: PUSH
71719: LD_VAR 0 5
71723: PPUSH
71724: LD_VAR 0 4
71728: PPUSH
71729: LD_VAR 0 2
71733: PPUSH
71734: CALL_OW 259
71738: PPUSH
71739: CALL 73172 0 2
71743: ST_TO_ADDR
71744: GO 71711
71746: POP
71747: POP
// if not tmp then
71748: LD_VAR 0 5
71752: NOT
71753: IFFALSE 71757
// exit ;
71755: GO 71777
// result := SortListByListDesc ( units , tmp ) ;
71757: LD_ADDR_VAR 0 3
71761: PUSH
71762: LD_VAR 0 1
71766: PPUSH
71767: LD_VAR 0 5
71771: PPUSH
71772: CALL_OW 77
71776: ST_TO_ADDR
// end ;
71777: LD_VAR 0 3
71781: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
71782: LD_INT 0
71784: PPUSH
71785: PPUSH
71786: PPUSH
// result := false ;
71787: LD_ADDR_VAR 0 3
71791: PUSH
71792: LD_INT 0
71794: ST_TO_ADDR
// if not building then
71795: LD_VAR 0 2
71799: NOT
71800: IFFALSE 71804
// exit ;
71802: GO 71948
// x := GetX ( building ) ;
71804: LD_ADDR_VAR 0 4
71808: PUSH
71809: LD_VAR 0 2
71813: PPUSH
71814: CALL_OW 250
71818: ST_TO_ADDR
// y := GetY ( building ) ;
71819: LD_ADDR_VAR 0 5
71823: PUSH
71824: LD_VAR 0 2
71828: PPUSH
71829: CALL_OW 251
71833: ST_TO_ADDR
// if not x or not y then
71834: LD_VAR 0 4
71838: NOT
71839: IFTRUE 71848
71841: PUSH
71842: LD_VAR 0 5
71846: NOT
71847: OR
71848: IFFALSE 71852
// exit ;
71850: GO 71948
// if GetTaskList ( unit ) then
71852: LD_VAR 0 1
71856: PPUSH
71857: CALL_OW 437
71861: IFFALSE 71948
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
71863: LD_STRING e
71865: PUSH
71866: LD_VAR 0 1
71870: PPUSH
71871: CALL_OW 437
71875: PUSH
71876: LD_INT 1
71878: ARRAY
71879: PUSH
71880: LD_INT 1
71882: ARRAY
71883: EQUAL
71884: IFFALSE 71911
71886: PUSH
71887: LD_VAR 0 4
71891: PUSH
71892: LD_VAR 0 1
71896: PPUSH
71897: CALL_OW 437
71901: PUSH
71902: LD_INT 1
71904: ARRAY
71905: PUSH
71906: LD_INT 2
71908: ARRAY
71909: EQUAL
71910: AND
71911: IFFALSE 71938
71913: PUSH
71914: LD_VAR 0 5
71918: PUSH
71919: LD_VAR 0 1
71923: PPUSH
71924: CALL_OW 437
71928: PUSH
71929: LD_INT 1
71931: ARRAY
71932: PUSH
71933: LD_INT 3
71935: ARRAY
71936: EQUAL
71937: AND
71938: IFFALSE 71948
// result := true end ;
71940: LD_ADDR_VAR 0 3
71944: PUSH
71945: LD_INT 1
71947: ST_TO_ADDR
// end ;
71948: LD_VAR 0 3
71952: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
71953: LD_INT 0
71955: PPUSH
// result := false ;
71956: LD_ADDR_VAR 0 4
71960: PUSH
71961: LD_INT 0
71963: ST_TO_ADDR
// if GetTaskList ( unit ) then
71964: LD_VAR 0 1
71968: PPUSH
71969: CALL_OW 437
71973: IFFALSE 72060
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
71975: LD_STRING M
71977: PUSH
71978: LD_VAR 0 1
71982: PPUSH
71983: CALL_OW 437
71987: PUSH
71988: LD_INT 1
71990: ARRAY
71991: PUSH
71992: LD_INT 1
71994: ARRAY
71995: EQUAL
71996: IFFALSE 72023
71998: PUSH
71999: LD_VAR 0 2
72003: PUSH
72004: LD_VAR 0 1
72008: PPUSH
72009: CALL_OW 437
72013: PUSH
72014: LD_INT 1
72016: ARRAY
72017: PUSH
72018: LD_INT 2
72020: ARRAY
72021: EQUAL
72022: AND
72023: IFFALSE 72050
72025: PUSH
72026: LD_VAR 0 3
72030: PUSH
72031: LD_VAR 0 1
72035: PPUSH
72036: CALL_OW 437
72040: PUSH
72041: LD_INT 1
72043: ARRAY
72044: PUSH
72045: LD_INT 3
72047: ARRAY
72048: EQUAL
72049: AND
72050: IFFALSE 72060
// result := true ;
72052: LD_ADDR_VAR 0 4
72056: PUSH
72057: LD_INT 1
72059: ST_TO_ADDR
// end ; end ;
72060: LD_VAR 0 4
72064: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
72065: LD_INT 0
72067: PPUSH
72068: PPUSH
72069: PPUSH
72070: PPUSH
// if not unit or not area then
72071: LD_VAR 0 1
72075: NOT
72076: IFTRUE 72085
72078: PUSH
72079: LD_VAR 0 2
72083: NOT
72084: OR
72085: IFFALSE 72089
// exit ;
72087: GO 72265
// tmp := AreaToList ( area , i ) ;
72089: LD_ADDR_VAR 0 6
72093: PUSH
72094: LD_VAR 0 2
72098: PPUSH
72099: LD_VAR 0 5
72103: PPUSH
72104: CALL_OW 517
72108: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
72109: LD_ADDR_VAR 0 5
72113: PUSH
72114: DOUBLE
72115: LD_INT 1
72117: DEC
72118: ST_TO_ADDR
72119: LD_VAR 0 6
72123: PUSH
72124: LD_INT 1
72126: ARRAY
72127: PUSH
72128: FOR_TO
72129: IFFALSE 72263
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
72131: LD_ADDR_VAR 0 7
72135: PUSH
72136: LD_VAR 0 6
72140: PUSH
72141: LD_INT 1
72143: ARRAY
72144: PUSH
72145: LD_VAR 0 5
72149: ARRAY
72150: PUSH
72151: LD_VAR 0 6
72155: PUSH
72156: LD_INT 2
72158: ARRAY
72159: PUSH
72160: LD_VAR 0 5
72164: ARRAY
72165: PUSH
72166: EMPTY
72167: LIST
72168: LIST
72169: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
72170: LD_INT 92
72172: PUSH
72173: LD_VAR 0 7
72177: PUSH
72178: LD_INT 1
72180: ARRAY
72181: PUSH
72182: LD_VAR 0 7
72186: PUSH
72187: LD_INT 2
72189: ARRAY
72190: PUSH
72191: LD_INT 2
72193: PUSH
72194: EMPTY
72195: LIST
72196: LIST
72197: LIST
72198: LIST
72199: PPUSH
72200: CALL_OW 69
72204: PUSH
72205: LD_INT 0
72207: EQUAL
72208: IFFALSE 72261
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
72210: LD_VAR 0 1
72214: PPUSH
72215: LD_VAR 0 7
72219: PUSH
72220: LD_INT 1
72222: ARRAY
72223: PPUSH
72224: LD_VAR 0 7
72228: PUSH
72229: LD_INT 2
72231: ARRAY
72232: PPUSH
72233: LD_VAR 0 3
72237: PPUSH
72238: CALL_OW 48
// result := IsPlaced ( unit ) ;
72242: LD_ADDR_VAR 0 4
72246: PUSH
72247: LD_VAR 0 1
72251: PPUSH
72252: CALL_OW 305
72256: ST_TO_ADDR
// exit ;
72257: POP
72258: POP
72259: GO 72265
// end ; end ;
72261: GO 72128
72263: POP
72264: POP
// end ;
72265: LD_VAR 0 4
72269: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
72270: LD_INT 0
72272: PPUSH
72273: PPUSH
72274: PPUSH
// if not side or side > 8 then
72275: LD_VAR 0 1
72279: NOT
72280: IFTRUE 72292
72282: PUSH
72283: LD_VAR 0 1
72287: PUSH
72288: LD_INT 8
72290: GREATER
72291: OR
72292: IFFALSE 72296
// exit ;
72294: GO 72483
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
72296: LD_ADDR_VAR 0 4
72300: PUSH
72301: LD_INT 22
72303: PUSH
72304: LD_VAR 0 1
72308: PUSH
72309: EMPTY
72310: LIST
72311: LIST
72312: PUSH
72313: LD_INT 21
72315: PUSH
72316: LD_INT 3
72318: PUSH
72319: EMPTY
72320: LIST
72321: LIST
72322: PUSH
72323: EMPTY
72324: LIST
72325: LIST
72326: PPUSH
72327: CALL_OW 69
72331: ST_TO_ADDR
// if not tmp then
72332: LD_VAR 0 4
72336: NOT
72337: IFFALSE 72341
// exit ;
72339: GO 72483
// enable_addtolog := true ;
72341: LD_ADDR_OWVAR 81
72345: PUSH
72346: LD_INT 1
72348: ST_TO_ADDR
// AddToLog ( [ ) ;
72349: LD_STRING [
72351: PPUSH
72352: CALL_OW 561
// for i in tmp do
72356: LD_ADDR_VAR 0 3
72360: PUSH
72361: LD_VAR 0 4
72365: PUSH
72366: FOR_IN
72367: IFFALSE 72474
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
72369: LD_STRING [
72371: PUSH
72372: LD_VAR 0 3
72376: PPUSH
72377: CALL_OW 266
72381: STR
72382: PUSH
72383: LD_STRING , 
72385: STR
72386: PUSH
72387: LD_VAR 0 3
72391: PPUSH
72392: CALL_OW 250
72396: STR
72397: PUSH
72398: LD_STRING , 
72400: STR
72401: PUSH
72402: LD_VAR 0 3
72406: PPUSH
72407: CALL_OW 251
72411: STR
72412: PUSH
72413: LD_STRING , 
72415: STR
72416: PUSH
72417: LD_VAR 0 3
72421: PPUSH
72422: CALL_OW 254
72426: STR
72427: PUSH
72428: LD_STRING , 
72430: STR
72431: PUSH
72432: LD_VAR 0 3
72436: PPUSH
72437: LD_INT 1
72439: PPUSH
72440: CALL_OW 268
72444: STR
72445: PUSH
72446: LD_STRING , 
72448: STR
72449: PUSH
72450: LD_VAR 0 3
72454: PPUSH
72455: LD_INT 2
72457: PPUSH
72458: CALL_OW 268
72462: STR
72463: PUSH
72464: LD_STRING ],
72466: STR
72467: PPUSH
72468: CALL_OW 561
// end ;
72472: GO 72366
72474: POP
72475: POP
// AddToLog ( ]; ) ;
72476: LD_STRING ];
72478: PPUSH
72479: CALL_OW 561
// end ;
72483: LD_VAR 0 2
72487: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
72488: LD_INT 0
72490: PPUSH
72491: PPUSH
72492: PPUSH
72493: PPUSH
72494: PPUSH
// if not area or not rate or not max then
72495: LD_VAR 0 1
72499: NOT
72500: IFTRUE 72509
72502: PUSH
72503: LD_VAR 0 2
72507: NOT
72508: OR
72509: IFTRUE 72518
72511: PUSH
72512: LD_VAR 0 4
72516: NOT
72517: OR
72518: IFFALSE 72522
// exit ;
72520: GO 72711
// while 1 do
72522: LD_INT 1
72524: IFFALSE 72711
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
72526: LD_ADDR_VAR 0 9
72530: PUSH
72531: LD_VAR 0 1
72535: PPUSH
72536: LD_INT 1
72538: PPUSH
72539: CALL_OW 287
72543: PUSH
72544: LD_INT 10
72546: MUL
72547: ST_TO_ADDR
// r := rate / 10 ;
72548: LD_ADDR_VAR 0 7
72552: PUSH
72553: LD_VAR 0 2
72557: PUSH
72558: LD_INT 10
72560: DIVREAL
72561: ST_TO_ADDR
// time := 1 1$00 ;
72562: LD_ADDR_VAR 0 8
72566: PUSH
72567: LD_INT 2100
72569: ST_TO_ADDR
// if amount < min then
72570: LD_VAR 0 9
72574: PUSH
72575: LD_VAR 0 3
72579: LESS
72580: IFFALSE 72598
// r := r * 2 else
72582: LD_ADDR_VAR 0 7
72586: PUSH
72587: LD_VAR 0 7
72591: PUSH
72592: LD_INT 2
72594: MUL
72595: ST_TO_ADDR
72596: GO 72624
// if amount > max then
72598: LD_VAR 0 9
72602: PUSH
72603: LD_VAR 0 4
72607: GREATER
72608: IFFALSE 72624
// r := r / 2 ;
72610: LD_ADDR_VAR 0 7
72614: PUSH
72615: LD_VAR 0 7
72619: PUSH
72620: LD_INT 2
72622: DIVREAL
72623: ST_TO_ADDR
// time := time / r ;
72624: LD_ADDR_VAR 0 8
72628: PUSH
72629: LD_VAR 0 8
72633: PUSH
72634: LD_VAR 0 7
72638: DIVREAL
72639: ST_TO_ADDR
// if time < 0 then
72640: LD_VAR 0 8
72644: PUSH
72645: LD_INT 0
72647: LESS
72648: IFFALSE 72665
// time := time * - 1 ;
72650: LD_ADDR_VAR 0 8
72654: PUSH
72655: LD_VAR 0 8
72659: PUSH
72660: LD_INT 1
72662: NEG
72663: MUL
72664: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
72665: LD_VAR 0 8
72669: PUSH
72670: LD_INT 35
72672: PPUSH
72673: LD_INT 875
72675: PPUSH
72676: CALL_OW 12
72680: PLUS
72681: PPUSH
72682: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
72686: LD_INT 1
72688: PPUSH
72689: LD_INT 5
72691: PPUSH
72692: CALL_OW 12
72696: PPUSH
72697: LD_VAR 0 1
72701: PPUSH
72702: LD_INT 1
72704: PPUSH
72705: CALL_OW 55
// end ;
72709: GO 72522
// end ;
72711: LD_VAR 0 5
72715: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
72716: LD_INT 0
72718: PPUSH
72719: PPUSH
72720: PPUSH
72721: PPUSH
72722: PPUSH
72723: PPUSH
72724: PPUSH
72725: PPUSH
// if not turrets or not factories then
72726: LD_VAR 0 1
72730: NOT
72731: IFTRUE 72740
72733: PUSH
72734: LD_VAR 0 2
72738: NOT
72739: OR
72740: IFFALSE 72744
// exit ;
72742: GO 73051
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
72744: LD_ADDR_VAR 0 10
72748: PUSH
72749: LD_INT 5
72751: PUSH
72752: LD_INT 6
72754: PUSH
72755: EMPTY
72756: LIST
72757: LIST
72758: PUSH
72759: LD_INT 2
72761: PUSH
72762: LD_INT 4
72764: PUSH
72765: EMPTY
72766: LIST
72767: LIST
72768: PUSH
72769: LD_INT 3
72771: PUSH
72772: LD_INT 5
72774: PUSH
72775: EMPTY
72776: LIST
72777: LIST
72778: PUSH
72779: EMPTY
72780: LIST
72781: LIST
72782: LIST
72783: PUSH
72784: LD_INT 24
72786: PUSH
72787: LD_INT 25
72789: PUSH
72790: EMPTY
72791: LIST
72792: LIST
72793: PUSH
72794: LD_INT 23
72796: PUSH
72797: LD_INT 27
72799: PUSH
72800: EMPTY
72801: LIST
72802: LIST
72803: PUSH
72804: EMPTY
72805: LIST
72806: LIST
72807: PUSH
72808: LD_INT 42
72810: PUSH
72811: LD_INT 43
72813: PUSH
72814: EMPTY
72815: LIST
72816: LIST
72817: PUSH
72818: LD_INT 44
72820: PUSH
72821: LD_INT 46
72823: PUSH
72824: EMPTY
72825: LIST
72826: LIST
72827: PUSH
72828: LD_INT 45
72830: PUSH
72831: LD_INT 47
72833: PUSH
72834: EMPTY
72835: LIST
72836: LIST
72837: PUSH
72838: EMPTY
72839: LIST
72840: LIST
72841: LIST
72842: PUSH
72843: EMPTY
72844: LIST
72845: LIST
72846: LIST
72847: ST_TO_ADDR
// result := [ ] ;
72848: LD_ADDR_VAR 0 3
72852: PUSH
72853: EMPTY
72854: ST_TO_ADDR
// for i in turrets do
72855: LD_ADDR_VAR 0 4
72859: PUSH
72860: LD_VAR 0 1
72864: PUSH
72865: FOR_IN
72866: IFFALSE 73049
// begin nat := GetNation ( i ) ;
72868: LD_ADDR_VAR 0 7
72872: PUSH
72873: LD_VAR 0 4
72877: PPUSH
72878: CALL_OW 248
72882: ST_TO_ADDR
// weapon := 0 ;
72883: LD_ADDR_VAR 0 8
72887: PUSH
72888: LD_INT 0
72890: ST_TO_ADDR
// if not nat then
72891: LD_VAR 0 7
72895: NOT
72896: IFFALSE 72900
// continue ;
72898: GO 72865
// for j in list [ nat ] do
72900: LD_ADDR_VAR 0 5
72904: PUSH
72905: LD_VAR 0 10
72909: PUSH
72910: LD_VAR 0 7
72914: ARRAY
72915: PUSH
72916: FOR_IN
72917: IFFALSE 72958
// if GetBWeapon ( i ) = j [ 1 ] then
72919: LD_VAR 0 4
72923: PPUSH
72924: CALL_OW 269
72928: PUSH
72929: LD_VAR 0 5
72933: PUSH
72934: LD_INT 1
72936: ARRAY
72937: EQUAL
72938: IFFALSE 72956
// begin weapon := j [ 2 ] ;
72940: LD_ADDR_VAR 0 8
72944: PUSH
72945: LD_VAR 0 5
72949: PUSH
72950: LD_INT 2
72952: ARRAY
72953: ST_TO_ADDR
// break ;
72954: GO 72958
// end ;
72956: GO 72916
72958: POP
72959: POP
// if not weapon then
72960: LD_VAR 0 8
72964: NOT
72965: IFFALSE 72969
// continue ;
72967: GO 72865
// for k in factories do
72969: LD_ADDR_VAR 0 6
72973: PUSH
72974: LD_VAR 0 2
72978: PUSH
72979: FOR_IN
72980: IFFALSE 73045
// begin weapons := AvailableWeaponList ( k ) ;
72982: LD_ADDR_VAR 0 9
72986: PUSH
72987: LD_VAR 0 6
72991: PPUSH
72992: CALL_OW 478
72996: ST_TO_ADDR
// if not weapons then
72997: LD_VAR 0 9
73001: NOT
73002: IFFALSE 73006
// continue ;
73004: GO 72979
// if weapon in weapons then
73006: LD_VAR 0 8
73010: PUSH
73011: LD_VAR 0 9
73015: IN
73016: IFFALSE 73043
// begin result := [ i , weapon ] ;
73018: LD_ADDR_VAR 0 3
73022: PUSH
73023: LD_VAR 0 4
73027: PUSH
73028: LD_VAR 0 8
73032: PUSH
73033: EMPTY
73034: LIST
73035: LIST
73036: ST_TO_ADDR
// exit ;
73037: POP
73038: POP
73039: POP
73040: POP
73041: GO 73051
// end ; end ;
73043: GO 72979
73045: POP
73046: POP
// end ;
73047: GO 72865
73049: POP
73050: POP
// end ;
73051: LD_VAR 0 3
73055: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
73056: LD_INT 0
73058: PPUSH
// if not side or side > 8 then
73059: LD_VAR 0 3
73063: NOT
73064: IFTRUE 73076
73066: PUSH
73067: LD_VAR 0 3
73071: PUSH
73072: LD_INT 8
73074: GREATER
73075: OR
73076: IFFALSE 73080
// exit ;
73078: GO 73139
// if not range then
73080: LD_VAR 0 4
73084: NOT
73085: IFFALSE 73096
// range := - 12 ;
73087: LD_ADDR_VAR 0 4
73091: PUSH
73092: LD_INT 12
73094: NEG
73095: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
73096: LD_VAR 0 1
73100: PPUSH
73101: LD_VAR 0 2
73105: PPUSH
73106: LD_VAR 0 3
73110: PPUSH
73111: LD_VAR 0 4
73115: PPUSH
73116: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
73120: LD_VAR 0 1
73124: PPUSH
73125: LD_VAR 0 2
73129: PPUSH
73130: LD_VAR 0 3
73134: PPUSH
73135: CALL_OW 331
// end ;
73139: LD_VAR 0 5
73143: RET
// export function Video ( mode ) ; begin
73144: LD_INT 0
73146: PPUSH
// ingame_video = mode ;
73147: LD_ADDR_OWVAR 52
73151: PUSH
73152: LD_VAR 0 1
73156: ST_TO_ADDR
// interface_hidden = mode ;
73157: LD_ADDR_OWVAR 54
73161: PUSH
73162: LD_VAR 0 1
73166: ST_TO_ADDR
// end ;
73167: LD_VAR 0 2
73171: RET
// export function Join ( array , element ) ; begin
73172: LD_INT 0
73174: PPUSH
// result := Replace ( array , array + 1 , element ) ;
73175: LD_ADDR_VAR 0 3
73179: PUSH
73180: LD_VAR 0 1
73184: PPUSH
73185: LD_VAR 0 1
73189: PUSH
73190: LD_INT 1
73192: PLUS
73193: PPUSH
73194: LD_VAR 0 2
73198: PPUSH
73199: CALL_OW 1
73203: ST_TO_ADDR
// end ;
73204: LD_VAR 0 3
73208: RET
// export function JoinUnion ( array , element ) ; begin
73209: LD_INT 0
73211: PPUSH
// result := array union element ;
73212: LD_ADDR_VAR 0 3
73216: PUSH
73217: LD_VAR 0 1
73221: PUSH
73222: LD_VAR 0 2
73226: UNION
73227: ST_TO_ADDR
// end ;
73228: LD_VAR 0 3
73232: RET
// export function GetBehemoths ( side ) ; begin
73233: LD_INT 0
73235: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
73236: LD_ADDR_VAR 0 2
73240: PUSH
73241: LD_INT 22
73243: PUSH
73244: LD_VAR 0 1
73248: PUSH
73249: EMPTY
73250: LIST
73251: LIST
73252: PUSH
73253: LD_INT 31
73255: PUSH
73256: LD_INT 25
73258: PUSH
73259: EMPTY
73260: LIST
73261: LIST
73262: PUSH
73263: EMPTY
73264: LIST
73265: LIST
73266: PPUSH
73267: CALL_OW 69
73271: ST_TO_ADDR
// end ;
73272: LD_VAR 0 2
73276: RET
// export function Shuffle ( array ) ; var i , index ; begin
73277: LD_INT 0
73279: PPUSH
73280: PPUSH
73281: PPUSH
// result := [ ] ;
73282: LD_ADDR_VAR 0 2
73286: PUSH
73287: EMPTY
73288: ST_TO_ADDR
// if not array then
73289: LD_VAR 0 1
73293: NOT
73294: IFFALSE 73298
// exit ;
73296: GO 73397
// Randomize ;
73298: CALL_OW 10
// for i = array downto 1 do
73302: LD_ADDR_VAR 0 3
73306: PUSH
73307: DOUBLE
73308: LD_VAR 0 1
73312: INC
73313: ST_TO_ADDR
73314: LD_INT 1
73316: PUSH
73317: FOR_DOWNTO
73318: IFFALSE 73395
// begin index := rand ( 1 , array ) ;
73320: LD_ADDR_VAR 0 4
73324: PUSH
73325: LD_INT 1
73327: PPUSH
73328: LD_VAR 0 1
73332: PPUSH
73333: CALL_OW 12
73337: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
73338: LD_ADDR_VAR 0 2
73342: PUSH
73343: LD_VAR 0 2
73347: PPUSH
73348: LD_VAR 0 2
73352: PUSH
73353: LD_INT 1
73355: PLUS
73356: PPUSH
73357: LD_VAR 0 1
73361: PUSH
73362: LD_VAR 0 4
73366: ARRAY
73367: PPUSH
73368: CALL_OW 2
73372: ST_TO_ADDR
// array := Delete ( array , index ) ;
73373: LD_ADDR_VAR 0 1
73377: PUSH
73378: LD_VAR 0 1
73382: PPUSH
73383: LD_VAR 0 4
73387: PPUSH
73388: CALL_OW 3
73392: ST_TO_ADDR
// end ;
73393: GO 73317
73395: POP
73396: POP
// end ;
73397: LD_VAR 0 2
73401: RET
// export function GetBaseMaterials ( base ) ; begin
73402: LD_INT 0
73404: PPUSH
// result := [ 0 , 0 , 0 ] ;
73405: LD_ADDR_VAR 0 2
73409: PUSH
73410: LD_INT 0
73412: PUSH
73413: LD_INT 0
73415: PUSH
73416: LD_INT 0
73418: PUSH
73419: EMPTY
73420: LIST
73421: LIST
73422: LIST
73423: ST_TO_ADDR
// if not base then
73424: LD_VAR 0 1
73428: NOT
73429: IFFALSE 73433
// exit ;
73431: GO 73482
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
73433: LD_ADDR_VAR 0 2
73437: PUSH
73438: LD_VAR 0 1
73442: PPUSH
73443: LD_INT 1
73445: PPUSH
73446: CALL_OW 275
73450: PUSH
73451: LD_VAR 0 1
73455: PPUSH
73456: LD_INT 2
73458: PPUSH
73459: CALL_OW 275
73463: PUSH
73464: LD_VAR 0 1
73468: PPUSH
73469: LD_INT 3
73471: PPUSH
73472: CALL_OW 275
73476: PUSH
73477: EMPTY
73478: LIST
73479: LIST
73480: LIST
73481: ST_TO_ADDR
// end ;
73482: LD_VAR 0 2
73486: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
73487: LD_INT 0
73489: PPUSH
73490: PPUSH
// result := array ;
73491: LD_ADDR_VAR 0 3
73495: PUSH
73496: LD_VAR 0 1
73500: ST_TO_ADDR
// if size >= result then
73501: LD_VAR 0 2
73505: PUSH
73506: LD_VAR 0 3
73510: GREATEREQUAL
73511: IFFALSE 73515
// exit ;
73513: GO 73565
// if size then
73515: LD_VAR 0 2
73519: IFFALSE 73565
// for i := array downto size do
73521: LD_ADDR_VAR 0 4
73525: PUSH
73526: DOUBLE
73527: LD_VAR 0 1
73531: INC
73532: ST_TO_ADDR
73533: LD_VAR 0 2
73537: PUSH
73538: FOR_DOWNTO
73539: IFFALSE 73563
// result := Delete ( result , result ) ;
73541: LD_ADDR_VAR 0 3
73545: PUSH
73546: LD_VAR 0 3
73550: PPUSH
73551: LD_VAR 0 3
73555: PPUSH
73556: CALL_OW 3
73560: ST_TO_ADDR
73561: GO 73538
73563: POP
73564: POP
// end ;
73565: LD_VAR 0 3
73569: RET
// export function ComExit ( unit ) ; var tmp ; begin
73570: LD_INT 0
73572: PPUSH
73573: PPUSH
// if not IsInUnit ( unit ) then
73574: LD_VAR 0 1
73578: PPUSH
73579: CALL_OW 310
73583: NOT
73584: IFFALSE 73588
// exit ;
73586: GO 73648
// tmp := IsInUnit ( unit ) ;
73588: LD_ADDR_VAR 0 3
73592: PUSH
73593: LD_VAR 0 1
73597: PPUSH
73598: CALL_OW 310
73602: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
73603: LD_VAR 0 3
73607: PPUSH
73608: CALL_OW 247
73612: PUSH
73613: LD_INT 2
73615: EQUAL
73616: IFFALSE 73629
// ComExitVehicle ( unit ) else
73618: LD_VAR 0 1
73622: PPUSH
73623: CALL_OW 121
73627: GO 73638
// ComExitBuilding ( unit ) ;
73629: LD_VAR 0 1
73633: PPUSH
73634: CALL_OW 122
// result := tmp ;
73638: LD_ADDR_VAR 0 2
73642: PUSH
73643: LD_VAR 0 3
73647: ST_TO_ADDR
// end ;
73648: LD_VAR 0 2
73652: RET
// export function ComExitAll ( units ) ; var i ; begin
73653: LD_INT 0
73655: PPUSH
73656: PPUSH
// if not units then
73657: LD_VAR 0 1
73661: NOT
73662: IFFALSE 73666
// exit ;
73664: GO 73692
// for i in units do
73666: LD_ADDR_VAR 0 3
73670: PUSH
73671: LD_VAR 0 1
73675: PUSH
73676: FOR_IN
73677: IFFALSE 73690
// ComExit ( i ) ;
73679: LD_VAR 0 3
73683: PPUSH
73684: CALL 73570 0 1
73688: GO 73676
73690: POP
73691: POP
// end ;
73692: LD_VAR 0 2
73696: RET
// export function ResetHc ; begin
73697: LD_INT 0
73699: PPUSH
// InitHc ;
73700: CALL_OW 19
// hc_importance := 0 ;
73704: LD_ADDR_OWVAR 32
73708: PUSH
73709: LD_INT 0
73711: ST_TO_ADDR
// end ;
73712: LD_VAR 0 1
73716: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
73717: LD_INT 0
73719: PPUSH
73720: PPUSH
73721: PPUSH
// _x := ( x1 + x2 ) div 2 ;
73722: LD_ADDR_VAR 0 6
73726: PUSH
73727: LD_VAR 0 1
73731: PUSH
73732: LD_VAR 0 3
73736: PLUS
73737: PUSH
73738: LD_INT 2
73740: DIV
73741: ST_TO_ADDR
// if _x < 0 then
73742: LD_VAR 0 6
73746: PUSH
73747: LD_INT 0
73749: LESS
73750: IFFALSE 73767
// _x := _x * - 1 ;
73752: LD_ADDR_VAR 0 6
73756: PUSH
73757: LD_VAR 0 6
73761: PUSH
73762: LD_INT 1
73764: NEG
73765: MUL
73766: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
73767: LD_ADDR_VAR 0 7
73771: PUSH
73772: LD_VAR 0 2
73776: PUSH
73777: LD_VAR 0 4
73781: PLUS
73782: PUSH
73783: LD_INT 2
73785: DIV
73786: ST_TO_ADDR
// if _y < 0 then
73787: LD_VAR 0 7
73791: PUSH
73792: LD_INT 0
73794: LESS
73795: IFFALSE 73812
// _y := _y * - 1 ;
73797: LD_ADDR_VAR 0 7
73801: PUSH
73802: LD_VAR 0 7
73806: PUSH
73807: LD_INT 1
73809: NEG
73810: MUL
73811: ST_TO_ADDR
// result := [ _x , _y ] ;
73812: LD_ADDR_VAR 0 5
73816: PUSH
73817: LD_VAR 0 6
73821: PUSH
73822: LD_VAR 0 7
73826: PUSH
73827: EMPTY
73828: LIST
73829: LIST
73830: ST_TO_ADDR
// end ;
73831: LD_VAR 0 5
73835: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
73836: LD_INT 0
73838: PPUSH
73839: PPUSH
73840: PPUSH
73841: PPUSH
// task := GetTaskList ( unit ) ;
73842: LD_ADDR_VAR 0 7
73846: PUSH
73847: LD_VAR 0 1
73851: PPUSH
73852: CALL_OW 437
73856: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
73857: LD_VAR 0 7
73861: NOT
73862: IFFALSE 73881
73864: PUSH
73865: LD_VAR 0 1
73869: PPUSH
73870: LD_VAR 0 2
73874: PPUSH
73875: CALL_OW 308
73879: NOT
73880: AND
73881: IFFALSE 73885
// exit ;
73883: GO 74003
// if IsInArea ( unit , area ) then
73885: LD_VAR 0 1
73889: PPUSH
73890: LD_VAR 0 2
73894: PPUSH
73895: CALL_OW 308
73899: IFFALSE 73917
// begin ComMoveToArea ( unit , goAway ) ;
73901: LD_VAR 0 1
73905: PPUSH
73906: LD_VAR 0 3
73910: PPUSH
73911: CALL_OW 113
// exit ;
73915: GO 74003
// end ; if task [ 1 ] [ 1 ] <> M then
73917: LD_VAR 0 7
73921: PUSH
73922: LD_INT 1
73924: ARRAY
73925: PUSH
73926: LD_INT 1
73928: ARRAY
73929: PUSH
73930: LD_STRING M
73932: NONEQUAL
73933: IFFALSE 73937
// exit ;
73935: GO 74003
// x := task [ 1 ] [ 2 ] ;
73937: LD_ADDR_VAR 0 5
73941: PUSH
73942: LD_VAR 0 7
73946: PUSH
73947: LD_INT 1
73949: ARRAY
73950: PUSH
73951: LD_INT 2
73953: ARRAY
73954: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
73955: LD_ADDR_VAR 0 6
73959: PUSH
73960: LD_VAR 0 7
73964: PUSH
73965: LD_INT 1
73967: ARRAY
73968: PUSH
73969: LD_INT 3
73971: ARRAY
73972: ST_TO_ADDR
// if InArea ( x , y , area ) then
73973: LD_VAR 0 5
73977: PPUSH
73978: LD_VAR 0 6
73982: PPUSH
73983: LD_VAR 0 2
73987: PPUSH
73988: CALL_OW 309
73992: IFFALSE 74003
// ComStop ( unit ) ;
73994: LD_VAR 0 1
73998: PPUSH
73999: CALL_OW 141
// end ;
74003: LD_VAR 0 4
74007: RET
// export function Abs ( value ) ; begin
74008: LD_INT 0
74010: PPUSH
// result := value ;
74011: LD_ADDR_VAR 0 2
74015: PUSH
74016: LD_VAR 0 1
74020: ST_TO_ADDR
// if value < 0 then
74021: LD_VAR 0 1
74025: PUSH
74026: LD_INT 0
74028: LESS
74029: IFFALSE 74046
// result := value * - 1 ;
74031: LD_ADDR_VAR 0 2
74035: PUSH
74036: LD_VAR 0 1
74040: PUSH
74041: LD_INT 1
74043: NEG
74044: MUL
74045: ST_TO_ADDR
// end ;
74046: LD_VAR 0 2
74050: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
74051: LD_INT 0
74053: PPUSH
74054: PPUSH
74055: PPUSH
74056: PPUSH
74057: PPUSH
74058: PPUSH
74059: PPUSH
74060: PPUSH
// if not unit or not building then
74061: LD_VAR 0 1
74065: NOT
74066: IFTRUE 74075
74068: PUSH
74069: LD_VAR 0 2
74073: NOT
74074: OR
74075: IFFALSE 74079
// exit ;
74077: GO 74307
// x := GetX ( building ) ;
74079: LD_ADDR_VAR 0 4
74083: PUSH
74084: LD_VAR 0 2
74088: PPUSH
74089: CALL_OW 250
74093: ST_TO_ADDR
// y := GetY ( building ) ;
74094: LD_ADDR_VAR 0 6
74098: PUSH
74099: LD_VAR 0 2
74103: PPUSH
74104: CALL_OW 251
74108: ST_TO_ADDR
// d := GetDir ( building ) ;
74109: LD_ADDR_VAR 0 8
74113: PUSH
74114: LD_VAR 0 2
74118: PPUSH
74119: CALL_OW 254
74123: ST_TO_ADDR
// r := 4 ;
74124: LD_ADDR_VAR 0 9
74128: PUSH
74129: LD_INT 4
74131: ST_TO_ADDR
// for i := 1 to 5 do
74132: LD_ADDR_VAR 0 10
74136: PUSH
74137: DOUBLE
74138: LD_INT 1
74140: DEC
74141: ST_TO_ADDR
74142: LD_INT 5
74144: PUSH
74145: FOR_TO
74146: IFFALSE 74305
// begin _x := ShiftX ( x , d , r + i ) ;
74148: LD_ADDR_VAR 0 5
74152: PUSH
74153: LD_VAR 0 4
74157: PPUSH
74158: LD_VAR 0 8
74162: PPUSH
74163: LD_VAR 0 9
74167: PUSH
74168: LD_VAR 0 10
74172: PLUS
74173: PPUSH
74174: CALL_OW 272
74178: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
74179: LD_ADDR_VAR 0 7
74183: PUSH
74184: LD_VAR 0 6
74188: PPUSH
74189: LD_VAR 0 8
74193: PPUSH
74194: LD_VAR 0 9
74198: PUSH
74199: LD_VAR 0 10
74203: PLUS
74204: PPUSH
74205: CALL_OW 273
74209: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
74210: LD_VAR 0 5
74214: PPUSH
74215: LD_VAR 0 7
74219: PPUSH
74220: CALL_OW 488
74224: IFFALSE 74259
74226: PUSH
74227: LD_VAR 0 5
74231: PPUSH
74232: LD_VAR 0 7
74236: PPUSH
74237: CALL_OW 428
74241: PPUSH
74242: CALL_OW 247
74246: PUSH
74247: LD_INT 3
74249: PUSH
74250: LD_INT 2
74252: PUSH
74253: EMPTY
74254: LIST
74255: LIST
74256: IN
74257: NOT
74258: AND
74259: IFFALSE 74303
// begin ComMoveXY ( unit , _x , _y ) ;
74261: LD_VAR 0 1
74265: PPUSH
74266: LD_VAR 0 5
74270: PPUSH
74271: LD_VAR 0 7
74275: PPUSH
74276: CALL_OW 111
// result := [ _x , _y ] ;
74280: LD_ADDR_VAR 0 3
74284: PUSH
74285: LD_VAR 0 5
74289: PUSH
74290: LD_VAR 0 7
74294: PUSH
74295: EMPTY
74296: LIST
74297: LIST
74298: ST_TO_ADDR
// exit ;
74299: POP
74300: POP
74301: GO 74307
// end ; end ;
74303: GO 74145
74305: POP
74306: POP
// end ;
74307: LD_VAR 0 3
74311: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
74312: LD_INT 0
74314: PPUSH
74315: PPUSH
74316: PPUSH
// result := 0 ;
74317: LD_ADDR_VAR 0 3
74321: PUSH
74322: LD_INT 0
74324: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
74325: LD_VAR 0 1
74329: PUSH
74330: LD_INT 0
74332: LESS
74333: IFTRUE 74345
74335: PUSH
74336: LD_VAR 0 1
74340: PUSH
74341: LD_INT 8
74343: GREATER
74344: OR
74345: IFTRUE 74357
74347: PUSH
74348: LD_VAR 0 2
74352: PUSH
74353: LD_INT 0
74355: LESS
74356: OR
74357: IFTRUE 74369
74359: PUSH
74360: LD_VAR 0 2
74364: PUSH
74365: LD_INT 8
74367: GREATER
74368: OR
74369: IFFALSE 74373
// exit ;
74371: GO 74448
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
74373: LD_ADDR_VAR 0 4
74377: PUSH
74378: LD_INT 22
74380: PUSH
74381: LD_VAR 0 2
74385: PUSH
74386: EMPTY
74387: LIST
74388: LIST
74389: PPUSH
74390: CALL_OW 69
74394: PUSH
74395: FOR_IN
74396: IFFALSE 74446
// begin un := UnitShoot ( i ) ;
74398: LD_ADDR_VAR 0 5
74402: PUSH
74403: LD_VAR 0 4
74407: PPUSH
74408: CALL_OW 504
74412: ST_TO_ADDR
// if GetSide ( un ) = side1 then
74413: LD_VAR 0 5
74417: PPUSH
74418: CALL_OW 255
74422: PUSH
74423: LD_VAR 0 1
74427: EQUAL
74428: IFFALSE 74444
// begin result := un ;
74430: LD_ADDR_VAR 0 3
74434: PUSH
74435: LD_VAR 0 5
74439: ST_TO_ADDR
// exit ;
74440: POP
74441: POP
74442: GO 74448
// end ; end ;
74444: GO 74395
74446: POP
74447: POP
// end ;
74448: LD_VAR 0 3
74452: RET
// export function GetCargoBay ( units ) ; begin
74453: LD_INT 0
74455: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
74456: LD_ADDR_VAR 0 2
74460: PUSH
74461: LD_VAR 0 1
74465: PPUSH
74466: LD_INT 2
74468: PUSH
74469: LD_INT 34
74471: PUSH
74472: LD_INT 12
74474: PUSH
74475: EMPTY
74476: LIST
74477: LIST
74478: PUSH
74479: LD_INT 34
74481: PUSH
74482: LD_INT 51
74484: PUSH
74485: EMPTY
74486: LIST
74487: LIST
74488: PUSH
74489: LD_INT 34
74491: PUSH
74492: LD_INT 32
74494: PUSH
74495: EMPTY
74496: LIST
74497: LIST
74498: PUSH
74499: LD_INT 34
74501: PUSH
74502: LD_INT 89
74504: PUSH
74505: EMPTY
74506: LIST
74507: LIST
74508: PUSH
74509: EMPTY
74510: LIST
74511: LIST
74512: LIST
74513: LIST
74514: LIST
74515: PPUSH
74516: CALL_OW 72
74520: ST_TO_ADDR
// end ;
74521: LD_VAR 0 2
74525: RET
// export function Negate ( value ) ; begin
74526: LD_INT 0
74528: PPUSH
// result := not value ;
74529: LD_ADDR_VAR 0 2
74533: PUSH
74534: LD_VAR 0 1
74538: NOT
74539: ST_TO_ADDR
// end ;
74540: LD_VAR 0 2
74544: RET
// export function Inc ( value ) ; begin
74545: LD_INT 0
74547: PPUSH
// result := value + 1 ;
74548: LD_ADDR_VAR 0 2
74552: PUSH
74553: LD_VAR 0 1
74557: PUSH
74558: LD_INT 1
74560: PLUS
74561: ST_TO_ADDR
// end ;
74562: LD_VAR 0 2
74566: RET
// export function Dec ( value ) ; begin
74567: LD_INT 0
74569: PPUSH
// result := value - 1 ;
74570: LD_ADDR_VAR 0 2
74574: PUSH
74575: LD_VAR 0 1
74579: PUSH
74580: LD_INT 1
74582: MINUS
74583: ST_TO_ADDR
// end ;
74584: LD_VAR 0 2
74588: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
74589: LD_INT 0
74591: PPUSH
74592: PPUSH
74593: PPUSH
74594: PPUSH
74595: PPUSH
74596: PPUSH
74597: PPUSH
74598: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
74599: LD_VAR 0 1
74603: PPUSH
74604: LD_VAR 0 2
74608: PPUSH
74609: CALL_OW 488
74613: NOT
74614: IFTRUE 74633
74616: PUSH
74617: LD_VAR 0 3
74621: PPUSH
74622: LD_VAR 0 4
74626: PPUSH
74627: CALL_OW 488
74631: NOT
74632: OR
74633: IFFALSE 74646
// begin result := - 1 ;
74635: LD_ADDR_VAR 0 5
74639: PUSH
74640: LD_INT 1
74642: NEG
74643: ST_TO_ADDR
// exit ;
74644: GO 74881
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
74646: LD_ADDR_VAR 0 12
74650: PUSH
74651: LD_VAR 0 1
74655: PPUSH
74656: LD_VAR 0 2
74660: PPUSH
74661: LD_VAR 0 3
74665: PPUSH
74666: LD_VAR 0 4
74670: PPUSH
74671: CALL 73717 0 4
74675: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
74676: LD_ADDR_VAR 0 11
74680: PUSH
74681: LD_VAR 0 1
74685: PPUSH
74686: LD_VAR 0 2
74690: PPUSH
74691: LD_VAR 0 12
74695: PUSH
74696: LD_INT 1
74698: ARRAY
74699: PPUSH
74700: LD_VAR 0 12
74704: PUSH
74705: LD_INT 2
74707: ARRAY
74708: PPUSH
74709: CALL_OW 298
74713: ST_TO_ADDR
// distance := 9999 ;
74714: LD_ADDR_VAR 0 10
74718: PUSH
74719: LD_INT 9999
74721: ST_TO_ADDR
// for i := 0 to 5 do
74722: LD_ADDR_VAR 0 6
74726: PUSH
74727: DOUBLE
74728: LD_INT 0
74730: DEC
74731: ST_TO_ADDR
74732: LD_INT 5
74734: PUSH
74735: FOR_TO
74736: IFFALSE 74879
// begin _x := ShiftX ( x1 , i , centerDist ) ;
74738: LD_ADDR_VAR 0 7
74742: PUSH
74743: LD_VAR 0 1
74747: PPUSH
74748: LD_VAR 0 6
74752: PPUSH
74753: LD_VAR 0 11
74757: PPUSH
74758: CALL_OW 272
74762: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
74763: LD_ADDR_VAR 0 8
74767: PUSH
74768: LD_VAR 0 2
74772: PPUSH
74773: LD_VAR 0 6
74777: PPUSH
74778: LD_VAR 0 11
74782: PPUSH
74783: CALL_OW 273
74787: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
74788: LD_VAR 0 7
74792: PPUSH
74793: LD_VAR 0 8
74797: PPUSH
74798: CALL_OW 488
74802: NOT
74803: IFFALSE 74807
// continue ;
74805: GO 74735
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
74807: LD_ADDR_VAR 0 9
74811: PUSH
74812: LD_VAR 0 12
74816: PUSH
74817: LD_INT 1
74819: ARRAY
74820: PPUSH
74821: LD_VAR 0 12
74825: PUSH
74826: LD_INT 2
74828: ARRAY
74829: PPUSH
74830: LD_VAR 0 7
74834: PPUSH
74835: LD_VAR 0 8
74839: PPUSH
74840: CALL_OW 298
74844: ST_TO_ADDR
// if tmp < distance then
74845: LD_VAR 0 9
74849: PUSH
74850: LD_VAR 0 10
74854: LESS
74855: IFFALSE 74877
// begin result := i ;
74857: LD_ADDR_VAR 0 5
74861: PUSH
74862: LD_VAR 0 6
74866: ST_TO_ADDR
// distance := tmp ;
74867: LD_ADDR_VAR 0 10
74871: PUSH
74872: LD_VAR 0 9
74876: ST_TO_ADDR
// end ; end ;
74877: GO 74735
74879: POP
74880: POP
// end ;
74881: LD_VAR 0 5
74885: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
74886: LD_INT 0
74888: PPUSH
74889: PPUSH
// if not driver or not IsInUnit ( driver ) then
74890: LD_VAR 0 1
74894: NOT
74895: IFTRUE 74909
74897: PUSH
74898: LD_VAR 0 1
74902: PPUSH
74903: CALL_OW 310
74907: NOT
74908: OR
74909: IFFALSE 74913
// exit ;
74911: GO 75003
// vehicle := IsInUnit ( driver ) ;
74913: LD_ADDR_VAR 0 3
74917: PUSH
74918: LD_VAR 0 1
74922: PPUSH
74923: CALL_OW 310
74927: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
74928: LD_VAR 0 1
74932: PPUSH
74933: LD_STRING \
74935: PUSH
74936: LD_INT 0
74938: PUSH
74939: LD_INT 0
74941: PUSH
74942: LD_INT 0
74944: PUSH
74945: LD_INT 0
74947: PUSH
74948: LD_INT 0
74950: PUSH
74951: LD_INT 0
74953: PUSH
74954: EMPTY
74955: LIST
74956: LIST
74957: LIST
74958: LIST
74959: LIST
74960: LIST
74961: LIST
74962: PUSH
74963: LD_STRING E
74965: PUSH
74966: LD_INT 0
74968: PUSH
74969: LD_INT 0
74971: PUSH
74972: LD_VAR 0 3
74976: PUSH
74977: LD_INT 0
74979: PUSH
74980: LD_INT 0
74982: PUSH
74983: LD_INT 0
74985: PUSH
74986: EMPTY
74987: LIST
74988: LIST
74989: LIST
74990: LIST
74991: LIST
74992: LIST
74993: LIST
74994: PUSH
74995: EMPTY
74996: LIST
74997: LIST
74998: PPUSH
74999: CALL_OW 446
// end ;
75003: LD_VAR 0 2
75007: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
75008: LD_INT 0
75010: PPUSH
75011: PPUSH
// if not driver or not IsInUnit ( driver ) then
75012: LD_VAR 0 1
75016: NOT
75017: IFTRUE 75031
75019: PUSH
75020: LD_VAR 0 1
75024: PPUSH
75025: CALL_OW 310
75029: NOT
75030: OR
75031: IFFALSE 75035
// exit ;
75033: GO 75125
// vehicle := IsInUnit ( driver ) ;
75035: LD_ADDR_VAR 0 3
75039: PUSH
75040: LD_VAR 0 1
75044: PPUSH
75045: CALL_OW 310
75049: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
75050: LD_VAR 0 1
75054: PPUSH
75055: LD_STRING \
75057: PUSH
75058: LD_INT 0
75060: PUSH
75061: LD_INT 0
75063: PUSH
75064: LD_INT 0
75066: PUSH
75067: LD_INT 0
75069: PUSH
75070: LD_INT 0
75072: PUSH
75073: LD_INT 0
75075: PUSH
75076: EMPTY
75077: LIST
75078: LIST
75079: LIST
75080: LIST
75081: LIST
75082: LIST
75083: LIST
75084: PUSH
75085: LD_STRING E
75087: PUSH
75088: LD_INT 0
75090: PUSH
75091: LD_INT 0
75093: PUSH
75094: LD_VAR 0 3
75098: PUSH
75099: LD_INT 0
75101: PUSH
75102: LD_INT 0
75104: PUSH
75105: LD_INT 0
75107: PUSH
75108: EMPTY
75109: LIST
75110: LIST
75111: LIST
75112: LIST
75113: LIST
75114: LIST
75115: LIST
75116: PUSH
75117: EMPTY
75118: LIST
75119: LIST
75120: PPUSH
75121: CALL_OW 447
// end ;
75125: LD_VAR 0 2
75129: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
75130: LD_INT 0
75132: PPUSH
75133: PPUSH
75134: PPUSH
// tmp := [ ] ;
75135: LD_ADDR_VAR 0 5
75139: PUSH
75140: EMPTY
75141: ST_TO_ADDR
// for i in units do
75142: LD_ADDR_VAR 0 4
75146: PUSH
75147: LD_VAR 0 1
75151: PUSH
75152: FOR_IN
75153: IFFALSE 75191
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
75155: LD_ADDR_VAR 0 5
75159: PUSH
75160: LD_VAR 0 5
75164: PPUSH
75165: LD_VAR 0 5
75169: PUSH
75170: LD_INT 1
75172: PLUS
75173: PPUSH
75174: LD_VAR 0 4
75178: PPUSH
75179: CALL_OW 256
75183: PPUSH
75184: CALL_OW 2
75188: ST_TO_ADDR
75189: GO 75152
75191: POP
75192: POP
// if not tmp then
75193: LD_VAR 0 5
75197: NOT
75198: IFFALSE 75202
// exit ;
75200: GO 75250
// if asc then
75202: LD_VAR 0 2
75206: IFFALSE 75230
// result := SortListByListAsc ( units , tmp ) else
75208: LD_ADDR_VAR 0 3
75212: PUSH
75213: LD_VAR 0 1
75217: PPUSH
75218: LD_VAR 0 5
75222: PPUSH
75223: CALL_OW 76
75227: ST_TO_ADDR
75228: GO 75250
// result := SortListByListDesc ( units , tmp ) ;
75230: LD_ADDR_VAR 0 3
75234: PUSH
75235: LD_VAR 0 1
75239: PPUSH
75240: LD_VAR 0 5
75244: PPUSH
75245: CALL_OW 77
75249: ST_TO_ADDR
// end ;
75250: LD_VAR 0 3
75254: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
75255: LD_INT 0
75257: PPUSH
75258: PPUSH
// task := GetTaskList ( mech ) ;
75259: LD_ADDR_VAR 0 4
75263: PUSH
75264: LD_VAR 0 1
75268: PPUSH
75269: CALL_OW 437
75273: ST_TO_ADDR
// if not task then
75274: LD_VAR 0 4
75278: NOT
75279: IFFALSE 75283
// exit ;
75281: GO 75327
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
75283: LD_ADDR_VAR 0 3
75287: PUSH
75288: LD_VAR 0 4
75292: PUSH
75293: LD_INT 1
75295: ARRAY
75296: PUSH
75297: LD_INT 1
75299: ARRAY
75300: PUSH
75301: LD_STRING r
75303: EQUAL
75304: IFFALSE 75326
75306: PUSH
75307: LD_VAR 0 4
75311: PUSH
75312: LD_INT 1
75314: ARRAY
75315: PUSH
75316: LD_INT 4
75318: ARRAY
75319: PUSH
75320: LD_VAR 0 2
75324: EQUAL
75325: AND
75326: ST_TO_ADDR
// end ;
75327: LD_VAR 0 3
75331: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
75332: LD_INT 0
75334: PPUSH
// SetDir ( unit , d ) ;
75335: LD_VAR 0 1
75339: PPUSH
75340: LD_VAR 0 4
75344: PPUSH
75345: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
75349: LD_ADDR_VAR 0 6
75353: PUSH
75354: LD_VAR 0 1
75358: PPUSH
75359: LD_VAR 0 2
75363: PPUSH
75364: LD_VAR 0 3
75368: PPUSH
75369: LD_VAR 0 5
75373: PPUSH
75374: CALL_OW 48
75378: ST_TO_ADDR
// end ;
75379: LD_VAR 0 6
75383: RET
// export function ToNaturalNumber ( number ) ; begin
75384: LD_INT 0
75386: PPUSH
// result := number div 1 ;
75387: LD_ADDR_VAR 0 2
75391: PUSH
75392: LD_VAR 0 1
75396: PUSH
75397: LD_INT 1
75399: DIV
75400: ST_TO_ADDR
// if number < 0 then
75401: LD_VAR 0 1
75405: PUSH
75406: LD_INT 0
75408: LESS
75409: IFFALSE 75419
// result := 0 ;
75411: LD_ADDR_VAR 0 2
75415: PUSH
75416: LD_INT 0
75418: ST_TO_ADDR
// end ;
75419: LD_VAR 0 2
75423: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
75424: LD_INT 0
75426: PPUSH
75427: PPUSH
75428: PPUSH
// if not buildings then
75429: LD_VAR 0 1
75433: NOT
75434: IFFALSE 75438
// exit ;
75436: GO 75553
// tmp := [ ] ;
75438: LD_ADDR_VAR 0 5
75442: PUSH
75443: EMPTY
75444: ST_TO_ADDR
// for b in buildings do
75445: LD_ADDR_VAR 0 4
75449: PUSH
75450: LD_VAR 0 1
75454: PUSH
75455: FOR_IN
75456: IFFALSE 75494
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
75458: LD_ADDR_VAR 0 5
75462: PUSH
75463: LD_VAR 0 5
75467: PPUSH
75468: LD_VAR 0 5
75472: PUSH
75473: LD_INT 1
75475: PLUS
75476: PPUSH
75477: LD_VAR 0 4
75481: PPUSH
75482: CALL_OW 266
75486: PPUSH
75487: CALL_OW 1
75491: ST_TO_ADDR
75492: GO 75455
75494: POP
75495: POP
// if not tmp then
75496: LD_VAR 0 5
75500: NOT
75501: IFFALSE 75505
// exit ;
75503: GO 75553
// if asc then
75505: LD_VAR 0 2
75509: IFFALSE 75533
// result := SortListByListAsc ( buildings , tmp ) else
75511: LD_ADDR_VAR 0 3
75515: PUSH
75516: LD_VAR 0 1
75520: PPUSH
75521: LD_VAR 0 5
75525: PPUSH
75526: CALL_OW 76
75530: ST_TO_ADDR
75531: GO 75553
// result := SortListByListDesc ( buildings , tmp ) ;
75533: LD_ADDR_VAR 0 3
75537: PUSH
75538: LD_VAR 0 1
75542: PPUSH
75543: LD_VAR 0 5
75547: PPUSH
75548: CALL_OW 77
75552: ST_TO_ADDR
// end ;
75553: LD_VAR 0 3
75557: RET
// export function SortByClass ( units , class ) ; var un ; begin
75558: LD_INT 0
75560: PPUSH
75561: PPUSH
// if not units or not class then
75562: LD_VAR 0 1
75566: NOT
75567: IFTRUE 75576
75569: PUSH
75570: LD_VAR 0 2
75574: NOT
75575: OR
75576: IFFALSE 75580
// exit ;
75578: GO 75675
// result := [ ] ;
75580: LD_ADDR_VAR 0 3
75584: PUSH
75585: EMPTY
75586: ST_TO_ADDR
// for un in units do
75587: LD_ADDR_VAR 0 4
75591: PUSH
75592: LD_VAR 0 1
75596: PUSH
75597: FOR_IN
75598: IFFALSE 75673
// if GetClass ( un ) = class then
75600: LD_VAR 0 4
75604: PPUSH
75605: CALL_OW 257
75609: PUSH
75610: LD_VAR 0 2
75614: EQUAL
75615: IFFALSE 75642
// result := Insert ( result , 1 , un ) else
75617: LD_ADDR_VAR 0 3
75621: PUSH
75622: LD_VAR 0 3
75626: PPUSH
75627: LD_INT 1
75629: PPUSH
75630: LD_VAR 0 4
75634: PPUSH
75635: CALL_OW 2
75639: ST_TO_ADDR
75640: GO 75671
// result := Replace ( result , result + 1 , un ) ;
75642: LD_ADDR_VAR 0 3
75646: PUSH
75647: LD_VAR 0 3
75651: PPUSH
75652: LD_VAR 0 3
75656: PUSH
75657: LD_INT 1
75659: PLUS
75660: PPUSH
75661: LD_VAR 0 4
75665: PPUSH
75666: CALL_OW 1
75670: ST_TO_ADDR
75671: GO 75597
75673: POP
75674: POP
// end ;
75675: LD_VAR 0 3
75679: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
75680: LD_INT 0
75682: PPUSH
75683: PPUSH
75684: PPUSH
75685: PPUSH
75686: PPUSH
75687: PPUSH
75688: PPUSH
// result := [ ] ;
75689: LD_ADDR_VAR 0 4
75693: PUSH
75694: EMPTY
75695: ST_TO_ADDR
// if x - r < 0 then
75696: LD_VAR 0 1
75700: PUSH
75701: LD_VAR 0 3
75705: MINUS
75706: PUSH
75707: LD_INT 0
75709: LESS
75710: IFFALSE 75722
// min_x := 0 else
75712: LD_ADDR_VAR 0 8
75716: PUSH
75717: LD_INT 0
75719: ST_TO_ADDR
75720: GO 75738
// min_x := x - r ;
75722: LD_ADDR_VAR 0 8
75726: PUSH
75727: LD_VAR 0 1
75731: PUSH
75732: LD_VAR 0 3
75736: MINUS
75737: ST_TO_ADDR
// if y - r < 0 then
75738: LD_VAR 0 2
75742: PUSH
75743: LD_VAR 0 3
75747: MINUS
75748: PUSH
75749: LD_INT 0
75751: LESS
75752: IFFALSE 75764
// min_y := 0 else
75754: LD_ADDR_VAR 0 7
75758: PUSH
75759: LD_INT 0
75761: ST_TO_ADDR
75762: GO 75780
// min_y := y - r ;
75764: LD_ADDR_VAR 0 7
75768: PUSH
75769: LD_VAR 0 2
75773: PUSH
75774: LD_VAR 0 3
75778: MINUS
75779: ST_TO_ADDR
// max_x := x + r ;
75780: LD_ADDR_VAR 0 9
75784: PUSH
75785: LD_VAR 0 1
75789: PUSH
75790: LD_VAR 0 3
75794: PLUS
75795: ST_TO_ADDR
// max_y := y + r ;
75796: LD_ADDR_VAR 0 10
75800: PUSH
75801: LD_VAR 0 2
75805: PUSH
75806: LD_VAR 0 3
75810: PLUS
75811: ST_TO_ADDR
// for _x = min_x to max_x do
75812: LD_ADDR_VAR 0 5
75816: PUSH
75817: DOUBLE
75818: LD_VAR 0 8
75822: DEC
75823: ST_TO_ADDR
75824: LD_VAR 0 9
75828: PUSH
75829: FOR_TO
75830: IFFALSE 75931
// for _y = min_y to max_y do
75832: LD_ADDR_VAR 0 6
75836: PUSH
75837: DOUBLE
75838: LD_VAR 0 7
75842: DEC
75843: ST_TO_ADDR
75844: LD_VAR 0 10
75848: PUSH
75849: FOR_TO
75850: IFFALSE 75927
// begin if not ValidHex ( _x , _y ) then
75852: LD_VAR 0 5
75856: PPUSH
75857: LD_VAR 0 6
75861: PPUSH
75862: CALL_OW 488
75866: NOT
75867: IFFALSE 75871
// continue ;
75869: GO 75849
// if GetResourceTypeXY ( _x , _y ) then
75871: LD_VAR 0 5
75875: PPUSH
75876: LD_VAR 0 6
75880: PPUSH
75881: CALL_OW 283
75885: IFFALSE 75925
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
75887: LD_ADDR_VAR 0 4
75891: PUSH
75892: LD_VAR 0 4
75896: PPUSH
75897: LD_VAR 0 4
75901: PUSH
75902: LD_INT 1
75904: PLUS
75905: PPUSH
75906: LD_VAR 0 5
75910: PUSH
75911: LD_VAR 0 6
75915: PUSH
75916: EMPTY
75917: LIST
75918: LIST
75919: PPUSH
75920: CALL_OW 1
75924: ST_TO_ADDR
// end ;
75925: GO 75849
75927: POP
75928: POP
75929: GO 75829
75931: POP
75932: POP
// end ;
75933: LD_VAR 0 4
75937: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
75938: LD_INT 0
75940: PPUSH
75941: PPUSH
75942: PPUSH
75943: PPUSH
75944: PPUSH
75945: PPUSH
75946: PPUSH
75947: PPUSH
// if not units then
75948: LD_VAR 0 1
75952: NOT
75953: IFFALSE 75957
// exit ;
75955: GO 76489
// result := UnitFilter ( units , [ f_ok ] ) ;
75957: LD_ADDR_VAR 0 3
75961: PUSH
75962: LD_VAR 0 1
75966: PPUSH
75967: LD_INT 50
75969: PUSH
75970: EMPTY
75971: LIST
75972: PPUSH
75973: CALL_OW 72
75977: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
75978: LD_ADDR_VAR 0 8
75982: PUSH
75983: LD_VAR 0 1
75987: PUSH
75988: LD_INT 1
75990: ARRAY
75991: PPUSH
75992: CALL_OW 255
75996: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
75997: LD_ADDR_VAR 0 10
76001: PUSH
76002: LD_INT 29
76004: PUSH
76005: LD_INT 91
76007: PUSH
76008: LD_INT 49
76010: PUSH
76011: EMPTY
76012: LIST
76013: LIST
76014: LIST
76015: ST_TO_ADDR
// if not result then
76016: LD_VAR 0 3
76020: NOT
76021: IFFALSE 76025
// exit ;
76023: GO 76489
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
76025: LD_ADDR_VAR 0 5
76029: PUSH
76030: LD_INT 81
76032: PUSH
76033: LD_VAR 0 8
76037: PUSH
76038: EMPTY
76039: LIST
76040: LIST
76041: PPUSH
76042: CALL_OW 69
76046: ST_TO_ADDR
// for i in result do
76047: LD_ADDR_VAR 0 4
76051: PUSH
76052: LD_VAR 0 3
76056: PUSH
76057: FOR_IN
76058: IFFALSE 76487
// begin tag := GetTag ( i ) + 1 ;
76060: LD_ADDR_VAR 0 9
76064: PUSH
76065: LD_VAR 0 4
76069: PPUSH
76070: CALL_OW 110
76074: PUSH
76075: LD_INT 1
76077: PLUS
76078: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
76079: LD_ADDR_VAR 0 7
76083: PUSH
76084: LD_VAR 0 4
76088: PPUSH
76089: CALL_OW 250
76093: PPUSH
76094: LD_VAR 0 4
76098: PPUSH
76099: CALL_OW 251
76103: PPUSH
76104: LD_INT 4
76106: PPUSH
76107: CALL 75680 0 3
76111: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
76112: LD_VAR 0 4
76116: PPUSH
76117: CALL_OW 247
76121: PUSH
76122: LD_INT 2
76124: EQUAL
76125: IFFALSE 76137
76127: PUSH
76128: LD_VAR 0 7
76132: PUSH
76133: LD_INT 2
76135: GREATER
76136: AND
76137: IFFALSE 76157
76139: PUSH
76140: LD_VAR 0 4
76144: PPUSH
76145: CALL_OW 264
76149: PUSH
76150: LD_VAR 0 10
76154: IN
76155: NOT
76156: AND
76157: IFFALSE 76196
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
76159: LD_VAR 0 4
76163: PPUSH
76164: LD_VAR 0 7
76168: PUSH
76169: LD_INT 1
76171: ARRAY
76172: PUSH
76173: LD_INT 1
76175: ARRAY
76176: PPUSH
76177: LD_VAR 0 7
76181: PUSH
76182: LD_INT 1
76184: ARRAY
76185: PUSH
76186: LD_INT 2
76188: ARRAY
76189: PPUSH
76190: CALL_OW 116
76194: GO 76485
// if path > tag then
76196: LD_VAR 0 2
76200: PUSH
76201: LD_VAR 0 9
76205: GREATER
76206: IFFALSE 76414
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
76208: LD_ADDR_VAR 0 6
76212: PUSH
76213: LD_VAR 0 5
76217: PPUSH
76218: LD_INT 91
76220: PUSH
76221: LD_VAR 0 4
76225: PUSH
76226: LD_INT 8
76228: PUSH
76229: EMPTY
76230: LIST
76231: LIST
76232: LIST
76233: PPUSH
76234: CALL_OW 72
76238: ST_TO_ADDR
// if nearEnemy then
76239: LD_VAR 0 6
76243: IFFALSE 76312
// begin if GetWeapon ( i ) = ru_time_lapser then
76245: LD_VAR 0 4
76249: PPUSH
76250: CALL_OW 264
76254: PUSH
76255: LD_INT 49
76257: EQUAL
76258: IFFALSE 76286
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
76260: LD_VAR 0 4
76264: PPUSH
76265: LD_VAR 0 6
76269: PPUSH
76270: LD_VAR 0 4
76274: PPUSH
76275: CALL_OW 74
76279: PPUSH
76280: CALL_OW 112
76284: GO 76310
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
76286: LD_VAR 0 4
76290: PPUSH
76291: LD_VAR 0 6
76295: PPUSH
76296: LD_VAR 0 4
76300: PPUSH
76301: CALL_OW 74
76305: PPUSH
76306: CALL 77570 0 2
// end else
76310: GO 76412
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
76312: LD_VAR 0 4
76316: PPUSH
76317: LD_VAR 0 2
76321: PUSH
76322: LD_VAR 0 9
76326: ARRAY
76327: PUSH
76328: LD_INT 1
76330: ARRAY
76331: PPUSH
76332: LD_VAR 0 2
76336: PUSH
76337: LD_VAR 0 9
76341: ARRAY
76342: PUSH
76343: LD_INT 2
76345: ARRAY
76346: PPUSH
76347: CALL_OW 297
76351: PUSH
76352: LD_INT 6
76354: GREATER
76355: IFFALSE 76398
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
76357: LD_VAR 0 4
76361: PPUSH
76362: LD_VAR 0 2
76366: PUSH
76367: LD_VAR 0 9
76371: ARRAY
76372: PUSH
76373: LD_INT 1
76375: ARRAY
76376: PPUSH
76377: LD_VAR 0 2
76381: PUSH
76382: LD_VAR 0 9
76386: ARRAY
76387: PUSH
76388: LD_INT 2
76390: ARRAY
76391: PPUSH
76392: CALL_OW 114
76396: GO 76412
// SetTag ( i , tag ) ;
76398: LD_VAR 0 4
76402: PPUSH
76403: LD_VAR 0 9
76407: PPUSH
76408: CALL_OW 109
// end else
76412: GO 76485
// if enemy then
76414: LD_VAR 0 5
76418: IFFALSE 76485
// begin if GetWeapon ( i ) = ru_time_lapser then
76420: LD_VAR 0 4
76424: PPUSH
76425: CALL_OW 264
76429: PUSH
76430: LD_INT 49
76432: EQUAL
76433: IFFALSE 76461
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
76435: LD_VAR 0 4
76439: PPUSH
76440: LD_VAR 0 5
76444: PPUSH
76445: LD_VAR 0 4
76449: PPUSH
76450: CALL_OW 74
76454: PPUSH
76455: CALL_OW 112
76459: GO 76485
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
76461: LD_VAR 0 4
76465: PPUSH
76466: LD_VAR 0 5
76470: PPUSH
76471: LD_VAR 0 4
76475: PPUSH
76476: CALL_OW 74
76480: PPUSH
76481: CALL 77570 0 2
// end ; end ;
76485: GO 76057
76487: POP
76488: POP
// end ;
76489: LD_VAR 0 3
76493: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
76494: LD_INT 0
76496: PPUSH
76497: PPUSH
76498: PPUSH
// if not unit or IsInUnit ( unit ) then
76499: LD_VAR 0 1
76503: NOT
76504: IFTRUE 76517
76506: PUSH
76507: LD_VAR 0 1
76511: PPUSH
76512: CALL_OW 310
76516: OR
76517: IFFALSE 76521
// exit ;
76519: GO 76612
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
76521: LD_ADDR_VAR 0 4
76525: PUSH
76526: LD_VAR 0 1
76530: PPUSH
76531: CALL_OW 250
76535: PPUSH
76536: LD_VAR 0 2
76540: PPUSH
76541: LD_INT 1
76543: PPUSH
76544: CALL_OW 272
76548: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
76549: LD_ADDR_VAR 0 5
76553: PUSH
76554: LD_VAR 0 1
76558: PPUSH
76559: CALL_OW 251
76563: PPUSH
76564: LD_VAR 0 2
76568: PPUSH
76569: LD_INT 1
76571: PPUSH
76572: CALL_OW 273
76576: ST_TO_ADDR
// if ValidHex ( x , y ) then
76577: LD_VAR 0 4
76581: PPUSH
76582: LD_VAR 0 5
76586: PPUSH
76587: CALL_OW 488
76591: IFFALSE 76612
// ComTurnXY ( unit , x , y ) ;
76593: LD_VAR 0 1
76597: PPUSH
76598: LD_VAR 0 4
76602: PPUSH
76603: LD_VAR 0 5
76607: PPUSH
76608: CALL_OW 118
// end ;
76612: LD_VAR 0 3
76616: RET
// export function SeeUnits ( side , units ) ; var i ; begin
76617: LD_INT 0
76619: PPUSH
76620: PPUSH
// result := false ;
76621: LD_ADDR_VAR 0 3
76625: PUSH
76626: LD_INT 0
76628: ST_TO_ADDR
// if not units then
76629: LD_VAR 0 2
76633: NOT
76634: IFFALSE 76638
// exit ;
76636: GO 76683
// for i in units do
76638: LD_ADDR_VAR 0 4
76642: PUSH
76643: LD_VAR 0 2
76647: PUSH
76648: FOR_IN
76649: IFFALSE 76681
// if See ( side , i ) then
76651: LD_VAR 0 1
76655: PPUSH
76656: LD_VAR 0 4
76660: PPUSH
76661: CALL_OW 292
76665: IFFALSE 76679
// begin result := true ;
76667: LD_ADDR_VAR 0 3
76671: PUSH
76672: LD_INT 1
76674: ST_TO_ADDR
// exit ;
76675: POP
76676: POP
76677: GO 76683
// end ;
76679: GO 76648
76681: POP
76682: POP
// end ;
76683: LD_VAR 0 3
76687: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
76688: LD_INT 0
76690: PPUSH
76691: PPUSH
76692: PPUSH
76693: PPUSH
// if not unit or not points then
76694: LD_VAR 0 1
76698: NOT
76699: IFTRUE 76708
76701: PUSH
76702: LD_VAR 0 2
76706: NOT
76707: OR
76708: IFFALSE 76712
// exit ;
76710: GO 76802
// dist := 99999 ;
76712: LD_ADDR_VAR 0 5
76716: PUSH
76717: LD_INT 99999
76719: ST_TO_ADDR
// for i in points do
76720: LD_ADDR_VAR 0 4
76724: PUSH
76725: LD_VAR 0 2
76729: PUSH
76730: FOR_IN
76731: IFFALSE 76800
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
76733: LD_ADDR_VAR 0 6
76737: PUSH
76738: LD_VAR 0 1
76742: PPUSH
76743: LD_VAR 0 4
76747: PUSH
76748: LD_INT 1
76750: ARRAY
76751: PPUSH
76752: LD_VAR 0 4
76756: PUSH
76757: LD_INT 2
76759: ARRAY
76760: PPUSH
76761: CALL_OW 297
76765: ST_TO_ADDR
// if tmpDist < dist then
76766: LD_VAR 0 6
76770: PUSH
76771: LD_VAR 0 5
76775: LESS
76776: IFFALSE 76798
// begin result := i ;
76778: LD_ADDR_VAR 0 3
76782: PUSH
76783: LD_VAR 0 4
76787: ST_TO_ADDR
// dist := tmpDist ;
76788: LD_ADDR_VAR 0 5
76792: PUSH
76793: LD_VAR 0 6
76797: ST_TO_ADDR
// end ; end ;
76798: GO 76730
76800: POP
76801: POP
// end ;
76802: LD_VAR 0 3
76806: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
76807: LD_INT 0
76809: PPUSH
// uc_side := side ;
76810: LD_ADDR_OWVAR 20
76814: PUSH
76815: LD_VAR 0 1
76819: ST_TO_ADDR
// uc_nation := 3 ;
76820: LD_ADDR_OWVAR 21
76824: PUSH
76825: LD_INT 3
76827: ST_TO_ADDR
// vc_chassis := 25 ;
76828: LD_ADDR_OWVAR 37
76832: PUSH
76833: LD_INT 25
76835: ST_TO_ADDR
// vc_engine := engine_siberite ;
76836: LD_ADDR_OWVAR 39
76840: PUSH
76841: LD_INT 3
76843: ST_TO_ADDR
// vc_control := control_computer ;
76844: LD_ADDR_OWVAR 38
76848: PUSH
76849: LD_INT 3
76851: ST_TO_ADDR
// vc_weapon := 59 ;
76852: LD_ADDR_OWVAR 40
76856: PUSH
76857: LD_INT 59
76859: ST_TO_ADDR
// result := CreateVehicle ;
76860: LD_ADDR_VAR 0 5
76864: PUSH
76865: CALL_OW 45
76869: ST_TO_ADDR
// SetDir ( result , d ) ;
76870: LD_VAR 0 5
76874: PPUSH
76875: LD_VAR 0 4
76879: PPUSH
76880: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
76884: LD_VAR 0 5
76888: PPUSH
76889: LD_VAR 0 2
76893: PPUSH
76894: LD_VAR 0 3
76898: PPUSH
76899: LD_INT 0
76901: PPUSH
76902: CALL_OW 48
// end ;
76906: LD_VAR 0 5
76910: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
76911: LD_INT 0
76913: PPUSH
76914: PPUSH
76915: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
76916: LD_ADDR_VAR 0 2
76920: PUSH
76921: LD_INT 0
76923: PUSH
76924: LD_INT 0
76926: PUSH
76927: LD_INT 0
76929: PUSH
76930: LD_INT 0
76932: PUSH
76933: EMPTY
76934: LIST
76935: LIST
76936: LIST
76937: LIST
76938: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
76939: LD_VAR 0 1
76943: NOT
76944: IFTRUE 76977
76946: PUSH
76947: LD_VAR 0 1
76951: PPUSH
76952: CALL_OW 264
76956: PUSH
76957: LD_INT 12
76959: PUSH
76960: LD_INT 51
76962: PUSH
76963: LD_INT 32
76965: PUSH
76966: LD_INT 89
76968: PUSH
76969: EMPTY
76970: LIST
76971: LIST
76972: LIST
76973: LIST
76974: IN
76975: NOT
76976: OR
76977: IFFALSE 76981
// exit ;
76979: GO 77079
// for i := 1 to 3 do
76981: LD_ADDR_VAR 0 3
76985: PUSH
76986: DOUBLE
76987: LD_INT 1
76989: DEC
76990: ST_TO_ADDR
76991: LD_INT 3
76993: PUSH
76994: FOR_TO
76995: IFFALSE 77077
// begin tmp := GetCargo ( cargo , i ) ;
76997: LD_ADDR_VAR 0 4
77001: PUSH
77002: LD_VAR 0 1
77006: PPUSH
77007: LD_VAR 0 3
77011: PPUSH
77012: CALL_OW 289
77016: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
77017: LD_ADDR_VAR 0 2
77021: PUSH
77022: LD_VAR 0 2
77026: PPUSH
77027: LD_VAR 0 3
77031: PPUSH
77032: LD_VAR 0 4
77036: PPUSH
77037: CALL_OW 1
77041: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
77042: LD_ADDR_VAR 0 2
77046: PUSH
77047: LD_VAR 0 2
77051: PPUSH
77052: LD_INT 4
77054: PPUSH
77055: LD_VAR 0 2
77059: PUSH
77060: LD_INT 4
77062: ARRAY
77063: PUSH
77064: LD_VAR 0 4
77068: PLUS
77069: PPUSH
77070: CALL_OW 1
77074: ST_TO_ADDR
// end ;
77075: GO 76994
77077: POP
77078: POP
// end ;
77079: LD_VAR 0 2
77083: RET
// export function Length ( array ) ; begin
77084: LD_INT 0
77086: PPUSH
// result := array + 0 ;
77087: LD_ADDR_VAR 0 2
77091: PUSH
77092: LD_VAR 0 1
77096: PUSH
77097: LD_INT 0
77099: PLUS
77100: ST_TO_ADDR
// end ;
77101: LD_VAR 0 2
77105: RET
// export function PrepareArray ( array ) ; begin
77106: LD_INT 0
77108: PPUSH
// result := array diff 0 ;
77109: LD_ADDR_VAR 0 2
77113: PUSH
77114: LD_VAR 0 1
77118: PUSH
77119: LD_INT 0
77121: DIFF
77122: ST_TO_ADDR
// if not result [ 1 ] then
77123: LD_VAR 0 2
77127: PUSH
77128: LD_INT 1
77130: ARRAY
77131: NOT
77132: IFFALSE 77152
// result := Delete ( result , 1 ) ;
77134: LD_ADDR_VAR 0 2
77138: PUSH
77139: LD_VAR 0 2
77143: PPUSH
77144: LD_INT 1
77146: PPUSH
77147: CALL_OW 3
77151: ST_TO_ADDR
// end ;
77152: LD_VAR 0 2
77156: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
77157: LD_INT 0
77159: PPUSH
77160: PPUSH
77161: PPUSH
77162: PPUSH
// sibRocketRange := 25 ;
77163: LD_ADDR_VAR 0 6
77167: PUSH
77168: LD_INT 25
77170: ST_TO_ADDR
// result := false ;
77171: LD_ADDR_VAR 0 4
77175: PUSH
77176: LD_INT 0
77178: ST_TO_ADDR
// for i := 0 to 5 do
77179: LD_ADDR_VAR 0 5
77183: PUSH
77184: DOUBLE
77185: LD_INT 0
77187: DEC
77188: ST_TO_ADDR
77189: LD_INT 5
77191: PUSH
77192: FOR_TO
77193: IFFALSE 77260
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
77195: LD_VAR 0 1
77199: PPUSH
77200: LD_VAR 0 5
77204: PPUSH
77205: LD_VAR 0 6
77209: PPUSH
77210: CALL_OW 272
77214: PPUSH
77215: LD_VAR 0 2
77219: PPUSH
77220: LD_VAR 0 5
77224: PPUSH
77225: LD_VAR 0 6
77229: PPUSH
77230: CALL_OW 273
77234: PPUSH
77235: LD_VAR 0 3
77239: PPUSH
77240: CALL_OW 309
77244: IFFALSE 77258
// begin result := true ;
77246: LD_ADDR_VAR 0 4
77250: PUSH
77251: LD_INT 1
77253: ST_TO_ADDR
// exit ;
77254: POP
77255: POP
77256: GO 77262
// end ;
77258: GO 77192
77260: POP
77261: POP
// end ;
77262: LD_VAR 0 4
77266: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
77267: LD_INT 0
77269: PPUSH
77270: PPUSH
77271: PPUSH
// if btype = b_depot then
77272: LD_VAR 0 2
77276: PUSH
77277: LD_INT 0
77279: EQUAL
77280: IFFALSE 77292
// begin result := true ;
77282: LD_ADDR_VAR 0 3
77286: PUSH
77287: LD_INT 1
77289: ST_TO_ADDR
// exit ;
77290: GO 77412
// end ; pom := GetBase ( depot ) ;
77292: LD_ADDR_VAR 0 4
77296: PUSH
77297: LD_VAR 0 1
77301: PPUSH
77302: CALL_OW 274
77306: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
77307: LD_ADDR_VAR 0 5
77311: PUSH
77312: LD_VAR 0 2
77316: PPUSH
77317: LD_VAR 0 1
77321: PPUSH
77322: CALL_OW 248
77326: PPUSH
77327: CALL_OW 450
77331: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
77332: LD_ADDR_VAR 0 3
77336: PUSH
77337: LD_VAR 0 4
77341: PPUSH
77342: LD_INT 1
77344: PPUSH
77345: CALL_OW 275
77349: PUSH
77350: LD_VAR 0 5
77354: PUSH
77355: LD_INT 1
77357: ARRAY
77358: GREATEREQUAL
77359: IFFALSE 77385
77361: PUSH
77362: LD_VAR 0 4
77366: PPUSH
77367: LD_INT 2
77369: PPUSH
77370: CALL_OW 275
77374: PUSH
77375: LD_VAR 0 5
77379: PUSH
77380: LD_INT 2
77382: ARRAY
77383: GREATEREQUAL
77384: AND
77385: IFFALSE 77411
77387: PUSH
77388: LD_VAR 0 4
77392: PPUSH
77393: LD_INT 3
77395: PPUSH
77396: CALL_OW 275
77400: PUSH
77401: LD_VAR 0 5
77405: PUSH
77406: LD_INT 3
77408: ARRAY
77409: GREATEREQUAL
77410: AND
77411: ST_TO_ADDR
// end ;
77412: LD_VAR 0 3
77416: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
77417: LD_INT 0
77419: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
77420: LD_VAR 0 1
77424: PPUSH
77425: LD_VAR 0 2
77429: PPUSH
77430: LD_INT 0
77432: PPUSH
77433: LD_INT 0
77435: PPUSH
77436: LD_INT 1
77438: PPUSH
77439: LD_INT 0
77441: PPUSH
77442: CALL_OW 587
// end ;
77446: LD_VAR 0 3
77450: RET
// export function CenterOnNow ( unit ) ; begin
77451: LD_INT 0
77453: PPUSH
// result := IsInUnit ( unit ) ;
77454: LD_ADDR_VAR 0 2
77458: PUSH
77459: LD_VAR 0 1
77463: PPUSH
77464: CALL_OW 310
77468: ST_TO_ADDR
// if not result then
77469: LD_VAR 0 2
77473: NOT
77474: IFFALSE 77486
// result := unit ;
77476: LD_ADDR_VAR 0 2
77480: PUSH
77481: LD_VAR 0 1
77485: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
77486: LD_VAR 0 1
77490: PPUSH
77491: CALL_OW 87
// end ;
77495: LD_VAR 0 2
77499: RET
// export function ComMoveHex ( unit , hex ) ; begin
77500: LD_INT 0
77502: PPUSH
// if not hex then
77503: LD_VAR 0 2
77507: NOT
77508: IFFALSE 77512
// exit ;
77510: GO 77565
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
77512: LD_VAR 0 2
77516: PUSH
77517: LD_INT 1
77519: ARRAY
77520: PPUSH
77521: LD_VAR 0 2
77525: PUSH
77526: LD_INT 2
77528: ARRAY
77529: PPUSH
77530: CALL_OW 428
77534: IFFALSE 77538
// exit ;
77536: GO 77565
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
77538: LD_VAR 0 1
77542: PPUSH
77543: LD_VAR 0 2
77547: PUSH
77548: LD_INT 1
77550: ARRAY
77551: PPUSH
77552: LD_VAR 0 2
77556: PUSH
77557: LD_INT 2
77559: ARRAY
77560: PPUSH
77561: CALL_OW 111
// end ;
77565: LD_VAR 0 3
77569: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
77570: LD_INT 0
77572: PPUSH
77573: PPUSH
77574: PPUSH
// if not unit or not enemy then
77575: LD_VAR 0 1
77579: NOT
77580: IFTRUE 77589
77582: PUSH
77583: LD_VAR 0 2
77587: NOT
77588: OR
77589: IFFALSE 77593
// exit ;
77591: GO 77719
// x := GetX ( enemy ) ;
77593: LD_ADDR_VAR 0 4
77597: PUSH
77598: LD_VAR 0 2
77602: PPUSH
77603: CALL_OW 250
77607: ST_TO_ADDR
// y := GetY ( enemy ) ;
77608: LD_ADDR_VAR 0 5
77612: PUSH
77613: LD_VAR 0 2
77617: PPUSH
77618: CALL_OW 251
77622: ST_TO_ADDR
// if ValidHex ( x , y ) then
77623: LD_VAR 0 4
77627: PPUSH
77628: LD_VAR 0 5
77632: PPUSH
77633: CALL_OW 488
77637: IFFALSE 77719
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
77639: LD_VAR 0 2
77643: PPUSH
77644: CALL_OW 247
77648: PUSH
77649: LD_INT 3
77651: PUSH
77652: LD_INT 2
77654: PUSH
77655: EMPTY
77656: LIST
77657: LIST
77658: IN
77659: IFTRUE 77682
77661: PUSH
77662: LD_VAR 0 1
77666: PPUSH
77667: CALL_OW 255
77671: PPUSH
77672: LD_VAR 0 2
77676: PPUSH
77677: CALL_OW 292
77681: OR
77682: IFFALSE 77700
// ComAttackUnit ( unit , enemy ) else
77684: LD_VAR 0 1
77688: PPUSH
77689: LD_VAR 0 2
77693: PPUSH
77694: CALL_OW 115
77698: GO 77719
// ComAgressiveMove ( unit , x , y ) ;
77700: LD_VAR 0 1
77704: PPUSH
77705: LD_VAR 0 4
77709: PPUSH
77710: LD_VAR 0 5
77714: PPUSH
77715: CALL_OW 114
// end ;
77719: LD_VAR 0 3
77723: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
77724: LD_INT 0
77726: PPUSH
77727: PPUSH
77728: PPUSH
// list := AreaToList ( area , 0 ) ;
77729: LD_ADDR_VAR 0 5
77733: PUSH
77734: LD_VAR 0 1
77738: PPUSH
77739: LD_INT 0
77741: PPUSH
77742: CALL_OW 517
77746: ST_TO_ADDR
// if not list then
77747: LD_VAR 0 5
77751: NOT
77752: IFFALSE 77756
// exit ;
77754: GO 77886
// if all then
77756: LD_VAR 0 2
77760: IFFALSE 77848
// begin for i := 1 to list [ 1 ] do
77762: LD_ADDR_VAR 0 4
77766: PUSH
77767: DOUBLE
77768: LD_INT 1
77770: DEC
77771: ST_TO_ADDR
77772: LD_VAR 0 5
77776: PUSH
77777: LD_INT 1
77779: ARRAY
77780: PUSH
77781: FOR_TO
77782: IFFALSE 77844
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
77784: LD_ADDR_VAR 0 3
77788: PUSH
77789: LD_VAR 0 3
77793: PPUSH
77794: LD_VAR 0 3
77798: PUSH
77799: LD_INT 1
77801: PLUS
77802: PPUSH
77803: LD_VAR 0 5
77807: PUSH
77808: LD_INT 1
77810: ARRAY
77811: PUSH
77812: LD_VAR 0 4
77816: ARRAY
77817: PUSH
77818: LD_VAR 0 5
77822: PUSH
77823: LD_INT 2
77825: ARRAY
77826: PUSH
77827: LD_VAR 0 4
77831: ARRAY
77832: PUSH
77833: EMPTY
77834: LIST
77835: LIST
77836: PPUSH
77837: CALL_OW 1
77841: ST_TO_ADDR
77842: GO 77781
77844: POP
77845: POP
// exit ;
77846: GO 77886
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
77848: LD_ADDR_VAR 0 3
77852: PUSH
77853: LD_VAR 0 5
77857: PUSH
77858: LD_INT 1
77860: ARRAY
77861: PUSH
77862: LD_INT 1
77864: ARRAY
77865: PUSH
77866: LD_VAR 0 5
77870: PUSH
77871: LD_INT 2
77873: ARRAY
77874: PUSH
77875: LD_INT 1
77877: ARRAY
77878: PUSH
77879: EMPTY
77880: LIST
77881: LIST
77882: PUSH
77883: EMPTY
77884: LIST
77885: ST_TO_ADDR
// end ;
77886: LD_VAR 0 3
77890: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
77891: LD_INT 0
77893: PPUSH
77894: PPUSH
// list := AreaToList ( area , 0 ) ;
77895: LD_ADDR_VAR 0 4
77899: PUSH
77900: LD_VAR 0 1
77904: PPUSH
77905: LD_INT 0
77907: PPUSH
77908: CALL_OW 517
77912: ST_TO_ADDR
// if not list then
77913: LD_VAR 0 4
77917: NOT
77918: IFFALSE 77922
// exit ;
77920: GO 77963
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
77922: LD_ADDR_VAR 0 3
77926: PUSH
77927: LD_VAR 0 4
77931: PUSH
77932: LD_INT 1
77934: ARRAY
77935: PUSH
77936: LD_INT 1
77938: ARRAY
77939: PUSH
77940: LD_VAR 0 4
77944: PUSH
77945: LD_INT 2
77947: ARRAY
77948: PUSH
77949: LD_INT 1
77951: ARRAY
77952: PUSH
77953: LD_VAR 0 2
77957: PUSH
77958: EMPTY
77959: LIST
77960: LIST
77961: LIST
77962: ST_TO_ADDR
// end ;
77963: LD_VAR 0 3
77967: RET
// export function First ( array ) ; begin
77968: LD_INT 0
77970: PPUSH
// if not array then
77971: LD_VAR 0 1
77975: NOT
77976: IFFALSE 77980
// exit ;
77978: GO 77994
// result := array [ 1 ] ;
77980: LD_ADDR_VAR 0 2
77984: PUSH
77985: LD_VAR 0 1
77989: PUSH
77990: LD_INT 1
77992: ARRAY
77993: ST_TO_ADDR
// end ;
77994: LD_VAR 0 2
77998: RET
// export function Last ( array ) ; begin
77999: LD_INT 0
78001: PPUSH
// if not array then
78002: LD_VAR 0 1
78006: NOT
78007: IFFALSE 78011
// exit ;
78009: GO 78027
// result := array [ array ] ;
78011: LD_ADDR_VAR 0 2
78015: PUSH
78016: LD_VAR 0 1
78020: PUSH
78021: LD_VAR 0 1
78025: ARRAY
78026: ST_TO_ADDR
// end ;
78027: LD_VAR 0 2
78031: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
78032: LD_INT 0
78034: PPUSH
78035: PPUSH
// result := [ ] ;
78036: LD_ADDR_VAR 0 5
78040: PUSH
78041: EMPTY
78042: ST_TO_ADDR
// if not array then
78043: LD_VAR 0 1
78047: NOT
78048: IFFALSE 78052
// exit ;
78050: GO 78164
// for i := 1 to array do
78052: LD_ADDR_VAR 0 6
78056: PUSH
78057: DOUBLE
78058: LD_INT 1
78060: DEC
78061: ST_TO_ADDR
78062: LD_VAR 0 1
78066: PUSH
78067: FOR_TO
78068: IFFALSE 78162
// if array [ i ] [ index ] = value then
78070: LD_VAR 0 1
78074: PUSH
78075: LD_VAR 0 6
78079: ARRAY
78080: PUSH
78081: LD_VAR 0 2
78085: ARRAY
78086: PUSH
78087: LD_VAR 0 3
78091: EQUAL
78092: IFFALSE 78160
// begin if indexColumn then
78094: LD_VAR 0 4
78098: IFFALSE 78134
// result := Join ( result , array [ i ] [ indexColumn ] ) else
78100: LD_ADDR_VAR 0 5
78104: PUSH
78105: LD_VAR 0 5
78109: PPUSH
78110: LD_VAR 0 1
78114: PUSH
78115: LD_VAR 0 6
78119: ARRAY
78120: PUSH
78121: LD_VAR 0 4
78125: ARRAY
78126: PPUSH
78127: CALL 73172 0 2
78131: ST_TO_ADDR
78132: GO 78160
// result := Join ( result , array [ i ] ) ;
78134: LD_ADDR_VAR 0 5
78138: PUSH
78139: LD_VAR 0 5
78143: PPUSH
78144: LD_VAR 0 1
78148: PUSH
78149: LD_VAR 0 6
78153: ARRAY
78154: PPUSH
78155: CALL 73172 0 2
78159: ST_TO_ADDR
// end ;
78160: GO 78067
78162: POP
78163: POP
// end ;
78164: LD_VAR 0 5
78168: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
78169: LD_INT 0
78171: PPUSH
// if not vehicles or not parkingPoint then
78172: LD_VAR 0 1
78176: NOT
78177: IFTRUE 78186
78179: PUSH
78180: LD_VAR 0 2
78184: NOT
78185: OR
78186: IFFALSE 78190
// exit ;
78188: GO 78288
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
78190: LD_ADDR_VAR 0 1
78194: PUSH
78195: LD_VAR 0 1
78199: PPUSH
78200: LD_INT 50
78202: PUSH
78203: EMPTY
78204: LIST
78205: PUSH
78206: LD_INT 3
78208: PUSH
78209: LD_INT 92
78211: PUSH
78212: LD_VAR 0 2
78216: PUSH
78217: LD_INT 1
78219: ARRAY
78220: PUSH
78221: LD_VAR 0 2
78225: PUSH
78226: LD_INT 2
78228: ARRAY
78229: PUSH
78230: LD_INT 8
78232: PUSH
78233: EMPTY
78234: LIST
78235: LIST
78236: LIST
78237: LIST
78238: PUSH
78239: EMPTY
78240: LIST
78241: LIST
78242: PUSH
78243: EMPTY
78244: LIST
78245: LIST
78246: PPUSH
78247: CALL_OW 72
78251: ST_TO_ADDR
// if not vehicles then
78252: LD_VAR 0 1
78256: NOT
78257: IFFALSE 78261
// exit ;
78259: GO 78288
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
78261: LD_VAR 0 1
78265: PPUSH
78266: LD_VAR 0 2
78270: PUSH
78271: LD_INT 1
78273: ARRAY
78274: PPUSH
78275: LD_VAR 0 2
78279: PUSH
78280: LD_INT 2
78282: ARRAY
78283: PPUSH
78284: CALL_OW 111
// end ;
78288: LD_VAR 0 3
78292: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
78293: LD_INT 0
78295: PPUSH
78296: PPUSH
78297: PPUSH
// if not side or not area then
78298: LD_VAR 0 1
78302: NOT
78303: IFTRUE 78312
78305: PUSH
78306: LD_VAR 0 2
78310: NOT
78311: OR
78312: IFFALSE 78316
// exit ;
78314: GO 78435
// tmp := AreaToList ( area , 0 ) ;
78316: LD_ADDR_VAR 0 5
78320: PUSH
78321: LD_VAR 0 2
78325: PPUSH
78326: LD_INT 0
78328: PPUSH
78329: CALL_OW 517
78333: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
78334: LD_ADDR_VAR 0 4
78338: PUSH
78339: DOUBLE
78340: LD_INT 1
78342: DEC
78343: ST_TO_ADDR
78344: LD_VAR 0 5
78348: PUSH
78349: LD_INT 1
78351: ARRAY
78352: PUSH
78353: FOR_TO
78354: IFFALSE 78433
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
78356: LD_VAR 0 5
78360: PUSH
78361: LD_INT 1
78363: ARRAY
78364: PUSH
78365: LD_VAR 0 4
78369: ARRAY
78370: PPUSH
78371: LD_VAR 0 5
78375: PUSH
78376: LD_INT 2
78378: ARRAY
78379: PUSH
78380: LD_VAR 0 4
78384: ARRAY
78385: PPUSH
78386: CALL_OW 351
78390: IFFALSE 78431
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
78392: LD_VAR 0 5
78396: PUSH
78397: LD_INT 1
78399: ARRAY
78400: PUSH
78401: LD_VAR 0 4
78405: ARRAY
78406: PPUSH
78407: LD_VAR 0 5
78411: PUSH
78412: LD_INT 2
78414: ARRAY
78415: PUSH
78416: LD_VAR 0 4
78420: ARRAY
78421: PPUSH
78422: LD_VAR 0 1
78426: PPUSH
78427: CALL_OW 244
// end ;
78431: GO 78353
78433: POP
78434: POP
// end ;
78435: LD_VAR 0 3
78439: RET
// export function UniqueArray ( array ) ; var i ; begin
78440: LD_INT 0
78442: PPUSH
78443: PPUSH
// result := [ ] ;
78444: LD_ADDR_VAR 0 2
78448: PUSH
78449: EMPTY
78450: ST_TO_ADDR
// if not array then
78451: LD_VAR 0 1
78455: NOT
78456: IFFALSE 78460
// exit ;
78458: GO 78521
// for i := 1 to array do
78460: LD_ADDR_VAR 0 3
78464: PUSH
78465: DOUBLE
78466: LD_INT 1
78468: DEC
78469: ST_TO_ADDR
78470: LD_VAR 0 1
78474: PUSH
78475: FOR_TO
78476: IFFALSE 78519
// if not array [ i ] in result then
78478: LD_VAR 0 1
78482: PUSH
78483: LD_VAR 0 3
78487: ARRAY
78488: PUSH
78489: LD_VAR 0 2
78493: IN
78494: NOT
78495: IFFALSE 78517
// result := Join ( result , i ) ;
78497: LD_ADDR_VAR 0 2
78501: PUSH
78502: LD_VAR 0 2
78506: PPUSH
78507: LD_VAR 0 3
78511: PPUSH
78512: CALL 73172 0 2
78516: ST_TO_ADDR
78517: GO 78475
78519: POP
78520: POP
// end ; end_of_file
78521: LD_VAR 0 2
78525: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
78526: LD_VAR 0 1
78530: PUSH
78531: LD_INT 200
78533: DOUBLE
78534: GREATEREQUAL
78535: IFFALSE 78543
78537: LD_INT 299
78539: DOUBLE
78540: LESSEQUAL
78541: IFTRUE 78545
78543: GO 78577
78545: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
78546: LD_VAR 0 1
78550: PPUSH
78551: LD_VAR 0 2
78555: PPUSH
78556: LD_VAR 0 3
78560: PPUSH
78561: LD_VAR 0 4
78565: PPUSH
78566: LD_VAR 0 5
78570: PPUSH
78571: CALL 29248 0 5
78575: GO 78654
78577: LD_INT 300
78579: DOUBLE
78580: GREATEREQUAL
78581: IFFALSE 78589
78583: LD_INT 399
78585: DOUBLE
78586: LESSEQUAL
78587: IFTRUE 78591
78589: GO 78653
78591: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
78592: LD_VAR 0 1
78596: PPUSH
78597: LD_VAR 0 2
78601: PPUSH
78602: LD_VAR 0 3
78606: PPUSH
78607: LD_VAR 0 4
78611: PPUSH
78612: LD_VAR 0 5
78616: PPUSH
78617: LD_VAR 0 6
78621: PPUSH
78622: LD_VAR 0 7
78626: PPUSH
78627: LD_VAR 0 8
78631: PPUSH
78632: LD_VAR 0 9
78636: PPUSH
78637: LD_VAR 0 10
78641: PPUSH
78642: LD_VAR 0 11
78646: PPUSH
78647: CALL 25051 0 11
78651: GO 78654
78653: POP
// end ;
78654: PPOPN 11
78656: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
78657: LD_VAR 0 1
78661: PPUSH
78662: LD_VAR 0 2
78666: PPUSH
78667: LD_VAR 0 3
78671: PPUSH
78672: LD_VAR 0 4
78676: PPUSH
78677: LD_VAR 0 5
78681: PPUSH
78682: CALL 28548 0 5
// end ; end_of_file
78686: PPOPN 5
78688: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
78689: LD_VAR 0 1
78693: PPUSH
78694: LD_VAR 0 2
78698: PPUSH
78699: LD_VAR 0 3
78703: PPUSH
78704: LD_VAR 0 4
78708: PPUSH
78709: LD_VAR 0 5
78713: PPUSH
78714: LD_VAR 0 6
78718: PPUSH
78719: CALL 12591 0 6
// end ;
78723: PPOPN 6
78725: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
78726: LD_INT 0
78728: PPUSH
// begin if not units then
78729: LD_VAR 0 1
78733: NOT
78734: IFFALSE 78738
// exit ;
78736: GO 78772
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
78738: LD_VAR 0 1
78742: PPUSH
78743: LD_VAR 0 2
78747: PPUSH
78748: LD_VAR 0 3
78752: PPUSH
78753: LD_VAR 0 4
78757: PPUSH
78758: LD_VAR 0 5
78762: PPUSH
78763: LD_VAR 0 6
78767: PPUSH
78768: CALL 34945 0 6
// end ;
78772: PPOPN 7
78774: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
78775: CALL 12471 0 0
// end ;
78779: PPOPN 1
78781: END
