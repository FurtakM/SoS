// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// Init ;
   8: CALL 44 0 0
// DebugMode ;
  12: CALL 265 0 0
// AnimateTrees ( true ) ;
  16: LD_INT 1
  18: PPUSH
  19: CALL_OW 573
// CreateNature ;
  23: CALL 1568 0 0
// PrepareRussians ;
  27: CALL 4578 0 0
// PrepareAmericans ;
  31: CALL 3448 0 0
// Action ;
  35: CALL 8596 0 0
// SaveForQuickRestart ;
  39: CALL_OW 22
// end ;
  43: END
// export debug ; export mission_prev_prefix , mission_prefix ; export buildings_counter , time_to_end , can_end , must_end , kill_counter ; function Init ; begin
  44: LD_INT 0
  46: PPUSH
// debug := false ;
  47: LD_ADDR_EXP 1
  51: PUSH
  52: LD_INT 0
  54: ST_TO_ADDR
// mission_prefix := 07c_ ;
  55: LD_ADDR_EXP 3
  59: PUSH
  60: LD_STRING 07c_
  62: ST_TO_ADDR
// mission_prev_prefix := 07_ ;
  63: LD_ADDR_EXP 2
  67: PUSH
  68: LD_STRING 07_
  70: ST_TO_ADDR
// buildings_counter := 0 ;
  71: LD_ADDR_EXP 4
  75: PUSH
  76: LD_INT 0
  78: ST_TO_ADDR
// time_to_end := [ [ 32 32$00 , 29 29$00 , 26 26$00 , 23 23$00 ] [ Difficulty ] , [ 38 38$00 , 36 36$00 , 34 34$00 , 32 32$00 ] [ Difficulty ] , [ 43 43$00 , 41 41$00 , 39 39$00 , 37 37$00 ] [ Difficulty ] ] ;
  79: LD_ADDR_EXP 5
  83: PUSH
  84: LD_INT 67200
  86: PUSH
  87: LD_INT 60900
  89: PUSH
  90: LD_INT 54600
  92: PUSH
  93: LD_INT 48300
  95: PUSH
  96: EMPTY
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: PUSH
 102: LD_OWVAR 67
 106: ARRAY
 107: PUSH
 108: LD_INT 79800
 110: PUSH
 111: LD_INT 75600
 113: PUSH
 114: LD_INT 71400
 116: PUSH
 117: LD_INT 67200
 119: PUSH
 120: EMPTY
 121: LIST
 122: LIST
 123: LIST
 124: LIST
 125: PUSH
 126: LD_OWVAR 67
 130: ARRAY
 131: PUSH
 132: LD_INT 90300
 134: PUSH
 135: LD_INT 86100
 137: PUSH
 138: LD_INT 81900
 140: PUSH
 141: LD_INT 77700
 143: PUSH
 144: EMPTY
 145: LIST
 146: LIST
 147: LIST
 148: LIST
 149: PUSH
 150: LD_OWVAR 67
 154: ARRAY
 155: PUSH
 156: EMPTY
 157: LIST
 158: LIST
 159: LIST
 160: ST_TO_ADDR
// can_end := false ;
 161: LD_ADDR_EXP 6
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// must_end := false ;
 169: LD_ADDR_EXP 7
 173: PUSH
 174: LD_INT 0
 176: ST_TO_ADDR
// kill_counter := 0 ;
 177: LD_ADDR_EXP 8
 181: PUSH
 182: LD_INT 0
 184: ST_TO_ADDR
// end ;
 185: LD_VAR 0 1
 189: RET
// every 0 0$01 trigger not debug do
 190: LD_EXP 1
 194: NOT
 195: IFFALSE 264
 197: GO 199
 199: DISABLE
// begin enable ;
 200: ENABLE
// if not must_end then
 201: LD_EXP 7
 205: NOT
 206: IFFALSE 227
// display_strings := [ #Am07-1 , tick ] else
 208: LD_ADDR_OWVAR 47
 212: PUSH
 213: LD_STRING #Am07-1
 215: PUSH
 216: LD_OWVAR 1
 220: PUSH
 221: EMPTY
 222: LIST
 223: LIST
 224: ST_TO_ADDR
 225: GO 264
// display_strings := [ #Am07-1 , tick , #Am07-2 , time_to_end [ 3 ] - tick ] ;
 227: LD_ADDR_OWVAR 47
 231: PUSH
 232: LD_STRING #Am07-1
 234: PUSH
 235: LD_OWVAR 1
 239: PUSH
 240: LD_STRING #Am07-2
 242: PUSH
 243: LD_EXP 5
 247: PUSH
 248: LD_INT 3
 250: ARRAY
 251: PUSH
 252: LD_OWVAR 1
 256: MINUS
 257: PUSH
 258: EMPTY
 259: LIST
 260: LIST
 261: LIST
 262: LIST
 263: ST_TO_ADDR
// end ;
 264: END
// function DebugMode ; var i ; begin
 265: LD_INT 0
 267: PPUSH
 268: PPUSH
// if not debug then
 269: LD_EXP 1
 273: NOT
 274: IFFALSE 278
// exit ;
 276: GO 293
// Difficulty := 4 ;
 278: LD_ADDR_OWVAR 67
 282: PUSH
 283: LD_INT 4
 285: ST_TO_ADDR
// FogOff ( 1 ) ;
 286: LD_INT 1
 288: PPUSH
 289: CALL_OW 344
// end ;
 293: LD_VAR 0 1
 297: RET
// every 3 trigger debug do var i , filter ;
 298: LD_EXP 1
 302: IFFALSE 391
 304: GO 306
 306: DISABLE
 307: LD_INT 0
 309: PPUSH
 310: PPUSH
// begin enable ;
 311: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 500 ] ] ] ) ;
 312: LD_ADDR_VAR 0 2
 316: PUSH
 317: LD_INT 22
 319: PUSH
 320: LD_INT 1
 322: PUSH
 323: EMPTY
 324: LIST
 325: LIST
 326: PUSH
 327: LD_INT 3
 329: PUSH
 330: LD_INT 24
 332: PUSH
 333: LD_INT 500
 335: PUSH
 336: EMPTY
 337: LIST
 338: LIST
 339: PUSH
 340: EMPTY
 341: LIST
 342: LIST
 343: PUSH
 344: EMPTY
 345: LIST
 346: LIST
 347: PPUSH
 348: CALL_OW 69
 352: ST_TO_ADDR
// if not filter then
 353: LD_VAR 0 2
 357: NOT
 358: IFFALSE 362
// exit ;
 360: GO 391
// for i in filter do
 362: LD_ADDR_VAR 0 1
 366: PUSH
 367: LD_VAR 0 2
 371: PUSH
 372: FOR_IN
 373: IFFALSE 389
// SetLives ( i , 1000 ) ;
 375: LD_VAR 0 1
 379: PPUSH
 380: LD_INT 1000
 382: PPUSH
 383: CALL_OW 234
 387: GO 372
 389: POP
 390: POP
// end ;
 391: PPOPN 2
 393: END
// every 0 0$1 trigger kill_counter >= 20 do
 394: LD_EXP 8
 398: PUSH
 399: LD_INT 20
 401: GREATEREQUAL
 402: IFFALSE 414
 404: GO 406
 406: DISABLE
// SetAchievement ( ACH_HITMAN ) ;
 407: LD_STRING ACH_HITMAN
 409: PPUSH
 410: CALL_OW 543
 414: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] ] ) >= 3 do
 415: LD_INT 22
 417: PUSH
 418: LD_INT 1
 420: PUSH
 421: EMPTY
 422: LIST
 423: LIST
 424: PUSH
 425: LD_INT 23
 427: PUSH
 428: LD_INT 3
 430: PUSH
 431: EMPTY
 432: LIST
 433: LIST
 434: PUSH
 435: LD_INT 21
 437: PUSH
 438: LD_INT 2
 440: PUSH
 441: EMPTY
 442: LIST
 443: LIST
 444: PUSH
 445: EMPTY
 446: LIST
 447: LIST
 448: LIST
 449: PPUSH
 450: CALL_OW 69
 454: PUSH
 455: LD_INT 3
 457: GREATEREQUAL
 458: IFFALSE 470
 460: GO 462
 462: DISABLE
// SetAchievement ( ACH_TANKACE ) ;
 463: LD_STRING ACH_TANKACE
 465: PPUSH
 466: CALL_OW 543
 470: END
// every 0 0$1 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) = 0 do
 471: LD_INT 2
 473: PUSH
 474: LD_INT 30
 476: PUSH
 477: LD_INT 0
 479: PUSH
 480: EMPTY
 481: LIST
 482: LIST
 483: PUSH
 484: LD_INT 30
 486: PUSH
 487: LD_INT 1
 489: PUSH
 490: EMPTY
 491: LIST
 492: LIST
 493: PUSH
 494: EMPTY
 495: LIST
 496: LIST
 497: LIST
 498: PPUSH
 499: CALL_OW 69
 503: PUSH
 504: LD_INT 0
 506: EQUAL
 507: IFFALSE 519
 509: GO 511
 511: DISABLE
// SetAchievement ( ACH_COMMANDO ) ; end_of_file
 512: LD_STRING ACH_COMMANDO
 514: PPUSH
 515: CALL_OW 543
 519: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 520: LD_INT 0
 522: PPUSH
// uc_side := side ;
 523: LD_ADDR_OWVAR 20
 527: PUSH
 528: LD_VAR 0 1
 532: ST_TO_ADDR
// uc_nation := nation ;
 533: LD_ADDR_OWVAR 21
 537: PUSH
 538: LD_VAR 0 2
 542: ST_TO_ADDR
// vc_chassis := chassis ;
 543: LD_ADDR_OWVAR 37
 547: PUSH
 548: LD_VAR 0 3
 552: ST_TO_ADDR
// vc_engine := engine ;
 553: LD_ADDR_OWVAR 39
 557: PUSH
 558: LD_VAR 0 4
 562: ST_TO_ADDR
// vc_control := control ;
 563: LD_ADDR_OWVAR 38
 567: PUSH
 568: LD_VAR 0 5
 572: ST_TO_ADDR
// vc_weapon := weapon ;
 573: LD_ADDR_OWVAR 40
 577: PUSH
 578: LD_VAR 0 6
 582: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 583: LD_ADDR_OWVAR 41
 587: PUSH
 588: LD_VAR 0 7
 592: ST_TO_ADDR
// result := CreateVehicle ;
 593: LD_ADDR_VAR 0 8
 597: PUSH
 598: CALL_OW 45
 602: ST_TO_ADDR
// end ;
 603: LD_VAR 0 8
 607: RET
// export function GetRandom ( sex ) ; var i , filter ; begin
 608: LD_INT 0
 610: PPUSH
 611: PPUSH
 612: PPUSH
// filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam ] ;
 613: LD_ADDR_VAR 0 4
 617: PUSH
 618: LD_INT 22
 620: PUSH
 621: LD_INT 1
 623: PUSH
 624: EMPTY
 625: LIST
 626: LIST
 627: PUSH
 628: LD_INT 21
 630: PUSH
 631: LD_INT 1
 633: PUSH
 634: EMPTY
 635: LIST
 636: LIST
 637: PUSH
 638: LD_INT 50
 640: PUSH
 641: EMPTY
 642: LIST
 643: PUSH
 644: EMPTY
 645: LIST
 646: LIST
 647: LIST
 648: PPUSH
 649: CALL_OW 69
 653: PUSH
 654: LD_EXP 9
 658: PUSH
 659: LD_EXP 10
 663: PUSH
 664: LD_EXP 11
 668: PUSH
 669: LD_EXP 12
 673: PUSH
 674: LD_EXP 13
 678: PUSH
 679: LD_EXP 14
 683: PUSH
 684: LD_EXP 15
 688: PUSH
 689: LD_EXP 16
 693: PUSH
 694: LD_EXP 18
 698: PUSH
 699: LD_EXP 17
 703: PUSH
 704: EMPTY
 705: LIST
 706: LIST
 707: LIST
 708: LIST
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: LIST
 714: LIST
 715: DIFF
 716: ST_TO_ADDR
// if not filter then
 717: LD_VAR 0 4
 721: NOT
 722: IFFALSE 726
// exit ;
 724: GO 753
// result := UnitFilter ( filter , [ f_sex , sex ] ) ;
 726: LD_ADDR_VAR 0 2
 730: PUSH
 731: LD_VAR 0 4
 735: PPUSH
 736: LD_INT 26
 738: PUSH
 739: LD_VAR 0 1
 743: PUSH
 744: EMPTY
 745: LIST
 746: LIST
 747: PPUSH
 748: CALL_OW 72
 752: ST_TO_ADDR
// end ;
 753: LD_VAR 0 2
 757: RET
// export function SayX ( units , ident ) ; var i ; begin
 758: LD_INT 0
 760: PPUSH
 761: PPUSH
// result := false ;
 762: LD_ADDR_VAR 0 3
 766: PUSH
 767: LD_INT 0
 769: ST_TO_ADDR
// if not units then
 770: LD_VAR 0 1
 774: NOT
 775: IFFALSE 779
// exit ;
 777: GO 833
// for i in units do
 779: LD_ADDR_VAR 0 4
 783: PUSH
 784: LD_VAR 0 1
 788: PUSH
 789: FOR_IN
 790: IFFALSE 831
// if IsOk ( i ) then
 792: LD_VAR 0 4
 796: PPUSH
 797: CALL_OW 302
 801: IFFALSE 829
// begin Say ( i , ident ) ;
 803: LD_VAR 0 4
 807: PPUSH
 808: LD_VAR 0 2
 812: PPUSH
 813: CALL_OW 88
// result := i ;
 817: LD_ADDR_VAR 0 3
 821: PUSH
 822: LD_VAR 0 4
 826: ST_TO_ADDR
// break ;
 827: GO 831
// end ;
 829: GO 789
 831: POP
 832: POP
// end ;
 833: LD_VAR 0 3
 837: RET
// export function GoToAnotherTower ( un , b , x , y ) ; var i , filter , barracks , side ; begin
 838: LD_INT 0
 840: PPUSH
 841: PPUSH
 842: PPUSH
 843: PPUSH
 844: PPUSH
// if not un or not IsOk ( un ) then
 845: LD_VAR 0 1
 849: NOT
 850: PUSH
 851: LD_VAR 0 1
 855: PPUSH
 856: CALL_OW 302
 860: NOT
 861: OR
 862: IFFALSE 866
// exit ;
 864: GO 1173
// side := GetSide ( un ) ;
 866: LD_ADDR_VAR 0 9
 870: PUSH
 871: LD_VAR 0 1
 875: PPUSH
 876: CALL_OW 255
 880: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_not , [ f_tag , 7 ] ] , [ f_ok ] , [ f_empty ] ] ) diff b ;
 881: LD_ADDR_VAR 0 7
 885: PUSH
 886: LD_INT 22
 888: PUSH
 889: LD_VAR 0 9
 893: PUSH
 894: EMPTY
 895: LIST
 896: LIST
 897: PUSH
 898: LD_INT 30
 900: PUSH
 901: LD_INT 32
 903: PUSH
 904: EMPTY
 905: LIST
 906: LIST
 907: PUSH
 908: LD_INT 3
 910: PUSH
 911: LD_INT 120
 913: PUSH
 914: LD_INT 7
 916: PUSH
 917: EMPTY
 918: LIST
 919: LIST
 920: PUSH
 921: EMPTY
 922: LIST
 923: LIST
 924: PUSH
 925: LD_INT 50
 927: PUSH
 928: EMPTY
 929: LIST
 930: PUSH
 931: LD_INT 58
 933: PUSH
 934: EMPTY
 935: LIST
 936: PUSH
 937: EMPTY
 938: LIST
 939: LIST
 940: LIST
 941: LIST
 942: LIST
 943: PPUSH
 944: CALL_OW 69
 948: PUSH
 949: LD_VAR 0 2
 953: DIFF
 954: ST_TO_ADDR
// barracks := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_barracks ] ] ) ;
 955: LD_ADDR_VAR 0 8
 959: PUSH
 960: LD_INT 22
 962: PUSH
 963: LD_VAR 0 9
 967: PUSH
 968: EMPTY
 969: LIST
 970: LIST
 971: PUSH
 972: LD_INT 30
 974: PUSH
 975: LD_INT 5
 977: PUSH
 978: EMPTY
 979: LIST
 980: LIST
 981: PUSH
 982: EMPTY
 983: LIST
 984: LIST
 985: PPUSH
 986: CALL_OW 69
 990: ST_TO_ADDR
// if not filter then
 991: LD_VAR 0 7
 995: NOT
 996: IFFALSE 1086
// begin if barracks then
 998: LD_VAR 0 8
1002: IFFALSE 1065
// for i in barracks do
1004: LD_ADDR_VAR 0 6
1008: PUSH
1009: LD_VAR 0 8
1013: PUSH
1014: FOR_IN
1015: IFFALSE 1063
// begin if UnitsInside ( i ) < 6 and IsOk ( i ) then
1017: LD_VAR 0 6
1021: PPUSH
1022: CALL_OW 313
1026: PUSH
1027: LD_INT 6
1029: LESS
1030: PUSH
1031: LD_VAR 0 6
1035: PPUSH
1036: CALL_OW 302
1040: AND
1041: IFFALSE 1061
// begin ComEnterUnit ( un , i ) ;
1043: LD_VAR 0 1
1047: PPUSH
1048: LD_VAR 0 6
1052: PPUSH
1053: CALL_OW 120
// exit ;
1057: POP
1058: POP
1059: GO 1173
// end ; end ;
1061: GO 1014
1063: POP
1064: POP
// ComMoveXY ( un , x , y ) ;
1065: LD_VAR 0 1
1069: PPUSH
1070: LD_VAR 0 3
1074: PPUSH
1075: LD_VAR 0 4
1079: PPUSH
1080: CALL_OW 111
// end else
1084: GO 1173
// begin filter := SortByDistanceUnit ( un , filter , true , true ) ;
1086: LD_ADDR_VAR 0 7
1090: PUSH
1091: LD_VAR 0 1
1095: PPUSH
1096: LD_VAR 0 7
1100: PPUSH
1101: LD_INT 1
1103: PPUSH
1104: LD_INT 1
1106: PPUSH
1107: CALL 36900 0 4
1111: ST_TO_ADDR
// if filter then
1112: LD_VAR 0 7
1116: IFFALSE 1154
// begin SetTag ( filter [ 1 ] , 7 ) ;
1118: LD_VAR 0 7
1122: PUSH
1123: LD_INT 1
1125: ARRAY
1126: PPUSH
1127: LD_INT 7
1129: PPUSH
1130: CALL_OW 109
// ComEnterUnit ( un , filter [ 1 ] ) ;
1134: LD_VAR 0 1
1138: PPUSH
1139: LD_VAR 0 7
1143: PUSH
1144: LD_INT 1
1146: ARRAY
1147: PPUSH
1148: CALL_OW 120
// end else
1152: GO 1173
// ComMoveXY ( un , x , y ) ;
1154: LD_VAR 0 1
1158: PPUSH
1159: LD_VAR 0 3
1163: PPUSH
1164: LD_VAR 0 4
1168: PPUSH
1169: CALL_OW 111
// end ; end ;
1173: LD_VAR 0 5
1177: RET
// export function BaseNeedEnergy ( base ) ; var i , tmp ; begin
1178: LD_INT 0
1180: PPUSH
1181: PPUSH
1182: PPUSH
// if not base then
1183: LD_VAR 0 1
1187: NOT
1188: IFFALSE 1192
// exit ;
1190: GO 1250
// tmp := GetEnergy ( GetBase ( base ) ) ;
1192: LD_ADDR_VAR 0 4
1196: PUSH
1197: LD_VAR 0 1
1201: PPUSH
1202: CALL_OW 274
1206: PPUSH
1207: CALL_OW 278
1211: ST_TO_ADDR
// if tmp [ 1 ] > tmp [ 4 ] then
1212: LD_VAR 0 4
1216: PUSH
1217: LD_INT 1
1219: ARRAY
1220: PUSH
1221: LD_VAR 0 4
1225: PUSH
1226: LD_INT 4
1228: ARRAY
1229: GREATER
1230: IFFALSE 1242
// result := true else
1232: LD_ADDR_VAR 0 2
1236: PUSH
1237: LD_INT 1
1239: ST_TO_ADDR
1240: GO 1250
// result := false ;
1242: LD_ADDR_VAR 0 2
1246: PUSH
1247: LD_INT 0
1249: ST_TO_ADDR
// end ;
1250: LD_VAR 0 2
1254: RET
// export function FilterPeople ( side ) ; begin
1255: LD_INT 0
1257: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] ] ) ;
1258: LD_ADDR_VAR 0 2
1262: PUSH
1263: LD_INT 22
1265: PUSH
1266: LD_VAR 0 1
1270: PUSH
1271: EMPTY
1272: LIST
1273: LIST
1274: PUSH
1275: LD_INT 21
1277: PUSH
1278: LD_INT 1
1280: PUSH
1281: EMPTY
1282: LIST
1283: LIST
1284: PUSH
1285: EMPTY
1286: LIST
1287: LIST
1288: PPUSH
1289: CALL_OW 69
1293: ST_TO_ADDR
// end ;
1294: LD_VAR 0 2
1298: RET
// export function FilterDrivers ( side ) ; begin
1299: LD_INT 0
1301: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_outside ] ] ] ) ;
1302: LD_ADDR_VAR 0 2
1306: PUSH
1307: LD_INT 22
1309: PUSH
1310: LD_VAR 0 1
1314: PUSH
1315: EMPTY
1316: LIST
1317: LIST
1318: PUSH
1319: LD_INT 3
1321: PUSH
1322: LD_INT 56
1324: PUSH
1325: EMPTY
1326: LIST
1327: PUSH
1328: EMPTY
1329: LIST
1330: LIST
1331: PUSH
1332: EMPTY
1333: LIST
1334: LIST
1335: PPUSH
1336: CALL_OW 69
1340: ST_TO_ADDR
// end ;
1341: LD_VAR 0 2
1345: RET
// export function FilterPeopleArea ( side , area ) ; begin
1346: LD_INT 0
1348: PPUSH
// result := FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ;
1349: LD_ADDR_VAR 0 3
1353: PUSH
1354: LD_VAR 0 2
1358: PPUSH
1359: LD_INT 22
1361: PUSH
1362: LD_INT 1
1364: PUSH
1365: EMPTY
1366: LIST
1367: LIST
1368: PUSH
1369: LD_INT 21
1371: PUSH
1372: LD_INT 1
1374: PUSH
1375: EMPTY
1376: LIST
1377: LIST
1378: PUSH
1379: EMPTY
1380: LIST
1381: LIST
1382: PPUSH
1383: CALL_OW 70
1387: ST_TO_ADDR
// end ;
1388: LD_VAR 0 3
1392: RET
// export function FilterDriversArea ( side , area ) ; var i , tmp ; begin
1393: LD_INT 0
1395: PPUSH
1396: PPUSH
1397: PPUSH
// tmp := FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) ;
1398: LD_ADDR_VAR 0 5
1402: PUSH
1403: LD_VAR 0 2
1407: PPUSH
1408: LD_INT 22
1410: PUSH
1411: LD_INT 1
1413: PUSH
1414: EMPTY
1415: LIST
1416: LIST
1417: PUSH
1418: LD_INT 21
1420: PUSH
1421: LD_INT 2
1423: PUSH
1424: EMPTY
1425: LIST
1426: LIST
1427: PUSH
1428: LD_INT 3
1430: PUSH
1431: LD_INT 58
1433: PUSH
1434: EMPTY
1435: LIST
1436: PUSH
1437: EMPTY
1438: LIST
1439: LIST
1440: PUSH
1441: EMPTY
1442: LIST
1443: LIST
1444: LIST
1445: PPUSH
1446: CALL_OW 70
1450: ST_TO_ADDR
// result := [ ] ;
1451: LD_ADDR_VAR 0 3
1455: PUSH
1456: EMPTY
1457: ST_TO_ADDR
// if not tmp then
1458: LD_VAR 0 5
1462: NOT
1463: IFFALSE 1467
// exit ;
1465: GO 1519
// for i in tmp do
1467: LD_ADDR_VAR 0 4
1471: PUSH
1472: LD_VAR 0 5
1476: PUSH
1477: FOR_IN
1478: IFFALSE 1503
// result := result union IsDrivenBy ( i ) ;
1480: LD_ADDR_VAR 0 3
1484: PUSH
1485: LD_VAR 0 3
1489: PUSH
1490: LD_VAR 0 4
1494: PPUSH
1495: CALL_OW 311
1499: UNION
1500: ST_TO_ADDR
1501: GO 1477
1503: POP
1504: POP
// result := result diff 0 ;
1505: LD_ADDR_VAR 0 3
1509: PUSH
1510: LD_VAR 0 3
1514: PUSH
1515: LD_INT 0
1517: DIFF
1518: ST_TO_ADDR
// end ;
1519: LD_VAR 0 3
1523: RET
// export function FilterBuildings ( side ) ; begin
1524: LD_INT 0
1526: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
1527: LD_ADDR_VAR 0 2
1531: PUSH
1532: LD_INT 22
1534: PUSH
1535: LD_VAR 0 1
1539: PUSH
1540: EMPTY
1541: LIST
1542: LIST
1543: PUSH
1544: LD_INT 21
1546: PUSH
1547: LD_INT 3
1549: PUSH
1550: EMPTY
1551: LIST
1552: LIST
1553: PUSH
1554: EMPTY
1555: LIST
1556: LIST
1557: PPUSH
1558: CALL_OW 69
1562: ST_TO_ADDR
// end ;
1563: LD_VAR 0 2
1567: RET
// export function CreateNature ; var i , animal , nat_area ; begin
1568: LD_INT 0
1570: PPUSH
1571: PPUSH
1572: PPUSH
1573: PPUSH
// uc_side = 0 ;
1574: LD_ADDR_OWVAR 20
1578: PUSH
1579: LD_INT 0
1581: ST_TO_ADDR
// uc_nation = 0 ;
1582: LD_ADDR_OWVAR 21
1586: PUSH
1587: LD_INT 0
1589: ST_TO_ADDR
// nat_area := wildArea ;
1590: LD_ADDR_VAR 0 4
1594: PUSH
1595: LD_INT 3
1597: ST_TO_ADDR
// InitHc ;
1598: CALL_OW 19
// for i = 1 to 4 do
1602: LD_ADDR_VAR 0 2
1606: PUSH
1607: DOUBLE
1608: LD_INT 1
1610: DEC
1611: ST_TO_ADDR
1612: LD_INT 4
1614: PUSH
1615: FOR_TO
1616: IFFALSE 1671
// begin hc_class = 18 ;
1618: LD_ADDR_OWVAR 28
1622: PUSH
1623: LD_INT 18
1625: ST_TO_ADDR
// hc_gallery =  ;
1626: LD_ADDR_OWVAR 33
1630: PUSH
1631: LD_STRING 
1633: ST_TO_ADDR
// hc_face_number = 1 ;
1634: LD_ADDR_OWVAR 34
1638: PUSH
1639: LD_INT 1
1641: ST_TO_ADDR
// animal := CreateHuman ;
1642: LD_ADDR_VAR 0 3
1646: PUSH
1647: CALL_OW 44
1651: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
1652: LD_VAR 0 3
1656: PPUSH
1657: LD_VAR 0 4
1661: PPUSH
1662: LD_INT 0
1664: PPUSH
1665: CALL_OW 49
// end ;
1669: GO 1615
1671: POP
1672: POP
// for i = 1 to 6 do
1673: LD_ADDR_VAR 0 2
1677: PUSH
1678: DOUBLE
1679: LD_INT 1
1681: DEC
1682: ST_TO_ADDR
1683: LD_INT 6
1685: PUSH
1686: FOR_TO
1687: IFFALSE 1758
// begin hc_class = class_tiger ;
1689: LD_ADDR_OWVAR 28
1693: PUSH
1694: LD_INT 14
1696: ST_TO_ADDR
// hc_gallery =  ;
1697: LD_ADDR_OWVAR 33
1701: PUSH
1702: LD_STRING 
1704: ST_TO_ADDR
// hc_agressivity = Rand ( 0 , 10 ) ;
1705: LD_ADDR_OWVAR 35
1709: PUSH
1710: LD_INT 0
1712: PPUSH
1713: LD_INT 10
1715: PPUSH
1716: CALL_OW 12
1720: ST_TO_ADDR
// hc_face_number = 3 ;
1721: LD_ADDR_OWVAR 34
1725: PUSH
1726: LD_INT 3
1728: ST_TO_ADDR
// animal := CreateHuman ;
1729: LD_ADDR_VAR 0 3
1733: PUSH
1734: CALL_OW 44
1738: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
1739: LD_VAR 0 3
1743: PPUSH
1744: LD_VAR 0 4
1748: PPUSH
1749: LD_INT 0
1751: PPUSH
1752: CALL_OW 49
// end ;
1756: GO 1686
1758: POP
1759: POP
// for i = 1 to 2 do
1760: LD_ADDR_VAR 0 2
1764: PUSH
1765: DOUBLE
1766: LD_INT 1
1768: DEC
1769: ST_TO_ADDR
1770: LD_INT 2
1772: PUSH
1773: FOR_TO
1774: IFFALSE 1837
// begin hc_class = 21 ;
1776: LD_ADDR_OWVAR 28
1780: PUSH
1781: LD_INT 21
1783: ST_TO_ADDR
// hc_gallery =  ;
1784: LD_ADDR_OWVAR 33
1788: PUSH
1789: LD_STRING 
1791: ST_TO_ADDR
// hc_agressivity = 0 ;
1792: LD_ADDR_OWVAR 35
1796: PUSH
1797: LD_INT 0
1799: ST_TO_ADDR
// hc_face_number = 5 ;
1800: LD_ADDR_OWVAR 34
1804: PUSH
1805: LD_INT 5
1807: ST_TO_ADDR
// animal := CreateHuman ;
1808: LD_ADDR_VAR 0 3
1812: PUSH
1813: CALL_OW 44
1817: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
1818: LD_VAR 0 3
1822: PPUSH
1823: LD_VAR 0 4
1827: PPUSH
1828: LD_INT 0
1830: PPUSH
1831: CALL_OW 49
// end ;
1835: GO 1773
1837: POP
1838: POP
// for i = 1 to 6 do
1839: LD_ADDR_VAR 0 2
1843: PUSH
1844: DOUBLE
1845: LD_INT 1
1847: DEC
1848: ST_TO_ADDR
1849: LD_INT 6
1851: PUSH
1852: FOR_TO
1853: IFFALSE 1908
// begin hc_class = 13 ;
1855: LD_ADDR_OWVAR 28
1859: PUSH
1860: LD_INT 13
1862: ST_TO_ADDR
// hc_gallery =  ;
1863: LD_ADDR_OWVAR 33
1867: PUSH
1868: LD_STRING 
1870: ST_TO_ADDR
// hc_face_number = 4 ;
1871: LD_ADDR_OWVAR 34
1875: PUSH
1876: LD_INT 4
1878: ST_TO_ADDR
// animal := CreateHuman ;
1879: LD_ADDR_VAR 0 3
1883: PUSH
1884: CALL_OW 44
1888: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
1889: LD_VAR 0 3
1893: PPUSH
1894: LD_VAR 0 4
1898: PPUSH
1899: LD_INT 0
1901: PPUSH
1902: CALL_OW 49
// end ;
1906: GO 1852
1908: POP
1909: POP
// for i = 1 to 2 do
1910: LD_ADDR_VAR 0 2
1914: PUSH
1915: DOUBLE
1916: LD_INT 1
1918: DEC
1919: ST_TO_ADDR
1920: LD_INT 2
1922: PUSH
1923: FOR_TO
1924: IFFALSE 1983
// begin hc_class = 20 ;
1926: LD_ADDR_OWVAR 28
1930: PUSH
1931: LD_INT 20
1933: ST_TO_ADDR
// hc_gallery =  ;
1934: LD_ADDR_OWVAR 33
1938: PUSH
1939: LD_STRING 
1941: ST_TO_ADDR
// hc_face_number = 2 ;
1942: LD_ADDR_OWVAR 34
1946: PUSH
1947: LD_INT 2
1949: ST_TO_ADDR
// animal := CreateHuman ;
1950: LD_ADDR_VAR 0 3
1954: PUSH
1955: CALL_OW 44
1959: ST_TO_ADDR
// PlaceUnitXYR ( animal , 101 , 37 , 3 , false ) ;
1960: LD_VAR 0 3
1964: PPUSH
1965: LD_INT 101
1967: PPUSH
1968: LD_INT 37
1970: PPUSH
1971: LD_INT 3
1973: PPUSH
1974: LD_INT 0
1976: PPUSH
1977: CALL_OW 50
// end ;
1981: GO 1923
1983: POP
1984: POP
// for i = 1 to 1 do
1985: LD_ADDR_VAR 0 2
1989: PUSH
1990: DOUBLE
1991: LD_INT 1
1993: DEC
1994: ST_TO_ADDR
1995: LD_INT 1
1997: PUSH
1998: FOR_TO
1999: IFFALSE 2046
// begin vc_chassis := 31 ;
2001: LD_ADDR_OWVAR 37
2005: PUSH
2006: LD_INT 31
2008: ST_TO_ADDR
// vc_control := control_rider ;
2009: LD_ADDR_OWVAR 38
2013: PUSH
2014: LD_INT 4
2016: ST_TO_ADDR
// animal := CreateVehicle ;
2017: LD_ADDR_VAR 0 3
2021: PUSH
2022: CALL_OW 45
2026: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
2027: LD_VAR 0 3
2031: PPUSH
2032: LD_VAR 0 4
2036: PPUSH
2037: LD_INT 0
2039: PPUSH
2040: CALL_OW 49
// end ;
2044: GO 1998
2046: POP
2047: POP
// end ;
2048: LD_VAR 0 1
2052: RET
// export function NearbyTowerHasEnergy ( unit ) ; var i , tmp , energy ; begin
2053: LD_INT 0
2055: PPUSH
2056: PPUSH
2057: PPUSH
2058: PPUSH
// result := [ ] ;
2059: LD_ADDR_VAR 0 2
2063: PUSH
2064: EMPTY
2065: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( unit ) ] , [ f_dist , unit , 15 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) ;
2066: LD_ADDR_VAR 0 4
2070: PUSH
2071: LD_INT 81
2073: PUSH
2074: LD_VAR 0 1
2078: PPUSH
2079: CALL_OW 255
2083: PUSH
2084: EMPTY
2085: LIST
2086: LIST
2087: PUSH
2088: LD_INT 91
2090: PUSH
2091: LD_VAR 0 1
2095: PUSH
2096: LD_INT 15
2098: PUSH
2099: EMPTY
2100: LIST
2101: LIST
2102: LIST
2103: PUSH
2104: LD_INT 2
2106: PUSH
2107: LD_INT 30
2109: PUSH
2110: LD_INT 32
2112: PUSH
2113: EMPTY
2114: LIST
2115: LIST
2116: PUSH
2117: LD_INT 30
2119: PUSH
2120: LD_INT 33
2122: PUSH
2123: EMPTY
2124: LIST
2125: LIST
2126: PUSH
2127: EMPTY
2128: LIST
2129: LIST
2130: LIST
2131: PUSH
2132: EMPTY
2133: LIST
2134: LIST
2135: LIST
2136: PPUSH
2137: CALL_OW 69
2141: ST_TO_ADDR
// if not tmp then
2142: LD_VAR 0 4
2146: NOT
2147: IFFALSE 2151
// exit ;
2149: GO 2220
// for i in tmp do
2151: LD_ADDR_VAR 0 3
2155: PUSH
2156: LD_VAR 0 4
2160: PUSH
2161: FOR_IN
2162: IFFALSE 2218
// begin energy := GetEnergy ( GetBase ( i ) ) ;
2164: LD_ADDR_VAR 0 5
2168: PUSH
2169: LD_VAR 0 3
2173: PPUSH
2174: CALL_OW 274
2178: PPUSH
2179: CALL_OW 278
2183: ST_TO_ADDR
// if energy [ 4 ] > energy [ 1 ] then
2184: LD_VAR 0 5
2188: PUSH
2189: LD_INT 4
2191: ARRAY
2192: PUSH
2193: LD_VAR 0 5
2197: PUSH
2198: LD_INT 1
2200: ARRAY
2201: GREATER
2202: IFFALSE 2216
// begin result := i ;
2204: LD_ADDR_VAR 0 2
2208: PUSH
2209: LD_VAR 0 3
2213: ST_TO_ADDR
// break ;
2214: GO 2218
// end ; end ;
2216: GO 2161
2218: POP
2219: POP
// end ;
2220: LD_VAR 0 2
2224: RET
// export function GetTurretWeaponBase ( tower ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
2225: LD_INT 0
2227: PPUSH
2228: PPUSH
2229: PPUSH
2230: PPUSH
2231: PPUSH
2232: PPUSH
2233: PPUSH
2234: PPUSH
2235: PPUSH
2236: PPUSH
2237: PPUSH
2238: PPUSH
2239: PPUSH
2240: PPUSH
2241: PPUSH
2242: PPUSH
// result := false ;
2243: LD_ADDR_VAR 0 2
2247: PUSH
2248: LD_INT 0
2250: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
2251: LD_VAR 0 1
2255: NOT
2256: PUSH
2257: LD_VAR 0 1
2261: PPUSH
2262: CALL_OW 266
2266: PUSH
2267: LD_INT 32
2269: PUSH
2270: LD_INT 33
2272: PUSH
2273: EMPTY
2274: LIST
2275: LIST
2276: IN
2277: NOT
2278: OR
2279: IFFALSE 2283
// exit ;
2281: GO 3443
// nat := GetNation ( tower ) ;
2283: LD_ADDR_VAR 0 11
2287: PUSH
2288: LD_VAR 0 1
2292: PPUSH
2293: CALL_OW 248
2297: ST_TO_ADDR
// side := GetSide ( tower ) ;
2298: LD_ADDR_VAR 0 15
2302: PUSH
2303: LD_VAR 0 1
2307: PPUSH
2308: CALL_OW 255
2312: ST_TO_ADDR
// x := GetX ( tower ) ;
2313: LD_ADDR_VAR 0 9
2317: PUSH
2318: LD_VAR 0 1
2322: PPUSH
2323: CALL_OW 250
2327: ST_TO_ADDR
// y := GetY ( tower ) ;
2328: LD_ADDR_VAR 0 10
2332: PUSH
2333: LD_VAR 0 1
2337: PPUSH
2338: CALL_OW 251
2342: ST_TO_ADDR
// if not x or not y then
2343: LD_VAR 0 9
2347: NOT
2348: PUSH
2349: LD_VAR 0 10
2353: NOT
2354: OR
2355: IFFALSE 2359
// exit ;
2357: GO 3443
// weapon := 0 ;
2359: LD_ADDR_VAR 0 17
2363: PUSH
2364: LD_INT 0
2366: ST_TO_ADDR
// fac_list := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun ] ;
2367: LD_ADDR_VAR 0 16
2371: PUSH
2372: LD_INT 42
2374: PUSH
2375: LD_INT 43
2377: PUSH
2378: LD_INT 44
2380: PUSH
2381: LD_INT 46
2383: PUSH
2384: EMPTY
2385: LIST
2386: LIST
2387: LIST
2388: LIST
2389: ST_TO_ADDR
// if not fac_list then
2390: LD_VAR 0 16
2394: NOT
2395: IFFALSE 2399
// exit ;
2397: GO 3443
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
2399: LD_ADDR_VAR 0 4
2403: PUSH
2404: LD_INT 4
2406: PUSH
2407: LD_INT 5
2409: PUSH
2410: LD_INT 9
2412: PUSH
2413: LD_INT 10
2415: PUSH
2416: LD_INT 6
2418: PUSH
2419: LD_INT 7
2421: PUSH
2422: LD_INT 11
2424: PUSH
2425: EMPTY
2426: LIST
2427: LIST
2428: LIST
2429: LIST
2430: LIST
2431: LIST
2432: LIST
2433: PUSH
2434: LD_INT 27
2436: PUSH
2437: LD_INT 28
2439: PUSH
2440: LD_INT 26
2442: PUSH
2443: LD_INT 30
2445: PUSH
2446: EMPTY
2447: LIST
2448: LIST
2449: LIST
2450: LIST
2451: PUSH
2452: LD_INT 43
2454: PUSH
2455: LD_INT 44
2457: PUSH
2458: LD_INT 46
2460: PUSH
2461: LD_INT 45
2463: PUSH
2464: LD_INT 47
2466: PUSH
2467: LD_INT 49
2469: PUSH
2470: EMPTY
2471: LIST
2472: LIST
2473: LIST
2474: LIST
2475: LIST
2476: LIST
2477: PUSH
2478: EMPTY
2479: LIST
2480: LIST
2481: LIST
2482: PUSH
2483: LD_VAR 0 11
2487: ARRAY
2488: ST_TO_ADDR
// for i in list do
2489: LD_ADDR_VAR 0 7
2493: PUSH
2494: LD_VAR 0 4
2498: PUSH
2499: FOR_IN
2500: IFFALSE 2533
// if not i in fac_list then
2502: LD_VAR 0 7
2506: PUSH
2507: LD_VAR 0 16
2511: IN
2512: NOT
2513: IFFALSE 2531
// list := list diff i ;
2515: LD_ADDR_VAR 0 4
2519: PUSH
2520: LD_VAR 0 4
2524: PUSH
2525: LD_VAR 0 7
2529: DIFF
2530: ST_TO_ADDR
2531: GO 2499
2533: POP
2534: POP
// if not list then
2535: LD_VAR 0 4
2539: NOT
2540: IFFALSE 2544
// exit ;
2542: GO 3443
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
2544: LD_VAR 0 11
2548: PUSH
2549: LD_INT 3
2551: EQUAL
2552: PUSH
2553: LD_INT 49
2555: PUSH
2556: LD_VAR 0 4
2560: IN
2561: AND
2562: PUSH
2563: LD_INT 31
2565: PPUSH
2566: LD_VAR 0 15
2570: PPUSH
2571: CALL_OW 321
2575: PUSH
2576: LD_INT 2
2578: EQUAL
2579: AND
2580: IFFALSE 2640
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
2582: LD_INT 22
2584: PUSH
2585: LD_VAR 0 15
2589: PUSH
2590: EMPTY
2591: LIST
2592: LIST
2593: PUSH
2594: LD_INT 35
2596: PUSH
2597: LD_INT 49
2599: PUSH
2600: EMPTY
2601: LIST
2602: LIST
2603: PUSH
2604: LD_INT 91
2606: PUSH
2607: LD_VAR 0 1
2611: PUSH
2612: LD_INT 10
2614: PUSH
2615: EMPTY
2616: LIST
2617: LIST
2618: LIST
2619: PUSH
2620: EMPTY
2621: LIST
2622: LIST
2623: LIST
2624: PPUSH
2625: CALL_OW 69
2629: NOT
2630: IFFALSE 2640
// weapon := ru_time_lapser ;
2632: LD_ADDR_VAR 0 17
2636: PUSH
2637: LD_INT 49
2639: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
2640: LD_VAR 0 11
2644: PUSH
2645: LD_INT 1
2647: PUSH
2648: LD_INT 2
2650: PUSH
2651: EMPTY
2652: LIST
2653: LIST
2654: IN
2655: PUSH
2656: LD_INT 11
2658: PUSH
2659: LD_VAR 0 4
2663: IN
2664: PUSH
2665: LD_INT 30
2667: PUSH
2668: LD_VAR 0 4
2672: IN
2673: OR
2674: AND
2675: PUSH
2676: LD_INT 6
2678: PPUSH
2679: LD_VAR 0 15
2683: PPUSH
2684: CALL_OW 321
2688: PUSH
2689: LD_INT 2
2691: EQUAL
2692: AND
2693: IFFALSE 2858
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
2695: LD_INT 22
2697: PUSH
2698: LD_VAR 0 15
2702: PUSH
2703: EMPTY
2704: LIST
2705: LIST
2706: PUSH
2707: LD_INT 2
2709: PUSH
2710: LD_INT 35
2712: PUSH
2713: LD_INT 11
2715: PUSH
2716: EMPTY
2717: LIST
2718: LIST
2719: PUSH
2720: LD_INT 35
2722: PUSH
2723: LD_INT 30
2725: PUSH
2726: EMPTY
2727: LIST
2728: LIST
2729: PUSH
2730: EMPTY
2731: LIST
2732: LIST
2733: LIST
2734: PUSH
2735: LD_INT 91
2737: PUSH
2738: LD_VAR 0 1
2742: PUSH
2743: LD_INT 18
2745: PUSH
2746: EMPTY
2747: LIST
2748: LIST
2749: LIST
2750: PUSH
2751: EMPTY
2752: LIST
2753: LIST
2754: LIST
2755: PPUSH
2756: CALL_OW 69
2760: NOT
2761: PUSH
2762: LD_INT 22
2764: PUSH
2765: LD_VAR 0 15
2769: PUSH
2770: EMPTY
2771: LIST
2772: LIST
2773: PUSH
2774: LD_INT 2
2776: PUSH
2777: LD_INT 30
2779: PUSH
2780: LD_INT 32
2782: PUSH
2783: EMPTY
2784: LIST
2785: LIST
2786: PUSH
2787: LD_INT 30
2789: PUSH
2790: LD_INT 33
2792: PUSH
2793: EMPTY
2794: LIST
2795: LIST
2796: PUSH
2797: EMPTY
2798: LIST
2799: LIST
2800: LIST
2801: PUSH
2802: LD_INT 91
2804: PUSH
2805: LD_VAR 0 1
2809: PUSH
2810: LD_INT 12
2812: PUSH
2813: EMPTY
2814: LIST
2815: LIST
2816: LIST
2817: PUSH
2818: EMPTY
2819: LIST
2820: LIST
2821: LIST
2822: PUSH
2823: EMPTY
2824: LIST
2825: PPUSH
2826: CALL_OW 69
2830: PUSH
2831: LD_INT 2
2833: GREATER
2834: AND
2835: IFFALSE 2858
// weapon := [ us_radar , ar_radar ] [ nat ] ;
2837: LD_ADDR_VAR 0 17
2841: PUSH
2842: LD_INT 11
2844: PUSH
2845: LD_INT 30
2847: PUSH
2848: EMPTY
2849: LIST
2850: LIST
2851: PUSH
2852: LD_VAR 0 11
2856: ARRAY
2857: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
2858: LD_VAR 0 17
2862: NOT
2863: PUSH
2864: LD_INT 40
2866: PPUSH
2867: LD_VAR 0 15
2871: PPUSH
2872: CALL_OW 321
2876: PUSH
2877: LD_INT 2
2879: EQUAL
2880: AND
2881: PUSH
2882: LD_INT 7
2884: PUSH
2885: LD_VAR 0 4
2889: IN
2890: PUSH
2891: LD_INT 28
2893: PUSH
2894: LD_VAR 0 4
2898: IN
2899: OR
2900: PUSH
2901: LD_INT 45
2903: PUSH
2904: LD_VAR 0 4
2908: IN
2909: OR
2910: AND
2911: IFFALSE 3165
// begin hex := GetHexInfo ( x , y ) ;
2913: LD_ADDR_VAR 0 3
2917: PUSH
2918: LD_VAR 0 9
2922: PPUSH
2923: LD_VAR 0 10
2927: PPUSH
2928: CALL_OW 546
2932: ST_TO_ADDR
// if hex [ 1 ] then
2933: LD_VAR 0 3
2937: PUSH
2938: LD_INT 1
2940: ARRAY
2941: IFFALSE 2945
// exit ;
2943: GO 3443
// height := hex [ 2 ] ;
2945: LD_ADDR_VAR 0 14
2949: PUSH
2950: LD_VAR 0 3
2954: PUSH
2955: LD_INT 2
2957: ARRAY
2958: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
2959: LD_ADDR_VAR 0 13
2963: PUSH
2964: LD_INT 0
2966: PUSH
2967: LD_INT 2
2969: PUSH
2970: LD_INT 3
2972: PUSH
2973: LD_INT 5
2975: PUSH
2976: EMPTY
2977: LIST
2978: LIST
2979: LIST
2980: LIST
2981: ST_TO_ADDR
// for i in tmp do
2982: LD_ADDR_VAR 0 7
2986: PUSH
2987: LD_VAR 0 13
2991: PUSH
2992: FOR_IN
2993: IFFALSE 3163
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
2995: LD_ADDR_VAR 0 8
2999: PUSH
3000: LD_VAR 0 9
3004: PPUSH
3005: LD_VAR 0 7
3009: PPUSH
3010: LD_INT 5
3012: PPUSH
3013: CALL_OW 272
3017: PUSH
3018: LD_VAR 0 10
3022: PPUSH
3023: LD_VAR 0 7
3027: PPUSH
3028: LD_INT 5
3030: PPUSH
3031: CALL_OW 273
3035: PUSH
3036: EMPTY
3037: LIST
3038: LIST
3039: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
3040: LD_VAR 0 8
3044: PUSH
3045: LD_INT 1
3047: ARRAY
3048: PPUSH
3049: LD_VAR 0 8
3053: PUSH
3054: LD_INT 2
3056: ARRAY
3057: PPUSH
3058: CALL_OW 488
3062: IFFALSE 3161
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
3064: LD_ADDR_VAR 0 3
3068: PUSH
3069: LD_VAR 0 8
3073: PUSH
3074: LD_INT 1
3076: ARRAY
3077: PPUSH
3078: LD_VAR 0 8
3082: PUSH
3083: LD_INT 2
3085: ARRAY
3086: PPUSH
3087: CALL_OW 546
3091: ST_TO_ADDR
// if hex [ 1 ] then
3092: LD_VAR 0 3
3096: PUSH
3097: LD_INT 1
3099: ARRAY
3100: IFFALSE 3104
// continue ;
3102: GO 2992
// h := hex [ 2 ] ;
3104: LD_ADDR_VAR 0 12
3108: PUSH
3109: LD_VAR 0 3
3113: PUSH
3114: LD_INT 2
3116: ARRAY
3117: ST_TO_ADDR
// if h + 7 < height then
3118: LD_VAR 0 12
3122: PUSH
3123: LD_INT 7
3125: PLUS
3126: PUSH
3127: LD_VAR 0 14
3131: LESS
3132: IFFALSE 3161
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
3134: LD_ADDR_VAR 0 17
3138: PUSH
3139: LD_INT 7
3141: PUSH
3142: LD_INT 28
3144: PUSH
3145: LD_INT 45
3147: PUSH
3148: EMPTY
3149: LIST
3150: LIST
3151: LIST
3152: PUSH
3153: LD_VAR 0 11
3157: ARRAY
3158: ST_TO_ADDR
// break ;
3159: GO 3163
// end ; end ; end ;
3161: GO 2992
3163: POP
3164: POP
// end ; if not weapon then
3165: LD_VAR 0 17
3169: NOT
3170: IFFALSE 3325
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
3172: LD_ADDR_VAR 0 4
3176: PUSH
3177: LD_VAR 0 4
3181: PUSH
3182: LD_INT 11
3184: PUSH
3185: LD_INT 30
3187: PUSH
3188: LD_INT 49
3190: PUSH
3191: EMPTY
3192: LIST
3193: LIST
3194: LIST
3195: DIFF
3196: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , tower , 6 ] , [ f_not , [ f_bweapon , 0 ] ] ] ) ;
3197: LD_ADDR_VAR 0 13
3201: PUSH
3202: LD_INT 22
3204: PUSH
3205: LD_VAR 0 15
3209: PUSH
3210: EMPTY
3211: LIST
3212: LIST
3213: PUSH
3214: LD_INT 91
3216: PUSH
3217: LD_VAR 0 1
3221: PUSH
3222: LD_INT 6
3224: PUSH
3225: EMPTY
3226: LIST
3227: LIST
3228: LIST
3229: PUSH
3230: LD_INT 3
3232: PUSH
3233: LD_INT 35
3235: PUSH
3236: LD_INT 0
3238: PUSH
3239: EMPTY
3240: LIST
3241: LIST
3242: PUSH
3243: EMPTY
3244: LIST
3245: LIST
3246: PUSH
3247: EMPTY
3248: LIST
3249: LIST
3250: LIST
3251: PPUSH
3252: CALL_OW 69
3256: ST_TO_ADDR
// for i in tmp do
3257: LD_ADDR_VAR 0 7
3261: PUSH
3262: LD_VAR 0 13
3266: PUSH
3267: FOR_IN
3268: IFFALSE 3293
// list := list diff GetBWeapon ( i ) ;
3270: LD_ADDR_VAR 0 4
3274: PUSH
3275: LD_VAR 0 4
3279: PUSH
3280: LD_VAR 0 7
3284: PPUSH
3285: CALL_OW 269
3289: DIFF
3290: ST_TO_ADDR
3291: GO 3267
3293: POP
3294: POP
// if list then
3295: LD_VAR 0 4
3299: IFFALSE 3325
// weapon := list [ rand ( 1 , list ) ] ;
3301: LD_ADDR_VAR 0 17
3305: PUSH
3306: LD_VAR 0 4
3310: PUSH
3311: LD_INT 1
3313: PPUSH
3314: LD_VAR 0 4
3318: PPUSH
3319: CALL_OW 12
3323: ARRAY
3324: ST_TO_ADDR
// end ; if weapon then
3325: LD_VAR 0 17
3329: IFFALSE 3443
// begin tmp := CostOfWeapon ( weapon ) ;
3331: LD_ADDR_VAR 0 13
3335: PUSH
3336: LD_VAR 0 17
3340: PPUSH
3341: CALL_OW 451
3345: ST_TO_ADDR
// j := GetBase ( tower ) ;
3346: LD_ADDR_VAR 0 8
3350: PUSH
3351: LD_VAR 0 1
3355: PPUSH
3356: CALL_OW 274
3360: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
3361: LD_VAR 0 8
3365: PPUSH
3366: LD_INT 1
3368: PPUSH
3369: CALL_OW 275
3373: PUSH
3374: LD_VAR 0 13
3378: PUSH
3379: LD_INT 1
3381: ARRAY
3382: GREATEREQUAL
3383: PUSH
3384: LD_VAR 0 8
3388: PPUSH
3389: LD_INT 2
3391: PPUSH
3392: CALL_OW 275
3396: PUSH
3397: LD_VAR 0 13
3401: PUSH
3402: LD_INT 2
3404: ARRAY
3405: GREATEREQUAL
3406: AND
3407: PUSH
3408: LD_VAR 0 8
3412: PPUSH
3413: LD_INT 3
3415: PPUSH
3416: CALL_OW 275
3420: PUSH
3421: LD_VAR 0 13
3425: PUSH
3426: LD_INT 3
3428: ARRAY
3429: GREATEREQUAL
3430: AND
3431: IFFALSE 3443
// result := weapon ;
3433: LD_ADDR_VAR 0 2
3437: PUSH
3438: LD_VAR 0 17
3442: ST_TO_ADDR
// end ; end ; end_of_file
3443: LD_VAR 0 2
3447: RET
// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Khatam , Kikuchi , Harisson ; export function PrepareAmericans ; var i , team , others , veh , m ; begin
3448: LD_INT 0
3450: PPUSH
3451: PPUSH
3452: PPUSH
3453: PPUSH
3454: PPUSH
3455: PPUSH
// uc_side := 1 ;
3456: LD_ADDR_OWVAR 20
3460: PUSH
3461: LD_INT 1
3463: ST_TO_ADDR
// uc_nation := 1 ;
3464: LD_ADDR_OWVAR 21
3468: PUSH
3469: LD_INT 1
3471: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , mission_prev_prefix ) ;
3472: LD_ADDR_EXP 9
3476: PUSH
3477: LD_STRING JMM
3479: PPUSH
3480: LD_EXP 1
3484: NOT
3485: PPUSH
3486: LD_EXP 2
3490: PPUSH
3491: CALL 31326 0 3
3495: ST_TO_ADDR
// team := [ JMM ] ;
3496: LD_ADDR_VAR 0 3
3500: PUSH
3501: LD_EXP 9
3505: PUSH
3506: EMPTY
3507: LIST
3508: ST_TO_ADDR
// if LoadVariable ( BrownIn07 , debug ) then
3509: LD_STRING BrownIn07
3511: PPUSH
3512: LD_EXP 1
3516: PPUSH
3517: CALL_OW 30
3521: IFFALSE 3547
// Brown := PrepareUnit ( Brown , ( not debug ) , mission_prev_prefix ) ;
3523: LD_ADDR_EXP 10
3527: PUSH
3528: LD_STRING Brown
3530: PPUSH
3531: LD_EXP 1
3535: NOT
3536: PPUSH
3537: LD_EXP 2
3541: PPUSH
3542: CALL 31326 0 3
3546: ST_TO_ADDR
// if Brown then
3547: LD_EXP 10
3551: IFFALSE 3569
// team := team ^ Brown ;
3553: LD_ADDR_VAR 0 3
3557: PUSH
3558: LD_VAR 0 3
3562: PUSH
3563: LD_EXP 10
3567: ADD
3568: ST_TO_ADDR
// if LoadVariable ( DonaldsonIn07 , debug ) then
3569: LD_STRING DonaldsonIn07
3571: PPUSH
3572: LD_EXP 1
3576: PPUSH
3577: CALL_OW 30
3581: IFFALSE 3607
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , mission_prev_prefix ) ;
3583: LD_ADDR_EXP 11
3587: PUSH
3588: LD_STRING Donaldson
3590: PPUSH
3591: LD_EXP 1
3595: NOT
3596: PPUSH
3597: LD_EXP 2
3601: PPUSH
3602: CALL 31326 0 3
3606: ST_TO_ADDR
// if Donaldson then
3607: LD_EXP 11
3611: IFFALSE 3629
// team := team ^ Donaldson ;
3613: LD_ADDR_VAR 0 3
3617: PUSH
3618: LD_VAR 0 3
3622: PUSH
3623: LD_EXP 11
3627: ADD
3628: ST_TO_ADDR
// if LoadVariable ( BobbyIn07 , debug ) then
3629: LD_STRING BobbyIn07
3631: PPUSH
3632: LD_EXP 1
3636: PPUSH
3637: CALL_OW 30
3641: IFFALSE 3667
// Bobby := PrepareUnit ( Bobby , ( not debug ) , mission_prev_prefix ) ;
3643: LD_ADDR_EXP 12
3647: PUSH
3648: LD_STRING Bobby
3650: PPUSH
3651: LD_EXP 1
3655: NOT
3656: PPUSH
3657: LD_EXP 2
3661: PPUSH
3662: CALL 31326 0 3
3666: ST_TO_ADDR
// if Bobby then
3667: LD_EXP 12
3671: IFFALSE 3689
// team := team ^ Bobby ;
3673: LD_ADDR_VAR 0 3
3677: PUSH
3678: LD_VAR 0 3
3682: PUSH
3683: LD_EXP 12
3687: ADD
3688: ST_TO_ADDR
// if LoadVariable ( CyrusIn07 , debug ) then
3689: LD_STRING CyrusIn07
3691: PPUSH
3692: LD_EXP 1
3696: PPUSH
3697: CALL_OW 30
3701: IFFALSE 3727
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , mission_prev_prefix ) ;
3703: LD_ADDR_EXP 13
3707: PUSH
3708: LD_STRING Cyrus
3710: PPUSH
3711: LD_EXP 1
3715: NOT
3716: PPUSH
3717: LD_EXP 2
3721: PPUSH
3722: CALL 31326 0 3
3726: ST_TO_ADDR
// if Cyrus then
3727: LD_EXP 13
3731: IFFALSE 3749
// team := team ^ Cyrus ;
3733: LD_ADDR_VAR 0 3
3737: PUSH
3738: LD_VAR 0 3
3742: PUSH
3743: LD_EXP 13
3747: ADD
3748: ST_TO_ADDR
// if LoadVariable ( LisaIn07 , debug ) then
3749: LD_STRING LisaIn07
3751: PPUSH
3752: LD_EXP 1
3756: PPUSH
3757: CALL_OW 30
3761: IFFALSE 3787
// Lisa := PrepareUnit ( Lisa , ( not debug ) , mission_prev_prefix ) ;
3763: LD_ADDR_EXP 14
3767: PUSH
3768: LD_STRING Lisa
3770: PPUSH
3771: LD_EXP 1
3775: NOT
3776: PPUSH
3777: LD_EXP 2
3781: PPUSH
3782: CALL 31326 0 3
3786: ST_TO_ADDR
// if Lisa then
3787: LD_EXP 14
3791: IFFALSE 3809
// team := team ^ Lisa ;
3793: LD_ADDR_VAR 0 3
3797: PUSH
3798: LD_VAR 0 3
3802: PUSH
3803: LD_EXP 14
3807: ADD
3808: ST_TO_ADDR
// if LoadVariable ( GladstoneIn07 , debug ) then
3809: LD_STRING GladstoneIn07
3811: PPUSH
3812: LD_EXP 1
3816: PPUSH
3817: CALL_OW 30
3821: IFFALSE 3847
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , mission_prev_prefix ) ;
3823: LD_ADDR_EXP 16
3827: PUSH
3828: LD_STRING Gladstone
3830: PPUSH
3831: LD_EXP 1
3835: NOT
3836: PPUSH
3837: LD_EXP 2
3841: PPUSH
3842: CALL 31326 0 3
3846: ST_TO_ADDR
// if Gladstone then
3847: LD_EXP 16
3851: IFFALSE 3869
// team := team ^ Gladstone ;
3853: LD_ADDR_VAR 0 3
3857: PUSH
3858: LD_VAR 0 3
3862: PUSH
3863: LD_EXP 16
3867: ADD
3868: ST_TO_ADDR
// if LoadVariable ( KhatamIn07 , debug ) then
3869: LD_STRING KhatamIn07
3871: PPUSH
3872: LD_EXP 1
3876: PPUSH
3877: CALL_OW 30
3881: IFFALSE 3907
// Khatam := PrepareUnit ( Khatam , ( not debug ) , mission_prev_prefix ) ;
3883: LD_ADDR_EXP 17
3887: PUSH
3888: LD_STRING Khatam
3890: PPUSH
3891: LD_EXP 1
3895: NOT
3896: PPUSH
3897: LD_EXP 2
3901: PPUSH
3902: CALL 31326 0 3
3906: ST_TO_ADDR
// if Khatam then
3907: LD_EXP 17
3911: IFFALSE 3929
// team := team ^ Khatam ;
3913: LD_ADDR_VAR 0 3
3917: PUSH
3918: LD_VAR 0 3
3922: PUSH
3923: LD_EXP 17
3927: ADD
3928: ST_TO_ADDR
// others := CreateCharacterSet ( 07_others ) ;
3929: LD_ADDR_VAR 0 4
3933: PUSH
3934: LD_STRING 07_others
3936: PPUSH
3937: CALL_OW 31
3941: ST_TO_ADDR
// if others then
3942: LD_VAR 0 4
3946: IFFALSE 3964
// team := team ^ others ;
3948: LD_ADDR_VAR 0 3
3952: PUSH
3953: LD_VAR 0 3
3957: PUSH
3958: LD_VAR 0 4
3962: ADD
3963: ST_TO_ADDR
// if debug then
3964: LD_EXP 1
3968: IFFALSE 4042
// begin InitHc ;
3970: CALL_OW 19
// for i = 1 to 4 do
3974: LD_ADDR_VAR 0 2
3978: PUSH
3979: DOUBLE
3980: LD_INT 1
3982: DEC
3983: ST_TO_ADDR
3984: LD_INT 4
3986: PUSH
3987: FOR_TO
3988: IFFALSE 4040
// begin PrepareHuman ( false , [ 1 , 3 ] [ Rand ( 1 , 2 ) ] , 4 ) ;
3990: LD_INT 0
3992: PPUSH
3993: LD_INT 1
3995: PUSH
3996: LD_INT 3
3998: PUSH
3999: EMPTY
4000: LIST
4001: LIST
4002: PUSH
4003: LD_INT 1
4005: PPUSH
4006: LD_INT 2
4008: PPUSH
4009: CALL_OW 12
4013: ARRAY
4014: PPUSH
4015: LD_INT 4
4017: PPUSH
4018: CALL_OW 380
// team := team ^ CreateHuman ;
4022: LD_ADDR_VAR 0 3
4026: PUSH
4027: LD_VAR 0 3
4031: PUSH
4032: CALL_OW 44
4036: ADD
4037: ST_TO_ADDR
// end ;
4038: GO 3987
4040: POP
4041: POP
// end ; m := 0 ;
4042: LD_ADDR_VAR 0 6
4046: PUSH
4047: LD_INT 0
4049: ST_TO_ADDR
// for i in team do
4050: LD_ADDR_VAR 0 2
4054: PUSH
4055: LD_VAR 0 3
4059: PUSH
4060: FOR_IN
4061: IFFALSE 4268
// if GetClass ( i ) = 3 then
4063: LD_VAR 0 2
4067: PPUSH
4068: CALL_OW 257
4072: PUSH
4073: LD_INT 3
4075: EQUAL
4076: IFFALSE 4224
// begin m := m + 1 ;
4078: LD_ADDR_VAR 0 6
4082: PUSH
4083: LD_VAR 0 6
4087: PUSH
4088: LD_INT 1
4090: PLUS
4091: ST_TO_ADDR
// veh := PrepareTank ( 1 , 1 , [ us_medium_wheeled , us_medium_tracked , us_medium_wheeled , us_light_wheeled ] [ m mod 4 + 1 ] , engine_solar , control_manual , [ us_gatling_gun , us_double_gun , us_light_gun , us_radar ] [ m mod 4 + 1 ] , 60 ) ;
4092: LD_ADDR_VAR 0 5
4096: PUSH
4097: LD_INT 1
4099: PPUSH
4100: LD_INT 1
4102: PPUSH
4103: LD_INT 2
4105: PUSH
4106: LD_INT 3
4108: PUSH
4109: LD_INT 2
4111: PUSH
4112: LD_INT 1
4114: PUSH
4115: EMPTY
4116: LIST
4117: LIST
4118: LIST
4119: LIST
4120: PUSH
4121: LD_VAR 0 6
4125: PUSH
4126: LD_INT 4
4128: MOD
4129: PUSH
4130: LD_INT 1
4132: PLUS
4133: ARRAY
4134: PPUSH
4135: LD_INT 2
4137: PPUSH
4138: LD_INT 1
4140: PPUSH
4141: LD_INT 4
4143: PUSH
4144: LD_INT 5
4146: PUSH
4147: LD_INT 3
4149: PUSH
4150: LD_INT 11
4152: PUSH
4153: EMPTY
4154: LIST
4155: LIST
4156: LIST
4157: LIST
4158: PUSH
4159: LD_VAR 0 6
4163: PUSH
4164: LD_INT 4
4166: MOD
4167: PUSH
4168: LD_INT 1
4170: PLUS
4171: ARRAY
4172: PPUSH
4173: LD_INT 60
4175: PPUSH
4176: CALL 520 0 7
4180: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
4181: LD_VAR 0 5
4185: PPUSH
4186: LD_INT 2
4188: PPUSH
4189: CALL_OW 233
// PlaceUnitArea ( veh , startArea , false ) ;
4193: LD_VAR 0 5
4197: PPUSH
4198: LD_INT 1
4200: PPUSH
4201: LD_INT 0
4203: PPUSH
4204: CALL_OW 49
// PlaceHumanInUnit ( i , veh ) ;
4208: LD_VAR 0 2
4212: PPUSH
4213: LD_VAR 0 5
4217: PPUSH
4218: CALL_OW 52
// end else
4222: GO 4266
// begin if GetClass ( i ) = 2 then
4224: LD_VAR 0 2
4228: PPUSH
4229: CALL_OW 257
4233: PUSH
4234: LD_INT 2
4236: EQUAL
4237: IFFALSE 4251
// SetClass ( i , 1 ) ;
4239: LD_VAR 0 2
4243: PPUSH
4244: LD_INT 1
4246: PPUSH
4247: CALL_OW 336
// PlaceUnitArea ( i , startArea , false ) ;
4251: LD_VAR 0 2
4255: PPUSH
4256: LD_INT 1
4258: PPUSH
4259: LD_INT 0
4261: PPUSH
4262: CALL_OW 49
// end ;
4266: GO 4060
4268: POP
4269: POP
// uc_side := 4 ;
4270: LD_ADDR_OWVAR 20
4274: PUSH
4275: LD_INT 4
4277: ST_TO_ADDR
// Harisson := PrepareUnit ( Harisson , false ,  ) ;
4278: LD_ADDR_EXP 19
4282: PUSH
4283: LD_STRING Harisson
4285: PPUSH
4286: LD_INT 0
4288: PPUSH
4289: LD_STRING 
4291: PPUSH
4292: CALL 31326 0 3
4296: ST_TO_ADDR
// PrepareScout ;
4297: CALL 4306 0 0
// end ;
4301: LD_VAR 0 1
4305: RET
// function PrepareScout ; var ape ; begin
4306: LD_INT 0
4308: PPUSH
4309: PPUSH
// uc_side := 4 ;
4310: LD_ADDR_OWVAR 20
4314: PUSH
4315: LD_INT 4
4317: ST_TO_ADDR
// uc_nation := 1 ;
4318: LD_ADDR_OWVAR 21
4322: PUSH
4323: LD_INT 1
4325: ST_TO_ADDR
// if LoadVariable ( FrankIn06 , 0 ) then
4326: LD_STRING FrankIn06
4328: PPUSH
4329: LD_INT 0
4331: PPUSH
4332: CALL_OW 30
4336: IFFALSE 4353
// Frank := CreateCharacter ( 06c_Frank ) else
4338: LD_ADDR_EXP 15
4342: PUSH
4343: LD_STRING 06c_Frank
4345: PPUSH
4346: CALL_OW 34
4350: ST_TO_ADDR
4351: GO 4393
// if LoadVariable ( FrankInDelta , 0 ) then
4353: LD_STRING FrankInDelta
4355: PPUSH
4356: LD_INT 0
4358: PPUSH
4359: CALL_OW 30
4363: IFFALSE 4380
// Frank := CreateCharacter ( 05_Frank ) else
4365: LD_ADDR_EXP 15
4369: PUSH
4370: LD_STRING 05_Frank
4372: PPUSH
4373: CALL_OW 34
4377: ST_TO_ADDR
4378: GO 4393
// Frank := CreateCharacter ( 04_Frank ) ;
4380: LD_ADDR_EXP 15
4384: PUSH
4385: LD_STRING 04_Frank
4387: PPUSH
4388: CALL_OW 34
4392: ST_TO_ADDR
// if Frank then
4393: LD_EXP 15
4397: IFFALSE 4530
// begin PlaceUnitArea ( Frank , scoutArea , false ) ;
4399: LD_EXP 15
4403: PPUSH
4404: LD_INT 2
4406: PPUSH
4407: LD_INT 0
4409: PPUSH
4410: CALL_OW 49
// SetClass ( Frank , 1 ) ;
4414: LD_EXP 15
4418: PPUSH
4419: LD_INT 1
4421: PPUSH
4422: CALL_OW 336
// uc_side := 0 ;
4426: LD_ADDR_OWVAR 20
4430: PUSH
4431: LD_INT 0
4433: ST_TO_ADDR
// uc_nation := 0 ;
4434: LD_ADDR_OWVAR 21
4438: PUSH
4439: LD_INT 0
4441: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 0 ) ;
4442: LD_INT 0
4444: PPUSH
4445: LD_INT 12
4447: PPUSH
4448: LD_INT 0
4450: PPUSH
4451: CALL_OW 380
// ape := CreateHuman ;
4455: LD_ADDR_VAR 0 2
4459: PUSH
4460: CALL_OW 44
4464: ST_TO_ADDR
// PlaceUnitXYR ( ape , GetX ( Frank ) , GetY ( Frank ) , 5 , false ) ;
4465: LD_VAR 0 2
4469: PPUSH
4470: LD_EXP 15
4474: PPUSH
4475: CALL_OW 250
4479: PPUSH
4480: LD_EXP 15
4484: PPUSH
4485: CALL_OW 251
4489: PPUSH
4490: LD_INT 5
4492: PPUSH
4493: LD_INT 0
4495: PPUSH
4496: CALL_OW 50
// ComTurnUnit ( ape , Frank ) ;
4500: LD_VAR 0 2
4504: PPUSH
4505: LD_EXP 15
4509: PPUSH
4510: CALL_OW 119
// ComTurnUnit ( Frank , ape ) ;
4514: LD_EXP 15
4518: PPUSH
4519: LD_VAR 0 2
4523: PPUSH
4524: CALL_OW 119
// exit ;
4528: GO 4573
// end ; Kikuchi := PrepareUnit ( Yamoko , false ,  ) ;
4530: LD_ADDR_EXP 18
4534: PUSH
4535: LD_STRING Yamoko
4537: PPUSH
4538: LD_INT 0
4540: PPUSH
4541: LD_STRING 
4543: PPUSH
4544: CALL 31326 0 3
4548: ST_TO_ADDR
// PlaceUnitArea ( Kikuchi , scoutArea , false ) ;
4549: LD_EXP 18
4553: PPUSH
4554: LD_INT 2
4556: PPUSH
4557: LD_INT 0
4559: PPUSH
4560: CALL_OW 49
// ComHold ( Kikuchi ) ;
4564: LD_EXP 18
4568: PPUSH
4569: CALL_OW 140
// end ; end_of_file
4573: LD_VAR 0 1
4577: RET
// export ru_rebuild_list ; export function PrepareRussians ; var i , j , r , un , skill , filter , tmp , dep_list , lab_list , fac_list , breastworks_list , bunker_list , turret_list , weapons_list , personel_counter ; begin
4578: LD_INT 0
4580: PPUSH
4581: PPUSH
4582: PPUSH
4583: PPUSH
4584: PPUSH
4585: PPUSH
4586: PPUSH
4587: PPUSH
4588: PPUSH
4589: PPUSH
4590: PPUSH
4591: PPUSH
4592: PPUSH
4593: PPUSH
4594: PPUSH
4595: PPUSH
// ru_rebuild_list := [ ] ;
4596: LD_ADDR_EXP 20
4600: PUSH
4601: EMPTY
4602: ST_TO_ADDR
// uc_side := 3 ;
4603: LD_ADDR_OWVAR 20
4607: PUSH
4608: LD_INT 3
4610: ST_TO_ADDR
// uc_nation := 3 ;
4611: LD_ADDR_OWVAR 21
4615: PUSH
4616: LD_INT 3
4618: ST_TO_ADDR
// if Difficulty > 1 then
4619: LD_OWVAR 67
4623: PUSH
4624: LD_INT 1
4626: GREATER
4627: IFFALSE 4763
// begin bc_type := b_breastwork ;
4629: LD_ADDR_OWVAR 42
4633: PUSH
4634: LD_INT 31
4636: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 78 , 74 , 2 ) ;
4637: LD_INT 78
4639: PPUSH
4640: LD_INT 74
4642: PPUSH
4643: LD_INT 2
4645: PPUSH
4646: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 171 , 193 , 4 ) ;
4650: LD_INT 171
4652: PPUSH
4653: LD_INT 193
4655: PPUSH
4656: LD_INT 4
4658: PPUSH
4659: CALL_OW 47
// bc_type := b_turret ;
4663: LD_ADDR_OWVAR 42
4667: PUSH
4668: LD_INT 33
4670: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 129 , 96 , 3 ) ;
4671: LD_INT 129
4673: PPUSH
4674: LD_INT 96
4676: PPUSH
4677: LD_INT 3
4679: PPUSH
4680: CALL_OW 47
// if Difficulty > 2 then
4684: LD_OWVAR 67
4688: PUSH
4689: LD_INT 2
4691: GREATER
4692: IFFALSE 4763
// begin RemoveUnit ( HexInfo ( 83 , 141 ) ) ;
4694: LD_INT 83
4696: PPUSH
4697: LD_INT 141
4699: PPUSH
4700: CALL_OW 428
4704: PPUSH
4705: CALL_OW 64
// RemoveUnit ( HexInfo ( 78 , 133 ) ) ;
4709: LD_INT 78
4711: PPUSH
4712: LD_INT 133
4714: PPUSH
4715: CALL_OW 428
4719: PPUSH
4720: CALL_OW 64
// CreateAndPlaceBuildingXYD ( 83 , 141 , 2 ) ;
4724: LD_INT 83
4726: PPUSH
4727: LD_INT 141
4729: PPUSH
4730: LD_INT 2
4732: PPUSH
4733: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 78 , 133 , 2 ) ;
4737: LD_INT 78
4739: PPUSH
4740: LD_INT 133
4742: PPUSH
4743: LD_INT 2
4745: PPUSH
4746: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 145 , 112 , 3 ) ;
4750: LD_INT 145
4752: PPUSH
4753: LD_INT 112
4755: PPUSH
4756: LD_INT 3
4758: PPUSH
4759: CALL_OW 47
// end ; end ; dep_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
4763: LD_ADDR_VAR 0 9
4767: PUSH
4768: LD_INT 22
4770: PUSH
4771: LD_INT 3
4773: PUSH
4774: EMPTY
4775: LIST
4776: LIST
4777: PUSH
4778: LD_INT 2
4780: PUSH
4781: LD_INT 30
4783: PUSH
4784: LD_INT 0
4786: PUSH
4787: EMPTY
4788: LIST
4789: LIST
4790: PUSH
4791: LD_INT 30
4793: PUSH
4794: LD_INT 1
4796: PUSH
4797: EMPTY
4798: LIST
4799: LIST
4800: PUSH
4801: EMPTY
4802: LIST
4803: LIST
4804: LIST
4805: PUSH
4806: EMPTY
4807: LIST
4808: LIST
4809: PPUSH
4810: CALL_OW 69
4814: ST_TO_ADDR
// lab_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
4815: LD_ADDR_VAR 0 10
4819: PUSH
4820: LD_INT 22
4822: PUSH
4823: LD_INT 3
4825: PUSH
4826: EMPTY
4827: LIST
4828: LIST
4829: PUSH
4830: LD_INT 2
4832: PUSH
4833: LD_INT 30
4835: PUSH
4836: LD_INT 6
4838: PUSH
4839: EMPTY
4840: LIST
4841: LIST
4842: PUSH
4843: LD_INT 30
4845: PUSH
4846: LD_INT 7
4848: PUSH
4849: EMPTY
4850: LIST
4851: LIST
4852: PUSH
4853: LD_INT 30
4855: PUSH
4856: LD_INT 8
4858: PUSH
4859: EMPTY
4860: LIST
4861: LIST
4862: PUSH
4863: EMPTY
4864: LIST
4865: LIST
4866: LIST
4867: LIST
4868: PUSH
4869: EMPTY
4870: LIST
4871: LIST
4872: PPUSH
4873: CALL_OW 69
4877: ST_TO_ADDR
// fac_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) ;
4878: LD_ADDR_VAR 0 11
4882: PUSH
4883: LD_INT 22
4885: PUSH
4886: LD_INT 3
4888: PUSH
4889: EMPTY
4890: LIST
4891: LIST
4892: PUSH
4893: LD_INT 30
4895: PUSH
4896: LD_INT 3
4898: PUSH
4899: EMPTY
4900: LIST
4901: LIST
4902: PUSH
4903: EMPTY
4904: LIST
4905: LIST
4906: PPUSH
4907: CALL_OW 69
4911: ST_TO_ADDR
// breastworks_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) ;
4912: LD_ADDR_VAR 0 12
4916: PUSH
4917: LD_INT 22
4919: PUSH
4920: LD_INT 3
4922: PUSH
4923: EMPTY
4924: LIST
4925: LIST
4926: PUSH
4927: LD_INT 30
4929: PUSH
4930: LD_INT 31
4932: PUSH
4933: EMPTY
4934: LIST
4935: LIST
4936: PUSH
4937: EMPTY
4938: LIST
4939: LIST
4940: PPUSH
4941: CALL_OW 69
4945: ST_TO_ADDR
// bunker_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) ;
4946: LD_ADDR_VAR 0 13
4950: PUSH
4951: LD_INT 22
4953: PUSH
4954: LD_INT 3
4956: PUSH
4957: EMPTY
4958: LIST
4959: LIST
4960: PUSH
4961: LD_INT 30
4963: PUSH
4964: LD_INT 32
4966: PUSH
4967: EMPTY
4968: LIST
4969: LIST
4970: PUSH
4971: EMPTY
4972: LIST
4973: LIST
4974: PPUSH
4975: CALL_OW 69
4979: ST_TO_ADDR
// turret_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_turret ] ] ) ;
4980: LD_ADDR_VAR 0 14
4984: PUSH
4985: LD_INT 22
4987: PUSH
4988: LD_INT 3
4990: PUSH
4991: EMPTY
4992: LIST
4993: LIST
4994: PUSH
4995: LD_INT 30
4997: PUSH
4998: LD_INT 33
5000: PUSH
5001: EMPTY
5002: LIST
5003: LIST
5004: PUSH
5005: EMPTY
5006: LIST
5007: LIST
5008: PPUSH
5009: CALL_OW 69
5013: ST_TO_ADDR
// weapons_list := [ [ ru_heavy_machine_gun , 5 ] , [ ru_gatling_gun , 50 ] , [ ru_gun , 30 ] , [ ru_heavy_gun , 15 ] ] ;
5014: LD_ADDR_VAR 0 15
5018: PUSH
5019: LD_INT 42
5021: PUSH
5022: LD_INT 5
5024: PUSH
5025: EMPTY
5026: LIST
5027: LIST
5028: PUSH
5029: LD_INT 43
5031: PUSH
5032: LD_INT 50
5034: PUSH
5035: EMPTY
5036: LIST
5037: LIST
5038: PUSH
5039: LD_INT 44
5041: PUSH
5042: LD_INT 30
5044: PUSH
5045: EMPTY
5046: LIST
5047: LIST
5048: PUSH
5049: LD_INT 46
5051: PUSH
5052: LD_INT 15
5054: PUSH
5055: EMPTY
5056: LIST
5057: LIST
5058: PUSH
5059: EMPTY
5060: LIST
5061: LIST
5062: LIST
5063: LIST
5064: ST_TO_ADDR
// personel_counter := [ 0 , 4 , 6 , 3 ] ;
5065: LD_ADDR_VAR 0 16
5069: PUSH
5070: LD_INT 0
5072: PUSH
5073: LD_INT 4
5075: PUSH
5076: LD_INT 6
5078: PUSH
5079: LD_INT 3
5081: PUSH
5082: EMPTY
5083: LIST
5084: LIST
5085: LIST
5086: LIST
5087: ST_TO_ADDR
// skill := [ 4 , 5 , 6 , 6 ] [ Difficulty ] ;
5088: LD_ADDR_VAR 0 6
5092: PUSH
5093: LD_INT 4
5095: PUSH
5096: LD_INT 5
5098: PUSH
5099: LD_INT 6
5101: PUSH
5102: LD_INT 6
5104: PUSH
5105: EMPTY
5106: LIST
5107: LIST
5108: LIST
5109: LIST
5110: PUSH
5111: LD_OWVAR 67
5115: ARRAY
5116: ST_TO_ADDR
// SetBName ( ru_dep_main , am_tukh ) ;
5117: LD_INT 16
5119: PPUSH
5120: LD_STRING am_tukh
5122: PPUSH
5123: CALL_OW 500
// for i in FilterAllUnits ( [ f_type , unit_building ] ) do
5127: LD_ADDR_VAR 0 2
5131: PUSH
5132: LD_INT 21
5134: PUSH
5135: LD_INT 3
5137: PUSH
5138: EMPTY
5139: LIST
5140: LIST
5141: PPUSH
5142: CALL_OW 69
5146: PUSH
5147: FOR_IN
5148: IFFALSE 5185
// SetBLevel ( i , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
5150: LD_VAR 0 2
5154: PPUSH
5155: LD_INT 4
5157: PUSH
5158: LD_INT 5
5160: PUSH
5161: LD_INT 6
5163: PUSH
5164: LD_INT 7
5166: PUSH
5167: EMPTY
5168: LIST
5169: LIST
5170: LIST
5171: LIST
5172: PUSH
5173: LD_OWVAR 67
5177: ARRAY
5178: PPUSH
5179: CALL_OW 241
5183: GO 5147
5185: POP
5186: POP
// for i in dep_list do
5187: LD_ADDR_VAR 0 2
5191: PUSH
5192: LD_VAR 0 9
5196: PUSH
5197: FOR_IN
5198: IFFALSE 5242
// begin SetResourceType ( GetBase ( i ) , mat_cans , 1000 ) ;
5200: LD_VAR 0 2
5204: PPUSH
5205: CALL_OW 274
5209: PPUSH
5210: LD_INT 1
5212: PPUSH
5213: LD_INT 1000
5215: PPUSH
5216: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 1000 ) ;
5220: LD_VAR 0 2
5224: PPUSH
5225: CALL_OW 274
5229: PPUSH
5230: LD_INT 2
5232: PPUSH
5233: LD_INT 1000
5235: PPUSH
5236: CALL_OW 277
// end ;
5240: GO 5197
5242: POP
5243: POP
// InitHc ;
5244: CALL_OW 19
// tmp := bunker_list * [ 45 , 60 , 75 , 80 ] [ Difficulty ] div 100 ;
5248: LD_ADDR_VAR 0 8
5252: PUSH
5253: LD_VAR 0 13
5257: PUSH
5258: LD_INT 45
5260: PUSH
5261: LD_INT 60
5263: PUSH
5264: LD_INT 75
5266: PUSH
5267: LD_INT 80
5269: PUSH
5270: EMPTY
5271: LIST
5272: LIST
5273: LIST
5274: LIST
5275: PUSH
5276: LD_OWVAR 67
5280: ARRAY
5281: MUL
5282: PUSH
5283: LD_INT 100
5285: DIV
5286: ST_TO_ADDR
// personel_counter := Replace ( personel_counter , 1 , tmp ) ;
5287: LD_ADDR_VAR 0 16
5291: PUSH
5292: LD_VAR 0 16
5296: PPUSH
5297: LD_INT 1
5299: PPUSH
5300: LD_VAR 0 8
5304: PPUSH
5305: CALL_OW 1
5309: ST_TO_ADDR
// tmp := [ ] ;
5310: LD_ADDR_VAR 0 8
5314: PUSH
5315: EMPTY
5316: ST_TO_ADDR
// for i in bunker_list do
5317: LD_ADDR_VAR 0 2
5321: PUSH
5322: LD_VAR 0 13
5326: PUSH
5327: FOR_IN
5328: IFFALSE 5424
// if i mod 10 + 1 < tmp then
5330: LD_VAR 0 2
5334: PUSH
5335: LD_INT 10
5337: MOD
5338: PUSH
5339: LD_INT 1
5341: PLUS
5342: PUSH
5343: LD_VAR 0 8
5347: LESS
5348: IFFALSE 5393
// tmp := Insert ( tmp , i mod rand ( 3 , 5 ) + 1 , i ) else
5350: LD_ADDR_VAR 0 8
5354: PUSH
5355: LD_VAR 0 8
5359: PPUSH
5360: LD_VAR 0 2
5364: PUSH
5365: LD_INT 3
5367: PPUSH
5368: LD_INT 5
5370: PPUSH
5371: CALL_OW 12
5375: MOD
5376: PUSH
5377: LD_INT 1
5379: PLUS
5380: PPUSH
5381: LD_VAR 0 2
5385: PPUSH
5386: CALL_OW 2
5390: ST_TO_ADDR
5391: GO 5422
// tmp := Insert ( tmp , tmp + 1 , i ) ;
5393: LD_ADDR_VAR 0 8
5397: PUSH
5398: LD_VAR 0 8
5402: PPUSH
5403: LD_VAR 0 8
5407: PUSH
5408: LD_INT 1
5410: PLUS
5411: PPUSH
5412: LD_VAR 0 2
5416: PPUSH
5417: CALL_OW 2
5421: ST_TO_ADDR
5422: GO 5327
5424: POP
5425: POP
// bunker_list := tmp ;
5426: LD_ADDR_VAR 0 13
5430: PUSH
5431: LD_VAR 0 8
5435: ST_TO_ADDR
// for i in bunker_list ^ turret_list do
5436: LD_ADDR_VAR 0 2
5440: PUSH
5441: LD_VAR 0 13
5445: PUSH
5446: LD_VAR 0 14
5450: ADD
5451: PUSH
5452: FOR_IN
5453: IFFALSE 5476
// PlaceWeaponTurret ( i , GetTurretWeaponBase ( i ) ) ;
5455: LD_VAR 0 2
5459: PPUSH
5460: LD_VAR 0 2
5464: PPUSH
5465: CALL 2225 0 1
5469: PPUSH
5470: CALL_OW 431
5474: GO 5452
5476: POP
5477: POP
// while ( personel_counter [ 1 ] ) do
5478: LD_VAR 0 16
5482: PUSH
5483: LD_INT 1
5485: ARRAY
5486: IFFALSE 5594
// begin i := rand ( 1 , bunker_list ) ;
5488: LD_ADDR_VAR 0 2
5492: PUSH
5493: LD_INT 1
5495: PPUSH
5496: LD_VAR 0 13
5500: PPUSH
5501: CALL_OW 12
5505: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
5506: LD_INT 0
5508: PPUSH
5509: LD_INT 1
5511: PPUSH
5512: LD_VAR 0 6
5516: PPUSH
5517: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , bunker_list [ i ] ) ;
5521: CALL_OW 44
5525: PPUSH
5526: LD_VAR 0 13
5530: PUSH
5531: LD_VAR 0 2
5535: ARRAY
5536: PPUSH
5537: CALL_OW 52
// bunker_list := Delete ( bunker_list , i ) ;
5541: LD_ADDR_VAR 0 13
5545: PUSH
5546: LD_VAR 0 13
5550: PPUSH
5551: LD_VAR 0 2
5555: PPUSH
5556: CALL_OW 3
5560: ST_TO_ADDR
// personel_counter := Replace ( personel_counter , 1 , personel_counter [ 1 ] - 1 ) ;
5561: LD_ADDR_VAR 0 16
5565: PUSH
5566: LD_VAR 0 16
5570: PPUSH
5571: LD_INT 1
5573: PPUSH
5574: LD_VAR 0 16
5578: PUSH
5579: LD_INT 1
5581: ARRAY
5582: PUSH
5583: LD_INT 1
5585: MINUS
5586: PPUSH
5587: CALL_OW 1
5591: ST_TO_ADDR
// end ;
5592: GO 5478
// for i = 1 to personel_counter [ 2 ] do
5594: LD_ADDR_VAR 0 2
5598: PUSH
5599: DOUBLE
5600: LD_INT 1
5602: DEC
5603: ST_TO_ADDR
5604: LD_VAR 0 16
5608: PUSH
5609: LD_INT 2
5611: ARRAY
5612: PUSH
5613: FOR_TO
5614: IFFALSE 5645
// begin PrepareHuman ( false , 2 , skill ) ;
5616: LD_INT 0
5618: PPUSH
5619: LD_INT 2
5621: PPUSH
5622: LD_VAR 0 6
5626: PPUSH
5627: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , ru_dep_main ) ;
5631: CALL_OW 44
5635: PPUSH
5636: LD_INT 16
5638: PPUSH
5639: CALL_OW 52
// end ;
5643: GO 5613
5645: POP
5646: POP
// for i = 1 to personel_counter [ 3 ] do
5647: LD_ADDR_VAR 0 2
5651: PUSH
5652: DOUBLE
5653: LD_INT 1
5655: DEC
5656: ST_TO_ADDR
5657: LD_VAR 0 16
5661: PUSH
5662: LD_INT 3
5664: ARRAY
5665: PUSH
5666: FOR_TO
5667: IFFALSE 5714
// begin PrepareHuman ( false , 3 , skill ) ;
5669: LD_INT 0
5671: PPUSH
5672: LD_INT 3
5674: PPUSH
5675: LD_VAR 0 6
5679: PPUSH
5680: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , fac_list [ i mod 2 + 1 ] ) ;
5684: CALL_OW 44
5688: PPUSH
5689: LD_VAR 0 11
5693: PUSH
5694: LD_VAR 0 2
5698: PUSH
5699: LD_INT 2
5701: MOD
5702: PUSH
5703: LD_INT 1
5705: PLUS
5706: ARRAY
5707: PPUSH
5708: CALL_OW 52
// end ;
5712: GO 5666
5714: POP
5715: POP
// for i = 1 to personel_counter [ 4 ] do
5716: LD_ADDR_VAR 0 2
5720: PUSH
5721: DOUBLE
5722: LD_INT 1
5724: DEC
5725: ST_TO_ADDR
5726: LD_VAR 0 16
5730: PUSH
5731: LD_INT 4
5733: ARRAY
5734: PUSH
5735: FOR_TO
5736: IFFALSE 5773
// begin PrepareHuman ( false , 4 , skill ) ;
5738: LD_INT 0
5740: PPUSH
5741: LD_INT 4
5743: PPUSH
5744: LD_VAR 0 6
5748: PPUSH
5749: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , lab_list [ 1 ] ) ;
5753: CALL_OW 44
5757: PPUSH
5758: LD_VAR 0 10
5762: PUSH
5763: LD_INT 1
5765: ARRAY
5766: PPUSH
5767: CALL_OW 52
// end ;
5771: GO 5735
5773: POP
5774: POP
// for i in breastworks_list do
5775: LD_ADDR_VAR 0 2
5779: PUSH
5780: LD_VAR 0 12
5784: PUSH
5785: FOR_IN
5786: IFFALSE 5898
// begin r := GetDir ( i ) ;
5788: LD_ADDR_VAR 0 4
5792: PUSH
5793: LD_VAR 0 2
5797: PPUSH
5798: CALL_OW 254
5802: ST_TO_ADDR
// if r > 3 then
5803: LD_VAR 0 4
5807: PUSH
5808: LD_INT 3
5810: GREATER
5811: IFFALSE 5829
// r := r - 3 else
5813: LD_ADDR_VAR 0 4
5817: PUSH
5818: LD_VAR 0 4
5822: PUSH
5823: LD_INT 3
5825: MINUS
5826: ST_TO_ADDR
5827: GO 5843
// r := r + 3 ;
5829: LD_ADDR_VAR 0 4
5833: PUSH
5834: LD_VAR 0 4
5838: PUSH
5839: LD_INT 3
5841: PLUS
5842: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
5843: LD_INT 0
5845: PPUSH
5846: LD_INT 1
5848: PPUSH
5849: LD_VAR 0 6
5853: PPUSH
5854: CALL_OW 380
// un := CreateHuman ;
5858: LD_ADDR_VAR 0 5
5862: PUSH
5863: CALL_OW 44
5867: ST_TO_ADDR
// SetDir ( un , r ) ;
5868: LD_VAR 0 5
5872: PPUSH
5873: LD_VAR 0 4
5877: PPUSH
5878: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
5882: LD_VAR 0 5
5886: PPUSH
5887: LD_VAR 0 2
5891: PPUSH
5892: CALL_OW 52
// end ;
5896: GO 5785
5898: POP
5899: POP
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) ;
5900: LD_ADDR_VAR 0 8
5904: PUSH
5905: LD_INT 22
5907: PUSH
5908: LD_INT 3
5910: PUSH
5911: EMPTY
5912: LIST
5913: LIST
5914: PUSH
5915: LD_INT 25
5917: PUSH
5918: LD_INT 3
5920: PUSH
5921: EMPTY
5922: LIST
5923: LIST
5924: PUSH
5925: EMPTY
5926: LIST
5927: LIST
5928: PPUSH
5929: CALL_OW 69
5933: ST_TO_ADDR
// r := [ 4 , 5 , 6 , 6 ] [ Difficulty ] ;
5934: LD_ADDR_VAR 0 4
5938: PUSH
5939: LD_INT 4
5941: PUSH
5942: LD_INT 5
5944: PUSH
5945: LD_INT 6
5947: PUSH
5948: LD_INT 6
5950: PUSH
5951: EMPTY
5952: LIST
5953: LIST
5954: LIST
5955: LIST
5956: PUSH
5957: LD_OWVAR 67
5961: ARRAY
5962: ST_TO_ADDR
// for i = 1 to r do
5963: LD_ADDR_VAR 0 2
5967: PUSH
5968: DOUBLE
5969: LD_INT 1
5971: DEC
5972: ST_TO_ADDR
5973: LD_VAR 0 4
5977: PUSH
5978: FOR_TO
5979: IFFALSE 6152
// begin un := PrepareTank ( 3 , 3 , [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked ] [ i mod 3 + 1 ] , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_machine_gun ] [ i mod 3 + 1 ] , 100 ) ;
5981: LD_ADDR_VAR 0 5
5985: PUSH
5986: LD_INT 3
5988: PPUSH
5989: LD_INT 3
5991: PPUSH
5992: LD_INT 22
5994: PUSH
5995: LD_INT 22
5997: PUSH
5998: LD_INT 24
6000: PUSH
6001: EMPTY
6002: LIST
6003: LIST
6004: LIST
6005: PUSH
6006: LD_VAR 0 2
6010: PUSH
6011: LD_INT 3
6013: MOD
6014: PUSH
6015: LD_INT 1
6017: PLUS
6018: ARRAY
6019: PPUSH
6020: LD_INT 1
6022: PPUSH
6023: LD_INT 1
6025: PPUSH
6026: LD_INT 43
6028: PUSH
6029: LD_INT 44
6031: PUSH
6032: LD_INT 42
6034: PUSH
6035: EMPTY
6036: LIST
6037: LIST
6038: LIST
6039: PUSH
6040: LD_VAR 0 2
6044: PUSH
6045: LD_INT 3
6047: MOD
6048: PUSH
6049: LD_INT 1
6051: PLUS
6052: ARRAY
6053: PPUSH
6054: LD_INT 100
6056: PPUSH
6057: CALL 520 0 7
6061: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
6062: LD_VAR 0 5
6066: PPUSH
6067: LD_INT 0
6069: PPUSH
6070: LD_INT 5
6072: PPUSH
6073: CALL_OW 12
6077: PPUSH
6078: CALL_OW 233
// PlaceUnitArea ( un , parkingArea , false ) ;
6082: LD_VAR 0 5
6086: PPUSH
6087: LD_INT 5
6089: PPUSH
6090: LD_INT 0
6092: PPUSH
6093: CALL_OW 49
// if i > tmp - 2 then
6097: LD_VAR 0 2
6101: PUSH
6102: LD_VAR 0 8
6106: PUSH
6107: LD_INT 2
6109: MINUS
6110: GREATER
6111: IFFALSE 6115
// continue ;
6113: GO 5978
// ComExitBuilding ( tmp [ i ] ) ;
6115: LD_VAR 0 8
6119: PUSH
6120: LD_VAR 0 2
6124: ARRAY
6125: PPUSH
6126: CALL_OW 122
// AddComEnterUnit ( tmp [ i ] , un ) ;
6130: LD_VAR 0 8
6134: PUSH
6135: LD_VAR 0 2
6139: ARRAY
6140: PPUSH
6141: LD_VAR 0 5
6145: PPUSH
6146: CALL_OW 180
// end ;
6150: GO 5978
6152: POP
6153: POP
// end ;
6154: LD_VAR 0 1
6158: RET
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) do var i , filter , tmp , engs , enemy ;
6159: LD_INT 22
6161: PUSH
6162: LD_INT 3
6164: PUSH
6165: EMPTY
6166: LIST
6167: LIST
6168: PUSH
6169: LD_INT 25
6171: PUSH
6172: LD_INT 2
6174: PUSH
6175: EMPTY
6176: LIST
6177: LIST
6178: PUSH
6179: EMPTY
6180: LIST
6181: LIST
6182: PPUSH
6183: CALL_OW 69
6187: IFFALSE 6919
6189: GO 6191
6191: DISABLE
6192: LD_INT 0
6194: PPUSH
6195: PPUSH
6196: PPUSH
6197: PPUSH
6198: PPUSH
// begin enable ;
6199: ENABLE
// filter := FilterUnitsInArea ( baseArea , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
6200: LD_ADDR_VAR 0 2
6204: PUSH
6205: LD_INT 6
6207: PPUSH
6208: LD_INT 3
6210: PUSH
6211: LD_INT 24
6213: PUSH
6214: LD_INT 1000
6216: PUSH
6217: EMPTY
6218: LIST
6219: LIST
6220: PUSH
6221: EMPTY
6222: LIST
6223: LIST
6224: PUSH
6225: LD_INT 21
6227: PUSH
6228: LD_INT 3
6230: PUSH
6231: EMPTY
6232: LIST
6233: LIST
6234: PUSH
6235: EMPTY
6236: LIST
6237: LIST
6238: PPUSH
6239: CALL_OW 70
6243: ST_TO_ADDR
// engs := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
6244: LD_ADDR_VAR 0 4
6248: PUSH
6249: LD_INT 22
6251: PUSH
6252: LD_INT 3
6254: PUSH
6255: EMPTY
6256: LIST
6257: LIST
6258: PUSH
6259: LD_INT 25
6261: PUSH
6262: LD_INT 2
6264: PUSH
6265: EMPTY
6266: LIST
6267: LIST
6268: PUSH
6269: EMPTY
6270: LIST
6271: LIST
6272: PPUSH
6273: CALL_OW 69
6277: ST_TO_ADDR
// if not filter and not ru_rebuild_list then
6278: LD_VAR 0 2
6282: NOT
6283: PUSH
6284: LD_EXP 20
6288: NOT
6289: AND
6290: IFFALSE 6360
// begin for i in engs do
6292: LD_ADDR_VAR 0 1
6296: PUSH
6297: LD_VAR 0 4
6301: PUSH
6302: FOR_IN
6303: IFFALSE 6358
// if GetLives ( i ) = 1000 and not HasTask ( i ) and not IsInUnit ( i ) then
6305: LD_VAR 0 1
6309: PPUSH
6310: CALL_OW 256
6314: PUSH
6315: LD_INT 1000
6317: EQUAL
6318: PUSH
6319: LD_VAR 0 1
6323: PPUSH
6324: CALL_OW 314
6328: NOT
6329: AND
6330: PUSH
6331: LD_VAR 0 1
6335: PPUSH
6336: CALL_OW 310
6340: NOT
6341: AND
6342: IFFALSE 6356
// ComEnterUnit ( i , ru_dep_main ) ;
6344: LD_VAR 0 1
6348: PPUSH
6349: LD_INT 16
6351: PPUSH
6352: CALL_OW 120
6356: GO 6302
6358: POP
6359: POP
// end ; if UnitFilter ( engs , [ f_not , [ f_lives , 650 ] ] ) then
6360: LD_VAR 0 4
6364: PPUSH
6365: LD_INT 3
6367: PUSH
6368: LD_INT 24
6370: PUSH
6371: LD_INT 650
6373: PUSH
6374: EMPTY
6375: LIST
6376: LIST
6377: PUSH
6378: EMPTY
6379: LIST
6380: LIST
6381: PPUSH
6382: CALL_OW 72
6386: IFFALSE 6479
// begin tmp := UnitFilter ( engs , [ f_not , [ f_lives , 650 ] ] ) ;
6388: LD_ADDR_VAR 0 3
6392: PUSH
6393: LD_VAR 0 4
6397: PPUSH
6398: LD_INT 3
6400: PUSH
6401: LD_INT 24
6403: PUSH
6404: LD_INT 650
6406: PUSH
6407: EMPTY
6408: LIST
6409: LIST
6410: PUSH
6411: EMPTY
6412: LIST
6413: LIST
6414: PPUSH
6415: CALL_OW 72
6419: ST_TO_ADDR
// for i in tmp do
6420: LD_ADDR_VAR 0 1
6424: PUSH
6425: LD_VAR 0 3
6429: PUSH
6430: FOR_IN
6431: IFFALSE 6477
// if not IsInArea ( i , mainBaseArea ) then
6433: LD_VAR 0 1
6437: PPUSH
6438: LD_INT 14
6440: PPUSH
6441: CALL_OW 308
6445: NOT
6446: IFFALSE 6475
// begin ComMoveXY ( i , 129 , 125 ) ;
6448: LD_VAR 0 1
6452: PPUSH
6453: LD_INT 129
6455: PPUSH
6456: LD_INT 125
6458: PPUSH
6459: CALL_OW 111
// AddComWait ( i , 0 0$30 ) ;
6463: LD_VAR 0 1
6467: PPUSH
6468: LD_INT 1050
6470: PPUSH
6471: CALL_OW 202
// end ;
6475: GO 6430
6477: POP
6478: POP
// end ; engs := UnitFilter ( engs , [ f_lives , 650 ] ) ;
6479: LD_ADDR_VAR 0 4
6483: PUSH
6484: LD_VAR 0 4
6488: PPUSH
6489: LD_INT 24
6491: PUSH
6492: LD_INT 650
6494: PUSH
6495: EMPTY
6496: LIST
6497: LIST
6498: PPUSH
6499: CALL_OW 72
6503: ST_TO_ADDR
// if not engs then
6504: LD_VAR 0 4
6508: NOT
6509: IFFALSE 6513
// exit ;
6511: GO 6919
// if filter then
6513: LD_VAR 0 2
6517: IFFALSE 6776
// begin for i in engs do
6519: LD_ADDR_VAR 0 1
6523: PUSH
6524: LD_VAR 0 4
6528: PUSH
6529: FOR_IN
6530: IFFALSE 6554
// if IsInUnit ( i ) then
6532: LD_VAR 0 1
6536: PPUSH
6537: CALL_OW 310
6541: IFFALSE 6552
// ComExitBuilding ( i ) ;
6543: LD_VAR 0 1
6547: PPUSH
6548: CALL_OW 122
6552: GO 6529
6554: POP
6555: POP
// wait ( 3 ) ;
6556: LD_INT 3
6558: PPUSH
6559: CALL_OW 67
// if filter >= 2 and engs >= 2 then
6563: LD_VAR 0 2
6567: PUSH
6568: LD_INT 2
6570: GREATEREQUAL
6571: PUSH
6572: LD_VAR 0 4
6576: PUSH
6577: LD_INT 2
6579: GREATEREQUAL
6580: AND
6581: IFFALSE 6729
// begin for i = 1 to engs / 2 do
6583: LD_ADDR_VAR 0 1
6587: PUSH
6588: DOUBLE
6589: LD_INT 1
6591: DEC
6592: ST_TO_ADDR
6593: LD_VAR 0 4
6597: PUSH
6598: LD_INT 2
6600: DIVREAL
6601: PUSH
6602: FOR_TO
6603: IFFALSE 6649
// if not HasTask ( engs [ i ] ) then
6605: LD_VAR 0 4
6609: PUSH
6610: LD_VAR 0 1
6614: ARRAY
6615: PPUSH
6616: CALL_OW 314
6620: NOT
6621: IFFALSE 6647
// ComRepairBuilding ( engs [ i ] , filter [ 1 ] ) ;
6623: LD_VAR 0 4
6627: PUSH
6628: LD_VAR 0 1
6632: ARRAY
6633: PPUSH
6634: LD_VAR 0 2
6638: PUSH
6639: LD_INT 1
6641: ARRAY
6642: PPUSH
6643: CALL_OW 130
6647: GO 6602
6649: POP
6650: POP
// for i = engs / 2 + 1 to engs do
6651: LD_ADDR_VAR 0 1
6655: PUSH
6656: DOUBLE
6657: LD_VAR 0 4
6661: PUSH
6662: LD_INT 2
6664: DIVREAL
6665: PUSH
6666: LD_INT 1
6668: PLUS
6669: DEC
6670: ST_TO_ADDR
6671: LD_VAR 0 4
6675: PUSH
6676: FOR_TO
6677: IFFALSE 6725
// if not HasTask ( engs [ i ] ) then
6679: LD_VAR 0 4
6683: PUSH
6684: LD_VAR 0 1
6688: ARRAY
6689: PPUSH
6690: CALL_OW 314
6694: NOT
6695: IFFALSE 6723
// ComRepairBuilding ( engs [ i ] , filter [ filter ] ) ;
6697: LD_VAR 0 4
6701: PUSH
6702: LD_VAR 0 1
6706: ARRAY
6707: PPUSH
6708: LD_VAR 0 2
6712: PUSH
6713: LD_VAR 0 2
6717: ARRAY
6718: PPUSH
6719: CALL_OW 130
6723: GO 6676
6725: POP
6726: POP
// end else
6727: GO 6776
// for i in engs do
6729: LD_ADDR_VAR 0 1
6733: PUSH
6734: LD_VAR 0 4
6738: PUSH
6739: FOR_IN
6740: IFFALSE 6774
// if not HasTask ( i ) then
6742: LD_VAR 0 1
6746: PPUSH
6747: CALL_OW 314
6751: NOT
6752: IFFALSE 6772
// ComRepairBuilding ( i , filter [ 1 ] ) ;
6754: LD_VAR 0 1
6758: PPUSH
6759: LD_VAR 0 2
6763: PUSH
6764: LD_INT 1
6766: ARRAY
6767: PPUSH
6768: CALL_OW 130
6772: GO 6739
6774: POP
6775: POP
// end ; enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
6776: LD_ADDR_VAR 0 5
6780: PUSH
6781: LD_INT 81
6783: PUSH
6784: LD_INT 3
6786: PUSH
6787: EMPTY
6788: LIST
6789: LIST
6790: PPUSH
6791: CALL_OW 69
6795: ST_TO_ADDR
// if ru_rebuild_list and not filter then
6796: LD_EXP 20
6800: PUSH
6801: LD_VAR 0 2
6805: NOT
6806: AND
6807: IFFALSE 6919
// begin ComExitBuilding ( engs ) ;
6809: LD_VAR 0 4
6813: PPUSH
6814: CALL_OW 122
// if GetDistUnitXY ( NearestUnitToXY ( enemy , ru_rebuild_list [ 2 ] , ru_rebuild_list [ 3 ] ) , ru_rebuild_list [ 2 ] , ru_rebuild_list [ 3 ] ) > 10 then
6818: LD_VAR 0 5
6822: PPUSH
6823: LD_EXP 20
6827: PUSH
6828: LD_INT 2
6830: ARRAY
6831: PPUSH
6832: LD_EXP 20
6836: PUSH
6837: LD_INT 3
6839: ARRAY
6840: PPUSH
6841: CALL_OW 73
6845: PPUSH
6846: LD_EXP 20
6850: PUSH
6851: LD_INT 2
6853: ARRAY
6854: PPUSH
6855: LD_EXP 20
6859: PUSH
6860: LD_INT 3
6862: ARRAY
6863: PPUSH
6864: CALL_OW 297
6868: PUSH
6869: LD_INT 10
6871: GREATER
6872: IFFALSE 6919
// ComBuild ( engs , ru_rebuild_list [ 1 ] , ru_rebuild_list [ 2 ] , ru_rebuild_list [ 3 ] , ru_rebuild_list [ 4 ] ) ;
6874: LD_VAR 0 4
6878: PPUSH
6879: LD_EXP 20
6883: PUSH
6884: LD_INT 1
6886: ARRAY
6887: PPUSH
6888: LD_EXP 20
6892: PUSH
6893: LD_INT 2
6895: ARRAY
6896: PPUSH
6897: LD_EXP 20
6901: PUSH
6902: LD_INT 3
6904: ARRAY
6905: PPUSH
6906: LD_EXP 20
6910: PUSH
6911: LD_INT 4
6913: ARRAY
6914: PPUSH
6915: CALL_OW 145
// end ; end ;
6919: PPOPN 5
6921: END
// every 0 0$1 trigger GetLives ( ru_dep_main ) < 250 do var i , tmp ;
6922: LD_INT 16
6924: PPUSH
6925: CALL_OW 256
6929: PUSH
6930: LD_INT 250
6932: LESS
6933: IFFALSE 7123
6935: GO 6937
6937: DISABLE
6938: LD_INT 0
6940: PPUSH
6941: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_class , 1 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ;
6942: LD_ADDR_VAR 0 2
6946: PUSH
6947: LD_INT 22
6949: PUSH
6950: LD_INT 3
6952: PUSH
6953: EMPTY
6954: LIST
6955: LIST
6956: PUSH
6957: LD_INT 2
6959: PUSH
6960: LD_INT 25
6962: PUSH
6963: LD_INT 1
6965: PUSH
6966: EMPTY
6967: LIST
6968: LIST
6969: PUSH
6970: LD_INT 25
6972: PUSH
6973: LD_INT 3
6975: PUSH
6976: EMPTY
6977: LIST
6978: LIST
6979: PUSH
6980: LD_INT 25
6982: PUSH
6983: LD_INT 4
6985: PUSH
6986: EMPTY
6987: LIST
6988: LIST
6989: PUSH
6990: EMPTY
6991: LIST
6992: LIST
6993: LIST
6994: LIST
6995: PUSH
6996: EMPTY
6997: LIST
6998: LIST
6999: PPUSH
7000: CALL_OW 69
7004: ST_TO_ADDR
// ComExitBuilding ( tmp ) ;
7005: LD_VAR 0 2
7009: PPUSH
7010: CALL_OW 122
// wait ( 3 ) ;
7014: LD_INT 3
7016: PPUSH
7017: CALL_OW 67
// ComMoveXY ( tmp , 156 , 211 ) ;
7021: LD_VAR 0 2
7025: PPUSH
7026: LD_INT 156
7028: PPUSH
7029: LD_INT 211
7031: PPUSH
7032: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
7036: LD_INT 35
7038: PPUSH
7039: CALL_OW 67
// for i in tmp do
7043: LD_ADDR_VAR 0 1
7047: PUSH
7048: LD_VAR 0 2
7052: PUSH
7053: FOR_IN
7054: IFFALSE 7114
// if IsInArea ( i , escapeArea ) then
7056: LD_VAR 0 1
7060: PPUSH
7061: LD_INT 15
7063: PPUSH
7064: CALL_OW 308
7068: IFFALSE 7097
// begin RemoveUnit ( i ) ;
7070: LD_VAR 0 1
7074: PPUSH
7075: CALL_OW 64
// tmp := tmp diff i ;
7079: LD_ADDR_VAR 0 2
7083: PUSH
7084: LD_VAR 0 2
7088: PUSH
7089: LD_VAR 0 1
7093: DIFF
7094: ST_TO_ADDR
// end else
7095: GO 7112
// ComMoveXY ( i , 156 , 211 ) ;
7097: LD_VAR 0 1
7101: PPUSH
7102: LD_INT 156
7104: PPUSH
7105: LD_INT 211
7107: PPUSH
7108: CALL_OW 111
7112: GO 7053
7114: POP
7115: POP
// until not tmp ;
7116: LD_VAR 0 2
7120: NOT
7121: IFFALSE 7036
// end ;
7123: PPOPN 2
7125: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do var i , tmp , doc ;
7126: LD_INT 22
7128: PUSH
7129: LD_INT 3
7131: PUSH
7132: EMPTY
7133: LIST
7134: LIST
7135: PUSH
7136: LD_INT 25
7138: PUSH
7139: LD_INT 4
7141: PUSH
7142: EMPTY
7143: LIST
7144: LIST
7145: PUSH
7146: EMPTY
7147: LIST
7148: LIST
7149: PPUSH
7150: CALL_OW 69
7154: IFFALSE 7408
7156: GO 7158
7158: DISABLE
7159: LD_INT 0
7161: PPUSH
7162: PPUSH
7163: PPUSH
// begin enable ;
7164: ENABLE
// tmp := FilterUnitsInArea ( mainBaseArea , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
7165: LD_ADDR_VAR 0 2
7169: PUSH
7170: LD_INT 14
7172: PPUSH
7173: LD_INT 22
7175: PUSH
7176: LD_INT 3
7178: PUSH
7179: EMPTY
7180: LIST
7181: LIST
7182: PUSH
7183: LD_INT 21
7185: PUSH
7186: LD_INT 1
7188: PUSH
7189: EMPTY
7190: LIST
7191: LIST
7192: PUSH
7193: LD_INT 3
7195: PUSH
7196: LD_INT 24
7198: PUSH
7199: LD_INT 1000
7201: PUSH
7202: EMPTY
7203: LIST
7204: LIST
7205: PUSH
7206: EMPTY
7207: LIST
7208: LIST
7209: PUSH
7210: EMPTY
7211: LIST
7212: LIST
7213: LIST
7214: PPUSH
7215: CALL_OW 70
7219: ST_TO_ADDR
// doc := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) ;
7220: LD_ADDR_VAR 0 3
7224: PUSH
7225: LD_INT 22
7227: PUSH
7228: LD_INT 3
7230: PUSH
7231: EMPTY
7232: LIST
7233: LIST
7234: PUSH
7235: LD_INT 25
7237: PUSH
7238: LD_INT 4
7240: PUSH
7241: EMPTY
7242: LIST
7243: LIST
7244: PUSH
7245: EMPTY
7246: LIST
7247: LIST
7248: PPUSH
7249: CALL_OW 69
7253: ST_TO_ADDR
// if not doc then
7254: LD_VAR 0 3
7258: NOT
7259: IFFALSE 7263
// exit ;
7261: GO 7408
// if not tmp then
7263: LD_VAR 0 2
7267: NOT
7268: IFFALSE 7359
// begin if not IsInUnit ( doc [ 1 ] ) then
7270: LD_VAR 0 3
7274: PUSH
7275: LD_INT 1
7277: ARRAY
7278: PPUSH
7279: CALL_OW 310
7283: NOT
7284: IFFALSE 7357
// ComEnterUnit ( doc , FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) [ 1 ] ) ;
7286: LD_VAR 0 3
7290: PPUSH
7291: LD_INT 22
7293: PUSH
7294: LD_INT 3
7296: PUSH
7297: EMPTY
7298: LIST
7299: LIST
7300: PUSH
7301: LD_INT 2
7303: PUSH
7304: LD_INT 30
7306: PUSH
7307: LD_INT 6
7309: PUSH
7310: EMPTY
7311: LIST
7312: LIST
7313: PUSH
7314: LD_INT 30
7316: PUSH
7317: LD_INT 7
7319: PUSH
7320: EMPTY
7321: LIST
7322: LIST
7323: PUSH
7324: LD_INT 30
7326: PUSH
7327: LD_INT 8
7329: PUSH
7330: EMPTY
7331: LIST
7332: LIST
7333: PUSH
7334: EMPTY
7335: LIST
7336: LIST
7337: LIST
7338: LIST
7339: PUSH
7340: EMPTY
7341: LIST
7342: LIST
7343: PPUSH
7344: CALL_OW 69
7348: PUSH
7349: LD_INT 1
7351: ARRAY
7352: PPUSH
7353: CALL_OW 120
// exit ;
7357: GO 7408
// end ; if IsInUnit ( doc [ 1 ] ) then
7359: LD_VAR 0 3
7363: PUSH
7364: LD_INT 1
7366: ARRAY
7367: PPUSH
7368: CALL_OW 310
7372: IFFALSE 7383
// ComExitBuilding ( doc ) ;
7374: LD_VAR 0 3
7378: PPUSH
7379: CALL_OW 122
// wait ( 3 ) ;
7383: LD_INT 3
7385: PPUSH
7386: CALL_OW 67
// ComHeal ( doc , tmp [ 1 ] ) ;
7390: LD_VAR 0 3
7394: PPUSH
7395: LD_VAR 0 2
7399: PUSH
7400: LD_INT 1
7402: ARRAY
7403: PPUSH
7404: CALL_OW 128
// end ;
7408: PPOPN 3
7410: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) do var i , tmp , attacking , areas , area , mech ;
7411: LD_INT 22
7413: PUSH
7414: LD_INT 3
7416: PUSH
7417: EMPTY
7418: LIST
7419: LIST
7420: PUSH
7421: LD_INT 25
7423: PUSH
7424: LD_INT 3
7426: PUSH
7427: EMPTY
7428: LIST
7429: LIST
7430: PUSH
7431: EMPTY
7432: LIST
7433: LIST
7434: PPUSH
7435: CALL_OW 69
7439: PUSH
7440: LD_INT 22
7442: PUSH
7443: LD_INT 3
7445: PUSH
7446: EMPTY
7447: LIST
7448: LIST
7449: PUSH
7450: LD_INT 21
7452: PUSH
7453: LD_INT 2
7455: PUSH
7456: EMPTY
7457: LIST
7458: LIST
7459: PUSH
7460: EMPTY
7461: LIST
7462: LIST
7463: PPUSH
7464: CALL_OW 69
7468: AND
7469: IFFALSE 8163
7471: GO 7473
7473: DISABLE
7474: LD_INT 0
7476: PPUSH
7477: PPUSH
7478: PPUSH
7479: PPUSH
7480: PPUSH
7481: PPUSH
// begin enable ;
7482: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) ;
7483: LD_ADDR_VAR 0 2
7487: PUSH
7488: LD_INT 22
7490: PUSH
7491: LD_INT 3
7493: PUSH
7494: EMPTY
7495: LIST
7496: LIST
7497: PUSH
7498: LD_INT 21
7500: PUSH
7501: LD_INT 2
7503: PUSH
7504: EMPTY
7505: LIST
7506: LIST
7507: PUSH
7508: LD_INT 3
7510: PUSH
7511: LD_INT 58
7513: PUSH
7514: EMPTY
7515: LIST
7516: PUSH
7517: EMPTY
7518: LIST
7519: LIST
7520: PUSH
7521: EMPTY
7522: LIST
7523: LIST
7524: LIST
7525: PPUSH
7526: CALL_OW 69
7530: ST_TO_ADDR
// areas := [ sectorAlpha , sectorBeta , sectorDelta , mainBaseArea ] ;
7531: LD_ADDR_VAR 0 4
7535: PUSH
7536: LD_INT 10
7538: PUSH
7539: LD_INT 11
7541: PUSH
7542: LD_INT 12
7544: PUSH
7545: LD_INT 14
7547: PUSH
7548: EMPTY
7549: LIST
7550: LIST
7551: LIST
7552: LIST
7553: ST_TO_ADDR
// area := 0 ;
7554: LD_ADDR_VAR 0 5
7558: PUSH
7559: LD_INT 0
7561: ST_TO_ADDR
// attacking := false ;
7562: LD_ADDR_VAR 0 3
7566: PUSH
7567: LD_INT 0
7569: ST_TO_ADDR
// for i in tmp do
7570: LD_ADDR_VAR 0 1
7574: PUSH
7575: LD_VAR 0 2
7579: PUSH
7580: FOR_IN
7581: IFFALSE 8009
// begin if GetDistUnits ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) < 10 and not HasTask ( i ) and not GetTag ( i ) and GetLives ( i ) > 650 then
7583: LD_VAR 0 1
7587: PPUSH
7588: LD_INT 22
7590: PUSH
7591: LD_INT 1
7593: PUSH
7594: EMPTY
7595: LIST
7596: LIST
7597: PPUSH
7598: CALL_OW 69
7602: PPUSH
7603: LD_VAR 0 1
7607: PPUSH
7608: CALL_OW 74
7612: PPUSH
7613: CALL_OW 296
7617: PUSH
7618: LD_INT 10
7620: LESS
7621: PUSH
7622: LD_VAR 0 1
7626: PPUSH
7627: CALL_OW 314
7631: NOT
7632: AND
7633: PUSH
7634: LD_VAR 0 1
7638: PPUSH
7639: CALL_OW 110
7643: NOT
7644: AND
7645: PUSH
7646: LD_VAR 0 1
7650: PPUSH
7651: CALL_OW 256
7655: PUSH
7656: LD_INT 650
7658: GREATER
7659: AND
7660: IFFALSE 7704
// begin ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
7662: LD_VAR 0 1
7666: PPUSH
7667: LD_INT 22
7669: PUSH
7670: LD_INT 1
7672: PUSH
7673: EMPTY
7674: LIST
7675: LIST
7676: PPUSH
7677: CALL_OW 69
7681: PPUSH
7682: LD_VAR 0 1
7686: PPUSH
7687: CALL_OW 74
7691: PPUSH
7692: CALL_OW 115
// attacking := true ;
7696: LD_ADDR_VAR 0 3
7700: PUSH
7701: LD_INT 1
7703: ST_TO_ADDR
// end ; if not GetTag ( i ) and GetLives ( i ) < 650 and GetType ( i ) = unit_vehicle then
7704: LD_VAR 0 1
7708: PPUSH
7709: CALL_OW 110
7713: NOT
7714: PUSH
7715: LD_VAR 0 1
7719: PPUSH
7720: CALL_OW 256
7724: PUSH
7725: LD_INT 650
7727: LESS
7728: AND
7729: PUSH
7730: LD_VAR 0 1
7734: PPUSH
7735: CALL_OW 247
7739: PUSH
7740: LD_INT 2
7742: EQUAL
7743: AND
7744: IFFALSE 7773
// begin SetTag ( i , 1 ) ;
7746: LD_VAR 0 1
7750: PPUSH
7751: LD_INT 1
7753: PPUSH
7754: CALL_OW 109
// ComMoveXY ( i , 130 , 139 ) ;
7758: LD_VAR 0 1
7762: PPUSH
7763: LD_INT 130
7765: PPUSH
7766: LD_INT 139
7768: PPUSH
7769: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 130 , 139 ) < 6 then
7773: LD_VAR 0 1
7777: PPUSH
7778: CALL_OW 110
7782: PUSH
7783: LD_INT 1
7785: EQUAL
7786: PUSH
7787: LD_VAR 0 1
7791: PPUSH
7792: LD_INT 130
7794: PPUSH
7795: LD_INT 139
7797: PPUSH
7798: CALL_OW 297
7802: PUSH
7803: LD_INT 6
7805: LESS
7806: AND
7807: IFFALSE 7821
// SetTag ( i , 2 ) ;
7809: LD_VAR 0 1
7813: PPUSH
7814: LD_INT 2
7816: PPUSH
7817: CALL_OW 109
// if GetTag ( i ) = 2 then
7821: LD_VAR 0 1
7825: PPUSH
7826: CALL_OW 110
7830: PUSH
7831: LD_INT 2
7833: EQUAL
7834: IFFALSE 7969
// begin if GetLives ( i ) = 1000 then
7836: LD_VAR 0 1
7840: PPUSH
7841: CALL_OW 256
7845: PUSH
7846: LD_INT 1000
7848: EQUAL
7849: IFFALSE 7865
// SetTag ( i , 3 ) else
7851: LD_VAR 0 1
7855: PPUSH
7856: LD_INT 3
7858: PPUSH
7859: CALL_OW 109
7863: GO 7969
// if IsDrivenBy ( i ) then
7865: LD_VAR 0 1
7869: PPUSH
7870: CALL_OW 311
7874: IFFALSE 7969
// begin mech := IsDrivenBy ( i ) ;
7876: LD_ADDR_VAR 0 6
7880: PUSH
7881: LD_VAR 0 1
7885: PPUSH
7886: CALL_OW 311
7890: ST_TO_ADDR
// if not See ( 1 , mech ) and GetLives ( mech ) < 1000 then
7891: LD_INT 1
7893: PPUSH
7894: LD_VAR 0 6
7898: PPUSH
7899: CALL_OW 292
7903: NOT
7904: PUSH
7905: LD_VAR 0 6
7909: PPUSH
7910: CALL_OW 256
7914: PUSH
7915: LD_INT 1000
7917: LESS
7918: AND
7919: IFFALSE 7933
// SetLives ( mech , 1000 ) ;
7921: LD_VAR 0 6
7925: PPUSH
7926: LD_INT 1000
7928: PPUSH
7929: CALL_OW 234
// if not See ( 1 , i ) then
7933: LD_INT 1
7935: PPUSH
7936: LD_VAR 0 1
7940: PPUSH
7941: CALL_OW 292
7945: NOT
7946: IFFALSE 7960
// SetFuel ( i , 100 ) ;
7948: LD_VAR 0 1
7952: PPUSH
7953: LD_INT 100
7955: PPUSH
7956: CALL_OW 240
// ComRepairVehicleAndReturn ( mech ) ;
7960: LD_VAR 0 6
7964: PPUSH
7965: CALL 69852 0 1
// end ; end ; if GetTag ( i ) = 3 and IsDrivenBy ( i ) then
7969: LD_VAR 0 1
7973: PPUSH
7974: CALL_OW 110
7978: PUSH
7979: LD_INT 3
7981: EQUAL
7982: PUSH
7983: LD_VAR 0 1
7987: PPUSH
7988: CALL_OW 311
7992: AND
7993: IFFALSE 8007
// SetTag ( i , 0 ) ;
7995: LD_VAR 0 1
7999: PPUSH
8000: LD_INT 0
8002: PPUSH
8003: CALL_OW 109
// end ;
8007: GO 7580
8009: POP
8010: POP
// if attacking then
8011: LD_VAR 0 3
8015: IFFALSE 8019
// exit ;
8017: GO 8163
// for i in areas do
8019: LD_ADDR_VAR 0 1
8023: PUSH
8024: LD_VAR 0 4
8028: PUSH
8029: FOR_IN
8030: IFFALSE 8067
// if FilterUnitsInArea ( i , [ f_side , 1 ] ) then
8032: LD_VAR 0 1
8036: PPUSH
8037: LD_INT 22
8039: PUSH
8040: LD_INT 1
8042: PUSH
8043: EMPTY
8044: LIST
8045: LIST
8046: PPUSH
8047: CALL_OW 70
8051: IFFALSE 8065
// begin area := i ;
8053: LD_ADDR_VAR 0 5
8057: PUSH
8058: LD_VAR 0 1
8062: ST_TO_ADDR
// break ;
8063: GO 8067
// end ;
8065: GO 8029
8067: POP
8068: POP
// if area then
8069: LD_VAR 0 5
8073: IFFALSE 8163
// begin for i in tmp do
8075: LD_ADDR_VAR 0 1
8079: PUSH
8080: LD_VAR 0 2
8084: PUSH
8085: FOR_IN
8086: IFFALSE 8161
// begin if GetTag ( i ) then
8088: LD_VAR 0 1
8092: PPUSH
8093: CALL_OW 110
8097: IFFALSE 8101
// continue ;
8099: GO 8085
// if GetFuel ( i ) < 33 then
8101: LD_VAR 0 1
8105: PPUSH
8106: CALL_OW 261
8110: PUSH
8111: LD_INT 33
8113: LESS
8114: IFFALSE 8128
// SetFuel ( i , 33 ) ;
8116: LD_VAR 0 1
8120: PPUSH
8121: LD_INT 33
8123: PPUSH
8124: CALL_OW 240
// if not IsInArea ( i , area ) then
8128: LD_VAR 0 1
8132: PPUSH
8133: LD_VAR 0 5
8137: PPUSH
8138: CALL_OW 308
8142: NOT
8143: IFFALSE 8159
// ComMoveToArea ( i , area ) ;
8145: LD_VAR 0 1
8149: PPUSH
8150: LD_VAR 0 5
8154: PPUSH
8155: CALL_OW 113
// end ;
8159: GO 8085
8161: POP
8162: POP
// end ; end ;
8163: PPOPN 6
8165: END
// every 15 15$00 trigger Difficulty > 1 do var i , j , un , veh , time , count ;
8166: LD_OWVAR 67
8170: PUSH
8171: LD_INT 1
8173: GREATER
8174: IFFALSE 8459
8176: GO 8178
8178: DISABLE
8179: LD_INT 0
8181: PPUSH
8182: PPUSH
8183: PPUSH
8184: PPUSH
8185: PPUSH
8186: PPUSH
// begin uc_side := 3 ;
8187: LD_ADDR_OWVAR 20
8191: PUSH
8192: LD_INT 3
8194: ST_TO_ADDR
// uc_nation := 3 ;
8195: LD_ADDR_OWVAR 21
8199: PUSH
8200: LD_INT 3
8202: ST_TO_ADDR
// time := [ 9 9$00 , 7 7$00 , 6 6$00 , 5 5$30 ] [ Difficulty ] ;
8203: LD_ADDR_VAR 0 5
8207: PUSH
8208: LD_INT 18900
8210: PUSH
8211: LD_INT 14700
8213: PUSH
8214: LD_INT 12600
8216: PUSH
8217: LD_INT 11550
8219: PUSH
8220: EMPTY
8221: LIST
8222: LIST
8223: LIST
8224: LIST
8225: PUSH
8226: LD_OWVAR 67
8230: ARRAY
8231: ST_TO_ADDR
// count := [ 2 , 2 , 3 , 3 ] [ Difficulty ] ;
8232: LD_ADDR_VAR 0 6
8236: PUSH
8237: LD_INT 2
8239: PUSH
8240: LD_INT 2
8242: PUSH
8243: LD_INT 3
8245: PUSH
8246: LD_INT 3
8248: PUSH
8249: EMPTY
8250: LIST
8251: LIST
8252: LIST
8253: LIST
8254: PUSH
8255: LD_OWVAR 67
8259: ARRAY
8260: ST_TO_ADDR
// for i = 1 to count do
8261: LD_ADDR_VAR 0 1
8265: PUSH
8266: DOUBLE
8267: LD_INT 1
8269: DEC
8270: ST_TO_ADDR
8271: LD_VAR 0 6
8275: PUSH
8276: FOR_TO
8277: IFFALSE 8457
// begin wait ( time ) ;
8279: LD_VAR 0 5
8283: PPUSH
8284: CALL_OW 67
// for j = 1 to rand ( 1 , Difficulty ) do
8288: LD_ADDR_VAR 0 2
8292: PUSH
8293: DOUBLE
8294: LD_INT 1
8296: DEC
8297: ST_TO_ADDR
8298: LD_INT 1
8300: PPUSH
8301: LD_OWVAR 67
8305: PPUSH
8306: CALL_OW 12
8310: PUSH
8311: FOR_TO
8312: IFFALSE 8453
// begin veh := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_machine_gun ] [ i mod 3 + 1 ] , 80 ) ;
8314: LD_ADDR_VAR 0 4
8318: PUSH
8319: LD_INT 3
8321: PPUSH
8322: LD_INT 3
8324: PPUSH
8325: LD_INT 22
8327: PPUSH
8328: LD_INT 1
8330: PPUSH
8331: LD_INT 1
8333: PPUSH
8334: LD_INT 43
8336: PUSH
8337: LD_INT 44
8339: PUSH
8340: LD_INT 42
8342: PUSH
8343: EMPTY
8344: LIST
8345: LIST
8346: LIST
8347: PUSH
8348: LD_VAR 0 1
8352: PUSH
8353: LD_INT 3
8355: MOD
8356: PUSH
8357: LD_INT 1
8359: PLUS
8360: ARRAY
8361: PPUSH
8362: LD_INT 80
8364: PPUSH
8365: CALL 520 0 7
8369: ST_TO_ADDR
// PlaceUnitArea ( veh , southArea , false ) ;
8370: LD_VAR 0 4
8374: PPUSH
8375: LD_INT 13
8377: PPUSH
8378: LD_INT 0
8380: PPUSH
8381: CALL_OW 49
// PrepareHuman ( false , 3 , [ 4 , 5 , 5 ] [ Difficulty ] ) ;
8385: LD_INT 0
8387: PPUSH
8388: LD_INT 3
8390: PPUSH
8391: LD_INT 4
8393: PUSH
8394: LD_INT 5
8396: PUSH
8397: LD_INT 5
8399: PUSH
8400: EMPTY
8401: LIST
8402: LIST
8403: LIST
8404: PUSH
8405: LD_OWVAR 67
8409: ARRAY
8410: PPUSH
8411: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
8415: CALL_OW 44
8419: PPUSH
8420: LD_VAR 0 4
8424: PPUSH
8425: CALL_OW 52
// wait ( 0 0$01 ) ;
8429: LD_INT 35
8431: PPUSH
8432: CALL_OW 67
// ComMoveXY ( veh , 143 , 143 ) ;
8436: LD_VAR 0 4
8440: PPUSH
8441: LD_INT 143
8443: PPUSH
8444: LD_INT 143
8446: PPUSH
8447: CALL_OW 111
// end ;
8451: GO 8311
8453: POP
8454: POP
// end ;
8455: GO 8276
8457: POP
8458: POP
// end ;
8459: PPOPN 6
8461: END
// every 8 8$00 do var i , un , time ;
8462: GO 8464
8464: DISABLE
8465: LD_INT 0
8467: PPUSH
8468: PPUSH
8469: PPUSH
// begin time := [ 3 3$00 , 1 1$00 , 0 0$30 ] ;
8470: LD_ADDR_VAR 0 3
8474: PUSH
8475: LD_INT 6300
8477: PUSH
8478: LD_INT 2100
8480: PUSH
8481: LD_INT 1050
8483: PUSH
8484: EMPTY
8485: LIST
8486: LIST
8487: LIST
8488: ST_TO_ADDR
// wait ( time ) ;
8489: LD_VAR 0 3
8493: PPUSH
8494: CALL_OW 67
// uc_side := 3 ;
8498: LD_ADDR_OWVAR 20
8502: PUSH
8503: LD_INT 3
8505: ST_TO_ADDR
// uc_nation := 3 ;
8506: LD_ADDR_OWVAR 21
8510: PUSH
8511: LD_INT 3
8513: ST_TO_ADDR
// for i = 1 to 2 do
8514: LD_ADDR_VAR 0 1
8518: PUSH
8519: DOUBLE
8520: LD_INT 1
8522: DEC
8523: ST_TO_ADDR
8524: LD_INT 2
8526: PUSH
8527: FOR_TO
8528: IFFALSE 8591
// begin PrepareHuman ( false , 1 , 4 ) ;
8530: LD_INT 0
8532: PPUSH
8533: LD_INT 1
8535: PPUSH
8536: LD_INT 4
8538: PPUSH
8539: CALL_OW 380
// un := CreateHuman ;
8543: LD_ADDR_VAR 0 2
8547: PUSH
8548: CALL_OW 44
8552: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_dep_main ) ;
8553: LD_VAR 0 2
8557: PPUSH
8558: LD_INT 16
8560: PPUSH
8561: CALL_OW 52
// ComExitBuilding ( un ) ;
8565: LD_VAR 0 2
8569: PPUSH
8570: CALL_OW 122
// AddComAgressiveMove ( un , 41 , 76 ) ;
8574: LD_VAR 0 2
8578: PPUSH
8579: LD_INT 41
8581: PPUSH
8582: LD_INT 76
8584: PPUSH
8585: CALL_OW 174
// end ;
8589: GO 8527
8591: POP
8592: POP
// end ; end_of_file
8593: PPOPN 3
8595: END
// export function Action ; begin
8596: LD_INT 0
8598: PPUSH
// CenterNowOnXY ( 28 , 3 ) ;
8599: LD_INT 28
8601: PPUSH
8602: LD_INT 3
8604: PPUSH
8605: CALL_OW 86
// PlaceSeeing ( 41 , 76 , 1 , 10 ) ;
8609: LD_INT 41
8611: PPUSH
8612: LD_INT 76
8614: PPUSH
8615: LD_INT 1
8617: PPUSH
8618: LD_INT 10
8620: PPUSH
8621: CALL_OW 330
// RemoveSeeing ( 41 , 76 , 1 ) ;
8625: LD_INT 41
8627: PPUSH
8628: LD_INT 76
8630: PPUSH
8631: LD_INT 1
8633: PPUSH
8634: CALL_OW 331
// InGameOn ;
8638: CALL_OW 8
// SayRadio ( Harisson , D2-Har-1 ) ;
8642: LD_EXP 19
8646: PPUSH
8647: LD_STRING D2-Har-1
8649: PPUSH
8650: CALL_OW 94
// InGameOff ;
8654: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
8658: LD_STRING M1
8660: PPUSH
8661: CALL_OW 337
// end ;
8665: LD_VAR 0 1
8669: RET
// every 0 0$1 trigger buildings_counter > 1 do var un ;
8670: LD_EXP 4
8674: PUSH
8675: LD_INT 1
8677: GREATER
8678: IFFALSE 8769
8680: GO 8682
8682: DISABLE
8683: LD_INT 0
8685: PPUSH
// begin un := GetRandom ( sex_male ) [ 1 ] ;
8686: LD_ADDR_VAR 0 1
8690: PUSH
8691: LD_INT 1
8693: PPUSH
8694: CALL 608 0 1
8698: PUSH
8699: LD_INT 1
8701: ARRAY
8702: ST_TO_ADDR
// Say ( un , D2a-Sol1-1 ) ;
8703: LD_VAR 0 1
8707: PPUSH
8708: LD_STRING D2a-Sol1-1
8710: PPUSH
8711: CALL_OW 88
// if not un then
8715: LD_VAR 0 1
8719: NOT
8720: IFFALSE 8751
// begin un := GetRandom ( sex_female ) [ 1 ] ;
8722: LD_ADDR_VAR 0 1
8726: PUSH
8727: LD_INT 2
8729: PPUSH
8730: CALL 608 0 1
8734: PUSH
8735: LD_INT 1
8737: ARRAY
8738: ST_TO_ADDR
// Say ( un , D2a-FSol1-1 ) ;
8739: LD_VAR 0 1
8743: PPUSH
8744: LD_STRING D2a-FSol1-1
8746: PPUSH
8747: CALL_OW 88
// end ; if Khatam then
8751: LD_EXP 17
8755: IFFALSE 8769
// Say ( Khatam , D3b-Khat-3 ) ;
8757: LD_EXP 17
8761: PPUSH
8762: LD_STRING D3b-Khat-3
8764: PPUSH
8765: CALL_OW 88
// end ;
8769: PPOPN 1
8771: END
// every 0 0$1 trigger Frank and not Kikuchi and FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , GetX ( Frank ) , GetY ( Frank ) , 7 ] ] ) and not InBattle ( 1 ) and not InBattle ( 4 ) do var i , ape ;
8772: LD_EXP 15
8776: PUSH
8777: LD_EXP 18
8781: NOT
8782: AND
8783: PUSH
8784: LD_INT 22
8786: PUSH
8787: LD_INT 1
8789: PUSH
8790: EMPTY
8791: LIST
8792: LIST
8793: PUSH
8794: LD_INT 92
8796: PUSH
8797: LD_EXP 15
8801: PPUSH
8802: CALL_OW 250
8806: PUSH
8807: LD_EXP 15
8811: PPUSH
8812: CALL_OW 251
8816: PUSH
8817: LD_INT 7
8819: PUSH
8820: EMPTY
8821: LIST
8822: LIST
8823: LIST
8824: LIST
8825: PUSH
8826: EMPTY
8827: LIST
8828: LIST
8829: PPUSH
8830: CALL_OW 69
8834: AND
8835: PUSH
8836: LD_INT 1
8838: PPUSH
8839: CALL_OW 463
8843: NOT
8844: AND
8845: PUSH
8846: LD_INT 4
8848: PPUSH
8849: CALL_OW 463
8853: NOT
8854: AND
8855: IFFALSE 9442
8857: GO 8859
8859: DISABLE
8860: LD_INT 0
8862: PPUSH
8863: PPUSH
// begin InGameOn ;
8864: CALL_OW 8
// ape := FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) ;
8868: LD_ADDR_VAR 0 2
8872: PUSH
8873: LD_INT 22
8875: PUSH
8876: LD_INT 0
8878: PUSH
8879: EMPTY
8880: LIST
8881: LIST
8882: PUSH
8883: LD_INT 25
8885: PUSH
8886: LD_INT 12
8888: PUSH
8889: EMPTY
8890: LIST
8891: LIST
8892: PUSH
8893: EMPTY
8894: LIST
8895: LIST
8896: PPUSH
8897: CALL_OW 69
8901: ST_TO_ADDR
// ape := NearestUnitToUnit ( ape , Frank ) ;
8902: LD_ADDR_VAR 0 2
8906: PUSH
8907: LD_VAR 0 2
8911: PPUSH
8912: LD_EXP 15
8916: PPUSH
8917: CALL_OW 74
8921: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_dist , Frank , 20 ] ] ) do
8922: LD_ADDR_VAR 0 1
8926: PUSH
8927: LD_INT 22
8929: PUSH
8930: LD_INT 1
8932: PUSH
8933: EMPTY
8934: LIST
8935: LIST
8936: PUSH
8937: LD_INT 21
8939: PUSH
8940: LD_INT 1
8942: PUSH
8943: EMPTY
8944: LIST
8945: LIST
8946: PUSH
8947: LD_INT 91
8949: PUSH
8950: LD_EXP 15
8954: PUSH
8955: LD_INT 20
8957: PUSH
8958: EMPTY
8959: LIST
8960: LIST
8961: LIST
8962: PUSH
8963: EMPTY
8964: LIST
8965: LIST
8966: LIST
8967: PPUSH
8968: CALL_OW 69
8972: PUSH
8973: FOR_IN
8974: IFFALSE 8992
// ComTurnUnit ( i , Frank ) ;
8976: LD_VAR 0 1
8980: PPUSH
8981: LD_EXP 15
8985: PPUSH
8986: CALL_OW 119
8990: GO 8973
8992: POP
8993: POP
// SetSide ( Frank , 1 ) ;
8994: LD_EXP 15
8998: PPUSH
8999: LD_INT 1
9001: PPUSH
9002: CALL_OW 235
// ComMoveUnit ( JMM , Frank ) ;
9006: LD_EXP 9
9010: PPUSH
9011: LD_EXP 15
9015: PPUSH
9016: CALL_OW 112
// AddComTurnUnit ( JMM , Frank ) ;
9020: LD_EXP 9
9024: PPUSH
9025: LD_EXP 15
9029: PPUSH
9030: CALL_OW 179
// CenterOnUnits ( Frank ) ;
9034: LD_EXP 15
9038: PPUSH
9039: CALL_OW 85
// Say ( Frank , D3a-Frank-1 ) ;
9043: LD_EXP 15
9047: PPUSH
9048: LD_STRING D3a-Frank-1
9050: PPUSH
9051: CALL_OW 88
// ComMoveXY ( ape , 42 , 78 ) ;
9055: LD_VAR 0 2
9059: PPUSH
9060: LD_INT 42
9062: PPUSH
9063: LD_INT 78
9065: PPUSH
9066: CALL_OW 111
// AddComTurnUnit ( ape , Frank ) ;
9070: LD_VAR 0 2
9074: PPUSH
9075: LD_EXP 15
9079: PPUSH
9080: CALL_OW 179
// if Lisa then
9084: LD_EXP 14
9088: IFFALSE 9102
// Say ( Lisa , D3a-Lisa-1 ) ;
9090: LD_EXP 14
9094: PPUSH
9095: LD_STRING D3a-Lisa-1
9097: PPUSH
9098: CALL_OW 88
// Say ( JMM , D3a-JMM-1 ) ;
9102: LD_EXP 9
9106: PPUSH
9107: LD_STRING D3a-JMM-1
9109: PPUSH
9110: CALL_OW 88
// if Cyrus then
9114: LD_EXP 13
9118: IFFALSE 9132
// Say ( Cyrus , D3a-Cyrus-1 ) ;
9120: LD_EXP 13
9124: PPUSH
9125: LD_STRING D3a-Cyrus-1
9127: PPUSH
9128: CALL_OW 88
// if GetRandom ( sex_male ) then
9132: LD_INT 1
9134: PPUSH
9135: CALL 608 0 1
9139: IFFALSE 9160
// Say ( GetRandom ( sex_male ) [ 1 ] , D3a-Sol1-1 ) ;
9141: LD_INT 1
9143: PPUSH
9144: CALL 608 0 1
9148: PUSH
9149: LD_INT 1
9151: ARRAY
9152: PPUSH
9153: LD_STRING D3a-Sol1-1
9155: PPUSH
9156: CALL_OW 88
// if GetRandom ( sex_female ) then
9160: LD_INT 2
9162: PPUSH
9163: CALL 608 0 1
9167: IFFALSE 9188
// Say ( GetRandom ( sex_female ) [ 1 ] , D3a-FSol1-1 ) ;
9169: LD_INT 2
9171: PPUSH
9172: CALL 608 0 1
9176: PUSH
9177: LD_INT 1
9179: ARRAY
9180: PPUSH
9181: LD_STRING D3a-FSol1-1
9183: PPUSH
9184: CALL_OW 88
// if Gladstone then
9188: LD_EXP 16
9192: IFFALSE 9206
// Say ( Gladstone , D3a-Glad-1 ) ;
9194: LD_EXP 16
9198: PPUSH
9199: LD_STRING D3a-Glad-1
9201: PPUSH
9202: CALL_OW 88
// ComMoveXY ( ape , 60 , 113 ) ;
9206: LD_VAR 0 2
9210: PPUSH
9211: LD_INT 60
9213: PPUSH
9214: LD_INT 113
9216: PPUSH
9217: CALL_OW 111
// Say ( Frank , D3a-Frank-2 ) ;
9221: LD_EXP 15
9225: PPUSH
9226: LD_STRING D3a-Frank-2
9228: PPUSH
9229: CALL_OW 88
// ComTurnUnit ( Frank , JMM ) ;
9233: LD_EXP 15
9237: PPUSH
9238: LD_EXP 9
9242: PPUSH
9243: CALL_OW 119
// Say ( JMM , D3a-JMM-2 ) ;
9247: LD_EXP 9
9251: PPUSH
9252: LD_STRING D3a-JMM-2
9254: PPUSH
9255: CALL_OW 88
// RevealFogArea ( 1 , spotArea ) ;
9259: LD_INT 1
9261: PPUSH
9262: LD_INT 4
9264: PPUSH
9265: CALL_OW 332
// CenterOnXY ( 85 , 134 ) ;
9269: LD_INT 85
9271: PPUSH
9272: LD_INT 134
9274: PPUSH
9275: CALL_OW 84
// Say ( Frank , D3a-Frank-3 ) ;
9279: LD_EXP 15
9283: PPUSH
9284: LD_STRING D3a-Frank-3
9286: PPUSH
9287: CALL_OW 88
// Wait ( 0 0$01 ) ;
9291: LD_INT 35
9293: PPUSH
9294: CALL_OW 67
// CenterOnXY ( 166 , 136 ) ;
9298: LD_INT 166
9300: PPUSH
9301: LD_INT 136
9303: PPUSH
9304: CALL_OW 84
// Say ( JMM , D3a-JMM-3 ) ;
9308: LD_EXP 9
9312: PPUSH
9313: LD_STRING D3a-JMM-3
9315: PPUSH
9316: CALL_OW 88
// Wait ( 0 0$01 ) ;
9320: LD_INT 35
9322: PPUSH
9323: CALL_OW 67
// CenterNowOnUnits ( Frank ) ;
9327: LD_EXP 15
9331: PPUSH
9332: CALL_OW 87
// Say ( Frank , D3a-Frank-4 ) ;
9336: LD_EXP 15
9340: PPUSH
9341: LD_STRING D3a-Frank-4
9343: PPUSH
9344: CALL_OW 88
// if Lisa then
9348: LD_EXP 14
9352: IFFALSE 9366
// Say ( Lisa , D3a-Lisa-4 ) ;
9354: LD_EXP 14
9358: PPUSH
9359: LD_STRING D3a-Lisa-4
9361: PPUSH
9362: CALL_OW 88
// Say ( JMM , D3a-JMM-4 ) ;
9366: LD_EXP 9
9370: PPUSH
9371: LD_STRING D3a-JMM-4
9373: PPUSH
9374: CALL_OW 88
// Say ( Frank , D3a-Frank-5 ) ;
9378: LD_EXP 15
9382: PPUSH
9383: LD_STRING D3a-Frank-5
9385: PPUSH
9386: CALL_OW 88
// Say ( JMM , D3a-JMM-5 ) ;
9390: LD_EXP 9
9394: PPUSH
9395: LD_STRING D3a-JMM-5
9397: PPUSH
9398: CALL_OW 88
// Say ( Frank , D3a-Frank-6 ) ;
9402: LD_EXP 15
9406: PPUSH
9407: LD_STRING D3a-Frank-6
9409: PPUSH
9410: CALL_OW 88
// Say ( JMM , D3a-JMM-6 ) ;
9414: LD_EXP 9
9418: PPUSH
9419: LD_STRING D3a-JMM-6
9421: PPUSH
9422: CALL_OW 88
// Say ( Frank , D3a-Frank-7 ) ;
9426: LD_EXP 15
9430: PPUSH
9431: LD_STRING D3a-Frank-7
9433: PPUSH
9434: CALL_OW 88
// InGameOff ;
9438: CALL_OW 9
// end ;
9442: PPOPN 2
9444: END
// every 0 0$1 trigger Kikuchi and not Frank and FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , GetX ( Kikuchi ) , GetY ( Kikuchi ) , 7 ] ] ) and not InBattle ( 1 ) and not InBattle ( 4 ) do
9445: LD_EXP 18
9449: PUSH
9450: LD_EXP 15
9454: NOT
9455: AND
9456: PUSH
9457: LD_INT 22
9459: PUSH
9460: LD_INT 1
9462: PUSH
9463: EMPTY
9464: LIST
9465: LIST
9466: PUSH
9467: LD_INT 92
9469: PUSH
9470: LD_EXP 18
9474: PPUSH
9475: CALL_OW 250
9479: PUSH
9480: LD_EXP 18
9484: PPUSH
9485: CALL_OW 251
9489: PUSH
9490: LD_INT 7
9492: PUSH
9493: EMPTY
9494: LIST
9495: LIST
9496: LIST
9497: LIST
9498: PUSH
9499: EMPTY
9500: LIST
9501: LIST
9502: PPUSH
9503: CALL_OW 69
9507: AND
9508: PUSH
9509: LD_INT 1
9511: PPUSH
9512: CALL_OW 463
9516: NOT
9517: AND
9518: PUSH
9519: LD_INT 4
9521: PPUSH
9522: CALL_OW 463
9526: NOT
9527: AND
9528: IFFALSE 9708
9530: GO 9532
9532: DISABLE
// begin InGameOn ;
9533: CALL_OW 8
// ComTurnUnit ( JMM , Kikuchi ) ;
9537: LD_EXP 9
9541: PPUSH
9542: LD_EXP 18
9546: PPUSH
9547: CALL_OW 119
// ComTurnUnit ( Kikuchi , JMM ) ;
9551: LD_EXP 18
9555: PPUSH
9556: LD_EXP 9
9560: PPUSH
9561: CALL_OW 119
// CenterOnUnits ( Kikuchi ) ;
9565: LD_EXP 18
9569: PPUSH
9570: CALL_OW 85
// Say ( Kikuchi , D3b-Yam-1 ) ;
9574: LD_EXP 18
9578: PPUSH
9579: LD_STRING D3b-Yam-1
9581: PPUSH
9582: CALL_OW 88
// Say ( JMM , D3b-JMM-1 ) ;
9586: LD_EXP 9
9590: PPUSH
9591: LD_STRING D3b-JMM-1
9593: PPUSH
9594: CALL_OW 88
// RevealFogArea ( 1 , spotArea ) ;
9598: LD_INT 1
9600: PPUSH
9601: LD_INT 4
9603: PPUSH
9604: CALL_OW 332
// CenterOnXY ( 85 , 134 ) ;
9608: LD_INT 85
9610: PPUSH
9611: LD_INT 134
9613: PPUSH
9614: CALL_OW 84
// Say ( Kikuchi , D3b-Yam-2 ) ;
9618: LD_EXP 18
9622: PPUSH
9623: LD_STRING D3b-Yam-2
9625: PPUSH
9626: CALL_OW 88
// Wait ( 0 0$01 ) ;
9630: LD_INT 35
9632: PPUSH
9633: CALL_OW 67
// Say ( JMM , D3b-JMM-2 ) ;
9637: LD_EXP 9
9641: PPUSH
9642: LD_STRING D3b-JMM-2
9644: PPUSH
9645: CALL_OW 88
// CenterOnXY ( 166 , 136 ) ;
9649: LD_INT 166
9651: PPUSH
9652: LD_INT 136
9654: PPUSH
9655: CALL_OW 84
// Say ( Kikuchi , D3b-Yam-3 ) ;
9659: LD_EXP 18
9663: PPUSH
9664: LD_STRING D3b-Yam-3
9666: PPUSH
9667: CALL_OW 88
// CenterNowOnUnits ( JMM ) ;
9671: LD_EXP 9
9675: PPUSH
9676: CALL_OW 87
// Say ( JMM , D3b-JMM-3a ) ;
9680: LD_EXP 9
9684: PPUSH
9685: LD_STRING D3b-JMM-3a
9687: PPUSH
9688: CALL_OW 88
// SetSide ( Kikuchi , 1 ) ;
9692: LD_EXP 18
9696: PPUSH
9697: LD_INT 1
9699: PPUSH
9700: CALL_OW 235
// InGameOff ;
9704: CALL_OW 9
// end ;
9708: END
// every 0 0$1 trigger FilterUnitsInArea ( massDamageArea , [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] ] ) do var un , x , tw , i ;
9709: LD_INT 7
9711: PPUSH
9712: LD_INT 22
9714: PUSH
9715: LD_INT 1
9717: PUSH
9718: EMPTY
9719: LIST
9720: LIST
9721: PUSH
9722: LD_INT 3
9724: PUSH
9725: LD_INT 24
9727: PUSH
9728: LD_INT 1000
9730: PUSH
9731: EMPTY
9732: LIST
9733: LIST
9734: PUSH
9735: EMPTY
9736: LIST
9737: LIST
9738: PUSH
9739: EMPTY
9740: LIST
9741: LIST
9742: PPUSH
9743: CALL_OW 70
9747: IFFALSE 10203
9749: GO 9751
9751: DISABLE
9752: LD_INT 0
9754: PPUSH
9755: PPUSH
9756: PPUSH
9757: PPUSH
// begin repeat wait ( 0 0$1 ) ;
9758: LD_INT 35
9760: PPUSH
9761: CALL_OW 67
// un := FilterUnitsInArea ( massDamageArea , [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
9765: LD_ADDR_VAR 0 1
9769: PUSH
9770: LD_INT 7
9772: PPUSH
9773: LD_INT 22
9775: PUSH
9776: LD_INT 1
9778: PUSH
9779: EMPTY
9780: LIST
9781: LIST
9782: PUSH
9783: LD_INT 3
9785: PUSH
9786: LD_INT 24
9788: PUSH
9789: LD_INT 1000
9791: PUSH
9792: EMPTY
9793: LIST
9794: LIST
9795: PUSH
9796: EMPTY
9797: LIST
9798: LIST
9799: PUSH
9800: EMPTY
9801: LIST
9802: LIST
9803: PPUSH
9804: CALL_OW 70
9808: ST_TO_ADDR
// if not un then
9809: LD_VAR 0 1
9813: NOT
9814: IFFALSE 9818
// continue ;
9816: GO 9758
// tw := NearbyTowerHasEnergy ( un [ 1 ] ) ;
9818: LD_ADDR_VAR 0 3
9822: PUSH
9823: LD_VAR 0 1
9827: PUSH
9828: LD_INT 1
9830: ARRAY
9831: PPUSH
9832: CALL 2053 0 1
9836: ST_TO_ADDR
// until tw ;
9837: LD_VAR 0 3
9841: IFFALSE 9758
// DialogueOn ;
9843: CALL_OW 6
// CenterNowOnUnits ( tw ) ;
9847: LD_VAR 0 3
9851: PPUSH
9852: CALL_OW 87
// if Lisa then
9856: LD_EXP 14
9860: IFFALSE 9888
// begin Say ( Lisa , D5-Lisa-1 ) ;
9862: LD_EXP 14
9866: PPUSH
9867: LD_STRING D5-Lisa-1
9869: PPUSH
9870: CALL_OW 88
// Say ( JMM , D5-JMM-1a ) ;
9874: LD_EXP 9
9878: PPUSH
9879: LD_STRING D5-JMM-1a
9881: PPUSH
9882: CALL_OW 88
// end else
9886: GO 9900
// Say ( JMM , D5-JMM-1 ) ;
9888: LD_EXP 9
9892: PPUSH
9893: LD_STRING D5-JMM-1
9895: PPUSH
9896: CALL_OW 88
// DialogueOff ;
9900: CALL_OW 7
// while ( true ) do
9904: LD_INT 1
9906: IFFALSE 9962
// begin wait ( 0 0$01 ) ;
9908: LD_INT 35
9910: PPUSH
9911: CALL_OW 67
// x := FilterUnitsExceptArea ( northElectro , [ [ f_btype , b_oil_power ] , [ f_see , 1 ] ] ) ;
9915: LD_ADDR_VAR 0 2
9919: PUSH
9920: LD_INT 8
9922: PPUSH
9923: LD_INT 30
9925: PUSH
9926: LD_INT 26
9928: PUSH
9929: EMPTY
9930: LIST
9931: LIST
9932: PUSH
9933: LD_INT 101
9935: PUSH
9936: LD_INT 1
9938: PUSH
9939: EMPTY
9940: LIST
9941: LIST
9942: PUSH
9943: EMPTY
9944: LIST
9945: LIST
9946: PPUSH
9947: CALL_OW 71
9951: ST_TO_ADDR
// if x then
9952: LD_VAR 0 2
9956: IFFALSE 9960
// break ;
9958: GO 9962
// end ;
9960: GO 9904
// CenterOnUnits ( x [ 1 ] ) ;
9962: LD_VAR 0 2
9966: PUSH
9967: LD_INT 1
9969: ARRAY
9970: PPUSH
9971: CALL_OW 85
// if Frank and GetSide ( Frank ) = 1 then
9975: LD_EXP 15
9979: PUSH
9980: LD_EXP 15
9984: PPUSH
9985: CALL_OW 255
9989: PUSH
9990: LD_INT 1
9992: EQUAL
9993: AND
9994: IFFALSE 10010
// Say ( Frank , D5a-Frank-1 ) else
9996: LD_EXP 15
10000: PPUSH
10001: LD_STRING D5a-Frank-1
10003: PPUSH
10004: CALL_OW 88
10008: GO 10064
// if Kikuchi and GetSide ( Kikuchi ) = 1 then
10010: LD_EXP 18
10014: PUSH
10015: LD_EXP 18
10019: PPUSH
10020: CALL_OW 255
10024: PUSH
10025: LD_INT 1
10027: EQUAL
10028: AND
10029: IFFALSE 10045
// Say ( Kikuchi , D5a-Yam-1 ) else
10031: LD_EXP 18
10035: PPUSH
10036: LD_STRING D5a-Yam-1
10038: PPUSH
10039: CALL_OW 88
10043: GO 10064
// Say ( GetRandom ( sex_male ) [ 1 ] , D5a-Sol1-1 ) ;
10045: LD_INT 1
10047: PPUSH
10048: CALL 608 0 1
10052: PUSH
10053: LD_INT 1
10055: ARRAY
10056: PPUSH
10057: LD_STRING D5a-Sol1-1
10059: PPUSH
10060: CALL_OW 88
// Say ( JMM , D5a-JMM-1 ) ;
10064: LD_EXP 9
10068: PPUSH
10069: LD_STRING D5a-JMM-1
10071: PPUSH
10072: CALL_OW 88
// if Cyrus then
10076: LD_EXP 13
10080: IFFALSE 10094
// Say ( Cyrus , D5a-Cyrus-1 ) ;
10082: LD_EXP 13
10086: PPUSH
10087: LD_STRING D5a-Cyrus-1
10089: PPUSH
10090: CALL_OW 88
// x := false ;
10094: LD_ADDR_VAR 0 2
10098: PUSH
10099: LD_INT 0
10101: ST_TO_ADDR
// while ( true ) do
10102: LD_INT 1
10104: IFFALSE 10191
// begin wait ( 0 0$01 ) ;
10106: LD_INT 35
10108: PPUSH
10109: CALL_OW 67
// for i in FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) diff ru_dep_west do
10113: LD_ADDR_VAR 0 4
10117: PUSH
10118: LD_INT 2
10120: PUSH
10121: LD_INT 30
10123: PUSH
10124: LD_INT 0
10126: PUSH
10127: EMPTY
10128: LIST
10129: LIST
10130: PUSH
10131: LD_INT 30
10133: PUSH
10134: LD_INT 1
10136: PUSH
10137: EMPTY
10138: LIST
10139: LIST
10140: PUSH
10141: EMPTY
10142: LIST
10143: LIST
10144: LIST
10145: PPUSH
10146: CALL_OW 69
10150: PUSH
10151: LD_INT 1
10153: DIFF
10154: PUSH
10155: FOR_IN
10156: IFFALSE 10179
// if BaseNeedEnergy ( i ) then
10158: LD_VAR 0 4
10162: PPUSH
10163: CALL 1178 0 1
10167: IFFALSE 10177
// x := true ;
10169: LD_ADDR_VAR 0 2
10173: PUSH
10174: LD_INT 1
10176: ST_TO_ADDR
10177: GO 10155
10179: POP
10180: POP
// if x then
10181: LD_VAR 0 2
10185: IFFALSE 10189
// break ;
10187: GO 10191
// end ;
10189: GO 10102
// Say ( JMM , D5b-JMM-1 ) ;
10191: LD_EXP 9
10195: PPUSH
10196: LD_STRING D5b-JMM-1
10198: PPUSH
10199: CALL_OW 88
// end ;
10203: PPOPN 4
10205: END
// every 0 0$1 trigger time_to_end [ 1 ] < tick or FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) < 10 do
10206: LD_EXP 5
10210: PUSH
10211: LD_INT 1
10213: ARRAY
10214: PUSH
10215: LD_OWVAR 1
10219: LESS
10220: PUSH
10221: LD_INT 22
10223: PUSH
10224: LD_INT 3
10226: PUSH
10227: EMPTY
10228: LIST
10229: LIST
10230: PUSH
10231: LD_INT 21
10233: PUSH
10234: LD_INT 3
10236: PUSH
10237: EMPTY
10238: LIST
10239: LIST
10240: PUSH
10241: EMPTY
10242: LIST
10243: LIST
10244: PPUSH
10245: CALL_OW 69
10249: PUSH
10250: LD_INT 10
10252: LESS
10253: OR
10254: IFFALSE 10454
10256: GO 10258
10258: DISABLE
// begin if not IsDead ( ru_dep_main ) then
10259: LD_INT 16
10261: PPUSH
10262: CALL_OW 301
10266: NOT
10267: IFFALSE 10290
// begin SayRadio ( Harisson , D3b-Har-3 ) ;
10269: LD_EXP 19
10273: PPUSH
10274: LD_STRING D3b-Har-3
10276: PPUSH
10277: CALL_OW 94
// ChangeMissionObjectives ( M2a ) ;
10281: LD_STRING M2a
10283: PPUSH
10284: CALL_OW 337
// end else
10288: GO 10309
// begin SayRadio ( Harisson , D3b-Har-3a ) ;
10290: LD_EXP 19
10294: PPUSH
10295: LD_STRING D3b-Har-3a
10297: PPUSH
10298: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
10302: LD_STRING M2
10304: PPUSH
10305: CALL_OW 337
// end ; can_end := true ;
10309: LD_ADDR_EXP 6
10313: PUSH
10314: LD_INT 1
10316: ST_TO_ADDR
// SetAreaMapShow ( endArea , 1 ) ;
10317: LD_INT 9
10319: PPUSH
10320: LD_INT 1
10322: PPUSH
10323: CALL_OW 424
// Wait ( 0 0$02 ) ;
10327: LD_INT 70
10329: PPUSH
10330: CALL_OW 67
// if Lisa then
10334: LD_EXP 14
10338: IFFALSE 10352
// Say ( Lisa , D3b-Lisa ) ;
10340: LD_EXP 14
10344: PPUSH
10345: LD_STRING D3b-Lisa
10347: PPUSH
10348: CALL_OW 88
// if Bobby then
10352: LD_EXP 12
10356: IFFALSE 10370
// Say ( Bobby , D3b-Bobby-3 ) ;
10358: LD_EXP 12
10362: PPUSH
10363: LD_STRING D3b-Bobby-3
10365: PPUSH
10366: CALL_OW 88
// if Cyrus then
10370: LD_EXP 13
10374: IFFALSE 10388
// Say ( Cyrus , D3b-Cyrus-3 ) ;
10376: LD_EXP 13
10380: PPUSH
10381: LD_STRING D3b-Cyrus-3
10383: PPUSH
10384: CALL_OW 88
// if Frank and GetSide ( Frank ) = 1 then
10388: LD_EXP 15
10392: PUSH
10393: LD_EXP 15
10397: PPUSH
10398: CALL_OW 255
10402: PUSH
10403: LD_INT 1
10405: EQUAL
10406: AND
10407: IFFALSE 10421
// Say ( Frank , D3b-Frank-3 ) ;
10409: LD_EXP 15
10413: PPUSH
10414: LD_STRING D3b-Frank-3
10416: PPUSH
10417: CALL_OW 88
// if Kikuchi and GetSide ( Kikuchi ) = 1 then
10421: LD_EXP 18
10425: PUSH
10426: LD_EXP 18
10430: PPUSH
10431: CALL_OW 255
10435: PUSH
10436: LD_INT 1
10438: EQUAL
10439: AND
10440: IFFALSE 10454
// Say ( Kikuchi , D3b-Yam-4 ) ;
10442: LD_EXP 18
10446: PPUSH
10447: LD_STRING D3b-Yam-4
10449: PPUSH
10450: CALL_OW 88
// end ;
10454: END
// every 0 0$1 trigger time_to_end [ 2 ] < tick do
10455: LD_EXP 5
10459: PUSH
10460: LD_INT 2
10462: ARRAY
10463: PUSH
10464: LD_OWVAR 1
10468: LESS
10469: IFFALSE 10501
10471: GO 10473
10473: DISABLE
// begin SayRadio ( Harisson , D4-Har-1 ) ;
10474: LD_EXP 19
10478: PPUSH
10479: LD_STRING D4-Har-1
10481: PPUSH
10482: CALL_OW 94
// ChangeMissionObjectives ( M3 ) ;
10486: LD_STRING M3
10488: PPUSH
10489: CALL_OW 337
// must_end := true ;
10493: LD_ADDR_EXP 7
10497: PUSH
10498: LD_INT 1
10500: ST_TO_ADDR
// end ;
10501: END
// every 0 0$01 trigger time_to_end [ 3 ] < tick do
10502: LD_EXP 5
10506: PUSH
10507: LD_INT 3
10509: ARRAY
10510: PUSH
10511: LD_OWVAR 1
10515: LESS
10516: IFFALSE 10547
10518: GO 10520
10520: DISABLE
// begin if not IsDead ( ru_dep_main ) then
10521: LD_INT 16
10523: PPUSH
10524: CALL_OW 301
10528: NOT
10529: IFFALSE 10540
// YouLost ( TimeOut1 ) else
10531: LD_STRING TimeOut1
10533: PPUSH
10534: CALL_OW 104
10538: GO 10547
// YouLost ( TimeOut2 ) ;
10540: LD_STRING TimeOut2
10542: PPUSH
10543: CALL_OW 104
// end ;
10547: END
// every 0 0$1 trigger IsInArea ( JMM , endArea ) and can_end do var wait_on , i , tmp , m1 , m2 , m3 ;
10548: LD_EXP 9
10552: PPUSH
10553: LD_INT 9
10555: PPUSH
10556: CALL_OW 308
10560: PUSH
10561: LD_EXP 6
10565: AND
10566: IFFALSE 11666
10568: GO 10570
10570: DISABLE
10571: LD_INT 0
10573: PPUSH
10574: PPUSH
10575: PPUSH
10576: PPUSH
10577: PPUSH
10578: PPUSH
// begin wait_on := false ;
10579: LD_ADDR_VAR 0 1
10583: PUSH
10584: LD_INT 0
10586: ST_TO_ADDR
// if FilterPeople ( 1 ) + 0 > ( FilterPeopleArea ( 1 , endArea ) ^ FilterDriversArea ( 1 , endArea ) ) + 0 then
10587: LD_INT 1
10589: PPUSH
10590: CALL 1255 0 1
10594: PUSH
10595: LD_INT 0
10597: PLUS
10598: PUSH
10599: LD_INT 1
10601: PPUSH
10602: LD_INT 9
10604: PPUSH
10605: CALL 1346 0 2
10609: PUSH
10610: LD_INT 1
10612: PPUSH
10613: LD_INT 9
10615: PPUSH
10616: CALL 1393 0 2
10620: ADD
10621: PUSH
10622: LD_INT 0
10624: PLUS
10625: GREATER
10626: IFFALSE 10675
// case Query ( Q1 ) of 1 :
10628: LD_STRING Q1
10630: PPUSH
10631: CALL_OW 97
10635: PUSH
10636: LD_INT 1
10638: DOUBLE
10639: EQUAL
10640: IFTRUE 10644
10642: GO 10655
10644: POP
// wait_on := true ; 2 :
10645: LD_ADDR_VAR 0 1
10649: PUSH
10650: LD_INT 1
10652: ST_TO_ADDR
10653: GO 10675
10655: LD_INT 2
10657: DOUBLE
10658: EQUAL
10659: IFTRUE 10663
10661: GO 10674
10663: POP
// wait_on := false ; end ;
10664: LD_ADDR_VAR 0 1
10668: PUSH
10669: LD_INT 0
10671: ST_TO_ADDR
10672: GO 10675
10674: POP
// repeat wait ( 0 0$01 ) ;
10675: LD_INT 35
10677: PPUSH
10678: CALL_OW 67
// until ( not wait_on ) or ( FilterPeople ( 1 ) + 0 ) = ( FilterPeopleArea ( 1 , endArea ) ^ FilterDriversArea ( 1 , endArea ) ) + 0 ;
10682: LD_VAR 0 1
10686: NOT
10687: PUSH
10688: LD_INT 1
10690: PPUSH
10691: CALL 1255 0 1
10695: PUSH
10696: LD_INT 0
10698: PLUS
10699: PUSH
10700: LD_INT 1
10702: PPUSH
10703: LD_INT 9
10705: PPUSH
10706: CALL 1346 0 2
10710: PUSH
10711: LD_INT 1
10713: PPUSH
10714: LD_INT 9
10716: PPUSH
10717: CALL 1393 0 2
10721: ADD
10722: PUSH
10723: LD_INT 0
10725: PLUS
10726: EQUAL
10727: OR
10728: IFFALSE 10675
// DialogueOn ;
10730: CALL_OW 6
// CenterNowOnUnits ( JMM ) ;
10734: LD_EXP 9
10738: PPUSH
10739: CALL_OW 87
// Say ( JMM , D6-JMM-1 ) ;
10743: LD_EXP 9
10747: PPUSH
10748: LD_STRING D6-JMM-1
10750: PPUSH
10751: CALL_OW 88
// SayRadio ( Harisson , D6-Har-1 ) ;
10755: LD_EXP 19
10759: PPUSH
10760: LD_STRING D6-Har-1
10762: PPUSH
10763: CALL_OW 94
// Say ( JMM , D6-JMM-2 ) ;
10767: LD_EXP 9
10771: PPUSH
10772: LD_STRING D6-JMM-2
10774: PPUSH
10775: CALL_OW 88
// SayRadio ( Harisson , D6-Har-2 ) ;
10779: LD_EXP 19
10783: PPUSH
10784: LD_STRING D6-Har-2
10786: PPUSH
10787: CALL_OW 94
// Say ( JMM , D6-JMM-3 ) ;
10791: LD_EXP 9
10795: PPUSH
10796: LD_STRING D6-JMM-3
10798: PPUSH
10799: CALL_OW 88
// SayRadio ( Harisson , D6-Har-3 ) ;
10803: LD_EXP 19
10807: PPUSH
10808: LD_STRING D6-Har-3
10810: PPUSH
10811: CALL_OW 94
// Say ( JMM , D6-JMM-4 ) ;
10815: LD_EXP 9
10819: PPUSH
10820: LD_STRING D6-JMM-4
10822: PPUSH
10823: CALL_OW 88
// SayRadio ( Harisson , D6-Har-4 ) ;
10827: LD_EXP 19
10831: PPUSH
10832: LD_STRING D6-Har-4
10834: PPUSH
10835: CALL_OW 94
// Say ( JMM , D6-JMM-5 ) ;
10839: LD_EXP 9
10843: PPUSH
10844: LD_STRING D6-JMM-5
10846: PPUSH
10847: CALL_OW 88
// DialogueOff ;
10851: CALL_OW 7
// m1 := false ;
10855: LD_ADDR_VAR 0 4
10859: PUSH
10860: LD_INT 0
10862: ST_TO_ADDR
// m2 := false ;
10863: LD_ADDR_VAR 0 5
10867: PUSH
10868: LD_INT 0
10870: ST_TO_ADDR
// m3 := false ;
10871: LD_ADDR_VAR 0 6
10875: PUSH
10876: LD_INT 0
10878: ST_TO_ADDR
// tmp := FilterBuildings ( 3 ) ;
10879: LD_ADDR_VAR 0 3
10883: PUSH
10884: LD_INT 3
10886: PPUSH
10887: CALL 1524 0 1
10891: ST_TO_ADDR
// if tmp >= 35 then
10892: LD_VAR 0 3
10896: PUSH
10897: LD_INT 35
10899: GREATEREQUAL
10900: IFFALSE 10937
// begin AddMedal ( Destroy1 , - 1 ) ;
10902: LD_STRING Destroy1
10904: PPUSH
10905: LD_INT 1
10907: NEG
10908: PPUSH
10909: CALL_OW 101
// AddMedal ( Destroy2 , - 1 ) ;
10913: LD_STRING Destroy2
10915: PPUSH
10916: LD_INT 1
10918: NEG
10919: PPUSH
10920: CALL_OW 101
// AddMedal ( Destroy3 , - 1 ) ;
10924: LD_STRING Destroy3
10926: PPUSH
10927: LD_INT 1
10929: NEG
10930: PPUSH
10931: CALL_OW 101
// end else
10935: GO 11048
// begin AddMedal ( Destroy1 , 1 ) ;
10937: LD_STRING Destroy1
10939: PPUSH
10940: LD_INT 1
10942: PPUSH
10943: CALL_OW 101
// m1 := true ;
10947: LD_ADDR_VAR 0 4
10951: PUSH
10952: LD_INT 1
10954: ST_TO_ADDR
// if tmp >= 25 then
10955: LD_VAR 0 3
10959: PUSH
10960: LD_INT 25
10962: GREATEREQUAL
10963: IFFALSE 10989
// begin AddMedal ( Destroy2 , - 1 ) ;
10965: LD_STRING Destroy2
10967: PPUSH
10968: LD_INT 1
10970: NEG
10971: PPUSH
10972: CALL_OW 101
// AddMedal ( Destroy3 , - 1 ) ;
10976: LD_STRING Destroy3
10978: PPUSH
10979: LD_INT 1
10981: NEG
10982: PPUSH
10983: CALL_OW 101
// end else
10987: GO 11048
// begin AddMedal ( Destroy2 , 1 ) ;
10989: LD_STRING Destroy2
10991: PPUSH
10992: LD_INT 1
10994: PPUSH
10995: CALL_OW 101
// m2 := true ;
10999: LD_ADDR_VAR 0 5
11003: PUSH
11004: LD_INT 1
11006: ST_TO_ADDR
// if tmp >= 15 then
11007: LD_VAR 0 3
11011: PUSH
11012: LD_INT 15
11014: GREATEREQUAL
11015: IFFALSE 11030
// AddMedal ( Destroy3 , - 1 ) else
11017: LD_STRING Destroy3
11019: PPUSH
11020: LD_INT 1
11022: NEG
11023: PPUSH
11024: CALL_OW 101
11028: GO 11048
// begin AddMedal ( Destroy3 , 1 ) ;
11030: LD_STRING Destroy3
11032: PPUSH
11033: LD_INT 1
11035: PPUSH
11036: CALL_OW 101
// m3 := true ;
11040: LD_ADDR_VAR 0 6
11044: PUSH
11045: LD_INT 1
11047: ST_TO_ADDR
// end ; end ; end ; if tick <= 32 32$00 then
11048: LD_OWVAR 1
11052: PUSH
11053: LD_INT 67200
11055: LESSEQUAL
11056: IFFALSE 11065
// SetAchievement ( ACH_ASPEED_7 ) ;
11058: LD_STRING ACH_ASPEED_7
11060: PPUSH
11061: CALL_OW 543
// if m1 and m2 and m3 and Difficulty >= 3 then
11065: LD_VAR 0 4
11069: PUSH
11070: LD_VAR 0 5
11074: AND
11075: PUSH
11076: LD_VAR 0 6
11080: AND
11081: PUSH
11082: LD_OWVAR 67
11086: PUSH
11087: LD_INT 3
11089: GREATEREQUAL
11090: AND
11091: IFFALSE 11103
// SetAchievementEX ( ACH_AMER , 7 ) ;
11093: LD_STRING ACH_AMER
11095: PPUSH
11096: LD_INT 7
11098: PPUSH
11099: CALL_OW 564
// GiveMedals ( MAIN ) ;
11103: LD_STRING MAIN
11105: PPUSH
11106: CALL_OW 102
// tmp := FilterPeopleArea ( 1 , endArea ) union FilterDriversArea ( 1 , endArea ) ;
11110: LD_ADDR_VAR 0 3
11114: PUSH
11115: LD_INT 1
11117: PPUSH
11118: LD_INT 9
11120: PPUSH
11121: CALL 1346 0 2
11125: PUSH
11126: LD_INT 1
11128: PPUSH
11129: LD_INT 9
11131: PPUSH
11132: CALL 1393 0 2
11136: UNION
11137: ST_TO_ADDR
// RewardPeople ( tmp ) ;
11138: LD_VAR 0 3
11142: PPUSH
11143: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
11147: LD_EXP 9
11151: PPUSH
11152: LD_EXP 3
11156: PUSH
11157: LD_STRING JMM
11159: STR
11160: PPUSH
11161: CALL_OW 38
// if Brown in tmp then
11165: LD_EXP 10
11169: PUSH
11170: LD_VAR 0 3
11174: IN
11175: IFFALSE 11195
// SaveCharacters ( Brown , mission_prefix & Brown ) ;
11177: LD_EXP 10
11181: PPUSH
11182: LD_EXP 3
11186: PUSH
11187: LD_STRING Brown
11189: STR
11190: PPUSH
11191: CALL_OW 38
// if Donaldson in tmp then
11195: LD_EXP 11
11199: PUSH
11200: LD_VAR 0 3
11204: IN
11205: IFFALSE 11225
// SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
11207: LD_EXP 11
11211: PPUSH
11212: LD_EXP 3
11216: PUSH
11217: LD_STRING Donaldson
11219: STR
11220: PPUSH
11221: CALL_OW 38
// if Bobby in tmp then
11225: LD_EXP 12
11229: PUSH
11230: LD_VAR 0 3
11234: IN
11235: IFFALSE 11255
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
11237: LD_EXP 12
11241: PPUSH
11242: LD_EXP 3
11246: PUSH
11247: LD_STRING Bobby
11249: STR
11250: PPUSH
11251: CALL_OW 38
// if Cyrus in tmp then
11255: LD_EXP 13
11259: PUSH
11260: LD_VAR 0 3
11264: IN
11265: IFFALSE 11285
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
11267: LD_EXP 13
11271: PPUSH
11272: LD_EXP 3
11276: PUSH
11277: LD_STRING Cyrus
11279: STR
11280: PPUSH
11281: CALL_OW 38
// if Lisa in tmp then
11285: LD_EXP 14
11289: PUSH
11290: LD_VAR 0 3
11294: IN
11295: IFFALSE 11315
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
11297: LD_EXP 14
11301: PPUSH
11302: LD_EXP 3
11306: PUSH
11307: LD_STRING Lisa
11309: STR
11310: PPUSH
11311: CALL_OW 38
// if Frank in tmp then
11315: LD_EXP 15
11319: PUSH
11320: LD_VAR 0 3
11324: IN
11325: IFFALSE 11345
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
11327: LD_EXP 15
11331: PPUSH
11332: LD_EXP 3
11336: PUSH
11337: LD_STRING Frank
11339: STR
11340: PPUSH
11341: CALL_OW 38
// if Gladstone in tmp then
11345: LD_EXP 16
11349: PUSH
11350: LD_VAR 0 3
11354: IN
11355: IFFALSE 11375
// SaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
11357: LD_EXP 16
11361: PPUSH
11362: LD_EXP 3
11366: PUSH
11367: LD_STRING Gladstone
11369: STR
11370: PPUSH
11371: CALL_OW 38
// if Khatam in tmp then
11375: LD_EXP 17
11379: PUSH
11380: LD_VAR 0 3
11384: IN
11385: IFFALSE 11405
// SaveCharacters ( Khatam , mission_prefix & Khatam ) ;
11387: LD_EXP 17
11391: PPUSH
11392: LD_EXP 3
11396: PUSH
11397: LD_STRING Khatam
11399: STR
11400: PPUSH
11401: CALL_OW 38
// if Kikuchi in tmp then
11405: LD_EXP 18
11409: PUSH
11410: LD_VAR 0 3
11414: IN
11415: IFFALSE 11435
// SaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
11417: LD_EXP 18
11421: PPUSH
11422: LD_EXP 3
11426: PUSH
11427: LD_STRING Kikuchi
11429: STR
11430: PPUSH
11431: CALL_OW 38
// SaveCharacters ( tmp diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam ] , mission_prefix & others ) ;
11435: LD_VAR 0 3
11439: PUSH
11440: LD_EXP 9
11444: PUSH
11445: LD_EXP 10
11449: PUSH
11450: LD_EXP 11
11454: PUSH
11455: LD_EXP 12
11459: PUSH
11460: LD_EXP 13
11464: PUSH
11465: LD_EXP 14
11469: PUSH
11470: LD_EXP 15
11474: PUSH
11475: LD_EXP 16
11479: PUSH
11480: LD_EXP 18
11484: PUSH
11485: LD_EXP 17
11489: PUSH
11490: EMPTY
11491: LIST
11492: LIST
11493: LIST
11494: LIST
11495: LIST
11496: LIST
11497: LIST
11498: LIST
11499: LIST
11500: LIST
11501: DIFF
11502: PPUSH
11503: LD_EXP 3
11507: PUSH
11508: LD_STRING others
11510: STR
11511: PPUSH
11512: CALL_OW 38
// SaveVariable ( tick , 07_time ) ;
11516: LD_OWVAR 1
11520: PPUSH
11521: LD_STRING 07_time
11523: PPUSH
11524: CALL_OW 39
// tmp := [ ] ;
11528: LD_ADDR_VAR 0 3
11532: PUSH
11533: EMPTY
11534: ST_TO_ADDR
// for i in FilterUnitsInArea ( endArea , [ [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_vehicle ] ] ] ) do
11535: LD_ADDR_VAR 0 2
11539: PUSH
11540: LD_INT 9
11542: PPUSH
11543: LD_INT 22
11545: PUSH
11546: LD_INT 1
11548: PUSH
11549: EMPTY
11550: LIST
11551: LIST
11552: PUSH
11553: LD_INT 23
11555: PUSH
11556: LD_INT 1
11558: PUSH
11559: EMPTY
11560: LIST
11561: LIST
11562: PUSH
11563: LD_INT 21
11565: PUSH
11566: LD_INT 2
11568: PUSH
11569: EMPTY
11570: LIST
11571: LIST
11572: PUSH
11573: EMPTY
11574: LIST
11575: LIST
11576: LIST
11577: PUSH
11578: EMPTY
11579: LIST
11580: PPUSH
11581: CALL_OW 70
11585: PUSH
11586: FOR_IN
11587: IFFALSE 11648
// tmp := tmp ^ [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ;
11589: LD_ADDR_VAR 0 3
11593: PUSH
11594: LD_VAR 0 3
11598: PUSH
11599: LD_VAR 0 2
11603: PPUSH
11604: CALL_OW 265
11608: PUSH
11609: LD_VAR 0 2
11613: PPUSH
11614: CALL_OW 262
11618: PUSH
11619: LD_VAR 0 2
11623: PPUSH
11624: CALL_OW 263
11628: PUSH
11629: LD_VAR 0 2
11633: PPUSH
11634: CALL_OW 264
11638: PUSH
11639: EMPTY
11640: LIST
11641: LIST
11642: LIST
11643: LIST
11644: ADD
11645: ST_TO_ADDR
11646: GO 11586
11648: POP
11649: POP
// SaveVariable ( tmp , 07_vehicles ) ;
11650: LD_VAR 0 3
11654: PPUSH
11655: LD_STRING 07_vehicles
11657: PPUSH
11658: CALL_OW 39
// YouWin ;
11662: CALL_OW 103
// end ; end_of_file
11666: PPOPN 6
11668: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
11669: LD_VAR 0 1
11673: PPUSH
11674: CALL 26686 0 1
// if un = JMM then
11678: LD_VAR 0 1
11682: PUSH
11683: LD_EXP 9
11687: EQUAL
11688: IFFALSE 11697
// YouLost ( JMM ) ;
11690: LD_STRING JMM
11692: PPUSH
11693: CALL_OW 104
// if GetType ( un ) = unit_building then
11697: LD_VAR 0 1
11701: PPUSH
11702: CALL_OW 247
11706: PUSH
11707: LD_INT 3
11709: EQUAL
11710: IFFALSE 11726
// buildings_counter := buildings_counter + 1 ;
11712: LD_ADDR_EXP 4
11716: PUSH
11717: LD_EXP 4
11721: PUSH
11722: LD_INT 1
11724: PLUS
11725: ST_TO_ADDR
// if un in FilterUnitsInArea ( baseArea , [ f_or , [ f_btype , b_turret ] , [ f_btype , b_bunker ] ] ) then
11726: LD_VAR 0 1
11730: PUSH
11731: LD_INT 6
11733: PPUSH
11734: LD_INT 2
11736: PUSH
11737: LD_INT 30
11739: PUSH
11740: LD_INT 33
11742: PUSH
11743: EMPTY
11744: LIST
11745: LIST
11746: PUSH
11747: LD_INT 30
11749: PUSH
11750: LD_INT 32
11752: PUSH
11753: EMPTY
11754: LIST
11755: LIST
11756: PUSH
11757: EMPTY
11758: LIST
11759: LIST
11760: LIST
11761: PPUSH
11762: CALL_OW 70
11766: IN
11767: IFFALSE 11826
// ru_rebuild_list := ru_rebuild_list ^ [ GetBType ( un ) , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ;
11769: LD_ADDR_EXP 20
11773: PUSH
11774: LD_EXP 20
11778: PUSH
11779: LD_VAR 0 1
11783: PPUSH
11784: CALL_OW 266
11788: PUSH
11789: LD_VAR 0 1
11793: PPUSH
11794: CALL_OW 250
11798: PUSH
11799: LD_VAR 0 1
11803: PPUSH
11804: CALL_OW 251
11808: PUSH
11809: LD_VAR 0 1
11813: PPUSH
11814: CALL_OW 254
11818: PUSH
11819: EMPTY
11820: LIST
11821: LIST
11822: LIST
11823: LIST
11824: ADD
11825: ST_TO_ADDR
// if un = ru_dep_main then
11826: LD_VAR 0 1
11830: PUSH
11831: LD_INT 16
11833: EQUAL
11834: IFFALSE 11843
// ChangeMissionObjectives ( M1a ) ;
11836: LD_STRING M1a
11838: PPUSH
11839: CALL_OW 337
// if GetType ( un ) = unit_human and GetSide ( un ) = 3 then
11843: LD_VAR 0 1
11847: PPUSH
11848: CALL_OW 247
11852: PUSH
11853: LD_INT 1
11855: EQUAL
11856: PUSH
11857: LD_VAR 0 1
11861: PPUSH
11862: CALL_OW 255
11866: PUSH
11867: LD_INT 3
11869: EQUAL
11870: AND
11871: IFFALSE 11887
// kill_counter := kill_counter + 1 ;
11873: LD_ADDR_EXP 8
11877: PUSH
11878: LD_EXP 8
11882: PUSH
11883: LD_INT 1
11885: PLUS
11886: ST_TO_ADDR
// end ;
11887: PPOPN 1
11889: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
11890: LD_VAR 0 1
11894: PPUSH
11895: LD_VAR 0 2
11899: PPUSH
11900: CALL 26808 0 2
// end ;
11904: PPOPN 2
11906: END
// on UnitGoesToRed ( un ) do begin if GetBType ( un ) = b_bunker and GetTag ( un ) = 7 then
11907: LD_VAR 0 1
11911: PPUSH
11912: CALL_OW 266
11916: PUSH
11917: LD_INT 32
11919: EQUAL
11920: PUSH
11921: LD_VAR 0 1
11925: PPUSH
11926: CALL_OW 110
11930: PUSH
11931: LD_INT 7
11933: EQUAL
11934: AND
11935: IFFALSE 11949
// SetTag ( un , 0 ) ;
11937: LD_VAR 0 1
11941: PPUSH
11942: LD_INT 0
11944: PPUSH
11945: CALL_OW 109
// end ;
11949: PPOPN 1
11951: END
// on BuildingStarted ( b , builder ) do var i ;
11952: LD_INT 0
11954: PPUSH
// begin if GetSide ( b ) = 3 then
11955: LD_VAR 0 1
11959: PPUSH
11960: CALL_OW 255
11964: PUSH
11965: LD_INT 3
11967: EQUAL
11968: IFFALSE 12008
// for i = 1 to 4 do
11970: LD_ADDR_VAR 0 3
11974: PUSH
11975: DOUBLE
11976: LD_INT 1
11978: DEC
11979: ST_TO_ADDR
11980: LD_INT 4
11982: PUSH
11983: FOR_TO
11984: IFFALSE 12006
// ru_rebuild_list := Delete ( ru_rebuild_list , 1 ) ;
11986: LD_ADDR_EXP 20
11990: PUSH
11991: LD_EXP 20
11995: PPUSH
11996: LD_INT 1
11998: PPUSH
11999: CALL_OW 3
12003: ST_TO_ADDR
12004: GO 11983
12006: POP
12007: POP
// end ;
12008: PPOPN 3
12010: END
// on BuildingComplete ( b ) do if GetBType ( b ) in [ b_bunker , b_turret ] then
12011: LD_VAR 0 1
12015: PPUSH
12016: CALL_OW 266
12020: PUSH
12021: LD_INT 32
12023: PUSH
12024: LD_INT 33
12026: PUSH
12027: EMPTY
12028: LIST
12029: LIST
12030: IN
12031: IFFALSE 12045
// ComPlaceWeapon ( b , ru_gatling_gun ) ;
12033: LD_VAR 0 1
12037: PPUSH
12038: LD_INT 43
12040: PPUSH
12041: CALL_OW 148
12045: PPOPN 1
12047: END
// on LeaveBuilding ( b , un ) do begin if b in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) then
12048: LD_VAR 0 1
12052: PUSH
12053: LD_INT 22
12055: PUSH
12056: LD_INT 3
12058: PUSH
12059: EMPTY
12060: LIST
12061: LIST
12062: PUSH
12063: LD_INT 2
12065: PUSH
12066: LD_INT 30
12068: PUSH
12069: LD_INT 31
12071: PUSH
12072: EMPTY
12073: LIST
12074: LIST
12075: PUSH
12076: LD_INT 30
12078: PUSH
12079: LD_INT 32
12081: PUSH
12082: EMPTY
12083: LIST
12084: LIST
12085: PUSH
12086: EMPTY
12087: LIST
12088: LIST
12089: LIST
12090: PUSH
12091: EMPTY
12092: LIST
12093: LIST
12094: PPUSH
12095: CALL_OW 69
12099: IN
12100: IFFALSE 12122
// GoToAnotherTower ( un , b , 134 , 136 ) ;
12102: LD_VAR 0 2
12106: PPUSH
12107: LD_VAR 0 1
12111: PPUSH
12112: LD_INT 134
12114: PPUSH
12115: LD_INT 136
12117: PPUSH
12118: CALL 838 0 4
// end ;
12122: PPOPN 2
12124: END
// on EnterBuilding ( b , un ) do begin if b in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) then
12125: LD_VAR 0 1
12129: PUSH
12130: LD_INT 22
12132: PUSH
12133: LD_INT 3
12135: PUSH
12136: EMPTY
12137: LIST
12138: LIST
12139: PUSH
12140: LD_INT 30
12142: PUSH
12143: LD_INT 32
12145: PUSH
12146: EMPTY
12147: LIST
12148: LIST
12149: PUSH
12150: EMPTY
12151: LIST
12152: LIST
12153: PPUSH
12154: CALL_OW 69
12158: IN
12159: IFFALSE 12173
// SetTag ( b , 0 ) ;
12161: LD_VAR 0 1
12165: PPUSH
12166: LD_INT 0
12168: PPUSH
12169: CALL_OW 109
// end ; end_of_file
12173: PPOPN 2
12175: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
12176: LD_INT 0
12178: PPUSH
// ar_miner := 81 ;
12179: LD_ADDR_EXP 28
12183: PUSH
12184: LD_INT 81
12186: ST_TO_ADDR
// ar_crane := 88 ;
12187: LD_ADDR_EXP 27
12191: PUSH
12192: LD_INT 88
12194: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
12195: LD_ADDR_EXP 22
12199: PUSH
12200: LD_INT 89
12202: ST_TO_ADDR
// us_hack := 99 ;
12203: LD_ADDR_EXP 23
12207: PUSH
12208: LD_INT 99
12210: ST_TO_ADDR
// us_artillery := 97 ;
12211: LD_ADDR_EXP 24
12215: PUSH
12216: LD_INT 97
12218: ST_TO_ADDR
// ar_bio_bomb := 91 ;
12219: LD_ADDR_EXP 25
12223: PUSH
12224: LD_INT 91
12226: ST_TO_ADDR
// ar_mortar := 92 ;
12227: LD_ADDR_EXP 26
12231: PUSH
12232: LD_INT 92
12234: ST_TO_ADDR
// ru_flamethrower := 93 ;
12235: LD_ADDR_EXP 29
12239: PUSH
12240: LD_INT 93
12242: ST_TO_ADDR
// ru_radar := 98 ;
12243: LD_ADDR_EXP 21
12247: PUSH
12248: LD_INT 98
12250: ST_TO_ADDR
// tech_Artillery := 80 ;
12251: LD_ADDR_EXP 30
12255: PUSH
12256: LD_INT 80
12258: ST_TO_ADDR
// tech_RadMat := 81 ;
12259: LD_ADDR_EXP 31
12263: PUSH
12264: LD_INT 81
12266: ST_TO_ADDR
// tech_BasicTools := 82 ;
12267: LD_ADDR_EXP 32
12271: PUSH
12272: LD_INT 82
12274: ST_TO_ADDR
// tech_Cargo := 83 ;
12275: LD_ADDR_EXP 33
12279: PUSH
12280: LD_INT 83
12282: ST_TO_ADDR
// tech_Track := 84 ;
12283: LD_ADDR_EXP 34
12287: PUSH
12288: LD_INT 84
12290: ST_TO_ADDR
// tech_Crane := 85 ;
12291: LD_ADDR_EXP 35
12295: PUSH
12296: LD_INT 85
12298: ST_TO_ADDR
// tech_Bulldozer := 86 ;
12299: LD_ADDR_EXP 36
12303: PUSH
12304: LD_INT 86
12306: ST_TO_ADDR
// tech_Hovercraft := 87 ;
12307: LD_ADDR_EXP 37
12311: PUSH
12312: LD_INT 87
12314: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
12315: LD_ADDR_EXP 38
12319: PUSH
12320: LD_INT 88
12322: ST_TO_ADDR
// class_mastodont := 31 ;
12323: LD_ADDR_EXP 39
12327: PUSH
12328: LD_INT 31
12330: ST_TO_ADDR
// class_horse := 21 ;
12331: LD_ADDR_EXP 40
12335: PUSH
12336: LD_INT 21
12338: ST_TO_ADDR
// end ;
12339: LD_VAR 0 1
12343: RET
// every 1 do
12344: GO 12346
12346: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
12347: CALL 12176 0 0
12351: END
// every 0 0$1 do
12352: GO 12354
12354: DISABLE
// begin enable ;
12355: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
12356: LD_STRING updateTimer(
12358: PUSH
12359: LD_OWVAR 1
12363: STR
12364: PUSH
12365: LD_STRING );
12367: STR
12368: PPUSH
12369: CALL_OW 559
// end ;
12373: END
// export function SOS_MapStart ( ) ; begin
12374: LD_INT 0
12376: PPUSH
// if streamModeActive then
12377: LD_EXP 41
12381: IFFALSE 12390
// DefineStreamItems ( true ) ;
12383: LD_INT 1
12385: PPUSH
12386: CALL 14040 0 1
// UpdateFactoryWaypoints ( ) ;
12390: CALL 27624 0 0
// end ;
12394: LD_VAR 0 1
12398: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
12399: LD_INT 0
12401: PPUSH
// if p2 = 100 then
12402: LD_VAR 0 2
12406: PUSH
12407: LD_INT 100
12409: EQUAL
12410: IFFALSE 13413
// begin if not StreamModeActive then
12412: LD_EXP 41
12416: NOT
12417: IFFALSE 12427
// StreamModeActive := true ;
12419: LD_ADDR_EXP 41
12423: PUSH
12424: LD_INT 1
12426: ST_TO_ADDR
// if p3 = 0 then
12427: LD_VAR 0 3
12431: PUSH
12432: LD_INT 0
12434: EQUAL
12435: IFFALSE 12441
// InitStreamMode ;
12437: CALL 13576 0 0
// if p3 = 1 then
12441: LD_VAR 0 3
12445: PUSH
12446: LD_INT 1
12448: EQUAL
12449: IFFALSE 12459
// sRocket := true ;
12451: LD_ADDR_EXP 46
12455: PUSH
12456: LD_INT 1
12458: ST_TO_ADDR
// if p3 = 2 then
12459: LD_VAR 0 3
12463: PUSH
12464: LD_INT 2
12466: EQUAL
12467: IFFALSE 12477
// sSpeed := true ;
12469: LD_ADDR_EXP 45
12473: PUSH
12474: LD_INT 1
12476: ST_TO_ADDR
// if p3 = 3 then
12477: LD_VAR 0 3
12481: PUSH
12482: LD_INT 3
12484: EQUAL
12485: IFFALSE 12495
// sEngine := true ;
12487: LD_ADDR_EXP 47
12491: PUSH
12492: LD_INT 1
12494: ST_TO_ADDR
// if p3 = 4 then
12495: LD_VAR 0 3
12499: PUSH
12500: LD_INT 4
12502: EQUAL
12503: IFFALSE 12513
// sSpec := true ;
12505: LD_ADDR_EXP 44
12509: PUSH
12510: LD_INT 1
12512: ST_TO_ADDR
// if p3 = 5 then
12513: LD_VAR 0 3
12517: PUSH
12518: LD_INT 5
12520: EQUAL
12521: IFFALSE 12531
// sLevel := true ;
12523: LD_ADDR_EXP 48
12527: PUSH
12528: LD_INT 1
12530: ST_TO_ADDR
// if p3 = 6 then
12531: LD_VAR 0 3
12535: PUSH
12536: LD_INT 6
12538: EQUAL
12539: IFFALSE 12549
// sArmoury := true ;
12541: LD_ADDR_EXP 49
12545: PUSH
12546: LD_INT 1
12548: ST_TO_ADDR
// if p3 = 7 then
12549: LD_VAR 0 3
12553: PUSH
12554: LD_INT 7
12556: EQUAL
12557: IFFALSE 12567
// sRadar := true ;
12559: LD_ADDR_EXP 50
12563: PUSH
12564: LD_INT 1
12566: ST_TO_ADDR
// if p3 = 8 then
12567: LD_VAR 0 3
12571: PUSH
12572: LD_INT 8
12574: EQUAL
12575: IFFALSE 12585
// sBunker := true ;
12577: LD_ADDR_EXP 51
12581: PUSH
12582: LD_INT 1
12584: ST_TO_ADDR
// if p3 = 9 then
12585: LD_VAR 0 3
12589: PUSH
12590: LD_INT 9
12592: EQUAL
12593: IFFALSE 12603
// sHack := true ;
12595: LD_ADDR_EXP 52
12599: PUSH
12600: LD_INT 1
12602: ST_TO_ADDR
// if p3 = 10 then
12603: LD_VAR 0 3
12607: PUSH
12608: LD_INT 10
12610: EQUAL
12611: IFFALSE 12621
// sFire := true ;
12613: LD_ADDR_EXP 53
12617: PUSH
12618: LD_INT 1
12620: ST_TO_ADDR
// if p3 = 11 then
12621: LD_VAR 0 3
12625: PUSH
12626: LD_INT 11
12628: EQUAL
12629: IFFALSE 12639
// sRefresh := true ;
12631: LD_ADDR_EXP 54
12635: PUSH
12636: LD_INT 1
12638: ST_TO_ADDR
// if p3 = 12 then
12639: LD_VAR 0 3
12643: PUSH
12644: LD_INT 12
12646: EQUAL
12647: IFFALSE 12657
// sExp := true ;
12649: LD_ADDR_EXP 55
12653: PUSH
12654: LD_INT 1
12656: ST_TO_ADDR
// if p3 = 13 then
12657: LD_VAR 0 3
12661: PUSH
12662: LD_INT 13
12664: EQUAL
12665: IFFALSE 12675
// sDepot := true ;
12667: LD_ADDR_EXP 56
12671: PUSH
12672: LD_INT 1
12674: ST_TO_ADDR
// if p3 = 14 then
12675: LD_VAR 0 3
12679: PUSH
12680: LD_INT 14
12682: EQUAL
12683: IFFALSE 12693
// sFlag := true ;
12685: LD_ADDR_EXP 57
12689: PUSH
12690: LD_INT 1
12692: ST_TO_ADDR
// if p3 = 15 then
12693: LD_VAR 0 3
12697: PUSH
12698: LD_INT 15
12700: EQUAL
12701: IFFALSE 12711
// sKamikadze := true ;
12703: LD_ADDR_EXP 65
12707: PUSH
12708: LD_INT 1
12710: ST_TO_ADDR
// if p3 = 16 then
12711: LD_VAR 0 3
12715: PUSH
12716: LD_INT 16
12718: EQUAL
12719: IFFALSE 12729
// sTroll := true ;
12721: LD_ADDR_EXP 66
12725: PUSH
12726: LD_INT 1
12728: ST_TO_ADDR
// if p3 = 17 then
12729: LD_VAR 0 3
12733: PUSH
12734: LD_INT 17
12736: EQUAL
12737: IFFALSE 12747
// sSlow := true ;
12739: LD_ADDR_EXP 67
12743: PUSH
12744: LD_INT 1
12746: ST_TO_ADDR
// if p3 = 18 then
12747: LD_VAR 0 3
12751: PUSH
12752: LD_INT 18
12754: EQUAL
12755: IFFALSE 12765
// sLack := true ;
12757: LD_ADDR_EXP 68
12761: PUSH
12762: LD_INT 1
12764: ST_TO_ADDR
// if p3 = 19 then
12765: LD_VAR 0 3
12769: PUSH
12770: LD_INT 19
12772: EQUAL
12773: IFFALSE 12783
// sTank := true ;
12775: LD_ADDR_EXP 70
12779: PUSH
12780: LD_INT 1
12782: ST_TO_ADDR
// if p3 = 20 then
12783: LD_VAR 0 3
12787: PUSH
12788: LD_INT 20
12790: EQUAL
12791: IFFALSE 12801
// sRemote := true ;
12793: LD_ADDR_EXP 71
12797: PUSH
12798: LD_INT 1
12800: ST_TO_ADDR
// if p3 = 21 then
12801: LD_VAR 0 3
12805: PUSH
12806: LD_INT 21
12808: EQUAL
12809: IFFALSE 12819
// sPowell := true ;
12811: LD_ADDR_EXP 72
12815: PUSH
12816: LD_INT 1
12818: ST_TO_ADDR
// if p3 = 22 then
12819: LD_VAR 0 3
12823: PUSH
12824: LD_INT 22
12826: EQUAL
12827: IFFALSE 12837
// sTeleport := true ;
12829: LD_ADDR_EXP 75
12833: PUSH
12834: LD_INT 1
12836: ST_TO_ADDR
// if p3 = 23 then
12837: LD_VAR 0 3
12841: PUSH
12842: LD_INT 23
12844: EQUAL
12845: IFFALSE 12855
// sOilTower := true ;
12847: LD_ADDR_EXP 77
12851: PUSH
12852: LD_INT 1
12854: ST_TO_ADDR
// if p3 = 24 then
12855: LD_VAR 0 3
12859: PUSH
12860: LD_INT 24
12862: EQUAL
12863: IFFALSE 12873
// sShovel := true ;
12865: LD_ADDR_EXP 78
12869: PUSH
12870: LD_INT 1
12872: ST_TO_ADDR
// if p3 = 25 then
12873: LD_VAR 0 3
12877: PUSH
12878: LD_INT 25
12880: EQUAL
12881: IFFALSE 12891
// sSheik := true ;
12883: LD_ADDR_EXP 79
12887: PUSH
12888: LD_INT 1
12890: ST_TO_ADDR
// if p3 = 26 then
12891: LD_VAR 0 3
12895: PUSH
12896: LD_INT 26
12898: EQUAL
12899: IFFALSE 12909
// sEarthquake := true ;
12901: LD_ADDR_EXP 81
12905: PUSH
12906: LD_INT 1
12908: ST_TO_ADDR
// if p3 = 27 then
12909: LD_VAR 0 3
12913: PUSH
12914: LD_INT 27
12916: EQUAL
12917: IFFALSE 12927
// sAI := true ;
12919: LD_ADDR_EXP 82
12923: PUSH
12924: LD_INT 1
12926: ST_TO_ADDR
// if p3 = 28 then
12927: LD_VAR 0 3
12931: PUSH
12932: LD_INT 28
12934: EQUAL
12935: IFFALSE 12945
// sCargo := true ;
12937: LD_ADDR_EXP 85
12941: PUSH
12942: LD_INT 1
12944: ST_TO_ADDR
// if p3 = 29 then
12945: LD_VAR 0 3
12949: PUSH
12950: LD_INT 29
12952: EQUAL
12953: IFFALSE 12963
// sDLaser := true ;
12955: LD_ADDR_EXP 86
12959: PUSH
12960: LD_INT 1
12962: ST_TO_ADDR
// if p3 = 30 then
12963: LD_VAR 0 3
12967: PUSH
12968: LD_INT 30
12970: EQUAL
12971: IFFALSE 12981
// sExchange := true ;
12973: LD_ADDR_EXP 87
12977: PUSH
12978: LD_INT 1
12980: ST_TO_ADDR
// if p3 = 31 then
12981: LD_VAR 0 3
12985: PUSH
12986: LD_INT 31
12988: EQUAL
12989: IFFALSE 12999
// sFac := true ;
12991: LD_ADDR_EXP 88
12995: PUSH
12996: LD_INT 1
12998: ST_TO_ADDR
// if p3 = 32 then
12999: LD_VAR 0 3
13003: PUSH
13004: LD_INT 32
13006: EQUAL
13007: IFFALSE 13017
// sPower := true ;
13009: LD_ADDR_EXP 89
13013: PUSH
13014: LD_INT 1
13016: ST_TO_ADDR
// if p3 = 33 then
13017: LD_VAR 0 3
13021: PUSH
13022: LD_INT 33
13024: EQUAL
13025: IFFALSE 13035
// sRandom := true ;
13027: LD_ADDR_EXP 90
13031: PUSH
13032: LD_INT 1
13034: ST_TO_ADDR
// if p3 = 34 then
13035: LD_VAR 0 3
13039: PUSH
13040: LD_INT 34
13042: EQUAL
13043: IFFALSE 13053
// sShield := true ;
13045: LD_ADDR_EXP 91
13049: PUSH
13050: LD_INT 1
13052: ST_TO_ADDR
// if p3 = 35 then
13053: LD_VAR 0 3
13057: PUSH
13058: LD_INT 35
13060: EQUAL
13061: IFFALSE 13071
// sTime := true ;
13063: LD_ADDR_EXP 92
13067: PUSH
13068: LD_INT 1
13070: ST_TO_ADDR
// if p3 = 36 then
13071: LD_VAR 0 3
13075: PUSH
13076: LD_INT 36
13078: EQUAL
13079: IFFALSE 13089
// sTools := true ;
13081: LD_ADDR_EXP 93
13085: PUSH
13086: LD_INT 1
13088: ST_TO_ADDR
// if p3 = 101 then
13089: LD_VAR 0 3
13093: PUSH
13094: LD_INT 101
13096: EQUAL
13097: IFFALSE 13107
// sSold := true ;
13099: LD_ADDR_EXP 58
13103: PUSH
13104: LD_INT 1
13106: ST_TO_ADDR
// if p3 = 102 then
13107: LD_VAR 0 3
13111: PUSH
13112: LD_INT 102
13114: EQUAL
13115: IFFALSE 13125
// sDiff := true ;
13117: LD_ADDR_EXP 59
13121: PUSH
13122: LD_INT 1
13124: ST_TO_ADDR
// if p3 = 103 then
13125: LD_VAR 0 3
13129: PUSH
13130: LD_INT 103
13132: EQUAL
13133: IFFALSE 13143
// sFog := true ;
13135: LD_ADDR_EXP 62
13139: PUSH
13140: LD_INT 1
13142: ST_TO_ADDR
// if p3 = 104 then
13143: LD_VAR 0 3
13147: PUSH
13148: LD_INT 104
13150: EQUAL
13151: IFFALSE 13161
// sReset := true ;
13153: LD_ADDR_EXP 63
13157: PUSH
13158: LD_INT 1
13160: ST_TO_ADDR
// if p3 = 105 then
13161: LD_VAR 0 3
13165: PUSH
13166: LD_INT 105
13168: EQUAL
13169: IFFALSE 13179
// sSun := true ;
13171: LD_ADDR_EXP 64
13175: PUSH
13176: LD_INT 1
13178: ST_TO_ADDR
// if p3 = 106 then
13179: LD_VAR 0 3
13183: PUSH
13184: LD_INT 106
13186: EQUAL
13187: IFFALSE 13197
// sTiger := true ;
13189: LD_ADDR_EXP 60
13193: PUSH
13194: LD_INT 1
13196: ST_TO_ADDR
// if p3 = 107 then
13197: LD_VAR 0 3
13201: PUSH
13202: LD_INT 107
13204: EQUAL
13205: IFFALSE 13215
// sBomb := true ;
13207: LD_ADDR_EXP 61
13211: PUSH
13212: LD_INT 1
13214: ST_TO_ADDR
// if p3 = 108 then
13215: LD_VAR 0 3
13219: PUSH
13220: LD_INT 108
13222: EQUAL
13223: IFFALSE 13233
// sWound := true ;
13225: LD_ADDR_EXP 69
13229: PUSH
13230: LD_INT 1
13232: ST_TO_ADDR
// if p3 = 109 then
13233: LD_VAR 0 3
13237: PUSH
13238: LD_INT 109
13240: EQUAL
13241: IFFALSE 13251
// sBetray := true ;
13243: LD_ADDR_EXP 73
13247: PUSH
13248: LD_INT 1
13250: ST_TO_ADDR
// if p3 = 110 then
13251: LD_VAR 0 3
13255: PUSH
13256: LD_INT 110
13258: EQUAL
13259: IFFALSE 13269
// sContamin := true ;
13261: LD_ADDR_EXP 74
13265: PUSH
13266: LD_INT 1
13268: ST_TO_ADDR
// if p3 = 111 then
13269: LD_VAR 0 3
13273: PUSH
13274: LD_INT 111
13276: EQUAL
13277: IFFALSE 13287
// sOil := true ;
13279: LD_ADDR_EXP 76
13283: PUSH
13284: LD_INT 1
13286: ST_TO_ADDR
// if p3 = 112 then
13287: LD_VAR 0 3
13291: PUSH
13292: LD_INT 112
13294: EQUAL
13295: IFFALSE 13305
// sStu := true ;
13297: LD_ADDR_EXP 80
13301: PUSH
13302: LD_INT 1
13304: ST_TO_ADDR
// if p3 = 113 then
13305: LD_VAR 0 3
13309: PUSH
13310: LD_INT 113
13312: EQUAL
13313: IFFALSE 13323
// sBazooka := true ;
13315: LD_ADDR_EXP 83
13319: PUSH
13320: LD_INT 1
13322: ST_TO_ADDR
// if p3 = 114 then
13323: LD_VAR 0 3
13327: PUSH
13328: LD_INT 114
13330: EQUAL
13331: IFFALSE 13341
// sMortar := true ;
13333: LD_ADDR_EXP 84
13337: PUSH
13338: LD_INT 1
13340: ST_TO_ADDR
// if p3 = 115 then
13341: LD_VAR 0 3
13345: PUSH
13346: LD_INT 115
13348: EQUAL
13349: IFFALSE 13359
// sRanger := true ;
13351: LD_ADDR_EXP 94
13355: PUSH
13356: LD_INT 1
13358: ST_TO_ADDR
// if p3 = 116 then
13359: LD_VAR 0 3
13363: PUSH
13364: LD_INT 116
13366: EQUAL
13367: IFFALSE 13377
// sComputer := true ;
13369: LD_ADDR_EXP 95
13373: PUSH
13374: LD_INT 1
13376: ST_TO_ADDR
// if p3 = 117 then
13377: LD_VAR 0 3
13381: PUSH
13382: LD_INT 117
13384: EQUAL
13385: IFFALSE 13395
// s30 := true ;
13387: LD_ADDR_EXP 96
13391: PUSH
13392: LD_INT 1
13394: ST_TO_ADDR
// if p3 = 118 then
13395: LD_VAR 0 3
13399: PUSH
13400: LD_INT 118
13402: EQUAL
13403: IFFALSE 13413
// s60 := true ;
13405: LD_ADDR_EXP 97
13409: PUSH
13410: LD_INT 1
13412: ST_TO_ADDR
// end ; if p2 = 101 then
13413: LD_VAR 0 2
13417: PUSH
13418: LD_INT 101
13420: EQUAL
13421: IFFALSE 13549
// begin case p3 of 1 :
13423: LD_VAR 0 3
13427: PUSH
13428: LD_INT 1
13430: DOUBLE
13431: EQUAL
13432: IFTRUE 13436
13434: GO 13443
13436: POP
// hHackUnlimitedResources ; 2 :
13437: CALL 25647 0 0
13441: GO 13549
13443: LD_INT 2
13445: DOUBLE
13446: EQUAL
13447: IFTRUE 13451
13449: GO 13458
13451: POP
// hHackSetLevel10 ; 3 :
13452: CALL 25780 0 0
13456: GO 13549
13458: LD_INT 3
13460: DOUBLE
13461: EQUAL
13462: IFTRUE 13466
13464: GO 13473
13466: POP
// hHackSetLevel10YourUnits ; 4 :
13467: CALL 25865 0 0
13471: GO 13549
13473: LD_INT 4
13475: DOUBLE
13476: EQUAL
13477: IFTRUE 13481
13479: GO 13488
13481: POP
// hHackInvincible ; 5 :
13482: CALL 26313 0 0
13486: GO 13549
13488: LD_INT 5
13490: DOUBLE
13491: EQUAL
13492: IFTRUE 13496
13494: GO 13503
13496: POP
// hHackInvisible ; 6 :
13497: CALL 26424 0 0
13501: GO 13549
13503: LD_INT 6
13505: DOUBLE
13506: EQUAL
13507: IFTRUE 13511
13509: GO 13518
13511: POP
// hHackChangeYourSide ; 7 :
13512: CALL 26481 0 0
13516: GO 13549
13518: LD_INT 7
13520: DOUBLE
13521: EQUAL
13522: IFTRUE 13526
13524: GO 13533
13526: POP
// hHackChangeUnitSide ; 8 :
13527: CALL 26523 0 0
13531: GO 13549
13533: LD_INT 8
13535: DOUBLE
13536: EQUAL
13537: IFTRUE 13541
13539: GO 13548
13541: POP
// hHackFog ; end ;
13542: CALL 26624 0 0
13546: GO 13549
13548: POP
// end ; end ;
13549: LD_VAR 0 7
13553: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
13554: GO 13556
13556: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
13557: LD_STRING initStreamRollete();
13559: PPUSH
13560: CALL_OW 559
// InitStreamMode ;
13564: CALL 13576 0 0
// DefineStreamItems ( false ) ;
13568: LD_INT 0
13570: PPUSH
13571: CALL 14040 0 1
// end ;
13575: END
// function InitStreamMode ; begin
13576: LD_INT 0
13578: PPUSH
// streamModeActive := false ;
13579: LD_ADDR_EXP 41
13583: PUSH
13584: LD_INT 0
13586: ST_TO_ADDR
// normalCounter := 36 ;
13587: LD_ADDR_EXP 42
13591: PUSH
13592: LD_INT 36
13594: ST_TO_ADDR
// hardcoreCounter := 18 ;
13595: LD_ADDR_EXP 43
13599: PUSH
13600: LD_INT 18
13602: ST_TO_ADDR
// sRocket := false ;
13603: LD_ADDR_EXP 46
13607: PUSH
13608: LD_INT 0
13610: ST_TO_ADDR
// sSpeed := false ;
13611: LD_ADDR_EXP 45
13615: PUSH
13616: LD_INT 0
13618: ST_TO_ADDR
// sEngine := false ;
13619: LD_ADDR_EXP 47
13623: PUSH
13624: LD_INT 0
13626: ST_TO_ADDR
// sSpec := false ;
13627: LD_ADDR_EXP 44
13631: PUSH
13632: LD_INT 0
13634: ST_TO_ADDR
// sLevel := false ;
13635: LD_ADDR_EXP 48
13639: PUSH
13640: LD_INT 0
13642: ST_TO_ADDR
// sArmoury := false ;
13643: LD_ADDR_EXP 49
13647: PUSH
13648: LD_INT 0
13650: ST_TO_ADDR
// sRadar := false ;
13651: LD_ADDR_EXP 50
13655: PUSH
13656: LD_INT 0
13658: ST_TO_ADDR
// sBunker := false ;
13659: LD_ADDR_EXP 51
13663: PUSH
13664: LD_INT 0
13666: ST_TO_ADDR
// sHack := false ;
13667: LD_ADDR_EXP 52
13671: PUSH
13672: LD_INT 0
13674: ST_TO_ADDR
// sFire := false ;
13675: LD_ADDR_EXP 53
13679: PUSH
13680: LD_INT 0
13682: ST_TO_ADDR
// sRefresh := false ;
13683: LD_ADDR_EXP 54
13687: PUSH
13688: LD_INT 0
13690: ST_TO_ADDR
// sExp := false ;
13691: LD_ADDR_EXP 55
13695: PUSH
13696: LD_INT 0
13698: ST_TO_ADDR
// sDepot := false ;
13699: LD_ADDR_EXP 56
13703: PUSH
13704: LD_INT 0
13706: ST_TO_ADDR
// sFlag := false ;
13707: LD_ADDR_EXP 57
13711: PUSH
13712: LD_INT 0
13714: ST_TO_ADDR
// sKamikadze := false ;
13715: LD_ADDR_EXP 65
13719: PUSH
13720: LD_INT 0
13722: ST_TO_ADDR
// sTroll := false ;
13723: LD_ADDR_EXP 66
13727: PUSH
13728: LD_INT 0
13730: ST_TO_ADDR
// sSlow := false ;
13731: LD_ADDR_EXP 67
13735: PUSH
13736: LD_INT 0
13738: ST_TO_ADDR
// sLack := false ;
13739: LD_ADDR_EXP 68
13743: PUSH
13744: LD_INT 0
13746: ST_TO_ADDR
// sTank := false ;
13747: LD_ADDR_EXP 70
13751: PUSH
13752: LD_INT 0
13754: ST_TO_ADDR
// sRemote := false ;
13755: LD_ADDR_EXP 71
13759: PUSH
13760: LD_INT 0
13762: ST_TO_ADDR
// sPowell := false ;
13763: LD_ADDR_EXP 72
13767: PUSH
13768: LD_INT 0
13770: ST_TO_ADDR
// sTeleport := false ;
13771: LD_ADDR_EXP 75
13775: PUSH
13776: LD_INT 0
13778: ST_TO_ADDR
// sOilTower := false ;
13779: LD_ADDR_EXP 77
13783: PUSH
13784: LD_INT 0
13786: ST_TO_ADDR
// sShovel := false ;
13787: LD_ADDR_EXP 78
13791: PUSH
13792: LD_INT 0
13794: ST_TO_ADDR
// sSheik := false ;
13795: LD_ADDR_EXP 79
13799: PUSH
13800: LD_INT 0
13802: ST_TO_ADDR
// sEarthquake := false ;
13803: LD_ADDR_EXP 81
13807: PUSH
13808: LD_INT 0
13810: ST_TO_ADDR
// sAI := false ;
13811: LD_ADDR_EXP 82
13815: PUSH
13816: LD_INT 0
13818: ST_TO_ADDR
// sCargo := false ;
13819: LD_ADDR_EXP 85
13823: PUSH
13824: LD_INT 0
13826: ST_TO_ADDR
// sDLaser := false ;
13827: LD_ADDR_EXP 86
13831: PUSH
13832: LD_INT 0
13834: ST_TO_ADDR
// sExchange := false ;
13835: LD_ADDR_EXP 87
13839: PUSH
13840: LD_INT 0
13842: ST_TO_ADDR
// sFac := false ;
13843: LD_ADDR_EXP 88
13847: PUSH
13848: LD_INT 0
13850: ST_TO_ADDR
// sPower := false ;
13851: LD_ADDR_EXP 89
13855: PUSH
13856: LD_INT 0
13858: ST_TO_ADDR
// sRandom := false ;
13859: LD_ADDR_EXP 90
13863: PUSH
13864: LD_INT 0
13866: ST_TO_ADDR
// sShield := false ;
13867: LD_ADDR_EXP 91
13871: PUSH
13872: LD_INT 0
13874: ST_TO_ADDR
// sTime := false ;
13875: LD_ADDR_EXP 92
13879: PUSH
13880: LD_INT 0
13882: ST_TO_ADDR
// sTools := false ;
13883: LD_ADDR_EXP 93
13887: PUSH
13888: LD_INT 0
13890: ST_TO_ADDR
// sSold := false ;
13891: LD_ADDR_EXP 58
13895: PUSH
13896: LD_INT 0
13898: ST_TO_ADDR
// sDiff := false ;
13899: LD_ADDR_EXP 59
13903: PUSH
13904: LD_INT 0
13906: ST_TO_ADDR
// sFog := false ;
13907: LD_ADDR_EXP 62
13911: PUSH
13912: LD_INT 0
13914: ST_TO_ADDR
// sReset := false ;
13915: LD_ADDR_EXP 63
13919: PUSH
13920: LD_INT 0
13922: ST_TO_ADDR
// sSun := false ;
13923: LD_ADDR_EXP 64
13927: PUSH
13928: LD_INT 0
13930: ST_TO_ADDR
// sTiger := false ;
13931: LD_ADDR_EXP 60
13935: PUSH
13936: LD_INT 0
13938: ST_TO_ADDR
// sBomb := false ;
13939: LD_ADDR_EXP 61
13943: PUSH
13944: LD_INT 0
13946: ST_TO_ADDR
// sWound := false ;
13947: LD_ADDR_EXP 69
13951: PUSH
13952: LD_INT 0
13954: ST_TO_ADDR
// sBetray := false ;
13955: LD_ADDR_EXP 73
13959: PUSH
13960: LD_INT 0
13962: ST_TO_ADDR
// sContamin := false ;
13963: LD_ADDR_EXP 74
13967: PUSH
13968: LD_INT 0
13970: ST_TO_ADDR
// sOil := false ;
13971: LD_ADDR_EXP 76
13975: PUSH
13976: LD_INT 0
13978: ST_TO_ADDR
// sStu := false ;
13979: LD_ADDR_EXP 80
13983: PUSH
13984: LD_INT 0
13986: ST_TO_ADDR
// sBazooka := false ;
13987: LD_ADDR_EXP 83
13991: PUSH
13992: LD_INT 0
13994: ST_TO_ADDR
// sMortar := false ;
13995: LD_ADDR_EXP 84
13999: PUSH
14000: LD_INT 0
14002: ST_TO_ADDR
// sRanger := false ;
14003: LD_ADDR_EXP 94
14007: PUSH
14008: LD_INT 0
14010: ST_TO_ADDR
// sComputer := false ;
14011: LD_ADDR_EXP 95
14015: PUSH
14016: LD_INT 0
14018: ST_TO_ADDR
// s30 := false ;
14019: LD_ADDR_EXP 96
14023: PUSH
14024: LD_INT 0
14026: ST_TO_ADDR
// s60 := false ;
14027: LD_ADDR_EXP 97
14031: PUSH
14032: LD_INT 0
14034: ST_TO_ADDR
// end ;
14035: LD_VAR 0 1
14039: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
14040: LD_INT 0
14042: PPUSH
14043: PPUSH
14044: PPUSH
14045: PPUSH
14046: PPUSH
14047: PPUSH
14048: PPUSH
// result := [ ] ;
14049: LD_ADDR_VAR 0 2
14053: PUSH
14054: EMPTY
14055: ST_TO_ADDR
// if campaign_id = 1 then
14056: LD_OWVAR 69
14060: PUSH
14061: LD_INT 1
14063: EQUAL
14064: IFFALSE 17230
// begin case mission_number of 1 :
14066: LD_OWVAR 70
14070: PUSH
14071: LD_INT 1
14073: DOUBLE
14074: EQUAL
14075: IFTRUE 14079
14077: GO 14155
14079: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
14080: LD_ADDR_VAR 0 2
14084: PUSH
14085: LD_INT 2
14087: PUSH
14088: LD_INT 4
14090: PUSH
14091: LD_INT 11
14093: PUSH
14094: LD_INT 12
14096: PUSH
14097: LD_INT 15
14099: PUSH
14100: LD_INT 16
14102: PUSH
14103: LD_INT 22
14105: PUSH
14106: LD_INT 23
14108: PUSH
14109: LD_INT 26
14111: PUSH
14112: EMPTY
14113: LIST
14114: LIST
14115: LIST
14116: LIST
14117: LIST
14118: LIST
14119: LIST
14120: LIST
14121: LIST
14122: PUSH
14123: LD_INT 101
14125: PUSH
14126: LD_INT 102
14128: PUSH
14129: LD_INT 106
14131: PUSH
14132: LD_INT 116
14134: PUSH
14135: LD_INT 117
14137: PUSH
14138: LD_INT 118
14140: PUSH
14141: EMPTY
14142: LIST
14143: LIST
14144: LIST
14145: LIST
14146: LIST
14147: LIST
14148: PUSH
14149: EMPTY
14150: LIST
14151: LIST
14152: ST_TO_ADDR
14153: GO 17228
14155: LD_INT 2
14157: DOUBLE
14158: EQUAL
14159: IFTRUE 14163
14161: GO 14247
14163: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
14164: LD_ADDR_VAR 0 2
14168: PUSH
14169: LD_INT 2
14171: PUSH
14172: LD_INT 4
14174: PUSH
14175: LD_INT 11
14177: PUSH
14178: LD_INT 12
14180: PUSH
14181: LD_INT 15
14183: PUSH
14184: LD_INT 16
14186: PUSH
14187: LD_INT 22
14189: PUSH
14190: LD_INT 23
14192: PUSH
14193: LD_INT 26
14195: PUSH
14196: EMPTY
14197: LIST
14198: LIST
14199: LIST
14200: LIST
14201: LIST
14202: LIST
14203: LIST
14204: LIST
14205: LIST
14206: PUSH
14207: LD_INT 101
14209: PUSH
14210: LD_INT 102
14212: PUSH
14213: LD_INT 105
14215: PUSH
14216: LD_INT 106
14218: PUSH
14219: LD_INT 108
14221: PUSH
14222: LD_INT 116
14224: PUSH
14225: LD_INT 117
14227: PUSH
14228: LD_INT 118
14230: PUSH
14231: EMPTY
14232: LIST
14233: LIST
14234: LIST
14235: LIST
14236: LIST
14237: LIST
14238: LIST
14239: LIST
14240: PUSH
14241: EMPTY
14242: LIST
14243: LIST
14244: ST_TO_ADDR
14245: GO 17228
14247: LD_INT 3
14249: DOUBLE
14250: EQUAL
14251: IFTRUE 14255
14253: GO 14343
14255: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
14256: LD_ADDR_VAR 0 2
14260: PUSH
14261: LD_INT 2
14263: PUSH
14264: LD_INT 4
14266: PUSH
14267: LD_INT 5
14269: PUSH
14270: LD_INT 11
14272: PUSH
14273: LD_INT 12
14275: PUSH
14276: LD_INT 15
14278: PUSH
14279: LD_INT 16
14281: PUSH
14282: LD_INT 22
14284: PUSH
14285: LD_INT 26
14287: PUSH
14288: LD_INT 36
14290: PUSH
14291: EMPTY
14292: LIST
14293: LIST
14294: LIST
14295: LIST
14296: LIST
14297: LIST
14298: LIST
14299: LIST
14300: LIST
14301: LIST
14302: PUSH
14303: LD_INT 101
14305: PUSH
14306: LD_INT 102
14308: PUSH
14309: LD_INT 105
14311: PUSH
14312: LD_INT 106
14314: PUSH
14315: LD_INT 108
14317: PUSH
14318: LD_INT 116
14320: PUSH
14321: LD_INT 117
14323: PUSH
14324: LD_INT 118
14326: PUSH
14327: EMPTY
14328: LIST
14329: LIST
14330: LIST
14331: LIST
14332: LIST
14333: LIST
14334: LIST
14335: LIST
14336: PUSH
14337: EMPTY
14338: LIST
14339: LIST
14340: ST_TO_ADDR
14341: GO 17228
14343: LD_INT 4
14345: DOUBLE
14346: EQUAL
14347: IFTRUE 14351
14349: GO 14447
14351: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
14352: LD_ADDR_VAR 0 2
14356: PUSH
14357: LD_INT 2
14359: PUSH
14360: LD_INT 4
14362: PUSH
14363: LD_INT 5
14365: PUSH
14366: LD_INT 8
14368: PUSH
14369: LD_INT 11
14371: PUSH
14372: LD_INT 12
14374: PUSH
14375: LD_INT 15
14377: PUSH
14378: LD_INT 16
14380: PUSH
14381: LD_INT 22
14383: PUSH
14384: LD_INT 23
14386: PUSH
14387: LD_INT 26
14389: PUSH
14390: LD_INT 36
14392: PUSH
14393: EMPTY
14394: LIST
14395: LIST
14396: LIST
14397: LIST
14398: LIST
14399: LIST
14400: LIST
14401: LIST
14402: LIST
14403: LIST
14404: LIST
14405: LIST
14406: PUSH
14407: LD_INT 101
14409: PUSH
14410: LD_INT 102
14412: PUSH
14413: LD_INT 105
14415: PUSH
14416: LD_INT 106
14418: PUSH
14419: LD_INT 108
14421: PUSH
14422: LD_INT 116
14424: PUSH
14425: LD_INT 117
14427: PUSH
14428: LD_INT 118
14430: PUSH
14431: EMPTY
14432: LIST
14433: LIST
14434: LIST
14435: LIST
14436: LIST
14437: LIST
14438: LIST
14439: LIST
14440: PUSH
14441: EMPTY
14442: LIST
14443: LIST
14444: ST_TO_ADDR
14445: GO 17228
14447: LD_INT 5
14449: DOUBLE
14450: EQUAL
14451: IFTRUE 14455
14453: GO 14567
14455: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
14456: LD_ADDR_VAR 0 2
14460: PUSH
14461: LD_INT 2
14463: PUSH
14464: LD_INT 4
14466: PUSH
14467: LD_INT 5
14469: PUSH
14470: LD_INT 6
14472: PUSH
14473: LD_INT 8
14475: PUSH
14476: LD_INT 11
14478: PUSH
14479: LD_INT 12
14481: PUSH
14482: LD_INT 15
14484: PUSH
14485: LD_INT 16
14487: PUSH
14488: LD_INT 22
14490: PUSH
14491: LD_INT 23
14493: PUSH
14494: LD_INT 25
14496: PUSH
14497: LD_INT 26
14499: PUSH
14500: LD_INT 36
14502: PUSH
14503: EMPTY
14504: LIST
14505: LIST
14506: LIST
14507: LIST
14508: LIST
14509: LIST
14510: LIST
14511: LIST
14512: LIST
14513: LIST
14514: LIST
14515: LIST
14516: LIST
14517: LIST
14518: PUSH
14519: LD_INT 101
14521: PUSH
14522: LD_INT 102
14524: PUSH
14525: LD_INT 105
14527: PUSH
14528: LD_INT 106
14530: PUSH
14531: LD_INT 108
14533: PUSH
14534: LD_INT 109
14536: PUSH
14537: LD_INT 112
14539: PUSH
14540: LD_INT 116
14542: PUSH
14543: LD_INT 117
14545: PUSH
14546: LD_INT 118
14548: PUSH
14549: EMPTY
14550: LIST
14551: LIST
14552: LIST
14553: LIST
14554: LIST
14555: LIST
14556: LIST
14557: LIST
14558: LIST
14559: LIST
14560: PUSH
14561: EMPTY
14562: LIST
14563: LIST
14564: ST_TO_ADDR
14565: GO 17228
14567: LD_INT 6
14569: DOUBLE
14570: EQUAL
14571: IFTRUE 14575
14573: GO 14707
14575: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
14576: LD_ADDR_VAR 0 2
14580: PUSH
14581: LD_INT 2
14583: PUSH
14584: LD_INT 4
14586: PUSH
14587: LD_INT 5
14589: PUSH
14590: LD_INT 6
14592: PUSH
14593: LD_INT 8
14595: PUSH
14596: LD_INT 11
14598: PUSH
14599: LD_INT 12
14601: PUSH
14602: LD_INT 15
14604: PUSH
14605: LD_INT 16
14607: PUSH
14608: LD_INT 20
14610: PUSH
14611: LD_INT 21
14613: PUSH
14614: LD_INT 22
14616: PUSH
14617: LD_INT 23
14619: PUSH
14620: LD_INT 25
14622: PUSH
14623: LD_INT 26
14625: PUSH
14626: LD_INT 30
14628: PUSH
14629: LD_INT 31
14631: PUSH
14632: LD_INT 32
14634: PUSH
14635: LD_INT 36
14637: PUSH
14638: EMPTY
14639: LIST
14640: LIST
14641: LIST
14642: LIST
14643: LIST
14644: LIST
14645: LIST
14646: LIST
14647: LIST
14648: LIST
14649: LIST
14650: LIST
14651: LIST
14652: LIST
14653: LIST
14654: LIST
14655: LIST
14656: LIST
14657: LIST
14658: PUSH
14659: LD_INT 101
14661: PUSH
14662: LD_INT 102
14664: PUSH
14665: LD_INT 105
14667: PUSH
14668: LD_INT 106
14670: PUSH
14671: LD_INT 108
14673: PUSH
14674: LD_INT 109
14676: PUSH
14677: LD_INT 112
14679: PUSH
14680: LD_INT 116
14682: PUSH
14683: LD_INT 117
14685: PUSH
14686: LD_INT 118
14688: PUSH
14689: EMPTY
14690: LIST
14691: LIST
14692: LIST
14693: LIST
14694: LIST
14695: LIST
14696: LIST
14697: LIST
14698: LIST
14699: LIST
14700: PUSH
14701: EMPTY
14702: LIST
14703: LIST
14704: ST_TO_ADDR
14705: GO 17228
14707: LD_INT 7
14709: DOUBLE
14710: EQUAL
14711: IFTRUE 14715
14713: GO 14827
14715: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
14716: LD_ADDR_VAR 0 2
14720: PUSH
14721: LD_INT 2
14723: PUSH
14724: LD_INT 4
14726: PUSH
14727: LD_INT 5
14729: PUSH
14730: LD_INT 7
14732: PUSH
14733: LD_INT 11
14735: PUSH
14736: LD_INT 12
14738: PUSH
14739: LD_INT 15
14741: PUSH
14742: LD_INT 16
14744: PUSH
14745: LD_INT 20
14747: PUSH
14748: LD_INT 21
14750: PUSH
14751: LD_INT 22
14753: PUSH
14754: LD_INT 23
14756: PUSH
14757: LD_INT 25
14759: PUSH
14760: LD_INT 26
14762: PUSH
14763: EMPTY
14764: LIST
14765: LIST
14766: LIST
14767: LIST
14768: LIST
14769: LIST
14770: LIST
14771: LIST
14772: LIST
14773: LIST
14774: LIST
14775: LIST
14776: LIST
14777: LIST
14778: PUSH
14779: LD_INT 101
14781: PUSH
14782: LD_INT 102
14784: PUSH
14785: LD_INT 103
14787: PUSH
14788: LD_INT 105
14790: PUSH
14791: LD_INT 106
14793: PUSH
14794: LD_INT 108
14796: PUSH
14797: LD_INT 112
14799: PUSH
14800: LD_INT 116
14802: PUSH
14803: LD_INT 117
14805: PUSH
14806: LD_INT 118
14808: PUSH
14809: EMPTY
14810: LIST
14811: LIST
14812: LIST
14813: LIST
14814: LIST
14815: LIST
14816: LIST
14817: LIST
14818: LIST
14819: LIST
14820: PUSH
14821: EMPTY
14822: LIST
14823: LIST
14824: ST_TO_ADDR
14825: GO 17228
14827: LD_INT 8
14829: DOUBLE
14830: EQUAL
14831: IFTRUE 14835
14833: GO 14975
14835: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
14836: LD_ADDR_VAR 0 2
14840: PUSH
14841: LD_INT 2
14843: PUSH
14844: LD_INT 4
14846: PUSH
14847: LD_INT 5
14849: PUSH
14850: LD_INT 6
14852: PUSH
14853: LD_INT 7
14855: PUSH
14856: LD_INT 8
14858: PUSH
14859: LD_INT 11
14861: PUSH
14862: LD_INT 12
14864: PUSH
14865: LD_INT 15
14867: PUSH
14868: LD_INT 16
14870: PUSH
14871: LD_INT 20
14873: PUSH
14874: LD_INT 21
14876: PUSH
14877: LD_INT 22
14879: PUSH
14880: LD_INT 23
14882: PUSH
14883: LD_INT 25
14885: PUSH
14886: LD_INT 26
14888: PUSH
14889: LD_INT 30
14891: PUSH
14892: LD_INT 31
14894: PUSH
14895: LD_INT 32
14897: PUSH
14898: LD_INT 36
14900: PUSH
14901: EMPTY
14902: LIST
14903: LIST
14904: LIST
14905: LIST
14906: LIST
14907: LIST
14908: LIST
14909: LIST
14910: LIST
14911: LIST
14912: LIST
14913: LIST
14914: LIST
14915: LIST
14916: LIST
14917: LIST
14918: LIST
14919: LIST
14920: LIST
14921: LIST
14922: PUSH
14923: LD_INT 101
14925: PUSH
14926: LD_INT 102
14928: PUSH
14929: LD_INT 103
14931: PUSH
14932: LD_INT 105
14934: PUSH
14935: LD_INT 106
14937: PUSH
14938: LD_INT 108
14940: PUSH
14941: LD_INT 109
14943: PUSH
14944: LD_INT 112
14946: PUSH
14947: LD_INT 116
14949: PUSH
14950: LD_INT 117
14952: PUSH
14953: LD_INT 118
14955: PUSH
14956: EMPTY
14957: LIST
14958: LIST
14959: LIST
14960: LIST
14961: LIST
14962: LIST
14963: LIST
14964: LIST
14965: LIST
14966: LIST
14967: LIST
14968: PUSH
14969: EMPTY
14970: LIST
14971: LIST
14972: ST_TO_ADDR
14973: GO 17228
14975: LD_INT 9
14977: DOUBLE
14978: EQUAL
14979: IFTRUE 14983
14981: GO 15131
14983: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
14984: LD_ADDR_VAR 0 2
14988: PUSH
14989: LD_INT 2
14991: PUSH
14992: LD_INT 4
14994: PUSH
14995: LD_INT 5
14997: PUSH
14998: LD_INT 6
15000: PUSH
15001: LD_INT 7
15003: PUSH
15004: LD_INT 8
15006: PUSH
15007: LD_INT 11
15009: PUSH
15010: LD_INT 12
15012: PUSH
15013: LD_INT 15
15015: PUSH
15016: LD_INT 16
15018: PUSH
15019: LD_INT 20
15021: PUSH
15022: LD_INT 21
15024: PUSH
15025: LD_INT 22
15027: PUSH
15028: LD_INT 23
15030: PUSH
15031: LD_INT 25
15033: PUSH
15034: LD_INT 26
15036: PUSH
15037: LD_INT 28
15039: PUSH
15040: LD_INT 30
15042: PUSH
15043: LD_INT 31
15045: PUSH
15046: LD_INT 32
15048: PUSH
15049: LD_INT 36
15051: PUSH
15052: EMPTY
15053: LIST
15054: LIST
15055: LIST
15056: LIST
15057: LIST
15058: LIST
15059: LIST
15060: LIST
15061: LIST
15062: LIST
15063: LIST
15064: LIST
15065: LIST
15066: LIST
15067: LIST
15068: LIST
15069: LIST
15070: LIST
15071: LIST
15072: LIST
15073: LIST
15074: PUSH
15075: LD_INT 101
15077: PUSH
15078: LD_INT 102
15080: PUSH
15081: LD_INT 103
15083: PUSH
15084: LD_INT 105
15086: PUSH
15087: LD_INT 106
15089: PUSH
15090: LD_INT 108
15092: PUSH
15093: LD_INT 109
15095: PUSH
15096: LD_INT 112
15098: PUSH
15099: LD_INT 114
15101: PUSH
15102: LD_INT 116
15104: PUSH
15105: LD_INT 117
15107: PUSH
15108: LD_INT 118
15110: PUSH
15111: EMPTY
15112: LIST
15113: LIST
15114: LIST
15115: LIST
15116: LIST
15117: LIST
15118: LIST
15119: LIST
15120: LIST
15121: LIST
15122: LIST
15123: LIST
15124: PUSH
15125: EMPTY
15126: LIST
15127: LIST
15128: ST_TO_ADDR
15129: GO 17228
15131: LD_INT 10
15133: DOUBLE
15134: EQUAL
15135: IFTRUE 15139
15137: GO 15335
15139: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
15140: LD_ADDR_VAR 0 2
15144: PUSH
15145: LD_INT 2
15147: PUSH
15148: LD_INT 4
15150: PUSH
15151: LD_INT 5
15153: PUSH
15154: LD_INT 6
15156: PUSH
15157: LD_INT 7
15159: PUSH
15160: LD_INT 8
15162: PUSH
15163: LD_INT 9
15165: PUSH
15166: LD_INT 10
15168: PUSH
15169: LD_INT 11
15171: PUSH
15172: LD_INT 12
15174: PUSH
15175: LD_INT 13
15177: PUSH
15178: LD_INT 14
15180: PUSH
15181: LD_INT 15
15183: PUSH
15184: LD_INT 16
15186: PUSH
15187: LD_INT 17
15189: PUSH
15190: LD_INT 18
15192: PUSH
15193: LD_INT 19
15195: PUSH
15196: LD_INT 20
15198: PUSH
15199: LD_INT 21
15201: PUSH
15202: LD_INT 22
15204: PUSH
15205: LD_INT 23
15207: PUSH
15208: LD_INT 24
15210: PUSH
15211: LD_INT 25
15213: PUSH
15214: LD_INT 26
15216: PUSH
15217: LD_INT 28
15219: PUSH
15220: LD_INT 30
15222: PUSH
15223: LD_INT 31
15225: PUSH
15226: LD_INT 32
15228: PUSH
15229: LD_INT 36
15231: PUSH
15232: EMPTY
15233: LIST
15234: LIST
15235: LIST
15236: LIST
15237: LIST
15238: LIST
15239: LIST
15240: LIST
15241: LIST
15242: LIST
15243: LIST
15244: LIST
15245: LIST
15246: LIST
15247: LIST
15248: LIST
15249: LIST
15250: LIST
15251: LIST
15252: LIST
15253: LIST
15254: LIST
15255: LIST
15256: LIST
15257: LIST
15258: LIST
15259: LIST
15260: LIST
15261: LIST
15262: PUSH
15263: LD_INT 101
15265: PUSH
15266: LD_INT 102
15268: PUSH
15269: LD_INT 103
15271: PUSH
15272: LD_INT 104
15274: PUSH
15275: LD_INT 105
15277: PUSH
15278: LD_INT 106
15280: PUSH
15281: LD_INT 107
15283: PUSH
15284: LD_INT 108
15286: PUSH
15287: LD_INT 109
15289: PUSH
15290: LD_INT 110
15292: PUSH
15293: LD_INT 111
15295: PUSH
15296: LD_INT 112
15298: PUSH
15299: LD_INT 114
15301: PUSH
15302: LD_INT 116
15304: PUSH
15305: LD_INT 117
15307: PUSH
15308: LD_INT 118
15310: PUSH
15311: EMPTY
15312: LIST
15313: LIST
15314: LIST
15315: LIST
15316: LIST
15317: LIST
15318: LIST
15319: LIST
15320: LIST
15321: LIST
15322: LIST
15323: LIST
15324: LIST
15325: LIST
15326: LIST
15327: LIST
15328: PUSH
15329: EMPTY
15330: LIST
15331: LIST
15332: ST_TO_ADDR
15333: GO 17228
15335: LD_INT 11
15337: DOUBLE
15338: EQUAL
15339: IFTRUE 15343
15341: GO 15547
15343: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
15344: LD_ADDR_VAR 0 2
15348: PUSH
15349: LD_INT 2
15351: PUSH
15352: LD_INT 3
15354: PUSH
15355: LD_INT 4
15357: PUSH
15358: LD_INT 5
15360: PUSH
15361: LD_INT 6
15363: PUSH
15364: LD_INT 7
15366: PUSH
15367: LD_INT 8
15369: PUSH
15370: LD_INT 9
15372: PUSH
15373: LD_INT 10
15375: PUSH
15376: LD_INT 11
15378: PUSH
15379: LD_INT 12
15381: PUSH
15382: LD_INT 13
15384: PUSH
15385: LD_INT 14
15387: PUSH
15388: LD_INT 15
15390: PUSH
15391: LD_INT 16
15393: PUSH
15394: LD_INT 17
15396: PUSH
15397: LD_INT 18
15399: PUSH
15400: LD_INT 19
15402: PUSH
15403: LD_INT 20
15405: PUSH
15406: LD_INT 21
15408: PUSH
15409: LD_INT 22
15411: PUSH
15412: LD_INT 23
15414: PUSH
15415: LD_INT 24
15417: PUSH
15418: LD_INT 25
15420: PUSH
15421: LD_INT 26
15423: PUSH
15424: LD_INT 28
15426: PUSH
15427: LD_INT 30
15429: PUSH
15430: LD_INT 31
15432: PUSH
15433: LD_INT 32
15435: PUSH
15436: LD_INT 34
15438: PUSH
15439: LD_INT 36
15441: PUSH
15442: EMPTY
15443: LIST
15444: LIST
15445: LIST
15446: LIST
15447: LIST
15448: LIST
15449: LIST
15450: LIST
15451: LIST
15452: LIST
15453: LIST
15454: LIST
15455: LIST
15456: LIST
15457: LIST
15458: LIST
15459: LIST
15460: LIST
15461: LIST
15462: LIST
15463: LIST
15464: LIST
15465: LIST
15466: LIST
15467: LIST
15468: LIST
15469: LIST
15470: LIST
15471: LIST
15472: LIST
15473: LIST
15474: PUSH
15475: LD_INT 101
15477: PUSH
15478: LD_INT 102
15480: PUSH
15481: LD_INT 103
15483: PUSH
15484: LD_INT 104
15486: PUSH
15487: LD_INT 105
15489: PUSH
15490: LD_INT 106
15492: PUSH
15493: LD_INT 107
15495: PUSH
15496: LD_INT 108
15498: PUSH
15499: LD_INT 109
15501: PUSH
15502: LD_INT 110
15504: PUSH
15505: LD_INT 111
15507: PUSH
15508: LD_INT 112
15510: PUSH
15511: LD_INT 114
15513: PUSH
15514: LD_INT 116
15516: PUSH
15517: LD_INT 117
15519: PUSH
15520: LD_INT 118
15522: PUSH
15523: EMPTY
15524: LIST
15525: LIST
15526: LIST
15527: LIST
15528: LIST
15529: LIST
15530: LIST
15531: LIST
15532: LIST
15533: LIST
15534: LIST
15535: LIST
15536: LIST
15537: LIST
15538: LIST
15539: LIST
15540: PUSH
15541: EMPTY
15542: LIST
15543: LIST
15544: ST_TO_ADDR
15545: GO 17228
15547: LD_INT 12
15549: DOUBLE
15550: EQUAL
15551: IFTRUE 15555
15553: GO 15775
15555: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
15556: LD_ADDR_VAR 0 2
15560: PUSH
15561: LD_INT 1
15563: PUSH
15564: LD_INT 2
15566: PUSH
15567: LD_INT 3
15569: PUSH
15570: LD_INT 4
15572: PUSH
15573: LD_INT 5
15575: PUSH
15576: LD_INT 6
15578: PUSH
15579: LD_INT 7
15581: PUSH
15582: LD_INT 8
15584: PUSH
15585: LD_INT 9
15587: PUSH
15588: LD_INT 10
15590: PUSH
15591: LD_INT 11
15593: PUSH
15594: LD_INT 12
15596: PUSH
15597: LD_INT 13
15599: PUSH
15600: LD_INT 14
15602: PUSH
15603: LD_INT 15
15605: PUSH
15606: LD_INT 16
15608: PUSH
15609: LD_INT 17
15611: PUSH
15612: LD_INT 18
15614: PUSH
15615: LD_INT 19
15617: PUSH
15618: LD_INT 20
15620: PUSH
15621: LD_INT 21
15623: PUSH
15624: LD_INT 22
15626: PUSH
15627: LD_INT 23
15629: PUSH
15630: LD_INT 24
15632: PUSH
15633: LD_INT 25
15635: PUSH
15636: LD_INT 26
15638: PUSH
15639: LD_INT 27
15641: PUSH
15642: LD_INT 28
15644: PUSH
15645: LD_INT 30
15647: PUSH
15648: LD_INT 31
15650: PUSH
15651: LD_INT 32
15653: PUSH
15654: LD_INT 33
15656: PUSH
15657: LD_INT 34
15659: PUSH
15660: LD_INT 36
15662: PUSH
15663: EMPTY
15664: LIST
15665: LIST
15666: LIST
15667: LIST
15668: LIST
15669: LIST
15670: LIST
15671: LIST
15672: LIST
15673: LIST
15674: LIST
15675: LIST
15676: LIST
15677: LIST
15678: LIST
15679: LIST
15680: LIST
15681: LIST
15682: LIST
15683: LIST
15684: LIST
15685: LIST
15686: LIST
15687: LIST
15688: LIST
15689: LIST
15690: LIST
15691: LIST
15692: LIST
15693: LIST
15694: LIST
15695: LIST
15696: LIST
15697: LIST
15698: PUSH
15699: LD_INT 101
15701: PUSH
15702: LD_INT 102
15704: PUSH
15705: LD_INT 103
15707: PUSH
15708: LD_INT 104
15710: PUSH
15711: LD_INT 105
15713: PUSH
15714: LD_INT 106
15716: PUSH
15717: LD_INT 107
15719: PUSH
15720: LD_INT 108
15722: PUSH
15723: LD_INT 109
15725: PUSH
15726: LD_INT 110
15728: PUSH
15729: LD_INT 111
15731: PUSH
15732: LD_INT 112
15734: PUSH
15735: LD_INT 113
15737: PUSH
15738: LD_INT 114
15740: PUSH
15741: LD_INT 116
15743: PUSH
15744: LD_INT 117
15746: PUSH
15747: LD_INT 118
15749: PUSH
15750: EMPTY
15751: LIST
15752: LIST
15753: LIST
15754: LIST
15755: LIST
15756: LIST
15757: LIST
15758: LIST
15759: LIST
15760: LIST
15761: LIST
15762: LIST
15763: LIST
15764: LIST
15765: LIST
15766: LIST
15767: LIST
15768: PUSH
15769: EMPTY
15770: LIST
15771: LIST
15772: ST_TO_ADDR
15773: GO 17228
15775: LD_INT 13
15777: DOUBLE
15778: EQUAL
15779: IFTRUE 15783
15781: GO 15991
15783: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
15784: LD_ADDR_VAR 0 2
15788: PUSH
15789: LD_INT 1
15791: PUSH
15792: LD_INT 2
15794: PUSH
15795: LD_INT 3
15797: PUSH
15798: LD_INT 4
15800: PUSH
15801: LD_INT 5
15803: PUSH
15804: LD_INT 8
15806: PUSH
15807: LD_INT 9
15809: PUSH
15810: LD_INT 10
15812: PUSH
15813: LD_INT 11
15815: PUSH
15816: LD_INT 12
15818: PUSH
15819: LD_INT 14
15821: PUSH
15822: LD_INT 15
15824: PUSH
15825: LD_INT 16
15827: PUSH
15828: LD_INT 17
15830: PUSH
15831: LD_INT 18
15833: PUSH
15834: LD_INT 19
15836: PUSH
15837: LD_INT 20
15839: PUSH
15840: LD_INT 21
15842: PUSH
15843: LD_INT 22
15845: PUSH
15846: LD_INT 23
15848: PUSH
15849: LD_INT 24
15851: PUSH
15852: LD_INT 25
15854: PUSH
15855: LD_INT 26
15857: PUSH
15858: LD_INT 27
15860: PUSH
15861: LD_INT 28
15863: PUSH
15864: LD_INT 30
15866: PUSH
15867: LD_INT 31
15869: PUSH
15870: LD_INT 32
15872: PUSH
15873: LD_INT 33
15875: PUSH
15876: LD_INT 34
15878: PUSH
15879: LD_INT 36
15881: PUSH
15882: EMPTY
15883: LIST
15884: LIST
15885: LIST
15886: LIST
15887: LIST
15888: LIST
15889: LIST
15890: LIST
15891: LIST
15892: LIST
15893: LIST
15894: LIST
15895: LIST
15896: LIST
15897: LIST
15898: LIST
15899: LIST
15900: LIST
15901: LIST
15902: LIST
15903: LIST
15904: LIST
15905: LIST
15906: LIST
15907: LIST
15908: LIST
15909: LIST
15910: LIST
15911: LIST
15912: LIST
15913: LIST
15914: PUSH
15915: LD_INT 101
15917: PUSH
15918: LD_INT 102
15920: PUSH
15921: LD_INT 103
15923: PUSH
15924: LD_INT 104
15926: PUSH
15927: LD_INT 105
15929: PUSH
15930: LD_INT 106
15932: PUSH
15933: LD_INT 107
15935: PUSH
15936: LD_INT 108
15938: PUSH
15939: LD_INT 109
15941: PUSH
15942: LD_INT 110
15944: PUSH
15945: LD_INT 111
15947: PUSH
15948: LD_INT 112
15950: PUSH
15951: LD_INT 113
15953: PUSH
15954: LD_INT 114
15956: PUSH
15957: LD_INT 116
15959: PUSH
15960: LD_INT 117
15962: PUSH
15963: LD_INT 118
15965: PUSH
15966: EMPTY
15967: LIST
15968: LIST
15969: LIST
15970: LIST
15971: LIST
15972: LIST
15973: LIST
15974: LIST
15975: LIST
15976: LIST
15977: LIST
15978: LIST
15979: LIST
15980: LIST
15981: LIST
15982: LIST
15983: LIST
15984: PUSH
15985: EMPTY
15986: LIST
15987: LIST
15988: ST_TO_ADDR
15989: GO 17228
15991: LD_INT 14
15993: DOUBLE
15994: EQUAL
15995: IFTRUE 15999
15997: GO 16223
15999: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
16000: LD_ADDR_VAR 0 2
16004: PUSH
16005: LD_INT 1
16007: PUSH
16008: LD_INT 2
16010: PUSH
16011: LD_INT 3
16013: PUSH
16014: LD_INT 4
16016: PUSH
16017: LD_INT 5
16019: PUSH
16020: LD_INT 6
16022: PUSH
16023: LD_INT 7
16025: PUSH
16026: LD_INT 8
16028: PUSH
16029: LD_INT 9
16031: PUSH
16032: LD_INT 10
16034: PUSH
16035: LD_INT 11
16037: PUSH
16038: LD_INT 12
16040: PUSH
16041: LD_INT 13
16043: PUSH
16044: LD_INT 14
16046: PUSH
16047: LD_INT 15
16049: PUSH
16050: LD_INT 16
16052: PUSH
16053: LD_INT 17
16055: PUSH
16056: LD_INT 18
16058: PUSH
16059: LD_INT 19
16061: PUSH
16062: LD_INT 20
16064: PUSH
16065: LD_INT 21
16067: PUSH
16068: LD_INT 22
16070: PUSH
16071: LD_INT 23
16073: PUSH
16074: LD_INT 24
16076: PUSH
16077: LD_INT 25
16079: PUSH
16080: LD_INT 26
16082: PUSH
16083: LD_INT 27
16085: PUSH
16086: LD_INT 28
16088: PUSH
16089: LD_INT 29
16091: PUSH
16092: LD_INT 30
16094: PUSH
16095: LD_INT 31
16097: PUSH
16098: LD_INT 32
16100: PUSH
16101: LD_INT 33
16103: PUSH
16104: LD_INT 34
16106: PUSH
16107: LD_INT 36
16109: PUSH
16110: EMPTY
16111: LIST
16112: LIST
16113: LIST
16114: LIST
16115: LIST
16116: LIST
16117: LIST
16118: LIST
16119: LIST
16120: LIST
16121: LIST
16122: LIST
16123: LIST
16124: LIST
16125: LIST
16126: LIST
16127: LIST
16128: LIST
16129: LIST
16130: LIST
16131: LIST
16132: LIST
16133: LIST
16134: LIST
16135: LIST
16136: LIST
16137: LIST
16138: LIST
16139: LIST
16140: LIST
16141: LIST
16142: LIST
16143: LIST
16144: LIST
16145: LIST
16146: PUSH
16147: LD_INT 101
16149: PUSH
16150: LD_INT 102
16152: PUSH
16153: LD_INT 103
16155: PUSH
16156: LD_INT 104
16158: PUSH
16159: LD_INT 105
16161: PUSH
16162: LD_INT 106
16164: PUSH
16165: LD_INT 107
16167: PUSH
16168: LD_INT 108
16170: PUSH
16171: LD_INT 109
16173: PUSH
16174: LD_INT 110
16176: PUSH
16177: LD_INT 111
16179: PUSH
16180: LD_INT 112
16182: PUSH
16183: LD_INT 113
16185: PUSH
16186: LD_INT 114
16188: PUSH
16189: LD_INT 116
16191: PUSH
16192: LD_INT 117
16194: PUSH
16195: LD_INT 118
16197: PUSH
16198: EMPTY
16199: LIST
16200: LIST
16201: LIST
16202: LIST
16203: LIST
16204: LIST
16205: LIST
16206: LIST
16207: LIST
16208: LIST
16209: LIST
16210: LIST
16211: LIST
16212: LIST
16213: LIST
16214: LIST
16215: LIST
16216: PUSH
16217: EMPTY
16218: LIST
16219: LIST
16220: ST_TO_ADDR
16221: GO 17228
16223: LD_INT 15
16225: DOUBLE
16226: EQUAL
16227: IFTRUE 16231
16229: GO 16455
16231: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
16232: LD_ADDR_VAR 0 2
16236: PUSH
16237: LD_INT 1
16239: PUSH
16240: LD_INT 2
16242: PUSH
16243: LD_INT 3
16245: PUSH
16246: LD_INT 4
16248: PUSH
16249: LD_INT 5
16251: PUSH
16252: LD_INT 6
16254: PUSH
16255: LD_INT 7
16257: PUSH
16258: LD_INT 8
16260: PUSH
16261: LD_INT 9
16263: PUSH
16264: LD_INT 10
16266: PUSH
16267: LD_INT 11
16269: PUSH
16270: LD_INT 12
16272: PUSH
16273: LD_INT 13
16275: PUSH
16276: LD_INT 14
16278: PUSH
16279: LD_INT 15
16281: PUSH
16282: LD_INT 16
16284: PUSH
16285: LD_INT 17
16287: PUSH
16288: LD_INT 18
16290: PUSH
16291: LD_INT 19
16293: PUSH
16294: LD_INT 20
16296: PUSH
16297: LD_INT 21
16299: PUSH
16300: LD_INT 22
16302: PUSH
16303: LD_INT 23
16305: PUSH
16306: LD_INT 24
16308: PUSH
16309: LD_INT 25
16311: PUSH
16312: LD_INT 26
16314: PUSH
16315: LD_INT 27
16317: PUSH
16318: LD_INT 28
16320: PUSH
16321: LD_INT 29
16323: PUSH
16324: LD_INT 30
16326: PUSH
16327: LD_INT 31
16329: PUSH
16330: LD_INT 32
16332: PUSH
16333: LD_INT 33
16335: PUSH
16336: LD_INT 34
16338: PUSH
16339: LD_INT 36
16341: PUSH
16342: EMPTY
16343: LIST
16344: LIST
16345: LIST
16346: LIST
16347: LIST
16348: LIST
16349: LIST
16350: LIST
16351: LIST
16352: LIST
16353: LIST
16354: LIST
16355: LIST
16356: LIST
16357: LIST
16358: LIST
16359: LIST
16360: LIST
16361: LIST
16362: LIST
16363: LIST
16364: LIST
16365: LIST
16366: LIST
16367: LIST
16368: LIST
16369: LIST
16370: LIST
16371: LIST
16372: LIST
16373: LIST
16374: LIST
16375: LIST
16376: LIST
16377: LIST
16378: PUSH
16379: LD_INT 101
16381: PUSH
16382: LD_INT 102
16384: PUSH
16385: LD_INT 103
16387: PUSH
16388: LD_INT 104
16390: PUSH
16391: LD_INT 105
16393: PUSH
16394: LD_INT 106
16396: PUSH
16397: LD_INT 107
16399: PUSH
16400: LD_INT 108
16402: PUSH
16403: LD_INT 109
16405: PUSH
16406: LD_INT 110
16408: PUSH
16409: LD_INT 111
16411: PUSH
16412: LD_INT 112
16414: PUSH
16415: LD_INT 113
16417: PUSH
16418: LD_INT 114
16420: PUSH
16421: LD_INT 116
16423: PUSH
16424: LD_INT 117
16426: PUSH
16427: LD_INT 118
16429: PUSH
16430: EMPTY
16431: LIST
16432: LIST
16433: LIST
16434: LIST
16435: LIST
16436: LIST
16437: LIST
16438: LIST
16439: LIST
16440: LIST
16441: LIST
16442: LIST
16443: LIST
16444: LIST
16445: LIST
16446: LIST
16447: LIST
16448: PUSH
16449: EMPTY
16450: LIST
16451: LIST
16452: ST_TO_ADDR
16453: GO 17228
16455: LD_INT 16
16457: DOUBLE
16458: EQUAL
16459: IFTRUE 16463
16461: GO 16599
16463: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
16464: LD_ADDR_VAR 0 2
16468: PUSH
16469: LD_INT 2
16471: PUSH
16472: LD_INT 4
16474: PUSH
16475: LD_INT 5
16477: PUSH
16478: LD_INT 7
16480: PUSH
16481: LD_INT 11
16483: PUSH
16484: LD_INT 12
16486: PUSH
16487: LD_INT 15
16489: PUSH
16490: LD_INT 16
16492: PUSH
16493: LD_INT 20
16495: PUSH
16496: LD_INT 21
16498: PUSH
16499: LD_INT 22
16501: PUSH
16502: LD_INT 23
16504: PUSH
16505: LD_INT 25
16507: PUSH
16508: LD_INT 26
16510: PUSH
16511: LD_INT 30
16513: PUSH
16514: LD_INT 31
16516: PUSH
16517: LD_INT 32
16519: PUSH
16520: LD_INT 33
16522: PUSH
16523: LD_INT 34
16525: PUSH
16526: EMPTY
16527: LIST
16528: LIST
16529: LIST
16530: LIST
16531: LIST
16532: LIST
16533: LIST
16534: LIST
16535: LIST
16536: LIST
16537: LIST
16538: LIST
16539: LIST
16540: LIST
16541: LIST
16542: LIST
16543: LIST
16544: LIST
16545: LIST
16546: PUSH
16547: LD_INT 101
16549: PUSH
16550: LD_INT 102
16552: PUSH
16553: LD_INT 103
16555: PUSH
16556: LD_INT 106
16558: PUSH
16559: LD_INT 108
16561: PUSH
16562: LD_INT 112
16564: PUSH
16565: LD_INT 113
16567: PUSH
16568: LD_INT 114
16570: PUSH
16571: LD_INT 116
16573: PUSH
16574: LD_INT 117
16576: PUSH
16577: LD_INT 118
16579: PUSH
16580: EMPTY
16581: LIST
16582: LIST
16583: LIST
16584: LIST
16585: LIST
16586: LIST
16587: LIST
16588: LIST
16589: LIST
16590: LIST
16591: LIST
16592: PUSH
16593: EMPTY
16594: LIST
16595: LIST
16596: ST_TO_ADDR
16597: GO 17228
16599: LD_INT 17
16601: DOUBLE
16602: EQUAL
16603: IFTRUE 16607
16605: GO 16831
16607: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
16608: LD_ADDR_VAR 0 2
16612: PUSH
16613: LD_INT 1
16615: PUSH
16616: LD_INT 2
16618: PUSH
16619: LD_INT 3
16621: PUSH
16622: LD_INT 4
16624: PUSH
16625: LD_INT 5
16627: PUSH
16628: LD_INT 6
16630: PUSH
16631: LD_INT 7
16633: PUSH
16634: LD_INT 8
16636: PUSH
16637: LD_INT 9
16639: PUSH
16640: LD_INT 10
16642: PUSH
16643: LD_INT 11
16645: PUSH
16646: LD_INT 12
16648: PUSH
16649: LD_INT 13
16651: PUSH
16652: LD_INT 14
16654: PUSH
16655: LD_INT 15
16657: PUSH
16658: LD_INT 16
16660: PUSH
16661: LD_INT 17
16663: PUSH
16664: LD_INT 18
16666: PUSH
16667: LD_INT 19
16669: PUSH
16670: LD_INT 20
16672: PUSH
16673: LD_INT 21
16675: PUSH
16676: LD_INT 22
16678: PUSH
16679: LD_INT 23
16681: PUSH
16682: LD_INT 24
16684: PUSH
16685: LD_INT 25
16687: PUSH
16688: LD_INT 26
16690: PUSH
16691: LD_INT 27
16693: PUSH
16694: LD_INT 28
16696: PUSH
16697: LD_INT 29
16699: PUSH
16700: LD_INT 30
16702: PUSH
16703: LD_INT 31
16705: PUSH
16706: LD_INT 32
16708: PUSH
16709: LD_INT 33
16711: PUSH
16712: LD_INT 34
16714: PUSH
16715: LD_INT 36
16717: PUSH
16718: EMPTY
16719: LIST
16720: LIST
16721: LIST
16722: LIST
16723: LIST
16724: LIST
16725: LIST
16726: LIST
16727: LIST
16728: LIST
16729: LIST
16730: LIST
16731: LIST
16732: LIST
16733: LIST
16734: LIST
16735: LIST
16736: LIST
16737: LIST
16738: LIST
16739: LIST
16740: LIST
16741: LIST
16742: LIST
16743: LIST
16744: LIST
16745: LIST
16746: LIST
16747: LIST
16748: LIST
16749: LIST
16750: LIST
16751: LIST
16752: LIST
16753: LIST
16754: PUSH
16755: LD_INT 101
16757: PUSH
16758: LD_INT 102
16760: PUSH
16761: LD_INT 103
16763: PUSH
16764: LD_INT 104
16766: PUSH
16767: LD_INT 105
16769: PUSH
16770: LD_INT 106
16772: PUSH
16773: LD_INT 107
16775: PUSH
16776: LD_INT 108
16778: PUSH
16779: LD_INT 109
16781: PUSH
16782: LD_INT 110
16784: PUSH
16785: LD_INT 111
16787: PUSH
16788: LD_INT 112
16790: PUSH
16791: LD_INT 113
16793: PUSH
16794: LD_INT 114
16796: PUSH
16797: LD_INT 116
16799: PUSH
16800: LD_INT 117
16802: PUSH
16803: LD_INT 118
16805: PUSH
16806: EMPTY
16807: LIST
16808: LIST
16809: LIST
16810: LIST
16811: LIST
16812: LIST
16813: LIST
16814: LIST
16815: LIST
16816: LIST
16817: LIST
16818: LIST
16819: LIST
16820: LIST
16821: LIST
16822: LIST
16823: LIST
16824: PUSH
16825: EMPTY
16826: LIST
16827: LIST
16828: ST_TO_ADDR
16829: GO 17228
16831: LD_INT 18
16833: DOUBLE
16834: EQUAL
16835: IFTRUE 16839
16837: GO 16987
16839: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
16840: LD_ADDR_VAR 0 2
16844: PUSH
16845: LD_INT 2
16847: PUSH
16848: LD_INT 4
16850: PUSH
16851: LD_INT 5
16853: PUSH
16854: LD_INT 7
16856: PUSH
16857: LD_INT 11
16859: PUSH
16860: LD_INT 12
16862: PUSH
16863: LD_INT 15
16865: PUSH
16866: LD_INT 16
16868: PUSH
16869: LD_INT 20
16871: PUSH
16872: LD_INT 21
16874: PUSH
16875: LD_INT 22
16877: PUSH
16878: LD_INT 23
16880: PUSH
16881: LD_INT 25
16883: PUSH
16884: LD_INT 26
16886: PUSH
16887: LD_INT 30
16889: PUSH
16890: LD_INT 31
16892: PUSH
16893: LD_INT 32
16895: PUSH
16896: LD_INT 33
16898: PUSH
16899: LD_INT 34
16901: PUSH
16902: LD_INT 35
16904: PUSH
16905: LD_INT 36
16907: PUSH
16908: EMPTY
16909: LIST
16910: LIST
16911: LIST
16912: LIST
16913: LIST
16914: LIST
16915: LIST
16916: LIST
16917: LIST
16918: LIST
16919: LIST
16920: LIST
16921: LIST
16922: LIST
16923: LIST
16924: LIST
16925: LIST
16926: LIST
16927: LIST
16928: LIST
16929: LIST
16930: PUSH
16931: LD_INT 101
16933: PUSH
16934: LD_INT 102
16936: PUSH
16937: LD_INT 103
16939: PUSH
16940: LD_INT 106
16942: PUSH
16943: LD_INT 108
16945: PUSH
16946: LD_INT 112
16948: PUSH
16949: LD_INT 113
16951: PUSH
16952: LD_INT 114
16954: PUSH
16955: LD_INT 115
16957: PUSH
16958: LD_INT 116
16960: PUSH
16961: LD_INT 117
16963: PUSH
16964: LD_INT 118
16966: PUSH
16967: EMPTY
16968: LIST
16969: LIST
16970: LIST
16971: LIST
16972: LIST
16973: LIST
16974: LIST
16975: LIST
16976: LIST
16977: LIST
16978: LIST
16979: LIST
16980: PUSH
16981: EMPTY
16982: LIST
16983: LIST
16984: ST_TO_ADDR
16985: GO 17228
16987: LD_INT 19
16989: DOUBLE
16990: EQUAL
16991: IFTRUE 16995
16993: GO 17227
16995: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
16996: LD_ADDR_VAR 0 2
17000: PUSH
17001: LD_INT 1
17003: PUSH
17004: LD_INT 2
17006: PUSH
17007: LD_INT 3
17009: PUSH
17010: LD_INT 4
17012: PUSH
17013: LD_INT 5
17015: PUSH
17016: LD_INT 6
17018: PUSH
17019: LD_INT 7
17021: PUSH
17022: LD_INT 8
17024: PUSH
17025: LD_INT 9
17027: PUSH
17028: LD_INT 10
17030: PUSH
17031: LD_INT 11
17033: PUSH
17034: LD_INT 12
17036: PUSH
17037: LD_INT 13
17039: PUSH
17040: LD_INT 14
17042: PUSH
17043: LD_INT 15
17045: PUSH
17046: LD_INT 16
17048: PUSH
17049: LD_INT 17
17051: PUSH
17052: LD_INT 18
17054: PUSH
17055: LD_INT 19
17057: PUSH
17058: LD_INT 20
17060: PUSH
17061: LD_INT 21
17063: PUSH
17064: LD_INT 22
17066: PUSH
17067: LD_INT 23
17069: PUSH
17070: LD_INT 24
17072: PUSH
17073: LD_INT 25
17075: PUSH
17076: LD_INT 26
17078: PUSH
17079: LD_INT 27
17081: PUSH
17082: LD_INT 28
17084: PUSH
17085: LD_INT 29
17087: PUSH
17088: LD_INT 30
17090: PUSH
17091: LD_INT 31
17093: PUSH
17094: LD_INT 32
17096: PUSH
17097: LD_INT 33
17099: PUSH
17100: LD_INT 34
17102: PUSH
17103: LD_INT 35
17105: PUSH
17106: LD_INT 36
17108: PUSH
17109: EMPTY
17110: LIST
17111: LIST
17112: LIST
17113: LIST
17114: LIST
17115: LIST
17116: LIST
17117: LIST
17118: LIST
17119: LIST
17120: LIST
17121: LIST
17122: LIST
17123: LIST
17124: LIST
17125: LIST
17126: LIST
17127: LIST
17128: LIST
17129: LIST
17130: LIST
17131: LIST
17132: LIST
17133: LIST
17134: LIST
17135: LIST
17136: LIST
17137: LIST
17138: LIST
17139: LIST
17140: LIST
17141: LIST
17142: LIST
17143: LIST
17144: LIST
17145: LIST
17146: PUSH
17147: LD_INT 101
17149: PUSH
17150: LD_INT 102
17152: PUSH
17153: LD_INT 103
17155: PUSH
17156: LD_INT 104
17158: PUSH
17159: LD_INT 105
17161: PUSH
17162: LD_INT 106
17164: PUSH
17165: LD_INT 107
17167: PUSH
17168: LD_INT 108
17170: PUSH
17171: LD_INT 109
17173: PUSH
17174: LD_INT 110
17176: PUSH
17177: LD_INT 111
17179: PUSH
17180: LD_INT 112
17182: PUSH
17183: LD_INT 113
17185: PUSH
17186: LD_INT 114
17188: PUSH
17189: LD_INT 115
17191: PUSH
17192: LD_INT 116
17194: PUSH
17195: LD_INT 117
17197: PUSH
17198: LD_INT 118
17200: PUSH
17201: EMPTY
17202: LIST
17203: LIST
17204: LIST
17205: LIST
17206: LIST
17207: LIST
17208: LIST
17209: LIST
17210: LIST
17211: LIST
17212: LIST
17213: LIST
17214: LIST
17215: LIST
17216: LIST
17217: LIST
17218: LIST
17219: LIST
17220: PUSH
17221: EMPTY
17222: LIST
17223: LIST
17224: ST_TO_ADDR
17225: GO 17228
17227: POP
// end else
17228: GO 17459
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
17230: LD_ADDR_VAR 0 2
17234: PUSH
17235: LD_INT 1
17237: PUSH
17238: LD_INT 2
17240: PUSH
17241: LD_INT 3
17243: PUSH
17244: LD_INT 4
17246: PUSH
17247: LD_INT 5
17249: PUSH
17250: LD_INT 6
17252: PUSH
17253: LD_INT 7
17255: PUSH
17256: LD_INT 8
17258: PUSH
17259: LD_INT 9
17261: PUSH
17262: LD_INT 10
17264: PUSH
17265: LD_INT 11
17267: PUSH
17268: LD_INT 12
17270: PUSH
17271: LD_INT 13
17273: PUSH
17274: LD_INT 14
17276: PUSH
17277: LD_INT 15
17279: PUSH
17280: LD_INT 16
17282: PUSH
17283: LD_INT 17
17285: PUSH
17286: LD_INT 18
17288: PUSH
17289: LD_INT 19
17291: PUSH
17292: LD_INT 20
17294: PUSH
17295: LD_INT 21
17297: PUSH
17298: LD_INT 22
17300: PUSH
17301: LD_INT 23
17303: PUSH
17304: LD_INT 24
17306: PUSH
17307: LD_INT 25
17309: PUSH
17310: LD_INT 26
17312: PUSH
17313: LD_INT 27
17315: PUSH
17316: LD_INT 28
17318: PUSH
17319: LD_INT 29
17321: PUSH
17322: LD_INT 30
17324: PUSH
17325: LD_INT 31
17327: PUSH
17328: LD_INT 32
17330: PUSH
17331: LD_INT 33
17333: PUSH
17334: LD_INT 34
17336: PUSH
17337: LD_INT 35
17339: PUSH
17340: LD_INT 36
17342: PUSH
17343: EMPTY
17344: LIST
17345: LIST
17346: LIST
17347: LIST
17348: LIST
17349: LIST
17350: LIST
17351: LIST
17352: LIST
17353: LIST
17354: LIST
17355: LIST
17356: LIST
17357: LIST
17358: LIST
17359: LIST
17360: LIST
17361: LIST
17362: LIST
17363: LIST
17364: LIST
17365: LIST
17366: LIST
17367: LIST
17368: LIST
17369: LIST
17370: LIST
17371: LIST
17372: LIST
17373: LIST
17374: LIST
17375: LIST
17376: LIST
17377: LIST
17378: LIST
17379: LIST
17380: PUSH
17381: LD_INT 101
17383: PUSH
17384: LD_INT 102
17386: PUSH
17387: LD_INT 103
17389: PUSH
17390: LD_INT 104
17392: PUSH
17393: LD_INT 105
17395: PUSH
17396: LD_INT 106
17398: PUSH
17399: LD_INT 107
17401: PUSH
17402: LD_INT 108
17404: PUSH
17405: LD_INT 109
17407: PUSH
17408: LD_INT 110
17410: PUSH
17411: LD_INT 111
17413: PUSH
17414: LD_INT 112
17416: PUSH
17417: LD_INT 113
17419: PUSH
17420: LD_INT 114
17422: PUSH
17423: LD_INT 115
17425: PUSH
17426: LD_INT 116
17428: PUSH
17429: LD_INT 117
17431: PUSH
17432: LD_INT 118
17434: PUSH
17435: EMPTY
17436: LIST
17437: LIST
17438: LIST
17439: LIST
17440: LIST
17441: LIST
17442: LIST
17443: LIST
17444: LIST
17445: LIST
17446: LIST
17447: LIST
17448: LIST
17449: LIST
17450: LIST
17451: LIST
17452: LIST
17453: LIST
17454: PUSH
17455: EMPTY
17456: LIST
17457: LIST
17458: ST_TO_ADDR
// if result then
17459: LD_VAR 0 2
17463: IFFALSE 18249
// begin normal :=  ;
17465: LD_ADDR_VAR 0 5
17469: PUSH
17470: LD_STRING 
17472: ST_TO_ADDR
// hardcore :=  ;
17473: LD_ADDR_VAR 0 6
17477: PUSH
17478: LD_STRING 
17480: ST_TO_ADDR
// active :=  ;
17481: LD_ADDR_VAR 0 7
17485: PUSH
17486: LD_STRING 
17488: ST_TO_ADDR
// for i = 1 to normalCounter do
17489: LD_ADDR_VAR 0 8
17493: PUSH
17494: DOUBLE
17495: LD_INT 1
17497: DEC
17498: ST_TO_ADDR
17499: LD_EXP 42
17503: PUSH
17504: FOR_TO
17505: IFFALSE 17606
// begin tmp := 0 ;
17507: LD_ADDR_VAR 0 3
17511: PUSH
17512: LD_STRING 0
17514: ST_TO_ADDR
// if result [ 1 ] then
17515: LD_VAR 0 2
17519: PUSH
17520: LD_INT 1
17522: ARRAY
17523: IFFALSE 17588
// if result [ 1 ] [ 1 ] = i then
17525: LD_VAR 0 2
17529: PUSH
17530: LD_INT 1
17532: ARRAY
17533: PUSH
17534: LD_INT 1
17536: ARRAY
17537: PUSH
17538: LD_VAR 0 8
17542: EQUAL
17543: IFFALSE 17588
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
17545: LD_ADDR_VAR 0 2
17549: PUSH
17550: LD_VAR 0 2
17554: PPUSH
17555: LD_INT 1
17557: PPUSH
17558: LD_VAR 0 2
17562: PUSH
17563: LD_INT 1
17565: ARRAY
17566: PPUSH
17567: LD_INT 1
17569: PPUSH
17570: CALL_OW 3
17574: PPUSH
17575: CALL_OW 1
17579: ST_TO_ADDR
// tmp := 1 ;
17580: LD_ADDR_VAR 0 3
17584: PUSH
17585: LD_STRING 1
17587: ST_TO_ADDR
// end ; normal := normal & tmp ;
17588: LD_ADDR_VAR 0 5
17592: PUSH
17593: LD_VAR 0 5
17597: PUSH
17598: LD_VAR 0 3
17602: STR
17603: ST_TO_ADDR
// end ;
17604: GO 17504
17606: POP
17607: POP
// for i = 1 to hardcoreCounter do
17608: LD_ADDR_VAR 0 8
17612: PUSH
17613: DOUBLE
17614: LD_INT 1
17616: DEC
17617: ST_TO_ADDR
17618: LD_EXP 43
17622: PUSH
17623: FOR_TO
17624: IFFALSE 17729
// begin tmp := 0 ;
17626: LD_ADDR_VAR 0 3
17630: PUSH
17631: LD_STRING 0
17633: ST_TO_ADDR
// if result [ 2 ] then
17634: LD_VAR 0 2
17638: PUSH
17639: LD_INT 2
17641: ARRAY
17642: IFFALSE 17711
// if result [ 2 ] [ 1 ] = 100 + i then
17644: LD_VAR 0 2
17648: PUSH
17649: LD_INT 2
17651: ARRAY
17652: PUSH
17653: LD_INT 1
17655: ARRAY
17656: PUSH
17657: LD_INT 100
17659: PUSH
17660: LD_VAR 0 8
17664: PLUS
17665: EQUAL
17666: IFFALSE 17711
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
17668: LD_ADDR_VAR 0 2
17672: PUSH
17673: LD_VAR 0 2
17677: PPUSH
17678: LD_INT 2
17680: PPUSH
17681: LD_VAR 0 2
17685: PUSH
17686: LD_INT 2
17688: ARRAY
17689: PPUSH
17690: LD_INT 1
17692: PPUSH
17693: CALL_OW 3
17697: PPUSH
17698: CALL_OW 1
17702: ST_TO_ADDR
// tmp := 1 ;
17703: LD_ADDR_VAR 0 3
17707: PUSH
17708: LD_STRING 1
17710: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
17711: LD_ADDR_VAR 0 6
17715: PUSH
17716: LD_VAR 0 6
17720: PUSH
17721: LD_VAR 0 3
17725: STR
17726: ST_TO_ADDR
// end ;
17727: GO 17623
17729: POP
17730: POP
// if isGameLoad then
17731: LD_VAR 0 1
17735: IFFALSE 18210
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
17737: LD_ADDR_VAR 0 4
17741: PUSH
17742: LD_EXP 46
17746: PUSH
17747: LD_EXP 45
17751: PUSH
17752: LD_EXP 47
17756: PUSH
17757: LD_EXP 44
17761: PUSH
17762: LD_EXP 48
17766: PUSH
17767: LD_EXP 49
17771: PUSH
17772: LD_EXP 50
17776: PUSH
17777: LD_EXP 51
17781: PUSH
17782: LD_EXP 52
17786: PUSH
17787: LD_EXP 53
17791: PUSH
17792: LD_EXP 54
17796: PUSH
17797: LD_EXP 55
17801: PUSH
17802: LD_EXP 56
17806: PUSH
17807: LD_EXP 57
17811: PUSH
17812: LD_EXP 65
17816: PUSH
17817: LD_EXP 66
17821: PUSH
17822: LD_EXP 67
17826: PUSH
17827: LD_EXP 68
17831: PUSH
17832: LD_EXP 70
17836: PUSH
17837: LD_EXP 71
17841: PUSH
17842: LD_EXP 72
17846: PUSH
17847: LD_EXP 75
17851: PUSH
17852: LD_EXP 77
17856: PUSH
17857: LD_EXP 78
17861: PUSH
17862: LD_EXP 79
17866: PUSH
17867: LD_EXP 81
17871: PUSH
17872: LD_EXP 82
17876: PUSH
17877: LD_EXP 85
17881: PUSH
17882: LD_EXP 86
17886: PUSH
17887: LD_EXP 87
17891: PUSH
17892: LD_EXP 88
17896: PUSH
17897: LD_EXP 89
17901: PUSH
17902: LD_EXP 90
17906: PUSH
17907: LD_EXP 91
17911: PUSH
17912: LD_EXP 92
17916: PUSH
17917: LD_EXP 93
17921: PUSH
17922: LD_EXP 58
17926: PUSH
17927: LD_EXP 59
17931: PUSH
17932: LD_EXP 62
17936: PUSH
17937: LD_EXP 63
17941: PUSH
17942: LD_EXP 64
17946: PUSH
17947: LD_EXP 60
17951: PUSH
17952: LD_EXP 61
17956: PUSH
17957: LD_EXP 69
17961: PUSH
17962: LD_EXP 73
17966: PUSH
17967: LD_EXP 74
17971: PUSH
17972: LD_EXP 76
17976: PUSH
17977: LD_EXP 80
17981: PUSH
17982: LD_EXP 83
17986: PUSH
17987: LD_EXP 84
17991: PUSH
17992: LD_EXP 94
17996: PUSH
17997: LD_EXP 95
18001: PUSH
18002: LD_EXP 96
18006: PUSH
18007: LD_EXP 97
18011: PUSH
18012: EMPTY
18013: LIST
18014: LIST
18015: LIST
18016: LIST
18017: LIST
18018: LIST
18019: LIST
18020: LIST
18021: LIST
18022: LIST
18023: LIST
18024: LIST
18025: LIST
18026: LIST
18027: LIST
18028: LIST
18029: LIST
18030: LIST
18031: LIST
18032: LIST
18033: LIST
18034: LIST
18035: LIST
18036: LIST
18037: LIST
18038: LIST
18039: LIST
18040: LIST
18041: LIST
18042: LIST
18043: LIST
18044: LIST
18045: LIST
18046: LIST
18047: LIST
18048: LIST
18049: LIST
18050: LIST
18051: LIST
18052: LIST
18053: LIST
18054: LIST
18055: LIST
18056: LIST
18057: LIST
18058: LIST
18059: LIST
18060: LIST
18061: LIST
18062: LIST
18063: LIST
18064: LIST
18065: LIST
18066: LIST
18067: ST_TO_ADDR
// tmp :=  ;
18068: LD_ADDR_VAR 0 3
18072: PUSH
18073: LD_STRING 
18075: ST_TO_ADDR
// for i = 1 to normalCounter do
18076: LD_ADDR_VAR 0 8
18080: PUSH
18081: DOUBLE
18082: LD_INT 1
18084: DEC
18085: ST_TO_ADDR
18086: LD_EXP 42
18090: PUSH
18091: FOR_TO
18092: IFFALSE 18128
// begin if flags [ i ] then
18094: LD_VAR 0 4
18098: PUSH
18099: LD_VAR 0 8
18103: ARRAY
18104: IFFALSE 18126
// tmp := tmp & i & ; ;
18106: LD_ADDR_VAR 0 3
18110: PUSH
18111: LD_VAR 0 3
18115: PUSH
18116: LD_VAR 0 8
18120: STR
18121: PUSH
18122: LD_STRING ;
18124: STR
18125: ST_TO_ADDR
// end ;
18126: GO 18091
18128: POP
18129: POP
// for i = 1 to hardcoreCounter do
18130: LD_ADDR_VAR 0 8
18134: PUSH
18135: DOUBLE
18136: LD_INT 1
18138: DEC
18139: ST_TO_ADDR
18140: LD_EXP 43
18144: PUSH
18145: FOR_TO
18146: IFFALSE 18192
// begin if flags [ normalCounter + i ] then
18148: LD_VAR 0 4
18152: PUSH
18153: LD_EXP 42
18157: PUSH
18158: LD_VAR 0 8
18162: PLUS
18163: ARRAY
18164: IFFALSE 18190
// tmp := tmp & ( 100 + i ) & ; ;
18166: LD_ADDR_VAR 0 3
18170: PUSH
18171: LD_VAR 0 3
18175: PUSH
18176: LD_INT 100
18178: PUSH
18179: LD_VAR 0 8
18183: PLUS
18184: STR
18185: PUSH
18186: LD_STRING ;
18188: STR
18189: ST_TO_ADDR
// end ;
18190: GO 18145
18192: POP
18193: POP
// if tmp then
18194: LD_VAR 0 3
18198: IFFALSE 18210
// active := tmp ;
18200: LD_ADDR_VAR 0 7
18204: PUSH
18205: LD_VAR 0 3
18209: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
18210: LD_STRING getStreamItemsFromMission("
18212: PUSH
18213: LD_VAR 0 5
18217: STR
18218: PUSH
18219: LD_STRING ","
18221: STR
18222: PUSH
18223: LD_VAR 0 6
18227: STR
18228: PUSH
18229: LD_STRING ","
18231: STR
18232: PUSH
18233: LD_VAR 0 7
18237: STR
18238: PUSH
18239: LD_STRING ")
18241: STR
18242: PPUSH
18243: CALL_OW 559
// end else
18247: GO 18256
// ToLua ( getStreamItemsFromMission("","","") ) ;
18249: LD_STRING getStreamItemsFromMission("","","")
18251: PPUSH
18252: CALL_OW 559
// end ;
18256: LD_VAR 0 2
18260: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
18261: LD_EXP 41
18265: PUSH
18266: LD_EXP 46
18270: AND
18271: IFFALSE 18395
18273: GO 18275
18275: DISABLE
18276: LD_INT 0
18278: PPUSH
18279: PPUSH
// begin enable ;
18280: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
18281: LD_ADDR_VAR 0 2
18285: PUSH
18286: LD_INT 22
18288: PUSH
18289: LD_OWVAR 2
18293: PUSH
18294: EMPTY
18295: LIST
18296: LIST
18297: PUSH
18298: LD_INT 2
18300: PUSH
18301: LD_INT 34
18303: PUSH
18304: LD_INT 7
18306: PUSH
18307: EMPTY
18308: LIST
18309: LIST
18310: PUSH
18311: LD_INT 34
18313: PUSH
18314: LD_INT 45
18316: PUSH
18317: EMPTY
18318: LIST
18319: LIST
18320: PUSH
18321: LD_INT 34
18323: PUSH
18324: LD_INT 28
18326: PUSH
18327: EMPTY
18328: LIST
18329: LIST
18330: PUSH
18331: LD_INT 34
18333: PUSH
18334: LD_INT 47
18336: PUSH
18337: EMPTY
18338: LIST
18339: LIST
18340: PUSH
18341: EMPTY
18342: LIST
18343: LIST
18344: LIST
18345: LIST
18346: LIST
18347: PUSH
18348: EMPTY
18349: LIST
18350: LIST
18351: PPUSH
18352: CALL_OW 69
18356: ST_TO_ADDR
// if not tmp then
18357: LD_VAR 0 2
18361: NOT
18362: IFFALSE 18366
// exit ;
18364: GO 18395
// for i in tmp do
18366: LD_ADDR_VAR 0 1
18370: PUSH
18371: LD_VAR 0 2
18375: PUSH
18376: FOR_IN
18377: IFFALSE 18393
// begin SetLives ( i , 0 ) ;
18379: LD_VAR 0 1
18383: PPUSH
18384: LD_INT 0
18386: PPUSH
18387: CALL_OW 234
// end ;
18391: GO 18376
18393: POP
18394: POP
// end ;
18395: PPOPN 2
18397: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
18398: LD_EXP 41
18402: PUSH
18403: LD_EXP 47
18407: AND
18408: IFFALSE 18492
18410: GO 18412
18412: DISABLE
18413: LD_INT 0
18415: PPUSH
18416: PPUSH
// begin enable ;
18417: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
18418: LD_ADDR_VAR 0 2
18422: PUSH
18423: LD_INT 22
18425: PUSH
18426: LD_OWVAR 2
18430: PUSH
18431: EMPTY
18432: LIST
18433: LIST
18434: PUSH
18435: LD_INT 32
18437: PUSH
18438: LD_INT 3
18440: PUSH
18441: EMPTY
18442: LIST
18443: LIST
18444: PUSH
18445: EMPTY
18446: LIST
18447: LIST
18448: PPUSH
18449: CALL_OW 69
18453: ST_TO_ADDR
// if not tmp then
18454: LD_VAR 0 2
18458: NOT
18459: IFFALSE 18463
// exit ;
18461: GO 18492
// for i in tmp do
18463: LD_ADDR_VAR 0 1
18467: PUSH
18468: LD_VAR 0 2
18472: PUSH
18473: FOR_IN
18474: IFFALSE 18490
// begin SetLives ( i , 0 ) ;
18476: LD_VAR 0 1
18480: PPUSH
18481: LD_INT 0
18483: PPUSH
18484: CALL_OW 234
// end ;
18488: GO 18473
18490: POP
18491: POP
// end ;
18492: PPOPN 2
18494: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
18495: LD_EXP 41
18499: PUSH
18500: LD_EXP 44
18504: AND
18505: IFFALSE 18598
18507: GO 18509
18509: DISABLE
18510: LD_INT 0
18512: PPUSH
// begin enable ;
18513: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
18514: LD_ADDR_VAR 0 1
18518: PUSH
18519: LD_INT 22
18521: PUSH
18522: LD_OWVAR 2
18526: PUSH
18527: EMPTY
18528: LIST
18529: LIST
18530: PUSH
18531: LD_INT 2
18533: PUSH
18534: LD_INT 25
18536: PUSH
18537: LD_INT 5
18539: PUSH
18540: EMPTY
18541: LIST
18542: LIST
18543: PUSH
18544: LD_INT 25
18546: PUSH
18547: LD_INT 9
18549: PUSH
18550: EMPTY
18551: LIST
18552: LIST
18553: PUSH
18554: LD_INT 25
18556: PUSH
18557: LD_INT 8
18559: PUSH
18560: EMPTY
18561: LIST
18562: LIST
18563: PUSH
18564: EMPTY
18565: LIST
18566: LIST
18567: LIST
18568: LIST
18569: PUSH
18570: EMPTY
18571: LIST
18572: LIST
18573: PPUSH
18574: CALL_OW 69
18578: PUSH
18579: FOR_IN
18580: IFFALSE 18596
// begin SetClass ( i , 1 ) ;
18582: LD_VAR 0 1
18586: PPUSH
18587: LD_INT 1
18589: PPUSH
18590: CALL_OW 336
// end ;
18594: GO 18579
18596: POP
18597: POP
// end ;
18598: PPOPN 1
18600: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
18601: LD_EXP 41
18605: PUSH
18606: LD_EXP 45
18610: AND
18611: PUSH
18612: LD_OWVAR 65
18616: PUSH
18617: LD_INT 7
18619: LESS
18620: AND
18621: IFFALSE 18635
18623: GO 18625
18625: DISABLE
// begin enable ;
18626: ENABLE
// game_speed := 7 ;
18627: LD_ADDR_OWVAR 65
18631: PUSH
18632: LD_INT 7
18634: ST_TO_ADDR
// end ;
18635: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
18636: LD_EXP 41
18640: PUSH
18641: LD_EXP 48
18645: AND
18646: IFFALSE 18848
18648: GO 18650
18650: DISABLE
18651: LD_INT 0
18653: PPUSH
18654: PPUSH
18655: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
18656: LD_ADDR_VAR 0 3
18660: PUSH
18661: LD_INT 81
18663: PUSH
18664: LD_OWVAR 2
18668: PUSH
18669: EMPTY
18670: LIST
18671: LIST
18672: PUSH
18673: LD_INT 21
18675: PUSH
18676: LD_INT 1
18678: PUSH
18679: EMPTY
18680: LIST
18681: LIST
18682: PUSH
18683: EMPTY
18684: LIST
18685: LIST
18686: PPUSH
18687: CALL_OW 69
18691: ST_TO_ADDR
// if not tmp then
18692: LD_VAR 0 3
18696: NOT
18697: IFFALSE 18701
// exit ;
18699: GO 18848
// if tmp > 5 then
18701: LD_VAR 0 3
18705: PUSH
18706: LD_INT 5
18708: GREATER
18709: IFFALSE 18721
// k := 5 else
18711: LD_ADDR_VAR 0 2
18715: PUSH
18716: LD_INT 5
18718: ST_TO_ADDR
18719: GO 18731
// k := tmp ;
18721: LD_ADDR_VAR 0 2
18725: PUSH
18726: LD_VAR 0 3
18730: ST_TO_ADDR
// for i := 1 to k do
18731: LD_ADDR_VAR 0 1
18735: PUSH
18736: DOUBLE
18737: LD_INT 1
18739: DEC
18740: ST_TO_ADDR
18741: LD_VAR 0 2
18745: PUSH
18746: FOR_TO
18747: IFFALSE 18846
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
18749: LD_VAR 0 3
18753: PUSH
18754: LD_VAR 0 1
18758: ARRAY
18759: PPUSH
18760: LD_VAR 0 1
18764: PUSH
18765: LD_INT 4
18767: MOD
18768: PUSH
18769: LD_INT 1
18771: PLUS
18772: PPUSH
18773: CALL_OW 259
18777: PUSH
18778: LD_INT 10
18780: LESS
18781: IFFALSE 18844
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
18783: LD_VAR 0 3
18787: PUSH
18788: LD_VAR 0 1
18792: ARRAY
18793: PPUSH
18794: LD_VAR 0 1
18798: PUSH
18799: LD_INT 4
18801: MOD
18802: PUSH
18803: LD_INT 1
18805: PLUS
18806: PPUSH
18807: LD_VAR 0 3
18811: PUSH
18812: LD_VAR 0 1
18816: ARRAY
18817: PPUSH
18818: LD_VAR 0 1
18822: PUSH
18823: LD_INT 4
18825: MOD
18826: PUSH
18827: LD_INT 1
18829: PLUS
18830: PPUSH
18831: CALL_OW 259
18835: PUSH
18836: LD_INT 1
18838: PLUS
18839: PPUSH
18840: CALL_OW 237
18844: GO 18746
18846: POP
18847: POP
// end ;
18848: PPOPN 3
18850: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
18851: LD_EXP 41
18855: PUSH
18856: LD_EXP 49
18860: AND
18861: IFFALSE 18881
18863: GO 18865
18865: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
18866: LD_INT 4
18868: PPUSH
18869: LD_OWVAR 2
18873: PPUSH
18874: LD_INT 0
18876: PPUSH
18877: CALL_OW 324
18881: END
// every 0 0$1 trigger StreamModeActive and sShovel do
18882: LD_EXP 41
18886: PUSH
18887: LD_EXP 78
18891: AND
18892: IFFALSE 18912
18894: GO 18896
18896: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
18897: LD_INT 19
18899: PPUSH
18900: LD_OWVAR 2
18904: PPUSH
18905: LD_INT 0
18907: PPUSH
18908: CALL_OW 324
18912: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
18913: LD_EXP 41
18917: PUSH
18918: LD_EXP 50
18922: AND
18923: IFFALSE 19025
18925: GO 18927
18927: DISABLE
18928: LD_INT 0
18930: PPUSH
18931: PPUSH
// begin enable ;
18932: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
18933: LD_ADDR_VAR 0 2
18937: PUSH
18938: LD_INT 22
18940: PUSH
18941: LD_OWVAR 2
18945: PUSH
18946: EMPTY
18947: LIST
18948: LIST
18949: PUSH
18950: LD_INT 2
18952: PUSH
18953: LD_INT 34
18955: PUSH
18956: LD_INT 11
18958: PUSH
18959: EMPTY
18960: LIST
18961: LIST
18962: PUSH
18963: LD_INT 34
18965: PUSH
18966: LD_INT 30
18968: PUSH
18969: EMPTY
18970: LIST
18971: LIST
18972: PUSH
18973: EMPTY
18974: LIST
18975: LIST
18976: LIST
18977: PUSH
18978: EMPTY
18979: LIST
18980: LIST
18981: PPUSH
18982: CALL_OW 69
18986: ST_TO_ADDR
// if not tmp then
18987: LD_VAR 0 2
18991: NOT
18992: IFFALSE 18996
// exit ;
18994: GO 19025
// for i in tmp do
18996: LD_ADDR_VAR 0 1
19000: PUSH
19001: LD_VAR 0 2
19005: PUSH
19006: FOR_IN
19007: IFFALSE 19023
// begin SetLives ( i , 0 ) ;
19009: LD_VAR 0 1
19013: PPUSH
19014: LD_INT 0
19016: PPUSH
19017: CALL_OW 234
// end ;
19021: GO 19006
19023: POP
19024: POP
// end ;
19025: PPOPN 2
19027: END
// every 0 0$1 trigger StreamModeActive and sBunker do
19028: LD_EXP 41
19032: PUSH
19033: LD_EXP 51
19037: AND
19038: IFFALSE 19058
19040: GO 19042
19042: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
19043: LD_INT 32
19045: PPUSH
19046: LD_OWVAR 2
19050: PPUSH
19051: LD_INT 0
19053: PPUSH
19054: CALL_OW 324
19058: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
19059: LD_EXP 41
19063: PUSH
19064: LD_EXP 52
19068: AND
19069: IFFALSE 19250
19071: GO 19073
19073: DISABLE
19074: LD_INT 0
19076: PPUSH
19077: PPUSH
19078: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
19079: LD_ADDR_VAR 0 2
19083: PUSH
19084: LD_INT 22
19086: PUSH
19087: LD_OWVAR 2
19091: PUSH
19092: EMPTY
19093: LIST
19094: LIST
19095: PUSH
19096: LD_INT 33
19098: PUSH
19099: LD_INT 3
19101: PUSH
19102: EMPTY
19103: LIST
19104: LIST
19105: PUSH
19106: EMPTY
19107: LIST
19108: LIST
19109: PPUSH
19110: CALL_OW 69
19114: ST_TO_ADDR
// if not tmp then
19115: LD_VAR 0 2
19119: NOT
19120: IFFALSE 19124
// exit ;
19122: GO 19250
// side := 0 ;
19124: LD_ADDR_VAR 0 3
19128: PUSH
19129: LD_INT 0
19131: ST_TO_ADDR
// for i := 1 to 8 do
19132: LD_ADDR_VAR 0 1
19136: PUSH
19137: DOUBLE
19138: LD_INT 1
19140: DEC
19141: ST_TO_ADDR
19142: LD_INT 8
19144: PUSH
19145: FOR_TO
19146: IFFALSE 19194
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
19148: LD_OWVAR 2
19152: PUSH
19153: LD_VAR 0 1
19157: NONEQUAL
19158: PUSH
19159: LD_OWVAR 2
19163: PPUSH
19164: LD_VAR 0 1
19168: PPUSH
19169: CALL_OW 81
19173: PUSH
19174: LD_INT 2
19176: EQUAL
19177: AND
19178: IFFALSE 19192
// begin side := i ;
19180: LD_ADDR_VAR 0 3
19184: PUSH
19185: LD_VAR 0 1
19189: ST_TO_ADDR
// break ;
19190: GO 19194
// end ;
19192: GO 19145
19194: POP
19195: POP
// if not side then
19196: LD_VAR 0 3
19200: NOT
19201: IFFALSE 19205
// exit ;
19203: GO 19250
// for i := 1 to tmp do
19205: LD_ADDR_VAR 0 1
19209: PUSH
19210: DOUBLE
19211: LD_INT 1
19213: DEC
19214: ST_TO_ADDR
19215: LD_VAR 0 2
19219: PUSH
19220: FOR_TO
19221: IFFALSE 19248
// if Prob ( 60 ) then
19223: LD_INT 60
19225: PPUSH
19226: CALL_OW 13
19230: IFFALSE 19246
// SetSide ( i , side ) ;
19232: LD_VAR 0 1
19236: PPUSH
19237: LD_VAR 0 3
19241: PPUSH
19242: CALL_OW 235
19246: GO 19220
19248: POP
19249: POP
// end ;
19250: PPOPN 3
19252: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
19253: LD_EXP 41
19257: PUSH
19258: LD_EXP 54
19262: AND
19263: IFFALSE 19382
19265: GO 19267
19267: DISABLE
19268: LD_INT 0
19270: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
19271: LD_ADDR_VAR 0 1
19275: PUSH
19276: LD_INT 22
19278: PUSH
19279: LD_OWVAR 2
19283: PUSH
19284: EMPTY
19285: LIST
19286: LIST
19287: PUSH
19288: LD_INT 21
19290: PUSH
19291: LD_INT 1
19293: PUSH
19294: EMPTY
19295: LIST
19296: LIST
19297: PUSH
19298: LD_INT 3
19300: PUSH
19301: LD_INT 23
19303: PUSH
19304: LD_INT 0
19306: PUSH
19307: EMPTY
19308: LIST
19309: LIST
19310: PUSH
19311: EMPTY
19312: LIST
19313: LIST
19314: PUSH
19315: EMPTY
19316: LIST
19317: LIST
19318: LIST
19319: PPUSH
19320: CALL_OW 69
19324: PUSH
19325: FOR_IN
19326: IFFALSE 19380
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
19328: LD_VAR 0 1
19332: PPUSH
19333: CALL_OW 257
19337: PUSH
19338: LD_INT 1
19340: PUSH
19341: LD_INT 2
19343: PUSH
19344: LD_INT 3
19346: PUSH
19347: LD_INT 4
19349: PUSH
19350: EMPTY
19351: LIST
19352: LIST
19353: LIST
19354: LIST
19355: IN
19356: IFFALSE 19378
// SetClass ( un , rand ( 1 , 4 ) ) ;
19358: LD_VAR 0 1
19362: PPUSH
19363: LD_INT 1
19365: PPUSH
19366: LD_INT 4
19368: PPUSH
19369: CALL_OW 12
19373: PPUSH
19374: CALL_OW 336
19378: GO 19325
19380: POP
19381: POP
// end ;
19382: PPOPN 1
19384: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
19385: LD_EXP 41
19389: PUSH
19390: LD_EXP 53
19394: AND
19395: IFFALSE 19474
19397: GO 19399
19399: DISABLE
19400: LD_INT 0
19402: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
19403: LD_ADDR_VAR 0 1
19407: PUSH
19408: LD_INT 22
19410: PUSH
19411: LD_OWVAR 2
19415: PUSH
19416: EMPTY
19417: LIST
19418: LIST
19419: PUSH
19420: LD_INT 21
19422: PUSH
19423: LD_INT 3
19425: PUSH
19426: EMPTY
19427: LIST
19428: LIST
19429: PUSH
19430: EMPTY
19431: LIST
19432: LIST
19433: PPUSH
19434: CALL_OW 69
19438: ST_TO_ADDR
// if not tmp then
19439: LD_VAR 0 1
19443: NOT
19444: IFFALSE 19448
// exit ;
19446: GO 19474
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
19448: LD_VAR 0 1
19452: PUSH
19453: LD_INT 1
19455: PPUSH
19456: LD_VAR 0 1
19460: PPUSH
19461: CALL_OW 12
19465: ARRAY
19466: PPUSH
19467: LD_INT 100
19469: PPUSH
19470: CALL_OW 234
// end ;
19474: PPOPN 1
19476: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
19477: LD_EXP 41
19481: PUSH
19482: LD_EXP 55
19486: AND
19487: IFFALSE 19585
19489: GO 19491
19491: DISABLE
19492: LD_INT 0
19494: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19495: LD_ADDR_VAR 0 1
19499: PUSH
19500: LD_INT 22
19502: PUSH
19503: LD_OWVAR 2
19507: PUSH
19508: EMPTY
19509: LIST
19510: LIST
19511: PUSH
19512: LD_INT 21
19514: PUSH
19515: LD_INT 1
19517: PUSH
19518: EMPTY
19519: LIST
19520: LIST
19521: PUSH
19522: EMPTY
19523: LIST
19524: LIST
19525: PPUSH
19526: CALL_OW 69
19530: ST_TO_ADDR
// if not tmp then
19531: LD_VAR 0 1
19535: NOT
19536: IFFALSE 19540
// exit ;
19538: GO 19585
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
19540: LD_VAR 0 1
19544: PUSH
19545: LD_INT 1
19547: PPUSH
19548: LD_VAR 0 1
19552: PPUSH
19553: CALL_OW 12
19557: ARRAY
19558: PPUSH
19559: LD_INT 1
19561: PPUSH
19562: LD_INT 4
19564: PPUSH
19565: CALL_OW 12
19569: PPUSH
19570: LD_INT 3000
19572: PPUSH
19573: LD_INT 9000
19575: PPUSH
19576: CALL_OW 12
19580: PPUSH
19581: CALL_OW 492
// end ;
19585: PPOPN 1
19587: END
// every 0 0$1 trigger StreamModeActive and sDepot do
19588: LD_EXP 41
19592: PUSH
19593: LD_EXP 56
19597: AND
19598: IFFALSE 19618
19600: GO 19602
19602: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
19603: LD_INT 1
19605: PPUSH
19606: LD_OWVAR 2
19610: PPUSH
19611: LD_INT 0
19613: PPUSH
19614: CALL_OW 324
19618: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
19619: LD_EXP 41
19623: PUSH
19624: LD_EXP 57
19628: AND
19629: IFFALSE 19712
19631: GO 19633
19633: DISABLE
19634: LD_INT 0
19636: PPUSH
19637: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
19638: LD_ADDR_VAR 0 2
19642: PUSH
19643: LD_INT 22
19645: PUSH
19646: LD_OWVAR 2
19650: PUSH
19651: EMPTY
19652: LIST
19653: LIST
19654: PUSH
19655: LD_INT 21
19657: PUSH
19658: LD_INT 3
19660: PUSH
19661: EMPTY
19662: LIST
19663: LIST
19664: PUSH
19665: EMPTY
19666: LIST
19667: LIST
19668: PPUSH
19669: CALL_OW 69
19673: ST_TO_ADDR
// if not tmp then
19674: LD_VAR 0 2
19678: NOT
19679: IFFALSE 19683
// exit ;
19681: GO 19712
// for i in tmp do
19683: LD_ADDR_VAR 0 1
19687: PUSH
19688: LD_VAR 0 2
19692: PUSH
19693: FOR_IN
19694: IFFALSE 19710
// SetBLevel ( i , 10 ) ;
19696: LD_VAR 0 1
19700: PPUSH
19701: LD_INT 10
19703: PPUSH
19704: CALL_OW 241
19708: GO 19693
19710: POP
19711: POP
// end ;
19712: PPOPN 2
19714: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
19715: LD_EXP 41
19719: PUSH
19720: LD_EXP 58
19724: AND
19725: IFFALSE 19836
19727: GO 19729
19729: DISABLE
19730: LD_INT 0
19732: PPUSH
19733: PPUSH
19734: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19735: LD_ADDR_VAR 0 3
19739: PUSH
19740: LD_INT 22
19742: PUSH
19743: LD_OWVAR 2
19747: PUSH
19748: EMPTY
19749: LIST
19750: LIST
19751: PUSH
19752: LD_INT 25
19754: PUSH
19755: LD_INT 1
19757: PUSH
19758: EMPTY
19759: LIST
19760: LIST
19761: PUSH
19762: EMPTY
19763: LIST
19764: LIST
19765: PPUSH
19766: CALL_OW 69
19770: ST_TO_ADDR
// if not tmp then
19771: LD_VAR 0 3
19775: NOT
19776: IFFALSE 19780
// exit ;
19778: GO 19836
// un := tmp [ rand ( 1 , tmp ) ] ;
19780: LD_ADDR_VAR 0 2
19784: PUSH
19785: LD_VAR 0 3
19789: PUSH
19790: LD_INT 1
19792: PPUSH
19793: LD_VAR 0 3
19797: PPUSH
19798: CALL_OW 12
19802: ARRAY
19803: ST_TO_ADDR
// if Crawls ( un ) then
19804: LD_VAR 0 2
19808: PPUSH
19809: CALL_OW 318
19813: IFFALSE 19824
// ComWalk ( un ) ;
19815: LD_VAR 0 2
19819: PPUSH
19820: CALL_OW 138
// SetClass ( un , class_sniper ) ;
19824: LD_VAR 0 2
19828: PPUSH
19829: LD_INT 5
19831: PPUSH
19832: CALL_OW 336
// end ;
19836: PPOPN 3
19838: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
19839: LD_EXP 41
19843: PUSH
19844: LD_EXP 59
19848: AND
19849: PUSH
19850: LD_OWVAR 67
19854: PUSH
19855: LD_INT 4
19857: LESS
19858: AND
19859: IFFALSE 19878
19861: GO 19863
19863: DISABLE
// begin Difficulty := Difficulty + 1 ;
19864: LD_ADDR_OWVAR 67
19868: PUSH
19869: LD_OWVAR 67
19873: PUSH
19874: LD_INT 1
19876: PLUS
19877: ST_TO_ADDR
// end ;
19878: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
19879: LD_EXP 41
19883: PUSH
19884: LD_EXP 60
19888: AND
19889: IFFALSE 19992
19891: GO 19893
19893: DISABLE
19894: LD_INT 0
19896: PPUSH
// begin for i := 1 to 5 do
19897: LD_ADDR_VAR 0 1
19901: PUSH
19902: DOUBLE
19903: LD_INT 1
19905: DEC
19906: ST_TO_ADDR
19907: LD_INT 5
19909: PUSH
19910: FOR_TO
19911: IFFALSE 19990
// begin uc_nation := nation_nature ;
19913: LD_ADDR_OWVAR 21
19917: PUSH
19918: LD_INT 0
19920: ST_TO_ADDR
// uc_side := 0 ;
19921: LD_ADDR_OWVAR 20
19925: PUSH
19926: LD_INT 0
19928: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19929: LD_ADDR_OWVAR 29
19933: PUSH
19934: LD_INT 12
19936: PUSH
19937: LD_INT 12
19939: PUSH
19940: EMPTY
19941: LIST
19942: LIST
19943: ST_TO_ADDR
// hc_agressivity := 20 ;
19944: LD_ADDR_OWVAR 35
19948: PUSH
19949: LD_INT 20
19951: ST_TO_ADDR
// hc_class := class_tiger ;
19952: LD_ADDR_OWVAR 28
19956: PUSH
19957: LD_INT 14
19959: ST_TO_ADDR
// hc_gallery :=  ;
19960: LD_ADDR_OWVAR 33
19964: PUSH
19965: LD_STRING 
19967: ST_TO_ADDR
// hc_name :=  ;
19968: LD_ADDR_OWVAR 26
19972: PUSH
19973: LD_STRING 
19975: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
19976: CALL_OW 44
19980: PPUSH
19981: LD_INT 0
19983: PPUSH
19984: CALL_OW 51
// end ;
19988: GO 19910
19990: POP
19991: POP
// end ;
19992: PPOPN 1
19994: END
// every 0 0$1 trigger StreamModeActive and sBomb do
19995: LD_EXP 41
19999: PUSH
20000: LD_EXP 61
20004: AND
20005: IFFALSE 20014
20007: GO 20009
20009: DISABLE
// StreamSibBomb ;
20010: CALL 20015 0 0
20014: END
// export function StreamSibBomb ; var i , x , y ; begin
20015: LD_INT 0
20017: PPUSH
20018: PPUSH
20019: PPUSH
20020: PPUSH
// result := false ;
20021: LD_ADDR_VAR 0 1
20025: PUSH
20026: LD_INT 0
20028: ST_TO_ADDR
// for i := 1 to 16 do
20029: LD_ADDR_VAR 0 2
20033: PUSH
20034: DOUBLE
20035: LD_INT 1
20037: DEC
20038: ST_TO_ADDR
20039: LD_INT 16
20041: PUSH
20042: FOR_TO
20043: IFFALSE 20242
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
20045: LD_ADDR_VAR 0 3
20049: PUSH
20050: LD_INT 10
20052: PUSH
20053: LD_INT 20
20055: PUSH
20056: LD_INT 30
20058: PUSH
20059: LD_INT 40
20061: PUSH
20062: LD_INT 50
20064: PUSH
20065: LD_INT 60
20067: PUSH
20068: LD_INT 70
20070: PUSH
20071: LD_INT 80
20073: PUSH
20074: LD_INT 90
20076: PUSH
20077: LD_INT 100
20079: PUSH
20080: LD_INT 110
20082: PUSH
20083: LD_INT 120
20085: PUSH
20086: LD_INT 130
20088: PUSH
20089: LD_INT 140
20091: PUSH
20092: LD_INT 150
20094: PUSH
20095: EMPTY
20096: LIST
20097: LIST
20098: LIST
20099: LIST
20100: LIST
20101: LIST
20102: LIST
20103: LIST
20104: LIST
20105: LIST
20106: LIST
20107: LIST
20108: LIST
20109: LIST
20110: LIST
20111: PUSH
20112: LD_INT 1
20114: PPUSH
20115: LD_INT 15
20117: PPUSH
20118: CALL_OW 12
20122: ARRAY
20123: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
20124: LD_ADDR_VAR 0 4
20128: PUSH
20129: LD_INT 10
20131: PUSH
20132: LD_INT 20
20134: PUSH
20135: LD_INT 30
20137: PUSH
20138: LD_INT 40
20140: PUSH
20141: LD_INT 50
20143: PUSH
20144: LD_INT 60
20146: PUSH
20147: LD_INT 70
20149: PUSH
20150: LD_INT 80
20152: PUSH
20153: LD_INT 90
20155: PUSH
20156: LD_INT 100
20158: PUSH
20159: LD_INT 110
20161: PUSH
20162: LD_INT 120
20164: PUSH
20165: LD_INT 130
20167: PUSH
20168: LD_INT 140
20170: PUSH
20171: LD_INT 150
20173: PUSH
20174: EMPTY
20175: LIST
20176: LIST
20177: LIST
20178: LIST
20179: LIST
20180: LIST
20181: LIST
20182: LIST
20183: LIST
20184: LIST
20185: LIST
20186: LIST
20187: LIST
20188: LIST
20189: LIST
20190: PUSH
20191: LD_INT 1
20193: PPUSH
20194: LD_INT 15
20196: PPUSH
20197: CALL_OW 12
20201: ARRAY
20202: ST_TO_ADDR
// if ValidHex ( x , y ) then
20203: LD_VAR 0 3
20207: PPUSH
20208: LD_VAR 0 4
20212: PPUSH
20213: CALL_OW 488
20217: IFFALSE 20240
// begin result := [ x , y ] ;
20219: LD_ADDR_VAR 0 1
20223: PUSH
20224: LD_VAR 0 3
20228: PUSH
20229: LD_VAR 0 4
20233: PUSH
20234: EMPTY
20235: LIST
20236: LIST
20237: ST_TO_ADDR
// break ;
20238: GO 20242
// end ; end ;
20240: GO 20042
20242: POP
20243: POP
// if result then
20244: LD_VAR 0 1
20248: IFFALSE 20308
// begin ToLua ( playSibBomb() ) ;
20250: LD_STRING playSibBomb()
20252: PPUSH
20253: CALL_OW 559
// wait ( 0 0$14 ) ;
20257: LD_INT 490
20259: PPUSH
20260: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
20264: LD_VAR 0 1
20268: PUSH
20269: LD_INT 1
20271: ARRAY
20272: PPUSH
20273: LD_VAR 0 1
20277: PUSH
20278: LD_INT 2
20280: ARRAY
20281: PPUSH
20282: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
20286: LD_VAR 0 1
20290: PUSH
20291: LD_INT 1
20293: ARRAY
20294: PPUSH
20295: LD_VAR 0 1
20299: PUSH
20300: LD_INT 2
20302: ARRAY
20303: PPUSH
20304: CALL_OW 429
// end ; end ;
20308: LD_VAR 0 1
20312: RET
// every 0 0$1 trigger StreamModeActive and sReset do
20313: LD_EXP 41
20317: PUSH
20318: LD_EXP 63
20322: AND
20323: IFFALSE 20335
20325: GO 20327
20327: DISABLE
// YouLost (  ) ;
20328: LD_STRING 
20330: PPUSH
20331: CALL_OW 104
20335: END
// every 0 0$1 trigger StreamModeActive and sFog do
20336: LD_EXP 41
20340: PUSH
20341: LD_EXP 62
20345: AND
20346: IFFALSE 20360
20348: GO 20350
20350: DISABLE
// FogOff ( your_side ) ;
20351: LD_OWVAR 2
20355: PPUSH
20356: CALL_OW 344
20360: END
// every 0 0$1 trigger StreamModeActive and sSun do
20361: LD_EXP 41
20365: PUSH
20366: LD_EXP 64
20370: AND
20371: IFFALSE 20399
20373: GO 20375
20375: DISABLE
// begin solar_recharge_percent := 0 ;
20376: LD_ADDR_OWVAR 79
20380: PUSH
20381: LD_INT 0
20383: ST_TO_ADDR
// wait ( 5 5$00 ) ;
20384: LD_INT 10500
20386: PPUSH
20387: CALL_OW 67
// solar_recharge_percent := 100 ;
20391: LD_ADDR_OWVAR 79
20395: PUSH
20396: LD_INT 100
20398: ST_TO_ADDR
// end ;
20399: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
20400: LD_EXP 41
20404: PUSH
20405: LD_EXP 65
20409: AND
20410: IFFALSE 20649
20412: GO 20414
20414: DISABLE
20415: LD_INT 0
20417: PPUSH
20418: PPUSH
20419: PPUSH
// begin tmp := [ ] ;
20420: LD_ADDR_VAR 0 3
20424: PUSH
20425: EMPTY
20426: ST_TO_ADDR
// for i := 1 to 6 do
20427: LD_ADDR_VAR 0 1
20431: PUSH
20432: DOUBLE
20433: LD_INT 1
20435: DEC
20436: ST_TO_ADDR
20437: LD_INT 6
20439: PUSH
20440: FOR_TO
20441: IFFALSE 20546
// begin uc_nation := nation_nature ;
20443: LD_ADDR_OWVAR 21
20447: PUSH
20448: LD_INT 0
20450: ST_TO_ADDR
// uc_side := 0 ;
20451: LD_ADDR_OWVAR 20
20455: PUSH
20456: LD_INT 0
20458: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
20459: LD_ADDR_OWVAR 29
20463: PUSH
20464: LD_INT 12
20466: PUSH
20467: LD_INT 12
20469: PUSH
20470: EMPTY
20471: LIST
20472: LIST
20473: ST_TO_ADDR
// hc_agressivity := 20 ;
20474: LD_ADDR_OWVAR 35
20478: PUSH
20479: LD_INT 20
20481: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
20482: LD_ADDR_OWVAR 28
20486: PUSH
20487: LD_INT 17
20489: ST_TO_ADDR
// hc_gallery :=  ;
20490: LD_ADDR_OWVAR 33
20494: PUSH
20495: LD_STRING 
20497: ST_TO_ADDR
// hc_name :=  ;
20498: LD_ADDR_OWVAR 26
20502: PUSH
20503: LD_STRING 
20505: ST_TO_ADDR
// un := CreateHuman ;
20506: LD_ADDR_VAR 0 2
20510: PUSH
20511: CALL_OW 44
20515: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
20516: LD_VAR 0 2
20520: PPUSH
20521: LD_INT 1
20523: PPUSH
20524: CALL_OW 51
// tmp := tmp ^ un ;
20528: LD_ADDR_VAR 0 3
20532: PUSH
20533: LD_VAR 0 3
20537: PUSH
20538: LD_VAR 0 2
20542: ADD
20543: ST_TO_ADDR
// end ;
20544: GO 20440
20546: POP
20547: POP
// repeat wait ( 0 0$1 ) ;
20548: LD_INT 35
20550: PPUSH
20551: CALL_OW 67
// for un in tmp do
20555: LD_ADDR_VAR 0 2
20559: PUSH
20560: LD_VAR 0 3
20564: PUSH
20565: FOR_IN
20566: IFFALSE 20640
// begin if IsDead ( un ) then
20568: LD_VAR 0 2
20572: PPUSH
20573: CALL_OW 301
20577: IFFALSE 20597
// begin tmp := tmp diff un ;
20579: LD_ADDR_VAR 0 3
20583: PUSH
20584: LD_VAR 0 3
20588: PUSH
20589: LD_VAR 0 2
20593: DIFF
20594: ST_TO_ADDR
// continue ;
20595: GO 20565
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
20597: LD_VAR 0 2
20601: PPUSH
20602: LD_INT 3
20604: PUSH
20605: LD_INT 22
20607: PUSH
20608: LD_INT 0
20610: PUSH
20611: EMPTY
20612: LIST
20613: LIST
20614: PUSH
20615: EMPTY
20616: LIST
20617: LIST
20618: PPUSH
20619: CALL_OW 69
20623: PPUSH
20624: LD_VAR 0 2
20628: PPUSH
20629: CALL_OW 74
20633: PPUSH
20634: CALL_OW 115
// end ;
20638: GO 20565
20640: POP
20641: POP
// until not tmp ;
20642: LD_VAR 0 3
20646: NOT
20647: IFFALSE 20548
// end ;
20649: PPOPN 3
20651: END
// every 0 0$1 trigger StreamModeActive and sTroll do
20652: LD_EXP 41
20656: PUSH
20657: LD_EXP 66
20661: AND
20662: IFFALSE 20716
20664: GO 20666
20666: DISABLE
// begin ToLua ( displayTroll(); ) ;
20667: LD_STRING displayTroll();
20669: PPUSH
20670: CALL_OW 559
// wait ( 3 3$00 ) ;
20674: LD_INT 6300
20676: PPUSH
20677: CALL_OW 67
// ToLua ( hideTroll(); ) ;
20681: LD_STRING hideTroll();
20683: PPUSH
20684: CALL_OW 559
// wait ( 1 1$00 ) ;
20688: LD_INT 2100
20690: PPUSH
20691: CALL_OW 67
// ToLua ( displayTroll(); ) ;
20695: LD_STRING displayTroll();
20697: PPUSH
20698: CALL_OW 559
// wait ( 1 1$00 ) ;
20702: LD_INT 2100
20704: PPUSH
20705: CALL_OW 67
// ToLua ( hideTroll(); ) ;
20709: LD_STRING hideTroll();
20711: PPUSH
20712: CALL_OW 559
// end ;
20716: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
20717: LD_EXP 41
20721: PUSH
20722: LD_EXP 67
20726: AND
20727: IFFALSE 20790
20729: GO 20731
20731: DISABLE
20732: LD_INT 0
20734: PPUSH
// begin p := 0 ;
20735: LD_ADDR_VAR 0 1
20739: PUSH
20740: LD_INT 0
20742: ST_TO_ADDR
// repeat game_speed := 1 ;
20743: LD_ADDR_OWVAR 65
20747: PUSH
20748: LD_INT 1
20750: ST_TO_ADDR
// wait ( 0 0$1 ) ;
20751: LD_INT 35
20753: PPUSH
20754: CALL_OW 67
// p := p + 1 ;
20758: LD_ADDR_VAR 0 1
20762: PUSH
20763: LD_VAR 0 1
20767: PUSH
20768: LD_INT 1
20770: PLUS
20771: ST_TO_ADDR
// until p >= 60 ;
20772: LD_VAR 0 1
20776: PUSH
20777: LD_INT 60
20779: GREATEREQUAL
20780: IFFALSE 20743
// game_speed := 4 ;
20782: LD_ADDR_OWVAR 65
20786: PUSH
20787: LD_INT 4
20789: ST_TO_ADDR
// end ;
20790: PPOPN 1
20792: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
20793: LD_EXP 41
20797: PUSH
20798: LD_EXP 68
20802: AND
20803: IFFALSE 20949
20805: GO 20807
20807: DISABLE
20808: LD_INT 0
20810: PPUSH
20811: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20812: LD_ADDR_VAR 0 1
20816: PUSH
20817: LD_INT 22
20819: PUSH
20820: LD_OWVAR 2
20824: PUSH
20825: EMPTY
20826: LIST
20827: LIST
20828: PUSH
20829: LD_INT 2
20831: PUSH
20832: LD_INT 30
20834: PUSH
20835: LD_INT 0
20837: PUSH
20838: EMPTY
20839: LIST
20840: LIST
20841: PUSH
20842: LD_INT 30
20844: PUSH
20845: LD_INT 1
20847: PUSH
20848: EMPTY
20849: LIST
20850: LIST
20851: PUSH
20852: EMPTY
20853: LIST
20854: LIST
20855: LIST
20856: PUSH
20857: EMPTY
20858: LIST
20859: LIST
20860: PPUSH
20861: CALL_OW 69
20865: ST_TO_ADDR
// if not depot then
20866: LD_VAR 0 1
20870: NOT
20871: IFFALSE 20875
// exit ;
20873: GO 20949
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
20875: LD_ADDR_VAR 0 2
20879: PUSH
20880: LD_VAR 0 1
20884: PUSH
20885: LD_INT 1
20887: PPUSH
20888: LD_VAR 0 1
20892: PPUSH
20893: CALL_OW 12
20897: ARRAY
20898: PPUSH
20899: CALL_OW 274
20903: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
20904: LD_VAR 0 2
20908: PPUSH
20909: LD_INT 1
20911: PPUSH
20912: LD_INT 0
20914: PPUSH
20915: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
20919: LD_VAR 0 2
20923: PPUSH
20924: LD_INT 2
20926: PPUSH
20927: LD_INT 0
20929: PPUSH
20930: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
20934: LD_VAR 0 2
20938: PPUSH
20939: LD_INT 3
20941: PPUSH
20942: LD_INT 0
20944: PPUSH
20945: CALL_OW 277
// end ;
20949: PPOPN 2
20951: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
20952: LD_EXP 41
20956: PUSH
20957: LD_EXP 69
20961: AND
20962: IFFALSE 21059
20964: GO 20966
20966: DISABLE
20967: LD_INT 0
20969: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20970: LD_ADDR_VAR 0 1
20974: PUSH
20975: LD_INT 22
20977: PUSH
20978: LD_OWVAR 2
20982: PUSH
20983: EMPTY
20984: LIST
20985: LIST
20986: PUSH
20987: LD_INT 21
20989: PUSH
20990: LD_INT 1
20992: PUSH
20993: EMPTY
20994: LIST
20995: LIST
20996: PUSH
20997: LD_INT 3
20999: PUSH
21000: LD_INT 23
21002: PUSH
21003: LD_INT 0
21005: PUSH
21006: EMPTY
21007: LIST
21008: LIST
21009: PUSH
21010: EMPTY
21011: LIST
21012: LIST
21013: PUSH
21014: EMPTY
21015: LIST
21016: LIST
21017: LIST
21018: PPUSH
21019: CALL_OW 69
21023: ST_TO_ADDR
// if not tmp then
21024: LD_VAR 0 1
21028: NOT
21029: IFFALSE 21033
// exit ;
21031: GO 21059
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
21033: LD_VAR 0 1
21037: PUSH
21038: LD_INT 1
21040: PPUSH
21041: LD_VAR 0 1
21045: PPUSH
21046: CALL_OW 12
21050: ARRAY
21051: PPUSH
21052: LD_INT 200
21054: PPUSH
21055: CALL_OW 234
// end ;
21059: PPOPN 1
21061: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
21062: LD_EXP 41
21066: PUSH
21067: LD_EXP 70
21071: AND
21072: IFFALSE 21151
21074: GO 21076
21076: DISABLE
21077: LD_INT 0
21079: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
21080: LD_ADDR_VAR 0 1
21084: PUSH
21085: LD_INT 22
21087: PUSH
21088: LD_OWVAR 2
21092: PUSH
21093: EMPTY
21094: LIST
21095: LIST
21096: PUSH
21097: LD_INT 21
21099: PUSH
21100: LD_INT 2
21102: PUSH
21103: EMPTY
21104: LIST
21105: LIST
21106: PUSH
21107: EMPTY
21108: LIST
21109: LIST
21110: PPUSH
21111: CALL_OW 69
21115: ST_TO_ADDR
// if not tmp then
21116: LD_VAR 0 1
21120: NOT
21121: IFFALSE 21125
// exit ;
21123: GO 21151
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
21125: LD_VAR 0 1
21129: PUSH
21130: LD_INT 1
21132: PPUSH
21133: LD_VAR 0 1
21137: PPUSH
21138: CALL_OW 12
21142: ARRAY
21143: PPUSH
21144: LD_INT 60
21146: PPUSH
21147: CALL_OW 234
// end ;
21151: PPOPN 1
21153: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
21154: LD_EXP 41
21158: PUSH
21159: LD_EXP 71
21163: AND
21164: IFFALSE 21263
21166: GO 21168
21168: DISABLE
21169: LD_INT 0
21171: PPUSH
21172: PPUSH
// begin enable ;
21173: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
21174: LD_ADDR_VAR 0 1
21178: PUSH
21179: LD_INT 22
21181: PUSH
21182: LD_OWVAR 2
21186: PUSH
21187: EMPTY
21188: LIST
21189: LIST
21190: PUSH
21191: LD_INT 61
21193: PUSH
21194: EMPTY
21195: LIST
21196: PUSH
21197: LD_INT 33
21199: PUSH
21200: LD_INT 2
21202: PUSH
21203: EMPTY
21204: LIST
21205: LIST
21206: PUSH
21207: EMPTY
21208: LIST
21209: LIST
21210: LIST
21211: PPUSH
21212: CALL_OW 69
21216: ST_TO_ADDR
// if not tmp then
21217: LD_VAR 0 1
21221: NOT
21222: IFFALSE 21226
// exit ;
21224: GO 21263
// for i in tmp do
21226: LD_ADDR_VAR 0 2
21230: PUSH
21231: LD_VAR 0 1
21235: PUSH
21236: FOR_IN
21237: IFFALSE 21261
// if IsControledBy ( i ) then
21239: LD_VAR 0 2
21243: PPUSH
21244: CALL_OW 312
21248: IFFALSE 21259
// ComUnlink ( i ) ;
21250: LD_VAR 0 2
21254: PPUSH
21255: CALL_OW 136
21259: GO 21236
21261: POP
21262: POP
// end ;
21263: PPOPN 2
21265: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
21266: LD_EXP 41
21270: PUSH
21271: LD_EXP 72
21275: AND
21276: IFFALSE 21416
21278: GO 21280
21280: DISABLE
21281: LD_INT 0
21283: PPUSH
21284: PPUSH
// begin ToLua ( displayPowell(); ) ;
21285: LD_STRING displayPowell();
21287: PPUSH
21288: CALL_OW 559
// uc_side := 0 ;
21292: LD_ADDR_OWVAR 20
21296: PUSH
21297: LD_INT 0
21299: ST_TO_ADDR
// uc_nation := 2 ;
21300: LD_ADDR_OWVAR 21
21304: PUSH
21305: LD_INT 2
21307: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
21308: LD_ADDR_OWVAR 37
21312: PUSH
21313: LD_INT 14
21315: ST_TO_ADDR
// vc_engine := engine_siberite ;
21316: LD_ADDR_OWVAR 39
21320: PUSH
21321: LD_INT 3
21323: ST_TO_ADDR
// vc_control := control_apeman ;
21324: LD_ADDR_OWVAR 38
21328: PUSH
21329: LD_INT 5
21331: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
21332: LD_ADDR_OWVAR 40
21336: PUSH
21337: LD_INT 29
21339: ST_TO_ADDR
// un := CreateVehicle ;
21340: LD_ADDR_VAR 0 2
21344: PUSH
21345: CALL_OW 45
21349: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21350: LD_VAR 0 2
21354: PPUSH
21355: LD_INT 1
21357: PPUSH
21358: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
21362: LD_INT 35
21364: PPUSH
21365: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
21369: LD_VAR 0 2
21373: PPUSH
21374: LD_INT 22
21376: PUSH
21377: LD_OWVAR 2
21381: PUSH
21382: EMPTY
21383: LIST
21384: LIST
21385: PPUSH
21386: CALL_OW 69
21390: PPUSH
21391: LD_VAR 0 2
21395: PPUSH
21396: CALL_OW 74
21400: PPUSH
21401: CALL_OW 115
// until IsDead ( un ) ;
21405: LD_VAR 0 2
21409: PPUSH
21410: CALL_OW 301
21414: IFFALSE 21362
// end ;
21416: PPOPN 2
21418: END
// every 0 0$1 trigger StreamModeActive and sStu do
21419: LD_EXP 41
21423: PUSH
21424: LD_EXP 80
21428: AND
21429: IFFALSE 21445
21431: GO 21433
21433: DISABLE
// begin ToLua ( displayStucuk(); ) ;
21434: LD_STRING displayStucuk();
21436: PPUSH
21437: CALL_OW 559
// ResetFog ;
21441: CALL_OW 335
// end ;
21445: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
21446: LD_EXP 41
21450: PUSH
21451: LD_EXP 73
21455: AND
21456: IFFALSE 21597
21458: GO 21460
21460: DISABLE
21461: LD_INT 0
21463: PPUSH
21464: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
21465: LD_ADDR_VAR 0 2
21469: PUSH
21470: LD_INT 22
21472: PUSH
21473: LD_OWVAR 2
21477: PUSH
21478: EMPTY
21479: LIST
21480: LIST
21481: PUSH
21482: LD_INT 21
21484: PUSH
21485: LD_INT 1
21487: PUSH
21488: EMPTY
21489: LIST
21490: LIST
21491: PUSH
21492: EMPTY
21493: LIST
21494: LIST
21495: PPUSH
21496: CALL_OW 69
21500: ST_TO_ADDR
// if not tmp then
21501: LD_VAR 0 2
21505: NOT
21506: IFFALSE 21510
// exit ;
21508: GO 21597
// un := tmp [ rand ( 1 , tmp ) ] ;
21510: LD_ADDR_VAR 0 1
21514: PUSH
21515: LD_VAR 0 2
21519: PUSH
21520: LD_INT 1
21522: PPUSH
21523: LD_VAR 0 2
21527: PPUSH
21528: CALL_OW 12
21532: ARRAY
21533: ST_TO_ADDR
// SetSide ( un , 0 ) ;
21534: LD_VAR 0 1
21538: PPUSH
21539: LD_INT 0
21541: PPUSH
21542: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
21546: LD_VAR 0 1
21550: PPUSH
21551: LD_OWVAR 3
21555: PUSH
21556: LD_VAR 0 1
21560: DIFF
21561: PPUSH
21562: LD_VAR 0 1
21566: PPUSH
21567: CALL_OW 74
21571: PPUSH
21572: CALL_OW 115
// wait ( 0 0$20 ) ;
21576: LD_INT 700
21578: PPUSH
21579: CALL_OW 67
// SetSide ( un , your_side ) ;
21583: LD_VAR 0 1
21587: PPUSH
21588: LD_OWVAR 2
21592: PPUSH
21593: CALL_OW 235
// end ;
21597: PPOPN 2
21599: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
21600: LD_EXP 41
21604: PUSH
21605: LD_EXP 74
21609: AND
21610: IFFALSE 21716
21612: GO 21614
21614: DISABLE
21615: LD_INT 0
21617: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21618: LD_ADDR_VAR 0 1
21622: PUSH
21623: LD_INT 22
21625: PUSH
21626: LD_OWVAR 2
21630: PUSH
21631: EMPTY
21632: LIST
21633: LIST
21634: PUSH
21635: LD_INT 2
21637: PUSH
21638: LD_INT 30
21640: PUSH
21641: LD_INT 0
21643: PUSH
21644: EMPTY
21645: LIST
21646: LIST
21647: PUSH
21648: LD_INT 30
21650: PUSH
21651: LD_INT 1
21653: PUSH
21654: EMPTY
21655: LIST
21656: LIST
21657: PUSH
21658: EMPTY
21659: LIST
21660: LIST
21661: LIST
21662: PUSH
21663: EMPTY
21664: LIST
21665: LIST
21666: PPUSH
21667: CALL_OW 69
21671: ST_TO_ADDR
// if not depot then
21672: LD_VAR 0 1
21676: NOT
21677: IFFALSE 21681
// exit ;
21679: GO 21716
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
21681: LD_VAR 0 1
21685: PUSH
21686: LD_INT 1
21688: ARRAY
21689: PPUSH
21690: CALL_OW 250
21694: PPUSH
21695: LD_VAR 0 1
21699: PUSH
21700: LD_INT 1
21702: ARRAY
21703: PPUSH
21704: CALL_OW 251
21708: PPUSH
21709: LD_INT 70
21711: PPUSH
21712: CALL_OW 495
// end ;
21716: PPOPN 1
21718: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
21719: LD_EXP 41
21723: PUSH
21724: LD_EXP 75
21728: AND
21729: IFFALSE 21940
21731: GO 21733
21733: DISABLE
21734: LD_INT 0
21736: PPUSH
21737: PPUSH
21738: PPUSH
21739: PPUSH
21740: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
21741: LD_ADDR_VAR 0 5
21745: PUSH
21746: LD_INT 22
21748: PUSH
21749: LD_OWVAR 2
21753: PUSH
21754: EMPTY
21755: LIST
21756: LIST
21757: PUSH
21758: LD_INT 21
21760: PUSH
21761: LD_INT 1
21763: PUSH
21764: EMPTY
21765: LIST
21766: LIST
21767: PUSH
21768: EMPTY
21769: LIST
21770: LIST
21771: PPUSH
21772: CALL_OW 69
21776: ST_TO_ADDR
// if not tmp then
21777: LD_VAR 0 5
21781: NOT
21782: IFFALSE 21786
// exit ;
21784: GO 21940
// for i in tmp do
21786: LD_ADDR_VAR 0 1
21790: PUSH
21791: LD_VAR 0 5
21795: PUSH
21796: FOR_IN
21797: IFFALSE 21938
// begin d := rand ( 0 , 5 ) ;
21799: LD_ADDR_VAR 0 4
21803: PUSH
21804: LD_INT 0
21806: PPUSH
21807: LD_INT 5
21809: PPUSH
21810: CALL_OW 12
21814: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
21815: LD_ADDR_VAR 0 2
21819: PUSH
21820: LD_VAR 0 1
21824: PPUSH
21825: CALL_OW 250
21829: PPUSH
21830: LD_VAR 0 4
21834: PPUSH
21835: LD_INT 3
21837: PPUSH
21838: LD_INT 12
21840: PPUSH
21841: CALL_OW 12
21845: PPUSH
21846: CALL_OW 272
21850: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
21851: LD_ADDR_VAR 0 3
21855: PUSH
21856: LD_VAR 0 1
21860: PPUSH
21861: CALL_OW 251
21865: PPUSH
21866: LD_VAR 0 4
21870: PPUSH
21871: LD_INT 3
21873: PPUSH
21874: LD_INT 12
21876: PPUSH
21877: CALL_OW 12
21881: PPUSH
21882: CALL_OW 273
21886: ST_TO_ADDR
// if ValidHex ( x , y ) then
21887: LD_VAR 0 2
21891: PPUSH
21892: LD_VAR 0 3
21896: PPUSH
21897: CALL_OW 488
21901: IFFALSE 21936
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
21903: LD_VAR 0 1
21907: PPUSH
21908: LD_VAR 0 2
21912: PPUSH
21913: LD_VAR 0 3
21917: PPUSH
21918: LD_INT 3
21920: PPUSH
21921: LD_INT 6
21923: PPUSH
21924: CALL_OW 12
21928: PPUSH
21929: LD_INT 1
21931: PPUSH
21932: CALL_OW 483
// end ;
21936: GO 21796
21938: POP
21939: POP
// end ;
21940: PPOPN 5
21942: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
21943: LD_EXP 41
21947: PUSH
21948: LD_EXP 76
21952: AND
21953: IFFALSE 22047
21955: GO 21957
21957: DISABLE
21958: LD_INT 0
21960: PPUSH
21961: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
21962: LD_ADDR_VAR 0 2
21966: PUSH
21967: LD_INT 22
21969: PUSH
21970: LD_OWVAR 2
21974: PUSH
21975: EMPTY
21976: LIST
21977: LIST
21978: PUSH
21979: LD_INT 32
21981: PUSH
21982: LD_INT 1
21984: PUSH
21985: EMPTY
21986: LIST
21987: LIST
21988: PUSH
21989: LD_INT 21
21991: PUSH
21992: LD_INT 2
21994: PUSH
21995: EMPTY
21996: LIST
21997: LIST
21998: PUSH
21999: EMPTY
22000: LIST
22001: LIST
22002: LIST
22003: PPUSH
22004: CALL_OW 69
22008: ST_TO_ADDR
// if not tmp then
22009: LD_VAR 0 2
22013: NOT
22014: IFFALSE 22018
// exit ;
22016: GO 22047
// for i in tmp do
22018: LD_ADDR_VAR 0 1
22022: PUSH
22023: LD_VAR 0 2
22027: PUSH
22028: FOR_IN
22029: IFFALSE 22045
// SetFuel ( i , 0 ) ;
22031: LD_VAR 0 1
22035: PPUSH
22036: LD_INT 0
22038: PPUSH
22039: CALL_OW 240
22043: GO 22028
22045: POP
22046: POP
// end ;
22047: PPOPN 2
22049: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
22050: LD_EXP 41
22054: PUSH
22055: LD_EXP 77
22059: AND
22060: IFFALSE 22126
22062: GO 22064
22064: DISABLE
22065: LD_INT 0
22067: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
22068: LD_ADDR_VAR 0 1
22072: PUSH
22073: LD_INT 22
22075: PUSH
22076: LD_OWVAR 2
22080: PUSH
22081: EMPTY
22082: LIST
22083: LIST
22084: PUSH
22085: LD_INT 30
22087: PUSH
22088: LD_INT 29
22090: PUSH
22091: EMPTY
22092: LIST
22093: LIST
22094: PUSH
22095: EMPTY
22096: LIST
22097: LIST
22098: PPUSH
22099: CALL_OW 69
22103: ST_TO_ADDR
// if not tmp then
22104: LD_VAR 0 1
22108: NOT
22109: IFFALSE 22113
// exit ;
22111: GO 22126
// DestroyUnit ( tmp [ 1 ] ) ;
22113: LD_VAR 0 1
22117: PUSH
22118: LD_INT 1
22120: ARRAY
22121: PPUSH
22122: CALL_OW 65
// end ;
22126: PPOPN 1
22128: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
22129: LD_EXP 41
22133: PUSH
22134: LD_EXP 79
22138: AND
22139: IFFALSE 22268
22141: GO 22143
22143: DISABLE
22144: LD_INT 0
22146: PPUSH
// begin uc_side := 0 ;
22147: LD_ADDR_OWVAR 20
22151: PUSH
22152: LD_INT 0
22154: ST_TO_ADDR
// uc_nation := nation_arabian ;
22155: LD_ADDR_OWVAR 21
22159: PUSH
22160: LD_INT 2
22162: ST_TO_ADDR
// hc_gallery :=  ;
22163: LD_ADDR_OWVAR 33
22167: PUSH
22168: LD_STRING 
22170: ST_TO_ADDR
// hc_name :=  ;
22171: LD_ADDR_OWVAR 26
22175: PUSH
22176: LD_STRING 
22178: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
22179: LD_INT 1
22181: PPUSH
22182: LD_INT 11
22184: PPUSH
22185: LD_INT 10
22187: PPUSH
22188: CALL_OW 380
// un := CreateHuman ;
22192: LD_ADDR_VAR 0 1
22196: PUSH
22197: CALL_OW 44
22201: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
22202: LD_VAR 0 1
22206: PPUSH
22207: LD_INT 1
22209: PPUSH
22210: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
22214: LD_INT 35
22216: PPUSH
22217: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
22221: LD_VAR 0 1
22225: PPUSH
22226: LD_INT 22
22228: PUSH
22229: LD_OWVAR 2
22233: PUSH
22234: EMPTY
22235: LIST
22236: LIST
22237: PPUSH
22238: CALL_OW 69
22242: PPUSH
22243: LD_VAR 0 1
22247: PPUSH
22248: CALL_OW 74
22252: PPUSH
22253: CALL_OW 115
// until IsDead ( un ) ;
22257: LD_VAR 0 1
22261: PPUSH
22262: CALL_OW 301
22266: IFFALSE 22214
// end ;
22268: PPOPN 1
22270: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
22271: LD_EXP 41
22275: PUSH
22276: LD_EXP 81
22280: AND
22281: IFFALSE 22293
22283: GO 22285
22285: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
22286: LD_STRING earthquake(getX(game), 0, 32)
22288: PPUSH
22289: CALL_OW 559
22293: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
22294: LD_EXP 41
22298: PUSH
22299: LD_EXP 82
22303: AND
22304: IFFALSE 22395
22306: GO 22308
22308: DISABLE
22309: LD_INT 0
22311: PPUSH
// begin enable ;
22312: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
22313: LD_ADDR_VAR 0 1
22317: PUSH
22318: LD_INT 22
22320: PUSH
22321: LD_OWVAR 2
22325: PUSH
22326: EMPTY
22327: LIST
22328: LIST
22329: PUSH
22330: LD_INT 21
22332: PUSH
22333: LD_INT 2
22335: PUSH
22336: EMPTY
22337: LIST
22338: LIST
22339: PUSH
22340: LD_INT 33
22342: PUSH
22343: LD_INT 3
22345: PUSH
22346: EMPTY
22347: LIST
22348: LIST
22349: PUSH
22350: EMPTY
22351: LIST
22352: LIST
22353: LIST
22354: PPUSH
22355: CALL_OW 69
22359: ST_TO_ADDR
// if not tmp then
22360: LD_VAR 0 1
22364: NOT
22365: IFFALSE 22369
// exit ;
22367: GO 22395
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
22369: LD_VAR 0 1
22373: PUSH
22374: LD_INT 1
22376: PPUSH
22377: LD_VAR 0 1
22381: PPUSH
22382: CALL_OW 12
22386: ARRAY
22387: PPUSH
22388: LD_INT 1
22390: PPUSH
22391: CALL_OW 234
// end ;
22395: PPOPN 1
22397: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
22398: LD_EXP 41
22402: PUSH
22403: LD_EXP 83
22407: AND
22408: IFFALSE 22549
22410: GO 22412
22412: DISABLE
22413: LD_INT 0
22415: PPUSH
22416: PPUSH
22417: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22418: LD_ADDR_VAR 0 3
22422: PUSH
22423: LD_INT 22
22425: PUSH
22426: LD_OWVAR 2
22430: PUSH
22431: EMPTY
22432: LIST
22433: LIST
22434: PUSH
22435: LD_INT 25
22437: PUSH
22438: LD_INT 1
22440: PUSH
22441: EMPTY
22442: LIST
22443: LIST
22444: PUSH
22445: EMPTY
22446: LIST
22447: LIST
22448: PPUSH
22449: CALL_OW 69
22453: ST_TO_ADDR
// if not tmp then
22454: LD_VAR 0 3
22458: NOT
22459: IFFALSE 22463
// exit ;
22461: GO 22549
// un := tmp [ rand ( 1 , tmp ) ] ;
22463: LD_ADDR_VAR 0 2
22467: PUSH
22468: LD_VAR 0 3
22472: PUSH
22473: LD_INT 1
22475: PPUSH
22476: LD_VAR 0 3
22480: PPUSH
22481: CALL_OW 12
22485: ARRAY
22486: ST_TO_ADDR
// if Crawls ( un ) then
22487: LD_VAR 0 2
22491: PPUSH
22492: CALL_OW 318
22496: IFFALSE 22507
// ComWalk ( un ) ;
22498: LD_VAR 0 2
22502: PPUSH
22503: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
22507: LD_VAR 0 2
22511: PPUSH
22512: LD_INT 9
22514: PPUSH
22515: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
22519: LD_INT 28
22521: PPUSH
22522: LD_OWVAR 2
22526: PPUSH
22527: LD_INT 2
22529: PPUSH
22530: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
22534: LD_INT 29
22536: PPUSH
22537: LD_OWVAR 2
22541: PPUSH
22542: LD_INT 2
22544: PPUSH
22545: CALL_OW 322
// end ;
22549: PPOPN 3
22551: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
22552: LD_EXP 41
22556: PUSH
22557: LD_EXP 84
22561: AND
22562: IFFALSE 22673
22564: GO 22566
22566: DISABLE
22567: LD_INT 0
22569: PPUSH
22570: PPUSH
22571: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22572: LD_ADDR_VAR 0 3
22576: PUSH
22577: LD_INT 22
22579: PUSH
22580: LD_OWVAR 2
22584: PUSH
22585: EMPTY
22586: LIST
22587: LIST
22588: PUSH
22589: LD_INT 25
22591: PUSH
22592: LD_INT 1
22594: PUSH
22595: EMPTY
22596: LIST
22597: LIST
22598: PUSH
22599: EMPTY
22600: LIST
22601: LIST
22602: PPUSH
22603: CALL_OW 69
22607: ST_TO_ADDR
// if not tmp then
22608: LD_VAR 0 3
22612: NOT
22613: IFFALSE 22617
// exit ;
22615: GO 22673
// un := tmp [ rand ( 1 , tmp ) ] ;
22617: LD_ADDR_VAR 0 2
22621: PUSH
22622: LD_VAR 0 3
22626: PUSH
22627: LD_INT 1
22629: PPUSH
22630: LD_VAR 0 3
22634: PPUSH
22635: CALL_OW 12
22639: ARRAY
22640: ST_TO_ADDR
// if Crawls ( un ) then
22641: LD_VAR 0 2
22645: PPUSH
22646: CALL_OW 318
22650: IFFALSE 22661
// ComWalk ( un ) ;
22652: LD_VAR 0 2
22656: PPUSH
22657: CALL_OW 138
// SetClass ( un , class_mortar ) ;
22661: LD_VAR 0 2
22665: PPUSH
22666: LD_INT 8
22668: PPUSH
22669: CALL_OW 336
// end ;
22673: PPOPN 3
22675: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
22676: LD_EXP 41
22680: PUSH
22681: LD_EXP 85
22685: AND
22686: IFFALSE 22830
22688: GO 22690
22690: DISABLE
22691: LD_INT 0
22693: PPUSH
22694: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
22695: LD_ADDR_VAR 0 2
22699: PUSH
22700: LD_INT 22
22702: PUSH
22703: LD_OWVAR 2
22707: PUSH
22708: EMPTY
22709: LIST
22710: LIST
22711: PUSH
22712: LD_INT 21
22714: PUSH
22715: LD_INT 2
22717: PUSH
22718: EMPTY
22719: LIST
22720: LIST
22721: PUSH
22722: LD_INT 2
22724: PUSH
22725: LD_INT 34
22727: PUSH
22728: LD_INT 12
22730: PUSH
22731: EMPTY
22732: LIST
22733: LIST
22734: PUSH
22735: LD_INT 34
22737: PUSH
22738: LD_INT 51
22740: PUSH
22741: EMPTY
22742: LIST
22743: LIST
22744: PUSH
22745: LD_INT 34
22747: PUSH
22748: LD_INT 32
22750: PUSH
22751: EMPTY
22752: LIST
22753: LIST
22754: PUSH
22755: EMPTY
22756: LIST
22757: LIST
22758: LIST
22759: LIST
22760: PUSH
22761: EMPTY
22762: LIST
22763: LIST
22764: LIST
22765: PPUSH
22766: CALL_OW 69
22770: ST_TO_ADDR
// if not tmp then
22771: LD_VAR 0 2
22775: NOT
22776: IFFALSE 22780
// exit ;
22778: GO 22830
// for i in tmp do
22780: LD_ADDR_VAR 0 1
22784: PUSH
22785: LD_VAR 0 2
22789: PUSH
22790: FOR_IN
22791: IFFALSE 22828
// if GetCargo ( i , mat_artifact ) = 0 then
22793: LD_VAR 0 1
22797: PPUSH
22798: LD_INT 4
22800: PPUSH
22801: CALL_OW 289
22805: PUSH
22806: LD_INT 0
22808: EQUAL
22809: IFFALSE 22826
// SetCargo ( i , mat_siberit , 100 ) ;
22811: LD_VAR 0 1
22815: PPUSH
22816: LD_INT 3
22818: PPUSH
22819: LD_INT 100
22821: PPUSH
22822: CALL_OW 290
22826: GO 22790
22828: POP
22829: POP
// end ;
22830: PPOPN 2
22832: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
22833: LD_EXP 41
22837: PUSH
22838: LD_EXP 86
22842: AND
22843: IFFALSE 23026
22845: GO 22847
22847: DISABLE
22848: LD_INT 0
22850: PPUSH
22851: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22852: LD_ADDR_VAR 0 2
22856: PUSH
22857: LD_INT 22
22859: PUSH
22860: LD_OWVAR 2
22864: PUSH
22865: EMPTY
22866: LIST
22867: LIST
22868: PPUSH
22869: CALL_OW 69
22873: ST_TO_ADDR
// if not tmp then
22874: LD_VAR 0 2
22878: NOT
22879: IFFALSE 22883
// exit ;
22881: GO 23026
// for i := 1 to 2 do
22883: LD_ADDR_VAR 0 1
22887: PUSH
22888: DOUBLE
22889: LD_INT 1
22891: DEC
22892: ST_TO_ADDR
22893: LD_INT 2
22895: PUSH
22896: FOR_TO
22897: IFFALSE 23024
// begin uc_side := your_side ;
22899: LD_ADDR_OWVAR 20
22903: PUSH
22904: LD_OWVAR 2
22908: ST_TO_ADDR
// uc_nation := nation_american ;
22909: LD_ADDR_OWVAR 21
22913: PUSH
22914: LD_INT 1
22916: ST_TO_ADDR
// vc_chassis := us_morphling ;
22917: LD_ADDR_OWVAR 37
22921: PUSH
22922: LD_INT 5
22924: ST_TO_ADDR
// vc_engine := engine_siberite ;
22925: LD_ADDR_OWVAR 39
22929: PUSH
22930: LD_INT 3
22932: ST_TO_ADDR
// vc_control := control_computer ;
22933: LD_ADDR_OWVAR 38
22937: PUSH
22938: LD_INT 3
22940: ST_TO_ADDR
// vc_weapon := us_double_laser ;
22941: LD_ADDR_OWVAR 40
22945: PUSH
22946: LD_INT 10
22948: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
22949: LD_VAR 0 2
22953: PUSH
22954: LD_INT 1
22956: ARRAY
22957: PPUSH
22958: CALL_OW 310
22962: NOT
22963: IFFALSE 23010
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
22965: CALL_OW 45
22969: PPUSH
22970: LD_VAR 0 2
22974: PUSH
22975: LD_INT 1
22977: ARRAY
22978: PPUSH
22979: CALL_OW 250
22983: PPUSH
22984: LD_VAR 0 2
22988: PUSH
22989: LD_INT 1
22991: ARRAY
22992: PPUSH
22993: CALL_OW 251
22997: PPUSH
22998: LD_INT 12
23000: PPUSH
23001: LD_INT 1
23003: PPUSH
23004: CALL_OW 50
23008: GO 23022
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
23010: CALL_OW 45
23014: PPUSH
23015: LD_INT 1
23017: PPUSH
23018: CALL_OW 51
// end ;
23022: GO 22896
23024: POP
23025: POP
// end ;
23026: PPOPN 2
23028: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
23029: LD_EXP 41
23033: PUSH
23034: LD_EXP 87
23038: AND
23039: IFFALSE 23261
23041: GO 23043
23043: DISABLE
23044: LD_INT 0
23046: PPUSH
23047: PPUSH
23048: PPUSH
23049: PPUSH
23050: PPUSH
23051: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
23052: LD_ADDR_VAR 0 6
23056: PUSH
23057: LD_INT 22
23059: PUSH
23060: LD_OWVAR 2
23064: PUSH
23065: EMPTY
23066: LIST
23067: LIST
23068: PUSH
23069: LD_INT 21
23071: PUSH
23072: LD_INT 1
23074: PUSH
23075: EMPTY
23076: LIST
23077: LIST
23078: PUSH
23079: LD_INT 3
23081: PUSH
23082: LD_INT 23
23084: PUSH
23085: LD_INT 0
23087: PUSH
23088: EMPTY
23089: LIST
23090: LIST
23091: PUSH
23092: EMPTY
23093: LIST
23094: LIST
23095: PUSH
23096: EMPTY
23097: LIST
23098: LIST
23099: LIST
23100: PPUSH
23101: CALL_OW 69
23105: ST_TO_ADDR
// if not tmp then
23106: LD_VAR 0 6
23110: NOT
23111: IFFALSE 23115
// exit ;
23113: GO 23261
// s1 := rand ( 1 , 4 ) ;
23115: LD_ADDR_VAR 0 2
23119: PUSH
23120: LD_INT 1
23122: PPUSH
23123: LD_INT 4
23125: PPUSH
23126: CALL_OW 12
23130: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
23131: LD_ADDR_VAR 0 4
23135: PUSH
23136: LD_VAR 0 6
23140: PUSH
23141: LD_INT 1
23143: ARRAY
23144: PPUSH
23145: LD_VAR 0 2
23149: PPUSH
23150: CALL_OW 259
23154: ST_TO_ADDR
// if s1 = 1 then
23155: LD_VAR 0 2
23159: PUSH
23160: LD_INT 1
23162: EQUAL
23163: IFFALSE 23183
// s2 := rand ( 2 , 4 ) else
23165: LD_ADDR_VAR 0 3
23169: PUSH
23170: LD_INT 2
23172: PPUSH
23173: LD_INT 4
23175: PPUSH
23176: CALL_OW 12
23180: ST_TO_ADDR
23181: GO 23191
// s2 := 1 ;
23183: LD_ADDR_VAR 0 3
23187: PUSH
23188: LD_INT 1
23190: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
23191: LD_ADDR_VAR 0 5
23195: PUSH
23196: LD_VAR 0 6
23200: PUSH
23201: LD_INT 1
23203: ARRAY
23204: PPUSH
23205: LD_VAR 0 3
23209: PPUSH
23210: CALL_OW 259
23214: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
23215: LD_VAR 0 6
23219: PUSH
23220: LD_INT 1
23222: ARRAY
23223: PPUSH
23224: LD_VAR 0 2
23228: PPUSH
23229: LD_VAR 0 5
23233: PPUSH
23234: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
23238: LD_VAR 0 6
23242: PUSH
23243: LD_INT 1
23245: ARRAY
23246: PPUSH
23247: LD_VAR 0 3
23251: PPUSH
23252: LD_VAR 0 4
23256: PPUSH
23257: CALL_OW 237
// end ;
23261: PPOPN 6
23263: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
23264: LD_EXP 41
23268: PUSH
23269: LD_EXP 88
23273: AND
23274: IFFALSE 23353
23276: GO 23278
23278: DISABLE
23279: LD_INT 0
23281: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
23282: LD_ADDR_VAR 0 1
23286: PUSH
23287: LD_INT 22
23289: PUSH
23290: LD_OWVAR 2
23294: PUSH
23295: EMPTY
23296: LIST
23297: LIST
23298: PUSH
23299: LD_INT 30
23301: PUSH
23302: LD_INT 3
23304: PUSH
23305: EMPTY
23306: LIST
23307: LIST
23308: PUSH
23309: EMPTY
23310: LIST
23311: LIST
23312: PPUSH
23313: CALL_OW 69
23317: ST_TO_ADDR
// if not tmp then
23318: LD_VAR 0 1
23322: NOT
23323: IFFALSE 23327
// exit ;
23325: GO 23353
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
23327: LD_VAR 0 1
23331: PUSH
23332: LD_INT 1
23334: PPUSH
23335: LD_VAR 0 1
23339: PPUSH
23340: CALL_OW 12
23344: ARRAY
23345: PPUSH
23346: LD_INT 1
23348: PPUSH
23349: CALL_OW 234
// end ;
23353: PPOPN 1
23355: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
23356: LD_EXP 41
23360: PUSH
23361: LD_EXP 89
23365: AND
23366: IFFALSE 23478
23368: GO 23370
23370: DISABLE
23371: LD_INT 0
23373: PPUSH
23374: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
23375: LD_ADDR_VAR 0 2
23379: PUSH
23380: LD_INT 22
23382: PUSH
23383: LD_OWVAR 2
23387: PUSH
23388: EMPTY
23389: LIST
23390: LIST
23391: PUSH
23392: LD_INT 2
23394: PUSH
23395: LD_INT 30
23397: PUSH
23398: LD_INT 27
23400: PUSH
23401: EMPTY
23402: LIST
23403: LIST
23404: PUSH
23405: LD_INT 30
23407: PUSH
23408: LD_INT 26
23410: PUSH
23411: EMPTY
23412: LIST
23413: LIST
23414: PUSH
23415: LD_INT 30
23417: PUSH
23418: LD_INT 28
23420: PUSH
23421: EMPTY
23422: LIST
23423: LIST
23424: PUSH
23425: EMPTY
23426: LIST
23427: LIST
23428: LIST
23429: LIST
23430: PUSH
23431: EMPTY
23432: LIST
23433: LIST
23434: PPUSH
23435: CALL_OW 69
23439: ST_TO_ADDR
// if not tmp then
23440: LD_VAR 0 2
23444: NOT
23445: IFFALSE 23449
// exit ;
23447: GO 23478
// for i in tmp do
23449: LD_ADDR_VAR 0 1
23453: PUSH
23454: LD_VAR 0 2
23458: PUSH
23459: FOR_IN
23460: IFFALSE 23476
// SetLives ( i , 1 ) ;
23462: LD_VAR 0 1
23466: PPUSH
23467: LD_INT 1
23469: PPUSH
23470: CALL_OW 234
23474: GO 23459
23476: POP
23477: POP
// end ;
23478: PPOPN 2
23480: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
23481: LD_EXP 41
23485: PUSH
23486: LD_EXP 90
23490: AND
23491: IFFALSE 23778
23493: GO 23495
23495: DISABLE
23496: LD_INT 0
23498: PPUSH
23499: PPUSH
23500: PPUSH
// begin i := rand ( 1 , 7 ) ;
23501: LD_ADDR_VAR 0 1
23505: PUSH
23506: LD_INT 1
23508: PPUSH
23509: LD_INT 7
23511: PPUSH
23512: CALL_OW 12
23516: ST_TO_ADDR
// case i of 1 :
23517: LD_VAR 0 1
23521: PUSH
23522: LD_INT 1
23524: DOUBLE
23525: EQUAL
23526: IFTRUE 23530
23528: GO 23540
23530: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
23531: LD_STRING earthquake(getX(game), 0, 32)
23533: PPUSH
23534: CALL_OW 559
23538: GO 23778
23540: LD_INT 2
23542: DOUBLE
23543: EQUAL
23544: IFTRUE 23548
23546: GO 23562
23548: POP
// begin ToLua ( displayStucuk(); ) ;
23549: LD_STRING displayStucuk();
23551: PPUSH
23552: CALL_OW 559
// ResetFog ;
23556: CALL_OW 335
// end ; 3 :
23560: GO 23778
23562: LD_INT 3
23564: DOUBLE
23565: EQUAL
23566: IFTRUE 23570
23568: GO 23674
23570: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
23571: LD_ADDR_VAR 0 2
23575: PUSH
23576: LD_INT 22
23578: PUSH
23579: LD_OWVAR 2
23583: PUSH
23584: EMPTY
23585: LIST
23586: LIST
23587: PUSH
23588: LD_INT 25
23590: PUSH
23591: LD_INT 1
23593: PUSH
23594: EMPTY
23595: LIST
23596: LIST
23597: PUSH
23598: EMPTY
23599: LIST
23600: LIST
23601: PPUSH
23602: CALL_OW 69
23606: ST_TO_ADDR
// if not tmp then
23607: LD_VAR 0 2
23611: NOT
23612: IFFALSE 23616
// exit ;
23614: GO 23778
// un := tmp [ rand ( 1 , tmp ) ] ;
23616: LD_ADDR_VAR 0 3
23620: PUSH
23621: LD_VAR 0 2
23625: PUSH
23626: LD_INT 1
23628: PPUSH
23629: LD_VAR 0 2
23633: PPUSH
23634: CALL_OW 12
23638: ARRAY
23639: ST_TO_ADDR
// if Crawls ( un ) then
23640: LD_VAR 0 3
23644: PPUSH
23645: CALL_OW 318
23649: IFFALSE 23660
// ComWalk ( un ) ;
23651: LD_VAR 0 3
23655: PPUSH
23656: CALL_OW 138
// SetClass ( un , class_mortar ) ;
23660: LD_VAR 0 3
23664: PPUSH
23665: LD_INT 8
23667: PPUSH
23668: CALL_OW 336
// end ; 4 :
23672: GO 23778
23674: LD_INT 4
23676: DOUBLE
23677: EQUAL
23678: IFTRUE 23682
23680: GO 23756
23682: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
23683: LD_ADDR_VAR 0 2
23687: PUSH
23688: LD_INT 22
23690: PUSH
23691: LD_OWVAR 2
23695: PUSH
23696: EMPTY
23697: LIST
23698: LIST
23699: PUSH
23700: LD_INT 30
23702: PUSH
23703: LD_INT 29
23705: PUSH
23706: EMPTY
23707: LIST
23708: LIST
23709: PUSH
23710: EMPTY
23711: LIST
23712: LIST
23713: PPUSH
23714: CALL_OW 69
23718: ST_TO_ADDR
// if not tmp then
23719: LD_VAR 0 2
23723: NOT
23724: IFFALSE 23728
// exit ;
23726: GO 23778
// CenterNowOnUnits ( tmp [ 1 ] ) ;
23728: LD_VAR 0 2
23732: PUSH
23733: LD_INT 1
23735: ARRAY
23736: PPUSH
23737: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
23741: LD_VAR 0 2
23745: PUSH
23746: LD_INT 1
23748: ARRAY
23749: PPUSH
23750: CALL_OW 65
// end ; 5 .. 7 :
23754: GO 23778
23756: LD_INT 5
23758: DOUBLE
23759: GREATEREQUAL
23760: IFFALSE 23768
23762: LD_INT 7
23764: DOUBLE
23765: LESSEQUAL
23766: IFTRUE 23770
23768: GO 23777
23770: POP
// StreamSibBomb ; end ;
23771: CALL 20015 0 0
23775: GO 23778
23777: POP
// end ;
23778: PPOPN 3
23780: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
23781: LD_EXP 41
23785: PUSH
23786: LD_EXP 91
23790: AND
23791: IFFALSE 23947
23793: GO 23795
23795: DISABLE
23796: LD_INT 0
23798: PPUSH
23799: PPUSH
23800: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
23801: LD_ADDR_VAR 0 2
23805: PUSH
23806: LD_INT 81
23808: PUSH
23809: LD_OWVAR 2
23813: PUSH
23814: EMPTY
23815: LIST
23816: LIST
23817: PUSH
23818: LD_INT 2
23820: PUSH
23821: LD_INT 21
23823: PUSH
23824: LD_INT 1
23826: PUSH
23827: EMPTY
23828: LIST
23829: LIST
23830: PUSH
23831: LD_INT 21
23833: PUSH
23834: LD_INT 2
23836: PUSH
23837: EMPTY
23838: LIST
23839: LIST
23840: PUSH
23841: EMPTY
23842: LIST
23843: LIST
23844: LIST
23845: PUSH
23846: EMPTY
23847: LIST
23848: LIST
23849: PPUSH
23850: CALL_OW 69
23854: ST_TO_ADDR
// if not tmp then
23855: LD_VAR 0 2
23859: NOT
23860: IFFALSE 23864
// exit ;
23862: GO 23947
// p := 0 ;
23864: LD_ADDR_VAR 0 3
23868: PUSH
23869: LD_INT 0
23871: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23872: LD_INT 35
23874: PPUSH
23875: CALL_OW 67
// p := p + 1 ;
23879: LD_ADDR_VAR 0 3
23883: PUSH
23884: LD_VAR 0 3
23888: PUSH
23889: LD_INT 1
23891: PLUS
23892: ST_TO_ADDR
// for i in tmp do
23893: LD_ADDR_VAR 0 1
23897: PUSH
23898: LD_VAR 0 2
23902: PUSH
23903: FOR_IN
23904: IFFALSE 23935
// if GetLives ( i ) < 1000 then
23906: LD_VAR 0 1
23910: PPUSH
23911: CALL_OW 256
23915: PUSH
23916: LD_INT 1000
23918: LESS
23919: IFFALSE 23933
// SetLives ( i , 1000 ) ;
23921: LD_VAR 0 1
23925: PPUSH
23926: LD_INT 1000
23928: PPUSH
23929: CALL_OW 234
23933: GO 23903
23935: POP
23936: POP
// until p > 20 ;
23937: LD_VAR 0 3
23941: PUSH
23942: LD_INT 20
23944: GREATER
23945: IFFALSE 23872
// end ;
23947: PPOPN 3
23949: END
// every 0 0$1 trigger StreamModeActive and sTime do
23950: LD_EXP 41
23954: PUSH
23955: LD_EXP 92
23959: AND
23960: IFFALSE 23995
23962: GO 23964
23964: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
23965: LD_INT 28
23967: PPUSH
23968: LD_OWVAR 2
23972: PPUSH
23973: LD_INT 2
23975: PPUSH
23976: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
23980: LD_INT 30
23982: PPUSH
23983: LD_OWVAR 2
23987: PPUSH
23988: LD_INT 2
23990: PPUSH
23991: CALL_OW 322
// end ;
23995: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
23996: LD_EXP 41
24000: PUSH
24001: LD_EXP 93
24005: AND
24006: IFFALSE 24127
24008: GO 24010
24010: DISABLE
24011: LD_INT 0
24013: PPUSH
24014: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
24015: LD_ADDR_VAR 0 2
24019: PUSH
24020: LD_INT 22
24022: PUSH
24023: LD_OWVAR 2
24027: PUSH
24028: EMPTY
24029: LIST
24030: LIST
24031: PUSH
24032: LD_INT 21
24034: PUSH
24035: LD_INT 1
24037: PUSH
24038: EMPTY
24039: LIST
24040: LIST
24041: PUSH
24042: LD_INT 3
24044: PUSH
24045: LD_INT 23
24047: PUSH
24048: LD_INT 0
24050: PUSH
24051: EMPTY
24052: LIST
24053: LIST
24054: PUSH
24055: EMPTY
24056: LIST
24057: LIST
24058: PUSH
24059: EMPTY
24060: LIST
24061: LIST
24062: LIST
24063: PPUSH
24064: CALL_OW 69
24068: ST_TO_ADDR
// if not tmp then
24069: LD_VAR 0 2
24073: NOT
24074: IFFALSE 24078
// exit ;
24076: GO 24127
// for i in tmp do
24078: LD_ADDR_VAR 0 1
24082: PUSH
24083: LD_VAR 0 2
24087: PUSH
24088: FOR_IN
24089: IFFALSE 24125
// begin if Crawls ( i ) then
24091: LD_VAR 0 1
24095: PPUSH
24096: CALL_OW 318
24100: IFFALSE 24111
// ComWalk ( i ) ;
24102: LD_VAR 0 1
24106: PPUSH
24107: CALL_OW 138
// SetClass ( i , 2 ) ;
24111: LD_VAR 0 1
24115: PPUSH
24116: LD_INT 2
24118: PPUSH
24119: CALL_OW 336
// end ;
24123: GO 24088
24125: POP
24126: POP
// end ;
24127: PPOPN 2
24129: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
24130: LD_EXP 41
24134: PUSH
24135: LD_EXP 94
24139: AND
24140: IFFALSE 24428
24142: GO 24144
24144: DISABLE
24145: LD_INT 0
24147: PPUSH
24148: PPUSH
24149: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
24150: LD_OWVAR 2
24154: PPUSH
24155: LD_INT 9
24157: PPUSH
24158: LD_INT 1
24160: PPUSH
24161: LD_INT 1
24163: PPUSH
24164: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
24168: LD_INT 9
24170: PPUSH
24171: LD_OWVAR 2
24175: PPUSH
24176: CALL_OW 343
// uc_side := 9 ;
24180: LD_ADDR_OWVAR 20
24184: PUSH
24185: LD_INT 9
24187: ST_TO_ADDR
// uc_nation := 2 ;
24188: LD_ADDR_OWVAR 21
24192: PUSH
24193: LD_INT 2
24195: ST_TO_ADDR
// hc_name := Dark Warrior ;
24196: LD_ADDR_OWVAR 26
24200: PUSH
24201: LD_STRING Dark Warrior
24203: ST_TO_ADDR
// hc_gallery :=  ;
24204: LD_ADDR_OWVAR 33
24208: PUSH
24209: LD_STRING 
24211: ST_TO_ADDR
// hc_noskilllimit := true ;
24212: LD_ADDR_OWVAR 76
24216: PUSH
24217: LD_INT 1
24219: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
24220: LD_ADDR_OWVAR 31
24224: PUSH
24225: LD_INT 30
24227: PUSH
24228: LD_INT 30
24230: PUSH
24231: LD_INT 30
24233: PUSH
24234: LD_INT 30
24236: PUSH
24237: EMPTY
24238: LIST
24239: LIST
24240: LIST
24241: LIST
24242: ST_TO_ADDR
// un := CreateHuman ;
24243: LD_ADDR_VAR 0 3
24247: PUSH
24248: CALL_OW 44
24252: ST_TO_ADDR
// hc_noskilllimit := false ;
24253: LD_ADDR_OWVAR 76
24257: PUSH
24258: LD_INT 0
24260: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
24261: LD_VAR 0 3
24265: PPUSH
24266: LD_INT 1
24268: PPUSH
24269: CALL_OW 51
// ToLua ( playRanger() ) ;
24273: LD_STRING playRanger()
24275: PPUSH
24276: CALL_OW 559
// p := 0 ;
24280: LD_ADDR_VAR 0 2
24284: PUSH
24285: LD_INT 0
24287: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
24288: LD_INT 35
24290: PPUSH
24291: CALL_OW 67
// p := p + 1 ;
24295: LD_ADDR_VAR 0 2
24299: PUSH
24300: LD_VAR 0 2
24304: PUSH
24305: LD_INT 1
24307: PLUS
24308: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
24309: LD_VAR 0 3
24313: PPUSH
24314: CALL_OW 256
24318: PUSH
24319: LD_INT 1000
24321: LESS
24322: IFFALSE 24336
// SetLives ( un , 1000 ) ;
24324: LD_VAR 0 3
24328: PPUSH
24329: LD_INT 1000
24331: PPUSH
24332: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
24336: LD_VAR 0 3
24340: PPUSH
24341: LD_INT 81
24343: PUSH
24344: LD_OWVAR 2
24348: PUSH
24349: EMPTY
24350: LIST
24351: LIST
24352: PUSH
24353: LD_INT 91
24355: PUSH
24356: LD_VAR 0 3
24360: PUSH
24361: LD_INT 30
24363: PUSH
24364: EMPTY
24365: LIST
24366: LIST
24367: LIST
24368: PUSH
24369: EMPTY
24370: LIST
24371: LIST
24372: PPUSH
24373: CALL_OW 69
24377: PPUSH
24378: LD_VAR 0 3
24382: PPUSH
24383: CALL_OW 74
24387: PPUSH
24388: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
24392: LD_VAR 0 2
24396: PUSH
24397: LD_INT 80
24399: GREATER
24400: PUSH
24401: LD_VAR 0 3
24405: PPUSH
24406: CALL_OW 301
24410: OR
24411: IFFALSE 24288
// if un then
24413: LD_VAR 0 3
24417: IFFALSE 24428
// RemoveUnit ( un ) ;
24419: LD_VAR 0 3
24423: PPUSH
24424: CALL_OW 64
// end ;
24428: PPOPN 3
24430: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
24431: LD_EXP 95
24435: IFFALSE 24551
24437: GO 24439
24439: DISABLE
24440: LD_INT 0
24442: PPUSH
24443: PPUSH
24444: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
24445: LD_ADDR_VAR 0 2
24449: PUSH
24450: LD_INT 81
24452: PUSH
24453: LD_OWVAR 2
24457: PUSH
24458: EMPTY
24459: LIST
24460: LIST
24461: PUSH
24462: LD_INT 21
24464: PUSH
24465: LD_INT 1
24467: PUSH
24468: EMPTY
24469: LIST
24470: LIST
24471: PUSH
24472: EMPTY
24473: LIST
24474: LIST
24475: PPUSH
24476: CALL_OW 69
24480: ST_TO_ADDR
// ToLua ( playComputer() ) ;
24481: LD_STRING playComputer()
24483: PPUSH
24484: CALL_OW 559
// if not tmp then
24488: LD_VAR 0 2
24492: NOT
24493: IFFALSE 24497
// exit ;
24495: GO 24551
// for i in tmp do
24497: LD_ADDR_VAR 0 1
24501: PUSH
24502: LD_VAR 0 2
24506: PUSH
24507: FOR_IN
24508: IFFALSE 24549
// for j := 1 to 4 do
24510: LD_ADDR_VAR 0 3
24514: PUSH
24515: DOUBLE
24516: LD_INT 1
24518: DEC
24519: ST_TO_ADDR
24520: LD_INT 4
24522: PUSH
24523: FOR_TO
24524: IFFALSE 24545
// SetSkill ( i , j , 10 ) ;
24526: LD_VAR 0 1
24530: PPUSH
24531: LD_VAR 0 3
24535: PPUSH
24536: LD_INT 10
24538: PPUSH
24539: CALL_OW 237
24543: GO 24523
24545: POP
24546: POP
24547: GO 24507
24549: POP
24550: POP
// end ;
24551: PPOPN 3
24553: END
// every 0 0$1 trigger s30 do var i , tmp ;
24554: LD_EXP 96
24558: IFFALSE 24627
24560: GO 24562
24562: DISABLE
24563: LD_INT 0
24565: PPUSH
24566: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
24567: LD_ADDR_VAR 0 2
24571: PUSH
24572: LD_INT 22
24574: PUSH
24575: LD_OWVAR 2
24579: PUSH
24580: EMPTY
24581: LIST
24582: LIST
24583: PPUSH
24584: CALL_OW 69
24588: ST_TO_ADDR
// if not tmp then
24589: LD_VAR 0 2
24593: NOT
24594: IFFALSE 24598
// exit ;
24596: GO 24627
// for i in tmp do
24598: LD_ADDR_VAR 0 1
24602: PUSH
24603: LD_VAR 0 2
24607: PUSH
24608: FOR_IN
24609: IFFALSE 24625
// SetLives ( i , 300 ) ;
24611: LD_VAR 0 1
24615: PPUSH
24616: LD_INT 300
24618: PPUSH
24619: CALL_OW 234
24623: GO 24608
24625: POP
24626: POP
// end ;
24627: PPOPN 2
24629: END
// every 0 0$1 trigger s60 do var i , tmp ;
24630: LD_EXP 97
24634: IFFALSE 24703
24636: GO 24638
24638: DISABLE
24639: LD_INT 0
24641: PPUSH
24642: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
24643: LD_ADDR_VAR 0 2
24647: PUSH
24648: LD_INT 22
24650: PUSH
24651: LD_OWVAR 2
24655: PUSH
24656: EMPTY
24657: LIST
24658: LIST
24659: PPUSH
24660: CALL_OW 69
24664: ST_TO_ADDR
// if not tmp then
24665: LD_VAR 0 2
24669: NOT
24670: IFFALSE 24674
// exit ;
24672: GO 24703
// for i in tmp do
24674: LD_ADDR_VAR 0 1
24678: PUSH
24679: LD_VAR 0 2
24683: PUSH
24684: FOR_IN
24685: IFFALSE 24701
// SetLives ( i , 600 ) ;
24687: LD_VAR 0 1
24691: PPUSH
24692: LD_INT 600
24694: PPUSH
24695: CALL_OW 234
24699: GO 24684
24701: POP
24702: POP
// end ;
24703: PPOPN 2
24705: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
24706: LD_INT 0
24708: PPUSH
// case cmd of 301 :
24709: LD_VAR 0 1
24713: PUSH
24714: LD_INT 301
24716: DOUBLE
24717: EQUAL
24718: IFTRUE 24722
24720: GO 24754
24722: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
24723: LD_VAR 0 6
24727: PPUSH
24728: LD_VAR 0 7
24732: PPUSH
24733: LD_VAR 0 8
24737: PPUSH
24738: LD_VAR 0 4
24742: PPUSH
24743: LD_VAR 0 5
24747: PPUSH
24748: CALL 25955 0 5
24752: GO 24875
24754: LD_INT 302
24756: DOUBLE
24757: EQUAL
24758: IFTRUE 24762
24760: GO 24799
24762: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
24763: LD_VAR 0 6
24767: PPUSH
24768: LD_VAR 0 7
24772: PPUSH
24773: LD_VAR 0 8
24777: PPUSH
24778: LD_VAR 0 9
24782: PPUSH
24783: LD_VAR 0 4
24787: PPUSH
24788: LD_VAR 0 5
24792: PPUSH
24793: CALL 26046 0 6
24797: GO 24875
24799: LD_INT 303
24801: DOUBLE
24802: EQUAL
24803: IFTRUE 24807
24805: GO 24844
24807: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
24808: LD_VAR 0 6
24812: PPUSH
24813: LD_VAR 0 7
24817: PPUSH
24818: LD_VAR 0 8
24822: PPUSH
24823: LD_VAR 0 9
24827: PPUSH
24828: LD_VAR 0 4
24832: PPUSH
24833: LD_VAR 0 5
24837: PPUSH
24838: CALL 24880 0 6
24842: GO 24875
24844: LD_INT 304
24846: DOUBLE
24847: EQUAL
24848: IFTRUE 24852
24850: GO 24874
24852: POP
// hHackTeleport ( unit , x , y ) ; end ;
24853: LD_VAR 0 2
24857: PPUSH
24858: LD_VAR 0 4
24862: PPUSH
24863: LD_VAR 0 5
24867: PPUSH
24868: CALL 26639 0 3
24872: GO 24875
24874: POP
// end ;
24875: LD_VAR 0 12
24879: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
24880: LD_INT 0
24882: PPUSH
24883: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
24884: LD_VAR 0 1
24888: PUSH
24889: LD_INT 1
24891: LESS
24892: PUSH
24893: LD_VAR 0 1
24897: PUSH
24898: LD_INT 3
24900: GREATER
24901: OR
24902: PUSH
24903: LD_VAR 0 5
24907: PPUSH
24908: LD_VAR 0 6
24912: PPUSH
24913: CALL_OW 428
24917: OR
24918: IFFALSE 24922
// exit ;
24920: GO 25642
// uc_side := your_side ;
24922: LD_ADDR_OWVAR 20
24926: PUSH
24927: LD_OWVAR 2
24931: ST_TO_ADDR
// uc_nation := nation ;
24932: LD_ADDR_OWVAR 21
24936: PUSH
24937: LD_VAR 0 1
24941: ST_TO_ADDR
// bc_level = 1 ;
24942: LD_ADDR_OWVAR 43
24946: PUSH
24947: LD_INT 1
24949: ST_TO_ADDR
// case btype of 1 :
24950: LD_VAR 0 2
24954: PUSH
24955: LD_INT 1
24957: DOUBLE
24958: EQUAL
24959: IFTRUE 24963
24961: GO 24974
24963: POP
// bc_type := b_depot ; 2 :
24964: LD_ADDR_OWVAR 42
24968: PUSH
24969: LD_INT 0
24971: ST_TO_ADDR
24972: GO 25586
24974: LD_INT 2
24976: DOUBLE
24977: EQUAL
24978: IFTRUE 24982
24980: GO 24993
24982: POP
// bc_type := b_warehouse ; 3 :
24983: LD_ADDR_OWVAR 42
24987: PUSH
24988: LD_INT 1
24990: ST_TO_ADDR
24991: GO 25586
24993: LD_INT 3
24995: DOUBLE
24996: EQUAL
24997: IFTRUE 25001
24999: GO 25012
25001: POP
// bc_type := b_lab ; 4 .. 9 :
25002: LD_ADDR_OWVAR 42
25006: PUSH
25007: LD_INT 6
25009: ST_TO_ADDR
25010: GO 25586
25012: LD_INT 4
25014: DOUBLE
25015: GREATEREQUAL
25016: IFFALSE 25024
25018: LD_INT 9
25020: DOUBLE
25021: LESSEQUAL
25022: IFTRUE 25026
25024: GO 25078
25026: POP
// begin bc_type := b_lab_half ;
25027: LD_ADDR_OWVAR 42
25031: PUSH
25032: LD_INT 7
25034: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
25035: LD_ADDR_OWVAR 44
25039: PUSH
25040: LD_INT 10
25042: PUSH
25043: LD_INT 11
25045: PUSH
25046: LD_INT 12
25048: PUSH
25049: LD_INT 15
25051: PUSH
25052: LD_INT 14
25054: PUSH
25055: LD_INT 13
25057: PUSH
25058: EMPTY
25059: LIST
25060: LIST
25061: LIST
25062: LIST
25063: LIST
25064: LIST
25065: PUSH
25066: LD_VAR 0 2
25070: PUSH
25071: LD_INT 3
25073: MINUS
25074: ARRAY
25075: ST_TO_ADDR
// end ; 10 .. 13 :
25076: GO 25586
25078: LD_INT 10
25080: DOUBLE
25081: GREATEREQUAL
25082: IFFALSE 25090
25084: LD_INT 13
25086: DOUBLE
25087: LESSEQUAL
25088: IFTRUE 25092
25090: GO 25169
25092: POP
// begin bc_type := b_lab_full ;
25093: LD_ADDR_OWVAR 42
25097: PUSH
25098: LD_INT 8
25100: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
25101: LD_ADDR_OWVAR 44
25105: PUSH
25106: LD_INT 10
25108: PUSH
25109: LD_INT 12
25111: PUSH
25112: LD_INT 14
25114: PUSH
25115: LD_INT 13
25117: PUSH
25118: EMPTY
25119: LIST
25120: LIST
25121: LIST
25122: LIST
25123: PUSH
25124: LD_VAR 0 2
25128: PUSH
25129: LD_INT 9
25131: MINUS
25132: ARRAY
25133: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
25134: LD_ADDR_OWVAR 45
25138: PUSH
25139: LD_INT 11
25141: PUSH
25142: LD_INT 15
25144: PUSH
25145: LD_INT 12
25147: PUSH
25148: LD_INT 15
25150: PUSH
25151: EMPTY
25152: LIST
25153: LIST
25154: LIST
25155: LIST
25156: PUSH
25157: LD_VAR 0 2
25161: PUSH
25162: LD_INT 9
25164: MINUS
25165: ARRAY
25166: ST_TO_ADDR
// end ; 14 :
25167: GO 25586
25169: LD_INT 14
25171: DOUBLE
25172: EQUAL
25173: IFTRUE 25177
25175: GO 25188
25177: POP
// bc_type := b_workshop ; 15 :
25178: LD_ADDR_OWVAR 42
25182: PUSH
25183: LD_INT 2
25185: ST_TO_ADDR
25186: GO 25586
25188: LD_INT 15
25190: DOUBLE
25191: EQUAL
25192: IFTRUE 25196
25194: GO 25207
25196: POP
// bc_type := b_factory ; 16 :
25197: LD_ADDR_OWVAR 42
25201: PUSH
25202: LD_INT 3
25204: ST_TO_ADDR
25205: GO 25586
25207: LD_INT 16
25209: DOUBLE
25210: EQUAL
25211: IFTRUE 25215
25213: GO 25226
25215: POP
// bc_type := b_ext_gun ; 17 :
25216: LD_ADDR_OWVAR 42
25220: PUSH
25221: LD_INT 17
25223: ST_TO_ADDR
25224: GO 25586
25226: LD_INT 17
25228: DOUBLE
25229: EQUAL
25230: IFTRUE 25234
25232: GO 25262
25234: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
25235: LD_ADDR_OWVAR 42
25239: PUSH
25240: LD_INT 19
25242: PUSH
25243: LD_INT 23
25245: PUSH
25246: LD_INT 19
25248: PUSH
25249: EMPTY
25250: LIST
25251: LIST
25252: LIST
25253: PUSH
25254: LD_VAR 0 1
25258: ARRAY
25259: ST_TO_ADDR
25260: GO 25586
25262: LD_INT 18
25264: DOUBLE
25265: EQUAL
25266: IFTRUE 25270
25268: GO 25281
25270: POP
// bc_type := b_ext_radar ; 19 :
25271: LD_ADDR_OWVAR 42
25275: PUSH
25276: LD_INT 20
25278: ST_TO_ADDR
25279: GO 25586
25281: LD_INT 19
25283: DOUBLE
25284: EQUAL
25285: IFTRUE 25289
25287: GO 25300
25289: POP
// bc_type := b_ext_radio ; 20 :
25290: LD_ADDR_OWVAR 42
25294: PUSH
25295: LD_INT 22
25297: ST_TO_ADDR
25298: GO 25586
25300: LD_INT 20
25302: DOUBLE
25303: EQUAL
25304: IFTRUE 25308
25306: GO 25319
25308: POP
// bc_type := b_ext_siberium ; 21 :
25309: LD_ADDR_OWVAR 42
25313: PUSH
25314: LD_INT 21
25316: ST_TO_ADDR
25317: GO 25586
25319: LD_INT 21
25321: DOUBLE
25322: EQUAL
25323: IFTRUE 25327
25325: GO 25338
25327: POP
// bc_type := b_ext_computer ; 22 :
25328: LD_ADDR_OWVAR 42
25332: PUSH
25333: LD_INT 24
25335: ST_TO_ADDR
25336: GO 25586
25338: LD_INT 22
25340: DOUBLE
25341: EQUAL
25342: IFTRUE 25346
25344: GO 25357
25346: POP
// bc_type := b_ext_track ; 23 :
25347: LD_ADDR_OWVAR 42
25351: PUSH
25352: LD_INT 16
25354: ST_TO_ADDR
25355: GO 25586
25357: LD_INT 23
25359: DOUBLE
25360: EQUAL
25361: IFTRUE 25365
25363: GO 25376
25365: POP
// bc_type := b_ext_laser ; 24 :
25366: LD_ADDR_OWVAR 42
25370: PUSH
25371: LD_INT 25
25373: ST_TO_ADDR
25374: GO 25586
25376: LD_INT 24
25378: DOUBLE
25379: EQUAL
25380: IFTRUE 25384
25382: GO 25395
25384: POP
// bc_type := b_control_tower ; 25 :
25385: LD_ADDR_OWVAR 42
25389: PUSH
25390: LD_INT 36
25392: ST_TO_ADDR
25393: GO 25586
25395: LD_INT 25
25397: DOUBLE
25398: EQUAL
25399: IFTRUE 25403
25401: GO 25414
25403: POP
// bc_type := b_breastwork ; 26 :
25404: LD_ADDR_OWVAR 42
25408: PUSH
25409: LD_INT 31
25411: ST_TO_ADDR
25412: GO 25586
25414: LD_INT 26
25416: DOUBLE
25417: EQUAL
25418: IFTRUE 25422
25420: GO 25433
25422: POP
// bc_type := b_bunker ; 27 :
25423: LD_ADDR_OWVAR 42
25427: PUSH
25428: LD_INT 32
25430: ST_TO_ADDR
25431: GO 25586
25433: LD_INT 27
25435: DOUBLE
25436: EQUAL
25437: IFTRUE 25441
25439: GO 25452
25441: POP
// bc_type := b_turret ; 28 :
25442: LD_ADDR_OWVAR 42
25446: PUSH
25447: LD_INT 33
25449: ST_TO_ADDR
25450: GO 25586
25452: LD_INT 28
25454: DOUBLE
25455: EQUAL
25456: IFTRUE 25460
25458: GO 25471
25460: POP
// bc_type := b_armoury ; 29 :
25461: LD_ADDR_OWVAR 42
25465: PUSH
25466: LD_INT 4
25468: ST_TO_ADDR
25469: GO 25586
25471: LD_INT 29
25473: DOUBLE
25474: EQUAL
25475: IFTRUE 25479
25477: GO 25490
25479: POP
// bc_type := b_barracks ; 30 :
25480: LD_ADDR_OWVAR 42
25484: PUSH
25485: LD_INT 5
25487: ST_TO_ADDR
25488: GO 25586
25490: LD_INT 30
25492: DOUBLE
25493: EQUAL
25494: IFTRUE 25498
25496: GO 25509
25498: POP
// bc_type := b_solar_power ; 31 :
25499: LD_ADDR_OWVAR 42
25503: PUSH
25504: LD_INT 27
25506: ST_TO_ADDR
25507: GO 25586
25509: LD_INT 31
25511: DOUBLE
25512: EQUAL
25513: IFTRUE 25517
25515: GO 25528
25517: POP
// bc_type := b_oil_power ; 32 :
25518: LD_ADDR_OWVAR 42
25522: PUSH
25523: LD_INT 26
25525: ST_TO_ADDR
25526: GO 25586
25528: LD_INT 32
25530: DOUBLE
25531: EQUAL
25532: IFTRUE 25536
25534: GO 25547
25536: POP
// bc_type := b_siberite_power ; 33 :
25537: LD_ADDR_OWVAR 42
25541: PUSH
25542: LD_INT 28
25544: ST_TO_ADDR
25545: GO 25586
25547: LD_INT 33
25549: DOUBLE
25550: EQUAL
25551: IFTRUE 25555
25553: GO 25566
25555: POP
// bc_type := b_oil_mine ; 34 :
25556: LD_ADDR_OWVAR 42
25560: PUSH
25561: LD_INT 29
25563: ST_TO_ADDR
25564: GO 25586
25566: LD_INT 34
25568: DOUBLE
25569: EQUAL
25570: IFTRUE 25574
25572: GO 25585
25574: POP
// bc_type := b_siberite_mine ; end ;
25575: LD_ADDR_OWVAR 42
25579: PUSH
25580: LD_INT 30
25582: ST_TO_ADDR
25583: GO 25586
25585: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
25586: LD_ADDR_VAR 0 8
25590: PUSH
25591: LD_VAR 0 5
25595: PPUSH
25596: LD_VAR 0 6
25600: PPUSH
25601: LD_VAR 0 3
25605: PPUSH
25606: CALL_OW 47
25610: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
25611: LD_OWVAR 42
25615: PUSH
25616: LD_INT 32
25618: PUSH
25619: LD_INT 33
25621: PUSH
25622: EMPTY
25623: LIST
25624: LIST
25625: IN
25626: IFFALSE 25642
// PlaceWeaponTurret ( b , weapon ) ;
25628: LD_VAR 0 8
25632: PPUSH
25633: LD_VAR 0 4
25637: PPUSH
25638: CALL_OW 431
// end ;
25642: LD_VAR 0 7
25646: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
25647: LD_INT 0
25649: PPUSH
25650: PPUSH
25651: PPUSH
25652: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
25653: LD_ADDR_VAR 0 4
25657: PUSH
25658: LD_INT 22
25660: PUSH
25661: LD_OWVAR 2
25665: PUSH
25666: EMPTY
25667: LIST
25668: LIST
25669: PUSH
25670: LD_INT 2
25672: PUSH
25673: LD_INT 30
25675: PUSH
25676: LD_INT 0
25678: PUSH
25679: EMPTY
25680: LIST
25681: LIST
25682: PUSH
25683: LD_INT 30
25685: PUSH
25686: LD_INT 1
25688: PUSH
25689: EMPTY
25690: LIST
25691: LIST
25692: PUSH
25693: EMPTY
25694: LIST
25695: LIST
25696: LIST
25697: PUSH
25698: EMPTY
25699: LIST
25700: LIST
25701: PPUSH
25702: CALL_OW 69
25706: ST_TO_ADDR
// if not tmp then
25707: LD_VAR 0 4
25711: NOT
25712: IFFALSE 25716
// exit ;
25714: GO 25775
// for i in tmp do
25716: LD_ADDR_VAR 0 2
25720: PUSH
25721: LD_VAR 0 4
25725: PUSH
25726: FOR_IN
25727: IFFALSE 25773
// for j = 1 to 3 do
25729: LD_ADDR_VAR 0 3
25733: PUSH
25734: DOUBLE
25735: LD_INT 1
25737: DEC
25738: ST_TO_ADDR
25739: LD_INT 3
25741: PUSH
25742: FOR_TO
25743: IFFALSE 25769
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
25745: LD_VAR 0 2
25749: PPUSH
25750: CALL_OW 274
25754: PPUSH
25755: LD_VAR 0 3
25759: PPUSH
25760: LD_INT 99999
25762: PPUSH
25763: CALL_OW 277
25767: GO 25742
25769: POP
25770: POP
25771: GO 25726
25773: POP
25774: POP
// end ;
25775: LD_VAR 0 1
25779: RET
// export function hHackSetLevel10 ; var i , j ; begin
25780: LD_INT 0
25782: PPUSH
25783: PPUSH
25784: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
25785: LD_ADDR_VAR 0 2
25789: PUSH
25790: LD_INT 21
25792: PUSH
25793: LD_INT 1
25795: PUSH
25796: EMPTY
25797: LIST
25798: LIST
25799: PPUSH
25800: CALL_OW 69
25804: PUSH
25805: FOR_IN
25806: IFFALSE 25858
// if IsSelected ( i ) then
25808: LD_VAR 0 2
25812: PPUSH
25813: CALL_OW 306
25817: IFFALSE 25856
// begin for j := 1 to 4 do
25819: LD_ADDR_VAR 0 3
25823: PUSH
25824: DOUBLE
25825: LD_INT 1
25827: DEC
25828: ST_TO_ADDR
25829: LD_INT 4
25831: PUSH
25832: FOR_TO
25833: IFFALSE 25854
// SetSkill ( i , j , 10 ) ;
25835: LD_VAR 0 2
25839: PPUSH
25840: LD_VAR 0 3
25844: PPUSH
25845: LD_INT 10
25847: PPUSH
25848: CALL_OW 237
25852: GO 25832
25854: POP
25855: POP
// end ;
25856: GO 25805
25858: POP
25859: POP
// end ;
25860: LD_VAR 0 1
25864: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
25865: LD_INT 0
25867: PPUSH
25868: PPUSH
25869: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
25870: LD_ADDR_VAR 0 2
25874: PUSH
25875: LD_INT 22
25877: PUSH
25878: LD_OWVAR 2
25882: PUSH
25883: EMPTY
25884: LIST
25885: LIST
25886: PUSH
25887: LD_INT 21
25889: PUSH
25890: LD_INT 1
25892: PUSH
25893: EMPTY
25894: LIST
25895: LIST
25896: PUSH
25897: EMPTY
25898: LIST
25899: LIST
25900: PPUSH
25901: CALL_OW 69
25905: PUSH
25906: FOR_IN
25907: IFFALSE 25948
// begin for j := 1 to 4 do
25909: LD_ADDR_VAR 0 3
25913: PUSH
25914: DOUBLE
25915: LD_INT 1
25917: DEC
25918: ST_TO_ADDR
25919: LD_INT 4
25921: PUSH
25922: FOR_TO
25923: IFFALSE 25944
// SetSkill ( i , j , 10 ) ;
25925: LD_VAR 0 2
25929: PPUSH
25930: LD_VAR 0 3
25934: PPUSH
25935: LD_INT 10
25937: PPUSH
25938: CALL_OW 237
25942: GO 25922
25944: POP
25945: POP
// end ;
25946: GO 25906
25948: POP
25949: POP
// end ;
25950: LD_VAR 0 1
25954: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
25955: LD_INT 0
25957: PPUSH
// uc_side := your_side ;
25958: LD_ADDR_OWVAR 20
25962: PUSH
25963: LD_OWVAR 2
25967: ST_TO_ADDR
// uc_nation := nation ;
25968: LD_ADDR_OWVAR 21
25972: PUSH
25973: LD_VAR 0 1
25977: ST_TO_ADDR
// InitHc ;
25978: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
25982: LD_INT 0
25984: PPUSH
25985: LD_VAR 0 2
25989: PPUSH
25990: LD_VAR 0 3
25994: PPUSH
25995: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
25999: LD_VAR 0 4
26003: PPUSH
26004: LD_VAR 0 5
26008: PPUSH
26009: CALL_OW 428
26013: PUSH
26014: LD_INT 0
26016: EQUAL
26017: IFFALSE 26041
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
26019: CALL_OW 44
26023: PPUSH
26024: LD_VAR 0 4
26028: PPUSH
26029: LD_VAR 0 5
26033: PPUSH
26034: LD_INT 1
26036: PPUSH
26037: CALL_OW 48
// end ;
26041: LD_VAR 0 6
26045: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
26046: LD_INT 0
26048: PPUSH
26049: PPUSH
// uc_side := your_side ;
26050: LD_ADDR_OWVAR 20
26054: PUSH
26055: LD_OWVAR 2
26059: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
26060: LD_VAR 0 1
26064: PUSH
26065: LD_INT 1
26067: PUSH
26068: LD_INT 2
26070: PUSH
26071: LD_INT 3
26073: PUSH
26074: LD_INT 4
26076: PUSH
26077: LD_INT 5
26079: PUSH
26080: EMPTY
26081: LIST
26082: LIST
26083: LIST
26084: LIST
26085: LIST
26086: IN
26087: IFFALSE 26099
// uc_nation := nation_american else
26089: LD_ADDR_OWVAR 21
26093: PUSH
26094: LD_INT 1
26096: ST_TO_ADDR
26097: GO 26142
// if chassis in [ 11 , 12 , 13 , 14 ] then
26099: LD_VAR 0 1
26103: PUSH
26104: LD_INT 11
26106: PUSH
26107: LD_INT 12
26109: PUSH
26110: LD_INT 13
26112: PUSH
26113: LD_INT 14
26115: PUSH
26116: EMPTY
26117: LIST
26118: LIST
26119: LIST
26120: LIST
26121: IN
26122: IFFALSE 26134
// uc_nation := nation_arabian else
26124: LD_ADDR_OWVAR 21
26128: PUSH
26129: LD_INT 2
26131: ST_TO_ADDR
26132: GO 26142
// uc_nation := nation_russian ;
26134: LD_ADDR_OWVAR 21
26138: PUSH
26139: LD_INT 3
26141: ST_TO_ADDR
// vc_chassis := chassis ;
26142: LD_ADDR_OWVAR 37
26146: PUSH
26147: LD_VAR 0 1
26151: ST_TO_ADDR
// vc_engine := engine ;
26152: LD_ADDR_OWVAR 39
26156: PUSH
26157: LD_VAR 0 2
26161: ST_TO_ADDR
// vc_control := control ;
26162: LD_ADDR_OWVAR 38
26166: PUSH
26167: LD_VAR 0 3
26171: ST_TO_ADDR
// vc_weapon := weapon ;
26172: LD_ADDR_OWVAR 40
26176: PUSH
26177: LD_VAR 0 4
26181: ST_TO_ADDR
// un := CreateVehicle ;
26182: LD_ADDR_VAR 0 8
26186: PUSH
26187: CALL_OW 45
26191: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
26192: LD_VAR 0 8
26196: PPUSH
26197: LD_INT 0
26199: PPUSH
26200: LD_INT 5
26202: PPUSH
26203: CALL_OW 12
26207: PPUSH
26208: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
26212: LD_VAR 0 8
26216: PPUSH
26217: LD_VAR 0 5
26221: PPUSH
26222: LD_VAR 0 6
26226: PPUSH
26227: LD_INT 1
26229: PPUSH
26230: CALL_OW 48
// end ;
26234: LD_VAR 0 7
26238: RET
// export hInvincible ; every 1 do
26239: GO 26241
26241: DISABLE
// hInvincible := [ ] ;
26242: LD_ADDR_EXP 98
26246: PUSH
26247: EMPTY
26248: ST_TO_ADDR
26249: END
// every 10 do var i ;
26250: GO 26252
26252: DISABLE
26253: LD_INT 0
26255: PPUSH
// begin enable ;
26256: ENABLE
// if not hInvincible then
26257: LD_EXP 98
26261: NOT
26262: IFFALSE 26266
// exit ;
26264: GO 26310
// for i in hInvincible do
26266: LD_ADDR_VAR 0 1
26270: PUSH
26271: LD_EXP 98
26275: PUSH
26276: FOR_IN
26277: IFFALSE 26308
// if GetLives ( i ) < 1000 then
26279: LD_VAR 0 1
26283: PPUSH
26284: CALL_OW 256
26288: PUSH
26289: LD_INT 1000
26291: LESS
26292: IFFALSE 26306
// SetLives ( i , 1000 ) ;
26294: LD_VAR 0 1
26298: PPUSH
26299: LD_INT 1000
26301: PPUSH
26302: CALL_OW 234
26306: GO 26276
26308: POP
26309: POP
// end ;
26310: PPOPN 1
26312: END
// export function hHackInvincible ; var i ; begin
26313: LD_INT 0
26315: PPUSH
26316: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
26317: LD_ADDR_VAR 0 2
26321: PUSH
26322: LD_INT 2
26324: PUSH
26325: LD_INT 21
26327: PUSH
26328: LD_INT 1
26330: PUSH
26331: EMPTY
26332: LIST
26333: LIST
26334: PUSH
26335: LD_INT 21
26337: PUSH
26338: LD_INT 2
26340: PUSH
26341: EMPTY
26342: LIST
26343: LIST
26344: PUSH
26345: EMPTY
26346: LIST
26347: LIST
26348: LIST
26349: PPUSH
26350: CALL_OW 69
26354: PUSH
26355: FOR_IN
26356: IFFALSE 26417
// if IsSelected ( i ) then
26358: LD_VAR 0 2
26362: PPUSH
26363: CALL_OW 306
26367: IFFALSE 26415
// begin if i in hInvincible then
26369: LD_VAR 0 2
26373: PUSH
26374: LD_EXP 98
26378: IN
26379: IFFALSE 26399
// hInvincible := hInvincible diff i else
26381: LD_ADDR_EXP 98
26385: PUSH
26386: LD_EXP 98
26390: PUSH
26391: LD_VAR 0 2
26395: DIFF
26396: ST_TO_ADDR
26397: GO 26415
// hInvincible := hInvincible union i ;
26399: LD_ADDR_EXP 98
26403: PUSH
26404: LD_EXP 98
26408: PUSH
26409: LD_VAR 0 2
26413: UNION
26414: ST_TO_ADDR
// end ;
26415: GO 26355
26417: POP
26418: POP
// end ;
26419: LD_VAR 0 1
26423: RET
// export function hHackInvisible ; var i , j ; begin
26424: LD_INT 0
26426: PPUSH
26427: PPUSH
26428: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
26429: LD_ADDR_VAR 0 2
26433: PUSH
26434: LD_INT 21
26436: PUSH
26437: LD_INT 1
26439: PUSH
26440: EMPTY
26441: LIST
26442: LIST
26443: PPUSH
26444: CALL_OW 69
26448: PUSH
26449: FOR_IN
26450: IFFALSE 26474
// if IsSelected ( i ) then
26452: LD_VAR 0 2
26456: PPUSH
26457: CALL_OW 306
26461: IFFALSE 26472
// ComForceInvisible ( i ) ;
26463: LD_VAR 0 2
26467: PPUSH
26468: CALL_OW 496
26472: GO 26449
26474: POP
26475: POP
// end ;
26476: LD_VAR 0 1
26480: RET
// export function hHackChangeYourSide ; begin
26481: LD_INT 0
26483: PPUSH
// if your_side = 8 then
26484: LD_OWVAR 2
26488: PUSH
26489: LD_INT 8
26491: EQUAL
26492: IFFALSE 26504
// your_side := 0 else
26494: LD_ADDR_OWVAR 2
26498: PUSH
26499: LD_INT 0
26501: ST_TO_ADDR
26502: GO 26518
// your_side := your_side + 1 ;
26504: LD_ADDR_OWVAR 2
26508: PUSH
26509: LD_OWVAR 2
26513: PUSH
26514: LD_INT 1
26516: PLUS
26517: ST_TO_ADDR
// end ;
26518: LD_VAR 0 1
26522: RET
// export function hHackChangeUnitSide ; var i , j ; begin
26523: LD_INT 0
26525: PPUSH
26526: PPUSH
26527: PPUSH
// for i in all_units do
26528: LD_ADDR_VAR 0 2
26532: PUSH
26533: LD_OWVAR 3
26537: PUSH
26538: FOR_IN
26539: IFFALSE 26617
// if IsSelected ( i ) then
26541: LD_VAR 0 2
26545: PPUSH
26546: CALL_OW 306
26550: IFFALSE 26615
// begin j := GetSide ( i ) ;
26552: LD_ADDR_VAR 0 3
26556: PUSH
26557: LD_VAR 0 2
26561: PPUSH
26562: CALL_OW 255
26566: ST_TO_ADDR
// if j = 8 then
26567: LD_VAR 0 3
26571: PUSH
26572: LD_INT 8
26574: EQUAL
26575: IFFALSE 26587
// j := 0 else
26577: LD_ADDR_VAR 0 3
26581: PUSH
26582: LD_INT 0
26584: ST_TO_ADDR
26585: GO 26601
// j := j + 1 ;
26587: LD_ADDR_VAR 0 3
26591: PUSH
26592: LD_VAR 0 3
26596: PUSH
26597: LD_INT 1
26599: PLUS
26600: ST_TO_ADDR
// SetSide ( i , j ) ;
26601: LD_VAR 0 2
26605: PPUSH
26606: LD_VAR 0 3
26610: PPUSH
26611: CALL_OW 235
// end ;
26615: GO 26538
26617: POP
26618: POP
// end ;
26619: LD_VAR 0 1
26623: RET
// export function hHackFog ; begin
26624: LD_INT 0
26626: PPUSH
// FogOff ( true ) ;
26627: LD_INT 1
26629: PPUSH
26630: CALL_OW 344
// end ;
26634: LD_VAR 0 1
26638: RET
// export function hHackTeleport ( unit , x , y ) ; begin
26639: LD_INT 0
26641: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
26642: LD_VAR 0 1
26646: PPUSH
26647: LD_VAR 0 2
26651: PPUSH
26652: LD_VAR 0 3
26656: PPUSH
26657: LD_INT 1
26659: PPUSH
26660: LD_INT 1
26662: PPUSH
26663: CALL_OW 483
// CenterOnXY ( x , y ) ;
26667: LD_VAR 0 2
26671: PPUSH
26672: LD_VAR 0 3
26676: PPUSH
26677: CALL_OW 84
// end ; end_of_file
26681: LD_VAR 0 4
26685: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
26686: LD_INT 0
26688: PPUSH
26689: PPUSH
26690: PPUSH
26691: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
26692: LD_VAR 0 1
26696: PPUSH
26697: CALL_OW 264
26701: PUSH
26702: LD_EXP 25
26706: EQUAL
26707: IFFALSE 26779
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
26709: LD_INT 68
26711: PPUSH
26712: LD_VAR 0 1
26716: PPUSH
26717: CALL_OW 255
26721: PPUSH
26722: CALL_OW 321
26726: PUSH
26727: LD_INT 2
26729: EQUAL
26730: IFFALSE 26742
// eff := 70 else
26732: LD_ADDR_VAR 0 4
26736: PUSH
26737: LD_INT 70
26739: ST_TO_ADDR
26740: GO 26750
// eff := 30 ;
26742: LD_ADDR_VAR 0 4
26746: PUSH
26747: LD_INT 30
26749: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
26750: LD_VAR 0 1
26754: PPUSH
26755: CALL_OW 250
26759: PPUSH
26760: LD_VAR 0 1
26764: PPUSH
26765: CALL_OW 251
26769: PPUSH
26770: LD_VAR 0 4
26774: PPUSH
26775: CALL_OW 495
// end ; end ;
26779: LD_VAR 0 2
26783: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
26784: LD_INT 0
26786: PPUSH
// end ;
26787: LD_VAR 0 4
26791: RET
// export function SOS_Command ( cmd ) ; begin
26792: LD_INT 0
26794: PPUSH
// end ;
26795: LD_VAR 0 2
26799: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
26800: LD_INT 0
26802: PPUSH
// end ;
26803: LD_VAR 0 6
26807: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
26808: LD_INT 0
26810: PPUSH
26811: PPUSH
// if not vehicle or not factory then
26812: LD_VAR 0 1
26816: NOT
26817: PUSH
26818: LD_VAR 0 2
26822: NOT
26823: OR
26824: IFFALSE 26828
// exit ;
26826: GO 27059
// if factoryWaypoints >= factory then
26828: LD_EXP 99
26832: PUSH
26833: LD_VAR 0 2
26837: GREATEREQUAL
26838: IFFALSE 27059
// if factoryWaypoints [ factory ] then
26840: LD_EXP 99
26844: PUSH
26845: LD_VAR 0 2
26849: ARRAY
26850: IFFALSE 27059
// begin if GetControl ( vehicle ) = control_manual then
26852: LD_VAR 0 1
26856: PPUSH
26857: CALL_OW 263
26861: PUSH
26862: LD_INT 1
26864: EQUAL
26865: IFFALSE 26946
// begin driver := IsDrivenBy ( vehicle ) ;
26867: LD_ADDR_VAR 0 4
26871: PUSH
26872: LD_VAR 0 1
26876: PPUSH
26877: CALL_OW 311
26881: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
26882: LD_VAR 0 4
26886: PPUSH
26887: LD_EXP 99
26891: PUSH
26892: LD_VAR 0 2
26896: ARRAY
26897: PUSH
26898: LD_INT 3
26900: ARRAY
26901: PPUSH
26902: LD_EXP 99
26906: PUSH
26907: LD_VAR 0 2
26911: ARRAY
26912: PUSH
26913: LD_INT 4
26915: ARRAY
26916: PPUSH
26917: CALL_OW 171
// AddComExitVehicle ( driver ) ;
26921: LD_VAR 0 4
26925: PPUSH
26926: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
26930: LD_VAR 0 4
26934: PPUSH
26935: LD_VAR 0 2
26939: PPUSH
26940: CALL_OW 180
// end else
26944: GO 27059
// if GetControl ( vehicle ) = control_remote then
26946: LD_VAR 0 1
26950: PPUSH
26951: CALL_OW 263
26955: PUSH
26956: LD_INT 2
26958: EQUAL
26959: IFFALSE 27020
// begin wait ( 0 0$2 ) ;
26961: LD_INT 70
26963: PPUSH
26964: CALL_OW 67
// if Connect ( vehicle ) then
26968: LD_VAR 0 1
26972: PPUSH
26973: CALL 39436 0 1
26977: IFFALSE 27018
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
26979: LD_VAR 0 1
26983: PPUSH
26984: LD_EXP 99
26988: PUSH
26989: LD_VAR 0 2
26993: ARRAY
26994: PUSH
26995: LD_INT 3
26997: ARRAY
26998: PPUSH
26999: LD_EXP 99
27003: PUSH
27004: LD_VAR 0 2
27008: ARRAY
27009: PUSH
27010: LD_INT 4
27012: ARRAY
27013: PPUSH
27014: CALL_OW 171
// end else
27018: GO 27059
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
27020: LD_VAR 0 1
27024: PPUSH
27025: LD_EXP 99
27029: PUSH
27030: LD_VAR 0 2
27034: ARRAY
27035: PUSH
27036: LD_INT 3
27038: ARRAY
27039: PPUSH
27040: LD_EXP 99
27044: PUSH
27045: LD_VAR 0 2
27049: ARRAY
27050: PUSH
27051: LD_INT 4
27053: ARRAY
27054: PPUSH
27055: CALL_OW 171
// end ; end ;
27059: LD_VAR 0 3
27063: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
27064: LD_INT 0
27066: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
27067: LD_VAR 0 1
27071: PUSH
27072: LD_INT 250
27074: EQUAL
27075: PUSH
27076: LD_VAR 0 2
27080: PPUSH
27081: CALL_OW 264
27085: PUSH
27086: LD_EXP 28
27090: EQUAL
27091: AND
27092: IFFALSE 27113
// MinerPlaceMine ( unit , x , y ) ;
27094: LD_VAR 0 2
27098: PPUSH
27099: LD_VAR 0 4
27103: PPUSH
27104: LD_VAR 0 5
27108: PPUSH
27109: CALL 29841 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
27113: LD_VAR 0 1
27117: PUSH
27118: LD_INT 251
27120: EQUAL
27121: PUSH
27122: LD_VAR 0 2
27126: PPUSH
27127: CALL_OW 264
27131: PUSH
27132: LD_EXP 28
27136: EQUAL
27137: AND
27138: IFFALSE 27159
// MinerDetonateMine ( unit , x , y ) ;
27140: LD_VAR 0 2
27144: PPUSH
27145: LD_VAR 0 4
27149: PPUSH
27150: LD_VAR 0 5
27154: PPUSH
27155: CALL 30118 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
27159: LD_VAR 0 1
27163: PUSH
27164: LD_INT 252
27166: EQUAL
27167: PUSH
27168: LD_VAR 0 2
27172: PPUSH
27173: CALL_OW 264
27177: PUSH
27178: LD_EXP 28
27182: EQUAL
27183: AND
27184: IFFALSE 27205
// MinerCreateMinefield ( unit , x , y ) ;
27186: LD_VAR 0 2
27190: PPUSH
27191: LD_VAR 0 4
27195: PPUSH
27196: LD_VAR 0 5
27200: PPUSH
27201: CALL 30535 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
27205: LD_VAR 0 1
27209: PUSH
27210: LD_INT 253
27212: EQUAL
27213: PUSH
27214: LD_VAR 0 2
27218: PPUSH
27219: CALL_OW 257
27223: PUSH
27224: LD_INT 5
27226: EQUAL
27227: AND
27228: IFFALSE 27249
// ComBinocular ( unit , x , y ) ;
27230: LD_VAR 0 2
27234: PPUSH
27235: LD_VAR 0 4
27239: PPUSH
27240: LD_VAR 0 5
27244: PPUSH
27245: CALL 30906 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
27249: LD_VAR 0 1
27253: PUSH
27254: LD_INT 254
27256: EQUAL
27257: PUSH
27258: LD_VAR 0 2
27262: PPUSH
27263: CALL_OW 264
27267: PUSH
27268: LD_EXP 23
27272: EQUAL
27273: AND
27274: PUSH
27275: LD_VAR 0 3
27279: PPUSH
27280: CALL_OW 263
27284: PUSH
27285: LD_INT 3
27287: EQUAL
27288: AND
27289: IFFALSE 27305
// HackDestroyVehicle ( unit , selectedUnit ) ;
27291: LD_VAR 0 2
27295: PPUSH
27296: LD_VAR 0 3
27300: PPUSH
27301: CALL 29201 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
27305: LD_VAR 0 1
27309: PUSH
27310: LD_INT 255
27312: EQUAL
27313: PUSH
27314: LD_VAR 0 2
27318: PPUSH
27319: CALL_OW 264
27323: PUSH
27324: LD_INT 14
27326: PUSH
27327: LD_INT 53
27329: PUSH
27330: EMPTY
27331: LIST
27332: LIST
27333: IN
27334: AND
27335: PUSH
27336: LD_VAR 0 4
27340: PPUSH
27341: LD_VAR 0 5
27345: PPUSH
27346: CALL_OW 488
27350: AND
27351: IFFALSE 27375
// CutTreeXYR ( unit , x , y , 12 ) ;
27353: LD_VAR 0 2
27357: PPUSH
27358: LD_VAR 0 4
27362: PPUSH
27363: LD_VAR 0 5
27367: PPUSH
27368: LD_INT 12
27370: PPUSH
27371: CALL 27767 0 4
// if cmd = 256 then
27375: LD_VAR 0 1
27379: PUSH
27380: LD_INT 256
27382: EQUAL
27383: IFFALSE 27404
// SetFactoryWaypoint ( unit , x , y ) ;
27385: LD_VAR 0 2
27389: PPUSH
27390: LD_VAR 0 4
27394: PPUSH
27395: LD_VAR 0 5
27399: PPUSH
27400: CALL 27409 0 3
// end ;
27404: LD_VAR 0 6
27408: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
27409: LD_INT 0
27411: PPUSH
27412: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
27413: LD_VAR 0 1
27417: NOT
27418: PUSH
27419: LD_VAR 0 2
27423: PPUSH
27424: LD_VAR 0 3
27428: PPUSH
27429: CALL_OW 488
27433: NOT
27434: OR
27435: PUSH
27436: LD_VAR 0 1
27440: PPUSH
27441: CALL_OW 266
27445: PUSH
27446: LD_INT 3
27448: NONEQUAL
27449: PUSH
27450: LD_VAR 0 1
27454: PPUSH
27455: CALL_OW 247
27459: PUSH
27460: LD_INT 1
27462: EQUAL
27463: NOT
27464: AND
27465: OR
27466: IFFALSE 27470
// exit ;
27468: GO 27619
// if GetType ( factory ) = unit_human then
27470: LD_VAR 0 1
27474: PPUSH
27475: CALL_OW 247
27479: PUSH
27480: LD_INT 1
27482: EQUAL
27483: IFFALSE 27500
// factory := IsInUnit ( factory ) ;
27485: LD_ADDR_VAR 0 1
27489: PUSH
27490: LD_VAR 0 1
27494: PPUSH
27495: CALL_OW 310
27499: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
27500: LD_VAR 0 1
27504: PPUSH
27505: CALL_OW 266
27509: PUSH
27510: LD_INT 3
27512: NONEQUAL
27513: IFFALSE 27517
// exit ;
27515: GO 27619
// if HexInfo ( x , y ) = factory then
27517: LD_VAR 0 2
27521: PPUSH
27522: LD_VAR 0 3
27526: PPUSH
27527: CALL_OW 428
27531: PUSH
27532: LD_VAR 0 1
27536: EQUAL
27537: IFFALSE 27564
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
27539: LD_ADDR_EXP 99
27543: PUSH
27544: LD_EXP 99
27548: PPUSH
27549: LD_VAR 0 1
27553: PPUSH
27554: LD_INT 0
27556: PPUSH
27557: CALL_OW 1
27561: ST_TO_ADDR
27562: GO 27615
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
27564: LD_ADDR_EXP 99
27568: PUSH
27569: LD_EXP 99
27573: PPUSH
27574: LD_VAR 0 1
27578: PPUSH
27579: LD_VAR 0 1
27583: PPUSH
27584: CALL_OW 255
27588: PUSH
27589: LD_VAR 0 1
27593: PUSH
27594: LD_VAR 0 2
27598: PUSH
27599: LD_VAR 0 3
27603: PUSH
27604: EMPTY
27605: LIST
27606: LIST
27607: LIST
27608: LIST
27609: PPUSH
27610: CALL_OW 1
27614: ST_TO_ADDR
// UpdateFactoryWaypoints ;
27615: CALL 27624 0 0
// end ;
27619: LD_VAR 0 4
27623: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
27624: LD_INT 0
27626: PPUSH
27627: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
27628: LD_STRING resetFactoryWaypoint();
27630: PPUSH
27631: CALL_OW 559
// if factoryWaypoints then
27635: LD_EXP 99
27639: IFFALSE 27762
// begin for i := 1 to factoryWaypoints do
27641: LD_ADDR_VAR 0 2
27645: PUSH
27646: DOUBLE
27647: LD_INT 1
27649: DEC
27650: ST_TO_ADDR
27651: LD_EXP 99
27655: PUSH
27656: FOR_TO
27657: IFFALSE 27760
// if factoryWaypoints [ i ] then
27659: LD_EXP 99
27663: PUSH
27664: LD_VAR 0 2
27668: ARRAY
27669: IFFALSE 27758
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
27671: LD_STRING setFactoryWaypointXY(
27673: PUSH
27674: LD_EXP 99
27678: PUSH
27679: LD_VAR 0 2
27683: ARRAY
27684: PUSH
27685: LD_INT 1
27687: ARRAY
27688: STR
27689: PUSH
27690: LD_STRING ,
27692: STR
27693: PUSH
27694: LD_EXP 99
27698: PUSH
27699: LD_VAR 0 2
27703: ARRAY
27704: PUSH
27705: LD_INT 2
27707: ARRAY
27708: STR
27709: PUSH
27710: LD_STRING ,
27712: STR
27713: PUSH
27714: LD_EXP 99
27718: PUSH
27719: LD_VAR 0 2
27723: ARRAY
27724: PUSH
27725: LD_INT 3
27727: ARRAY
27728: STR
27729: PUSH
27730: LD_STRING ,
27732: STR
27733: PUSH
27734: LD_EXP 99
27738: PUSH
27739: LD_VAR 0 2
27743: ARRAY
27744: PUSH
27745: LD_INT 4
27747: ARRAY
27748: STR
27749: PUSH
27750: LD_STRING )
27752: STR
27753: PPUSH
27754: CALL_OW 559
27758: GO 27656
27760: POP
27761: POP
// end ; end ;
27762: LD_VAR 0 1
27766: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
27767: LD_INT 0
27769: PPUSH
27770: PPUSH
27771: PPUSH
27772: PPUSH
27773: PPUSH
27774: PPUSH
27775: PPUSH
27776: PPUSH
27777: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
27778: LD_VAR 0 1
27782: NOT
27783: PUSH
27784: LD_VAR 0 2
27788: PPUSH
27789: LD_VAR 0 3
27793: PPUSH
27794: CALL_OW 488
27798: NOT
27799: OR
27800: PUSH
27801: LD_VAR 0 4
27805: NOT
27806: OR
27807: IFFALSE 27811
// exit ;
27809: GO 28151
// list := [ ] ;
27811: LD_ADDR_VAR 0 13
27815: PUSH
27816: EMPTY
27817: ST_TO_ADDR
// if x - r < 0 then
27818: LD_VAR 0 2
27822: PUSH
27823: LD_VAR 0 4
27827: MINUS
27828: PUSH
27829: LD_INT 0
27831: LESS
27832: IFFALSE 27844
// min_x := 0 else
27834: LD_ADDR_VAR 0 7
27838: PUSH
27839: LD_INT 0
27841: ST_TO_ADDR
27842: GO 27860
// min_x := x - r ;
27844: LD_ADDR_VAR 0 7
27848: PUSH
27849: LD_VAR 0 2
27853: PUSH
27854: LD_VAR 0 4
27858: MINUS
27859: ST_TO_ADDR
// if y - r < 0 then
27860: LD_VAR 0 3
27864: PUSH
27865: LD_VAR 0 4
27869: MINUS
27870: PUSH
27871: LD_INT 0
27873: LESS
27874: IFFALSE 27886
// min_y := 0 else
27876: LD_ADDR_VAR 0 8
27880: PUSH
27881: LD_INT 0
27883: ST_TO_ADDR
27884: GO 27902
// min_y := y - r ;
27886: LD_ADDR_VAR 0 8
27890: PUSH
27891: LD_VAR 0 3
27895: PUSH
27896: LD_VAR 0 4
27900: MINUS
27901: ST_TO_ADDR
// max_x := x + r ;
27902: LD_ADDR_VAR 0 9
27906: PUSH
27907: LD_VAR 0 2
27911: PUSH
27912: LD_VAR 0 4
27916: PLUS
27917: ST_TO_ADDR
// max_y := y + r ;
27918: LD_ADDR_VAR 0 10
27922: PUSH
27923: LD_VAR 0 3
27927: PUSH
27928: LD_VAR 0 4
27932: PLUS
27933: ST_TO_ADDR
// for _x = min_x to max_x do
27934: LD_ADDR_VAR 0 11
27938: PUSH
27939: DOUBLE
27940: LD_VAR 0 7
27944: DEC
27945: ST_TO_ADDR
27946: LD_VAR 0 9
27950: PUSH
27951: FOR_TO
27952: IFFALSE 28069
// for _y = min_y to max_y do
27954: LD_ADDR_VAR 0 12
27958: PUSH
27959: DOUBLE
27960: LD_VAR 0 8
27964: DEC
27965: ST_TO_ADDR
27966: LD_VAR 0 10
27970: PUSH
27971: FOR_TO
27972: IFFALSE 28065
// begin if not ValidHex ( _x , _y ) then
27974: LD_VAR 0 11
27978: PPUSH
27979: LD_VAR 0 12
27983: PPUSH
27984: CALL_OW 488
27988: NOT
27989: IFFALSE 27993
// continue ;
27991: GO 27971
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
27993: LD_VAR 0 11
27997: PPUSH
27998: LD_VAR 0 12
28002: PPUSH
28003: CALL_OW 351
28007: PUSH
28008: LD_VAR 0 11
28012: PPUSH
28013: LD_VAR 0 12
28017: PPUSH
28018: CALL_OW 554
28022: AND
28023: IFFALSE 28063
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
28025: LD_ADDR_VAR 0 13
28029: PUSH
28030: LD_VAR 0 13
28034: PPUSH
28035: LD_VAR 0 13
28039: PUSH
28040: LD_INT 1
28042: PLUS
28043: PPUSH
28044: LD_VAR 0 11
28048: PUSH
28049: LD_VAR 0 12
28053: PUSH
28054: EMPTY
28055: LIST
28056: LIST
28057: PPUSH
28058: CALL_OW 2
28062: ST_TO_ADDR
// end ;
28063: GO 27971
28065: POP
28066: POP
28067: GO 27951
28069: POP
28070: POP
// if not list then
28071: LD_VAR 0 13
28075: NOT
28076: IFFALSE 28080
// exit ;
28078: GO 28151
// for i in list do
28080: LD_ADDR_VAR 0 6
28084: PUSH
28085: LD_VAR 0 13
28089: PUSH
28090: FOR_IN
28091: IFFALSE 28149
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
28093: LD_VAR 0 1
28097: PPUSH
28098: LD_STRING M
28100: PUSH
28101: LD_VAR 0 6
28105: PUSH
28106: LD_INT 1
28108: ARRAY
28109: PUSH
28110: LD_VAR 0 6
28114: PUSH
28115: LD_INT 2
28117: ARRAY
28118: PUSH
28119: LD_INT 0
28121: PUSH
28122: LD_INT 0
28124: PUSH
28125: LD_INT 0
28127: PUSH
28128: LD_INT 0
28130: PUSH
28131: EMPTY
28132: LIST
28133: LIST
28134: LIST
28135: LIST
28136: LIST
28137: LIST
28138: LIST
28139: PUSH
28140: EMPTY
28141: LIST
28142: PPUSH
28143: CALL_OW 447
28147: GO 28090
28149: POP
28150: POP
// end ;
28151: LD_VAR 0 5
28155: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
28156: LD_EXP 100
28160: NOT
28161: IFFALSE 28211
28163: GO 28165
28165: DISABLE
// begin initHack := true ;
28166: LD_ADDR_EXP 100
28170: PUSH
28171: LD_INT 1
28173: ST_TO_ADDR
// hackTanks := [ ] ;
28174: LD_ADDR_EXP 101
28178: PUSH
28179: EMPTY
28180: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
28181: LD_ADDR_EXP 102
28185: PUSH
28186: EMPTY
28187: ST_TO_ADDR
// hackLimit := 3 ;
28188: LD_ADDR_EXP 103
28192: PUSH
28193: LD_INT 3
28195: ST_TO_ADDR
// hackDist := 12 ;
28196: LD_ADDR_EXP 104
28200: PUSH
28201: LD_INT 12
28203: ST_TO_ADDR
// hackCounter := [ ] ;
28204: LD_ADDR_EXP 105
28208: PUSH
28209: EMPTY
28210: ST_TO_ADDR
// end ;
28211: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
28212: LD_EXP 100
28216: PUSH
28217: LD_INT 34
28219: PUSH
28220: LD_EXP 23
28224: PUSH
28225: EMPTY
28226: LIST
28227: LIST
28228: PPUSH
28229: CALL_OW 69
28233: AND
28234: IFFALSE 28489
28236: GO 28238
28238: DISABLE
28239: LD_INT 0
28241: PPUSH
28242: PPUSH
// begin enable ;
28243: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
28244: LD_ADDR_VAR 0 1
28248: PUSH
28249: LD_INT 34
28251: PUSH
28252: LD_EXP 23
28256: PUSH
28257: EMPTY
28258: LIST
28259: LIST
28260: PPUSH
28261: CALL_OW 69
28265: PUSH
28266: FOR_IN
28267: IFFALSE 28487
// begin if not i in hackTanks then
28269: LD_VAR 0 1
28273: PUSH
28274: LD_EXP 101
28278: IN
28279: NOT
28280: IFFALSE 28363
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
28282: LD_ADDR_EXP 101
28286: PUSH
28287: LD_EXP 101
28291: PPUSH
28292: LD_EXP 101
28296: PUSH
28297: LD_INT 1
28299: PLUS
28300: PPUSH
28301: LD_VAR 0 1
28305: PPUSH
28306: CALL_OW 1
28310: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
28311: LD_ADDR_EXP 102
28315: PUSH
28316: LD_EXP 102
28320: PPUSH
28321: LD_EXP 102
28325: PUSH
28326: LD_INT 1
28328: PLUS
28329: PPUSH
28330: EMPTY
28331: PPUSH
28332: CALL_OW 1
28336: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
28337: LD_ADDR_EXP 105
28341: PUSH
28342: LD_EXP 105
28346: PPUSH
28347: LD_EXP 105
28351: PUSH
28352: LD_INT 1
28354: PLUS
28355: PPUSH
28356: EMPTY
28357: PPUSH
28358: CALL_OW 1
28362: ST_TO_ADDR
// end ; if not IsOk ( i ) then
28363: LD_VAR 0 1
28367: PPUSH
28368: CALL_OW 302
28372: NOT
28373: IFFALSE 28386
// begin HackUnlinkAll ( i ) ;
28375: LD_VAR 0 1
28379: PPUSH
28380: CALL 28492 0 1
// continue ;
28384: GO 28266
// end ; HackCheckCapturedStatus ( i ) ;
28386: LD_VAR 0 1
28390: PPUSH
28391: CALL 28935 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
28395: LD_ADDR_VAR 0 2
28399: PUSH
28400: LD_INT 81
28402: PUSH
28403: LD_VAR 0 1
28407: PPUSH
28408: CALL_OW 255
28412: PUSH
28413: EMPTY
28414: LIST
28415: LIST
28416: PUSH
28417: LD_INT 33
28419: PUSH
28420: LD_INT 3
28422: PUSH
28423: EMPTY
28424: LIST
28425: LIST
28426: PUSH
28427: LD_INT 91
28429: PUSH
28430: LD_VAR 0 1
28434: PUSH
28435: LD_EXP 104
28439: PUSH
28440: EMPTY
28441: LIST
28442: LIST
28443: LIST
28444: PUSH
28445: LD_INT 50
28447: PUSH
28448: EMPTY
28449: LIST
28450: PUSH
28451: EMPTY
28452: LIST
28453: LIST
28454: LIST
28455: LIST
28456: PPUSH
28457: CALL_OW 69
28461: ST_TO_ADDR
// if not tmp then
28462: LD_VAR 0 2
28466: NOT
28467: IFFALSE 28471
// continue ;
28469: GO 28266
// HackLink ( i , tmp ) ;
28471: LD_VAR 0 1
28475: PPUSH
28476: LD_VAR 0 2
28480: PPUSH
28481: CALL 28628 0 2
// end ;
28485: GO 28266
28487: POP
28488: POP
// end ;
28489: PPOPN 2
28491: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
28492: LD_INT 0
28494: PPUSH
28495: PPUSH
28496: PPUSH
// if not hack in hackTanks then
28497: LD_VAR 0 1
28501: PUSH
28502: LD_EXP 101
28506: IN
28507: NOT
28508: IFFALSE 28512
// exit ;
28510: GO 28623
// index := GetElementIndex ( hackTanks , hack ) ;
28512: LD_ADDR_VAR 0 4
28516: PUSH
28517: LD_EXP 101
28521: PPUSH
28522: LD_VAR 0 1
28526: PPUSH
28527: CALL 36250 0 2
28531: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
28532: LD_EXP 102
28536: PUSH
28537: LD_VAR 0 4
28541: ARRAY
28542: IFFALSE 28623
// begin for i in hackTanksCaptured [ index ] do
28544: LD_ADDR_VAR 0 3
28548: PUSH
28549: LD_EXP 102
28553: PUSH
28554: LD_VAR 0 4
28558: ARRAY
28559: PUSH
28560: FOR_IN
28561: IFFALSE 28587
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
28563: LD_VAR 0 3
28567: PUSH
28568: LD_INT 1
28570: ARRAY
28571: PPUSH
28572: LD_VAR 0 3
28576: PUSH
28577: LD_INT 2
28579: ARRAY
28580: PPUSH
28581: CALL_OW 235
28585: GO 28560
28587: POP
28588: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
28589: LD_ADDR_EXP 102
28593: PUSH
28594: LD_EXP 102
28598: PPUSH
28599: LD_VAR 0 4
28603: PPUSH
28604: EMPTY
28605: PPUSH
28606: CALL_OW 1
28610: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
28611: LD_VAR 0 1
28615: PPUSH
28616: LD_INT 0
28618: PPUSH
28619: CALL_OW 505
// end ; end ;
28623: LD_VAR 0 2
28627: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
28628: LD_INT 0
28630: PPUSH
28631: PPUSH
28632: PPUSH
// if not hack in hackTanks or not vehicles then
28633: LD_VAR 0 1
28637: PUSH
28638: LD_EXP 101
28642: IN
28643: NOT
28644: PUSH
28645: LD_VAR 0 2
28649: NOT
28650: OR
28651: IFFALSE 28655
// exit ;
28653: GO 28930
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
28655: LD_ADDR_VAR 0 2
28659: PUSH
28660: LD_VAR 0 1
28664: PPUSH
28665: LD_VAR 0 2
28669: PPUSH
28670: LD_INT 1
28672: PPUSH
28673: LD_INT 1
28675: PPUSH
28676: CALL 36900 0 4
28680: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
28681: LD_ADDR_VAR 0 5
28685: PUSH
28686: LD_EXP 101
28690: PPUSH
28691: LD_VAR 0 1
28695: PPUSH
28696: CALL 36250 0 2
28700: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
28701: LD_EXP 102
28705: PUSH
28706: LD_VAR 0 5
28710: ARRAY
28711: PUSH
28712: LD_EXP 103
28716: LESS
28717: IFFALSE 28906
// begin for i := 1 to vehicles do
28719: LD_ADDR_VAR 0 4
28723: PUSH
28724: DOUBLE
28725: LD_INT 1
28727: DEC
28728: ST_TO_ADDR
28729: LD_VAR 0 2
28733: PUSH
28734: FOR_TO
28735: IFFALSE 28904
// begin if hackTanksCaptured [ index ] = hackLimit then
28737: LD_EXP 102
28741: PUSH
28742: LD_VAR 0 5
28746: ARRAY
28747: PUSH
28748: LD_EXP 103
28752: EQUAL
28753: IFFALSE 28757
// break ;
28755: GO 28904
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
28757: LD_ADDR_EXP 105
28761: PUSH
28762: LD_EXP 105
28766: PPUSH
28767: LD_VAR 0 5
28771: PPUSH
28772: LD_EXP 105
28776: PUSH
28777: LD_VAR 0 5
28781: ARRAY
28782: PUSH
28783: LD_INT 1
28785: PLUS
28786: PPUSH
28787: CALL_OW 1
28791: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
28792: LD_ADDR_EXP 102
28796: PUSH
28797: LD_EXP 102
28801: PPUSH
28802: LD_VAR 0 5
28806: PUSH
28807: LD_EXP 102
28811: PUSH
28812: LD_VAR 0 5
28816: ARRAY
28817: PUSH
28818: LD_INT 1
28820: PLUS
28821: PUSH
28822: EMPTY
28823: LIST
28824: LIST
28825: PPUSH
28826: LD_VAR 0 2
28830: PUSH
28831: LD_VAR 0 4
28835: ARRAY
28836: PUSH
28837: LD_VAR 0 2
28841: PUSH
28842: LD_VAR 0 4
28846: ARRAY
28847: PPUSH
28848: CALL_OW 255
28852: PUSH
28853: EMPTY
28854: LIST
28855: LIST
28856: PPUSH
28857: CALL 36465 0 3
28861: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
28862: LD_VAR 0 2
28866: PUSH
28867: LD_VAR 0 4
28871: ARRAY
28872: PPUSH
28873: LD_VAR 0 1
28877: PPUSH
28878: CALL_OW 255
28882: PPUSH
28883: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
28887: LD_VAR 0 2
28891: PUSH
28892: LD_VAR 0 4
28896: ARRAY
28897: PPUSH
28898: CALL_OW 141
// end ;
28902: GO 28734
28904: POP
28905: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
28906: LD_VAR 0 1
28910: PPUSH
28911: LD_EXP 102
28915: PUSH
28916: LD_VAR 0 5
28920: ARRAY
28921: PUSH
28922: LD_INT 0
28924: PLUS
28925: PPUSH
28926: CALL_OW 505
// end ;
28930: LD_VAR 0 3
28934: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
28935: LD_INT 0
28937: PPUSH
28938: PPUSH
28939: PPUSH
28940: PPUSH
// if not hack in hackTanks then
28941: LD_VAR 0 1
28945: PUSH
28946: LD_EXP 101
28950: IN
28951: NOT
28952: IFFALSE 28956
// exit ;
28954: GO 29196
// index := GetElementIndex ( hackTanks , hack ) ;
28956: LD_ADDR_VAR 0 4
28960: PUSH
28961: LD_EXP 101
28965: PPUSH
28966: LD_VAR 0 1
28970: PPUSH
28971: CALL 36250 0 2
28975: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
28976: LD_ADDR_VAR 0 3
28980: PUSH
28981: DOUBLE
28982: LD_EXP 102
28986: PUSH
28987: LD_VAR 0 4
28991: ARRAY
28992: INC
28993: ST_TO_ADDR
28994: LD_INT 1
28996: PUSH
28997: FOR_DOWNTO
28998: IFFALSE 29170
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
29000: LD_ADDR_VAR 0 5
29004: PUSH
29005: LD_EXP 102
29009: PUSH
29010: LD_VAR 0 4
29014: ARRAY
29015: PUSH
29016: LD_VAR 0 3
29020: ARRAY
29021: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
29022: LD_VAR 0 5
29026: PUSH
29027: LD_INT 1
29029: ARRAY
29030: PPUSH
29031: CALL_OW 302
29035: NOT
29036: PUSH
29037: LD_VAR 0 5
29041: PUSH
29042: LD_INT 1
29044: ARRAY
29045: PPUSH
29046: CALL_OW 255
29050: PUSH
29051: LD_VAR 0 1
29055: PPUSH
29056: CALL_OW 255
29060: NONEQUAL
29061: OR
29062: IFFALSE 29168
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
29064: LD_VAR 0 5
29068: PUSH
29069: LD_INT 1
29071: ARRAY
29072: PPUSH
29073: CALL_OW 305
29077: PUSH
29078: LD_VAR 0 5
29082: PUSH
29083: LD_INT 1
29085: ARRAY
29086: PPUSH
29087: CALL_OW 255
29091: PUSH
29092: LD_VAR 0 1
29096: PPUSH
29097: CALL_OW 255
29101: EQUAL
29102: AND
29103: IFFALSE 29127
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
29105: LD_VAR 0 5
29109: PUSH
29110: LD_INT 1
29112: ARRAY
29113: PPUSH
29114: LD_VAR 0 5
29118: PUSH
29119: LD_INT 2
29121: ARRAY
29122: PPUSH
29123: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
29127: LD_ADDR_EXP 102
29131: PUSH
29132: LD_EXP 102
29136: PPUSH
29137: LD_VAR 0 4
29141: PPUSH
29142: LD_EXP 102
29146: PUSH
29147: LD_VAR 0 4
29151: ARRAY
29152: PPUSH
29153: LD_VAR 0 3
29157: PPUSH
29158: CALL_OW 3
29162: PPUSH
29163: CALL_OW 1
29167: ST_TO_ADDR
// end ; end ;
29168: GO 28997
29170: POP
29171: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
29172: LD_VAR 0 1
29176: PPUSH
29177: LD_EXP 102
29181: PUSH
29182: LD_VAR 0 4
29186: ARRAY
29187: PUSH
29188: LD_INT 0
29190: PLUS
29191: PPUSH
29192: CALL_OW 505
// end ;
29196: LD_VAR 0 2
29200: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
29201: LD_INT 0
29203: PPUSH
29204: PPUSH
29205: PPUSH
29206: PPUSH
// if not hack in hackTanks then
29207: LD_VAR 0 1
29211: PUSH
29212: LD_EXP 101
29216: IN
29217: NOT
29218: IFFALSE 29222
// exit ;
29220: GO 29307
// index := GetElementIndex ( hackTanks , hack ) ;
29222: LD_ADDR_VAR 0 5
29226: PUSH
29227: LD_EXP 101
29231: PPUSH
29232: LD_VAR 0 1
29236: PPUSH
29237: CALL 36250 0 2
29241: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
29242: LD_ADDR_VAR 0 4
29246: PUSH
29247: DOUBLE
29248: LD_INT 1
29250: DEC
29251: ST_TO_ADDR
29252: LD_EXP 102
29256: PUSH
29257: LD_VAR 0 5
29261: ARRAY
29262: PUSH
29263: FOR_TO
29264: IFFALSE 29305
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
29266: LD_EXP 102
29270: PUSH
29271: LD_VAR 0 5
29275: ARRAY
29276: PUSH
29277: LD_VAR 0 4
29281: ARRAY
29282: PUSH
29283: LD_INT 1
29285: ARRAY
29286: PUSH
29287: LD_VAR 0 2
29291: EQUAL
29292: IFFALSE 29303
// KillUnit ( vehicle ) ;
29294: LD_VAR 0 2
29298: PPUSH
29299: CALL_OW 66
29303: GO 29263
29305: POP
29306: POP
// end ;
29307: LD_VAR 0 3
29311: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
29312: LD_EXP 106
29316: NOT
29317: IFFALSE 29352
29319: GO 29321
29321: DISABLE
// begin initMiner := true ;
29322: LD_ADDR_EXP 106
29326: PUSH
29327: LD_INT 1
29329: ST_TO_ADDR
// minersList := [ ] ;
29330: LD_ADDR_EXP 107
29334: PUSH
29335: EMPTY
29336: ST_TO_ADDR
// minerMinesList := [ ] ;
29337: LD_ADDR_EXP 108
29341: PUSH
29342: EMPTY
29343: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
29344: LD_ADDR_EXP 109
29348: PUSH
29349: LD_INT 5
29351: ST_TO_ADDR
// end ;
29352: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
29353: LD_EXP 106
29357: PUSH
29358: LD_INT 34
29360: PUSH
29361: LD_EXP 28
29365: PUSH
29366: EMPTY
29367: LIST
29368: LIST
29369: PPUSH
29370: CALL_OW 69
29374: AND
29375: IFFALSE 29838
29377: GO 29379
29379: DISABLE
29380: LD_INT 0
29382: PPUSH
29383: PPUSH
29384: PPUSH
29385: PPUSH
// begin enable ;
29386: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
29387: LD_ADDR_VAR 0 1
29391: PUSH
29392: LD_INT 34
29394: PUSH
29395: LD_EXP 28
29399: PUSH
29400: EMPTY
29401: LIST
29402: LIST
29403: PPUSH
29404: CALL_OW 69
29408: PUSH
29409: FOR_IN
29410: IFFALSE 29482
// begin if not i in minersList then
29412: LD_VAR 0 1
29416: PUSH
29417: LD_EXP 107
29421: IN
29422: NOT
29423: IFFALSE 29480
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
29425: LD_ADDR_EXP 107
29429: PUSH
29430: LD_EXP 107
29434: PPUSH
29435: LD_EXP 107
29439: PUSH
29440: LD_INT 1
29442: PLUS
29443: PPUSH
29444: LD_VAR 0 1
29448: PPUSH
29449: CALL_OW 1
29453: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
29454: LD_ADDR_EXP 108
29458: PUSH
29459: LD_EXP 108
29463: PPUSH
29464: LD_EXP 108
29468: PUSH
29469: LD_INT 1
29471: PLUS
29472: PPUSH
29473: EMPTY
29474: PPUSH
29475: CALL_OW 1
29479: ST_TO_ADDR
// end end ;
29480: GO 29409
29482: POP
29483: POP
// for i := minerMinesList downto 1 do
29484: LD_ADDR_VAR 0 1
29488: PUSH
29489: DOUBLE
29490: LD_EXP 108
29494: INC
29495: ST_TO_ADDR
29496: LD_INT 1
29498: PUSH
29499: FOR_DOWNTO
29500: IFFALSE 29836
// begin if IsLive ( minersList [ i ] ) then
29502: LD_EXP 107
29506: PUSH
29507: LD_VAR 0 1
29511: ARRAY
29512: PPUSH
29513: CALL_OW 300
29517: IFFALSE 29545
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
29519: LD_EXP 107
29523: PUSH
29524: LD_VAR 0 1
29528: ARRAY
29529: PPUSH
29530: LD_EXP 108
29534: PUSH
29535: LD_VAR 0 1
29539: ARRAY
29540: PPUSH
29541: CALL_OW 505
// if not minerMinesList [ i ] then
29545: LD_EXP 108
29549: PUSH
29550: LD_VAR 0 1
29554: ARRAY
29555: NOT
29556: IFFALSE 29560
// continue ;
29558: GO 29499
// for j := minerMinesList [ i ] downto 1 do
29560: LD_ADDR_VAR 0 2
29564: PUSH
29565: DOUBLE
29566: LD_EXP 108
29570: PUSH
29571: LD_VAR 0 1
29575: ARRAY
29576: INC
29577: ST_TO_ADDR
29578: LD_INT 1
29580: PUSH
29581: FOR_DOWNTO
29582: IFFALSE 29832
// begin side := GetSide ( minersList [ i ] ) ;
29584: LD_ADDR_VAR 0 3
29588: PUSH
29589: LD_EXP 107
29593: PUSH
29594: LD_VAR 0 1
29598: ARRAY
29599: PPUSH
29600: CALL_OW 255
29604: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
29605: LD_ADDR_VAR 0 4
29609: PUSH
29610: LD_EXP 108
29614: PUSH
29615: LD_VAR 0 1
29619: ARRAY
29620: PUSH
29621: LD_VAR 0 2
29625: ARRAY
29626: PUSH
29627: LD_INT 1
29629: ARRAY
29630: PPUSH
29631: LD_EXP 108
29635: PUSH
29636: LD_VAR 0 1
29640: ARRAY
29641: PUSH
29642: LD_VAR 0 2
29646: ARRAY
29647: PUSH
29648: LD_INT 2
29650: ARRAY
29651: PPUSH
29652: CALL_OW 428
29656: ST_TO_ADDR
// if not tmp then
29657: LD_VAR 0 4
29661: NOT
29662: IFFALSE 29666
// continue ;
29664: GO 29581
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
29666: LD_VAR 0 4
29670: PUSH
29671: LD_INT 81
29673: PUSH
29674: LD_VAR 0 3
29678: PUSH
29679: EMPTY
29680: LIST
29681: LIST
29682: PPUSH
29683: CALL_OW 69
29687: IN
29688: PUSH
29689: LD_EXP 108
29693: PUSH
29694: LD_VAR 0 1
29698: ARRAY
29699: PUSH
29700: LD_VAR 0 2
29704: ARRAY
29705: PUSH
29706: LD_INT 1
29708: ARRAY
29709: PPUSH
29710: LD_EXP 108
29714: PUSH
29715: LD_VAR 0 1
29719: ARRAY
29720: PUSH
29721: LD_VAR 0 2
29725: ARRAY
29726: PUSH
29727: LD_INT 2
29729: ARRAY
29730: PPUSH
29731: CALL_OW 458
29735: AND
29736: IFFALSE 29830
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
29738: LD_EXP 108
29742: PUSH
29743: LD_VAR 0 1
29747: ARRAY
29748: PUSH
29749: LD_VAR 0 2
29753: ARRAY
29754: PUSH
29755: LD_INT 1
29757: ARRAY
29758: PPUSH
29759: LD_EXP 108
29763: PUSH
29764: LD_VAR 0 1
29768: ARRAY
29769: PUSH
29770: LD_VAR 0 2
29774: ARRAY
29775: PUSH
29776: LD_INT 2
29778: ARRAY
29779: PPUSH
29780: LD_VAR 0 3
29784: PPUSH
29785: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
29789: LD_ADDR_EXP 108
29793: PUSH
29794: LD_EXP 108
29798: PPUSH
29799: LD_VAR 0 1
29803: PPUSH
29804: LD_EXP 108
29808: PUSH
29809: LD_VAR 0 1
29813: ARRAY
29814: PPUSH
29815: LD_VAR 0 2
29819: PPUSH
29820: CALL_OW 3
29824: PPUSH
29825: CALL_OW 1
29829: ST_TO_ADDR
// end ; end ;
29830: GO 29581
29832: POP
29833: POP
// end ;
29834: GO 29499
29836: POP
29837: POP
// end ;
29838: PPOPN 4
29840: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
29841: LD_INT 0
29843: PPUSH
29844: PPUSH
// result := false ;
29845: LD_ADDR_VAR 0 4
29849: PUSH
29850: LD_INT 0
29852: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
29853: LD_VAR 0 1
29857: PPUSH
29858: CALL_OW 264
29862: PUSH
29863: LD_EXP 28
29867: EQUAL
29868: NOT
29869: IFFALSE 29873
// exit ;
29871: GO 30113
// index := GetElementIndex ( minersList , unit ) ;
29873: LD_ADDR_VAR 0 5
29877: PUSH
29878: LD_EXP 107
29882: PPUSH
29883: LD_VAR 0 1
29887: PPUSH
29888: CALL 36250 0 2
29892: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
29893: LD_EXP 108
29897: PUSH
29898: LD_VAR 0 5
29902: ARRAY
29903: PUSH
29904: LD_EXP 109
29908: GREATEREQUAL
29909: IFFALSE 29913
// exit ;
29911: GO 30113
// ComMoveXY ( unit , x , y ) ;
29913: LD_VAR 0 1
29917: PPUSH
29918: LD_VAR 0 2
29922: PPUSH
29923: LD_VAR 0 3
29927: PPUSH
29928: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
29932: LD_INT 35
29934: PPUSH
29935: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
29939: LD_VAR 0 1
29943: PPUSH
29944: LD_VAR 0 2
29948: PPUSH
29949: LD_VAR 0 3
29953: PPUSH
29954: CALL 66969 0 3
29958: NOT
29959: PUSH
29960: LD_VAR 0 1
29964: PPUSH
29965: CALL_OW 314
29969: AND
29970: IFFALSE 29974
// exit ;
29972: GO 30113
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
29974: LD_VAR 0 2
29978: PPUSH
29979: LD_VAR 0 3
29983: PPUSH
29984: CALL_OW 428
29988: PUSH
29989: LD_VAR 0 1
29993: EQUAL
29994: PUSH
29995: LD_VAR 0 1
29999: PPUSH
30000: CALL_OW 314
30004: NOT
30005: AND
30006: IFFALSE 29932
// PlaySoundXY ( x , y , PlantMine ) ;
30008: LD_VAR 0 2
30012: PPUSH
30013: LD_VAR 0 3
30017: PPUSH
30018: LD_STRING PlantMine
30020: PPUSH
30021: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
30025: LD_VAR 0 2
30029: PPUSH
30030: LD_VAR 0 3
30034: PPUSH
30035: LD_VAR 0 1
30039: PPUSH
30040: CALL_OW 255
30044: PPUSH
30045: LD_INT 0
30047: PPUSH
30048: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
30052: LD_ADDR_EXP 108
30056: PUSH
30057: LD_EXP 108
30061: PPUSH
30062: LD_VAR 0 5
30066: PUSH
30067: LD_EXP 108
30071: PUSH
30072: LD_VAR 0 5
30076: ARRAY
30077: PUSH
30078: LD_INT 1
30080: PLUS
30081: PUSH
30082: EMPTY
30083: LIST
30084: LIST
30085: PPUSH
30086: LD_VAR 0 2
30090: PUSH
30091: LD_VAR 0 3
30095: PUSH
30096: EMPTY
30097: LIST
30098: LIST
30099: PPUSH
30100: CALL 36465 0 3
30104: ST_TO_ADDR
// result := true ;
30105: LD_ADDR_VAR 0 4
30109: PUSH
30110: LD_INT 1
30112: ST_TO_ADDR
// end ;
30113: LD_VAR 0 4
30117: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
30118: LD_INT 0
30120: PPUSH
30121: PPUSH
30122: PPUSH
// if not unit in minersList then
30123: LD_VAR 0 1
30127: PUSH
30128: LD_EXP 107
30132: IN
30133: NOT
30134: IFFALSE 30138
// exit ;
30136: GO 30530
// index := GetElementIndex ( minersList , unit ) ;
30138: LD_ADDR_VAR 0 6
30142: PUSH
30143: LD_EXP 107
30147: PPUSH
30148: LD_VAR 0 1
30152: PPUSH
30153: CALL 36250 0 2
30157: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
30158: LD_ADDR_VAR 0 5
30162: PUSH
30163: DOUBLE
30164: LD_EXP 108
30168: PUSH
30169: LD_VAR 0 6
30173: ARRAY
30174: INC
30175: ST_TO_ADDR
30176: LD_INT 1
30178: PUSH
30179: FOR_DOWNTO
30180: IFFALSE 30341
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
30182: LD_EXP 108
30186: PUSH
30187: LD_VAR 0 6
30191: ARRAY
30192: PUSH
30193: LD_VAR 0 5
30197: ARRAY
30198: PUSH
30199: LD_INT 1
30201: ARRAY
30202: PUSH
30203: LD_VAR 0 2
30207: EQUAL
30208: PUSH
30209: LD_EXP 108
30213: PUSH
30214: LD_VAR 0 6
30218: ARRAY
30219: PUSH
30220: LD_VAR 0 5
30224: ARRAY
30225: PUSH
30226: LD_INT 2
30228: ARRAY
30229: PUSH
30230: LD_VAR 0 3
30234: EQUAL
30235: AND
30236: IFFALSE 30339
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
30238: LD_EXP 108
30242: PUSH
30243: LD_VAR 0 6
30247: ARRAY
30248: PUSH
30249: LD_VAR 0 5
30253: ARRAY
30254: PUSH
30255: LD_INT 1
30257: ARRAY
30258: PPUSH
30259: LD_EXP 108
30263: PUSH
30264: LD_VAR 0 6
30268: ARRAY
30269: PUSH
30270: LD_VAR 0 5
30274: ARRAY
30275: PUSH
30276: LD_INT 2
30278: ARRAY
30279: PPUSH
30280: LD_VAR 0 1
30284: PPUSH
30285: CALL_OW 255
30289: PPUSH
30290: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
30294: LD_ADDR_EXP 108
30298: PUSH
30299: LD_EXP 108
30303: PPUSH
30304: LD_VAR 0 6
30308: PPUSH
30309: LD_EXP 108
30313: PUSH
30314: LD_VAR 0 6
30318: ARRAY
30319: PPUSH
30320: LD_VAR 0 5
30324: PPUSH
30325: CALL_OW 3
30329: PPUSH
30330: CALL_OW 1
30334: ST_TO_ADDR
// exit ;
30335: POP
30336: POP
30337: GO 30530
// end ; end ;
30339: GO 30179
30341: POP
30342: POP
// for i := minerMinesList [ index ] downto 1 do
30343: LD_ADDR_VAR 0 5
30347: PUSH
30348: DOUBLE
30349: LD_EXP 108
30353: PUSH
30354: LD_VAR 0 6
30358: ARRAY
30359: INC
30360: ST_TO_ADDR
30361: LD_INT 1
30363: PUSH
30364: FOR_DOWNTO
30365: IFFALSE 30528
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
30367: LD_EXP 108
30371: PUSH
30372: LD_VAR 0 6
30376: ARRAY
30377: PUSH
30378: LD_VAR 0 5
30382: ARRAY
30383: PUSH
30384: LD_INT 1
30386: ARRAY
30387: PPUSH
30388: LD_EXP 108
30392: PUSH
30393: LD_VAR 0 6
30397: ARRAY
30398: PUSH
30399: LD_VAR 0 5
30403: ARRAY
30404: PUSH
30405: LD_INT 2
30407: ARRAY
30408: PPUSH
30409: LD_VAR 0 2
30413: PPUSH
30414: LD_VAR 0 3
30418: PPUSH
30419: CALL_OW 298
30423: PUSH
30424: LD_INT 6
30426: LESS
30427: IFFALSE 30526
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
30429: LD_EXP 108
30433: PUSH
30434: LD_VAR 0 6
30438: ARRAY
30439: PUSH
30440: LD_VAR 0 5
30444: ARRAY
30445: PUSH
30446: LD_INT 1
30448: ARRAY
30449: PPUSH
30450: LD_EXP 108
30454: PUSH
30455: LD_VAR 0 6
30459: ARRAY
30460: PUSH
30461: LD_VAR 0 5
30465: ARRAY
30466: PUSH
30467: LD_INT 2
30469: ARRAY
30470: PPUSH
30471: LD_VAR 0 1
30475: PPUSH
30476: CALL_OW 255
30480: PPUSH
30481: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
30485: LD_ADDR_EXP 108
30489: PUSH
30490: LD_EXP 108
30494: PPUSH
30495: LD_VAR 0 6
30499: PPUSH
30500: LD_EXP 108
30504: PUSH
30505: LD_VAR 0 6
30509: ARRAY
30510: PPUSH
30511: LD_VAR 0 5
30515: PPUSH
30516: CALL_OW 3
30520: PPUSH
30521: CALL_OW 1
30525: ST_TO_ADDR
// end ; end ;
30526: GO 30364
30528: POP
30529: POP
// end ;
30530: LD_VAR 0 4
30534: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
30535: LD_INT 0
30537: PPUSH
30538: PPUSH
30539: PPUSH
30540: PPUSH
30541: PPUSH
30542: PPUSH
30543: PPUSH
30544: PPUSH
30545: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
30546: LD_VAR 0 1
30550: PPUSH
30551: CALL_OW 264
30555: PUSH
30556: LD_EXP 28
30560: EQUAL
30561: NOT
30562: PUSH
30563: LD_VAR 0 1
30567: PUSH
30568: LD_EXP 107
30572: IN
30573: NOT
30574: OR
30575: IFFALSE 30579
// exit ;
30577: GO 30901
// index := GetElementIndex ( minersList , unit ) ;
30579: LD_ADDR_VAR 0 6
30583: PUSH
30584: LD_EXP 107
30588: PPUSH
30589: LD_VAR 0 1
30593: PPUSH
30594: CALL 36250 0 2
30598: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
30599: LD_ADDR_VAR 0 8
30603: PUSH
30604: LD_EXP 109
30608: PUSH
30609: LD_EXP 108
30613: PUSH
30614: LD_VAR 0 6
30618: ARRAY
30619: MINUS
30620: ST_TO_ADDR
// if not minesFreeAmount then
30621: LD_VAR 0 8
30625: NOT
30626: IFFALSE 30630
// exit ;
30628: GO 30901
// tmp := [ ] ;
30630: LD_ADDR_VAR 0 7
30634: PUSH
30635: EMPTY
30636: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
30637: LD_ADDR_VAR 0 5
30641: PUSH
30642: DOUBLE
30643: LD_INT 1
30645: DEC
30646: ST_TO_ADDR
30647: LD_VAR 0 8
30651: PUSH
30652: FOR_TO
30653: IFFALSE 30848
// begin _d := rand ( 0 , 5 ) ;
30655: LD_ADDR_VAR 0 11
30659: PUSH
30660: LD_INT 0
30662: PPUSH
30663: LD_INT 5
30665: PPUSH
30666: CALL_OW 12
30670: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
30671: LD_ADDR_VAR 0 12
30675: PUSH
30676: LD_INT 2
30678: PPUSH
30679: LD_INT 6
30681: PPUSH
30682: CALL_OW 12
30686: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
30687: LD_ADDR_VAR 0 9
30691: PUSH
30692: LD_VAR 0 2
30696: PPUSH
30697: LD_VAR 0 11
30701: PPUSH
30702: LD_VAR 0 12
30706: PPUSH
30707: CALL_OW 272
30711: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
30712: LD_ADDR_VAR 0 10
30716: PUSH
30717: LD_VAR 0 3
30721: PPUSH
30722: LD_VAR 0 11
30726: PPUSH
30727: LD_VAR 0 12
30731: PPUSH
30732: CALL_OW 273
30736: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
30737: LD_VAR 0 9
30741: PPUSH
30742: LD_VAR 0 10
30746: PPUSH
30747: CALL_OW 488
30751: PUSH
30752: LD_VAR 0 9
30756: PUSH
30757: LD_VAR 0 10
30761: PUSH
30762: EMPTY
30763: LIST
30764: LIST
30765: PUSH
30766: LD_VAR 0 7
30770: IN
30771: NOT
30772: AND
30773: PUSH
30774: LD_VAR 0 9
30778: PPUSH
30779: LD_VAR 0 10
30783: PPUSH
30784: CALL_OW 458
30788: NOT
30789: AND
30790: IFFALSE 30832
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
30792: LD_ADDR_VAR 0 7
30796: PUSH
30797: LD_VAR 0 7
30801: PPUSH
30802: LD_VAR 0 7
30806: PUSH
30807: LD_INT 1
30809: PLUS
30810: PPUSH
30811: LD_VAR 0 9
30815: PUSH
30816: LD_VAR 0 10
30820: PUSH
30821: EMPTY
30822: LIST
30823: LIST
30824: PPUSH
30825: CALL_OW 1
30829: ST_TO_ADDR
30830: GO 30846
// i := i - 1 ;
30832: LD_ADDR_VAR 0 5
30836: PUSH
30837: LD_VAR 0 5
30841: PUSH
30842: LD_INT 1
30844: MINUS
30845: ST_TO_ADDR
// end ;
30846: GO 30652
30848: POP
30849: POP
// for i in tmp do
30850: LD_ADDR_VAR 0 5
30854: PUSH
30855: LD_VAR 0 7
30859: PUSH
30860: FOR_IN
30861: IFFALSE 30899
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
30863: LD_VAR 0 1
30867: PPUSH
30868: LD_VAR 0 5
30872: PUSH
30873: LD_INT 1
30875: ARRAY
30876: PPUSH
30877: LD_VAR 0 5
30881: PUSH
30882: LD_INT 2
30884: ARRAY
30885: PPUSH
30886: CALL 29841 0 3
30890: NOT
30891: IFFALSE 30897
// exit ;
30893: POP
30894: POP
30895: GO 30901
30897: GO 30860
30899: POP
30900: POP
// end ;
30901: LD_VAR 0 4
30905: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
30906: LD_INT 0
30908: PPUSH
30909: PPUSH
30910: PPUSH
30911: PPUSH
30912: PPUSH
30913: PPUSH
30914: PPUSH
// if not GetClass ( unit ) = class_sniper then
30915: LD_VAR 0 1
30919: PPUSH
30920: CALL_OW 257
30924: PUSH
30925: LD_INT 5
30927: EQUAL
30928: NOT
30929: IFFALSE 30933
// exit ;
30931: GO 31321
// dist := 8 ;
30933: LD_ADDR_VAR 0 5
30937: PUSH
30938: LD_INT 8
30940: ST_TO_ADDR
// viewRange := 12 ;
30941: LD_ADDR_VAR 0 7
30945: PUSH
30946: LD_INT 12
30948: ST_TO_ADDR
// side := GetSide ( unit ) ;
30949: LD_ADDR_VAR 0 6
30953: PUSH
30954: LD_VAR 0 1
30958: PPUSH
30959: CALL_OW 255
30963: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
30964: LD_INT 61
30966: PPUSH
30967: LD_VAR 0 6
30971: PPUSH
30972: CALL_OW 321
30976: PUSH
30977: LD_INT 2
30979: EQUAL
30980: IFFALSE 30990
// viewRange := 16 ;
30982: LD_ADDR_VAR 0 7
30986: PUSH
30987: LD_INT 16
30989: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
30990: LD_VAR 0 1
30994: PPUSH
30995: LD_VAR 0 2
30999: PPUSH
31000: LD_VAR 0 3
31004: PPUSH
31005: CALL_OW 297
31009: PUSH
31010: LD_VAR 0 5
31014: GREATER
31015: IFFALSE 31094
// begin ComMoveXY ( unit , x , y ) ;
31017: LD_VAR 0 1
31021: PPUSH
31022: LD_VAR 0 2
31026: PPUSH
31027: LD_VAR 0 3
31031: PPUSH
31032: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
31036: LD_INT 35
31038: PPUSH
31039: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
31043: LD_VAR 0 1
31047: PPUSH
31048: LD_VAR 0 2
31052: PPUSH
31053: LD_VAR 0 3
31057: PPUSH
31058: CALL 66969 0 3
31062: NOT
31063: IFFALSE 31067
// exit ;
31065: GO 31321
// until GetDistUnitXY ( unit , x , y ) < dist ;
31067: LD_VAR 0 1
31071: PPUSH
31072: LD_VAR 0 2
31076: PPUSH
31077: LD_VAR 0 3
31081: PPUSH
31082: CALL_OW 297
31086: PUSH
31087: LD_VAR 0 5
31091: LESS
31092: IFFALSE 31036
// end ; ComTurnXY ( unit , x , y ) ;
31094: LD_VAR 0 1
31098: PPUSH
31099: LD_VAR 0 2
31103: PPUSH
31104: LD_VAR 0 3
31108: PPUSH
31109: CALL_OW 118
// wait ( 5 ) ;
31113: LD_INT 5
31115: PPUSH
31116: CALL_OW 67
// _d := GetDir ( unit ) ;
31120: LD_ADDR_VAR 0 10
31124: PUSH
31125: LD_VAR 0 1
31129: PPUSH
31130: CALL_OW 254
31134: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
31135: LD_ADDR_VAR 0 8
31139: PUSH
31140: LD_VAR 0 1
31144: PPUSH
31145: CALL_OW 250
31149: PPUSH
31150: LD_VAR 0 10
31154: PPUSH
31155: LD_VAR 0 5
31159: PPUSH
31160: CALL_OW 272
31164: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
31165: LD_ADDR_VAR 0 9
31169: PUSH
31170: LD_VAR 0 1
31174: PPUSH
31175: CALL_OW 251
31179: PPUSH
31180: LD_VAR 0 10
31184: PPUSH
31185: LD_VAR 0 5
31189: PPUSH
31190: CALL_OW 273
31194: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31195: LD_VAR 0 8
31199: PPUSH
31200: LD_VAR 0 9
31204: PPUSH
31205: CALL_OW 488
31209: NOT
31210: IFFALSE 31214
// exit ;
31212: GO 31321
// ComAnimCustom ( unit , 1 ) ;
31214: LD_VAR 0 1
31218: PPUSH
31219: LD_INT 1
31221: PPUSH
31222: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
31226: LD_VAR 0 8
31230: PPUSH
31231: LD_VAR 0 9
31235: PPUSH
31236: LD_VAR 0 6
31240: PPUSH
31241: LD_VAR 0 7
31245: PPUSH
31246: CALL_OW 330
// repeat wait ( 1 ) ;
31250: LD_INT 1
31252: PPUSH
31253: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
31257: LD_VAR 0 1
31261: PPUSH
31262: CALL_OW 316
31266: PUSH
31267: LD_VAR 0 1
31271: PPUSH
31272: CALL_OW 314
31276: OR
31277: PUSH
31278: LD_VAR 0 1
31282: PPUSH
31283: CALL_OW 302
31287: NOT
31288: OR
31289: PUSH
31290: LD_VAR 0 1
31294: PPUSH
31295: CALL_OW 301
31299: OR
31300: IFFALSE 31250
// RemoveSeeing ( _x , _y , side ) ;
31302: LD_VAR 0 8
31306: PPUSH
31307: LD_VAR 0 9
31311: PPUSH
31312: LD_VAR 0 6
31316: PPUSH
31317: CALL_OW 331
// end ; end_of_file
31321: LD_VAR 0 4
31325: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
31326: LD_INT 0
31328: PPUSH
31329: PPUSH
// if exist_mode then
31330: LD_VAR 0 2
31334: IFFALSE 31359
// unit := CreateCharacter ( prefix & ident ) else
31336: LD_ADDR_VAR 0 5
31340: PUSH
31341: LD_VAR 0 3
31345: PUSH
31346: LD_VAR 0 1
31350: STR
31351: PPUSH
31352: CALL_OW 34
31356: ST_TO_ADDR
31357: GO 31374
// unit := NewCharacter ( ident ) ;
31359: LD_ADDR_VAR 0 5
31363: PUSH
31364: LD_VAR 0 1
31368: PPUSH
31369: CALL_OW 25
31373: ST_TO_ADDR
// result := unit ;
31374: LD_ADDR_VAR 0 4
31378: PUSH
31379: LD_VAR 0 5
31383: ST_TO_ADDR
// end ;
31384: LD_VAR 0 4
31388: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
31389: LD_INT 0
31391: PPUSH
31392: PPUSH
// if not side or not nation then
31393: LD_VAR 0 1
31397: NOT
31398: PUSH
31399: LD_VAR 0 2
31403: NOT
31404: OR
31405: IFFALSE 31409
// exit ;
31407: GO 32177
// case nation of nation_american :
31409: LD_VAR 0 2
31413: PUSH
31414: LD_INT 1
31416: DOUBLE
31417: EQUAL
31418: IFTRUE 31422
31420: GO 31636
31422: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
31423: LD_ADDR_VAR 0 4
31427: PUSH
31428: LD_INT 35
31430: PUSH
31431: LD_INT 45
31433: PUSH
31434: LD_INT 46
31436: PUSH
31437: LD_INT 47
31439: PUSH
31440: LD_INT 82
31442: PUSH
31443: LD_INT 83
31445: PUSH
31446: LD_INT 84
31448: PUSH
31449: LD_INT 85
31451: PUSH
31452: LD_INT 86
31454: PUSH
31455: LD_INT 1
31457: PUSH
31458: LD_INT 2
31460: PUSH
31461: LD_INT 6
31463: PUSH
31464: LD_INT 15
31466: PUSH
31467: LD_INT 16
31469: PUSH
31470: LD_INT 7
31472: PUSH
31473: LD_INT 12
31475: PUSH
31476: LD_INT 13
31478: PUSH
31479: LD_INT 10
31481: PUSH
31482: LD_INT 14
31484: PUSH
31485: LD_INT 20
31487: PUSH
31488: LD_INT 21
31490: PUSH
31491: LD_INT 22
31493: PUSH
31494: LD_INT 25
31496: PUSH
31497: LD_INT 32
31499: PUSH
31500: LD_INT 27
31502: PUSH
31503: LD_INT 36
31505: PUSH
31506: LD_INT 69
31508: PUSH
31509: LD_INT 39
31511: PUSH
31512: LD_INT 34
31514: PUSH
31515: LD_INT 40
31517: PUSH
31518: LD_INT 48
31520: PUSH
31521: LD_INT 49
31523: PUSH
31524: LD_INT 50
31526: PUSH
31527: LD_INT 51
31529: PUSH
31530: LD_INT 52
31532: PUSH
31533: LD_INT 53
31535: PUSH
31536: LD_INT 54
31538: PUSH
31539: LD_INT 55
31541: PUSH
31542: LD_INT 56
31544: PUSH
31545: LD_INT 57
31547: PUSH
31548: LD_INT 58
31550: PUSH
31551: LD_INT 59
31553: PUSH
31554: LD_INT 60
31556: PUSH
31557: LD_INT 61
31559: PUSH
31560: LD_INT 62
31562: PUSH
31563: LD_INT 80
31565: PUSH
31566: LD_INT 82
31568: PUSH
31569: LD_INT 83
31571: PUSH
31572: LD_INT 84
31574: PUSH
31575: LD_INT 85
31577: PUSH
31578: LD_INT 86
31580: PUSH
31581: EMPTY
31582: LIST
31583: LIST
31584: LIST
31585: LIST
31586: LIST
31587: LIST
31588: LIST
31589: LIST
31590: LIST
31591: LIST
31592: LIST
31593: LIST
31594: LIST
31595: LIST
31596: LIST
31597: LIST
31598: LIST
31599: LIST
31600: LIST
31601: LIST
31602: LIST
31603: LIST
31604: LIST
31605: LIST
31606: LIST
31607: LIST
31608: LIST
31609: LIST
31610: LIST
31611: LIST
31612: LIST
31613: LIST
31614: LIST
31615: LIST
31616: LIST
31617: LIST
31618: LIST
31619: LIST
31620: LIST
31621: LIST
31622: LIST
31623: LIST
31624: LIST
31625: LIST
31626: LIST
31627: LIST
31628: LIST
31629: LIST
31630: LIST
31631: LIST
31632: LIST
31633: ST_TO_ADDR
31634: GO 32101
31636: LD_INT 2
31638: DOUBLE
31639: EQUAL
31640: IFTRUE 31644
31642: GO 31870
31644: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
31645: LD_ADDR_VAR 0 4
31649: PUSH
31650: LD_INT 35
31652: PUSH
31653: LD_INT 45
31655: PUSH
31656: LD_INT 46
31658: PUSH
31659: LD_INT 47
31661: PUSH
31662: LD_INT 82
31664: PUSH
31665: LD_INT 83
31667: PUSH
31668: LD_INT 84
31670: PUSH
31671: LD_INT 85
31673: PUSH
31674: LD_INT 87
31676: PUSH
31677: LD_INT 70
31679: PUSH
31680: LD_INT 1
31682: PUSH
31683: LD_INT 11
31685: PUSH
31686: LD_INT 3
31688: PUSH
31689: LD_INT 4
31691: PUSH
31692: LD_INT 5
31694: PUSH
31695: LD_INT 6
31697: PUSH
31698: LD_INT 15
31700: PUSH
31701: LD_INT 18
31703: PUSH
31704: LD_INT 7
31706: PUSH
31707: LD_INT 17
31709: PUSH
31710: LD_INT 8
31712: PUSH
31713: LD_INT 20
31715: PUSH
31716: LD_INT 21
31718: PUSH
31719: LD_INT 22
31721: PUSH
31722: LD_INT 72
31724: PUSH
31725: LD_INT 26
31727: PUSH
31728: LD_INT 69
31730: PUSH
31731: LD_INT 39
31733: PUSH
31734: LD_INT 40
31736: PUSH
31737: LD_INT 41
31739: PUSH
31740: LD_INT 42
31742: PUSH
31743: LD_INT 43
31745: PUSH
31746: LD_INT 48
31748: PUSH
31749: LD_INT 49
31751: PUSH
31752: LD_INT 50
31754: PUSH
31755: LD_INT 51
31757: PUSH
31758: LD_INT 52
31760: PUSH
31761: LD_INT 53
31763: PUSH
31764: LD_INT 54
31766: PUSH
31767: LD_INT 55
31769: PUSH
31770: LD_INT 56
31772: PUSH
31773: LD_INT 60
31775: PUSH
31776: LD_INT 61
31778: PUSH
31779: LD_INT 62
31781: PUSH
31782: LD_INT 66
31784: PUSH
31785: LD_INT 67
31787: PUSH
31788: LD_INT 68
31790: PUSH
31791: LD_INT 81
31793: PUSH
31794: LD_INT 82
31796: PUSH
31797: LD_INT 83
31799: PUSH
31800: LD_INT 84
31802: PUSH
31803: LD_INT 85
31805: PUSH
31806: LD_INT 87
31808: PUSH
31809: LD_INT 88
31811: PUSH
31812: EMPTY
31813: LIST
31814: LIST
31815: LIST
31816: LIST
31817: LIST
31818: LIST
31819: LIST
31820: LIST
31821: LIST
31822: LIST
31823: LIST
31824: LIST
31825: LIST
31826: LIST
31827: LIST
31828: LIST
31829: LIST
31830: LIST
31831: LIST
31832: LIST
31833: LIST
31834: LIST
31835: LIST
31836: LIST
31837: LIST
31838: LIST
31839: LIST
31840: LIST
31841: LIST
31842: LIST
31843: LIST
31844: LIST
31845: LIST
31846: LIST
31847: LIST
31848: LIST
31849: LIST
31850: LIST
31851: LIST
31852: LIST
31853: LIST
31854: LIST
31855: LIST
31856: LIST
31857: LIST
31858: LIST
31859: LIST
31860: LIST
31861: LIST
31862: LIST
31863: LIST
31864: LIST
31865: LIST
31866: LIST
31867: ST_TO_ADDR
31868: GO 32101
31870: LD_INT 3
31872: DOUBLE
31873: EQUAL
31874: IFTRUE 31878
31876: GO 32100
31878: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
31879: LD_ADDR_VAR 0 4
31883: PUSH
31884: LD_INT 46
31886: PUSH
31887: LD_INT 47
31889: PUSH
31890: LD_INT 1
31892: PUSH
31893: LD_INT 2
31895: PUSH
31896: LD_INT 82
31898: PUSH
31899: LD_INT 83
31901: PUSH
31902: LD_INT 84
31904: PUSH
31905: LD_INT 85
31907: PUSH
31908: LD_INT 86
31910: PUSH
31911: LD_INT 11
31913: PUSH
31914: LD_INT 9
31916: PUSH
31917: LD_INT 20
31919: PUSH
31920: LD_INT 19
31922: PUSH
31923: LD_INT 21
31925: PUSH
31926: LD_INT 24
31928: PUSH
31929: LD_INT 22
31931: PUSH
31932: LD_INT 25
31934: PUSH
31935: LD_INT 28
31937: PUSH
31938: LD_INT 29
31940: PUSH
31941: LD_INT 30
31943: PUSH
31944: LD_INT 31
31946: PUSH
31947: LD_INT 37
31949: PUSH
31950: LD_INT 38
31952: PUSH
31953: LD_INT 32
31955: PUSH
31956: LD_INT 27
31958: PUSH
31959: LD_INT 33
31961: PUSH
31962: LD_INT 69
31964: PUSH
31965: LD_INT 39
31967: PUSH
31968: LD_INT 34
31970: PUSH
31971: LD_INT 40
31973: PUSH
31974: LD_INT 71
31976: PUSH
31977: LD_INT 23
31979: PUSH
31980: LD_INT 44
31982: PUSH
31983: LD_INT 48
31985: PUSH
31986: LD_INT 49
31988: PUSH
31989: LD_INT 50
31991: PUSH
31992: LD_INT 51
31994: PUSH
31995: LD_INT 52
31997: PUSH
31998: LD_INT 53
32000: PUSH
32001: LD_INT 54
32003: PUSH
32004: LD_INT 55
32006: PUSH
32007: LD_INT 56
32009: PUSH
32010: LD_INT 57
32012: PUSH
32013: LD_INT 58
32015: PUSH
32016: LD_INT 59
32018: PUSH
32019: LD_INT 63
32021: PUSH
32022: LD_INT 64
32024: PUSH
32025: LD_INT 65
32027: PUSH
32028: LD_INT 82
32030: PUSH
32031: LD_INT 83
32033: PUSH
32034: LD_INT 84
32036: PUSH
32037: LD_INT 85
32039: PUSH
32040: LD_INT 86
32042: PUSH
32043: EMPTY
32044: LIST
32045: LIST
32046: LIST
32047: LIST
32048: LIST
32049: LIST
32050: LIST
32051: LIST
32052: LIST
32053: LIST
32054: LIST
32055: LIST
32056: LIST
32057: LIST
32058: LIST
32059: LIST
32060: LIST
32061: LIST
32062: LIST
32063: LIST
32064: LIST
32065: LIST
32066: LIST
32067: LIST
32068: LIST
32069: LIST
32070: LIST
32071: LIST
32072: LIST
32073: LIST
32074: LIST
32075: LIST
32076: LIST
32077: LIST
32078: LIST
32079: LIST
32080: LIST
32081: LIST
32082: LIST
32083: LIST
32084: LIST
32085: LIST
32086: LIST
32087: LIST
32088: LIST
32089: LIST
32090: LIST
32091: LIST
32092: LIST
32093: LIST
32094: LIST
32095: LIST
32096: LIST
32097: ST_TO_ADDR
32098: GO 32101
32100: POP
// if state > - 1 and state < 3 then
32101: LD_VAR 0 3
32105: PUSH
32106: LD_INT 1
32108: NEG
32109: GREATER
32110: PUSH
32111: LD_VAR 0 3
32115: PUSH
32116: LD_INT 3
32118: LESS
32119: AND
32120: IFFALSE 32177
// for i in result do
32122: LD_ADDR_VAR 0 5
32126: PUSH
32127: LD_VAR 0 4
32131: PUSH
32132: FOR_IN
32133: IFFALSE 32175
// if GetTech ( i , side ) <> state then
32135: LD_VAR 0 5
32139: PPUSH
32140: LD_VAR 0 1
32144: PPUSH
32145: CALL_OW 321
32149: PUSH
32150: LD_VAR 0 3
32154: NONEQUAL
32155: IFFALSE 32173
// result := result diff i ;
32157: LD_ADDR_VAR 0 4
32161: PUSH
32162: LD_VAR 0 4
32166: PUSH
32167: LD_VAR 0 5
32171: DIFF
32172: ST_TO_ADDR
32173: GO 32132
32175: POP
32176: POP
// end ;
32177: LD_VAR 0 4
32181: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
32182: LD_INT 0
32184: PPUSH
32185: PPUSH
32186: PPUSH
// result := true ;
32187: LD_ADDR_VAR 0 3
32191: PUSH
32192: LD_INT 1
32194: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
32195: LD_ADDR_VAR 0 5
32199: PUSH
32200: LD_VAR 0 2
32204: PPUSH
32205: CALL_OW 480
32209: ST_TO_ADDR
// if not tmp then
32210: LD_VAR 0 5
32214: NOT
32215: IFFALSE 32219
// exit ;
32217: GO 32268
// for i in tmp do
32219: LD_ADDR_VAR 0 4
32223: PUSH
32224: LD_VAR 0 5
32228: PUSH
32229: FOR_IN
32230: IFFALSE 32266
// if GetTech ( i , side ) <> state_researched then
32232: LD_VAR 0 4
32236: PPUSH
32237: LD_VAR 0 1
32241: PPUSH
32242: CALL_OW 321
32246: PUSH
32247: LD_INT 2
32249: NONEQUAL
32250: IFFALSE 32264
// begin result := false ;
32252: LD_ADDR_VAR 0 3
32256: PUSH
32257: LD_INT 0
32259: ST_TO_ADDR
// exit ;
32260: POP
32261: POP
32262: GO 32268
// end ;
32264: GO 32229
32266: POP
32267: POP
// end ;
32268: LD_VAR 0 3
32272: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
32273: LD_INT 0
32275: PPUSH
32276: PPUSH
32277: PPUSH
32278: PPUSH
32279: PPUSH
32280: PPUSH
32281: PPUSH
32282: PPUSH
32283: PPUSH
32284: PPUSH
32285: PPUSH
32286: PPUSH
32287: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
32288: LD_VAR 0 1
32292: NOT
32293: PUSH
32294: LD_VAR 0 1
32298: PPUSH
32299: CALL_OW 257
32303: PUSH
32304: LD_INT 9
32306: NONEQUAL
32307: OR
32308: IFFALSE 32312
// exit ;
32310: GO 32885
// side := GetSide ( unit ) ;
32312: LD_ADDR_VAR 0 9
32316: PUSH
32317: LD_VAR 0 1
32321: PPUSH
32322: CALL_OW 255
32326: ST_TO_ADDR
// tech_space := tech_spacanom ;
32327: LD_ADDR_VAR 0 12
32331: PUSH
32332: LD_INT 29
32334: ST_TO_ADDR
// tech_time := tech_taurad ;
32335: LD_ADDR_VAR 0 13
32339: PUSH
32340: LD_INT 28
32342: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
32343: LD_ADDR_VAR 0 11
32347: PUSH
32348: LD_VAR 0 1
32352: PPUSH
32353: CALL_OW 310
32357: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
32358: LD_VAR 0 11
32362: PPUSH
32363: CALL_OW 247
32367: PUSH
32368: LD_INT 2
32370: EQUAL
32371: IFFALSE 32375
// exit ;
32373: GO 32885
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32375: LD_ADDR_VAR 0 8
32379: PUSH
32380: LD_INT 81
32382: PUSH
32383: LD_VAR 0 9
32387: PUSH
32388: EMPTY
32389: LIST
32390: LIST
32391: PUSH
32392: LD_INT 3
32394: PUSH
32395: LD_INT 21
32397: PUSH
32398: LD_INT 3
32400: PUSH
32401: EMPTY
32402: LIST
32403: LIST
32404: PUSH
32405: EMPTY
32406: LIST
32407: LIST
32408: PUSH
32409: EMPTY
32410: LIST
32411: LIST
32412: PPUSH
32413: CALL_OW 69
32417: ST_TO_ADDR
// if not tmp then
32418: LD_VAR 0 8
32422: NOT
32423: IFFALSE 32427
// exit ;
32425: GO 32885
// if in_unit then
32427: LD_VAR 0 11
32431: IFFALSE 32455
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
32433: LD_ADDR_VAR 0 10
32437: PUSH
32438: LD_VAR 0 8
32442: PPUSH
32443: LD_VAR 0 11
32447: PPUSH
32448: CALL_OW 74
32452: ST_TO_ADDR
32453: GO 32475
// enemy := NearestUnitToUnit ( tmp , unit ) ;
32455: LD_ADDR_VAR 0 10
32459: PUSH
32460: LD_VAR 0 8
32464: PPUSH
32465: LD_VAR 0 1
32469: PPUSH
32470: CALL_OW 74
32474: ST_TO_ADDR
// if not enemy then
32475: LD_VAR 0 10
32479: NOT
32480: IFFALSE 32484
// exit ;
32482: GO 32885
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
32484: LD_VAR 0 11
32488: PUSH
32489: LD_VAR 0 11
32493: PPUSH
32494: LD_VAR 0 10
32498: PPUSH
32499: CALL_OW 296
32503: PUSH
32504: LD_INT 13
32506: GREATER
32507: AND
32508: PUSH
32509: LD_VAR 0 1
32513: PPUSH
32514: LD_VAR 0 10
32518: PPUSH
32519: CALL_OW 296
32523: PUSH
32524: LD_INT 12
32526: GREATER
32527: OR
32528: IFFALSE 32532
// exit ;
32530: GO 32885
// missile := [ 1 ] ;
32532: LD_ADDR_VAR 0 14
32536: PUSH
32537: LD_INT 1
32539: PUSH
32540: EMPTY
32541: LIST
32542: ST_TO_ADDR
// if Researched ( side , tech_space ) then
32543: LD_VAR 0 9
32547: PPUSH
32548: LD_VAR 0 12
32552: PPUSH
32553: CALL_OW 325
32557: IFFALSE 32586
// missile := Replace ( missile , missile + 1 , 2 ) ;
32559: LD_ADDR_VAR 0 14
32563: PUSH
32564: LD_VAR 0 14
32568: PPUSH
32569: LD_VAR 0 14
32573: PUSH
32574: LD_INT 1
32576: PLUS
32577: PPUSH
32578: LD_INT 2
32580: PPUSH
32581: CALL_OW 1
32585: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
32586: LD_VAR 0 9
32590: PPUSH
32591: LD_VAR 0 13
32595: PPUSH
32596: CALL_OW 325
32600: PUSH
32601: LD_VAR 0 10
32605: PPUSH
32606: CALL_OW 255
32610: PPUSH
32611: LD_VAR 0 13
32615: PPUSH
32616: CALL_OW 325
32620: NOT
32621: AND
32622: IFFALSE 32651
// missile := Replace ( missile , missile + 1 , 3 ) ;
32624: LD_ADDR_VAR 0 14
32628: PUSH
32629: LD_VAR 0 14
32633: PPUSH
32634: LD_VAR 0 14
32638: PUSH
32639: LD_INT 1
32641: PLUS
32642: PPUSH
32643: LD_INT 3
32645: PPUSH
32646: CALL_OW 1
32650: ST_TO_ADDR
// if missile < 2 then
32651: LD_VAR 0 14
32655: PUSH
32656: LD_INT 2
32658: LESS
32659: IFFALSE 32663
// exit ;
32661: GO 32885
// x := GetX ( enemy ) ;
32663: LD_ADDR_VAR 0 4
32667: PUSH
32668: LD_VAR 0 10
32672: PPUSH
32673: CALL_OW 250
32677: ST_TO_ADDR
// y := GetY ( enemy ) ;
32678: LD_ADDR_VAR 0 5
32682: PUSH
32683: LD_VAR 0 10
32687: PPUSH
32688: CALL_OW 251
32692: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
32693: LD_ADDR_VAR 0 6
32697: PUSH
32698: LD_VAR 0 4
32702: PUSH
32703: LD_INT 1
32705: NEG
32706: PPUSH
32707: LD_INT 1
32709: PPUSH
32710: CALL_OW 12
32714: PLUS
32715: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
32716: LD_ADDR_VAR 0 7
32720: PUSH
32721: LD_VAR 0 5
32725: PUSH
32726: LD_INT 1
32728: NEG
32729: PPUSH
32730: LD_INT 1
32732: PPUSH
32733: CALL_OW 12
32737: PLUS
32738: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32739: LD_VAR 0 6
32743: PPUSH
32744: LD_VAR 0 7
32748: PPUSH
32749: CALL_OW 488
32753: NOT
32754: IFFALSE 32776
// begin _x := x ;
32756: LD_ADDR_VAR 0 6
32760: PUSH
32761: LD_VAR 0 4
32765: ST_TO_ADDR
// _y := y ;
32766: LD_ADDR_VAR 0 7
32770: PUSH
32771: LD_VAR 0 5
32775: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
32776: LD_ADDR_VAR 0 3
32780: PUSH
32781: LD_INT 1
32783: PPUSH
32784: LD_VAR 0 14
32788: PPUSH
32789: CALL_OW 12
32793: ST_TO_ADDR
// case i of 1 :
32794: LD_VAR 0 3
32798: PUSH
32799: LD_INT 1
32801: DOUBLE
32802: EQUAL
32803: IFTRUE 32807
32805: GO 32824
32807: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
32808: LD_VAR 0 1
32812: PPUSH
32813: LD_VAR 0 10
32817: PPUSH
32818: CALL_OW 115
32822: GO 32885
32824: LD_INT 2
32826: DOUBLE
32827: EQUAL
32828: IFTRUE 32832
32830: GO 32854
32832: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
32833: LD_VAR 0 1
32837: PPUSH
32838: LD_VAR 0 6
32842: PPUSH
32843: LD_VAR 0 7
32847: PPUSH
32848: CALL_OW 153
32852: GO 32885
32854: LD_INT 3
32856: DOUBLE
32857: EQUAL
32858: IFTRUE 32862
32860: GO 32884
32862: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
32863: LD_VAR 0 1
32867: PPUSH
32868: LD_VAR 0 6
32872: PPUSH
32873: LD_VAR 0 7
32877: PPUSH
32878: CALL_OW 154
32882: GO 32885
32884: POP
// end ;
32885: LD_VAR 0 2
32889: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
32890: LD_INT 0
32892: PPUSH
32893: PPUSH
32894: PPUSH
32895: PPUSH
32896: PPUSH
32897: PPUSH
// if not unit or not building then
32898: LD_VAR 0 1
32902: NOT
32903: PUSH
32904: LD_VAR 0 2
32908: NOT
32909: OR
32910: IFFALSE 32914
// exit ;
32912: GO 33072
// x := GetX ( building ) ;
32914: LD_ADDR_VAR 0 5
32918: PUSH
32919: LD_VAR 0 2
32923: PPUSH
32924: CALL_OW 250
32928: ST_TO_ADDR
// y := GetY ( building ) ;
32929: LD_ADDR_VAR 0 6
32933: PUSH
32934: LD_VAR 0 2
32938: PPUSH
32939: CALL_OW 251
32943: ST_TO_ADDR
// for i = 0 to 5 do
32944: LD_ADDR_VAR 0 4
32948: PUSH
32949: DOUBLE
32950: LD_INT 0
32952: DEC
32953: ST_TO_ADDR
32954: LD_INT 5
32956: PUSH
32957: FOR_TO
32958: IFFALSE 33070
// begin _x := ShiftX ( x , i , 3 ) ;
32960: LD_ADDR_VAR 0 7
32964: PUSH
32965: LD_VAR 0 5
32969: PPUSH
32970: LD_VAR 0 4
32974: PPUSH
32975: LD_INT 3
32977: PPUSH
32978: CALL_OW 272
32982: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
32983: LD_ADDR_VAR 0 8
32987: PUSH
32988: LD_VAR 0 6
32992: PPUSH
32993: LD_VAR 0 4
32997: PPUSH
32998: LD_INT 3
33000: PPUSH
33001: CALL_OW 273
33005: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
33006: LD_VAR 0 7
33010: PPUSH
33011: LD_VAR 0 8
33015: PPUSH
33016: CALL_OW 488
33020: NOT
33021: IFFALSE 33025
// continue ;
33023: GO 32957
// if HexInfo ( _x , _y ) = 0 then
33025: LD_VAR 0 7
33029: PPUSH
33030: LD_VAR 0 8
33034: PPUSH
33035: CALL_OW 428
33039: PUSH
33040: LD_INT 0
33042: EQUAL
33043: IFFALSE 33068
// begin ComMoveXY ( unit , _x , _y ) ;
33045: LD_VAR 0 1
33049: PPUSH
33050: LD_VAR 0 7
33054: PPUSH
33055: LD_VAR 0 8
33059: PPUSH
33060: CALL_OW 111
// exit ;
33064: POP
33065: POP
33066: GO 33072
// end ; end ;
33068: GO 32957
33070: POP
33071: POP
// end ;
33072: LD_VAR 0 3
33076: RET
// export function ScanBase ( side , base_area ) ; begin
33077: LD_INT 0
33079: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
33080: LD_ADDR_VAR 0 3
33084: PUSH
33085: LD_VAR 0 2
33089: PPUSH
33090: LD_INT 81
33092: PUSH
33093: LD_VAR 0 1
33097: PUSH
33098: EMPTY
33099: LIST
33100: LIST
33101: PPUSH
33102: CALL_OW 70
33106: ST_TO_ADDR
// end ;
33107: LD_VAR 0 3
33111: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
33112: LD_INT 0
33114: PPUSH
33115: PPUSH
33116: PPUSH
33117: PPUSH
// result := false ;
33118: LD_ADDR_VAR 0 2
33122: PUSH
33123: LD_INT 0
33125: ST_TO_ADDR
// side := GetSide ( unit ) ;
33126: LD_ADDR_VAR 0 3
33130: PUSH
33131: LD_VAR 0 1
33135: PPUSH
33136: CALL_OW 255
33140: ST_TO_ADDR
// nat := GetNation ( unit ) ;
33141: LD_ADDR_VAR 0 4
33145: PUSH
33146: LD_VAR 0 1
33150: PPUSH
33151: CALL_OW 248
33155: ST_TO_ADDR
// case nat of 1 :
33156: LD_VAR 0 4
33160: PUSH
33161: LD_INT 1
33163: DOUBLE
33164: EQUAL
33165: IFTRUE 33169
33167: GO 33180
33169: POP
// tech := tech_lassight ; 2 :
33170: LD_ADDR_VAR 0 5
33174: PUSH
33175: LD_INT 12
33177: ST_TO_ADDR
33178: GO 33219
33180: LD_INT 2
33182: DOUBLE
33183: EQUAL
33184: IFTRUE 33188
33186: GO 33199
33188: POP
// tech := tech_mortar ; 3 :
33189: LD_ADDR_VAR 0 5
33193: PUSH
33194: LD_INT 41
33196: ST_TO_ADDR
33197: GO 33219
33199: LD_INT 3
33201: DOUBLE
33202: EQUAL
33203: IFTRUE 33207
33205: GO 33218
33207: POP
// tech := tech_bazooka ; end ;
33208: LD_ADDR_VAR 0 5
33212: PUSH
33213: LD_INT 44
33215: ST_TO_ADDR
33216: GO 33219
33218: POP
// if Researched ( side , tech ) then
33219: LD_VAR 0 3
33223: PPUSH
33224: LD_VAR 0 5
33228: PPUSH
33229: CALL_OW 325
33233: IFFALSE 33260
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
33235: LD_ADDR_VAR 0 2
33239: PUSH
33240: LD_INT 5
33242: PUSH
33243: LD_INT 8
33245: PUSH
33246: LD_INT 9
33248: PUSH
33249: EMPTY
33250: LIST
33251: LIST
33252: LIST
33253: PUSH
33254: LD_VAR 0 4
33258: ARRAY
33259: ST_TO_ADDR
// end ;
33260: LD_VAR 0 2
33264: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
33265: LD_INT 0
33267: PPUSH
33268: PPUSH
33269: PPUSH
// if not mines then
33270: LD_VAR 0 2
33274: NOT
33275: IFFALSE 33279
// exit ;
33277: GO 33423
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33279: LD_ADDR_VAR 0 5
33283: PUSH
33284: LD_INT 81
33286: PUSH
33287: LD_VAR 0 1
33291: PUSH
33292: EMPTY
33293: LIST
33294: LIST
33295: PUSH
33296: LD_INT 3
33298: PUSH
33299: LD_INT 21
33301: PUSH
33302: LD_INT 3
33304: PUSH
33305: EMPTY
33306: LIST
33307: LIST
33308: PUSH
33309: EMPTY
33310: LIST
33311: LIST
33312: PUSH
33313: EMPTY
33314: LIST
33315: LIST
33316: PPUSH
33317: CALL_OW 69
33321: ST_TO_ADDR
// for i in mines do
33322: LD_ADDR_VAR 0 4
33326: PUSH
33327: LD_VAR 0 2
33331: PUSH
33332: FOR_IN
33333: IFFALSE 33421
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
33335: LD_VAR 0 4
33339: PUSH
33340: LD_INT 1
33342: ARRAY
33343: PPUSH
33344: LD_VAR 0 4
33348: PUSH
33349: LD_INT 2
33351: ARRAY
33352: PPUSH
33353: CALL_OW 458
33357: NOT
33358: IFFALSE 33362
// continue ;
33360: GO 33332
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
33362: LD_VAR 0 4
33366: PUSH
33367: LD_INT 1
33369: ARRAY
33370: PPUSH
33371: LD_VAR 0 4
33375: PUSH
33376: LD_INT 2
33378: ARRAY
33379: PPUSH
33380: CALL_OW 428
33384: PUSH
33385: LD_VAR 0 5
33389: IN
33390: IFFALSE 33419
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
33392: LD_VAR 0 4
33396: PUSH
33397: LD_INT 1
33399: ARRAY
33400: PPUSH
33401: LD_VAR 0 4
33405: PUSH
33406: LD_INT 2
33408: ARRAY
33409: PPUSH
33410: LD_VAR 0 1
33414: PPUSH
33415: CALL_OW 456
// end ;
33419: GO 33332
33421: POP
33422: POP
// end ;
33423: LD_VAR 0 3
33427: RET
// export function Count ( array ) ; var i ; begin
33428: LD_INT 0
33430: PPUSH
33431: PPUSH
// result := 0 ;
33432: LD_ADDR_VAR 0 2
33436: PUSH
33437: LD_INT 0
33439: ST_TO_ADDR
// for i in array do
33440: LD_ADDR_VAR 0 3
33444: PUSH
33445: LD_VAR 0 1
33449: PUSH
33450: FOR_IN
33451: IFFALSE 33475
// if i then
33453: LD_VAR 0 3
33457: IFFALSE 33473
// result := result + 1 ;
33459: LD_ADDR_VAR 0 2
33463: PUSH
33464: LD_VAR 0 2
33468: PUSH
33469: LD_INT 1
33471: PLUS
33472: ST_TO_ADDR
33473: GO 33450
33475: POP
33476: POP
// end ;
33477: LD_VAR 0 2
33481: RET
// export function IsEmpty ( building ) ; begin
33482: LD_INT 0
33484: PPUSH
// if not building then
33485: LD_VAR 0 1
33489: NOT
33490: IFFALSE 33494
// exit ;
33492: GO 33537
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
33494: LD_ADDR_VAR 0 2
33498: PUSH
33499: LD_VAR 0 1
33503: PUSH
33504: LD_INT 22
33506: PUSH
33507: LD_VAR 0 1
33511: PPUSH
33512: CALL_OW 255
33516: PUSH
33517: EMPTY
33518: LIST
33519: LIST
33520: PUSH
33521: LD_INT 58
33523: PUSH
33524: EMPTY
33525: LIST
33526: PUSH
33527: EMPTY
33528: LIST
33529: LIST
33530: PPUSH
33531: CALL_OW 69
33535: IN
33536: ST_TO_ADDR
// end ;
33537: LD_VAR 0 2
33541: RET
// export function IsNotFull ( building ) ; var places ; begin
33542: LD_INT 0
33544: PPUSH
33545: PPUSH
// if not building then
33546: LD_VAR 0 1
33550: NOT
33551: IFFALSE 33555
// exit ;
33553: GO 33726
// result := false ;
33555: LD_ADDR_VAR 0 2
33559: PUSH
33560: LD_INT 0
33562: ST_TO_ADDR
// places := 0 ;
33563: LD_ADDR_VAR 0 3
33567: PUSH
33568: LD_INT 0
33570: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
33571: LD_VAR 0 1
33575: PPUSH
33576: CALL_OW 266
33580: PUSH
33581: LD_INT 0
33583: DOUBLE
33584: EQUAL
33585: IFTRUE 33643
33587: LD_INT 1
33589: DOUBLE
33590: EQUAL
33591: IFTRUE 33643
33593: LD_INT 6
33595: DOUBLE
33596: EQUAL
33597: IFTRUE 33643
33599: LD_INT 7
33601: DOUBLE
33602: EQUAL
33603: IFTRUE 33643
33605: LD_INT 8
33607: DOUBLE
33608: EQUAL
33609: IFTRUE 33643
33611: LD_INT 4
33613: DOUBLE
33614: EQUAL
33615: IFTRUE 33643
33617: LD_INT 5
33619: DOUBLE
33620: EQUAL
33621: IFTRUE 33643
33623: LD_INT 2
33625: DOUBLE
33626: EQUAL
33627: IFTRUE 33643
33629: LD_INT 3
33631: DOUBLE
33632: EQUAL
33633: IFTRUE 33643
33635: LD_INT 35
33637: DOUBLE
33638: EQUAL
33639: IFTRUE 33643
33641: GO 33654
33643: POP
// places := 6 ; b_bunker , b_breastwork :
33644: LD_ADDR_VAR 0 3
33648: PUSH
33649: LD_INT 6
33651: ST_TO_ADDR
33652: GO 33699
33654: LD_INT 32
33656: DOUBLE
33657: EQUAL
33658: IFTRUE 33668
33660: LD_INT 31
33662: DOUBLE
33663: EQUAL
33664: IFTRUE 33668
33666: GO 33679
33668: POP
// places := 1 ; b_control_tower :
33669: LD_ADDR_VAR 0 3
33673: PUSH
33674: LD_INT 1
33676: ST_TO_ADDR
33677: GO 33699
33679: LD_INT 36
33681: DOUBLE
33682: EQUAL
33683: IFTRUE 33687
33685: GO 33698
33687: POP
// places := 3 ; end ;
33688: LD_ADDR_VAR 0 3
33692: PUSH
33693: LD_INT 3
33695: ST_TO_ADDR
33696: GO 33699
33698: POP
// if places then
33699: LD_VAR 0 3
33703: IFFALSE 33726
// result := UnitsInside ( building ) < places ;
33705: LD_ADDR_VAR 0 2
33709: PUSH
33710: LD_VAR 0 1
33714: PPUSH
33715: CALL_OW 313
33719: PUSH
33720: LD_VAR 0 3
33724: LESS
33725: ST_TO_ADDR
// end ;
33726: LD_VAR 0 2
33730: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
33731: LD_INT 0
33733: PPUSH
33734: PPUSH
33735: PPUSH
33736: PPUSH
// tmp := [ ] ;
33737: LD_ADDR_VAR 0 3
33741: PUSH
33742: EMPTY
33743: ST_TO_ADDR
// list := [ ] ;
33744: LD_ADDR_VAR 0 5
33748: PUSH
33749: EMPTY
33750: ST_TO_ADDR
// for i = 16 to 25 do
33751: LD_ADDR_VAR 0 4
33755: PUSH
33756: DOUBLE
33757: LD_INT 16
33759: DEC
33760: ST_TO_ADDR
33761: LD_INT 25
33763: PUSH
33764: FOR_TO
33765: IFFALSE 33838
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
33767: LD_ADDR_VAR 0 3
33771: PUSH
33772: LD_VAR 0 3
33776: PUSH
33777: LD_INT 22
33779: PUSH
33780: LD_VAR 0 1
33784: PPUSH
33785: CALL_OW 255
33789: PUSH
33790: EMPTY
33791: LIST
33792: LIST
33793: PUSH
33794: LD_INT 91
33796: PUSH
33797: LD_VAR 0 1
33801: PUSH
33802: LD_INT 6
33804: PUSH
33805: EMPTY
33806: LIST
33807: LIST
33808: LIST
33809: PUSH
33810: LD_INT 30
33812: PUSH
33813: LD_VAR 0 4
33817: PUSH
33818: EMPTY
33819: LIST
33820: LIST
33821: PUSH
33822: EMPTY
33823: LIST
33824: LIST
33825: LIST
33826: PUSH
33827: EMPTY
33828: LIST
33829: PPUSH
33830: CALL_OW 69
33834: ADD
33835: ST_TO_ADDR
33836: GO 33764
33838: POP
33839: POP
// for i = 1 to tmp do
33840: LD_ADDR_VAR 0 4
33844: PUSH
33845: DOUBLE
33846: LD_INT 1
33848: DEC
33849: ST_TO_ADDR
33850: LD_VAR 0 3
33854: PUSH
33855: FOR_TO
33856: IFFALSE 33944
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
33858: LD_ADDR_VAR 0 5
33862: PUSH
33863: LD_VAR 0 5
33867: PUSH
33868: LD_VAR 0 3
33872: PUSH
33873: LD_VAR 0 4
33877: ARRAY
33878: PPUSH
33879: CALL_OW 266
33883: PUSH
33884: LD_VAR 0 3
33888: PUSH
33889: LD_VAR 0 4
33893: ARRAY
33894: PPUSH
33895: CALL_OW 250
33899: PUSH
33900: LD_VAR 0 3
33904: PUSH
33905: LD_VAR 0 4
33909: ARRAY
33910: PPUSH
33911: CALL_OW 251
33915: PUSH
33916: LD_VAR 0 3
33920: PUSH
33921: LD_VAR 0 4
33925: ARRAY
33926: PPUSH
33927: CALL_OW 254
33931: PUSH
33932: EMPTY
33933: LIST
33934: LIST
33935: LIST
33936: LIST
33937: PUSH
33938: EMPTY
33939: LIST
33940: ADD
33941: ST_TO_ADDR
33942: GO 33855
33944: POP
33945: POP
// result := list ;
33946: LD_ADDR_VAR 0 2
33950: PUSH
33951: LD_VAR 0 5
33955: ST_TO_ADDR
// end ;
33956: LD_VAR 0 2
33960: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
33961: LD_INT 0
33963: PPUSH
33964: PPUSH
33965: PPUSH
33966: PPUSH
33967: PPUSH
33968: PPUSH
33969: PPUSH
// if not factory then
33970: LD_VAR 0 1
33974: NOT
33975: IFFALSE 33979
// exit ;
33977: GO 34572
// if control = control_apeman then
33979: LD_VAR 0 4
33983: PUSH
33984: LD_INT 5
33986: EQUAL
33987: IFFALSE 34096
// begin tmp := UnitsInside ( factory ) ;
33989: LD_ADDR_VAR 0 8
33993: PUSH
33994: LD_VAR 0 1
33998: PPUSH
33999: CALL_OW 313
34003: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
34004: LD_VAR 0 8
34008: PPUSH
34009: LD_INT 25
34011: PUSH
34012: LD_INT 12
34014: PUSH
34015: EMPTY
34016: LIST
34017: LIST
34018: PPUSH
34019: CALL_OW 72
34023: NOT
34024: IFFALSE 34034
// control := control_manual ;
34026: LD_ADDR_VAR 0 4
34030: PUSH
34031: LD_INT 1
34033: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
34034: LD_ADDR_VAR 0 8
34038: PUSH
34039: LD_VAR 0 1
34043: PPUSH
34044: CALL 33731 0 1
34048: ST_TO_ADDR
// if tmp then
34049: LD_VAR 0 8
34053: IFFALSE 34096
// begin for i in tmp do
34055: LD_ADDR_VAR 0 7
34059: PUSH
34060: LD_VAR 0 8
34064: PUSH
34065: FOR_IN
34066: IFFALSE 34094
// if i [ 1 ] = b_ext_radio then
34068: LD_VAR 0 7
34072: PUSH
34073: LD_INT 1
34075: ARRAY
34076: PUSH
34077: LD_INT 22
34079: EQUAL
34080: IFFALSE 34092
// begin control := control_remote ;
34082: LD_ADDR_VAR 0 4
34086: PUSH
34087: LD_INT 2
34089: ST_TO_ADDR
// break ;
34090: GO 34094
// end ;
34092: GO 34065
34094: POP
34095: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
34096: LD_VAR 0 1
34100: PPUSH
34101: LD_VAR 0 2
34105: PPUSH
34106: LD_VAR 0 3
34110: PPUSH
34111: LD_VAR 0 4
34115: PPUSH
34116: LD_VAR 0 5
34120: PPUSH
34121: CALL_OW 448
34125: IFFALSE 34160
// begin result := [ chassis , engine , control , weapon ] ;
34127: LD_ADDR_VAR 0 6
34131: PUSH
34132: LD_VAR 0 2
34136: PUSH
34137: LD_VAR 0 3
34141: PUSH
34142: LD_VAR 0 4
34146: PUSH
34147: LD_VAR 0 5
34151: PUSH
34152: EMPTY
34153: LIST
34154: LIST
34155: LIST
34156: LIST
34157: ST_TO_ADDR
// exit ;
34158: GO 34572
// end ; _chassis := AvailableChassisList ( factory ) ;
34160: LD_ADDR_VAR 0 9
34164: PUSH
34165: LD_VAR 0 1
34169: PPUSH
34170: CALL_OW 475
34174: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
34175: LD_ADDR_VAR 0 11
34179: PUSH
34180: LD_VAR 0 1
34184: PPUSH
34185: CALL_OW 476
34189: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
34190: LD_ADDR_VAR 0 12
34194: PUSH
34195: LD_VAR 0 1
34199: PPUSH
34200: CALL_OW 477
34204: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
34205: LD_ADDR_VAR 0 10
34209: PUSH
34210: LD_VAR 0 1
34214: PPUSH
34215: CALL_OW 478
34219: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
34220: LD_VAR 0 9
34224: NOT
34225: PUSH
34226: LD_VAR 0 11
34230: NOT
34231: OR
34232: PUSH
34233: LD_VAR 0 12
34237: NOT
34238: OR
34239: PUSH
34240: LD_VAR 0 10
34244: NOT
34245: OR
34246: IFFALSE 34281
// begin result := [ chassis , engine , control , weapon ] ;
34248: LD_ADDR_VAR 0 6
34252: PUSH
34253: LD_VAR 0 2
34257: PUSH
34258: LD_VAR 0 3
34262: PUSH
34263: LD_VAR 0 4
34267: PUSH
34268: LD_VAR 0 5
34272: PUSH
34273: EMPTY
34274: LIST
34275: LIST
34276: LIST
34277: LIST
34278: ST_TO_ADDR
// exit ;
34279: GO 34572
// end ; if not chassis in _chassis then
34281: LD_VAR 0 2
34285: PUSH
34286: LD_VAR 0 9
34290: IN
34291: NOT
34292: IFFALSE 34318
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
34294: LD_ADDR_VAR 0 2
34298: PUSH
34299: LD_VAR 0 9
34303: PUSH
34304: LD_INT 1
34306: PPUSH
34307: LD_VAR 0 9
34311: PPUSH
34312: CALL_OW 12
34316: ARRAY
34317: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
34318: LD_VAR 0 2
34322: PPUSH
34323: LD_VAR 0 3
34327: PPUSH
34328: CALL 34577 0 2
34332: NOT
34333: IFFALSE 34392
// repeat engine := _engine [ 1 ] ;
34335: LD_ADDR_VAR 0 3
34339: PUSH
34340: LD_VAR 0 11
34344: PUSH
34345: LD_INT 1
34347: ARRAY
34348: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
34349: LD_ADDR_VAR 0 11
34353: PUSH
34354: LD_VAR 0 11
34358: PPUSH
34359: LD_INT 1
34361: PPUSH
34362: CALL_OW 3
34366: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
34367: LD_VAR 0 2
34371: PPUSH
34372: LD_VAR 0 3
34376: PPUSH
34377: CALL 34577 0 2
34381: PUSH
34382: LD_VAR 0 11
34386: PUSH
34387: EMPTY
34388: EQUAL
34389: OR
34390: IFFALSE 34335
// if not control in _control then
34392: LD_VAR 0 4
34396: PUSH
34397: LD_VAR 0 12
34401: IN
34402: NOT
34403: IFFALSE 34429
// control := _control [ rand ( 1 , _control ) ] ;
34405: LD_ADDR_VAR 0 4
34409: PUSH
34410: LD_VAR 0 12
34414: PUSH
34415: LD_INT 1
34417: PPUSH
34418: LD_VAR 0 12
34422: PPUSH
34423: CALL_OW 12
34427: ARRAY
34428: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
34429: LD_VAR 0 2
34433: PPUSH
34434: LD_VAR 0 5
34438: PPUSH
34439: CALL 34797 0 2
34443: NOT
34444: IFFALSE 34503
// repeat weapon := _weapon [ 1 ] ;
34446: LD_ADDR_VAR 0 5
34450: PUSH
34451: LD_VAR 0 10
34455: PUSH
34456: LD_INT 1
34458: ARRAY
34459: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
34460: LD_ADDR_VAR 0 10
34464: PUSH
34465: LD_VAR 0 10
34469: PPUSH
34470: LD_INT 1
34472: PPUSH
34473: CALL_OW 3
34477: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
34478: LD_VAR 0 2
34482: PPUSH
34483: LD_VAR 0 5
34487: PPUSH
34488: CALL 34797 0 2
34492: PUSH
34493: LD_VAR 0 10
34497: PUSH
34498: EMPTY
34499: EQUAL
34500: OR
34501: IFFALSE 34446
// result := [ ] ;
34503: LD_ADDR_VAR 0 6
34507: PUSH
34508: EMPTY
34509: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
34510: LD_VAR 0 1
34514: PPUSH
34515: LD_VAR 0 2
34519: PPUSH
34520: LD_VAR 0 3
34524: PPUSH
34525: LD_VAR 0 4
34529: PPUSH
34530: LD_VAR 0 5
34534: PPUSH
34535: CALL_OW 448
34539: IFFALSE 34572
// result := [ chassis , engine , control , weapon ] ;
34541: LD_ADDR_VAR 0 6
34545: PUSH
34546: LD_VAR 0 2
34550: PUSH
34551: LD_VAR 0 3
34555: PUSH
34556: LD_VAR 0 4
34560: PUSH
34561: LD_VAR 0 5
34565: PUSH
34566: EMPTY
34567: LIST
34568: LIST
34569: LIST
34570: LIST
34571: ST_TO_ADDR
// end ;
34572: LD_VAR 0 6
34576: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
34577: LD_INT 0
34579: PPUSH
// if not chassis or not engine then
34580: LD_VAR 0 1
34584: NOT
34585: PUSH
34586: LD_VAR 0 2
34590: NOT
34591: OR
34592: IFFALSE 34596
// exit ;
34594: GO 34792
// case engine of engine_solar :
34596: LD_VAR 0 2
34600: PUSH
34601: LD_INT 2
34603: DOUBLE
34604: EQUAL
34605: IFTRUE 34609
34607: GO 34647
34609: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
34610: LD_ADDR_VAR 0 3
34614: PUSH
34615: LD_INT 11
34617: PUSH
34618: LD_INT 12
34620: PUSH
34621: LD_INT 13
34623: PUSH
34624: LD_INT 14
34626: PUSH
34627: LD_INT 1
34629: PUSH
34630: LD_INT 2
34632: PUSH
34633: LD_INT 3
34635: PUSH
34636: EMPTY
34637: LIST
34638: LIST
34639: LIST
34640: LIST
34641: LIST
34642: LIST
34643: LIST
34644: ST_TO_ADDR
34645: GO 34776
34647: LD_INT 1
34649: DOUBLE
34650: EQUAL
34651: IFTRUE 34655
34653: GO 34717
34655: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
34656: LD_ADDR_VAR 0 3
34660: PUSH
34661: LD_INT 11
34663: PUSH
34664: LD_INT 12
34666: PUSH
34667: LD_INT 13
34669: PUSH
34670: LD_INT 14
34672: PUSH
34673: LD_INT 1
34675: PUSH
34676: LD_INT 2
34678: PUSH
34679: LD_INT 3
34681: PUSH
34682: LD_INT 4
34684: PUSH
34685: LD_INT 5
34687: PUSH
34688: LD_INT 21
34690: PUSH
34691: LD_INT 23
34693: PUSH
34694: LD_INT 22
34696: PUSH
34697: LD_INT 24
34699: PUSH
34700: EMPTY
34701: LIST
34702: LIST
34703: LIST
34704: LIST
34705: LIST
34706: LIST
34707: LIST
34708: LIST
34709: LIST
34710: LIST
34711: LIST
34712: LIST
34713: LIST
34714: ST_TO_ADDR
34715: GO 34776
34717: LD_INT 3
34719: DOUBLE
34720: EQUAL
34721: IFTRUE 34725
34723: GO 34775
34725: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34726: LD_ADDR_VAR 0 3
34730: PUSH
34731: LD_INT 13
34733: PUSH
34734: LD_INT 14
34736: PUSH
34737: LD_INT 2
34739: PUSH
34740: LD_INT 3
34742: PUSH
34743: LD_INT 4
34745: PUSH
34746: LD_INT 5
34748: PUSH
34749: LD_INT 21
34751: PUSH
34752: LD_INT 22
34754: PUSH
34755: LD_INT 23
34757: PUSH
34758: LD_INT 24
34760: PUSH
34761: EMPTY
34762: LIST
34763: LIST
34764: LIST
34765: LIST
34766: LIST
34767: LIST
34768: LIST
34769: LIST
34770: LIST
34771: LIST
34772: ST_TO_ADDR
34773: GO 34776
34775: POP
// result := ( chassis in result ) ;
34776: LD_ADDR_VAR 0 3
34780: PUSH
34781: LD_VAR 0 1
34785: PUSH
34786: LD_VAR 0 3
34790: IN
34791: ST_TO_ADDR
// end ;
34792: LD_VAR 0 3
34796: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
34797: LD_INT 0
34799: PPUSH
// if not chassis or not weapon then
34800: LD_VAR 0 1
34804: NOT
34805: PUSH
34806: LD_VAR 0 2
34810: NOT
34811: OR
34812: IFFALSE 34816
// exit ;
34814: GO 35878
// case weapon of us_machine_gun :
34816: LD_VAR 0 2
34820: PUSH
34821: LD_INT 2
34823: DOUBLE
34824: EQUAL
34825: IFTRUE 34829
34827: GO 34859
34829: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
34830: LD_ADDR_VAR 0 3
34834: PUSH
34835: LD_INT 1
34837: PUSH
34838: LD_INT 2
34840: PUSH
34841: LD_INT 3
34843: PUSH
34844: LD_INT 4
34846: PUSH
34847: LD_INT 5
34849: PUSH
34850: EMPTY
34851: LIST
34852: LIST
34853: LIST
34854: LIST
34855: LIST
34856: ST_TO_ADDR
34857: GO 35862
34859: LD_INT 3
34861: DOUBLE
34862: EQUAL
34863: IFTRUE 34867
34865: GO 34897
34867: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
34868: LD_ADDR_VAR 0 3
34872: PUSH
34873: LD_INT 1
34875: PUSH
34876: LD_INT 2
34878: PUSH
34879: LD_INT 3
34881: PUSH
34882: LD_INT 4
34884: PUSH
34885: LD_INT 5
34887: PUSH
34888: EMPTY
34889: LIST
34890: LIST
34891: LIST
34892: LIST
34893: LIST
34894: ST_TO_ADDR
34895: GO 35862
34897: LD_INT 11
34899: DOUBLE
34900: EQUAL
34901: IFTRUE 34905
34903: GO 34935
34905: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
34906: LD_ADDR_VAR 0 3
34910: PUSH
34911: LD_INT 1
34913: PUSH
34914: LD_INT 2
34916: PUSH
34917: LD_INT 3
34919: PUSH
34920: LD_INT 4
34922: PUSH
34923: LD_INT 5
34925: PUSH
34926: EMPTY
34927: LIST
34928: LIST
34929: LIST
34930: LIST
34931: LIST
34932: ST_TO_ADDR
34933: GO 35862
34935: LD_INT 4
34937: DOUBLE
34938: EQUAL
34939: IFTRUE 34943
34941: GO 34969
34943: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
34944: LD_ADDR_VAR 0 3
34948: PUSH
34949: LD_INT 2
34951: PUSH
34952: LD_INT 3
34954: PUSH
34955: LD_INT 4
34957: PUSH
34958: LD_INT 5
34960: PUSH
34961: EMPTY
34962: LIST
34963: LIST
34964: LIST
34965: LIST
34966: ST_TO_ADDR
34967: GO 35862
34969: LD_INT 5
34971: DOUBLE
34972: EQUAL
34973: IFTRUE 34977
34975: GO 35003
34977: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
34978: LD_ADDR_VAR 0 3
34982: PUSH
34983: LD_INT 2
34985: PUSH
34986: LD_INT 3
34988: PUSH
34989: LD_INT 4
34991: PUSH
34992: LD_INT 5
34994: PUSH
34995: EMPTY
34996: LIST
34997: LIST
34998: LIST
34999: LIST
35000: ST_TO_ADDR
35001: GO 35862
35003: LD_INT 9
35005: DOUBLE
35006: EQUAL
35007: IFTRUE 35011
35009: GO 35037
35011: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
35012: LD_ADDR_VAR 0 3
35016: PUSH
35017: LD_INT 2
35019: PUSH
35020: LD_INT 3
35022: PUSH
35023: LD_INT 4
35025: PUSH
35026: LD_INT 5
35028: PUSH
35029: EMPTY
35030: LIST
35031: LIST
35032: LIST
35033: LIST
35034: ST_TO_ADDR
35035: GO 35862
35037: LD_INT 7
35039: DOUBLE
35040: EQUAL
35041: IFTRUE 35045
35043: GO 35071
35045: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
35046: LD_ADDR_VAR 0 3
35050: PUSH
35051: LD_INT 2
35053: PUSH
35054: LD_INT 3
35056: PUSH
35057: LD_INT 4
35059: PUSH
35060: LD_INT 5
35062: PUSH
35063: EMPTY
35064: LIST
35065: LIST
35066: LIST
35067: LIST
35068: ST_TO_ADDR
35069: GO 35862
35071: LD_INT 12
35073: DOUBLE
35074: EQUAL
35075: IFTRUE 35079
35077: GO 35105
35079: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
35080: LD_ADDR_VAR 0 3
35084: PUSH
35085: LD_INT 2
35087: PUSH
35088: LD_INT 3
35090: PUSH
35091: LD_INT 4
35093: PUSH
35094: LD_INT 5
35096: PUSH
35097: EMPTY
35098: LIST
35099: LIST
35100: LIST
35101: LIST
35102: ST_TO_ADDR
35103: GO 35862
35105: LD_INT 13
35107: DOUBLE
35108: EQUAL
35109: IFTRUE 35113
35111: GO 35139
35113: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
35114: LD_ADDR_VAR 0 3
35118: PUSH
35119: LD_INT 2
35121: PUSH
35122: LD_INT 3
35124: PUSH
35125: LD_INT 4
35127: PUSH
35128: LD_INT 5
35130: PUSH
35131: EMPTY
35132: LIST
35133: LIST
35134: LIST
35135: LIST
35136: ST_TO_ADDR
35137: GO 35862
35139: LD_INT 14
35141: DOUBLE
35142: EQUAL
35143: IFTRUE 35147
35145: GO 35165
35147: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
35148: LD_ADDR_VAR 0 3
35152: PUSH
35153: LD_INT 4
35155: PUSH
35156: LD_INT 5
35158: PUSH
35159: EMPTY
35160: LIST
35161: LIST
35162: ST_TO_ADDR
35163: GO 35862
35165: LD_INT 6
35167: DOUBLE
35168: EQUAL
35169: IFTRUE 35173
35171: GO 35191
35173: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
35174: LD_ADDR_VAR 0 3
35178: PUSH
35179: LD_INT 4
35181: PUSH
35182: LD_INT 5
35184: PUSH
35185: EMPTY
35186: LIST
35187: LIST
35188: ST_TO_ADDR
35189: GO 35862
35191: LD_INT 10
35193: DOUBLE
35194: EQUAL
35195: IFTRUE 35199
35197: GO 35217
35199: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
35200: LD_ADDR_VAR 0 3
35204: PUSH
35205: LD_INT 4
35207: PUSH
35208: LD_INT 5
35210: PUSH
35211: EMPTY
35212: LIST
35213: LIST
35214: ST_TO_ADDR
35215: GO 35862
35217: LD_INT 22
35219: DOUBLE
35220: EQUAL
35221: IFTRUE 35225
35223: GO 35251
35225: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
35226: LD_ADDR_VAR 0 3
35230: PUSH
35231: LD_INT 11
35233: PUSH
35234: LD_INT 12
35236: PUSH
35237: LD_INT 13
35239: PUSH
35240: LD_INT 14
35242: PUSH
35243: EMPTY
35244: LIST
35245: LIST
35246: LIST
35247: LIST
35248: ST_TO_ADDR
35249: GO 35862
35251: LD_INT 23
35253: DOUBLE
35254: EQUAL
35255: IFTRUE 35259
35257: GO 35285
35259: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
35260: LD_ADDR_VAR 0 3
35264: PUSH
35265: LD_INT 11
35267: PUSH
35268: LD_INT 12
35270: PUSH
35271: LD_INT 13
35273: PUSH
35274: LD_INT 14
35276: PUSH
35277: EMPTY
35278: LIST
35279: LIST
35280: LIST
35281: LIST
35282: ST_TO_ADDR
35283: GO 35862
35285: LD_INT 24
35287: DOUBLE
35288: EQUAL
35289: IFTRUE 35293
35291: GO 35319
35293: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
35294: LD_ADDR_VAR 0 3
35298: PUSH
35299: LD_INT 11
35301: PUSH
35302: LD_INT 12
35304: PUSH
35305: LD_INT 13
35307: PUSH
35308: LD_INT 14
35310: PUSH
35311: EMPTY
35312: LIST
35313: LIST
35314: LIST
35315: LIST
35316: ST_TO_ADDR
35317: GO 35862
35319: LD_INT 30
35321: DOUBLE
35322: EQUAL
35323: IFTRUE 35327
35325: GO 35353
35327: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
35328: LD_ADDR_VAR 0 3
35332: PUSH
35333: LD_INT 11
35335: PUSH
35336: LD_INT 12
35338: PUSH
35339: LD_INT 13
35341: PUSH
35342: LD_INT 14
35344: PUSH
35345: EMPTY
35346: LIST
35347: LIST
35348: LIST
35349: LIST
35350: ST_TO_ADDR
35351: GO 35862
35353: LD_INT 25
35355: DOUBLE
35356: EQUAL
35357: IFTRUE 35361
35359: GO 35379
35361: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
35362: LD_ADDR_VAR 0 3
35366: PUSH
35367: LD_INT 13
35369: PUSH
35370: LD_INT 14
35372: PUSH
35373: EMPTY
35374: LIST
35375: LIST
35376: ST_TO_ADDR
35377: GO 35862
35379: LD_INT 27
35381: DOUBLE
35382: EQUAL
35383: IFTRUE 35387
35385: GO 35405
35387: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
35388: LD_ADDR_VAR 0 3
35392: PUSH
35393: LD_INT 13
35395: PUSH
35396: LD_INT 14
35398: PUSH
35399: EMPTY
35400: LIST
35401: LIST
35402: ST_TO_ADDR
35403: GO 35862
35405: LD_EXP 26
35409: DOUBLE
35410: EQUAL
35411: IFTRUE 35415
35413: GO 35441
35415: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
35416: LD_ADDR_VAR 0 3
35420: PUSH
35421: LD_INT 11
35423: PUSH
35424: LD_INT 12
35426: PUSH
35427: LD_INT 13
35429: PUSH
35430: LD_INT 14
35432: PUSH
35433: EMPTY
35434: LIST
35435: LIST
35436: LIST
35437: LIST
35438: ST_TO_ADDR
35439: GO 35862
35441: LD_INT 28
35443: DOUBLE
35444: EQUAL
35445: IFTRUE 35449
35447: GO 35467
35449: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
35450: LD_ADDR_VAR 0 3
35454: PUSH
35455: LD_INT 13
35457: PUSH
35458: LD_INT 14
35460: PUSH
35461: EMPTY
35462: LIST
35463: LIST
35464: ST_TO_ADDR
35465: GO 35862
35467: LD_INT 29
35469: DOUBLE
35470: EQUAL
35471: IFTRUE 35475
35473: GO 35493
35475: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
35476: LD_ADDR_VAR 0 3
35480: PUSH
35481: LD_INT 13
35483: PUSH
35484: LD_INT 14
35486: PUSH
35487: EMPTY
35488: LIST
35489: LIST
35490: ST_TO_ADDR
35491: GO 35862
35493: LD_INT 31
35495: DOUBLE
35496: EQUAL
35497: IFTRUE 35501
35499: GO 35519
35501: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
35502: LD_ADDR_VAR 0 3
35506: PUSH
35507: LD_INT 13
35509: PUSH
35510: LD_INT 14
35512: PUSH
35513: EMPTY
35514: LIST
35515: LIST
35516: ST_TO_ADDR
35517: GO 35862
35519: LD_INT 26
35521: DOUBLE
35522: EQUAL
35523: IFTRUE 35527
35525: GO 35545
35527: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
35528: LD_ADDR_VAR 0 3
35532: PUSH
35533: LD_INT 13
35535: PUSH
35536: LD_INT 14
35538: PUSH
35539: EMPTY
35540: LIST
35541: LIST
35542: ST_TO_ADDR
35543: GO 35862
35545: LD_INT 42
35547: DOUBLE
35548: EQUAL
35549: IFTRUE 35553
35551: GO 35579
35553: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
35554: LD_ADDR_VAR 0 3
35558: PUSH
35559: LD_INT 21
35561: PUSH
35562: LD_INT 22
35564: PUSH
35565: LD_INT 23
35567: PUSH
35568: LD_INT 24
35570: PUSH
35571: EMPTY
35572: LIST
35573: LIST
35574: LIST
35575: LIST
35576: ST_TO_ADDR
35577: GO 35862
35579: LD_INT 43
35581: DOUBLE
35582: EQUAL
35583: IFTRUE 35587
35585: GO 35613
35587: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
35588: LD_ADDR_VAR 0 3
35592: PUSH
35593: LD_INT 21
35595: PUSH
35596: LD_INT 22
35598: PUSH
35599: LD_INT 23
35601: PUSH
35602: LD_INT 24
35604: PUSH
35605: EMPTY
35606: LIST
35607: LIST
35608: LIST
35609: LIST
35610: ST_TO_ADDR
35611: GO 35862
35613: LD_INT 44
35615: DOUBLE
35616: EQUAL
35617: IFTRUE 35621
35619: GO 35647
35621: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
35622: LD_ADDR_VAR 0 3
35626: PUSH
35627: LD_INT 21
35629: PUSH
35630: LD_INT 22
35632: PUSH
35633: LD_INT 23
35635: PUSH
35636: LD_INT 24
35638: PUSH
35639: EMPTY
35640: LIST
35641: LIST
35642: LIST
35643: LIST
35644: ST_TO_ADDR
35645: GO 35862
35647: LD_INT 45
35649: DOUBLE
35650: EQUAL
35651: IFTRUE 35655
35653: GO 35681
35655: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
35656: LD_ADDR_VAR 0 3
35660: PUSH
35661: LD_INT 21
35663: PUSH
35664: LD_INT 22
35666: PUSH
35667: LD_INT 23
35669: PUSH
35670: LD_INT 24
35672: PUSH
35673: EMPTY
35674: LIST
35675: LIST
35676: LIST
35677: LIST
35678: ST_TO_ADDR
35679: GO 35862
35681: LD_INT 49
35683: DOUBLE
35684: EQUAL
35685: IFTRUE 35689
35687: GO 35715
35689: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
35690: LD_ADDR_VAR 0 3
35694: PUSH
35695: LD_INT 21
35697: PUSH
35698: LD_INT 22
35700: PUSH
35701: LD_INT 23
35703: PUSH
35704: LD_INT 24
35706: PUSH
35707: EMPTY
35708: LIST
35709: LIST
35710: LIST
35711: LIST
35712: ST_TO_ADDR
35713: GO 35862
35715: LD_INT 51
35717: DOUBLE
35718: EQUAL
35719: IFTRUE 35723
35721: GO 35749
35723: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
35724: LD_ADDR_VAR 0 3
35728: PUSH
35729: LD_INT 21
35731: PUSH
35732: LD_INT 22
35734: PUSH
35735: LD_INT 23
35737: PUSH
35738: LD_INT 24
35740: PUSH
35741: EMPTY
35742: LIST
35743: LIST
35744: LIST
35745: LIST
35746: ST_TO_ADDR
35747: GO 35862
35749: LD_INT 52
35751: DOUBLE
35752: EQUAL
35753: IFTRUE 35757
35755: GO 35783
35757: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
35758: LD_ADDR_VAR 0 3
35762: PUSH
35763: LD_INT 21
35765: PUSH
35766: LD_INT 22
35768: PUSH
35769: LD_INT 23
35771: PUSH
35772: LD_INT 24
35774: PUSH
35775: EMPTY
35776: LIST
35777: LIST
35778: LIST
35779: LIST
35780: ST_TO_ADDR
35781: GO 35862
35783: LD_INT 53
35785: DOUBLE
35786: EQUAL
35787: IFTRUE 35791
35789: GO 35809
35791: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
35792: LD_ADDR_VAR 0 3
35796: PUSH
35797: LD_INT 23
35799: PUSH
35800: LD_INT 24
35802: PUSH
35803: EMPTY
35804: LIST
35805: LIST
35806: ST_TO_ADDR
35807: GO 35862
35809: LD_INT 46
35811: DOUBLE
35812: EQUAL
35813: IFTRUE 35817
35815: GO 35835
35817: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
35818: LD_ADDR_VAR 0 3
35822: PUSH
35823: LD_INT 23
35825: PUSH
35826: LD_INT 24
35828: PUSH
35829: EMPTY
35830: LIST
35831: LIST
35832: ST_TO_ADDR
35833: GO 35862
35835: LD_INT 47
35837: DOUBLE
35838: EQUAL
35839: IFTRUE 35843
35841: GO 35861
35843: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
35844: LD_ADDR_VAR 0 3
35848: PUSH
35849: LD_INT 23
35851: PUSH
35852: LD_INT 24
35854: PUSH
35855: EMPTY
35856: LIST
35857: LIST
35858: ST_TO_ADDR
35859: GO 35862
35861: POP
// result := ( chassis in result ) ;
35862: LD_ADDR_VAR 0 3
35866: PUSH
35867: LD_VAR 0 1
35871: PUSH
35872: LD_VAR 0 3
35876: IN
35877: ST_TO_ADDR
// end ;
35878: LD_VAR 0 3
35882: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
35883: LD_INT 0
35885: PPUSH
35886: PPUSH
35887: PPUSH
35888: PPUSH
35889: PPUSH
35890: PPUSH
35891: PPUSH
// result := array ;
35892: LD_ADDR_VAR 0 5
35896: PUSH
35897: LD_VAR 0 1
35901: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
35902: LD_VAR 0 1
35906: NOT
35907: PUSH
35908: LD_VAR 0 2
35912: NOT
35913: OR
35914: PUSH
35915: LD_VAR 0 3
35919: NOT
35920: OR
35921: PUSH
35922: LD_VAR 0 2
35926: PUSH
35927: LD_VAR 0 1
35931: GREATER
35932: OR
35933: PUSH
35934: LD_VAR 0 3
35938: PUSH
35939: LD_VAR 0 1
35943: GREATER
35944: OR
35945: IFFALSE 35949
// exit ;
35947: GO 36245
// if direction then
35949: LD_VAR 0 4
35953: IFFALSE 36017
// begin d := 1 ;
35955: LD_ADDR_VAR 0 9
35959: PUSH
35960: LD_INT 1
35962: ST_TO_ADDR
// if i_from > i_to then
35963: LD_VAR 0 2
35967: PUSH
35968: LD_VAR 0 3
35972: GREATER
35973: IFFALSE 35999
// length := ( array - i_from ) + i_to else
35975: LD_ADDR_VAR 0 11
35979: PUSH
35980: LD_VAR 0 1
35984: PUSH
35985: LD_VAR 0 2
35989: MINUS
35990: PUSH
35991: LD_VAR 0 3
35995: PLUS
35996: ST_TO_ADDR
35997: GO 36015
// length := i_to - i_from ;
35999: LD_ADDR_VAR 0 11
36003: PUSH
36004: LD_VAR 0 3
36008: PUSH
36009: LD_VAR 0 2
36013: MINUS
36014: ST_TO_ADDR
// end else
36015: GO 36078
// begin d := - 1 ;
36017: LD_ADDR_VAR 0 9
36021: PUSH
36022: LD_INT 1
36024: NEG
36025: ST_TO_ADDR
// if i_from > i_to then
36026: LD_VAR 0 2
36030: PUSH
36031: LD_VAR 0 3
36035: GREATER
36036: IFFALSE 36056
// length := i_from - i_to else
36038: LD_ADDR_VAR 0 11
36042: PUSH
36043: LD_VAR 0 2
36047: PUSH
36048: LD_VAR 0 3
36052: MINUS
36053: ST_TO_ADDR
36054: GO 36078
// length := ( array - i_to ) + i_from ;
36056: LD_ADDR_VAR 0 11
36060: PUSH
36061: LD_VAR 0 1
36065: PUSH
36066: LD_VAR 0 3
36070: MINUS
36071: PUSH
36072: LD_VAR 0 2
36076: PLUS
36077: ST_TO_ADDR
// end ; if not length then
36078: LD_VAR 0 11
36082: NOT
36083: IFFALSE 36087
// exit ;
36085: GO 36245
// tmp := array ;
36087: LD_ADDR_VAR 0 10
36091: PUSH
36092: LD_VAR 0 1
36096: ST_TO_ADDR
// for i = 1 to length do
36097: LD_ADDR_VAR 0 6
36101: PUSH
36102: DOUBLE
36103: LD_INT 1
36105: DEC
36106: ST_TO_ADDR
36107: LD_VAR 0 11
36111: PUSH
36112: FOR_TO
36113: IFFALSE 36233
// begin for j = 1 to array do
36115: LD_ADDR_VAR 0 7
36119: PUSH
36120: DOUBLE
36121: LD_INT 1
36123: DEC
36124: ST_TO_ADDR
36125: LD_VAR 0 1
36129: PUSH
36130: FOR_TO
36131: IFFALSE 36219
// begin k := j + d ;
36133: LD_ADDR_VAR 0 8
36137: PUSH
36138: LD_VAR 0 7
36142: PUSH
36143: LD_VAR 0 9
36147: PLUS
36148: ST_TO_ADDR
// if k > array then
36149: LD_VAR 0 8
36153: PUSH
36154: LD_VAR 0 1
36158: GREATER
36159: IFFALSE 36169
// k := 1 ;
36161: LD_ADDR_VAR 0 8
36165: PUSH
36166: LD_INT 1
36168: ST_TO_ADDR
// if not k then
36169: LD_VAR 0 8
36173: NOT
36174: IFFALSE 36186
// k := array ;
36176: LD_ADDR_VAR 0 8
36180: PUSH
36181: LD_VAR 0 1
36185: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
36186: LD_ADDR_VAR 0 10
36190: PUSH
36191: LD_VAR 0 10
36195: PPUSH
36196: LD_VAR 0 8
36200: PPUSH
36201: LD_VAR 0 1
36205: PUSH
36206: LD_VAR 0 7
36210: ARRAY
36211: PPUSH
36212: CALL_OW 1
36216: ST_TO_ADDR
// end ;
36217: GO 36130
36219: POP
36220: POP
// array := tmp ;
36221: LD_ADDR_VAR 0 1
36225: PUSH
36226: LD_VAR 0 10
36230: ST_TO_ADDR
// end ;
36231: GO 36112
36233: POP
36234: POP
// result := array ;
36235: LD_ADDR_VAR 0 5
36239: PUSH
36240: LD_VAR 0 1
36244: ST_TO_ADDR
// end ;
36245: LD_VAR 0 5
36249: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
36250: LD_INT 0
36252: PPUSH
36253: PPUSH
// result := 0 ;
36254: LD_ADDR_VAR 0 3
36258: PUSH
36259: LD_INT 0
36261: ST_TO_ADDR
// if not array or not value in array then
36262: LD_VAR 0 1
36266: NOT
36267: PUSH
36268: LD_VAR 0 2
36272: PUSH
36273: LD_VAR 0 1
36277: IN
36278: NOT
36279: OR
36280: IFFALSE 36284
// exit ;
36282: GO 36338
// for i = 1 to array do
36284: LD_ADDR_VAR 0 4
36288: PUSH
36289: DOUBLE
36290: LD_INT 1
36292: DEC
36293: ST_TO_ADDR
36294: LD_VAR 0 1
36298: PUSH
36299: FOR_TO
36300: IFFALSE 36336
// if value = array [ i ] then
36302: LD_VAR 0 2
36306: PUSH
36307: LD_VAR 0 1
36311: PUSH
36312: LD_VAR 0 4
36316: ARRAY
36317: EQUAL
36318: IFFALSE 36334
// begin result := i ;
36320: LD_ADDR_VAR 0 3
36324: PUSH
36325: LD_VAR 0 4
36329: ST_TO_ADDR
// exit ;
36330: POP
36331: POP
36332: GO 36338
// end ;
36334: GO 36299
36336: POP
36337: POP
// end ;
36338: LD_VAR 0 3
36342: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
36343: LD_INT 0
36345: PPUSH
// vc_chassis := chassis ;
36346: LD_ADDR_OWVAR 37
36350: PUSH
36351: LD_VAR 0 1
36355: ST_TO_ADDR
// vc_engine := engine ;
36356: LD_ADDR_OWVAR 39
36360: PUSH
36361: LD_VAR 0 2
36365: ST_TO_ADDR
// vc_control := control ;
36366: LD_ADDR_OWVAR 38
36370: PUSH
36371: LD_VAR 0 3
36375: ST_TO_ADDR
// vc_weapon := weapon ;
36376: LD_ADDR_OWVAR 40
36380: PUSH
36381: LD_VAR 0 4
36385: ST_TO_ADDR
// vc_fuel_battery := fuel ;
36386: LD_ADDR_OWVAR 41
36390: PUSH
36391: LD_VAR 0 5
36395: ST_TO_ADDR
// end ;
36396: LD_VAR 0 6
36400: RET
// export function WantPlant ( unit ) ; var task ; begin
36401: LD_INT 0
36403: PPUSH
36404: PPUSH
// result := false ;
36405: LD_ADDR_VAR 0 2
36409: PUSH
36410: LD_INT 0
36412: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
36413: LD_ADDR_VAR 0 3
36417: PUSH
36418: LD_VAR 0 1
36422: PPUSH
36423: CALL_OW 437
36427: ST_TO_ADDR
// if task then
36428: LD_VAR 0 3
36432: IFFALSE 36460
// if task [ 1 ] [ 1 ] = p then
36434: LD_VAR 0 3
36438: PUSH
36439: LD_INT 1
36441: ARRAY
36442: PUSH
36443: LD_INT 1
36445: ARRAY
36446: PUSH
36447: LD_STRING p
36449: EQUAL
36450: IFFALSE 36460
// result := true ;
36452: LD_ADDR_VAR 0 2
36456: PUSH
36457: LD_INT 1
36459: ST_TO_ADDR
// end ;
36460: LD_VAR 0 2
36464: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
36465: LD_INT 0
36467: PPUSH
36468: PPUSH
36469: PPUSH
36470: PPUSH
// if pos < 1 then
36471: LD_VAR 0 2
36475: PUSH
36476: LD_INT 1
36478: LESS
36479: IFFALSE 36483
// exit ;
36481: GO 36786
// if pos = 1 then
36483: LD_VAR 0 2
36487: PUSH
36488: LD_INT 1
36490: EQUAL
36491: IFFALSE 36524
// result := Replace ( arr , pos [ 1 ] , value ) else
36493: LD_ADDR_VAR 0 4
36497: PUSH
36498: LD_VAR 0 1
36502: PPUSH
36503: LD_VAR 0 2
36507: PUSH
36508: LD_INT 1
36510: ARRAY
36511: PPUSH
36512: LD_VAR 0 3
36516: PPUSH
36517: CALL_OW 1
36521: ST_TO_ADDR
36522: GO 36786
// begin tmp := arr ;
36524: LD_ADDR_VAR 0 6
36528: PUSH
36529: LD_VAR 0 1
36533: ST_TO_ADDR
// s_arr := [ tmp ] ;
36534: LD_ADDR_VAR 0 7
36538: PUSH
36539: LD_VAR 0 6
36543: PUSH
36544: EMPTY
36545: LIST
36546: ST_TO_ADDR
// for i = 1 to pos - 1 do
36547: LD_ADDR_VAR 0 5
36551: PUSH
36552: DOUBLE
36553: LD_INT 1
36555: DEC
36556: ST_TO_ADDR
36557: LD_VAR 0 2
36561: PUSH
36562: LD_INT 1
36564: MINUS
36565: PUSH
36566: FOR_TO
36567: IFFALSE 36612
// begin tmp := tmp [ pos [ i ] ] ;
36569: LD_ADDR_VAR 0 6
36573: PUSH
36574: LD_VAR 0 6
36578: PUSH
36579: LD_VAR 0 2
36583: PUSH
36584: LD_VAR 0 5
36588: ARRAY
36589: ARRAY
36590: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
36591: LD_ADDR_VAR 0 7
36595: PUSH
36596: LD_VAR 0 7
36600: PUSH
36601: LD_VAR 0 6
36605: PUSH
36606: EMPTY
36607: LIST
36608: ADD
36609: ST_TO_ADDR
// end ;
36610: GO 36566
36612: POP
36613: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
36614: LD_ADDR_VAR 0 6
36618: PUSH
36619: LD_VAR 0 6
36623: PPUSH
36624: LD_VAR 0 2
36628: PUSH
36629: LD_VAR 0 2
36633: ARRAY
36634: PPUSH
36635: LD_VAR 0 3
36639: PPUSH
36640: CALL_OW 1
36644: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
36645: LD_ADDR_VAR 0 7
36649: PUSH
36650: LD_VAR 0 7
36654: PPUSH
36655: LD_VAR 0 7
36659: PPUSH
36660: LD_VAR 0 6
36664: PPUSH
36665: CALL_OW 1
36669: ST_TO_ADDR
// for i = s_arr downto 2 do
36670: LD_ADDR_VAR 0 5
36674: PUSH
36675: DOUBLE
36676: LD_VAR 0 7
36680: INC
36681: ST_TO_ADDR
36682: LD_INT 2
36684: PUSH
36685: FOR_DOWNTO
36686: IFFALSE 36770
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
36688: LD_ADDR_VAR 0 6
36692: PUSH
36693: LD_VAR 0 7
36697: PUSH
36698: LD_VAR 0 5
36702: PUSH
36703: LD_INT 1
36705: MINUS
36706: ARRAY
36707: PPUSH
36708: LD_VAR 0 2
36712: PUSH
36713: LD_VAR 0 5
36717: PUSH
36718: LD_INT 1
36720: MINUS
36721: ARRAY
36722: PPUSH
36723: LD_VAR 0 7
36727: PUSH
36728: LD_VAR 0 5
36732: ARRAY
36733: PPUSH
36734: CALL_OW 1
36738: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
36739: LD_ADDR_VAR 0 7
36743: PUSH
36744: LD_VAR 0 7
36748: PPUSH
36749: LD_VAR 0 5
36753: PUSH
36754: LD_INT 1
36756: MINUS
36757: PPUSH
36758: LD_VAR 0 6
36762: PPUSH
36763: CALL_OW 1
36767: ST_TO_ADDR
// end ;
36768: GO 36685
36770: POP
36771: POP
// result := s_arr [ 1 ] ;
36772: LD_ADDR_VAR 0 4
36776: PUSH
36777: LD_VAR 0 7
36781: PUSH
36782: LD_INT 1
36784: ARRAY
36785: ST_TO_ADDR
// end ; end ;
36786: LD_VAR 0 4
36790: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
36791: LD_INT 0
36793: PPUSH
36794: PPUSH
// if not list then
36795: LD_VAR 0 1
36799: NOT
36800: IFFALSE 36804
// exit ;
36802: GO 36895
// i := list [ pos1 ] ;
36804: LD_ADDR_VAR 0 5
36808: PUSH
36809: LD_VAR 0 1
36813: PUSH
36814: LD_VAR 0 2
36818: ARRAY
36819: ST_TO_ADDR
// if not i then
36820: LD_VAR 0 5
36824: NOT
36825: IFFALSE 36829
// exit ;
36827: GO 36895
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
36829: LD_ADDR_VAR 0 1
36833: PUSH
36834: LD_VAR 0 1
36838: PPUSH
36839: LD_VAR 0 2
36843: PPUSH
36844: LD_VAR 0 1
36848: PUSH
36849: LD_VAR 0 3
36853: ARRAY
36854: PPUSH
36855: CALL_OW 1
36859: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
36860: LD_ADDR_VAR 0 1
36864: PUSH
36865: LD_VAR 0 1
36869: PPUSH
36870: LD_VAR 0 3
36874: PPUSH
36875: LD_VAR 0 5
36879: PPUSH
36880: CALL_OW 1
36884: ST_TO_ADDR
// result := list ;
36885: LD_ADDR_VAR 0 4
36889: PUSH
36890: LD_VAR 0 1
36894: ST_TO_ADDR
// end ;
36895: LD_VAR 0 4
36899: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
36900: LD_INT 0
36902: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
36903: LD_ADDR_VAR 0 5
36907: PUSH
36908: LD_VAR 0 1
36912: PPUSH
36913: CALL_OW 250
36917: PPUSH
36918: LD_VAR 0 1
36922: PPUSH
36923: CALL_OW 251
36927: PPUSH
36928: LD_VAR 0 2
36932: PPUSH
36933: LD_VAR 0 3
36937: PPUSH
36938: LD_VAR 0 4
36942: PPUSH
36943: CALL 36953 0 5
36947: ST_TO_ADDR
// end ;
36948: LD_VAR 0 5
36952: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
36953: LD_INT 0
36955: PPUSH
36956: PPUSH
36957: PPUSH
36958: PPUSH
// if not list then
36959: LD_VAR 0 3
36963: NOT
36964: IFFALSE 36968
// exit ;
36966: GO 37356
// result := [ ] ;
36968: LD_ADDR_VAR 0 6
36972: PUSH
36973: EMPTY
36974: ST_TO_ADDR
// for i in list do
36975: LD_ADDR_VAR 0 7
36979: PUSH
36980: LD_VAR 0 3
36984: PUSH
36985: FOR_IN
36986: IFFALSE 37188
// begin tmp := GetDistUnitXY ( i , x , y ) ;
36988: LD_ADDR_VAR 0 9
36992: PUSH
36993: LD_VAR 0 7
36997: PPUSH
36998: LD_VAR 0 1
37002: PPUSH
37003: LD_VAR 0 2
37007: PPUSH
37008: CALL_OW 297
37012: ST_TO_ADDR
// if not result then
37013: LD_VAR 0 6
37017: NOT
37018: IFFALSE 37044
// result := [ [ i , tmp ] ] else
37020: LD_ADDR_VAR 0 6
37024: PUSH
37025: LD_VAR 0 7
37029: PUSH
37030: LD_VAR 0 9
37034: PUSH
37035: EMPTY
37036: LIST
37037: LIST
37038: PUSH
37039: EMPTY
37040: LIST
37041: ST_TO_ADDR
37042: GO 37186
// begin if result [ result ] [ 2 ] < tmp then
37044: LD_VAR 0 6
37048: PUSH
37049: LD_VAR 0 6
37053: ARRAY
37054: PUSH
37055: LD_INT 2
37057: ARRAY
37058: PUSH
37059: LD_VAR 0 9
37063: LESS
37064: IFFALSE 37106
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
37066: LD_ADDR_VAR 0 6
37070: PUSH
37071: LD_VAR 0 6
37075: PPUSH
37076: LD_VAR 0 6
37080: PUSH
37081: LD_INT 1
37083: PLUS
37084: PPUSH
37085: LD_VAR 0 7
37089: PUSH
37090: LD_VAR 0 9
37094: PUSH
37095: EMPTY
37096: LIST
37097: LIST
37098: PPUSH
37099: CALL_OW 2
37103: ST_TO_ADDR
37104: GO 37186
// for j = 1 to result do
37106: LD_ADDR_VAR 0 8
37110: PUSH
37111: DOUBLE
37112: LD_INT 1
37114: DEC
37115: ST_TO_ADDR
37116: LD_VAR 0 6
37120: PUSH
37121: FOR_TO
37122: IFFALSE 37184
// begin if tmp < result [ j ] [ 2 ] then
37124: LD_VAR 0 9
37128: PUSH
37129: LD_VAR 0 6
37133: PUSH
37134: LD_VAR 0 8
37138: ARRAY
37139: PUSH
37140: LD_INT 2
37142: ARRAY
37143: LESS
37144: IFFALSE 37182
// begin result := Insert ( result , j , [ i , tmp ] ) ;
37146: LD_ADDR_VAR 0 6
37150: PUSH
37151: LD_VAR 0 6
37155: PPUSH
37156: LD_VAR 0 8
37160: PPUSH
37161: LD_VAR 0 7
37165: PUSH
37166: LD_VAR 0 9
37170: PUSH
37171: EMPTY
37172: LIST
37173: LIST
37174: PPUSH
37175: CALL_OW 2
37179: ST_TO_ADDR
// break ;
37180: GO 37184
// end ; end ;
37182: GO 37121
37184: POP
37185: POP
// end ; end ;
37186: GO 36985
37188: POP
37189: POP
// if result and not asc then
37190: LD_VAR 0 6
37194: PUSH
37195: LD_VAR 0 4
37199: NOT
37200: AND
37201: IFFALSE 37276
// begin tmp := result ;
37203: LD_ADDR_VAR 0 9
37207: PUSH
37208: LD_VAR 0 6
37212: ST_TO_ADDR
// for i = tmp downto 1 do
37213: LD_ADDR_VAR 0 7
37217: PUSH
37218: DOUBLE
37219: LD_VAR 0 9
37223: INC
37224: ST_TO_ADDR
37225: LD_INT 1
37227: PUSH
37228: FOR_DOWNTO
37229: IFFALSE 37274
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
37231: LD_ADDR_VAR 0 6
37235: PUSH
37236: LD_VAR 0 6
37240: PPUSH
37241: LD_VAR 0 9
37245: PUSH
37246: LD_VAR 0 7
37250: MINUS
37251: PUSH
37252: LD_INT 1
37254: PLUS
37255: PPUSH
37256: LD_VAR 0 9
37260: PUSH
37261: LD_VAR 0 7
37265: ARRAY
37266: PPUSH
37267: CALL_OW 1
37271: ST_TO_ADDR
37272: GO 37228
37274: POP
37275: POP
// end ; tmp := [ ] ;
37276: LD_ADDR_VAR 0 9
37280: PUSH
37281: EMPTY
37282: ST_TO_ADDR
// if mode then
37283: LD_VAR 0 5
37287: IFFALSE 37356
// begin for i = 1 to result do
37289: LD_ADDR_VAR 0 7
37293: PUSH
37294: DOUBLE
37295: LD_INT 1
37297: DEC
37298: ST_TO_ADDR
37299: LD_VAR 0 6
37303: PUSH
37304: FOR_TO
37305: IFFALSE 37344
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
37307: LD_ADDR_VAR 0 9
37311: PUSH
37312: LD_VAR 0 9
37316: PPUSH
37317: LD_VAR 0 7
37321: PPUSH
37322: LD_VAR 0 6
37326: PUSH
37327: LD_VAR 0 7
37331: ARRAY
37332: PUSH
37333: LD_INT 1
37335: ARRAY
37336: PPUSH
37337: CALL_OW 1
37341: ST_TO_ADDR
37342: GO 37304
37344: POP
37345: POP
// result := tmp ;
37346: LD_ADDR_VAR 0 6
37350: PUSH
37351: LD_VAR 0 9
37355: ST_TO_ADDR
// end ; end ;
37356: LD_VAR 0 6
37360: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
37361: LD_INT 0
37363: PPUSH
37364: PPUSH
37365: PPUSH
37366: PPUSH
37367: PPUSH
37368: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
37369: LD_ADDR_VAR 0 5
37373: PUSH
37374: LD_INT 0
37376: PUSH
37377: LD_INT 0
37379: PUSH
37380: LD_INT 0
37382: PUSH
37383: EMPTY
37384: PUSH
37385: EMPTY
37386: LIST
37387: LIST
37388: LIST
37389: LIST
37390: ST_TO_ADDR
// if not x or not y then
37391: LD_VAR 0 2
37395: NOT
37396: PUSH
37397: LD_VAR 0 3
37401: NOT
37402: OR
37403: IFFALSE 37407
// exit ;
37405: GO 39059
// if not range then
37407: LD_VAR 0 4
37411: NOT
37412: IFFALSE 37422
// range := 10 ;
37414: LD_ADDR_VAR 0 4
37418: PUSH
37419: LD_INT 10
37421: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37422: LD_ADDR_VAR 0 8
37426: PUSH
37427: LD_INT 81
37429: PUSH
37430: LD_VAR 0 1
37434: PUSH
37435: EMPTY
37436: LIST
37437: LIST
37438: PUSH
37439: LD_INT 92
37441: PUSH
37442: LD_VAR 0 2
37446: PUSH
37447: LD_VAR 0 3
37451: PUSH
37452: LD_VAR 0 4
37456: PUSH
37457: EMPTY
37458: LIST
37459: LIST
37460: LIST
37461: LIST
37462: PUSH
37463: LD_INT 3
37465: PUSH
37466: LD_INT 21
37468: PUSH
37469: LD_INT 3
37471: PUSH
37472: EMPTY
37473: LIST
37474: LIST
37475: PUSH
37476: EMPTY
37477: LIST
37478: LIST
37479: PUSH
37480: EMPTY
37481: LIST
37482: LIST
37483: LIST
37484: PPUSH
37485: CALL_OW 69
37489: ST_TO_ADDR
// if not tmp then
37490: LD_VAR 0 8
37494: NOT
37495: IFFALSE 37499
// exit ;
37497: GO 39059
// for i in tmp do
37499: LD_ADDR_VAR 0 6
37503: PUSH
37504: LD_VAR 0 8
37508: PUSH
37509: FOR_IN
37510: IFFALSE 39034
// begin points := [ 0 , 0 , 0 ] ;
37512: LD_ADDR_VAR 0 9
37516: PUSH
37517: LD_INT 0
37519: PUSH
37520: LD_INT 0
37522: PUSH
37523: LD_INT 0
37525: PUSH
37526: EMPTY
37527: LIST
37528: LIST
37529: LIST
37530: ST_TO_ADDR
// bpoints := 1 ;
37531: LD_ADDR_VAR 0 10
37535: PUSH
37536: LD_INT 1
37538: ST_TO_ADDR
// case GetType ( i ) of unit_human :
37539: LD_VAR 0 6
37543: PPUSH
37544: CALL_OW 247
37548: PUSH
37549: LD_INT 1
37551: DOUBLE
37552: EQUAL
37553: IFTRUE 37557
37555: GO 38135
37557: POP
// begin if GetClass ( i ) = 1 then
37558: LD_VAR 0 6
37562: PPUSH
37563: CALL_OW 257
37567: PUSH
37568: LD_INT 1
37570: EQUAL
37571: IFFALSE 37592
// points := [ 10 , 5 , 3 ] ;
37573: LD_ADDR_VAR 0 9
37577: PUSH
37578: LD_INT 10
37580: PUSH
37581: LD_INT 5
37583: PUSH
37584: LD_INT 3
37586: PUSH
37587: EMPTY
37588: LIST
37589: LIST
37590: LIST
37591: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
37592: LD_VAR 0 6
37596: PPUSH
37597: CALL_OW 257
37601: PUSH
37602: LD_INT 2
37604: PUSH
37605: LD_INT 3
37607: PUSH
37608: LD_INT 4
37610: PUSH
37611: EMPTY
37612: LIST
37613: LIST
37614: LIST
37615: IN
37616: IFFALSE 37637
// points := [ 3 , 2 , 1 ] ;
37618: LD_ADDR_VAR 0 9
37622: PUSH
37623: LD_INT 3
37625: PUSH
37626: LD_INT 2
37628: PUSH
37629: LD_INT 1
37631: PUSH
37632: EMPTY
37633: LIST
37634: LIST
37635: LIST
37636: ST_TO_ADDR
// if GetClass ( i ) = 5 then
37637: LD_VAR 0 6
37641: PPUSH
37642: CALL_OW 257
37646: PUSH
37647: LD_INT 5
37649: EQUAL
37650: IFFALSE 37671
// points := [ 130 , 5 , 2 ] ;
37652: LD_ADDR_VAR 0 9
37656: PUSH
37657: LD_INT 130
37659: PUSH
37660: LD_INT 5
37662: PUSH
37663: LD_INT 2
37665: PUSH
37666: EMPTY
37667: LIST
37668: LIST
37669: LIST
37670: ST_TO_ADDR
// if GetClass ( i ) = 8 then
37671: LD_VAR 0 6
37675: PPUSH
37676: CALL_OW 257
37680: PUSH
37681: LD_INT 8
37683: EQUAL
37684: IFFALSE 37705
// points := [ 35 , 35 , 30 ] ;
37686: LD_ADDR_VAR 0 9
37690: PUSH
37691: LD_INT 35
37693: PUSH
37694: LD_INT 35
37696: PUSH
37697: LD_INT 30
37699: PUSH
37700: EMPTY
37701: LIST
37702: LIST
37703: LIST
37704: ST_TO_ADDR
// if GetClass ( i ) = 9 then
37705: LD_VAR 0 6
37709: PPUSH
37710: CALL_OW 257
37714: PUSH
37715: LD_INT 9
37717: EQUAL
37718: IFFALSE 37739
// points := [ 20 , 55 , 40 ] ;
37720: LD_ADDR_VAR 0 9
37724: PUSH
37725: LD_INT 20
37727: PUSH
37728: LD_INT 55
37730: PUSH
37731: LD_INT 40
37733: PUSH
37734: EMPTY
37735: LIST
37736: LIST
37737: LIST
37738: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
37739: LD_VAR 0 6
37743: PPUSH
37744: CALL_OW 257
37748: PUSH
37749: LD_INT 12
37751: PUSH
37752: LD_INT 16
37754: PUSH
37755: EMPTY
37756: LIST
37757: LIST
37758: IN
37759: IFFALSE 37780
// points := [ 5 , 3 , 2 ] ;
37761: LD_ADDR_VAR 0 9
37765: PUSH
37766: LD_INT 5
37768: PUSH
37769: LD_INT 3
37771: PUSH
37772: LD_INT 2
37774: PUSH
37775: EMPTY
37776: LIST
37777: LIST
37778: LIST
37779: ST_TO_ADDR
// if GetClass ( i ) = 17 then
37780: LD_VAR 0 6
37784: PPUSH
37785: CALL_OW 257
37789: PUSH
37790: LD_INT 17
37792: EQUAL
37793: IFFALSE 37814
// points := [ 100 , 50 , 75 ] ;
37795: LD_ADDR_VAR 0 9
37799: PUSH
37800: LD_INT 100
37802: PUSH
37803: LD_INT 50
37805: PUSH
37806: LD_INT 75
37808: PUSH
37809: EMPTY
37810: LIST
37811: LIST
37812: LIST
37813: ST_TO_ADDR
// if GetClass ( i ) = 15 then
37814: LD_VAR 0 6
37818: PPUSH
37819: CALL_OW 257
37823: PUSH
37824: LD_INT 15
37826: EQUAL
37827: IFFALSE 37848
// points := [ 10 , 5 , 3 ] ;
37829: LD_ADDR_VAR 0 9
37833: PUSH
37834: LD_INT 10
37836: PUSH
37837: LD_INT 5
37839: PUSH
37840: LD_INT 3
37842: PUSH
37843: EMPTY
37844: LIST
37845: LIST
37846: LIST
37847: ST_TO_ADDR
// if GetClass ( i ) = 14 then
37848: LD_VAR 0 6
37852: PPUSH
37853: CALL_OW 257
37857: PUSH
37858: LD_INT 14
37860: EQUAL
37861: IFFALSE 37882
// points := [ 10 , 0 , 0 ] ;
37863: LD_ADDR_VAR 0 9
37867: PUSH
37868: LD_INT 10
37870: PUSH
37871: LD_INT 0
37873: PUSH
37874: LD_INT 0
37876: PUSH
37877: EMPTY
37878: LIST
37879: LIST
37880: LIST
37881: ST_TO_ADDR
// if GetClass ( i ) = 11 then
37882: LD_VAR 0 6
37886: PPUSH
37887: CALL_OW 257
37891: PUSH
37892: LD_INT 11
37894: EQUAL
37895: IFFALSE 37916
// points := [ 30 , 10 , 5 ] ;
37897: LD_ADDR_VAR 0 9
37901: PUSH
37902: LD_INT 30
37904: PUSH
37905: LD_INT 10
37907: PUSH
37908: LD_INT 5
37910: PUSH
37911: EMPTY
37912: LIST
37913: LIST
37914: LIST
37915: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
37916: LD_VAR 0 1
37920: PPUSH
37921: LD_INT 5
37923: PPUSH
37924: CALL_OW 321
37928: PUSH
37929: LD_INT 2
37931: EQUAL
37932: IFFALSE 37949
// bpoints := bpoints * 1.8 ;
37934: LD_ADDR_VAR 0 10
37938: PUSH
37939: LD_VAR 0 10
37943: PUSH
37944: LD_REAL  1.80000000000000E+0000
37947: MUL
37948: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
37949: LD_VAR 0 6
37953: PPUSH
37954: CALL_OW 257
37958: PUSH
37959: LD_INT 1
37961: PUSH
37962: LD_INT 2
37964: PUSH
37965: LD_INT 3
37967: PUSH
37968: LD_INT 4
37970: PUSH
37971: EMPTY
37972: LIST
37973: LIST
37974: LIST
37975: LIST
37976: IN
37977: PUSH
37978: LD_VAR 0 1
37982: PPUSH
37983: LD_INT 51
37985: PPUSH
37986: CALL_OW 321
37990: PUSH
37991: LD_INT 2
37993: EQUAL
37994: AND
37995: IFFALSE 38012
// bpoints := bpoints * 1.2 ;
37997: LD_ADDR_VAR 0 10
38001: PUSH
38002: LD_VAR 0 10
38006: PUSH
38007: LD_REAL  1.20000000000000E+0000
38010: MUL
38011: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
38012: LD_VAR 0 6
38016: PPUSH
38017: CALL_OW 257
38021: PUSH
38022: LD_INT 5
38024: PUSH
38025: LD_INT 7
38027: PUSH
38028: LD_INT 9
38030: PUSH
38031: EMPTY
38032: LIST
38033: LIST
38034: LIST
38035: IN
38036: PUSH
38037: LD_VAR 0 1
38041: PPUSH
38042: LD_INT 52
38044: PPUSH
38045: CALL_OW 321
38049: PUSH
38050: LD_INT 2
38052: EQUAL
38053: AND
38054: IFFALSE 38071
// bpoints := bpoints * 1.5 ;
38056: LD_ADDR_VAR 0 10
38060: PUSH
38061: LD_VAR 0 10
38065: PUSH
38066: LD_REAL  1.50000000000000E+0000
38069: MUL
38070: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
38071: LD_VAR 0 1
38075: PPUSH
38076: LD_INT 66
38078: PPUSH
38079: CALL_OW 321
38083: PUSH
38084: LD_INT 2
38086: EQUAL
38087: IFFALSE 38104
// bpoints := bpoints * 1.1 ;
38089: LD_ADDR_VAR 0 10
38093: PUSH
38094: LD_VAR 0 10
38098: PUSH
38099: LD_REAL  1.10000000000000E+0000
38102: MUL
38103: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
38104: LD_ADDR_VAR 0 10
38108: PUSH
38109: LD_VAR 0 10
38113: PUSH
38114: LD_VAR 0 6
38118: PPUSH
38119: LD_INT 1
38121: PPUSH
38122: CALL_OW 259
38126: PUSH
38127: LD_REAL  1.15000000000000E+0000
38130: MUL
38131: MUL
38132: ST_TO_ADDR
// end ; unit_vehicle :
38133: GO 38963
38135: LD_INT 2
38137: DOUBLE
38138: EQUAL
38139: IFTRUE 38143
38141: GO 38951
38143: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
38144: LD_VAR 0 6
38148: PPUSH
38149: CALL_OW 264
38153: PUSH
38154: LD_INT 2
38156: PUSH
38157: LD_INT 42
38159: PUSH
38160: LD_INT 24
38162: PUSH
38163: EMPTY
38164: LIST
38165: LIST
38166: LIST
38167: IN
38168: IFFALSE 38189
// points := [ 25 , 5 , 3 ] ;
38170: LD_ADDR_VAR 0 9
38174: PUSH
38175: LD_INT 25
38177: PUSH
38178: LD_INT 5
38180: PUSH
38181: LD_INT 3
38183: PUSH
38184: EMPTY
38185: LIST
38186: LIST
38187: LIST
38188: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
38189: LD_VAR 0 6
38193: PPUSH
38194: CALL_OW 264
38198: PUSH
38199: LD_INT 4
38201: PUSH
38202: LD_INT 43
38204: PUSH
38205: LD_INT 25
38207: PUSH
38208: EMPTY
38209: LIST
38210: LIST
38211: LIST
38212: IN
38213: IFFALSE 38234
// points := [ 40 , 15 , 5 ] ;
38215: LD_ADDR_VAR 0 9
38219: PUSH
38220: LD_INT 40
38222: PUSH
38223: LD_INT 15
38225: PUSH
38226: LD_INT 5
38228: PUSH
38229: EMPTY
38230: LIST
38231: LIST
38232: LIST
38233: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
38234: LD_VAR 0 6
38238: PPUSH
38239: CALL_OW 264
38243: PUSH
38244: LD_INT 3
38246: PUSH
38247: LD_INT 23
38249: PUSH
38250: EMPTY
38251: LIST
38252: LIST
38253: IN
38254: IFFALSE 38275
// points := [ 7 , 25 , 8 ] ;
38256: LD_ADDR_VAR 0 9
38260: PUSH
38261: LD_INT 7
38263: PUSH
38264: LD_INT 25
38266: PUSH
38267: LD_INT 8
38269: PUSH
38270: EMPTY
38271: LIST
38272: LIST
38273: LIST
38274: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
38275: LD_VAR 0 6
38279: PPUSH
38280: CALL_OW 264
38284: PUSH
38285: LD_INT 5
38287: PUSH
38288: LD_INT 27
38290: PUSH
38291: LD_INT 44
38293: PUSH
38294: EMPTY
38295: LIST
38296: LIST
38297: LIST
38298: IN
38299: IFFALSE 38320
// points := [ 14 , 50 , 16 ] ;
38301: LD_ADDR_VAR 0 9
38305: PUSH
38306: LD_INT 14
38308: PUSH
38309: LD_INT 50
38311: PUSH
38312: LD_INT 16
38314: PUSH
38315: EMPTY
38316: LIST
38317: LIST
38318: LIST
38319: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
38320: LD_VAR 0 6
38324: PPUSH
38325: CALL_OW 264
38329: PUSH
38330: LD_INT 6
38332: PUSH
38333: LD_INT 46
38335: PUSH
38336: EMPTY
38337: LIST
38338: LIST
38339: IN
38340: IFFALSE 38361
// points := [ 32 , 120 , 70 ] ;
38342: LD_ADDR_VAR 0 9
38346: PUSH
38347: LD_INT 32
38349: PUSH
38350: LD_INT 120
38352: PUSH
38353: LD_INT 70
38355: PUSH
38356: EMPTY
38357: LIST
38358: LIST
38359: LIST
38360: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
38361: LD_VAR 0 6
38365: PPUSH
38366: CALL_OW 264
38370: PUSH
38371: LD_INT 7
38373: PUSH
38374: LD_INT 28
38376: PUSH
38377: LD_INT 45
38379: PUSH
38380: LD_EXP 26
38384: PUSH
38385: EMPTY
38386: LIST
38387: LIST
38388: LIST
38389: LIST
38390: IN
38391: IFFALSE 38412
// points := [ 35 , 20 , 45 ] ;
38393: LD_ADDR_VAR 0 9
38397: PUSH
38398: LD_INT 35
38400: PUSH
38401: LD_INT 20
38403: PUSH
38404: LD_INT 45
38406: PUSH
38407: EMPTY
38408: LIST
38409: LIST
38410: LIST
38411: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
38412: LD_VAR 0 6
38416: PPUSH
38417: CALL_OW 264
38421: PUSH
38422: LD_INT 47
38424: PUSH
38425: EMPTY
38426: LIST
38427: IN
38428: IFFALSE 38449
// points := [ 67 , 45 , 75 ] ;
38430: LD_ADDR_VAR 0 9
38434: PUSH
38435: LD_INT 67
38437: PUSH
38438: LD_INT 45
38440: PUSH
38441: LD_INT 75
38443: PUSH
38444: EMPTY
38445: LIST
38446: LIST
38447: LIST
38448: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
38449: LD_VAR 0 6
38453: PPUSH
38454: CALL_OW 264
38458: PUSH
38459: LD_INT 26
38461: PUSH
38462: EMPTY
38463: LIST
38464: IN
38465: IFFALSE 38486
// points := [ 120 , 30 , 80 ] ;
38467: LD_ADDR_VAR 0 9
38471: PUSH
38472: LD_INT 120
38474: PUSH
38475: LD_INT 30
38477: PUSH
38478: LD_INT 80
38480: PUSH
38481: EMPTY
38482: LIST
38483: LIST
38484: LIST
38485: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
38486: LD_VAR 0 6
38490: PPUSH
38491: CALL_OW 264
38495: PUSH
38496: LD_INT 22
38498: PUSH
38499: EMPTY
38500: LIST
38501: IN
38502: IFFALSE 38523
// points := [ 40 , 1 , 1 ] ;
38504: LD_ADDR_VAR 0 9
38508: PUSH
38509: LD_INT 40
38511: PUSH
38512: LD_INT 1
38514: PUSH
38515: LD_INT 1
38517: PUSH
38518: EMPTY
38519: LIST
38520: LIST
38521: LIST
38522: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
38523: LD_VAR 0 6
38527: PPUSH
38528: CALL_OW 264
38532: PUSH
38533: LD_INT 29
38535: PUSH
38536: EMPTY
38537: LIST
38538: IN
38539: IFFALSE 38560
// points := [ 70 , 200 , 400 ] ;
38541: LD_ADDR_VAR 0 9
38545: PUSH
38546: LD_INT 70
38548: PUSH
38549: LD_INT 200
38551: PUSH
38552: LD_INT 400
38554: PUSH
38555: EMPTY
38556: LIST
38557: LIST
38558: LIST
38559: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
38560: LD_VAR 0 6
38564: PPUSH
38565: CALL_OW 264
38569: PUSH
38570: LD_INT 14
38572: PUSH
38573: LD_INT 53
38575: PUSH
38576: EMPTY
38577: LIST
38578: LIST
38579: IN
38580: IFFALSE 38601
// points := [ 40 , 10 , 20 ] ;
38582: LD_ADDR_VAR 0 9
38586: PUSH
38587: LD_INT 40
38589: PUSH
38590: LD_INT 10
38592: PUSH
38593: LD_INT 20
38595: PUSH
38596: EMPTY
38597: LIST
38598: LIST
38599: LIST
38600: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
38601: LD_VAR 0 6
38605: PPUSH
38606: CALL_OW 264
38610: PUSH
38611: LD_INT 9
38613: PUSH
38614: EMPTY
38615: LIST
38616: IN
38617: IFFALSE 38638
// points := [ 5 , 70 , 20 ] ;
38619: LD_ADDR_VAR 0 9
38623: PUSH
38624: LD_INT 5
38626: PUSH
38627: LD_INT 70
38629: PUSH
38630: LD_INT 20
38632: PUSH
38633: EMPTY
38634: LIST
38635: LIST
38636: LIST
38637: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
38638: LD_VAR 0 6
38642: PPUSH
38643: CALL_OW 264
38647: PUSH
38648: LD_INT 10
38650: PUSH
38651: EMPTY
38652: LIST
38653: IN
38654: IFFALSE 38675
// points := [ 35 , 110 , 70 ] ;
38656: LD_ADDR_VAR 0 9
38660: PUSH
38661: LD_INT 35
38663: PUSH
38664: LD_INT 110
38666: PUSH
38667: LD_INT 70
38669: PUSH
38670: EMPTY
38671: LIST
38672: LIST
38673: LIST
38674: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
38675: LD_VAR 0 6
38679: PPUSH
38680: CALL_OW 265
38684: PUSH
38685: LD_INT 25
38687: EQUAL
38688: IFFALSE 38709
// points := [ 80 , 65 , 100 ] ;
38690: LD_ADDR_VAR 0 9
38694: PUSH
38695: LD_INT 80
38697: PUSH
38698: LD_INT 65
38700: PUSH
38701: LD_INT 100
38703: PUSH
38704: EMPTY
38705: LIST
38706: LIST
38707: LIST
38708: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
38709: LD_VAR 0 6
38713: PPUSH
38714: CALL_OW 263
38718: PUSH
38719: LD_INT 1
38721: EQUAL
38722: IFFALSE 38757
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
38724: LD_ADDR_VAR 0 10
38728: PUSH
38729: LD_VAR 0 10
38733: PUSH
38734: LD_VAR 0 6
38738: PPUSH
38739: CALL_OW 311
38743: PPUSH
38744: LD_INT 3
38746: PPUSH
38747: CALL_OW 259
38751: PUSH
38752: LD_INT 4
38754: MUL
38755: MUL
38756: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
38757: LD_VAR 0 6
38761: PPUSH
38762: CALL_OW 263
38766: PUSH
38767: LD_INT 2
38769: EQUAL
38770: IFFALSE 38821
// begin j := IsControledBy ( i ) ;
38772: LD_ADDR_VAR 0 7
38776: PUSH
38777: LD_VAR 0 6
38781: PPUSH
38782: CALL_OW 312
38786: ST_TO_ADDR
// if j then
38787: LD_VAR 0 7
38791: IFFALSE 38821
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
38793: LD_ADDR_VAR 0 10
38797: PUSH
38798: LD_VAR 0 10
38802: PUSH
38803: LD_VAR 0 7
38807: PPUSH
38808: LD_INT 3
38810: PPUSH
38811: CALL_OW 259
38815: PUSH
38816: LD_INT 3
38818: MUL
38819: MUL
38820: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
38821: LD_VAR 0 6
38825: PPUSH
38826: CALL_OW 264
38830: PUSH
38831: LD_INT 5
38833: PUSH
38834: LD_INT 6
38836: PUSH
38837: LD_INT 46
38839: PUSH
38840: LD_INT 44
38842: PUSH
38843: LD_INT 47
38845: PUSH
38846: LD_INT 45
38848: PUSH
38849: LD_INT 28
38851: PUSH
38852: LD_INT 7
38854: PUSH
38855: LD_INT 27
38857: PUSH
38858: LD_INT 29
38860: PUSH
38861: EMPTY
38862: LIST
38863: LIST
38864: LIST
38865: LIST
38866: LIST
38867: LIST
38868: LIST
38869: LIST
38870: LIST
38871: LIST
38872: IN
38873: PUSH
38874: LD_VAR 0 1
38878: PPUSH
38879: LD_INT 52
38881: PPUSH
38882: CALL_OW 321
38886: PUSH
38887: LD_INT 2
38889: EQUAL
38890: AND
38891: IFFALSE 38908
// bpoints := bpoints * 1.2 ;
38893: LD_ADDR_VAR 0 10
38897: PUSH
38898: LD_VAR 0 10
38902: PUSH
38903: LD_REAL  1.20000000000000E+0000
38906: MUL
38907: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
38908: LD_VAR 0 6
38912: PPUSH
38913: CALL_OW 264
38917: PUSH
38918: LD_INT 6
38920: PUSH
38921: LD_INT 46
38923: PUSH
38924: LD_INT 47
38926: PUSH
38927: EMPTY
38928: LIST
38929: LIST
38930: LIST
38931: IN
38932: IFFALSE 38949
// bpoints := bpoints * 1.2 ;
38934: LD_ADDR_VAR 0 10
38938: PUSH
38939: LD_VAR 0 10
38943: PUSH
38944: LD_REAL  1.20000000000000E+0000
38947: MUL
38948: ST_TO_ADDR
// end ; unit_building :
38949: GO 38963
38951: LD_INT 3
38953: DOUBLE
38954: EQUAL
38955: IFTRUE 38959
38957: GO 38962
38959: POP
// ; end ;
38960: GO 38963
38962: POP
// for j = 1 to 3 do
38963: LD_ADDR_VAR 0 7
38967: PUSH
38968: DOUBLE
38969: LD_INT 1
38971: DEC
38972: ST_TO_ADDR
38973: LD_INT 3
38975: PUSH
38976: FOR_TO
38977: IFFALSE 39030
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
38979: LD_ADDR_VAR 0 5
38983: PUSH
38984: LD_VAR 0 5
38988: PPUSH
38989: LD_VAR 0 7
38993: PPUSH
38994: LD_VAR 0 5
38998: PUSH
38999: LD_VAR 0 7
39003: ARRAY
39004: PUSH
39005: LD_VAR 0 9
39009: PUSH
39010: LD_VAR 0 7
39014: ARRAY
39015: PUSH
39016: LD_VAR 0 10
39020: MUL
39021: PLUS
39022: PPUSH
39023: CALL_OW 1
39027: ST_TO_ADDR
39028: GO 38976
39030: POP
39031: POP
// end ;
39032: GO 37509
39034: POP
39035: POP
// result := Replace ( result , 4 , tmp ) ;
39036: LD_ADDR_VAR 0 5
39040: PUSH
39041: LD_VAR 0 5
39045: PPUSH
39046: LD_INT 4
39048: PPUSH
39049: LD_VAR 0 8
39053: PPUSH
39054: CALL_OW 1
39058: ST_TO_ADDR
// end ;
39059: LD_VAR 0 5
39063: RET
// export function DangerAtRange ( unit , range ) ; begin
39064: LD_INT 0
39066: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
39067: LD_ADDR_VAR 0 3
39071: PUSH
39072: LD_VAR 0 1
39076: PPUSH
39077: CALL_OW 255
39081: PPUSH
39082: LD_VAR 0 1
39086: PPUSH
39087: CALL_OW 250
39091: PPUSH
39092: LD_VAR 0 1
39096: PPUSH
39097: CALL_OW 251
39101: PPUSH
39102: LD_VAR 0 2
39106: PPUSH
39107: CALL 37361 0 4
39111: ST_TO_ADDR
// end ;
39112: LD_VAR 0 3
39116: RET
// export function DangerInArea ( side , area ) ; begin
39117: LD_INT 0
39119: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
39120: LD_ADDR_VAR 0 3
39124: PUSH
39125: LD_VAR 0 2
39129: PPUSH
39130: LD_INT 81
39132: PUSH
39133: LD_VAR 0 1
39137: PUSH
39138: EMPTY
39139: LIST
39140: LIST
39141: PPUSH
39142: CALL_OW 70
39146: ST_TO_ADDR
// end ;
39147: LD_VAR 0 3
39151: RET
// export function IsExtension ( b ) ; begin
39152: LD_INT 0
39154: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
39155: LD_ADDR_VAR 0 2
39159: PUSH
39160: LD_VAR 0 1
39164: PUSH
39165: LD_INT 23
39167: PUSH
39168: LD_INT 20
39170: PUSH
39171: LD_INT 22
39173: PUSH
39174: LD_INT 17
39176: PUSH
39177: LD_INT 24
39179: PUSH
39180: LD_INT 21
39182: PUSH
39183: LD_INT 19
39185: PUSH
39186: LD_INT 16
39188: PUSH
39189: LD_INT 25
39191: PUSH
39192: LD_INT 18
39194: PUSH
39195: EMPTY
39196: LIST
39197: LIST
39198: LIST
39199: LIST
39200: LIST
39201: LIST
39202: LIST
39203: LIST
39204: LIST
39205: LIST
39206: IN
39207: ST_TO_ADDR
// end ;
39208: LD_VAR 0 2
39212: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
39213: LD_INT 0
39215: PPUSH
39216: PPUSH
39217: PPUSH
// result := [ ] ;
39218: LD_ADDR_VAR 0 4
39222: PUSH
39223: EMPTY
39224: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
39225: LD_ADDR_VAR 0 5
39229: PUSH
39230: LD_VAR 0 2
39234: PPUSH
39235: LD_INT 21
39237: PUSH
39238: LD_INT 3
39240: PUSH
39241: EMPTY
39242: LIST
39243: LIST
39244: PPUSH
39245: CALL_OW 70
39249: ST_TO_ADDR
// if not tmp then
39250: LD_VAR 0 5
39254: NOT
39255: IFFALSE 39259
// exit ;
39257: GO 39323
// if checkLink then
39259: LD_VAR 0 3
39263: IFFALSE 39313
// begin for i in tmp do
39265: LD_ADDR_VAR 0 6
39269: PUSH
39270: LD_VAR 0 5
39274: PUSH
39275: FOR_IN
39276: IFFALSE 39311
// if GetBase ( i ) <> base then
39278: LD_VAR 0 6
39282: PPUSH
39283: CALL_OW 274
39287: PUSH
39288: LD_VAR 0 1
39292: NONEQUAL
39293: IFFALSE 39309
// ComLinkToBase ( base , i ) ;
39295: LD_VAR 0 1
39299: PPUSH
39300: LD_VAR 0 6
39304: PPUSH
39305: CALL_OW 169
39309: GO 39275
39311: POP
39312: POP
// end ; result := tmp ;
39313: LD_ADDR_VAR 0 4
39317: PUSH
39318: LD_VAR 0 5
39322: ST_TO_ADDR
// end ;
39323: LD_VAR 0 4
39327: RET
// export function ComComplete ( units , b ) ; var i ; begin
39328: LD_INT 0
39330: PPUSH
39331: PPUSH
// if not units then
39332: LD_VAR 0 1
39336: NOT
39337: IFFALSE 39341
// exit ;
39339: GO 39431
// for i in units do
39341: LD_ADDR_VAR 0 4
39345: PUSH
39346: LD_VAR 0 1
39350: PUSH
39351: FOR_IN
39352: IFFALSE 39429
// if BuildingStatus ( b ) = bs_build then
39354: LD_VAR 0 2
39358: PPUSH
39359: CALL_OW 461
39363: PUSH
39364: LD_INT 1
39366: EQUAL
39367: IFFALSE 39427
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
39369: LD_VAR 0 4
39373: PPUSH
39374: LD_STRING h
39376: PUSH
39377: LD_VAR 0 2
39381: PPUSH
39382: CALL_OW 250
39386: PUSH
39387: LD_VAR 0 2
39391: PPUSH
39392: CALL_OW 251
39396: PUSH
39397: LD_VAR 0 2
39401: PUSH
39402: LD_INT 0
39404: PUSH
39405: LD_INT 0
39407: PUSH
39408: LD_INT 0
39410: PUSH
39411: EMPTY
39412: LIST
39413: LIST
39414: LIST
39415: LIST
39416: LIST
39417: LIST
39418: LIST
39419: PUSH
39420: EMPTY
39421: LIST
39422: PPUSH
39423: CALL_OW 446
39427: GO 39351
39429: POP
39430: POP
// end ;
39431: LD_VAR 0 3
39435: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
39436: LD_INT 0
39438: PPUSH
39439: PPUSH
39440: PPUSH
39441: PPUSH
39442: PPUSH
39443: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
39444: LD_VAR 0 1
39448: NOT
39449: PUSH
39450: LD_VAR 0 1
39454: PPUSH
39455: CALL_OW 263
39459: PUSH
39460: LD_INT 2
39462: NONEQUAL
39463: OR
39464: IFFALSE 39468
// exit ;
39466: GO 39784
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
39468: LD_ADDR_VAR 0 6
39472: PUSH
39473: LD_INT 22
39475: PUSH
39476: LD_VAR 0 1
39480: PPUSH
39481: CALL_OW 255
39485: PUSH
39486: EMPTY
39487: LIST
39488: LIST
39489: PUSH
39490: LD_INT 2
39492: PUSH
39493: LD_INT 30
39495: PUSH
39496: LD_INT 36
39498: PUSH
39499: EMPTY
39500: LIST
39501: LIST
39502: PUSH
39503: LD_INT 34
39505: PUSH
39506: LD_INT 31
39508: PUSH
39509: EMPTY
39510: LIST
39511: LIST
39512: PUSH
39513: EMPTY
39514: LIST
39515: LIST
39516: LIST
39517: PUSH
39518: EMPTY
39519: LIST
39520: LIST
39521: PPUSH
39522: CALL_OW 69
39526: ST_TO_ADDR
// if not tmp then
39527: LD_VAR 0 6
39531: NOT
39532: IFFALSE 39536
// exit ;
39534: GO 39784
// result := [ ] ;
39536: LD_ADDR_VAR 0 2
39540: PUSH
39541: EMPTY
39542: ST_TO_ADDR
// for i in tmp do
39543: LD_ADDR_VAR 0 3
39547: PUSH
39548: LD_VAR 0 6
39552: PUSH
39553: FOR_IN
39554: IFFALSE 39625
// begin t := UnitsInside ( i ) ;
39556: LD_ADDR_VAR 0 4
39560: PUSH
39561: LD_VAR 0 3
39565: PPUSH
39566: CALL_OW 313
39570: ST_TO_ADDR
// if t then
39571: LD_VAR 0 4
39575: IFFALSE 39623
// for j in t do
39577: LD_ADDR_VAR 0 7
39581: PUSH
39582: LD_VAR 0 4
39586: PUSH
39587: FOR_IN
39588: IFFALSE 39621
// result := Replace ( result , result + 1 , j ) ;
39590: LD_ADDR_VAR 0 2
39594: PUSH
39595: LD_VAR 0 2
39599: PPUSH
39600: LD_VAR 0 2
39604: PUSH
39605: LD_INT 1
39607: PLUS
39608: PPUSH
39609: LD_VAR 0 7
39613: PPUSH
39614: CALL_OW 1
39618: ST_TO_ADDR
39619: GO 39587
39621: POP
39622: POP
// end ;
39623: GO 39553
39625: POP
39626: POP
// if not result then
39627: LD_VAR 0 2
39631: NOT
39632: IFFALSE 39636
// exit ;
39634: GO 39784
// mech := result [ 1 ] ;
39636: LD_ADDR_VAR 0 5
39640: PUSH
39641: LD_VAR 0 2
39645: PUSH
39646: LD_INT 1
39648: ARRAY
39649: ST_TO_ADDR
// if result > 1 then
39650: LD_VAR 0 2
39654: PUSH
39655: LD_INT 1
39657: GREATER
39658: IFFALSE 39770
// begin for i = 2 to result do
39660: LD_ADDR_VAR 0 3
39664: PUSH
39665: DOUBLE
39666: LD_INT 2
39668: DEC
39669: ST_TO_ADDR
39670: LD_VAR 0 2
39674: PUSH
39675: FOR_TO
39676: IFFALSE 39768
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
39678: LD_ADDR_VAR 0 4
39682: PUSH
39683: LD_VAR 0 2
39687: PUSH
39688: LD_VAR 0 3
39692: ARRAY
39693: PPUSH
39694: LD_INT 3
39696: PPUSH
39697: CALL_OW 259
39701: PUSH
39702: LD_VAR 0 2
39706: PUSH
39707: LD_VAR 0 3
39711: ARRAY
39712: PPUSH
39713: CALL_OW 432
39717: MINUS
39718: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
39719: LD_VAR 0 4
39723: PUSH
39724: LD_VAR 0 5
39728: PPUSH
39729: LD_INT 3
39731: PPUSH
39732: CALL_OW 259
39736: PUSH
39737: LD_VAR 0 5
39741: PPUSH
39742: CALL_OW 432
39746: MINUS
39747: GREATEREQUAL
39748: IFFALSE 39766
// mech := result [ i ] ;
39750: LD_ADDR_VAR 0 5
39754: PUSH
39755: LD_VAR 0 2
39759: PUSH
39760: LD_VAR 0 3
39764: ARRAY
39765: ST_TO_ADDR
// end ;
39766: GO 39675
39768: POP
39769: POP
// end ; ComLinkTo ( vehicle , mech ) ;
39770: LD_VAR 0 1
39774: PPUSH
39775: LD_VAR 0 5
39779: PPUSH
39780: CALL_OW 135
// end ;
39784: LD_VAR 0 2
39788: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
39789: LD_INT 0
39791: PPUSH
39792: PPUSH
39793: PPUSH
39794: PPUSH
39795: PPUSH
39796: PPUSH
39797: PPUSH
39798: PPUSH
39799: PPUSH
39800: PPUSH
39801: PPUSH
39802: PPUSH
39803: PPUSH
// result := [ ] ;
39804: LD_ADDR_VAR 0 7
39808: PUSH
39809: EMPTY
39810: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
39811: LD_VAR 0 1
39815: PPUSH
39816: CALL_OW 266
39820: PUSH
39821: LD_INT 0
39823: PUSH
39824: LD_INT 1
39826: PUSH
39827: EMPTY
39828: LIST
39829: LIST
39830: IN
39831: NOT
39832: IFFALSE 39836
// exit ;
39834: GO 41470
// if name then
39836: LD_VAR 0 3
39840: IFFALSE 39856
// SetBName ( base_dep , name ) ;
39842: LD_VAR 0 1
39846: PPUSH
39847: LD_VAR 0 3
39851: PPUSH
39852: CALL_OW 500
// base := GetBase ( base_dep ) ;
39856: LD_ADDR_VAR 0 15
39860: PUSH
39861: LD_VAR 0 1
39865: PPUSH
39866: CALL_OW 274
39870: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
39871: LD_ADDR_VAR 0 16
39875: PUSH
39876: LD_VAR 0 1
39880: PPUSH
39881: CALL_OW 255
39885: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
39886: LD_ADDR_VAR 0 17
39890: PUSH
39891: LD_VAR 0 1
39895: PPUSH
39896: CALL_OW 248
39900: ST_TO_ADDR
// if sources then
39901: LD_VAR 0 5
39905: IFFALSE 39952
// for i = 1 to 3 do
39907: LD_ADDR_VAR 0 8
39911: PUSH
39912: DOUBLE
39913: LD_INT 1
39915: DEC
39916: ST_TO_ADDR
39917: LD_INT 3
39919: PUSH
39920: FOR_TO
39921: IFFALSE 39950
// AddResourceType ( base , i , sources [ i ] ) ;
39923: LD_VAR 0 15
39927: PPUSH
39928: LD_VAR 0 8
39932: PPUSH
39933: LD_VAR 0 5
39937: PUSH
39938: LD_VAR 0 8
39942: ARRAY
39943: PPUSH
39944: CALL_OW 276
39948: GO 39920
39950: POP
39951: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
39952: LD_ADDR_VAR 0 18
39956: PUSH
39957: LD_VAR 0 15
39961: PPUSH
39962: LD_VAR 0 2
39966: PPUSH
39967: LD_INT 1
39969: PPUSH
39970: CALL 39213 0 3
39974: ST_TO_ADDR
// InitHc ;
39975: CALL_OW 19
// InitUc ;
39979: CALL_OW 18
// uc_side := side ;
39983: LD_ADDR_OWVAR 20
39987: PUSH
39988: LD_VAR 0 16
39992: ST_TO_ADDR
// uc_nation := nation ;
39993: LD_ADDR_OWVAR 21
39997: PUSH
39998: LD_VAR 0 17
40002: ST_TO_ADDR
// if buildings then
40003: LD_VAR 0 18
40007: IFFALSE 41329
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
40009: LD_ADDR_VAR 0 19
40013: PUSH
40014: LD_VAR 0 18
40018: PPUSH
40019: LD_INT 2
40021: PUSH
40022: LD_INT 30
40024: PUSH
40025: LD_INT 29
40027: PUSH
40028: EMPTY
40029: LIST
40030: LIST
40031: PUSH
40032: LD_INT 30
40034: PUSH
40035: LD_INT 30
40037: PUSH
40038: EMPTY
40039: LIST
40040: LIST
40041: PUSH
40042: EMPTY
40043: LIST
40044: LIST
40045: LIST
40046: PPUSH
40047: CALL_OW 72
40051: ST_TO_ADDR
// if tmp then
40052: LD_VAR 0 19
40056: IFFALSE 40104
// for i in tmp do
40058: LD_ADDR_VAR 0 8
40062: PUSH
40063: LD_VAR 0 19
40067: PUSH
40068: FOR_IN
40069: IFFALSE 40102
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
40071: LD_VAR 0 8
40075: PPUSH
40076: CALL_OW 250
40080: PPUSH
40081: LD_VAR 0 8
40085: PPUSH
40086: CALL_OW 251
40090: PPUSH
40091: LD_VAR 0 16
40095: PPUSH
40096: CALL_OW 441
40100: GO 40068
40102: POP
40103: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
40104: LD_VAR 0 18
40108: PPUSH
40109: LD_INT 2
40111: PUSH
40112: LD_INT 30
40114: PUSH
40115: LD_INT 32
40117: PUSH
40118: EMPTY
40119: LIST
40120: LIST
40121: PUSH
40122: LD_INT 30
40124: PUSH
40125: LD_INT 33
40127: PUSH
40128: EMPTY
40129: LIST
40130: LIST
40131: PUSH
40132: EMPTY
40133: LIST
40134: LIST
40135: LIST
40136: PPUSH
40137: CALL_OW 72
40141: IFFALSE 40229
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
40143: LD_ADDR_VAR 0 8
40147: PUSH
40148: LD_VAR 0 18
40152: PPUSH
40153: LD_INT 2
40155: PUSH
40156: LD_INT 30
40158: PUSH
40159: LD_INT 32
40161: PUSH
40162: EMPTY
40163: LIST
40164: LIST
40165: PUSH
40166: LD_INT 30
40168: PUSH
40169: LD_INT 33
40171: PUSH
40172: EMPTY
40173: LIST
40174: LIST
40175: PUSH
40176: EMPTY
40177: LIST
40178: LIST
40179: LIST
40180: PPUSH
40181: CALL_OW 72
40185: PUSH
40186: FOR_IN
40187: IFFALSE 40227
// begin if not GetBWeapon ( i ) then
40189: LD_VAR 0 8
40193: PPUSH
40194: CALL_OW 269
40198: NOT
40199: IFFALSE 40225
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
40201: LD_VAR 0 8
40205: PPUSH
40206: LD_VAR 0 8
40210: PPUSH
40211: LD_VAR 0 2
40215: PPUSH
40216: CALL 41475 0 2
40220: PPUSH
40221: CALL_OW 431
// end ;
40225: GO 40186
40227: POP
40228: POP
// end ; for i = 1 to personel do
40229: LD_ADDR_VAR 0 8
40233: PUSH
40234: DOUBLE
40235: LD_INT 1
40237: DEC
40238: ST_TO_ADDR
40239: LD_VAR 0 6
40243: PUSH
40244: FOR_TO
40245: IFFALSE 41309
// begin if i > 4 then
40247: LD_VAR 0 8
40251: PUSH
40252: LD_INT 4
40254: GREATER
40255: IFFALSE 40259
// break ;
40257: GO 41309
// case i of 1 :
40259: LD_VAR 0 8
40263: PUSH
40264: LD_INT 1
40266: DOUBLE
40267: EQUAL
40268: IFTRUE 40272
40270: GO 40352
40272: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
40273: LD_ADDR_VAR 0 12
40277: PUSH
40278: LD_VAR 0 18
40282: PPUSH
40283: LD_INT 22
40285: PUSH
40286: LD_VAR 0 16
40290: PUSH
40291: EMPTY
40292: LIST
40293: LIST
40294: PUSH
40295: LD_INT 58
40297: PUSH
40298: EMPTY
40299: LIST
40300: PUSH
40301: LD_INT 2
40303: PUSH
40304: LD_INT 30
40306: PUSH
40307: LD_INT 32
40309: PUSH
40310: EMPTY
40311: LIST
40312: LIST
40313: PUSH
40314: LD_INT 30
40316: PUSH
40317: LD_INT 4
40319: PUSH
40320: EMPTY
40321: LIST
40322: LIST
40323: PUSH
40324: LD_INT 30
40326: PUSH
40327: LD_INT 5
40329: PUSH
40330: EMPTY
40331: LIST
40332: LIST
40333: PUSH
40334: EMPTY
40335: LIST
40336: LIST
40337: LIST
40338: LIST
40339: PUSH
40340: EMPTY
40341: LIST
40342: LIST
40343: LIST
40344: PPUSH
40345: CALL_OW 72
40349: ST_TO_ADDR
40350: GO 40574
40352: LD_INT 2
40354: DOUBLE
40355: EQUAL
40356: IFTRUE 40360
40358: GO 40422
40360: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
40361: LD_ADDR_VAR 0 12
40365: PUSH
40366: LD_VAR 0 18
40370: PPUSH
40371: LD_INT 22
40373: PUSH
40374: LD_VAR 0 16
40378: PUSH
40379: EMPTY
40380: LIST
40381: LIST
40382: PUSH
40383: LD_INT 2
40385: PUSH
40386: LD_INT 30
40388: PUSH
40389: LD_INT 0
40391: PUSH
40392: EMPTY
40393: LIST
40394: LIST
40395: PUSH
40396: LD_INT 30
40398: PUSH
40399: LD_INT 1
40401: PUSH
40402: EMPTY
40403: LIST
40404: LIST
40405: PUSH
40406: EMPTY
40407: LIST
40408: LIST
40409: LIST
40410: PUSH
40411: EMPTY
40412: LIST
40413: LIST
40414: PPUSH
40415: CALL_OW 72
40419: ST_TO_ADDR
40420: GO 40574
40422: LD_INT 3
40424: DOUBLE
40425: EQUAL
40426: IFTRUE 40430
40428: GO 40492
40430: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
40431: LD_ADDR_VAR 0 12
40435: PUSH
40436: LD_VAR 0 18
40440: PPUSH
40441: LD_INT 22
40443: PUSH
40444: LD_VAR 0 16
40448: PUSH
40449: EMPTY
40450: LIST
40451: LIST
40452: PUSH
40453: LD_INT 2
40455: PUSH
40456: LD_INT 30
40458: PUSH
40459: LD_INT 2
40461: PUSH
40462: EMPTY
40463: LIST
40464: LIST
40465: PUSH
40466: LD_INT 30
40468: PUSH
40469: LD_INT 3
40471: PUSH
40472: EMPTY
40473: LIST
40474: LIST
40475: PUSH
40476: EMPTY
40477: LIST
40478: LIST
40479: LIST
40480: PUSH
40481: EMPTY
40482: LIST
40483: LIST
40484: PPUSH
40485: CALL_OW 72
40489: ST_TO_ADDR
40490: GO 40574
40492: LD_INT 4
40494: DOUBLE
40495: EQUAL
40496: IFTRUE 40500
40498: GO 40573
40500: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
40501: LD_ADDR_VAR 0 12
40505: PUSH
40506: LD_VAR 0 18
40510: PPUSH
40511: LD_INT 22
40513: PUSH
40514: LD_VAR 0 16
40518: PUSH
40519: EMPTY
40520: LIST
40521: LIST
40522: PUSH
40523: LD_INT 2
40525: PUSH
40526: LD_INT 30
40528: PUSH
40529: LD_INT 6
40531: PUSH
40532: EMPTY
40533: LIST
40534: LIST
40535: PUSH
40536: LD_INT 30
40538: PUSH
40539: LD_INT 7
40541: PUSH
40542: EMPTY
40543: LIST
40544: LIST
40545: PUSH
40546: LD_INT 30
40548: PUSH
40549: LD_INT 8
40551: PUSH
40552: EMPTY
40553: LIST
40554: LIST
40555: PUSH
40556: EMPTY
40557: LIST
40558: LIST
40559: LIST
40560: LIST
40561: PUSH
40562: EMPTY
40563: LIST
40564: LIST
40565: PPUSH
40566: CALL_OW 72
40570: ST_TO_ADDR
40571: GO 40574
40573: POP
// if i = 1 then
40574: LD_VAR 0 8
40578: PUSH
40579: LD_INT 1
40581: EQUAL
40582: IFFALSE 40693
// begin tmp := [ ] ;
40584: LD_ADDR_VAR 0 19
40588: PUSH
40589: EMPTY
40590: ST_TO_ADDR
// for j in f do
40591: LD_ADDR_VAR 0 9
40595: PUSH
40596: LD_VAR 0 12
40600: PUSH
40601: FOR_IN
40602: IFFALSE 40675
// if GetBType ( j ) = b_bunker then
40604: LD_VAR 0 9
40608: PPUSH
40609: CALL_OW 266
40613: PUSH
40614: LD_INT 32
40616: EQUAL
40617: IFFALSE 40644
// tmp := Insert ( tmp , 1 , j ) else
40619: LD_ADDR_VAR 0 19
40623: PUSH
40624: LD_VAR 0 19
40628: PPUSH
40629: LD_INT 1
40631: PPUSH
40632: LD_VAR 0 9
40636: PPUSH
40637: CALL_OW 2
40641: ST_TO_ADDR
40642: GO 40673
// tmp := Insert ( tmp , tmp + 1 , j ) ;
40644: LD_ADDR_VAR 0 19
40648: PUSH
40649: LD_VAR 0 19
40653: PPUSH
40654: LD_VAR 0 19
40658: PUSH
40659: LD_INT 1
40661: PLUS
40662: PPUSH
40663: LD_VAR 0 9
40667: PPUSH
40668: CALL_OW 2
40672: ST_TO_ADDR
40673: GO 40601
40675: POP
40676: POP
// if tmp then
40677: LD_VAR 0 19
40681: IFFALSE 40693
// f := tmp ;
40683: LD_ADDR_VAR 0 12
40687: PUSH
40688: LD_VAR 0 19
40692: ST_TO_ADDR
// end ; x := personel [ i ] ;
40693: LD_ADDR_VAR 0 13
40697: PUSH
40698: LD_VAR 0 6
40702: PUSH
40703: LD_VAR 0 8
40707: ARRAY
40708: ST_TO_ADDR
// if x = - 1 then
40709: LD_VAR 0 13
40713: PUSH
40714: LD_INT 1
40716: NEG
40717: EQUAL
40718: IFFALSE 40927
// begin for j in f do
40720: LD_ADDR_VAR 0 9
40724: PUSH
40725: LD_VAR 0 12
40729: PUSH
40730: FOR_IN
40731: IFFALSE 40923
// repeat InitHc ;
40733: CALL_OW 19
// if GetBType ( j ) = b_barracks then
40737: LD_VAR 0 9
40741: PPUSH
40742: CALL_OW 266
40746: PUSH
40747: LD_INT 5
40749: EQUAL
40750: IFFALSE 40820
// begin if UnitsInside ( j ) < 3 then
40752: LD_VAR 0 9
40756: PPUSH
40757: CALL_OW 313
40761: PUSH
40762: LD_INT 3
40764: LESS
40765: IFFALSE 40801
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40767: LD_INT 0
40769: PPUSH
40770: LD_INT 5
40772: PUSH
40773: LD_INT 8
40775: PUSH
40776: LD_INT 9
40778: PUSH
40779: EMPTY
40780: LIST
40781: LIST
40782: LIST
40783: PUSH
40784: LD_VAR 0 17
40788: ARRAY
40789: PPUSH
40790: LD_VAR 0 4
40794: PPUSH
40795: CALL_OW 380
40799: GO 40818
// PrepareHuman ( false , i , skill ) ;
40801: LD_INT 0
40803: PPUSH
40804: LD_VAR 0 8
40808: PPUSH
40809: LD_VAR 0 4
40813: PPUSH
40814: CALL_OW 380
// end else
40818: GO 40837
// PrepareHuman ( false , i , skill ) ;
40820: LD_INT 0
40822: PPUSH
40823: LD_VAR 0 8
40827: PPUSH
40828: LD_VAR 0 4
40832: PPUSH
40833: CALL_OW 380
// un := CreateHuman ;
40837: LD_ADDR_VAR 0 14
40841: PUSH
40842: CALL_OW 44
40846: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40847: LD_ADDR_VAR 0 7
40851: PUSH
40852: LD_VAR 0 7
40856: PPUSH
40857: LD_INT 1
40859: PPUSH
40860: LD_VAR 0 14
40864: PPUSH
40865: CALL_OW 2
40869: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
40870: LD_VAR 0 14
40874: PPUSH
40875: LD_VAR 0 9
40879: PPUSH
40880: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
40884: LD_VAR 0 9
40888: PPUSH
40889: CALL_OW 313
40893: PUSH
40894: LD_INT 6
40896: EQUAL
40897: PUSH
40898: LD_VAR 0 9
40902: PPUSH
40903: CALL_OW 266
40907: PUSH
40908: LD_INT 32
40910: PUSH
40911: LD_INT 31
40913: PUSH
40914: EMPTY
40915: LIST
40916: LIST
40917: IN
40918: OR
40919: IFFALSE 40733
40921: GO 40730
40923: POP
40924: POP
// end else
40925: GO 41307
// for j = 1 to x do
40927: LD_ADDR_VAR 0 9
40931: PUSH
40932: DOUBLE
40933: LD_INT 1
40935: DEC
40936: ST_TO_ADDR
40937: LD_VAR 0 13
40941: PUSH
40942: FOR_TO
40943: IFFALSE 41305
// begin InitHc ;
40945: CALL_OW 19
// if not f then
40949: LD_VAR 0 12
40953: NOT
40954: IFFALSE 41043
// begin PrepareHuman ( false , i , skill ) ;
40956: LD_INT 0
40958: PPUSH
40959: LD_VAR 0 8
40963: PPUSH
40964: LD_VAR 0 4
40968: PPUSH
40969: CALL_OW 380
// un := CreateHuman ;
40973: LD_ADDR_VAR 0 14
40977: PUSH
40978: CALL_OW 44
40982: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40983: LD_ADDR_VAR 0 7
40987: PUSH
40988: LD_VAR 0 7
40992: PPUSH
40993: LD_INT 1
40995: PPUSH
40996: LD_VAR 0 14
41000: PPUSH
41001: CALL_OW 2
41005: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
41006: LD_VAR 0 14
41010: PPUSH
41011: LD_VAR 0 1
41015: PPUSH
41016: CALL_OW 250
41020: PPUSH
41021: LD_VAR 0 1
41025: PPUSH
41026: CALL_OW 251
41030: PPUSH
41031: LD_INT 10
41033: PPUSH
41034: LD_INT 0
41036: PPUSH
41037: CALL_OW 50
// continue ;
41041: GO 40942
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
41043: LD_VAR 0 12
41047: PUSH
41048: LD_INT 1
41050: ARRAY
41051: PPUSH
41052: CALL_OW 313
41056: PUSH
41057: LD_VAR 0 12
41061: PUSH
41062: LD_INT 1
41064: ARRAY
41065: PPUSH
41066: CALL_OW 266
41070: PUSH
41071: LD_INT 32
41073: PUSH
41074: LD_INT 31
41076: PUSH
41077: EMPTY
41078: LIST
41079: LIST
41080: IN
41081: AND
41082: PUSH
41083: LD_VAR 0 12
41087: PUSH
41088: LD_INT 1
41090: ARRAY
41091: PPUSH
41092: CALL_OW 313
41096: PUSH
41097: LD_INT 6
41099: EQUAL
41100: OR
41101: IFFALSE 41121
// f := Delete ( f , 1 ) ;
41103: LD_ADDR_VAR 0 12
41107: PUSH
41108: LD_VAR 0 12
41112: PPUSH
41113: LD_INT 1
41115: PPUSH
41116: CALL_OW 3
41120: ST_TO_ADDR
// if not f then
41121: LD_VAR 0 12
41125: NOT
41126: IFFALSE 41144
// begin x := x + 2 ;
41128: LD_ADDR_VAR 0 13
41132: PUSH
41133: LD_VAR 0 13
41137: PUSH
41138: LD_INT 2
41140: PLUS
41141: ST_TO_ADDR
// continue ;
41142: GO 40942
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
41144: LD_VAR 0 12
41148: PUSH
41149: LD_INT 1
41151: ARRAY
41152: PPUSH
41153: CALL_OW 266
41157: PUSH
41158: LD_INT 5
41160: EQUAL
41161: IFFALSE 41235
// begin if UnitsInside ( f [ 1 ] ) < 3 then
41163: LD_VAR 0 12
41167: PUSH
41168: LD_INT 1
41170: ARRAY
41171: PPUSH
41172: CALL_OW 313
41176: PUSH
41177: LD_INT 3
41179: LESS
41180: IFFALSE 41216
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
41182: LD_INT 0
41184: PPUSH
41185: LD_INT 5
41187: PUSH
41188: LD_INT 8
41190: PUSH
41191: LD_INT 9
41193: PUSH
41194: EMPTY
41195: LIST
41196: LIST
41197: LIST
41198: PUSH
41199: LD_VAR 0 17
41203: ARRAY
41204: PPUSH
41205: LD_VAR 0 4
41209: PPUSH
41210: CALL_OW 380
41214: GO 41233
// PrepareHuman ( false , i , skill ) ;
41216: LD_INT 0
41218: PPUSH
41219: LD_VAR 0 8
41223: PPUSH
41224: LD_VAR 0 4
41228: PPUSH
41229: CALL_OW 380
// end else
41233: GO 41252
// PrepareHuman ( false , i , skill ) ;
41235: LD_INT 0
41237: PPUSH
41238: LD_VAR 0 8
41242: PPUSH
41243: LD_VAR 0 4
41247: PPUSH
41248: CALL_OW 380
// un := CreateHuman ;
41252: LD_ADDR_VAR 0 14
41256: PUSH
41257: CALL_OW 44
41261: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41262: LD_ADDR_VAR 0 7
41266: PUSH
41267: LD_VAR 0 7
41271: PPUSH
41272: LD_INT 1
41274: PPUSH
41275: LD_VAR 0 14
41279: PPUSH
41280: CALL_OW 2
41284: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
41285: LD_VAR 0 14
41289: PPUSH
41290: LD_VAR 0 12
41294: PUSH
41295: LD_INT 1
41297: ARRAY
41298: PPUSH
41299: CALL_OW 52
// end ;
41303: GO 40942
41305: POP
41306: POP
// end ;
41307: GO 40244
41309: POP
41310: POP
// result := result ^ buildings ;
41311: LD_ADDR_VAR 0 7
41315: PUSH
41316: LD_VAR 0 7
41320: PUSH
41321: LD_VAR 0 18
41325: ADD
41326: ST_TO_ADDR
// end else
41327: GO 41470
// begin for i = 1 to personel do
41329: LD_ADDR_VAR 0 8
41333: PUSH
41334: DOUBLE
41335: LD_INT 1
41337: DEC
41338: ST_TO_ADDR
41339: LD_VAR 0 6
41343: PUSH
41344: FOR_TO
41345: IFFALSE 41468
// begin if i > 4 then
41347: LD_VAR 0 8
41351: PUSH
41352: LD_INT 4
41354: GREATER
41355: IFFALSE 41359
// break ;
41357: GO 41468
// x := personel [ i ] ;
41359: LD_ADDR_VAR 0 13
41363: PUSH
41364: LD_VAR 0 6
41368: PUSH
41369: LD_VAR 0 8
41373: ARRAY
41374: ST_TO_ADDR
// if x = - 1 then
41375: LD_VAR 0 13
41379: PUSH
41380: LD_INT 1
41382: NEG
41383: EQUAL
41384: IFFALSE 41388
// continue ;
41386: GO 41344
// PrepareHuman ( false , i , skill ) ;
41388: LD_INT 0
41390: PPUSH
41391: LD_VAR 0 8
41395: PPUSH
41396: LD_VAR 0 4
41400: PPUSH
41401: CALL_OW 380
// un := CreateHuman ;
41405: LD_ADDR_VAR 0 14
41409: PUSH
41410: CALL_OW 44
41414: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
41415: LD_VAR 0 14
41419: PPUSH
41420: LD_VAR 0 1
41424: PPUSH
41425: CALL_OW 250
41429: PPUSH
41430: LD_VAR 0 1
41434: PPUSH
41435: CALL_OW 251
41439: PPUSH
41440: LD_INT 10
41442: PPUSH
41443: LD_INT 0
41445: PPUSH
41446: CALL_OW 50
// result := result ^ un ;
41450: LD_ADDR_VAR 0 7
41454: PUSH
41455: LD_VAR 0 7
41459: PUSH
41460: LD_VAR 0 14
41464: ADD
41465: ST_TO_ADDR
// end ;
41466: GO 41344
41468: POP
41469: POP
// end ; end ;
41470: LD_VAR 0 7
41474: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
41475: LD_INT 0
41477: PPUSH
41478: PPUSH
41479: PPUSH
41480: PPUSH
41481: PPUSH
41482: PPUSH
41483: PPUSH
41484: PPUSH
41485: PPUSH
41486: PPUSH
41487: PPUSH
41488: PPUSH
41489: PPUSH
41490: PPUSH
41491: PPUSH
41492: PPUSH
// result := false ;
41493: LD_ADDR_VAR 0 3
41497: PUSH
41498: LD_INT 0
41500: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
41501: LD_VAR 0 1
41505: NOT
41506: PUSH
41507: LD_VAR 0 1
41511: PPUSH
41512: CALL_OW 266
41516: PUSH
41517: LD_INT 32
41519: PUSH
41520: LD_INT 33
41522: PUSH
41523: EMPTY
41524: LIST
41525: LIST
41526: IN
41527: NOT
41528: OR
41529: IFFALSE 41533
// exit ;
41531: GO 42642
// nat := GetNation ( tower ) ;
41533: LD_ADDR_VAR 0 12
41537: PUSH
41538: LD_VAR 0 1
41542: PPUSH
41543: CALL_OW 248
41547: ST_TO_ADDR
// side := GetSide ( tower ) ;
41548: LD_ADDR_VAR 0 16
41552: PUSH
41553: LD_VAR 0 1
41557: PPUSH
41558: CALL_OW 255
41562: ST_TO_ADDR
// x := GetX ( tower ) ;
41563: LD_ADDR_VAR 0 10
41567: PUSH
41568: LD_VAR 0 1
41572: PPUSH
41573: CALL_OW 250
41577: ST_TO_ADDR
// y := GetY ( tower ) ;
41578: LD_ADDR_VAR 0 11
41582: PUSH
41583: LD_VAR 0 1
41587: PPUSH
41588: CALL_OW 251
41592: ST_TO_ADDR
// if not x or not y then
41593: LD_VAR 0 10
41597: NOT
41598: PUSH
41599: LD_VAR 0 11
41603: NOT
41604: OR
41605: IFFALSE 41609
// exit ;
41607: GO 42642
// weapon := 0 ;
41609: LD_ADDR_VAR 0 18
41613: PUSH
41614: LD_INT 0
41616: ST_TO_ADDR
// fac_list := [ ] ;
41617: LD_ADDR_VAR 0 17
41621: PUSH
41622: EMPTY
41623: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
41624: LD_ADDR_VAR 0 6
41628: PUSH
41629: LD_VAR 0 1
41633: PPUSH
41634: CALL_OW 274
41638: PPUSH
41639: LD_VAR 0 2
41643: PPUSH
41644: LD_INT 0
41646: PPUSH
41647: CALL 39213 0 3
41651: PPUSH
41652: LD_INT 30
41654: PUSH
41655: LD_INT 3
41657: PUSH
41658: EMPTY
41659: LIST
41660: LIST
41661: PPUSH
41662: CALL_OW 72
41666: ST_TO_ADDR
// if not factories then
41667: LD_VAR 0 6
41671: NOT
41672: IFFALSE 41676
// exit ;
41674: GO 42642
// for i in factories do
41676: LD_ADDR_VAR 0 8
41680: PUSH
41681: LD_VAR 0 6
41685: PUSH
41686: FOR_IN
41687: IFFALSE 41712
// fac_list := fac_list union AvailableWeaponList ( i ) ;
41689: LD_ADDR_VAR 0 17
41693: PUSH
41694: LD_VAR 0 17
41698: PUSH
41699: LD_VAR 0 8
41703: PPUSH
41704: CALL_OW 478
41708: UNION
41709: ST_TO_ADDR
41710: GO 41686
41712: POP
41713: POP
// if not fac_list then
41714: LD_VAR 0 17
41718: NOT
41719: IFFALSE 41723
// exit ;
41721: GO 42642
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
41723: LD_ADDR_VAR 0 5
41727: PUSH
41728: LD_INT 4
41730: PUSH
41731: LD_INT 5
41733: PUSH
41734: LD_INT 9
41736: PUSH
41737: LD_INT 10
41739: PUSH
41740: LD_INT 6
41742: PUSH
41743: LD_INT 7
41745: PUSH
41746: LD_INT 11
41748: PUSH
41749: EMPTY
41750: LIST
41751: LIST
41752: LIST
41753: LIST
41754: LIST
41755: LIST
41756: LIST
41757: PUSH
41758: LD_INT 27
41760: PUSH
41761: LD_INT 28
41763: PUSH
41764: LD_INT 26
41766: PUSH
41767: LD_INT 30
41769: PUSH
41770: EMPTY
41771: LIST
41772: LIST
41773: LIST
41774: LIST
41775: PUSH
41776: LD_INT 43
41778: PUSH
41779: LD_INT 44
41781: PUSH
41782: LD_INT 46
41784: PUSH
41785: LD_INT 45
41787: PUSH
41788: LD_INT 47
41790: PUSH
41791: LD_INT 49
41793: PUSH
41794: EMPTY
41795: LIST
41796: LIST
41797: LIST
41798: LIST
41799: LIST
41800: LIST
41801: PUSH
41802: EMPTY
41803: LIST
41804: LIST
41805: LIST
41806: PUSH
41807: LD_VAR 0 12
41811: ARRAY
41812: ST_TO_ADDR
// list := list isect fac_list ;
41813: LD_ADDR_VAR 0 5
41817: PUSH
41818: LD_VAR 0 5
41822: PUSH
41823: LD_VAR 0 17
41827: ISECT
41828: ST_TO_ADDR
// if not list then
41829: LD_VAR 0 5
41833: NOT
41834: IFFALSE 41838
// exit ;
41836: GO 42642
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
41838: LD_VAR 0 12
41842: PUSH
41843: LD_INT 3
41845: EQUAL
41846: PUSH
41847: LD_INT 49
41849: PUSH
41850: LD_VAR 0 5
41854: IN
41855: AND
41856: PUSH
41857: LD_INT 31
41859: PPUSH
41860: LD_VAR 0 16
41864: PPUSH
41865: CALL_OW 321
41869: PUSH
41870: LD_INT 2
41872: EQUAL
41873: AND
41874: IFFALSE 41934
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
41876: LD_INT 22
41878: PUSH
41879: LD_VAR 0 16
41883: PUSH
41884: EMPTY
41885: LIST
41886: LIST
41887: PUSH
41888: LD_INT 35
41890: PUSH
41891: LD_INT 49
41893: PUSH
41894: EMPTY
41895: LIST
41896: LIST
41897: PUSH
41898: LD_INT 91
41900: PUSH
41901: LD_VAR 0 1
41905: PUSH
41906: LD_INT 10
41908: PUSH
41909: EMPTY
41910: LIST
41911: LIST
41912: LIST
41913: PUSH
41914: EMPTY
41915: LIST
41916: LIST
41917: LIST
41918: PPUSH
41919: CALL_OW 69
41923: NOT
41924: IFFALSE 41934
// weapon := ru_time_lapser ;
41926: LD_ADDR_VAR 0 18
41930: PUSH
41931: LD_INT 49
41933: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
41934: LD_VAR 0 12
41938: PUSH
41939: LD_INT 1
41941: PUSH
41942: LD_INT 2
41944: PUSH
41945: EMPTY
41946: LIST
41947: LIST
41948: IN
41949: PUSH
41950: LD_INT 11
41952: PUSH
41953: LD_VAR 0 5
41957: IN
41958: PUSH
41959: LD_INT 30
41961: PUSH
41962: LD_VAR 0 5
41966: IN
41967: OR
41968: AND
41969: PUSH
41970: LD_INT 6
41972: PPUSH
41973: LD_VAR 0 16
41977: PPUSH
41978: CALL_OW 321
41982: PUSH
41983: LD_INT 2
41985: EQUAL
41986: AND
41987: IFFALSE 42152
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
41989: LD_INT 22
41991: PUSH
41992: LD_VAR 0 16
41996: PUSH
41997: EMPTY
41998: LIST
41999: LIST
42000: PUSH
42001: LD_INT 2
42003: PUSH
42004: LD_INT 35
42006: PUSH
42007: LD_INT 11
42009: PUSH
42010: EMPTY
42011: LIST
42012: LIST
42013: PUSH
42014: LD_INT 35
42016: PUSH
42017: LD_INT 30
42019: PUSH
42020: EMPTY
42021: LIST
42022: LIST
42023: PUSH
42024: EMPTY
42025: LIST
42026: LIST
42027: LIST
42028: PUSH
42029: LD_INT 91
42031: PUSH
42032: LD_VAR 0 1
42036: PUSH
42037: LD_INT 18
42039: PUSH
42040: EMPTY
42041: LIST
42042: LIST
42043: LIST
42044: PUSH
42045: EMPTY
42046: LIST
42047: LIST
42048: LIST
42049: PPUSH
42050: CALL_OW 69
42054: NOT
42055: PUSH
42056: LD_INT 22
42058: PUSH
42059: LD_VAR 0 16
42063: PUSH
42064: EMPTY
42065: LIST
42066: LIST
42067: PUSH
42068: LD_INT 2
42070: PUSH
42071: LD_INT 30
42073: PUSH
42074: LD_INT 32
42076: PUSH
42077: EMPTY
42078: LIST
42079: LIST
42080: PUSH
42081: LD_INT 30
42083: PUSH
42084: LD_INT 33
42086: PUSH
42087: EMPTY
42088: LIST
42089: LIST
42090: PUSH
42091: EMPTY
42092: LIST
42093: LIST
42094: LIST
42095: PUSH
42096: LD_INT 91
42098: PUSH
42099: LD_VAR 0 1
42103: PUSH
42104: LD_INT 12
42106: PUSH
42107: EMPTY
42108: LIST
42109: LIST
42110: LIST
42111: PUSH
42112: EMPTY
42113: LIST
42114: LIST
42115: LIST
42116: PUSH
42117: EMPTY
42118: LIST
42119: PPUSH
42120: CALL_OW 69
42124: PUSH
42125: LD_INT 2
42127: GREATER
42128: AND
42129: IFFALSE 42152
// weapon := [ us_radar , ar_radar ] [ nat ] ;
42131: LD_ADDR_VAR 0 18
42135: PUSH
42136: LD_INT 11
42138: PUSH
42139: LD_INT 30
42141: PUSH
42142: EMPTY
42143: LIST
42144: LIST
42145: PUSH
42146: LD_VAR 0 12
42150: ARRAY
42151: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
42152: LD_VAR 0 18
42156: NOT
42157: PUSH
42158: LD_INT 40
42160: PPUSH
42161: LD_VAR 0 16
42165: PPUSH
42166: CALL_OW 321
42170: PUSH
42171: LD_INT 2
42173: EQUAL
42174: AND
42175: PUSH
42176: LD_INT 7
42178: PUSH
42179: LD_VAR 0 5
42183: IN
42184: PUSH
42185: LD_INT 28
42187: PUSH
42188: LD_VAR 0 5
42192: IN
42193: OR
42194: PUSH
42195: LD_INT 45
42197: PUSH
42198: LD_VAR 0 5
42202: IN
42203: OR
42204: AND
42205: IFFALSE 42459
// begin hex := GetHexInfo ( x , y ) ;
42207: LD_ADDR_VAR 0 4
42211: PUSH
42212: LD_VAR 0 10
42216: PPUSH
42217: LD_VAR 0 11
42221: PPUSH
42222: CALL_OW 546
42226: ST_TO_ADDR
// if hex [ 1 ] then
42227: LD_VAR 0 4
42231: PUSH
42232: LD_INT 1
42234: ARRAY
42235: IFFALSE 42239
// exit ;
42237: GO 42642
// height := hex [ 2 ] ;
42239: LD_ADDR_VAR 0 15
42243: PUSH
42244: LD_VAR 0 4
42248: PUSH
42249: LD_INT 2
42251: ARRAY
42252: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
42253: LD_ADDR_VAR 0 14
42257: PUSH
42258: LD_INT 0
42260: PUSH
42261: LD_INT 2
42263: PUSH
42264: LD_INT 3
42266: PUSH
42267: LD_INT 5
42269: PUSH
42270: EMPTY
42271: LIST
42272: LIST
42273: LIST
42274: LIST
42275: ST_TO_ADDR
// for i in tmp do
42276: LD_ADDR_VAR 0 8
42280: PUSH
42281: LD_VAR 0 14
42285: PUSH
42286: FOR_IN
42287: IFFALSE 42457
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
42289: LD_ADDR_VAR 0 9
42293: PUSH
42294: LD_VAR 0 10
42298: PPUSH
42299: LD_VAR 0 8
42303: PPUSH
42304: LD_INT 5
42306: PPUSH
42307: CALL_OW 272
42311: PUSH
42312: LD_VAR 0 11
42316: PPUSH
42317: LD_VAR 0 8
42321: PPUSH
42322: LD_INT 5
42324: PPUSH
42325: CALL_OW 273
42329: PUSH
42330: EMPTY
42331: LIST
42332: LIST
42333: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
42334: LD_VAR 0 9
42338: PUSH
42339: LD_INT 1
42341: ARRAY
42342: PPUSH
42343: LD_VAR 0 9
42347: PUSH
42348: LD_INT 2
42350: ARRAY
42351: PPUSH
42352: CALL_OW 488
42356: IFFALSE 42455
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
42358: LD_ADDR_VAR 0 4
42362: PUSH
42363: LD_VAR 0 9
42367: PUSH
42368: LD_INT 1
42370: ARRAY
42371: PPUSH
42372: LD_VAR 0 9
42376: PUSH
42377: LD_INT 2
42379: ARRAY
42380: PPUSH
42381: CALL_OW 546
42385: ST_TO_ADDR
// if hex [ 1 ] then
42386: LD_VAR 0 4
42390: PUSH
42391: LD_INT 1
42393: ARRAY
42394: IFFALSE 42398
// continue ;
42396: GO 42286
// h := hex [ 2 ] ;
42398: LD_ADDR_VAR 0 13
42402: PUSH
42403: LD_VAR 0 4
42407: PUSH
42408: LD_INT 2
42410: ARRAY
42411: ST_TO_ADDR
// if h + 7 < height then
42412: LD_VAR 0 13
42416: PUSH
42417: LD_INT 7
42419: PLUS
42420: PUSH
42421: LD_VAR 0 15
42425: LESS
42426: IFFALSE 42455
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
42428: LD_ADDR_VAR 0 18
42432: PUSH
42433: LD_INT 7
42435: PUSH
42436: LD_INT 28
42438: PUSH
42439: LD_INT 45
42441: PUSH
42442: EMPTY
42443: LIST
42444: LIST
42445: LIST
42446: PUSH
42447: LD_VAR 0 12
42451: ARRAY
42452: ST_TO_ADDR
// break ;
42453: GO 42457
// end ; end ; end ;
42455: GO 42286
42457: POP
42458: POP
// end ; if not weapon then
42459: LD_VAR 0 18
42463: NOT
42464: IFFALSE 42524
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
42466: LD_ADDR_VAR 0 5
42470: PUSH
42471: LD_VAR 0 5
42475: PUSH
42476: LD_INT 11
42478: PUSH
42479: LD_INT 30
42481: PUSH
42482: LD_INT 49
42484: PUSH
42485: EMPTY
42486: LIST
42487: LIST
42488: LIST
42489: DIFF
42490: ST_TO_ADDR
// if not list then
42491: LD_VAR 0 5
42495: NOT
42496: IFFALSE 42500
// exit ;
42498: GO 42642
// weapon := list [ rand ( 1 , list ) ] ;
42500: LD_ADDR_VAR 0 18
42504: PUSH
42505: LD_VAR 0 5
42509: PUSH
42510: LD_INT 1
42512: PPUSH
42513: LD_VAR 0 5
42517: PPUSH
42518: CALL_OW 12
42522: ARRAY
42523: ST_TO_ADDR
// end ; if weapon then
42524: LD_VAR 0 18
42528: IFFALSE 42642
// begin tmp := CostOfWeapon ( weapon ) ;
42530: LD_ADDR_VAR 0 14
42534: PUSH
42535: LD_VAR 0 18
42539: PPUSH
42540: CALL_OW 451
42544: ST_TO_ADDR
// j := GetBase ( tower ) ;
42545: LD_ADDR_VAR 0 9
42549: PUSH
42550: LD_VAR 0 1
42554: PPUSH
42555: CALL_OW 274
42559: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
42560: LD_VAR 0 9
42564: PPUSH
42565: LD_INT 1
42567: PPUSH
42568: CALL_OW 275
42572: PUSH
42573: LD_VAR 0 14
42577: PUSH
42578: LD_INT 1
42580: ARRAY
42581: GREATEREQUAL
42582: PUSH
42583: LD_VAR 0 9
42587: PPUSH
42588: LD_INT 2
42590: PPUSH
42591: CALL_OW 275
42595: PUSH
42596: LD_VAR 0 14
42600: PUSH
42601: LD_INT 2
42603: ARRAY
42604: GREATEREQUAL
42605: AND
42606: PUSH
42607: LD_VAR 0 9
42611: PPUSH
42612: LD_INT 3
42614: PPUSH
42615: CALL_OW 275
42619: PUSH
42620: LD_VAR 0 14
42624: PUSH
42625: LD_INT 3
42627: ARRAY
42628: GREATEREQUAL
42629: AND
42630: IFFALSE 42642
// result := weapon ;
42632: LD_ADDR_VAR 0 3
42636: PUSH
42637: LD_VAR 0 18
42641: ST_TO_ADDR
// end ; end ;
42642: LD_VAR 0 3
42646: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
42647: LD_INT 0
42649: PPUSH
42650: PPUSH
// result := true ;
42651: LD_ADDR_VAR 0 3
42655: PUSH
42656: LD_INT 1
42658: ST_TO_ADDR
// if array1 = array2 then
42659: LD_VAR 0 1
42663: PUSH
42664: LD_VAR 0 2
42668: EQUAL
42669: IFFALSE 42729
// begin for i = 1 to array1 do
42671: LD_ADDR_VAR 0 4
42675: PUSH
42676: DOUBLE
42677: LD_INT 1
42679: DEC
42680: ST_TO_ADDR
42681: LD_VAR 0 1
42685: PUSH
42686: FOR_TO
42687: IFFALSE 42725
// if array1 [ i ] <> array2 [ i ] then
42689: LD_VAR 0 1
42693: PUSH
42694: LD_VAR 0 4
42698: ARRAY
42699: PUSH
42700: LD_VAR 0 2
42704: PUSH
42705: LD_VAR 0 4
42709: ARRAY
42710: NONEQUAL
42711: IFFALSE 42723
// begin result := false ;
42713: LD_ADDR_VAR 0 3
42717: PUSH
42718: LD_INT 0
42720: ST_TO_ADDR
// break ;
42721: GO 42725
// end ;
42723: GO 42686
42725: POP
42726: POP
// end else
42727: GO 42737
// result := false ;
42729: LD_ADDR_VAR 0 3
42733: PUSH
42734: LD_INT 0
42736: ST_TO_ADDR
// end ;
42737: LD_VAR 0 3
42741: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
42742: LD_INT 0
42744: PPUSH
42745: PPUSH
// if not array1 or not array2 then
42746: LD_VAR 0 1
42750: NOT
42751: PUSH
42752: LD_VAR 0 2
42756: NOT
42757: OR
42758: IFFALSE 42762
// exit ;
42760: GO 42826
// result := true ;
42762: LD_ADDR_VAR 0 3
42766: PUSH
42767: LD_INT 1
42769: ST_TO_ADDR
// for i = 1 to array1 do
42770: LD_ADDR_VAR 0 4
42774: PUSH
42775: DOUBLE
42776: LD_INT 1
42778: DEC
42779: ST_TO_ADDR
42780: LD_VAR 0 1
42784: PUSH
42785: FOR_TO
42786: IFFALSE 42824
// if array1 [ i ] <> array2 [ i ] then
42788: LD_VAR 0 1
42792: PUSH
42793: LD_VAR 0 4
42797: ARRAY
42798: PUSH
42799: LD_VAR 0 2
42803: PUSH
42804: LD_VAR 0 4
42808: ARRAY
42809: NONEQUAL
42810: IFFALSE 42822
// begin result := false ;
42812: LD_ADDR_VAR 0 3
42816: PUSH
42817: LD_INT 0
42819: ST_TO_ADDR
// break ;
42820: GO 42824
// end ;
42822: GO 42785
42824: POP
42825: POP
// end ;
42826: LD_VAR 0 3
42830: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
42831: LD_INT 0
42833: PPUSH
42834: PPUSH
42835: PPUSH
// pom := GetBase ( fac ) ;
42836: LD_ADDR_VAR 0 5
42840: PUSH
42841: LD_VAR 0 1
42845: PPUSH
42846: CALL_OW 274
42850: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
42851: LD_ADDR_VAR 0 4
42855: PUSH
42856: LD_VAR 0 2
42860: PUSH
42861: LD_INT 1
42863: ARRAY
42864: PPUSH
42865: LD_VAR 0 2
42869: PUSH
42870: LD_INT 2
42872: ARRAY
42873: PPUSH
42874: LD_VAR 0 2
42878: PUSH
42879: LD_INT 3
42881: ARRAY
42882: PPUSH
42883: LD_VAR 0 2
42887: PUSH
42888: LD_INT 4
42890: ARRAY
42891: PPUSH
42892: CALL_OW 449
42896: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42897: LD_ADDR_VAR 0 3
42901: PUSH
42902: LD_VAR 0 5
42906: PPUSH
42907: LD_INT 1
42909: PPUSH
42910: CALL_OW 275
42914: PUSH
42915: LD_VAR 0 4
42919: PUSH
42920: LD_INT 1
42922: ARRAY
42923: GREATEREQUAL
42924: PUSH
42925: LD_VAR 0 5
42929: PPUSH
42930: LD_INT 2
42932: PPUSH
42933: CALL_OW 275
42937: PUSH
42938: LD_VAR 0 4
42942: PUSH
42943: LD_INT 2
42945: ARRAY
42946: GREATEREQUAL
42947: AND
42948: PUSH
42949: LD_VAR 0 5
42953: PPUSH
42954: LD_INT 3
42956: PPUSH
42957: CALL_OW 275
42961: PUSH
42962: LD_VAR 0 4
42966: PUSH
42967: LD_INT 3
42969: ARRAY
42970: GREATEREQUAL
42971: AND
42972: ST_TO_ADDR
// end ;
42973: LD_VAR 0 3
42977: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
42978: LD_INT 0
42980: PPUSH
42981: PPUSH
42982: PPUSH
42983: PPUSH
// pom := GetBase ( building ) ;
42984: LD_ADDR_VAR 0 3
42988: PUSH
42989: LD_VAR 0 1
42993: PPUSH
42994: CALL_OW 274
42998: ST_TO_ADDR
// if not pom then
42999: LD_VAR 0 3
43003: NOT
43004: IFFALSE 43008
// exit ;
43006: GO 43178
// btype := GetBType ( building ) ;
43008: LD_ADDR_VAR 0 5
43012: PUSH
43013: LD_VAR 0 1
43017: PPUSH
43018: CALL_OW 266
43022: ST_TO_ADDR
// if btype = b_armoury then
43023: LD_VAR 0 5
43027: PUSH
43028: LD_INT 4
43030: EQUAL
43031: IFFALSE 43041
// btype := b_barracks ;
43033: LD_ADDR_VAR 0 5
43037: PUSH
43038: LD_INT 5
43040: ST_TO_ADDR
// if btype = b_depot then
43041: LD_VAR 0 5
43045: PUSH
43046: LD_INT 0
43048: EQUAL
43049: IFFALSE 43059
// btype := b_warehouse ;
43051: LD_ADDR_VAR 0 5
43055: PUSH
43056: LD_INT 1
43058: ST_TO_ADDR
// if btype = b_workshop then
43059: LD_VAR 0 5
43063: PUSH
43064: LD_INT 2
43066: EQUAL
43067: IFFALSE 43077
// btype := b_factory ;
43069: LD_ADDR_VAR 0 5
43073: PUSH
43074: LD_INT 3
43076: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
43077: LD_ADDR_VAR 0 4
43081: PUSH
43082: LD_VAR 0 5
43086: PPUSH
43087: LD_VAR 0 1
43091: PPUSH
43092: CALL_OW 248
43096: PPUSH
43097: CALL_OW 450
43101: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43102: LD_ADDR_VAR 0 2
43106: PUSH
43107: LD_VAR 0 3
43111: PPUSH
43112: LD_INT 1
43114: PPUSH
43115: CALL_OW 275
43119: PUSH
43120: LD_VAR 0 4
43124: PUSH
43125: LD_INT 1
43127: ARRAY
43128: GREATEREQUAL
43129: PUSH
43130: LD_VAR 0 3
43134: PPUSH
43135: LD_INT 2
43137: PPUSH
43138: CALL_OW 275
43142: PUSH
43143: LD_VAR 0 4
43147: PUSH
43148: LD_INT 2
43150: ARRAY
43151: GREATEREQUAL
43152: AND
43153: PUSH
43154: LD_VAR 0 3
43158: PPUSH
43159: LD_INT 3
43161: PPUSH
43162: CALL_OW 275
43166: PUSH
43167: LD_VAR 0 4
43171: PUSH
43172: LD_INT 3
43174: ARRAY
43175: GREATEREQUAL
43176: AND
43177: ST_TO_ADDR
// end ;
43178: LD_VAR 0 2
43182: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
43183: LD_INT 0
43185: PPUSH
43186: PPUSH
43187: PPUSH
// pom := GetBase ( building ) ;
43188: LD_ADDR_VAR 0 4
43192: PUSH
43193: LD_VAR 0 1
43197: PPUSH
43198: CALL_OW 274
43202: ST_TO_ADDR
// if not pom then
43203: LD_VAR 0 4
43207: NOT
43208: IFFALSE 43212
// exit ;
43210: GO 43313
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
43212: LD_ADDR_VAR 0 5
43216: PUSH
43217: LD_VAR 0 2
43221: PPUSH
43222: LD_VAR 0 1
43226: PPUSH
43227: CALL_OW 248
43231: PPUSH
43232: CALL_OW 450
43236: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43237: LD_ADDR_VAR 0 3
43241: PUSH
43242: LD_VAR 0 4
43246: PPUSH
43247: LD_INT 1
43249: PPUSH
43250: CALL_OW 275
43254: PUSH
43255: LD_VAR 0 5
43259: PUSH
43260: LD_INT 1
43262: ARRAY
43263: GREATEREQUAL
43264: PUSH
43265: LD_VAR 0 4
43269: PPUSH
43270: LD_INT 2
43272: PPUSH
43273: CALL_OW 275
43277: PUSH
43278: LD_VAR 0 5
43282: PUSH
43283: LD_INT 2
43285: ARRAY
43286: GREATEREQUAL
43287: AND
43288: PUSH
43289: LD_VAR 0 4
43293: PPUSH
43294: LD_INT 3
43296: PPUSH
43297: CALL_OW 275
43301: PUSH
43302: LD_VAR 0 5
43306: PUSH
43307: LD_INT 3
43309: ARRAY
43310: GREATEREQUAL
43311: AND
43312: ST_TO_ADDR
// end ;
43313: LD_VAR 0 3
43317: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
43318: LD_INT 0
43320: PPUSH
43321: PPUSH
43322: PPUSH
43323: PPUSH
43324: PPUSH
43325: PPUSH
43326: PPUSH
43327: PPUSH
43328: PPUSH
43329: PPUSH
43330: PPUSH
// result := false ;
43331: LD_ADDR_VAR 0 8
43335: PUSH
43336: LD_INT 0
43338: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
43339: LD_VAR 0 5
43343: NOT
43344: PUSH
43345: LD_VAR 0 1
43349: NOT
43350: OR
43351: PUSH
43352: LD_VAR 0 2
43356: NOT
43357: OR
43358: PUSH
43359: LD_VAR 0 3
43363: NOT
43364: OR
43365: IFFALSE 43369
// exit ;
43367: GO 44183
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
43369: LD_ADDR_VAR 0 14
43373: PUSH
43374: LD_VAR 0 1
43378: PPUSH
43379: LD_VAR 0 2
43383: PPUSH
43384: LD_VAR 0 3
43388: PPUSH
43389: LD_VAR 0 4
43393: PPUSH
43394: LD_VAR 0 5
43398: PUSH
43399: LD_INT 1
43401: ARRAY
43402: PPUSH
43403: CALL_OW 248
43407: PPUSH
43408: LD_INT 0
43410: PPUSH
43411: CALL 45420 0 6
43415: ST_TO_ADDR
// if not hexes then
43416: LD_VAR 0 14
43420: NOT
43421: IFFALSE 43425
// exit ;
43423: GO 44183
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
43425: LD_ADDR_VAR 0 17
43429: PUSH
43430: LD_VAR 0 5
43434: PPUSH
43435: LD_INT 22
43437: PUSH
43438: LD_VAR 0 13
43442: PPUSH
43443: CALL_OW 255
43447: PUSH
43448: EMPTY
43449: LIST
43450: LIST
43451: PUSH
43452: LD_INT 2
43454: PUSH
43455: LD_INT 30
43457: PUSH
43458: LD_INT 0
43460: PUSH
43461: EMPTY
43462: LIST
43463: LIST
43464: PUSH
43465: LD_INT 30
43467: PUSH
43468: LD_INT 1
43470: PUSH
43471: EMPTY
43472: LIST
43473: LIST
43474: PUSH
43475: EMPTY
43476: LIST
43477: LIST
43478: LIST
43479: PUSH
43480: EMPTY
43481: LIST
43482: LIST
43483: PPUSH
43484: CALL_OW 72
43488: ST_TO_ADDR
// for i = 1 to hexes do
43489: LD_ADDR_VAR 0 9
43493: PUSH
43494: DOUBLE
43495: LD_INT 1
43497: DEC
43498: ST_TO_ADDR
43499: LD_VAR 0 14
43503: PUSH
43504: FOR_TO
43505: IFFALSE 44181
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43507: LD_ADDR_VAR 0 13
43511: PUSH
43512: LD_VAR 0 14
43516: PUSH
43517: LD_VAR 0 9
43521: ARRAY
43522: PUSH
43523: LD_INT 1
43525: ARRAY
43526: PPUSH
43527: LD_VAR 0 14
43531: PUSH
43532: LD_VAR 0 9
43536: ARRAY
43537: PUSH
43538: LD_INT 2
43540: ARRAY
43541: PPUSH
43542: CALL_OW 428
43546: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
43547: LD_VAR 0 14
43551: PUSH
43552: LD_VAR 0 9
43556: ARRAY
43557: PUSH
43558: LD_INT 1
43560: ARRAY
43561: PPUSH
43562: LD_VAR 0 14
43566: PUSH
43567: LD_VAR 0 9
43571: ARRAY
43572: PUSH
43573: LD_INT 2
43575: ARRAY
43576: PPUSH
43577: CALL_OW 351
43581: PUSH
43582: LD_VAR 0 14
43586: PUSH
43587: LD_VAR 0 9
43591: ARRAY
43592: PUSH
43593: LD_INT 1
43595: ARRAY
43596: PPUSH
43597: LD_VAR 0 14
43601: PUSH
43602: LD_VAR 0 9
43606: ARRAY
43607: PUSH
43608: LD_INT 2
43610: ARRAY
43611: PPUSH
43612: CALL_OW 488
43616: NOT
43617: OR
43618: PUSH
43619: LD_VAR 0 13
43623: PPUSH
43624: CALL_OW 247
43628: PUSH
43629: LD_INT 3
43631: EQUAL
43632: OR
43633: IFFALSE 43639
// exit ;
43635: POP
43636: POP
43637: GO 44183
// if not tmp then
43639: LD_VAR 0 13
43643: NOT
43644: IFFALSE 43648
// continue ;
43646: GO 43504
// result := true ;
43648: LD_ADDR_VAR 0 8
43652: PUSH
43653: LD_INT 1
43655: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
43656: LD_VAR 0 6
43660: PUSH
43661: LD_VAR 0 13
43665: PPUSH
43666: CALL_OW 247
43670: PUSH
43671: LD_INT 2
43673: EQUAL
43674: AND
43675: PUSH
43676: LD_VAR 0 13
43680: PPUSH
43681: CALL_OW 263
43685: PUSH
43686: LD_INT 1
43688: EQUAL
43689: AND
43690: IFFALSE 43854
// begin if IsDrivenBy ( tmp ) then
43692: LD_VAR 0 13
43696: PPUSH
43697: CALL_OW 311
43701: IFFALSE 43705
// continue ;
43703: GO 43504
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
43705: LD_VAR 0 6
43709: PPUSH
43710: LD_INT 3
43712: PUSH
43713: LD_INT 60
43715: PUSH
43716: EMPTY
43717: LIST
43718: PUSH
43719: EMPTY
43720: LIST
43721: LIST
43722: PUSH
43723: LD_INT 3
43725: PUSH
43726: LD_INT 55
43728: PUSH
43729: EMPTY
43730: LIST
43731: PUSH
43732: EMPTY
43733: LIST
43734: LIST
43735: PUSH
43736: EMPTY
43737: LIST
43738: LIST
43739: PPUSH
43740: CALL_OW 72
43744: IFFALSE 43852
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
43746: LD_ADDR_VAR 0 18
43750: PUSH
43751: LD_VAR 0 6
43755: PPUSH
43756: LD_INT 3
43758: PUSH
43759: LD_INT 60
43761: PUSH
43762: EMPTY
43763: LIST
43764: PUSH
43765: EMPTY
43766: LIST
43767: LIST
43768: PUSH
43769: LD_INT 3
43771: PUSH
43772: LD_INT 55
43774: PUSH
43775: EMPTY
43776: LIST
43777: PUSH
43778: EMPTY
43779: LIST
43780: LIST
43781: PUSH
43782: EMPTY
43783: LIST
43784: LIST
43785: PPUSH
43786: CALL_OW 72
43790: PUSH
43791: LD_INT 1
43793: ARRAY
43794: ST_TO_ADDR
// if IsInUnit ( driver ) then
43795: LD_VAR 0 18
43799: PPUSH
43800: CALL_OW 310
43804: IFFALSE 43815
// ComExit ( driver ) ;
43806: LD_VAR 0 18
43810: PPUSH
43811: CALL 68548 0 1
// AddComEnterUnit ( driver , tmp ) ;
43815: LD_VAR 0 18
43819: PPUSH
43820: LD_VAR 0 13
43824: PPUSH
43825: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
43829: LD_VAR 0 18
43833: PPUSH
43834: LD_VAR 0 7
43838: PPUSH
43839: CALL_OW 173
// AddComExitVehicle ( driver ) ;
43843: LD_VAR 0 18
43847: PPUSH
43848: CALL_OW 181
// end ; continue ;
43852: GO 43504
// end ; if not cleaners or not tmp in cleaners then
43854: LD_VAR 0 6
43858: NOT
43859: PUSH
43860: LD_VAR 0 13
43864: PUSH
43865: LD_VAR 0 6
43869: IN
43870: NOT
43871: OR
43872: IFFALSE 44179
// begin if dep then
43874: LD_VAR 0 17
43878: IFFALSE 44014
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
43880: LD_ADDR_VAR 0 16
43884: PUSH
43885: LD_VAR 0 17
43889: PUSH
43890: LD_INT 1
43892: ARRAY
43893: PPUSH
43894: CALL_OW 250
43898: PPUSH
43899: LD_VAR 0 17
43903: PUSH
43904: LD_INT 1
43906: ARRAY
43907: PPUSH
43908: CALL_OW 254
43912: PPUSH
43913: LD_INT 5
43915: PPUSH
43916: CALL_OW 272
43920: PUSH
43921: LD_VAR 0 17
43925: PUSH
43926: LD_INT 1
43928: ARRAY
43929: PPUSH
43930: CALL_OW 251
43934: PPUSH
43935: LD_VAR 0 17
43939: PUSH
43940: LD_INT 1
43942: ARRAY
43943: PPUSH
43944: CALL_OW 254
43948: PPUSH
43949: LD_INT 5
43951: PPUSH
43952: CALL_OW 273
43956: PUSH
43957: EMPTY
43958: LIST
43959: LIST
43960: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
43961: LD_VAR 0 16
43965: PUSH
43966: LD_INT 1
43968: ARRAY
43969: PPUSH
43970: LD_VAR 0 16
43974: PUSH
43975: LD_INT 2
43977: ARRAY
43978: PPUSH
43979: CALL_OW 488
43983: IFFALSE 44014
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
43985: LD_VAR 0 13
43989: PPUSH
43990: LD_VAR 0 16
43994: PUSH
43995: LD_INT 1
43997: ARRAY
43998: PPUSH
43999: LD_VAR 0 16
44003: PUSH
44004: LD_INT 2
44006: ARRAY
44007: PPUSH
44008: CALL_OW 111
// continue ;
44012: GO 43504
// end ; end ; r := GetDir ( tmp ) ;
44014: LD_ADDR_VAR 0 15
44018: PUSH
44019: LD_VAR 0 13
44023: PPUSH
44024: CALL_OW 254
44028: ST_TO_ADDR
// if r = 5 then
44029: LD_VAR 0 15
44033: PUSH
44034: LD_INT 5
44036: EQUAL
44037: IFFALSE 44047
// r := 0 ;
44039: LD_ADDR_VAR 0 15
44043: PUSH
44044: LD_INT 0
44046: ST_TO_ADDR
// for j = r to 5 do
44047: LD_ADDR_VAR 0 10
44051: PUSH
44052: DOUBLE
44053: LD_VAR 0 15
44057: DEC
44058: ST_TO_ADDR
44059: LD_INT 5
44061: PUSH
44062: FOR_TO
44063: IFFALSE 44177
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
44065: LD_ADDR_VAR 0 11
44069: PUSH
44070: LD_VAR 0 13
44074: PPUSH
44075: CALL_OW 250
44079: PPUSH
44080: LD_VAR 0 10
44084: PPUSH
44085: LD_INT 2
44087: PPUSH
44088: CALL_OW 272
44092: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
44093: LD_ADDR_VAR 0 12
44097: PUSH
44098: LD_VAR 0 13
44102: PPUSH
44103: CALL_OW 251
44107: PPUSH
44108: LD_VAR 0 10
44112: PPUSH
44113: LD_INT 2
44115: PPUSH
44116: CALL_OW 273
44120: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
44121: LD_VAR 0 11
44125: PPUSH
44126: LD_VAR 0 12
44130: PPUSH
44131: CALL_OW 488
44135: PUSH
44136: LD_VAR 0 11
44140: PPUSH
44141: LD_VAR 0 12
44145: PPUSH
44146: CALL_OW 428
44150: NOT
44151: AND
44152: IFFALSE 44175
// begin ComMoveXY ( tmp , _x , _y ) ;
44154: LD_VAR 0 13
44158: PPUSH
44159: LD_VAR 0 11
44163: PPUSH
44164: LD_VAR 0 12
44168: PPUSH
44169: CALL_OW 111
// break ;
44173: GO 44177
// end ; end ;
44175: GO 44062
44177: POP
44178: POP
// end ; end ;
44179: GO 43504
44181: POP
44182: POP
// end ;
44183: LD_VAR 0 8
44187: RET
// export function BuildingTechInvented ( side , btype ) ; begin
44188: LD_INT 0
44190: PPUSH
// result := true ;
44191: LD_ADDR_VAR 0 3
44195: PUSH
44196: LD_INT 1
44198: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
44199: LD_VAR 0 2
44203: PUSH
44204: LD_INT 24
44206: DOUBLE
44207: EQUAL
44208: IFTRUE 44218
44210: LD_INT 33
44212: DOUBLE
44213: EQUAL
44214: IFTRUE 44218
44216: GO 44243
44218: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
44219: LD_ADDR_VAR 0 3
44223: PUSH
44224: LD_INT 32
44226: PPUSH
44227: LD_VAR 0 1
44231: PPUSH
44232: CALL_OW 321
44236: PUSH
44237: LD_INT 2
44239: EQUAL
44240: ST_TO_ADDR
44241: GO 44563
44243: LD_INT 20
44245: DOUBLE
44246: EQUAL
44247: IFTRUE 44251
44249: GO 44276
44251: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
44252: LD_ADDR_VAR 0 3
44256: PUSH
44257: LD_INT 6
44259: PPUSH
44260: LD_VAR 0 1
44264: PPUSH
44265: CALL_OW 321
44269: PUSH
44270: LD_INT 2
44272: EQUAL
44273: ST_TO_ADDR
44274: GO 44563
44276: LD_INT 22
44278: DOUBLE
44279: EQUAL
44280: IFTRUE 44290
44282: LD_INT 36
44284: DOUBLE
44285: EQUAL
44286: IFTRUE 44290
44288: GO 44315
44290: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
44291: LD_ADDR_VAR 0 3
44295: PUSH
44296: LD_INT 15
44298: PPUSH
44299: LD_VAR 0 1
44303: PPUSH
44304: CALL_OW 321
44308: PUSH
44309: LD_INT 2
44311: EQUAL
44312: ST_TO_ADDR
44313: GO 44563
44315: LD_INT 30
44317: DOUBLE
44318: EQUAL
44319: IFTRUE 44323
44321: GO 44348
44323: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
44324: LD_ADDR_VAR 0 3
44328: PUSH
44329: LD_INT 20
44331: PPUSH
44332: LD_VAR 0 1
44336: PPUSH
44337: CALL_OW 321
44341: PUSH
44342: LD_INT 2
44344: EQUAL
44345: ST_TO_ADDR
44346: GO 44563
44348: LD_INT 28
44350: DOUBLE
44351: EQUAL
44352: IFTRUE 44362
44354: LD_INT 21
44356: DOUBLE
44357: EQUAL
44358: IFTRUE 44362
44360: GO 44387
44362: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
44363: LD_ADDR_VAR 0 3
44367: PUSH
44368: LD_INT 21
44370: PPUSH
44371: LD_VAR 0 1
44375: PPUSH
44376: CALL_OW 321
44380: PUSH
44381: LD_INT 2
44383: EQUAL
44384: ST_TO_ADDR
44385: GO 44563
44387: LD_INT 16
44389: DOUBLE
44390: EQUAL
44391: IFTRUE 44395
44393: GO 44422
44395: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
44396: LD_ADDR_VAR 0 3
44400: PUSH
44401: LD_EXP 34
44405: PPUSH
44406: LD_VAR 0 1
44410: PPUSH
44411: CALL_OW 321
44415: PUSH
44416: LD_INT 2
44418: EQUAL
44419: ST_TO_ADDR
44420: GO 44563
44422: LD_INT 19
44424: DOUBLE
44425: EQUAL
44426: IFTRUE 44436
44428: LD_INT 23
44430: DOUBLE
44431: EQUAL
44432: IFTRUE 44436
44434: GO 44463
44436: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
44437: LD_ADDR_VAR 0 3
44441: PUSH
44442: LD_EXP 33
44446: PPUSH
44447: LD_VAR 0 1
44451: PPUSH
44452: CALL_OW 321
44456: PUSH
44457: LD_INT 2
44459: EQUAL
44460: ST_TO_ADDR
44461: GO 44563
44463: LD_INT 17
44465: DOUBLE
44466: EQUAL
44467: IFTRUE 44471
44469: GO 44496
44471: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
44472: LD_ADDR_VAR 0 3
44476: PUSH
44477: LD_INT 39
44479: PPUSH
44480: LD_VAR 0 1
44484: PPUSH
44485: CALL_OW 321
44489: PUSH
44490: LD_INT 2
44492: EQUAL
44493: ST_TO_ADDR
44494: GO 44563
44496: LD_INT 18
44498: DOUBLE
44499: EQUAL
44500: IFTRUE 44504
44502: GO 44529
44504: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
44505: LD_ADDR_VAR 0 3
44509: PUSH
44510: LD_INT 40
44512: PPUSH
44513: LD_VAR 0 1
44517: PPUSH
44518: CALL_OW 321
44522: PUSH
44523: LD_INT 2
44525: EQUAL
44526: ST_TO_ADDR
44527: GO 44563
44529: LD_INT 27
44531: DOUBLE
44532: EQUAL
44533: IFTRUE 44537
44535: GO 44562
44537: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
44538: LD_ADDR_VAR 0 3
44542: PUSH
44543: LD_INT 35
44545: PPUSH
44546: LD_VAR 0 1
44550: PPUSH
44551: CALL_OW 321
44555: PUSH
44556: LD_INT 2
44558: EQUAL
44559: ST_TO_ADDR
44560: GO 44563
44562: POP
// end ;
44563: LD_VAR 0 3
44567: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
44568: LD_INT 0
44570: PPUSH
44571: PPUSH
44572: PPUSH
44573: PPUSH
44574: PPUSH
44575: PPUSH
44576: PPUSH
44577: PPUSH
44578: PPUSH
44579: PPUSH
44580: PPUSH
// result := false ;
44581: LD_ADDR_VAR 0 6
44585: PUSH
44586: LD_INT 0
44588: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
44589: LD_VAR 0 1
44593: NOT
44594: PUSH
44595: LD_VAR 0 1
44599: PPUSH
44600: CALL_OW 266
44604: PUSH
44605: LD_INT 0
44607: PUSH
44608: LD_INT 1
44610: PUSH
44611: EMPTY
44612: LIST
44613: LIST
44614: IN
44615: NOT
44616: OR
44617: PUSH
44618: LD_VAR 0 2
44622: NOT
44623: OR
44624: PUSH
44625: LD_VAR 0 5
44629: PUSH
44630: LD_INT 0
44632: PUSH
44633: LD_INT 1
44635: PUSH
44636: LD_INT 2
44638: PUSH
44639: LD_INT 3
44641: PUSH
44642: LD_INT 4
44644: PUSH
44645: LD_INT 5
44647: PUSH
44648: EMPTY
44649: LIST
44650: LIST
44651: LIST
44652: LIST
44653: LIST
44654: LIST
44655: IN
44656: NOT
44657: OR
44658: PUSH
44659: LD_VAR 0 3
44663: PPUSH
44664: LD_VAR 0 4
44668: PPUSH
44669: CALL_OW 488
44673: NOT
44674: OR
44675: IFFALSE 44679
// exit ;
44677: GO 45415
// side := GetSide ( depot ) ;
44679: LD_ADDR_VAR 0 9
44683: PUSH
44684: LD_VAR 0 1
44688: PPUSH
44689: CALL_OW 255
44693: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
44694: LD_VAR 0 9
44698: PPUSH
44699: LD_VAR 0 2
44703: PPUSH
44704: CALL 44188 0 2
44708: NOT
44709: IFFALSE 44713
// exit ;
44711: GO 45415
// pom := GetBase ( depot ) ;
44713: LD_ADDR_VAR 0 10
44717: PUSH
44718: LD_VAR 0 1
44722: PPUSH
44723: CALL_OW 274
44727: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
44728: LD_ADDR_VAR 0 11
44732: PUSH
44733: LD_VAR 0 2
44737: PPUSH
44738: LD_VAR 0 1
44742: PPUSH
44743: CALL_OW 248
44747: PPUSH
44748: CALL_OW 450
44752: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
44753: LD_VAR 0 10
44757: PPUSH
44758: LD_INT 1
44760: PPUSH
44761: CALL_OW 275
44765: PUSH
44766: LD_VAR 0 11
44770: PUSH
44771: LD_INT 1
44773: ARRAY
44774: GREATEREQUAL
44775: PUSH
44776: LD_VAR 0 10
44780: PPUSH
44781: LD_INT 2
44783: PPUSH
44784: CALL_OW 275
44788: PUSH
44789: LD_VAR 0 11
44793: PUSH
44794: LD_INT 2
44796: ARRAY
44797: GREATEREQUAL
44798: AND
44799: PUSH
44800: LD_VAR 0 10
44804: PPUSH
44805: LD_INT 3
44807: PPUSH
44808: CALL_OW 275
44812: PUSH
44813: LD_VAR 0 11
44817: PUSH
44818: LD_INT 3
44820: ARRAY
44821: GREATEREQUAL
44822: AND
44823: NOT
44824: IFFALSE 44828
// exit ;
44826: GO 45415
// if GetBType ( depot ) = b_depot then
44828: LD_VAR 0 1
44832: PPUSH
44833: CALL_OW 266
44837: PUSH
44838: LD_INT 0
44840: EQUAL
44841: IFFALSE 44853
// dist := 28 else
44843: LD_ADDR_VAR 0 14
44847: PUSH
44848: LD_INT 28
44850: ST_TO_ADDR
44851: GO 44861
// dist := 36 ;
44853: LD_ADDR_VAR 0 14
44857: PUSH
44858: LD_INT 36
44860: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
44861: LD_VAR 0 1
44865: PPUSH
44866: LD_VAR 0 3
44870: PPUSH
44871: LD_VAR 0 4
44875: PPUSH
44876: CALL_OW 297
44880: PUSH
44881: LD_VAR 0 14
44885: GREATER
44886: IFFALSE 44890
// exit ;
44888: GO 45415
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
44890: LD_ADDR_VAR 0 12
44894: PUSH
44895: LD_VAR 0 2
44899: PPUSH
44900: LD_VAR 0 3
44904: PPUSH
44905: LD_VAR 0 4
44909: PPUSH
44910: LD_VAR 0 5
44914: PPUSH
44915: LD_VAR 0 1
44919: PPUSH
44920: CALL_OW 248
44924: PPUSH
44925: LD_INT 0
44927: PPUSH
44928: CALL 45420 0 6
44932: ST_TO_ADDR
// if not hexes then
44933: LD_VAR 0 12
44937: NOT
44938: IFFALSE 44942
// exit ;
44940: GO 45415
// hex := GetHexInfo ( x , y ) ;
44942: LD_ADDR_VAR 0 15
44946: PUSH
44947: LD_VAR 0 3
44951: PPUSH
44952: LD_VAR 0 4
44956: PPUSH
44957: CALL_OW 546
44961: ST_TO_ADDR
// if hex [ 1 ] then
44962: LD_VAR 0 15
44966: PUSH
44967: LD_INT 1
44969: ARRAY
44970: IFFALSE 44974
// exit ;
44972: GO 45415
// height := hex [ 2 ] ;
44974: LD_ADDR_VAR 0 13
44978: PUSH
44979: LD_VAR 0 15
44983: PUSH
44984: LD_INT 2
44986: ARRAY
44987: ST_TO_ADDR
// for i = 1 to hexes do
44988: LD_ADDR_VAR 0 7
44992: PUSH
44993: DOUBLE
44994: LD_INT 1
44996: DEC
44997: ST_TO_ADDR
44998: LD_VAR 0 12
45002: PUSH
45003: FOR_TO
45004: IFFALSE 45334
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
45006: LD_VAR 0 12
45010: PUSH
45011: LD_VAR 0 7
45015: ARRAY
45016: PUSH
45017: LD_INT 1
45019: ARRAY
45020: PPUSH
45021: LD_VAR 0 12
45025: PUSH
45026: LD_VAR 0 7
45030: ARRAY
45031: PUSH
45032: LD_INT 2
45034: ARRAY
45035: PPUSH
45036: CALL_OW 488
45040: NOT
45041: PUSH
45042: LD_VAR 0 12
45046: PUSH
45047: LD_VAR 0 7
45051: ARRAY
45052: PUSH
45053: LD_INT 1
45055: ARRAY
45056: PPUSH
45057: LD_VAR 0 12
45061: PUSH
45062: LD_VAR 0 7
45066: ARRAY
45067: PUSH
45068: LD_INT 2
45070: ARRAY
45071: PPUSH
45072: CALL_OW 428
45076: PUSH
45077: LD_INT 0
45079: GREATER
45080: OR
45081: PUSH
45082: LD_VAR 0 12
45086: PUSH
45087: LD_VAR 0 7
45091: ARRAY
45092: PUSH
45093: LD_INT 1
45095: ARRAY
45096: PPUSH
45097: LD_VAR 0 12
45101: PUSH
45102: LD_VAR 0 7
45106: ARRAY
45107: PUSH
45108: LD_INT 2
45110: ARRAY
45111: PPUSH
45112: CALL_OW 351
45116: OR
45117: IFFALSE 45123
// exit ;
45119: POP
45120: POP
45121: GO 45415
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
45123: LD_ADDR_VAR 0 8
45127: PUSH
45128: LD_VAR 0 12
45132: PUSH
45133: LD_VAR 0 7
45137: ARRAY
45138: PUSH
45139: LD_INT 1
45141: ARRAY
45142: PPUSH
45143: LD_VAR 0 12
45147: PUSH
45148: LD_VAR 0 7
45152: ARRAY
45153: PUSH
45154: LD_INT 2
45156: ARRAY
45157: PPUSH
45158: CALL_OW 546
45162: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
45163: LD_VAR 0 8
45167: PUSH
45168: LD_INT 1
45170: ARRAY
45171: PUSH
45172: LD_VAR 0 8
45176: PUSH
45177: LD_INT 2
45179: ARRAY
45180: PUSH
45181: LD_VAR 0 13
45185: PUSH
45186: LD_INT 2
45188: PLUS
45189: GREATER
45190: OR
45191: PUSH
45192: LD_VAR 0 8
45196: PUSH
45197: LD_INT 2
45199: ARRAY
45200: PUSH
45201: LD_VAR 0 13
45205: PUSH
45206: LD_INT 2
45208: MINUS
45209: LESS
45210: OR
45211: PUSH
45212: LD_VAR 0 8
45216: PUSH
45217: LD_INT 3
45219: ARRAY
45220: PUSH
45221: LD_INT 0
45223: PUSH
45224: LD_INT 8
45226: PUSH
45227: LD_INT 9
45229: PUSH
45230: LD_INT 10
45232: PUSH
45233: LD_INT 11
45235: PUSH
45236: LD_INT 12
45238: PUSH
45239: LD_INT 13
45241: PUSH
45242: LD_INT 16
45244: PUSH
45245: LD_INT 17
45247: PUSH
45248: LD_INT 18
45250: PUSH
45251: LD_INT 19
45253: PUSH
45254: LD_INT 20
45256: PUSH
45257: LD_INT 21
45259: PUSH
45260: EMPTY
45261: LIST
45262: LIST
45263: LIST
45264: LIST
45265: LIST
45266: LIST
45267: LIST
45268: LIST
45269: LIST
45270: LIST
45271: LIST
45272: LIST
45273: LIST
45274: IN
45275: NOT
45276: OR
45277: PUSH
45278: LD_VAR 0 8
45282: PUSH
45283: LD_INT 5
45285: ARRAY
45286: NOT
45287: OR
45288: PUSH
45289: LD_VAR 0 8
45293: PUSH
45294: LD_INT 6
45296: ARRAY
45297: PUSH
45298: LD_INT 1
45300: PUSH
45301: LD_INT 2
45303: PUSH
45304: LD_INT 7
45306: PUSH
45307: LD_INT 9
45309: PUSH
45310: LD_INT 10
45312: PUSH
45313: LD_INT 11
45315: PUSH
45316: EMPTY
45317: LIST
45318: LIST
45319: LIST
45320: LIST
45321: LIST
45322: LIST
45323: IN
45324: NOT
45325: OR
45326: IFFALSE 45332
// exit ;
45328: POP
45329: POP
45330: GO 45415
// end ;
45332: GO 45003
45334: POP
45335: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
45336: LD_VAR 0 9
45340: PPUSH
45341: LD_VAR 0 3
45345: PPUSH
45346: LD_VAR 0 4
45350: PPUSH
45351: LD_INT 20
45353: PPUSH
45354: CALL 37361 0 4
45358: PUSH
45359: LD_INT 4
45361: ARRAY
45362: IFFALSE 45366
// exit ;
45364: GO 45415
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
45366: LD_VAR 0 2
45370: PUSH
45371: LD_INT 29
45373: PUSH
45374: LD_INT 30
45376: PUSH
45377: EMPTY
45378: LIST
45379: LIST
45380: IN
45381: PUSH
45382: LD_VAR 0 3
45386: PPUSH
45387: LD_VAR 0 4
45391: PPUSH
45392: LD_VAR 0 9
45396: PPUSH
45397: CALL_OW 440
45401: NOT
45402: AND
45403: IFFALSE 45407
// exit ;
45405: GO 45415
// result := true ;
45407: LD_ADDR_VAR 0 6
45411: PUSH
45412: LD_INT 1
45414: ST_TO_ADDR
// end ;
45415: LD_VAR 0 6
45419: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
45420: LD_INT 0
45422: PPUSH
45423: PPUSH
45424: PPUSH
45425: PPUSH
45426: PPUSH
45427: PPUSH
45428: PPUSH
45429: PPUSH
45430: PPUSH
45431: PPUSH
45432: PPUSH
45433: PPUSH
45434: PPUSH
45435: PPUSH
45436: PPUSH
45437: PPUSH
45438: PPUSH
45439: PPUSH
45440: PPUSH
45441: PPUSH
45442: PPUSH
45443: PPUSH
45444: PPUSH
45445: PPUSH
45446: PPUSH
45447: PPUSH
45448: PPUSH
45449: PPUSH
45450: PPUSH
45451: PPUSH
45452: PPUSH
45453: PPUSH
45454: PPUSH
45455: PPUSH
45456: PPUSH
45457: PPUSH
45458: PPUSH
45459: PPUSH
45460: PPUSH
45461: PPUSH
45462: PPUSH
45463: PPUSH
45464: PPUSH
45465: PPUSH
45466: PPUSH
45467: PPUSH
45468: PPUSH
45469: PPUSH
45470: PPUSH
45471: PPUSH
45472: PPUSH
45473: PPUSH
45474: PPUSH
45475: PPUSH
45476: PPUSH
45477: PPUSH
45478: PPUSH
45479: PPUSH
// result = [ ] ;
45480: LD_ADDR_VAR 0 7
45484: PUSH
45485: EMPTY
45486: ST_TO_ADDR
// temp_list = [ ] ;
45487: LD_ADDR_VAR 0 9
45491: PUSH
45492: EMPTY
45493: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
45494: LD_VAR 0 4
45498: PUSH
45499: LD_INT 0
45501: PUSH
45502: LD_INT 1
45504: PUSH
45505: LD_INT 2
45507: PUSH
45508: LD_INT 3
45510: PUSH
45511: LD_INT 4
45513: PUSH
45514: LD_INT 5
45516: PUSH
45517: EMPTY
45518: LIST
45519: LIST
45520: LIST
45521: LIST
45522: LIST
45523: LIST
45524: IN
45525: NOT
45526: PUSH
45527: LD_VAR 0 1
45531: PUSH
45532: LD_INT 0
45534: PUSH
45535: LD_INT 1
45537: PUSH
45538: EMPTY
45539: LIST
45540: LIST
45541: IN
45542: PUSH
45543: LD_VAR 0 5
45547: PUSH
45548: LD_INT 1
45550: PUSH
45551: LD_INT 2
45553: PUSH
45554: LD_INT 3
45556: PUSH
45557: EMPTY
45558: LIST
45559: LIST
45560: LIST
45561: IN
45562: NOT
45563: AND
45564: OR
45565: IFFALSE 45569
// exit ;
45567: GO 63960
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
45569: LD_VAR 0 1
45573: PUSH
45574: LD_INT 6
45576: PUSH
45577: LD_INT 7
45579: PUSH
45580: LD_INT 8
45582: PUSH
45583: LD_INT 13
45585: PUSH
45586: LD_INT 12
45588: PUSH
45589: LD_INT 15
45591: PUSH
45592: LD_INT 11
45594: PUSH
45595: LD_INT 14
45597: PUSH
45598: LD_INT 10
45600: PUSH
45601: EMPTY
45602: LIST
45603: LIST
45604: LIST
45605: LIST
45606: LIST
45607: LIST
45608: LIST
45609: LIST
45610: LIST
45611: IN
45612: IFFALSE 45622
// btype = b_lab ;
45614: LD_ADDR_VAR 0 1
45618: PUSH
45619: LD_INT 6
45621: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
45622: LD_VAR 0 6
45626: PUSH
45627: LD_INT 0
45629: PUSH
45630: LD_INT 1
45632: PUSH
45633: LD_INT 2
45635: PUSH
45636: EMPTY
45637: LIST
45638: LIST
45639: LIST
45640: IN
45641: NOT
45642: PUSH
45643: LD_VAR 0 1
45647: PUSH
45648: LD_INT 0
45650: PUSH
45651: LD_INT 1
45653: PUSH
45654: LD_INT 2
45656: PUSH
45657: LD_INT 3
45659: PUSH
45660: LD_INT 6
45662: PUSH
45663: LD_INT 36
45665: PUSH
45666: LD_INT 4
45668: PUSH
45669: LD_INT 5
45671: PUSH
45672: LD_INT 31
45674: PUSH
45675: LD_INT 32
45677: PUSH
45678: LD_INT 33
45680: PUSH
45681: EMPTY
45682: LIST
45683: LIST
45684: LIST
45685: LIST
45686: LIST
45687: LIST
45688: LIST
45689: LIST
45690: LIST
45691: LIST
45692: LIST
45693: IN
45694: NOT
45695: PUSH
45696: LD_VAR 0 6
45700: PUSH
45701: LD_INT 1
45703: EQUAL
45704: AND
45705: OR
45706: PUSH
45707: LD_VAR 0 1
45711: PUSH
45712: LD_INT 2
45714: PUSH
45715: LD_INT 3
45717: PUSH
45718: EMPTY
45719: LIST
45720: LIST
45721: IN
45722: NOT
45723: PUSH
45724: LD_VAR 0 6
45728: PUSH
45729: LD_INT 2
45731: EQUAL
45732: AND
45733: OR
45734: IFFALSE 45744
// mode = 0 ;
45736: LD_ADDR_VAR 0 6
45740: PUSH
45741: LD_INT 0
45743: ST_TO_ADDR
// case mode of 0 :
45744: LD_VAR 0 6
45748: PUSH
45749: LD_INT 0
45751: DOUBLE
45752: EQUAL
45753: IFTRUE 45757
45755: GO 57210
45757: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45758: LD_ADDR_VAR 0 11
45762: PUSH
45763: LD_INT 0
45765: PUSH
45766: LD_INT 0
45768: PUSH
45769: EMPTY
45770: LIST
45771: LIST
45772: PUSH
45773: LD_INT 0
45775: PUSH
45776: LD_INT 1
45778: NEG
45779: PUSH
45780: EMPTY
45781: LIST
45782: LIST
45783: PUSH
45784: LD_INT 1
45786: PUSH
45787: LD_INT 0
45789: PUSH
45790: EMPTY
45791: LIST
45792: LIST
45793: PUSH
45794: LD_INT 1
45796: PUSH
45797: LD_INT 1
45799: PUSH
45800: EMPTY
45801: LIST
45802: LIST
45803: PUSH
45804: LD_INT 0
45806: PUSH
45807: LD_INT 1
45809: PUSH
45810: EMPTY
45811: LIST
45812: LIST
45813: PUSH
45814: LD_INT 1
45816: NEG
45817: PUSH
45818: LD_INT 0
45820: PUSH
45821: EMPTY
45822: LIST
45823: LIST
45824: PUSH
45825: LD_INT 1
45827: NEG
45828: PUSH
45829: LD_INT 1
45831: NEG
45832: PUSH
45833: EMPTY
45834: LIST
45835: LIST
45836: PUSH
45837: LD_INT 1
45839: NEG
45840: PUSH
45841: LD_INT 2
45843: NEG
45844: PUSH
45845: EMPTY
45846: LIST
45847: LIST
45848: PUSH
45849: LD_INT 0
45851: PUSH
45852: LD_INT 2
45854: NEG
45855: PUSH
45856: EMPTY
45857: LIST
45858: LIST
45859: PUSH
45860: LD_INT 1
45862: PUSH
45863: LD_INT 1
45865: NEG
45866: PUSH
45867: EMPTY
45868: LIST
45869: LIST
45870: PUSH
45871: LD_INT 1
45873: PUSH
45874: LD_INT 2
45876: PUSH
45877: EMPTY
45878: LIST
45879: LIST
45880: PUSH
45881: LD_INT 0
45883: PUSH
45884: LD_INT 2
45886: PUSH
45887: EMPTY
45888: LIST
45889: LIST
45890: PUSH
45891: LD_INT 1
45893: NEG
45894: PUSH
45895: LD_INT 1
45897: PUSH
45898: EMPTY
45899: LIST
45900: LIST
45901: PUSH
45902: LD_INT 1
45904: PUSH
45905: LD_INT 3
45907: PUSH
45908: EMPTY
45909: LIST
45910: LIST
45911: PUSH
45912: LD_INT 0
45914: PUSH
45915: LD_INT 3
45917: PUSH
45918: EMPTY
45919: LIST
45920: LIST
45921: PUSH
45922: LD_INT 1
45924: NEG
45925: PUSH
45926: LD_INT 2
45928: PUSH
45929: EMPTY
45930: LIST
45931: LIST
45932: PUSH
45933: EMPTY
45934: LIST
45935: LIST
45936: LIST
45937: LIST
45938: LIST
45939: LIST
45940: LIST
45941: LIST
45942: LIST
45943: LIST
45944: LIST
45945: LIST
45946: LIST
45947: LIST
45948: LIST
45949: LIST
45950: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45951: LD_ADDR_VAR 0 12
45955: PUSH
45956: LD_INT 0
45958: PUSH
45959: LD_INT 0
45961: PUSH
45962: EMPTY
45963: LIST
45964: LIST
45965: PUSH
45966: LD_INT 0
45968: PUSH
45969: LD_INT 1
45971: NEG
45972: PUSH
45973: EMPTY
45974: LIST
45975: LIST
45976: PUSH
45977: LD_INT 1
45979: PUSH
45980: LD_INT 0
45982: PUSH
45983: EMPTY
45984: LIST
45985: LIST
45986: PUSH
45987: LD_INT 1
45989: PUSH
45990: LD_INT 1
45992: PUSH
45993: EMPTY
45994: LIST
45995: LIST
45996: PUSH
45997: LD_INT 0
45999: PUSH
46000: LD_INT 1
46002: PUSH
46003: EMPTY
46004: LIST
46005: LIST
46006: PUSH
46007: LD_INT 1
46009: NEG
46010: PUSH
46011: LD_INT 0
46013: PUSH
46014: EMPTY
46015: LIST
46016: LIST
46017: PUSH
46018: LD_INT 1
46020: NEG
46021: PUSH
46022: LD_INT 1
46024: NEG
46025: PUSH
46026: EMPTY
46027: LIST
46028: LIST
46029: PUSH
46030: LD_INT 1
46032: PUSH
46033: LD_INT 1
46035: NEG
46036: PUSH
46037: EMPTY
46038: LIST
46039: LIST
46040: PUSH
46041: LD_INT 2
46043: PUSH
46044: LD_INT 0
46046: PUSH
46047: EMPTY
46048: LIST
46049: LIST
46050: PUSH
46051: LD_INT 2
46053: PUSH
46054: LD_INT 1
46056: PUSH
46057: EMPTY
46058: LIST
46059: LIST
46060: PUSH
46061: LD_INT 1
46063: NEG
46064: PUSH
46065: LD_INT 1
46067: PUSH
46068: EMPTY
46069: LIST
46070: LIST
46071: PUSH
46072: LD_INT 2
46074: NEG
46075: PUSH
46076: LD_INT 0
46078: PUSH
46079: EMPTY
46080: LIST
46081: LIST
46082: PUSH
46083: LD_INT 2
46085: NEG
46086: PUSH
46087: LD_INT 1
46089: NEG
46090: PUSH
46091: EMPTY
46092: LIST
46093: LIST
46094: PUSH
46095: LD_INT 2
46097: NEG
46098: PUSH
46099: LD_INT 1
46101: PUSH
46102: EMPTY
46103: LIST
46104: LIST
46105: PUSH
46106: LD_INT 3
46108: NEG
46109: PUSH
46110: LD_INT 0
46112: PUSH
46113: EMPTY
46114: LIST
46115: LIST
46116: PUSH
46117: LD_INT 3
46119: NEG
46120: PUSH
46121: LD_INT 1
46123: NEG
46124: PUSH
46125: EMPTY
46126: LIST
46127: LIST
46128: PUSH
46129: EMPTY
46130: LIST
46131: LIST
46132: LIST
46133: LIST
46134: LIST
46135: LIST
46136: LIST
46137: LIST
46138: LIST
46139: LIST
46140: LIST
46141: LIST
46142: LIST
46143: LIST
46144: LIST
46145: LIST
46146: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46147: LD_ADDR_VAR 0 13
46151: PUSH
46152: LD_INT 0
46154: PUSH
46155: LD_INT 0
46157: PUSH
46158: EMPTY
46159: LIST
46160: LIST
46161: PUSH
46162: LD_INT 0
46164: PUSH
46165: LD_INT 1
46167: NEG
46168: PUSH
46169: EMPTY
46170: LIST
46171: LIST
46172: PUSH
46173: LD_INT 1
46175: PUSH
46176: LD_INT 0
46178: PUSH
46179: EMPTY
46180: LIST
46181: LIST
46182: PUSH
46183: LD_INT 1
46185: PUSH
46186: LD_INT 1
46188: PUSH
46189: EMPTY
46190: LIST
46191: LIST
46192: PUSH
46193: LD_INT 0
46195: PUSH
46196: LD_INT 1
46198: PUSH
46199: EMPTY
46200: LIST
46201: LIST
46202: PUSH
46203: LD_INT 1
46205: NEG
46206: PUSH
46207: LD_INT 0
46209: PUSH
46210: EMPTY
46211: LIST
46212: LIST
46213: PUSH
46214: LD_INT 1
46216: NEG
46217: PUSH
46218: LD_INT 1
46220: NEG
46221: PUSH
46222: EMPTY
46223: LIST
46224: LIST
46225: PUSH
46226: LD_INT 1
46228: NEG
46229: PUSH
46230: LD_INT 2
46232: NEG
46233: PUSH
46234: EMPTY
46235: LIST
46236: LIST
46237: PUSH
46238: LD_INT 2
46240: PUSH
46241: LD_INT 1
46243: PUSH
46244: EMPTY
46245: LIST
46246: LIST
46247: PUSH
46248: LD_INT 2
46250: PUSH
46251: LD_INT 2
46253: PUSH
46254: EMPTY
46255: LIST
46256: LIST
46257: PUSH
46258: LD_INT 1
46260: PUSH
46261: LD_INT 2
46263: PUSH
46264: EMPTY
46265: LIST
46266: LIST
46267: PUSH
46268: LD_INT 2
46270: NEG
46271: PUSH
46272: LD_INT 1
46274: NEG
46275: PUSH
46276: EMPTY
46277: LIST
46278: LIST
46279: PUSH
46280: LD_INT 2
46282: NEG
46283: PUSH
46284: LD_INT 2
46286: NEG
46287: PUSH
46288: EMPTY
46289: LIST
46290: LIST
46291: PUSH
46292: LD_INT 2
46294: NEG
46295: PUSH
46296: LD_INT 3
46298: NEG
46299: PUSH
46300: EMPTY
46301: LIST
46302: LIST
46303: PUSH
46304: LD_INT 3
46306: NEG
46307: PUSH
46308: LD_INT 2
46310: NEG
46311: PUSH
46312: EMPTY
46313: LIST
46314: LIST
46315: PUSH
46316: LD_INT 3
46318: NEG
46319: PUSH
46320: LD_INT 3
46322: NEG
46323: PUSH
46324: EMPTY
46325: LIST
46326: LIST
46327: PUSH
46328: EMPTY
46329: LIST
46330: LIST
46331: LIST
46332: LIST
46333: LIST
46334: LIST
46335: LIST
46336: LIST
46337: LIST
46338: LIST
46339: LIST
46340: LIST
46341: LIST
46342: LIST
46343: LIST
46344: LIST
46345: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46346: LD_ADDR_VAR 0 14
46350: PUSH
46351: LD_INT 0
46353: PUSH
46354: LD_INT 0
46356: PUSH
46357: EMPTY
46358: LIST
46359: LIST
46360: PUSH
46361: LD_INT 0
46363: PUSH
46364: LD_INT 1
46366: NEG
46367: PUSH
46368: EMPTY
46369: LIST
46370: LIST
46371: PUSH
46372: LD_INT 1
46374: PUSH
46375: LD_INT 0
46377: PUSH
46378: EMPTY
46379: LIST
46380: LIST
46381: PUSH
46382: LD_INT 1
46384: PUSH
46385: LD_INT 1
46387: PUSH
46388: EMPTY
46389: LIST
46390: LIST
46391: PUSH
46392: LD_INT 0
46394: PUSH
46395: LD_INT 1
46397: PUSH
46398: EMPTY
46399: LIST
46400: LIST
46401: PUSH
46402: LD_INT 1
46404: NEG
46405: PUSH
46406: LD_INT 0
46408: PUSH
46409: EMPTY
46410: LIST
46411: LIST
46412: PUSH
46413: LD_INT 1
46415: NEG
46416: PUSH
46417: LD_INT 1
46419: NEG
46420: PUSH
46421: EMPTY
46422: LIST
46423: LIST
46424: PUSH
46425: LD_INT 1
46427: NEG
46428: PUSH
46429: LD_INT 2
46431: NEG
46432: PUSH
46433: EMPTY
46434: LIST
46435: LIST
46436: PUSH
46437: LD_INT 0
46439: PUSH
46440: LD_INT 2
46442: NEG
46443: PUSH
46444: EMPTY
46445: LIST
46446: LIST
46447: PUSH
46448: LD_INT 1
46450: PUSH
46451: LD_INT 1
46453: NEG
46454: PUSH
46455: EMPTY
46456: LIST
46457: LIST
46458: PUSH
46459: LD_INT 1
46461: PUSH
46462: LD_INT 2
46464: PUSH
46465: EMPTY
46466: LIST
46467: LIST
46468: PUSH
46469: LD_INT 0
46471: PUSH
46472: LD_INT 2
46474: PUSH
46475: EMPTY
46476: LIST
46477: LIST
46478: PUSH
46479: LD_INT 1
46481: NEG
46482: PUSH
46483: LD_INT 1
46485: PUSH
46486: EMPTY
46487: LIST
46488: LIST
46489: PUSH
46490: LD_INT 1
46492: NEG
46493: PUSH
46494: LD_INT 3
46496: NEG
46497: PUSH
46498: EMPTY
46499: LIST
46500: LIST
46501: PUSH
46502: LD_INT 0
46504: PUSH
46505: LD_INT 3
46507: NEG
46508: PUSH
46509: EMPTY
46510: LIST
46511: LIST
46512: PUSH
46513: LD_INT 1
46515: PUSH
46516: LD_INT 2
46518: NEG
46519: PUSH
46520: EMPTY
46521: LIST
46522: LIST
46523: PUSH
46524: EMPTY
46525: LIST
46526: LIST
46527: LIST
46528: LIST
46529: LIST
46530: LIST
46531: LIST
46532: LIST
46533: LIST
46534: LIST
46535: LIST
46536: LIST
46537: LIST
46538: LIST
46539: LIST
46540: LIST
46541: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46542: LD_ADDR_VAR 0 15
46546: PUSH
46547: LD_INT 0
46549: PUSH
46550: LD_INT 0
46552: PUSH
46553: EMPTY
46554: LIST
46555: LIST
46556: PUSH
46557: LD_INT 0
46559: PUSH
46560: LD_INT 1
46562: NEG
46563: PUSH
46564: EMPTY
46565: LIST
46566: LIST
46567: PUSH
46568: LD_INT 1
46570: PUSH
46571: LD_INT 0
46573: PUSH
46574: EMPTY
46575: LIST
46576: LIST
46577: PUSH
46578: LD_INT 1
46580: PUSH
46581: LD_INT 1
46583: PUSH
46584: EMPTY
46585: LIST
46586: LIST
46587: PUSH
46588: LD_INT 0
46590: PUSH
46591: LD_INT 1
46593: PUSH
46594: EMPTY
46595: LIST
46596: LIST
46597: PUSH
46598: LD_INT 1
46600: NEG
46601: PUSH
46602: LD_INT 0
46604: PUSH
46605: EMPTY
46606: LIST
46607: LIST
46608: PUSH
46609: LD_INT 1
46611: NEG
46612: PUSH
46613: LD_INT 1
46615: NEG
46616: PUSH
46617: EMPTY
46618: LIST
46619: LIST
46620: PUSH
46621: LD_INT 1
46623: PUSH
46624: LD_INT 1
46626: NEG
46627: PUSH
46628: EMPTY
46629: LIST
46630: LIST
46631: PUSH
46632: LD_INT 2
46634: PUSH
46635: LD_INT 0
46637: PUSH
46638: EMPTY
46639: LIST
46640: LIST
46641: PUSH
46642: LD_INT 2
46644: PUSH
46645: LD_INT 1
46647: PUSH
46648: EMPTY
46649: LIST
46650: LIST
46651: PUSH
46652: LD_INT 1
46654: NEG
46655: PUSH
46656: LD_INT 1
46658: PUSH
46659: EMPTY
46660: LIST
46661: LIST
46662: PUSH
46663: LD_INT 2
46665: NEG
46666: PUSH
46667: LD_INT 0
46669: PUSH
46670: EMPTY
46671: LIST
46672: LIST
46673: PUSH
46674: LD_INT 2
46676: NEG
46677: PUSH
46678: LD_INT 1
46680: NEG
46681: PUSH
46682: EMPTY
46683: LIST
46684: LIST
46685: PUSH
46686: LD_INT 2
46688: PUSH
46689: LD_INT 1
46691: NEG
46692: PUSH
46693: EMPTY
46694: LIST
46695: LIST
46696: PUSH
46697: LD_INT 3
46699: PUSH
46700: LD_INT 0
46702: PUSH
46703: EMPTY
46704: LIST
46705: LIST
46706: PUSH
46707: LD_INT 3
46709: PUSH
46710: LD_INT 1
46712: PUSH
46713: EMPTY
46714: LIST
46715: LIST
46716: PUSH
46717: EMPTY
46718: LIST
46719: LIST
46720: LIST
46721: LIST
46722: LIST
46723: LIST
46724: LIST
46725: LIST
46726: LIST
46727: LIST
46728: LIST
46729: LIST
46730: LIST
46731: LIST
46732: LIST
46733: LIST
46734: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46735: LD_ADDR_VAR 0 16
46739: PUSH
46740: LD_INT 0
46742: PUSH
46743: LD_INT 0
46745: PUSH
46746: EMPTY
46747: LIST
46748: LIST
46749: PUSH
46750: LD_INT 0
46752: PUSH
46753: LD_INT 1
46755: NEG
46756: PUSH
46757: EMPTY
46758: LIST
46759: LIST
46760: PUSH
46761: LD_INT 1
46763: PUSH
46764: LD_INT 0
46766: PUSH
46767: EMPTY
46768: LIST
46769: LIST
46770: PUSH
46771: LD_INT 1
46773: PUSH
46774: LD_INT 1
46776: PUSH
46777: EMPTY
46778: LIST
46779: LIST
46780: PUSH
46781: LD_INT 0
46783: PUSH
46784: LD_INT 1
46786: PUSH
46787: EMPTY
46788: LIST
46789: LIST
46790: PUSH
46791: LD_INT 1
46793: NEG
46794: PUSH
46795: LD_INT 0
46797: PUSH
46798: EMPTY
46799: LIST
46800: LIST
46801: PUSH
46802: LD_INT 1
46804: NEG
46805: PUSH
46806: LD_INT 1
46808: NEG
46809: PUSH
46810: EMPTY
46811: LIST
46812: LIST
46813: PUSH
46814: LD_INT 1
46816: NEG
46817: PUSH
46818: LD_INT 2
46820: NEG
46821: PUSH
46822: EMPTY
46823: LIST
46824: LIST
46825: PUSH
46826: LD_INT 2
46828: PUSH
46829: LD_INT 1
46831: PUSH
46832: EMPTY
46833: LIST
46834: LIST
46835: PUSH
46836: LD_INT 2
46838: PUSH
46839: LD_INT 2
46841: PUSH
46842: EMPTY
46843: LIST
46844: LIST
46845: PUSH
46846: LD_INT 1
46848: PUSH
46849: LD_INT 2
46851: PUSH
46852: EMPTY
46853: LIST
46854: LIST
46855: PUSH
46856: LD_INT 2
46858: NEG
46859: PUSH
46860: LD_INT 1
46862: NEG
46863: PUSH
46864: EMPTY
46865: LIST
46866: LIST
46867: PUSH
46868: LD_INT 2
46870: NEG
46871: PUSH
46872: LD_INT 2
46874: NEG
46875: PUSH
46876: EMPTY
46877: LIST
46878: LIST
46879: PUSH
46880: LD_INT 3
46882: PUSH
46883: LD_INT 2
46885: PUSH
46886: EMPTY
46887: LIST
46888: LIST
46889: PUSH
46890: LD_INT 3
46892: PUSH
46893: LD_INT 3
46895: PUSH
46896: EMPTY
46897: LIST
46898: LIST
46899: PUSH
46900: LD_INT 2
46902: PUSH
46903: LD_INT 3
46905: PUSH
46906: EMPTY
46907: LIST
46908: LIST
46909: PUSH
46910: EMPTY
46911: LIST
46912: LIST
46913: LIST
46914: LIST
46915: LIST
46916: LIST
46917: LIST
46918: LIST
46919: LIST
46920: LIST
46921: LIST
46922: LIST
46923: LIST
46924: LIST
46925: LIST
46926: LIST
46927: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46928: LD_ADDR_VAR 0 17
46932: PUSH
46933: LD_INT 0
46935: PUSH
46936: LD_INT 0
46938: PUSH
46939: EMPTY
46940: LIST
46941: LIST
46942: PUSH
46943: LD_INT 0
46945: PUSH
46946: LD_INT 1
46948: NEG
46949: PUSH
46950: EMPTY
46951: LIST
46952: LIST
46953: PUSH
46954: LD_INT 1
46956: PUSH
46957: LD_INT 0
46959: PUSH
46960: EMPTY
46961: LIST
46962: LIST
46963: PUSH
46964: LD_INT 1
46966: PUSH
46967: LD_INT 1
46969: PUSH
46970: EMPTY
46971: LIST
46972: LIST
46973: PUSH
46974: LD_INT 0
46976: PUSH
46977: LD_INT 1
46979: PUSH
46980: EMPTY
46981: LIST
46982: LIST
46983: PUSH
46984: LD_INT 1
46986: NEG
46987: PUSH
46988: LD_INT 0
46990: PUSH
46991: EMPTY
46992: LIST
46993: LIST
46994: PUSH
46995: LD_INT 1
46997: NEG
46998: PUSH
46999: LD_INT 1
47001: NEG
47002: PUSH
47003: EMPTY
47004: LIST
47005: LIST
47006: PUSH
47007: LD_INT 1
47009: NEG
47010: PUSH
47011: LD_INT 2
47013: NEG
47014: PUSH
47015: EMPTY
47016: LIST
47017: LIST
47018: PUSH
47019: LD_INT 0
47021: PUSH
47022: LD_INT 2
47024: NEG
47025: PUSH
47026: EMPTY
47027: LIST
47028: LIST
47029: PUSH
47030: LD_INT 1
47032: PUSH
47033: LD_INT 1
47035: NEG
47036: PUSH
47037: EMPTY
47038: LIST
47039: LIST
47040: PUSH
47041: LD_INT 2
47043: PUSH
47044: LD_INT 0
47046: PUSH
47047: EMPTY
47048: LIST
47049: LIST
47050: PUSH
47051: LD_INT 2
47053: PUSH
47054: LD_INT 1
47056: PUSH
47057: EMPTY
47058: LIST
47059: LIST
47060: PUSH
47061: LD_INT 2
47063: PUSH
47064: LD_INT 2
47066: PUSH
47067: EMPTY
47068: LIST
47069: LIST
47070: PUSH
47071: LD_INT 1
47073: PUSH
47074: LD_INT 2
47076: PUSH
47077: EMPTY
47078: LIST
47079: LIST
47080: PUSH
47081: LD_INT 0
47083: PUSH
47084: LD_INT 2
47086: PUSH
47087: EMPTY
47088: LIST
47089: LIST
47090: PUSH
47091: LD_INT 1
47093: NEG
47094: PUSH
47095: LD_INT 1
47097: PUSH
47098: EMPTY
47099: LIST
47100: LIST
47101: PUSH
47102: LD_INT 2
47104: NEG
47105: PUSH
47106: LD_INT 0
47108: PUSH
47109: EMPTY
47110: LIST
47111: LIST
47112: PUSH
47113: LD_INT 2
47115: NEG
47116: PUSH
47117: LD_INT 1
47119: NEG
47120: PUSH
47121: EMPTY
47122: LIST
47123: LIST
47124: PUSH
47125: LD_INT 2
47127: NEG
47128: PUSH
47129: LD_INT 2
47131: NEG
47132: PUSH
47133: EMPTY
47134: LIST
47135: LIST
47136: PUSH
47137: EMPTY
47138: LIST
47139: LIST
47140: LIST
47141: LIST
47142: LIST
47143: LIST
47144: LIST
47145: LIST
47146: LIST
47147: LIST
47148: LIST
47149: LIST
47150: LIST
47151: LIST
47152: LIST
47153: LIST
47154: LIST
47155: LIST
47156: LIST
47157: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47158: LD_ADDR_VAR 0 18
47162: PUSH
47163: LD_INT 0
47165: PUSH
47166: LD_INT 0
47168: PUSH
47169: EMPTY
47170: LIST
47171: LIST
47172: PUSH
47173: LD_INT 0
47175: PUSH
47176: LD_INT 1
47178: NEG
47179: PUSH
47180: EMPTY
47181: LIST
47182: LIST
47183: PUSH
47184: LD_INT 1
47186: PUSH
47187: LD_INT 0
47189: PUSH
47190: EMPTY
47191: LIST
47192: LIST
47193: PUSH
47194: LD_INT 1
47196: PUSH
47197: LD_INT 1
47199: PUSH
47200: EMPTY
47201: LIST
47202: LIST
47203: PUSH
47204: LD_INT 0
47206: PUSH
47207: LD_INT 1
47209: PUSH
47210: EMPTY
47211: LIST
47212: LIST
47213: PUSH
47214: LD_INT 1
47216: NEG
47217: PUSH
47218: LD_INT 0
47220: PUSH
47221: EMPTY
47222: LIST
47223: LIST
47224: PUSH
47225: LD_INT 1
47227: NEG
47228: PUSH
47229: LD_INT 1
47231: NEG
47232: PUSH
47233: EMPTY
47234: LIST
47235: LIST
47236: PUSH
47237: LD_INT 1
47239: NEG
47240: PUSH
47241: LD_INT 2
47243: NEG
47244: PUSH
47245: EMPTY
47246: LIST
47247: LIST
47248: PUSH
47249: LD_INT 0
47251: PUSH
47252: LD_INT 2
47254: NEG
47255: PUSH
47256: EMPTY
47257: LIST
47258: LIST
47259: PUSH
47260: LD_INT 1
47262: PUSH
47263: LD_INT 1
47265: NEG
47266: PUSH
47267: EMPTY
47268: LIST
47269: LIST
47270: PUSH
47271: LD_INT 2
47273: PUSH
47274: LD_INT 0
47276: PUSH
47277: EMPTY
47278: LIST
47279: LIST
47280: PUSH
47281: LD_INT 2
47283: PUSH
47284: LD_INT 1
47286: PUSH
47287: EMPTY
47288: LIST
47289: LIST
47290: PUSH
47291: LD_INT 2
47293: PUSH
47294: LD_INT 2
47296: PUSH
47297: EMPTY
47298: LIST
47299: LIST
47300: PUSH
47301: LD_INT 1
47303: PUSH
47304: LD_INT 2
47306: PUSH
47307: EMPTY
47308: LIST
47309: LIST
47310: PUSH
47311: LD_INT 0
47313: PUSH
47314: LD_INT 2
47316: PUSH
47317: EMPTY
47318: LIST
47319: LIST
47320: PUSH
47321: LD_INT 1
47323: NEG
47324: PUSH
47325: LD_INT 1
47327: PUSH
47328: EMPTY
47329: LIST
47330: LIST
47331: PUSH
47332: LD_INT 2
47334: NEG
47335: PUSH
47336: LD_INT 0
47338: PUSH
47339: EMPTY
47340: LIST
47341: LIST
47342: PUSH
47343: LD_INT 2
47345: NEG
47346: PUSH
47347: LD_INT 1
47349: NEG
47350: PUSH
47351: EMPTY
47352: LIST
47353: LIST
47354: PUSH
47355: LD_INT 2
47357: NEG
47358: PUSH
47359: LD_INT 2
47361: NEG
47362: PUSH
47363: EMPTY
47364: LIST
47365: LIST
47366: PUSH
47367: EMPTY
47368: LIST
47369: LIST
47370: LIST
47371: LIST
47372: LIST
47373: LIST
47374: LIST
47375: LIST
47376: LIST
47377: LIST
47378: LIST
47379: LIST
47380: LIST
47381: LIST
47382: LIST
47383: LIST
47384: LIST
47385: LIST
47386: LIST
47387: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47388: LD_ADDR_VAR 0 19
47392: PUSH
47393: LD_INT 0
47395: PUSH
47396: LD_INT 0
47398: PUSH
47399: EMPTY
47400: LIST
47401: LIST
47402: PUSH
47403: LD_INT 0
47405: PUSH
47406: LD_INT 1
47408: NEG
47409: PUSH
47410: EMPTY
47411: LIST
47412: LIST
47413: PUSH
47414: LD_INT 1
47416: PUSH
47417: LD_INT 0
47419: PUSH
47420: EMPTY
47421: LIST
47422: LIST
47423: PUSH
47424: LD_INT 1
47426: PUSH
47427: LD_INT 1
47429: PUSH
47430: EMPTY
47431: LIST
47432: LIST
47433: PUSH
47434: LD_INT 0
47436: PUSH
47437: LD_INT 1
47439: PUSH
47440: EMPTY
47441: LIST
47442: LIST
47443: PUSH
47444: LD_INT 1
47446: NEG
47447: PUSH
47448: LD_INT 0
47450: PUSH
47451: EMPTY
47452: LIST
47453: LIST
47454: PUSH
47455: LD_INT 1
47457: NEG
47458: PUSH
47459: LD_INT 1
47461: NEG
47462: PUSH
47463: EMPTY
47464: LIST
47465: LIST
47466: PUSH
47467: LD_INT 1
47469: NEG
47470: PUSH
47471: LD_INT 2
47473: NEG
47474: PUSH
47475: EMPTY
47476: LIST
47477: LIST
47478: PUSH
47479: LD_INT 0
47481: PUSH
47482: LD_INT 2
47484: NEG
47485: PUSH
47486: EMPTY
47487: LIST
47488: LIST
47489: PUSH
47490: LD_INT 1
47492: PUSH
47493: LD_INT 1
47495: NEG
47496: PUSH
47497: EMPTY
47498: LIST
47499: LIST
47500: PUSH
47501: LD_INT 2
47503: PUSH
47504: LD_INT 0
47506: PUSH
47507: EMPTY
47508: LIST
47509: LIST
47510: PUSH
47511: LD_INT 2
47513: PUSH
47514: LD_INT 1
47516: PUSH
47517: EMPTY
47518: LIST
47519: LIST
47520: PUSH
47521: LD_INT 2
47523: PUSH
47524: LD_INT 2
47526: PUSH
47527: EMPTY
47528: LIST
47529: LIST
47530: PUSH
47531: LD_INT 1
47533: PUSH
47534: LD_INT 2
47536: PUSH
47537: EMPTY
47538: LIST
47539: LIST
47540: PUSH
47541: LD_INT 0
47543: PUSH
47544: LD_INT 2
47546: PUSH
47547: EMPTY
47548: LIST
47549: LIST
47550: PUSH
47551: LD_INT 1
47553: NEG
47554: PUSH
47555: LD_INT 1
47557: PUSH
47558: EMPTY
47559: LIST
47560: LIST
47561: PUSH
47562: LD_INT 2
47564: NEG
47565: PUSH
47566: LD_INT 0
47568: PUSH
47569: EMPTY
47570: LIST
47571: LIST
47572: PUSH
47573: LD_INT 2
47575: NEG
47576: PUSH
47577: LD_INT 1
47579: NEG
47580: PUSH
47581: EMPTY
47582: LIST
47583: LIST
47584: PUSH
47585: LD_INT 2
47587: NEG
47588: PUSH
47589: LD_INT 2
47591: NEG
47592: PUSH
47593: EMPTY
47594: LIST
47595: LIST
47596: PUSH
47597: EMPTY
47598: LIST
47599: LIST
47600: LIST
47601: LIST
47602: LIST
47603: LIST
47604: LIST
47605: LIST
47606: LIST
47607: LIST
47608: LIST
47609: LIST
47610: LIST
47611: LIST
47612: LIST
47613: LIST
47614: LIST
47615: LIST
47616: LIST
47617: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47618: LD_ADDR_VAR 0 20
47622: PUSH
47623: LD_INT 0
47625: PUSH
47626: LD_INT 0
47628: PUSH
47629: EMPTY
47630: LIST
47631: LIST
47632: PUSH
47633: LD_INT 0
47635: PUSH
47636: LD_INT 1
47638: NEG
47639: PUSH
47640: EMPTY
47641: LIST
47642: LIST
47643: PUSH
47644: LD_INT 1
47646: PUSH
47647: LD_INT 0
47649: PUSH
47650: EMPTY
47651: LIST
47652: LIST
47653: PUSH
47654: LD_INT 1
47656: PUSH
47657: LD_INT 1
47659: PUSH
47660: EMPTY
47661: LIST
47662: LIST
47663: PUSH
47664: LD_INT 0
47666: PUSH
47667: LD_INT 1
47669: PUSH
47670: EMPTY
47671: LIST
47672: LIST
47673: PUSH
47674: LD_INT 1
47676: NEG
47677: PUSH
47678: LD_INT 0
47680: PUSH
47681: EMPTY
47682: LIST
47683: LIST
47684: PUSH
47685: LD_INT 1
47687: NEG
47688: PUSH
47689: LD_INT 1
47691: NEG
47692: PUSH
47693: EMPTY
47694: LIST
47695: LIST
47696: PUSH
47697: LD_INT 1
47699: NEG
47700: PUSH
47701: LD_INT 2
47703: NEG
47704: PUSH
47705: EMPTY
47706: LIST
47707: LIST
47708: PUSH
47709: LD_INT 0
47711: PUSH
47712: LD_INT 2
47714: NEG
47715: PUSH
47716: EMPTY
47717: LIST
47718: LIST
47719: PUSH
47720: LD_INT 1
47722: PUSH
47723: LD_INT 1
47725: NEG
47726: PUSH
47727: EMPTY
47728: LIST
47729: LIST
47730: PUSH
47731: LD_INT 2
47733: PUSH
47734: LD_INT 0
47736: PUSH
47737: EMPTY
47738: LIST
47739: LIST
47740: PUSH
47741: LD_INT 2
47743: PUSH
47744: LD_INT 1
47746: PUSH
47747: EMPTY
47748: LIST
47749: LIST
47750: PUSH
47751: LD_INT 2
47753: PUSH
47754: LD_INT 2
47756: PUSH
47757: EMPTY
47758: LIST
47759: LIST
47760: PUSH
47761: LD_INT 1
47763: PUSH
47764: LD_INT 2
47766: PUSH
47767: EMPTY
47768: LIST
47769: LIST
47770: PUSH
47771: LD_INT 0
47773: PUSH
47774: LD_INT 2
47776: PUSH
47777: EMPTY
47778: LIST
47779: LIST
47780: PUSH
47781: LD_INT 1
47783: NEG
47784: PUSH
47785: LD_INT 1
47787: PUSH
47788: EMPTY
47789: LIST
47790: LIST
47791: PUSH
47792: LD_INT 2
47794: NEG
47795: PUSH
47796: LD_INT 0
47798: PUSH
47799: EMPTY
47800: LIST
47801: LIST
47802: PUSH
47803: LD_INT 2
47805: NEG
47806: PUSH
47807: LD_INT 1
47809: NEG
47810: PUSH
47811: EMPTY
47812: LIST
47813: LIST
47814: PUSH
47815: LD_INT 2
47817: NEG
47818: PUSH
47819: LD_INT 2
47821: NEG
47822: PUSH
47823: EMPTY
47824: LIST
47825: LIST
47826: PUSH
47827: EMPTY
47828: LIST
47829: LIST
47830: LIST
47831: LIST
47832: LIST
47833: LIST
47834: LIST
47835: LIST
47836: LIST
47837: LIST
47838: LIST
47839: LIST
47840: LIST
47841: LIST
47842: LIST
47843: LIST
47844: LIST
47845: LIST
47846: LIST
47847: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47848: LD_ADDR_VAR 0 21
47852: PUSH
47853: LD_INT 0
47855: PUSH
47856: LD_INT 0
47858: PUSH
47859: EMPTY
47860: LIST
47861: LIST
47862: PUSH
47863: LD_INT 0
47865: PUSH
47866: LD_INT 1
47868: NEG
47869: PUSH
47870: EMPTY
47871: LIST
47872: LIST
47873: PUSH
47874: LD_INT 1
47876: PUSH
47877: LD_INT 0
47879: PUSH
47880: EMPTY
47881: LIST
47882: LIST
47883: PUSH
47884: LD_INT 1
47886: PUSH
47887: LD_INT 1
47889: PUSH
47890: EMPTY
47891: LIST
47892: LIST
47893: PUSH
47894: LD_INT 0
47896: PUSH
47897: LD_INT 1
47899: PUSH
47900: EMPTY
47901: LIST
47902: LIST
47903: PUSH
47904: LD_INT 1
47906: NEG
47907: PUSH
47908: LD_INT 0
47910: PUSH
47911: EMPTY
47912: LIST
47913: LIST
47914: PUSH
47915: LD_INT 1
47917: NEG
47918: PUSH
47919: LD_INT 1
47921: NEG
47922: PUSH
47923: EMPTY
47924: LIST
47925: LIST
47926: PUSH
47927: LD_INT 1
47929: NEG
47930: PUSH
47931: LD_INT 2
47933: NEG
47934: PUSH
47935: EMPTY
47936: LIST
47937: LIST
47938: PUSH
47939: LD_INT 0
47941: PUSH
47942: LD_INT 2
47944: NEG
47945: PUSH
47946: EMPTY
47947: LIST
47948: LIST
47949: PUSH
47950: LD_INT 1
47952: PUSH
47953: LD_INT 1
47955: NEG
47956: PUSH
47957: EMPTY
47958: LIST
47959: LIST
47960: PUSH
47961: LD_INT 2
47963: PUSH
47964: LD_INT 0
47966: PUSH
47967: EMPTY
47968: LIST
47969: LIST
47970: PUSH
47971: LD_INT 2
47973: PUSH
47974: LD_INT 1
47976: PUSH
47977: EMPTY
47978: LIST
47979: LIST
47980: PUSH
47981: LD_INT 2
47983: PUSH
47984: LD_INT 2
47986: PUSH
47987: EMPTY
47988: LIST
47989: LIST
47990: PUSH
47991: LD_INT 1
47993: PUSH
47994: LD_INT 2
47996: PUSH
47997: EMPTY
47998: LIST
47999: LIST
48000: PUSH
48001: LD_INT 0
48003: PUSH
48004: LD_INT 2
48006: PUSH
48007: EMPTY
48008: LIST
48009: LIST
48010: PUSH
48011: LD_INT 1
48013: NEG
48014: PUSH
48015: LD_INT 1
48017: PUSH
48018: EMPTY
48019: LIST
48020: LIST
48021: PUSH
48022: LD_INT 2
48024: NEG
48025: PUSH
48026: LD_INT 0
48028: PUSH
48029: EMPTY
48030: LIST
48031: LIST
48032: PUSH
48033: LD_INT 2
48035: NEG
48036: PUSH
48037: LD_INT 1
48039: NEG
48040: PUSH
48041: EMPTY
48042: LIST
48043: LIST
48044: PUSH
48045: LD_INT 2
48047: NEG
48048: PUSH
48049: LD_INT 2
48051: NEG
48052: PUSH
48053: EMPTY
48054: LIST
48055: LIST
48056: PUSH
48057: EMPTY
48058: LIST
48059: LIST
48060: LIST
48061: LIST
48062: LIST
48063: LIST
48064: LIST
48065: LIST
48066: LIST
48067: LIST
48068: LIST
48069: LIST
48070: LIST
48071: LIST
48072: LIST
48073: LIST
48074: LIST
48075: LIST
48076: LIST
48077: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48078: LD_ADDR_VAR 0 22
48082: PUSH
48083: LD_INT 0
48085: PUSH
48086: LD_INT 0
48088: PUSH
48089: EMPTY
48090: LIST
48091: LIST
48092: PUSH
48093: LD_INT 0
48095: PUSH
48096: LD_INT 1
48098: NEG
48099: PUSH
48100: EMPTY
48101: LIST
48102: LIST
48103: PUSH
48104: LD_INT 1
48106: PUSH
48107: LD_INT 0
48109: PUSH
48110: EMPTY
48111: LIST
48112: LIST
48113: PUSH
48114: LD_INT 1
48116: PUSH
48117: LD_INT 1
48119: PUSH
48120: EMPTY
48121: LIST
48122: LIST
48123: PUSH
48124: LD_INT 0
48126: PUSH
48127: LD_INT 1
48129: PUSH
48130: EMPTY
48131: LIST
48132: LIST
48133: PUSH
48134: LD_INT 1
48136: NEG
48137: PUSH
48138: LD_INT 0
48140: PUSH
48141: EMPTY
48142: LIST
48143: LIST
48144: PUSH
48145: LD_INT 1
48147: NEG
48148: PUSH
48149: LD_INT 1
48151: NEG
48152: PUSH
48153: EMPTY
48154: LIST
48155: LIST
48156: PUSH
48157: LD_INT 1
48159: NEG
48160: PUSH
48161: LD_INT 2
48163: NEG
48164: PUSH
48165: EMPTY
48166: LIST
48167: LIST
48168: PUSH
48169: LD_INT 0
48171: PUSH
48172: LD_INT 2
48174: NEG
48175: PUSH
48176: EMPTY
48177: LIST
48178: LIST
48179: PUSH
48180: LD_INT 1
48182: PUSH
48183: LD_INT 1
48185: NEG
48186: PUSH
48187: EMPTY
48188: LIST
48189: LIST
48190: PUSH
48191: LD_INT 2
48193: PUSH
48194: LD_INT 0
48196: PUSH
48197: EMPTY
48198: LIST
48199: LIST
48200: PUSH
48201: LD_INT 2
48203: PUSH
48204: LD_INT 1
48206: PUSH
48207: EMPTY
48208: LIST
48209: LIST
48210: PUSH
48211: LD_INT 2
48213: PUSH
48214: LD_INT 2
48216: PUSH
48217: EMPTY
48218: LIST
48219: LIST
48220: PUSH
48221: LD_INT 1
48223: PUSH
48224: LD_INT 2
48226: PUSH
48227: EMPTY
48228: LIST
48229: LIST
48230: PUSH
48231: LD_INT 0
48233: PUSH
48234: LD_INT 2
48236: PUSH
48237: EMPTY
48238: LIST
48239: LIST
48240: PUSH
48241: LD_INT 1
48243: NEG
48244: PUSH
48245: LD_INT 1
48247: PUSH
48248: EMPTY
48249: LIST
48250: LIST
48251: PUSH
48252: LD_INT 2
48254: NEG
48255: PUSH
48256: LD_INT 0
48258: PUSH
48259: EMPTY
48260: LIST
48261: LIST
48262: PUSH
48263: LD_INT 2
48265: NEG
48266: PUSH
48267: LD_INT 1
48269: NEG
48270: PUSH
48271: EMPTY
48272: LIST
48273: LIST
48274: PUSH
48275: LD_INT 2
48277: NEG
48278: PUSH
48279: LD_INT 2
48281: NEG
48282: PUSH
48283: EMPTY
48284: LIST
48285: LIST
48286: PUSH
48287: EMPTY
48288: LIST
48289: LIST
48290: LIST
48291: LIST
48292: LIST
48293: LIST
48294: LIST
48295: LIST
48296: LIST
48297: LIST
48298: LIST
48299: LIST
48300: LIST
48301: LIST
48302: LIST
48303: LIST
48304: LIST
48305: LIST
48306: LIST
48307: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
48308: LD_ADDR_VAR 0 23
48312: PUSH
48313: LD_INT 0
48315: PUSH
48316: LD_INT 0
48318: PUSH
48319: EMPTY
48320: LIST
48321: LIST
48322: PUSH
48323: LD_INT 0
48325: PUSH
48326: LD_INT 1
48328: NEG
48329: PUSH
48330: EMPTY
48331: LIST
48332: LIST
48333: PUSH
48334: LD_INT 1
48336: PUSH
48337: LD_INT 0
48339: PUSH
48340: EMPTY
48341: LIST
48342: LIST
48343: PUSH
48344: LD_INT 1
48346: PUSH
48347: LD_INT 1
48349: PUSH
48350: EMPTY
48351: LIST
48352: LIST
48353: PUSH
48354: LD_INT 0
48356: PUSH
48357: LD_INT 1
48359: PUSH
48360: EMPTY
48361: LIST
48362: LIST
48363: PUSH
48364: LD_INT 1
48366: NEG
48367: PUSH
48368: LD_INT 0
48370: PUSH
48371: EMPTY
48372: LIST
48373: LIST
48374: PUSH
48375: LD_INT 1
48377: NEG
48378: PUSH
48379: LD_INT 1
48381: NEG
48382: PUSH
48383: EMPTY
48384: LIST
48385: LIST
48386: PUSH
48387: LD_INT 1
48389: NEG
48390: PUSH
48391: LD_INT 2
48393: NEG
48394: PUSH
48395: EMPTY
48396: LIST
48397: LIST
48398: PUSH
48399: LD_INT 0
48401: PUSH
48402: LD_INT 2
48404: NEG
48405: PUSH
48406: EMPTY
48407: LIST
48408: LIST
48409: PUSH
48410: LD_INT 1
48412: PUSH
48413: LD_INT 1
48415: NEG
48416: PUSH
48417: EMPTY
48418: LIST
48419: LIST
48420: PUSH
48421: LD_INT 2
48423: PUSH
48424: LD_INT 0
48426: PUSH
48427: EMPTY
48428: LIST
48429: LIST
48430: PUSH
48431: LD_INT 2
48433: PUSH
48434: LD_INT 1
48436: PUSH
48437: EMPTY
48438: LIST
48439: LIST
48440: PUSH
48441: LD_INT 2
48443: PUSH
48444: LD_INT 2
48446: PUSH
48447: EMPTY
48448: LIST
48449: LIST
48450: PUSH
48451: LD_INT 1
48453: PUSH
48454: LD_INT 2
48456: PUSH
48457: EMPTY
48458: LIST
48459: LIST
48460: PUSH
48461: LD_INT 0
48463: PUSH
48464: LD_INT 2
48466: PUSH
48467: EMPTY
48468: LIST
48469: LIST
48470: PUSH
48471: LD_INT 1
48473: NEG
48474: PUSH
48475: LD_INT 1
48477: PUSH
48478: EMPTY
48479: LIST
48480: LIST
48481: PUSH
48482: LD_INT 2
48484: NEG
48485: PUSH
48486: LD_INT 0
48488: PUSH
48489: EMPTY
48490: LIST
48491: LIST
48492: PUSH
48493: LD_INT 2
48495: NEG
48496: PUSH
48497: LD_INT 1
48499: NEG
48500: PUSH
48501: EMPTY
48502: LIST
48503: LIST
48504: PUSH
48505: LD_INT 2
48507: NEG
48508: PUSH
48509: LD_INT 2
48511: NEG
48512: PUSH
48513: EMPTY
48514: LIST
48515: LIST
48516: PUSH
48517: LD_INT 2
48519: NEG
48520: PUSH
48521: LD_INT 3
48523: NEG
48524: PUSH
48525: EMPTY
48526: LIST
48527: LIST
48528: PUSH
48529: LD_INT 1
48531: NEG
48532: PUSH
48533: LD_INT 3
48535: NEG
48536: PUSH
48537: EMPTY
48538: LIST
48539: LIST
48540: PUSH
48541: LD_INT 1
48543: PUSH
48544: LD_INT 2
48546: NEG
48547: PUSH
48548: EMPTY
48549: LIST
48550: LIST
48551: PUSH
48552: LD_INT 2
48554: PUSH
48555: LD_INT 1
48557: NEG
48558: PUSH
48559: EMPTY
48560: LIST
48561: LIST
48562: PUSH
48563: EMPTY
48564: LIST
48565: LIST
48566: LIST
48567: LIST
48568: LIST
48569: LIST
48570: LIST
48571: LIST
48572: LIST
48573: LIST
48574: LIST
48575: LIST
48576: LIST
48577: LIST
48578: LIST
48579: LIST
48580: LIST
48581: LIST
48582: LIST
48583: LIST
48584: LIST
48585: LIST
48586: LIST
48587: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
48588: LD_ADDR_VAR 0 24
48592: PUSH
48593: LD_INT 0
48595: PUSH
48596: LD_INT 0
48598: PUSH
48599: EMPTY
48600: LIST
48601: LIST
48602: PUSH
48603: LD_INT 0
48605: PUSH
48606: LD_INT 1
48608: NEG
48609: PUSH
48610: EMPTY
48611: LIST
48612: LIST
48613: PUSH
48614: LD_INT 1
48616: PUSH
48617: LD_INT 0
48619: PUSH
48620: EMPTY
48621: LIST
48622: LIST
48623: PUSH
48624: LD_INT 1
48626: PUSH
48627: LD_INT 1
48629: PUSH
48630: EMPTY
48631: LIST
48632: LIST
48633: PUSH
48634: LD_INT 0
48636: PUSH
48637: LD_INT 1
48639: PUSH
48640: EMPTY
48641: LIST
48642: LIST
48643: PUSH
48644: LD_INT 1
48646: NEG
48647: PUSH
48648: LD_INT 0
48650: PUSH
48651: EMPTY
48652: LIST
48653: LIST
48654: PUSH
48655: LD_INT 1
48657: NEG
48658: PUSH
48659: LD_INT 1
48661: NEG
48662: PUSH
48663: EMPTY
48664: LIST
48665: LIST
48666: PUSH
48667: LD_INT 1
48669: NEG
48670: PUSH
48671: LD_INT 2
48673: NEG
48674: PUSH
48675: EMPTY
48676: LIST
48677: LIST
48678: PUSH
48679: LD_INT 0
48681: PUSH
48682: LD_INT 2
48684: NEG
48685: PUSH
48686: EMPTY
48687: LIST
48688: LIST
48689: PUSH
48690: LD_INT 1
48692: PUSH
48693: LD_INT 1
48695: NEG
48696: PUSH
48697: EMPTY
48698: LIST
48699: LIST
48700: PUSH
48701: LD_INT 2
48703: PUSH
48704: LD_INT 0
48706: PUSH
48707: EMPTY
48708: LIST
48709: LIST
48710: PUSH
48711: LD_INT 2
48713: PUSH
48714: LD_INT 1
48716: PUSH
48717: EMPTY
48718: LIST
48719: LIST
48720: PUSH
48721: LD_INT 2
48723: PUSH
48724: LD_INT 2
48726: PUSH
48727: EMPTY
48728: LIST
48729: LIST
48730: PUSH
48731: LD_INT 1
48733: PUSH
48734: LD_INT 2
48736: PUSH
48737: EMPTY
48738: LIST
48739: LIST
48740: PUSH
48741: LD_INT 0
48743: PUSH
48744: LD_INT 2
48746: PUSH
48747: EMPTY
48748: LIST
48749: LIST
48750: PUSH
48751: LD_INT 1
48753: NEG
48754: PUSH
48755: LD_INT 1
48757: PUSH
48758: EMPTY
48759: LIST
48760: LIST
48761: PUSH
48762: LD_INT 2
48764: NEG
48765: PUSH
48766: LD_INT 0
48768: PUSH
48769: EMPTY
48770: LIST
48771: LIST
48772: PUSH
48773: LD_INT 2
48775: NEG
48776: PUSH
48777: LD_INT 1
48779: NEG
48780: PUSH
48781: EMPTY
48782: LIST
48783: LIST
48784: PUSH
48785: LD_INT 2
48787: NEG
48788: PUSH
48789: LD_INT 2
48791: NEG
48792: PUSH
48793: EMPTY
48794: LIST
48795: LIST
48796: PUSH
48797: LD_INT 1
48799: PUSH
48800: LD_INT 2
48802: NEG
48803: PUSH
48804: EMPTY
48805: LIST
48806: LIST
48807: PUSH
48808: LD_INT 2
48810: PUSH
48811: LD_INT 1
48813: NEG
48814: PUSH
48815: EMPTY
48816: LIST
48817: LIST
48818: PUSH
48819: LD_INT 3
48821: PUSH
48822: LD_INT 1
48824: PUSH
48825: EMPTY
48826: LIST
48827: LIST
48828: PUSH
48829: LD_INT 3
48831: PUSH
48832: LD_INT 2
48834: PUSH
48835: EMPTY
48836: LIST
48837: LIST
48838: PUSH
48839: EMPTY
48840: LIST
48841: LIST
48842: LIST
48843: LIST
48844: LIST
48845: LIST
48846: LIST
48847: LIST
48848: LIST
48849: LIST
48850: LIST
48851: LIST
48852: LIST
48853: LIST
48854: LIST
48855: LIST
48856: LIST
48857: LIST
48858: LIST
48859: LIST
48860: LIST
48861: LIST
48862: LIST
48863: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
48864: LD_ADDR_VAR 0 25
48868: PUSH
48869: LD_INT 0
48871: PUSH
48872: LD_INT 0
48874: PUSH
48875: EMPTY
48876: LIST
48877: LIST
48878: PUSH
48879: LD_INT 0
48881: PUSH
48882: LD_INT 1
48884: NEG
48885: PUSH
48886: EMPTY
48887: LIST
48888: LIST
48889: PUSH
48890: LD_INT 1
48892: PUSH
48893: LD_INT 0
48895: PUSH
48896: EMPTY
48897: LIST
48898: LIST
48899: PUSH
48900: LD_INT 1
48902: PUSH
48903: LD_INT 1
48905: PUSH
48906: EMPTY
48907: LIST
48908: LIST
48909: PUSH
48910: LD_INT 0
48912: PUSH
48913: LD_INT 1
48915: PUSH
48916: EMPTY
48917: LIST
48918: LIST
48919: PUSH
48920: LD_INT 1
48922: NEG
48923: PUSH
48924: LD_INT 0
48926: PUSH
48927: EMPTY
48928: LIST
48929: LIST
48930: PUSH
48931: LD_INT 1
48933: NEG
48934: PUSH
48935: LD_INT 1
48937: NEG
48938: PUSH
48939: EMPTY
48940: LIST
48941: LIST
48942: PUSH
48943: LD_INT 1
48945: NEG
48946: PUSH
48947: LD_INT 2
48949: NEG
48950: PUSH
48951: EMPTY
48952: LIST
48953: LIST
48954: PUSH
48955: LD_INT 0
48957: PUSH
48958: LD_INT 2
48960: NEG
48961: PUSH
48962: EMPTY
48963: LIST
48964: LIST
48965: PUSH
48966: LD_INT 1
48968: PUSH
48969: LD_INT 1
48971: NEG
48972: PUSH
48973: EMPTY
48974: LIST
48975: LIST
48976: PUSH
48977: LD_INT 2
48979: PUSH
48980: LD_INT 0
48982: PUSH
48983: EMPTY
48984: LIST
48985: LIST
48986: PUSH
48987: LD_INT 2
48989: PUSH
48990: LD_INT 1
48992: PUSH
48993: EMPTY
48994: LIST
48995: LIST
48996: PUSH
48997: LD_INT 2
48999: PUSH
49000: LD_INT 2
49002: PUSH
49003: EMPTY
49004: LIST
49005: LIST
49006: PUSH
49007: LD_INT 1
49009: PUSH
49010: LD_INT 2
49012: PUSH
49013: EMPTY
49014: LIST
49015: LIST
49016: PUSH
49017: LD_INT 0
49019: PUSH
49020: LD_INT 2
49022: PUSH
49023: EMPTY
49024: LIST
49025: LIST
49026: PUSH
49027: LD_INT 1
49029: NEG
49030: PUSH
49031: LD_INT 1
49033: PUSH
49034: EMPTY
49035: LIST
49036: LIST
49037: PUSH
49038: LD_INT 2
49040: NEG
49041: PUSH
49042: LD_INT 0
49044: PUSH
49045: EMPTY
49046: LIST
49047: LIST
49048: PUSH
49049: LD_INT 2
49051: NEG
49052: PUSH
49053: LD_INT 1
49055: NEG
49056: PUSH
49057: EMPTY
49058: LIST
49059: LIST
49060: PUSH
49061: LD_INT 2
49063: NEG
49064: PUSH
49065: LD_INT 2
49067: NEG
49068: PUSH
49069: EMPTY
49070: LIST
49071: LIST
49072: PUSH
49073: LD_INT 3
49075: PUSH
49076: LD_INT 1
49078: PUSH
49079: EMPTY
49080: LIST
49081: LIST
49082: PUSH
49083: LD_INT 3
49085: PUSH
49086: LD_INT 2
49088: PUSH
49089: EMPTY
49090: LIST
49091: LIST
49092: PUSH
49093: LD_INT 2
49095: PUSH
49096: LD_INT 3
49098: PUSH
49099: EMPTY
49100: LIST
49101: LIST
49102: PUSH
49103: LD_INT 1
49105: PUSH
49106: LD_INT 3
49108: PUSH
49109: EMPTY
49110: LIST
49111: LIST
49112: PUSH
49113: EMPTY
49114: LIST
49115: LIST
49116: LIST
49117: LIST
49118: LIST
49119: LIST
49120: LIST
49121: LIST
49122: LIST
49123: LIST
49124: LIST
49125: LIST
49126: LIST
49127: LIST
49128: LIST
49129: LIST
49130: LIST
49131: LIST
49132: LIST
49133: LIST
49134: LIST
49135: LIST
49136: LIST
49137: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
49138: LD_ADDR_VAR 0 26
49142: PUSH
49143: LD_INT 0
49145: PUSH
49146: LD_INT 0
49148: PUSH
49149: EMPTY
49150: LIST
49151: LIST
49152: PUSH
49153: LD_INT 0
49155: PUSH
49156: LD_INT 1
49158: NEG
49159: PUSH
49160: EMPTY
49161: LIST
49162: LIST
49163: PUSH
49164: LD_INT 1
49166: PUSH
49167: LD_INT 0
49169: PUSH
49170: EMPTY
49171: LIST
49172: LIST
49173: PUSH
49174: LD_INT 1
49176: PUSH
49177: LD_INT 1
49179: PUSH
49180: EMPTY
49181: LIST
49182: LIST
49183: PUSH
49184: LD_INT 0
49186: PUSH
49187: LD_INT 1
49189: PUSH
49190: EMPTY
49191: LIST
49192: LIST
49193: PUSH
49194: LD_INT 1
49196: NEG
49197: PUSH
49198: LD_INT 0
49200: PUSH
49201: EMPTY
49202: LIST
49203: LIST
49204: PUSH
49205: LD_INT 1
49207: NEG
49208: PUSH
49209: LD_INT 1
49211: NEG
49212: PUSH
49213: EMPTY
49214: LIST
49215: LIST
49216: PUSH
49217: LD_INT 1
49219: NEG
49220: PUSH
49221: LD_INT 2
49223: NEG
49224: PUSH
49225: EMPTY
49226: LIST
49227: LIST
49228: PUSH
49229: LD_INT 0
49231: PUSH
49232: LD_INT 2
49234: NEG
49235: PUSH
49236: EMPTY
49237: LIST
49238: LIST
49239: PUSH
49240: LD_INT 1
49242: PUSH
49243: LD_INT 1
49245: NEG
49246: PUSH
49247: EMPTY
49248: LIST
49249: LIST
49250: PUSH
49251: LD_INT 2
49253: PUSH
49254: LD_INT 0
49256: PUSH
49257: EMPTY
49258: LIST
49259: LIST
49260: PUSH
49261: LD_INT 2
49263: PUSH
49264: LD_INT 1
49266: PUSH
49267: EMPTY
49268: LIST
49269: LIST
49270: PUSH
49271: LD_INT 2
49273: PUSH
49274: LD_INT 2
49276: PUSH
49277: EMPTY
49278: LIST
49279: LIST
49280: PUSH
49281: LD_INT 1
49283: PUSH
49284: LD_INT 2
49286: PUSH
49287: EMPTY
49288: LIST
49289: LIST
49290: PUSH
49291: LD_INT 0
49293: PUSH
49294: LD_INT 2
49296: PUSH
49297: EMPTY
49298: LIST
49299: LIST
49300: PUSH
49301: LD_INT 1
49303: NEG
49304: PUSH
49305: LD_INT 1
49307: PUSH
49308: EMPTY
49309: LIST
49310: LIST
49311: PUSH
49312: LD_INT 2
49314: NEG
49315: PUSH
49316: LD_INT 0
49318: PUSH
49319: EMPTY
49320: LIST
49321: LIST
49322: PUSH
49323: LD_INT 2
49325: NEG
49326: PUSH
49327: LD_INT 1
49329: NEG
49330: PUSH
49331: EMPTY
49332: LIST
49333: LIST
49334: PUSH
49335: LD_INT 2
49337: NEG
49338: PUSH
49339: LD_INT 2
49341: NEG
49342: PUSH
49343: EMPTY
49344: LIST
49345: LIST
49346: PUSH
49347: LD_INT 2
49349: PUSH
49350: LD_INT 3
49352: PUSH
49353: EMPTY
49354: LIST
49355: LIST
49356: PUSH
49357: LD_INT 1
49359: PUSH
49360: LD_INT 3
49362: PUSH
49363: EMPTY
49364: LIST
49365: LIST
49366: PUSH
49367: LD_INT 1
49369: NEG
49370: PUSH
49371: LD_INT 2
49373: PUSH
49374: EMPTY
49375: LIST
49376: LIST
49377: PUSH
49378: LD_INT 2
49380: NEG
49381: PUSH
49382: LD_INT 1
49384: PUSH
49385: EMPTY
49386: LIST
49387: LIST
49388: PUSH
49389: EMPTY
49390: LIST
49391: LIST
49392: LIST
49393: LIST
49394: LIST
49395: LIST
49396: LIST
49397: LIST
49398: LIST
49399: LIST
49400: LIST
49401: LIST
49402: LIST
49403: LIST
49404: LIST
49405: LIST
49406: LIST
49407: LIST
49408: LIST
49409: LIST
49410: LIST
49411: LIST
49412: LIST
49413: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49414: LD_ADDR_VAR 0 27
49418: PUSH
49419: LD_INT 0
49421: PUSH
49422: LD_INT 0
49424: PUSH
49425: EMPTY
49426: LIST
49427: LIST
49428: PUSH
49429: LD_INT 0
49431: PUSH
49432: LD_INT 1
49434: NEG
49435: PUSH
49436: EMPTY
49437: LIST
49438: LIST
49439: PUSH
49440: LD_INT 1
49442: PUSH
49443: LD_INT 0
49445: PUSH
49446: EMPTY
49447: LIST
49448: LIST
49449: PUSH
49450: LD_INT 1
49452: PUSH
49453: LD_INT 1
49455: PUSH
49456: EMPTY
49457: LIST
49458: LIST
49459: PUSH
49460: LD_INT 0
49462: PUSH
49463: LD_INT 1
49465: PUSH
49466: EMPTY
49467: LIST
49468: LIST
49469: PUSH
49470: LD_INT 1
49472: NEG
49473: PUSH
49474: LD_INT 0
49476: PUSH
49477: EMPTY
49478: LIST
49479: LIST
49480: PUSH
49481: LD_INT 1
49483: NEG
49484: PUSH
49485: LD_INT 1
49487: NEG
49488: PUSH
49489: EMPTY
49490: LIST
49491: LIST
49492: PUSH
49493: LD_INT 1
49495: NEG
49496: PUSH
49497: LD_INT 2
49499: NEG
49500: PUSH
49501: EMPTY
49502: LIST
49503: LIST
49504: PUSH
49505: LD_INT 0
49507: PUSH
49508: LD_INT 2
49510: NEG
49511: PUSH
49512: EMPTY
49513: LIST
49514: LIST
49515: PUSH
49516: LD_INT 1
49518: PUSH
49519: LD_INT 1
49521: NEG
49522: PUSH
49523: EMPTY
49524: LIST
49525: LIST
49526: PUSH
49527: LD_INT 2
49529: PUSH
49530: LD_INT 0
49532: PUSH
49533: EMPTY
49534: LIST
49535: LIST
49536: PUSH
49537: LD_INT 2
49539: PUSH
49540: LD_INT 1
49542: PUSH
49543: EMPTY
49544: LIST
49545: LIST
49546: PUSH
49547: LD_INT 2
49549: PUSH
49550: LD_INT 2
49552: PUSH
49553: EMPTY
49554: LIST
49555: LIST
49556: PUSH
49557: LD_INT 1
49559: PUSH
49560: LD_INT 2
49562: PUSH
49563: EMPTY
49564: LIST
49565: LIST
49566: PUSH
49567: LD_INT 0
49569: PUSH
49570: LD_INT 2
49572: PUSH
49573: EMPTY
49574: LIST
49575: LIST
49576: PUSH
49577: LD_INT 1
49579: NEG
49580: PUSH
49581: LD_INT 1
49583: PUSH
49584: EMPTY
49585: LIST
49586: LIST
49587: PUSH
49588: LD_INT 2
49590: NEG
49591: PUSH
49592: LD_INT 0
49594: PUSH
49595: EMPTY
49596: LIST
49597: LIST
49598: PUSH
49599: LD_INT 2
49601: NEG
49602: PUSH
49603: LD_INT 1
49605: NEG
49606: PUSH
49607: EMPTY
49608: LIST
49609: LIST
49610: PUSH
49611: LD_INT 2
49613: NEG
49614: PUSH
49615: LD_INT 2
49617: NEG
49618: PUSH
49619: EMPTY
49620: LIST
49621: LIST
49622: PUSH
49623: LD_INT 1
49625: NEG
49626: PUSH
49627: LD_INT 2
49629: PUSH
49630: EMPTY
49631: LIST
49632: LIST
49633: PUSH
49634: LD_INT 2
49636: NEG
49637: PUSH
49638: LD_INT 1
49640: PUSH
49641: EMPTY
49642: LIST
49643: LIST
49644: PUSH
49645: LD_INT 3
49647: NEG
49648: PUSH
49649: LD_INT 1
49651: NEG
49652: PUSH
49653: EMPTY
49654: LIST
49655: LIST
49656: PUSH
49657: LD_INT 3
49659: NEG
49660: PUSH
49661: LD_INT 2
49663: NEG
49664: PUSH
49665: EMPTY
49666: LIST
49667: LIST
49668: PUSH
49669: EMPTY
49670: LIST
49671: LIST
49672: LIST
49673: LIST
49674: LIST
49675: LIST
49676: LIST
49677: LIST
49678: LIST
49679: LIST
49680: LIST
49681: LIST
49682: LIST
49683: LIST
49684: LIST
49685: LIST
49686: LIST
49687: LIST
49688: LIST
49689: LIST
49690: LIST
49691: LIST
49692: LIST
49693: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49694: LD_ADDR_VAR 0 28
49698: PUSH
49699: LD_INT 0
49701: PUSH
49702: LD_INT 0
49704: PUSH
49705: EMPTY
49706: LIST
49707: LIST
49708: PUSH
49709: LD_INT 0
49711: PUSH
49712: LD_INT 1
49714: NEG
49715: PUSH
49716: EMPTY
49717: LIST
49718: LIST
49719: PUSH
49720: LD_INT 1
49722: PUSH
49723: LD_INT 0
49725: PUSH
49726: EMPTY
49727: LIST
49728: LIST
49729: PUSH
49730: LD_INT 1
49732: PUSH
49733: LD_INT 1
49735: PUSH
49736: EMPTY
49737: LIST
49738: LIST
49739: PUSH
49740: LD_INT 0
49742: PUSH
49743: LD_INT 1
49745: PUSH
49746: EMPTY
49747: LIST
49748: LIST
49749: PUSH
49750: LD_INT 1
49752: NEG
49753: PUSH
49754: LD_INT 0
49756: PUSH
49757: EMPTY
49758: LIST
49759: LIST
49760: PUSH
49761: LD_INT 1
49763: NEG
49764: PUSH
49765: LD_INT 1
49767: NEG
49768: PUSH
49769: EMPTY
49770: LIST
49771: LIST
49772: PUSH
49773: LD_INT 1
49775: NEG
49776: PUSH
49777: LD_INT 2
49779: NEG
49780: PUSH
49781: EMPTY
49782: LIST
49783: LIST
49784: PUSH
49785: LD_INT 0
49787: PUSH
49788: LD_INT 2
49790: NEG
49791: PUSH
49792: EMPTY
49793: LIST
49794: LIST
49795: PUSH
49796: LD_INT 1
49798: PUSH
49799: LD_INT 1
49801: NEG
49802: PUSH
49803: EMPTY
49804: LIST
49805: LIST
49806: PUSH
49807: LD_INT 2
49809: PUSH
49810: LD_INT 0
49812: PUSH
49813: EMPTY
49814: LIST
49815: LIST
49816: PUSH
49817: LD_INT 2
49819: PUSH
49820: LD_INT 1
49822: PUSH
49823: EMPTY
49824: LIST
49825: LIST
49826: PUSH
49827: LD_INT 2
49829: PUSH
49830: LD_INT 2
49832: PUSH
49833: EMPTY
49834: LIST
49835: LIST
49836: PUSH
49837: LD_INT 1
49839: PUSH
49840: LD_INT 2
49842: PUSH
49843: EMPTY
49844: LIST
49845: LIST
49846: PUSH
49847: LD_INT 0
49849: PUSH
49850: LD_INT 2
49852: PUSH
49853: EMPTY
49854: LIST
49855: LIST
49856: PUSH
49857: LD_INT 1
49859: NEG
49860: PUSH
49861: LD_INT 1
49863: PUSH
49864: EMPTY
49865: LIST
49866: LIST
49867: PUSH
49868: LD_INT 2
49870: NEG
49871: PUSH
49872: LD_INT 0
49874: PUSH
49875: EMPTY
49876: LIST
49877: LIST
49878: PUSH
49879: LD_INT 2
49881: NEG
49882: PUSH
49883: LD_INT 1
49885: NEG
49886: PUSH
49887: EMPTY
49888: LIST
49889: LIST
49890: PUSH
49891: LD_INT 2
49893: NEG
49894: PUSH
49895: LD_INT 2
49897: NEG
49898: PUSH
49899: EMPTY
49900: LIST
49901: LIST
49902: PUSH
49903: LD_INT 2
49905: NEG
49906: PUSH
49907: LD_INT 3
49909: NEG
49910: PUSH
49911: EMPTY
49912: LIST
49913: LIST
49914: PUSH
49915: LD_INT 1
49917: NEG
49918: PUSH
49919: LD_INT 3
49921: NEG
49922: PUSH
49923: EMPTY
49924: LIST
49925: LIST
49926: PUSH
49927: LD_INT 3
49929: NEG
49930: PUSH
49931: LD_INT 1
49933: NEG
49934: PUSH
49935: EMPTY
49936: LIST
49937: LIST
49938: PUSH
49939: LD_INT 3
49941: NEG
49942: PUSH
49943: LD_INT 2
49945: NEG
49946: PUSH
49947: EMPTY
49948: LIST
49949: LIST
49950: PUSH
49951: EMPTY
49952: LIST
49953: LIST
49954: LIST
49955: LIST
49956: LIST
49957: LIST
49958: LIST
49959: LIST
49960: LIST
49961: LIST
49962: LIST
49963: LIST
49964: LIST
49965: LIST
49966: LIST
49967: LIST
49968: LIST
49969: LIST
49970: LIST
49971: LIST
49972: LIST
49973: LIST
49974: LIST
49975: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49976: LD_ADDR_VAR 0 29
49980: PUSH
49981: LD_INT 0
49983: PUSH
49984: LD_INT 0
49986: PUSH
49987: EMPTY
49988: LIST
49989: LIST
49990: PUSH
49991: LD_INT 0
49993: PUSH
49994: LD_INT 1
49996: NEG
49997: PUSH
49998: EMPTY
49999: LIST
50000: LIST
50001: PUSH
50002: LD_INT 1
50004: PUSH
50005: LD_INT 0
50007: PUSH
50008: EMPTY
50009: LIST
50010: LIST
50011: PUSH
50012: LD_INT 1
50014: PUSH
50015: LD_INT 1
50017: PUSH
50018: EMPTY
50019: LIST
50020: LIST
50021: PUSH
50022: LD_INT 0
50024: PUSH
50025: LD_INT 1
50027: PUSH
50028: EMPTY
50029: LIST
50030: LIST
50031: PUSH
50032: LD_INT 1
50034: NEG
50035: PUSH
50036: LD_INT 0
50038: PUSH
50039: EMPTY
50040: LIST
50041: LIST
50042: PUSH
50043: LD_INT 1
50045: NEG
50046: PUSH
50047: LD_INT 1
50049: NEG
50050: PUSH
50051: EMPTY
50052: LIST
50053: LIST
50054: PUSH
50055: LD_INT 1
50057: NEG
50058: PUSH
50059: LD_INT 2
50061: NEG
50062: PUSH
50063: EMPTY
50064: LIST
50065: LIST
50066: PUSH
50067: LD_INT 0
50069: PUSH
50070: LD_INT 2
50072: NEG
50073: PUSH
50074: EMPTY
50075: LIST
50076: LIST
50077: PUSH
50078: LD_INT 1
50080: PUSH
50081: LD_INT 1
50083: NEG
50084: PUSH
50085: EMPTY
50086: LIST
50087: LIST
50088: PUSH
50089: LD_INT 2
50091: PUSH
50092: LD_INT 0
50094: PUSH
50095: EMPTY
50096: LIST
50097: LIST
50098: PUSH
50099: LD_INT 2
50101: PUSH
50102: LD_INT 1
50104: PUSH
50105: EMPTY
50106: LIST
50107: LIST
50108: PUSH
50109: LD_INT 1
50111: PUSH
50112: LD_INT 2
50114: PUSH
50115: EMPTY
50116: LIST
50117: LIST
50118: PUSH
50119: LD_INT 0
50121: PUSH
50122: LD_INT 2
50124: PUSH
50125: EMPTY
50126: LIST
50127: LIST
50128: PUSH
50129: LD_INT 1
50131: NEG
50132: PUSH
50133: LD_INT 1
50135: PUSH
50136: EMPTY
50137: LIST
50138: LIST
50139: PUSH
50140: LD_INT 2
50142: NEG
50143: PUSH
50144: LD_INT 1
50146: NEG
50147: PUSH
50148: EMPTY
50149: LIST
50150: LIST
50151: PUSH
50152: LD_INT 2
50154: NEG
50155: PUSH
50156: LD_INT 2
50158: NEG
50159: PUSH
50160: EMPTY
50161: LIST
50162: LIST
50163: PUSH
50164: LD_INT 2
50166: NEG
50167: PUSH
50168: LD_INT 3
50170: NEG
50171: PUSH
50172: EMPTY
50173: LIST
50174: LIST
50175: PUSH
50176: LD_INT 2
50178: PUSH
50179: LD_INT 1
50181: NEG
50182: PUSH
50183: EMPTY
50184: LIST
50185: LIST
50186: PUSH
50187: LD_INT 3
50189: PUSH
50190: LD_INT 1
50192: PUSH
50193: EMPTY
50194: LIST
50195: LIST
50196: PUSH
50197: LD_INT 1
50199: PUSH
50200: LD_INT 3
50202: PUSH
50203: EMPTY
50204: LIST
50205: LIST
50206: PUSH
50207: LD_INT 1
50209: NEG
50210: PUSH
50211: LD_INT 2
50213: PUSH
50214: EMPTY
50215: LIST
50216: LIST
50217: PUSH
50218: LD_INT 3
50220: NEG
50221: PUSH
50222: LD_INT 2
50224: NEG
50225: PUSH
50226: EMPTY
50227: LIST
50228: LIST
50229: PUSH
50230: EMPTY
50231: LIST
50232: LIST
50233: LIST
50234: LIST
50235: LIST
50236: LIST
50237: LIST
50238: LIST
50239: LIST
50240: LIST
50241: LIST
50242: LIST
50243: LIST
50244: LIST
50245: LIST
50246: LIST
50247: LIST
50248: LIST
50249: LIST
50250: LIST
50251: LIST
50252: LIST
50253: LIST
50254: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50255: LD_ADDR_VAR 0 30
50259: PUSH
50260: LD_INT 0
50262: PUSH
50263: LD_INT 0
50265: PUSH
50266: EMPTY
50267: LIST
50268: LIST
50269: PUSH
50270: LD_INT 0
50272: PUSH
50273: LD_INT 1
50275: NEG
50276: PUSH
50277: EMPTY
50278: LIST
50279: LIST
50280: PUSH
50281: LD_INT 1
50283: PUSH
50284: LD_INT 0
50286: PUSH
50287: EMPTY
50288: LIST
50289: LIST
50290: PUSH
50291: LD_INT 1
50293: PUSH
50294: LD_INT 1
50296: PUSH
50297: EMPTY
50298: LIST
50299: LIST
50300: PUSH
50301: LD_INT 0
50303: PUSH
50304: LD_INT 1
50306: PUSH
50307: EMPTY
50308: LIST
50309: LIST
50310: PUSH
50311: LD_INT 1
50313: NEG
50314: PUSH
50315: LD_INT 0
50317: PUSH
50318: EMPTY
50319: LIST
50320: LIST
50321: PUSH
50322: LD_INT 1
50324: NEG
50325: PUSH
50326: LD_INT 1
50328: NEG
50329: PUSH
50330: EMPTY
50331: LIST
50332: LIST
50333: PUSH
50334: LD_INT 1
50336: NEG
50337: PUSH
50338: LD_INT 2
50340: NEG
50341: PUSH
50342: EMPTY
50343: LIST
50344: LIST
50345: PUSH
50346: LD_INT 0
50348: PUSH
50349: LD_INT 2
50351: NEG
50352: PUSH
50353: EMPTY
50354: LIST
50355: LIST
50356: PUSH
50357: LD_INT 1
50359: PUSH
50360: LD_INT 1
50362: NEG
50363: PUSH
50364: EMPTY
50365: LIST
50366: LIST
50367: PUSH
50368: LD_INT 2
50370: PUSH
50371: LD_INT 0
50373: PUSH
50374: EMPTY
50375: LIST
50376: LIST
50377: PUSH
50378: LD_INT 2
50380: PUSH
50381: LD_INT 1
50383: PUSH
50384: EMPTY
50385: LIST
50386: LIST
50387: PUSH
50388: LD_INT 2
50390: PUSH
50391: LD_INT 2
50393: PUSH
50394: EMPTY
50395: LIST
50396: LIST
50397: PUSH
50398: LD_INT 1
50400: PUSH
50401: LD_INT 2
50403: PUSH
50404: EMPTY
50405: LIST
50406: LIST
50407: PUSH
50408: LD_INT 1
50410: NEG
50411: PUSH
50412: LD_INT 1
50414: PUSH
50415: EMPTY
50416: LIST
50417: LIST
50418: PUSH
50419: LD_INT 2
50421: NEG
50422: PUSH
50423: LD_INT 0
50425: PUSH
50426: EMPTY
50427: LIST
50428: LIST
50429: PUSH
50430: LD_INT 2
50432: NEG
50433: PUSH
50434: LD_INT 1
50436: NEG
50437: PUSH
50438: EMPTY
50439: LIST
50440: LIST
50441: PUSH
50442: LD_INT 1
50444: NEG
50445: PUSH
50446: LD_INT 3
50448: NEG
50449: PUSH
50450: EMPTY
50451: LIST
50452: LIST
50453: PUSH
50454: LD_INT 1
50456: PUSH
50457: LD_INT 2
50459: NEG
50460: PUSH
50461: EMPTY
50462: LIST
50463: LIST
50464: PUSH
50465: LD_INT 3
50467: PUSH
50468: LD_INT 2
50470: PUSH
50471: EMPTY
50472: LIST
50473: LIST
50474: PUSH
50475: LD_INT 2
50477: PUSH
50478: LD_INT 3
50480: PUSH
50481: EMPTY
50482: LIST
50483: LIST
50484: PUSH
50485: LD_INT 2
50487: NEG
50488: PUSH
50489: LD_INT 1
50491: PUSH
50492: EMPTY
50493: LIST
50494: LIST
50495: PUSH
50496: LD_INT 3
50498: NEG
50499: PUSH
50500: LD_INT 1
50502: NEG
50503: PUSH
50504: EMPTY
50505: LIST
50506: LIST
50507: PUSH
50508: EMPTY
50509: LIST
50510: LIST
50511: LIST
50512: LIST
50513: LIST
50514: LIST
50515: LIST
50516: LIST
50517: LIST
50518: LIST
50519: LIST
50520: LIST
50521: LIST
50522: LIST
50523: LIST
50524: LIST
50525: LIST
50526: LIST
50527: LIST
50528: LIST
50529: LIST
50530: LIST
50531: LIST
50532: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50533: LD_ADDR_VAR 0 31
50537: PUSH
50538: LD_INT 0
50540: PUSH
50541: LD_INT 0
50543: PUSH
50544: EMPTY
50545: LIST
50546: LIST
50547: PUSH
50548: LD_INT 0
50550: PUSH
50551: LD_INT 1
50553: NEG
50554: PUSH
50555: EMPTY
50556: LIST
50557: LIST
50558: PUSH
50559: LD_INT 1
50561: PUSH
50562: LD_INT 0
50564: PUSH
50565: EMPTY
50566: LIST
50567: LIST
50568: PUSH
50569: LD_INT 1
50571: PUSH
50572: LD_INT 1
50574: PUSH
50575: EMPTY
50576: LIST
50577: LIST
50578: PUSH
50579: LD_INT 0
50581: PUSH
50582: LD_INT 1
50584: PUSH
50585: EMPTY
50586: LIST
50587: LIST
50588: PUSH
50589: LD_INT 1
50591: NEG
50592: PUSH
50593: LD_INT 0
50595: PUSH
50596: EMPTY
50597: LIST
50598: LIST
50599: PUSH
50600: LD_INT 1
50602: NEG
50603: PUSH
50604: LD_INT 1
50606: NEG
50607: PUSH
50608: EMPTY
50609: LIST
50610: LIST
50611: PUSH
50612: LD_INT 1
50614: NEG
50615: PUSH
50616: LD_INT 2
50618: NEG
50619: PUSH
50620: EMPTY
50621: LIST
50622: LIST
50623: PUSH
50624: LD_INT 1
50626: PUSH
50627: LD_INT 1
50629: NEG
50630: PUSH
50631: EMPTY
50632: LIST
50633: LIST
50634: PUSH
50635: LD_INT 2
50637: PUSH
50638: LD_INT 0
50640: PUSH
50641: EMPTY
50642: LIST
50643: LIST
50644: PUSH
50645: LD_INT 2
50647: PUSH
50648: LD_INT 1
50650: PUSH
50651: EMPTY
50652: LIST
50653: LIST
50654: PUSH
50655: LD_INT 2
50657: PUSH
50658: LD_INT 2
50660: PUSH
50661: EMPTY
50662: LIST
50663: LIST
50664: PUSH
50665: LD_INT 1
50667: PUSH
50668: LD_INT 2
50670: PUSH
50671: EMPTY
50672: LIST
50673: LIST
50674: PUSH
50675: LD_INT 0
50677: PUSH
50678: LD_INT 2
50680: PUSH
50681: EMPTY
50682: LIST
50683: LIST
50684: PUSH
50685: LD_INT 1
50687: NEG
50688: PUSH
50689: LD_INT 1
50691: PUSH
50692: EMPTY
50693: LIST
50694: LIST
50695: PUSH
50696: LD_INT 2
50698: NEG
50699: PUSH
50700: LD_INT 1
50702: NEG
50703: PUSH
50704: EMPTY
50705: LIST
50706: LIST
50707: PUSH
50708: LD_INT 2
50710: NEG
50711: PUSH
50712: LD_INT 2
50714: NEG
50715: PUSH
50716: EMPTY
50717: LIST
50718: LIST
50719: PUSH
50720: LD_INT 2
50722: NEG
50723: PUSH
50724: LD_INT 3
50726: NEG
50727: PUSH
50728: EMPTY
50729: LIST
50730: LIST
50731: PUSH
50732: LD_INT 2
50734: PUSH
50735: LD_INT 1
50737: NEG
50738: PUSH
50739: EMPTY
50740: LIST
50741: LIST
50742: PUSH
50743: LD_INT 3
50745: PUSH
50746: LD_INT 1
50748: PUSH
50749: EMPTY
50750: LIST
50751: LIST
50752: PUSH
50753: LD_INT 1
50755: PUSH
50756: LD_INT 3
50758: PUSH
50759: EMPTY
50760: LIST
50761: LIST
50762: PUSH
50763: LD_INT 1
50765: NEG
50766: PUSH
50767: LD_INT 2
50769: PUSH
50770: EMPTY
50771: LIST
50772: LIST
50773: PUSH
50774: LD_INT 3
50776: NEG
50777: PUSH
50778: LD_INT 2
50780: NEG
50781: PUSH
50782: EMPTY
50783: LIST
50784: LIST
50785: PUSH
50786: EMPTY
50787: LIST
50788: LIST
50789: LIST
50790: LIST
50791: LIST
50792: LIST
50793: LIST
50794: LIST
50795: LIST
50796: LIST
50797: LIST
50798: LIST
50799: LIST
50800: LIST
50801: LIST
50802: LIST
50803: LIST
50804: LIST
50805: LIST
50806: LIST
50807: LIST
50808: LIST
50809: LIST
50810: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50811: LD_ADDR_VAR 0 32
50815: PUSH
50816: LD_INT 0
50818: PUSH
50819: LD_INT 0
50821: PUSH
50822: EMPTY
50823: LIST
50824: LIST
50825: PUSH
50826: LD_INT 0
50828: PUSH
50829: LD_INT 1
50831: NEG
50832: PUSH
50833: EMPTY
50834: LIST
50835: LIST
50836: PUSH
50837: LD_INT 1
50839: PUSH
50840: LD_INT 0
50842: PUSH
50843: EMPTY
50844: LIST
50845: LIST
50846: PUSH
50847: LD_INT 1
50849: PUSH
50850: LD_INT 1
50852: PUSH
50853: EMPTY
50854: LIST
50855: LIST
50856: PUSH
50857: LD_INT 0
50859: PUSH
50860: LD_INT 1
50862: PUSH
50863: EMPTY
50864: LIST
50865: LIST
50866: PUSH
50867: LD_INT 1
50869: NEG
50870: PUSH
50871: LD_INT 0
50873: PUSH
50874: EMPTY
50875: LIST
50876: LIST
50877: PUSH
50878: LD_INT 1
50880: NEG
50881: PUSH
50882: LD_INT 1
50884: NEG
50885: PUSH
50886: EMPTY
50887: LIST
50888: LIST
50889: PUSH
50890: LD_INT 1
50892: NEG
50893: PUSH
50894: LD_INT 2
50896: NEG
50897: PUSH
50898: EMPTY
50899: LIST
50900: LIST
50901: PUSH
50902: LD_INT 0
50904: PUSH
50905: LD_INT 2
50907: NEG
50908: PUSH
50909: EMPTY
50910: LIST
50911: LIST
50912: PUSH
50913: LD_INT 1
50915: PUSH
50916: LD_INT 1
50918: NEG
50919: PUSH
50920: EMPTY
50921: LIST
50922: LIST
50923: PUSH
50924: LD_INT 2
50926: PUSH
50927: LD_INT 1
50929: PUSH
50930: EMPTY
50931: LIST
50932: LIST
50933: PUSH
50934: LD_INT 2
50936: PUSH
50937: LD_INT 2
50939: PUSH
50940: EMPTY
50941: LIST
50942: LIST
50943: PUSH
50944: LD_INT 1
50946: PUSH
50947: LD_INT 2
50949: PUSH
50950: EMPTY
50951: LIST
50952: LIST
50953: PUSH
50954: LD_INT 0
50956: PUSH
50957: LD_INT 2
50959: PUSH
50960: EMPTY
50961: LIST
50962: LIST
50963: PUSH
50964: LD_INT 1
50966: NEG
50967: PUSH
50968: LD_INT 1
50970: PUSH
50971: EMPTY
50972: LIST
50973: LIST
50974: PUSH
50975: LD_INT 2
50977: NEG
50978: PUSH
50979: LD_INT 0
50981: PUSH
50982: EMPTY
50983: LIST
50984: LIST
50985: PUSH
50986: LD_INT 2
50988: NEG
50989: PUSH
50990: LD_INT 1
50992: NEG
50993: PUSH
50994: EMPTY
50995: LIST
50996: LIST
50997: PUSH
50998: LD_INT 1
51000: NEG
51001: PUSH
51002: LD_INT 3
51004: NEG
51005: PUSH
51006: EMPTY
51007: LIST
51008: LIST
51009: PUSH
51010: LD_INT 1
51012: PUSH
51013: LD_INT 2
51015: NEG
51016: PUSH
51017: EMPTY
51018: LIST
51019: LIST
51020: PUSH
51021: LD_INT 3
51023: PUSH
51024: LD_INT 2
51026: PUSH
51027: EMPTY
51028: LIST
51029: LIST
51030: PUSH
51031: LD_INT 2
51033: PUSH
51034: LD_INT 3
51036: PUSH
51037: EMPTY
51038: LIST
51039: LIST
51040: PUSH
51041: LD_INT 2
51043: NEG
51044: PUSH
51045: LD_INT 1
51047: PUSH
51048: EMPTY
51049: LIST
51050: LIST
51051: PUSH
51052: LD_INT 3
51054: NEG
51055: PUSH
51056: LD_INT 1
51058: NEG
51059: PUSH
51060: EMPTY
51061: LIST
51062: LIST
51063: PUSH
51064: EMPTY
51065: LIST
51066: LIST
51067: LIST
51068: LIST
51069: LIST
51070: LIST
51071: LIST
51072: LIST
51073: LIST
51074: LIST
51075: LIST
51076: LIST
51077: LIST
51078: LIST
51079: LIST
51080: LIST
51081: LIST
51082: LIST
51083: LIST
51084: LIST
51085: LIST
51086: LIST
51087: LIST
51088: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
51089: LD_ADDR_VAR 0 33
51093: PUSH
51094: LD_INT 0
51096: PUSH
51097: LD_INT 0
51099: PUSH
51100: EMPTY
51101: LIST
51102: LIST
51103: PUSH
51104: LD_INT 0
51106: PUSH
51107: LD_INT 1
51109: NEG
51110: PUSH
51111: EMPTY
51112: LIST
51113: LIST
51114: PUSH
51115: LD_INT 1
51117: PUSH
51118: LD_INT 0
51120: PUSH
51121: EMPTY
51122: LIST
51123: LIST
51124: PUSH
51125: LD_INT 1
51127: PUSH
51128: LD_INT 1
51130: PUSH
51131: EMPTY
51132: LIST
51133: LIST
51134: PUSH
51135: LD_INT 0
51137: PUSH
51138: LD_INT 1
51140: PUSH
51141: EMPTY
51142: LIST
51143: LIST
51144: PUSH
51145: LD_INT 1
51147: NEG
51148: PUSH
51149: LD_INT 0
51151: PUSH
51152: EMPTY
51153: LIST
51154: LIST
51155: PUSH
51156: LD_INT 1
51158: NEG
51159: PUSH
51160: LD_INT 1
51162: NEG
51163: PUSH
51164: EMPTY
51165: LIST
51166: LIST
51167: PUSH
51168: LD_INT 1
51170: NEG
51171: PUSH
51172: LD_INT 2
51174: NEG
51175: PUSH
51176: EMPTY
51177: LIST
51178: LIST
51179: PUSH
51180: LD_INT 1
51182: PUSH
51183: LD_INT 1
51185: NEG
51186: PUSH
51187: EMPTY
51188: LIST
51189: LIST
51190: PUSH
51191: LD_INT 2
51193: PUSH
51194: LD_INT 0
51196: PUSH
51197: EMPTY
51198: LIST
51199: LIST
51200: PUSH
51201: LD_INT 2
51203: PUSH
51204: LD_INT 1
51206: PUSH
51207: EMPTY
51208: LIST
51209: LIST
51210: PUSH
51211: LD_INT 1
51213: PUSH
51214: LD_INT 2
51216: PUSH
51217: EMPTY
51218: LIST
51219: LIST
51220: PUSH
51221: LD_INT 0
51223: PUSH
51224: LD_INT 2
51226: PUSH
51227: EMPTY
51228: LIST
51229: LIST
51230: PUSH
51231: LD_INT 1
51233: NEG
51234: PUSH
51235: LD_INT 1
51237: PUSH
51238: EMPTY
51239: LIST
51240: LIST
51241: PUSH
51242: LD_INT 2
51244: NEG
51245: PUSH
51246: LD_INT 0
51248: PUSH
51249: EMPTY
51250: LIST
51251: LIST
51252: PUSH
51253: LD_INT 2
51255: NEG
51256: PUSH
51257: LD_INT 1
51259: NEG
51260: PUSH
51261: EMPTY
51262: LIST
51263: LIST
51264: PUSH
51265: LD_INT 2
51267: NEG
51268: PUSH
51269: LD_INT 2
51271: NEG
51272: PUSH
51273: EMPTY
51274: LIST
51275: LIST
51276: PUSH
51277: LD_INT 2
51279: NEG
51280: PUSH
51281: LD_INT 3
51283: NEG
51284: PUSH
51285: EMPTY
51286: LIST
51287: LIST
51288: PUSH
51289: LD_INT 2
51291: PUSH
51292: LD_INT 1
51294: NEG
51295: PUSH
51296: EMPTY
51297: LIST
51298: LIST
51299: PUSH
51300: LD_INT 3
51302: PUSH
51303: LD_INT 1
51305: PUSH
51306: EMPTY
51307: LIST
51308: LIST
51309: PUSH
51310: LD_INT 1
51312: PUSH
51313: LD_INT 3
51315: PUSH
51316: EMPTY
51317: LIST
51318: LIST
51319: PUSH
51320: LD_INT 1
51322: NEG
51323: PUSH
51324: LD_INT 2
51326: PUSH
51327: EMPTY
51328: LIST
51329: LIST
51330: PUSH
51331: LD_INT 3
51333: NEG
51334: PUSH
51335: LD_INT 2
51337: NEG
51338: PUSH
51339: EMPTY
51340: LIST
51341: LIST
51342: PUSH
51343: EMPTY
51344: LIST
51345: LIST
51346: LIST
51347: LIST
51348: LIST
51349: LIST
51350: LIST
51351: LIST
51352: LIST
51353: LIST
51354: LIST
51355: LIST
51356: LIST
51357: LIST
51358: LIST
51359: LIST
51360: LIST
51361: LIST
51362: LIST
51363: LIST
51364: LIST
51365: LIST
51366: LIST
51367: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51368: LD_ADDR_VAR 0 34
51372: PUSH
51373: LD_INT 0
51375: PUSH
51376: LD_INT 0
51378: PUSH
51379: EMPTY
51380: LIST
51381: LIST
51382: PUSH
51383: LD_INT 0
51385: PUSH
51386: LD_INT 1
51388: NEG
51389: PUSH
51390: EMPTY
51391: LIST
51392: LIST
51393: PUSH
51394: LD_INT 1
51396: PUSH
51397: LD_INT 0
51399: PUSH
51400: EMPTY
51401: LIST
51402: LIST
51403: PUSH
51404: LD_INT 1
51406: PUSH
51407: LD_INT 1
51409: PUSH
51410: EMPTY
51411: LIST
51412: LIST
51413: PUSH
51414: LD_INT 0
51416: PUSH
51417: LD_INT 1
51419: PUSH
51420: EMPTY
51421: LIST
51422: LIST
51423: PUSH
51424: LD_INT 1
51426: NEG
51427: PUSH
51428: LD_INT 0
51430: PUSH
51431: EMPTY
51432: LIST
51433: LIST
51434: PUSH
51435: LD_INT 1
51437: NEG
51438: PUSH
51439: LD_INT 1
51441: NEG
51442: PUSH
51443: EMPTY
51444: LIST
51445: LIST
51446: PUSH
51447: LD_INT 1
51449: NEG
51450: PUSH
51451: LD_INT 2
51453: NEG
51454: PUSH
51455: EMPTY
51456: LIST
51457: LIST
51458: PUSH
51459: LD_INT 0
51461: PUSH
51462: LD_INT 2
51464: NEG
51465: PUSH
51466: EMPTY
51467: LIST
51468: LIST
51469: PUSH
51470: LD_INT 1
51472: PUSH
51473: LD_INT 1
51475: NEG
51476: PUSH
51477: EMPTY
51478: LIST
51479: LIST
51480: PUSH
51481: LD_INT 2
51483: PUSH
51484: LD_INT 1
51486: PUSH
51487: EMPTY
51488: LIST
51489: LIST
51490: PUSH
51491: LD_INT 2
51493: PUSH
51494: LD_INT 2
51496: PUSH
51497: EMPTY
51498: LIST
51499: LIST
51500: PUSH
51501: LD_INT 1
51503: PUSH
51504: LD_INT 2
51506: PUSH
51507: EMPTY
51508: LIST
51509: LIST
51510: PUSH
51511: LD_INT 1
51513: NEG
51514: PUSH
51515: LD_INT 1
51517: PUSH
51518: EMPTY
51519: LIST
51520: LIST
51521: PUSH
51522: LD_INT 2
51524: NEG
51525: PUSH
51526: LD_INT 0
51528: PUSH
51529: EMPTY
51530: LIST
51531: LIST
51532: PUSH
51533: LD_INT 2
51535: NEG
51536: PUSH
51537: LD_INT 1
51539: NEG
51540: PUSH
51541: EMPTY
51542: LIST
51543: LIST
51544: PUSH
51545: LD_INT 2
51547: NEG
51548: PUSH
51549: LD_INT 2
51551: NEG
51552: PUSH
51553: EMPTY
51554: LIST
51555: LIST
51556: PUSH
51557: LD_INT 1
51559: NEG
51560: PUSH
51561: LD_INT 3
51563: NEG
51564: PUSH
51565: EMPTY
51566: LIST
51567: LIST
51568: PUSH
51569: LD_INT 1
51571: PUSH
51572: LD_INT 2
51574: NEG
51575: PUSH
51576: EMPTY
51577: LIST
51578: LIST
51579: PUSH
51580: LD_INT 3
51582: PUSH
51583: LD_INT 2
51585: PUSH
51586: EMPTY
51587: LIST
51588: LIST
51589: PUSH
51590: LD_INT 2
51592: PUSH
51593: LD_INT 3
51595: PUSH
51596: EMPTY
51597: LIST
51598: LIST
51599: PUSH
51600: LD_INT 2
51602: NEG
51603: PUSH
51604: LD_INT 1
51606: PUSH
51607: EMPTY
51608: LIST
51609: LIST
51610: PUSH
51611: LD_INT 3
51613: NEG
51614: PUSH
51615: LD_INT 1
51617: NEG
51618: PUSH
51619: EMPTY
51620: LIST
51621: LIST
51622: PUSH
51623: EMPTY
51624: LIST
51625: LIST
51626: LIST
51627: LIST
51628: LIST
51629: LIST
51630: LIST
51631: LIST
51632: LIST
51633: LIST
51634: LIST
51635: LIST
51636: LIST
51637: LIST
51638: LIST
51639: LIST
51640: LIST
51641: LIST
51642: LIST
51643: LIST
51644: LIST
51645: LIST
51646: LIST
51647: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51648: LD_ADDR_VAR 0 35
51652: PUSH
51653: LD_INT 0
51655: PUSH
51656: LD_INT 0
51658: PUSH
51659: EMPTY
51660: LIST
51661: LIST
51662: PUSH
51663: LD_INT 0
51665: PUSH
51666: LD_INT 1
51668: NEG
51669: PUSH
51670: EMPTY
51671: LIST
51672: LIST
51673: PUSH
51674: LD_INT 1
51676: PUSH
51677: LD_INT 0
51679: PUSH
51680: EMPTY
51681: LIST
51682: LIST
51683: PUSH
51684: LD_INT 1
51686: PUSH
51687: LD_INT 1
51689: PUSH
51690: EMPTY
51691: LIST
51692: LIST
51693: PUSH
51694: LD_INT 0
51696: PUSH
51697: LD_INT 1
51699: PUSH
51700: EMPTY
51701: LIST
51702: LIST
51703: PUSH
51704: LD_INT 1
51706: NEG
51707: PUSH
51708: LD_INT 0
51710: PUSH
51711: EMPTY
51712: LIST
51713: LIST
51714: PUSH
51715: LD_INT 1
51717: NEG
51718: PUSH
51719: LD_INT 1
51721: NEG
51722: PUSH
51723: EMPTY
51724: LIST
51725: LIST
51726: PUSH
51727: LD_INT 2
51729: PUSH
51730: LD_INT 1
51732: PUSH
51733: EMPTY
51734: LIST
51735: LIST
51736: PUSH
51737: LD_INT 2
51739: NEG
51740: PUSH
51741: LD_INT 1
51743: NEG
51744: PUSH
51745: EMPTY
51746: LIST
51747: LIST
51748: PUSH
51749: EMPTY
51750: LIST
51751: LIST
51752: LIST
51753: LIST
51754: LIST
51755: LIST
51756: LIST
51757: LIST
51758: LIST
51759: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51760: LD_ADDR_VAR 0 36
51764: PUSH
51765: LD_INT 0
51767: PUSH
51768: LD_INT 0
51770: PUSH
51771: EMPTY
51772: LIST
51773: LIST
51774: PUSH
51775: LD_INT 0
51777: PUSH
51778: LD_INT 1
51780: NEG
51781: PUSH
51782: EMPTY
51783: LIST
51784: LIST
51785: PUSH
51786: LD_INT 1
51788: PUSH
51789: LD_INT 0
51791: PUSH
51792: EMPTY
51793: LIST
51794: LIST
51795: PUSH
51796: LD_INT 1
51798: PUSH
51799: LD_INT 1
51801: PUSH
51802: EMPTY
51803: LIST
51804: LIST
51805: PUSH
51806: LD_INT 0
51808: PUSH
51809: LD_INT 1
51811: PUSH
51812: EMPTY
51813: LIST
51814: LIST
51815: PUSH
51816: LD_INT 1
51818: NEG
51819: PUSH
51820: LD_INT 0
51822: PUSH
51823: EMPTY
51824: LIST
51825: LIST
51826: PUSH
51827: LD_INT 1
51829: NEG
51830: PUSH
51831: LD_INT 1
51833: NEG
51834: PUSH
51835: EMPTY
51836: LIST
51837: LIST
51838: PUSH
51839: LD_INT 1
51841: NEG
51842: PUSH
51843: LD_INT 2
51845: NEG
51846: PUSH
51847: EMPTY
51848: LIST
51849: LIST
51850: PUSH
51851: LD_INT 1
51853: PUSH
51854: LD_INT 2
51856: PUSH
51857: EMPTY
51858: LIST
51859: LIST
51860: PUSH
51861: EMPTY
51862: LIST
51863: LIST
51864: LIST
51865: LIST
51866: LIST
51867: LIST
51868: LIST
51869: LIST
51870: LIST
51871: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51872: LD_ADDR_VAR 0 37
51876: PUSH
51877: LD_INT 0
51879: PUSH
51880: LD_INT 0
51882: PUSH
51883: EMPTY
51884: LIST
51885: LIST
51886: PUSH
51887: LD_INT 0
51889: PUSH
51890: LD_INT 1
51892: NEG
51893: PUSH
51894: EMPTY
51895: LIST
51896: LIST
51897: PUSH
51898: LD_INT 1
51900: PUSH
51901: LD_INT 0
51903: PUSH
51904: EMPTY
51905: LIST
51906: LIST
51907: PUSH
51908: LD_INT 1
51910: PUSH
51911: LD_INT 1
51913: PUSH
51914: EMPTY
51915: LIST
51916: LIST
51917: PUSH
51918: LD_INT 0
51920: PUSH
51921: LD_INT 1
51923: PUSH
51924: EMPTY
51925: LIST
51926: LIST
51927: PUSH
51928: LD_INT 1
51930: NEG
51931: PUSH
51932: LD_INT 0
51934: PUSH
51935: EMPTY
51936: LIST
51937: LIST
51938: PUSH
51939: LD_INT 1
51941: NEG
51942: PUSH
51943: LD_INT 1
51945: NEG
51946: PUSH
51947: EMPTY
51948: LIST
51949: LIST
51950: PUSH
51951: LD_INT 1
51953: PUSH
51954: LD_INT 1
51956: NEG
51957: PUSH
51958: EMPTY
51959: LIST
51960: LIST
51961: PUSH
51962: LD_INT 1
51964: NEG
51965: PUSH
51966: LD_INT 1
51968: PUSH
51969: EMPTY
51970: LIST
51971: LIST
51972: PUSH
51973: EMPTY
51974: LIST
51975: LIST
51976: LIST
51977: LIST
51978: LIST
51979: LIST
51980: LIST
51981: LIST
51982: LIST
51983: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51984: LD_ADDR_VAR 0 38
51988: PUSH
51989: LD_INT 0
51991: PUSH
51992: LD_INT 0
51994: PUSH
51995: EMPTY
51996: LIST
51997: LIST
51998: PUSH
51999: LD_INT 0
52001: PUSH
52002: LD_INT 1
52004: NEG
52005: PUSH
52006: EMPTY
52007: LIST
52008: LIST
52009: PUSH
52010: LD_INT 1
52012: PUSH
52013: LD_INT 0
52015: PUSH
52016: EMPTY
52017: LIST
52018: LIST
52019: PUSH
52020: LD_INT 1
52022: PUSH
52023: LD_INT 1
52025: PUSH
52026: EMPTY
52027: LIST
52028: LIST
52029: PUSH
52030: LD_INT 0
52032: PUSH
52033: LD_INT 1
52035: PUSH
52036: EMPTY
52037: LIST
52038: LIST
52039: PUSH
52040: LD_INT 1
52042: NEG
52043: PUSH
52044: LD_INT 0
52046: PUSH
52047: EMPTY
52048: LIST
52049: LIST
52050: PUSH
52051: LD_INT 1
52053: NEG
52054: PUSH
52055: LD_INT 1
52057: NEG
52058: PUSH
52059: EMPTY
52060: LIST
52061: LIST
52062: PUSH
52063: LD_INT 2
52065: PUSH
52066: LD_INT 1
52068: PUSH
52069: EMPTY
52070: LIST
52071: LIST
52072: PUSH
52073: LD_INT 2
52075: NEG
52076: PUSH
52077: LD_INT 1
52079: NEG
52080: PUSH
52081: EMPTY
52082: LIST
52083: LIST
52084: PUSH
52085: EMPTY
52086: LIST
52087: LIST
52088: LIST
52089: LIST
52090: LIST
52091: LIST
52092: LIST
52093: LIST
52094: LIST
52095: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
52096: LD_ADDR_VAR 0 39
52100: PUSH
52101: LD_INT 0
52103: PUSH
52104: LD_INT 0
52106: PUSH
52107: EMPTY
52108: LIST
52109: LIST
52110: PUSH
52111: LD_INT 0
52113: PUSH
52114: LD_INT 1
52116: NEG
52117: PUSH
52118: EMPTY
52119: LIST
52120: LIST
52121: PUSH
52122: LD_INT 1
52124: PUSH
52125: LD_INT 0
52127: PUSH
52128: EMPTY
52129: LIST
52130: LIST
52131: PUSH
52132: LD_INT 1
52134: PUSH
52135: LD_INT 1
52137: PUSH
52138: EMPTY
52139: LIST
52140: LIST
52141: PUSH
52142: LD_INT 0
52144: PUSH
52145: LD_INT 1
52147: PUSH
52148: EMPTY
52149: LIST
52150: LIST
52151: PUSH
52152: LD_INT 1
52154: NEG
52155: PUSH
52156: LD_INT 0
52158: PUSH
52159: EMPTY
52160: LIST
52161: LIST
52162: PUSH
52163: LD_INT 1
52165: NEG
52166: PUSH
52167: LD_INT 1
52169: NEG
52170: PUSH
52171: EMPTY
52172: LIST
52173: LIST
52174: PUSH
52175: LD_INT 1
52177: NEG
52178: PUSH
52179: LD_INT 2
52181: NEG
52182: PUSH
52183: EMPTY
52184: LIST
52185: LIST
52186: PUSH
52187: LD_INT 1
52189: PUSH
52190: LD_INT 2
52192: PUSH
52193: EMPTY
52194: LIST
52195: LIST
52196: PUSH
52197: EMPTY
52198: LIST
52199: LIST
52200: LIST
52201: LIST
52202: LIST
52203: LIST
52204: LIST
52205: LIST
52206: LIST
52207: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
52208: LD_ADDR_VAR 0 40
52212: PUSH
52213: LD_INT 0
52215: PUSH
52216: LD_INT 0
52218: PUSH
52219: EMPTY
52220: LIST
52221: LIST
52222: PUSH
52223: LD_INT 0
52225: PUSH
52226: LD_INT 1
52228: NEG
52229: PUSH
52230: EMPTY
52231: LIST
52232: LIST
52233: PUSH
52234: LD_INT 1
52236: PUSH
52237: LD_INT 0
52239: PUSH
52240: EMPTY
52241: LIST
52242: LIST
52243: PUSH
52244: LD_INT 1
52246: PUSH
52247: LD_INT 1
52249: PUSH
52250: EMPTY
52251: LIST
52252: LIST
52253: PUSH
52254: LD_INT 0
52256: PUSH
52257: LD_INT 1
52259: PUSH
52260: EMPTY
52261: LIST
52262: LIST
52263: PUSH
52264: LD_INT 1
52266: NEG
52267: PUSH
52268: LD_INT 0
52270: PUSH
52271: EMPTY
52272: LIST
52273: LIST
52274: PUSH
52275: LD_INT 1
52277: NEG
52278: PUSH
52279: LD_INT 1
52281: NEG
52282: PUSH
52283: EMPTY
52284: LIST
52285: LIST
52286: PUSH
52287: LD_INT 1
52289: PUSH
52290: LD_INT 1
52292: NEG
52293: PUSH
52294: EMPTY
52295: LIST
52296: LIST
52297: PUSH
52298: LD_INT 1
52300: NEG
52301: PUSH
52302: LD_INT 1
52304: PUSH
52305: EMPTY
52306: LIST
52307: LIST
52308: PUSH
52309: EMPTY
52310: LIST
52311: LIST
52312: LIST
52313: LIST
52314: LIST
52315: LIST
52316: LIST
52317: LIST
52318: LIST
52319: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52320: LD_ADDR_VAR 0 41
52324: PUSH
52325: LD_INT 0
52327: PUSH
52328: LD_INT 0
52330: PUSH
52331: EMPTY
52332: LIST
52333: LIST
52334: PUSH
52335: LD_INT 0
52337: PUSH
52338: LD_INT 1
52340: NEG
52341: PUSH
52342: EMPTY
52343: LIST
52344: LIST
52345: PUSH
52346: LD_INT 1
52348: PUSH
52349: LD_INT 0
52351: PUSH
52352: EMPTY
52353: LIST
52354: LIST
52355: PUSH
52356: LD_INT 1
52358: PUSH
52359: LD_INT 1
52361: PUSH
52362: EMPTY
52363: LIST
52364: LIST
52365: PUSH
52366: LD_INT 0
52368: PUSH
52369: LD_INT 1
52371: PUSH
52372: EMPTY
52373: LIST
52374: LIST
52375: PUSH
52376: LD_INT 1
52378: NEG
52379: PUSH
52380: LD_INT 0
52382: PUSH
52383: EMPTY
52384: LIST
52385: LIST
52386: PUSH
52387: LD_INT 1
52389: NEG
52390: PUSH
52391: LD_INT 1
52393: NEG
52394: PUSH
52395: EMPTY
52396: LIST
52397: LIST
52398: PUSH
52399: LD_INT 1
52401: NEG
52402: PUSH
52403: LD_INT 2
52405: NEG
52406: PUSH
52407: EMPTY
52408: LIST
52409: LIST
52410: PUSH
52411: LD_INT 1
52413: PUSH
52414: LD_INT 1
52416: NEG
52417: PUSH
52418: EMPTY
52419: LIST
52420: LIST
52421: PUSH
52422: LD_INT 2
52424: PUSH
52425: LD_INT 0
52427: PUSH
52428: EMPTY
52429: LIST
52430: LIST
52431: PUSH
52432: LD_INT 2
52434: PUSH
52435: LD_INT 1
52437: PUSH
52438: EMPTY
52439: LIST
52440: LIST
52441: PUSH
52442: LD_INT 2
52444: PUSH
52445: LD_INT 2
52447: PUSH
52448: EMPTY
52449: LIST
52450: LIST
52451: PUSH
52452: LD_INT 1
52454: PUSH
52455: LD_INT 2
52457: PUSH
52458: EMPTY
52459: LIST
52460: LIST
52461: PUSH
52462: LD_INT 1
52464: NEG
52465: PUSH
52466: LD_INT 1
52468: PUSH
52469: EMPTY
52470: LIST
52471: LIST
52472: PUSH
52473: LD_INT 2
52475: NEG
52476: PUSH
52477: LD_INT 0
52479: PUSH
52480: EMPTY
52481: LIST
52482: LIST
52483: PUSH
52484: LD_INT 2
52486: NEG
52487: PUSH
52488: LD_INT 1
52490: NEG
52491: PUSH
52492: EMPTY
52493: LIST
52494: LIST
52495: PUSH
52496: LD_INT 2
52498: NEG
52499: PUSH
52500: LD_INT 2
52502: NEG
52503: PUSH
52504: EMPTY
52505: LIST
52506: LIST
52507: PUSH
52508: LD_INT 2
52510: NEG
52511: PUSH
52512: LD_INT 3
52514: NEG
52515: PUSH
52516: EMPTY
52517: LIST
52518: LIST
52519: PUSH
52520: LD_INT 2
52522: PUSH
52523: LD_INT 1
52525: NEG
52526: PUSH
52527: EMPTY
52528: LIST
52529: LIST
52530: PUSH
52531: LD_INT 3
52533: PUSH
52534: LD_INT 0
52536: PUSH
52537: EMPTY
52538: LIST
52539: LIST
52540: PUSH
52541: LD_INT 3
52543: PUSH
52544: LD_INT 1
52546: PUSH
52547: EMPTY
52548: LIST
52549: LIST
52550: PUSH
52551: LD_INT 3
52553: PUSH
52554: LD_INT 2
52556: PUSH
52557: EMPTY
52558: LIST
52559: LIST
52560: PUSH
52561: LD_INT 3
52563: PUSH
52564: LD_INT 3
52566: PUSH
52567: EMPTY
52568: LIST
52569: LIST
52570: PUSH
52571: LD_INT 2
52573: PUSH
52574: LD_INT 3
52576: PUSH
52577: EMPTY
52578: LIST
52579: LIST
52580: PUSH
52581: LD_INT 2
52583: NEG
52584: PUSH
52585: LD_INT 1
52587: PUSH
52588: EMPTY
52589: LIST
52590: LIST
52591: PUSH
52592: LD_INT 3
52594: NEG
52595: PUSH
52596: LD_INT 0
52598: PUSH
52599: EMPTY
52600: LIST
52601: LIST
52602: PUSH
52603: LD_INT 3
52605: NEG
52606: PUSH
52607: LD_INT 1
52609: NEG
52610: PUSH
52611: EMPTY
52612: LIST
52613: LIST
52614: PUSH
52615: LD_INT 3
52617: NEG
52618: PUSH
52619: LD_INT 2
52621: NEG
52622: PUSH
52623: EMPTY
52624: LIST
52625: LIST
52626: PUSH
52627: LD_INT 3
52629: NEG
52630: PUSH
52631: LD_INT 3
52633: NEG
52634: PUSH
52635: EMPTY
52636: LIST
52637: LIST
52638: PUSH
52639: EMPTY
52640: LIST
52641: LIST
52642: LIST
52643: LIST
52644: LIST
52645: LIST
52646: LIST
52647: LIST
52648: LIST
52649: LIST
52650: LIST
52651: LIST
52652: LIST
52653: LIST
52654: LIST
52655: LIST
52656: LIST
52657: LIST
52658: LIST
52659: LIST
52660: LIST
52661: LIST
52662: LIST
52663: LIST
52664: LIST
52665: LIST
52666: LIST
52667: LIST
52668: LIST
52669: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52670: LD_ADDR_VAR 0 42
52674: PUSH
52675: LD_INT 0
52677: PUSH
52678: LD_INT 0
52680: PUSH
52681: EMPTY
52682: LIST
52683: LIST
52684: PUSH
52685: LD_INT 0
52687: PUSH
52688: LD_INT 1
52690: NEG
52691: PUSH
52692: EMPTY
52693: LIST
52694: LIST
52695: PUSH
52696: LD_INT 1
52698: PUSH
52699: LD_INT 0
52701: PUSH
52702: EMPTY
52703: LIST
52704: LIST
52705: PUSH
52706: LD_INT 1
52708: PUSH
52709: LD_INT 1
52711: PUSH
52712: EMPTY
52713: LIST
52714: LIST
52715: PUSH
52716: LD_INT 0
52718: PUSH
52719: LD_INT 1
52721: PUSH
52722: EMPTY
52723: LIST
52724: LIST
52725: PUSH
52726: LD_INT 1
52728: NEG
52729: PUSH
52730: LD_INT 0
52732: PUSH
52733: EMPTY
52734: LIST
52735: LIST
52736: PUSH
52737: LD_INT 1
52739: NEG
52740: PUSH
52741: LD_INT 1
52743: NEG
52744: PUSH
52745: EMPTY
52746: LIST
52747: LIST
52748: PUSH
52749: LD_INT 1
52751: NEG
52752: PUSH
52753: LD_INT 2
52755: NEG
52756: PUSH
52757: EMPTY
52758: LIST
52759: LIST
52760: PUSH
52761: LD_INT 0
52763: PUSH
52764: LD_INT 2
52766: NEG
52767: PUSH
52768: EMPTY
52769: LIST
52770: LIST
52771: PUSH
52772: LD_INT 1
52774: PUSH
52775: LD_INT 1
52777: NEG
52778: PUSH
52779: EMPTY
52780: LIST
52781: LIST
52782: PUSH
52783: LD_INT 2
52785: PUSH
52786: LD_INT 1
52788: PUSH
52789: EMPTY
52790: LIST
52791: LIST
52792: PUSH
52793: LD_INT 2
52795: PUSH
52796: LD_INT 2
52798: PUSH
52799: EMPTY
52800: LIST
52801: LIST
52802: PUSH
52803: LD_INT 1
52805: PUSH
52806: LD_INT 2
52808: PUSH
52809: EMPTY
52810: LIST
52811: LIST
52812: PUSH
52813: LD_INT 0
52815: PUSH
52816: LD_INT 2
52818: PUSH
52819: EMPTY
52820: LIST
52821: LIST
52822: PUSH
52823: LD_INT 1
52825: NEG
52826: PUSH
52827: LD_INT 1
52829: PUSH
52830: EMPTY
52831: LIST
52832: LIST
52833: PUSH
52834: LD_INT 2
52836: NEG
52837: PUSH
52838: LD_INT 1
52840: NEG
52841: PUSH
52842: EMPTY
52843: LIST
52844: LIST
52845: PUSH
52846: LD_INT 2
52848: NEG
52849: PUSH
52850: LD_INT 2
52852: NEG
52853: PUSH
52854: EMPTY
52855: LIST
52856: LIST
52857: PUSH
52858: LD_INT 2
52860: NEG
52861: PUSH
52862: LD_INT 3
52864: NEG
52865: PUSH
52866: EMPTY
52867: LIST
52868: LIST
52869: PUSH
52870: LD_INT 1
52872: NEG
52873: PUSH
52874: LD_INT 3
52876: NEG
52877: PUSH
52878: EMPTY
52879: LIST
52880: LIST
52881: PUSH
52882: LD_INT 0
52884: PUSH
52885: LD_INT 3
52887: NEG
52888: PUSH
52889: EMPTY
52890: LIST
52891: LIST
52892: PUSH
52893: LD_INT 1
52895: PUSH
52896: LD_INT 2
52898: NEG
52899: PUSH
52900: EMPTY
52901: LIST
52902: LIST
52903: PUSH
52904: LD_INT 3
52906: PUSH
52907: LD_INT 2
52909: PUSH
52910: EMPTY
52911: LIST
52912: LIST
52913: PUSH
52914: LD_INT 3
52916: PUSH
52917: LD_INT 3
52919: PUSH
52920: EMPTY
52921: LIST
52922: LIST
52923: PUSH
52924: LD_INT 2
52926: PUSH
52927: LD_INT 3
52929: PUSH
52930: EMPTY
52931: LIST
52932: LIST
52933: PUSH
52934: LD_INT 1
52936: PUSH
52937: LD_INT 3
52939: PUSH
52940: EMPTY
52941: LIST
52942: LIST
52943: PUSH
52944: LD_INT 0
52946: PUSH
52947: LD_INT 3
52949: PUSH
52950: EMPTY
52951: LIST
52952: LIST
52953: PUSH
52954: LD_INT 1
52956: NEG
52957: PUSH
52958: LD_INT 2
52960: PUSH
52961: EMPTY
52962: LIST
52963: LIST
52964: PUSH
52965: LD_INT 3
52967: NEG
52968: PUSH
52969: LD_INT 2
52971: NEG
52972: PUSH
52973: EMPTY
52974: LIST
52975: LIST
52976: PUSH
52977: LD_INT 3
52979: NEG
52980: PUSH
52981: LD_INT 3
52983: NEG
52984: PUSH
52985: EMPTY
52986: LIST
52987: LIST
52988: PUSH
52989: EMPTY
52990: LIST
52991: LIST
52992: LIST
52993: LIST
52994: LIST
52995: LIST
52996: LIST
52997: LIST
52998: LIST
52999: LIST
53000: LIST
53001: LIST
53002: LIST
53003: LIST
53004: LIST
53005: LIST
53006: LIST
53007: LIST
53008: LIST
53009: LIST
53010: LIST
53011: LIST
53012: LIST
53013: LIST
53014: LIST
53015: LIST
53016: LIST
53017: LIST
53018: LIST
53019: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53020: LD_ADDR_VAR 0 43
53024: PUSH
53025: LD_INT 0
53027: PUSH
53028: LD_INT 0
53030: PUSH
53031: EMPTY
53032: LIST
53033: LIST
53034: PUSH
53035: LD_INT 0
53037: PUSH
53038: LD_INT 1
53040: NEG
53041: PUSH
53042: EMPTY
53043: LIST
53044: LIST
53045: PUSH
53046: LD_INT 1
53048: PUSH
53049: LD_INT 0
53051: PUSH
53052: EMPTY
53053: LIST
53054: LIST
53055: PUSH
53056: LD_INT 1
53058: PUSH
53059: LD_INT 1
53061: PUSH
53062: EMPTY
53063: LIST
53064: LIST
53065: PUSH
53066: LD_INT 0
53068: PUSH
53069: LD_INT 1
53071: PUSH
53072: EMPTY
53073: LIST
53074: LIST
53075: PUSH
53076: LD_INT 1
53078: NEG
53079: PUSH
53080: LD_INT 0
53082: PUSH
53083: EMPTY
53084: LIST
53085: LIST
53086: PUSH
53087: LD_INT 1
53089: NEG
53090: PUSH
53091: LD_INT 1
53093: NEG
53094: PUSH
53095: EMPTY
53096: LIST
53097: LIST
53098: PUSH
53099: LD_INT 1
53101: NEG
53102: PUSH
53103: LD_INT 2
53105: NEG
53106: PUSH
53107: EMPTY
53108: LIST
53109: LIST
53110: PUSH
53111: LD_INT 0
53113: PUSH
53114: LD_INT 2
53116: NEG
53117: PUSH
53118: EMPTY
53119: LIST
53120: LIST
53121: PUSH
53122: LD_INT 1
53124: PUSH
53125: LD_INT 1
53127: NEG
53128: PUSH
53129: EMPTY
53130: LIST
53131: LIST
53132: PUSH
53133: LD_INT 2
53135: PUSH
53136: LD_INT 0
53138: PUSH
53139: EMPTY
53140: LIST
53141: LIST
53142: PUSH
53143: LD_INT 2
53145: PUSH
53146: LD_INT 1
53148: PUSH
53149: EMPTY
53150: LIST
53151: LIST
53152: PUSH
53153: LD_INT 1
53155: PUSH
53156: LD_INT 2
53158: PUSH
53159: EMPTY
53160: LIST
53161: LIST
53162: PUSH
53163: LD_INT 0
53165: PUSH
53166: LD_INT 2
53168: PUSH
53169: EMPTY
53170: LIST
53171: LIST
53172: PUSH
53173: LD_INT 1
53175: NEG
53176: PUSH
53177: LD_INT 1
53179: PUSH
53180: EMPTY
53181: LIST
53182: LIST
53183: PUSH
53184: LD_INT 2
53186: NEG
53187: PUSH
53188: LD_INT 0
53190: PUSH
53191: EMPTY
53192: LIST
53193: LIST
53194: PUSH
53195: LD_INT 2
53197: NEG
53198: PUSH
53199: LD_INT 1
53201: NEG
53202: PUSH
53203: EMPTY
53204: LIST
53205: LIST
53206: PUSH
53207: LD_INT 1
53209: NEG
53210: PUSH
53211: LD_INT 3
53213: NEG
53214: PUSH
53215: EMPTY
53216: LIST
53217: LIST
53218: PUSH
53219: LD_INT 0
53221: PUSH
53222: LD_INT 3
53224: NEG
53225: PUSH
53226: EMPTY
53227: LIST
53228: LIST
53229: PUSH
53230: LD_INT 1
53232: PUSH
53233: LD_INT 2
53235: NEG
53236: PUSH
53237: EMPTY
53238: LIST
53239: LIST
53240: PUSH
53241: LD_INT 2
53243: PUSH
53244: LD_INT 1
53246: NEG
53247: PUSH
53248: EMPTY
53249: LIST
53250: LIST
53251: PUSH
53252: LD_INT 3
53254: PUSH
53255: LD_INT 0
53257: PUSH
53258: EMPTY
53259: LIST
53260: LIST
53261: PUSH
53262: LD_INT 3
53264: PUSH
53265: LD_INT 1
53267: PUSH
53268: EMPTY
53269: LIST
53270: LIST
53271: PUSH
53272: LD_INT 1
53274: PUSH
53275: LD_INT 3
53277: PUSH
53278: EMPTY
53279: LIST
53280: LIST
53281: PUSH
53282: LD_INT 0
53284: PUSH
53285: LD_INT 3
53287: PUSH
53288: EMPTY
53289: LIST
53290: LIST
53291: PUSH
53292: LD_INT 1
53294: NEG
53295: PUSH
53296: LD_INT 2
53298: PUSH
53299: EMPTY
53300: LIST
53301: LIST
53302: PUSH
53303: LD_INT 2
53305: NEG
53306: PUSH
53307: LD_INT 1
53309: PUSH
53310: EMPTY
53311: LIST
53312: LIST
53313: PUSH
53314: LD_INT 3
53316: NEG
53317: PUSH
53318: LD_INT 0
53320: PUSH
53321: EMPTY
53322: LIST
53323: LIST
53324: PUSH
53325: LD_INT 3
53327: NEG
53328: PUSH
53329: LD_INT 1
53331: NEG
53332: PUSH
53333: EMPTY
53334: LIST
53335: LIST
53336: PUSH
53337: EMPTY
53338: LIST
53339: LIST
53340: LIST
53341: LIST
53342: LIST
53343: LIST
53344: LIST
53345: LIST
53346: LIST
53347: LIST
53348: LIST
53349: LIST
53350: LIST
53351: LIST
53352: LIST
53353: LIST
53354: LIST
53355: LIST
53356: LIST
53357: LIST
53358: LIST
53359: LIST
53360: LIST
53361: LIST
53362: LIST
53363: LIST
53364: LIST
53365: LIST
53366: LIST
53367: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53368: LD_ADDR_VAR 0 44
53372: PUSH
53373: LD_INT 0
53375: PUSH
53376: LD_INT 0
53378: PUSH
53379: EMPTY
53380: LIST
53381: LIST
53382: PUSH
53383: LD_INT 0
53385: PUSH
53386: LD_INT 1
53388: NEG
53389: PUSH
53390: EMPTY
53391: LIST
53392: LIST
53393: PUSH
53394: LD_INT 1
53396: PUSH
53397: LD_INT 0
53399: PUSH
53400: EMPTY
53401: LIST
53402: LIST
53403: PUSH
53404: LD_INT 1
53406: PUSH
53407: LD_INT 1
53409: PUSH
53410: EMPTY
53411: LIST
53412: LIST
53413: PUSH
53414: LD_INT 0
53416: PUSH
53417: LD_INT 1
53419: PUSH
53420: EMPTY
53421: LIST
53422: LIST
53423: PUSH
53424: LD_INT 1
53426: NEG
53427: PUSH
53428: LD_INT 0
53430: PUSH
53431: EMPTY
53432: LIST
53433: LIST
53434: PUSH
53435: LD_INT 1
53437: NEG
53438: PUSH
53439: LD_INT 1
53441: NEG
53442: PUSH
53443: EMPTY
53444: LIST
53445: LIST
53446: PUSH
53447: LD_INT 1
53449: NEG
53450: PUSH
53451: LD_INT 2
53453: NEG
53454: PUSH
53455: EMPTY
53456: LIST
53457: LIST
53458: PUSH
53459: LD_INT 1
53461: PUSH
53462: LD_INT 1
53464: NEG
53465: PUSH
53466: EMPTY
53467: LIST
53468: LIST
53469: PUSH
53470: LD_INT 2
53472: PUSH
53473: LD_INT 0
53475: PUSH
53476: EMPTY
53477: LIST
53478: LIST
53479: PUSH
53480: LD_INT 2
53482: PUSH
53483: LD_INT 1
53485: PUSH
53486: EMPTY
53487: LIST
53488: LIST
53489: PUSH
53490: LD_INT 2
53492: PUSH
53493: LD_INT 2
53495: PUSH
53496: EMPTY
53497: LIST
53498: LIST
53499: PUSH
53500: LD_INT 1
53502: PUSH
53503: LD_INT 2
53505: PUSH
53506: EMPTY
53507: LIST
53508: LIST
53509: PUSH
53510: LD_INT 1
53512: NEG
53513: PUSH
53514: LD_INT 1
53516: PUSH
53517: EMPTY
53518: LIST
53519: LIST
53520: PUSH
53521: LD_INT 2
53523: NEG
53524: PUSH
53525: LD_INT 0
53527: PUSH
53528: EMPTY
53529: LIST
53530: LIST
53531: PUSH
53532: LD_INT 2
53534: NEG
53535: PUSH
53536: LD_INT 1
53538: NEG
53539: PUSH
53540: EMPTY
53541: LIST
53542: LIST
53543: PUSH
53544: LD_INT 2
53546: NEG
53547: PUSH
53548: LD_INT 2
53550: NEG
53551: PUSH
53552: EMPTY
53553: LIST
53554: LIST
53555: PUSH
53556: LD_INT 2
53558: NEG
53559: PUSH
53560: LD_INT 3
53562: NEG
53563: PUSH
53564: EMPTY
53565: LIST
53566: LIST
53567: PUSH
53568: LD_INT 2
53570: PUSH
53571: LD_INT 1
53573: NEG
53574: PUSH
53575: EMPTY
53576: LIST
53577: LIST
53578: PUSH
53579: LD_INT 3
53581: PUSH
53582: LD_INT 0
53584: PUSH
53585: EMPTY
53586: LIST
53587: LIST
53588: PUSH
53589: LD_INT 3
53591: PUSH
53592: LD_INT 1
53594: PUSH
53595: EMPTY
53596: LIST
53597: LIST
53598: PUSH
53599: LD_INT 3
53601: PUSH
53602: LD_INT 2
53604: PUSH
53605: EMPTY
53606: LIST
53607: LIST
53608: PUSH
53609: LD_INT 3
53611: PUSH
53612: LD_INT 3
53614: PUSH
53615: EMPTY
53616: LIST
53617: LIST
53618: PUSH
53619: LD_INT 2
53621: PUSH
53622: LD_INT 3
53624: PUSH
53625: EMPTY
53626: LIST
53627: LIST
53628: PUSH
53629: LD_INT 2
53631: NEG
53632: PUSH
53633: LD_INT 1
53635: PUSH
53636: EMPTY
53637: LIST
53638: LIST
53639: PUSH
53640: LD_INT 3
53642: NEG
53643: PUSH
53644: LD_INT 0
53646: PUSH
53647: EMPTY
53648: LIST
53649: LIST
53650: PUSH
53651: LD_INT 3
53653: NEG
53654: PUSH
53655: LD_INT 1
53657: NEG
53658: PUSH
53659: EMPTY
53660: LIST
53661: LIST
53662: PUSH
53663: LD_INT 3
53665: NEG
53666: PUSH
53667: LD_INT 2
53669: NEG
53670: PUSH
53671: EMPTY
53672: LIST
53673: LIST
53674: PUSH
53675: LD_INT 3
53677: NEG
53678: PUSH
53679: LD_INT 3
53681: NEG
53682: PUSH
53683: EMPTY
53684: LIST
53685: LIST
53686: PUSH
53687: EMPTY
53688: LIST
53689: LIST
53690: LIST
53691: LIST
53692: LIST
53693: LIST
53694: LIST
53695: LIST
53696: LIST
53697: LIST
53698: LIST
53699: LIST
53700: LIST
53701: LIST
53702: LIST
53703: LIST
53704: LIST
53705: LIST
53706: LIST
53707: LIST
53708: LIST
53709: LIST
53710: LIST
53711: LIST
53712: LIST
53713: LIST
53714: LIST
53715: LIST
53716: LIST
53717: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53718: LD_ADDR_VAR 0 45
53722: PUSH
53723: LD_INT 0
53725: PUSH
53726: LD_INT 0
53728: PUSH
53729: EMPTY
53730: LIST
53731: LIST
53732: PUSH
53733: LD_INT 0
53735: PUSH
53736: LD_INT 1
53738: NEG
53739: PUSH
53740: EMPTY
53741: LIST
53742: LIST
53743: PUSH
53744: LD_INT 1
53746: PUSH
53747: LD_INT 0
53749: PUSH
53750: EMPTY
53751: LIST
53752: LIST
53753: PUSH
53754: LD_INT 1
53756: PUSH
53757: LD_INT 1
53759: PUSH
53760: EMPTY
53761: LIST
53762: LIST
53763: PUSH
53764: LD_INT 0
53766: PUSH
53767: LD_INT 1
53769: PUSH
53770: EMPTY
53771: LIST
53772: LIST
53773: PUSH
53774: LD_INT 1
53776: NEG
53777: PUSH
53778: LD_INT 0
53780: PUSH
53781: EMPTY
53782: LIST
53783: LIST
53784: PUSH
53785: LD_INT 1
53787: NEG
53788: PUSH
53789: LD_INT 1
53791: NEG
53792: PUSH
53793: EMPTY
53794: LIST
53795: LIST
53796: PUSH
53797: LD_INT 1
53799: NEG
53800: PUSH
53801: LD_INT 2
53803: NEG
53804: PUSH
53805: EMPTY
53806: LIST
53807: LIST
53808: PUSH
53809: LD_INT 0
53811: PUSH
53812: LD_INT 2
53814: NEG
53815: PUSH
53816: EMPTY
53817: LIST
53818: LIST
53819: PUSH
53820: LD_INT 1
53822: PUSH
53823: LD_INT 1
53825: NEG
53826: PUSH
53827: EMPTY
53828: LIST
53829: LIST
53830: PUSH
53831: LD_INT 2
53833: PUSH
53834: LD_INT 1
53836: PUSH
53837: EMPTY
53838: LIST
53839: LIST
53840: PUSH
53841: LD_INT 2
53843: PUSH
53844: LD_INT 2
53846: PUSH
53847: EMPTY
53848: LIST
53849: LIST
53850: PUSH
53851: LD_INT 1
53853: PUSH
53854: LD_INT 2
53856: PUSH
53857: EMPTY
53858: LIST
53859: LIST
53860: PUSH
53861: LD_INT 0
53863: PUSH
53864: LD_INT 2
53866: PUSH
53867: EMPTY
53868: LIST
53869: LIST
53870: PUSH
53871: LD_INT 1
53873: NEG
53874: PUSH
53875: LD_INT 1
53877: PUSH
53878: EMPTY
53879: LIST
53880: LIST
53881: PUSH
53882: LD_INT 2
53884: NEG
53885: PUSH
53886: LD_INT 1
53888: NEG
53889: PUSH
53890: EMPTY
53891: LIST
53892: LIST
53893: PUSH
53894: LD_INT 2
53896: NEG
53897: PUSH
53898: LD_INT 2
53900: NEG
53901: PUSH
53902: EMPTY
53903: LIST
53904: LIST
53905: PUSH
53906: LD_INT 2
53908: NEG
53909: PUSH
53910: LD_INT 3
53912: NEG
53913: PUSH
53914: EMPTY
53915: LIST
53916: LIST
53917: PUSH
53918: LD_INT 1
53920: NEG
53921: PUSH
53922: LD_INT 3
53924: NEG
53925: PUSH
53926: EMPTY
53927: LIST
53928: LIST
53929: PUSH
53930: LD_INT 0
53932: PUSH
53933: LD_INT 3
53935: NEG
53936: PUSH
53937: EMPTY
53938: LIST
53939: LIST
53940: PUSH
53941: LD_INT 1
53943: PUSH
53944: LD_INT 2
53946: NEG
53947: PUSH
53948: EMPTY
53949: LIST
53950: LIST
53951: PUSH
53952: LD_INT 3
53954: PUSH
53955: LD_INT 2
53957: PUSH
53958: EMPTY
53959: LIST
53960: LIST
53961: PUSH
53962: LD_INT 3
53964: PUSH
53965: LD_INT 3
53967: PUSH
53968: EMPTY
53969: LIST
53970: LIST
53971: PUSH
53972: LD_INT 2
53974: PUSH
53975: LD_INT 3
53977: PUSH
53978: EMPTY
53979: LIST
53980: LIST
53981: PUSH
53982: LD_INT 1
53984: PUSH
53985: LD_INT 3
53987: PUSH
53988: EMPTY
53989: LIST
53990: LIST
53991: PUSH
53992: LD_INT 0
53994: PUSH
53995: LD_INT 3
53997: PUSH
53998: EMPTY
53999: LIST
54000: LIST
54001: PUSH
54002: LD_INT 1
54004: NEG
54005: PUSH
54006: LD_INT 2
54008: PUSH
54009: EMPTY
54010: LIST
54011: LIST
54012: PUSH
54013: LD_INT 3
54015: NEG
54016: PUSH
54017: LD_INT 2
54019: NEG
54020: PUSH
54021: EMPTY
54022: LIST
54023: LIST
54024: PUSH
54025: LD_INT 3
54027: NEG
54028: PUSH
54029: LD_INT 3
54031: NEG
54032: PUSH
54033: EMPTY
54034: LIST
54035: LIST
54036: PUSH
54037: EMPTY
54038: LIST
54039: LIST
54040: LIST
54041: LIST
54042: LIST
54043: LIST
54044: LIST
54045: LIST
54046: LIST
54047: LIST
54048: LIST
54049: LIST
54050: LIST
54051: LIST
54052: LIST
54053: LIST
54054: LIST
54055: LIST
54056: LIST
54057: LIST
54058: LIST
54059: LIST
54060: LIST
54061: LIST
54062: LIST
54063: LIST
54064: LIST
54065: LIST
54066: LIST
54067: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54068: LD_ADDR_VAR 0 46
54072: PUSH
54073: LD_INT 0
54075: PUSH
54076: LD_INT 0
54078: PUSH
54079: EMPTY
54080: LIST
54081: LIST
54082: PUSH
54083: LD_INT 0
54085: PUSH
54086: LD_INT 1
54088: NEG
54089: PUSH
54090: EMPTY
54091: LIST
54092: LIST
54093: PUSH
54094: LD_INT 1
54096: PUSH
54097: LD_INT 0
54099: PUSH
54100: EMPTY
54101: LIST
54102: LIST
54103: PUSH
54104: LD_INT 1
54106: PUSH
54107: LD_INT 1
54109: PUSH
54110: EMPTY
54111: LIST
54112: LIST
54113: PUSH
54114: LD_INT 0
54116: PUSH
54117: LD_INT 1
54119: PUSH
54120: EMPTY
54121: LIST
54122: LIST
54123: PUSH
54124: LD_INT 1
54126: NEG
54127: PUSH
54128: LD_INT 0
54130: PUSH
54131: EMPTY
54132: LIST
54133: LIST
54134: PUSH
54135: LD_INT 1
54137: NEG
54138: PUSH
54139: LD_INT 1
54141: NEG
54142: PUSH
54143: EMPTY
54144: LIST
54145: LIST
54146: PUSH
54147: LD_INT 1
54149: NEG
54150: PUSH
54151: LD_INT 2
54153: NEG
54154: PUSH
54155: EMPTY
54156: LIST
54157: LIST
54158: PUSH
54159: LD_INT 0
54161: PUSH
54162: LD_INT 2
54164: NEG
54165: PUSH
54166: EMPTY
54167: LIST
54168: LIST
54169: PUSH
54170: LD_INT 1
54172: PUSH
54173: LD_INT 1
54175: NEG
54176: PUSH
54177: EMPTY
54178: LIST
54179: LIST
54180: PUSH
54181: LD_INT 2
54183: PUSH
54184: LD_INT 0
54186: PUSH
54187: EMPTY
54188: LIST
54189: LIST
54190: PUSH
54191: LD_INT 2
54193: PUSH
54194: LD_INT 1
54196: PUSH
54197: EMPTY
54198: LIST
54199: LIST
54200: PUSH
54201: LD_INT 1
54203: PUSH
54204: LD_INT 2
54206: PUSH
54207: EMPTY
54208: LIST
54209: LIST
54210: PUSH
54211: LD_INT 0
54213: PUSH
54214: LD_INT 2
54216: PUSH
54217: EMPTY
54218: LIST
54219: LIST
54220: PUSH
54221: LD_INT 1
54223: NEG
54224: PUSH
54225: LD_INT 1
54227: PUSH
54228: EMPTY
54229: LIST
54230: LIST
54231: PUSH
54232: LD_INT 2
54234: NEG
54235: PUSH
54236: LD_INT 0
54238: PUSH
54239: EMPTY
54240: LIST
54241: LIST
54242: PUSH
54243: LD_INT 2
54245: NEG
54246: PUSH
54247: LD_INT 1
54249: NEG
54250: PUSH
54251: EMPTY
54252: LIST
54253: LIST
54254: PUSH
54255: LD_INT 1
54257: NEG
54258: PUSH
54259: LD_INT 3
54261: NEG
54262: PUSH
54263: EMPTY
54264: LIST
54265: LIST
54266: PUSH
54267: LD_INT 0
54269: PUSH
54270: LD_INT 3
54272: NEG
54273: PUSH
54274: EMPTY
54275: LIST
54276: LIST
54277: PUSH
54278: LD_INT 1
54280: PUSH
54281: LD_INT 2
54283: NEG
54284: PUSH
54285: EMPTY
54286: LIST
54287: LIST
54288: PUSH
54289: LD_INT 2
54291: PUSH
54292: LD_INT 1
54294: NEG
54295: PUSH
54296: EMPTY
54297: LIST
54298: LIST
54299: PUSH
54300: LD_INT 3
54302: PUSH
54303: LD_INT 0
54305: PUSH
54306: EMPTY
54307: LIST
54308: LIST
54309: PUSH
54310: LD_INT 3
54312: PUSH
54313: LD_INT 1
54315: PUSH
54316: EMPTY
54317: LIST
54318: LIST
54319: PUSH
54320: LD_INT 1
54322: PUSH
54323: LD_INT 3
54325: PUSH
54326: EMPTY
54327: LIST
54328: LIST
54329: PUSH
54330: LD_INT 0
54332: PUSH
54333: LD_INT 3
54335: PUSH
54336: EMPTY
54337: LIST
54338: LIST
54339: PUSH
54340: LD_INT 1
54342: NEG
54343: PUSH
54344: LD_INT 2
54346: PUSH
54347: EMPTY
54348: LIST
54349: LIST
54350: PUSH
54351: LD_INT 2
54353: NEG
54354: PUSH
54355: LD_INT 1
54357: PUSH
54358: EMPTY
54359: LIST
54360: LIST
54361: PUSH
54362: LD_INT 3
54364: NEG
54365: PUSH
54366: LD_INT 0
54368: PUSH
54369: EMPTY
54370: LIST
54371: LIST
54372: PUSH
54373: LD_INT 3
54375: NEG
54376: PUSH
54377: LD_INT 1
54379: NEG
54380: PUSH
54381: EMPTY
54382: LIST
54383: LIST
54384: PUSH
54385: EMPTY
54386: LIST
54387: LIST
54388: LIST
54389: LIST
54390: LIST
54391: LIST
54392: LIST
54393: LIST
54394: LIST
54395: LIST
54396: LIST
54397: LIST
54398: LIST
54399: LIST
54400: LIST
54401: LIST
54402: LIST
54403: LIST
54404: LIST
54405: LIST
54406: LIST
54407: LIST
54408: LIST
54409: LIST
54410: LIST
54411: LIST
54412: LIST
54413: LIST
54414: LIST
54415: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54416: LD_ADDR_VAR 0 47
54420: PUSH
54421: LD_INT 0
54423: PUSH
54424: LD_INT 0
54426: PUSH
54427: EMPTY
54428: LIST
54429: LIST
54430: PUSH
54431: LD_INT 0
54433: PUSH
54434: LD_INT 1
54436: NEG
54437: PUSH
54438: EMPTY
54439: LIST
54440: LIST
54441: PUSH
54442: LD_INT 1
54444: PUSH
54445: LD_INT 0
54447: PUSH
54448: EMPTY
54449: LIST
54450: LIST
54451: PUSH
54452: LD_INT 1
54454: PUSH
54455: LD_INT 1
54457: PUSH
54458: EMPTY
54459: LIST
54460: LIST
54461: PUSH
54462: LD_INT 0
54464: PUSH
54465: LD_INT 1
54467: PUSH
54468: EMPTY
54469: LIST
54470: LIST
54471: PUSH
54472: LD_INT 1
54474: NEG
54475: PUSH
54476: LD_INT 0
54478: PUSH
54479: EMPTY
54480: LIST
54481: LIST
54482: PUSH
54483: LD_INT 1
54485: NEG
54486: PUSH
54487: LD_INT 1
54489: NEG
54490: PUSH
54491: EMPTY
54492: LIST
54493: LIST
54494: PUSH
54495: LD_INT 1
54497: NEG
54498: PUSH
54499: LD_INT 2
54501: NEG
54502: PUSH
54503: EMPTY
54504: LIST
54505: LIST
54506: PUSH
54507: LD_INT 0
54509: PUSH
54510: LD_INT 2
54512: NEG
54513: PUSH
54514: EMPTY
54515: LIST
54516: LIST
54517: PUSH
54518: LD_INT 1
54520: PUSH
54521: LD_INT 1
54523: NEG
54524: PUSH
54525: EMPTY
54526: LIST
54527: LIST
54528: PUSH
54529: LD_INT 2
54531: NEG
54532: PUSH
54533: LD_INT 1
54535: NEG
54536: PUSH
54537: EMPTY
54538: LIST
54539: LIST
54540: PUSH
54541: LD_INT 2
54543: NEG
54544: PUSH
54545: LD_INT 2
54547: NEG
54548: PUSH
54549: EMPTY
54550: LIST
54551: LIST
54552: PUSH
54553: EMPTY
54554: LIST
54555: LIST
54556: LIST
54557: LIST
54558: LIST
54559: LIST
54560: LIST
54561: LIST
54562: LIST
54563: LIST
54564: LIST
54565: LIST
54566: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
54567: LD_ADDR_VAR 0 48
54571: PUSH
54572: LD_INT 0
54574: PUSH
54575: LD_INT 0
54577: PUSH
54578: EMPTY
54579: LIST
54580: LIST
54581: PUSH
54582: LD_INT 0
54584: PUSH
54585: LD_INT 1
54587: NEG
54588: PUSH
54589: EMPTY
54590: LIST
54591: LIST
54592: PUSH
54593: LD_INT 1
54595: PUSH
54596: LD_INT 0
54598: PUSH
54599: EMPTY
54600: LIST
54601: LIST
54602: PUSH
54603: LD_INT 1
54605: PUSH
54606: LD_INT 1
54608: PUSH
54609: EMPTY
54610: LIST
54611: LIST
54612: PUSH
54613: LD_INT 0
54615: PUSH
54616: LD_INT 1
54618: PUSH
54619: EMPTY
54620: LIST
54621: LIST
54622: PUSH
54623: LD_INT 1
54625: NEG
54626: PUSH
54627: LD_INT 0
54629: PUSH
54630: EMPTY
54631: LIST
54632: LIST
54633: PUSH
54634: LD_INT 1
54636: NEG
54637: PUSH
54638: LD_INT 1
54640: NEG
54641: PUSH
54642: EMPTY
54643: LIST
54644: LIST
54645: PUSH
54646: LD_INT 1
54648: NEG
54649: PUSH
54650: LD_INT 2
54652: NEG
54653: PUSH
54654: EMPTY
54655: LIST
54656: LIST
54657: PUSH
54658: LD_INT 0
54660: PUSH
54661: LD_INT 2
54663: NEG
54664: PUSH
54665: EMPTY
54666: LIST
54667: LIST
54668: PUSH
54669: LD_INT 1
54671: PUSH
54672: LD_INT 1
54674: NEG
54675: PUSH
54676: EMPTY
54677: LIST
54678: LIST
54679: PUSH
54680: LD_INT 2
54682: PUSH
54683: LD_INT 0
54685: PUSH
54686: EMPTY
54687: LIST
54688: LIST
54689: PUSH
54690: LD_INT 2
54692: PUSH
54693: LD_INT 1
54695: PUSH
54696: EMPTY
54697: LIST
54698: LIST
54699: PUSH
54700: EMPTY
54701: LIST
54702: LIST
54703: LIST
54704: LIST
54705: LIST
54706: LIST
54707: LIST
54708: LIST
54709: LIST
54710: LIST
54711: LIST
54712: LIST
54713: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
54714: LD_ADDR_VAR 0 49
54718: PUSH
54719: LD_INT 0
54721: PUSH
54722: LD_INT 0
54724: PUSH
54725: EMPTY
54726: LIST
54727: LIST
54728: PUSH
54729: LD_INT 0
54731: PUSH
54732: LD_INT 1
54734: NEG
54735: PUSH
54736: EMPTY
54737: LIST
54738: LIST
54739: PUSH
54740: LD_INT 1
54742: PUSH
54743: LD_INT 0
54745: PUSH
54746: EMPTY
54747: LIST
54748: LIST
54749: PUSH
54750: LD_INT 1
54752: PUSH
54753: LD_INT 1
54755: PUSH
54756: EMPTY
54757: LIST
54758: LIST
54759: PUSH
54760: LD_INT 0
54762: PUSH
54763: LD_INT 1
54765: PUSH
54766: EMPTY
54767: LIST
54768: LIST
54769: PUSH
54770: LD_INT 1
54772: NEG
54773: PUSH
54774: LD_INT 0
54776: PUSH
54777: EMPTY
54778: LIST
54779: LIST
54780: PUSH
54781: LD_INT 1
54783: NEG
54784: PUSH
54785: LD_INT 1
54787: NEG
54788: PUSH
54789: EMPTY
54790: LIST
54791: LIST
54792: PUSH
54793: LD_INT 1
54795: PUSH
54796: LD_INT 1
54798: NEG
54799: PUSH
54800: EMPTY
54801: LIST
54802: LIST
54803: PUSH
54804: LD_INT 2
54806: PUSH
54807: LD_INT 0
54809: PUSH
54810: EMPTY
54811: LIST
54812: LIST
54813: PUSH
54814: LD_INT 2
54816: PUSH
54817: LD_INT 1
54819: PUSH
54820: EMPTY
54821: LIST
54822: LIST
54823: PUSH
54824: LD_INT 2
54826: PUSH
54827: LD_INT 2
54829: PUSH
54830: EMPTY
54831: LIST
54832: LIST
54833: PUSH
54834: LD_INT 1
54836: PUSH
54837: LD_INT 2
54839: PUSH
54840: EMPTY
54841: LIST
54842: LIST
54843: PUSH
54844: EMPTY
54845: LIST
54846: LIST
54847: LIST
54848: LIST
54849: LIST
54850: LIST
54851: LIST
54852: LIST
54853: LIST
54854: LIST
54855: LIST
54856: LIST
54857: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
54858: LD_ADDR_VAR 0 50
54862: PUSH
54863: LD_INT 0
54865: PUSH
54866: LD_INT 0
54868: PUSH
54869: EMPTY
54870: LIST
54871: LIST
54872: PUSH
54873: LD_INT 0
54875: PUSH
54876: LD_INT 1
54878: NEG
54879: PUSH
54880: EMPTY
54881: LIST
54882: LIST
54883: PUSH
54884: LD_INT 1
54886: PUSH
54887: LD_INT 0
54889: PUSH
54890: EMPTY
54891: LIST
54892: LIST
54893: PUSH
54894: LD_INT 1
54896: PUSH
54897: LD_INT 1
54899: PUSH
54900: EMPTY
54901: LIST
54902: LIST
54903: PUSH
54904: LD_INT 0
54906: PUSH
54907: LD_INT 1
54909: PUSH
54910: EMPTY
54911: LIST
54912: LIST
54913: PUSH
54914: LD_INT 1
54916: NEG
54917: PUSH
54918: LD_INT 0
54920: PUSH
54921: EMPTY
54922: LIST
54923: LIST
54924: PUSH
54925: LD_INT 1
54927: NEG
54928: PUSH
54929: LD_INT 1
54931: NEG
54932: PUSH
54933: EMPTY
54934: LIST
54935: LIST
54936: PUSH
54937: LD_INT 2
54939: PUSH
54940: LD_INT 1
54942: PUSH
54943: EMPTY
54944: LIST
54945: LIST
54946: PUSH
54947: LD_INT 2
54949: PUSH
54950: LD_INT 2
54952: PUSH
54953: EMPTY
54954: LIST
54955: LIST
54956: PUSH
54957: LD_INT 1
54959: PUSH
54960: LD_INT 2
54962: PUSH
54963: EMPTY
54964: LIST
54965: LIST
54966: PUSH
54967: LD_INT 0
54969: PUSH
54970: LD_INT 2
54972: PUSH
54973: EMPTY
54974: LIST
54975: LIST
54976: PUSH
54977: LD_INT 1
54979: NEG
54980: PUSH
54981: LD_INT 1
54983: PUSH
54984: EMPTY
54985: LIST
54986: LIST
54987: PUSH
54988: EMPTY
54989: LIST
54990: LIST
54991: LIST
54992: LIST
54993: LIST
54994: LIST
54995: LIST
54996: LIST
54997: LIST
54998: LIST
54999: LIST
55000: LIST
55001: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
55002: LD_ADDR_VAR 0 51
55006: PUSH
55007: LD_INT 0
55009: PUSH
55010: LD_INT 0
55012: PUSH
55013: EMPTY
55014: LIST
55015: LIST
55016: PUSH
55017: LD_INT 0
55019: PUSH
55020: LD_INT 1
55022: NEG
55023: PUSH
55024: EMPTY
55025: LIST
55026: LIST
55027: PUSH
55028: LD_INT 1
55030: PUSH
55031: LD_INT 0
55033: PUSH
55034: EMPTY
55035: LIST
55036: LIST
55037: PUSH
55038: LD_INT 1
55040: PUSH
55041: LD_INT 1
55043: PUSH
55044: EMPTY
55045: LIST
55046: LIST
55047: PUSH
55048: LD_INT 0
55050: PUSH
55051: LD_INT 1
55053: PUSH
55054: EMPTY
55055: LIST
55056: LIST
55057: PUSH
55058: LD_INT 1
55060: NEG
55061: PUSH
55062: LD_INT 0
55064: PUSH
55065: EMPTY
55066: LIST
55067: LIST
55068: PUSH
55069: LD_INT 1
55071: NEG
55072: PUSH
55073: LD_INT 1
55075: NEG
55076: PUSH
55077: EMPTY
55078: LIST
55079: LIST
55080: PUSH
55081: LD_INT 1
55083: PUSH
55084: LD_INT 2
55086: PUSH
55087: EMPTY
55088: LIST
55089: LIST
55090: PUSH
55091: LD_INT 0
55093: PUSH
55094: LD_INT 2
55096: PUSH
55097: EMPTY
55098: LIST
55099: LIST
55100: PUSH
55101: LD_INT 1
55103: NEG
55104: PUSH
55105: LD_INT 1
55107: PUSH
55108: EMPTY
55109: LIST
55110: LIST
55111: PUSH
55112: LD_INT 2
55114: NEG
55115: PUSH
55116: LD_INT 0
55118: PUSH
55119: EMPTY
55120: LIST
55121: LIST
55122: PUSH
55123: LD_INT 2
55125: NEG
55126: PUSH
55127: LD_INT 1
55129: NEG
55130: PUSH
55131: EMPTY
55132: LIST
55133: LIST
55134: PUSH
55135: EMPTY
55136: LIST
55137: LIST
55138: LIST
55139: LIST
55140: LIST
55141: LIST
55142: LIST
55143: LIST
55144: LIST
55145: LIST
55146: LIST
55147: LIST
55148: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55149: LD_ADDR_VAR 0 52
55153: PUSH
55154: LD_INT 0
55156: PUSH
55157: LD_INT 0
55159: PUSH
55160: EMPTY
55161: LIST
55162: LIST
55163: PUSH
55164: LD_INT 0
55166: PUSH
55167: LD_INT 1
55169: NEG
55170: PUSH
55171: EMPTY
55172: LIST
55173: LIST
55174: PUSH
55175: LD_INT 1
55177: PUSH
55178: LD_INT 0
55180: PUSH
55181: EMPTY
55182: LIST
55183: LIST
55184: PUSH
55185: LD_INT 1
55187: PUSH
55188: LD_INT 1
55190: PUSH
55191: EMPTY
55192: LIST
55193: LIST
55194: PUSH
55195: LD_INT 0
55197: PUSH
55198: LD_INT 1
55200: PUSH
55201: EMPTY
55202: LIST
55203: LIST
55204: PUSH
55205: LD_INT 1
55207: NEG
55208: PUSH
55209: LD_INT 0
55211: PUSH
55212: EMPTY
55213: LIST
55214: LIST
55215: PUSH
55216: LD_INT 1
55218: NEG
55219: PUSH
55220: LD_INT 1
55222: NEG
55223: PUSH
55224: EMPTY
55225: LIST
55226: LIST
55227: PUSH
55228: LD_INT 1
55230: NEG
55231: PUSH
55232: LD_INT 2
55234: NEG
55235: PUSH
55236: EMPTY
55237: LIST
55238: LIST
55239: PUSH
55240: LD_INT 1
55242: NEG
55243: PUSH
55244: LD_INT 1
55246: PUSH
55247: EMPTY
55248: LIST
55249: LIST
55250: PUSH
55251: LD_INT 2
55253: NEG
55254: PUSH
55255: LD_INT 0
55257: PUSH
55258: EMPTY
55259: LIST
55260: LIST
55261: PUSH
55262: LD_INT 2
55264: NEG
55265: PUSH
55266: LD_INT 1
55268: NEG
55269: PUSH
55270: EMPTY
55271: LIST
55272: LIST
55273: PUSH
55274: LD_INT 2
55276: NEG
55277: PUSH
55278: LD_INT 2
55280: NEG
55281: PUSH
55282: EMPTY
55283: LIST
55284: LIST
55285: PUSH
55286: EMPTY
55287: LIST
55288: LIST
55289: LIST
55290: LIST
55291: LIST
55292: LIST
55293: LIST
55294: LIST
55295: LIST
55296: LIST
55297: LIST
55298: LIST
55299: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55300: LD_ADDR_VAR 0 53
55304: PUSH
55305: LD_INT 0
55307: PUSH
55308: LD_INT 0
55310: PUSH
55311: EMPTY
55312: LIST
55313: LIST
55314: PUSH
55315: LD_INT 0
55317: PUSH
55318: LD_INT 1
55320: NEG
55321: PUSH
55322: EMPTY
55323: LIST
55324: LIST
55325: PUSH
55326: LD_INT 1
55328: PUSH
55329: LD_INT 0
55331: PUSH
55332: EMPTY
55333: LIST
55334: LIST
55335: PUSH
55336: LD_INT 1
55338: PUSH
55339: LD_INT 1
55341: PUSH
55342: EMPTY
55343: LIST
55344: LIST
55345: PUSH
55346: LD_INT 0
55348: PUSH
55349: LD_INT 1
55351: PUSH
55352: EMPTY
55353: LIST
55354: LIST
55355: PUSH
55356: LD_INT 1
55358: NEG
55359: PUSH
55360: LD_INT 0
55362: PUSH
55363: EMPTY
55364: LIST
55365: LIST
55366: PUSH
55367: LD_INT 1
55369: NEG
55370: PUSH
55371: LD_INT 1
55373: NEG
55374: PUSH
55375: EMPTY
55376: LIST
55377: LIST
55378: PUSH
55379: LD_INT 1
55381: NEG
55382: PUSH
55383: LD_INT 2
55385: NEG
55386: PUSH
55387: EMPTY
55388: LIST
55389: LIST
55390: PUSH
55391: LD_INT 0
55393: PUSH
55394: LD_INT 2
55396: NEG
55397: PUSH
55398: EMPTY
55399: LIST
55400: LIST
55401: PUSH
55402: LD_INT 1
55404: PUSH
55405: LD_INT 1
55407: NEG
55408: PUSH
55409: EMPTY
55410: LIST
55411: LIST
55412: PUSH
55413: LD_INT 2
55415: PUSH
55416: LD_INT 0
55418: PUSH
55419: EMPTY
55420: LIST
55421: LIST
55422: PUSH
55423: LD_INT 2
55425: PUSH
55426: LD_INT 1
55428: PUSH
55429: EMPTY
55430: LIST
55431: LIST
55432: PUSH
55433: LD_INT 2
55435: PUSH
55436: LD_INT 2
55438: PUSH
55439: EMPTY
55440: LIST
55441: LIST
55442: PUSH
55443: LD_INT 1
55445: PUSH
55446: LD_INT 2
55448: PUSH
55449: EMPTY
55450: LIST
55451: LIST
55452: PUSH
55453: LD_INT 0
55455: PUSH
55456: LD_INT 2
55458: PUSH
55459: EMPTY
55460: LIST
55461: LIST
55462: PUSH
55463: LD_INT 1
55465: NEG
55466: PUSH
55467: LD_INT 1
55469: PUSH
55470: EMPTY
55471: LIST
55472: LIST
55473: PUSH
55474: LD_INT 2
55476: NEG
55477: PUSH
55478: LD_INT 0
55480: PUSH
55481: EMPTY
55482: LIST
55483: LIST
55484: PUSH
55485: LD_INT 2
55487: NEG
55488: PUSH
55489: LD_INT 1
55491: NEG
55492: PUSH
55493: EMPTY
55494: LIST
55495: LIST
55496: PUSH
55497: LD_INT 2
55499: NEG
55500: PUSH
55501: LD_INT 2
55503: NEG
55504: PUSH
55505: EMPTY
55506: LIST
55507: LIST
55508: PUSH
55509: EMPTY
55510: LIST
55511: LIST
55512: LIST
55513: LIST
55514: LIST
55515: LIST
55516: LIST
55517: LIST
55518: LIST
55519: LIST
55520: LIST
55521: LIST
55522: LIST
55523: LIST
55524: LIST
55525: LIST
55526: LIST
55527: LIST
55528: LIST
55529: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55530: LD_ADDR_VAR 0 54
55534: PUSH
55535: LD_INT 0
55537: PUSH
55538: LD_INT 0
55540: PUSH
55541: EMPTY
55542: LIST
55543: LIST
55544: PUSH
55545: LD_INT 0
55547: PUSH
55548: LD_INT 1
55550: NEG
55551: PUSH
55552: EMPTY
55553: LIST
55554: LIST
55555: PUSH
55556: LD_INT 1
55558: PUSH
55559: LD_INT 0
55561: PUSH
55562: EMPTY
55563: LIST
55564: LIST
55565: PUSH
55566: LD_INT 1
55568: PUSH
55569: LD_INT 1
55571: PUSH
55572: EMPTY
55573: LIST
55574: LIST
55575: PUSH
55576: LD_INT 0
55578: PUSH
55579: LD_INT 1
55581: PUSH
55582: EMPTY
55583: LIST
55584: LIST
55585: PUSH
55586: LD_INT 1
55588: NEG
55589: PUSH
55590: LD_INT 0
55592: PUSH
55593: EMPTY
55594: LIST
55595: LIST
55596: PUSH
55597: LD_INT 1
55599: NEG
55600: PUSH
55601: LD_INT 1
55603: NEG
55604: PUSH
55605: EMPTY
55606: LIST
55607: LIST
55608: PUSH
55609: LD_INT 1
55611: NEG
55612: PUSH
55613: LD_INT 2
55615: NEG
55616: PUSH
55617: EMPTY
55618: LIST
55619: LIST
55620: PUSH
55621: LD_INT 0
55623: PUSH
55624: LD_INT 2
55626: NEG
55627: PUSH
55628: EMPTY
55629: LIST
55630: LIST
55631: PUSH
55632: LD_INT 1
55634: PUSH
55635: LD_INT 1
55637: NEG
55638: PUSH
55639: EMPTY
55640: LIST
55641: LIST
55642: PUSH
55643: LD_INT 2
55645: PUSH
55646: LD_INT 0
55648: PUSH
55649: EMPTY
55650: LIST
55651: LIST
55652: PUSH
55653: LD_INT 2
55655: PUSH
55656: LD_INT 1
55658: PUSH
55659: EMPTY
55660: LIST
55661: LIST
55662: PUSH
55663: LD_INT 2
55665: PUSH
55666: LD_INT 2
55668: PUSH
55669: EMPTY
55670: LIST
55671: LIST
55672: PUSH
55673: LD_INT 1
55675: PUSH
55676: LD_INT 2
55678: PUSH
55679: EMPTY
55680: LIST
55681: LIST
55682: PUSH
55683: LD_INT 0
55685: PUSH
55686: LD_INT 2
55688: PUSH
55689: EMPTY
55690: LIST
55691: LIST
55692: PUSH
55693: LD_INT 1
55695: NEG
55696: PUSH
55697: LD_INT 1
55699: PUSH
55700: EMPTY
55701: LIST
55702: LIST
55703: PUSH
55704: LD_INT 2
55706: NEG
55707: PUSH
55708: LD_INT 0
55710: PUSH
55711: EMPTY
55712: LIST
55713: LIST
55714: PUSH
55715: LD_INT 2
55717: NEG
55718: PUSH
55719: LD_INT 1
55721: NEG
55722: PUSH
55723: EMPTY
55724: LIST
55725: LIST
55726: PUSH
55727: LD_INT 2
55729: NEG
55730: PUSH
55731: LD_INT 2
55733: NEG
55734: PUSH
55735: EMPTY
55736: LIST
55737: LIST
55738: PUSH
55739: EMPTY
55740: LIST
55741: LIST
55742: LIST
55743: LIST
55744: LIST
55745: LIST
55746: LIST
55747: LIST
55748: LIST
55749: LIST
55750: LIST
55751: LIST
55752: LIST
55753: LIST
55754: LIST
55755: LIST
55756: LIST
55757: LIST
55758: LIST
55759: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55760: LD_ADDR_VAR 0 55
55764: PUSH
55765: LD_INT 0
55767: PUSH
55768: LD_INT 0
55770: PUSH
55771: EMPTY
55772: LIST
55773: LIST
55774: PUSH
55775: LD_INT 0
55777: PUSH
55778: LD_INT 1
55780: NEG
55781: PUSH
55782: EMPTY
55783: LIST
55784: LIST
55785: PUSH
55786: LD_INT 1
55788: PUSH
55789: LD_INT 0
55791: PUSH
55792: EMPTY
55793: LIST
55794: LIST
55795: PUSH
55796: LD_INT 1
55798: PUSH
55799: LD_INT 1
55801: PUSH
55802: EMPTY
55803: LIST
55804: LIST
55805: PUSH
55806: LD_INT 0
55808: PUSH
55809: LD_INT 1
55811: PUSH
55812: EMPTY
55813: LIST
55814: LIST
55815: PUSH
55816: LD_INT 1
55818: NEG
55819: PUSH
55820: LD_INT 0
55822: PUSH
55823: EMPTY
55824: LIST
55825: LIST
55826: PUSH
55827: LD_INT 1
55829: NEG
55830: PUSH
55831: LD_INT 1
55833: NEG
55834: PUSH
55835: EMPTY
55836: LIST
55837: LIST
55838: PUSH
55839: LD_INT 1
55841: NEG
55842: PUSH
55843: LD_INT 2
55845: NEG
55846: PUSH
55847: EMPTY
55848: LIST
55849: LIST
55850: PUSH
55851: LD_INT 0
55853: PUSH
55854: LD_INT 2
55856: NEG
55857: PUSH
55858: EMPTY
55859: LIST
55860: LIST
55861: PUSH
55862: LD_INT 1
55864: PUSH
55865: LD_INT 1
55867: NEG
55868: PUSH
55869: EMPTY
55870: LIST
55871: LIST
55872: PUSH
55873: LD_INT 2
55875: PUSH
55876: LD_INT 0
55878: PUSH
55879: EMPTY
55880: LIST
55881: LIST
55882: PUSH
55883: LD_INT 2
55885: PUSH
55886: LD_INT 1
55888: PUSH
55889: EMPTY
55890: LIST
55891: LIST
55892: PUSH
55893: LD_INT 2
55895: PUSH
55896: LD_INT 2
55898: PUSH
55899: EMPTY
55900: LIST
55901: LIST
55902: PUSH
55903: LD_INT 1
55905: PUSH
55906: LD_INT 2
55908: PUSH
55909: EMPTY
55910: LIST
55911: LIST
55912: PUSH
55913: LD_INT 0
55915: PUSH
55916: LD_INT 2
55918: PUSH
55919: EMPTY
55920: LIST
55921: LIST
55922: PUSH
55923: LD_INT 1
55925: NEG
55926: PUSH
55927: LD_INT 1
55929: PUSH
55930: EMPTY
55931: LIST
55932: LIST
55933: PUSH
55934: LD_INT 2
55936: NEG
55937: PUSH
55938: LD_INT 0
55940: PUSH
55941: EMPTY
55942: LIST
55943: LIST
55944: PUSH
55945: LD_INT 2
55947: NEG
55948: PUSH
55949: LD_INT 1
55951: NEG
55952: PUSH
55953: EMPTY
55954: LIST
55955: LIST
55956: PUSH
55957: LD_INT 2
55959: NEG
55960: PUSH
55961: LD_INT 2
55963: NEG
55964: PUSH
55965: EMPTY
55966: LIST
55967: LIST
55968: PUSH
55969: EMPTY
55970: LIST
55971: LIST
55972: LIST
55973: LIST
55974: LIST
55975: LIST
55976: LIST
55977: LIST
55978: LIST
55979: LIST
55980: LIST
55981: LIST
55982: LIST
55983: LIST
55984: LIST
55985: LIST
55986: LIST
55987: LIST
55988: LIST
55989: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55990: LD_ADDR_VAR 0 56
55994: PUSH
55995: LD_INT 0
55997: PUSH
55998: LD_INT 0
56000: PUSH
56001: EMPTY
56002: LIST
56003: LIST
56004: PUSH
56005: LD_INT 0
56007: PUSH
56008: LD_INT 1
56010: NEG
56011: PUSH
56012: EMPTY
56013: LIST
56014: LIST
56015: PUSH
56016: LD_INT 1
56018: PUSH
56019: LD_INT 0
56021: PUSH
56022: EMPTY
56023: LIST
56024: LIST
56025: PUSH
56026: LD_INT 1
56028: PUSH
56029: LD_INT 1
56031: PUSH
56032: EMPTY
56033: LIST
56034: LIST
56035: PUSH
56036: LD_INT 0
56038: PUSH
56039: LD_INT 1
56041: PUSH
56042: EMPTY
56043: LIST
56044: LIST
56045: PUSH
56046: LD_INT 1
56048: NEG
56049: PUSH
56050: LD_INT 0
56052: PUSH
56053: EMPTY
56054: LIST
56055: LIST
56056: PUSH
56057: LD_INT 1
56059: NEG
56060: PUSH
56061: LD_INT 1
56063: NEG
56064: PUSH
56065: EMPTY
56066: LIST
56067: LIST
56068: PUSH
56069: LD_INT 1
56071: NEG
56072: PUSH
56073: LD_INT 2
56075: NEG
56076: PUSH
56077: EMPTY
56078: LIST
56079: LIST
56080: PUSH
56081: LD_INT 0
56083: PUSH
56084: LD_INT 2
56086: NEG
56087: PUSH
56088: EMPTY
56089: LIST
56090: LIST
56091: PUSH
56092: LD_INT 1
56094: PUSH
56095: LD_INT 1
56097: NEG
56098: PUSH
56099: EMPTY
56100: LIST
56101: LIST
56102: PUSH
56103: LD_INT 2
56105: PUSH
56106: LD_INT 0
56108: PUSH
56109: EMPTY
56110: LIST
56111: LIST
56112: PUSH
56113: LD_INT 2
56115: PUSH
56116: LD_INT 1
56118: PUSH
56119: EMPTY
56120: LIST
56121: LIST
56122: PUSH
56123: LD_INT 2
56125: PUSH
56126: LD_INT 2
56128: PUSH
56129: EMPTY
56130: LIST
56131: LIST
56132: PUSH
56133: LD_INT 1
56135: PUSH
56136: LD_INT 2
56138: PUSH
56139: EMPTY
56140: LIST
56141: LIST
56142: PUSH
56143: LD_INT 0
56145: PUSH
56146: LD_INT 2
56148: PUSH
56149: EMPTY
56150: LIST
56151: LIST
56152: PUSH
56153: LD_INT 1
56155: NEG
56156: PUSH
56157: LD_INT 1
56159: PUSH
56160: EMPTY
56161: LIST
56162: LIST
56163: PUSH
56164: LD_INT 2
56166: NEG
56167: PUSH
56168: LD_INT 0
56170: PUSH
56171: EMPTY
56172: LIST
56173: LIST
56174: PUSH
56175: LD_INT 2
56177: NEG
56178: PUSH
56179: LD_INT 1
56181: NEG
56182: PUSH
56183: EMPTY
56184: LIST
56185: LIST
56186: PUSH
56187: LD_INT 2
56189: NEG
56190: PUSH
56191: LD_INT 2
56193: NEG
56194: PUSH
56195: EMPTY
56196: LIST
56197: LIST
56198: PUSH
56199: EMPTY
56200: LIST
56201: LIST
56202: LIST
56203: LIST
56204: LIST
56205: LIST
56206: LIST
56207: LIST
56208: LIST
56209: LIST
56210: LIST
56211: LIST
56212: LIST
56213: LIST
56214: LIST
56215: LIST
56216: LIST
56217: LIST
56218: LIST
56219: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56220: LD_ADDR_VAR 0 57
56224: PUSH
56225: LD_INT 0
56227: PUSH
56228: LD_INT 0
56230: PUSH
56231: EMPTY
56232: LIST
56233: LIST
56234: PUSH
56235: LD_INT 0
56237: PUSH
56238: LD_INT 1
56240: NEG
56241: PUSH
56242: EMPTY
56243: LIST
56244: LIST
56245: PUSH
56246: LD_INT 1
56248: PUSH
56249: LD_INT 0
56251: PUSH
56252: EMPTY
56253: LIST
56254: LIST
56255: PUSH
56256: LD_INT 1
56258: PUSH
56259: LD_INT 1
56261: PUSH
56262: EMPTY
56263: LIST
56264: LIST
56265: PUSH
56266: LD_INT 0
56268: PUSH
56269: LD_INT 1
56271: PUSH
56272: EMPTY
56273: LIST
56274: LIST
56275: PUSH
56276: LD_INT 1
56278: NEG
56279: PUSH
56280: LD_INT 0
56282: PUSH
56283: EMPTY
56284: LIST
56285: LIST
56286: PUSH
56287: LD_INT 1
56289: NEG
56290: PUSH
56291: LD_INT 1
56293: NEG
56294: PUSH
56295: EMPTY
56296: LIST
56297: LIST
56298: PUSH
56299: LD_INT 1
56301: NEG
56302: PUSH
56303: LD_INT 2
56305: NEG
56306: PUSH
56307: EMPTY
56308: LIST
56309: LIST
56310: PUSH
56311: LD_INT 0
56313: PUSH
56314: LD_INT 2
56316: NEG
56317: PUSH
56318: EMPTY
56319: LIST
56320: LIST
56321: PUSH
56322: LD_INT 1
56324: PUSH
56325: LD_INT 1
56327: NEG
56328: PUSH
56329: EMPTY
56330: LIST
56331: LIST
56332: PUSH
56333: LD_INT 2
56335: PUSH
56336: LD_INT 0
56338: PUSH
56339: EMPTY
56340: LIST
56341: LIST
56342: PUSH
56343: LD_INT 2
56345: PUSH
56346: LD_INT 1
56348: PUSH
56349: EMPTY
56350: LIST
56351: LIST
56352: PUSH
56353: LD_INT 2
56355: PUSH
56356: LD_INT 2
56358: PUSH
56359: EMPTY
56360: LIST
56361: LIST
56362: PUSH
56363: LD_INT 1
56365: PUSH
56366: LD_INT 2
56368: PUSH
56369: EMPTY
56370: LIST
56371: LIST
56372: PUSH
56373: LD_INT 0
56375: PUSH
56376: LD_INT 2
56378: PUSH
56379: EMPTY
56380: LIST
56381: LIST
56382: PUSH
56383: LD_INT 1
56385: NEG
56386: PUSH
56387: LD_INT 1
56389: PUSH
56390: EMPTY
56391: LIST
56392: LIST
56393: PUSH
56394: LD_INT 2
56396: NEG
56397: PUSH
56398: LD_INT 0
56400: PUSH
56401: EMPTY
56402: LIST
56403: LIST
56404: PUSH
56405: LD_INT 2
56407: NEG
56408: PUSH
56409: LD_INT 1
56411: NEG
56412: PUSH
56413: EMPTY
56414: LIST
56415: LIST
56416: PUSH
56417: LD_INT 2
56419: NEG
56420: PUSH
56421: LD_INT 2
56423: NEG
56424: PUSH
56425: EMPTY
56426: LIST
56427: LIST
56428: PUSH
56429: EMPTY
56430: LIST
56431: LIST
56432: LIST
56433: LIST
56434: LIST
56435: LIST
56436: LIST
56437: LIST
56438: LIST
56439: LIST
56440: LIST
56441: LIST
56442: LIST
56443: LIST
56444: LIST
56445: LIST
56446: LIST
56447: LIST
56448: LIST
56449: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56450: LD_ADDR_VAR 0 58
56454: PUSH
56455: LD_INT 0
56457: PUSH
56458: LD_INT 0
56460: PUSH
56461: EMPTY
56462: LIST
56463: LIST
56464: PUSH
56465: LD_INT 0
56467: PUSH
56468: LD_INT 1
56470: NEG
56471: PUSH
56472: EMPTY
56473: LIST
56474: LIST
56475: PUSH
56476: LD_INT 1
56478: PUSH
56479: LD_INT 0
56481: PUSH
56482: EMPTY
56483: LIST
56484: LIST
56485: PUSH
56486: LD_INT 1
56488: PUSH
56489: LD_INT 1
56491: PUSH
56492: EMPTY
56493: LIST
56494: LIST
56495: PUSH
56496: LD_INT 0
56498: PUSH
56499: LD_INT 1
56501: PUSH
56502: EMPTY
56503: LIST
56504: LIST
56505: PUSH
56506: LD_INT 1
56508: NEG
56509: PUSH
56510: LD_INT 0
56512: PUSH
56513: EMPTY
56514: LIST
56515: LIST
56516: PUSH
56517: LD_INT 1
56519: NEG
56520: PUSH
56521: LD_INT 1
56523: NEG
56524: PUSH
56525: EMPTY
56526: LIST
56527: LIST
56528: PUSH
56529: LD_INT 1
56531: NEG
56532: PUSH
56533: LD_INT 2
56535: NEG
56536: PUSH
56537: EMPTY
56538: LIST
56539: LIST
56540: PUSH
56541: LD_INT 0
56543: PUSH
56544: LD_INT 2
56546: NEG
56547: PUSH
56548: EMPTY
56549: LIST
56550: LIST
56551: PUSH
56552: LD_INT 1
56554: PUSH
56555: LD_INT 1
56557: NEG
56558: PUSH
56559: EMPTY
56560: LIST
56561: LIST
56562: PUSH
56563: LD_INT 2
56565: PUSH
56566: LD_INT 0
56568: PUSH
56569: EMPTY
56570: LIST
56571: LIST
56572: PUSH
56573: LD_INT 2
56575: PUSH
56576: LD_INT 1
56578: PUSH
56579: EMPTY
56580: LIST
56581: LIST
56582: PUSH
56583: LD_INT 2
56585: PUSH
56586: LD_INT 2
56588: PUSH
56589: EMPTY
56590: LIST
56591: LIST
56592: PUSH
56593: LD_INT 1
56595: PUSH
56596: LD_INT 2
56598: PUSH
56599: EMPTY
56600: LIST
56601: LIST
56602: PUSH
56603: LD_INT 0
56605: PUSH
56606: LD_INT 2
56608: PUSH
56609: EMPTY
56610: LIST
56611: LIST
56612: PUSH
56613: LD_INT 1
56615: NEG
56616: PUSH
56617: LD_INT 1
56619: PUSH
56620: EMPTY
56621: LIST
56622: LIST
56623: PUSH
56624: LD_INT 2
56626: NEG
56627: PUSH
56628: LD_INT 0
56630: PUSH
56631: EMPTY
56632: LIST
56633: LIST
56634: PUSH
56635: LD_INT 2
56637: NEG
56638: PUSH
56639: LD_INT 1
56641: NEG
56642: PUSH
56643: EMPTY
56644: LIST
56645: LIST
56646: PUSH
56647: LD_INT 2
56649: NEG
56650: PUSH
56651: LD_INT 2
56653: NEG
56654: PUSH
56655: EMPTY
56656: LIST
56657: LIST
56658: PUSH
56659: EMPTY
56660: LIST
56661: LIST
56662: LIST
56663: LIST
56664: LIST
56665: LIST
56666: LIST
56667: LIST
56668: LIST
56669: LIST
56670: LIST
56671: LIST
56672: LIST
56673: LIST
56674: LIST
56675: LIST
56676: LIST
56677: LIST
56678: LIST
56679: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56680: LD_ADDR_VAR 0 59
56684: PUSH
56685: LD_INT 0
56687: PUSH
56688: LD_INT 0
56690: PUSH
56691: EMPTY
56692: LIST
56693: LIST
56694: PUSH
56695: LD_INT 0
56697: PUSH
56698: LD_INT 1
56700: NEG
56701: PUSH
56702: EMPTY
56703: LIST
56704: LIST
56705: PUSH
56706: LD_INT 1
56708: PUSH
56709: LD_INT 0
56711: PUSH
56712: EMPTY
56713: LIST
56714: LIST
56715: PUSH
56716: LD_INT 1
56718: PUSH
56719: LD_INT 1
56721: PUSH
56722: EMPTY
56723: LIST
56724: LIST
56725: PUSH
56726: LD_INT 0
56728: PUSH
56729: LD_INT 1
56731: PUSH
56732: EMPTY
56733: LIST
56734: LIST
56735: PUSH
56736: LD_INT 1
56738: NEG
56739: PUSH
56740: LD_INT 0
56742: PUSH
56743: EMPTY
56744: LIST
56745: LIST
56746: PUSH
56747: LD_INT 1
56749: NEG
56750: PUSH
56751: LD_INT 1
56753: NEG
56754: PUSH
56755: EMPTY
56756: LIST
56757: LIST
56758: PUSH
56759: EMPTY
56760: LIST
56761: LIST
56762: LIST
56763: LIST
56764: LIST
56765: LIST
56766: LIST
56767: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56768: LD_ADDR_VAR 0 60
56772: PUSH
56773: LD_INT 0
56775: PUSH
56776: LD_INT 0
56778: PUSH
56779: EMPTY
56780: LIST
56781: LIST
56782: PUSH
56783: LD_INT 0
56785: PUSH
56786: LD_INT 1
56788: NEG
56789: PUSH
56790: EMPTY
56791: LIST
56792: LIST
56793: PUSH
56794: LD_INT 1
56796: PUSH
56797: LD_INT 0
56799: PUSH
56800: EMPTY
56801: LIST
56802: LIST
56803: PUSH
56804: LD_INT 1
56806: PUSH
56807: LD_INT 1
56809: PUSH
56810: EMPTY
56811: LIST
56812: LIST
56813: PUSH
56814: LD_INT 0
56816: PUSH
56817: LD_INT 1
56819: PUSH
56820: EMPTY
56821: LIST
56822: LIST
56823: PUSH
56824: LD_INT 1
56826: NEG
56827: PUSH
56828: LD_INT 0
56830: PUSH
56831: EMPTY
56832: LIST
56833: LIST
56834: PUSH
56835: LD_INT 1
56837: NEG
56838: PUSH
56839: LD_INT 1
56841: NEG
56842: PUSH
56843: EMPTY
56844: LIST
56845: LIST
56846: PUSH
56847: EMPTY
56848: LIST
56849: LIST
56850: LIST
56851: LIST
56852: LIST
56853: LIST
56854: LIST
56855: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56856: LD_ADDR_VAR 0 61
56860: PUSH
56861: LD_INT 0
56863: PUSH
56864: LD_INT 0
56866: PUSH
56867: EMPTY
56868: LIST
56869: LIST
56870: PUSH
56871: LD_INT 0
56873: PUSH
56874: LD_INT 1
56876: NEG
56877: PUSH
56878: EMPTY
56879: LIST
56880: LIST
56881: PUSH
56882: LD_INT 1
56884: PUSH
56885: LD_INT 0
56887: PUSH
56888: EMPTY
56889: LIST
56890: LIST
56891: PUSH
56892: LD_INT 1
56894: PUSH
56895: LD_INT 1
56897: PUSH
56898: EMPTY
56899: LIST
56900: LIST
56901: PUSH
56902: LD_INT 0
56904: PUSH
56905: LD_INT 1
56907: PUSH
56908: EMPTY
56909: LIST
56910: LIST
56911: PUSH
56912: LD_INT 1
56914: NEG
56915: PUSH
56916: LD_INT 0
56918: PUSH
56919: EMPTY
56920: LIST
56921: LIST
56922: PUSH
56923: LD_INT 1
56925: NEG
56926: PUSH
56927: LD_INT 1
56929: NEG
56930: PUSH
56931: EMPTY
56932: LIST
56933: LIST
56934: PUSH
56935: EMPTY
56936: LIST
56937: LIST
56938: LIST
56939: LIST
56940: LIST
56941: LIST
56942: LIST
56943: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56944: LD_ADDR_VAR 0 62
56948: PUSH
56949: LD_INT 0
56951: PUSH
56952: LD_INT 0
56954: PUSH
56955: EMPTY
56956: LIST
56957: LIST
56958: PUSH
56959: LD_INT 0
56961: PUSH
56962: LD_INT 1
56964: NEG
56965: PUSH
56966: EMPTY
56967: LIST
56968: LIST
56969: PUSH
56970: LD_INT 1
56972: PUSH
56973: LD_INT 0
56975: PUSH
56976: EMPTY
56977: LIST
56978: LIST
56979: PUSH
56980: LD_INT 1
56982: PUSH
56983: LD_INT 1
56985: PUSH
56986: EMPTY
56987: LIST
56988: LIST
56989: PUSH
56990: LD_INT 0
56992: PUSH
56993: LD_INT 1
56995: PUSH
56996: EMPTY
56997: LIST
56998: LIST
56999: PUSH
57000: LD_INT 1
57002: NEG
57003: PUSH
57004: LD_INT 0
57006: PUSH
57007: EMPTY
57008: LIST
57009: LIST
57010: PUSH
57011: LD_INT 1
57013: NEG
57014: PUSH
57015: LD_INT 1
57017: NEG
57018: PUSH
57019: EMPTY
57020: LIST
57021: LIST
57022: PUSH
57023: EMPTY
57024: LIST
57025: LIST
57026: LIST
57027: LIST
57028: LIST
57029: LIST
57030: LIST
57031: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57032: LD_ADDR_VAR 0 63
57036: PUSH
57037: LD_INT 0
57039: PUSH
57040: LD_INT 0
57042: PUSH
57043: EMPTY
57044: LIST
57045: LIST
57046: PUSH
57047: LD_INT 0
57049: PUSH
57050: LD_INT 1
57052: NEG
57053: PUSH
57054: EMPTY
57055: LIST
57056: LIST
57057: PUSH
57058: LD_INT 1
57060: PUSH
57061: LD_INT 0
57063: PUSH
57064: EMPTY
57065: LIST
57066: LIST
57067: PUSH
57068: LD_INT 1
57070: PUSH
57071: LD_INT 1
57073: PUSH
57074: EMPTY
57075: LIST
57076: LIST
57077: PUSH
57078: LD_INT 0
57080: PUSH
57081: LD_INT 1
57083: PUSH
57084: EMPTY
57085: LIST
57086: LIST
57087: PUSH
57088: LD_INT 1
57090: NEG
57091: PUSH
57092: LD_INT 0
57094: PUSH
57095: EMPTY
57096: LIST
57097: LIST
57098: PUSH
57099: LD_INT 1
57101: NEG
57102: PUSH
57103: LD_INT 1
57105: NEG
57106: PUSH
57107: EMPTY
57108: LIST
57109: LIST
57110: PUSH
57111: EMPTY
57112: LIST
57113: LIST
57114: LIST
57115: LIST
57116: LIST
57117: LIST
57118: LIST
57119: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57120: LD_ADDR_VAR 0 64
57124: PUSH
57125: LD_INT 0
57127: PUSH
57128: LD_INT 0
57130: PUSH
57131: EMPTY
57132: LIST
57133: LIST
57134: PUSH
57135: LD_INT 0
57137: PUSH
57138: LD_INT 1
57140: NEG
57141: PUSH
57142: EMPTY
57143: LIST
57144: LIST
57145: PUSH
57146: LD_INT 1
57148: PUSH
57149: LD_INT 0
57151: PUSH
57152: EMPTY
57153: LIST
57154: LIST
57155: PUSH
57156: LD_INT 1
57158: PUSH
57159: LD_INT 1
57161: PUSH
57162: EMPTY
57163: LIST
57164: LIST
57165: PUSH
57166: LD_INT 0
57168: PUSH
57169: LD_INT 1
57171: PUSH
57172: EMPTY
57173: LIST
57174: LIST
57175: PUSH
57176: LD_INT 1
57178: NEG
57179: PUSH
57180: LD_INT 0
57182: PUSH
57183: EMPTY
57184: LIST
57185: LIST
57186: PUSH
57187: LD_INT 1
57189: NEG
57190: PUSH
57191: LD_INT 1
57193: NEG
57194: PUSH
57195: EMPTY
57196: LIST
57197: LIST
57198: PUSH
57199: EMPTY
57200: LIST
57201: LIST
57202: LIST
57203: LIST
57204: LIST
57205: LIST
57206: LIST
57207: ST_TO_ADDR
// end ; 1 :
57208: GO 63105
57210: LD_INT 1
57212: DOUBLE
57213: EQUAL
57214: IFTRUE 57218
57216: GO 59841
57218: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57219: LD_ADDR_VAR 0 11
57223: PUSH
57224: LD_INT 1
57226: NEG
57227: PUSH
57228: LD_INT 3
57230: NEG
57231: PUSH
57232: EMPTY
57233: LIST
57234: LIST
57235: PUSH
57236: LD_INT 0
57238: PUSH
57239: LD_INT 3
57241: NEG
57242: PUSH
57243: EMPTY
57244: LIST
57245: LIST
57246: PUSH
57247: LD_INT 1
57249: PUSH
57250: LD_INT 2
57252: NEG
57253: PUSH
57254: EMPTY
57255: LIST
57256: LIST
57257: PUSH
57258: EMPTY
57259: LIST
57260: LIST
57261: LIST
57262: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57263: LD_ADDR_VAR 0 12
57267: PUSH
57268: LD_INT 2
57270: PUSH
57271: LD_INT 1
57273: NEG
57274: PUSH
57275: EMPTY
57276: LIST
57277: LIST
57278: PUSH
57279: LD_INT 3
57281: PUSH
57282: LD_INT 0
57284: PUSH
57285: EMPTY
57286: LIST
57287: LIST
57288: PUSH
57289: LD_INT 3
57291: PUSH
57292: LD_INT 1
57294: PUSH
57295: EMPTY
57296: LIST
57297: LIST
57298: PUSH
57299: EMPTY
57300: LIST
57301: LIST
57302: LIST
57303: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57304: LD_ADDR_VAR 0 13
57308: PUSH
57309: LD_INT 3
57311: PUSH
57312: LD_INT 2
57314: PUSH
57315: EMPTY
57316: LIST
57317: LIST
57318: PUSH
57319: LD_INT 3
57321: PUSH
57322: LD_INT 3
57324: PUSH
57325: EMPTY
57326: LIST
57327: LIST
57328: PUSH
57329: LD_INT 2
57331: PUSH
57332: LD_INT 3
57334: PUSH
57335: EMPTY
57336: LIST
57337: LIST
57338: PUSH
57339: EMPTY
57340: LIST
57341: LIST
57342: LIST
57343: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57344: LD_ADDR_VAR 0 14
57348: PUSH
57349: LD_INT 1
57351: PUSH
57352: LD_INT 3
57354: PUSH
57355: EMPTY
57356: LIST
57357: LIST
57358: PUSH
57359: LD_INT 0
57361: PUSH
57362: LD_INT 3
57364: PUSH
57365: EMPTY
57366: LIST
57367: LIST
57368: PUSH
57369: LD_INT 1
57371: NEG
57372: PUSH
57373: LD_INT 2
57375: PUSH
57376: EMPTY
57377: LIST
57378: LIST
57379: PUSH
57380: EMPTY
57381: LIST
57382: LIST
57383: LIST
57384: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57385: LD_ADDR_VAR 0 15
57389: PUSH
57390: LD_INT 2
57392: NEG
57393: PUSH
57394: LD_INT 1
57396: PUSH
57397: EMPTY
57398: LIST
57399: LIST
57400: PUSH
57401: LD_INT 3
57403: NEG
57404: PUSH
57405: LD_INT 0
57407: PUSH
57408: EMPTY
57409: LIST
57410: LIST
57411: PUSH
57412: LD_INT 3
57414: NEG
57415: PUSH
57416: LD_INT 1
57418: NEG
57419: PUSH
57420: EMPTY
57421: LIST
57422: LIST
57423: PUSH
57424: EMPTY
57425: LIST
57426: LIST
57427: LIST
57428: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57429: LD_ADDR_VAR 0 16
57433: PUSH
57434: LD_INT 2
57436: NEG
57437: PUSH
57438: LD_INT 3
57440: NEG
57441: PUSH
57442: EMPTY
57443: LIST
57444: LIST
57445: PUSH
57446: LD_INT 3
57448: NEG
57449: PUSH
57450: LD_INT 2
57452: NEG
57453: PUSH
57454: EMPTY
57455: LIST
57456: LIST
57457: PUSH
57458: LD_INT 3
57460: NEG
57461: PUSH
57462: LD_INT 3
57464: NEG
57465: PUSH
57466: EMPTY
57467: LIST
57468: LIST
57469: PUSH
57470: EMPTY
57471: LIST
57472: LIST
57473: LIST
57474: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57475: LD_ADDR_VAR 0 17
57479: PUSH
57480: LD_INT 1
57482: NEG
57483: PUSH
57484: LD_INT 3
57486: NEG
57487: PUSH
57488: EMPTY
57489: LIST
57490: LIST
57491: PUSH
57492: LD_INT 0
57494: PUSH
57495: LD_INT 3
57497: NEG
57498: PUSH
57499: EMPTY
57500: LIST
57501: LIST
57502: PUSH
57503: LD_INT 1
57505: PUSH
57506: LD_INT 2
57508: NEG
57509: PUSH
57510: EMPTY
57511: LIST
57512: LIST
57513: PUSH
57514: EMPTY
57515: LIST
57516: LIST
57517: LIST
57518: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57519: LD_ADDR_VAR 0 18
57523: PUSH
57524: LD_INT 2
57526: PUSH
57527: LD_INT 1
57529: NEG
57530: PUSH
57531: EMPTY
57532: LIST
57533: LIST
57534: PUSH
57535: LD_INT 3
57537: PUSH
57538: LD_INT 0
57540: PUSH
57541: EMPTY
57542: LIST
57543: LIST
57544: PUSH
57545: LD_INT 3
57547: PUSH
57548: LD_INT 1
57550: PUSH
57551: EMPTY
57552: LIST
57553: LIST
57554: PUSH
57555: EMPTY
57556: LIST
57557: LIST
57558: LIST
57559: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57560: LD_ADDR_VAR 0 19
57564: PUSH
57565: LD_INT 3
57567: PUSH
57568: LD_INT 2
57570: PUSH
57571: EMPTY
57572: LIST
57573: LIST
57574: PUSH
57575: LD_INT 3
57577: PUSH
57578: LD_INT 3
57580: PUSH
57581: EMPTY
57582: LIST
57583: LIST
57584: PUSH
57585: LD_INT 2
57587: PUSH
57588: LD_INT 3
57590: PUSH
57591: EMPTY
57592: LIST
57593: LIST
57594: PUSH
57595: EMPTY
57596: LIST
57597: LIST
57598: LIST
57599: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57600: LD_ADDR_VAR 0 20
57604: PUSH
57605: LD_INT 1
57607: PUSH
57608: LD_INT 3
57610: PUSH
57611: EMPTY
57612: LIST
57613: LIST
57614: PUSH
57615: LD_INT 0
57617: PUSH
57618: LD_INT 3
57620: PUSH
57621: EMPTY
57622: LIST
57623: LIST
57624: PUSH
57625: LD_INT 1
57627: NEG
57628: PUSH
57629: LD_INT 2
57631: PUSH
57632: EMPTY
57633: LIST
57634: LIST
57635: PUSH
57636: EMPTY
57637: LIST
57638: LIST
57639: LIST
57640: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57641: LD_ADDR_VAR 0 21
57645: PUSH
57646: LD_INT 2
57648: NEG
57649: PUSH
57650: LD_INT 1
57652: PUSH
57653: EMPTY
57654: LIST
57655: LIST
57656: PUSH
57657: LD_INT 3
57659: NEG
57660: PUSH
57661: LD_INT 0
57663: PUSH
57664: EMPTY
57665: LIST
57666: LIST
57667: PUSH
57668: LD_INT 3
57670: NEG
57671: PUSH
57672: LD_INT 1
57674: NEG
57675: PUSH
57676: EMPTY
57677: LIST
57678: LIST
57679: PUSH
57680: EMPTY
57681: LIST
57682: LIST
57683: LIST
57684: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57685: LD_ADDR_VAR 0 22
57689: PUSH
57690: LD_INT 2
57692: NEG
57693: PUSH
57694: LD_INT 3
57696: NEG
57697: PUSH
57698: EMPTY
57699: LIST
57700: LIST
57701: PUSH
57702: LD_INT 3
57704: NEG
57705: PUSH
57706: LD_INT 2
57708: NEG
57709: PUSH
57710: EMPTY
57711: LIST
57712: LIST
57713: PUSH
57714: LD_INT 3
57716: NEG
57717: PUSH
57718: LD_INT 3
57720: NEG
57721: PUSH
57722: EMPTY
57723: LIST
57724: LIST
57725: PUSH
57726: EMPTY
57727: LIST
57728: LIST
57729: LIST
57730: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
57731: LD_ADDR_VAR 0 23
57735: PUSH
57736: LD_INT 0
57738: PUSH
57739: LD_INT 3
57741: NEG
57742: PUSH
57743: EMPTY
57744: LIST
57745: LIST
57746: PUSH
57747: LD_INT 1
57749: NEG
57750: PUSH
57751: LD_INT 4
57753: NEG
57754: PUSH
57755: EMPTY
57756: LIST
57757: LIST
57758: PUSH
57759: LD_INT 1
57761: PUSH
57762: LD_INT 3
57764: NEG
57765: PUSH
57766: EMPTY
57767: LIST
57768: LIST
57769: PUSH
57770: EMPTY
57771: LIST
57772: LIST
57773: LIST
57774: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
57775: LD_ADDR_VAR 0 24
57779: PUSH
57780: LD_INT 3
57782: PUSH
57783: LD_INT 0
57785: PUSH
57786: EMPTY
57787: LIST
57788: LIST
57789: PUSH
57790: LD_INT 3
57792: PUSH
57793: LD_INT 1
57795: NEG
57796: PUSH
57797: EMPTY
57798: LIST
57799: LIST
57800: PUSH
57801: LD_INT 4
57803: PUSH
57804: LD_INT 1
57806: PUSH
57807: EMPTY
57808: LIST
57809: LIST
57810: PUSH
57811: EMPTY
57812: LIST
57813: LIST
57814: LIST
57815: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
57816: LD_ADDR_VAR 0 25
57820: PUSH
57821: LD_INT 3
57823: PUSH
57824: LD_INT 3
57826: PUSH
57827: EMPTY
57828: LIST
57829: LIST
57830: PUSH
57831: LD_INT 4
57833: PUSH
57834: LD_INT 3
57836: PUSH
57837: EMPTY
57838: LIST
57839: LIST
57840: PUSH
57841: LD_INT 3
57843: PUSH
57844: LD_INT 4
57846: PUSH
57847: EMPTY
57848: LIST
57849: LIST
57850: PUSH
57851: EMPTY
57852: LIST
57853: LIST
57854: LIST
57855: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
57856: LD_ADDR_VAR 0 26
57860: PUSH
57861: LD_INT 0
57863: PUSH
57864: LD_INT 3
57866: PUSH
57867: EMPTY
57868: LIST
57869: LIST
57870: PUSH
57871: LD_INT 1
57873: PUSH
57874: LD_INT 4
57876: PUSH
57877: EMPTY
57878: LIST
57879: LIST
57880: PUSH
57881: LD_INT 1
57883: NEG
57884: PUSH
57885: LD_INT 3
57887: PUSH
57888: EMPTY
57889: LIST
57890: LIST
57891: PUSH
57892: EMPTY
57893: LIST
57894: LIST
57895: LIST
57896: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
57897: LD_ADDR_VAR 0 27
57901: PUSH
57902: LD_INT 3
57904: NEG
57905: PUSH
57906: LD_INT 0
57908: PUSH
57909: EMPTY
57910: LIST
57911: LIST
57912: PUSH
57913: LD_INT 3
57915: NEG
57916: PUSH
57917: LD_INT 1
57919: PUSH
57920: EMPTY
57921: LIST
57922: LIST
57923: PUSH
57924: LD_INT 4
57926: NEG
57927: PUSH
57928: LD_INT 1
57930: NEG
57931: PUSH
57932: EMPTY
57933: LIST
57934: LIST
57935: PUSH
57936: EMPTY
57937: LIST
57938: LIST
57939: LIST
57940: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
57941: LD_ADDR_VAR 0 28
57945: PUSH
57946: LD_INT 3
57948: NEG
57949: PUSH
57950: LD_INT 3
57952: NEG
57953: PUSH
57954: EMPTY
57955: LIST
57956: LIST
57957: PUSH
57958: LD_INT 3
57960: NEG
57961: PUSH
57962: LD_INT 4
57964: NEG
57965: PUSH
57966: EMPTY
57967: LIST
57968: LIST
57969: PUSH
57970: LD_INT 4
57972: NEG
57973: PUSH
57974: LD_INT 3
57976: NEG
57977: PUSH
57978: EMPTY
57979: LIST
57980: LIST
57981: PUSH
57982: EMPTY
57983: LIST
57984: LIST
57985: LIST
57986: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
57987: LD_ADDR_VAR 0 29
57991: PUSH
57992: LD_INT 1
57994: NEG
57995: PUSH
57996: LD_INT 3
57998: NEG
57999: PUSH
58000: EMPTY
58001: LIST
58002: LIST
58003: PUSH
58004: LD_INT 0
58006: PUSH
58007: LD_INT 3
58009: NEG
58010: PUSH
58011: EMPTY
58012: LIST
58013: LIST
58014: PUSH
58015: LD_INT 1
58017: PUSH
58018: LD_INT 2
58020: NEG
58021: PUSH
58022: EMPTY
58023: LIST
58024: LIST
58025: PUSH
58026: LD_INT 1
58028: NEG
58029: PUSH
58030: LD_INT 4
58032: NEG
58033: PUSH
58034: EMPTY
58035: LIST
58036: LIST
58037: PUSH
58038: LD_INT 0
58040: PUSH
58041: LD_INT 4
58043: NEG
58044: PUSH
58045: EMPTY
58046: LIST
58047: LIST
58048: PUSH
58049: LD_INT 1
58051: PUSH
58052: LD_INT 3
58054: NEG
58055: PUSH
58056: EMPTY
58057: LIST
58058: LIST
58059: PUSH
58060: LD_INT 1
58062: NEG
58063: PUSH
58064: LD_INT 5
58066: NEG
58067: PUSH
58068: EMPTY
58069: LIST
58070: LIST
58071: PUSH
58072: LD_INT 0
58074: PUSH
58075: LD_INT 5
58077: NEG
58078: PUSH
58079: EMPTY
58080: LIST
58081: LIST
58082: PUSH
58083: LD_INT 1
58085: PUSH
58086: LD_INT 4
58088: NEG
58089: PUSH
58090: EMPTY
58091: LIST
58092: LIST
58093: PUSH
58094: LD_INT 1
58096: NEG
58097: PUSH
58098: LD_INT 6
58100: NEG
58101: PUSH
58102: EMPTY
58103: LIST
58104: LIST
58105: PUSH
58106: LD_INT 0
58108: PUSH
58109: LD_INT 6
58111: NEG
58112: PUSH
58113: EMPTY
58114: LIST
58115: LIST
58116: PUSH
58117: LD_INT 1
58119: PUSH
58120: LD_INT 5
58122: NEG
58123: PUSH
58124: EMPTY
58125: LIST
58126: LIST
58127: PUSH
58128: EMPTY
58129: LIST
58130: LIST
58131: LIST
58132: LIST
58133: LIST
58134: LIST
58135: LIST
58136: LIST
58137: LIST
58138: LIST
58139: LIST
58140: LIST
58141: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
58142: LD_ADDR_VAR 0 30
58146: PUSH
58147: LD_INT 2
58149: PUSH
58150: LD_INT 1
58152: NEG
58153: PUSH
58154: EMPTY
58155: LIST
58156: LIST
58157: PUSH
58158: LD_INT 3
58160: PUSH
58161: LD_INT 0
58163: PUSH
58164: EMPTY
58165: LIST
58166: LIST
58167: PUSH
58168: LD_INT 3
58170: PUSH
58171: LD_INT 1
58173: PUSH
58174: EMPTY
58175: LIST
58176: LIST
58177: PUSH
58178: LD_INT 3
58180: PUSH
58181: LD_INT 1
58183: NEG
58184: PUSH
58185: EMPTY
58186: LIST
58187: LIST
58188: PUSH
58189: LD_INT 4
58191: PUSH
58192: LD_INT 0
58194: PUSH
58195: EMPTY
58196: LIST
58197: LIST
58198: PUSH
58199: LD_INT 4
58201: PUSH
58202: LD_INT 1
58204: PUSH
58205: EMPTY
58206: LIST
58207: LIST
58208: PUSH
58209: LD_INT 4
58211: PUSH
58212: LD_INT 1
58214: NEG
58215: PUSH
58216: EMPTY
58217: LIST
58218: LIST
58219: PUSH
58220: LD_INT 5
58222: PUSH
58223: LD_INT 0
58225: PUSH
58226: EMPTY
58227: LIST
58228: LIST
58229: PUSH
58230: LD_INT 5
58232: PUSH
58233: LD_INT 1
58235: PUSH
58236: EMPTY
58237: LIST
58238: LIST
58239: PUSH
58240: LD_INT 5
58242: PUSH
58243: LD_INT 1
58245: NEG
58246: PUSH
58247: EMPTY
58248: LIST
58249: LIST
58250: PUSH
58251: LD_INT 6
58253: PUSH
58254: LD_INT 0
58256: PUSH
58257: EMPTY
58258: LIST
58259: LIST
58260: PUSH
58261: LD_INT 6
58263: PUSH
58264: LD_INT 1
58266: PUSH
58267: EMPTY
58268: LIST
58269: LIST
58270: PUSH
58271: EMPTY
58272: LIST
58273: LIST
58274: LIST
58275: LIST
58276: LIST
58277: LIST
58278: LIST
58279: LIST
58280: LIST
58281: LIST
58282: LIST
58283: LIST
58284: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
58285: LD_ADDR_VAR 0 31
58289: PUSH
58290: LD_INT 3
58292: PUSH
58293: LD_INT 2
58295: PUSH
58296: EMPTY
58297: LIST
58298: LIST
58299: PUSH
58300: LD_INT 3
58302: PUSH
58303: LD_INT 3
58305: PUSH
58306: EMPTY
58307: LIST
58308: LIST
58309: PUSH
58310: LD_INT 2
58312: PUSH
58313: LD_INT 3
58315: PUSH
58316: EMPTY
58317: LIST
58318: LIST
58319: PUSH
58320: LD_INT 4
58322: PUSH
58323: LD_INT 3
58325: PUSH
58326: EMPTY
58327: LIST
58328: LIST
58329: PUSH
58330: LD_INT 4
58332: PUSH
58333: LD_INT 4
58335: PUSH
58336: EMPTY
58337: LIST
58338: LIST
58339: PUSH
58340: LD_INT 3
58342: PUSH
58343: LD_INT 4
58345: PUSH
58346: EMPTY
58347: LIST
58348: LIST
58349: PUSH
58350: LD_INT 5
58352: PUSH
58353: LD_INT 4
58355: PUSH
58356: EMPTY
58357: LIST
58358: LIST
58359: PUSH
58360: LD_INT 5
58362: PUSH
58363: LD_INT 5
58365: PUSH
58366: EMPTY
58367: LIST
58368: LIST
58369: PUSH
58370: LD_INT 4
58372: PUSH
58373: LD_INT 5
58375: PUSH
58376: EMPTY
58377: LIST
58378: LIST
58379: PUSH
58380: LD_INT 6
58382: PUSH
58383: LD_INT 5
58385: PUSH
58386: EMPTY
58387: LIST
58388: LIST
58389: PUSH
58390: LD_INT 6
58392: PUSH
58393: LD_INT 6
58395: PUSH
58396: EMPTY
58397: LIST
58398: LIST
58399: PUSH
58400: LD_INT 5
58402: PUSH
58403: LD_INT 6
58405: PUSH
58406: EMPTY
58407: LIST
58408: LIST
58409: PUSH
58410: EMPTY
58411: LIST
58412: LIST
58413: LIST
58414: LIST
58415: LIST
58416: LIST
58417: LIST
58418: LIST
58419: LIST
58420: LIST
58421: LIST
58422: LIST
58423: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
58424: LD_ADDR_VAR 0 32
58428: PUSH
58429: LD_INT 1
58431: PUSH
58432: LD_INT 3
58434: PUSH
58435: EMPTY
58436: LIST
58437: LIST
58438: PUSH
58439: LD_INT 0
58441: PUSH
58442: LD_INT 3
58444: PUSH
58445: EMPTY
58446: LIST
58447: LIST
58448: PUSH
58449: LD_INT 1
58451: NEG
58452: PUSH
58453: LD_INT 2
58455: PUSH
58456: EMPTY
58457: LIST
58458: LIST
58459: PUSH
58460: LD_INT 1
58462: PUSH
58463: LD_INT 4
58465: PUSH
58466: EMPTY
58467: LIST
58468: LIST
58469: PUSH
58470: LD_INT 0
58472: PUSH
58473: LD_INT 4
58475: PUSH
58476: EMPTY
58477: LIST
58478: LIST
58479: PUSH
58480: LD_INT 1
58482: NEG
58483: PUSH
58484: LD_INT 3
58486: PUSH
58487: EMPTY
58488: LIST
58489: LIST
58490: PUSH
58491: LD_INT 1
58493: PUSH
58494: LD_INT 5
58496: PUSH
58497: EMPTY
58498: LIST
58499: LIST
58500: PUSH
58501: LD_INT 0
58503: PUSH
58504: LD_INT 5
58506: PUSH
58507: EMPTY
58508: LIST
58509: LIST
58510: PUSH
58511: LD_INT 1
58513: NEG
58514: PUSH
58515: LD_INT 4
58517: PUSH
58518: EMPTY
58519: LIST
58520: LIST
58521: PUSH
58522: LD_INT 1
58524: PUSH
58525: LD_INT 6
58527: PUSH
58528: EMPTY
58529: LIST
58530: LIST
58531: PUSH
58532: LD_INT 0
58534: PUSH
58535: LD_INT 6
58537: PUSH
58538: EMPTY
58539: LIST
58540: LIST
58541: PUSH
58542: LD_INT 1
58544: NEG
58545: PUSH
58546: LD_INT 5
58548: PUSH
58549: EMPTY
58550: LIST
58551: LIST
58552: PUSH
58553: EMPTY
58554: LIST
58555: LIST
58556: LIST
58557: LIST
58558: LIST
58559: LIST
58560: LIST
58561: LIST
58562: LIST
58563: LIST
58564: LIST
58565: LIST
58566: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
58567: LD_ADDR_VAR 0 33
58571: PUSH
58572: LD_INT 2
58574: NEG
58575: PUSH
58576: LD_INT 1
58578: PUSH
58579: EMPTY
58580: LIST
58581: LIST
58582: PUSH
58583: LD_INT 3
58585: NEG
58586: PUSH
58587: LD_INT 0
58589: PUSH
58590: EMPTY
58591: LIST
58592: LIST
58593: PUSH
58594: LD_INT 3
58596: NEG
58597: PUSH
58598: LD_INT 1
58600: NEG
58601: PUSH
58602: EMPTY
58603: LIST
58604: LIST
58605: PUSH
58606: LD_INT 3
58608: NEG
58609: PUSH
58610: LD_INT 1
58612: PUSH
58613: EMPTY
58614: LIST
58615: LIST
58616: PUSH
58617: LD_INT 4
58619: NEG
58620: PUSH
58621: LD_INT 0
58623: PUSH
58624: EMPTY
58625: LIST
58626: LIST
58627: PUSH
58628: LD_INT 4
58630: NEG
58631: PUSH
58632: LD_INT 1
58634: NEG
58635: PUSH
58636: EMPTY
58637: LIST
58638: LIST
58639: PUSH
58640: LD_INT 4
58642: NEG
58643: PUSH
58644: LD_INT 1
58646: PUSH
58647: EMPTY
58648: LIST
58649: LIST
58650: PUSH
58651: LD_INT 5
58653: NEG
58654: PUSH
58655: LD_INT 0
58657: PUSH
58658: EMPTY
58659: LIST
58660: LIST
58661: PUSH
58662: LD_INT 5
58664: NEG
58665: PUSH
58666: LD_INT 1
58668: NEG
58669: PUSH
58670: EMPTY
58671: LIST
58672: LIST
58673: PUSH
58674: LD_INT 5
58676: NEG
58677: PUSH
58678: LD_INT 1
58680: PUSH
58681: EMPTY
58682: LIST
58683: LIST
58684: PUSH
58685: LD_INT 6
58687: NEG
58688: PUSH
58689: LD_INT 0
58691: PUSH
58692: EMPTY
58693: LIST
58694: LIST
58695: PUSH
58696: LD_INT 6
58698: NEG
58699: PUSH
58700: LD_INT 1
58702: NEG
58703: PUSH
58704: EMPTY
58705: LIST
58706: LIST
58707: PUSH
58708: EMPTY
58709: LIST
58710: LIST
58711: LIST
58712: LIST
58713: LIST
58714: LIST
58715: LIST
58716: LIST
58717: LIST
58718: LIST
58719: LIST
58720: LIST
58721: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
58722: LD_ADDR_VAR 0 34
58726: PUSH
58727: LD_INT 2
58729: NEG
58730: PUSH
58731: LD_INT 3
58733: NEG
58734: PUSH
58735: EMPTY
58736: LIST
58737: LIST
58738: PUSH
58739: LD_INT 3
58741: NEG
58742: PUSH
58743: LD_INT 2
58745: NEG
58746: PUSH
58747: EMPTY
58748: LIST
58749: LIST
58750: PUSH
58751: LD_INT 3
58753: NEG
58754: PUSH
58755: LD_INT 3
58757: NEG
58758: PUSH
58759: EMPTY
58760: LIST
58761: LIST
58762: PUSH
58763: LD_INT 3
58765: NEG
58766: PUSH
58767: LD_INT 4
58769: NEG
58770: PUSH
58771: EMPTY
58772: LIST
58773: LIST
58774: PUSH
58775: LD_INT 4
58777: NEG
58778: PUSH
58779: LD_INT 3
58781: NEG
58782: PUSH
58783: EMPTY
58784: LIST
58785: LIST
58786: PUSH
58787: LD_INT 4
58789: NEG
58790: PUSH
58791: LD_INT 4
58793: NEG
58794: PUSH
58795: EMPTY
58796: LIST
58797: LIST
58798: PUSH
58799: LD_INT 4
58801: NEG
58802: PUSH
58803: LD_INT 5
58805: NEG
58806: PUSH
58807: EMPTY
58808: LIST
58809: LIST
58810: PUSH
58811: LD_INT 5
58813: NEG
58814: PUSH
58815: LD_INT 4
58817: NEG
58818: PUSH
58819: EMPTY
58820: LIST
58821: LIST
58822: PUSH
58823: LD_INT 5
58825: NEG
58826: PUSH
58827: LD_INT 5
58829: NEG
58830: PUSH
58831: EMPTY
58832: LIST
58833: LIST
58834: PUSH
58835: LD_INT 5
58837: NEG
58838: PUSH
58839: LD_INT 6
58841: NEG
58842: PUSH
58843: EMPTY
58844: LIST
58845: LIST
58846: PUSH
58847: LD_INT 6
58849: NEG
58850: PUSH
58851: LD_INT 5
58853: NEG
58854: PUSH
58855: EMPTY
58856: LIST
58857: LIST
58858: PUSH
58859: LD_INT 6
58861: NEG
58862: PUSH
58863: LD_INT 6
58865: NEG
58866: PUSH
58867: EMPTY
58868: LIST
58869: LIST
58870: PUSH
58871: EMPTY
58872: LIST
58873: LIST
58874: LIST
58875: LIST
58876: LIST
58877: LIST
58878: LIST
58879: LIST
58880: LIST
58881: LIST
58882: LIST
58883: LIST
58884: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
58885: LD_ADDR_VAR 0 41
58889: PUSH
58890: LD_INT 0
58892: PUSH
58893: LD_INT 2
58895: NEG
58896: PUSH
58897: EMPTY
58898: LIST
58899: LIST
58900: PUSH
58901: LD_INT 1
58903: NEG
58904: PUSH
58905: LD_INT 3
58907: NEG
58908: PUSH
58909: EMPTY
58910: LIST
58911: LIST
58912: PUSH
58913: LD_INT 1
58915: PUSH
58916: LD_INT 2
58918: NEG
58919: PUSH
58920: EMPTY
58921: LIST
58922: LIST
58923: PUSH
58924: EMPTY
58925: LIST
58926: LIST
58927: LIST
58928: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
58929: LD_ADDR_VAR 0 42
58933: PUSH
58934: LD_INT 2
58936: PUSH
58937: LD_INT 0
58939: PUSH
58940: EMPTY
58941: LIST
58942: LIST
58943: PUSH
58944: LD_INT 2
58946: PUSH
58947: LD_INT 1
58949: NEG
58950: PUSH
58951: EMPTY
58952: LIST
58953: LIST
58954: PUSH
58955: LD_INT 3
58957: PUSH
58958: LD_INT 1
58960: PUSH
58961: EMPTY
58962: LIST
58963: LIST
58964: PUSH
58965: EMPTY
58966: LIST
58967: LIST
58968: LIST
58969: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
58970: LD_ADDR_VAR 0 43
58974: PUSH
58975: LD_INT 2
58977: PUSH
58978: LD_INT 2
58980: PUSH
58981: EMPTY
58982: LIST
58983: LIST
58984: PUSH
58985: LD_INT 3
58987: PUSH
58988: LD_INT 2
58990: PUSH
58991: EMPTY
58992: LIST
58993: LIST
58994: PUSH
58995: LD_INT 2
58997: PUSH
58998: LD_INT 3
59000: PUSH
59001: EMPTY
59002: LIST
59003: LIST
59004: PUSH
59005: EMPTY
59006: LIST
59007: LIST
59008: LIST
59009: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
59010: LD_ADDR_VAR 0 44
59014: PUSH
59015: LD_INT 0
59017: PUSH
59018: LD_INT 2
59020: PUSH
59021: EMPTY
59022: LIST
59023: LIST
59024: PUSH
59025: LD_INT 1
59027: PUSH
59028: LD_INT 3
59030: PUSH
59031: EMPTY
59032: LIST
59033: LIST
59034: PUSH
59035: LD_INT 1
59037: NEG
59038: PUSH
59039: LD_INT 2
59041: PUSH
59042: EMPTY
59043: LIST
59044: LIST
59045: PUSH
59046: EMPTY
59047: LIST
59048: LIST
59049: LIST
59050: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59051: LD_ADDR_VAR 0 45
59055: PUSH
59056: LD_INT 2
59058: NEG
59059: PUSH
59060: LD_INT 0
59062: PUSH
59063: EMPTY
59064: LIST
59065: LIST
59066: PUSH
59067: LD_INT 2
59069: NEG
59070: PUSH
59071: LD_INT 1
59073: PUSH
59074: EMPTY
59075: LIST
59076: LIST
59077: PUSH
59078: LD_INT 3
59080: NEG
59081: PUSH
59082: LD_INT 1
59084: NEG
59085: PUSH
59086: EMPTY
59087: LIST
59088: LIST
59089: PUSH
59090: EMPTY
59091: LIST
59092: LIST
59093: LIST
59094: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
59095: LD_ADDR_VAR 0 46
59099: PUSH
59100: LD_INT 2
59102: NEG
59103: PUSH
59104: LD_INT 2
59106: NEG
59107: PUSH
59108: EMPTY
59109: LIST
59110: LIST
59111: PUSH
59112: LD_INT 2
59114: NEG
59115: PUSH
59116: LD_INT 3
59118: NEG
59119: PUSH
59120: EMPTY
59121: LIST
59122: LIST
59123: PUSH
59124: LD_INT 3
59126: NEG
59127: PUSH
59128: LD_INT 2
59130: NEG
59131: PUSH
59132: EMPTY
59133: LIST
59134: LIST
59135: PUSH
59136: EMPTY
59137: LIST
59138: LIST
59139: LIST
59140: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
59141: LD_ADDR_VAR 0 47
59145: PUSH
59146: LD_INT 2
59148: NEG
59149: PUSH
59150: LD_INT 3
59152: NEG
59153: PUSH
59154: EMPTY
59155: LIST
59156: LIST
59157: PUSH
59158: LD_INT 1
59160: NEG
59161: PUSH
59162: LD_INT 3
59164: NEG
59165: PUSH
59166: EMPTY
59167: LIST
59168: LIST
59169: PUSH
59170: EMPTY
59171: LIST
59172: LIST
59173: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
59174: LD_ADDR_VAR 0 48
59178: PUSH
59179: LD_INT 1
59181: PUSH
59182: LD_INT 2
59184: NEG
59185: PUSH
59186: EMPTY
59187: LIST
59188: LIST
59189: PUSH
59190: LD_INT 2
59192: PUSH
59193: LD_INT 1
59195: NEG
59196: PUSH
59197: EMPTY
59198: LIST
59199: LIST
59200: PUSH
59201: EMPTY
59202: LIST
59203: LIST
59204: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
59205: LD_ADDR_VAR 0 49
59209: PUSH
59210: LD_INT 3
59212: PUSH
59213: LD_INT 1
59215: PUSH
59216: EMPTY
59217: LIST
59218: LIST
59219: PUSH
59220: LD_INT 3
59222: PUSH
59223: LD_INT 2
59225: PUSH
59226: EMPTY
59227: LIST
59228: LIST
59229: PUSH
59230: EMPTY
59231: LIST
59232: LIST
59233: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
59234: LD_ADDR_VAR 0 50
59238: PUSH
59239: LD_INT 2
59241: PUSH
59242: LD_INT 3
59244: PUSH
59245: EMPTY
59246: LIST
59247: LIST
59248: PUSH
59249: LD_INT 1
59251: PUSH
59252: LD_INT 3
59254: PUSH
59255: EMPTY
59256: LIST
59257: LIST
59258: PUSH
59259: EMPTY
59260: LIST
59261: LIST
59262: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
59263: LD_ADDR_VAR 0 51
59267: PUSH
59268: LD_INT 1
59270: NEG
59271: PUSH
59272: LD_INT 2
59274: PUSH
59275: EMPTY
59276: LIST
59277: LIST
59278: PUSH
59279: LD_INT 2
59281: NEG
59282: PUSH
59283: LD_INT 1
59285: PUSH
59286: EMPTY
59287: LIST
59288: LIST
59289: PUSH
59290: EMPTY
59291: LIST
59292: LIST
59293: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59294: LD_ADDR_VAR 0 52
59298: PUSH
59299: LD_INT 3
59301: NEG
59302: PUSH
59303: LD_INT 1
59305: NEG
59306: PUSH
59307: EMPTY
59308: LIST
59309: LIST
59310: PUSH
59311: LD_INT 3
59313: NEG
59314: PUSH
59315: LD_INT 2
59317: NEG
59318: PUSH
59319: EMPTY
59320: LIST
59321: LIST
59322: PUSH
59323: EMPTY
59324: LIST
59325: LIST
59326: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
59327: LD_ADDR_VAR 0 53
59331: PUSH
59332: LD_INT 1
59334: NEG
59335: PUSH
59336: LD_INT 3
59338: NEG
59339: PUSH
59340: EMPTY
59341: LIST
59342: LIST
59343: PUSH
59344: LD_INT 0
59346: PUSH
59347: LD_INT 3
59349: NEG
59350: PUSH
59351: EMPTY
59352: LIST
59353: LIST
59354: PUSH
59355: LD_INT 1
59357: PUSH
59358: LD_INT 2
59360: NEG
59361: PUSH
59362: EMPTY
59363: LIST
59364: LIST
59365: PUSH
59366: EMPTY
59367: LIST
59368: LIST
59369: LIST
59370: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
59371: LD_ADDR_VAR 0 54
59375: PUSH
59376: LD_INT 2
59378: PUSH
59379: LD_INT 1
59381: NEG
59382: PUSH
59383: EMPTY
59384: LIST
59385: LIST
59386: PUSH
59387: LD_INT 3
59389: PUSH
59390: LD_INT 0
59392: PUSH
59393: EMPTY
59394: LIST
59395: LIST
59396: PUSH
59397: LD_INT 3
59399: PUSH
59400: LD_INT 1
59402: PUSH
59403: EMPTY
59404: LIST
59405: LIST
59406: PUSH
59407: EMPTY
59408: LIST
59409: LIST
59410: LIST
59411: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59412: LD_ADDR_VAR 0 55
59416: PUSH
59417: LD_INT 3
59419: PUSH
59420: LD_INT 2
59422: PUSH
59423: EMPTY
59424: LIST
59425: LIST
59426: PUSH
59427: LD_INT 3
59429: PUSH
59430: LD_INT 3
59432: PUSH
59433: EMPTY
59434: LIST
59435: LIST
59436: PUSH
59437: LD_INT 2
59439: PUSH
59440: LD_INT 3
59442: PUSH
59443: EMPTY
59444: LIST
59445: LIST
59446: PUSH
59447: EMPTY
59448: LIST
59449: LIST
59450: LIST
59451: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
59452: LD_ADDR_VAR 0 56
59456: PUSH
59457: LD_INT 1
59459: PUSH
59460: LD_INT 3
59462: PUSH
59463: EMPTY
59464: LIST
59465: LIST
59466: PUSH
59467: LD_INT 0
59469: PUSH
59470: LD_INT 3
59472: PUSH
59473: EMPTY
59474: LIST
59475: LIST
59476: PUSH
59477: LD_INT 1
59479: NEG
59480: PUSH
59481: LD_INT 2
59483: PUSH
59484: EMPTY
59485: LIST
59486: LIST
59487: PUSH
59488: EMPTY
59489: LIST
59490: LIST
59491: LIST
59492: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59493: LD_ADDR_VAR 0 57
59497: PUSH
59498: LD_INT 2
59500: NEG
59501: PUSH
59502: LD_INT 1
59504: PUSH
59505: EMPTY
59506: LIST
59507: LIST
59508: PUSH
59509: LD_INT 3
59511: NEG
59512: PUSH
59513: LD_INT 0
59515: PUSH
59516: EMPTY
59517: LIST
59518: LIST
59519: PUSH
59520: LD_INT 3
59522: NEG
59523: PUSH
59524: LD_INT 1
59526: NEG
59527: PUSH
59528: EMPTY
59529: LIST
59530: LIST
59531: PUSH
59532: EMPTY
59533: LIST
59534: LIST
59535: LIST
59536: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59537: LD_ADDR_VAR 0 58
59541: PUSH
59542: LD_INT 2
59544: NEG
59545: PUSH
59546: LD_INT 3
59548: NEG
59549: PUSH
59550: EMPTY
59551: LIST
59552: LIST
59553: PUSH
59554: LD_INT 3
59556: NEG
59557: PUSH
59558: LD_INT 2
59560: NEG
59561: PUSH
59562: EMPTY
59563: LIST
59564: LIST
59565: PUSH
59566: LD_INT 3
59568: NEG
59569: PUSH
59570: LD_INT 3
59572: NEG
59573: PUSH
59574: EMPTY
59575: LIST
59576: LIST
59577: PUSH
59578: EMPTY
59579: LIST
59580: LIST
59581: LIST
59582: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
59583: LD_ADDR_VAR 0 59
59587: PUSH
59588: LD_INT 1
59590: NEG
59591: PUSH
59592: LD_INT 2
59594: NEG
59595: PUSH
59596: EMPTY
59597: LIST
59598: LIST
59599: PUSH
59600: LD_INT 0
59602: PUSH
59603: LD_INT 2
59605: NEG
59606: PUSH
59607: EMPTY
59608: LIST
59609: LIST
59610: PUSH
59611: LD_INT 1
59613: PUSH
59614: LD_INT 1
59616: NEG
59617: PUSH
59618: EMPTY
59619: LIST
59620: LIST
59621: PUSH
59622: EMPTY
59623: LIST
59624: LIST
59625: LIST
59626: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
59627: LD_ADDR_VAR 0 60
59631: PUSH
59632: LD_INT 1
59634: PUSH
59635: LD_INT 1
59637: NEG
59638: PUSH
59639: EMPTY
59640: LIST
59641: LIST
59642: PUSH
59643: LD_INT 2
59645: PUSH
59646: LD_INT 0
59648: PUSH
59649: EMPTY
59650: LIST
59651: LIST
59652: PUSH
59653: LD_INT 2
59655: PUSH
59656: LD_INT 1
59658: PUSH
59659: EMPTY
59660: LIST
59661: LIST
59662: PUSH
59663: EMPTY
59664: LIST
59665: LIST
59666: LIST
59667: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
59668: LD_ADDR_VAR 0 61
59672: PUSH
59673: LD_INT 2
59675: PUSH
59676: LD_INT 1
59678: PUSH
59679: EMPTY
59680: LIST
59681: LIST
59682: PUSH
59683: LD_INT 2
59685: PUSH
59686: LD_INT 2
59688: PUSH
59689: EMPTY
59690: LIST
59691: LIST
59692: PUSH
59693: LD_INT 1
59695: PUSH
59696: LD_INT 2
59698: PUSH
59699: EMPTY
59700: LIST
59701: LIST
59702: PUSH
59703: EMPTY
59704: LIST
59705: LIST
59706: LIST
59707: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
59708: LD_ADDR_VAR 0 62
59712: PUSH
59713: LD_INT 1
59715: PUSH
59716: LD_INT 2
59718: PUSH
59719: EMPTY
59720: LIST
59721: LIST
59722: PUSH
59723: LD_INT 0
59725: PUSH
59726: LD_INT 2
59728: PUSH
59729: EMPTY
59730: LIST
59731: LIST
59732: PUSH
59733: LD_INT 1
59735: NEG
59736: PUSH
59737: LD_INT 1
59739: PUSH
59740: EMPTY
59741: LIST
59742: LIST
59743: PUSH
59744: EMPTY
59745: LIST
59746: LIST
59747: LIST
59748: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
59749: LD_ADDR_VAR 0 63
59753: PUSH
59754: LD_INT 1
59756: NEG
59757: PUSH
59758: LD_INT 1
59760: PUSH
59761: EMPTY
59762: LIST
59763: LIST
59764: PUSH
59765: LD_INT 2
59767: NEG
59768: PUSH
59769: LD_INT 0
59771: PUSH
59772: EMPTY
59773: LIST
59774: LIST
59775: PUSH
59776: LD_INT 2
59778: NEG
59779: PUSH
59780: LD_INT 1
59782: NEG
59783: PUSH
59784: EMPTY
59785: LIST
59786: LIST
59787: PUSH
59788: EMPTY
59789: LIST
59790: LIST
59791: LIST
59792: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59793: LD_ADDR_VAR 0 64
59797: PUSH
59798: LD_INT 1
59800: NEG
59801: PUSH
59802: LD_INT 2
59804: NEG
59805: PUSH
59806: EMPTY
59807: LIST
59808: LIST
59809: PUSH
59810: LD_INT 2
59812: NEG
59813: PUSH
59814: LD_INT 1
59816: NEG
59817: PUSH
59818: EMPTY
59819: LIST
59820: LIST
59821: PUSH
59822: LD_INT 2
59824: NEG
59825: PUSH
59826: LD_INT 2
59828: NEG
59829: PUSH
59830: EMPTY
59831: LIST
59832: LIST
59833: PUSH
59834: EMPTY
59835: LIST
59836: LIST
59837: LIST
59838: ST_TO_ADDR
// end ; 2 :
59839: GO 63105
59841: LD_INT 2
59843: DOUBLE
59844: EQUAL
59845: IFTRUE 59849
59847: GO 63104
59849: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
59850: LD_ADDR_VAR 0 29
59854: PUSH
59855: LD_INT 4
59857: PUSH
59858: LD_INT 0
59860: PUSH
59861: EMPTY
59862: LIST
59863: LIST
59864: PUSH
59865: LD_INT 4
59867: PUSH
59868: LD_INT 1
59870: NEG
59871: PUSH
59872: EMPTY
59873: LIST
59874: LIST
59875: PUSH
59876: LD_INT 5
59878: PUSH
59879: LD_INT 0
59881: PUSH
59882: EMPTY
59883: LIST
59884: LIST
59885: PUSH
59886: LD_INT 5
59888: PUSH
59889: LD_INT 1
59891: PUSH
59892: EMPTY
59893: LIST
59894: LIST
59895: PUSH
59896: LD_INT 4
59898: PUSH
59899: LD_INT 1
59901: PUSH
59902: EMPTY
59903: LIST
59904: LIST
59905: PUSH
59906: LD_INT 3
59908: PUSH
59909: LD_INT 0
59911: PUSH
59912: EMPTY
59913: LIST
59914: LIST
59915: PUSH
59916: LD_INT 3
59918: PUSH
59919: LD_INT 1
59921: NEG
59922: PUSH
59923: EMPTY
59924: LIST
59925: LIST
59926: PUSH
59927: LD_INT 3
59929: PUSH
59930: LD_INT 2
59932: NEG
59933: PUSH
59934: EMPTY
59935: LIST
59936: LIST
59937: PUSH
59938: LD_INT 5
59940: PUSH
59941: LD_INT 2
59943: PUSH
59944: EMPTY
59945: LIST
59946: LIST
59947: PUSH
59948: LD_INT 3
59950: PUSH
59951: LD_INT 3
59953: PUSH
59954: EMPTY
59955: LIST
59956: LIST
59957: PUSH
59958: LD_INT 3
59960: PUSH
59961: LD_INT 2
59963: PUSH
59964: EMPTY
59965: LIST
59966: LIST
59967: PUSH
59968: LD_INT 4
59970: PUSH
59971: LD_INT 3
59973: PUSH
59974: EMPTY
59975: LIST
59976: LIST
59977: PUSH
59978: LD_INT 4
59980: PUSH
59981: LD_INT 4
59983: PUSH
59984: EMPTY
59985: LIST
59986: LIST
59987: PUSH
59988: LD_INT 3
59990: PUSH
59991: LD_INT 4
59993: PUSH
59994: EMPTY
59995: LIST
59996: LIST
59997: PUSH
59998: LD_INT 2
60000: PUSH
60001: LD_INT 3
60003: PUSH
60004: EMPTY
60005: LIST
60006: LIST
60007: PUSH
60008: LD_INT 2
60010: PUSH
60011: LD_INT 2
60013: PUSH
60014: EMPTY
60015: LIST
60016: LIST
60017: PUSH
60018: LD_INT 4
60020: PUSH
60021: LD_INT 2
60023: PUSH
60024: EMPTY
60025: LIST
60026: LIST
60027: PUSH
60028: LD_INT 2
60030: PUSH
60031: LD_INT 4
60033: PUSH
60034: EMPTY
60035: LIST
60036: LIST
60037: PUSH
60038: LD_INT 0
60040: PUSH
60041: LD_INT 4
60043: PUSH
60044: EMPTY
60045: LIST
60046: LIST
60047: PUSH
60048: LD_INT 0
60050: PUSH
60051: LD_INT 3
60053: PUSH
60054: EMPTY
60055: LIST
60056: LIST
60057: PUSH
60058: LD_INT 1
60060: PUSH
60061: LD_INT 4
60063: PUSH
60064: EMPTY
60065: LIST
60066: LIST
60067: PUSH
60068: LD_INT 1
60070: PUSH
60071: LD_INT 5
60073: PUSH
60074: EMPTY
60075: LIST
60076: LIST
60077: PUSH
60078: LD_INT 0
60080: PUSH
60081: LD_INT 5
60083: PUSH
60084: EMPTY
60085: LIST
60086: LIST
60087: PUSH
60088: LD_INT 1
60090: NEG
60091: PUSH
60092: LD_INT 4
60094: PUSH
60095: EMPTY
60096: LIST
60097: LIST
60098: PUSH
60099: LD_INT 1
60101: NEG
60102: PUSH
60103: LD_INT 3
60105: PUSH
60106: EMPTY
60107: LIST
60108: LIST
60109: PUSH
60110: LD_INT 2
60112: PUSH
60113: LD_INT 5
60115: PUSH
60116: EMPTY
60117: LIST
60118: LIST
60119: PUSH
60120: LD_INT 2
60122: NEG
60123: PUSH
60124: LD_INT 3
60126: PUSH
60127: EMPTY
60128: LIST
60129: LIST
60130: PUSH
60131: LD_INT 3
60133: NEG
60134: PUSH
60135: LD_INT 0
60137: PUSH
60138: EMPTY
60139: LIST
60140: LIST
60141: PUSH
60142: LD_INT 3
60144: NEG
60145: PUSH
60146: LD_INT 1
60148: NEG
60149: PUSH
60150: EMPTY
60151: LIST
60152: LIST
60153: PUSH
60154: LD_INT 2
60156: NEG
60157: PUSH
60158: LD_INT 0
60160: PUSH
60161: EMPTY
60162: LIST
60163: LIST
60164: PUSH
60165: LD_INT 2
60167: NEG
60168: PUSH
60169: LD_INT 1
60171: PUSH
60172: EMPTY
60173: LIST
60174: LIST
60175: PUSH
60176: LD_INT 3
60178: NEG
60179: PUSH
60180: LD_INT 1
60182: PUSH
60183: EMPTY
60184: LIST
60185: LIST
60186: PUSH
60187: LD_INT 4
60189: NEG
60190: PUSH
60191: LD_INT 0
60193: PUSH
60194: EMPTY
60195: LIST
60196: LIST
60197: PUSH
60198: LD_INT 4
60200: NEG
60201: PUSH
60202: LD_INT 1
60204: NEG
60205: PUSH
60206: EMPTY
60207: LIST
60208: LIST
60209: PUSH
60210: LD_INT 4
60212: NEG
60213: PUSH
60214: LD_INT 2
60216: NEG
60217: PUSH
60218: EMPTY
60219: LIST
60220: LIST
60221: PUSH
60222: LD_INT 2
60224: NEG
60225: PUSH
60226: LD_INT 2
60228: PUSH
60229: EMPTY
60230: LIST
60231: LIST
60232: PUSH
60233: LD_INT 4
60235: NEG
60236: PUSH
60237: LD_INT 4
60239: NEG
60240: PUSH
60241: EMPTY
60242: LIST
60243: LIST
60244: PUSH
60245: LD_INT 4
60247: NEG
60248: PUSH
60249: LD_INT 5
60251: NEG
60252: PUSH
60253: EMPTY
60254: LIST
60255: LIST
60256: PUSH
60257: LD_INT 3
60259: NEG
60260: PUSH
60261: LD_INT 4
60263: NEG
60264: PUSH
60265: EMPTY
60266: LIST
60267: LIST
60268: PUSH
60269: LD_INT 3
60271: NEG
60272: PUSH
60273: LD_INT 3
60275: NEG
60276: PUSH
60277: EMPTY
60278: LIST
60279: LIST
60280: PUSH
60281: LD_INT 4
60283: NEG
60284: PUSH
60285: LD_INT 3
60287: NEG
60288: PUSH
60289: EMPTY
60290: LIST
60291: LIST
60292: PUSH
60293: LD_INT 5
60295: NEG
60296: PUSH
60297: LD_INT 4
60299: NEG
60300: PUSH
60301: EMPTY
60302: LIST
60303: LIST
60304: PUSH
60305: LD_INT 5
60307: NEG
60308: PUSH
60309: LD_INT 5
60311: NEG
60312: PUSH
60313: EMPTY
60314: LIST
60315: LIST
60316: PUSH
60317: LD_INT 3
60319: NEG
60320: PUSH
60321: LD_INT 5
60323: NEG
60324: PUSH
60325: EMPTY
60326: LIST
60327: LIST
60328: PUSH
60329: LD_INT 5
60331: NEG
60332: PUSH
60333: LD_INT 3
60335: NEG
60336: PUSH
60337: EMPTY
60338: LIST
60339: LIST
60340: PUSH
60341: EMPTY
60342: LIST
60343: LIST
60344: LIST
60345: LIST
60346: LIST
60347: LIST
60348: LIST
60349: LIST
60350: LIST
60351: LIST
60352: LIST
60353: LIST
60354: LIST
60355: LIST
60356: LIST
60357: LIST
60358: LIST
60359: LIST
60360: LIST
60361: LIST
60362: LIST
60363: LIST
60364: LIST
60365: LIST
60366: LIST
60367: LIST
60368: LIST
60369: LIST
60370: LIST
60371: LIST
60372: LIST
60373: LIST
60374: LIST
60375: LIST
60376: LIST
60377: LIST
60378: LIST
60379: LIST
60380: LIST
60381: LIST
60382: LIST
60383: LIST
60384: LIST
60385: LIST
60386: LIST
60387: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
60388: LD_ADDR_VAR 0 30
60392: PUSH
60393: LD_INT 4
60395: PUSH
60396: LD_INT 4
60398: PUSH
60399: EMPTY
60400: LIST
60401: LIST
60402: PUSH
60403: LD_INT 4
60405: PUSH
60406: LD_INT 3
60408: PUSH
60409: EMPTY
60410: LIST
60411: LIST
60412: PUSH
60413: LD_INT 5
60415: PUSH
60416: LD_INT 4
60418: PUSH
60419: EMPTY
60420: LIST
60421: LIST
60422: PUSH
60423: LD_INT 5
60425: PUSH
60426: LD_INT 5
60428: PUSH
60429: EMPTY
60430: LIST
60431: LIST
60432: PUSH
60433: LD_INT 4
60435: PUSH
60436: LD_INT 5
60438: PUSH
60439: EMPTY
60440: LIST
60441: LIST
60442: PUSH
60443: LD_INT 3
60445: PUSH
60446: LD_INT 4
60448: PUSH
60449: EMPTY
60450: LIST
60451: LIST
60452: PUSH
60453: LD_INT 3
60455: PUSH
60456: LD_INT 3
60458: PUSH
60459: EMPTY
60460: LIST
60461: LIST
60462: PUSH
60463: LD_INT 5
60465: PUSH
60466: LD_INT 3
60468: PUSH
60469: EMPTY
60470: LIST
60471: LIST
60472: PUSH
60473: LD_INT 3
60475: PUSH
60476: LD_INT 5
60478: PUSH
60479: EMPTY
60480: LIST
60481: LIST
60482: PUSH
60483: LD_INT 0
60485: PUSH
60486: LD_INT 3
60488: PUSH
60489: EMPTY
60490: LIST
60491: LIST
60492: PUSH
60493: LD_INT 0
60495: PUSH
60496: LD_INT 2
60498: PUSH
60499: EMPTY
60500: LIST
60501: LIST
60502: PUSH
60503: LD_INT 1
60505: PUSH
60506: LD_INT 3
60508: PUSH
60509: EMPTY
60510: LIST
60511: LIST
60512: PUSH
60513: LD_INT 1
60515: PUSH
60516: LD_INT 4
60518: PUSH
60519: EMPTY
60520: LIST
60521: LIST
60522: PUSH
60523: LD_INT 0
60525: PUSH
60526: LD_INT 4
60528: PUSH
60529: EMPTY
60530: LIST
60531: LIST
60532: PUSH
60533: LD_INT 1
60535: NEG
60536: PUSH
60537: LD_INT 3
60539: PUSH
60540: EMPTY
60541: LIST
60542: LIST
60543: PUSH
60544: LD_INT 1
60546: NEG
60547: PUSH
60548: LD_INT 2
60550: PUSH
60551: EMPTY
60552: LIST
60553: LIST
60554: PUSH
60555: LD_INT 2
60557: PUSH
60558: LD_INT 4
60560: PUSH
60561: EMPTY
60562: LIST
60563: LIST
60564: PUSH
60565: LD_INT 2
60567: NEG
60568: PUSH
60569: LD_INT 2
60571: PUSH
60572: EMPTY
60573: LIST
60574: LIST
60575: PUSH
60576: LD_INT 4
60578: NEG
60579: PUSH
60580: LD_INT 0
60582: PUSH
60583: EMPTY
60584: LIST
60585: LIST
60586: PUSH
60587: LD_INT 4
60589: NEG
60590: PUSH
60591: LD_INT 1
60593: NEG
60594: PUSH
60595: EMPTY
60596: LIST
60597: LIST
60598: PUSH
60599: LD_INT 3
60601: NEG
60602: PUSH
60603: LD_INT 0
60605: PUSH
60606: EMPTY
60607: LIST
60608: LIST
60609: PUSH
60610: LD_INT 3
60612: NEG
60613: PUSH
60614: LD_INT 1
60616: PUSH
60617: EMPTY
60618: LIST
60619: LIST
60620: PUSH
60621: LD_INT 4
60623: NEG
60624: PUSH
60625: LD_INT 1
60627: PUSH
60628: EMPTY
60629: LIST
60630: LIST
60631: PUSH
60632: LD_INT 5
60634: NEG
60635: PUSH
60636: LD_INT 0
60638: PUSH
60639: EMPTY
60640: LIST
60641: LIST
60642: PUSH
60643: LD_INT 5
60645: NEG
60646: PUSH
60647: LD_INT 1
60649: NEG
60650: PUSH
60651: EMPTY
60652: LIST
60653: LIST
60654: PUSH
60655: LD_INT 5
60657: NEG
60658: PUSH
60659: LD_INT 2
60661: NEG
60662: PUSH
60663: EMPTY
60664: LIST
60665: LIST
60666: PUSH
60667: LD_INT 3
60669: NEG
60670: PUSH
60671: LD_INT 2
60673: PUSH
60674: EMPTY
60675: LIST
60676: LIST
60677: PUSH
60678: LD_INT 3
60680: NEG
60681: PUSH
60682: LD_INT 3
60684: NEG
60685: PUSH
60686: EMPTY
60687: LIST
60688: LIST
60689: PUSH
60690: LD_INT 3
60692: NEG
60693: PUSH
60694: LD_INT 4
60696: NEG
60697: PUSH
60698: EMPTY
60699: LIST
60700: LIST
60701: PUSH
60702: LD_INT 2
60704: NEG
60705: PUSH
60706: LD_INT 3
60708: NEG
60709: PUSH
60710: EMPTY
60711: LIST
60712: LIST
60713: PUSH
60714: LD_INT 2
60716: NEG
60717: PUSH
60718: LD_INT 2
60720: NEG
60721: PUSH
60722: EMPTY
60723: LIST
60724: LIST
60725: PUSH
60726: LD_INT 3
60728: NEG
60729: PUSH
60730: LD_INT 2
60732: NEG
60733: PUSH
60734: EMPTY
60735: LIST
60736: LIST
60737: PUSH
60738: LD_INT 4
60740: NEG
60741: PUSH
60742: LD_INT 3
60744: NEG
60745: PUSH
60746: EMPTY
60747: LIST
60748: LIST
60749: PUSH
60750: LD_INT 4
60752: NEG
60753: PUSH
60754: LD_INT 4
60756: NEG
60757: PUSH
60758: EMPTY
60759: LIST
60760: LIST
60761: PUSH
60762: LD_INT 2
60764: NEG
60765: PUSH
60766: LD_INT 4
60768: NEG
60769: PUSH
60770: EMPTY
60771: LIST
60772: LIST
60773: PUSH
60774: LD_INT 4
60776: NEG
60777: PUSH
60778: LD_INT 2
60780: NEG
60781: PUSH
60782: EMPTY
60783: LIST
60784: LIST
60785: PUSH
60786: LD_INT 0
60788: PUSH
60789: LD_INT 4
60791: NEG
60792: PUSH
60793: EMPTY
60794: LIST
60795: LIST
60796: PUSH
60797: LD_INT 0
60799: PUSH
60800: LD_INT 5
60802: NEG
60803: PUSH
60804: EMPTY
60805: LIST
60806: LIST
60807: PUSH
60808: LD_INT 1
60810: PUSH
60811: LD_INT 4
60813: NEG
60814: PUSH
60815: EMPTY
60816: LIST
60817: LIST
60818: PUSH
60819: LD_INT 1
60821: PUSH
60822: LD_INT 3
60824: NEG
60825: PUSH
60826: EMPTY
60827: LIST
60828: LIST
60829: PUSH
60830: LD_INT 0
60832: PUSH
60833: LD_INT 3
60835: NEG
60836: PUSH
60837: EMPTY
60838: LIST
60839: LIST
60840: PUSH
60841: LD_INT 1
60843: NEG
60844: PUSH
60845: LD_INT 4
60847: NEG
60848: PUSH
60849: EMPTY
60850: LIST
60851: LIST
60852: PUSH
60853: LD_INT 1
60855: NEG
60856: PUSH
60857: LD_INT 5
60859: NEG
60860: PUSH
60861: EMPTY
60862: LIST
60863: LIST
60864: PUSH
60865: LD_INT 2
60867: PUSH
60868: LD_INT 3
60870: NEG
60871: PUSH
60872: EMPTY
60873: LIST
60874: LIST
60875: PUSH
60876: LD_INT 2
60878: NEG
60879: PUSH
60880: LD_INT 5
60882: NEG
60883: PUSH
60884: EMPTY
60885: LIST
60886: LIST
60887: PUSH
60888: EMPTY
60889: LIST
60890: LIST
60891: LIST
60892: LIST
60893: LIST
60894: LIST
60895: LIST
60896: LIST
60897: LIST
60898: LIST
60899: LIST
60900: LIST
60901: LIST
60902: LIST
60903: LIST
60904: LIST
60905: LIST
60906: LIST
60907: LIST
60908: LIST
60909: LIST
60910: LIST
60911: LIST
60912: LIST
60913: LIST
60914: LIST
60915: LIST
60916: LIST
60917: LIST
60918: LIST
60919: LIST
60920: LIST
60921: LIST
60922: LIST
60923: LIST
60924: LIST
60925: LIST
60926: LIST
60927: LIST
60928: LIST
60929: LIST
60930: LIST
60931: LIST
60932: LIST
60933: LIST
60934: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
60935: LD_ADDR_VAR 0 31
60939: PUSH
60940: LD_INT 0
60942: PUSH
60943: LD_INT 4
60945: PUSH
60946: EMPTY
60947: LIST
60948: LIST
60949: PUSH
60950: LD_INT 0
60952: PUSH
60953: LD_INT 3
60955: PUSH
60956: EMPTY
60957: LIST
60958: LIST
60959: PUSH
60960: LD_INT 1
60962: PUSH
60963: LD_INT 4
60965: PUSH
60966: EMPTY
60967: LIST
60968: LIST
60969: PUSH
60970: LD_INT 1
60972: PUSH
60973: LD_INT 5
60975: PUSH
60976: EMPTY
60977: LIST
60978: LIST
60979: PUSH
60980: LD_INT 0
60982: PUSH
60983: LD_INT 5
60985: PUSH
60986: EMPTY
60987: LIST
60988: LIST
60989: PUSH
60990: LD_INT 1
60992: NEG
60993: PUSH
60994: LD_INT 4
60996: PUSH
60997: EMPTY
60998: LIST
60999: LIST
61000: PUSH
61001: LD_INT 1
61003: NEG
61004: PUSH
61005: LD_INT 3
61007: PUSH
61008: EMPTY
61009: LIST
61010: LIST
61011: PUSH
61012: LD_INT 2
61014: PUSH
61015: LD_INT 5
61017: PUSH
61018: EMPTY
61019: LIST
61020: LIST
61021: PUSH
61022: LD_INT 2
61024: NEG
61025: PUSH
61026: LD_INT 3
61028: PUSH
61029: EMPTY
61030: LIST
61031: LIST
61032: PUSH
61033: LD_INT 3
61035: NEG
61036: PUSH
61037: LD_INT 0
61039: PUSH
61040: EMPTY
61041: LIST
61042: LIST
61043: PUSH
61044: LD_INT 3
61046: NEG
61047: PUSH
61048: LD_INT 1
61050: NEG
61051: PUSH
61052: EMPTY
61053: LIST
61054: LIST
61055: PUSH
61056: LD_INT 2
61058: NEG
61059: PUSH
61060: LD_INT 0
61062: PUSH
61063: EMPTY
61064: LIST
61065: LIST
61066: PUSH
61067: LD_INT 2
61069: NEG
61070: PUSH
61071: LD_INT 1
61073: PUSH
61074: EMPTY
61075: LIST
61076: LIST
61077: PUSH
61078: LD_INT 3
61080: NEG
61081: PUSH
61082: LD_INT 1
61084: PUSH
61085: EMPTY
61086: LIST
61087: LIST
61088: PUSH
61089: LD_INT 4
61091: NEG
61092: PUSH
61093: LD_INT 0
61095: PUSH
61096: EMPTY
61097: LIST
61098: LIST
61099: PUSH
61100: LD_INT 4
61102: NEG
61103: PUSH
61104: LD_INT 1
61106: NEG
61107: PUSH
61108: EMPTY
61109: LIST
61110: LIST
61111: PUSH
61112: LD_INT 4
61114: NEG
61115: PUSH
61116: LD_INT 2
61118: NEG
61119: PUSH
61120: EMPTY
61121: LIST
61122: LIST
61123: PUSH
61124: LD_INT 2
61126: NEG
61127: PUSH
61128: LD_INT 2
61130: PUSH
61131: EMPTY
61132: LIST
61133: LIST
61134: PUSH
61135: LD_INT 4
61137: NEG
61138: PUSH
61139: LD_INT 4
61141: NEG
61142: PUSH
61143: EMPTY
61144: LIST
61145: LIST
61146: PUSH
61147: LD_INT 4
61149: NEG
61150: PUSH
61151: LD_INT 5
61153: NEG
61154: PUSH
61155: EMPTY
61156: LIST
61157: LIST
61158: PUSH
61159: LD_INT 3
61161: NEG
61162: PUSH
61163: LD_INT 4
61165: NEG
61166: PUSH
61167: EMPTY
61168: LIST
61169: LIST
61170: PUSH
61171: LD_INT 3
61173: NEG
61174: PUSH
61175: LD_INT 3
61177: NEG
61178: PUSH
61179: EMPTY
61180: LIST
61181: LIST
61182: PUSH
61183: LD_INT 4
61185: NEG
61186: PUSH
61187: LD_INT 3
61189: NEG
61190: PUSH
61191: EMPTY
61192: LIST
61193: LIST
61194: PUSH
61195: LD_INT 5
61197: NEG
61198: PUSH
61199: LD_INT 4
61201: NEG
61202: PUSH
61203: EMPTY
61204: LIST
61205: LIST
61206: PUSH
61207: LD_INT 5
61209: NEG
61210: PUSH
61211: LD_INT 5
61213: NEG
61214: PUSH
61215: EMPTY
61216: LIST
61217: LIST
61218: PUSH
61219: LD_INT 3
61221: NEG
61222: PUSH
61223: LD_INT 5
61225: NEG
61226: PUSH
61227: EMPTY
61228: LIST
61229: LIST
61230: PUSH
61231: LD_INT 5
61233: NEG
61234: PUSH
61235: LD_INT 3
61237: NEG
61238: PUSH
61239: EMPTY
61240: LIST
61241: LIST
61242: PUSH
61243: LD_INT 0
61245: PUSH
61246: LD_INT 3
61248: NEG
61249: PUSH
61250: EMPTY
61251: LIST
61252: LIST
61253: PUSH
61254: LD_INT 0
61256: PUSH
61257: LD_INT 4
61259: NEG
61260: PUSH
61261: EMPTY
61262: LIST
61263: LIST
61264: PUSH
61265: LD_INT 1
61267: PUSH
61268: LD_INT 3
61270: NEG
61271: PUSH
61272: EMPTY
61273: LIST
61274: LIST
61275: PUSH
61276: LD_INT 1
61278: PUSH
61279: LD_INT 2
61281: NEG
61282: PUSH
61283: EMPTY
61284: LIST
61285: LIST
61286: PUSH
61287: LD_INT 0
61289: PUSH
61290: LD_INT 2
61292: NEG
61293: PUSH
61294: EMPTY
61295: LIST
61296: LIST
61297: PUSH
61298: LD_INT 1
61300: NEG
61301: PUSH
61302: LD_INT 3
61304: NEG
61305: PUSH
61306: EMPTY
61307: LIST
61308: LIST
61309: PUSH
61310: LD_INT 1
61312: NEG
61313: PUSH
61314: LD_INT 4
61316: NEG
61317: PUSH
61318: EMPTY
61319: LIST
61320: LIST
61321: PUSH
61322: LD_INT 2
61324: PUSH
61325: LD_INT 2
61327: NEG
61328: PUSH
61329: EMPTY
61330: LIST
61331: LIST
61332: PUSH
61333: LD_INT 2
61335: NEG
61336: PUSH
61337: LD_INT 4
61339: NEG
61340: PUSH
61341: EMPTY
61342: LIST
61343: LIST
61344: PUSH
61345: LD_INT 4
61347: PUSH
61348: LD_INT 0
61350: PUSH
61351: EMPTY
61352: LIST
61353: LIST
61354: PUSH
61355: LD_INT 4
61357: PUSH
61358: LD_INT 1
61360: NEG
61361: PUSH
61362: EMPTY
61363: LIST
61364: LIST
61365: PUSH
61366: LD_INT 5
61368: PUSH
61369: LD_INT 0
61371: PUSH
61372: EMPTY
61373: LIST
61374: LIST
61375: PUSH
61376: LD_INT 5
61378: PUSH
61379: LD_INT 1
61381: PUSH
61382: EMPTY
61383: LIST
61384: LIST
61385: PUSH
61386: LD_INT 4
61388: PUSH
61389: LD_INT 1
61391: PUSH
61392: EMPTY
61393: LIST
61394: LIST
61395: PUSH
61396: LD_INT 3
61398: PUSH
61399: LD_INT 0
61401: PUSH
61402: EMPTY
61403: LIST
61404: LIST
61405: PUSH
61406: LD_INT 3
61408: PUSH
61409: LD_INT 1
61411: NEG
61412: PUSH
61413: EMPTY
61414: LIST
61415: LIST
61416: PUSH
61417: LD_INT 3
61419: PUSH
61420: LD_INT 2
61422: NEG
61423: PUSH
61424: EMPTY
61425: LIST
61426: LIST
61427: PUSH
61428: LD_INT 5
61430: PUSH
61431: LD_INT 2
61433: PUSH
61434: EMPTY
61435: LIST
61436: LIST
61437: PUSH
61438: EMPTY
61439: LIST
61440: LIST
61441: LIST
61442: LIST
61443: LIST
61444: LIST
61445: LIST
61446: LIST
61447: LIST
61448: LIST
61449: LIST
61450: LIST
61451: LIST
61452: LIST
61453: LIST
61454: LIST
61455: LIST
61456: LIST
61457: LIST
61458: LIST
61459: LIST
61460: LIST
61461: LIST
61462: LIST
61463: LIST
61464: LIST
61465: LIST
61466: LIST
61467: LIST
61468: LIST
61469: LIST
61470: LIST
61471: LIST
61472: LIST
61473: LIST
61474: LIST
61475: LIST
61476: LIST
61477: LIST
61478: LIST
61479: LIST
61480: LIST
61481: LIST
61482: LIST
61483: LIST
61484: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
61485: LD_ADDR_VAR 0 32
61489: PUSH
61490: LD_INT 4
61492: NEG
61493: PUSH
61494: LD_INT 0
61496: PUSH
61497: EMPTY
61498: LIST
61499: LIST
61500: PUSH
61501: LD_INT 4
61503: NEG
61504: PUSH
61505: LD_INT 1
61507: NEG
61508: PUSH
61509: EMPTY
61510: LIST
61511: LIST
61512: PUSH
61513: LD_INT 3
61515: NEG
61516: PUSH
61517: LD_INT 0
61519: PUSH
61520: EMPTY
61521: LIST
61522: LIST
61523: PUSH
61524: LD_INT 3
61526: NEG
61527: PUSH
61528: LD_INT 1
61530: PUSH
61531: EMPTY
61532: LIST
61533: LIST
61534: PUSH
61535: LD_INT 4
61537: NEG
61538: PUSH
61539: LD_INT 1
61541: PUSH
61542: EMPTY
61543: LIST
61544: LIST
61545: PUSH
61546: LD_INT 5
61548: NEG
61549: PUSH
61550: LD_INT 0
61552: PUSH
61553: EMPTY
61554: LIST
61555: LIST
61556: PUSH
61557: LD_INT 5
61559: NEG
61560: PUSH
61561: LD_INT 1
61563: NEG
61564: PUSH
61565: EMPTY
61566: LIST
61567: LIST
61568: PUSH
61569: LD_INT 5
61571: NEG
61572: PUSH
61573: LD_INT 2
61575: NEG
61576: PUSH
61577: EMPTY
61578: LIST
61579: LIST
61580: PUSH
61581: LD_INT 3
61583: NEG
61584: PUSH
61585: LD_INT 2
61587: PUSH
61588: EMPTY
61589: LIST
61590: LIST
61591: PUSH
61592: LD_INT 3
61594: NEG
61595: PUSH
61596: LD_INT 3
61598: NEG
61599: PUSH
61600: EMPTY
61601: LIST
61602: LIST
61603: PUSH
61604: LD_INT 3
61606: NEG
61607: PUSH
61608: LD_INT 4
61610: NEG
61611: PUSH
61612: EMPTY
61613: LIST
61614: LIST
61615: PUSH
61616: LD_INT 2
61618: NEG
61619: PUSH
61620: LD_INT 3
61622: NEG
61623: PUSH
61624: EMPTY
61625: LIST
61626: LIST
61627: PUSH
61628: LD_INT 2
61630: NEG
61631: PUSH
61632: LD_INT 2
61634: NEG
61635: PUSH
61636: EMPTY
61637: LIST
61638: LIST
61639: PUSH
61640: LD_INT 3
61642: NEG
61643: PUSH
61644: LD_INT 2
61646: NEG
61647: PUSH
61648: EMPTY
61649: LIST
61650: LIST
61651: PUSH
61652: LD_INT 4
61654: NEG
61655: PUSH
61656: LD_INT 3
61658: NEG
61659: PUSH
61660: EMPTY
61661: LIST
61662: LIST
61663: PUSH
61664: LD_INT 4
61666: NEG
61667: PUSH
61668: LD_INT 4
61670: NEG
61671: PUSH
61672: EMPTY
61673: LIST
61674: LIST
61675: PUSH
61676: LD_INT 2
61678: NEG
61679: PUSH
61680: LD_INT 4
61682: NEG
61683: PUSH
61684: EMPTY
61685: LIST
61686: LIST
61687: PUSH
61688: LD_INT 4
61690: NEG
61691: PUSH
61692: LD_INT 2
61694: NEG
61695: PUSH
61696: EMPTY
61697: LIST
61698: LIST
61699: PUSH
61700: LD_INT 0
61702: PUSH
61703: LD_INT 4
61705: NEG
61706: PUSH
61707: EMPTY
61708: LIST
61709: LIST
61710: PUSH
61711: LD_INT 0
61713: PUSH
61714: LD_INT 5
61716: NEG
61717: PUSH
61718: EMPTY
61719: LIST
61720: LIST
61721: PUSH
61722: LD_INT 1
61724: PUSH
61725: LD_INT 4
61727: NEG
61728: PUSH
61729: EMPTY
61730: LIST
61731: LIST
61732: PUSH
61733: LD_INT 1
61735: PUSH
61736: LD_INT 3
61738: NEG
61739: PUSH
61740: EMPTY
61741: LIST
61742: LIST
61743: PUSH
61744: LD_INT 0
61746: PUSH
61747: LD_INT 3
61749: NEG
61750: PUSH
61751: EMPTY
61752: LIST
61753: LIST
61754: PUSH
61755: LD_INT 1
61757: NEG
61758: PUSH
61759: LD_INT 4
61761: NEG
61762: PUSH
61763: EMPTY
61764: LIST
61765: LIST
61766: PUSH
61767: LD_INT 1
61769: NEG
61770: PUSH
61771: LD_INT 5
61773: NEG
61774: PUSH
61775: EMPTY
61776: LIST
61777: LIST
61778: PUSH
61779: LD_INT 2
61781: PUSH
61782: LD_INT 3
61784: NEG
61785: PUSH
61786: EMPTY
61787: LIST
61788: LIST
61789: PUSH
61790: LD_INT 2
61792: NEG
61793: PUSH
61794: LD_INT 5
61796: NEG
61797: PUSH
61798: EMPTY
61799: LIST
61800: LIST
61801: PUSH
61802: LD_INT 3
61804: PUSH
61805: LD_INT 0
61807: PUSH
61808: EMPTY
61809: LIST
61810: LIST
61811: PUSH
61812: LD_INT 3
61814: PUSH
61815: LD_INT 1
61817: NEG
61818: PUSH
61819: EMPTY
61820: LIST
61821: LIST
61822: PUSH
61823: LD_INT 4
61825: PUSH
61826: LD_INT 0
61828: PUSH
61829: EMPTY
61830: LIST
61831: LIST
61832: PUSH
61833: LD_INT 4
61835: PUSH
61836: LD_INT 1
61838: PUSH
61839: EMPTY
61840: LIST
61841: LIST
61842: PUSH
61843: LD_INT 3
61845: PUSH
61846: LD_INT 1
61848: PUSH
61849: EMPTY
61850: LIST
61851: LIST
61852: PUSH
61853: LD_INT 2
61855: PUSH
61856: LD_INT 0
61858: PUSH
61859: EMPTY
61860: LIST
61861: LIST
61862: PUSH
61863: LD_INT 2
61865: PUSH
61866: LD_INT 1
61868: NEG
61869: PUSH
61870: EMPTY
61871: LIST
61872: LIST
61873: PUSH
61874: LD_INT 2
61876: PUSH
61877: LD_INT 2
61879: NEG
61880: PUSH
61881: EMPTY
61882: LIST
61883: LIST
61884: PUSH
61885: LD_INT 4
61887: PUSH
61888: LD_INT 2
61890: PUSH
61891: EMPTY
61892: LIST
61893: LIST
61894: PUSH
61895: LD_INT 4
61897: PUSH
61898: LD_INT 4
61900: PUSH
61901: EMPTY
61902: LIST
61903: LIST
61904: PUSH
61905: LD_INT 4
61907: PUSH
61908: LD_INT 3
61910: PUSH
61911: EMPTY
61912: LIST
61913: LIST
61914: PUSH
61915: LD_INT 5
61917: PUSH
61918: LD_INT 4
61920: PUSH
61921: EMPTY
61922: LIST
61923: LIST
61924: PUSH
61925: LD_INT 5
61927: PUSH
61928: LD_INT 5
61930: PUSH
61931: EMPTY
61932: LIST
61933: LIST
61934: PUSH
61935: LD_INT 4
61937: PUSH
61938: LD_INT 5
61940: PUSH
61941: EMPTY
61942: LIST
61943: LIST
61944: PUSH
61945: LD_INT 3
61947: PUSH
61948: LD_INT 4
61950: PUSH
61951: EMPTY
61952: LIST
61953: LIST
61954: PUSH
61955: LD_INT 3
61957: PUSH
61958: LD_INT 3
61960: PUSH
61961: EMPTY
61962: LIST
61963: LIST
61964: PUSH
61965: LD_INT 5
61967: PUSH
61968: LD_INT 3
61970: PUSH
61971: EMPTY
61972: LIST
61973: LIST
61974: PUSH
61975: LD_INT 3
61977: PUSH
61978: LD_INT 5
61980: PUSH
61981: EMPTY
61982: LIST
61983: LIST
61984: PUSH
61985: EMPTY
61986: LIST
61987: LIST
61988: LIST
61989: LIST
61990: LIST
61991: LIST
61992: LIST
61993: LIST
61994: LIST
61995: LIST
61996: LIST
61997: LIST
61998: LIST
61999: LIST
62000: LIST
62001: LIST
62002: LIST
62003: LIST
62004: LIST
62005: LIST
62006: LIST
62007: LIST
62008: LIST
62009: LIST
62010: LIST
62011: LIST
62012: LIST
62013: LIST
62014: LIST
62015: LIST
62016: LIST
62017: LIST
62018: LIST
62019: LIST
62020: LIST
62021: LIST
62022: LIST
62023: LIST
62024: LIST
62025: LIST
62026: LIST
62027: LIST
62028: LIST
62029: LIST
62030: LIST
62031: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
62032: LD_ADDR_VAR 0 33
62036: PUSH
62037: LD_INT 4
62039: NEG
62040: PUSH
62041: LD_INT 4
62043: NEG
62044: PUSH
62045: EMPTY
62046: LIST
62047: LIST
62048: PUSH
62049: LD_INT 4
62051: NEG
62052: PUSH
62053: LD_INT 5
62055: NEG
62056: PUSH
62057: EMPTY
62058: LIST
62059: LIST
62060: PUSH
62061: LD_INT 3
62063: NEG
62064: PUSH
62065: LD_INT 4
62067: NEG
62068: PUSH
62069: EMPTY
62070: LIST
62071: LIST
62072: PUSH
62073: LD_INT 3
62075: NEG
62076: PUSH
62077: LD_INT 3
62079: NEG
62080: PUSH
62081: EMPTY
62082: LIST
62083: LIST
62084: PUSH
62085: LD_INT 4
62087: NEG
62088: PUSH
62089: LD_INT 3
62091: NEG
62092: PUSH
62093: EMPTY
62094: LIST
62095: LIST
62096: PUSH
62097: LD_INT 5
62099: NEG
62100: PUSH
62101: LD_INT 4
62103: NEG
62104: PUSH
62105: EMPTY
62106: LIST
62107: LIST
62108: PUSH
62109: LD_INT 5
62111: NEG
62112: PUSH
62113: LD_INT 5
62115: NEG
62116: PUSH
62117: EMPTY
62118: LIST
62119: LIST
62120: PUSH
62121: LD_INT 3
62123: NEG
62124: PUSH
62125: LD_INT 5
62127: NEG
62128: PUSH
62129: EMPTY
62130: LIST
62131: LIST
62132: PUSH
62133: LD_INT 5
62135: NEG
62136: PUSH
62137: LD_INT 3
62139: NEG
62140: PUSH
62141: EMPTY
62142: LIST
62143: LIST
62144: PUSH
62145: LD_INT 0
62147: PUSH
62148: LD_INT 3
62150: NEG
62151: PUSH
62152: EMPTY
62153: LIST
62154: LIST
62155: PUSH
62156: LD_INT 0
62158: PUSH
62159: LD_INT 4
62161: NEG
62162: PUSH
62163: EMPTY
62164: LIST
62165: LIST
62166: PUSH
62167: LD_INT 1
62169: PUSH
62170: LD_INT 3
62172: NEG
62173: PUSH
62174: EMPTY
62175: LIST
62176: LIST
62177: PUSH
62178: LD_INT 1
62180: PUSH
62181: LD_INT 2
62183: NEG
62184: PUSH
62185: EMPTY
62186: LIST
62187: LIST
62188: PUSH
62189: LD_INT 0
62191: PUSH
62192: LD_INT 2
62194: NEG
62195: PUSH
62196: EMPTY
62197: LIST
62198: LIST
62199: PUSH
62200: LD_INT 1
62202: NEG
62203: PUSH
62204: LD_INT 3
62206: NEG
62207: PUSH
62208: EMPTY
62209: LIST
62210: LIST
62211: PUSH
62212: LD_INT 1
62214: NEG
62215: PUSH
62216: LD_INT 4
62218: NEG
62219: PUSH
62220: EMPTY
62221: LIST
62222: LIST
62223: PUSH
62224: LD_INT 2
62226: PUSH
62227: LD_INT 2
62229: NEG
62230: PUSH
62231: EMPTY
62232: LIST
62233: LIST
62234: PUSH
62235: LD_INT 2
62237: NEG
62238: PUSH
62239: LD_INT 4
62241: NEG
62242: PUSH
62243: EMPTY
62244: LIST
62245: LIST
62246: PUSH
62247: LD_INT 4
62249: PUSH
62250: LD_INT 0
62252: PUSH
62253: EMPTY
62254: LIST
62255: LIST
62256: PUSH
62257: LD_INT 4
62259: PUSH
62260: LD_INT 1
62262: NEG
62263: PUSH
62264: EMPTY
62265: LIST
62266: LIST
62267: PUSH
62268: LD_INT 5
62270: PUSH
62271: LD_INT 0
62273: PUSH
62274: EMPTY
62275: LIST
62276: LIST
62277: PUSH
62278: LD_INT 5
62280: PUSH
62281: LD_INT 1
62283: PUSH
62284: EMPTY
62285: LIST
62286: LIST
62287: PUSH
62288: LD_INT 4
62290: PUSH
62291: LD_INT 1
62293: PUSH
62294: EMPTY
62295: LIST
62296: LIST
62297: PUSH
62298: LD_INT 3
62300: PUSH
62301: LD_INT 0
62303: PUSH
62304: EMPTY
62305: LIST
62306: LIST
62307: PUSH
62308: LD_INT 3
62310: PUSH
62311: LD_INT 1
62313: NEG
62314: PUSH
62315: EMPTY
62316: LIST
62317: LIST
62318: PUSH
62319: LD_INT 3
62321: PUSH
62322: LD_INT 2
62324: NEG
62325: PUSH
62326: EMPTY
62327: LIST
62328: LIST
62329: PUSH
62330: LD_INT 5
62332: PUSH
62333: LD_INT 2
62335: PUSH
62336: EMPTY
62337: LIST
62338: LIST
62339: PUSH
62340: LD_INT 3
62342: PUSH
62343: LD_INT 3
62345: PUSH
62346: EMPTY
62347: LIST
62348: LIST
62349: PUSH
62350: LD_INT 3
62352: PUSH
62353: LD_INT 2
62355: PUSH
62356: EMPTY
62357: LIST
62358: LIST
62359: PUSH
62360: LD_INT 4
62362: PUSH
62363: LD_INT 3
62365: PUSH
62366: EMPTY
62367: LIST
62368: LIST
62369: PUSH
62370: LD_INT 4
62372: PUSH
62373: LD_INT 4
62375: PUSH
62376: EMPTY
62377: LIST
62378: LIST
62379: PUSH
62380: LD_INT 3
62382: PUSH
62383: LD_INT 4
62385: PUSH
62386: EMPTY
62387: LIST
62388: LIST
62389: PUSH
62390: LD_INT 2
62392: PUSH
62393: LD_INT 3
62395: PUSH
62396: EMPTY
62397: LIST
62398: LIST
62399: PUSH
62400: LD_INT 2
62402: PUSH
62403: LD_INT 2
62405: PUSH
62406: EMPTY
62407: LIST
62408: LIST
62409: PUSH
62410: LD_INT 4
62412: PUSH
62413: LD_INT 2
62415: PUSH
62416: EMPTY
62417: LIST
62418: LIST
62419: PUSH
62420: LD_INT 2
62422: PUSH
62423: LD_INT 4
62425: PUSH
62426: EMPTY
62427: LIST
62428: LIST
62429: PUSH
62430: LD_INT 0
62432: PUSH
62433: LD_INT 4
62435: PUSH
62436: EMPTY
62437: LIST
62438: LIST
62439: PUSH
62440: LD_INT 0
62442: PUSH
62443: LD_INT 3
62445: PUSH
62446: EMPTY
62447: LIST
62448: LIST
62449: PUSH
62450: LD_INT 1
62452: PUSH
62453: LD_INT 4
62455: PUSH
62456: EMPTY
62457: LIST
62458: LIST
62459: PUSH
62460: LD_INT 1
62462: PUSH
62463: LD_INT 5
62465: PUSH
62466: EMPTY
62467: LIST
62468: LIST
62469: PUSH
62470: LD_INT 0
62472: PUSH
62473: LD_INT 5
62475: PUSH
62476: EMPTY
62477: LIST
62478: LIST
62479: PUSH
62480: LD_INT 1
62482: NEG
62483: PUSH
62484: LD_INT 4
62486: PUSH
62487: EMPTY
62488: LIST
62489: LIST
62490: PUSH
62491: LD_INT 1
62493: NEG
62494: PUSH
62495: LD_INT 3
62497: PUSH
62498: EMPTY
62499: LIST
62500: LIST
62501: PUSH
62502: LD_INT 2
62504: PUSH
62505: LD_INT 5
62507: PUSH
62508: EMPTY
62509: LIST
62510: LIST
62511: PUSH
62512: LD_INT 2
62514: NEG
62515: PUSH
62516: LD_INT 3
62518: PUSH
62519: EMPTY
62520: LIST
62521: LIST
62522: PUSH
62523: EMPTY
62524: LIST
62525: LIST
62526: LIST
62527: LIST
62528: LIST
62529: LIST
62530: LIST
62531: LIST
62532: LIST
62533: LIST
62534: LIST
62535: LIST
62536: LIST
62537: LIST
62538: LIST
62539: LIST
62540: LIST
62541: LIST
62542: LIST
62543: LIST
62544: LIST
62545: LIST
62546: LIST
62547: LIST
62548: LIST
62549: LIST
62550: LIST
62551: LIST
62552: LIST
62553: LIST
62554: LIST
62555: LIST
62556: LIST
62557: LIST
62558: LIST
62559: LIST
62560: LIST
62561: LIST
62562: LIST
62563: LIST
62564: LIST
62565: LIST
62566: LIST
62567: LIST
62568: LIST
62569: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
62570: LD_ADDR_VAR 0 34
62574: PUSH
62575: LD_INT 0
62577: PUSH
62578: LD_INT 4
62580: NEG
62581: PUSH
62582: EMPTY
62583: LIST
62584: LIST
62585: PUSH
62586: LD_INT 0
62588: PUSH
62589: LD_INT 5
62591: NEG
62592: PUSH
62593: EMPTY
62594: LIST
62595: LIST
62596: PUSH
62597: LD_INT 1
62599: PUSH
62600: LD_INT 4
62602: NEG
62603: PUSH
62604: EMPTY
62605: LIST
62606: LIST
62607: PUSH
62608: LD_INT 1
62610: PUSH
62611: LD_INT 3
62613: NEG
62614: PUSH
62615: EMPTY
62616: LIST
62617: LIST
62618: PUSH
62619: LD_INT 0
62621: PUSH
62622: LD_INT 3
62624: NEG
62625: PUSH
62626: EMPTY
62627: LIST
62628: LIST
62629: PUSH
62630: LD_INT 1
62632: NEG
62633: PUSH
62634: LD_INT 4
62636: NEG
62637: PUSH
62638: EMPTY
62639: LIST
62640: LIST
62641: PUSH
62642: LD_INT 1
62644: NEG
62645: PUSH
62646: LD_INT 5
62648: NEG
62649: PUSH
62650: EMPTY
62651: LIST
62652: LIST
62653: PUSH
62654: LD_INT 2
62656: PUSH
62657: LD_INT 3
62659: NEG
62660: PUSH
62661: EMPTY
62662: LIST
62663: LIST
62664: PUSH
62665: LD_INT 2
62667: NEG
62668: PUSH
62669: LD_INT 5
62671: NEG
62672: PUSH
62673: EMPTY
62674: LIST
62675: LIST
62676: PUSH
62677: LD_INT 3
62679: PUSH
62680: LD_INT 0
62682: PUSH
62683: EMPTY
62684: LIST
62685: LIST
62686: PUSH
62687: LD_INT 3
62689: PUSH
62690: LD_INT 1
62692: NEG
62693: PUSH
62694: EMPTY
62695: LIST
62696: LIST
62697: PUSH
62698: LD_INT 4
62700: PUSH
62701: LD_INT 0
62703: PUSH
62704: EMPTY
62705: LIST
62706: LIST
62707: PUSH
62708: LD_INT 4
62710: PUSH
62711: LD_INT 1
62713: PUSH
62714: EMPTY
62715: LIST
62716: LIST
62717: PUSH
62718: LD_INT 3
62720: PUSH
62721: LD_INT 1
62723: PUSH
62724: EMPTY
62725: LIST
62726: LIST
62727: PUSH
62728: LD_INT 2
62730: PUSH
62731: LD_INT 0
62733: PUSH
62734: EMPTY
62735: LIST
62736: LIST
62737: PUSH
62738: LD_INT 2
62740: PUSH
62741: LD_INT 1
62743: NEG
62744: PUSH
62745: EMPTY
62746: LIST
62747: LIST
62748: PUSH
62749: LD_INT 2
62751: PUSH
62752: LD_INT 2
62754: NEG
62755: PUSH
62756: EMPTY
62757: LIST
62758: LIST
62759: PUSH
62760: LD_INT 4
62762: PUSH
62763: LD_INT 2
62765: PUSH
62766: EMPTY
62767: LIST
62768: LIST
62769: PUSH
62770: LD_INT 4
62772: PUSH
62773: LD_INT 4
62775: PUSH
62776: EMPTY
62777: LIST
62778: LIST
62779: PUSH
62780: LD_INT 4
62782: PUSH
62783: LD_INT 3
62785: PUSH
62786: EMPTY
62787: LIST
62788: LIST
62789: PUSH
62790: LD_INT 5
62792: PUSH
62793: LD_INT 4
62795: PUSH
62796: EMPTY
62797: LIST
62798: LIST
62799: PUSH
62800: LD_INT 5
62802: PUSH
62803: LD_INT 5
62805: PUSH
62806: EMPTY
62807: LIST
62808: LIST
62809: PUSH
62810: LD_INT 4
62812: PUSH
62813: LD_INT 5
62815: PUSH
62816: EMPTY
62817: LIST
62818: LIST
62819: PUSH
62820: LD_INT 3
62822: PUSH
62823: LD_INT 4
62825: PUSH
62826: EMPTY
62827: LIST
62828: LIST
62829: PUSH
62830: LD_INT 3
62832: PUSH
62833: LD_INT 3
62835: PUSH
62836: EMPTY
62837: LIST
62838: LIST
62839: PUSH
62840: LD_INT 5
62842: PUSH
62843: LD_INT 3
62845: PUSH
62846: EMPTY
62847: LIST
62848: LIST
62849: PUSH
62850: LD_INT 3
62852: PUSH
62853: LD_INT 5
62855: PUSH
62856: EMPTY
62857: LIST
62858: LIST
62859: PUSH
62860: LD_INT 0
62862: PUSH
62863: LD_INT 3
62865: PUSH
62866: EMPTY
62867: LIST
62868: LIST
62869: PUSH
62870: LD_INT 0
62872: PUSH
62873: LD_INT 2
62875: PUSH
62876: EMPTY
62877: LIST
62878: LIST
62879: PUSH
62880: LD_INT 1
62882: PUSH
62883: LD_INT 3
62885: PUSH
62886: EMPTY
62887: LIST
62888: LIST
62889: PUSH
62890: LD_INT 1
62892: PUSH
62893: LD_INT 4
62895: PUSH
62896: EMPTY
62897: LIST
62898: LIST
62899: PUSH
62900: LD_INT 0
62902: PUSH
62903: LD_INT 4
62905: PUSH
62906: EMPTY
62907: LIST
62908: LIST
62909: PUSH
62910: LD_INT 1
62912: NEG
62913: PUSH
62914: LD_INT 3
62916: PUSH
62917: EMPTY
62918: LIST
62919: LIST
62920: PUSH
62921: LD_INT 1
62923: NEG
62924: PUSH
62925: LD_INT 2
62927: PUSH
62928: EMPTY
62929: LIST
62930: LIST
62931: PUSH
62932: LD_INT 2
62934: PUSH
62935: LD_INT 4
62937: PUSH
62938: EMPTY
62939: LIST
62940: LIST
62941: PUSH
62942: LD_INT 2
62944: NEG
62945: PUSH
62946: LD_INT 2
62948: PUSH
62949: EMPTY
62950: LIST
62951: LIST
62952: PUSH
62953: LD_INT 4
62955: NEG
62956: PUSH
62957: LD_INT 0
62959: PUSH
62960: EMPTY
62961: LIST
62962: LIST
62963: PUSH
62964: LD_INT 4
62966: NEG
62967: PUSH
62968: LD_INT 1
62970: NEG
62971: PUSH
62972: EMPTY
62973: LIST
62974: LIST
62975: PUSH
62976: LD_INT 3
62978: NEG
62979: PUSH
62980: LD_INT 0
62982: PUSH
62983: EMPTY
62984: LIST
62985: LIST
62986: PUSH
62987: LD_INT 3
62989: NEG
62990: PUSH
62991: LD_INT 1
62993: PUSH
62994: EMPTY
62995: LIST
62996: LIST
62997: PUSH
62998: LD_INT 4
63000: NEG
63001: PUSH
63002: LD_INT 1
63004: PUSH
63005: EMPTY
63006: LIST
63007: LIST
63008: PUSH
63009: LD_INT 5
63011: NEG
63012: PUSH
63013: LD_INT 0
63015: PUSH
63016: EMPTY
63017: LIST
63018: LIST
63019: PUSH
63020: LD_INT 5
63022: NEG
63023: PUSH
63024: LD_INT 1
63026: NEG
63027: PUSH
63028: EMPTY
63029: LIST
63030: LIST
63031: PUSH
63032: LD_INT 5
63034: NEG
63035: PUSH
63036: LD_INT 2
63038: NEG
63039: PUSH
63040: EMPTY
63041: LIST
63042: LIST
63043: PUSH
63044: LD_INT 3
63046: NEG
63047: PUSH
63048: LD_INT 2
63050: PUSH
63051: EMPTY
63052: LIST
63053: LIST
63054: PUSH
63055: EMPTY
63056: LIST
63057: LIST
63058: LIST
63059: LIST
63060: LIST
63061: LIST
63062: LIST
63063: LIST
63064: LIST
63065: LIST
63066: LIST
63067: LIST
63068: LIST
63069: LIST
63070: LIST
63071: LIST
63072: LIST
63073: LIST
63074: LIST
63075: LIST
63076: LIST
63077: LIST
63078: LIST
63079: LIST
63080: LIST
63081: LIST
63082: LIST
63083: LIST
63084: LIST
63085: LIST
63086: LIST
63087: LIST
63088: LIST
63089: LIST
63090: LIST
63091: LIST
63092: LIST
63093: LIST
63094: LIST
63095: LIST
63096: LIST
63097: LIST
63098: LIST
63099: LIST
63100: LIST
63101: ST_TO_ADDR
// end ; end ;
63102: GO 63105
63104: POP
// case btype of b_depot , b_warehouse :
63105: LD_VAR 0 1
63109: PUSH
63110: LD_INT 0
63112: DOUBLE
63113: EQUAL
63114: IFTRUE 63124
63116: LD_INT 1
63118: DOUBLE
63119: EQUAL
63120: IFTRUE 63124
63122: GO 63325
63124: POP
// case nation of nation_american :
63125: LD_VAR 0 5
63129: PUSH
63130: LD_INT 1
63132: DOUBLE
63133: EQUAL
63134: IFTRUE 63138
63136: GO 63194
63138: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
63139: LD_ADDR_VAR 0 9
63143: PUSH
63144: LD_VAR 0 11
63148: PUSH
63149: LD_VAR 0 12
63153: PUSH
63154: LD_VAR 0 13
63158: PUSH
63159: LD_VAR 0 14
63163: PUSH
63164: LD_VAR 0 15
63168: PUSH
63169: LD_VAR 0 16
63173: PUSH
63174: EMPTY
63175: LIST
63176: LIST
63177: LIST
63178: LIST
63179: LIST
63180: LIST
63181: PUSH
63182: LD_VAR 0 4
63186: PUSH
63187: LD_INT 1
63189: PLUS
63190: ARRAY
63191: ST_TO_ADDR
63192: GO 63323
63194: LD_INT 2
63196: DOUBLE
63197: EQUAL
63198: IFTRUE 63202
63200: GO 63258
63202: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
63203: LD_ADDR_VAR 0 9
63207: PUSH
63208: LD_VAR 0 17
63212: PUSH
63213: LD_VAR 0 18
63217: PUSH
63218: LD_VAR 0 19
63222: PUSH
63223: LD_VAR 0 20
63227: PUSH
63228: LD_VAR 0 21
63232: PUSH
63233: LD_VAR 0 22
63237: PUSH
63238: EMPTY
63239: LIST
63240: LIST
63241: LIST
63242: LIST
63243: LIST
63244: LIST
63245: PUSH
63246: LD_VAR 0 4
63250: PUSH
63251: LD_INT 1
63253: PLUS
63254: ARRAY
63255: ST_TO_ADDR
63256: GO 63323
63258: LD_INT 3
63260: DOUBLE
63261: EQUAL
63262: IFTRUE 63266
63264: GO 63322
63266: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
63267: LD_ADDR_VAR 0 9
63271: PUSH
63272: LD_VAR 0 23
63276: PUSH
63277: LD_VAR 0 24
63281: PUSH
63282: LD_VAR 0 25
63286: PUSH
63287: LD_VAR 0 26
63291: PUSH
63292: LD_VAR 0 27
63296: PUSH
63297: LD_VAR 0 28
63301: PUSH
63302: EMPTY
63303: LIST
63304: LIST
63305: LIST
63306: LIST
63307: LIST
63308: LIST
63309: PUSH
63310: LD_VAR 0 4
63314: PUSH
63315: LD_INT 1
63317: PLUS
63318: ARRAY
63319: ST_TO_ADDR
63320: GO 63323
63322: POP
63323: GO 63878
63325: LD_INT 2
63327: DOUBLE
63328: EQUAL
63329: IFTRUE 63339
63331: LD_INT 3
63333: DOUBLE
63334: EQUAL
63335: IFTRUE 63339
63337: GO 63395
63339: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
63340: LD_ADDR_VAR 0 9
63344: PUSH
63345: LD_VAR 0 29
63349: PUSH
63350: LD_VAR 0 30
63354: PUSH
63355: LD_VAR 0 31
63359: PUSH
63360: LD_VAR 0 32
63364: PUSH
63365: LD_VAR 0 33
63369: PUSH
63370: LD_VAR 0 34
63374: PUSH
63375: EMPTY
63376: LIST
63377: LIST
63378: LIST
63379: LIST
63380: LIST
63381: LIST
63382: PUSH
63383: LD_VAR 0 4
63387: PUSH
63388: LD_INT 1
63390: PLUS
63391: ARRAY
63392: ST_TO_ADDR
63393: GO 63878
63395: LD_INT 16
63397: DOUBLE
63398: EQUAL
63399: IFTRUE 63457
63401: LD_INT 17
63403: DOUBLE
63404: EQUAL
63405: IFTRUE 63457
63407: LD_INT 18
63409: DOUBLE
63410: EQUAL
63411: IFTRUE 63457
63413: LD_INT 19
63415: DOUBLE
63416: EQUAL
63417: IFTRUE 63457
63419: LD_INT 22
63421: DOUBLE
63422: EQUAL
63423: IFTRUE 63457
63425: LD_INT 20
63427: DOUBLE
63428: EQUAL
63429: IFTRUE 63457
63431: LD_INT 21
63433: DOUBLE
63434: EQUAL
63435: IFTRUE 63457
63437: LD_INT 23
63439: DOUBLE
63440: EQUAL
63441: IFTRUE 63457
63443: LD_INT 24
63445: DOUBLE
63446: EQUAL
63447: IFTRUE 63457
63449: LD_INT 25
63451: DOUBLE
63452: EQUAL
63453: IFTRUE 63457
63455: GO 63513
63457: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
63458: LD_ADDR_VAR 0 9
63462: PUSH
63463: LD_VAR 0 35
63467: PUSH
63468: LD_VAR 0 36
63472: PUSH
63473: LD_VAR 0 37
63477: PUSH
63478: LD_VAR 0 38
63482: PUSH
63483: LD_VAR 0 39
63487: PUSH
63488: LD_VAR 0 40
63492: PUSH
63493: EMPTY
63494: LIST
63495: LIST
63496: LIST
63497: LIST
63498: LIST
63499: LIST
63500: PUSH
63501: LD_VAR 0 4
63505: PUSH
63506: LD_INT 1
63508: PLUS
63509: ARRAY
63510: ST_TO_ADDR
63511: GO 63878
63513: LD_INT 6
63515: DOUBLE
63516: EQUAL
63517: IFTRUE 63569
63519: LD_INT 7
63521: DOUBLE
63522: EQUAL
63523: IFTRUE 63569
63525: LD_INT 8
63527: DOUBLE
63528: EQUAL
63529: IFTRUE 63569
63531: LD_INT 13
63533: DOUBLE
63534: EQUAL
63535: IFTRUE 63569
63537: LD_INT 12
63539: DOUBLE
63540: EQUAL
63541: IFTRUE 63569
63543: LD_INT 15
63545: DOUBLE
63546: EQUAL
63547: IFTRUE 63569
63549: LD_INT 11
63551: DOUBLE
63552: EQUAL
63553: IFTRUE 63569
63555: LD_INT 14
63557: DOUBLE
63558: EQUAL
63559: IFTRUE 63569
63561: LD_INT 10
63563: DOUBLE
63564: EQUAL
63565: IFTRUE 63569
63567: GO 63625
63569: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
63570: LD_ADDR_VAR 0 9
63574: PUSH
63575: LD_VAR 0 41
63579: PUSH
63580: LD_VAR 0 42
63584: PUSH
63585: LD_VAR 0 43
63589: PUSH
63590: LD_VAR 0 44
63594: PUSH
63595: LD_VAR 0 45
63599: PUSH
63600: LD_VAR 0 46
63604: PUSH
63605: EMPTY
63606: LIST
63607: LIST
63608: LIST
63609: LIST
63610: LIST
63611: LIST
63612: PUSH
63613: LD_VAR 0 4
63617: PUSH
63618: LD_INT 1
63620: PLUS
63621: ARRAY
63622: ST_TO_ADDR
63623: GO 63878
63625: LD_INT 36
63627: DOUBLE
63628: EQUAL
63629: IFTRUE 63633
63631: GO 63689
63633: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
63634: LD_ADDR_VAR 0 9
63638: PUSH
63639: LD_VAR 0 47
63643: PUSH
63644: LD_VAR 0 48
63648: PUSH
63649: LD_VAR 0 49
63653: PUSH
63654: LD_VAR 0 50
63658: PUSH
63659: LD_VAR 0 51
63663: PUSH
63664: LD_VAR 0 52
63668: PUSH
63669: EMPTY
63670: LIST
63671: LIST
63672: LIST
63673: LIST
63674: LIST
63675: LIST
63676: PUSH
63677: LD_VAR 0 4
63681: PUSH
63682: LD_INT 1
63684: PLUS
63685: ARRAY
63686: ST_TO_ADDR
63687: GO 63878
63689: LD_INT 4
63691: DOUBLE
63692: EQUAL
63693: IFTRUE 63715
63695: LD_INT 5
63697: DOUBLE
63698: EQUAL
63699: IFTRUE 63715
63701: LD_INT 34
63703: DOUBLE
63704: EQUAL
63705: IFTRUE 63715
63707: LD_INT 37
63709: DOUBLE
63710: EQUAL
63711: IFTRUE 63715
63713: GO 63771
63715: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
63716: LD_ADDR_VAR 0 9
63720: PUSH
63721: LD_VAR 0 53
63725: PUSH
63726: LD_VAR 0 54
63730: PUSH
63731: LD_VAR 0 55
63735: PUSH
63736: LD_VAR 0 56
63740: PUSH
63741: LD_VAR 0 57
63745: PUSH
63746: LD_VAR 0 58
63750: PUSH
63751: EMPTY
63752: LIST
63753: LIST
63754: LIST
63755: LIST
63756: LIST
63757: LIST
63758: PUSH
63759: LD_VAR 0 4
63763: PUSH
63764: LD_INT 1
63766: PLUS
63767: ARRAY
63768: ST_TO_ADDR
63769: GO 63878
63771: LD_INT 31
63773: DOUBLE
63774: EQUAL
63775: IFTRUE 63821
63777: LD_INT 32
63779: DOUBLE
63780: EQUAL
63781: IFTRUE 63821
63783: LD_INT 33
63785: DOUBLE
63786: EQUAL
63787: IFTRUE 63821
63789: LD_INT 27
63791: DOUBLE
63792: EQUAL
63793: IFTRUE 63821
63795: LD_INT 26
63797: DOUBLE
63798: EQUAL
63799: IFTRUE 63821
63801: LD_INT 28
63803: DOUBLE
63804: EQUAL
63805: IFTRUE 63821
63807: LD_INT 29
63809: DOUBLE
63810: EQUAL
63811: IFTRUE 63821
63813: LD_INT 30
63815: DOUBLE
63816: EQUAL
63817: IFTRUE 63821
63819: GO 63877
63821: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
63822: LD_ADDR_VAR 0 9
63826: PUSH
63827: LD_VAR 0 59
63831: PUSH
63832: LD_VAR 0 60
63836: PUSH
63837: LD_VAR 0 61
63841: PUSH
63842: LD_VAR 0 62
63846: PUSH
63847: LD_VAR 0 63
63851: PUSH
63852: LD_VAR 0 64
63856: PUSH
63857: EMPTY
63858: LIST
63859: LIST
63860: LIST
63861: LIST
63862: LIST
63863: LIST
63864: PUSH
63865: LD_VAR 0 4
63869: PUSH
63870: LD_INT 1
63872: PLUS
63873: ARRAY
63874: ST_TO_ADDR
63875: GO 63878
63877: POP
// temp_list2 = [ ] ;
63878: LD_ADDR_VAR 0 10
63882: PUSH
63883: EMPTY
63884: ST_TO_ADDR
// for i in temp_list do
63885: LD_ADDR_VAR 0 8
63889: PUSH
63890: LD_VAR 0 9
63894: PUSH
63895: FOR_IN
63896: IFFALSE 63948
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
63898: LD_ADDR_VAR 0 10
63902: PUSH
63903: LD_VAR 0 10
63907: PUSH
63908: LD_VAR 0 8
63912: PUSH
63913: LD_INT 1
63915: ARRAY
63916: PUSH
63917: LD_VAR 0 2
63921: PLUS
63922: PUSH
63923: LD_VAR 0 8
63927: PUSH
63928: LD_INT 2
63930: ARRAY
63931: PUSH
63932: LD_VAR 0 3
63936: PLUS
63937: PUSH
63938: EMPTY
63939: LIST
63940: LIST
63941: PUSH
63942: EMPTY
63943: LIST
63944: ADD
63945: ST_TO_ADDR
63946: GO 63895
63948: POP
63949: POP
// result = temp_list2 ;
63950: LD_ADDR_VAR 0 7
63954: PUSH
63955: LD_VAR 0 10
63959: ST_TO_ADDR
// end ;
63960: LD_VAR 0 7
63964: RET
// export function EnemyInRange ( unit , dist ) ; begin
63965: LD_INT 0
63967: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
63968: LD_ADDR_VAR 0 3
63972: PUSH
63973: LD_VAR 0 1
63977: PPUSH
63978: CALL_OW 255
63982: PPUSH
63983: LD_VAR 0 1
63987: PPUSH
63988: CALL_OW 250
63992: PPUSH
63993: LD_VAR 0 1
63997: PPUSH
63998: CALL_OW 251
64002: PPUSH
64003: LD_VAR 0 2
64007: PPUSH
64008: CALL 37361 0 4
64012: PUSH
64013: LD_INT 4
64015: ARRAY
64016: ST_TO_ADDR
// end ;
64017: LD_VAR 0 3
64021: RET
// export function PlayerSeeMe ( unit ) ; begin
64022: LD_INT 0
64024: PPUSH
// result := See ( your_side , unit ) ;
64025: LD_ADDR_VAR 0 2
64029: PUSH
64030: LD_OWVAR 2
64034: PPUSH
64035: LD_VAR 0 1
64039: PPUSH
64040: CALL_OW 292
64044: ST_TO_ADDR
// end ;
64045: LD_VAR 0 2
64049: RET
// export function ReverseDir ( unit ) ; begin
64050: LD_INT 0
64052: PPUSH
// if not unit then
64053: LD_VAR 0 1
64057: NOT
64058: IFFALSE 64062
// exit ;
64060: GO 64085
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
64062: LD_ADDR_VAR 0 2
64066: PUSH
64067: LD_VAR 0 1
64071: PPUSH
64072: CALL_OW 254
64076: PUSH
64077: LD_INT 3
64079: PLUS
64080: PUSH
64081: LD_INT 6
64083: MOD
64084: ST_TO_ADDR
// end ;
64085: LD_VAR 0 2
64089: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
64090: LD_INT 0
64092: PPUSH
64093: PPUSH
64094: PPUSH
64095: PPUSH
64096: PPUSH
// if not hexes then
64097: LD_VAR 0 2
64101: NOT
64102: IFFALSE 64106
// exit ;
64104: GO 64254
// dist := 9999 ;
64106: LD_ADDR_VAR 0 5
64110: PUSH
64111: LD_INT 9999
64113: ST_TO_ADDR
// for i = 1 to hexes do
64114: LD_ADDR_VAR 0 4
64118: PUSH
64119: DOUBLE
64120: LD_INT 1
64122: DEC
64123: ST_TO_ADDR
64124: LD_VAR 0 2
64128: PUSH
64129: FOR_TO
64130: IFFALSE 64242
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
64132: LD_VAR 0 1
64136: PPUSH
64137: LD_VAR 0 2
64141: PUSH
64142: LD_VAR 0 4
64146: ARRAY
64147: PUSH
64148: LD_INT 1
64150: ARRAY
64151: PPUSH
64152: LD_VAR 0 2
64156: PUSH
64157: LD_VAR 0 4
64161: ARRAY
64162: PUSH
64163: LD_INT 2
64165: ARRAY
64166: PPUSH
64167: CALL_OW 297
64171: PUSH
64172: LD_VAR 0 5
64176: LESS
64177: IFFALSE 64240
// begin hex := hexes [ i ] ;
64179: LD_ADDR_VAR 0 7
64183: PUSH
64184: LD_VAR 0 2
64188: PUSH
64189: LD_VAR 0 4
64193: ARRAY
64194: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
64195: LD_ADDR_VAR 0 5
64199: PUSH
64200: LD_VAR 0 1
64204: PPUSH
64205: LD_VAR 0 2
64209: PUSH
64210: LD_VAR 0 4
64214: ARRAY
64215: PUSH
64216: LD_INT 1
64218: ARRAY
64219: PPUSH
64220: LD_VAR 0 2
64224: PUSH
64225: LD_VAR 0 4
64229: ARRAY
64230: PUSH
64231: LD_INT 2
64233: ARRAY
64234: PPUSH
64235: CALL_OW 297
64239: ST_TO_ADDR
// end ; end ;
64240: GO 64129
64242: POP
64243: POP
// result := hex ;
64244: LD_ADDR_VAR 0 3
64248: PUSH
64249: LD_VAR 0 7
64253: ST_TO_ADDR
// end ;
64254: LD_VAR 0 3
64258: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
64259: LD_INT 0
64261: PPUSH
64262: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
64263: LD_VAR 0 1
64267: NOT
64268: PUSH
64269: LD_VAR 0 1
64273: PUSH
64274: LD_INT 21
64276: PUSH
64277: LD_INT 2
64279: PUSH
64280: EMPTY
64281: LIST
64282: LIST
64283: PUSH
64284: LD_INT 23
64286: PUSH
64287: LD_INT 2
64289: PUSH
64290: EMPTY
64291: LIST
64292: LIST
64293: PUSH
64294: EMPTY
64295: LIST
64296: LIST
64297: PPUSH
64298: CALL_OW 69
64302: IN
64303: NOT
64304: OR
64305: IFFALSE 64309
// exit ;
64307: GO 64356
// for i = 1 to 3 do
64309: LD_ADDR_VAR 0 3
64313: PUSH
64314: DOUBLE
64315: LD_INT 1
64317: DEC
64318: ST_TO_ADDR
64319: LD_INT 3
64321: PUSH
64322: FOR_TO
64323: IFFALSE 64354
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
64325: LD_VAR 0 1
64329: PPUSH
64330: CALL_OW 250
64334: PPUSH
64335: LD_VAR 0 1
64339: PPUSH
64340: CALL_OW 251
64344: PPUSH
64345: LD_INT 1
64347: PPUSH
64348: CALL_OW 453
64352: GO 64322
64354: POP
64355: POP
// end ;
64356: LD_VAR 0 2
64360: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
64361: LD_INT 0
64363: PPUSH
64364: PPUSH
64365: PPUSH
64366: PPUSH
64367: PPUSH
64368: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
64369: LD_VAR 0 1
64373: NOT
64374: PUSH
64375: LD_VAR 0 2
64379: NOT
64380: OR
64381: PUSH
64382: LD_VAR 0 1
64386: PPUSH
64387: CALL_OW 314
64391: OR
64392: IFFALSE 64396
// exit ;
64394: GO 64837
// x := GetX ( enemy_unit ) ;
64396: LD_ADDR_VAR 0 7
64400: PUSH
64401: LD_VAR 0 2
64405: PPUSH
64406: CALL_OW 250
64410: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
64411: LD_ADDR_VAR 0 8
64415: PUSH
64416: LD_VAR 0 2
64420: PPUSH
64421: CALL_OW 251
64425: ST_TO_ADDR
// if not x or not y then
64426: LD_VAR 0 7
64430: NOT
64431: PUSH
64432: LD_VAR 0 8
64436: NOT
64437: OR
64438: IFFALSE 64442
// exit ;
64440: GO 64837
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
64442: LD_ADDR_VAR 0 6
64446: PUSH
64447: LD_VAR 0 7
64451: PPUSH
64452: LD_INT 0
64454: PPUSH
64455: LD_INT 4
64457: PPUSH
64458: CALL_OW 272
64462: PUSH
64463: LD_VAR 0 8
64467: PPUSH
64468: LD_INT 0
64470: PPUSH
64471: LD_INT 4
64473: PPUSH
64474: CALL_OW 273
64478: PUSH
64479: EMPTY
64480: LIST
64481: LIST
64482: PUSH
64483: LD_VAR 0 7
64487: PPUSH
64488: LD_INT 1
64490: PPUSH
64491: LD_INT 4
64493: PPUSH
64494: CALL_OW 272
64498: PUSH
64499: LD_VAR 0 8
64503: PPUSH
64504: LD_INT 1
64506: PPUSH
64507: LD_INT 4
64509: PPUSH
64510: CALL_OW 273
64514: PUSH
64515: EMPTY
64516: LIST
64517: LIST
64518: PUSH
64519: LD_VAR 0 7
64523: PPUSH
64524: LD_INT 2
64526: PPUSH
64527: LD_INT 4
64529: PPUSH
64530: CALL_OW 272
64534: PUSH
64535: LD_VAR 0 8
64539: PPUSH
64540: LD_INT 2
64542: PPUSH
64543: LD_INT 4
64545: PPUSH
64546: CALL_OW 273
64550: PUSH
64551: EMPTY
64552: LIST
64553: LIST
64554: PUSH
64555: LD_VAR 0 7
64559: PPUSH
64560: LD_INT 3
64562: PPUSH
64563: LD_INT 4
64565: PPUSH
64566: CALL_OW 272
64570: PUSH
64571: LD_VAR 0 8
64575: PPUSH
64576: LD_INT 3
64578: PPUSH
64579: LD_INT 4
64581: PPUSH
64582: CALL_OW 273
64586: PUSH
64587: EMPTY
64588: LIST
64589: LIST
64590: PUSH
64591: LD_VAR 0 7
64595: PPUSH
64596: LD_INT 4
64598: PPUSH
64599: LD_INT 4
64601: PPUSH
64602: CALL_OW 272
64606: PUSH
64607: LD_VAR 0 8
64611: PPUSH
64612: LD_INT 4
64614: PPUSH
64615: LD_INT 4
64617: PPUSH
64618: CALL_OW 273
64622: PUSH
64623: EMPTY
64624: LIST
64625: LIST
64626: PUSH
64627: LD_VAR 0 7
64631: PPUSH
64632: LD_INT 5
64634: PPUSH
64635: LD_INT 4
64637: PPUSH
64638: CALL_OW 272
64642: PUSH
64643: LD_VAR 0 8
64647: PPUSH
64648: LD_INT 5
64650: PPUSH
64651: LD_INT 4
64653: PPUSH
64654: CALL_OW 273
64658: PUSH
64659: EMPTY
64660: LIST
64661: LIST
64662: PUSH
64663: EMPTY
64664: LIST
64665: LIST
64666: LIST
64667: LIST
64668: LIST
64669: LIST
64670: ST_TO_ADDR
// for i = tmp downto 1 do
64671: LD_ADDR_VAR 0 4
64675: PUSH
64676: DOUBLE
64677: LD_VAR 0 6
64681: INC
64682: ST_TO_ADDR
64683: LD_INT 1
64685: PUSH
64686: FOR_DOWNTO
64687: IFFALSE 64788
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
64689: LD_VAR 0 6
64693: PUSH
64694: LD_VAR 0 4
64698: ARRAY
64699: PUSH
64700: LD_INT 1
64702: ARRAY
64703: PPUSH
64704: LD_VAR 0 6
64708: PUSH
64709: LD_VAR 0 4
64713: ARRAY
64714: PUSH
64715: LD_INT 2
64717: ARRAY
64718: PPUSH
64719: CALL_OW 488
64723: NOT
64724: PUSH
64725: LD_VAR 0 6
64729: PUSH
64730: LD_VAR 0 4
64734: ARRAY
64735: PUSH
64736: LD_INT 1
64738: ARRAY
64739: PPUSH
64740: LD_VAR 0 6
64744: PUSH
64745: LD_VAR 0 4
64749: ARRAY
64750: PUSH
64751: LD_INT 2
64753: ARRAY
64754: PPUSH
64755: CALL_OW 428
64759: PUSH
64760: LD_INT 0
64762: NONEQUAL
64763: OR
64764: IFFALSE 64786
// tmp := Delete ( tmp , i ) ;
64766: LD_ADDR_VAR 0 6
64770: PUSH
64771: LD_VAR 0 6
64775: PPUSH
64776: LD_VAR 0 4
64780: PPUSH
64781: CALL_OW 3
64785: ST_TO_ADDR
64786: GO 64686
64788: POP
64789: POP
// j := GetClosestHex ( unit , tmp ) ;
64790: LD_ADDR_VAR 0 5
64794: PUSH
64795: LD_VAR 0 1
64799: PPUSH
64800: LD_VAR 0 6
64804: PPUSH
64805: CALL 64090 0 2
64809: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
64810: LD_VAR 0 1
64814: PPUSH
64815: LD_VAR 0 5
64819: PUSH
64820: LD_INT 1
64822: ARRAY
64823: PPUSH
64824: LD_VAR 0 5
64828: PUSH
64829: LD_INT 2
64831: ARRAY
64832: PPUSH
64833: CALL_OW 111
// end ;
64837: LD_VAR 0 3
64841: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
64842: LD_INT 0
64844: PPUSH
64845: PPUSH
64846: PPUSH
// uc_side = 0 ;
64847: LD_ADDR_OWVAR 20
64851: PUSH
64852: LD_INT 0
64854: ST_TO_ADDR
// uc_nation = 0 ;
64855: LD_ADDR_OWVAR 21
64859: PUSH
64860: LD_INT 0
64862: ST_TO_ADDR
// InitHc_All ( ) ;
64863: CALL_OW 584
// InitVc ;
64867: CALL_OW 20
// if mastodonts then
64871: LD_VAR 0 6
64875: IFFALSE 64942
// for i = 1 to mastodonts do
64877: LD_ADDR_VAR 0 11
64881: PUSH
64882: DOUBLE
64883: LD_INT 1
64885: DEC
64886: ST_TO_ADDR
64887: LD_VAR 0 6
64891: PUSH
64892: FOR_TO
64893: IFFALSE 64940
// begin vc_chassis := 31 ;
64895: LD_ADDR_OWVAR 37
64899: PUSH
64900: LD_INT 31
64902: ST_TO_ADDR
// vc_control := control_rider ;
64903: LD_ADDR_OWVAR 38
64907: PUSH
64908: LD_INT 4
64910: ST_TO_ADDR
// animal := CreateVehicle ;
64911: LD_ADDR_VAR 0 12
64915: PUSH
64916: CALL_OW 45
64920: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64921: LD_VAR 0 12
64925: PPUSH
64926: LD_VAR 0 8
64930: PPUSH
64931: LD_INT 0
64933: PPUSH
64934: CALL 67077 0 3
// end ;
64938: GO 64892
64940: POP
64941: POP
// if horses then
64942: LD_VAR 0 5
64946: IFFALSE 65013
// for i = 1 to horses do
64948: LD_ADDR_VAR 0 11
64952: PUSH
64953: DOUBLE
64954: LD_INT 1
64956: DEC
64957: ST_TO_ADDR
64958: LD_VAR 0 5
64962: PUSH
64963: FOR_TO
64964: IFFALSE 65011
// begin hc_class := 21 ;
64966: LD_ADDR_OWVAR 28
64970: PUSH
64971: LD_INT 21
64973: ST_TO_ADDR
// hc_gallery :=  ;
64974: LD_ADDR_OWVAR 33
64978: PUSH
64979: LD_STRING 
64981: ST_TO_ADDR
// animal := CreateHuman ;
64982: LD_ADDR_VAR 0 12
64986: PUSH
64987: CALL_OW 44
64991: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64992: LD_VAR 0 12
64996: PPUSH
64997: LD_VAR 0 8
65001: PPUSH
65002: LD_INT 0
65004: PPUSH
65005: CALL 67077 0 3
// end ;
65009: GO 64963
65011: POP
65012: POP
// if birds then
65013: LD_VAR 0 1
65017: IFFALSE 65084
// for i = 1 to birds do
65019: LD_ADDR_VAR 0 11
65023: PUSH
65024: DOUBLE
65025: LD_INT 1
65027: DEC
65028: ST_TO_ADDR
65029: LD_VAR 0 1
65033: PUSH
65034: FOR_TO
65035: IFFALSE 65082
// begin hc_class = 18 ;
65037: LD_ADDR_OWVAR 28
65041: PUSH
65042: LD_INT 18
65044: ST_TO_ADDR
// hc_gallery =  ;
65045: LD_ADDR_OWVAR 33
65049: PUSH
65050: LD_STRING 
65052: ST_TO_ADDR
// animal := CreateHuman ;
65053: LD_ADDR_VAR 0 12
65057: PUSH
65058: CALL_OW 44
65062: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65063: LD_VAR 0 12
65067: PPUSH
65068: LD_VAR 0 8
65072: PPUSH
65073: LD_INT 0
65075: PPUSH
65076: CALL 67077 0 3
// end ;
65080: GO 65034
65082: POP
65083: POP
// if tigers then
65084: LD_VAR 0 2
65088: IFFALSE 65172
// for i = 1 to tigers do
65090: LD_ADDR_VAR 0 11
65094: PUSH
65095: DOUBLE
65096: LD_INT 1
65098: DEC
65099: ST_TO_ADDR
65100: LD_VAR 0 2
65104: PUSH
65105: FOR_TO
65106: IFFALSE 65170
// begin hc_class = class_tiger ;
65108: LD_ADDR_OWVAR 28
65112: PUSH
65113: LD_INT 14
65115: ST_TO_ADDR
// hc_gallery =  ;
65116: LD_ADDR_OWVAR 33
65120: PUSH
65121: LD_STRING 
65123: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
65124: LD_ADDR_OWVAR 35
65128: PUSH
65129: LD_INT 7
65131: NEG
65132: PPUSH
65133: LD_INT 7
65135: PPUSH
65136: CALL_OW 12
65140: ST_TO_ADDR
// animal := CreateHuman ;
65141: LD_ADDR_VAR 0 12
65145: PUSH
65146: CALL_OW 44
65150: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65151: LD_VAR 0 12
65155: PPUSH
65156: LD_VAR 0 8
65160: PPUSH
65161: LD_INT 0
65163: PPUSH
65164: CALL 67077 0 3
// end ;
65168: GO 65105
65170: POP
65171: POP
// if apemans then
65172: LD_VAR 0 3
65176: IFFALSE 65299
// for i = 1 to apemans do
65178: LD_ADDR_VAR 0 11
65182: PUSH
65183: DOUBLE
65184: LD_INT 1
65186: DEC
65187: ST_TO_ADDR
65188: LD_VAR 0 3
65192: PUSH
65193: FOR_TO
65194: IFFALSE 65297
// begin hc_class = class_apeman ;
65196: LD_ADDR_OWVAR 28
65200: PUSH
65201: LD_INT 12
65203: ST_TO_ADDR
// hc_gallery =  ;
65204: LD_ADDR_OWVAR 33
65208: PUSH
65209: LD_STRING 
65211: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
65212: LD_ADDR_OWVAR 35
65216: PUSH
65217: LD_INT 2
65219: NEG
65220: PPUSH
65221: LD_INT 2
65223: PPUSH
65224: CALL_OW 12
65228: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
65229: LD_ADDR_OWVAR 31
65233: PUSH
65234: LD_INT 1
65236: PPUSH
65237: LD_INT 3
65239: PPUSH
65240: CALL_OW 12
65244: PUSH
65245: LD_INT 1
65247: PPUSH
65248: LD_INT 3
65250: PPUSH
65251: CALL_OW 12
65255: PUSH
65256: LD_INT 0
65258: PUSH
65259: LD_INT 0
65261: PUSH
65262: EMPTY
65263: LIST
65264: LIST
65265: LIST
65266: LIST
65267: ST_TO_ADDR
// animal := CreateHuman ;
65268: LD_ADDR_VAR 0 12
65272: PUSH
65273: CALL_OW 44
65277: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65278: LD_VAR 0 12
65282: PPUSH
65283: LD_VAR 0 8
65287: PPUSH
65288: LD_INT 0
65290: PPUSH
65291: CALL 67077 0 3
// end ;
65295: GO 65193
65297: POP
65298: POP
// if enchidnas then
65299: LD_VAR 0 4
65303: IFFALSE 65370
// for i = 1 to enchidnas do
65305: LD_ADDR_VAR 0 11
65309: PUSH
65310: DOUBLE
65311: LD_INT 1
65313: DEC
65314: ST_TO_ADDR
65315: LD_VAR 0 4
65319: PUSH
65320: FOR_TO
65321: IFFALSE 65368
// begin hc_class = 13 ;
65323: LD_ADDR_OWVAR 28
65327: PUSH
65328: LD_INT 13
65330: ST_TO_ADDR
// hc_gallery =  ;
65331: LD_ADDR_OWVAR 33
65335: PUSH
65336: LD_STRING 
65338: ST_TO_ADDR
// animal := CreateHuman ;
65339: LD_ADDR_VAR 0 12
65343: PUSH
65344: CALL_OW 44
65348: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65349: LD_VAR 0 12
65353: PPUSH
65354: LD_VAR 0 8
65358: PPUSH
65359: LD_INT 0
65361: PPUSH
65362: CALL 67077 0 3
// end ;
65366: GO 65320
65368: POP
65369: POP
// if fishes then
65370: LD_VAR 0 7
65374: IFFALSE 65441
// for i = 1 to fishes do
65376: LD_ADDR_VAR 0 11
65380: PUSH
65381: DOUBLE
65382: LD_INT 1
65384: DEC
65385: ST_TO_ADDR
65386: LD_VAR 0 7
65390: PUSH
65391: FOR_TO
65392: IFFALSE 65439
// begin hc_class = 20 ;
65394: LD_ADDR_OWVAR 28
65398: PUSH
65399: LD_INT 20
65401: ST_TO_ADDR
// hc_gallery =  ;
65402: LD_ADDR_OWVAR 33
65406: PUSH
65407: LD_STRING 
65409: ST_TO_ADDR
// animal := CreateHuman ;
65410: LD_ADDR_VAR 0 12
65414: PUSH
65415: CALL_OW 44
65419: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
65420: LD_VAR 0 12
65424: PPUSH
65425: LD_VAR 0 9
65429: PPUSH
65430: LD_INT 0
65432: PPUSH
65433: CALL 67077 0 3
// end ;
65437: GO 65391
65439: POP
65440: POP
// end ;
65441: LD_VAR 0 10
65445: RET
// export function WantHeal ( sci , unit ) ; begin
65446: LD_INT 0
65448: PPUSH
// if GetTaskList ( sci ) > 0 then
65449: LD_VAR 0 1
65453: PPUSH
65454: CALL_OW 437
65458: PUSH
65459: LD_INT 0
65461: GREATER
65462: IFFALSE 65532
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
65464: LD_VAR 0 1
65468: PPUSH
65469: CALL_OW 437
65473: PUSH
65474: LD_INT 1
65476: ARRAY
65477: PUSH
65478: LD_INT 1
65480: ARRAY
65481: PUSH
65482: LD_STRING l
65484: EQUAL
65485: PUSH
65486: LD_VAR 0 1
65490: PPUSH
65491: CALL_OW 437
65495: PUSH
65496: LD_INT 1
65498: ARRAY
65499: PUSH
65500: LD_INT 4
65502: ARRAY
65503: PUSH
65504: LD_VAR 0 2
65508: EQUAL
65509: AND
65510: IFFALSE 65522
// result := true else
65512: LD_ADDR_VAR 0 3
65516: PUSH
65517: LD_INT 1
65519: ST_TO_ADDR
65520: GO 65530
// result := false ;
65522: LD_ADDR_VAR 0 3
65526: PUSH
65527: LD_INT 0
65529: ST_TO_ADDR
// end else
65530: GO 65540
// result := false ;
65532: LD_ADDR_VAR 0 3
65536: PUSH
65537: LD_INT 0
65539: ST_TO_ADDR
// end ;
65540: LD_VAR 0 3
65544: RET
// export function HealTarget ( sci ) ; begin
65545: LD_INT 0
65547: PPUSH
// if not sci then
65548: LD_VAR 0 1
65552: NOT
65553: IFFALSE 65557
// exit ;
65555: GO 65622
// result := 0 ;
65557: LD_ADDR_VAR 0 2
65561: PUSH
65562: LD_INT 0
65564: ST_TO_ADDR
// if GetTaskList ( sci ) then
65565: LD_VAR 0 1
65569: PPUSH
65570: CALL_OW 437
65574: IFFALSE 65622
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
65576: LD_VAR 0 1
65580: PPUSH
65581: CALL_OW 437
65585: PUSH
65586: LD_INT 1
65588: ARRAY
65589: PUSH
65590: LD_INT 1
65592: ARRAY
65593: PUSH
65594: LD_STRING l
65596: EQUAL
65597: IFFALSE 65622
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
65599: LD_ADDR_VAR 0 2
65603: PUSH
65604: LD_VAR 0 1
65608: PPUSH
65609: CALL_OW 437
65613: PUSH
65614: LD_INT 1
65616: ARRAY
65617: PUSH
65618: LD_INT 4
65620: ARRAY
65621: ST_TO_ADDR
// end ;
65622: LD_VAR 0 2
65626: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
65627: LD_INT 0
65629: PPUSH
65630: PPUSH
65631: PPUSH
65632: PPUSH
// if not base_units then
65633: LD_VAR 0 1
65637: NOT
65638: IFFALSE 65642
// exit ;
65640: GO 65729
// result := false ;
65642: LD_ADDR_VAR 0 2
65646: PUSH
65647: LD_INT 0
65649: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
65650: LD_ADDR_VAR 0 5
65654: PUSH
65655: LD_VAR 0 1
65659: PPUSH
65660: LD_INT 21
65662: PUSH
65663: LD_INT 3
65665: PUSH
65666: EMPTY
65667: LIST
65668: LIST
65669: PPUSH
65670: CALL_OW 72
65674: ST_TO_ADDR
// if not tmp then
65675: LD_VAR 0 5
65679: NOT
65680: IFFALSE 65684
// exit ;
65682: GO 65729
// for i in tmp do
65684: LD_ADDR_VAR 0 3
65688: PUSH
65689: LD_VAR 0 5
65693: PUSH
65694: FOR_IN
65695: IFFALSE 65727
// begin result := EnemyInRange ( i , 22 ) ;
65697: LD_ADDR_VAR 0 2
65701: PUSH
65702: LD_VAR 0 3
65706: PPUSH
65707: LD_INT 22
65709: PPUSH
65710: CALL 63965 0 2
65714: ST_TO_ADDR
// if result then
65715: LD_VAR 0 2
65719: IFFALSE 65725
// exit ;
65721: POP
65722: POP
65723: GO 65729
// end ;
65725: GO 65694
65727: POP
65728: POP
// end ;
65729: LD_VAR 0 2
65733: RET
// export function FilterByTag ( units , tag ) ; begin
65734: LD_INT 0
65736: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
65737: LD_ADDR_VAR 0 3
65741: PUSH
65742: LD_VAR 0 1
65746: PPUSH
65747: LD_INT 120
65749: PUSH
65750: LD_VAR 0 2
65754: PUSH
65755: EMPTY
65756: LIST
65757: LIST
65758: PPUSH
65759: CALL_OW 72
65763: ST_TO_ADDR
// end ;
65764: LD_VAR 0 3
65768: RET
// export function IsDriver ( un ) ; begin
65769: LD_INT 0
65771: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
65772: LD_ADDR_VAR 0 2
65776: PUSH
65777: LD_VAR 0 1
65781: PUSH
65782: LD_INT 55
65784: PUSH
65785: EMPTY
65786: LIST
65787: PPUSH
65788: CALL_OW 69
65792: IN
65793: ST_TO_ADDR
// end ;
65794: LD_VAR 0 2
65798: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
65799: LD_INT 0
65801: PPUSH
65802: PPUSH
// list := [ ] ;
65803: LD_ADDR_VAR 0 5
65807: PUSH
65808: EMPTY
65809: ST_TO_ADDR
// case d of 0 :
65810: LD_VAR 0 3
65814: PUSH
65815: LD_INT 0
65817: DOUBLE
65818: EQUAL
65819: IFTRUE 65823
65821: GO 65956
65823: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
65824: LD_ADDR_VAR 0 5
65828: PUSH
65829: LD_VAR 0 1
65833: PUSH
65834: LD_INT 4
65836: MINUS
65837: PUSH
65838: LD_VAR 0 2
65842: PUSH
65843: LD_INT 4
65845: MINUS
65846: PUSH
65847: LD_INT 2
65849: PUSH
65850: EMPTY
65851: LIST
65852: LIST
65853: LIST
65854: PUSH
65855: LD_VAR 0 1
65859: PUSH
65860: LD_INT 3
65862: MINUS
65863: PUSH
65864: LD_VAR 0 2
65868: PUSH
65869: LD_INT 1
65871: PUSH
65872: EMPTY
65873: LIST
65874: LIST
65875: LIST
65876: PUSH
65877: LD_VAR 0 1
65881: PUSH
65882: LD_INT 4
65884: PLUS
65885: PUSH
65886: LD_VAR 0 2
65890: PUSH
65891: LD_INT 4
65893: PUSH
65894: EMPTY
65895: LIST
65896: LIST
65897: LIST
65898: PUSH
65899: LD_VAR 0 1
65903: PUSH
65904: LD_INT 3
65906: PLUS
65907: PUSH
65908: LD_VAR 0 2
65912: PUSH
65913: LD_INT 3
65915: PLUS
65916: PUSH
65917: LD_INT 5
65919: PUSH
65920: EMPTY
65921: LIST
65922: LIST
65923: LIST
65924: PUSH
65925: LD_VAR 0 1
65929: PUSH
65930: LD_VAR 0 2
65934: PUSH
65935: LD_INT 4
65937: PLUS
65938: PUSH
65939: LD_INT 0
65941: PUSH
65942: EMPTY
65943: LIST
65944: LIST
65945: LIST
65946: PUSH
65947: EMPTY
65948: LIST
65949: LIST
65950: LIST
65951: LIST
65952: LIST
65953: ST_TO_ADDR
// end ; 1 :
65954: GO 66654
65956: LD_INT 1
65958: DOUBLE
65959: EQUAL
65960: IFTRUE 65964
65962: GO 66097
65964: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
65965: LD_ADDR_VAR 0 5
65969: PUSH
65970: LD_VAR 0 1
65974: PUSH
65975: LD_VAR 0 2
65979: PUSH
65980: LD_INT 4
65982: MINUS
65983: PUSH
65984: LD_INT 3
65986: PUSH
65987: EMPTY
65988: LIST
65989: LIST
65990: LIST
65991: PUSH
65992: LD_VAR 0 1
65996: PUSH
65997: LD_INT 3
65999: MINUS
66000: PUSH
66001: LD_VAR 0 2
66005: PUSH
66006: LD_INT 3
66008: MINUS
66009: PUSH
66010: LD_INT 2
66012: PUSH
66013: EMPTY
66014: LIST
66015: LIST
66016: LIST
66017: PUSH
66018: LD_VAR 0 1
66022: PUSH
66023: LD_INT 4
66025: MINUS
66026: PUSH
66027: LD_VAR 0 2
66031: PUSH
66032: LD_INT 1
66034: PUSH
66035: EMPTY
66036: LIST
66037: LIST
66038: LIST
66039: PUSH
66040: LD_VAR 0 1
66044: PUSH
66045: LD_VAR 0 2
66049: PUSH
66050: LD_INT 3
66052: PLUS
66053: PUSH
66054: LD_INT 0
66056: PUSH
66057: EMPTY
66058: LIST
66059: LIST
66060: LIST
66061: PUSH
66062: LD_VAR 0 1
66066: PUSH
66067: LD_INT 4
66069: PLUS
66070: PUSH
66071: LD_VAR 0 2
66075: PUSH
66076: LD_INT 4
66078: PLUS
66079: PUSH
66080: LD_INT 5
66082: PUSH
66083: EMPTY
66084: LIST
66085: LIST
66086: LIST
66087: PUSH
66088: EMPTY
66089: LIST
66090: LIST
66091: LIST
66092: LIST
66093: LIST
66094: ST_TO_ADDR
// end ; 2 :
66095: GO 66654
66097: LD_INT 2
66099: DOUBLE
66100: EQUAL
66101: IFTRUE 66105
66103: GO 66234
66105: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
66106: LD_ADDR_VAR 0 5
66110: PUSH
66111: LD_VAR 0 1
66115: PUSH
66116: LD_VAR 0 2
66120: PUSH
66121: LD_INT 3
66123: MINUS
66124: PUSH
66125: LD_INT 3
66127: PUSH
66128: EMPTY
66129: LIST
66130: LIST
66131: LIST
66132: PUSH
66133: LD_VAR 0 1
66137: PUSH
66138: LD_INT 4
66140: PLUS
66141: PUSH
66142: LD_VAR 0 2
66146: PUSH
66147: LD_INT 4
66149: PUSH
66150: EMPTY
66151: LIST
66152: LIST
66153: LIST
66154: PUSH
66155: LD_VAR 0 1
66159: PUSH
66160: LD_VAR 0 2
66164: PUSH
66165: LD_INT 4
66167: PLUS
66168: PUSH
66169: LD_INT 0
66171: PUSH
66172: EMPTY
66173: LIST
66174: LIST
66175: LIST
66176: PUSH
66177: LD_VAR 0 1
66181: PUSH
66182: LD_INT 3
66184: MINUS
66185: PUSH
66186: LD_VAR 0 2
66190: PUSH
66191: LD_INT 1
66193: PUSH
66194: EMPTY
66195: LIST
66196: LIST
66197: LIST
66198: PUSH
66199: LD_VAR 0 1
66203: PUSH
66204: LD_INT 4
66206: MINUS
66207: PUSH
66208: LD_VAR 0 2
66212: PUSH
66213: LD_INT 4
66215: MINUS
66216: PUSH
66217: LD_INT 2
66219: PUSH
66220: EMPTY
66221: LIST
66222: LIST
66223: LIST
66224: PUSH
66225: EMPTY
66226: LIST
66227: LIST
66228: LIST
66229: LIST
66230: LIST
66231: ST_TO_ADDR
// end ; 3 :
66232: GO 66654
66234: LD_INT 3
66236: DOUBLE
66237: EQUAL
66238: IFTRUE 66242
66240: GO 66375
66242: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
66243: LD_ADDR_VAR 0 5
66247: PUSH
66248: LD_VAR 0 1
66252: PUSH
66253: LD_INT 3
66255: PLUS
66256: PUSH
66257: LD_VAR 0 2
66261: PUSH
66262: LD_INT 4
66264: PUSH
66265: EMPTY
66266: LIST
66267: LIST
66268: LIST
66269: PUSH
66270: LD_VAR 0 1
66274: PUSH
66275: LD_INT 4
66277: PLUS
66278: PUSH
66279: LD_VAR 0 2
66283: PUSH
66284: LD_INT 4
66286: PLUS
66287: PUSH
66288: LD_INT 5
66290: PUSH
66291: EMPTY
66292: LIST
66293: LIST
66294: LIST
66295: PUSH
66296: LD_VAR 0 1
66300: PUSH
66301: LD_INT 4
66303: MINUS
66304: PUSH
66305: LD_VAR 0 2
66309: PUSH
66310: LD_INT 1
66312: PUSH
66313: EMPTY
66314: LIST
66315: LIST
66316: LIST
66317: PUSH
66318: LD_VAR 0 1
66322: PUSH
66323: LD_VAR 0 2
66327: PUSH
66328: LD_INT 4
66330: MINUS
66331: PUSH
66332: LD_INT 3
66334: PUSH
66335: EMPTY
66336: LIST
66337: LIST
66338: LIST
66339: PUSH
66340: LD_VAR 0 1
66344: PUSH
66345: LD_INT 3
66347: MINUS
66348: PUSH
66349: LD_VAR 0 2
66353: PUSH
66354: LD_INT 3
66356: MINUS
66357: PUSH
66358: LD_INT 2
66360: PUSH
66361: EMPTY
66362: LIST
66363: LIST
66364: LIST
66365: PUSH
66366: EMPTY
66367: LIST
66368: LIST
66369: LIST
66370: LIST
66371: LIST
66372: ST_TO_ADDR
// end ; 4 :
66373: GO 66654
66375: LD_INT 4
66377: DOUBLE
66378: EQUAL
66379: IFTRUE 66383
66381: GO 66516
66383: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
66384: LD_ADDR_VAR 0 5
66388: PUSH
66389: LD_VAR 0 1
66393: PUSH
66394: LD_VAR 0 2
66398: PUSH
66399: LD_INT 4
66401: PLUS
66402: PUSH
66403: LD_INT 0
66405: PUSH
66406: EMPTY
66407: LIST
66408: LIST
66409: LIST
66410: PUSH
66411: LD_VAR 0 1
66415: PUSH
66416: LD_INT 3
66418: PLUS
66419: PUSH
66420: LD_VAR 0 2
66424: PUSH
66425: LD_INT 3
66427: PLUS
66428: PUSH
66429: LD_INT 5
66431: PUSH
66432: EMPTY
66433: LIST
66434: LIST
66435: LIST
66436: PUSH
66437: LD_VAR 0 1
66441: PUSH
66442: LD_INT 4
66444: PLUS
66445: PUSH
66446: LD_VAR 0 2
66450: PUSH
66451: LD_INT 4
66453: PUSH
66454: EMPTY
66455: LIST
66456: LIST
66457: LIST
66458: PUSH
66459: LD_VAR 0 1
66463: PUSH
66464: LD_VAR 0 2
66468: PUSH
66469: LD_INT 3
66471: MINUS
66472: PUSH
66473: LD_INT 3
66475: PUSH
66476: EMPTY
66477: LIST
66478: LIST
66479: LIST
66480: PUSH
66481: LD_VAR 0 1
66485: PUSH
66486: LD_INT 4
66488: MINUS
66489: PUSH
66490: LD_VAR 0 2
66494: PUSH
66495: LD_INT 4
66497: MINUS
66498: PUSH
66499: LD_INT 2
66501: PUSH
66502: EMPTY
66503: LIST
66504: LIST
66505: LIST
66506: PUSH
66507: EMPTY
66508: LIST
66509: LIST
66510: LIST
66511: LIST
66512: LIST
66513: ST_TO_ADDR
// end ; 5 :
66514: GO 66654
66516: LD_INT 5
66518: DOUBLE
66519: EQUAL
66520: IFTRUE 66524
66522: GO 66653
66524: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
66525: LD_ADDR_VAR 0 5
66529: PUSH
66530: LD_VAR 0 1
66534: PUSH
66535: LD_INT 4
66537: MINUS
66538: PUSH
66539: LD_VAR 0 2
66543: PUSH
66544: LD_INT 1
66546: PUSH
66547: EMPTY
66548: LIST
66549: LIST
66550: LIST
66551: PUSH
66552: LD_VAR 0 1
66556: PUSH
66557: LD_VAR 0 2
66561: PUSH
66562: LD_INT 4
66564: MINUS
66565: PUSH
66566: LD_INT 3
66568: PUSH
66569: EMPTY
66570: LIST
66571: LIST
66572: LIST
66573: PUSH
66574: LD_VAR 0 1
66578: PUSH
66579: LD_INT 4
66581: PLUS
66582: PUSH
66583: LD_VAR 0 2
66587: PUSH
66588: LD_INT 4
66590: PLUS
66591: PUSH
66592: LD_INT 5
66594: PUSH
66595: EMPTY
66596: LIST
66597: LIST
66598: LIST
66599: PUSH
66600: LD_VAR 0 1
66604: PUSH
66605: LD_INT 3
66607: PLUS
66608: PUSH
66609: LD_VAR 0 2
66613: PUSH
66614: LD_INT 4
66616: PUSH
66617: EMPTY
66618: LIST
66619: LIST
66620: LIST
66621: PUSH
66622: LD_VAR 0 1
66626: PUSH
66627: LD_VAR 0 2
66631: PUSH
66632: LD_INT 3
66634: PLUS
66635: PUSH
66636: LD_INT 0
66638: PUSH
66639: EMPTY
66640: LIST
66641: LIST
66642: LIST
66643: PUSH
66644: EMPTY
66645: LIST
66646: LIST
66647: LIST
66648: LIST
66649: LIST
66650: ST_TO_ADDR
// end ; end ;
66651: GO 66654
66653: POP
// result := list ;
66654: LD_ADDR_VAR 0 4
66658: PUSH
66659: LD_VAR 0 5
66663: ST_TO_ADDR
// end ;
66664: LD_VAR 0 4
66668: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
66669: LD_INT 0
66671: PPUSH
66672: PPUSH
66673: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
66674: LD_VAR 0 1
66678: NOT
66679: PUSH
66680: LD_VAR 0 2
66684: PUSH
66685: LD_INT 1
66687: PUSH
66688: LD_INT 2
66690: PUSH
66691: LD_INT 3
66693: PUSH
66694: LD_INT 4
66696: PUSH
66697: EMPTY
66698: LIST
66699: LIST
66700: LIST
66701: LIST
66702: IN
66703: NOT
66704: OR
66705: IFFALSE 66709
// exit ;
66707: GO 66801
// tmp := [ ] ;
66709: LD_ADDR_VAR 0 5
66713: PUSH
66714: EMPTY
66715: ST_TO_ADDR
// for i in units do
66716: LD_ADDR_VAR 0 4
66720: PUSH
66721: LD_VAR 0 1
66725: PUSH
66726: FOR_IN
66727: IFFALSE 66770
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
66729: LD_ADDR_VAR 0 5
66733: PUSH
66734: LD_VAR 0 5
66738: PPUSH
66739: LD_VAR 0 5
66743: PUSH
66744: LD_INT 1
66746: PLUS
66747: PPUSH
66748: LD_VAR 0 4
66752: PPUSH
66753: LD_VAR 0 2
66757: PPUSH
66758: CALL_OW 259
66762: PPUSH
66763: CALL_OW 2
66767: ST_TO_ADDR
66768: GO 66726
66770: POP
66771: POP
// if not tmp then
66772: LD_VAR 0 5
66776: NOT
66777: IFFALSE 66781
// exit ;
66779: GO 66801
// result := SortListByListDesc ( units , tmp ) ;
66781: LD_ADDR_VAR 0 3
66785: PUSH
66786: LD_VAR 0 1
66790: PPUSH
66791: LD_VAR 0 5
66795: PPUSH
66796: CALL_OW 77
66800: ST_TO_ADDR
// end ;
66801: LD_VAR 0 3
66805: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
66806: LD_INT 0
66808: PPUSH
66809: PPUSH
66810: PPUSH
// result := false ;
66811: LD_ADDR_VAR 0 3
66815: PUSH
66816: LD_INT 0
66818: ST_TO_ADDR
// x := GetX ( building ) ;
66819: LD_ADDR_VAR 0 4
66823: PUSH
66824: LD_VAR 0 2
66828: PPUSH
66829: CALL_OW 250
66833: ST_TO_ADDR
// y := GetY ( building ) ;
66834: LD_ADDR_VAR 0 5
66838: PUSH
66839: LD_VAR 0 2
66843: PPUSH
66844: CALL_OW 251
66848: ST_TO_ADDR
// if not building or not x or not y then
66849: LD_VAR 0 2
66853: NOT
66854: PUSH
66855: LD_VAR 0 4
66859: NOT
66860: OR
66861: PUSH
66862: LD_VAR 0 5
66866: NOT
66867: OR
66868: IFFALSE 66872
// exit ;
66870: GO 66964
// if GetTaskList ( unit ) then
66872: LD_VAR 0 1
66876: PPUSH
66877: CALL_OW 437
66881: IFFALSE 66964
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
66883: LD_STRING e
66885: PUSH
66886: LD_VAR 0 1
66890: PPUSH
66891: CALL_OW 437
66895: PUSH
66896: LD_INT 1
66898: ARRAY
66899: PUSH
66900: LD_INT 1
66902: ARRAY
66903: EQUAL
66904: PUSH
66905: LD_VAR 0 4
66909: PUSH
66910: LD_VAR 0 1
66914: PPUSH
66915: CALL_OW 437
66919: PUSH
66920: LD_INT 1
66922: ARRAY
66923: PUSH
66924: LD_INT 2
66926: ARRAY
66927: EQUAL
66928: AND
66929: PUSH
66930: LD_VAR 0 5
66934: PUSH
66935: LD_VAR 0 1
66939: PPUSH
66940: CALL_OW 437
66944: PUSH
66945: LD_INT 1
66947: ARRAY
66948: PUSH
66949: LD_INT 3
66951: ARRAY
66952: EQUAL
66953: AND
66954: IFFALSE 66964
// result := true end ;
66956: LD_ADDR_VAR 0 3
66960: PUSH
66961: LD_INT 1
66963: ST_TO_ADDR
// end ;
66964: LD_VAR 0 3
66968: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
66969: LD_INT 0
66971: PPUSH
// result := false ;
66972: LD_ADDR_VAR 0 4
66976: PUSH
66977: LD_INT 0
66979: ST_TO_ADDR
// if GetTaskList ( unit ) then
66980: LD_VAR 0 1
66984: PPUSH
66985: CALL_OW 437
66989: IFFALSE 67072
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
66991: LD_STRING M
66993: PUSH
66994: LD_VAR 0 1
66998: PPUSH
66999: CALL_OW 437
67003: PUSH
67004: LD_INT 1
67006: ARRAY
67007: PUSH
67008: LD_INT 1
67010: ARRAY
67011: EQUAL
67012: PUSH
67013: LD_VAR 0 2
67017: PUSH
67018: LD_VAR 0 1
67022: PPUSH
67023: CALL_OW 437
67027: PUSH
67028: LD_INT 1
67030: ARRAY
67031: PUSH
67032: LD_INT 2
67034: ARRAY
67035: EQUAL
67036: AND
67037: PUSH
67038: LD_VAR 0 3
67042: PUSH
67043: LD_VAR 0 1
67047: PPUSH
67048: CALL_OW 437
67052: PUSH
67053: LD_INT 1
67055: ARRAY
67056: PUSH
67057: LD_INT 3
67059: ARRAY
67060: EQUAL
67061: AND
67062: IFFALSE 67072
// result := true ;
67064: LD_ADDR_VAR 0 4
67068: PUSH
67069: LD_INT 1
67071: ST_TO_ADDR
// end ; end ;
67072: LD_VAR 0 4
67076: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
67077: LD_INT 0
67079: PPUSH
67080: PPUSH
67081: PPUSH
67082: PPUSH
// if not unit or not area then
67083: LD_VAR 0 1
67087: NOT
67088: PUSH
67089: LD_VAR 0 2
67093: NOT
67094: OR
67095: IFFALSE 67099
// exit ;
67097: GO 67263
// tmp := AreaToList ( area , i ) ;
67099: LD_ADDR_VAR 0 6
67103: PUSH
67104: LD_VAR 0 2
67108: PPUSH
67109: LD_VAR 0 5
67113: PPUSH
67114: CALL_OW 517
67118: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
67119: LD_ADDR_VAR 0 5
67123: PUSH
67124: DOUBLE
67125: LD_INT 1
67127: DEC
67128: ST_TO_ADDR
67129: LD_VAR 0 6
67133: PUSH
67134: LD_INT 1
67136: ARRAY
67137: PUSH
67138: FOR_TO
67139: IFFALSE 67261
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
67141: LD_ADDR_VAR 0 7
67145: PUSH
67146: LD_VAR 0 6
67150: PUSH
67151: LD_INT 1
67153: ARRAY
67154: PUSH
67155: LD_VAR 0 5
67159: ARRAY
67160: PUSH
67161: LD_VAR 0 6
67165: PUSH
67166: LD_INT 2
67168: ARRAY
67169: PUSH
67170: LD_VAR 0 5
67174: ARRAY
67175: PUSH
67176: EMPTY
67177: LIST
67178: LIST
67179: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
67180: LD_VAR 0 7
67184: PUSH
67185: LD_INT 1
67187: ARRAY
67188: PPUSH
67189: LD_VAR 0 7
67193: PUSH
67194: LD_INT 2
67196: ARRAY
67197: PPUSH
67198: CALL_OW 428
67202: PUSH
67203: LD_INT 0
67205: EQUAL
67206: IFFALSE 67259
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
67208: LD_VAR 0 1
67212: PPUSH
67213: LD_VAR 0 7
67217: PUSH
67218: LD_INT 1
67220: ARRAY
67221: PPUSH
67222: LD_VAR 0 7
67226: PUSH
67227: LD_INT 2
67229: ARRAY
67230: PPUSH
67231: LD_VAR 0 3
67235: PPUSH
67236: CALL_OW 48
// result := IsPlaced ( unit ) ;
67240: LD_ADDR_VAR 0 4
67244: PUSH
67245: LD_VAR 0 1
67249: PPUSH
67250: CALL_OW 305
67254: ST_TO_ADDR
// exit ;
67255: POP
67256: POP
67257: GO 67263
// end ; end ;
67259: GO 67138
67261: POP
67262: POP
// end ;
67263: LD_VAR 0 4
67267: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
67268: LD_INT 0
67270: PPUSH
67271: PPUSH
67272: PPUSH
// if not side or side > 8 then
67273: LD_VAR 0 1
67277: NOT
67278: PUSH
67279: LD_VAR 0 1
67283: PUSH
67284: LD_INT 8
67286: GREATER
67287: OR
67288: IFFALSE 67292
// exit ;
67290: GO 67479
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
67292: LD_ADDR_VAR 0 4
67296: PUSH
67297: LD_INT 22
67299: PUSH
67300: LD_VAR 0 1
67304: PUSH
67305: EMPTY
67306: LIST
67307: LIST
67308: PUSH
67309: LD_INT 21
67311: PUSH
67312: LD_INT 3
67314: PUSH
67315: EMPTY
67316: LIST
67317: LIST
67318: PUSH
67319: EMPTY
67320: LIST
67321: LIST
67322: PPUSH
67323: CALL_OW 69
67327: ST_TO_ADDR
// if not tmp then
67328: LD_VAR 0 4
67332: NOT
67333: IFFALSE 67337
// exit ;
67335: GO 67479
// enable_addtolog := true ;
67337: LD_ADDR_OWVAR 81
67341: PUSH
67342: LD_INT 1
67344: ST_TO_ADDR
// AddToLog ( [ ) ;
67345: LD_STRING [
67347: PPUSH
67348: CALL_OW 561
// for i in tmp do
67352: LD_ADDR_VAR 0 3
67356: PUSH
67357: LD_VAR 0 4
67361: PUSH
67362: FOR_IN
67363: IFFALSE 67470
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
67365: LD_STRING [
67367: PUSH
67368: LD_VAR 0 3
67372: PPUSH
67373: CALL_OW 266
67377: STR
67378: PUSH
67379: LD_STRING , 
67381: STR
67382: PUSH
67383: LD_VAR 0 3
67387: PPUSH
67388: CALL_OW 250
67392: STR
67393: PUSH
67394: LD_STRING , 
67396: STR
67397: PUSH
67398: LD_VAR 0 3
67402: PPUSH
67403: CALL_OW 251
67407: STR
67408: PUSH
67409: LD_STRING , 
67411: STR
67412: PUSH
67413: LD_VAR 0 3
67417: PPUSH
67418: CALL_OW 254
67422: STR
67423: PUSH
67424: LD_STRING , 
67426: STR
67427: PUSH
67428: LD_VAR 0 3
67432: PPUSH
67433: LD_INT 1
67435: PPUSH
67436: CALL_OW 268
67440: STR
67441: PUSH
67442: LD_STRING , 
67444: STR
67445: PUSH
67446: LD_VAR 0 3
67450: PPUSH
67451: LD_INT 2
67453: PPUSH
67454: CALL_OW 268
67458: STR
67459: PUSH
67460: LD_STRING ],
67462: STR
67463: PPUSH
67464: CALL_OW 561
// end ;
67468: GO 67362
67470: POP
67471: POP
// AddToLog ( ]; ) ;
67472: LD_STRING ];
67474: PPUSH
67475: CALL_OW 561
// end ;
67479: LD_VAR 0 2
67483: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
67484: LD_INT 0
67486: PPUSH
67487: PPUSH
67488: PPUSH
67489: PPUSH
67490: PPUSH
// if not area or not rate or not max then
67491: LD_VAR 0 1
67495: NOT
67496: PUSH
67497: LD_VAR 0 2
67501: NOT
67502: OR
67503: PUSH
67504: LD_VAR 0 4
67508: NOT
67509: OR
67510: IFFALSE 67514
// exit ;
67512: GO 67703
// while 1 do
67514: LD_INT 1
67516: IFFALSE 67703
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
67518: LD_ADDR_VAR 0 9
67522: PUSH
67523: LD_VAR 0 1
67527: PPUSH
67528: LD_INT 1
67530: PPUSH
67531: CALL_OW 287
67535: PUSH
67536: LD_INT 10
67538: MUL
67539: ST_TO_ADDR
// r := rate / 10 ;
67540: LD_ADDR_VAR 0 7
67544: PUSH
67545: LD_VAR 0 2
67549: PUSH
67550: LD_INT 10
67552: DIVREAL
67553: ST_TO_ADDR
// time := 1 1$00 ;
67554: LD_ADDR_VAR 0 8
67558: PUSH
67559: LD_INT 2100
67561: ST_TO_ADDR
// if amount < min then
67562: LD_VAR 0 9
67566: PUSH
67567: LD_VAR 0 3
67571: LESS
67572: IFFALSE 67590
// r := r * 2 else
67574: LD_ADDR_VAR 0 7
67578: PUSH
67579: LD_VAR 0 7
67583: PUSH
67584: LD_INT 2
67586: MUL
67587: ST_TO_ADDR
67588: GO 67616
// if amount > max then
67590: LD_VAR 0 9
67594: PUSH
67595: LD_VAR 0 4
67599: GREATER
67600: IFFALSE 67616
// r := r / 2 ;
67602: LD_ADDR_VAR 0 7
67606: PUSH
67607: LD_VAR 0 7
67611: PUSH
67612: LD_INT 2
67614: DIVREAL
67615: ST_TO_ADDR
// time := time / r ;
67616: LD_ADDR_VAR 0 8
67620: PUSH
67621: LD_VAR 0 8
67625: PUSH
67626: LD_VAR 0 7
67630: DIVREAL
67631: ST_TO_ADDR
// if time < 0 then
67632: LD_VAR 0 8
67636: PUSH
67637: LD_INT 0
67639: LESS
67640: IFFALSE 67657
// time := time * - 1 ;
67642: LD_ADDR_VAR 0 8
67646: PUSH
67647: LD_VAR 0 8
67651: PUSH
67652: LD_INT 1
67654: NEG
67655: MUL
67656: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
67657: LD_VAR 0 8
67661: PUSH
67662: LD_INT 35
67664: PPUSH
67665: LD_INT 875
67667: PPUSH
67668: CALL_OW 12
67672: PLUS
67673: PPUSH
67674: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
67678: LD_INT 1
67680: PPUSH
67681: LD_INT 5
67683: PPUSH
67684: CALL_OW 12
67688: PPUSH
67689: LD_VAR 0 1
67693: PPUSH
67694: LD_INT 1
67696: PPUSH
67697: CALL_OW 55
// end ;
67701: GO 67514
// end ;
67703: LD_VAR 0 5
67707: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
67708: LD_INT 0
67710: PPUSH
67711: PPUSH
67712: PPUSH
67713: PPUSH
67714: PPUSH
67715: PPUSH
67716: PPUSH
67717: PPUSH
// if not turrets or not factories then
67718: LD_VAR 0 1
67722: NOT
67723: PUSH
67724: LD_VAR 0 2
67728: NOT
67729: OR
67730: IFFALSE 67734
// exit ;
67732: GO 68041
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
67734: LD_ADDR_VAR 0 10
67738: PUSH
67739: LD_INT 5
67741: PUSH
67742: LD_INT 6
67744: PUSH
67745: EMPTY
67746: LIST
67747: LIST
67748: PUSH
67749: LD_INT 2
67751: PUSH
67752: LD_INT 4
67754: PUSH
67755: EMPTY
67756: LIST
67757: LIST
67758: PUSH
67759: LD_INT 3
67761: PUSH
67762: LD_INT 5
67764: PUSH
67765: EMPTY
67766: LIST
67767: LIST
67768: PUSH
67769: EMPTY
67770: LIST
67771: LIST
67772: LIST
67773: PUSH
67774: LD_INT 24
67776: PUSH
67777: LD_INT 25
67779: PUSH
67780: EMPTY
67781: LIST
67782: LIST
67783: PUSH
67784: LD_INT 23
67786: PUSH
67787: LD_INT 27
67789: PUSH
67790: EMPTY
67791: LIST
67792: LIST
67793: PUSH
67794: EMPTY
67795: LIST
67796: LIST
67797: PUSH
67798: LD_INT 42
67800: PUSH
67801: LD_INT 43
67803: PUSH
67804: EMPTY
67805: LIST
67806: LIST
67807: PUSH
67808: LD_INT 44
67810: PUSH
67811: LD_INT 46
67813: PUSH
67814: EMPTY
67815: LIST
67816: LIST
67817: PUSH
67818: LD_INT 45
67820: PUSH
67821: LD_INT 47
67823: PUSH
67824: EMPTY
67825: LIST
67826: LIST
67827: PUSH
67828: EMPTY
67829: LIST
67830: LIST
67831: LIST
67832: PUSH
67833: EMPTY
67834: LIST
67835: LIST
67836: LIST
67837: ST_TO_ADDR
// result := [ ] ;
67838: LD_ADDR_VAR 0 3
67842: PUSH
67843: EMPTY
67844: ST_TO_ADDR
// for i in turrets do
67845: LD_ADDR_VAR 0 4
67849: PUSH
67850: LD_VAR 0 1
67854: PUSH
67855: FOR_IN
67856: IFFALSE 68039
// begin nat := GetNation ( i ) ;
67858: LD_ADDR_VAR 0 7
67862: PUSH
67863: LD_VAR 0 4
67867: PPUSH
67868: CALL_OW 248
67872: ST_TO_ADDR
// weapon := 0 ;
67873: LD_ADDR_VAR 0 8
67877: PUSH
67878: LD_INT 0
67880: ST_TO_ADDR
// if not nat then
67881: LD_VAR 0 7
67885: NOT
67886: IFFALSE 67890
// continue ;
67888: GO 67855
// for j in list [ nat ] do
67890: LD_ADDR_VAR 0 5
67894: PUSH
67895: LD_VAR 0 10
67899: PUSH
67900: LD_VAR 0 7
67904: ARRAY
67905: PUSH
67906: FOR_IN
67907: IFFALSE 67948
// if GetBWeapon ( i ) = j [ 1 ] then
67909: LD_VAR 0 4
67913: PPUSH
67914: CALL_OW 269
67918: PUSH
67919: LD_VAR 0 5
67923: PUSH
67924: LD_INT 1
67926: ARRAY
67927: EQUAL
67928: IFFALSE 67946
// begin weapon := j [ 2 ] ;
67930: LD_ADDR_VAR 0 8
67934: PUSH
67935: LD_VAR 0 5
67939: PUSH
67940: LD_INT 2
67942: ARRAY
67943: ST_TO_ADDR
// break ;
67944: GO 67948
// end ;
67946: GO 67906
67948: POP
67949: POP
// if not weapon then
67950: LD_VAR 0 8
67954: NOT
67955: IFFALSE 67959
// continue ;
67957: GO 67855
// for k in factories do
67959: LD_ADDR_VAR 0 6
67963: PUSH
67964: LD_VAR 0 2
67968: PUSH
67969: FOR_IN
67970: IFFALSE 68035
// begin weapons := AvailableWeaponList ( k ) ;
67972: LD_ADDR_VAR 0 9
67976: PUSH
67977: LD_VAR 0 6
67981: PPUSH
67982: CALL_OW 478
67986: ST_TO_ADDR
// if not weapons then
67987: LD_VAR 0 9
67991: NOT
67992: IFFALSE 67996
// continue ;
67994: GO 67969
// if weapon in weapons then
67996: LD_VAR 0 8
68000: PUSH
68001: LD_VAR 0 9
68005: IN
68006: IFFALSE 68033
// begin result := [ i , weapon ] ;
68008: LD_ADDR_VAR 0 3
68012: PUSH
68013: LD_VAR 0 4
68017: PUSH
68018: LD_VAR 0 8
68022: PUSH
68023: EMPTY
68024: LIST
68025: LIST
68026: ST_TO_ADDR
// exit ;
68027: POP
68028: POP
68029: POP
68030: POP
68031: GO 68041
// end ; end ;
68033: GO 67969
68035: POP
68036: POP
// end ;
68037: GO 67855
68039: POP
68040: POP
// end ;
68041: LD_VAR 0 3
68045: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
68046: LD_INT 0
68048: PPUSH
// if not side or side > 8 then
68049: LD_VAR 0 3
68053: NOT
68054: PUSH
68055: LD_VAR 0 3
68059: PUSH
68060: LD_INT 8
68062: GREATER
68063: OR
68064: IFFALSE 68068
// exit ;
68066: GO 68127
// if not range then
68068: LD_VAR 0 4
68072: NOT
68073: IFFALSE 68084
// range := - 12 ;
68075: LD_ADDR_VAR 0 4
68079: PUSH
68080: LD_INT 12
68082: NEG
68083: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
68084: LD_VAR 0 1
68088: PPUSH
68089: LD_VAR 0 2
68093: PPUSH
68094: LD_VAR 0 3
68098: PPUSH
68099: LD_VAR 0 4
68103: PPUSH
68104: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
68108: LD_VAR 0 1
68112: PPUSH
68113: LD_VAR 0 2
68117: PPUSH
68118: LD_VAR 0 3
68122: PPUSH
68123: CALL_OW 331
// end ;
68127: LD_VAR 0 5
68131: RET
// export function Video ( mode ) ; begin
68132: LD_INT 0
68134: PPUSH
// ingame_video = mode ;
68135: LD_ADDR_OWVAR 52
68139: PUSH
68140: LD_VAR 0 1
68144: ST_TO_ADDR
// interface_hidden = mode ;
68145: LD_ADDR_OWVAR 54
68149: PUSH
68150: LD_VAR 0 1
68154: ST_TO_ADDR
// end ;
68155: LD_VAR 0 2
68159: RET
// export function Join ( array , element ) ; begin
68160: LD_INT 0
68162: PPUSH
// result := Replace ( array , array + 1 , element ) ;
68163: LD_ADDR_VAR 0 3
68167: PUSH
68168: LD_VAR 0 1
68172: PPUSH
68173: LD_VAR 0 1
68177: PUSH
68178: LD_INT 1
68180: PLUS
68181: PPUSH
68182: LD_VAR 0 2
68186: PPUSH
68187: CALL_OW 1
68191: ST_TO_ADDR
// end ;
68192: LD_VAR 0 3
68196: RET
// export function JoinUnion ( array , element ) ; begin
68197: LD_INT 0
68199: PPUSH
// result := array union element ;
68200: LD_ADDR_VAR 0 3
68204: PUSH
68205: LD_VAR 0 1
68209: PUSH
68210: LD_VAR 0 2
68214: UNION
68215: ST_TO_ADDR
// end ;
68216: LD_VAR 0 3
68220: RET
// export function GetBehemoths ( side ) ; begin
68221: LD_INT 0
68223: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
68224: LD_ADDR_VAR 0 2
68228: PUSH
68229: LD_INT 22
68231: PUSH
68232: LD_VAR 0 1
68236: PUSH
68237: EMPTY
68238: LIST
68239: LIST
68240: PUSH
68241: LD_INT 31
68243: PUSH
68244: LD_INT 25
68246: PUSH
68247: EMPTY
68248: LIST
68249: LIST
68250: PUSH
68251: EMPTY
68252: LIST
68253: LIST
68254: PPUSH
68255: CALL_OW 69
68259: ST_TO_ADDR
// end ;
68260: LD_VAR 0 2
68264: RET
// export function Shuffle ( array ) ; var i , index ; begin
68265: LD_INT 0
68267: PPUSH
68268: PPUSH
68269: PPUSH
// result := [ ] ;
68270: LD_ADDR_VAR 0 2
68274: PUSH
68275: EMPTY
68276: ST_TO_ADDR
// if not array then
68277: LD_VAR 0 1
68281: NOT
68282: IFFALSE 68286
// exit ;
68284: GO 68385
// Randomize ;
68286: CALL_OW 10
// for i = array downto 1 do
68290: LD_ADDR_VAR 0 3
68294: PUSH
68295: DOUBLE
68296: LD_VAR 0 1
68300: INC
68301: ST_TO_ADDR
68302: LD_INT 1
68304: PUSH
68305: FOR_DOWNTO
68306: IFFALSE 68383
// begin index := rand ( 1 , array ) ;
68308: LD_ADDR_VAR 0 4
68312: PUSH
68313: LD_INT 1
68315: PPUSH
68316: LD_VAR 0 1
68320: PPUSH
68321: CALL_OW 12
68325: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
68326: LD_ADDR_VAR 0 2
68330: PUSH
68331: LD_VAR 0 2
68335: PPUSH
68336: LD_VAR 0 2
68340: PUSH
68341: LD_INT 1
68343: PLUS
68344: PPUSH
68345: LD_VAR 0 1
68349: PUSH
68350: LD_VAR 0 4
68354: ARRAY
68355: PPUSH
68356: CALL_OW 2
68360: ST_TO_ADDR
// array := Delete ( array , index ) ;
68361: LD_ADDR_VAR 0 1
68365: PUSH
68366: LD_VAR 0 1
68370: PPUSH
68371: LD_VAR 0 4
68375: PPUSH
68376: CALL_OW 3
68380: ST_TO_ADDR
// end ;
68381: GO 68305
68383: POP
68384: POP
// end ;
68385: LD_VAR 0 2
68389: RET
// export function GetBaseMaterials ( base ) ; begin
68390: LD_INT 0
68392: PPUSH
// result := [ 0 , 0 , 0 ] ;
68393: LD_ADDR_VAR 0 2
68397: PUSH
68398: LD_INT 0
68400: PUSH
68401: LD_INT 0
68403: PUSH
68404: LD_INT 0
68406: PUSH
68407: EMPTY
68408: LIST
68409: LIST
68410: LIST
68411: ST_TO_ADDR
// if not base then
68412: LD_VAR 0 1
68416: NOT
68417: IFFALSE 68421
// exit ;
68419: GO 68470
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
68421: LD_ADDR_VAR 0 2
68425: PUSH
68426: LD_VAR 0 1
68430: PPUSH
68431: LD_INT 1
68433: PPUSH
68434: CALL_OW 275
68438: PUSH
68439: LD_VAR 0 1
68443: PPUSH
68444: LD_INT 2
68446: PPUSH
68447: CALL_OW 275
68451: PUSH
68452: LD_VAR 0 1
68456: PPUSH
68457: LD_INT 3
68459: PPUSH
68460: CALL_OW 275
68464: PUSH
68465: EMPTY
68466: LIST
68467: LIST
68468: LIST
68469: ST_TO_ADDR
// end ;
68470: LD_VAR 0 2
68474: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
68475: LD_INT 0
68477: PPUSH
68478: PPUSH
// result := array ;
68479: LD_ADDR_VAR 0 3
68483: PUSH
68484: LD_VAR 0 1
68488: ST_TO_ADDR
// if size > 0 then
68489: LD_VAR 0 2
68493: PUSH
68494: LD_INT 0
68496: GREATER
68497: IFFALSE 68543
// for i := array downto size do
68499: LD_ADDR_VAR 0 4
68503: PUSH
68504: DOUBLE
68505: LD_VAR 0 1
68509: INC
68510: ST_TO_ADDR
68511: LD_VAR 0 2
68515: PUSH
68516: FOR_DOWNTO
68517: IFFALSE 68541
// result := Delete ( result , result ) ;
68519: LD_ADDR_VAR 0 3
68523: PUSH
68524: LD_VAR 0 3
68528: PPUSH
68529: LD_VAR 0 3
68533: PPUSH
68534: CALL_OW 3
68538: ST_TO_ADDR
68539: GO 68516
68541: POP
68542: POP
// end ;
68543: LD_VAR 0 3
68547: RET
// export function ComExit ( unit ) ; var tmp ; begin
68548: LD_INT 0
68550: PPUSH
68551: PPUSH
// if not IsInUnit ( unit ) then
68552: LD_VAR 0 1
68556: PPUSH
68557: CALL_OW 310
68561: NOT
68562: IFFALSE 68566
// exit ;
68564: GO 68626
// tmp := IsInUnit ( unit ) ;
68566: LD_ADDR_VAR 0 3
68570: PUSH
68571: LD_VAR 0 1
68575: PPUSH
68576: CALL_OW 310
68580: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
68581: LD_VAR 0 3
68585: PPUSH
68586: CALL_OW 247
68590: PUSH
68591: LD_INT 2
68593: EQUAL
68594: IFFALSE 68607
// ComExitVehicle ( unit ) else
68596: LD_VAR 0 1
68600: PPUSH
68601: CALL_OW 121
68605: GO 68616
// ComExitBuilding ( unit ) ;
68607: LD_VAR 0 1
68611: PPUSH
68612: CALL_OW 122
// result := tmp ;
68616: LD_ADDR_VAR 0 2
68620: PUSH
68621: LD_VAR 0 3
68625: ST_TO_ADDR
// end ;
68626: LD_VAR 0 2
68630: RET
// export function ComExitAll ( units ) ; var i ; begin
68631: LD_INT 0
68633: PPUSH
68634: PPUSH
// if not units then
68635: LD_VAR 0 1
68639: NOT
68640: IFFALSE 68644
// exit ;
68642: GO 68670
// for i in units do
68644: LD_ADDR_VAR 0 3
68648: PUSH
68649: LD_VAR 0 1
68653: PUSH
68654: FOR_IN
68655: IFFALSE 68668
// ComExit ( i ) ;
68657: LD_VAR 0 3
68661: PPUSH
68662: CALL 68548 0 1
68666: GO 68654
68668: POP
68669: POP
// end ;
68670: LD_VAR 0 2
68674: RET
// export function ResetHc ; begin
68675: LD_INT 0
68677: PPUSH
// InitHc ;
68678: CALL_OW 19
// hc_importance := 0 ;
68682: LD_ADDR_OWVAR 32
68686: PUSH
68687: LD_INT 0
68689: ST_TO_ADDR
// end ;
68690: LD_VAR 0 1
68694: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
68695: LD_INT 0
68697: PPUSH
68698: PPUSH
68699: PPUSH
// _x := ( x1 + x2 ) div 2 ;
68700: LD_ADDR_VAR 0 6
68704: PUSH
68705: LD_VAR 0 1
68709: PUSH
68710: LD_VAR 0 3
68714: PLUS
68715: PUSH
68716: LD_INT 2
68718: DIV
68719: ST_TO_ADDR
// if _x < 0 then
68720: LD_VAR 0 6
68724: PUSH
68725: LD_INT 0
68727: LESS
68728: IFFALSE 68745
// _x := _x * - 1 ;
68730: LD_ADDR_VAR 0 6
68734: PUSH
68735: LD_VAR 0 6
68739: PUSH
68740: LD_INT 1
68742: NEG
68743: MUL
68744: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
68745: LD_ADDR_VAR 0 7
68749: PUSH
68750: LD_VAR 0 2
68754: PUSH
68755: LD_VAR 0 4
68759: PLUS
68760: PUSH
68761: LD_INT 2
68763: DIV
68764: ST_TO_ADDR
// if _y < 0 then
68765: LD_VAR 0 7
68769: PUSH
68770: LD_INT 0
68772: LESS
68773: IFFALSE 68790
// _y := _y * - 1 ;
68775: LD_ADDR_VAR 0 7
68779: PUSH
68780: LD_VAR 0 7
68784: PUSH
68785: LD_INT 1
68787: NEG
68788: MUL
68789: ST_TO_ADDR
// result := [ _x , _y ] ;
68790: LD_ADDR_VAR 0 5
68794: PUSH
68795: LD_VAR 0 6
68799: PUSH
68800: LD_VAR 0 7
68804: PUSH
68805: EMPTY
68806: LIST
68807: LIST
68808: ST_TO_ADDR
// end ;
68809: LD_VAR 0 5
68813: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
68814: LD_INT 0
68816: PPUSH
68817: PPUSH
68818: PPUSH
68819: PPUSH
// task := GetTaskList ( unit ) ;
68820: LD_ADDR_VAR 0 7
68824: PUSH
68825: LD_VAR 0 1
68829: PPUSH
68830: CALL_OW 437
68834: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
68835: LD_VAR 0 7
68839: NOT
68840: PUSH
68841: LD_VAR 0 1
68845: PPUSH
68846: LD_VAR 0 2
68850: PPUSH
68851: CALL_OW 308
68855: NOT
68856: AND
68857: IFFALSE 68861
// exit ;
68859: GO 68979
// if IsInArea ( unit , area ) then
68861: LD_VAR 0 1
68865: PPUSH
68866: LD_VAR 0 2
68870: PPUSH
68871: CALL_OW 308
68875: IFFALSE 68893
// begin ComMoveToArea ( unit , goAway ) ;
68877: LD_VAR 0 1
68881: PPUSH
68882: LD_VAR 0 3
68886: PPUSH
68887: CALL_OW 113
// exit ;
68891: GO 68979
// end ; if task [ 1 ] [ 1 ] <> M then
68893: LD_VAR 0 7
68897: PUSH
68898: LD_INT 1
68900: ARRAY
68901: PUSH
68902: LD_INT 1
68904: ARRAY
68905: PUSH
68906: LD_STRING M
68908: NONEQUAL
68909: IFFALSE 68913
// exit ;
68911: GO 68979
// x := task [ 1 ] [ 2 ] ;
68913: LD_ADDR_VAR 0 5
68917: PUSH
68918: LD_VAR 0 7
68922: PUSH
68923: LD_INT 1
68925: ARRAY
68926: PUSH
68927: LD_INT 2
68929: ARRAY
68930: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
68931: LD_ADDR_VAR 0 6
68935: PUSH
68936: LD_VAR 0 7
68940: PUSH
68941: LD_INT 1
68943: ARRAY
68944: PUSH
68945: LD_INT 3
68947: ARRAY
68948: ST_TO_ADDR
// if InArea ( x , y , area ) then
68949: LD_VAR 0 5
68953: PPUSH
68954: LD_VAR 0 6
68958: PPUSH
68959: LD_VAR 0 2
68963: PPUSH
68964: CALL_OW 309
68968: IFFALSE 68979
// ComStop ( unit ) ;
68970: LD_VAR 0 1
68974: PPUSH
68975: CALL_OW 141
// end ;
68979: LD_VAR 0 4
68983: RET
// export function Abs ( value ) ; begin
68984: LD_INT 0
68986: PPUSH
// result := value ;
68987: LD_ADDR_VAR 0 2
68991: PUSH
68992: LD_VAR 0 1
68996: ST_TO_ADDR
// if value < 0 then
68997: LD_VAR 0 1
69001: PUSH
69002: LD_INT 0
69004: LESS
69005: IFFALSE 69022
// result := value * - 1 ;
69007: LD_ADDR_VAR 0 2
69011: PUSH
69012: LD_VAR 0 1
69016: PUSH
69017: LD_INT 1
69019: NEG
69020: MUL
69021: ST_TO_ADDR
// end ;
69022: LD_VAR 0 2
69026: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
69027: LD_INT 0
69029: PPUSH
69030: PPUSH
69031: PPUSH
69032: PPUSH
69033: PPUSH
69034: PPUSH
69035: PPUSH
69036: PPUSH
// if not unit or not building then
69037: LD_VAR 0 1
69041: NOT
69042: PUSH
69043: LD_VAR 0 2
69047: NOT
69048: OR
69049: IFFALSE 69053
// exit ;
69051: GO 69279
// x := GetX ( building ) ;
69053: LD_ADDR_VAR 0 4
69057: PUSH
69058: LD_VAR 0 2
69062: PPUSH
69063: CALL_OW 250
69067: ST_TO_ADDR
// y := GetY ( building ) ;
69068: LD_ADDR_VAR 0 6
69072: PUSH
69073: LD_VAR 0 2
69077: PPUSH
69078: CALL_OW 251
69082: ST_TO_ADDR
// d := GetDir ( building ) ;
69083: LD_ADDR_VAR 0 8
69087: PUSH
69088: LD_VAR 0 2
69092: PPUSH
69093: CALL_OW 254
69097: ST_TO_ADDR
// r := 4 ;
69098: LD_ADDR_VAR 0 9
69102: PUSH
69103: LD_INT 4
69105: ST_TO_ADDR
// for i := 1 to 5 do
69106: LD_ADDR_VAR 0 10
69110: PUSH
69111: DOUBLE
69112: LD_INT 1
69114: DEC
69115: ST_TO_ADDR
69116: LD_INT 5
69118: PUSH
69119: FOR_TO
69120: IFFALSE 69277
// begin _x := ShiftX ( x , d , r + i ) ;
69122: LD_ADDR_VAR 0 5
69126: PUSH
69127: LD_VAR 0 4
69131: PPUSH
69132: LD_VAR 0 8
69136: PPUSH
69137: LD_VAR 0 9
69141: PUSH
69142: LD_VAR 0 10
69146: PLUS
69147: PPUSH
69148: CALL_OW 272
69152: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
69153: LD_ADDR_VAR 0 7
69157: PUSH
69158: LD_VAR 0 6
69162: PPUSH
69163: LD_VAR 0 8
69167: PPUSH
69168: LD_VAR 0 9
69172: PUSH
69173: LD_VAR 0 10
69177: PLUS
69178: PPUSH
69179: CALL_OW 273
69183: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
69184: LD_VAR 0 5
69188: PPUSH
69189: LD_VAR 0 7
69193: PPUSH
69194: CALL_OW 488
69198: PUSH
69199: LD_VAR 0 5
69203: PPUSH
69204: LD_VAR 0 7
69208: PPUSH
69209: CALL_OW 428
69213: PPUSH
69214: CALL_OW 247
69218: PUSH
69219: LD_INT 3
69221: PUSH
69222: LD_INT 2
69224: PUSH
69225: EMPTY
69226: LIST
69227: LIST
69228: IN
69229: NOT
69230: AND
69231: IFFALSE 69275
// begin ComMoveXY ( unit , _x , _y ) ;
69233: LD_VAR 0 1
69237: PPUSH
69238: LD_VAR 0 5
69242: PPUSH
69243: LD_VAR 0 7
69247: PPUSH
69248: CALL_OW 111
// result := [ _x , _y ] ;
69252: LD_ADDR_VAR 0 3
69256: PUSH
69257: LD_VAR 0 5
69261: PUSH
69262: LD_VAR 0 7
69266: PUSH
69267: EMPTY
69268: LIST
69269: LIST
69270: ST_TO_ADDR
// exit ;
69271: POP
69272: POP
69273: GO 69279
// end ; end ;
69275: GO 69119
69277: POP
69278: POP
// end ;
69279: LD_VAR 0 3
69283: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
69284: LD_INT 0
69286: PPUSH
69287: PPUSH
69288: PPUSH
// result := 0 ;
69289: LD_ADDR_VAR 0 3
69293: PUSH
69294: LD_INT 0
69296: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
69297: LD_VAR 0 1
69301: PUSH
69302: LD_INT 0
69304: LESS
69305: PUSH
69306: LD_VAR 0 1
69310: PUSH
69311: LD_INT 8
69313: GREATER
69314: OR
69315: PUSH
69316: LD_VAR 0 2
69320: PUSH
69321: LD_INT 0
69323: LESS
69324: OR
69325: PUSH
69326: LD_VAR 0 2
69330: PUSH
69331: LD_INT 8
69333: GREATER
69334: OR
69335: IFFALSE 69339
// exit ;
69337: GO 69414
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
69339: LD_ADDR_VAR 0 4
69343: PUSH
69344: LD_INT 22
69346: PUSH
69347: LD_VAR 0 2
69351: PUSH
69352: EMPTY
69353: LIST
69354: LIST
69355: PPUSH
69356: CALL_OW 69
69360: PUSH
69361: FOR_IN
69362: IFFALSE 69412
// begin un := UnitShoot ( i ) ;
69364: LD_ADDR_VAR 0 5
69368: PUSH
69369: LD_VAR 0 4
69373: PPUSH
69374: CALL_OW 504
69378: ST_TO_ADDR
// if GetSide ( un ) = side1 then
69379: LD_VAR 0 5
69383: PPUSH
69384: CALL_OW 255
69388: PUSH
69389: LD_VAR 0 1
69393: EQUAL
69394: IFFALSE 69410
// begin result := un ;
69396: LD_ADDR_VAR 0 3
69400: PUSH
69401: LD_VAR 0 5
69405: ST_TO_ADDR
// exit ;
69406: POP
69407: POP
69408: GO 69414
// end ; end ;
69410: GO 69361
69412: POP
69413: POP
// end ;
69414: LD_VAR 0 3
69418: RET
// export function GetCargoBay ( units ) ; begin
69419: LD_INT 0
69421: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
69422: LD_ADDR_VAR 0 2
69426: PUSH
69427: LD_VAR 0 1
69431: PPUSH
69432: LD_INT 2
69434: PUSH
69435: LD_INT 34
69437: PUSH
69438: LD_INT 12
69440: PUSH
69441: EMPTY
69442: LIST
69443: LIST
69444: PUSH
69445: LD_INT 34
69447: PUSH
69448: LD_INT 51
69450: PUSH
69451: EMPTY
69452: LIST
69453: LIST
69454: PUSH
69455: LD_INT 34
69457: PUSH
69458: LD_INT 32
69460: PUSH
69461: EMPTY
69462: LIST
69463: LIST
69464: PUSH
69465: LD_INT 34
69467: PUSH
69468: LD_EXP 22
69472: PUSH
69473: EMPTY
69474: LIST
69475: LIST
69476: PUSH
69477: EMPTY
69478: LIST
69479: LIST
69480: LIST
69481: LIST
69482: LIST
69483: PPUSH
69484: CALL_OW 72
69488: ST_TO_ADDR
// end ;
69489: LD_VAR 0 2
69493: RET
// export function Negate ( value ) ; begin
69494: LD_INT 0
69496: PPUSH
// result := not value ;
69497: LD_ADDR_VAR 0 2
69501: PUSH
69502: LD_VAR 0 1
69506: NOT
69507: ST_TO_ADDR
// end ;
69508: LD_VAR 0 2
69512: RET
// export function Inc ( value ) ; begin
69513: LD_INT 0
69515: PPUSH
// result := value + 1 ;
69516: LD_ADDR_VAR 0 2
69520: PUSH
69521: LD_VAR 0 1
69525: PUSH
69526: LD_INT 1
69528: PLUS
69529: ST_TO_ADDR
// end ;
69530: LD_VAR 0 2
69534: RET
// export function Dec ( value ) ; begin
69535: LD_INT 0
69537: PPUSH
// result := value - 1 ;
69538: LD_ADDR_VAR 0 2
69542: PUSH
69543: LD_VAR 0 1
69547: PUSH
69548: LD_INT 1
69550: MINUS
69551: ST_TO_ADDR
// end ;
69552: LD_VAR 0 2
69556: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
69557: LD_INT 0
69559: PPUSH
69560: PPUSH
69561: PPUSH
69562: PPUSH
69563: PPUSH
69564: PPUSH
69565: PPUSH
69566: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
69567: LD_VAR 0 1
69571: PPUSH
69572: LD_VAR 0 2
69576: PPUSH
69577: CALL_OW 488
69581: NOT
69582: PUSH
69583: LD_VAR 0 3
69587: PPUSH
69588: LD_VAR 0 4
69592: PPUSH
69593: CALL_OW 488
69597: NOT
69598: OR
69599: IFFALSE 69612
// begin result := - 1 ;
69601: LD_ADDR_VAR 0 5
69605: PUSH
69606: LD_INT 1
69608: NEG
69609: ST_TO_ADDR
// exit ;
69610: GO 69847
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
69612: LD_ADDR_VAR 0 12
69616: PUSH
69617: LD_VAR 0 1
69621: PPUSH
69622: LD_VAR 0 2
69626: PPUSH
69627: LD_VAR 0 3
69631: PPUSH
69632: LD_VAR 0 4
69636: PPUSH
69637: CALL 68695 0 4
69641: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
69642: LD_ADDR_VAR 0 11
69646: PUSH
69647: LD_VAR 0 1
69651: PPUSH
69652: LD_VAR 0 2
69656: PPUSH
69657: LD_VAR 0 12
69661: PUSH
69662: LD_INT 1
69664: ARRAY
69665: PPUSH
69666: LD_VAR 0 12
69670: PUSH
69671: LD_INT 2
69673: ARRAY
69674: PPUSH
69675: CALL_OW 298
69679: ST_TO_ADDR
// distance := 9999 ;
69680: LD_ADDR_VAR 0 10
69684: PUSH
69685: LD_INT 9999
69687: ST_TO_ADDR
// for i := 0 to 5 do
69688: LD_ADDR_VAR 0 6
69692: PUSH
69693: DOUBLE
69694: LD_INT 0
69696: DEC
69697: ST_TO_ADDR
69698: LD_INT 5
69700: PUSH
69701: FOR_TO
69702: IFFALSE 69845
// begin _x := ShiftX ( x1 , i , centerDist ) ;
69704: LD_ADDR_VAR 0 7
69708: PUSH
69709: LD_VAR 0 1
69713: PPUSH
69714: LD_VAR 0 6
69718: PPUSH
69719: LD_VAR 0 11
69723: PPUSH
69724: CALL_OW 272
69728: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
69729: LD_ADDR_VAR 0 8
69733: PUSH
69734: LD_VAR 0 2
69738: PPUSH
69739: LD_VAR 0 6
69743: PPUSH
69744: LD_VAR 0 11
69748: PPUSH
69749: CALL_OW 273
69753: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
69754: LD_VAR 0 7
69758: PPUSH
69759: LD_VAR 0 8
69763: PPUSH
69764: CALL_OW 488
69768: NOT
69769: IFFALSE 69773
// continue ;
69771: GO 69701
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
69773: LD_ADDR_VAR 0 9
69777: PUSH
69778: LD_VAR 0 12
69782: PUSH
69783: LD_INT 1
69785: ARRAY
69786: PPUSH
69787: LD_VAR 0 12
69791: PUSH
69792: LD_INT 2
69794: ARRAY
69795: PPUSH
69796: LD_VAR 0 7
69800: PPUSH
69801: LD_VAR 0 8
69805: PPUSH
69806: CALL_OW 298
69810: ST_TO_ADDR
// if tmp < distance then
69811: LD_VAR 0 9
69815: PUSH
69816: LD_VAR 0 10
69820: LESS
69821: IFFALSE 69843
// begin result := i ;
69823: LD_ADDR_VAR 0 5
69827: PUSH
69828: LD_VAR 0 6
69832: ST_TO_ADDR
// distance := tmp ;
69833: LD_ADDR_VAR 0 10
69837: PUSH
69838: LD_VAR 0 9
69842: ST_TO_ADDR
// end ; end ;
69843: GO 69701
69845: POP
69846: POP
// end ;
69847: LD_VAR 0 5
69851: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
69852: LD_INT 0
69854: PPUSH
69855: PPUSH
// if not driver or not IsInUnit ( driver ) then
69856: LD_VAR 0 1
69860: NOT
69861: PUSH
69862: LD_VAR 0 1
69866: PPUSH
69867: CALL_OW 310
69871: NOT
69872: OR
69873: IFFALSE 69877
// exit ;
69875: GO 69967
// vehicle := IsInUnit ( driver ) ;
69877: LD_ADDR_VAR 0 3
69881: PUSH
69882: LD_VAR 0 1
69886: PPUSH
69887: CALL_OW 310
69891: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
69892: LD_VAR 0 1
69896: PPUSH
69897: LD_STRING \
69899: PUSH
69900: LD_INT 0
69902: PUSH
69903: LD_INT 0
69905: PUSH
69906: LD_INT 0
69908: PUSH
69909: LD_INT 0
69911: PUSH
69912: LD_INT 0
69914: PUSH
69915: LD_INT 0
69917: PUSH
69918: EMPTY
69919: LIST
69920: LIST
69921: LIST
69922: LIST
69923: LIST
69924: LIST
69925: LIST
69926: PUSH
69927: LD_STRING E
69929: PUSH
69930: LD_INT 0
69932: PUSH
69933: LD_INT 0
69935: PUSH
69936: LD_VAR 0 3
69940: PUSH
69941: LD_INT 0
69943: PUSH
69944: LD_INT 0
69946: PUSH
69947: LD_INT 0
69949: PUSH
69950: EMPTY
69951: LIST
69952: LIST
69953: LIST
69954: LIST
69955: LIST
69956: LIST
69957: LIST
69958: PUSH
69959: EMPTY
69960: LIST
69961: LIST
69962: PPUSH
69963: CALL_OW 446
// end ;
69967: LD_VAR 0 2
69971: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
69972: LD_INT 0
69974: PPUSH
69975: PPUSH
// if not driver or not IsInUnit ( driver ) then
69976: LD_VAR 0 1
69980: NOT
69981: PUSH
69982: LD_VAR 0 1
69986: PPUSH
69987: CALL_OW 310
69991: NOT
69992: OR
69993: IFFALSE 69997
// exit ;
69995: GO 70087
// vehicle := IsInUnit ( driver ) ;
69997: LD_ADDR_VAR 0 3
70001: PUSH
70002: LD_VAR 0 1
70006: PPUSH
70007: CALL_OW 310
70011: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
70012: LD_VAR 0 1
70016: PPUSH
70017: LD_STRING \
70019: PUSH
70020: LD_INT 0
70022: PUSH
70023: LD_INT 0
70025: PUSH
70026: LD_INT 0
70028: PUSH
70029: LD_INT 0
70031: PUSH
70032: LD_INT 0
70034: PUSH
70035: LD_INT 0
70037: PUSH
70038: EMPTY
70039: LIST
70040: LIST
70041: LIST
70042: LIST
70043: LIST
70044: LIST
70045: LIST
70046: PUSH
70047: LD_STRING E
70049: PUSH
70050: LD_INT 0
70052: PUSH
70053: LD_INT 0
70055: PUSH
70056: LD_VAR 0 3
70060: PUSH
70061: LD_INT 0
70063: PUSH
70064: LD_INT 0
70066: PUSH
70067: LD_INT 0
70069: PUSH
70070: EMPTY
70071: LIST
70072: LIST
70073: LIST
70074: LIST
70075: LIST
70076: LIST
70077: LIST
70078: PUSH
70079: EMPTY
70080: LIST
70081: LIST
70082: PPUSH
70083: CALL_OW 447
// end ;
70087: LD_VAR 0 2
70091: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
70092: LD_INT 0
70094: PPUSH
70095: PPUSH
70096: PPUSH
// tmp := [ ] ;
70097: LD_ADDR_VAR 0 5
70101: PUSH
70102: EMPTY
70103: ST_TO_ADDR
// for i in units do
70104: LD_ADDR_VAR 0 4
70108: PUSH
70109: LD_VAR 0 1
70113: PUSH
70114: FOR_IN
70115: IFFALSE 70153
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
70117: LD_ADDR_VAR 0 5
70121: PUSH
70122: LD_VAR 0 5
70126: PPUSH
70127: LD_VAR 0 5
70131: PUSH
70132: LD_INT 1
70134: PLUS
70135: PPUSH
70136: LD_VAR 0 4
70140: PPUSH
70141: CALL_OW 256
70145: PPUSH
70146: CALL_OW 2
70150: ST_TO_ADDR
70151: GO 70114
70153: POP
70154: POP
// if not tmp then
70155: LD_VAR 0 5
70159: NOT
70160: IFFALSE 70164
// exit ;
70162: GO 70212
// if asc then
70164: LD_VAR 0 2
70168: IFFALSE 70192
// result := SortListByListAsc ( units , tmp ) else
70170: LD_ADDR_VAR 0 3
70174: PUSH
70175: LD_VAR 0 1
70179: PPUSH
70180: LD_VAR 0 5
70184: PPUSH
70185: CALL_OW 76
70189: ST_TO_ADDR
70190: GO 70212
// result := SortListByListDesc ( units , tmp ) ;
70192: LD_ADDR_VAR 0 3
70196: PUSH
70197: LD_VAR 0 1
70201: PPUSH
70202: LD_VAR 0 5
70206: PPUSH
70207: CALL_OW 77
70211: ST_TO_ADDR
// end ;
70212: LD_VAR 0 3
70216: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
70217: LD_INT 0
70219: PPUSH
70220: PPUSH
// task := GetTaskList ( mech ) ;
70221: LD_ADDR_VAR 0 4
70225: PUSH
70226: LD_VAR 0 1
70230: PPUSH
70231: CALL_OW 437
70235: ST_TO_ADDR
// if not task then
70236: LD_VAR 0 4
70240: NOT
70241: IFFALSE 70245
// exit ;
70243: GO 70287
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
70245: LD_ADDR_VAR 0 3
70249: PUSH
70250: LD_VAR 0 4
70254: PUSH
70255: LD_INT 1
70257: ARRAY
70258: PUSH
70259: LD_INT 1
70261: ARRAY
70262: PUSH
70263: LD_STRING r
70265: EQUAL
70266: PUSH
70267: LD_VAR 0 4
70271: PUSH
70272: LD_INT 1
70274: ARRAY
70275: PUSH
70276: LD_INT 4
70278: ARRAY
70279: PUSH
70280: LD_VAR 0 2
70284: EQUAL
70285: AND
70286: ST_TO_ADDR
// end ;
70287: LD_VAR 0 3
70291: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
70292: LD_INT 0
70294: PPUSH
// SetDir ( unit , d ) ;
70295: LD_VAR 0 1
70299: PPUSH
70300: LD_VAR 0 4
70304: PPUSH
70305: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
70309: LD_VAR 0 1
70313: PPUSH
70314: LD_VAR 0 2
70318: PPUSH
70319: LD_VAR 0 3
70323: PPUSH
70324: LD_VAR 0 5
70328: PPUSH
70329: CALL_OW 48
// end ;
70333: LD_VAR 0 6
70337: RET
// export function ToNaturalNumber ( number ) ; begin
70338: LD_INT 0
70340: PPUSH
// result := number div 1 ;
70341: LD_ADDR_VAR 0 2
70345: PUSH
70346: LD_VAR 0 1
70350: PUSH
70351: LD_INT 1
70353: DIV
70354: ST_TO_ADDR
// if number < 0 then
70355: LD_VAR 0 1
70359: PUSH
70360: LD_INT 0
70362: LESS
70363: IFFALSE 70373
// result := 0 ;
70365: LD_ADDR_VAR 0 2
70369: PUSH
70370: LD_INT 0
70372: ST_TO_ADDR
// end ;
70373: LD_VAR 0 2
70377: RET
// export function SortByClass ( units , class ) ; var un ; begin
70378: LD_INT 0
70380: PPUSH
70381: PPUSH
// if not units or not class then
70382: LD_VAR 0 1
70386: NOT
70387: PUSH
70388: LD_VAR 0 2
70392: NOT
70393: OR
70394: IFFALSE 70398
// exit ;
70396: GO 70493
// result := [ ] ;
70398: LD_ADDR_VAR 0 3
70402: PUSH
70403: EMPTY
70404: ST_TO_ADDR
// for un in units do
70405: LD_ADDR_VAR 0 4
70409: PUSH
70410: LD_VAR 0 1
70414: PUSH
70415: FOR_IN
70416: IFFALSE 70491
// if GetClass ( un ) = class then
70418: LD_VAR 0 4
70422: PPUSH
70423: CALL_OW 257
70427: PUSH
70428: LD_VAR 0 2
70432: EQUAL
70433: IFFALSE 70460
// result := Insert ( result , 1 , un ) else
70435: LD_ADDR_VAR 0 3
70439: PUSH
70440: LD_VAR 0 3
70444: PPUSH
70445: LD_INT 1
70447: PPUSH
70448: LD_VAR 0 4
70452: PPUSH
70453: CALL_OW 2
70457: ST_TO_ADDR
70458: GO 70489
// result := Replace ( result , result + 1 , un ) ;
70460: LD_ADDR_VAR 0 3
70464: PUSH
70465: LD_VAR 0 3
70469: PPUSH
70470: LD_VAR 0 3
70474: PUSH
70475: LD_INT 1
70477: PLUS
70478: PPUSH
70479: LD_VAR 0 4
70483: PPUSH
70484: CALL_OW 1
70488: ST_TO_ADDR
70489: GO 70415
70491: POP
70492: POP
// end ;
70493: LD_VAR 0 3
70497: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
70498: LD_INT 0
70500: PPUSH
70501: PPUSH
70502: PPUSH
70503: PPUSH
70504: PPUSH
70505: PPUSH
70506: PPUSH
// result := [ ] ;
70507: LD_ADDR_VAR 0 4
70511: PUSH
70512: EMPTY
70513: ST_TO_ADDR
// if x - r < 0 then
70514: LD_VAR 0 1
70518: PUSH
70519: LD_VAR 0 3
70523: MINUS
70524: PUSH
70525: LD_INT 0
70527: LESS
70528: IFFALSE 70540
// min_x := 0 else
70530: LD_ADDR_VAR 0 8
70534: PUSH
70535: LD_INT 0
70537: ST_TO_ADDR
70538: GO 70556
// min_x := x - r ;
70540: LD_ADDR_VAR 0 8
70544: PUSH
70545: LD_VAR 0 1
70549: PUSH
70550: LD_VAR 0 3
70554: MINUS
70555: ST_TO_ADDR
// if y - r < 0 then
70556: LD_VAR 0 2
70560: PUSH
70561: LD_VAR 0 3
70565: MINUS
70566: PUSH
70567: LD_INT 0
70569: LESS
70570: IFFALSE 70582
// min_y := 0 else
70572: LD_ADDR_VAR 0 7
70576: PUSH
70577: LD_INT 0
70579: ST_TO_ADDR
70580: GO 70598
// min_y := y - r ;
70582: LD_ADDR_VAR 0 7
70586: PUSH
70587: LD_VAR 0 2
70591: PUSH
70592: LD_VAR 0 3
70596: MINUS
70597: ST_TO_ADDR
// max_x := x + r ;
70598: LD_ADDR_VAR 0 9
70602: PUSH
70603: LD_VAR 0 1
70607: PUSH
70608: LD_VAR 0 3
70612: PLUS
70613: ST_TO_ADDR
// max_y := y + r ;
70614: LD_ADDR_VAR 0 10
70618: PUSH
70619: LD_VAR 0 2
70623: PUSH
70624: LD_VAR 0 3
70628: PLUS
70629: ST_TO_ADDR
// for _x = min_x to max_x do
70630: LD_ADDR_VAR 0 5
70634: PUSH
70635: DOUBLE
70636: LD_VAR 0 8
70640: DEC
70641: ST_TO_ADDR
70642: LD_VAR 0 9
70646: PUSH
70647: FOR_TO
70648: IFFALSE 70749
// for _y = min_y to max_y do
70650: LD_ADDR_VAR 0 6
70654: PUSH
70655: DOUBLE
70656: LD_VAR 0 7
70660: DEC
70661: ST_TO_ADDR
70662: LD_VAR 0 10
70666: PUSH
70667: FOR_TO
70668: IFFALSE 70745
// begin if not ValidHex ( _x , _y ) then
70670: LD_VAR 0 5
70674: PPUSH
70675: LD_VAR 0 6
70679: PPUSH
70680: CALL_OW 488
70684: NOT
70685: IFFALSE 70689
// continue ;
70687: GO 70667
// if GetResourceTypeXY ( _x , _y ) then
70689: LD_VAR 0 5
70693: PPUSH
70694: LD_VAR 0 6
70698: PPUSH
70699: CALL_OW 283
70703: IFFALSE 70743
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
70705: LD_ADDR_VAR 0 4
70709: PUSH
70710: LD_VAR 0 4
70714: PPUSH
70715: LD_VAR 0 4
70719: PUSH
70720: LD_INT 1
70722: PLUS
70723: PPUSH
70724: LD_VAR 0 5
70728: PUSH
70729: LD_VAR 0 6
70733: PUSH
70734: EMPTY
70735: LIST
70736: LIST
70737: PPUSH
70738: CALL_OW 1
70742: ST_TO_ADDR
// end ;
70743: GO 70667
70745: POP
70746: POP
70747: GO 70647
70749: POP
70750: POP
// end ;
70751: LD_VAR 0 4
70755: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
70756: LD_INT 0
70758: PPUSH
70759: PPUSH
70760: PPUSH
70761: PPUSH
70762: PPUSH
70763: PPUSH
70764: PPUSH
70765: PPUSH
// if not units then
70766: LD_VAR 0 1
70770: NOT
70771: IFFALSE 70775
// exit ;
70773: GO 71301
// result := UnitFilter ( units , [ f_ok ] ) ;
70775: LD_ADDR_VAR 0 3
70779: PUSH
70780: LD_VAR 0 1
70784: PPUSH
70785: LD_INT 50
70787: PUSH
70788: EMPTY
70789: LIST
70790: PPUSH
70791: CALL_OW 72
70795: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
70796: LD_ADDR_VAR 0 8
70800: PUSH
70801: LD_VAR 0 1
70805: PUSH
70806: LD_INT 1
70808: ARRAY
70809: PPUSH
70810: CALL_OW 255
70814: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
70815: LD_ADDR_VAR 0 10
70819: PUSH
70820: LD_INT 29
70822: PUSH
70823: LD_EXP 25
70827: PUSH
70828: LD_INT 49
70830: PUSH
70831: EMPTY
70832: LIST
70833: LIST
70834: LIST
70835: ST_TO_ADDR
// if not result then
70836: LD_VAR 0 3
70840: NOT
70841: IFFALSE 70845
// exit ;
70843: GO 71301
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
70845: LD_ADDR_VAR 0 5
70849: PUSH
70850: LD_INT 81
70852: PUSH
70853: LD_VAR 0 8
70857: PUSH
70858: EMPTY
70859: LIST
70860: LIST
70861: PPUSH
70862: CALL_OW 69
70866: ST_TO_ADDR
// for i in result do
70867: LD_ADDR_VAR 0 4
70871: PUSH
70872: LD_VAR 0 3
70876: PUSH
70877: FOR_IN
70878: IFFALSE 71299
// begin tag := GetTag ( i ) + 1 ;
70880: LD_ADDR_VAR 0 9
70884: PUSH
70885: LD_VAR 0 4
70889: PPUSH
70890: CALL_OW 110
70894: PUSH
70895: LD_INT 1
70897: PLUS
70898: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
70899: LD_ADDR_VAR 0 7
70903: PUSH
70904: LD_VAR 0 4
70908: PPUSH
70909: CALL_OW 250
70913: PPUSH
70914: LD_VAR 0 4
70918: PPUSH
70919: CALL_OW 251
70923: PPUSH
70924: LD_INT 6
70926: PPUSH
70927: CALL 70498 0 3
70931: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
70932: LD_VAR 0 4
70936: PPUSH
70937: CALL_OW 247
70941: PUSH
70942: LD_INT 2
70944: EQUAL
70945: PUSH
70946: LD_VAR 0 7
70950: AND
70951: PUSH
70952: LD_VAR 0 4
70956: PPUSH
70957: CALL_OW 264
70961: PUSH
70962: LD_VAR 0 10
70966: IN
70967: NOT
70968: AND
70969: IFFALSE 71008
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
70971: LD_VAR 0 4
70975: PPUSH
70976: LD_VAR 0 7
70980: PUSH
70981: LD_INT 1
70983: ARRAY
70984: PUSH
70985: LD_INT 1
70987: ARRAY
70988: PPUSH
70989: LD_VAR 0 7
70993: PUSH
70994: LD_INT 1
70996: ARRAY
70997: PUSH
70998: LD_INT 2
71000: ARRAY
71001: PPUSH
71002: CALL_OW 116
71006: GO 71297
// if path > tag then
71008: LD_VAR 0 2
71012: PUSH
71013: LD_VAR 0 9
71017: GREATER
71018: IFFALSE 71226
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
71020: LD_ADDR_VAR 0 6
71024: PUSH
71025: LD_VAR 0 5
71029: PPUSH
71030: LD_INT 91
71032: PUSH
71033: LD_VAR 0 4
71037: PUSH
71038: LD_INT 8
71040: PUSH
71041: EMPTY
71042: LIST
71043: LIST
71044: LIST
71045: PPUSH
71046: CALL_OW 72
71050: ST_TO_ADDR
// if nearEnemy then
71051: LD_VAR 0 6
71055: IFFALSE 71124
// begin if GetWeapon ( i ) = ru_time_lapser then
71057: LD_VAR 0 4
71061: PPUSH
71062: CALL_OW 264
71066: PUSH
71067: LD_INT 49
71069: EQUAL
71070: IFFALSE 71098
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
71072: LD_VAR 0 4
71076: PPUSH
71077: LD_VAR 0 6
71081: PPUSH
71082: LD_VAR 0 4
71086: PPUSH
71087: CALL_OW 74
71091: PPUSH
71092: CALL_OW 112
71096: GO 71122
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
71098: LD_VAR 0 4
71102: PPUSH
71103: LD_VAR 0 6
71107: PPUSH
71108: LD_VAR 0 4
71112: PPUSH
71113: CALL_OW 74
71117: PPUSH
71118: CALL_OW 115
// end else
71122: GO 71224
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
71124: LD_VAR 0 4
71128: PPUSH
71129: LD_VAR 0 2
71133: PUSH
71134: LD_VAR 0 9
71138: ARRAY
71139: PUSH
71140: LD_INT 1
71142: ARRAY
71143: PPUSH
71144: LD_VAR 0 2
71148: PUSH
71149: LD_VAR 0 9
71153: ARRAY
71154: PUSH
71155: LD_INT 2
71157: ARRAY
71158: PPUSH
71159: CALL_OW 297
71163: PUSH
71164: LD_INT 6
71166: GREATER
71167: IFFALSE 71210
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
71169: LD_VAR 0 4
71173: PPUSH
71174: LD_VAR 0 2
71178: PUSH
71179: LD_VAR 0 9
71183: ARRAY
71184: PUSH
71185: LD_INT 1
71187: ARRAY
71188: PPUSH
71189: LD_VAR 0 2
71193: PUSH
71194: LD_VAR 0 9
71198: ARRAY
71199: PUSH
71200: LD_INT 2
71202: ARRAY
71203: PPUSH
71204: CALL_OW 114
71208: GO 71224
// SetTag ( i , tag ) ;
71210: LD_VAR 0 4
71214: PPUSH
71215: LD_VAR 0 9
71219: PPUSH
71220: CALL_OW 109
// end else
71224: GO 71297
// if enemy then
71226: LD_VAR 0 5
71230: IFFALSE 71297
// begin if GetWeapon ( i ) = ru_time_lapser then
71232: LD_VAR 0 4
71236: PPUSH
71237: CALL_OW 264
71241: PUSH
71242: LD_INT 49
71244: EQUAL
71245: IFFALSE 71273
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
71247: LD_VAR 0 4
71251: PPUSH
71252: LD_VAR 0 5
71256: PPUSH
71257: LD_VAR 0 4
71261: PPUSH
71262: CALL_OW 74
71266: PPUSH
71267: CALL_OW 112
71271: GO 71297
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
71273: LD_VAR 0 4
71277: PPUSH
71278: LD_VAR 0 5
71282: PPUSH
71283: LD_VAR 0 4
71287: PPUSH
71288: CALL_OW 74
71292: PPUSH
71293: CALL_OW 115
// end ; end ;
71297: GO 70877
71299: POP
71300: POP
// end ;
71301: LD_VAR 0 3
71305: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
71306: LD_INT 0
71308: PPUSH
71309: PPUSH
71310: PPUSH
// if not unit or IsInUnit ( unit ) then
71311: LD_VAR 0 1
71315: NOT
71316: PUSH
71317: LD_VAR 0 1
71321: PPUSH
71322: CALL_OW 310
71326: OR
71327: IFFALSE 71331
// exit ;
71329: GO 71422
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
71331: LD_ADDR_VAR 0 4
71335: PUSH
71336: LD_VAR 0 1
71340: PPUSH
71341: CALL_OW 250
71345: PPUSH
71346: LD_VAR 0 2
71350: PPUSH
71351: LD_INT 1
71353: PPUSH
71354: CALL_OW 272
71358: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
71359: LD_ADDR_VAR 0 5
71363: PUSH
71364: LD_VAR 0 1
71368: PPUSH
71369: CALL_OW 251
71373: PPUSH
71374: LD_VAR 0 2
71378: PPUSH
71379: LD_INT 1
71381: PPUSH
71382: CALL_OW 273
71386: ST_TO_ADDR
// if ValidHex ( x , y ) then
71387: LD_VAR 0 4
71391: PPUSH
71392: LD_VAR 0 5
71396: PPUSH
71397: CALL_OW 488
71401: IFFALSE 71422
// ComTurnXY ( unit , x , y ) ;
71403: LD_VAR 0 1
71407: PPUSH
71408: LD_VAR 0 4
71412: PPUSH
71413: LD_VAR 0 5
71417: PPUSH
71418: CALL_OW 118
// end ;
71422: LD_VAR 0 3
71426: RET
// export function SeeUnits ( side , units ) ; var i ; begin
71427: LD_INT 0
71429: PPUSH
71430: PPUSH
// result := false ;
71431: LD_ADDR_VAR 0 3
71435: PUSH
71436: LD_INT 0
71438: ST_TO_ADDR
// if not units then
71439: LD_VAR 0 2
71443: NOT
71444: IFFALSE 71448
// exit ;
71446: GO 71493
// for i in units do
71448: LD_ADDR_VAR 0 4
71452: PUSH
71453: LD_VAR 0 2
71457: PUSH
71458: FOR_IN
71459: IFFALSE 71491
// if See ( side , i ) then
71461: LD_VAR 0 1
71465: PPUSH
71466: LD_VAR 0 4
71470: PPUSH
71471: CALL_OW 292
71475: IFFALSE 71489
// begin result := true ;
71477: LD_ADDR_VAR 0 3
71481: PUSH
71482: LD_INT 1
71484: ST_TO_ADDR
// exit ;
71485: POP
71486: POP
71487: GO 71493
// end ;
71489: GO 71458
71491: POP
71492: POP
// end ;
71493: LD_VAR 0 3
71497: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
71498: LD_INT 0
71500: PPUSH
71501: PPUSH
71502: PPUSH
71503: PPUSH
// if not unit or not points then
71504: LD_VAR 0 1
71508: NOT
71509: PUSH
71510: LD_VAR 0 2
71514: NOT
71515: OR
71516: IFFALSE 71520
// exit ;
71518: GO 71610
// dist := 99999 ;
71520: LD_ADDR_VAR 0 5
71524: PUSH
71525: LD_INT 99999
71527: ST_TO_ADDR
// for i in points do
71528: LD_ADDR_VAR 0 4
71532: PUSH
71533: LD_VAR 0 2
71537: PUSH
71538: FOR_IN
71539: IFFALSE 71608
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
71541: LD_ADDR_VAR 0 6
71545: PUSH
71546: LD_VAR 0 1
71550: PPUSH
71551: LD_VAR 0 4
71555: PUSH
71556: LD_INT 1
71558: ARRAY
71559: PPUSH
71560: LD_VAR 0 4
71564: PUSH
71565: LD_INT 2
71567: ARRAY
71568: PPUSH
71569: CALL_OW 297
71573: ST_TO_ADDR
// if tmpDist < dist then
71574: LD_VAR 0 6
71578: PUSH
71579: LD_VAR 0 5
71583: LESS
71584: IFFALSE 71606
// begin result := i ;
71586: LD_ADDR_VAR 0 3
71590: PUSH
71591: LD_VAR 0 4
71595: ST_TO_ADDR
// dist := tmpDist ;
71596: LD_ADDR_VAR 0 5
71600: PUSH
71601: LD_VAR 0 6
71605: ST_TO_ADDR
// end ; end ;
71606: GO 71538
71608: POP
71609: POP
// end ;
71610: LD_VAR 0 3
71614: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
71615: LD_INT 0
71617: PPUSH
// uc_side := side ;
71618: LD_ADDR_OWVAR 20
71622: PUSH
71623: LD_VAR 0 1
71627: ST_TO_ADDR
// uc_nation := 3 ;
71628: LD_ADDR_OWVAR 21
71632: PUSH
71633: LD_INT 3
71635: ST_TO_ADDR
// vc_chassis := 25 ;
71636: LD_ADDR_OWVAR 37
71640: PUSH
71641: LD_INT 25
71643: ST_TO_ADDR
// vc_engine := engine_siberite ;
71644: LD_ADDR_OWVAR 39
71648: PUSH
71649: LD_INT 3
71651: ST_TO_ADDR
// vc_control := control_computer ;
71652: LD_ADDR_OWVAR 38
71656: PUSH
71657: LD_INT 3
71659: ST_TO_ADDR
// vc_weapon := 59 ;
71660: LD_ADDR_OWVAR 40
71664: PUSH
71665: LD_INT 59
71667: ST_TO_ADDR
// result := CreateVehicle ;
71668: LD_ADDR_VAR 0 5
71672: PUSH
71673: CALL_OW 45
71677: ST_TO_ADDR
// SetDir ( result , d ) ;
71678: LD_VAR 0 5
71682: PPUSH
71683: LD_VAR 0 4
71687: PPUSH
71688: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
71692: LD_VAR 0 5
71696: PPUSH
71697: LD_VAR 0 2
71701: PPUSH
71702: LD_VAR 0 3
71706: PPUSH
71707: LD_INT 0
71709: PPUSH
71710: CALL_OW 48
// end ;
71714: LD_VAR 0 5
71718: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
71719: LD_INT 0
71721: PPUSH
71722: PPUSH
71723: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
71724: LD_ADDR_VAR 0 2
71728: PUSH
71729: LD_INT 0
71731: PUSH
71732: LD_INT 0
71734: PUSH
71735: LD_INT 0
71737: PUSH
71738: LD_INT 0
71740: PUSH
71741: EMPTY
71742: LIST
71743: LIST
71744: LIST
71745: LIST
71746: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
71747: LD_VAR 0 1
71751: NOT
71752: PUSH
71753: LD_VAR 0 1
71757: PPUSH
71758: CALL_OW 264
71762: PUSH
71763: LD_INT 12
71765: PUSH
71766: LD_INT 51
71768: PUSH
71769: LD_INT 32
71771: PUSH
71772: LD_EXP 22
71776: PUSH
71777: EMPTY
71778: LIST
71779: LIST
71780: LIST
71781: LIST
71782: IN
71783: NOT
71784: OR
71785: IFFALSE 71789
// exit ;
71787: GO 71887
// for i := 1 to 3 do
71789: LD_ADDR_VAR 0 3
71793: PUSH
71794: DOUBLE
71795: LD_INT 1
71797: DEC
71798: ST_TO_ADDR
71799: LD_INT 3
71801: PUSH
71802: FOR_TO
71803: IFFALSE 71885
// begin tmp := GetCargo ( cargo , i ) ;
71805: LD_ADDR_VAR 0 4
71809: PUSH
71810: LD_VAR 0 1
71814: PPUSH
71815: LD_VAR 0 3
71819: PPUSH
71820: CALL_OW 289
71824: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
71825: LD_ADDR_VAR 0 2
71829: PUSH
71830: LD_VAR 0 2
71834: PPUSH
71835: LD_VAR 0 3
71839: PPUSH
71840: LD_VAR 0 4
71844: PPUSH
71845: CALL_OW 1
71849: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
71850: LD_ADDR_VAR 0 2
71854: PUSH
71855: LD_VAR 0 2
71859: PPUSH
71860: LD_INT 4
71862: PPUSH
71863: LD_VAR 0 2
71867: PUSH
71868: LD_INT 4
71870: ARRAY
71871: PUSH
71872: LD_VAR 0 4
71876: PLUS
71877: PPUSH
71878: CALL_OW 1
71882: ST_TO_ADDR
// end ;
71883: GO 71802
71885: POP
71886: POP
// end ;
71887: LD_VAR 0 2
71891: RET
// export function Length ( array ) ; begin
71892: LD_INT 0
71894: PPUSH
// result := array + 0 ;
71895: LD_ADDR_VAR 0 2
71899: PUSH
71900: LD_VAR 0 1
71904: PUSH
71905: LD_INT 0
71907: PLUS
71908: ST_TO_ADDR
// end ; end_of_file
71909: LD_VAR 0 2
71913: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
71914: LD_VAR 0 1
71918: PUSH
71919: LD_INT 200
71921: DOUBLE
71922: GREATEREQUAL
71923: IFFALSE 71931
71925: LD_INT 299
71927: DOUBLE
71928: LESSEQUAL
71929: IFTRUE 71933
71931: GO 71965
71933: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
71934: LD_VAR 0 1
71938: PPUSH
71939: LD_VAR 0 2
71943: PPUSH
71944: LD_VAR 0 3
71948: PPUSH
71949: LD_VAR 0 4
71953: PPUSH
71954: LD_VAR 0 5
71958: PPUSH
71959: CALL 27064 0 5
71963: GO 72042
71965: LD_INT 300
71967: DOUBLE
71968: GREATEREQUAL
71969: IFFALSE 71977
71971: LD_INT 399
71973: DOUBLE
71974: LESSEQUAL
71975: IFTRUE 71979
71977: GO 72041
71979: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
71980: LD_VAR 0 1
71984: PPUSH
71985: LD_VAR 0 2
71989: PPUSH
71990: LD_VAR 0 3
71994: PPUSH
71995: LD_VAR 0 4
71999: PPUSH
72000: LD_VAR 0 5
72004: PPUSH
72005: LD_VAR 0 6
72009: PPUSH
72010: LD_VAR 0 7
72014: PPUSH
72015: LD_VAR 0 8
72019: PPUSH
72020: LD_VAR 0 9
72024: PPUSH
72025: LD_VAR 0 10
72029: PPUSH
72030: LD_VAR 0 11
72034: PPUSH
72035: CALL 24706 0 11
72039: GO 72042
72041: POP
// end ;
72042: PPOPN 11
72044: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
72045: LD_VAR 0 1
72049: PPUSH
72050: LD_VAR 0 2
72054: PPUSH
72055: LD_VAR 0 3
72059: PPUSH
72060: LD_VAR 0 4
72064: PPUSH
72065: LD_VAR 0 5
72069: PPUSH
72070: CALL 26800 0 5
// end ; end_of_file
72074: PPOPN 5
72076: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
72077: LD_VAR 0 1
72081: PPUSH
72082: LD_VAR 0 2
72086: PPUSH
72087: LD_VAR 0 3
72091: PPUSH
72092: LD_VAR 0 4
72096: PPUSH
72097: LD_VAR 0 5
72101: PPUSH
72102: LD_VAR 0 6
72106: PPUSH
72107: CALL 12399 0 6
// end ;
72111: PPOPN 6
72113: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
72114: LD_INT 0
72116: PPUSH
// begin if not units then
72117: LD_VAR 0 1
72121: NOT
72122: IFFALSE 72126
// exit ;
72124: GO 72214
// if p1 = 1 then
72126: LD_VAR 0 2
72130: PUSH
72131: LD_INT 1
72133: EQUAL
72134: IFFALSE 72214
// begin if p2 = 1 then
72136: LD_VAR 0 3
72140: PUSH
72141: LD_INT 1
72143: EQUAL
72144: IFFALSE 72175
// begin for i in units do
72146: LD_ADDR_VAR 0 7
72150: PUSH
72151: LD_VAR 0 1
72155: PUSH
72156: FOR_IN
72157: IFFALSE 72173
// begin SetUnitAttackType ( i , 3 ) ;
72159: LD_VAR 0 7
72163: PPUSH
72164: LD_INT 3
72166: PPUSH
72167: CALL_OW 603
// end ;
72171: GO 72156
72173: POP
72174: POP
// end ; if p2 = 2 then
72175: LD_VAR 0 3
72179: PUSH
72180: LD_INT 2
72182: EQUAL
72183: IFFALSE 72214
// begin for i in units do
72185: LD_ADDR_VAR 0 7
72189: PUSH
72190: LD_VAR 0 1
72194: PUSH
72195: FOR_IN
72196: IFFALSE 72212
// begin SetUnitAttackType ( i , 1 ) ;
72198: LD_VAR 0 7
72202: PPUSH
72203: LD_INT 1
72205: PPUSH
72206: CALL_OW 603
// end ;
72210: GO 72195
72212: POP
72213: POP
// end ; end ; end ;
72214: PPOPN 7
72216: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
72217: CALL 12374 0 0
// end ;
72221: PPOPN 1
72223: END
