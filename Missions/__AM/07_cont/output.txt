// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// Init ;
   8: CALL 44 0 0
// DebugMode ;
  12: CALL 265 0 0
// AnimateTrees ( true ) ;
  16: LD_INT 1
  18: PPUSH
  19: CALL_OW 573
// CreateNature ;
  23: CALL 1543 0 0
// PrepareRussians ;
  27: CALL 4553 0 0
// PrepareAmericans ;
  31: CALL 3423 0 0
// Action ;
  35: CALL 8457 0 0
// SaveForQuickRestart ;
  39: CALL_OW 22
// end ;
  43: END
// export debug ; export mission_prev_prefix , mission_prefix ; export buildings_counter , time_to_end , can_end , must_end , kill_counter ; function Init ; begin
  44: LD_INT 0
  46: PPUSH
// debug := false ;
  47: LD_ADDR_EXP 1
  51: PUSH
  52: LD_INT 0
  54: ST_TO_ADDR
// mission_prefix := 07c_ ;
  55: LD_ADDR_EXP 3
  59: PUSH
  60: LD_STRING 07c_
  62: ST_TO_ADDR
// mission_prev_prefix := 07_ ;
  63: LD_ADDR_EXP 2
  67: PUSH
  68: LD_STRING 07_
  70: ST_TO_ADDR
// buildings_counter := 0 ;
  71: LD_ADDR_EXP 4
  75: PUSH
  76: LD_INT 0
  78: ST_TO_ADDR
// time_to_end := [ [ 32 32$00 , 29 29$00 , 26 26$00 , 25 25$00 ] [ Difficulty ] , [ 38 38$00 , 35 35$00 , 32 32$00 , 31 31$00 ] [ Difficulty ] , [ 44 44$00 , 41 41$00 , 38 38$00 , 37 37$00 ] [ Difficulty ] ] ;
  79: LD_ADDR_EXP 5
  83: PUSH
  84: LD_INT 67200
  86: PUSH
  87: LD_INT 60900
  89: PUSH
  90: LD_INT 54600
  92: PUSH
  93: LD_INT 52500
  95: PUSH
  96: EMPTY
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: PUSH
 102: LD_OWVAR 67
 106: ARRAY
 107: PUSH
 108: LD_INT 79800
 110: PUSH
 111: LD_INT 73500
 113: PUSH
 114: LD_INT 67200
 116: PUSH
 117: LD_INT 65100
 119: PUSH
 120: EMPTY
 121: LIST
 122: LIST
 123: LIST
 124: LIST
 125: PUSH
 126: LD_OWVAR 67
 130: ARRAY
 131: PUSH
 132: LD_INT 92400
 134: PUSH
 135: LD_INT 86100
 137: PUSH
 138: LD_INT 79800
 140: PUSH
 141: LD_INT 77700
 143: PUSH
 144: EMPTY
 145: LIST
 146: LIST
 147: LIST
 148: LIST
 149: PUSH
 150: LD_OWVAR 67
 154: ARRAY
 155: PUSH
 156: EMPTY
 157: LIST
 158: LIST
 159: LIST
 160: ST_TO_ADDR
// can_end := false ;
 161: LD_ADDR_EXP 6
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// must_end := false ;
 169: LD_ADDR_EXP 7
 173: PUSH
 174: LD_INT 0
 176: ST_TO_ADDR
// kill_counter := 0 ;
 177: LD_ADDR_EXP 8
 181: PUSH
 182: LD_INT 0
 184: ST_TO_ADDR
// end ;
 185: LD_VAR 0 1
 189: RET
// every 0 0$01 trigger not debug do
 190: LD_EXP 1
 194: NOT
 195: IFFALSE 264
 197: GO 199
 199: DISABLE
// begin enable ;
 200: ENABLE
// if not must_end then
 201: LD_EXP 7
 205: NOT
 206: IFFALSE 227
// display_strings := [ #Am07-1 , tick ] else
 208: LD_ADDR_OWVAR 47
 212: PUSH
 213: LD_STRING #Am07-1
 215: PUSH
 216: LD_OWVAR 1
 220: PUSH
 221: EMPTY
 222: LIST
 223: LIST
 224: ST_TO_ADDR
 225: GO 264
// display_strings := [ #Am07-1 , tick , #Am07-2 , time_to_end [ 3 ] - tick ] ;
 227: LD_ADDR_OWVAR 47
 231: PUSH
 232: LD_STRING #Am07-1
 234: PUSH
 235: LD_OWVAR 1
 239: PUSH
 240: LD_STRING #Am07-2
 242: PUSH
 243: LD_EXP 5
 247: PUSH
 248: LD_INT 3
 250: ARRAY
 251: PUSH
 252: LD_OWVAR 1
 256: MINUS
 257: PUSH
 258: EMPTY
 259: LIST
 260: LIST
 261: LIST
 262: LIST
 263: ST_TO_ADDR
// end ;
 264: END
// function DebugMode ; var i ; begin
 265: LD_INT 0
 267: PPUSH
 268: PPUSH
// if not debug then
 269: LD_EXP 1
 273: NOT
 274: IFFALSE 278
// exit ;
 276: GO 285
// FogOff ( 1 ) ;
 278: LD_INT 1
 280: PPUSH
 281: CALL_OW 344
// end ;
 285: LD_VAR 0 1
 289: RET
// every 3 trigger debug do var i , filter ;
 290: LD_EXP 1
 294: IFFALSE 383
 296: GO 298
 298: DISABLE
 299: LD_INT 0
 301: PPUSH
 302: PPUSH
// begin enable ;
 303: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 500 ] ] ] ) ;
 304: LD_ADDR_VAR 0 2
 308: PUSH
 309: LD_INT 22
 311: PUSH
 312: LD_INT 1
 314: PUSH
 315: EMPTY
 316: LIST
 317: LIST
 318: PUSH
 319: LD_INT 3
 321: PUSH
 322: LD_INT 24
 324: PUSH
 325: LD_INT 500
 327: PUSH
 328: EMPTY
 329: LIST
 330: LIST
 331: PUSH
 332: EMPTY
 333: LIST
 334: LIST
 335: PUSH
 336: EMPTY
 337: LIST
 338: LIST
 339: PPUSH
 340: CALL_OW 69
 344: ST_TO_ADDR
// if not filter then
 345: LD_VAR 0 2
 349: NOT
 350: IFFALSE 354
// exit ;
 352: GO 383
// for i in filter do
 354: LD_ADDR_VAR 0 1
 358: PUSH
 359: LD_VAR 0 2
 363: PUSH
 364: FOR_IN
 365: IFFALSE 381
// SetLives ( i , 1000 ) ;
 367: LD_VAR 0 1
 371: PPUSH
 372: LD_INT 1000
 374: PPUSH
 375: CALL_OW 234
 379: GO 364
 381: POP
 382: POP
// end ;
 383: PPOPN 2
 385: END
// every 0 0$1 trigger kill_counter >= 20 do
 386: LD_EXP 8
 390: PUSH
 391: LD_INT 20
 393: GREATEREQUAL
 394: IFFALSE 406
 396: GO 398
 398: DISABLE
// SetAchievement ( ACH_HITMAN ) ;
 399: LD_STRING ACH_HITMAN
 401: PPUSH
 402: CALL_OW 543
 406: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] ] ) >= 3 do
 407: LD_INT 22
 409: PUSH
 410: LD_INT 1
 412: PUSH
 413: EMPTY
 414: LIST
 415: LIST
 416: PUSH
 417: LD_INT 23
 419: PUSH
 420: LD_INT 3
 422: PUSH
 423: EMPTY
 424: LIST
 425: LIST
 426: PUSH
 427: LD_INT 21
 429: PUSH
 430: LD_INT 2
 432: PUSH
 433: EMPTY
 434: LIST
 435: LIST
 436: PUSH
 437: EMPTY
 438: LIST
 439: LIST
 440: LIST
 441: PPUSH
 442: CALL_OW 69
 446: PUSH
 447: LD_INT 3
 449: GREATEREQUAL
 450: IFFALSE 462
 452: GO 454
 454: DISABLE
// SetAchievement ( ACH_TANKACE ) ;
 455: LD_STRING ACH_TANKACE
 457: PPUSH
 458: CALL_OW 543
 462: END
// every 0 0$1 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) = 0 do
 463: LD_INT 2
 465: PUSH
 466: LD_INT 30
 468: PUSH
 469: LD_INT 0
 471: PUSH
 472: EMPTY
 473: LIST
 474: LIST
 475: PUSH
 476: LD_INT 30
 478: PUSH
 479: LD_INT 1
 481: PUSH
 482: EMPTY
 483: LIST
 484: LIST
 485: PUSH
 486: EMPTY
 487: LIST
 488: LIST
 489: LIST
 490: PPUSH
 491: CALL_OW 69
 495: PUSH
 496: LD_INT 0
 498: EQUAL
 499: IFFALSE 511
 501: GO 503
 503: DISABLE
// SetAchievement ( ACH_COMMANDO ) ; end_of_file
 504: LD_STRING ACH_COMMANDO
 506: PPUSH
 507: CALL_OW 543
 511: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 512: LD_INT 0
 514: PPUSH
// uc_side := side ;
 515: LD_ADDR_OWVAR 20
 519: PUSH
 520: LD_VAR 0 1
 524: ST_TO_ADDR
// uc_nation := nation ;
 525: LD_ADDR_OWVAR 21
 529: PUSH
 530: LD_VAR 0 2
 534: ST_TO_ADDR
// vc_chassis := chassis ;
 535: LD_ADDR_OWVAR 37
 539: PUSH
 540: LD_VAR 0 3
 544: ST_TO_ADDR
// vc_engine := engine ;
 545: LD_ADDR_OWVAR 39
 549: PUSH
 550: LD_VAR 0 4
 554: ST_TO_ADDR
// vc_control := control ;
 555: LD_ADDR_OWVAR 38
 559: PUSH
 560: LD_VAR 0 5
 564: ST_TO_ADDR
// vc_weapon := weapon ;
 565: LD_ADDR_OWVAR 40
 569: PUSH
 570: LD_VAR 0 6
 574: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 575: LD_ADDR_OWVAR 41
 579: PUSH
 580: LD_VAR 0 7
 584: ST_TO_ADDR
// result := CreateVehicle ;
 585: LD_ADDR_VAR 0 8
 589: PUSH
 590: CALL_OW 45
 594: ST_TO_ADDR
// end ;
 595: LD_VAR 0 8
 599: RET
// export function GetRandom ( sex ) ; var i , filter ; begin
 600: LD_INT 0
 602: PPUSH
 603: PPUSH
 604: PPUSH
// filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam ] ;
 605: LD_ADDR_VAR 0 4
 609: PUSH
 610: LD_INT 22
 612: PUSH
 613: LD_INT 1
 615: PUSH
 616: EMPTY
 617: LIST
 618: LIST
 619: PUSH
 620: LD_INT 21
 622: PUSH
 623: LD_INT 1
 625: PUSH
 626: EMPTY
 627: LIST
 628: LIST
 629: PUSH
 630: LD_INT 50
 632: PUSH
 633: EMPTY
 634: LIST
 635: PUSH
 636: EMPTY
 637: LIST
 638: LIST
 639: LIST
 640: PPUSH
 641: CALL_OW 69
 645: PUSH
 646: LD_EXP 9
 650: PUSH
 651: LD_EXP 10
 655: PUSH
 656: LD_EXP 11
 660: PUSH
 661: LD_EXP 12
 665: PUSH
 666: LD_EXP 13
 670: PUSH
 671: LD_EXP 14
 675: PUSH
 676: LD_EXP 15
 680: PUSH
 681: LD_EXP 16
 685: PUSH
 686: LD_EXP 18
 690: PUSH
 691: LD_EXP 17
 695: PUSH
 696: EMPTY
 697: LIST
 698: LIST
 699: LIST
 700: LIST
 701: LIST
 702: LIST
 703: LIST
 704: LIST
 705: LIST
 706: LIST
 707: DIFF
 708: ST_TO_ADDR
// if not filter then
 709: LD_VAR 0 4
 713: NOT
 714: IFFALSE 718
// exit ;
 716: GO 745
// result := UnitFilter ( filter , [ f_sex , sex ] ) ;
 718: LD_ADDR_VAR 0 2
 722: PUSH
 723: LD_VAR 0 4
 727: PPUSH
 728: LD_INT 26
 730: PUSH
 731: LD_VAR 0 1
 735: PUSH
 736: EMPTY
 737: LIST
 738: LIST
 739: PPUSH
 740: CALL_OW 72
 744: ST_TO_ADDR
// end ;
 745: LD_VAR 0 2
 749: RET
// export function SayX ( units , ident ) ; var i ; begin
 750: LD_INT 0
 752: PPUSH
 753: PPUSH
// result := false ;
 754: LD_ADDR_VAR 0 3
 758: PUSH
 759: LD_INT 0
 761: ST_TO_ADDR
// if not units then
 762: LD_VAR 0 1
 766: NOT
 767: IFFALSE 771
// exit ;
 769: GO 825
// for i in units do
 771: LD_ADDR_VAR 0 4
 775: PUSH
 776: LD_VAR 0 1
 780: PUSH
 781: FOR_IN
 782: IFFALSE 823
// if IsOk ( i ) then
 784: LD_VAR 0 4
 788: PPUSH
 789: CALL_OW 302
 793: IFFALSE 821
// begin Say ( i , ident ) ;
 795: LD_VAR 0 4
 799: PPUSH
 800: LD_VAR 0 2
 804: PPUSH
 805: CALL_OW 88
// result := i ;
 809: LD_ADDR_VAR 0 3
 813: PUSH
 814: LD_VAR 0 4
 818: ST_TO_ADDR
// break ;
 819: GO 823
// end ;
 821: GO 781
 823: POP
 824: POP
// end ;
 825: LD_VAR 0 3
 829: RET
// export function GoToAnotherTower ( un , b , x , y ) ; var i , filter , barracks , side ; begin
 830: LD_INT 0
 832: PPUSH
 833: PPUSH
 834: PPUSH
 835: PPUSH
 836: PPUSH
// if not un or not IsOk ( un ) then
 837: LD_VAR 0 1
 841: NOT
 842: PUSH
 843: LD_VAR 0 1
 847: PPUSH
 848: CALL_OW 302
 852: NOT
 853: OR
 854: IFFALSE 858
// exit ;
 856: GO 1148
// side := GetSide ( un ) ;
 858: LD_ADDR_VAR 0 9
 862: PUSH
 863: LD_VAR 0 1
 867: PPUSH
 868: CALL_OW 255
 872: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_ok ] , [ f_empty ] ] ) diff b ;
 873: LD_ADDR_VAR 0 7
 877: PUSH
 878: LD_INT 22
 880: PUSH
 881: LD_VAR 0 9
 885: PUSH
 886: EMPTY
 887: LIST
 888: LIST
 889: PUSH
 890: LD_INT 30
 892: PUSH
 893: LD_INT 32
 895: PUSH
 896: EMPTY
 897: LIST
 898: LIST
 899: PUSH
 900: LD_INT 50
 902: PUSH
 903: EMPTY
 904: LIST
 905: PUSH
 906: LD_INT 58
 908: PUSH
 909: EMPTY
 910: LIST
 911: PUSH
 912: EMPTY
 913: LIST
 914: LIST
 915: LIST
 916: LIST
 917: PPUSH
 918: CALL_OW 69
 922: PUSH
 923: LD_VAR 0 2
 927: DIFF
 928: ST_TO_ADDR
// barracks := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_barracks ] ] ) ;
 929: LD_ADDR_VAR 0 8
 933: PUSH
 934: LD_INT 22
 936: PUSH
 937: LD_VAR 0 9
 941: PUSH
 942: EMPTY
 943: LIST
 944: LIST
 945: PUSH
 946: LD_INT 30
 948: PUSH
 949: LD_INT 5
 951: PUSH
 952: EMPTY
 953: LIST
 954: LIST
 955: PUSH
 956: EMPTY
 957: LIST
 958: LIST
 959: PPUSH
 960: CALL_OW 69
 964: ST_TO_ADDR
// if not filter then
 965: LD_VAR 0 7
 969: NOT
 970: IFFALSE 1060
// begin ComMoveXY ( un , x , y ) ;
 972: LD_VAR 0 1
 976: PPUSH
 977: LD_VAR 0 3
 981: PPUSH
 982: LD_VAR 0 4
 986: PPUSH
 987: CALL_OW 111
// if barracks then
 991: LD_VAR 0 8
 995: IFFALSE 1058
// for i in barracks do
 997: LD_ADDR_VAR 0 6
1001: PUSH
1002: LD_VAR 0 8
1006: PUSH
1007: FOR_IN
1008: IFFALSE 1056
// begin if UnitsInside ( i ) < 6 and IsOk ( i ) then
1010: LD_VAR 0 6
1014: PPUSH
1015: CALL_OW 313
1019: PUSH
1020: LD_INT 6
1022: LESS
1023: PUSH
1024: LD_VAR 0 6
1028: PPUSH
1029: CALL_OW 302
1033: AND
1034: IFFALSE 1054
// begin AddComEnterUnit ( un , i ) ;
1036: LD_VAR 0 1
1040: PPUSH
1041: LD_VAR 0 6
1045: PPUSH
1046: CALL_OW 180
// exit ;
1050: POP
1051: POP
1052: GO 1148
// end ; end ;
1054: GO 1007
1056: POP
1057: POP
// end else
1058: GO 1148
// begin filter := SortByDistanceUnit ( un , filter , true , true ) ;
1060: LD_ADDR_VAR 0 7
1064: PUSH
1065: LD_VAR 0 1
1069: PPUSH
1070: LD_VAR 0 7
1074: PPUSH
1075: LD_INT 1
1077: PPUSH
1078: LD_INT 1
1080: PPUSH
1081: CALL 36566 0 4
1085: ST_TO_ADDR
// for i in filter do
1086: LD_ADDR_VAR 0 6
1090: PUSH
1091: LD_VAR 0 7
1095: PUSH
1096: FOR_IN
1097: IFFALSE 1146
// if GetTag ( i ) <> 7 then
1099: LD_VAR 0 6
1103: PPUSH
1104: CALL_OW 110
1108: PUSH
1109: LD_INT 7
1111: NONEQUAL
1112: IFFALSE 1144
// begin ComEnterUnit ( un , i ) ;
1114: LD_VAR 0 1
1118: PPUSH
1119: LD_VAR 0 6
1123: PPUSH
1124: CALL_OW 120
// SetTag ( i , 7 ) ;
1128: LD_VAR 0 6
1132: PPUSH
1133: LD_INT 7
1135: PPUSH
1136: CALL_OW 109
// exit ;
1140: POP
1141: POP
1142: GO 1148
// end ;
1144: GO 1096
1146: POP
1147: POP
// end ; end ;
1148: LD_VAR 0 5
1152: RET
// export function BaseNeedEnergy ( base ) ; var i , tmp ; begin
1153: LD_INT 0
1155: PPUSH
1156: PPUSH
1157: PPUSH
// if not base then
1158: LD_VAR 0 1
1162: NOT
1163: IFFALSE 1167
// exit ;
1165: GO 1225
// tmp := GetEnergy ( GetBase ( base ) ) ;
1167: LD_ADDR_VAR 0 4
1171: PUSH
1172: LD_VAR 0 1
1176: PPUSH
1177: CALL_OW 274
1181: PPUSH
1182: CALL_OW 278
1186: ST_TO_ADDR
// if tmp [ 1 ] > tmp [ 4 ] then
1187: LD_VAR 0 4
1191: PUSH
1192: LD_INT 1
1194: ARRAY
1195: PUSH
1196: LD_VAR 0 4
1200: PUSH
1201: LD_INT 4
1203: ARRAY
1204: GREATER
1205: IFFALSE 1217
// result := true else
1207: LD_ADDR_VAR 0 2
1211: PUSH
1212: LD_INT 1
1214: ST_TO_ADDR
1215: GO 1225
// result := false ;
1217: LD_ADDR_VAR 0 2
1221: PUSH
1222: LD_INT 0
1224: ST_TO_ADDR
// end ;
1225: LD_VAR 0 2
1229: RET
// export function FilterPeople ( side ) ; begin
1230: LD_INT 0
1232: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] ] ) ;
1233: LD_ADDR_VAR 0 2
1237: PUSH
1238: LD_INT 22
1240: PUSH
1241: LD_VAR 0 1
1245: PUSH
1246: EMPTY
1247: LIST
1248: LIST
1249: PUSH
1250: LD_INT 21
1252: PUSH
1253: LD_INT 1
1255: PUSH
1256: EMPTY
1257: LIST
1258: LIST
1259: PUSH
1260: EMPTY
1261: LIST
1262: LIST
1263: PPUSH
1264: CALL_OW 69
1268: ST_TO_ADDR
// end ;
1269: LD_VAR 0 2
1273: RET
// export function FilterDrivers ( side ) ; begin
1274: LD_INT 0
1276: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_outside ] ] ] ) ;
1277: LD_ADDR_VAR 0 2
1281: PUSH
1282: LD_INT 22
1284: PUSH
1285: LD_VAR 0 1
1289: PUSH
1290: EMPTY
1291: LIST
1292: LIST
1293: PUSH
1294: LD_INT 3
1296: PUSH
1297: LD_INT 56
1299: PUSH
1300: EMPTY
1301: LIST
1302: PUSH
1303: EMPTY
1304: LIST
1305: LIST
1306: PUSH
1307: EMPTY
1308: LIST
1309: LIST
1310: PPUSH
1311: CALL_OW 69
1315: ST_TO_ADDR
// end ;
1316: LD_VAR 0 2
1320: RET
// export function FilterPeopleArea ( side , area ) ; begin
1321: LD_INT 0
1323: PPUSH
// result := FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ;
1324: LD_ADDR_VAR 0 3
1328: PUSH
1329: LD_VAR 0 2
1333: PPUSH
1334: LD_INT 22
1336: PUSH
1337: LD_INT 1
1339: PUSH
1340: EMPTY
1341: LIST
1342: LIST
1343: PUSH
1344: LD_INT 21
1346: PUSH
1347: LD_INT 1
1349: PUSH
1350: EMPTY
1351: LIST
1352: LIST
1353: PUSH
1354: EMPTY
1355: LIST
1356: LIST
1357: PPUSH
1358: CALL_OW 70
1362: ST_TO_ADDR
// end ;
1363: LD_VAR 0 3
1367: RET
// export function FilterDriversArea ( side , area ) ; var i , tmp ; begin
1368: LD_INT 0
1370: PPUSH
1371: PPUSH
1372: PPUSH
// tmp := FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) ;
1373: LD_ADDR_VAR 0 5
1377: PUSH
1378: LD_VAR 0 2
1382: PPUSH
1383: LD_INT 22
1385: PUSH
1386: LD_INT 1
1388: PUSH
1389: EMPTY
1390: LIST
1391: LIST
1392: PUSH
1393: LD_INT 21
1395: PUSH
1396: LD_INT 2
1398: PUSH
1399: EMPTY
1400: LIST
1401: LIST
1402: PUSH
1403: LD_INT 3
1405: PUSH
1406: LD_INT 58
1408: PUSH
1409: EMPTY
1410: LIST
1411: PUSH
1412: EMPTY
1413: LIST
1414: LIST
1415: PUSH
1416: EMPTY
1417: LIST
1418: LIST
1419: LIST
1420: PPUSH
1421: CALL_OW 70
1425: ST_TO_ADDR
// result := [ ] ;
1426: LD_ADDR_VAR 0 3
1430: PUSH
1431: EMPTY
1432: ST_TO_ADDR
// if not tmp then
1433: LD_VAR 0 5
1437: NOT
1438: IFFALSE 1442
// exit ;
1440: GO 1494
// for i in tmp do
1442: LD_ADDR_VAR 0 4
1446: PUSH
1447: LD_VAR 0 5
1451: PUSH
1452: FOR_IN
1453: IFFALSE 1478
// result := result union IsDrivenBy ( i ) ;
1455: LD_ADDR_VAR 0 3
1459: PUSH
1460: LD_VAR 0 3
1464: PUSH
1465: LD_VAR 0 4
1469: PPUSH
1470: CALL_OW 311
1474: UNION
1475: ST_TO_ADDR
1476: GO 1452
1478: POP
1479: POP
// result := result diff 0 ;
1480: LD_ADDR_VAR 0 3
1484: PUSH
1485: LD_VAR 0 3
1489: PUSH
1490: LD_INT 0
1492: DIFF
1493: ST_TO_ADDR
// end ;
1494: LD_VAR 0 3
1498: RET
// export function FilterBuildings ( side ) ; begin
1499: LD_INT 0
1501: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
1502: LD_ADDR_VAR 0 2
1506: PUSH
1507: LD_INT 22
1509: PUSH
1510: LD_VAR 0 1
1514: PUSH
1515: EMPTY
1516: LIST
1517: LIST
1518: PUSH
1519: LD_INT 21
1521: PUSH
1522: LD_INT 3
1524: PUSH
1525: EMPTY
1526: LIST
1527: LIST
1528: PUSH
1529: EMPTY
1530: LIST
1531: LIST
1532: PPUSH
1533: CALL_OW 69
1537: ST_TO_ADDR
// end ;
1538: LD_VAR 0 2
1542: RET
// export function CreateNature ; var i , animal , nat_area ; begin
1543: LD_INT 0
1545: PPUSH
1546: PPUSH
1547: PPUSH
1548: PPUSH
// uc_side = 0 ;
1549: LD_ADDR_OWVAR 20
1553: PUSH
1554: LD_INT 0
1556: ST_TO_ADDR
// uc_nation = 0 ;
1557: LD_ADDR_OWVAR 21
1561: PUSH
1562: LD_INT 0
1564: ST_TO_ADDR
// nat_area := wildArea ;
1565: LD_ADDR_VAR 0 4
1569: PUSH
1570: LD_INT 3
1572: ST_TO_ADDR
// InitHc ;
1573: CALL_OW 19
// for i = 1 to 4 do
1577: LD_ADDR_VAR 0 2
1581: PUSH
1582: DOUBLE
1583: LD_INT 1
1585: DEC
1586: ST_TO_ADDR
1587: LD_INT 4
1589: PUSH
1590: FOR_TO
1591: IFFALSE 1646
// begin hc_class = 18 ;
1593: LD_ADDR_OWVAR 28
1597: PUSH
1598: LD_INT 18
1600: ST_TO_ADDR
// hc_gallery =  ;
1601: LD_ADDR_OWVAR 33
1605: PUSH
1606: LD_STRING 
1608: ST_TO_ADDR
// hc_face_number = 1 ;
1609: LD_ADDR_OWVAR 34
1613: PUSH
1614: LD_INT 1
1616: ST_TO_ADDR
// animal := CreateHuman ;
1617: LD_ADDR_VAR 0 3
1621: PUSH
1622: CALL_OW 44
1626: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
1627: LD_VAR 0 3
1631: PPUSH
1632: LD_VAR 0 4
1636: PPUSH
1637: LD_INT 0
1639: PPUSH
1640: CALL_OW 49
// end ;
1644: GO 1590
1646: POP
1647: POP
// for i = 1 to 6 do
1648: LD_ADDR_VAR 0 2
1652: PUSH
1653: DOUBLE
1654: LD_INT 1
1656: DEC
1657: ST_TO_ADDR
1658: LD_INT 6
1660: PUSH
1661: FOR_TO
1662: IFFALSE 1733
// begin hc_class = class_tiger ;
1664: LD_ADDR_OWVAR 28
1668: PUSH
1669: LD_INT 14
1671: ST_TO_ADDR
// hc_gallery =  ;
1672: LD_ADDR_OWVAR 33
1676: PUSH
1677: LD_STRING 
1679: ST_TO_ADDR
// hc_agressivity = Rand ( 0 , 10 ) ;
1680: LD_ADDR_OWVAR 35
1684: PUSH
1685: LD_INT 0
1687: PPUSH
1688: LD_INT 10
1690: PPUSH
1691: CALL_OW 12
1695: ST_TO_ADDR
// hc_face_number = 3 ;
1696: LD_ADDR_OWVAR 34
1700: PUSH
1701: LD_INT 3
1703: ST_TO_ADDR
// animal := CreateHuman ;
1704: LD_ADDR_VAR 0 3
1708: PUSH
1709: CALL_OW 44
1713: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
1714: LD_VAR 0 3
1718: PPUSH
1719: LD_VAR 0 4
1723: PPUSH
1724: LD_INT 0
1726: PPUSH
1727: CALL_OW 49
// end ;
1731: GO 1661
1733: POP
1734: POP
// for i = 1 to 2 do
1735: LD_ADDR_VAR 0 2
1739: PUSH
1740: DOUBLE
1741: LD_INT 1
1743: DEC
1744: ST_TO_ADDR
1745: LD_INT 2
1747: PUSH
1748: FOR_TO
1749: IFFALSE 1812
// begin hc_class = 21 ;
1751: LD_ADDR_OWVAR 28
1755: PUSH
1756: LD_INT 21
1758: ST_TO_ADDR
// hc_gallery =  ;
1759: LD_ADDR_OWVAR 33
1763: PUSH
1764: LD_STRING 
1766: ST_TO_ADDR
// hc_agressivity = 0 ;
1767: LD_ADDR_OWVAR 35
1771: PUSH
1772: LD_INT 0
1774: ST_TO_ADDR
// hc_face_number = 5 ;
1775: LD_ADDR_OWVAR 34
1779: PUSH
1780: LD_INT 5
1782: ST_TO_ADDR
// animal := CreateHuman ;
1783: LD_ADDR_VAR 0 3
1787: PUSH
1788: CALL_OW 44
1792: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
1793: LD_VAR 0 3
1797: PPUSH
1798: LD_VAR 0 4
1802: PPUSH
1803: LD_INT 0
1805: PPUSH
1806: CALL_OW 49
// end ;
1810: GO 1748
1812: POP
1813: POP
// for i = 1 to 6 do
1814: LD_ADDR_VAR 0 2
1818: PUSH
1819: DOUBLE
1820: LD_INT 1
1822: DEC
1823: ST_TO_ADDR
1824: LD_INT 6
1826: PUSH
1827: FOR_TO
1828: IFFALSE 1883
// begin hc_class = 13 ;
1830: LD_ADDR_OWVAR 28
1834: PUSH
1835: LD_INT 13
1837: ST_TO_ADDR
// hc_gallery =  ;
1838: LD_ADDR_OWVAR 33
1842: PUSH
1843: LD_STRING 
1845: ST_TO_ADDR
// hc_face_number = 4 ;
1846: LD_ADDR_OWVAR 34
1850: PUSH
1851: LD_INT 4
1853: ST_TO_ADDR
// animal := CreateHuman ;
1854: LD_ADDR_VAR 0 3
1858: PUSH
1859: CALL_OW 44
1863: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
1864: LD_VAR 0 3
1868: PPUSH
1869: LD_VAR 0 4
1873: PPUSH
1874: LD_INT 0
1876: PPUSH
1877: CALL_OW 49
// end ;
1881: GO 1827
1883: POP
1884: POP
// for i = 1 to 2 do
1885: LD_ADDR_VAR 0 2
1889: PUSH
1890: DOUBLE
1891: LD_INT 1
1893: DEC
1894: ST_TO_ADDR
1895: LD_INT 2
1897: PUSH
1898: FOR_TO
1899: IFFALSE 1958
// begin hc_class = 20 ;
1901: LD_ADDR_OWVAR 28
1905: PUSH
1906: LD_INT 20
1908: ST_TO_ADDR
// hc_gallery =  ;
1909: LD_ADDR_OWVAR 33
1913: PUSH
1914: LD_STRING 
1916: ST_TO_ADDR
// hc_face_number = 2 ;
1917: LD_ADDR_OWVAR 34
1921: PUSH
1922: LD_INT 2
1924: ST_TO_ADDR
// animal := CreateHuman ;
1925: LD_ADDR_VAR 0 3
1929: PUSH
1930: CALL_OW 44
1934: ST_TO_ADDR
// PlaceUnitXYR ( animal , 101 , 37 , 3 , false ) ;
1935: LD_VAR 0 3
1939: PPUSH
1940: LD_INT 101
1942: PPUSH
1943: LD_INT 37
1945: PPUSH
1946: LD_INT 3
1948: PPUSH
1949: LD_INT 0
1951: PPUSH
1952: CALL_OW 50
// end ;
1956: GO 1898
1958: POP
1959: POP
// for i = 1 to 1 do
1960: LD_ADDR_VAR 0 2
1964: PUSH
1965: DOUBLE
1966: LD_INT 1
1968: DEC
1969: ST_TO_ADDR
1970: LD_INT 1
1972: PUSH
1973: FOR_TO
1974: IFFALSE 2021
// begin vc_chassis := 31 ;
1976: LD_ADDR_OWVAR 37
1980: PUSH
1981: LD_INT 31
1983: ST_TO_ADDR
// vc_control := control_rider ;
1984: LD_ADDR_OWVAR 38
1988: PUSH
1989: LD_INT 4
1991: ST_TO_ADDR
// animal := CreateVehicle ;
1992: LD_ADDR_VAR 0 3
1996: PUSH
1997: CALL_OW 45
2001: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
2002: LD_VAR 0 3
2006: PPUSH
2007: LD_VAR 0 4
2011: PPUSH
2012: LD_INT 0
2014: PPUSH
2015: CALL_OW 49
// end ;
2019: GO 1973
2021: POP
2022: POP
// end ;
2023: LD_VAR 0 1
2027: RET
// export function NearbyTowerHasEnergy ( unit ) ; var i , tmp , energy ; begin
2028: LD_INT 0
2030: PPUSH
2031: PPUSH
2032: PPUSH
2033: PPUSH
// result := [ ] ;
2034: LD_ADDR_VAR 0 2
2038: PUSH
2039: EMPTY
2040: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( unit ) ] , [ f_dist , unit , 15 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) ;
2041: LD_ADDR_VAR 0 4
2045: PUSH
2046: LD_INT 81
2048: PUSH
2049: LD_VAR 0 1
2053: PPUSH
2054: CALL_OW 255
2058: PUSH
2059: EMPTY
2060: LIST
2061: LIST
2062: PUSH
2063: LD_INT 91
2065: PUSH
2066: LD_VAR 0 1
2070: PUSH
2071: LD_INT 15
2073: PUSH
2074: EMPTY
2075: LIST
2076: LIST
2077: LIST
2078: PUSH
2079: LD_INT 2
2081: PUSH
2082: LD_INT 30
2084: PUSH
2085: LD_INT 32
2087: PUSH
2088: EMPTY
2089: LIST
2090: LIST
2091: PUSH
2092: LD_INT 30
2094: PUSH
2095: LD_INT 33
2097: PUSH
2098: EMPTY
2099: LIST
2100: LIST
2101: PUSH
2102: EMPTY
2103: LIST
2104: LIST
2105: LIST
2106: PUSH
2107: EMPTY
2108: LIST
2109: LIST
2110: LIST
2111: PPUSH
2112: CALL_OW 69
2116: ST_TO_ADDR
// if not tmp then
2117: LD_VAR 0 4
2121: NOT
2122: IFFALSE 2126
// exit ;
2124: GO 2195
// for i in tmp do
2126: LD_ADDR_VAR 0 3
2130: PUSH
2131: LD_VAR 0 4
2135: PUSH
2136: FOR_IN
2137: IFFALSE 2193
// begin energy := GetEnergy ( GetBase ( i ) ) ;
2139: LD_ADDR_VAR 0 5
2143: PUSH
2144: LD_VAR 0 3
2148: PPUSH
2149: CALL_OW 274
2153: PPUSH
2154: CALL_OW 278
2158: ST_TO_ADDR
// if energy [ 4 ] > energy [ 1 ] then
2159: LD_VAR 0 5
2163: PUSH
2164: LD_INT 4
2166: ARRAY
2167: PUSH
2168: LD_VAR 0 5
2172: PUSH
2173: LD_INT 1
2175: ARRAY
2176: GREATER
2177: IFFALSE 2191
// begin result := i ;
2179: LD_ADDR_VAR 0 2
2183: PUSH
2184: LD_VAR 0 3
2188: ST_TO_ADDR
// break ;
2189: GO 2193
// end ; end ;
2191: GO 2136
2193: POP
2194: POP
// end ;
2195: LD_VAR 0 2
2199: RET
// export function GetTurretWeaponBase ( tower ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
2200: LD_INT 0
2202: PPUSH
2203: PPUSH
2204: PPUSH
2205: PPUSH
2206: PPUSH
2207: PPUSH
2208: PPUSH
2209: PPUSH
2210: PPUSH
2211: PPUSH
2212: PPUSH
2213: PPUSH
2214: PPUSH
2215: PPUSH
2216: PPUSH
2217: PPUSH
// result := false ;
2218: LD_ADDR_VAR 0 2
2222: PUSH
2223: LD_INT 0
2225: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
2226: LD_VAR 0 1
2230: NOT
2231: PUSH
2232: LD_VAR 0 1
2236: PPUSH
2237: CALL_OW 266
2241: PUSH
2242: LD_INT 32
2244: PUSH
2245: LD_INT 33
2247: PUSH
2248: EMPTY
2249: LIST
2250: LIST
2251: IN
2252: NOT
2253: OR
2254: IFFALSE 2258
// exit ;
2256: GO 3418
// nat := GetNation ( tower ) ;
2258: LD_ADDR_VAR 0 11
2262: PUSH
2263: LD_VAR 0 1
2267: PPUSH
2268: CALL_OW 248
2272: ST_TO_ADDR
// side := GetSide ( tower ) ;
2273: LD_ADDR_VAR 0 15
2277: PUSH
2278: LD_VAR 0 1
2282: PPUSH
2283: CALL_OW 255
2287: ST_TO_ADDR
// x := GetX ( tower ) ;
2288: LD_ADDR_VAR 0 9
2292: PUSH
2293: LD_VAR 0 1
2297: PPUSH
2298: CALL_OW 250
2302: ST_TO_ADDR
// y := GetY ( tower ) ;
2303: LD_ADDR_VAR 0 10
2307: PUSH
2308: LD_VAR 0 1
2312: PPUSH
2313: CALL_OW 251
2317: ST_TO_ADDR
// if not x or not y then
2318: LD_VAR 0 9
2322: NOT
2323: PUSH
2324: LD_VAR 0 10
2328: NOT
2329: OR
2330: IFFALSE 2334
// exit ;
2332: GO 3418
// weapon := 0 ;
2334: LD_ADDR_VAR 0 17
2338: PUSH
2339: LD_INT 0
2341: ST_TO_ADDR
// fac_list := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun ] ;
2342: LD_ADDR_VAR 0 16
2346: PUSH
2347: LD_INT 42
2349: PUSH
2350: LD_INT 43
2352: PUSH
2353: LD_INT 44
2355: PUSH
2356: LD_INT 46
2358: PUSH
2359: EMPTY
2360: LIST
2361: LIST
2362: LIST
2363: LIST
2364: ST_TO_ADDR
// if not fac_list then
2365: LD_VAR 0 16
2369: NOT
2370: IFFALSE 2374
// exit ;
2372: GO 3418
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
2374: LD_ADDR_VAR 0 4
2378: PUSH
2379: LD_INT 4
2381: PUSH
2382: LD_INT 5
2384: PUSH
2385: LD_INT 9
2387: PUSH
2388: LD_INT 10
2390: PUSH
2391: LD_INT 6
2393: PUSH
2394: LD_INT 7
2396: PUSH
2397: LD_INT 11
2399: PUSH
2400: EMPTY
2401: LIST
2402: LIST
2403: LIST
2404: LIST
2405: LIST
2406: LIST
2407: LIST
2408: PUSH
2409: LD_INT 27
2411: PUSH
2412: LD_INT 28
2414: PUSH
2415: LD_INT 26
2417: PUSH
2418: LD_INT 30
2420: PUSH
2421: EMPTY
2422: LIST
2423: LIST
2424: LIST
2425: LIST
2426: PUSH
2427: LD_INT 43
2429: PUSH
2430: LD_INT 44
2432: PUSH
2433: LD_INT 46
2435: PUSH
2436: LD_INT 45
2438: PUSH
2439: LD_INT 47
2441: PUSH
2442: LD_INT 49
2444: PUSH
2445: EMPTY
2446: LIST
2447: LIST
2448: LIST
2449: LIST
2450: LIST
2451: LIST
2452: PUSH
2453: EMPTY
2454: LIST
2455: LIST
2456: LIST
2457: PUSH
2458: LD_VAR 0 11
2462: ARRAY
2463: ST_TO_ADDR
// for i in list do
2464: LD_ADDR_VAR 0 7
2468: PUSH
2469: LD_VAR 0 4
2473: PUSH
2474: FOR_IN
2475: IFFALSE 2508
// if not i in fac_list then
2477: LD_VAR 0 7
2481: PUSH
2482: LD_VAR 0 16
2486: IN
2487: NOT
2488: IFFALSE 2506
// list := list diff i ;
2490: LD_ADDR_VAR 0 4
2494: PUSH
2495: LD_VAR 0 4
2499: PUSH
2500: LD_VAR 0 7
2504: DIFF
2505: ST_TO_ADDR
2506: GO 2474
2508: POP
2509: POP
// if not list then
2510: LD_VAR 0 4
2514: NOT
2515: IFFALSE 2519
// exit ;
2517: GO 3418
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
2519: LD_VAR 0 11
2523: PUSH
2524: LD_INT 3
2526: EQUAL
2527: PUSH
2528: LD_INT 49
2530: PUSH
2531: LD_VAR 0 4
2535: IN
2536: AND
2537: PUSH
2538: LD_INT 31
2540: PPUSH
2541: LD_VAR 0 15
2545: PPUSH
2546: CALL_OW 321
2550: PUSH
2551: LD_INT 2
2553: EQUAL
2554: AND
2555: IFFALSE 2615
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
2557: LD_INT 22
2559: PUSH
2560: LD_VAR 0 15
2564: PUSH
2565: EMPTY
2566: LIST
2567: LIST
2568: PUSH
2569: LD_INT 35
2571: PUSH
2572: LD_INT 49
2574: PUSH
2575: EMPTY
2576: LIST
2577: LIST
2578: PUSH
2579: LD_INT 91
2581: PUSH
2582: LD_VAR 0 1
2586: PUSH
2587: LD_INT 10
2589: PUSH
2590: EMPTY
2591: LIST
2592: LIST
2593: LIST
2594: PUSH
2595: EMPTY
2596: LIST
2597: LIST
2598: LIST
2599: PPUSH
2600: CALL_OW 69
2604: NOT
2605: IFFALSE 2615
// weapon := ru_time_lapser ;
2607: LD_ADDR_VAR 0 17
2611: PUSH
2612: LD_INT 49
2614: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
2615: LD_VAR 0 11
2619: PUSH
2620: LD_INT 1
2622: PUSH
2623: LD_INT 2
2625: PUSH
2626: EMPTY
2627: LIST
2628: LIST
2629: IN
2630: PUSH
2631: LD_INT 11
2633: PUSH
2634: LD_VAR 0 4
2638: IN
2639: PUSH
2640: LD_INT 30
2642: PUSH
2643: LD_VAR 0 4
2647: IN
2648: OR
2649: AND
2650: PUSH
2651: LD_INT 6
2653: PPUSH
2654: LD_VAR 0 15
2658: PPUSH
2659: CALL_OW 321
2663: PUSH
2664: LD_INT 2
2666: EQUAL
2667: AND
2668: IFFALSE 2833
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
2670: LD_INT 22
2672: PUSH
2673: LD_VAR 0 15
2677: PUSH
2678: EMPTY
2679: LIST
2680: LIST
2681: PUSH
2682: LD_INT 2
2684: PUSH
2685: LD_INT 35
2687: PUSH
2688: LD_INT 11
2690: PUSH
2691: EMPTY
2692: LIST
2693: LIST
2694: PUSH
2695: LD_INT 35
2697: PUSH
2698: LD_INT 30
2700: PUSH
2701: EMPTY
2702: LIST
2703: LIST
2704: PUSH
2705: EMPTY
2706: LIST
2707: LIST
2708: LIST
2709: PUSH
2710: LD_INT 91
2712: PUSH
2713: LD_VAR 0 1
2717: PUSH
2718: LD_INT 18
2720: PUSH
2721: EMPTY
2722: LIST
2723: LIST
2724: LIST
2725: PUSH
2726: EMPTY
2727: LIST
2728: LIST
2729: LIST
2730: PPUSH
2731: CALL_OW 69
2735: NOT
2736: PUSH
2737: LD_INT 22
2739: PUSH
2740: LD_VAR 0 15
2744: PUSH
2745: EMPTY
2746: LIST
2747: LIST
2748: PUSH
2749: LD_INT 2
2751: PUSH
2752: LD_INT 30
2754: PUSH
2755: LD_INT 32
2757: PUSH
2758: EMPTY
2759: LIST
2760: LIST
2761: PUSH
2762: LD_INT 30
2764: PUSH
2765: LD_INT 33
2767: PUSH
2768: EMPTY
2769: LIST
2770: LIST
2771: PUSH
2772: EMPTY
2773: LIST
2774: LIST
2775: LIST
2776: PUSH
2777: LD_INT 91
2779: PUSH
2780: LD_VAR 0 1
2784: PUSH
2785: LD_INT 12
2787: PUSH
2788: EMPTY
2789: LIST
2790: LIST
2791: LIST
2792: PUSH
2793: EMPTY
2794: LIST
2795: LIST
2796: LIST
2797: PUSH
2798: EMPTY
2799: LIST
2800: PPUSH
2801: CALL_OW 69
2805: PUSH
2806: LD_INT 2
2808: GREATER
2809: AND
2810: IFFALSE 2833
// weapon := [ us_radar , ar_radar ] [ nat ] ;
2812: LD_ADDR_VAR 0 17
2816: PUSH
2817: LD_INT 11
2819: PUSH
2820: LD_INT 30
2822: PUSH
2823: EMPTY
2824: LIST
2825: LIST
2826: PUSH
2827: LD_VAR 0 11
2831: ARRAY
2832: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
2833: LD_VAR 0 17
2837: NOT
2838: PUSH
2839: LD_INT 40
2841: PPUSH
2842: LD_VAR 0 15
2846: PPUSH
2847: CALL_OW 321
2851: PUSH
2852: LD_INT 2
2854: EQUAL
2855: AND
2856: PUSH
2857: LD_INT 7
2859: PUSH
2860: LD_VAR 0 4
2864: IN
2865: PUSH
2866: LD_INT 28
2868: PUSH
2869: LD_VAR 0 4
2873: IN
2874: OR
2875: PUSH
2876: LD_INT 45
2878: PUSH
2879: LD_VAR 0 4
2883: IN
2884: OR
2885: AND
2886: IFFALSE 3140
// begin hex := GetHexInfo ( x , y ) ;
2888: LD_ADDR_VAR 0 3
2892: PUSH
2893: LD_VAR 0 9
2897: PPUSH
2898: LD_VAR 0 10
2902: PPUSH
2903: CALL_OW 546
2907: ST_TO_ADDR
// if hex [ 1 ] then
2908: LD_VAR 0 3
2912: PUSH
2913: LD_INT 1
2915: ARRAY
2916: IFFALSE 2920
// exit ;
2918: GO 3418
// height := hex [ 2 ] ;
2920: LD_ADDR_VAR 0 14
2924: PUSH
2925: LD_VAR 0 3
2929: PUSH
2930: LD_INT 2
2932: ARRAY
2933: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
2934: LD_ADDR_VAR 0 13
2938: PUSH
2939: LD_INT 0
2941: PUSH
2942: LD_INT 2
2944: PUSH
2945: LD_INT 3
2947: PUSH
2948: LD_INT 5
2950: PUSH
2951: EMPTY
2952: LIST
2953: LIST
2954: LIST
2955: LIST
2956: ST_TO_ADDR
// for i in tmp do
2957: LD_ADDR_VAR 0 7
2961: PUSH
2962: LD_VAR 0 13
2966: PUSH
2967: FOR_IN
2968: IFFALSE 3138
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
2970: LD_ADDR_VAR 0 8
2974: PUSH
2975: LD_VAR 0 9
2979: PPUSH
2980: LD_VAR 0 7
2984: PPUSH
2985: LD_INT 5
2987: PPUSH
2988: CALL_OW 272
2992: PUSH
2993: LD_VAR 0 10
2997: PPUSH
2998: LD_VAR 0 7
3002: PPUSH
3003: LD_INT 5
3005: PPUSH
3006: CALL_OW 273
3010: PUSH
3011: EMPTY
3012: LIST
3013: LIST
3014: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
3015: LD_VAR 0 8
3019: PUSH
3020: LD_INT 1
3022: ARRAY
3023: PPUSH
3024: LD_VAR 0 8
3028: PUSH
3029: LD_INT 2
3031: ARRAY
3032: PPUSH
3033: CALL_OW 488
3037: IFFALSE 3136
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
3039: LD_ADDR_VAR 0 3
3043: PUSH
3044: LD_VAR 0 8
3048: PUSH
3049: LD_INT 1
3051: ARRAY
3052: PPUSH
3053: LD_VAR 0 8
3057: PUSH
3058: LD_INT 2
3060: ARRAY
3061: PPUSH
3062: CALL_OW 546
3066: ST_TO_ADDR
// if hex [ 1 ] then
3067: LD_VAR 0 3
3071: PUSH
3072: LD_INT 1
3074: ARRAY
3075: IFFALSE 3079
// continue ;
3077: GO 2967
// h := hex [ 2 ] ;
3079: LD_ADDR_VAR 0 12
3083: PUSH
3084: LD_VAR 0 3
3088: PUSH
3089: LD_INT 2
3091: ARRAY
3092: ST_TO_ADDR
// if h + 7 < height then
3093: LD_VAR 0 12
3097: PUSH
3098: LD_INT 7
3100: PLUS
3101: PUSH
3102: LD_VAR 0 14
3106: LESS
3107: IFFALSE 3136
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
3109: LD_ADDR_VAR 0 17
3113: PUSH
3114: LD_INT 7
3116: PUSH
3117: LD_INT 28
3119: PUSH
3120: LD_INT 45
3122: PUSH
3123: EMPTY
3124: LIST
3125: LIST
3126: LIST
3127: PUSH
3128: LD_VAR 0 11
3132: ARRAY
3133: ST_TO_ADDR
// break ;
3134: GO 3138
// end ; end ; end ;
3136: GO 2967
3138: POP
3139: POP
// end ; if not weapon then
3140: LD_VAR 0 17
3144: NOT
3145: IFFALSE 3300
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
3147: LD_ADDR_VAR 0 4
3151: PUSH
3152: LD_VAR 0 4
3156: PUSH
3157: LD_INT 11
3159: PUSH
3160: LD_INT 30
3162: PUSH
3163: LD_INT 49
3165: PUSH
3166: EMPTY
3167: LIST
3168: LIST
3169: LIST
3170: DIFF
3171: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , tower , 6 ] , [ f_not , [ f_bweapon , 0 ] ] ] ) ;
3172: LD_ADDR_VAR 0 13
3176: PUSH
3177: LD_INT 22
3179: PUSH
3180: LD_VAR 0 15
3184: PUSH
3185: EMPTY
3186: LIST
3187: LIST
3188: PUSH
3189: LD_INT 91
3191: PUSH
3192: LD_VAR 0 1
3196: PUSH
3197: LD_INT 6
3199: PUSH
3200: EMPTY
3201: LIST
3202: LIST
3203: LIST
3204: PUSH
3205: LD_INT 3
3207: PUSH
3208: LD_INT 35
3210: PUSH
3211: LD_INT 0
3213: PUSH
3214: EMPTY
3215: LIST
3216: LIST
3217: PUSH
3218: EMPTY
3219: LIST
3220: LIST
3221: PUSH
3222: EMPTY
3223: LIST
3224: LIST
3225: LIST
3226: PPUSH
3227: CALL_OW 69
3231: ST_TO_ADDR
// for i in tmp do
3232: LD_ADDR_VAR 0 7
3236: PUSH
3237: LD_VAR 0 13
3241: PUSH
3242: FOR_IN
3243: IFFALSE 3268
// list := list diff GetBWeapon ( i ) ;
3245: LD_ADDR_VAR 0 4
3249: PUSH
3250: LD_VAR 0 4
3254: PUSH
3255: LD_VAR 0 7
3259: PPUSH
3260: CALL_OW 269
3264: DIFF
3265: ST_TO_ADDR
3266: GO 3242
3268: POP
3269: POP
// if list then
3270: LD_VAR 0 4
3274: IFFALSE 3300
// weapon := list [ rand ( 1 , list ) ] ;
3276: LD_ADDR_VAR 0 17
3280: PUSH
3281: LD_VAR 0 4
3285: PUSH
3286: LD_INT 1
3288: PPUSH
3289: LD_VAR 0 4
3293: PPUSH
3294: CALL_OW 12
3298: ARRAY
3299: ST_TO_ADDR
// end ; if weapon then
3300: LD_VAR 0 17
3304: IFFALSE 3418
// begin tmp := CostOfWeapon ( weapon ) ;
3306: LD_ADDR_VAR 0 13
3310: PUSH
3311: LD_VAR 0 17
3315: PPUSH
3316: CALL_OW 451
3320: ST_TO_ADDR
// j := GetBase ( tower ) ;
3321: LD_ADDR_VAR 0 8
3325: PUSH
3326: LD_VAR 0 1
3330: PPUSH
3331: CALL_OW 274
3335: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
3336: LD_VAR 0 8
3340: PPUSH
3341: LD_INT 1
3343: PPUSH
3344: CALL_OW 275
3348: PUSH
3349: LD_VAR 0 13
3353: PUSH
3354: LD_INT 1
3356: ARRAY
3357: GREATEREQUAL
3358: PUSH
3359: LD_VAR 0 8
3363: PPUSH
3364: LD_INT 2
3366: PPUSH
3367: CALL_OW 275
3371: PUSH
3372: LD_VAR 0 13
3376: PUSH
3377: LD_INT 2
3379: ARRAY
3380: GREATEREQUAL
3381: AND
3382: PUSH
3383: LD_VAR 0 8
3387: PPUSH
3388: LD_INT 3
3390: PPUSH
3391: CALL_OW 275
3395: PUSH
3396: LD_VAR 0 13
3400: PUSH
3401: LD_INT 3
3403: ARRAY
3404: GREATEREQUAL
3405: AND
3406: IFFALSE 3418
// result := weapon ;
3408: LD_ADDR_VAR 0 2
3412: PUSH
3413: LD_VAR 0 17
3417: ST_TO_ADDR
// end ; end ; end_of_file
3418: LD_VAR 0 2
3422: RET
// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Khatam , Kikuchi , Harisson ; export function PrepareAmericans ; var i , team , others , veh , m ; begin
3423: LD_INT 0
3425: PPUSH
3426: PPUSH
3427: PPUSH
3428: PPUSH
3429: PPUSH
3430: PPUSH
// uc_side := 1 ;
3431: LD_ADDR_OWVAR 20
3435: PUSH
3436: LD_INT 1
3438: ST_TO_ADDR
// uc_nation := 1 ;
3439: LD_ADDR_OWVAR 21
3443: PUSH
3444: LD_INT 1
3446: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , mission_prev_prefix ) ;
3447: LD_ADDR_EXP 9
3451: PUSH
3452: LD_STRING JMM
3454: PPUSH
3455: LD_EXP 1
3459: NOT
3460: PPUSH
3461: LD_EXP 2
3465: PPUSH
3466: CALL 31145 0 3
3470: ST_TO_ADDR
// team := [ JMM ] ;
3471: LD_ADDR_VAR 0 3
3475: PUSH
3476: LD_EXP 9
3480: PUSH
3481: EMPTY
3482: LIST
3483: ST_TO_ADDR
// if LoadVariable ( BrownIn07 , debug ) then
3484: LD_STRING BrownIn07
3486: PPUSH
3487: LD_EXP 1
3491: PPUSH
3492: CALL_OW 30
3496: IFFALSE 3522
// Brown := PrepareUnit ( Brown , ( not debug ) , mission_prev_prefix ) ;
3498: LD_ADDR_EXP 10
3502: PUSH
3503: LD_STRING Brown
3505: PPUSH
3506: LD_EXP 1
3510: NOT
3511: PPUSH
3512: LD_EXP 2
3516: PPUSH
3517: CALL 31145 0 3
3521: ST_TO_ADDR
// if Brown then
3522: LD_EXP 10
3526: IFFALSE 3544
// team := team ^ Brown ;
3528: LD_ADDR_VAR 0 3
3532: PUSH
3533: LD_VAR 0 3
3537: PUSH
3538: LD_EXP 10
3542: ADD
3543: ST_TO_ADDR
// if LoadVariable ( DonaldsonIn07 , debug ) then
3544: LD_STRING DonaldsonIn07
3546: PPUSH
3547: LD_EXP 1
3551: PPUSH
3552: CALL_OW 30
3556: IFFALSE 3582
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , mission_prev_prefix ) ;
3558: LD_ADDR_EXP 11
3562: PUSH
3563: LD_STRING Donaldson
3565: PPUSH
3566: LD_EXP 1
3570: NOT
3571: PPUSH
3572: LD_EXP 2
3576: PPUSH
3577: CALL 31145 0 3
3581: ST_TO_ADDR
// if Donaldson then
3582: LD_EXP 11
3586: IFFALSE 3604
// team := team ^ Donaldson ;
3588: LD_ADDR_VAR 0 3
3592: PUSH
3593: LD_VAR 0 3
3597: PUSH
3598: LD_EXP 11
3602: ADD
3603: ST_TO_ADDR
// if LoadVariable ( BobbyIn07 , debug ) then
3604: LD_STRING BobbyIn07
3606: PPUSH
3607: LD_EXP 1
3611: PPUSH
3612: CALL_OW 30
3616: IFFALSE 3642
// Bobby := PrepareUnit ( Bobby , ( not debug ) , mission_prev_prefix ) ;
3618: LD_ADDR_EXP 12
3622: PUSH
3623: LD_STRING Bobby
3625: PPUSH
3626: LD_EXP 1
3630: NOT
3631: PPUSH
3632: LD_EXP 2
3636: PPUSH
3637: CALL 31145 0 3
3641: ST_TO_ADDR
// if Bobby then
3642: LD_EXP 12
3646: IFFALSE 3664
// team := team ^ Bobby ;
3648: LD_ADDR_VAR 0 3
3652: PUSH
3653: LD_VAR 0 3
3657: PUSH
3658: LD_EXP 12
3662: ADD
3663: ST_TO_ADDR
// if LoadVariable ( CyrusIn07 , debug ) then
3664: LD_STRING CyrusIn07
3666: PPUSH
3667: LD_EXP 1
3671: PPUSH
3672: CALL_OW 30
3676: IFFALSE 3702
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , mission_prev_prefix ) ;
3678: LD_ADDR_EXP 13
3682: PUSH
3683: LD_STRING Cyrus
3685: PPUSH
3686: LD_EXP 1
3690: NOT
3691: PPUSH
3692: LD_EXP 2
3696: PPUSH
3697: CALL 31145 0 3
3701: ST_TO_ADDR
// if Cyrus then
3702: LD_EXP 13
3706: IFFALSE 3724
// team := team ^ Cyrus ;
3708: LD_ADDR_VAR 0 3
3712: PUSH
3713: LD_VAR 0 3
3717: PUSH
3718: LD_EXP 13
3722: ADD
3723: ST_TO_ADDR
// if LoadVariable ( LisaIn07 , debug ) then
3724: LD_STRING LisaIn07
3726: PPUSH
3727: LD_EXP 1
3731: PPUSH
3732: CALL_OW 30
3736: IFFALSE 3762
// Lisa := PrepareUnit ( Lisa , ( not debug ) , mission_prev_prefix ) ;
3738: LD_ADDR_EXP 14
3742: PUSH
3743: LD_STRING Lisa
3745: PPUSH
3746: LD_EXP 1
3750: NOT
3751: PPUSH
3752: LD_EXP 2
3756: PPUSH
3757: CALL 31145 0 3
3761: ST_TO_ADDR
// if Lisa then
3762: LD_EXP 14
3766: IFFALSE 3784
// team := team ^ Lisa ;
3768: LD_ADDR_VAR 0 3
3772: PUSH
3773: LD_VAR 0 3
3777: PUSH
3778: LD_EXP 14
3782: ADD
3783: ST_TO_ADDR
// if LoadVariable ( GladstoneIn07 , debug ) then
3784: LD_STRING GladstoneIn07
3786: PPUSH
3787: LD_EXP 1
3791: PPUSH
3792: CALL_OW 30
3796: IFFALSE 3822
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , mission_prev_prefix ) ;
3798: LD_ADDR_EXP 16
3802: PUSH
3803: LD_STRING Gladstone
3805: PPUSH
3806: LD_EXP 1
3810: NOT
3811: PPUSH
3812: LD_EXP 2
3816: PPUSH
3817: CALL 31145 0 3
3821: ST_TO_ADDR
// if Gladstone then
3822: LD_EXP 16
3826: IFFALSE 3844
// team := team ^ Gladstone ;
3828: LD_ADDR_VAR 0 3
3832: PUSH
3833: LD_VAR 0 3
3837: PUSH
3838: LD_EXP 16
3842: ADD
3843: ST_TO_ADDR
// if LoadVariable ( KhatamIn07 , debug ) then
3844: LD_STRING KhatamIn07
3846: PPUSH
3847: LD_EXP 1
3851: PPUSH
3852: CALL_OW 30
3856: IFFALSE 3882
// Khatam := PrepareUnit ( Khatam , ( not debug ) , mission_prev_prefix ) ;
3858: LD_ADDR_EXP 17
3862: PUSH
3863: LD_STRING Khatam
3865: PPUSH
3866: LD_EXP 1
3870: NOT
3871: PPUSH
3872: LD_EXP 2
3876: PPUSH
3877: CALL 31145 0 3
3881: ST_TO_ADDR
// if Khatam then
3882: LD_EXP 17
3886: IFFALSE 3904
// team := team ^ Khatam ;
3888: LD_ADDR_VAR 0 3
3892: PUSH
3893: LD_VAR 0 3
3897: PUSH
3898: LD_EXP 17
3902: ADD
3903: ST_TO_ADDR
// others := CreateCharacterSet ( 07_others ) ;
3904: LD_ADDR_VAR 0 4
3908: PUSH
3909: LD_STRING 07_others
3911: PPUSH
3912: CALL_OW 31
3916: ST_TO_ADDR
// if others then
3917: LD_VAR 0 4
3921: IFFALSE 3939
// team := team ^ others ;
3923: LD_ADDR_VAR 0 3
3927: PUSH
3928: LD_VAR 0 3
3932: PUSH
3933: LD_VAR 0 4
3937: ADD
3938: ST_TO_ADDR
// if debug then
3939: LD_EXP 1
3943: IFFALSE 4017
// begin InitHc ;
3945: CALL_OW 19
// for i = 1 to 4 do
3949: LD_ADDR_VAR 0 2
3953: PUSH
3954: DOUBLE
3955: LD_INT 1
3957: DEC
3958: ST_TO_ADDR
3959: LD_INT 4
3961: PUSH
3962: FOR_TO
3963: IFFALSE 4015
// begin PrepareHuman ( false , [ 1 , 3 ] [ Rand ( 1 , 2 ) ] , 4 ) ;
3965: LD_INT 0
3967: PPUSH
3968: LD_INT 1
3970: PUSH
3971: LD_INT 3
3973: PUSH
3974: EMPTY
3975: LIST
3976: LIST
3977: PUSH
3978: LD_INT 1
3980: PPUSH
3981: LD_INT 2
3983: PPUSH
3984: CALL_OW 12
3988: ARRAY
3989: PPUSH
3990: LD_INT 4
3992: PPUSH
3993: CALL_OW 380
// team := team ^ CreateHuman ;
3997: LD_ADDR_VAR 0 3
4001: PUSH
4002: LD_VAR 0 3
4006: PUSH
4007: CALL_OW 44
4011: ADD
4012: ST_TO_ADDR
// end ;
4013: GO 3962
4015: POP
4016: POP
// end ; m := 0 ;
4017: LD_ADDR_VAR 0 6
4021: PUSH
4022: LD_INT 0
4024: ST_TO_ADDR
// for i in team do
4025: LD_ADDR_VAR 0 2
4029: PUSH
4030: LD_VAR 0 3
4034: PUSH
4035: FOR_IN
4036: IFFALSE 4243
// if GetClass ( i ) = 3 then
4038: LD_VAR 0 2
4042: PPUSH
4043: CALL_OW 257
4047: PUSH
4048: LD_INT 3
4050: EQUAL
4051: IFFALSE 4199
// begin m := m + 1 ;
4053: LD_ADDR_VAR 0 6
4057: PUSH
4058: LD_VAR 0 6
4062: PUSH
4063: LD_INT 1
4065: PLUS
4066: ST_TO_ADDR
// veh := PrepareTank ( 1 , 1 , [ us_medium_wheeled , us_medium_tracked , us_medium_wheeled , us_light_wheeled ] [ m mod 4 + 1 ] , engine_solar , control_manual , [ us_gatling_gun , us_double_gun , us_light_gun , us_radar ] [ m mod 4 + 1 ] , 60 ) ;
4067: LD_ADDR_VAR 0 5
4071: PUSH
4072: LD_INT 1
4074: PPUSH
4075: LD_INT 1
4077: PPUSH
4078: LD_INT 2
4080: PUSH
4081: LD_INT 3
4083: PUSH
4084: LD_INT 2
4086: PUSH
4087: LD_INT 1
4089: PUSH
4090: EMPTY
4091: LIST
4092: LIST
4093: LIST
4094: LIST
4095: PUSH
4096: LD_VAR 0 6
4100: PUSH
4101: LD_INT 4
4103: MOD
4104: PUSH
4105: LD_INT 1
4107: PLUS
4108: ARRAY
4109: PPUSH
4110: LD_INT 2
4112: PPUSH
4113: LD_INT 1
4115: PPUSH
4116: LD_INT 4
4118: PUSH
4119: LD_INT 5
4121: PUSH
4122: LD_INT 3
4124: PUSH
4125: LD_INT 11
4127: PUSH
4128: EMPTY
4129: LIST
4130: LIST
4131: LIST
4132: LIST
4133: PUSH
4134: LD_VAR 0 6
4138: PUSH
4139: LD_INT 4
4141: MOD
4142: PUSH
4143: LD_INT 1
4145: PLUS
4146: ARRAY
4147: PPUSH
4148: LD_INT 60
4150: PPUSH
4151: CALL 512 0 7
4155: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
4156: LD_VAR 0 5
4160: PPUSH
4161: LD_INT 2
4163: PPUSH
4164: CALL_OW 233
// PlaceUnitArea ( veh , startArea , false ) ;
4168: LD_VAR 0 5
4172: PPUSH
4173: LD_INT 1
4175: PPUSH
4176: LD_INT 0
4178: PPUSH
4179: CALL_OW 49
// PlaceHumanInUnit ( i , veh ) ;
4183: LD_VAR 0 2
4187: PPUSH
4188: LD_VAR 0 5
4192: PPUSH
4193: CALL_OW 52
// end else
4197: GO 4241
// begin if GetClass ( i ) = 2 then
4199: LD_VAR 0 2
4203: PPUSH
4204: CALL_OW 257
4208: PUSH
4209: LD_INT 2
4211: EQUAL
4212: IFFALSE 4226
// SetClass ( i , 1 ) ;
4214: LD_VAR 0 2
4218: PPUSH
4219: LD_INT 1
4221: PPUSH
4222: CALL_OW 336
// PlaceUnitArea ( i , startArea , false ) ;
4226: LD_VAR 0 2
4230: PPUSH
4231: LD_INT 1
4233: PPUSH
4234: LD_INT 0
4236: PPUSH
4237: CALL_OW 49
// end ;
4241: GO 4035
4243: POP
4244: POP
// uc_side := 4 ;
4245: LD_ADDR_OWVAR 20
4249: PUSH
4250: LD_INT 4
4252: ST_TO_ADDR
// Harisson := PrepareUnit ( Harisson , false ,  ) ;
4253: LD_ADDR_EXP 19
4257: PUSH
4258: LD_STRING Harisson
4260: PPUSH
4261: LD_INT 0
4263: PPUSH
4264: LD_STRING 
4266: PPUSH
4267: CALL 31145 0 3
4271: ST_TO_ADDR
// PrepareScout ;
4272: CALL 4281 0 0
// end ;
4276: LD_VAR 0 1
4280: RET
// function PrepareScout ; var ape ; begin
4281: LD_INT 0
4283: PPUSH
4284: PPUSH
// uc_side := 4 ;
4285: LD_ADDR_OWVAR 20
4289: PUSH
4290: LD_INT 4
4292: ST_TO_ADDR
// uc_nation := 1 ;
4293: LD_ADDR_OWVAR 21
4297: PUSH
4298: LD_INT 1
4300: ST_TO_ADDR
// if LoadVariable ( FrankIn06 , 0 ) then
4301: LD_STRING FrankIn06
4303: PPUSH
4304: LD_INT 0
4306: PPUSH
4307: CALL_OW 30
4311: IFFALSE 4328
// Frank := CreateCharacter ( 06c_Frank ) else
4313: LD_ADDR_EXP 15
4317: PUSH
4318: LD_STRING 06c_Frank
4320: PPUSH
4321: CALL_OW 34
4325: ST_TO_ADDR
4326: GO 4368
// if LoadVariable ( FrankInDelta , 0 ) then
4328: LD_STRING FrankInDelta
4330: PPUSH
4331: LD_INT 0
4333: PPUSH
4334: CALL_OW 30
4338: IFFALSE 4355
// Frank := CreateCharacter ( 05_Frank ) else
4340: LD_ADDR_EXP 15
4344: PUSH
4345: LD_STRING 05_Frank
4347: PPUSH
4348: CALL_OW 34
4352: ST_TO_ADDR
4353: GO 4368
// Frank := CreateCharacter ( 04_Frank ) ;
4355: LD_ADDR_EXP 15
4359: PUSH
4360: LD_STRING 04_Frank
4362: PPUSH
4363: CALL_OW 34
4367: ST_TO_ADDR
// if Frank then
4368: LD_EXP 15
4372: IFFALSE 4505
// begin PlaceUnitArea ( Frank , scoutArea , false ) ;
4374: LD_EXP 15
4378: PPUSH
4379: LD_INT 2
4381: PPUSH
4382: LD_INT 0
4384: PPUSH
4385: CALL_OW 49
// SetClass ( Frank , 1 ) ;
4389: LD_EXP 15
4393: PPUSH
4394: LD_INT 1
4396: PPUSH
4397: CALL_OW 336
// uc_side := 0 ;
4401: LD_ADDR_OWVAR 20
4405: PUSH
4406: LD_INT 0
4408: ST_TO_ADDR
// uc_nation := 0 ;
4409: LD_ADDR_OWVAR 21
4413: PUSH
4414: LD_INT 0
4416: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 0 ) ;
4417: LD_INT 0
4419: PPUSH
4420: LD_INT 12
4422: PPUSH
4423: LD_INT 0
4425: PPUSH
4426: CALL_OW 380
// ape := CreateHuman ;
4430: LD_ADDR_VAR 0 2
4434: PUSH
4435: CALL_OW 44
4439: ST_TO_ADDR
// PlaceUnitXYR ( ape , GetX ( Frank ) , GetY ( Frank ) , 5 , false ) ;
4440: LD_VAR 0 2
4444: PPUSH
4445: LD_EXP 15
4449: PPUSH
4450: CALL_OW 250
4454: PPUSH
4455: LD_EXP 15
4459: PPUSH
4460: CALL_OW 251
4464: PPUSH
4465: LD_INT 5
4467: PPUSH
4468: LD_INT 0
4470: PPUSH
4471: CALL_OW 50
// ComTurnUnit ( ape , Frank ) ;
4475: LD_VAR 0 2
4479: PPUSH
4480: LD_EXP 15
4484: PPUSH
4485: CALL_OW 119
// ComTurnUnit ( Frank , ape ) ;
4489: LD_EXP 15
4493: PPUSH
4494: LD_VAR 0 2
4498: PPUSH
4499: CALL_OW 119
// exit ;
4503: GO 4548
// end ; Kikuchi := PrepareUnit ( Yamoko , false ,  ) ;
4505: LD_ADDR_EXP 18
4509: PUSH
4510: LD_STRING Yamoko
4512: PPUSH
4513: LD_INT 0
4515: PPUSH
4516: LD_STRING 
4518: PPUSH
4519: CALL 31145 0 3
4523: ST_TO_ADDR
// PlaceUnitArea ( Kikuchi , scoutArea , false ) ;
4524: LD_EXP 18
4528: PPUSH
4529: LD_INT 2
4531: PPUSH
4532: LD_INT 0
4534: PPUSH
4535: CALL_OW 49
// ComHold ( Kikuchi ) ;
4539: LD_EXP 18
4543: PPUSH
4544: CALL_OW 140
// end ; end_of_file
4548: LD_VAR 0 1
4552: RET
// export ru_rebuild_list ; export function PrepareRussians ; var i , j , r , un , skill , filter , tmp , dep_list , lab_list , fac_list , breastworks_list , bunker_list , turret_list , weapons_list , personel_counter ; begin
4553: LD_INT 0
4555: PPUSH
4556: PPUSH
4557: PPUSH
4558: PPUSH
4559: PPUSH
4560: PPUSH
4561: PPUSH
4562: PPUSH
4563: PPUSH
4564: PPUSH
4565: PPUSH
4566: PPUSH
4567: PPUSH
4568: PPUSH
4569: PPUSH
4570: PPUSH
// ru_rebuild_list := [ ] ;
4571: LD_ADDR_EXP 20
4575: PUSH
4576: EMPTY
4577: ST_TO_ADDR
// uc_side := 3 ;
4578: LD_ADDR_OWVAR 20
4582: PUSH
4583: LD_INT 3
4585: ST_TO_ADDR
// uc_nation := 3 ;
4586: LD_ADDR_OWVAR 21
4590: PUSH
4591: LD_INT 3
4593: ST_TO_ADDR
// if Difficulty > 1 then
4594: LD_OWVAR 67
4598: PUSH
4599: LD_INT 1
4601: GREATER
4602: IFFALSE 4738
// begin bc_type := b_breastwork ;
4604: LD_ADDR_OWVAR 42
4608: PUSH
4609: LD_INT 31
4611: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 78 , 74 , 2 ) ;
4612: LD_INT 78
4614: PPUSH
4615: LD_INT 74
4617: PPUSH
4618: LD_INT 2
4620: PPUSH
4621: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 171 , 193 , 4 ) ;
4625: LD_INT 171
4627: PPUSH
4628: LD_INT 193
4630: PPUSH
4631: LD_INT 4
4633: PPUSH
4634: CALL_OW 47
// bc_type := b_turret ;
4638: LD_ADDR_OWVAR 42
4642: PUSH
4643: LD_INT 33
4645: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 129 , 96 , 3 ) ;
4646: LD_INT 129
4648: PPUSH
4649: LD_INT 96
4651: PPUSH
4652: LD_INT 3
4654: PPUSH
4655: CALL_OW 47
// if Difficulty > 2 then
4659: LD_OWVAR 67
4663: PUSH
4664: LD_INT 2
4666: GREATER
4667: IFFALSE 4738
// begin RemoveUnit ( HexInfo ( 83 , 141 ) ) ;
4669: LD_INT 83
4671: PPUSH
4672: LD_INT 141
4674: PPUSH
4675: CALL_OW 428
4679: PPUSH
4680: CALL_OW 64
// RemoveUnit ( HexInfo ( 78 , 133 ) ) ;
4684: LD_INT 78
4686: PPUSH
4687: LD_INT 133
4689: PPUSH
4690: CALL_OW 428
4694: PPUSH
4695: CALL_OW 64
// CreateAndPlaceBuildingXYD ( 83 , 141 , 2 ) ;
4699: LD_INT 83
4701: PPUSH
4702: LD_INT 141
4704: PPUSH
4705: LD_INT 2
4707: PPUSH
4708: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 78 , 133 , 2 ) ;
4712: LD_INT 78
4714: PPUSH
4715: LD_INT 133
4717: PPUSH
4718: LD_INT 2
4720: PPUSH
4721: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 145 , 112 , 3 ) ;
4725: LD_INT 145
4727: PPUSH
4728: LD_INT 112
4730: PPUSH
4731: LD_INT 3
4733: PPUSH
4734: CALL_OW 47
// end ; end ; dep_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
4738: LD_ADDR_VAR 0 9
4742: PUSH
4743: LD_INT 22
4745: PUSH
4746: LD_INT 3
4748: PUSH
4749: EMPTY
4750: LIST
4751: LIST
4752: PUSH
4753: LD_INT 2
4755: PUSH
4756: LD_INT 30
4758: PUSH
4759: LD_INT 0
4761: PUSH
4762: EMPTY
4763: LIST
4764: LIST
4765: PUSH
4766: LD_INT 30
4768: PUSH
4769: LD_INT 1
4771: PUSH
4772: EMPTY
4773: LIST
4774: LIST
4775: PUSH
4776: EMPTY
4777: LIST
4778: LIST
4779: LIST
4780: PUSH
4781: EMPTY
4782: LIST
4783: LIST
4784: PPUSH
4785: CALL_OW 69
4789: ST_TO_ADDR
// lab_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
4790: LD_ADDR_VAR 0 10
4794: PUSH
4795: LD_INT 22
4797: PUSH
4798: LD_INT 3
4800: PUSH
4801: EMPTY
4802: LIST
4803: LIST
4804: PUSH
4805: LD_INT 2
4807: PUSH
4808: LD_INT 30
4810: PUSH
4811: LD_INT 6
4813: PUSH
4814: EMPTY
4815: LIST
4816: LIST
4817: PUSH
4818: LD_INT 30
4820: PUSH
4821: LD_INT 7
4823: PUSH
4824: EMPTY
4825: LIST
4826: LIST
4827: PUSH
4828: LD_INT 30
4830: PUSH
4831: LD_INT 8
4833: PUSH
4834: EMPTY
4835: LIST
4836: LIST
4837: PUSH
4838: EMPTY
4839: LIST
4840: LIST
4841: LIST
4842: LIST
4843: PUSH
4844: EMPTY
4845: LIST
4846: LIST
4847: PPUSH
4848: CALL_OW 69
4852: ST_TO_ADDR
// fac_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) ;
4853: LD_ADDR_VAR 0 11
4857: PUSH
4858: LD_INT 22
4860: PUSH
4861: LD_INT 3
4863: PUSH
4864: EMPTY
4865: LIST
4866: LIST
4867: PUSH
4868: LD_INT 30
4870: PUSH
4871: LD_INT 3
4873: PUSH
4874: EMPTY
4875: LIST
4876: LIST
4877: PUSH
4878: EMPTY
4879: LIST
4880: LIST
4881: PPUSH
4882: CALL_OW 69
4886: ST_TO_ADDR
// breastworks_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) ;
4887: LD_ADDR_VAR 0 12
4891: PUSH
4892: LD_INT 22
4894: PUSH
4895: LD_INT 3
4897: PUSH
4898: EMPTY
4899: LIST
4900: LIST
4901: PUSH
4902: LD_INT 30
4904: PUSH
4905: LD_INT 31
4907: PUSH
4908: EMPTY
4909: LIST
4910: LIST
4911: PUSH
4912: EMPTY
4913: LIST
4914: LIST
4915: PPUSH
4916: CALL_OW 69
4920: ST_TO_ADDR
// bunker_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) ;
4921: LD_ADDR_VAR 0 13
4925: PUSH
4926: LD_INT 22
4928: PUSH
4929: LD_INT 3
4931: PUSH
4932: EMPTY
4933: LIST
4934: LIST
4935: PUSH
4936: LD_INT 30
4938: PUSH
4939: LD_INT 32
4941: PUSH
4942: EMPTY
4943: LIST
4944: LIST
4945: PUSH
4946: EMPTY
4947: LIST
4948: LIST
4949: PPUSH
4950: CALL_OW 69
4954: ST_TO_ADDR
// turret_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_turret ] ] ) ;
4955: LD_ADDR_VAR 0 14
4959: PUSH
4960: LD_INT 22
4962: PUSH
4963: LD_INT 3
4965: PUSH
4966: EMPTY
4967: LIST
4968: LIST
4969: PUSH
4970: LD_INT 30
4972: PUSH
4973: LD_INT 33
4975: PUSH
4976: EMPTY
4977: LIST
4978: LIST
4979: PUSH
4980: EMPTY
4981: LIST
4982: LIST
4983: PPUSH
4984: CALL_OW 69
4988: ST_TO_ADDR
// weapons_list := [ [ ru_heavy_machine_gun , 5 ] , [ ru_gatling_gun , 50 ] , [ ru_gun , 30 ] , [ ru_heavy_gun , 15 ] ] ;
4989: LD_ADDR_VAR 0 15
4993: PUSH
4994: LD_INT 42
4996: PUSH
4997: LD_INT 5
4999: PUSH
5000: EMPTY
5001: LIST
5002: LIST
5003: PUSH
5004: LD_INT 43
5006: PUSH
5007: LD_INT 50
5009: PUSH
5010: EMPTY
5011: LIST
5012: LIST
5013: PUSH
5014: LD_INT 44
5016: PUSH
5017: LD_INT 30
5019: PUSH
5020: EMPTY
5021: LIST
5022: LIST
5023: PUSH
5024: LD_INT 46
5026: PUSH
5027: LD_INT 15
5029: PUSH
5030: EMPTY
5031: LIST
5032: LIST
5033: PUSH
5034: EMPTY
5035: LIST
5036: LIST
5037: LIST
5038: LIST
5039: ST_TO_ADDR
// personel_counter := [ 0 , 4 , 6 , 3 ] ;
5040: LD_ADDR_VAR 0 16
5044: PUSH
5045: LD_INT 0
5047: PUSH
5048: LD_INT 4
5050: PUSH
5051: LD_INT 6
5053: PUSH
5054: LD_INT 3
5056: PUSH
5057: EMPTY
5058: LIST
5059: LIST
5060: LIST
5061: LIST
5062: ST_TO_ADDR
// skill := [ 4 , 5 , 6 , 6 ] [ Difficulty ] ;
5063: LD_ADDR_VAR 0 6
5067: PUSH
5068: LD_INT 4
5070: PUSH
5071: LD_INT 5
5073: PUSH
5074: LD_INT 6
5076: PUSH
5077: LD_INT 6
5079: PUSH
5080: EMPTY
5081: LIST
5082: LIST
5083: LIST
5084: LIST
5085: PUSH
5086: LD_OWVAR 67
5090: ARRAY
5091: ST_TO_ADDR
// SetBName ( ru_dep_main , am_tukh ) ;
5092: LD_INT 16
5094: PPUSH
5095: LD_STRING am_tukh
5097: PPUSH
5098: CALL_OW 500
// for i in FilterAllUnits ( [ f_type , unit_building ] ) do
5102: LD_ADDR_VAR 0 2
5106: PUSH
5107: LD_INT 21
5109: PUSH
5110: LD_INT 3
5112: PUSH
5113: EMPTY
5114: LIST
5115: LIST
5116: PPUSH
5117: CALL_OW 69
5121: PUSH
5122: FOR_IN
5123: IFFALSE 5160
// SetBLevel ( i , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
5125: LD_VAR 0 2
5129: PPUSH
5130: LD_INT 4
5132: PUSH
5133: LD_INT 5
5135: PUSH
5136: LD_INT 6
5138: PUSH
5139: LD_INT 7
5141: PUSH
5142: EMPTY
5143: LIST
5144: LIST
5145: LIST
5146: LIST
5147: PUSH
5148: LD_OWVAR 67
5152: ARRAY
5153: PPUSH
5154: CALL_OW 241
5158: GO 5122
5160: POP
5161: POP
// for i in dep_list do
5162: LD_ADDR_VAR 0 2
5166: PUSH
5167: LD_VAR 0 9
5171: PUSH
5172: FOR_IN
5173: IFFALSE 5217
// begin SetResourceType ( GetBase ( i ) , mat_cans , 1000 ) ;
5175: LD_VAR 0 2
5179: PPUSH
5180: CALL_OW 274
5184: PPUSH
5185: LD_INT 1
5187: PPUSH
5188: LD_INT 1000
5190: PPUSH
5191: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 1000 ) ;
5195: LD_VAR 0 2
5199: PPUSH
5200: CALL_OW 274
5204: PPUSH
5205: LD_INT 2
5207: PPUSH
5208: LD_INT 1000
5210: PPUSH
5211: CALL_OW 277
// end ;
5215: GO 5172
5217: POP
5218: POP
// InitHc ;
5219: CALL_OW 19
// tmp := bunker_list * [ 45 , 60 , 75 , 80 ] [ Difficulty ] div 100 ;
5223: LD_ADDR_VAR 0 8
5227: PUSH
5228: LD_VAR 0 13
5232: PUSH
5233: LD_INT 45
5235: PUSH
5236: LD_INT 60
5238: PUSH
5239: LD_INT 75
5241: PUSH
5242: LD_INT 80
5244: PUSH
5245: EMPTY
5246: LIST
5247: LIST
5248: LIST
5249: LIST
5250: PUSH
5251: LD_OWVAR 67
5255: ARRAY
5256: MUL
5257: PUSH
5258: LD_INT 100
5260: DIV
5261: ST_TO_ADDR
// personel_counter := Replace ( personel_counter , 1 , tmp ) ;
5262: LD_ADDR_VAR 0 16
5266: PUSH
5267: LD_VAR 0 16
5271: PPUSH
5272: LD_INT 1
5274: PPUSH
5275: LD_VAR 0 8
5279: PPUSH
5280: CALL_OW 1
5284: ST_TO_ADDR
// tmp := [ ] ;
5285: LD_ADDR_VAR 0 8
5289: PUSH
5290: EMPTY
5291: ST_TO_ADDR
// for i in bunker_list do
5292: LD_ADDR_VAR 0 2
5296: PUSH
5297: LD_VAR 0 13
5301: PUSH
5302: FOR_IN
5303: IFFALSE 5399
// if i mod 10 + 1 < tmp then
5305: LD_VAR 0 2
5309: PUSH
5310: LD_INT 10
5312: MOD
5313: PUSH
5314: LD_INT 1
5316: PLUS
5317: PUSH
5318: LD_VAR 0 8
5322: LESS
5323: IFFALSE 5368
// tmp := Insert ( tmp , i mod rand ( 3 , 5 ) + 1 , i ) else
5325: LD_ADDR_VAR 0 8
5329: PUSH
5330: LD_VAR 0 8
5334: PPUSH
5335: LD_VAR 0 2
5339: PUSH
5340: LD_INT 3
5342: PPUSH
5343: LD_INT 5
5345: PPUSH
5346: CALL_OW 12
5350: MOD
5351: PUSH
5352: LD_INT 1
5354: PLUS
5355: PPUSH
5356: LD_VAR 0 2
5360: PPUSH
5361: CALL_OW 2
5365: ST_TO_ADDR
5366: GO 5397
// tmp := Insert ( tmp , tmp + 1 , i ) ;
5368: LD_ADDR_VAR 0 8
5372: PUSH
5373: LD_VAR 0 8
5377: PPUSH
5378: LD_VAR 0 8
5382: PUSH
5383: LD_INT 1
5385: PLUS
5386: PPUSH
5387: LD_VAR 0 2
5391: PPUSH
5392: CALL_OW 2
5396: ST_TO_ADDR
5397: GO 5302
5399: POP
5400: POP
// bunker_list := tmp ;
5401: LD_ADDR_VAR 0 13
5405: PUSH
5406: LD_VAR 0 8
5410: ST_TO_ADDR
// for i in bunker_list ^ turret_list do
5411: LD_ADDR_VAR 0 2
5415: PUSH
5416: LD_VAR 0 13
5420: PUSH
5421: LD_VAR 0 14
5425: ADD
5426: PUSH
5427: FOR_IN
5428: IFFALSE 5451
// PlaceWeaponTurret ( i , GetTurretWeaponBase ( i ) ) ;
5430: LD_VAR 0 2
5434: PPUSH
5435: LD_VAR 0 2
5439: PPUSH
5440: CALL 2200 0 1
5444: PPUSH
5445: CALL_OW 431
5449: GO 5427
5451: POP
5452: POP
// while ( personel_counter [ 1 ] ) do
5453: LD_VAR 0 16
5457: PUSH
5458: LD_INT 1
5460: ARRAY
5461: IFFALSE 5569
// begin i := rand ( 1 , bunker_list ) ;
5463: LD_ADDR_VAR 0 2
5467: PUSH
5468: LD_INT 1
5470: PPUSH
5471: LD_VAR 0 13
5475: PPUSH
5476: CALL_OW 12
5480: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
5481: LD_INT 0
5483: PPUSH
5484: LD_INT 1
5486: PPUSH
5487: LD_VAR 0 6
5491: PPUSH
5492: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , bunker_list [ i ] ) ;
5496: CALL_OW 44
5500: PPUSH
5501: LD_VAR 0 13
5505: PUSH
5506: LD_VAR 0 2
5510: ARRAY
5511: PPUSH
5512: CALL_OW 52
// bunker_list := Delete ( bunker_list , i ) ;
5516: LD_ADDR_VAR 0 13
5520: PUSH
5521: LD_VAR 0 13
5525: PPUSH
5526: LD_VAR 0 2
5530: PPUSH
5531: CALL_OW 3
5535: ST_TO_ADDR
// personel_counter := Replace ( personel_counter , 1 , personel_counter [ 1 ] - 1 ) ;
5536: LD_ADDR_VAR 0 16
5540: PUSH
5541: LD_VAR 0 16
5545: PPUSH
5546: LD_INT 1
5548: PPUSH
5549: LD_VAR 0 16
5553: PUSH
5554: LD_INT 1
5556: ARRAY
5557: PUSH
5558: LD_INT 1
5560: MINUS
5561: PPUSH
5562: CALL_OW 1
5566: ST_TO_ADDR
// end ;
5567: GO 5453
// for i = 1 to personel_counter [ 2 ] do
5569: LD_ADDR_VAR 0 2
5573: PUSH
5574: DOUBLE
5575: LD_INT 1
5577: DEC
5578: ST_TO_ADDR
5579: LD_VAR 0 16
5583: PUSH
5584: LD_INT 2
5586: ARRAY
5587: PUSH
5588: FOR_TO
5589: IFFALSE 5620
// begin PrepareHuman ( false , 2 , skill ) ;
5591: LD_INT 0
5593: PPUSH
5594: LD_INT 2
5596: PPUSH
5597: LD_VAR 0 6
5601: PPUSH
5602: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , ru_dep_main ) ;
5606: CALL_OW 44
5610: PPUSH
5611: LD_INT 16
5613: PPUSH
5614: CALL_OW 52
// end ;
5618: GO 5588
5620: POP
5621: POP
// for i = 1 to personel_counter [ 3 ] do
5622: LD_ADDR_VAR 0 2
5626: PUSH
5627: DOUBLE
5628: LD_INT 1
5630: DEC
5631: ST_TO_ADDR
5632: LD_VAR 0 16
5636: PUSH
5637: LD_INT 3
5639: ARRAY
5640: PUSH
5641: FOR_TO
5642: IFFALSE 5689
// begin PrepareHuman ( false , 3 , skill ) ;
5644: LD_INT 0
5646: PPUSH
5647: LD_INT 3
5649: PPUSH
5650: LD_VAR 0 6
5654: PPUSH
5655: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , fac_list [ i mod 2 + 1 ] ) ;
5659: CALL_OW 44
5663: PPUSH
5664: LD_VAR 0 11
5668: PUSH
5669: LD_VAR 0 2
5673: PUSH
5674: LD_INT 2
5676: MOD
5677: PUSH
5678: LD_INT 1
5680: PLUS
5681: ARRAY
5682: PPUSH
5683: CALL_OW 52
// end ;
5687: GO 5641
5689: POP
5690: POP
// for i = 1 to personel_counter [ 4 ] do
5691: LD_ADDR_VAR 0 2
5695: PUSH
5696: DOUBLE
5697: LD_INT 1
5699: DEC
5700: ST_TO_ADDR
5701: LD_VAR 0 16
5705: PUSH
5706: LD_INT 4
5708: ARRAY
5709: PUSH
5710: FOR_TO
5711: IFFALSE 5748
// begin PrepareHuman ( false , 4 , skill ) ;
5713: LD_INT 0
5715: PPUSH
5716: LD_INT 4
5718: PPUSH
5719: LD_VAR 0 6
5723: PPUSH
5724: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , lab_list [ 1 ] ) ;
5728: CALL_OW 44
5732: PPUSH
5733: LD_VAR 0 10
5737: PUSH
5738: LD_INT 1
5740: ARRAY
5741: PPUSH
5742: CALL_OW 52
// end ;
5746: GO 5710
5748: POP
5749: POP
// for i in breastworks_list do
5750: LD_ADDR_VAR 0 2
5754: PUSH
5755: LD_VAR 0 12
5759: PUSH
5760: FOR_IN
5761: IFFALSE 5873
// begin r := GetDir ( i ) ;
5763: LD_ADDR_VAR 0 4
5767: PUSH
5768: LD_VAR 0 2
5772: PPUSH
5773: CALL_OW 254
5777: ST_TO_ADDR
// if r > 3 then
5778: LD_VAR 0 4
5782: PUSH
5783: LD_INT 3
5785: GREATER
5786: IFFALSE 5804
// r := r - 3 else
5788: LD_ADDR_VAR 0 4
5792: PUSH
5793: LD_VAR 0 4
5797: PUSH
5798: LD_INT 3
5800: MINUS
5801: ST_TO_ADDR
5802: GO 5818
// r := r + 3 ;
5804: LD_ADDR_VAR 0 4
5808: PUSH
5809: LD_VAR 0 4
5813: PUSH
5814: LD_INT 3
5816: PLUS
5817: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
5818: LD_INT 0
5820: PPUSH
5821: LD_INT 1
5823: PPUSH
5824: LD_VAR 0 6
5828: PPUSH
5829: CALL_OW 380
// un := CreateHuman ;
5833: LD_ADDR_VAR 0 5
5837: PUSH
5838: CALL_OW 44
5842: ST_TO_ADDR
// SetDir ( un , r ) ;
5843: LD_VAR 0 5
5847: PPUSH
5848: LD_VAR 0 4
5852: PPUSH
5853: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
5857: LD_VAR 0 5
5861: PPUSH
5862: LD_VAR 0 2
5866: PPUSH
5867: CALL_OW 52
// end ;
5871: GO 5760
5873: POP
5874: POP
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) ;
5875: LD_ADDR_VAR 0 8
5879: PUSH
5880: LD_INT 22
5882: PUSH
5883: LD_INT 3
5885: PUSH
5886: EMPTY
5887: LIST
5888: LIST
5889: PUSH
5890: LD_INT 25
5892: PUSH
5893: LD_INT 3
5895: PUSH
5896: EMPTY
5897: LIST
5898: LIST
5899: PUSH
5900: EMPTY
5901: LIST
5902: LIST
5903: PPUSH
5904: CALL_OW 69
5908: ST_TO_ADDR
// r := [ 4 , 5 , 6 , 6 ] [ Difficulty ] ;
5909: LD_ADDR_VAR 0 4
5913: PUSH
5914: LD_INT 4
5916: PUSH
5917: LD_INT 5
5919: PUSH
5920: LD_INT 6
5922: PUSH
5923: LD_INT 6
5925: PUSH
5926: EMPTY
5927: LIST
5928: LIST
5929: LIST
5930: LIST
5931: PUSH
5932: LD_OWVAR 67
5936: ARRAY
5937: ST_TO_ADDR
// for i = 1 to r do
5938: LD_ADDR_VAR 0 2
5942: PUSH
5943: DOUBLE
5944: LD_INT 1
5946: DEC
5947: ST_TO_ADDR
5948: LD_VAR 0 4
5952: PUSH
5953: FOR_TO
5954: IFFALSE 6127
// begin un := PrepareTank ( 3 , 3 , [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked ] [ i mod 3 + 1 ] , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_machine_gun ] [ i mod 3 + 1 ] , 100 ) ;
5956: LD_ADDR_VAR 0 5
5960: PUSH
5961: LD_INT 3
5963: PPUSH
5964: LD_INT 3
5966: PPUSH
5967: LD_INT 22
5969: PUSH
5970: LD_INT 22
5972: PUSH
5973: LD_INT 24
5975: PUSH
5976: EMPTY
5977: LIST
5978: LIST
5979: LIST
5980: PUSH
5981: LD_VAR 0 2
5985: PUSH
5986: LD_INT 3
5988: MOD
5989: PUSH
5990: LD_INT 1
5992: PLUS
5993: ARRAY
5994: PPUSH
5995: LD_INT 1
5997: PPUSH
5998: LD_INT 1
6000: PPUSH
6001: LD_INT 43
6003: PUSH
6004: LD_INT 44
6006: PUSH
6007: LD_INT 42
6009: PUSH
6010: EMPTY
6011: LIST
6012: LIST
6013: LIST
6014: PUSH
6015: LD_VAR 0 2
6019: PUSH
6020: LD_INT 3
6022: MOD
6023: PUSH
6024: LD_INT 1
6026: PLUS
6027: ARRAY
6028: PPUSH
6029: LD_INT 100
6031: PPUSH
6032: CALL 512 0 7
6036: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
6037: LD_VAR 0 5
6041: PPUSH
6042: LD_INT 0
6044: PPUSH
6045: LD_INT 5
6047: PPUSH
6048: CALL_OW 12
6052: PPUSH
6053: CALL_OW 233
// PlaceUnitArea ( un , parkingArea , false ) ;
6057: LD_VAR 0 5
6061: PPUSH
6062: LD_INT 5
6064: PPUSH
6065: LD_INT 0
6067: PPUSH
6068: CALL_OW 49
// if i > tmp - 2 then
6072: LD_VAR 0 2
6076: PUSH
6077: LD_VAR 0 8
6081: PUSH
6082: LD_INT 2
6084: MINUS
6085: GREATER
6086: IFFALSE 6090
// continue ;
6088: GO 5953
// ComExitBuilding ( tmp [ i ] ) ;
6090: LD_VAR 0 8
6094: PUSH
6095: LD_VAR 0 2
6099: ARRAY
6100: PPUSH
6101: CALL_OW 122
// AddComEnterUnit ( tmp [ i ] , un ) ;
6105: LD_VAR 0 8
6109: PUSH
6110: LD_VAR 0 2
6114: ARRAY
6115: PPUSH
6116: LD_VAR 0 5
6120: PPUSH
6121: CALL_OW 180
// end ;
6125: GO 5953
6127: POP
6128: POP
// end ;
6129: LD_VAR 0 1
6133: RET
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) do var i , filter , tmp , engs , enemy ;
6134: LD_INT 22
6136: PUSH
6137: LD_INT 3
6139: PUSH
6140: EMPTY
6141: LIST
6142: LIST
6143: PUSH
6144: LD_INT 25
6146: PUSH
6147: LD_INT 2
6149: PUSH
6150: EMPTY
6151: LIST
6152: LIST
6153: PUSH
6154: EMPTY
6155: LIST
6156: LIST
6157: PPUSH
6158: CALL_OW 69
6162: IFFALSE 6894
6164: GO 6166
6166: DISABLE
6167: LD_INT 0
6169: PPUSH
6170: PPUSH
6171: PPUSH
6172: PPUSH
6173: PPUSH
// begin enable ;
6174: ENABLE
// filter := FilterUnitsInArea ( baseArea , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
6175: LD_ADDR_VAR 0 2
6179: PUSH
6180: LD_INT 6
6182: PPUSH
6183: LD_INT 3
6185: PUSH
6186: LD_INT 24
6188: PUSH
6189: LD_INT 1000
6191: PUSH
6192: EMPTY
6193: LIST
6194: LIST
6195: PUSH
6196: EMPTY
6197: LIST
6198: LIST
6199: PUSH
6200: LD_INT 21
6202: PUSH
6203: LD_INT 3
6205: PUSH
6206: EMPTY
6207: LIST
6208: LIST
6209: PUSH
6210: EMPTY
6211: LIST
6212: LIST
6213: PPUSH
6214: CALL_OW 70
6218: ST_TO_ADDR
// engs := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
6219: LD_ADDR_VAR 0 4
6223: PUSH
6224: LD_INT 22
6226: PUSH
6227: LD_INT 3
6229: PUSH
6230: EMPTY
6231: LIST
6232: LIST
6233: PUSH
6234: LD_INT 25
6236: PUSH
6237: LD_INT 2
6239: PUSH
6240: EMPTY
6241: LIST
6242: LIST
6243: PUSH
6244: EMPTY
6245: LIST
6246: LIST
6247: PPUSH
6248: CALL_OW 69
6252: ST_TO_ADDR
// if not filter and not ru_rebuild_list then
6253: LD_VAR 0 2
6257: NOT
6258: PUSH
6259: LD_EXP 20
6263: NOT
6264: AND
6265: IFFALSE 6335
// begin for i in engs do
6267: LD_ADDR_VAR 0 1
6271: PUSH
6272: LD_VAR 0 4
6276: PUSH
6277: FOR_IN
6278: IFFALSE 6333
// if GetLives ( i ) = 1000 and not HasTask ( i ) and not IsInUnit ( i ) then
6280: LD_VAR 0 1
6284: PPUSH
6285: CALL_OW 256
6289: PUSH
6290: LD_INT 1000
6292: EQUAL
6293: PUSH
6294: LD_VAR 0 1
6298: PPUSH
6299: CALL_OW 314
6303: NOT
6304: AND
6305: PUSH
6306: LD_VAR 0 1
6310: PPUSH
6311: CALL_OW 310
6315: NOT
6316: AND
6317: IFFALSE 6331
// ComEnterUnit ( i , ru_dep_main ) ;
6319: LD_VAR 0 1
6323: PPUSH
6324: LD_INT 16
6326: PPUSH
6327: CALL_OW 120
6331: GO 6277
6333: POP
6334: POP
// end ; if UnitFilter ( engs , [ f_not , [ f_lives , 650 ] ] ) then
6335: LD_VAR 0 4
6339: PPUSH
6340: LD_INT 3
6342: PUSH
6343: LD_INT 24
6345: PUSH
6346: LD_INT 650
6348: PUSH
6349: EMPTY
6350: LIST
6351: LIST
6352: PUSH
6353: EMPTY
6354: LIST
6355: LIST
6356: PPUSH
6357: CALL_OW 72
6361: IFFALSE 6454
// begin tmp := UnitFilter ( engs , [ f_not , [ f_lives , 650 ] ] ) ;
6363: LD_ADDR_VAR 0 3
6367: PUSH
6368: LD_VAR 0 4
6372: PPUSH
6373: LD_INT 3
6375: PUSH
6376: LD_INT 24
6378: PUSH
6379: LD_INT 650
6381: PUSH
6382: EMPTY
6383: LIST
6384: LIST
6385: PUSH
6386: EMPTY
6387: LIST
6388: LIST
6389: PPUSH
6390: CALL_OW 72
6394: ST_TO_ADDR
// for i in tmp do
6395: LD_ADDR_VAR 0 1
6399: PUSH
6400: LD_VAR 0 3
6404: PUSH
6405: FOR_IN
6406: IFFALSE 6452
// if not IsInArea ( i , mainBaseArea ) then
6408: LD_VAR 0 1
6412: PPUSH
6413: LD_INT 14
6415: PPUSH
6416: CALL_OW 308
6420: NOT
6421: IFFALSE 6450
// begin ComMoveXY ( i , 129 , 125 ) ;
6423: LD_VAR 0 1
6427: PPUSH
6428: LD_INT 129
6430: PPUSH
6431: LD_INT 125
6433: PPUSH
6434: CALL_OW 111
// AddComWait ( i , 0 0$30 ) ;
6438: LD_VAR 0 1
6442: PPUSH
6443: LD_INT 1050
6445: PPUSH
6446: CALL_OW 202
// end ;
6450: GO 6405
6452: POP
6453: POP
// end ; engs := UnitFilter ( engs , [ f_lives , 650 ] ) ;
6454: LD_ADDR_VAR 0 4
6458: PUSH
6459: LD_VAR 0 4
6463: PPUSH
6464: LD_INT 24
6466: PUSH
6467: LD_INT 650
6469: PUSH
6470: EMPTY
6471: LIST
6472: LIST
6473: PPUSH
6474: CALL_OW 72
6478: ST_TO_ADDR
// if not engs then
6479: LD_VAR 0 4
6483: NOT
6484: IFFALSE 6488
// exit ;
6486: GO 6894
// if filter then
6488: LD_VAR 0 2
6492: IFFALSE 6751
// begin for i in engs do
6494: LD_ADDR_VAR 0 1
6498: PUSH
6499: LD_VAR 0 4
6503: PUSH
6504: FOR_IN
6505: IFFALSE 6529
// if IsInUnit ( i ) then
6507: LD_VAR 0 1
6511: PPUSH
6512: CALL_OW 310
6516: IFFALSE 6527
// ComExitBuilding ( i ) ;
6518: LD_VAR 0 1
6522: PPUSH
6523: CALL_OW 122
6527: GO 6504
6529: POP
6530: POP
// wait ( 3 ) ;
6531: LD_INT 3
6533: PPUSH
6534: CALL_OW 67
// if filter >= 2 and engs >= 2 then
6538: LD_VAR 0 2
6542: PUSH
6543: LD_INT 2
6545: GREATEREQUAL
6546: PUSH
6547: LD_VAR 0 4
6551: PUSH
6552: LD_INT 2
6554: GREATEREQUAL
6555: AND
6556: IFFALSE 6704
// begin for i = 1 to engs / 2 do
6558: LD_ADDR_VAR 0 1
6562: PUSH
6563: DOUBLE
6564: LD_INT 1
6566: DEC
6567: ST_TO_ADDR
6568: LD_VAR 0 4
6572: PUSH
6573: LD_INT 2
6575: DIVREAL
6576: PUSH
6577: FOR_TO
6578: IFFALSE 6624
// if not HasTask ( engs [ i ] ) then
6580: LD_VAR 0 4
6584: PUSH
6585: LD_VAR 0 1
6589: ARRAY
6590: PPUSH
6591: CALL_OW 314
6595: NOT
6596: IFFALSE 6622
// ComRepairBuilding ( engs [ i ] , filter [ 1 ] ) ;
6598: LD_VAR 0 4
6602: PUSH
6603: LD_VAR 0 1
6607: ARRAY
6608: PPUSH
6609: LD_VAR 0 2
6613: PUSH
6614: LD_INT 1
6616: ARRAY
6617: PPUSH
6618: CALL_OW 130
6622: GO 6577
6624: POP
6625: POP
// for i = engs / 2 + 1 to engs do
6626: LD_ADDR_VAR 0 1
6630: PUSH
6631: DOUBLE
6632: LD_VAR 0 4
6636: PUSH
6637: LD_INT 2
6639: DIVREAL
6640: PUSH
6641: LD_INT 1
6643: PLUS
6644: DEC
6645: ST_TO_ADDR
6646: LD_VAR 0 4
6650: PUSH
6651: FOR_TO
6652: IFFALSE 6700
// if not HasTask ( engs [ i ] ) then
6654: LD_VAR 0 4
6658: PUSH
6659: LD_VAR 0 1
6663: ARRAY
6664: PPUSH
6665: CALL_OW 314
6669: NOT
6670: IFFALSE 6698
// ComRepairBuilding ( engs [ i ] , filter [ filter ] ) ;
6672: LD_VAR 0 4
6676: PUSH
6677: LD_VAR 0 1
6681: ARRAY
6682: PPUSH
6683: LD_VAR 0 2
6687: PUSH
6688: LD_VAR 0 2
6692: ARRAY
6693: PPUSH
6694: CALL_OW 130
6698: GO 6651
6700: POP
6701: POP
// end else
6702: GO 6751
// for i in engs do
6704: LD_ADDR_VAR 0 1
6708: PUSH
6709: LD_VAR 0 4
6713: PUSH
6714: FOR_IN
6715: IFFALSE 6749
// if not HasTask ( i ) then
6717: LD_VAR 0 1
6721: PPUSH
6722: CALL_OW 314
6726: NOT
6727: IFFALSE 6747
// ComRepairBuilding ( i , filter [ 1 ] ) ;
6729: LD_VAR 0 1
6733: PPUSH
6734: LD_VAR 0 2
6738: PUSH
6739: LD_INT 1
6741: ARRAY
6742: PPUSH
6743: CALL_OW 130
6747: GO 6714
6749: POP
6750: POP
// end ; enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
6751: LD_ADDR_VAR 0 5
6755: PUSH
6756: LD_INT 81
6758: PUSH
6759: LD_INT 3
6761: PUSH
6762: EMPTY
6763: LIST
6764: LIST
6765: PPUSH
6766: CALL_OW 69
6770: ST_TO_ADDR
// if ru_rebuild_list and not filter then
6771: LD_EXP 20
6775: PUSH
6776: LD_VAR 0 2
6780: NOT
6781: AND
6782: IFFALSE 6894
// begin ComExitBuilding ( engs ) ;
6784: LD_VAR 0 4
6788: PPUSH
6789: CALL_OW 122
// if GetDistUnitXY ( NearestUnitToXY ( enemy , ru_rebuild_list [ 2 ] , ru_rebuild_list [ 3 ] ) , ru_rebuild_list [ 2 ] , ru_rebuild_list [ 3 ] ) > 10 then
6793: LD_VAR 0 5
6797: PPUSH
6798: LD_EXP 20
6802: PUSH
6803: LD_INT 2
6805: ARRAY
6806: PPUSH
6807: LD_EXP 20
6811: PUSH
6812: LD_INT 3
6814: ARRAY
6815: PPUSH
6816: CALL_OW 73
6820: PPUSH
6821: LD_EXP 20
6825: PUSH
6826: LD_INT 2
6828: ARRAY
6829: PPUSH
6830: LD_EXP 20
6834: PUSH
6835: LD_INT 3
6837: ARRAY
6838: PPUSH
6839: CALL_OW 297
6843: PUSH
6844: LD_INT 10
6846: GREATER
6847: IFFALSE 6894
// ComBuild ( engs , ru_rebuild_list [ 1 ] , ru_rebuild_list [ 2 ] , ru_rebuild_list [ 3 ] , ru_rebuild_list [ 4 ] ) ;
6849: LD_VAR 0 4
6853: PPUSH
6854: LD_EXP 20
6858: PUSH
6859: LD_INT 1
6861: ARRAY
6862: PPUSH
6863: LD_EXP 20
6867: PUSH
6868: LD_INT 2
6870: ARRAY
6871: PPUSH
6872: LD_EXP 20
6876: PUSH
6877: LD_INT 3
6879: ARRAY
6880: PPUSH
6881: LD_EXP 20
6885: PUSH
6886: LD_INT 4
6888: ARRAY
6889: PPUSH
6890: CALL_OW 145
// end ; end ;
6894: PPOPN 5
6896: END
// every 0 0$1 trigger GetLives ( ru_dep_main ) < 250 do var i , tmp ;
6897: LD_INT 16
6899: PPUSH
6900: CALL_OW 256
6904: PUSH
6905: LD_INT 250
6907: LESS
6908: IFFALSE 7098
6910: GO 6912
6912: DISABLE
6913: LD_INT 0
6915: PPUSH
6916: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_class , 1 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ;
6917: LD_ADDR_VAR 0 2
6921: PUSH
6922: LD_INT 22
6924: PUSH
6925: LD_INT 3
6927: PUSH
6928: EMPTY
6929: LIST
6930: LIST
6931: PUSH
6932: LD_INT 2
6934: PUSH
6935: LD_INT 25
6937: PUSH
6938: LD_INT 1
6940: PUSH
6941: EMPTY
6942: LIST
6943: LIST
6944: PUSH
6945: LD_INT 25
6947: PUSH
6948: LD_INT 3
6950: PUSH
6951: EMPTY
6952: LIST
6953: LIST
6954: PUSH
6955: LD_INT 25
6957: PUSH
6958: LD_INT 4
6960: PUSH
6961: EMPTY
6962: LIST
6963: LIST
6964: PUSH
6965: EMPTY
6966: LIST
6967: LIST
6968: LIST
6969: LIST
6970: PUSH
6971: EMPTY
6972: LIST
6973: LIST
6974: PPUSH
6975: CALL_OW 69
6979: ST_TO_ADDR
// ComExitBuilding ( tmp ) ;
6980: LD_VAR 0 2
6984: PPUSH
6985: CALL_OW 122
// wait ( 3 ) ;
6989: LD_INT 3
6991: PPUSH
6992: CALL_OW 67
// ComMoveXY ( tmp , 156 , 211 ) ;
6996: LD_VAR 0 2
7000: PPUSH
7001: LD_INT 156
7003: PPUSH
7004: LD_INT 211
7006: PPUSH
7007: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
7011: LD_INT 35
7013: PPUSH
7014: CALL_OW 67
// for i in tmp do
7018: LD_ADDR_VAR 0 1
7022: PUSH
7023: LD_VAR 0 2
7027: PUSH
7028: FOR_IN
7029: IFFALSE 7089
// if IsInArea ( i , escapeArea ) then
7031: LD_VAR 0 1
7035: PPUSH
7036: LD_INT 15
7038: PPUSH
7039: CALL_OW 308
7043: IFFALSE 7072
// begin RemoveUnit ( i ) ;
7045: LD_VAR 0 1
7049: PPUSH
7050: CALL_OW 64
// tmp := tmp diff i ;
7054: LD_ADDR_VAR 0 2
7058: PUSH
7059: LD_VAR 0 2
7063: PUSH
7064: LD_VAR 0 1
7068: DIFF
7069: ST_TO_ADDR
// end else
7070: GO 7087
// ComMoveXY ( i , 156 , 211 ) ;
7072: LD_VAR 0 1
7076: PPUSH
7077: LD_INT 156
7079: PPUSH
7080: LD_INT 211
7082: PPUSH
7083: CALL_OW 111
7087: GO 7028
7089: POP
7090: POP
// until not tmp ;
7091: LD_VAR 0 2
7095: NOT
7096: IFFALSE 7011
// end ;
7098: PPOPN 2
7100: END
// every 0 0$01 trigger GetLives ( ru_dep_main ) > 250 and FilterAllUnits ( [ [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_outside ] ] ] ) do var i , tmp ;
7101: LD_INT 16
7103: PPUSH
7104: CALL_OW 256
7108: PUSH
7109: LD_INT 250
7111: GREATER
7112: PUSH
7113: LD_INT 22
7115: PUSH
7116: LD_INT 3
7118: PUSH
7119: EMPTY
7120: LIST
7121: LIST
7122: PUSH
7123: LD_INT 25
7125: PUSH
7126: LD_INT 1
7128: PUSH
7129: EMPTY
7130: LIST
7131: LIST
7132: PUSH
7133: LD_INT 56
7135: PUSH
7136: EMPTY
7137: LIST
7138: PUSH
7139: EMPTY
7140: LIST
7141: LIST
7142: LIST
7143: PUSH
7144: EMPTY
7145: LIST
7146: PPUSH
7147: CALL_OW 69
7151: AND
7152: IFFALSE 7264
7154: GO 7156
7156: DISABLE
7157: LD_INT 0
7159: PPUSH
7160: PPUSH
// begin enable ;
7161: ENABLE
// tmp := FilterAllUnits ( [ [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_outside ] , [ f_not , [ f_hastask ] ] ] ] ) ;
7162: LD_ADDR_VAR 0 2
7166: PUSH
7167: LD_INT 22
7169: PUSH
7170: LD_INT 3
7172: PUSH
7173: EMPTY
7174: LIST
7175: LIST
7176: PUSH
7177: LD_INT 25
7179: PUSH
7180: LD_INT 1
7182: PUSH
7183: EMPTY
7184: LIST
7185: LIST
7186: PUSH
7187: LD_INT 56
7189: PUSH
7190: EMPTY
7191: LIST
7192: PUSH
7193: LD_INT 3
7195: PUSH
7196: LD_INT 60
7198: PUSH
7199: EMPTY
7200: LIST
7201: PUSH
7202: EMPTY
7203: LIST
7204: LIST
7205: PUSH
7206: EMPTY
7207: LIST
7208: LIST
7209: LIST
7210: LIST
7211: PUSH
7212: EMPTY
7213: LIST
7214: PPUSH
7215: CALL_OW 69
7219: ST_TO_ADDR
// if not tmp then
7220: LD_VAR 0 2
7224: NOT
7225: IFFALSE 7229
// exit ;
7227: GO 7264
// for i in tmp do
7229: LD_ADDR_VAR 0 1
7233: PUSH
7234: LD_VAR 0 2
7238: PUSH
7239: FOR_IN
7240: IFFALSE 7262
// GoToAnotherTower ( i , 0 , 143 , 143 ) ;
7242: LD_VAR 0 1
7246: PPUSH
7247: LD_INT 0
7249: PPUSH
7250: LD_INT 143
7252: PPUSH
7253: LD_INT 143
7255: PPUSH
7256: CALL 830 0 4
7260: GO 7239
7262: POP
7263: POP
// end ;
7264: PPOPN 2
7266: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do var i , tmp , doc ;
7267: LD_INT 22
7269: PUSH
7270: LD_INT 3
7272: PUSH
7273: EMPTY
7274: LIST
7275: LIST
7276: PUSH
7277: LD_INT 25
7279: PUSH
7280: LD_INT 4
7282: PUSH
7283: EMPTY
7284: LIST
7285: LIST
7286: PUSH
7287: EMPTY
7288: LIST
7289: LIST
7290: PPUSH
7291: CALL_OW 69
7295: IFFALSE 7549
7297: GO 7299
7299: DISABLE
7300: LD_INT 0
7302: PPUSH
7303: PPUSH
7304: PPUSH
// begin enable ;
7305: ENABLE
// tmp := FilterUnitsInArea ( mainBaseArea , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
7306: LD_ADDR_VAR 0 2
7310: PUSH
7311: LD_INT 14
7313: PPUSH
7314: LD_INT 22
7316: PUSH
7317: LD_INT 3
7319: PUSH
7320: EMPTY
7321: LIST
7322: LIST
7323: PUSH
7324: LD_INT 21
7326: PUSH
7327: LD_INT 1
7329: PUSH
7330: EMPTY
7331: LIST
7332: LIST
7333: PUSH
7334: LD_INT 3
7336: PUSH
7337: LD_INT 24
7339: PUSH
7340: LD_INT 1000
7342: PUSH
7343: EMPTY
7344: LIST
7345: LIST
7346: PUSH
7347: EMPTY
7348: LIST
7349: LIST
7350: PUSH
7351: EMPTY
7352: LIST
7353: LIST
7354: LIST
7355: PPUSH
7356: CALL_OW 70
7360: ST_TO_ADDR
// doc := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) ;
7361: LD_ADDR_VAR 0 3
7365: PUSH
7366: LD_INT 22
7368: PUSH
7369: LD_INT 3
7371: PUSH
7372: EMPTY
7373: LIST
7374: LIST
7375: PUSH
7376: LD_INT 25
7378: PUSH
7379: LD_INT 4
7381: PUSH
7382: EMPTY
7383: LIST
7384: LIST
7385: PUSH
7386: EMPTY
7387: LIST
7388: LIST
7389: PPUSH
7390: CALL_OW 69
7394: ST_TO_ADDR
// if not doc then
7395: LD_VAR 0 3
7399: NOT
7400: IFFALSE 7404
// exit ;
7402: GO 7549
// if not tmp then
7404: LD_VAR 0 2
7408: NOT
7409: IFFALSE 7500
// begin if not IsInUnit ( doc [ 1 ] ) then
7411: LD_VAR 0 3
7415: PUSH
7416: LD_INT 1
7418: ARRAY
7419: PPUSH
7420: CALL_OW 310
7424: NOT
7425: IFFALSE 7498
// ComEnterUnit ( doc , FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) [ 1 ] ) ;
7427: LD_VAR 0 3
7431: PPUSH
7432: LD_INT 22
7434: PUSH
7435: LD_INT 3
7437: PUSH
7438: EMPTY
7439: LIST
7440: LIST
7441: PUSH
7442: LD_INT 2
7444: PUSH
7445: LD_INT 30
7447: PUSH
7448: LD_INT 6
7450: PUSH
7451: EMPTY
7452: LIST
7453: LIST
7454: PUSH
7455: LD_INT 30
7457: PUSH
7458: LD_INT 7
7460: PUSH
7461: EMPTY
7462: LIST
7463: LIST
7464: PUSH
7465: LD_INT 30
7467: PUSH
7468: LD_INT 8
7470: PUSH
7471: EMPTY
7472: LIST
7473: LIST
7474: PUSH
7475: EMPTY
7476: LIST
7477: LIST
7478: LIST
7479: LIST
7480: PUSH
7481: EMPTY
7482: LIST
7483: LIST
7484: PPUSH
7485: CALL_OW 69
7489: PUSH
7490: LD_INT 1
7492: ARRAY
7493: PPUSH
7494: CALL_OW 120
// exit ;
7498: GO 7549
// end ; if IsInUnit ( doc [ 1 ] ) then
7500: LD_VAR 0 3
7504: PUSH
7505: LD_INT 1
7507: ARRAY
7508: PPUSH
7509: CALL_OW 310
7513: IFFALSE 7524
// ComExitBuilding ( doc ) ;
7515: LD_VAR 0 3
7519: PPUSH
7520: CALL_OW 122
// wait ( 3 ) ;
7524: LD_INT 3
7526: PPUSH
7527: CALL_OW 67
// ComHeal ( doc , tmp [ 1 ] ) ;
7531: LD_VAR 0 3
7535: PPUSH
7536: LD_VAR 0 2
7540: PUSH
7541: LD_INT 1
7543: ARRAY
7544: PPUSH
7545: CALL_OW 128
// end ;
7549: PPOPN 3
7551: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) do var i , tmp , attacking , areas , area ;
7552: LD_INT 22
7554: PUSH
7555: LD_INT 3
7557: PUSH
7558: EMPTY
7559: LIST
7560: LIST
7561: PUSH
7562: LD_INT 25
7564: PUSH
7565: LD_INT 3
7567: PUSH
7568: EMPTY
7569: LIST
7570: LIST
7571: PUSH
7572: EMPTY
7573: LIST
7574: LIST
7575: PPUSH
7576: CALL_OW 69
7580: PUSH
7581: LD_INT 22
7583: PUSH
7584: LD_INT 3
7586: PUSH
7587: EMPTY
7588: LIST
7589: LIST
7590: PUSH
7591: LD_INT 21
7593: PUSH
7594: LD_INT 2
7596: PUSH
7597: EMPTY
7598: LIST
7599: LIST
7600: PUSH
7601: EMPTY
7602: LIST
7603: LIST
7604: PPUSH
7605: CALL_OW 69
7609: AND
7610: IFFALSE 8024
7612: GO 7614
7614: DISABLE
7615: LD_INT 0
7617: PPUSH
7618: PPUSH
7619: PPUSH
7620: PPUSH
7621: PPUSH
// begin enable ;
7622: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) ;
7623: LD_ADDR_VAR 0 2
7627: PUSH
7628: LD_INT 22
7630: PUSH
7631: LD_INT 3
7633: PUSH
7634: EMPTY
7635: LIST
7636: LIST
7637: PUSH
7638: LD_INT 21
7640: PUSH
7641: LD_INT 2
7643: PUSH
7644: EMPTY
7645: LIST
7646: LIST
7647: PUSH
7648: LD_INT 3
7650: PUSH
7651: LD_INT 58
7653: PUSH
7654: EMPTY
7655: LIST
7656: PUSH
7657: EMPTY
7658: LIST
7659: LIST
7660: PUSH
7661: EMPTY
7662: LIST
7663: LIST
7664: LIST
7665: PPUSH
7666: CALL_OW 69
7670: ST_TO_ADDR
// areas := [ sectorAlpha , sectorBeta , sectorDelta , mainBaseArea ] ;
7671: LD_ADDR_VAR 0 4
7675: PUSH
7676: LD_INT 10
7678: PUSH
7679: LD_INT 11
7681: PUSH
7682: LD_INT 12
7684: PUSH
7685: LD_INT 14
7687: PUSH
7688: EMPTY
7689: LIST
7690: LIST
7691: LIST
7692: LIST
7693: ST_TO_ADDR
// area := 0 ;
7694: LD_ADDR_VAR 0 5
7698: PUSH
7699: LD_INT 0
7701: ST_TO_ADDR
// attacking := false ;
7702: LD_ADDR_VAR 0 3
7706: PUSH
7707: LD_INT 0
7709: ST_TO_ADDR
// for i in tmp do
7710: LD_ADDR_VAR 0 1
7714: PUSH
7715: LD_VAR 0 2
7719: PUSH
7720: FOR_IN
7721: IFFALSE 7807
// if GetDistUnits ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) < 10 then
7723: LD_VAR 0 1
7727: PPUSH
7728: LD_INT 22
7730: PUSH
7731: LD_INT 1
7733: PUSH
7734: EMPTY
7735: LIST
7736: LIST
7737: PPUSH
7738: CALL_OW 69
7742: PPUSH
7743: LD_VAR 0 1
7747: PPUSH
7748: CALL_OW 74
7752: PPUSH
7753: CALL_OW 296
7757: PUSH
7758: LD_INT 10
7760: LESS
7761: IFFALSE 7805
// begin ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
7763: LD_VAR 0 1
7767: PPUSH
7768: LD_INT 22
7770: PUSH
7771: LD_INT 1
7773: PUSH
7774: EMPTY
7775: LIST
7776: LIST
7777: PPUSH
7778: CALL_OW 69
7782: PPUSH
7783: LD_VAR 0 1
7787: PPUSH
7788: CALL_OW 74
7792: PPUSH
7793: CALL_OW 115
// attacking := true ;
7797: LD_ADDR_VAR 0 3
7801: PUSH
7802: LD_INT 1
7804: ST_TO_ADDR
// end ;
7805: GO 7720
7807: POP
7808: POP
// if attacking then
7809: LD_VAR 0 3
7813: IFFALSE 7817
// exit ;
7815: GO 8024
// for i in areas do
7817: LD_ADDR_VAR 0 1
7821: PUSH
7822: LD_VAR 0 4
7826: PUSH
7827: FOR_IN
7828: IFFALSE 7865
// if FilterUnitsInArea ( i , [ f_side , 1 ] ) then
7830: LD_VAR 0 1
7834: PPUSH
7835: LD_INT 22
7837: PUSH
7838: LD_INT 1
7840: PUSH
7841: EMPTY
7842: LIST
7843: LIST
7844: PPUSH
7845: CALL_OW 70
7849: IFFALSE 7863
// begin area := i ;
7851: LD_ADDR_VAR 0 5
7855: PUSH
7856: LD_VAR 0 1
7860: ST_TO_ADDR
// break ;
7861: GO 7865
// end ;
7863: GO 7827
7865: POP
7866: POP
// if area then
7867: LD_VAR 0 5
7871: IFFALSE 8024
// begin for i in tmp do
7873: LD_ADDR_VAR 0 1
7877: PUSH
7878: LD_VAR 0 2
7882: PUSH
7883: FOR_IN
7884: IFFALSE 8022
// begin if GetFuel ( i ) < 33 then
7886: LD_VAR 0 1
7890: PPUSH
7891: CALL_OW 261
7895: PUSH
7896: LD_INT 33
7898: LESS
7899: IFFALSE 7913
// SetFuel ( i , 33 ) ;
7901: LD_VAR 0 1
7905: PPUSH
7906: LD_INT 33
7908: PPUSH
7909: CALL_OW 240
// if GetDistUnits ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) < 10 then
7913: LD_VAR 0 1
7917: PPUSH
7918: LD_INT 22
7920: PUSH
7921: LD_INT 1
7923: PUSH
7924: EMPTY
7925: LIST
7926: LIST
7927: PPUSH
7928: CALL_OW 69
7932: PPUSH
7933: LD_VAR 0 1
7937: PPUSH
7938: CALL_OW 74
7942: PPUSH
7943: CALL_OW 296
7947: PUSH
7948: LD_INT 10
7950: LESS
7951: IFFALSE 7989
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) else
7953: LD_VAR 0 1
7957: PPUSH
7958: LD_INT 22
7960: PUSH
7961: LD_INT 1
7963: PUSH
7964: EMPTY
7965: LIST
7966: LIST
7967: PPUSH
7968: CALL_OW 69
7972: PPUSH
7973: LD_VAR 0 1
7977: PPUSH
7978: CALL_OW 74
7982: PPUSH
7983: CALL_OW 115
7987: GO 8020
// if not IsInArea ( i , area ) then
7989: LD_VAR 0 1
7993: PPUSH
7994: LD_VAR 0 5
7998: PPUSH
7999: CALL_OW 308
8003: NOT
8004: IFFALSE 8020
// ComMoveToArea ( i , area ) ;
8006: LD_VAR 0 1
8010: PPUSH
8011: LD_VAR 0 5
8015: PPUSH
8016: CALL_OW 113
// end ;
8020: GO 7883
8022: POP
8023: POP
// end ; end ;
8024: PPOPN 5
8026: END
// every 15 15$00 trigger Difficulty > 1 do var i , j , un , veh , time , count ;
8027: LD_OWVAR 67
8031: PUSH
8032: LD_INT 1
8034: GREATER
8035: IFFALSE 8320
8037: GO 8039
8039: DISABLE
8040: LD_INT 0
8042: PPUSH
8043: PPUSH
8044: PPUSH
8045: PPUSH
8046: PPUSH
8047: PPUSH
// begin uc_side := 3 ;
8048: LD_ADDR_OWVAR 20
8052: PUSH
8053: LD_INT 3
8055: ST_TO_ADDR
// uc_nation := 3 ;
8056: LD_ADDR_OWVAR 21
8060: PUSH
8061: LD_INT 3
8063: ST_TO_ADDR
// time := [ 9 9$00 , 7 7$00 , 6 6$00 , 5 5$30 ] [ Difficulty ] ;
8064: LD_ADDR_VAR 0 5
8068: PUSH
8069: LD_INT 18900
8071: PUSH
8072: LD_INT 14700
8074: PUSH
8075: LD_INT 12600
8077: PUSH
8078: LD_INT 11550
8080: PUSH
8081: EMPTY
8082: LIST
8083: LIST
8084: LIST
8085: LIST
8086: PUSH
8087: LD_OWVAR 67
8091: ARRAY
8092: ST_TO_ADDR
// count := [ 2 , 2 , 3 , 3 ] [ Difficulty ] ;
8093: LD_ADDR_VAR 0 6
8097: PUSH
8098: LD_INT 2
8100: PUSH
8101: LD_INT 2
8103: PUSH
8104: LD_INT 3
8106: PUSH
8107: LD_INT 3
8109: PUSH
8110: EMPTY
8111: LIST
8112: LIST
8113: LIST
8114: LIST
8115: PUSH
8116: LD_OWVAR 67
8120: ARRAY
8121: ST_TO_ADDR
// for i = 1 to count do
8122: LD_ADDR_VAR 0 1
8126: PUSH
8127: DOUBLE
8128: LD_INT 1
8130: DEC
8131: ST_TO_ADDR
8132: LD_VAR 0 6
8136: PUSH
8137: FOR_TO
8138: IFFALSE 8318
// begin wait ( time ) ;
8140: LD_VAR 0 5
8144: PPUSH
8145: CALL_OW 67
// for j = 1 to rand ( 1 , Difficulty ) do
8149: LD_ADDR_VAR 0 2
8153: PUSH
8154: DOUBLE
8155: LD_INT 1
8157: DEC
8158: ST_TO_ADDR
8159: LD_INT 1
8161: PPUSH
8162: LD_OWVAR 67
8166: PPUSH
8167: CALL_OW 12
8171: PUSH
8172: FOR_TO
8173: IFFALSE 8314
// begin veh := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_machine_gun ] [ i mod 3 + 1 ] , 80 ) ;
8175: LD_ADDR_VAR 0 4
8179: PUSH
8180: LD_INT 3
8182: PPUSH
8183: LD_INT 3
8185: PPUSH
8186: LD_INT 22
8188: PPUSH
8189: LD_INT 1
8191: PPUSH
8192: LD_INT 1
8194: PPUSH
8195: LD_INT 43
8197: PUSH
8198: LD_INT 44
8200: PUSH
8201: LD_INT 42
8203: PUSH
8204: EMPTY
8205: LIST
8206: LIST
8207: LIST
8208: PUSH
8209: LD_VAR 0 1
8213: PUSH
8214: LD_INT 3
8216: MOD
8217: PUSH
8218: LD_INT 1
8220: PLUS
8221: ARRAY
8222: PPUSH
8223: LD_INT 80
8225: PPUSH
8226: CALL 512 0 7
8230: ST_TO_ADDR
// PlaceUnitArea ( veh , southArea , false ) ;
8231: LD_VAR 0 4
8235: PPUSH
8236: LD_INT 13
8238: PPUSH
8239: LD_INT 0
8241: PPUSH
8242: CALL_OW 49
// PrepareHuman ( false , 3 , [ 4 , 5 , 5 ] [ Difficulty ] ) ;
8246: LD_INT 0
8248: PPUSH
8249: LD_INT 3
8251: PPUSH
8252: LD_INT 4
8254: PUSH
8255: LD_INT 5
8257: PUSH
8258: LD_INT 5
8260: PUSH
8261: EMPTY
8262: LIST
8263: LIST
8264: LIST
8265: PUSH
8266: LD_OWVAR 67
8270: ARRAY
8271: PPUSH
8272: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
8276: CALL_OW 44
8280: PPUSH
8281: LD_VAR 0 4
8285: PPUSH
8286: CALL_OW 52
// wait ( 0 0$01 ) ;
8290: LD_INT 35
8292: PPUSH
8293: CALL_OW 67
// ComMoveXY ( veh , 143 , 143 ) ;
8297: LD_VAR 0 4
8301: PPUSH
8302: LD_INT 143
8304: PPUSH
8305: LD_INT 143
8307: PPUSH
8308: CALL_OW 111
// end ;
8312: GO 8172
8314: POP
8315: POP
// end ;
8316: GO 8137
8318: POP
8319: POP
// end ;
8320: PPOPN 6
8322: END
// every 8 8$00 do var i , un , time ;
8323: GO 8325
8325: DISABLE
8326: LD_INT 0
8328: PPUSH
8329: PPUSH
8330: PPUSH
// begin time := [ 3 3$00 , 1 1$00 , 0 0$30 ] ;
8331: LD_ADDR_VAR 0 3
8335: PUSH
8336: LD_INT 6300
8338: PUSH
8339: LD_INT 2100
8341: PUSH
8342: LD_INT 1050
8344: PUSH
8345: EMPTY
8346: LIST
8347: LIST
8348: LIST
8349: ST_TO_ADDR
// wait ( time ) ;
8350: LD_VAR 0 3
8354: PPUSH
8355: CALL_OW 67
// uc_side := 3 ;
8359: LD_ADDR_OWVAR 20
8363: PUSH
8364: LD_INT 3
8366: ST_TO_ADDR
// uc_nation := 3 ;
8367: LD_ADDR_OWVAR 21
8371: PUSH
8372: LD_INT 3
8374: ST_TO_ADDR
// for i = 1 to 2 do
8375: LD_ADDR_VAR 0 1
8379: PUSH
8380: DOUBLE
8381: LD_INT 1
8383: DEC
8384: ST_TO_ADDR
8385: LD_INT 2
8387: PUSH
8388: FOR_TO
8389: IFFALSE 8452
// begin PrepareHuman ( false , 1 , 4 ) ;
8391: LD_INT 0
8393: PPUSH
8394: LD_INT 1
8396: PPUSH
8397: LD_INT 4
8399: PPUSH
8400: CALL_OW 380
// un := CreateHuman ;
8404: LD_ADDR_VAR 0 2
8408: PUSH
8409: CALL_OW 44
8413: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_dep_main ) ;
8414: LD_VAR 0 2
8418: PPUSH
8419: LD_INT 16
8421: PPUSH
8422: CALL_OW 52
// ComExitBuilding ( un ) ;
8426: LD_VAR 0 2
8430: PPUSH
8431: CALL_OW 122
// AddComAgressiveMove ( un , 41 , 76 ) ;
8435: LD_VAR 0 2
8439: PPUSH
8440: LD_INT 41
8442: PPUSH
8443: LD_INT 76
8445: PPUSH
8446: CALL_OW 174
// end ;
8450: GO 8388
8452: POP
8453: POP
// end ; end_of_file
8454: PPOPN 3
8456: END
// export function Action ; begin
8457: LD_INT 0
8459: PPUSH
// CenterNowOnXY ( 28 , 3 ) ;
8460: LD_INT 28
8462: PPUSH
8463: LD_INT 3
8465: PPUSH
8466: CALL_OW 86
// PlaceSeeing ( 41 , 76 , 1 , 10 ) ;
8470: LD_INT 41
8472: PPUSH
8473: LD_INT 76
8475: PPUSH
8476: LD_INT 1
8478: PPUSH
8479: LD_INT 10
8481: PPUSH
8482: CALL_OW 330
// RemoveSeeing ( 41 , 76 , 1 ) ;
8486: LD_INT 41
8488: PPUSH
8489: LD_INT 76
8491: PPUSH
8492: LD_INT 1
8494: PPUSH
8495: CALL_OW 331
// InGameOn ;
8499: CALL_OW 8
// SayRadio ( Harisson , D2-Har-1 ) ;
8503: LD_EXP 19
8507: PPUSH
8508: LD_STRING D2-Har-1
8510: PPUSH
8511: CALL_OW 94
// InGameOff ;
8515: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
8519: LD_STRING M1
8521: PPUSH
8522: CALL_OW 337
// end ;
8526: LD_VAR 0 1
8530: RET
// every 0 0$1 trigger buildings_counter > 1 do var un ;
8531: LD_EXP 4
8535: PUSH
8536: LD_INT 1
8538: GREATER
8539: IFFALSE 8630
8541: GO 8543
8543: DISABLE
8544: LD_INT 0
8546: PPUSH
// begin un := GetRandom ( sex_male ) [ 1 ] ;
8547: LD_ADDR_VAR 0 1
8551: PUSH
8552: LD_INT 1
8554: PPUSH
8555: CALL 600 0 1
8559: PUSH
8560: LD_INT 1
8562: ARRAY
8563: ST_TO_ADDR
// Say ( un , D2a-Sol1-1 ) ;
8564: LD_VAR 0 1
8568: PPUSH
8569: LD_STRING D2a-Sol1-1
8571: PPUSH
8572: CALL_OW 88
// if not un then
8576: LD_VAR 0 1
8580: NOT
8581: IFFALSE 8612
// begin un := GetRandom ( sex_female ) [ 1 ] ;
8583: LD_ADDR_VAR 0 1
8587: PUSH
8588: LD_INT 2
8590: PPUSH
8591: CALL 600 0 1
8595: PUSH
8596: LD_INT 1
8598: ARRAY
8599: ST_TO_ADDR
// Say ( un , D2a-FSol1-1 ) ;
8600: LD_VAR 0 1
8604: PPUSH
8605: LD_STRING D2a-FSol1-1
8607: PPUSH
8608: CALL_OW 88
// end ; if Khatam then
8612: LD_EXP 17
8616: IFFALSE 8630
// Say ( Khatam , D3b-Khat-3 ) ;
8618: LD_EXP 17
8622: PPUSH
8623: LD_STRING D3b-Khat-3
8625: PPUSH
8626: CALL_OW 88
// end ;
8630: PPOPN 1
8632: END
// every 0 0$1 trigger Frank and not Kikuchi and FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , GetX ( Frank ) , GetY ( Frank ) , 7 ] ] ) and not InBattle ( 1 ) and not InBattle ( 4 ) do var i , ape ;
8633: LD_EXP 15
8637: PUSH
8638: LD_EXP 18
8642: NOT
8643: AND
8644: PUSH
8645: LD_INT 22
8647: PUSH
8648: LD_INT 1
8650: PUSH
8651: EMPTY
8652: LIST
8653: LIST
8654: PUSH
8655: LD_INT 92
8657: PUSH
8658: LD_EXP 15
8662: PPUSH
8663: CALL_OW 250
8667: PUSH
8668: LD_EXP 15
8672: PPUSH
8673: CALL_OW 251
8677: PUSH
8678: LD_INT 7
8680: PUSH
8681: EMPTY
8682: LIST
8683: LIST
8684: LIST
8685: LIST
8686: PUSH
8687: EMPTY
8688: LIST
8689: LIST
8690: PPUSH
8691: CALL_OW 69
8695: AND
8696: PUSH
8697: LD_INT 1
8699: PPUSH
8700: CALL_OW 463
8704: NOT
8705: AND
8706: PUSH
8707: LD_INT 4
8709: PPUSH
8710: CALL_OW 463
8714: NOT
8715: AND
8716: IFFALSE 9303
8718: GO 8720
8720: DISABLE
8721: LD_INT 0
8723: PPUSH
8724: PPUSH
// begin InGameOn ;
8725: CALL_OW 8
// ape := FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) ;
8729: LD_ADDR_VAR 0 2
8733: PUSH
8734: LD_INT 22
8736: PUSH
8737: LD_INT 0
8739: PUSH
8740: EMPTY
8741: LIST
8742: LIST
8743: PUSH
8744: LD_INT 25
8746: PUSH
8747: LD_INT 12
8749: PUSH
8750: EMPTY
8751: LIST
8752: LIST
8753: PUSH
8754: EMPTY
8755: LIST
8756: LIST
8757: PPUSH
8758: CALL_OW 69
8762: ST_TO_ADDR
// ape := NearestUnitToUnit ( ape , Frank ) ;
8763: LD_ADDR_VAR 0 2
8767: PUSH
8768: LD_VAR 0 2
8772: PPUSH
8773: LD_EXP 15
8777: PPUSH
8778: CALL_OW 74
8782: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_dist , Frank , 20 ] ] ) do
8783: LD_ADDR_VAR 0 1
8787: PUSH
8788: LD_INT 22
8790: PUSH
8791: LD_INT 1
8793: PUSH
8794: EMPTY
8795: LIST
8796: LIST
8797: PUSH
8798: LD_INT 21
8800: PUSH
8801: LD_INT 1
8803: PUSH
8804: EMPTY
8805: LIST
8806: LIST
8807: PUSH
8808: LD_INT 91
8810: PUSH
8811: LD_EXP 15
8815: PUSH
8816: LD_INT 20
8818: PUSH
8819: EMPTY
8820: LIST
8821: LIST
8822: LIST
8823: PUSH
8824: EMPTY
8825: LIST
8826: LIST
8827: LIST
8828: PPUSH
8829: CALL_OW 69
8833: PUSH
8834: FOR_IN
8835: IFFALSE 8853
// ComTurnUnit ( i , Frank ) ;
8837: LD_VAR 0 1
8841: PPUSH
8842: LD_EXP 15
8846: PPUSH
8847: CALL_OW 119
8851: GO 8834
8853: POP
8854: POP
// SetSide ( Frank , 1 ) ;
8855: LD_EXP 15
8859: PPUSH
8860: LD_INT 1
8862: PPUSH
8863: CALL_OW 235
// ComMoveUnit ( JMM , Frank ) ;
8867: LD_EXP 9
8871: PPUSH
8872: LD_EXP 15
8876: PPUSH
8877: CALL_OW 112
// AddComTurnUnit ( JMM , Frank ) ;
8881: LD_EXP 9
8885: PPUSH
8886: LD_EXP 15
8890: PPUSH
8891: CALL_OW 179
// CenterOnUnits ( Frank ) ;
8895: LD_EXP 15
8899: PPUSH
8900: CALL_OW 85
// Say ( Frank , D3a-Frank-1 ) ;
8904: LD_EXP 15
8908: PPUSH
8909: LD_STRING D3a-Frank-1
8911: PPUSH
8912: CALL_OW 88
// ComMoveXY ( ape , 42 , 78 ) ;
8916: LD_VAR 0 2
8920: PPUSH
8921: LD_INT 42
8923: PPUSH
8924: LD_INT 78
8926: PPUSH
8927: CALL_OW 111
// AddComTurnUnit ( ape , Frank ) ;
8931: LD_VAR 0 2
8935: PPUSH
8936: LD_EXP 15
8940: PPUSH
8941: CALL_OW 179
// if Lisa then
8945: LD_EXP 14
8949: IFFALSE 8963
// Say ( Lisa , D3a-Lisa-1 ) ;
8951: LD_EXP 14
8955: PPUSH
8956: LD_STRING D3a-Lisa-1
8958: PPUSH
8959: CALL_OW 88
// Say ( JMM , D3a-JMM-1 ) ;
8963: LD_EXP 9
8967: PPUSH
8968: LD_STRING D3a-JMM-1
8970: PPUSH
8971: CALL_OW 88
// if Cyrus then
8975: LD_EXP 13
8979: IFFALSE 8993
// Say ( Cyrus , D3a-Cyrus-1 ) ;
8981: LD_EXP 13
8985: PPUSH
8986: LD_STRING D3a-Cyrus-1
8988: PPUSH
8989: CALL_OW 88
// if GetRandom ( sex_male ) then
8993: LD_INT 1
8995: PPUSH
8996: CALL 600 0 1
9000: IFFALSE 9021
// Say ( GetRandom ( sex_male ) [ 1 ] , D3a-Sol1-1 ) ;
9002: LD_INT 1
9004: PPUSH
9005: CALL 600 0 1
9009: PUSH
9010: LD_INT 1
9012: ARRAY
9013: PPUSH
9014: LD_STRING D3a-Sol1-1
9016: PPUSH
9017: CALL_OW 88
// if GetRandom ( sex_female ) then
9021: LD_INT 2
9023: PPUSH
9024: CALL 600 0 1
9028: IFFALSE 9049
// Say ( GetRandom ( sex_female ) [ 1 ] , D3a-FSol1-1 ) ;
9030: LD_INT 2
9032: PPUSH
9033: CALL 600 0 1
9037: PUSH
9038: LD_INT 1
9040: ARRAY
9041: PPUSH
9042: LD_STRING D3a-FSol1-1
9044: PPUSH
9045: CALL_OW 88
// if Gladstone then
9049: LD_EXP 16
9053: IFFALSE 9067
// Say ( Gladstone , D3a-Glad-1 ) ;
9055: LD_EXP 16
9059: PPUSH
9060: LD_STRING D3a-Glad-1
9062: PPUSH
9063: CALL_OW 88
// ComMoveXY ( ape , 60 , 113 ) ;
9067: LD_VAR 0 2
9071: PPUSH
9072: LD_INT 60
9074: PPUSH
9075: LD_INT 113
9077: PPUSH
9078: CALL_OW 111
// Say ( Frank , D3a-Frank-2 ) ;
9082: LD_EXP 15
9086: PPUSH
9087: LD_STRING D3a-Frank-2
9089: PPUSH
9090: CALL_OW 88
// ComTurnUnit ( Frank , JMM ) ;
9094: LD_EXP 15
9098: PPUSH
9099: LD_EXP 9
9103: PPUSH
9104: CALL_OW 119
// Say ( JMM , D3a-JMM-2 ) ;
9108: LD_EXP 9
9112: PPUSH
9113: LD_STRING D3a-JMM-2
9115: PPUSH
9116: CALL_OW 88
// RevealFogArea ( 1 , spotArea ) ;
9120: LD_INT 1
9122: PPUSH
9123: LD_INT 4
9125: PPUSH
9126: CALL_OW 332
// CenterOnXY ( 85 , 134 ) ;
9130: LD_INT 85
9132: PPUSH
9133: LD_INT 134
9135: PPUSH
9136: CALL_OW 84
// Say ( Frank , D3a-Frank-3 ) ;
9140: LD_EXP 15
9144: PPUSH
9145: LD_STRING D3a-Frank-3
9147: PPUSH
9148: CALL_OW 88
// Wait ( 0 0$01 ) ;
9152: LD_INT 35
9154: PPUSH
9155: CALL_OW 67
// CenterOnXY ( 166 , 136 ) ;
9159: LD_INT 166
9161: PPUSH
9162: LD_INT 136
9164: PPUSH
9165: CALL_OW 84
// Say ( JMM , D3a-JMM-3 ) ;
9169: LD_EXP 9
9173: PPUSH
9174: LD_STRING D3a-JMM-3
9176: PPUSH
9177: CALL_OW 88
// Wait ( 0 0$01 ) ;
9181: LD_INT 35
9183: PPUSH
9184: CALL_OW 67
// CenterNowOnUnits ( Frank ) ;
9188: LD_EXP 15
9192: PPUSH
9193: CALL_OW 87
// Say ( Frank , D3a-Frank-4 ) ;
9197: LD_EXP 15
9201: PPUSH
9202: LD_STRING D3a-Frank-4
9204: PPUSH
9205: CALL_OW 88
// if Lisa then
9209: LD_EXP 14
9213: IFFALSE 9227
// Say ( Lisa , D3a-Lisa-4 ) ;
9215: LD_EXP 14
9219: PPUSH
9220: LD_STRING D3a-Lisa-4
9222: PPUSH
9223: CALL_OW 88
// Say ( JMM , D3a-JMM-4 ) ;
9227: LD_EXP 9
9231: PPUSH
9232: LD_STRING D3a-JMM-4
9234: PPUSH
9235: CALL_OW 88
// Say ( Frank , D3a-Frank-5 ) ;
9239: LD_EXP 15
9243: PPUSH
9244: LD_STRING D3a-Frank-5
9246: PPUSH
9247: CALL_OW 88
// Say ( JMM , D3a-JMM-5 ) ;
9251: LD_EXP 9
9255: PPUSH
9256: LD_STRING D3a-JMM-5
9258: PPUSH
9259: CALL_OW 88
// Say ( Frank , D3a-Frank-6 ) ;
9263: LD_EXP 15
9267: PPUSH
9268: LD_STRING D3a-Frank-6
9270: PPUSH
9271: CALL_OW 88
// Say ( JMM , D3a-JMM-6 ) ;
9275: LD_EXP 9
9279: PPUSH
9280: LD_STRING D3a-JMM-6
9282: PPUSH
9283: CALL_OW 88
// Say ( Frank , D3a-Frank-7 ) ;
9287: LD_EXP 15
9291: PPUSH
9292: LD_STRING D3a-Frank-7
9294: PPUSH
9295: CALL_OW 88
// InGameOff ;
9299: CALL_OW 9
// end ;
9303: PPOPN 2
9305: END
// every 0 0$1 trigger Kikuchi and not Frank and FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , GetX ( Kikuchi ) , GetY ( Kikuchi ) , 7 ] ] ) and not InBattle ( 1 ) and not InBattle ( 4 ) do
9306: LD_EXP 18
9310: PUSH
9311: LD_EXP 15
9315: NOT
9316: AND
9317: PUSH
9318: LD_INT 22
9320: PUSH
9321: LD_INT 1
9323: PUSH
9324: EMPTY
9325: LIST
9326: LIST
9327: PUSH
9328: LD_INT 92
9330: PUSH
9331: LD_EXP 18
9335: PPUSH
9336: CALL_OW 250
9340: PUSH
9341: LD_EXP 18
9345: PPUSH
9346: CALL_OW 251
9350: PUSH
9351: LD_INT 7
9353: PUSH
9354: EMPTY
9355: LIST
9356: LIST
9357: LIST
9358: LIST
9359: PUSH
9360: EMPTY
9361: LIST
9362: LIST
9363: PPUSH
9364: CALL_OW 69
9368: AND
9369: PUSH
9370: LD_INT 1
9372: PPUSH
9373: CALL_OW 463
9377: NOT
9378: AND
9379: PUSH
9380: LD_INT 4
9382: PPUSH
9383: CALL_OW 463
9387: NOT
9388: AND
9389: IFFALSE 9569
9391: GO 9393
9393: DISABLE
// begin InGameOn ;
9394: CALL_OW 8
// ComTurnUnit ( JMM , Kikuchi ) ;
9398: LD_EXP 9
9402: PPUSH
9403: LD_EXP 18
9407: PPUSH
9408: CALL_OW 119
// ComTurnUnit ( Kikuchi , JMM ) ;
9412: LD_EXP 18
9416: PPUSH
9417: LD_EXP 9
9421: PPUSH
9422: CALL_OW 119
// CenterOnUnits ( Kikuchi ) ;
9426: LD_EXP 18
9430: PPUSH
9431: CALL_OW 85
// Say ( Kikuchi , D3b-Yam-1 ) ;
9435: LD_EXP 18
9439: PPUSH
9440: LD_STRING D3b-Yam-1
9442: PPUSH
9443: CALL_OW 88
// Say ( JMM , D3b-JMM-1 ) ;
9447: LD_EXP 9
9451: PPUSH
9452: LD_STRING D3b-JMM-1
9454: PPUSH
9455: CALL_OW 88
// RevealFogArea ( 1 , spotArea ) ;
9459: LD_INT 1
9461: PPUSH
9462: LD_INT 4
9464: PPUSH
9465: CALL_OW 332
// CenterOnXY ( 85 , 134 ) ;
9469: LD_INT 85
9471: PPUSH
9472: LD_INT 134
9474: PPUSH
9475: CALL_OW 84
// Say ( Kikuchi , D3b-Yam-2 ) ;
9479: LD_EXP 18
9483: PPUSH
9484: LD_STRING D3b-Yam-2
9486: PPUSH
9487: CALL_OW 88
// Wait ( 0 0$01 ) ;
9491: LD_INT 35
9493: PPUSH
9494: CALL_OW 67
// Say ( JMM , D3b-JMM-2 ) ;
9498: LD_EXP 9
9502: PPUSH
9503: LD_STRING D3b-JMM-2
9505: PPUSH
9506: CALL_OW 88
// CenterOnXY ( 166 , 136 ) ;
9510: LD_INT 166
9512: PPUSH
9513: LD_INT 136
9515: PPUSH
9516: CALL_OW 84
// Say ( Kikuchi , D3b-Yam-3 ) ;
9520: LD_EXP 18
9524: PPUSH
9525: LD_STRING D3b-Yam-3
9527: PPUSH
9528: CALL_OW 88
// CenterNowOnUnits ( JMM ) ;
9532: LD_EXP 9
9536: PPUSH
9537: CALL_OW 87
// Say ( JMM , D3b-JMM-3a ) ;
9541: LD_EXP 9
9545: PPUSH
9546: LD_STRING D3b-JMM-3a
9548: PPUSH
9549: CALL_OW 88
// SetSide ( Kikuchi , 1 ) ;
9553: LD_EXP 18
9557: PPUSH
9558: LD_INT 1
9560: PPUSH
9561: CALL_OW 235
// InGameOff ;
9565: CALL_OW 9
// end ;
9569: END
// every 0 0$1 trigger FilterUnitsInArea ( massDamageArea , [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] ] ) do var un , x , tw , i ;
9570: LD_INT 7
9572: PPUSH
9573: LD_INT 22
9575: PUSH
9576: LD_INT 1
9578: PUSH
9579: EMPTY
9580: LIST
9581: LIST
9582: PUSH
9583: LD_INT 3
9585: PUSH
9586: LD_INT 24
9588: PUSH
9589: LD_INT 1000
9591: PUSH
9592: EMPTY
9593: LIST
9594: LIST
9595: PUSH
9596: EMPTY
9597: LIST
9598: LIST
9599: PUSH
9600: EMPTY
9601: LIST
9602: LIST
9603: PPUSH
9604: CALL_OW 70
9608: IFFALSE 10064
9610: GO 9612
9612: DISABLE
9613: LD_INT 0
9615: PPUSH
9616: PPUSH
9617: PPUSH
9618: PPUSH
// begin repeat wait ( 0 0$1 ) ;
9619: LD_INT 35
9621: PPUSH
9622: CALL_OW 67
// un := FilterUnitsInArea ( massDamageArea , [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
9626: LD_ADDR_VAR 0 1
9630: PUSH
9631: LD_INT 7
9633: PPUSH
9634: LD_INT 22
9636: PUSH
9637: LD_INT 1
9639: PUSH
9640: EMPTY
9641: LIST
9642: LIST
9643: PUSH
9644: LD_INT 3
9646: PUSH
9647: LD_INT 24
9649: PUSH
9650: LD_INT 1000
9652: PUSH
9653: EMPTY
9654: LIST
9655: LIST
9656: PUSH
9657: EMPTY
9658: LIST
9659: LIST
9660: PUSH
9661: EMPTY
9662: LIST
9663: LIST
9664: PPUSH
9665: CALL_OW 70
9669: ST_TO_ADDR
// if not un then
9670: LD_VAR 0 1
9674: NOT
9675: IFFALSE 9679
// continue ;
9677: GO 9619
// tw := NearbyTowerHasEnergy ( un [ 1 ] ) ;
9679: LD_ADDR_VAR 0 3
9683: PUSH
9684: LD_VAR 0 1
9688: PUSH
9689: LD_INT 1
9691: ARRAY
9692: PPUSH
9693: CALL 2028 0 1
9697: ST_TO_ADDR
// until tw ;
9698: LD_VAR 0 3
9702: IFFALSE 9619
// DialogueOn ;
9704: CALL_OW 6
// CenterNowOnUnits ( tw ) ;
9708: LD_VAR 0 3
9712: PPUSH
9713: CALL_OW 87
// if Lisa then
9717: LD_EXP 14
9721: IFFALSE 9749
// begin Say ( Lisa , D5-Lisa-1 ) ;
9723: LD_EXP 14
9727: PPUSH
9728: LD_STRING D5-Lisa-1
9730: PPUSH
9731: CALL_OW 88
// Say ( JMM , D5-JMM-1a ) ;
9735: LD_EXP 9
9739: PPUSH
9740: LD_STRING D5-JMM-1a
9742: PPUSH
9743: CALL_OW 88
// end else
9747: GO 9761
// Say ( JMM , D5-JMM-1 ) ;
9749: LD_EXP 9
9753: PPUSH
9754: LD_STRING D5-JMM-1
9756: PPUSH
9757: CALL_OW 88
// DialogueOff ;
9761: CALL_OW 7
// while ( true ) do
9765: LD_INT 1
9767: IFFALSE 9823
// begin wait ( 0 0$01 ) ;
9769: LD_INT 35
9771: PPUSH
9772: CALL_OW 67
// x := FilterUnitsExceptArea ( northElectro , [ [ f_btype , b_oil_power ] , [ f_see , 1 ] ] ) ;
9776: LD_ADDR_VAR 0 2
9780: PUSH
9781: LD_INT 8
9783: PPUSH
9784: LD_INT 30
9786: PUSH
9787: LD_INT 26
9789: PUSH
9790: EMPTY
9791: LIST
9792: LIST
9793: PUSH
9794: LD_INT 101
9796: PUSH
9797: LD_INT 1
9799: PUSH
9800: EMPTY
9801: LIST
9802: LIST
9803: PUSH
9804: EMPTY
9805: LIST
9806: LIST
9807: PPUSH
9808: CALL_OW 71
9812: ST_TO_ADDR
// if x then
9813: LD_VAR 0 2
9817: IFFALSE 9821
// break ;
9819: GO 9823
// end ;
9821: GO 9765
// CenterOnUnits ( x [ 1 ] ) ;
9823: LD_VAR 0 2
9827: PUSH
9828: LD_INT 1
9830: ARRAY
9831: PPUSH
9832: CALL_OW 85
// if Frank and GetSide ( Frank ) = 1 then
9836: LD_EXP 15
9840: PUSH
9841: LD_EXP 15
9845: PPUSH
9846: CALL_OW 255
9850: PUSH
9851: LD_INT 1
9853: EQUAL
9854: AND
9855: IFFALSE 9871
// Say ( Frank , D5a-Frank-1 ) else
9857: LD_EXP 15
9861: PPUSH
9862: LD_STRING D5a-Frank-1
9864: PPUSH
9865: CALL_OW 88
9869: GO 9925
// if Kikuchi and GetSide ( Kikuchi ) = 1 then
9871: LD_EXP 18
9875: PUSH
9876: LD_EXP 18
9880: PPUSH
9881: CALL_OW 255
9885: PUSH
9886: LD_INT 1
9888: EQUAL
9889: AND
9890: IFFALSE 9906
// Say ( Kikuchi , D5a-Yam-1 ) else
9892: LD_EXP 18
9896: PPUSH
9897: LD_STRING D5a-Yam-1
9899: PPUSH
9900: CALL_OW 88
9904: GO 9925
// Say ( GetRandom ( sex_male ) [ 1 ] , D5a-Sol1-1 ) ;
9906: LD_INT 1
9908: PPUSH
9909: CALL 600 0 1
9913: PUSH
9914: LD_INT 1
9916: ARRAY
9917: PPUSH
9918: LD_STRING D5a-Sol1-1
9920: PPUSH
9921: CALL_OW 88
// Say ( JMM , D5a-JMM-1 ) ;
9925: LD_EXP 9
9929: PPUSH
9930: LD_STRING D5a-JMM-1
9932: PPUSH
9933: CALL_OW 88
// if Cyrus then
9937: LD_EXP 13
9941: IFFALSE 9955
// Say ( Cyrus , D5a-Cyrus-1 ) ;
9943: LD_EXP 13
9947: PPUSH
9948: LD_STRING D5a-Cyrus-1
9950: PPUSH
9951: CALL_OW 88
// x := false ;
9955: LD_ADDR_VAR 0 2
9959: PUSH
9960: LD_INT 0
9962: ST_TO_ADDR
// while ( true ) do
9963: LD_INT 1
9965: IFFALSE 10052
// begin wait ( 0 0$01 ) ;
9967: LD_INT 35
9969: PPUSH
9970: CALL_OW 67
// for i in FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) diff ru_dep_west do
9974: LD_ADDR_VAR 0 4
9978: PUSH
9979: LD_INT 2
9981: PUSH
9982: LD_INT 30
9984: PUSH
9985: LD_INT 0
9987: PUSH
9988: EMPTY
9989: LIST
9990: LIST
9991: PUSH
9992: LD_INT 30
9994: PUSH
9995: LD_INT 1
9997: PUSH
9998: EMPTY
9999: LIST
10000: LIST
10001: PUSH
10002: EMPTY
10003: LIST
10004: LIST
10005: LIST
10006: PPUSH
10007: CALL_OW 69
10011: PUSH
10012: LD_INT 1
10014: DIFF
10015: PUSH
10016: FOR_IN
10017: IFFALSE 10040
// if BaseNeedEnergy ( i ) then
10019: LD_VAR 0 4
10023: PPUSH
10024: CALL 1153 0 1
10028: IFFALSE 10038
// x := true ;
10030: LD_ADDR_VAR 0 2
10034: PUSH
10035: LD_INT 1
10037: ST_TO_ADDR
10038: GO 10016
10040: POP
10041: POP
// if x then
10042: LD_VAR 0 2
10046: IFFALSE 10050
// break ;
10048: GO 10052
// end ;
10050: GO 9963
// Say ( JMM , D5b-JMM-1 ) ;
10052: LD_EXP 9
10056: PPUSH
10057: LD_STRING D5b-JMM-1
10059: PPUSH
10060: CALL_OW 88
// end ;
10064: PPOPN 4
10066: END
// every 0 0$1 trigger time_to_end [ 1 ] < tick do
10067: LD_EXP 5
10071: PUSH
10072: LD_INT 1
10074: ARRAY
10075: PUSH
10076: LD_OWVAR 1
10080: LESS
10081: IFFALSE 10281
10083: GO 10085
10085: DISABLE
// begin if not IsDead ( ru_dep_main ) then
10086: LD_INT 16
10088: PPUSH
10089: CALL_OW 301
10093: NOT
10094: IFFALSE 10117
// begin SayRadio ( Harisson , D3b-Har-3 ) ;
10096: LD_EXP 19
10100: PPUSH
10101: LD_STRING D3b-Har-3
10103: PPUSH
10104: CALL_OW 94
// ChangeMissionObjectives ( M2a ) ;
10108: LD_STRING M2a
10110: PPUSH
10111: CALL_OW 337
// end else
10115: GO 10136
// begin SayRadio ( Harisson , D3b-Har-3a ) ;
10117: LD_EXP 19
10121: PPUSH
10122: LD_STRING D3b-Har-3a
10124: PPUSH
10125: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
10129: LD_STRING M2
10131: PPUSH
10132: CALL_OW 337
// end ; can_end := true ;
10136: LD_ADDR_EXP 6
10140: PUSH
10141: LD_INT 1
10143: ST_TO_ADDR
// SetAreaMapShow ( endArea , 1 ) ;
10144: LD_INT 9
10146: PPUSH
10147: LD_INT 1
10149: PPUSH
10150: CALL_OW 424
// Wait ( 0 0$02 ) ;
10154: LD_INT 70
10156: PPUSH
10157: CALL_OW 67
// if Lisa then
10161: LD_EXP 14
10165: IFFALSE 10179
// Say ( Lisa , D3b-Lisa ) ;
10167: LD_EXP 14
10171: PPUSH
10172: LD_STRING D3b-Lisa
10174: PPUSH
10175: CALL_OW 88
// if Bobby then
10179: LD_EXP 12
10183: IFFALSE 10197
// Say ( Bobby , D3b-Bobby-3 ) ;
10185: LD_EXP 12
10189: PPUSH
10190: LD_STRING D3b-Bobby-3
10192: PPUSH
10193: CALL_OW 88
// if Cyrus then
10197: LD_EXP 13
10201: IFFALSE 10215
// Say ( Cyrus , D3b-Cyrus-3 ) ;
10203: LD_EXP 13
10207: PPUSH
10208: LD_STRING D3b-Cyrus-3
10210: PPUSH
10211: CALL_OW 88
// if Frank and GetSide ( Frank ) = 1 then
10215: LD_EXP 15
10219: PUSH
10220: LD_EXP 15
10224: PPUSH
10225: CALL_OW 255
10229: PUSH
10230: LD_INT 1
10232: EQUAL
10233: AND
10234: IFFALSE 10248
// Say ( Frank , D3b-Frank-3 ) ;
10236: LD_EXP 15
10240: PPUSH
10241: LD_STRING D3b-Frank-3
10243: PPUSH
10244: CALL_OW 88
// if Kikuchi and GetSide ( Kikuchi ) = 1 then
10248: LD_EXP 18
10252: PUSH
10253: LD_EXP 18
10257: PPUSH
10258: CALL_OW 255
10262: PUSH
10263: LD_INT 1
10265: EQUAL
10266: AND
10267: IFFALSE 10281
// Say ( Kikuchi , D3b-Yam-4 ) ;
10269: LD_EXP 18
10273: PPUSH
10274: LD_STRING D3b-Yam-4
10276: PPUSH
10277: CALL_OW 88
// end ;
10281: END
// every 0 0$1 trigger time_to_end [ 2 ] < tick do
10282: LD_EXP 5
10286: PUSH
10287: LD_INT 2
10289: ARRAY
10290: PUSH
10291: LD_OWVAR 1
10295: LESS
10296: IFFALSE 10328
10298: GO 10300
10300: DISABLE
// begin SayRadio ( Harisson , D4-Har-1 ) ;
10301: LD_EXP 19
10305: PPUSH
10306: LD_STRING D4-Har-1
10308: PPUSH
10309: CALL_OW 94
// ChangeMissionObjectives ( M3 ) ;
10313: LD_STRING M3
10315: PPUSH
10316: CALL_OW 337
// must_end := true ;
10320: LD_ADDR_EXP 7
10324: PUSH
10325: LD_INT 1
10327: ST_TO_ADDR
// end ;
10328: END
// every 0 0$01 trigger time_to_end [ 3 ] < tick do
10329: LD_EXP 5
10333: PUSH
10334: LD_INT 3
10336: ARRAY
10337: PUSH
10338: LD_OWVAR 1
10342: LESS
10343: IFFALSE 10374
10345: GO 10347
10347: DISABLE
// begin if not IsDead ( ru_dep_main ) then
10348: LD_INT 16
10350: PPUSH
10351: CALL_OW 301
10355: NOT
10356: IFFALSE 10367
// YouLost ( TimeOut1 ) else
10358: LD_STRING TimeOut1
10360: PPUSH
10361: CALL_OW 104
10365: GO 10374
// YouLost ( TimeOut2 ) ;
10367: LD_STRING TimeOut2
10369: PPUSH
10370: CALL_OW 104
// end ;
10374: END
// every 0 0$1 trigger IsInArea ( JMM , endArea ) and can_end do var wait_on , i , tmp , m1 , m2 , m3 ;
10375: LD_EXP 9
10379: PPUSH
10380: LD_INT 9
10382: PPUSH
10383: CALL_OW 308
10387: PUSH
10388: LD_EXP 6
10392: AND
10393: IFFALSE 11493
10395: GO 10397
10397: DISABLE
10398: LD_INT 0
10400: PPUSH
10401: PPUSH
10402: PPUSH
10403: PPUSH
10404: PPUSH
10405: PPUSH
// begin wait_on := false ;
10406: LD_ADDR_VAR 0 1
10410: PUSH
10411: LD_INT 0
10413: ST_TO_ADDR
// if FilterPeople ( 1 ) + 0 > ( FilterPeopleArea ( 1 , endArea ) ^ FilterDriversArea ( 1 , endArea ) ) + 0 then
10414: LD_INT 1
10416: PPUSH
10417: CALL 1230 0 1
10421: PUSH
10422: LD_INT 0
10424: PLUS
10425: PUSH
10426: LD_INT 1
10428: PPUSH
10429: LD_INT 9
10431: PPUSH
10432: CALL 1321 0 2
10436: PUSH
10437: LD_INT 1
10439: PPUSH
10440: LD_INT 9
10442: PPUSH
10443: CALL 1368 0 2
10447: ADD
10448: PUSH
10449: LD_INT 0
10451: PLUS
10452: GREATER
10453: IFFALSE 10502
// case Query ( Q1 ) of 1 :
10455: LD_STRING Q1
10457: PPUSH
10458: CALL_OW 97
10462: PUSH
10463: LD_INT 1
10465: DOUBLE
10466: EQUAL
10467: IFTRUE 10471
10469: GO 10482
10471: POP
// wait_on := true ; 2 :
10472: LD_ADDR_VAR 0 1
10476: PUSH
10477: LD_INT 1
10479: ST_TO_ADDR
10480: GO 10502
10482: LD_INT 2
10484: DOUBLE
10485: EQUAL
10486: IFTRUE 10490
10488: GO 10501
10490: POP
// wait_on := false ; end ;
10491: LD_ADDR_VAR 0 1
10495: PUSH
10496: LD_INT 0
10498: ST_TO_ADDR
10499: GO 10502
10501: POP
// repeat wait ( 0 0$01 ) ;
10502: LD_INT 35
10504: PPUSH
10505: CALL_OW 67
// until ( not wait_on ) or ( FilterPeople ( 1 ) + 0 ) = ( FilterPeopleArea ( 1 , endArea ) ^ FilterDriversArea ( 1 , endArea ) ) + 0 ;
10509: LD_VAR 0 1
10513: NOT
10514: PUSH
10515: LD_INT 1
10517: PPUSH
10518: CALL 1230 0 1
10522: PUSH
10523: LD_INT 0
10525: PLUS
10526: PUSH
10527: LD_INT 1
10529: PPUSH
10530: LD_INT 9
10532: PPUSH
10533: CALL 1321 0 2
10537: PUSH
10538: LD_INT 1
10540: PPUSH
10541: LD_INT 9
10543: PPUSH
10544: CALL 1368 0 2
10548: ADD
10549: PUSH
10550: LD_INT 0
10552: PLUS
10553: EQUAL
10554: OR
10555: IFFALSE 10502
// DialogueOn ;
10557: CALL_OW 6
// CenterNowOnUnits ( JMM ) ;
10561: LD_EXP 9
10565: PPUSH
10566: CALL_OW 87
// Say ( JMM , D6-JMM-1 ) ;
10570: LD_EXP 9
10574: PPUSH
10575: LD_STRING D6-JMM-1
10577: PPUSH
10578: CALL_OW 88
// SayRadio ( Harisson , D6-Har-1 ) ;
10582: LD_EXP 19
10586: PPUSH
10587: LD_STRING D6-Har-1
10589: PPUSH
10590: CALL_OW 94
// Say ( JMM , D6-JMM-2 ) ;
10594: LD_EXP 9
10598: PPUSH
10599: LD_STRING D6-JMM-2
10601: PPUSH
10602: CALL_OW 88
// SayRadio ( Harisson , D6-Har-2 ) ;
10606: LD_EXP 19
10610: PPUSH
10611: LD_STRING D6-Har-2
10613: PPUSH
10614: CALL_OW 94
// Say ( JMM , D6-JMM-3 ) ;
10618: LD_EXP 9
10622: PPUSH
10623: LD_STRING D6-JMM-3
10625: PPUSH
10626: CALL_OW 88
// SayRadio ( Harisson , D6-Har-3 ) ;
10630: LD_EXP 19
10634: PPUSH
10635: LD_STRING D6-Har-3
10637: PPUSH
10638: CALL_OW 94
// Say ( JMM , D6-JMM-4 ) ;
10642: LD_EXP 9
10646: PPUSH
10647: LD_STRING D6-JMM-4
10649: PPUSH
10650: CALL_OW 88
// SayRadio ( Harisson , D6-Har-4 ) ;
10654: LD_EXP 19
10658: PPUSH
10659: LD_STRING D6-Har-4
10661: PPUSH
10662: CALL_OW 94
// Say ( JMM , D6-JMM-5 ) ;
10666: LD_EXP 9
10670: PPUSH
10671: LD_STRING D6-JMM-5
10673: PPUSH
10674: CALL_OW 88
// DialogueOff ;
10678: CALL_OW 7
// m1 := false ;
10682: LD_ADDR_VAR 0 4
10686: PUSH
10687: LD_INT 0
10689: ST_TO_ADDR
// m2 := false ;
10690: LD_ADDR_VAR 0 5
10694: PUSH
10695: LD_INT 0
10697: ST_TO_ADDR
// m3 := false ;
10698: LD_ADDR_VAR 0 6
10702: PUSH
10703: LD_INT 0
10705: ST_TO_ADDR
// tmp := FilterBuildings ( 3 ) ;
10706: LD_ADDR_VAR 0 3
10710: PUSH
10711: LD_INT 3
10713: PPUSH
10714: CALL 1499 0 1
10718: ST_TO_ADDR
// if tmp >= 35 then
10719: LD_VAR 0 3
10723: PUSH
10724: LD_INT 35
10726: GREATEREQUAL
10727: IFFALSE 10764
// begin AddMedal ( Destroy1 , - 1 ) ;
10729: LD_STRING Destroy1
10731: PPUSH
10732: LD_INT 1
10734: NEG
10735: PPUSH
10736: CALL_OW 101
// AddMedal ( Destroy2 , - 1 ) ;
10740: LD_STRING Destroy2
10742: PPUSH
10743: LD_INT 1
10745: NEG
10746: PPUSH
10747: CALL_OW 101
// AddMedal ( Destroy3 , - 1 ) ;
10751: LD_STRING Destroy3
10753: PPUSH
10754: LD_INT 1
10756: NEG
10757: PPUSH
10758: CALL_OW 101
// end else
10762: GO 10875
// begin AddMedal ( Destroy1 , 1 ) ;
10764: LD_STRING Destroy1
10766: PPUSH
10767: LD_INT 1
10769: PPUSH
10770: CALL_OW 101
// m1 := true ;
10774: LD_ADDR_VAR 0 4
10778: PUSH
10779: LD_INT 1
10781: ST_TO_ADDR
// if tmp >= 25 then
10782: LD_VAR 0 3
10786: PUSH
10787: LD_INT 25
10789: GREATEREQUAL
10790: IFFALSE 10816
// begin AddMedal ( Destroy2 , - 1 ) ;
10792: LD_STRING Destroy2
10794: PPUSH
10795: LD_INT 1
10797: NEG
10798: PPUSH
10799: CALL_OW 101
// AddMedal ( Destroy3 , - 1 ) ;
10803: LD_STRING Destroy3
10805: PPUSH
10806: LD_INT 1
10808: NEG
10809: PPUSH
10810: CALL_OW 101
// end else
10814: GO 10875
// begin AddMedal ( Destroy2 , 1 ) ;
10816: LD_STRING Destroy2
10818: PPUSH
10819: LD_INT 1
10821: PPUSH
10822: CALL_OW 101
// m2 := true ;
10826: LD_ADDR_VAR 0 5
10830: PUSH
10831: LD_INT 1
10833: ST_TO_ADDR
// if tmp >= 15 then
10834: LD_VAR 0 3
10838: PUSH
10839: LD_INT 15
10841: GREATEREQUAL
10842: IFFALSE 10857
// AddMedal ( Destroy3 , - 1 ) else
10844: LD_STRING Destroy3
10846: PPUSH
10847: LD_INT 1
10849: NEG
10850: PPUSH
10851: CALL_OW 101
10855: GO 10875
// begin AddMedal ( Destroy3 , 1 ) ;
10857: LD_STRING Destroy3
10859: PPUSH
10860: LD_INT 1
10862: PPUSH
10863: CALL_OW 101
// m3 := true ;
10867: LD_ADDR_VAR 0 6
10871: PUSH
10872: LD_INT 1
10874: ST_TO_ADDR
// end ; end ; end ; if tick <= 32 32$00 then
10875: LD_OWVAR 1
10879: PUSH
10880: LD_INT 67200
10882: LESSEQUAL
10883: IFFALSE 10892
// SetAchievement ( ACH_ASPEED_7 ) ;
10885: LD_STRING ACH_ASPEED_7
10887: PPUSH
10888: CALL_OW 543
// if m1 and m2 and m3 and Difficulty >= 3 then
10892: LD_VAR 0 4
10896: PUSH
10897: LD_VAR 0 5
10901: AND
10902: PUSH
10903: LD_VAR 0 6
10907: AND
10908: PUSH
10909: LD_OWVAR 67
10913: PUSH
10914: LD_INT 3
10916: GREATEREQUAL
10917: AND
10918: IFFALSE 10930
// SetAchievementEX ( ACH_AMER , 7 ) ;
10920: LD_STRING ACH_AMER
10922: PPUSH
10923: LD_INT 7
10925: PPUSH
10926: CALL_OW 564
// GiveMedals ( MAIN ) ;
10930: LD_STRING MAIN
10932: PPUSH
10933: CALL_OW 102
// tmp := FilterPeopleArea ( 1 , endArea ) union FilterDriversArea ( 1 , endArea ) ;
10937: LD_ADDR_VAR 0 3
10941: PUSH
10942: LD_INT 1
10944: PPUSH
10945: LD_INT 9
10947: PPUSH
10948: CALL 1321 0 2
10952: PUSH
10953: LD_INT 1
10955: PPUSH
10956: LD_INT 9
10958: PPUSH
10959: CALL 1368 0 2
10963: UNION
10964: ST_TO_ADDR
// RewardPeople ( tmp ) ;
10965: LD_VAR 0 3
10969: PPUSH
10970: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
10974: LD_EXP 9
10978: PPUSH
10979: LD_EXP 3
10983: PUSH
10984: LD_STRING JMM
10986: STR
10987: PPUSH
10988: CALL_OW 38
// if Brown in tmp then
10992: LD_EXP 10
10996: PUSH
10997: LD_VAR 0 3
11001: IN
11002: IFFALSE 11022
// SaveCharacters ( Brown , mission_prefix & Brown ) ;
11004: LD_EXP 10
11008: PPUSH
11009: LD_EXP 3
11013: PUSH
11014: LD_STRING Brown
11016: STR
11017: PPUSH
11018: CALL_OW 38
// if Donaldson in tmp then
11022: LD_EXP 11
11026: PUSH
11027: LD_VAR 0 3
11031: IN
11032: IFFALSE 11052
// SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
11034: LD_EXP 11
11038: PPUSH
11039: LD_EXP 3
11043: PUSH
11044: LD_STRING Donaldson
11046: STR
11047: PPUSH
11048: CALL_OW 38
// if Bobby in tmp then
11052: LD_EXP 12
11056: PUSH
11057: LD_VAR 0 3
11061: IN
11062: IFFALSE 11082
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
11064: LD_EXP 12
11068: PPUSH
11069: LD_EXP 3
11073: PUSH
11074: LD_STRING Bobby
11076: STR
11077: PPUSH
11078: CALL_OW 38
// if Cyrus in tmp then
11082: LD_EXP 13
11086: PUSH
11087: LD_VAR 0 3
11091: IN
11092: IFFALSE 11112
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
11094: LD_EXP 13
11098: PPUSH
11099: LD_EXP 3
11103: PUSH
11104: LD_STRING Cyrus
11106: STR
11107: PPUSH
11108: CALL_OW 38
// if Lisa in tmp then
11112: LD_EXP 14
11116: PUSH
11117: LD_VAR 0 3
11121: IN
11122: IFFALSE 11142
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
11124: LD_EXP 14
11128: PPUSH
11129: LD_EXP 3
11133: PUSH
11134: LD_STRING Lisa
11136: STR
11137: PPUSH
11138: CALL_OW 38
// if Frank in tmp then
11142: LD_EXP 15
11146: PUSH
11147: LD_VAR 0 3
11151: IN
11152: IFFALSE 11172
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
11154: LD_EXP 15
11158: PPUSH
11159: LD_EXP 3
11163: PUSH
11164: LD_STRING Frank
11166: STR
11167: PPUSH
11168: CALL_OW 38
// if Gladstone in tmp then
11172: LD_EXP 16
11176: PUSH
11177: LD_VAR 0 3
11181: IN
11182: IFFALSE 11202
// SaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
11184: LD_EXP 16
11188: PPUSH
11189: LD_EXP 3
11193: PUSH
11194: LD_STRING Gladstone
11196: STR
11197: PPUSH
11198: CALL_OW 38
// if Khatam in tmp then
11202: LD_EXP 17
11206: PUSH
11207: LD_VAR 0 3
11211: IN
11212: IFFALSE 11232
// SaveCharacters ( Khatam , mission_prefix & Khatam ) ;
11214: LD_EXP 17
11218: PPUSH
11219: LD_EXP 3
11223: PUSH
11224: LD_STRING Khatam
11226: STR
11227: PPUSH
11228: CALL_OW 38
// if Kikuchi in tmp then
11232: LD_EXP 18
11236: PUSH
11237: LD_VAR 0 3
11241: IN
11242: IFFALSE 11262
// SaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
11244: LD_EXP 18
11248: PPUSH
11249: LD_EXP 3
11253: PUSH
11254: LD_STRING Kikuchi
11256: STR
11257: PPUSH
11258: CALL_OW 38
// SaveCharacters ( tmp diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam ] , mission_prefix & others ) ;
11262: LD_VAR 0 3
11266: PUSH
11267: LD_EXP 9
11271: PUSH
11272: LD_EXP 10
11276: PUSH
11277: LD_EXP 11
11281: PUSH
11282: LD_EXP 12
11286: PUSH
11287: LD_EXP 13
11291: PUSH
11292: LD_EXP 14
11296: PUSH
11297: LD_EXP 15
11301: PUSH
11302: LD_EXP 16
11306: PUSH
11307: LD_EXP 18
11311: PUSH
11312: LD_EXP 17
11316: PUSH
11317: EMPTY
11318: LIST
11319: LIST
11320: LIST
11321: LIST
11322: LIST
11323: LIST
11324: LIST
11325: LIST
11326: LIST
11327: LIST
11328: DIFF
11329: PPUSH
11330: LD_EXP 3
11334: PUSH
11335: LD_STRING others
11337: STR
11338: PPUSH
11339: CALL_OW 38
// SaveVariable ( tick , 07_time ) ;
11343: LD_OWVAR 1
11347: PPUSH
11348: LD_STRING 07_time
11350: PPUSH
11351: CALL_OW 39
// tmp := [ ] ;
11355: LD_ADDR_VAR 0 3
11359: PUSH
11360: EMPTY
11361: ST_TO_ADDR
// for i in FilterUnitsInArea ( endArea , [ [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_vehicle ] ] ] ) do
11362: LD_ADDR_VAR 0 2
11366: PUSH
11367: LD_INT 9
11369: PPUSH
11370: LD_INT 22
11372: PUSH
11373: LD_INT 1
11375: PUSH
11376: EMPTY
11377: LIST
11378: LIST
11379: PUSH
11380: LD_INT 23
11382: PUSH
11383: LD_INT 1
11385: PUSH
11386: EMPTY
11387: LIST
11388: LIST
11389: PUSH
11390: LD_INT 21
11392: PUSH
11393: LD_INT 2
11395: PUSH
11396: EMPTY
11397: LIST
11398: LIST
11399: PUSH
11400: EMPTY
11401: LIST
11402: LIST
11403: LIST
11404: PUSH
11405: EMPTY
11406: LIST
11407: PPUSH
11408: CALL_OW 70
11412: PUSH
11413: FOR_IN
11414: IFFALSE 11475
// tmp := tmp ^ [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ;
11416: LD_ADDR_VAR 0 3
11420: PUSH
11421: LD_VAR 0 3
11425: PUSH
11426: LD_VAR 0 2
11430: PPUSH
11431: CALL_OW 265
11435: PUSH
11436: LD_VAR 0 2
11440: PPUSH
11441: CALL_OW 262
11445: PUSH
11446: LD_VAR 0 2
11450: PPUSH
11451: CALL_OW 263
11455: PUSH
11456: LD_VAR 0 2
11460: PPUSH
11461: CALL_OW 264
11465: PUSH
11466: EMPTY
11467: LIST
11468: LIST
11469: LIST
11470: LIST
11471: ADD
11472: ST_TO_ADDR
11473: GO 11413
11475: POP
11476: POP
// SaveVariable ( tmp , 07_vehicles ) ;
11477: LD_VAR 0 3
11481: PPUSH
11482: LD_STRING 07_vehicles
11484: PPUSH
11485: CALL_OW 39
// YouWin ;
11489: CALL_OW 103
// end ; end_of_file
11493: PPOPN 6
11495: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
11496: LD_VAR 0 1
11500: PPUSH
11501: CALL 26505 0 1
// if un = JMM then
11505: LD_VAR 0 1
11509: PUSH
11510: LD_EXP 9
11514: EQUAL
11515: IFFALSE 11524
// YouLost ( JMM ) ;
11517: LD_STRING JMM
11519: PPUSH
11520: CALL_OW 104
// if GetType ( un ) = unit_building then
11524: LD_VAR 0 1
11528: PPUSH
11529: CALL_OW 247
11533: PUSH
11534: LD_INT 3
11536: EQUAL
11537: IFFALSE 11553
// buildings_counter := buildings_counter + 1 ;
11539: LD_ADDR_EXP 4
11543: PUSH
11544: LD_EXP 4
11548: PUSH
11549: LD_INT 1
11551: PLUS
11552: ST_TO_ADDR
// if un in FilterUnitsInArea ( baseArea , [ f_or , [ f_btype , b_turret ] , [ f_btype , b_bunker ] ] ) then
11553: LD_VAR 0 1
11557: PUSH
11558: LD_INT 6
11560: PPUSH
11561: LD_INT 2
11563: PUSH
11564: LD_INT 30
11566: PUSH
11567: LD_INT 33
11569: PUSH
11570: EMPTY
11571: LIST
11572: LIST
11573: PUSH
11574: LD_INT 30
11576: PUSH
11577: LD_INT 32
11579: PUSH
11580: EMPTY
11581: LIST
11582: LIST
11583: PUSH
11584: EMPTY
11585: LIST
11586: LIST
11587: LIST
11588: PPUSH
11589: CALL_OW 70
11593: IN
11594: IFFALSE 11653
// ru_rebuild_list := ru_rebuild_list ^ [ GetBType ( un ) , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ;
11596: LD_ADDR_EXP 20
11600: PUSH
11601: LD_EXP 20
11605: PUSH
11606: LD_VAR 0 1
11610: PPUSH
11611: CALL_OW 266
11615: PUSH
11616: LD_VAR 0 1
11620: PPUSH
11621: CALL_OW 250
11625: PUSH
11626: LD_VAR 0 1
11630: PPUSH
11631: CALL_OW 251
11635: PUSH
11636: LD_VAR 0 1
11640: PPUSH
11641: CALL_OW 254
11645: PUSH
11646: EMPTY
11647: LIST
11648: LIST
11649: LIST
11650: LIST
11651: ADD
11652: ST_TO_ADDR
// if un = ru_dep_main then
11653: LD_VAR 0 1
11657: PUSH
11658: LD_INT 16
11660: EQUAL
11661: IFFALSE 11670
// ChangeMissionObjectives ( M1a ) ;
11663: LD_STRING M1a
11665: PPUSH
11666: CALL_OW 337
// if GetType ( un ) = unit_human and GetSide ( un ) = 3 then
11670: LD_VAR 0 1
11674: PPUSH
11675: CALL_OW 247
11679: PUSH
11680: LD_INT 1
11682: EQUAL
11683: PUSH
11684: LD_VAR 0 1
11688: PPUSH
11689: CALL_OW 255
11693: PUSH
11694: LD_INT 3
11696: EQUAL
11697: AND
11698: IFFALSE 11714
// kill_counter := kill_counter + 1 ;
11700: LD_ADDR_EXP 8
11704: PUSH
11705: LD_EXP 8
11709: PUSH
11710: LD_INT 1
11712: PLUS
11713: ST_TO_ADDR
// end ;
11714: PPOPN 1
11716: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
11717: LD_VAR 0 1
11721: PPUSH
11722: LD_VAR 0 2
11726: PPUSH
11727: CALL 26627 0 2
// end ;
11731: PPOPN 2
11733: END
// on UnitGoesToRed ( un ) do begin if GetBType ( un ) = b_bunker and GetTag ( un ) = 7 then
11734: LD_VAR 0 1
11738: PPUSH
11739: CALL_OW 266
11743: PUSH
11744: LD_INT 32
11746: EQUAL
11747: PUSH
11748: LD_VAR 0 1
11752: PPUSH
11753: CALL_OW 110
11757: PUSH
11758: LD_INT 7
11760: EQUAL
11761: AND
11762: IFFALSE 11776
// SetTag ( un , 0 ) ;
11764: LD_VAR 0 1
11768: PPUSH
11769: LD_INT 0
11771: PPUSH
11772: CALL_OW 109
// end ;
11776: PPOPN 1
11778: END
// on BuildingStarted ( b , builder ) do var i ;
11779: LD_INT 0
11781: PPUSH
// begin if GetSide ( b ) = 3 then
11782: LD_VAR 0 1
11786: PPUSH
11787: CALL_OW 255
11791: PUSH
11792: LD_INT 3
11794: EQUAL
11795: IFFALSE 11835
// for i = 1 to 4 do
11797: LD_ADDR_VAR 0 3
11801: PUSH
11802: DOUBLE
11803: LD_INT 1
11805: DEC
11806: ST_TO_ADDR
11807: LD_INT 4
11809: PUSH
11810: FOR_TO
11811: IFFALSE 11833
// ru_rebuild_list := Delete ( ru_rebuild_list , 1 ) ;
11813: LD_ADDR_EXP 20
11817: PUSH
11818: LD_EXP 20
11822: PPUSH
11823: LD_INT 1
11825: PPUSH
11826: CALL_OW 3
11830: ST_TO_ADDR
11831: GO 11810
11833: POP
11834: POP
// end ;
11835: PPOPN 3
11837: END
// on BuildingComplete ( b ) do if GetBType ( b ) in [ b_bunker , b_turret ] then
11838: LD_VAR 0 1
11842: PPUSH
11843: CALL_OW 266
11847: PUSH
11848: LD_INT 32
11850: PUSH
11851: LD_INT 33
11853: PUSH
11854: EMPTY
11855: LIST
11856: LIST
11857: IN
11858: IFFALSE 11872
// ComPlaceWeapon ( b , ru_gatling_gun ) ;
11860: LD_VAR 0 1
11864: PPUSH
11865: LD_INT 43
11867: PPUSH
11868: CALL_OW 148
11872: PPOPN 1
11874: END
// on LeaveBuilding ( b , un ) do begin if b in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) then
11875: LD_VAR 0 1
11879: PUSH
11880: LD_INT 22
11882: PUSH
11883: LD_INT 3
11885: PUSH
11886: EMPTY
11887: LIST
11888: LIST
11889: PUSH
11890: LD_INT 2
11892: PUSH
11893: LD_INT 30
11895: PUSH
11896: LD_INT 31
11898: PUSH
11899: EMPTY
11900: LIST
11901: LIST
11902: PUSH
11903: LD_INT 30
11905: PUSH
11906: LD_INT 32
11908: PUSH
11909: EMPTY
11910: LIST
11911: LIST
11912: PUSH
11913: EMPTY
11914: LIST
11915: LIST
11916: LIST
11917: PUSH
11918: EMPTY
11919: LIST
11920: LIST
11921: PPUSH
11922: CALL_OW 69
11926: IN
11927: IFFALSE 11949
// GoToAnotherTower ( un , b , 143 , 143 ) ;
11929: LD_VAR 0 2
11933: PPUSH
11934: LD_VAR 0 1
11938: PPUSH
11939: LD_INT 143
11941: PPUSH
11942: LD_INT 143
11944: PPUSH
11945: CALL 830 0 4
// end ;
11949: PPOPN 2
11951: END
// on EnterBuilding ( b , un ) do begin if b in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) then
11952: LD_VAR 0 1
11956: PUSH
11957: LD_INT 22
11959: PUSH
11960: LD_INT 3
11962: PUSH
11963: EMPTY
11964: LIST
11965: LIST
11966: PUSH
11967: LD_INT 30
11969: PUSH
11970: LD_INT 32
11972: PUSH
11973: EMPTY
11974: LIST
11975: LIST
11976: PUSH
11977: EMPTY
11978: LIST
11979: LIST
11980: PPUSH
11981: CALL_OW 69
11985: IN
11986: IFFALSE 12000
// SetTag ( b , 0 ) ;
11988: LD_VAR 0 1
11992: PPUSH
11993: LD_INT 0
11995: PPUSH
11996: CALL_OW 109
// end ; end_of_file
12000: PPOPN 2
12002: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
12003: LD_INT 0
12005: PPUSH
// ar_miner := 81 ;
12006: LD_ADDR_EXP 28
12010: PUSH
12011: LD_INT 81
12013: ST_TO_ADDR
// ar_crane := 88 ;
12014: LD_ADDR_EXP 27
12018: PUSH
12019: LD_INT 88
12021: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
12022: LD_ADDR_EXP 22
12026: PUSH
12027: LD_INT 89
12029: ST_TO_ADDR
// us_hack := 99 ;
12030: LD_ADDR_EXP 23
12034: PUSH
12035: LD_INT 99
12037: ST_TO_ADDR
// us_artillery := 97 ;
12038: LD_ADDR_EXP 24
12042: PUSH
12043: LD_INT 97
12045: ST_TO_ADDR
// ar_bio_bomb := 91 ;
12046: LD_ADDR_EXP 25
12050: PUSH
12051: LD_INT 91
12053: ST_TO_ADDR
// ar_mortar := 92 ;
12054: LD_ADDR_EXP 26
12058: PUSH
12059: LD_INT 92
12061: ST_TO_ADDR
// ru_radar := 98 ;
12062: LD_ADDR_EXP 21
12066: PUSH
12067: LD_INT 98
12069: ST_TO_ADDR
// tech_Artillery := 80 ;
12070: LD_ADDR_EXP 29
12074: PUSH
12075: LD_INT 80
12077: ST_TO_ADDR
// tech_RadMat := 81 ;
12078: LD_ADDR_EXP 30
12082: PUSH
12083: LD_INT 81
12085: ST_TO_ADDR
// tech_BasicTools := 82 ;
12086: LD_ADDR_EXP 31
12090: PUSH
12091: LD_INT 82
12093: ST_TO_ADDR
// tech_Cargo := 83 ;
12094: LD_ADDR_EXP 32
12098: PUSH
12099: LD_INT 83
12101: ST_TO_ADDR
// tech_Track := 84 ;
12102: LD_ADDR_EXP 33
12106: PUSH
12107: LD_INT 84
12109: ST_TO_ADDR
// tech_Crane := 85 ;
12110: LD_ADDR_EXP 34
12114: PUSH
12115: LD_INT 85
12117: ST_TO_ADDR
// tech_Bulldozer := 86 ;
12118: LD_ADDR_EXP 35
12122: PUSH
12123: LD_INT 86
12125: ST_TO_ADDR
// tech_Hovercraft := 87 ;
12126: LD_ADDR_EXP 36
12130: PUSH
12131: LD_INT 87
12133: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
12134: LD_ADDR_EXP 37
12138: PUSH
12139: LD_INT 88
12141: ST_TO_ADDR
// class_mastodont := 31 ;
12142: LD_ADDR_EXP 38
12146: PUSH
12147: LD_INT 31
12149: ST_TO_ADDR
// class_horse := 21 ;
12150: LD_ADDR_EXP 39
12154: PUSH
12155: LD_INT 21
12157: ST_TO_ADDR
// end ;
12158: LD_VAR 0 1
12162: RET
// every 1 do
12163: GO 12165
12165: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
12166: CALL 12003 0 0
12170: END
// every 0 0$1 do
12171: GO 12173
12173: DISABLE
// begin enable ;
12174: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
12175: LD_STRING updateTimer(
12177: PUSH
12178: LD_OWVAR 1
12182: STR
12183: PUSH
12184: LD_STRING );
12186: STR
12187: PPUSH
12188: CALL_OW 559
// end ;
12192: END
// export function SOS_MapStart ( ) ; begin
12193: LD_INT 0
12195: PPUSH
// if streamModeActive then
12196: LD_EXP 40
12200: IFFALSE 12209
// DefineStreamItems ( true ) ;
12202: LD_INT 1
12204: PPUSH
12205: CALL 13859 0 1
// UpdateFactoryWaypoints ( ) ;
12209: CALL 27443 0 0
// end ;
12213: LD_VAR 0 1
12217: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
12218: LD_INT 0
12220: PPUSH
// if p2 = 100 then
12221: LD_VAR 0 2
12225: PUSH
12226: LD_INT 100
12228: EQUAL
12229: IFFALSE 13232
// begin if not StreamModeActive then
12231: LD_EXP 40
12235: NOT
12236: IFFALSE 12246
// StreamModeActive := true ;
12238: LD_ADDR_EXP 40
12242: PUSH
12243: LD_INT 1
12245: ST_TO_ADDR
// if p3 = 0 then
12246: LD_VAR 0 3
12250: PUSH
12251: LD_INT 0
12253: EQUAL
12254: IFFALSE 12260
// InitStreamMode ;
12256: CALL 13395 0 0
// if p3 = 1 then
12260: LD_VAR 0 3
12264: PUSH
12265: LD_INT 1
12267: EQUAL
12268: IFFALSE 12278
// sRocket := true ;
12270: LD_ADDR_EXP 45
12274: PUSH
12275: LD_INT 1
12277: ST_TO_ADDR
// if p3 = 2 then
12278: LD_VAR 0 3
12282: PUSH
12283: LD_INT 2
12285: EQUAL
12286: IFFALSE 12296
// sSpeed := true ;
12288: LD_ADDR_EXP 44
12292: PUSH
12293: LD_INT 1
12295: ST_TO_ADDR
// if p3 = 3 then
12296: LD_VAR 0 3
12300: PUSH
12301: LD_INT 3
12303: EQUAL
12304: IFFALSE 12314
// sEngine := true ;
12306: LD_ADDR_EXP 46
12310: PUSH
12311: LD_INT 1
12313: ST_TO_ADDR
// if p3 = 4 then
12314: LD_VAR 0 3
12318: PUSH
12319: LD_INT 4
12321: EQUAL
12322: IFFALSE 12332
// sSpec := true ;
12324: LD_ADDR_EXP 43
12328: PUSH
12329: LD_INT 1
12331: ST_TO_ADDR
// if p3 = 5 then
12332: LD_VAR 0 3
12336: PUSH
12337: LD_INT 5
12339: EQUAL
12340: IFFALSE 12350
// sLevel := true ;
12342: LD_ADDR_EXP 47
12346: PUSH
12347: LD_INT 1
12349: ST_TO_ADDR
// if p3 = 6 then
12350: LD_VAR 0 3
12354: PUSH
12355: LD_INT 6
12357: EQUAL
12358: IFFALSE 12368
// sArmoury := true ;
12360: LD_ADDR_EXP 48
12364: PUSH
12365: LD_INT 1
12367: ST_TO_ADDR
// if p3 = 7 then
12368: LD_VAR 0 3
12372: PUSH
12373: LD_INT 7
12375: EQUAL
12376: IFFALSE 12386
// sRadar := true ;
12378: LD_ADDR_EXP 49
12382: PUSH
12383: LD_INT 1
12385: ST_TO_ADDR
// if p3 = 8 then
12386: LD_VAR 0 3
12390: PUSH
12391: LD_INT 8
12393: EQUAL
12394: IFFALSE 12404
// sBunker := true ;
12396: LD_ADDR_EXP 50
12400: PUSH
12401: LD_INT 1
12403: ST_TO_ADDR
// if p3 = 9 then
12404: LD_VAR 0 3
12408: PUSH
12409: LD_INT 9
12411: EQUAL
12412: IFFALSE 12422
// sHack := true ;
12414: LD_ADDR_EXP 51
12418: PUSH
12419: LD_INT 1
12421: ST_TO_ADDR
// if p3 = 10 then
12422: LD_VAR 0 3
12426: PUSH
12427: LD_INT 10
12429: EQUAL
12430: IFFALSE 12440
// sFire := true ;
12432: LD_ADDR_EXP 52
12436: PUSH
12437: LD_INT 1
12439: ST_TO_ADDR
// if p3 = 11 then
12440: LD_VAR 0 3
12444: PUSH
12445: LD_INT 11
12447: EQUAL
12448: IFFALSE 12458
// sRefresh := true ;
12450: LD_ADDR_EXP 53
12454: PUSH
12455: LD_INT 1
12457: ST_TO_ADDR
// if p3 = 12 then
12458: LD_VAR 0 3
12462: PUSH
12463: LD_INT 12
12465: EQUAL
12466: IFFALSE 12476
// sExp := true ;
12468: LD_ADDR_EXP 54
12472: PUSH
12473: LD_INT 1
12475: ST_TO_ADDR
// if p3 = 13 then
12476: LD_VAR 0 3
12480: PUSH
12481: LD_INT 13
12483: EQUAL
12484: IFFALSE 12494
// sDepot := true ;
12486: LD_ADDR_EXP 55
12490: PUSH
12491: LD_INT 1
12493: ST_TO_ADDR
// if p3 = 14 then
12494: LD_VAR 0 3
12498: PUSH
12499: LD_INT 14
12501: EQUAL
12502: IFFALSE 12512
// sFlag := true ;
12504: LD_ADDR_EXP 56
12508: PUSH
12509: LD_INT 1
12511: ST_TO_ADDR
// if p3 = 15 then
12512: LD_VAR 0 3
12516: PUSH
12517: LD_INT 15
12519: EQUAL
12520: IFFALSE 12530
// sKamikadze := true ;
12522: LD_ADDR_EXP 64
12526: PUSH
12527: LD_INT 1
12529: ST_TO_ADDR
// if p3 = 16 then
12530: LD_VAR 0 3
12534: PUSH
12535: LD_INT 16
12537: EQUAL
12538: IFFALSE 12548
// sTroll := true ;
12540: LD_ADDR_EXP 65
12544: PUSH
12545: LD_INT 1
12547: ST_TO_ADDR
// if p3 = 17 then
12548: LD_VAR 0 3
12552: PUSH
12553: LD_INT 17
12555: EQUAL
12556: IFFALSE 12566
// sSlow := true ;
12558: LD_ADDR_EXP 66
12562: PUSH
12563: LD_INT 1
12565: ST_TO_ADDR
// if p3 = 18 then
12566: LD_VAR 0 3
12570: PUSH
12571: LD_INT 18
12573: EQUAL
12574: IFFALSE 12584
// sLack := true ;
12576: LD_ADDR_EXP 67
12580: PUSH
12581: LD_INT 1
12583: ST_TO_ADDR
// if p3 = 19 then
12584: LD_VAR 0 3
12588: PUSH
12589: LD_INT 19
12591: EQUAL
12592: IFFALSE 12602
// sTank := true ;
12594: LD_ADDR_EXP 69
12598: PUSH
12599: LD_INT 1
12601: ST_TO_ADDR
// if p3 = 20 then
12602: LD_VAR 0 3
12606: PUSH
12607: LD_INT 20
12609: EQUAL
12610: IFFALSE 12620
// sRemote := true ;
12612: LD_ADDR_EXP 70
12616: PUSH
12617: LD_INT 1
12619: ST_TO_ADDR
// if p3 = 21 then
12620: LD_VAR 0 3
12624: PUSH
12625: LD_INT 21
12627: EQUAL
12628: IFFALSE 12638
// sPowell := true ;
12630: LD_ADDR_EXP 71
12634: PUSH
12635: LD_INT 1
12637: ST_TO_ADDR
// if p3 = 22 then
12638: LD_VAR 0 3
12642: PUSH
12643: LD_INT 22
12645: EQUAL
12646: IFFALSE 12656
// sTeleport := true ;
12648: LD_ADDR_EXP 74
12652: PUSH
12653: LD_INT 1
12655: ST_TO_ADDR
// if p3 = 23 then
12656: LD_VAR 0 3
12660: PUSH
12661: LD_INT 23
12663: EQUAL
12664: IFFALSE 12674
// sOilTower := true ;
12666: LD_ADDR_EXP 76
12670: PUSH
12671: LD_INT 1
12673: ST_TO_ADDR
// if p3 = 24 then
12674: LD_VAR 0 3
12678: PUSH
12679: LD_INT 24
12681: EQUAL
12682: IFFALSE 12692
// sShovel := true ;
12684: LD_ADDR_EXP 77
12688: PUSH
12689: LD_INT 1
12691: ST_TO_ADDR
// if p3 = 25 then
12692: LD_VAR 0 3
12696: PUSH
12697: LD_INT 25
12699: EQUAL
12700: IFFALSE 12710
// sSheik := true ;
12702: LD_ADDR_EXP 78
12706: PUSH
12707: LD_INT 1
12709: ST_TO_ADDR
// if p3 = 26 then
12710: LD_VAR 0 3
12714: PUSH
12715: LD_INT 26
12717: EQUAL
12718: IFFALSE 12728
// sEarthquake := true ;
12720: LD_ADDR_EXP 80
12724: PUSH
12725: LD_INT 1
12727: ST_TO_ADDR
// if p3 = 27 then
12728: LD_VAR 0 3
12732: PUSH
12733: LD_INT 27
12735: EQUAL
12736: IFFALSE 12746
// sAI := true ;
12738: LD_ADDR_EXP 81
12742: PUSH
12743: LD_INT 1
12745: ST_TO_ADDR
// if p3 = 28 then
12746: LD_VAR 0 3
12750: PUSH
12751: LD_INT 28
12753: EQUAL
12754: IFFALSE 12764
// sCargo := true ;
12756: LD_ADDR_EXP 84
12760: PUSH
12761: LD_INT 1
12763: ST_TO_ADDR
// if p3 = 29 then
12764: LD_VAR 0 3
12768: PUSH
12769: LD_INT 29
12771: EQUAL
12772: IFFALSE 12782
// sDLaser := true ;
12774: LD_ADDR_EXP 85
12778: PUSH
12779: LD_INT 1
12781: ST_TO_ADDR
// if p3 = 30 then
12782: LD_VAR 0 3
12786: PUSH
12787: LD_INT 30
12789: EQUAL
12790: IFFALSE 12800
// sExchange := true ;
12792: LD_ADDR_EXP 86
12796: PUSH
12797: LD_INT 1
12799: ST_TO_ADDR
// if p3 = 31 then
12800: LD_VAR 0 3
12804: PUSH
12805: LD_INT 31
12807: EQUAL
12808: IFFALSE 12818
// sFac := true ;
12810: LD_ADDR_EXP 87
12814: PUSH
12815: LD_INT 1
12817: ST_TO_ADDR
// if p3 = 32 then
12818: LD_VAR 0 3
12822: PUSH
12823: LD_INT 32
12825: EQUAL
12826: IFFALSE 12836
// sPower := true ;
12828: LD_ADDR_EXP 88
12832: PUSH
12833: LD_INT 1
12835: ST_TO_ADDR
// if p3 = 33 then
12836: LD_VAR 0 3
12840: PUSH
12841: LD_INT 33
12843: EQUAL
12844: IFFALSE 12854
// sRandom := true ;
12846: LD_ADDR_EXP 89
12850: PUSH
12851: LD_INT 1
12853: ST_TO_ADDR
// if p3 = 34 then
12854: LD_VAR 0 3
12858: PUSH
12859: LD_INT 34
12861: EQUAL
12862: IFFALSE 12872
// sShield := true ;
12864: LD_ADDR_EXP 90
12868: PUSH
12869: LD_INT 1
12871: ST_TO_ADDR
// if p3 = 35 then
12872: LD_VAR 0 3
12876: PUSH
12877: LD_INT 35
12879: EQUAL
12880: IFFALSE 12890
// sTime := true ;
12882: LD_ADDR_EXP 91
12886: PUSH
12887: LD_INT 1
12889: ST_TO_ADDR
// if p3 = 36 then
12890: LD_VAR 0 3
12894: PUSH
12895: LD_INT 36
12897: EQUAL
12898: IFFALSE 12908
// sTools := true ;
12900: LD_ADDR_EXP 92
12904: PUSH
12905: LD_INT 1
12907: ST_TO_ADDR
// if p3 = 101 then
12908: LD_VAR 0 3
12912: PUSH
12913: LD_INT 101
12915: EQUAL
12916: IFFALSE 12926
// sSold := true ;
12918: LD_ADDR_EXP 57
12922: PUSH
12923: LD_INT 1
12925: ST_TO_ADDR
// if p3 = 102 then
12926: LD_VAR 0 3
12930: PUSH
12931: LD_INT 102
12933: EQUAL
12934: IFFALSE 12944
// sDiff := true ;
12936: LD_ADDR_EXP 58
12940: PUSH
12941: LD_INT 1
12943: ST_TO_ADDR
// if p3 = 103 then
12944: LD_VAR 0 3
12948: PUSH
12949: LD_INT 103
12951: EQUAL
12952: IFFALSE 12962
// sFog := true ;
12954: LD_ADDR_EXP 61
12958: PUSH
12959: LD_INT 1
12961: ST_TO_ADDR
// if p3 = 104 then
12962: LD_VAR 0 3
12966: PUSH
12967: LD_INT 104
12969: EQUAL
12970: IFFALSE 12980
// sReset := true ;
12972: LD_ADDR_EXP 62
12976: PUSH
12977: LD_INT 1
12979: ST_TO_ADDR
// if p3 = 105 then
12980: LD_VAR 0 3
12984: PUSH
12985: LD_INT 105
12987: EQUAL
12988: IFFALSE 12998
// sSun := true ;
12990: LD_ADDR_EXP 63
12994: PUSH
12995: LD_INT 1
12997: ST_TO_ADDR
// if p3 = 106 then
12998: LD_VAR 0 3
13002: PUSH
13003: LD_INT 106
13005: EQUAL
13006: IFFALSE 13016
// sTiger := true ;
13008: LD_ADDR_EXP 59
13012: PUSH
13013: LD_INT 1
13015: ST_TO_ADDR
// if p3 = 107 then
13016: LD_VAR 0 3
13020: PUSH
13021: LD_INT 107
13023: EQUAL
13024: IFFALSE 13034
// sBomb := true ;
13026: LD_ADDR_EXP 60
13030: PUSH
13031: LD_INT 1
13033: ST_TO_ADDR
// if p3 = 108 then
13034: LD_VAR 0 3
13038: PUSH
13039: LD_INT 108
13041: EQUAL
13042: IFFALSE 13052
// sWound := true ;
13044: LD_ADDR_EXP 68
13048: PUSH
13049: LD_INT 1
13051: ST_TO_ADDR
// if p3 = 109 then
13052: LD_VAR 0 3
13056: PUSH
13057: LD_INT 109
13059: EQUAL
13060: IFFALSE 13070
// sBetray := true ;
13062: LD_ADDR_EXP 72
13066: PUSH
13067: LD_INT 1
13069: ST_TO_ADDR
// if p3 = 110 then
13070: LD_VAR 0 3
13074: PUSH
13075: LD_INT 110
13077: EQUAL
13078: IFFALSE 13088
// sContamin := true ;
13080: LD_ADDR_EXP 73
13084: PUSH
13085: LD_INT 1
13087: ST_TO_ADDR
// if p3 = 111 then
13088: LD_VAR 0 3
13092: PUSH
13093: LD_INT 111
13095: EQUAL
13096: IFFALSE 13106
// sOil := true ;
13098: LD_ADDR_EXP 75
13102: PUSH
13103: LD_INT 1
13105: ST_TO_ADDR
// if p3 = 112 then
13106: LD_VAR 0 3
13110: PUSH
13111: LD_INT 112
13113: EQUAL
13114: IFFALSE 13124
// sStu := true ;
13116: LD_ADDR_EXP 79
13120: PUSH
13121: LD_INT 1
13123: ST_TO_ADDR
// if p3 = 113 then
13124: LD_VAR 0 3
13128: PUSH
13129: LD_INT 113
13131: EQUAL
13132: IFFALSE 13142
// sBazooka := true ;
13134: LD_ADDR_EXP 82
13138: PUSH
13139: LD_INT 1
13141: ST_TO_ADDR
// if p3 = 114 then
13142: LD_VAR 0 3
13146: PUSH
13147: LD_INT 114
13149: EQUAL
13150: IFFALSE 13160
// sMortar := true ;
13152: LD_ADDR_EXP 83
13156: PUSH
13157: LD_INT 1
13159: ST_TO_ADDR
// if p3 = 115 then
13160: LD_VAR 0 3
13164: PUSH
13165: LD_INT 115
13167: EQUAL
13168: IFFALSE 13178
// sRanger := true ;
13170: LD_ADDR_EXP 93
13174: PUSH
13175: LD_INT 1
13177: ST_TO_ADDR
// if p3 = 116 then
13178: LD_VAR 0 3
13182: PUSH
13183: LD_INT 116
13185: EQUAL
13186: IFFALSE 13196
// sComputer := true ;
13188: LD_ADDR_EXP 94
13192: PUSH
13193: LD_INT 1
13195: ST_TO_ADDR
// if p3 = 117 then
13196: LD_VAR 0 3
13200: PUSH
13201: LD_INT 117
13203: EQUAL
13204: IFFALSE 13214
// s30 := true ;
13206: LD_ADDR_EXP 95
13210: PUSH
13211: LD_INT 1
13213: ST_TO_ADDR
// if p3 = 118 then
13214: LD_VAR 0 3
13218: PUSH
13219: LD_INT 118
13221: EQUAL
13222: IFFALSE 13232
// s60 := true ;
13224: LD_ADDR_EXP 96
13228: PUSH
13229: LD_INT 1
13231: ST_TO_ADDR
// end ; if p2 = 101 then
13232: LD_VAR 0 2
13236: PUSH
13237: LD_INT 101
13239: EQUAL
13240: IFFALSE 13368
// begin case p3 of 1 :
13242: LD_VAR 0 3
13246: PUSH
13247: LD_INT 1
13249: DOUBLE
13250: EQUAL
13251: IFTRUE 13255
13253: GO 13262
13255: POP
// hHackUnlimitedResources ; 2 :
13256: CALL 25466 0 0
13260: GO 13368
13262: LD_INT 2
13264: DOUBLE
13265: EQUAL
13266: IFTRUE 13270
13268: GO 13277
13270: POP
// hHackSetLevel10 ; 3 :
13271: CALL 25599 0 0
13275: GO 13368
13277: LD_INT 3
13279: DOUBLE
13280: EQUAL
13281: IFTRUE 13285
13283: GO 13292
13285: POP
// hHackSetLevel10YourUnits ; 4 :
13286: CALL 25684 0 0
13290: GO 13368
13292: LD_INT 4
13294: DOUBLE
13295: EQUAL
13296: IFTRUE 13300
13298: GO 13307
13300: POP
// hHackInvincible ; 5 :
13301: CALL 26132 0 0
13305: GO 13368
13307: LD_INT 5
13309: DOUBLE
13310: EQUAL
13311: IFTRUE 13315
13313: GO 13322
13315: POP
// hHackInvisible ; 6 :
13316: CALL 26243 0 0
13320: GO 13368
13322: LD_INT 6
13324: DOUBLE
13325: EQUAL
13326: IFTRUE 13330
13328: GO 13337
13330: POP
// hHackChangeYourSide ; 7 :
13331: CALL 26300 0 0
13335: GO 13368
13337: LD_INT 7
13339: DOUBLE
13340: EQUAL
13341: IFTRUE 13345
13343: GO 13352
13345: POP
// hHackChangeUnitSide ; 8 :
13346: CALL 26342 0 0
13350: GO 13368
13352: LD_INT 8
13354: DOUBLE
13355: EQUAL
13356: IFTRUE 13360
13358: GO 13367
13360: POP
// hHackFog ; end ;
13361: CALL 26443 0 0
13365: GO 13368
13367: POP
// end ; end ;
13368: LD_VAR 0 7
13372: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
13373: GO 13375
13375: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
13376: LD_STRING initStreamRollete();
13378: PPUSH
13379: CALL_OW 559
// InitStreamMode ;
13383: CALL 13395 0 0
// DefineStreamItems ( false ) ;
13387: LD_INT 0
13389: PPUSH
13390: CALL 13859 0 1
// end ;
13394: END
// function InitStreamMode ; begin
13395: LD_INT 0
13397: PPUSH
// streamModeActive := false ;
13398: LD_ADDR_EXP 40
13402: PUSH
13403: LD_INT 0
13405: ST_TO_ADDR
// normalCounter := 36 ;
13406: LD_ADDR_EXP 41
13410: PUSH
13411: LD_INT 36
13413: ST_TO_ADDR
// hardcoreCounter := 18 ;
13414: LD_ADDR_EXP 42
13418: PUSH
13419: LD_INT 18
13421: ST_TO_ADDR
// sRocket := false ;
13422: LD_ADDR_EXP 45
13426: PUSH
13427: LD_INT 0
13429: ST_TO_ADDR
// sSpeed := false ;
13430: LD_ADDR_EXP 44
13434: PUSH
13435: LD_INT 0
13437: ST_TO_ADDR
// sEngine := false ;
13438: LD_ADDR_EXP 46
13442: PUSH
13443: LD_INT 0
13445: ST_TO_ADDR
// sSpec := false ;
13446: LD_ADDR_EXP 43
13450: PUSH
13451: LD_INT 0
13453: ST_TO_ADDR
// sLevel := false ;
13454: LD_ADDR_EXP 47
13458: PUSH
13459: LD_INT 0
13461: ST_TO_ADDR
// sArmoury := false ;
13462: LD_ADDR_EXP 48
13466: PUSH
13467: LD_INT 0
13469: ST_TO_ADDR
// sRadar := false ;
13470: LD_ADDR_EXP 49
13474: PUSH
13475: LD_INT 0
13477: ST_TO_ADDR
// sBunker := false ;
13478: LD_ADDR_EXP 50
13482: PUSH
13483: LD_INT 0
13485: ST_TO_ADDR
// sHack := false ;
13486: LD_ADDR_EXP 51
13490: PUSH
13491: LD_INT 0
13493: ST_TO_ADDR
// sFire := false ;
13494: LD_ADDR_EXP 52
13498: PUSH
13499: LD_INT 0
13501: ST_TO_ADDR
// sRefresh := false ;
13502: LD_ADDR_EXP 53
13506: PUSH
13507: LD_INT 0
13509: ST_TO_ADDR
// sExp := false ;
13510: LD_ADDR_EXP 54
13514: PUSH
13515: LD_INT 0
13517: ST_TO_ADDR
// sDepot := false ;
13518: LD_ADDR_EXP 55
13522: PUSH
13523: LD_INT 0
13525: ST_TO_ADDR
// sFlag := false ;
13526: LD_ADDR_EXP 56
13530: PUSH
13531: LD_INT 0
13533: ST_TO_ADDR
// sKamikadze := false ;
13534: LD_ADDR_EXP 64
13538: PUSH
13539: LD_INT 0
13541: ST_TO_ADDR
// sTroll := false ;
13542: LD_ADDR_EXP 65
13546: PUSH
13547: LD_INT 0
13549: ST_TO_ADDR
// sSlow := false ;
13550: LD_ADDR_EXP 66
13554: PUSH
13555: LD_INT 0
13557: ST_TO_ADDR
// sLack := false ;
13558: LD_ADDR_EXP 67
13562: PUSH
13563: LD_INT 0
13565: ST_TO_ADDR
// sTank := false ;
13566: LD_ADDR_EXP 69
13570: PUSH
13571: LD_INT 0
13573: ST_TO_ADDR
// sRemote := false ;
13574: LD_ADDR_EXP 70
13578: PUSH
13579: LD_INT 0
13581: ST_TO_ADDR
// sPowell := false ;
13582: LD_ADDR_EXP 71
13586: PUSH
13587: LD_INT 0
13589: ST_TO_ADDR
// sTeleport := false ;
13590: LD_ADDR_EXP 74
13594: PUSH
13595: LD_INT 0
13597: ST_TO_ADDR
// sOilTower := false ;
13598: LD_ADDR_EXP 76
13602: PUSH
13603: LD_INT 0
13605: ST_TO_ADDR
// sShovel := false ;
13606: LD_ADDR_EXP 77
13610: PUSH
13611: LD_INT 0
13613: ST_TO_ADDR
// sSheik := false ;
13614: LD_ADDR_EXP 78
13618: PUSH
13619: LD_INT 0
13621: ST_TO_ADDR
// sEarthquake := false ;
13622: LD_ADDR_EXP 80
13626: PUSH
13627: LD_INT 0
13629: ST_TO_ADDR
// sAI := false ;
13630: LD_ADDR_EXP 81
13634: PUSH
13635: LD_INT 0
13637: ST_TO_ADDR
// sCargo := false ;
13638: LD_ADDR_EXP 84
13642: PUSH
13643: LD_INT 0
13645: ST_TO_ADDR
// sDLaser := false ;
13646: LD_ADDR_EXP 85
13650: PUSH
13651: LD_INT 0
13653: ST_TO_ADDR
// sExchange := false ;
13654: LD_ADDR_EXP 86
13658: PUSH
13659: LD_INT 0
13661: ST_TO_ADDR
// sFac := false ;
13662: LD_ADDR_EXP 87
13666: PUSH
13667: LD_INT 0
13669: ST_TO_ADDR
// sPower := false ;
13670: LD_ADDR_EXP 88
13674: PUSH
13675: LD_INT 0
13677: ST_TO_ADDR
// sRandom := false ;
13678: LD_ADDR_EXP 89
13682: PUSH
13683: LD_INT 0
13685: ST_TO_ADDR
// sShield := false ;
13686: LD_ADDR_EXP 90
13690: PUSH
13691: LD_INT 0
13693: ST_TO_ADDR
// sTime := false ;
13694: LD_ADDR_EXP 91
13698: PUSH
13699: LD_INT 0
13701: ST_TO_ADDR
// sTools := false ;
13702: LD_ADDR_EXP 92
13706: PUSH
13707: LD_INT 0
13709: ST_TO_ADDR
// sSold := false ;
13710: LD_ADDR_EXP 57
13714: PUSH
13715: LD_INT 0
13717: ST_TO_ADDR
// sDiff := false ;
13718: LD_ADDR_EXP 58
13722: PUSH
13723: LD_INT 0
13725: ST_TO_ADDR
// sFog := false ;
13726: LD_ADDR_EXP 61
13730: PUSH
13731: LD_INT 0
13733: ST_TO_ADDR
// sReset := false ;
13734: LD_ADDR_EXP 62
13738: PUSH
13739: LD_INT 0
13741: ST_TO_ADDR
// sSun := false ;
13742: LD_ADDR_EXP 63
13746: PUSH
13747: LD_INT 0
13749: ST_TO_ADDR
// sTiger := false ;
13750: LD_ADDR_EXP 59
13754: PUSH
13755: LD_INT 0
13757: ST_TO_ADDR
// sBomb := false ;
13758: LD_ADDR_EXP 60
13762: PUSH
13763: LD_INT 0
13765: ST_TO_ADDR
// sWound := false ;
13766: LD_ADDR_EXP 68
13770: PUSH
13771: LD_INT 0
13773: ST_TO_ADDR
// sBetray := false ;
13774: LD_ADDR_EXP 72
13778: PUSH
13779: LD_INT 0
13781: ST_TO_ADDR
// sContamin := false ;
13782: LD_ADDR_EXP 73
13786: PUSH
13787: LD_INT 0
13789: ST_TO_ADDR
// sOil := false ;
13790: LD_ADDR_EXP 75
13794: PUSH
13795: LD_INT 0
13797: ST_TO_ADDR
// sStu := false ;
13798: LD_ADDR_EXP 79
13802: PUSH
13803: LD_INT 0
13805: ST_TO_ADDR
// sBazooka := false ;
13806: LD_ADDR_EXP 82
13810: PUSH
13811: LD_INT 0
13813: ST_TO_ADDR
// sMortar := false ;
13814: LD_ADDR_EXP 83
13818: PUSH
13819: LD_INT 0
13821: ST_TO_ADDR
// sRanger := false ;
13822: LD_ADDR_EXP 93
13826: PUSH
13827: LD_INT 0
13829: ST_TO_ADDR
// sComputer := false ;
13830: LD_ADDR_EXP 94
13834: PUSH
13835: LD_INT 0
13837: ST_TO_ADDR
// s30 := false ;
13838: LD_ADDR_EXP 95
13842: PUSH
13843: LD_INT 0
13845: ST_TO_ADDR
// s60 := false ;
13846: LD_ADDR_EXP 96
13850: PUSH
13851: LD_INT 0
13853: ST_TO_ADDR
// end ;
13854: LD_VAR 0 1
13858: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
13859: LD_INT 0
13861: PPUSH
13862: PPUSH
13863: PPUSH
13864: PPUSH
13865: PPUSH
13866: PPUSH
13867: PPUSH
// result := [ ] ;
13868: LD_ADDR_VAR 0 2
13872: PUSH
13873: EMPTY
13874: ST_TO_ADDR
// if campaign_id = 1 then
13875: LD_OWVAR 69
13879: PUSH
13880: LD_INT 1
13882: EQUAL
13883: IFFALSE 17049
// begin case mission_number of 1 :
13885: LD_OWVAR 70
13889: PUSH
13890: LD_INT 1
13892: DOUBLE
13893: EQUAL
13894: IFTRUE 13898
13896: GO 13974
13898: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
13899: LD_ADDR_VAR 0 2
13903: PUSH
13904: LD_INT 2
13906: PUSH
13907: LD_INT 4
13909: PUSH
13910: LD_INT 11
13912: PUSH
13913: LD_INT 12
13915: PUSH
13916: LD_INT 15
13918: PUSH
13919: LD_INT 16
13921: PUSH
13922: LD_INT 22
13924: PUSH
13925: LD_INT 23
13927: PUSH
13928: LD_INT 26
13930: PUSH
13931: EMPTY
13932: LIST
13933: LIST
13934: LIST
13935: LIST
13936: LIST
13937: LIST
13938: LIST
13939: LIST
13940: LIST
13941: PUSH
13942: LD_INT 101
13944: PUSH
13945: LD_INT 102
13947: PUSH
13948: LD_INT 106
13950: PUSH
13951: LD_INT 116
13953: PUSH
13954: LD_INT 117
13956: PUSH
13957: LD_INT 118
13959: PUSH
13960: EMPTY
13961: LIST
13962: LIST
13963: LIST
13964: LIST
13965: LIST
13966: LIST
13967: PUSH
13968: EMPTY
13969: LIST
13970: LIST
13971: ST_TO_ADDR
13972: GO 17047
13974: LD_INT 2
13976: DOUBLE
13977: EQUAL
13978: IFTRUE 13982
13980: GO 14066
13982: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
13983: LD_ADDR_VAR 0 2
13987: PUSH
13988: LD_INT 2
13990: PUSH
13991: LD_INT 4
13993: PUSH
13994: LD_INT 11
13996: PUSH
13997: LD_INT 12
13999: PUSH
14000: LD_INT 15
14002: PUSH
14003: LD_INT 16
14005: PUSH
14006: LD_INT 22
14008: PUSH
14009: LD_INT 23
14011: PUSH
14012: LD_INT 26
14014: PUSH
14015: EMPTY
14016: LIST
14017: LIST
14018: LIST
14019: LIST
14020: LIST
14021: LIST
14022: LIST
14023: LIST
14024: LIST
14025: PUSH
14026: LD_INT 101
14028: PUSH
14029: LD_INT 102
14031: PUSH
14032: LD_INT 105
14034: PUSH
14035: LD_INT 106
14037: PUSH
14038: LD_INT 108
14040: PUSH
14041: LD_INT 116
14043: PUSH
14044: LD_INT 117
14046: PUSH
14047: LD_INT 118
14049: PUSH
14050: EMPTY
14051: LIST
14052: LIST
14053: LIST
14054: LIST
14055: LIST
14056: LIST
14057: LIST
14058: LIST
14059: PUSH
14060: EMPTY
14061: LIST
14062: LIST
14063: ST_TO_ADDR
14064: GO 17047
14066: LD_INT 3
14068: DOUBLE
14069: EQUAL
14070: IFTRUE 14074
14072: GO 14162
14074: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
14075: LD_ADDR_VAR 0 2
14079: PUSH
14080: LD_INT 2
14082: PUSH
14083: LD_INT 4
14085: PUSH
14086: LD_INT 5
14088: PUSH
14089: LD_INT 11
14091: PUSH
14092: LD_INT 12
14094: PUSH
14095: LD_INT 15
14097: PUSH
14098: LD_INT 16
14100: PUSH
14101: LD_INT 22
14103: PUSH
14104: LD_INT 26
14106: PUSH
14107: LD_INT 36
14109: PUSH
14110: EMPTY
14111: LIST
14112: LIST
14113: LIST
14114: LIST
14115: LIST
14116: LIST
14117: LIST
14118: LIST
14119: LIST
14120: LIST
14121: PUSH
14122: LD_INT 101
14124: PUSH
14125: LD_INT 102
14127: PUSH
14128: LD_INT 105
14130: PUSH
14131: LD_INT 106
14133: PUSH
14134: LD_INT 108
14136: PUSH
14137: LD_INT 116
14139: PUSH
14140: LD_INT 117
14142: PUSH
14143: LD_INT 118
14145: PUSH
14146: EMPTY
14147: LIST
14148: LIST
14149: LIST
14150: LIST
14151: LIST
14152: LIST
14153: LIST
14154: LIST
14155: PUSH
14156: EMPTY
14157: LIST
14158: LIST
14159: ST_TO_ADDR
14160: GO 17047
14162: LD_INT 4
14164: DOUBLE
14165: EQUAL
14166: IFTRUE 14170
14168: GO 14266
14170: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
14171: LD_ADDR_VAR 0 2
14175: PUSH
14176: LD_INT 2
14178: PUSH
14179: LD_INT 4
14181: PUSH
14182: LD_INT 5
14184: PUSH
14185: LD_INT 8
14187: PUSH
14188: LD_INT 11
14190: PUSH
14191: LD_INT 12
14193: PUSH
14194: LD_INT 15
14196: PUSH
14197: LD_INT 16
14199: PUSH
14200: LD_INT 22
14202: PUSH
14203: LD_INT 23
14205: PUSH
14206: LD_INT 26
14208: PUSH
14209: LD_INT 36
14211: PUSH
14212: EMPTY
14213: LIST
14214: LIST
14215: LIST
14216: LIST
14217: LIST
14218: LIST
14219: LIST
14220: LIST
14221: LIST
14222: LIST
14223: LIST
14224: LIST
14225: PUSH
14226: LD_INT 101
14228: PUSH
14229: LD_INT 102
14231: PUSH
14232: LD_INT 105
14234: PUSH
14235: LD_INT 106
14237: PUSH
14238: LD_INT 108
14240: PUSH
14241: LD_INT 116
14243: PUSH
14244: LD_INT 117
14246: PUSH
14247: LD_INT 118
14249: PUSH
14250: EMPTY
14251: LIST
14252: LIST
14253: LIST
14254: LIST
14255: LIST
14256: LIST
14257: LIST
14258: LIST
14259: PUSH
14260: EMPTY
14261: LIST
14262: LIST
14263: ST_TO_ADDR
14264: GO 17047
14266: LD_INT 5
14268: DOUBLE
14269: EQUAL
14270: IFTRUE 14274
14272: GO 14386
14274: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
14275: LD_ADDR_VAR 0 2
14279: PUSH
14280: LD_INT 2
14282: PUSH
14283: LD_INT 4
14285: PUSH
14286: LD_INT 5
14288: PUSH
14289: LD_INT 6
14291: PUSH
14292: LD_INT 8
14294: PUSH
14295: LD_INT 11
14297: PUSH
14298: LD_INT 12
14300: PUSH
14301: LD_INT 15
14303: PUSH
14304: LD_INT 16
14306: PUSH
14307: LD_INT 22
14309: PUSH
14310: LD_INT 23
14312: PUSH
14313: LD_INT 25
14315: PUSH
14316: LD_INT 26
14318: PUSH
14319: LD_INT 36
14321: PUSH
14322: EMPTY
14323: LIST
14324: LIST
14325: LIST
14326: LIST
14327: LIST
14328: LIST
14329: LIST
14330: LIST
14331: LIST
14332: LIST
14333: LIST
14334: LIST
14335: LIST
14336: LIST
14337: PUSH
14338: LD_INT 101
14340: PUSH
14341: LD_INT 102
14343: PUSH
14344: LD_INT 105
14346: PUSH
14347: LD_INT 106
14349: PUSH
14350: LD_INT 108
14352: PUSH
14353: LD_INT 109
14355: PUSH
14356: LD_INT 112
14358: PUSH
14359: LD_INT 116
14361: PUSH
14362: LD_INT 117
14364: PUSH
14365: LD_INT 118
14367: PUSH
14368: EMPTY
14369: LIST
14370: LIST
14371: LIST
14372: LIST
14373: LIST
14374: LIST
14375: LIST
14376: LIST
14377: LIST
14378: LIST
14379: PUSH
14380: EMPTY
14381: LIST
14382: LIST
14383: ST_TO_ADDR
14384: GO 17047
14386: LD_INT 6
14388: DOUBLE
14389: EQUAL
14390: IFTRUE 14394
14392: GO 14526
14394: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
14395: LD_ADDR_VAR 0 2
14399: PUSH
14400: LD_INT 2
14402: PUSH
14403: LD_INT 4
14405: PUSH
14406: LD_INT 5
14408: PUSH
14409: LD_INT 6
14411: PUSH
14412: LD_INT 8
14414: PUSH
14415: LD_INT 11
14417: PUSH
14418: LD_INT 12
14420: PUSH
14421: LD_INT 15
14423: PUSH
14424: LD_INT 16
14426: PUSH
14427: LD_INT 20
14429: PUSH
14430: LD_INT 21
14432: PUSH
14433: LD_INT 22
14435: PUSH
14436: LD_INT 23
14438: PUSH
14439: LD_INT 25
14441: PUSH
14442: LD_INT 26
14444: PUSH
14445: LD_INT 30
14447: PUSH
14448: LD_INT 31
14450: PUSH
14451: LD_INT 32
14453: PUSH
14454: LD_INT 36
14456: PUSH
14457: EMPTY
14458: LIST
14459: LIST
14460: LIST
14461: LIST
14462: LIST
14463: LIST
14464: LIST
14465: LIST
14466: LIST
14467: LIST
14468: LIST
14469: LIST
14470: LIST
14471: LIST
14472: LIST
14473: LIST
14474: LIST
14475: LIST
14476: LIST
14477: PUSH
14478: LD_INT 101
14480: PUSH
14481: LD_INT 102
14483: PUSH
14484: LD_INT 105
14486: PUSH
14487: LD_INT 106
14489: PUSH
14490: LD_INT 108
14492: PUSH
14493: LD_INT 109
14495: PUSH
14496: LD_INT 112
14498: PUSH
14499: LD_INT 116
14501: PUSH
14502: LD_INT 117
14504: PUSH
14505: LD_INT 118
14507: PUSH
14508: EMPTY
14509: LIST
14510: LIST
14511: LIST
14512: LIST
14513: LIST
14514: LIST
14515: LIST
14516: LIST
14517: LIST
14518: LIST
14519: PUSH
14520: EMPTY
14521: LIST
14522: LIST
14523: ST_TO_ADDR
14524: GO 17047
14526: LD_INT 7
14528: DOUBLE
14529: EQUAL
14530: IFTRUE 14534
14532: GO 14646
14534: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
14535: LD_ADDR_VAR 0 2
14539: PUSH
14540: LD_INT 2
14542: PUSH
14543: LD_INT 4
14545: PUSH
14546: LD_INT 5
14548: PUSH
14549: LD_INT 7
14551: PUSH
14552: LD_INT 11
14554: PUSH
14555: LD_INT 12
14557: PUSH
14558: LD_INT 15
14560: PUSH
14561: LD_INT 16
14563: PUSH
14564: LD_INT 20
14566: PUSH
14567: LD_INT 21
14569: PUSH
14570: LD_INT 22
14572: PUSH
14573: LD_INT 23
14575: PUSH
14576: LD_INT 25
14578: PUSH
14579: LD_INT 26
14581: PUSH
14582: EMPTY
14583: LIST
14584: LIST
14585: LIST
14586: LIST
14587: LIST
14588: LIST
14589: LIST
14590: LIST
14591: LIST
14592: LIST
14593: LIST
14594: LIST
14595: LIST
14596: LIST
14597: PUSH
14598: LD_INT 101
14600: PUSH
14601: LD_INT 102
14603: PUSH
14604: LD_INT 103
14606: PUSH
14607: LD_INT 105
14609: PUSH
14610: LD_INT 106
14612: PUSH
14613: LD_INT 108
14615: PUSH
14616: LD_INT 112
14618: PUSH
14619: LD_INT 116
14621: PUSH
14622: LD_INT 117
14624: PUSH
14625: LD_INT 118
14627: PUSH
14628: EMPTY
14629: LIST
14630: LIST
14631: LIST
14632: LIST
14633: LIST
14634: LIST
14635: LIST
14636: LIST
14637: LIST
14638: LIST
14639: PUSH
14640: EMPTY
14641: LIST
14642: LIST
14643: ST_TO_ADDR
14644: GO 17047
14646: LD_INT 8
14648: DOUBLE
14649: EQUAL
14650: IFTRUE 14654
14652: GO 14794
14654: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
14655: LD_ADDR_VAR 0 2
14659: PUSH
14660: LD_INT 2
14662: PUSH
14663: LD_INT 4
14665: PUSH
14666: LD_INT 5
14668: PUSH
14669: LD_INT 6
14671: PUSH
14672: LD_INT 7
14674: PUSH
14675: LD_INT 8
14677: PUSH
14678: LD_INT 11
14680: PUSH
14681: LD_INT 12
14683: PUSH
14684: LD_INT 15
14686: PUSH
14687: LD_INT 16
14689: PUSH
14690: LD_INT 20
14692: PUSH
14693: LD_INT 21
14695: PUSH
14696: LD_INT 22
14698: PUSH
14699: LD_INT 23
14701: PUSH
14702: LD_INT 25
14704: PUSH
14705: LD_INT 26
14707: PUSH
14708: LD_INT 30
14710: PUSH
14711: LD_INT 31
14713: PUSH
14714: LD_INT 32
14716: PUSH
14717: LD_INT 36
14719: PUSH
14720: EMPTY
14721: LIST
14722: LIST
14723: LIST
14724: LIST
14725: LIST
14726: LIST
14727: LIST
14728: LIST
14729: LIST
14730: LIST
14731: LIST
14732: LIST
14733: LIST
14734: LIST
14735: LIST
14736: LIST
14737: LIST
14738: LIST
14739: LIST
14740: LIST
14741: PUSH
14742: LD_INT 101
14744: PUSH
14745: LD_INT 102
14747: PUSH
14748: LD_INT 103
14750: PUSH
14751: LD_INT 105
14753: PUSH
14754: LD_INT 106
14756: PUSH
14757: LD_INT 108
14759: PUSH
14760: LD_INT 109
14762: PUSH
14763: LD_INT 112
14765: PUSH
14766: LD_INT 116
14768: PUSH
14769: LD_INT 117
14771: PUSH
14772: LD_INT 118
14774: PUSH
14775: EMPTY
14776: LIST
14777: LIST
14778: LIST
14779: LIST
14780: LIST
14781: LIST
14782: LIST
14783: LIST
14784: LIST
14785: LIST
14786: LIST
14787: PUSH
14788: EMPTY
14789: LIST
14790: LIST
14791: ST_TO_ADDR
14792: GO 17047
14794: LD_INT 9
14796: DOUBLE
14797: EQUAL
14798: IFTRUE 14802
14800: GO 14950
14802: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
14803: LD_ADDR_VAR 0 2
14807: PUSH
14808: LD_INT 2
14810: PUSH
14811: LD_INT 4
14813: PUSH
14814: LD_INT 5
14816: PUSH
14817: LD_INT 6
14819: PUSH
14820: LD_INT 7
14822: PUSH
14823: LD_INT 8
14825: PUSH
14826: LD_INT 11
14828: PUSH
14829: LD_INT 12
14831: PUSH
14832: LD_INT 15
14834: PUSH
14835: LD_INT 16
14837: PUSH
14838: LD_INT 20
14840: PUSH
14841: LD_INT 21
14843: PUSH
14844: LD_INT 22
14846: PUSH
14847: LD_INT 23
14849: PUSH
14850: LD_INT 25
14852: PUSH
14853: LD_INT 26
14855: PUSH
14856: LD_INT 28
14858: PUSH
14859: LD_INT 30
14861: PUSH
14862: LD_INT 31
14864: PUSH
14865: LD_INT 32
14867: PUSH
14868: LD_INT 36
14870: PUSH
14871: EMPTY
14872: LIST
14873: LIST
14874: LIST
14875: LIST
14876: LIST
14877: LIST
14878: LIST
14879: LIST
14880: LIST
14881: LIST
14882: LIST
14883: LIST
14884: LIST
14885: LIST
14886: LIST
14887: LIST
14888: LIST
14889: LIST
14890: LIST
14891: LIST
14892: LIST
14893: PUSH
14894: LD_INT 101
14896: PUSH
14897: LD_INT 102
14899: PUSH
14900: LD_INT 103
14902: PUSH
14903: LD_INT 105
14905: PUSH
14906: LD_INT 106
14908: PUSH
14909: LD_INT 108
14911: PUSH
14912: LD_INT 109
14914: PUSH
14915: LD_INT 112
14917: PUSH
14918: LD_INT 114
14920: PUSH
14921: LD_INT 116
14923: PUSH
14924: LD_INT 117
14926: PUSH
14927: LD_INT 118
14929: PUSH
14930: EMPTY
14931: LIST
14932: LIST
14933: LIST
14934: LIST
14935: LIST
14936: LIST
14937: LIST
14938: LIST
14939: LIST
14940: LIST
14941: LIST
14942: LIST
14943: PUSH
14944: EMPTY
14945: LIST
14946: LIST
14947: ST_TO_ADDR
14948: GO 17047
14950: LD_INT 10
14952: DOUBLE
14953: EQUAL
14954: IFTRUE 14958
14956: GO 15154
14958: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
14959: LD_ADDR_VAR 0 2
14963: PUSH
14964: LD_INT 2
14966: PUSH
14967: LD_INT 4
14969: PUSH
14970: LD_INT 5
14972: PUSH
14973: LD_INT 6
14975: PUSH
14976: LD_INT 7
14978: PUSH
14979: LD_INT 8
14981: PUSH
14982: LD_INT 9
14984: PUSH
14985: LD_INT 10
14987: PUSH
14988: LD_INT 11
14990: PUSH
14991: LD_INT 12
14993: PUSH
14994: LD_INT 13
14996: PUSH
14997: LD_INT 14
14999: PUSH
15000: LD_INT 15
15002: PUSH
15003: LD_INT 16
15005: PUSH
15006: LD_INT 17
15008: PUSH
15009: LD_INT 18
15011: PUSH
15012: LD_INT 19
15014: PUSH
15015: LD_INT 20
15017: PUSH
15018: LD_INT 21
15020: PUSH
15021: LD_INT 22
15023: PUSH
15024: LD_INT 23
15026: PUSH
15027: LD_INT 24
15029: PUSH
15030: LD_INT 25
15032: PUSH
15033: LD_INT 26
15035: PUSH
15036: LD_INT 28
15038: PUSH
15039: LD_INT 30
15041: PUSH
15042: LD_INT 31
15044: PUSH
15045: LD_INT 32
15047: PUSH
15048: LD_INT 36
15050: PUSH
15051: EMPTY
15052: LIST
15053: LIST
15054: LIST
15055: LIST
15056: LIST
15057: LIST
15058: LIST
15059: LIST
15060: LIST
15061: LIST
15062: LIST
15063: LIST
15064: LIST
15065: LIST
15066: LIST
15067: LIST
15068: LIST
15069: LIST
15070: LIST
15071: LIST
15072: LIST
15073: LIST
15074: LIST
15075: LIST
15076: LIST
15077: LIST
15078: LIST
15079: LIST
15080: LIST
15081: PUSH
15082: LD_INT 101
15084: PUSH
15085: LD_INT 102
15087: PUSH
15088: LD_INT 103
15090: PUSH
15091: LD_INT 104
15093: PUSH
15094: LD_INT 105
15096: PUSH
15097: LD_INT 106
15099: PUSH
15100: LD_INT 107
15102: PUSH
15103: LD_INT 108
15105: PUSH
15106: LD_INT 109
15108: PUSH
15109: LD_INT 110
15111: PUSH
15112: LD_INT 111
15114: PUSH
15115: LD_INT 112
15117: PUSH
15118: LD_INT 114
15120: PUSH
15121: LD_INT 116
15123: PUSH
15124: LD_INT 117
15126: PUSH
15127: LD_INT 118
15129: PUSH
15130: EMPTY
15131: LIST
15132: LIST
15133: LIST
15134: LIST
15135: LIST
15136: LIST
15137: LIST
15138: LIST
15139: LIST
15140: LIST
15141: LIST
15142: LIST
15143: LIST
15144: LIST
15145: LIST
15146: LIST
15147: PUSH
15148: EMPTY
15149: LIST
15150: LIST
15151: ST_TO_ADDR
15152: GO 17047
15154: LD_INT 11
15156: DOUBLE
15157: EQUAL
15158: IFTRUE 15162
15160: GO 15366
15162: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
15163: LD_ADDR_VAR 0 2
15167: PUSH
15168: LD_INT 2
15170: PUSH
15171: LD_INT 3
15173: PUSH
15174: LD_INT 4
15176: PUSH
15177: LD_INT 5
15179: PUSH
15180: LD_INT 6
15182: PUSH
15183: LD_INT 7
15185: PUSH
15186: LD_INT 8
15188: PUSH
15189: LD_INT 9
15191: PUSH
15192: LD_INT 10
15194: PUSH
15195: LD_INT 11
15197: PUSH
15198: LD_INT 12
15200: PUSH
15201: LD_INT 13
15203: PUSH
15204: LD_INT 14
15206: PUSH
15207: LD_INT 15
15209: PUSH
15210: LD_INT 16
15212: PUSH
15213: LD_INT 17
15215: PUSH
15216: LD_INT 18
15218: PUSH
15219: LD_INT 19
15221: PUSH
15222: LD_INT 20
15224: PUSH
15225: LD_INT 21
15227: PUSH
15228: LD_INT 22
15230: PUSH
15231: LD_INT 23
15233: PUSH
15234: LD_INT 24
15236: PUSH
15237: LD_INT 25
15239: PUSH
15240: LD_INT 26
15242: PUSH
15243: LD_INT 28
15245: PUSH
15246: LD_INT 30
15248: PUSH
15249: LD_INT 31
15251: PUSH
15252: LD_INT 32
15254: PUSH
15255: LD_INT 34
15257: PUSH
15258: LD_INT 36
15260: PUSH
15261: EMPTY
15262: LIST
15263: LIST
15264: LIST
15265: LIST
15266: LIST
15267: LIST
15268: LIST
15269: LIST
15270: LIST
15271: LIST
15272: LIST
15273: LIST
15274: LIST
15275: LIST
15276: LIST
15277: LIST
15278: LIST
15279: LIST
15280: LIST
15281: LIST
15282: LIST
15283: LIST
15284: LIST
15285: LIST
15286: LIST
15287: LIST
15288: LIST
15289: LIST
15290: LIST
15291: LIST
15292: LIST
15293: PUSH
15294: LD_INT 101
15296: PUSH
15297: LD_INT 102
15299: PUSH
15300: LD_INT 103
15302: PUSH
15303: LD_INT 104
15305: PUSH
15306: LD_INT 105
15308: PUSH
15309: LD_INT 106
15311: PUSH
15312: LD_INT 107
15314: PUSH
15315: LD_INT 108
15317: PUSH
15318: LD_INT 109
15320: PUSH
15321: LD_INT 110
15323: PUSH
15324: LD_INT 111
15326: PUSH
15327: LD_INT 112
15329: PUSH
15330: LD_INT 114
15332: PUSH
15333: LD_INT 116
15335: PUSH
15336: LD_INT 117
15338: PUSH
15339: LD_INT 118
15341: PUSH
15342: EMPTY
15343: LIST
15344: LIST
15345: LIST
15346: LIST
15347: LIST
15348: LIST
15349: LIST
15350: LIST
15351: LIST
15352: LIST
15353: LIST
15354: LIST
15355: LIST
15356: LIST
15357: LIST
15358: LIST
15359: PUSH
15360: EMPTY
15361: LIST
15362: LIST
15363: ST_TO_ADDR
15364: GO 17047
15366: LD_INT 12
15368: DOUBLE
15369: EQUAL
15370: IFTRUE 15374
15372: GO 15594
15374: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
15375: LD_ADDR_VAR 0 2
15379: PUSH
15380: LD_INT 1
15382: PUSH
15383: LD_INT 2
15385: PUSH
15386: LD_INT 3
15388: PUSH
15389: LD_INT 4
15391: PUSH
15392: LD_INT 5
15394: PUSH
15395: LD_INT 6
15397: PUSH
15398: LD_INT 7
15400: PUSH
15401: LD_INT 8
15403: PUSH
15404: LD_INT 9
15406: PUSH
15407: LD_INT 10
15409: PUSH
15410: LD_INT 11
15412: PUSH
15413: LD_INT 12
15415: PUSH
15416: LD_INT 13
15418: PUSH
15419: LD_INT 14
15421: PUSH
15422: LD_INT 15
15424: PUSH
15425: LD_INT 16
15427: PUSH
15428: LD_INT 17
15430: PUSH
15431: LD_INT 18
15433: PUSH
15434: LD_INT 19
15436: PUSH
15437: LD_INT 20
15439: PUSH
15440: LD_INT 21
15442: PUSH
15443: LD_INT 22
15445: PUSH
15446: LD_INT 23
15448: PUSH
15449: LD_INT 24
15451: PUSH
15452: LD_INT 25
15454: PUSH
15455: LD_INT 26
15457: PUSH
15458: LD_INT 27
15460: PUSH
15461: LD_INT 28
15463: PUSH
15464: LD_INT 30
15466: PUSH
15467: LD_INT 31
15469: PUSH
15470: LD_INT 32
15472: PUSH
15473: LD_INT 33
15475: PUSH
15476: LD_INT 34
15478: PUSH
15479: LD_INT 36
15481: PUSH
15482: EMPTY
15483: LIST
15484: LIST
15485: LIST
15486: LIST
15487: LIST
15488: LIST
15489: LIST
15490: LIST
15491: LIST
15492: LIST
15493: LIST
15494: LIST
15495: LIST
15496: LIST
15497: LIST
15498: LIST
15499: LIST
15500: LIST
15501: LIST
15502: LIST
15503: LIST
15504: LIST
15505: LIST
15506: LIST
15507: LIST
15508: LIST
15509: LIST
15510: LIST
15511: LIST
15512: LIST
15513: LIST
15514: LIST
15515: LIST
15516: LIST
15517: PUSH
15518: LD_INT 101
15520: PUSH
15521: LD_INT 102
15523: PUSH
15524: LD_INT 103
15526: PUSH
15527: LD_INT 104
15529: PUSH
15530: LD_INT 105
15532: PUSH
15533: LD_INT 106
15535: PUSH
15536: LD_INT 107
15538: PUSH
15539: LD_INT 108
15541: PUSH
15542: LD_INT 109
15544: PUSH
15545: LD_INT 110
15547: PUSH
15548: LD_INT 111
15550: PUSH
15551: LD_INT 112
15553: PUSH
15554: LD_INT 113
15556: PUSH
15557: LD_INT 114
15559: PUSH
15560: LD_INT 116
15562: PUSH
15563: LD_INT 117
15565: PUSH
15566: LD_INT 118
15568: PUSH
15569: EMPTY
15570: LIST
15571: LIST
15572: LIST
15573: LIST
15574: LIST
15575: LIST
15576: LIST
15577: LIST
15578: LIST
15579: LIST
15580: LIST
15581: LIST
15582: LIST
15583: LIST
15584: LIST
15585: LIST
15586: LIST
15587: PUSH
15588: EMPTY
15589: LIST
15590: LIST
15591: ST_TO_ADDR
15592: GO 17047
15594: LD_INT 13
15596: DOUBLE
15597: EQUAL
15598: IFTRUE 15602
15600: GO 15810
15602: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
15603: LD_ADDR_VAR 0 2
15607: PUSH
15608: LD_INT 1
15610: PUSH
15611: LD_INT 2
15613: PUSH
15614: LD_INT 3
15616: PUSH
15617: LD_INT 4
15619: PUSH
15620: LD_INT 5
15622: PUSH
15623: LD_INT 8
15625: PUSH
15626: LD_INT 9
15628: PUSH
15629: LD_INT 10
15631: PUSH
15632: LD_INT 11
15634: PUSH
15635: LD_INT 12
15637: PUSH
15638: LD_INT 14
15640: PUSH
15641: LD_INT 15
15643: PUSH
15644: LD_INT 16
15646: PUSH
15647: LD_INT 17
15649: PUSH
15650: LD_INT 18
15652: PUSH
15653: LD_INT 19
15655: PUSH
15656: LD_INT 20
15658: PUSH
15659: LD_INT 21
15661: PUSH
15662: LD_INT 22
15664: PUSH
15665: LD_INT 23
15667: PUSH
15668: LD_INT 24
15670: PUSH
15671: LD_INT 25
15673: PUSH
15674: LD_INT 26
15676: PUSH
15677: LD_INT 27
15679: PUSH
15680: LD_INT 28
15682: PUSH
15683: LD_INT 30
15685: PUSH
15686: LD_INT 31
15688: PUSH
15689: LD_INT 32
15691: PUSH
15692: LD_INT 33
15694: PUSH
15695: LD_INT 34
15697: PUSH
15698: LD_INT 36
15700: PUSH
15701: EMPTY
15702: LIST
15703: LIST
15704: LIST
15705: LIST
15706: LIST
15707: LIST
15708: LIST
15709: LIST
15710: LIST
15711: LIST
15712: LIST
15713: LIST
15714: LIST
15715: LIST
15716: LIST
15717: LIST
15718: LIST
15719: LIST
15720: LIST
15721: LIST
15722: LIST
15723: LIST
15724: LIST
15725: LIST
15726: LIST
15727: LIST
15728: LIST
15729: LIST
15730: LIST
15731: LIST
15732: LIST
15733: PUSH
15734: LD_INT 101
15736: PUSH
15737: LD_INT 102
15739: PUSH
15740: LD_INT 103
15742: PUSH
15743: LD_INT 104
15745: PUSH
15746: LD_INT 105
15748: PUSH
15749: LD_INT 106
15751: PUSH
15752: LD_INT 107
15754: PUSH
15755: LD_INT 108
15757: PUSH
15758: LD_INT 109
15760: PUSH
15761: LD_INT 110
15763: PUSH
15764: LD_INT 111
15766: PUSH
15767: LD_INT 112
15769: PUSH
15770: LD_INT 113
15772: PUSH
15773: LD_INT 114
15775: PUSH
15776: LD_INT 116
15778: PUSH
15779: LD_INT 117
15781: PUSH
15782: LD_INT 118
15784: PUSH
15785: EMPTY
15786: LIST
15787: LIST
15788: LIST
15789: LIST
15790: LIST
15791: LIST
15792: LIST
15793: LIST
15794: LIST
15795: LIST
15796: LIST
15797: LIST
15798: LIST
15799: LIST
15800: LIST
15801: LIST
15802: LIST
15803: PUSH
15804: EMPTY
15805: LIST
15806: LIST
15807: ST_TO_ADDR
15808: GO 17047
15810: LD_INT 14
15812: DOUBLE
15813: EQUAL
15814: IFTRUE 15818
15816: GO 16042
15818: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
15819: LD_ADDR_VAR 0 2
15823: PUSH
15824: LD_INT 1
15826: PUSH
15827: LD_INT 2
15829: PUSH
15830: LD_INT 3
15832: PUSH
15833: LD_INT 4
15835: PUSH
15836: LD_INT 5
15838: PUSH
15839: LD_INT 6
15841: PUSH
15842: LD_INT 7
15844: PUSH
15845: LD_INT 8
15847: PUSH
15848: LD_INT 9
15850: PUSH
15851: LD_INT 10
15853: PUSH
15854: LD_INT 11
15856: PUSH
15857: LD_INT 12
15859: PUSH
15860: LD_INT 13
15862: PUSH
15863: LD_INT 14
15865: PUSH
15866: LD_INT 15
15868: PUSH
15869: LD_INT 16
15871: PUSH
15872: LD_INT 17
15874: PUSH
15875: LD_INT 18
15877: PUSH
15878: LD_INT 19
15880: PUSH
15881: LD_INT 20
15883: PUSH
15884: LD_INT 21
15886: PUSH
15887: LD_INT 22
15889: PUSH
15890: LD_INT 23
15892: PUSH
15893: LD_INT 24
15895: PUSH
15896: LD_INT 25
15898: PUSH
15899: LD_INT 26
15901: PUSH
15902: LD_INT 27
15904: PUSH
15905: LD_INT 28
15907: PUSH
15908: LD_INT 29
15910: PUSH
15911: LD_INT 30
15913: PUSH
15914: LD_INT 31
15916: PUSH
15917: LD_INT 32
15919: PUSH
15920: LD_INT 33
15922: PUSH
15923: LD_INT 34
15925: PUSH
15926: LD_INT 36
15928: PUSH
15929: EMPTY
15930: LIST
15931: LIST
15932: LIST
15933: LIST
15934: LIST
15935: LIST
15936: LIST
15937: LIST
15938: LIST
15939: LIST
15940: LIST
15941: LIST
15942: LIST
15943: LIST
15944: LIST
15945: LIST
15946: LIST
15947: LIST
15948: LIST
15949: LIST
15950: LIST
15951: LIST
15952: LIST
15953: LIST
15954: LIST
15955: LIST
15956: LIST
15957: LIST
15958: LIST
15959: LIST
15960: LIST
15961: LIST
15962: LIST
15963: LIST
15964: LIST
15965: PUSH
15966: LD_INT 101
15968: PUSH
15969: LD_INT 102
15971: PUSH
15972: LD_INT 103
15974: PUSH
15975: LD_INT 104
15977: PUSH
15978: LD_INT 105
15980: PUSH
15981: LD_INT 106
15983: PUSH
15984: LD_INT 107
15986: PUSH
15987: LD_INT 108
15989: PUSH
15990: LD_INT 109
15992: PUSH
15993: LD_INT 110
15995: PUSH
15996: LD_INT 111
15998: PUSH
15999: LD_INT 112
16001: PUSH
16002: LD_INT 113
16004: PUSH
16005: LD_INT 114
16007: PUSH
16008: LD_INT 116
16010: PUSH
16011: LD_INT 117
16013: PUSH
16014: LD_INT 118
16016: PUSH
16017: EMPTY
16018: LIST
16019: LIST
16020: LIST
16021: LIST
16022: LIST
16023: LIST
16024: LIST
16025: LIST
16026: LIST
16027: LIST
16028: LIST
16029: LIST
16030: LIST
16031: LIST
16032: LIST
16033: LIST
16034: LIST
16035: PUSH
16036: EMPTY
16037: LIST
16038: LIST
16039: ST_TO_ADDR
16040: GO 17047
16042: LD_INT 15
16044: DOUBLE
16045: EQUAL
16046: IFTRUE 16050
16048: GO 16274
16050: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
16051: LD_ADDR_VAR 0 2
16055: PUSH
16056: LD_INT 1
16058: PUSH
16059: LD_INT 2
16061: PUSH
16062: LD_INT 3
16064: PUSH
16065: LD_INT 4
16067: PUSH
16068: LD_INT 5
16070: PUSH
16071: LD_INT 6
16073: PUSH
16074: LD_INT 7
16076: PUSH
16077: LD_INT 8
16079: PUSH
16080: LD_INT 9
16082: PUSH
16083: LD_INT 10
16085: PUSH
16086: LD_INT 11
16088: PUSH
16089: LD_INT 12
16091: PUSH
16092: LD_INT 13
16094: PUSH
16095: LD_INT 14
16097: PUSH
16098: LD_INT 15
16100: PUSH
16101: LD_INT 16
16103: PUSH
16104: LD_INT 17
16106: PUSH
16107: LD_INT 18
16109: PUSH
16110: LD_INT 19
16112: PUSH
16113: LD_INT 20
16115: PUSH
16116: LD_INT 21
16118: PUSH
16119: LD_INT 22
16121: PUSH
16122: LD_INT 23
16124: PUSH
16125: LD_INT 24
16127: PUSH
16128: LD_INT 25
16130: PUSH
16131: LD_INT 26
16133: PUSH
16134: LD_INT 27
16136: PUSH
16137: LD_INT 28
16139: PUSH
16140: LD_INT 29
16142: PUSH
16143: LD_INT 30
16145: PUSH
16146: LD_INT 31
16148: PUSH
16149: LD_INT 32
16151: PUSH
16152: LD_INT 33
16154: PUSH
16155: LD_INT 34
16157: PUSH
16158: LD_INT 36
16160: PUSH
16161: EMPTY
16162: LIST
16163: LIST
16164: LIST
16165: LIST
16166: LIST
16167: LIST
16168: LIST
16169: LIST
16170: LIST
16171: LIST
16172: LIST
16173: LIST
16174: LIST
16175: LIST
16176: LIST
16177: LIST
16178: LIST
16179: LIST
16180: LIST
16181: LIST
16182: LIST
16183: LIST
16184: LIST
16185: LIST
16186: LIST
16187: LIST
16188: LIST
16189: LIST
16190: LIST
16191: LIST
16192: LIST
16193: LIST
16194: LIST
16195: LIST
16196: LIST
16197: PUSH
16198: LD_INT 101
16200: PUSH
16201: LD_INT 102
16203: PUSH
16204: LD_INT 103
16206: PUSH
16207: LD_INT 104
16209: PUSH
16210: LD_INT 105
16212: PUSH
16213: LD_INT 106
16215: PUSH
16216: LD_INT 107
16218: PUSH
16219: LD_INT 108
16221: PUSH
16222: LD_INT 109
16224: PUSH
16225: LD_INT 110
16227: PUSH
16228: LD_INT 111
16230: PUSH
16231: LD_INT 112
16233: PUSH
16234: LD_INT 113
16236: PUSH
16237: LD_INT 114
16239: PUSH
16240: LD_INT 116
16242: PUSH
16243: LD_INT 117
16245: PUSH
16246: LD_INT 118
16248: PUSH
16249: EMPTY
16250: LIST
16251: LIST
16252: LIST
16253: LIST
16254: LIST
16255: LIST
16256: LIST
16257: LIST
16258: LIST
16259: LIST
16260: LIST
16261: LIST
16262: LIST
16263: LIST
16264: LIST
16265: LIST
16266: LIST
16267: PUSH
16268: EMPTY
16269: LIST
16270: LIST
16271: ST_TO_ADDR
16272: GO 17047
16274: LD_INT 16
16276: DOUBLE
16277: EQUAL
16278: IFTRUE 16282
16280: GO 16418
16282: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
16283: LD_ADDR_VAR 0 2
16287: PUSH
16288: LD_INT 2
16290: PUSH
16291: LD_INT 4
16293: PUSH
16294: LD_INT 5
16296: PUSH
16297: LD_INT 7
16299: PUSH
16300: LD_INT 11
16302: PUSH
16303: LD_INT 12
16305: PUSH
16306: LD_INT 15
16308: PUSH
16309: LD_INT 16
16311: PUSH
16312: LD_INT 20
16314: PUSH
16315: LD_INT 21
16317: PUSH
16318: LD_INT 22
16320: PUSH
16321: LD_INT 23
16323: PUSH
16324: LD_INT 25
16326: PUSH
16327: LD_INT 26
16329: PUSH
16330: LD_INT 30
16332: PUSH
16333: LD_INT 31
16335: PUSH
16336: LD_INT 32
16338: PUSH
16339: LD_INT 33
16341: PUSH
16342: LD_INT 34
16344: PUSH
16345: EMPTY
16346: LIST
16347: LIST
16348: LIST
16349: LIST
16350: LIST
16351: LIST
16352: LIST
16353: LIST
16354: LIST
16355: LIST
16356: LIST
16357: LIST
16358: LIST
16359: LIST
16360: LIST
16361: LIST
16362: LIST
16363: LIST
16364: LIST
16365: PUSH
16366: LD_INT 101
16368: PUSH
16369: LD_INT 102
16371: PUSH
16372: LD_INT 103
16374: PUSH
16375: LD_INT 106
16377: PUSH
16378: LD_INT 108
16380: PUSH
16381: LD_INT 112
16383: PUSH
16384: LD_INT 113
16386: PUSH
16387: LD_INT 114
16389: PUSH
16390: LD_INT 116
16392: PUSH
16393: LD_INT 117
16395: PUSH
16396: LD_INT 118
16398: PUSH
16399: EMPTY
16400: LIST
16401: LIST
16402: LIST
16403: LIST
16404: LIST
16405: LIST
16406: LIST
16407: LIST
16408: LIST
16409: LIST
16410: LIST
16411: PUSH
16412: EMPTY
16413: LIST
16414: LIST
16415: ST_TO_ADDR
16416: GO 17047
16418: LD_INT 17
16420: DOUBLE
16421: EQUAL
16422: IFTRUE 16426
16424: GO 16650
16426: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
16427: LD_ADDR_VAR 0 2
16431: PUSH
16432: LD_INT 1
16434: PUSH
16435: LD_INT 2
16437: PUSH
16438: LD_INT 3
16440: PUSH
16441: LD_INT 4
16443: PUSH
16444: LD_INT 5
16446: PUSH
16447: LD_INT 6
16449: PUSH
16450: LD_INT 7
16452: PUSH
16453: LD_INT 8
16455: PUSH
16456: LD_INT 9
16458: PUSH
16459: LD_INT 10
16461: PUSH
16462: LD_INT 11
16464: PUSH
16465: LD_INT 12
16467: PUSH
16468: LD_INT 13
16470: PUSH
16471: LD_INT 14
16473: PUSH
16474: LD_INT 15
16476: PUSH
16477: LD_INT 16
16479: PUSH
16480: LD_INT 17
16482: PUSH
16483: LD_INT 18
16485: PUSH
16486: LD_INT 19
16488: PUSH
16489: LD_INT 20
16491: PUSH
16492: LD_INT 21
16494: PUSH
16495: LD_INT 22
16497: PUSH
16498: LD_INT 23
16500: PUSH
16501: LD_INT 24
16503: PUSH
16504: LD_INT 25
16506: PUSH
16507: LD_INT 26
16509: PUSH
16510: LD_INT 27
16512: PUSH
16513: LD_INT 28
16515: PUSH
16516: LD_INT 29
16518: PUSH
16519: LD_INT 30
16521: PUSH
16522: LD_INT 31
16524: PUSH
16525: LD_INT 32
16527: PUSH
16528: LD_INT 33
16530: PUSH
16531: LD_INT 34
16533: PUSH
16534: LD_INT 36
16536: PUSH
16537: EMPTY
16538: LIST
16539: LIST
16540: LIST
16541: LIST
16542: LIST
16543: LIST
16544: LIST
16545: LIST
16546: LIST
16547: LIST
16548: LIST
16549: LIST
16550: LIST
16551: LIST
16552: LIST
16553: LIST
16554: LIST
16555: LIST
16556: LIST
16557: LIST
16558: LIST
16559: LIST
16560: LIST
16561: LIST
16562: LIST
16563: LIST
16564: LIST
16565: LIST
16566: LIST
16567: LIST
16568: LIST
16569: LIST
16570: LIST
16571: LIST
16572: LIST
16573: PUSH
16574: LD_INT 101
16576: PUSH
16577: LD_INT 102
16579: PUSH
16580: LD_INT 103
16582: PUSH
16583: LD_INT 104
16585: PUSH
16586: LD_INT 105
16588: PUSH
16589: LD_INT 106
16591: PUSH
16592: LD_INT 107
16594: PUSH
16595: LD_INT 108
16597: PUSH
16598: LD_INT 109
16600: PUSH
16601: LD_INT 110
16603: PUSH
16604: LD_INT 111
16606: PUSH
16607: LD_INT 112
16609: PUSH
16610: LD_INT 113
16612: PUSH
16613: LD_INT 114
16615: PUSH
16616: LD_INT 116
16618: PUSH
16619: LD_INT 117
16621: PUSH
16622: LD_INT 118
16624: PUSH
16625: EMPTY
16626: LIST
16627: LIST
16628: LIST
16629: LIST
16630: LIST
16631: LIST
16632: LIST
16633: LIST
16634: LIST
16635: LIST
16636: LIST
16637: LIST
16638: LIST
16639: LIST
16640: LIST
16641: LIST
16642: LIST
16643: PUSH
16644: EMPTY
16645: LIST
16646: LIST
16647: ST_TO_ADDR
16648: GO 17047
16650: LD_INT 18
16652: DOUBLE
16653: EQUAL
16654: IFTRUE 16658
16656: GO 16806
16658: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
16659: LD_ADDR_VAR 0 2
16663: PUSH
16664: LD_INT 2
16666: PUSH
16667: LD_INT 4
16669: PUSH
16670: LD_INT 5
16672: PUSH
16673: LD_INT 7
16675: PUSH
16676: LD_INT 11
16678: PUSH
16679: LD_INT 12
16681: PUSH
16682: LD_INT 15
16684: PUSH
16685: LD_INT 16
16687: PUSH
16688: LD_INT 20
16690: PUSH
16691: LD_INT 21
16693: PUSH
16694: LD_INT 22
16696: PUSH
16697: LD_INT 23
16699: PUSH
16700: LD_INT 25
16702: PUSH
16703: LD_INT 26
16705: PUSH
16706: LD_INT 30
16708: PUSH
16709: LD_INT 31
16711: PUSH
16712: LD_INT 32
16714: PUSH
16715: LD_INT 33
16717: PUSH
16718: LD_INT 34
16720: PUSH
16721: LD_INT 35
16723: PUSH
16724: LD_INT 36
16726: PUSH
16727: EMPTY
16728: LIST
16729: LIST
16730: LIST
16731: LIST
16732: LIST
16733: LIST
16734: LIST
16735: LIST
16736: LIST
16737: LIST
16738: LIST
16739: LIST
16740: LIST
16741: LIST
16742: LIST
16743: LIST
16744: LIST
16745: LIST
16746: LIST
16747: LIST
16748: LIST
16749: PUSH
16750: LD_INT 101
16752: PUSH
16753: LD_INT 102
16755: PUSH
16756: LD_INT 103
16758: PUSH
16759: LD_INT 106
16761: PUSH
16762: LD_INT 108
16764: PUSH
16765: LD_INT 112
16767: PUSH
16768: LD_INT 113
16770: PUSH
16771: LD_INT 114
16773: PUSH
16774: LD_INT 115
16776: PUSH
16777: LD_INT 116
16779: PUSH
16780: LD_INT 117
16782: PUSH
16783: LD_INT 118
16785: PUSH
16786: EMPTY
16787: LIST
16788: LIST
16789: LIST
16790: LIST
16791: LIST
16792: LIST
16793: LIST
16794: LIST
16795: LIST
16796: LIST
16797: LIST
16798: LIST
16799: PUSH
16800: EMPTY
16801: LIST
16802: LIST
16803: ST_TO_ADDR
16804: GO 17047
16806: LD_INT 19
16808: DOUBLE
16809: EQUAL
16810: IFTRUE 16814
16812: GO 17046
16814: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
16815: LD_ADDR_VAR 0 2
16819: PUSH
16820: LD_INT 1
16822: PUSH
16823: LD_INT 2
16825: PUSH
16826: LD_INT 3
16828: PUSH
16829: LD_INT 4
16831: PUSH
16832: LD_INT 5
16834: PUSH
16835: LD_INT 6
16837: PUSH
16838: LD_INT 7
16840: PUSH
16841: LD_INT 8
16843: PUSH
16844: LD_INT 9
16846: PUSH
16847: LD_INT 10
16849: PUSH
16850: LD_INT 11
16852: PUSH
16853: LD_INT 12
16855: PUSH
16856: LD_INT 13
16858: PUSH
16859: LD_INT 14
16861: PUSH
16862: LD_INT 15
16864: PUSH
16865: LD_INT 16
16867: PUSH
16868: LD_INT 17
16870: PUSH
16871: LD_INT 18
16873: PUSH
16874: LD_INT 19
16876: PUSH
16877: LD_INT 20
16879: PUSH
16880: LD_INT 21
16882: PUSH
16883: LD_INT 22
16885: PUSH
16886: LD_INT 23
16888: PUSH
16889: LD_INT 24
16891: PUSH
16892: LD_INT 25
16894: PUSH
16895: LD_INT 26
16897: PUSH
16898: LD_INT 27
16900: PUSH
16901: LD_INT 28
16903: PUSH
16904: LD_INT 29
16906: PUSH
16907: LD_INT 30
16909: PUSH
16910: LD_INT 31
16912: PUSH
16913: LD_INT 32
16915: PUSH
16916: LD_INT 33
16918: PUSH
16919: LD_INT 34
16921: PUSH
16922: LD_INT 35
16924: PUSH
16925: LD_INT 36
16927: PUSH
16928: EMPTY
16929: LIST
16930: LIST
16931: LIST
16932: LIST
16933: LIST
16934: LIST
16935: LIST
16936: LIST
16937: LIST
16938: LIST
16939: LIST
16940: LIST
16941: LIST
16942: LIST
16943: LIST
16944: LIST
16945: LIST
16946: LIST
16947: LIST
16948: LIST
16949: LIST
16950: LIST
16951: LIST
16952: LIST
16953: LIST
16954: LIST
16955: LIST
16956: LIST
16957: LIST
16958: LIST
16959: LIST
16960: LIST
16961: LIST
16962: LIST
16963: LIST
16964: LIST
16965: PUSH
16966: LD_INT 101
16968: PUSH
16969: LD_INT 102
16971: PUSH
16972: LD_INT 103
16974: PUSH
16975: LD_INT 104
16977: PUSH
16978: LD_INT 105
16980: PUSH
16981: LD_INT 106
16983: PUSH
16984: LD_INT 107
16986: PUSH
16987: LD_INT 108
16989: PUSH
16990: LD_INT 109
16992: PUSH
16993: LD_INT 110
16995: PUSH
16996: LD_INT 111
16998: PUSH
16999: LD_INT 112
17001: PUSH
17002: LD_INT 113
17004: PUSH
17005: LD_INT 114
17007: PUSH
17008: LD_INT 115
17010: PUSH
17011: LD_INT 116
17013: PUSH
17014: LD_INT 117
17016: PUSH
17017: LD_INT 118
17019: PUSH
17020: EMPTY
17021: LIST
17022: LIST
17023: LIST
17024: LIST
17025: LIST
17026: LIST
17027: LIST
17028: LIST
17029: LIST
17030: LIST
17031: LIST
17032: LIST
17033: LIST
17034: LIST
17035: LIST
17036: LIST
17037: LIST
17038: LIST
17039: PUSH
17040: EMPTY
17041: LIST
17042: LIST
17043: ST_TO_ADDR
17044: GO 17047
17046: POP
// end else
17047: GO 17278
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
17049: LD_ADDR_VAR 0 2
17053: PUSH
17054: LD_INT 1
17056: PUSH
17057: LD_INT 2
17059: PUSH
17060: LD_INT 3
17062: PUSH
17063: LD_INT 4
17065: PUSH
17066: LD_INT 5
17068: PUSH
17069: LD_INT 6
17071: PUSH
17072: LD_INT 7
17074: PUSH
17075: LD_INT 8
17077: PUSH
17078: LD_INT 9
17080: PUSH
17081: LD_INT 10
17083: PUSH
17084: LD_INT 11
17086: PUSH
17087: LD_INT 12
17089: PUSH
17090: LD_INT 13
17092: PUSH
17093: LD_INT 14
17095: PUSH
17096: LD_INT 15
17098: PUSH
17099: LD_INT 16
17101: PUSH
17102: LD_INT 17
17104: PUSH
17105: LD_INT 18
17107: PUSH
17108: LD_INT 19
17110: PUSH
17111: LD_INT 20
17113: PUSH
17114: LD_INT 21
17116: PUSH
17117: LD_INT 22
17119: PUSH
17120: LD_INT 23
17122: PUSH
17123: LD_INT 24
17125: PUSH
17126: LD_INT 25
17128: PUSH
17129: LD_INT 26
17131: PUSH
17132: LD_INT 27
17134: PUSH
17135: LD_INT 28
17137: PUSH
17138: LD_INT 29
17140: PUSH
17141: LD_INT 30
17143: PUSH
17144: LD_INT 31
17146: PUSH
17147: LD_INT 32
17149: PUSH
17150: LD_INT 33
17152: PUSH
17153: LD_INT 34
17155: PUSH
17156: LD_INT 35
17158: PUSH
17159: LD_INT 36
17161: PUSH
17162: EMPTY
17163: LIST
17164: LIST
17165: LIST
17166: LIST
17167: LIST
17168: LIST
17169: LIST
17170: LIST
17171: LIST
17172: LIST
17173: LIST
17174: LIST
17175: LIST
17176: LIST
17177: LIST
17178: LIST
17179: LIST
17180: LIST
17181: LIST
17182: LIST
17183: LIST
17184: LIST
17185: LIST
17186: LIST
17187: LIST
17188: LIST
17189: LIST
17190: LIST
17191: LIST
17192: LIST
17193: LIST
17194: LIST
17195: LIST
17196: LIST
17197: LIST
17198: LIST
17199: PUSH
17200: LD_INT 101
17202: PUSH
17203: LD_INT 102
17205: PUSH
17206: LD_INT 103
17208: PUSH
17209: LD_INT 104
17211: PUSH
17212: LD_INT 105
17214: PUSH
17215: LD_INT 106
17217: PUSH
17218: LD_INT 107
17220: PUSH
17221: LD_INT 108
17223: PUSH
17224: LD_INT 109
17226: PUSH
17227: LD_INT 110
17229: PUSH
17230: LD_INT 111
17232: PUSH
17233: LD_INT 112
17235: PUSH
17236: LD_INT 113
17238: PUSH
17239: LD_INT 114
17241: PUSH
17242: LD_INT 115
17244: PUSH
17245: LD_INT 116
17247: PUSH
17248: LD_INT 117
17250: PUSH
17251: LD_INT 118
17253: PUSH
17254: EMPTY
17255: LIST
17256: LIST
17257: LIST
17258: LIST
17259: LIST
17260: LIST
17261: LIST
17262: LIST
17263: LIST
17264: LIST
17265: LIST
17266: LIST
17267: LIST
17268: LIST
17269: LIST
17270: LIST
17271: LIST
17272: LIST
17273: PUSH
17274: EMPTY
17275: LIST
17276: LIST
17277: ST_TO_ADDR
// if result then
17278: LD_VAR 0 2
17282: IFFALSE 18068
// begin normal :=  ;
17284: LD_ADDR_VAR 0 5
17288: PUSH
17289: LD_STRING 
17291: ST_TO_ADDR
// hardcore :=  ;
17292: LD_ADDR_VAR 0 6
17296: PUSH
17297: LD_STRING 
17299: ST_TO_ADDR
// active :=  ;
17300: LD_ADDR_VAR 0 7
17304: PUSH
17305: LD_STRING 
17307: ST_TO_ADDR
// for i = 1 to normalCounter do
17308: LD_ADDR_VAR 0 8
17312: PUSH
17313: DOUBLE
17314: LD_INT 1
17316: DEC
17317: ST_TO_ADDR
17318: LD_EXP 41
17322: PUSH
17323: FOR_TO
17324: IFFALSE 17425
// begin tmp := 0 ;
17326: LD_ADDR_VAR 0 3
17330: PUSH
17331: LD_STRING 0
17333: ST_TO_ADDR
// if result [ 1 ] then
17334: LD_VAR 0 2
17338: PUSH
17339: LD_INT 1
17341: ARRAY
17342: IFFALSE 17407
// if result [ 1 ] [ 1 ] = i then
17344: LD_VAR 0 2
17348: PUSH
17349: LD_INT 1
17351: ARRAY
17352: PUSH
17353: LD_INT 1
17355: ARRAY
17356: PUSH
17357: LD_VAR 0 8
17361: EQUAL
17362: IFFALSE 17407
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
17364: LD_ADDR_VAR 0 2
17368: PUSH
17369: LD_VAR 0 2
17373: PPUSH
17374: LD_INT 1
17376: PPUSH
17377: LD_VAR 0 2
17381: PUSH
17382: LD_INT 1
17384: ARRAY
17385: PPUSH
17386: LD_INT 1
17388: PPUSH
17389: CALL_OW 3
17393: PPUSH
17394: CALL_OW 1
17398: ST_TO_ADDR
// tmp := 1 ;
17399: LD_ADDR_VAR 0 3
17403: PUSH
17404: LD_STRING 1
17406: ST_TO_ADDR
// end ; normal := normal & tmp ;
17407: LD_ADDR_VAR 0 5
17411: PUSH
17412: LD_VAR 0 5
17416: PUSH
17417: LD_VAR 0 3
17421: STR
17422: ST_TO_ADDR
// end ;
17423: GO 17323
17425: POP
17426: POP
// for i = 1 to hardcoreCounter do
17427: LD_ADDR_VAR 0 8
17431: PUSH
17432: DOUBLE
17433: LD_INT 1
17435: DEC
17436: ST_TO_ADDR
17437: LD_EXP 42
17441: PUSH
17442: FOR_TO
17443: IFFALSE 17548
// begin tmp := 0 ;
17445: LD_ADDR_VAR 0 3
17449: PUSH
17450: LD_STRING 0
17452: ST_TO_ADDR
// if result [ 2 ] then
17453: LD_VAR 0 2
17457: PUSH
17458: LD_INT 2
17460: ARRAY
17461: IFFALSE 17530
// if result [ 2 ] [ 1 ] = 100 + i then
17463: LD_VAR 0 2
17467: PUSH
17468: LD_INT 2
17470: ARRAY
17471: PUSH
17472: LD_INT 1
17474: ARRAY
17475: PUSH
17476: LD_INT 100
17478: PUSH
17479: LD_VAR 0 8
17483: PLUS
17484: EQUAL
17485: IFFALSE 17530
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
17487: LD_ADDR_VAR 0 2
17491: PUSH
17492: LD_VAR 0 2
17496: PPUSH
17497: LD_INT 2
17499: PPUSH
17500: LD_VAR 0 2
17504: PUSH
17505: LD_INT 2
17507: ARRAY
17508: PPUSH
17509: LD_INT 1
17511: PPUSH
17512: CALL_OW 3
17516: PPUSH
17517: CALL_OW 1
17521: ST_TO_ADDR
// tmp := 1 ;
17522: LD_ADDR_VAR 0 3
17526: PUSH
17527: LD_STRING 1
17529: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
17530: LD_ADDR_VAR 0 6
17534: PUSH
17535: LD_VAR 0 6
17539: PUSH
17540: LD_VAR 0 3
17544: STR
17545: ST_TO_ADDR
// end ;
17546: GO 17442
17548: POP
17549: POP
// if isGameLoad then
17550: LD_VAR 0 1
17554: IFFALSE 18029
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
17556: LD_ADDR_VAR 0 4
17560: PUSH
17561: LD_EXP 45
17565: PUSH
17566: LD_EXP 44
17570: PUSH
17571: LD_EXP 46
17575: PUSH
17576: LD_EXP 43
17580: PUSH
17581: LD_EXP 47
17585: PUSH
17586: LD_EXP 48
17590: PUSH
17591: LD_EXP 49
17595: PUSH
17596: LD_EXP 50
17600: PUSH
17601: LD_EXP 51
17605: PUSH
17606: LD_EXP 52
17610: PUSH
17611: LD_EXP 53
17615: PUSH
17616: LD_EXP 54
17620: PUSH
17621: LD_EXP 55
17625: PUSH
17626: LD_EXP 56
17630: PUSH
17631: LD_EXP 64
17635: PUSH
17636: LD_EXP 65
17640: PUSH
17641: LD_EXP 66
17645: PUSH
17646: LD_EXP 67
17650: PUSH
17651: LD_EXP 69
17655: PUSH
17656: LD_EXP 70
17660: PUSH
17661: LD_EXP 71
17665: PUSH
17666: LD_EXP 74
17670: PUSH
17671: LD_EXP 76
17675: PUSH
17676: LD_EXP 77
17680: PUSH
17681: LD_EXP 78
17685: PUSH
17686: LD_EXP 80
17690: PUSH
17691: LD_EXP 81
17695: PUSH
17696: LD_EXP 84
17700: PUSH
17701: LD_EXP 85
17705: PUSH
17706: LD_EXP 86
17710: PUSH
17711: LD_EXP 87
17715: PUSH
17716: LD_EXP 88
17720: PUSH
17721: LD_EXP 89
17725: PUSH
17726: LD_EXP 90
17730: PUSH
17731: LD_EXP 91
17735: PUSH
17736: LD_EXP 92
17740: PUSH
17741: LD_EXP 57
17745: PUSH
17746: LD_EXP 58
17750: PUSH
17751: LD_EXP 61
17755: PUSH
17756: LD_EXP 62
17760: PUSH
17761: LD_EXP 63
17765: PUSH
17766: LD_EXP 59
17770: PUSH
17771: LD_EXP 60
17775: PUSH
17776: LD_EXP 68
17780: PUSH
17781: LD_EXP 72
17785: PUSH
17786: LD_EXP 73
17790: PUSH
17791: LD_EXP 75
17795: PUSH
17796: LD_EXP 79
17800: PUSH
17801: LD_EXP 82
17805: PUSH
17806: LD_EXP 83
17810: PUSH
17811: LD_EXP 93
17815: PUSH
17816: LD_EXP 94
17820: PUSH
17821: LD_EXP 95
17825: PUSH
17826: LD_EXP 96
17830: PUSH
17831: EMPTY
17832: LIST
17833: LIST
17834: LIST
17835: LIST
17836: LIST
17837: LIST
17838: LIST
17839: LIST
17840: LIST
17841: LIST
17842: LIST
17843: LIST
17844: LIST
17845: LIST
17846: LIST
17847: LIST
17848: LIST
17849: LIST
17850: LIST
17851: LIST
17852: LIST
17853: LIST
17854: LIST
17855: LIST
17856: LIST
17857: LIST
17858: LIST
17859: LIST
17860: LIST
17861: LIST
17862: LIST
17863: LIST
17864: LIST
17865: LIST
17866: LIST
17867: LIST
17868: LIST
17869: LIST
17870: LIST
17871: LIST
17872: LIST
17873: LIST
17874: LIST
17875: LIST
17876: LIST
17877: LIST
17878: LIST
17879: LIST
17880: LIST
17881: LIST
17882: LIST
17883: LIST
17884: LIST
17885: LIST
17886: ST_TO_ADDR
// tmp :=  ;
17887: LD_ADDR_VAR 0 3
17891: PUSH
17892: LD_STRING 
17894: ST_TO_ADDR
// for i = 1 to normalCounter do
17895: LD_ADDR_VAR 0 8
17899: PUSH
17900: DOUBLE
17901: LD_INT 1
17903: DEC
17904: ST_TO_ADDR
17905: LD_EXP 41
17909: PUSH
17910: FOR_TO
17911: IFFALSE 17947
// begin if flags [ i ] then
17913: LD_VAR 0 4
17917: PUSH
17918: LD_VAR 0 8
17922: ARRAY
17923: IFFALSE 17945
// tmp := tmp & i & ; ;
17925: LD_ADDR_VAR 0 3
17929: PUSH
17930: LD_VAR 0 3
17934: PUSH
17935: LD_VAR 0 8
17939: STR
17940: PUSH
17941: LD_STRING ;
17943: STR
17944: ST_TO_ADDR
// end ;
17945: GO 17910
17947: POP
17948: POP
// for i = 1 to hardcoreCounter do
17949: LD_ADDR_VAR 0 8
17953: PUSH
17954: DOUBLE
17955: LD_INT 1
17957: DEC
17958: ST_TO_ADDR
17959: LD_EXP 42
17963: PUSH
17964: FOR_TO
17965: IFFALSE 18011
// begin if flags [ normalCounter + i ] then
17967: LD_VAR 0 4
17971: PUSH
17972: LD_EXP 41
17976: PUSH
17977: LD_VAR 0 8
17981: PLUS
17982: ARRAY
17983: IFFALSE 18009
// tmp := tmp & ( 100 + i ) & ; ;
17985: LD_ADDR_VAR 0 3
17989: PUSH
17990: LD_VAR 0 3
17994: PUSH
17995: LD_INT 100
17997: PUSH
17998: LD_VAR 0 8
18002: PLUS
18003: STR
18004: PUSH
18005: LD_STRING ;
18007: STR
18008: ST_TO_ADDR
// end ;
18009: GO 17964
18011: POP
18012: POP
// if tmp then
18013: LD_VAR 0 3
18017: IFFALSE 18029
// active := tmp ;
18019: LD_ADDR_VAR 0 7
18023: PUSH
18024: LD_VAR 0 3
18028: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
18029: LD_STRING getStreamItemsFromMission("
18031: PUSH
18032: LD_VAR 0 5
18036: STR
18037: PUSH
18038: LD_STRING ","
18040: STR
18041: PUSH
18042: LD_VAR 0 6
18046: STR
18047: PUSH
18048: LD_STRING ","
18050: STR
18051: PUSH
18052: LD_VAR 0 7
18056: STR
18057: PUSH
18058: LD_STRING ")
18060: STR
18061: PPUSH
18062: CALL_OW 559
// end else
18066: GO 18075
// ToLua ( getStreamItemsFromMission("","","") ) ;
18068: LD_STRING getStreamItemsFromMission("","","")
18070: PPUSH
18071: CALL_OW 559
// end ;
18075: LD_VAR 0 2
18079: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
18080: LD_EXP 40
18084: PUSH
18085: LD_EXP 45
18089: AND
18090: IFFALSE 18214
18092: GO 18094
18094: DISABLE
18095: LD_INT 0
18097: PPUSH
18098: PPUSH
// begin enable ;
18099: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
18100: LD_ADDR_VAR 0 2
18104: PUSH
18105: LD_INT 22
18107: PUSH
18108: LD_OWVAR 2
18112: PUSH
18113: EMPTY
18114: LIST
18115: LIST
18116: PUSH
18117: LD_INT 2
18119: PUSH
18120: LD_INT 34
18122: PUSH
18123: LD_INT 7
18125: PUSH
18126: EMPTY
18127: LIST
18128: LIST
18129: PUSH
18130: LD_INT 34
18132: PUSH
18133: LD_INT 45
18135: PUSH
18136: EMPTY
18137: LIST
18138: LIST
18139: PUSH
18140: LD_INT 34
18142: PUSH
18143: LD_INT 28
18145: PUSH
18146: EMPTY
18147: LIST
18148: LIST
18149: PUSH
18150: LD_INT 34
18152: PUSH
18153: LD_INT 47
18155: PUSH
18156: EMPTY
18157: LIST
18158: LIST
18159: PUSH
18160: EMPTY
18161: LIST
18162: LIST
18163: LIST
18164: LIST
18165: LIST
18166: PUSH
18167: EMPTY
18168: LIST
18169: LIST
18170: PPUSH
18171: CALL_OW 69
18175: ST_TO_ADDR
// if not tmp then
18176: LD_VAR 0 2
18180: NOT
18181: IFFALSE 18185
// exit ;
18183: GO 18214
// for i in tmp do
18185: LD_ADDR_VAR 0 1
18189: PUSH
18190: LD_VAR 0 2
18194: PUSH
18195: FOR_IN
18196: IFFALSE 18212
// begin SetLives ( i , 0 ) ;
18198: LD_VAR 0 1
18202: PPUSH
18203: LD_INT 0
18205: PPUSH
18206: CALL_OW 234
// end ;
18210: GO 18195
18212: POP
18213: POP
// end ;
18214: PPOPN 2
18216: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
18217: LD_EXP 40
18221: PUSH
18222: LD_EXP 46
18226: AND
18227: IFFALSE 18311
18229: GO 18231
18231: DISABLE
18232: LD_INT 0
18234: PPUSH
18235: PPUSH
// begin enable ;
18236: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
18237: LD_ADDR_VAR 0 2
18241: PUSH
18242: LD_INT 22
18244: PUSH
18245: LD_OWVAR 2
18249: PUSH
18250: EMPTY
18251: LIST
18252: LIST
18253: PUSH
18254: LD_INT 32
18256: PUSH
18257: LD_INT 3
18259: PUSH
18260: EMPTY
18261: LIST
18262: LIST
18263: PUSH
18264: EMPTY
18265: LIST
18266: LIST
18267: PPUSH
18268: CALL_OW 69
18272: ST_TO_ADDR
// if not tmp then
18273: LD_VAR 0 2
18277: NOT
18278: IFFALSE 18282
// exit ;
18280: GO 18311
// for i in tmp do
18282: LD_ADDR_VAR 0 1
18286: PUSH
18287: LD_VAR 0 2
18291: PUSH
18292: FOR_IN
18293: IFFALSE 18309
// begin SetLives ( i , 0 ) ;
18295: LD_VAR 0 1
18299: PPUSH
18300: LD_INT 0
18302: PPUSH
18303: CALL_OW 234
// end ;
18307: GO 18292
18309: POP
18310: POP
// end ;
18311: PPOPN 2
18313: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
18314: LD_EXP 40
18318: PUSH
18319: LD_EXP 43
18323: AND
18324: IFFALSE 18417
18326: GO 18328
18328: DISABLE
18329: LD_INT 0
18331: PPUSH
// begin enable ;
18332: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
18333: LD_ADDR_VAR 0 1
18337: PUSH
18338: LD_INT 22
18340: PUSH
18341: LD_OWVAR 2
18345: PUSH
18346: EMPTY
18347: LIST
18348: LIST
18349: PUSH
18350: LD_INT 2
18352: PUSH
18353: LD_INT 25
18355: PUSH
18356: LD_INT 5
18358: PUSH
18359: EMPTY
18360: LIST
18361: LIST
18362: PUSH
18363: LD_INT 25
18365: PUSH
18366: LD_INT 9
18368: PUSH
18369: EMPTY
18370: LIST
18371: LIST
18372: PUSH
18373: LD_INT 25
18375: PUSH
18376: LD_INT 8
18378: PUSH
18379: EMPTY
18380: LIST
18381: LIST
18382: PUSH
18383: EMPTY
18384: LIST
18385: LIST
18386: LIST
18387: LIST
18388: PUSH
18389: EMPTY
18390: LIST
18391: LIST
18392: PPUSH
18393: CALL_OW 69
18397: PUSH
18398: FOR_IN
18399: IFFALSE 18415
// begin SetClass ( i , 1 ) ;
18401: LD_VAR 0 1
18405: PPUSH
18406: LD_INT 1
18408: PPUSH
18409: CALL_OW 336
// end ;
18413: GO 18398
18415: POP
18416: POP
// end ;
18417: PPOPN 1
18419: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
18420: LD_EXP 40
18424: PUSH
18425: LD_EXP 44
18429: AND
18430: PUSH
18431: LD_OWVAR 65
18435: PUSH
18436: LD_INT 7
18438: LESS
18439: AND
18440: IFFALSE 18454
18442: GO 18444
18444: DISABLE
// begin enable ;
18445: ENABLE
// game_speed := 7 ;
18446: LD_ADDR_OWVAR 65
18450: PUSH
18451: LD_INT 7
18453: ST_TO_ADDR
// end ;
18454: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
18455: LD_EXP 40
18459: PUSH
18460: LD_EXP 47
18464: AND
18465: IFFALSE 18667
18467: GO 18469
18469: DISABLE
18470: LD_INT 0
18472: PPUSH
18473: PPUSH
18474: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
18475: LD_ADDR_VAR 0 3
18479: PUSH
18480: LD_INT 81
18482: PUSH
18483: LD_OWVAR 2
18487: PUSH
18488: EMPTY
18489: LIST
18490: LIST
18491: PUSH
18492: LD_INT 21
18494: PUSH
18495: LD_INT 1
18497: PUSH
18498: EMPTY
18499: LIST
18500: LIST
18501: PUSH
18502: EMPTY
18503: LIST
18504: LIST
18505: PPUSH
18506: CALL_OW 69
18510: ST_TO_ADDR
// if not tmp then
18511: LD_VAR 0 3
18515: NOT
18516: IFFALSE 18520
// exit ;
18518: GO 18667
// if tmp > 5 then
18520: LD_VAR 0 3
18524: PUSH
18525: LD_INT 5
18527: GREATER
18528: IFFALSE 18540
// k := 5 else
18530: LD_ADDR_VAR 0 2
18534: PUSH
18535: LD_INT 5
18537: ST_TO_ADDR
18538: GO 18550
// k := tmp ;
18540: LD_ADDR_VAR 0 2
18544: PUSH
18545: LD_VAR 0 3
18549: ST_TO_ADDR
// for i := 1 to k do
18550: LD_ADDR_VAR 0 1
18554: PUSH
18555: DOUBLE
18556: LD_INT 1
18558: DEC
18559: ST_TO_ADDR
18560: LD_VAR 0 2
18564: PUSH
18565: FOR_TO
18566: IFFALSE 18665
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
18568: LD_VAR 0 3
18572: PUSH
18573: LD_VAR 0 1
18577: ARRAY
18578: PPUSH
18579: LD_VAR 0 1
18583: PUSH
18584: LD_INT 4
18586: MOD
18587: PUSH
18588: LD_INT 1
18590: PLUS
18591: PPUSH
18592: CALL_OW 259
18596: PUSH
18597: LD_INT 10
18599: LESS
18600: IFFALSE 18663
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
18602: LD_VAR 0 3
18606: PUSH
18607: LD_VAR 0 1
18611: ARRAY
18612: PPUSH
18613: LD_VAR 0 1
18617: PUSH
18618: LD_INT 4
18620: MOD
18621: PUSH
18622: LD_INT 1
18624: PLUS
18625: PPUSH
18626: LD_VAR 0 3
18630: PUSH
18631: LD_VAR 0 1
18635: ARRAY
18636: PPUSH
18637: LD_VAR 0 1
18641: PUSH
18642: LD_INT 4
18644: MOD
18645: PUSH
18646: LD_INT 1
18648: PLUS
18649: PPUSH
18650: CALL_OW 259
18654: PUSH
18655: LD_INT 1
18657: PLUS
18658: PPUSH
18659: CALL_OW 237
18663: GO 18565
18665: POP
18666: POP
// end ;
18667: PPOPN 3
18669: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
18670: LD_EXP 40
18674: PUSH
18675: LD_EXP 48
18679: AND
18680: IFFALSE 18700
18682: GO 18684
18684: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
18685: LD_INT 4
18687: PPUSH
18688: LD_OWVAR 2
18692: PPUSH
18693: LD_INT 0
18695: PPUSH
18696: CALL_OW 324
18700: END
// every 0 0$1 trigger StreamModeActive and sShovel do
18701: LD_EXP 40
18705: PUSH
18706: LD_EXP 77
18710: AND
18711: IFFALSE 18731
18713: GO 18715
18715: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
18716: LD_INT 19
18718: PPUSH
18719: LD_OWVAR 2
18723: PPUSH
18724: LD_INT 0
18726: PPUSH
18727: CALL_OW 324
18731: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
18732: LD_EXP 40
18736: PUSH
18737: LD_EXP 49
18741: AND
18742: IFFALSE 18844
18744: GO 18746
18746: DISABLE
18747: LD_INT 0
18749: PPUSH
18750: PPUSH
// begin enable ;
18751: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
18752: LD_ADDR_VAR 0 2
18756: PUSH
18757: LD_INT 22
18759: PUSH
18760: LD_OWVAR 2
18764: PUSH
18765: EMPTY
18766: LIST
18767: LIST
18768: PUSH
18769: LD_INT 2
18771: PUSH
18772: LD_INT 34
18774: PUSH
18775: LD_INT 11
18777: PUSH
18778: EMPTY
18779: LIST
18780: LIST
18781: PUSH
18782: LD_INT 34
18784: PUSH
18785: LD_INT 30
18787: PUSH
18788: EMPTY
18789: LIST
18790: LIST
18791: PUSH
18792: EMPTY
18793: LIST
18794: LIST
18795: LIST
18796: PUSH
18797: EMPTY
18798: LIST
18799: LIST
18800: PPUSH
18801: CALL_OW 69
18805: ST_TO_ADDR
// if not tmp then
18806: LD_VAR 0 2
18810: NOT
18811: IFFALSE 18815
// exit ;
18813: GO 18844
// for i in tmp do
18815: LD_ADDR_VAR 0 1
18819: PUSH
18820: LD_VAR 0 2
18824: PUSH
18825: FOR_IN
18826: IFFALSE 18842
// begin SetLives ( i , 0 ) ;
18828: LD_VAR 0 1
18832: PPUSH
18833: LD_INT 0
18835: PPUSH
18836: CALL_OW 234
// end ;
18840: GO 18825
18842: POP
18843: POP
// end ;
18844: PPOPN 2
18846: END
// every 0 0$1 trigger StreamModeActive and sBunker do
18847: LD_EXP 40
18851: PUSH
18852: LD_EXP 50
18856: AND
18857: IFFALSE 18877
18859: GO 18861
18861: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
18862: LD_INT 32
18864: PPUSH
18865: LD_OWVAR 2
18869: PPUSH
18870: LD_INT 0
18872: PPUSH
18873: CALL_OW 324
18877: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
18878: LD_EXP 40
18882: PUSH
18883: LD_EXP 51
18887: AND
18888: IFFALSE 19069
18890: GO 18892
18892: DISABLE
18893: LD_INT 0
18895: PPUSH
18896: PPUSH
18897: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
18898: LD_ADDR_VAR 0 2
18902: PUSH
18903: LD_INT 22
18905: PUSH
18906: LD_OWVAR 2
18910: PUSH
18911: EMPTY
18912: LIST
18913: LIST
18914: PUSH
18915: LD_INT 33
18917: PUSH
18918: LD_INT 3
18920: PUSH
18921: EMPTY
18922: LIST
18923: LIST
18924: PUSH
18925: EMPTY
18926: LIST
18927: LIST
18928: PPUSH
18929: CALL_OW 69
18933: ST_TO_ADDR
// if not tmp then
18934: LD_VAR 0 2
18938: NOT
18939: IFFALSE 18943
// exit ;
18941: GO 19069
// side := 0 ;
18943: LD_ADDR_VAR 0 3
18947: PUSH
18948: LD_INT 0
18950: ST_TO_ADDR
// for i := 1 to 8 do
18951: LD_ADDR_VAR 0 1
18955: PUSH
18956: DOUBLE
18957: LD_INT 1
18959: DEC
18960: ST_TO_ADDR
18961: LD_INT 8
18963: PUSH
18964: FOR_TO
18965: IFFALSE 19013
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
18967: LD_OWVAR 2
18971: PUSH
18972: LD_VAR 0 1
18976: NONEQUAL
18977: PUSH
18978: LD_OWVAR 2
18982: PPUSH
18983: LD_VAR 0 1
18987: PPUSH
18988: CALL_OW 81
18992: PUSH
18993: LD_INT 2
18995: EQUAL
18996: AND
18997: IFFALSE 19011
// begin side := i ;
18999: LD_ADDR_VAR 0 3
19003: PUSH
19004: LD_VAR 0 1
19008: ST_TO_ADDR
// break ;
19009: GO 19013
// end ;
19011: GO 18964
19013: POP
19014: POP
// if not side then
19015: LD_VAR 0 3
19019: NOT
19020: IFFALSE 19024
// exit ;
19022: GO 19069
// for i := 1 to tmp do
19024: LD_ADDR_VAR 0 1
19028: PUSH
19029: DOUBLE
19030: LD_INT 1
19032: DEC
19033: ST_TO_ADDR
19034: LD_VAR 0 2
19038: PUSH
19039: FOR_TO
19040: IFFALSE 19067
// if Prob ( 60 ) then
19042: LD_INT 60
19044: PPUSH
19045: CALL_OW 13
19049: IFFALSE 19065
// SetSide ( i , side ) ;
19051: LD_VAR 0 1
19055: PPUSH
19056: LD_VAR 0 3
19060: PPUSH
19061: CALL_OW 235
19065: GO 19039
19067: POP
19068: POP
// end ;
19069: PPOPN 3
19071: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
19072: LD_EXP 40
19076: PUSH
19077: LD_EXP 53
19081: AND
19082: IFFALSE 19201
19084: GO 19086
19086: DISABLE
19087: LD_INT 0
19089: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
19090: LD_ADDR_VAR 0 1
19094: PUSH
19095: LD_INT 22
19097: PUSH
19098: LD_OWVAR 2
19102: PUSH
19103: EMPTY
19104: LIST
19105: LIST
19106: PUSH
19107: LD_INT 21
19109: PUSH
19110: LD_INT 1
19112: PUSH
19113: EMPTY
19114: LIST
19115: LIST
19116: PUSH
19117: LD_INT 3
19119: PUSH
19120: LD_INT 23
19122: PUSH
19123: LD_INT 0
19125: PUSH
19126: EMPTY
19127: LIST
19128: LIST
19129: PUSH
19130: EMPTY
19131: LIST
19132: LIST
19133: PUSH
19134: EMPTY
19135: LIST
19136: LIST
19137: LIST
19138: PPUSH
19139: CALL_OW 69
19143: PUSH
19144: FOR_IN
19145: IFFALSE 19199
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
19147: LD_VAR 0 1
19151: PPUSH
19152: CALL_OW 257
19156: PUSH
19157: LD_INT 1
19159: PUSH
19160: LD_INT 2
19162: PUSH
19163: LD_INT 3
19165: PUSH
19166: LD_INT 4
19168: PUSH
19169: EMPTY
19170: LIST
19171: LIST
19172: LIST
19173: LIST
19174: IN
19175: IFFALSE 19197
// SetClass ( un , rand ( 1 , 4 ) ) ;
19177: LD_VAR 0 1
19181: PPUSH
19182: LD_INT 1
19184: PPUSH
19185: LD_INT 4
19187: PPUSH
19188: CALL_OW 12
19192: PPUSH
19193: CALL_OW 336
19197: GO 19144
19199: POP
19200: POP
// end ;
19201: PPOPN 1
19203: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
19204: LD_EXP 40
19208: PUSH
19209: LD_EXP 52
19213: AND
19214: IFFALSE 19293
19216: GO 19218
19218: DISABLE
19219: LD_INT 0
19221: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
19222: LD_ADDR_VAR 0 1
19226: PUSH
19227: LD_INT 22
19229: PUSH
19230: LD_OWVAR 2
19234: PUSH
19235: EMPTY
19236: LIST
19237: LIST
19238: PUSH
19239: LD_INT 21
19241: PUSH
19242: LD_INT 3
19244: PUSH
19245: EMPTY
19246: LIST
19247: LIST
19248: PUSH
19249: EMPTY
19250: LIST
19251: LIST
19252: PPUSH
19253: CALL_OW 69
19257: ST_TO_ADDR
// if not tmp then
19258: LD_VAR 0 1
19262: NOT
19263: IFFALSE 19267
// exit ;
19265: GO 19293
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
19267: LD_VAR 0 1
19271: PUSH
19272: LD_INT 1
19274: PPUSH
19275: LD_VAR 0 1
19279: PPUSH
19280: CALL_OW 12
19284: ARRAY
19285: PPUSH
19286: LD_INT 100
19288: PPUSH
19289: CALL_OW 234
// end ;
19293: PPOPN 1
19295: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
19296: LD_EXP 40
19300: PUSH
19301: LD_EXP 54
19305: AND
19306: IFFALSE 19404
19308: GO 19310
19310: DISABLE
19311: LD_INT 0
19313: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19314: LD_ADDR_VAR 0 1
19318: PUSH
19319: LD_INT 22
19321: PUSH
19322: LD_OWVAR 2
19326: PUSH
19327: EMPTY
19328: LIST
19329: LIST
19330: PUSH
19331: LD_INT 21
19333: PUSH
19334: LD_INT 1
19336: PUSH
19337: EMPTY
19338: LIST
19339: LIST
19340: PUSH
19341: EMPTY
19342: LIST
19343: LIST
19344: PPUSH
19345: CALL_OW 69
19349: ST_TO_ADDR
// if not tmp then
19350: LD_VAR 0 1
19354: NOT
19355: IFFALSE 19359
// exit ;
19357: GO 19404
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
19359: LD_VAR 0 1
19363: PUSH
19364: LD_INT 1
19366: PPUSH
19367: LD_VAR 0 1
19371: PPUSH
19372: CALL_OW 12
19376: ARRAY
19377: PPUSH
19378: LD_INT 1
19380: PPUSH
19381: LD_INT 4
19383: PPUSH
19384: CALL_OW 12
19388: PPUSH
19389: LD_INT 3000
19391: PPUSH
19392: LD_INT 9000
19394: PPUSH
19395: CALL_OW 12
19399: PPUSH
19400: CALL_OW 492
// end ;
19404: PPOPN 1
19406: END
// every 0 0$1 trigger StreamModeActive and sDepot do
19407: LD_EXP 40
19411: PUSH
19412: LD_EXP 55
19416: AND
19417: IFFALSE 19437
19419: GO 19421
19421: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
19422: LD_INT 1
19424: PPUSH
19425: LD_OWVAR 2
19429: PPUSH
19430: LD_INT 0
19432: PPUSH
19433: CALL_OW 324
19437: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
19438: LD_EXP 40
19442: PUSH
19443: LD_EXP 56
19447: AND
19448: IFFALSE 19531
19450: GO 19452
19452: DISABLE
19453: LD_INT 0
19455: PPUSH
19456: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
19457: LD_ADDR_VAR 0 2
19461: PUSH
19462: LD_INT 22
19464: PUSH
19465: LD_OWVAR 2
19469: PUSH
19470: EMPTY
19471: LIST
19472: LIST
19473: PUSH
19474: LD_INT 21
19476: PUSH
19477: LD_INT 3
19479: PUSH
19480: EMPTY
19481: LIST
19482: LIST
19483: PUSH
19484: EMPTY
19485: LIST
19486: LIST
19487: PPUSH
19488: CALL_OW 69
19492: ST_TO_ADDR
// if not tmp then
19493: LD_VAR 0 2
19497: NOT
19498: IFFALSE 19502
// exit ;
19500: GO 19531
// for i in tmp do
19502: LD_ADDR_VAR 0 1
19506: PUSH
19507: LD_VAR 0 2
19511: PUSH
19512: FOR_IN
19513: IFFALSE 19529
// SetBLevel ( i , 10 ) ;
19515: LD_VAR 0 1
19519: PPUSH
19520: LD_INT 10
19522: PPUSH
19523: CALL_OW 241
19527: GO 19512
19529: POP
19530: POP
// end ;
19531: PPOPN 2
19533: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
19534: LD_EXP 40
19538: PUSH
19539: LD_EXP 57
19543: AND
19544: IFFALSE 19655
19546: GO 19548
19548: DISABLE
19549: LD_INT 0
19551: PPUSH
19552: PPUSH
19553: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19554: LD_ADDR_VAR 0 3
19558: PUSH
19559: LD_INT 22
19561: PUSH
19562: LD_OWVAR 2
19566: PUSH
19567: EMPTY
19568: LIST
19569: LIST
19570: PUSH
19571: LD_INT 25
19573: PUSH
19574: LD_INT 1
19576: PUSH
19577: EMPTY
19578: LIST
19579: LIST
19580: PUSH
19581: EMPTY
19582: LIST
19583: LIST
19584: PPUSH
19585: CALL_OW 69
19589: ST_TO_ADDR
// if not tmp then
19590: LD_VAR 0 3
19594: NOT
19595: IFFALSE 19599
// exit ;
19597: GO 19655
// un := tmp [ rand ( 1 , tmp ) ] ;
19599: LD_ADDR_VAR 0 2
19603: PUSH
19604: LD_VAR 0 3
19608: PUSH
19609: LD_INT 1
19611: PPUSH
19612: LD_VAR 0 3
19616: PPUSH
19617: CALL_OW 12
19621: ARRAY
19622: ST_TO_ADDR
// if Crawls ( un ) then
19623: LD_VAR 0 2
19627: PPUSH
19628: CALL_OW 318
19632: IFFALSE 19643
// ComWalk ( un ) ;
19634: LD_VAR 0 2
19638: PPUSH
19639: CALL_OW 138
// SetClass ( un , class_sniper ) ;
19643: LD_VAR 0 2
19647: PPUSH
19648: LD_INT 5
19650: PPUSH
19651: CALL_OW 336
// end ;
19655: PPOPN 3
19657: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
19658: LD_EXP 40
19662: PUSH
19663: LD_EXP 58
19667: AND
19668: PUSH
19669: LD_OWVAR 67
19673: PUSH
19674: LD_INT 4
19676: LESS
19677: AND
19678: IFFALSE 19697
19680: GO 19682
19682: DISABLE
// begin Difficulty := Difficulty + 1 ;
19683: LD_ADDR_OWVAR 67
19687: PUSH
19688: LD_OWVAR 67
19692: PUSH
19693: LD_INT 1
19695: PLUS
19696: ST_TO_ADDR
// end ;
19697: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
19698: LD_EXP 40
19702: PUSH
19703: LD_EXP 59
19707: AND
19708: IFFALSE 19811
19710: GO 19712
19712: DISABLE
19713: LD_INT 0
19715: PPUSH
// begin for i := 1 to 5 do
19716: LD_ADDR_VAR 0 1
19720: PUSH
19721: DOUBLE
19722: LD_INT 1
19724: DEC
19725: ST_TO_ADDR
19726: LD_INT 5
19728: PUSH
19729: FOR_TO
19730: IFFALSE 19809
// begin uc_nation := nation_nature ;
19732: LD_ADDR_OWVAR 21
19736: PUSH
19737: LD_INT 0
19739: ST_TO_ADDR
// uc_side := 0 ;
19740: LD_ADDR_OWVAR 20
19744: PUSH
19745: LD_INT 0
19747: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19748: LD_ADDR_OWVAR 29
19752: PUSH
19753: LD_INT 12
19755: PUSH
19756: LD_INT 12
19758: PUSH
19759: EMPTY
19760: LIST
19761: LIST
19762: ST_TO_ADDR
// hc_agressivity := 20 ;
19763: LD_ADDR_OWVAR 35
19767: PUSH
19768: LD_INT 20
19770: ST_TO_ADDR
// hc_class := class_tiger ;
19771: LD_ADDR_OWVAR 28
19775: PUSH
19776: LD_INT 14
19778: ST_TO_ADDR
// hc_gallery :=  ;
19779: LD_ADDR_OWVAR 33
19783: PUSH
19784: LD_STRING 
19786: ST_TO_ADDR
// hc_name :=  ;
19787: LD_ADDR_OWVAR 26
19791: PUSH
19792: LD_STRING 
19794: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
19795: CALL_OW 44
19799: PPUSH
19800: LD_INT 0
19802: PPUSH
19803: CALL_OW 51
// end ;
19807: GO 19729
19809: POP
19810: POP
// end ;
19811: PPOPN 1
19813: END
// every 0 0$1 trigger StreamModeActive and sBomb do
19814: LD_EXP 40
19818: PUSH
19819: LD_EXP 60
19823: AND
19824: IFFALSE 19833
19826: GO 19828
19828: DISABLE
// StreamSibBomb ;
19829: CALL 19834 0 0
19833: END
// export function StreamSibBomb ; var i , x , y ; begin
19834: LD_INT 0
19836: PPUSH
19837: PPUSH
19838: PPUSH
19839: PPUSH
// result := false ;
19840: LD_ADDR_VAR 0 1
19844: PUSH
19845: LD_INT 0
19847: ST_TO_ADDR
// for i := 1 to 16 do
19848: LD_ADDR_VAR 0 2
19852: PUSH
19853: DOUBLE
19854: LD_INT 1
19856: DEC
19857: ST_TO_ADDR
19858: LD_INT 16
19860: PUSH
19861: FOR_TO
19862: IFFALSE 20061
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
19864: LD_ADDR_VAR 0 3
19868: PUSH
19869: LD_INT 10
19871: PUSH
19872: LD_INT 20
19874: PUSH
19875: LD_INT 30
19877: PUSH
19878: LD_INT 40
19880: PUSH
19881: LD_INT 50
19883: PUSH
19884: LD_INT 60
19886: PUSH
19887: LD_INT 70
19889: PUSH
19890: LD_INT 80
19892: PUSH
19893: LD_INT 90
19895: PUSH
19896: LD_INT 100
19898: PUSH
19899: LD_INT 110
19901: PUSH
19902: LD_INT 120
19904: PUSH
19905: LD_INT 130
19907: PUSH
19908: LD_INT 140
19910: PUSH
19911: LD_INT 150
19913: PUSH
19914: EMPTY
19915: LIST
19916: LIST
19917: LIST
19918: LIST
19919: LIST
19920: LIST
19921: LIST
19922: LIST
19923: LIST
19924: LIST
19925: LIST
19926: LIST
19927: LIST
19928: LIST
19929: LIST
19930: PUSH
19931: LD_INT 1
19933: PPUSH
19934: LD_INT 15
19936: PPUSH
19937: CALL_OW 12
19941: ARRAY
19942: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
19943: LD_ADDR_VAR 0 4
19947: PUSH
19948: LD_INT 10
19950: PUSH
19951: LD_INT 20
19953: PUSH
19954: LD_INT 30
19956: PUSH
19957: LD_INT 40
19959: PUSH
19960: LD_INT 50
19962: PUSH
19963: LD_INT 60
19965: PUSH
19966: LD_INT 70
19968: PUSH
19969: LD_INT 80
19971: PUSH
19972: LD_INT 90
19974: PUSH
19975: LD_INT 100
19977: PUSH
19978: LD_INT 110
19980: PUSH
19981: LD_INT 120
19983: PUSH
19984: LD_INT 130
19986: PUSH
19987: LD_INT 140
19989: PUSH
19990: LD_INT 150
19992: PUSH
19993: EMPTY
19994: LIST
19995: LIST
19996: LIST
19997: LIST
19998: LIST
19999: LIST
20000: LIST
20001: LIST
20002: LIST
20003: LIST
20004: LIST
20005: LIST
20006: LIST
20007: LIST
20008: LIST
20009: PUSH
20010: LD_INT 1
20012: PPUSH
20013: LD_INT 15
20015: PPUSH
20016: CALL_OW 12
20020: ARRAY
20021: ST_TO_ADDR
// if ValidHex ( x , y ) then
20022: LD_VAR 0 3
20026: PPUSH
20027: LD_VAR 0 4
20031: PPUSH
20032: CALL_OW 488
20036: IFFALSE 20059
// begin result := [ x , y ] ;
20038: LD_ADDR_VAR 0 1
20042: PUSH
20043: LD_VAR 0 3
20047: PUSH
20048: LD_VAR 0 4
20052: PUSH
20053: EMPTY
20054: LIST
20055: LIST
20056: ST_TO_ADDR
// break ;
20057: GO 20061
// end ; end ;
20059: GO 19861
20061: POP
20062: POP
// if result then
20063: LD_VAR 0 1
20067: IFFALSE 20127
// begin ToLua ( playSibBomb() ) ;
20069: LD_STRING playSibBomb()
20071: PPUSH
20072: CALL_OW 559
// wait ( 0 0$14 ) ;
20076: LD_INT 490
20078: PPUSH
20079: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
20083: LD_VAR 0 1
20087: PUSH
20088: LD_INT 1
20090: ARRAY
20091: PPUSH
20092: LD_VAR 0 1
20096: PUSH
20097: LD_INT 2
20099: ARRAY
20100: PPUSH
20101: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
20105: LD_VAR 0 1
20109: PUSH
20110: LD_INT 1
20112: ARRAY
20113: PPUSH
20114: LD_VAR 0 1
20118: PUSH
20119: LD_INT 2
20121: ARRAY
20122: PPUSH
20123: CALL_OW 429
// end ; end ;
20127: LD_VAR 0 1
20131: RET
// every 0 0$1 trigger StreamModeActive and sReset do
20132: LD_EXP 40
20136: PUSH
20137: LD_EXP 62
20141: AND
20142: IFFALSE 20154
20144: GO 20146
20146: DISABLE
// YouLost (  ) ;
20147: LD_STRING 
20149: PPUSH
20150: CALL_OW 104
20154: END
// every 0 0$1 trigger StreamModeActive and sFog do
20155: LD_EXP 40
20159: PUSH
20160: LD_EXP 61
20164: AND
20165: IFFALSE 20179
20167: GO 20169
20169: DISABLE
// FogOff ( your_side ) ;
20170: LD_OWVAR 2
20174: PPUSH
20175: CALL_OW 344
20179: END
// every 0 0$1 trigger StreamModeActive and sSun do
20180: LD_EXP 40
20184: PUSH
20185: LD_EXP 63
20189: AND
20190: IFFALSE 20218
20192: GO 20194
20194: DISABLE
// begin solar_recharge_percent := 0 ;
20195: LD_ADDR_OWVAR 79
20199: PUSH
20200: LD_INT 0
20202: ST_TO_ADDR
// wait ( 5 5$00 ) ;
20203: LD_INT 10500
20205: PPUSH
20206: CALL_OW 67
// solar_recharge_percent := 100 ;
20210: LD_ADDR_OWVAR 79
20214: PUSH
20215: LD_INT 100
20217: ST_TO_ADDR
// end ;
20218: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
20219: LD_EXP 40
20223: PUSH
20224: LD_EXP 64
20228: AND
20229: IFFALSE 20468
20231: GO 20233
20233: DISABLE
20234: LD_INT 0
20236: PPUSH
20237: PPUSH
20238: PPUSH
// begin tmp := [ ] ;
20239: LD_ADDR_VAR 0 3
20243: PUSH
20244: EMPTY
20245: ST_TO_ADDR
// for i := 1 to 6 do
20246: LD_ADDR_VAR 0 1
20250: PUSH
20251: DOUBLE
20252: LD_INT 1
20254: DEC
20255: ST_TO_ADDR
20256: LD_INT 6
20258: PUSH
20259: FOR_TO
20260: IFFALSE 20365
// begin uc_nation := nation_nature ;
20262: LD_ADDR_OWVAR 21
20266: PUSH
20267: LD_INT 0
20269: ST_TO_ADDR
// uc_side := 0 ;
20270: LD_ADDR_OWVAR 20
20274: PUSH
20275: LD_INT 0
20277: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
20278: LD_ADDR_OWVAR 29
20282: PUSH
20283: LD_INT 12
20285: PUSH
20286: LD_INT 12
20288: PUSH
20289: EMPTY
20290: LIST
20291: LIST
20292: ST_TO_ADDR
// hc_agressivity := 20 ;
20293: LD_ADDR_OWVAR 35
20297: PUSH
20298: LD_INT 20
20300: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
20301: LD_ADDR_OWVAR 28
20305: PUSH
20306: LD_INT 17
20308: ST_TO_ADDR
// hc_gallery :=  ;
20309: LD_ADDR_OWVAR 33
20313: PUSH
20314: LD_STRING 
20316: ST_TO_ADDR
// hc_name :=  ;
20317: LD_ADDR_OWVAR 26
20321: PUSH
20322: LD_STRING 
20324: ST_TO_ADDR
// un := CreateHuman ;
20325: LD_ADDR_VAR 0 2
20329: PUSH
20330: CALL_OW 44
20334: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
20335: LD_VAR 0 2
20339: PPUSH
20340: LD_INT 1
20342: PPUSH
20343: CALL_OW 51
// tmp := tmp ^ un ;
20347: LD_ADDR_VAR 0 3
20351: PUSH
20352: LD_VAR 0 3
20356: PUSH
20357: LD_VAR 0 2
20361: ADD
20362: ST_TO_ADDR
// end ;
20363: GO 20259
20365: POP
20366: POP
// repeat wait ( 0 0$1 ) ;
20367: LD_INT 35
20369: PPUSH
20370: CALL_OW 67
// for un in tmp do
20374: LD_ADDR_VAR 0 2
20378: PUSH
20379: LD_VAR 0 3
20383: PUSH
20384: FOR_IN
20385: IFFALSE 20459
// begin if IsDead ( un ) then
20387: LD_VAR 0 2
20391: PPUSH
20392: CALL_OW 301
20396: IFFALSE 20416
// begin tmp := tmp diff un ;
20398: LD_ADDR_VAR 0 3
20402: PUSH
20403: LD_VAR 0 3
20407: PUSH
20408: LD_VAR 0 2
20412: DIFF
20413: ST_TO_ADDR
// continue ;
20414: GO 20384
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
20416: LD_VAR 0 2
20420: PPUSH
20421: LD_INT 3
20423: PUSH
20424: LD_INT 22
20426: PUSH
20427: LD_INT 0
20429: PUSH
20430: EMPTY
20431: LIST
20432: LIST
20433: PUSH
20434: EMPTY
20435: LIST
20436: LIST
20437: PPUSH
20438: CALL_OW 69
20442: PPUSH
20443: LD_VAR 0 2
20447: PPUSH
20448: CALL_OW 74
20452: PPUSH
20453: CALL_OW 115
// end ;
20457: GO 20384
20459: POP
20460: POP
// until not tmp ;
20461: LD_VAR 0 3
20465: NOT
20466: IFFALSE 20367
// end ;
20468: PPOPN 3
20470: END
// every 0 0$1 trigger StreamModeActive and sTroll do
20471: LD_EXP 40
20475: PUSH
20476: LD_EXP 65
20480: AND
20481: IFFALSE 20535
20483: GO 20485
20485: DISABLE
// begin ToLua ( displayTroll(); ) ;
20486: LD_STRING displayTroll();
20488: PPUSH
20489: CALL_OW 559
// wait ( 3 3$00 ) ;
20493: LD_INT 6300
20495: PPUSH
20496: CALL_OW 67
// ToLua ( hideTroll(); ) ;
20500: LD_STRING hideTroll();
20502: PPUSH
20503: CALL_OW 559
// wait ( 1 1$00 ) ;
20507: LD_INT 2100
20509: PPUSH
20510: CALL_OW 67
// ToLua ( displayTroll(); ) ;
20514: LD_STRING displayTroll();
20516: PPUSH
20517: CALL_OW 559
// wait ( 1 1$00 ) ;
20521: LD_INT 2100
20523: PPUSH
20524: CALL_OW 67
// ToLua ( hideTroll(); ) ;
20528: LD_STRING hideTroll();
20530: PPUSH
20531: CALL_OW 559
// end ;
20535: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
20536: LD_EXP 40
20540: PUSH
20541: LD_EXP 66
20545: AND
20546: IFFALSE 20609
20548: GO 20550
20550: DISABLE
20551: LD_INT 0
20553: PPUSH
// begin p := 0 ;
20554: LD_ADDR_VAR 0 1
20558: PUSH
20559: LD_INT 0
20561: ST_TO_ADDR
// repeat game_speed := 1 ;
20562: LD_ADDR_OWVAR 65
20566: PUSH
20567: LD_INT 1
20569: ST_TO_ADDR
// wait ( 0 0$1 ) ;
20570: LD_INT 35
20572: PPUSH
20573: CALL_OW 67
// p := p + 1 ;
20577: LD_ADDR_VAR 0 1
20581: PUSH
20582: LD_VAR 0 1
20586: PUSH
20587: LD_INT 1
20589: PLUS
20590: ST_TO_ADDR
// until p >= 60 ;
20591: LD_VAR 0 1
20595: PUSH
20596: LD_INT 60
20598: GREATEREQUAL
20599: IFFALSE 20562
// game_speed := 4 ;
20601: LD_ADDR_OWVAR 65
20605: PUSH
20606: LD_INT 4
20608: ST_TO_ADDR
// end ;
20609: PPOPN 1
20611: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
20612: LD_EXP 40
20616: PUSH
20617: LD_EXP 67
20621: AND
20622: IFFALSE 20768
20624: GO 20626
20626: DISABLE
20627: LD_INT 0
20629: PPUSH
20630: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20631: LD_ADDR_VAR 0 1
20635: PUSH
20636: LD_INT 22
20638: PUSH
20639: LD_OWVAR 2
20643: PUSH
20644: EMPTY
20645: LIST
20646: LIST
20647: PUSH
20648: LD_INT 2
20650: PUSH
20651: LD_INT 30
20653: PUSH
20654: LD_INT 0
20656: PUSH
20657: EMPTY
20658: LIST
20659: LIST
20660: PUSH
20661: LD_INT 30
20663: PUSH
20664: LD_INT 1
20666: PUSH
20667: EMPTY
20668: LIST
20669: LIST
20670: PUSH
20671: EMPTY
20672: LIST
20673: LIST
20674: LIST
20675: PUSH
20676: EMPTY
20677: LIST
20678: LIST
20679: PPUSH
20680: CALL_OW 69
20684: ST_TO_ADDR
// if not depot then
20685: LD_VAR 0 1
20689: NOT
20690: IFFALSE 20694
// exit ;
20692: GO 20768
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
20694: LD_ADDR_VAR 0 2
20698: PUSH
20699: LD_VAR 0 1
20703: PUSH
20704: LD_INT 1
20706: PPUSH
20707: LD_VAR 0 1
20711: PPUSH
20712: CALL_OW 12
20716: ARRAY
20717: PPUSH
20718: CALL_OW 274
20722: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
20723: LD_VAR 0 2
20727: PPUSH
20728: LD_INT 1
20730: PPUSH
20731: LD_INT 0
20733: PPUSH
20734: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
20738: LD_VAR 0 2
20742: PPUSH
20743: LD_INT 2
20745: PPUSH
20746: LD_INT 0
20748: PPUSH
20749: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
20753: LD_VAR 0 2
20757: PPUSH
20758: LD_INT 3
20760: PPUSH
20761: LD_INT 0
20763: PPUSH
20764: CALL_OW 277
// end ;
20768: PPOPN 2
20770: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
20771: LD_EXP 40
20775: PUSH
20776: LD_EXP 68
20780: AND
20781: IFFALSE 20878
20783: GO 20785
20785: DISABLE
20786: LD_INT 0
20788: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20789: LD_ADDR_VAR 0 1
20793: PUSH
20794: LD_INT 22
20796: PUSH
20797: LD_OWVAR 2
20801: PUSH
20802: EMPTY
20803: LIST
20804: LIST
20805: PUSH
20806: LD_INT 21
20808: PUSH
20809: LD_INT 1
20811: PUSH
20812: EMPTY
20813: LIST
20814: LIST
20815: PUSH
20816: LD_INT 3
20818: PUSH
20819: LD_INT 23
20821: PUSH
20822: LD_INT 0
20824: PUSH
20825: EMPTY
20826: LIST
20827: LIST
20828: PUSH
20829: EMPTY
20830: LIST
20831: LIST
20832: PUSH
20833: EMPTY
20834: LIST
20835: LIST
20836: LIST
20837: PPUSH
20838: CALL_OW 69
20842: ST_TO_ADDR
// if not tmp then
20843: LD_VAR 0 1
20847: NOT
20848: IFFALSE 20852
// exit ;
20850: GO 20878
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
20852: LD_VAR 0 1
20856: PUSH
20857: LD_INT 1
20859: PPUSH
20860: LD_VAR 0 1
20864: PPUSH
20865: CALL_OW 12
20869: ARRAY
20870: PPUSH
20871: LD_INT 200
20873: PPUSH
20874: CALL_OW 234
// end ;
20878: PPOPN 1
20880: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
20881: LD_EXP 40
20885: PUSH
20886: LD_EXP 69
20890: AND
20891: IFFALSE 20970
20893: GO 20895
20895: DISABLE
20896: LD_INT 0
20898: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
20899: LD_ADDR_VAR 0 1
20903: PUSH
20904: LD_INT 22
20906: PUSH
20907: LD_OWVAR 2
20911: PUSH
20912: EMPTY
20913: LIST
20914: LIST
20915: PUSH
20916: LD_INT 21
20918: PUSH
20919: LD_INT 2
20921: PUSH
20922: EMPTY
20923: LIST
20924: LIST
20925: PUSH
20926: EMPTY
20927: LIST
20928: LIST
20929: PPUSH
20930: CALL_OW 69
20934: ST_TO_ADDR
// if not tmp then
20935: LD_VAR 0 1
20939: NOT
20940: IFFALSE 20944
// exit ;
20942: GO 20970
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
20944: LD_VAR 0 1
20948: PUSH
20949: LD_INT 1
20951: PPUSH
20952: LD_VAR 0 1
20956: PPUSH
20957: CALL_OW 12
20961: ARRAY
20962: PPUSH
20963: LD_INT 60
20965: PPUSH
20966: CALL_OW 234
// end ;
20970: PPOPN 1
20972: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
20973: LD_EXP 40
20977: PUSH
20978: LD_EXP 70
20982: AND
20983: IFFALSE 21082
20985: GO 20987
20987: DISABLE
20988: LD_INT 0
20990: PPUSH
20991: PPUSH
// begin enable ;
20992: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
20993: LD_ADDR_VAR 0 1
20997: PUSH
20998: LD_INT 22
21000: PUSH
21001: LD_OWVAR 2
21005: PUSH
21006: EMPTY
21007: LIST
21008: LIST
21009: PUSH
21010: LD_INT 61
21012: PUSH
21013: EMPTY
21014: LIST
21015: PUSH
21016: LD_INT 33
21018: PUSH
21019: LD_INT 2
21021: PUSH
21022: EMPTY
21023: LIST
21024: LIST
21025: PUSH
21026: EMPTY
21027: LIST
21028: LIST
21029: LIST
21030: PPUSH
21031: CALL_OW 69
21035: ST_TO_ADDR
// if not tmp then
21036: LD_VAR 0 1
21040: NOT
21041: IFFALSE 21045
// exit ;
21043: GO 21082
// for i in tmp do
21045: LD_ADDR_VAR 0 2
21049: PUSH
21050: LD_VAR 0 1
21054: PUSH
21055: FOR_IN
21056: IFFALSE 21080
// if IsControledBy ( i ) then
21058: LD_VAR 0 2
21062: PPUSH
21063: CALL_OW 312
21067: IFFALSE 21078
// ComUnlink ( i ) ;
21069: LD_VAR 0 2
21073: PPUSH
21074: CALL_OW 136
21078: GO 21055
21080: POP
21081: POP
// end ;
21082: PPOPN 2
21084: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
21085: LD_EXP 40
21089: PUSH
21090: LD_EXP 71
21094: AND
21095: IFFALSE 21235
21097: GO 21099
21099: DISABLE
21100: LD_INT 0
21102: PPUSH
21103: PPUSH
// begin ToLua ( displayPowell(); ) ;
21104: LD_STRING displayPowell();
21106: PPUSH
21107: CALL_OW 559
// uc_side := 0 ;
21111: LD_ADDR_OWVAR 20
21115: PUSH
21116: LD_INT 0
21118: ST_TO_ADDR
// uc_nation := 2 ;
21119: LD_ADDR_OWVAR 21
21123: PUSH
21124: LD_INT 2
21126: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
21127: LD_ADDR_OWVAR 37
21131: PUSH
21132: LD_INT 14
21134: ST_TO_ADDR
// vc_engine := engine_siberite ;
21135: LD_ADDR_OWVAR 39
21139: PUSH
21140: LD_INT 3
21142: ST_TO_ADDR
// vc_control := control_apeman ;
21143: LD_ADDR_OWVAR 38
21147: PUSH
21148: LD_INT 5
21150: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
21151: LD_ADDR_OWVAR 40
21155: PUSH
21156: LD_INT 29
21158: ST_TO_ADDR
// un := CreateVehicle ;
21159: LD_ADDR_VAR 0 2
21163: PUSH
21164: CALL_OW 45
21168: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21169: LD_VAR 0 2
21173: PPUSH
21174: LD_INT 1
21176: PPUSH
21177: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
21181: LD_INT 35
21183: PPUSH
21184: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
21188: LD_VAR 0 2
21192: PPUSH
21193: LD_INT 22
21195: PUSH
21196: LD_OWVAR 2
21200: PUSH
21201: EMPTY
21202: LIST
21203: LIST
21204: PPUSH
21205: CALL_OW 69
21209: PPUSH
21210: LD_VAR 0 2
21214: PPUSH
21215: CALL_OW 74
21219: PPUSH
21220: CALL_OW 115
// until IsDead ( un ) ;
21224: LD_VAR 0 2
21228: PPUSH
21229: CALL_OW 301
21233: IFFALSE 21181
// end ;
21235: PPOPN 2
21237: END
// every 0 0$1 trigger StreamModeActive and sStu do
21238: LD_EXP 40
21242: PUSH
21243: LD_EXP 79
21247: AND
21248: IFFALSE 21264
21250: GO 21252
21252: DISABLE
// begin ToLua ( displayStucuk(); ) ;
21253: LD_STRING displayStucuk();
21255: PPUSH
21256: CALL_OW 559
// ResetFog ;
21260: CALL_OW 335
// end ;
21264: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
21265: LD_EXP 40
21269: PUSH
21270: LD_EXP 72
21274: AND
21275: IFFALSE 21416
21277: GO 21279
21279: DISABLE
21280: LD_INT 0
21282: PPUSH
21283: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
21284: LD_ADDR_VAR 0 2
21288: PUSH
21289: LD_INT 22
21291: PUSH
21292: LD_OWVAR 2
21296: PUSH
21297: EMPTY
21298: LIST
21299: LIST
21300: PUSH
21301: LD_INT 21
21303: PUSH
21304: LD_INT 1
21306: PUSH
21307: EMPTY
21308: LIST
21309: LIST
21310: PUSH
21311: EMPTY
21312: LIST
21313: LIST
21314: PPUSH
21315: CALL_OW 69
21319: ST_TO_ADDR
// if not tmp then
21320: LD_VAR 0 2
21324: NOT
21325: IFFALSE 21329
// exit ;
21327: GO 21416
// un := tmp [ rand ( 1 , tmp ) ] ;
21329: LD_ADDR_VAR 0 1
21333: PUSH
21334: LD_VAR 0 2
21338: PUSH
21339: LD_INT 1
21341: PPUSH
21342: LD_VAR 0 2
21346: PPUSH
21347: CALL_OW 12
21351: ARRAY
21352: ST_TO_ADDR
// SetSide ( un , 0 ) ;
21353: LD_VAR 0 1
21357: PPUSH
21358: LD_INT 0
21360: PPUSH
21361: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
21365: LD_VAR 0 1
21369: PPUSH
21370: LD_OWVAR 3
21374: PUSH
21375: LD_VAR 0 1
21379: DIFF
21380: PPUSH
21381: LD_VAR 0 1
21385: PPUSH
21386: CALL_OW 74
21390: PPUSH
21391: CALL_OW 115
// wait ( 0 0$20 ) ;
21395: LD_INT 700
21397: PPUSH
21398: CALL_OW 67
// SetSide ( un , your_side ) ;
21402: LD_VAR 0 1
21406: PPUSH
21407: LD_OWVAR 2
21411: PPUSH
21412: CALL_OW 235
// end ;
21416: PPOPN 2
21418: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
21419: LD_EXP 40
21423: PUSH
21424: LD_EXP 73
21428: AND
21429: IFFALSE 21535
21431: GO 21433
21433: DISABLE
21434: LD_INT 0
21436: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21437: LD_ADDR_VAR 0 1
21441: PUSH
21442: LD_INT 22
21444: PUSH
21445: LD_OWVAR 2
21449: PUSH
21450: EMPTY
21451: LIST
21452: LIST
21453: PUSH
21454: LD_INT 2
21456: PUSH
21457: LD_INT 30
21459: PUSH
21460: LD_INT 0
21462: PUSH
21463: EMPTY
21464: LIST
21465: LIST
21466: PUSH
21467: LD_INT 30
21469: PUSH
21470: LD_INT 1
21472: PUSH
21473: EMPTY
21474: LIST
21475: LIST
21476: PUSH
21477: EMPTY
21478: LIST
21479: LIST
21480: LIST
21481: PUSH
21482: EMPTY
21483: LIST
21484: LIST
21485: PPUSH
21486: CALL_OW 69
21490: ST_TO_ADDR
// if not depot then
21491: LD_VAR 0 1
21495: NOT
21496: IFFALSE 21500
// exit ;
21498: GO 21535
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
21500: LD_VAR 0 1
21504: PUSH
21505: LD_INT 1
21507: ARRAY
21508: PPUSH
21509: CALL_OW 250
21513: PPUSH
21514: LD_VAR 0 1
21518: PUSH
21519: LD_INT 1
21521: ARRAY
21522: PPUSH
21523: CALL_OW 251
21527: PPUSH
21528: LD_INT 70
21530: PPUSH
21531: CALL_OW 495
// end ;
21535: PPOPN 1
21537: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
21538: LD_EXP 40
21542: PUSH
21543: LD_EXP 74
21547: AND
21548: IFFALSE 21759
21550: GO 21552
21552: DISABLE
21553: LD_INT 0
21555: PPUSH
21556: PPUSH
21557: PPUSH
21558: PPUSH
21559: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
21560: LD_ADDR_VAR 0 5
21564: PUSH
21565: LD_INT 22
21567: PUSH
21568: LD_OWVAR 2
21572: PUSH
21573: EMPTY
21574: LIST
21575: LIST
21576: PUSH
21577: LD_INT 21
21579: PUSH
21580: LD_INT 1
21582: PUSH
21583: EMPTY
21584: LIST
21585: LIST
21586: PUSH
21587: EMPTY
21588: LIST
21589: LIST
21590: PPUSH
21591: CALL_OW 69
21595: ST_TO_ADDR
// if not tmp then
21596: LD_VAR 0 5
21600: NOT
21601: IFFALSE 21605
// exit ;
21603: GO 21759
// for i in tmp do
21605: LD_ADDR_VAR 0 1
21609: PUSH
21610: LD_VAR 0 5
21614: PUSH
21615: FOR_IN
21616: IFFALSE 21757
// begin d := rand ( 0 , 5 ) ;
21618: LD_ADDR_VAR 0 4
21622: PUSH
21623: LD_INT 0
21625: PPUSH
21626: LD_INT 5
21628: PPUSH
21629: CALL_OW 12
21633: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
21634: LD_ADDR_VAR 0 2
21638: PUSH
21639: LD_VAR 0 1
21643: PPUSH
21644: CALL_OW 250
21648: PPUSH
21649: LD_VAR 0 4
21653: PPUSH
21654: LD_INT 3
21656: PPUSH
21657: LD_INT 12
21659: PPUSH
21660: CALL_OW 12
21664: PPUSH
21665: CALL_OW 272
21669: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
21670: LD_ADDR_VAR 0 3
21674: PUSH
21675: LD_VAR 0 1
21679: PPUSH
21680: CALL_OW 251
21684: PPUSH
21685: LD_VAR 0 4
21689: PPUSH
21690: LD_INT 3
21692: PPUSH
21693: LD_INT 12
21695: PPUSH
21696: CALL_OW 12
21700: PPUSH
21701: CALL_OW 273
21705: ST_TO_ADDR
// if ValidHex ( x , y ) then
21706: LD_VAR 0 2
21710: PPUSH
21711: LD_VAR 0 3
21715: PPUSH
21716: CALL_OW 488
21720: IFFALSE 21755
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
21722: LD_VAR 0 1
21726: PPUSH
21727: LD_VAR 0 2
21731: PPUSH
21732: LD_VAR 0 3
21736: PPUSH
21737: LD_INT 3
21739: PPUSH
21740: LD_INT 6
21742: PPUSH
21743: CALL_OW 12
21747: PPUSH
21748: LD_INT 1
21750: PPUSH
21751: CALL_OW 483
// end ;
21755: GO 21615
21757: POP
21758: POP
// end ;
21759: PPOPN 5
21761: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
21762: LD_EXP 40
21766: PUSH
21767: LD_EXP 75
21771: AND
21772: IFFALSE 21866
21774: GO 21776
21776: DISABLE
21777: LD_INT 0
21779: PPUSH
21780: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
21781: LD_ADDR_VAR 0 2
21785: PUSH
21786: LD_INT 22
21788: PUSH
21789: LD_OWVAR 2
21793: PUSH
21794: EMPTY
21795: LIST
21796: LIST
21797: PUSH
21798: LD_INT 32
21800: PUSH
21801: LD_INT 1
21803: PUSH
21804: EMPTY
21805: LIST
21806: LIST
21807: PUSH
21808: LD_INT 21
21810: PUSH
21811: LD_INT 2
21813: PUSH
21814: EMPTY
21815: LIST
21816: LIST
21817: PUSH
21818: EMPTY
21819: LIST
21820: LIST
21821: LIST
21822: PPUSH
21823: CALL_OW 69
21827: ST_TO_ADDR
// if not tmp then
21828: LD_VAR 0 2
21832: NOT
21833: IFFALSE 21837
// exit ;
21835: GO 21866
// for i in tmp do
21837: LD_ADDR_VAR 0 1
21841: PUSH
21842: LD_VAR 0 2
21846: PUSH
21847: FOR_IN
21848: IFFALSE 21864
// SetFuel ( i , 0 ) ;
21850: LD_VAR 0 1
21854: PPUSH
21855: LD_INT 0
21857: PPUSH
21858: CALL_OW 240
21862: GO 21847
21864: POP
21865: POP
// end ;
21866: PPOPN 2
21868: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
21869: LD_EXP 40
21873: PUSH
21874: LD_EXP 76
21878: AND
21879: IFFALSE 21945
21881: GO 21883
21883: DISABLE
21884: LD_INT 0
21886: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
21887: LD_ADDR_VAR 0 1
21891: PUSH
21892: LD_INT 22
21894: PUSH
21895: LD_OWVAR 2
21899: PUSH
21900: EMPTY
21901: LIST
21902: LIST
21903: PUSH
21904: LD_INT 30
21906: PUSH
21907: LD_INT 29
21909: PUSH
21910: EMPTY
21911: LIST
21912: LIST
21913: PUSH
21914: EMPTY
21915: LIST
21916: LIST
21917: PPUSH
21918: CALL_OW 69
21922: ST_TO_ADDR
// if not tmp then
21923: LD_VAR 0 1
21927: NOT
21928: IFFALSE 21932
// exit ;
21930: GO 21945
// DestroyUnit ( tmp [ 1 ] ) ;
21932: LD_VAR 0 1
21936: PUSH
21937: LD_INT 1
21939: ARRAY
21940: PPUSH
21941: CALL_OW 65
// end ;
21945: PPOPN 1
21947: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
21948: LD_EXP 40
21952: PUSH
21953: LD_EXP 78
21957: AND
21958: IFFALSE 22087
21960: GO 21962
21962: DISABLE
21963: LD_INT 0
21965: PPUSH
// begin uc_side := 0 ;
21966: LD_ADDR_OWVAR 20
21970: PUSH
21971: LD_INT 0
21973: ST_TO_ADDR
// uc_nation := nation_arabian ;
21974: LD_ADDR_OWVAR 21
21978: PUSH
21979: LD_INT 2
21981: ST_TO_ADDR
// hc_gallery :=  ;
21982: LD_ADDR_OWVAR 33
21986: PUSH
21987: LD_STRING 
21989: ST_TO_ADDR
// hc_name :=  ;
21990: LD_ADDR_OWVAR 26
21994: PUSH
21995: LD_STRING 
21997: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
21998: LD_INT 1
22000: PPUSH
22001: LD_INT 11
22003: PPUSH
22004: LD_INT 10
22006: PPUSH
22007: CALL_OW 380
// un := CreateHuman ;
22011: LD_ADDR_VAR 0 1
22015: PUSH
22016: CALL_OW 44
22020: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
22021: LD_VAR 0 1
22025: PPUSH
22026: LD_INT 1
22028: PPUSH
22029: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
22033: LD_INT 35
22035: PPUSH
22036: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
22040: LD_VAR 0 1
22044: PPUSH
22045: LD_INT 22
22047: PUSH
22048: LD_OWVAR 2
22052: PUSH
22053: EMPTY
22054: LIST
22055: LIST
22056: PPUSH
22057: CALL_OW 69
22061: PPUSH
22062: LD_VAR 0 1
22066: PPUSH
22067: CALL_OW 74
22071: PPUSH
22072: CALL_OW 115
// until IsDead ( un ) ;
22076: LD_VAR 0 1
22080: PPUSH
22081: CALL_OW 301
22085: IFFALSE 22033
// end ;
22087: PPOPN 1
22089: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
22090: LD_EXP 40
22094: PUSH
22095: LD_EXP 80
22099: AND
22100: IFFALSE 22112
22102: GO 22104
22104: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
22105: LD_STRING earthquake(getX(game), 0, 32)
22107: PPUSH
22108: CALL_OW 559
22112: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
22113: LD_EXP 40
22117: PUSH
22118: LD_EXP 81
22122: AND
22123: IFFALSE 22214
22125: GO 22127
22127: DISABLE
22128: LD_INT 0
22130: PPUSH
// begin enable ;
22131: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
22132: LD_ADDR_VAR 0 1
22136: PUSH
22137: LD_INT 22
22139: PUSH
22140: LD_OWVAR 2
22144: PUSH
22145: EMPTY
22146: LIST
22147: LIST
22148: PUSH
22149: LD_INT 21
22151: PUSH
22152: LD_INT 2
22154: PUSH
22155: EMPTY
22156: LIST
22157: LIST
22158: PUSH
22159: LD_INT 33
22161: PUSH
22162: LD_INT 3
22164: PUSH
22165: EMPTY
22166: LIST
22167: LIST
22168: PUSH
22169: EMPTY
22170: LIST
22171: LIST
22172: LIST
22173: PPUSH
22174: CALL_OW 69
22178: ST_TO_ADDR
// if not tmp then
22179: LD_VAR 0 1
22183: NOT
22184: IFFALSE 22188
// exit ;
22186: GO 22214
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
22188: LD_VAR 0 1
22192: PUSH
22193: LD_INT 1
22195: PPUSH
22196: LD_VAR 0 1
22200: PPUSH
22201: CALL_OW 12
22205: ARRAY
22206: PPUSH
22207: LD_INT 1
22209: PPUSH
22210: CALL_OW 234
// end ;
22214: PPOPN 1
22216: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
22217: LD_EXP 40
22221: PUSH
22222: LD_EXP 82
22226: AND
22227: IFFALSE 22368
22229: GO 22231
22231: DISABLE
22232: LD_INT 0
22234: PPUSH
22235: PPUSH
22236: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22237: LD_ADDR_VAR 0 3
22241: PUSH
22242: LD_INT 22
22244: PUSH
22245: LD_OWVAR 2
22249: PUSH
22250: EMPTY
22251: LIST
22252: LIST
22253: PUSH
22254: LD_INT 25
22256: PUSH
22257: LD_INT 1
22259: PUSH
22260: EMPTY
22261: LIST
22262: LIST
22263: PUSH
22264: EMPTY
22265: LIST
22266: LIST
22267: PPUSH
22268: CALL_OW 69
22272: ST_TO_ADDR
// if not tmp then
22273: LD_VAR 0 3
22277: NOT
22278: IFFALSE 22282
// exit ;
22280: GO 22368
// un := tmp [ rand ( 1 , tmp ) ] ;
22282: LD_ADDR_VAR 0 2
22286: PUSH
22287: LD_VAR 0 3
22291: PUSH
22292: LD_INT 1
22294: PPUSH
22295: LD_VAR 0 3
22299: PPUSH
22300: CALL_OW 12
22304: ARRAY
22305: ST_TO_ADDR
// if Crawls ( un ) then
22306: LD_VAR 0 2
22310: PPUSH
22311: CALL_OW 318
22315: IFFALSE 22326
// ComWalk ( un ) ;
22317: LD_VAR 0 2
22321: PPUSH
22322: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
22326: LD_VAR 0 2
22330: PPUSH
22331: LD_INT 9
22333: PPUSH
22334: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
22338: LD_INT 28
22340: PPUSH
22341: LD_OWVAR 2
22345: PPUSH
22346: LD_INT 2
22348: PPUSH
22349: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
22353: LD_INT 29
22355: PPUSH
22356: LD_OWVAR 2
22360: PPUSH
22361: LD_INT 2
22363: PPUSH
22364: CALL_OW 322
// end ;
22368: PPOPN 3
22370: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
22371: LD_EXP 40
22375: PUSH
22376: LD_EXP 83
22380: AND
22381: IFFALSE 22492
22383: GO 22385
22385: DISABLE
22386: LD_INT 0
22388: PPUSH
22389: PPUSH
22390: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22391: LD_ADDR_VAR 0 3
22395: PUSH
22396: LD_INT 22
22398: PUSH
22399: LD_OWVAR 2
22403: PUSH
22404: EMPTY
22405: LIST
22406: LIST
22407: PUSH
22408: LD_INT 25
22410: PUSH
22411: LD_INT 1
22413: PUSH
22414: EMPTY
22415: LIST
22416: LIST
22417: PUSH
22418: EMPTY
22419: LIST
22420: LIST
22421: PPUSH
22422: CALL_OW 69
22426: ST_TO_ADDR
// if not tmp then
22427: LD_VAR 0 3
22431: NOT
22432: IFFALSE 22436
// exit ;
22434: GO 22492
// un := tmp [ rand ( 1 , tmp ) ] ;
22436: LD_ADDR_VAR 0 2
22440: PUSH
22441: LD_VAR 0 3
22445: PUSH
22446: LD_INT 1
22448: PPUSH
22449: LD_VAR 0 3
22453: PPUSH
22454: CALL_OW 12
22458: ARRAY
22459: ST_TO_ADDR
// if Crawls ( un ) then
22460: LD_VAR 0 2
22464: PPUSH
22465: CALL_OW 318
22469: IFFALSE 22480
// ComWalk ( un ) ;
22471: LD_VAR 0 2
22475: PPUSH
22476: CALL_OW 138
// SetClass ( un , class_mortar ) ;
22480: LD_VAR 0 2
22484: PPUSH
22485: LD_INT 8
22487: PPUSH
22488: CALL_OW 336
// end ;
22492: PPOPN 3
22494: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
22495: LD_EXP 40
22499: PUSH
22500: LD_EXP 84
22504: AND
22505: IFFALSE 22649
22507: GO 22509
22509: DISABLE
22510: LD_INT 0
22512: PPUSH
22513: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
22514: LD_ADDR_VAR 0 2
22518: PUSH
22519: LD_INT 22
22521: PUSH
22522: LD_OWVAR 2
22526: PUSH
22527: EMPTY
22528: LIST
22529: LIST
22530: PUSH
22531: LD_INT 21
22533: PUSH
22534: LD_INT 2
22536: PUSH
22537: EMPTY
22538: LIST
22539: LIST
22540: PUSH
22541: LD_INT 2
22543: PUSH
22544: LD_INT 34
22546: PUSH
22547: LD_INT 12
22549: PUSH
22550: EMPTY
22551: LIST
22552: LIST
22553: PUSH
22554: LD_INT 34
22556: PUSH
22557: LD_INT 51
22559: PUSH
22560: EMPTY
22561: LIST
22562: LIST
22563: PUSH
22564: LD_INT 34
22566: PUSH
22567: LD_INT 32
22569: PUSH
22570: EMPTY
22571: LIST
22572: LIST
22573: PUSH
22574: EMPTY
22575: LIST
22576: LIST
22577: LIST
22578: LIST
22579: PUSH
22580: EMPTY
22581: LIST
22582: LIST
22583: LIST
22584: PPUSH
22585: CALL_OW 69
22589: ST_TO_ADDR
// if not tmp then
22590: LD_VAR 0 2
22594: NOT
22595: IFFALSE 22599
// exit ;
22597: GO 22649
// for i in tmp do
22599: LD_ADDR_VAR 0 1
22603: PUSH
22604: LD_VAR 0 2
22608: PUSH
22609: FOR_IN
22610: IFFALSE 22647
// if GetCargo ( i , mat_artifact ) = 0 then
22612: LD_VAR 0 1
22616: PPUSH
22617: LD_INT 4
22619: PPUSH
22620: CALL_OW 289
22624: PUSH
22625: LD_INT 0
22627: EQUAL
22628: IFFALSE 22645
// SetCargo ( i , mat_siberit , 100 ) ;
22630: LD_VAR 0 1
22634: PPUSH
22635: LD_INT 3
22637: PPUSH
22638: LD_INT 100
22640: PPUSH
22641: CALL_OW 290
22645: GO 22609
22647: POP
22648: POP
// end ;
22649: PPOPN 2
22651: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
22652: LD_EXP 40
22656: PUSH
22657: LD_EXP 85
22661: AND
22662: IFFALSE 22845
22664: GO 22666
22666: DISABLE
22667: LD_INT 0
22669: PPUSH
22670: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22671: LD_ADDR_VAR 0 2
22675: PUSH
22676: LD_INT 22
22678: PUSH
22679: LD_OWVAR 2
22683: PUSH
22684: EMPTY
22685: LIST
22686: LIST
22687: PPUSH
22688: CALL_OW 69
22692: ST_TO_ADDR
// if not tmp then
22693: LD_VAR 0 2
22697: NOT
22698: IFFALSE 22702
// exit ;
22700: GO 22845
// for i := 1 to 2 do
22702: LD_ADDR_VAR 0 1
22706: PUSH
22707: DOUBLE
22708: LD_INT 1
22710: DEC
22711: ST_TO_ADDR
22712: LD_INT 2
22714: PUSH
22715: FOR_TO
22716: IFFALSE 22843
// begin uc_side := your_side ;
22718: LD_ADDR_OWVAR 20
22722: PUSH
22723: LD_OWVAR 2
22727: ST_TO_ADDR
// uc_nation := nation_american ;
22728: LD_ADDR_OWVAR 21
22732: PUSH
22733: LD_INT 1
22735: ST_TO_ADDR
// vc_chassis := us_morphling ;
22736: LD_ADDR_OWVAR 37
22740: PUSH
22741: LD_INT 5
22743: ST_TO_ADDR
// vc_engine := engine_siberite ;
22744: LD_ADDR_OWVAR 39
22748: PUSH
22749: LD_INT 3
22751: ST_TO_ADDR
// vc_control := control_computer ;
22752: LD_ADDR_OWVAR 38
22756: PUSH
22757: LD_INT 3
22759: ST_TO_ADDR
// vc_weapon := us_double_laser ;
22760: LD_ADDR_OWVAR 40
22764: PUSH
22765: LD_INT 10
22767: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
22768: LD_VAR 0 2
22772: PUSH
22773: LD_INT 1
22775: ARRAY
22776: PPUSH
22777: CALL_OW 310
22781: NOT
22782: IFFALSE 22829
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
22784: CALL_OW 45
22788: PPUSH
22789: LD_VAR 0 2
22793: PUSH
22794: LD_INT 1
22796: ARRAY
22797: PPUSH
22798: CALL_OW 250
22802: PPUSH
22803: LD_VAR 0 2
22807: PUSH
22808: LD_INT 1
22810: ARRAY
22811: PPUSH
22812: CALL_OW 251
22816: PPUSH
22817: LD_INT 12
22819: PPUSH
22820: LD_INT 1
22822: PPUSH
22823: CALL_OW 50
22827: GO 22841
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
22829: CALL_OW 45
22833: PPUSH
22834: LD_INT 1
22836: PPUSH
22837: CALL_OW 51
// end ;
22841: GO 22715
22843: POP
22844: POP
// end ;
22845: PPOPN 2
22847: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
22848: LD_EXP 40
22852: PUSH
22853: LD_EXP 86
22857: AND
22858: IFFALSE 23080
22860: GO 22862
22862: DISABLE
22863: LD_INT 0
22865: PPUSH
22866: PPUSH
22867: PPUSH
22868: PPUSH
22869: PPUSH
22870: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22871: LD_ADDR_VAR 0 6
22875: PUSH
22876: LD_INT 22
22878: PUSH
22879: LD_OWVAR 2
22883: PUSH
22884: EMPTY
22885: LIST
22886: LIST
22887: PUSH
22888: LD_INT 21
22890: PUSH
22891: LD_INT 1
22893: PUSH
22894: EMPTY
22895: LIST
22896: LIST
22897: PUSH
22898: LD_INT 3
22900: PUSH
22901: LD_INT 23
22903: PUSH
22904: LD_INT 0
22906: PUSH
22907: EMPTY
22908: LIST
22909: LIST
22910: PUSH
22911: EMPTY
22912: LIST
22913: LIST
22914: PUSH
22915: EMPTY
22916: LIST
22917: LIST
22918: LIST
22919: PPUSH
22920: CALL_OW 69
22924: ST_TO_ADDR
// if not tmp then
22925: LD_VAR 0 6
22929: NOT
22930: IFFALSE 22934
// exit ;
22932: GO 23080
// s1 := rand ( 1 , 4 ) ;
22934: LD_ADDR_VAR 0 2
22938: PUSH
22939: LD_INT 1
22941: PPUSH
22942: LD_INT 4
22944: PPUSH
22945: CALL_OW 12
22949: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
22950: LD_ADDR_VAR 0 4
22954: PUSH
22955: LD_VAR 0 6
22959: PUSH
22960: LD_INT 1
22962: ARRAY
22963: PPUSH
22964: LD_VAR 0 2
22968: PPUSH
22969: CALL_OW 259
22973: ST_TO_ADDR
// if s1 = 1 then
22974: LD_VAR 0 2
22978: PUSH
22979: LD_INT 1
22981: EQUAL
22982: IFFALSE 23002
// s2 := rand ( 2 , 4 ) else
22984: LD_ADDR_VAR 0 3
22988: PUSH
22989: LD_INT 2
22991: PPUSH
22992: LD_INT 4
22994: PPUSH
22995: CALL_OW 12
22999: ST_TO_ADDR
23000: GO 23010
// s2 := 1 ;
23002: LD_ADDR_VAR 0 3
23006: PUSH
23007: LD_INT 1
23009: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
23010: LD_ADDR_VAR 0 5
23014: PUSH
23015: LD_VAR 0 6
23019: PUSH
23020: LD_INT 1
23022: ARRAY
23023: PPUSH
23024: LD_VAR 0 3
23028: PPUSH
23029: CALL_OW 259
23033: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
23034: LD_VAR 0 6
23038: PUSH
23039: LD_INT 1
23041: ARRAY
23042: PPUSH
23043: LD_VAR 0 2
23047: PPUSH
23048: LD_VAR 0 5
23052: PPUSH
23053: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
23057: LD_VAR 0 6
23061: PUSH
23062: LD_INT 1
23064: ARRAY
23065: PPUSH
23066: LD_VAR 0 3
23070: PPUSH
23071: LD_VAR 0 4
23075: PPUSH
23076: CALL_OW 237
// end ;
23080: PPOPN 6
23082: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
23083: LD_EXP 40
23087: PUSH
23088: LD_EXP 87
23092: AND
23093: IFFALSE 23172
23095: GO 23097
23097: DISABLE
23098: LD_INT 0
23100: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
23101: LD_ADDR_VAR 0 1
23105: PUSH
23106: LD_INT 22
23108: PUSH
23109: LD_OWVAR 2
23113: PUSH
23114: EMPTY
23115: LIST
23116: LIST
23117: PUSH
23118: LD_INT 30
23120: PUSH
23121: LD_INT 3
23123: PUSH
23124: EMPTY
23125: LIST
23126: LIST
23127: PUSH
23128: EMPTY
23129: LIST
23130: LIST
23131: PPUSH
23132: CALL_OW 69
23136: ST_TO_ADDR
// if not tmp then
23137: LD_VAR 0 1
23141: NOT
23142: IFFALSE 23146
// exit ;
23144: GO 23172
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
23146: LD_VAR 0 1
23150: PUSH
23151: LD_INT 1
23153: PPUSH
23154: LD_VAR 0 1
23158: PPUSH
23159: CALL_OW 12
23163: ARRAY
23164: PPUSH
23165: LD_INT 1
23167: PPUSH
23168: CALL_OW 234
// end ;
23172: PPOPN 1
23174: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
23175: LD_EXP 40
23179: PUSH
23180: LD_EXP 88
23184: AND
23185: IFFALSE 23297
23187: GO 23189
23189: DISABLE
23190: LD_INT 0
23192: PPUSH
23193: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
23194: LD_ADDR_VAR 0 2
23198: PUSH
23199: LD_INT 22
23201: PUSH
23202: LD_OWVAR 2
23206: PUSH
23207: EMPTY
23208: LIST
23209: LIST
23210: PUSH
23211: LD_INT 2
23213: PUSH
23214: LD_INT 30
23216: PUSH
23217: LD_INT 27
23219: PUSH
23220: EMPTY
23221: LIST
23222: LIST
23223: PUSH
23224: LD_INT 30
23226: PUSH
23227: LD_INT 26
23229: PUSH
23230: EMPTY
23231: LIST
23232: LIST
23233: PUSH
23234: LD_INT 30
23236: PUSH
23237: LD_INT 28
23239: PUSH
23240: EMPTY
23241: LIST
23242: LIST
23243: PUSH
23244: EMPTY
23245: LIST
23246: LIST
23247: LIST
23248: LIST
23249: PUSH
23250: EMPTY
23251: LIST
23252: LIST
23253: PPUSH
23254: CALL_OW 69
23258: ST_TO_ADDR
// if not tmp then
23259: LD_VAR 0 2
23263: NOT
23264: IFFALSE 23268
// exit ;
23266: GO 23297
// for i in tmp do
23268: LD_ADDR_VAR 0 1
23272: PUSH
23273: LD_VAR 0 2
23277: PUSH
23278: FOR_IN
23279: IFFALSE 23295
// SetLives ( i , 1 ) ;
23281: LD_VAR 0 1
23285: PPUSH
23286: LD_INT 1
23288: PPUSH
23289: CALL_OW 234
23293: GO 23278
23295: POP
23296: POP
// end ;
23297: PPOPN 2
23299: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
23300: LD_EXP 40
23304: PUSH
23305: LD_EXP 89
23309: AND
23310: IFFALSE 23597
23312: GO 23314
23314: DISABLE
23315: LD_INT 0
23317: PPUSH
23318: PPUSH
23319: PPUSH
// begin i := rand ( 1 , 7 ) ;
23320: LD_ADDR_VAR 0 1
23324: PUSH
23325: LD_INT 1
23327: PPUSH
23328: LD_INT 7
23330: PPUSH
23331: CALL_OW 12
23335: ST_TO_ADDR
// case i of 1 :
23336: LD_VAR 0 1
23340: PUSH
23341: LD_INT 1
23343: DOUBLE
23344: EQUAL
23345: IFTRUE 23349
23347: GO 23359
23349: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
23350: LD_STRING earthquake(getX(game), 0, 32)
23352: PPUSH
23353: CALL_OW 559
23357: GO 23597
23359: LD_INT 2
23361: DOUBLE
23362: EQUAL
23363: IFTRUE 23367
23365: GO 23381
23367: POP
// begin ToLua ( displayStucuk(); ) ;
23368: LD_STRING displayStucuk();
23370: PPUSH
23371: CALL_OW 559
// ResetFog ;
23375: CALL_OW 335
// end ; 3 :
23379: GO 23597
23381: LD_INT 3
23383: DOUBLE
23384: EQUAL
23385: IFTRUE 23389
23387: GO 23493
23389: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
23390: LD_ADDR_VAR 0 2
23394: PUSH
23395: LD_INT 22
23397: PUSH
23398: LD_OWVAR 2
23402: PUSH
23403: EMPTY
23404: LIST
23405: LIST
23406: PUSH
23407: LD_INT 25
23409: PUSH
23410: LD_INT 1
23412: PUSH
23413: EMPTY
23414: LIST
23415: LIST
23416: PUSH
23417: EMPTY
23418: LIST
23419: LIST
23420: PPUSH
23421: CALL_OW 69
23425: ST_TO_ADDR
// if not tmp then
23426: LD_VAR 0 2
23430: NOT
23431: IFFALSE 23435
// exit ;
23433: GO 23597
// un := tmp [ rand ( 1 , tmp ) ] ;
23435: LD_ADDR_VAR 0 3
23439: PUSH
23440: LD_VAR 0 2
23444: PUSH
23445: LD_INT 1
23447: PPUSH
23448: LD_VAR 0 2
23452: PPUSH
23453: CALL_OW 12
23457: ARRAY
23458: ST_TO_ADDR
// if Crawls ( un ) then
23459: LD_VAR 0 3
23463: PPUSH
23464: CALL_OW 318
23468: IFFALSE 23479
// ComWalk ( un ) ;
23470: LD_VAR 0 3
23474: PPUSH
23475: CALL_OW 138
// SetClass ( un , class_mortar ) ;
23479: LD_VAR 0 3
23483: PPUSH
23484: LD_INT 8
23486: PPUSH
23487: CALL_OW 336
// end ; 4 :
23491: GO 23597
23493: LD_INT 4
23495: DOUBLE
23496: EQUAL
23497: IFTRUE 23501
23499: GO 23575
23501: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
23502: LD_ADDR_VAR 0 2
23506: PUSH
23507: LD_INT 22
23509: PUSH
23510: LD_OWVAR 2
23514: PUSH
23515: EMPTY
23516: LIST
23517: LIST
23518: PUSH
23519: LD_INT 30
23521: PUSH
23522: LD_INT 29
23524: PUSH
23525: EMPTY
23526: LIST
23527: LIST
23528: PUSH
23529: EMPTY
23530: LIST
23531: LIST
23532: PPUSH
23533: CALL_OW 69
23537: ST_TO_ADDR
// if not tmp then
23538: LD_VAR 0 2
23542: NOT
23543: IFFALSE 23547
// exit ;
23545: GO 23597
// CenterNowOnUnits ( tmp [ 1 ] ) ;
23547: LD_VAR 0 2
23551: PUSH
23552: LD_INT 1
23554: ARRAY
23555: PPUSH
23556: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
23560: LD_VAR 0 2
23564: PUSH
23565: LD_INT 1
23567: ARRAY
23568: PPUSH
23569: CALL_OW 65
// end ; 5 .. 7 :
23573: GO 23597
23575: LD_INT 5
23577: DOUBLE
23578: GREATEREQUAL
23579: IFFALSE 23587
23581: LD_INT 7
23583: DOUBLE
23584: LESSEQUAL
23585: IFTRUE 23589
23587: GO 23596
23589: POP
// StreamSibBomb ; end ;
23590: CALL 19834 0 0
23594: GO 23597
23596: POP
// end ;
23597: PPOPN 3
23599: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
23600: LD_EXP 40
23604: PUSH
23605: LD_EXP 90
23609: AND
23610: IFFALSE 23766
23612: GO 23614
23614: DISABLE
23615: LD_INT 0
23617: PPUSH
23618: PPUSH
23619: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
23620: LD_ADDR_VAR 0 2
23624: PUSH
23625: LD_INT 81
23627: PUSH
23628: LD_OWVAR 2
23632: PUSH
23633: EMPTY
23634: LIST
23635: LIST
23636: PUSH
23637: LD_INT 2
23639: PUSH
23640: LD_INT 21
23642: PUSH
23643: LD_INT 1
23645: PUSH
23646: EMPTY
23647: LIST
23648: LIST
23649: PUSH
23650: LD_INT 21
23652: PUSH
23653: LD_INT 2
23655: PUSH
23656: EMPTY
23657: LIST
23658: LIST
23659: PUSH
23660: EMPTY
23661: LIST
23662: LIST
23663: LIST
23664: PUSH
23665: EMPTY
23666: LIST
23667: LIST
23668: PPUSH
23669: CALL_OW 69
23673: ST_TO_ADDR
// if not tmp then
23674: LD_VAR 0 2
23678: NOT
23679: IFFALSE 23683
// exit ;
23681: GO 23766
// p := 0 ;
23683: LD_ADDR_VAR 0 3
23687: PUSH
23688: LD_INT 0
23690: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23691: LD_INT 35
23693: PPUSH
23694: CALL_OW 67
// p := p + 1 ;
23698: LD_ADDR_VAR 0 3
23702: PUSH
23703: LD_VAR 0 3
23707: PUSH
23708: LD_INT 1
23710: PLUS
23711: ST_TO_ADDR
// for i in tmp do
23712: LD_ADDR_VAR 0 1
23716: PUSH
23717: LD_VAR 0 2
23721: PUSH
23722: FOR_IN
23723: IFFALSE 23754
// if GetLives ( i ) < 1000 then
23725: LD_VAR 0 1
23729: PPUSH
23730: CALL_OW 256
23734: PUSH
23735: LD_INT 1000
23737: LESS
23738: IFFALSE 23752
// SetLives ( i , 1000 ) ;
23740: LD_VAR 0 1
23744: PPUSH
23745: LD_INT 1000
23747: PPUSH
23748: CALL_OW 234
23752: GO 23722
23754: POP
23755: POP
// until p > 20 ;
23756: LD_VAR 0 3
23760: PUSH
23761: LD_INT 20
23763: GREATER
23764: IFFALSE 23691
// end ;
23766: PPOPN 3
23768: END
// every 0 0$1 trigger StreamModeActive and sTime do
23769: LD_EXP 40
23773: PUSH
23774: LD_EXP 91
23778: AND
23779: IFFALSE 23814
23781: GO 23783
23783: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
23784: LD_INT 28
23786: PPUSH
23787: LD_OWVAR 2
23791: PPUSH
23792: LD_INT 2
23794: PPUSH
23795: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
23799: LD_INT 30
23801: PPUSH
23802: LD_OWVAR 2
23806: PPUSH
23807: LD_INT 2
23809: PPUSH
23810: CALL_OW 322
// end ;
23814: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
23815: LD_EXP 40
23819: PUSH
23820: LD_EXP 92
23824: AND
23825: IFFALSE 23946
23827: GO 23829
23829: DISABLE
23830: LD_INT 0
23832: PPUSH
23833: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
23834: LD_ADDR_VAR 0 2
23838: PUSH
23839: LD_INT 22
23841: PUSH
23842: LD_OWVAR 2
23846: PUSH
23847: EMPTY
23848: LIST
23849: LIST
23850: PUSH
23851: LD_INT 21
23853: PUSH
23854: LD_INT 1
23856: PUSH
23857: EMPTY
23858: LIST
23859: LIST
23860: PUSH
23861: LD_INT 3
23863: PUSH
23864: LD_INT 23
23866: PUSH
23867: LD_INT 0
23869: PUSH
23870: EMPTY
23871: LIST
23872: LIST
23873: PUSH
23874: EMPTY
23875: LIST
23876: LIST
23877: PUSH
23878: EMPTY
23879: LIST
23880: LIST
23881: LIST
23882: PPUSH
23883: CALL_OW 69
23887: ST_TO_ADDR
// if not tmp then
23888: LD_VAR 0 2
23892: NOT
23893: IFFALSE 23897
// exit ;
23895: GO 23946
// for i in tmp do
23897: LD_ADDR_VAR 0 1
23901: PUSH
23902: LD_VAR 0 2
23906: PUSH
23907: FOR_IN
23908: IFFALSE 23944
// begin if Crawls ( i ) then
23910: LD_VAR 0 1
23914: PPUSH
23915: CALL_OW 318
23919: IFFALSE 23930
// ComWalk ( i ) ;
23921: LD_VAR 0 1
23925: PPUSH
23926: CALL_OW 138
// SetClass ( i , 2 ) ;
23930: LD_VAR 0 1
23934: PPUSH
23935: LD_INT 2
23937: PPUSH
23938: CALL_OW 336
// end ;
23942: GO 23907
23944: POP
23945: POP
// end ;
23946: PPOPN 2
23948: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
23949: LD_EXP 40
23953: PUSH
23954: LD_EXP 93
23958: AND
23959: IFFALSE 24247
23961: GO 23963
23963: DISABLE
23964: LD_INT 0
23966: PPUSH
23967: PPUSH
23968: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
23969: LD_OWVAR 2
23973: PPUSH
23974: LD_INT 9
23976: PPUSH
23977: LD_INT 1
23979: PPUSH
23980: LD_INT 1
23982: PPUSH
23983: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
23987: LD_INT 9
23989: PPUSH
23990: LD_OWVAR 2
23994: PPUSH
23995: CALL_OW 343
// uc_side := 9 ;
23999: LD_ADDR_OWVAR 20
24003: PUSH
24004: LD_INT 9
24006: ST_TO_ADDR
// uc_nation := 2 ;
24007: LD_ADDR_OWVAR 21
24011: PUSH
24012: LD_INT 2
24014: ST_TO_ADDR
// hc_name := Dark Warrior ;
24015: LD_ADDR_OWVAR 26
24019: PUSH
24020: LD_STRING Dark Warrior
24022: ST_TO_ADDR
// hc_gallery :=  ;
24023: LD_ADDR_OWVAR 33
24027: PUSH
24028: LD_STRING 
24030: ST_TO_ADDR
// hc_noskilllimit := true ;
24031: LD_ADDR_OWVAR 76
24035: PUSH
24036: LD_INT 1
24038: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
24039: LD_ADDR_OWVAR 31
24043: PUSH
24044: LD_INT 30
24046: PUSH
24047: LD_INT 30
24049: PUSH
24050: LD_INT 30
24052: PUSH
24053: LD_INT 30
24055: PUSH
24056: EMPTY
24057: LIST
24058: LIST
24059: LIST
24060: LIST
24061: ST_TO_ADDR
// un := CreateHuman ;
24062: LD_ADDR_VAR 0 3
24066: PUSH
24067: CALL_OW 44
24071: ST_TO_ADDR
// hc_noskilllimit := false ;
24072: LD_ADDR_OWVAR 76
24076: PUSH
24077: LD_INT 0
24079: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
24080: LD_VAR 0 3
24084: PPUSH
24085: LD_INT 1
24087: PPUSH
24088: CALL_OW 51
// ToLua ( playRanger() ) ;
24092: LD_STRING playRanger()
24094: PPUSH
24095: CALL_OW 559
// p := 0 ;
24099: LD_ADDR_VAR 0 2
24103: PUSH
24104: LD_INT 0
24106: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
24107: LD_INT 35
24109: PPUSH
24110: CALL_OW 67
// p := p + 1 ;
24114: LD_ADDR_VAR 0 2
24118: PUSH
24119: LD_VAR 0 2
24123: PUSH
24124: LD_INT 1
24126: PLUS
24127: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
24128: LD_VAR 0 3
24132: PPUSH
24133: CALL_OW 256
24137: PUSH
24138: LD_INT 1000
24140: LESS
24141: IFFALSE 24155
// SetLives ( un , 1000 ) ;
24143: LD_VAR 0 3
24147: PPUSH
24148: LD_INT 1000
24150: PPUSH
24151: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
24155: LD_VAR 0 3
24159: PPUSH
24160: LD_INT 81
24162: PUSH
24163: LD_OWVAR 2
24167: PUSH
24168: EMPTY
24169: LIST
24170: LIST
24171: PUSH
24172: LD_INT 91
24174: PUSH
24175: LD_VAR 0 3
24179: PUSH
24180: LD_INT 30
24182: PUSH
24183: EMPTY
24184: LIST
24185: LIST
24186: LIST
24187: PUSH
24188: EMPTY
24189: LIST
24190: LIST
24191: PPUSH
24192: CALL_OW 69
24196: PPUSH
24197: LD_VAR 0 3
24201: PPUSH
24202: CALL_OW 74
24206: PPUSH
24207: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
24211: LD_VAR 0 2
24215: PUSH
24216: LD_INT 80
24218: GREATER
24219: PUSH
24220: LD_VAR 0 3
24224: PPUSH
24225: CALL_OW 301
24229: OR
24230: IFFALSE 24107
// if un then
24232: LD_VAR 0 3
24236: IFFALSE 24247
// RemoveUnit ( un ) ;
24238: LD_VAR 0 3
24242: PPUSH
24243: CALL_OW 64
// end ;
24247: PPOPN 3
24249: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
24250: LD_EXP 94
24254: IFFALSE 24370
24256: GO 24258
24258: DISABLE
24259: LD_INT 0
24261: PPUSH
24262: PPUSH
24263: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
24264: LD_ADDR_VAR 0 2
24268: PUSH
24269: LD_INT 81
24271: PUSH
24272: LD_OWVAR 2
24276: PUSH
24277: EMPTY
24278: LIST
24279: LIST
24280: PUSH
24281: LD_INT 21
24283: PUSH
24284: LD_INT 1
24286: PUSH
24287: EMPTY
24288: LIST
24289: LIST
24290: PUSH
24291: EMPTY
24292: LIST
24293: LIST
24294: PPUSH
24295: CALL_OW 69
24299: ST_TO_ADDR
// ToLua ( playComputer() ) ;
24300: LD_STRING playComputer()
24302: PPUSH
24303: CALL_OW 559
// if not tmp then
24307: LD_VAR 0 2
24311: NOT
24312: IFFALSE 24316
// exit ;
24314: GO 24370
// for i in tmp do
24316: LD_ADDR_VAR 0 1
24320: PUSH
24321: LD_VAR 0 2
24325: PUSH
24326: FOR_IN
24327: IFFALSE 24368
// for j := 1 to 4 do
24329: LD_ADDR_VAR 0 3
24333: PUSH
24334: DOUBLE
24335: LD_INT 1
24337: DEC
24338: ST_TO_ADDR
24339: LD_INT 4
24341: PUSH
24342: FOR_TO
24343: IFFALSE 24364
// SetSkill ( i , j , 10 ) ;
24345: LD_VAR 0 1
24349: PPUSH
24350: LD_VAR 0 3
24354: PPUSH
24355: LD_INT 10
24357: PPUSH
24358: CALL_OW 237
24362: GO 24342
24364: POP
24365: POP
24366: GO 24326
24368: POP
24369: POP
// end ;
24370: PPOPN 3
24372: END
// every 0 0$1 trigger s30 do var i , tmp ;
24373: LD_EXP 95
24377: IFFALSE 24446
24379: GO 24381
24381: DISABLE
24382: LD_INT 0
24384: PPUSH
24385: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
24386: LD_ADDR_VAR 0 2
24390: PUSH
24391: LD_INT 22
24393: PUSH
24394: LD_OWVAR 2
24398: PUSH
24399: EMPTY
24400: LIST
24401: LIST
24402: PPUSH
24403: CALL_OW 69
24407: ST_TO_ADDR
// if not tmp then
24408: LD_VAR 0 2
24412: NOT
24413: IFFALSE 24417
// exit ;
24415: GO 24446
// for i in tmp do
24417: LD_ADDR_VAR 0 1
24421: PUSH
24422: LD_VAR 0 2
24426: PUSH
24427: FOR_IN
24428: IFFALSE 24444
// SetLives ( i , 300 ) ;
24430: LD_VAR 0 1
24434: PPUSH
24435: LD_INT 300
24437: PPUSH
24438: CALL_OW 234
24442: GO 24427
24444: POP
24445: POP
// end ;
24446: PPOPN 2
24448: END
// every 0 0$1 trigger s60 do var i , tmp ;
24449: LD_EXP 96
24453: IFFALSE 24522
24455: GO 24457
24457: DISABLE
24458: LD_INT 0
24460: PPUSH
24461: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
24462: LD_ADDR_VAR 0 2
24466: PUSH
24467: LD_INT 22
24469: PUSH
24470: LD_OWVAR 2
24474: PUSH
24475: EMPTY
24476: LIST
24477: LIST
24478: PPUSH
24479: CALL_OW 69
24483: ST_TO_ADDR
// if not tmp then
24484: LD_VAR 0 2
24488: NOT
24489: IFFALSE 24493
// exit ;
24491: GO 24522
// for i in tmp do
24493: LD_ADDR_VAR 0 1
24497: PUSH
24498: LD_VAR 0 2
24502: PUSH
24503: FOR_IN
24504: IFFALSE 24520
// SetLives ( i , 600 ) ;
24506: LD_VAR 0 1
24510: PPUSH
24511: LD_INT 600
24513: PPUSH
24514: CALL_OW 234
24518: GO 24503
24520: POP
24521: POP
// end ;
24522: PPOPN 2
24524: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
24525: LD_INT 0
24527: PPUSH
// case cmd of 301 :
24528: LD_VAR 0 1
24532: PUSH
24533: LD_INT 301
24535: DOUBLE
24536: EQUAL
24537: IFTRUE 24541
24539: GO 24573
24541: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
24542: LD_VAR 0 6
24546: PPUSH
24547: LD_VAR 0 7
24551: PPUSH
24552: LD_VAR 0 8
24556: PPUSH
24557: LD_VAR 0 4
24561: PPUSH
24562: LD_VAR 0 5
24566: PPUSH
24567: CALL 25774 0 5
24571: GO 24694
24573: LD_INT 302
24575: DOUBLE
24576: EQUAL
24577: IFTRUE 24581
24579: GO 24618
24581: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
24582: LD_VAR 0 6
24586: PPUSH
24587: LD_VAR 0 7
24591: PPUSH
24592: LD_VAR 0 8
24596: PPUSH
24597: LD_VAR 0 9
24601: PPUSH
24602: LD_VAR 0 4
24606: PPUSH
24607: LD_VAR 0 5
24611: PPUSH
24612: CALL 25865 0 6
24616: GO 24694
24618: LD_INT 303
24620: DOUBLE
24621: EQUAL
24622: IFTRUE 24626
24624: GO 24663
24626: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
24627: LD_VAR 0 6
24631: PPUSH
24632: LD_VAR 0 7
24636: PPUSH
24637: LD_VAR 0 8
24641: PPUSH
24642: LD_VAR 0 9
24646: PPUSH
24647: LD_VAR 0 4
24651: PPUSH
24652: LD_VAR 0 5
24656: PPUSH
24657: CALL 24699 0 6
24661: GO 24694
24663: LD_INT 304
24665: DOUBLE
24666: EQUAL
24667: IFTRUE 24671
24669: GO 24693
24671: POP
// hHackTeleport ( unit , x , y ) ; end ;
24672: LD_VAR 0 2
24676: PPUSH
24677: LD_VAR 0 4
24681: PPUSH
24682: LD_VAR 0 5
24686: PPUSH
24687: CALL 26458 0 3
24691: GO 24694
24693: POP
// end ;
24694: LD_VAR 0 12
24698: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
24699: LD_INT 0
24701: PPUSH
24702: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
24703: LD_VAR 0 1
24707: PUSH
24708: LD_INT 1
24710: LESS
24711: PUSH
24712: LD_VAR 0 1
24716: PUSH
24717: LD_INT 3
24719: GREATER
24720: OR
24721: PUSH
24722: LD_VAR 0 5
24726: PPUSH
24727: LD_VAR 0 6
24731: PPUSH
24732: CALL_OW 428
24736: OR
24737: IFFALSE 24741
// exit ;
24739: GO 25461
// uc_side := your_side ;
24741: LD_ADDR_OWVAR 20
24745: PUSH
24746: LD_OWVAR 2
24750: ST_TO_ADDR
// uc_nation := nation ;
24751: LD_ADDR_OWVAR 21
24755: PUSH
24756: LD_VAR 0 1
24760: ST_TO_ADDR
// bc_level = 1 ;
24761: LD_ADDR_OWVAR 43
24765: PUSH
24766: LD_INT 1
24768: ST_TO_ADDR
// case btype of 1 :
24769: LD_VAR 0 2
24773: PUSH
24774: LD_INT 1
24776: DOUBLE
24777: EQUAL
24778: IFTRUE 24782
24780: GO 24793
24782: POP
// bc_type := b_depot ; 2 :
24783: LD_ADDR_OWVAR 42
24787: PUSH
24788: LD_INT 0
24790: ST_TO_ADDR
24791: GO 25405
24793: LD_INT 2
24795: DOUBLE
24796: EQUAL
24797: IFTRUE 24801
24799: GO 24812
24801: POP
// bc_type := b_warehouse ; 3 :
24802: LD_ADDR_OWVAR 42
24806: PUSH
24807: LD_INT 1
24809: ST_TO_ADDR
24810: GO 25405
24812: LD_INT 3
24814: DOUBLE
24815: EQUAL
24816: IFTRUE 24820
24818: GO 24831
24820: POP
// bc_type := b_lab ; 4 .. 9 :
24821: LD_ADDR_OWVAR 42
24825: PUSH
24826: LD_INT 6
24828: ST_TO_ADDR
24829: GO 25405
24831: LD_INT 4
24833: DOUBLE
24834: GREATEREQUAL
24835: IFFALSE 24843
24837: LD_INT 9
24839: DOUBLE
24840: LESSEQUAL
24841: IFTRUE 24845
24843: GO 24897
24845: POP
// begin bc_type := b_lab_half ;
24846: LD_ADDR_OWVAR 42
24850: PUSH
24851: LD_INT 7
24853: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
24854: LD_ADDR_OWVAR 44
24858: PUSH
24859: LD_INT 10
24861: PUSH
24862: LD_INT 11
24864: PUSH
24865: LD_INT 12
24867: PUSH
24868: LD_INT 15
24870: PUSH
24871: LD_INT 14
24873: PUSH
24874: LD_INT 13
24876: PUSH
24877: EMPTY
24878: LIST
24879: LIST
24880: LIST
24881: LIST
24882: LIST
24883: LIST
24884: PUSH
24885: LD_VAR 0 2
24889: PUSH
24890: LD_INT 3
24892: MINUS
24893: ARRAY
24894: ST_TO_ADDR
// end ; 10 .. 13 :
24895: GO 25405
24897: LD_INT 10
24899: DOUBLE
24900: GREATEREQUAL
24901: IFFALSE 24909
24903: LD_INT 13
24905: DOUBLE
24906: LESSEQUAL
24907: IFTRUE 24911
24909: GO 24988
24911: POP
// begin bc_type := b_lab_full ;
24912: LD_ADDR_OWVAR 42
24916: PUSH
24917: LD_INT 8
24919: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
24920: LD_ADDR_OWVAR 44
24924: PUSH
24925: LD_INT 10
24927: PUSH
24928: LD_INT 12
24930: PUSH
24931: LD_INT 14
24933: PUSH
24934: LD_INT 13
24936: PUSH
24937: EMPTY
24938: LIST
24939: LIST
24940: LIST
24941: LIST
24942: PUSH
24943: LD_VAR 0 2
24947: PUSH
24948: LD_INT 9
24950: MINUS
24951: ARRAY
24952: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
24953: LD_ADDR_OWVAR 45
24957: PUSH
24958: LD_INT 11
24960: PUSH
24961: LD_INT 15
24963: PUSH
24964: LD_INT 12
24966: PUSH
24967: LD_INT 15
24969: PUSH
24970: EMPTY
24971: LIST
24972: LIST
24973: LIST
24974: LIST
24975: PUSH
24976: LD_VAR 0 2
24980: PUSH
24981: LD_INT 9
24983: MINUS
24984: ARRAY
24985: ST_TO_ADDR
// end ; 14 :
24986: GO 25405
24988: LD_INT 14
24990: DOUBLE
24991: EQUAL
24992: IFTRUE 24996
24994: GO 25007
24996: POP
// bc_type := b_workshop ; 15 :
24997: LD_ADDR_OWVAR 42
25001: PUSH
25002: LD_INT 2
25004: ST_TO_ADDR
25005: GO 25405
25007: LD_INT 15
25009: DOUBLE
25010: EQUAL
25011: IFTRUE 25015
25013: GO 25026
25015: POP
// bc_type := b_factory ; 16 :
25016: LD_ADDR_OWVAR 42
25020: PUSH
25021: LD_INT 3
25023: ST_TO_ADDR
25024: GO 25405
25026: LD_INT 16
25028: DOUBLE
25029: EQUAL
25030: IFTRUE 25034
25032: GO 25045
25034: POP
// bc_type := b_ext_gun ; 17 :
25035: LD_ADDR_OWVAR 42
25039: PUSH
25040: LD_INT 17
25042: ST_TO_ADDR
25043: GO 25405
25045: LD_INT 17
25047: DOUBLE
25048: EQUAL
25049: IFTRUE 25053
25051: GO 25081
25053: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
25054: LD_ADDR_OWVAR 42
25058: PUSH
25059: LD_INT 19
25061: PUSH
25062: LD_INT 23
25064: PUSH
25065: LD_INT 19
25067: PUSH
25068: EMPTY
25069: LIST
25070: LIST
25071: LIST
25072: PUSH
25073: LD_VAR 0 1
25077: ARRAY
25078: ST_TO_ADDR
25079: GO 25405
25081: LD_INT 18
25083: DOUBLE
25084: EQUAL
25085: IFTRUE 25089
25087: GO 25100
25089: POP
// bc_type := b_ext_radar ; 19 :
25090: LD_ADDR_OWVAR 42
25094: PUSH
25095: LD_INT 20
25097: ST_TO_ADDR
25098: GO 25405
25100: LD_INT 19
25102: DOUBLE
25103: EQUAL
25104: IFTRUE 25108
25106: GO 25119
25108: POP
// bc_type := b_ext_radio ; 20 :
25109: LD_ADDR_OWVAR 42
25113: PUSH
25114: LD_INT 22
25116: ST_TO_ADDR
25117: GO 25405
25119: LD_INT 20
25121: DOUBLE
25122: EQUAL
25123: IFTRUE 25127
25125: GO 25138
25127: POP
// bc_type := b_ext_siberium ; 21 :
25128: LD_ADDR_OWVAR 42
25132: PUSH
25133: LD_INT 21
25135: ST_TO_ADDR
25136: GO 25405
25138: LD_INT 21
25140: DOUBLE
25141: EQUAL
25142: IFTRUE 25146
25144: GO 25157
25146: POP
// bc_type := b_ext_computer ; 22 :
25147: LD_ADDR_OWVAR 42
25151: PUSH
25152: LD_INT 24
25154: ST_TO_ADDR
25155: GO 25405
25157: LD_INT 22
25159: DOUBLE
25160: EQUAL
25161: IFTRUE 25165
25163: GO 25176
25165: POP
// bc_type := b_ext_track ; 23 :
25166: LD_ADDR_OWVAR 42
25170: PUSH
25171: LD_INT 16
25173: ST_TO_ADDR
25174: GO 25405
25176: LD_INT 23
25178: DOUBLE
25179: EQUAL
25180: IFTRUE 25184
25182: GO 25195
25184: POP
// bc_type := b_ext_laser ; 24 :
25185: LD_ADDR_OWVAR 42
25189: PUSH
25190: LD_INT 25
25192: ST_TO_ADDR
25193: GO 25405
25195: LD_INT 24
25197: DOUBLE
25198: EQUAL
25199: IFTRUE 25203
25201: GO 25214
25203: POP
// bc_type := b_control_tower ; 25 :
25204: LD_ADDR_OWVAR 42
25208: PUSH
25209: LD_INT 36
25211: ST_TO_ADDR
25212: GO 25405
25214: LD_INT 25
25216: DOUBLE
25217: EQUAL
25218: IFTRUE 25222
25220: GO 25233
25222: POP
// bc_type := b_breastwork ; 26 :
25223: LD_ADDR_OWVAR 42
25227: PUSH
25228: LD_INT 31
25230: ST_TO_ADDR
25231: GO 25405
25233: LD_INT 26
25235: DOUBLE
25236: EQUAL
25237: IFTRUE 25241
25239: GO 25252
25241: POP
// bc_type := b_bunker ; 27 :
25242: LD_ADDR_OWVAR 42
25246: PUSH
25247: LD_INT 32
25249: ST_TO_ADDR
25250: GO 25405
25252: LD_INT 27
25254: DOUBLE
25255: EQUAL
25256: IFTRUE 25260
25258: GO 25271
25260: POP
// bc_type := b_turret ; 28 :
25261: LD_ADDR_OWVAR 42
25265: PUSH
25266: LD_INT 33
25268: ST_TO_ADDR
25269: GO 25405
25271: LD_INT 28
25273: DOUBLE
25274: EQUAL
25275: IFTRUE 25279
25277: GO 25290
25279: POP
// bc_type := b_armoury ; 29 :
25280: LD_ADDR_OWVAR 42
25284: PUSH
25285: LD_INT 4
25287: ST_TO_ADDR
25288: GO 25405
25290: LD_INT 29
25292: DOUBLE
25293: EQUAL
25294: IFTRUE 25298
25296: GO 25309
25298: POP
// bc_type := b_barracks ; 30 :
25299: LD_ADDR_OWVAR 42
25303: PUSH
25304: LD_INT 5
25306: ST_TO_ADDR
25307: GO 25405
25309: LD_INT 30
25311: DOUBLE
25312: EQUAL
25313: IFTRUE 25317
25315: GO 25328
25317: POP
// bc_type := b_solar_power ; 31 :
25318: LD_ADDR_OWVAR 42
25322: PUSH
25323: LD_INT 27
25325: ST_TO_ADDR
25326: GO 25405
25328: LD_INT 31
25330: DOUBLE
25331: EQUAL
25332: IFTRUE 25336
25334: GO 25347
25336: POP
// bc_type := b_oil_power ; 32 :
25337: LD_ADDR_OWVAR 42
25341: PUSH
25342: LD_INT 26
25344: ST_TO_ADDR
25345: GO 25405
25347: LD_INT 32
25349: DOUBLE
25350: EQUAL
25351: IFTRUE 25355
25353: GO 25366
25355: POP
// bc_type := b_siberite_power ; 33 :
25356: LD_ADDR_OWVAR 42
25360: PUSH
25361: LD_INT 28
25363: ST_TO_ADDR
25364: GO 25405
25366: LD_INT 33
25368: DOUBLE
25369: EQUAL
25370: IFTRUE 25374
25372: GO 25385
25374: POP
// bc_type := b_oil_mine ; 34 :
25375: LD_ADDR_OWVAR 42
25379: PUSH
25380: LD_INT 29
25382: ST_TO_ADDR
25383: GO 25405
25385: LD_INT 34
25387: DOUBLE
25388: EQUAL
25389: IFTRUE 25393
25391: GO 25404
25393: POP
// bc_type := b_siberite_mine ; end ;
25394: LD_ADDR_OWVAR 42
25398: PUSH
25399: LD_INT 30
25401: ST_TO_ADDR
25402: GO 25405
25404: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
25405: LD_ADDR_VAR 0 8
25409: PUSH
25410: LD_VAR 0 5
25414: PPUSH
25415: LD_VAR 0 6
25419: PPUSH
25420: LD_VAR 0 3
25424: PPUSH
25425: CALL_OW 47
25429: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
25430: LD_OWVAR 42
25434: PUSH
25435: LD_INT 32
25437: PUSH
25438: LD_INT 33
25440: PUSH
25441: EMPTY
25442: LIST
25443: LIST
25444: IN
25445: IFFALSE 25461
// PlaceWeaponTurret ( b , weapon ) ;
25447: LD_VAR 0 8
25451: PPUSH
25452: LD_VAR 0 4
25456: PPUSH
25457: CALL_OW 431
// end ;
25461: LD_VAR 0 7
25465: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
25466: LD_INT 0
25468: PPUSH
25469: PPUSH
25470: PPUSH
25471: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
25472: LD_ADDR_VAR 0 4
25476: PUSH
25477: LD_INT 22
25479: PUSH
25480: LD_OWVAR 2
25484: PUSH
25485: EMPTY
25486: LIST
25487: LIST
25488: PUSH
25489: LD_INT 2
25491: PUSH
25492: LD_INT 30
25494: PUSH
25495: LD_INT 0
25497: PUSH
25498: EMPTY
25499: LIST
25500: LIST
25501: PUSH
25502: LD_INT 30
25504: PUSH
25505: LD_INT 1
25507: PUSH
25508: EMPTY
25509: LIST
25510: LIST
25511: PUSH
25512: EMPTY
25513: LIST
25514: LIST
25515: LIST
25516: PUSH
25517: EMPTY
25518: LIST
25519: LIST
25520: PPUSH
25521: CALL_OW 69
25525: ST_TO_ADDR
// if not tmp then
25526: LD_VAR 0 4
25530: NOT
25531: IFFALSE 25535
// exit ;
25533: GO 25594
// for i in tmp do
25535: LD_ADDR_VAR 0 2
25539: PUSH
25540: LD_VAR 0 4
25544: PUSH
25545: FOR_IN
25546: IFFALSE 25592
// for j = 1 to 3 do
25548: LD_ADDR_VAR 0 3
25552: PUSH
25553: DOUBLE
25554: LD_INT 1
25556: DEC
25557: ST_TO_ADDR
25558: LD_INT 3
25560: PUSH
25561: FOR_TO
25562: IFFALSE 25588
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
25564: LD_VAR 0 2
25568: PPUSH
25569: CALL_OW 274
25573: PPUSH
25574: LD_VAR 0 3
25578: PPUSH
25579: LD_INT 99999
25581: PPUSH
25582: CALL_OW 277
25586: GO 25561
25588: POP
25589: POP
25590: GO 25545
25592: POP
25593: POP
// end ;
25594: LD_VAR 0 1
25598: RET
// export function hHackSetLevel10 ; var i , j ; begin
25599: LD_INT 0
25601: PPUSH
25602: PPUSH
25603: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
25604: LD_ADDR_VAR 0 2
25608: PUSH
25609: LD_INT 21
25611: PUSH
25612: LD_INT 1
25614: PUSH
25615: EMPTY
25616: LIST
25617: LIST
25618: PPUSH
25619: CALL_OW 69
25623: PUSH
25624: FOR_IN
25625: IFFALSE 25677
// if IsSelected ( i ) then
25627: LD_VAR 0 2
25631: PPUSH
25632: CALL_OW 306
25636: IFFALSE 25675
// begin for j := 1 to 4 do
25638: LD_ADDR_VAR 0 3
25642: PUSH
25643: DOUBLE
25644: LD_INT 1
25646: DEC
25647: ST_TO_ADDR
25648: LD_INT 4
25650: PUSH
25651: FOR_TO
25652: IFFALSE 25673
// SetSkill ( i , j , 10 ) ;
25654: LD_VAR 0 2
25658: PPUSH
25659: LD_VAR 0 3
25663: PPUSH
25664: LD_INT 10
25666: PPUSH
25667: CALL_OW 237
25671: GO 25651
25673: POP
25674: POP
// end ;
25675: GO 25624
25677: POP
25678: POP
// end ;
25679: LD_VAR 0 1
25683: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
25684: LD_INT 0
25686: PPUSH
25687: PPUSH
25688: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
25689: LD_ADDR_VAR 0 2
25693: PUSH
25694: LD_INT 22
25696: PUSH
25697: LD_OWVAR 2
25701: PUSH
25702: EMPTY
25703: LIST
25704: LIST
25705: PUSH
25706: LD_INT 21
25708: PUSH
25709: LD_INT 1
25711: PUSH
25712: EMPTY
25713: LIST
25714: LIST
25715: PUSH
25716: EMPTY
25717: LIST
25718: LIST
25719: PPUSH
25720: CALL_OW 69
25724: PUSH
25725: FOR_IN
25726: IFFALSE 25767
// begin for j := 1 to 4 do
25728: LD_ADDR_VAR 0 3
25732: PUSH
25733: DOUBLE
25734: LD_INT 1
25736: DEC
25737: ST_TO_ADDR
25738: LD_INT 4
25740: PUSH
25741: FOR_TO
25742: IFFALSE 25763
// SetSkill ( i , j , 10 ) ;
25744: LD_VAR 0 2
25748: PPUSH
25749: LD_VAR 0 3
25753: PPUSH
25754: LD_INT 10
25756: PPUSH
25757: CALL_OW 237
25761: GO 25741
25763: POP
25764: POP
// end ;
25765: GO 25725
25767: POP
25768: POP
// end ;
25769: LD_VAR 0 1
25773: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
25774: LD_INT 0
25776: PPUSH
// uc_side := your_side ;
25777: LD_ADDR_OWVAR 20
25781: PUSH
25782: LD_OWVAR 2
25786: ST_TO_ADDR
// uc_nation := nation ;
25787: LD_ADDR_OWVAR 21
25791: PUSH
25792: LD_VAR 0 1
25796: ST_TO_ADDR
// InitHc ;
25797: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
25801: LD_INT 0
25803: PPUSH
25804: LD_VAR 0 2
25808: PPUSH
25809: LD_VAR 0 3
25813: PPUSH
25814: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
25818: LD_VAR 0 4
25822: PPUSH
25823: LD_VAR 0 5
25827: PPUSH
25828: CALL_OW 428
25832: PUSH
25833: LD_INT 0
25835: EQUAL
25836: IFFALSE 25860
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
25838: CALL_OW 44
25842: PPUSH
25843: LD_VAR 0 4
25847: PPUSH
25848: LD_VAR 0 5
25852: PPUSH
25853: LD_INT 1
25855: PPUSH
25856: CALL_OW 48
// end ;
25860: LD_VAR 0 6
25864: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
25865: LD_INT 0
25867: PPUSH
25868: PPUSH
// uc_side := your_side ;
25869: LD_ADDR_OWVAR 20
25873: PUSH
25874: LD_OWVAR 2
25878: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
25879: LD_VAR 0 1
25883: PUSH
25884: LD_INT 1
25886: PUSH
25887: LD_INT 2
25889: PUSH
25890: LD_INT 3
25892: PUSH
25893: LD_INT 4
25895: PUSH
25896: LD_INT 5
25898: PUSH
25899: EMPTY
25900: LIST
25901: LIST
25902: LIST
25903: LIST
25904: LIST
25905: IN
25906: IFFALSE 25918
// uc_nation := nation_american else
25908: LD_ADDR_OWVAR 21
25912: PUSH
25913: LD_INT 1
25915: ST_TO_ADDR
25916: GO 25961
// if chassis in [ 11 , 12 , 13 , 14 ] then
25918: LD_VAR 0 1
25922: PUSH
25923: LD_INT 11
25925: PUSH
25926: LD_INT 12
25928: PUSH
25929: LD_INT 13
25931: PUSH
25932: LD_INT 14
25934: PUSH
25935: EMPTY
25936: LIST
25937: LIST
25938: LIST
25939: LIST
25940: IN
25941: IFFALSE 25953
// uc_nation := nation_arabian else
25943: LD_ADDR_OWVAR 21
25947: PUSH
25948: LD_INT 2
25950: ST_TO_ADDR
25951: GO 25961
// uc_nation := nation_russian ;
25953: LD_ADDR_OWVAR 21
25957: PUSH
25958: LD_INT 3
25960: ST_TO_ADDR
// vc_chassis := chassis ;
25961: LD_ADDR_OWVAR 37
25965: PUSH
25966: LD_VAR 0 1
25970: ST_TO_ADDR
// vc_engine := engine ;
25971: LD_ADDR_OWVAR 39
25975: PUSH
25976: LD_VAR 0 2
25980: ST_TO_ADDR
// vc_control := control ;
25981: LD_ADDR_OWVAR 38
25985: PUSH
25986: LD_VAR 0 3
25990: ST_TO_ADDR
// vc_weapon := weapon ;
25991: LD_ADDR_OWVAR 40
25995: PUSH
25996: LD_VAR 0 4
26000: ST_TO_ADDR
// un := CreateVehicle ;
26001: LD_ADDR_VAR 0 8
26005: PUSH
26006: CALL_OW 45
26010: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
26011: LD_VAR 0 8
26015: PPUSH
26016: LD_INT 0
26018: PPUSH
26019: LD_INT 5
26021: PPUSH
26022: CALL_OW 12
26026: PPUSH
26027: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
26031: LD_VAR 0 8
26035: PPUSH
26036: LD_VAR 0 5
26040: PPUSH
26041: LD_VAR 0 6
26045: PPUSH
26046: LD_INT 1
26048: PPUSH
26049: CALL_OW 48
// end ;
26053: LD_VAR 0 7
26057: RET
// export hInvincible ; every 1 do
26058: GO 26060
26060: DISABLE
// hInvincible := [ ] ;
26061: LD_ADDR_EXP 97
26065: PUSH
26066: EMPTY
26067: ST_TO_ADDR
26068: END
// every 10 do var i ;
26069: GO 26071
26071: DISABLE
26072: LD_INT 0
26074: PPUSH
// begin enable ;
26075: ENABLE
// if not hInvincible then
26076: LD_EXP 97
26080: NOT
26081: IFFALSE 26085
// exit ;
26083: GO 26129
// for i in hInvincible do
26085: LD_ADDR_VAR 0 1
26089: PUSH
26090: LD_EXP 97
26094: PUSH
26095: FOR_IN
26096: IFFALSE 26127
// if GetLives ( i ) < 1000 then
26098: LD_VAR 0 1
26102: PPUSH
26103: CALL_OW 256
26107: PUSH
26108: LD_INT 1000
26110: LESS
26111: IFFALSE 26125
// SetLives ( i , 1000 ) ;
26113: LD_VAR 0 1
26117: PPUSH
26118: LD_INT 1000
26120: PPUSH
26121: CALL_OW 234
26125: GO 26095
26127: POP
26128: POP
// end ;
26129: PPOPN 1
26131: END
// export function hHackInvincible ; var i ; begin
26132: LD_INT 0
26134: PPUSH
26135: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
26136: LD_ADDR_VAR 0 2
26140: PUSH
26141: LD_INT 2
26143: PUSH
26144: LD_INT 21
26146: PUSH
26147: LD_INT 1
26149: PUSH
26150: EMPTY
26151: LIST
26152: LIST
26153: PUSH
26154: LD_INT 21
26156: PUSH
26157: LD_INT 2
26159: PUSH
26160: EMPTY
26161: LIST
26162: LIST
26163: PUSH
26164: EMPTY
26165: LIST
26166: LIST
26167: LIST
26168: PPUSH
26169: CALL_OW 69
26173: PUSH
26174: FOR_IN
26175: IFFALSE 26236
// if IsSelected ( i ) then
26177: LD_VAR 0 2
26181: PPUSH
26182: CALL_OW 306
26186: IFFALSE 26234
// begin if i in hInvincible then
26188: LD_VAR 0 2
26192: PUSH
26193: LD_EXP 97
26197: IN
26198: IFFALSE 26218
// hInvincible := hInvincible diff i else
26200: LD_ADDR_EXP 97
26204: PUSH
26205: LD_EXP 97
26209: PUSH
26210: LD_VAR 0 2
26214: DIFF
26215: ST_TO_ADDR
26216: GO 26234
// hInvincible := hInvincible union i ;
26218: LD_ADDR_EXP 97
26222: PUSH
26223: LD_EXP 97
26227: PUSH
26228: LD_VAR 0 2
26232: UNION
26233: ST_TO_ADDR
// end ;
26234: GO 26174
26236: POP
26237: POP
// end ;
26238: LD_VAR 0 1
26242: RET
// export function hHackInvisible ; var i , j ; begin
26243: LD_INT 0
26245: PPUSH
26246: PPUSH
26247: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
26248: LD_ADDR_VAR 0 2
26252: PUSH
26253: LD_INT 21
26255: PUSH
26256: LD_INT 1
26258: PUSH
26259: EMPTY
26260: LIST
26261: LIST
26262: PPUSH
26263: CALL_OW 69
26267: PUSH
26268: FOR_IN
26269: IFFALSE 26293
// if IsSelected ( i ) then
26271: LD_VAR 0 2
26275: PPUSH
26276: CALL_OW 306
26280: IFFALSE 26291
// ComForceInvisible ( i ) ;
26282: LD_VAR 0 2
26286: PPUSH
26287: CALL_OW 496
26291: GO 26268
26293: POP
26294: POP
// end ;
26295: LD_VAR 0 1
26299: RET
// export function hHackChangeYourSide ; begin
26300: LD_INT 0
26302: PPUSH
// if your_side = 8 then
26303: LD_OWVAR 2
26307: PUSH
26308: LD_INT 8
26310: EQUAL
26311: IFFALSE 26323
// your_side := 0 else
26313: LD_ADDR_OWVAR 2
26317: PUSH
26318: LD_INT 0
26320: ST_TO_ADDR
26321: GO 26337
// your_side := your_side + 1 ;
26323: LD_ADDR_OWVAR 2
26327: PUSH
26328: LD_OWVAR 2
26332: PUSH
26333: LD_INT 1
26335: PLUS
26336: ST_TO_ADDR
// end ;
26337: LD_VAR 0 1
26341: RET
// export function hHackChangeUnitSide ; var i , j ; begin
26342: LD_INT 0
26344: PPUSH
26345: PPUSH
26346: PPUSH
// for i in all_units do
26347: LD_ADDR_VAR 0 2
26351: PUSH
26352: LD_OWVAR 3
26356: PUSH
26357: FOR_IN
26358: IFFALSE 26436
// if IsSelected ( i ) then
26360: LD_VAR 0 2
26364: PPUSH
26365: CALL_OW 306
26369: IFFALSE 26434
// begin j := GetSide ( i ) ;
26371: LD_ADDR_VAR 0 3
26375: PUSH
26376: LD_VAR 0 2
26380: PPUSH
26381: CALL_OW 255
26385: ST_TO_ADDR
// if j = 8 then
26386: LD_VAR 0 3
26390: PUSH
26391: LD_INT 8
26393: EQUAL
26394: IFFALSE 26406
// j := 0 else
26396: LD_ADDR_VAR 0 3
26400: PUSH
26401: LD_INT 0
26403: ST_TO_ADDR
26404: GO 26420
// j := j + 1 ;
26406: LD_ADDR_VAR 0 3
26410: PUSH
26411: LD_VAR 0 3
26415: PUSH
26416: LD_INT 1
26418: PLUS
26419: ST_TO_ADDR
// SetSide ( i , j ) ;
26420: LD_VAR 0 2
26424: PPUSH
26425: LD_VAR 0 3
26429: PPUSH
26430: CALL_OW 235
// end ;
26434: GO 26357
26436: POP
26437: POP
// end ;
26438: LD_VAR 0 1
26442: RET
// export function hHackFog ; begin
26443: LD_INT 0
26445: PPUSH
// FogOff ( true ) ;
26446: LD_INT 1
26448: PPUSH
26449: CALL_OW 344
// end ;
26453: LD_VAR 0 1
26457: RET
// export function hHackTeleport ( unit , x , y ) ; begin
26458: LD_INT 0
26460: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
26461: LD_VAR 0 1
26465: PPUSH
26466: LD_VAR 0 2
26470: PPUSH
26471: LD_VAR 0 3
26475: PPUSH
26476: LD_INT 1
26478: PPUSH
26479: LD_INT 1
26481: PPUSH
26482: CALL_OW 483
// CenterOnXY ( x , y ) ;
26486: LD_VAR 0 2
26490: PPUSH
26491: LD_VAR 0 3
26495: PPUSH
26496: CALL_OW 84
// end ; end_of_file
26500: LD_VAR 0 4
26504: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
26505: LD_INT 0
26507: PPUSH
26508: PPUSH
26509: PPUSH
26510: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
26511: LD_VAR 0 1
26515: PPUSH
26516: CALL_OW 264
26520: PUSH
26521: LD_EXP 25
26525: EQUAL
26526: IFFALSE 26598
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
26528: LD_INT 68
26530: PPUSH
26531: LD_VAR 0 1
26535: PPUSH
26536: CALL_OW 255
26540: PPUSH
26541: CALL_OW 321
26545: PUSH
26546: LD_INT 2
26548: EQUAL
26549: IFFALSE 26561
// eff := 70 else
26551: LD_ADDR_VAR 0 4
26555: PUSH
26556: LD_INT 70
26558: ST_TO_ADDR
26559: GO 26569
// eff := 30 ;
26561: LD_ADDR_VAR 0 4
26565: PUSH
26566: LD_INT 30
26568: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
26569: LD_VAR 0 1
26573: PPUSH
26574: CALL_OW 250
26578: PPUSH
26579: LD_VAR 0 1
26583: PPUSH
26584: CALL_OW 251
26588: PPUSH
26589: LD_VAR 0 4
26593: PPUSH
26594: CALL_OW 495
// end ; end ;
26598: LD_VAR 0 2
26602: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
26603: LD_INT 0
26605: PPUSH
// end ;
26606: LD_VAR 0 4
26610: RET
// export function SOS_Command ( cmd ) ; begin
26611: LD_INT 0
26613: PPUSH
// end ;
26614: LD_VAR 0 2
26618: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
26619: LD_INT 0
26621: PPUSH
// end ;
26622: LD_VAR 0 6
26626: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
26627: LD_INT 0
26629: PPUSH
26630: PPUSH
// if not vehicle or not factory then
26631: LD_VAR 0 1
26635: NOT
26636: PUSH
26637: LD_VAR 0 2
26641: NOT
26642: OR
26643: IFFALSE 26647
// exit ;
26645: GO 26878
// if factoryWaypoints >= factory then
26647: LD_EXP 98
26651: PUSH
26652: LD_VAR 0 2
26656: GREATEREQUAL
26657: IFFALSE 26878
// if factoryWaypoints [ factory ] then
26659: LD_EXP 98
26663: PUSH
26664: LD_VAR 0 2
26668: ARRAY
26669: IFFALSE 26878
// begin if GetControl ( vehicle ) = control_manual then
26671: LD_VAR 0 1
26675: PPUSH
26676: CALL_OW 263
26680: PUSH
26681: LD_INT 1
26683: EQUAL
26684: IFFALSE 26765
// begin driver := IsDrivenBy ( vehicle ) ;
26686: LD_ADDR_VAR 0 4
26690: PUSH
26691: LD_VAR 0 1
26695: PPUSH
26696: CALL_OW 311
26700: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
26701: LD_VAR 0 4
26705: PPUSH
26706: LD_EXP 98
26710: PUSH
26711: LD_VAR 0 2
26715: ARRAY
26716: PUSH
26717: LD_INT 3
26719: ARRAY
26720: PPUSH
26721: LD_EXP 98
26725: PUSH
26726: LD_VAR 0 2
26730: ARRAY
26731: PUSH
26732: LD_INT 4
26734: ARRAY
26735: PPUSH
26736: CALL_OW 171
// AddComExitVehicle ( driver ) ;
26740: LD_VAR 0 4
26744: PPUSH
26745: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
26749: LD_VAR 0 4
26753: PPUSH
26754: LD_VAR 0 2
26758: PPUSH
26759: CALL_OW 180
// end else
26763: GO 26878
// if GetControl ( vehicle ) = control_remote then
26765: LD_VAR 0 1
26769: PPUSH
26770: CALL_OW 263
26774: PUSH
26775: LD_INT 2
26777: EQUAL
26778: IFFALSE 26839
// begin wait ( 0 0$2 ) ;
26780: LD_INT 70
26782: PPUSH
26783: CALL_OW 67
// if Connect ( vehicle ) then
26787: LD_VAR 0 1
26791: PPUSH
26792: CALL 39102 0 1
26796: IFFALSE 26837
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
26798: LD_VAR 0 1
26802: PPUSH
26803: LD_EXP 98
26807: PUSH
26808: LD_VAR 0 2
26812: ARRAY
26813: PUSH
26814: LD_INT 3
26816: ARRAY
26817: PPUSH
26818: LD_EXP 98
26822: PUSH
26823: LD_VAR 0 2
26827: ARRAY
26828: PUSH
26829: LD_INT 4
26831: ARRAY
26832: PPUSH
26833: CALL_OW 171
// end else
26837: GO 26878
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
26839: LD_VAR 0 1
26843: PPUSH
26844: LD_EXP 98
26848: PUSH
26849: LD_VAR 0 2
26853: ARRAY
26854: PUSH
26855: LD_INT 3
26857: ARRAY
26858: PPUSH
26859: LD_EXP 98
26863: PUSH
26864: LD_VAR 0 2
26868: ARRAY
26869: PUSH
26870: LD_INT 4
26872: ARRAY
26873: PPUSH
26874: CALL_OW 171
// end ; end ;
26878: LD_VAR 0 3
26882: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
26883: LD_INT 0
26885: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
26886: LD_VAR 0 1
26890: PUSH
26891: LD_INT 250
26893: EQUAL
26894: PUSH
26895: LD_VAR 0 2
26899: PPUSH
26900: CALL_OW 264
26904: PUSH
26905: LD_EXP 28
26909: EQUAL
26910: AND
26911: IFFALSE 26932
// MinerPlaceMine ( unit , x , y ) ;
26913: LD_VAR 0 2
26917: PPUSH
26918: LD_VAR 0 4
26922: PPUSH
26923: LD_VAR 0 5
26927: PPUSH
26928: CALL 29660 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
26932: LD_VAR 0 1
26936: PUSH
26937: LD_INT 251
26939: EQUAL
26940: PUSH
26941: LD_VAR 0 2
26945: PPUSH
26946: CALL_OW 264
26950: PUSH
26951: LD_EXP 28
26955: EQUAL
26956: AND
26957: IFFALSE 26978
// MinerDetonateMine ( unit , x , y ) ;
26959: LD_VAR 0 2
26963: PPUSH
26964: LD_VAR 0 4
26968: PPUSH
26969: LD_VAR 0 5
26973: PPUSH
26974: CALL 29937 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
26978: LD_VAR 0 1
26982: PUSH
26983: LD_INT 252
26985: EQUAL
26986: PUSH
26987: LD_VAR 0 2
26991: PPUSH
26992: CALL_OW 264
26996: PUSH
26997: LD_EXP 28
27001: EQUAL
27002: AND
27003: IFFALSE 27024
// MinerCreateMinefield ( unit , x , y ) ;
27005: LD_VAR 0 2
27009: PPUSH
27010: LD_VAR 0 4
27014: PPUSH
27015: LD_VAR 0 5
27019: PPUSH
27020: CALL 30354 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
27024: LD_VAR 0 1
27028: PUSH
27029: LD_INT 253
27031: EQUAL
27032: PUSH
27033: LD_VAR 0 2
27037: PPUSH
27038: CALL_OW 257
27042: PUSH
27043: LD_INT 5
27045: EQUAL
27046: AND
27047: IFFALSE 27068
// ComBinocular ( unit , x , y ) ;
27049: LD_VAR 0 2
27053: PPUSH
27054: LD_VAR 0 4
27058: PPUSH
27059: LD_VAR 0 5
27063: PPUSH
27064: CALL 30725 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
27068: LD_VAR 0 1
27072: PUSH
27073: LD_INT 254
27075: EQUAL
27076: PUSH
27077: LD_VAR 0 2
27081: PPUSH
27082: CALL_OW 264
27086: PUSH
27087: LD_EXP 23
27091: EQUAL
27092: AND
27093: PUSH
27094: LD_VAR 0 3
27098: PPUSH
27099: CALL_OW 263
27103: PUSH
27104: LD_INT 3
27106: EQUAL
27107: AND
27108: IFFALSE 27124
// HackDestroyVehicle ( unit , selectedUnit ) ;
27110: LD_VAR 0 2
27114: PPUSH
27115: LD_VAR 0 3
27119: PPUSH
27120: CALL 29020 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
27124: LD_VAR 0 1
27128: PUSH
27129: LD_INT 255
27131: EQUAL
27132: PUSH
27133: LD_VAR 0 2
27137: PPUSH
27138: CALL_OW 264
27142: PUSH
27143: LD_INT 14
27145: PUSH
27146: LD_INT 53
27148: PUSH
27149: EMPTY
27150: LIST
27151: LIST
27152: IN
27153: AND
27154: PUSH
27155: LD_VAR 0 4
27159: PPUSH
27160: LD_VAR 0 5
27164: PPUSH
27165: CALL_OW 488
27169: AND
27170: IFFALSE 27194
// CutTreeXYR ( unit , x , y , 12 ) ;
27172: LD_VAR 0 2
27176: PPUSH
27177: LD_VAR 0 4
27181: PPUSH
27182: LD_VAR 0 5
27186: PPUSH
27187: LD_INT 12
27189: PPUSH
27190: CALL 27586 0 4
// if cmd = 256 then
27194: LD_VAR 0 1
27198: PUSH
27199: LD_INT 256
27201: EQUAL
27202: IFFALSE 27223
// SetFactoryWaypoint ( unit , x , y ) ;
27204: LD_VAR 0 2
27208: PPUSH
27209: LD_VAR 0 4
27213: PPUSH
27214: LD_VAR 0 5
27218: PPUSH
27219: CALL 27228 0 3
// end ;
27223: LD_VAR 0 6
27227: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
27228: LD_INT 0
27230: PPUSH
27231: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
27232: LD_VAR 0 1
27236: NOT
27237: PUSH
27238: LD_VAR 0 2
27242: PPUSH
27243: LD_VAR 0 3
27247: PPUSH
27248: CALL_OW 488
27252: NOT
27253: OR
27254: PUSH
27255: LD_VAR 0 1
27259: PPUSH
27260: CALL_OW 266
27264: PUSH
27265: LD_INT 3
27267: NONEQUAL
27268: PUSH
27269: LD_VAR 0 1
27273: PPUSH
27274: CALL_OW 247
27278: PUSH
27279: LD_INT 1
27281: EQUAL
27282: NOT
27283: AND
27284: OR
27285: IFFALSE 27289
// exit ;
27287: GO 27438
// if GetType ( factory ) = unit_human then
27289: LD_VAR 0 1
27293: PPUSH
27294: CALL_OW 247
27298: PUSH
27299: LD_INT 1
27301: EQUAL
27302: IFFALSE 27319
// factory := IsInUnit ( factory ) ;
27304: LD_ADDR_VAR 0 1
27308: PUSH
27309: LD_VAR 0 1
27313: PPUSH
27314: CALL_OW 310
27318: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
27319: LD_VAR 0 1
27323: PPUSH
27324: CALL_OW 266
27328: PUSH
27329: LD_INT 3
27331: NONEQUAL
27332: IFFALSE 27336
// exit ;
27334: GO 27438
// if HexInfo ( x , y ) = factory then
27336: LD_VAR 0 2
27340: PPUSH
27341: LD_VAR 0 3
27345: PPUSH
27346: CALL_OW 428
27350: PUSH
27351: LD_VAR 0 1
27355: EQUAL
27356: IFFALSE 27383
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
27358: LD_ADDR_EXP 98
27362: PUSH
27363: LD_EXP 98
27367: PPUSH
27368: LD_VAR 0 1
27372: PPUSH
27373: LD_INT 0
27375: PPUSH
27376: CALL_OW 1
27380: ST_TO_ADDR
27381: GO 27434
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
27383: LD_ADDR_EXP 98
27387: PUSH
27388: LD_EXP 98
27392: PPUSH
27393: LD_VAR 0 1
27397: PPUSH
27398: LD_VAR 0 1
27402: PPUSH
27403: CALL_OW 255
27407: PUSH
27408: LD_VAR 0 1
27412: PUSH
27413: LD_VAR 0 2
27417: PUSH
27418: LD_VAR 0 3
27422: PUSH
27423: EMPTY
27424: LIST
27425: LIST
27426: LIST
27427: LIST
27428: PPUSH
27429: CALL_OW 1
27433: ST_TO_ADDR
// UpdateFactoryWaypoints ;
27434: CALL 27443 0 0
// end ;
27438: LD_VAR 0 4
27442: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
27443: LD_INT 0
27445: PPUSH
27446: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
27447: LD_STRING resetFactoryWaypoint();
27449: PPUSH
27450: CALL_OW 559
// if factoryWaypoints then
27454: LD_EXP 98
27458: IFFALSE 27581
// begin for i := 1 to factoryWaypoints do
27460: LD_ADDR_VAR 0 2
27464: PUSH
27465: DOUBLE
27466: LD_INT 1
27468: DEC
27469: ST_TO_ADDR
27470: LD_EXP 98
27474: PUSH
27475: FOR_TO
27476: IFFALSE 27579
// if factoryWaypoints [ i ] then
27478: LD_EXP 98
27482: PUSH
27483: LD_VAR 0 2
27487: ARRAY
27488: IFFALSE 27577
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
27490: LD_STRING setFactoryWaypointXY(
27492: PUSH
27493: LD_EXP 98
27497: PUSH
27498: LD_VAR 0 2
27502: ARRAY
27503: PUSH
27504: LD_INT 1
27506: ARRAY
27507: STR
27508: PUSH
27509: LD_STRING ,
27511: STR
27512: PUSH
27513: LD_EXP 98
27517: PUSH
27518: LD_VAR 0 2
27522: ARRAY
27523: PUSH
27524: LD_INT 2
27526: ARRAY
27527: STR
27528: PUSH
27529: LD_STRING ,
27531: STR
27532: PUSH
27533: LD_EXP 98
27537: PUSH
27538: LD_VAR 0 2
27542: ARRAY
27543: PUSH
27544: LD_INT 3
27546: ARRAY
27547: STR
27548: PUSH
27549: LD_STRING ,
27551: STR
27552: PUSH
27553: LD_EXP 98
27557: PUSH
27558: LD_VAR 0 2
27562: ARRAY
27563: PUSH
27564: LD_INT 4
27566: ARRAY
27567: STR
27568: PUSH
27569: LD_STRING )
27571: STR
27572: PPUSH
27573: CALL_OW 559
27577: GO 27475
27579: POP
27580: POP
// end ; end ;
27581: LD_VAR 0 1
27585: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
27586: LD_INT 0
27588: PPUSH
27589: PPUSH
27590: PPUSH
27591: PPUSH
27592: PPUSH
27593: PPUSH
27594: PPUSH
27595: PPUSH
27596: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
27597: LD_VAR 0 1
27601: NOT
27602: PUSH
27603: LD_VAR 0 2
27607: PPUSH
27608: LD_VAR 0 3
27612: PPUSH
27613: CALL_OW 488
27617: NOT
27618: OR
27619: PUSH
27620: LD_VAR 0 4
27624: NOT
27625: OR
27626: IFFALSE 27630
// exit ;
27628: GO 27970
// list := [ ] ;
27630: LD_ADDR_VAR 0 13
27634: PUSH
27635: EMPTY
27636: ST_TO_ADDR
// if x - r < 0 then
27637: LD_VAR 0 2
27641: PUSH
27642: LD_VAR 0 4
27646: MINUS
27647: PUSH
27648: LD_INT 0
27650: LESS
27651: IFFALSE 27663
// min_x := 0 else
27653: LD_ADDR_VAR 0 7
27657: PUSH
27658: LD_INT 0
27660: ST_TO_ADDR
27661: GO 27679
// min_x := x - r ;
27663: LD_ADDR_VAR 0 7
27667: PUSH
27668: LD_VAR 0 2
27672: PUSH
27673: LD_VAR 0 4
27677: MINUS
27678: ST_TO_ADDR
// if y - r < 0 then
27679: LD_VAR 0 3
27683: PUSH
27684: LD_VAR 0 4
27688: MINUS
27689: PUSH
27690: LD_INT 0
27692: LESS
27693: IFFALSE 27705
// min_y := 0 else
27695: LD_ADDR_VAR 0 8
27699: PUSH
27700: LD_INT 0
27702: ST_TO_ADDR
27703: GO 27721
// min_y := y - r ;
27705: LD_ADDR_VAR 0 8
27709: PUSH
27710: LD_VAR 0 3
27714: PUSH
27715: LD_VAR 0 4
27719: MINUS
27720: ST_TO_ADDR
// max_x := x + r ;
27721: LD_ADDR_VAR 0 9
27725: PUSH
27726: LD_VAR 0 2
27730: PUSH
27731: LD_VAR 0 4
27735: PLUS
27736: ST_TO_ADDR
// max_y := y + r ;
27737: LD_ADDR_VAR 0 10
27741: PUSH
27742: LD_VAR 0 3
27746: PUSH
27747: LD_VAR 0 4
27751: PLUS
27752: ST_TO_ADDR
// for _x = min_x to max_x do
27753: LD_ADDR_VAR 0 11
27757: PUSH
27758: DOUBLE
27759: LD_VAR 0 7
27763: DEC
27764: ST_TO_ADDR
27765: LD_VAR 0 9
27769: PUSH
27770: FOR_TO
27771: IFFALSE 27888
// for _y = min_y to max_y do
27773: LD_ADDR_VAR 0 12
27777: PUSH
27778: DOUBLE
27779: LD_VAR 0 8
27783: DEC
27784: ST_TO_ADDR
27785: LD_VAR 0 10
27789: PUSH
27790: FOR_TO
27791: IFFALSE 27884
// begin if not ValidHex ( _x , _y ) then
27793: LD_VAR 0 11
27797: PPUSH
27798: LD_VAR 0 12
27802: PPUSH
27803: CALL_OW 488
27807: NOT
27808: IFFALSE 27812
// continue ;
27810: GO 27790
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
27812: LD_VAR 0 11
27816: PPUSH
27817: LD_VAR 0 12
27821: PPUSH
27822: CALL_OW 351
27826: PUSH
27827: LD_VAR 0 11
27831: PPUSH
27832: LD_VAR 0 12
27836: PPUSH
27837: CALL_OW 554
27841: AND
27842: IFFALSE 27882
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
27844: LD_ADDR_VAR 0 13
27848: PUSH
27849: LD_VAR 0 13
27853: PPUSH
27854: LD_VAR 0 13
27858: PUSH
27859: LD_INT 1
27861: PLUS
27862: PPUSH
27863: LD_VAR 0 11
27867: PUSH
27868: LD_VAR 0 12
27872: PUSH
27873: EMPTY
27874: LIST
27875: LIST
27876: PPUSH
27877: CALL_OW 2
27881: ST_TO_ADDR
// end ;
27882: GO 27790
27884: POP
27885: POP
27886: GO 27770
27888: POP
27889: POP
// if not list then
27890: LD_VAR 0 13
27894: NOT
27895: IFFALSE 27899
// exit ;
27897: GO 27970
// for i in list do
27899: LD_ADDR_VAR 0 6
27903: PUSH
27904: LD_VAR 0 13
27908: PUSH
27909: FOR_IN
27910: IFFALSE 27968
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
27912: LD_VAR 0 1
27916: PPUSH
27917: LD_STRING M
27919: PUSH
27920: LD_VAR 0 6
27924: PUSH
27925: LD_INT 1
27927: ARRAY
27928: PUSH
27929: LD_VAR 0 6
27933: PUSH
27934: LD_INT 2
27936: ARRAY
27937: PUSH
27938: LD_INT 0
27940: PUSH
27941: LD_INT 0
27943: PUSH
27944: LD_INT 0
27946: PUSH
27947: LD_INT 0
27949: PUSH
27950: EMPTY
27951: LIST
27952: LIST
27953: LIST
27954: LIST
27955: LIST
27956: LIST
27957: LIST
27958: PUSH
27959: EMPTY
27960: LIST
27961: PPUSH
27962: CALL_OW 447
27966: GO 27909
27968: POP
27969: POP
// end ;
27970: LD_VAR 0 5
27974: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
27975: LD_EXP 99
27979: NOT
27980: IFFALSE 28030
27982: GO 27984
27984: DISABLE
// begin initHack := true ;
27985: LD_ADDR_EXP 99
27989: PUSH
27990: LD_INT 1
27992: ST_TO_ADDR
// hackTanks := [ ] ;
27993: LD_ADDR_EXP 100
27997: PUSH
27998: EMPTY
27999: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
28000: LD_ADDR_EXP 101
28004: PUSH
28005: EMPTY
28006: ST_TO_ADDR
// hackLimit := 3 ;
28007: LD_ADDR_EXP 102
28011: PUSH
28012: LD_INT 3
28014: ST_TO_ADDR
// hackDist := 12 ;
28015: LD_ADDR_EXP 103
28019: PUSH
28020: LD_INT 12
28022: ST_TO_ADDR
// hackCounter := [ ] ;
28023: LD_ADDR_EXP 104
28027: PUSH
28028: EMPTY
28029: ST_TO_ADDR
// end ;
28030: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
28031: LD_EXP 99
28035: PUSH
28036: LD_INT 34
28038: PUSH
28039: LD_EXP 23
28043: PUSH
28044: EMPTY
28045: LIST
28046: LIST
28047: PPUSH
28048: CALL_OW 69
28052: AND
28053: IFFALSE 28308
28055: GO 28057
28057: DISABLE
28058: LD_INT 0
28060: PPUSH
28061: PPUSH
// begin enable ;
28062: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
28063: LD_ADDR_VAR 0 1
28067: PUSH
28068: LD_INT 34
28070: PUSH
28071: LD_EXP 23
28075: PUSH
28076: EMPTY
28077: LIST
28078: LIST
28079: PPUSH
28080: CALL_OW 69
28084: PUSH
28085: FOR_IN
28086: IFFALSE 28306
// begin if not i in hackTanks then
28088: LD_VAR 0 1
28092: PUSH
28093: LD_EXP 100
28097: IN
28098: NOT
28099: IFFALSE 28182
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
28101: LD_ADDR_EXP 100
28105: PUSH
28106: LD_EXP 100
28110: PPUSH
28111: LD_EXP 100
28115: PUSH
28116: LD_INT 1
28118: PLUS
28119: PPUSH
28120: LD_VAR 0 1
28124: PPUSH
28125: CALL_OW 1
28129: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
28130: LD_ADDR_EXP 101
28134: PUSH
28135: LD_EXP 101
28139: PPUSH
28140: LD_EXP 101
28144: PUSH
28145: LD_INT 1
28147: PLUS
28148: PPUSH
28149: EMPTY
28150: PPUSH
28151: CALL_OW 1
28155: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
28156: LD_ADDR_EXP 104
28160: PUSH
28161: LD_EXP 104
28165: PPUSH
28166: LD_EXP 104
28170: PUSH
28171: LD_INT 1
28173: PLUS
28174: PPUSH
28175: EMPTY
28176: PPUSH
28177: CALL_OW 1
28181: ST_TO_ADDR
// end ; if not IsOk ( i ) then
28182: LD_VAR 0 1
28186: PPUSH
28187: CALL_OW 302
28191: NOT
28192: IFFALSE 28205
// begin HackUnlinkAll ( i ) ;
28194: LD_VAR 0 1
28198: PPUSH
28199: CALL 28311 0 1
// continue ;
28203: GO 28085
// end ; HackCheckCapturedStatus ( i ) ;
28205: LD_VAR 0 1
28209: PPUSH
28210: CALL 28754 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
28214: LD_ADDR_VAR 0 2
28218: PUSH
28219: LD_INT 81
28221: PUSH
28222: LD_VAR 0 1
28226: PPUSH
28227: CALL_OW 255
28231: PUSH
28232: EMPTY
28233: LIST
28234: LIST
28235: PUSH
28236: LD_INT 33
28238: PUSH
28239: LD_INT 3
28241: PUSH
28242: EMPTY
28243: LIST
28244: LIST
28245: PUSH
28246: LD_INT 91
28248: PUSH
28249: LD_VAR 0 1
28253: PUSH
28254: LD_EXP 103
28258: PUSH
28259: EMPTY
28260: LIST
28261: LIST
28262: LIST
28263: PUSH
28264: LD_INT 50
28266: PUSH
28267: EMPTY
28268: LIST
28269: PUSH
28270: EMPTY
28271: LIST
28272: LIST
28273: LIST
28274: LIST
28275: PPUSH
28276: CALL_OW 69
28280: ST_TO_ADDR
// if not tmp then
28281: LD_VAR 0 2
28285: NOT
28286: IFFALSE 28290
// continue ;
28288: GO 28085
// HackLink ( i , tmp ) ;
28290: LD_VAR 0 1
28294: PPUSH
28295: LD_VAR 0 2
28299: PPUSH
28300: CALL 28447 0 2
// end ;
28304: GO 28085
28306: POP
28307: POP
// end ;
28308: PPOPN 2
28310: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
28311: LD_INT 0
28313: PPUSH
28314: PPUSH
28315: PPUSH
// if not hack in hackTanks then
28316: LD_VAR 0 1
28320: PUSH
28321: LD_EXP 100
28325: IN
28326: NOT
28327: IFFALSE 28331
// exit ;
28329: GO 28442
// index := GetElementIndex ( hackTanks , hack ) ;
28331: LD_ADDR_VAR 0 4
28335: PUSH
28336: LD_EXP 100
28340: PPUSH
28341: LD_VAR 0 1
28345: PPUSH
28346: CALL 35916 0 2
28350: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
28351: LD_EXP 101
28355: PUSH
28356: LD_VAR 0 4
28360: ARRAY
28361: IFFALSE 28442
// begin for i in hackTanksCaptured [ index ] do
28363: LD_ADDR_VAR 0 3
28367: PUSH
28368: LD_EXP 101
28372: PUSH
28373: LD_VAR 0 4
28377: ARRAY
28378: PUSH
28379: FOR_IN
28380: IFFALSE 28406
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
28382: LD_VAR 0 3
28386: PUSH
28387: LD_INT 1
28389: ARRAY
28390: PPUSH
28391: LD_VAR 0 3
28395: PUSH
28396: LD_INT 2
28398: ARRAY
28399: PPUSH
28400: CALL_OW 235
28404: GO 28379
28406: POP
28407: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
28408: LD_ADDR_EXP 101
28412: PUSH
28413: LD_EXP 101
28417: PPUSH
28418: LD_VAR 0 4
28422: PPUSH
28423: EMPTY
28424: PPUSH
28425: CALL_OW 1
28429: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
28430: LD_VAR 0 1
28434: PPUSH
28435: LD_INT 0
28437: PPUSH
28438: CALL_OW 505
// end ; end ;
28442: LD_VAR 0 2
28446: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
28447: LD_INT 0
28449: PPUSH
28450: PPUSH
28451: PPUSH
// if not hack in hackTanks or not vehicles then
28452: LD_VAR 0 1
28456: PUSH
28457: LD_EXP 100
28461: IN
28462: NOT
28463: PUSH
28464: LD_VAR 0 2
28468: NOT
28469: OR
28470: IFFALSE 28474
// exit ;
28472: GO 28749
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
28474: LD_ADDR_VAR 0 2
28478: PUSH
28479: LD_VAR 0 1
28483: PPUSH
28484: LD_VAR 0 2
28488: PPUSH
28489: LD_INT 1
28491: PPUSH
28492: LD_INT 1
28494: PPUSH
28495: CALL 36566 0 4
28499: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
28500: LD_ADDR_VAR 0 5
28504: PUSH
28505: LD_EXP 100
28509: PPUSH
28510: LD_VAR 0 1
28514: PPUSH
28515: CALL 35916 0 2
28519: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
28520: LD_EXP 101
28524: PUSH
28525: LD_VAR 0 5
28529: ARRAY
28530: PUSH
28531: LD_EXP 102
28535: LESS
28536: IFFALSE 28725
// begin for i := 1 to vehicles do
28538: LD_ADDR_VAR 0 4
28542: PUSH
28543: DOUBLE
28544: LD_INT 1
28546: DEC
28547: ST_TO_ADDR
28548: LD_VAR 0 2
28552: PUSH
28553: FOR_TO
28554: IFFALSE 28723
// begin if hackTanksCaptured [ index ] = hackLimit then
28556: LD_EXP 101
28560: PUSH
28561: LD_VAR 0 5
28565: ARRAY
28566: PUSH
28567: LD_EXP 102
28571: EQUAL
28572: IFFALSE 28576
// break ;
28574: GO 28723
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
28576: LD_ADDR_EXP 104
28580: PUSH
28581: LD_EXP 104
28585: PPUSH
28586: LD_VAR 0 5
28590: PPUSH
28591: LD_EXP 104
28595: PUSH
28596: LD_VAR 0 5
28600: ARRAY
28601: PUSH
28602: LD_INT 1
28604: PLUS
28605: PPUSH
28606: CALL_OW 1
28610: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
28611: LD_ADDR_EXP 101
28615: PUSH
28616: LD_EXP 101
28620: PPUSH
28621: LD_VAR 0 5
28625: PUSH
28626: LD_EXP 101
28630: PUSH
28631: LD_VAR 0 5
28635: ARRAY
28636: PUSH
28637: LD_INT 1
28639: PLUS
28640: PUSH
28641: EMPTY
28642: LIST
28643: LIST
28644: PPUSH
28645: LD_VAR 0 2
28649: PUSH
28650: LD_VAR 0 4
28654: ARRAY
28655: PUSH
28656: LD_VAR 0 2
28660: PUSH
28661: LD_VAR 0 4
28665: ARRAY
28666: PPUSH
28667: CALL_OW 255
28671: PUSH
28672: EMPTY
28673: LIST
28674: LIST
28675: PPUSH
28676: CALL 36131 0 3
28680: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
28681: LD_VAR 0 2
28685: PUSH
28686: LD_VAR 0 4
28690: ARRAY
28691: PPUSH
28692: LD_VAR 0 1
28696: PPUSH
28697: CALL_OW 255
28701: PPUSH
28702: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
28706: LD_VAR 0 2
28710: PUSH
28711: LD_VAR 0 4
28715: ARRAY
28716: PPUSH
28717: CALL_OW 141
// end ;
28721: GO 28553
28723: POP
28724: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
28725: LD_VAR 0 1
28729: PPUSH
28730: LD_EXP 101
28734: PUSH
28735: LD_VAR 0 5
28739: ARRAY
28740: PUSH
28741: LD_INT 0
28743: PLUS
28744: PPUSH
28745: CALL_OW 505
// end ;
28749: LD_VAR 0 3
28753: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
28754: LD_INT 0
28756: PPUSH
28757: PPUSH
28758: PPUSH
28759: PPUSH
// if not hack in hackTanks then
28760: LD_VAR 0 1
28764: PUSH
28765: LD_EXP 100
28769: IN
28770: NOT
28771: IFFALSE 28775
// exit ;
28773: GO 29015
// index := GetElementIndex ( hackTanks , hack ) ;
28775: LD_ADDR_VAR 0 4
28779: PUSH
28780: LD_EXP 100
28784: PPUSH
28785: LD_VAR 0 1
28789: PPUSH
28790: CALL 35916 0 2
28794: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
28795: LD_ADDR_VAR 0 3
28799: PUSH
28800: DOUBLE
28801: LD_EXP 101
28805: PUSH
28806: LD_VAR 0 4
28810: ARRAY
28811: INC
28812: ST_TO_ADDR
28813: LD_INT 1
28815: PUSH
28816: FOR_DOWNTO
28817: IFFALSE 28989
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
28819: LD_ADDR_VAR 0 5
28823: PUSH
28824: LD_EXP 101
28828: PUSH
28829: LD_VAR 0 4
28833: ARRAY
28834: PUSH
28835: LD_VAR 0 3
28839: ARRAY
28840: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
28841: LD_VAR 0 5
28845: PUSH
28846: LD_INT 1
28848: ARRAY
28849: PPUSH
28850: CALL_OW 302
28854: NOT
28855: PUSH
28856: LD_VAR 0 5
28860: PUSH
28861: LD_INT 1
28863: ARRAY
28864: PPUSH
28865: CALL_OW 255
28869: PUSH
28870: LD_VAR 0 1
28874: PPUSH
28875: CALL_OW 255
28879: NONEQUAL
28880: OR
28881: IFFALSE 28987
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
28883: LD_VAR 0 5
28887: PUSH
28888: LD_INT 1
28890: ARRAY
28891: PPUSH
28892: CALL_OW 305
28896: PUSH
28897: LD_VAR 0 5
28901: PUSH
28902: LD_INT 1
28904: ARRAY
28905: PPUSH
28906: CALL_OW 255
28910: PUSH
28911: LD_VAR 0 1
28915: PPUSH
28916: CALL_OW 255
28920: EQUAL
28921: AND
28922: IFFALSE 28946
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
28924: LD_VAR 0 5
28928: PUSH
28929: LD_INT 1
28931: ARRAY
28932: PPUSH
28933: LD_VAR 0 5
28937: PUSH
28938: LD_INT 2
28940: ARRAY
28941: PPUSH
28942: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
28946: LD_ADDR_EXP 101
28950: PUSH
28951: LD_EXP 101
28955: PPUSH
28956: LD_VAR 0 4
28960: PPUSH
28961: LD_EXP 101
28965: PUSH
28966: LD_VAR 0 4
28970: ARRAY
28971: PPUSH
28972: LD_VAR 0 3
28976: PPUSH
28977: CALL_OW 3
28981: PPUSH
28982: CALL_OW 1
28986: ST_TO_ADDR
// end ; end ;
28987: GO 28816
28989: POP
28990: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
28991: LD_VAR 0 1
28995: PPUSH
28996: LD_EXP 101
29000: PUSH
29001: LD_VAR 0 4
29005: ARRAY
29006: PUSH
29007: LD_INT 0
29009: PLUS
29010: PPUSH
29011: CALL_OW 505
// end ;
29015: LD_VAR 0 2
29019: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
29020: LD_INT 0
29022: PPUSH
29023: PPUSH
29024: PPUSH
29025: PPUSH
// if not hack in hackTanks then
29026: LD_VAR 0 1
29030: PUSH
29031: LD_EXP 100
29035: IN
29036: NOT
29037: IFFALSE 29041
// exit ;
29039: GO 29126
// index := GetElementIndex ( hackTanks , hack ) ;
29041: LD_ADDR_VAR 0 5
29045: PUSH
29046: LD_EXP 100
29050: PPUSH
29051: LD_VAR 0 1
29055: PPUSH
29056: CALL 35916 0 2
29060: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
29061: LD_ADDR_VAR 0 4
29065: PUSH
29066: DOUBLE
29067: LD_INT 1
29069: DEC
29070: ST_TO_ADDR
29071: LD_EXP 101
29075: PUSH
29076: LD_VAR 0 5
29080: ARRAY
29081: PUSH
29082: FOR_TO
29083: IFFALSE 29124
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
29085: LD_EXP 101
29089: PUSH
29090: LD_VAR 0 5
29094: ARRAY
29095: PUSH
29096: LD_VAR 0 4
29100: ARRAY
29101: PUSH
29102: LD_INT 1
29104: ARRAY
29105: PUSH
29106: LD_VAR 0 2
29110: EQUAL
29111: IFFALSE 29122
// KillUnit ( vehicle ) ;
29113: LD_VAR 0 2
29117: PPUSH
29118: CALL_OW 66
29122: GO 29082
29124: POP
29125: POP
// end ;
29126: LD_VAR 0 3
29130: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
29131: LD_EXP 105
29135: NOT
29136: IFFALSE 29171
29138: GO 29140
29140: DISABLE
// begin initMiner := true ;
29141: LD_ADDR_EXP 105
29145: PUSH
29146: LD_INT 1
29148: ST_TO_ADDR
// minersList := [ ] ;
29149: LD_ADDR_EXP 106
29153: PUSH
29154: EMPTY
29155: ST_TO_ADDR
// minerMinesList := [ ] ;
29156: LD_ADDR_EXP 107
29160: PUSH
29161: EMPTY
29162: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
29163: LD_ADDR_EXP 108
29167: PUSH
29168: LD_INT 5
29170: ST_TO_ADDR
// end ;
29171: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
29172: LD_EXP 105
29176: PUSH
29177: LD_INT 34
29179: PUSH
29180: LD_EXP 28
29184: PUSH
29185: EMPTY
29186: LIST
29187: LIST
29188: PPUSH
29189: CALL_OW 69
29193: AND
29194: IFFALSE 29657
29196: GO 29198
29198: DISABLE
29199: LD_INT 0
29201: PPUSH
29202: PPUSH
29203: PPUSH
29204: PPUSH
// begin enable ;
29205: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
29206: LD_ADDR_VAR 0 1
29210: PUSH
29211: LD_INT 34
29213: PUSH
29214: LD_EXP 28
29218: PUSH
29219: EMPTY
29220: LIST
29221: LIST
29222: PPUSH
29223: CALL_OW 69
29227: PUSH
29228: FOR_IN
29229: IFFALSE 29301
// begin if not i in minersList then
29231: LD_VAR 0 1
29235: PUSH
29236: LD_EXP 106
29240: IN
29241: NOT
29242: IFFALSE 29299
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
29244: LD_ADDR_EXP 106
29248: PUSH
29249: LD_EXP 106
29253: PPUSH
29254: LD_EXP 106
29258: PUSH
29259: LD_INT 1
29261: PLUS
29262: PPUSH
29263: LD_VAR 0 1
29267: PPUSH
29268: CALL_OW 1
29272: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
29273: LD_ADDR_EXP 107
29277: PUSH
29278: LD_EXP 107
29282: PPUSH
29283: LD_EXP 107
29287: PUSH
29288: LD_INT 1
29290: PLUS
29291: PPUSH
29292: EMPTY
29293: PPUSH
29294: CALL_OW 1
29298: ST_TO_ADDR
// end end ;
29299: GO 29228
29301: POP
29302: POP
// for i := minerMinesList downto 1 do
29303: LD_ADDR_VAR 0 1
29307: PUSH
29308: DOUBLE
29309: LD_EXP 107
29313: INC
29314: ST_TO_ADDR
29315: LD_INT 1
29317: PUSH
29318: FOR_DOWNTO
29319: IFFALSE 29655
// begin if IsLive ( minersList [ i ] ) then
29321: LD_EXP 106
29325: PUSH
29326: LD_VAR 0 1
29330: ARRAY
29331: PPUSH
29332: CALL_OW 300
29336: IFFALSE 29364
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
29338: LD_EXP 106
29342: PUSH
29343: LD_VAR 0 1
29347: ARRAY
29348: PPUSH
29349: LD_EXP 107
29353: PUSH
29354: LD_VAR 0 1
29358: ARRAY
29359: PPUSH
29360: CALL_OW 505
// if not minerMinesList [ i ] then
29364: LD_EXP 107
29368: PUSH
29369: LD_VAR 0 1
29373: ARRAY
29374: NOT
29375: IFFALSE 29379
// continue ;
29377: GO 29318
// for j := minerMinesList [ i ] downto 1 do
29379: LD_ADDR_VAR 0 2
29383: PUSH
29384: DOUBLE
29385: LD_EXP 107
29389: PUSH
29390: LD_VAR 0 1
29394: ARRAY
29395: INC
29396: ST_TO_ADDR
29397: LD_INT 1
29399: PUSH
29400: FOR_DOWNTO
29401: IFFALSE 29651
// begin side := GetSide ( minersList [ i ] ) ;
29403: LD_ADDR_VAR 0 3
29407: PUSH
29408: LD_EXP 106
29412: PUSH
29413: LD_VAR 0 1
29417: ARRAY
29418: PPUSH
29419: CALL_OW 255
29423: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
29424: LD_ADDR_VAR 0 4
29428: PUSH
29429: LD_EXP 107
29433: PUSH
29434: LD_VAR 0 1
29438: ARRAY
29439: PUSH
29440: LD_VAR 0 2
29444: ARRAY
29445: PUSH
29446: LD_INT 1
29448: ARRAY
29449: PPUSH
29450: LD_EXP 107
29454: PUSH
29455: LD_VAR 0 1
29459: ARRAY
29460: PUSH
29461: LD_VAR 0 2
29465: ARRAY
29466: PUSH
29467: LD_INT 2
29469: ARRAY
29470: PPUSH
29471: CALL_OW 428
29475: ST_TO_ADDR
// if not tmp then
29476: LD_VAR 0 4
29480: NOT
29481: IFFALSE 29485
// continue ;
29483: GO 29400
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
29485: LD_VAR 0 4
29489: PUSH
29490: LD_INT 81
29492: PUSH
29493: LD_VAR 0 3
29497: PUSH
29498: EMPTY
29499: LIST
29500: LIST
29501: PPUSH
29502: CALL_OW 69
29506: IN
29507: PUSH
29508: LD_EXP 107
29512: PUSH
29513: LD_VAR 0 1
29517: ARRAY
29518: PUSH
29519: LD_VAR 0 2
29523: ARRAY
29524: PUSH
29525: LD_INT 1
29527: ARRAY
29528: PPUSH
29529: LD_EXP 107
29533: PUSH
29534: LD_VAR 0 1
29538: ARRAY
29539: PUSH
29540: LD_VAR 0 2
29544: ARRAY
29545: PUSH
29546: LD_INT 2
29548: ARRAY
29549: PPUSH
29550: CALL_OW 458
29554: AND
29555: IFFALSE 29649
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
29557: LD_EXP 107
29561: PUSH
29562: LD_VAR 0 1
29566: ARRAY
29567: PUSH
29568: LD_VAR 0 2
29572: ARRAY
29573: PUSH
29574: LD_INT 1
29576: ARRAY
29577: PPUSH
29578: LD_EXP 107
29582: PUSH
29583: LD_VAR 0 1
29587: ARRAY
29588: PUSH
29589: LD_VAR 0 2
29593: ARRAY
29594: PUSH
29595: LD_INT 2
29597: ARRAY
29598: PPUSH
29599: LD_VAR 0 3
29603: PPUSH
29604: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
29608: LD_ADDR_EXP 107
29612: PUSH
29613: LD_EXP 107
29617: PPUSH
29618: LD_VAR 0 1
29622: PPUSH
29623: LD_EXP 107
29627: PUSH
29628: LD_VAR 0 1
29632: ARRAY
29633: PPUSH
29634: LD_VAR 0 2
29638: PPUSH
29639: CALL_OW 3
29643: PPUSH
29644: CALL_OW 1
29648: ST_TO_ADDR
// end ; end ;
29649: GO 29400
29651: POP
29652: POP
// end ;
29653: GO 29318
29655: POP
29656: POP
// end ;
29657: PPOPN 4
29659: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
29660: LD_INT 0
29662: PPUSH
29663: PPUSH
// result := false ;
29664: LD_ADDR_VAR 0 4
29668: PUSH
29669: LD_INT 0
29671: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
29672: LD_VAR 0 1
29676: PPUSH
29677: CALL_OW 264
29681: PUSH
29682: LD_EXP 28
29686: EQUAL
29687: NOT
29688: IFFALSE 29692
// exit ;
29690: GO 29932
// index := GetElementIndex ( minersList , unit ) ;
29692: LD_ADDR_VAR 0 5
29696: PUSH
29697: LD_EXP 106
29701: PPUSH
29702: LD_VAR 0 1
29706: PPUSH
29707: CALL 35916 0 2
29711: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
29712: LD_EXP 107
29716: PUSH
29717: LD_VAR 0 5
29721: ARRAY
29722: PUSH
29723: LD_EXP 108
29727: GREATEREQUAL
29728: IFFALSE 29732
// exit ;
29730: GO 29932
// ComMoveXY ( unit , x , y ) ;
29732: LD_VAR 0 1
29736: PPUSH
29737: LD_VAR 0 2
29741: PPUSH
29742: LD_VAR 0 3
29746: PPUSH
29747: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
29751: LD_INT 35
29753: PPUSH
29754: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
29758: LD_VAR 0 1
29762: PPUSH
29763: LD_VAR 0 2
29767: PPUSH
29768: LD_VAR 0 3
29772: PPUSH
29773: CALL 66635 0 3
29777: NOT
29778: PUSH
29779: LD_VAR 0 1
29783: PPUSH
29784: CALL_OW 314
29788: AND
29789: IFFALSE 29793
// exit ;
29791: GO 29932
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
29793: LD_VAR 0 2
29797: PPUSH
29798: LD_VAR 0 3
29802: PPUSH
29803: CALL_OW 428
29807: PUSH
29808: LD_VAR 0 1
29812: EQUAL
29813: PUSH
29814: LD_VAR 0 1
29818: PPUSH
29819: CALL_OW 314
29823: NOT
29824: AND
29825: IFFALSE 29751
// PlaySoundXY ( x , y , PlantMine ) ;
29827: LD_VAR 0 2
29831: PPUSH
29832: LD_VAR 0 3
29836: PPUSH
29837: LD_STRING PlantMine
29839: PPUSH
29840: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
29844: LD_VAR 0 2
29848: PPUSH
29849: LD_VAR 0 3
29853: PPUSH
29854: LD_VAR 0 1
29858: PPUSH
29859: CALL_OW 255
29863: PPUSH
29864: LD_INT 0
29866: PPUSH
29867: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
29871: LD_ADDR_EXP 107
29875: PUSH
29876: LD_EXP 107
29880: PPUSH
29881: LD_VAR 0 5
29885: PUSH
29886: LD_EXP 107
29890: PUSH
29891: LD_VAR 0 5
29895: ARRAY
29896: PUSH
29897: LD_INT 1
29899: PLUS
29900: PUSH
29901: EMPTY
29902: LIST
29903: LIST
29904: PPUSH
29905: LD_VAR 0 2
29909: PUSH
29910: LD_VAR 0 3
29914: PUSH
29915: EMPTY
29916: LIST
29917: LIST
29918: PPUSH
29919: CALL 36131 0 3
29923: ST_TO_ADDR
// result := true ;
29924: LD_ADDR_VAR 0 4
29928: PUSH
29929: LD_INT 1
29931: ST_TO_ADDR
// end ;
29932: LD_VAR 0 4
29936: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
29937: LD_INT 0
29939: PPUSH
29940: PPUSH
29941: PPUSH
// if not unit in minersList then
29942: LD_VAR 0 1
29946: PUSH
29947: LD_EXP 106
29951: IN
29952: NOT
29953: IFFALSE 29957
// exit ;
29955: GO 30349
// index := GetElementIndex ( minersList , unit ) ;
29957: LD_ADDR_VAR 0 6
29961: PUSH
29962: LD_EXP 106
29966: PPUSH
29967: LD_VAR 0 1
29971: PPUSH
29972: CALL 35916 0 2
29976: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
29977: LD_ADDR_VAR 0 5
29981: PUSH
29982: DOUBLE
29983: LD_EXP 107
29987: PUSH
29988: LD_VAR 0 6
29992: ARRAY
29993: INC
29994: ST_TO_ADDR
29995: LD_INT 1
29997: PUSH
29998: FOR_DOWNTO
29999: IFFALSE 30160
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
30001: LD_EXP 107
30005: PUSH
30006: LD_VAR 0 6
30010: ARRAY
30011: PUSH
30012: LD_VAR 0 5
30016: ARRAY
30017: PUSH
30018: LD_INT 1
30020: ARRAY
30021: PUSH
30022: LD_VAR 0 2
30026: EQUAL
30027: PUSH
30028: LD_EXP 107
30032: PUSH
30033: LD_VAR 0 6
30037: ARRAY
30038: PUSH
30039: LD_VAR 0 5
30043: ARRAY
30044: PUSH
30045: LD_INT 2
30047: ARRAY
30048: PUSH
30049: LD_VAR 0 3
30053: EQUAL
30054: AND
30055: IFFALSE 30158
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
30057: LD_EXP 107
30061: PUSH
30062: LD_VAR 0 6
30066: ARRAY
30067: PUSH
30068: LD_VAR 0 5
30072: ARRAY
30073: PUSH
30074: LD_INT 1
30076: ARRAY
30077: PPUSH
30078: LD_EXP 107
30082: PUSH
30083: LD_VAR 0 6
30087: ARRAY
30088: PUSH
30089: LD_VAR 0 5
30093: ARRAY
30094: PUSH
30095: LD_INT 2
30097: ARRAY
30098: PPUSH
30099: LD_VAR 0 1
30103: PPUSH
30104: CALL_OW 255
30108: PPUSH
30109: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
30113: LD_ADDR_EXP 107
30117: PUSH
30118: LD_EXP 107
30122: PPUSH
30123: LD_VAR 0 6
30127: PPUSH
30128: LD_EXP 107
30132: PUSH
30133: LD_VAR 0 6
30137: ARRAY
30138: PPUSH
30139: LD_VAR 0 5
30143: PPUSH
30144: CALL_OW 3
30148: PPUSH
30149: CALL_OW 1
30153: ST_TO_ADDR
// exit ;
30154: POP
30155: POP
30156: GO 30349
// end ; end ;
30158: GO 29998
30160: POP
30161: POP
// for i := minerMinesList [ index ] downto 1 do
30162: LD_ADDR_VAR 0 5
30166: PUSH
30167: DOUBLE
30168: LD_EXP 107
30172: PUSH
30173: LD_VAR 0 6
30177: ARRAY
30178: INC
30179: ST_TO_ADDR
30180: LD_INT 1
30182: PUSH
30183: FOR_DOWNTO
30184: IFFALSE 30347
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
30186: LD_EXP 107
30190: PUSH
30191: LD_VAR 0 6
30195: ARRAY
30196: PUSH
30197: LD_VAR 0 5
30201: ARRAY
30202: PUSH
30203: LD_INT 1
30205: ARRAY
30206: PPUSH
30207: LD_EXP 107
30211: PUSH
30212: LD_VAR 0 6
30216: ARRAY
30217: PUSH
30218: LD_VAR 0 5
30222: ARRAY
30223: PUSH
30224: LD_INT 2
30226: ARRAY
30227: PPUSH
30228: LD_VAR 0 2
30232: PPUSH
30233: LD_VAR 0 3
30237: PPUSH
30238: CALL_OW 298
30242: PUSH
30243: LD_INT 6
30245: LESS
30246: IFFALSE 30345
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
30248: LD_EXP 107
30252: PUSH
30253: LD_VAR 0 6
30257: ARRAY
30258: PUSH
30259: LD_VAR 0 5
30263: ARRAY
30264: PUSH
30265: LD_INT 1
30267: ARRAY
30268: PPUSH
30269: LD_EXP 107
30273: PUSH
30274: LD_VAR 0 6
30278: ARRAY
30279: PUSH
30280: LD_VAR 0 5
30284: ARRAY
30285: PUSH
30286: LD_INT 2
30288: ARRAY
30289: PPUSH
30290: LD_VAR 0 1
30294: PPUSH
30295: CALL_OW 255
30299: PPUSH
30300: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
30304: LD_ADDR_EXP 107
30308: PUSH
30309: LD_EXP 107
30313: PPUSH
30314: LD_VAR 0 6
30318: PPUSH
30319: LD_EXP 107
30323: PUSH
30324: LD_VAR 0 6
30328: ARRAY
30329: PPUSH
30330: LD_VAR 0 5
30334: PPUSH
30335: CALL_OW 3
30339: PPUSH
30340: CALL_OW 1
30344: ST_TO_ADDR
// end ; end ;
30345: GO 30183
30347: POP
30348: POP
// end ;
30349: LD_VAR 0 4
30353: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
30354: LD_INT 0
30356: PPUSH
30357: PPUSH
30358: PPUSH
30359: PPUSH
30360: PPUSH
30361: PPUSH
30362: PPUSH
30363: PPUSH
30364: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
30365: LD_VAR 0 1
30369: PPUSH
30370: CALL_OW 264
30374: PUSH
30375: LD_EXP 28
30379: EQUAL
30380: NOT
30381: PUSH
30382: LD_VAR 0 1
30386: PUSH
30387: LD_EXP 106
30391: IN
30392: NOT
30393: OR
30394: IFFALSE 30398
// exit ;
30396: GO 30720
// index := GetElementIndex ( minersList , unit ) ;
30398: LD_ADDR_VAR 0 6
30402: PUSH
30403: LD_EXP 106
30407: PPUSH
30408: LD_VAR 0 1
30412: PPUSH
30413: CALL 35916 0 2
30417: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
30418: LD_ADDR_VAR 0 8
30422: PUSH
30423: LD_EXP 108
30427: PUSH
30428: LD_EXP 107
30432: PUSH
30433: LD_VAR 0 6
30437: ARRAY
30438: MINUS
30439: ST_TO_ADDR
// if not minesFreeAmount then
30440: LD_VAR 0 8
30444: NOT
30445: IFFALSE 30449
// exit ;
30447: GO 30720
// tmp := [ ] ;
30449: LD_ADDR_VAR 0 7
30453: PUSH
30454: EMPTY
30455: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
30456: LD_ADDR_VAR 0 5
30460: PUSH
30461: DOUBLE
30462: LD_INT 1
30464: DEC
30465: ST_TO_ADDR
30466: LD_VAR 0 8
30470: PUSH
30471: FOR_TO
30472: IFFALSE 30667
// begin _d := rand ( 0 , 5 ) ;
30474: LD_ADDR_VAR 0 11
30478: PUSH
30479: LD_INT 0
30481: PPUSH
30482: LD_INT 5
30484: PPUSH
30485: CALL_OW 12
30489: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
30490: LD_ADDR_VAR 0 12
30494: PUSH
30495: LD_INT 2
30497: PPUSH
30498: LD_INT 6
30500: PPUSH
30501: CALL_OW 12
30505: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
30506: LD_ADDR_VAR 0 9
30510: PUSH
30511: LD_VAR 0 2
30515: PPUSH
30516: LD_VAR 0 11
30520: PPUSH
30521: LD_VAR 0 12
30525: PPUSH
30526: CALL_OW 272
30530: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
30531: LD_ADDR_VAR 0 10
30535: PUSH
30536: LD_VAR 0 3
30540: PPUSH
30541: LD_VAR 0 11
30545: PPUSH
30546: LD_VAR 0 12
30550: PPUSH
30551: CALL_OW 273
30555: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
30556: LD_VAR 0 9
30560: PPUSH
30561: LD_VAR 0 10
30565: PPUSH
30566: CALL_OW 488
30570: PUSH
30571: LD_VAR 0 9
30575: PUSH
30576: LD_VAR 0 10
30580: PUSH
30581: EMPTY
30582: LIST
30583: LIST
30584: PUSH
30585: LD_VAR 0 7
30589: IN
30590: NOT
30591: AND
30592: PUSH
30593: LD_VAR 0 9
30597: PPUSH
30598: LD_VAR 0 10
30602: PPUSH
30603: CALL_OW 458
30607: NOT
30608: AND
30609: IFFALSE 30651
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
30611: LD_ADDR_VAR 0 7
30615: PUSH
30616: LD_VAR 0 7
30620: PPUSH
30621: LD_VAR 0 7
30625: PUSH
30626: LD_INT 1
30628: PLUS
30629: PPUSH
30630: LD_VAR 0 9
30634: PUSH
30635: LD_VAR 0 10
30639: PUSH
30640: EMPTY
30641: LIST
30642: LIST
30643: PPUSH
30644: CALL_OW 1
30648: ST_TO_ADDR
30649: GO 30665
// i := i - 1 ;
30651: LD_ADDR_VAR 0 5
30655: PUSH
30656: LD_VAR 0 5
30660: PUSH
30661: LD_INT 1
30663: MINUS
30664: ST_TO_ADDR
// end ;
30665: GO 30471
30667: POP
30668: POP
// for i in tmp do
30669: LD_ADDR_VAR 0 5
30673: PUSH
30674: LD_VAR 0 7
30678: PUSH
30679: FOR_IN
30680: IFFALSE 30718
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
30682: LD_VAR 0 1
30686: PPUSH
30687: LD_VAR 0 5
30691: PUSH
30692: LD_INT 1
30694: ARRAY
30695: PPUSH
30696: LD_VAR 0 5
30700: PUSH
30701: LD_INT 2
30703: ARRAY
30704: PPUSH
30705: CALL 29660 0 3
30709: NOT
30710: IFFALSE 30716
// exit ;
30712: POP
30713: POP
30714: GO 30720
30716: GO 30679
30718: POP
30719: POP
// end ;
30720: LD_VAR 0 4
30724: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
30725: LD_INT 0
30727: PPUSH
30728: PPUSH
30729: PPUSH
30730: PPUSH
30731: PPUSH
30732: PPUSH
30733: PPUSH
// if not GetClass ( unit ) = class_sniper then
30734: LD_VAR 0 1
30738: PPUSH
30739: CALL_OW 257
30743: PUSH
30744: LD_INT 5
30746: EQUAL
30747: NOT
30748: IFFALSE 30752
// exit ;
30750: GO 31140
// dist := 8 ;
30752: LD_ADDR_VAR 0 5
30756: PUSH
30757: LD_INT 8
30759: ST_TO_ADDR
// viewRange := 12 ;
30760: LD_ADDR_VAR 0 7
30764: PUSH
30765: LD_INT 12
30767: ST_TO_ADDR
// side := GetSide ( unit ) ;
30768: LD_ADDR_VAR 0 6
30772: PUSH
30773: LD_VAR 0 1
30777: PPUSH
30778: CALL_OW 255
30782: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
30783: LD_INT 61
30785: PPUSH
30786: LD_VAR 0 6
30790: PPUSH
30791: CALL_OW 321
30795: PUSH
30796: LD_INT 2
30798: EQUAL
30799: IFFALSE 30809
// viewRange := 16 ;
30801: LD_ADDR_VAR 0 7
30805: PUSH
30806: LD_INT 16
30808: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
30809: LD_VAR 0 1
30813: PPUSH
30814: LD_VAR 0 2
30818: PPUSH
30819: LD_VAR 0 3
30823: PPUSH
30824: CALL_OW 297
30828: PUSH
30829: LD_VAR 0 5
30833: GREATER
30834: IFFALSE 30913
// begin ComMoveXY ( unit , x , y ) ;
30836: LD_VAR 0 1
30840: PPUSH
30841: LD_VAR 0 2
30845: PPUSH
30846: LD_VAR 0 3
30850: PPUSH
30851: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
30855: LD_INT 35
30857: PPUSH
30858: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
30862: LD_VAR 0 1
30866: PPUSH
30867: LD_VAR 0 2
30871: PPUSH
30872: LD_VAR 0 3
30876: PPUSH
30877: CALL 66635 0 3
30881: NOT
30882: IFFALSE 30886
// exit ;
30884: GO 31140
// until GetDistUnitXY ( unit , x , y ) < dist ;
30886: LD_VAR 0 1
30890: PPUSH
30891: LD_VAR 0 2
30895: PPUSH
30896: LD_VAR 0 3
30900: PPUSH
30901: CALL_OW 297
30905: PUSH
30906: LD_VAR 0 5
30910: LESS
30911: IFFALSE 30855
// end ; ComTurnXY ( unit , x , y ) ;
30913: LD_VAR 0 1
30917: PPUSH
30918: LD_VAR 0 2
30922: PPUSH
30923: LD_VAR 0 3
30927: PPUSH
30928: CALL_OW 118
// wait ( 5 ) ;
30932: LD_INT 5
30934: PPUSH
30935: CALL_OW 67
// _d := GetDir ( unit ) ;
30939: LD_ADDR_VAR 0 10
30943: PUSH
30944: LD_VAR 0 1
30948: PPUSH
30949: CALL_OW 254
30953: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
30954: LD_ADDR_VAR 0 8
30958: PUSH
30959: LD_VAR 0 1
30963: PPUSH
30964: CALL_OW 250
30968: PPUSH
30969: LD_VAR 0 10
30973: PPUSH
30974: LD_VAR 0 5
30978: PPUSH
30979: CALL_OW 272
30983: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
30984: LD_ADDR_VAR 0 9
30988: PUSH
30989: LD_VAR 0 1
30993: PPUSH
30994: CALL_OW 251
30998: PPUSH
30999: LD_VAR 0 10
31003: PPUSH
31004: LD_VAR 0 5
31008: PPUSH
31009: CALL_OW 273
31013: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31014: LD_VAR 0 8
31018: PPUSH
31019: LD_VAR 0 9
31023: PPUSH
31024: CALL_OW 488
31028: NOT
31029: IFFALSE 31033
// exit ;
31031: GO 31140
// ComAnimCustom ( unit , 1 ) ;
31033: LD_VAR 0 1
31037: PPUSH
31038: LD_INT 1
31040: PPUSH
31041: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
31045: LD_VAR 0 8
31049: PPUSH
31050: LD_VAR 0 9
31054: PPUSH
31055: LD_VAR 0 6
31059: PPUSH
31060: LD_VAR 0 7
31064: PPUSH
31065: CALL_OW 330
// repeat wait ( 1 ) ;
31069: LD_INT 1
31071: PPUSH
31072: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
31076: LD_VAR 0 1
31080: PPUSH
31081: CALL_OW 316
31085: PUSH
31086: LD_VAR 0 1
31090: PPUSH
31091: CALL_OW 314
31095: OR
31096: PUSH
31097: LD_VAR 0 1
31101: PPUSH
31102: CALL_OW 302
31106: NOT
31107: OR
31108: PUSH
31109: LD_VAR 0 1
31113: PPUSH
31114: CALL_OW 301
31118: OR
31119: IFFALSE 31069
// RemoveSeeing ( _x , _y , side ) ;
31121: LD_VAR 0 8
31125: PPUSH
31126: LD_VAR 0 9
31130: PPUSH
31131: LD_VAR 0 6
31135: PPUSH
31136: CALL_OW 331
// end ; end_of_file
31140: LD_VAR 0 4
31144: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
31145: LD_INT 0
31147: PPUSH
31148: PPUSH
// if exist_mode then
31149: LD_VAR 0 2
31153: IFFALSE 31178
// unit := CreateCharacter ( prefix & ident ) else
31155: LD_ADDR_VAR 0 5
31159: PUSH
31160: LD_VAR 0 3
31164: PUSH
31165: LD_VAR 0 1
31169: STR
31170: PPUSH
31171: CALL_OW 34
31175: ST_TO_ADDR
31176: GO 31193
// unit := NewCharacter ( ident ) ;
31178: LD_ADDR_VAR 0 5
31182: PUSH
31183: LD_VAR 0 1
31187: PPUSH
31188: CALL_OW 25
31192: ST_TO_ADDR
// result := unit ;
31193: LD_ADDR_VAR 0 4
31197: PUSH
31198: LD_VAR 0 5
31202: ST_TO_ADDR
// end ;
31203: LD_VAR 0 4
31207: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
31208: LD_INT 0
31210: PPUSH
31211: PPUSH
// if not side or not nation then
31212: LD_VAR 0 1
31216: NOT
31217: PUSH
31218: LD_VAR 0 2
31222: NOT
31223: OR
31224: IFFALSE 31228
// exit ;
31226: GO 31996
// case nation of nation_american :
31228: LD_VAR 0 2
31232: PUSH
31233: LD_INT 1
31235: DOUBLE
31236: EQUAL
31237: IFTRUE 31241
31239: GO 31455
31241: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
31242: LD_ADDR_VAR 0 4
31246: PUSH
31247: LD_INT 35
31249: PUSH
31250: LD_INT 45
31252: PUSH
31253: LD_INT 46
31255: PUSH
31256: LD_INT 47
31258: PUSH
31259: LD_INT 82
31261: PUSH
31262: LD_INT 83
31264: PUSH
31265: LD_INT 84
31267: PUSH
31268: LD_INT 85
31270: PUSH
31271: LD_INT 86
31273: PUSH
31274: LD_INT 1
31276: PUSH
31277: LD_INT 2
31279: PUSH
31280: LD_INT 6
31282: PUSH
31283: LD_INT 15
31285: PUSH
31286: LD_INT 16
31288: PUSH
31289: LD_INT 7
31291: PUSH
31292: LD_INT 12
31294: PUSH
31295: LD_INT 13
31297: PUSH
31298: LD_INT 10
31300: PUSH
31301: LD_INT 14
31303: PUSH
31304: LD_INT 20
31306: PUSH
31307: LD_INT 21
31309: PUSH
31310: LD_INT 22
31312: PUSH
31313: LD_INT 25
31315: PUSH
31316: LD_INT 32
31318: PUSH
31319: LD_INT 27
31321: PUSH
31322: LD_INT 36
31324: PUSH
31325: LD_INT 69
31327: PUSH
31328: LD_INT 39
31330: PUSH
31331: LD_INT 34
31333: PUSH
31334: LD_INT 40
31336: PUSH
31337: LD_INT 48
31339: PUSH
31340: LD_INT 49
31342: PUSH
31343: LD_INT 50
31345: PUSH
31346: LD_INT 51
31348: PUSH
31349: LD_INT 52
31351: PUSH
31352: LD_INT 53
31354: PUSH
31355: LD_INT 54
31357: PUSH
31358: LD_INT 55
31360: PUSH
31361: LD_INT 56
31363: PUSH
31364: LD_INT 57
31366: PUSH
31367: LD_INT 58
31369: PUSH
31370: LD_INT 59
31372: PUSH
31373: LD_INT 60
31375: PUSH
31376: LD_INT 61
31378: PUSH
31379: LD_INT 62
31381: PUSH
31382: LD_INT 80
31384: PUSH
31385: LD_INT 82
31387: PUSH
31388: LD_INT 83
31390: PUSH
31391: LD_INT 84
31393: PUSH
31394: LD_INT 85
31396: PUSH
31397: LD_INT 86
31399: PUSH
31400: EMPTY
31401: LIST
31402: LIST
31403: LIST
31404: LIST
31405: LIST
31406: LIST
31407: LIST
31408: LIST
31409: LIST
31410: LIST
31411: LIST
31412: LIST
31413: LIST
31414: LIST
31415: LIST
31416: LIST
31417: LIST
31418: LIST
31419: LIST
31420: LIST
31421: LIST
31422: LIST
31423: LIST
31424: LIST
31425: LIST
31426: LIST
31427: LIST
31428: LIST
31429: LIST
31430: LIST
31431: LIST
31432: LIST
31433: LIST
31434: LIST
31435: LIST
31436: LIST
31437: LIST
31438: LIST
31439: LIST
31440: LIST
31441: LIST
31442: LIST
31443: LIST
31444: LIST
31445: LIST
31446: LIST
31447: LIST
31448: LIST
31449: LIST
31450: LIST
31451: LIST
31452: ST_TO_ADDR
31453: GO 31920
31455: LD_INT 2
31457: DOUBLE
31458: EQUAL
31459: IFTRUE 31463
31461: GO 31689
31463: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
31464: LD_ADDR_VAR 0 4
31468: PUSH
31469: LD_INT 35
31471: PUSH
31472: LD_INT 45
31474: PUSH
31475: LD_INT 46
31477: PUSH
31478: LD_INT 47
31480: PUSH
31481: LD_INT 82
31483: PUSH
31484: LD_INT 83
31486: PUSH
31487: LD_INT 84
31489: PUSH
31490: LD_INT 85
31492: PUSH
31493: LD_INT 87
31495: PUSH
31496: LD_INT 70
31498: PUSH
31499: LD_INT 1
31501: PUSH
31502: LD_INT 11
31504: PUSH
31505: LD_INT 3
31507: PUSH
31508: LD_INT 4
31510: PUSH
31511: LD_INT 5
31513: PUSH
31514: LD_INT 6
31516: PUSH
31517: LD_INT 15
31519: PUSH
31520: LD_INT 18
31522: PUSH
31523: LD_INT 7
31525: PUSH
31526: LD_INT 17
31528: PUSH
31529: LD_INT 8
31531: PUSH
31532: LD_INT 20
31534: PUSH
31535: LD_INT 21
31537: PUSH
31538: LD_INT 22
31540: PUSH
31541: LD_INT 72
31543: PUSH
31544: LD_INT 26
31546: PUSH
31547: LD_INT 69
31549: PUSH
31550: LD_INT 39
31552: PUSH
31553: LD_INT 40
31555: PUSH
31556: LD_INT 41
31558: PUSH
31559: LD_INT 42
31561: PUSH
31562: LD_INT 43
31564: PUSH
31565: LD_INT 48
31567: PUSH
31568: LD_INT 49
31570: PUSH
31571: LD_INT 50
31573: PUSH
31574: LD_INT 51
31576: PUSH
31577: LD_INT 52
31579: PUSH
31580: LD_INT 53
31582: PUSH
31583: LD_INT 54
31585: PUSH
31586: LD_INT 55
31588: PUSH
31589: LD_INT 56
31591: PUSH
31592: LD_INT 60
31594: PUSH
31595: LD_INT 61
31597: PUSH
31598: LD_INT 62
31600: PUSH
31601: LD_INT 66
31603: PUSH
31604: LD_INT 67
31606: PUSH
31607: LD_INT 68
31609: PUSH
31610: LD_INT 81
31612: PUSH
31613: LD_INT 82
31615: PUSH
31616: LD_INT 83
31618: PUSH
31619: LD_INT 84
31621: PUSH
31622: LD_INT 85
31624: PUSH
31625: LD_INT 87
31627: PUSH
31628: LD_INT 88
31630: PUSH
31631: EMPTY
31632: LIST
31633: LIST
31634: LIST
31635: LIST
31636: LIST
31637: LIST
31638: LIST
31639: LIST
31640: LIST
31641: LIST
31642: LIST
31643: LIST
31644: LIST
31645: LIST
31646: LIST
31647: LIST
31648: LIST
31649: LIST
31650: LIST
31651: LIST
31652: LIST
31653: LIST
31654: LIST
31655: LIST
31656: LIST
31657: LIST
31658: LIST
31659: LIST
31660: LIST
31661: LIST
31662: LIST
31663: LIST
31664: LIST
31665: LIST
31666: LIST
31667: LIST
31668: LIST
31669: LIST
31670: LIST
31671: LIST
31672: LIST
31673: LIST
31674: LIST
31675: LIST
31676: LIST
31677: LIST
31678: LIST
31679: LIST
31680: LIST
31681: LIST
31682: LIST
31683: LIST
31684: LIST
31685: LIST
31686: ST_TO_ADDR
31687: GO 31920
31689: LD_INT 3
31691: DOUBLE
31692: EQUAL
31693: IFTRUE 31697
31695: GO 31919
31697: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
31698: LD_ADDR_VAR 0 4
31702: PUSH
31703: LD_INT 46
31705: PUSH
31706: LD_INT 47
31708: PUSH
31709: LD_INT 1
31711: PUSH
31712: LD_INT 2
31714: PUSH
31715: LD_INT 82
31717: PUSH
31718: LD_INT 83
31720: PUSH
31721: LD_INT 84
31723: PUSH
31724: LD_INT 85
31726: PUSH
31727: LD_INT 86
31729: PUSH
31730: LD_INT 11
31732: PUSH
31733: LD_INT 9
31735: PUSH
31736: LD_INT 20
31738: PUSH
31739: LD_INT 19
31741: PUSH
31742: LD_INT 21
31744: PUSH
31745: LD_INT 24
31747: PUSH
31748: LD_INT 22
31750: PUSH
31751: LD_INT 25
31753: PUSH
31754: LD_INT 28
31756: PUSH
31757: LD_INT 29
31759: PUSH
31760: LD_INT 30
31762: PUSH
31763: LD_INT 31
31765: PUSH
31766: LD_INT 37
31768: PUSH
31769: LD_INT 38
31771: PUSH
31772: LD_INT 32
31774: PUSH
31775: LD_INT 27
31777: PUSH
31778: LD_INT 33
31780: PUSH
31781: LD_INT 69
31783: PUSH
31784: LD_INT 39
31786: PUSH
31787: LD_INT 34
31789: PUSH
31790: LD_INT 40
31792: PUSH
31793: LD_INT 71
31795: PUSH
31796: LD_INT 23
31798: PUSH
31799: LD_INT 44
31801: PUSH
31802: LD_INT 48
31804: PUSH
31805: LD_INT 49
31807: PUSH
31808: LD_INT 50
31810: PUSH
31811: LD_INT 51
31813: PUSH
31814: LD_INT 52
31816: PUSH
31817: LD_INT 53
31819: PUSH
31820: LD_INT 54
31822: PUSH
31823: LD_INT 55
31825: PUSH
31826: LD_INT 56
31828: PUSH
31829: LD_INT 57
31831: PUSH
31832: LD_INT 58
31834: PUSH
31835: LD_INT 59
31837: PUSH
31838: LD_INT 63
31840: PUSH
31841: LD_INT 64
31843: PUSH
31844: LD_INT 65
31846: PUSH
31847: LD_INT 82
31849: PUSH
31850: LD_INT 83
31852: PUSH
31853: LD_INT 84
31855: PUSH
31856: LD_INT 85
31858: PUSH
31859: LD_INT 86
31861: PUSH
31862: EMPTY
31863: LIST
31864: LIST
31865: LIST
31866: LIST
31867: LIST
31868: LIST
31869: LIST
31870: LIST
31871: LIST
31872: LIST
31873: LIST
31874: LIST
31875: LIST
31876: LIST
31877: LIST
31878: LIST
31879: LIST
31880: LIST
31881: LIST
31882: LIST
31883: LIST
31884: LIST
31885: LIST
31886: LIST
31887: LIST
31888: LIST
31889: LIST
31890: LIST
31891: LIST
31892: LIST
31893: LIST
31894: LIST
31895: LIST
31896: LIST
31897: LIST
31898: LIST
31899: LIST
31900: LIST
31901: LIST
31902: LIST
31903: LIST
31904: LIST
31905: LIST
31906: LIST
31907: LIST
31908: LIST
31909: LIST
31910: LIST
31911: LIST
31912: LIST
31913: LIST
31914: LIST
31915: LIST
31916: ST_TO_ADDR
31917: GO 31920
31919: POP
// if state > - 1 and state < 3 then
31920: LD_VAR 0 3
31924: PUSH
31925: LD_INT 1
31927: NEG
31928: GREATER
31929: PUSH
31930: LD_VAR 0 3
31934: PUSH
31935: LD_INT 3
31937: LESS
31938: AND
31939: IFFALSE 31996
// for i in result do
31941: LD_ADDR_VAR 0 5
31945: PUSH
31946: LD_VAR 0 4
31950: PUSH
31951: FOR_IN
31952: IFFALSE 31994
// if GetTech ( i , side ) <> state then
31954: LD_VAR 0 5
31958: PPUSH
31959: LD_VAR 0 1
31963: PPUSH
31964: CALL_OW 321
31968: PUSH
31969: LD_VAR 0 3
31973: NONEQUAL
31974: IFFALSE 31992
// result := result diff i ;
31976: LD_ADDR_VAR 0 4
31980: PUSH
31981: LD_VAR 0 4
31985: PUSH
31986: LD_VAR 0 5
31990: DIFF
31991: ST_TO_ADDR
31992: GO 31951
31994: POP
31995: POP
// end ;
31996: LD_VAR 0 4
32000: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
32001: LD_INT 0
32003: PPUSH
32004: PPUSH
32005: PPUSH
// result := true ;
32006: LD_ADDR_VAR 0 3
32010: PUSH
32011: LD_INT 1
32013: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
32014: LD_ADDR_VAR 0 5
32018: PUSH
32019: LD_VAR 0 2
32023: PPUSH
32024: CALL_OW 480
32028: ST_TO_ADDR
// if not tmp then
32029: LD_VAR 0 5
32033: NOT
32034: IFFALSE 32038
// exit ;
32036: GO 32087
// for i in tmp do
32038: LD_ADDR_VAR 0 4
32042: PUSH
32043: LD_VAR 0 5
32047: PUSH
32048: FOR_IN
32049: IFFALSE 32085
// if GetTech ( i , side ) <> state_researched then
32051: LD_VAR 0 4
32055: PPUSH
32056: LD_VAR 0 1
32060: PPUSH
32061: CALL_OW 321
32065: PUSH
32066: LD_INT 2
32068: NONEQUAL
32069: IFFALSE 32083
// begin result := false ;
32071: LD_ADDR_VAR 0 3
32075: PUSH
32076: LD_INT 0
32078: ST_TO_ADDR
// exit ;
32079: POP
32080: POP
32081: GO 32087
// end ;
32083: GO 32048
32085: POP
32086: POP
// end ;
32087: LD_VAR 0 3
32091: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
32092: LD_INT 0
32094: PPUSH
32095: PPUSH
32096: PPUSH
32097: PPUSH
32098: PPUSH
32099: PPUSH
32100: PPUSH
32101: PPUSH
32102: PPUSH
32103: PPUSH
32104: PPUSH
32105: PPUSH
32106: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
32107: LD_VAR 0 1
32111: NOT
32112: PUSH
32113: LD_VAR 0 1
32117: PPUSH
32118: CALL_OW 257
32122: PUSH
32123: LD_INT 9
32125: NONEQUAL
32126: OR
32127: IFFALSE 32131
// exit ;
32129: GO 32704
// side := GetSide ( unit ) ;
32131: LD_ADDR_VAR 0 9
32135: PUSH
32136: LD_VAR 0 1
32140: PPUSH
32141: CALL_OW 255
32145: ST_TO_ADDR
// tech_space := tech_spacanom ;
32146: LD_ADDR_VAR 0 12
32150: PUSH
32151: LD_INT 29
32153: ST_TO_ADDR
// tech_time := tech_taurad ;
32154: LD_ADDR_VAR 0 13
32158: PUSH
32159: LD_INT 28
32161: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
32162: LD_ADDR_VAR 0 11
32166: PUSH
32167: LD_VAR 0 1
32171: PPUSH
32172: CALL_OW 310
32176: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
32177: LD_VAR 0 11
32181: PPUSH
32182: CALL_OW 247
32186: PUSH
32187: LD_INT 2
32189: EQUAL
32190: IFFALSE 32194
// exit ;
32192: GO 32704
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32194: LD_ADDR_VAR 0 8
32198: PUSH
32199: LD_INT 81
32201: PUSH
32202: LD_VAR 0 9
32206: PUSH
32207: EMPTY
32208: LIST
32209: LIST
32210: PUSH
32211: LD_INT 3
32213: PUSH
32214: LD_INT 21
32216: PUSH
32217: LD_INT 3
32219: PUSH
32220: EMPTY
32221: LIST
32222: LIST
32223: PUSH
32224: EMPTY
32225: LIST
32226: LIST
32227: PUSH
32228: EMPTY
32229: LIST
32230: LIST
32231: PPUSH
32232: CALL_OW 69
32236: ST_TO_ADDR
// if not tmp then
32237: LD_VAR 0 8
32241: NOT
32242: IFFALSE 32246
// exit ;
32244: GO 32704
// if in_unit then
32246: LD_VAR 0 11
32250: IFFALSE 32274
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
32252: LD_ADDR_VAR 0 10
32256: PUSH
32257: LD_VAR 0 8
32261: PPUSH
32262: LD_VAR 0 11
32266: PPUSH
32267: CALL_OW 74
32271: ST_TO_ADDR
32272: GO 32294
// enemy := NearestUnitToUnit ( tmp , unit ) ;
32274: LD_ADDR_VAR 0 10
32278: PUSH
32279: LD_VAR 0 8
32283: PPUSH
32284: LD_VAR 0 1
32288: PPUSH
32289: CALL_OW 74
32293: ST_TO_ADDR
// if not enemy then
32294: LD_VAR 0 10
32298: NOT
32299: IFFALSE 32303
// exit ;
32301: GO 32704
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
32303: LD_VAR 0 11
32307: PUSH
32308: LD_VAR 0 11
32312: PPUSH
32313: LD_VAR 0 10
32317: PPUSH
32318: CALL_OW 296
32322: PUSH
32323: LD_INT 13
32325: GREATER
32326: AND
32327: PUSH
32328: LD_VAR 0 1
32332: PPUSH
32333: LD_VAR 0 10
32337: PPUSH
32338: CALL_OW 296
32342: PUSH
32343: LD_INT 12
32345: GREATER
32346: OR
32347: IFFALSE 32351
// exit ;
32349: GO 32704
// missile := [ 1 ] ;
32351: LD_ADDR_VAR 0 14
32355: PUSH
32356: LD_INT 1
32358: PUSH
32359: EMPTY
32360: LIST
32361: ST_TO_ADDR
// if Researched ( side , tech_space ) then
32362: LD_VAR 0 9
32366: PPUSH
32367: LD_VAR 0 12
32371: PPUSH
32372: CALL_OW 325
32376: IFFALSE 32405
// missile := Replace ( missile , missile + 1 , 2 ) ;
32378: LD_ADDR_VAR 0 14
32382: PUSH
32383: LD_VAR 0 14
32387: PPUSH
32388: LD_VAR 0 14
32392: PUSH
32393: LD_INT 1
32395: PLUS
32396: PPUSH
32397: LD_INT 2
32399: PPUSH
32400: CALL_OW 1
32404: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
32405: LD_VAR 0 9
32409: PPUSH
32410: LD_VAR 0 13
32414: PPUSH
32415: CALL_OW 325
32419: PUSH
32420: LD_VAR 0 10
32424: PPUSH
32425: CALL_OW 255
32429: PPUSH
32430: LD_VAR 0 13
32434: PPUSH
32435: CALL_OW 325
32439: NOT
32440: AND
32441: IFFALSE 32470
// missile := Replace ( missile , missile + 1 , 3 ) ;
32443: LD_ADDR_VAR 0 14
32447: PUSH
32448: LD_VAR 0 14
32452: PPUSH
32453: LD_VAR 0 14
32457: PUSH
32458: LD_INT 1
32460: PLUS
32461: PPUSH
32462: LD_INT 3
32464: PPUSH
32465: CALL_OW 1
32469: ST_TO_ADDR
// if missile < 2 then
32470: LD_VAR 0 14
32474: PUSH
32475: LD_INT 2
32477: LESS
32478: IFFALSE 32482
// exit ;
32480: GO 32704
// x := GetX ( enemy ) ;
32482: LD_ADDR_VAR 0 4
32486: PUSH
32487: LD_VAR 0 10
32491: PPUSH
32492: CALL_OW 250
32496: ST_TO_ADDR
// y := GetY ( enemy ) ;
32497: LD_ADDR_VAR 0 5
32501: PUSH
32502: LD_VAR 0 10
32506: PPUSH
32507: CALL_OW 251
32511: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
32512: LD_ADDR_VAR 0 6
32516: PUSH
32517: LD_VAR 0 4
32521: PUSH
32522: LD_INT 1
32524: NEG
32525: PPUSH
32526: LD_INT 1
32528: PPUSH
32529: CALL_OW 12
32533: PLUS
32534: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
32535: LD_ADDR_VAR 0 7
32539: PUSH
32540: LD_VAR 0 5
32544: PUSH
32545: LD_INT 1
32547: NEG
32548: PPUSH
32549: LD_INT 1
32551: PPUSH
32552: CALL_OW 12
32556: PLUS
32557: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32558: LD_VAR 0 6
32562: PPUSH
32563: LD_VAR 0 7
32567: PPUSH
32568: CALL_OW 488
32572: NOT
32573: IFFALSE 32595
// begin _x := x ;
32575: LD_ADDR_VAR 0 6
32579: PUSH
32580: LD_VAR 0 4
32584: ST_TO_ADDR
// _y := y ;
32585: LD_ADDR_VAR 0 7
32589: PUSH
32590: LD_VAR 0 5
32594: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
32595: LD_ADDR_VAR 0 3
32599: PUSH
32600: LD_INT 1
32602: PPUSH
32603: LD_VAR 0 14
32607: PPUSH
32608: CALL_OW 12
32612: ST_TO_ADDR
// case i of 1 :
32613: LD_VAR 0 3
32617: PUSH
32618: LD_INT 1
32620: DOUBLE
32621: EQUAL
32622: IFTRUE 32626
32624: GO 32643
32626: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
32627: LD_VAR 0 1
32631: PPUSH
32632: LD_VAR 0 10
32636: PPUSH
32637: CALL_OW 115
32641: GO 32704
32643: LD_INT 2
32645: DOUBLE
32646: EQUAL
32647: IFTRUE 32651
32649: GO 32673
32651: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
32652: LD_VAR 0 1
32656: PPUSH
32657: LD_VAR 0 6
32661: PPUSH
32662: LD_VAR 0 7
32666: PPUSH
32667: CALL_OW 153
32671: GO 32704
32673: LD_INT 3
32675: DOUBLE
32676: EQUAL
32677: IFTRUE 32681
32679: GO 32703
32681: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
32682: LD_VAR 0 1
32686: PPUSH
32687: LD_VAR 0 6
32691: PPUSH
32692: LD_VAR 0 7
32696: PPUSH
32697: CALL_OW 154
32701: GO 32704
32703: POP
// end ;
32704: LD_VAR 0 2
32708: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
32709: LD_INT 0
32711: PPUSH
32712: PPUSH
32713: PPUSH
32714: PPUSH
32715: PPUSH
32716: PPUSH
// if not unit or not building then
32717: LD_VAR 0 1
32721: NOT
32722: PUSH
32723: LD_VAR 0 2
32727: NOT
32728: OR
32729: IFFALSE 32733
// exit ;
32731: GO 32891
// x := GetX ( building ) ;
32733: LD_ADDR_VAR 0 5
32737: PUSH
32738: LD_VAR 0 2
32742: PPUSH
32743: CALL_OW 250
32747: ST_TO_ADDR
// y := GetY ( building ) ;
32748: LD_ADDR_VAR 0 6
32752: PUSH
32753: LD_VAR 0 2
32757: PPUSH
32758: CALL_OW 251
32762: ST_TO_ADDR
// for i = 0 to 5 do
32763: LD_ADDR_VAR 0 4
32767: PUSH
32768: DOUBLE
32769: LD_INT 0
32771: DEC
32772: ST_TO_ADDR
32773: LD_INT 5
32775: PUSH
32776: FOR_TO
32777: IFFALSE 32889
// begin _x := ShiftX ( x , i , 3 ) ;
32779: LD_ADDR_VAR 0 7
32783: PUSH
32784: LD_VAR 0 5
32788: PPUSH
32789: LD_VAR 0 4
32793: PPUSH
32794: LD_INT 3
32796: PPUSH
32797: CALL_OW 272
32801: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
32802: LD_ADDR_VAR 0 8
32806: PUSH
32807: LD_VAR 0 6
32811: PPUSH
32812: LD_VAR 0 4
32816: PPUSH
32817: LD_INT 3
32819: PPUSH
32820: CALL_OW 273
32824: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32825: LD_VAR 0 7
32829: PPUSH
32830: LD_VAR 0 8
32834: PPUSH
32835: CALL_OW 488
32839: NOT
32840: IFFALSE 32844
// continue ;
32842: GO 32776
// if HexInfo ( _x , _y ) = 0 then
32844: LD_VAR 0 7
32848: PPUSH
32849: LD_VAR 0 8
32853: PPUSH
32854: CALL_OW 428
32858: PUSH
32859: LD_INT 0
32861: EQUAL
32862: IFFALSE 32887
// begin ComMoveXY ( unit , _x , _y ) ;
32864: LD_VAR 0 1
32868: PPUSH
32869: LD_VAR 0 7
32873: PPUSH
32874: LD_VAR 0 8
32878: PPUSH
32879: CALL_OW 111
// exit ;
32883: POP
32884: POP
32885: GO 32891
// end ; end ;
32887: GO 32776
32889: POP
32890: POP
// end ;
32891: LD_VAR 0 3
32895: RET
// export function ScanBase ( side , base_area ) ; begin
32896: LD_INT 0
32898: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
32899: LD_ADDR_VAR 0 3
32903: PUSH
32904: LD_VAR 0 2
32908: PPUSH
32909: LD_INT 81
32911: PUSH
32912: LD_VAR 0 1
32916: PUSH
32917: EMPTY
32918: LIST
32919: LIST
32920: PPUSH
32921: CALL_OW 70
32925: ST_TO_ADDR
// end ;
32926: LD_VAR 0 3
32930: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
32931: LD_INT 0
32933: PPUSH
32934: PPUSH
32935: PPUSH
32936: PPUSH
// result := false ;
32937: LD_ADDR_VAR 0 2
32941: PUSH
32942: LD_INT 0
32944: ST_TO_ADDR
// side := GetSide ( unit ) ;
32945: LD_ADDR_VAR 0 3
32949: PUSH
32950: LD_VAR 0 1
32954: PPUSH
32955: CALL_OW 255
32959: ST_TO_ADDR
// nat := GetNation ( unit ) ;
32960: LD_ADDR_VAR 0 4
32964: PUSH
32965: LD_VAR 0 1
32969: PPUSH
32970: CALL_OW 248
32974: ST_TO_ADDR
// case nat of 1 :
32975: LD_VAR 0 4
32979: PUSH
32980: LD_INT 1
32982: DOUBLE
32983: EQUAL
32984: IFTRUE 32988
32986: GO 32999
32988: POP
// tech := tech_lassight ; 2 :
32989: LD_ADDR_VAR 0 5
32993: PUSH
32994: LD_INT 12
32996: ST_TO_ADDR
32997: GO 33038
32999: LD_INT 2
33001: DOUBLE
33002: EQUAL
33003: IFTRUE 33007
33005: GO 33018
33007: POP
// tech := tech_mortar ; 3 :
33008: LD_ADDR_VAR 0 5
33012: PUSH
33013: LD_INT 41
33015: ST_TO_ADDR
33016: GO 33038
33018: LD_INT 3
33020: DOUBLE
33021: EQUAL
33022: IFTRUE 33026
33024: GO 33037
33026: POP
// tech := tech_bazooka ; end ;
33027: LD_ADDR_VAR 0 5
33031: PUSH
33032: LD_INT 44
33034: ST_TO_ADDR
33035: GO 33038
33037: POP
// if Researched ( side , tech ) then
33038: LD_VAR 0 3
33042: PPUSH
33043: LD_VAR 0 5
33047: PPUSH
33048: CALL_OW 325
33052: IFFALSE 33079
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
33054: LD_ADDR_VAR 0 2
33058: PUSH
33059: LD_INT 5
33061: PUSH
33062: LD_INT 8
33064: PUSH
33065: LD_INT 9
33067: PUSH
33068: EMPTY
33069: LIST
33070: LIST
33071: LIST
33072: PUSH
33073: LD_VAR 0 4
33077: ARRAY
33078: ST_TO_ADDR
// end ;
33079: LD_VAR 0 2
33083: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
33084: LD_INT 0
33086: PPUSH
33087: PPUSH
33088: PPUSH
// if not mines then
33089: LD_VAR 0 2
33093: NOT
33094: IFFALSE 33098
// exit ;
33096: GO 33242
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33098: LD_ADDR_VAR 0 5
33102: PUSH
33103: LD_INT 81
33105: PUSH
33106: LD_VAR 0 1
33110: PUSH
33111: EMPTY
33112: LIST
33113: LIST
33114: PUSH
33115: LD_INT 3
33117: PUSH
33118: LD_INT 21
33120: PUSH
33121: LD_INT 3
33123: PUSH
33124: EMPTY
33125: LIST
33126: LIST
33127: PUSH
33128: EMPTY
33129: LIST
33130: LIST
33131: PUSH
33132: EMPTY
33133: LIST
33134: LIST
33135: PPUSH
33136: CALL_OW 69
33140: ST_TO_ADDR
// for i in mines do
33141: LD_ADDR_VAR 0 4
33145: PUSH
33146: LD_VAR 0 2
33150: PUSH
33151: FOR_IN
33152: IFFALSE 33240
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
33154: LD_VAR 0 4
33158: PUSH
33159: LD_INT 1
33161: ARRAY
33162: PPUSH
33163: LD_VAR 0 4
33167: PUSH
33168: LD_INT 2
33170: ARRAY
33171: PPUSH
33172: CALL_OW 458
33176: NOT
33177: IFFALSE 33181
// continue ;
33179: GO 33151
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
33181: LD_VAR 0 4
33185: PUSH
33186: LD_INT 1
33188: ARRAY
33189: PPUSH
33190: LD_VAR 0 4
33194: PUSH
33195: LD_INT 2
33197: ARRAY
33198: PPUSH
33199: CALL_OW 428
33203: PUSH
33204: LD_VAR 0 5
33208: IN
33209: IFFALSE 33238
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
33211: LD_VAR 0 4
33215: PUSH
33216: LD_INT 1
33218: ARRAY
33219: PPUSH
33220: LD_VAR 0 4
33224: PUSH
33225: LD_INT 2
33227: ARRAY
33228: PPUSH
33229: LD_VAR 0 1
33233: PPUSH
33234: CALL_OW 456
// end ;
33238: GO 33151
33240: POP
33241: POP
// end ;
33242: LD_VAR 0 3
33246: RET
// export function Count ( array ) ; var i ; begin
33247: LD_INT 0
33249: PPUSH
33250: PPUSH
// result := 0 ;
33251: LD_ADDR_VAR 0 2
33255: PUSH
33256: LD_INT 0
33258: ST_TO_ADDR
// for i in array do
33259: LD_ADDR_VAR 0 3
33263: PUSH
33264: LD_VAR 0 1
33268: PUSH
33269: FOR_IN
33270: IFFALSE 33294
// if i then
33272: LD_VAR 0 3
33276: IFFALSE 33292
// result := result + 1 ;
33278: LD_ADDR_VAR 0 2
33282: PUSH
33283: LD_VAR 0 2
33287: PUSH
33288: LD_INT 1
33290: PLUS
33291: ST_TO_ADDR
33292: GO 33269
33294: POP
33295: POP
// end ;
33296: LD_VAR 0 2
33300: RET
// export function IsEmpty ( building ) ; begin
33301: LD_INT 0
33303: PPUSH
// if not building then
33304: LD_VAR 0 1
33308: NOT
33309: IFFALSE 33313
// exit ;
33311: GO 33356
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
33313: LD_ADDR_VAR 0 2
33317: PUSH
33318: LD_VAR 0 1
33322: PUSH
33323: LD_INT 22
33325: PUSH
33326: LD_VAR 0 1
33330: PPUSH
33331: CALL_OW 255
33335: PUSH
33336: EMPTY
33337: LIST
33338: LIST
33339: PUSH
33340: LD_INT 58
33342: PUSH
33343: EMPTY
33344: LIST
33345: PUSH
33346: EMPTY
33347: LIST
33348: LIST
33349: PPUSH
33350: CALL_OW 69
33354: IN
33355: ST_TO_ADDR
// end ;
33356: LD_VAR 0 2
33360: RET
// export function IsNotFull ( building ) ; begin
33361: LD_INT 0
33363: PPUSH
// if not building then
33364: LD_VAR 0 1
33368: NOT
33369: IFFALSE 33373
// exit ;
33371: GO 33392
// result := UnitsInside ( building ) < 6 ;
33373: LD_ADDR_VAR 0 2
33377: PUSH
33378: LD_VAR 0 1
33382: PPUSH
33383: CALL_OW 313
33387: PUSH
33388: LD_INT 6
33390: LESS
33391: ST_TO_ADDR
// end ;
33392: LD_VAR 0 2
33396: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
33397: LD_INT 0
33399: PPUSH
33400: PPUSH
33401: PPUSH
33402: PPUSH
// tmp := [ ] ;
33403: LD_ADDR_VAR 0 3
33407: PUSH
33408: EMPTY
33409: ST_TO_ADDR
// list := [ ] ;
33410: LD_ADDR_VAR 0 5
33414: PUSH
33415: EMPTY
33416: ST_TO_ADDR
// for i = 16 to 25 do
33417: LD_ADDR_VAR 0 4
33421: PUSH
33422: DOUBLE
33423: LD_INT 16
33425: DEC
33426: ST_TO_ADDR
33427: LD_INT 25
33429: PUSH
33430: FOR_TO
33431: IFFALSE 33504
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
33433: LD_ADDR_VAR 0 3
33437: PUSH
33438: LD_VAR 0 3
33442: PUSH
33443: LD_INT 22
33445: PUSH
33446: LD_VAR 0 1
33450: PPUSH
33451: CALL_OW 255
33455: PUSH
33456: EMPTY
33457: LIST
33458: LIST
33459: PUSH
33460: LD_INT 91
33462: PUSH
33463: LD_VAR 0 1
33467: PUSH
33468: LD_INT 6
33470: PUSH
33471: EMPTY
33472: LIST
33473: LIST
33474: LIST
33475: PUSH
33476: LD_INT 30
33478: PUSH
33479: LD_VAR 0 4
33483: PUSH
33484: EMPTY
33485: LIST
33486: LIST
33487: PUSH
33488: EMPTY
33489: LIST
33490: LIST
33491: LIST
33492: PUSH
33493: EMPTY
33494: LIST
33495: PPUSH
33496: CALL_OW 69
33500: ADD
33501: ST_TO_ADDR
33502: GO 33430
33504: POP
33505: POP
// for i = 1 to tmp do
33506: LD_ADDR_VAR 0 4
33510: PUSH
33511: DOUBLE
33512: LD_INT 1
33514: DEC
33515: ST_TO_ADDR
33516: LD_VAR 0 3
33520: PUSH
33521: FOR_TO
33522: IFFALSE 33610
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
33524: LD_ADDR_VAR 0 5
33528: PUSH
33529: LD_VAR 0 5
33533: PUSH
33534: LD_VAR 0 3
33538: PUSH
33539: LD_VAR 0 4
33543: ARRAY
33544: PPUSH
33545: CALL_OW 266
33549: PUSH
33550: LD_VAR 0 3
33554: PUSH
33555: LD_VAR 0 4
33559: ARRAY
33560: PPUSH
33561: CALL_OW 250
33565: PUSH
33566: LD_VAR 0 3
33570: PUSH
33571: LD_VAR 0 4
33575: ARRAY
33576: PPUSH
33577: CALL_OW 251
33581: PUSH
33582: LD_VAR 0 3
33586: PUSH
33587: LD_VAR 0 4
33591: ARRAY
33592: PPUSH
33593: CALL_OW 254
33597: PUSH
33598: EMPTY
33599: LIST
33600: LIST
33601: LIST
33602: LIST
33603: PUSH
33604: EMPTY
33605: LIST
33606: ADD
33607: ST_TO_ADDR
33608: GO 33521
33610: POP
33611: POP
// result := list ;
33612: LD_ADDR_VAR 0 2
33616: PUSH
33617: LD_VAR 0 5
33621: ST_TO_ADDR
// end ;
33622: LD_VAR 0 2
33626: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
33627: LD_INT 0
33629: PPUSH
33630: PPUSH
33631: PPUSH
33632: PPUSH
33633: PPUSH
33634: PPUSH
33635: PPUSH
// if not factory then
33636: LD_VAR 0 1
33640: NOT
33641: IFFALSE 33645
// exit ;
33643: GO 34238
// if control = control_apeman then
33645: LD_VAR 0 4
33649: PUSH
33650: LD_INT 5
33652: EQUAL
33653: IFFALSE 33762
// begin tmp := UnitsInside ( factory ) ;
33655: LD_ADDR_VAR 0 8
33659: PUSH
33660: LD_VAR 0 1
33664: PPUSH
33665: CALL_OW 313
33669: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
33670: LD_VAR 0 8
33674: PPUSH
33675: LD_INT 25
33677: PUSH
33678: LD_INT 12
33680: PUSH
33681: EMPTY
33682: LIST
33683: LIST
33684: PPUSH
33685: CALL_OW 72
33689: NOT
33690: IFFALSE 33700
// control := control_manual ;
33692: LD_ADDR_VAR 0 4
33696: PUSH
33697: LD_INT 1
33699: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
33700: LD_ADDR_VAR 0 8
33704: PUSH
33705: LD_VAR 0 1
33709: PPUSH
33710: CALL 33397 0 1
33714: ST_TO_ADDR
// if tmp then
33715: LD_VAR 0 8
33719: IFFALSE 33762
// begin for i in tmp do
33721: LD_ADDR_VAR 0 7
33725: PUSH
33726: LD_VAR 0 8
33730: PUSH
33731: FOR_IN
33732: IFFALSE 33760
// if i [ 1 ] = b_ext_radio then
33734: LD_VAR 0 7
33738: PUSH
33739: LD_INT 1
33741: ARRAY
33742: PUSH
33743: LD_INT 22
33745: EQUAL
33746: IFFALSE 33758
// begin control := control_remote ;
33748: LD_ADDR_VAR 0 4
33752: PUSH
33753: LD_INT 2
33755: ST_TO_ADDR
// break ;
33756: GO 33760
// end ;
33758: GO 33731
33760: POP
33761: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
33762: LD_VAR 0 1
33766: PPUSH
33767: LD_VAR 0 2
33771: PPUSH
33772: LD_VAR 0 3
33776: PPUSH
33777: LD_VAR 0 4
33781: PPUSH
33782: LD_VAR 0 5
33786: PPUSH
33787: CALL_OW 448
33791: IFFALSE 33826
// begin result := [ chassis , engine , control , weapon ] ;
33793: LD_ADDR_VAR 0 6
33797: PUSH
33798: LD_VAR 0 2
33802: PUSH
33803: LD_VAR 0 3
33807: PUSH
33808: LD_VAR 0 4
33812: PUSH
33813: LD_VAR 0 5
33817: PUSH
33818: EMPTY
33819: LIST
33820: LIST
33821: LIST
33822: LIST
33823: ST_TO_ADDR
// exit ;
33824: GO 34238
// end ; _chassis := AvailableChassisList ( factory ) ;
33826: LD_ADDR_VAR 0 9
33830: PUSH
33831: LD_VAR 0 1
33835: PPUSH
33836: CALL_OW 475
33840: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
33841: LD_ADDR_VAR 0 11
33845: PUSH
33846: LD_VAR 0 1
33850: PPUSH
33851: CALL_OW 476
33855: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
33856: LD_ADDR_VAR 0 12
33860: PUSH
33861: LD_VAR 0 1
33865: PPUSH
33866: CALL_OW 477
33870: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
33871: LD_ADDR_VAR 0 10
33875: PUSH
33876: LD_VAR 0 1
33880: PPUSH
33881: CALL_OW 478
33885: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
33886: LD_VAR 0 9
33890: NOT
33891: PUSH
33892: LD_VAR 0 11
33896: NOT
33897: OR
33898: PUSH
33899: LD_VAR 0 12
33903: NOT
33904: OR
33905: PUSH
33906: LD_VAR 0 10
33910: NOT
33911: OR
33912: IFFALSE 33947
// begin result := [ chassis , engine , control , weapon ] ;
33914: LD_ADDR_VAR 0 6
33918: PUSH
33919: LD_VAR 0 2
33923: PUSH
33924: LD_VAR 0 3
33928: PUSH
33929: LD_VAR 0 4
33933: PUSH
33934: LD_VAR 0 5
33938: PUSH
33939: EMPTY
33940: LIST
33941: LIST
33942: LIST
33943: LIST
33944: ST_TO_ADDR
// exit ;
33945: GO 34238
// end ; if not chassis in _chassis then
33947: LD_VAR 0 2
33951: PUSH
33952: LD_VAR 0 9
33956: IN
33957: NOT
33958: IFFALSE 33984
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
33960: LD_ADDR_VAR 0 2
33964: PUSH
33965: LD_VAR 0 9
33969: PUSH
33970: LD_INT 1
33972: PPUSH
33973: LD_VAR 0 9
33977: PPUSH
33978: CALL_OW 12
33982: ARRAY
33983: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
33984: LD_VAR 0 2
33988: PPUSH
33989: LD_VAR 0 3
33993: PPUSH
33994: CALL 34243 0 2
33998: NOT
33999: IFFALSE 34058
// repeat engine := _engine [ 1 ] ;
34001: LD_ADDR_VAR 0 3
34005: PUSH
34006: LD_VAR 0 11
34010: PUSH
34011: LD_INT 1
34013: ARRAY
34014: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
34015: LD_ADDR_VAR 0 11
34019: PUSH
34020: LD_VAR 0 11
34024: PPUSH
34025: LD_INT 1
34027: PPUSH
34028: CALL_OW 3
34032: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
34033: LD_VAR 0 2
34037: PPUSH
34038: LD_VAR 0 3
34042: PPUSH
34043: CALL 34243 0 2
34047: PUSH
34048: LD_VAR 0 11
34052: PUSH
34053: EMPTY
34054: EQUAL
34055: OR
34056: IFFALSE 34001
// if not control in _control then
34058: LD_VAR 0 4
34062: PUSH
34063: LD_VAR 0 12
34067: IN
34068: NOT
34069: IFFALSE 34095
// control := _control [ rand ( 1 , _control ) ] ;
34071: LD_ADDR_VAR 0 4
34075: PUSH
34076: LD_VAR 0 12
34080: PUSH
34081: LD_INT 1
34083: PPUSH
34084: LD_VAR 0 12
34088: PPUSH
34089: CALL_OW 12
34093: ARRAY
34094: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
34095: LD_VAR 0 2
34099: PPUSH
34100: LD_VAR 0 5
34104: PPUSH
34105: CALL 34463 0 2
34109: NOT
34110: IFFALSE 34169
// repeat weapon := _weapon [ 1 ] ;
34112: LD_ADDR_VAR 0 5
34116: PUSH
34117: LD_VAR 0 10
34121: PUSH
34122: LD_INT 1
34124: ARRAY
34125: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
34126: LD_ADDR_VAR 0 10
34130: PUSH
34131: LD_VAR 0 10
34135: PPUSH
34136: LD_INT 1
34138: PPUSH
34139: CALL_OW 3
34143: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
34144: LD_VAR 0 2
34148: PPUSH
34149: LD_VAR 0 5
34153: PPUSH
34154: CALL 34463 0 2
34158: PUSH
34159: LD_VAR 0 10
34163: PUSH
34164: EMPTY
34165: EQUAL
34166: OR
34167: IFFALSE 34112
// result := [ ] ;
34169: LD_ADDR_VAR 0 6
34173: PUSH
34174: EMPTY
34175: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
34176: LD_VAR 0 1
34180: PPUSH
34181: LD_VAR 0 2
34185: PPUSH
34186: LD_VAR 0 3
34190: PPUSH
34191: LD_VAR 0 4
34195: PPUSH
34196: LD_VAR 0 5
34200: PPUSH
34201: CALL_OW 448
34205: IFFALSE 34238
// result := [ chassis , engine , control , weapon ] ;
34207: LD_ADDR_VAR 0 6
34211: PUSH
34212: LD_VAR 0 2
34216: PUSH
34217: LD_VAR 0 3
34221: PUSH
34222: LD_VAR 0 4
34226: PUSH
34227: LD_VAR 0 5
34231: PUSH
34232: EMPTY
34233: LIST
34234: LIST
34235: LIST
34236: LIST
34237: ST_TO_ADDR
// end ;
34238: LD_VAR 0 6
34242: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
34243: LD_INT 0
34245: PPUSH
// if not chassis or not engine then
34246: LD_VAR 0 1
34250: NOT
34251: PUSH
34252: LD_VAR 0 2
34256: NOT
34257: OR
34258: IFFALSE 34262
// exit ;
34260: GO 34458
// case engine of engine_solar :
34262: LD_VAR 0 2
34266: PUSH
34267: LD_INT 2
34269: DOUBLE
34270: EQUAL
34271: IFTRUE 34275
34273: GO 34313
34275: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
34276: LD_ADDR_VAR 0 3
34280: PUSH
34281: LD_INT 11
34283: PUSH
34284: LD_INT 12
34286: PUSH
34287: LD_INT 13
34289: PUSH
34290: LD_INT 14
34292: PUSH
34293: LD_INT 1
34295: PUSH
34296: LD_INT 2
34298: PUSH
34299: LD_INT 3
34301: PUSH
34302: EMPTY
34303: LIST
34304: LIST
34305: LIST
34306: LIST
34307: LIST
34308: LIST
34309: LIST
34310: ST_TO_ADDR
34311: GO 34442
34313: LD_INT 1
34315: DOUBLE
34316: EQUAL
34317: IFTRUE 34321
34319: GO 34383
34321: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
34322: LD_ADDR_VAR 0 3
34326: PUSH
34327: LD_INT 11
34329: PUSH
34330: LD_INT 12
34332: PUSH
34333: LD_INT 13
34335: PUSH
34336: LD_INT 14
34338: PUSH
34339: LD_INT 1
34341: PUSH
34342: LD_INT 2
34344: PUSH
34345: LD_INT 3
34347: PUSH
34348: LD_INT 4
34350: PUSH
34351: LD_INT 5
34353: PUSH
34354: LD_INT 21
34356: PUSH
34357: LD_INT 23
34359: PUSH
34360: LD_INT 22
34362: PUSH
34363: LD_INT 24
34365: PUSH
34366: EMPTY
34367: LIST
34368: LIST
34369: LIST
34370: LIST
34371: LIST
34372: LIST
34373: LIST
34374: LIST
34375: LIST
34376: LIST
34377: LIST
34378: LIST
34379: LIST
34380: ST_TO_ADDR
34381: GO 34442
34383: LD_INT 3
34385: DOUBLE
34386: EQUAL
34387: IFTRUE 34391
34389: GO 34441
34391: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34392: LD_ADDR_VAR 0 3
34396: PUSH
34397: LD_INT 13
34399: PUSH
34400: LD_INT 14
34402: PUSH
34403: LD_INT 2
34405: PUSH
34406: LD_INT 3
34408: PUSH
34409: LD_INT 4
34411: PUSH
34412: LD_INT 5
34414: PUSH
34415: LD_INT 21
34417: PUSH
34418: LD_INT 22
34420: PUSH
34421: LD_INT 23
34423: PUSH
34424: LD_INT 24
34426: PUSH
34427: EMPTY
34428: LIST
34429: LIST
34430: LIST
34431: LIST
34432: LIST
34433: LIST
34434: LIST
34435: LIST
34436: LIST
34437: LIST
34438: ST_TO_ADDR
34439: GO 34442
34441: POP
// result := ( chassis in result ) ;
34442: LD_ADDR_VAR 0 3
34446: PUSH
34447: LD_VAR 0 1
34451: PUSH
34452: LD_VAR 0 3
34456: IN
34457: ST_TO_ADDR
// end ;
34458: LD_VAR 0 3
34462: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
34463: LD_INT 0
34465: PPUSH
// if not chassis or not weapon then
34466: LD_VAR 0 1
34470: NOT
34471: PUSH
34472: LD_VAR 0 2
34476: NOT
34477: OR
34478: IFFALSE 34482
// exit ;
34480: GO 35544
// case weapon of us_machine_gun :
34482: LD_VAR 0 2
34486: PUSH
34487: LD_INT 2
34489: DOUBLE
34490: EQUAL
34491: IFTRUE 34495
34493: GO 34525
34495: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
34496: LD_ADDR_VAR 0 3
34500: PUSH
34501: LD_INT 1
34503: PUSH
34504: LD_INT 2
34506: PUSH
34507: LD_INT 3
34509: PUSH
34510: LD_INT 4
34512: PUSH
34513: LD_INT 5
34515: PUSH
34516: EMPTY
34517: LIST
34518: LIST
34519: LIST
34520: LIST
34521: LIST
34522: ST_TO_ADDR
34523: GO 35528
34525: LD_INT 3
34527: DOUBLE
34528: EQUAL
34529: IFTRUE 34533
34531: GO 34563
34533: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
34534: LD_ADDR_VAR 0 3
34538: PUSH
34539: LD_INT 1
34541: PUSH
34542: LD_INT 2
34544: PUSH
34545: LD_INT 3
34547: PUSH
34548: LD_INT 4
34550: PUSH
34551: LD_INT 5
34553: PUSH
34554: EMPTY
34555: LIST
34556: LIST
34557: LIST
34558: LIST
34559: LIST
34560: ST_TO_ADDR
34561: GO 35528
34563: LD_INT 11
34565: DOUBLE
34566: EQUAL
34567: IFTRUE 34571
34569: GO 34601
34571: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
34572: LD_ADDR_VAR 0 3
34576: PUSH
34577: LD_INT 1
34579: PUSH
34580: LD_INT 2
34582: PUSH
34583: LD_INT 3
34585: PUSH
34586: LD_INT 4
34588: PUSH
34589: LD_INT 5
34591: PUSH
34592: EMPTY
34593: LIST
34594: LIST
34595: LIST
34596: LIST
34597: LIST
34598: ST_TO_ADDR
34599: GO 35528
34601: LD_INT 4
34603: DOUBLE
34604: EQUAL
34605: IFTRUE 34609
34607: GO 34635
34609: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
34610: LD_ADDR_VAR 0 3
34614: PUSH
34615: LD_INT 2
34617: PUSH
34618: LD_INT 3
34620: PUSH
34621: LD_INT 4
34623: PUSH
34624: LD_INT 5
34626: PUSH
34627: EMPTY
34628: LIST
34629: LIST
34630: LIST
34631: LIST
34632: ST_TO_ADDR
34633: GO 35528
34635: LD_INT 5
34637: DOUBLE
34638: EQUAL
34639: IFTRUE 34643
34641: GO 34669
34643: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
34644: LD_ADDR_VAR 0 3
34648: PUSH
34649: LD_INT 2
34651: PUSH
34652: LD_INT 3
34654: PUSH
34655: LD_INT 4
34657: PUSH
34658: LD_INT 5
34660: PUSH
34661: EMPTY
34662: LIST
34663: LIST
34664: LIST
34665: LIST
34666: ST_TO_ADDR
34667: GO 35528
34669: LD_INT 9
34671: DOUBLE
34672: EQUAL
34673: IFTRUE 34677
34675: GO 34703
34677: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
34678: LD_ADDR_VAR 0 3
34682: PUSH
34683: LD_INT 2
34685: PUSH
34686: LD_INT 3
34688: PUSH
34689: LD_INT 4
34691: PUSH
34692: LD_INT 5
34694: PUSH
34695: EMPTY
34696: LIST
34697: LIST
34698: LIST
34699: LIST
34700: ST_TO_ADDR
34701: GO 35528
34703: LD_INT 7
34705: DOUBLE
34706: EQUAL
34707: IFTRUE 34711
34709: GO 34737
34711: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
34712: LD_ADDR_VAR 0 3
34716: PUSH
34717: LD_INT 2
34719: PUSH
34720: LD_INT 3
34722: PUSH
34723: LD_INT 4
34725: PUSH
34726: LD_INT 5
34728: PUSH
34729: EMPTY
34730: LIST
34731: LIST
34732: LIST
34733: LIST
34734: ST_TO_ADDR
34735: GO 35528
34737: LD_INT 12
34739: DOUBLE
34740: EQUAL
34741: IFTRUE 34745
34743: GO 34771
34745: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
34746: LD_ADDR_VAR 0 3
34750: PUSH
34751: LD_INT 2
34753: PUSH
34754: LD_INT 3
34756: PUSH
34757: LD_INT 4
34759: PUSH
34760: LD_INT 5
34762: PUSH
34763: EMPTY
34764: LIST
34765: LIST
34766: LIST
34767: LIST
34768: ST_TO_ADDR
34769: GO 35528
34771: LD_INT 13
34773: DOUBLE
34774: EQUAL
34775: IFTRUE 34779
34777: GO 34805
34779: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
34780: LD_ADDR_VAR 0 3
34784: PUSH
34785: LD_INT 2
34787: PUSH
34788: LD_INT 3
34790: PUSH
34791: LD_INT 4
34793: PUSH
34794: LD_INT 5
34796: PUSH
34797: EMPTY
34798: LIST
34799: LIST
34800: LIST
34801: LIST
34802: ST_TO_ADDR
34803: GO 35528
34805: LD_INT 14
34807: DOUBLE
34808: EQUAL
34809: IFTRUE 34813
34811: GO 34831
34813: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
34814: LD_ADDR_VAR 0 3
34818: PUSH
34819: LD_INT 4
34821: PUSH
34822: LD_INT 5
34824: PUSH
34825: EMPTY
34826: LIST
34827: LIST
34828: ST_TO_ADDR
34829: GO 35528
34831: LD_INT 6
34833: DOUBLE
34834: EQUAL
34835: IFTRUE 34839
34837: GO 34857
34839: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
34840: LD_ADDR_VAR 0 3
34844: PUSH
34845: LD_INT 4
34847: PUSH
34848: LD_INT 5
34850: PUSH
34851: EMPTY
34852: LIST
34853: LIST
34854: ST_TO_ADDR
34855: GO 35528
34857: LD_INT 10
34859: DOUBLE
34860: EQUAL
34861: IFTRUE 34865
34863: GO 34883
34865: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
34866: LD_ADDR_VAR 0 3
34870: PUSH
34871: LD_INT 4
34873: PUSH
34874: LD_INT 5
34876: PUSH
34877: EMPTY
34878: LIST
34879: LIST
34880: ST_TO_ADDR
34881: GO 35528
34883: LD_INT 22
34885: DOUBLE
34886: EQUAL
34887: IFTRUE 34891
34889: GO 34917
34891: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
34892: LD_ADDR_VAR 0 3
34896: PUSH
34897: LD_INT 11
34899: PUSH
34900: LD_INT 12
34902: PUSH
34903: LD_INT 13
34905: PUSH
34906: LD_INT 14
34908: PUSH
34909: EMPTY
34910: LIST
34911: LIST
34912: LIST
34913: LIST
34914: ST_TO_ADDR
34915: GO 35528
34917: LD_INT 23
34919: DOUBLE
34920: EQUAL
34921: IFTRUE 34925
34923: GO 34951
34925: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
34926: LD_ADDR_VAR 0 3
34930: PUSH
34931: LD_INT 11
34933: PUSH
34934: LD_INT 12
34936: PUSH
34937: LD_INT 13
34939: PUSH
34940: LD_INT 14
34942: PUSH
34943: EMPTY
34944: LIST
34945: LIST
34946: LIST
34947: LIST
34948: ST_TO_ADDR
34949: GO 35528
34951: LD_INT 24
34953: DOUBLE
34954: EQUAL
34955: IFTRUE 34959
34957: GO 34985
34959: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
34960: LD_ADDR_VAR 0 3
34964: PUSH
34965: LD_INT 11
34967: PUSH
34968: LD_INT 12
34970: PUSH
34971: LD_INT 13
34973: PUSH
34974: LD_INT 14
34976: PUSH
34977: EMPTY
34978: LIST
34979: LIST
34980: LIST
34981: LIST
34982: ST_TO_ADDR
34983: GO 35528
34985: LD_INT 30
34987: DOUBLE
34988: EQUAL
34989: IFTRUE 34993
34991: GO 35019
34993: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
34994: LD_ADDR_VAR 0 3
34998: PUSH
34999: LD_INT 11
35001: PUSH
35002: LD_INT 12
35004: PUSH
35005: LD_INT 13
35007: PUSH
35008: LD_INT 14
35010: PUSH
35011: EMPTY
35012: LIST
35013: LIST
35014: LIST
35015: LIST
35016: ST_TO_ADDR
35017: GO 35528
35019: LD_INT 25
35021: DOUBLE
35022: EQUAL
35023: IFTRUE 35027
35025: GO 35045
35027: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
35028: LD_ADDR_VAR 0 3
35032: PUSH
35033: LD_INT 13
35035: PUSH
35036: LD_INT 14
35038: PUSH
35039: EMPTY
35040: LIST
35041: LIST
35042: ST_TO_ADDR
35043: GO 35528
35045: LD_INT 27
35047: DOUBLE
35048: EQUAL
35049: IFTRUE 35053
35051: GO 35071
35053: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
35054: LD_ADDR_VAR 0 3
35058: PUSH
35059: LD_INT 13
35061: PUSH
35062: LD_INT 14
35064: PUSH
35065: EMPTY
35066: LIST
35067: LIST
35068: ST_TO_ADDR
35069: GO 35528
35071: LD_EXP 26
35075: DOUBLE
35076: EQUAL
35077: IFTRUE 35081
35079: GO 35107
35081: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
35082: LD_ADDR_VAR 0 3
35086: PUSH
35087: LD_INT 11
35089: PUSH
35090: LD_INT 12
35092: PUSH
35093: LD_INT 13
35095: PUSH
35096: LD_INT 14
35098: PUSH
35099: EMPTY
35100: LIST
35101: LIST
35102: LIST
35103: LIST
35104: ST_TO_ADDR
35105: GO 35528
35107: LD_INT 28
35109: DOUBLE
35110: EQUAL
35111: IFTRUE 35115
35113: GO 35133
35115: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
35116: LD_ADDR_VAR 0 3
35120: PUSH
35121: LD_INT 13
35123: PUSH
35124: LD_INT 14
35126: PUSH
35127: EMPTY
35128: LIST
35129: LIST
35130: ST_TO_ADDR
35131: GO 35528
35133: LD_INT 29
35135: DOUBLE
35136: EQUAL
35137: IFTRUE 35141
35139: GO 35159
35141: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
35142: LD_ADDR_VAR 0 3
35146: PUSH
35147: LD_INT 13
35149: PUSH
35150: LD_INT 14
35152: PUSH
35153: EMPTY
35154: LIST
35155: LIST
35156: ST_TO_ADDR
35157: GO 35528
35159: LD_INT 31
35161: DOUBLE
35162: EQUAL
35163: IFTRUE 35167
35165: GO 35185
35167: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
35168: LD_ADDR_VAR 0 3
35172: PUSH
35173: LD_INT 13
35175: PUSH
35176: LD_INT 14
35178: PUSH
35179: EMPTY
35180: LIST
35181: LIST
35182: ST_TO_ADDR
35183: GO 35528
35185: LD_INT 26
35187: DOUBLE
35188: EQUAL
35189: IFTRUE 35193
35191: GO 35211
35193: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
35194: LD_ADDR_VAR 0 3
35198: PUSH
35199: LD_INT 13
35201: PUSH
35202: LD_INT 14
35204: PUSH
35205: EMPTY
35206: LIST
35207: LIST
35208: ST_TO_ADDR
35209: GO 35528
35211: LD_INT 42
35213: DOUBLE
35214: EQUAL
35215: IFTRUE 35219
35217: GO 35245
35219: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
35220: LD_ADDR_VAR 0 3
35224: PUSH
35225: LD_INT 21
35227: PUSH
35228: LD_INT 22
35230: PUSH
35231: LD_INT 23
35233: PUSH
35234: LD_INT 24
35236: PUSH
35237: EMPTY
35238: LIST
35239: LIST
35240: LIST
35241: LIST
35242: ST_TO_ADDR
35243: GO 35528
35245: LD_INT 43
35247: DOUBLE
35248: EQUAL
35249: IFTRUE 35253
35251: GO 35279
35253: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
35254: LD_ADDR_VAR 0 3
35258: PUSH
35259: LD_INT 21
35261: PUSH
35262: LD_INT 22
35264: PUSH
35265: LD_INT 23
35267: PUSH
35268: LD_INT 24
35270: PUSH
35271: EMPTY
35272: LIST
35273: LIST
35274: LIST
35275: LIST
35276: ST_TO_ADDR
35277: GO 35528
35279: LD_INT 44
35281: DOUBLE
35282: EQUAL
35283: IFTRUE 35287
35285: GO 35313
35287: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
35288: LD_ADDR_VAR 0 3
35292: PUSH
35293: LD_INT 21
35295: PUSH
35296: LD_INT 22
35298: PUSH
35299: LD_INT 23
35301: PUSH
35302: LD_INT 24
35304: PUSH
35305: EMPTY
35306: LIST
35307: LIST
35308: LIST
35309: LIST
35310: ST_TO_ADDR
35311: GO 35528
35313: LD_INT 45
35315: DOUBLE
35316: EQUAL
35317: IFTRUE 35321
35319: GO 35347
35321: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
35322: LD_ADDR_VAR 0 3
35326: PUSH
35327: LD_INT 21
35329: PUSH
35330: LD_INT 22
35332: PUSH
35333: LD_INT 23
35335: PUSH
35336: LD_INT 24
35338: PUSH
35339: EMPTY
35340: LIST
35341: LIST
35342: LIST
35343: LIST
35344: ST_TO_ADDR
35345: GO 35528
35347: LD_INT 49
35349: DOUBLE
35350: EQUAL
35351: IFTRUE 35355
35353: GO 35381
35355: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
35356: LD_ADDR_VAR 0 3
35360: PUSH
35361: LD_INT 21
35363: PUSH
35364: LD_INT 22
35366: PUSH
35367: LD_INT 23
35369: PUSH
35370: LD_INT 24
35372: PUSH
35373: EMPTY
35374: LIST
35375: LIST
35376: LIST
35377: LIST
35378: ST_TO_ADDR
35379: GO 35528
35381: LD_INT 51
35383: DOUBLE
35384: EQUAL
35385: IFTRUE 35389
35387: GO 35415
35389: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
35390: LD_ADDR_VAR 0 3
35394: PUSH
35395: LD_INT 21
35397: PUSH
35398: LD_INT 22
35400: PUSH
35401: LD_INT 23
35403: PUSH
35404: LD_INT 24
35406: PUSH
35407: EMPTY
35408: LIST
35409: LIST
35410: LIST
35411: LIST
35412: ST_TO_ADDR
35413: GO 35528
35415: LD_INT 52
35417: DOUBLE
35418: EQUAL
35419: IFTRUE 35423
35421: GO 35449
35423: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
35424: LD_ADDR_VAR 0 3
35428: PUSH
35429: LD_INT 21
35431: PUSH
35432: LD_INT 22
35434: PUSH
35435: LD_INT 23
35437: PUSH
35438: LD_INT 24
35440: PUSH
35441: EMPTY
35442: LIST
35443: LIST
35444: LIST
35445: LIST
35446: ST_TO_ADDR
35447: GO 35528
35449: LD_INT 53
35451: DOUBLE
35452: EQUAL
35453: IFTRUE 35457
35455: GO 35475
35457: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
35458: LD_ADDR_VAR 0 3
35462: PUSH
35463: LD_INT 23
35465: PUSH
35466: LD_INT 24
35468: PUSH
35469: EMPTY
35470: LIST
35471: LIST
35472: ST_TO_ADDR
35473: GO 35528
35475: LD_INT 46
35477: DOUBLE
35478: EQUAL
35479: IFTRUE 35483
35481: GO 35501
35483: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
35484: LD_ADDR_VAR 0 3
35488: PUSH
35489: LD_INT 23
35491: PUSH
35492: LD_INT 24
35494: PUSH
35495: EMPTY
35496: LIST
35497: LIST
35498: ST_TO_ADDR
35499: GO 35528
35501: LD_INT 47
35503: DOUBLE
35504: EQUAL
35505: IFTRUE 35509
35507: GO 35527
35509: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
35510: LD_ADDR_VAR 0 3
35514: PUSH
35515: LD_INT 23
35517: PUSH
35518: LD_INT 24
35520: PUSH
35521: EMPTY
35522: LIST
35523: LIST
35524: ST_TO_ADDR
35525: GO 35528
35527: POP
// result := ( chassis in result ) ;
35528: LD_ADDR_VAR 0 3
35532: PUSH
35533: LD_VAR 0 1
35537: PUSH
35538: LD_VAR 0 3
35542: IN
35543: ST_TO_ADDR
// end ;
35544: LD_VAR 0 3
35548: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
35549: LD_INT 0
35551: PPUSH
35552: PPUSH
35553: PPUSH
35554: PPUSH
35555: PPUSH
35556: PPUSH
35557: PPUSH
// result := array ;
35558: LD_ADDR_VAR 0 5
35562: PUSH
35563: LD_VAR 0 1
35567: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
35568: LD_VAR 0 1
35572: NOT
35573: PUSH
35574: LD_VAR 0 2
35578: NOT
35579: OR
35580: PUSH
35581: LD_VAR 0 3
35585: NOT
35586: OR
35587: PUSH
35588: LD_VAR 0 2
35592: PUSH
35593: LD_VAR 0 1
35597: GREATER
35598: OR
35599: PUSH
35600: LD_VAR 0 3
35604: PUSH
35605: LD_VAR 0 1
35609: GREATER
35610: OR
35611: IFFALSE 35615
// exit ;
35613: GO 35911
// if direction then
35615: LD_VAR 0 4
35619: IFFALSE 35683
// begin d := 1 ;
35621: LD_ADDR_VAR 0 9
35625: PUSH
35626: LD_INT 1
35628: ST_TO_ADDR
// if i_from > i_to then
35629: LD_VAR 0 2
35633: PUSH
35634: LD_VAR 0 3
35638: GREATER
35639: IFFALSE 35665
// length := ( array - i_from ) + i_to else
35641: LD_ADDR_VAR 0 11
35645: PUSH
35646: LD_VAR 0 1
35650: PUSH
35651: LD_VAR 0 2
35655: MINUS
35656: PUSH
35657: LD_VAR 0 3
35661: PLUS
35662: ST_TO_ADDR
35663: GO 35681
// length := i_to - i_from ;
35665: LD_ADDR_VAR 0 11
35669: PUSH
35670: LD_VAR 0 3
35674: PUSH
35675: LD_VAR 0 2
35679: MINUS
35680: ST_TO_ADDR
// end else
35681: GO 35744
// begin d := - 1 ;
35683: LD_ADDR_VAR 0 9
35687: PUSH
35688: LD_INT 1
35690: NEG
35691: ST_TO_ADDR
// if i_from > i_to then
35692: LD_VAR 0 2
35696: PUSH
35697: LD_VAR 0 3
35701: GREATER
35702: IFFALSE 35722
// length := i_from - i_to else
35704: LD_ADDR_VAR 0 11
35708: PUSH
35709: LD_VAR 0 2
35713: PUSH
35714: LD_VAR 0 3
35718: MINUS
35719: ST_TO_ADDR
35720: GO 35744
// length := ( array - i_to ) + i_from ;
35722: LD_ADDR_VAR 0 11
35726: PUSH
35727: LD_VAR 0 1
35731: PUSH
35732: LD_VAR 0 3
35736: MINUS
35737: PUSH
35738: LD_VAR 0 2
35742: PLUS
35743: ST_TO_ADDR
// end ; if not length then
35744: LD_VAR 0 11
35748: NOT
35749: IFFALSE 35753
// exit ;
35751: GO 35911
// tmp := array ;
35753: LD_ADDR_VAR 0 10
35757: PUSH
35758: LD_VAR 0 1
35762: ST_TO_ADDR
// for i = 1 to length do
35763: LD_ADDR_VAR 0 6
35767: PUSH
35768: DOUBLE
35769: LD_INT 1
35771: DEC
35772: ST_TO_ADDR
35773: LD_VAR 0 11
35777: PUSH
35778: FOR_TO
35779: IFFALSE 35899
// begin for j = 1 to array do
35781: LD_ADDR_VAR 0 7
35785: PUSH
35786: DOUBLE
35787: LD_INT 1
35789: DEC
35790: ST_TO_ADDR
35791: LD_VAR 0 1
35795: PUSH
35796: FOR_TO
35797: IFFALSE 35885
// begin k := j + d ;
35799: LD_ADDR_VAR 0 8
35803: PUSH
35804: LD_VAR 0 7
35808: PUSH
35809: LD_VAR 0 9
35813: PLUS
35814: ST_TO_ADDR
// if k > array then
35815: LD_VAR 0 8
35819: PUSH
35820: LD_VAR 0 1
35824: GREATER
35825: IFFALSE 35835
// k := 1 ;
35827: LD_ADDR_VAR 0 8
35831: PUSH
35832: LD_INT 1
35834: ST_TO_ADDR
// if not k then
35835: LD_VAR 0 8
35839: NOT
35840: IFFALSE 35852
// k := array ;
35842: LD_ADDR_VAR 0 8
35846: PUSH
35847: LD_VAR 0 1
35851: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
35852: LD_ADDR_VAR 0 10
35856: PUSH
35857: LD_VAR 0 10
35861: PPUSH
35862: LD_VAR 0 8
35866: PPUSH
35867: LD_VAR 0 1
35871: PUSH
35872: LD_VAR 0 7
35876: ARRAY
35877: PPUSH
35878: CALL_OW 1
35882: ST_TO_ADDR
// end ;
35883: GO 35796
35885: POP
35886: POP
// array := tmp ;
35887: LD_ADDR_VAR 0 1
35891: PUSH
35892: LD_VAR 0 10
35896: ST_TO_ADDR
// end ;
35897: GO 35778
35899: POP
35900: POP
// result := array ;
35901: LD_ADDR_VAR 0 5
35905: PUSH
35906: LD_VAR 0 1
35910: ST_TO_ADDR
// end ;
35911: LD_VAR 0 5
35915: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
35916: LD_INT 0
35918: PPUSH
35919: PPUSH
// result := 0 ;
35920: LD_ADDR_VAR 0 3
35924: PUSH
35925: LD_INT 0
35927: ST_TO_ADDR
// if not array or not value in array then
35928: LD_VAR 0 1
35932: NOT
35933: PUSH
35934: LD_VAR 0 2
35938: PUSH
35939: LD_VAR 0 1
35943: IN
35944: NOT
35945: OR
35946: IFFALSE 35950
// exit ;
35948: GO 36004
// for i = 1 to array do
35950: LD_ADDR_VAR 0 4
35954: PUSH
35955: DOUBLE
35956: LD_INT 1
35958: DEC
35959: ST_TO_ADDR
35960: LD_VAR 0 1
35964: PUSH
35965: FOR_TO
35966: IFFALSE 36002
// if value = array [ i ] then
35968: LD_VAR 0 2
35972: PUSH
35973: LD_VAR 0 1
35977: PUSH
35978: LD_VAR 0 4
35982: ARRAY
35983: EQUAL
35984: IFFALSE 36000
// begin result := i ;
35986: LD_ADDR_VAR 0 3
35990: PUSH
35991: LD_VAR 0 4
35995: ST_TO_ADDR
// exit ;
35996: POP
35997: POP
35998: GO 36004
// end ;
36000: GO 35965
36002: POP
36003: POP
// end ;
36004: LD_VAR 0 3
36008: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
36009: LD_INT 0
36011: PPUSH
// vc_chassis := chassis ;
36012: LD_ADDR_OWVAR 37
36016: PUSH
36017: LD_VAR 0 1
36021: ST_TO_ADDR
// vc_engine := engine ;
36022: LD_ADDR_OWVAR 39
36026: PUSH
36027: LD_VAR 0 2
36031: ST_TO_ADDR
// vc_control := control ;
36032: LD_ADDR_OWVAR 38
36036: PUSH
36037: LD_VAR 0 3
36041: ST_TO_ADDR
// vc_weapon := weapon ;
36042: LD_ADDR_OWVAR 40
36046: PUSH
36047: LD_VAR 0 4
36051: ST_TO_ADDR
// vc_fuel_battery := fuel ;
36052: LD_ADDR_OWVAR 41
36056: PUSH
36057: LD_VAR 0 5
36061: ST_TO_ADDR
// end ;
36062: LD_VAR 0 6
36066: RET
// export function WantPlant ( unit ) ; var task ; begin
36067: LD_INT 0
36069: PPUSH
36070: PPUSH
// result := false ;
36071: LD_ADDR_VAR 0 2
36075: PUSH
36076: LD_INT 0
36078: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
36079: LD_ADDR_VAR 0 3
36083: PUSH
36084: LD_VAR 0 1
36088: PPUSH
36089: CALL_OW 437
36093: ST_TO_ADDR
// if task then
36094: LD_VAR 0 3
36098: IFFALSE 36126
// if task [ 1 ] [ 1 ] = p then
36100: LD_VAR 0 3
36104: PUSH
36105: LD_INT 1
36107: ARRAY
36108: PUSH
36109: LD_INT 1
36111: ARRAY
36112: PUSH
36113: LD_STRING p
36115: EQUAL
36116: IFFALSE 36126
// result := true ;
36118: LD_ADDR_VAR 0 2
36122: PUSH
36123: LD_INT 1
36125: ST_TO_ADDR
// end ;
36126: LD_VAR 0 2
36130: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
36131: LD_INT 0
36133: PPUSH
36134: PPUSH
36135: PPUSH
36136: PPUSH
// if pos < 1 then
36137: LD_VAR 0 2
36141: PUSH
36142: LD_INT 1
36144: LESS
36145: IFFALSE 36149
// exit ;
36147: GO 36452
// if pos = 1 then
36149: LD_VAR 0 2
36153: PUSH
36154: LD_INT 1
36156: EQUAL
36157: IFFALSE 36190
// result := Replace ( arr , pos [ 1 ] , value ) else
36159: LD_ADDR_VAR 0 4
36163: PUSH
36164: LD_VAR 0 1
36168: PPUSH
36169: LD_VAR 0 2
36173: PUSH
36174: LD_INT 1
36176: ARRAY
36177: PPUSH
36178: LD_VAR 0 3
36182: PPUSH
36183: CALL_OW 1
36187: ST_TO_ADDR
36188: GO 36452
// begin tmp := arr ;
36190: LD_ADDR_VAR 0 6
36194: PUSH
36195: LD_VAR 0 1
36199: ST_TO_ADDR
// s_arr := [ tmp ] ;
36200: LD_ADDR_VAR 0 7
36204: PUSH
36205: LD_VAR 0 6
36209: PUSH
36210: EMPTY
36211: LIST
36212: ST_TO_ADDR
// for i = 1 to pos - 1 do
36213: LD_ADDR_VAR 0 5
36217: PUSH
36218: DOUBLE
36219: LD_INT 1
36221: DEC
36222: ST_TO_ADDR
36223: LD_VAR 0 2
36227: PUSH
36228: LD_INT 1
36230: MINUS
36231: PUSH
36232: FOR_TO
36233: IFFALSE 36278
// begin tmp := tmp [ pos [ i ] ] ;
36235: LD_ADDR_VAR 0 6
36239: PUSH
36240: LD_VAR 0 6
36244: PUSH
36245: LD_VAR 0 2
36249: PUSH
36250: LD_VAR 0 5
36254: ARRAY
36255: ARRAY
36256: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
36257: LD_ADDR_VAR 0 7
36261: PUSH
36262: LD_VAR 0 7
36266: PUSH
36267: LD_VAR 0 6
36271: PUSH
36272: EMPTY
36273: LIST
36274: ADD
36275: ST_TO_ADDR
// end ;
36276: GO 36232
36278: POP
36279: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
36280: LD_ADDR_VAR 0 6
36284: PUSH
36285: LD_VAR 0 6
36289: PPUSH
36290: LD_VAR 0 2
36294: PUSH
36295: LD_VAR 0 2
36299: ARRAY
36300: PPUSH
36301: LD_VAR 0 3
36305: PPUSH
36306: CALL_OW 1
36310: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
36311: LD_ADDR_VAR 0 7
36315: PUSH
36316: LD_VAR 0 7
36320: PPUSH
36321: LD_VAR 0 7
36325: PPUSH
36326: LD_VAR 0 6
36330: PPUSH
36331: CALL_OW 1
36335: ST_TO_ADDR
// for i = s_arr downto 2 do
36336: LD_ADDR_VAR 0 5
36340: PUSH
36341: DOUBLE
36342: LD_VAR 0 7
36346: INC
36347: ST_TO_ADDR
36348: LD_INT 2
36350: PUSH
36351: FOR_DOWNTO
36352: IFFALSE 36436
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
36354: LD_ADDR_VAR 0 6
36358: PUSH
36359: LD_VAR 0 7
36363: PUSH
36364: LD_VAR 0 5
36368: PUSH
36369: LD_INT 1
36371: MINUS
36372: ARRAY
36373: PPUSH
36374: LD_VAR 0 2
36378: PUSH
36379: LD_VAR 0 5
36383: PUSH
36384: LD_INT 1
36386: MINUS
36387: ARRAY
36388: PPUSH
36389: LD_VAR 0 7
36393: PUSH
36394: LD_VAR 0 5
36398: ARRAY
36399: PPUSH
36400: CALL_OW 1
36404: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
36405: LD_ADDR_VAR 0 7
36409: PUSH
36410: LD_VAR 0 7
36414: PPUSH
36415: LD_VAR 0 5
36419: PUSH
36420: LD_INT 1
36422: MINUS
36423: PPUSH
36424: LD_VAR 0 6
36428: PPUSH
36429: CALL_OW 1
36433: ST_TO_ADDR
// end ;
36434: GO 36351
36436: POP
36437: POP
// result := s_arr [ 1 ] ;
36438: LD_ADDR_VAR 0 4
36442: PUSH
36443: LD_VAR 0 7
36447: PUSH
36448: LD_INT 1
36450: ARRAY
36451: ST_TO_ADDR
// end ; end ;
36452: LD_VAR 0 4
36456: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
36457: LD_INT 0
36459: PPUSH
36460: PPUSH
// if not list then
36461: LD_VAR 0 1
36465: NOT
36466: IFFALSE 36470
// exit ;
36468: GO 36561
// i := list [ pos1 ] ;
36470: LD_ADDR_VAR 0 5
36474: PUSH
36475: LD_VAR 0 1
36479: PUSH
36480: LD_VAR 0 2
36484: ARRAY
36485: ST_TO_ADDR
// if not i then
36486: LD_VAR 0 5
36490: NOT
36491: IFFALSE 36495
// exit ;
36493: GO 36561
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
36495: LD_ADDR_VAR 0 1
36499: PUSH
36500: LD_VAR 0 1
36504: PPUSH
36505: LD_VAR 0 2
36509: PPUSH
36510: LD_VAR 0 1
36514: PUSH
36515: LD_VAR 0 3
36519: ARRAY
36520: PPUSH
36521: CALL_OW 1
36525: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
36526: LD_ADDR_VAR 0 1
36530: PUSH
36531: LD_VAR 0 1
36535: PPUSH
36536: LD_VAR 0 3
36540: PPUSH
36541: LD_VAR 0 5
36545: PPUSH
36546: CALL_OW 1
36550: ST_TO_ADDR
// result := list ;
36551: LD_ADDR_VAR 0 4
36555: PUSH
36556: LD_VAR 0 1
36560: ST_TO_ADDR
// end ;
36561: LD_VAR 0 4
36565: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
36566: LD_INT 0
36568: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
36569: LD_ADDR_VAR 0 5
36573: PUSH
36574: LD_VAR 0 1
36578: PPUSH
36579: CALL_OW 250
36583: PPUSH
36584: LD_VAR 0 1
36588: PPUSH
36589: CALL_OW 251
36593: PPUSH
36594: LD_VAR 0 2
36598: PPUSH
36599: LD_VAR 0 3
36603: PPUSH
36604: LD_VAR 0 4
36608: PPUSH
36609: CALL 36619 0 5
36613: ST_TO_ADDR
// end ;
36614: LD_VAR 0 5
36618: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
36619: LD_INT 0
36621: PPUSH
36622: PPUSH
36623: PPUSH
36624: PPUSH
// if not list then
36625: LD_VAR 0 3
36629: NOT
36630: IFFALSE 36634
// exit ;
36632: GO 37022
// result := [ ] ;
36634: LD_ADDR_VAR 0 6
36638: PUSH
36639: EMPTY
36640: ST_TO_ADDR
// for i in list do
36641: LD_ADDR_VAR 0 7
36645: PUSH
36646: LD_VAR 0 3
36650: PUSH
36651: FOR_IN
36652: IFFALSE 36854
// begin tmp := GetDistUnitXY ( i , x , y ) ;
36654: LD_ADDR_VAR 0 9
36658: PUSH
36659: LD_VAR 0 7
36663: PPUSH
36664: LD_VAR 0 1
36668: PPUSH
36669: LD_VAR 0 2
36673: PPUSH
36674: CALL_OW 297
36678: ST_TO_ADDR
// if not result then
36679: LD_VAR 0 6
36683: NOT
36684: IFFALSE 36710
// result := [ [ i , tmp ] ] else
36686: LD_ADDR_VAR 0 6
36690: PUSH
36691: LD_VAR 0 7
36695: PUSH
36696: LD_VAR 0 9
36700: PUSH
36701: EMPTY
36702: LIST
36703: LIST
36704: PUSH
36705: EMPTY
36706: LIST
36707: ST_TO_ADDR
36708: GO 36852
// begin if result [ result ] [ 2 ] < tmp then
36710: LD_VAR 0 6
36714: PUSH
36715: LD_VAR 0 6
36719: ARRAY
36720: PUSH
36721: LD_INT 2
36723: ARRAY
36724: PUSH
36725: LD_VAR 0 9
36729: LESS
36730: IFFALSE 36772
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
36732: LD_ADDR_VAR 0 6
36736: PUSH
36737: LD_VAR 0 6
36741: PPUSH
36742: LD_VAR 0 6
36746: PUSH
36747: LD_INT 1
36749: PLUS
36750: PPUSH
36751: LD_VAR 0 7
36755: PUSH
36756: LD_VAR 0 9
36760: PUSH
36761: EMPTY
36762: LIST
36763: LIST
36764: PPUSH
36765: CALL_OW 2
36769: ST_TO_ADDR
36770: GO 36852
// for j = 1 to result do
36772: LD_ADDR_VAR 0 8
36776: PUSH
36777: DOUBLE
36778: LD_INT 1
36780: DEC
36781: ST_TO_ADDR
36782: LD_VAR 0 6
36786: PUSH
36787: FOR_TO
36788: IFFALSE 36850
// begin if tmp < result [ j ] [ 2 ] then
36790: LD_VAR 0 9
36794: PUSH
36795: LD_VAR 0 6
36799: PUSH
36800: LD_VAR 0 8
36804: ARRAY
36805: PUSH
36806: LD_INT 2
36808: ARRAY
36809: LESS
36810: IFFALSE 36848
// begin result := Insert ( result , j , [ i , tmp ] ) ;
36812: LD_ADDR_VAR 0 6
36816: PUSH
36817: LD_VAR 0 6
36821: PPUSH
36822: LD_VAR 0 8
36826: PPUSH
36827: LD_VAR 0 7
36831: PUSH
36832: LD_VAR 0 9
36836: PUSH
36837: EMPTY
36838: LIST
36839: LIST
36840: PPUSH
36841: CALL_OW 2
36845: ST_TO_ADDR
// break ;
36846: GO 36850
// end ; end ;
36848: GO 36787
36850: POP
36851: POP
// end ; end ;
36852: GO 36651
36854: POP
36855: POP
// if result and not asc then
36856: LD_VAR 0 6
36860: PUSH
36861: LD_VAR 0 4
36865: NOT
36866: AND
36867: IFFALSE 36942
// begin tmp := result ;
36869: LD_ADDR_VAR 0 9
36873: PUSH
36874: LD_VAR 0 6
36878: ST_TO_ADDR
// for i = tmp downto 1 do
36879: LD_ADDR_VAR 0 7
36883: PUSH
36884: DOUBLE
36885: LD_VAR 0 9
36889: INC
36890: ST_TO_ADDR
36891: LD_INT 1
36893: PUSH
36894: FOR_DOWNTO
36895: IFFALSE 36940
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
36897: LD_ADDR_VAR 0 6
36901: PUSH
36902: LD_VAR 0 6
36906: PPUSH
36907: LD_VAR 0 9
36911: PUSH
36912: LD_VAR 0 7
36916: MINUS
36917: PUSH
36918: LD_INT 1
36920: PLUS
36921: PPUSH
36922: LD_VAR 0 9
36926: PUSH
36927: LD_VAR 0 7
36931: ARRAY
36932: PPUSH
36933: CALL_OW 1
36937: ST_TO_ADDR
36938: GO 36894
36940: POP
36941: POP
// end ; tmp := [ ] ;
36942: LD_ADDR_VAR 0 9
36946: PUSH
36947: EMPTY
36948: ST_TO_ADDR
// if mode then
36949: LD_VAR 0 5
36953: IFFALSE 37022
// begin for i = 1 to result do
36955: LD_ADDR_VAR 0 7
36959: PUSH
36960: DOUBLE
36961: LD_INT 1
36963: DEC
36964: ST_TO_ADDR
36965: LD_VAR 0 6
36969: PUSH
36970: FOR_TO
36971: IFFALSE 37010
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
36973: LD_ADDR_VAR 0 9
36977: PUSH
36978: LD_VAR 0 9
36982: PPUSH
36983: LD_VAR 0 7
36987: PPUSH
36988: LD_VAR 0 6
36992: PUSH
36993: LD_VAR 0 7
36997: ARRAY
36998: PUSH
36999: LD_INT 1
37001: ARRAY
37002: PPUSH
37003: CALL_OW 1
37007: ST_TO_ADDR
37008: GO 36970
37010: POP
37011: POP
// result := tmp ;
37012: LD_ADDR_VAR 0 6
37016: PUSH
37017: LD_VAR 0 9
37021: ST_TO_ADDR
// end ; end ;
37022: LD_VAR 0 6
37026: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
37027: LD_INT 0
37029: PPUSH
37030: PPUSH
37031: PPUSH
37032: PPUSH
37033: PPUSH
37034: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
37035: LD_ADDR_VAR 0 5
37039: PUSH
37040: LD_INT 0
37042: PUSH
37043: LD_INT 0
37045: PUSH
37046: LD_INT 0
37048: PUSH
37049: EMPTY
37050: PUSH
37051: EMPTY
37052: LIST
37053: LIST
37054: LIST
37055: LIST
37056: ST_TO_ADDR
// if not x or not y then
37057: LD_VAR 0 2
37061: NOT
37062: PUSH
37063: LD_VAR 0 3
37067: NOT
37068: OR
37069: IFFALSE 37073
// exit ;
37071: GO 38725
// if not range then
37073: LD_VAR 0 4
37077: NOT
37078: IFFALSE 37088
// range := 10 ;
37080: LD_ADDR_VAR 0 4
37084: PUSH
37085: LD_INT 10
37087: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37088: LD_ADDR_VAR 0 8
37092: PUSH
37093: LD_INT 81
37095: PUSH
37096: LD_VAR 0 1
37100: PUSH
37101: EMPTY
37102: LIST
37103: LIST
37104: PUSH
37105: LD_INT 92
37107: PUSH
37108: LD_VAR 0 2
37112: PUSH
37113: LD_VAR 0 3
37117: PUSH
37118: LD_VAR 0 4
37122: PUSH
37123: EMPTY
37124: LIST
37125: LIST
37126: LIST
37127: LIST
37128: PUSH
37129: LD_INT 3
37131: PUSH
37132: LD_INT 21
37134: PUSH
37135: LD_INT 3
37137: PUSH
37138: EMPTY
37139: LIST
37140: LIST
37141: PUSH
37142: EMPTY
37143: LIST
37144: LIST
37145: PUSH
37146: EMPTY
37147: LIST
37148: LIST
37149: LIST
37150: PPUSH
37151: CALL_OW 69
37155: ST_TO_ADDR
// if not tmp then
37156: LD_VAR 0 8
37160: NOT
37161: IFFALSE 37165
// exit ;
37163: GO 38725
// for i in tmp do
37165: LD_ADDR_VAR 0 6
37169: PUSH
37170: LD_VAR 0 8
37174: PUSH
37175: FOR_IN
37176: IFFALSE 38700
// begin points := [ 0 , 0 , 0 ] ;
37178: LD_ADDR_VAR 0 9
37182: PUSH
37183: LD_INT 0
37185: PUSH
37186: LD_INT 0
37188: PUSH
37189: LD_INT 0
37191: PUSH
37192: EMPTY
37193: LIST
37194: LIST
37195: LIST
37196: ST_TO_ADDR
// bpoints := 1 ;
37197: LD_ADDR_VAR 0 10
37201: PUSH
37202: LD_INT 1
37204: ST_TO_ADDR
// case GetType ( i ) of unit_human :
37205: LD_VAR 0 6
37209: PPUSH
37210: CALL_OW 247
37214: PUSH
37215: LD_INT 1
37217: DOUBLE
37218: EQUAL
37219: IFTRUE 37223
37221: GO 37801
37223: POP
// begin if GetClass ( i ) = 1 then
37224: LD_VAR 0 6
37228: PPUSH
37229: CALL_OW 257
37233: PUSH
37234: LD_INT 1
37236: EQUAL
37237: IFFALSE 37258
// points := [ 10 , 5 , 3 ] ;
37239: LD_ADDR_VAR 0 9
37243: PUSH
37244: LD_INT 10
37246: PUSH
37247: LD_INT 5
37249: PUSH
37250: LD_INT 3
37252: PUSH
37253: EMPTY
37254: LIST
37255: LIST
37256: LIST
37257: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
37258: LD_VAR 0 6
37262: PPUSH
37263: CALL_OW 257
37267: PUSH
37268: LD_INT 2
37270: PUSH
37271: LD_INT 3
37273: PUSH
37274: LD_INT 4
37276: PUSH
37277: EMPTY
37278: LIST
37279: LIST
37280: LIST
37281: IN
37282: IFFALSE 37303
// points := [ 3 , 2 , 1 ] ;
37284: LD_ADDR_VAR 0 9
37288: PUSH
37289: LD_INT 3
37291: PUSH
37292: LD_INT 2
37294: PUSH
37295: LD_INT 1
37297: PUSH
37298: EMPTY
37299: LIST
37300: LIST
37301: LIST
37302: ST_TO_ADDR
// if GetClass ( i ) = 5 then
37303: LD_VAR 0 6
37307: PPUSH
37308: CALL_OW 257
37312: PUSH
37313: LD_INT 5
37315: EQUAL
37316: IFFALSE 37337
// points := [ 130 , 5 , 2 ] ;
37318: LD_ADDR_VAR 0 9
37322: PUSH
37323: LD_INT 130
37325: PUSH
37326: LD_INT 5
37328: PUSH
37329: LD_INT 2
37331: PUSH
37332: EMPTY
37333: LIST
37334: LIST
37335: LIST
37336: ST_TO_ADDR
// if GetClass ( i ) = 8 then
37337: LD_VAR 0 6
37341: PPUSH
37342: CALL_OW 257
37346: PUSH
37347: LD_INT 8
37349: EQUAL
37350: IFFALSE 37371
// points := [ 35 , 35 , 30 ] ;
37352: LD_ADDR_VAR 0 9
37356: PUSH
37357: LD_INT 35
37359: PUSH
37360: LD_INT 35
37362: PUSH
37363: LD_INT 30
37365: PUSH
37366: EMPTY
37367: LIST
37368: LIST
37369: LIST
37370: ST_TO_ADDR
// if GetClass ( i ) = 9 then
37371: LD_VAR 0 6
37375: PPUSH
37376: CALL_OW 257
37380: PUSH
37381: LD_INT 9
37383: EQUAL
37384: IFFALSE 37405
// points := [ 20 , 55 , 40 ] ;
37386: LD_ADDR_VAR 0 9
37390: PUSH
37391: LD_INT 20
37393: PUSH
37394: LD_INT 55
37396: PUSH
37397: LD_INT 40
37399: PUSH
37400: EMPTY
37401: LIST
37402: LIST
37403: LIST
37404: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
37405: LD_VAR 0 6
37409: PPUSH
37410: CALL_OW 257
37414: PUSH
37415: LD_INT 12
37417: PUSH
37418: LD_INT 16
37420: PUSH
37421: EMPTY
37422: LIST
37423: LIST
37424: IN
37425: IFFALSE 37446
// points := [ 5 , 3 , 2 ] ;
37427: LD_ADDR_VAR 0 9
37431: PUSH
37432: LD_INT 5
37434: PUSH
37435: LD_INT 3
37437: PUSH
37438: LD_INT 2
37440: PUSH
37441: EMPTY
37442: LIST
37443: LIST
37444: LIST
37445: ST_TO_ADDR
// if GetClass ( i ) = 17 then
37446: LD_VAR 0 6
37450: PPUSH
37451: CALL_OW 257
37455: PUSH
37456: LD_INT 17
37458: EQUAL
37459: IFFALSE 37480
// points := [ 100 , 50 , 75 ] ;
37461: LD_ADDR_VAR 0 9
37465: PUSH
37466: LD_INT 100
37468: PUSH
37469: LD_INT 50
37471: PUSH
37472: LD_INT 75
37474: PUSH
37475: EMPTY
37476: LIST
37477: LIST
37478: LIST
37479: ST_TO_ADDR
// if GetClass ( i ) = 15 then
37480: LD_VAR 0 6
37484: PPUSH
37485: CALL_OW 257
37489: PUSH
37490: LD_INT 15
37492: EQUAL
37493: IFFALSE 37514
// points := [ 10 , 5 , 3 ] ;
37495: LD_ADDR_VAR 0 9
37499: PUSH
37500: LD_INT 10
37502: PUSH
37503: LD_INT 5
37505: PUSH
37506: LD_INT 3
37508: PUSH
37509: EMPTY
37510: LIST
37511: LIST
37512: LIST
37513: ST_TO_ADDR
// if GetClass ( i ) = 14 then
37514: LD_VAR 0 6
37518: PPUSH
37519: CALL_OW 257
37523: PUSH
37524: LD_INT 14
37526: EQUAL
37527: IFFALSE 37548
// points := [ 10 , 0 , 0 ] ;
37529: LD_ADDR_VAR 0 9
37533: PUSH
37534: LD_INT 10
37536: PUSH
37537: LD_INT 0
37539: PUSH
37540: LD_INT 0
37542: PUSH
37543: EMPTY
37544: LIST
37545: LIST
37546: LIST
37547: ST_TO_ADDR
// if GetClass ( i ) = 11 then
37548: LD_VAR 0 6
37552: PPUSH
37553: CALL_OW 257
37557: PUSH
37558: LD_INT 11
37560: EQUAL
37561: IFFALSE 37582
// points := [ 30 , 10 , 5 ] ;
37563: LD_ADDR_VAR 0 9
37567: PUSH
37568: LD_INT 30
37570: PUSH
37571: LD_INT 10
37573: PUSH
37574: LD_INT 5
37576: PUSH
37577: EMPTY
37578: LIST
37579: LIST
37580: LIST
37581: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
37582: LD_VAR 0 1
37586: PPUSH
37587: LD_INT 5
37589: PPUSH
37590: CALL_OW 321
37594: PUSH
37595: LD_INT 2
37597: EQUAL
37598: IFFALSE 37615
// bpoints := bpoints * 1.8 ;
37600: LD_ADDR_VAR 0 10
37604: PUSH
37605: LD_VAR 0 10
37609: PUSH
37610: LD_REAL  1.80000000000000E+0000
37613: MUL
37614: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
37615: LD_VAR 0 6
37619: PPUSH
37620: CALL_OW 257
37624: PUSH
37625: LD_INT 1
37627: PUSH
37628: LD_INT 2
37630: PUSH
37631: LD_INT 3
37633: PUSH
37634: LD_INT 4
37636: PUSH
37637: EMPTY
37638: LIST
37639: LIST
37640: LIST
37641: LIST
37642: IN
37643: PUSH
37644: LD_VAR 0 1
37648: PPUSH
37649: LD_INT 51
37651: PPUSH
37652: CALL_OW 321
37656: PUSH
37657: LD_INT 2
37659: EQUAL
37660: AND
37661: IFFALSE 37678
// bpoints := bpoints * 1.2 ;
37663: LD_ADDR_VAR 0 10
37667: PUSH
37668: LD_VAR 0 10
37672: PUSH
37673: LD_REAL  1.20000000000000E+0000
37676: MUL
37677: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
37678: LD_VAR 0 6
37682: PPUSH
37683: CALL_OW 257
37687: PUSH
37688: LD_INT 5
37690: PUSH
37691: LD_INT 7
37693: PUSH
37694: LD_INT 9
37696: PUSH
37697: EMPTY
37698: LIST
37699: LIST
37700: LIST
37701: IN
37702: PUSH
37703: LD_VAR 0 1
37707: PPUSH
37708: LD_INT 52
37710: PPUSH
37711: CALL_OW 321
37715: PUSH
37716: LD_INT 2
37718: EQUAL
37719: AND
37720: IFFALSE 37737
// bpoints := bpoints * 1.5 ;
37722: LD_ADDR_VAR 0 10
37726: PUSH
37727: LD_VAR 0 10
37731: PUSH
37732: LD_REAL  1.50000000000000E+0000
37735: MUL
37736: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
37737: LD_VAR 0 1
37741: PPUSH
37742: LD_INT 66
37744: PPUSH
37745: CALL_OW 321
37749: PUSH
37750: LD_INT 2
37752: EQUAL
37753: IFFALSE 37770
// bpoints := bpoints * 1.1 ;
37755: LD_ADDR_VAR 0 10
37759: PUSH
37760: LD_VAR 0 10
37764: PUSH
37765: LD_REAL  1.10000000000000E+0000
37768: MUL
37769: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
37770: LD_ADDR_VAR 0 10
37774: PUSH
37775: LD_VAR 0 10
37779: PUSH
37780: LD_VAR 0 6
37784: PPUSH
37785: LD_INT 1
37787: PPUSH
37788: CALL_OW 259
37792: PUSH
37793: LD_REAL  1.15000000000000E+0000
37796: MUL
37797: MUL
37798: ST_TO_ADDR
// end ; unit_vehicle :
37799: GO 38629
37801: LD_INT 2
37803: DOUBLE
37804: EQUAL
37805: IFTRUE 37809
37807: GO 38617
37809: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
37810: LD_VAR 0 6
37814: PPUSH
37815: CALL_OW 264
37819: PUSH
37820: LD_INT 2
37822: PUSH
37823: LD_INT 42
37825: PUSH
37826: LD_INT 24
37828: PUSH
37829: EMPTY
37830: LIST
37831: LIST
37832: LIST
37833: IN
37834: IFFALSE 37855
// points := [ 25 , 5 , 3 ] ;
37836: LD_ADDR_VAR 0 9
37840: PUSH
37841: LD_INT 25
37843: PUSH
37844: LD_INT 5
37846: PUSH
37847: LD_INT 3
37849: PUSH
37850: EMPTY
37851: LIST
37852: LIST
37853: LIST
37854: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
37855: LD_VAR 0 6
37859: PPUSH
37860: CALL_OW 264
37864: PUSH
37865: LD_INT 4
37867: PUSH
37868: LD_INT 43
37870: PUSH
37871: LD_INT 25
37873: PUSH
37874: EMPTY
37875: LIST
37876: LIST
37877: LIST
37878: IN
37879: IFFALSE 37900
// points := [ 40 , 15 , 5 ] ;
37881: LD_ADDR_VAR 0 9
37885: PUSH
37886: LD_INT 40
37888: PUSH
37889: LD_INT 15
37891: PUSH
37892: LD_INT 5
37894: PUSH
37895: EMPTY
37896: LIST
37897: LIST
37898: LIST
37899: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
37900: LD_VAR 0 6
37904: PPUSH
37905: CALL_OW 264
37909: PUSH
37910: LD_INT 3
37912: PUSH
37913: LD_INT 23
37915: PUSH
37916: EMPTY
37917: LIST
37918: LIST
37919: IN
37920: IFFALSE 37941
// points := [ 7 , 25 , 8 ] ;
37922: LD_ADDR_VAR 0 9
37926: PUSH
37927: LD_INT 7
37929: PUSH
37930: LD_INT 25
37932: PUSH
37933: LD_INT 8
37935: PUSH
37936: EMPTY
37937: LIST
37938: LIST
37939: LIST
37940: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
37941: LD_VAR 0 6
37945: PPUSH
37946: CALL_OW 264
37950: PUSH
37951: LD_INT 5
37953: PUSH
37954: LD_INT 27
37956: PUSH
37957: LD_INT 44
37959: PUSH
37960: EMPTY
37961: LIST
37962: LIST
37963: LIST
37964: IN
37965: IFFALSE 37986
// points := [ 14 , 50 , 16 ] ;
37967: LD_ADDR_VAR 0 9
37971: PUSH
37972: LD_INT 14
37974: PUSH
37975: LD_INT 50
37977: PUSH
37978: LD_INT 16
37980: PUSH
37981: EMPTY
37982: LIST
37983: LIST
37984: LIST
37985: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
37986: LD_VAR 0 6
37990: PPUSH
37991: CALL_OW 264
37995: PUSH
37996: LD_INT 6
37998: PUSH
37999: LD_INT 46
38001: PUSH
38002: EMPTY
38003: LIST
38004: LIST
38005: IN
38006: IFFALSE 38027
// points := [ 32 , 120 , 70 ] ;
38008: LD_ADDR_VAR 0 9
38012: PUSH
38013: LD_INT 32
38015: PUSH
38016: LD_INT 120
38018: PUSH
38019: LD_INT 70
38021: PUSH
38022: EMPTY
38023: LIST
38024: LIST
38025: LIST
38026: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
38027: LD_VAR 0 6
38031: PPUSH
38032: CALL_OW 264
38036: PUSH
38037: LD_INT 7
38039: PUSH
38040: LD_INT 28
38042: PUSH
38043: LD_INT 45
38045: PUSH
38046: LD_EXP 26
38050: PUSH
38051: EMPTY
38052: LIST
38053: LIST
38054: LIST
38055: LIST
38056: IN
38057: IFFALSE 38078
// points := [ 35 , 20 , 45 ] ;
38059: LD_ADDR_VAR 0 9
38063: PUSH
38064: LD_INT 35
38066: PUSH
38067: LD_INT 20
38069: PUSH
38070: LD_INT 45
38072: PUSH
38073: EMPTY
38074: LIST
38075: LIST
38076: LIST
38077: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
38078: LD_VAR 0 6
38082: PPUSH
38083: CALL_OW 264
38087: PUSH
38088: LD_INT 47
38090: PUSH
38091: EMPTY
38092: LIST
38093: IN
38094: IFFALSE 38115
// points := [ 67 , 45 , 75 ] ;
38096: LD_ADDR_VAR 0 9
38100: PUSH
38101: LD_INT 67
38103: PUSH
38104: LD_INT 45
38106: PUSH
38107: LD_INT 75
38109: PUSH
38110: EMPTY
38111: LIST
38112: LIST
38113: LIST
38114: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
38115: LD_VAR 0 6
38119: PPUSH
38120: CALL_OW 264
38124: PUSH
38125: LD_INT 26
38127: PUSH
38128: EMPTY
38129: LIST
38130: IN
38131: IFFALSE 38152
// points := [ 120 , 30 , 80 ] ;
38133: LD_ADDR_VAR 0 9
38137: PUSH
38138: LD_INT 120
38140: PUSH
38141: LD_INT 30
38143: PUSH
38144: LD_INT 80
38146: PUSH
38147: EMPTY
38148: LIST
38149: LIST
38150: LIST
38151: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
38152: LD_VAR 0 6
38156: PPUSH
38157: CALL_OW 264
38161: PUSH
38162: LD_INT 22
38164: PUSH
38165: EMPTY
38166: LIST
38167: IN
38168: IFFALSE 38189
// points := [ 40 , 1 , 1 ] ;
38170: LD_ADDR_VAR 0 9
38174: PUSH
38175: LD_INT 40
38177: PUSH
38178: LD_INT 1
38180: PUSH
38181: LD_INT 1
38183: PUSH
38184: EMPTY
38185: LIST
38186: LIST
38187: LIST
38188: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
38189: LD_VAR 0 6
38193: PPUSH
38194: CALL_OW 264
38198: PUSH
38199: LD_INT 29
38201: PUSH
38202: EMPTY
38203: LIST
38204: IN
38205: IFFALSE 38226
// points := [ 70 , 200 , 400 ] ;
38207: LD_ADDR_VAR 0 9
38211: PUSH
38212: LD_INT 70
38214: PUSH
38215: LD_INT 200
38217: PUSH
38218: LD_INT 400
38220: PUSH
38221: EMPTY
38222: LIST
38223: LIST
38224: LIST
38225: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
38226: LD_VAR 0 6
38230: PPUSH
38231: CALL_OW 264
38235: PUSH
38236: LD_INT 14
38238: PUSH
38239: LD_INT 53
38241: PUSH
38242: EMPTY
38243: LIST
38244: LIST
38245: IN
38246: IFFALSE 38267
// points := [ 40 , 10 , 20 ] ;
38248: LD_ADDR_VAR 0 9
38252: PUSH
38253: LD_INT 40
38255: PUSH
38256: LD_INT 10
38258: PUSH
38259: LD_INT 20
38261: PUSH
38262: EMPTY
38263: LIST
38264: LIST
38265: LIST
38266: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
38267: LD_VAR 0 6
38271: PPUSH
38272: CALL_OW 264
38276: PUSH
38277: LD_INT 9
38279: PUSH
38280: EMPTY
38281: LIST
38282: IN
38283: IFFALSE 38304
// points := [ 5 , 70 , 20 ] ;
38285: LD_ADDR_VAR 0 9
38289: PUSH
38290: LD_INT 5
38292: PUSH
38293: LD_INT 70
38295: PUSH
38296: LD_INT 20
38298: PUSH
38299: EMPTY
38300: LIST
38301: LIST
38302: LIST
38303: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
38304: LD_VAR 0 6
38308: PPUSH
38309: CALL_OW 264
38313: PUSH
38314: LD_INT 10
38316: PUSH
38317: EMPTY
38318: LIST
38319: IN
38320: IFFALSE 38341
// points := [ 35 , 110 , 70 ] ;
38322: LD_ADDR_VAR 0 9
38326: PUSH
38327: LD_INT 35
38329: PUSH
38330: LD_INT 110
38332: PUSH
38333: LD_INT 70
38335: PUSH
38336: EMPTY
38337: LIST
38338: LIST
38339: LIST
38340: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
38341: LD_VAR 0 6
38345: PPUSH
38346: CALL_OW 265
38350: PUSH
38351: LD_INT 25
38353: EQUAL
38354: IFFALSE 38375
// points := [ 80 , 65 , 100 ] ;
38356: LD_ADDR_VAR 0 9
38360: PUSH
38361: LD_INT 80
38363: PUSH
38364: LD_INT 65
38366: PUSH
38367: LD_INT 100
38369: PUSH
38370: EMPTY
38371: LIST
38372: LIST
38373: LIST
38374: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
38375: LD_VAR 0 6
38379: PPUSH
38380: CALL_OW 263
38384: PUSH
38385: LD_INT 1
38387: EQUAL
38388: IFFALSE 38423
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
38390: LD_ADDR_VAR 0 10
38394: PUSH
38395: LD_VAR 0 10
38399: PUSH
38400: LD_VAR 0 6
38404: PPUSH
38405: CALL_OW 311
38409: PPUSH
38410: LD_INT 3
38412: PPUSH
38413: CALL_OW 259
38417: PUSH
38418: LD_INT 4
38420: MUL
38421: MUL
38422: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
38423: LD_VAR 0 6
38427: PPUSH
38428: CALL_OW 263
38432: PUSH
38433: LD_INT 2
38435: EQUAL
38436: IFFALSE 38487
// begin j := IsControledBy ( i ) ;
38438: LD_ADDR_VAR 0 7
38442: PUSH
38443: LD_VAR 0 6
38447: PPUSH
38448: CALL_OW 312
38452: ST_TO_ADDR
// if j then
38453: LD_VAR 0 7
38457: IFFALSE 38487
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
38459: LD_ADDR_VAR 0 10
38463: PUSH
38464: LD_VAR 0 10
38468: PUSH
38469: LD_VAR 0 7
38473: PPUSH
38474: LD_INT 3
38476: PPUSH
38477: CALL_OW 259
38481: PUSH
38482: LD_INT 3
38484: MUL
38485: MUL
38486: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
38487: LD_VAR 0 6
38491: PPUSH
38492: CALL_OW 264
38496: PUSH
38497: LD_INT 5
38499: PUSH
38500: LD_INT 6
38502: PUSH
38503: LD_INT 46
38505: PUSH
38506: LD_INT 44
38508: PUSH
38509: LD_INT 47
38511: PUSH
38512: LD_INT 45
38514: PUSH
38515: LD_INT 28
38517: PUSH
38518: LD_INT 7
38520: PUSH
38521: LD_INT 27
38523: PUSH
38524: LD_INT 29
38526: PUSH
38527: EMPTY
38528: LIST
38529: LIST
38530: LIST
38531: LIST
38532: LIST
38533: LIST
38534: LIST
38535: LIST
38536: LIST
38537: LIST
38538: IN
38539: PUSH
38540: LD_VAR 0 1
38544: PPUSH
38545: LD_INT 52
38547: PPUSH
38548: CALL_OW 321
38552: PUSH
38553: LD_INT 2
38555: EQUAL
38556: AND
38557: IFFALSE 38574
// bpoints := bpoints * 1.2 ;
38559: LD_ADDR_VAR 0 10
38563: PUSH
38564: LD_VAR 0 10
38568: PUSH
38569: LD_REAL  1.20000000000000E+0000
38572: MUL
38573: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
38574: LD_VAR 0 6
38578: PPUSH
38579: CALL_OW 264
38583: PUSH
38584: LD_INT 6
38586: PUSH
38587: LD_INT 46
38589: PUSH
38590: LD_INT 47
38592: PUSH
38593: EMPTY
38594: LIST
38595: LIST
38596: LIST
38597: IN
38598: IFFALSE 38615
// bpoints := bpoints * 1.2 ;
38600: LD_ADDR_VAR 0 10
38604: PUSH
38605: LD_VAR 0 10
38609: PUSH
38610: LD_REAL  1.20000000000000E+0000
38613: MUL
38614: ST_TO_ADDR
// end ; unit_building :
38615: GO 38629
38617: LD_INT 3
38619: DOUBLE
38620: EQUAL
38621: IFTRUE 38625
38623: GO 38628
38625: POP
// ; end ;
38626: GO 38629
38628: POP
// for j = 1 to 3 do
38629: LD_ADDR_VAR 0 7
38633: PUSH
38634: DOUBLE
38635: LD_INT 1
38637: DEC
38638: ST_TO_ADDR
38639: LD_INT 3
38641: PUSH
38642: FOR_TO
38643: IFFALSE 38696
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
38645: LD_ADDR_VAR 0 5
38649: PUSH
38650: LD_VAR 0 5
38654: PPUSH
38655: LD_VAR 0 7
38659: PPUSH
38660: LD_VAR 0 5
38664: PUSH
38665: LD_VAR 0 7
38669: ARRAY
38670: PUSH
38671: LD_VAR 0 9
38675: PUSH
38676: LD_VAR 0 7
38680: ARRAY
38681: PUSH
38682: LD_VAR 0 10
38686: MUL
38687: PLUS
38688: PPUSH
38689: CALL_OW 1
38693: ST_TO_ADDR
38694: GO 38642
38696: POP
38697: POP
// end ;
38698: GO 37175
38700: POP
38701: POP
// result := Replace ( result , 4 , tmp ) ;
38702: LD_ADDR_VAR 0 5
38706: PUSH
38707: LD_VAR 0 5
38711: PPUSH
38712: LD_INT 4
38714: PPUSH
38715: LD_VAR 0 8
38719: PPUSH
38720: CALL_OW 1
38724: ST_TO_ADDR
// end ;
38725: LD_VAR 0 5
38729: RET
// export function DangerAtRange ( unit , range ) ; begin
38730: LD_INT 0
38732: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
38733: LD_ADDR_VAR 0 3
38737: PUSH
38738: LD_VAR 0 1
38742: PPUSH
38743: CALL_OW 255
38747: PPUSH
38748: LD_VAR 0 1
38752: PPUSH
38753: CALL_OW 250
38757: PPUSH
38758: LD_VAR 0 1
38762: PPUSH
38763: CALL_OW 251
38767: PPUSH
38768: LD_VAR 0 2
38772: PPUSH
38773: CALL 37027 0 4
38777: ST_TO_ADDR
// end ;
38778: LD_VAR 0 3
38782: RET
// export function DangerInArea ( side , area ) ; begin
38783: LD_INT 0
38785: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
38786: LD_ADDR_VAR 0 3
38790: PUSH
38791: LD_VAR 0 2
38795: PPUSH
38796: LD_INT 81
38798: PUSH
38799: LD_VAR 0 1
38803: PUSH
38804: EMPTY
38805: LIST
38806: LIST
38807: PPUSH
38808: CALL_OW 70
38812: ST_TO_ADDR
// end ;
38813: LD_VAR 0 3
38817: RET
// export function IsExtension ( b ) ; begin
38818: LD_INT 0
38820: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
38821: LD_ADDR_VAR 0 2
38825: PUSH
38826: LD_VAR 0 1
38830: PUSH
38831: LD_INT 23
38833: PUSH
38834: LD_INT 20
38836: PUSH
38837: LD_INT 22
38839: PUSH
38840: LD_INT 17
38842: PUSH
38843: LD_INT 24
38845: PUSH
38846: LD_INT 21
38848: PUSH
38849: LD_INT 19
38851: PUSH
38852: LD_INT 16
38854: PUSH
38855: LD_INT 25
38857: PUSH
38858: LD_INT 18
38860: PUSH
38861: EMPTY
38862: LIST
38863: LIST
38864: LIST
38865: LIST
38866: LIST
38867: LIST
38868: LIST
38869: LIST
38870: LIST
38871: LIST
38872: IN
38873: ST_TO_ADDR
// end ;
38874: LD_VAR 0 2
38878: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
38879: LD_INT 0
38881: PPUSH
38882: PPUSH
38883: PPUSH
// result := [ ] ;
38884: LD_ADDR_VAR 0 4
38888: PUSH
38889: EMPTY
38890: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
38891: LD_ADDR_VAR 0 5
38895: PUSH
38896: LD_VAR 0 2
38900: PPUSH
38901: LD_INT 21
38903: PUSH
38904: LD_INT 3
38906: PUSH
38907: EMPTY
38908: LIST
38909: LIST
38910: PPUSH
38911: CALL_OW 70
38915: ST_TO_ADDR
// if not tmp then
38916: LD_VAR 0 5
38920: NOT
38921: IFFALSE 38925
// exit ;
38923: GO 38989
// if checkLink then
38925: LD_VAR 0 3
38929: IFFALSE 38979
// begin for i in tmp do
38931: LD_ADDR_VAR 0 6
38935: PUSH
38936: LD_VAR 0 5
38940: PUSH
38941: FOR_IN
38942: IFFALSE 38977
// if GetBase ( i ) <> base then
38944: LD_VAR 0 6
38948: PPUSH
38949: CALL_OW 274
38953: PUSH
38954: LD_VAR 0 1
38958: NONEQUAL
38959: IFFALSE 38975
// ComLinkToBase ( base , i ) ;
38961: LD_VAR 0 1
38965: PPUSH
38966: LD_VAR 0 6
38970: PPUSH
38971: CALL_OW 169
38975: GO 38941
38977: POP
38978: POP
// end ; result := tmp ;
38979: LD_ADDR_VAR 0 4
38983: PUSH
38984: LD_VAR 0 5
38988: ST_TO_ADDR
// end ;
38989: LD_VAR 0 4
38993: RET
// export function ComComplete ( units , b ) ; var i ; begin
38994: LD_INT 0
38996: PPUSH
38997: PPUSH
// if not units then
38998: LD_VAR 0 1
39002: NOT
39003: IFFALSE 39007
// exit ;
39005: GO 39097
// for i in units do
39007: LD_ADDR_VAR 0 4
39011: PUSH
39012: LD_VAR 0 1
39016: PUSH
39017: FOR_IN
39018: IFFALSE 39095
// if BuildingStatus ( b ) = bs_build then
39020: LD_VAR 0 2
39024: PPUSH
39025: CALL_OW 461
39029: PUSH
39030: LD_INT 1
39032: EQUAL
39033: IFFALSE 39093
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
39035: LD_VAR 0 4
39039: PPUSH
39040: LD_STRING h
39042: PUSH
39043: LD_VAR 0 2
39047: PPUSH
39048: CALL_OW 250
39052: PUSH
39053: LD_VAR 0 2
39057: PPUSH
39058: CALL_OW 251
39062: PUSH
39063: LD_VAR 0 2
39067: PUSH
39068: LD_INT 0
39070: PUSH
39071: LD_INT 0
39073: PUSH
39074: LD_INT 0
39076: PUSH
39077: EMPTY
39078: LIST
39079: LIST
39080: LIST
39081: LIST
39082: LIST
39083: LIST
39084: LIST
39085: PUSH
39086: EMPTY
39087: LIST
39088: PPUSH
39089: CALL_OW 446
39093: GO 39017
39095: POP
39096: POP
// end ;
39097: LD_VAR 0 3
39101: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
39102: LD_INT 0
39104: PPUSH
39105: PPUSH
39106: PPUSH
39107: PPUSH
39108: PPUSH
39109: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
39110: LD_VAR 0 1
39114: NOT
39115: PUSH
39116: LD_VAR 0 1
39120: PPUSH
39121: CALL_OW 263
39125: PUSH
39126: LD_INT 2
39128: NONEQUAL
39129: OR
39130: IFFALSE 39134
// exit ;
39132: GO 39450
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
39134: LD_ADDR_VAR 0 6
39138: PUSH
39139: LD_INT 22
39141: PUSH
39142: LD_VAR 0 1
39146: PPUSH
39147: CALL_OW 255
39151: PUSH
39152: EMPTY
39153: LIST
39154: LIST
39155: PUSH
39156: LD_INT 2
39158: PUSH
39159: LD_INT 30
39161: PUSH
39162: LD_INT 36
39164: PUSH
39165: EMPTY
39166: LIST
39167: LIST
39168: PUSH
39169: LD_INT 34
39171: PUSH
39172: LD_INT 31
39174: PUSH
39175: EMPTY
39176: LIST
39177: LIST
39178: PUSH
39179: EMPTY
39180: LIST
39181: LIST
39182: LIST
39183: PUSH
39184: EMPTY
39185: LIST
39186: LIST
39187: PPUSH
39188: CALL_OW 69
39192: ST_TO_ADDR
// if not tmp then
39193: LD_VAR 0 6
39197: NOT
39198: IFFALSE 39202
// exit ;
39200: GO 39450
// result := [ ] ;
39202: LD_ADDR_VAR 0 2
39206: PUSH
39207: EMPTY
39208: ST_TO_ADDR
// for i in tmp do
39209: LD_ADDR_VAR 0 3
39213: PUSH
39214: LD_VAR 0 6
39218: PUSH
39219: FOR_IN
39220: IFFALSE 39291
// begin t := UnitsInside ( i ) ;
39222: LD_ADDR_VAR 0 4
39226: PUSH
39227: LD_VAR 0 3
39231: PPUSH
39232: CALL_OW 313
39236: ST_TO_ADDR
// if t then
39237: LD_VAR 0 4
39241: IFFALSE 39289
// for j in t do
39243: LD_ADDR_VAR 0 7
39247: PUSH
39248: LD_VAR 0 4
39252: PUSH
39253: FOR_IN
39254: IFFALSE 39287
// result := Replace ( result , result + 1 , j ) ;
39256: LD_ADDR_VAR 0 2
39260: PUSH
39261: LD_VAR 0 2
39265: PPUSH
39266: LD_VAR 0 2
39270: PUSH
39271: LD_INT 1
39273: PLUS
39274: PPUSH
39275: LD_VAR 0 7
39279: PPUSH
39280: CALL_OW 1
39284: ST_TO_ADDR
39285: GO 39253
39287: POP
39288: POP
// end ;
39289: GO 39219
39291: POP
39292: POP
// if not result then
39293: LD_VAR 0 2
39297: NOT
39298: IFFALSE 39302
// exit ;
39300: GO 39450
// mech := result [ 1 ] ;
39302: LD_ADDR_VAR 0 5
39306: PUSH
39307: LD_VAR 0 2
39311: PUSH
39312: LD_INT 1
39314: ARRAY
39315: ST_TO_ADDR
// if result > 1 then
39316: LD_VAR 0 2
39320: PUSH
39321: LD_INT 1
39323: GREATER
39324: IFFALSE 39436
// begin for i = 2 to result do
39326: LD_ADDR_VAR 0 3
39330: PUSH
39331: DOUBLE
39332: LD_INT 2
39334: DEC
39335: ST_TO_ADDR
39336: LD_VAR 0 2
39340: PUSH
39341: FOR_TO
39342: IFFALSE 39434
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
39344: LD_ADDR_VAR 0 4
39348: PUSH
39349: LD_VAR 0 2
39353: PUSH
39354: LD_VAR 0 3
39358: ARRAY
39359: PPUSH
39360: LD_INT 3
39362: PPUSH
39363: CALL_OW 259
39367: PUSH
39368: LD_VAR 0 2
39372: PUSH
39373: LD_VAR 0 3
39377: ARRAY
39378: PPUSH
39379: CALL_OW 432
39383: MINUS
39384: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
39385: LD_VAR 0 4
39389: PUSH
39390: LD_VAR 0 5
39394: PPUSH
39395: LD_INT 3
39397: PPUSH
39398: CALL_OW 259
39402: PUSH
39403: LD_VAR 0 5
39407: PPUSH
39408: CALL_OW 432
39412: MINUS
39413: GREATEREQUAL
39414: IFFALSE 39432
// mech := result [ i ] ;
39416: LD_ADDR_VAR 0 5
39420: PUSH
39421: LD_VAR 0 2
39425: PUSH
39426: LD_VAR 0 3
39430: ARRAY
39431: ST_TO_ADDR
// end ;
39432: GO 39341
39434: POP
39435: POP
// end ; ComLinkTo ( vehicle , mech ) ;
39436: LD_VAR 0 1
39440: PPUSH
39441: LD_VAR 0 5
39445: PPUSH
39446: CALL_OW 135
// end ;
39450: LD_VAR 0 2
39454: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
39455: LD_INT 0
39457: PPUSH
39458: PPUSH
39459: PPUSH
39460: PPUSH
39461: PPUSH
39462: PPUSH
39463: PPUSH
39464: PPUSH
39465: PPUSH
39466: PPUSH
39467: PPUSH
39468: PPUSH
39469: PPUSH
// result := [ ] ;
39470: LD_ADDR_VAR 0 7
39474: PUSH
39475: EMPTY
39476: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
39477: LD_VAR 0 1
39481: PPUSH
39482: CALL_OW 266
39486: PUSH
39487: LD_INT 0
39489: PUSH
39490: LD_INT 1
39492: PUSH
39493: EMPTY
39494: LIST
39495: LIST
39496: IN
39497: NOT
39498: IFFALSE 39502
// exit ;
39500: GO 41136
// if name then
39502: LD_VAR 0 3
39506: IFFALSE 39522
// SetBName ( base_dep , name ) ;
39508: LD_VAR 0 1
39512: PPUSH
39513: LD_VAR 0 3
39517: PPUSH
39518: CALL_OW 500
// base := GetBase ( base_dep ) ;
39522: LD_ADDR_VAR 0 15
39526: PUSH
39527: LD_VAR 0 1
39531: PPUSH
39532: CALL_OW 274
39536: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
39537: LD_ADDR_VAR 0 16
39541: PUSH
39542: LD_VAR 0 1
39546: PPUSH
39547: CALL_OW 255
39551: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
39552: LD_ADDR_VAR 0 17
39556: PUSH
39557: LD_VAR 0 1
39561: PPUSH
39562: CALL_OW 248
39566: ST_TO_ADDR
// if sources then
39567: LD_VAR 0 5
39571: IFFALSE 39618
// for i = 1 to 3 do
39573: LD_ADDR_VAR 0 8
39577: PUSH
39578: DOUBLE
39579: LD_INT 1
39581: DEC
39582: ST_TO_ADDR
39583: LD_INT 3
39585: PUSH
39586: FOR_TO
39587: IFFALSE 39616
// AddResourceType ( base , i , sources [ i ] ) ;
39589: LD_VAR 0 15
39593: PPUSH
39594: LD_VAR 0 8
39598: PPUSH
39599: LD_VAR 0 5
39603: PUSH
39604: LD_VAR 0 8
39608: ARRAY
39609: PPUSH
39610: CALL_OW 276
39614: GO 39586
39616: POP
39617: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
39618: LD_ADDR_VAR 0 18
39622: PUSH
39623: LD_VAR 0 15
39627: PPUSH
39628: LD_VAR 0 2
39632: PPUSH
39633: LD_INT 1
39635: PPUSH
39636: CALL 38879 0 3
39640: ST_TO_ADDR
// InitHc ;
39641: CALL_OW 19
// InitUc ;
39645: CALL_OW 18
// uc_side := side ;
39649: LD_ADDR_OWVAR 20
39653: PUSH
39654: LD_VAR 0 16
39658: ST_TO_ADDR
// uc_nation := nation ;
39659: LD_ADDR_OWVAR 21
39663: PUSH
39664: LD_VAR 0 17
39668: ST_TO_ADDR
// if buildings then
39669: LD_VAR 0 18
39673: IFFALSE 40995
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
39675: LD_ADDR_VAR 0 19
39679: PUSH
39680: LD_VAR 0 18
39684: PPUSH
39685: LD_INT 2
39687: PUSH
39688: LD_INT 30
39690: PUSH
39691: LD_INT 29
39693: PUSH
39694: EMPTY
39695: LIST
39696: LIST
39697: PUSH
39698: LD_INT 30
39700: PUSH
39701: LD_INT 30
39703: PUSH
39704: EMPTY
39705: LIST
39706: LIST
39707: PUSH
39708: EMPTY
39709: LIST
39710: LIST
39711: LIST
39712: PPUSH
39713: CALL_OW 72
39717: ST_TO_ADDR
// if tmp then
39718: LD_VAR 0 19
39722: IFFALSE 39770
// for i in tmp do
39724: LD_ADDR_VAR 0 8
39728: PUSH
39729: LD_VAR 0 19
39733: PUSH
39734: FOR_IN
39735: IFFALSE 39768
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
39737: LD_VAR 0 8
39741: PPUSH
39742: CALL_OW 250
39746: PPUSH
39747: LD_VAR 0 8
39751: PPUSH
39752: CALL_OW 251
39756: PPUSH
39757: LD_VAR 0 16
39761: PPUSH
39762: CALL_OW 441
39766: GO 39734
39768: POP
39769: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
39770: LD_VAR 0 18
39774: PPUSH
39775: LD_INT 2
39777: PUSH
39778: LD_INT 30
39780: PUSH
39781: LD_INT 32
39783: PUSH
39784: EMPTY
39785: LIST
39786: LIST
39787: PUSH
39788: LD_INT 30
39790: PUSH
39791: LD_INT 33
39793: PUSH
39794: EMPTY
39795: LIST
39796: LIST
39797: PUSH
39798: EMPTY
39799: LIST
39800: LIST
39801: LIST
39802: PPUSH
39803: CALL_OW 72
39807: IFFALSE 39895
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
39809: LD_ADDR_VAR 0 8
39813: PUSH
39814: LD_VAR 0 18
39818: PPUSH
39819: LD_INT 2
39821: PUSH
39822: LD_INT 30
39824: PUSH
39825: LD_INT 32
39827: PUSH
39828: EMPTY
39829: LIST
39830: LIST
39831: PUSH
39832: LD_INT 30
39834: PUSH
39835: LD_INT 33
39837: PUSH
39838: EMPTY
39839: LIST
39840: LIST
39841: PUSH
39842: EMPTY
39843: LIST
39844: LIST
39845: LIST
39846: PPUSH
39847: CALL_OW 72
39851: PUSH
39852: FOR_IN
39853: IFFALSE 39893
// begin if not GetBWeapon ( i ) then
39855: LD_VAR 0 8
39859: PPUSH
39860: CALL_OW 269
39864: NOT
39865: IFFALSE 39891
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
39867: LD_VAR 0 8
39871: PPUSH
39872: LD_VAR 0 8
39876: PPUSH
39877: LD_VAR 0 2
39881: PPUSH
39882: CALL 41141 0 2
39886: PPUSH
39887: CALL_OW 431
// end ;
39891: GO 39852
39893: POP
39894: POP
// end ; for i = 1 to personel do
39895: LD_ADDR_VAR 0 8
39899: PUSH
39900: DOUBLE
39901: LD_INT 1
39903: DEC
39904: ST_TO_ADDR
39905: LD_VAR 0 6
39909: PUSH
39910: FOR_TO
39911: IFFALSE 40975
// begin if i > 4 then
39913: LD_VAR 0 8
39917: PUSH
39918: LD_INT 4
39920: GREATER
39921: IFFALSE 39925
// break ;
39923: GO 40975
// case i of 1 :
39925: LD_VAR 0 8
39929: PUSH
39930: LD_INT 1
39932: DOUBLE
39933: EQUAL
39934: IFTRUE 39938
39936: GO 40018
39938: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
39939: LD_ADDR_VAR 0 12
39943: PUSH
39944: LD_VAR 0 18
39948: PPUSH
39949: LD_INT 22
39951: PUSH
39952: LD_VAR 0 16
39956: PUSH
39957: EMPTY
39958: LIST
39959: LIST
39960: PUSH
39961: LD_INT 58
39963: PUSH
39964: EMPTY
39965: LIST
39966: PUSH
39967: LD_INT 2
39969: PUSH
39970: LD_INT 30
39972: PUSH
39973: LD_INT 32
39975: PUSH
39976: EMPTY
39977: LIST
39978: LIST
39979: PUSH
39980: LD_INT 30
39982: PUSH
39983: LD_INT 4
39985: PUSH
39986: EMPTY
39987: LIST
39988: LIST
39989: PUSH
39990: LD_INT 30
39992: PUSH
39993: LD_INT 5
39995: PUSH
39996: EMPTY
39997: LIST
39998: LIST
39999: PUSH
40000: EMPTY
40001: LIST
40002: LIST
40003: LIST
40004: LIST
40005: PUSH
40006: EMPTY
40007: LIST
40008: LIST
40009: LIST
40010: PPUSH
40011: CALL_OW 72
40015: ST_TO_ADDR
40016: GO 40240
40018: LD_INT 2
40020: DOUBLE
40021: EQUAL
40022: IFTRUE 40026
40024: GO 40088
40026: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
40027: LD_ADDR_VAR 0 12
40031: PUSH
40032: LD_VAR 0 18
40036: PPUSH
40037: LD_INT 22
40039: PUSH
40040: LD_VAR 0 16
40044: PUSH
40045: EMPTY
40046: LIST
40047: LIST
40048: PUSH
40049: LD_INT 2
40051: PUSH
40052: LD_INT 30
40054: PUSH
40055: LD_INT 0
40057: PUSH
40058: EMPTY
40059: LIST
40060: LIST
40061: PUSH
40062: LD_INT 30
40064: PUSH
40065: LD_INT 1
40067: PUSH
40068: EMPTY
40069: LIST
40070: LIST
40071: PUSH
40072: EMPTY
40073: LIST
40074: LIST
40075: LIST
40076: PUSH
40077: EMPTY
40078: LIST
40079: LIST
40080: PPUSH
40081: CALL_OW 72
40085: ST_TO_ADDR
40086: GO 40240
40088: LD_INT 3
40090: DOUBLE
40091: EQUAL
40092: IFTRUE 40096
40094: GO 40158
40096: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
40097: LD_ADDR_VAR 0 12
40101: PUSH
40102: LD_VAR 0 18
40106: PPUSH
40107: LD_INT 22
40109: PUSH
40110: LD_VAR 0 16
40114: PUSH
40115: EMPTY
40116: LIST
40117: LIST
40118: PUSH
40119: LD_INT 2
40121: PUSH
40122: LD_INT 30
40124: PUSH
40125: LD_INT 2
40127: PUSH
40128: EMPTY
40129: LIST
40130: LIST
40131: PUSH
40132: LD_INT 30
40134: PUSH
40135: LD_INT 3
40137: PUSH
40138: EMPTY
40139: LIST
40140: LIST
40141: PUSH
40142: EMPTY
40143: LIST
40144: LIST
40145: LIST
40146: PUSH
40147: EMPTY
40148: LIST
40149: LIST
40150: PPUSH
40151: CALL_OW 72
40155: ST_TO_ADDR
40156: GO 40240
40158: LD_INT 4
40160: DOUBLE
40161: EQUAL
40162: IFTRUE 40166
40164: GO 40239
40166: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
40167: LD_ADDR_VAR 0 12
40171: PUSH
40172: LD_VAR 0 18
40176: PPUSH
40177: LD_INT 22
40179: PUSH
40180: LD_VAR 0 16
40184: PUSH
40185: EMPTY
40186: LIST
40187: LIST
40188: PUSH
40189: LD_INT 2
40191: PUSH
40192: LD_INT 30
40194: PUSH
40195: LD_INT 6
40197: PUSH
40198: EMPTY
40199: LIST
40200: LIST
40201: PUSH
40202: LD_INT 30
40204: PUSH
40205: LD_INT 7
40207: PUSH
40208: EMPTY
40209: LIST
40210: LIST
40211: PUSH
40212: LD_INT 30
40214: PUSH
40215: LD_INT 8
40217: PUSH
40218: EMPTY
40219: LIST
40220: LIST
40221: PUSH
40222: EMPTY
40223: LIST
40224: LIST
40225: LIST
40226: LIST
40227: PUSH
40228: EMPTY
40229: LIST
40230: LIST
40231: PPUSH
40232: CALL_OW 72
40236: ST_TO_ADDR
40237: GO 40240
40239: POP
// if i = 1 then
40240: LD_VAR 0 8
40244: PUSH
40245: LD_INT 1
40247: EQUAL
40248: IFFALSE 40359
// begin tmp := [ ] ;
40250: LD_ADDR_VAR 0 19
40254: PUSH
40255: EMPTY
40256: ST_TO_ADDR
// for j in f do
40257: LD_ADDR_VAR 0 9
40261: PUSH
40262: LD_VAR 0 12
40266: PUSH
40267: FOR_IN
40268: IFFALSE 40341
// if GetBType ( j ) = b_bunker then
40270: LD_VAR 0 9
40274: PPUSH
40275: CALL_OW 266
40279: PUSH
40280: LD_INT 32
40282: EQUAL
40283: IFFALSE 40310
// tmp := Insert ( tmp , 1 , j ) else
40285: LD_ADDR_VAR 0 19
40289: PUSH
40290: LD_VAR 0 19
40294: PPUSH
40295: LD_INT 1
40297: PPUSH
40298: LD_VAR 0 9
40302: PPUSH
40303: CALL_OW 2
40307: ST_TO_ADDR
40308: GO 40339
// tmp := Insert ( tmp , tmp + 1 , j ) ;
40310: LD_ADDR_VAR 0 19
40314: PUSH
40315: LD_VAR 0 19
40319: PPUSH
40320: LD_VAR 0 19
40324: PUSH
40325: LD_INT 1
40327: PLUS
40328: PPUSH
40329: LD_VAR 0 9
40333: PPUSH
40334: CALL_OW 2
40338: ST_TO_ADDR
40339: GO 40267
40341: POP
40342: POP
// if tmp then
40343: LD_VAR 0 19
40347: IFFALSE 40359
// f := tmp ;
40349: LD_ADDR_VAR 0 12
40353: PUSH
40354: LD_VAR 0 19
40358: ST_TO_ADDR
// end ; x := personel [ i ] ;
40359: LD_ADDR_VAR 0 13
40363: PUSH
40364: LD_VAR 0 6
40368: PUSH
40369: LD_VAR 0 8
40373: ARRAY
40374: ST_TO_ADDR
// if x = - 1 then
40375: LD_VAR 0 13
40379: PUSH
40380: LD_INT 1
40382: NEG
40383: EQUAL
40384: IFFALSE 40593
// begin for j in f do
40386: LD_ADDR_VAR 0 9
40390: PUSH
40391: LD_VAR 0 12
40395: PUSH
40396: FOR_IN
40397: IFFALSE 40589
// repeat InitHc ;
40399: CALL_OW 19
// if GetBType ( j ) = b_barracks then
40403: LD_VAR 0 9
40407: PPUSH
40408: CALL_OW 266
40412: PUSH
40413: LD_INT 5
40415: EQUAL
40416: IFFALSE 40486
// begin if UnitsInside ( j ) < 3 then
40418: LD_VAR 0 9
40422: PPUSH
40423: CALL_OW 313
40427: PUSH
40428: LD_INT 3
40430: LESS
40431: IFFALSE 40467
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40433: LD_INT 0
40435: PPUSH
40436: LD_INT 5
40438: PUSH
40439: LD_INT 8
40441: PUSH
40442: LD_INT 9
40444: PUSH
40445: EMPTY
40446: LIST
40447: LIST
40448: LIST
40449: PUSH
40450: LD_VAR 0 17
40454: ARRAY
40455: PPUSH
40456: LD_VAR 0 4
40460: PPUSH
40461: CALL_OW 380
40465: GO 40484
// PrepareHuman ( false , i , skill ) ;
40467: LD_INT 0
40469: PPUSH
40470: LD_VAR 0 8
40474: PPUSH
40475: LD_VAR 0 4
40479: PPUSH
40480: CALL_OW 380
// end else
40484: GO 40503
// PrepareHuman ( false , i , skill ) ;
40486: LD_INT 0
40488: PPUSH
40489: LD_VAR 0 8
40493: PPUSH
40494: LD_VAR 0 4
40498: PPUSH
40499: CALL_OW 380
// un := CreateHuman ;
40503: LD_ADDR_VAR 0 14
40507: PUSH
40508: CALL_OW 44
40512: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40513: LD_ADDR_VAR 0 7
40517: PUSH
40518: LD_VAR 0 7
40522: PPUSH
40523: LD_INT 1
40525: PPUSH
40526: LD_VAR 0 14
40530: PPUSH
40531: CALL_OW 2
40535: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
40536: LD_VAR 0 14
40540: PPUSH
40541: LD_VAR 0 9
40545: PPUSH
40546: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
40550: LD_VAR 0 9
40554: PPUSH
40555: CALL_OW 313
40559: PUSH
40560: LD_INT 6
40562: EQUAL
40563: PUSH
40564: LD_VAR 0 9
40568: PPUSH
40569: CALL_OW 266
40573: PUSH
40574: LD_INT 32
40576: PUSH
40577: LD_INT 31
40579: PUSH
40580: EMPTY
40581: LIST
40582: LIST
40583: IN
40584: OR
40585: IFFALSE 40399
40587: GO 40396
40589: POP
40590: POP
// end else
40591: GO 40973
// for j = 1 to x do
40593: LD_ADDR_VAR 0 9
40597: PUSH
40598: DOUBLE
40599: LD_INT 1
40601: DEC
40602: ST_TO_ADDR
40603: LD_VAR 0 13
40607: PUSH
40608: FOR_TO
40609: IFFALSE 40971
// begin InitHc ;
40611: CALL_OW 19
// if not f then
40615: LD_VAR 0 12
40619: NOT
40620: IFFALSE 40709
// begin PrepareHuman ( false , i , skill ) ;
40622: LD_INT 0
40624: PPUSH
40625: LD_VAR 0 8
40629: PPUSH
40630: LD_VAR 0 4
40634: PPUSH
40635: CALL_OW 380
// un := CreateHuman ;
40639: LD_ADDR_VAR 0 14
40643: PUSH
40644: CALL_OW 44
40648: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40649: LD_ADDR_VAR 0 7
40653: PUSH
40654: LD_VAR 0 7
40658: PPUSH
40659: LD_INT 1
40661: PPUSH
40662: LD_VAR 0 14
40666: PPUSH
40667: CALL_OW 2
40671: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40672: LD_VAR 0 14
40676: PPUSH
40677: LD_VAR 0 1
40681: PPUSH
40682: CALL_OW 250
40686: PPUSH
40687: LD_VAR 0 1
40691: PPUSH
40692: CALL_OW 251
40696: PPUSH
40697: LD_INT 10
40699: PPUSH
40700: LD_INT 0
40702: PPUSH
40703: CALL_OW 50
// continue ;
40707: GO 40608
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
40709: LD_VAR 0 12
40713: PUSH
40714: LD_INT 1
40716: ARRAY
40717: PPUSH
40718: CALL_OW 313
40722: PUSH
40723: LD_VAR 0 12
40727: PUSH
40728: LD_INT 1
40730: ARRAY
40731: PPUSH
40732: CALL_OW 266
40736: PUSH
40737: LD_INT 32
40739: PUSH
40740: LD_INT 31
40742: PUSH
40743: EMPTY
40744: LIST
40745: LIST
40746: IN
40747: AND
40748: PUSH
40749: LD_VAR 0 12
40753: PUSH
40754: LD_INT 1
40756: ARRAY
40757: PPUSH
40758: CALL_OW 313
40762: PUSH
40763: LD_INT 6
40765: EQUAL
40766: OR
40767: IFFALSE 40787
// f := Delete ( f , 1 ) ;
40769: LD_ADDR_VAR 0 12
40773: PUSH
40774: LD_VAR 0 12
40778: PPUSH
40779: LD_INT 1
40781: PPUSH
40782: CALL_OW 3
40786: ST_TO_ADDR
// if not f then
40787: LD_VAR 0 12
40791: NOT
40792: IFFALSE 40810
// begin x := x + 2 ;
40794: LD_ADDR_VAR 0 13
40798: PUSH
40799: LD_VAR 0 13
40803: PUSH
40804: LD_INT 2
40806: PLUS
40807: ST_TO_ADDR
// continue ;
40808: GO 40608
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
40810: LD_VAR 0 12
40814: PUSH
40815: LD_INT 1
40817: ARRAY
40818: PPUSH
40819: CALL_OW 266
40823: PUSH
40824: LD_INT 5
40826: EQUAL
40827: IFFALSE 40901
// begin if UnitsInside ( f [ 1 ] ) < 3 then
40829: LD_VAR 0 12
40833: PUSH
40834: LD_INT 1
40836: ARRAY
40837: PPUSH
40838: CALL_OW 313
40842: PUSH
40843: LD_INT 3
40845: LESS
40846: IFFALSE 40882
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40848: LD_INT 0
40850: PPUSH
40851: LD_INT 5
40853: PUSH
40854: LD_INT 8
40856: PUSH
40857: LD_INT 9
40859: PUSH
40860: EMPTY
40861: LIST
40862: LIST
40863: LIST
40864: PUSH
40865: LD_VAR 0 17
40869: ARRAY
40870: PPUSH
40871: LD_VAR 0 4
40875: PPUSH
40876: CALL_OW 380
40880: GO 40899
// PrepareHuman ( false , i , skill ) ;
40882: LD_INT 0
40884: PPUSH
40885: LD_VAR 0 8
40889: PPUSH
40890: LD_VAR 0 4
40894: PPUSH
40895: CALL_OW 380
// end else
40899: GO 40918
// PrepareHuman ( false , i , skill ) ;
40901: LD_INT 0
40903: PPUSH
40904: LD_VAR 0 8
40908: PPUSH
40909: LD_VAR 0 4
40913: PPUSH
40914: CALL_OW 380
// un := CreateHuman ;
40918: LD_ADDR_VAR 0 14
40922: PUSH
40923: CALL_OW 44
40927: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40928: LD_ADDR_VAR 0 7
40932: PUSH
40933: LD_VAR 0 7
40937: PPUSH
40938: LD_INT 1
40940: PPUSH
40941: LD_VAR 0 14
40945: PPUSH
40946: CALL_OW 2
40950: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
40951: LD_VAR 0 14
40955: PPUSH
40956: LD_VAR 0 12
40960: PUSH
40961: LD_INT 1
40963: ARRAY
40964: PPUSH
40965: CALL_OW 52
// end ;
40969: GO 40608
40971: POP
40972: POP
// end ;
40973: GO 39910
40975: POP
40976: POP
// result := result ^ buildings ;
40977: LD_ADDR_VAR 0 7
40981: PUSH
40982: LD_VAR 0 7
40986: PUSH
40987: LD_VAR 0 18
40991: ADD
40992: ST_TO_ADDR
// end else
40993: GO 41136
// begin for i = 1 to personel do
40995: LD_ADDR_VAR 0 8
40999: PUSH
41000: DOUBLE
41001: LD_INT 1
41003: DEC
41004: ST_TO_ADDR
41005: LD_VAR 0 6
41009: PUSH
41010: FOR_TO
41011: IFFALSE 41134
// begin if i > 4 then
41013: LD_VAR 0 8
41017: PUSH
41018: LD_INT 4
41020: GREATER
41021: IFFALSE 41025
// break ;
41023: GO 41134
// x := personel [ i ] ;
41025: LD_ADDR_VAR 0 13
41029: PUSH
41030: LD_VAR 0 6
41034: PUSH
41035: LD_VAR 0 8
41039: ARRAY
41040: ST_TO_ADDR
// if x = - 1 then
41041: LD_VAR 0 13
41045: PUSH
41046: LD_INT 1
41048: NEG
41049: EQUAL
41050: IFFALSE 41054
// continue ;
41052: GO 41010
// PrepareHuman ( false , i , skill ) ;
41054: LD_INT 0
41056: PPUSH
41057: LD_VAR 0 8
41061: PPUSH
41062: LD_VAR 0 4
41066: PPUSH
41067: CALL_OW 380
// un := CreateHuman ;
41071: LD_ADDR_VAR 0 14
41075: PUSH
41076: CALL_OW 44
41080: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
41081: LD_VAR 0 14
41085: PPUSH
41086: LD_VAR 0 1
41090: PPUSH
41091: CALL_OW 250
41095: PPUSH
41096: LD_VAR 0 1
41100: PPUSH
41101: CALL_OW 251
41105: PPUSH
41106: LD_INT 10
41108: PPUSH
41109: LD_INT 0
41111: PPUSH
41112: CALL_OW 50
// result := result ^ un ;
41116: LD_ADDR_VAR 0 7
41120: PUSH
41121: LD_VAR 0 7
41125: PUSH
41126: LD_VAR 0 14
41130: ADD
41131: ST_TO_ADDR
// end ;
41132: GO 41010
41134: POP
41135: POP
// end ; end ;
41136: LD_VAR 0 7
41140: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
41141: LD_INT 0
41143: PPUSH
41144: PPUSH
41145: PPUSH
41146: PPUSH
41147: PPUSH
41148: PPUSH
41149: PPUSH
41150: PPUSH
41151: PPUSH
41152: PPUSH
41153: PPUSH
41154: PPUSH
41155: PPUSH
41156: PPUSH
41157: PPUSH
41158: PPUSH
// result := false ;
41159: LD_ADDR_VAR 0 3
41163: PUSH
41164: LD_INT 0
41166: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
41167: LD_VAR 0 1
41171: NOT
41172: PUSH
41173: LD_VAR 0 1
41177: PPUSH
41178: CALL_OW 266
41182: PUSH
41183: LD_INT 32
41185: PUSH
41186: LD_INT 33
41188: PUSH
41189: EMPTY
41190: LIST
41191: LIST
41192: IN
41193: NOT
41194: OR
41195: IFFALSE 41199
// exit ;
41197: GO 42308
// nat := GetNation ( tower ) ;
41199: LD_ADDR_VAR 0 12
41203: PUSH
41204: LD_VAR 0 1
41208: PPUSH
41209: CALL_OW 248
41213: ST_TO_ADDR
// side := GetSide ( tower ) ;
41214: LD_ADDR_VAR 0 16
41218: PUSH
41219: LD_VAR 0 1
41223: PPUSH
41224: CALL_OW 255
41228: ST_TO_ADDR
// x := GetX ( tower ) ;
41229: LD_ADDR_VAR 0 10
41233: PUSH
41234: LD_VAR 0 1
41238: PPUSH
41239: CALL_OW 250
41243: ST_TO_ADDR
// y := GetY ( tower ) ;
41244: LD_ADDR_VAR 0 11
41248: PUSH
41249: LD_VAR 0 1
41253: PPUSH
41254: CALL_OW 251
41258: ST_TO_ADDR
// if not x or not y then
41259: LD_VAR 0 10
41263: NOT
41264: PUSH
41265: LD_VAR 0 11
41269: NOT
41270: OR
41271: IFFALSE 41275
// exit ;
41273: GO 42308
// weapon := 0 ;
41275: LD_ADDR_VAR 0 18
41279: PUSH
41280: LD_INT 0
41282: ST_TO_ADDR
// fac_list := [ ] ;
41283: LD_ADDR_VAR 0 17
41287: PUSH
41288: EMPTY
41289: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
41290: LD_ADDR_VAR 0 6
41294: PUSH
41295: LD_VAR 0 1
41299: PPUSH
41300: CALL_OW 274
41304: PPUSH
41305: LD_VAR 0 2
41309: PPUSH
41310: LD_INT 0
41312: PPUSH
41313: CALL 38879 0 3
41317: PPUSH
41318: LD_INT 30
41320: PUSH
41321: LD_INT 3
41323: PUSH
41324: EMPTY
41325: LIST
41326: LIST
41327: PPUSH
41328: CALL_OW 72
41332: ST_TO_ADDR
// if not factories then
41333: LD_VAR 0 6
41337: NOT
41338: IFFALSE 41342
// exit ;
41340: GO 42308
// for i in factories do
41342: LD_ADDR_VAR 0 8
41346: PUSH
41347: LD_VAR 0 6
41351: PUSH
41352: FOR_IN
41353: IFFALSE 41378
// fac_list := fac_list union AvailableWeaponList ( i ) ;
41355: LD_ADDR_VAR 0 17
41359: PUSH
41360: LD_VAR 0 17
41364: PUSH
41365: LD_VAR 0 8
41369: PPUSH
41370: CALL_OW 478
41374: UNION
41375: ST_TO_ADDR
41376: GO 41352
41378: POP
41379: POP
// if not fac_list then
41380: LD_VAR 0 17
41384: NOT
41385: IFFALSE 41389
// exit ;
41387: GO 42308
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
41389: LD_ADDR_VAR 0 5
41393: PUSH
41394: LD_INT 4
41396: PUSH
41397: LD_INT 5
41399: PUSH
41400: LD_INT 9
41402: PUSH
41403: LD_INT 10
41405: PUSH
41406: LD_INT 6
41408: PUSH
41409: LD_INT 7
41411: PUSH
41412: LD_INT 11
41414: PUSH
41415: EMPTY
41416: LIST
41417: LIST
41418: LIST
41419: LIST
41420: LIST
41421: LIST
41422: LIST
41423: PUSH
41424: LD_INT 27
41426: PUSH
41427: LD_INT 28
41429: PUSH
41430: LD_INT 26
41432: PUSH
41433: LD_INT 30
41435: PUSH
41436: EMPTY
41437: LIST
41438: LIST
41439: LIST
41440: LIST
41441: PUSH
41442: LD_INT 43
41444: PUSH
41445: LD_INT 44
41447: PUSH
41448: LD_INT 46
41450: PUSH
41451: LD_INT 45
41453: PUSH
41454: LD_INT 47
41456: PUSH
41457: LD_INT 49
41459: PUSH
41460: EMPTY
41461: LIST
41462: LIST
41463: LIST
41464: LIST
41465: LIST
41466: LIST
41467: PUSH
41468: EMPTY
41469: LIST
41470: LIST
41471: LIST
41472: PUSH
41473: LD_VAR 0 12
41477: ARRAY
41478: ST_TO_ADDR
// list := list isect fac_list ;
41479: LD_ADDR_VAR 0 5
41483: PUSH
41484: LD_VAR 0 5
41488: PUSH
41489: LD_VAR 0 17
41493: ISECT
41494: ST_TO_ADDR
// if not list then
41495: LD_VAR 0 5
41499: NOT
41500: IFFALSE 41504
// exit ;
41502: GO 42308
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
41504: LD_VAR 0 12
41508: PUSH
41509: LD_INT 3
41511: EQUAL
41512: PUSH
41513: LD_INT 49
41515: PUSH
41516: LD_VAR 0 5
41520: IN
41521: AND
41522: PUSH
41523: LD_INT 31
41525: PPUSH
41526: LD_VAR 0 16
41530: PPUSH
41531: CALL_OW 321
41535: PUSH
41536: LD_INT 2
41538: EQUAL
41539: AND
41540: IFFALSE 41600
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
41542: LD_INT 22
41544: PUSH
41545: LD_VAR 0 16
41549: PUSH
41550: EMPTY
41551: LIST
41552: LIST
41553: PUSH
41554: LD_INT 35
41556: PUSH
41557: LD_INT 49
41559: PUSH
41560: EMPTY
41561: LIST
41562: LIST
41563: PUSH
41564: LD_INT 91
41566: PUSH
41567: LD_VAR 0 1
41571: PUSH
41572: LD_INT 10
41574: PUSH
41575: EMPTY
41576: LIST
41577: LIST
41578: LIST
41579: PUSH
41580: EMPTY
41581: LIST
41582: LIST
41583: LIST
41584: PPUSH
41585: CALL_OW 69
41589: NOT
41590: IFFALSE 41600
// weapon := ru_time_lapser ;
41592: LD_ADDR_VAR 0 18
41596: PUSH
41597: LD_INT 49
41599: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
41600: LD_VAR 0 12
41604: PUSH
41605: LD_INT 1
41607: PUSH
41608: LD_INT 2
41610: PUSH
41611: EMPTY
41612: LIST
41613: LIST
41614: IN
41615: PUSH
41616: LD_INT 11
41618: PUSH
41619: LD_VAR 0 5
41623: IN
41624: PUSH
41625: LD_INT 30
41627: PUSH
41628: LD_VAR 0 5
41632: IN
41633: OR
41634: AND
41635: PUSH
41636: LD_INT 6
41638: PPUSH
41639: LD_VAR 0 16
41643: PPUSH
41644: CALL_OW 321
41648: PUSH
41649: LD_INT 2
41651: EQUAL
41652: AND
41653: IFFALSE 41818
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
41655: LD_INT 22
41657: PUSH
41658: LD_VAR 0 16
41662: PUSH
41663: EMPTY
41664: LIST
41665: LIST
41666: PUSH
41667: LD_INT 2
41669: PUSH
41670: LD_INT 35
41672: PUSH
41673: LD_INT 11
41675: PUSH
41676: EMPTY
41677: LIST
41678: LIST
41679: PUSH
41680: LD_INT 35
41682: PUSH
41683: LD_INT 30
41685: PUSH
41686: EMPTY
41687: LIST
41688: LIST
41689: PUSH
41690: EMPTY
41691: LIST
41692: LIST
41693: LIST
41694: PUSH
41695: LD_INT 91
41697: PUSH
41698: LD_VAR 0 1
41702: PUSH
41703: LD_INT 18
41705: PUSH
41706: EMPTY
41707: LIST
41708: LIST
41709: LIST
41710: PUSH
41711: EMPTY
41712: LIST
41713: LIST
41714: LIST
41715: PPUSH
41716: CALL_OW 69
41720: NOT
41721: PUSH
41722: LD_INT 22
41724: PUSH
41725: LD_VAR 0 16
41729: PUSH
41730: EMPTY
41731: LIST
41732: LIST
41733: PUSH
41734: LD_INT 2
41736: PUSH
41737: LD_INT 30
41739: PUSH
41740: LD_INT 32
41742: PUSH
41743: EMPTY
41744: LIST
41745: LIST
41746: PUSH
41747: LD_INT 30
41749: PUSH
41750: LD_INT 33
41752: PUSH
41753: EMPTY
41754: LIST
41755: LIST
41756: PUSH
41757: EMPTY
41758: LIST
41759: LIST
41760: LIST
41761: PUSH
41762: LD_INT 91
41764: PUSH
41765: LD_VAR 0 1
41769: PUSH
41770: LD_INT 12
41772: PUSH
41773: EMPTY
41774: LIST
41775: LIST
41776: LIST
41777: PUSH
41778: EMPTY
41779: LIST
41780: LIST
41781: LIST
41782: PUSH
41783: EMPTY
41784: LIST
41785: PPUSH
41786: CALL_OW 69
41790: PUSH
41791: LD_INT 2
41793: GREATER
41794: AND
41795: IFFALSE 41818
// weapon := [ us_radar , ar_radar ] [ nat ] ;
41797: LD_ADDR_VAR 0 18
41801: PUSH
41802: LD_INT 11
41804: PUSH
41805: LD_INT 30
41807: PUSH
41808: EMPTY
41809: LIST
41810: LIST
41811: PUSH
41812: LD_VAR 0 12
41816: ARRAY
41817: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
41818: LD_VAR 0 18
41822: NOT
41823: PUSH
41824: LD_INT 40
41826: PPUSH
41827: LD_VAR 0 16
41831: PPUSH
41832: CALL_OW 321
41836: PUSH
41837: LD_INT 2
41839: EQUAL
41840: AND
41841: PUSH
41842: LD_INT 7
41844: PUSH
41845: LD_VAR 0 5
41849: IN
41850: PUSH
41851: LD_INT 28
41853: PUSH
41854: LD_VAR 0 5
41858: IN
41859: OR
41860: PUSH
41861: LD_INT 45
41863: PUSH
41864: LD_VAR 0 5
41868: IN
41869: OR
41870: AND
41871: IFFALSE 42125
// begin hex := GetHexInfo ( x , y ) ;
41873: LD_ADDR_VAR 0 4
41877: PUSH
41878: LD_VAR 0 10
41882: PPUSH
41883: LD_VAR 0 11
41887: PPUSH
41888: CALL_OW 546
41892: ST_TO_ADDR
// if hex [ 1 ] then
41893: LD_VAR 0 4
41897: PUSH
41898: LD_INT 1
41900: ARRAY
41901: IFFALSE 41905
// exit ;
41903: GO 42308
// height := hex [ 2 ] ;
41905: LD_ADDR_VAR 0 15
41909: PUSH
41910: LD_VAR 0 4
41914: PUSH
41915: LD_INT 2
41917: ARRAY
41918: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
41919: LD_ADDR_VAR 0 14
41923: PUSH
41924: LD_INT 0
41926: PUSH
41927: LD_INT 2
41929: PUSH
41930: LD_INT 3
41932: PUSH
41933: LD_INT 5
41935: PUSH
41936: EMPTY
41937: LIST
41938: LIST
41939: LIST
41940: LIST
41941: ST_TO_ADDR
// for i in tmp do
41942: LD_ADDR_VAR 0 8
41946: PUSH
41947: LD_VAR 0 14
41951: PUSH
41952: FOR_IN
41953: IFFALSE 42123
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
41955: LD_ADDR_VAR 0 9
41959: PUSH
41960: LD_VAR 0 10
41964: PPUSH
41965: LD_VAR 0 8
41969: PPUSH
41970: LD_INT 5
41972: PPUSH
41973: CALL_OW 272
41977: PUSH
41978: LD_VAR 0 11
41982: PPUSH
41983: LD_VAR 0 8
41987: PPUSH
41988: LD_INT 5
41990: PPUSH
41991: CALL_OW 273
41995: PUSH
41996: EMPTY
41997: LIST
41998: LIST
41999: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
42000: LD_VAR 0 9
42004: PUSH
42005: LD_INT 1
42007: ARRAY
42008: PPUSH
42009: LD_VAR 0 9
42013: PUSH
42014: LD_INT 2
42016: ARRAY
42017: PPUSH
42018: CALL_OW 488
42022: IFFALSE 42121
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
42024: LD_ADDR_VAR 0 4
42028: PUSH
42029: LD_VAR 0 9
42033: PUSH
42034: LD_INT 1
42036: ARRAY
42037: PPUSH
42038: LD_VAR 0 9
42042: PUSH
42043: LD_INT 2
42045: ARRAY
42046: PPUSH
42047: CALL_OW 546
42051: ST_TO_ADDR
// if hex [ 1 ] then
42052: LD_VAR 0 4
42056: PUSH
42057: LD_INT 1
42059: ARRAY
42060: IFFALSE 42064
// continue ;
42062: GO 41952
// h := hex [ 2 ] ;
42064: LD_ADDR_VAR 0 13
42068: PUSH
42069: LD_VAR 0 4
42073: PUSH
42074: LD_INT 2
42076: ARRAY
42077: ST_TO_ADDR
// if h + 7 < height then
42078: LD_VAR 0 13
42082: PUSH
42083: LD_INT 7
42085: PLUS
42086: PUSH
42087: LD_VAR 0 15
42091: LESS
42092: IFFALSE 42121
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
42094: LD_ADDR_VAR 0 18
42098: PUSH
42099: LD_INT 7
42101: PUSH
42102: LD_INT 28
42104: PUSH
42105: LD_INT 45
42107: PUSH
42108: EMPTY
42109: LIST
42110: LIST
42111: LIST
42112: PUSH
42113: LD_VAR 0 12
42117: ARRAY
42118: ST_TO_ADDR
// break ;
42119: GO 42123
// end ; end ; end ;
42121: GO 41952
42123: POP
42124: POP
// end ; if not weapon then
42125: LD_VAR 0 18
42129: NOT
42130: IFFALSE 42190
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
42132: LD_ADDR_VAR 0 5
42136: PUSH
42137: LD_VAR 0 5
42141: PUSH
42142: LD_INT 11
42144: PUSH
42145: LD_INT 30
42147: PUSH
42148: LD_INT 49
42150: PUSH
42151: EMPTY
42152: LIST
42153: LIST
42154: LIST
42155: DIFF
42156: ST_TO_ADDR
// if not list then
42157: LD_VAR 0 5
42161: NOT
42162: IFFALSE 42166
// exit ;
42164: GO 42308
// weapon := list [ rand ( 1 , list ) ] ;
42166: LD_ADDR_VAR 0 18
42170: PUSH
42171: LD_VAR 0 5
42175: PUSH
42176: LD_INT 1
42178: PPUSH
42179: LD_VAR 0 5
42183: PPUSH
42184: CALL_OW 12
42188: ARRAY
42189: ST_TO_ADDR
// end ; if weapon then
42190: LD_VAR 0 18
42194: IFFALSE 42308
// begin tmp := CostOfWeapon ( weapon ) ;
42196: LD_ADDR_VAR 0 14
42200: PUSH
42201: LD_VAR 0 18
42205: PPUSH
42206: CALL_OW 451
42210: ST_TO_ADDR
// j := GetBase ( tower ) ;
42211: LD_ADDR_VAR 0 9
42215: PUSH
42216: LD_VAR 0 1
42220: PPUSH
42221: CALL_OW 274
42225: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
42226: LD_VAR 0 9
42230: PPUSH
42231: LD_INT 1
42233: PPUSH
42234: CALL_OW 275
42238: PUSH
42239: LD_VAR 0 14
42243: PUSH
42244: LD_INT 1
42246: ARRAY
42247: GREATEREQUAL
42248: PUSH
42249: LD_VAR 0 9
42253: PPUSH
42254: LD_INT 2
42256: PPUSH
42257: CALL_OW 275
42261: PUSH
42262: LD_VAR 0 14
42266: PUSH
42267: LD_INT 2
42269: ARRAY
42270: GREATEREQUAL
42271: AND
42272: PUSH
42273: LD_VAR 0 9
42277: PPUSH
42278: LD_INT 3
42280: PPUSH
42281: CALL_OW 275
42285: PUSH
42286: LD_VAR 0 14
42290: PUSH
42291: LD_INT 3
42293: ARRAY
42294: GREATEREQUAL
42295: AND
42296: IFFALSE 42308
// result := weapon ;
42298: LD_ADDR_VAR 0 3
42302: PUSH
42303: LD_VAR 0 18
42307: ST_TO_ADDR
// end ; end ;
42308: LD_VAR 0 3
42312: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
42313: LD_INT 0
42315: PPUSH
42316: PPUSH
// result := true ;
42317: LD_ADDR_VAR 0 3
42321: PUSH
42322: LD_INT 1
42324: ST_TO_ADDR
// if array1 = array2 then
42325: LD_VAR 0 1
42329: PUSH
42330: LD_VAR 0 2
42334: EQUAL
42335: IFFALSE 42395
// begin for i = 1 to array1 do
42337: LD_ADDR_VAR 0 4
42341: PUSH
42342: DOUBLE
42343: LD_INT 1
42345: DEC
42346: ST_TO_ADDR
42347: LD_VAR 0 1
42351: PUSH
42352: FOR_TO
42353: IFFALSE 42391
// if array1 [ i ] <> array2 [ i ] then
42355: LD_VAR 0 1
42359: PUSH
42360: LD_VAR 0 4
42364: ARRAY
42365: PUSH
42366: LD_VAR 0 2
42370: PUSH
42371: LD_VAR 0 4
42375: ARRAY
42376: NONEQUAL
42377: IFFALSE 42389
// begin result := false ;
42379: LD_ADDR_VAR 0 3
42383: PUSH
42384: LD_INT 0
42386: ST_TO_ADDR
// break ;
42387: GO 42391
// end ;
42389: GO 42352
42391: POP
42392: POP
// end else
42393: GO 42403
// result := false ;
42395: LD_ADDR_VAR 0 3
42399: PUSH
42400: LD_INT 0
42402: ST_TO_ADDR
// end ;
42403: LD_VAR 0 3
42407: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
42408: LD_INT 0
42410: PPUSH
42411: PPUSH
// if not array1 or not array2 then
42412: LD_VAR 0 1
42416: NOT
42417: PUSH
42418: LD_VAR 0 2
42422: NOT
42423: OR
42424: IFFALSE 42428
// exit ;
42426: GO 42492
// result := true ;
42428: LD_ADDR_VAR 0 3
42432: PUSH
42433: LD_INT 1
42435: ST_TO_ADDR
// for i = 1 to array1 do
42436: LD_ADDR_VAR 0 4
42440: PUSH
42441: DOUBLE
42442: LD_INT 1
42444: DEC
42445: ST_TO_ADDR
42446: LD_VAR 0 1
42450: PUSH
42451: FOR_TO
42452: IFFALSE 42490
// if array1 [ i ] <> array2 [ i ] then
42454: LD_VAR 0 1
42458: PUSH
42459: LD_VAR 0 4
42463: ARRAY
42464: PUSH
42465: LD_VAR 0 2
42469: PUSH
42470: LD_VAR 0 4
42474: ARRAY
42475: NONEQUAL
42476: IFFALSE 42488
// begin result := false ;
42478: LD_ADDR_VAR 0 3
42482: PUSH
42483: LD_INT 0
42485: ST_TO_ADDR
// break ;
42486: GO 42490
// end ;
42488: GO 42451
42490: POP
42491: POP
// end ;
42492: LD_VAR 0 3
42496: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
42497: LD_INT 0
42499: PPUSH
42500: PPUSH
42501: PPUSH
// pom := GetBase ( fac ) ;
42502: LD_ADDR_VAR 0 5
42506: PUSH
42507: LD_VAR 0 1
42511: PPUSH
42512: CALL_OW 274
42516: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
42517: LD_ADDR_VAR 0 4
42521: PUSH
42522: LD_VAR 0 2
42526: PUSH
42527: LD_INT 1
42529: ARRAY
42530: PPUSH
42531: LD_VAR 0 2
42535: PUSH
42536: LD_INT 2
42538: ARRAY
42539: PPUSH
42540: LD_VAR 0 2
42544: PUSH
42545: LD_INT 3
42547: ARRAY
42548: PPUSH
42549: LD_VAR 0 2
42553: PUSH
42554: LD_INT 4
42556: ARRAY
42557: PPUSH
42558: CALL_OW 449
42562: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42563: LD_ADDR_VAR 0 3
42567: PUSH
42568: LD_VAR 0 5
42572: PPUSH
42573: LD_INT 1
42575: PPUSH
42576: CALL_OW 275
42580: PUSH
42581: LD_VAR 0 4
42585: PUSH
42586: LD_INT 1
42588: ARRAY
42589: GREATEREQUAL
42590: PUSH
42591: LD_VAR 0 5
42595: PPUSH
42596: LD_INT 2
42598: PPUSH
42599: CALL_OW 275
42603: PUSH
42604: LD_VAR 0 4
42608: PUSH
42609: LD_INT 2
42611: ARRAY
42612: GREATEREQUAL
42613: AND
42614: PUSH
42615: LD_VAR 0 5
42619: PPUSH
42620: LD_INT 3
42622: PPUSH
42623: CALL_OW 275
42627: PUSH
42628: LD_VAR 0 4
42632: PUSH
42633: LD_INT 3
42635: ARRAY
42636: GREATEREQUAL
42637: AND
42638: ST_TO_ADDR
// end ;
42639: LD_VAR 0 3
42643: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
42644: LD_INT 0
42646: PPUSH
42647: PPUSH
42648: PPUSH
42649: PPUSH
// pom := GetBase ( building ) ;
42650: LD_ADDR_VAR 0 3
42654: PUSH
42655: LD_VAR 0 1
42659: PPUSH
42660: CALL_OW 274
42664: ST_TO_ADDR
// if not pom then
42665: LD_VAR 0 3
42669: NOT
42670: IFFALSE 42674
// exit ;
42672: GO 42844
// btype := GetBType ( building ) ;
42674: LD_ADDR_VAR 0 5
42678: PUSH
42679: LD_VAR 0 1
42683: PPUSH
42684: CALL_OW 266
42688: ST_TO_ADDR
// if btype = b_armoury then
42689: LD_VAR 0 5
42693: PUSH
42694: LD_INT 4
42696: EQUAL
42697: IFFALSE 42707
// btype := b_barracks ;
42699: LD_ADDR_VAR 0 5
42703: PUSH
42704: LD_INT 5
42706: ST_TO_ADDR
// if btype = b_depot then
42707: LD_VAR 0 5
42711: PUSH
42712: LD_INT 0
42714: EQUAL
42715: IFFALSE 42725
// btype := b_warehouse ;
42717: LD_ADDR_VAR 0 5
42721: PUSH
42722: LD_INT 1
42724: ST_TO_ADDR
// if btype = b_workshop then
42725: LD_VAR 0 5
42729: PUSH
42730: LD_INT 2
42732: EQUAL
42733: IFFALSE 42743
// btype := b_factory ;
42735: LD_ADDR_VAR 0 5
42739: PUSH
42740: LD_INT 3
42742: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42743: LD_ADDR_VAR 0 4
42747: PUSH
42748: LD_VAR 0 5
42752: PPUSH
42753: LD_VAR 0 1
42757: PPUSH
42758: CALL_OW 248
42762: PPUSH
42763: CALL_OW 450
42767: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42768: LD_ADDR_VAR 0 2
42772: PUSH
42773: LD_VAR 0 3
42777: PPUSH
42778: LD_INT 1
42780: PPUSH
42781: CALL_OW 275
42785: PUSH
42786: LD_VAR 0 4
42790: PUSH
42791: LD_INT 1
42793: ARRAY
42794: GREATEREQUAL
42795: PUSH
42796: LD_VAR 0 3
42800: PPUSH
42801: LD_INT 2
42803: PPUSH
42804: CALL_OW 275
42808: PUSH
42809: LD_VAR 0 4
42813: PUSH
42814: LD_INT 2
42816: ARRAY
42817: GREATEREQUAL
42818: AND
42819: PUSH
42820: LD_VAR 0 3
42824: PPUSH
42825: LD_INT 3
42827: PPUSH
42828: CALL_OW 275
42832: PUSH
42833: LD_VAR 0 4
42837: PUSH
42838: LD_INT 3
42840: ARRAY
42841: GREATEREQUAL
42842: AND
42843: ST_TO_ADDR
// end ;
42844: LD_VAR 0 2
42848: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
42849: LD_INT 0
42851: PPUSH
42852: PPUSH
42853: PPUSH
// pom := GetBase ( building ) ;
42854: LD_ADDR_VAR 0 4
42858: PUSH
42859: LD_VAR 0 1
42863: PPUSH
42864: CALL_OW 274
42868: ST_TO_ADDR
// if not pom then
42869: LD_VAR 0 4
42873: NOT
42874: IFFALSE 42878
// exit ;
42876: GO 42979
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42878: LD_ADDR_VAR 0 5
42882: PUSH
42883: LD_VAR 0 2
42887: PPUSH
42888: LD_VAR 0 1
42892: PPUSH
42893: CALL_OW 248
42897: PPUSH
42898: CALL_OW 450
42902: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42903: LD_ADDR_VAR 0 3
42907: PUSH
42908: LD_VAR 0 4
42912: PPUSH
42913: LD_INT 1
42915: PPUSH
42916: CALL_OW 275
42920: PUSH
42921: LD_VAR 0 5
42925: PUSH
42926: LD_INT 1
42928: ARRAY
42929: GREATEREQUAL
42930: PUSH
42931: LD_VAR 0 4
42935: PPUSH
42936: LD_INT 2
42938: PPUSH
42939: CALL_OW 275
42943: PUSH
42944: LD_VAR 0 5
42948: PUSH
42949: LD_INT 2
42951: ARRAY
42952: GREATEREQUAL
42953: AND
42954: PUSH
42955: LD_VAR 0 4
42959: PPUSH
42960: LD_INT 3
42962: PPUSH
42963: CALL_OW 275
42967: PUSH
42968: LD_VAR 0 5
42972: PUSH
42973: LD_INT 3
42975: ARRAY
42976: GREATEREQUAL
42977: AND
42978: ST_TO_ADDR
// end ;
42979: LD_VAR 0 3
42983: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
42984: LD_INT 0
42986: PPUSH
42987: PPUSH
42988: PPUSH
42989: PPUSH
42990: PPUSH
42991: PPUSH
42992: PPUSH
42993: PPUSH
42994: PPUSH
42995: PPUSH
42996: PPUSH
// result := false ;
42997: LD_ADDR_VAR 0 8
43001: PUSH
43002: LD_INT 0
43004: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
43005: LD_VAR 0 5
43009: NOT
43010: PUSH
43011: LD_VAR 0 1
43015: NOT
43016: OR
43017: PUSH
43018: LD_VAR 0 2
43022: NOT
43023: OR
43024: PUSH
43025: LD_VAR 0 3
43029: NOT
43030: OR
43031: IFFALSE 43035
// exit ;
43033: GO 43849
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
43035: LD_ADDR_VAR 0 14
43039: PUSH
43040: LD_VAR 0 1
43044: PPUSH
43045: LD_VAR 0 2
43049: PPUSH
43050: LD_VAR 0 3
43054: PPUSH
43055: LD_VAR 0 4
43059: PPUSH
43060: LD_VAR 0 5
43064: PUSH
43065: LD_INT 1
43067: ARRAY
43068: PPUSH
43069: CALL_OW 248
43073: PPUSH
43074: LD_INT 0
43076: PPUSH
43077: CALL 45086 0 6
43081: ST_TO_ADDR
// if not hexes then
43082: LD_VAR 0 14
43086: NOT
43087: IFFALSE 43091
// exit ;
43089: GO 43849
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
43091: LD_ADDR_VAR 0 17
43095: PUSH
43096: LD_VAR 0 5
43100: PPUSH
43101: LD_INT 22
43103: PUSH
43104: LD_VAR 0 13
43108: PPUSH
43109: CALL_OW 255
43113: PUSH
43114: EMPTY
43115: LIST
43116: LIST
43117: PUSH
43118: LD_INT 2
43120: PUSH
43121: LD_INT 30
43123: PUSH
43124: LD_INT 0
43126: PUSH
43127: EMPTY
43128: LIST
43129: LIST
43130: PUSH
43131: LD_INT 30
43133: PUSH
43134: LD_INT 1
43136: PUSH
43137: EMPTY
43138: LIST
43139: LIST
43140: PUSH
43141: EMPTY
43142: LIST
43143: LIST
43144: LIST
43145: PUSH
43146: EMPTY
43147: LIST
43148: LIST
43149: PPUSH
43150: CALL_OW 72
43154: ST_TO_ADDR
// for i = 1 to hexes do
43155: LD_ADDR_VAR 0 9
43159: PUSH
43160: DOUBLE
43161: LD_INT 1
43163: DEC
43164: ST_TO_ADDR
43165: LD_VAR 0 14
43169: PUSH
43170: FOR_TO
43171: IFFALSE 43847
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43173: LD_ADDR_VAR 0 13
43177: PUSH
43178: LD_VAR 0 14
43182: PUSH
43183: LD_VAR 0 9
43187: ARRAY
43188: PUSH
43189: LD_INT 1
43191: ARRAY
43192: PPUSH
43193: LD_VAR 0 14
43197: PUSH
43198: LD_VAR 0 9
43202: ARRAY
43203: PUSH
43204: LD_INT 2
43206: ARRAY
43207: PPUSH
43208: CALL_OW 428
43212: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
43213: LD_VAR 0 14
43217: PUSH
43218: LD_VAR 0 9
43222: ARRAY
43223: PUSH
43224: LD_INT 1
43226: ARRAY
43227: PPUSH
43228: LD_VAR 0 14
43232: PUSH
43233: LD_VAR 0 9
43237: ARRAY
43238: PUSH
43239: LD_INT 2
43241: ARRAY
43242: PPUSH
43243: CALL_OW 351
43247: PUSH
43248: LD_VAR 0 14
43252: PUSH
43253: LD_VAR 0 9
43257: ARRAY
43258: PUSH
43259: LD_INT 1
43261: ARRAY
43262: PPUSH
43263: LD_VAR 0 14
43267: PUSH
43268: LD_VAR 0 9
43272: ARRAY
43273: PUSH
43274: LD_INT 2
43276: ARRAY
43277: PPUSH
43278: CALL_OW 488
43282: NOT
43283: OR
43284: PUSH
43285: LD_VAR 0 13
43289: PPUSH
43290: CALL_OW 247
43294: PUSH
43295: LD_INT 3
43297: EQUAL
43298: OR
43299: IFFALSE 43305
// exit ;
43301: POP
43302: POP
43303: GO 43849
// if not tmp then
43305: LD_VAR 0 13
43309: NOT
43310: IFFALSE 43314
// continue ;
43312: GO 43170
// result := true ;
43314: LD_ADDR_VAR 0 8
43318: PUSH
43319: LD_INT 1
43321: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
43322: LD_VAR 0 6
43326: PUSH
43327: LD_VAR 0 13
43331: PPUSH
43332: CALL_OW 247
43336: PUSH
43337: LD_INT 2
43339: EQUAL
43340: AND
43341: PUSH
43342: LD_VAR 0 13
43346: PPUSH
43347: CALL_OW 263
43351: PUSH
43352: LD_INT 1
43354: EQUAL
43355: AND
43356: IFFALSE 43520
// begin if IsDrivenBy ( tmp ) then
43358: LD_VAR 0 13
43362: PPUSH
43363: CALL_OW 311
43367: IFFALSE 43371
// continue ;
43369: GO 43170
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
43371: LD_VAR 0 6
43375: PPUSH
43376: LD_INT 3
43378: PUSH
43379: LD_INT 60
43381: PUSH
43382: EMPTY
43383: LIST
43384: PUSH
43385: EMPTY
43386: LIST
43387: LIST
43388: PUSH
43389: LD_INT 3
43391: PUSH
43392: LD_INT 55
43394: PUSH
43395: EMPTY
43396: LIST
43397: PUSH
43398: EMPTY
43399: LIST
43400: LIST
43401: PUSH
43402: EMPTY
43403: LIST
43404: LIST
43405: PPUSH
43406: CALL_OW 72
43410: IFFALSE 43518
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
43412: LD_ADDR_VAR 0 18
43416: PUSH
43417: LD_VAR 0 6
43421: PPUSH
43422: LD_INT 3
43424: PUSH
43425: LD_INT 60
43427: PUSH
43428: EMPTY
43429: LIST
43430: PUSH
43431: EMPTY
43432: LIST
43433: LIST
43434: PUSH
43435: LD_INT 3
43437: PUSH
43438: LD_INT 55
43440: PUSH
43441: EMPTY
43442: LIST
43443: PUSH
43444: EMPTY
43445: LIST
43446: LIST
43447: PUSH
43448: EMPTY
43449: LIST
43450: LIST
43451: PPUSH
43452: CALL_OW 72
43456: PUSH
43457: LD_INT 1
43459: ARRAY
43460: ST_TO_ADDR
// if IsInUnit ( driver ) then
43461: LD_VAR 0 18
43465: PPUSH
43466: CALL_OW 310
43470: IFFALSE 43481
// ComExit ( driver ) ;
43472: LD_VAR 0 18
43476: PPUSH
43477: CALL 68214 0 1
// AddComEnterUnit ( driver , tmp ) ;
43481: LD_VAR 0 18
43485: PPUSH
43486: LD_VAR 0 13
43490: PPUSH
43491: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
43495: LD_VAR 0 18
43499: PPUSH
43500: LD_VAR 0 7
43504: PPUSH
43505: CALL_OW 173
// AddComExitVehicle ( driver ) ;
43509: LD_VAR 0 18
43513: PPUSH
43514: CALL_OW 181
// end ; continue ;
43518: GO 43170
// end ; if not cleaners or not tmp in cleaners then
43520: LD_VAR 0 6
43524: NOT
43525: PUSH
43526: LD_VAR 0 13
43530: PUSH
43531: LD_VAR 0 6
43535: IN
43536: NOT
43537: OR
43538: IFFALSE 43845
// begin if dep then
43540: LD_VAR 0 17
43544: IFFALSE 43680
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
43546: LD_ADDR_VAR 0 16
43550: PUSH
43551: LD_VAR 0 17
43555: PUSH
43556: LD_INT 1
43558: ARRAY
43559: PPUSH
43560: CALL_OW 250
43564: PPUSH
43565: LD_VAR 0 17
43569: PUSH
43570: LD_INT 1
43572: ARRAY
43573: PPUSH
43574: CALL_OW 254
43578: PPUSH
43579: LD_INT 5
43581: PPUSH
43582: CALL_OW 272
43586: PUSH
43587: LD_VAR 0 17
43591: PUSH
43592: LD_INT 1
43594: ARRAY
43595: PPUSH
43596: CALL_OW 251
43600: PPUSH
43601: LD_VAR 0 17
43605: PUSH
43606: LD_INT 1
43608: ARRAY
43609: PPUSH
43610: CALL_OW 254
43614: PPUSH
43615: LD_INT 5
43617: PPUSH
43618: CALL_OW 273
43622: PUSH
43623: EMPTY
43624: LIST
43625: LIST
43626: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
43627: LD_VAR 0 16
43631: PUSH
43632: LD_INT 1
43634: ARRAY
43635: PPUSH
43636: LD_VAR 0 16
43640: PUSH
43641: LD_INT 2
43643: ARRAY
43644: PPUSH
43645: CALL_OW 488
43649: IFFALSE 43680
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
43651: LD_VAR 0 13
43655: PPUSH
43656: LD_VAR 0 16
43660: PUSH
43661: LD_INT 1
43663: ARRAY
43664: PPUSH
43665: LD_VAR 0 16
43669: PUSH
43670: LD_INT 2
43672: ARRAY
43673: PPUSH
43674: CALL_OW 111
// continue ;
43678: GO 43170
// end ; end ; r := GetDir ( tmp ) ;
43680: LD_ADDR_VAR 0 15
43684: PUSH
43685: LD_VAR 0 13
43689: PPUSH
43690: CALL_OW 254
43694: ST_TO_ADDR
// if r = 5 then
43695: LD_VAR 0 15
43699: PUSH
43700: LD_INT 5
43702: EQUAL
43703: IFFALSE 43713
// r := 0 ;
43705: LD_ADDR_VAR 0 15
43709: PUSH
43710: LD_INT 0
43712: ST_TO_ADDR
// for j = r to 5 do
43713: LD_ADDR_VAR 0 10
43717: PUSH
43718: DOUBLE
43719: LD_VAR 0 15
43723: DEC
43724: ST_TO_ADDR
43725: LD_INT 5
43727: PUSH
43728: FOR_TO
43729: IFFALSE 43843
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
43731: LD_ADDR_VAR 0 11
43735: PUSH
43736: LD_VAR 0 13
43740: PPUSH
43741: CALL_OW 250
43745: PPUSH
43746: LD_VAR 0 10
43750: PPUSH
43751: LD_INT 2
43753: PPUSH
43754: CALL_OW 272
43758: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
43759: LD_ADDR_VAR 0 12
43763: PUSH
43764: LD_VAR 0 13
43768: PPUSH
43769: CALL_OW 251
43773: PPUSH
43774: LD_VAR 0 10
43778: PPUSH
43779: LD_INT 2
43781: PPUSH
43782: CALL_OW 273
43786: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
43787: LD_VAR 0 11
43791: PPUSH
43792: LD_VAR 0 12
43796: PPUSH
43797: CALL_OW 488
43801: PUSH
43802: LD_VAR 0 11
43806: PPUSH
43807: LD_VAR 0 12
43811: PPUSH
43812: CALL_OW 428
43816: NOT
43817: AND
43818: IFFALSE 43841
// begin ComMoveXY ( tmp , _x , _y ) ;
43820: LD_VAR 0 13
43824: PPUSH
43825: LD_VAR 0 11
43829: PPUSH
43830: LD_VAR 0 12
43834: PPUSH
43835: CALL_OW 111
// break ;
43839: GO 43843
// end ; end ;
43841: GO 43728
43843: POP
43844: POP
// end ; end ;
43845: GO 43170
43847: POP
43848: POP
// end ;
43849: LD_VAR 0 8
43853: RET
// export function BuildingTechInvented ( side , btype ) ; begin
43854: LD_INT 0
43856: PPUSH
// result := true ;
43857: LD_ADDR_VAR 0 3
43861: PUSH
43862: LD_INT 1
43864: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
43865: LD_VAR 0 2
43869: PUSH
43870: LD_INT 24
43872: DOUBLE
43873: EQUAL
43874: IFTRUE 43884
43876: LD_INT 33
43878: DOUBLE
43879: EQUAL
43880: IFTRUE 43884
43882: GO 43909
43884: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
43885: LD_ADDR_VAR 0 3
43889: PUSH
43890: LD_INT 32
43892: PPUSH
43893: LD_VAR 0 1
43897: PPUSH
43898: CALL_OW 321
43902: PUSH
43903: LD_INT 2
43905: EQUAL
43906: ST_TO_ADDR
43907: GO 44229
43909: LD_INT 20
43911: DOUBLE
43912: EQUAL
43913: IFTRUE 43917
43915: GO 43942
43917: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
43918: LD_ADDR_VAR 0 3
43922: PUSH
43923: LD_INT 6
43925: PPUSH
43926: LD_VAR 0 1
43930: PPUSH
43931: CALL_OW 321
43935: PUSH
43936: LD_INT 2
43938: EQUAL
43939: ST_TO_ADDR
43940: GO 44229
43942: LD_INT 22
43944: DOUBLE
43945: EQUAL
43946: IFTRUE 43956
43948: LD_INT 36
43950: DOUBLE
43951: EQUAL
43952: IFTRUE 43956
43954: GO 43981
43956: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
43957: LD_ADDR_VAR 0 3
43961: PUSH
43962: LD_INT 15
43964: PPUSH
43965: LD_VAR 0 1
43969: PPUSH
43970: CALL_OW 321
43974: PUSH
43975: LD_INT 2
43977: EQUAL
43978: ST_TO_ADDR
43979: GO 44229
43981: LD_INT 30
43983: DOUBLE
43984: EQUAL
43985: IFTRUE 43989
43987: GO 44014
43989: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
43990: LD_ADDR_VAR 0 3
43994: PUSH
43995: LD_INT 20
43997: PPUSH
43998: LD_VAR 0 1
44002: PPUSH
44003: CALL_OW 321
44007: PUSH
44008: LD_INT 2
44010: EQUAL
44011: ST_TO_ADDR
44012: GO 44229
44014: LD_INT 28
44016: DOUBLE
44017: EQUAL
44018: IFTRUE 44028
44020: LD_INT 21
44022: DOUBLE
44023: EQUAL
44024: IFTRUE 44028
44026: GO 44053
44028: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
44029: LD_ADDR_VAR 0 3
44033: PUSH
44034: LD_INT 21
44036: PPUSH
44037: LD_VAR 0 1
44041: PPUSH
44042: CALL_OW 321
44046: PUSH
44047: LD_INT 2
44049: EQUAL
44050: ST_TO_ADDR
44051: GO 44229
44053: LD_INT 16
44055: DOUBLE
44056: EQUAL
44057: IFTRUE 44061
44059: GO 44088
44061: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
44062: LD_ADDR_VAR 0 3
44066: PUSH
44067: LD_EXP 33
44071: PPUSH
44072: LD_VAR 0 1
44076: PPUSH
44077: CALL_OW 321
44081: PUSH
44082: LD_INT 2
44084: EQUAL
44085: ST_TO_ADDR
44086: GO 44229
44088: LD_INT 19
44090: DOUBLE
44091: EQUAL
44092: IFTRUE 44102
44094: LD_INT 23
44096: DOUBLE
44097: EQUAL
44098: IFTRUE 44102
44100: GO 44129
44102: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
44103: LD_ADDR_VAR 0 3
44107: PUSH
44108: LD_EXP 32
44112: PPUSH
44113: LD_VAR 0 1
44117: PPUSH
44118: CALL_OW 321
44122: PUSH
44123: LD_INT 2
44125: EQUAL
44126: ST_TO_ADDR
44127: GO 44229
44129: LD_INT 17
44131: DOUBLE
44132: EQUAL
44133: IFTRUE 44137
44135: GO 44162
44137: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
44138: LD_ADDR_VAR 0 3
44142: PUSH
44143: LD_INT 39
44145: PPUSH
44146: LD_VAR 0 1
44150: PPUSH
44151: CALL_OW 321
44155: PUSH
44156: LD_INT 2
44158: EQUAL
44159: ST_TO_ADDR
44160: GO 44229
44162: LD_INT 18
44164: DOUBLE
44165: EQUAL
44166: IFTRUE 44170
44168: GO 44195
44170: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
44171: LD_ADDR_VAR 0 3
44175: PUSH
44176: LD_INT 40
44178: PPUSH
44179: LD_VAR 0 1
44183: PPUSH
44184: CALL_OW 321
44188: PUSH
44189: LD_INT 2
44191: EQUAL
44192: ST_TO_ADDR
44193: GO 44229
44195: LD_INT 27
44197: DOUBLE
44198: EQUAL
44199: IFTRUE 44203
44201: GO 44228
44203: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
44204: LD_ADDR_VAR 0 3
44208: PUSH
44209: LD_INT 35
44211: PPUSH
44212: LD_VAR 0 1
44216: PPUSH
44217: CALL_OW 321
44221: PUSH
44222: LD_INT 2
44224: EQUAL
44225: ST_TO_ADDR
44226: GO 44229
44228: POP
// end ;
44229: LD_VAR 0 3
44233: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
44234: LD_INT 0
44236: PPUSH
44237: PPUSH
44238: PPUSH
44239: PPUSH
44240: PPUSH
44241: PPUSH
44242: PPUSH
44243: PPUSH
44244: PPUSH
44245: PPUSH
44246: PPUSH
// result := false ;
44247: LD_ADDR_VAR 0 6
44251: PUSH
44252: LD_INT 0
44254: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
44255: LD_VAR 0 1
44259: NOT
44260: PUSH
44261: LD_VAR 0 1
44265: PPUSH
44266: CALL_OW 266
44270: PUSH
44271: LD_INT 0
44273: PUSH
44274: LD_INT 1
44276: PUSH
44277: EMPTY
44278: LIST
44279: LIST
44280: IN
44281: NOT
44282: OR
44283: PUSH
44284: LD_VAR 0 2
44288: NOT
44289: OR
44290: PUSH
44291: LD_VAR 0 5
44295: PUSH
44296: LD_INT 0
44298: PUSH
44299: LD_INT 1
44301: PUSH
44302: LD_INT 2
44304: PUSH
44305: LD_INT 3
44307: PUSH
44308: LD_INT 4
44310: PUSH
44311: LD_INT 5
44313: PUSH
44314: EMPTY
44315: LIST
44316: LIST
44317: LIST
44318: LIST
44319: LIST
44320: LIST
44321: IN
44322: NOT
44323: OR
44324: PUSH
44325: LD_VAR 0 3
44329: PPUSH
44330: LD_VAR 0 4
44334: PPUSH
44335: CALL_OW 488
44339: NOT
44340: OR
44341: IFFALSE 44345
// exit ;
44343: GO 45081
// side := GetSide ( depot ) ;
44345: LD_ADDR_VAR 0 9
44349: PUSH
44350: LD_VAR 0 1
44354: PPUSH
44355: CALL_OW 255
44359: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
44360: LD_VAR 0 9
44364: PPUSH
44365: LD_VAR 0 2
44369: PPUSH
44370: CALL 43854 0 2
44374: NOT
44375: IFFALSE 44379
// exit ;
44377: GO 45081
// pom := GetBase ( depot ) ;
44379: LD_ADDR_VAR 0 10
44383: PUSH
44384: LD_VAR 0 1
44388: PPUSH
44389: CALL_OW 274
44393: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
44394: LD_ADDR_VAR 0 11
44398: PUSH
44399: LD_VAR 0 2
44403: PPUSH
44404: LD_VAR 0 1
44408: PPUSH
44409: CALL_OW 248
44413: PPUSH
44414: CALL_OW 450
44418: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
44419: LD_VAR 0 10
44423: PPUSH
44424: LD_INT 1
44426: PPUSH
44427: CALL_OW 275
44431: PUSH
44432: LD_VAR 0 11
44436: PUSH
44437: LD_INT 1
44439: ARRAY
44440: GREATEREQUAL
44441: PUSH
44442: LD_VAR 0 10
44446: PPUSH
44447: LD_INT 2
44449: PPUSH
44450: CALL_OW 275
44454: PUSH
44455: LD_VAR 0 11
44459: PUSH
44460: LD_INT 2
44462: ARRAY
44463: GREATEREQUAL
44464: AND
44465: PUSH
44466: LD_VAR 0 10
44470: PPUSH
44471: LD_INT 3
44473: PPUSH
44474: CALL_OW 275
44478: PUSH
44479: LD_VAR 0 11
44483: PUSH
44484: LD_INT 3
44486: ARRAY
44487: GREATEREQUAL
44488: AND
44489: NOT
44490: IFFALSE 44494
// exit ;
44492: GO 45081
// if GetBType ( depot ) = b_depot then
44494: LD_VAR 0 1
44498: PPUSH
44499: CALL_OW 266
44503: PUSH
44504: LD_INT 0
44506: EQUAL
44507: IFFALSE 44519
// dist := 28 else
44509: LD_ADDR_VAR 0 14
44513: PUSH
44514: LD_INT 28
44516: ST_TO_ADDR
44517: GO 44527
// dist := 36 ;
44519: LD_ADDR_VAR 0 14
44523: PUSH
44524: LD_INT 36
44526: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
44527: LD_VAR 0 1
44531: PPUSH
44532: LD_VAR 0 3
44536: PPUSH
44537: LD_VAR 0 4
44541: PPUSH
44542: CALL_OW 297
44546: PUSH
44547: LD_VAR 0 14
44551: GREATER
44552: IFFALSE 44556
// exit ;
44554: GO 45081
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
44556: LD_ADDR_VAR 0 12
44560: PUSH
44561: LD_VAR 0 2
44565: PPUSH
44566: LD_VAR 0 3
44570: PPUSH
44571: LD_VAR 0 4
44575: PPUSH
44576: LD_VAR 0 5
44580: PPUSH
44581: LD_VAR 0 1
44585: PPUSH
44586: CALL_OW 248
44590: PPUSH
44591: LD_INT 0
44593: PPUSH
44594: CALL 45086 0 6
44598: ST_TO_ADDR
// if not hexes then
44599: LD_VAR 0 12
44603: NOT
44604: IFFALSE 44608
// exit ;
44606: GO 45081
// hex := GetHexInfo ( x , y ) ;
44608: LD_ADDR_VAR 0 15
44612: PUSH
44613: LD_VAR 0 3
44617: PPUSH
44618: LD_VAR 0 4
44622: PPUSH
44623: CALL_OW 546
44627: ST_TO_ADDR
// if hex [ 1 ] then
44628: LD_VAR 0 15
44632: PUSH
44633: LD_INT 1
44635: ARRAY
44636: IFFALSE 44640
// exit ;
44638: GO 45081
// height := hex [ 2 ] ;
44640: LD_ADDR_VAR 0 13
44644: PUSH
44645: LD_VAR 0 15
44649: PUSH
44650: LD_INT 2
44652: ARRAY
44653: ST_TO_ADDR
// for i = 1 to hexes do
44654: LD_ADDR_VAR 0 7
44658: PUSH
44659: DOUBLE
44660: LD_INT 1
44662: DEC
44663: ST_TO_ADDR
44664: LD_VAR 0 12
44668: PUSH
44669: FOR_TO
44670: IFFALSE 45000
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
44672: LD_VAR 0 12
44676: PUSH
44677: LD_VAR 0 7
44681: ARRAY
44682: PUSH
44683: LD_INT 1
44685: ARRAY
44686: PPUSH
44687: LD_VAR 0 12
44691: PUSH
44692: LD_VAR 0 7
44696: ARRAY
44697: PUSH
44698: LD_INT 2
44700: ARRAY
44701: PPUSH
44702: CALL_OW 488
44706: NOT
44707: PUSH
44708: LD_VAR 0 12
44712: PUSH
44713: LD_VAR 0 7
44717: ARRAY
44718: PUSH
44719: LD_INT 1
44721: ARRAY
44722: PPUSH
44723: LD_VAR 0 12
44727: PUSH
44728: LD_VAR 0 7
44732: ARRAY
44733: PUSH
44734: LD_INT 2
44736: ARRAY
44737: PPUSH
44738: CALL_OW 428
44742: PUSH
44743: LD_INT 0
44745: GREATER
44746: OR
44747: PUSH
44748: LD_VAR 0 12
44752: PUSH
44753: LD_VAR 0 7
44757: ARRAY
44758: PUSH
44759: LD_INT 1
44761: ARRAY
44762: PPUSH
44763: LD_VAR 0 12
44767: PUSH
44768: LD_VAR 0 7
44772: ARRAY
44773: PUSH
44774: LD_INT 2
44776: ARRAY
44777: PPUSH
44778: CALL_OW 351
44782: OR
44783: IFFALSE 44789
// exit ;
44785: POP
44786: POP
44787: GO 45081
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44789: LD_ADDR_VAR 0 8
44793: PUSH
44794: LD_VAR 0 12
44798: PUSH
44799: LD_VAR 0 7
44803: ARRAY
44804: PUSH
44805: LD_INT 1
44807: ARRAY
44808: PPUSH
44809: LD_VAR 0 12
44813: PUSH
44814: LD_VAR 0 7
44818: ARRAY
44819: PUSH
44820: LD_INT 2
44822: ARRAY
44823: PPUSH
44824: CALL_OW 546
44828: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
44829: LD_VAR 0 8
44833: PUSH
44834: LD_INT 1
44836: ARRAY
44837: PUSH
44838: LD_VAR 0 8
44842: PUSH
44843: LD_INT 2
44845: ARRAY
44846: PUSH
44847: LD_VAR 0 13
44851: PUSH
44852: LD_INT 2
44854: PLUS
44855: GREATER
44856: OR
44857: PUSH
44858: LD_VAR 0 8
44862: PUSH
44863: LD_INT 2
44865: ARRAY
44866: PUSH
44867: LD_VAR 0 13
44871: PUSH
44872: LD_INT 2
44874: MINUS
44875: LESS
44876: OR
44877: PUSH
44878: LD_VAR 0 8
44882: PUSH
44883: LD_INT 3
44885: ARRAY
44886: PUSH
44887: LD_INT 0
44889: PUSH
44890: LD_INT 8
44892: PUSH
44893: LD_INT 9
44895: PUSH
44896: LD_INT 10
44898: PUSH
44899: LD_INT 11
44901: PUSH
44902: LD_INT 12
44904: PUSH
44905: LD_INT 13
44907: PUSH
44908: LD_INT 16
44910: PUSH
44911: LD_INT 17
44913: PUSH
44914: LD_INT 18
44916: PUSH
44917: LD_INT 19
44919: PUSH
44920: LD_INT 20
44922: PUSH
44923: LD_INT 21
44925: PUSH
44926: EMPTY
44927: LIST
44928: LIST
44929: LIST
44930: LIST
44931: LIST
44932: LIST
44933: LIST
44934: LIST
44935: LIST
44936: LIST
44937: LIST
44938: LIST
44939: LIST
44940: IN
44941: NOT
44942: OR
44943: PUSH
44944: LD_VAR 0 8
44948: PUSH
44949: LD_INT 5
44951: ARRAY
44952: NOT
44953: OR
44954: PUSH
44955: LD_VAR 0 8
44959: PUSH
44960: LD_INT 6
44962: ARRAY
44963: PUSH
44964: LD_INT 1
44966: PUSH
44967: LD_INT 2
44969: PUSH
44970: LD_INT 7
44972: PUSH
44973: LD_INT 9
44975: PUSH
44976: LD_INT 10
44978: PUSH
44979: LD_INT 11
44981: PUSH
44982: EMPTY
44983: LIST
44984: LIST
44985: LIST
44986: LIST
44987: LIST
44988: LIST
44989: IN
44990: NOT
44991: OR
44992: IFFALSE 44998
// exit ;
44994: POP
44995: POP
44996: GO 45081
// end ;
44998: GO 44669
45000: POP
45001: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
45002: LD_VAR 0 9
45006: PPUSH
45007: LD_VAR 0 3
45011: PPUSH
45012: LD_VAR 0 4
45016: PPUSH
45017: LD_INT 20
45019: PPUSH
45020: CALL 37027 0 4
45024: PUSH
45025: LD_INT 4
45027: ARRAY
45028: IFFALSE 45032
// exit ;
45030: GO 45081
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
45032: LD_VAR 0 2
45036: PUSH
45037: LD_INT 29
45039: PUSH
45040: LD_INT 30
45042: PUSH
45043: EMPTY
45044: LIST
45045: LIST
45046: IN
45047: PUSH
45048: LD_VAR 0 3
45052: PPUSH
45053: LD_VAR 0 4
45057: PPUSH
45058: LD_VAR 0 9
45062: PPUSH
45063: CALL_OW 440
45067: NOT
45068: AND
45069: IFFALSE 45073
// exit ;
45071: GO 45081
// result := true ;
45073: LD_ADDR_VAR 0 6
45077: PUSH
45078: LD_INT 1
45080: ST_TO_ADDR
// end ;
45081: LD_VAR 0 6
45085: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
45086: LD_INT 0
45088: PPUSH
45089: PPUSH
45090: PPUSH
45091: PPUSH
45092: PPUSH
45093: PPUSH
45094: PPUSH
45095: PPUSH
45096: PPUSH
45097: PPUSH
45098: PPUSH
45099: PPUSH
45100: PPUSH
45101: PPUSH
45102: PPUSH
45103: PPUSH
45104: PPUSH
45105: PPUSH
45106: PPUSH
45107: PPUSH
45108: PPUSH
45109: PPUSH
45110: PPUSH
45111: PPUSH
45112: PPUSH
45113: PPUSH
45114: PPUSH
45115: PPUSH
45116: PPUSH
45117: PPUSH
45118: PPUSH
45119: PPUSH
45120: PPUSH
45121: PPUSH
45122: PPUSH
45123: PPUSH
45124: PPUSH
45125: PPUSH
45126: PPUSH
45127: PPUSH
45128: PPUSH
45129: PPUSH
45130: PPUSH
45131: PPUSH
45132: PPUSH
45133: PPUSH
45134: PPUSH
45135: PPUSH
45136: PPUSH
45137: PPUSH
45138: PPUSH
45139: PPUSH
45140: PPUSH
45141: PPUSH
45142: PPUSH
45143: PPUSH
45144: PPUSH
45145: PPUSH
// result = [ ] ;
45146: LD_ADDR_VAR 0 7
45150: PUSH
45151: EMPTY
45152: ST_TO_ADDR
// temp_list = [ ] ;
45153: LD_ADDR_VAR 0 9
45157: PUSH
45158: EMPTY
45159: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
45160: LD_VAR 0 4
45164: PUSH
45165: LD_INT 0
45167: PUSH
45168: LD_INT 1
45170: PUSH
45171: LD_INT 2
45173: PUSH
45174: LD_INT 3
45176: PUSH
45177: LD_INT 4
45179: PUSH
45180: LD_INT 5
45182: PUSH
45183: EMPTY
45184: LIST
45185: LIST
45186: LIST
45187: LIST
45188: LIST
45189: LIST
45190: IN
45191: NOT
45192: PUSH
45193: LD_VAR 0 1
45197: PUSH
45198: LD_INT 0
45200: PUSH
45201: LD_INT 1
45203: PUSH
45204: EMPTY
45205: LIST
45206: LIST
45207: IN
45208: PUSH
45209: LD_VAR 0 5
45213: PUSH
45214: LD_INT 1
45216: PUSH
45217: LD_INT 2
45219: PUSH
45220: LD_INT 3
45222: PUSH
45223: EMPTY
45224: LIST
45225: LIST
45226: LIST
45227: IN
45228: NOT
45229: AND
45230: OR
45231: IFFALSE 45235
// exit ;
45233: GO 63626
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
45235: LD_VAR 0 1
45239: PUSH
45240: LD_INT 6
45242: PUSH
45243: LD_INT 7
45245: PUSH
45246: LD_INT 8
45248: PUSH
45249: LD_INT 13
45251: PUSH
45252: LD_INT 12
45254: PUSH
45255: LD_INT 15
45257: PUSH
45258: LD_INT 11
45260: PUSH
45261: LD_INT 14
45263: PUSH
45264: LD_INT 10
45266: PUSH
45267: EMPTY
45268: LIST
45269: LIST
45270: LIST
45271: LIST
45272: LIST
45273: LIST
45274: LIST
45275: LIST
45276: LIST
45277: IN
45278: IFFALSE 45288
// btype = b_lab ;
45280: LD_ADDR_VAR 0 1
45284: PUSH
45285: LD_INT 6
45287: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
45288: LD_VAR 0 6
45292: PUSH
45293: LD_INT 0
45295: PUSH
45296: LD_INT 1
45298: PUSH
45299: LD_INT 2
45301: PUSH
45302: EMPTY
45303: LIST
45304: LIST
45305: LIST
45306: IN
45307: NOT
45308: PUSH
45309: LD_VAR 0 1
45313: PUSH
45314: LD_INT 0
45316: PUSH
45317: LD_INT 1
45319: PUSH
45320: LD_INT 2
45322: PUSH
45323: LD_INT 3
45325: PUSH
45326: LD_INT 6
45328: PUSH
45329: LD_INT 36
45331: PUSH
45332: LD_INT 4
45334: PUSH
45335: LD_INT 5
45337: PUSH
45338: LD_INT 31
45340: PUSH
45341: LD_INT 32
45343: PUSH
45344: LD_INT 33
45346: PUSH
45347: EMPTY
45348: LIST
45349: LIST
45350: LIST
45351: LIST
45352: LIST
45353: LIST
45354: LIST
45355: LIST
45356: LIST
45357: LIST
45358: LIST
45359: IN
45360: NOT
45361: PUSH
45362: LD_VAR 0 6
45366: PUSH
45367: LD_INT 1
45369: EQUAL
45370: AND
45371: OR
45372: PUSH
45373: LD_VAR 0 1
45377: PUSH
45378: LD_INT 2
45380: PUSH
45381: LD_INT 3
45383: PUSH
45384: EMPTY
45385: LIST
45386: LIST
45387: IN
45388: NOT
45389: PUSH
45390: LD_VAR 0 6
45394: PUSH
45395: LD_INT 2
45397: EQUAL
45398: AND
45399: OR
45400: IFFALSE 45410
// mode = 0 ;
45402: LD_ADDR_VAR 0 6
45406: PUSH
45407: LD_INT 0
45409: ST_TO_ADDR
// case mode of 0 :
45410: LD_VAR 0 6
45414: PUSH
45415: LD_INT 0
45417: DOUBLE
45418: EQUAL
45419: IFTRUE 45423
45421: GO 56876
45423: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45424: LD_ADDR_VAR 0 11
45428: PUSH
45429: LD_INT 0
45431: PUSH
45432: LD_INT 0
45434: PUSH
45435: EMPTY
45436: LIST
45437: LIST
45438: PUSH
45439: LD_INT 0
45441: PUSH
45442: LD_INT 1
45444: NEG
45445: PUSH
45446: EMPTY
45447: LIST
45448: LIST
45449: PUSH
45450: LD_INT 1
45452: PUSH
45453: LD_INT 0
45455: PUSH
45456: EMPTY
45457: LIST
45458: LIST
45459: PUSH
45460: LD_INT 1
45462: PUSH
45463: LD_INT 1
45465: PUSH
45466: EMPTY
45467: LIST
45468: LIST
45469: PUSH
45470: LD_INT 0
45472: PUSH
45473: LD_INT 1
45475: PUSH
45476: EMPTY
45477: LIST
45478: LIST
45479: PUSH
45480: LD_INT 1
45482: NEG
45483: PUSH
45484: LD_INT 0
45486: PUSH
45487: EMPTY
45488: LIST
45489: LIST
45490: PUSH
45491: LD_INT 1
45493: NEG
45494: PUSH
45495: LD_INT 1
45497: NEG
45498: PUSH
45499: EMPTY
45500: LIST
45501: LIST
45502: PUSH
45503: LD_INT 1
45505: NEG
45506: PUSH
45507: LD_INT 2
45509: NEG
45510: PUSH
45511: EMPTY
45512: LIST
45513: LIST
45514: PUSH
45515: LD_INT 0
45517: PUSH
45518: LD_INT 2
45520: NEG
45521: PUSH
45522: EMPTY
45523: LIST
45524: LIST
45525: PUSH
45526: LD_INT 1
45528: PUSH
45529: LD_INT 1
45531: NEG
45532: PUSH
45533: EMPTY
45534: LIST
45535: LIST
45536: PUSH
45537: LD_INT 1
45539: PUSH
45540: LD_INT 2
45542: PUSH
45543: EMPTY
45544: LIST
45545: LIST
45546: PUSH
45547: LD_INT 0
45549: PUSH
45550: LD_INT 2
45552: PUSH
45553: EMPTY
45554: LIST
45555: LIST
45556: PUSH
45557: LD_INT 1
45559: NEG
45560: PUSH
45561: LD_INT 1
45563: PUSH
45564: EMPTY
45565: LIST
45566: LIST
45567: PUSH
45568: LD_INT 1
45570: PUSH
45571: LD_INT 3
45573: PUSH
45574: EMPTY
45575: LIST
45576: LIST
45577: PUSH
45578: LD_INT 0
45580: PUSH
45581: LD_INT 3
45583: PUSH
45584: EMPTY
45585: LIST
45586: LIST
45587: PUSH
45588: LD_INT 1
45590: NEG
45591: PUSH
45592: LD_INT 2
45594: PUSH
45595: EMPTY
45596: LIST
45597: LIST
45598: PUSH
45599: EMPTY
45600: LIST
45601: LIST
45602: LIST
45603: LIST
45604: LIST
45605: LIST
45606: LIST
45607: LIST
45608: LIST
45609: LIST
45610: LIST
45611: LIST
45612: LIST
45613: LIST
45614: LIST
45615: LIST
45616: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45617: LD_ADDR_VAR 0 12
45621: PUSH
45622: LD_INT 0
45624: PUSH
45625: LD_INT 0
45627: PUSH
45628: EMPTY
45629: LIST
45630: LIST
45631: PUSH
45632: LD_INT 0
45634: PUSH
45635: LD_INT 1
45637: NEG
45638: PUSH
45639: EMPTY
45640: LIST
45641: LIST
45642: PUSH
45643: LD_INT 1
45645: PUSH
45646: LD_INT 0
45648: PUSH
45649: EMPTY
45650: LIST
45651: LIST
45652: PUSH
45653: LD_INT 1
45655: PUSH
45656: LD_INT 1
45658: PUSH
45659: EMPTY
45660: LIST
45661: LIST
45662: PUSH
45663: LD_INT 0
45665: PUSH
45666: LD_INT 1
45668: PUSH
45669: EMPTY
45670: LIST
45671: LIST
45672: PUSH
45673: LD_INT 1
45675: NEG
45676: PUSH
45677: LD_INT 0
45679: PUSH
45680: EMPTY
45681: LIST
45682: LIST
45683: PUSH
45684: LD_INT 1
45686: NEG
45687: PUSH
45688: LD_INT 1
45690: NEG
45691: PUSH
45692: EMPTY
45693: LIST
45694: LIST
45695: PUSH
45696: LD_INT 1
45698: PUSH
45699: LD_INT 1
45701: NEG
45702: PUSH
45703: EMPTY
45704: LIST
45705: LIST
45706: PUSH
45707: LD_INT 2
45709: PUSH
45710: LD_INT 0
45712: PUSH
45713: EMPTY
45714: LIST
45715: LIST
45716: PUSH
45717: LD_INT 2
45719: PUSH
45720: LD_INT 1
45722: PUSH
45723: EMPTY
45724: LIST
45725: LIST
45726: PUSH
45727: LD_INT 1
45729: NEG
45730: PUSH
45731: LD_INT 1
45733: PUSH
45734: EMPTY
45735: LIST
45736: LIST
45737: PUSH
45738: LD_INT 2
45740: NEG
45741: PUSH
45742: LD_INT 0
45744: PUSH
45745: EMPTY
45746: LIST
45747: LIST
45748: PUSH
45749: LD_INT 2
45751: NEG
45752: PUSH
45753: LD_INT 1
45755: NEG
45756: PUSH
45757: EMPTY
45758: LIST
45759: LIST
45760: PUSH
45761: LD_INT 2
45763: NEG
45764: PUSH
45765: LD_INT 1
45767: PUSH
45768: EMPTY
45769: LIST
45770: LIST
45771: PUSH
45772: LD_INT 3
45774: NEG
45775: PUSH
45776: LD_INT 0
45778: PUSH
45779: EMPTY
45780: LIST
45781: LIST
45782: PUSH
45783: LD_INT 3
45785: NEG
45786: PUSH
45787: LD_INT 1
45789: NEG
45790: PUSH
45791: EMPTY
45792: LIST
45793: LIST
45794: PUSH
45795: EMPTY
45796: LIST
45797: LIST
45798: LIST
45799: LIST
45800: LIST
45801: LIST
45802: LIST
45803: LIST
45804: LIST
45805: LIST
45806: LIST
45807: LIST
45808: LIST
45809: LIST
45810: LIST
45811: LIST
45812: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45813: LD_ADDR_VAR 0 13
45817: PUSH
45818: LD_INT 0
45820: PUSH
45821: LD_INT 0
45823: PUSH
45824: EMPTY
45825: LIST
45826: LIST
45827: PUSH
45828: LD_INT 0
45830: PUSH
45831: LD_INT 1
45833: NEG
45834: PUSH
45835: EMPTY
45836: LIST
45837: LIST
45838: PUSH
45839: LD_INT 1
45841: PUSH
45842: LD_INT 0
45844: PUSH
45845: EMPTY
45846: LIST
45847: LIST
45848: PUSH
45849: LD_INT 1
45851: PUSH
45852: LD_INT 1
45854: PUSH
45855: EMPTY
45856: LIST
45857: LIST
45858: PUSH
45859: LD_INT 0
45861: PUSH
45862: LD_INT 1
45864: PUSH
45865: EMPTY
45866: LIST
45867: LIST
45868: PUSH
45869: LD_INT 1
45871: NEG
45872: PUSH
45873: LD_INT 0
45875: PUSH
45876: EMPTY
45877: LIST
45878: LIST
45879: PUSH
45880: LD_INT 1
45882: NEG
45883: PUSH
45884: LD_INT 1
45886: NEG
45887: PUSH
45888: EMPTY
45889: LIST
45890: LIST
45891: PUSH
45892: LD_INT 1
45894: NEG
45895: PUSH
45896: LD_INT 2
45898: NEG
45899: PUSH
45900: EMPTY
45901: LIST
45902: LIST
45903: PUSH
45904: LD_INT 2
45906: PUSH
45907: LD_INT 1
45909: PUSH
45910: EMPTY
45911: LIST
45912: LIST
45913: PUSH
45914: LD_INT 2
45916: PUSH
45917: LD_INT 2
45919: PUSH
45920: EMPTY
45921: LIST
45922: LIST
45923: PUSH
45924: LD_INT 1
45926: PUSH
45927: LD_INT 2
45929: PUSH
45930: EMPTY
45931: LIST
45932: LIST
45933: PUSH
45934: LD_INT 2
45936: NEG
45937: PUSH
45938: LD_INT 1
45940: NEG
45941: PUSH
45942: EMPTY
45943: LIST
45944: LIST
45945: PUSH
45946: LD_INT 2
45948: NEG
45949: PUSH
45950: LD_INT 2
45952: NEG
45953: PUSH
45954: EMPTY
45955: LIST
45956: LIST
45957: PUSH
45958: LD_INT 2
45960: NEG
45961: PUSH
45962: LD_INT 3
45964: NEG
45965: PUSH
45966: EMPTY
45967: LIST
45968: LIST
45969: PUSH
45970: LD_INT 3
45972: NEG
45973: PUSH
45974: LD_INT 2
45976: NEG
45977: PUSH
45978: EMPTY
45979: LIST
45980: LIST
45981: PUSH
45982: LD_INT 3
45984: NEG
45985: PUSH
45986: LD_INT 3
45988: NEG
45989: PUSH
45990: EMPTY
45991: LIST
45992: LIST
45993: PUSH
45994: EMPTY
45995: LIST
45996: LIST
45997: LIST
45998: LIST
45999: LIST
46000: LIST
46001: LIST
46002: LIST
46003: LIST
46004: LIST
46005: LIST
46006: LIST
46007: LIST
46008: LIST
46009: LIST
46010: LIST
46011: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46012: LD_ADDR_VAR 0 14
46016: PUSH
46017: LD_INT 0
46019: PUSH
46020: LD_INT 0
46022: PUSH
46023: EMPTY
46024: LIST
46025: LIST
46026: PUSH
46027: LD_INT 0
46029: PUSH
46030: LD_INT 1
46032: NEG
46033: PUSH
46034: EMPTY
46035: LIST
46036: LIST
46037: PUSH
46038: LD_INT 1
46040: PUSH
46041: LD_INT 0
46043: PUSH
46044: EMPTY
46045: LIST
46046: LIST
46047: PUSH
46048: LD_INT 1
46050: PUSH
46051: LD_INT 1
46053: PUSH
46054: EMPTY
46055: LIST
46056: LIST
46057: PUSH
46058: LD_INT 0
46060: PUSH
46061: LD_INT 1
46063: PUSH
46064: EMPTY
46065: LIST
46066: LIST
46067: PUSH
46068: LD_INT 1
46070: NEG
46071: PUSH
46072: LD_INT 0
46074: PUSH
46075: EMPTY
46076: LIST
46077: LIST
46078: PUSH
46079: LD_INT 1
46081: NEG
46082: PUSH
46083: LD_INT 1
46085: NEG
46086: PUSH
46087: EMPTY
46088: LIST
46089: LIST
46090: PUSH
46091: LD_INT 1
46093: NEG
46094: PUSH
46095: LD_INT 2
46097: NEG
46098: PUSH
46099: EMPTY
46100: LIST
46101: LIST
46102: PUSH
46103: LD_INT 0
46105: PUSH
46106: LD_INT 2
46108: NEG
46109: PUSH
46110: EMPTY
46111: LIST
46112: LIST
46113: PUSH
46114: LD_INT 1
46116: PUSH
46117: LD_INT 1
46119: NEG
46120: PUSH
46121: EMPTY
46122: LIST
46123: LIST
46124: PUSH
46125: LD_INT 1
46127: PUSH
46128: LD_INT 2
46130: PUSH
46131: EMPTY
46132: LIST
46133: LIST
46134: PUSH
46135: LD_INT 0
46137: PUSH
46138: LD_INT 2
46140: PUSH
46141: EMPTY
46142: LIST
46143: LIST
46144: PUSH
46145: LD_INT 1
46147: NEG
46148: PUSH
46149: LD_INT 1
46151: PUSH
46152: EMPTY
46153: LIST
46154: LIST
46155: PUSH
46156: LD_INT 1
46158: NEG
46159: PUSH
46160: LD_INT 3
46162: NEG
46163: PUSH
46164: EMPTY
46165: LIST
46166: LIST
46167: PUSH
46168: LD_INT 0
46170: PUSH
46171: LD_INT 3
46173: NEG
46174: PUSH
46175: EMPTY
46176: LIST
46177: LIST
46178: PUSH
46179: LD_INT 1
46181: PUSH
46182: LD_INT 2
46184: NEG
46185: PUSH
46186: EMPTY
46187: LIST
46188: LIST
46189: PUSH
46190: EMPTY
46191: LIST
46192: LIST
46193: LIST
46194: LIST
46195: LIST
46196: LIST
46197: LIST
46198: LIST
46199: LIST
46200: LIST
46201: LIST
46202: LIST
46203: LIST
46204: LIST
46205: LIST
46206: LIST
46207: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46208: LD_ADDR_VAR 0 15
46212: PUSH
46213: LD_INT 0
46215: PUSH
46216: LD_INT 0
46218: PUSH
46219: EMPTY
46220: LIST
46221: LIST
46222: PUSH
46223: LD_INT 0
46225: PUSH
46226: LD_INT 1
46228: NEG
46229: PUSH
46230: EMPTY
46231: LIST
46232: LIST
46233: PUSH
46234: LD_INT 1
46236: PUSH
46237: LD_INT 0
46239: PUSH
46240: EMPTY
46241: LIST
46242: LIST
46243: PUSH
46244: LD_INT 1
46246: PUSH
46247: LD_INT 1
46249: PUSH
46250: EMPTY
46251: LIST
46252: LIST
46253: PUSH
46254: LD_INT 0
46256: PUSH
46257: LD_INT 1
46259: PUSH
46260: EMPTY
46261: LIST
46262: LIST
46263: PUSH
46264: LD_INT 1
46266: NEG
46267: PUSH
46268: LD_INT 0
46270: PUSH
46271: EMPTY
46272: LIST
46273: LIST
46274: PUSH
46275: LD_INT 1
46277: NEG
46278: PUSH
46279: LD_INT 1
46281: NEG
46282: PUSH
46283: EMPTY
46284: LIST
46285: LIST
46286: PUSH
46287: LD_INT 1
46289: PUSH
46290: LD_INT 1
46292: NEG
46293: PUSH
46294: EMPTY
46295: LIST
46296: LIST
46297: PUSH
46298: LD_INT 2
46300: PUSH
46301: LD_INT 0
46303: PUSH
46304: EMPTY
46305: LIST
46306: LIST
46307: PUSH
46308: LD_INT 2
46310: PUSH
46311: LD_INT 1
46313: PUSH
46314: EMPTY
46315: LIST
46316: LIST
46317: PUSH
46318: LD_INT 1
46320: NEG
46321: PUSH
46322: LD_INT 1
46324: PUSH
46325: EMPTY
46326: LIST
46327: LIST
46328: PUSH
46329: LD_INT 2
46331: NEG
46332: PUSH
46333: LD_INT 0
46335: PUSH
46336: EMPTY
46337: LIST
46338: LIST
46339: PUSH
46340: LD_INT 2
46342: NEG
46343: PUSH
46344: LD_INT 1
46346: NEG
46347: PUSH
46348: EMPTY
46349: LIST
46350: LIST
46351: PUSH
46352: LD_INT 2
46354: PUSH
46355: LD_INT 1
46357: NEG
46358: PUSH
46359: EMPTY
46360: LIST
46361: LIST
46362: PUSH
46363: LD_INT 3
46365: PUSH
46366: LD_INT 0
46368: PUSH
46369: EMPTY
46370: LIST
46371: LIST
46372: PUSH
46373: LD_INT 3
46375: PUSH
46376: LD_INT 1
46378: PUSH
46379: EMPTY
46380: LIST
46381: LIST
46382: PUSH
46383: EMPTY
46384: LIST
46385: LIST
46386: LIST
46387: LIST
46388: LIST
46389: LIST
46390: LIST
46391: LIST
46392: LIST
46393: LIST
46394: LIST
46395: LIST
46396: LIST
46397: LIST
46398: LIST
46399: LIST
46400: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46401: LD_ADDR_VAR 0 16
46405: PUSH
46406: LD_INT 0
46408: PUSH
46409: LD_INT 0
46411: PUSH
46412: EMPTY
46413: LIST
46414: LIST
46415: PUSH
46416: LD_INT 0
46418: PUSH
46419: LD_INT 1
46421: NEG
46422: PUSH
46423: EMPTY
46424: LIST
46425: LIST
46426: PUSH
46427: LD_INT 1
46429: PUSH
46430: LD_INT 0
46432: PUSH
46433: EMPTY
46434: LIST
46435: LIST
46436: PUSH
46437: LD_INT 1
46439: PUSH
46440: LD_INT 1
46442: PUSH
46443: EMPTY
46444: LIST
46445: LIST
46446: PUSH
46447: LD_INT 0
46449: PUSH
46450: LD_INT 1
46452: PUSH
46453: EMPTY
46454: LIST
46455: LIST
46456: PUSH
46457: LD_INT 1
46459: NEG
46460: PUSH
46461: LD_INT 0
46463: PUSH
46464: EMPTY
46465: LIST
46466: LIST
46467: PUSH
46468: LD_INT 1
46470: NEG
46471: PUSH
46472: LD_INT 1
46474: NEG
46475: PUSH
46476: EMPTY
46477: LIST
46478: LIST
46479: PUSH
46480: LD_INT 1
46482: NEG
46483: PUSH
46484: LD_INT 2
46486: NEG
46487: PUSH
46488: EMPTY
46489: LIST
46490: LIST
46491: PUSH
46492: LD_INT 2
46494: PUSH
46495: LD_INT 1
46497: PUSH
46498: EMPTY
46499: LIST
46500: LIST
46501: PUSH
46502: LD_INT 2
46504: PUSH
46505: LD_INT 2
46507: PUSH
46508: EMPTY
46509: LIST
46510: LIST
46511: PUSH
46512: LD_INT 1
46514: PUSH
46515: LD_INT 2
46517: PUSH
46518: EMPTY
46519: LIST
46520: LIST
46521: PUSH
46522: LD_INT 2
46524: NEG
46525: PUSH
46526: LD_INT 1
46528: NEG
46529: PUSH
46530: EMPTY
46531: LIST
46532: LIST
46533: PUSH
46534: LD_INT 2
46536: NEG
46537: PUSH
46538: LD_INT 2
46540: NEG
46541: PUSH
46542: EMPTY
46543: LIST
46544: LIST
46545: PUSH
46546: LD_INT 3
46548: PUSH
46549: LD_INT 2
46551: PUSH
46552: EMPTY
46553: LIST
46554: LIST
46555: PUSH
46556: LD_INT 3
46558: PUSH
46559: LD_INT 3
46561: PUSH
46562: EMPTY
46563: LIST
46564: LIST
46565: PUSH
46566: LD_INT 2
46568: PUSH
46569: LD_INT 3
46571: PUSH
46572: EMPTY
46573: LIST
46574: LIST
46575: PUSH
46576: EMPTY
46577: LIST
46578: LIST
46579: LIST
46580: LIST
46581: LIST
46582: LIST
46583: LIST
46584: LIST
46585: LIST
46586: LIST
46587: LIST
46588: LIST
46589: LIST
46590: LIST
46591: LIST
46592: LIST
46593: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46594: LD_ADDR_VAR 0 17
46598: PUSH
46599: LD_INT 0
46601: PUSH
46602: LD_INT 0
46604: PUSH
46605: EMPTY
46606: LIST
46607: LIST
46608: PUSH
46609: LD_INT 0
46611: PUSH
46612: LD_INT 1
46614: NEG
46615: PUSH
46616: EMPTY
46617: LIST
46618: LIST
46619: PUSH
46620: LD_INT 1
46622: PUSH
46623: LD_INT 0
46625: PUSH
46626: EMPTY
46627: LIST
46628: LIST
46629: PUSH
46630: LD_INT 1
46632: PUSH
46633: LD_INT 1
46635: PUSH
46636: EMPTY
46637: LIST
46638: LIST
46639: PUSH
46640: LD_INT 0
46642: PUSH
46643: LD_INT 1
46645: PUSH
46646: EMPTY
46647: LIST
46648: LIST
46649: PUSH
46650: LD_INT 1
46652: NEG
46653: PUSH
46654: LD_INT 0
46656: PUSH
46657: EMPTY
46658: LIST
46659: LIST
46660: PUSH
46661: LD_INT 1
46663: NEG
46664: PUSH
46665: LD_INT 1
46667: NEG
46668: PUSH
46669: EMPTY
46670: LIST
46671: LIST
46672: PUSH
46673: LD_INT 1
46675: NEG
46676: PUSH
46677: LD_INT 2
46679: NEG
46680: PUSH
46681: EMPTY
46682: LIST
46683: LIST
46684: PUSH
46685: LD_INT 0
46687: PUSH
46688: LD_INT 2
46690: NEG
46691: PUSH
46692: EMPTY
46693: LIST
46694: LIST
46695: PUSH
46696: LD_INT 1
46698: PUSH
46699: LD_INT 1
46701: NEG
46702: PUSH
46703: EMPTY
46704: LIST
46705: LIST
46706: PUSH
46707: LD_INT 2
46709: PUSH
46710: LD_INT 0
46712: PUSH
46713: EMPTY
46714: LIST
46715: LIST
46716: PUSH
46717: LD_INT 2
46719: PUSH
46720: LD_INT 1
46722: PUSH
46723: EMPTY
46724: LIST
46725: LIST
46726: PUSH
46727: LD_INT 2
46729: PUSH
46730: LD_INT 2
46732: PUSH
46733: EMPTY
46734: LIST
46735: LIST
46736: PUSH
46737: LD_INT 1
46739: PUSH
46740: LD_INT 2
46742: PUSH
46743: EMPTY
46744: LIST
46745: LIST
46746: PUSH
46747: LD_INT 0
46749: PUSH
46750: LD_INT 2
46752: PUSH
46753: EMPTY
46754: LIST
46755: LIST
46756: PUSH
46757: LD_INT 1
46759: NEG
46760: PUSH
46761: LD_INT 1
46763: PUSH
46764: EMPTY
46765: LIST
46766: LIST
46767: PUSH
46768: LD_INT 2
46770: NEG
46771: PUSH
46772: LD_INT 0
46774: PUSH
46775: EMPTY
46776: LIST
46777: LIST
46778: PUSH
46779: LD_INT 2
46781: NEG
46782: PUSH
46783: LD_INT 1
46785: NEG
46786: PUSH
46787: EMPTY
46788: LIST
46789: LIST
46790: PUSH
46791: LD_INT 2
46793: NEG
46794: PUSH
46795: LD_INT 2
46797: NEG
46798: PUSH
46799: EMPTY
46800: LIST
46801: LIST
46802: PUSH
46803: EMPTY
46804: LIST
46805: LIST
46806: LIST
46807: LIST
46808: LIST
46809: LIST
46810: LIST
46811: LIST
46812: LIST
46813: LIST
46814: LIST
46815: LIST
46816: LIST
46817: LIST
46818: LIST
46819: LIST
46820: LIST
46821: LIST
46822: LIST
46823: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46824: LD_ADDR_VAR 0 18
46828: PUSH
46829: LD_INT 0
46831: PUSH
46832: LD_INT 0
46834: PUSH
46835: EMPTY
46836: LIST
46837: LIST
46838: PUSH
46839: LD_INT 0
46841: PUSH
46842: LD_INT 1
46844: NEG
46845: PUSH
46846: EMPTY
46847: LIST
46848: LIST
46849: PUSH
46850: LD_INT 1
46852: PUSH
46853: LD_INT 0
46855: PUSH
46856: EMPTY
46857: LIST
46858: LIST
46859: PUSH
46860: LD_INT 1
46862: PUSH
46863: LD_INT 1
46865: PUSH
46866: EMPTY
46867: LIST
46868: LIST
46869: PUSH
46870: LD_INT 0
46872: PUSH
46873: LD_INT 1
46875: PUSH
46876: EMPTY
46877: LIST
46878: LIST
46879: PUSH
46880: LD_INT 1
46882: NEG
46883: PUSH
46884: LD_INT 0
46886: PUSH
46887: EMPTY
46888: LIST
46889: LIST
46890: PUSH
46891: LD_INT 1
46893: NEG
46894: PUSH
46895: LD_INT 1
46897: NEG
46898: PUSH
46899: EMPTY
46900: LIST
46901: LIST
46902: PUSH
46903: LD_INT 1
46905: NEG
46906: PUSH
46907: LD_INT 2
46909: NEG
46910: PUSH
46911: EMPTY
46912: LIST
46913: LIST
46914: PUSH
46915: LD_INT 0
46917: PUSH
46918: LD_INT 2
46920: NEG
46921: PUSH
46922: EMPTY
46923: LIST
46924: LIST
46925: PUSH
46926: LD_INT 1
46928: PUSH
46929: LD_INT 1
46931: NEG
46932: PUSH
46933: EMPTY
46934: LIST
46935: LIST
46936: PUSH
46937: LD_INT 2
46939: PUSH
46940: LD_INT 0
46942: PUSH
46943: EMPTY
46944: LIST
46945: LIST
46946: PUSH
46947: LD_INT 2
46949: PUSH
46950: LD_INT 1
46952: PUSH
46953: EMPTY
46954: LIST
46955: LIST
46956: PUSH
46957: LD_INT 2
46959: PUSH
46960: LD_INT 2
46962: PUSH
46963: EMPTY
46964: LIST
46965: LIST
46966: PUSH
46967: LD_INT 1
46969: PUSH
46970: LD_INT 2
46972: PUSH
46973: EMPTY
46974: LIST
46975: LIST
46976: PUSH
46977: LD_INT 0
46979: PUSH
46980: LD_INT 2
46982: PUSH
46983: EMPTY
46984: LIST
46985: LIST
46986: PUSH
46987: LD_INT 1
46989: NEG
46990: PUSH
46991: LD_INT 1
46993: PUSH
46994: EMPTY
46995: LIST
46996: LIST
46997: PUSH
46998: LD_INT 2
47000: NEG
47001: PUSH
47002: LD_INT 0
47004: PUSH
47005: EMPTY
47006: LIST
47007: LIST
47008: PUSH
47009: LD_INT 2
47011: NEG
47012: PUSH
47013: LD_INT 1
47015: NEG
47016: PUSH
47017: EMPTY
47018: LIST
47019: LIST
47020: PUSH
47021: LD_INT 2
47023: NEG
47024: PUSH
47025: LD_INT 2
47027: NEG
47028: PUSH
47029: EMPTY
47030: LIST
47031: LIST
47032: PUSH
47033: EMPTY
47034: LIST
47035: LIST
47036: LIST
47037: LIST
47038: LIST
47039: LIST
47040: LIST
47041: LIST
47042: LIST
47043: LIST
47044: LIST
47045: LIST
47046: LIST
47047: LIST
47048: LIST
47049: LIST
47050: LIST
47051: LIST
47052: LIST
47053: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47054: LD_ADDR_VAR 0 19
47058: PUSH
47059: LD_INT 0
47061: PUSH
47062: LD_INT 0
47064: PUSH
47065: EMPTY
47066: LIST
47067: LIST
47068: PUSH
47069: LD_INT 0
47071: PUSH
47072: LD_INT 1
47074: NEG
47075: PUSH
47076: EMPTY
47077: LIST
47078: LIST
47079: PUSH
47080: LD_INT 1
47082: PUSH
47083: LD_INT 0
47085: PUSH
47086: EMPTY
47087: LIST
47088: LIST
47089: PUSH
47090: LD_INT 1
47092: PUSH
47093: LD_INT 1
47095: PUSH
47096: EMPTY
47097: LIST
47098: LIST
47099: PUSH
47100: LD_INT 0
47102: PUSH
47103: LD_INT 1
47105: PUSH
47106: EMPTY
47107: LIST
47108: LIST
47109: PUSH
47110: LD_INT 1
47112: NEG
47113: PUSH
47114: LD_INT 0
47116: PUSH
47117: EMPTY
47118: LIST
47119: LIST
47120: PUSH
47121: LD_INT 1
47123: NEG
47124: PUSH
47125: LD_INT 1
47127: NEG
47128: PUSH
47129: EMPTY
47130: LIST
47131: LIST
47132: PUSH
47133: LD_INT 1
47135: NEG
47136: PUSH
47137: LD_INT 2
47139: NEG
47140: PUSH
47141: EMPTY
47142: LIST
47143: LIST
47144: PUSH
47145: LD_INT 0
47147: PUSH
47148: LD_INT 2
47150: NEG
47151: PUSH
47152: EMPTY
47153: LIST
47154: LIST
47155: PUSH
47156: LD_INT 1
47158: PUSH
47159: LD_INT 1
47161: NEG
47162: PUSH
47163: EMPTY
47164: LIST
47165: LIST
47166: PUSH
47167: LD_INT 2
47169: PUSH
47170: LD_INT 0
47172: PUSH
47173: EMPTY
47174: LIST
47175: LIST
47176: PUSH
47177: LD_INT 2
47179: PUSH
47180: LD_INT 1
47182: PUSH
47183: EMPTY
47184: LIST
47185: LIST
47186: PUSH
47187: LD_INT 2
47189: PUSH
47190: LD_INT 2
47192: PUSH
47193: EMPTY
47194: LIST
47195: LIST
47196: PUSH
47197: LD_INT 1
47199: PUSH
47200: LD_INT 2
47202: PUSH
47203: EMPTY
47204: LIST
47205: LIST
47206: PUSH
47207: LD_INT 0
47209: PUSH
47210: LD_INT 2
47212: PUSH
47213: EMPTY
47214: LIST
47215: LIST
47216: PUSH
47217: LD_INT 1
47219: NEG
47220: PUSH
47221: LD_INT 1
47223: PUSH
47224: EMPTY
47225: LIST
47226: LIST
47227: PUSH
47228: LD_INT 2
47230: NEG
47231: PUSH
47232: LD_INT 0
47234: PUSH
47235: EMPTY
47236: LIST
47237: LIST
47238: PUSH
47239: LD_INT 2
47241: NEG
47242: PUSH
47243: LD_INT 1
47245: NEG
47246: PUSH
47247: EMPTY
47248: LIST
47249: LIST
47250: PUSH
47251: LD_INT 2
47253: NEG
47254: PUSH
47255: LD_INT 2
47257: NEG
47258: PUSH
47259: EMPTY
47260: LIST
47261: LIST
47262: PUSH
47263: EMPTY
47264: LIST
47265: LIST
47266: LIST
47267: LIST
47268: LIST
47269: LIST
47270: LIST
47271: LIST
47272: LIST
47273: LIST
47274: LIST
47275: LIST
47276: LIST
47277: LIST
47278: LIST
47279: LIST
47280: LIST
47281: LIST
47282: LIST
47283: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47284: LD_ADDR_VAR 0 20
47288: PUSH
47289: LD_INT 0
47291: PUSH
47292: LD_INT 0
47294: PUSH
47295: EMPTY
47296: LIST
47297: LIST
47298: PUSH
47299: LD_INT 0
47301: PUSH
47302: LD_INT 1
47304: NEG
47305: PUSH
47306: EMPTY
47307: LIST
47308: LIST
47309: PUSH
47310: LD_INT 1
47312: PUSH
47313: LD_INT 0
47315: PUSH
47316: EMPTY
47317: LIST
47318: LIST
47319: PUSH
47320: LD_INT 1
47322: PUSH
47323: LD_INT 1
47325: PUSH
47326: EMPTY
47327: LIST
47328: LIST
47329: PUSH
47330: LD_INT 0
47332: PUSH
47333: LD_INT 1
47335: PUSH
47336: EMPTY
47337: LIST
47338: LIST
47339: PUSH
47340: LD_INT 1
47342: NEG
47343: PUSH
47344: LD_INT 0
47346: PUSH
47347: EMPTY
47348: LIST
47349: LIST
47350: PUSH
47351: LD_INT 1
47353: NEG
47354: PUSH
47355: LD_INT 1
47357: NEG
47358: PUSH
47359: EMPTY
47360: LIST
47361: LIST
47362: PUSH
47363: LD_INT 1
47365: NEG
47366: PUSH
47367: LD_INT 2
47369: NEG
47370: PUSH
47371: EMPTY
47372: LIST
47373: LIST
47374: PUSH
47375: LD_INT 0
47377: PUSH
47378: LD_INT 2
47380: NEG
47381: PUSH
47382: EMPTY
47383: LIST
47384: LIST
47385: PUSH
47386: LD_INT 1
47388: PUSH
47389: LD_INT 1
47391: NEG
47392: PUSH
47393: EMPTY
47394: LIST
47395: LIST
47396: PUSH
47397: LD_INT 2
47399: PUSH
47400: LD_INT 0
47402: PUSH
47403: EMPTY
47404: LIST
47405: LIST
47406: PUSH
47407: LD_INT 2
47409: PUSH
47410: LD_INT 1
47412: PUSH
47413: EMPTY
47414: LIST
47415: LIST
47416: PUSH
47417: LD_INT 2
47419: PUSH
47420: LD_INT 2
47422: PUSH
47423: EMPTY
47424: LIST
47425: LIST
47426: PUSH
47427: LD_INT 1
47429: PUSH
47430: LD_INT 2
47432: PUSH
47433: EMPTY
47434: LIST
47435: LIST
47436: PUSH
47437: LD_INT 0
47439: PUSH
47440: LD_INT 2
47442: PUSH
47443: EMPTY
47444: LIST
47445: LIST
47446: PUSH
47447: LD_INT 1
47449: NEG
47450: PUSH
47451: LD_INT 1
47453: PUSH
47454: EMPTY
47455: LIST
47456: LIST
47457: PUSH
47458: LD_INT 2
47460: NEG
47461: PUSH
47462: LD_INT 0
47464: PUSH
47465: EMPTY
47466: LIST
47467: LIST
47468: PUSH
47469: LD_INT 2
47471: NEG
47472: PUSH
47473: LD_INT 1
47475: NEG
47476: PUSH
47477: EMPTY
47478: LIST
47479: LIST
47480: PUSH
47481: LD_INT 2
47483: NEG
47484: PUSH
47485: LD_INT 2
47487: NEG
47488: PUSH
47489: EMPTY
47490: LIST
47491: LIST
47492: PUSH
47493: EMPTY
47494: LIST
47495: LIST
47496: LIST
47497: LIST
47498: LIST
47499: LIST
47500: LIST
47501: LIST
47502: LIST
47503: LIST
47504: LIST
47505: LIST
47506: LIST
47507: LIST
47508: LIST
47509: LIST
47510: LIST
47511: LIST
47512: LIST
47513: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47514: LD_ADDR_VAR 0 21
47518: PUSH
47519: LD_INT 0
47521: PUSH
47522: LD_INT 0
47524: PUSH
47525: EMPTY
47526: LIST
47527: LIST
47528: PUSH
47529: LD_INT 0
47531: PUSH
47532: LD_INT 1
47534: NEG
47535: PUSH
47536: EMPTY
47537: LIST
47538: LIST
47539: PUSH
47540: LD_INT 1
47542: PUSH
47543: LD_INT 0
47545: PUSH
47546: EMPTY
47547: LIST
47548: LIST
47549: PUSH
47550: LD_INT 1
47552: PUSH
47553: LD_INT 1
47555: PUSH
47556: EMPTY
47557: LIST
47558: LIST
47559: PUSH
47560: LD_INT 0
47562: PUSH
47563: LD_INT 1
47565: PUSH
47566: EMPTY
47567: LIST
47568: LIST
47569: PUSH
47570: LD_INT 1
47572: NEG
47573: PUSH
47574: LD_INT 0
47576: PUSH
47577: EMPTY
47578: LIST
47579: LIST
47580: PUSH
47581: LD_INT 1
47583: NEG
47584: PUSH
47585: LD_INT 1
47587: NEG
47588: PUSH
47589: EMPTY
47590: LIST
47591: LIST
47592: PUSH
47593: LD_INT 1
47595: NEG
47596: PUSH
47597: LD_INT 2
47599: NEG
47600: PUSH
47601: EMPTY
47602: LIST
47603: LIST
47604: PUSH
47605: LD_INT 0
47607: PUSH
47608: LD_INT 2
47610: NEG
47611: PUSH
47612: EMPTY
47613: LIST
47614: LIST
47615: PUSH
47616: LD_INT 1
47618: PUSH
47619: LD_INT 1
47621: NEG
47622: PUSH
47623: EMPTY
47624: LIST
47625: LIST
47626: PUSH
47627: LD_INT 2
47629: PUSH
47630: LD_INT 0
47632: PUSH
47633: EMPTY
47634: LIST
47635: LIST
47636: PUSH
47637: LD_INT 2
47639: PUSH
47640: LD_INT 1
47642: PUSH
47643: EMPTY
47644: LIST
47645: LIST
47646: PUSH
47647: LD_INT 2
47649: PUSH
47650: LD_INT 2
47652: PUSH
47653: EMPTY
47654: LIST
47655: LIST
47656: PUSH
47657: LD_INT 1
47659: PUSH
47660: LD_INT 2
47662: PUSH
47663: EMPTY
47664: LIST
47665: LIST
47666: PUSH
47667: LD_INT 0
47669: PUSH
47670: LD_INT 2
47672: PUSH
47673: EMPTY
47674: LIST
47675: LIST
47676: PUSH
47677: LD_INT 1
47679: NEG
47680: PUSH
47681: LD_INT 1
47683: PUSH
47684: EMPTY
47685: LIST
47686: LIST
47687: PUSH
47688: LD_INT 2
47690: NEG
47691: PUSH
47692: LD_INT 0
47694: PUSH
47695: EMPTY
47696: LIST
47697: LIST
47698: PUSH
47699: LD_INT 2
47701: NEG
47702: PUSH
47703: LD_INT 1
47705: NEG
47706: PUSH
47707: EMPTY
47708: LIST
47709: LIST
47710: PUSH
47711: LD_INT 2
47713: NEG
47714: PUSH
47715: LD_INT 2
47717: NEG
47718: PUSH
47719: EMPTY
47720: LIST
47721: LIST
47722: PUSH
47723: EMPTY
47724: LIST
47725: LIST
47726: LIST
47727: LIST
47728: LIST
47729: LIST
47730: LIST
47731: LIST
47732: LIST
47733: LIST
47734: LIST
47735: LIST
47736: LIST
47737: LIST
47738: LIST
47739: LIST
47740: LIST
47741: LIST
47742: LIST
47743: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47744: LD_ADDR_VAR 0 22
47748: PUSH
47749: LD_INT 0
47751: PUSH
47752: LD_INT 0
47754: PUSH
47755: EMPTY
47756: LIST
47757: LIST
47758: PUSH
47759: LD_INT 0
47761: PUSH
47762: LD_INT 1
47764: NEG
47765: PUSH
47766: EMPTY
47767: LIST
47768: LIST
47769: PUSH
47770: LD_INT 1
47772: PUSH
47773: LD_INT 0
47775: PUSH
47776: EMPTY
47777: LIST
47778: LIST
47779: PUSH
47780: LD_INT 1
47782: PUSH
47783: LD_INT 1
47785: PUSH
47786: EMPTY
47787: LIST
47788: LIST
47789: PUSH
47790: LD_INT 0
47792: PUSH
47793: LD_INT 1
47795: PUSH
47796: EMPTY
47797: LIST
47798: LIST
47799: PUSH
47800: LD_INT 1
47802: NEG
47803: PUSH
47804: LD_INT 0
47806: PUSH
47807: EMPTY
47808: LIST
47809: LIST
47810: PUSH
47811: LD_INT 1
47813: NEG
47814: PUSH
47815: LD_INT 1
47817: NEG
47818: PUSH
47819: EMPTY
47820: LIST
47821: LIST
47822: PUSH
47823: LD_INT 1
47825: NEG
47826: PUSH
47827: LD_INT 2
47829: NEG
47830: PUSH
47831: EMPTY
47832: LIST
47833: LIST
47834: PUSH
47835: LD_INT 0
47837: PUSH
47838: LD_INT 2
47840: NEG
47841: PUSH
47842: EMPTY
47843: LIST
47844: LIST
47845: PUSH
47846: LD_INT 1
47848: PUSH
47849: LD_INT 1
47851: NEG
47852: PUSH
47853: EMPTY
47854: LIST
47855: LIST
47856: PUSH
47857: LD_INT 2
47859: PUSH
47860: LD_INT 0
47862: PUSH
47863: EMPTY
47864: LIST
47865: LIST
47866: PUSH
47867: LD_INT 2
47869: PUSH
47870: LD_INT 1
47872: PUSH
47873: EMPTY
47874: LIST
47875: LIST
47876: PUSH
47877: LD_INT 2
47879: PUSH
47880: LD_INT 2
47882: PUSH
47883: EMPTY
47884: LIST
47885: LIST
47886: PUSH
47887: LD_INT 1
47889: PUSH
47890: LD_INT 2
47892: PUSH
47893: EMPTY
47894: LIST
47895: LIST
47896: PUSH
47897: LD_INT 0
47899: PUSH
47900: LD_INT 2
47902: PUSH
47903: EMPTY
47904: LIST
47905: LIST
47906: PUSH
47907: LD_INT 1
47909: NEG
47910: PUSH
47911: LD_INT 1
47913: PUSH
47914: EMPTY
47915: LIST
47916: LIST
47917: PUSH
47918: LD_INT 2
47920: NEG
47921: PUSH
47922: LD_INT 0
47924: PUSH
47925: EMPTY
47926: LIST
47927: LIST
47928: PUSH
47929: LD_INT 2
47931: NEG
47932: PUSH
47933: LD_INT 1
47935: NEG
47936: PUSH
47937: EMPTY
47938: LIST
47939: LIST
47940: PUSH
47941: LD_INT 2
47943: NEG
47944: PUSH
47945: LD_INT 2
47947: NEG
47948: PUSH
47949: EMPTY
47950: LIST
47951: LIST
47952: PUSH
47953: EMPTY
47954: LIST
47955: LIST
47956: LIST
47957: LIST
47958: LIST
47959: LIST
47960: LIST
47961: LIST
47962: LIST
47963: LIST
47964: LIST
47965: LIST
47966: LIST
47967: LIST
47968: LIST
47969: LIST
47970: LIST
47971: LIST
47972: LIST
47973: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
47974: LD_ADDR_VAR 0 23
47978: PUSH
47979: LD_INT 0
47981: PUSH
47982: LD_INT 0
47984: PUSH
47985: EMPTY
47986: LIST
47987: LIST
47988: PUSH
47989: LD_INT 0
47991: PUSH
47992: LD_INT 1
47994: NEG
47995: PUSH
47996: EMPTY
47997: LIST
47998: LIST
47999: PUSH
48000: LD_INT 1
48002: PUSH
48003: LD_INT 0
48005: PUSH
48006: EMPTY
48007: LIST
48008: LIST
48009: PUSH
48010: LD_INT 1
48012: PUSH
48013: LD_INT 1
48015: PUSH
48016: EMPTY
48017: LIST
48018: LIST
48019: PUSH
48020: LD_INT 0
48022: PUSH
48023: LD_INT 1
48025: PUSH
48026: EMPTY
48027: LIST
48028: LIST
48029: PUSH
48030: LD_INT 1
48032: NEG
48033: PUSH
48034: LD_INT 0
48036: PUSH
48037: EMPTY
48038: LIST
48039: LIST
48040: PUSH
48041: LD_INT 1
48043: NEG
48044: PUSH
48045: LD_INT 1
48047: NEG
48048: PUSH
48049: EMPTY
48050: LIST
48051: LIST
48052: PUSH
48053: LD_INT 1
48055: NEG
48056: PUSH
48057: LD_INT 2
48059: NEG
48060: PUSH
48061: EMPTY
48062: LIST
48063: LIST
48064: PUSH
48065: LD_INT 0
48067: PUSH
48068: LD_INT 2
48070: NEG
48071: PUSH
48072: EMPTY
48073: LIST
48074: LIST
48075: PUSH
48076: LD_INT 1
48078: PUSH
48079: LD_INT 1
48081: NEG
48082: PUSH
48083: EMPTY
48084: LIST
48085: LIST
48086: PUSH
48087: LD_INT 2
48089: PUSH
48090: LD_INT 0
48092: PUSH
48093: EMPTY
48094: LIST
48095: LIST
48096: PUSH
48097: LD_INT 2
48099: PUSH
48100: LD_INT 1
48102: PUSH
48103: EMPTY
48104: LIST
48105: LIST
48106: PUSH
48107: LD_INT 2
48109: PUSH
48110: LD_INT 2
48112: PUSH
48113: EMPTY
48114: LIST
48115: LIST
48116: PUSH
48117: LD_INT 1
48119: PUSH
48120: LD_INT 2
48122: PUSH
48123: EMPTY
48124: LIST
48125: LIST
48126: PUSH
48127: LD_INT 0
48129: PUSH
48130: LD_INT 2
48132: PUSH
48133: EMPTY
48134: LIST
48135: LIST
48136: PUSH
48137: LD_INT 1
48139: NEG
48140: PUSH
48141: LD_INT 1
48143: PUSH
48144: EMPTY
48145: LIST
48146: LIST
48147: PUSH
48148: LD_INT 2
48150: NEG
48151: PUSH
48152: LD_INT 0
48154: PUSH
48155: EMPTY
48156: LIST
48157: LIST
48158: PUSH
48159: LD_INT 2
48161: NEG
48162: PUSH
48163: LD_INT 1
48165: NEG
48166: PUSH
48167: EMPTY
48168: LIST
48169: LIST
48170: PUSH
48171: LD_INT 2
48173: NEG
48174: PUSH
48175: LD_INT 2
48177: NEG
48178: PUSH
48179: EMPTY
48180: LIST
48181: LIST
48182: PUSH
48183: LD_INT 2
48185: NEG
48186: PUSH
48187: LD_INT 3
48189: NEG
48190: PUSH
48191: EMPTY
48192: LIST
48193: LIST
48194: PUSH
48195: LD_INT 1
48197: NEG
48198: PUSH
48199: LD_INT 3
48201: NEG
48202: PUSH
48203: EMPTY
48204: LIST
48205: LIST
48206: PUSH
48207: LD_INT 1
48209: PUSH
48210: LD_INT 2
48212: NEG
48213: PUSH
48214: EMPTY
48215: LIST
48216: LIST
48217: PUSH
48218: LD_INT 2
48220: PUSH
48221: LD_INT 1
48223: NEG
48224: PUSH
48225: EMPTY
48226: LIST
48227: LIST
48228: PUSH
48229: EMPTY
48230: LIST
48231: LIST
48232: LIST
48233: LIST
48234: LIST
48235: LIST
48236: LIST
48237: LIST
48238: LIST
48239: LIST
48240: LIST
48241: LIST
48242: LIST
48243: LIST
48244: LIST
48245: LIST
48246: LIST
48247: LIST
48248: LIST
48249: LIST
48250: LIST
48251: LIST
48252: LIST
48253: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
48254: LD_ADDR_VAR 0 24
48258: PUSH
48259: LD_INT 0
48261: PUSH
48262: LD_INT 0
48264: PUSH
48265: EMPTY
48266: LIST
48267: LIST
48268: PUSH
48269: LD_INT 0
48271: PUSH
48272: LD_INT 1
48274: NEG
48275: PUSH
48276: EMPTY
48277: LIST
48278: LIST
48279: PUSH
48280: LD_INT 1
48282: PUSH
48283: LD_INT 0
48285: PUSH
48286: EMPTY
48287: LIST
48288: LIST
48289: PUSH
48290: LD_INT 1
48292: PUSH
48293: LD_INT 1
48295: PUSH
48296: EMPTY
48297: LIST
48298: LIST
48299: PUSH
48300: LD_INT 0
48302: PUSH
48303: LD_INT 1
48305: PUSH
48306: EMPTY
48307: LIST
48308: LIST
48309: PUSH
48310: LD_INT 1
48312: NEG
48313: PUSH
48314: LD_INT 0
48316: PUSH
48317: EMPTY
48318: LIST
48319: LIST
48320: PUSH
48321: LD_INT 1
48323: NEG
48324: PUSH
48325: LD_INT 1
48327: NEG
48328: PUSH
48329: EMPTY
48330: LIST
48331: LIST
48332: PUSH
48333: LD_INT 1
48335: NEG
48336: PUSH
48337: LD_INT 2
48339: NEG
48340: PUSH
48341: EMPTY
48342: LIST
48343: LIST
48344: PUSH
48345: LD_INT 0
48347: PUSH
48348: LD_INT 2
48350: NEG
48351: PUSH
48352: EMPTY
48353: LIST
48354: LIST
48355: PUSH
48356: LD_INT 1
48358: PUSH
48359: LD_INT 1
48361: NEG
48362: PUSH
48363: EMPTY
48364: LIST
48365: LIST
48366: PUSH
48367: LD_INT 2
48369: PUSH
48370: LD_INT 0
48372: PUSH
48373: EMPTY
48374: LIST
48375: LIST
48376: PUSH
48377: LD_INT 2
48379: PUSH
48380: LD_INT 1
48382: PUSH
48383: EMPTY
48384: LIST
48385: LIST
48386: PUSH
48387: LD_INT 2
48389: PUSH
48390: LD_INT 2
48392: PUSH
48393: EMPTY
48394: LIST
48395: LIST
48396: PUSH
48397: LD_INT 1
48399: PUSH
48400: LD_INT 2
48402: PUSH
48403: EMPTY
48404: LIST
48405: LIST
48406: PUSH
48407: LD_INT 0
48409: PUSH
48410: LD_INT 2
48412: PUSH
48413: EMPTY
48414: LIST
48415: LIST
48416: PUSH
48417: LD_INT 1
48419: NEG
48420: PUSH
48421: LD_INT 1
48423: PUSH
48424: EMPTY
48425: LIST
48426: LIST
48427: PUSH
48428: LD_INT 2
48430: NEG
48431: PUSH
48432: LD_INT 0
48434: PUSH
48435: EMPTY
48436: LIST
48437: LIST
48438: PUSH
48439: LD_INT 2
48441: NEG
48442: PUSH
48443: LD_INT 1
48445: NEG
48446: PUSH
48447: EMPTY
48448: LIST
48449: LIST
48450: PUSH
48451: LD_INT 2
48453: NEG
48454: PUSH
48455: LD_INT 2
48457: NEG
48458: PUSH
48459: EMPTY
48460: LIST
48461: LIST
48462: PUSH
48463: LD_INT 1
48465: PUSH
48466: LD_INT 2
48468: NEG
48469: PUSH
48470: EMPTY
48471: LIST
48472: LIST
48473: PUSH
48474: LD_INT 2
48476: PUSH
48477: LD_INT 1
48479: NEG
48480: PUSH
48481: EMPTY
48482: LIST
48483: LIST
48484: PUSH
48485: LD_INT 3
48487: PUSH
48488: LD_INT 1
48490: PUSH
48491: EMPTY
48492: LIST
48493: LIST
48494: PUSH
48495: LD_INT 3
48497: PUSH
48498: LD_INT 2
48500: PUSH
48501: EMPTY
48502: LIST
48503: LIST
48504: PUSH
48505: EMPTY
48506: LIST
48507: LIST
48508: LIST
48509: LIST
48510: LIST
48511: LIST
48512: LIST
48513: LIST
48514: LIST
48515: LIST
48516: LIST
48517: LIST
48518: LIST
48519: LIST
48520: LIST
48521: LIST
48522: LIST
48523: LIST
48524: LIST
48525: LIST
48526: LIST
48527: LIST
48528: LIST
48529: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
48530: LD_ADDR_VAR 0 25
48534: PUSH
48535: LD_INT 0
48537: PUSH
48538: LD_INT 0
48540: PUSH
48541: EMPTY
48542: LIST
48543: LIST
48544: PUSH
48545: LD_INT 0
48547: PUSH
48548: LD_INT 1
48550: NEG
48551: PUSH
48552: EMPTY
48553: LIST
48554: LIST
48555: PUSH
48556: LD_INT 1
48558: PUSH
48559: LD_INT 0
48561: PUSH
48562: EMPTY
48563: LIST
48564: LIST
48565: PUSH
48566: LD_INT 1
48568: PUSH
48569: LD_INT 1
48571: PUSH
48572: EMPTY
48573: LIST
48574: LIST
48575: PUSH
48576: LD_INT 0
48578: PUSH
48579: LD_INT 1
48581: PUSH
48582: EMPTY
48583: LIST
48584: LIST
48585: PUSH
48586: LD_INT 1
48588: NEG
48589: PUSH
48590: LD_INT 0
48592: PUSH
48593: EMPTY
48594: LIST
48595: LIST
48596: PUSH
48597: LD_INT 1
48599: NEG
48600: PUSH
48601: LD_INT 1
48603: NEG
48604: PUSH
48605: EMPTY
48606: LIST
48607: LIST
48608: PUSH
48609: LD_INT 1
48611: NEG
48612: PUSH
48613: LD_INT 2
48615: NEG
48616: PUSH
48617: EMPTY
48618: LIST
48619: LIST
48620: PUSH
48621: LD_INT 0
48623: PUSH
48624: LD_INT 2
48626: NEG
48627: PUSH
48628: EMPTY
48629: LIST
48630: LIST
48631: PUSH
48632: LD_INT 1
48634: PUSH
48635: LD_INT 1
48637: NEG
48638: PUSH
48639: EMPTY
48640: LIST
48641: LIST
48642: PUSH
48643: LD_INT 2
48645: PUSH
48646: LD_INT 0
48648: PUSH
48649: EMPTY
48650: LIST
48651: LIST
48652: PUSH
48653: LD_INT 2
48655: PUSH
48656: LD_INT 1
48658: PUSH
48659: EMPTY
48660: LIST
48661: LIST
48662: PUSH
48663: LD_INT 2
48665: PUSH
48666: LD_INT 2
48668: PUSH
48669: EMPTY
48670: LIST
48671: LIST
48672: PUSH
48673: LD_INT 1
48675: PUSH
48676: LD_INT 2
48678: PUSH
48679: EMPTY
48680: LIST
48681: LIST
48682: PUSH
48683: LD_INT 0
48685: PUSH
48686: LD_INT 2
48688: PUSH
48689: EMPTY
48690: LIST
48691: LIST
48692: PUSH
48693: LD_INT 1
48695: NEG
48696: PUSH
48697: LD_INT 1
48699: PUSH
48700: EMPTY
48701: LIST
48702: LIST
48703: PUSH
48704: LD_INT 2
48706: NEG
48707: PUSH
48708: LD_INT 0
48710: PUSH
48711: EMPTY
48712: LIST
48713: LIST
48714: PUSH
48715: LD_INT 2
48717: NEG
48718: PUSH
48719: LD_INT 1
48721: NEG
48722: PUSH
48723: EMPTY
48724: LIST
48725: LIST
48726: PUSH
48727: LD_INT 2
48729: NEG
48730: PUSH
48731: LD_INT 2
48733: NEG
48734: PUSH
48735: EMPTY
48736: LIST
48737: LIST
48738: PUSH
48739: LD_INT 3
48741: PUSH
48742: LD_INT 1
48744: PUSH
48745: EMPTY
48746: LIST
48747: LIST
48748: PUSH
48749: LD_INT 3
48751: PUSH
48752: LD_INT 2
48754: PUSH
48755: EMPTY
48756: LIST
48757: LIST
48758: PUSH
48759: LD_INT 2
48761: PUSH
48762: LD_INT 3
48764: PUSH
48765: EMPTY
48766: LIST
48767: LIST
48768: PUSH
48769: LD_INT 1
48771: PUSH
48772: LD_INT 3
48774: PUSH
48775: EMPTY
48776: LIST
48777: LIST
48778: PUSH
48779: EMPTY
48780: LIST
48781: LIST
48782: LIST
48783: LIST
48784: LIST
48785: LIST
48786: LIST
48787: LIST
48788: LIST
48789: LIST
48790: LIST
48791: LIST
48792: LIST
48793: LIST
48794: LIST
48795: LIST
48796: LIST
48797: LIST
48798: LIST
48799: LIST
48800: LIST
48801: LIST
48802: LIST
48803: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
48804: LD_ADDR_VAR 0 26
48808: PUSH
48809: LD_INT 0
48811: PUSH
48812: LD_INT 0
48814: PUSH
48815: EMPTY
48816: LIST
48817: LIST
48818: PUSH
48819: LD_INT 0
48821: PUSH
48822: LD_INT 1
48824: NEG
48825: PUSH
48826: EMPTY
48827: LIST
48828: LIST
48829: PUSH
48830: LD_INT 1
48832: PUSH
48833: LD_INT 0
48835: PUSH
48836: EMPTY
48837: LIST
48838: LIST
48839: PUSH
48840: LD_INT 1
48842: PUSH
48843: LD_INT 1
48845: PUSH
48846: EMPTY
48847: LIST
48848: LIST
48849: PUSH
48850: LD_INT 0
48852: PUSH
48853: LD_INT 1
48855: PUSH
48856: EMPTY
48857: LIST
48858: LIST
48859: PUSH
48860: LD_INT 1
48862: NEG
48863: PUSH
48864: LD_INT 0
48866: PUSH
48867: EMPTY
48868: LIST
48869: LIST
48870: PUSH
48871: LD_INT 1
48873: NEG
48874: PUSH
48875: LD_INT 1
48877: NEG
48878: PUSH
48879: EMPTY
48880: LIST
48881: LIST
48882: PUSH
48883: LD_INT 1
48885: NEG
48886: PUSH
48887: LD_INT 2
48889: NEG
48890: PUSH
48891: EMPTY
48892: LIST
48893: LIST
48894: PUSH
48895: LD_INT 0
48897: PUSH
48898: LD_INT 2
48900: NEG
48901: PUSH
48902: EMPTY
48903: LIST
48904: LIST
48905: PUSH
48906: LD_INT 1
48908: PUSH
48909: LD_INT 1
48911: NEG
48912: PUSH
48913: EMPTY
48914: LIST
48915: LIST
48916: PUSH
48917: LD_INT 2
48919: PUSH
48920: LD_INT 0
48922: PUSH
48923: EMPTY
48924: LIST
48925: LIST
48926: PUSH
48927: LD_INT 2
48929: PUSH
48930: LD_INT 1
48932: PUSH
48933: EMPTY
48934: LIST
48935: LIST
48936: PUSH
48937: LD_INT 2
48939: PUSH
48940: LD_INT 2
48942: PUSH
48943: EMPTY
48944: LIST
48945: LIST
48946: PUSH
48947: LD_INT 1
48949: PUSH
48950: LD_INT 2
48952: PUSH
48953: EMPTY
48954: LIST
48955: LIST
48956: PUSH
48957: LD_INT 0
48959: PUSH
48960: LD_INT 2
48962: PUSH
48963: EMPTY
48964: LIST
48965: LIST
48966: PUSH
48967: LD_INT 1
48969: NEG
48970: PUSH
48971: LD_INT 1
48973: PUSH
48974: EMPTY
48975: LIST
48976: LIST
48977: PUSH
48978: LD_INT 2
48980: NEG
48981: PUSH
48982: LD_INT 0
48984: PUSH
48985: EMPTY
48986: LIST
48987: LIST
48988: PUSH
48989: LD_INT 2
48991: NEG
48992: PUSH
48993: LD_INT 1
48995: NEG
48996: PUSH
48997: EMPTY
48998: LIST
48999: LIST
49000: PUSH
49001: LD_INT 2
49003: NEG
49004: PUSH
49005: LD_INT 2
49007: NEG
49008: PUSH
49009: EMPTY
49010: LIST
49011: LIST
49012: PUSH
49013: LD_INT 2
49015: PUSH
49016: LD_INT 3
49018: PUSH
49019: EMPTY
49020: LIST
49021: LIST
49022: PUSH
49023: LD_INT 1
49025: PUSH
49026: LD_INT 3
49028: PUSH
49029: EMPTY
49030: LIST
49031: LIST
49032: PUSH
49033: LD_INT 1
49035: NEG
49036: PUSH
49037: LD_INT 2
49039: PUSH
49040: EMPTY
49041: LIST
49042: LIST
49043: PUSH
49044: LD_INT 2
49046: NEG
49047: PUSH
49048: LD_INT 1
49050: PUSH
49051: EMPTY
49052: LIST
49053: LIST
49054: PUSH
49055: EMPTY
49056: LIST
49057: LIST
49058: LIST
49059: LIST
49060: LIST
49061: LIST
49062: LIST
49063: LIST
49064: LIST
49065: LIST
49066: LIST
49067: LIST
49068: LIST
49069: LIST
49070: LIST
49071: LIST
49072: LIST
49073: LIST
49074: LIST
49075: LIST
49076: LIST
49077: LIST
49078: LIST
49079: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49080: LD_ADDR_VAR 0 27
49084: PUSH
49085: LD_INT 0
49087: PUSH
49088: LD_INT 0
49090: PUSH
49091: EMPTY
49092: LIST
49093: LIST
49094: PUSH
49095: LD_INT 0
49097: PUSH
49098: LD_INT 1
49100: NEG
49101: PUSH
49102: EMPTY
49103: LIST
49104: LIST
49105: PUSH
49106: LD_INT 1
49108: PUSH
49109: LD_INT 0
49111: PUSH
49112: EMPTY
49113: LIST
49114: LIST
49115: PUSH
49116: LD_INT 1
49118: PUSH
49119: LD_INT 1
49121: PUSH
49122: EMPTY
49123: LIST
49124: LIST
49125: PUSH
49126: LD_INT 0
49128: PUSH
49129: LD_INT 1
49131: PUSH
49132: EMPTY
49133: LIST
49134: LIST
49135: PUSH
49136: LD_INT 1
49138: NEG
49139: PUSH
49140: LD_INT 0
49142: PUSH
49143: EMPTY
49144: LIST
49145: LIST
49146: PUSH
49147: LD_INT 1
49149: NEG
49150: PUSH
49151: LD_INT 1
49153: NEG
49154: PUSH
49155: EMPTY
49156: LIST
49157: LIST
49158: PUSH
49159: LD_INT 1
49161: NEG
49162: PUSH
49163: LD_INT 2
49165: NEG
49166: PUSH
49167: EMPTY
49168: LIST
49169: LIST
49170: PUSH
49171: LD_INT 0
49173: PUSH
49174: LD_INT 2
49176: NEG
49177: PUSH
49178: EMPTY
49179: LIST
49180: LIST
49181: PUSH
49182: LD_INT 1
49184: PUSH
49185: LD_INT 1
49187: NEG
49188: PUSH
49189: EMPTY
49190: LIST
49191: LIST
49192: PUSH
49193: LD_INT 2
49195: PUSH
49196: LD_INT 0
49198: PUSH
49199: EMPTY
49200: LIST
49201: LIST
49202: PUSH
49203: LD_INT 2
49205: PUSH
49206: LD_INT 1
49208: PUSH
49209: EMPTY
49210: LIST
49211: LIST
49212: PUSH
49213: LD_INT 2
49215: PUSH
49216: LD_INT 2
49218: PUSH
49219: EMPTY
49220: LIST
49221: LIST
49222: PUSH
49223: LD_INT 1
49225: PUSH
49226: LD_INT 2
49228: PUSH
49229: EMPTY
49230: LIST
49231: LIST
49232: PUSH
49233: LD_INT 0
49235: PUSH
49236: LD_INT 2
49238: PUSH
49239: EMPTY
49240: LIST
49241: LIST
49242: PUSH
49243: LD_INT 1
49245: NEG
49246: PUSH
49247: LD_INT 1
49249: PUSH
49250: EMPTY
49251: LIST
49252: LIST
49253: PUSH
49254: LD_INT 2
49256: NEG
49257: PUSH
49258: LD_INT 0
49260: PUSH
49261: EMPTY
49262: LIST
49263: LIST
49264: PUSH
49265: LD_INT 2
49267: NEG
49268: PUSH
49269: LD_INT 1
49271: NEG
49272: PUSH
49273: EMPTY
49274: LIST
49275: LIST
49276: PUSH
49277: LD_INT 2
49279: NEG
49280: PUSH
49281: LD_INT 2
49283: NEG
49284: PUSH
49285: EMPTY
49286: LIST
49287: LIST
49288: PUSH
49289: LD_INT 1
49291: NEG
49292: PUSH
49293: LD_INT 2
49295: PUSH
49296: EMPTY
49297: LIST
49298: LIST
49299: PUSH
49300: LD_INT 2
49302: NEG
49303: PUSH
49304: LD_INT 1
49306: PUSH
49307: EMPTY
49308: LIST
49309: LIST
49310: PUSH
49311: LD_INT 3
49313: NEG
49314: PUSH
49315: LD_INT 1
49317: NEG
49318: PUSH
49319: EMPTY
49320: LIST
49321: LIST
49322: PUSH
49323: LD_INT 3
49325: NEG
49326: PUSH
49327: LD_INT 2
49329: NEG
49330: PUSH
49331: EMPTY
49332: LIST
49333: LIST
49334: PUSH
49335: EMPTY
49336: LIST
49337: LIST
49338: LIST
49339: LIST
49340: LIST
49341: LIST
49342: LIST
49343: LIST
49344: LIST
49345: LIST
49346: LIST
49347: LIST
49348: LIST
49349: LIST
49350: LIST
49351: LIST
49352: LIST
49353: LIST
49354: LIST
49355: LIST
49356: LIST
49357: LIST
49358: LIST
49359: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49360: LD_ADDR_VAR 0 28
49364: PUSH
49365: LD_INT 0
49367: PUSH
49368: LD_INT 0
49370: PUSH
49371: EMPTY
49372: LIST
49373: LIST
49374: PUSH
49375: LD_INT 0
49377: PUSH
49378: LD_INT 1
49380: NEG
49381: PUSH
49382: EMPTY
49383: LIST
49384: LIST
49385: PUSH
49386: LD_INT 1
49388: PUSH
49389: LD_INT 0
49391: PUSH
49392: EMPTY
49393: LIST
49394: LIST
49395: PUSH
49396: LD_INT 1
49398: PUSH
49399: LD_INT 1
49401: PUSH
49402: EMPTY
49403: LIST
49404: LIST
49405: PUSH
49406: LD_INT 0
49408: PUSH
49409: LD_INT 1
49411: PUSH
49412: EMPTY
49413: LIST
49414: LIST
49415: PUSH
49416: LD_INT 1
49418: NEG
49419: PUSH
49420: LD_INT 0
49422: PUSH
49423: EMPTY
49424: LIST
49425: LIST
49426: PUSH
49427: LD_INT 1
49429: NEG
49430: PUSH
49431: LD_INT 1
49433: NEG
49434: PUSH
49435: EMPTY
49436: LIST
49437: LIST
49438: PUSH
49439: LD_INT 1
49441: NEG
49442: PUSH
49443: LD_INT 2
49445: NEG
49446: PUSH
49447: EMPTY
49448: LIST
49449: LIST
49450: PUSH
49451: LD_INT 0
49453: PUSH
49454: LD_INT 2
49456: NEG
49457: PUSH
49458: EMPTY
49459: LIST
49460: LIST
49461: PUSH
49462: LD_INT 1
49464: PUSH
49465: LD_INT 1
49467: NEG
49468: PUSH
49469: EMPTY
49470: LIST
49471: LIST
49472: PUSH
49473: LD_INT 2
49475: PUSH
49476: LD_INT 0
49478: PUSH
49479: EMPTY
49480: LIST
49481: LIST
49482: PUSH
49483: LD_INT 2
49485: PUSH
49486: LD_INT 1
49488: PUSH
49489: EMPTY
49490: LIST
49491: LIST
49492: PUSH
49493: LD_INT 2
49495: PUSH
49496: LD_INT 2
49498: PUSH
49499: EMPTY
49500: LIST
49501: LIST
49502: PUSH
49503: LD_INT 1
49505: PUSH
49506: LD_INT 2
49508: PUSH
49509: EMPTY
49510: LIST
49511: LIST
49512: PUSH
49513: LD_INT 0
49515: PUSH
49516: LD_INT 2
49518: PUSH
49519: EMPTY
49520: LIST
49521: LIST
49522: PUSH
49523: LD_INT 1
49525: NEG
49526: PUSH
49527: LD_INT 1
49529: PUSH
49530: EMPTY
49531: LIST
49532: LIST
49533: PUSH
49534: LD_INT 2
49536: NEG
49537: PUSH
49538: LD_INT 0
49540: PUSH
49541: EMPTY
49542: LIST
49543: LIST
49544: PUSH
49545: LD_INT 2
49547: NEG
49548: PUSH
49549: LD_INT 1
49551: NEG
49552: PUSH
49553: EMPTY
49554: LIST
49555: LIST
49556: PUSH
49557: LD_INT 2
49559: NEG
49560: PUSH
49561: LD_INT 2
49563: NEG
49564: PUSH
49565: EMPTY
49566: LIST
49567: LIST
49568: PUSH
49569: LD_INT 2
49571: NEG
49572: PUSH
49573: LD_INT 3
49575: NEG
49576: PUSH
49577: EMPTY
49578: LIST
49579: LIST
49580: PUSH
49581: LD_INT 1
49583: NEG
49584: PUSH
49585: LD_INT 3
49587: NEG
49588: PUSH
49589: EMPTY
49590: LIST
49591: LIST
49592: PUSH
49593: LD_INT 3
49595: NEG
49596: PUSH
49597: LD_INT 1
49599: NEG
49600: PUSH
49601: EMPTY
49602: LIST
49603: LIST
49604: PUSH
49605: LD_INT 3
49607: NEG
49608: PUSH
49609: LD_INT 2
49611: NEG
49612: PUSH
49613: EMPTY
49614: LIST
49615: LIST
49616: PUSH
49617: EMPTY
49618: LIST
49619: LIST
49620: LIST
49621: LIST
49622: LIST
49623: LIST
49624: LIST
49625: LIST
49626: LIST
49627: LIST
49628: LIST
49629: LIST
49630: LIST
49631: LIST
49632: LIST
49633: LIST
49634: LIST
49635: LIST
49636: LIST
49637: LIST
49638: LIST
49639: LIST
49640: LIST
49641: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49642: LD_ADDR_VAR 0 29
49646: PUSH
49647: LD_INT 0
49649: PUSH
49650: LD_INT 0
49652: PUSH
49653: EMPTY
49654: LIST
49655: LIST
49656: PUSH
49657: LD_INT 0
49659: PUSH
49660: LD_INT 1
49662: NEG
49663: PUSH
49664: EMPTY
49665: LIST
49666: LIST
49667: PUSH
49668: LD_INT 1
49670: PUSH
49671: LD_INT 0
49673: PUSH
49674: EMPTY
49675: LIST
49676: LIST
49677: PUSH
49678: LD_INT 1
49680: PUSH
49681: LD_INT 1
49683: PUSH
49684: EMPTY
49685: LIST
49686: LIST
49687: PUSH
49688: LD_INT 0
49690: PUSH
49691: LD_INT 1
49693: PUSH
49694: EMPTY
49695: LIST
49696: LIST
49697: PUSH
49698: LD_INT 1
49700: NEG
49701: PUSH
49702: LD_INT 0
49704: PUSH
49705: EMPTY
49706: LIST
49707: LIST
49708: PUSH
49709: LD_INT 1
49711: NEG
49712: PUSH
49713: LD_INT 1
49715: NEG
49716: PUSH
49717: EMPTY
49718: LIST
49719: LIST
49720: PUSH
49721: LD_INT 1
49723: NEG
49724: PUSH
49725: LD_INT 2
49727: NEG
49728: PUSH
49729: EMPTY
49730: LIST
49731: LIST
49732: PUSH
49733: LD_INT 0
49735: PUSH
49736: LD_INT 2
49738: NEG
49739: PUSH
49740: EMPTY
49741: LIST
49742: LIST
49743: PUSH
49744: LD_INT 1
49746: PUSH
49747: LD_INT 1
49749: NEG
49750: PUSH
49751: EMPTY
49752: LIST
49753: LIST
49754: PUSH
49755: LD_INT 2
49757: PUSH
49758: LD_INT 0
49760: PUSH
49761: EMPTY
49762: LIST
49763: LIST
49764: PUSH
49765: LD_INT 2
49767: PUSH
49768: LD_INT 1
49770: PUSH
49771: EMPTY
49772: LIST
49773: LIST
49774: PUSH
49775: LD_INT 1
49777: PUSH
49778: LD_INT 2
49780: PUSH
49781: EMPTY
49782: LIST
49783: LIST
49784: PUSH
49785: LD_INT 0
49787: PUSH
49788: LD_INT 2
49790: PUSH
49791: EMPTY
49792: LIST
49793: LIST
49794: PUSH
49795: LD_INT 1
49797: NEG
49798: PUSH
49799: LD_INT 1
49801: PUSH
49802: EMPTY
49803: LIST
49804: LIST
49805: PUSH
49806: LD_INT 2
49808: NEG
49809: PUSH
49810: LD_INT 1
49812: NEG
49813: PUSH
49814: EMPTY
49815: LIST
49816: LIST
49817: PUSH
49818: LD_INT 2
49820: NEG
49821: PUSH
49822: LD_INT 2
49824: NEG
49825: PUSH
49826: EMPTY
49827: LIST
49828: LIST
49829: PUSH
49830: LD_INT 2
49832: NEG
49833: PUSH
49834: LD_INT 3
49836: NEG
49837: PUSH
49838: EMPTY
49839: LIST
49840: LIST
49841: PUSH
49842: LD_INT 2
49844: PUSH
49845: LD_INT 1
49847: NEG
49848: PUSH
49849: EMPTY
49850: LIST
49851: LIST
49852: PUSH
49853: LD_INT 3
49855: PUSH
49856: LD_INT 1
49858: PUSH
49859: EMPTY
49860: LIST
49861: LIST
49862: PUSH
49863: LD_INT 1
49865: PUSH
49866: LD_INT 3
49868: PUSH
49869: EMPTY
49870: LIST
49871: LIST
49872: PUSH
49873: LD_INT 1
49875: NEG
49876: PUSH
49877: LD_INT 2
49879: PUSH
49880: EMPTY
49881: LIST
49882: LIST
49883: PUSH
49884: LD_INT 3
49886: NEG
49887: PUSH
49888: LD_INT 2
49890: NEG
49891: PUSH
49892: EMPTY
49893: LIST
49894: LIST
49895: PUSH
49896: EMPTY
49897: LIST
49898: LIST
49899: LIST
49900: LIST
49901: LIST
49902: LIST
49903: LIST
49904: LIST
49905: LIST
49906: LIST
49907: LIST
49908: LIST
49909: LIST
49910: LIST
49911: LIST
49912: LIST
49913: LIST
49914: LIST
49915: LIST
49916: LIST
49917: LIST
49918: LIST
49919: LIST
49920: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49921: LD_ADDR_VAR 0 30
49925: PUSH
49926: LD_INT 0
49928: PUSH
49929: LD_INT 0
49931: PUSH
49932: EMPTY
49933: LIST
49934: LIST
49935: PUSH
49936: LD_INT 0
49938: PUSH
49939: LD_INT 1
49941: NEG
49942: PUSH
49943: EMPTY
49944: LIST
49945: LIST
49946: PUSH
49947: LD_INT 1
49949: PUSH
49950: LD_INT 0
49952: PUSH
49953: EMPTY
49954: LIST
49955: LIST
49956: PUSH
49957: LD_INT 1
49959: PUSH
49960: LD_INT 1
49962: PUSH
49963: EMPTY
49964: LIST
49965: LIST
49966: PUSH
49967: LD_INT 0
49969: PUSH
49970: LD_INT 1
49972: PUSH
49973: EMPTY
49974: LIST
49975: LIST
49976: PUSH
49977: LD_INT 1
49979: NEG
49980: PUSH
49981: LD_INT 0
49983: PUSH
49984: EMPTY
49985: LIST
49986: LIST
49987: PUSH
49988: LD_INT 1
49990: NEG
49991: PUSH
49992: LD_INT 1
49994: NEG
49995: PUSH
49996: EMPTY
49997: LIST
49998: LIST
49999: PUSH
50000: LD_INT 1
50002: NEG
50003: PUSH
50004: LD_INT 2
50006: NEG
50007: PUSH
50008: EMPTY
50009: LIST
50010: LIST
50011: PUSH
50012: LD_INT 0
50014: PUSH
50015: LD_INT 2
50017: NEG
50018: PUSH
50019: EMPTY
50020: LIST
50021: LIST
50022: PUSH
50023: LD_INT 1
50025: PUSH
50026: LD_INT 1
50028: NEG
50029: PUSH
50030: EMPTY
50031: LIST
50032: LIST
50033: PUSH
50034: LD_INT 2
50036: PUSH
50037: LD_INT 0
50039: PUSH
50040: EMPTY
50041: LIST
50042: LIST
50043: PUSH
50044: LD_INT 2
50046: PUSH
50047: LD_INT 1
50049: PUSH
50050: EMPTY
50051: LIST
50052: LIST
50053: PUSH
50054: LD_INT 2
50056: PUSH
50057: LD_INT 2
50059: PUSH
50060: EMPTY
50061: LIST
50062: LIST
50063: PUSH
50064: LD_INT 1
50066: PUSH
50067: LD_INT 2
50069: PUSH
50070: EMPTY
50071: LIST
50072: LIST
50073: PUSH
50074: LD_INT 1
50076: NEG
50077: PUSH
50078: LD_INT 1
50080: PUSH
50081: EMPTY
50082: LIST
50083: LIST
50084: PUSH
50085: LD_INT 2
50087: NEG
50088: PUSH
50089: LD_INT 0
50091: PUSH
50092: EMPTY
50093: LIST
50094: LIST
50095: PUSH
50096: LD_INT 2
50098: NEG
50099: PUSH
50100: LD_INT 1
50102: NEG
50103: PUSH
50104: EMPTY
50105: LIST
50106: LIST
50107: PUSH
50108: LD_INT 1
50110: NEG
50111: PUSH
50112: LD_INT 3
50114: NEG
50115: PUSH
50116: EMPTY
50117: LIST
50118: LIST
50119: PUSH
50120: LD_INT 1
50122: PUSH
50123: LD_INT 2
50125: NEG
50126: PUSH
50127: EMPTY
50128: LIST
50129: LIST
50130: PUSH
50131: LD_INT 3
50133: PUSH
50134: LD_INT 2
50136: PUSH
50137: EMPTY
50138: LIST
50139: LIST
50140: PUSH
50141: LD_INT 2
50143: PUSH
50144: LD_INT 3
50146: PUSH
50147: EMPTY
50148: LIST
50149: LIST
50150: PUSH
50151: LD_INT 2
50153: NEG
50154: PUSH
50155: LD_INT 1
50157: PUSH
50158: EMPTY
50159: LIST
50160: LIST
50161: PUSH
50162: LD_INT 3
50164: NEG
50165: PUSH
50166: LD_INT 1
50168: NEG
50169: PUSH
50170: EMPTY
50171: LIST
50172: LIST
50173: PUSH
50174: EMPTY
50175: LIST
50176: LIST
50177: LIST
50178: LIST
50179: LIST
50180: LIST
50181: LIST
50182: LIST
50183: LIST
50184: LIST
50185: LIST
50186: LIST
50187: LIST
50188: LIST
50189: LIST
50190: LIST
50191: LIST
50192: LIST
50193: LIST
50194: LIST
50195: LIST
50196: LIST
50197: LIST
50198: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50199: LD_ADDR_VAR 0 31
50203: PUSH
50204: LD_INT 0
50206: PUSH
50207: LD_INT 0
50209: PUSH
50210: EMPTY
50211: LIST
50212: LIST
50213: PUSH
50214: LD_INT 0
50216: PUSH
50217: LD_INT 1
50219: NEG
50220: PUSH
50221: EMPTY
50222: LIST
50223: LIST
50224: PUSH
50225: LD_INT 1
50227: PUSH
50228: LD_INT 0
50230: PUSH
50231: EMPTY
50232: LIST
50233: LIST
50234: PUSH
50235: LD_INT 1
50237: PUSH
50238: LD_INT 1
50240: PUSH
50241: EMPTY
50242: LIST
50243: LIST
50244: PUSH
50245: LD_INT 0
50247: PUSH
50248: LD_INT 1
50250: PUSH
50251: EMPTY
50252: LIST
50253: LIST
50254: PUSH
50255: LD_INT 1
50257: NEG
50258: PUSH
50259: LD_INT 0
50261: PUSH
50262: EMPTY
50263: LIST
50264: LIST
50265: PUSH
50266: LD_INT 1
50268: NEG
50269: PUSH
50270: LD_INT 1
50272: NEG
50273: PUSH
50274: EMPTY
50275: LIST
50276: LIST
50277: PUSH
50278: LD_INT 1
50280: NEG
50281: PUSH
50282: LD_INT 2
50284: NEG
50285: PUSH
50286: EMPTY
50287: LIST
50288: LIST
50289: PUSH
50290: LD_INT 1
50292: PUSH
50293: LD_INT 1
50295: NEG
50296: PUSH
50297: EMPTY
50298: LIST
50299: LIST
50300: PUSH
50301: LD_INT 2
50303: PUSH
50304: LD_INT 0
50306: PUSH
50307: EMPTY
50308: LIST
50309: LIST
50310: PUSH
50311: LD_INT 2
50313: PUSH
50314: LD_INT 1
50316: PUSH
50317: EMPTY
50318: LIST
50319: LIST
50320: PUSH
50321: LD_INT 2
50323: PUSH
50324: LD_INT 2
50326: PUSH
50327: EMPTY
50328: LIST
50329: LIST
50330: PUSH
50331: LD_INT 1
50333: PUSH
50334: LD_INT 2
50336: PUSH
50337: EMPTY
50338: LIST
50339: LIST
50340: PUSH
50341: LD_INT 0
50343: PUSH
50344: LD_INT 2
50346: PUSH
50347: EMPTY
50348: LIST
50349: LIST
50350: PUSH
50351: LD_INT 1
50353: NEG
50354: PUSH
50355: LD_INT 1
50357: PUSH
50358: EMPTY
50359: LIST
50360: LIST
50361: PUSH
50362: LD_INT 2
50364: NEG
50365: PUSH
50366: LD_INT 1
50368: NEG
50369: PUSH
50370: EMPTY
50371: LIST
50372: LIST
50373: PUSH
50374: LD_INT 2
50376: NEG
50377: PUSH
50378: LD_INT 2
50380: NEG
50381: PUSH
50382: EMPTY
50383: LIST
50384: LIST
50385: PUSH
50386: LD_INT 2
50388: NEG
50389: PUSH
50390: LD_INT 3
50392: NEG
50393: PUSH
50394: EMPTY
50395: LIST
50396: LIST
50397: PUSH
50398: LD_INT 2
50400: PUSH
50401: LD_INT 1
50403: NEG
50404: PUSH
50405: EMPTY
50406: LIST
50407: LIST
50408: PUSH
50409: LD_INT 3
50411: PUSH
50412: LD_INT 1
50414: PUSH
50415: EMPTY
50416: LIST
50417: LIST
50418: PUSH
50419: LD_INT 1
50421: PUSH
50422: LD_INT 3
50424: PUSH
50425: EMPTY
50426: LIST
50427: LIST
50428: PUSH
50429: LD_INT 1
50431: NEG
50432: PUSH
50433: LD_INT 2
50435: PUSH
50436: EMPTY
50437: LIST
50438: LIST
50439: PUSH
50440: LD_INT 3
50442: NEG
50443: PUSH
50444: LD_INT 2
50446: NEG
50447: PUSH
50448: EMPTY
50449: LIST
50450: LIST
50451: PUSH
50452: EMPTY
50453: LIST
50454: LIST
50455: LIST
50456: LIST
50457: LIST
50458: LIST
50459: LIST
50460: LIST
50461: LIST
50462: LIST
50463: LIST
50464: LIST
50465: LIST
50466: LIST
50467: LIST
50468: LIST
50469: LIST
50470: LIST
50471: LIST
50472: LIST
50473: LIST
50474: LIST
50475: LIST
50476: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50477: LD_ADDR_VAR 0 32
50481: PUSH
50482: LD_INT 0
50484: PUSH
50485: LD_INT 0
50487: PUSH
50488: EMPTY
50489: LIST
50490: LIST
50491: PUSH
50492: LD_INT 0
50494: PUSH
50495: LD_INT 1
50497: NEG
50498: PUSH
50499: EMPTY
50500: LIST
50501: LIST
50502: PUSH
50503: LD_INT 1
50505: PUSH
50506: LD_INT 0
50508: PUSH
50509: EMPTY
50510: LIST
50511: LIST
50512: PUSH
50513: LD_INT 1
50515: PUSH
50516: LD_INT 1
50518: PUSH
50519: EMPTY
50520: LIST
50521: LIST
50522: PUSH
50523: LD_INT 0
50525: PUSH
50526: LD_INT 1
50528: PUSH
50529: EMPTY
50530: LIST
50531: LIST
50532: PUSH
50533: LD_INT 1
50535: NEG
50536: PUSH
50537: LD_INT 0
50539: PUSH
50540: EMPTY
50541: LIST
50542: LIST
50543: PUSH
50544: LD_INT 1
50546: NEG
50547: PUSH
50548: LD_INT 1
50550: NEG
50551: PUSH
50552: EMPTY
50553: LIST
50554: LIST
50555: PUSH
50556: LD_INT 1
50558: NEG
50559: PUSH
50560: LD_INT 2
50562: NEG
50563: PUSH
50564: EMPTY
50565: LIST
50566: LIST
50567: PUSH
50568: LD_INT 0
50570: PUSH
50571: LD_INT 2
50573: NEG
50574: PUSH
50575: EMPTY
50576: LIST
50577: LIST
50578: PUSH
50579: LD_INT 1
50581: PUSH
50582: LD_INT 1
50584: NEG
50585: PUSH
50586: EMPTY
50587: LIST
50588: LIST
50589: PUSH
50590: LD_INT 2
50592: PUSH
50593: LD_INT 1
50595: PUSH
50596: EMPTY
50597: LIST
50598: LIST
50599: PUSH
50600: LD_INT 2
50602: PUSH
50603: LD_INT 2
50605: PUSH
50606: EMPTY
50607: LIST
50608: LIST
50609: PUSH
50610: LD_INT 1
50612: PUSH
50613: LD_INT 2
50615: PUSH
50616: EMPTY
50617: LIST
50618: LIST
50619: PUSH
50620: LD_INT 0
50622: PUSH
50623: LD_INT 2
50625: PUSH
50626: EMPTY
50627: LIST
50628: LIST
50629: PUSH
50630: LD_INT 1
50632: NEG
50633: PUSH
50634: LD_INT 1
50636: PUSH
50637: EMPTY
50638: LIST
50639: LIST
50640: PUSH
50641: LD_INT 2
50643: NEG
50644: PUSH
50645: LD_INT 0
50647: PUSH
50648: EMPTY
50649: LIST
50650: LIST
50651: PUSH
50652: LD_INT 2
50654: NEG
50655: PUSH
50656: LD_INT 1
50658: NEG
50659: PUSH
50660: EMPTY
50661: LIST
50662: LIST
50663: PUSH
50664: LD_INT 1
50666: NEG
50667: PUSH
50668: LD_INT 3
50670: NEG
50671: PUSH
50672: EMPTY
50673: LIST
50674: LIST
50675: PUSH
50676: LD_INT 1
50678: PUSH
50679: LD_INT 2
50681: NEG
50682: PUSH
50683: EMPTY
50684: LIST
50685: LIST
50686: PUSH
50687: LD_INT 3
50689: PUSH
50690: LD_INT 2
50692: PUSH
50693: EMPTY
50694: LIST
50695: LIST
50696: PUSH
50697: LD_INT 2
50699: PUSH
50700: LD_INT 3
50702: PUSH
50703: EMPTY
50704: LIST
50705: LIST
50706: PUSH
50707: LD_INT 2
50709: NEG
50710: PUSH
50711: LD_INT 1
50713: PUSH
50714: EMPTY
50715: LIST
50716: LIST
50717: PUSH
50718: LD_INT 3
50720: NEG
50721: PUSH
50722: LD_INT 1
50724: NEG
50725: PUSH
50726: EMPTY
50727: LIST
50728: LIST
50729: PUSH
50730: EMPTY
50731: LIST
50732: LIST
50733: LIST
50734: LIST
50735: LIST
50736: LIST
50737: LIST
50738: LIST
50739: LIST
50740: LIST
50741: LIST
50742: LIST
50743: LIST
50744: LIST
50745: LIST
50746: LIST
50747: LIST
50748: LIST
50749: LIST
50750: LIST
50751: LIST
50752: LIST
50753: LIST
50754: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50755: LD_ADDR_VAR 0 33
50759: PUSH
50760: LD_INT 0
50762: PUSH
50763: LD_INT 0
50765: PUSH
50766: EMPTY
50767: LIST
50768: LIST
50769: PUSH
50770: LD_INT 0
50772: PUSH
50773: LD_INT 1
50775: NEG
50776: PUSH
50777: EMPTY
50778: LIST
50779: LIST
50780: PUSH
50781: LD_INT 1
50783: PUSH
50784: LD_INT 0
50786: PUSH
50787: EMPTY
50788: LIST
50789: LIST
50790: PUSH
50791: LD_INT 1
50793: PUSH
50794: LD_INT 1
50796: PUSH
50797: EMPTY
50798: LIST
50799: LIST
50800: PUSH
50801: LD_INT 0
50803: PUSH
50804: LD_INT 1
50806: PUSH
50807: EMPTY
50808: LIST
50809: LIST
50810: PUSH
50811: LD_INT 1
50813: NEG
50814: PUSH
50815: LD_INT 0
50817: PUSH
50818: EMPTY
50819: LIST
50820: LIST
50821: PUSH
50822: LD_INT 1
50824: NEG
50825: PUSH
50826: LD_INT 1
50828: NEG
50829: PUSH
50830: EMPTY
50831: LIST
50832: LIST
50833: PUSH
50834: LD_INT 1
50836: NEG
50837: PUSH
50838: LD_INT 2
50840: NEG
50841: PUSH
50842: EMPTY
50843: LIST
50844: LIST
50845: PUSH
50846: LD_INT 1
50848: PUSH
50849: LD_INT 1
50851: NEG
50852: PUSH
50853: EMPTY
50854: LIST
50855: LIST
50856: PUSH
50857: LD_INT 2
50859: PUSH
50860: LD_INT 0
50862: PUSH
50863: EMPTY
50864: LIST
50865: LIST
50866: PUSH
50867: LD_INT 2
50869: PUSH
50870: LD_INT 1
50872: PUSH
50873: EMPTY
50874: LIST
50875: LIST
50876: PUSH
50877: LD_INT 1
50879: PUSH
50880: LD_INT 2
50882: PUSH
50883: EMPTY
50884: LIST
50885: LIST
50886: PUSH
50887: LD_INT 0
50889: PUSH
50890: LD_INT 2
50892: PUSH
50893: EMPTY
50894: LIST
50895: LIST
50896: PUSH
50897: LD_INT 1
50899: NEG
50900: PUSH
50901: LD_INT 1
50903: PUSH
50904: EMPTY
50905: LIST
50906: LIST
50907: PUSH
50908: LD_INT 2
50910: NEG
50911: PUSH
50912: LD_INT 0
50914: PUSH
50915: EMPTY
50916: LIST
50917: LIST
50918: PUSH
50919: LD_INT 2
50921: NEG
50922: PUSH
50923: LD_INT 1
50925: NEG
50926: PUSH
50927: EMPTY
50928: LIST
50929: LIST
50930: PUSH
50931: LD_INT 2
50933: NEG
50934: PUSH
50935: LD_INT 2
50937: NEG
50938: PUSH
50939: EMPTY
50940: LIST
50941: LIST
50942: PUSH
50943: LD_INT 2
50945: NEG
50946: PUSH
50947: LD_INT 3
50949: NEG
50950: PUSH
50951: EMPTY
50952: LIST
50953: LIST
50954: PUSH
50955: LD_INT 2
50957: PUSH
50958: LD_INT 1
50960: NEG
50961: PUSH
50962: EMPTY
50963: LIST
50964: LIST
50965: PUSH
50966: LD_INT 3
50968: PUSH
50969: LD_INT 1
50971: PUSH
50972: EMPTY
50973: LIST
50974: LIST
50975: PUSH
50976: LD_INT 1
50978: PUSH
50979: LD_INT 3
50981: PUSH
50982: EMPTY
50983: LIST
50984: LIST
50985: PUSH
50986: LD_INT 1
50988: NEG
50989: PUSH
50990: LD_INT 2
50992: PUSH
50993: EMPTY
50994: LIST
50995: LIST
50996: PUSH
50997: LD_INT 3
50999: NEG
51000: PUSH
51001: LD_INT 2
51003: NEG
51004: PUSH
51005: EMPTY
51006: LIST
51007: LIST
51008: PUSH
51009: EMPTY
51010: LIST
51011: LIST
51012: LIST
51013: LIST
51014: LIST
51015: LIST
51016: LIST
51017: LIST
51018: LIST
51019: LIST
51020: LIST
51021: LIST
51022: LIST
51023: LIST
51024: LIST
51025: LIST
51026: LIST
51027: LIST
51028: LIST
51029: LIST
51030: LIST
51031: LIST
51032: LIST
51033: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51034: LD_ADDR_VAR 0 34
51038: PUSH
51039: LD_INT 0
51041: PUSH
51042: LD_INT 0
51044: PUSH
51045: EMPTY
51046: LIST
51047: LIST
51048: PUSH
51049: LD_INT 0
51051: PUSH
51052: LD_INT 1
51054: NEG
51055: PUSH
51056: EMPTY
51057: LIST
51058: LIST
51059: PUSH
51060: LD_INT 1
51062: PUSH
51063: LD_INT 0
51065: PUSH
51066: EMPTY
51067: LIST
51068: LIST
51069: PUSH
51070: LD_INT 1
51072: PUSH
51073: LD_INT 1
51075: PUSH
51076: EMPTY
51077: LIST
51078: LIST
51079: PUSH
51080: LD_INT 0
51082: PUSH
51083: LD_INT 1
51085: PUSH
51086: EMPTY
51087: LIST
51088: LIST
51089: PUSH
51090: LD_INT 1
51092: NEG
51093: PUSH
51094: LD_INT 0
51096: PUSH
51097: EMPTY
51098: LIST
51099: LIST
51100: PUSH
51101: LD_INT 1
51103: NEG
51104: PUSH
51105: LD_INT 1
51107: NEG
51108: PUSH
51109: EMPTY
51110: LIST
51111: LIST
51112: PUSH
51113: LD_INT 1
51115: NEG
51116: PUSH
51117: LD_INT 2
51119: NEG
51120: PUSH
51121: EMPTY
51122: LIST
51123: LIST
51124: PUSH
51125: LD_INT 0
51127: PUSH
51128: LD_INT 2
51130: NEG
51131: PUSH
51132: EMPTY
51133: LIST
51134: LIST
51135: PUSH
51136: LD_INT 1
51138: PUSH
51139: LD_INT 1
51141: NEG
51142: PUSH
51143: EMPTY
51144: LIST
51145: LIST
51146: PUSH
51147: LD_INT 2
51149: PUSH
51150: LD_INT 1
51152: PUSH
51153: EMPTY
51154: LIST
51155: LIST
51156: PUSH
51157: LD_INT 2
51159: PUSH
51160: LD_INT 2
51162: PUSH
51163: EMPTY
51164: LIST
51165: LIST
51166: PUSH
51167: LD_INT 1
51169: PUSH
51170: LD_INT 2
51172: PUSH
51173: EMPTY
51174: LIST
51175: LIST
51176: PUSH
51177: LD_INT 1
51179: NEG
51180: PUSH
51181: LD_INT 1
51183: PUSH
51184: EMPTY
51185: LIST
51186: LIST
51187: PUSH
51188: LD_INT 2
51190: NEG
51191: PUSH
51192: LD_INT 0
51194: PUSH
51195: EMPTY
51196: LIST
51197: LIST
51198: PUSH
51199: LD_INT 2
51201: NEG
51202: PUSH
51203: LD_INT 1
51205: NEG
51206: PUSH
51207: EMPTY
51208: LIST
51209: LIST
51210: PUSH
51211: LD_INT 2
51213: NEG
51214: PUSH
51215: LD_INT 2
51217: NEG
51218: PUSH
51219: EMPTY
51220: LIST
51221: LIST
51222: PUSH
51223: LD_INT 1
51225: NEG
51226: PUSH
51227: LD_INT 3
51229: NEG
51230: PUSH
51231: EMPTY
51232: LIST
51233: LIST
51234: PUSH
51235: LD_INT 1
51237: PUSH
51238: LD_INT 2
51240: NEG
51241: PUSH
51242: EMPTY
51243: LIST
51244: LIST
51245: PUSH
51246: LD_INT 3
51248: PUSH
51249: LD_INT 2
51251: PUSH
51252: EMPTY
51253: LIST
51254: LIST
51255: PUSH
51256: LD_INT 2
51258: PUSH
51259: LD_INT 3
51261: PUSH
51262: EMPTY
51263: LIST
51264: LIST
51265: PUSH
51266: LD_INT 2
51268: NEG
51269: PUSH
51270: LD_INT 1
51272: PUSH
51273: EMPTY
51274: LIST
51275: LIST
51276: PUSH
51277: LD_INT 3
51279: NEG
51280: PUSH
51281: LD_INT 1
51283: NEG
51284: PUSH
51285: EMPTY
51286: LIST
51287: LIST
51288: PUSH
51289: EMPTY
51290: LIST
51291: LIST
51292: LIST
51293: LIST
51294: LIST
51295: LIST
51296: LIST
51297: LIST
51298: LIST
51299: LIST
51300: LIST
51301: LIST
51302: LIST
51303: LIST
51304: LIST
51305: LIST
51306: LIST
51307: LIST
51308: LIST
51309: LIST
51310: LIST
51311: LIST
51312: LIST
51313: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51314: LD_ADDR_VAR 0 35
51318: PUSH
51319: LD_INT 0
51321: PUSH
51322: LD_INT 0
51324: PUSH
51325: EMPTY
51326: LIST
51327: LIST
51328: PUSH
51329: LD_INT 0
51331: PUSH
51332: LD_INT 1
51334: NEG
51335: PUSH
51336: EMPTY
51337: LIST
51338: LIST
51339: PUSH
51340: LD_INT 1
51342: PUSH
51343: LD_INT 0
51345: PUSH
51346: EMPTY
51347: LIST
51348: LIST
51349: PUSH
51350: LD_INT 1
51352: PUSH
51353: LD_INT 1
51355: PUSH
51356: EMPTY
51357: LIST
51358: LIST
51359: PUSH
51360: LD_INT 0
51362: PUSH
51363: LD_INT 1
51365: PUSH
51366: EMPTY
51367: LIST
51368: LIST
51369: PUSH
51370: LD_INT 1
51372: NEG
51373: PUSH
51374: LD_INT 0
51376: PUSH
51377: EMPTY
51378: LIST
51379: LIST
51380: PUSH
51381: LD_INT 1
51383: NEG
51384: PUSH
51385: LD_INT 1
51387: NEG
51388: PUSH
51389: EMPTY
51390: LIST
51391: LIST
51392: PUSH
51393: LD_INT 2
51395: PUSH
51396: LD_INT 1
51398: PUSH
51399: EMPTY
51400: LIST
51401: LIST
51402: PUSH
51403: LD_INT 2
51405: NEG
51406: PUSH
51407: LD_INT 1
51409: NEG
51410: PUSH
51411: EMPTY
51412: LIST
51413: LIST
51414: PUSH
51415: EMPTY
51416: LIST
51417: LIST
51418: LIST
51419: LIST
51420: LIST
51421: LIST
51422: LIST
51423: LIST
51424: LIST
51425: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51426: LD_ADDR_VAR 0 36
51430: PUSH
51431: LD_INT 0
51433: PUSH
51434: LD_INT 0
51436: PUSH
51437: EMPTY
51438: LIST
51439: LIST
51440: PUSH
51441: LD_INT 0
51443: PUSH
51444: LD_INT 1
51446: NEG
51447: PUSH
51448: EMPTY
51449: LIST
51450: LIST
51451: PUSH
51452: LD_INT 1
51454: PUSH
51455: LD_INT 0
51457: PUSH
51458: EMPTY
51459: LIST
51460: LIST
51461: PUSH
51462: LD_INT 1
51464: PUSH
51465: LD_INT 1
51467: PUSH
51468: EMPTY
51469: LIST
51470: LIST
51471: PUSH
51472: LD_INT 0
51474: PUSH
51475: LD_INT 1
51477: PUSH
51478: EMPTY
51479: LIST
51480: LIST
51481: PUSH
51482: LD_INT 1
51484: NEG
51485: PUSH
51486: LD_INT 0
51488: PUSH
51489: EMPTY
51490: LIST
51491: LIST
51492: PUSH
51493: LD_INT 1
51495: NEG
51496: PUSH
51497: LD_INT 1
51499: NEG
51500: PUSH
51501: EMPTY
51502: LIST
51503: LIST
51504: PUSH
51505: LD_INT 1
51507: NEG
51508: PUSH
51509: LD_INT 2
51511: NEG
51512: PUSH
51513: EMPTY
51514: LIST
51515: LIST
51516: PUSH
51517: LD_INT 1
51519: PUSH
51520: LD_INT 2
51522: PUSH
51523: EMPTY
51524: LIST
51525: LIST
51526: PUSH
51527: EMPTY
51528: LIST
51529: LIST
51530: LIST
51531: LIST
51532: LIST
51533: LIST
51534: LIST
51535: LIST
51536: LIST
51537: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51538: LD_ADDR_VAR 0 37
51542: PUSH
51543: LD_INT 0
51545: PUSH
51546: LD_INT 0
51548: PUSH
51549: EMPTY
51550: LIST
51551: LIST
51552: PUSH
51553: LD_INT 0
51555: PUSH
51556: LD_INT 1
51558: NEG
51559: PUSH
51560: EMPTY
51561: LIST
51562: LIST
51563: PUSH
51564: LD_INT 1
51566: PUSH
51567: LD_INT 0
51569: PUSH
51570: EMPTY
51571: LIST
51572: LIST
51573: PUSH
51574: LD_INT 1
51576: PUSH
51577: LD_INT 1
51579: PUSH
51580: EMPTY
51581: LIST
51582: LIST
51583: PUSH
51584: LD_INT 0
51586: PUSH
51587: LD_INT 1
51589: PUSH
51590: EMPTY
51591: LIST
51592: LIST
51593: PUSH
51594: LD_INT 1
51596: NEG
51597: PUSH
51598: LD_INT 0
51600: PUSH
51601: EMPTY
51602: LIST
51603: LIST
51604: PUSH
51605: LD_INT 1
51607: NEG
51608: PUSH
51609: LD_INT 1
51611: NEG
51612: PUSH
51613: EMPTY
51614: LIST
51615: LIST
51616: PUSH
51617: LD_INT 1
51619: PUSH
51620: LD_INT 1
51622: NEG
51623: PUSH
51624: EMPTY
51625: LIST
51626: LIST
51627: PUSH
51628: LD_INT 1
51630: NEG
51631: PUSH
51632: LD_INT 1
51634: PUSH
51635: EMPTY
51636: LIST
51637: LIST
51638: PUSH
51639: EMPTY
51640: LIST
51641: LIST
51642: LIST
51643: LIST
51644: LIST
51645: LIST
51646: LIST
51647: LIST
51648: LIST
51649: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51650: LD_ADDR_VAR 0 38
51654: PUSH
51655: LD_INT 0
51657: PUSH
51658: LD_INT 0
51660: PUSH
51661: EMPTY
51662: LIST
51663: LIST
51664: PUSH
51665: LD_INT 0
51667: PUSH
51668: LD_INT 1
51670: NEG
51671: PUSH
51672: EMPTY
51673: LIST
51674: LIST
51675: PUSH
51676: LD_INT 1
51678: PUSH
51679: LD_INT 0
51681: PUSH
51682: EMPTY
51683: LIST
51684: LIST
51685: PUSH
51686: LD_INT 1
51688: PUSH
51689: LD_INT 1
51691: PUSH
51692: EMPTY
51693: LIST
51694: LIST
51695: PUSH
51696: LD_INT 0
51698: PUSH
51699: LD_INT 1
51701: PUSH
51702: EMPTY
51703: LIST
51704: LIST
51705: PUSH
51706: LD_INT 1
51708: NEG
51709: PUSH
51710: LD_INT 0
51712: PUSH
51713: EMPTY
51714: LIST
51715: LIST
51716: PUSH
51717: LD_INT 1
51719: NEG
51720: PUSH
51721: LD_INT 1
51723: NEG
51724: PUSH
51725: EMPTY
51726: LIST
51727: LIST
51728: PUSH
51729: LD_INT 2
51731: PUSH
51732: LD_INT 1
51734: PUSH
51735: EMPTY
51736: LIST
51737: LIST
51738: PUSH
51739: LD_INT 2
51741: NEG
51742: PUSH
51743: LD_INT 1
51745: NEG
51746: PUSH
51747: EMPTY
51748: LIST
51749: LIST
51750: PUSH
51751: EMPTY
51752: LIST
51753: LIST
51754: LIST
51755: LIST
51756: LIST
51757: LIST
51758: LIST
51759: LIST
51760: LIST
51761: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51762: LD_ADDR_VAR 0 39
51766: PUSH
51767: LD_INT 0
51769: PUSH
51770: LD_INT 0
51772: PUSH
51773: EMPTY
51774: LIST
51775: LIST
51776: PUSH
51777: LD_INT 0
51779: PUSH
51780: LD_INT 1
51782: NEG
51783: PUSH
51784: EMPTY
51785: LIST
51786: LIST
51787: PUSH
51788: LD_INT 1
51790: PUSH
51791: LD_INT 0
51793: PUSH
51794: EMPTY
51795: LIST
51796: LIST
51797: PUSH
51798: LD_INT 1
51800: PUSH
51801: LD_INT 1
51803: PUSH
51804: EMPTY
51805: LIST
51806: LIST
51807: PUSH
51808: LD_INT 0
51810: PUSH
51811: LD_INT 1
51813: PUSH
51814: EMPTY
51815: LIST
51816: LIST
51817: PUSH
51818: LD_INT 1
51820: NEG
51821: PUSH
51822: LD_INT 0
51824: PUSH
51825: EMPTY
51826: LIST
51827: LIST
51828: PUSH
51829: LD_INT 1
51831: NEG
51832: PUSH
51833: LD_INT 1
51835: NEG
51836: PUSH
51837: EMPTY
51838: LIST
51839: LIST
51840: PUSH
51841: LD_INT 1
51843: NEG
51844: PUSH
51845: LD_INT 2
51847: NEG
51848: PUSH
51849: EMPTY
51850: LIST
51851: LIST
51852: PUSH
51853: LD_INT 1
51855: PUSH
51856: LD_INT 2
51858: PUSH
51859: EMPTY
51860: LIST
51861: LIST
51862: PUSH
51863: EMPTY
51864: LIST
51865: LIST
51866: LIST
51867: LIST
51868: LIST
51869: LIST
51870: LIST
51871: LIST
51872: LIST
51873: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51874: LD_ADDR_VAR 0 40
51878: PUSH
51879: LD_INT 0
51881: PUSH
51882: LD_INT 0
51884: PUSH
51885: EMPTY
51886: LIST
51887: LIST
51888: PUSH
51889: LD_INT 0
51891: PUSH
51892: LD_INT 1
51894: NEG
51895: PUSH
51896: EMPTY
51897: LIST
51898: LIST
51899: PUSH
51900: LD_INT 1
51902: PUSH
51903: LD_INT 0
51905: PUSH
51906: EMPTY
51907: LIST
51908: LIST
51909: PUSH
51910: LD_INT 1
51912: PUSH
51913: LD_INT 1
51915: PUSH
51916: EMPTY
51917: LIST
51918: LIST
51919: PUSH
51920: LD_INT 0
51922: PUSH
51923: LD_INT 1
51925: PUSH
51926: EMPTY
51927: LIST
51928: LIST
51929: PUSH
51930: LD_INT 1
51932: NEG
51933: PUSH
51934: LD_INT 0
51936: PUSH
51937: EMPTY
51938: LIST
51939: LIST
51940: PUSH
51941: LD_INT 1
51943: NEG
51944: PUSH
51945: LD_INT 1
51947: NEG
51948: PUSH
51949: EMPTY
51950: LIST
51951: LIST
51952: PUSH
51953: LD_INT 1
51955: PUSH
51956: LD_INT 1
51958: NEG
51959: PUSH
51960: EMPTY
51961: LIST
51962: LIST
51963: PUSH
51964: LD_INT 1
51966: NEG
51967: PUSH
51968: LD_INT 1
51970: PUSH
51971: EMPTY
51972: LIST
51973: LIST
51974: PUSH
51975: EMPTY
51976: LIST
51977: LIST
51978: LIST
51979: LIST
51980: LIST
51981: LIST
51982: LIST
51983: LIST
51984: LIST
51985: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51986: LD_ADDR_VAR 0 41
51990: PUSH
51991: LD_INT 0
51993: PUSH
51994: LD_INT 0
51996: PUSH
51997: EMPTY
51998: LIST
51999: LIST
52000: PUSH
52001: LD_INT 0
52003: PUSH
52004: LD_INT 1
52006: NEG
52007: PUSH
52008: EMPTY
52009: LIST
52010: LIST
52011: PUSH
52012: LD_INT 1
52014: PUSH
52015: LD_INT 0
52017: PUSH
52018: EMPTY
52019: LIST
52020: LIST
52021: PUSH
52022: LD_INT 1
52024: PUSH
52025: LD_INT 1
52027: PUSH
52028: EMPTY
52029: LIST
52030: LIST
52031: PUSH
52032: LD_INT 0
52034: PUSH
52035: LD_INT 1
52037: PUSH
52038: EMPTY
52039: LIST
52040: LIST
52041: PUSH
52042: LD_INT 1
52044: NEG
52045: PUSH
52046: LD_INT 0
52048: PUSH
52049: EMPTY
52050: LIST
52051: LIST
52052: PUSH
52053: LD_INT 1
52055: NEG
52056: PUSH
52057: LD_INT 1
52059: NEG
52060: PUSH
52061: EMPTY
52062: LIST
52063: LIST
52064: PUSH
52065: LD_INT 1
52067: NEG
52068: PUSH
52069: LD_INT 2
52071: NEG
52072: PUSH
52073: EMPTY
52074: LIST
52075: LIST
52076: PUSH
52077: LD_INT 1
52079: PUSH
52080: LD_INT 1
52082: NEG
52083: PUSH
52084: EMPTY
52085: LIST
52086: LIST
52087: PUSH
52088: LD_INT 2
52090: PUSH
52091: LD_INT 0
52093: PUSH
52094: EMPTY
52095: LIST
52096: LIST
52097: PUSH
52098: LD_INT 2
52100: PUSH
52101: LD_INT 1
52103: PUSH
52104: EMPTY
52105: LIST
52106: LIST
52107: PUSH
52108: LD_INT 2
52110: PUSH
52111: LD_INT 2
52113: PUSH
52114: EMPTY
52115: LIST
52116: LIST
52117: PUSH
52118: LD_INT 1
52120: PUSH
52121: LD_INT 2
52123: PUSH
52124: EMPTY
52125: LIST
52126: LIST
52127: PUSH
52128: LD_INT 1
52130: NEG
52131: PUSH
52132: LD_INT 1
52134: PUSH
52135: EMPTY
52136: LIST
52137: LIST
52138: PUSH
52139: LD_INT 2
52141: NEG
52142: PUSH
52143: LD_INT 0
52145: PUSH
52146: EMPTY
52147: LIST
52148: LIST
52149: PUSH
52150: LD_INT 2
52152: NEG
52153: PUSH
52154: LD_INT 1
52156: NEG
52157: PUSH
52158: EMPTY
52159: LIST
52160: LIST
52161: PUSH
52162: LD_INT 2
52164: NEG
52165: PUSH
52166: LD_INT 2
52168: NEG
52169: PUSH
52170: EMPTY
52171: LIST
52172: LIST
52173: PUSH
52174: LD_INT 2
52176: NEG
52177: PUSH
52178: LD_INT 3
52180: NEG
52181: PUSH
52182: EMPTY
52183: LIST
52184: LIST
52185: PUSH
52186: LD_INT 2
52188: PUSH
52189: LD_INT 1
52191: NEG
52192: PUSH
52193: EMPTY
52194: LIST
52195: LIST
52196: PUSH
52197: LD_INT 3
52199: PUSH
52200: LD_INT 0
52202: PUSH
52203: EMPTY
52204: LIST
52205: LIST
52206: PUSH
52207: LD_INT 3
52209: PUSH
52210: LD_INT 1
52212: PUSH
52213: EMPTY
52214: LIST
52215: LIST
52216: PUSH
52217: LD_INT 3
52219: PUSH
52220: LD_INT 2
52222: PUSH
52223: EMPTY
52224: LIST
52225: LIST
52226: PUSH
52227: LD_INT 3
52229: PUSH
52230: LD_INT 3
52232: PUSH
52233: EMPTY
52234: LIST
52235: LIST
52236: PUSH
52237: LD_INT 2
52239: PUSH
52240: LD_INT 3
52242: PUSH
52243: EMPTY
52244: LIST
52245: LIST
52246: PUSH
52247: LD_INT 2
52249: NEG
52250: PUSH
52251: LD_INT 1
52253: PUSH
52254: EMPTY
52255: LIST
52256: LIST
52257: PUSH
52258: LD_INT 3
52260: NEG
52261: PUSH
52262: LD_INT 0
52264: PUSH
52265: EMPTY
52266: LIST
52267: LIST
52268: PUSH
52269: LD_INT 3
52271: NEG
52272: PUSH
52273: LD_INT 1
52275: NEG
52276: PUSH
52277: EMPTY
52278: LIST
52279: LIST
52280: PUSH
52281: LD_INT 3
52283: NEG
52284: PUSH
52285: LD_INT 2
52287: NEG
52288: PUSH
52289: EMPTY
52290: LIST
52291: LIST
52292: PUSH
52293: LD_INT 3
52295: NEG
52296: PUSH
52297: LD_INT 3
52299: NEG
52300: PUSH
52301: EMPTY
52302: LIST
52303: LIST
52304: PUSH
52305: EMPTY
52306: LIST
52307: LIST
52308: LIST
52309: LIST
52310: LIST
52311: LIST
52312: LIST
52313: LIST
52314: LIST
52315: LIST
52316: LIST
52317: LIST
52318: LIST
52319: LIST
52320: LIST
52321: LIST
52322: LIST
52323: LIST
52324: LIST
52325: LIST
52326: LIST
52327: LIST
52328: LIST
52329: LIST
52330: LIST
52331: LIST
52332: LIST
52333: LIST
52334: LIST
52335: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52336: LD_ADDR_VAR 0 42
52340: PUSH
52341: LD_INT 0
52343: PUSH
52344: LD_INT 0
52346: PUSH
52347: EMPTY
52348: LIST
52349: LIST
52350: PUSH
52351: LD_INT 0
52353: PUSH
52354: LD_INT 1
52356: NEG
52357: PUSH
52358: EMPTY
52359: LIST
52360: LIST
52361: PUSH
52362: LD_INT 1
52364: PUSH
52365: LD_INT 0
52367: PUSH
52368: EMPTY
52369: LIST
52370: LIST
52371: PUSH
52372: LD_INT 1
52374: PUSH
52375: LD_INT 1
52377: PUSH
52378: EMPTY
52379: LIST
52380: LIST
52381: PUSH
52382: LD_INT 0
52384: PUSH
52385: LD_INT 1
52387: PUSH
52388: EMPTY
52389: LIST
52390: LIST
52391: PUSH
52392: LD_INT 1
52394: NEG
52395: PUSH
52396: LD_INT 0
52398: PUSH
52399: EMPTY
52400: LIST
52401: LIST
52402: PUSH
52403: LD_INT 1
52405: NEG
52406: PUSH
52407: LD_INT 1
52409: NEG
52410: PUSH
52411: EMPTY
52412: LIST
52413: LIST
52414: PUSH
52415: LD_INT 1
52417: NEG
52418: PUSH
52419: LD_INT 2
52421: NEG
52422: PUSH
52423: EMPTY
52424: LIST
52425: LIST
52426: PUSH
52427: LD_INT 0
52429: PUSH
52430: LD_INT 2
52432: NEG
52433: PUSH
52434: EMPTY
52435: LIST
52436: LIST
52437: PUSH
52438: LD_INT 1
52440: PUSH
52441: LD_INT 1
52443: NEG
52444: PUSH
52445: EMPTY
52446: LIST
52447: LIST
52448: PUSH
52449: LD_INT 2
52451: PUSH
52452: LD_INT 1
52454: PUSH
52455: EMPTY
52456: LIST
52457: LIST
52458: PUSH
52459: LD_INT 2
52461: PUSH
52462: LD_INT 2
52464: PUSH
52465: EMPTY
52466: LIST
52467: LIST
52468: PUSH
52469: LD_INT 1
52471: PUSH
52472: LD_INT 2
52474: PUSH
52475: EMPTY
52476: LIST
52477: LIST
52478: PUSH
52479: LD_INT 0
52481: PUSH
52482: LD_INT 2
52484: PUSH
52485: EMPTY
52486: LIST
52487: LIST
52488: PUSH
52489: LD_INT 1
52491: NEG
52492: PUSH
52493: LD_INT 1
52495: PUSH
52496: EMPTY
52497: LIST
52498: LIST
52499: PUSH
52500: LD_INT 2
52502: NEG
52503: PUSH
52504: LD_INT 1
52506: NEG
52507: PUSH
52508: EMPTY
52509: LIST
52510: LIST
52511: PUSH
52512: LD_INT 2
52514: NEG
52515: PUSH
52516: LD_INT 2
52518: NEG
52519: PUSH
52520: EMPTY
52521: LIST
52522: LIST
52523: PUSH
52524: LD_INT 2
52526: NEG
52527: PUSH
52528: LD_INT 3
52530: NEG
52531: PUSH
52532: EMPTY
52533: LIST
52534: LIST
52535: PUSH
52536: LD_INT 1
52538: NEG
52539: PUSH
52540: LD_INT 3
52542: NEG
52543: PUSH
52544: EMPTY
52545: LIST
52546: LIST
52547: PUSH
52548: LD_INT 0
52550: PUSH
52551: LD_INT 3
52553: NEG
52554: PUSH
52555: EMPTY
52556: LIST
52557: LIST
52558: PUSH
52559: LD_INT 1
52561: PUSH
52562: LD_INT 2
52564: NEG
52565: PUSH
52566: EMPTY
52567: LIST
52568: LIST
52569: PUSH
52570: LD_INT 3
52572: PUSH
52573: LD_INT 2
52575: PUSH
52576: EMPTY
52577: LIST
52578: LIST
52579: PUSH
52580: LD_INT 3
52582: PUSH
52583: LD_INT 3
52585: PUSH
52586: EMPTY
52587: LIST
52588: LIST
52589: PUSH
52590: LD_INT 2
52592: PUSH
52593: LD_INT 3
52595: PUSH
52596: EMPTY
52597: LIST
52598: LIST
52599: PUSH
52600: LD_INT 1
52602: PUSH
52603: LD_INT 3
52605: PUSH
52606: EMPTY
52607: LIST
52608: LIST
52609: PUSH
52610: LD_INT 0
52612: PUSH
52613: LD_INT 3
52615: PUSH
52616: EMPTY
52617: LIST
52618: LIST
52619: PUSH
52620: LD_INT 1
52622: NEG
52623: PUSH
52624: LD_INT 2
52626: PUSH
52627: EMPTY
52628: LIST
52629: LIST
52630: PUSH
52631: LD_INT 3
52633: NEG
52634: PUSH
52635: LD_INT 2
52637: NEG
52638: PUSH
52639: EMPTY
52640: LIST
52641: LIST
52642: PUSH
52643: LD_INT 3
52645: NEG
52646: PUSH
52647: LD_INT 3
52649: NEG
52650: PUSH
52651: EMPTY
52652: LIST
52653: LIST
52654: PUSH
52655: EMPTY
52656: LIST
52657: LIST
52658: LIST
52659: LIST
52660: LIST
52661: LIST
52662: LIST
52663: LIST
52664: LIST
52665: LIST
52666: LIST
52667: LIST
52668: LIST
52669: LIST
52670: LIST
52671: LIST
52672: LIST
52673: LIST
52674: LIST
52675: LIST
52676: LIST
52677: LIST
52678: LIST
52679: LIST
52680: LIST
52681: LIST
52682: LIST
52683: LIST
52684: LIST
52685: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52686: LD_ADDR_VAR 0 43
52690: PUSH
52691: LD_INT 0
52693: PUSH
52694: LD_INT 0
52696: PUSH
52697: EMPTY
52698: LIST
52699: LIST
52700: PUSH
52701: LD_INT 0
52703: PUSH
52704: LD_INT 1
52706: NEG
52707: PUSH
52708: EMPTY
52709: LIST
52710: LIST
52711: PUSH
52712: LD_INT 1
52714: PUSH
52715: LD_INT 0
52717: PUSH
52718: EMPTY
52719: LIST
52720: LIST
52721: PUSH
52722: LD_INT 1
52724: PUSH
52725: LD_INT 1
52727: PUSH
52728: EMPTY
52729: LIST
52730: LIST
52731: PUSH
52732: LD_INT 0
52734: PUSH
52735: LD_INT 1
52737: PUSH
52738: EMPTY
52739: LIST
52740: LIST
52741: PUSH
52742: LD_INT 1
52744: NEG
52745: PUSH
52746: LD_INT 0
52748: PUSH
52749: EMPTY
52750: LIST
52751: LIST
52752: PUSH
52753: LD_INT 1
52755: NEG
52756: PUSH
52757: LD_INT 1
52759: NEG
52760: PUSH
52761: EMPTY
52762: LIST
52763: LIST
52764: PUSH
52765: LD_INT 1
52767: NEG
52768: PUSH
52769: LD_INT 2
52771: NEG
52772: PUSH
52773: EMPTY
52774: LIST
52775: LIST
52776: PUSH
52777: LD_INT 0
52779: PUSH
52780: LD_INT 2
52782: NEG
52783: PUSH
52784: EMPTY
52785: LIST
52786: LIST
52787: PUSH
52788: LD_INT 1
52790: PUSH
52791: LD_INT 1
52793: NEG
52794: PUSH
52795: EMPTY
52796: LIST
52797: LIST
52798: PUSH
52799: LD_INT 2
52801: PUSH
52802: LD_INT 0
52804: PUSH
52805: EMPTY
52806: LIST
52807: LIST
52808: PUSH
52809: LD_INT 2
52811: PUSH
52812: LD_INT 1
52814: PUSH
52815: EMPTY
52816: LIST
52817: LIST
52818: PUSH
52819: LD_INT 1
52821: PUSH
52822: LD_INT 2
52824: PUSH
52825: EMPTY
52826: LIST
52827: LIST
52828: PUSH
52829: LD_INT 0
52831: PUSH
52832: LD_INT 2
52834: PUSH
52835: EMPTY
52836: LIST
52837: LIST
52838: PUSH
52839: LD_INT 1
52841: NEG
52842: PUSH
52843: LD_INT 1
52845: PUSH
52846: EMPTY
52847: LIST
52848: LIST
52849: PUSH
52850: LD_INT 2
52852: NEG
52853: PUSH
52854: LD_INT 0
52856: PUSH
52857: EMPTY
52858: LIST
52859: LIST
52860: PUSH
52861: LD_INT 2
52863: NEG
52864: PUSH
52865: LD_INT 1
52867: NEG
52868: PUSH
52869: EMPTY
52870: LIST
52871: LIST
52872: PUSH
52873: LD_INT 1
52875: NEG
52876: PUSH
52877: LD_INT 3
52879: NEG
52880: PUSH
52881: EMPTY
52882: LIST
52883: LIST
52884: PUSH
52885: LD_INT 0
52887: PUSH
52888: LD_INT 3
52890: NEG
52891: PUSH
52892: EMPTY
52893: LIST
52894: LIST
52895: PUSH
52896: LD_INT 1
52898: PUSH
52899: LD_INT 2
52901: NEG
52902: PUSH
52903: EMPTY
52904: LIST
52905: LIST
52906: PUSH
52907: LD_INT 2
52909: PUSH
52910: LD_INT 1
52912: NEG
52913: PUSH
52914: EMPTY
52915: LIST
52916: LIST
52917: PUSH
52918: LD_INT 3
52920: PUSH
52921: LD_INT 0
52923: PUSH
52924: EMPTY
52925: LIST
52926: LIST
52927: PUSH
52928: LD_INT 3
52930: PUSH
52931: LD_INT 1
52933: PUSH
52934: EMPTY
52935: LIST
52936: LIST
52937: PUSH
52938: LD_INT 1
52940: PUSH
52941: LD_INT 3
52943: PUSH
52944: EMPTY
52945: LIST
52946: LIST
52947: PUSH
52948: LD_INT 0
52950: PUSH
52951: LD_INT 3
52953: PUSH
52954: EMPTY
52955: LIST
52956: LIST
52957: PUSH
52958: LD_INT 1
52960: NEG
52961: PUSH
52962: LD_INT 2
52964: PUSH
52965: EMPTY
52966: LIST
52967: LIST
52968: PUSH
52969: LD_INT 2
52971: NEG
52972: PUSH
52973: LD_INT 1
52975: PUSH
52976: EMPTY
52977: LIST
52978: LIST
52979: PUSH
52980: LD_INT 3
52982: NEG
52983: PUSH
52984: LD_INT 0
52986: PUSH
52987: EMPTY
52988: LIST
52989: LIST
52990: PUSH
52991: LD_INT 3
52993: NEG
52994: PUSH
52995: LD_INT 1
52997: NEG
52998: PUSH
52999: EMPTY
53000: LIST
53001: LIST
53002: PUSH
53003: EMPTY
53004: LIST
53005: LIST
53006: LIST
53007: LIST
53008: LIST
53009: LIST
53010: LIST
53011: LIST
53012: LIST
53013: LIST
53014: LIST
53015: LIST
53016: LIST
53017: LIST
53018: LIST
53019: LIST
53020: LIST
53021: LIST
53022: LIST
53023: LIST
53024: LIST
53025: LIST
53026: LIST
53027: LIST
53028: LIST
53029: LIST
53030: LIST
53031: LIST
53032: LIST
53033: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53034: LD_ADDR_VAR 0 44
53038: PUSH
53039: LD_INT 0
53041: PUSH
53042: LD_INT 0
53044: PUSH
53045: EMPTY
53046: LIST
53047: LIST
53048: PUSH
53049: LD_INT 0
53051: PUSH
53052: LD_INT 1
53054: NEG
53055: PUSH
53056: EMPTY
53057: LIST
53058: LIST
53059: PUSH
53060: LD_INT 1
53062: PUSH
53063: LD_INT 0
53065: PUSH
53066: EMPTY
53067: LIST
53068: LIST
53069: PUSH
53070: LD_INT 1
53072: PUSH
53073: LD_INT 1
53075: PUSH
53076: EMPTY
53077: LIST
53078: LIST
53079: PUSH
53080: LD_INT 0
53082: PUSH
53083: LD_INT 1
53085: PUSH
53086: EMPTY
53087: LIST
53088: LIST
53089: PUSH
53090: LD_INT 1
53092: NEG
53093: PUSH
53094: LD_INT 0
53096: PUSH
53097: EMPTY
53098: LIST
53099: LIST
53100: PUSH
53101: LD_INT 1
53103: NEG
53104: PUSH
53105: LD_INT 1
53107: NEG
53108: PUSH
53109: EMPTY
53110: LIST
53111: LIST
53112: PUSH
53113: LD_INT 1
53115: NEG
53116: PUSH
53117: LD_INT 2
53119: NEG
53120: PUSH
53121: EMPTY
53122: LIST
53123: LIST
53124: PUSH
53125: LD_INT 1
53127: PUSH
53128: LD_INT 1
53130: NEG
53131: PUSH
53132: EMPTY
53133: LIST
53134: LIST
53135: PUSH
53136: LD_INT 2
53138: PUSH
53139: LD_INT 0
53141: PUSH
53142: EMPTY
53143: LIST
53144: LIST
53145: PUSH
53146: LD_INT 2
53148: PUSH
53149: LD_INT 1
53151: PUSH
53152: EMPTY
53153: LIST
53154: LIST
53155: PUSH
53156: LD_INT 2
53158: PUSH
53159: LD_INT 2
53161: PUSH
53162: EMPTY
53163: LIST
53164: LIST
53165: PUSH
53166: LD_INT 1
53168: PUSH
53169: LD_INT 2
53171: PUSH
53172: EMPTY
53173: LIST
53174: LIST
53175: PUSH
53176: LD_INT 1
53178: NEG
53179: PUSH
53180: LD_INT 1
53182: PUSH
53183: EMPTY
53184: LIST
53185: LIST
53186: PUSH
53187: LD_INT 2
53189: NEG
53190: PUSH
53191: LD_INT 0
53193: PUSH
53194: EMPTY
53195: LIST
53196: LIST
53197: PUSH
53198: LD_INT 2
53200: NEG
53201: PUSH
53202: LD_INT 1
53204: NEG
53205: PUSH
53206: EMPTY
53207: LIST
53208: LIST
53209: PUSH
53210: LD_INT 2
53212: NEG
53213: PUSH
53214: LD_INT 2
53216: NEG
53217: PUSH
53218: EMPTY
53219: LIST
53220: LIST
53221: PUSH
53222: LD_INT 2
53224: NEG
53225: PUSH
53226: LD_INT 3
53228: NEG
53229: PUSH
53230: EMPTY
53231: LIST
53232: LIST
53233: PUSH
53234: LD_INT 2
53236: PUSH
53237: LD_INT 1
53239: NEG
53240: PUSH
53241: EMPTY
53242: LIST
53243: LIST
53244: PUSH
53245: LD_INT 3
53247: PUSH
53248: LD_INT 0
53250: PUSH
53251: EMPTY
53252: LIST
53253: LIST
53254: PUSH
53255: LD_INT 3
53257: PUSH
53258: LD_INT 1
53260: PUSH
53261: EMPTY
53262: LIST
53263: LIST
53264: PUSH
53265: LD_INT 3
53267: PUSH
53268: LD_INT 2
53270: PUSH
53271: EMPTY
53272: LIST
53273: LIST
53274: PUSH
53275: LD_INT 3
53277: PUSH
53278: LD_INT 3
53280: PUSH
53281: EMPTY
53282: LIST
53283: LIST
53284: PUSH
53285: LD_INT 2
53287: PUSH
53288: LD_INT 3
53290: PUSH
53291: EMPTY
53292: LIST
53293: LIST
53294: PUSH
53295: LD_INT 2
53297: NEG
53298: PUSH
53299: LD_INT 1
53301: PUSH
53302: EMPTY
53303: LIST
53304: LIST
53305: PUSH
53306: LD_INT 3
53308: NEG
53309: PUSH
53310: LD_INT 0
53312: PUSH
53313: EMPTY
53314: LIST
53315: LIST
53316: PUSH
53317: LD_INT 3
53319: NEG
53320: PUSH
53321: LD_INT 1
53323: NEG
53324: PUSH
53325: EMPTY
53326: LIST
53327: LIST
53328: PUSH
53329: LD_INT 3
53331: NEG
53332: PUSH
53333: LD_INT 2
53335: NEG
53336: PUSH
53337: EMPTY
53338: LIST
53339: LIST
53340: PUSH
53341: LD_INT 3
53343: NEG
53344: PUSH
53345: LD_INT 3
53347: NEG
53348: PUSH
53349: EMPTY
53350: LIST
53351: LIST
53352: PUSH
53353: EMPTY
53354: LIST
53355: LIST
53356: LIST
53357: LIST
53358: LIST
53359: LIST
53360: LIST
53361: LIST
53362: LIST
53363: LIST
53364: LIST
53365: LIST
53366: LIST
53367: LIST
53368: LIST
53369: LIST
53370: LIST
53371: LIST
53372: LIST
53373: LIST
53374: LIST
53375: LIST
53376: LIST
53377: LIST
53378: LIST
53379: LIST
53380: LIST
53381: LIST
53382: LIST
53383: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53384: LD_ADDR_VAR 0 45
53388: PUSH
53389: LD_INT 0
53391: PUSH
53392: LD_INT 0
53394: PUSH
53395: EMPTY
53396: LIST
53397: LIST
53398: PUSH
53399: LD_INT 0
53401: PUSH
53402: LD_INT 1
53404: NEG
53405: PUSH
53406: EMPTY
53407: LIST
53408: LIST
53409: PUSH
53410: LD_INT 1
53412: PUSH
53413: LD_INT 0
53415: PUSH
53416: EMPTY
53417: LIST
53418: LIST
53419: PUSH
53420: LD_INT 1
53422: PUSH
53423: LD_INT 1
53425: PUSH
53426: EMPTY
53427: LIST
53428: LIST
53429: PUSH
53430: LD_INT 0
53432: PUSH
53433: LD_INT 1
53435: PUSH
53436: EMPTY
53437: LIST
53438: LIST
53439: PUSH
53440: LD_INT 1
53442: NEG
53443: PUSH
53444: LD_INT 0
53446: PUSH
53447: EMPTY
53448: LIST
53449: LIST
53450: PUSH
53451: LD_INT 1
53453: NEG
53454: PUSH
53455: LD_INT 1
53457: NEG
53458: PUSH
53459: EMPTY
53460: LIST
53461: LIST
53462: PUSH
53463: LD_INT 1
53465: NEG
53466: PUSH
53467: LD_INT 2
53469: NEG
53470: PUSH
53471: EMPTY
53472: LIST
53473: LIST
53474: PUSH
53475: LD_INT 0
53477: PUSH
53478: LD_INT 2
53480: NEG
53481: PUSH
53482: EMPTY
53483: LIST
53484: LIST
53485: PUSH
53486: LD_INT 1
53488: PUSH
53489: LD_INT 1
53491: NEG
53492: PUSH
53493: EMPTY
53494: LIST
53495: LIST
53496: PUSH
53497: LD_INT 2
53499: PUSH
53500: LD_INT 1
53502: PUSH
53503: EMPTY
53504: LIST
53505: LIST
53506: PUSH
53507: LD_INT 2
53509: PUSH
53510: LD_INT 2
53512: PUSH
53513: EMPTY
53514: LIST
53515: LIST
53516: PUSH
53517: LD_INT 1
53519: PUSH
53520: LD_INT 2
53522: PUSH
53523: EMPTY
53524: LIST
53525: LIST
53526: PUSH
53527: LD_INT 0
53529: PUSH
53530: LD_INT 2
53532: PUSH
53533: EMPTY
53534: LIST
53535: LIST
53536: PUSH
53537: LD_INT 1
53539: NEG
53540: PUSH
53541: LD_INT 1
53543: PUSH
53544: EMPTY
53545: LIST
53546: LIST
53547: PUSH
53548: LD_INT 2
53550: NEG
53551: PUSH
53552: LD_INT 1
53554: NEG
53555: PUSH
53556: EMPTY
53557: LIST
53558: LIST
53559: PUSH
53560: LD_INT 2
53562: NEG
53563: PUSH
53564: LD_INT 2
53566: NEG
53567: PUSH
53568: EMPTY
53569: LIST
53570: LIST
53571: PUSH
53572: LD_INT 2
53574: NEG
53575: PUSH
53576: LD_INT 3
53578: NEG
53579: PUSH
53580: EMPTY
53581: LIST
53582: LIST
53583: PUSH
53584: LD_INT 1
53586: NEG
53587: PUSH
53588: LD_INT 3
53590: NEG
53591: PUSH
53592: EMPTY
53593: LIST
53594: LIST
53595: PUSH
53596: LD_INT 0
53598: PUSH
53599: LD_INT 3
53601: NEG
53602: PUSH
53603: EMPTY
53604: LIST
53605: LIST
53606: PUSH
53607: LD_INT 1
53609: PUSH
53610: LD_INT 2
53612: NEG
53613: PUSH
53614: EMPTY
53615: LIST
53616: LIST
53617: PUSH
53618: LD_INT 3
53620: PUSH
53621: LD_INT 2
53623: PUSH
53624: EMPTY
53625: LIST
53626: LIST
53627: PUSH
53628: LD_INT 3
53630: PUSH
53631: LD_INT 3
53633: PUSH
53634: EMPTY
53635: LIST
53636: LIST
53637: PUSH
53638: LD_INT 2
53640: PUSH
53641: LD_INT 3
53643: PUSH
53644: EMPTY
53645: LIST
53646: LIST
53647: PUSH
53648: LD_INT 1
53650: PUSH
53651: LD_INT 3
53653: PUSH
53654: EMPTY
53655: LIST
53656: LIST
53657: PUSH
53658: LD_INT 0
53660: PUSH
53661: LD_INT 3
53663: PUSH
53664: EMPTY
53665: LIST
53666: LIST
53667: PUSH
53668: LD_INT 1
53670: NEG
53671: PUSH
53672: LD_INT 2
53674: PUSH
53675: EMPTY
53676: LIST
53677: LIST
53678: PUSH
53679: LD_INT 3
53681: NEG
53682: PUSH
53683: LD_INT 2
53685: NEG
53686: PUSH
53687: EMPTY
53688: LIST
53689: LIST
53690: PUSH
53691: LD_INT 3
53693: NEG
53694: PUSH
53695: LD_INT 3
53697: NEG
53698: PUSH
53699: EMPTY
53700: LIST
53701: LIST
53702: PUSH
53703: EMPTY
53704: LIST
53705: LIST
53706: LIST
53707: LIST
53708: LIST
53709: LIST
53710: LIST
53711: LIST
53712: LIST
53713: LIST
53714: LIST
53715: LIST
53716: LIST
53717: LIST
53718: LIST
53719: LIST
53720: LIST
53721: LIST
53722: LIST
53723: LIST
53724: LIST
53725: LIST
53726: LIST
53727: LIST
53728: LIST
53729: LIST
53730: LIST
53731: LIST
53732: LIST
53733: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53734: LD_ADDR_VAR 0 46
53738: PUSH
53739: LD_INT 0
53741: PUSH
53742: LD_INT 0
53744: PUSH
53745: EMPTY
53746: LIST
53747: LIST
53748: PUSH
53749: LD_INT 0
53751: PUSH
53752: LD_INT 1
53754: NEG
53755: PUSH
53756: EMPTY
53757: LIST
53758: LIST
53759: PUSH
53760: LD_INT 1
53762: PUSH
53763: LD_INT 0
53765: PUSH
53766: EMPTY
53767: LIST
53768: LIST
53769: PUSH
53770: LD_INT 1
53772: PUSH
53773: LD_INT 1
53775: PUSH
53776: EMPTY
53777: LIST
53778: LIST
53779: PUSH
53780: LD_INT 0
53782: PUSH
53783: LD_INT 1
53785: PUSH
53786: EMPTY
53787: LIST
53788: LIST
53789: PUSH
53790: LD_INT 1
53792: NEG
53793: PUSH
53794: LD_INT 0
53796: PUSH
53797: EMPTY
53798: LIST
53799: LIST
53800: PUSH
53801: LD_INT 1
53803: NEG
53804: PUSH
53805: LD_INT 1
53807: NEG
53808: PUSH
53809: EMPTY
53810: LIST
53811: LIST
53812: PUSH
53813: LD_INT 1
53815: NEG
53816: PUSH
53817: LD_INT 2
53819: NEG
53820: PUSH
53821: EMPTY
53822: LIST
53823: LIST
53824: PUSH
53825: LD_INT 0
53827: PUSH
53828: LD_INT 2
53830: NEG
53831: PUSH
53832: EMPTY
53833: LIST
53834: LIST
53835: PUSH
53836: LD_INT 1
53838: PUSH
53839: LD_INT 1
53841: NEG
53842: PUSH
53843: EMPTY
53844: LIST
53845: LIST
53846: PUSH
53847: LD_INT 2
53849: PUSH
53850: LD_INT 0
53852: PUSH
53853: EMPTY
53854: LIST
53855: LIST
53856: PUSH
53857: LD_INT 2
53859: PUSH
53860: LD_INT 1
53862: PUSH
53863: EMPTY
53864: LIST
53865: LIST
53866: PUSH
53867: LD_INT 1
53869: PUSH
53870: LD_INT 2
53872: PUSH
53873: EMPTY
53874: LIST
53875: LIST
53876: PUSH
53877: LD_INT 0
53879: PUSH
53880: LD_INT 2
53882: PUSH
53883: EMPTY
53884: LIST
53885: LIST
53886: PUSH
53887: LD_INT 1
53889: NEG
53890: PUSH
53891: LD_INT 1
53893: PUSH
53894: EMPTY
53895: LIST
53896: LIST
53897: PUSH
53898: LD_INT 2
53900: NEG
53901: PUSH
53902: LD_INT 0
53904: PUSH
53905: EMPTY
53906: LIST
53907: LIST
53908: PUSH
53909: LD_INT 2
53911: NEG
53912: PUSH
53913: LD_INT 1
53915: NEG
53916: PUSH
53917: EMPTY
53918: LIST
53919: LIST
53920: PUSH
53921: LD_INT 1
53923: NEG
53924: PUSH
53925: LD_INT 3
53927: NEG
53928: PUSH
53929: EMPTY
53930: LIST
53931: LIST
53932: PUSH
53933: LD_INT 0
53935: PUSH
53936: LD_INT 3
53938: NEG
53939: PUSH
53940: EMPTY
53941: LIST
53942: LIST
53943: PUSH
53944: LD_INT 1
53946: PUSH
53947: LD_INT 2
53949: NEG
53950: PUSH
53951: EMPTY
53952: LIST
53953: LIST
53954: PUSH
53955: LD_INT 2
53957: PUSH
53958: LD_INT 1
53960: NEG
53961: PUSH
53962: EMPTY
53963: LIST
53964: LIST
53965: PUSH
53966: LD_INT 3
53968: PUSH
53969: LD_INT 0
53971: PUSH
53972: EMPTY
53973: LIST
53974: LIST
53975: PUSH
53976: LD_INT 3
53978: PUSH
53979: LD_INT 1
53981: PUSH
53982: EMPTY
53983: LIST
53984: LIST
53985: PUSH
53986: LD_INT 1
53988: PUSH
53989: LD_INT 3
53991: PUSH
53992: EMPTY
53993: LIST
53994: LIST
53995: PUSH
53996: LD_INT 0
53998: PUSH
53999: LD_INT 3
54001: PUSH
54002: EMPTY
54003: LIST
54004: LIST
54005: PUSH
54006: LD_INT 1
54008: NEG
54009: PUSH
54010: LD_INT 2
54012: PUSH
54013: EMPTY
54014: LIST
54015: LIST
54016: PUSH
54017: LD_INT 2
54019: NEG
54020: PUSH
54021: LD_INT 1
54023: PUSH
54024: EMPTY
54025: LIST
54026: LIST
54027: PUSH
54028: LD_INT 3
54030: NEG
54031: PUSH
54032: LD_INT 0
54034: PUSH
54035: EMPTY
54036: LIST
54037: LIST
54038: PUSH
54039: LD_INT 3
54041: NEG
54042: PUSH
54043: LD_INT 1
54045: NEG
54046: PUSH
54047: EMPTY
54048: LIST
54049: LIST
54050: PUSH
54051: EMPTY
54052: LIST
54053: LIST
54054: LIST
54055: LIST
54056: LIST
54057: LIST
54058: LIST
54059: LIST
54060: LIST
54061: LIST
54062: LIST
54063: LIST
54064: LIST
54065: LIST
54066: LIST
54067: LIST
54068: LIST
54069: LIST
54070: LIST
54071: LIST
54072: LIST
54073: LIST
54074: LIST
54075: LIST
54076: LIST
54077: LIST
54078: LIST
54079: LIST
54080: LIST
54081: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54082: LD_ADDR_VAR 0 47
54086: PUSH
54087: LD_INT 0
54089: PUSH
54090: LD_INT 0
54092: PUSH
54093: EMPTY
54094: LIST
54095: LIST
54096: PUSH
54097: LD_INT 0
54099: PUSH
54100: LD_INT 1
54102: NEG
54103: PUSH
54104: EMPTY
54105: LIST
54106: LIST
54107: PUSH
54108: LD_INT 1
54110: PUSH
54111: LD_INT 0
54113: PUSH
54114: EMPTY
54115: LIST
54116: LIST
54117: PUSH
54118: LD_INT 1
54120: PUSH
54121: LD_INT 1
54123: PUSH
54124: EMPTY
54125: LIST
54126: LIST
54127: PUSH
54128: LD_INT 0
54130: PUSH
54131: LD_INT 1
54133: PUSH
54134: EMPTY
54135: LIST
54136: LIST
54137: PUSH
54138: LD_INT 1
54140: NEG
54141: PUSH
54142: LD_INT 0
54144: PUSH
54145: EMPTY
54146: LIST
54147: LIST
54148: PUSH
54149: LD_INT 1
54151: NEG
54152: PUSH
54153: LD_INT 1
54155: NEG
54156: PUSH
54157: EMPTY
54158: LIST
54159: LIST
54160: PUSH
54161: LD_INT 1
54163: NEG
54164: PUSH
54165: LD_INT 2
54167: NEG
54168: PUSH
54169: EMPTY
54170: LIST
54171: LIST
54172: PUSH
54173: LD_INT 0
54175: PUSH
54176: LD_INT 2
54178: NEG
54179: PUSH
54180: EMPTY
54181: LIST
54182: LIST
54183: PUSH
54184: LD_INT 1
54186: PUSH
54187: LD_INT 1
54189: NEG
54190: PUSH
54191: EMPTY
54192: LIST
54193: LIST
54194: PUSH
54195: LD_INT 2
54197: NEG
54198: PUSH
54199: LD_INT 1
54201: NEG
54202: PUSH
54203: EMPTY
54204: LIST
54205: LIST
54206: PUSH
54207: LD_INT 2
54209: NEG
54210: PUSH
54211: LD_INT 2
54213: NEG
54214: PUSH
54215: EMPTY
54216: LIST
54217: LIST
54218: PUSH
54219: EMPTY
54220: LIST
54221: LIST
54222: LIST
54223: LIST
54224: LIST
54225: LIST
54226: LIST
54227: LIST
54228: LIST
54229: LIST
54230: LIST
54231: LIST
54232: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
54233: LD_ADDR_VAR 0 48
54237: PUSH
54238: LD_INT 0
54240: PUSH
54241: LD_INT 0
54243: PUSH
54244: EMPTY
54245: LIST
54246: LIST
54247: PUSH
54248: LD_INT 0
54250: PUSH
54251: LD_INT 1
54253: NEG
54254: PUSH
54255: EMPTY
54256: LIST
54257: LIST
54258: PUSH
54259: LD_INT 1
54261: PUSH
54262: LD_INT 0
54264: PUSH
54265: EMPTY
54266: LIST
54267: LIST
54268: PUSH
54269: LD_INT 1
54271: PUSH
54272: LD_INT 1
54274: PUSH
54275: EMPTY
54276: LIST
54277: LIST
54278: PUSH
54279: LD_INT 0
54281: PUSH
54282: LD_INT 1
54284: PUSH
54285: EMPTY
54286: LIST
54287: LIST
54288: PUSH
54289: LD_INT 1
54291: NEG
54292: PUSH
54293: LD_INT 0
54295: PUSH
54296: EMPTY
54297: LIST
54298: LIST
54299: PUSH
54300: LD_INT 1
54302: NEG
54303: PUSH
54304: LD_INT 1
54306: NEG
54307: PUSH
54308: EMPTY
54309: LIST
54310: LIST
54311: PUSH
54312: LD_INT 1
54314: NEG
54315: PUSH
54316: LD_INT 2
54318: NEG
54319: PUSH
54320: EMPTY
54321: LIST
54322: LIST
54323: PUSH
54324: LD_INT 0
54326: PUSH
54327: LD_INT 2
54329: NEG
54330: PUSH
54331: EMPTY
54332: LIST
54333: LIST
54334: PUSH
54335: LD_INT 1
54337: PUSH
54338: LD_INT 1
54340: NEG
54341: PUSH
54342: EMPTY
54343: LIST
54344: LIST
54345: PUSH
54346: LD_INT 2
54348: PUSH
54349: LD_INT 0
54351: PUSH
54352: EMPTY
54353: LIST
54354: LIST
54355: PUSH
54356: LD_INT 2
54358: PUSH
54359: LD_INT 1
54361: PUSH
54362: EMPTY
54363: LIST
54364: LIST
54365: PUSH
54366: EMPTY
54367: LIST
54368: LIST
54369: LIST
54370: LIST
54371: LIST
54372: LIST
54373: LIST
54374: LIST
54375: LIST
54376: LIST
54377: LIST
54378: LIST
54379: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
54380: LD_ADDR_VAR 0 49
54384: PUSH
54385: LD_INT 0
54387: PUSH
54388: LD_INT 0
54390: PUSH
54391: EMPTY
54392: LIST
54393: LIST
54394: PUSH
54395: LD_INT 0
54397: PUSH
54398: LD_INT 1
54400: NEG
54401: PUSH
54402: EMPTY
54403: LIST
54404: LIST
54405: PUSH
54406: LD_INT 1
54408: PUSH
54409: LD_INT 0
54411: PUSH
54412: EMPTY
54413: LIST
54414: LIST
54415: PUSH
54416: LD_INT 1
54418: PUSH
54419: LD_INT 1
54421: PUSH
54422: EMPTY
54423: LIST
54424: LIST
54425: PUSH
54426: LD_INT 0
54428: PUSH
54429: LD_INT 1
54431: PUSH
54432: EMPTY
54433: LIST
54434: LIST
54435: PUSH
54436: LD_INT 1
54438: NEG
54439: PUSH
54440: LD_INT 0
54442: PUSH
54443: EMPTY
54444: LIST
54445: LIST
54446: PUSH
54447: LD_INT 1
54449: NEG
54450: PUSH
54451: LD_INT 1
54453: NEG
54454: PUSH
54455: EMPTY
54456: LIST
54457: LIST
54458: PUSH
54459: LD_INT 1
54461: PUSH
54462: LD_INT 1
54464: NEG
54465: PUSH
54466: EMPTY
54467: LIST
54468: LIST
54469: PUSH
54470: LD_INT 2
54472: PUSH
54473: LD_INT 0
54475: PUSH
54476: EMPTY
54477: LIST
54478: LIST
54479: PUSH
54480: LD_INT 2
54482: PUSH
54483: LD_INT 1
54485: PUSH
54486: EMPTY
54487: LIST
54488: LIST
54489: PUSH
54490: LD_INT 2
54492: PUSH
54493: LD_INT 2
54495: PUSH
54496: EMPTY
54497: LIST
54498: LIST
54499: PUSH
54500: LD_INT 1
54502: PUSH
54503: LD_INT 2
54505: PUSH
54506: EMPTY
54507: LIST
54508: LIST
54509: PUSH
54510: EMPTY
54511: LIST
54512: LIST
54513: LIST
54514: LIST
54515: LIST
54516: LIST
54517: LIST
54518: LIST
54519: LIST
54520: LIST
54521: LIST
54522: LIST
54523: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
54524: LD_ADDR_VAR 0 50
54528: PUSH
54529: LD_INT 0
54531: PUSH
54532: LD_INT 0
54534: PUSH
54535: EMPTY
54536: LIST
54537: LIST
54538: PUSH
54539: LD_INT 0
54541: PUSH
54542: LD_INT 1
54544: NEG
54545: PUSH
54546: EMPTY
54547: LIST
54548: LIST
54549: PUSH
54550: LD_INT 1
54552: PUSH
54553: LD_INT 0
54555: PUSH
54556: EMPTY
54557: LIST
54558: LIST
54559: PUSH
54560: LD_INT 1
54562: PUSH
54563: LD_INT 1
54565: PUSH
54566: EMPTY
54567: LIST
54568: LIST
54569: PUSH
54570: LD_INT 0
54572: PUSH
54573: LD_INT 1
54575: PUSH
54576: EMPTY
54577: LIST
54578: LIST
54579: PUSH
54580: LD_INT 1
54582: NEG
54583: PUSH
54584: LD_INT 0
54586: PUSH
54587: EMPTY
54588: LIST
54589: LIST
54590: PUSH
54591: LD_INT 1
54593: NEG
54594: PUSH
54595: LD_INT 1
54597: NEG
54598: PUSH
54599: EMPTY
54600: LIST
54601: LIST
54602: PUSH
54603: LD_INT 2
54605: PUSH
54606: LD_INT 1
54608: PUSH
54609: EMPTY
54610: LIST
54611: LIST
54612: PUSH
54613: LD_INT 2
54615: PUSH
54616: LD_INT 2
54618: PUSH
54619: EMPTY
54620: LIST
54621: LIST
54622: PUSH
54623: LD_INT 1
54625: PUSH
54626: LD_INT 2
54628: PUSH
54629: EMPTY
54630: LIST
54631: LIST
54632: PUSH
54633: LD_INT 0
54635: PUSH
54636: LD_INT 2
54638: PUSH
54639: EMPTY
54640: LIST
54641: LIST
54642: PUSH
54643: LD_INT 1
54645: NEG
54646: PUSH
54647: LD_INT 1
54649: PUSH
54650: EMPTY
54651: LIST
54652: LIST
54653: PUSH
54654: EMPTY
54655: LIST
54656: LIST
54657: LIST
54658: LIST
54659: LIST
54660: LIST
54661: LIST
54662: LIST
54663: LIST
54664: LIST
54665: LIST
54666: LIST
54667: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
54668: LD_ADDR_VAR 0 51
54672: PUSH
54673: LD_INT 0
54675: PUSH
54676: LD_INT 0
54678: PUSH
54679: EMPTY
54680: LIST
54681: LIST
54682: PUSH
54683: LD_INT 0
54685: PUSH
54686: LD_INT 1
54688: NEG
54689: PUSH
54690: EMPTY
54691: LIST
54692: LIST
54693: PUSH
54694: LD_INT 1
54696: PUSH
54697: LD_INT 0
54699: PUSH
54700: EMPTY
54701: LIST
54702: LIST
54703: PUSH
54704: LD_INT 1
54706: PUSH
54707: LD_INT 1
54709: PUSH
54710: EMPTY
54711: LIST
54712: LIST
54713: PUSH
54714: LD_INT 0
54716: PUSH
54717: LD_INT 1
54719: PUSH
54720: EMPTY
54721: LIST
54722: LIST
54723: PUSH
54724: LD_INT 1
54726: NEG
54727: PUSH
54728: LD_INT 0
54730: PUSH
54731: EMPTY
54732: LIST
54733: LIST
54734: PUSH
54735: LD_INT 1
54737: NEG
54738: PUSH
54739: LD_INT 1
54741: NEG
54742: PUSH
54743: EMPTY
54744: LIST
54745: LIST
54746: PUSH
54747: LD_INT 1
54749: PUSH
54750: LD_INT 2
54752: PUSH
54753: EMPTY
54754: LIST
54755: LIST
54756: PUSH
54757: LD_INT 0
54759: PUSH
54760: LD_INT 2
54762: PUSH
54763: EMPTY
54764: LIST
54765: LIST
54766: PUSH
54767: LD_INT 1
54769: NEG
54770: PUSH
54771: LD_INT 1
54773: PUSH
54774: EMPTY
54775: LIST
54776: LIST
54777: PUSH
54778: LD_INT 2
54780: NEG
54781: PUSH
54782: LD_INT 0
54784: PUSH
54785: EMPTY
54786: LIST
54787: LIST
54788: PUSH
54789: LD_INT 2
54791: NEG
54792: PUSH
54793: LD_INT 1
54795: NEG
54796: PUSH
54797: EMPTY
54798: LIST
54799: LIST
54800: PUSH
54801: EMPTY
54802: LIST
54803: LIST
54804: LIST
54805: LIST
54806: LIST
54807: LIST
54808: LIST
54809: LIST
54810: LIST
54811: LIST
54812: LIST
54813: LIST
54814: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54815: LD_ADDR_VAR 0 52
54819: PUSH
54820: LD_INT 0
54822: PUSH
54823: LD_INT 0
54825: PUSH
54826: EMPTY
54827: LIST
54828: LIST
54829: PUSH
54830: LD_INT 0
54832: PUSH
54833: LD_INT 1
54835: NEG
54836: PUSH
54837: EMPTY
54838: LIST
54839: LIST
54840: PUSH
54841: LD_INT 1
54843: PUSH
54844: LD_INT 0
54846: PUSH
54847: EMPTY
54848: LIST
54849: LIST
54850: PUSH
54851: LD_INT 1
54853: PUSH
54854: LD_INT 1
54856: PUSH
54857: EMPTY
54858: LIST
54859: LIST
54860: PUSH
54861: LD_INT 0
54863: PUSH
54864: LD_INT 1
54866: PUSH
54867: EMPTY
54868: LIST
54869: LIST
54870: PUSH
54871: LD_INT 1
54873: NEG
54874: PUSH
54875: LD_INT 0
54877: PUSH
54878: EMPTY
54879: LIST
54880: LIST
54881: PUSH
54882: LD_INT 1
54884: NEG
54885: PUSH
54886: LD_INT 1
54888: NEG
54889: PUSH
54890: EMPTY
54891: LIST
54892: LIST
54893: PUSH
54894: LD_INT 1
54896: NEG
54897: PUSH
54898: LD_INT 2
54900: NEG
54901: PUSH
54902: EMPTY
54903: LIST
54904: LIST
54905: PUSH
54906: LD_INT 1
54908: NEG
54909: PUSH
54910: LD_INT 1
54912: PUSH
54913: EMPTY
54914: LIST
54915: LIST
54916: PUSH
54917: LD_INT 2
54919: NEG
54920: PUSH
54921: LD_INT 0
54923: PUSH
54924: EMPTY
54925: LIST
54926: LIST
54927: PUSH
54928: LD_INT 2
54930: NEG
54931: PUSH
54932: LD_INT 1
54934: NEG
54935: PUSH
54936: EMPTY
54937: LIST
54938: LIST
54939: PUSH
54940: LD_INT 2
54942: NEG
54943: PUSH
54944: LD_INT 2
54946: NEG
54947: PUSH
54948: EMPTY
54949: LIST
54950: LIST
54951: PUSH
54952: EMPTY
54953: LIST
54954: LIST
54955: LIST
54956: LIST
54957: LIST
54958: LIST
54959: LIST
54960: LIST
54961: LIST
54962: LIST
54963: LIST
54964: LIST
54965: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54966: LD_ADDR_VAR 0 53
54970: PUSH
54971: LD_INT 0
54973: PUSH
54974: LD_INT 0
54976: PUSH
54977: EMPTY
54978: LIST
54979: LIST
54980: PUSH
54981: LD_INT 0
54983: PUSH
54984: LD_INT 1
54986: NEG
54987: PUSH
54988: EMPTY
54989: LIST
54990: LIST
54991: PUSH
54992: LD_INT 1
54994: PUSH
54995: LD_INT 0
54997: PUSH
54998: EMPTY
54999: LIST
55000: LIST
55001: PUSH
55002: LD_INT 1
55004: PUSH
55005: LD_INT 1
55007: PUSH
55008: EMPTY
55009: LIST
55010: LIST
55011: PUSH
55012: LD_INT 0
55014: PUSH
55015: LD_INT 1
55017: PUSH
55018: EMPTY
55019: LIST
55020: LIST
55021: PUSH
55022: LD_INT 1
55024: NEG
55025: PUSH
55026: LD_INT 0
55028: PUSH
55029: EMPTY
55030: LIST
55031: LIST
55032: PUSH
55033: LD_INT 1
55035: NEG
55036: PUSH
55037: LD_INT 1
55039: NEG
55040: PUSH
55041: EMPTY
55042: LIST
55043: LIST
55044: PUSH
55045: LD_INT 1
55047: NEG
55048: PUSH
55049: LD_INT 2
55051: NEG
55052: PUSH
55053: EMPTY
55054: LIST
55055: LIST
55056: PUSH
55057: LD_INT 0
55059: PUSH
55060: LD_INT 2
55062: NEG
55063: PUSH
55064: EMPTY
55065: LIST
55066: LIST
55067: PUSH
55068: LD_INT 1
55070: PUSH
55071: LD_INT 1
55073: NEG
55074: PUSH
55075: EMPTY
55076: LIST
55077: LIST
55078: PUSH
55079: LD_INT 2
55081: PUSH
55082: LD_INT 0
55084: PUSH
55085: EMPTY
55086: LIST
55087: LIST
55088: PUSH
55089: LD_INT 2
55091: PUSH
55092: LD_INT 1
55094: PUSH
55095: EMPTY
55096: LIST
55097: LIST
55098: PUSH
55099: LD_INT 2
55101: PUSH
55102: LD_INT 2
55104: PUSH
55105: EMPTY
55106: LIST
55107: LIST
55108: PUSH
55109: LD_INT 1
55111: PUSH
55112: LD_INT 2
55114: PUSH
55115: EMPTY
55116: LIST
55117: LIST
55118: PUSH
55119: LD_INT 0
55121: PUSH
55122: LD_INT 2
55124: PUSH
55125: EMPTY
55126: LIST
55127: LIST
55128: PUSH
55129: LD_INT 1
55131: NEG
55132: PUSH
55133: LD_INT 1
55135: PUSH
55136: EMPTY
55137: LIST
55138: LIST
55139: PUSH
55140: LD_INT 2
55142: NEG
55143: PUSH
55144: LD_INT 0
55146: PUSH
55147: EMPTY
55148: LIST
55149: LIST
55150: PUSH
55151: LD_INT 2
55153: NEG
55154: PUSH
55155: LD_INT 1
55157: NEG
55158: PUSH
55159: EMPTY
55160: LIST
55161: LIST
55162: PUSH
55163: LD_INT 2
55165: NEG
55166: PUSH
55167: LD_INT 2
55169: NEG
55170: PUSH
55171: EMPTY
55172: LIST
55173: LIST
55174: PUSH
55175: EMPTY
55176: LIST
55177: LIST
55178: LIST
55179: LIST
55180: LIST
55181: LIST
55182: LIST
55183: LIST
55184: LIST
55185: LIST
55186: LIST
55187: LIST
55188: LIST
55189: LIST
55190: LIST
55191: LIST
55192: LIST
55193: LIST
55194: LIST
55195: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55196: LD_ADDR_VAR 0 54
55200: PUSH
55201: LD_INT 0
55203: PUSH
55204: LD_INT 0
55206: PUSH
55207: EMPTY
55208: LIST
55209: LIST
55210: PUSH
55211: LD_INT 0
55213: PUSH
55214: LD_INT 1
55216: NEG
55217: PUSH
55218: EMPTY
55219: LIST
55220: LIST
55221: PUSH
55222: LD_INT 1
55224: PUSH
55225: LD_INT 0
55227: PUSH
55228: EMPTY
55229: LIST
55230: LIST
55231: PUSH
55232: LD_INT 1
55234: PUSH
55235: LD_INT 1
55237: PUSH
55238: EMPTY
55239: LIST
55240: LIST
55241: PUSH
55242: LD_INT 0
55244: PUSH
55245: LD_INT 1
55247: PUSH
55248: EMPTY
55249: LIST
55250: LIST
55251: PUSH
55252: LD_INT 1
55254: NEG
55255: PUSH
55256: LD_INT 0
55258: PUSH
55259: EMPTY
55260: LIST
55261: LIST
55262: PUSH
55263: LD_INT 1
55265: NEG
55266: PUSH
55267: LD_INT 1
55269: NEG
55270: PUSH
55271: EMPTY
55272: LIST
55273: LIST
55274: PUSH
55275: LD_INT 1
55277: NEG
55278: PUSH
55279: LD_INT 2
55281: NEG
55282: PUSH
55283: EMPTY
55284: LIST
55285: LIST
55286: PUSH
55287: LD_INT 0
55289: PUSH
55290: LD_INT 2
55292: NEG
55293: PUSH
55294: EMPTY
55295: LIST
55296: LIST
55297: PUSH
55298: LD_INT 1
55300: PUSH
55301: LD_INT 1
55303: NEG
55304: PUSH
55305: EMPTY
55306: LIST
55307: LIST
55308: PUSH
55309: LD_INT 2
55311: PUSH
55312: LD_INT 0
55314: PUSH
55315: EMPTY
55316: LIST
55317: LIST
55318: PUSH
55319: LD_INT 2
55321: PUSH
55322: LD_INT 1
55324: PUSH
55325: EMPTY
55326: LIST
55327: LIST
55328: PUSH
55329: LD_INT 2
55331: PUSH
55332: LD_INT 2
55334: PUSH
55335: EMPTY
55336: LIST
55337: LIST
55338: PUSH
55339: LD_INT 1
55341: PUSH
55342: LD_INT 2
55344: PUSH
55345: EMPTY
55346: LIST
55347: LIST
55348: PUSH
55349: LD_INT 0
55351: PUSH
55352: LD_INT 2
55354: PUSH
55355: EMPTY
55356: LIST
55357: LIST
55358: PUSH
55359: LD_INT 1
55361: NEG
55362: PUSH
55363: LD_INT 1
55365: PUSH
55366: EMPTY
55367: LIST
55368: LIST
55369: PUSH
55370: LD_INT 2
55372: NEG
55373: PUSH
55374: LD_INT 0
55376: PUSH
55377: EMPTY
55378: LIST
55379: LIST
55380: PUSH
55381: LD_INT 2
55383: NEG
55384: PUSH
55385: LD_INT 1
55387: NEG
55388: PUSH
55389: EMPTY
55390: LIST
55391: LIST
55392: PUSH
55393: LD_INT 2
55395: NEG
55396: PUSH
55397: LD_INT 2
55399: NEG
55400: PUSH
55401: EMPTY
55402: LIST
55403: LIST
55404: PUSH
55405: EMPTY
55406: LIST
55407: LIST
55408: LIST
55409: LIST
55410: LIST
55411: LIST
55412: LIST
55413: LIST
55414: LIST
55415: LIST
55416: LIST
55417: LIST
55418: LIST
55419: LIST
55420: LIST
55421: LIST
55422: LIST
55423: LIST
55424: LIST
55425: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55426: LD_ADDR_VAR 0 55
55430: PUSH
55431: LD_INT 0
55433: PUSH
55434: LD_INT 0
55436: PUSH
55437: EMPTY
55438: LIST
55439: LIST
55440: PUSH
55441: LD_INT 0
55443: PUSH
55444: LD_INT 1
55446: NEG
55447: PUSH
55448: EMPTY
55449: LIST
55450: LIST
55451: PUSH
55452: LD_INT 1
55454: PUSH
55455: LD_INT 0
55457: PUSH
55458: EMPTY
55459: LIST
55460: LIST
55461: PUSH
55462: LD_INT 1
55464: PUSH
55465: LD_INT 1
55467: PUSH
55468: EMPTY
55469: LIST
55470: LIST
55471: PUSH
55472: LD_INT 0
55474: PUSH
55475: LD_INT 1
55477: PUSH
55478: EMPTY
55479: LIST
55480: LIST
55481: PUSH
55482: LD_INT 1
55484: NEG
55485: PUSH
55486: LD_INT 0
55488: PUSH
55489: EMPTY
55490: LIST
55491: LIST
55492: PUSH
55493: LD_INT 1
55495: NEG
55496: PUSH
55497: LD_INT 1
55499: NEG
55500: PUSH
55501: EMPTY
55502: LIST
55503: LIST
55504: PUSH
55505: LD_INT 1
55507: NEG
55508: PUSH
55509: LD_INT 2
55511: NEG
55512: PUSH
55513: EMPTY
55514: LIST
55515: LIST
55516: PUSH
55517: LD_INT 0
55519: PUSH
55520: LD_INT 2
55522: NEG
55523: PUSH
55524: EMPTY
55525: LIST
55526: LIST
55527: PUSH
55528: LD_INT 1
55530: PUSH
55531: LD_INT 1
55533: NEG
55534: PUSH
55535: EMPTY
55536: LIST
55537: LIST
55538: PUSH
55539: LD_INT 2
55541: PUSH
55542: LD_INT 0
55544: PUSH
55545: EMPTY
55546: LIST
55547: LIST
55548: PUSH
55549: LD_INT 2
55551: PUSH
55552: LD_INT 1
55554: PUSH
55555: EMPTY
55556: LIST
55557: LIST
55558: PUSH
55559: LD_INT 2
55561: PUSH
55562: LD_INT 2
55564: PUSH
55565: EMPTY
55566: LIST
55567: LIST
55568: PUSH
55569: LD_INT 1
55571: PUSH
55572: LD_INT 2
55574: PUSH
55575: EMPTY
55576: LIST
55577: LIST
55578: PUSH
55579: LD_INT 0
55581: PUSH
55582: LD_INT 2
55584: PUSH
55585: EMPTY
55586: LIST
55587: LIST
55588: PUSH
55589: LD_INT 1
55591: NEG
55592: PUSH
55593: LD_INT 1
55595: PUSH
55596: EMPTY
55597: LIST
55598: LIST
55599: PUSH
55600: LD_INT 2
55602: NEG
55603: PUSH
55604: LD_INT 0
55606: PUSH
55607: EMPTY
55608: LIST
55609: LIST
55610: PUSH
55611: LD_INT 2
55613: NEG
55614: PUSH
55615: LD_INT 1
55617: NEG
55618: PUSH
55619: EMPTY
55620: LIST
55621: LIST
55622: PUSH
55623: LD_INT 2
55625: NEG
55626: PUSH
55627: LD_INT 2
55629: NEG
55630: PUSH
55631: EMPTY
55632: LIST
55633: LIST
55634: PUSH
55635: EMPTY
55636: LIST
55637: LIST
55638: LIST
55639: LIST
55640: LIST
55641: LIST
55642: LIST
55643: LIST
55644: LIST
55645: LIST
55646: LIST
55647: LIST
55648: LIST
55649: LIST
55650: LIST
55651: LIST
55652: LIST
55653: LIST
55654: LIST
55655: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55656: LD_ADDR_VAR 0 56
55660: PUSH
55661: LD_INT 0
55663: PUSH
55664: LD_INT 0
55666: PUSH
55667: EMPTY
55668: LIST
55669: LIST
55670: PUSH
55671: LD_INT 0
55673: PUSH
55674: LD_INT 1
55676: NEG
55677: PUSH
55678: EMPTY
55679: LIST
55680: LIST
55681: PUSH
55682: LD_INT 1
55684: PUSH
55685: LD_INT 0
55687: PUSH
55688: EMPTY
55689: LIST
55690: LIST
55691: PUSH
55692: LD_INT 1
55694: PUSH
55695: LD_INT 1
55697: PUSH
55698: EMPTY
55699: LIST
55700: LIST
55701: PUSH
55702: LD_INT 0
55704: PUSH
55705: LD_INT 1
55707: PUSH
55708: EMPTY
55709: LIST
55710: LIST
55711: PUSH
55712: LD_INT 1
55714: NEG
55715: PUSH
55716: LD_INT 0
55718: PUSH
55719: EMPTY
55720: LIST
55721: LIST
55722: PUSH
55723: LD_INT 1
55725: NEG
55726: PUSH
55727: LD_INT 1
55729: NEG
55730: PUSH
55731: EMPTY
55732: LIST
55733: LIST
55734: PUSH
55735: LD_INT 1
55737: NEG
55738: PUSH
55739: LD_INT 2
55741: NEG
55742: PUSH
55743: EMPTY
55744: LIST
55745: LIST
55746: PUSH
55747: LD_INT 0
55749: PUSH
55750: LD_INT 2
55752: NEG
55753: PUSH
55754: EMPTY
55755: LIST
55756: LIST
55757: PUSH
55758: LD_INT 1
55760: PUSH
55761: LD_INT 1
55763: NEG
55764: PUSH
55765: EMPTY
55766: LIST
55767: LIST
55768: PUSH
55769: LD_INT 2
55771: PUSH
55772: LD_INT 0
55774: PUSH
55775: EMPTY
55776: LIST
55777: LIST
55778: PUSH
55779: LD_INT 2
55781: PUSH
55782: LD_INT 1
55784: PUSH
55785: EMPTY
55786: LIST
55787: LIST
55788: PUSH
55789: LD_INT 2
55791: PUSH
55792: LD_INT 2
55794: PUSH
55795: EMPTY
55796: LIST
55797: LIST
55798: PUSH
55799: LD_INT 1
55801: PUSH
55802: LD_INT 2
55804: PUSH
55805: EMPTY
55806: LIST
55807: LIST
55808: PUSH
55809: LD_INT 0
55811: PUSH
55812: LD_INT 2
55814: PUSH
55815: EMPTY
55816: LIST
55817: LIST
55818: PUSH
55819: LD_INT 1
55821: NEG
55822: PUSH
55823: LD_INT 1
55825: PUSH
55826: EMPTY
55827: LIST
55828: LIST
55829: PUSH
55830: LD_INT 2
55832: NEG
55833: PUSH
55834: LD_INT 0
55836: PUSH
55837: EMPTY
55838: LIST
55839: LIST
55840: PUSH
55841: LD_INT 2
55843: NEG
55844: PUSH
55845: LD_INT 1
55847: NEG
55848: PUSH
55849: EMPTY
55850: LIST
55851: LIST
55852: PUSH
55853: LD_INT 2
55855: NEG
55856: PUSH
55857: LD_INT 2
55859: NEG
55860: PUSH
55861: EMPTY
55862: LIST
55863: LIST
55864: PUSH
55865: EMPTY
55866: LIST
55867: LIST
55868: LIST
55869: LIST
55870: LIST
55871: LIST
55872: LIST
55873: LIST
55874: LIST
55875: LIST
55876: LIST
55877: LIST
55878: LIST
55879: LIST
55880: LIST
55881: LIST
55882: LIST
55883: LIST
55884: LIST
55885: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55886: LD_ADDR_VAR 0 57
55890: PUSH
55891: LD_INT 0
55893: PUSH
55894: LD_INT 0
55896: PUSH
55897: EMPTY
55898: LIST
55899: LIST
55900: PUSH
55901: LD_INT 0
55903: PUSH
55904: LD_INT 1
55906: NEG
55907: PUSH
55908: EMPTY
55909: LIST
55910: LIST
55911: PUSH
55912: LD_INT 1
55914: PUSH
55915: LD_INT 0
55917: PUSH
55918: EMPTY
55919: LIST
55920: LIST
55921: PUSH
55922: LD_INT 1
55924: PUSH
55925: LD_INT 1
55927: PUSH
55928: EMPTY
55929: LIST
55930: LIST
55931: PUSH
55932: LD_INT 0
55934: PUSH
55935: LD_INT 1
55937: PUSH
55938: EMPTY
55939: LIST
55940: LIST
55941: PUSH
55942: LD_INT 1
55944: NEG
55945: PUSH
55946: LD_INT 0
55948: PUSH
55949: EMPTY
55950: LIST
55951: LIST
55952: PUSH
55953: LD_INT 1
55955: NEG
55956: PUSH
55957: LD_INT 1
55959: NEG
55960: PUSH
55961: EMPTY
55962: LIST
55963: LIST
55964: PUSH
55965: LD_INT 1
55967: NEG
55968: PUSH
55969: LD_INT 2
55971: NEG
55972: PUSH
55973: EMPTY
55974: LIST
55975: LIST
55976: PUSH
55977: LD_INT 0
55979: PUSH
55980: LD_INT 2
55982: NEG
55983: PUSH
55984: EMPTY
55985: LIST
55986: LIST
55987: PUSH
55988: LD_INT 1
55990: PUSH
55991: LD_INT 1
55993: NEG
55994: PUSH
55995: EMPTY
55996: LIST
55997: LIST
55998: PUSH
55999: LD_INT 2
56001: PUSH
56002: LD_INT 0
56004: PUSH
56005: EMPTY
56006: LIST
56007: LIST
56008: PUSH
56009: LD_INT 2
56011: PUSH
56012: LD_INT 1
56014: PUSH
56015: EMPTY
56016: LIST
56017: LIST
56018: PUSH
56019: LD_INT 2
56021: PUSH
56022: LD_INT 2
56024: PUSH
56025: EMPTY
56026: LIST
56027: LIST
56028: PUSH
56029: LD_INT 1
56031: PUSH
56032: LD_INT 2
56034: PUSH
56035: EMPTY
56036: LIST
56037: LIST
56038: PUSH
56039: LD_INT 0
56041: PUSH
56042: LD_INT 2
56044: PUSH
56045: EMPTY
56046: LIST
56047: LIST
56048: PUSH
56049: LD_INT 1
56051: NEG
56052: PUSH
56053: LD_INT 1
56055: PUSH
56056: EMPTY
56057: LIST
56058: LIST
56059: PUSH
56060: LD_INT 2
56062: NEG
56063: PUSH
56064: LD_INT 0
56066: PUSH
56067: EMPTY
56068: LIST
56069: LIST
56070: PUSH
56071: LD_INT 2
56073: NEG
56074: PUSH
56075: LD_INT 1
56077: NEG
56078: PUSH
56079: EMPTY
56080: LIST
56081: LIST
56082: PUSH
56083: LD_INT 2
56085: NEG
56086: PUSH
56087: LD_INT 2
56089: NEG
56090: PUSH
56091: EMPTY
56092: LIST
56093: LIST
56094: PUSH
56095: EMPTY
56096: LIST
56097: LIST
56098: LIST
56099: LIST
56100: LIST
56101: LIST
56102: LIST
56103: LIST
56104: LIST
56105: LIST
56106: LIST
56107: LIST
56108: LIST
56109: LIST
56110: LIST
56111: LIST
56112: LIST
56113: LIST
56114: LIST
56115: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56116: LD_ADDR_VAR 0 58
56120: PUSH
56121: LD_INT 0
56123: PUSH
56124: LD_INT 0
56126: PUSH
56127: EMPTY
56128: LIST
56129: LIST
56130: PUSH
56131: LD_INT 0
56133: PUSH
56134: LD_INT 1
56136: NEG
56137: PUSH
56138: EMPTY
56139: LIST
56140: LIST
56141: PUSH
56142: LD_INT 1
56144: PUSH
56145: LD_INT 0
56147: PUSH
56148: EMPTY
56149: LIST
56150: LIST
56151: PUSH
56152: LD_INT 1
56154: PUSH
56155: LD_INT 1
56157: PUSH
56158: EMPTY
56159: LIST
56160: LIST
56161: PUSH
56162: LD_INT 0
56164: PUSH
56165: LD_INT 1
56167: PUSH
56168: EMPTY
56169: LIST
56170: LIST
56171: PUSH
56172: LD_INT 1
56174: NEG
56175: PUSH
56176: LD_INT 0
56178: PUSH
56179: EMPTY
56180: LIST
56181: LIST
56182: PUSH
56183: LD_INT 1
56185: NEG
56186: PUSH
56187: LD_INT 1
56189: NEG
56190: PUSH
56191: EMPTY
56192: LIST
56193: LIST
56194: PUSH
56195: LD_INT 1
56197: NEG
56198: PUSH
56199: LD_INT 2
56201: NEG
56202: PUSH
56203: EMPTY
56204: LIST
56205: LIST
56206: PUSH
56207: LD_INT 0
56209: PUSH
56210: LD_INT 2
56212: NEG
56213: PUSH
56214: EMPTY
56215: LIST
56216: LIST
56217: PUSH
56218: LD_INT 1
56220: PUSH
56221: LD_INT 1
56223: NEG
56224: PUSH
56225: EMPTY
56226: LIST
56227: LIST
56228: PUSH
56229: LD_INT 2
56231: PUSH
56232: LD_INT 0
56234: PUSH
56235: EMPTY
56236: LIST
56237: LIST
56238: PUSH
56239: LD_INT 2
56241: PUSH
56242: LD_INT 1
56244: PUSH
56245: EMPTY
56246: LIST
56247: LIST
56248: PUSH
56249: LD_INT 2
56251: PUSH
56252: LD_INT 2
56254: PUSH
56255: EMPTY
56256: LIST
56257: LIST
56258: PUSH
56259: LD_INT 1
56261: PUSH
56262: LD_INT 2
56264: PUSH
56265: EMPTY
56266: LIST
56267: LIST
56268: PUSH
56269: LD_INT 0
56271: PUSH
56272: LD_INT 2
56274: PUSH
56275: EMPTY
56276: LIST
56277: LIST
56278: PUSH
56279: LD_INT 1
56281: NEG
56282: PUSH
56283: LD_INT 1
56285: PUSH
56286: EMPTY
56287: LIST
56288: LIST
56289: PUSH
56290: LD_INT 2
56292: NEG
56293: PUSH
56294: LD_INT 0
56296: PUSH
56297: EMPTY
56298: LIST
56299: LIST
56300: PUSH
56301: LD_INT 2
56303: NEG
56304: PUSH
56305: LD_INT 1
56307: NEG
56308: PUSH
56309: EMPTY
56310: LIST
56311: LIST
56312: PUSH
56313: LD_INT 2
56315: NEG
56316: PUSH
56317: LD_INT 2
56319: NEG
56320: PUSH
56321: EMPTY
56322: LIST
56323: LIST
56324: PUSH
56325: EMPTY
56326: LIST
56327: LIST
56328: LIST
56329: LIST
56330: LIST
56331: LIST
56332: LIST
56333: LIST
56334: LIST
56335: LIST
56336: LIST
56337: LIST
56338: LIST
56339: LIST
56340: LIST
56341: LIST
56342: LIST
56343: LIST
56344: LIST
56345: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56346: LD_ADDR_VAR 0 59
56350: PUSH
56351: LD_INT 0
56353: PUSH
56354: LD_INT 0
56356: PUSH
56357: EMPTY
56358: LIST
56359: LIST
56360: PUSH
56361: LD_INT 0
56363: PUSH
56364: LD_INT 1
56366: NEG
56367: PUSH
56368: EMPTY
56369: LIST
56370: LIST
56371: PUSH
56372: LD_INT 1
56374: PUSH
56375: LD_INT 0
56377: PUSH
56378: EMPTY
56379: LIST
56380: LIST
56381: PUSH
56382: LD_INT 1
56384: PUSH
56385: LD_INT 1
56387: PUSH
56388: EMPTY
56389: LIST
56390: LIST
56391: PUSH
56392: LD_INT 0
56394: PUSH
56395: LD_INT 1
56397: PUSH
56398: EMPTY
56399: LIST
56400: LIST
56401: PUSH
56402: LD_INT 1
56404: NEG
56405: PUSH
56406: LD_INT 0
56408: PUSH
56409: EMPTY
56410: LIST
56411: LIST
56412: PUSH
56413: LD_INT 1
56415: NEG
56416: PUSH
56417: LD_INT 1
56419: NEG
56420: PUSH
56421: EMPTY
56422: LIST
56423: LIST
56424: PUSH
56425: EMPTY
56426: LIST
56427: LIST
56428: LIST
56429: LIST
56430: LIST
56431: LIST
56432: LIST
56433: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56434: LD_ADDR_VAR 0 60
56438: PUSH
56439: LD_INT 0
56441: PUSH
56442: LD_INT 0
56444: PUSH
56445: EMPTY
56446: LIST
56447: LIST
56448: PUSH
56449: LD_INT 0
56451: PUSH
56452: LD_INT 1
56454: NEG
56455: PUSH
56456: EMPTY
56457: LIST
56458: LIST
56459: PUSH
56460: LD_INT 1
56462: PUSH
56463: LD_INT 0
56465: PUSH
56466: EMPTY
56467: LIST
56468: LIST
56469: PUSH
56470: LD_INT 1
56472: PUSH
56473: LD_INT 1
56475: PUSH
56476: EMPTY
56477: LIST
56478: LIST
56479: PUSH
56480: LD_INT 0
56482: PUSH
56483: LD_INT 1
56485: PUSH
56486: EMPTY
56487: LIST
56488: LIST
56489: PUSH
56490: LD_INT 1
56492: NEG
56493: PUSH
56494: LD_INT 0
56496: PUSH
56497: EMPTY
56498: LIST
56499: LIST
56500: PUSH
56501: LD_INT 1
56503: NEG
56504: PUSH
56505: LD_INT 1
56507: NEG
56508: PUSH
56509: EMPTY
56510: LIST
56511: LIST
56512: PUSH
56513: EMPTY
56514: LIST
56515: LIST
56516: LIST
56517: LIST
56518: LIST
56519: LIST
56520: LIST
56521: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56522: LD_ADDR_VAR 0 61
56526: PUSH
56527: LD_INT 0
56529: PUSH
56530: LD_INT 0
56532: PUSH
56533: EMPTY
56534: LIST
56535: LIST
56536: PUSH
56537: LD_INT 0
56539: PUSH
56540: LD_INT 1
56542: NEG
56543: PUSH
56544: EMPTY
56545: LIST
56546: LIST
56547: PUSH
56548: LD_INT 1
56550: PUSH
56551: LD_INT 0
56553: PUSH
56554: EMPTY
56555: LIST
56556: LIST
56557: PUSH
56558: LD_INT 1
56560: PUSH
56561: LD_INT 1
56563: PUSH
56564: EMPTY
56565: LIST
56566: LIST
56567: PUSH
56568: LD_INT 0
56570: PUSH
56571: LD_INT 1
56573: PUSH
56574: EMPTY
56575: LIST
56576: LIST
56577: PUSH
56578: LD_INT 1
56580: NEG
56581: PUSH
56582: LD_INT 0
56584: PUSH
56585: EMPTY
56586: LIST
56587: LIST
56588: PUSH
56589: LD_INT 1
56591: NEG
56592: PUSH
56593: LD_INT 1
56595: NEG
56596: PUSH
56597: EMPTY
56598: LIST
56599: LIST
56600: PUSH
56601: EMPTY
56602: LIST
56603: LIST
56604: LIST
56605: LIST
56606: LIST
56607: LIST
56608: LIST
56609: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56610: LD_ADDR_VAR 0 62
56614: PUSH
56615: LD_INT 0
56617: PUSH
56618: LD_INT 0
56620: PUSH
56621: EMPTY
56622: LIST
56623: LIST
56624: PUSH
56625: LD_INT 0
56627: PUSH
56628: LD_INT 1
56630: NEG
56631: PUSH
56632: EMPTY
56633: LIST
56634: LIST
56635: PUSH
56636: LD_INT 1
56638: PUSH
56639: LD_INT 0
56641: PUSH
56642: EMPTY
56643: LIST
56644: LIST
56645: PUSH
56646: LD_INT 1
56648: PUSH
56649: LD_INT 1
56651: PUSH
56652: EMPTY
56653: LIST
56654: LIST
56655: PUSH
56656: LD_INT 0
56658: PUSH
56659: LD_INT 1
56661: PUSH
56662: EMPTY
56663: LIST
56664: LIST
56665: PUSH
56666: LD_INT 1
56668: NEG
56669: PUSH
56670: LD_INT 0
56672: PUSH
56673: EMPTY
56674: LIST
56675: LIST
56676: PUSH
56677: LD_INT 1
56679: NEG
56680: PUSH
56681: LD_INT 1
56683: NEG
56684: PUSH
56685: EMPTY
56686: LIST
56687: LIST
56688: PUSH
56689: EMPTY
56690: LIST
56691: LIST
56692: LIST
56693: LIST
56694: LIST
56695: LIST
56696: LIST
56697: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56698: LD_ADDR_VAR 0 63
56702: PUSH
56703: LD_INT 0
56705: PUSH
56706: LD_INT 0
56708: PUSH
56709: EMPTY
56710: LIST
56711: LIST
56712: PUSH
56713: LD_INT 0
56715: PUSH
56716: LD_INT 1
56718: NEG
56719: PUSH
56720: EMPTY
56721: LIST
56722: LIST
56723: PUSH
56724: LD_INT 1
56726: PUSH
56727: LD_INT 0
56729: PUSH
56730: EMPTY
56731: LIST
56732: LIST
56733: PUSH
56734: LD_INT 1
56736: PUSH
56737: LD_INT 1
56739: PUSH
56740: EMPTY
56741: LIST
56742: LIST
56743: PUSH
56744: LD_INT 0
56746: PUSH
56747: LD_INT 1
56749: PUSH
56750: EMPTY
56751: LIST
56752: LIST
56753: PUSH
56754: LD_INT 1
56756: NEG
56757: PUSH
56758: LD_INT 0
56760: PUSH
56761: EMPTY
56762: LIST
56763: LIST
56764: PUSH
56765: LD_INT 1
56767: NEG
56768: PUSH
56769: LD_INT 1
56771: NEG
56772: PUSH
56773: EMPTY
56774: LIST
56775: LIST
56776: PUSH
56777: EMPTY
56778: LIST
56779: LIST
56780: LIST
56781: LIST
56782: LIST
56783: LIST
56784: LIST
56785: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56786: LD_ADDR_VAR 0 64
56790: PUSH
56791: LD_INT 0
56793: PUSH
56794: LD_INT 0
56796: PUSH
56797: EMPTY
56798: LIST
56799: LIST
56800: PUSH
56801: LD_INT 0
56803: PUSH
56804: LD_INT 1
56806: NEG
56807: PUSH
56808: EMPTY
56809: LIST
56810: LIST
56811: PUSH
56812: LD_INT 1
56814: PUSH
56815: LD_INT 0
56817: PUSH
56818: EMPTY
56819: LIST
56820: LIST
56821: PUSH
56822: LD_INT 1
56824: PUSH
56825: LD_INT 1
56827: PUSH
56828: EMPTY
56829: LIST
56830: LIST
56831: PUSH
56832: LD_INT 0
56834: PUSH
56835: LD_INT 1
56837: PUSH
56838: EMPTY
56839: LIST
56840: LIST
56841: PUSH
56842: LD_INT 1
56844: NEG
56845: PUSH
56846: LD_INT 0
56848: PUSH
56849: EMPTY
56850: LIST
56851: LIST
56852: PUSH
56853: LD_INT 1
56855: NEG
56856: PUSH
56857: LD_INT 1
56859: NEG
56860: PUSH
56861: EMPTY
56862: LIST
56863: LIST
56864: PUSH
56865: EMPTY
56866: LIST
56867: LIST
56868: LIST
56869: LIST
56870: LIST
56871: LIST
56872: LIST
56873: ST_TO_ADDR
// end ; 1 :
56874: GO 62771
56876: LD_INT 1
56878: DOUBLE
56879: EQUAL
56880: IFTRUE 56884
56882: GO 59507
56884: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56885: LD_ADDR_VAR 0 11
56889: PUSH
56890: LD_INT 1
56892: NEG
56893: PUSH
56894: LD_INT 3
56896: NEG
56897: PUSH
56898: EMPTY
56899: LIST
56900: LIST
56901: PUSH
56902: LD_INT 0
56904: PUSH
56905: LD_INT 3
56907: NEG
56908: PUSH
56909: EMPTY
56910: LIST
56911: LIST
56912: PUSH
56913: LD_INT 1
56915: PUSH
56916: LD_INT 2
56918: NEG
56919: PUSH
56920: EMPTY
56921: LIST
56922: LIST
56923: PUSH
56924: EMPTY
56925: LIST
56926: LIST
56927: LIST
56928: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56929: LD_ADDR_VAR 0 12
56933: PUSH
56934: LD_INT 2
56936: PUSH
56937: LD_INT 1
56939: NEG
56940: PUSH
56941: EMPTY
56942: LIST
56943: LIST
56944: PUSH
56945: LD_INT 3
56947: PUSH
56948: LD_INT 0
56950: PUSH
56951: EMPTY
56952: LIST
56953: LIST
56954: PUSH
56955: LD_INT 3
56957: PUSH
56958: LD_INT 1
56960: PUSH
56961: EMPTY
56962: LIST
56963: LIST
56964: PUSH
56965: EMPTY
56966: LIST
56967: LIST
56968: LIST
56969: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56970: LD_ADDR_VAR 0 13
56974: PUSH
56975: LD_INT 3
56977: PUSH
56978: LD_INT 2
56980: PUSH
56981: EMPTY
56982: LIST
56983: LIST
56984: PUSH
56985: LD_INT 3
56987: PUSH
56988: LD_INT 3
56990: PUSH
56991: EMPTY
56992: LIST
56993: LIST
56994: PUSH
56995: LD_INT 2
56997: PUSH
56998: LD_INT 3
57000: PUSH
57001: EMPTY
57002: LIST
57003: LIST
57004: PUSH
57005: EMPTY
57006: LIST
57007: LIST
57008: LIST
57009: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57010: LD_ADDR_VAR 0 14
57014: PUSH
57015: LD_INT 1
57017: PUSH
57018: LD_INT 3
57020: PUSH
57021: EMPTY
57022: LIST
57023: LIST
57024: PUSH
57025: LD_INT 0
57027: PUSH
57028: LD_INT 3
57030: PUSH
57031: EMPTY
57032: LIST
57033: LIST
57034: PUSH
57035: LD_INT 1
57037: NEG
57038: PUSH
57039: LD_INT 2
57041: PUSH
57042: EMPTY
57043: LIST
57044: LIST
57045: PUSH
57046: EMPTY
57047: LIST
57048: LIST
57049: LIST
57050: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57051: LD_ADDR_VAR 0 15
57055: PUSH
57056: LD_INT 2
57058: NEG
57059: PUSH
57060: LD_INT 1
57062: PUSH
57063: EMPTY
57064: LIST
57065: LIST
57066: PUSH
57067: LD_INT 3
57069: NEG
57070: PUSH
57071: LD_INT 0
57073: PUSH
57074: EMPTY
57075: LIST
57076: LIST
57077: PUSH
57078: LD_INT 3
57080: NEG
57081: PUSH
57082: LD_INT 1
57084: NEG
57085: PUSH
57086: EMPTY
57087: LIST
57088: LIST
57089: PUSH
57090: EMPTY
57091: LIST
57092: LIST
57093: LIST
57094: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57095: LD_ADDR_VAR 0 16
57099: PUSH
57100: LD_INT 2
57102: NEG
57103: PUSH
57104: LD_INT 3
57106: NEG
57107: PUSH
57108: EMPTY
57109: LIST
57110: LIST
57111: PUSH
57112: LD_INT 3
57114: NEG
57115: PUSH
57116: LD_INT 2
57118: NEG
57119: PUSH
57120: EMPTY
57121: LIST
57122: LIST
57123: PUSH
57124: LD_INT 3
57126: NEG
57127: PUSH
57128: LD_INT 3
57130: NEG
57131: PUSH
57132: EMPTY
57133: LIST
57134: LIST
57135: PUSH
57136: EMPTY
57137: LIST
57138: LIST
57139: LIST
57140: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57141: LD_ADDR_VAR 0 17
57145: PUSH
57146: LD_INT 1
57148: NEG
57149: PUSH
57150: LD_INT 3
57152: NEG
57153: PUSH
57154: EMPTY
57155: LIST
57156: LIST
57157: PUSH
57158: LD_INT 0
57160: PUSH
57161: LD_INT 3
57163: NEG
57164: PUSH
57165: EMPTY
57166: LIST
57167: LIST
57168: PUSH
57169: LD_INT 1
57171: PUSH
57172: LD_INT 2
57174: NEG
57175: PUSH
57176: EMPTY
57177: LIST
57178: LIST
57179: PUSH
57180: EMPTY
57181: LIST
57182: LIST
57183: LIST
57184: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57185: LD_ADDR_VAR 0 18
57189: PUSH
57190: LD_INT 2
57192: PUSH
57193: LD_INT 1
57195: NEG
57196: PUSH
57197: EMPTY
57198: LIST
57199: LIST
57200: PUSH
57201: LD_INT 3
57203: PUSH
57204: LD_INT 0
57206: PUSH
57207: EMPTY
57208: LIST
57209: LIST
57210: PUSH
57211: LD_INT 3
57213: PUSH
57214: LD_INT 1
57216: PUSH
57217: EMPTY
57218: LIST
57219: LIST
57220: PUSH
57221: EMPTY
57222: LIST
57223: LIST
57224: LIST
57225: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57226: LD_ADDR_VAR 0 19
57230: PUSH
57231: LD_INT 3
57233: PUSH
57234: LD_INT 2
57236: PUSH
57237: EMPTY
57238: LIST
57239: LIST
57240: PUSH
57241: LD_INT 3
57243: PUSH
57244: LD_INT 3
57246: PUSH
57247: EMPTY
57248: LIST
57249: LIST
57250: PUSH
57251: LD_INT 2
57253: PUSH
57254: LD_INT 3
57256: PUSH
57257: EMPTY
57258: LIST
57259: LIST
57260: PUSH
57261: EMPTY
57262: LIST
57263: LIST
57264: LIST
57265: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57266: LD_ADDR_VAR 0 20
57270: PUSH
57271: LD_INT 1
57273: PUSH
57274: LD_INT 3
57276: PUSH
57277: EMPTY
57278: LIST
57279: LIST
57280: PUSH
57281: LD_INT 0
57283: PUSH
57284: LD_INT 3
57286: PUSH
57287: EMPTY
57288: LIST
57289: LIST
57290: PUSH
57291: LD_INT 1
57293: NEG
57294: PUSH
57295: LD_INT 2
57297: PUSH
57298: EMPTY
57299: LIST
57300: LIST
57301: PUSH
57302: EMPTY
57303: LIST
57304: LIST
57305: LIST
57306: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57307: LD_ADDR_VAR 0 21
57311: PUSH
57312: LD_INT 2
57314: NEG
57315: PUSH
57316: LD_INT 1
57318: PUSH
57319: EMPTY
57320: LIST
57321: LIST
57322: PUSH
57323: LD_INT 3
57325: NEG
57326: PUSH
57327: LD_INT 0
57329: PUSH
57330: EMPTY
57331: LIST
57332: LIST
57333: PUSH
57334: LD_INT 3
57336: NEG
57337: PUSH
57338: LD_INT 1
57340: NEG
57341: PUSH
57342: EMPTY
57343: LIST
57344: LIST
57345: PUSH
57346: EMPTY
57347: LIST
57348: LIST
57349: LIST
57350: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57351: LD_ADDR_VAR 0 22
57355: PUSH
57356: LD_INT 2
57358: NEG
57359: PUSH
57360: LD_INT 3
57362: NEG
57363: PUSH
57364: EMPTY
57365: LIST
57366: LIST
57367: PUSH
57368: LD_INT 3
57370: NEG
57371: PUSH
57372: LD_INT 2
57374: NEG
57375: PUSH
57376: EMPTY
57377: LIST
57378: LIST
57379: PUSH
57380: LD_INT 3
57382: NEG
57383: PUSH
57384: LD_INT 3
57386: NEG
57387: PUSH
57388: EMPTY
57389: LIST
57390: LIST
57391: PUSH
57392: EMPTY
57393: LIST
57394: LIST
57395: LIST
57396: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
57397: LD_ADDR_VAR 0 23
57401: PUSH
57402: LD_INT 0
57404: PUSH
57405: LD_INT 3
57407: NEG
57408: PUSH
57409: EMPTY
57410: LIST
57411: LIST
57412: PUSH
57413: LD_INT 1
57415: NEG
57416: PUSH
57417: LD_INT 4
57419: NEG
57420: PUSH
57421: EMPTY
57422: LIST
57423: LIST
57424: PUSH
57425: LD_INT 1
57427: PUSH
57428: LD_INT 3
57430: NEG
57431: PUSH
57432: EMPTY
57433: LIST
57434: LIST
57435: PUSH
57436: EMPTY
57437: LIST
57438: LIST
57439: LIST
57440: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
57441: LD_ADDR_VAR 0 24
57445: PUSH
57446: LD_INT 3
57448: PUSH
57449: LD_INT 0
57451: PUSH
57452: EMPTY
57453: LIST
57454: LIST
57455: PUSH
57456: LD_INT 3
57458: PUSH
57459: LD_INT 1
57461: NEG
57462: PUSH
57463: EMPTY
57464: LIST
57465: LIST
57466: PUSH
57467: LD_INT 4
57469: PUSH
57470: LD_INT 1
57472: PUSH
57473: EMPTY
57474: LIST
57475: LIST
57476: PUSH
57477: EMPTY
57478: LIST
57479: LIST
57480: LIST
57481: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
57482: LD_ADDR_VAR 0 25
57486: PUSH
57487: LD_INT 3
57489: PUSH
57490: LD_INT 3
57492: PUSH
57493: EMPTY
57494: LIST
57495: LIST
57496: PUSH
57497: LD_INT 4
57499: PUSH
57500: LD_INT 3
57502: PUSH
57503: EMPTY
57504: LIST
57505: LIST
57506: PUSH
57507: LD_INT 3
57509: PUSH
57510: LD_INT 4
57512: PUSH
57513: EMPTY
57514: LIST
57515: LIST
57516: PUSH
57517: EMPTY
57518: LIST
57519: LIST
57520: LIST
57521: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
57522: LD_ADDR_VAR 0 26
57526: PUSH
57527: LD_INT 0
57529: PUSH
57530: LD_INT 3
57532: PUSH
57533: EMPTY
57534: LIST
57535: LIST
57536: PUSH
57537: LD_INT 1
57539: PUSH
57540: LD_INT 4
57542: PUSH
57543: EMPTY
57544: LIST
57545: LIST
57546: PUSH
57547: LD_INT 1
57549: NEG
57550: PUSH
57551: LD_INT 3
57553: PUSH
57554: EMPTY
57555: LIST
57556: LIST
57557: PUSH
57558: EMPTY
57559: LIST
57560: LIST
57561: LIST
57562: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
57563: LD_ADDR_VAR 0 27
57567: PUSH
57568: LD_INT 3
57570: NEG
57571: PUSH
57572: LD_INT 0
57574: PUSH
57575: EMPTY
57576: LIST
57577: LIST
57578: PUSH
57579: LD_INT 3
57581: NEG
57582: PUSH
57583: LD_INT 1
57585: PUSH
57586: EMPTY
57587: LIST
57588: LIST
57589: PUSH
57590: LD_INT 4
57592: NEG
57593: PUSH
57594: LD_INT 1
57596: NEG
57597: PUSH
57598: EMPTY
57599: LIST
57600: LIST
57601: PUSH
57602: EMPTY
57603: LIST
57604: LIST
57605: LIST
57606: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
57607: LD_ADDR_VAR 0 28
57611: PUSH
57612: LD_INT 3
57614: NEG
57615: PUSH
57616: LD_INT 3
57618: NEG
57619: PUSH
57620: EMPTY
57621: LIST
57622: LIST
57623: PUSH
57624: LD_INT 3
57626: NEG
57627: PUSH
57628: LD_INT 4
57630: NEG
57631: PUSH
57632: EMPTY
57633: LIST
57634: LIST
57635: PUSH
57636: LD_INT 4
57638: NEG
57639: PUSH
57640: LD_INT 3
57642: NEG
57643: PUSH
57644: EMPTY
57645: LIST
57646: LIST
57647: PUSH
57648: EMPTY
57649: LIST
57650: LIST
57651: LIST
57652: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
57653: LD_ADDR_VAR 0 29
57657: PUSH
57658: LD_INT 1
57660: NEG
57661: PUSH
57662: LD_INT 3
57664: NEG
57665: PUSH
57666: EMPTY
57667: LIST
57668: LIST
57669: PUSH
57670: LD_INT 0
57672: PUSH
57673: LD_INT 3
57675: NEG
57676: PUSH
57677: EMPTY
57678: LIST
57679: LIST
57680: PUSH
57681: LD_INT 1
57683: PUSH
57684: LD_INT 2
57686: NEG
57687: PUSH
57688: EMPTY
57689: LIST
57690: LIST
57691: PUSH
57692: LD_INT 1
57694: NEG
57695: PUSH
57696: LD_INT 4
57698: NEG
57699: PUSH
57700: EMPTY
57701: LIST
57702: LIST
57703: PUSH
57704: LD_INT 0
57706: PUSH
57707: LD_INT 4
57709: NEG
57710: PUSH
57711: EMPTY
57712: LIST
57713: LIST
57714: PUSH
57715: LD_INT 1
57717: PUSH
57718: LD_INT 3
57720: NEG
57721: PUSH
57722: EMPTY
57723: LIST
57724: LIST
57725: PUSH
57726: LD_INT 1
57728: NEG
57729: PUSH
57730: LD_INT 5
57732: NEG
57733: PUSH
57734: EMPTY
57735: LIST
57736: LIST
57737: PUSH
57738: LD_INT 0
57740: PUSH
57741: LD_INT 5
57743: NEG
57744: PUSH
57745: EMPTY
57746: LIST
57747: LIST
57748: PUSH
57749: LD_INT 1
57751: PUSH
57752: LD_INT 4
57754: NEG
57755: PUSH
57756: EMPTY
57757: LIST
57758: LIST
57759: PUSH
57760: LD_INT 1
57762: NEG
57763: PUSH
57764: LD_INT 6
57766: NEG
57767: PUSH
57768: EMPTY
57769: LIST
57770: LIST
57771: PUSH
57772: LD_INT 0
57774: PUSH
57775: LD_INT 6
57777: NEG
57778: PUSH
57779: EMPTY
57780: LIST
57781: LIST
57782: PUSH
57783: LD_INT 1
57785: PUSH
57786: LD_INT 5
57788: NEG
57789: PUSH
57790: EMPTY
57791: LIST
57792: LIST
57793: PUSH
57794: EMPTY
57795: LIST
57796: LIST
57797: LIST
57798: LIST
57799: LIST
57800: LIST
57801: LIST
57802: LIST
57803: LIST
57804: LIST
57805: LIST
57806: LIST
57807: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
57808: LD_ADDR_VAR 0 30
57812: PUSH
57813: LD_INT 2
57815: PUSH
57816: LD_INT 1
57818: NEG
57819: PUSH
57820: EMPTY
57821: LIST
57822: LIST
57823: PUSH
57824: LD_INT 3
57826: PUSH
57827: LD_INT 0
57829: PUSH
57830: EMPTY
57831: LIST
57832: LIST
57833: PUSH
57834: LD_INT 3
57836: PUSH
57837: LD_INT 1
57839: PUSH
57840: EMPTY
57841: LIST
57842: LIST
57843: PUSH
57844: LD_INT 3
57846: PUSH
57847: LD_INT 1
57849: NEG
57850: PUSH
57851: EMPTY
57852: LIST
57853: LIST
57854: PUSH
57855: LD_INT 4
57857: PUSH
57858: LD_INT 0
57860: PUSH
57861: EMPTY
57862: LIST
57863: LIST
57864: PUSH
57865: LD_INT 4
57867: PUSH
57868: LD_INT 1
57870: PUSH
57871: EMPTY
57872: LIST
57873: LIST
57874: PUSH
57875: LD_INT 4
57877: PUSH
57878: LD_INT 1
57880: NEG
57881: PUSH
57882: EMPTY
57883: LIST
57884: LIST
57885: PUSH
57886: LD_INT 5
57888: PUSH
57889: LD_INT 0
57891: PUSH
57892: EMPTY
57893: LIST
57894: LIST
57895: PUSH
57896: LD_INT 5
57898: PUSH
57899: LD_INT 1
57901: PUSH
57902: EMPTY
57903: LIST
57904: LIST
57905: PUSH
57906: LD_INT 5
57908: PUSH
57909: LD_INT 1
57911: NEG
57912: PUSH
57913: EMPTY
57914: LIST
57915: LIST
57916: PUSH
57917: LD_INT 6
57919: PUSH
57920: LD_INT 0
57922: PUSH
57923: EMPTY
57924: LIST
57925: LIST
57926: PUSH
57927: LD_INT 6
57929: PUSH
57930: LD_INT 1
57932: PUSH
57933: EMPTY
57934: LIST
57935: LIST
57936: PUSH
57937: EMPTY
57938: LIST
57939: LIST
57940: LIST
57941: LIST
57942: LIST
57943: LIST
57944: LIST
57945: LIST
57946: LIST
57947: LIST
57948: LIST
57949: LIST
57950: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
57951: LD_ADDR_VAR 0 31
57955: PUSH
57956: LD_INT 3
57958: PUSH
57959: LD_INT 2
57961: PUSH
57962: EMPTY
57963: LIST
57964: LIST
57965: PUSH
57966: LD_INT 3
57968: PUSH
57969: LD_INT 3
57971: PUSH
57972: EMPTY
57973: LIST
57974: LIST
57975: PUSH
57976: LD_INT 2
57978: PUSH
57979: LD_INT 3
57981: PUSH
57982: EMPTY
57983: LIST
57984: LIST
57985: PUSH
57986: LD_INT 4
57988: PUSH
57989: LD_INT 3
57991: PUSH
57992: EMPTY
57993: LIST
57994: LIST
57995: PUSH
57996: LD_INT 4
57998: PUSH
57999: LD_INT 4
58001: PUSH
58002: EMPTY
58003: LIST
58004: LIST
58005: PUSH
58006: LD_INT 3
58008: PUSH
58009: LD_INT 4
58011: PUSH
58012: EMPTY
58013: LIST
58014: LIST
58015: PUSH
58016: LD_INT 5
58018: PUSH
58019: LD_INT 4
58021: PUSH
58022: EMPTY
58023: LIST
58024: LIST
58025: PUSH
58026: LD_INT 5
58028: PUSH
58029: LD_INT 5
58031: PUSH
58032: EMPTY
58033: LIST
58034: LIST
58035: PUSH
58036: LD_INT 4
58038: PUSH
58039: LD_INT 5
58041: PUSH
58042: EMPTY
58043: LIST
58044: LIST
58045: PUSH
58046: LD_INT 6
58048: PUSH
58049: LD_INT 5
58051: PUSH
58052: EMPTY
58053: LIST
58054: LIST
58055: PUSH
58056: LD_INT 6
58058: PUSH
58059: LD_INT 6
58061: PUSH
58062: EMPTY
58063: LIST
58064: LIST
58065: PUSH
58066: LD_INT 5
58068: PUSH
58069: LD_INT 6
58071: PUSH
58072: EMPTY
58073: LIST
58074: LIST
58075: PUSH
58076: EMPTY
58077: LIST
58078: LIST
58079: LIST
58080: LIST
58081: LIST
58082: LIST
58083: LIST
58084: LIST
58085: LIST
58086: LIST
58087: LIST
58088: LIST
58089: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
58090: LD_ADDR_VAR 0 32
58094: PUSH
58095: LD_INT 1
58097: PUSH
58098: LD_INT 3
58100: PUSH
58101: EMPTY
58102: LIST
58103: LIST
58104: PUSH
58105: LD_INT 0
58107: PUSH
58108: LD_INT 3
58110: PUSH
58111: EMPTY
58112: LIST
58113: LIST
58114: PUSH
58115: LD_INT 1
58117: NEG
58118: PUSH
58119: LD_INT 2
58121: PUSH
58122: EMPTY
58123: LIST
58124: LIST
58125: PUSH
58126: LD_INT 1
58128: PUSH
58129: LD_INT 4
58131: PUSH
58132: EMPTY
58133: LIST
58134: LIST
58135: PUSH
58136: LD_INT 0
58138: PUSH
58139: LD_INT 4
58141: PUSH
58142: EMPTY
58143: LIST
58144: LIST
58145: PUSH
58146: LD_INT 1
58148: NEG
58149: PUSH
58150: LD_INT 3
58152: PUSH
58153: EMPTY
58154: LIST
58155: LIST
58156: PUSH
58157: LD_INT 1
58159: PUSH
58160: LD_INT 5
58162: PUSH
58163: EMPTY
58164: LIST
58165: LIST
58166: PUSH
58167: LD_INT 0
58169: PUSH
58170: LD_INT 5
58172: PUSH
58173: EMPTY
58174: LIST
58175: LIST
58176: PUSH
58177: LD_INT 1
58179: NEG
58180: PUSH
58181: LD_INT 4
58183: PUSH
58184: EMPTY
58185: LIST
58186: LIST
58187: PUSH
58188: LD_INT 1
58190: PUSH
58191: LD_INT 6
58193: PUSH
58194: EMPTY
58195: LIST
58196: LIST
58197: PUSH
58198: LD_INT 0
58200: PUSH
58201: LD_INT 6
58203: PUSH
58204: EMPTY
58205: LIST
58206: LIST
58207: PUSH
58208: LD_INT 1
58210: NEG
58211: PUSH
58212: LD_INT 5
58214: PUSH
58215: EMPTY
58216: LIST
58217: LIST
58218: PUSH
58219: EMPTY
58220: LIST
58221: LIST
58222: LIST
58223: LIST
58224: LIST
58225: LIST
58226: LIST
58227: LIST
58228: LIST
58229: LIST
58230: LIST
58231: LIST
58232: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
58233: LD_ADDR_VAR 0 33
58237: PUSH
58238: LD_INT 2
58240: NEG
58241: PUSH
58242: LD_INT 1
58244: PUSH
58245: EMPTY
58246: LIST
58247: LIST
58248: PUSH
58249: LD_INT 3
58251: NEG
58252: PUSH
58253: LD_INT 0
58255: PUSH
58256: EMPTY
58257: LIST
58258: LIST
58259: PUSH
58260: LD_INT 3
58262: NEG
58263: PUSH
58264: LD_INT 1
58266: NEG
58267: PUSH
58268: EMPTY
58269: LIST
58270: LIST
58271: PUSH
58272: LD_INT 3
58274: NEG
58275: PUSH
58276: LD_INT 1
58278: PUSH
58279: EMPTY
58280: LIST
58281: LIST
58282: PUSH
58283: LD_INT 4
58285: NEG
58286: PUSH
58287: LD_INT 0
58289: PUSH
58290: EMPTY
58291: LIST
58292: LIST
58293: PUSH
58294: LD_INT 4
58296: NEG
58297: PUSH
58298: LD_INT 1
58300: NEG
58301: PUSH
58302: EMPTY
58303: LIST
58304: LIST
58305: PUSH
58306: LD_INT 4
58308: NEG
58309: PUSH
58310: LD_INT 1
58312: PUSH
58313: EMPTY
58314: LIST
58315: LIST
58316: PUSH
58317: LD_INT 5
58319: NEG
58320: PUSH
58321: LD_INT 0
58323: PUSH
58324: EMPTY
58325: LIST
58326: LIST
58327: PUSH
58328: LD_INT 5
58330: NEG
58331: PUSH
58332: LD_INT 1
58334: NEG
58335: PUSH
58336: EMPTY
58337: LIST
58338: LIST
58339: PUSH
58340: LD_INT 5
58342: NEG
58343: PUSH
58344: LD_INT 1
58346: PUSH
58347: EMPTY
58348: LIST
58349: LIST
58350: PUSH
58351: LD_INT 6
58353: NEG
58354: PUSH
58355: LD_INT 0
58357: PUSH
58358: EMPTY
58359: LIST
58360: LIST
58361: PUSH
58362: LD_INT 6
58364: NEG
58365: PUSH
58366: LD_INT 1
58368: NEG
58369: PUSH
58370: EMPTY
58371: LIST
58372: LIST
58373: PUSH
58374: EMPTY
58375: LIST
58376: LIST
58377: LIST
58378: LIST
58379: LIST
58380: LIST
58381: LIST
58382: LIST
58383: LIST
58384: LIST
58385: LIST
58386: LIST
58387: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
58388: LD_ADDR_VAR 0 34
58392: PUSH
58393: LD_INT 2
58395: NEG
58396: PUSH
58397: LD_INT 3
58399: NEG
58400: PUSH
58401: EMPTY
58402: LIST
58403: LIST
58404: PUSH
58405: LD_INT 3
58407: NEG
58408: PUSH
58409: LD_INT 2
58411: NEG
58412: PUSH
58413: EMPTY
58414: LIST
58415: LIST
58416: PUSH
58417: LD_INT 3
58419: NEG
58420: PUSH
58421: LD_INT 3
58423: NEG
58424: PUSH
58425: EMPTY
58426: LIST
58427: LIST
58428: PUSH
58429: LD_INT 3
58431: NEG
58432: PUSH
58433: LD_INT 4
58435: NEG
58436: PUSH
58437: EMPTY
58438: LIST
58439: LIST
58440: PUSH
58441: LD_INT 4
58443: NEG
58444: PUSH
58445: LD_INT 3
58447: NEG
58448: PUSH
58449: EMPTY
58450: LIST
58451: LIST
58452: PUSH
58453: LD_INT 4
58455: NEG
58456: PUSH
58457: LD_INT 4
58459: NEG
58460: PUSH
58461: EMPTY
58462: LIST
58463: LIST
58464: PUSH
58465: LD_INT 4
58467: NEG
58468: PUSH
58469: LD_INT 5
58471: NEG
58472: PUSH
58473: EMPTY
58474: LIST
58475: LIST
58476: PUSH
58477: LD_INT 5
58479: NEG
58480: PUSH
58481: LD_INT 4
58483: NEG
58484: PUSH
58485: EMPTY
58486: LIST
58487: LIST
58488: PUSH
58489: LD_INT 5
58491: NEG
58492: PUSH
58493: LD_INT 5
58495: NEG
58496: PUSH
58497: EMPTY
58498: LIST
58499: LIST
58500: PUSH
58501: LD_INT 5
58503: NEG
58504: PUSH
58505: LD_INT 6
58507: NEG
58508: PUSH
58509: EMPTY
58510: LIST
58511: LIST
58512: PUSH
58513: LD_INT 6
58515: NEG
58516: PUSH
58517: LD_INT 5
58519: NEG
58520: PUSH
58521: EMPTY
58522: LIST
58523: LIST
58524: PUSH
58525: LD_INT 6
58527: NEG
58528: PUSH
58529: LD_INT 6
58531: NEG
58532: PUSH
58533: EMPTY
58534: LIST
58535: LIST
58536: PUSH
58537: EMPTY
58538: LIST
58539: LIST
58540: LIST
58541: LIST
58542: LIST
58543: LIST
58544: LIST
58545: LIST
58546: LIST
58547: LIST
58548: LIST
58549: LIST
58550: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
58551: LD_ADDR_VAR 0 41
58555: PUSH
58556: LD_INT 0
58558: PUSH
58559: LD_INT 2
58561: NEG
58562: PUSH
58563: EMPTY
58564: LIST
58565: LIST
58566: PUSH
58567: LD_INT 1
58569: NEG
58570: PUSH
58571: LD_INT 3
58573: NEG
58574: PUSH
58575: EMPTY
58576: LIST
58577: LIST
58578: PUSH
58579: LD_INT 1
58581: PUSH
58582: LD_INT 2
58584: NEG
58585: PUSH
58586: EMPTY
58587: LIST
58588: LIST
58589: PUSH
58590: EMPTY
58591: LIST
58592: LIST
58593: LIST
58594: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
58595: LD_ADDR_VAR 0 42
58599: PUSH
58600: LD_INT 2
58602: PUSH
58603: LD_INT 0
58605: PUSH
58606: EMPTY
58607: LIST
58608: LIST
58609: PUSH
58610: LD_INT 2
58612: PUSH
58613: LD_INT 1
58615: NEG
58616: PUSH
58617: EMPTY
58618: LIST
58619: LIST
58620: PUSH
58621: LD_INT 3
58623: PUSH
58624: LD_INT 1
58626: PUSH
58627: EMPTY
58628: LIST
58629: LIST
58630: PUSH
58631: EMPTY
58632: LIST
58633: LIST
58634: LIST
58635: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
58636: LD_ADDR_VAR 0 43
58640: PUSH
58641: LD_INT 2
58643: PUSH
58644: LD_INT 2
58646: PUSH
58647: EMPTY
58648: LIST
58649: LIST
58650: PUSH
58651: LD_INT 3
58653: PUSH
58654: LD_INT 2
58656: PUSH
58657: EMPTY
58658: LIST
58659: LIST
58660: PUSH
58661: LD_INT 2
58663: PUSH
58664: LD_INT 3
58666: PUSH
58667: EMPTY
58668: LIST
58669: LIST
58670: PUSH
58671: EMPTY
58672: LIST
58673: LIST
58674: LIST
58675: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
58676: LD_ADDR_VAR 0 44
58680: PUSH
58681: LD_INT 0
58683: PUSH
58684: LD_INT 2
58686: PUSH
58687: EMPTY
58688: LIST
58689: LIST
58690: PUSH
58691: LD_INT 1
58693: PUSH
58694: LD_INT 3
58696: PUSH
58697: EMPTY
58698: LIST
58699: LIST
58700: PUSH
58701: LD_INT 1
58703: NEG
58704: PUSH
58705: LD_INT 2
58707: PUSH
58708: EMPTY
58709: LIST
58710: LIST
58711: PUSH
58712: EMPTY
58713: LIST
58714: LIST
58715: LIST
58716: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58717: LD_ADDR_VAR 0 45
58721: PUSH
58722: LD_INT 2
58724: NEG
58725: PUSH
58726: LD_INT 0
58728: PUSH
58729: EMPTY
58730: LIST
58731: LIST
58732: PUSH
58733: LD_INT 2
58735: NEG
58736: PUSH
58737: LD_INT 1
58739: PUSH
58740: EMPTY
58741: LIST
58742: LIST
58743: PUSH
58744: LD_INT 3
58746: NEG
58747: PUSH
58748: LD_INT 1
58750: NEG
58751: PUSH
58752: EMPTY
58753: LIST
58754: LIST
58755: PUSH
58756: EMPTY
58757: LIST
58758: LIST
58759: LIST
58760: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
58761: LD_ADDR_VAR 0 46
58765: PUSH
58766: LD_INT 2
58768: NEG
58769: PUSH
58770: LD_INT 2
58772: NEG
58773: PUSH
58774: EMPTY
58775: LIST
58776: LIST
58777: PUSH
58778: LD_INT 2
58780: NEG
58781: PUSH
58782: LD_INT 3
58784: NEG
58785: PUSH
58786: EMPTY
58787: LIST
58788: LIST
58789: PUSH
58790: LD_INT 3
58792: NEG
58793: PUSH
58794: LD_INT 2
58796: NEG
58797: PUSH
58798: EMPTY
58799: LIST
58800: LIST
58801: PUSH
58802: EMPTY
58803: LIST
58804: LIST
58805: LIST
58806: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
58807: LD_ADDR_VAR 0 47
58811: PUSH
58812: LD_INT 2
58814: NEG
58815: PUSH
58816: LD_INT 3
58818: NEG
58819: PUSH
58820: EMPTY
58821: LIST
58822: LIST
58823: PUSH
58824: LD_INT 1
58826: NEG
58827: PUSH
58828: LD_INT 3
58830: NEG
58831: PUSH
58832: EMPTY
58833: LIST
58834: LIST
58835: PUSH
58836: EMPTY
58837: LIST
58838: LIST
58839: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
58840: LD_ADDR_VAR 0 48
58844: PUSH
58845: LD_INT 1
58847: PUSH
58848: LD_INT 2
58850: NEG
58851: PUSH
58852: EMPTY
58853: LIST
58854: LIST
58855: PUSH
58856: LD_INT 2
58858: PUSH
58859: LD_INT 1
58861: NEG
58862: PUSH
58863: EMPTY
58864: LIST
58865: LIST
58866: PUSH
58867: EMPTY
58868: LIST
58869: LIST
58870: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
58871: LD_ADDR_VAR 0 49
58875: PUSH
58876: LD_INT 3
58878: PUSH
58879: LD_INT 1
58881: PUSH
58882: EMPTY
58883: LIST
58884: LIST
58885: PUSH
58886: LD_INT 3
58888: PUSH
58889: LD_INT 2
58891: PUSH
58892: EMPTY
58893: LIST
58894: LIST
58895: PUSH
58896: EMPTY
58897: LIST
58898: LIST
58899: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
58900: LD_ADDR_VAR 0 50
58904: PUSH
58905: LD_INT 2
58907: PUSH
58908: LD_INT 3
58910: PUSH
58911: EMPTY
58912: LIST
58913: LIST
58914: PUSH
58915: LD_INT 1
58917: PUSH
58918: LD_INT 3
58920: PUSH
58921: EMPTY
58922: LIST
58923: LIST
58924: PUSH
58925: EMPTY
58926: LIST
58927: LIST
58928: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
58929: LD_ADDR_VAR 0 51
58933: PUSH
58934: LD_INT 1
58936: NEG
58937: PUSH
58938: LD_INT 2
58940: PUSH
58941: EMPTY
58942: LIST
58943: LIST
58944: PUSH
58945: LD_INT 2
58947: NEG
58948: PUSH
58949: LD_INT 1
58951: PUSH
58952: EMPTY
58953: LIST
58954: LIST
58955: PUSH
58956: EMPTY
58957: LIST
58958: LIST
58959: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58960: LD_ADDR_VAR 0 52
58964: PUSH
58965: LD_INT 3
58967: NEG
58968: PUSH
58969: LD_INT 1
58971: NEG
58972: PUSH
58973: EMPTY
58974: LIST
58975: LIST
58976: PUSH
58977: LD_INT 3
58979: NEG
58980: PUSH
58981: LD_INT 2
58983: NEG
58984: PUSH
58985: EMPTY
58986: LIST
58987: LIST
58988: PUSH
58989: EMPTY
58990: LIST
58991: LIST
58992: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58993: LD_ADDR_VAR 0 53
58997: PUSH
58998: LD_INT 1
59000: NEG
59001: PUSH
59002: LD_INT 3
59004: NEG
59005: PUSH
59006: EMPTY
59007: LIST
59008: LIST
59009: PUSH
59010: LD_INT 0
59012: PUSH
59013: LD_INT 3
59015: NEG
59016: PUSH
59017: EMPTY
59018: LIST
59019: LIST
59020: PUSH
59021: LD_INT 1
59023: PUSH
59024: LD_INT 2
59026: NEG
59027: PUSH
59028: EMPTY
59029: LIST
59030: LIST
59031: PUSH
59032: EMPTY
59033: LIST
59034: LIST
59035: LIST
59036: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
59037: LD_ADDR_VAR 0 54
59041: PUSH
59042: LD_INT 2
59044: PUSH
59045: LD_INT 1
59047: NEG
59048: PUSH
59049: EMPTY
59050: LIST
59051: LIST
59052: PUSH
59053: LD_INT 3
59055: PUSH
59056: LD_INT 0
59058: PUSH
59059: EMPTY
59060: LIST
59061: LIST
59062: PUSH
59063: LD_INT 3
59065: PUSH
59066: LD_INT 1
59068: PUSH
59069: EMPTY
59070: LIST
59071: LIST
59072: PUSH
59073: EMPTY
59074: LIST
59075: LIST
59076: LIST
59077: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59078: LD_ADDR_VAR 0 55
59082: PUSH
59083: LD_INT 3
59085: PUSH
59086: LD_INT 2
59088: PUSH
59089: EMPTY
59090: LIST
59091: LIST
59092: PUSH
59093: LD_INT 3
59095: PUSH
59096: LD_INT 3
59098: PUSH
59099: EMPTY
59100: LIST
59101: LIST
59102: PUSH
59103: LD_INT 2
59105: PUSH
59106: LD_INT 3
59108: PUSH
59109: EMPTY
59110: LIST
59111: LIST
59112: PUSH
59113: EMPTY
59114: LIST
59115: LIST
59116: LIST
59117: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
59118: LD_ADDR_VAR 0 56
59122: PUSH
59123: LD_INT 1
59125: PUSH
59126: LD_INT 3
59128: PUSH
59129: EMPTY
59130: LIST
59131: LIST
59132: PUSH
59133: LD_INT 0
59135: PUSH
59136: LD_INT 3
59138: PUSH
59139: EMPTY
59140: LIST
59141: LIST
59142: PUSH
59143: LD_INT 1
59145: NEG
59146: PUSH
59147: LD_INT 2
59149: PUSH
59150: EMPTY
59151: LIST
59152: LIST
59153: PUSH
59154: EMPTY
59155: LIST
59156: LIST
59157: LIST
59158: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59159: LD_ADDR_VAR 0 57
59163: PUSH
59164: LD_INT 2
59166: NEG
59167: PUSH
59168: LD_INT 1
59170: PUSH
59171: EMPTY
59172: LIST
59173: LIST
59174: PUSH
59175: LD_INT 3
59177: NEG
59178: PUSH
59179: LD_INT 0
59181: PUSH
59182: EMPTY
59183: LIST
59184: LIST
59185: PUSH
59186: LD_INT 3
59188: NEG
59189: PUSH
59190: LD_INT 1
59192: NEG
59193: PUSH
59194: EMPTY
59195: LIST
59196: LIST
59197: PUSH
59198: EMPTY
59199: LIST
59200: LIST
59201: LIST
59202: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59203: LD_ADDR_VAR 0 58
59207: PUSH
59208: LD_INT 2
59210: NEG
59211: PUSH
59212: LD_INT 3
59214: NEG
59215: PUSH
59216: EMPTY
59217: LIST
59218: LIST
59219: PUSH
59220: LD_INT 3
59222: NEG
59223: PUSH
59224: LD_INT 2
59226: NEG
59227: PUSH
59228: EMPTY
59229: LIST
59230: LIST
59231: PUSH
59232: LD_INT 3
59234: NEG
59235: PUSH
59236: LD_INT 3
59238: NEG
59239: PUSH
59240: EMPTY
59241: LIST
59242: LIST
59243: PUSH
59244: EMPTY
59245: LIST
59246: LIST
59247: LIST
59248: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
59249: LD_ADDR_VAR 0 59
59253: PUSH
59254: LD_INT 1
59256: NEG
59257: PUSH
59258: LD_INT 2
59260: NEG
59261: PUSH
59262: EMPTY
59263: LIST
59264: LIST
59265: PUSH
59266: LD_INT 0
59268: PUSH
59269: LD_INT 2
59271: NEG
59272: PUSH
59273: EMPTY
59274: LIST
59275: LIST
59276: PUSH
59277: LD_INT 1
59279: PUSH
59280: LD_INT 1
59282: NEG
59283: PUSH
59284: EMPTY
59285: LIST
59286: LIST
59287: PUSH
59288: EMPTY
59289: LIST
59290: LIST
59291: LIST
59292: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
59293: LD_ADDR_VAR 0 60
59297: PUSH
59298: LD_INT 1
59300: PUSH
59301: LD_INT 1
59303: NEG
59304: PUSH
59305: EMPTY
59306: LIST
59307: LIST
59308: PUSH
59309: LD_INT 2
59311: PUSH
59312: LD_INT 0
59314: PUSH
59315: EMPTY
59316: LIST
59317: LIST
59318: PUSH
59319: LD_INT 2
59321: PUSH
59322: LD_INT 1
59324: PUSH
59325: EMPTY
59326: LIST
59327: LIST
59328: PUSH
59329: EMPTY
59330: LIST
59331: LIST
59332: LIST
59333: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
59334: LD_ADDR_VAR 0 61
59338: PUSH
59339: LD_INT 2
59341: PUSH
59342: LD_INT 1
59344: PUSH
59345: EMPTY
59346: LIST
59347: LIST
59348: PUSH
59349: LD_INT 2
59351: PUSH
59352: LD_INT 2
59354: PUSH
59355: EMPTY
59356: LIST
59357: LIST
59358: PUSH
59359: LD_INT 1
59361: PUSH
59362: LD_INT 2
59364: PUSH
59365: EMPTY
59366: LIST
59367: LIST
59368: PUSH
59369: EMPTY
59370: LIST
59371: LIST
59372: LIST
59373: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
59374: LD_ADDR_VAR 0 62
59378: PUSH
59379: LD_INT 1
59381: PUSH
59382: LD_INT 2
59384: PUSH
59385: EMPTY
59386: LIST
59387: LIST
59388: PUSH
59389: LD_INT 0
59391: PUSH
59392: LD_INT 2
59394: PUSH
59395: EMPTY
59396: LIST
59397: LIST
59398: PUSH
59399: LD_INT 1
59401: NEG
59402: PUSH
59403: LD_INT 1
59405: PUSH
59406: EMPTY
59407: LIST
59408: LIST
59409: PUSH
59410: EMPTY
59411: LIST
59412: LIST
59413: LIST
59414: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
59415: LD_ADDR_VAR 0 63
59419: PUSH
59420: LD_INT 1
59422: NEG
59423: PUSH
59424: LD_INT 1
59426: PUSH
59427: EMPTY
59428: LIST
59429: LIST
59430: PUSH
59431: LD_INT 2
59433: NEG
59434: PUSH
59435: LD_INT 0
59437: PUSH
59438: EMPTY
59439: LIST
59440: LIST
59441: PUSH
59442: LD_INT 2
59444: NEG
59445: PUSH
59446: LD_INT 1
59448: NEG
59449: PUSH
59450: EMPTY
59451: LIST
59452: LIST
59453: PUSH
59454: EMPTY
59455: LIST
59456: LIST
59457: LIST
59458: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59459: LD_ADDR_VAR 0 64
59463: PUSH
59464: LD_INT 1
59466: NEG
59467: PUSH
59468: LD_INT 2
59470: NEG
59471: PUSH
59472: EMPTY
59473: LIST
59474: LIST
59475: PUSH
59476: LD_INT 2
59478: NEG
59479: PUSH
59480: LD_INT 1
59482: NEG
59483: PUSH
59484: EMPTY
59485: LIST
59486: LIST
59487: PUSH
59488: LD_INT 2
59490: NEG
59491: PUSH
59492: LD_INT 2
59494: NEG
59495: PUSH
59496: EMPTY
59497: LIST
59498: LIST
59499: PUSH
59500: EMPTY
59501: LIST
59502: LIST
59503: LIST
59504: ST_TO_ADDR
// end ; 2 :
59505: GO 62771
59507: LD_INT 2
59509: DOUBLE
59510: EQUAL
59511: IFTRUE 59515
59513: GO 62770
59515: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
59516: LD_ADDR_VAR 0 29
59520: PUSH
59521: LD_INT 4
59523: PUSH
59524: LD_INT 0
59526: PUSH
59527: EMPTY
59528: LIST
59529: LIST
59530: PUSH
59531: LD_INT 4
59533: PUSH
59534: LD_INT 1
59536: NEG
59537: PUSH
59538: EMPTY
59539: LIST
59540: LIST
59541: PUSH
59542: LD_INT 5
59544: PUSH
59545: LD_INT 0
59547: PUSH
59548: EMPTY
59549: LIST
59550: LIST
59551: PUSH
59552: LD_INT 5
59554: PUSH
59555: LD_INT 1
59557: PUSH
59558: EMPTY
59559: LIST
59560: LIST
59561: PUSH
59562: LD_INT 4
59564: PUSH
59565: LD_INT 1
59567: PUSH
59568: EMPTY
59569: LIST
59570: LIST
59571: PUSH
59572: LD_INT 3
59574: PUSH
59575: LD_INT 0
59577: PUSH
59578: EMPTY
59579: LIST
59580: LIST
59581: PUSH
59582: LD_INT 3
59584: PUSH
59585: LD_INT 1
59587: NEG
59588: PUSH
59589: EMPTY
59590: LIST
59591: LIST
59592: PUSH
59593: LD_INT 3
59595: PUSH
59596: LD_INT 2
59598: NEG
59599: PUSH
59600: EMPTY
59601: LIST
59602: LIST
59603: PUSH
59604: LD_INT 5
59606: PUSH
59607: LD_INT 2
59609: PUSH
59610: EMPTY
59611: LIST
59612: LIST
59613: PUSH
59614: LD_INT 3
59616: PUSH
59617: LD_INT 3
59619: PUSH
59620: EMPTY
59621: LIST
59622: LIST
59623: PUSH
59624: LD_INT 3
59626: PUSH
59627: LD_INT 2
59629: PUSH
59630: EMPTY
59631: LIST
59632: LIST
59633: PUSH
59634: LD_INT 4
59636: PUSH
59637: LD_INT 3
59639: PUSH
59640: EMPTY
59641: LIST
59642: LIST
59643: PUSH
59644: LD_INT 4
59646: PUSH
59647: LD_INT 4
59649: PUSH
59650: EMPTY
59651: LIST
59652: LIST
59653: PUSH
59654: LD_INT 3
59656: PUSH
59657: LD_INT 4
59659: PUSH
59660: EMPTY
59661: LIST
59662: LIST
59663: PUSH
59664: LD_INT 2
59666: PUSH
59667: LD_INT 3
59669: PUSH
59670: EMPTY
59671: LIST
59672: LIST
59673: PUSH
59674: LD_INT 2
59676: PUSH
59677: LD_INT 2
59679: PUSH
59680: EMPTY
59681: LIST
59682: LIST
59683: PUSH
59684: LD_INT 4
59686: PUSH
59687: LD_INT 2
59689: PUSH
59690: EMPTY
59691: LIST
59692: LIST
59693: PUSH
59694: LD_INT 2
59696: PUSH
59697: LD_INT 4
59699: PUSH
59700: EMPTY
59701: LIST
59702: LIST
59703: PUSH
59704: LD_INT 0
59706: PUSH
59707: LD_INT 4
59709: PUSH
59710: EMPTY
59711: LIST
59712: LIST
59713: PUSH
59714: LD_INT 0
59716: PUSH
59717: LD_INT 3
59719: PUSH
59720: EMPTY
59721: LIST
59722: LIST
59723: PUSH
59724: LD_INT 1
59726: PUSH
59727: LD_INT 4
59729: PUSH
59730: EMPTY
59731: LIST
59732: LIST
59733: PUSH
59734: LD_INT 1
59736: PUSH
59737: LD_INT 5
59739: PUSH
59740: EMPTY
59741: LIST
59742: LIST
59743: PUSH
59744: LD_INT 0
59746: PUSH
59747: LD_INT 5
59749: PUSH
59750: EMPTY
59751: LIST
59752: LIST
59753: PUSH
59754: LD_INT 1
59756: NEG
59757: PUSH
59758: LD_INT 4
59760: PUSH
59761: EMPTY
59762: LIST
59763: LIST
59764: PUSH
59765: LD_INT 1
59767: NEG
59768: PUSH
59769: LD_INT 3
59771: PUSH
59772: EMPTY
59773: LIST
59774: LIST
59775: PUSH
59776: LD_INT 2
59778: PUSH
59779: LD_INT 5
59781: PUSH
59782: EMPTY
59783: LIST
59784: LIST
59785: PUSH
59786: LD_INT 2
59788: NEG
59789: PUSH
59790: LD_INT 3
59792: PUSH
59793: EMPTY
59794: LIST
59795: LIST
59796: PUSH
59797: LD_INT 3
59799: NEG
59800: PUSH
59801: LD_INT 0
59803: PUSH
59804: EMPTY
59805: LIST
59806: LIST
59807: PUSH
59808: LD_INT 3
59810: NEG
59811: PUSH
59812: LD_INT 1
59814: NEG
59815: PUSH
59816: EMPTY
59817: LIST
59818: LIST
59819: PUSH
59820: LD_INT 2
59822: NEG
59823: PUSH
59824: LD_INT 0
59826: PUSH
59827: EMPTY
59828: LIST
59829: LIST
59830: PUSH
59831: LD_INT 2
59833: NEG
59834: PUSH
59835: LD_INT 1
59837: PUSH
59838: EMPTY
59839: LIST
59840: LIST
59841: PUSH
59842: LD_INT 3
59844: NEG
59845: PUSH
59846: LD_INT 1
59848: PUSH
59849: EMPTY
59850: LIST
59851: LIST
59852: PUSH
59853: LD_INT 4
59855: NEG
59856: PUSH
59857: LD_INT 0
59859: PUSH
59860: EMPTY
59861: LIST
59862: LIST
59863: PUSH
59864: LD_INT 4
59866: NEG
59867: PUSH
59868: LD_INT 1
59870: NEG
59871: PUSH
59872: EMPTY
59873: LIST
59874: LIST
59875: PUSH
59876: LD_INT 4
59878: NEG
59879: PUSH
59880: LD_INT 2
59882: NEG
59883: PUSH
59884: EMPTY
59885: LIST
59886: LIST
59887: PUSH
59888: LD_INT 2
59890: NEG
59891: PUSH
59892: LD_INT 2
59894: PUSH
59895: EMPTY
59896: LIST
59897: LIST
59898: PUSH
59899: LD_INT 4
59901: NEG
59902: PUSH
59903: LD_INT 4
59905: NEG
59906: PUSH
59907: EMPTY
59908: LIST
59909: LIST
59910: PUSH
59911: LD_INT 4
59913: NEG
59914: PUSH
59915: LD_INT 5
59917: NEG
59918: PUSH
59919: EMPTY
59920: LIST
59921: LIST
59922: PUSH
59923: LD_INT 3
59925: NEG
59926: PUSH
59927: LD_INT 4
59929: NEG
59930: PUSH
59931: EMPTY
59932: LIST
59933: LIST
59934: PUSH
59935: LD_INT 3
59937: NEG
59938: PUSH
59939: LD_INT 3
59941: NEG
59942: PUSH
59943: EMPTY
59944: LIST
59945: LIST
59946: PUSH
59947: LD_INT 4
59949: NEG
59950: PUSH
59951: LD_INT 3
59953: NEG
59954: PUSH
59955: EMPTY
59956: LIST
59957: LIST
59958: PUSH
59959: LD_INT 5
59961: NEG
59962: PUSH
59963: LD_INT 4
59965: NEG
59966: PUSH
59967: EMPTY
59968: LIST
59969: LIST
59970: PUSH
59971: LD_INT 5
59973: NEG
59974: PUSH
59975: LD_INT 5
59977: NEG
59978: PUSH
59979: EMPTY
59980: LIST
59981: LIST
59982: PUSH
59983: LD_INT 3
59985: NEG
59986: PUSH
59987: LD_INT 5
59989: NEG
59990: PUSH
59991: EMPTY
59992: LIST
59993: LIST
59994: PUSH
59995: LD_INT 5
59997: NEG
59998: PUSH
59999: LD_INT 3
60001: NEG
60002: PUSH
60003: EMPTY
60004: LIST
60005: LIST
60006: PUSH
60007: EMPTY
60008: LIST
60009: LIST
60010: LIST
60011: LIST
60012: LIST
60013: LIST
60014: LIST
60015: LIST
60016: LIST
60017: LIST
60018: LIST
60019: LIST
60020: LIST
60021: LIST
60022: LIST
60023: LIST
60024: LIST
60025: LIST
60026: LIST
60027: LIST
60028: LIST
60029: LIST
60030: LIST
60031: LIST
60032: LIST
60033: LIST
60034: LIST
60035: LIST
60036: LIST
60037: LIST
60038: LIST
60039: LIST
60040: LIST
60041: LIST
60042: LIST
60043: LIST
60044: LIST
60045: LIST
60046: LIST
60047: LIST
60048: LIST
60049: LIST
60050: LIST
60051: LIST
60052: LIST
60053: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
60054: LD_ADDR_VAR 0 30
60058: PUSH
60059: LD_INT 4
60061: PUSH
60062: LD_INT 4
60064: PUSH
60065: EMPTY
60066: LIST
60067: LIST
60068: PUSH
60069: LD_INT 4
60071: PUSH
60072: LD_INT 3
60074: PUSH
60075: EMPTY
60076: LIST
60077: LIST
60078: PUSH
60079: LD_INT 5
60081: PUSH
60082: LD_INT 4
60084: PUSH
60085: EMPTY
60086: LIST
60087: LIST
60088: PUSH
60089: LD_INT 5
60091: PUSH
60092: LD_INT 5
60094: PUSH
60095: EMPTY
60096: LIST
60097: LIST
60098: PUSH
60099: LD_INT 4
60101: PUSH
60102: LD_INT 5
60104: PUSH
60105: EMPTY
60106: LIST
60107: LIST
60108: PUSH
60109: LD_INT 3
60111: PUSH
60112: LD_INT 4
60114: PUSH
60115: EMPTY
60116: LIST
60117: LIST
60118: PUSH
60119: LD_INT 3
60121: PUSH
60122: LD_INT 3
60124: PUSH
60125: EMPTY
60126: LIST
60127: LIST
60128: PUSH
60129: LD_INT 5
60131: PUSH
60132: LD_INT 3
60134: PUSH
60135: EMPTY
60136: LIST
60137: LIST
60138: PUSH
60139: LD_INT 3
60141: PUSH
60142: LD_INT 5
60144: PUSH
60145: EMPTY
60146: LIST
60147: LIST
60148: PUSH
60149: LD_INT 0
60151: PUSH
60152: LD_INT 3
60154: PUSH
60155: EMPTY
60156: LIST
60157: LIST
60158: PUSH
60159: LD_INT 0
60161: PUSH
60162: LD_INT 2
60164: PUSH
60165: EMPTY
60166: LIST
60167: LIST
60168: PUSH
60169: LD_INT 1
60171: PUSH
60172: LD_INT 3
60174: PUSH
60175: EMPTY
60176: LIST
60177: LIST
60178: PUSH
60179: LD_INT 1
60181: PUSH
60182: LD_INT 4
60184: PUSH
60185: EMPTY
60186: LIST
60187: LIST
60188: PUSH
60189: LD_INT 0
60191: PUSH
60192: LD_INT 4
60194: PUSH
60195: EMPTY
60196: LIST
60197: LIST
60198: PUSH
60199: LD_INT 1
60201: NEG
60202: PUSH
60203: LD_INT 3
60205: PUSH
60206: EMPTY
60207: LIST
60208: LIST
60209: PUSH
60210: LD_INT 1
60212: NEG
60213: PUSH
60214: LD_INT 2
60216: PUSH
60217: EMPTY
60218: LIST
60219: LIST
60220: PUSH
60221: LD_INT 2
60223: PUSH
60224: LD_INT 4
60226: PUSH
60227: EMPTY
60228: LIST
60229: LIST
60230: PUSH
60231: LD_INT 2
60233: NEG
60234: PUSH
60235: LD_INT 2
60237: PUSH
60238: EMPTY
60239: LIST
60240: LIST
60241: PUSH
60242: LD_INT 4
60244: NEG
60245: PUSH
60246: LD_INT 0
60248: PUSH
60249: EMPTY
60250: LIST
60251: LIST
60252: PUSH
60253: LD_INT 4
60255: NEG
60256: PUSH
60257: LD_INT 1
60259: NEG
60260: PUSH
60261: EMPTY
60262: LIST
60263: LIST
60264: PUSH
60265: LD_INT 3
60267: NEG
60268: PUSH
60269: LD_INT 0
60271: PUSH
60272: EMPTY
60273: LIST
60274: LIST
60275: PUSH
60276: LD_INT 3
60278: NEG
60279: PUSH
60280: LD_INT 1
60282: PUSH
60283: EMPTY
60284: LIST
60285: LIST
60286: PUSH
60287: LD_INT 4
60289: NEG
60290: PUSH
60291: LD_INT 1
60293: PUSH
60294: EMPTY
60295: LIST
60296: LIST
60297: PUSH
60298: LD_INT 5
60300: NEG
60301: PUSH
60302: LD_INT 0
60304: PUSH
60305: EMPTY
60306: LIST
60307: LIST
60308: PUSH
60309: LD_INT 5
60311: NEG
60312: PUSH
60313: LD_INT 1
60315: NEG
60316: PUSH
60317: EMPTY
60318: LIST
60319: LIST
60320: PUSH
60321: LD_INT 5
60323: NEG
60324: PUSH
60325: LD_INT 2
60327: NEG
60328: PUSH
60329: EMPTY
60330: LIST
60331: LIST
60332: PUSH
60333: LD_INT 3
60335: NEG
60336: PUSH
60337: LD_INT 2
60339: PUSH
60340: EMPTY
60341: LIST
60342: LIST
60343: PUSH
60344: LD_INT 3
60346: NEG
60347: PUSH
60348: LD_INT 3
60350: NEG
60351: PUSH
60352: EMPTY
60353: LIST
60354: LIST
60355: PUSH
60356: LD_INT 3
60358: NEG
60359: PUSH
60360: LD_INT 4
60362: NEG
60363: PUSH
60364: EMPTY
60365: LIST
60366: LIST
60367: PUSH
60368: LD_INT 2
60370: NEG
60371: PUSH
60372: LD_INT 3
60374: NEG
60375: PUSH
60376: EMPTY
60377: LIST
60378: LIST
60379: PUSH
60380: LD_INT 2
60382: NEG
60383: PUSH
60384: LD_INT 2
60386: NEG
60387: PUSH
60388: EMPTY
60389: LIST
60390: LIST
60391: PUSH
60392: LD_INT 3
60394: NEG
60395: PUSH
60396: LD_INT 2
60398: NEG
60399: PUSH
60400: EMPTY
60401: LIST
60402: LIST
60403: PUSH
60404: LD_INT 4
60406: NEG
60407: PUSH
60408: LD_INT 3
60410: NEG
60411: PUSH
60412: EMPTY
60413: LIST
60414: LIST
60415: PUSH
60416: LD_INT 4
60418: NEG
60419: PUSH
60420: LD_INT 4
60422: NEG
60423: PUSH
60424: EMPTY
60425: LIST
60426: LIST
60427: PUSH
60428: LD_INT 2
60430: NEG
60431: PUSH
60432: LD_INT 4
60434: NEG
60435: PUSH
60436: EMPTY
60437: LIST
60438: LIST
60439: PUSH
60440: LD_INT 4
60442: NEG
60443: PUSH
60444: LD_INT 2
60446: NEG
60447: PUSH
60448: EMPTY
60449: LIST
60450: LIST
60451: PUSH
60452: LD_INT 0
60454: PUSH
60455: LD_INT 4
60457: NEG
60458: PUSH
60459: EMPTY
60460: LIST
60461: LIST
60462: PUSH
60463: LD_INT 0
60465: PUSH
60466: LD_INT 5
60468: NEG
60469: PUSH
60470: EMPTY
60471: LIST
60472: LIST
60473: PUSH
60474: LD_INT 1
60476: PUSH
60477: LD_INT 4
60479: NEG
60480: PUSH
60481: EMPTY
60482: LIST
60483: LIST
60484: PUSH
60485: LD_INT 1
60487: PUSH
60488: LD_INT 3
60490: NEG
60491: PUSH
60492: EMPTY
60493: LIST
60494: LIST
60495: PUSH
60496: LD_INT 0
60498: PUSH
60499: LD_INT 3
60501: NEG
60502: PUSH
60503: EMPTY
60504: LIST
60505: LIST
60506: PUSH
60507: LD_INT 1
60509: NEG
60510: PUSH
60511: LD_INT 4
60513: NEG
60514: PUSH
60515: EMPTY
60516: LIST
60517: LIST
60518: PUSH
60519: LD_INT 1
60521: NEG
60522: PUSH
60523: LD_INT 5
60525: NEG
60526: PUSH
60527: EMPTY
60528: LIST
60529: LIST
60530: PUSH
60531: LD_INT 2
60533: PUSH
60534: LD_INT 3
60536: NEG
60537: PUSH
60538: EMPTY
60539: LIST
60540: LIST
60541: PUSH
60542: LD_INT 2
60544: NEG
60545: PUSH
60546: LD_INT 5
60548: NEG
60549: PUSH
60550: EMPTY
60551: LIST
60552: LIST
60553: PUSH
60554: EMPTY
60555: LIST
60556: LIST
60557: LIST
60558: LIST
60559: LIST
60560: LIST
60561: LIST
60562: LIST
60563: LIST
60564: LIST
60565: LIST
60566: LIST
60567: LIST
60568: LIST
60569: LIST
60570: LIST
60571: LIST
60572: LIST
60573: LIST
60574: LIST
60575: LIST
60576: LIST
60577: LIST
60578: LIST
60579: LIST
60580: LIST
60581: LIST
60582: LIST
60583: LIST
60584: LIST
60585: LIST
60586: LIST
60587: LIST
60588: LIST
60589: LIST
60590: LIST
60591: LIST
60592: LIST
60593: LIST
60594: LIST
60595: LIST
60596: LIST
60597: LIST
60598: LIST
60599: LIST
60600: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
60601: LD_ADDR_VAR 0 31
60605: PUSH
60606: LD_INT 0
60608: PUSH
60609: LD_INT 4
60611: PUSH
60612: EMPTY
60613: LIST
60614: LIST
60615: PUSH
60616: LD_INT 0
60618: PUSH
60619: LD_INT 3
60621: PUSH
60622: EMPTY
60623: LIST
60624: LIST
60625: PUSH
60626: LD_INT 1
60628: PUSH
60629: LD_INT 4
60631: PUSH
60632: EMPTY
60633: LIST
60634: LIST
60635: PUSH
60636: LD_INT 1
60638: PUSH
60639: LD_INT 5
60641: PUSH
60642: EMPTY
60643: LIST
60644: LIST
60645: PUSH
60646: LD_INT 0
60648: PUSH
60649: LD_INT 5
60651: PUSH
60652: EMPTY
60653: LIST
60654: LIST
60655: PUSH
60656: LD_INT 1
60658: NEG
60659: PUSH
60660: LD_INT 4
60662: PUSH
60663: EMPTY
60664: LIST
60665: LIST
60666: PUSH
60667: LD_INT 1
60669: NEG
60670: PUSH
60671: LD_INT 3
60673: PUSH
60674: EMPTY
60675: LIST
60676: LIST
60677: PUSH
60678: LD_INT 2
60680: PUSH
60681: LD_INT 5
60683: PUSH
60684: EMPTY
60685: LIST
60686: LIST
60687: PUSH
60688: LD_INT 2
60690: NEG
60691: PUSH
60692: LD_INT 3
60694: PUSH
60695: EMPTY
60696: LIST
60697: LIST
60698: PUSH
60699: LD_INT 3
60701: NEG
60702: PUSH
60703: LD_INT 0
60705: PUSH
60706: EMPTY
60707: LIST
60708: LIST
60709: PUSH
60710: LD_INT 3
60712: NEG
60713: PUSH
60714: LD_INT 1
60716: NEG
60717: PUSH
60718: EMPTY
60719: LIST
60720: LIST
60721: PUSH
60722: LD_INT 2
60724: NEG
60725: PUSH
60726: LD_INT 0
60728: PUSH
60729: EMPTY
60730: LIST
60731: LIST
60732: PUSH
60733: LD_INT 2
60735: NEG
60736: PUSH
60737: LD_INT 1
60739: PUSH
60740: EMPTY
60741: LIST
60742: LIST
60743: PUSH
60744: LD_INT 3
60746: NEG
60747: PUSH
60748: LD_INT 1
60750: PUSH
60751: EMPTY
60752: LIST
60753: LIST
60754: PUSH
60755: LD_INT 4
60757: NEG
60758: PUSH
60759: LD_INT 0
60761: PUSH
60762: EMPTY
60763: LIST
60764: LIST
60765: PUSH
60766: LD_INT 4
60768: NEG
60769: PUSH
60770: LD_INT 1
60772: NEG
60773: PUSH
60774: EMPTY
60775: LIST
60776: LIST
60777: PUSH
60778: LD_INT 4
60780: NEG
60781: PUSH
60782: LD_INT 2
60784: NEG
60785: PUSH
60786: EMPTY
60787: LIST
60788: LIST
60789: PUSH
60790: LD_INT 2
60792: NEG
60793: PUSH
60794: LD_INT 2
60796: PUSH
60797: EMPTY
60798: LIST
60799: LIST
60800: PUSH
60801: LD_INT 4
60803: NEG
60804: PUSH
60805: LD_INT 4
60807: NEG
60808: PUSH
60809: EMPTY
60810: LIST
60811: LIST
60812: PUSH
60813: LD_INT 4
60815: NEG
60816: PUSH
60817: LD_INT 5
60819: NEG
60820: PUSH
60821: EMPTY
60822: LIST
60823: LIST
60824: PUSH
60825: LD_INT 3
60827: NEG
60828: PUSH
60829: LD_INT 4
60831: NEG
60832: PUSH
60833: EMPTY
60834: LIST
60835: LIST
60836: PUSH
60837: LD_INT 3
60839: NEG
60840: PUSH
60841: LD_INT 3
60843: NEG
60844: PUSH
60845: EMPTY
60846: LIST
60847: LIST
60848: PUSH
60849: LD_INT 4
60851: NEG
60852: PUSH
60853: LD_INT 3
60855: NEG
60856: PUSH
60857: EMPTY
60858: LIST
60859: LIST
60860: PUSH
60861: LD_INT 5
60863: NEG
60864: PUSH
60865: LD_INT 4
60867: NEG
60868: PUSH
60869: EMPTY
60870: LIST
60871: LIST
60872: PUSH
60873: LD_INT 5
60875: NEG
60876: PUSH
60877: LD_INT 5
60879: NEG
60880: PUSH
60881: EMPTY
60882: LIST
60883: LIST
60884: PUSH
60885: LD_INT 3
60887: NEG
60888: PUSH
60889: LD_INT 5
60891: NEG
60892: PUSH
60893: EMPTY
60894: LIST
60895: LIST
60896: PUSH
60897: LD_INT 5
60899: NEG
60900: PUSH
60901: LD_INT 3
60903: NEG
60904: PUSH
60905: EMPTY
60906: LIST
60907: LIST
60908: PUSH
60909: LD_INT 0
60911: PUSH
60912: LD_INT 3
60914: NEG
60915: PUSH
60916: EMPTY
60917: LIST
60918: LIST
60919: PUSH
60920: LD_INT 0
60922: PUSH
60923: LD_INT 4
60925: NEG
60926: PUSH
60927: EMPTY
60928: LIST
60929: LIST
60930: PUSH
60931: LD_INT 1
60933: PUSH
60934: LD_INT 3
60936: NEG
60937: PUSH
60938: EMPTY
60939: LIST
60940: LIST
60941: PUSH
60942: LD_INT 1
60944: PUSH
60945: LD_INT 2
60947: NEG
60948: PUSH
60949: EMPTY
60950: LIST
60951: LIST
60952: PUSH
60953: LD_INT 0
60955: PUSH
60956: LD_INT 2
60958: NEG
60959: PUSH
60960: EMPTY
60961: LIST
60962: LIST
60963: PUSH
60964: LD_INT 1
60966: NEG
60967: PUSH
60968: LD_INT 3
60970: NEG
60971: PUSH
60972: EMPTY
60973: LIST
60974: LIST
60975: PUSH
60976: LD_INT 1
60978: NEG
60979: PUSH
60980: LD_INT 4
60982: NEG
60983: PUSH
60984: EMPTY
60985: LIST
60986: LIST
60987: PUSH
60988: LD_INT 2
60990: PUSH
60991: LD_INT 2
60993: NEG
60994: PUSH
60995: EMPTY
60996: LIST
60997: LIST
60998: PUSH
60999: LD_INT 2
61001: NEG
61002: PUSH
61003: LD_INT 4
61005: NEG
61006: PUSH
61007: EMPTY
61008: LIST
61009: LIST
61010: PUSH
61011: LD_INT 4
61013: PUSH
61014: LD_INT 0
61016: PUSH
61017: EMPTY
61018: LIST
61019: LIST
61020: PUSH
61021: LD_INT 4
61023: PUSH
61024: LD_INT 1
61026: NEG
61027: PUSH
61028: EMPTY
61029: LIST
61030: LIST
61031: PUSH
61032: LD_INT 5
61034: PUSH
61035: LD_INT 0
61037: PUSH
61038: EMPTY
61039: LIST
61040: LIST
61041: PUSH
61042: LD_INT 5
61044: PUSH
61045: LD_INT 1
61047: PUSH
61048: EMPTY
61049: LIST
61050: LIST
61051: PUSH
61052: LD_INT 4
61054: PUSH
61055: LD_INT 1
61057: PUSH
61058: EMPTY
61059: LIST
61060: LIST
61061: PUSH
61062: LD_INT 3
61064: PUSH
61065: LD_INT 0
61067: PUSH
61068: EMPTY
61069: LIST
61070: LIST
61071: PUSH
61072: LD_INT 3
61074: PUSH
61075: LD_INT 1
61077: NEG
61078: PUSH
61079: EMPTY
61080: LIST
61081: LIST
61082: PUSH
61083: LD_INT 3
61085: PUSH
61086: LD_INT 2
61088: NEG
61089: PUSH
61090: EMPTY
61091: LIST
61092: LIST
61093: PUSH
61094: LD_INT 5
61096: PUSH
61097: LD_INT 2
61099: PUSH
61100: EMPTY
61101: LIST
61102: LIST
61103: PUSH
61104: EMPTY
61105: LIST
61106: LIST
61107: LIST
61108: LIST
61109: LIST
61110: LIST
61111: LIST
61112: LIST
61113: LIST
61114: LIST
61115: LIST
61116: LIST
61117: LIST
61118: LIST
61119: LIST
61120: LIST
61121: LIST
61122: LIST
61123: LIST
61124: LIST
61125: LIST
61126: LIST
61127: LIST
61128: LIST
61129: LIST
61130: LIST
61131: LIST
61132: LIST
61133: LIST
61134: LIST
61135: LIST
61136: LIST
61137: LIST
61138: LIST
61139: LIST
61140: LIST
61141: LIST
61142: LIST
61143: LIST
61144: LIST
61145: LIST
61146: LIST
61147: LIST
61148: LIST
61149: LIST
61150: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
61151: LD_ADDR_VAR 0 32
61155: PUSH
61156: LD_INT 4
61158: NEG
61159: PUSH
61160: LD_INT 0
61162: PUSH
61163: EMPTY
61164: LIST
61165: LIST
61166: PUSH
61167: LD_INT 4
61169: NEG
61170: PUSH
61171: LD_INT 1
61173: NEG
61174: PUSH
61175: EMPTY
61176: LIST
61177: LIST
61178: PUSH
61179: LD_INT 3
61181: NEG
61182: PUSH
61183: LD_INT 0
61185: PUSH
61186: EMPTY
61187: LIST
61188: LIST
61189: PUSH
61190: LD_INT 3
61192: NEG
61193: PUSH
61194: LD_INT 1
61196: PUSH
61197: EMPTY
61198: LIST
61199: LIST
61200: PUSH
61201: LD_INT 4
61203: NEG
61204: PUSH
61205: LD_INT 1
61207: PUSH
61208: EMPTY
61209: LIST
61210: LIST
61211: PUSH
61212: LD_INT 5
61214: NEG
61215: PUSH
61216: LD_INT 0
61218: PUSH
61219: EMPTY
61220: LIST
61221: LIST
61222: PUSH
61223: LD_INT 5
61225: NEG
61226: PUSH
61227: LD_INT 1
61229: NEG
61230: PUSH
61231: EMPTY
61232: LIST
61233: LIST
61234: PUSH
61235: LD_INT 5
61237: NEG
61238: PUSH
61239: LD_INT 2
61241: NEG
61242: PUSH
61243: EMPTY
61244: LIST
61245: LIST
61246: PUSH
61247: LD_INT 3
61249: NEG
61250: PUSH
61251: LD_INT 2
61253: PUSH
61254: EMPTY
61255: LIST
61256: LIST
61257: PUSH
61258: LD_INT 3
61260: NEG
61261: PUSH
61262: LD_INT 3
61264: NEG
61265: PUSH
61266: EMPTY
61267: LIST
61268: LIST
61269: PUSH
61270: LD_INT 3
61272: NEG
61273: PUSH
61274: LD_INT 4
61276: NEG
61277: PUSH
61278: EMPTY
61279: LIST
61280: LIST
61281: PUSH
61282: LD_INT 2
61284: NEG
61285: PUSH
61286: LD_INT 3
61288: NEG
61289: PUSH
61290: EMPTY
61291: LIST
61292: LIST
61293: PUSH
61294: LD_INT 2
61296: NEG
61297: PUSH
61298: LD_INT 2
61300: NEG
61301: PUSH
61302: EMPTY
61303: LIST
61304: LIST
61305: PUSH
61306: LD_INT 3
61308: NEG
61309: PUSH
61310: LD_INT 2
61312: NEG
61313: PUSH
61314: EMPTY
61315: LIST
61316: LIST
61317: PUSH
61318: LD_INT 4
61320: NEG
61321: PUSH
61322: LD_INT 3
61324: NEG
61325: PUSH
61326: EMPTY
61327: LIST
61328: LIST
61329: PUSH
61330: LD_INT 4
61332: NEG
61333: PUSH
61334: LD_INT 4
61336: NEG
61337: PUSH
61338: EMPTY
61339: LIST
61340: LIST
61341: PUSH
61342: LD_INT 2
61344: NEG
61345: PUSH
61346: LD_INT 4
61348: NEG
61349: PUSH
61350: EMPTY
61351: LIST
61352: LIST
61353: PUSH
61354: LD_INT 4
61356: NEG
61357: PUSH
61358: LD_INT 2
61360: NEG
61361: PUSH
61362: EMPTY
61363: LIST
61364: LIST
61365: PUSH
61366: LD_INT 0
61368: PUSH
61369: LD_INT 4
61371: NEG
61372: PUSH
61373: EMPTY
61374: LIST
61375: LIST
61376: PUSH
61377: LD_INT 0
61379: PUSH
61380: LD_INT 5
61382: NEG
61383: PUSH
61384: EMPTY
61385: LIST
61386: LIST
61387: PUSH
61388: LD_INT 1
61390: PUSH
61391: LD_INT 4
61393: NEG
61394: PUSH
61395: EMPTY
61396: LIST
61397: LIST
61398: PUSH
61399: LD_INT 1
61401: PUSH
61402: LD_INT 3
61404: NEG
61405: PUSH
61406: EMPTY
61407: LIST
61408: LIST
61409: PUSH
61410: LD_INT 0
61412: PUSH
61413: LD_INT 3
61415: NEG
61416: PUSH
61417: EMPTY
61418: LIST
61419: LIST
61420: PUSH
61421: LD_INT 1
61423: NEG
61424: PUSH
61425: LD_INT 4
61427: NEG
61428: PUSH
61429: EMPTY
61430: LIST
61431: LIST
61432: PUSH
61433: LD_INT 1
61435: NEG
61436: PUSH
61437: LD_INT 5
61439: NEG
61440: PUSH
61441: EMPTY
61442: LIST
61443: LIST
61444: PUSH
61445: LD_INT 2
61447: PUSH
61448: LD_INT 3
61450: NEG
61451: PUSH
61452: EMPTY
61453: LIST
61454: LIST
61455: PUSH
61456: LD_INT 2
61458: NEG
61459: PUSH
61460: LD_INT 5
61462: NEG
61463: PUSH
61464: EMPTY
61465: LIST
61466: LIST
61467: PUSH
61468: LD_INT 3
61470: PUSH
61471: LD_INT 0
61473: PUSH
61474: EMPTY
61475: LIST
61476: LIST
61477: PUSH
61478: LD_INT 3
61480: PUSH
61481: LD_INT 1
61483: NEG
61484: PUSH
61485: EMPTY
61486: LIST
61487: LIST
61488: PUSH
61489: LD_INT 4
61491: PUSH
61492: LD_INT 0
61494: PUSH
61495: EMPTY
61496: LIST
61497: LIST
61498: PUSH
61499: LD_INT 4
61501: PUSH
61502: LD_INT 1
61504: PUSH
61505: EMPTY
61506: LIST
61507: LIST
61508: PUSH
61509: LD_INT 3
61511: PUSH
61512: LD_INT 1
61514: PUSH
61515: EMPTY
61516: LIST
61517: LIST
61518: PUSH
61519: LD_INT 2
61521: PUSH
61522: LD_INT 0
61524: PUSH
61525: EMPTY
61526: LIST
61527: LIST
61528: PUSH
61529: LD_INT 2
61531: PUSH
61532: LD_INT 1
61534: NEG
61535: PUSH
61536: EMPTY
61537: LIST
61538: LIST
61539: PUSH
61540: LD_INT 2
61542: PUSH
61543: LD_INT 2
61545: NEG
61546: PUSH
61547: EMPTY
61548: LIST
61549: LIST
61550: PUSH
61551: LD_INT 4
61553: PUSH
61554: LD_INT 2
61556: PUSH
61557: EMPTY
61558: LIST
61559: LIST
61560: PUSH
61561: LD_INT 4
61563: PUSH
61564: LD_INT 4
61566: PUSH
61567: EMPTY
61568: LIST
61569: LIST
61570: PUSH
61571: LD_INT 4
61573: PUSH
61574: LD_INT 3
61576: PUSH
61577: EMPTY
61578: LIST
61579: LIST
61580: PUSH
61581: LD_INT 5
61583: PUSH
61584: LD_INT 4
61586: PUSH
61587: EMPTY
61588: LIST
61589: LIST
61590: PUSH
61591: LD_INT 5
61593: PUSH
61594: LD_INT 5
61596: PUSH
61597: EMPTY
61598: LIST
61599: LIST
61600: PUSH
61601: LD_INT 4
61603: PUSH
61604: LD_INT 5
61606: PUSH
61607: EMPTY
61608: LIST
61609: LIST
61610: PUSH
61611: LD_INT 3
61613: PUSH
61614: LD_INT 4
61616: PUSH
61617: EMPTY
61618: LIST
61619: LIST
61620: PUSH
61621: LD_INT 3
61623: PUSH
61624: LD_INT 3
61626: PUSH
61627: EMPTY
61628: LIST
61629: LIST
61630: PUSH
61631: LD_INT 5
61633: PUSH
61634: LD_INT 3
61636: PUSH
61637: EMPTY
61638: LIST
61639: LIST
61640: PUSH
61641: LD_INT 3
61643: PUSH
61644: LD_INT 5
61646: PUSH
61647: EMPTY
61648: LIST
61649: LIST
61650: PUSH
61651: EMPTY
61652: LIST
61653: LIST
61654: LIST
61655: LIST
61656: LIST
61657: LIST
61658: LIST
61659: LIST
61660: LIST
61661: LIST
61662: LIST
61663: LIST
61664: LIST
61665: LIST
61666: LIST
61667: LIST
61668: LIST
61669: LIST
61670: LIST
61671: LIST
61672: LIST
61673: LIST
61674: LIST
61675: LIST
61676: LIST
61677: LIST
61678: LIST
61679: LIST
61680: LIST
61681: LIST
61682: LIST
61683: LIST
61684: LIST
61685: LIST
61686: LIST
61687: LIST
61688: LIST
61689: LIST
61690: LIST
61691: LIST
61692: LIST
61693: LIST
61694: LIST
61695: LIST
61696: LIST
61697: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
61698: LD_ADDR_VAR 0 33
61702: PUSH
61703: LD_INT 4
61705: NEG
61706: PUSH
61707: LD_INT 4
61709: NEG
61710: PUSH
61711: EMPTY
61712: LIST
61713: LIST
61714: PUSH
61715: LD_INT 4
61717: NEG
61718: PUSH
61719: LD_INT 5
61721: NEG
61722: PUSH
61723: EMPTY
61724: LIST
61725: LIST
61726: PUSH
61727: LD_INT 3
61729: NEG
61730: PUSH
61731: LD_INT 4
61733: NEG
61734: PUSH
61735: EMPTY
61736: LIST
61737: LIST
61738: PUSH
61739: LD_INT 3
61741: NEG
61742: PUSH
61743: LD_INT 3
61745: NEG
61746: PUSH
61747: EMPTY
61748: LIST
61749: LIST
61750: PUSH
61751: LD_INT 4
61753: NEG
61754: PUSH
61755: LD_INT 3
61757: NEG
61758: PUSH
61759: EMPTY
61760: LIST
61761: LIST
61762: PUSH
61763: LD_INT 5
61765: NEG
61766: PUSH
61767: LD_INT 4
61769: NEG
61770: PUSH
61771: EMPTY
61772: LIST
61773: LIST
61774: PUSH
61775: LD_INT 5
61777: NEG
61778: PUSH
61779: LD_INT 5
61781: NEG
61782: PUSH
61783: EMPTY
61784: LIST
61785: LIST
61786: PUSH
61787: LD_INT 3
61789: NEG
61790: PUSH
61791: LD_INT 5
61793: NEG
61794: PUSH
61795: EMPTY
61796: LIST
61797: LIST
61798: PUSH
61799: LD_INT 5
61801: NEG
61802: PUSH
61803: LD_INT 3
61805: NEG
61806: PUSH
61807: EMPTY
61808: LIST
61809: LIST
61810: PUSH
61811: LD_INT 0
61813: PUSH
61814: LD_INT 3
61816: NEG
61817: PUSH
61818: EMPTY
61819: LIST
61820: LIST
61821: PUSH
61822: LD_INT 0
61824: PUSH
61825: LD_INT 4
61827: NEG
61828: PUSH
61829: EMPTY
61830: LIST
61831: LIST
61832: PUSH
61833: LD_INT 1
61835: PUSH
61836: LD_INT 3
61838: NEG
61839: PUSH
61840: EMPTY
61841: LIST
61842: LIST
61843: PUSH
61844: LD_INT 1
61846: PUSH
61847: LD_INT 2
61849: NEG
61850: PUSH
61851: EMPTY
61852: LIST
61853: LIST
61854: PUSH
61855: LD_INT 0
61857: PUSH
61858: LD_INT 2
61860: NEG
61861: PUSH
61862: EMPTY
61863: LIST
61864: LIST
61865: PUSH
61866: LD_INT 1
61868: NEG
61869: PUSH
61870: LD_INT 3
61872: NEG
61873: PUSH
61874: EMPTY
61875: LIST
61876: LIST
61877: PUSH
61878: LD_INT 1
61880: NEG
61881: PUSH
61882: LD_INT 4
61884: NEG
61885: PUSH
61886: EMPTY
61887: LIST
61888: LIST
61889: PUSH
61890: LD_INT 2
61892: PUSH
61893: LD_INT 2
61895: NEG
61896: PUSH
61897: EMPTY
61898: LIST
61899: LIST
61900: PUSH
61901: LD_INT 2
61903: NEG
61904: PUSH
61905: LD_INT 4
61907: NEG
61908: PUSH
61909: EMPTY
61910: LIST
61911: LIST
61912: PUSH
61913: LD_INT 4
61915: PUSH
61916: LD_INT 0
61918: PUSH
61919: EMPTY
61920: LIST
61921: LIST
61922: PUSH
61923: LD_INT 4
61925: PUSH
61926: LD_INT 1
61928: NEG
61929: PUSH
61930: EMPTY
61931: LIST
61932: LIST
61933: PUSH
61934: LD_INT 5
61936: PUSH
61937: LD_INT 0
61939: PUSH
61940: EMPTY
61941: LIST
61942: LIST
61943: PUSH
61944: LD_INT 5
61946: PUSH
61947: LD_INT 1
61949: PUSH
61950: EMPTY
61951: LIST
61952: LIST
61953: PUSH
61954: LD_INT 4
61956: PUSH
61957: LD_INT 1
61959: PUSH
61960: EMPTY
61961: LIST
61962: LIST
61963: PUSH
61964: LD_INT 3
61966: PUSH
61967: LD_INT 0
61969: PUSH
61970: EMPTY
61971: LIST
61972: LIST
61973: PUSH
61974: LD_INT 3
61976: PUSH
61977: LD_INT 1
61979: NEG
61980: PUSH
61981: EMPTY
61982: LIST
61983: LIST
61984: PUSH
61985: LD_INT 3
61987: PUSH
61988: LD_INT 2
61990: NEG
61991: PUSH
61992: EMPTY
61993: LIST
61994: LIST
61995: PUSH
61996: LD_INT 5
61998: PUSH
61999: LD_INT 2
62001: PUSH
62002: EMPTY
62003: LIST
62004: LIST
62005: PUSH
62006: LD_INT 3
62008: PUSH
62009: LD_INT 3
62011: PUSH
62012: EMPTY
62013: LIST
62014: LIST
62015: PUSH
62016: LD_INT 3
62018: PUSH
62019: LD_INT 2
62021: PUSH
62022: EMPTY
62023: LIST
62024: LIST
62025: PUSH
62026: LD_INT 4
62028: PUSH
62029: LD_INT 3
62031: PUSH
62032: EMPTY
62033: LIST
62034: LIST
62035: PUSH
62036: LD_INT 4
62038: PUSH
62039: LD_INT 4
62041: PUSH
62042: EMPTY
62043: LIST
62044: LIST
62045: PUSH
62046: LD_INT 3
62048: PUSH
62049: LD_INT 4
62051: PUSH
62052: EMPTY
62053: LIST
62054: LIST
62055: PUSH
62056: LD_INT 2
62058: PUSH
62059: LD_INT 3
62061: PUSH
62062: EMPTY
62063: LIST
62064: LIST
62065: PUSH
62066: LD_INT 2
62068: PUSH
62069: LD_INT 2
62071: PUSH
62072: EMPTY
62073: LIST
62074: LIST
62075: PUSH
62076: LD_INT 4
62078: PUSH
62079: LD_INT 2
62081: PUSH
62082: EMPTY
62083: LIST
62084: LIST
62085: PUSH
62086: LD_INT 2
62088: PUSH
62089: LD_INT 4
62091: PUSH
62092: EMPTY
62093: LIST
62094: LIST
62095: PUSH
62096: LD_INT 0
62098: PUSH
62099: LD_INT 4
62101: PUSH
62102: EMPTY
62103: LIST
62104: LIST
62105: PUSH
62106: LD_INT 0
62108: PUSH
62109: LD_INT 3
62111: PUSH
62112: EMPTY
62113: LIST
62114: LIST
62115: PUSH
62116: LD_INT 1
62118: PUSH
62119: LD_INT 4
62121: PUSH
62122: EMPTY
62123: LIST
62124: LIST
62125: PUSH
62126: LD_INT 1
62128: PUSH
62129: LD_INT 5
62131: PUSH
62132: EMPTY
62133: LIST
62134: LIST
62135: PUSH
62136: LD_INT 0
62138: PUSH
62139: LD_INT 5
62141: PUSH
62142: EMPTY
62143: LIST
62144: LIST
62145: PUSH
62146: LD_INT 1
62148: NEG
62149: PUSH
62150: LD_INT 4
62152: PUSH
62153: EMPTY
62154: LIST
62155: LIST
62156: PUSH
62157: LD_INT 1
62159: NEG
62160: PUSH
62161: LD_INT 3
62163: PUSH
62164: EMPTY
62165: LIST
62166: LIST
62167: PUSH
62168: LD_INT 2
62170: PUSH
62171: LD_INT 5
62173: PUSH
62174: EMPTY
62175: LIST
62176: LIST
62177: PUSH
62178: LD_INT 2
62180: NEG
62181: PUSH
62182: LD_INT 3
62184: PUSH
62185: EMPTY
62186: LIST
62187: LIST
62188: PUSH
62189: EMPTY
62190: LIST
62191: LIST
62192: LIST
62193: LIST
62194: LIST
62195: LIST
62196: LIST
62197: LIST
62198: LIST
62199: LIST
62200: LIST
62201: LIST
62202: LIST
62203: LIST
62204: LIST
62205: LIST
62206: LIST
62207: LIST
62208: LIST
62209: LIST
62210: LIST
62211: LIST
62212: LIST
62213: LIST
62214: LIST
62215: LIST
62216: LIST
62217: LIST
62218: LIST
62219: LIST
62220: LIST
62221: LIST
62222: LIST
62223: LIST
62224: LIST
62225: LIST
62226: LIST
62227: LIST
62228: LIST
62229: LIST
62230: LIST
62231: LIST
62232: LIST
62233: LIST
62234: LIST
62235: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
62236: LD_ADDR_VAR 0 34
62240: PUSH
62241: LD_INT 0
62243: PUSH
62244: LD_INT 4
62246: NEG
62247: PUSH
62248: EMPTY
62249: LIST
62250: LIST
62251: PUSH
62252: LD_INT 0
62254: PUSH
62255: LD_INT 5
62257: NEG
62258: PUSH
62259: EMPTY
62260: LIST
62261: LIST
62262: PUSH
62263: LD_INT 1
62265: PUSH
62266: LD_INT 4
62268: NEG
62269: PUSH
62270: EMPTY
62271: LIST
62272: LIST
62273: PUSH
62274: LD_INT 1
62276: PUSH
62277: LD_INT 3
62279: NEG
62280: PUSH
62281: EMPTY
62282: LIST
62283: LIST
62284: PUSH
62285: LD_INT 0
62287: PUSH
62288: LD_INT 3
62290: NEG
62291: PUSH
62292: EMPTY
62293: LIST
62294: LIST
62295: PUSH
62296: LD_INT 1
62298: NEG
62299: PUSH
62300: LD_INT 4
62302: NEG
62303: PUSH
62304: EMPTY
62305: LIST
62306: LIST
62307: PUSH
62308: LD_INT 1
62310: NEG
62311: PUSH
62312: LD_INT 5
62314: NEG
62315: PUSH
62316: EMPTY
62317: LIST
62318: LIST
62319: PUSH
62320: LD_INT 2
62322: PUSH
62323: LD_INT 3
62325: NEG
62326: PUSH
62327: EMPTY
62328: LIST
62329: LIST
62330: PUSH
62331: LD_INT 2
62333: NEG
62334: PUSH
62335: LD_INT 5
62337: NEG
62338: PUSH
62339: EMPTY
62340: LIST
62341: LIST
62342: PUSH
62343: LD_INT 3
62345: PUSH
62346: LD_INT 0
62348: PUSH
62349: EMPTY
62350: LIST
62351: LIST
62352: PUSH
62353: LD_INT 3
62355: PUSH
62356: LD_INT 1
62358: NEG
62359: PUSH
62360: EMPTY
62361: LIST
62362: LIST
62363: PUSH
62364: LD_INT 4
62366: PUSH
62367: LD_INT 0
62369: PUSH
62370: EMPTY
62371: LIST
62372: LIST
62373: PUSH
62374: LD_INT 4
62376: PUSH
62377: LD_INT 1
62379: PUSH
62380: EMPTY
62381: LIST
62382: LIST
62383: PUSH
62384: LD_INT 3
62386: PUSH
62387: LD_INT 1
62389: PUSH
62390: EMPTY
62391: LIST
62392: LIST
62393: PUSH
62394: LD_INT 2
62396: PUSH
62397: LD_INT 0
62399: PUSH
62400: EMPTY
62401: LIST
62402: LIST
62403: PUSH
62404: LD_INT 2
62406: PUSH
62407: LD_INT 1
62409: NEG
62410: PUSH
62411: EMPTY
62412: LIST
62413: LIST
62414: PUSH
62415: LD_INT 2
62417: PUSH
62418: LD_INT 2
62420: NEG
62421: PUSH
62422: EMPTY
62423: LIST
62424: LIST
62425: PUSH
62426: LD_INT 4
62428: PUSH
62429: LD_INT 2
62431: PUSH
62432: EMPTY
62433: LIST
62434: LIST
62435: PUSH
62436: LD_INT 4
62438: PUSH
62439: LD_INT 4
62441: PUSH
62442: EMPTY
62443: LIST
62444: LIST
62445: PUSH
62446: LD_INT 4
62448: PUSH
62449: LD_INT 3
62451: PUSH
62452: EMPTY
62453: LIST
62454: LIST
62455: PUSH
62456: LD_INT 5
62458: PUSH
62459: LD_INT 4
62461: PUSH
62462: EMPTY
62463: LIST
62464: LIST
62465: PUSH
62466: LD_INT 5
62468: PUSH
62469: LD_INT 5
62471: PUSH
62472: EMPTY
62473: LIST
62474: LIST
62475: PUSH
62476: LD_INT 4
62478: PUSH
62479: LD_INT 5
62481: PUSH
62482: EMPTY
62483: LIST
62484: LIST
62485: PUSH
62486: LD_INT 3
62488: PUSH
62489: LD_INT 4
62491: PUSH
62492: EMPTY
62493: LIST
62494: LIST
62495: PUSH
62496: LD_INT 3
62498: PUSH
62499: LD_INT 3
62501: PUSH
62502: EMPTY
62503: LIST
62504: LIST
62505: PUSH
62506: LD_INT 5
62508: PUSH
62509: LD_INT 3
62511: PUSH
62512: EMPTY
62513: LIST
62514: LIST
62515: PUSH
62516: LD_INT 3
62518: PUSH
62519: LD_INT 5
62521: PUSH
62522: EMPTY
62523: LIST
62524: LIST
62525: PUSH
62526: LD_INT 0
62528: PUSH
62529: LD_INT 3
62531: PUSH
62532: EMPTY
62533: LIST
62534: LIST
62535: PUSH
62536: LD_INT 0
62538: PUSH
62539: LD_INT 2
62541: PUSH
62542: EMPTY
62543: LIST
62544: LIST
62545: PUSH
62546: LD_INT 1
62548: PUSH
62549: LD_INT 3
62551: PUSH
62552: EMPTY
62553: LIST
62554: LIST
62555: PUSH
62556: LD_INT 1
62558: PUSH
62559: LD_INT 4
62561: PUSH
62562: EMPTY
62563: LIST
62564: LIST
62565: PUSH
62566: LD_INT 0
62568: PUSH
62569: LD_INT 4
62571: PUSH
62572: EMPTY
62573: LIST
62574: LIST
62575: PUSH
62576: LD_INT 1
62578: NEG
62579: PUSH
62580: LD_INT 3
62582: PUSH
62583: EMPTY
62584: LIST
62585: LIST
62586: PUSH
62587: LD_INT 1
62589: NEG
62590: PUSH
62591: LD_INT 2
62593: PUSH
62594: EMPTY
62595: LIST
62596: LIST
62597: PUSH
62598: LD_INT 2
62600: PUSH
62601: LD_INT 4
62603: PUSH
62604: EMPTY
62605: LIST
62606: LIST
62607: PUSH
62608: LD_INT 2
62610: NEG
62611: PUSH
62612: LD_INT 2
62614: PUSH
62615: EMPTY
62616: LIST
62617: LIST
62618: PUSH
62619: LD_INT 4
62621: NEG
62622: PUSH
62623: LD_INT 0
62625: PUSH
62626: EMPTY
62627: LIST
62628: LIST
62629: PUSH
62630: LD_INT 4
62632: NEG
62633: PUSH
62634: LD_INT 1
62636: NEG
62637: PUSH
62638: EMPTY
62639: LIST
62640: LIST
62641: PUSH
62642: LD_INT 3
62644: NEG
62645: PUSH
62646: LD_INT 0
62648: PUSH
62649: EMPTY
62650: LIST
62651: LIST
62652: PUSH
62653: LD_INT 3
62655: NEG
62656: PUSH
62657: LD_INT 1
62659: PUSH
62660: EMPTY
62661: LIST
62662: LIST
62663: PUSH
62664: LD_INT 4
62666: NEG
62667: PUSH
62668: LD_INT 1
62670: PUSH
62671: EMPTY
62672: LIST
62673: LIST
62674: PUSH
62675: LD_INT 5
62677: NEG
62678: PUSH
62679: LD_INT 0
62681: PUSH
62682: EMPTY
62683: LIST
62684: LIST
62685: PUSH
62686: LD_INT 5
62688: NEG
62689: PUSH
62690: LD_INT 1
62692: NEG
62693: PUSH
62694: EMPTY
62695: LIST
62696: LIST
62697: PUSH
62698: LD_INT 5
62700: NEG
62701: PUSH
62702: LD_INT 2
62704: NEG
62705: PUSH
62706: EMPTY
62707: LIST
62708: LIST
62709: PUSH
62710: LD_INT 3
62712: NEG
62713: PUSH
62714: LD_INT 2
62716: PUSH
62717: EMPTY
62718: LIST
62719: LIST
62720: PUSH
62721: EMPTY
62722: LIST
62723: LIST
62724: LIST
62725: LIST
62726: LIST
62727: LIST
62728: LIST
62729: LIST
62730: LIST
62731: LIST
62732: LIST
62733: LIST
62734: LIST
62735: LIST
62736: LIST
62737: LIST
62738: LIST
62739: LIST
62740: LIST
62741: LIST
62742: LIST
62743: LIST
62744: LIST
62745: LIST
62746: LIST
62747: LIST
62748: LIST
62749: LIST
62750: LIST
62751: LIST
62752: LIST
62753: LIST
62754: LIST
62755: LIST
62756: LIST
62757: LIST
62758: LIST
62759: LIST
62760: LIST
62761: LIST
62762: LIST
62763: LIST
62764: LIST
62765: LIST
62766: LIST
62767: ST_TO_ADDR
// end ; end ;
62768: GO 62771
62770: POP
// case btype of b_depot , b_warehouse :
62771: LD_VAR 0 1
62775: PUSH
62776: LD_INT 0
62778: DOUBLE
62779: EQUAL
62780: IFTRUE 62790
62782: LD_INT 1
62784: DOUBLE
62785: EQUAL
62786: IFTRUE 62790
62788: GO 62991
62790: POP
// case nation of nation_american :
62791: LD_VAR 0 5
62795: PUSH
62796: LD_INT 1
62798: DOUBLE
62799: EQUAL
62800: IFTRUE 62804
62802: GO 62860
62804: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
62805: LD_ADDR_VAR 0 9
62809: PUSH
62810: LD_VAR 0 11
62814: PUSH
62815: LD_VAR 0 12
62819: PUSH
62820: LD_VAR 0 13
62824: PUSH
62825: LD_VAR 0 14
62829: PUSH
62830: LD_VAR 0 15
62834: PUSH
62835: LD_VAR 0 16
62839: PUSH
62840: EMPTY
62841: LIST
62842: LIST
62843: LIST
62844: LIST
62845: LIST
62846: LIST
62847: PUSH
62848: LD_VAR 0 4
62852: PUSH
62853: LD_INT 1
62855: PLUS
62856: ARRAY
62857: ST_TO_ADDR
62858: GO 62989
62860: LD_INT 2
62862: DOUBLE
62863: EQUAL
62864: IFTRUE 62868
62866: GO 62924
62868: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
62869: LD_ADDR_VAR 0 9
62873: PUSH
62874: LD_VAR 0 17
62878: PUSH
62879: LD_VAR 0 18
62883: PUSH
62884: LD_VAR 0 19
62888: PUSH
62889: LD_VAR 0 20
62893: PUSH
62894: LD_VAR 0 21
62898: PUSH
62899: LD_VAR 0 22
62903: PUSH
62904: EMPTY
62905: LIST
62906: LIST
62907: LIST
62908: LIST
62909: LIST
62910: LIST
62911: PUSH
62912: LD_VAR 0 4
62916: PUSH
62917: LD_INT 1
62919: PLUS
62920: ARRAY
62921: ST_TO_ADDR
62922: GO 62989
62924: LD_INT 3
62926: DOUBLE
62927: EQUAL
62928: IFTRUE 62932
62930: GO 62988
62932: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
62933: LD_ADDR_VAR 0 9
62937: PUSH
62938: LD_VAR 0 23
62942: PUSH
62943: LD_VAR 0 24
62947: PUSH
62948: LD_VAR 0 25
62952: PUSH
62953: LD_VAR 0 26
62957: PUSH
62958: LD_VAR 0 27
62962: PUSH
62963: LD_VAR 0 28
62967: PUSH
62968: EMPTY
62969: LIST
62970: LIST
62971: LIST
62972: LIST
62973: LIST
62974: LIST
62975: PUSH
62976: LD_VAR 0 4
62980: PUSH
62981: LD_INT 1
62983: PLUS
62984: ARRAY
62985: ST_TO_ADDR
62986: GO 62989
62988: POP
62989: GO 63544
62991: LD_INT 2
62993: DOUBLE
62994: EQUAL
62995: IFTRUE 63005
62997: LD_INT 3
62999: DOUBLE
63000: EQUAL
63001: IFTRUE 63005
63003: GO 63061
63005: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
63006: LD_ADDR_VAR 0 9
63010: PUSH
63011: LD_VAR 0 29
63015: PUSH
63016: LD_VAR 0 30
63020: PUSH
63021: LD_VAR 0 31
63025: PUSH
63026: LD_VAR 0 32
63030: PUSH
63031: LD_VAR 0 33
63035: PUSH
63036: LD_VAR 0 34
63040: PUSH
63041: EMPTY
63042: LIST
63043: LIST
63044: LIST
63045: LIST
63046: LIST
63047: LIST
63048: PUSH
63049: LD_VAR 0 4
63053: PUSH
63054: LD_INT 1
63056: PLUS
63057: ARRAY
63058: ST_TO_ADDR
63059: GO 63544
63061: LD_INT 16
63063: DOUBLE
63064: EQUAL
63065: IFTRUE 63123
63067: LD_INT 17
63069: DOUBLE
63070: EQUAL
63071: IFTRUE 63123
63073: LD_INT 18
63075: DOUBLE
63076: EQUAL
63077: IFTRUE 63123
63079: LD_INT 19
63081: DOUBLE
63082: EQUAL
63083: IFTRUE 63123
63085: LD_INT 22
63087: DOUBLE
63088: EQUAL
63089: IFTRUE 63123
63091: LD_INT 20
63093: DOUBLE
63094: EQUAL
63095: IFTRUE 63123
63097: LD_INT 21
63099: DOUBLE
63100: EQUAL
63101: IFTRUE 63123
63103: LD_INT 23
63105: DOUBLE
63106: EQUAL
63107: IFTRUE 63123
63109: LD_INT 24
63111: DOUBLE
63112: EQUAL
63113: IFTRUE 63123
63115: LD_INT 25
63117: DOUBLE
63118: EQUAL
63119: IFTRUE 63123
63121: GO 63179
63123: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
63124: LD_ADDR_VAR 0 9
63128: PUSH
63129: LD_VAR 0 35
63133: PUSH
63134: LD_VAR 0 36
63138: PUSH
63139: LD_VAR 0 37
63143: PUSH
63144: LD_VAR 0 38
63148: PUSH
63149: LD_VAR 0 39
63153: PUSH
63154: LD_VAR 0 40
63158: PUSH
63159: EMPTY
63160: LIST
63161: LIST
63162: LIST
63163: LIST
63164: LIST
63165: LIST
63166: PUSH
63167: LD_VAR 0 4
63171: PUSH
63172: LD_INT 1
63174: PLUS
63175: ARRAY
63176: ST_TO_ADDR
63177: GO 63544
63179: LD_INT 6
63181: DOUBLE
63182: EQUAL
63183: IFTRUE 63235
63185: LD_INT 7
63187: DOUBLE
63188: EQUAL
63189: IFTRUE 63235
63191: LD_INT 8
63193: DOUBLE
63194: EQUAL
63195: IFTRUE 63235
63197: LD_INT 13
63199: DOUBLE
63200: EQUAL
63201: IFTRUE 63235
63203: LD_INT 12
63205: DOUBLE
63206: EQUAL
63207: IFTRUE 63235
63209: LD_INT 15
63211: DOUBLE
63212: EQUAL
63213: IFTRUE 63235
63215: LD_INT 11
63217: DOUBLE
63218: EQUAL
63219: IFTRUE 63235
63221: LD_INT 14
63223: DOUBLE
63224: EQUAL
63225: IFTRUE 63235
63227: LD_INT 10
63229: DOUBLE
63230: EQUAL
63231: IFTRUE 63235
63233: GO 63291
63235: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
63236: LD_ADDR_VAR 0 9
63240: PUSH
63241: LD_VAR 0 41
63245: PUSH
63246: LD_VAR 0 42
63250: PUSH
63251: LD_VAR 0 43
63255: PUSH
63256: LD_VAR 0 44
63260: PUSH
63261: LD_VAR 0 45
63265: PUSH
63266: LD_VAR 0 46
63270: PUSH
63271: EMPTY
63272: LIST
63273: LIST
63274: LIST
63275: LIST
63276: LIST
63277: LIST
63278: PUSH
63279: LD_VAR 0 4
63283: PUSH
63284: LD_INT 1
63286: PLUS
63287: ARRAY
63288: ST_TO_ADDR
63289: GO 63544
63291: LD_INT 36
63293: DOUBLE
63294: EQUAL
63295: IFTRUE 63299
63297: GO 63355
63299: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
63300: LD_ADDR_VAR 0 9
63304: PUSH
63305: LD_VAR 0 47
63309: PUSH
63310: LD_VAR 0 48
63314: PUSH
63315: LD_VAR 0 49
63319: PUSH
63320: LD_VAR 0 50
63324: PUSH
63325: LD_VAR 0 51
63329: PUSH
63330: LD_VAR 0 52
63334: PUSH
63335: EMPTY
63336: LIST
63337: LIST
63338: LIST
63339: LIST
63340: LIST
63341: LIST
63342: PUSH
63343: LD_VAR 0 4
63347: PUSH
63348: LD_INT 1
63350: PLUS
63351: ARRAY
63352: ST_TO_ADDR
63353: GO 63544
63355: LD_INT 4
63357: DOUBLE
63358: EQUAL
63359: IFTRUE 63381
63361: LD_INT 5
63363: DOUBLE
63364: EQUAL
63365: IFTRUE 63381
63367: LD_INT 34
63369: DOUBLE
63370: EQUAL
63371: IFTRUE 63381
63373: LD_INT 37
63375: DOUBLE
63376: EQUAL
63377: IFTRUE 63381
63379: GO 63437
63381: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
63382: LD_ADDR_VAR 0 9
63386: PUSH
63387: LD_VAR 0 53
63391: PUSH
63392: LD_VAR 0 54
63396: PUSH
63397: LD_VAR 0 55
63401: PUSH
63402: LD_VAR 0 56
63406: PUSH
63407: LD_VAR 0 57
63411: PUSH
63412: LD_VAR 0 58
63416: PUSH
63417: EMPTY
63418: LIST
63419: LIST
63420: LIST
63421: LIST
63422: LIST
63423: LIST
63424: PUSH
63425: LD_VAR 0 4
63429: PUSH
63430: LD_INT 1
63432: PLUS
63433: ARRAY
63434: ST_TO_ADDR
63435: GO 63544
63437: LD_INT 31
63439: DOUBLE
63440: EQUAL
63441: IFTRUE 63487
63443: LD_INT 32
63445: DOUBLE
63446: EQUAL
63447: IFTRUE 63487
63449: LD_INT 33
63451: DOUBLE
63452: EQUAL
63453: IFTRUE 63487
63455: LD_INT 27
63457: DOUBLE
63458: EQUAL
63459: IFTRUE 63487
63461: LD_INT 26
63463: DOUBLE
63464: EQUAL
63465: IFTRUE 63487
63467: LD_INT 28
63469: DOUBLE
63470: EQUAL
63471: IFTRUE 63487
63473: LD_INT 29
63475: DOUBLE
63476: EQUAL
63477: IFTRUE 63487
63479: LD_INT 30
63481: DOUBLE
63482: EQUAL
63483: IFTRUE 63487
63485: GO 63543
63487: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
63488: LD_ADDR_VAR 0 9
63492: PUSH
63493: LD_VAR 0 59
63497: PUSH
63498: LD_VAR 0 60
63502: PUSH
63503: LD_VAR 0 61
63507: PUSH
63508: LD_VAR 0 62
63512: PUSH
63513: LD_VAR 0 63
63517: PUSH
63518: LD_VAR 0 64
63522: PUSH
63523: EMPTY
63524: LIST
63525: LIST
63526: LIST
63527: LIST
63528: LIST
63529: LIST
63530: PUSH
63531: LD_VAR 0 4
63535: PUSH
63536: LD_INT 1
63538: PLUS
63539: ARRAY
63540: ST_TO_ADDR
63541: GO 63544
63543: POP
// temp_list2 = [ ] ;
63544: LD_ADDR_VAR 0 10
63548: PUSH
63549: EMPTY
63550: ST_TO_ADDR
// for i in temp_list do
63551: LD_ADDR_VAR 0 8
63555: PUSH
63556: LD_VAR 0 9
63560: PUSH
63561: FOR_IN
63562: IFFALSE 63614
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
63564: LD_ADDR_VAR 0 10
63568: PUSH
63569: LD_VAR 0 10
63573: PUSH
63574: LD_VAR 0 8
63578: PUSH
63579: LD_INT 1
63581: ARRAY
63582: PUSH
63583: LD_VAR 0 2
63587: PLUS
63588: PUSH
63589: LD_VAR 0 8
63593: PUSH
63594: LD_INT 2
63596: ARRAY
63597: PUSH
63598: LD_VAR 0 3
63602: PLUS
63603: PUSH
63604: EMPTY
63605: LIST
63606: LIST
63607: PUSH
63608: EMPTY
63609: LIST
63610: ADD
63611: ST_TO_ADDR
63612: GO 63561
63614: POP
63615: POP
// result = temp_list2 ;
63616: LD_ADDR_VAR 0 7
63620: PUSH
63621: LD_VAR 0 10
63625: ST_TO_ADDR
// end ;
63626: LD_VAR 0 7
63630: RET
// export function EnemyInRange ( unit , dist ) ; begin
63631: LD_INT 0
63633: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
63634: LD_ADDR_VAR 0 3
63638: PUSH
63639: LD_VAR 0 1
63643: PPUSH
63644: CALL_OW 255
63648: PPUSH
63649: LD_VAR 0 1
63653: PPUSH
63654: CALL_OW 250
63658: PPUSH
63659: LD_VAR 0 1
63663: PPUSH
63664: CALL_OW 251
63668: PPUSH
63669: LD_VAR 0 2
63673: PPUSH
63674: CALL 37027 0 4
63678: PUSH
63679: LD_INT 4
63681: ARRAY
63682: ST_TO_ADDR
// end ;
63683: LD_VAR 0 3
63687: RET
// export function PlayerSeeMe ( unit ) ; begin
63688: LD_INT 0
63690: PPUSH
// result := See ( your_side , unit ) ;
63691: LD_ADDR_VAR 0 2
63695: PUSH
63696: LD_OWVAR 2
63700: PPUSH
63701: LD_VAR 0 1
63705: PPUSH
63706: CALL_OW 292
63710: ST_TO_ADDR
// end ;
63711: LD_VAR 0 2
63715: RET
// export function ReverseDir ( unit ) ; begin
63716: LD_INT 0
63718: PPUSH
// if not unit then
63719: LD_VAR 0 1
63723: NOT
63724: IFFALSE 63728
// exit ;
63726: GO 63751
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
63728: LD_ADDR_VAR 0 2
63732: PUSH
63733: LD_VAR 0 1
63737: PPUSH
63738: CALL_OW 254
63742: PUSH
63743: LD_INT 3
63745: PLUS
63746: PUSH
63747: LD_INT 6
63749: MOD
63750: ST_TO_ADDR
// end ;
63751: LD_VAR 0 2
63755: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
63756: LD_INT 0
63758: PPUSH
63759: PPUSH
63760: PPUSH
63761: PPUSH
63762: PPUSH
// if not hexes then
63763: LD_VAR 0 2
63767: NOT
63768: IFFALSE 63772
// exit ;
63770: GO 63920
// dist := 9999 ;
63772: LD_ADDR_VAR 0 5
63776: PUSH
63777: LD_INT 9999
63779: ST_TO_ADDR
// for i = 1 to hexes do
63780: LD_ADDR_VAR 0 4
63784: PUSH
63785: DOUBLE
63786: LD_INT 1
63788: DEC
63789: ST_TO_ADDR
63790: LD_VAR 0 2
63794: PUSH
63795: FOR_TO
63796: IFFALSE 63908
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
63798: LD_VAR 0 1
63802: PPUSH
63803: LD_VAR 0 2
63807: PUSH
63808: LD_VAR 0 4
63812: ARRAY
63813: PUSH
63814: LD_INT 1
63816: ARRAY
63817: PPUSH
63818: LD_VAR 0 2
63822: PUSH
63823: LD_VAR 0 4
63827: ARRAY
63828: PUSH
63829: LD_INT 2
63831: ARRAY
63832: PPUSH
63833: CALL_OW 297
63837: PUSH
63838: LD_VAR 0 5
63842: LESS
63843: IFFALSE 63906
// begin hex := hexes [ i ] ;
63845: LD_ADDR_VAR 0 7
63849: PUSH
63850: LD_VAR 0 2
63854: PUSH
63855: LD_VAR 0 4
63859: ARRAY
63860: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
63861: LD_ADDR_VAR 0 5
63865: PUSH
63866: LD_VAR 0 1
63870: PPUSH
63871: LD_VAR 0 2
63875: PUSH
63876: LD_VAR 0 4
63880: ARRAY
63881: PUSH
63882: LD_INT 1
63884: ARRAY
63885: PPUSH
63886: LD_VAR 0 2
63890: PUSH
63891: LD_VAR 0 4
63895: ARRAY
63896: PUSH
63897: LD_INT 2
63899: ARRAY
63900: PPUSH
63901: CALL_OW 297
63905: ST_TO_ADDR
// end ; end ;
63906: GO 63795
63908: POP
63909: POP
// result := hex ;
63910: LD_ADDR_VAR 0 3
63914: PUSH
63915: LD_VAR 0 7
63919: ST_TO_ADDR
// end ;
63920: LD_VAR 0 3
63924: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
63925: LD_INT 0
63927: PPUSH
63928: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
63929: LD_VAR 0 1
63933: NOT
63934: PUSH
63935: LD_VAR 0 1
63939: PUSH
63940: LD_INT 21
63942: PUSH
63943: LD_INT 2
63945: PUSH
63946: EMPTY
63947: LIST
63948: LIST
63949: PUSH
63950: LD_INT 23
63952: PUSH
63953: LD_INT 2
63955: PUSH
63956: EMPTY
63957: LIST
63958: LIST
63959: PUSH
63960: EMPTY
63961: LIST
63962: LIST
63963: PPUSH
63964: CALL_OW 69
63968: IN
63969: NOT
63970: OR
63971: IFFALSE 63975
// exit ;
63973: GO 64022
// for i = 1 to 3 do
63975: LD_ADDR_VAR 0 3
63979: PUSH
63980: DOUBLE
63981: LD_INT 1
63983: DEC
63984: ST_TO_ADDR
63985: LD_INT 3
63987: PUSH
63988: FOR_TO
63989: IFFALSE 64020
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
63991: LD_VAR 0 1
63995: PPUSH
63996: CALL_OW 250
64000: PPUSH
64001: LD_VAR 0 1
64005: PPUSH
64006: CALL_OW 251
64010: PPUSH
64011: LD_INT 1
64013: PPUSH
64014: CALL_OW 453
64018: GO 63988
64020: POP
64021: POP
// end ;
64022: LD_VAR 0 2
64026: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
64027: LD_INT 0
64029: PPUSH
64030: PPUSH
64031: PPUSH
64032: PPUSH
64033: PPUSH
64034: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
64035: LD_VAR 0 1
64039: NOT
64040: PUSH
64041: LD_VAR 0 2
64045: NOT
64046: OR
64047: PUSH
64048: LD_VAR 0 1
64052: PPUSH
64053: CALL_OW 314
64057: OR
64058: IFFALSE 64062
// exit ;
64060: GO 64503
// x := GetX ( enemy_unit ) ;
64062: LD_ADDR_VAR 0 7
64066: PUSH
64067: LD_VAR 0 2
64071: PPUSH
64072: CALL_OW 250
64076: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
64077: LD_ADDR_VAR 0 8
64081: PUSH
64082: LD_VAR 0 2
64086: PPUSH
64087: CALL_OW 251
64091: ST_TO_ADDR
// if not x or not y then
64092: LD_VAR 0 7
64096: NOT
64097: PUSH
64098: LD_VAR 0 8
64102: NOT
64103: OR
64104: IFFALSE 64108
// exit ;
64106: GO 64503
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
64108: LD_ADDR_VAR 0 6
64112: PUSH
64113: LD_VAR 0 7
64117: PPUSH
64118: LD_INT 0
64120: PPUSH
64121: LD_INT 4
64123: PPUSH
64124: CALL_OW 272
64128: PUSH
64129: LD_VAR 0 8
64133: PPUSH
64134: LD_INT 0
64136: PPUSH
64137: LD_INT 4
64139: PPUSH
64140: CALL_OW 273
64144: PUSH
64145: EMPTY
64146: LIST
64147: LIST
64148: PUSH
64149: LD_VAR 0 7
64153: PPUSH
64154: LD_INT 1
64156: PPUSH
64157: LD_INT 4
64159: PPUSH
64160: CALL_OW 272
64164: PUSH
64165: LD_VAR 0 8
64169: PPUSH
64170: LD_INT 1
64172: PPUSH
64173: LD_INT 4
64175: PPUSH
64176: CALL_OW 273
64180: PUSH
64181: EMPTY
64182: LIST
64183: LIST
64184: PUSH
64185: LD_VAR 0 7
64189: PPUSH
64190: LD_INT 2
64192: PPUSH
64193: LD_INT 4
64195: PPUSH
64196: CALL_OW 272
64200: PUSH
64201: LD_VAR 0 8
64205: PPUSH
64206: LD_INT 2
64208: PPUSH
64209: LD_INT 4
64211: PPUSH
64212: CALL_OW 273
64216: PUSH
64217: EMPTY
64218: LIST
64219: LIST
64220: PUSH
64221: LD_VAR 0 7
64225: PPUSH
64226: LD_INT 3
64228: PPUSH
64229: LD_INT 4
64231: PPUSH
64232: CALL_OW 272
64236: PUSH
64237: LD_VAR 0 8
64241: PPUSH
64242: LD_INT 3
64244: PPUSH
64245: LD_INT 4
64247: PPUSH
64248: CALL_OW 273
64252: PUSH
64253: EMPTY
64254: LIST
64255: LIST
64256: PUSH
64257: LD_VAR 0 7
64261: PPUSH
64262: LD_INT 4
64264: PPUSH
64265: LD_INT 4
64267: PPUSH
64268: CALL_OW 272
64272: PUSH
64273: LD_VAR 0 8
64277: PPUSH
64278: LD_INT 4
64280: PPUSH
64281: LD_INT 4
64283: PPUSH
64284: CALL_OW 273
64288: PUSH
64289: EMPTY
64290: LIST
64291: LIST
64292: PUSH
64293: LD_VAR 0 7
64297: PPUSH
64298: LD_INT 5
64300: PPUSH
64301: LD_INT 4
64303: PPUSH
64304: CALL_OW 272
64308: PUSH
64309: LD_VAR 0 8
64313: PPUSH
64314: LD_INT 5
64316: PPUSH
64317: LD_INT 4
64319: PPUSH
64320: CALL_OW 273
64324: PUSH
64325: EMPTY
64326: LIST
64327: LIST
64328: PUSH
64329: EMPTY
64330: LIST
64331: LIST
64332: LIST
64333: LIST
64334: LIST
64335: LIST
64336: ST_TO_ADDR
// for i = tmp downto 1 do
64337: LD_ADDR_VAR 0 4
64341: PUSH
64342: DOUBLE
64343: LD_VAR 0 6
64347: INC
64348: ST_TO_ADDR
64349: LD_INT 1
64351: PUSH
64352: FOR_DOWNTO
64353: IFFALSE 64454
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
64355: LD_VAR 0 6
64359: PUSH
64360: LD_VAR 0 4
64364: ARRAY
64365: PUSH
64366: LD_INT 1
64368: ARRAY
64369: PPUSH
64370: LD_VAR 0 6
64374: PUSH
64375: LD_VAR 0 4
64379: ARRAY
64380: PUSH
64381: LD_INT 2
64383: ARRAY
64384: PPUSH
64385: CALL_OW 488
64389: NOT
64390: PUSH
64391: LD_VAR 0 6
64395: PUSH
64396: LD_VAR 0 4
64400: ARRAY
64401: PUSH
64402: LD_INT 1
64404: ARRAY
64405: PPUSH
64406: LD_VAR 0 6
64410: PUSH
64411: LD_VAR 0 4
64415: ARRAY
64416: PUSH
64417: LD_INT 2
64419: ARRAY
64420: PPUSH
64421: CALL_OW 428
64425: PUSH
64426: LD_INT 0
64428: NONEQUAL
64429: OR
64430: IFFALSE 64452
// tmp := Delete ( tmp , i ) ;
64432: LD_ADDR_VAR 0 6
64436: PUSH
64437: LD_VAR 0 6
64441: PPUSH
64442: LD_VAR 0 4
64446: PPUSH
64447: CALL_OW 3
64451: ST_TO_ADDR
64452: GO 64352
64454: POP
64455: POP
// j := GetClosestHex ( unit , tmp ) ;
64456: LD_ADDR_VAR 0 5
64460: PUSH
64461: LD_VAR 0 1
64465: PPUSH
64466: LD_VAR 0 6
64470: PPUSH
64471: CALL 63756 0 2
64475: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
64476: LD_VAR 0 1
64480: PPUSH
64481: LD_VAR 0 5
64485: PUSH
64486: LD_INT 1
64488: ARRAY
64489: PPUSH
64490: LD_VAR 0 5
64494: PUSH
64495: LD_INT 2
64497: ARRAY
64498: PPUSH
64499: CALL_OW 111
// end ;
64503: LD_VAR 0 3
64507: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
64508: LD_INT 0
64510: PPUSH
64511: PPUSH
64512: PPUSH
// uc_side = 0 ;
64513: LD_ADDR_OWVAR 20
64517: PUSH
64518: LD_INT 0
64520: ST_TO_ADDR
// uc_nation = 0 ;
64521: LD_ADDR_OWVAR 21
64525: PUSH
64526: LD_INT 0
64528: ST_TO_ADDR
// InitHc_All ( ) ;
64529: CALL_OW 584
// InitVc ;
64533: CALL_OW 20
// if mastodonts then
64537: LD_VAR 0 6
64541: IFFALSE 64608
// for i = 1 to mastodonts do
64543: LD_ADDR_VAR 0 11
64547: PUSH
64548: DOUBLE
64549: LD_INT 1
64551: DEC
64552: ST_TO_ADDR
64553: LD_VAR 0 6
64557: PUSH
64558: FOR_TO
64559: IFFALSE 64606
// begin vc_chassis := 31 ;
64561: LD_ADDR_OWVAR 37
64565: PUSH
64566: LD_INT 31
64568: ST_TO_ADDR
// vc_control := control_rider ;
64569: LD_ADDR_OWVAR 38
64573: PUSH
64574: LD_INT 4
64576: ST_TO_ADDR
// animal := CreateVehicle ;
64577: LD_ADDR_VAR 0 12
64581: PUSH
64582: CALL_OW 45
64586: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64587: LD_VAR 0 12
64591: PPUSH
64592: LD_VAR 0 8
64596: PPUSH
64597: LD_INT 0
64599: PPUSH
64600: CALL 66743 0 3
// end ;
64604: GO 64558
64606: POP
64607: POP
// if horses then
64608: LD_VAR 0 5
64612: IFFALSE 64679
// for i = 1 to horses do
64614: LD_ADDR_VAR 0 11
64618: PUSH
64619: DOUBLE
64620: LD_INT 1
64622: DEC
64623: ST_TO_ADDR
64624: LD_VAR 0 5
64628: PUSH
64629: FOR_TO
64630: IFFALSE 64677
// begin hc_class := 21 ;
64632: LD_ADDR_OWVAR 28
64636: PUSH
64637: LD_INT 21
64639: ST_TO_ADDR
// hc_gallery :=  ;
64640: LD_ADDR_OWVAR 33
64644: PUSH
64645: LD_STRING 
64647: ST_TO_ADDR
// animal := CreateHuman ;
64648: LD_ADDR_VAR 0 12
64652: PUSH
64653: CALL_OW 44
64657: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64658: LD_VAR 0 12
64662: PPUSH
64663: LD_VAR 0 8
64667: PPUSH
64668: LD_INT 0
64670: PPUSH
64671: CALL 66743 0 3
// end ;
64675: GO 64629
64677: POP
64678: POP
// if birds then
64679: LD_VAR 0 1
64683: IFFALSE 64750
// for i = 1 to birds do
64685: LD_ADDR_VAR 0 11
64689: PUSH
64690: DOUBLE
64691: LD_INT 1
64693: DEC
64694: ST_TO_ADDR
64695: LD_VAR 0 1
64699: PUSH
64700: FOR_TO
64701: IFFALSE 64748
// begin hc_class = 18 ;
64703: LD_ADDR_OWVAR 28
64707: PUSH
64708: LD_INT 18
64710: ST_TO_ADDR
// hc_gallery =  ;
64711: LD_ADDR_OWVAR 33
64715: PUSH
64716: LD_STRING 
64718: ST_TO_ADDR
// animal := CreateHuman ;
64719: LD_ADDR_VAR 0 12
64723: PUSH
64724: CALL_OW 44
64728: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64729: LD_VAR 0 12
64733: PPUSH
64734: LD_VAR 0 8
64738: PPUSH
64739: LD_INT 0
64741: PPUSH
64742: CALL 66743 0 3
// end ;
64746: GO 64700
64748: POP
64749: POP
// if tigers then
64750: LD_VAR 0 2
64754: IFFALSE 64838
// for i = 1 to tigers do
64756: LD_ADDR_VAR 0 11
64760: PUSH
64761: DOUBLE
64762: LD_INT 1
64764: DEC
64765: ST_TO_ADDR
64766: LD_VAR 0 2
64770: PUSH
64771: FOR_TO
64772: IFFALSE 64836
// begin hc_class = class_tiger ;
64774: LD_ADDR_OWVAR 28
64778: PUSH
64779: LD_INT 14
64781: ST_TO_ADDR
// hc_gallery =  ;
64782: LD_ADDR_OWVAR 33
64786: PUSH
64787: LD_STRING 
64789: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
64790: LD_ADDR_OWVAR 35
64794: PUSH
64795: LD_INT 7
64797: NEG
64798: PPUSH
64799: LD_INT 7
64801: PPUSH
64802: CALL_OW 12
64806: ST_TO_ADDR
// animal := CreateHuman ;
64807: LD_ADDR_VAR 0 12
64811: PUSH
64812: CALL_OW 44
64816: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64817: LD_VAR 0 12
64821: PPUSH
64822: LD_VAR 0 8
64826: PPUSH
64827: LD_INT 0
64829: PPUSH
64830: CALL 66743 0 3
// end ;
64834: GO 64771
64836: POP
64837: POP
// if apemans then
64838: LD_VAR 0 3
64842: IFFALSE 64965
// for i = 1 to apemans do
64844: LD_ADDR_VAR 0 11
64848: PUSH
64849: DOUBLE
64850: LD_INT 1
64852: DEC
64853: ST_TO_ADDR
64854: LD_VAR 0 3
64858: PUSH
64859: FOR_TO
64860: IFFALSE 64963
// begin hc_class = class_apeman ;
64862: LD_ADDR_OWVAR 28
64866: PUSH
64867: LD_INT 12
64869: ST_TO_ADDR
// hc_gallery =  ;
64870: LD_ADDR_OWVAR 33
64874: PUSH
64875: LD_STRING 
64877: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
64878: LD_ADDR_OWVAR 35
64882: PUSH
64883: LD_INT 2
64885: NEG
64886: PPUSH
64887: LD_INT 2
64889: PPUSH
64890: CALL_OW 12
64894: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
64895: LD_ADDR_OWVAR 31
64899: PUSH
64900: LD_INT 1
64902: PPUSH
64903: LD_INT 3
64905: PPUSH
64906: CALL_OW 12
64910: PUSH
64911: LD_INT 1
64913: PPUSH
64914: LD_INT 3
64916: PPUSH
64917: CALL_OW 12
64921: PUSH
64922: LD_INT 0
64924: PUSH
64925: LD_INT 0
64927: PUSH
64928: EMPTY
64929: LIST
64930: LIST
64931: LIST
64932: LIST
64933: ST_TO_ADDR
// animal := CreateHuman ;
64934: LD_ADDR_VAR 0 12
64938: PUSH
64939: CALL_OW 44
64943: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64944: LD_VAR 0 12
64948: PPUSH
64949: LD_VAR 0 8
64953: PPUSH
64954: LD_INT 0
64956: PPUSH
64957: CALL 66743 0 3
// end ;
64961: GO 64859
64963: POP
64964: POP
// if enchidnas then
64965: LD_VAR 0 4
64969: IFFALSE 65036
// for i = 1 to enchidnas do
64971: LD_ADDR_VAR 0 11
64975: PUSH
64976: DOUBLE
64977: LD_INT 1
64979: DEC
64980: ST_TO_ADDR
64981: LD_VAR 0 4
64985: PUSH
64986: FOR_TO
64987: IFFALSE 65034
// begin hc_class = 13 ;
64989: LD_ADDR_OWVAR 28
64993: PUSH
64994: LD_INT 13
64996: ST_TO_ADDR
// hc_gallery =  ;
64997: LD_ADDR_OWVAR 33
65001: PUSH
65002: LD_STRING 
65004: ST_TO_ADDR
// animal := CreateHuman ;
65005: LD_ADDR_VAR 0 12
65009: PUSH
65010: CALL_OW 44
65014: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65015: LD_VAR 0 12
65019: PPUSH
65020: LD_VAR 0 8
65024: PPUSH
65025: LD_INT 0
65027: PPUSH
65028: CALL 66743 0 3
// end ;
65032: GO 64986
65034: POP
65035: POP
// if fishes then
65036: LD_VAR 0 7
65040: IFFALSE 65107
// for i = 1 to fishes do
65042: LD_ADDR_VAR 0 11
65046: PUSH
65047: DOUBLE
65048: LD_INT 1
65050: DEC
65051: ST_TO_ADDR
65052: LD_VAR 0 7
65056: PUSH
65057: FOR_TO
65058: IFFALSE 65105
// begin hc_class = 20 ;
65060: LD_ADDR_OWVAR 28
65064: PUSH
65065: LD_INT 20
65067: ST_TO_ADDR
// hc_gallery =  ;
65068: LD_ADDR_OWVAR 33
65072: PUSH
65073: LD_STRING 
65075: ST_TO_ADDR
// animal := CreateHuman ;
65076: LD_ADDR_VAR 0 12
65080: PUSH
65081: CALL_OW 44
65085: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
65086: LD_VAR 0 12
65090: PPUSH
65091: LD_VAR 0 9
65095: PPUSH
65096: LD_INT 0
65098: PPUSH
65099: CALL 66743 0 3
// end ;
65103: GO 65057
65105: POP
65106: POP
// end ;
65107: LD_VAR 0 10
65111: RET
// export function WantHeal ( sci , unit ) ; begin
65112: LD_INT 0
65114: PPUSH
// if GetTaskList ( sci ) > 0 then
65115: LD_VAR 0 1
65119: PPUSH
65120: CALL_OW 437
65124: PUSH
65125: LD_INT 0
65127: GREATER
65128: IFFALSE 65198
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
65130: LD_VAR 0 1
65134: PPUSH
65135: CALL_OW 437
65139: PUSH
65140: LD_INT 1
65142: ARRAY
65143: PUSH
65144: LD_INT 1
65146: ARRAY
65147: PUSH
65148: LD_STRING l
65150: EQUAL
65151: PUSH
65152: LD_VAR 0 1
65156: PPUSH
65157: CALL_OW 437
65161: PUSH
65162: LD_INT 1
65164: ARRAY
65165: PUSH
65166: LD_INT 4
65168: ARRAY
65169: PUSH
65170: LD_VAR 0 2
65174: EQUAL
65175: AND
65176: IFFALSE 65188
// result := true else
65178: LD_ADDR_VAR 0 3
65182: PUSH
65183: LD_INT 1
65185: ST_TO_ADDR
65186: GO 65196
// result := false ;
65188: LD_ADDR_VAR 0 3
65192: PUSH
65193: LD_INT 0
65195: ST_TO_ADDR
// end else
65196: GO 65206
// result := false ;
65198: LD_ADDR_VAR 0 3
65202: PUSH
65203: LD_INT 0
65205: ST_TO_ADDR
// end ;
65206: LD_VAR 0 3
65210: RET
// export function HealTarget ( sci ) ; begin
65211: LD_INT 0
65213: PPUSH
// if not sci then
65214: LD_VAR 0 1
65218: NOT
65219: IFFALSE 65223
// exit ;
65221: GO 65288
// result := 0 ;
65223: LD_ADDR_VAR 0 2
65227: PUSH
65228: LD_INT 0
65230: ST_TO_ADDR
// if GetTaskList ( sci ) then
65231: LD_VAR 0 1
65235: PPUSH
65236: CALL_OW 437
65240: IFFALSE 65288
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
65242: LD_VAR 0 1
65246: PPUSH
65247: CALL_OW 437
65251: PUSH
65252: LD_INT 1
65254: ARRAY
65255: PUSH
65256: LD_INT 1
65258: ARRAY
65259: PUSH
65260: LD_STRING l
65262: EQUAL
65263: IFFALSE 65288
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
65265: LD_ADDR_VAR 0 2
65269: PUSH
65270: LD_VAR 0 1
65274: PPUSH
65275: CALL_OW 437
65279: PUSH
65280: LD_INT 1
65282: ARRAY
65283: PUSH
65284: LD_INT 4
65286: ARRAY
65287: ST_TO_ADDR
// end ;
65288: LD_VAR 0 2
65292: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
65293: LD_INT 0
65295: PPUSH
65296: PPUSH
65297: PPUSH
65298: PPUSH
// if not base_units then
65299: LD_VAR 0 1
65303: NOT
65304: IFFALSE 65308
// exit ;
65306: GO 65395
// result := false ;
65308: LD_ADDR_VAR 0 2
65312: PUSH
65313: LD_INT 0
65315: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
65316: LD_ADDR_VAR 0 5
65320: PUSH
65321: LD_VAR 0 1
65325: PPUSH
65326: LD_INT 21
65328: PUSH
65329: LD_INT 3
65331: PUSH
65332: EMPTY
65333: LIST
65334: LIST
65335: PPUSH
65336: CALL_OW 72
65340: ST_TO_ADDR
// if not tmp then
65341: LD_VAR 0 5
65345: NOT
65346: IFFALSE 65350
// exit ;
65348: GO 65395
// for i in tmp do
65350: LD_ADDR_VAR 0 3
65354: PUSH
65355: LD_VAR 0 5
65359: PUSH
65360: FOR_IN
65361: IFFALSE 65393
// begin result := EnemyInRange ( i , 22 ) ;
65363: LD_ADDR_VAR 0 2
65367: PUSH
65368: LD_VAR 0 3
65372: PPUSH
65373: LD_INT 22
65375: PPUSH
65376: CALL 63631 0 2
65380: ST_TO_ADDR
// if result then
65381: LD_VAR 0 2
65385: IFFALSE 65391
// exit ;
65387: POP
65388: POP
65389: GO 65395
// end ;
65391: GO 65360
65393: POP
65394: POP
// end ;
65395: LD_VAR 0 2
65399: RET
// export function FilterByTag ( units , tag ) ; begin
65400: LD_INT 0
65402: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
65403: LD_ADDR_VAR 0 3
65407: PUSH
65408: LD_VAR 0 1
65412: PPUSH
65413: LD_INT 120
65415: PUSH
65416: LD_VAR 0 2
65420: PUSH
65421: EMPTY
65422: LIST
65423: LIST
65424: PPUSH
65425: CALL_OW 72
65429: ST_TO_ADDR
// end ;
65430: LD_VAR 0 3
65434: RET
// export function IsDriver ( un ) ; begin
65435: LD_INT 0
65437: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
65438: LD_ADDR_VAR 0 2
65442: PUSH
65443: LD_VAR 0 1
65447: PUSH
65448: LD_INT 55
65450: PUSH
65451: EMPTY
65452: LIST
65453: PPUSH
65454: CALL_OW 69
65458: IN
65459: ST_TO_ADDR
// end ;
65460: LD_VAR 0 2
65464: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
65465: LD_INT 0
65467: PPUSH
65468: PPUSH
// list := [ ] ;
65469: LD_ADDR_VAR 0 5
65473: PUSH
65474: EMPTY
65475: ST_TO_ADDR
// case d of 0 :
65476: LD_VAR 0 3
65480: PUSH
65481: LD_INT 0
65483: DOUBLE
65484: EQUAL
65485: IFTRUE 65489
65487: GO 65622
65489: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
65490: LD_ADDR_VAR 0 5
65494: PUSH
65495: LD_VAR 0 1
65499: PUSH
65500: LD_INT 4
65502: MINUS
65503: PUSH
65504: LD_VAR 0 2
65508: PUSH
65509: LD_INT 4
65511: MINUS
65512: PUSH
65513: LD_INT 2
65515: PUSH
65516: EMPTY
65517: LIST
65518: LIST
65519: LIST
65520: PUSH
65521: LD_VAR 0 1
65525: PUSH
65526: LD_INT 3
65528: MINUS
65529: PUSH
65530: LD_VAR 0 2
65534: PUSH
65535: LD_INT 1
65537: PUSH
65538: EMPTY
65539: LIST
65540: LIST
65541: LIST
65542: PUSH
65543: LD_VAR 0 1
65547: PUSH
65548: LD_INT 4
65550: PLUS
65551: PUSH
65552: LD_VAR 0 2
65556: PUSH
65557: LD_INT 4
65559: PUSH
65560: EMPTY
65561: LIST
65562: LIST
65563: LIST
65564: PUSH
65565: LD_VAR 0 1
65569: PUSH
65570: LD_INT 3
65572: PLUS
65573: PUSH
65574: LD_VAR 0 2
65578: PUSH
65579: LD_INT 3
65581: PLUS
65582: PUSH
65583: LD_INT 5
65585: PUSH
65586: EMPTY
65587: LIST
65588: LIST
65589: LIST
65590: PUSH
65591: LD_VAR 0 1
65595: PUSH
65596: LD_VAR 0 2
65600: PUSH
65601: LD_INT 4
65603: PLUS
65604: PUSH
65605: LD_INT 0
65607: PUSH
65608: EMPTY
65609: LIST
65610: LIST
65611: LIST
65612: PUSH
65613: EMPTY
65614: LIST
65615: LIST
65616: LIST
65617: LIST
65618: LIST
65619: ST_TO_ADDR
// end ; 1 :
65620: GO 66320
65622: LD_INT 1
65624: DOUBLE
65625: EQUAL
65626: IFTRUE 65630
65628: GO 65763
65630: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
65631: LD_ADDR_VAR 0 5
65635: PUSH
65636: LD_VAR 0 1
65640: PUSH
65641: LD_VAR 0 2
65645: PUSH
65646: LD_INT 4
65648: MINUS
65649: PUSH
65650: LD_INT 3
65652: PUSH
65653: EMPTY
65654: LIST
65655: LIST
65656: LIST
65657: PUSH
65658: LD_VAR 0 1
65662: PUSH
65663: LD_INT 3
65665: MINUS
65666: PUSH
65667: LD_VAR 0 2
65671: PUSH
65672: LD_INT 3
65674: MINUS
65675: PUSH
65676: LD_INT 2
65678: PUSH
65679: EMPTY
65680: LIST
65681: LIST
65682: LIST
65683: PUSH
65684: LD_VAR 0 1
65688: PUSH
65689: LD_INT 4
65691: MINUS
65692: PUSH
65693: LD_VAR 0 2
65697: PUSH
65698: LD_INT 1
65700: PUSH
65701: EMPTY
65702: LIST
65703: LIST
65704: LIST
65705: PUSH
65706: LD_VAR 0 1
65710: PUSH
65711: LD_VAR 0 2
65715: PUSH
65716: LD_INT 3
65718: PLUS
65719: PUSH
65720: LD_INT 0
65722: PUSH
65723: EMPTY
65724: LIST
65725: LIST
65726: LIST
65727: PUSH
65728: LD_VAR 0 1
65732: PUSH
65733: LD_INT 4
65735: PLUS
65736: PUSH
65737: LD_VAR 0 2
65741: PUSH
65742: LD_INT 4
65744: PLUS
65745: PUSH
65746: LD_INT 5
65748: PUSH
65749: EMPTY
65750: LIST
65751: LIST
65752: LIST
65753: PUSH
65754: EMPTY
65755: LIST
65756: LIST
65757: LIST
65758: LIST
65759: LIST
65760: ST_TO_ADDR
// end ; 2 :
65761: GO 66320
65763: LD_INT 2
65765: DOUBLE
65766: EQUAL
65767: IFTRUE 65771
65769: GO 65900
65771: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
65772: LD_ADDR_VAR 0 5
65776: PUSH
65777: LD_VAR 0 1
65781: PUSH
65782: LD_VAR 0 2
65786: PUSH
65787: LD_INT 3
65789: MINUS
65790: PUSH
65791: LD_INT 3
65793: PUSH
65794: EMPTY
65795: LIST
65796: LIST
65797: LIST
65798: PUSH
65799: LD_VAR 0 1
65803: PUSH
65804: LD_INT 4
65806: PLUS
65807: PUSH
65808: LD_VAR 0 2
65812: PUSH
65813: LD_INT 4
65815: PUSH
65816: EMPTY
65817: LIST
65818: LIST
65819: LIST
65820: PUSH
65821: LD_VAR 0 1
65825: PUSH
65826: LD_VAR 0 2
65830: PUSH
65831: LD_INT 4
65833: PLUS
65834: PUSH
65835: LD_INT 0
65837: PUSH
65838: EMPTY
65839: LIST
65840: LIST
65841: LIST
65842: PUSH
65843: LD_VAR 0 1
65847: PUSH
65848: LD_INT 3
65850: MINUS
65851: PUSH
65852: LD_VAR 0 2
65856: PUSH
65857: LD_INT 1
65859: PUSH
65860: EMPTY
65861: LIST
65862: LIST
65863: LIST
65864: PUSH
65865: LD_VAR 0 1
65869: PUSH
65870: LD_INT 4
65872: MINUS
65873: PUSH
65874: LD_VAR 0 2
65878: PUSH
65879: LD_INT 4
65881: MINUS
65882: PUSH
65883: LD_INT 2
65885: PUSH
65886: EMPTY
65887: LIST
65888: LIST
65889: LIST
65890: PUSH
65891: EMPTY
65892: LIST
65893: LIST
65894: LIST
65895: LIST
65896: LIST
65897: ST_TO_ADDR
// end ; 3 :
65898: GO 66320
65900: LD_INT 3
65902: DOUBLE
65903: EQUAL
65904: IFTRUE 65908
65906: GO 66041
65908: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
65909: LD_ADDR_VAR 0 5
65913: PUSH
65914: LD_VAR 0 1
65918: PUSH
65919: LD_INT 3
65921: PLUS
65922: PUSH
65923: LD_VAR 0 2
65927: PUSH
65928: LD_INT 4
65930: PUSH
65931: EMPTY
65932: LIST
65933: LIST
65934: LIST
65935: PUSH
65936: LD_VAR 0 1
65940: PUSH
65941: LD_INT 4
65943: PLUS
65944: PUSH
65945: LD_VAR 0 2
65949: PUSH
65950: LD_INT 4
65952: PLUS
65953: PUSH
65954: LD_INT 5
65956: PUSH
65957: EMPTY
65958: LIST
65959: LIST
65960: LIST
65961: PUSH
65962: LD_VAR 0 1
65966: PUSH
65967: LD_INT 4
65969: MINUS
65970: PUSH
65971: LD_VAR 0 2
65975: PUSH
65976: LD_INT 1
65978: PUSH
65979: EMPTY
65980: LIST
65981: LIST
65982: LIST
65983: PUSH
65984: LD_VAR 0 1
65988: PUSH
65989: LD_VAR 0 2
65993: PUSH
65994: LD_INT 4
65996: MINUS
65997: PUSH
65998: LD_INT 3
66000: PUSH
66001: EMPTY
66002: LIST
66003: LIST
66004: LIST
66005: PUSH
66006: LD_VAR 0 1
66010: PUSH
66011: LD_INT 3
66013: MINUS
66014: PUSH
66015: LD_VAR 0 2
66019: PUSH
66020: LD_INT 3
66022: MINUS
66023: PUSH
66024: LD_INT 2
66026: PUSH
66027: EMPTY
66028: LIST
66029: LIST
66030: LIST
66031: PUSH
66032: EMPTY
66033: LIST
66034: LIST
66035: LIST
66036: LIST
66037: LIST
66038: ST_TO_ADDR
// end ; 4 :
66039: GO 66320
66041: LD_INT 4
66043: DOUBLE
66044: EQUAL
66045: IFTRUE 66049
66047: GO 66182
66049: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
66050: LD_ADDR_VAR 0 5
66054: PUSH
66055: LD_VAR 0 1
66059: PUSH
66060: LD_VAR 0 2
66064: PUSH
66065: LD_INT 4
66067: PLUS
66068: PUSH
66069: LD_INT 0
66071: PUSH
66072: EMPTY
66073: LIST
66074: LIST
66075: LIST
66076: PUSH
66077: LD_VAR 0 1
66081: PUSH
66082: LD_INT 3
66084: PLUS
66085: PUSH
66086: LD_VAR 0 2
66090: PUSH
66091: LD_INT 3
66093: PLUS
66094: PUSH
66095: LD_INT 5
66097: PUSH
66098: EMPTY
66099: LIST
66100: LIST
66101: LIST
66102: PUSH
66103: LD_VAR 0 1
66107: PUSH
66108: LD_INT 4
66110: PLUS
66111: PUSH
66112: LD_VAR 0 2
66116: PUSH
66117: LD_INT 4
66119: PUSH
66120: EMPTY
66121: LIST
66122: LIST
66123: LIST
66124: PUSH
66125: LD_VAR 0 1
66129: PUSH
66130: LD_VAR 0 2
66134: PUSH
66135: LD_INT 3
66137: MINUS
66138: PUSH
66139: LD_INT 3
66141: PUSH
66142: EMPTY
66143: LIST
66144: LIST
66145: LIST
66146: PUSH
66147: LD_VAR 0 1
66151: PUSH
66152: LD_INT 4
66154: MINUS
66155: PUSH
66156: LD_VAR 0 2
66160: PUSH
66161: LD_INT 4
66163: MINUS
66164: PUSH
66165: LD_INT 2
66167: PUSH
66168: EMPTY
66169: LIST
66170: LIST
66171: LIST
66172: PUSH
66173: EMPTY
66174: LIST
66175: LIST
66176: LIST
66177: LIST
66178: LIST
66179: ST_TO_ADDR
// end ; 5 :
66180: GO 66320
66182: LD_INT 5
66184: DOUBLE
66185: EQUAL
66186: IFTRUE 66190
66188: GO 66319
66190: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
66191: LD_ADDR_VAR 0 5
66195: PUSH
66196: LD_VAR 0 1
66200: PUSH
66201: LD_INT 4
66203: MINUS
66204: PUSH
66205: LD_VAR 0 2
66209: PUSH
66210: LD_INT 1
66212: PUSH
66213: EMPTY
66214: LIST
66215: LIST
66216: LIST
66217: PUSH
66218: LD_VAR 0 1
66222: PUSH
66223: LD_VAR 0 2
66227: PUSH
66228: LD_INT 4
66230: MINUS
66231: PUSH
66232: LD_INT 3
66234: PUSH
66235: EMPTY
66236: LIST
66237: LIST
66238: LIST
66239: PUSH
66240: LD_VAR 0 1
66244: PUSH
66245: LD_INT 4
66247: PLUS
66248: PUSH
66249: LD_VAR 0 2
66253: PUSH
66254: LD_INT 4
66256: PLUS
66257: PUSH
66258: LD_INT 5
66260: PUSH
66261: EMPTY
66262: LIST
66263: LIST
66264: LIST
66265: PUSH
66266: LD_VAR 0 1
66270: PUSH
66271: LD_INT 3
66273: PLUS
66274: PUSH
66275: LD_VAR 0 2
66279: PUSH
66280: LD_INT 4
66282: PUSH
66283: EMPTY
66284: LIST
66285: LIST
66286: LIST
66287: PUSH
66288: LD_VAR 0 1
66292: PUSH
66293: LD_VAR 0 2
66297: PUSH
66298: LD_INT 3
66300: PLUS
66301: PUSH
66302: LD_INT 0
66304: PUSH
66305: EMPTY
66306: LIST
66307: LIST
66308: LIST
66309: PUSH
66310: EMPTY
66311: LIST
66312: LIST
66313: LIST
66314: LIST
66315: LIST
66316: ST_TO_ADDR
// end ; end ;
66317: GO 66320
66319: POP
// result := list ;
66320: LD_ADDR_VAR 0 4
66324: PUSH
66325: LD_VAR 0 5
66329: ST_TO_ADDR
// end ;
66330: LD_VAR 0 4
66334: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
66335: LD_INT 0
66337: PPUSH
66338: PPUSH
66339: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
66340: LD_VAR 0 1
66344: NOT
66345: PUSH
66346: LD_VAR 0 2
66350: PUSH
66351: LD_INT 1
66353: PUSH
66354: LD_INT 2
66356: PUSH
66357: LD_INT 3
66359: PUSH
66360: LD_INT 4
66362: PUSH
66363: EMPTY
66364: LIST
66365: LIST
66366: LIST
66367: LIST
66368: IN
66369: NOT
66370: OR
66371: IFFALSE 66375
// exit ;
66373: GO 66467
// tmp := [ ] ;
66375: LD_ADDR_VAR 0 5
66379: PUSH
66380: EMPTY
66381: ST_TO_ADDR
// for i in units do
66382: LD_ADDR_VAR 0 4
66386: PUSH
66387: LD_VAR 0 1
66391: PUSH
66392: FOR_IN
66393: IFFALSE 66436
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
66395: LD_ADDR_VAR 0 5
66399: PUSH
66400: LD_VAR 0 5
66404: PPUSH
66405: LD_VAR 0 5
66409: PUSH
66410: LD_INT 1
66412: PLUS
66413: PPUSH
66414: LD_VAR 0 4
66418: PPUSH
66419: LD_VAR 0 2
66423: PPUSH
66424: CALL_OW 259
66428: PPUSH
66429: CALL_OW 2
66433: ST_TO_ADDR
66434: GO 66392
66436: POP
66437: POP
// if not tmp then
66438: LD_VAR 0 5
66442: NOT
66443: IFFALSE 66447
// exit ;
66445: GO 66467
// result := SortListByListDesc ( units , tmp ) ;
66447: LD_ADDR_VAR 0 3
66451: PUSH
66452: LD_VAR 0 1
66456: PPUSH
66457: LD_VAR 0 5
66461: PPUSH
66462: CALL_OW 77
66466: ST_TO_ADDR
// end ;
66467: LD_VAR 0 3
66471: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
66472: LD_INT 0
66474: PPUSH
66475: PPUSH
66476: PPUSH
// result := false ;
66477: LD_ADDR_VAR 0 3
66481: PUSH
66482: LD_INT 0
66484: ST_TO_ADDR
// x := GetX ( building ) ;
66485: LD_ADDR_VAR 0 4
66489: PUSH
66490: LD_VAR 0 2
66494: PPUSH
66495: CALL_OW 250
66499: ST_TO_ADDR
// y := GetY ( building ) ;
66500: LD_ADDR_VAR 0 5
66504: PUSH
66505: LD_VAR 0 2
66509: PPUSH
66510: CALL_OW 251
66514: ST_TO_ADDR
// if not building or not x or not y then
66515: LD_VAR 0 2
66519: NOT
66520: PUSH
66521: LD_VAR 0 4
66525: NOT
66526: OR
66527: PUSH
66528: LD_VAR 0 5
66532: NOT
66533: OR
66534: IFFALSE 66538
// exit ;
66536: GO 66630
// if GetTaskList ( unit ) then
66538: LD_VAR 0 1
66542: PPUSH
66543: CALL_OW 437
66547: IFFALSE 66630
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
66549: LD_STRING e
66551: PUSH
66552: LD_VAR 0 1
66556: PPUSH
66557: CALL_OW 437
66561: PUSH
66562: LD_INT 1
66564: ARRAY
66565: PUSH
66566: LD_INT 1
66568: ARRAY
66569: EQUAL
66570: PUSH
66571: LD_VAR 0 4
66575: PUSH
66576: LD_VAR 0 1
66580: PPUSH
66581: CALL_OW 437
66585: PUSH
66586: LD_INT 1
66588: ARRAY
66589: PUSH
66590: LD_INT 2
66592: ARRAY
66593: EQUAL
66594: AND
66595: PUSH
66596: LD_VAR 0 5
66600: PUSH
66601: LD_VAR 0 1
66605: PPUSH
66606: CALL_OW 437
66610: PUSH
66611: LD_INT 1
66613: ARRAY
66614: PUSH
66615: LD_INT 3
66617: ARRAY
66618: EQUAL
66619: AND
66620: IFFALSE 66630
// result := true end ;
66622: LD_ADDR_VAR 0 3
66626: PUSH
66627: LD_INT 1
66629: ST_TO_ADDR
// end ;
66630: LD_VAR 0 3
66634: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
66635: LD_INT 0
66637: PPUSH
// result := false ;
66638: LD_ADDR_VAR 0 4
66642: PUSH
66643: LD_INT 0
66645: ST_TO_ADDR
// if GetTaskList ( unit ) then
66646: LD_VAR 0 1
66650: PPUSH
66651: CALL_OW 437
66655: IFFALSE 66738
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
66657: LD_STRING M
66659: PUSH
66660: LD_VAR 0 1
66664: PPUSH
66665: CALL_OW 437
66669: PUSH
66670: LD_INT 1
66672: ARRAY
66673: PUSH
66674: LD_INT 1
66676: ARRAY
66677: EQUAL
66678: PUSH
66679: LD_VAR 0 2
66683: PUSH
66684: LD_VAR 0 1
66688: PPUSH
66689: CALL_OW 437
66693: PUSH
66694: LD_INT 1
66696: ARRAY
66697: PUSH
66698: LD_INT 2
66700: ARRAY
66701: EQUAL
66702: AND
66703: PUSH
66704: LD_VAR 0 3
66708: PUSH
66709: LD_VAR 0 1
66713: PPUSH
66714: CALL_OW 437
66718: PUSH
66719: LD_INT 1
66721: ARRAY
66722: PUSH
66723: LD_INT 3
66725: ARRAY
66726: EQUAL
66727: AND
66728: IFFALSE 66738
// result := true ;
66730: LD_ADDR_VAR 0 4
66734: PUSH
66735: LD_INT 1
66737: ST_TO_ADDR
// end ; end ;
66738: LD_VAR 0 4
66742: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
66743: LD_INT 0
66745: PPUSH
66746: PPUSH
66747: PPUSH
66748: PPUSH
// if not unit or not area then
66749: LD_VAR 0 1
66753: NOT
66754: PUSH
66755: LD_VAR 0 2
66759: NOT
66760: OR
66761: IFFALSE 66765
// exit ;
66763: GO 66929
// tmp := AreaToList ( area , i ) ;
66765: LD_ADDR_VAR 0 6
66769: PUSH
66770: LD_VAR 0 2
66774: PPUSH
66775: LD_VAR 0 5
66779: PPUSH
66780: CALL_OW 517
66784: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
66785: LD_ADDR_VAR 0 5
66789: PUSH
66790: DOUBLE
66791: LD_INT 1
66793: DEC
66794: ST_TO_ADDR
66795: LD_VAR 0 6
66799: PUSH
66800: LD_INT 1
66802: ARRAY
66803: PUSH
66804: FOR_TO
66805: IFFALSE 66927
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
66807: LD_ADDR_VAR 0 7
66811: PUSH
66812: LD_VAR 0 6
66816: PUSH
66817: LD_INT 1
66819: ARRAY
66820: PUSH
66821: LD_VAR 0 5
66825: ARRAY
66826: PUSH
66827: LD_VAR 0 6
66831: PUSH
66832: LD_INT 2
66834: ARRAY
66835: PUSH
66836: LD_VAR 0 5
66840: ARRAY
66841: PUSH
66842: EMPTY
66843: LIST
66844: LIST
66845: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
66846: LD_VAR 0 7
66850: PUSH
66851: LD_INT 1
66853: ARRAY
66854: PPUSH
66855: LD_VAR 0 7
66859: PUSH
66860: LD_INT 2
66862: ARRAY
66863: PPUSH
66864: CALL_OW 428
66868: PUSH
66869: LD_INT 0
66871: EQUAL
66872: IFFALSE 66925
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
66874: LD_VAR 0 1
66878: PPUSH
66879: LD_VAR 0 7
66883: PUSH
66884: LD_INT 1
66886: ARRAY
66887: PPUSH
66888: LD_VAR 0 7
66892: PUSH
66893: LD_INT 2
66895: ARRAY
66896: PPUSH
66897: LD_VAR 0 3
66901: PPUSH
66902: CALL_OW 48
// result := IsPlaced ( unit ) ;
66906: LD_ADDR_VAR 0 4
66910: PUSH
66911: LD_VAR 0 1
66915: PPUSH
66916: CALL_OW 305
66920: ST_TO_ADDR
// exit ;
66921: POP
66922: POP
66923: GO 66929
// end ; end ;
66925: GO 66804
66927: POP
66928: POP
// end ;
66929: LD_VAR 0 4
66933: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
66934: LD_INT 0
66936: PPUSH
66937: PPUSH
66938: PPUSH
// if not side or side > 8 then
66939: LD_VAR 0 1
66943: NOT
66944: PUSH
66945: LD_VAR 0 1
66949: PUSH
66950: LD_INT 8
66952: GREATER
66953: OR
66954: IFFALSE 66958
// exit ;
66956: GO 67145
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
66958: LD_ADDR_VAR 0 4
66962: PUSH
66963: LD_INT 22
66965: PUSH
66966: LD_VAR 0 1
66970: PUSH
66971: EMPTY
66972: LIST
66973: LIST
66974: PUSH
66975: LD_INT 21
66977: PUSH
66978: LD_INT 3
66980: PUSH
66981: EMPTY
66982: LIST
66983: LIST
66984: PUSH
66985: EMPTY
66986: LIST
66987: LIST
66988: PPUSH
66989: CALL_OW 69
66993: ST_TO_ADDR
// if not tmp then
66994: LD_VAR 0 4
66998: NOT
66999: IFFALSE 67003
// exit ;
67001: GO 67145
// enable_addtolog := true ;
67003: LD_ADDR_OWVAR 81
67007: PUSH
67008: LD_INT 1
67010: ST_TO_ADDR
// AddToLog ( [ ) ;
67011: LD_STRING [
67013: PPUSH
67014: CALL_OW 561
// for i in tmp do
67018: LD_ADDR_VAR 0 3
67022: PUSH
67023: LD_VAR 0 4
67027: PUSH
67028: FOR_IN
67029: IFFALSE 67136
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
67031: LD_STRING [
67033: PUSH
67034: LD_VAR 0 3
67038: PPUSH
67039: CALL_OW 266
67043: STR
67044: PUSH
67045: LD_STRING , 
67047: STR
67048: PUSH
67049: LD_VAR 0 3
67053: PPUSH
67054: CALL_OW 250
67058: STR
67059: PUSH
67060: LD_STRING , 
67062: STR
67063: PUSH
67064: LD_VAR 0 3
67068: PPUSH
67069: CALL_OW 251
67073: STR
67074: PUSH
67075: LD_STRING , 
67077: STR
67078: PUSH
67079: LD_VAR 0 3
67083: PPUSH
67084: CALL_OW 254
67088: STR
67089: PUSH
67090: LD_STRING , 
67092: STR
67093: PUSH
67094: LD_VAR 0 3
67098: PPUSH
67099: LD_INT 1
67101: PPUSH
67102: CALL_OW 268
67106: STR
67107: PUSH
67108: LD_STRING , 
67110: STR
67111: PUSH
67112: LD_VAR 0 3
67116: PPUSH
67117: LD_INT 2
67119: PPUSH
67120: CALL_OW 268
67124: STR
67125: PUSH
67126: LD_STRING ],
67128: STR
67129: PPUSH
67130: CALL_OW 561
// end ;
67134: GO 67028
67136: POP
67137: POP
// AddToLog ( ]; ) ;
67138: LD_STRING ];
67140: PPUSH
67141: CALL_OW 561
// end ;
67145: LD_VAR 0 2
67149: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
67150: LD_INT 0
67152: PPUSH
67153: PPUSH
67154: PPUSH
67155: PPUSH
67156: PPUSH
// if not area or not rate or not max then
67157: LD_VAR 0 1
67161: NOT
67162: PUSH
67163: LD_VAR 0 2
67167: NOT
67168: OR
67169: PUSH
67170: LD_VAR 0 4
67174: NOT
67175: OR
67176: IFFALSE 67180
// exit ;
67178: GO 67369
// while 1 do
67180: LD_INT 1
67182: IFFALSE 67369
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
67184: LD_ADDR_VAR 0 9
67188: PUSH
67189: LD_VAR 0 1
67193: PPUSH
67194: LD_INT 1
67196: PPUSH
67197: CALL_OW 287
67201: PUSH
67202: LD_INT 10
67204: MUL
67205: ST_TO_ADDR
// r := rate / 10 ;
67206: LD_ADDR_VAR 0 7
67210: PUSH
67211: LD_VAR 0 2
67215: PUSH
67216: LD_INT 10
67218: DIVREAL
67219: ST_TO_ADDR
// time := 1 1$00 ;
67220: LD_ADDR_VAR 0 8
67224: PUSH
67225: LD_INT 2100
67227: ST_TO_ADDR
// if amount < min then
67228: LD_VAR 0 9
67232: PUSH
67233: LD_VAR 0 3
67237: LESS
67238: IFFALSE 67256
// r := r * 2 else
67240: LD_ADDR_VAR 0 7
67244: PUSH
67245: LD_VAR 0 7
67249: PUSH
67250: LD_INT 2
67252: MUL
67253: ST_TO_ADDR
67254: GO 67282
// if amount > max then
67256: LD_VAR 0 9
67260: PUSH
67261: LD_VAR 0 4
67265: GREATER
67266: IFFALSE 67282
// r := r / 2 ;
67268: LD_ADDR_VAR 0 7
67272: PUSH
67273: LD_VAR 0 7
67277: PUSH
67278: LD_INT 2
67280: DIVREAL
67281: ST_TO_ADDR
// time := time / r ;
67282: LD_ADDR_VAR 0 8
67286: PUSH
67287: LD_VAR 0 8
67291: PUSH
67292: LD_VAR 0 7
67296: DIVREAL
67297: ST_TO_ADDR
// if time < 0 then
67298: LD_VAR 0 8
67302: PUSH
67303: LD_INT 0
67305: LESS
67306: IFFALSE 67323
// time := time * - 1 ;
67308: LD_ADDR_VAR 0 8
67312: PUSH
67313: LD_VAR 0 8
67317: PUSH
67318: LD_INT 1
67320: NEG
67321: MUL
67322: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
67323: LD_VAR 0 8
67327: PUSH
67328: LD_INT 35
67330: PPUSH
67331: LD_INT 875
67333: PPUSH
67334: CALL_OW 12
67338: PLUS
67339: PPUSH
67340: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
67344: LD_INT 1
67346: PPUSH
67347: LD_INT 5
67349: PPUSH
67350: CALL_OW 12
67354: PPUSH
67355: LD_VAR 0 1
67359: PPUSH
67360: LD_INT 1
67362: PPUSH
67363: CALL_OW 55
// end ;
67367: GO 67180
// end ;
67369: LD_VAR 0 5
67373: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
67374: LD_INT 0
67376: PPUSH
67377: PPUSH
67378: PPUSH
67379: PPUSH
67380: PPUSH
67381: PPUSH
67382: PPUSH
67383: PPUSH
// if not turrets or not factories then
67384: LD_VAR 0 1
67388: NOT
67389: PUSH
67390: LD_VAR 0 2
67394: NOT
67395: OR
67396: IFFALSE 67400
// exit ;
67398: GO 67707
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
67400: LD_ADDR_VAR 0 10
67404: PUSH
67405: LD_INT 5
67407: PUSH
67408: LD_INT 6
67410: PUSH
67411: EMPTY
67412: LIST
67413: LIST
67414: PUSH
67415: LD_INT 2
67417: PUSH
67418: LD_INT 4
67420: PUSH
67421: EMPTY
67422: LIST
67423: LIST
67424: PUSH
67425: LD_INT 3
67427: PUSH
67428: LD_INT 5
67430: PUSH
67431: EMPTY
67432: LIST
67433: LIST
67434: PUSH
67435: EMPTY
67436: LIST
67437: LIST
67438: LIST
67439: PUSH
67440: LD_INT 24
67442: PUSH
67443: LD_INT 25
67445: PUSH
67446: EMPTY
67447: LIST
67448: LIST
67449: PUSH
67450: LD_INT 23
67452: PUSH
67453: LD_INT 27
67455: PUSH
67456: EMPTY
67457: LIST
67458: LIST
67459: PUSH
67460: EMPTY
67461: LIST
67462: LIST
67463: PUSH
67464: LD_INT 42
67466: PUSH
67467: LD_INT 43
67469: PUSH
67470: EMPTY
67471: LIST
67472: LIST
67473: PUSH
67474: LD_INT 44
67476: PUSH
67477: LD_INT 46
67479: PUSH
67480: EMPTY
67481: LIST
67482: LIST
67483: PUSH
67484: LD_INT 45
67486: PUSH
67487: LD_INT 47
67489: PUSH
67490: EMPTY
67491: LIST
67492: LIST
67493: PUSH
67494: EMPTY
67495: LIST
67496: LIST
67497: LIST
67498: PUSH
67499: EMPTY
67500: LIST
67501: LIST
67502: LIST
67503: ST_TO_ADDR
// result := [ ] ;
67504: LD_ADDR_VAR 0 3
67508: PUSH
67509: EMPTY
67510: ST_TO_ADDR
// for i in turrets do
67511: LD_ADDR_VAR 0 4
67515: PUSH
67516: LD_VAR 0 1
67520: PUSH
67521: FOR_IN
67522: IFFALSE 67705
// begin nat := GetNation ( i ) ;
67524: LD_ADDR_VAR 0 7
67528: PUSH
67529: LD_VAR 0 4
67533: PPUSH
67534: CALL_OW 248
67538: ST_TO_ADDR
// weapon := 0 ;
67539: LD_ADDR_VAR 0 8
67543: PUSH
67544: LD_INT 0
67546: ST_TO_ADDR
// if not nat then
67547: LD_VAR 0 7
67551: NOT
67552: IFFALSE 67556
// continue ;
67554: GO 67521
// for j in list [ nat ] do
67556: LD_ADDR_VAR 0 5
67560: PUSH
67561: LD_VAR 0 10
67565: PUSH
67566: LD_VAR 0 7
67570: ARRAY
67571: PUSH
67572: FOR_IN
67573: IFFALSE 67614
// if GetBWeapon ( i ) = j [ 1 ] then
67575: LD_VAR 0 4
67579: PPUSH
67580: CALL_OW 269
67584: PUSH
67585: LD_VAR 0 5
67589: PUSH
67590: LD_INT 1
67592: ARRAY
67593: EQUAL
67594: IFFALSE 67612
// begin weapon := j [ 2 ] ;
67596: LD_ADDR_VAR 0 8
67600: PUSH
67601: LD_VAR 0 5
67605: PUSH
67606: LD_INT 2
67608: ARRAY
67609: ST_TO_ADDR
// break ;
67610: GO 67614
// end ;
67612: GO 67572
67614: POP
67615: POP
// if not weapon then
67616: LD_VAR 0 8
67620: NOT
67621: IFFALSE 67625
// continue ;
67623: GO 67521
// for k in factories do
67625: LD_ADDR_VAR 0 6
67629: PUSH
67630: LD_VAR 0 2
67634: PUSH
67635: FOR_IN
67636: IFFALSE 67701
// begin weapons := AvailableWeaponList ( k ) ;
67638: LD_ADDR_VAR 0 9
67642: PUSH
67643: LD_VAR 0 6
67647: PPUSH
67648: CALL_OW 478
67652: ST_TO_ADDR
// if not weapons then
67653: LD_VAR 0 9
67657: NOT
67658: IFFALSE 67662
// continue ;
67660: GO 67635
// if weapon in weapons then
67662: LD_VAR 0 8
67666: PUSH
67667: LD_VAR 0 9
67671: IN
67672: IFFALSE 67699
// begin result := [ i , weapon ] ;
67674: LD_ADDR_VAR 0 3
67678: PUSH
67679: LD_VAR 0 4
67683: PUSH
67684: LD_VAR 0 8
67688: PUSH
67689: EMPTY
67690: LIST
67691: LIST
67692: ST_TO_ADDR
// exit ;
67693: POP
67694: POP
67695: POP
67696: POP
67697: GO 67707
// end ; end ;
67699: GO 67635
67701: POP
67702: POP
// end ;
67703: GO 67521
67705: POP
67706: POP
// end ;
67707: LD_VAR 0 3
67711: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
67712: LD_INT 0
67714: PPUSH
// if not side or side > 8 then
67715: LD_VAR 0 3
67719: NOT
67720: PUSH
67721: LD_VAR 0 3
67725: PUSH
67726: LD_INT 8
67728: GREATER
67729: OR
67730: IFFALSE 67734
// exit ;
67732: GO 67793
// if not range then
67734: LD_VAR 0 4
67738: NOT
67739: IFFALSE 67750
// range := - 12 ;
67741: LD_ADDR_VAR 0 4
67745: PUSH
67746: LD_INT 12
67748: NEG
67749: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
67750: LD_VAR 0 1
67754: PPUSH
67755: LD_VAR 0 2
67759: PPUSH
67760: LD_VAR 0 3
67764: PPUSH
67765: LD_VAR 0 4
67769: PPUSH
67770: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
67774: LD_VAR 0 1
67778: PPUSH
67779: LD_VAR 0 2
67783: PPUSH
67784: LD_VAR 0 3
67788: PPUSH
67789: CALL_OW 331
// end ;
67793: LD_VAR 0 5
67797: RET
// export function Video ( mode ) ; begin
67798: LD_INT 0
67800: PPUSH
// ingame_video = mode ;
67801: LD_ADDR_OWVAR 52
67805: PUSH
67806: LD_VAR 0 1
67810: ST_TO_ADDR
// interface_hidden = mode ;
67811: LD_ADDR_OWVAR 54
67815: PUSH
67816: LD_VAR 0 1
67820: ST_TO_ADDR
// end ;
67821: LD_VAR 0 2
67825: RET
// export function Join ( array , element ) ; begin
67826: LD_INT 0
67828: PPUSH
// result := Replace ( array , array + 1 , element ) ;
67829: LD_ADDR_VAR 0 3
67833: PUSH
67834: LD_VAR 0 1
67838: PPUSH
67839: LD_VAR 0 1
67843: PUSH
67844: LD_INT 1
67846: PLUS
67847: PPUSH
67848: LD_VAR 0 2
67852: PPUSH
67853: CALL_OW 1
67857: ST_TO_ADDR
// end ;
67858: LD_VAR 0 3
67862: RET
// export function JoinUnion ( array , element ) ; begin
67863: LD_INT 0
67865: PPUSH
// result := array union element ;
67866: LD_ADDR_VAR 0 3
67870: PUSH
67871: LD_VAR 0 1
67875: PUSH
67876: LD_VAR 0 2
67880: UNION
67881: ST_TO_ADDR
// end ;
67882: LD_VAR 0 3
67886: RET
// export function GetBehemoths ( side ) ; begin
67887: LD_INT 0
67889: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
67890: LD_ADDR_VAR 0 2
67894: PUSH
67895: LD_INT 22
67897: PUSH
67898: LD_VAR 0 1
67902: PUSH
67903: EMPTY
67904: LIST
67905: LIST
67906: PUSH
67907: LD_INT 31
67909: PUSH
67910: LD_INT 25
67912: PUSH
67913: EMPTY
67914: LIST
67915: LIST
67916: PUSH
67917: EMPTY
67918: LIST
67919: LIST
67920: PPUSH
67921: CALL_OW 69
67925: ST_TO_ADDR
// end ;
67926: LD_VAR 0 2
67930: RET
// export function Shuffle ( array ) ; var i , index ; begin
67931: LD_INT 0
67933: PPUSH
67934: PPUSH
67935: PPUSH
// result := [ ] ;
67936: LD_ADDR_VAR 0 2
67940: PUSH
67941: EMPTY
67942: ST_TO_ADDR
// if not array then
67943: LD_VAR 0 1
67947: NOT
67948: IFFALSE 67952
// exit ;
67950: GO 68051
// Randomize ;
67952: CALL_OW 10
// for i = array downto 1 do
67956: LD_ADDR_VAR 0 3
67960: PUSH
67961: DOUBLE
67962: LD_VAR 0 1
67966: INC
67967: ST_TO_ADDR
67968: LD_INT 1
67970: PUSH
67971: FOR_DOWNTO
67972: IFFALSE 68049
// begin index := rand ( 1 , array ) ;
67974: LD_ADDR_VAR 0 4
67978: PUSH
67979: LD_INT 1
67981: PPUSH
67982: LD_VAR 0 1
67986: PPUSH
67987: CALL_OW 12
67991: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
67992: LD_ADDR_VAR 0 2
67996: PUSH
67997: LD_VAR 0 2
68001: PPUSH
68002: LD_VAR 0 2
68006: PUSH
68007: LD_INT 1
68009: PLUS
68010: PPUSH
68011: LD_VAR 0 1
68015: PUSH
68016: LD_VAR 0 4
68020: ARRAY
68021: PPUSH
68022: CALL_OW 2
68026: ST_TO_ADDR
// array := Delete ( array , index ) ;
68027: LD_ADDR_VAR 0 1
68031: PUSH
68032: LD_VAR 0 1
68036: PPUSH
68037: LD_VAR 0 4
68041: PPUSH
68042: CALL_OW 3
68046: ST_TO_ADDR
// end ;
68047: GO 67971
68049: POP
68050: POP
// end ;
68051: LD_VAR 0 2
68055: RET
// export function GetBaseMaterials ( base ) ; begin
68056: LD_INT 0
68058: PPUSH
// result := [ 0 , 0 , 0 ] ;
68059: LD_ADDR_VAR 0 2
68063: PUSH
68064: LD_INT 0
68066: PUSH
68067: LD_INT 0
68069: PUSH
68070: LD_INT 0
68072: PUSH
68073: EMPTY
68074: LIST
68075: LIST
68076: LIST
68077: ST_TO_ADDR
// if not base then
68078: LD_VAR 0 1
68082: NOT
68083: IFFALSE 68087
// exit ;
68085: GO 68136
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
68087: LD_ADDR_VAR 0 2
68091: PUSH
68092: LD_VAR 0 1
68096: PPUSH
68097: LD_INT 1
68099: PPUSH
68100: CALL_OW 275
68104: PUSH
68105: LD_VAR 0 1
68109: PPUSH
68110: LD_INT 2
68112: PPUSH
68113: CALL_OW 275
68117: PUSH
68118: LD_VAR 0 1
68122: PPUSH
68123: LD_INT 3
68125: PPUSH
68126: CALL_OW 275
68130: PUSH
68131: EMPTY
68132: LIST
68133: LIST
68134: LIST
68135: ST_TO_ADDR
// end ;
68136: LD_VAR 0 2
68140: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
68141: LD_INT 0
68143: PPUSH
68144: PPUSH
// result := array ;
68145: LD_ADDR_VAR 0 3
68149: PUSH
68150: LD_VAR 0 1
68154: ST_TO_ADDR
// if size > 0 then
68155: LD_VAR 0 2
68159: PUSH
68160: LD_INT 0
68162: GREATER
68163: IFFALSE 68209
// for i := array downto size do
68165: LD_ADDR_VAR 0 4
68169: PUSH
68170: DOUBLE
68171: LD_VAR 0 1
68175: INC
68176: ST_TO_ADDR
68177: LD_VAR 0 2
68181: PUSH
68182: FOR_DOWNTO
68183: IFFALSE 68207
// result := Delete ( result , result ) ;
68185: LD_ADDR_VAR 0 3
68189: PUSH
68190: LD_VAR 0 3
68194: PPUSH
68195: LD_VAR 0 3
68199: PPUSH
68200: CALL_OW 3
68204: ST_TO_ADDR
68205: GO 68182
68207: POP
68208: POP
// end ;
68209: LD_VAR 0 3
68213: RET
// export function ComExit ( unit ) ; var tmp ; begin
68214: LD_INT 0
68216: PPUSH
68217: PPUSH
// if not IsInUnit ( unit ) then
68218: LD_VAR 0 1
68222: PPUSH
68223: CALL_OW 310
68227: NOT
68228: IFFALSE 68232
// exit ;
68230: GO 68292
// tmp := IsInUnit ( unit ) ;
68232: LD_ADDR_VAR 0 3
68236: PUSH
68237: LD_VAR 0 1
68241: PPUSH
68242: CALL_OW 310
68246: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
68247: LD_VAR 0 3
68251: PPUSH
68252: CALL_OW 247
68256: PUSH
68257: LD_INT 2
68259: EQUAL
68260: IFFALSE 68273
// ComExitVehicle ( unit ) else
68262: LD_VAR 0 1
68266: PPUSH
68267: CALL_OW 121
68271: GO 68282
// ComExitBuilding ( unit ) ;
68273: LD_VAR 0 1
68277: PPUSH
68278: CALL_OW 122
// result := tmp ;
68282: LD_ADDR_VAR 0 2
68286: PUSH
68287: LD_VAR 0 3
68291: ST_TO_ADDR
// end ;
68292: LD_VAR 0 2
68296: RET
// export function ComExitAll ( units ) ; var i ; begin
68297: LD_INT 0
68299: PPUSH
68300: PPUSH
// if not units then
68301: LD_VAR 0 1
68305: NOT
68306: IFFALSE 68310
// exit ;
68308: GO 68336
// for i in units do
68310: LD_ADDR_VAR 0 3
68314: PUSH
68315: LD_VAR 0 1
68319: PUSH
68320: FOR_IN
68321: IFFALSE 68334
// ComExit ( i ) ;
68323: LD_VAR 0 3
68327: PPUSH
68328: CALL 68214 0 1
68332: GO 68320
68334: POP
68335: POP
// end ;
68336: LD_VAR 0 2
68340: RET
// export function ResetHc ; begin
68341: LD_INT 0
68343: PPUSH
// InitHc ;
68344: CALL_OW 19
// hc_importance := 0 ;
68348: LD_ADDR_OWVAR 32
68352: PUSH
68353: LD_INT 0
68355: ST_TO_ADDR
// end ;
68356: LD_VAR 0 1
68360: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
68361: LD_INT 0
68363: PPUSH
68364: PPUSH
68365: PPUSH
// _x := ( x1 + x2 ) div 2 ;
68366: LD_ADDR_VAR 0 6
68370: PUSH
68371: LD_VAR 0 1
68375: PUSH
68376: LD_VAR 0 3
68380: PLUS
68381: PUSH
68382: LD_INT 2
68384: DIV
68385: ST_TO_ADDR
// if _x < 0 then
68386: LD_VAR 0 6
68390: PUSH
68391: LD_INT 0
68393: LESS
68394: IFFALSE 68411
// _x := _x * - 1 ;
68396: LD_ADDR_VAR 0 6
68400: PUSH
68401: LD_VAR 0 6
68405: PUSH
68406: LD_INT 1
68408: NEG
68409: MUL
68410: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
68411: LD_ADDR_VAR 0 7
68415: PUSH
68416: LD_VAR 0 2
68420: PUSH
68421: LD_VAR 0 4
68425: PLUS
68426: PUSH
68427: LD_INT 2
68429: DIV
68430: ST_TO_ADDR
// if _y < 0 then
68431: LD_VAR 0 7
68435: PUSH
68436: LD_INT 0
68438: LESS
68439: IFFALSE 68456
// _y := _y * - 1 ;
68441: LD_ADDR_VAR 0 7
68445: PUSH
68446: LD_VAR 0 7
68450: PUSH
68451: LD_INT 1
68453: NEG
68454: MUL
68455: ST_TO_ADDR
// result := [ _x , _y ] ;
68456: LD_ADDR_VAR 0 5
68460: PUSH
68461: LD_VAR 0 6
68465: PUSH
68466: LD_VAR 0 7
68470: PUSH
68471: EMPTY
68472: LIST
68473: LIST
68474: ST_TO_ADDR
// end ;
68475: LD_VAR 0 5
68479: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
68480: LD_INT 0
68482: PPUSH
68483: PPUSH
68484: PPUSH
68485: PPUSH
// task := GetTaskList ( unit ) ;
68486: LD_ADDR_VAR 0 7
68490: PUSH
68491: LD_VAR 0 1
68495: PPUSH
68496: CALL_OW 437
68500: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
68501: LD_VAR 0 7
68505: NOT
68506: PUSH
68507: LD_VAR 0 1
68511: PPUSH
68512: LD_VAR 0 2
68516: PPUSH
68517: CALL_OW 308
68521: NOT
68522: AND
68523: IFFALSE 68527
// exit ;
68525: GO 68645
// if IsInArea ( unit , area ) then
68527: LD_VAR 0 1
68531: PPUSH
68532: LD_VAR 0 2
68536: PPUSH
68537: CALL_OW 308
68541: IFFALSE 68559
// begin ComMoveToArea ( unit , goAway ) ;
68543: LD_VAR 0 1
68547: PPUSH
68548: LD_VAR 0 3
68552: PPUSH
68553: CALL_OW 113
// exit ;
68557: GO 68645
// end ; if task [ 1 ] [ 1 ] <> M then
68559: LD_VAR 0 7
68563: PUSH
68564: LD_INT 1
68566: ARRAY
68567: PUSH
68568: LD_INT 1
68570: ARRAY
68571: PUSH
68572: LD_STRING M
68574: NONEQUAL
68575: IFFALSE 68579
// exit ;
68577: GO 68645
// x := task [ 1 ] [ 2 ] ;
68579: LD_ADDR_VAR 0 5
68583: PUSH
68584: LD_VAR 0 7
68588: PUSH
68589: LD_INT 1
68591: ARRAY
68592: PUSH
68593: LD_INT 2
68595: ARRAY
68596: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
68597: LD_ADDR_VAR 0 6
68601: PUSH
68602: LD_VAR 0 7
68606: PUSH
68607: LD_INT 1
68609: ARRAY
68610: PUSH
68611: LD_INT 3
68613: ARRAY
68614: ST_TO_ADDR
// if InArea ( x , y , area ) then
68615: LD_VAR 0 5
68619: PPUSH
68620: LD_VAR 0 6
68624: PPUSH
68625: LD_VAR 0 2
68629: PPUSH
68630: CALL_OW 309
68634: IFFALSE 68645
// ComStop ( unit ) ;
68636: LD_VAR 0 1
68640: PPUSH
68641: CALL_OW 141
// end ;
68645: LD_VAR 0 4
68649: RET
// export function Abs ( value ) ; begin
68650: LD_INT 0
68652: PPUSH
// result := value ;
68653: LD_ADDR_VAR 0 2
68657: PUSH
68658: LD_VAR 0 1
68662: ST_TO_ADDR
// if value < 0 then
68663: LD_VAR 0 1
68667: PUSH
68668: LD_INT 0
68670: LESS
68671: IFFALSE 68688
// result := value * - 1 ;
68673: LD_ADDR_VAR 0 2
68677: PUSH
68678: LD_VAR 0 1
68682: PUSH
68683: LD_INT 1
68685: NEG
68686: MUL
68687: ST_TO_ADDR
// end ;
68688: LD_VAR 0 2
68692: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
68693: LD_INT 0
68695: PPUSH
68696: PPUSH
68697: PPUSH
68698: PPUSH
68699: PPUSH
68700: PPUSH
68701: PPUSH
68702: PPUSH
// if not unit or not building then
68703: LD_VAR 0 1
68707: NOT
68708: PUSH
68709: LD_VAR 0 2
68713: NOT
68714: OR
68715: IFFALSE 68719
// exit ;
68717: GO 68945
// x := GetX ( building ) ;
68719: LD_ADDR_VAR 0 4
68723: PUSH
68724: LD_VAR 0 2
68728: PPUSH
68729: CALL_OW 250
68733: ST_TO_ADDR
// y := GetY ( building ) ;
68734: LD_ADDR_VAR 0 6
68738: PUSH
68739: LD_VAR 0 2
68743: PPUSH
68744: CALL_OW 251
68748: ST_TO_ADDR
// d := GetDir ( building ) ;
68749: LD_ADDR_VAR 0 8
68753: PUSH
68754: LD_VAR 0 2
68758: PPUSH
68759: CALL_OW 254
68763: ST_TO_ADDR
// r := 4 ;
68764: LD_ADDR_VAR 0 9
68768: PUSH
68769: LD_INT 4
68771: ST_TO_ADDR
// for i := 1 to 5 do
68772: LD_ADDR_VAR 0 10
68776: PUSH
68777: DOUBLE
68778: LD_INT 1
68780: DEC
68781: ST_TO_ADDR
68782: LD_INT 5
68784: PUSH
68785: FOR_TO
68786: IFFALSE 68943
// begin _x := ShiftX ( x , d , r + i ) ;
68788: LD_ADDR_VAR 0 5
68792: PUSH
68793: LD_VAR 0 4
68797: PPUSH
68798: LD_VAR 0 8
68802: PPUSH
68803: LD_VAR 0 9
68807: PUSH
68808: LD_VAR 0 10
68812: PLUS
68813: PPUSH
68814: CALL_OW 272
68818: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
68819: LD_ADDR_VAR 0 7
68823: PUSH
68824: LD_VAR 0 6
68828: PPUSH
68829: LD_VAR 0 8
68833: PPUSH
68834: LD_VAR 0 9
68838: PUSH
68839: LD_VAR 0 10
68843: PLUS
68844: PPUSH
68845: CALL_OW 273
68849: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
68850: LD_VAR 0 5
68854: PPUSH
68855: LD_VAR 0 7
68859: PPUSH
68860: CALL_OW 488
68864: PUSH
68865: LD_VAR 0 5
68869: PPUSH
68870: LD_VAR 0 7
68874: PPUSH
68875: CALL_OW 428
68879: PPUSH
68880: CALL_OW 247
68884: PUSH
68885: LD_INT 3
68887: PUSH
68888: LD_INT 2
68890: PUSH
68891: EMPTY
68892: LIST
68893: LIST
68894: IN
68895: NOT
68896: AND
68897: IFFALSE 68941
// begin ComMoveXY ( unit , _x , _y ) ;
68899: LD_VAR 0 1
68903: PPUSH
68904: LD_VAR 0 5
68908: PPUSH
68909: LD_VAR 0 7
68913: PPUSH
68914: CALL_OW 111
// result := [ _x , _y ] ;
68918: LD_ADDR_VAR 0 3
68922: PUSH
68923: LD_VAR 0 5
68927: PUSH
68928: LD_VAR 0 7
68932: PUSH
68933: EMPTY
68934: LIST
68935: LIST
68936: ST_TO_ADDR
// exit ;
68937: POP
68938: POP
68939: GO 68945
// end ; end ;
68941: GO 68785
68943: POP
68944: POP
// end ;
68945: LD_VAR 0 3
68949: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
68950: LD_INT 0
68952: PPUSH
68953: PPUSH
68954: PPUSH
// result := 0 ;
68955: LD_ADDR_VAR 0 3
68959: PUSH
68960: LD_INT 0
68962: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
68963: LD_VAR 0 1
68967: PUSH
68968: LD_INT 0
68970: LESS
68971: PUSH
68972: LD_VAR 0 1
68976: PUSH
68977: LD_INT 8
68979: GREATER
68980: OR
68981: PUSH
68982: LD_VAR 0 2
68986: PUSH
68987: LD_INT 0
68989: LESS
68990: OR
68991: PUSH
68992: LD_VAR 0 2
68996: PUSH
68997: LD_INT 8
68999: GREATER
69000: OR
69001: IFFALSE 69005
// exit ;
69003: GO 69080
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
69005: LD_ADDR_VAR 0 4
69009: PUSH
69010: LD_INT 22
69012: PUSH
69013: LD_VAR 0 2
69017: PUSH
69018: EMPTY
69019: LIST
69020: LIST
69021: PPUSH
69022: CALL_OW 69
69026: PUSH
69027: FOR_IN
69028: IFFALSE 69078
// begin un := UnitShoot ( i ) ;
69030: LD_ADDR_VAR 0 5
69034: PUSH
69035: LD_VAR 0 4
69039: PPUSH
69040: CALL_OW 504
69044: ST_TO_ADDR
// if GetSide ( un ) = side1 then
69045: LD_VAR 0 5
69049: PPUSH
69050: CALL_OW 255
69054: PUSH
69055: LD_VAR 0 1
69059: EQUAL
69060: IFFALSE 69076
// begin result := un ;
69062: LD_ADDR_VAR 0 3
69066: PUSH
69067: LD_VAR 0 5
69071: ST_TO_ADDR
// exit ;
69072: POP
69073: POP
69074: GO 69080
// end ; end ;
69076: GO 69027
69078: POP
69079: POP
// end ;
69080: LD_VAR 0 3
69084: RET
// export function GetCargoBay ( units ) ; begin
69085: LD_INT 0
69087: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
69088: LD_ADDR_VAR 0 2
69092: PUSH
69093: LD_VAR 0 1
69097: PPUSH
69098: LD_INT 2
69100: PUSH
69101: LD_INT 34
69103: PUSH
69104: LD_INT 12
69106: PUSH
69107: EMPTY
69108: LIST
69109: LIST
69110: PUSH
69111: LD_INT 34
69113: PUSH
69114: LD_INT 51
69116: PUSH
69117: EMPTY
69118: LIST
69119: LIST
69120: PUSH
69121: LD_INT 34
69123: PUSH
69124: LD_INT 32
69126: PUSH
69127: EMPTY
69128: LIST
69129: LIST
69130: PUSH
69131: LD_INT 34
69133: PUSH
69134: LD_EXP 22
69138: PUSH
69139: EMPTY
69140: LIST
69141: LIST
69142: PUSH
69143: EMPTY
69144: LIST
69145: LIST
69146: LIST
69147: LIST
69148: LIST
69149: PPUSH
69150: CALL_OW 72
69154: ST_TO_ADDR
// end ;
69155: LD_VAR 0 2
69159: RET
// export function Negate ( value ) ; begin
69160: LD_INT 0
69162: PPUSH
// result := not value ;
69163: LD_ADDR_VAR 0 2
69167: PUSH
69168: LD_VAR 0 1
69172: NOT
69173: ST_TO_ADDR
// end ;
69174: LD_VAR 0 2
69178: RET
// export function Inc ( value ) ; begin
69179: LD_INT 0
69181: PPUSH
// result := value + 1 ;
69182: LD_ADDR_VAR 0 2
69186: PUSH
69187: LD_VAR 0 1
69191: PUSH
69192: LD_INT 1
69194: PLUS
69195: ST_TO_ADDR
// end ;
69196: LD_VAR 0 2
69200: RET
// export function Dec ( value ) ; begin
69201: LD_INT 0
69203: PPUSH
// result := value - 1 ;
69204: LD_ADDR_VAR 0 2
69208: PUSH
69209: LD_VAR 0 1
69213: PUSH
69214: LD_INT 1
69216: MINUS
69217: ST_TO_ADDR
// end ;
69218: LD_VAR 0 2
69222: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
69223: LD_INT 0
69225: PPUSH
69226: PPUSH
69227: PPUSH
69228: PPUSH
69229: PPUSH
69230: PPUSH
69231: PPUSH
69232: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
69233: LD_VAR 0 1
69237: PPUSH
69238: LD_VAR 0 2
69242: PPUSH
69243: CALL_OW 488
69247: NOT
69248: PUSH
69249: LD_VAR 0 3
69253: PPUSH
69254: LD_VAR 0 4
69258: PPUSH
69259: CALL_OW 488
69263: NOT
69264: OR
69265: IFFALSE 69278
// begin result := - 1 ;
69267: LD_ADDR_VAR 0 5
69271: PUSH
69272: LD_INT 1
69274: NEG
69275: ST_TO_ADDR
// exit ;
69276: GO 69513
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
69278: LD_ADDR_VAR 0 12
69282: PUSH
69283: LD_VAR 0 1
69287: PPUSH
69288: LD_VAR 0 2
69292: PPUSH
69293: LD_VAR 0 3
69297: PPUSH
69298: LD_VAR 0 4
69302: PPUSH
69303: CALL 68361 0 4
69307: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
69308: LD_ADDR_VAR 0 11
69312: PUSH
69313: LD_VAR 0 1
69317: PPUSH
69318: LD_VAR 0 2
69322: PPUSH
69323: LD_VAR 0 12
69327: PUSH
69328: LD_INT 1
69330: ARRAY
69331: PPUSH
69332: LD_VAR 0 12
69336: PUSH
69337: LD_INT 2
69339: ARRAY
69340: PPUSH
69341: CALL_OW 298
69345: ST_TO_ADDR
// distance := 9999 ;
69346: LD_ADDR_VAR 0 10
69350: PUSH
69351: LD_INT 9999
69353: ST_TO_ADDR
// for i := 0 to 5 do
69354: LD_ADDR_VAR 0 6
69358: PUSH
69359: DOUBLE
69360: LD_INT 0
69362: DEC
69363: ST_TO_ADDR
69364: LD_INT 5
69366: PUSH
69367: FOR_TO
69368: IFFALSE 69511
// begin _x := ShiftX ( x1 , i , centerDist ) ;
69370: LD_ADDR_VAR 0 7
69374: PUSH
69375: LD_VAR 0 1
69379: PPUSH
69380: LD_VAR 0 6
69384: PPUSH
69385: LD_VAR 0 11
69389: PPUSH
69390: CALL_OW 272
69394: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
69395: LD_ADDR_VAR 0 8
69399: PUSH
69400: LD_VAR 0 2
69404: PPUSH
69405: LD_VAR 0 6
69409: PPUSH
69410: LD_VAR 0 11
69414: PPUSH
69415: CALL_OW 273
69419: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
69420: LD_VAR 0 7
69424: PPUSH
69425: LD_VAR 0 8
69429: PPUSH
69430: CALL_OW 488
69434: NOT
69435: IFFALSE 69439
// continue ;
69437: GO 69367
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
69439: LD_ADDR_VAR 0 9
69443: PUSH
69444: LD_VAR 0 12
69448: PUSH
69449: LD_INT 1
69451: ARRAY
69452: PPUSH
69453: LD_VAR 0 12
69457: PUSH
69458: LD_INT 2
69460: ARRAY
69461: PPUSH
69462: LD_VAR 0 7
69466: PPUSH
69467: LD_VAR 0 8
69471: PPUSH
69472: CALL_OW 298
69476: ST_TO_ADDR
// if tmp < distance then
69477: LD_VAR 0 9
69481: PUSH
69482: LD_VAR 0 10
69486: LESS
69487: IFFALSE 69509
// begin result := i ;
69489: LD_ADDR_VAR 0 5
69493: PUSH
69494: LD_VAR 0 6
69498: ST_TO_ADDR
// distance := tmp ;
69499: LD_ADDR_VAR 0 10
69503: PUSH
69504: LD_VAR 0 9
69508: ST_TO_ADDR
// end ; end ;
69509: GO 69367
69511: POP
69512: POP
// end ;
69513: LD_VAR 0 5
69517: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
69518: LD_INT 0
69520: PPUSH
69521: PPUSH
// if not driver or not IsInUnit ( driver ) then
69522: LD_VAR 0 1
69526: NOT
69527: PUSH
69528: LD_VAR 0 1
69532: PPUSH
69533: CALL_OW 310
69537: NOT
69538: OR
69539: IFFALSE 69543
// exit ;
69541: GO 69633
// vehicle := IsInUnit ( driver ) ;
69543: LD_ADDR_VAR 0 3
69547: PUSH
69548: LD_VAR 0 1
69552: PPUSH
69553: CALL_OW 310
69557: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
69558: LD_VAR 0 1
69562: PPUSH
69563: LD_STRING \
69565: PUSH
69566: LD_INT 0
69568: PUSH
69569: LD_INT 0
69571: PUSH
69572: LD_INT 0
69574: PUSH
69575: LD_INT 0
69577: PUSH
69578: LD_INT 0
69580: PUSH
69581: LD_INT 0
69583: PUSH
69584: EMPTY
69585: LIST
69586: LIST
69587: LIST
69588: LIST
69589: LIST
69590: LIST
69591: LIST
69592: PUSH
69593: LD_STRING E
69595: PUSH
69596: LD_INT 0
69598: PUSH
69599: LD_INT 0
69601: PUSH
69602: LD_VAR 0 3
69606: PUSH
69607: LD_INT 0
69609: PUSH
69610: LD_INT 0
69612: PUSH
69613: LD_INT 0
69615: PUSH
69616: EMPTY
69617: LIST
69618: LIST
69619: LIST
69620: LIST
69621: LIST
69622: LIST
69623: LIST
69624: PUSH
69625: EMPTY
69626: LIST
69627: LIST
69628: PPUSH
69629: CALL_OW 446
// end ;
69633: LD_VAR 0 2
69637: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
69638: LD_INT 0
69640: PPUSH
69641: PPUSH
// if not driver or not IsInUnit ( driver ) then
69642: LD_VAR 0 1
69646: NOT
69647: PUSH
69648: LD_VAR 0 1
69652: PPUSH
69653: CALL_OW 310
69657: NOT
69658: OR
69659: IFFALSE 69663
// exit ;
69661: GO 69753
// vehicle := IsInUnit ( driver ) ;
69663: LD_ADDR_VAR 0 3
69667: PUSH
69668: LD_VAR 0 1
69672: PPUSH
69673: CALL_OW 310
69677: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
69678: LD_VAR 0 1
69682: PPUSH
69683: LD_STRING \
69685: PUSH
69686: LD_INT 0
69688: PUSH
69689: LD_INT 0
69691: PUSH
69692: LD_INT 0
69694: PUSH
69695: LD_INT 0
69697: PUSH
69698: LD_INT 0
69700: PUSH
69701: LD_INT 0
69703: PUSH
69704: EMPTY
69705: LIST
69706: LIST
69707: LIST
69708: LIST
69709: LIST
69710: LIST
69711: LIST
69712: PUSH
69713: LD_STRING E
69715: PUSH
69716: LD_INT 0
69718: PUSH
69719: LD_INT 0
69721: PUSH
69722: LD_VAR 0 3
69726: PUSH
69727: LD_INT 0
69729: PUSH
69730: LD_INT 0
69732: PUSH
69733: LD_INT 0
69735: PUSH
69736: EMPTY
69737: LIST
69738: LIST
69739: LIST
69740: LIST
69741: LIST
69742: LIST
69743: LIST
69744: PUSH
69745: EMPTY
69746: LIST
69747: LIST
69748: PPUSH
69749: CALL_OW 447
// end ;
69753: LD_VAR 0 2
69757: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
69758: LD_INT 0
69760: PPUSH
69761: PPUSH
69762: PPUSH
// tmp := [ ] ;
69763: LD_ADDR_VAR 0 5
69767: PUSH
69768: EMPTY
69769: ST_TO_ADDR
// for i in units do
69770: LD_ADDR_VAR 0 4
69774: PUSH
69775: LD_VAR 0 1
69779: PUSH
69780: FOR_IN
69781: IFFALSE 69819
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
69783: LD_ADDR_VAR 0 5
69787: PUSH
69788: LD_VAR 0 5
69792: PPUSH
69793: LD_VAR 0 5
69797: PUSH
69798: LD_INT 1
69800: PLUS
69801: PPUSH
69802: LD_VAR 0 4
69806: PPUSH
69807: CALL_OW 256
69811: PPUSH
69812: CALL_OW 2
69816: ST_TO_ADDR
69817: GO 69780
69819: POP
69820: POP
// if not tmp then
69821: LD_VAR 0 5
69825: NOT
69826: IFFALSE 69830
// exit ;
69828: GO 69878
// if asc then
69830: LD_VAR 0 2
69834: IFFALSE 69858
// result := SortListByListAsc ( units , tmp ) else
69836: LD_ADDR_VAR 0 3
69840: PUSH
69841: LD_VAR 0 1
69845: PPUSH
69846: LD_VAR 0 5
69850: PPUSH
69851: CALL_OW 76
69855: ST_TO_ADDR
69856: GO 69878
// result := SortListByListDesc ( units , tmp ) ;
69858: LD_ADDR_VAR 0 3
69862: PUSH
69863: LD_VAR 0 1
69867: PPUSH
69868: LD_VAR 0 5
69872: PPUSH
69873: CALL_OW 77
69877: ST_TO_ADDR
// end ;
69878: LD_VAR 0 3
69882: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
69883: LD_INT 0
69885: PPUSH
69886: PPUSH
// task := GetTaskList ( mech ) ;
69887: LD_ADDR_VAR 0 4
69891: PUSH
69892: LD_VAR 0 1
69896: PPUSH
69897: CALL_OW 437
69901: ST_TO_ADDR
// if not task then
69902: LD_VAR 0 4
69906: NOT
69907: IFFALSE 69911
// exit ;
69909: GO 69953
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
69911: LD_ADDR_VAR 0 3
69915: PUSH
69916: LD_VAR 0 4
69920: PUSH
69921: LD_INT 1
69923: ARRAY
69924: PUSH
69925: LD_INT 1
69927: ARRAY
69928: PUSH
69929: LD_STRING r
69931: EQUAL
69932: PUSH
69933: LD_VAR 0 4
69937: PUSH
69938: LD_INT 1
69940: ARRAY
69941: PUSH
69942: LD_INT 4
69944: ARRAY
69945: PUSH
69946: LD_VAR 0 2
69950: EQUAL
69951: AND
69952: ST_TO_ADDR
// end ;
69953: LD_VAR 0 3
69957: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
69958: LD_INT 0
69960: PPUSH
// SetDir ( unit , d ) ;
69961: LD_VAR 0 1
69965: PPUSH
69966: LD_VAR 0 4
69970: PPUSH
69971: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
69975: LD_VAR 0 1
69979: PPUSH
69980: LD_VAR 0 2
69984: PPUSH
69985: LD_VAR 0 3
69989: PPUSH
69990: LD_VAR 0 5
69994: PPUSH
69995: CALL_OW 48
// end ;
69999: LD_VAR 0 6
70003: RET
// export function ToNaturalNumber ( number ) ; begin
70004: LD_INT 0
70006: PPUSH
// result := number div 1 ;
70007: LD_ADDR_VAR 0 2
70011: PUSH
70012: LD_VAR 0 1
70016: PUSH
70017: LD_INT 1
70019: DIV
70020: ST_TO_ADDR
// if number < 0 then
70021: LD_VAR 0 1
70025: PUSH
70026: LD_INT 0
70028: LESS
70029: IFFALSE 70039
// result := 0 ;
70031: LD_ADDR_VAR 0 2
70035: PUSH
70036: LD_INT 0
70038: ST_TO_ADDR
// end ;
70039: LD_VAR 0 2
70043: RET
// export function SortByClass ( units , class ) ; var un ; begin
70044: LD_INT 0
70046: PPUSH
70047: PPUSH
// if not units or not class then
70048: LD_VAR 0 1
70052: NOT
70053: PUSH
70054: LD_VAR 0 2
70058: NOT
70059: OR
70060: IFFALSE 70064
// exit ;
70062: GO 70159
// result := [ ] ;
70064: LD_ADDR_VAR 0 3
70068: PUSH
70069: EMPTY
70070: ST_TO_ADDR
// for un in units do
70071: LD_ADDR_VAR 0 4
70075: PUSH
70076: LD_VAR 0 1
70080: PUSH
70081: FOR_IN
70082: IFFALSE 70157
// if GetClass ( un ) = class then
70084: LD_VAR 0 4
70088: PPUSH
70089: CALL_OW 257
70093: PUSH
70094: LD_VAR 0 2
70098: EQUAL
70099: IFFALSE 70126
// result := Insert ( result , 1 , un ) else
70101: LD_ADDR_VAR 0 3
70105: PUSH
70106: LD_VAR 0 3
70110: PPUSH
70111: LD_INT 1
70113: PPUSH
70114: LD_VAR 0 4
70118: PPUSH
70119: CALL_OW 2
70123: ST_TO_ADDR
70124: GO 70155
// result := Replace ( result , result + 1 , un ) ;
70126: LD_ADDR_VAR 0 3
70130: PUSH
70131: LD_VAR 0 3
70135: PPUSH
70136: LD_VAR 0 3
70140: PUSH
70141: LD_INT 1
70143: PLUS
70144: PPUSH
70145: LD_VAR 0 4
70149: PPUSH
70150: CALL_OW 1
70154: ST_TO_ADDR
70155: GO 70081
70157: POP
70158: POP
// end ;
70159: LD_VAR 0 3
70163: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
70164: LD_INT 0
70166: PPUSH
70167: PPUSH
70168: PPUSH
70169: PPUSH
70170: PPUSH
70171: PPUSH
70172: PPUSH
// result := [ ] ;
70173: LD_ADDR_VAR 0 4
70177: PUSH
70178: EMPTY
70179: ST_TO_ADDR
// if x - r < 0 then
70180: LD_VAR 0 1
70184: PUSH
70185: LD_VAR 0 3
70189: MINUS
70190: PUSH
70191: LD_INT 0
70193: LESS
70194: IFFALSE 70206
// min_x := 0 else
70196: LD_ADDR_VAR 0 8
70200: PUSH
70201: LD_INT 0
70203: ST_TO_ADDR
70204: GO 70222
// min_x := x - r ;
70206: LD_ADDR_VAR 0 8
70210: PUSH
70211: LD_VAR 0 1
70215: PUSH
70216: LD_VAR 0 3
70220: MINUS
70221: ST_TO_ADDR
// if y - r < 0 then
70222: LD_VAR 0 2
70226: PUSH
70227: LD_VAR 0 3
70231: MINUS
70232: PUSH
70233: LD_INT 0
70235: LESS
70236: IFFALSE 70248
// min_y := 0 else
70238: LD_ADDR_VAR 0 7
70242: PUSH
70243: LD_INT 0
70245: ST_TO_ADDR
70246: GO 70264
// min_y := y - r ;
70248: LD_ADDR_VAR 0 7
70252: PUSH
70253: LD_VAR 0 2
70257: PUSH
70258: LD_VAR 0 3
70262: MINUS
70263: ST_TO_ADDR
// max_x := x + r ;
70264: LD_ADDR_VAR 0 9
70268: PUSH
70269: LD_VAR 0 1
70273: PUSH
70274: LD_VAR 0 3
70278: PLUS
70279: ST_TO_ADDR
// max_y := y + r ;
70280: LD_ADDR_VAR 0 10
70284: PUSH
70285: LD_VAR 0 2
70289: PUSH
70290: LD_VAR 0 3
70294: PLUS
70295: ST_TO_ADDR
// for _x = min_x to max_x do
70296: LD_ADDR_VAR 0 5
70300: PUSH
70301: DOUBLE
70302: LD_VAR 0 8
70306: DEC
70307: ST_TO_ADDR
70308: LD_VAR 0 9
70312: PUSH
70313: FOR_TO
70314: IFFALSE 70415
// for _y = min_y to max_y do
70316: LD_ADDR_VAR 0 6
70320: PUSH
70321: DOUBLE
70322: LD_VAR 0 7
70326: DEC
70327: ST_TO_ADDR
70328: LD_VAR 0 10
70332: PUSH
70333: FOR_TO
70334: IFFALSE 70411
// begin if not ValidHex ( _x , _y ) then
70336: LD_VAR 0 5
70340: PPUSH
70341: LD_VAR 0 6
70345: PPUSH
70346: CALL_OW 488
70350: NOT
70351: IFFALSE 70355
// continue ;
70353: GO 70333
// if GetResourceTypeXY ( _x , _y ) then
70355: LD_VAR 0 5
70359: PPUSH
70360: LD_VAR 0 6
70364: PPUSH
70365: CALL_OW 283
70369: IFFALSE 70409
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
70371: LD_ADDR_VAR 0 4
70375: PUSH
70376: LD_VAR 0 4
70380: PPUSH
70381: LD_VAR 0 4
70385: PUSH
70386: LD_INT 1
70388: PLUS
70389: PPUSH
70390: LD_VAR 0 5
70394: PUSH
70395: LD_VAR 0 6
70399: PUSH
70400: EMPTY
70401: LIST
70402: LIST
70403: PPUSH
70404: CALL_OW 1
70408: ST_TO_ADDR
// end ;
70409: GO 70333
70411: POP
70412: POP
70413: GO 70313
70415: POP
70416: POP
// end ;
70417: LD_VAR 0 4
70421: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
70422: LD_INT 0
70424: PPUSH
70425: PPUSH
70426: PPUSH
70427: PPUSH
70428: PPUSH
70429: PPUSH
70430: PPUSH
70431: PPUSH
// if not units then
70432: LD_VAR 0 1
70436: NOT
70437: IFFALSE 70441
// exit ;
70439: GO 70866
// result := UnitFilter ( units , [ f_ok ] ) ;
70441: LD_ADDR_VAR 0 3
70445: PUSH
70446: LD_VAR 0 1
70450: PPUSH
70451: LD_INT 50
70453: PUSH
70454: EMPTY
70455: LIST
70456: PPUSH
70457: CALL_OW 72
70461: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
70462: LD_ADDR_VAR 0 8
70466: PUSH
70467: LD_VAR 0 1
70471: PUSH
70472: LD_INT 1
70474: ARRAY
70475: PPUSH
70476: CALL_OW 255
70480: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
70481: LD_ADDR_VAR 0 10
70485: PUSH
70486: LD_INT 29
70488: PUSH
70489: LD_EXP 25
70493: PUSH
70494: EMPTY
70495: LIST
70496: LIST
70497: ST_TO_ADDR
// if not result then
70498: LD_VAR 0 3
70502: NOT
70503: IFFALSE 70507
// exit ;
70505: GO 70866
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
70507: LD_ADDR_VAR 0 5
70511: PUSH
70512: LD_INT 81
70514: PUSH
70515: LD_VAR 0 8
70519: PUSH
70520: EMPTY
70521: LIST
70522: LIST
70523: PPUSH
70524: CALL_OW 69
70528: ST_TO_ADDR
// for i in result do
70529: LD_ADDR_VAR 0 4
70533: PUSH
70534: LD_VAR 0 3
70538: PUSH
70539: FOR_IN
70540: IFFALSE 70864
// begin tag := GetTag ( i ) + 1 ;
70542: LD_ADDR_VAR 0 9
70546: PUSH
70547: LD_VAR 0 4
70551: PPUSH
70552: CALL_OW 110
70556: PUSH
70557: LD_INT 1
70559: PLUS
70560: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
70561: LD_ADDR_VAR 0 7
70565: PUSH
70566: LD_VAR 0 4
70570: PPUSH
70571: CALL_OW 250
70575: PPUSH
70576: LD_VAR 0 4
70580: PPUSH
70581: CALL_OW 251
70585: PPUSH
70586: LD_INT 6
70588: PPUSH
70589: CALL 70164 0 3
70593: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
70594: LD_VAR 0 7
70598: PUSH
70599: LD_VAR 0 4
70603: PPUSH
70604: CALL_OW 264
70608: PUSH
70609: LD_VAR 0 10
70613: IN
70614: NOT
70615: AND
70616: IFFALSE 70655
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
70618: LD_VAR 0 4
70622: PPUSH
70623: LD_VAR 0 7
70627: PUSH
70628: LD_INT 1
70630: ARRAY
70631: PUSH
70632: LD_INT 1
70634: ARRAY
70635: PPUSH
70636: LD_VAR 0 7
70640: PUSH
70641: LD_INT 1
70643: ARRAY
70644: PUSH
70645: LD_INT 2
70647: ARRAY
70648: PPUSH
70649: CALL_OW 116
70653: GO 70862
// if path > tag then
70655: LD_VAR 0 2
70659: PUSH
70660: LD_VAR 0 9
70664: GREATER
70665: IFFALSE 70832
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
70667: LD_ADDR_VAR 0 6
70671: PUSH
70672: LD_VAR 0 5
70676: PPUSH
70677: LD_INT 91
70679: PUSH
70680: LD_VAR 0 4
70684: PUSH
70685: LD_INT 12
70687: PUSH
70688: EMPTY
70689: LIST
70690: LIST
70691: LIST
70692: PPUSH
70693: CALL_OW 72
70697: ST_TO_ADDR
// if nearEnemy then
70698: LD_VAR 0 6
70702: IFFALSE 70730
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
70704: LD_VAR 0 4
70708: PPUSH
70709: LD_VAR 0 6
70713: PPUSH
70714: LD_VAR 0 4
70718: PPUSH
70719: CALL_OW 74
70723: PPUSH
70724: CALL_OW 115
70728: GO 70830
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
70730: LD_VAR 0 4
70734: PPUSH
70735: LD_VAR 0 2
70739: PUSH
70740: LD_VAR 0 9
70744: ARRAY
70745: PUSH
70746: LD_INT 1
70748: ARRAY
70749: PPUSH
70750: LD_VAR 0 2
70754: PUSH
70755: LD_VAR 0 9
70759: ARRAY
70760: PUSH
70761: LD_INT 2
70763: ARRAY
70764: PPUSH
70765: CALL_OW 297
70769: PUSH
70770: LD_INT 6
70772: GREATER
70773: IFFALSE 70816
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
70775: LD_VAR 0 4
70779: PPUSH
70780: LD_VAR 0 2
70784: PUSH
70785: LD_VAR 0 9
70789: ARRAY
70790: PUSH
70791: LD_INT 1
70793: ARRAY
70794: PPUSH
70795: LD_VAR 0 2
70799: PUSH
70800: LD_VAR 0 9
70804: ARRAY
70805: PUSH
70806: LD_INT 2
70808: ARRAY
70809: PPUSH
70810: CALL_OW 114
70814: GO 70830
// SetTag ( i , tag ) ;
70816: LD_VAR 0 4
70820: PPUSH
70821: LD_VAR 0 9
70825: PPUSH
70826: CALL_OW 109
// end else
70830: GO 70862
// if enemy then
70832: LD_VAR 0 5
70836: IFFALSE 70862
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
70838: LD_VAR 0 4
70842: PPUSH
70843: LD_VAR 0 5
70847: PPUSH
70848: LD_VAR 0 4
70852: PPUSH
70853: CALL_OW 74
70857: PPUSH
70858: CALL_OW 115
// end ;
70862: GO 70539
70864: POP
70865: POP
// end ;
70866: LD_VAR 0 3
70870: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
70871: LD_INT 0
70873: PPUSH
70874: PPUSH
70875: PPUSH
// if not unit or IsInUnit ( unit ) then
70876: LD_VAR 0 1
70880: NOT
70881: PUSH
70882: LD_VAR 0 1
70886: PPUSH
70887: CALL_OW 310
70891: OR
70892: IFFALSE 70896
// exit ;
70894: GO 70987
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
70896: LD_ADDR_VAR 0 4
70900: PUSH
70901: LD_VAR 0 1
70905: PPUSH
70906: CALL_OW 250
70910: PPUSH
70911: LD_VAR 0 2
70915: PPUSH
70916: LD_INT 1
70918: PPUSH
70919: CALL_OW 272
70923: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
70924: LD_ADDR_VAR 0 5
70928: PUSH
70929: LD_VAR 0 1
70933: PPUSH
70934: CALL_OW 251
70938: PPUSH
70939: LD_VAR 0 2
70943: PPUSH
70944: LD_INT 1
70946: PPUSH
70947: CALL_OW 273
70951: ST_TO_ADDR
// if ValidHex ( x , y ) then
70952: LD_VAR 0 4
70956: PPUSH
70957: LD_VAR 0 5
70961: PPUSH
70962: CALL_OW 488
70966: IFFALSE 70987
// ComTurnXY ( unit , x , y ) ;
70968: LD_VAR 0 1
70972: PPUSH
70973: LD_VAR 0 4
70977: PPUSH
70978: LD_VAR 0 5
70982: PPUSH
70983: CALL_OW 118
// end ;
70987: LD_VAR 0 3
70991: RET
// export function SeeUnits ( side , units ) ; var i ; begin
70992: LD_INT 0
70994: PPUSH
70995: PPUSH
// result := false ;
70996: LD_ADDR_VAR 0 3
71000: PUSH
71001: LD_INT 0
71003: ST_TO_ADDR
// if not units then
71004: LD_VAR 0 2
71008: NOT
71009: IFFALSE 71013
// exit ;
71011: GO 71058
// for i in units do
71013: LD_ADDR_VAR 0 4
71017: PUSH
71018: LD_VAR 0 2
71022: PUSH
71023: FOR_IN
71024: IFFALSE 71056
// if See ( side , i ) then
71026: LD_VAR 0 1
71030: PPUSH
71031: LD_VAR 0 4
71035: PPUSH
71036: CALL_OW 292
71040: IFFALSE 71054
// begin result := true ;
71042: LD_ADDR_VAR 0 3
71046: PUSH
71047: LD_INT 1
71049: ST_TO_ADDR
// exit ;
71050: POP
71051: POP
71052: GO 71058
// end ;
71054: GO 71023
71056: POP
71057: POP
// end ;
71058: LD_VAR 0 3
71062: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
71063: LD_INT 0
71065: PPUSH
71066: PPUSH
71067: PPUSH
71068: PPUSH
// if not unit or not points then
71069: LD_VAR 0 1
71073: NOT
71074: PUSH
71075: LD_VAR 0 2
71079: NOT
71080: OR
71081: IFFALSE 71085
// exit ;
71083: GO 71175
// dist := 99999 ;
71085: LD_ADDR_VAR 0 5
71089: PUSH
71090: LD_INT 99999
71092: ST_TO_ADDR
// for i in points do
71093: LD_ADDR_VAR 0 4
71097: PUSH
71098: LD_VAR 0 2
71102: PUSH
71103: FOR_IN
71104: IFFALSE 71173
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
71106: LD_ADDR_VAR 0 6
71110: PUSH
71111: LD_VAR 0 1
71115: PPUSH
71116: LD_VAR 0 4
71120: PUSH
71121: LD_INT 1
71123: ARRAY
71124: PPUSH
71125: LD_VAR 0 4
71129: PUSH
71130: LD_INT 2
71132: ARRAY
71133: PPUSH
71134: CALL_OW 297
71138: ST_TO_ADDR
// if tmpDist < dist then
71139: LD_VAR 0 6
71143: PUSH
71144: LD_VAR 0 5
71148: LESS
71149: IFFALSE 71171
// begin result := i ;
71151: LD_ADDR_VAR 0 3
71155: PUSH
71156: LD_VAR 0 4
71160: ST_TO_ADDR
// dist := tmpDist ;
71161: LD_ADDR_VAR 0 5
71165: PUSH
71166: LD_VAR 0 6
71170: ST_TO_ADDR
// end ; end ;
71171: GO 71103
71173: POP
71174: POP
// end ; end_of_file
71175: LD_VAR 0 3
71179: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
71180: LD_VAR 0 1
71184: PUSH
71185: LD_INT 200
71187: DOUBLE
71188: GREATEREQUAL
71189: IFFALSE 71197
71191: LD_INT 299
71193: DOUBLE
71194: LESSEQUAL
71195: IFTRUE 71199
71197: GO 71231
71199: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
71200: LD_VAR 0 1
71204: PPUSH
71205: LD_VAR 0 2
71209: PPUSH
71210: LD_VAR 0 3
71214: PPUSH
71215: LD_VAR 0 4
71219: PPUSH
71220: LD_VAR 0 5
71224: PPUSH
71225: CALL 26883 0 5
71229: GO 71308
71231: LD_INT 300
71233: DOUBLE
71234: GREATEREQUAL
71235: IFFALSE 71243
71237: LD_INT 399
71239: DOUBLE
71240: LESSEQUAL
71241: IFTRUE 71245
71243: GO 71307
71245: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
71246: LD_VAR 0 1
71250: PPUSH
71251: LD_VAR 0 2
71255: PPUSH
71256: LD_VAR 0 3
71260: PPUSH
71261: LD_VAR 0 4
71265: PPUSH
71266: LD_VAR 0 5
71270: PPUSH
71271: LD_VAR 0 6
71275: PPUSH
71276: LD_VAR 0 7
71280: PPUSH
71281: LD_VAR 0 8
71285: PPUSH
71286: LD_VAR 0 9
71290: PPUSH
71291: LD_VAR 0 10
71295: PPUSH
71296: LD_VAR 0 11
71300: PPUSH
71301: CALL 24525 0 11
71305: GO 71308
71307: POP
// end ;
71308: PPOPN 11
71310: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
71311: LD_VAR 0 1
71315: PPUSH
71316: LD_VAR 0 2
71320: PPUSH
71321: LD_VAR 0 3
71325: PPUSH
71326: LD_VAR 0 4
71330: PPUSH
71331: LD_VAR 0 5
71335: PPUSH
71336: CALL 26619 0 5
// end ; end_of_file
71340: PPOPN 5
71342: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
71343: LD_VAR 0 1
71347: PPUSH
71348: LD_VAR 0 2
71352: PPUSH
71353: LD_VAR 0 3
71357: PPUSH
71358: LD_VAR 0 4
71362: PPUSH
71363: LD_VAR 0 5
71367: PPUSH
71368: LD_VAR 0 6
71372: PPUSH
71373: CALL 12218 0 6
// end ;
71377: PPOPN 6
71379: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
71380: CALL 12193 0 0
// end ;
71384: PPOPN 1
71386: END
