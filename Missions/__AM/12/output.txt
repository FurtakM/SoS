// export JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ; export others11 ; export Powell ; export Davidov ; export Kurt ; export KurtVeh ; export kurtStatus ; export secondPass ; export vehicleTeleported , tpCounter ; export warWithLegion ; export fakeInfo ; export askSiberite ; export teleportExplored ; export RuScientists , sciCounter ; export RuSolMinLevel , RuSolMaxLevel ; export ruDestroyedBuildings ; export russianTanks , russianTimeLapsers ; export ruAI ; export ruEscape ; export attackTactic ; export arabianMines ; export cratesSpawned ; export mission_prefix ; export eventVar1 ; export debugMode ; export westPathUsed , laserCounterDestroy , rocketBuilded ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// SetBName ( rueastdepot , ryutin ) ;
  15: LD_INT 4
  17: PPUSH
  18: LD_STRING ryutin
  20: PPUSH
  21: CALL_OW 500
// SetBName ( ruwestdepot , yegorov ) ;
  25: LD_INT 6
  27: PPUSH
  28: LD_STRING yegorov
  30: PPUSH
  31: CALL_OW 500
// RuScientists = [ ] ;
  35: LD_ADDR_EXP 27
  39: PUSH
  40: EMPTY
  41: ST_TO_ADDR
// sciCounter = 0 ;
  42: LD_ADDR_EXP 28
  46: PUSH
  47: LD_INT 0
  49: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
  50: LD_ADDR_EXP 31
  54: PUSH
  55: EMPTY
  56: ST_TO_ADDR
// russianTanks = [ ] ;
  57: LD_ADDR_EXP 32
  61: PUSH
  62: EMPTY
  63: ST_TO_ADDR
// russianTimeLapsers = [ ] ;
  64: LD_ADDR_EXP 33
  68: PUSH
  69: EMPTY
  70: ST_TO_ADDR
// arabianMines = [ ] ;
  71: LD_ADDR_EXP 37
  75: PUSH
  76: EMPTY
  77: ST_TO_ADDR
// kurtStatus = LoadVariable ( 06_KurtStatus_1 , 0 ) ;
  78: LD_ADDR_EXP 19
  82: PUSH
  83: LD_STRING 06_KurtStatus_1
  85: PPUSH
  86: LD_INT 0
  88: PPUSH
  89: CALL_OW 30
  93: ST_TO_ADDR
// secondPass = 0 ;
  94: LD_ADDR_EXP 20
  98: PUSH
  99: LD_INT 0
 101: ST_TO_ADDR
// teleportExplored = 0 ;
 102: LD_ADDR_EXP 26
 106: PUSH
 107: LD_INT 0
 109: ST_TO_ADDR
// attackTactic = 0 ;
 110: LD_ADDR_EXP 36
 114: PUSH
 115: LD_INT 0
 117: ST_TO_ADDR
// tpCounter = 0 ;
 118: LD_ADDR_EXP 22
 122: PUSH
 123: LD_INT 0
 125: ST_TO_ADDR
// askSiberite = 0 ;
 126: LD_ADDR_EXP 25
 130: PUSH
 131: LD_INT 0
 133: ST_TO_ADDR
// warWithLegion = 0 ;
 134: LD_ADDR_EXP 23
 138: PUSH
 139: LD_INT 0
 141: ST_TO_ADDR
// fakeInfo = 0 ;
 142: LD_ADDR_EXP 24
 146: PUSH
 147: LD_INT 0
 149: ST_TO_ADDR
// cratesSpawned = 0 ;
 150: LD_ADDR_EXP 38
 154: PUSH
 155: LD_INT 0
 157: ST_TO_ADDR
// ruAI = 0 ;
 158: LD_ADDR_EXP 34
 162: PUSH
 163: LD_INT 0
 165: ST_TO_ADDR
// ruEscape = 0 ;
 166: LD_ADDR_EXP 35
 170: PUSH
 171: LD_INT 0
 173: ST_TO_ADDR
// eventVar1 = 0 ;
 174: LD_ADDR_EXP 40
 178: PUSH
 179: LD_INT 0
 181: ST_TO_ADDR
// mission_prefix = 12_ ;
 182: LD_ADDR_EXP 39
 186: PUSH
 187: LD_STRING 12_
 189: ST_TO_ADDR
// debugMode = 0 ;
 190: LD_ADDR_EXP 41
 194: PUSH
 195: LD_INT 0
 197: ST_TO_ADDR
// westPathUsed := false ;
 198: LD_ADDR_EXP 42
 202: PUSH
 203: LD_INT 0
 205: ST_TO_ADDR
// laserCounterDestroy := 0 ;
 206: LD_ADDR_EXP 43
 210: PUSH
 211: LD_INT 0
 213: ST_TO_ADDR
// rocketBuilded := false ;
 214: LD_ADDR_EXP 44
 218: PUSH
 219: LD_INT 0
 221: ST_TO_ADDR
// CreateNature ;
 222: CALL 15069 0 0
// PrepareDifficulty ;
 226: CALL 12284 0 0
// PrepareVehicles ;
 230: CALL 1804 0 0
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 234: LD_INT 4
 236: PPUSH
 237: LD_INT 0
 239: PPUSH
 240: LD_INT 1
 242: PPUSH
 243: LD_INT 0
 245: PPUSH
 246: CALL 1378 0 4
// PrepareAmericanHeroes ;
 250: CALL 644 0 0
// PrepareRussianCommander ;
 254: CALL 3269 0 0
// PrepareWestBase ;
 258: CALL 3784 0 0
// PrepareEastBase ;
 262: CALL 3344 0 0
// PrepareOtherRussians ;
 266: CALL 3922 0 0
// Action ;
 270: CALL 5588 0 0
// end ;
 274: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 275: LD_EXP 41
 279: PUSH
 280: LD_INT 1
 282: EQUAL
 283: IFFALSE 589
 285: GO 287
 287: DISABLE
 288: LD_INT 0
 290: PPUSH
// begin enable ;
 291: ENABLE
// fogoff ( true ) ;
 292: LD_INT 1
 294: PPUSH
 295: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 299: LD_ADDR_VAR 0 1
 303: PUSH
 304: LD_INT 22
 306: PUSH
 307: LD_INT 1
 309: PUSH
 310: EMPTY
 311: LIST
 312: LIST
 313: PUSH
 314: LD_INT 21
 316: PUSH
 317: LD_INT 1
 319: PUSH
 320: EMPTY
 321: LIST
 322: LIST
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: PPUSH
 328: CALL_OW 69
 332: PUSH
 333: FOR_IN
 334: IFFALSE 350
// SetLives ( i , 1000 ) ;
 336: LD_VAR 0 1
 340: PPUSH
 341: LD_INT 1000
 343: PPUSH
 344: CALL_OW 234
 348: GO 333
 350: POP
 351: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 352: LD_ADDR_VAR 0 1
 356: PUSH
 357: LD_INT 22
 359: PUSH
 360: LD_INT 1
 362: PUSH
 363: EMPTY
 364: LIST
 365: LIST
 366: PUSH
 367: LD_INT 2
 369: PUSH
 370: LD_INT 30
 372: PUSH
 373: LD_INT 0
 375: PUSH
 376: EMPTY
 377: LIST
 378: LIST
 379: PUSH
 380: LD_INT 30
 382: PUSH
 383: LD_INT 1
 385: PUSH
 386: EMPTY
 387: LIST
 388: LIST
 389: PUSH
 390: EMPTY
 391: LIST
 392: LIST
 393: LIST
 394: PUSH
 395: EMPTY
 396: LIST
 397: LIST
 398: PPUSH
 399: CALL_OW 69
 403: PUSH
 404: FOR_IN
 405: IFFALSE 429
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 407: LD_VAR 0 1
 411: PPUSH
 412: CALL_OW 274
 416: PPUSH
 417: LD_INT 1
 419: PPUSH
 420: LD_INT 9999
 422: PPUSH
 423: CALL_OW 277
 427: GO 404
 429: POP
 430: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 431: LD_ADDR_VAR 0 1
 435: PUSH
 436: LD_INT 22
 438: PUSH
 439: LD_INT 1
 441: PUSH
 442: EMPTY
 443: LIST
 444: LIST
 445: PUSH
 446: LD_INT 2
 448: PUSH
 449: LD_INT 30
 451: PUSH
 452: LD_INT 0
 454: PUSH
 455: EMPTY
 456: LIST
 457: LIST
 458: PUSH
 459: LD_INT 30
 461: PUSH
 462: LD_INT 1
 464: PUSH
 465: EMPTY
 466: LIST
 467: LIST
 468: PUSH
 469: EMPTY
 470: LIST
 471: LIST
 472: LIST
 473: PUSH
 474: EMPTY
 475: LIST
 476: LIST
 477: PPUSH
 478: CALL_OW 69
 482: PUSH
 483: FOR_IN
 484: IFFALSE 508
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 486: LD_VAR 0 1
 490: PPUSH
 491: CALL_OW 274
 495: PPUSH
 496: LD_INT 2
 498: PPUSH
 499: LD_INT 9999
 501: PPUSH
 502: CALL_OW 277
 506: GO 483
 508: POP
 509: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 510: LD_ADDR_VAR 0 1
 514: PUSH
 515: LD_INT 22
 517: PUSH
 518: LD_INT 1
 520: PUSH
 521: EMPTY
 522: LIST
 523: LIST
 524: PUSH
 525: LD_INT 2
 527: PUSH
 528: LD_INT 30
 530: PUSH
 531: LD_INT 0
 533: PUSH
 534: EMPTY
 535: LIST
 536: LIST
 537: PUSH
 538: LD_INT 30
 540: PUSH
 541: LD_INT 1
 543: PUSH
 544: EMPTY
 545: LIST
 546: LIST
 547: PUSH
 548: EMPTY
 549: LIST
 550: LIST
 551: LIST
 552: PUSH
 553: EMPTY
 554: LIST
 555: LIST
 556: PPUSH
 557: CALL_OW 69
 561: PUSH
 562: FOR_IN
 563: IFFALSE 587
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 565: LD_VAR 0 1
 569: PPUSH
 570: CALL_OW 274
 574: PPUSH
 575: LD_INT 3
 577: PPUSH
 578: LD_INT 9999
 580: PPUSH
 581: CALL_OW 277
 585: GO 562
 587: POP
 588: POP
// end ;
 589: PPOPN 1
 591: END
// every 0 0$1 trigger FilterUnitsInArea ( westPathArea , [ f_side , 1 ] ) do
 592: LD_INT 25
 594: PPUSH
 595: LD_INT 22
 597: PUSH
 598: LD_INT 1
 600: PUSH
 601: EMPTY
 602: LIST
 603: LIST
 604: PPUSH
 605: CALL_OW 70
 609: IFFALSE 622
 611: GO 613
 613: DISABLE
// westPathUsed := true ;
 614: LD_ADDR_EXP 42
 618: PUSH
 619: LD_INT 1
 621: ST_TO_ADDR
 622: END
// every 0 0$1 trigger laserCounterDestroy >= 3 do
 623: LD_EXP 43
 627: PUSH
 628: LD_INT 3
 630: GREATEREQUAL
 631: IFFALSE 643
 633: GO 635
 635: DISABLE
// SetAchievement ( ACH_LASER ) ; end_of_file
 636: LD_STRING ACH_LASER
 638: PPUSH
 639: CALL_OW 543
 643: END
// export function PrepareAmericanHeroes ; var tmp , i ; begin
 644: LD_INT 0
 646: PPUSH
 647: PPUSH
 648: PPUSH
// uc_side = 1 ;
 649: LD_ADDR_OWVAR 20
 653: PUSH
 654: LD_INT 1
 656: ST_TO_ADDR
// others11 = CreateCharacterSet ( 11c_others ) union CreateCharacterSet ( 11_others ) ;
 657: LD_ADDR_EXP 14
 661: PUSH
 662: LD_STRING 11c_others
 664: PPUSH
 665: CALL_OW 31
 669: PUSH
 670: LD_STRING 11_others
 672: PPUSH
 673: CALL_OW 31
 677: UNION
 678: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true , 11_ ) ;
 679: LD_ADDR_EXP 1
 683: PUSH
 684: LD_STRING JMM
 686: PPUSH
 687: LD_INT 1
 689: PPUSH
 690: LD_STRING 11_
 692: PPUSH
 693: CALL 38231 0 3
 697: ST_TO_ADDR
// SetClass ( JMM , 1 ) ;
 698: LD_EXP 1
 702: PPUSH
 703: LD_INT 1
 705: PPUSH
 706: CALL_OW 336
// PlaceHumanInUnit ( JMM , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
 710: LD_EXP 1
 714: PPUSH
 715: LD_INT 22
 717: PUSH
 718: LD_INT 1
 720: PUSH
 721: EMPTY
 722: LIST
 723: LIST
 724: PUSH
 725: LD_INT 21
 727: PUSH
 728: LD_INT 2
 730: PUSH
 731: EMPTY
 732: LIST
 733: LIST
 734: PUSH
 735: LD_INT 58
 737: PUSH
 738: EMPTY
 739: LIST
 740: PUSH
 741: EMPTY
 742: LIST
 743: LIST
 744: LIST
 745: PPUSH
 746: CALL_OW 69
 750: PUSH
 751: LD_INT 1
 753: ARRAY
 754: PPUSH
 755: CALL_OW 52
// if TestCharacters ( 11_Lisa ) = true then
 759: LD_STRING 11_Lisa
 761: PPUSH
 762: CALL_OW 28
 766: PUSH
 767: LD_INT 1
 769: EQUAL
 770: IFFALSE 820
// begin Lisa = PrepareUnit ( Lisa , true , 11_ ) ;
 772: LD_ADDR_EXP 2
 776: PUSH
 777: LD_STRING Lisa
 779: PPUSH
 780: LD_INT 1
 782: PPUSH
 783: LD_STRING 11_
 785: PPUSH
 786: CALL 38231 0 3
 790: ST_TO_ADDR
// SetClass ( Lisa , 1 ) ;
 791: LD_EXP 2
 795: PPUSH
 796: LD_INT 1
 798: PPUSH
 799: CALL_OW 336
// PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 803: LD_EXP 2
 807: PPUSH
 808: LD_INT 4
 810: PPUSH
 811: LD_INT 0
 813: PPUSH
 814: CALL_OW 49
// end else
 818: GO 836
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 820: LD_INT 4
 822: PPUSH
 823: LD_INT 0
 825: PPUSH
 826: LD_INT 1
 828: PPUSH
 829: LD_INT 0
 831: PPUSH
 832: CALL 1378 0 4
// end ; if TestCharacters ( 11_Donaldson ) = true then
 836: LD_STRING 11_Donaldson
 838: PPUSH
 839: CALL_OW 28
 843: PUSH
 844: LD_INT 1
 846: EQUAL
 847: IFFALSE 897
// begin Donaldson = PrepareUnit ( Donaldson , true , 11_ ) ;
 849: LD_ADDR_EXP 3
 853: PUSH
 854: LD_STRING Donaldson
 856: PPUSH
 857: LD_INT 1
 859: PPUSH
 860: LD_STRING 11_
 862: PPUSH
 863: CALL 38231 0 3
 867: ST_TO_ADDR
// SetClass ( Donaldson , 1 ) ;
 868: LD_EXP 3
 872: PPUSH
 873: LD_INT 1
 875: PPUSH
 876: CALL_OW 336
// PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
 880: LD_EXP 3
 884: PPUSH
 885: LD_INT 4
 887: PPUSH
 888: LD_INT 0
 890: PPUSH
 891: CALL_OW 49
// end else
 895: GO 913
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 897: LD_INT 4
 899: PPUSH
 900: LD_INT 0
 902: PPUSH
 903: LD_INT 1
 905: PPUSH
 906: LD_INT 0
 908: PPUSH
 909: CALL 1378 0 4
// end ; if TestCharacters ( 11_Cyrus ) = true then
 913: LD_STRING 11_Cyrus
 915: PPUSH
 916: CALL_OW 28
 920: PUSH
 921: LD_INT 1
 923: EQUAL
 924: IFFALSE 974
// begin Cyrus = PrepareUnit ( Cyrus , true , 11_ ) ;
 926: LD_ADDR_EXP 5
 930: PUSH
 931: LD_STRING Cyrus
 933: PPUSH
 934: LD_INT 1
 936: PPUSH
 937: LD_STRING 11_
 939: PPUSH
 940: CALL 38231 0 3
 944: ST_TO_ADDR
// SetClass ( Cyrus , 1 ) ;
 945: LD_EXP 5
 949: PPUSH
 950: LD_INT 1
 952: PPUSH
 953: CALL_OW 336
// PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
 957: LD_EXP 5
 961: PPUSH
 962: LD_INT 4
 964: PPUSH
 965: LD_INT 0
 967: PPUSH
 968: CALL_OW 49
// end else
 972: GO 990
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 974: LD_INT 4
 976: PPUSH
 977: LD_INT 0
 979: PPUSH
 980: LD_INT 1
 982: PPUSH
 983: LD_INT 0
 985: PPUSH
 986: CALL 1378 0 4
// end ; if TestCharacters ( 11_Denis ) = true then
 990: LD_STRING 11_Denis
 992: PPUSH
 993: CALL_OW 28
 997: PUSH
 998: LD_INT 1
1000: EQUAL
1001: IFFALSE 1051
// begin Denis = PrepareUnit ( Denis , true , 11_ ) ;
1003: LD_ADDR_EXP 6
1007: PUSH
1008: LD_STRING Denis
1010: PPUSH
1011: LD_INT 1
1013: PPUSH
1014: LD_STRING 11_
1016: PPUSH
1017: CALL 38231 0 3
1021: ST_TO_ADDR
// SetClass ( Denis , 4 ) ;
1022: LD_EXP 6
1026: PPUSH
1027: LD_INT 4
1029: PPUSH
1030: CALL_OW 336
// PlaceUnitArea ( Denis , PlayerSpawn , false ) ;
1034: LD_EXP 6
1038: PPUSH
1039: LD_INT 4
1041: PPUSH
1042: LD_INT 0
1044: PPUSH
1045: CALL_OW 49
// end else
1049: GO 1067
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1051: LD_INT 4
1053: PPUSH
1054: LD_INT 0
1056: PPUSH
1057: LD_INT 1
1059: PPUSH
1060: LD_INT 0
1062: PPUSH
1063: CALL 1378 0 4
// end ; if TestCharacters ( 11_Frank ) = true then
1067: LD_STRING 11_Frank
1069: PPUSH
1070: CALL_OW 28
1074: PUSH
1075: LD_INT 1
1077: EQUAL
1078: IFFALSE 1128
// begin Frank = PrepareUnit ( Frank , true , 11_ ) ;
1080: LD_ADDR_EXP 12
1084: PUSH
1085: LD_STRING Frank
1087: PPUSH
1088: LD_INT 1
1090: PPUSH
1091: LD_STRING 11_
1093: PPUSH
1094: CALL 38231 0 3
1098: ST_TO_ADDR
// SetClass ( Frank , 1 ) ;
1099: LD_EXP 12
1103: PPUSH
1104: LD_INT 1
1106: PPUSH
1107: CALL_OW 336
// PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
1111: LD_EXP 12
1115: PPUSH
1116: LD_INT 4
1118: PPUSH
1119: LD_INT 0
1121: PPUSH
1122: CALL_OW 49
// end else
1126: GO 1144
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1128: LD_INT 4
1130: PPUSH
1131: LD_INT 0
1133: PPUSH
1134: LD_INT 1
1136: PPUSH
1137: LD_INT 0
1139: PPUSH
1140: CALL 1378 0 4
// end ; if TestCharacters ( 11_Cornell ) = true then
1144: LD_STRING 11_Cornell
1146: PPUSH
1147: CALL_OW 28
1151: PUSH
1152: LD_INT 1
1154: EQUAL
1155: IFFALSE 1205
// begin Cornel = PrepareUnit ( Cornell , true , 11_ ) ;
1157: LD_ADDR_EXP 10
1161: PUSH
1162: LD_STRING Cornell
1164: PPUSH
1165: LD_INT 1
1167: PPUSH
1168: LD_STRING 11_
1170: PPUSH
1171: CALL 38231 0 3
1175: ST_TO_ADDR
// SetClass ( Cornel , 1 ) ;
1176: LD_EXP 10
1180: PPUSH
1181: LD_INT 1
1183: PPUSH
1184: CALL_OW 336
// PlaceUnitArea ( Cornel , PlayerSpawn , false ) ;
1188: LD_EXP 10
1192: PPUSH
1193: LD_INT 4
1195: PPUSH
1196: LD_INT 0
1198: PPUSH
1199: CALL_OW 49
// end else
1203: GO 1221
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1205: LD_INT 4
1207: PPUSH
1208: LD_INT 0
1210: PPUSH
1211: LD_INT 1
1213: PPUSH
1214: LD_INT 0
1216: PPUSH
1217: CALL 1378 0 4
// end ; tmp := UnitFilter ( others11 , [ f_sex , 1 ] ) ;
1221: LD_ADDR_VAR 0 2
1225: PUSH
1226: LD_EXP 14
1230: PPUSH
1231: LD_INT 26
1233: PUSH
1234: LD_INT 1
1236: PUSH
1237: EMPTY
1238: LIST
1239: LIST
1240: PPUSH
1241: CALL_OW 72
1245: ST_TO_ADDR
// if not tmp then
1246: LD_VAR 0 2
1250: NOT
1251: IFFALSE 1280
// begin PrepareSoldier ( sex_male , 8 ) ;
1253: LD_INT 1
1255: PPUSH
1256: LD_INT 8
1258: PPUSH
1259: CALL_OW 381
// PlaceUnitArea ( CreateHuman , PlayerSpawn , false ) ;
1263: CALL_OW 44
1267: PPUSH
1268: LD_INT 4
1270: PPUSH
1271: LD_INT 0
1273: PPUSH
1274: CALL_OW 49
// end else
1278: GO 1354
// begin if GetClass ( tmp [ 1 ] ) <> class_soldier then
1280: LD_VAR 0 2
1284: PUSH
1285: LD_INT 1
1287: ARRAY
1288: PPUSH
1289: CALL_OW 257
1293: PUSH
1294: LD_INT 1
1296: NONEQUAL
1297: IFFALSE 1315
// SetClass ( tmp [ 1 ] , class_soldier ) ;
1299: LD_VAR 0 2
1303: PUSH
1304: LD_INT 1
1306: ARRAY
1307: PPUSH
1308: LD_INT 1
1310: PPUSH
1311: CALL_OW 336
// PlaceUnitArea ( tmp [ 1 ] , PlayerSpawn , false ) ;
1315: LD_VAR 0 2
1319: PUSH
1320: LD_INT 1
1322: ARRAY
1323: PPUSH
1324: LD_INT 4
1326: PPUSH
1327: LD_INT 0
1329: PPUSH
1330: CALL_OW 49
// others11 := others11 diff tmp [ 1 ] ;
1334: LD_ADDR_EXP 14
1338: PUSH
1339: LD_EXP 14
1343: PUSH
1344: LD_VAR 0 2
1348: PUSH
1349: LD_INT 1
1351: ARRAY
1352: DIFF
1353: ST_TO_ADDR
// end ; Powell = PrepareUnit ( Powell , false ,  ) ;
1354: LD_ADDR_EXP 15
1358: PUSH
1359: LD_STRING Powell
1361: PPUSH
1362: LD_INT 0
1364: PPUSH
1365: LD_STRING 
1367: PPUSH
1368: CALL 38231 0 3
1372: ST_TO_ADDR
// end ;
1373: LD_VAR 0 1
1377: RET
// export function PrepareAmericansRandom ( area , veh , spawnMode , mech ) ; var i , un , tmp , mecha ; begin
1378: LD_INT 0
1380: PPUSH
1381: PPUSH
1382: PPUSH
1383: PPUSH
1384: PPUSH
// if mech = 1 then
1385: LD_VAR 0 4
1389: PUSH
1390: LD_INT 1
1392: EQUAL
1393: IFFALSE 1630
// begin if others11 > 0 then
1395: LD_EXP 14
1399: PUSH
1400: LD_INT 0
1402: GREATER
1403: IFFALSE 1570
// begin for i := 1 to others11 - 1 do
1405: LD_ADDR_VAR 0 6
1409: PUSH
1410: DOUBLE
1411: LD_INT 1
1413: DEC
1414: ST_TO_ADDR
1415: LD_EXP 14
1419: PUSH
1420: LD_INT 1
1422: MINUS
1423: PUSH
1424: FOR_TO
1425: IFFALSE 1507
// begin if GetSkill ( others11 [ i ] , 3 ) < GetSkill ( others11 [ i + 1 ] , 3 ) then
1427: LD_EXP 14
1431: PUSH
1432: LD_VAR 0 6
1436: ARRAY
1437: PPUSH
1438: LD_INT 3
1440: PPUSH
1441: CALL_OW 259
1445: PUSH
1446: LD_EXP 14
1450: PUSH
1451: LD_VAR 0 6
1455: PUSH
1456: LD_INT 1
1458: PLUS
1459: ARRAY
1460: PPUSH
1461: LD_INT 3
1463: PPUSH
1464: CALL_OW 259
1468: LESS
1469: IFFALSE 1505
// begin mecha = others11 [ i + 1 ] ;
1471: LD_ADDR_VAR 0 9
1475: PUSH
1476: LD_EXP 14
1480: PUSH
1481: LD_VAR 0 6
1485: PUSH
1486: LD_INT 1
1488: PLUS
1489: ARRAY
1490: ST_TO_ADDR
// SetClass ( mecha , 3 ) ;
1491: LD_VAR 0 9
1495: PPUSH
1496: LD_INT 3
1498: PPUSH
1499: CALL_OW 336
// break ;
1503: GO 1507
// end ; end ;
1505: GO 1424
1507: POP
1508: POP
// if spawnMode = 1 then
1509: LD_VAR 0 3
1513: PUSH
1514: LD_INT 1
1516: EQUAL
1517: IFFALSE 1538
// PlaceUnitArea ( mecha , area , false ) else
1519: LD_VAR 0 9
1523: PPUSH
1524: LD_VAR 0 1
1528: PPUSH
1529: LD_INT 0
1531: PPUSH
1532: CALL_OW 49
1536: GO 1552
// PlaceHumanInUnit ( mecha , veh ) ;
1538: LD_VAR 0 9
1542: PPUSH
1543: LD_VAR 0 2
1547: PPUSH
1548: CALL_OW 52
// others11 = others11 diff mecha ;
1552: LD_ADDR_EXP 14
1556: PUSH
1557: LD_EXP 14
1561: PUSH
1562: LD_VAR 0 9
1566: DIFF
1567: ST_TO_ADDR
// end else
1568: GO 1628
// begin hc_name =  ;
1570: LD_ADDR_OWVAR 26
1574: PUSH
1575: LD_STRING 
1577: ST_TO_ADDR
// hc_gallery =  ;
1578: LD_ADDR_OWVAR 33
1582: PUSH
1583: LD_STRING 
1585: ST_TO_ADDR
// PrepareMechanic ( false , rand ( 7 , 9 ) ) ;
1586: LD_INT 0
1588: PPUSH
1589: LD_INT 7
1591: PPUSH
1592: LD_INT 9
1594: PPUSH
1595: CALL_OW 12
1599: PPUSH
1600: CALL_OW 383
// un = CreateHuman ;
1604: LD_ADDR_VAR 0 7
1608: PUSH
1609: CALL_OW 44
1613: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1614: LD_VAR 0 7
1618: PPUSH
1619: LD_VAR 0 2
1623: PPUSH
1624: CALL_OW 52
// end ; end else
1628: GO 1799
// begin if others11 > 0 then
1630: LD_EXP 14
1634: PUSH
1635: LD_INT 0
1637: GREATER
1638: IFFALSE 1711
// begin if spawnMode = 1 then
1640: LD_VAR 0 3
1644: PUSH
1645: LD_INT 1
1647: EQUAL
1648: IFFALSE 1673
// PlaceUnitArea ( others11 [ 1 ] , area , false ) else
1650: LD_EXP 14
1654: PUSH
1655: LD_INT 1
1657: ARRAY
1658: PPUSH
1659: LD_VAR 0 1
1663: PPUSH
1664: LD_INT 0
1666: PPUSH
1667: CALL_OW 49
1671: GO 1691
// PlaceHumanInUnit ( others11 [ 1 ] , veh ) ;
1673: LD_EXP 14
1677: PUSH
1678: LD_INT 1
1680: ARRAY
1681: PPUSH
1682: LD_VAR 0 2
1686: PPUSH
1687: CALL_OW 52
// others11 = Delete ( others11 , 1 ) ;
1691: LD_ADDR_EXP 14
1695: PUSH
1696: LD_EXP 14
1700: PPUSH
1701: LD_INT 1
1703: PPUSH
1704: CALL_OW 3
1708: ST_TO_ADDR
// end else
1709: GO 1799
// begin hc_name =  ;
1711: LD_ADDR_OWVAR 26
1715: PUSH
1716: LD_STRING 
1718: ST_TO_ADDR
// hc_gallery =  ;
1719: LD_ADDR_OWVAR 33
1723: PUSH
1724: LD_STRING 
1726: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] , rand ( 7 , 9 ) ) ;
1727: LD_INT 0
1729: PPUSH
1730: LD_INT 1
1732: PUSH
1733: LD_INT 2
1735: PUSH
1736: LD_INT 3
1738: PUSH
1739: LD_INT 4
1741: PUSH
1742: EMPTY
1743: LIST
1744: LIST
1745: LIST
1746: LIST
1747: PUSH
1748: LD_INT 1
1750: PPUSH
1751: LD_INT 4
1753: PPUSH
1754: CALL_OW 12
1758: ARRAY
1759: PPUSH
1760: LD_INT 7
1762: PPUSH
1763: LD_INT 9
1765: PPUSH
1766: CALL_OW 12
1770: PPUSH
1771: CALL_OW 380
// un = CreateHuman ;
1775: LD_ADDR_VAR 0 7
1779: PUSH
1780: CALL_OW 44
1784: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1785: LD_VAR 0 7
1789: PPUSH
1790: LD_VAR 0 2
1794: PPUSH
1795: CALL_OW 52
// end ; end ; end ;
1799: LD_VAR 0 5
1803: RET
// export function PrepareVehicles ; var veh ; begin
1804: LD_INT 0
1806: PPUSH
1807: PPUSH
// uc_side := 1 ;
1808: LD_ADDR_OWVAR 20
1812: PUSH
1813: LD_INT 1
1815: ST_TO_ADDR
// uc_nation := 1 ;
1816: LD_ADDR_OWVAR 21
1820: PUSH
1821: LD_INT 1
1823: ST_TO_ADDR
// vc_chassis := us_medium_tracked ;
1824: LD_ADDR_OWVAR 37
1828: PUSH
1829: LD_INT 3
1831: ST_TO_ADDR
// vc_engine := engine_siberite ;
1832: LD_ADDR_OWVAR 39
1836: PUSH
1837: LD_INT 3
1839: ST_TO_ADDR
// vc_control := control_computer ;
1840: LD_ADDR_OWVAR 38
1844: PUSH
1845: LD_INT 3
1847: ST_TO_ADDR
// vc_weapon = us_gatling_gun ;
1848: LD_ADDR_OWVAR 40
1852: PUSH
1853: LD_INT 4
1855: ST_TO_ADDR
// veh := CreateVehicle ;
1856: LD_ADDR_VAR 0 2
1860: PUSH
1861: CALL_OW 45
1865: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1866: LD_VAR 0 2
1870: PPUSH
1871: LD_INT 4
1873: PPUSH
1874: LD_INT 0
1876: PPUSH
1877: CALL_OW 49
// vc_weapon := us_double_gun ;
1881: LD_ADDR_OWVAR 40
1885: PUSH
1886: LD_INT 5
1888: ST_TO_ADDR
// vc_control := control_manual ;
1889: LD_ADDR_OWVAR 38
1893: PUSH
1894: LD_INT 1
1896: ST_TO_ADDR
// veh := CreateVehicle ;
1897: LD_ADDR_VAR 0 2
1901: PUSH
1902: CALL_OW 45
1906: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1907: LD_VAR 0 2
1911: PPUSH
1912: LD_INT 4
1914: PPUSH
1915: LD_INT 0
1917: PPUSH
1918: CALL_OW 49
// vc_weapon := us_light_gun ;
1922: LD_ADDR_OWVAR 40
1926: PUSH
1927: LD_INT 3
1929: ST_TO_ADDR
// vc_control := control_computer ;
1930: LD_ADDR_OWVAR 38
1934: PUSH
1935: LD_INT 3
1937: ST_TO_ADDR
// vc_chassis := us_medium_wheeled ;
1938: LD_ADDR_OWVAR 37
1942: PUSH
1943: LD_INT 2
1945: ST_TO_ADDR
// veh := CreateVehicle ;
1946: LD_ADDR_VAR 0 2
1950: PUSH
1951: CALL_OW 45
1955: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1956: LD_VAR 0 2
1960: PPUSH
1961: LD_INT 4
1963: PPUSH
1964: LD_INT 0
1966: PPUSH
1967: CALL_OW 49
// vc_weapon := us_gatling_gun ;
1971: LD_ADDR_OWVAR 40
1975: PUSH
1976: LD_INT 4
1978: ST_TO_ADDR
// veh := CreateVehicle ;
1979: LD_ADDR_VAR 0 2
1983: PUSH
1984: CALL_OW 45
1988: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1989: LD_VAR 0 2
1993: PPUSH
1994: LD_INT 4
1996: PPUSH
1997: LD_INT 0
1999: PPUSH
2000: CALL_OW 49
// end ;
2004: LD_VAR 0 1
2008: RET
// export function PowellSupport1 ; var veh , un ; begin
2009: LD_INT 0
2011: PPUSH
2012: PPUSH
2013: PPUSH
// uc_side := 1 ;
2014: LD_ADDR_OWVAR 20
2018: PUSH
2019: LD_INT 1
2021: ST_TO_ADDR
// uc_nation := 1 ;
2022: LD_ADDR_OWVAR 21
2026: PUSH
2027: LD_INT 1
2029: ST_TO_ADDR
// if TestCharacters ( 11_Brown ) then
2030: LD_STRING 11_Brown
2032: PPUSH
2033: CALL_OW 28
2037: IFFALSE 2087
// begin Brown := PrepareUnit ( Brown , true , 11_ ) ;
2039: LD_ADDR_EXP 7
2043: PUSH
2044: LD_STRING Brown
2046: PPUSH
2047: LD_INT 1
2049: PPUSH
2050: LD_STRING 11_
2052: PPUSH
2053: CALL 38231 0 3
2057: ST_TO_ADDR
// SetClass ( Brown , class_engineer ) ;
2058: LD_EXP 7
2062: PPUSH
2063: LD_INT 2
2065: PPUSH
2066: CALL_OW 336
// PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
2070: LD_EXP 7
2074: PPUSH
2075: LD_INT 4
2077: PPUSH
2078: LD_INT 0
2080: PPUSH
2081: CALL_OW 49
// end else
2085: GO 2103
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2087: LD_INT 4
2089: PPUSH
2090: LD_INT 0
2092: PPUSH
2093: LD_INT 1
2095: PPUSH
2096: LD_INT 0
2098: PPUSH
2099: CALL 1378 0 4
// if TestCharacters ( 11_Gary ) then
2103: LD_STRING 11_Gary
2105: PPUSH
2106: CALL_OW 28
2110: IFFALSE 2160
// begin Gary := PrepareUnit ( Gary , true , 11_ ) ;
2112: LD_ADDR_EXP 11
2116: PUSH
2117: LD_STRING Gary
2119: PPUSH
2120: LD_INT 1
2122: PPUSH
2123: LD_STRING 11_
2125: PPUSH
2126: CALL 38231 0 3
2130: ST_TO_ADDR
// SetClass ( Gary , class_engineer ) ;
2131: LD_EXP 11
2135: PPUSH
2136: LD_INT 2
2138: PPUSH
2139: CALL_OW 336
// PlaceUnitArea ( Gary , PlayerSpawn , false ) ;
2143: LD_EXP 11
2147: PPUSH
2148: LD_INT 4
2150: PPUSH
2151: LD_INT 0
2153: PPUSH
2154: CALL_OW 49
// end else
2158: GO 2176
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2160: LD_INT 4
2162: PPUSH
2163: LD_INT 0
2165: PPUSH
2166: LD_INT 1
2168: PPUSH
2169: LD_INT 0
2171: PPUSH
2172: CALL 1378 0 4
// vc_chassis := us_medium_tracked ;
2176: LD_ADDR_OWVAR 37
2180: PUSH
2181: LD_INT 3
2183: ST_TO_ADDR
// vc_engine := engine_siberite ;
2184: LD_ADDR_OWVAR 39
2188: PUSH
2189: LD_INT 3
2191: ST_TO_ADDR
// vc_control := control_manual ;
2192: LD_ADDR_OWVAR 38
2196: PUSH
2197: LD_INT 1
2199: ST_TO_ADDR
// vc_weapon := us_crane ;
2200: LD_ADDR_OWVAR 40
2204: PUSH
2205: LD_INT 13
2207: ST_TO_ADDR
// veh := CreateVehicle ;
2208: LD_ADDR_VAR 0 2
2212: PUSH
2213: CALL_OW 45
2217: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2218: LD_VAR 0 2
2222: PPUSH
2223: LD_INT 4
2225: PPUSH
2226: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2230: LD_VAR 0 2
2234: PPUSH
2235: LD_INT 4
2237: PPUSH
2238: LD_INT 0
2240: PPUSH
2241: CALL_OW 49
// PrepareAmericansRandom ( PlayerSpawn , veh , 2 , 1 ) ;
2245: LD_INT 4
2247: PPUSH
2248: LD_VAR 0 2
2252: PPUSH
2253: LD_INT 2
2255: PPUSH
2256: LD_INT 1
2258: PPUSH
2259: CALL 1378 0 4
// vc_weapon := us_laser ;
2263: LD_ADDR_OWVAR 40
2267: PUSH
2268: LD_INT 9
2270: ST_TO_ADDR
// veh := CreateVehicle ;
2271: LD_ADDR_VAR 0 2
2275: PUSH
2276: CALL_OW 45
2280: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2281: LD_VAR 0 2
2285: PPUSH
2286: LD_INT 4
2288: PPUSH
2289: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2293: LD_VAR 0 2
2297: PPUSH
2298: LD_INT 4
2300: PPUSH
2301: LD_INT 0
2303: PPUSH
2304: CALL_OW 49
// PrepareAmericansRandom ( PlayerSpawn , veh , 2 , 1 ) ;
2308: LD_INT 4
2310: PPUSH
2311: LD_VAR 0 2
2315: PPUSH
2316: LD_INT 2
2318: PPUSH
2319: LD_INT 1
2321: PPUSH
2322: CALL 1378 0 4
// vc_control := control_computer ;
2326: LD_ADDR_OWVAR 38
2330: PUSH
2331: LD_INT 3
2333: ST_TO_ADDR
// vc_weapon := us_cargo_bay ;
2334: LD_ADDR_OWVAR 40
2338: PUSH
2339: LD_INT 12
2341: ST_TO_ADDR
// veh := CreateVehicle ;
2342: LD_ADDR_VAR 0 2
2346: PUSH
2347: CALL_OW 45
2351: ST_TO_ADDR
// SetTag ( veh , 17 ) ;
2352: LD_VAR 0 2
2356: PPUSH
2357: LD_INT 17
2359: PPUSH
2360: CALL_OW 109
// SetDir ( veh , 4 ) ;
2364: LD_VAR 0 2
2368: PPUSH
2369: LD_INT 4
2371: PPUSH
2372: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2376: LD_VAR 0 2
2380: PPUSH
2381: LD_INT 4
2383: PPUSH
2384: LD_INT 0
2386: PPUSH
2387: CALL_OW 49
// AddCargo ( veh , mat_siberit , 100 ) ;
2391: LD_VAR 0 2
2395: PPUSH
2396: LD_INT 3
2398: PPUSH
2399: LD_INT 100
2401: PPUSH
2402: CALL_OW 291
// veh := CreateVehicle ;
2406: LD_ADDR_VAR 0 2
2410: PUSH
2411: CALL_OW 45
2415: ST_TO_ADDR
// SetTag ( veh , 17 ) ;
2416: LD_VAR 0 2
2420: PPUSH
2421: LD_INT 17
2423: PPUSH
2424: CALL_OW 109
// SetDir ( veh , 4 ) ;
2428: LD_VAR 0 2
2432: PPUSH
2433: LD_INT 4
2435: PPUSH
2436: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2440: LD_VAR 0 2
2444: PPUSH
2445: LD_INT 4
2447: PPUSH
2448: LD_INT 0
2450: PPUSH
2451: CALL_OW 49
// AddCargo ( veh , mat_siberit , 20 ) ;
2455: LD_VAR 0 2
2459: PPUSH
2460: LD_INT 3
2462: PPUSH
2463: LD_INT 20
2465: PPUSH
2466: CALL_OW 291
// AddCargo ( veh , mat_cans , 80 ) ;
2470: LD_VAR 0 2
2474: PPUSH
2475: LD_INT 1
2477: PPUSH
2478: LD_INT 80
2480: PPUSH
2481: CALL_OW 291
// end ;
2485: LD_VAR 0 1
2489: RET
// export function PowellSupport2 ; var veh , un ; begin
2490: LD_INT 0
2492: PPUSH
2493: PPUSH
2494: PPUSH
// uc_side := 1 ;
2495: LD_ADDR_OWVAR 20
2499: PUSH
2500: LD_INT 1
2502: ST_TO_ADDR
// uc_nation := 1 ;
2503: LD_ADDR_OWVAR 21
2507: PUSH
2508: LD_INT 1
2510: ST_TO_ADDR
// vc_chassis := us_medium_wheeled ;
2511: LD_ADDR_OWVAR 37
2515: PUSH
2516: LD_INT 2
2518: ST_TO_ADDR
// vc_engine := engine_siberite ;
2519: LD_ADDR_OWVAR 39
2523: PUSH
2524: LD_INT 3
2526: ST_TO_ADDR
// vc_control := control_computer ;
2527: LD_ADDR_OWVAR 38
2531: PUSH
2532: LD_INT 3
2534: ST_TO_ADDR
// vc_weapon := us_light_gun ;
2535: LD_ADDR_OWVAR 40
2539: PUSH
2540: LD_INT 3
2542: ST_TO_ADDR
// veh := CreateVehicle ;
2543: LD_ADDR_VAR 0 2
2547: PUSH
2548: CALL_OW 45
2552: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2553: LD_VAR 0 2
2557: PPUSH
2558: LD_INT 4
2560: PPUSH
2561: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2565: LD_VAR 0 2
2569: PPUSH
2570: LD_INT 4
2572: PPUSH
2573: LD_INT 0
2575: PPUSH
2576: CALL_OW 49
// vc_control := control_manual ;
2580: LD_ADDR_OWVAR 38
2584: PUSH
2585: LD_INT 1
2587: ST_TO_ADDR
// vc_chassis := us_medium_wheeled ;
2588: LD_ADDR_OWVAR 37
2592: PUSH
2593: LD_INT 2
2595: ST_TO_ADDR
// vc_weapon := us_double_gun ;
2596: LD_ADDR_OWVAR 40
2600: PUSH
2601: LD_INT 5
2603: ST_TO_ADDR
// veh := CreateVehicle ;
2604: LD_ADDR_VAR 0 2
2608: PUSH
2609: CALL_OW 45
2613: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2614: LD_VAR 0 2
2618: PPUSH
2619: LD_INT 4
2621: PPUSH
2622: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2626: LD_VAR 0 2
2630: PPUSH
2631: LD_INT 4
2633: PPUSH
2634: LD_INT 0
2636: PPUSH
2637: CALL_OW 49
// if TestCharacters ( 11_Bobby ) then
2641: LD_STRING 11_Bobby
2643: PPUSH
2644: CALL_OW 28
2648: IFFALSE 2697
// begin Bobby := PrepareUnit ( Bobby , true , 11_ ) ;
2650: LD_ADDR_EXP 4
2654: PUSH
2655: LD_STRING Bobby
2657: PPUSH
2658: LD_INT 1
2660: PPUSH
2661: LD_STRING 11_
2663: PPUSH
2664: CALL 38231 0 3
2668: ST_TO_ADDR
// SetClass ( Bobby , 3 ) ;
2669: LD_EXP 4
2673: PPUSH
2674: LD_INT 3
2676: PPUSH
2677: CALL_OW 336
// PlaceHumanInUnit ( Bobby , veh ) ;
2681: LD_EXP 4
2685: PPUSH
2686: LD_VAR 0 2
2690: PPUSH
2691: CALL_OW 52
// end else
2695: GO 2715
// PrepareAmericansRandom ( 0 , veh , 2 , 0 ) ;
2697: LD_INT 0
2699: PPUSH
2700: LD_VAR 0 2
2704: PPUSH
2705: LD_INT 2
2707: PPUSH
2708: LD_INT 0
2710: PPUSH
2711: CALL 1378 0 4
// if TestCharacters ( 11_Houten ) then
2715: LD_STRING 11_Houten
2717: PPUSH
2718: CALL_OW 28
2722: IFFALSE 2772
// begin Houten := PrepareUnit ( Houten , true , 11_ ) ;
2724: LD_ADDR_EXP 9
2728: PUSH
2729: LD_STRING Houten
2731: PPUSH
2732: LD_INT 1
2734: PPUSH
2735: LD_STRING 11_
2737: PPUSH
2738: CALL 38231 0 3
2742: ST_TO_ADDR
// SetClass ( Houten , 1 ) ;
2743: LD_EXP 9
2747: PPUSH
2748: LD_INT 1
2750: PPUSH
2751: CALL_OW 336
// PlaceUnitArea ( Houten , PlayerSpawn , false ) ;
2755: LD_EXP 9
2759: PPUSH
2760: LD_INT 4
2762: PPUSH
2763: LD_INT 0
2765: PPUSH
2766: CALL_OW 49
// end else
2770: GO 2788
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2772: LD_INT 4
2774: PPUSH
2775: LD_INT 0
2777: PPUSH
2778: LD_INT 1
2780: PPUSH
2781: LD_INT 0
2783: PPUSH
2784: CALL 1378 0 4
// vc_control := control_computer ;
2788: LD_ADDR_OWVAR 38
2792: PUSH
2793: LD_INT 3
2795: ST_TO_ADDR
// vc_weapon := us_cargo_bay ;
2796: LD_ADDR_OWVAR 40
2800: PUSH
2801: LD_INT 12
2803: ST_TO_ADDR
// veh := CreateVehicle ;
2804: LD_ADDR_VAR 0 2
2808: PUSH
2809: CALL_OW 45
2813: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2814: LD_VAR 0 2
2818: PPUSH
2819: LD_INT 4
2821: PPUSH
2822: CALL_OW 233
// SetTag ( veh , 17 ) ;
2826: LD_VAR 0 2
2830: PPUSH
2831: LD_INT 17
2833: PPUSH
2834: CALL_OW 109
// AddCargo ( veh , mat_cans , 100 ) ;
2838: LD_VAR 0 2
2842: PPUSH
2843: LD_INT 1
2845: PPUSH
2846: LD_INT 100
2848: PPUSH
2849: CALL_OW 291
// veh := CreateVehicle ;
2853: LD_ADDR_VAR 0 2
2857: PUSH
2858: CALL_OW 45
2862: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2863: LD_VAR 0 2
2867: PPUSH
2868: LD_INT 4
2870: PPUSH
2871: CALL_OW 233
// SetTag ( veh , 17 ) ;
2875: LD_VAR 0 2
2879: PPUSH
2880: LD_INT 17
2882: PPUSH
2883: CALL_OW 109
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2887: LD_VAR 0 2
2891: PPUSH
2892: LD_INT 4
2894: PPUSH
2895: LD_INT 0
2897: PPUSH
2898: CALL_OW 49
// if kurtStatus then
2902: LD_EXP 19
2906: IFFALSE 2925
// AddCargo ( veh , mat_cans , 100 ) else
2908: LD_VAR 0 2
2912: PPUSH
2913: LD_INT 1
2915: PPUSH
2916: LD_INT 100
2918: PPUSH
2919: CALL_OW 291
2923: GO 2940
// AddCargo ( veh , mat_siberit , 60 ) ;
2925: LD_VAR 0 2
2929: PPUSH
2930: LD_INT 3
2932: PPUSH
2933: LD_INT 60
2935: PPUSH
2936: CALL_OW 291
// veh := CreateVehicle ;
2940: LD_ADDR_VAR 0 2
2944: PUSH
2945: CALL_OW 45
2949: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2950: LD_VAR 0 2
2954: PPUSH
2955: LD_INT 4
2957: PPUSH
2958: CALL_OW 233
// SetTag ( veh , 17 ) ;
2962: LD_VAR 0 2
2966: PPUSH
2967: LD_INT 17
2969: PPUSH
2970: CALL_OW 109
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2974: LD_VAR 0 2
2978: PPUSH
2979: LD_INT 4
2981: PPUSH
2982: LD_INT 0
2984: PPUSH
2985: CALL_OW 49
// if kurtStatus then
2989: LD_EXP 19
2993: IFFALSE 3012
// AddCargo ( veh , mat_siberit , 80 ) else
2995: LD_VAR 0 2
2999: PPUSH
3000: LD_INT 3
3002: PPUSH
3003: LD_INT 80
3005: PPUSH
3006: CALL_OW 291
3010: GO 3027
// AddCargo ( veh , mat_siberit , 100 ) ;
3012: LD_VAR 0 2
3016: PPUSH
3017: LD_INT 3
3019: PPUSH
3020: LD_INT 100
3022: PPUSH
3023: CALL_OW 291
// veh := CreateVehicle ;
3027: LD_ADDR_VAR 0 2
3031: PUSH
3032: CALL_OW 45
3036: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
3037: LD_VAR 0 2
3041: PPUSH
3042: LD_INT 4
3044: PPUSH
3045: CALL_OW 233
// SetTag ( veh , 17 ) ;
3049: LD_VAR 0 2
3053: PPUSH
3054: LD_INT 17
3056: PPUSH
3057: CALL_OW 109
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
3061: LD_VAR 0 2
3065: PPUSH
3066: LD_INT 4
3068: PPUSH
3069: LD_INT 0
3071: PPUSH
3072: CALL_OW 49
// AddCargo ( veh , mat_oil , 60 ) ;
3076: LD_VAR 0 2
3080: PPUSH
3081: LD_INT 2
3083: PPUSH
3084: LD_INT 60
3086: PPUSH
3087: CALL_OW 291
// AddCargo ( veh , mat_cans , 40 ) ;
3091: LD_VAR 0 2
3095: PPUSH
3096: LD_INT 1
3098: PPUSH
3099: LD_INT 40
3101: PPUSH
3102: CALL_OW 291
// end ;
3106: LD_VAR 0 1
3110: RET
// export function PowellSupport3 ; var i , cargo ; begin
3111: LD_INT 0
3113: PPUSH
3114: PPUSH
3115: PPUSH
// uc_side := 1 ;
3116: LD_ADDR_OWVAR 20
3120: PUSH
3121: LD_INT 1
3123: ST_TO_ADDR
// uc_nation := 1 ;
3124: LD_ADDR_OWVAR 21
3128: PUSH
3129: LD_INT 1
3131: ST_TO_ADDR
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
3132: LD_INT 4
3134: PPUSH
3135: LD_INT 0
3137: PPUSH
3138: LD_INT 1
3140: PPUSH
3141: LD_INT 0
3143: PPUSH
3144: CALL 1378 0 4
// for i := 1 to 2 do
3148: LD_ADDR_VAR 0 2
3152: PUSH
3153: DOUBLE
3154: LD_INT 1
3156: DEC
3157: ST_TO_ADDR
3158: LD_INT 2
3160: PUSH
3161: FOR_TO
3162: IFFALSE 3262
// begin vc_chassis := us_medium_wheeled ;
3164: LD_ADDR_OWVAR 37
3168: PUSH
3169: LD_INT 2
3171: ST_TO_ADDR
// vc_engine := engine_siberite ;
3172: LD_ADDR_OWVAR 39
3176: PUSH
3177: LD_INT 3
3179: ST_TO_ADDR
// vc_control = control_computer ;
3180: LD_ADDR_OWVAR 38
3184: PUSH
3185: LD_INT 3
3187: ST_TO_ADDR
// vc_weapon := us_cargo_bay ;
3188: LD_ADDR_OWVAR 40
3192: PUSH
3193: LD_INT 12
3195: ST_TO_ADDR
// cargo := CreateVehicle ;
3196: LD_ADDR_VAR 0 3
3200: PUSH
3201: CALL_OW 45
3205: ST_TO_ADDR
// SetDir ( cargo , 4 ) ;
3206: LD_VAR 0 3
3210: PPUSH
3211: LD_INT 4
3213: PPUSH
3214: CALL_OW 233
// SetTag ( cargo , 17 ) ;
3218: LD_VAR 0 3
3222: PPUSH
3223: LD_INT 17
3225: PPUSH
3226: CALL_OW 109
// PlaceUnitArea ( cargo , PlayerSpawn , false ) ;
3230: LD_VAR 0 3
3234: PPUSH
3235: LD_INT 4
3237: PPUSH
3238: LD_INT 0
3240: PPUSH
3241: CALL_OW 49
// AddCargo ( cargo , mat_cans , 100 ) ;
3245: LD_VAR 0 3
3249: PPUSH
3250: LD_INT 1
3252: PPUSH
3253: LD_INT 100
3255: PPUSH
3256: CALL_OW 291
// end ;
3260: GO 3161
3262: POP
3263: POP
// end ; end_of_file
3264: LD_VAR 0 1
3268: RET
// export function PrepareRussianCommander ; begin
3269: LD_INT 0
3271: PPUSH
// uc_side = 3 ;
3272: LD_ADDR_OWVAR 20
3276: PUSH
3277: LD_INT 3
3279: ST_TO_ADDR
// Davidov = PrepareUnit ( Davidov , false ,  ) ;
3280: LD_ADDR_EXP 16
3284: PUSH
3285: LD_STRING Davidov
3287: PPUSH
3288: LD_INT 0
3290: PPUSH
3291: LD_STRING 
3293: PPUSH
3294: CALL 38231 0 3
3298: ST_TO_ADDR
// PlaceHumanInUnit ( Davidov , ruheadlab ) ;
3299: LD_EXP 16
3303: PPUSH
3304: LD_INT 3
3306: PPUSH
3307: CALL_OW 52
// RuScientists = RuScientists ^ Davidov ;
3311: LD_ADDR_EXP 27
3315: PUSH
3316: LD_EXP 27
3320: PUSH
3321: LD_EXP 16
3325: ADD
3326: ST_TO_ADDR
// SetClass ( RuScientists , 4 ) ;
3327: LD_EXP 27
3331: PPUSH
3332: LD_INT 4
3334: PPUSH
3335: CALL_OW 336
// end ;
3339: LD_VAR 0 1
3343: RET
// export function PrepareEastBase ; var i , un ; begin
3344: LD_INT 0
3346: PPUSH
3347: PPUSH
3348: PPUSH
// RespawnInside ( 3 , 3 , rubar2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 1 , 3 ) ;
3349: LD_INT 3
3351: PPUSH
3352: LD_INT 3
3354: PPUSH
3355: LD_INT 121
3357: PPUSH
3358: LD_EXP 29
3362: PPUSH
3363: LD_EXP 30
3367: PPUSH
3368: CALL_OW 12
3372: PPUSH
3373: LD_INT 1
3375: PPUSH
3376: LD_INT 3
3378: PPUSH
3379: CALL 12603 0 6
// RespawnInside ( 3 , 3 , rubar2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 9 , 3 ) ;
3383: LD_INT 3
3385: PPUSH
3386: LD_INT 3
3388: PPUSH
3389: LD_INT 121
3391: PPUSH
3392: LD_EXP 29
3396: PPUSH
3397: LD_EXP 30
3401: PPUSH
3402: CALL_OW 12
3406: PPUSH
3407: LD_INT 9
3409: PPUSH
3410: LD_INT 3
3412: PPUSH
3413: CALL 12603 0 6
// RespawnInside ( 3 , 3 , rueastdepot , rand ( RuSolMinlevel , RuSolMaxLevel ) , 2 , 6 ) ;
3417: LD_INT 3
3419: PPUSH
3420: LD_INT 3
3422: PPUSH
3423: LD_INT 4
3425: PPUSH
3426: LD_EXP 29
3430: PPUSH
3431: LD_EXP 30
3435: PPUSH
3436: CALL_OW 12
3440: PPUSH
3441: LD_INT 2
3443: PPUSH
3444: LD_INT 6
3446: PPUSH
3447: CALL 12603 0 6
// RespawnInside ( 3 , 3 , rufab2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 3 , 6 ) ;
3451: LD_INT 3
3453: PPUSH
3454: LD_INT 3
3456: PPUSH
3457: LD_INT 112
3459: PPUSH
3460: LD_EXP 29
3464: PPUSH
3465: LD_EXP 30
3469: PPUSH
3470: CALL_OW 12
3474: PPUSH
3475: LD_INT 3
3477: PPUSH
3478: LD_INT 6
3480: PPUSH
3481: CALL 12603 0 6
// RespawnInside ( 3 , 3 , rulab2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3485: LD_INT 3
3487: PPUSH
3488: LD_INT 3
3490: PPUSH
3491: LD_INT 47
3493: PPUSH
3494: LD_EXP 29
3498: PPUSH
3499: LD_EXP 30
3503: PPUSH
3504: CALL_OW 12
3508: PPUSH
3509: LD_INT 4
3511: PPUSH
3512: LD_INT 6
3514: PPUSH
3515: CALL 12603 0 6
// RespawnInside ( 3 , 3 , rulab3 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3519: LD_INT 3
3521: PPUSH
3522: LD_INT 3
3524: PPUSH
3525: LD_INT 129
3527: PPUSH
3528: LD_EXP 29
3532: PPUSH
3533: LD_EXP 30
3537: PPUSH
3538: CALL_OW 12
3542: PPUSH
3543: LD_INT 4
3545: PPUSH
3546: LD_INT 6
3548: PPUSH
3549: CALL 12603 0 6
// RespawnInside ( 3 , 3 , rulab4 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3553: LD_INT 3
3555: PPUSH
3556: LD_INT 3
3558: PPUSH
3559: LD_INT 135
3561: PPUSH
3562: LD_EXP 29
3566: PPUSH
3567: LD_EXP 30
3571: PPUSH
3572: CALL_OW 12
3576: PPUSH
3577: LD_INT 4
3579: PPUSH
3580: LD_INT 6
3582: PPUSH
3583: CALL 12603 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
3587: LD_ADDR_VAR 0 2
3591: PUSH
3592: LD_INT 22
3594: PUSH
3595: LD_INT 3
3597: PUSH
3598: EMPTY
3599: LIST
3600: LIST
3601: PUSH
3602: LD_INT 30
3604: PUSH
3605: LD_INT 32
3607: PUSH
3608: EMPTY
3609: LIST
3610: LIST
3611: PUSH
3612: EMPTY
3613: LIST
3614: LIST
3615: PPUSH
3616: CALL_OW 69
3620: PUSH
3621: FOR_IN
3622: IFFALSE 3662
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinlevel , RuSolMaxLevel ) , 1 , 1 ) ;
3624: LD_INT 3
3626: PPUSH
3627: LD_INT 3
3629: PPUSH
3630: LD_VAR 0 2
3634: PPUSH
3635: LD_EXP 29
3639: PPUSH
3640: LD_EXP 30
3644: PPUSH
3645: CALL_OW 12
3649: PPUSH
3650: LD_INT 1
3652: PPUSH
3653: LD_INT 1
3655: PPUSH
3656: CALL 12603 0 6
3660: GO 3621
3662: POP
3663: POP
// for i = 1 to 5 do
3664: LD_ADDR_VAR 0 2
3668: PUSH
3669: DOUBLE
3670: LD_INT 1
3672: DEC
3673: ST_TO_ADDR
3674: LD_INT 5
3676: PUSH
3677: FOR_TO
3678: IFFALSE 3777
// begin uc_side = 3 ;
3680: LD_ADDR_OWVAR 20
3684: PUSH
3685: LD_INT 3
3687: ST_TO_ADDR
// uc_nation = 3 ;
3688: LD_ADDR_OWVAR 21
3692: PUSH
3693: LD_INT 3
3695: ST_TO_ADDR
// hc_gallery =  ;
3696: LD_ADDR_OWVAR 33
3700: PUSH
3701: LD_STRING 
3703: ST_TO_ADDR
// hc_name =  ;
3704: LD_ADDR_OWVAR 26
3708: PUSH
3709: LD_STRING 
3711: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3712: LD_INT 0
3714: PPUSH
3715: LD_INT 4
3717: PPUSH
3718: LD_EXP 29
3722: PPUSH
3723: LD_EXP 30
3727: PPUSH
3728: CALL_OW 12
3732: PPUSH
3733: CALL_OW 380
// un = CreateHuman ;
3737: LD_ADDR_VAR 0 3
3741: PUSH
3742: CALL_OW 44
3746: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruheadlab ) ;
3747: LD_VAR 0 3
3751: PPUSH
3752: LD_INT 3
3754: PPUSH
3755: CALL_OW 52
// RuScientists = RuScientists ^ un ;
3759: LD_ADDR_EXP 27
3763: PUSH
3764: LD_EXP 27
3768: PUSH
3769: LD_VAR 0 3
3773: ADD
3774: ST_TO_ADDR
// end ;
3775: GO 3677
3777: POP
3778: POP
// end ;
3779: LD_VAR 0 1
3783: RET
// export function PrepareWestBase ; var i , un ; begin
3784: LD_INT 0
3786: PPUSH
3787: PPUSH
3788: PPUSH
// TeleportExit ( ruteleprt , 122 , 145 ) ;
3789: LD_INT 10
3791: PPUSH
3792: LD_INT 122
3794: PPUSH
3795: LD_INT 145
3797: PPUSH
3798: CALL_OW 243
// TeleportExit ( rutp , 84 , 61 ) ;
3802: LD_INT 137
3804: PPUSH
3805: LD_INT 84
3807: PPUSH
3808: LD_INT 61
3810: PPUSH
3811: CALL_OW 243
// RespawnInside ( 3 , 3 , ruwestdepot , rand ( RuSolMinlevel , RuSolMaxLevel ) , 2 , 3 ) ;
3815: LD_INT 3
3817: PPUSH
3818: LD_INT 3
3820: PPUSH
3821: LD_INT 6
3823: PPUSH
3824: LD_EXP 29
3828: PPUSH
3829: LD_EXP 30
3833: PPUSH
3834: CALL_OW 12
3838: PPUSH
3839: LD_INT 2
3841: PPUSH
3842: LD_INT 3
3844: PPUSH
3845: CALL 12603 0 6
// RespawnInside ( 3 , 3 , rulab1 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 3 ) ;
3849: LD_INT 3
3851: PPUSH
3852: LD_INT 3
3854: PPUSH
3855: LD_INT 91
3857: PPUSH
3858: LD_EXP 29
3862: PPUSH
3863: LD_EXP 30
3867: PPUSH
3868: CALL_OW 12
3872: PPUSH
3873: LD_INT 4
3875: PPUSH
3876: LD_INT 3
3878: PPUSH
3879: CALL 12603 0 6
// RespawnInside ( 3 , 3 , ru_fact , rand ( RuSolMinlevel , RuSolMaxLevel ) , 3 , 6 ) ;
3883: LD_INT 3
3885: PPUSH
3886: LD_INT 3
3888: PPUSH
3889: LD_INT 21
3891: PPUSH
3892: LD_EXP 29
3896: PPUSH
3897: LD_EXP 30
3901: PPUSH
3902: CALL_OW 12
3906: PPUSH
3907: LD_INT 3
3909: PPUSH
3910: LD_INT 6
3912: PPUSH
3913: CALL 12603 0 6
// end ;
3917: LD_VAR 0 1
3921: RET
// export function PrepareOtherRussians ; var i , un , veh ; begin
3922: LD_INT 0
3924: PPUSH
3925: PPUSH
3926: PPUSH
3927: PPUSH
// uc_side = 3 ;
3928: LD_ADDR_OWVAR 20
3932: PUSH
3933: LD_INT 3
3935: ST_TO_ADDR
// uc_nation = 3 ;
3936: LD_ADDR_OWVAR 21
3940: PUSH
3941: LD_INT 3
3943: ST_TO_ADDR
// for i = 1 to 5 do
3944: LD_ADDR_VAR 0 2
3948: PUSH
3949: DOUBLE
3950: LD_INT 1
3952: DEC
3953: ST_TO_ADDR
3954: LD_INT 5
3956: PUSH
3957: FOR_TO
3958: IFFALSE 4028
// begin hc_gallery =  ;
3960: LD_ADDR_OWVAR 33
3964: PUSH
3965: LD_STRING 
3967: ST_TO_ADDR
// hc_name =  ;
3968: LD_ADDR_OWVAR 26
3972: PUSH
3973: LD_STRING 
3975: ST_TO_ADDR
// PrepareHuman ( false , 9 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3976: LD_INT 0
3978: PPUSH
3979: LD_INT 9
3981: PPUSH
3982: LD_EXP 29
3986: PPUSH
3987: LD_EXP 30
3991: PPUSH
3992: CALL_OW 12
3996: PPUSH
3997: CALL_OW 380
// un = CreateHuman ;
4001: LD_ADDR_VAR 0 3
4005: PUSH
4006: CALL_OW 44
4010: ST_TO_ADDR
// PlaceUnitArea ( un , RussianBazookersSpawn , false ) ;
4011: LD_VAR 0 3
4015: PPUSH
4016: LD_INT 8
4018: PPUSH
4019: LD_INT 0
4021: PPUSH
4022: CALL_OW 49
// end ;
4026: GO 3957
4028: POP
4029: POP
// for i = 1 to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
4030: LD_ADDR_VAR 0 2
4034: PUSH
4035: DOUBLE
4036: LD_INT 1
4038: DEC
4039: ST_TO_ADDR
4040: LD_INT 2
4042: PUSH
4043: LD_INT 3
4045: PUSH
4046: LD_INT 4
4048: PUSH
4049: LD_INT 4
4051: PUSH
4052: EMPTY
4053: LIST
4054: LIST
4055: LIST
4056: LIST
4057: PUSH
4058: LD_OWVAR 67
4062: ARRAY
4063: PUSH
4064: FOR_TO
4065: IFFALSE 4135
// begin hc_gallery =  ;
4067: LD_ADDR_OWVAR 33
4071: PUSH
4072: LD_STRING 
4074: ST_TO_ADDR
// hc_name =  ;
4075: LD_ADDR_OWVAR 26
4079: PUSH
4080: LD_STRING 
4082: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
4083: LD_INT 0
4085: PPUSH
4086: LD_INT 4
4088: PPUSH
4089: LD_EXP 29
4093: PPUSH
4094: LD_EXP 30
4098: PPUSH
4099: CALL_OW 12
4103: PPUSH
4104: CALL_OW 380
// un = CreateHuman ;
4108: LD_ADDR_VAR 0 3
4112: PUSH
4113: CALL_OW 44
4117: ST_TO_ADDR
// PlaceUnitArea ( un , RussianBazookersSpawn , false ) ;
4118: LD_VAR 0 3
4122: PPUSH
4123: LD_INT 8
4125: PPUSH
4126: LD_INT 0
4128: PPUSH
4129: CALL_OW 49
// end ;
4133: GO 4064
4135: POP
4136: POP
// for i := 1 to [ 3 , 4 , 5 , 5 ] [ Difficulty ] do
4137: LD_ADDR_VAR 0 2
4141: PUSH
4142: DOUBLE
4143: LD_INT 1
4145: DEC
4146: ST_TO_ADDR
4147: LD_INT 3
4149: PUSH
4150: LD_INT 4
4152: PUSH
4153: LD_INT 5
4155: PUSH
4156: LD_INT 5
4158: PUSH
4159: EMPTY
4160: LIST
4161: LIST
4162: LIST
4163: LIST
4164: PUSH
4165: LD_OWVAR 67
4169: ARRAY
4170: PUSH
4171: FOR_TO
4172: IFFALSE 4368
// begin vc_engine = 3 ;
4174: LD_ADDR_OWVAR 39
4178: PUSH
4179: LD_INT 3
4181: ST_TO_ADDR
// vc_control = 1 ;
4182: LD_ADDR_OWVAR 38
4186: PUSH
4187: LD_INT 1
4189: ST_TO_ADDR
// vc_weapon = [ 42 , 43 , 44 , 45 , 46 ] [ Rand ( 1 , 5 ) ] ;
4190: LD_ADDR_OWVAR 40
4194: PUSH
4195: LD_INT 42
4197: PUSH
4198: LD_INT 43
4200: PUSH
4201: LD_INT 44
4203: PUSH
4204: LD_INT 45
4206: PUSH
4207: LD_INT 46
4209: PUSH
4210: EMPTY
4211: LIST
4212: LIST
4213: LIST
4214: LIST
4215: LIST
4216: PUSH
4217: LD_INT 1
4219: PPUSH
4220: LD_INT 5
4222: PPUSH
4223: CALL_OW 12
4227: ARRAY
4228: ST_TO_ADDR
// if vc_weapon = ru_heavy_gun then
4229: LD_OWVAR 40
4233: PUSH
4234: LD_INT 46
4236: EQUAL
4237: IFFALSE 4249
// vc_chassis = ru_heavy_tracked else
4239: LD_ADDR_OWVAR 37
4243: PUSH
4244: LD_INT 24
4246: ST_TO_ADDR
4247: GO 4276
// vc_chassis = [ ru_medium_tracked , ru_medium_wheeled ] [ Rand ( 1 , 2 ) ] ;
4249: LD_ADDR_OWVAR 37
4253: PUSH
4254: LD_INT 22
4256: PUSH
4257: LD_INT 21
4259: PUSH
4260: EMPTY
4261: LIST
4262: LIST
4263: PUSH
4264: LD_INT 1
4266: PPUSH
4267: LD_INT 2
4269: PPUSH
4270: CALL_OW 12
4274: ARRAY
4275: ST_TO_ADDR
// veh = CreateVehicle ;
4276: LD_ADDR_VAR 0 4
4280: PUSH
4281: CALL_OW 45
4285: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4286: LD_VAR 0 4
4290: PPUSH
4291: LD_INT 3
4293: PPUSH
4294: CALL_OW 233
// PlaceUnitArea ( veh , RussianTanksWestHill , false ) ;
4298: LD_VAR 0 4
4302: PPUSH
4303: LD_INT 5
4305: PPUSH
4306: LD_INT 0
4308: PPUSH
4309: CALL_OW 49
// hc_gallery =  ;
4313: LD_ADDR_OWVAR 33
4317: PUSH
4318: LD_STRING 
4320: ST_TO_ADDR
// hc_name =  ;
4321: LD_ADDR_OWVAR 26
4325: PUSH
4326: LD_STRING 
4328: ST_TO_ADDR
// PrepareHuman ( false , 3 , 10 ) ;
4329: LD_INT 0
4331: PPUSH
4332: LD_INT 3
4334: PPUSH
4335: LD_INT 10
4337: PPUSH
4338: CALL_OW 380
// un = CreateHuman ;
4342: LD_ADDR_VAR 0 3
4346: PUSH
4347: CALL_OW 44
4351: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4352: LD_VAR 0 3
4356: PPUSH
4357: LD_VAR 0 4
4361: PPUSH
4362: CALL_OW 52
// end ;
4366: GO 4171
4368: POP
4369: POP
// for i := 1 to [ 3 , 4 , 5 , 5 ] [ Difficulty ] do
4370: LD_ADDR_VAR 0 2
4374: PUSH
4375: DOUBLE
4376: LD_INT 1
4378: DEC
4379: ST_TO_ADDR
4380: LD_INT 3
4382: PUSH
4383: LD_INT 4
4385: PUSH
4386: LD_INT 5
4388: PUSH
4389: LD_INT 5
4391: PUSH
4392: EMPTY
4393: LIST
4394: LIST
4395: LIST
4396: LIST
4397: PUSH
4398: LD_OWVAR 67
4402: ARRAY
4403: PUSH
4404: FOR_TO
4405: IFFALSE 4552
// begin vc_engine = 3 ;
4407: LD_ADDR_OWVAR 39
4411: PUSH
4412: LD_INT 3
4414: ST_TO_ADDR
// vc_control = 3 ;
4415: LD_ADDR_OWVAR 38
4419: PUSH
4420: LD_INT 3
4422: ST_TO_ADDR
// vc_weapon = [ 42 , 43 , 44 , 45 , 46 , 49 ] [ Rand ( 1 , 5 ) ] ;
4423: LD_ADDR_OWVAR 40
4427: PUSH
4428: LD_INT 42
4430: PUSH
4431: LD_INT 43
4433: PUSH
4434: LD_INT 44
4436: PUSH
4437: LD_INT 45
4439: PUSH
4440: LD_INT 46
4442: PUSH
4443: LD_INT 49
4445: PUSH
4446: EMPTY
4447: LIST
4448: LIST
4449: LIST
4450: LIST
4451: LIST
4452: LIST
4453: PUSH
4454: LD_INT 1
4456: PPUSH
4457: LD_INT 5
4459: PPUSH
4460: CALL_OW 12
4464: ARRAY
4465: ST_TO_ADDR
// if vc_weapon = ru_heavy_gun then
4466: LD_OWVAR 40
4470: PUSH
4471: LD_INT 46
4473: EQUAL
4474: IFFALSE 4486
// vc_chassis = ru_heavy_tracked else
4476: LD_ADDR_OWVAR 37
4480: PUSH
4481: LD_INT 24
4483: ST_TO_ADDR
4484: GO 4513
// vc_chassis = [ ru_medium_tracked , ru_medium_wheeled ] [ Rand ( 1 , 2 ) ] ;
4486: LD_ADDR_OWVAR 37
4490: PUSH
4491: LD_INT 22
4493: PUSH
4494: LD_INT 21
4496: PUSH
4497: EMPTY
4498: LIST
4499: LIST
4500: PUSH
4501: LD_INT 1
4503: PPUSH
4504: LD_INT 2
4506: PPUSH
4507: CALL_OW 12
4511: ARRAY
4512: ST_TO_ADDR
// veh = CreateVehicle ;
4513: LD_ADDR_VAR 0 4
4517: PUSH
4518: CALL_OW 45
4522: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4523: LD_VAR 0 4
4527: PPUSH
4528: LD_INT 3
4530: PPUSH
4531: CALL_OW 233
// PlaceUnitArea ( veh , RussianTanksEastHill , false ) ;
4535: LD_VAR 0 4
4539: PPUSH
4540: LD_INT 6
4542: PPUSH
4543: LD_INT 0
4545: PPUSH
4546: CALL_OW 49
// end ;
4550: GO 4404
4552: POP
4553: POP
// end ; end_of_file
4554: LD_VAR 0 1
4558: RET
// export function PrepareKurt ; begin
4559: LD_INT 0
4561: PPUSH
// uc_side = 8 ;
4562: LD_ADDR_OWVAR 20
4566: PUSH
4567: LD_INT 8
4569: ST_TO_ADDR
// uc_nation = 2 ;
4570: LD_ADDR_OWVAR 21
4574: PUSH
4575: LD_INT 2
4577: ST_TO_ADDR
// vc_chassis = ar_medium_trike ;
4578: LD_ADDR_OWVAR 37
4582: PUSH
4583: LD_INT 13
4585: ST_TO_ADDR
// vc_engine = 1 ;
4586: LD_ADDR_OWVAR 39
4590: PUSH
4591: LD_INT 1
4593: ST_TO_ADDR
// vc_control = 1 ;
4594: LD_ADDR_OWVAR 38
4598: PUSH
4599: LD_INT 1
4601: ST_TO_ADDR
// vc_weapon = 24 ;
4602: LD_ADDR_OWVAR 40
4606: PUSH
4607: LD_INT 24
4609: ST_TO_ADDR
// KurtVeh = CreateVehicle ;
4610: LD_ADDR_EXP 18
4614: PUSH
4615: CALL_OW 45
4619: ST_TO_ADDR
// if kurtStatus > 0 then
4620: LD_EXP 19
4624: PUSH
4625: LD_INT 0
4627: GREATER
4628: IFFALSE 4680
// begin Kurt = PrepareUnit ( Kurt , false ,  ) ;
4630: LD_ADDR_EXP 17
4634: PUSH
4635: LD_STRING Kurt
4637: PPUSH
4638: LD_INT 0
4640: PPUSH
4641: LD_STRING 
4643: PPUSH
4644: CALL 38231 0 3
4648: ST_TO_ADDR
// PlaceUnitArea ( KurtVeh , PlayerSpawn , false ) ;
4649: LD_EXP 18
4653: PPUSH
4654: LD_INT 4
4656: PPUSH
4657: LD_INT 0
4659: PPUSH
4660: CALL_OW 49
// PlaceHumanInUnit ( Kurt , KurtVeh ) ;
4664: LD_EXP 17
4668: PPUSH
4669: LD_EXP 18
4673: PPUSH
4674: CALL_OW 52
// end else
4678: GO 4757
// begin hc_name =  ;
4680: LD_ADDR_OWVAR 26
4684: PUSH
4685: LD_STRING 
4687: ST_TO_ADDR
// hc_gallery =  ;
4688: LD_ADDR_OWVAR 33
4692: PUSH
4693: LD_STRING 
4695: ST_TO_ADDR
// PrepareSoldier ( sex_male , 10 ) ;
4696: LD_INT 1
4698: PPUSH
4699: LD_INT 10
4701: PPUSH
4702: CALL_OW 381
// Kurt = CreateHuman ;
4706: LD_ADDR_EXP 17
4710: PUSH
4711: CALL_OW 44
4715: ST_TO_ADDR
// PlaceUnitArea ( KurtVeh , PlayerSpawn , false ) ;
4716: LD_EXP 18
4720: PPUSH
4721: LD_INT 4
4723: PPUSH
4724: LD_INT 0
4726: PPUSH
4727: CALL_OW 49
// PlaceHumanInUnit ( Kurt , KurtVeh ) ;
4731: LD_EXP 17
4735: PPUSH
4736: LD_EXP 18
4740: PPUSH
4741: CALL_OW 52
// SaveCharacters ( Kurt , AltKurt ) ;
4745: LD_EXP 17
4749: PPUSH
4750: LD_STRING AltKurt
4752: PPUSH
4753: CALL_OW 38
// end ; end ;
4757: LD_VAR 0 1
4761: RET
// export function PrepareLegionForPlayer ; var i , un , veh ; begin
4762: LD_INT 0
4764: PPUSH
4765: PPUSH
4766: PPUSH
4767: PPUSH
// for i = 1 to 3 do
4768: LD_ADDR_VAR 0 2
4772: PUSH
4773: DOUBLE
4774: LD_INT 1
4776: DEC
4777: ST_TO_ADDR
4778: LD_INT 3
4780: PUSH
4781: FOR_TO
4782: IFFALSE 4903
// begin uc_side = 1 ;
4784: LD_ADDR_OWVAR 20
4788: PUSH
4789: LD_INT 1
4791: ST_TO_ADDR
// uc_nation = 2 ;
4792: LD_ADDR_OWVAR 21
4796: PUSH
4797: LD_INT 2
4799: ST_TO_ADDR
// hc_gallery =  ;
4800: LD_ADDR_OWVAR 33
4804: PUSH
4805: LD_STRING 
4807: ST_TO_ADDR
// hc_name =  ;
4808: LD_ADDR_OWVAR 26
4812: PUSH
4813: LD_STRING 
4815: ST_TO_ADDR
// if kurtStatus = 0 or kurtStatus = 2 then
4816: LD_EXP 19
4820: PUSH
4821: LD_INT 0
4823: EQUAL
4824: PUSH
4825: LD_EXP 19
4829: PUSH
4830: LD_INT 2
4832: EQUAL
4833: OR
4834: IFFALSE 4851
// PrepareHuman ( false , 1 , 6 ) else
4836: LD_INT 0
4838: PPUSH
4839: LD_INT 1
4841: PPUSH
4842: LD_INT 6
4844: PPUSH
4845: CALL_OW 380
4849: GO 4864
// PrepareHuman ( false , 1 , 8 ) ;
4851: LD_INT 0
4853: PPUSH
4854: LD_INT 1
4856: PPUSH
4857: LD_INT 8
4859: PPUSH
4860: CALL_OW 380
// un = CreateHuman ;
4864: LD_ADDR_VAR 0 3
4868: PUSH
4869: CALL_OW 44
4873: ST_TO_ADDR
// SetDir ( un , 4 ) ;
4874: LD_VAR 0 3
4878: PPUSH
4879: LD_INT 4
4881: PPUSH
4882: CALL_OW 233
// PlaceUnitArea ( un , PlayerSpawn , false ) ;
4886: LD_VAR 0 3
4890: PPUSH
4891: LD_INT 4
4893: PPUSH
4894: LD_INT 0
4896: PPUSH
4897: CALL_OW 49
// end ;
4901: GO 4781
4903: POP
4904: POP
// vc_chassis = 14 ;
4905: LD_ADDR_OWVAR 37
4909: PUSH
4910: LD_INT 14
4912: ST_TO_ADDR
// vc_engine = 3 ;
4913: LD_ADDR_OWVAR 39
4917: PUSH
4918: LD_INT 3
4920: ST_TO_ADDR
// vc_control = 1 ;
4921: LD_ADDR_OWVAR 38
4925: PUSH
4926: LD_INT 1
4928: ST_TO_ADDR
// vc_weapon = [ 27 , 26 , 28 ] [ Rand ( 1 , 3 ) ] ;
4929: LD_ADDR_OWVAR 40
4933: PUSH
4934: LD_INT 27
4936: PUSH
4937: LD_INT 26
4939: PUSH
4940: LD_INT 28
4942: PUSH
4943: EMPTY
4944: LIST
4945: LIST
4946: LIST
4947: PUSH
4948: LD_INT 1
4950: PPUSH
4951: LD_INT 3
4953: PPUSH
4954: CALL_OW 12
4958: ARRAY
4959: ST_TO_ADDR
// veh = CreateVehicle ;
4960: LD_ADDR_VAR 0 4
4964: PUSH
4965: CALL_OW 45
4969: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
4970: LD_VAR 0 4
4974: PPUSH
4975: LD_INT 4
4977: PPUSH
4978: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
4982: LD_VAR 0 4
4986: PPUSH
4987: LD_INT 4
4989: PPUSH
4990: LD_INT 0
4992: PPUSH
4993: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
4997: LD_EXP 19
5001: PUSH
5002: LD_INT 0
5004: EQUAL
5005: PUSH
5006: LD_EXP 19
5010: PUSH
5011: LD_INT 2
5013: EQUAL
5014: OR
5015: IFFALSE 5032
// PrepareHuman ( false , 3 , 6 ) else
5017: LD_INT 0
5019: PPUSH
5020: LD_INT 3
5022: PPUSH
5023: LD_INT 6
5025: PPUSH
5026: CALL_OW 380
5030: GO 5045
// PrepareHuman ( false , 3 , 8 ) ;
5032: LD_INT 0
5034: PPUSH
5035: LD_INT 3
5037: PPUSH
5038: LD_INT 8
5040: PPUSH
5041: CALL_OW 380
// un = CreateHuman ;
5045: LD_ADDR_VAR 0 3
5049: PUSH
5050: CALL_OW 44
5054: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
5055: LD_VAR 0 3
5059: PPUSH
5060: LD_VAR 0 4
5064: PPUSH
5065: CALL_OW 52
// vc_chassis = 14 ;
5069: LD_ADDR_OWVAR 37
5073: PUSH
5074: LD_INT 14
5076: ST_TO_ADDR
// vc_engine = 3 ;
5077: LD_ADDR_OWVAR 39
5081: PUSH
5082: LD_INT 3
5084: ST_TO_ADDR
// vc_control = 1 ;
5085: LD_ADDR_OWVAR 38
5089: PUSH
5090: LD_INT 1
5092: ST_TO_ADDR
// vc_weapon = [ 27 , 26 , 28 ] [ Rand ( 1 , 3 ) ] ;
5093: LD_ADDR_OWVAR 40
5097: PUSH
5098: LD_INT 27
5100: PUSH
5101: LD_INT 26
5103: PUSH
5104: LD_INT 28
5106: PUSH
5107: EMPTY
5108: LIST
5109: LIST
5110: LIST
5111: PUSH
5112: LD_INT 1
5114: PPUSH
5115: LD_INT 3
5117: PPUSH
5118: CALL_OW 12
5122: ARRAY
5123: ST_TO_ADDR
// veh = CreateVehicle ;
5124: LD_ADDR_VAR 0 4
5128: PUSH
5129: CALL_OW 45
5133: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5134: LD_VAR 0 4
5138: PPUSH
5139: LD_INT 4
5141: PPUSH
5142: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
5146: LD_VAR 0 4
5150: PPUSH
5151: LD_INT 4
5153: PPUSH
5154: LD_INT 0
5156: PPUSH
5157: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
5161: LD_EXP 19
5165: PUSH
5166: LD_INT 0
5168: EQUAL
5169: PUSH
5170: LD_EXP 19
5174: PUSH
5175: LD_INT 2
5177: EQUAL
5178: OR
5179: IFFALSE 5196
// PrepareHuman ( false , 4 , 6 ) else
5181: LD_INT 0
5183: PPUSH
5184: LD_INT 4
5186: PPUSH
5187: LD_INT 6
5189: PPUSH
5190: CALL_OW 380
5194: GO 5209
// PrepareHuman ( false , 4 , 8 ) ;
5196: LD_INT 0
5198: PPUSH
5199: LD_INT 4
5201: PPUSH
5202: LD_INT 8
5204: PPUSH
5205: CALL_OW 380
// un = CreateHuman ;
5209: LD_ADDR_VAR 0 3
5213: PUSH
5214: CALL_OW 44
5218: ST_TO_ADDR
// SetDir ( un , 4 ) ;
5219: LD_VAR 0 3
5223: PPUSH
5224: LD_INT 4
5226: PPUSH
5227: CALL_OW 233
// PlaceHumanInUnit ( un , veh ) ;
5231: LD_VAR 0 3
5235: PPUSH
5236: LD_VAR 0 4
5240: PPUSH
5241: CALL_OW 52
// vc_chassis = 14 ;
5245: LD_ADDR_OWVAR 37
5249: PUSH
5250: LD_INT 14
5252: ST_TO_ADDR
// vc_engine = 3 ;
5253: LD_ADDR_OWVAR 39
5257: PUSH
5258: LD_INT 3
5260: ST_TO_ADDR
// vc_control = 1 ;
5261: LD_ADDR_OWVAR 38
5265: PUSH
5266: LD_INT 1
5268: ST_TO_ADDR
// vc_weapon = [ 27 , 26 , 28 ] [ Rand ( 1 , 3 ) ] ;
5269: LD_ADDR_OWVAR 40
5273: PUSH
5274: LD_INT 27
5276: PUSH
5277: LD_INT 26
5279: PUSH
5280: LD_INT 28
5282: PUSH
5283: EMPTY
5284: LIST
5285: LIST
5286: LIST
5287: PUSH
5288: LD_INT 1
5290: PPUSH
5291: LD_INT 3
5293: PPUSH
5294: CALL_OW 12
5298: ARRAY
5299: ST_TO_ADDR
// veh = CreateVehicle ;
5300: LD_ADDR_VAR 0 4
5304: PUSH
5305: CALL_OW 45
5309: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5310: LD_VAR 0 4
5314: PPUSH
5315: LD_INT 4
5317: PPUSH
5318: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
5322: LD_VAR 0 4
5326: PPUSH
5327: LD_INT 4
5329: PPUSH
5330: LD_INT 0
5332: PPUSH
5333: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
5337: LD_EXP 19
5341: PUSH
5342: LD_INT 0
5344: EQUAL
5345: PUSH
5346: LD_EXP 19
5350: PUSH
5351: LD_INT 2
5353: EQUAL
5354: OR
5355: IFFALSE 5372
// PrepareHuman ( false , 2 , 4 ) else
5357: LD_INT 0
5359: PPUSH
5360: LD_INT 2
5362: PPUSH
5363: LD_INT 4
5365: PPUSH
5366: CALL_OW 380
5370: GO 5385
// PrepareHuman ( false , 2 , 8 ) ;
5372: LD_INT 0
5374: PPUSH
5375: LD_INT 2
5377: PPUSH
5378: LD_INT 8
5380: PPUSH
5381: CALL_OW 380
// un = CreateHuman ;
5385: LD_ADDR_VAR 0 3
5389: PUSH
5390: CALL_OW 44
5394: ST_TO_ADDR
// SetDir ( un , 4 ) ;
5395: LD_VAR 0 3
5399: PPUSH
5400: LD_INT 4
5402: PPUSH
5403: CALL_OW 233
// PlaceHumanInUnit ( un , veh ) ;
5407: LD_VAR 0 3
5411: PPUSH
5412: LD_VAR 0 4
5416: PPUSH
5417: CALL_OW 52
// end ;
5421: LD_VAR 0 1
5425: RET
// export function PrepareAttackLegion ; var i , un ; begin
5426: LD_INT 0
5428: PPUSH
5429: PPUSH
5430: PPUSH
// for i = 1 to 4 do
5431: LD_ADDR_VAR 0 2
5435: PUSH
5436: DOUBLE
5437: LD_INT 1
5439: DEC
5440: ST_TO_ADDR
5441: LD_INT 4
5443: PUSH
5444: FOR_TO
5445: IFFALSE 5555
// begin uc_side = 8 ;
5447: LD_ADDR_OWVAR 20
5451: PUSH
5452: LD_INT 8
5454: ST_TO_ADDR
// uc_nation = 2 ;
5455: LD_ADDR_OWVAR 21
5459: PUSH
5460: LD_INT 2
5462: ST_TO_ADDR
// hc_gallery =  ;
5463: LD_ADDR_OWVAR 33
5467: PUSH
5468: LD_STRING 
5470: ST_TO_ADDR
// hc_name =  ;
5471: LD_ADDR_OWVAR 26
5475: PUSH
5476: LD_STRING 
5478: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 8 ] [ Rand ( 1 , 2 ) ] , Rand ( 6 , 8 ) ) ;
5479: LD_INT 0
5481: PPUSH
5482: LD_INT 1
5484: PUSH
5485: LD_INT 8
5487: PUSH
5488: EMPTY
5489: LIST
5490: LIST
5491: PUSH
5492: LD_INT 1
5494: PPUSH
5495: LD_INT 2
5497: PPUSH
5498: CALL_OW 12
5502: ARRAY
5503: PPUSH
5504: LD_INT 6
5506: PPUSH
5507: LD_INT 8
5509: PPUSH
5510: CALL_OW 12
5514: PPUSH
5515: CALL_OW 380
// un = CreateHuman ;
5519: LD_ADDR_VAR 0 3
5523: PUSH
5524: CALL_OW 44
5528: ST_TO_ADDR
// PlaceUnitArea ( un , LegionEnemySpawn , false ) ;
5529: LD_VAR 0 3
5533: PPUSH
5534: LD_INT 19
5536: PPUSH
5537: LD_INT 0
5539: PPUSH
5540: CALL_OW 49
// ComCrawl ( un ) ;
5544: LD_VAR 0 3
5548: PPUSH
5549: CALL_OW 137
// end ;
5553: GO 5444
5555: POP
5556: POP
// SetAttitude ( 1 , 8 , att_enemy , true ) ;
5557: LD_INT 1
5559: PPUSH
5560: LD_INT 8
5562: PPUSH
5563: LD_INT 2
5565: PPUSH
5566: LD_INT 1
5568: PPUSH
5569: CALL_OW 80
// PlaceMines ( MineField , 3 ) ;
5573: LD_INT 20
5575: PPUSH
5576: LD_INT 3
5578: PPUSH
5579: CALL 14581 0 2
// end ; end_of_file
5583: LD_VAR 0 1
5587: RET
// export function Action ; var i , tmp , group ; begin
5588: LD_INT 0
5590: PPUSH
5591: PPUSH
5592: PPUSH
5593: PPUSH
// InGameOn ;
5594: CALL_OW 8
// music_nat := 1 ;
5598: LD_ADDR_OWVAR 71
5602: PUSH
5603: LD_INT 1
5605: ST_TO_ADDR
// group := FilterAllUnits ( [ f_side , 1 ] ) ;
5606: LD_ADDR_VAR 0 4
5610: PUSH
5611: LD_INT 22
5613: PUSH
5614: LD_INT 1
5616: PUSH
5617: EMPTY
5618: LIST
5619: LIST
5620: PPUSH
5621: CALL_OW 69
5625: ST_TO_ADDR
// tmp := IsInUnit ( JMM ) ;
5626: LD_ADDR_VAR 0 3
5630: PUSH
5631: LD_EXP 1
5635: PPUSH
5636: CALL_OW 310
5640: ST_TO_ADDR
// CenterNowOnUnits ( tmp ) ;
5641: LD_VAR 0 3
5645: PPUSH
5646: CALL_OW 87
// ComMoveXY ( group , 130 , 103 ) ;
5650: LD_VAR 0 4
5654: PPUSH
5655: LD_INT 130
5657: PPUSH
5658: LD_INT 103
5660: PPUSH
5661: CALL_OW 111
// AddComMoveXY ( tmp , 114 , 102 ) ;
5665: LD_VAR 0 3
5669: PPUSH
5670: LD_INT 114
5672: PPUSH
5673: LD_INT 102
5675: PPUSH
5676: CALL_OW 171
// Say ( JMM , D1-JMM-1 ) ;
5680: LD_EXP 1
5684: PPUSH
5685: LD_STRING D1-JMM-1
5687: PPUSH
5688: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
5692: LD_VAR 0 3
5696: PPUSH
5697: CALL_OW 87
// if IsOk ( Donaldson ) then
5701: LD_EXP 3
5705: PPUSH
5706: CALL_OW 302
5710: IFFALSE 5775
// begin Say ( Donaldson , D1-Don-1 ) ;
5712: LD_EXP 3
5716: PPUSH
5717: LD_STRING D1-Don-1
5719: PPUSH
5720: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
5724: LD_VAR 0 3
5728: PPUSH
5729: CALL_OW 87
// Say ( JMM , D1-JMM-2 ) ;
5733: LD_EXP 1
5737: PPUSH
5738: LD_STRING D1-JMM-2
5740: PPUSH
5741: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
5745: LD_VAR 0 3
5749: PPUSH
5750: CALL_OW 87
// Say ( Donaldson , D1-Don-2 ) ;
5754: LD_EXP 3
5758: PPUSH
5759: LD_STRING D1-Don-2
5761: PPUSH
5762: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
5766: LD_VAR 0 3
5770: PPUSH
5771: CALL_OW 87
// end ; AddComMoveXY ( group , 110 , 101 ) ;
5775: LD_VAR 0 4
5779: PPUSH
5780: LD_INT 110
5782: PPUSH
5783: LD_INT 101
5785: PPUSH
5786: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
5790: LD_INT 35
5792: PPUSH
5793: CALL_OW 67
// CenterNowOnUnits ( tmp ) ;
5797: LD_VAR 0 3
5801: PPUSH
5802: CALL_OW 87
// until SeeXY ( 1 , 102 , 94 ) ;
5806: LD_INT 1
5808: PPUSH
5809: LD_INT 102
5811: PPUSH
5812: LD_INT 94
5814: PPUSH
5815: CALL_OW 293
5819: IFFALSE 5790
// CenterOnXY ( 102 , 94 ) ;
5821: LD_INT 102
5823: PPUSH
5824: LD_INT 94
5826: PPUSH
5827: CALL_OW 84
// DialogRandom ( UnitFilter ( group , [ f_sex , sex_male ] ) , D1-Sol1-2 ,  ) ;
5831: LD_VAR 0 4
5835: PPUSH
5836: LD_INT 26
5838: PUSH
5839: LD_INT 1
5841: PUSH
5842: EMPTY
5843: LIST
5844: LIST
5845: PPUSH
5846: CALL_OW 72
5850: PPUSH
5851: LD_STRING D1-Sol1-2
5853: PPUSH
5854: LD_STRING 
5856: PPUSH
5857: CALL 12098 0 3
// Say ( JMM , D1-JMM-3 ) ;
5861: LD_EXP 1
5865: PPUSH
5866: LD_STRING D1-JMM-3
5868: PPUSH
5869: CALL_OW 88
// ChangeMissionObjectives ( M1 ) ;
5873: LD_STRING M1
5875: PPUSH
5876: CALL_OW 337
// for i in group do
5880: LD_ADDR_VAR 0 2
5884: PUSH
5885: LD_VAR 0 4
5889: PUSH
5890: FOR_IN
5891: IFFALSE 5910
// ComMoveXY ( i , 95 , 84 ) ;
5893: LD_VAR 0 2
5897: PPUSH
5898: LD_INT 95
5900: PPUSH
5901: LD_INT 84
5903: PPUSH
5904: CALL_OW 111
5908: GO 5890
5910: POP
5911: POP
// end ;
5912: LD_VAR 0 1
5916: RET
// every 0 0$1 do var i , bazook_list , your_units , dec ;
5917: GO 5919
5919: DISABLE
5920: LD_INT 0
5922: PPUSH
5923: PPUSH
5924: PPUSH
5925: PPUSH
// begin enable ;
5926: ENABLE
// bazook_list = FilterUnitsInArea ( RussianBazookersSpawn , [ [ f_side , 3 ] , [ f_class , 9 ] ] ) ;
5927: LD_ADDR_VAR 0 2
5931: PUSH
5932: LD_INT 8
5934: PPUSH
5935: LD_INT 22
5937: PUSH
5938: LD_INT 3
5940: PUSH
5941: EMPTY
5942: LIST
5943: LIST
5944: PUSH
5945: LD_INT 25
5947: PUSH
5948: LD_INT 9
5950: PUSH
5951: EMPTY
5952: LIST
5953: LIST
5954: PUSH
5955: EMPTY
5956: LIST
5957: LIST
5958: PPUSH
5959: CALL_OW 70
5963: ST_TO_ADDR
// your_units = FilterAllUnits ( [ [ f_side , 1 ] ] ) ;
5964: LD_ADDR_VAR 0 3
5968: PUSH
5969: LD_INT 22
5971: PUSH
5972: LD_INT 1
5974: PUSH
5975: EMPTY
5976: LIST
5977: LIST
5978: PUSH
5979: EMPTY
5980: LIST
5981: PPUSH
5982: CALL_OW 69
5986: ST_TO_ADDR
// for i in your_units do
5987: LD_ADDR_VAR 0 1
5991: PUSH
5992: LD_VAR 0 3
5996: PUSH
5997: FOR_IN
5998: IFFALSE 6672
// begin if See ( 3 , i ) then
6000: LD_INT 3
6002: PPUSH
6003: LD_VAR 0 1
6007: PPUSH
6008: CALL_OW 292
6012: IFFALSE 6670
// begin disable ;
6014: DISABLE
// ComTimeShift ( bazook_list , 96 , 85 ) ;
6015: LD_VAR 0 2
6019: PPUSH
6020: LD_INT 96
6022: PPUSH
6023: LD_INT 85
6025: PPUSH
6026: CALL_OW 154
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
6030: LD_VAR 0 2
6034: PPUSH
6035: LD_INT 96
6037: PPUSH
6038: LD_INT 85
6040: PPUSH
6041: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
6045: LD_VAR 0 2
6049: PPUSH
6050: LD_INT 96
6052: PPUSH
6053: LD_INT 85
6055: PPUSH
6056: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
6060: LD_VAR 0 2
6064: PPUSH
6065: LD_INT 96
6067: PPUSH
6068: LD_INT 85
6070: PPUSH
6071: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
6075: LD_VAR 0 2
6079: PPUSH
6080: LD_INT 96
6082: PPUSH
6083: LD_INT 85
6085: PPUSH
6086: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
6090: LD_VAR 0 2
6094: PPUSH
6095: LD_INT 96
6097: PPUSH
6098: LD_INT 85
6100: PPUSH
6101: CALL_OW 214
// wait ( 0 0$2 ) ;
6105: LD_INT 70
6107: PPUSH
6108: CALL_OW 67
// Say ( JMM , D1a-JMM-1 ) ;
6112: LD_EXP 1
6116: PPUSH
6117: LD_STRING D1a-JMM-1
6119: PPUSH
6120: CALL_OW 88
// Say ( Donaldson , D1a-Don-1 ) ;
6124: LD_EXP 3
6128: PPUSH
6129: LD_STRING D1a-Don-1
6131: PPUSH
6132: CALL_OW 88
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
6136: LD_ADDR_VAR 0 1
6140: PUSH
6141: LD_INT 22
6143: PUSH
6144: LD_INT 1
6146: PUSH
6147: EMPTY
6148: LIST
6149: LIST
6150: PPUSH
6151: CALL_OW 69
6155: PUSH
6156: FOR_IN
6157: IFFALSE 6176
// ComMoveXY ( i , 109 , 102 ) ;
6159: LD_VAR 0 1
6163: PPUSH
6164: LD_INT 109
6166: PPUSH
6167: LD_INT 102
6169: PPUSH
6170: CALL_OW 111
6174: GO 6156
6176: POP
6177: POP
// Say ( JMM , D1a-JMM-2 ) ;
6178: LD_EXP 1
6182: PPUSH
6183: LD_STRING D1a-JMM-2
6185: PPUSH
6186: CALL_OW 88
// wait ( 0 0$10 ) ;
6190: LD_INT 350
6192: PPUSH
6193: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
6197: LD_EXP 1
6201: PPUSH
6202: CALL_OW 310
6206: PPUSH
6207: CALL_OW 87
// Say ( Donaldson , D1b-Don-1 ) ;
6211: LD_EXP 3
6215: PPUSH
6216: LD_STRING D1b-Don-1
6218: PPUSH
6219: CALL_OW 88
// if IsOk ( Donaldson ) then
6223: LD_EXP 3
6227: PPUSH
6228: CALL_OW 302
6232: IFFALSE 6246
// Say ( JMM , D1b-JMM-1 ) ;
6234: LD_EXP 1
6238: PPUSH
6239: LD_STRING D1b-JMM-1
6241: PPUSH
6242: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D1b-Sol1-1 ,  ) ;
6246: LD_INT 22
6248: PUSH
6249: LD_INT 1
6251: PUSH
6252: EMPTY
6253: LIST
6254: LIST
6255: PUSH
6256: LD_INT 26
6258: PUSH
6259: LD_INT 1
6261: PUSH
6262: EMPTY
6263: LIST
6264: LIST
6265: PUSH
6266: LD_INT 2
6268: PUSH
6269: LD_INT 25
6271: PUSH
6272: LD_INT 1
6274: PUSH
6275: EMPTY
6276: LIST
6277: LIST
6278: PUSH
6279: LD_INT 25
6281: PUSH
6282: LD_INT 2
6284: PUSH
6285: EMPTY
6286: LIST
6287: LIST
6288: PUSH
6289: LD_INT 25
6291: PUSH
6292: LD_INT 3
6294: PUSH
6295: EMPTY
6296: LIST
6297: LIST
6298: PUSH
6299: LD_INT 25
6301: PUSH
6302: LD_INT 4
6304: PUSH
6305: EMPTY
6306: LIST
6307: LIST
6308: PUSH
6309: LD_INT 25
6311: PUSH
6312: LD_INT 5
6314: PUSH
6315: EMPTY
6316: LIST
6317: LIST
6318: PUSH
6319: LD_INT 25
6321: PUSH
6322: LD_INT 8
6324: PUSH
6325: EMPTY
6326: LIST
6327: LIST
6328: PUSH
6329: EMPTY
6330: LIST
6331: LIST
6332: LIST
6333: LIST
6334: LIST
6335: LIST
6336: LIST
6337: PUSH
6338: EMPTY
6339: LIST
6340: LIST
6341: LIST
6342: PPUSH
6343: CALL_OW 69
6347: PPUSH
6348: LD_STRING D1b-Sol1-1
6350: PPUSH
6351: LD_STRING 
6353: PPUSH
6354: CALL 12098 0 3
// Say ( Donaldson , D1b-Don-2 ) ;
6358: LD_EXP 3
6362: PPUSH
6363: LD_STRING D1b-Don-2
6365: PPUSH
6366: CALL_OW 88
// Say ( JMM , D1b-JMM-2 ) ;
6370: LD_EXP 1
6374: PPUSH
6375: LD_STRING D1b-JMM-2
6377: PPUSH
6378: CALL_OW 88
// dec = ShowQuery1 ;
6382: LD_ADDR_VAR 0 4
6386: PUSH
6387: CALL 12561 0 0
6391: ST_TO_ADDR
// if dec = 1 then
6392: LD_VAR 0 4
6396: PUSH
6397: LD_INT 1
6399: EQUAL
6400: IFFALSE 6506
// begin Say ( JMM , D2-JMM-1 ) ;
6402: LD_EXP 1
6406: PPUSH
6407: LD_STRING D2-JMM-1
6409: PPUSH
6410: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
6414: LD_EXP 15
6418: PPUSH
6419: LD_STRING D2-Pow-1
6421: PPUSH
6422: CALL_OW 94
// Say ( JMM , D2a-JMM-1 ) ;
6426: LD_EXP 1
6430: PPUSH
6431: LD_STRING D2a-JMM-1
6433: PPUSH
6434: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-1 ) ;
6438: LD_EXP 15
6442: PPUSH
6443: LD_STRING D2a-Pow-1
6445: PPUSH
6446: CALL_OW 94
// Say ( JMM , D2a-JMM-2 ) ;
6450: LD_EXP 1
6454: PPUSH
6455: LD_STRING D2a-JMM-2
6457: PPUSH
6458: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
6462: LD_EXP 15
6466: PPUSH
6467: LD_STRING D2a-Pow-2
6469: PPUSH
6470: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
6474: LD_EXP 1
6478: PPUSH
6479: LD_STRING D2a-JMM-3
6481: PPUSH
6482: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
6486: LD_EXP 15
6490: PPUSH
6491: LD_STRING D2a-Pow-3
6493: PPUSH
6494: CALL_OW 94
// secondPass = 2 ;
6498: LD_ADDR_EXP 20
6502: PUSH
6503: LD_INT 2
6505: ST_TO_ADDR
// end ; if dec = 2 then
6506: LD_VAR 0 4
6510: PUSH
6511: LD_INT 2
6513: EQUAL
6514: IFFALSE 6608
// begin Say ( JMM , D2-JMM-1 ) ;
6516: LD_EXP 1
6520: PPUSH
6521: LD_STRING D2-JMM-1
6523: PPUSH
6524: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
6528: LD_EXP 15
6532: PPUSH
6533: LD_STRING D2-Pow-1
6535: PPUSH
6536: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
6540: LD_EXP 1
6544: PPUSH
6545: LD_STRING D2b-JMM-1
6547: PPUSH
6548: CALL_OW 88
// SayRadio ( Powell , D2b-Pow-1 ) ;
6552: LD_EXP 15
6556: PPUSH
6557: LD_STRING D2b-Pow-1
6559: PPUSH
6560: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
6564: LD_EXP 1
6568: PPUSH
6569: LD_STRING D2c-JMM-1
6571: PPUSH
6572: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
6576: LD_EXP 15
6580: PPUSH
6581: LD_STRING D2c-Pow-1
6583: PPUSH
6584: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
6588: LD_EXP 1
6592: PPUSH
6593: LD_STRING D2c-JMM-2
6595: PPUSH
6596: CALL_OW 88
// secondPass = 2 ;
6600: LD_ADDR_EXP 20
6604: PUSH
6605: LD_INT 2
6607: ST_TO_ADDR
// end ; if dec = 3 then
6608: LD_VAR 0 4
6612: PUSH
6613: LD_INT 3
6615: EQUAL
6616: IFFALSE 6626
// secondPass = 1 ;
6618: LD_ADDR_EXP 20
6622: PUSH
6623: LD_INT 1
6625: ST_TO_ADDR
// InGameOff ;
6626: CALL_OW 9
// ruAI := 1 ;
6630: LD_ADDR_EXP 34
6634: PUSH
6635: LD_INT 1
6637: ST_TO_ADDR
// SetAttitude ( 1 , 3 , att_enemy , true ) ;
6638: LD_INT 1
6640: PPUSH
6641: LD_INT 3
6643: PPUSH
6644: LD_INT 2
6646: PPUSH
6647: LD_INT 1
6649: PPUSH
6650: CALL_OW 80
// music_nat := music_auto ;
6654: LD_ADDR_OWVAR 71
6658: PUSH
6659: LD_INT 0
6661: ST_TO_ADDR
// SaveForQuickRestart ;
6662: CALL_OW 22
// exit ;
6666: POP
6667: POP
6668: GO 6674
// end ; end ;
6670: GO 5997
6672: POP
6673: POP
// end ;
6674: PPOPN 4
6676: END
// every 1 1$0 trigger secondPass = 2 do
6677: LD_EXP 20
6681: PUSH
6682: LD_INT 2
6684: EQUAL
6685: IFFALSE 6905
6687: GO 6689
6689: DISABLE
// begin PowellSupport1 ;
6690: CALL 2009 0 0
// DialogueOn ;
6694: CALL_OW 6
// Say ( JMM , DC1-JMM-1 ) ;
6698: LD_EXP 1
6702: PPUSH
6703: LD_STRING DC1-JMM-1
6705: PPUSH
6706: CALL_OW 88
// SayRadio ( Powell , DC1-Pow-1 ) ;
6710: LD_EXP 15
6714: PPUSH
6715: LD_STRING DC1-Pow-1
6717: PPUSH
6718: CALL_OW 94
// DialogueOff ;
6722: CALL_OW 7
// wait ( 3 3$0 ) ;
6726: LD_INT 6300
6728: PPUSH
6729: CALL_OW 67
// PowellSupport2 ;
6733: CALL 2490 0 0
// DialogueOn ;
6737: CALL_OW 6
// Say ( JMM , DC2-JMM-1 ) ;
6741: LD_EXP 1
6745: PPUSH
6746: LD_STRING DC2-JMM-1
6748: PPUSH
6749: CALL_OW 88
// SayRadio ( Powell , DC2-Pow-1 ) ;
6753: LD_EXP 15
6757: PPUSH
6758: LD_STRING DC2-Pow-1
6760: PPUSH
6761: CALL_OW 94
// DialogueOff ;
6765: CALL_OW 7
// wait ( 3 3$00 ) ;
6769: LD_INT 6300
6771: PPUSH
6772: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
6776: LD_INT 35
6778: PPUSH
6779: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) and not FilterUnitsInArea ( OutsideArea1 , [ f_side , 3 ] ) ;
6783: LD_INT 22
6785: PUSH
6786: LD_INT 1
6788: PUSH
6789: EMPTY
6790: LIST
6791: LIST
6792: PUSH
6793: LD_INT 2
6795: PUSH
6796: LD_INT 30
6798: PUSH
6799: LD_INT 0
6801: PUSH
6802: EMPTY
6803: LIST
6804: LIST
6805: PUSH
6806: LD_INT 30
6808: PUSH
6809: LD_INT 1
6811: PUSH
6812: EMPTY
6813: LIST
6814: LIST
6815: PUSH
6816: EMPTY
6817: LIST
6818: LIST
6819: LIST
6820: PUSH
6821: EMPTY
6822: LIST
6823: LIST
6824: PPUSH
6825: CALL_OW 69
6829: PUSH
6830: LD_INT 11
6832: PPUSH
6833: LD_INT 22
6835: PUSH
6836: LD_INT 3
6838: PUSH
6839: EMPTY
6840: LIST
6841: LIST
6842: PPUSH
6843: CALL_OW 70
6847: NOT
6848: AND
6849: IFFALSE 6776
// wait ( 0 0$10 ) ;
6851: LD_INT 350
6853: PPUSH
6854: CALL_OW 67
// Legion ;
6858: CALL 6906 0 0
// wait ( 5 5$0 ) ;
6862: LD_INT 10500
6864: PPUSH
6865: CALL_OW 67
// PowellSupport3 ;
6869: CALL 3111 0 0
// DialogueOn ;
6873: CALL_OW 6
// SayRadio ( Powell , DC3-Pow-1 ) ;
6877: LD_EXP 15
6881: PPUSH
6882: LD_STRING DC3-Pow-1
6884: PPUSH
6885: CALL_OW 94
// Say ( JMM , DC3-JMM-1 ) ;
6889: LD_EXP 1
6893: PPUSH
6894: LD_STRING DC3-JMM-1
6896: PPUSH
6897: CALL_OW 88
// DialogueOff ;
6901: CALL_OW 7
// end ;
6905: END
// export function Legion ; var i , dec1 , dec2 , tmp , tmp2 , tmp3 , crates , oil , siberite , cr , sb , payForNeutral , payForHelp , query1 , query2 ; begin
6906: LD_INT 0
6908: PPUSH
6909: PPUSH
6910: PPUSH
6911: PPUSH
6912: PPUSH
6913: PPUSH
6914: PPUSH
6915: PPUSH
6916: PPUSH
6917: PPUSH
6918: PPUSH
6919: PPUSH
6920: PPUSH
6921: PPUSH
6922: PPUSH
6923: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
6924: LD_ADDR_VAR 0 5
6928: PUSH
6929: LD_INT 22
6931: PUSH
6932: LD_INT 1
6934: PUSH
6935: EMPTY
6936: LIST
6937: LIST
6938: PUSH
6939: LD_INT 21
6941: PUSH
6942: LD_INT 3
6944: PUSH
6945: EMPTY
6946: LIST
6947: LIST
6948: PUSH
6949: LD_INT 2
6951: PUSH
6952: LD_INT 30
6954: PUSH
6955: LD_INT 0
6957: PUSH
6958: EMPTY
6959: LIST
6960: LIST
6961: PUSH
6962: LD_INT 30
6964: PUSH
6965: LD_INT 1
6967: PUSH
6968: EMPTY
6969: LIST
6970: LIST
6971: PUSH
6972: EMPTY
6973: LIST
6974: LIST
6975: LIST
6976: PUSH
6977: EMPTY
6978: LIST
6979: LIST
6980: LIST
6981: PPUSH
6982: CALL_OW 69
6986: ST_TO_ADDR
// crates := 0 ;
6987: LD_ADDR_VAR 0 8
6991: PUSH
6992: LD_INT 0
6994: ST_TO_ADDR
// oil := 0 ;
6995: LD_ADDR_VAR 0 9
6999: PUSH
7000: LD_INT 0
7002: ST_TO_ADDR
// siberite := 0 ;
7003: LD_ADDR_VAR 0 10
7007: PUSH
7008: LD_INT 0
7010: ST_TO_ADDR
// payForNeutral := false ;
7011: LD_ADDR_VAR 0 13
7015: PUSH
7016: LD_INT 0
7018: ST_TO_ADDR
// payForHelp := false ;
7019: LD_ADDR_VAR 0 14
7023: PUSH
7024: LD_INT 0
7026: ST_TO_ADDR
// for i in tmp do
7027: LD_ADDR_VAR 0 2
7031: PUSH
7032: LD_VAR 0 5
7036: PUSH
7037: FOR_IN
7038: IFFALSE 7129
// begin crates := crates + GetResourceType ( GetBase ( i ) , 1 ) ;
7040: LD_ADDR_VAR 0 8
7044: PUSH
7045: LD_VAR 0 8
7049: PUSH
7050: LD_VAR 0 2
7054: PPUSH
7055: CALL_OW 274
7059: PPUSH
7060: LD_INT 1
7062: PPUSH
7063: CALL_OW 275
7067: PLUS
7068: ST_TO_ADDR
// oil := oil + GetResourceType ( GetBase ( i ) , 2 ) ;
7069: LD_ADDR_VAR 0 9
7073: PUSH
7074: LD_VAR 0 9
7078: PUSH
7079: LD_VAR 0 2
7083: PPUSH
7084: CALL_OW 274
7088: PPUSH
7089: LD_INT 2
7091: PPUSH
7092: CALL_OW 275
7096: PLUS
7097: ST_TO_ADDR
// siberite := siberite + GetResourceType ( GetBase ( i ) , 3 ) ;
7098: LD_ADDR_VAR 0 10
7102: PUSH
7103: LD_VAR 0 10
7107: PUSH
7108: LD_VAR 0 2
7112: PPUSH
7113: CALL_OW 274
7117: PPUSH
7118: LD_INT 3
7120: PPUSH
7121: CALL_OW 275
7125: PLUS
7126: ST_TO_ADDR
// end ;
7127: GO 7037
7129: POP
7130: POP
// PrepareKurt ;
7131: CALL 4559 0 0
// if not Kurt then
7135: LD_EXP 17
7139: NOT
7140: IFFALSE 7144
// exit ;
7142: GO 9263
// ComMoveXY ( KurtVeh , 144 , 111 ) ;
7144: LD_EXP 18
7148: PPUSH
7149: LD_INT 144
7151: PPUSH
7152: LD_INT 111
7154: PPUSH
7155: CALL_OW 111
// wait ( 0 0$2 ) ;
7159: LD_INT 70
7161: PPUSH
7162: CALL_OW 67
// PlaceSeeing ( 167 , 121 , 1 , - 10 ) ;
7166: LD_INT 167
7168: PPUSH
7169: LD_INT 121
7171: PPUSH
7172: LD_INT 1
7174: PPUSH
7175: LD_INT 10
7177: NEG
7178: PPUSH
7179: CALL_OW 330
// ComExitVehicle ( Kurt ) ;
7183: LD_EXP 17
7187: PPUSH
7188: CALL_OW 121
// CenterNowOnUnits ( Kurt ) ;
7192: LD_EXP 17
7196: PPUSH
7197: CALL_OW 87
// wait ( 0 0$1 ) ;
7201: LD_INT 35
7203: PPUSH
7204: CALL_OW 67
// DialogueOn ;
7208: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D3-Sol1-1 ,  ) ;
7212: LD_INT 22
7214: PUSH
7215: LD_INT 1
7217: PUSH
7218: EMPTY
7219: LIST
7220: LIST
7221: PUSH
7222: LD_INT 26
7224: PUSH
7225: LD_INT 1
7227: PUSH
7228: EMPTY
7229: LIST
7230: LIST
7231: PUSH
7232: LD_INT 2
7234: PUSH
7235: LD_INT 25
7237: PUSH
7238: LD_INT 1
7240: PUSH
7241: EMPTY
7242: LIST
7243: LIST
7244: PUSH
7245: LD_INT 25
7247: PUSH
7248: LD_INT 2
7250: PUSH
7251: EMPTY
7252: LIST
7253: LIST
7254: PUSH
7255: LD_INT 25
7257: PUSH
7258: LD_INT 3
7260: PUSH
7261: EMPTY
7262: LIST
7263: LIST
7264: PUSH
7265: LD_INT 25
7267: PUSH
7268: LD_INT 4
7270: PUSH
7271: EMPTY
7272: LIST
7273: LIST
7274: PUSH
7275: LD_INT 25
7277: PUSH
7278: LD_INT 5
7280: PUSH
7281: EMPTY
7282: LIST
7283: LIST
7284: PUSH
7285: LD_INT 25
7287: PUSH
7288: LD_INT 8
7290: PUSH
7291: EMPTY
7292: LIST
7293: LIST
7294: PUSH
7295: EMPTY
7296: LIST
7297: LIST
7298: LIST
7299: LIST
7300: LIST
7301: LIST
7302: LIST
7303: PUSH
7304: EMPTY
7305: LIST
7306: LIST
7307: LIST
7308: PPUSH
7309: CALL_OW 69
7313: PPUSH
7314: LD_STRING D3-Sol1-1
7316: PPUSH
7317: LD_STRING 
7319: PPUSH
7320: CALL 12098 0 3
// if KurtStatus then
7324: LD_EXP 19
7328: IFFALSE 7428
// begin Say ( Kurt , D3-Kurt-1 ) ;
7330: LD_EXP 17
7334: PPUSH
7335: LD_STRING D3-Kurt-1
7337: PPUSH
7338: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
7342: LD_EXP 1
7346: PPUSH
7347: LD_STRING D3-JMM-1
7349: PPUSH
7350: CALL_OW 88
// Say ( Kurt , D3-Kurt-2 ) ;
7354: LD_EXP 17
7358: PPUSH
7359: LD_STRING D3-Kurt-2
7361: PPUSH
7362: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
7366: LD_EXP 1
7370: PPUSH
7371: LD_STRING D3-JMM-2
7373: PPUSH
7374: CALL_OW 88
// Say ( Kurt , D3-Kurt-4 ) ;
7378: LD_EXP 17
7382: PPUSH
7383: LD_STRING D3-Kurt-4
7385: PPUSH
7386: CALL_OW 88
// Say ( JMM , D3-JMM-4 ) ;
7390: LD_EXP 1
7394: PPUSH
7395: LD_STRING D3-JMM-4
7397: PPUSH
7398: CALL_OW 88
// Say ( Kurt , D3-Kurt-5 ) ;
7402: LD_EXP 17
7406: PPUSH
7407: LD_STRING D3-Kurt-5
7409: PPUSH
7410: CALL_OW 88
// Say ( Kurt , D3-Kurt-5a ) ;
7414: LD_EXP 17
7418: PPUSH
7419: LD_STRING D3-Kurt-5a
7421: PPUSH
7422: CALL_OW 88
// end else
7426: GO 7524
// begin Say ( Kurt , D3-Kurt-1 ) ;
7428: LD_EXP 17
7432: PPUSH
7433: LD_STRING D3-Kurt-1
7435: PPUSH
7436: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
7440: LD_EXP 1
7444: PPUSH
7445: LD_STRING D3-JMM-1
7447: PPUSH
7448: CALL_OW 88
// Say ( Kurt , D3-Kurt-3 ) ;
7452: LD_EXP 17
7456: PPUSH
7457: LD_STRING D3-Kurt-3
7459: PPUSH
7460: CALL_OW 88
// Say ( JMM , D3-JMM-3 ) ;
7464: LD_EXP 1
7468: PPUSH
7469: LD_STRING D3-JMM-3
7471: PPUSH
7472: CALL_OW 88
// Say ( Kurt , D3-Kurt-4 ) ;
7476: LD_EXP 17
7480: PPUSH
7481: LD_STRING D3-Kurt-4
7483: PPUSH
7484: CALL_OW 88
// Say ( JMM , D3-JMM-4 ) ;
7488: LD_EXP 1
7492: PPUSH
7493: LD_STRING D3-JMM-4
7495: PPUSH
7496: CALL_OW 88
// Say ( Kurt , D3-Kurt-5 ) ;
7500: LD_EXP 17
7504: PPUSH
7505: LD_STRING D3-Kurt-5
7507: PPUSH
7508: CALL_OW 88
// Say ( Kurt , D3-Kurt-5b ) ;
7512: LD_EXP 17
7516: PPUSH
7517: LD_STRING D3-Kurt-5b
7519: PPUSH
7520: CALL_OW 88
// end ; if crates >= [ 120 , 60 ] [ KurtStatus + 1 ] and siberite >= [ 120 , 60 ] [ KurtStatus + 1 ] then
7524: LD_VAR 0 8
7528: PUSH
7529: LD_INT 120
7531: PUSH
7532: LD_INT 60
7534: PUSH
7535: EMPTY
7536: LIST
7537: LIST
7538: PUSH
7539: LD_EXP 19
7543: PUSH
7544: LD_INT 1
7546: PLUS
7547: ARRAY
7548: GREATEREQUAL
7549: PUSH
7550: LD_VAR 0 10
7554: PUSH
7555: LD_INT 120
7557: PUSH
7558: LD_INT 60
7560: PUSH
7561: EMPTY
7562: LIST
7563: LIST
7564: PUSH
7565: LD_EXP 19
7569: PUSH
7570: LD_INT 1
7572: PLUS
7573: ARRAY
7574: GREATEREQUAL
7575: AND
7576: IFFALSE 7628
// dec1 = SelectiveQuery ( [ Q2 , Q2K ] [ KurtStatus + 1 ] , [ 1 , 2 , 3 , 4 ] ) else
7578: LD_ADDR_VAR 0 3
7582: PUSH
7583: LD_STRING Q2
7585: PUSH
7586: LD_STRING Q2K
7588: PUSH
7589: EMPTY
7590: LIST
7591: LIST
7592: PUSH
7593: LD_EXP 19
7597: PUSH
7598: LD_INT 1
7600: PLUS
7601: ARRAY
7602: PPUSH
7603: LD_INT 1
7605: PUSH
7606: LD_INT 2
7608: PUSH
7609: LD_INT 3
7611: PUSH
7612: LD_INT 4
7614: PUSH
7615: EMPTY
7616: LIST
7617: LIST
7618: LIST
7619: LIST
7620: PPUSH
7621: CALL_OW 98
7625: ST_TO_ADDR
7626: GO 7672
// dec1 = SelectiveQuery ( [ Q2 , Q2K ] [ KurtStatus + 1 ] , [ 1 , 3 , 4 ] ) ;
7628: LD_ADDR_VAR 0 3
7632: PUSH
7633: LD_STRING Q2
7635: PUSH
7636: LD_STRING Q2K
7638: PUSH
7639: EMPTY
7640: LIST
7641: LIST
7642: PUSH
7643: LD_EXP 19
7647: PUSH
7648: LD_INT 1
7650: PLUS
7651: ARRAY
7652: PPUSH
7653: LD_INT 1
7655: PUSH
7656: LD_INT 3
7658: PUSH
7659: LD_INT 4
7661: PUSH
7662: EMPTY
7663: LIST
7664: LIST
7665: LIST
7666: PPUSH
7667: CALL_OW 98
7671: ST_TO_ADDR
// if dec1 = 1 then
7672: LD_VAR 0 3
7676: PUSH
7677: LD_INT 1
7679: EQUAL
7680: IFFALSE 7714
// begin Say ( JMM , D3Ka-JMM-1 ) ;
7682: LD_EXP 1
7686: PPUSH
7687: LD_STRING D3Ka-JMM-1
7689: PPUSH
7690: CALL_OW 88
// Say ( Kurt , D3Ka-Kurt-1 ) ;
7694: LD_EXP 17
7698: PPUSH
7699: LD_STRING D3Ka-Kurt-1
7701: PPUSH
7702: CALL_OW 88
// warWithLegion = 1 ;
7706: LD_ADDR_EXP 23
7710: PUSH
7711: LD_INT 1
7713: ST_TO_ADDR
// end ; if dec1 = 2 then
7714: LD_VAR 0 3
7718: PUSH
7719: LD_INT 2
7721: EQUAL
7722: IFFALSE 7806
// begin Say ( JMM , D3Kb-JMM-1 ) ;
7724: LD_EXP 1
7728: PPUSH
7729: LD_STRING D3Kb-JMM-1
7731: PPUSH
7732: CALL_OW 88
// Say ( Kurt , D3Kb-Kurt-1 ) ;
7736: LD_EXP 17
7740: PPUSH
7741: LD_STRING D3Kb-Kurt-1
7743: PPUSH
7744: CALL_OW 88
// cr := [ 120 , 60 ] [ KurtStatus + 1 ] ;
7748: LD_ADDR_VAR 0 11
7752: PUSH
7753: LD_INT 120
7755: PUSH
7756: LD_INT 60
7758: PUSH
7759: EMPTY
7760: LIST
7761: LIST
7762: PUSH
7763: LD_EXP 19
7767: PUSH
7768: LD_INT 1
7770: PLUS
7771: ARRAY
7772: ST_TO_ADDR
// sb := [ 120 , 60 ] [ KurtStatus + 1 ] ;
7773: LD_ADDR_VAR 0 12
7777: PUSH
7778: LD_INT 120
7780: PUSH
7781: LD_INT 60
7783: PUSH
7784: EMPTY
7785: LIST
7786: LIST
7787: PUSH
7788: LD_EXP 19
7792: PUSH
7793: LD_INT 1
7795: PLUS
7796: ARRAY
7797: ST_TO_ADDR
// payForNeutral := true ;
7798: LD_ADDR_VAR 0 13
7802: PUSH
7803: LD_INT 1
7805: ST_TO_ADDR
// end ; if dec1 = 3 then
7806: LD_VAR 0 3
7810: PUSH
7811: LD_INT 3
7813: EQUAL
7814: IFFALSE 8049
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
7816: LD_EXP 1
7820: PPUSH
7821: LD_STRING D3Kc1-JMM-1
7823: PPUSH
7824: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-1 ) ;
7828: LD_EXP 17
7832: PPUSH
7833: LD_STRING D3Kc1-Kurt-1
7835: PPUSH
7836: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
7840: LD_EXP 1
7844: PPUSH
7845: LD_STRING D3Kc1-JMM-2
7847: PPUSH
7848: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-2 ) ;
7852: LD_EXP 17
7856: PPUSH
7857: LD_STRING D3Kc1-Kurt-2
7859: PPUSH
7860: CALL_OW 88
// askSiberite = 1 ;
7864: LD_ADDR_EXP 25
7868: PUSH
7869: LD_INT 1
7871: ST_TO_ADDR
// dec2 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
7872: LD_ADDR_VAR 0 4
7876: PUSH
7877: LD_STRING Q2b
7879: PPUSH
7880: LD_INT 1
7882: PUSH
7883: LD_INT 2
7885: PUSH
7886: LD_INT 3
7888: PUSH
7889: EMPTY
7890: LIST
7891: LIST
7892: LIST
7893: PPUSH
7894: CALL_OW 98
7898: ST_TO_ADDR
// if dec2 = 1 then
7899: LD_VAR 0 4
7903: PUSH
7904: LD_INT 1
7906: EQUAL
7907: IFFALSE 7941
// begin Say ( JMM , D4a-JMM-1 ) ;
7909: LD_EXP 1
7913: PPUSH
7914: LD_STRING D4a-JMM-1
7916: PPUSH
7917: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
7921: LD_EXP 17
7925: PPUSH
7926: LD_STRING D4b-Kurt-1
7928: PPUSH
7929: CALL_OW 88
// warWithLegion = 1 ;
7933: LD_ADDR_EXP 23
7937: PUSH
7938: LD_INT 1
7940: ST_TO_ADDR
// end ; if dec2 = 2 then
7941: LD_VAR 0 4
7945: PUSH
7946: LD_INT 2
7948: EQUAL
7949: IFFALSE 7983
// begin Say ( JMM , D4b-JMM-1 ) ;
7951: LD_EXP 1
7955: PPUSH
7956: LD_STRING D4b-JMM-1
7958: PPUSH
7959: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
7963: LD_EXP 17
7967: PPUSH
7968: LD_STRING D4b-Kurt-1
7970: PPUSH
7971: CALL_OW 88
// warWithLegion = 1 ;
7975: LD_ADDR_EXP 23
7979: PUSH
7980: LD_INT 1
7982: ST_TO_ADDR
// end ; if dec2 = 3 then
7983: LD_VAR 0 4
7987: PUSH
7988: LD_INT 3
7990: EQUAL
7991: IFFALSE 8049
// begin Say ( JMM , D4c-JMM-1 ) ;
7993: LD_EXP 1
7997: PPUSH
7998: LD_STRING D4c-JMM-1
8000: PPUSH
8001: CALL_OW 88
// Say ( Kurt , D4c-Kurt-1 ) ;
8005: LD_EXP 17
8009: PPUSH
8010: LD_STRING D4c-Kurt-1
8012: PPUSH
8013: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
8017: LD_EXP 1
8021: PPUSH
8022: LD_STRING D4c-JMM-2
8024: PPUSH
8025: CALL_OW 88
// Say ( Kurt , D4c-Kurt-2 ) ;
8029: LD_EXP 17
8033: PPUSH
8034: LD_STRING D4c-Kurt-2
8036: PPUSH
8037: CALL_OW 88
// fakeInfo = 1 ;
8041: LD_ADDR_EXP 24
8045: PUSH
8046: LD_INT 1
8048: ST_TO_ADDR
// end ; end ; if dec1 = 4 then
8049: LD_VAR 0 3
8053: PUSH
8054: LD_INT 4
8056: EQUAL
8057: IFFALSE 9119
// begin Say ( JMM , D3Kd-JMM-1 ) ;
8059: LD_EXP 1
8063: PPUSH
8064: LD_STRING D3Kd-JMM-1
8066: PPUSH
8067: CALL_OW 88
// if crates >= [ 200 , 120 ] [ KurtStatus + 1 ] and siberite >= [ 200 , 120 ] [ KurtStatus + 1 ] then
8071: LD_VAR 0 8
8075: PUSH
8076: LD_INT 200
8078: PUSH
8079: LD_INT 120
8081: PUSH
8082: EMPTY
8083: LIST
8084: LIST
8085: PUSH
8086: LD_EXP 19
8090: PUSH
8091: LD_INT 1
8093: PLUS
8094: ARRAY
8095: GREATEREQUAL
8096: PUSH
8097: LD_VAR 0 10
8101: PUSH
8102: LD_INT 200
8104: PUSH
8105: LD_INT 120
8107: PUSH
8108: EMPTY
8109: LIST
8110: LIST
8111: PUSH
8112: LD_EXP 19
8116: PUSH
8117: LD_INT 1
8119: PLUS
8120: ARRAY
8121: GREATEREQUAL
8122: AND
8123: IFFALSE 8175
// dec2 = SelectiveQuery ( [ Q2a , Q2aK ] [ KurtStatus + 1 ] , [ 1 , 2 , 3 , 4 ] ) else
8125: LD_ADDR_VAR 0 4
8129: PUSH
8130: LD_STRING Q2a
8132: PUSH
8133: LD_STRING Q2aK
8135: PUSH
8136: EMPTY
8137: LIST
8138: LIST
8139: PUSH
8140: LD_EXP 19
8144: PUSH
8145: LD_INT 1
8147: PLUS
8148: ARRAY
8149: PPUSH
8150: LD_INT 1
8152: PUSH
8153: LD_INT 2
8155: PUSH
8156: LD_INT 3
8158: PUSH
8159: LD_INT 4
8161: PUSH
8162: EMPTY
8163: LIST
8164: LIST
8165: LIST
8166: LIST
8167: PPUSH
8168: CALL_OW 98
8172: ST_TO_ADDR
8173: GO 8339
// if crates >= [ 120 , 60 ] [ KurtStatus + 1 ] and siberite >= [ 120 , 60 ] [ KurtStatus + 1 ] then
8175: LD_VAR 0 8
8179: PUSH
8180: LD_INT 120
8182: PUSH
8183: LD_INT 60
8185: PUSH
8186: EMPTY
8187: LIST
8188: LIST
8189: PUSH
8190: LD_EXP 19
8194: PUSH
8195: LD_INT 1
8197: PLUS
8198: ARRAY
8199: GREATEREQUAL
8200: PUSH
8201: LD_VAR 0 10
8205: PUSH
8206: LD_INT 120
8208: PUSH
8209: LD_INT 60
8211: PUSH
8212: EMPTY
8213: LIST
8214: LIST
8215: PUSH
8216: LD_EXP 19
8220: PUSH
8221: LD_INT 1
8223: PLUS
8224: ARRAY
8225: GREATEREQUAL
8226: AND
8227: IFFALSE 8275
// dec2 = SelectiveQuery ( [ Q2a , Q2aK ] [ KurtStatus + 1 ] , [ 1 , 2 , 4 ] ) else
8229: LD_ADDR_VAR 0 4
8233: PUSH
8234: LD_STRING Q2a
8236: PUSH
8237: LD_STRING Q2aK
8239: PUSH
8240: EMPTY
8241: LIST
8242: LIST
8243: PUSH
8244: LD_EXP 19
8248: PUSH
8249: LD_INT 1
8251: PLUS
8252: ARRAY
8253: PPUSH
8254: LD_INT 1
8256: PUSH
8257: LD_INT 2
8259: PUSH
8260: LD_INT 4
8262: PUSH
8263: EMPTY
8264: LIST
8265: LIST
8266: LIST
8267: PPUSH
8268: CALL_OW 98
8272: ST_TO_ADDR
8273: GO 8339
// begin Query ( [ Q2d , Q2dK ] [ KurtStatus + 1 ] ) ;
8275: LD_STRING Q2d
8277: PUSH
8278: LD_STRING Q2dK
8280: PUSH
8281: EMPTY
8282: LIST
8283: LIST
8284: PUSH
8285: LD_EXP 19
8289: PUSH
8290: LD_INT 1
8292: PLUS
8293: ARRAY
8294: PPUSH
8295: CALL_OW 97
// dec2 := 0 ;
8299: LD_ADDR_VAR 0 4
8303: PUSH
8304: LD_INT 0
8306: ST_TO_ADDR
// Say ( JMM , D3Kc1-JMM-1 ) ;
8307: LD_EXP 1
8311: PPUSH
8312: LD_STRING D3Kc1-JMM-1
8314: PPUSH
8315: CALL_OW 88
// Say ( Kurt , D3Kc2-Kurt-1 ) ;
8319: LD_EXP 17
8323: PPUSH
8324: LD_STRING D3Kc2-Kurt-1
8326: PPUSH
8327: CALL_OW 88
// warWithLegion := 1 ;
8331: LD_ADDR_EXP 23
8335: PUSH
8336: LD_INT 1
8338: ST_TO_ADDR
// end ; if dec2 = 1 then
8339: LD_VAR 0 4
8343: PUSH
8344: LD_INT 1
8346: EQUAL
8347: IFFALSE 8381
// begin Say ( JMM , D5Ka-JMM-1 ) ;
8349: LD_EXP 1
8353: PPUSH
8354: LD_STRING D5Ka-JMM-1
8356: PPUSH
8357: CALL_OW 88
// Say ( Kurt , D5Ka-Kurt-1 ) ;
8361: LD_EXP 17
8365: PPUSH
8366: LD_STRING D5Ka-Kurt-1
8368: PPUSH
8369: CALL_OW 88
// warWithLegion = 1 ;
8373: LD_ADDR_EXP 23
8377: PUSH
8378: LD_INT 1
8380: ST_TO_ADDR
// end ; if dec2 = 2 then
8381: LD_VAR 0 4
8385: PUSH
8386: LD_INT 2
8388: EQUAL
8389: IFFALSE 8473
// begin Say ( JMM , D3Kb-JMM-1 ) ;
8391: LD_EXP 1
8395: PPUSH
8396: LD_STRING D3Kb-JMM-1
8398: PPUSH
8399: CALL_OW 88
// Say ( Kurt , D3Kb-Kurt-1 ) ;
8403: LD_EXP 17
8407: PPUSH
8408: LD_STRING D3Kb-Kurt-1
8410: PPUSH
8411: CALL_OW 88
// cr := [ 120 , 60 ] [ KurtStatus + 1 ] ;
8415: LD_ADDR_VAR 0 11
8419: PUSH
8420: LD_INT 120
8422: PUSH
8423: LD_INT 60
8425: PUSH
8426: EMPTY
8427: LIST
8428: LIST
8429: PUSH
8430: LD_EXP 19
8434: PUSH
8435: LD_INT 1
8437: PLUS
8438: ARRAY
8439: ST_TO_ADDR
// sb := [ 120 , 60 ] [ KurtStatus + 1 ] ;
8440: LD_ADDR_VAR 0 12
8444: PUSH
8445: LD_INT 120
8447: PUSH
8448: LD_INT 60
8450: PUSH
8451: EMPTY
8452: LIST
8453: LIST
8454: PUSH
8455: LD_EXP 19
8459: PUSH
8460: LD_INT 1
8462: PLUS
8463: ARRAY
8464: ST_TO_ADDR
// payForNeutral := true ;
8465: LD_ADDR_VAR 0 13
8469: PUSH
8470: LD_INT 1
8472: ST_TO_ADDR
// end ; if dec2 = 3 then
8473: LD_VAR 0 4
8477: PUSH
8478: LD_INT 3
8480: EQUAL
8481: IFFALSE 8565
// begin Say ( JMM , D3Ke-JMM-1 ) ;
8483: LD_EXP 1
8487: PPUSH
8488: LD_STRING D3Ke-JMM-1
8490: PPUSH
8491: CALL_OW 88
// Say ( Kurt , D3Ke-Kurt-1 ) ;
8495: LD_EXP 17
8499: PPUSH
8500: LD_STRING D3Ke-Kurt-1
8502: PPUSH
8503: CALL_OW 88
// cr := [ 200 , 120 ] [ KurtStatus + 1 ] ;
8507: LD_ADDR_VAR 0 11
8511: PUSH
8512: LD_INT 200
8514: PUSH
8515: LD_INT 120
8517: PUSH
8518: EMPTY
8519: LIST
8520: LIST
8521: PUSH
8522: LD_EXP 19
8526: PUSH
8527: LD_INT 1
8529: PLUS
8530: ARRAY
8531: ST_TO_ADDR
// sb := [ 200 , 120 ] [ KurtStatus + 1 ] ;
8532: LD_ADDR_VAR 0 12
8536: PUSH
8537: LD_INT 200
8539: PUSH
8540: LD_INT 120
8542: PUSH
8543: EMPTY
8544: LIST
8545: LIST
8546: PUSH
8547: LD_EXP 19
8551: PUSH
8552: LD_INT 1
8554: PLUS
8555: ARRAY
8556: ST_TO_ADDR
// payForHelp := true ;
8557: LD_ADDR_VAR 0 14
8561: PUSH
8562: LD_INT 1
8564: ST_TO_ADDR
// end ; if dec2 = 4 then
8565: LD_VAR 0 4
8569: PUSH
8570: LD_INT 4
8572: EQUAL
8573: IFFALSE 8808
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
8575: LD_EXP 1
8579: PPUSH
8580: LD_STRING D3Kc1-JMM-1
8582: PPUSH
8583: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-1 ) ;
8587: LD_EXP 17
8591: PPUSH
8592: LD_STRING D3Kc1-Kurt-1
8594: PPUSH
8595: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
8599: LD_EXP 1
8603: PPUSH
8604: LD_STRING D3Kc1-JMM-2
8606: PPUSH
8607: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-2 ) ;
8611: LD_EXP 17
8615: PPUSH
8616: LD_STRING D3Kc1-Kurt-2
8618: PPUSH
8619: CALL_OW 88
// askSiberite = 1 ;
8623: LD_ADDR_EXP 25
8627: PUSH
8628: LD_INT 1
8630: ST_TO_ADDR
// dec2 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
8631: LD_ADDR_VAR 0 4
8635: PUSH
8636: LD_STRING Q2b
8638: PPUSH
8639: LD_INT 1
8641: PUSH
8642: LD_INT 2
8644: PUSH
8645: LD_INT 3
8647: PUSH
8648: EMPTY
8649: LIST
8650: LIST
8651: LIST
8652: PPUSH
8653: CALL_OW 98
8657: ST_TO_ADDR
// if dec2 = 1 then
8658: LD_VAR 0 4
8662: PUSH
8663: LD_INT 1
8665: EQUAL
8666: IFFALSE 8700
// begin Say ( JMM , D4a-JMM-1 ) ;
8668: LD_EXP 1
8672: PPUSH
8673: LD_STRING D4a-JMM-1
8675: PPUSH
8676: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
8680: LD_EXP 17
8684: PPUSH
8685: LD_STRING D4b-Kurt-1
8687: PPUSH
8688: CALL_OW 88
// warWithLegion = 1 ;
8692: LD_ADDR_EXP 23
8696: PUSH
8697: LD_INT 1
8699: ST_TO_ADDR
// end ; if dec2 = 2 then
8700: LD_VAR 0 4
8704: PUSH
8705: LD_INT 2
8707: EQUAL
8708: IFFALSE 8742
// begin Say ( JMM , D4b-JMM-1 ) ;
8710: LD_EXP 1
8714: PPUSH
8715: LD_STRING D4b-JMM-1
8717: PPUSH
8718: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
8722: LD_EXP 17
8726: PPUSH
8727: LD_STRING D4b-Kurt-1
8729: PPUSH
8730: CALL_OW 88
// warWithLegion = 1 ;
8734: LD_ADDR_EXP 23
8738: PUSH
8739: LD_INT 1
8741: ST_TO_ADDR
// end ; if dec2 = 3 then
8742: LD_VAR 0 4
8746: PUSH
8747: LD_INT 3
8749: EQUAL
8750: IFFALSE 8808
// begin Say ( JMM , D4c-JMM-1 ) ;
8752: LD_EXP 1
8756: PPUSH
8757: LD_STRING D4c-JMM-1
8759: PPUSH
8760: CALL_OW 88
// Say ( Kurt , D4c-Kurt-1 ) ;
8764: LD_EXP 17
8768: PPUSH
8769: LD_STRING D4c-Kurt-1
8771: PPUSH
8772: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
8776: LD_EXP 1
8780: PPUSH
8781: LD_STRING D4c-JMM-2
8783: PPUSH
8784: CALL_OW 88
// Say ( Kurt , D4c-Kurt-2 ) ;
8788: LD_EXP 17
8792: PPUSH
8793: LD_STRING D4c-Kurt-2
8795: PPUSH
8796: CALL_OW 88
// fakeInfo = 1 ;
8800: LD_ADDR_EXP 24
8804: PUSH
8805: LD_INT 1
8807: ST_TO_ADDR
// end ; end ; if payForNeutral or payForHelp then
8808: LD_VAR 0 13
8812: PUSH
8813: LD_VAR 0 14
8817: OR
8818: IFFALSE 9119
// begin for i in tmp do
8820: LD_ADDR_VAR 0 2
8824: PUSH
8825: LD_VAR 0 5
8829: PUSH
8830: FOR_IN
8831: IFFALSE 9117
// begin tmp2 := GetResourceType ( GetBase ( i ) , 1 ) ;
8833: LD_ADDR_VAR 0 6
8837: PUSH
8838: LD_VAR 0 2
8842: PPUSH
8843: CALL_OW 274
8847: PPUSH
8848: LD_INT 1
8850: PPUSH
8851: CALL_OW 275
8855: ST_TO_ADDR
// tmp3 := GetResourceType ( GetBase ( i ) , 3 ) ;
8856: LD_ADDR_VAR 0 7
8860: PUSH
8861: LD_VAR 0 2
8865: PPUSH
8866: CALL_OW 274
8870: PPUSH
8871: LD_INT 3
8873: PPUSH
8874: CALL_OW 275
8878: ST_TO_ADDR
// if cr then
8879: LD_VAR 0 11
8883: IFFALSE 8997
// begin if tmp2 and tmp2 < cr then
8885: LD_VAR 0 6
8889: PUSH
8890: LD_VAR 0 6
8894: PUSH
8895: LD_VAR 0 11
8899: LESS
8900: AND
8901: IFFALSE 8949
// begin SetResourceType ( GetBase ( i ) , 1 , cr - tmp2 ) ;
8903: LD_VAR 0 2
8907: PPUSH
8908: CALL_OW 274
8912: PPUSH
8913: LD_INT 1
8915: PPUSH
8916: LD_VAR 0 11
8920: PUSH
8921: LD_VAR 0 6
8925: MINUS
8926: PPUSH
8927: CALL_OW 277
// cr := cr - tmp2 ;
8931: LD_ADDR_VAR 0 11
8935: PUSH
8936: LD_VAR 0 11
8940: PUSH
8941: LD_VAR 0 6
8945: MINUS
8946: ST_TO_ADDR
// end else
8947: GO 8997
// if tmp2 > cr then
8949: LD_VAR 0 6
8953: PUSH
8954: LD_VAR 0 11
8958: GREATER
8959: IFFALSE 8997
// begin SetResourceType ( GetBase ( i ) , 1 , tmp2 - cr ) ;
8961: LD_VAR 0 2
8965: PPUSH
8966: CALL_OW 274
8970: PPUSH
8971: LD_INT 1
8973: PPUSH
8974: LD_VAR 0 6
8978: PUSH
8979: LD_VAR 0 11
8983: MINUS
8984: PPUSH
8985: CALL_OW 277
// cr := 0 ;
8989: LD_ADDR_VAR 0 11
8993: PUSH
8994: LD_INT 0
8996: ST_TO_ADDR
// end ; end ; if sb then
8997: LD_VAR 0 12
9001: IFFALSE 9115
// begin if tmp3 and tmp3 < sb then
9003: LD_VAR 0 7
9007: PUSH
9008: LD_VAR 0 7
9012: PUSH
9013: LD_VAR 0 12
9017: LESS
9018: AND
9019: IFFALSE 9067
// begin SetResourceType ( GetBase ( i ) , 3 , sb - tmp3 ) ;
9021: LD_VAR 0 2
9025: PPUSH
9026: CALL_OW 274
9030: PPUSH
9031: LD_INT 3
9033: PPUSH
9034: LD_VAR 0 12
9038: PUSH
9039: LD_VAR 0 7
9043: MINUS
9044: PPUSH
9045: CALL_OW 277
// sb := sb - tmp3 ;
9049: LD_ADDR_VAR 0 12
9053: PUSH
9054: LD_VAR 0 12
9058: PUSH
9059: LD_VAR 0 7
9063: MINUS
9064: ST_TO_ADDR
// end else
9065: GO 9115
// if tmp3 > sb then
9067: LD_VAR 0 7
9071: PUSH
9072: LD_VAR 0 12
9076: GREATER
9077: IFFALSE 9115
// begin SetResourceType ( GetBase ( i ) , 3 , tmp3 - sb ) ;
9079: LD_VAR 0 2
9083: PPUSH
9084: CALL_OW 274
9088: PPUSH
9089: LD_INT 3
9091: PPUSH
9092: LD_VAR 0 7
9096: PUSH
9097: LD_VAR 0 12
9101: MINUS
9102: PPUSH
9103: CALL_OW 277
// sb := 0 ;
9107: LD_ADDR_VAR 0 12
9111: PUSH
9112: LD_INT 0
9114: ST_TO_ADDR
// end ; end ; end ;
9115: GO 8830
9117: POP
9118: POP
// end ; end ; DialogueOff ;
9119: CALL_OW 7
// RemoveSeeing ( 167 , 121 , 1 ) ;
9123: LD_INT 167
9125: PPUSH
9126: LD_INT 121
9128: PPUSH
9129: LD_INT 1
9131: PPUSH
9132: CALL_OW 331
// ComEnterUnit ( Kurt , KurtVeh ) ;
9136: LD_EXP 17
9140: PPUSH
9141: LD_EXP 18
9145: PPUSH
9146: CALL_OW 120
// wait ( 0 0$1 ) ;
9150: LD_INT 35
9152: PPUSH
9153: CALL_OW 67
// ComMoveToArea ( KurtVeh , PlayerSpawn ) ;
9157: LD_EXP 18
9161: PPUSH
9162: LD_INT 4
9164: PPUSH
9165: CALL_OW 113
// wait ( 0 0$3 ) ;
9169: LD_INT 105
9171: PPUSH
9172: CALL_OW 67
// RemoveUnit ( Kurt ) ;
9176: LD_EXP 17
9180: PPUSH
9181: CALL_OW 64
// RemoveUnit ( KurtVeh ) ;
9185: LD_EXP 18
9189: PPUSH
9190: CALL_OW 64
// wait ( 0 0$3 ) ;
9194: LD_INT 105
9196: PPUSH
9197: CALL_OW 67
// if payForHelp then
9201: LD_VAR 0 14
9205: IFFALSE 9263
// begin HiddenCamera ( 36 , 57 , 1 ) ;
9207: LD_INT 36
9209: PPUSH
9210: LD_INT 57
9212: PPUSH
9213: LD_INT 1
9215: PPUSH
9216: CALL_OW 244
// HiddenCamera ( 51 , 63 , 1 ) ;
9220: LD_INT 51
9222: PPUSH
9223: LD_INT 63
9225: PPUSH
9226: LD_INT 1
9228: PPUSH
9229: CALL_OW 244
// HiddenCamera ( 93 , 65 , 1 ) ;
9233: LD_INT 93
9235: PPUSH
9236: LD_INT 65
9238: PPUSH
9239: LD_INT 1
9241: PPUSH
9242: CALL_OW 244
// HiddenCamera ( 42 , 12 , 1 ) ;
9246: LD_INT 42
9248: PPUSH
9249: LD_INT 12
9251: PPUSH
9252: LD_INT 1
9254: PPUSH
9255: CALL_OW 244
// PrepareLegionForPlayer ;
9259: CALL 4762 0 0
// end ; end ;
9263: LD_VAR 0 1
9267: RET
// every 0 0$10 trigger warWithLegion = 1 do
9268: LD_EXP 23
9272: PUSH
9273: LD_INT 1
9275: EQUAL
9276: IFFALSE 9292
9278: GO 9280
9280: DISABLE
// begin wait ( 0 0$30 ) ;
9281: LD_INT 1050
9283: PPUSH
9284: CALL_OW 67
// PrepareAttackLegion ;
9288: CALL 5426 0 0
// end ;
9292: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_tag , 17 ] , [ f_placed ] ] ) do var i ;
9293: LD_INT 120
9295: PUSH
9296: LD_INT 17
9298: PUSH
9299: EMPTY
9300: LIST
9301: LIST
9302: PUSH
9303: LD_INT 52
9305: PUSH
9306: EMPTY
9307: LIST
9308: PUSH
9309: EMPTY
9310: LIST
9311: LIST
9312: PPUSH
9313: CALL_OW 69
9317: IFFALSE 9462
9319: GO 9321
9321: DISABLE
9322: LD_INT 0
9324: PPUSH
// begin enable ;
9325: ENABLE
// for i in FilterAllUnits ( [ [ f_tag , 17 ] , [ f_placed ] ] ) do
9326: LD_ADDR_VAR 0 1
9330: PUSH
9331: LD_INT 120
9333: PUSH
9334: LD_INT 17
9336: PUSH
9337: EMPTY
9338: LIST
9339: LIST
9340: PUSH
9341: LD_INT 52
9343: PUSH
9344: EMPTY
9345: LIST
9346: PUSH
9347: EMPTY
9348: LIST
9349: LIST
9350: PPUSH
9351: CALL_OW 69
9355: PUSH
9356: FOR_IN
9357: IFFALSE 9460
// begin if GetMultiCargo ( i ) [ 4 ] = 0 and GetSide ( i ) = 1 then
9359: LD_VAR 0 1
9363: PPUSH
9364: CALL 78370 0 1
9368: PUSH
9369: LD_INT 4
9371: ARRAY
9372: PUSH
9373: LD_INT 0
9375: EQUAL
9376: PUSH
9377: LD_VAR 0 1
9381: PPUSH
9382: CALL_OW 255
9386: PUSH
9387: LD_INT 1
9389: EQUAL
9390: AND
9391: IFFALSE 9405
// SetSide ( i , 4 ) ;
9393: LD_VAR 0 1
9397: PPUSH
9398: LD_INT 4
9400: PPUSH
9401: CALL_OW 235
// if GetSide ( i ) = 4 then
9405: LD_VAR 0 1
9409: PPUSH
9410: CALL_OW 255
9414: PUSH
9415: LD_INT 4
9417: EQUAL
9418: IFFALSE 9458
// if not IsInArea ( i , PlayerSpawn ) then
9420: LD_VAR 0 1
9424: PPUSH
9425: LD_INT 4
9427: PPUSH
9428: CALL_OW 308
9432: NOT
9433: IFFALSE 9449
// ComMoveToArea ( i , PlayerSpawn ) else
9435: LD_VAR 0 1
9439: PPUSH
9440: LD_INT 4
9442: PPUSH
9443: CALL_OW 113
9447: GO 9458
// RemoveUnit ( i ) ;
9449: LD_VAR 0 1
9453: PPUSH
9454: CALL_OW 64
// end ;
9458: GO 9356
9460: POP
9461: POP
// end ;
9462: PPOPN 1
9464: END
// every 0 0$1 trigger secondPass = 1 do var i , enemyVehs , dec ;
9465: LD_EXP 20
9469: PUSH
9470: LD_INT 1
9472: EQUAL
9473: IFFALSE 9912
9475: GO 9477
9477: DISABLE
9478: LD_INT 0
9480: PPUSH
9481: PPUSH
9482: PPUSH
// begin enable ;
9483: ENABLE
// enemyVehs = FilterUnitsInArea ( HillArea1 , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ;
9484: LD_ADDR_VAR 0 2
9488: PUSH
9489: LD_INT 12
9491: PPUSH
9492: LD_INT 22
9494: PUSH
9495: LD_INT 3
9497: PUSH
9498: EMPTY
9499: LIST
9500: LIST
9501: PUSH
9502: LD_INT 21
9504: PUSH
9505: LD_INT 2
9507: PUSH
9508: EMPTY
9509: LIST
9510: LIST
9511: PUSH
9512: EMPTY
9513: LIST
9514: LIST
9515: PPUSH
9516: CALL_OW 70
9520: ST_TO_ADDR
// for i in enemyVehs do
9521: LD_ADDR_VAR 0 1
9525: PUSH
9526: LD_VAR 0 2
9530: PUSH
9531: FOR_IN
9532: IFFALSE 9910
// begin if See ( 1 , i ) then
9534: LD_INT 1
9536: PPUSH
9537: LD_VAR 0 1
9541: PPUSH
9542: CALL_OW 292
9546: IFFALSE 9908
// begin disable ;
9548: DISABLE
// DialogueOn ;
9549: CALL_OW 6
// CenterNowOnUnits ( i ) ;
9553: LD_VAR 0 1
9557: PPUSH
9558: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1-Sol1-1 , DT1-FSol1-1 ) ;
9562: LD_INT 22
9564: PUSH
9565: LD_INT 1
9567: PUSH
9568: EMPTY
9569: LIST
9570: LIST
9571: PUSH
9572: LD_INT 26
9574: PUSH
9575: LD_INT 1
9577: PUSH
9578: EMPTY
9579: LIST
9580: LIST
9581: PUSH
9582: LD_INT 2
9584: PUSH
9585: LD_INT 25
9587: PUSH
9588: LD_INT 1
9590: PUSH
9591: EMPTY
9592: LIST
9593: LIST
9594: PUSH
9595: LD_INT 25
9597: PUSH
9598: LD_INT 2
9600: PUSH
9601: EMPTY
9602: LIST
9603: LIST
9604: PUSH
9605: LD_INT 25
9607: PUSH
9608: LD_INT 3
9610: PUSH
9611: EMPTY
9612: LIST
9613: LIST
9614: PUSH
9615: LD_INT 25
9617: PUSH
9618: LD_INT 4
9620: PUSH
9621: EMPTY
9622: LIST
9623: LIST
9624: PUSH
9625: LD_INT 25
9627: PUSH
9628: LD_INT 5
9630: PUSH
9631: EMPTY
9632: LIST
9633: LIST
9634: PUSH
9635: LD_INT 25
9637: PUSH
9638: LD_INT 8
9640: PUSH
9641: EMPTY
9642: LIST
9643: LIST
9644: PUSH
9645: EMPTY
9646: LIST
9647: LIST
9648: LIST
9649: LIST
9650: LIST
9651: LIST
9652: LIST
9653: PUSH
9654: EMPTY
9655: LIST
9656: LIST
9657: LIST
9658: PPUSH
9659: CALL_OW 69
9663: PPUSH
9664: LD_STRING DT1-Sol1-1
9666: PPUSH
9667: LD_STRING DT1-FSol1-1
9669: PPUSH
9670: CALL 12098 0 3
// dec = ShowQuery2 ;
9674: LD_ADDR_VAR 0 3
9678: PUSH
9679: CALL 12582 0 0
9683: ST_TO_ADDR
// if dec = 1 then
9684: LD_VAR 0 3
9688: PUSH
9689: LD_INT 1
9691: EQUAL
9692: IFFALSE 9798
// begin Say ( JMM , D2-JMM-1 ) ;
9694: LD_EXP 1
9698: PPUSH
9699: LD_STRING D2-JMM-1
9701: PPUSH
9702: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
9706: LD_EXP 15
9710: PPUSH
9711: LD_STRING D2-Pow-1
9713: PPUSH
9714: CALL_OW 94
// Say ( JMM , D2a-JMM-1 ) ;
9718: LD_EXP 1
9722: PPUSH
9723: LD_STRING D2a-JMM-1
9725: PPUSH
9726: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-1 ) ;
9730: LD_EXP 15
9734: PPUSH
9735: LD_STRING D2a-Pow-1
9737: PPUSH
9738: CALL_OW 94
// Say ( JMM , D2a-JMM-2 ) ;
9742: LD_EXP 1
9746: PPUSH
9747: LD_STRING D2a-JMM-2
9749: PPUSH
9750: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
9754: LD_EXP 15
9758: PPUSH
9759: LD_STRING D2a-Pow-2
9761: PPUSH
9762: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
9766: LD_EXP 1
9770: PPUSH
9771: LD_STRING D2a-JMM-3
9773: PPUSH
9774: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
9778: LD_EXP 15
9782: PPUSH
9783: LD_STRING D2a-Pow-3
9785: PPUSH
9786: CALL_OW 94
// secondPass = 2 ;
9790: LD_ADDR_EXP 20
9794: PUSH
9795: LD_INT 2
9797: ST_TO_ADDR
// end ; if dec = 2 then
9798: LD_VAR 0 3
9802: PUSH
9803: LD_INT 2
9805: EQUAL
9806: IFFALSE 9900
// begin Say ( JMM , D2-JMM-1 ) ;
9808: LD_EXP 1
9812: PPUSH
9813: LD_STRING D2-JMM-1
9815: PPUSH
9816: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
9820: LD_EXP 15
9824: PPUSH
9825: LD_STRING D2-Pow-1
9827: PPUSH
9828: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
9832: LD_EXP 1
9836: PPUSH
9837: LD_STRING D2b-JMM-1
9839: PPUSH
9840: CALL_OW 88
// SayRadio ( Powell , D2b-Pow-1 ) ;
9844: LD_EXP 15
9848: PPUSH
9849: LD_STRING D2b-Pow-1
9851: PPUSH
9852: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
9856: LD_EXP 1
9860: PPUSH
9861: LD_STRING D2c-JMM-1
9863: PPUSH
9864: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
9868: LD_EXP 15
9872: PPUSH
9873: LD_STRING D2c-Pow-1
9875: PPUSH
9876: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
9880: LD_EXP 1
9884: PPUSH
9885: LD_STRING D2c-JMM-2
9887: PPUSH
9888: CALL_OW 88
// secondPass = 2 ;
9892: LD_ADDR_EXP 20
9896: PUSH
9897: LD_INT 2
9899: ST_TO_ADDR
// end ; DialogueOff ;
9900: CALL_OW 7
// exit ;
9904: POP
9905: POP
9906: GO 9912
// end ; end ;
9908: GO 9531
9910: POP
9911: POP
// end ;
9912: PPOPN 3
9914: END
// every 0 0$1 trigger vehicleTeleported = 1 and FilterUnitsInArea ( OutsideArea1 , [ f_side , 3 ] ) do var vehicles ;
9915: LD_EXP 21
9919: PUSH
9920: LD_INT 1
9922: EQUAL
9923: PUSH
9924: LD_INT 11
9926: PPUSH
9927: LD_INT 22
9929: PUSH
9930: LD_INT 3
9932: PUSH
9933: EMPTY
9934: LIST
9935: LIST
9936: PPUSH
9937: CALL_OW 70
9941: AND
9942: IFFALSE 10170
9944: GO 9946
9946: DISABLE
9947: LD_INT 0
9949: PPUSH
// begin vehicles := FilterUnitsInArea ( OutsideArea1 , [ f_side , 3 ] ) ;
9950: LD_ADDR_VAR 0 1
9954: PUSH
9955: LD_INT 11
9957: PPUSH
9958: LD_INT 22
9960: PUSH
9961: LD_INT 3
9963: PUSH
9964: EMPTY
9965: LIST
9966: LIST
9967: PPUSH
9968: CALL_OW 70
9972: ST_TO_ADDR
// if not vehicles then
9973: LD_VAR 0 1
9977: NOT
9978: IFFALSE 9982
// exit ;
9980: GO 10170
// repeat wait ( 0 0$1 ) ;
9982: LD_INT 35
9984: PPUSH
9985: CALL_OW 67
// until UnitFilter ( vehicles , [ f_see , 1 ] ) ;
9989: LD_VAR 0 1
9993: PPUSH
9994: LD_INT 101
9996: PUSH
9997: LD_INT 1
9999: PUSH
10000: EMPTY
10001: LIST
10002: LIST
10003: PPUSH
10004: CALL_OW 72
10008: IFFALSE 9982
// CenterNowOnUnits ( UnitFilter ( vehicles , [ f_see , 1 ] ) [ 1 ] ) ;
10010: LD_VAR 0 1
10014: PPUSH
10015: LD_INT 101
10017: PUSH
10018: LD_INT 1
10020: PUSH
10021: EMPTY
10022: LIST
10023: LIST
10024: PPUSH
10025: CALL_OW 72
10029: PUSH
10030: LD_INT 1
10032: ARRAY
10033: PPUSH
10034: CALL_OW 87
// DialogueOn ;
10038: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1-Sol1-1 , DT1-FSol1-1 ) ;
10042: LD_INT 22
10044: PUSH
10045: LD_INT 1
10047: PUSH
10048: EMPTY
10049: LIST
10050: LIST
10051: PUSH
10052: LD_INT 26
10054: PUSH
10055: LD_INT 1
10057: PUSH
10058: EMPTY
10059: LIST
10060: LIST
10061: PUSH
10062: LD_INT 2
10064: PUSH
10065: LD_INT 25
10067: PUSH
10068: LD_INT 1
10070: PUSH
10071: EMPTY
10072: LIST
10073: LIST
10074: PUSH
10075: LD_INT 25
10077: PUSH
10078: LD_INT 2
10080: PUSH
10081: EMPTY
10082: LIST
10083: LIST
10084: PUSH
10085: LD_INT 25
10087: PUSH
10088: LD_INT 3
10090: PUSH
10091: EMPTY
10092: LIST
10093: LIST
10094: PUSH
10095: LD_INT 25
10097: PUSH
10098: LD_INT 4
10100: PUSH
10101: EMPTY
10102: LIST
10103: LIST
10104: PUSH
10105: LD_INT 25
10107: PUSH
10108: LD_INT 5
10110: PUSH
10111: EMPTY
10112: LIST
10113: LIST
10114: PUSH
10115: LD_INT 25
10117: PUSH
10118: LD_INT 8
10120: PUSH
10121: EMPTY
10122: LIST
10123: LIST
10124: PUSH
10125: EMPTY
10126: LIST
10127: LIST
10128: LIST
10129: LIST
10130: LIST
10131: LIST
10132: LIST
10133: PUSH
10134: EMPTY
10135: LIST
10136: LIST
10137: LIST
10138: PPUSH
10139: CALL_OW 69
10143: PPUSH
10144: LD_STRING DT1-Sol1-1
10146: PPUSH
10147: LD_STRING DT1-FSol1-1
10149: PPUSH
10150: CALL 12098 0 3
// Say ( JMM , DT1-JMM-1 ) ;
10154: LD_EXP 1
10158: PPUSH
10159: LD_STRING DT1-JMM-1
10161: PPUSH
10162: CALL_OW 88
// DialogueOff ;
10166: CALL_OW 7
// end ;
10170: PPOPN 1
10172: END
// every 0 0$10 trigger vehicleTeleported = 1 and FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) = 0 and tpCounter do
10173: LD_EXP 21
10177: PUSH
10178: LD_INT 1
10180: EQUAL
10181: PUSH
10182: LD_INT 11
10184: PPUSH
10185: LD_INT 22
10187: PUSH
10188: LD_INT 3
10190: PUSH
10191: EMPTY
10192: LIST
10193: LIST
10194: PUSH
10195: LD_INT 50
10197: PUSH
10198: EMPTY
10199: LIST
10200: PUSH
10201: LD_INT 2
10203: PUSH
10204: LD_INT 21
10206: PUSH
10207: LD_INT 2
10209: PUSH
10210: EMPTY
10211: LIST
10212: LIST
10213: PUSH
10214: LD_INT 21
10216: PUSH
10217: LD_INT 1
10219: PUSH
10220: EMPTY
10221: LIST
10222: LIST
10223: PUSH
10224: EMPTY
10225: LIST
10226: LIST
10227: LIST
10228: PUSH
10229: EMPTY
10230: LIST
10231: LIST
10232: LIST
10233: PPUSH
10234: CALL_OW 70
10238: PUSH
10239: LD_INT 0
10241: EQUAL
10242: AND
10243: PUSH
10244: LD_EXP 22
10248: AND
10249: IFFALSE 10406
10251: GO 10253
10253: DISABLE
// begin vehicleTeleported = 2 ;
10254: LD_ADDR_EXP 21
10258: PUSH
10259: LD_INT 2
10261: ST_TO_ADDR
// DialogueOn ;
10262: CALL_OW 6
// Say ( JMM , DT1a-JMM-1 ) ;
10266: LD_EXP 1
10270: PPUSH
10271: LD_STRING DT1a-JMM-1
10273: PPUSH
10274: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1a-Sol1-1 , DT1a-FSol1-1 ) ;
10278: LD_INT 22
10280: PUSH
10281: LD_INT 1
10283: PUSH
10284: EMPTY
10285: LIST
10286: LIST
10287: PUSH
10288: LD_INT 26
10290: PUSH
10291: LD_INT 1
10293: PUSH
10294: EMPTY
10295: LIST
10296: LIST
10297: PUSH
10298: LD_INT 2
10300: PUSH
10301: LD_INT 25
10303: PUSH
10304: LD_INT 1
10306: PUSH
10307: EMPTY
10308: LIST
10309: LIST
10310: PUSH
10311: LD_INT 25
10313: PUSH
10314: LD_INT 2
10316: PUSH
10317: EMPTY
10318: LIST
10319: LIST
10320: PUSH
10321: LD_INT 25
10323: PUSH
10324: LD_INT 3
10326: PUSH
10327: EMPTY
10328: LIST
10329: LIST
10330: PUSH
10331: LD_INT 25
10333: PUSH
10334: LD_INT 4
10336: PUSH
10337: EMPTY
10338: LIST
10339: LIST
10340: PUSH
10341: LD_INT 25
10343: PUSH
10344: LD_INT 5
10346: PUSH
10347: EMPTY
10348: LIST
10349: LIST
10350: PUSH
10351: LD_INT 25
10353: PUSH
10354: LD_INT 8
10356: PUSH
10357: EMPTY
10358: LIST
10359: LIST
10360: PUSH
10361: EMPTY
10362: LIST
10363: LIST
10364: LIST
10365: LIST
10366: LIST
10367: LIST
10368: LIST
10369: PUSH
10370: EMPTY
10371: LIST
10372: LIST
10373: LIST
10374: PPUSH
10375: CALL_OW 69
10379: PPUSH
10380: LD_STRING DT1a-Sol1-1
10382: PPUSH
10383: LD_STRING DT1a-FSol1-1
10385: PPUSH
10386: CALL 12098 0 3
// Say ( JMM , DT1a-JMM-2 ) ;
10390: LD_EXP 1
10394: PPUSH
10395: LD_STRING DT1a-JMM-2
10397: PPUSH
10398: CALL_OW 88
// DialogueOff ;
10402: CALL_OW 7
// end ;
10406: END
// every 0 0$2 trigger vehicleTeleported = 3 and FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_see , 1 ] ] ) do var i , vehicles , speaker ;
10407: LD_EXP 21
10411: PUSH
10412: LD_INT 3
10414: EQUAL
10415: PUSH
10416: LD_INT 11
10418: PPUSH
10419: LD_INT 22
10421: PUSH
10422: LD_INT 3
10424: PUSH
10425: EMPTY
10426: LIST
10427: LIST
10428: PUSH
10429: LD_INT 101
10431: PUSH
10432: LD_INT 1
10434: PUSH
10435: EMPTY
10436: LIST
10437: LIST
10438: PUSH
10439: EMPTY
10440: LIST
10441: LIST
10442: PPUSH
10443: CALL_OW 70
10447: AND
10448: IFFALSE 10722
10450: GO 10452
10452: DISABLE
10453: LD_INT 0
10455: PPUSH
10456: PPUSH
10457: PPUSH
// begin wait ( 0 0$0.3 ) ;
10458: LD_INT 10
10460: PPUSH
10461: CALL_OW 67
// DialogueOn ;
10465: CALL_OW 6
// speaker := DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT2-Sol1-1 , DT2-FSol1-1 ) ;
10469: LD_ADDR_VAR 0 3
10473: PUSH
10474: LD_INT 22
10476: PUSH
10477: LD_INT 1
10479: PUSH
10480: EMPTY
10481: LIST
10482: LIST
10483: PUSH
10484: LD_INT 26
10486: PUSH
10487: LD_INT 1
10489: PUSH
10490: EMPTY
10491: LIST
10492: LIST
10493: PUSH
10494: LD_INT 2
10496: PUSH
10497: LD_INT 25
10499: PUSH
10500: LD_INT 1
10502: PUSH
10503: EMPTY
10504: LIST
10505: LIST
10506: PUSH
10507: LD_INT 25
10509: PUSH
10510: LD_INT 2
10512: PUSH
10513: EMPTY
10514: LIST
10515: LIST
10516: PUSH
10517: LD_INT 25
10519: PUSH
10520: LD_INT 3
10522: PUSH
10523: EMPTY
10524: LIST
10525: LIST
10526: PUSH
10527: LD_INT 25
10529: PUSH
10530: LD_INT 4
10532: PUSH
10533: EMPTY
10534: LIST
10535: LIST
10536: PUSH
10537: LD_INT 25
10539: PUSH
10540: LD_INT 5
10542: PUSH
10543: EMPTY
10544: LIST
10545: LIST
10546: PUSH
10547: LD_INT 25
10549: PUSH
10550: LD_INT 8
10552: PUSH
10553: EMPTY
10554: LIST
10555: LIST
10556: PUSH
10557: EMPTY
10558: LIST
10559: LIST
10560: LIST
10561: LIST
10562: LIST
10563: LIST
10564: LIST
10565: PUSH
10566: EMPTY
10567: LIST
10568: LIST
10569: LIST
10570: PPUSH
10571: CALL_OW 69
10575: PPUSH
10576: LD_STRING DT2-Sol1-1
10578: PPUSH
10579: LD_STRING DT2-FSol1-1
10581: PPUSH
10582: CALL 12098 0 3
10586: ST_TO_ADDR
// DialogueOff ;
10587: CALL_OW 7
// repeat wait ( 0 0$1 ) ;
10591: LD_INT 35
10593: PPUSH
10594: CALL_OW 67
// until not FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_ok ] ] ) ;
10598: LD_INT 11
10600: PPUSH
10601: LD_INT 22
10603: PUSH
10604: LD_INT 3
10606: PUSH
10607: EMPTY
10608: LIST
10609: LIST
10610: PUSH
10611: LD_INT 50
10613: PUSH
10614: EMPTY
10615: LIST
10616: PUSH
10617: EMPTY
10618: LIST
10619: LIST
10620: PPUSH
10621: CALL_OW 70
10625: NOT
10626: IFFALSE 10591
// wait ( 0 0$2 ) ;
10628: LD_INT 70
10630: PPUSH
10631: CALL_OW 67
// vehicleTeleported = 4 ;
10635: LD_ADDR_EXP 21
10639: PUSH
10640: LD_INT 4
10642: ST_TO_ADDR
// DialogueOn ;
10643: CALL_OW 6
// Say ( JMM , DT2a-JMM-1 ) ;
10647: LD_EXP 1
10651: PPUSH
10652: LD_STRING DT2a-JMM-1
10654: PPUSH
10655: CALL_OW 88
// if speaker then
10659: LD_VAR 0 3
10663: IFFALSE 10706
// if GetSex ( speaker ) = 1 then
10665: LD_VAR 0 3
10669: PPUSH
10670: CALL_OW 258
10674: PUSH
10675: LD_INT 1
10677: EQUAL
10678: IFFALSE 10694
// Say ( speaker , DT2a-Sol1-1 ) else
10680: LD_VAR 0 3
10684: PPUSH
10685: LD_STRING DT2a-Sol1-1
10687: PPUSH
10688: CALL_OW 88
10692: GO 10706
// Say ( speaker , DT2a-FSol1-1 ) ;
10694: LD_VAR 0 3
10698: PPUSH
10699: LD_STRING DT2a-FSol1-1
10701: PPUSH
10702: CALL_OW 88
// Say ( Donaldson , DT2a-Don-1 ) ;
10706: LD_EXP 3
10710: PPUSH
10711: LD_STRING DT2a-Don-1
10713: PPUSH
10714: CALL_OW 88
// DialogueOff ;
10718: CALL_OW 7
// end ;
10722: PPOPN 3
10724: END
// every 0 0$1 trigger SeeXY ( 1 , 45 , 74 ) do
10725: LD_INT 1
10727: PPUSH
10728: LD_INT 45
10730: PPUSH
10731: LD_INT 74
10733: PPUSH
10734: CALL_OW 293
10738: IFFALSE 10902
10740: GO 10742
10742: DISABLE
// begin DialogueOn ;
10743: CALL_OW 6
// CenterOnXY ( 36 , 55 ) ;
10747: LD_INT 36
10749: PPUSH
10750: LD_INT 55
10752: PPUSH
10753: CALL_OW 84
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D5-Sol1-1 , D5-FSol1- ) ;
10757: LD_INT 22
10759: PUSH
10760: LD_INT 1
10762: PUSH
10763: EMPTY
10764: LIST
10765: LIST
10766: PUSH
10767: LD_INT 26
10769: PUSH
10770: LD_INT 1
10772: PUSH
10773: EMPTY
10774: LIST
10775: LIST
10776: PUSH
10777: LD_INT 2
10779: PUSH
10780: LD_INT 25
10782: PUSH
10783: LD_INT 1
10785: PUSH
10786: EMPTY
10787: LIST
10788: LIST
10789: PUSH
10790: LD_INT 25
10792: PUSH
10793: LD_INT 2
10795: PUSH
10796: EMPTY
10797: LIST
10798: LIST
10799: PUSH
10800: LD_INT 25
10802: PUSH
10803: LD_INT 3
10805: PUSH
10806: EMPTY
10807: LIST
10808: LIST
10809: PUSH
10810: LD_INT 25
10812: PUSH
10813: LD_INT 4
10815: PUSH
10816: EMPTY
10817: LIST
10818: LIST
10819: PUSH
10820: LD_INT 25
10822: PUSH
10823: LD_INT 5
10825: PUSH
10826: EMPTY
10827: LIST
10828: LIST
10829: PUSH
10830: LD_INT 25
10832: PUSH
10833: LD_INT 8
10835: PUSH
10836: EMPTY
10837: LIST
10838: LIST
10839: PUSH
10840: EMPTY
10841: LIST
10842: LIST
10843: LIST
10844: LIST
10845: LIST
10846: LIST
10847: LIST
10848: PUSH
10849: EMPTY
10850: LIST
10851: LIST
10852: LIST
10853: PPUSH
10854: CALL_OW 69
10858: PPUSH
10859: LD_STRING D5-Sol1-1
10861: PPUSH
10862: LD_STRING D5-FSol1-
10864: PPUSH
10865: CALL 12098 0 3
// if warWithLegion and IsOk ( Donaldson ) then
10869: LD_EXP 23
10873: PUSH
10874: LD_EXP 3
10878: PPUSH
10879: CALL_OW 302
10883: AND
10884: IFFALSE 10898
// Say ( Donaldson , D5-Don-1 ) ;
10886: LD_EXP 3
10890: PPUSH
10891: LD_STRING D5-Don-1
10893: PPUSH
10894: CALL_OW 88
// DialogueOff ;
10898: CALL_OW 7
// end ;
10902: END
// every 0 0$1 trigger See ( 1 , ruteleprt ) or See ( 1 , rutp ) do
10903: LD_INT 1
10905: PPUSH
10906: LD_INT 10
10908: PPUSH
10909: CALL_OW 292
10913: PUSH
10914: LD_INT 1
10916: PPUSH
10917: LD_INT 137
10919: PPUSH
10920: CALL_OW 292
10924: OR
10925: IFFALSE 11069
10927: GO 10929
10929: DISABLE
// begin DialogueOn ;
10930: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT3-Sol1-1 , DT3-FSol1-1 ) ;
10934: LD_INT 22
10936: PUSH
10937: LD_INT 1
10939: PUSH
10940: EMPTY
10941: LIST
10942: LIST
10943: PUSH
10944: LD_INT 26
10946: PUSH
10947: LD_INT 1
10949: PUSH
10950: EMPTY
10951: LIST
10952: LIST
10953: PUSH
10954: LD_INT 2
10956: PUSH
10957: LD_INT 25
10959: PUSH
10960: LD_INT 1
10962: PUSH
10963: EMPTY
10964: LIST
10965: LIST
10966: PUSH
10967: LD_INT 25
10969: PUSH
10970: LD_INT 2
10972: PUSH
10973: EMPTY
10974: LIST
10975: LIST
10976: PUSH
10977: LD_INT 25
10979: PUSH
10980: LD_INT 3
10982: PUSH
10983: EMPTY
10984: LIST
10985: LIST
10986: PUSH
10987: LD_INT 25
10989: PUSH
10990: LD_INT 4
10992: PUSH
10993: EMPTY
10994: LIST
10995: LIST
10996: PUSH
10997: LD_INT 25
10999: PUSH
11000: LD_INT 5
11002: PUSH
11003: EMPTY
11004: LIST
11005: LIST
11006: PUSH
11007: LD_INT 25
11009: PUSH
11010: LD_INT 8
11012: PUSH
11013: EMPTY
11014: LIST
11015: LIST
11016: PUSH
11017: EMPTY
11018: LIST
11019: LIST
11020: LIST
11021: LIST
11022: LIST
11023: LIST
11024: LIST
11025: PUSH
11026: EMPTY
11027: LIST
11028: LIST
11029: LIST
11030: PPUSH
11031: CALL_OW 69
11035: PPUSH
11036: LD_STRING DT3-Sol1-1
11038: PPUSH
11039: LD_STRING DT3-FSol1-1
11041: PPUSH
11042: CALL 12098 0 3
// Say ( JMM , DT3-JMM-1 ) ;
11046: LD_EXP 1
11050: PPUSH
11051: LD_STRING DT3-JMM-1
11053: PPUSH
11054: CALL_OW 88
// DialogueOff ;
11058: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
11062: LD_STRING M2
11064: PPUSH
11065: CALL_OW 337
// end ;
11069: END
// every 0 0$1 trigger ruEscape = 0 and ( FilterUnitsInArea ( RuEastBase , [ f_side , 1 ] ) or FilterUnitsInArea ( RuEastBase , [ [ f_side , 3 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ) do
11070: LD_EXP 35
11074: PUSH
11075: LD_INT 0
11077: EQUAL
11078: PUSH
11079: LD_INT 10
11081: PPUSH
11082: LD_INT 22
11084: PUSH
11085: LD_INT 1
11087: PUSH
11088: EMPTY
11089: LIST
11090: LIST
11091: PPUSH
11092: CALL_OW 70
11096: PUSH
11097: LD_INT 10
11099: PPUSH
11100: LD_INT 22
11102: PUSH
11103: LD_INT 3
11105: PUSH
11106: EMPTY
11107: LIST
11108: LIST
11109: PUSH
11110: LD_INT 3
11112: PUSH
11113: LD_INT 24
11115: PUSH
11116: LD_INT 1000
11118: PUSH
11119: EMPTY
11120: LIST
11121: LIST
11122: PUSH
11123: EMPTY
11124: LIST
11125: LIST
11126: PUSH
11127: LD_INT 21
11129: PUSH
11130: LD_INT 2
11132: PUSH
11133: EMPTY
11134: LIST
11135: LIST
11136: PUSH
11137: LD_INT 58
11139: PUSH
11140: EMPTY
11141: LIST
11142: PUSH
11143: EMPTY
11144: LIST
11145: LIST
11146: LIST
11147: LIST
11148: PPUSH
11149: CALL_OW 70
11153: OR
11154: AND
11155: IFFALSE 11168
11157: GO 11159
11159: DISABLE
// ruEscape := 1 ;
11160: LD_ADDR_EXP 35
11164: PUSH
11165: LD_INT 1
11167: ST_TO_ADDR
11168: END
// every 0 0$3 trigger IsDying ( ruheadlab ) or IsDying ( rueastdepot ) or FilterUnitsInArea ( EscapeTriggerArea , [ f_side , 1 ] ) > 0 or ruEscape = 1 do var i , unit , tmp ;
11169: LD_INT 3
11171: PPUSH
11172: CALL_OW 303
11176: PUSH
11177: LD_INT 4
11179: PPUSH
11180: CALL_OW 303
11184: OR
11185: PUSH
11186: LD_INT 22
11188: PPUSH
11189: LD_INT 22
11191: PUSH
11192: LD_INT 1
11194: PUSH
11195: EMPTY
11196: LIST
11197: LIST
11198: PPUSH
11199: CALL_OW 70
11203: PUSH
11204: LD_INT 0
11206: GREATER
11207: OR
11208: PUSH
11209: LD_EXP 35
11213: PUSH
11214: LD_INT 1
11216: EQUAL
11217: OR
11218: IFFALSE 11766
11220: GO 11222
11222: DISABLE
11223: LD_INT 0
11225: PPUSH
11226: PPUSH
11227: PPUSH
// begin ruAI := 0 ;
11228: LD_ADDR_EXP 34
11232: PUSH
11233: LD_INT 0
11235: ST_TO_ADDR
// ComExitBuilding ( RuScientists ) ;
11236: LD_EXP 27
11240: PPUSH
11241: CALL_OW 122
// wait ( 0 0$1 ) ;
11245: LD_INT 35
11247: PPUSH
11248: CALL_OW 67
// DialogueOn ;
11252: CALL_OW 6
// PlaceSeeing ( 75 , 21 , 1 , 12 ) ;
11256: LD_INT 75
11258: PPUSH
11259: LD_INT 21
11261: PPUSH
11262: LD_INT 1
11264: PPUSH
11265: LD_INT 12
11267: PPUSH
11268: CALL_OW 330
// CenterNowOnXY ( 75 , 21 ) ;
11272: LD_INT 75
11274: PPUSH
11275: LD_INT 21
11277: PPUSH
11278: CALL_OW 86
// dwait ( 0 0$0.3 ) ;
11282: LD_INT 10
11284: PPUSH
11285: CALL_OW 68
// Say ( JMM , D6-JMM-1 ) ;
11289: LD_EXP 1
11293: PPUSH
11294: LD_STRING D6-JMM-1
11296: PPUSH
11297: CALL_OW 88
// RemoveSeeing ( 75 , 21 , 1 ) ;
11301: LD_INT 75
11303: PPUSH
11304: LD_INT 21
11306: PPUSH
11307: LD_INT 1
11309: PPUSH
11310: CALL_OW 331
// DialogueOff ;
11314: CALL_OW 7
// for i in RuScientists do
11318: LD_ADDR_VAR 0 1
11322: PUSH
11323: LD_EXP 27
11327: PUSH
11328: FOR_IN
11329: IFFALSE 11365
// begin SetSide ( i , 6 ) ;
11331: LD_VAR 0 1
11335: PPUSH
11336: LD_INT 6
11338: PPUSH
11339: CALL_OW 235
// SetTag ( i , rand ( 1 , 3 ) ) ;
11343: LD_VAR 0 1
11347: PPUSH
11348: LD_INT 1
11350: PPUSH
11351: LD_INT 3
11353: PPUSH
11354: CALL_OW 12
11358: PPUSH
11359: CALL_OW 109
// end ;
11363: GO 11328
11365: POP
11366: POP
// repeat wait ( 0 0$1 ) ;
11367: LD_INT 35
11369: PPUSH
11370: CALL_OW 67
// for i in RuScientists do
11374: LD_ADDR_VAR 0 1
11378: PUSH
11379: LD_EXP 27
11383: PUSH
11384: FOR_IN
11385: IFFALSE 11757
// begin tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_dist , i , 10 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
11387: LD_ADDR_VAR 0 3
11391: PUSH
11392: LD_INT 22
11394: PUSH
11395: LD_INT 3
11397: PUSH
11398: EMPTY
11399: LIST
11400: LIST
11401: PUSH
11402: LD_INT 91
11404: PUSH
11405: LD_VAR 0 1
11409: PUSH
11410: LD_INT 10
11412: PUSH
11413: EMPTY
11414: LIST
11415: LIST
11416: LIST
11417: PUSH
11418: LD_INT 21
11420: PUSH
11421: LD_INT 2
11423: PUSH
11424: EMPTY
11425: LIST
11426: LIST
11427: PUSH
11428: LD_INT 58
11430: PUSH
11431: EMPTY
11432: LIST
11433: PUSH
11434: EMPTY
11435: LIST
11436: LIST
11437: LIST
11438: LIST
11439: PPUSH
11440: CALL_OW 69
11444: ST_TO_ADDR
// if tmp and not IsInUnit ( i ) then
11445: LD_VAR 0 3
11449: PUSH
11450: LD_VAR 0 1
11454: PPUSH
11455: CALL_OW 310
11459: NOT
11460: AND
11461: IFFALSE 11489
// begin ComEnterUnit ( i , NearestUnitToUnit ( tmp , i ) ) ;
11463: LD_VAR 0 1
11467: PPUSH
11468: LD_VAR 0 3
11472: PPUSH
11473: LD_VAR 0 1
11477: PPUSH
11478: CALL_OW 74
11482: PPUSH
11483: CALL_OW 120
// continue ;
11487: GO 11384
// end ; if IsInUnit ( i ) then
11489: LD_VAR 0 1
11493: PPUSH
11494: CALL_OW 310
11498: IFFALSE 11517
// unit := IsInUnit ( i ) else
11500: LD_ADDR_VAR 0 2
11504: PUSH
11505: LD_VAR 0 1
11509: PPUSH
11510: CALL_OW 310
11514: ST_TO_ADDR
11515: GO 11527
// unit := i ;
11517: LD_ADDR_VAR 0 2
11521: PUSH
11522: LD_VAR 0 1
11526: ST_TO_ADDR
// case GetTag ( i ) of 1 :
11527: LD_VAR 0 1
11531: PPUSH
11532: CALL_OW 110
11536: PUSH
11537: LD_INT 1
11539: DOUBLE
11540: EQUAL
11541: IFTRUE 11545
11543: GO 11595
11545: POP
// begin if GetDistUnits ( unit , rutp ) < 13 then
11546: LD_VAR 0 2
11550: PPUSH
11551: LD_INT 137
11553: PPUSH
11554: CALL_OW 296
11558: PUSH
11559: LD_INT 13
11561: LESS
11562: IFFALSE 11578
// ComEnterUnit ( unit , rutp ) else
11564: LD_VAR 0 2
11568: PPUSH
11569: LD_INT 137
11571: PPUSH
11572: CALL_OW 120
11576: GO 11593
// ComMoveXY ( unit , 16 , 28 ) ;
11578: LD_VAR 0 2
11582: PPUSH
11583: LD_INT 16
11585: PPUSH
11586: LD_INT 28
11588: PPUSH
11589: CALL_OW 111
// end ; 2 :
11593: GO 11755
11595: LD_INT 2
11597: DOUBLE
11598: EQUAL
11599: IFTRUE 11603
11601: GO 11621
11603: POP
// ComMoveXY ( unit , 97 , 2 ) ; 3 :
11604: LD_VAR 0 2
11608: PPUSH
11609: LD_INT 97
11611: PPUSH
11612: LD_INT 2
11614: PPUSH
11615: CALL_OW 111
11619: GO 11755
11621: LD_INT 3
11623: DOUBLE
11624: EQUAL
11625: IFTRUE 11629
11627: GO 11679
11629: POP
// begin if GetDistUnits ( unit , rutp ) < 13 then
11630: LD_VAR 0 2
11634: PPUSH
11635: LD_INT 137
11637: PPUSH
11638: CALL_OW 296
11642: PUSH
11643: LD_INT 13
11645: LESS
11646: IFFALSE 11662
// ComEnterUnit ( unit , rutp ) else
11648: LD_VAR 0 2
11652: PPUSH
11653: LD_INT 137
11655: PPUSH
11656: CALL_OW 120
11660: GO 11677
// ComMoveXY ( unit , 128 , 155 ) ;
11662: LD_VAR 0 2
11666: PPUSH
11667: LD_INT 128
11669: PPUSH
11670: LD_INT 155
11672: PPUSH
11673: CALL_OW 111
// end ; 11 :
11677: GO 11755
11679: LD_INT 11
11681: DOUBLE
11682: EQUAL
11683: IFTRUE 11687
11685: GO 11705
11687: POP
// ComMoveXY ( unit , 16 , 28 ) ; 13 :
11688: LD_VAR 0 2
11692: PPUSH
11693: LD_INT 16
11695: PPUSH
11696: LD_INT 28
11698: PPUSH
11699: CALL_OW 111
11703: GO 11755
11705: LD_INT 13
11707: DOUBLE
11708: EQUAL
11709: IFTRUE 11713
11711: GO 11728
11713: POP
// ComEnterUnit ( unit , ruteleprt ) ; 23 :
11714: LD_VAR 0 2
11718: PPUSH
11719: LD_INT 10
11721: PPUSH
11722: CALL_OW 120
11726: GO 11755
11728: LD_INT 23
11730: DOUBLE
11731: EQUAL
11732: IFTRUE 11736
11734: GO 11754
11736: POP
// ComMoveXY ( unit , 128 , 155 ) ; end ;
11737: LD_VAR 0 2
11741: PPUSH
11742: LD_INT 128
11744: PPUSH
11745: LD_INT 155
11747: PPUSH
11748: CALL_OW 111
11752: GO 11755
11754: POP
// end ;
11755: GO 11384
11757: POP
11758: POP
// until not RuScientists ;
11759: LD_EXP 27
11763: NOT
11764: IFFALSE 11367
// end ;
11766: PPOPN 3
11768: END
// every 0 0$1 trigger ruAI = 0 and RuScientists and FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_inarea , EscapeArea1 ] , [ f_inarea , EscapeArea2 ] , [ f_inarea , EscapeArea3 ] ] ] ) do var i , unit , veh , tmp ;
11769: LD_EXP 34
11773: PUSH
11774: LD_INT 0
11776: EQUAL
11777: PUSH
11778: LD_EXP 27
11782: AND
11783: PUSH
11784: LD_INT 22
11786: PUSH
11787: LD_INT 6
11789: PUSH
11790: EMPTY
11791: LIST
11792: LIST
11793: PUSH
11794: LD_INT 2
11796: PUSH
11797: LD_INT 95
11799: PUSH
11800: LD_INT 13
11802: PUSH
11803: EMPTY
11804: LIST
11805: LIST
11806: PUSH
11807: LD_INT 95
11809: PUSH
11810: LD_INT 14
11812: PUSH
11813: EMPTY
11814: LIST
11815: LIST
11816: PUSH
11817: LD_INT 95
11819: PUSH
11820: LD_INT 27
11822: PUSH
11823: EMPTY
11824: LIST
11825: LIST
11826: PUSH
11827: EMPTY
11828: LIST
11829: LIST
11830: LIST
11831: LIST
11832: PUSH
11833: EMPTY
11834: LIST
11835: LIST
11836: PPUSH
11837: CALL_OW 69
11841: AND
11842: IFFALSE 12055
11844: GO 11846
11846: DISABLE
11847: LD_INT 0
11849: PPUSH
11850: PPUSH
11851: PPUSH
11852: PPUSH
// begin enable ;
11853: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_inarea , EscapeArea1 ] , [ f_inarea , EscapeArea2 ] , [ f_inarea , EscapeArea3 ] ] ] ) do
11854: LD_ADDR_VAR 0 1
11858: PUSH
11859: LD_INT 22
11861: PUSH
11862: LD_INT 6
11864: PUSH
11865: EMPTY
11866: LIST
11867: LIST
11868: PUSH
11869: LD_INT 2
11871: PUSH
11872: LD_INT 95
11874: PUSH
11875: LD_INT 13
11877: PUSH
11878: EMPTY
11879: LIST
11880: LIST
11881: PUSH
11882: LD_INT 95
11884: PUSH
11885: LD_INT 14
11887: PUSH
11888: EMPTY
11889: LIST
11890: LIST
11891: PUSH
11892: LD_INT 95
11894: PUSH
11895: LD_INT 27
11897: PUSH
11898: EMPTY
11899: LIST
11900: LIST
11901: PUSH
11902: EMPTY
11903: LIST
11904: LIST
11905: LIST
11906: LIST
11907: PUSH
11908: EMPTY
11909: LIST
11910: LIST
11911: PPUSH
11912: CALL_OW 69
11916: PUSH
11917: FOR_IN
11918: IFFALSE 12053
// begin if i in RuScientists then
11920: LD_VAR 0 1
11924: PUSH
11925: LD_EXP 27
11929: IN
11930: IFFALSE 11959
// begin RuScientists = RuScientists diff i ;
11932: LD_ADDR_EXP 27
11936: PUSH
11937: LD_EXP 27
11941: PUSH
11942: LD_VAR 0 1
11946: DIFF
11947: ST_TO_ADDR
// RemoveUnit ( i ) ;
11948: LD_VAR 0 1
11952: PPUSH
11953: CALL_OW 64
// continue ;
11957: GO 11917
// end ; if i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_control , control_manual ] ] ) then
11959: LD_VAR 0 1
11963: PUSH
11964: LD_INT 22
11966: PUSH
11967: LD_INT 6
11969: PUSH
11970: EMPTY
11971: LIST
11972: LIST
11973: PUSH
11974: LD_INT 33
11976: PUSH
11977: LD_INT 1
11979: PUSH
11980: EMPTY
11981: LIST
11982: LIST
11983: PUSH
11984: EMPTY
11985: LIST
11986: LIST
11987: PPUSH
11988: CALL_OW 69
11992: IN
11993: IFFALSE 12051
// begin if IsDrivenBy ( i ) in RuScientists then
11995: LD_VAR 0 1
11999: PPUSH
12000: CALL_OW 311
12004: PUSH
12005: LD_EXP 27
12009: IN
12010: IFFALSE 12028
// RuScientists = RuScientists diff i ;
12012: LD_ADDR_EXP 27
12016: PUSH
12017: LD_EXP 27
12021: PUSH
12022: LD_VAR 0 1
12026: DIFF
12027: ST_TO_ADDR
// RemoveUnit ( IsDrivenBy ( i ) ) ;
12028: LD_VAR 0 1
12032: PPUSH
12033: CALL_OW 311
12037: PPUSH
12038: CALL_OW 64
// RemoveUnit ( i ) ;
12042: LD_VAR 0 1
12046: PPUSH
12047: CALL_OW 64
// end ; end ;
12051: GO 11917
12053: POP
12054: POP
// end ; end_of_file
12055: PPOPN 4
12057: END
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
12058: LD_INT 0
12060: PPUSH
12061: PPUSH
// for i in charactersList do
12062: LD_ADDR_VAR 0 4
12066: PUSH
12067: LD_VAR 0 1
12071: PUSH
12072: FOR_IN
12073: IFFALSE 12091
// SaveCharacters ( i , ident ) ;
12075: LD_VAR 0 4
12079: PPUSH
12080: LD_VAR 0 2
12084: PPUSH
12085: CALL_OW 38
12089: GO 12072
12091: POP
12092: POP
// end ;
12093: LD_VAR 0 3
12097: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
12098: LD_INT 0
12100: PPUSH
12101: PPUSH
12102: PPUSH
// characters := characters diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Denis , Gladstone , Cornel , Powell ] ;
12103: LD_ADDR_VAR 0 1
12107: PUSH
12108: LD_VAR 0 1
12112: PUSH
12113: LD_EXP 1
12117: PUSH
12118: LD_EXP 7
12122: PUSH
12123: LD_EXP 3
12127: PUSH
12128: LD_EXP 4
12132: PUSH
12133: LD_EXP 5
12137: PUSH
12138: LD_EXP 2
12142: PUSH
12143: LD_EXP 12
12147: PUSH
12148: LD_EXP 13
12152: PUSH
12153: LD_EXP 9
12157: PUSH
12158: LD_EXP 11
12162: PUSH
12163: LD_EXP 6
12167: PUSH
12168: LD_EXP 8
12172: PUSH
12173: LD_EXP 10
12177: PUSH
12178: LD_EXP 15
12182: PUSH
12183: EMPTY
12184: LIST
12185: LIST
12186: LIST
12187: LIST
12188: LIST
12189: LIST
12190: LIST
12191: LIST
12192: LIST
12193: LIST
12194: LIST
12195: LIST
12196: LIST
12197: LIST
12198: DIFF
12199: ST_TO_ADDR
// speaker := characters [ rand ( 1 , characters ) ] ;
12200: LD_ADDR_VAR 0 6
12204: PUSH
12205: LD_VAR 0 1
12209: PUSH
12210: LD_INT 1
12212: PPUSH
12213: LD_VAR 0 1
12217: PPUSH
12218: CALL_OW 12
12222: ARRAY
12223: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
12224: LD_VAR 0 6
12228: PPUSH
12229: CALL_OW 258
12233: PUSH
12234: LD_INT 1
12236: EQUAL
12237: IFFALSE 12255
// Say ( speaker , dialogMID ) else
12239: LD_VAR 0 6
12243: PPUSH
12244: LD_VAR 0 2
12248: PPUSH
12249: CALL_OW 88
12253: GO 12269
// Say ( speaker , dialogFID ) ;
12255: LD_VAR 0 6
12259: PPUSH
12260: LD_VAR 0 3
12264: PPUSH
12265: CALL_OW 88
// result := speaker ;
12269: LD_ADDR_VAR 0 4
12273: PUSH
12274: LD_VAR 0 6
12278: ST_TO_ADDR
// end ;
12279: LD_VAR 0 4
12283: RET
// export function PrepareDifficulty ; var tmp ; begin
12284: LD_INT 0
12286: PPUSH
12287: PPUSH
// if Difficulty = 1 then
12288: LD_OWVAR 67
12292: PUSH
12293: LD_INT 1
12295: EQUAL
12296: IFFALSE 12316
// begin RuSolMinLevel = 8 ;
12298: LD_ADDR_EXP 29
12302: PUSH
12303: LD_INT 8
12305: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
12306: LD_ADDR_EXP 30
12310: PUSH
12311: LD_INT 10
12313: ST_TO_ADDR
// end else
12314: GO 12556
// if Difficulty = 2 then
12316: LD_OWVAR 67
12320: PUSH
12321: LD_INT 2
12323: EQUAL
12324: IFFALSE 12420
// begin RuSolMinLevel = 9 ;
12326: LD_ADDR_EXP 29
12330: PUSH
12331: LD_INT 9
12333: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
12334: LD_ADDR_EXP 30
12338: PUSH
12339: LD_INT 10
12341: ST_TO_ADDR
// uc_nation = 3 ;
12342: LD_ADDR_OWVAR 21
12346: PUSH
12347: LD_INT 3
12349: ST_TO_ADDR
// uc_side = 3 ;
12350: LD_ADDR_OWVAR 20
12354: PUSH
12355: LD_INT 3
12357: ST_TO_ADDR
// bc_level = 10 ;
12358: LD_ADDR_OWVAR 43
12362: PUSH
12363: LD_INT 10
12365: ST_TO_ADDR
// bc_type = b_turret ;
12366: LD_ADDR_OWVAR 42
12370: PUSH
12371: LD_INT 33
12373: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 86 , 34 , 2 ) ;
12374: LD_ADDR_VAR 0 2
12378: PUSH
12379: LD_INT 86
12381: PPUSH
12382: LD_INT 34
12384: PPUSH
12385: LD_INT 2
12387: PPUSH
12388: CALL_OW 47
12392: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
12393: LD_VAR 0 2
12397: PPUSH
12398: LD_INT 49
12400: PPUSH
12401: CALL_OW 431
// SetTech ( 64 , 3 , state_enabled ) ;
12405: LD_INT 64
12407: PPUSH
12408: LD_INT 3
12410: PPUSH
12411: LD_INT 1
12413: PPUSH
12414: CALL_OW 322
// end else
12418: GO 12556
// begin RuSolMinLevel = 10 ;
12420: LD_ADDR_EXP 29
12424: PUSH
12425: LD_INT 10
12427: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
12428: LD_ADDR_EXP 30
12432: PUSH
12433: LD_INT 10
12435: ST_TO_ADDR
// uc_nation = 3 ;
12436: LD_ADDR_OWVAR 21
12440: PUSH
12441: LD_INT 3
12443: ST_TO_ADDR
// uc_side = 3 ;
12444: LD_ADDR_OWVAR 20
12448: PUSH
12449: LD_INT 3
12451: ST_TO_ADDR
// bc_level = 10 ;
12452: LD_ADDR_OWVAR 43
12456: PUSH
12457: LD_INT 10
12459: ST_TO_ADDR
// bc_type = b_turret ;
12460: LD_ADDR_OWVAR 42
12464: PUSH
12465: LD_INT 33
12467: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 86 , 34 , 2 ) ;
12468: LD_ADDR_VAR 0 2
12472: PUSH
12473: LD_INT 86
12475: PPUSH
12476: LD_INT 34
12478: PPUSH
12479: LD_INT 2
12481: PPUSH
12482: CALL_OW 47
12486: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
12487: LD_VAR 0 2
12491: PPUSH
12492: LD_INT 49
12494: PPUSH
12495: CALL_OW 431
// tmp = CreateAndPlaceBuildingXYD ( 93 , 31 , 2 ) ;
12499: LD_ADDR_VAR 0 2
12503: PUSH
12504: LD_INT 93
12506: PPUSH
12507: LD_INT 31
12509: PPUSH
12510: LD_INT 2
12512: PPUSH
12513: CALL_OW 47
12517: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
12518: LD_VAR 0 2
12522: PPUSH
12523: LD_INT 49
12525: PPUSH
12526: CALL_OW 431
// SetTech ( 64 , 3 , state_enabled ) ;
12530: LD_INT 64
12532: PPUSH
12533: LD_INT 3
12535: PPUSH
12536: LD_INT 1
12538: PPUSH
12539: CALL_OW 322
// SetTech ( 65 , 3 , state_enabled ) ;
12543: LD_INT 65
12545: PPUSH
12546: LD_INT 3
12548: PPUSH
12549: LD_INT 1
12551: PPUSH
12552: CALL_OW 322
// end ; end ;
12556: LD_VAR 0 1
12560: RET
// export function ShowQuery1 ; begin
12561: LD_INT 0
12563: PPUSH
// result := Query ( Q1 ) ;
12564: LD_ADDR_VAR 0 1
12568: PUSH
12569: LD_STRING Q1
12571: PPUSH
12572: CALL_OW 97
12576: ST_TO_ADDR
// end ;
12577: LD_VAR 0 1
12581: RET
// export function ShowQuery2 ; begin
12582: LD_INT 0
12584: PPUSH
// result := Query ( Q1a ) ;
12585: LD_ADDR_VAR 0 1
12589: PUSH
12590: LD_STRING Q1a
12592: PPUSH
12593: CALL_OW 97
12597: ST_TO_ADDR
// end ;
12598: LD_VAR 0 1
12602: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un , tmp ; begin
12603: LD_INT 0
12605: PPUSH
12606: PPUSH
12607: PPUSH
12608: PPUSH
12609: PPUSH
// for i = 1 to count do
12610: LD_ADDR_VAR 0 8
12614: PUSH
12615: DOUBLE
12616: LD_INT 1
12618: DEC
12619: ST_TO_ADDR
12620: LD_VAR 0 6
12624: PUSH
12625: FOR_TO
12626: IFFALSE 12707
// begin uc_side = side ;
12628: LD_ADDR_OWVAR 20
12632: PUSH
12633: LD_VAR 0 1
12637: ST_TO_ADDR
// uc_nation = nation ;
12638: LD_ADDR_OWVAR 21
12642: PUSH
12643: LD_VAR 0 2
12647: ST_TO_ADDR
// hc_gallery =  ;
12648: LD_ADDR_OWVAR 33
12652: PUSH
12653: LD_STRING 
12655: ST_TO_ADDR
// hc_name =  ;
12656: LD_ADDR_OWVAR 26
12660: PUSH
12661: LD_STRING 
12663: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
12664: LD_INT 0
12666: PPUSH
12667: LD_VAR 0 5
12671: PPUSH
12672: LD_VAR 0 4
12676: PPUSH
12677: CALL_OW 380
// un = CreateHuman ;
12681: LD_ADDR_VAR 0 10
12685: PUSH
12686: CALL_OW 44
12690: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
12691: LD_VAR 0 10
12695: PPUSH
12696: LD_VAR 0 3
12700: PPUSH
12701: CALL_OW 52
// end ;
12705: GO 12625
12707: POP
12708: POP
// end ;
12709: LD_VAR 0 7
12713: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list ; begin
12714: LD_INT 0
12716: PPUSH
12717: PPUSH
12718: PPUSH
12719: PPUSH
12720: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
12721: LD_ADDR_VAR 0 8
12725: PUSH
12726: LD_INT 48
12728: PUSH
12729: LD_INT 49
12731: PUSH
12732: LD_INT 50
12734: PUSH
12735: LD_INT 20
12737: PUSH
12738: LD_INT 1
12740: PUSH
12741: LD_INT 51
12743: PUSH
12744: LD_INT 52
12746: PUSH
12747: LD_INT 69
12749: PUSH
12750: LD_INT 39
12752: PUSH
12753: LD_INT 34
12755: PUSH
12756: LD_INT 40
12758: PUSH
12759: LD_INT 53
12761: PUSH
12762: LD_INT 71
12764: PUSH
12765: LD_INT 57
12767: PUSH
12768: LD_INT 58
12770: PUSH
12771: LD_INT 44
12773: PUSH
12774: LD_INT 32
12776: PUSH
12777: LD_INT 27
12779: PUSH
12780: LD_INT 23
12782: PUSH
12783: LD_INT 33
12785: PUSH
12786: LD_INT 59
12788: PUSH
12789: LD_INT 54
12791: PUSH
12792: LD_INT 55
12794: PUSH
12795: LD_INT 56
12797: PUSH
12798: LD_INT 63
12800: PUSH
12801: LD_INT 64
12803: PUSH
12804: LD_INT 65
12806: PUSH
12807: LD_INT 30
12809: PUSH
12810: LD_INT 31
12812: PUSH
12813: LD_INT 21
12815: PUSH
12816: LD_INT 22
12818: PUSH
12819: LD_INT 25
12821: PUSH
12822: EMPTY
12823: LIST
12824: LIST
12825: LIST
12826: LIST
12827: LIST
12828: LIST
12829: LIST
12830: LIST
12831: LIST
12832: LIST
12833: LIST
12834: LIST
12835: LIST
12836: LIST
12837: LIST
12838: LIST
12839: LIST
12840: LIST
12841: LIST
12842: LIST
12843: LIST
12844: LIST
12845: LIST
12846: LIST
12847: LIST
12848: LIST
12849: LIST
12850: LIST
12851: LIST
12852: LIST
12853: LIST
12854: LIST
12855: ST_TO_ADDR
// for i = 1 to ru_tech_list do
12856: LD_ADDR_VAR 0 5
12860: PUSH
12861: DOUBLE
12862: LD_INT 1
12864: DEC
12865: ST_TO_ADDR
12866: LD_VAR 0 8
12870: PUSH
12871: FOR_TO
12872: IFFALSE 12948
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
12874: LD_VAR 0 8
12878: PUSH
12879: LD_VAR 0 5
12883: ARRAY
12884: PPUSH
12885: LD_VAR 0 1
12889: PPUSH
12890: CALL_OW 321
12894: PUSH
12895: LD_INT 1
12897: EQUAL
12898: PUSH
12899: LD_VAR 0 8
12903: PUSH
12904: LD_VAR 0 5
12908: ARRAY
12909: PPUSH
12910: LD_VAR 0 3
12914: PPUSH
12915: CALL_OW 482
12919: PUSH
12920: LD_INT 1
12922: EQUAL
12923: AND
12924: IFFALSE 12946
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
12926: LD_VAR 0 2
12930: PPUSH
12931: LD_VAR 0 8
12935: PUSH
12936: LD_VAR 0 5
12940: ARRAY
12941: PPUSH
12942: CALL_OW 184
12946: GO 12871
12948: POP
12949: POP
// end ;
12950: LD_VAR 0 4
12954: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
12955: LD_INT 0
12957: PPUSH
12958: PPUSH
12959: PPUSH
12960: PPUSH
12961: PPUSH
12962: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
12963: LD_ADDR_VAR 0 8
12967: PUSH
12968: LD_VAR 0 2
12972: PPUSH
12973: CALL_OW 313
12977: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
12978: LD_ADDR_VAR 0 9
12982: PUSH
12983: LD_VAR 0 3
12987: PPUSH
12988: LD_INT 22
12990: PUSH
12991: LD_VAR 0 1
12995: PUSH
12996: EMPTY
12997: LIST
12998: LIST
12999: PUSH
13000: LD_INT 25
13002: PUSH
13003: LD_INT 2
13005: PUSH
13006: EMPTY
13007: LIST
13008: LIST
13009: PUSH
13010: LD_INT 24
13012: PUSH
13013: LD_INT 750
13015: PUSH
13016: EMPTY
13017: LIST
13018: LIST
13019: PUSH
13020: LD_INT 3
13022: PUSH
13023: LD_INT 54
13025: PUSH
13026: EMPTY
13027: LIST
13028: PUSH
13029: EMPTY
13030: LIST
13031: LIST
13032: PUSH
13033: EMPTY
13034: LIST
13035: LIST
13036: LIST
13037: LIST
13038: PPUSH
13039: CALL_OW 70
13043: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
13044: LD_ADDR_VAR 0 6
13048: PUSH
13049: LD_VAR 0 3
13053: PPUSH
13054: LD_INT 22
13056: PUSH
13057: LD_VAR 0 1
13061: PUSH
13062: EMPTY
13063: LIST
13064: LIST
13065: PUSH
13066: LD_INT 21
13068: PUSH
13069: LD_INT 3
13071: PUSH
13072: EMPTY
13073: LIST
13074: LIST
13075: PUSH
13076: LD_INT 3
13078: PUSH
13079: LD_INT 24
13081: PUSH
13082: LD_INT 1000
13084: PUSH
13085: EMPTY
13086: LIST
13087: LIST
13088: PUSH
13089: EMPTY
13090: LIST
13091: LIST
13092: PUSH
13093: EMPTY
13094: LIST
13095: LIST
13096: LIST
13097: PUSH
13098: EMPTY
13099: LIST
13100: PPUSH
13101: CALL_OW 70
13105: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
13106: LD_VAR 0 6
13110: NOT
13111: PUSH
13112: LD_INT 22
13114: PUSH
13115: LD_VAR 0 1
13119: PUSH
13120: EMPTY
13121: LIST
13122: LIST
13123: PUSH
13124: LD_INT 25
13126: PUSH
13127: LD_INT 2
13129: PUSH
13130: EMPTY
13131: LIST
13132: LIST
13133: PUSH
13134: LD_INT 24
13136: PUSH
13137: LD_INT 250
13139: PUSH
13140: EMPTY
13141: LIST
13142: LIST
13143: PUSH
13144: EMPTY
13145: LIST
13146: LIST
13147: LIST
13148: PPUSH
13149: CALL_OW 69
13153: NOT
13154: AND
13155: IFFALSE 13159
// exit ;
13157: GO 13341
// if buildings_list > 0 and engineerOkInside then
13159: LD_VAR 0 6
13163: PUSH
13164: LD_INT 0
13166: GREATER
13167: PUSH
13168: LD_VAR 0 8
13172: AND
13173: IFFALSE 13184
// ComExitBuilding ( engineerOkInside ) ;
13175: LD_VAR 0 8
13179: PPUSH
13180: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
13184: LD_VAR 0 6
13188: PUSH
13189: LD_INT 0
13191: GREATER
13192: PUSH
13193: LD_VAR 0 9
13197: PUSH
13198: LD_INT 0
13200: GREATER
13201: AND
13202: IFFALSE 13222
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
13204: LD_VAR 0 9
13208: PPUSH
13209: LD_VAR 0 6
13213: PUSH
13214: LD_INT 1
13216: ARRAY
13217: PPUSH
13218: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
13222: LD_VAR 0 6
13226: PUSH
13227: LD_INT 0
13229: EQUAL
13230: PUSH
13231: LD_VAR 0 4
13235: PUSH
13236: LD_INT 0
13238: EQUAL
13239: AND
13240: PUSH
13241: LD_VAR 0 9
13245: PUSH
13246: LD_INT 0
13248: GREATER
13249: AND
13250: IFFALSE 13266
// ComEnterUnit ( engineerOkOutside , building ) ;
13252: LD_VAR 0 9
13256: PPUSH
13257: LD_VAR 0 2
13261: PPUSH
13262: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
13266: LD_VAR 0 9
13270: PUSH
13271: LD_INT 0
13273: GREATER
13274: PUSH
13275: LD_VAR 0 6
13279: PUSH
13280: LD_INT 0
13282: EQUAL
13283: AND
13284: PUSH
13285: LD_VAR 0 4
13289: PUSH
13290: LD_INT 0
13292: GREATER
13293: AND
13294: IFFALSE 13341
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
13296: LD_VAR 0 9
13300: PPUSH
13301: LD_VAR 0 4
13305: PUSH
13306: LD_INT 1
13308: ARRAY
13309: PPUSH
13310: LD_VAR 0 4
13314: PUSH
13315: LD_INT 2
13317: ARRAY
13318: PPUSH
13319: LD_VAR 0 4
13323: PUSH
13324: LD_INT 3
13326: ARRAY
13327: PPUSH
13328: LD_VAR 0 4
13332: PUSH
13333: LD_INT 4
13335: ARRAY
13336: PPUSH
13337: CALL_OW 145
// end ;
13341: LD_VAR 0 5
13345: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
13346: LD_INT 0
13348: PPUSH
13349: PPUSH
13350: PPUSH
13351: PPUSH
13352: PPUSH
13353: PPUSH
13354: PPUSH
13355: PPUSH
13356: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 251 ] ] ) diff [ RuScientists ] ;
13357: LD_ADDR_VAR 0 6
13361: PUSH
13362: LD_INT 22
13364: PUSH
13365: LD_VAR 0 1
13369: PUSH
13370: EMPTY
13371: LIST
13372: LIST
13373: PUSH
13374: LD_INT 25
13376: PUSH
13377: LD_INT 4
13379: PUSH
13380: EMPTY
13381: LIST
13382: LIST
13383: PUSH
13384: LD_INT 24
13386: PUSH
13387: LD_INT 251
13389: PUSH
13390: EMPTY
13391: LIST
13392: LIST
13393: PUSH
13394: EMPTY
13395: LIST
13396: LIST
13397: LIST
13398: PPUSH
13399: CALL_OW 69
13403: PUSH
13404: LD_EXP 27
13408: PUSH
13409: EMPTY
13410: LIST
13411: DIFF
13412: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 4 ] , [ f_ok ] ] ) diff [ RuScientists ] ;
13413: LD_ADDR_VAR 0 7
13417: PUSH
13418: LD_VAR 0 3
13422: PPUSH
13423: LD_INT 22
13425: PUSH
13426: LD_VAR 0 1
13430: PUSH
13431: EMPTY
13432: LIST
13433: LIST
13434: PUSH
13435: LD_INT 25
13437: PUSH
13438: LD_INT 4
13440: PUSH
13441: EMPTY
13442: LIST
13443: LIST
13444: PUSH
13445: LD_INT 50
13447: PUSH
13448: EMPTY
13449: LIST
13450: PUSH
13451: EMPTY
13452: LIST
13453: LIST
13454: LIST
13455: PPUSH
13456: CALL_OW 70
13460: PUSH
13461: LD_EXP 27
13465: PUSH
13466: EMPTY
13467: LIST
13468: DIFF
13469: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
13470: LD_ADDR_VAR 0 10
13474: PUSH
13475: LD_VAR 0 3
13479: PPUSH
13480: LD_INT 22
13482: PUSH
13483: LD_VAR 0 1
13487: PUSH
13488: EMPTY
13489: LIST
13490: LIST
13491: PUSH
13492: LD_INT 21
13494: PUSH
13495: LD_INT 1
13497: PUSH
13498: EMPTY
13499: LIST
13500: LIST
13501: PUSH
13502: LD_INT 3
13504: PUSH
13505: LD_INT 24
13507: PUSH
13508: LD_INT 750
13510: PUSH
13511: EMPTY
13512: LIST
13513: LIST
13514: PUSH
13515: EMPTY
13516: LIST
13517: LIST
13518: PUSH
13519: EMPTY
13520: LIST
13521: LIST
13522: LIST
13523: PPUSH
13524: CALL_OW 70
13528: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
13529: LD_ADDR_VAR 0 11
13533: PUSH
13534: LD_VAR 0 2
13538: PPUSH
13539: LD_INT 22
13541: PUSH
13542: LD_VAR 0 1
13546: PUSH
13547: EMPTY
13548: LIST
13549: LIST
13550: PUSH
13551: LD_INT 21
13553: PUSH
13554: LD_INT 1
13556: PUSH
13557: EMPTY
13558: LIST
13559: LIST
13560: PUSH
13561: LD_INT 3
13563: PUSH
13564: LD_INT 24
13566: PUSH
13567: LD_INT 1000
13569: PUSH
13570: EMPTY
13571: LIST
13572: LIST
13573: PUSH
13574: EMPTY
13575: LIST
13576: LIST
13577: PUSH
13578: EMPTY
13579: LIST
13580: LIST
13581: LIST
13582: PPUSH
13583: CALL_OW 70
13587: ST_TO_ADDR
// if damageUnits > 0 and sci_list > 0 then
13588: LD_VAR 0 10
13592: PUSH
13593: LD_INT 0
13595: GREATER
13596: PUSH
13597: LD_VAR 0 6
13601: PUSH
13602: LD_INT 0
13604: GREATER
13605: AND
13606: IFFALSE 13622
// ComMoveToArea ( damageUnits , healArea ) ;
13608: LD_VAR 0 10
13612: PPUSH
13613: LD_VAR 0 2
13617: PPUSH
13618: CALL_OW 113
// if unitsToHeal > 0 and sci_listOutside > 0 then
13622: LD_VAR 0 11
13626: PUSH
13627: LD_INT 0
13629: GREATER
13630: PUSH
13631: LD_VAR 0 7
13635: PUSH
13636: LD_INT 0
13638: GREATER
13639: AND
13640: IFFALSE 13660
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
13642: LD_VAR 0 7
13646: PPUSH
13647: LD_VAR 0 11
13651: PUSH
13652: LD_INT 1
13654: ARRAY
13655: PPUSH
13656: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
13660: LD_VAR 0 10
13664: PUSH
13665: LD_INT 0
13667: EQUAL
13668: PUSH
13669: LD_VAR 0 11
13673: PUSH
13674: LD_INT 0
13676: EQUAL
13677: AND
13678: PUSH
13679: LD_VAR 0 7
13683: PUSH
13684: LD_INT 0
13686: GREATER
13687: AND
13688: IFFALSE 13793
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
13690: LD_ADDR_VAR 0 12
13694: PUSH
13695: LD_INT 22
13697: PUSH
13698: LD_VAR 0 1
13702: PUSH
13703: EMPTY
13704: LIST
13705: LIST
13706: PUSH
13707: LD_INT 21
13709: PUSH
13710: LD_INT 3
13712: PUSH
13713: EMPTY
13714: LIST
13715: LIST
13716: PUSH
13717: LD_INT 30
13719: PUSH
13720: LD_INT 8
13722: PUSH
13723: EMPTY
13724: LIST
13725: LIST
13726: PUSH
13727: EMPTY
13728: LIST
13729: LIST
13730: LIST
13731: PPUSH
13732: CALL_OW 69
13736: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
13737: LD_ADDR_VAR 0 13
13741: PUSH
13742: LD_INT 1
13744: PPUSH
13745: LD_VAR 0 12
13749: PPUSH
13750: CALL_OW 12
13754: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
13755: LD_VAR 0 7
13759: PPUSH
13760: LD_INT 3
13762: PUSH
13763: LD_INT 60
13765: PUSH
13766: EMPTY
13767: LIST
13768: PUSH
13769: EMPTY
13770: LIST
13771: LIST
13772: PPUSH
13773: CALL_OW 72
13777: PPUSH
13778: LD_VAR 0 12
13782: PUSH
13783: LD_VAR 0 13
13787: ARRAY
13788: PPUSH
13789: CALL_OW 120
// end ; if FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 3 ] , [ f_lives , 751 ] ] ) > 0 and IsOk ( ru_fact ) and GetSide ( ru_fact ) = 3 then
13793: LD_VAR 0 3
13797: PPUSH
13798: LD_INT 22
13800: PUSH
13801: LD_VAR 0 1
13805: PUSH
13806: EMPTY
13807: LIST
13808: LIST
13809: PUSH
13810: LD_INT 25
13812: PUSH
13813: LD_INT 3
13815: PUSH
13816: EMPTY
13817: LIST
13818: LIST
13819: PUSH
13820: LD_INT 24
13822: PUSH
13823: LD_INT 751
13825: PUSH
13826: EMPTY
13827: LIST
13828: LIST
13829: PUSH
13830: EMPTY
13831: LIST
13832: LIST
13833: LIST
13834: PPUSH
13835: CALL_OW 70
13839: PUSH
13840: LD_INT 0
13842: GREATER
13843: PUSH
13844: LD_INT 21
13846: PPUSH
13847: CALL_OW 302
13851: AND
13852: PUSH
13853: LD_INT 21
13855: PPUSH
13856: CALL_OW 255
13860: PUSH
13861: LD_INT 3
13863: EQUAL
13864: AND
13865: IFFALSE 13921
// ComEnterUnit ( FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 3 ] , [ f_lives , 751 ] ] ) , ru_fact ) ;
13867: LD_VAR 0 3
13871: PPUSH
13872: LD_INT 22
13874: PUSH
13875: LD_VAR 0 1
13879: PUSH
13880: EMPTY
13881: LIST
13882: LIST
13883: PUSH
13884: LD_INT 25
13886: PUSH
13887: LD_INT 3
13889: PUSH
13890: EMPTY
13891: LIST
13892: LIST
13893: PUSH
13894: LD_INT 24
13896: PUSH
13897: LD_INT 751
13899: PUSH
13900: EMPTY
13901: LIST
13902: LIST
13903: PUSH
13904: EMPTY
13905: LIST
13906: LIST
13907: LIST
13908: PPUSH
13909: CALL_OW 70
13913: PPUSH
13914: LD_INT 21
13916: PPUSH
13917: CALL_OW 120
// end ;
13921: LD_VAR 0 5
13925: RET
// export function CraneRepairBuild ( side , baseArea ) ; var i , mechTmp , vehicleTmp , crane_list , buildings_list ; begin
13926: LD_INT 0
13928: PPUSH
13929: PPUSH
13930: PPUSH
13931: PPUSH
13932: PPUSH
13933: PPUSH
// crane_list = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
13934: LD_ADDR_VAR 0 7
13938: PUSH
13939: LD_VAR 0 2
13943: PPUSH
13944: LD_INT 22
13946: PUSH
13947: LD_VAR 0 1
13951: PUSH
13952: EMPTY
13953: LIST
13954: LIST
13955: PUSH
13956: LD_INT 21
13958: PUSH
13959: LD_INT 2
13961: PUSH
13962: EMPTY
13963: LIST
13964: LIST
13965: PUSH
13966: LD_INT 34
13968: PUSH
13969: LD_INT 52
13971: PUSH
13972: EMPTY
13973: LIST
13974: LIST
13975: PUSH
13976: EMPTY
13977: LIST
13978: LIST
13979: LIST
13980: PPUSH
13981: CALL_OW 70
13985: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( baseArea , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
13986: LD_ADDR_VAR 0 8
13990: PUSH
13991: LD_VAR 0 2
13995: PPUSH
13996: LD_INT 22
13998: PUSH
13999: LD_VAR 0 1
14003: PUSH
14004: EMPTY
14005: LIST
14006: LIST
14007: PUSH
14008: LD_INT 21
14010: PUSH
14011: LD_INT 3
14013: PUSH
14014: EMPTY
14015: LIST
14016: LIST
14017: PUSH
14018: LD_INT 3
14020: PUSH
14021: LD_INT 24
14023: PUSH
14024: LD_INT 1000
14026: PUSH
14027: EMPTY
14028: LIST
14029: LIST
14030: PUSH
14031: EMPTY
14032: LIST
14033: LIST
14034: PUSH
14035: EMPTY
14036: LIST
14037: LIST
14038: LIST
14039: PUSH
14040: EMPTY
14041: LIST
14042: PPUSH
14043: CALL_OW 70
14047: ST_TO_ADDR
// if buildings_list > 0 and UnitFilter ( crane_list , [ f_lives , 750 ] ) > 0 then
14048: LD_VAR 0 8
14052: PUSH
14053: LD_INT 0
14055: GREATER
14056: PUSH
14057: LD_VAR 0 7
14061: PPUSH
14062: LD_INT 24
14064: PUSH
14065: LD_INT 750
14067: PUSH
14068: EMPTY
14069: LIST
14070: LIST
14071: PPUSH
14072: CALL_OW 72
14076: PUSH
14077: LD_INT 0
14079: GREATER
14080: AND
14081: IFFALSE 14101
// ComRepairBuilding ( crane_list , buildings_list [ 1 ] ) ;
14083: LD_VAR 0 7
14087: PPUSH
14088: LD_VAR 0 8
14092: PUSH
14093: LD_INT 1
14095: ARRAY
14096: PPUSH
14097: CALL_OW 130
// end ;
14101: LD_VAR 0 3
14105: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
14106: LD_INT 0
14108: PPUSH
14109: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) diff FilterUnitsInArea ( RussianOutsideVehs , [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
14110: LD_INT 22
14112: PUSH
14113: LD_VAR 0 1
14117: PUSH
14118: EMPTY
14119: LIST
14120: LIST
14121: PUSH
14122: LD_INT 21
14124: PUSH
14125: LD_INT 2
14127: PUSH
14128: EMPTY
14129: LIST
14130: LIST
14131: PUSH
14132: EMPTY
14133: LIST
14134: LIST
14135: PPUSH
14136: CALL_OW 69
14140: PUSH
14141: LD_INT 18
14143: PPUSH
14144: LD_INT 22
14146: PUSH
14147: LD_VAR 0 1
14151: PUSH
14152: EMPTY
14153: LIST
14154: LIST
14155: PUSH
14156: LD_INT 21
14158: PUSH
14159: LD_INT 2
14161: PUSH
14162: EMPTY
14163: LIST
14164: LIST
14165: PUSH
14166: EMPTY
14167: LIST
14168: LIST
14169: PPUSH
14170: CALL_OW 70
14174: PUSH
14175: LD_VAR 0 3
14179: LESSEQUAL
14180: DIFF
14181: IFFALSE 14248
// for i = 1 to vehCount do
14183: LD_ADDR_VAR 0 9
14187: PUSH
14188: DOUBLE
14189: LD_INT 1
14191: DEC
14192: ST_TO_ADDR
14193: LD_VAR 0 3
14197: PUSH
14198: FOR_TO
14199: IFFALSE 14246
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
14201: LD_VAR 0 2
14205: PPUSH
14206: LD_VAR 0 7
14210: PPUSH
14211: LD_VAR 0 5
14215: PPUSH
14216: LD_VAR 0 6
14220: PPUSH
14221: LD_VAR 0 4
14225: PUSH
14226: LD_INT 1
14228: PPUSH
14229: LD_VAR 0 4
14233: PPUSH
14234: CALL_OW 12
14238: ARRAY
14239: PPUSH
14240: CALL_OW 185
14244: GO 14198
14246: POP
14247: POP
// end ;
14248: LD_VAR 0 8
14252: RET
// export function IntBazooka ( side ) ; var ta , c , i , list , filter ; begin
14253: LD_INT 0
14255: PPUSH
14256: PPUSH
14257: PPUSH
14258: PPUSH
14259: PPUSH
14260: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
14261: LD_ADDR_VAR 0 6
14265: PUSH
14266: LD_INT 22
14268: PUSH
14269: LD_VAR 0 1
14273: PUSH
14274: EMPTY
14275: LIST
14276: LIST
14277: PUSH
14278: LD_INT 25
14280: PUSH
14281: LD_INT 9
14283: PUSH
14284: EMPTY
14285: LIST
14286: LIST
14287: PUSH
14288: EMPTY
14289: LIST
14290: LIST
14291: PPUSH
14292: CALL_OW 69
14296: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
14297: LD_ADDR_VAR 0 7
14301: PUSH
14302: LD_INT 81
14304: PUSH
14305: LD_VAR 0 1
14309: PUSH
14310: EMPTY
14311: LIST
14312: LIST
14313: PUSH
14314: LD_INT 3
14316: PUSH
14317: LD_INT 21
14319: PUSH
14320: LD_INT 3
14322: PUSH
14323: EMPTY
14324: LIST
14325: LIST
14326: PUSH
14327: EMPTY
14328: LIST
14329: LIST
14330: PUSH
14331: EMPTY
14332: LIST
14333: LIST
14334: PPUSH
14335: CALL_OW 69
14339: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
14340: LD_ADDR_VAR 0 4
14344: PUSH
14345: LD_INT 1
14347: PPUSH
14348: LD_INT 3
14350: PPUSH
14351: CALL_OW 12
14355: ST_TO_ADDR
// for i = 1 to list do
14356: LD_ADDR_VAR 0 5
14360: PUSH
14361: DOUBLE
14362: LD_INT 1
14364: DEC
14365: ST_TO_ADDR
14366: LD_VAR 0 6
14370: PUSH
14371: FOR_TO
14372: IFFALSE 14574
// for ta in filter do
14374: LD_ADDR_VAR 0 3
14378: PUSH
14379: LD_VAR 0 7
14383: PUSH
14384: FOR_IN
14385: IFFALSE 14570
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
14387: LD_VAR 0 6
14391: PUSH
14392: LD_VAR 0 5
14396: ARRAY
14397: PPUSH
14398: LD_VAR 0 3
14402: PPUSH
14403: CALL_OW 296
14407: PUSH
14408: LD_INT 15
14410: LESSEQUAL
14411: IFFALSE 14568
// begin case c of 1 :
14413: LD_VAR 0 4
14417: PUSH
14418: LD_INT 1
14420: DOUBLE
14421: EQUAL
14422: IFTRUE 14426
14424: GO 14464
14426: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
14427: LD_VAR 0 6
14431: PUSH
14432: LD_VAR 0 5
14436: ARRAY
14437: PPUSH
14438: LD_VAR 0 3
14442: PPUSH
14443: CALL_OW 250
14447: PPUSH
14448: LD_VAR 0 3
14452: PPUSH
14453: CALL_OW 251
14457: PPUSH
14458: CALL_OW 154
14462: GO 14568
14464: LD_INT 2
14466: DOUBLE
14467: EQUAL
14468: IFTRUE 14472
14470: GO 14536
14472: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
14473: LD_VAR 0 6
14477: PUSH
14478: LD_VAR 0 5
14482: ARRAY
14483: PPUSH
14484: LD_VAR 0 3
14488: PPUSH
14489: CALL_OW 250
14493: PUSH
14494: LD_INT 1
14496: NEG
14497: PPUSH
14498: LD_INT 1
14500: PPUSH
14501: CALL_OW 12
14505: PLUS
14506: PPUSH
14507: LD_VAR 0 3
14511: PPUSH
14512: CALL_OW 251
14516: PUSH
14517: LD_INT 1
14519: NEG
14520: PPUSH
14521: LD_INT 1
14523: PPUSH
14524: CALL_OW 12
14528: PLUS
14529: PPUSH
14530: CALL_OW 153
14534: GO 14568
14536: LD_INT 3
14538: DOUBLE
14539: EQUAL
14540: IFTRUE 14544
14542: GO 14567
14544: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
14545: LD_VAR 0 6
14549: PUSH
14550: LD_VAR 0 5
14554: ARRAY
14555: PPUSH
14556: LD_VAR 0 3
14560: PPUSH
14561: CALL_OW 115
14565: GO 14568
14567: POP
// end ; end ;
14568: GO 14384
14570: POP
14571: POP
14572: GO 14371
14574: POP
14575: POP
// end ;
14576: LD_VAR 0 2
14580: RET
// export function PlaceMines ( area , n ) ; var i , r , x ; begin
14581: LD_INT 0
14583: PPUSH
14584: PPUSH
14585: PPUSH
14586: PPUSH
// r := 100 ;
14587: LD_ADDR_VAR 0 5
14591: PUSH
14592: LD_INT 100
14594: ST_TO_ADDR
// x := 0 ;
14595: LD_ADDR_VAR 0 6
14599: PUSH
14600: LD_INT 0
14602: ST_TO_ADDR
// while ( x < n ) do
14603: LD_VAR 0 6
14607: PUSH
14608: LD_VAR 0 2
14612: LESS
14613: IFFALSE 14900
// for i = 1 to AreaToList ( area , 0 ) [ 1 ] do
14615: LD_ADDR_VAR 0 4
14619: PUSH
14620: DOUBLE
14621: LD_INT 1
14623: DEC
14624: ST_TO_ADDR
14625: LD_VAR 0 1
14629: PPUSH
14630: LD_INT 0
14632: PPUSH
14633: CALL_OW 517
14637: PUSH
14638: LD_INT 1
14640: ARRAY
14641: PUSH
14642: FOR_TO
14643: IFFALSE 14896
// begin if r > 50 then
14645: LD_VAR 0 5
14649: PUSH
14650: LD_INT 50
14652: GREATER
14653: IFFALSE 14872
// begin if not MineAtPos ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ) then
14655: LD_VAR 0 1
14659: PPUSH
14660: LD_INT 0
14662: PPUSH
14663: CALL_OW 517
14667: PUSH
14668: LD_INT 1
14670: ARRAY
14671: PUSH
14672: LD_VAR 0 4
14676: ARRAY
14677: PPUSH
14678: LD_VAR 0 1
14682: PPUSH
14683: LD_INT 0
14685: PPUSH
14686: CALL_OW 517
14690: PUSH
14691: LD_INT 2
14693: ARRAY
14694: PUSH
14695: LD_VAR 0 4
14699: ARRAY
14700: PPUSH
14701: CALL_OW 458
14705: NOT
14706: IFFALSE 14856
// begin PlaceMine ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] , 8 , 0 ) ;
14708: LD_VAR 0 1
14712: PPUSH
14713: LD_INT 0
14715: PPUSH
14716: CALL_OW 517
14720: PUSH
14721: LD_INT 1
14723: ARRAY
14724: PUSH
14725: LD_VAR 0 4
14729: ARRAY
14730: PPUSH
14731: LD_VAR 0 1
14735: PPUSH
14736: LD_INT 0
14738: PPUSH
14739: CALL_OW 517
14743: PUSH
14744: LD_INT 2
14746: ARRAY
14747: PUSH
14748: LD_VAR 0 4
14752: ARRAY
14753: PPUSH
14754: LD_INT 8
14756: PPUSH
14757: LD_INT 0
14759: PPUSH
14760: CALL_OW 454
// arabianMines := Insert ( arabianMines , 1 , [ AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ] ) ;
14764: LD_ADDR_EXP 37
14768: PUSH
14769: LD_EXP 37
14773: PPUSH
14774: LD_INT 1
14776: PPUSH
14777: LD_VAR 0 1
14781: PPUSH
14782: LD_INT 0
14784: PPUSH
14785: CALL_OW 517
14789: PUSH
14790: LD_INT 1
14792: ARRAY
14793: PUSH
14794: LD_VAR 0 4
14798: ARRAY
14799: PUSH
14800: LD_VAR 0 1
14804: PPUSH
14805: LD_INT 0
14807: PPUSH
14808: CALL_OW 517
14812: PUSH
14813: LD_INT 2
14815: ARRAY
14816: PUSH
14817: LD_VAR 0 4
14821: ARRAY
14822: PUSH
14823: EMPTY
14824: LIST
14825: LIST
14826: PPUSH
14827: CALL_OW 2
14831: ST_TO_ADDR
// r := 0 ;
14832: LD_ADDR_VAR 0 5
14836: PUSH
14837: LD_INT 0
14839: ST_TO_ADDR
// x := x + 1 ;
14840: LD_ADDR_VAR 0 6
14844: PUSH
14845: LD_VAR 0 6
14849: PUSH
14850: LD_INT 1
14852: PLUS
14853: ST_TO_ADDR
// end else
14854: GO 14870
// r := r + 35 ;
14856: LD_ADDR_VAR 0 5
14860: PUSH
14861: LD_VAR 0 5
14865: PUSH
14866: LD_INT 35
14868: PLUS
14869: ST_TO_ADDR
// end else
14870: GO 14894
// r := r + rand ( 10 , 25 ) ;
14872: LD_ADDR_VAR 0 5
14876: PUSH
14877: LD_VAR 0 5
14881: PUSH
14882: LD_INT 10
14884: PPUSH
14885: LD_INT 25
14887: PPUSH
14888: CALL_OW 12
14892: PLUS
14893: ST_TO_ADDR
// end ;
14894: GO 14642
14896: POP
14897: POP
14898: GO 14603
// end ;
14900: LD_VAR 0 3
14904: RET
// export function DefendDepot ( side , build ) ; var i , j , tmpTab ; begin
14905: LD_INT 0
14907: PPUSH
14908: PPUSH
14909: PPUSH
14910: PPUSH
// tmpTab = [ ] ;
14911: LD_ADDR_VAR 0 6
14915: PUSH
14916: EMPTY
14917: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) > 0 then
14918: LD_INT 22
14920: PUSH
14921: LD_VAR 0 1
14925: PUSH
14926: EMPTY
14927: LIST
14928: LIST
14929: PUSH
14930: LD_INT 30
14932: PUSH
14933: LD_INT 32
14935: PUSH
14936: EMPTY
14937: LIST
14938: LIST
14939: PUSH
14940: EMPTY
14941: LIST
14942: LIST
14943: PPUSH
14944: CALL_OW 69
14948: PUSH
14949: LD_INT 0
14951: GREATER
14952: IFFALSE 15035
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
14954: LD_ADDR_VAR 0 4
14958: PUSH
14959: LD_INT 22
14961: PUSH
14962: LD_VAR 0 1
14966: PUSH
14967: EMPTY
14968: LIST
14969: LIST
14970: PUSH
14971: LD_INT 30
14973: PUSH
14974: LD_INT 32
14976: PUSH
14977: EMPTY
14978: LIST
14979: LIST
14980: PUSH
14981: EMPTY
14982: LIST
14983: LIST
14984: PPUSH
14985: CALL_OW 69
14989: PUSH
14990: FOR_IN
14991: IFFALSE 15033
// begin for j in UnitsInside ( i ) do
14993: LD_ADDR_VAR 0 5
14997: PUSH
14998: LD_VAR 0 4
15002: PPUSH
15003: CALL_OW 313
15007: PUSH
15008: FOR_IN
15009: IFFALSE 15029
// tmpTab = tmpTab ^ j ;
15011: LD_ADDR_VAR 0 6
15015: PUSH
15016: LD_VAR 0 6
15020: PUSH
15021: LD_VAR 0 5
15025: ADD
15026: ST_TO_ADDR
15027: GO 15008
15029: POP
15030: POP
// end ;
15031: GO 14990
15033: POP
15034: POP
// end ; ComAgressiveMove ( tmpTab , GetX ( build ) , GetY ( build ) ) ;
15035: LD_VAR 0 6
15039: PPUSH
15040: LD_VAR 0 2
15044: PPUSH
15045: CALL_OW 250
15049: PPUSH
15050: LD_VAR 0 2
15054: PPUSH
15055: CALL_OW 251
15059: PPUSH
15060: CALL_OW 114
// end ;
15064: LD_VAR 0 3
15068: RET
// export function CreateNature ; var i , un ; begin
15069: LD_INT 0
15071: PPUSH
15072: PPUSH
15073: PPUSH
// uc_side := 0 ;
15074: LD_ADDR_OWVAR 20
15078: PUSH
15079: LD_INT 0
15081: ST_TO_ADDR
// uc_nation := 0 ;
15082: LD_ADDR_OWVAR 21
15086: PUSH
15087: LD_INT 0
15089: ST_TO_ADDR
// InitHc ;
15090: CALL_OW 19
// hc_class := class_fish ;
15094: LD_ADDR_OWVAR 28
15098: PUSH
15099: LD_INT 20
15101: ST_TO_ADDR
// for i = 1 to 6 do
15102: LD_ADDR_VAR 0 2
15106: PUSH
15107: DOUBLE
15108: LD_INT 1
15110: DEC
15111: ST_TO_ADDR
15112: LD_INT 6
15114: PUSH
15115: FOR_TO
15116: IFFALSE 15135
// PlaceUnitArea ( CreateHuman , waterArea , false ) ;
15118: CALL_OW 44
15122: PPUSH
15123: LD_INT 23
15125: PPUSH
15126: LD_INT 0
15128: PPUSH
15129: CALL_OW 49
15133: GO 15115
15135: POP
15136: POP
// for i = 1 to Difficulty + 2 do
15137: LD_ADDR_VAR 0 2
15141: PUSH
15142: DOUBLE
15143: LD_INT 1
15145: DEC
15146: ST_TO_ADDR
15147: LD_OWVAR 67
15151: PUSH
15152: LD_INT 2
15154: PLUS
15155: PUSH
15156: FOR_TO
15157: IFFALSE 15266
// begin hc_sex = sex_male ;
15159: LD_ADDR_OWVAR 27
15163: PUSH
15164: LD_INT 1
15166: ST_TO_ADDR
// uc_side = 0 ;
15167: LD_ADDR_OWVAR 20
15171: PUSH
15172: LD_INT 0
15174: ST_TO_ADDR
// uc_nation = nation_nature ;
15175: LD_ADDR_OWVAR 21
15179: PUSH
15180: LD_INT 0
15182: ST_TO_ADDR
// hc_class = class_tiger ;
15183: LD_ADDR_OWVAR 28
15187: PUSH
15188: LD_INT 14
15190: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
15191: LD_ADDR_OWVAR 31
15195: PUSH
15196: LD_EXP 30
15200: PUSH
15201: LD_INT 0
15203: PUSH
15204: LD_INT 0
15206: PUSH
15207: LD_INT 0
15209: PUSH
15210: EMPTY
15211: LIST
15212: LIST
15213: LIST
15214: LIST
15215: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
15216: LD_ADDR_OWVAR 35
15220: PUSH
15221: LD_INT 5
15223: NEG
15224: PPUSH
15225: LD_INT 5
15227: PPUSH
15228: CALL_OW 12
15232: PUSH
15233: LD_OWVAR 67
15237: MUL
15238: ST_TO_ADDR
// un = CreateHuman ;
15239: LD_ADDR_VAR 0 3
15243: PUSH
15244: CALL_OW 44
15248: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
15249: LD_VAR 0 3
15253: PPUSH
15254: LD_INT 24
15256: PPUSH
15257: LD_INT 0
15259: PPUSH
15260: CALL_OW 49
// end ;
15264: GO 15156
15266: POP
15267: POP
// for i = 1 to rand ( 3 , 4 ) do
15268: LD_ADDR_VAR 0 2
15272: PUSH
15273: DOUBLE
15274: LD_INT 1
15276: DEC
15277: ST_TO_ADDR
15278: LD_INT 3
15280: PPUSH
15281: LD_INT 4
15283: PPUSH
15284: CALL_OW 12
15288: PUSH
15289: FOR_TO
15290: IFFALSE 15382
// begin hc_sex = sex_male ;
15292: LD_ADDR_OWVAR 27
15296: PUSH
15297: LD_INT 1
15299: ST_TO_ADDR
// uc_side = 0 ;
15300: LD_ADDR_OWVAR 20
15304: PUSH
15305: LD_INT 0
15307: ST_TO_ADDR
// uc_nation = nation_nature ;
15308: LD_ADDR_OWVAR 21
15312: PUSH
15313: LD_INT 0
15315: ST_TO_ADDR
// hc_class = 18 ;
15316: LD_ADDR_OWVAR 28
15320: PUSH
15321: LD_INT 18
15323: ST_TO_ADDR
// hc_skills = [ 0 , 0 , 0 , 0 ] ;
15324: LD_ADDR_OWVAR 31
15328: PUSH
15329: LD_INT 0
15331: PUSH
15332: LD_INT 0
15334: PUSH
15335: LD_INT 0
15337: PUSH
15338: LD_INT 0
15340: PUSH
15341: EMPTY
15342: LIST
15343: LIST
15344: LIST
15345: LIST
15346: ST_TO_ADDR
// hc_agressivity = 0 ;
15347: LD_ADDR_OWVAR 35
15351: PUSH
15352: LD_INT 0
15354: ST_TO_ADDR
// un = CreateHuman ;
15355: LD_ADDR_VAR 0 3
15359: PUSH
15360: CALL_OW 44
15364: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
15365: LD_VAR 0 3
15369: PPUSH
15370: LD_INT 24
15372: PPUSH
15373: LD_INT 0
15375: PPUSH
15376: CALL_OW 49
// end ;
15380: GO 15289
15382: POP
15383: POP
// for i = 1 to [ 4 , 3 , 3 , 3 ] [ Difficulty ] do
15384: LD_ADDR_VAR 0 2
15388: PUSH
15389: DOUBLE
15390: LD_INT 1
15392: DEC
15393: ST_TO_ADDR
15394: LD_INT 4
15396: PUSH
15397: LD_INT 3
15399: PUSH
15400: LD_INT 3
15402: PUSH
15403: LD_INT 3
15405: PUSH
15406: EMPTY
15407: LIST
15408: LIST
15409: LIST
15410: LIST
15411: PUSH
15412: LD_OWVAR 67
15416: ARRAY
15417: PUSH
15418: FOR_TO
15419: IFFALSE 15528
// begin hc_sex := sex_male ;
15421: LD_ADDR_OWVAR 27
15425: PUSH
15426: LD_INT 1
15428: ST_TO_ADDR
// uc_side := 0 ;
15429: LD_ADDR_OWVAR 20
15433: PUSH
15434: LD_INT 0
15436: ST_TO_ADDR
// uc_nation := nation_nature ;
15437: LD_ADDR_OWVAR 21
15441: PUSH
15442: LD_INT 0
15444: ST_TO_ADDR
// hc_class := class_apeman ;
15445: LD_ADDR_OWVAR 28
15449: PUSH
15450: LD_INT 12
15452: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 2 ) , 0 , 0 , 0 ] ;
15453: LD_ADDR_OWVAR 31
15457: PUSH
15458: LD_INT 0
15460: PPUSH
15461: LD_INT 2
15463: PPUSH
15464: CALL_OW 12
15468: PUSH
15469: LD_INT 0
15471: PUSH
15472: LD_INT 0
15474: PUSH
15475: LD_INT 0
15477: PUSH
15478: EMPTY
15479: LIST
15480: LIST
15481: LIST
15482: LIST
15483: ST_TO_ADDR
// hc_agressivity = rand ( - 10 , 10 ) ;
15484: LD_ADDR_OWVAR 35
15488: PUSH
15489: LD_INT 10
15491: NEG
15492: PPUSH
15493: LD_INT 10
15495: PPUSH
15496: CALL_OW 12
15500: ST_TO_ADDR
// un := CreateHuman ;
15501: LD_ADDR_VAR 0 3
15505: PUSH
15506: CALL_OW 44
15510: ST_TO_ADDR
// PlaceUnitArea ( un , ApeNatureArea , false ) ;
15511: LD_VAR 0 3
15515: PPUSH
15516: LD_INT 28
15518: PPUSH
15519: LD_INT 0
15521: PPUSH
15522: CALL_OW 49
// end ;
15526: GO 15418
15528: POP
15529: POP
// end ; end_of_file
15530: LD_VAR 0 1
15534: RET
// on UnitDestroyed ( unit ) do var i ;
15535: LD_INT 0
15537: PPUSH
// begin SOS_UnitDestroyed ( unit ) ;
15538: LD_VAR 0 1
15542: PPUSH
15543: CALL 33591 0 1
// if unit = JMM then
15547: LD_VAR 0 1
15551: PUSH
15552: LD_EXP 1
15556: EQUAL
15557: IFFALSE 15566
// YouLost ( JMM ) ;
15559: LD_STRING JMM
15561: PPUSH
15562: CALL_OW 104
// if unit in russianTanks then
15566: LD_VAR 0 1
15570: PUSH
15571: LD_EXP 32
15575: IN
15576: IFFALSE 15594
// russianTanks := russianTanks diff unit ;
15578: LD_ADDR_EXP 32
15582: PUSH
15583: LD_EXP 32
15587: PUSH
15588: LD_VAR 0 1
15592: DIFF
15593: ST_TO_ADDR
// if unit in russianTimeLapsers then
15594: LD_VAR 0 1
15598: PUSH
15599: LD_EXP 33
15603: IN
15604: IFFALSE 15622
// russianTimeLapsers := russianTimeLapsers diff unit ;
15606: LD_ADDR_EXP 33
15610: PUSH
15611: LD_EXP 33
15615: PUSH
15616: LD_VAR 0 1
15620: DIFF
15621: ST_TO_ADDR
// if unit in RuScientists then
15622: LD_VAR 0 1
15626: PUSH
15627: LD_EXP 27
15631: IN
15632: IFFALSE 15664
// begin RuScientists := RuScientists diff unit ;
15634: LD_ADDR_EXP 27
15638: PUSH
15639: LD_EXP 27
15643: PUSH
15644: LD_VAR 0 1
15648: DIFF
15649: ST_TO_ADDR
// sciCounter := sciCounter + 1 ;
15650: LD_ADDR_EXP 28
15654: PUSH
15655: LD_EXP 28
15659: PUSH
15660: LD_INT 1
15662: PLUS
15663: ST_TO_ADDR
// end ; end ;
15664: PPOPN 2
15666: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if GetWeapon ( killerUnit ) = us_laser then
15667: LD_VAR 0 3
15671: PPUSH
15672: CALL_OW 264
15676: PUSH
15677: LD_INT 9
15679: EQUAL
15680: IFFALSE 15696
// laserCounterDestroy := laserCounterDestroy + 1 ;
15682: LD_ADDR_EXP 43
15686: PUSH
15687: LD_EXP 43
15691: PUSH
15692: LD_INT 1
15694: PLUS
15695: ST_TO_ADDR
// end ;
15696: PPOPN 3
15698: END
// on UnitTeleported ( building , human ) do begin if human in FilterAllUnits ( [ f_side , 6 ] ) then
15699: LD_VAR 0 2
15703: PUSH
15704: LD_INT 22
15706: PUSH
15707: LD_INT 6
15709: PUSH
15710: EMPTY
15711: LIST
15712: LIST
15713: PPUSH
15714: CALL_OW 69
15718: IN
15719: IFFALSE 15774
// begin if GetType ( human ) = unit_vehicle then
15721: LD_VAR 0 2
15725: PPUSH
15726: CALL_OW 247
15730: PUSH
15731: LD_INT 2
15733: EQUAL
15734: IFFALSE 15751
// human := IsDrivenBy ( human ) ;
15736: LD_ADDR_VAR 0 2
15740: PUSH
15741: LD_VAR 0 2
15745: PPUSH
15746: CALL_OW 311
15750: ST_TO_ADDR
// SetTag ( human , GetTag ( human ) + 10 ) ;
15751: LD_VAR 0 2
15755: PPUSH
15756: LD_VAR 0 2
15760: PPUSH
15761: CALL_OW 110
15765: PUSH
15766: LD_INT 10
15768: PLUS
15769: PPUSH
15770: CALL_OW 109
// end ; if building = ruteleprt and GetSide ( human ) = 1 and eventVar1 = 0 then
15774: LD_VAR 0 1
15778: PUSH
15779: LD_INT 10
15781: EQUAL
15782: PUSH
15783: LD_VAR 0 2
15787: PPUSH
15788: CALL_OW 255
15792: PUSH
15793: LD_INT 1
15795: EQUAL
15796: AND
15797: PUSH
15798: LD_EXP 40
15802: PUSH
15803: LD_INT 0
15805: EQUAL
15806: AND
15807: IFFALSE 15919
// begin eventVar1 = 1 ;
15809: LD_ADDR_EXP 40
15813: PUSH
15814: LD_INT 1
15816: ST_TO_ADDR
// teleportExplored = 1 ;
15817: LD_ADDR_EXP 26
15821: PUSH
15822: LD_INT 1
15824: ST_TO_ADDR
// ChangeMissionObjectives ( M2a ) ;
15825: LD_STRING M2a
15827: PPUSH
15828: CALL_OW 337
// wait ( 0 0$2 ) ;
15832: LD_INT 70
15834: PPUSH
15835: CALL_OW 67
// DialogueOn ;
15839: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , DT3a-Sol1-1 , DT3a-FSol1-1 ) ;
15843: LD_INT 22
15845: PUSH
15846: LD_INT 1
15848: PUSH
15849: EMPTY
15850: LIST
15851: LIST
15852: PUSH
15853: LD_INT 21
15855: PUSH
15856: LD_INT 1
15858: PUSH
15859: EMPTY
15860: LIST
15861: LIST
15862: PUSH
15863: EMPTY
15864: LIST
15865: LIST
15866: PPUSH
15867: CALL_OW 69
15871: PPUSH
15872: LD_STRING DT3a-Sol1-1
15874: PPUSH
15875: LD_STRING DT3a-FSol1-1
15877: PPUSH
15878: CALL 12098 0 3
// Say ( JMM , DT3a-JMM-1 ) ;
15882: LD_EXP 1
15886: PPUSH
15887: LD_STRING DT3a-JMM-1
15889: PPUSH
15890: CALL_OW 88
// CenterNowOnUnits ( human ) ;
15894: LD_VAR 0 2
15898: PPUSH
15899: CALL_OW 87
// Say ( JMM , DT3a-JMM-1a ) ;
15903: LD_EXP 1
15907: PPUSH
15908: LD_STRING DT3a-JMM-1a
15910: PPUSH
15911: CALL_OW 88
// DialogueOff ;
15915: CALL_OW 7
// end ; if building = ruteleprt and GetType ( human ) = unit_vehicle and GetSide ( human ) = 3 then
15919: LD_VAR 0 1
15923: PUSH
15924: LD_INT 10
15926: EQUAL
15927: PUSH
15928: LD_VAR 0 2
15932: PPUSH
15933: CALL_OW 247
15937: PUSH
15938: LD_INT 2
15940: EQUAL
15941: AND
15942: PUSH
15943: LD_VAR 0 2
15947: PPUSH
15948: CALL_OW 255
15952: PUSH
15953: LD_INT 3
15955: EQUAL
15956: AND
15957: IFFALSE 16023
// begin if vehicleTeleported = 0 then
15959: LD_EXP 21
15963: PUSH
15964: LD_INT 0
15966: EQUAL
15967: IFFALSE 15984
// begin wait ( 0 0$3 ) ;
15969: LD_INT 105
15971: PPUSH
15972: CALL_OW 67
// vehicleTeleported := 1 ;
15976: LD_ADDR_EXP 21
15980: PUSH
15981: LD_INT 1
15983: ST_TO_ADDR
// end ; if vehicleTeleported = 2 then
15984: LD_EXP 21
15988: PUSH
15989: LD_INT 2
15991: EQUAL
15992: IFFALSE 16009
// begin wait ( 0 0$3 ) ;
15994: LD_INT 105
15996: PPUSH
15997: CALL_OW 67
// vehicleTeleported := 3 ;
16001: LD_ADDR_EXP 21
16005: PUSH
16006: LD_INT 3
16008: ST_TO_ADDR
// end ; tpCounter := tpCounter + 1 ;
16009: LD_ADDR_EXP 22
16013: PUSH
16014: LD_EXP 22
16018: PUSH
16019: LD_INT 1
16021: PLUS
16022: ST_TO_ADDR
// end ; end ;
16023: PPOPN 2
16025: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
16026: LD_VAR 0 1
16030: PPUSH
16031: LD_VAR 0 2
16035: PPUSH
16036: CALL 33713 0 2
// if GetWeapon ( vehicle ) = us_rocket_launcher then
16040: LD_VAR 0 1
16044: PPUSH
16045: CALL_OW 264
16049: PUSH
16050: LD_INT 7
16052: EQUAL
16053: IFFALSE 16063
// rocketBuilded := true ;
16055: LD_ADDR_EXP 44
16059: PUSH
16060: LD_INT 1
16062: ST_TO_ADDR
// if GetSide ( vehicle ) <> 3 then
16063: LD_VAR 0 1
16067: PPUSH
16068: CALL_OW 255
16072: PUSH
16073: LD_INT 3
16075: NONEQUAL
16076: IFFALSE 16080
// exit ;
16078: GO 16199
// if factory in [ ru_fact , rufab2 ] then
16080: LD_VAR 0 2
16084: PUSH
16085: LD_INT 21
16087: PUSH
16088: LD_INT 112
16090: PUSH
16091: EMPTY
16092: LIST
16093: LIST
16094: IN
16095: IFFALSE 16199
// begin if GetWeapon ( vehicle ) = ru_time_lapser then
16097: LD_VAR 0 1
16101: PPUSH
16102: CALL_OW 264
16106: PUSH
16107: LD_INT 49
16109: EQUAL
16110: IFFALSE 16146
// begin russianTimeLapsers := Join ( russianTimeLapsers , vehicle ) ;
16112: LD_ADDR_EXP 33
16116: PUSH
16117: LD_EXP 33
16121: PPUSH
16122: LD_VAR 0 1
16126: PPUSH
16127: CALL 74912 0 2
16131: ST_TO_ADDR
// ComEnterUnit ( vehicle , rutp ) ;
16132: LD_VAR 0 1
16136: PPUSH
16137: LD_INT 137
16139: PPUSH
16140: CALL_OW 120
// end else
16144: GO 16199
// if not GetWeapon ( vehicle ) in [ ru_cargo_bay , ru_big_cargo_bay , ru_crane , ru_bulldozer ] then
16146: LD_VAR 0 1
16150: PPUSH
16151: CALL_OW 264
16155: PUSH
16156: LD_INT 51
16158: PUSH
16159: LD_EXP 46
16163: PUSH
16164: LD_INT 52
16166: PUSH
16167: LD_INT 53
16169: PUSH
16170: EMPTY
16171: LIST
16172: LIST
16173: LIST
16174: LIST
16175: IN
16176: NOT
16177: IFFALSE 16199
// begin russianTanks := Join ( russianTanks , vehicle ) ;
16179: LD_ADDR_EXP 32
16183: PUSH
16184: LD_EXP 32
16188: PPUSH
16189: LD_VAR 0 1
16193: PPUSH
16194: CALL 74912 0 2
16198: ST_TO_ADDR
// end ; end ; end ;
16199: PPOPN 2
16201: END
// on LeaveVehicle ( vehicle , human ) do var i ;
16202: LD_INT 0
16204: PPUSH
// begin if GetSide ( human ) = 3 and GetClass ( human ) = 3 and GetSide ( ru_fact ) = 3 and IsOk ( ru_fact ) then
16205: LD_VAR 0 2
16209: PPUSH
16210: CALL_OW 255
16214: PUSH
16215: LD_INT 3
16217: EQUAL
16218: PUSH
16219: LD_VAR 0 2
16223: PPUSH
16224: CALL_OW 257
16228: PUSH
16229: LD_INT 3
16231: EQUAL
16232: AND
16233: PUSH
16234: LD_INT 21
16236: PPUSH
16237: CALL_OW 255
16241: PUSH
16242: LD_INT 3
16244: EQUAL
16245: AND
16246: PUSH
16247: LD_INT 21
16249: PPUSH
16250: CALL_OW 302
16254: AND
16255: IFFALSE 16269
// ComEnterUnit ( human , ru_fact ) ;
16257: LD_VAR 0 2
16261: PPUSH
16262: LD_INT 21
16264: PPUSH
16265: CALL_OW 120
// end ;
16269: PPOPN 3
16271: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
16272: LD_VAR 0 1
16276: PPUSH
16277: CALL 33697 0 1
// end ; end_of_file
16281: PPOPN 1
16283: END
// every 0 0$1 trigger ruAI = 1 do
16284: LD_EXP 34
16288: PUSH
16289: LD_INT 1
16291: EQUAL
16292: IFFALSE 16404
16294: GO 16296
16296: DISABLE
// begin enable ;
16297: ENABLE
// RepairAndRebuildBase ( 3 , ruwestdepot , RuWestBase , ruDestroyedBuildings ) ;
16298: LD_INT 3
16300: PPUSH
16301: LD_INT 6
16303: PPUSH
16304: LD_INT 9
16306: PPUSH
16307: LD_EXP 31
16311: PPUSH
16312: CALL 12955 0 4
// RepairAndRebuildBase ( 3 , rueastdepot , RuEastBase , ruDestroyedBuildings ) ;
16316: LD_INT 3
16318: PPUSH
16319: LD_INT 4
16321: PPUSH
16322: LD_INT 10
16324: PPUSH
16325: LD_EXP 31
16329: PPUSH
16330: CALL 12955 0 4
// CraneRepairBuild ( 3 , RuWestBase ) ;
16334: LD_INT 3
16336: PPUSH
16337: LD_INT 9
16339: PPUSH
16340: CALL 13926 0 2
// CraneRepairBuild ( 3 , RuEastBase ) ;
16344: LD_INT 3
16346: PPUSH
16347: LD_INT 10
16349: PPUSH
16350: CALL 13926 0 2
// HealUnitInBase ( 3 , RuWestHealArea , RuWestBase , rulab1 ) ;
16354: LD_INT 3
16356: PPUSH
16357: LD_INT 16
16359: PPUSH
16360: LD_INT 9
16362: PPUSH
16363: LD_INT 91
16365: PPUSH
16366: CALL 13346 0 4
// HealUnitInBase ( 3 , RuEastHealArea , RuEastBase , [ rulab2 , rulab3 , rulab4 ] ) ;
16370: LD_INT 3
16372: PPUSH
16373: LD_INT 17
16375: PPUSH
16376: LD_INT 10
16378: PPUSH
16379: LD_INT 47
16381: PUSH
16382: LD_INT 129
16384: PUSH
16385: LD_INT 135
16387: PUSH
16388: EMPTY
16389: LIST
16390: LIST
16391: LIST
16392: PPUSH
16393: CALL 13346 0 4
// IntBazooka ( 3 ) ;
16397: LD_INT 3
16399: PPUSH
16400: CALL 14253 0 1
// end ;
16404: END
// every 0 0$30 trigger russianTanks >= [ 3 , 4 , 4 , 5 ] [ Difficulty ] do var j , tmp , target1 , target2 ;
16405: LD_EXP 32
16409: PUSH
16410: LD_INT 3
16412: PUSH
16413: LD_INT 4
16415: PUSH
16416: LD_INT 4
16418: PUSH
16419: LD_INT 5
16421: PUSH
16422: EMPTY
16423: LIST
16424: LIST
16425: LIST
16426: LIST
16427: PUSH
16428: LD_OWVAR 67
16432: ARRAY
16433: GREATEREQUAL
16434: IFFALSE 16934
16436: GO 16438
16438: DISABLE
16439: LD_INT 0
16441: PPUSH
16442: PPUSH
16443: PPUSH
16444: PPUSH
// begin enable ;
16445: ENABLE
// tmp := russianTanks union russianTimeLapsers ;
16446: LD_ADDR_VAR 0 2
16450: PUSH
16451: LD_EXP 32
16455: PUSH
16456: LD_EXP 33
16460: UNION
16461: ST_TO_ADDR
// russianTanks := russianTanks diff tmp ;
16462: LD_ADDR_EXP 32
16466: PUSH
16467: LD_EXP 32
16471: PUSH
16472: LD_VAR 0 2
16476: DIFF
16477: ST_TO_ADDR
// russianTimeLapsers := russianTimeLapsers diff tmp ;
16478: LD_ADDR_EXP 33
16482: PUSH
16483: LD_EXP 33
16487: PUSH
16488: LD_VAR 0 2
16492: DIFF
16493: ST_TO_ADDR
// if IsOk ( ruteleprt ) then
16494: LD_INT 10
16496: PPUSH
16497: CALL_OW 302
16501: IFFALSE 16584
// begin for j in tmp do
16503: LD_ADDR_VAR 0 1
16507: PUSH
16508: LD_VAR 0 2
16512: PUSH
16513: FOR_IN
16514: IFFALSE 16557
// if attackTactic < 2 then
16516: LD_EXP 36
16520: PUSH
16521: LD_INT 2
16523: LESS
16524: IFFALSE 16540
// ComEnterUnit ( j , ruteleprt ) else
16526: LD_VAR 0 1
16530: PPUSH
16531: LD_INT 10
16533: PPUSH
16534: CALL_OW 120
16538: GO 16555
// ComMoveXY ( j , 88 , 69 ) ;
16540: LD_VAR 0 1
16544: PPUSH
16545: LD_INT 88
16547: PPUSH
16548: LD_INT 69
16550: PPUSH
16551: CALL_OW 111
16555: GO 16513
16557: POP
16558: POP
// repeat wait ( 0 0$1 ) ;
16559: LD_INT 35
16561: PPUSH
16562: CALL_OW 67
// until not UnitFilter ( tmp , [ f_hastask ] ) ;
16566: LD_VAR 0 2
16570: PPUSH
16571: LD_INT 60
16573: PUSH
16574: EMPTY
16575: LIST
16576: PPUSH
16577: CALL_OW 72
16581: NOT
16582: IFFALSE 16559
// end ; repeat wait ( 0 0$1 ) ;
16584: LD_INT 35
16586: PPUSH
16587: CALL_OW 67
// for j in tmp do
16591: LD_ADDR_VAR 0 1
16595: PUSH
16596: LD_VAR 0 2
16600: PUSH
16601: FOR_IN
16602: IFFALSE 16925
// begin if IsDead ( j ) then
16604: LD_VAR 0 1
16608: PPUSH
16609: CALL_OW 301
16613: IFFALSE 16631
// tmp := tmp diff j ;
16615: LD_ADDR_VAR 0 2
16619: PUSH
16620: LD_VAR 0 2
16624: PUSH
16625: LD_VAR 0 1
16629: DIFF
16630: ST_TO_ADDR
// target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , j ) ;
16631: LD_ADDR_VAR 0 3
16635: PUSH
16636: LD_INT 81
16638: PUSH
16639: LD_INT 3
16641: PUSH
16642: EMPTY
16643: LIST
16644: LIST
16645: PPUSH
16646: CALL_OW 69
16650: PPUSH
16651: LD_VAR 0 1
16655: PPUSH
16656: CALL_OW 74
16660: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , 3 ] , [ f_type , unit_human ] ] ] ) , j ) ;
16661: LD_ADDR_VAR 0 4
16665: PUSH
16666: LD_INT 81
16668: PUSH
16669: LD_INT 3
16671: PUSH
16672: EMPTY
16673: LIST
16674: LIST
16675: PUSH
16676: LD_INT 21
16678: PUSH
16679: LD_INT 1
16681: PUSH
16682: EMPTY
16683: LIST
16684: LIST
16685: PUSH
16686: EMPTY
16687: LIST
16688: LIST
16689: PUSH
16690: EMPTY
16691: LIST
16692: PPUSH
16693: CALL_OW 69
16697: PPUSH
16698: LD_VAR 0 1
16702: PPUSH
16703: CALL_OW 74
16707: ST_TO_ADDR
// if GetWeapon ( j ) = ru_time_lapser then
16708: LD_VAR 0 1
16712: PPUSH
16713: CALL_OW 264
16717: PUSH
16718: LD_INT 49
16720: EQUAL
16721: IFFALSE 16857
// begin if UnitFilter ( tmp , [ f_not , [ f_weapon , ru_time_lapser ] ] ) > 1 and UnitFilter ( tmp , [ f_not , [ f_weapon , ru_time_lapser ] ] ) then
16723: LD_VAR 0 2
16727: PPUSH
16728: LD_INT 3
16730: PUSH
16731: LD_INT 34
16733: PUSH
16734: LD_INT 49
16736: PUSH
16737: EMPTY
16738: LIST
16739: LIST
16740: PUSH
16741: EMPTY
16742: LIST
16743: LIST
16744: PPUSH
16745: CALL_OW 72
16749: PUSH
16750: LD_INT 1
16752: GREATER
16753: PUSH
16754: LD_VAR 0 2
16758: PPUSH
16759: LD_INT 3
16761: PUSH
16762: LD_INT 34
16764: PUSH
16765: LD_INT 49
16767: PUSH
16768: EMPTY
16769: LIST
16770: LIST
16771: PUSH
16772: EMPTY
16773: LIST
16774: LIST
16775: PPUSH
16776: CALL_OW 72
16780: AND
16781: IFFALSE 16831
// ComMoveUnit ( j , NearestUnitToUnit ( UnitFilter ( tmp , [ f_not , [ f_weapon , ru_time_lapser ] ] ) , j ) ) else
16783: LD_VAR 0 1
16787: PPUSH
16788: LD_VAR 0 2
16792: PPUSH
16793: LD_INT 3
16795: PUSH
16796: LD_INT 34
16798: PUSH
16799: LD_INT 49
16801: PUSH
16802: EMPTY
16803: LIST
16804: LIST
16805: PUSH
16806: EMPTY
16807: LIST
16808: LIST
16809: PPUSH
16810: CALL_OW 72
16814: PPUSH
16815: LD_VAR 0 1
16819: PPUSH
16820: CALL_OW 74
16824: PPUSH
16825: CALL_OW 112
16829: GO 16855
// ComMoveUnit ( j , NearestUnitToUnit ( target1 , j ) ) ;
16831: LD_VAR 0 1
16835: PPUSH
16836: LD_VAR 0 3
16840: PPUSH
16841: LD_VAR 0 1
16845: PPUSH
16846: CALL_OW 74
16850: PPUSH
16851: CALL_OW 112
// end else
16855: GO 16923
// begin if GetDistUnits ( j , target2 ) < GetDistUnits ( j , target1 ) + 2 then
16857: LD_VAR 0 1
16861: PPUSH
16862: LD_VAR 0 4
16866: PPUSH
16867: CALL_OW 296
16871: PUSH
16872: LD_VAR 0 1
16876: PPUSH
16877: LD_VAR 0 3
16881: PPUSH
16882: CALL_OW 296
16886: PUSH
16887: LD_INT 2
16889: PLUS
16890: LESS
16891: IFFALSE 16909
// ComAttackUnit ( j , target2 ) else
16893: LD_VAR 0 1
16897: PPUSH
16898: LD_VAR 0 4
16902: PPUSH
16903: CALL_OW 115
16907: GO 16923
// ComAttackUnit ( j , target1 ) ;
16909: LD_VAR 0 1
16913: PPUSH
16914: LD_VAR 0 3
16918: PPUSH
16919: CALL_OW 115
// end ; end ;
16923: GO 16601
16925: POP
16926: POP
// until not tmp ;
16927: LD_VAR 0 2
16931: NOT
16932: IFFALSE 16584
// end ;
16934: PPOPN 4
16936: END
// every 0 0$1 trigger IsDying ( rueastdepot ) do
16937: LD_INT 4
16939: PPUSH
16940: CALL_OW 303
16944: IFFALSE 16959
16946: GO 16948
16948: DISABLE
// DefendDepot ( 3 , rueastdepot ) ;
16949: LD_INT 3
16951: PPUSH
16952: LD_INT 4
16954: PPUSH
16955: CALL 14905 0 2
16959: END
// every 0 0$1 do
16960: GO 16962
16962: DISABLE
// begin ResAllTechs ( 3 , rulab1 , 3 ) ;
16963: LD_INT 3
16965: PPUSH
16966: LD_INT 91
16968: PPUSH
16969: LD_INT 3
16971: PPUSH
16972: CALL 12714 0 3
// ResAllTechs ( 3 , rulab2 , 3 ) ;
16976: LD_INT 3
16978: PPUSH
16979: LD_INT 47
16981: PPUSH
16982: LD_INT 3
16984: PPUSH
16985: CALL 12714 0 3
// ResAllTechs ( 3 , rulab3 , 3 ) ;
16989: LD_INT 3
16991: PPUSH
16992: LD_INT 129
16994: PPUSH
16995: LD_INT 3
16997: PPUSH
16998: CALL 12714 0 3
// ResAllTechs ( 3 , ruheadlab , 3 ) ;
17002: LD_INT 3
17004: PPUSH
17005: LD_INT 3
17007: PPUSH
17008: LD_INT 3
17010: PPUSH
17011: CALL 12714 0 3
// end ;
17015: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
17016: LD_INT 22
17018: PUSH
17019: LD_INT 1
17021: PUSH
17022: EMPTY
17023: LIST
17024: LIST
17025: PUSH
17026: LD_INT 21
17028: PUSH
17029: LD_INT 3
17031: PUSH
17032: EMPTY
17033: LIST
17034: LIST
17035: PUSH
17036: EMPTY
17037: LIST
17038: LIST
17039: PPUSH
17040: CALL_OW 69
17044: IFFALSE 17113
17046: GO 17048
17048: DISABLE
// begin wait ( 0 0$40 ) ;
17049: LD_INT 1400
17051: PPUSH
17052: CALL_OW 67
// BuildingVehicle ( 3 , ru_fact , [ 3 , 4 , 4 , 5 ] [ Difficulty ] , [ 46 , 45 , 44 ] , 3 , 3 , 24 ) ;
17056: LD_INT 3
17058: PPUSH
17059: LD_INT 21
17061: PPUSH
17062: LD_INT 3
17064: PUSH
17065: LD_INT 4
17067: PUSH
17068: LD_INT 4
17070: PUSH
17071: LD_INT 5
17073: PUSH
17074: EMPTY
17075: LIST
17076: LIST
17077: LIST
17078: LIST
17079: PUSH
17080: LD_OWVAR 67
17084: ARRAY
17085: PPUSH
17086: LD_INT 46
17088: PUSH
17089: LD_INT 45
17091: PUSH
17092: LD_INT 44
17094: PUSH
17095: EMPTY
17096: LIST
17097: LIST
17098: LIST
17099: PPUSH
17100: LD_INT 3
17102: PPUSH
17103: LD_INT 3
17105: PPUSH
17106: LD_INT 24
17108: PPUSH
17109: CALL 14106 0 7
// end ;
17113: END
// every 6 6$0 + 2 2$00 trigger secondPass = 2 and GetSide ( ru_fact ) = 3 and GetSide ( rufab2 ) = 3 and IsOk ( ru_fact ) and IsOk ( rufab2 ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_not , [ f_empty ] ] ] ) diff FilterUnitsInArea ( RussianOutsideVehs , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) = 0 do
17114: LD_EXP 20
17118: PUSH
17119: LD_INT 2
17121: EQUAL
17122: PUSH
17123: LD_INT 21
17125: PPUSH
17126: CALL_OW 255
17130: PUSH
17131: LD_INT 3
17133: EQUAL
17134: AND
17135: PUSH
17136: LD_INT 112
17138: PPUSH
17139: CALL_OW 255
17143: PUSH
17144: LD_INT 3
17146: EQUAL
17147: AND
17148: PUSH
17149: LD_INT 21
17151: PPUSH
17152: CALL_OW 302
17156: AND
17157: PUSH
17158: LD_INT 112
17160: PPUSH
17161: CALL_OW 302
17165: AND
17166: PUSH
17167: LD_INT 22
17169: PUSH
17170: LD_INT 3
17172: PUSH
17173: EMPTY
17174: LIST
17175: LIST
17176: PUSH
17177: LD_INT 21
17179: PUSH
17180: LD_INT 2
17182: PUSH
17183: EMPTY
17184: LIST
17185: LIST
17186: PUSH
17187: LD_INT 50
17189: PUSH
17190: EMPTY
17191: LIST
17192: PUSH
17193: LD_INT 3
17195: PUSH
17196: LD_INT 58
17198: PUSH
17199: EMPTY
17200: LIST
17201: PUSH
17202: EMPTY
17203: LIST
17204: LIST
17205: PUSH
17206: EMPTY
17207: LIST
17208: LIST
17209: LIST
17210: LIST
17211: PPUSH
17212: CALL_OW 69
17216: PUSH
17217: LD_INT 18
17219: PPUSH
17220: LD_INT 22
17222: PUSH
17223: LD_INT 3
17225: PUSH
17226: EMPTY
17227: LIST
17228: LIST
17229: PUSH
17230: LD_INT 21
17232: PUSH
17233: LD_INT 2
17235: PUSH
17236: EMPTY
17237: LIST
17238: LIST
17239: PUSH
17240: EMPTY
17241: LIST
17242: LIST
17243: PPUSH
17244: CALL_OW 70
17248: PUSH
17249: LD_INT 0
17251: EQUAL
17252: DIFF
17253: AND
17254: IFFALSE 17380
17256: GO 17258
17258: DISABLE
// begin enable ;
17259: ENABLE
// BuildingVehicle ( 3 , ru_fact , [ 3 , 4 , 4 , 5 ] [ Difficulty ] , [ 46 , 45 , 44 ] , 3 , 3 , 24 ) ;
17260: LD_INT 3
17262: PPUSH
17263: LD_INT 21
17265: PPUSH
17266: LD_INT 3
17268: PUSH
17269: LD_INT 4
17271: PUSH
17272: LD_INT 4
17274: PUSH
17275: LD_INT 5
17277: PUSH
17278: EMPTY
17279: LIST
17280: LIST
17281: LIST
17282: LIST
17283: PUSH
17284: LD_OWVAR 67
17288: ARRAY
17289: PPUSH
17290: LD_INT 46
17292: PUSH
17293: LD_INT 45
17295: PUSH
17296: LD_INT 44
17298: PUSH
17299: EMPTY
17300: LIST
17301: LIST
17302: LIST
17303: PPUSH
17304: LD_INT 3
17306: PPUSH
17307: LD_INT 3
17309: PPUSH
17310: LD_INT 24
17312: PPUSH
17313: CALL 14106 0 7
// if russianTimeLapsers = 0 then
17317: LD_EXP 33
17321: PUSH
17322: LD_INT 0
17324: EQUAL
17325: IFFALSE 17380
// BuildingVehicle ( 3 , rufab2 , [ 1 , 2 , 2 , 2 ] [ Difficulty ] , [ 49 , 49 ] , 3 , 3 , 24 ) ;
17327: LD_INT 3
17329: PPUSH
17330: LD_INT 112
17332: PPUSH
17333: LD_INT 1
17335: PUSH
17336: LD_INT 2
17338: PUSH
17339: LD_INT 2
17341: PUSH
17342: LD_INT 2
17344: PUSH
17345: EMPTY
17346: LIST
17347: LIST
17348: LIST
17349: LIST
17350: PUSH
17351: LD_OWVAR 67
17355: ARRAY
17356: PPUSH
17357: LD_INT 49
17359: PUSH
17360: LD_INT 49
17362: PUSH
17363: EMPTY
17364: LIST
17365: LIST
17366: PPUSH
17367: LD_INT 3
17369: PPUSH
17370: LD_INT 3
17372: PPUSH
17373: LD_INT 24
17375: PPUSH
17376: CALL 14106 0 7
// end ;
17380: END
// every 0 0$1 trigger arabianMines do var i ;
17381: LD_EXP 37
17385: IFFALSE 17506
17387: GO 17389
17389: DISABLE
17390: LD_INT 0
17392: PPUSH
// begin enable ;
17393: ENABLE
// for i in arabianMines do
17394: LD_ADDR_VAR 0 1
17398: PUSH
17399: LD_EXP 37
17403: PUSH
17404: FOR_IN
17405: IFFALSE 17504
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , i [ 1 ] , i [ 2 ] , 3 ] ] ) then
17407: LD_INT 22
17409: PUSH
17410: LD_INT 1
17412: PUSH
17413: EMPTY
17414: LIST
17415: LIST
17416: PUSH
17417: LD_INT 92
17419: PUSH
17420: LD_VAR 0 1
17424: PUSH
17425: LD_INT 1
17427: ARRAY
17428: PUSH
17429: LD_VAR 0 1
17433: PUSH
17434: LD_INT 2
17436: ARRAY
17437: PUSH
17438: LD_INT 3
17440: PUSH
17441: EMPTY
17442: LIST
17443: LIST
17444: LIST
17445: LIST
17446: PUSH
17447: EMPTY
17448: LIST
17449: LIST
17450: PPUSH
17451: CALL_OW 69
17455: IFFALSE 17502
// begin LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , 5 ) ;
17457: LD_VAR 0 1
17461: PUSH
17462: LD_INT 1
17464: ARRAY
17465: PPUSH
17466: LD_VAR 0 1
17470: PUSH
17471: LD_INT 2
17473: ARRAY
17474: PPUSH
17475: LD_INT 5
17477: PPUSH
17478: CALL_OW 456
// arabianMines := Delete ( arabianMines , i ) ;
17482: LD_ADDR_EXP 37
17486: PUSH
17487: LD_EXP 37
17491: PPUSH
17492: LD_VAR 0 1
17496: PPUSH
17497: CALL_OW 3
17501: ST_TO_ADDR
// end ; end ;
17502: GO 17404
17504: POP
17505: POP
// end ;
17506: PPOPN 1
17508: END
// every 0 0$1 trigger vehicleTeleported = 4 and tpCounter = [ 6 , 8 , 8 , 8 ] [ Difficulty ] do
17509: LD_EXP 21
17513: PUSH
17514: LD_INT 4
17516: EQUAL
17517: PUSH
17518: LD_EXP 22
17522: PUSH
17523: LD_INT 6
17525: PUSH
17526: LD_INT 8
17528: PUSH
17529: LD_INT 8
17531: PUSH
17532: LD_INT 8
17534: PUSH
17535: EMPTY
17536: LIST
17537: LIST
17538: LIST
17539: LIST
17540: PUSH
17541: LD_OWVAR 67
17545: ARRAY
17546: EQUAL
17547: AND
17548: IFFALSE 17566
17550: GO 17552
17552: DISABLE
// TeleportExit ( ruteleprt , 47 , 82 ) ;
17553: LD_INT 10
17555: PPUSH
17556: LD_INT 47
17558: PPUSH
17559: LD_INT 82
17561: PPUSH
17562: CALL_OW 243
17566: END
// every 2 2$0 trigger vehicleTeleported = 4 do
17567: LD_EXP 21
17571: PUSH
17572: LD_INT 4
17574: EQUAL
17575: IFFALSE 17597
17577: GO 17579
17579: DISABLE
// begin enable ;
17580: ENABLE
// attackTactic = rand ( 1 , 2 ) ;
17581: LD_ADDR_EXP 36
17585: PUSH
17586: LD_INT 1
17588: PPUSH
17589: LD_INT 2
17591: PPUSH
17592: CALL_OW 12
17596: ST_TO_ADDR
// end ; end_of_file
17597: END
// every 0 0$1 trigger IsDead ( ruheadlab ) do
17598: LD_INT 3
17600: PPUSH
17601: CALL_OW 301
17605: IFFALSE 17794
17607: GO 17609
17609: DISABLE
// begin if sciCounter = 0 then
17610: LD_EXP 28
17614: PUSH
17615: LD_INT 0
17617: EQUAL
17618: IFFALSE 17646
// begin Say ( JMM , D7a-JMM-1 ) ;
17620: LD_EXP 1
17624: PPUSH
17625: LD_STRING D7a-JMM-1
17627: PPUSH
17628: CALL_OW 88
// SayRadio ( Powell , D7a-Pow-1 ) ;
17632: LD_EXP 15
17636: PPUSH
17637: LD_STRING D7a-Pow-1
17639: PPUSH
17640: CALL_OW 94
// end else
17644: GO 17790
// if sciCounter < 6 then
17646: LD_EXP 28
17650: PUSH
17651: LD_INT 6
17653: LESS
17654: IFFALSE 17682
// begin Say ( JMM , D7b-JMM-1 ) ;
17656: LD_EXP 1
17660: PPUSH
17661: LD_STRING D7b-JMM-1
17663: PPUSH
17664: CALL_OW 88
// SayRadio ( Powell , D7b-Pow-1 ) ;
17668: LD_EXP 15
17672: PPUSH
17673: LD_STRING D7b-Pow-1
17675: PPUSH
17676: CALL_OW 94
// end else
17680: GO 17790
// begin Say ( JMM , D7c-JMM-1 ) ;
17682: LD_EXP 1
17686: PPUSH
17687: LD_STRING D7c-JMM-1
17689: PPUSH
17690: CALL_OW 88
// SayRadio ( Powell , D7c-Pow-1 ) ;
17694: LD_EXP 15
17698: PPUSH
17699: LD_STRING D7c-Pow-1
17701: PPUSH
17702: CALL_OW 94
// Say ( JMM , D7d-JMM-1 ) ;
17706: LD_EXP 1
17710: PPUSH
17711: LD_STRING D7d-JMM-1
17713: PPUSH
17714: CALL_OW 88
// SayRadio ( Powell , D7d-Pow-1 ) ;
17718: LD_EXP 15
17722: PPUSH
17723: LD_STRING D7d-Pow-1
17725: PPUSH
17726: CALL_OW 94
// Say ( JMM , D7d-JMM-2 ) ;
17730: LD_EXP 1
17734: PPUSH
17735: LD_STRING D7d-JMM-2
17737: PPUSH
17738: CALL_OW 88
// if askSiberite = 1 then
17742: LD_EXP 25
17746: PUSH
17747: LD_INT 1
17749: EQUAL
17750: IFFALSE 17766
// Say ( JMM , D7d-JMM-2a ) else
17752: LD_EXP 1
17756: PPUSH
17757: LD_STRING D7d-JMM-2a
17759: PPUSH
17760: CALL_OW 88
17764: GO 17778
// SayRadio ( Powell , D7d-Pow-2 ) ;
17766: LD_EXP 15
17770: PPUSH
17771: LD_STRING D7d-Pow-2
17773: PPUSH
17774: CALL_OW 94
// SayRadio ( Powell , D7d-Pow-2a ) ;
17778: LD_EXP 15
17782: PPUSH
17783: LD_STRING D7d-Pow-2a
17785: PPUSH
17786: CALL_OW 94
// end ; FinishMission ;
17790: CALL 17795 0 0
// end ;
17794: END
// export function FinishMission ; var m1 , m2 , m3 ; begin
17795: LD_INT 0
17797: PPUSH
17798: PPUSH
17799: PPUSH
17800: PPUSH
// m1 := false ;
17801: LD_ADDR_VAR 0 2
17805: PUSH
17806: LD_INT 0
17808: ST_TO_ADDR
// m2 := false ;
17809: LD_ADDR_VAR 0 3
17813: PUSH
17814: LD_INT 0
17816: ST_TO_ADDR
// m3 := false ;
17817: LD_ADDR_VAR 0 4
17821: PUSH
17822: LD_INT 0
17824: ST_TO_ADDR
// if not westPathUsed then
17825: LD_EXP 42
17829: NOT
17830: IFFALSE 17839
// SetAchievement ( ACH_PATH ) ;
17832: LD_STRING ACH_PATH
17834: PPUSH
17835: CALL_OW 543
// if not rocketBuilded then
17839: LD_EXP 44
17843: NOT
17844: IFFALSE 17860
// begin wait ( 3 ) ;
17846: LD_INT 3
17848: PPUSH
17849: CALL_OW 67
// SetAchievement ( ACH_ROCKET ) ;
17853: LD_STRING ACH_ROCKET
17855: PPUSH
17856: CALL_OW 543
// end ; if tick <= 40 40$00 then
17860: LD_OWVAR 1
17864: PUSH
17865: LD_INT 84000
17867: LESSEQUAL
17868: IFFALSE 17884
// begin wait ( 3 ) ;
17870: LD_INT 3
17872: PPUSH
17873: CALL_OW 67
// SetAchievement ( ACH_ASPEED_12 ) ;
17877: LD_STRING ACH_ASPEED_12
17879: PPUSH
17880: CALL_OW 543
// end ; if teleportExplored = 1 then
17884: LD_EXP 26
17888: PUSH
17889: LD_INT 1
17891: EQUAL
17892: IFFALSE 17914
// begin m1 := true ;
17894: LD_ADDR_VAR 0 2
17898: PUSH
17899: LD_INT 1
17901: ST_TO_ADDR
// AddMedal ( Teleport , 1 ) ;
17902: LD_STRING Teleport
17904: PPUSH
17905: LD_INT 1
17907: PPUSH
17908: CALL_OW 101
// end else
17912: GO 17925
// AddMedal ( Teleport , - 1 ) ;
17914: LD_STRING Teleport
17916: PPUSH
17917: LD_INT 1
17919: NEG
17920: PPUSH
17921: CALL_OW 101
// if sciCounter > 2 then
17925: LD_EXP 28
17929: PUSH
17930: LD_INT 2
17932: GREATER
17933: IFFALSE 17955
// begin m2 := true ;
17935: LD_ADDR_VAR 0 3
17939: PUSH
17940: LD_INT 1
17942: ST_TO_ADDR
// AddMedal ( Materials , 1 ) ;
17943: LD_STRING Materials
17945: PPUSH
17946: LD_INT 1
17948: PPUSH
17949: CALL_OW 101
// end else
17953: GO 17966
// AddMedal ( Materials , - 1 ) ;
17955: LD_STRING Materials
17957: PPUSH
17958: LD_INT 1
17960: NEG
17961: PPUSH
17962: CALL_OW 101
// if sciCounter >= 6 then
17966: LD_EXP 28
17970: PUSH
17971: LD_INT 6
17973: GREATEREQUAL
17974: IFFALSE 18006
// begin m3 := true ;
17976: LD_ADDR_VAR 0 4
17980: PUSH
17981: LD_INT 1
17983: ST_TO_ADDR
// AddMedal ( Scientists , 1 ) ;
17984: LD_STRING Scientists
17986: PPUSH
17987: LD_INT 1
17989: PPUSH
17990: CALL_OW 101
// SaveVariable ( 1 , 12_SciDed_1 ) ;
17994: LD_INT 1
17996: PPUSH
17997: LD_STRING 12_SciDed_1
17999: PPUSH
18000: CALL_OW 39
// end else
18004: GO 18027
// begin AddMedal ( Scientists , - 1 ) ;
18006: LD_STRING Scientists
18008: PPUSH
18009: LD_INT 1
18011: NEG
18012: PPUSH
18013: CALL_OW 101
// SaveVariable ( 0 , 12_SciDed_1 ) ;
18017: LD_INT 0
18019: PPUSH
18020: LD_STRING 12_SciDed_1
18022: PPUSH
18023: CALL_OW 39
// end ; SaveVariable ( fakeInfo , 12_MainDepositFake_1 ) ;
18027: LD_EXP 24
18031: PPUSH
18032: LD_STRING 12_MainDepositFake_1
18034: PPUSH
18035: CALL_OW 39
// if m1 and m2 and m3 and Difficulty >= 3 then
18039: LD_VAR 0 2
18043: PUSH
18044: LD_VAR 0 3
18048: AND
18049: PUSH
18050: LD_VAR 0 4
18054: AND
18055: PUSH
18056: LD_OWVAR 67
18060: PUSH
18061: LD_INT 3
18063: GREATEREQUAL
18064: AND
18065: IFFALSE 18077
// SetAchievementEX ( ACH_AMER , 12 ) ;
18067: LD_STRING ACH_AMER
18069: PPUSH
18070: LD_INT 12
18072: PPUSH
18073: CALL_OW 564
// GiveMedals ( MAIN ) ;
18077: LD_STRING MAIN
18079: PPUSH
18080: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
18084: LD_INT 22
18086: PUSH
18087: LD_INT 1
18089: PUSH
18090: EMPTY
18091: LIST
18092: LIST
18093: PUSH
18094: LD_INT 21
18096: PUSH
18097: LD_INT 1
18099: PUSH
18100: EMPTY
18101: LIST
18102: LIST
18103: PUSH
18104: LD_INT 2
18106: PUSH
18107: LD_INT 25
18109: PUSH
18110: LD_INT 1
18112: PUSH
18113: EMPTY
18114: LIST
18115: LIST
18116: PUSH
18117: LD_INT 25
18119: PUSH
18120: LD_INT 2
18122: PUSH
18123: EMPTY
18124: LIST
18125: LIST
18126: PUSH
18127: LD_INT 25
18129: PUSH
18130: LD_INT 3
18132: PUSH
18133: EMPTY
18134: LIST
18135: LIST
18136: PUSH
18137: LD_INT 25
18139: PUSH
18140: LD_INT 4
18142: PUSH
18143: EMPTY
18144: LIST
18145: LIST
18146: PUSH
18147: LD_INT 25
18149: PUSH
18150: LD_INT 5
18152: PUSH
18153: EMPTY
18154: LIST
18155: LIST
18156: PUSH
18157: LD_INT 25
18159: PUSH
18160: LD_INT 8
18162: PUSH
18163: EMPTY
18164: LIST
18165: LIST
18166: PUSH
18167: EMPTY
18168: LIST
18169: LIST
18170: LIST
18171: LIST
18172: LIST
18173: LIST
18174: LIST
18175: PUSH
18176: EMPTY
18177: LIST
18178: LIST
18179: LIST
18180: PPUSH
18181: CALL_OW 69
18185: PPUSH
18186: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
18190: LD_EXP 1
18194: PPUSH
18195: LD_EXP 39
18199: PUSH
18200: LD_STRING JMM
18202: STR
18203: PPUSH
18204: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
18208: LD_EXP 7
18212: PPUSH
18213: LD_EXP 39
18217: PUSH
18218: LD_STRING Brown
18220: STR
18221: PPUSH
18222: CALL 12058 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
18226: LD_EXP 3
18230: PPUSH
18231: LD_EXP 39
18235: PUSH
18236: LD_STRING Donaldson
18238: STR
18239: PPUSH
18240: CALL 12058 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
18244: LD_EXP 4
18248: PPUSH
18249: LD_EXP 39
18253: PUSH
18254: LD_STRING Bobby
18256: STR
18257: PPUSH
18258: CALL 12058 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
18262: LD_EXP 5
18266: PPUSH
18267: LD_EXP 39
18271: PUSH
18272: LD_STRING Cyrus
18274: STR
18275: PPUSH
18276: CALL 12058 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
18280: LD_EXP 2
18284: PPUSH
18285: LD_EXP 39
18289: PUSH
18290: LD_STRING Lisa
18292: STR
18293: PPUSH
18294: CALL 12058 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
18298: LD_EXP 12
18302: PPUSH
18303: LD_EXP 39
18307: PUSH
18308: LD_STRING Frank
18310: STR
18311: PPUSH
18312: CALL 12058 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
18316: LD_EXP 13
18320: PPUSH
18321: LD_EXP 39
18325: PUSH
18326: LD_STRING Kikuchi
18328: STR
18329: PPUSH
18330: CALL 12058 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
18334: LD_EXP 9
18338: PPUSH
18339: LD_EXP 39
18343: PUSH
18344: LD_STRING Houten
18346: STR
18347: PPUSH
18348: CALL 12058 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
18352: LD_EXP 11
18356: PPUSH
18357: LD_EXP 39
18361: PUSH
18362: LD_STRING Gary
18364: STR
18365: PPUSH
18366: CALL 12058 0 2
// EnchancedSaveCharacters ( Cornel , mission_prefix & Cornell ) ;
18370: LD_EXP 10
18374: PPUSH
18375: LD_EXP 39
18379: PUSH
18380: LD_STRING Cornell
18382: STR
18383: PPUSH
18384: CALL 12058 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
18388: LD_EXP 6
18392: PPUSH
18393: LD_EXP 39
18397: PUSH
18398: LD_STRING Denis
18400: STR
18401: PPUSH
18402: CALL 12058 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
18406: LD_EXP 8
18410: PPUSH
18411: LD_EXP 39
18415: PUSH
18416: LD_STRING Gladstone
18418: STR
18419: PPUSH
18420: CALL 12058 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Houten , Gary , Cornel ] , 12_other_survivors ) ;
18424: LD_INT 22
18426: PUSH
18427: LD_INT 1
18429: PUSH
18430: EMPTY
18431: LIST
18432: LIST
18433: PUSH
18434: LD_INT 23
18436: PUSH
18437: LD_INT 1
18439: PUSH
18440: EMPTY
18441: LIST
18442: LIST
18443: PUSH
18444: LD_INT 21
18446: PUSH
18447: LD_INT 1
18449: PUSH
18450: EMPTY
18451: LIST
18452: LIST
18453: PUSH
18454: LD_INT 2
18456: PUSH
18457: LD_INT 25
18459: PUSH
18460: LD_INT 1
18462: PUSH
18463: EMPTY
18464: LIST
18465: LIST
18466: PUSH
18467: LD_INT 25
18469: PUSH
18470: LD_INT 2
18472: PUSH
18473: EMPTY
18474: LIST
18475: LIST
18476: PUSH
18477: LD_INT 25
18479: PUSH
18480: LD_INT 3
18482: PUSH
18483: EMPTY
18484: LIST
18485: LIST
18486: PUSH
18487: LD_INT 25
18489: PUSH
18490: LD_INT 4
18492: PUSH
18493: EMPTY
18494: LIST
18495: LIST
18496: PUSH
18497: LD_INT 25
18499: PUSH
18500: LD_INT 5
18502: PUSH
18503: EMPTY
18504: LIST
18505: LIST
18506: PUSH
18507: LD_INT 25
18509: PUSH
18510: LD_INT 8
18512: PUSH
18513: EMPTY
18514: LIST
18515: LIST
18516: PUSH
18517: EMPTY
18518: LIST
18519: LIST
18520: LIST
18521: LIST
18522: LIST
18523: LIST
18524: LIST
18525: PUSH
18526: EMPTY
18527: LIST
18528: LIST
18529: LIST
18530: LIST
18531: PPUSH
18532: CALL_OW 69
18536: PUSH
18537: LD_EXP 1
18541: PUSH
18542: LD_EXP 7
18546: PUSH
18547: LD_EXP 3
18551: PUSH
18552: LD_EXP 4
18556: PUSH
18557: LD_EXP 5
18561: PUSH
18562: LD_EXP 2
18566: PUSH
18567: LD_EXP 12
18571: PUSH
18572: LD_EXP 8
18576: PUSH
18577: LD_EXP 13
18581: PUSH
18582: LD_EXP 6
18586: PUSH
18587: LD_EXP 9
18591: PUSH
18592: LD_EXP 11
18596: PUSH
18597: LD_EXP 10
18601: PUSH
18602: EMPTY
18603: LIST
18604: LIST
18605: LIST
18606: LIST
18607: LIST
18608: LIST
18609: LIST
18610: LIST
18611: LIST
18612: LIST
18613: LIST
18614: LIST
18615: LIST
18616: DIFF
18617: PPUSH
18618: LD_STRING 12_other_survivors
18620: PPUSH
18621: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , 12_kurt_squad ) ;
18625: LD_INT 22
18627: PUSH
18628: LD_INT 1
18630: PUSH
18631: EMPTY
18632: LIST
18633: LIST
18634: PUSH
18635: LD_INT 23
18637: PUSH
18638: LD_INT 2
18640: PUSH
18641: EMPTY
18642: LIST
18643: LIST
18644: PUSH
18645: LD_INT 21
18647: PUSH
18648: LD_INT 1
18650: PUSH
18651: EMPTY
18652: LIST
18653: LIST
18654: PUSH
18655: LD_INT 2
18657: PUSH
18658: LD_INT 25
18660: PUSH
18661: LD_INT 1
18663: PUSH
18664: EMPTY
18665: LIST
18666: LIST
18667: PUSH
18668: LD_INT 25
18670: PUSH
18671: LD_INT 2
18673: PUSH
18674: EMPTY
18675: LIST
18676: LIST
18677: PUSH
18678: LD_INT 25
18680: PUSH
18681: LD_INT 3
18683: PUSH
18684: EMPTY
18685: LIST
18686: LIST
18687: PUSH
18688: LD_INT 25
18690: PUSH
18691: LD_INT 4
18693: PUSH
18694: EMPTY
18695: LIST
18696: LIST
18697: PUSH
18698: LD_INT 25
18700: PUSH
18701: LD_INT 5
18703: PUSH
18704: EMPTY
18705: LIST
18706: LIST
18707: PUSH
18708: LD_INT 25
18710: PUSH
18711: LD_INT 8
18713: PUSH
18714: EMPTY
18715: LIST
18716: LIST
18717: PUSH
18718: EMPTY
18719: LIST
18720: LIST
18721: LIST
18722: LIST
18723: LIST
18724: LIST
18725: LIST
18726: PUSH
18727: EMPTY
18728: LIST
18729: LIST
18730: LIST
18731: LIST
18732: PPUSH
18733: CALL_OW 69
18737: PPUSH
18738: LD_STRING 12_kurt_squad
18740: PPUSH
18741: CALL_OW 38
// SaveCharacters ( others11 , 12_others ) ;
18745: LD_EXP 14
18749: PPUSH
18750: LD_STRING 12_others
18752: PPUSH
18753: CALL_OW 38
// YouWin ;
18757: CALL_OW 103
// end ; end_of_file
18761: LD_VAR 0 1
18765: RET
// every 0 0$01 trigger ruAI do
18766: LD_EXP 34
18770: IFFALSE 19080
18772: GO 18774
18774: DISABLE
// begin repeat wait ( 0 0$10 ) ;
18775: LD_INT 350
18777: PPUSH
18778: CALL_OW 67
// if cratesSpawned < 8 then
18782: LD_EXP 38
18786: PUSH
18787: LD_INT 8
18789: LESS
18790: IFFALSE 18842
// begin wait ( rand ( 0 0$3 , 0 0$10 ) ) ;
18792: LD_INT 105
18794: PPUSH
18795: LD_INT 350
18797: PPUSH
18798: CALL_OW 12
18802: PPUSH
18803: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
18807: LD_INT 3
18809: PPUSH
18810: LD_INT 5
18812: PPUSH
18813: CALL_OW 12
18817: PPUSH
18818: LD_INT 21
18820: PPUSH
18821: LD_INT 1
18823: PPUSH
18824: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
18828: LD_ADDR_EXP 38
18832: PUSH
18833: LD_EXP 38
18837: PUSH
18838: LD_INT 1
18840: PLUS
18841: ST_TO_ADDR
// end ; if cratesSpawned >= 8 and cratesSpawned < 20 then
18842: LD_EXP 38
18846: PUSH
18847: LD_INT 8
18849: GREATEREQUAL
18850: PUSH
18851: LD_EXP 38
18855: PUSH
18856: LD_INT 20
18858: LESS
18859: AND
18860: IFFALSE 18912
// begin wait ( rand ( 0 0$10 , 0 0$20 ) ) ;
18862: LD_INT 350
18864: PPUSH
18865: LD_INT 700
18867: PPUSH
18868: CALL_OW 12
18872: PPUSH
18873: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
18877: LD_INT 3
18879: PPUSH
18880: LD_INT 5
18882: PPUSH
18883: CALL_OW 12
18887: PPUSH
18888: LD_INT 21
18890: PPUSH
18891: LD_INT 1
18893: PPUSH
18894: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
18898: LD_ADDR_EXP 38
18902: PUSH
18903: LD_EXP 38
18907: PUSH
18908: LD_INT 1
18910: PLUS
18911: ST_TO_ADDR
// end ; if cratesSpawned >= 20 then
18912: LD_EXP 38
18916: PUSH
18917: LD_INT 20
18919: GREATEREQUAL
18920: IFFALSE 18994
// begin if GetListOfCratesInArea ( CratesArea ) < 4 then
18922: LD_INT 21
18924: PPUSH
18925: CALL_OW 435
18929: PUSH
18930: LD_INT 4
18932: LESS
18933: IFFALSE 18944
// wait ( 0 0$10 ) else
18935: LD_INT 350
18937: PPUSH
18938: CALL_OW 67
18942: GO 18959
// wait ( rand ( 1 1$00 , 1 1$40 ) ) ;
18944: LD_INT 2100
18946: PPUSH
18947: LD_INT 3500
18949: PPUSH
18950: CALL_OW 12
18954: PPUSH
18955: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , CratesArea , true ) ;
18959: LD_INT 1
18961: PPUSH
18962: LD_INT 5
18964: PPUSH
18965: CALL_OW 12
18969: PPUSH
18970: LD_INT 21
18972: PPUSH
18973: LD_INT 1
18975: PPUSH
18976: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
18980: LD_ADDR_EXP 38
18984: PUSH
18985: LD_EXP 38
18989: PUSH
18990: LD_INT 1
18992: PLUS
18993: ST_TO_ADDR
// end ; if cratesSpawned >= 90 then
18994: LD_EXP 38
18998: PUSH
18999: LD_INT 90
19001: GREATEREQUAL
19002: IFFALSE 19076
// begin if GetListOfCratesInArea ( CratesArea ) < 4 then
19004: LD_INT 21
19006: PPUSH
19007: CALL_OW 435
19011: PUSH
19012: LD_INT 4
19014: LESS
19015: IFFALSE 19026
// wait ( 0 0$20 ) else
19017: LD_INT 700
19019: PPUSH
19020: CALL_OW 67
19024: GO 19041
// wait ( rand ( 1 1$20 , 2 2$00 ) ) ;
19026: LD_INT 2800
19028: PPUSH
19029: LD_INT 4200
19031: PPUSH
19032: CALL_OW 12
19036: PPUSH
19037: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , CratesArea , true ) ;
19041: LD_INT 1
19043: PPUSH
19044: LD_INT 5
19046: PPUSH
19047: CALL_OW 12
19051: PPUSH
19052: LD_INT 21
19054: PPUSH
19055: LD_INT 1
19057: PPUSH
19058: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
19062: LD_ADDR_EXP 38
19066: PUSH
19067: LD_EXP 38
19071: PUSH
19072: LD_INT 1
19074: PLUS
19075: ST_TO_ADDR
// end ; until false ;
19076: LD_INT 0
19078: IFFALSE 18775
// end ; end_of_file
19080: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
19081: LD_INT 0
19083: PPUSH
// ar_miner := 81 ;
19084: LD_ADDR_EXP 52
19088: PUSH
19089: LD_INT 81
19091: ST_TO_ADDR
// ar_crane := 88 ;
19092: LD_ADDR_EXP 51
19096: PUSH
19097: LD_INT 88
19099: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
19100: LD_ADDR_EXP 46
19104: PUSH
19105: LD_INT 89
19107: ST_TO_ADDR
// us_hack := 99 ;
19108: LD_ADDR_EXP 47
19112: PUSH
19113: LD_INT 99
19115: ST_TO_ADDR
// us_artillery := 97 ;
19116: LD_ADDR_EXP 48
19120: PUSH
19121: LD_INT 97
19123: ST_TO_ADDR
// ar_bio_bomb := 91 ;
19124: LD_ADDR_EXP 49
19128: PUSH
19129: LD_INT 91
19131: ST_TO_ADDR
// ar_mortar := 92 ;
19132: LD_ADDR_EXP 50
19136: PUSH
19137: LD_INT 92
19139: ST_TO_ADDR
// ru_flamethrower := 93 ;
19140: LD_ADDR_EXP 53
19144: PUSH
19145: LD_INT 93
19147: ST_TO_ADDR
// ru_radar := 98 ;
19148: LD_ADDR_EXP 45
19152: PUSH
19153: LD_INT 98
19155: ST_TO_ADDR
// tech_Artillery := 80 ;
19156: LD_ADDR_EXP 54
19160: PUSH
19161: LD_INT 80
19163: ST_TO_ADDR
// tech_RadMat := 81 ;
19164: LD_ADDR_EXP 55
19168: PUSH
19169: LD_INT 81
19171: ST_TO_ADDR
// tech_BasicTools := 82 ;
19172: LD_ADDR_EXP 56
19176: PUSH
19177: LD_INT 82
19179: ST_TO_ADDR
// tech_Cargo := 83 ;
19180: LD_ADDR_EXP 57
19184: PUSH
19185: LD_INT 83
19187: ST_TO_ADDR
// tech_Track := 84 ;
19188: LD_ADDR_EXP 58
19192: PUSH
19193: LD_INT 84
19195: ST_TO_ADDR
// tech_Crane := 85 ;
19196: LD_ADDR_EXP 59
19200: PUSH
19201: LD_INT 85
19203: ST_TO_ADDR
// tech_Bulldozer := 86 ;
19204: LD_ADDR_EXP 60
19208: PUSH
19209: LD_INT 86
19211: ST_TO_ADDR
// tech_Hovercraft := 87 ;
19212: LD_ADDR_EXP 61
19216: PUSH
19217: LD_INT 87
19219: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
19220: LD_ADDR_EXP 62
19224: PUSH
19225: LD_INT 88
19227: ST_TO_ADDR
// class_mastodont := 31 ;
19228: LD_ADDR_EXP 63
19232: PUSH
19233: LD_INT 31
19235: ST_TO_ADDR
// class_horse := 21 ;
19236: LD_ADDR_EXP 64
19240: PUSH
19241: LD_INT 21
19243: ST_TO_ADDR
// end ;
19244: LD_VAR 0 1
19248: RET
// every 1 do
19249: GO 19251
19251: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
19252: CALL 19081 0 0
19256: END
// every 0 0$1 do
19257: GO 19259
19259: DISABLE
// begin enable ;
19260: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
19261: LD_STRING updateTimer(
19263: PUSH
19264: LD_OWVAR 1
19268: STR
19269: PUSH
19270: LD_STRING );
19272: STR
19273: PPUSH
19274: CALL_OW 559
// end ;
19278: END
// export function SOS_MapStart ( ) ; begin
19279: LD_INT 0
19281: PPUSH
// if streamModeActive then
19282: LD_EXP 65
19286: IFFALSE 19295
// DefineStreamItems ( true ) ;
19288: LD_INT 1
19290: PPUSH
19291: CALL 20945 0 1
// UpdateFactoryWaypoints ( ) ;
19295: CALL 34529 0 0
// end ;
19299: LD_VAR 0 1
19303: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19304: LD_INT 0
19306: PPUSH
// if p2 = 100 then
19307: LD_VAR 0 2
19311: PUSH
19312: LD_INT 100
19314: EQUAL
19315: IFFALSE 20318
// begin if not StreamModeActive then
19317: LD_EXP 65
19321: NOT
19322: IFFALSE 19332
// StreamModeActive := true ;
19324: LD_ADDR_EXP 65
19328: PUSH
19329: LD_INT 1
19331: ST_TO_ADDR
// if p3 = 0 then
19332: LD_VAR 0 3
19336: PUSH
19337: LD_INT 0
19339: EQUAL
19340: IFFALSE 19346
// InitStreamMode ;
19342: CALL 20481 0 0
// if p3 = 1 then
19346: LD_VAR 0 3
19350: PUSH
19351: LD_INT 1
19353: EQUAL
19354: IFFALSE 19364
// sRocket := true ;
19356: LD_ADDR_EXP 70
19360: PUSH
19361: LD_INT 1
19363: ST_TO_ADDR
// if p3 = 2 then
19364: LD_VAR 0 3
19368: PUSH
19369: LD_INT 2
19371: EQUAL
19372: IFFALSE 19382
// sSpeed := true ;
19374: LD_ADDR_EXP 69
19378: PUSH
19379: LD_INT 1
19381: ST_TO_ADDR
// if p3 = 3 then
19382: LD_VAR 0 3
19386: PUSH
19387: LD_INT 3
19389: EQUAL
19390: IFFALSE 19400
// sEngine := true ;
19392: LD_ADDR_EXP 71
19396: PUSH
19397: LD_INT 1
19399: ST_TO_ADDR
// if p3 = 4 then
19400: LD_VAR 0 3
19404: PUSH
19405: LD_INT 4
19407: EQUAL
19408: IFFALSE 19418
// sSpec := true ;
19410: LD_ADDR_EXP 68
19414: PUSH
19415: LD_INT 1
19417: ST_TO_ADDR
// if p3 = 5 then
19418: LD_VAR 0 3
19422: PUSH
19423: LD_INT 5
19425: EQUAL
19426: IFFALSE 19436
// sLevel := true ;
19428: LD_ADDR_EXP 72
19432: PUSH
19433: LD_INT 1
19435: ST_TO_ADDR
// if p3 = 6 then
19436: LD_VAR 0 3
19440: PUSH
19441: LD_INT 6
19443: EQUAL
19444: IFFALSE 19454
// sArmoury := true ;
19446: LD_ADDR_EXP 73
19450: PUSH
19451: LD_INT 1
19453: ST_TO_ADDR
// if p3 = 7 then
19454: LD_VAR 0 3
19458: PUSH
19459: LD_INT 7
19461: EQUAL
19462: IFFALSE 19472
// sRadar := true ;
19464: LD_ADDR_EXP 74
19468: PUSH
19469: LD_INT 1
19471: ST_TO_ADDR
// if p3 = 8 then
19472: LD_VAR 0 3
19476: PUSH
19477: LD_INT 8
19479: EQUAL
19480: IFFALSE 19490
// sBunker := true ;
19482: LD_ADDR_EXP 75
19486: PUSH
19487: LD_INT 1
19489: ST_TO_ADDR
// if p3 = 9 then
19490: LD_VAR 0 3
19494: PUSH
19495: LD_INT 9
19497: EQUAL
19498: IFFALSE 19508
// sHack := true ;
19500: LD_ADDR_EXP 76
19504: PUSH
19505: LD_INT 1
19507: ST_TO_ADDR
// if p3 = 10 then
19508: LD_VAR 0 3
19512: PUSH
19513: LD_INT 10
19515: EQUAL
19516: IFFALSE 19526
// sFire := true ;
19518: LD_ADDR_EXP 77
19522: PUSH
19523: LD_INT 1
19525: ST_TO_ADDR
// if p3 = 11 then
19526: LD_VAR 0 3
19530: PUSH
19531: LD_INT 11
19533: EQUAL
19534: IFFALSE 19544
// sRefresh := true ;
19536: LD_ADDR_EXP 78
19540: PUSH
19541: LD_INT 1
19543: ST_TO_ADDR
// if p3 = 12 then
19544: LD_VAR 0 3
19548: PUSH
19549: LD_INT 12
19551: EQUAL
19552: IFFALSE 19562
// sExp := true ;
19554: LD_ADDR_EXP 79
19558: PUSH
19559: LD_INT 1
19561: ST_TO_ADDR
// if p3 = 13 then
19562: LD_VAR 0 3
19566: PUSH
19567: LD_INT 13
19569: EQUAL
19570: IFFALSE 19580
// sDepot := true ;
19572: LD_ADDR_EXP 80
19576: PUSH
19577: LD_INT 1
19579: ST_TO_ADDR
// if p3 = 14 then
19580: LD_VAR 0 3
19584: PUSH
19585: LD_INT 14
19587: EQUAL
19588: IFFALSE 19598
// sFlag := true ;
19590: LD_ADDR_EXP 81
19594: PUSH
19595: LD_INT 1
19597: ST_TO_ADDR
// if p3 = 15 then
19598: LD_VAR 0 3
19602: PUSH
19603: LD_INT 15
19605: EQUAL
19606: IFFALSE 19616
// sKamikadze := true ;
19608: LD_ADDR_EXP 89
19612: PUSH
19613: LD_INT 1
19615: ST_TO_ADDR
// if p3 = 16 then
19616: LD_VAR 0 3
19620: PUSH
19621: LD_INT 16
19623: EQUAL
19624: IFFALSE 19634
// sTroll := true ;
19626: LD_ADDR_EXP 90
19630: PUSH
19631: LD_INT 1
19633: ST_TO_ADDR
// if p3 = 17 then
19634: LD_VAR 0 3
19638: PUSH
19639: LD_INT 17
19641: EQUAL
19642: IFFALSE 19652
// sSlow := true ;
19644: LD_ADDR_EXP 91
19648: PUSH
19649: LD_INT 1
19651: ST_TO_ADDR
// if p3 = 18 then
19652: LD_VAR 0 3
19656: PUSH
19657: LD_INT 18
19659: EQUAL
19660: IFFALSE 19670
// sLack := true ;
19662: LD_ADDR_EXP 92
19666: PUSH
19667: LD_INT 1
19669: ST_TO_ADDR
// if p3 = 19 then
19670: LD_VAR 0 3
19674: PUSH
19675: LD_INT 19
19677: EQUAL
19678: IFFALSE 19688
// sTank := true ;
19680: LD_ADDR_EXP 94
19684: PUSH
19685: LD_INT 1
19687: ST_TO_ADDR
// if p3 = 20 then
19688: LD_VAR 0 3
19692: PUSH
19693: LD_INT 20
19695: EQUAL
19696: IFFALSE 19706
// sRemote := true ;
19698: LD_ADDR_EXP 95
19702: PUSH
19703: LD_INT 1
19705: ST_TO_ADDR
// if p3 = 21 then
19706: LD_VAR 0 3
19710: PUSH
19711: LD_INT 21
19713: EQUAL
19714: IFFALSE 19724
// sPowell := true ;
19716: LD_ADDR_EXP 96
19720: PUSH
19721: LD_INT 1
19723: ST_TO_ADDR
// if p3 = 22 then
19724: LD_VAR 0 3
19728: PUSH
19729: LD_INT 22
19731: EQUAL
19732: IFFALSE 19742
// sTeleport := true ;
19734: LD_ADDR_EXP 99
19738: PUSH
19739: LD_INT 1
19741: ST_TO_ADDR
// if p3 = 23 then
19742: LD_VAR 0 3
19746: PUSH
19747: LD_INT 23
19749: EQUAL
19750: IFFALSE 19760
// sOilTower := true ;
19752: LD_ADDR_EXP 101
19756: PUSH
19757: LD_INT 1
19759: ST_TO_ADDR
// if p3 = 24 then
19760: LD_VAR 0 3
19764: PUSH
19765: LD_INT 24
19767: EQUAL
19768: IFFALSE 19778
// sShovel := true ;
19770: LD_ADDR_EXP 102
19774: PUSH
19775: LD_INT 1
19777: ST_TO_ADDR
// if p3 = 25 then
19778: LD_VAR 0 3
19782: PUSH
19783: LD_INT 25
19785: EQUAL
19786: IFFALSE 19796
// sSheik := true ;
19788: LD_ADDR_EXP 103
19792: PUSH
19793: LD_INT 1
19795: ST_TO_ADDR
// if p3 = 26 then
19796: LD_VAR 0 3
19800: PUSH
19801: LD_INT 26
19803: EQUAL
19804: IFFALSE 19814
// sEarthquake := true ;
19806: LD_ADDR_EXP 105
19810: PUSH
19811: LD_INT 1
19813: ST_TO_ADDR
// if p3 = 27 then
19814: LD_VAR 0 3
19818: PUSH
19819: LD_INT 27
19821: EQUAL
19822: IFFALSE 19832
// sAI := true ;
19824: LD_ADDR_EXP 106
19828: PUSH
19829: LD_INT 1
19831: ST_TO_ADDR
// if p3 = 28 then
19832: LD_VAR 0 3
19836: PUSH
19837: LD_INT 28
19839: EQUAL
19840: IFFALSE 19850
// sCargo := true ;
19842: LD_ADDR_EXP 109
19846: PUSH
19847: LD_INT 1
19849: ST_TO_ADDR
// if p3 = 29 then
19850: LD_VAR 0 3
19854: PUSH
19855: LD_INT 29
19857: EQUAL
19858: IFFALSE 19868
// sDLaser := true ;
19860: LD_ADDR_EXP 110
19864: PUSH
19865: LD_INT 1
19867: ST_TO_ADDR
// if p3 = 30 then
19868: LD_VAR 0 3
19872: PUSH
19873: LD_INT 30
19875: EQUAL
19876: IFFALSE 19886
// sExchange := true ;
19878: LD_ADDR_EXP 111
19882: PUSH
19883: LD_INT 1
19885: ST_TO_ADDR
// if p3 = 31 then
19886: LD_VAR 0 3
19890: PUSH
19891: LD_INT 31
19893: EQUAL
19894: IFFALSE 19904
// sFac := true ;
19896: LD_ADDR_EXP 112
19900: PUSH
19901: LD_INT 1
19903: ST_TO_ADDR
// if p3 = 32 then
19904: LD_VAR 0 3
19908: PUSH
19909: LD_INT 32
19911: EQUAL
19912: IFFALSE 19922
// sPower := true ;
19914: LD_ADDR_EXP 113
19918: PUSH
19919: LD_INT 1
19921: ST_TO_ADDR
// if p3 = 33 then
19922: LD_VAR 0 3
19926: PUSH
19927: LD_INT 33
19929: EQUAL
19930: IFFALSE 19940
// sRandom := true ;
19932: LD_ADDR_EXP 114
19936: PUSH
19937: LD_INT 1
19939: ST_TO_ADDR
// if p3 = 34 then
19940: LD_VAR 0 3
19944: PUSH
19945: LD_INT 34
19947: EQUAL
19948: IFFALSE 19958
// sShield := true ;
19950: LD_ADDR_EXP 115
19954: PUSH
19955: LD_INT 1
19957: ST_TO_ADDR
// if p3 = 35 then
19958: LD_VAR 0 3
19962: PUSH
19963: LD_INT 35
19965: EQUAL
19966: IFFALSE 19976
// sTime := true ;
19968: LD_ADDR_EXP 116
19972: PUSH
19973: LD_INT 1
19975: ST_TO_ADDR
// if p3 = 36 then
19976: LD_VAR 0 3
19980: PUSH
19981: LD_INT 36
19983: EQUAL
19984: IFFALSE 19994
// sTools := true ;
19986: LD_ADDR_EXP 117
19990: PUSH
19991: LD_INT 1
19993: ST_TO_ADDR
// if p3 = 101 then
19994: LD_VAR 0 3
19998: PUSH
19999: LD_INT 101
20001: EQUAL
20002: IFFALSE 20012
// sSold := true ;
20004: LD_ADDR_EXP 82
20008: PUSH
20009: LD_INT 1
20011: ST_TO_ADDR
// if p3 = 102 then
20012: LD_VAR 0 3
20016: PUSH
20017: LD_INT 102
20019: EQUAL
20020: IFFALSE 20030
// sDiff := true ;
20022: LD_ADDR_EXP 83
20026: PUSH
20027: LD_INT 1
20029: ST_TO_ADDR
// if p3 = 103 then
20030: LD_VAR 0 3
20034: PUSH
20035: LD_INT 103
20037: EQUAL
20038: IFFALSE 20048
// sFog := true ;
20040: LD_ADDR_EXP 86
20044: PUSH
20045: LD_INT 1
20047: ST_TO_ADDR
// if p3 = 104 then
20048: LD_VAR 0 3
20052: PUSH
20053: LD_INT 104
20055: EQUAL
20056: IFFALSE 20066
// sReset := true ;
20058: LD_ADDR_EXP 87
20062: PUSH
20063: LD_INT 1
20065: ST_TO_ADDR
// if p3 = 105 then
20066: LD_VAR 0 3
20070: PUSH
20071: LD_INT 105
20073: EQUAL
20074: IFFALSE 20084
// sSun := true ;
20076: LD_ADDR_EXP 88
20080: PUSH
20081: LD_INT 1
20083: ST_TO_ADDR
// if p3 = 106 then
20084: LD_VAR 0 3
20088: PUSH
20089: LD_INT 106
20091: EQUAL
20092: IFFALSE 20102
// sTiger := true ;
20094: LD_ADDR_EXP 84
20098: PUSH
20099: LD_INT 1
20101: ST_TO_ADDR
// if p3 = 107 then
20102: LD_VAR 0 3
20106: PUSH
20107: LD_INT 107
20109: EQUAL
20110: IFFALSE 20120
// sBomb := true ;
20112: LD_ADDR_EXP 85
20116: PUSH
20117: LD_INT 1
20119: ST_TO_ADDR
// if p3 = 108 then
20120: LD_VAR 0 3
20124: PUSH
20125: LD_INT 108
20127: EQUAL
20128: IFFALSE 20138
// sWound := true ;
20130: LD_ADDR_EXP 93
20134: PUSH
20135: LD_INT 1
20137: ST_TO_ADDR
// if p3 = 109 then
20138: LD_VAR 0 3
20142: PUSH
20143: LD_INT 109
20145: EQUAL
20146: IFFALSE 20156
// sBetray := true ;
20148: LD_ADDR_EXP 97
20152: PUSH
20153: LD_INT 1
20155: ST_TO_ADDR
// if p3 = 110 then
20156: LD_VAR 0 3
20160: PUSH
20161: LD_INT 110
20163: EQUAL
20164: IFFALSE 20174
// sContamin := true ;
20166: LD_ADDR_EXP 98
20170: PUSH
20171: LD_INT 1
20173: ST_TO_ADDR
// if p3 = 111 then
20174: LD_VAR 0 3
20178: PUSH
20179: LD_INT 111
20181: EQUAL
20182: IFFALSE 20192
// sOil := true ;
20184: LD_ADDR_EXP 100
20188: PUSH
20189: LD_INT 1
20191: ST_TO_ADDR
// if p3 = 112 then
20192: LD_VAR 0 3
20196: PUSH
20197: LD_INT 112
20199: EQUAL
20200: IFFALSE 20210
// sStu := true ;
20202: LD_ADDR_EXP 104
20206: PUSH
20207: LD_INT 1
20209: ST_TO_ADDR
// if p3 = 113 then
20210: LD_VAR 0 3
20214: PUSH
20215: LD_INT 113
20217: EQUAL
20218: IFFALSE 20228
// sBazooka := true ;
20220: LD_ADDR_EXP 107
20224: PUSH
20225: LD_INT 1
20227: ST_TO_ADDR
// if p3 = 114 then
20228: LD_VAR 0 3
20232: PUSH
20233: LD_INT 114
20235: EQUAL
20236: IFFALSE 20246
// sMortar := true ;
20238: LD_ADDR_EXP 108
20242: PUSH
20243: LD_INT 1
20245: ST_TO_ADDR
// if p3 = 115 then
20246: LD_VAR 0 3
20250: PUSH
20251: LD_INT 115
20253: EQUAL
20254: IFFALSE 20264
// sRanger := true ;
20256: LD_ADDR_EXP 118
20260: PUSH
20261: LD_INT 1
20263: ST_TO_ADDR
// if p3 = 116 then
20264: LD_VAR 0 3
20268: PUSH
20269: LD_INT 116
20271: EQUAL
20272: IFFALSE 20282
// sComputer := true ;
20274: LD_ADDR_EXP 119
20278: PUSH
20279: LD_INT 1
20281: ST_TO_ADDR
// if p3 = 117 then
20282: LD_VAR 0 3
20286: PUSH
20287: LD_INT 117
20289: EQUAL
20290: IFFALSE 20300
// s30 := true ;
20292: LD_ADDR_EXP 120
20296: PUSH
20297: LD_INT 1
20299: ST_TO_ADDR
// if p3 = 118 then
20300: LD_VAR 0 3
20304: PUSH
20305: LD_INT 118
20307: EQUAL
20308: IFFALSE 20318
// s60 := true ;
20310: LD_ADDR_EXP 121
20314: PUSH
20315: LD_INT 1
20317: ST_TO_ADDR
// end ; if p2 = 101 then
20318: LD_VAR 0 2
20322: PUSH
20323: LD_INT 101
20325: EQUAL
20326: IFFALSE 20454
// begin case p3 of 1 :
20328: LD_VAR 0 3
20332: PUSH
20333: LD_INT 1
20335: DOUBLE
20336: EQUAL
20337: IFTRUE 20341
20339: GO 20348
20341: POP
// hHackUnlimitedResources ; 2 :
20342: CALL 32552 0 0
20346: GO 20454
20348: LD_INT 2
20350: DOUBLE
20351: EQUAL
20352: IFTRUE 20356
20354: GO 20363
20356: POP
// hHackSetLevel10 ; 3 :
20357: CALL 32685 0 0
20361: GO 20454
20363: LD_INT 3
20365: DOUBLE
20366: EQUAL
20367: IFTRUE 20371
20369: GO 20378
20371: POP
// hHackSetLevel10YourUnits ; 4 :
20372: CALL 32770 0 0
20376: GO 20454
20378: LD_INT 4
20380: DOUBLE
20381: EQUAL
20382: IFTRUE 20386
20384: GO 20393
20386: POP
// hHackInvincible ; 5 :
20387: CALL 33218 0 0
20391: GO 20454
20393: LD_INT 5
20395: DOUBLE
20396: EQUAL
20397: IFTRUE 20401
20399: GO 20408
20401: POP
// hHackInvisible ; 6 :
20402: CALL 33329 0 0
20406: GO 20454
20408: LD_INT 6
20410: DOUBLE
20411: EQUAL
20412: IFTRUE 20416
20414: GO 20423
20416: POP
// hHackChangeYourSide ; 7 :
20417: CALL 33386 0 0
20421: GO 20454
20423: LD_INT 7
20425: DOUBLE
20426: EQUAL
20427: IFTRUE 20431
20429: GO 20438
20431: POP
// hHackChangeUnitSide ; 8 :
20432: CALL 33428 0 0
20436: GO 20454
20438: LD_INT 8
20440: DOUBLE
20441: EQUAL
20442: IFTRUE 20446
20444: GO 20453
20446: POP
// hHackFog ; end ;
20447: CALL 33529 0 0
20451: GO 20454
20453: POP
// end ; end ;
20454: LD_VAR 0 7
20458: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
20459: GO 20461
20461: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
20462: LD_STRING initStreamRollete();
20464: PPUSH
20465: CALL_OW 559
// InitStreamMode ;
20469: CALL 20481 0 0
// DefineStreamItems ( false ) ;
20473: LD_INT 0
20475: PPUSH
20476: CALL 20945 0 1
// end ;
20480: END
// function InitStreamMode ; begin
20481: LD_INT 0
20483: PPUSH
// streamModeActive := false ;
20484: LD_ADDR_EXP 65
20488: PUSH
20489: LD_INT 0
20491: ST_TO_ADDR
// normalCounter := 36 ;
20492: LD_ADDR_EXP 66
20496: PUSH
20497: LD_INT 36
20499: ST_TO_ADDR
// hardcoreCounter := 18 ;
20500: LD_ADDR_EXP 67
20504: PUSH
20505: LD_INT 18
20507: ST_TO_ADDR
// sRocket := false ;
20508: LD_ADDR_EXP 70
20512: PUSH
20513: LD_INT 0
20515: ST_TO_ADDR
// sSpeed := false ;
20516: LD_ADDR_EXP 69
20520: PUSH
20521: LD_INT 0
20523: ST_TO_ADDR
// sEngine := false ;
20524: LD_ADDR_EXP 71
20528: PUSH
20529: LD_INT 0
20531: ST_TO_ADDR
// sSpec := false ;
20532: LD_ADDR_EXP 68
20536: PUSH
20537: LD_INT 0
20539: ST_TO_ADDR
// sLevel := false ;
20540: LD_ADDR_EXP 72
20544: PUSH
20545: LD_INT 0
20547: ST_TO_ADDR
// sArmoury := false ;
20548: LD_ADDR_EXP 73
20552: PUSH
20553: LD_INT 0
20555: ST_TO_ADDR
// sRadar := false ;
20556: LD_ADDR_EXP 74
20560: PUSH
20561: LD_INT 0
20563: ST_TO_ADDR
// sBunker := false ;
20564: LD_ADDR_EXP 75
20568: PUSH
20569: LD_INT 0
20571: ST_TO_ADDR
// sHack := false ;
20572: LD_ADDR_EXP 76
20576: PUSH
20577: LD_INT 0
20579: ST_TO_ADDR
// sFire := false ;
20580: LD_ADDR_EXP 77
20584: PUSH
20585: LD_INT 0
20587: ST_TO_ADDR
// sRefresh := false ;
20588: LD_ADDR_EXP 78
20592: PUSH
20593: LD_INT 0
20595: ST_TO_ADDR
// sExp := false ;
20596: LD_ADDR_EXP 79
20600: PUSH
20601: LD_INT 0
20603: ST_TO_ADDR
// sDepot := false ;
20604: LD_ADDR_EXP 80
20608: PUSH
20609: LD_INT 0
20611: ST_TO_ADDR
// sFlag := false ;
20612: LD_ADDR_EXP 81
20616: PUSH
20617: LD_INT 0
20619: ST_TO_ADDR
// sKamikadze := false ;
20620: LD_ADDR_EXP 89
20624: PUSH
20625: LD_INT 0
20627: ST_TO_ADDR
// sTroll := false ;
20628: LD_ADDR_EXP 90
20632: PUSH
20633: LD_INT 0
20635: ST_TO_ADDR
// sSlow := false ;
20636: LD_ADDR_EXP 91
20640: PUSH
20641: LD_INT 0
20643: ST_TO_ADDR
// sLack := false ;
20644: LD_ADDR_EXP 92
20648: PUSH
20649: LD_INT 0
20651: ST_TO_ADDR
// sTank := false ;
20652: LD_ADDR_EXP 94
20656: PUSH
20657: LD_INT 0
20659: ST_TO_ADDR
// sRemote := false ;
20660: LD_ADDR_EXP 95
20664: PUSH
20665: LD_INT 0
20667: ST_TO_ADDR
// sPowell := false ;
20668: LD_ADDR_EXP 96
20672: PUSH
20673: LD_INT 0
20675: ST_TO_ADDR
// sTeleport := false ;
20676: LD_ADDR_EXP 99
20680: PUSH
20681: LD_INT 0
20683: ST_TO_ADDR
// sOilTower := false ;
20684: LD_ADDR_EXP 101
20688: PUSH
20689: LD_INT 0
20691: ST_TO_ADDR
// sShovel := false ;
20692: LD_ADDR_EXP 102
20696: PUSH
20697: LD_INT 0
20699: ST_TO_ADDR
// sSheik := false ;
20700: LD_ADDR_EXP 103
20704: PUSH
20705: LD_INT 0
20707: ST_TO_ADDR
// sEarthquake := false ;
20708: LD_ADDR_EXP 105
20712: PUSH
20713: LD_INT 0
20715: ST_TO_ADDR
// sAI := false ;
20716: LD_ADDR_EXP 106
20720: PUSH
20721: LD_INT 0
20723: ST_TO_ADDR
// sCargo := false ;
20724: LD_ADDR_EXP 109
20728: PUSH
20729: LD_INT 0
20731: ST_TO_ADDR
// sDLaser := false ;
20732: LD_ADDR_EXP 110
20736: PUSH
20737: LD_INT 0
20739: ST_TO_ADDR
// sExchange := false ;
20740: LD_ADDR_EXP 111
20744: PUSH
20745: LD_INT 0
20747: ST_TO_ADDR
// sFac := false ;
20748: LD_ADDR_EXP 112
20752: PUSH
20753: LD_INT 0
20755: ST_TO_ADDR
// sPower := false ;
20756: LD_ADDR_EXP 113
20760: PUSH
20761: LD_INT 0
20763: ST_TO_ADDR
// sRandom := false ;
20764: LD_ADDR_EXP 114
20768: PUSH
20769: LD_INT 0
20771: ST_TO_ADDR
// sShield := false ;
20772: LD_ADDR_EXP 115
20776: PUSH
20777: LD_INT 0
20779: ST_TO_ADDR
// sTime := false ;
20780: LD_ADDR_EXP 116
20784: PUSH
20785: LD_INT 0
20787: ST_TO_ADDR
// sTools := false ;
20788: LD_ADDR_EXP 117
20792: PUSH
20793: LD_INT 0
20795: ST_TO_ADDR
// sSold := false ;
20796: LD_ADDR_EXP 82
20800: PUSH
20801: LD_INT 0
20803: ST_TO_ADDR
// sDiff := false ;
20804: LD_ADDR_EXP 83
20808: PUSH
20809: LD_INT 0
20811: ST_TO_ADDR
// sFog := false ;
20812: LD_ADDR_EXP 86
20816: PUSH
20817: LD_INT 0
20819: ST_TO_ADDR
// sReset := false ;
20820: LD_ADDR_EXP 87
20824: PUSH
20825: LD_INT 0
20827: ST_TO_ADDR
// sSun := false ;
20828: LD_ADDR_EXP 88
20832: PUSH
20833: LD_INT 0
20835: ST_TO_ADDR
// sTiger := false ;
20836: LD_ADDR_EXP 84
20840: PUSH
20841: LD_INT 0
20843: ST_TO_ADDR
// sBomb := false ;
20844: LD_ADDR_EXP 85
20848: PUSH
20849: LD_INT 0
20851: ST_TO_ADDR
// sWound := false ;
20852: LD_ADDR_EXP 93
20856: PUSH
20857: LD_INT 0
20859: ST_TO_ADDR
// sBetray := false ;
20860: LD_ADDR_EXP 97
20864: PUSH
20865: LD_INT 0
20867: ST_TO_ADDR
// sContamin := false ;
20868: LD_ADDR_EXP 98
20872: PUSH
20873: LD_INT 0
20875: ST_TO_ADDR
// sOil := false ;
20876: LD_ADDR_EXP 100
20880: PUSH
20881: LD_INT 0
20883: ST_TO_ADDR
// sStu := false ;
20884: LD_ADDR_EXP 104
20888: PUSH
20889: LD_INT 0
20891: ST_TO_ADDR
// sBazooka := false ;
20892: LD_ADDR_EXP 107
20896: PUSH
20897: LD_INT 0
20899: ST_TO_ADDR
// sMortar := false ;
20900: LD_ADDR_EXP 108
20904: PUSH
20905: LD_INT 0
20907: ST_TO_ADDR
// sRanger := false ;
20908: LD_ADDR_EXP 118
20912: PUSH
20913: LD_INT 0
20915: ST_TO_ADDR
// sComputer := false ;
20916: LD_ADDR_EXP 119
20920: PUSH
20921: LD_INT 0
20923: ST_TO_ADDR
// s30 := false ;
20924: LD_ADDR_EXP 120
20928: PUSH
20929: LD_INT 0
20931: ST_TO_ADDR
// s60 := false ;
20932: LD_ADDR_EXP 121
20936: PUSH
20937: LD_INT 0
20939: ST_TO_ADDR
// end ;
20940: LD_VAR 0 1
20944: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
20945: LD_INT 0
20947: PPUSH
20948: PPUSH
20949: PPUSH
20950: PPUSH
20951: PPUSH
20952: PPUSH
20953: PPUSH
// result := [ ] ;
20954: LD_ADDR_VAR 0 2
20958: PUSH
20959: EMPTY
20960: ST_TO_ADDR
// if campaign_id = 1 then
20961: LD_OWVAR 69
20965: PUSH
20966: LD_INT 1
20968: EQUAL
20969: IFFALSE 24135
// begin case mission_number of 1 :
20971: LD_OWVAR 70
20975: PUSH
20976: LD_INT 1
20978: DOUBLE
20979: EQUAL
20980: IFTRUE 20984
20982: GO 21060
20984: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
20985: LD_ADDR_VAR 0 2
20989: PUSH
20990: LD_INT 2
20992: PUSH
20993: LD_INT 4
20995: PUSH
20996: LD_INT 11
20998: PUSH
20999: LD_INT 12
21001: PUSH
21002: LD_INT 15
21004: PUSH
21005: LD_INT 16
21007: PUSH
21008: LD_INT 22
21010: PUSH
21011: LD_INT 23
21013: PUSH
21014: LD_INT 26
21016: PUSH
21017: EMPTY
21018: LIST
21019: LIST
21020: LIST
21021: LIST
21022: LIST
21023: LIST
21024: LIST
21025: LIST
21026: LIST
21027: PUSH
21028: LD_INT 101
21030: PUSH
21031: LD_INT 102
21033: PUSH
21034: LD_INT 106
21036: PUSH
21037: LD_INT 116
21039: PUSH
21040: LD_INT 117
21042: PUSH
21043: LD_INT 118
21045: PUSH
21046: EMPTY
21047: LIST
21048: LIST
21049: LIST
21050: LIST
21051: LIST
21052: LIST
21053: PUSH
21054: EMPTY
21055: LIST
21056: LIST
21057: ST_TO_ADDR
21058: GO 24133
21060: LD_INT 2
21062: DOUBLE
21063: EQUAL
21064: IFTRUE 21068
21066: GO 21152
21068: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
21069: LD_ADDR_VAR 0 2
21073: PUSH
21074: LD_INT 2
21076: PUSH
21077: LD_INT 4
21079: PUSH
21080: LD_INT 11
21082: PUSH
21083: LD_INT 12
21085: PUSH
21086: LD_INT 15
21088: PUSH
21089: LD_INT 16
21091: PUSH
21092: LD_INT 22
21094: PUSH
21095: LD_INT 23
21097: PUSH
21098: LD_INT 26
21100: PUSH
21101: EMPTY
21102: LIST
21103: LIST
21104: LIST
21105: LIST
21106: LIST
21107: LIST
21108: LIST
21109: LIST
21110: LIST
21111: PUSH
21112: LD_INT 101
21114: PUSH
21115: LD_INT 102
21117: PUSH
21118: LD_INT 105
21120: PUSH
21121: LD_INT 106
21123: PUSH
21124: LD_INT 108
21126: PUSH
21127: LD_INT 116
21129: PUSH
21130: LD_INT 117
21132: PUSH
21133: LD_INT 118
21135: PUSH
21136: EMPTY
21137: LIST
21138: LIST
21139: LIST
21140: LIST
21141: LIST
21142: LIST
21143: LIST
21144: LIST
21145: PUSH
21146: EMPTY
21147: LIST
21148: LIST
21149: ST_TO_ADDR
21150: GO 24133
21152: LD_INT 3
21154: DOUBLE
21155: EQUAL
21156: IFTRUE 21160
21158: GO 21248
21160: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
21161: LD_ADDR_VAR 0 2
21165: PUSH
21166: LD_INT 2
21168: PUSH
21169: LD_INT 4
21171: PUSH
21172: LD_INT 5
21174: PUSH
21175: LD_INT 11
21177: PUSH
21178: LD_INT 12
21180: PUSH
21181: LD_INT 15
21183: PUSH
21184: LD_INT 16
21186: PUSH
21187: LD_INT 22
21189: PUSH
21190: LD_INT 26
21192: PUSH
21193: LD_INT 36
21195: PUSH
21196: EMPTY
21197: LIST
21198: LIST
21199: LIST
21200: LIST
21201: LIST
21202: LIST
21203: LIST
21204: LIST
21205: LIST
21206: LIST
21207: PUSH
21208: LD_INT 101
21210: PUSH
21211: LD_INT 102
21213: PUSH
21214: LD_INT 105
21216: PUSH
21217: LD_INT 106
21219: PUSH
21220: LD_INT 108
21222: PUSH
21223: LD_INT 116
21225: PUSH
21226: LD_INT 117
21228: PUSH
21229: LD_INT 118
21231: PUSH
21232: EMPTY
21233: LIST
21234: LIST
21235: LIST
21236: LIST
21237: LIST
21238: LIST
21239: LIST
21240: LIST
21241: PUSH
21242: EMPTY
21243: LIST
21244: LIST
21245: ST_TO_ADDR
21246: GO 24133
21248: LD_INT 4
21250: DOUBLE
21251: EQUAL
21252: IFTRUE 21256
21254: GO 21352
21256: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
21257: LD_ADDR_VAR 0 2
21261: PUSH
21262: LD_INT 2
21264: PUSH
21265: LD_INT 4
21267: PUSH
21268: LD_INT 5
21270: PUSH
21271: LD_INT 8
21273: PUSH
21274: LD_INT 11
21276: PUSH
21277: LD_INT 12
21279: PUSH
21280: LD_INT 15
21282: PUSH
21283: LD_INT 16
21285: PUSH
21286: LD_INT 22
21288: PUSH
21289: LD_INT 23
21291: PUSH
21292: LD_INT 26
21294: PUSH
21295: LD_INT 36
21297: PUSH
21298: EMPTY
21299: LIST
21300: LIST
21301: LIST
21302: LIST
21303: LIST
21304: LIST
21305: LIST
21306: LIST
21307: LIST
21308: LIST
21309: LIST
21310: LIST
21311: PUSH
21312: LD_INT 101
21314: PUSH
21315: LD_INT 102
21317: PUSH
21318: LD_INT 105
21320: PUSH
21321: LD_INT 106
21323: PUSH
21324: LD_INT 108
21326: PUSH
21327: LD_INT 116
21329: PUSH
21330: LD_INT 117
21332: PUSH
21333: LD_INT 118
21335: PUSH
21336: EMPTY
21337: LIST
21338: LIST
21339: LIST
21340: LIST
21341: LIST
21342: LIST
21343: LIST
21344: LIST
21345: PUSH
21346: EMPTY
21347: LIST
21348: LIST
21349: ST_TO_ADDR
21350: GO 24133
21352: LD_INT 5
21354: DOUBLE
21355: EQUAL
21356: IFTRUE 21360
21358: GO 21472
21360: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
21361: LD_ADDR_VAR 0 2
21365: PUSH
21366: LD_INT 2
21368: PUSH
21369: LD_INT 4
21371: PUSH
21372: LD_INT 5
21374: PUSH
21375: LD_INT 6
21377: PUSH
21378: LD_INT 8
21380: PUSH
21381: LD_INT 11
21383: PUSH
21384: LD_INT 12
21386: PUSH
21387: LD_INT 15
21389: PUSH
21390: LD_INT 16
21392: PUSH
21393: LD_INT 22
21395: PUSH
21396: LD_INT 23
21398: PUSH
21399: LD_INT 25
21401: PUSH
21402: LD_INT 26
21404: PUSH
21405: LD_INT 36
21407: PUSH
21408: EMPTY
21409: LIST
21410: LIST
21411: LIST
21412: LIST
21413: LIST
21414: LIST
21415: LIST
21416: LIST
21417: LIST
21418: LIST
21419: LIST
21420: LIST
21421: LIST
21422: LIST
21423: PUSH
21424: LD_INT 101
21426: PUSH
21427: LD_INT 102
21429: PUSH
21430: LD_INT 105
21432: PUSH
21433: LD_INT 106
21435: PUSH
21436: LD_INT 108
21438: PUSH
21439: LD_INT 109
21441: PUSH
21442: LD_INT 112
21444: PUSH
21445: LD_INT 116
21447: PUSH
21448: LD_INT 117
21450: PUSH
21451: LD_INT 118
21453: PUSH
21454: EMPTY
21455: LIST
21456: LIST
21457: LIST
21458: LIST
21459: LIST
21460: LIST
21461: LIST
21462: LIST
21463: LIST
21464: LIST
21465: PUSH
21466: EMPTY
21467: LIST
21468: LIST
21469: ST_TO_ADDR
21470: GO 24133
21472: LD_INT 6
21474: DOUBLE
21475: EQUAL
21476: IFTRUE 21480
21478: GO 21612
21480: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
21481: LD_ADDR_VAR 0 2
21485: PUSH
21486: LD_INT 2
21488: PUSH
21489: LD_INT 4
21491: PUSH
21492: LD_INT 5
21494: PUSH
21495: LD_INT 6
21497: PUSH
21498: LD_INT 8
21500: PUSH
21501: LD_INT 11
21503: PUSH
21504: LD_INT 12
21506: PUSH
21507: LD_INT 15
21509: PUSH
21510: LD_INT 16
21512: PUSH
21513: LD_INT 20
21515: PUSH
21516: LD_INT 21
21518: PUSH
21519: LD_INT 22
21521: PUSH
21522: LD_INT 23
21524: PUSH
21525: LD_INT 25
21527: PUSH
21528: LD_INT 26
21530: PUSH
21531: LD_INT 30
21533: PUSH
21534: LD_INT 31
21536: PUSH
21537: LD_INT 32
21539: PUSH
21540: LD_INT 36
21542: PUSH
21543: EMPTY
21544: LIST
21545: LIST
21546: LIST
21547: LIST
21548: LIST
21549: LIST
21550: LIST
21551: LIST
21552: LIST
21553: LIST
21554: LIST
21555: LIST
21556: LIST
21557: LIST
21558: LIST
21559: LIST
21560: LIST
21561: LIST
21562: LIST
21563: PUSH
21564: LD_INT 101
21566: PUSH
21567: LD_INT 102
21569: PUSH
21570: LD_INT 105
21572: PUSH
21573: LD_INT 106
21575: PUSH
21576: LD_INT 108
21578: PUSH
21579: LD_INT 109
21581: PUSH
21582: LD_INT 112
21584: PUSH
21585: LD_INT 116
21587: PUSH
21588: LD_INT 117
21590: PUSH
21591: LD_INT 118
21593: PUSH
21594: EMPTY
21595: LIST
21596: LIST
21597: LIST
21598: LIST
21599: LIST
21600: LIST
21601: LIST
21602: LIST
21603: LIST
21604: LIST
21605: PUSH
21606: EMPTY
21607: LIST
21608: LIST
21609: ST_TO_ADDR
21610: GO 24133
21612: LD_INT 7
21614: DOUBLE
21615: EQUAL
21616: IFTRUE 21620
21618: GO 21732
21620: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
21621: LD_ADDR_VAR 0 2
21625: PUSH
21626: LD_INT 2
21628: PUSH
21629: LD_INT 4
21631: PUSH
21632: LD_INT 5
21634: PUSH
21635: LD_INT 7
21637: PUSH
21638: LD_INT 11
21640: PUSH
21641: LD_INT 12
21643: PUSH
21644: LD_INT 15
21646: PUSH
21647: LD_INT 16
21649: PUSH
21650: LD_INT 20
21652: PUSH
21653: LD_INT 21
21655: PUSH
21656: LD_INT 22
21658: PUSH
21659: LD_INT 23
21661: PUSH
21662: LD_INT 25
21664: PUSH
21665: LD_INT 26
21667: PUSH
21668: EMPTY
21669: LIST
21670: LIST
21671: LIST
21672: LIST
21673: LIST
21674: LIST
21675: LIST
21676: LIST
21677: LIST
21678: LIST
21679: LIST
21680: LIST
21681: LIST
21682: LIST
21683: PUSH
21684: LD_INT 101
21686: PUSH
21687: LD_INT 102
21689: PUSH
21690: LD_INT 103
21692: PUSH
21693: LD_INT 105
21695: PUSH
21696: LD_INT 106
21698: PUSH
21699: LD_INT 108
21701: PUSH
21702: LD_INT 112
21704: PUSH
21705: LD_INT 116
21707: PUSH
21708: LD_INT 117
21710: PUSH
21711: LD_INT 118
21713: PUSH
21714: EMPTY
21715: LIST
21716: LIST
21717: LIST
21718: LIST
21719: LIST
21720: LIST
21721: LIST
21722: LIST
21723: LIST
21724: LIST
21725: PUSH
21726: EMPTY
21727: LIST
21728: LIST
21729: ST_TO_ADDR
21730: GO 24133
21732: LD_INT 8
21734: DOUBLE
21735: EQUAL
21736: IFTRUE 21740
21738: GO 21880
21740: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
21741: LD_ADDR_VAR 0 2
21745: PUSH
21746: LD_INT 2
21748: PUSH
21749: LD_INT 4
21751: PUSH
21752: LD_INT 5
21754: PUSH
21755: LD_INT 6
21757: PUSH
21758: LD_INT 7
21760: PUSH
21761: LD_INT 8
21763: PUSH
21764: LD_INT 11
21766: PUSH
21767: LD_INT 12
21769: PUSH
21770: LD_INT 15
21772: PUSH
21773: LD_INT 16
21775: PUSH
21776: LD_INT 20
21778: PUSH
21779: LD_INT 21
21781: PUSH
21782: LD_INT 22
21784: PUSH
21785: LD_INT 23
21787: PUSH
21788: LD_INT 25
21790: PUSH
21791: LD_INT 26
21793: PUSH
21794: LD_INT 30
21796: PUSH
21797: LD_INT 31
21799: PUSH
21800: LD_INT 32
21802: PUSH
21803: LD_INT 36
21805: PUSH
21806: EMPTY
21807: LIST
21808: LIST
21809: LIST
21810: LIST
21811: LIST
21812: LIST
21813: LIST
21814: LIST
21815: LIST
21816: LIST
21817: LIST
21818: LIST
21819: LIST
21820: LIST
21821: LIST
21822: LIST
21823: LIST
21824: LIST
21825: LIST
21826: LIST
21827: PUSH
21828: LD_INT 101
21830: PUSH
21831: LD_INT 102
21833: PUSH
21834: LD_INT 103
21836: PUSH
21837: LD_INT 105
21839: PUSH
21840: LD_INT 106
21842: PUSH
21843: LD_INT 108
21845: PUSH
21846: LD_INT 109
21848: PUSH
21849: LD_INT 112
21851: PUSH
21852: LD_INT 116
21854: PUSH
21855: LD_INT 117
21857: PUSH
21858: LD_INT 118
21860: PUSH
21861: EMPTY
21862: LIST
21863: LIST
21864: LIST
21865: LIST
21866: LIST
21867: LIST
21868: LIST
21869: LIST
21870: LIST
21871: LIST
21872: LIST
21873: PUSH
21874: EMPTY
21875: LIST
21876: LIST
21877: ST_TO_ADDR
21878: GO 24133
21880: LD_INT 9
21882: DOUBLE
21883: EQUAL
21884: IFTRUE 21888
21886: GO 22036
21888: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
21889: LD_ADDR_VAR 0 2
21893: PUSH
21894: LD_INT 2
21896: PUSH
21897: LD_INT 4
21899: PUSH
21900: LD_INT 5
21902: PUSH
21903: LD_INT 6
21905: PUSH
21906: LD_INT 7
21908: PUSH
21909: LD_INT 8
21911: PUSH
21912: LD_INT 11
21914: PUSH
21915: LD_INT 12
21917: PUSH
21918: LD_INT 15
21920: PUSH
21921: LD_INT 16
21923: PUSH
21924: LD_INT 20
21926: PUSH
21927: LD_INT 21
21929: PUSH
21930: LD_INT 22
21932: PUSH
21933: LD_INT 23
21935: PUSH
21936: LD_INT 25
21938: PUSH
21939: LD_INT 26
21941: PUSH
21942: LD_INT 28
21944: PUSH
21945: LD_INT 30
21947: PUSH
21948: LD_INT 31
21950: PUSH
21951: LD_INT 32
21953: PUSH
21954: LD_INT 36
21956: PUSH
21957: EMPTY
21958: LIST
21959: LIST
21960: LIST
21961: LIST
21962: LIST
21963: LIST
21964: LIST
21965: LIST
21966: LIST
21967: LIST
21968: LIST
21969: LIST
21970: LIST
21971: LIST
21972: LIST
21973: LIST
21974: LIST
21975: LIST
21976: LIST
21977: LIST
21978: LIST
21979: PUSH
21980: LD_INT 101
21982: PUSH
21983: LD_INT 102
21985: PUSH
21986: LD_INT 103
21988: PUSH
21989: LD_INT 105
21991: PUSH
21992: LD_INT 106
21994: PUSH
21995: LD_INT 108
21997: PUSH
21998: LD_INT 109
22000: PUSH
22001: LD_INT 112
22003: PUSH
22004: LD_INT 114
22006: PUSH
22007: LD_INT 116
22009: PUSH
22010: LD_INT 117
22012: PUSH
22013: LD_INT 118
22015: PUSH
22016: EMPTY
22017: LIST
22018: LIST
22019: LIST
22020: LIST
22021: LIST
22022: LIST
22023: LIST
22024: LIST
22025: LIST
22026: LIST
22027: LIST
22028: LIST
22029: PUSH
22030: EMPTY
22031: LIST
22032: LIST
22033: ST_TO_ADDR
22034: GO 24133
22036: LD_INT 10
22038: DOUBLE
22039: EQUAL
22040: IFTRUE 22044
22042: GO 22240
22044: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
22045: LD_ADDR_VAR 0 2
22049: PUSH
22050: LD_INT 2
22052: PUSH
22053: LD_INT 4
22055: PUSH
22056: LD_INT 5
22058: PUSH
22059: LD_INT 6
22061: PUSH
22062: LD_INT 7
22064: PUSH
22065: LD_INT 8
22067: PUSH
22068: LD_INT 9
22070: PUSH
22071: LD_INT 10
22073: PUSH
22074: LD_INT 11
22076: PUSH
22077: LD_INT 12
22079: PUSH
22080: LD_INT 13
22082: PUSH
22083: LD_INT 14
22085: PUSH
22086: LD_INT 15
22088: PUSH
22089: LD_INT 16
22091: PUSH
22092: LD_INT 17
22094: PUSH
22095: LD_INT 18
22097: PUSH
22098: LD_INT 19
22100: PUSH
22101: LD_INT 20
22103: PUSH
22104: LD_INT 21
22106: PUSH
22107: LD_INT 22
22109: PUSH
22110: LD_INT 23
22112: PUSH
22113: LD_INT 24
22115: PUSH
22116: LD_INT 25
22118: PUSH
22119: LD_INT 26
22121: PUSH
22122: LD_INT 28
22124: PUSH
22125: LD_INT 30
22127: PUSH
22128: LD_INT 31
22130: PUSH
22131: LD_INT 32
22133: PUSH
22134: LD_INT 36
22136: PUSH
22137: EMPTY
22138: LIST
22139: LIST
22140: LIST
22141: LIST
22142: LIST
22143: LIST
22144: LIST
22145: LIST
22146: LIST
22147: LIST
22148: LIST
22149: LIST
22150: LIST
22151: LIST
22152: LIST
22153: LIST
22154: LIST
22155: LIST
22156: LIST
22157: LIST
22158: LIST
22159: LIST
22160: LIST
22161: LIST
22162: LIST
22163: LIST
22164: LIST
22165: LIST
22166: LIST
22167: PUSH
22168: LD_INT 101
22170: PUSH
22171: LD_INT 102
22173: PUSH
22174: LD_INT 103
22176: PUSH
22177: LD_INT 104
22179: PUSH
22180: LD_INT 105
22182: PUSH
22183: LD_INT 106
22185: PUSH
22186: LD_INT 107
22188: PUSH
22189: LD_INT 108
22191: PUSH
22192: LD_INT 109
22194: PUSH
22195: LD_INT 110
22197: PUSH
22198: LD_INT 111
22200: PUSH
22201: LD_INT 112
22203: PUSH
22204: LD_INT 114
22206: PUSH
22207: LD_INT 116
22209: PUSH
22210: LD_INT 117
22212: PUSH
22213: LD_INT 118
22215: PUSH
22216: EMPTY
22217: LIST
22218: LIST
22219: LIST
22220: LIST
22221: LIST
22222: LIST
22223: LIST
22224: LIST
22225: LIST
22226: LIST
22227: LIST
22228: LIST
22229: LIST
22230: LIST
22231: LIST
22232: LIST
22233: PUSH
22234: EMPTY
22235: LIST
22236: LIST
22237: ST_TO_ADDR
22238: GO 24133
22240: LD_INT 11
22242: DOUBLE
22243: EQUAL
22244: IFTRUE 22248
22246: GO 22452
22248: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
22249: LD_ADDR_VAR 0 2
22253: PUSH
22254: LD_INT 2
22256: PUSH
22257: LD_INT 3
22259: PUSH
22260: LD_INT 4
22262: PUSH
22263: LD_INT 5
22265: PUSH
22266: LD_INT 6
22268: PUSH
22269: LD_INT 7
22271: PUSH
22272: LD_INT 8
22274: PUSH
22275: LD_INT 9
22277: PUSH
22278: LD_INT 10
22280: PUSH
22281: LD_INT 11
22283: PUSH
22284: LD_INT 12
22286: PUSH
22287: LD_INT 13
22289: PUSH
22290: LD_INT 14
22292: PUSH
22293: LD_INT 15
22295: PUSH
22296: LD_INT 16
22298: PUSH
22299: LD_INT 17
22301: PUSH
22302: LD_INT 18
22304: PUSH
22305: LD_INT 19
22307: PUSH
22308: LD_INT 20
22310: PUSH
22311: LD_INT 21
22313: PUSH
22314: LD_INT 22
22316: PUSH
22317: LD_INT 23
22319: PUSH
22320: LD_INT 24
22322: PUSH
22323: LD_INT 25
22325: PUSH
22326: LD_INT 26
22328: PUSH
22329: LD_INT 28
22331: PUSH
22332: LD_INT 30
22334: PUSH
22335: LD_INT 31
22337: PUSH
22338: LD_INT 32
22340: PUSH
22341: LD_INT 34
22343: PUSH
22344: LD_INT 36
22346: PUSH
22347: EMPTY
22348: LIST
22349: LIST
22350: LIST
22351: LIST
22352: LIST
22353: LIST
22354: LIST
22355: LIST
22356: LIST
22357: LIST
22358: LIST
22359: LIST
22360: LIST
22361: LIST
22362: LIST
22363: LIST
22364: LIST
22365: LIST
22366: LIST
22367: LIST
22368: LIST
22369: LIST
22370: LIST
22371: LIST
22372: LIST
22373: LIST
22374: LIST
22375: LIST
22376: LIST
22377: LIST
22378: LIST
22379: PUSH
22380: LD_INT 101
22382: PUSH
22383: LD_INT 102
22385: PUSH
22386: LD_INT 103
22388: PUSH
22389: LD_INT 104
22391: PUSH
22392: LD_INT 105
22394: PUSH
22395: LD_INT 106
22397: PUSH
22398: LD_INT 107
22400: PUSH
22401: LD_INT 108
22403: PUSH
22404: LD_INT 109
22406: PUSH
22407: LD_INT 110
22409: PUSH
22410: LD_INT 111
22412: PUSH
22413: LD_INT 112
22415: PUSH
22416: LD_INT 114
22418: PUSH
22419: LD_INT 116
22421: PUSH
22422: LD_INT 117
22424: PUSH
22425: LD_INT 118
22427: PUSH
22428: EMPTY
22429: LIST
22430: LIST
22431: LIST
22432: LIST
22433: LIST
22434: LIST
22435: LIST
22436: LIST
22437: LIST
22438: LIST
22439: LIST
22440: LIST
22441: LIST
22442: LIST
22443: LIST
22444: LIST
22445: PUSH
22446: EMPTY
22447: LIST
22448: LIST
22449: ST_TO_ADDR
22450: GO 24133
22452: LD_INT 12
22454: DOUBLE
22455: EQUAL
22456: IFTRUE 22460
22458: GO 22680
22460: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
22461: LD_ADDR_VAR 0 2
22465: PUSH
22466: LD_INT 1
22468: PUSH
22469: LD_INT 2
22471: PUSH
22472: LD_INT 3
22474: PUSH
22475: LD_INT 4
22477: PUSH
22478: LD_INT 5
22480: PUSH
22481: LD_INT 6
22483: PUSH
22484: LD_INT 7
22486: PUSH
22487: LD_INT 8
22489: PUSH
22490: LD_INT 9
22492: PUSH
22493: LD_INT 10
22495: PUSH
22496: LD_INT 11
22498: PUSH
22499: LD_INT 12
22501: PUSH
22502: LD_INT 13
22504: PUSH
22505: LD_INT 14
22507: PUSH
22508: LD_INT 15
22510: PUSH
22511: LD_INT 16
22513: PUSH
22514: LD_INT 17
22516: PUSH
22517: LD_INT 18
22519: PUSH
22520: LD_INT 19
22522: PUSH
22523: LD_INT 20
22525: PUSH
22526: LD_INT 21
22528: PUSH
22529: LD_INT 22
22531: PUSH
22532: LD_INT 23
22534: PUSH
22535: LD_INT 24
22537: PUSH
22538: LD_INT 25
22540: PUSH
22541: LD_INT 26
22543: PUSH
22544: LD_INT 27
22546: PUSH
22547: LD_INT 28
22549: PUSH
22550: LD_INT 30
22552: PUSH
22553: LD_INT 31
22555: PUSH
22556: LD_INT 32
22558: PUSH
22559: LD_INT 33
22561: PUSH
22562: LD_INT 34
22564: PUSH
22565: LD_INT 36
22567: PUSH
22568: EMPTY
22569: LIST
22570: LIST
22571: LIST
22572: LIST
22573: LIST
22574: LIST
22575: LIST
22576: LIST
22577: LIST
22578: LIST
22579: LIST
22580: LIST
22581: LIST
22582: LIST
22583: LIST
22584: LIST
22585: LIST
22586: LIST
22587: LIST
22588: LIST
22589: LIST
22590: LIST
22591: LIST
22592: LIST
22593: LIST
22594: LIST
22595: LIST
22596: LIST
22597: LIST
22598: LIST
22599: LIST
22600: LIST
22601: LIST
22602: LIST
22603: PUSH
22604: LD_INT 101
22606: PUSH
22607: LD_INT 102
22609: PUSH
22610: LD_INT 103
22612: PUSH
22613: LD_INT 104
22615: PUSH
22616: LD_INT 105
22618: PUSH
22619: LD_INT 106
22621: PUSH
22622: LD_INT 107
22624: PUSH
22625: LD_INT 108
22627: PUSH
22628: LD_INT 109
22630: PUSH
22631: LD_INT 110
22633: PUSH
22634: LD_INT 111
22636: PUSH
22637: LD_INT 112
22639: PUSH
22640: LD_INT 113
22642: PUSH
22643: LD_INT 114
22645: PUSH
22646: LD_INT 116
22648: PUSH
22649: LD_INT 117
22651: PUSH
22652: LD_INT 118
22654: PUSH
22655: EMPTY
22656: LIST
22657: LIST
22658: LIST
22659: LIST
22660: LIST
22661: LIST
22662: LIST
22663: LIST
22664: LIST
22665: LIST
22666: LIST
22667: LIST
22668: LIST
22669: LIST
22670: LIST
22671: LIST
22672: LIST
22673: PUSH
22674: EMPTY
22675: LIST
22676: LIST
22677: ST_TO_ADDR
22678: GO 24133
22680: LD_INT 13
22682: DOUBLE
22683: EQUAL
22684: IFTRUE 22688
22686: GO 22896
22688: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
22689: LD_ADDR_VAR 0 2
22693: PUSH
22694: LD_INT 1
22696: PUSH
22697: LD_INT 2
22699: PUSH
22700: LD_INT 3
22702: PUSH
22703: LD_INT 4
22705: PUSH
22706: LD_INT 5
22708: PUSH
22709: LD_INT 8
22711: PUSH
22712: LD_INT 9
22714: PUSH
22715: LD_INT 10
22717: PUSH
22718: LD_INT 11
22720: PUSH
22721: LD_INT 12
22723: PUSH
22724: LD_INT 14
22726: PUSH
22727: LD_INT 15
22729: PUSH
22730: LD_INT 16
22732: PUSH
22733: LD_INT 17
22735: PUSH
22736: LD_INT 18
22738: PUSH
22739: LD_INT 19
22741: PUSH
22742: LD_INT 20
22744: PUSH
22745: LD_INT 21
22747: PUSH
22748: LD_INT 22
22750: PUSH
22751: LD_INT 23
22753: PUSH
22754: LD_INT 24
22756: PUSH
22757: LD_INT 25
22759: PUSH
22760: LD_INT 26
22762: PUSH
22763: LD_INT 27
22765: PUSH
22766: LD_INT 28
22768: PUSH
22769: LD_INT 30
22771: PUSH
22772: LD_INT 31
22774: PUSH
22775: LD_INT 32
22777: PUSH
22778: LD_INT 33
22780: PUSH
22781: LD_INT 34
22783: PUSH
22784: LD_INT 36
22786: PUSH
22787: EMPTY
22788: LIST
22789: LIST
22790: LIST
22791: LIST
22792: LIST
22793: LIST
22794: LIST
22795: LIST
22796: LIST
22797: LIST
22798: LIST
22799: LIST
22800: LIST
22801: LIST
22802: LIST
22803: LIST
22804: LIST
22805: LIST
22806: LIST
22807: LIST
22808: LIST
22809: LIST
22810: LIST
22811: LIST
22812: LIST
22813: LIST
22814: LIST
22815: LIST
22816: LIST
22817: LIST
22818: LIST
22819: PUSH
22820: LD_INT 101
22822: PUSH
22823: LD_INT 102
22825: PUSH
22826: LD_INT 103
22828: PUSH
22829: LD_INT 104
22831: PUSH
22832: LD_INT 105
22834: PUSH
22835: LD_INT 106
22837: PUSH
22838: LD_INT 107
22840: PUSH
22841: LD_INT 108
22843: PUSH
22844: LD_INT 109
22846: PUSH
22847: LD_INT 110
22849: PUSH
22850: LD_INT 111
22852: PUSH
22853: LD_INT 112
22855: PUSH
22856: LD_INT 113
22858: PUSH
22859: LD_INT 114
22861: PUSH
22862: LD_INT 116
22864: PUSH
22865: LD_INT 117
22867: PUSH
22868: LD_INT 118
22870: PUSH
22871: EMPTY
22872: LIST
22873: LIST
22874: LIST
22875: LIST
22876: LIST
22877: LIST
22878: LIST
22879: LIST
22880: LIST
22881: LIST
22882: LIST
22883: LIST
22884: LIST
22885: LIST
22886: LIST
22887: LIST
22888: LIST
22889: PUSH
22890: EMPTY
22891: LIST
22892: LIST
22893: ST_TO_ADDR
22894: GO 24133
22896: LD_INT 14
22898: DOUBLE
22899: EQUAL
22900: IFTRUE 22904
22902: GO 23128
22904: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
22905: LD_ADDR_VAR 0 2
22909: PUSH
22910: LD_INT 1
22912: PUSH
22913: LD_INT 2
22915: PUSH
22916: LD_INT 3
22918: PUSH
22919: LD_INT 4
22921: PUSH
22922: LD_INT 5
22924: PUSH
22925: LD_INT 6
22927: PUSH
22928: LD_INT 7
22930: PUSH
22931: LD_INT 8
22933: PUSH
22934: LD_INT 9
22936: PUSH
22937: LD_INT 10
22939: PUSH
22940: LD_INT 11
22942: PUSH
22943: LD_INT 12
22945: PUSH
22946: LD_INT 13
22948: PUSH
22949: LD_INT 14
22951: PUSH
22952: LD_INT 15
22954: PUSH
22955: LD_INT 16
22957: PUSH
22958: LD_INT 17
22960: PUSH
22961: LD_INT 18
22963: PUSH
22964: LD_INT 19
22966: PUSH
22967: LD_INT 20
22969: PUSH
22970: LD_INT 21
22972: PUSH
22973: LD_INT 22
22975: PUSH
22976: LD_INT 23
22978: PUSH
22979: LD_INT 24
22981: PUSH
22982: LD_INT 25
22984: PUSH
22985: LD_INT 26
22987: PUSH
22988: LD_INT 27
22990: PUSH
22991: LD_INT 28
22993: PUSH
22994: LD_INT 29
22996: PUSH
22997: LD_INT 30
22999: PUSH
23000: LD_INT 31
23002: PUSH
23003: LD_INT 32
23005: PUSH
23006: LD_INT 33
23008: PUSH
23009: LD_INT 34
23011: PUSH
23012: LD_INT 36
23014: PUSH
23015: EMPTY
23016: LIST
23017: LIST
23018: LIST
23019: LIST
23020: LIST
23021: LIST
23022: LIST
23023: LIST
23024: LIST
23025: LIST
23026: LIST
23027: LIST
23028: LIST
23029: LIST
23030: LIST
23031: LIST
23032: LIST
23033: LIST
23034: LIST
23035: LIST
23036: LIST
23037: LIST
23038: LIST
23039: LIST
23040: LIST
23041: LIST
23042: LIST
23043: LIST
23044: LIST
23045: LIST
23046: LIST
23047: LIST
23048: LIST
23049: LIST
23050: LIST
23051: PUSH
23052: LD_INT 101
23054: PUSH
23055: LD_INT 102
23057: PUSH
23058: LD_INT 103
23060: PUSH
23061: LD_INT 104
23063: PUSH
23064: LD_INT 105
23066: PUSH
23067: LD_INT 106
23069: PUSH
23070: LD_INT 107
23072: PUSH
23073: LD_INT 108
23075: PUSH
23076: LD_INT 109
23078: PUSH
23079: LD_INT 110
23081: PUSH
23082: LD_INT 111
23084: PUSH
23085: LD_INT 112
23087: PUSH
23088: LD_INT 113
23090: PUSH
23091: LD_INT 114
23093: PUSH
23094: LD_INT 116
23096: PUSH
23097: LD_INT 117
23099: PUSH
23100: LD_INT 118
23102: PUSH
23103: EMPTY
23104: LIST
23105: LIST
23106: LIST
23107: LIST
23108: LIST
23109: LIST
23110: LIST
23111: LIST
23112: LIST
23113: LIST
23114: LIST
23115: LIST
23116: LIST
23117: LIST
23118: LIST
23119: LIST
23120: LIST
23121: PUSH
23122: EMPTY
23123: LIST
23124: LIST
23125: ST_TO_ADDR
23126: GO 24133
23128: LD_INT 15
23130: DOUBLE
23131: EQUAL
23132: IFTRUE 23136
23134: GO 23360
23136: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
23137: LD_ADDR_VAR 0 2
23141: PUSH
23142: LD_INT 1
23144: PUSH
23145: LD_INT 2
23147: PUSH
23148: LD_INT 3
23150: PUSH
23151: LD_INT 4
23153: PUSH
23154: LD_INT 5
23156: PUSH
23157: LD_INT 6
23159: PUSH
23160: LD_INT 7
23162: PUSH
23163: LD_INT 8
23165: PUSH
23166: LD_INT 9
23168: PUSH
23169: LD_INT 10
23171: PUSH
23172: LD_INT 11
23174: PUSH
23175: LD_INT 12
23177: PUSH
23178: LD_INT 13
23180: PUSH
23181: LD_INT 14
23183: PUSH
23184: LD_INT 15
23186: PUSH
23187: LD_INT 16
23189: PUSH
23190: LD_INT 17
23192: PUSH
23193: LD_INT 18
23195: PUSH
23196: LD_INT 19
23198: PUSH
23199: LD_INT 20
23201: PUSH
23202: LD_INT 21
23204: PUSH
23205: LD_INT 22
23207: PUSH
23208: LD_INT 23
23210: PUSH
23211: LD_INT 24
23213: PUSH
23214: LD_INT 25
23216: PUSH
23217: LD_INT 26
23219: PUSH
23220: LD_INT 27
23222: PUSH
23223: LD_INT 28
23225: PUSH
23226: LD_INT 29
23228: PUSH
23229: LD_INT 30
23231: PUSH
23232: LD_INT 31
23234: PUSH
23235: LD_INT 32
23237: PUSH
23238: LD_INT 33
23240: PUSH
23241: LD_INT 34
23243: PUSH
23244: LD_INT 36
23246: PUSH
23247: EMPTY
23248: LIST
23249: LIST
23250: LIST
23251: LIST
23252: LIST
23253: LIST
23254: LIST
23255: LIST
23256: LIST
23257: LIST
23258: LIST
23259: LIST
23260: LIST
23261: LIST
23262: LIST
23263: LIST
23264: LIST
23265: LIST
23266: LIST
23267: LIST
23268: LIST
23269: LIST
23270: LIST
23271: LIST
23272: LIST
23273: LIST
23274: LIST
23275: LIST
23276: LIST
23277: LIST
23278: LIST
23279: LIST
23280: LIST
23281: LIST
23282: LIST
23283: PUSH
23284: LD_INT 101
23286: PUSH
23287: LD_INT 102
23289: PUSH
23290: LD_INT 103
23292: PUSH
23293: LD_INT 104
23295: PUSH
23296: LD_INT 105
23298: PUSH
23299: LD_INT 106
23301: PUSH
23302: LD_INT 107
23304: PUSH
23305: LD_INT 108
23307: PUSH
23308: LD_INT 109
23310: PUSH
23311: LD_INT 110
23313: PUSH
23314: LD_INT 111
23316: PUSH
23317: LD_INT 112
23319: PUSH
23320: LD_INT 113
23322: PUSH
23323: LD_INT 114
23325: PUSH
23326: LD_INT 116
23328: PUSH
23329: LD_INT 117
23331: PUSH
23332: LD_INT 118
23334: PUSH
23335: EMPTY
23336: LIST
23337: LIST
23338: LIST
23339: LIST
23340: LIST
23341: LIST
23342: LIST
23343: LIST
23344: LIST
23345: LIST
23346: LIST
23347: LIST
23348: LIST
23349: LIST
23350: LIST
23351: LIST
23352: LIST
23353: PUSH
23354: EMPTY
23355: LIST
23356: LIST
23357: ST_TO_ADDR
23358: GO 24133
23360: LD_INT 16
23362: DOUBLE
23363: EQUAL
23364: IFTRUE 23368
23366: GO 23504
23368: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
23369: LD_ADDR_VAR 0 2
23373: PUSH
23374: LD_INT 2
23376: PUSH
23377: LD_INT 4
23379: PUSH
23380: LD_INT 5
23382: PUSH
23383: LD_INT 7
23385: PUSH
23386: LD_INT 11
23388: PUSH
23389: LD_INT 12
23391: PUSH
23392: LD_INT 15
23394: PUSH
23395: LD_INT 16
23397: PUSH
23398: LD_INT 20
23400: PUSH
23401: LD_INT 21
23403: PUSH
23404: LD_INT 22
23406: PUSH
23407: LD_INT 23
23409: PUSH
23410: LD_INT 25
23412: PUSH
23413: LD_INT 26
23415: PUSH
23416: LD_INT 30
23418: PUSH
23419: LD_INT 31
23421: PUSH
23422: LD_INT 32
23424: PUSH
23425: LD_INT 33
23427: PUSH
23428: LD_INT 34
23430: PUSH
23431: EMPTY
23432: LIST
23433: LIST
23434: LIST
23435: LIST
23436: LIST
23437: LIST
23438: LIST
23439: LIST
23440: LIST
23441: LIST
23442: LIST
23443: LIST
23444: LIST
23445: LIST
23446: LIST
23447: LIST
23448: LIST
23449: LIST
23450: LIST
23451: PUSH
23452: LD_INT 101
23454: PUSH
23455: LD_INT 102
23457: PUSH
23458: LD_INT 103
23460: PUSH
23461: LD_INT 106
23463: PUSH
23464: LD_INT 108
23466: PUSH
23467: LD_INT 112
23469: PUSH
23470: LD_INT 113
23472: PUSH
23473: LD_INT 114
23475: PUSH
23476: LD_INT 116
23478: PUSH
23479: LD_INT 117
23481: PUSH
23482: LD_INT 118
23484: PUSH
23485: EMPTY
23486: LIST
23487: LIST
23488: LIST
23489: LIST
23490: LIST
23491: LIST
23492: LIST
23493: LIST
23494: LIST
23495: LIST
23496: LIST
23497: PUSH
23498: EMPTY
23499: LIST
23500: LIST
23501: ST_TO_ADDR
23502: GO 24133
23504: LD_INT 17
23506: DOUBLE
23507: EQUAL
23508: IFTRUE 23512
23510: GO 23736
23512: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
23513: LD_ADDR_VAR 0 2
23517: PUSH
23518: LD_INT 1
23520: PUSH
23521: LD_INT 2
23523: PUSH
23524: LD_INT 3
23526: PUSH
23527: LD_INT 4
23529: PUSH
23530: LD_INT 5
23532: PUSH
23533: LD_INT 6
23535: PUSH
23536: LD_INT 7
23538: PUSH
23539: LD_INT 8
23541: PUSH
23542: LD_INT 9
23544: PUSH
23545: LD_INT 10
23547: PUSH
23548: LD_INT 11
23550: PUSH
23551: LD_INT 12
23553: PUSH
23554: LD_INT 13
23556: PUSH
23557: LD_INT 14
23559: PUSH
23560: LD_INT 15
23562: PUSH
23563: LD_INT 16
23565: PUSH
23566: LD_INT 17
23568: PUSH
23569: LD_INT 18
23571: PUSH
23572: LD_INT 19
23574: PUSH
23575: LD_INT 20
23577: PUSH
23578: LD_INT 21
23580: PUSH
23581: LD_INT 22
23583: PUSH
23584: LD_INT 23
23586: PUSH
23587: LD_INT 24
23589: PUSH
23590: LD_INT 25
23592: PUSH
23593: LD_INT 26
23595: PUSH
23596: LD_INT 27
23598: PUSH
23599: LD_INT 28
23601: PUSH
23602: LD_INT 29
23604: PUSH
23605: LD_INT 30
23607: PUSH
23608: LD_INT 31
23610: PUSH
23611: LD_INT 32
23613: PUSH
23614: LD_INT 33
23616: PUSH
23617: LD_INT 34
23619: PUSH
23620: LD_INT 36
23622: PUSH
23623: EMPTY
23624: LIST
23625: LIST
23626: LIST
23627: LIST
23628: LIST
23629: LIST
23630: LIST
23631: LIST
23632: LIST
23633: LIST
23634: LIST
23635: LIST
23636: LIST
23637: LIST
23638: LIST
23639: LIST
23640: LIST
23641: LIST
23642: LIST
23643: LIST
23644: LIST
23645: LIST
23646: LIST
23647: LIST
23648: LIST
23649: LIST
23650: LIST
23651: LIST
23652: LIST
23653: LIST
23654: LIST
23655: LIST
23656: LIST
23657: LIST
23658: LIST
23659: PUSH
23660: LD_INT 101
23662: PUSH
23663: LD_INT 102
23665: PUSH
23666: LD_INT 103
23668: PUSH
23669: LD_INT 104
23671: PUSH
23672: LD_INT 105
23674: PUSH
23675: LD_INT 106
23677: PUSH
23678: LD_INT 107
23680: PUSH
23681: LD_INT 108
23683: PUSH
23684: LD_INT 109
23686: PUSH
23687: LD_INT 110
23689: PUSH
23690: LD_INT 111
23692: PUSH
23693: LD_INT 112
23695: PUSH
23696: LD_INT 113
23698: PUSH
23699: LD_INT 114
23701: PUSH
23702: LD_INT 116
23704: PUSH
23705: LD_INT 117
23707: PUSH
23708: LD_INT 118
23710: PUSH
23711: EMPTY
23712: LIST
23713: LIST
23714: LIST
23715: LIST
23716: LIST
23717: LIST
23718: LIST
23719: LIST
23720: LIST
23721: LIST
23722: LIST
23723: LIST
23724: LIST
23725: LIST
23726: LIST
23727: LIST
23728: LIST
23729: PUSH
23730: EMPTY
23731: LIST
23732: LIST
23733: ST_TO_ADDR
23734: GO 24133
23736: LD_INT 18
23738: DOUBLE
23739: EQUAL
23740: IFTRUE 23744
23742: GO 23892
23744: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
23745: LD_ADDR_VAR 0 2
23749: PUSH
23750: LD_INT 2
23752: PUSH
23753: LD_INT 4
23755: PUSH
23756: LD_INT 5
23758: PUSH
23759: LD_INT 7
23761: PUSH
23762: LD_INT 11
23764: PUSH
23765: LD_INT 12
23767: PUSH
23768: LD_INT 15
23770: PUSH
23771: LD_INT 16
23773: PUSH
23774: LD_INT 20
23776: PUSH
23777: LD_INT 21
23779: PUSH
23780: LD_INT 22
23782: PUSH
23783: LD_INT 23
23785: PUSH
23786: LD_INT 25
23788: PUSH
23789: LD_INT 26
23791: PUSH
23792: LD_INT 30
23794: PUSH
23795: LD_INT 31
23797: PUSH
23798: LD_INT 32
23800: PUSH
23801: LD_INT 33
23803: PUSH
23804: LD_INT 34
23806: PUSH
23807: LD_INT 35
23809: PUSH
23810: LD_INT 36
23812: PUSH
23813: EMPTY
23814: LIST
23815: LIST
23816: LIST
23817: LIST
23818: LIST
23819: LIST
23820: LIST
23821: LIST
23822: LIST
23823: LIST
23824: LIST
23825: LIST
23826: LIST
23827: LIST
23828: LIST
23829: LIST
23830: LIST
23831: LIST
23832: LIST
23833: LIST
23834: LIST
23835: PUSH
23836: LD_INT 101
23838: PUSH
23839: LD_INT 102
23841: PUSH
23842: LD_INT 103
23844: PUSH
23845: LD_INT 106
23847: PUSH
23848: LD_INT 108
23850: PUSH
23851: LD_INT 112
23853: PUSH
23854: LD_INT 113
23856: PUSH
23857: LD_INT 114
23859: PUSH
23860: LD_INT 115
23862: PUSH
23863: LD_INT 116
23865: PUSH
23866: LD_INT 117
23868: PUSH
23869: LD_INT 118
23871: PUSH
23872: EMPTY
23873: LIST
23874: LIST
23875: LIST
23876: LIST
23877: LIST
23878: LIST
23879: LIST
23880: LIST
23881: LIST
23882: LIST
23883: LIST
23884: LIST
23885: PUSH
23886: EMPTY
23887: LIST
23888: LIST
23889: ST_TO_ADDR
23890: GO 24133
23892: LD_INT 19
23894: DOUBLE
23895: EQUAL
23896: IFTRUE 23900
23898: GO 24132
23900: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
23901: LD_ADDR_VAR 0 2
23905: PUSH
23906: LD_INT 1
23908: PUSH
23909: LD_INT 2
23911: PUSH
23912: LD_INT 3
23914: PUSH
23915: LD_INT 4
23917: PUSH
23918: LD_INT 5
23920: PUSH
23921: LD_INT 6
23923: PUSH
23924: LD_INT 7
23926: PUSH
23927: LD_INT 8
23929: PUSH
23930: LD_INT 9
23932: PUSH
23933: LD_INT 10
23935: PUSH
23936: LD_INT 11
23938: PUSH
23939: LD_INT 12
23941: PUSH
23942: LD_INT 13
23944: PUSH
23945: LD_INT 14
23947: PUSH
23948: LD_INT 15
23950: PUSH
23951: LD_INT 16
23953: PUSH
23954: LD_INT 17
23956: PUSH
23957: LD_INT 18
23959: PUSH
23960: LD_INT 19
23962: PUSH
23963: LD_INT 20
23965: PUSH
23966: LD_INT 21
23968: PUSH
23969: LD_INT 22
23971: PUSH
23972: LD_INT 23
23974: PUSH
23975: LD_INT 24
23977: PUSH
23978: LD_INT 25
23980: PUSH
23981: LD_INT 26
23983: PUSH
23984: LD_INT 27
23986: PUSH
23987: LD_INT 28
23989: PUSH
23990: LD_INT 29
23992: PUSH
23993: LD_INT 30
23995: PUSH
23996: LD_INT 31
23998: PUSH
23999: LD_INT 32
24001: PUSH
24002: LD_INT 33
24004: PUSH
24005: LD_INT 34
24007: PUSH
24008: LD_INT 35
24010: PUSH
24011: LD_INT 36
24013: PUSH
24014: EMPTY
24015: LIST
24016: LIST
24017: LIST
24018: LIST
24019: LIST
24020: LIST
24021: LIST
24022: LIST
24023: LIST
24024: LIST
24025: LIST
24026: LIST
24027: LIST
24028: LIST
24029: LIST
24030: LIST
24031: LIST
24032: LIST
24033: LIST
24034: LIST
24035: LIST
24036: LIST
24037: LIST
24038: LIST
24039: LIST
24040: LIST
24041: LIST
24042: LIST
24043: LIST
24044: LIST
24045: LIST
24046: LIST
24047: LIST
24048: LIST
24049: LIST
24050: LIST
24051: PUSH
24052: LD_INT 101
24054: PUSH
24055: LD_INT 102
24057: PUSH
24058: LD_INT 103
24060: PUSH
24061: LD_INT 104
24063: PUSH
24064: LD_INT 105
24066: PUSH
24067: LD_INT 106
24069: PUSH
24070: LD_INT 107
24072: PUSH
24073: LD_INT 108
24075: PUSH
24076: LD_INT 109
24078: PUSH
24079: LD_INT 110
24081: PUSH
24082: LD_INT 111
24084: PUSH
24085: LD_INT 112
24087: PUSH
24088: LD_INT 113
24090: PUSH
24091: LD_INT 114
24093: PUSH
24094: LD_INT 115
24096: PUSH
24097: LD_INT 116
24099: PUSH
24100: LD_INT 117
24102: PUSH
24103: LD_INT 118
24105: PUSH
24106: EMPTY
24107: LIST
24108: LIST
24109: LIST
24110: LIST
24111: LIST
24112: LIST
24113: LIST
24114: LIST
24115: LIST
24116: LIST
24117: LIST
24118: LIST
24119: LIST
24120: LIST
24121: LIST
24122: LIST
24123: LIST
24124: LIST
24125: PUSH
24126: EMPTY
24127: LIST
24128: LIST
24129: ST_TO_ADDR
24130: GO 24133
24132: POP
// end else
24133: GO 24364
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
24135: LD_ADDR_VAR 0 2
24139: PUSH
24140: LD_INT 1
24142: PUSH
24143: LD_INT 2
24145: PUSH
24146: LD_INT 3
24148: PUSH
24149: LD_INT 4
24151: PUSH
24152: LD_INT 5
24154: PUSH
24155: LD_INT 6
24157: PUSH
24158: LD_INT 7
24160: PUSH
24161: LD_INT 8
24163: PUSH
24164: LD_INT 9
24166: PUSH
24167: LD_INT 10
24169: PUSH
24170: LD_INT 11
24172: PUSH
24173: LD_INT 12
24175: PUSH
24176: LD_INT 13
24178: PUSH
24179: LD_INT 14
24181: PUSH
24182: LD_INT 15
24184: PUSH
24185: LD_INT 16
24187: PUSH
24188: LD_INT 17
24190: PUSH
24191: LD_INT 18
24193: PUSH
24194: LD_INT 19
24196: PUSH
24197: LD_INT 20
24199: PUSH
24200: LD_INT 21
24202: PUSH
24203: LD_INT 22
24205: PUSH
24206: LD_INT 23
24208: PUSH
24209: LD_INT 24
24211: PUSH
24212: LD_INT 25
24214: PUSH
24215: LD_INT 26
24217: PUSH
24218: LD_INT 27
24220: PUSH
24221: LD_INT 28
24223: PUSH
24224: LD_INT 29
24226: PUSH
24227: LD_INT 30
24229: PUSH
24230: LD_INT 31
24232: PUSH
24233: LD_INT 32
24235: PUSH
24236: LD_INT 33
24238: PUSH
24239: LD_INT 34
24241: PUSH
24242: LD_INT 35
24244: PUSH
24245: LD_INT 36
24247: PUSH
24248: EMPTY
24249: LIST
24250: LIST
24251: LIST
24252: LIST
24253: LIST
24254: LIST
24255: LIST
24256: LIST
24257: LIST
24258: LIST
24259: LIST
24260: LIST
24261: LIST
24262: LIST
24263: LIST
24264: LIST
24265: LIST
24266: LIST
24267: LIST
24268: LIST
24269: LIST
24270: LIST
24271: LIST
24272: LIST
24273: LIST
24274: LIST
24275: LIST
24276: LIST
24277: LIST
24278: LIST
24279: LIST
24280: LIST
24281: LIST
24282: LIST
24283: LIST
24284: LIST
24285: PUSH
24286: LD_INT 101
24288: PUSH
24289: LD_INT 102
24291: PUSH
24292: LD_INT 103
24294: PUSH
24295: LD_INT 104
24297: PUSH
24298: LD_INT 105
24300: PUSH
24301: LD_INT 106
24303: PUSH
24304: LD_INT 107
24306: PUSH
24307: LD_INT 108
24309: PUSH
24310: LD_INT 109
24312: PUSH
24313: LD_INT 110
24315: PUSH
24316: LD_INT 111
24318: PUSH
24319: LD_INT 112
24321: PUSH
24322: LD_INT 113
24324: PUSH
24325: LD_INT 114
24327: PUSH
24328: LD_INT 115
24330: PUSH
24331: LD_INT 116
24333: PUSH
24334: LD_INT 117
24336: PUSH
24337: LD_INT 118
24339: PUSH
24340: EMPTY
24341: LIST
24342: LIST
24343: LIST
24344: LIST
24345: LIST
24346: LIST
24347: LIST
24348: LIST
24349: LIST
24350: LIST
24351: LIST
24352: LIST
24353: LIST
24354: LIST
24355: LIST
24356: LIST
24357: LIST
24358: LIST
24359: PUSH
24360: EMPTY
24361: LIST
24362: LIST
24363: ST_TO_ADDR
// if result then
24364: LD_VAR 0 2
24368: IFFALSE 25154
// begin normal :=  ;
24370: LD_ADDR_VAR 0 5
24374: PUSH
24375: LD_STRING 
24377: ST_TO_ADDR
// hardcore :=  ;
24378: LD_ADDR_VAR 0 6
24382: PUSH
24383: LD_STRING 
24385: ST_TO_ADDR
// active :=  ;
24386: LD_ADDR_VAR 0 7
24390: PUSH
24391: LD_STRING 
24393: ST_TO_ADDR
// for i = 1 to normalCounter do
24394: LD_ADDR_VAR 0 8
24398: PUSH
24399: DOUBLE
24400: LD_INT 1
24402: DEC
24403: ST_TO_ADDR
24404: LD_EXP 66
24408: PUSH
24409: FOR_TO
24410: IFFALSE 24511
// begin tmp := 0 ;
24412: LD_ADDR_VAR 0 3
24416: PUSH
24417: LD_STRING 0
24419: ST_TO_ADDR
// if result [ 1 ] then
24420: LD_VAR 0 2
24424: PUSH
24425: LD_INT 1
24427: ARRAY
24428: IFFALSE 24493
// if result [ 1 ] [ 1 ] = i then
24430: LD_VAR 0 2
24434: PUSH
24435: LD_INT 1
24437: ARRAY
24438: PUSH
24439: LD_INT 1
24441: ARRAY
24442: PUSH
24443: LD_VAR 0 8
24447: EQUAL
24448: IFFALSE 24493
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
24450: LD_ADDR_VAR 0 2
24454: PUSH
24455: LD_VAR 0 2
24459: PPUSH
24460: LD_INT 1
24462: PPUSH
24463: LD_VAR 0 2
24467: PUSH
24468: LD_INT 1
24470: ARRAY
24471: PPUSH
24472: LD_INT 1
24474: PPUSH
24475: CALL_OW 3
24479: PPUSH
24480: CALL_OW 1
24484: ST_TO_ADDR
// tmp := 1 ;
24485: LD_ADDR_VAR 0 3
24489: PUSH
24490: LD_STRING 1
24492: ST_TO_ADDR
// end ; normal := normal & tmp ;
24493: LD_ADDR_VAR 0 5
24497: PUSH
24498: LD_VAR 0 5
24502: PUSH
24503: LD_VAR 0 3
24507: STR
24508: ST_TO_ADDR
// end ;
24509: GO 24409
24511: POP
24512: POP
// for i = 1 to hardcoreCounter do
24513: LD_ADDR_VAR 0 8
24517: PUSH
24518: DOUBLE
24519: LD_INT 1
24521: DEC
24522: ST_TO_ADDR
24523: LD_EXP 67
24527: PUSH
24528: FOR_TO
24529: IFFALSE 24634
// begin tmp := 0 ;
24531: LD_ADDR_VAR 0 3
24535: PUSH
24536: LD_STRING 0
24538: ST_TO_ADDR
// if result [ 2 ] then
24539: LD_VAR 0 2
24543: PUSH
24544: LD_INT 2
24546: ARRAY
24547: IFFALSE 24616
// if result [ 2 ] [ 1 ] = 100 + i then
24549: LD_VAR 0 2
24553: PUSH
24554: LD_INT 2
24556: ARRAY
24557: PUSH
24558: LD_INT 1
24560: ARRAY
24561: PUSH
24562: LD_INT 100
24564: PUSH
24565: LD_VAR 0 8
24569: PLUS
24570: EQUAL
24571: IFFALSE 24616
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
24573: LD_ADDR_VAR 0 2
24577: PUSH
24578: LD_VAR 0 2
24582: PPUSH
24583: LD_INT 2
24585: PPUSH
24586: LD_VAR 0 2
24590: PUSH
24591: LD_INT 2
24593: ARRAY
24594: PPUSH
24595: LD_INT 1
24597: PPUSH
24598: CALL_OW 3
24602: PPUSH
24603: CALL_OW 1
24607: ST_TO_ADDR
// tmp := 1 ;
24608: LD_ADDR_VAR 0 3
24612: PUSH
24613: LD_STRING 1
24615: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
24616: LD_ADDR_VAR 0 6
24620: PUSH
24621: LD_VAR 0 6
24625: PUSH
24626: LD_VAR 0 3
24630: STR
24631: ST_TO_ADDR
// end ;
24632: GO 24528
24634: POP
24635: POP
// if isGameLoad then
24636: LD_VAR 0 1
24640: IFFALSE 25115
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
24642: LD_ADDR_VAR 0 4
24646: PUSH
24647: LD_EXP 70
24651: PUSH
24652: LD_EXP 69
24656: PUSH
24657: LD_EXP 71
24661: PUSH
24662: LD_EXP 68
24666: PUSH
24667: LD_EXP 72
24671: PUSH
24672: LD_EXP 73
24676: PUSH
24677: LD_EXP 74
24681: PUSH
24682: LD_EXP 75
24686: PUSH
24687: LD_EXP 76
24691: PUSH
24692: LD_EXP 77
24696: PUSH
24697: LD_EXP 78
24701: PUSH
24702: LD_EXP 79
24706: PUSH
24707: LD_EXP 80
24711: PUSH
24712: LD_EXP 81
24716: PUSH
24717: LD_EXP 89
24721: PUSH
24722: LD_EXP 90
24726: PUSH
24727: LD_EXP 91
24731: PUSH
24732: LD_EXP 92
24736: PUSH
24737: LD_EXP 94
24741: PUSH
24742: LD_EXP 95
24746: PUSH
24747: LD_EXP 96
24751: PUSH
24752: LD_EXP 99
24756: PUSH
24757: LD_EXP 101
24761: PUSH
24762: LD_EXP 102
24766: PUSH
24767: LD_EXP 103
24771: PUSH
24772: LD_EXP 105
24776: PUSH
24777: LD_EXP 106
24781: PUSH
24782: LD_EXP 109
24786: PUSH
24787: LD_EXP 110
24791: PUSH
24792: LD_EXP 111
24796: PUSH
24797: LD_EXP 112
24801: PUSH
24802: LD_EXP 113
24806: PUSH
24807: LD_EXP 114
24811: PUSH
24812: LD_EXP 115
24816: PUSH
24817: LD_EXP 116
24821: PUSH
24822: LD_EXP 117
24826: PUSH
24827: LD_EXP 82
24831: PUSH
24832: LD_EXP 83
24836: PUSH
24837: LD_EXP 86
24841: PUSH
24842: LD_EXP 87
24846: PUSH
24847: LD_EXP 88
24851: PUSH
24852: LD_EXP 84
24856: PUSH
24857: LD_EXP 85
24861: PUSH
24862: LD_EXP 93
24866: PUSH
24867: LD_EXP 97
24871: PUSH
24872: LD_EXP 98
24876: PUSH
24877: LD_EXP 100
24881: PUSH
24882: LD_EXP 104
24886: PUSH
24887: LD_EXP 107
24891: PUSH
24892: LD_EXP 108
24896: PUSH
24897: LD_EXP 118
24901: PUSH
24902: LD_EXP 119
24906: PUSH
24907: LD_EXP 120
24911: PUSH
24912: LD_EXP 121
24916: PUSH
24917: EMPTY
24918: LIST
24919: LIST
24920: LIST
24921: LIST
24922: LIST
24923: LIST
24924: LIST
24925: LIST
24926: LIST
24927: LIST
24928: LIST
24929: LIST
24930: LIST
24931: LIST
24932: LIST
24933: LIST
24934: LIST
24935: LIST
24936: LIST
24937: LIST
24938: LIST
24939: LIST
24940: LIST
24941: LIST
24942: LIST
24943: LIST
24944: LIST
24945: LIST
24946: LIST
24947: LIST
24948: LIST
24949: LIST
24950: LIST
24951: LIST
24952: LIST
24953: LIST
24954: LIST
24955: LIST
24956: LIST
24957: LIST
24958: LIST
24959: LIST
24960: LIST
24961: LIST
24962: LIST
24963: LIST
24964: LIST
24965: LIST
24966: LIST
24967: LIST
24968: LIST
24969: LIST
24970: LIST
24971: LIST
24972: ST_TO_ADDR
// tmp :=  ;
24973: LD_ADDR_VAR 0 3
24977: PUSH
24978: LD_STRING 
24980: ST_TO_ADDR
// for i = 1 to normalCounter do
24981: LD_ADDR_VAR 0 8
24985: PUSH
24986: DOUBLE
24987: LD_INT 1
24989: DEC
24990: ST_TO_ADDR
24991: LD_EXP 66
24995: PUSH
24996: FOR_TO
24997: IFFALSE 25033
// begin if flags [ i ] then
24999: LD_VAR 0 4
25003: PUSH
25004: LD_VAR 0 8
25008: ARRAY
25009: IFFALSE 25031
// tmp := tmp & i & ; ;
25011: LD_ADDR_VAR 0 3
25015: PUSH
25016: LD_VAR 0 3
25020: PUSH
25021: LD_VAR 0 8
25025: STR
25026: PUSH
25027: LD_STRING ;
25029: STR
25030: ST_TO_ADDR
// end ;
25031: GO 24996
25033: POP
25034: POP
// for i = 1 to hardcoreCounter do
25035: LD_ADDR_VAR 0 8
25039: PUSH
25040: DOUBLE
25041: LD_INT 1
25043: DEC
25044: ST_TO_ADDR
25045: LD_EXP 67
25049: PUSH
25050: FOR_TO
25051: IFFALSE 25097
// begin if flags [ normalCounter + i ] then
25053: LD_VAR 0 4
25057: PUSH
25058: LD_EXP 66
25062: PUSH
25063: LD_VAR 0 8
25067: PLUS
25068: ARRAY
25069: IFFALSE 25095
// tmp := tmp & ( 100 + i ) & ; ;
25071: LD_ADDR_VAR 0 3
25075: PUSH
25076: LD_VAR 0 3
25080: PUSH
25081: LD_INT 100
25083: PUSH
25084: LD_VAR 0 8
25088: PLUS
25089: STR
25090: PUSH
25091: LD_STRING ;
25093: STR
25094: ST_TO_ADDR
// end ;
25095: GO 25050
25097: POP
25098: POP
// if tmp then
25099: LD_VAR 0 3
25103: IFFALSE 25115
// active := tmp ;
25105: LD_ADDR_VAR 0 7
25109: PUSH
25110: LD_VAR 0 3
25114: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
25115: LD_STRING getStreamItemsFromMission("
25117: PUSH
25118: LD_VAR 0 5
25122: STR
25123: PUSH
25124: LD_STRING ","
25126: STR
25127: PUSH
25128: LD_VAR 0 6
25132: STR
25133: PUSH
25134: LD_STRING ","
25136: STR
25137: PUSH
25138: LD_VAR 0 7
25142: STR
25143: PUSH
25144: LD_STRING ")
25146: STR
25147: PPUSH
25148: CALL_OW 559
// end else
25152: GO 25161
// ToLua ( getStreamItemsFromMission("","","") ) ;
25154: LD_STRING getStreamItemsFromMission("","","")
25156: PPUSH
25157: CALL_OW 559
// end ;
25161: LD_VAR 0 2
25165: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
25166: LD_EXP 65
25170: PUSH
25171: LD_EXP 70
25175: AND
25176: IFFALSE 25300
25178: GO 25180
25180: DISABLE
25181: LD_INT 0
25183: PPUSH
25184: PPUSH
// begin enable ;
25185: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
25186: LD_ADDR_VAR 0 2
25190: PUSH
25191: LD_INT 22
25193: PUSH
25194: LD_OWVAR 2
25198: PUSH
25199: EMPTY
25200: LIST
25201: LIST
25202: PUSH
25203: LD_INT 2
25205: PUSH
25206: LD_INT 34
25208: PUSH
25209: LD_INT 7
25211: PUSH
25212: EMPTY
25213: LIST
25214: LIST
25215: PUSH
25216: LD_INT 34
25218: PUSH
25219: LD_INT 45
25221: PUSH
25222: EMPTY
25223: LIST
25224: LIST
25225: PUSH
25226: LD_INT 34
25228: PUSH
25229: LD_INT 28
25231: PUSH
25232: EMPTY
25233: LIST
25234: LIST
25235: PUSH
25236: LD_INT 34
25238: PUSH
25239: LD_INT 47
25241: PUSH
25242: EMPTY
25243: LIST
25244: LIST
25245: PUSH
25246: EMPTY
25247: LIST
25248: LIST
25249: LIST
25250: LIST
25251: LIST
25252: PUSH
25253: EMPTY
25254: LIST
25255: LIST
25256: PPUSH
25257: CALL_OW 69
25261: ST_TO_ADDR
// if not tmp then
25262: LD_VAR 0 2
25266: NOT
25267: IFFALSE 25271
// exit ;
25269: GO 25300
// for i in tmp do
25271: LD_ADDR_VAR 0 1
25275: PUSH
25276: LD_VAR 0 2
25280: PUSH
25281: FOR_IN
25282: IFFALSE 25298
// begin SetLives ( i , 0 ) ;
25284: LD_VAR 0 1
25288: PPUSH
25289: LD_INT 0
25291: PPUSH
25292: CALL_OW 234
// end ;
25296: GO 25281
25298: POP
25299: POP
// end ;
25300: PPOPN 2
25302: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
25303: LD_EXP 65
25307: PUSH
25308: LD_EXP 71
25312: AND
25313: IFFALSE 25397
25315: GO 25317
25317: DISABLE
25318: LD_INT 0
25320: PPUSH
25321: PPUSH
// begin enable ;
25322: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
25323: LD_ADDR_VAR 0 2
25327: PUSH
25328: LD_INT 22
25330: PUSH
25331: LD_OWVAR 2
25335: PUSH
25336: EMPTY
25337: LIST
25338: LIST
25339: PUSH
25340: LD_INT 32
25342: PUSH
25343: LD_INT 3
25345: PUSH
25346: EMPTY
25347: LIST
25348: LIST
25349: PUSH
25350: EMPTY
25351: LIST
25352: LIST
25353: PPUSH
25354: CALL_OW 69
25358: ST_TO_ADDR
// if not tmp then
25359: LD_VAR 0 2
25363: NOT
25364: IFFALSE 25368
// exit ;
25366: GO 25397
// for i in tmp do
25368: LD_ADDR_VAR 0 1
25372: PUSH
25373: LD_VAR 0 2
25377: PUSH
25378: FOR_IN
25379: IFFALSE 25395
// begin SetLives ( i , 0 ) ;
25381: LD_VAR 0 1
25385: PPUSH
25386: LD_INT 0
25388: PPUSH
25389: CALL_OW 234
// end ;
25393: GO 25378
25395: POP
25396: POP
// end ;
25397: PPOPN 2
25399: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
25400: LD_EXP 65
25404: PUSH
25405: LD_EXP 68
25409: AND
25410: IFFALSE 25503
25412: GO 25414
25414: DISABLE
25415: LD_INT 0
25417: PPUSH
// begin enable ;
25418: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
25419: LD_ADDR_VAR 0 1
25423: PUSH
25424: LD_INT 22
25426: PUSH
25427: LD_OWVAR 2
25431: PUSH
25432: EMPTY
25433: LIST
25434: LIST
25435: PUSH
25436: LD_INT 2
25438: PUSH
25439: LD_INT 25
25441: PUSH
25442: LD_INT 5
25444: PUSH
25445: EMPTY
25446: LIST
25447: LIST
25448: PUSH
25449: LD_INT 25
25451: PUSH
25452: LD_INT 9
25454: PUSH
25455: EMPTY
25456: LIST
25457: LIST
25458: PUSH
25459: LD_INT 25
25461: PUSH
25462: LD_INT 8
25464: PUSH
25465: EMPTY
25466: LIST
25467: LIST
25468: PUSH
25469: EMPTY
25470: LIST
25471: LIST
25472: LIST
25473: LIST
25474: PUSH
25475: EMPTY
25476: LIST
25477: LIST
25478: PPUSH
25479: CALL_OW 69
25483: PUSH
25484: FOR_IN
25485: IFFALSE 25501
// begin SetClass ( i , 1 ) ;
25487: LD_VAR 0 1
25491: PPUSH
25492: LD_INT 1
25494: PPUSH
25495: CALL_OW 336
// end ;
25499: GO 25484
25501: POP
25502: POP
// end ;
25503: PPOPN 1
25505: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
25506: LD_EXP 65
25510: PUSH
25511: LD_EXP 69
25515: AND
25516: PUSH
25517: LD_OWVAR 65
25521: PUSH
25522: LD_INT 7
25524: LESS
25525: AND
25526: IFFALSE 25540
25528: GO 25530
25530: DISABLE
// begin enable ;
25531: ENABLE
// game_speed := 7 ;
25532: LD_ADDR_OWVAR 65
25536: PUSH
25537: LD_INT 7
25539: ST_TO_ADDR
// end ;
25540: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
25541: LD_EXP 65
25545: PUSH
25546: LD_EXP 72
25550: AND
25551: IFFALSE 25753
25553: GO 25555
25555: DISABLE
25556: LD_INT 0
25558: PPUSH
25559: PPUSH
25560: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
25561: LD_ADDR_VAR 0 3
25565: PUSH
25566: LD_INT 81
25568: PUSH
25569: LD_OWVAR 2
25573: PUSH
25574: EMPTY
25575: LIST
25576: LIST
25577: PUSH
25578: LD_INT 21
25580: PUSH
25581: LD_INT 1
25583: PUSH
25584: EMPTY
25585: LIST
25586: LIST
25587: PUSH
25588: EMPTY
25589: LIST
25590: LIST
25591: PPUSH
25592: CALL_OW 69
25596: ST_TO_ADDR
// if not tmp then
25597: LD_VAR 0 3
25601: NOT
25602: IFFALSE 25606
// exit ;
25604: GO 25753
// if tmp > 5 then
25606: LD_VAR 0 3
25610: PUSH
25611: LD_INT 5
25613: GREATER
25614: IFFALSE 25626
// k := 5 else
25616: LD_ADDR_VAR 0 2
25620: PUSH
25621: LD_INT 5
25623: ST_TO_ADDR
25624: GO 25636
// k := tmp ;
25626: LD_ADDR_VAR 0 2
25630: PUSH
25631: LD_VAR 0 3
25635: ST_TO_ADDR
// for i := 1 to k do
25636: LD_ADDR_VAR 0 1
25640: PUSH
25641: DOUBLE
25642: LD_INT 1
25644: DEC
25645: ST_TO_ADDR
25646: LD_VAR 0 2
25650: PUSH
25651: FOR_TO
25652: IFFALSE 25751
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
25654: LD_VAR 0 3
25658: PUSH
25659: LD_VAR 0 1
25663: ARRAY
25664: PPUSH
25665: LD_VAR 0 1
25669: PUSH
25670: LD_INT 4
25672: MOD
25673: PUSH
25674: LD_INT 1
25676: PLUS
25677: PPUSH
25678: CALL_OW 259
25682: PUSH
25683: LD_INT 10
25685: LESS
25686: IFFALSE 25749
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
25688: LD_VAR 0 3
25692: PUSH
25693: LD_VAR 0 1
25697: ARRAY
25698: PPUSH
25699: LD_VAR 0 1
25703: PUSH
25704: LD_INT 4
25706: MOD
25707: PUSH
25708: LD_INT 1
25710: PLUS
25711: PPUSH
25712: LD_VAR 0 3
25716: PUSH
25717: LD_VAR 0 1
25721: ARRAY
25722: PPUSH
25723: LD_VAR 0 1
25727: PUSH
25728: LD_INT 4
25730: MOD
25731: PUSH
25732: LD_INT 1
25734: PLUS
25735: PPUSH
25736: CALL_OW 259
25740: PUSH
25741: LD_INT 1
25743: PLUS
25744: PPUSH
25745: CALL_OW 237
25749: GO 25651
25751: POP
25752: POP
// end ;
25753: PPOPN 3
25755: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
25756: LD_EXP 65
25760: PUSH
25761: LD_EXP 73
25765: AND
25766: IFFALSE 25786
25768: GO 25770
25770: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
25771: LD_INT 4
25773: PPUSH
25774: LD_OWVAR 2
25778: PPUSH
25779: LD_INT 0
25781: PPUSH
25782: CALL_OW 324
25786: END
// every 0 0$1 trigger StreamModeActive and sShovel do
25787: LD_EXP 65
25791: PUSH
25792: LD_EXP 102
25796: AND
25797: IFFALSE 25817
25799: GO 25801
25801: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
25802: LD_INT 19
25804: PPUSH
25805: LD_OWVAR 2
25809: PPUSH
25810: LD_INT 0
25812: PPUSH
25813: CALL_OW 324
25817: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
25818: LD_EXP 65
25822: PUSH
25823: LD_EXP 74
25827: AND
25828: IFFALSE 25930
25830: GO 25832
25832: DISABLE
25833: LD_INT 0
25835: PPUSH
25836: PPUSH
// begin enable ;
25837: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
25838: LD_ADDR_VAR 0 2
25842: PUSH
25843: LD_INT 22
25845: PUSH
25846: LD_OWVAR 2
25850: PUSH
25851: EMPTY
25852: LIST
25853: LIST
25854: PUSH
25855: LD_INT 2
25857: PUSH
25858: LD_INT 34
25860: PUSH
25861: LD_INT 11
25863: PUSH
25864: EMPTY
25865: LIST
25866: LIST
25867: PUSH
25868: LD_INT 34
25870: PUSH
25871: LD_INT 30
25873: PUSH
25874: EMPTY
25875: LIST
25876: LIST
25877: PUSH
25878: EMPTY
25879: LIST
25880: LIST
25881: LIST
25882: PUSH
25883: EMPTY
25884: LIST
25885: LIST
25886: PPUSH
25887: CALL_OW 69
25891: ST_TO_ADDR
// if not tmp then
25892: LD_VAR 0 2
25896: NOT
25897: IFFALSE 25901
// exit ;
25899: GO 25930
// for i in tmp do
25901: LD_ADDR_VAR 0 1
25905: PUSH
25906: LD_VAR 0 2
25910: PUSH
25911: FOR_IN
25912: IFFALSE 25928
// begin SetLives ( i , 0 ) ;
25914: LD_VAR 0 1
25918: PPUSH
25919: LD_INT 0
25921: PPUSH
25922: CALL_OW 234
// end ;
25926: GO 25911
25928: POP
25929: POP
// end ;
25930: PPOPN 2
25932: END
// every 0 0$1 trigger StreamModeActive and sBunker do
25933: LD_EXP 65
25937: PUSH
25938: LD_EXP 75
25942: AND
25943: IFFALSE 25963
25945: GO 25947
25947: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
25948: LD_INT 32
25950: PPUSH
25951: LD_OWVAR 2
25955: PPUSH
25956: LD_INT 0
25958: PPUSH
25959: CALL_OW 324
25963: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
25964: LD_EXP 65
25968: PUSH
25969: LD_EXP 76
25973: AND
25974: IFFALSE 26155
25976: GO 25978
25978: DISABLE
25979: LD_INT 0
25981: PPUSH
25982: PPUSH
25983: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
25984: LD_ADDR_VAR 0 2
25988: PUSH
25989: LD_INT 22
25991: PUSH
25992: LD_OWVAR 2
25996: PUSH
25997: EMPTY
25998: LIST
25999: LIST
26000: PUSH
26001: LD_INT 33
26003: PUSH
26004: LD_INT 3
26006: PUSH
26007: EMPTY
26008: LIST
26009: LIST
26010: PUSH
26011: EMPTY
26012: LIST
26013: LIST
26014: PPUSH
26015: CALL_OW 69
26019: ST_TO_ADDR
// if not tmp then
26020: LD_VAR 0 2
26024: NOT
26025: IFFALSE 26029
// exit ;
26027: GO 26155
// side := 0 ;
26029: LD_ADDR_VAR 0 3
26033: PUSH
26034: LD_INT 0
26036: ST_TO_ADDR
// for i := 1 to 8 do
26037: LD_ADDR_VAR 0 1
26041: PUSH
26042: DOUBLE
26043: LD_INT 1
26045: DEC
26046: ST_TO_ADDR
26047: LD_INT 8
26049: PUSH
26050: FOR_TO
26051: IFFALSE 26099
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
26053: LD_OWVAR 2
26057: PUSH
26058: LD_VAR 0 1
26062: NONEQUAL
26063: PUSH
26064: LD_OWVAR 2
26068: PPUSH
26069: LD_VAR 0 1
26073: PPUSH
26074: CALL_OW 81
26078: PUSH
26079: LD_INT 2
26081: EQUAL
26082: AND
26083: IFFALSE 26097
// begin side := i ;
26085: LD_ADDR_VAR 0 3
26089: PUSH
26090: LD_VAR 0 1
26094: ST_TO_ADDR
// break ;
26095: GO 26099
// end ;
26097: GO 26050
26099: POP
26100: POP
// if not side then
26101: LD_VAR 0 3
26105: NOT
26106: IFFALSE 26110
// exit ;
26108: GO 26155
// for i := 1 to tmp do
26110: LD_ADDR_VAR 0 1
26114: PUSH
26115: DOUBLE
26116: LD_INT 1
26118: DEC
26119: ST_TO_ADDR
26120: LD_VAR 0 2
26124: PUSH
26125: FOR_TO
26126: IFFALSE 26153
// if Prob ( 60 ) then
26128: LD_INT 60
26130: PPUSH
26131: CALL_OW 13
26135: IFFALSE 26151
// SetSide ( i , side ) ;
26137: LD_VAR 0 1
26141: PPUSH
26142: LD_VAR 0 3
26146: PPUSH
26147: CALL_OW 235
26151: GO 26125
26153: POP
26154: POP
// end ;
26155: PPOPN 3
26157: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
26158: LD_EXP 65
26162: PUSH
26163: LD_EXP 78
26167: AND
26168: IFFALSE 26287
26170: GO 26172
26172: DISABLE
26173: LD_INT 0
26175: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
26176: LD_ADDR_VAR 0 1
26180: PUSH
26181: LD_INT 22
26183: PUSH
26184: LD_OWVAR 2
26188: PUSH
26189: EMPTY
26190: LIST
26191: LIST
26192: PUSH
26193: LD_INT 21
26195: PUSH
26196: LD_INT 1
26198: PUSH
26199: EMPTY
26200: LIST
26201: LIST
26202: PUSH
26203: LD_INT 3
26205: PUSH
26206: LD_INT 23
26208: PUSH
26209: LD_INT 0
26211: PUSH
26212: EMPTY
26213: LIST
26214: LIST
26215: PUSH
26216: EMPTY
26217: LIST
26218: LIST
26219: PUSH
26220: EMPTY
26221: LIST
26222: LIST
26223: LIST
26224: PPUSH
26225: CALL_OW 69
26229: PUSH
26230: FOR_IN
26231: IFFALSE 26285
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
26233: LD_VAR 0 1
26237: PPUSH
26238: CALL_OW 257
26242: PUSH
26243: LD_INT 1
26245: PUSH
26246: LD_INT 2
26248: PUSH
26249: LD_INT 3
26251: PUSH
26252: LD_INT 4
26254: PUSH
26255: EMPTY
26256: LIST
26257: LIST
26258: LIST
26259: LIST
26260: IN
26261: IFFALSE 26283
// SetClass ( un , rand ( 1 , 4 ) ) ;
26263: LD_VAR 0 1
26267: PPUSH
26268: LD_INT 1
26270: PPUSH
26271: LD_INT 4
26273: PPUSH
26274: CALL_OW 12
26278: PPUSH
26279: CALL_OW 336
26283: GO 26230
26285: POP
26286: POP
// end ;
26287: PPOPN 1
26289: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
26290: LD_EXP 65
26294: PUSH
26295: LD_EXP 77
26299: AND
26300: IFFALSE 26379
26302: GO 26304
26304: DISABLE
26305: LD_INT 0
26307: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26308: LD_ADDR_VAR 0 1
26312: PUSH
26313: LD_INT 22
26315: PUSH
26316: LD_OWVAR 2
26320: PUSH
26321: EMPTY
26322: LIST
26323: LIST
26324: PUSH
26325: LD_INT 21
26327: PUSH
26328: LD_INT 3
26330: PUSH
26331: EMPTY
26332: LIST
26333: LIST
26334: PUSH
26335: EMPTY
26336: LIST
26337: LIST
26338: PPUSH
26339: CALL_OW 69
26343: ST_TO_ADDR
// if not tmp then
26344: LD_VAR 0 1
26348: NOT
26349: IFFALSE 26353
// exit ;
26351: GO 26379
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
26353: LD_VAR 0 1
26357: PUSH
26358: LD_INT 1
26360: PPUSH
26361: LD_VAR 0 1
26365: PPUSH
26366: CALL_OW 12
26370: ARRAY
26371: PPUSH
26372: LD_INT 100
26374: PPUSH
26375: CALL_OW 234
// end ;
26379: PPOPN 1
26381: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
26382: LD_EXP 65
26386: PUSH
26387: LD_EXP 79
26391: AND
26392: IFFALSE 26490
26394: GO 26396
26396: DISABLE
26397: LD_INT 0
26399: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26400: LD_ADDR_VAR 0 1
26404: PUSH
26405: LD_INT 22
26407: PUSH
26408: LD_OWVAR 2
26412: PUSH
26413: EMPTY
26414: LIST
26415: LIST
26416: PUSH
26417: LD_INT 21
26419: PUSH
26420: LD_INT 1
26422: PUSH
26423: EMPTY
26424: LIST
26425: LIST
26426: PUSH
26427: EMPTY
26428: LIST
26429: LIST
26430: PPUSH
26431: CALL_OW 69
26435: ST_TO_ADDR
// if not tmp then
26436: LD_VAR 0 1
26440: NOT
26441: IFFALSE 26445
// exit ;
26443: GO 26490
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
26445: LD_VAR 0 1
26449: PUSH
26450: LD_INT 1
26452: PPUSH
26453: LD_VAR 0 1
26457: PPUSH
26458: CALL_OW 12
26462: ARRAY
26463: PPUSH
26464: LD_INT 1
26466: PPUSH
26467: LD_INT 4
26469: PPUSH
26470: CALL_OW 12
26474: PPUSH
26475: LD_INT 3000
26477: PPUSH
26478: LD_INT 9000
26480: PPUSH
26481: CALL_OW 12
26485: PPUSH
26486: CALL_OW 492
// end ;
26490: PPOPN 1
26492: END
// every 0 0$1 trigger StreamModeActive and sDepot do
26493: LD_EXP 65
26497: PUSH
26498: LD_EXP 80
26502: AND
26503: IFFALSE 26523
26505: GO 26507
26507: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
26508: LD_INT 1
26510: PPUSH
26511: LD_OWVAR 2
26515: PPUSH
26516: LD_INT 0
26518: PPUSH
26519: CALL_OW 324
26523: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
26524: LD_EXP 65
26528: PUSH
26529: LD_EXP 81
26533: AND
26534: IFFALSE 26617
26536: GO 26538
26538: DISABLE
26539: LD_INT 0
26541: PPUSH
26542: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26543: LD_ADDR_VAR 0 2
26547: PUSH
26548: LD_INT 22
26550: PUSH
26551: LD_OWVAR 2
26555: PUSH
26556: EMPTY
26557: LIST
26558: LIST
26559: PUSH
26560: LD_INT 21
26562: PUSH
26563: LD_INT 3
26565: PUSH
26566: EMPTY
26567: LIST
26568: LIST
26569: PUSH
26570: EMPTY
26571: LIST
26572: LIST
26573: PPUSH
26574: CALL_OW 69
26578: ST_TO_ADDR
// if not tmp then
26579: LD_VAR 0 2
26583: NOT
26584: IFFALSE 26588
// exit ;
26586: GO 26617
// for i in tmp do
26588: LD_ADDR_VAR 0 1
26592: PUSH
26593: LD_VAR 0 2
26597: PUSH
26598: FOR_IN
26599: IFFALSE 26615
// SetBLevel ( i , 10 ) ;
26601: LD_VAR 0 1
26605: PPUSH
26606: LD_INT 10
26608: PPUSH
26609: CALL_OW 241
26613: GO 26598
26615: POP
26616: POP
// end ;
26617: PPOPN 2
26619: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
26620: LD_EXP 65
26624: PUSH
26625: LD_EXP 82
26629: AND
26630: IFFALSE 26741
26632: GO 26634
26634: DISABLE
26635: LD_INT 0
26637: PPUSH
26638: PPUSH
26639: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26640: LD_ADDR_VAR 0 3
26644: PUSH
26645: LD_INT 22
26647: PUSH
26648: LD_OWVAR 2
26652: PUSH
26653: EMPTY
26654: LIST
26655: LIST
26656: PUSH
26657: LD_INT 25
26659: PUSH
26660: LD_INT 1
26662: PUSH
26663: EMPTY
26664: LIST
26665: LIST
26666: PUSH
26667: EMPTY
26668: LIST
26669: LIST
26670: PPUSH
26671: CALL_OW 69
26675: ST_TO_ADDR
// if not tmp then
26676: LD_VAR 0 3
26680: NOT
26681: IFFALSE 26685
// exit ;
26683: GO 26741
// un := tmp [ rand ( 1 , tmp ) ] ;
26685: LD_ADDR_VAR 0 2
26689: PUSH
26690: LD_VAR 0 3
26694: PUSH
26695: LD_INT 1
26697: PPUSH
26698: LD_VAR 0 3
26702: PPUSH
26703: CALL_OW 12
26707: ARRAY
26708: ST_TO_ADDR
// if Crawls ( un ) then
26709: LD_VAR 0 2
26713: PPUSH
26714: CALL_OW 318
26718: IFFALSE 26729
// ComWalk ( un ) ;
26720: LD_VAR 0 2
26724: PPUSH
26725: CALL_OW 138
// SetClass ( un , class_sniper ) ;
26729: LD_VAR 0 2
26733: PPUSH
26734: LD_INT 5
26736: PPUSH
26737: CALL_OW 336
// end ;
26741: PPOPN 3
26743: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
26744: LD_EXP 65
26748: PUSH
26749: LD_EXP 83
26753: AND
26754: PUSH
26755: LD_OWVAR 67
26759: PUSH
26760: LD_INT 4
26762: LESS
26763: AND
26764: IFFALSE 26783
26766: GO 26768
26768: DISABLE
// begin Difficulty := Difficulty + 1 ;
26769: LD_ADDR_OWVAR 67
26773: PUSH
26774: LD_OWVAR 67
26778: PUSH
26779: LD_INT 1
26781: PLUS
26782: ST_TO_ADDR
// end ;
26783: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
26784: LD_EXP 65
26788: PUSH
26789: LD_EXP 84
26793: AND
26794: IFFALSE 26897
26796: GO 26798
26798: DISABLE
26799: LD_INT 0
26801: PPUSH
// begin for i := 1 to 5 do
26802: LD_ADDR_VAR 0 1
26806: PUSH
26807: DOUBLE
26808: LD_INT 1
26810: DEC
26811: ST_TO_ADDR
26812: LD_INT 5
26814: PUSH
26815: FOR_TO
26816: IFFALSE 26895
// begin uc_nation := nation_nature ;
26818: LD_ADDR_OWVAR 21
26822: PUSH
26823: LD_INT 0
26825: ST_TO_ADDR
// uc_side := 0 ;
26826: LD_ADDR_OWVAR 20
26830: PUSH
26831: LD_INT 0
26833: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26834: LD_ADDR_OWVAR 29
26838: PUSH
26839: LD_INT 12
26841: PUSH
26842: LD_INT 12
26844: PUSH
26845: EMPTY
26846: LIST
26847: LIST
26848: ST_TO_ADDR
// hc_agressivity := 20 ;
26849: LD_ADDR_OWVAR 35
26853: PUSH
26854: LD_INT 20
26856: ST_TO_ADDR
// hc_class := class_tiger ;
26857: LD_ADDR_OWVAR 28
26861: PUSH
26862: LD_INT 14
26864: ST_TO_ADDR
// hc_gallery :=  ;
26865: LD_ADDR_OWVAR 33
26869: PUSH
26870: LD_STRING 
26872: ST_TO_ADDR
// hc_name :=  ;
26873: LD_ADDR_OWVAR 26
26877: PUSH
26878: LD_STRING 
26880: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
26881: CALL_OW 44
26885: PPUSH
26886: LD_INT 0
26888: PPUSH
26889: CALL_OW 51
// end ;
26893: GO 26815
26895: POP
26896: POP
// end ;
26897: PPOPN 1
26899: END
// every 0 0$1 trigger StreamModeActive and sBomb do
26900: LD_EXP 65
26904: PUSH
26905: LD_EXP 85
26909: AND
26910: IFFALSE 26919
26912: GO 26914
26914: DISABLE
// StreamSibBomb ;
26915: CALL 26920 0 0
26919: END
// export function StreamSibBomb ; var i , x , y ; begin
26920: LD_INT 0
26922: PPUSH
26923: PPUSH
26924: PPUSH
26925: PPUSH
// result := false ;
26926: LD_ADDR_VAR 0 1
26930: PUSH
26931: LD_INT 0
26933: ST_TO_ADDR
// for i := 1 to 16 do
26934: LD_ADDR_VAR 0 2
26938: PUSH
26939: DOUBLE
26940: LD_INT 1
26942: DEC
26943: ST_TO_ADDR
26944: LD_INT 16
26946: PUSH
26947: FOR_TO
26948: IFFALSE 27147
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26950: LD_ADDR_VAR 0 3
26954: PUSH
26955: LD_INT 10
26957: PUSH
26958: LD_INT 20
26960: PUSH
26961: LD_INT 30
26963: PUSH
26964: LD_INT 40
26966: PUSH
26967: LD_INT 50
26969: PUSH
26970: LD_INT 60
26972: PUSH
26973: LD_INT 70
26975: PUSH
26976: LD_INT 80
26978: PUSH
26979: LD_INT 90
26981: PUSH
26982: LD_INT 100
26984: PUSH
26985: LD_INT 110
26987: PUSH
26988: LD_INT 120
26990: PUSH
26991: LD_INT 130
26993: PUSH
26994: LD_INT 140
26996: PUSH
26997: LD_INT 150
26999: PUSH
27000: EMPTY
27001: LIST
27002: LIST
27003: LIST
27004: LIST
27005: LIST
27006: LIST
27007: LIST
27008: LIST
27009: LIST
27010: LIST
27011: LIST
27012: LIST
27013: LIST
27014: LIST
27015: LIST
27016: PUSH
27017: LD_INT 1
27019: PPUSH
27020: LD_INT 15
27022: PPUSH
27023: CALL_OW 12
27027: ARRAY
27028: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27029: LD_ADDR_VAR 0 4
27033: PUSH
27034: LD_INT 10
27036: PUSH
27037: LD_INT 20
27039: PUSH
27040: LD_INT 30
27042: PUSH
27043: LD_INT 40
27045: PUSH
27046: LD_INT 50
27048: PUSH
27049: LD_INT 60
27051: PUSH
27052: LD_INT 70
27054: PUSH
27055: LD_INT 80
27057: PUSH
27058: LD_INT 90
27060: PUSH
27061: LD_INT 100
27063: PUSH
27064: LD_INT 110
27066: PUSH
27067: LD_INT 120
27069: PUSH
27070: LD_INT 130
27072: PUSH
27073: LD_INT 140
27075: PUSH
27076: LD_INT 150
27078: PUSH
27079: EMPTY
27080: LIST
27081: LIST
27082: LIST
27083: LIST
27084: LIST
27085: LIST
27086: LIST
27087: LIST
27088: LIST
27089: LIST
27090: LIST
27091: LIST
27092: LIST
27093: LIST
27094: LIST
27095: PUSH
27096: LD_INT 1
27098: PPUSH
27099: LD_INT 15
27101: PPUSH
27102: CALL_OW 12
27106: ARRAY
27107: ST_TO_ADDR
// if ValidHex ( x , y ) then
27108: LD_VAR 0 3
27112: PPUSH
27113: LD_VAR 0 4
27117: PPUSH
27118: CALL_OW 488
27122: IFFALSE 27145
// begin result := [ x , y ] ;
27124: LD_ADDR_VAR 0 1
27128: PUSH
27129: LD_VAR 0 3
27133: PUSH
27134: LD_VAR 0 4
27138: PUSH
27139: EMPTY
27140: LIST
27141: LIST
27142: ST_TO_ADDR
// break ;
27143: GO 27147
// end ; end ;
27145: GO 26947
27147: POP
27148: POP
// if result then
27149: LD_VAR 0 1
27153: IFFALSE 27213
// begin ToLua ( playSibBomb() ) ;
27155: LD_STRING playSibBomb()
27157: PPUSH
27158: CALL_OW 559
// wait ( 0 0$14 ) ;
27162: LD_INT 490
27164: PPUSH
27165: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
27169: LD_VAR 0 1
27173: PUSH
27174: LD_INT 1
27176: ARRAY
27177: PPUSH
27178: LD_VAR 0 1
27182: PUSH
27183: LD_INT 2
27185: ARRAY
27186: PPUSH
27187: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
27191: LD_VAR 0 1
27195: PUSH
27196: LD_INT 1
27198: ARRAY
27199: PPUSH
27200: LD_VAR 0 1
27204: PUSH
27205: LD_INT 2
27207: ARRAY
27208: PPUSH
27209: CALL_OW 429
// end ; end ;
27213: LD_VAR 0 1
27217: RET
// every 0 0$1 trigger StreamModeActive and sReset do
27218: LD_EXP 65
27222: PUSH
27223: LD_EXP 87
27227: AND
27228: IFFALSE 27240
27230: GO 27232
27232: DISABLE
// YouLost (  ) ;
27233: LD_STRING 
27235: PPUSH
27236: CALL_OW 104
27240: END
// every 0 0$1 trigger StreamModeActive and sFog do
27241: LD_EXP 65
27245: PUSH
27246: LD_EXP 86
27250: AND
27251: IFFALSE 27265
27253: GO 27255
27255: DISABLE
// FogOff ( your_side ) ;
27256: LD_OWVAR 2
27260: PPUSH
27261: CALL_OW 344
27265: END
// every 0 0$1 trigger StreamModeActive and sSun do
27266: LD_EXP 65
27270: PUSH
27271: LD_EXP 88
27275: AND
27276: IFFALSE 27304
27278: GO 27280
27280: DISABLE
// begin solar_recharge_percent := 0 ;
27281: LD_ADDR_OWVAR 79
27285: PUSH
27286: LD_INT 0
27288: ST_TO_ADDR
// wait ( 5 5$00 ) ;
27289: LD_INT 10500
27291: PPUSH
27292: CALL_OW 67
// solar_recharge_percent := 100 ;
27296: LD_ADDR_OWVAR 79
27300: PUSH
27301: LD_INT 100
27303: ST_TO_ADDR
// end ;
27304: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
27305: LD_EXP 65
27309: PUSH
27310: LD_EXP 89
27314: AND
27315: IFFALSE 27554
27317: GO 27319
27319: DISABLE
27320: LD_INT 0
27322: PPUSH
27323: PPUSH
27324: PPUSH
// begin tmp := [ ] ;
27325: LD_ADDR_VAR 0 3
27329: PUSH
27330: EMPTY
27331: ST_TO_ADDR
// for i := 1 to 6 do
27332: LD_ADDR_VAR 0 1
27336: PUSH
27337: DOUBLE
27338: LD_INT 1
27340: DEC
27341: ST_TO_ADDR
27342: LD_INT 6
27344: PUSH
27345: FOR_TO
27346: IFFALSE 27451
// begin uc_nation := nation_nature ;
27348: LD_ADDR_OWVAR 21
27352: PUSH
27353: LD_INT 0
27355: ST_TO_ADDR
// uc_side := 0 ;
27356: LD_ADDR_OWVAR 20
27360: PUSH
27361: LD_INT 0
27363: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27364: LD_ADDR_OWVAR 29
27368: PUSH
27369: LD_INT 12
27371: PUSH
27372: LD_INT 12
27374: PUSH
27375: EMPTY
27376: LIST
27377: LIST
27378: ST_TO_ADDR
// hc_agressivity := 20 ;
27379: LD_ADDR_OWVAR 35
27383: PUSH
27384: LD_INT 20
27386: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
27387: LD_ADDR_OWVAR 28
27391: PUSH
27392: LD_INT 17
27394: ST_TO_ADDR
// hc_gallery :=  ;
27395: LD_ADDR_OWVAR 33
27399: PUSH
27400: LD_STRING 
27402: ST_TO_ADDR
// hc_name :=  ;
27403: LD_ADDR_OWVAR 26
27407: PUSH
27408: LD_STRING 
27410: ST_TO_ADDR
// un := CreateHuman ;
27411: LD_ADDR_VAR 0 2
27415: PUSH
27416: CALL_OW 44
27420: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
27421: LD_VAR 0 2
27425: PPUSH
27426: LD_INT 1
27428: PPUSH
27429: CALL_OW 51
// tmp := tmp ^ un ;
27433: LD_ADDR_VAR 0 3
27437: PUSH
27438: LD_VAR 0 3
27442: PUSH
27443: LD_VAR 0 2
27447: ADD
27448: ST_TO_ADDR
// end ;
27449: GO 27345
27451: POP
27452: POP
// repeat wait ( 0 0$1 ) ;
27453: LD_INT 35
27455: PPUSH
27456: CALL_OW 67
// for un in tmp do
27460: LD_ADDR_VAR 0 2
27464: PUSH
27465: LD_VAR 0 3
27469: PUSH
27470: FOR_IN
27471: IFFALSE 27545
// begin if IsDead ( un ) then
27473: LD_VAR 0 2
27477: PPUSH
27478: CALL_OW 301
27482: IFFALSE 27502
// begin tmp := tmp diff un ;
27484: LD_ADDR_VAR 0 3
27488: PUSH
27489: LD_VAR 0 3
27493: PUSH
27494: LD_VAR 0 2
27498: DIFF
27499: ST_TO_ADDR
// continue ;
27500: GO 27470
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
27502: LD_VAR 0 2
27506: PPUSH
27507: LD_INT 3
27509: PUSH
27510: LD_INT 22
27512: PUSH
27513: LD_INT 0
27515: PUSH
27516: EMPTY
27517: LIST
27518: LIST
27519: PUSH
27520: EMPTY
27521: LIST
27522: LIST
27523: PPUSH
27524: CALL_OW 69
27528: PPUSH
27529: LD_VAR 0 2
27533: PPUSH
27534: CALL_OW 74
27538: PPUSH
27539: CALL_OW 115
// end ;
27543: GO 27470
27545: POP
27546: POP
// until not tmp ;
27547: LD_VAR 0 3
27551: NOT
27552: IFFALSE 27453
// end ;
27554: PPOPN 3
27556: END
// every 0 0$1 trigger StreamModeActive and sTroll do
27557: LD_EXP 65
27561: PUSH
27562: LD_EXP 90
27566: AND
27567: IFFALSE 27621
27569: GO 27571
27571: DISABLE
// begin ToLua ( displayTroll(); ) ;
27572: LD_STRING displayTroll();
27574: PPUSH
27575: CALL_OW 559
// wait ( 3 3$00 ) ;
27579: LD_INT 6300
27581: PPUSH
27582: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27586: LD_STRING hideTroll();
27588: PPUSH
27589: CALL_OW 559
// wait ( 1 1$00 ) ;
27593: LD_INT 2100
27595: PPUSH
27596: CALL_OW 67
// ToLua ( displayTroll(); ) ;
27600: LD_STRING displayTroll();
27602: PPUSH
27603: CALL_OW 559
// wait ( 1 1$00 ) ;
27607: LD_INT 2100
27609: PPUSH
27610: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27614: LD_STRING hideTroll();
27616: PPUSH
27617: CALL_OW 559
// end ;
27621: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
27622: LD_EXP 65
27626: PUSH
27627: LD_EXP 91
27631: AND
27632: IFFALSE 27695
27634: GO 27636
27636: DISABLE
27637: LD_INT 0
27639: PPUSH
// begin p := 0 ;
27640: LD_ADDR_VAR 0 1
27644: PUSH
27645: LD_INT 0
27647: ST_TO_ADDR
// repeat game_speed := 1 ;
27648: LD_ADDR_OWVAR 65
27652: PUSH
27653: LD_INT 1
27655: ST_TO_ADDR
// wait ( 0 0$1 ) ;
27656: LD_INT 35
27658: PPUSH
27659: CALL_OW 67
// p := p + 1 ;
27663: LD_ADDR_VAR 0 1
27667: PUSH
27668: LD_VAR 0 1
27672: PUSH
27673: LD_INT 1
27675: PLUS
27676: ST_TO_ADDR
// until p >= 60 ;
27677: LD_VAR 0 1
27681: PUSH
27682: LD_INT 60
27684: GREATEREQUAL
27685: IFFALSE 27648
// game_speed := 4 ;
27687: LD_ADDR_OWVAR 65
27691: PUSH
27692: LD_INT 4
27694: ST_TO_ADDR
// end ;
27695: PPOPN 1
27697: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
27698: LD_EXP 65
27702: PUSH
27703: LD_EXP 92
27707: AND
27708: IFFALSE 27854
27710: GO 27712
27712: DISABLE
27713: LD_INT 0
27715: PPUSH
27716: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27717: LD_ADDR_VAR 0 1
27721: PUSH
27722: LD_INT 22
27724: PUSH
27725: LD_OWVAR 2
27729: PUSH
27730: EMPTY
27731: LIST
27732: LIST
27733: PUSH
27734: LD_INT 2
27736: PUSH
27737: LD_INT 30
27739: PUSH
27740: LD_INT 0
27742: PUSH
27743: EMPTY
27744: LIST
27745: LIST
27746: PUSH
27747: LD_INT 30
27749: PUSH
27750: LD_INT 1
27752: PUSH
27753: EMPTY
27754: LIST
27755: LIST
27756: PUSH
27757: EMPTY
27758: LIST
27759: LIST
27760: LIST
27761: PUSH
27762: EMPTY
27763: LIST
27764: LIST
27765: PPUSH
27766: CALL_OW 69
27770: ST_TO_ADDR
// if not depot then
27771: LD_VAR 0 1
27775: NOT
27776: IFFALSE 27780
// exit ;
27778: GO 27854
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
27780: LD_ADDR_VAR 0 2
27784: PUSH
27785: LD_VAR 0 1
27789: PUSH
27790: LD_INT 1
27792: PPUSH
27793: LD_VAR 0 1
27797: PPUSH
27798: CALL_OW 12
27802: ARRAY
27803: PPUSH
27804: CALL_OW 274
27808: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
27809: LD_VAR 0 2
27813: PPUSH
27814: LD_INT 1
27816: PPUSH
27817: LD_INT 0
27819: PPUSH
27820: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
27824: LD_VAR 0 2
27828: PPUSH
27829: LD_INT 2
27831: PPUSH
27832: LD_INT 0
27834: PPUSH
27835: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
27839: LD_VAR 0 2
27843: PPUSH
27844: LD_INT 3
27846: PPUSH
27847: LD_INT 0
27849: PPUSH
27850: CALL_OW 277
// end ;
27854: PPOPN 2
27856: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
27857: LD_EXP 65
27861: PUSH
27862: LD_EXP 93
27866: AND
27867: IFFALSE 27964
27869: GO 27871
27871: DISABLE
27872: LD_INT 0
27874: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27875: LD_ADDR_VAR 0 1
27879: PUSH
27880: LD_INT 22
27882: PUSH
27883: LD_OWVAR 2
27887: PUSH
27888: EMPTY
27889: LIST
27890: LIST
27891: PUSH
27892: LD_INT 21
27894: PUSH
27895: LD_INT 1
27897: PUSH
27898: EMPTY
27899: LIST
27900: LIST
27901: PUSH
27902: LD_INT 3
27904: PUSH
27905: LD_INT 23
27907: PUSH
27908: LD_INT 0
27910: PUSH
27911: EMPTY
27912: LIST
27913: LIST
27914: PUSH
27915: EMPTY
27916: LIST
27917: LIST
27918: PUSH
27919: EMPTY
27920: LIST
27921: LIST
27922: LIST
27923: PPUSH
27924: CALL_OW 69
27928: ST_TO_ADDR
// if not tmp then
27929: LD_VAR 0 1
27933: NOT
27934: IFFALSE 27938
// exit ;
27936: GO 27964
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
27938: LD_VAR 0 1
27942: PUSH
27943: LD_INT 1
27945: PPUSH
27946: LD_VAR 0 1
27950: PPUSH
27951: CALL_OW 12
27955: ARRAY
27956: PPUSH
27957: LD_INT 200
27959: PPUSH
27960: CALL_OW 234
// end ;
27964: PPOPN 1
27966: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
27967: LD_EXP 65
27971: PUSH
27972: LD_EXP 94
27976: AND
27977: IFFALSE 28056
27979: GO 27981
27981: DISABLE
27982: LD_INT 0
27984: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
27985: LD_ADDR_VAR 0 1
27989: PUSH
27990: LD_INT 22
27992: PUSH
27993: LD_OWVAR 2
27997: PUSH
27998: EMPTY
27999: LIST
28000: LIST
28001: PUSH
28002: LD_INT 21
28004: PUSH
28005: LD_INT 2
28007: PUSH
28008: EMPTY
28009: LIST
28010: LIST
28011: PUSH
28012: EMPTY
28013: LIST
28014: LIST
28015: PPUSH
28016: CALL_OW 69
28020: ST_TO_ADDR
// if not tmp then
28021: LD_VAR 0 1
28025: NOT
28026: IFFALSE 28030
// exit ;
28028: GO 28056
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
28030: LD_VAR 0 1
28034: PUSH
28035: LD_INT 1
28037: PPUSH
28038: LD_VAR 0 1
28042: PPUSH
28043: CALL_OW 12
28047: ARRAY
28048: PPUSH
28049: LD_INT 60
28051: PPUSH
28052: CALL_OW 234
// end ;
28056: PPOPN 1
28058: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
28059: LD_EXP 65
28063: PUSH
28064: LD_EXP 95
28068: AND
28069: IFFALSE 28168
28071: GO 28073
28073: DISABLE
28074: LD_INT 0
28076: PPUSH
28077: PPUSH
// begin enable ;
28078: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
28079: LD_ADDR_VAR 0 1
28083: PUSH
28084: LD_INT 22
28086: PUSH
28087: LD_OWVAR 2
28091: PUSH
28092: EMPTY
28093: LIST
28094: LIST
28095: PUSH
28096: LD_INT 61
28098: PUSH
28099: EMPTY
28100: LIST
28101: PUSH
28102: LD_INT 33
28104: PUSH
28105: LD_INT 2
28107: PUSH
28108: EMPTY
28109: LIST
28110: LIST
28111: PUSH
28112: EMPTY
28113: LIST
28114: LIST
28115: LIST
28116: PPUSH
28117: CALL_OW 69
28121: ST_TO_ADDR
// if not tmp then
28122: LD_VAR 0 1
28126: NOT
28127: IFFALSE 28131
// exit ;
28129: GO 28168
// for i in tmp do
28131: LD_ADDR_VAR 0 2
28135: PUSH
28136: LD_VAR 0 1
28140: PUSH
28141: FOR_IN
28142: IFFALSE 28166
// if IsControledBy ( i ) then
28144: LD_VAR 0 2
28148: PPUSH
28149: CALL_OW 312
28153: IFFALSE 28164
// ComUnlink ( i ) ;
28155: LD_VAR 0 2
28159: PPUSH
28160: CALL_OW 136
28164: GO 28141
28166: POP
28167: POP
// end ;
28168: PPOPN 2
28170: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
28171: LD_EXP 65
28175: PUSH
28176: LD_EXP 96
28180: AND
28181: IFFALSE 28321
28183: GO 28185
28185: DISABLE
28186: LD_INT 0
28188: PPUSH
28189: PPUSH
// begin ToLua ( displayPowell(); ) ;
28190: LD_STRING displayPowell();
28192: PPUSH
28193: CALL_OW 559
// uc_side := 0 ;
28197: LD_ADDR_OWVAR 20
28201: PUSH
28202: LD_INT 0
28204: ST_TO_ADDR
// uc_nation := 2 ;
28205: LD_ADDR_OWVAR 21
28209: PUSH
28210: LD_INT 2
28212: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
28213: LD_ADDR_OWVAR 37
28217: PUSH
28218: LD_INT 14
28220: ST_TO_ADDR
// vc_engine := engine_siberite ;
28221: LD_ADDR_OWVAR 39
28225: PUSH
28226: LD_INT 3
28228: ST_TO_ADDR
// vc_control := control_apeman ;
28229: LD_ADDR_OWVAR 38
28233: PUSH
28234: LD_INT 5
28236: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
28237: LD_ADDR_OWVAR 40
28241: PUSH
28242: LD_INT 29
28244: ST_TO_ADDR
// un := CreateVehicle ;
28245: LD_ADDR_VAR 0 2
28249: PUSH
28250: CALL_OW 45
28254: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28255: LD_VAR 0 2
28259: PPUSH
28260: LD_INT 1
28262: PPUSH
28263: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28267: LD_INT 35
28269: PPUSH
28270: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28274: LD_VAR 0 2
28278: PPUSH
28279: LD_INT 22
28281: PUSH
28282: LD_OWVAR 2
28286: PUSH
28287: EMPTY
28288: LIST
28289: LIST
28290: PPUSH
28291: CALL_OW 69
28295: PPUSH
28296: LD_VAR 0 2
28300: PPUSH
28301: CALL_OW 74
28305: PPUSH
28306: CALL_OW 115
// until IsDead ( un ) ;
28310: LD_VAR 0 2
28314: PPUSH
28315: CALL_OW 301
28319: IFFALSE 28267
// end ;
28321: PPOPN 2
28323: END
// every 0 0$1 trigger StreamModeActive and sStu do
28324: LD_EXP 65
28328: PUSH
28329: LD_EXP 104
28333: AND
28334: IFFALSE 28350
28336: GO 28338
28338: DISABLE
// begin ToLua ( displayStucuk(); ) ;
28339: LD_STRING displayStucuk();
28341: PPUSH
28342: CALL_OW 559
// ResetFog ;
28346: CALL_OW 335
// end ;
28350: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
28351: LD_EXP 65
28355: PUSH
28356: LD_EXP 97
28360: AND
28361: IFFALSE 28502
28363: GO 28365
28365: DISABLE
28366: LD_INT 0
28368: PPUSH
28369: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28370: LD_ADDR_VAR 0 2
28374: PUSH
28375: LD_INT 22
28377: PUSH
28378: LD_OWVAR 2
28382: PUSH
28383: EMPTY
28384: LIST
28385: LIST
28386: PUSH
28387: LD_INT 21
28389: PUSH
28390: LD_INT 1
28392: PUSH
28393: EMPTY
28394: LIST
28395: LIST
28396: PUSH
28397: EMPTY
28398: LIST
28399: LIST
28400: PPUSH
28401: CALL_OW 69
28405: ST_TO_ADDR
// if not tmp then
28406: LD_VAR 0 2
28410: NOT
28411: IFFALSE 28415
// exit ;
28413: GO 28502
// un := tmp [ rand ( 1 , tmp ) ] ;
28415: LD_ADDR_VAR 0 1
28419: PUSH
28420: LD_VAR 0 2
28424: PUSH
28425: LD_INT 1
28427: PPUSH
28428: LD_VAR 0 2
28432: PPUSH
28433: CALL_OW 12
28437: ARRAY
28438: ST_TO_ADDR
// SetSide ( un , 0 ) ;
28439: LD_VAR 0 1
28443: PPUSH
28444: LD_INT 0
28446: PPUSH
28447: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
28451: LD_VAR 0 1
28455: PPUSH
28456: LD_OWVAR 3
28460: PUSH
28461: LD_VAR 0 1
28465: DIFF
28466: PPUSH
28467: LD_VAR 0 1
28471: PPUSH
28472: CALL_OW 74
28476: PPUSH
28477: CALL_OW 115
// wait ( 0 0$20 ) ;
28481: LD_INT 700
28483: PPUSH
28484: CALL_OW 67
// SetSide ( un , your_side ) ;
28488: LD_VAR 0 1
28492: PPUSH
28493: LD_OWVAR 2
28497: PPUSH
28498: CALL_OW 235
// end ;
28502: PPOPN 2
28504: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
28505: LD_EXP 65
28509: PUSH
28510: LD_EXP 98
28514: AND
28515: IFFALSE 28621
28517: GO 28519
28519: DISABLE
28520: LD_INT 0
28522: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28523: LD_ADDR_VAR 0 1
28527: PUSH
28528: LD_INT 22
28530: PUSH
28531: LD_OWVAR 2
28535: PUSH
28536: EMPTY
28537: LIST
28538: LIST
28539: PUSH
28540: LD_INT 2
28542: PUSH
28543: LD_INT 30
28545: PUSH
28546: LD_INT 0
28548: PUSH
28549: EMPTY
28550: LIST
28551: LIST
28552: PUSH
28553: LD_INT 30
28555: PUSH
28556: LD_INT 1
28558: PUSH
28559: EMPTY
28560: LIST
28561: LIST
28562: PUSH
28563: EMPTY
28564: LIST
28565: LIST
28566: LIST
28567: PUSH
28568: EMPTY
28569: LIST
28570: LIST
28571: PPUSH
28572: CALL_OW 69
28576: ST_TO_ADDR
// if not depot then
28577: LD_VAR 0 1
28581: NOT
28582: IFFALSE 28586
// exit ;
28584: GO 28621
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
28586: LD_VAR 0 1
28590: PUSH
28591: LD_INT 1
28593: ARRAY
28594: PPUSH
28595: CALL_OW 250
28599: PPUSH
28600: LD_VAR 0 1
28604: PUSH
28605: LD_INT 1
28607: ARRAY
28608: PPUSH
28609: CALL_OW 251
28613: PPUSH
28614: LD_INT 70
28616: PPUSH
28617: CALL_OW 495
// end ;
28621: PPOPN 1
28623: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
28624: LD_EXP 65
28628: PUSH
28629: LD_EXP 99
28633: AND
28634: IFFALSE 28845
28636: GO 28638
28638: DISABLE
28639: LD_INT 0
28641: PPUSH
28642: PPUSH
28643: PPUSH
28644: PPUSH
28645: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28646: LD_ADDR_VAR 0 5
28650: PUSH
28651: LD_INT 22
28653: PUSH
28654: LD_OWVAR 2
28658: PUSH
28659: EMPTY
28660: LIST
28661: LIST
28662: PUSH
28663: LD_INT 21
28665: PUSH
28666: LD_INT 1
28668: PUSH
28669: EMPTY
28670: LIST
28671: LIST
28672: PUSH
28673: EMPTY
28674: LIST
28675: LIST
28676: PPUSH
28677: CALL_OW 69
28681: ST_TO_ADDR
// if not tmp then
28682: LD_VAR 0 5
28686: NOT
28687: IFFALSE 28691
// exit ;
28689: GO 28845
// for i in tmp do
28691: LD_ADDR_VAR 0 1
28695: PUSH
28696: LD_VAR 0 5
28700: PUSH
28701: FOR_IN
28702: IFFALSE 28843
// begin d := rand ( 0 , 5 ) ;
28704: LD_ADDR_VAR 0 4
28708: PUSH
28709: LD_INT 0
28711: PPUSH
28712: LD_INT 5
28714: PPUSH
28715: CALL_OW 12
28719: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
28720: LD_ADDR_VAR 0 2
28724: PUSH
28725: LD_VAR 0 1
28729: PPUSH
28730: CALL_OW 250
28734: PPUSH
28735: LD_VAR 0 4
28739: PPUSH
28740: LD_INT 3
28742: PPUSH
28743: LD_INT 12
28745: PPUSH
28746: CALL_OW 12
28750: PPUSH
28751: CALL_OW 272
28755: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
28756: LD_ADDR_VAR 0 3
28760: PUSH
28761: LD_VAR 0 1
28765: PPUSH
28766: CALL_OW 251
28770: PPUSH
28771: LD_VAR 0 4
28775: PPUSH
28776: LD_INT 3
28778: PPUSH
28779: LD_INT 12
28781: PPUSH
28782: CALL_OW 12
28786: PPUSH
28787: CALL_OW 273
28791: ST_TO_ADDR
// if ValidHex ( x , y ) then
28792: LD_VAR 0 2
28796: PPUSH
28797: LD_VAR 0 3
28801: PPUSH
28802: CALL_OW 488
28806: IFFALSE 28841
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
28808: LD_VAR 0 1
28812: PPUSH
28813: LD_VAR 0 2
28817: PPUSH
28818: LD_VAR 0 3
28822: PPUSH
28823: LD_INT 3
28825: PPUSH
28826: LD_INT 6
28828: PPUSH
28829: CALL_OW 12
28833: PPUSH
28834: LD_INT 1
28836: PPUSH
28837: CALL_OW 483
// end ;
28841: GO 28701
28843: POP
28844: POP
// end ;
28845: PPOPN 5
28847: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
28848: LD_EXP 65
28852: PUSH
28853: LD_EXP 100
28857: AND
28858: IFFALSE 28952
28860: GO 28862
28862: DISABLE
28863: LD_INT 0
28865: PPUSH
28866: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
28867: LD_ADDR_VAR 0 2
28871: PUSH
28872: LD_INT 22
28874: PUSH
28875: LD_OWVAR 2
28879: PUSH
28880: EMPTY
28881: LIST
28882: LIST
28883: PUSH
28884: LD_INT 32
28886: PUSH
28887: LD_INT 1
28889: PUSH
28890: EMPTY
28891: LIST
28892: LIST
28893: PUSH
28894: LD_INT 21
28896: PUSH
28897: LD_INT 2
28899: PUSH
28900: EMPTY
28901: LIST
28902: LIST
28903: PUSH
28904: EMPTY
28905: LIST
28906: LIST
28907: LIST
28908: PPUSH
28909: CALL_OW 69
28913: ST_TO_ADDR
// if not tmp then
28914: LD_VAR 0 2
28918: NOT
28919: IFFALSE 28923
// exit ;
28921: GO 28952
// for i in tmp do
28923: LD_ADDR_VAR 0 1
28927: PUSH
28928: LD_VAR 0 2
28932: PUSH
28933: FOR_IN
28934: IFFALSE 28950
// SetFuel ( i , 0 ) ;
28936: LD_VAR 0 1
28940: PPUSH
28941: LD_INT 0
28943: PPUSH
28944: CALL_OW 240
28948: GO 28933
28950: POP
28951: POP
// end ;
28952: PPOPN 2
28954: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
28955: LD_EXP 65
28959: PUSH
28960: LD_EXP 101
28964: AND
28965: IFFALSE 29031
28967: GO 28969
28969: DISABLE
28970: LD_INT 0
28972: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
28973: LD_ADDR_VAR 0 1
28977: PUSH
28978: LD_INT 22
28980: PUSH
28981: LD_OWVAR 2
28985: PUSH
28986: EMPTY
28987: LIST
28988: LIST
28989: PUSH
28990: LD_INT 30
28992: PUSH
28993: LD_INT 29
28995: PUSH
28996: EMPTY
28997: LIST
28998: LIST
28999: PUSH
29000: EMPTY
29001: LIST
29002: LIST
29003: PPUSH
29004: CALL_OW 69
29008: ST_TO_ADDR
// if not tmp then
29009: LD_VAR 0 1
29013: NOT
29014: IFFALSE 29018
// exit ;
29016: GO 29031
// DestroyUnit ( tmp [ 1 ] ) ;
29018: LD_VAR 0 1
29022: PUSH
29023: LD_INT 1
29025: ARRAY
29026: PPUSH
29027: CALL_OW 65
// end ;
29031: PPOPN 1
29033: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
29034: LD_EXP 65
29038: PUSH
29039: LD_EXP 103
29043: AND
29044: IFFALSE 29173
29046: GO 29048
29048: DISABLE
29049: LD_INT 0
29051: PPUSH
// begin uc_side := 0 ;
29052: LD_ADDR_OWVAR 20
29056: PUSH
29057: LD_INT 0
29059: ST_TO_ADDR
// uc_nation := nation_arabian ;
29060: LD_ADDR_OWVAR 21
29064: PUSH
29065: LD_INT 2
29067: ST_TO_ADDR
// hc_gallery :=  ;
29068: LD_ADDR_OWVAR 33
29072: PUSH
29073: LD_STRING 
29075: ST_TO_ADDR
// hc_name :=  ;
29076: LD_ADDR_OWVAR 26
29080: PUSH
29081: LD_STRING 
29083: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
29084: LD_INT 1
29086: PPUSH
29087: LD_INT 11
29089: PPUSH
29090: LD_INT 10
29092: PPUSH
29093: CALL_OW 380
// un := CreateHuman ;
29097: LD_ADDR_VAR 0 1
29101: PUSH
29102: CALL_OW 44
29106: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29107: LD_VAR 0 1
29111: PPUSH
29112: LD_INT 1
29114: PPUSH
29115: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29119: LD_INT 35
29121: PPUSH
29122: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29126: LD_VAR 0 1
29130: PPUSH
29131: LD_INT 22
29133: PUSH
29134: LD_OWVAR 2
29138: PUSH
29139: EMPTY
29140: LIST
29141: LIST
29142: PPUSH
29143: CALL_OW 69
29147: PPUSH
29148: LD_VAR 0 1
29152: PPUSH
29153: CALL_OW 74
29157: PPUSH
29158: CALL_OW 115
// until IsDead ( un ) ;
29162: LD_VAR 0 1
29166: PPUSH
29167: CALL_OW 301
29171: IFFALSE 29119
// end ;
29173: PPOPN 1
29175: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
29176: LD_EXP 65
29180: PUSH
29181: LD_EXP 105
29185: AND
29186: IFFALSE 29198
29188: GO 29190
29190: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
29191: LD_STRING earthquake(getX(game), 0, 32)
29193: PPUSH
29194: CALL_OW 559
29198: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
29199: LD_EXP 65
29203: PUSH
29204: LD_EXP 106
29208: AND
29209: IFFALSE 29300
29211: GO 29213
29213: DISABLE
29214: LD_INT 0
29216: PPUSH
// begin enable ;
29217: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
29218: LD_ADDR_VAR 0 1
29222: PUSH
29223: LD_INT 22
29225: PUSH
29226: LD_OWVAR 2
29230: PUSH
29231: EMPTY
29232: LIST
29233: LIST
29234: PUSH
29235: LD_INT 21
29237: PUSH
29238: LD_INT 2
29240: PUSH
29241: EMPTY
29242: LIST
29243: LIST
29244: PUSH
29245: LD_INT 33
29247: PUSH
29248: LD_INT 3
29250: PUSH
29251: EMPTY
29252: LIST
29253: LIST
29254: PUSH
29255: EMPTY
29256: LIST
29257: LIST
29258: LIST
29259: PPUSH
29260: CALL_OW 69
29264: ST_TO_ADDR
// if not tmp then
29265: LD_VAR 0 1
29269: NOT
29270: IFFALSE 29274
// exit ;
29272: GO 29300
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29274: LD_VAR 0 1
29278: PUSH
29279: LD_INT 1
29281: PPUSH
29282: LD_VAR 0 1
29286: PPUSH
29287: CALL_OW 12
29291: ARRAY
29292: PPUSH
29293: LD_INT 1
29295: PPUSH
29296: CALL_OW 234
// end ;
29300: PPOPN 1
29302: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
29303: LD_EXP 65
29307: PUSH
29308: LD_EXP 107
29312: AND
29313: IFFALSE 29454
29315: GO 29317
29317: DISABLE
29318: LD_INT 0
29320: PPUSH
29321: PPUSH
29322: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29323: LD_ADDR_VAR 0 3
29327: PUSH
29328: LD_INT 22
29330: PUSH
29331: LD_OWVAR 2
29335: PUSH
29336: EMPTY
29337: LIST
29338: LIST
29339: PUSH
29340: LD_INT 25
29342: PUSH
29343: LD_INT 1
29345: PUSH
29346: EMPTY
29347: LIST
29348: LIST
29349: PUSH
29350: EMPTY
29351: LIST
29352: LIST
29353: PPUSH
29354: CALL_OW 69
29358: ST_TO_ADDR
// if not tmp then
29359: LD_VAR 0 3
29363: NOT
29364: IFFALSE 29368
// exit ;
29366: GO 29454
// un := tmp [ rand ( 1 , tmp ) ] ;
29368: LD_ADDR_VAR 0 2
29372: PUSH
29373: LD_VAR 0 3
29377: PUSH
29378: LD_INT 1
29380: PPUSH
29381: LD_VAR 0 3
29385: PPUSH
29386: CALL_OW 12
29390: ARRAY
29391: ST_TO_ADDR
// if Crawls ( un ) then
29392: LD_VAR 0 2
29396: PPUSH
29397: CALL_OW 318
29401: IFFALSE 29412
// ComWalk ( un ) ;
29403: LD_VAR 0 2
29407: PPUSH
29408: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
29412: LD_VAR 0 2
29416: PPUSH
29417: LD_INT 9
29419: PPUSH
29420: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
29424: LD_INT 28
29426: PPUSH
29427: LD_OWVAR 2
29431: PPUSH
29432: LD_INT 2
29434: PPUSH
29435: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
29439: LD_INT 29
29441: PPUSH
29442: LD_OWVAR 2
29446: PPUSH
29447: LD_INT 2
29449: PPUSH
29450: CALL_OW 322
// end ;
29454: PPOPN 3
29456: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
29457: LD_EXP 65
29461: PUSH
29462: LD_EXP 108
29466: AND
29467: IFFALSE 29578
29469: GO 29471
29471: DISABLE
29472: LD_INT 0
29474: PPUSH
29475: PPUSH
29476: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29477: LD_ADDR_VAR 0 3
29481: PUSH
29482: LD_INT 22
29484: PUSH
29485: LD_OWVAR 2
29489: PUSH
29490: EMPTY
29491: LIST
29492: LIST
29493: PUSH
29494: LD_INT 25
29496: PUSH
29497: LD_INT 1
29499: PUSH
29500: EMPTY
29501: LIST
29502: LIST
29503: PUSH
29504: EMPTY
29505: LIST
29506: LIST
29507: PPUSH
29508: CALL_OW 69
29512: ST_TO_ADDR
// if not tmp then
29513: LD_VAR 0 3
29517: NOT
29518: IFFALSE 29522
// exit ;
29520: GO 29578
// un := tmp [ rand ( 1 , tmp ) ] ;
29522: LD_ADDR_VAR 0 2
29526: PUSH
29527: LD_VAR 0 3
29531: PUSH
29532: LD_INT 1
29534: PPUSH
29535: LD_VAR 0 3
29539: PPUSH
29540: CALL_OW 12
29544: ARRAY
29545: ST_TO_ADDR
// if Crawls ( un ) then
29546: LD_VAR 0 2
29550: PPUSH
29551: CALL_OW 318
29555: IFFALSE 29566
// ComWalk ( un ) ;
29557: LD_VAR 0 2
29561: PPUSH
29562: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29566: LD_VAR 0 2
29570: PPUSH
29571: LD_INT 8
29573: PPUSH
29574: CALL_OW 336
// end ;
29578: PPOPN 3
29580: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
29581: LD_EXP 65
29585: PUSH
29586: LD_EXP 109
29590: AND
29591: IFFALSE 29735
29593: GO 29595
29595: DISABLE
29596: LD_INT 0
29598: PPUSH
29599: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
29600: LD_ADDR_VAR 0 2
29604: PUSH
29605: LD_INT 22
29607: PUSH
29608: LD_OWVAR 2
29612: PUSH
29613: EMPTY
29614: LIST
29615: LIST
29616: PUSH
29617: LD_INT 21
29619: PUSH
29620: LD_INT 2
29622: PUSH
29623: EMPTY
29624: LIST
29625: LIST
29626: PUSH
29627: LD_INT 2
29629: PUSH
29630: LD_INT 34
29632: PUSH
29633: LD_INT 12
29635: PUSH
29636: EMPTY
29637: LIST
29638: LIST
29639: PUSH
29640: LD_INT 34
29642: PUSH
29643: LD_INT 51
29645: PUSH
29646: EMPTY
29647: LIST
29648: LIST
29649: PUSH
29650: LD_INT 34
29652: PUSH
29653: LD_INT 32
29655: PUSH
29656: EMPTY
29657: LIST
29658: LIST
29659: PUSH
29660: EMPTY
29661: LIST
29662: LIST
29663: LIST
29664: LIST
29665: PUSH
29666: EMPTY
29667: LIST
29668: LIST
29669: LIST
29670: PPUSH
29671: CALL_OW 69
29675: ST_TO_ADDR
// if not tmp then
29676: LD_VAR 0 2
29680: NOT
29681: IFFALSE 29685
// exit ;
29683: GO 29735
// for i in tmp do
29685: LD_ADDR_VAR 0 1
29689: PUSH
29690: LD_VAR 0 2
29694: PUSH
29695: FOR_IN
29696: IFFALSE 29733
// if GetCargo ( i , mat_artifact ) = 0 then
29698: LD_VAR 0 1
29702: PPUSH
29703: LD_INT 4
29705: PPUSH
29706: CALL_OW 289
29710: PUSH
29711: LD_INT 0
29713: EQUAL
29714: IFFALSE 29731
// SetCargo ( i , mat_siberit , 100 ) ;
29716: LD_VAR 0 1
29720: PPUSH
29721: LD_INT 3
29723: PPUSH
29724: LD_INT 100
29726: PPUSH
29727: CALL_OW 290
29731: GO 29695
29733: POP
29734: POP
// end ;
29735: PPOPN 2
29737: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
29738: LD_EXP 65
29742: PUSH
29743: LD_EXP 110
29747: AND
29748: IFFALSE 29931
29750: GO 29752
29752: DISABLE
29753: LD_INT 0
29755: PPUSH
29756: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29757: LD_ADDR_VAR 0 2
29761: PUSH
29762: LD_INT 22
29764: PUSH
29765: LD_OWVAR 2
29769: PUSH
29770: EMPTY
29771: LIST
29772: LIST
29773: PPUSH
29774: CALL_OW 69
29778: ST_TO_ADDR
// if not tmp then
29779: LD_VAR 0 2
29783: NOT
29784: IFFALSE 29788
// exit ;
29786: GO 29931
// for i := 1 to 2 do
29788: LD_ADDR_VAR 0 1
29792: PUSH
29793: DOUBLE
29794: LD_INT 1
29796: DEC
29797: ST_TO_ADDR
29798: LD_INT 2
29800: PUSH
29801: FOR_TO
29802: IFFALSE 29929
// begin uc_side := your_side ;
29804: LD_ADDR_OWVAR 20
29808: PUSH
29809: LD_OWVAR 2
29813: ST_TO_ADDR
// uc_nation := nation_american ;
29814: LD_ADDR_OWVAR 21
29818: PUSH
29819: LD_INT 1
29821: ST_TO_ADDR
// vc_chassis := us_morphling ;
29822: LD_ADDR_OWVAR 37
29826: PUSH
29827: LD_INT 5
29829: ST_TO_ADDR
// vc_engine := engine_siberite ;
29830: LD_ADDR_OWVAR 39
29834: PUSH
29835: LD_INT 3
29837: ST_TO_ADDR
// vc_control := control_computer ;
29838: LD_ADDR_OWVAR 38
29842: PUSH
29843: LD_INT 3
29845: ST_TO_ADDR
// vc_weapon := us_double_laser ;
29846: LD_ADDR_OWVAR 40
29850: PUSH
29851: LD_INT 10
29853: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
29854: LD_VAR 0 2
29858: PUSH
29859: LD_INT 1
29861: ARRAY
29862: PPUSH
29863: CALL_OW 310
29867: NOT
29868: IFFALSE 29915
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
29870: CALL_OW 45
29874: PPUSH
29875: LD_VAR 0 2
29879: PUSH
29880: LD_INT 1
29882: ARRAY
29883: PPUSH
29884: CALL_OW 250
29888: PPUSH
29889: LD_VAR 0 2
29893: PUSH
29894: LD_INT 1
29896: ARRAY
29897: PPUSH
29898: CALL_OW 251
29902: PPUSH
29903: LD_INT 12
29905: PPUSH
29906: LD_INT 1
29908: PPUSH
29909: CALL_OW 50
29913: GO 29927
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
29915: CALL_OW 45
29919: PPUSH
29920: LD_INT 1
29922: PPUSH
29923: CALL_OW 51
// end ;
29927: GO 29801
29929: POP
29930: POP
// end ;
29931: PPOPN 2
29933: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
29934: LD_EXP 65
29938: PUSH
29939: LD_EXP 111
29943: AND
29944: IFFALSE 30166
29946: GO 29948
29948: DISABLE
29949: LD_INT 0
29951: PPUSH
29952: PPUSH
29953: PPUSH
29954: PPUSH
29955: PPUSH
29956: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29957: LD_ADDR_VAR 0 6
29961: PUSH
29962: LD_INT 22
29964: PUSH
29965: LD_OWVAR 2
29969: PUSH
29970: EMPTY
29971: LIST
29972: LIST
29973: PUSH
29974: LD_INT 21
29976: PUSH
29977: LD_INT 1
29979: PUSH
29980: EMPTY
29981: LIST
29982: LIST
29983: PUSH
29984: LD_INT 3
29986: PUSH
29987: LD_INT 23
29989: PUSH
29990: LD_INT 0
29992: PUSH
29993: EMPTY
29994: LIST
29995: LIST
29996: PUSH
29997: EMPTY
29998: LIST
29999: LIST
30000: PUSH
30001: EMPTY
30002: LIST
30003: LIST
30004: LIST
30005: PPUSH
30006: CALL_OW 69
30010: ST_TO_ADDR
// if not tmp then
30011: LD_VAR 0 6
30015: NOT
30016: IFFALSE 30020
// exit ;
30018: GO 30166
// s1 := rand ( 1 , 4 ) ;
30020: LD_ADDR_VAR 0 2
30024: PUSH
30025: LD_INT 1
30027: PPUSH
30028: LD_INT 4
30030: PPUSH
30031: CALL_OW 12
30035: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
30036: LD_ADDR_VAR 0 4
30040: PUSH
30041: LD_VAR 0 6
30045: PUSH
30046: LD_INT 1
30048: ARRAY
30049: PPUSH
30050: LD_VAR 0 2
30054: PPUSH
30055: CALL_OW 259
30059: ST_TO_ADDR
// if s1 = 1 then
30060: LD_VAR 0 2
30064: PUSH
30065: LD_INT 1
30067: EQUAL
30068: IFFALSE 30088
// s2 := rand ( 2 , 4 ) else
30070: LD_ADDR_VAR 0 3
30074: PUSH
30075: LD_INT 2
30077: PPUSH
30078: LD_INT 4
30080: PPUSH
30081: CALL_OW 12
30085: ST_TO_ADDR
30086: GO 30096
// s2 := 1 ;
30088: LD_ADDR_VAR 0 3
30092: PUSH
30093: LD_INT 1
30095: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
30096: LD_ADDR_VAR 0 5
30100: PUSH
30101: LD_VAR 0 6
30105: PUSH
30106: LD_INT 1
30108: ARRAY
30109: PPUSH
30110: LD_VAR 0 3
30114: PPUSH
30115: CALL_OW 259
30119: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
30120: LD_VAR 0 6
30124: PUSH
30125: LD_INT 1
30127: ARRAY
30128: PPUSH
30129: LD_VAR 0 2
30133: PPUSH
30134: LD_VAR 0 5
30138: PPUSH
30139: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
30143: LD_VAR 0 6
30147: PUSH
30148: LD_INT 1
30150: ARRAY
30151: PPUSH
30152: LD_VAR 0 3
30156: PPUSH
30157: LD_VAR 0 4
30161: PPUSH
30162: CALL_OW 237
// end ;
30166: PPOPN 6
30168: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
30169: LD_EXP 65
30173: PUSH
30174: LD_EXP 112
30178: AND
30179: IFFALSE 30258
30181: GO 30183
30183: DISABLE
30184: LD_INT 0
30186: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
30187: LD_ADDR_VAR 0 1
30191: PUSH
30192: LD_INT 22
30194: PUSH
30195: LD_OWVAR 2
30199: PUSH
30200: EMPTY
30201: LIST
30202: LIST
30203: PUSH
30204: LD_INT 30
30206: PUSH
30207: LD_INT 3
30209: PUSH
30210: EMPTY
30211: LIST
30212: LIST
30213: PUSH
30214: EMPTY
30215: LIST
30216: LIST
30217: PPUSH
30218: CALL_OW 69
30222: ST_TO_ADDR
// if not tmp then
30223: LD_VAR 0 1
30227: NOT
30228: IFFALSE 30232
// exit ;
30230: GO 30258
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30232: LD_VAR 0 1
30236: PUSH
30237: LD_INT 1
30239: PPUSH
30240: LD_VAR 0 1
30244: PPUSH
30245: CALL_OW 12
30249: ARRAY
30250: PPUSH
30251: LD_INT 1
30253: PPUSH
30254: CALL_OW 234
// end ;
30258: PPOPN 1
30260: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
30261: LD_EXP 65
30265: PUSH
30266: LD_EXP 113
30270: AND
30271: IFFALSE 30383
30273: GO 30275
30275: DISABLE
30276: LD_INT 0
30278: PPUSH
30279: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
30280: LD_ADDR_VAR 0 2
30284: PUSH
30285: LD_INT 22
30287: PUSH
30288: LD_OWVAR 2
30292: PUSH
30293: EMPTY
30294: LIST
30295: LIST
30296: PUSH
30297: LD_INT 2
30299: PUSH
30300: LD_INT 30
30302: PUSH
30303: LD_INT 27
30305: PUSH
30306: EMPTY
30307: LIST
30308: LIST
30309: PUSH
30310: LD_INT 30
30312: PUSH
30313: LD_INT 26
30315: PUSH
30316: EMPTY
30317: LIST
30318: LIST
30319: PUSH
30320: LD_INT 30
30322: PUSH
30323: LD_INT 28
30325: PUSH
30326: EMPTY
30327: LIST
30328: LIST
30329: PUSH
30330: EMPTY
30331: LIST
30332: LIST
30333: LIST
30334: LIST
30335: PUSH
30336: EMPTY
30337: LIST
30338: LIST
30339: PPUSH
30340: CALL_OW 69
30344: ST_TO_ADDR
// if not tmp then
30345: LD_VAR 0 2
30349: NOT
30350: IFFALSE 30354
// exit ;
30352: GO 30383
// for i in tmp do
30354: LD_ADDR_VAR 0 1
30358: PUSH
30359: LD_VAR 0 2
30363: PUSH
30364: FOR_IN
30365: IFFALSE 30381
// SetLives ( i , 1 ) ;
30367: LD_VAR 0 1
30371: PPUSH
30372: LD_INT 1
30374: PPUSH
30375: CALL_OW 234
30379: GO 30364
30381: POP
30382: POP
// end ;
30383: PPOPN 2
30385: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
30386: LD_EXP 65
30390: PUSH
30391: LD_EXP 114
30395: AND
30396: IFFALSE 30683
30398: GO 30400
30400: DISABLE
30401: LD_INT 0
30403: PPUSH
30404: PPUSH
30405: PPUSH
// begin i := rand ( 1 , 7 ) ;
30406: LD_ADDR_VAR 0 1
30410: PUSH
30411: LD_INT 1
30413: PPUSH
30414: LD_INT 7
30416: PPUSH
30417: CALL_OW 12
30421: ST_TO_ADDR
// case i of 1 :
30422: LD_VAR 0 1
30426: PUSH
30427: LD_INT 1
30429: DOUBLE
30430: EQUAL
30431: IFTRUE 30435
30433: GO 30445
30435: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
30436: LD_STRING earthquake(getX(game), 0, 32)
30438: PPUSH
30439: CALL_OW 559
30443: GO 30683
30445: LD_INT 2
30447: DOUBLE
30448: EQUAL
30449: IFTRUE 30453
30451: GO 30467
30453: POP
// begin ToLua ( displayStucuk(); ) ;
30454: LD_STRING displayStucuk();
30456: PPUSH
30457: CALL_OW 559
// ResetFog ;
30461: CALL_OW 335
// end ; 3 :
30465: GO 30683
30467: LD_INT 3
30469: DOUBLE
30470: EQUAL
30471: IFTRUE 30475
30473: GO 30579
30475: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30476: LD_ADDR_VAR 0 2
30480: PUSH
30481: LD_INT 22
30483: PUSH
30484: LD_OWVAR 2
30488: PUSH
30489: EMPTY
30490: LIST
30491: LIST
30492: PUSH
30493: LD_INT 25
30495: PUSH
30496: LD_INT 1
30498: PUSH
30499: EMPTY
30500: LIST
30501: LIST
30502: PUSH
30503: EMPTY
30504: LIST
30505: LIST
30506: PPUSH
30507: CALL_OW 69
30511: ST_TO_ADDR
// if not tmp then
30512: LD_VAR 0 2
30516: NOT
30517: IFFALSE 30521
// exit ;
30519: GO 30683
// un := tmp [ rand ( 1 , tmp ) ] ;
30521: LD_ADDR_VAR 0 3
30525: PUSH
30526: LD_VAR 0 2
30530: PUSH
30531: LD_INT 1
30533: PPUSH
30534: LD_VAR 0 2
30538: PPUSH
30539: CALL_OW 12
30543: ARRAY
30544: ST_TO_ADDR
// if Crawls ( un ) then
30545: LD_VAR 0 3
30549: PPUSH
30550: CALL_OW 318
30554: IFFALSE 30565
// ComWalk ( un ) ;
30556: LD_VAR 0 3
30560: PPUSH
30561: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30565: LD_VAR 0 3
30569: PPUSH
30570: LD_INT 8
30572: PPUSH
30573: CALL_OW 336
// end ; 4 :
30577: GO 30683
30579: LD_INT 4
30581: DOUBLE
30582: EQUAL
30583: IFTRUE 30587
30585: GO 30661
30587: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
30588: LD_ADDR_VAR 0 2
30592: PUSH
30593: LD_INT 22
30595: PUSH
30596: LD_OWVAR 2
30600: PUSH
30601: EMPTY
30602: LIST
30603: LIST
30604: PUSH
30605: LD_INT 30
30607: PUSH
30608: LD_INT 29
30610: PUSH
30611: EMPTY
30612: LIST
30613: LIST
30614: PUSH
30615: EMPTY
30616: LIST
30617: LIST
30618: PPUSH
30619: CALL_OW 69
30623: ST_TO_ADDR
// if not tmp then
30624: LD_VAR 0 2
30628: NOT
30629: IFFALSE 30633
// exit ;
30631: GO 30683
// CenterNowOnUnits ( tmp [ 1 ] ) ;
30633: LD_VAR 0 2
30637: PUSH
30638: LD_INT 1
30640: ARRAY
30641: PPUSH
30642: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
30646: LD_VAR 0 2
30650: PUSH
30651: LD_INT 1
30653: ARRAY
30654: PPUSH
30655: CALL_OW 65
// end ; 5 .. 7 :
30659: GO 30683
30661: LD_INT 5
30663: DOUBLE
30664: GREATEREQUAL
30665: IFFALSE 30673
30667: LD_INT 7
30669: DOUBLE
30670: LESSEQUAL
30671: IFTRUE 30675
30673: GO 30682
30675: POP
// StreamSibBomb ; end ;
30676: CALL 26920 0 0
30680: GO 30683
30682: POP
// end ;
30683: PPOPN 3
30685: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
30686: LD_EXP 65
30690: PUSH
30691: LD_EXP 115
30695: AND
30696: IFFALSE 30852
30698: GO 30700
30700: DISABLE
30701: LD_INT 0
30703: PPUSH
30704: PPUSH
30705: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
30706: LD_ADDR_VAR 0 2
30710: PUSH
30711: LD_INT 81
30713: PUSH
30714: LD_OWVAR 2
30718: PUSH
30719: EMPTY
30720: LIST
30721: LIST
30722: PUSH
30723: LD_INT 2
30725: PUSH
30726: LD_INT 21
30728: PUSH
30729: LD_INT 1
30731: PUSH
30732: EMPTY
30733: LIST
30734: LIST
30735: PUSH
30736: LD_INT 21
30738: PUSH
30739: LD_INT 2
30741: PUSH
30742: EMPTY
30743: LIST
30744: LIST
30745: PUSH
30746: EMPTY
30747: LIST
30748: LIST
30749: LIST
30750: PUSH
30751: EMPTY
30752: LIST
30753: LIST
30754: PPUSH
30755: CALL_OW 69
30759: ST_TO_ADDR
// if not tmp then
30760: LD_VAR 0 2
30764: NOT
30765: IFFALSE 30769
// exit ;
30767: GO 30852
// p := 0 ;
30769: LD_ADDR_VAR 0 3
30773: PUSH
30774: LD_INT 0
30776: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30777: LD_INT 35
30779: PPUSH
30780: CALL_OW 67
// p := p + 1 ;
30784: LD_ADDR_VAR 0 3
30788: PUSH
30789: LD_VAR 0 3
30793: PUSH
30794: LD_INT 1
30796: PLUS
30797: ST_TO_ADDR
// for i in tmp do
30798: LD_ADDR_VAR 0 1
30802: PUSH
30803: LD_VAR 0 2
30807: PUSH
30808: FOR_IN
30809: IFFALSE 30840
// if GetLives ( i ) < 1000 then
30811: LD_VAR 0 1
30815: PPUSH
30816: CALL_OW 256
30820: PUSH
30821: LD_INT 1000
30823: LESS
30824: IFFALSE 30838
// SetLives ( i , 1000 ) ;
30826: LD_VAR 0 1
30830: PPUSH
30831: LD_INT 1000
30833: PPUSH
30834: CALL_OW 234
30838: GO 30808
30840: POP
30841: POP
// until p > 20 ;
30842: LD_VAR 0 3
30846: PUSH
30847: LD_INT 20
30849: GREATER
30850: IFFALSE 30777
// end ;
30852: PPOPN 3
30854: END
// every 0 0$1 trigger StreamModeActive and sTime do
30855: LD_EXP 65
30859: PUSH
30860: LD_EXP 116
30864: AND
30865: IFFALSE 30900
30867: GO 30869
30869: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
30870: LD_INT 28
30872: PPUSH
30873: LD_OWVAR 2
30877: PPUSH
30878: LD_INT 2
30880: PPUSH
30881: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
30885: LD_INT 30
30887: PPUSH
30888: LD_OWVAR 2
30892: PPUSH
30893: LD_INT 2
30895: PPUSH
30896: CALL_OW 322
// end ;
30900: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
30901: LD_EXP 65
30905: PUSH
30906: LD_EXP 117
30910: AND
30911: IFFALSE 31032
30913: GO 30915
30915: DISABLE
30916: LD_INT 0
30918: PPUSH
30919: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30920: LD_ADDR_VAR 0 2
30924: PUSH
30925: LD_INT 22
30927: PUSH
30928: LD_OWVAR 2
30932: PUSH
30933: EMPTY
30934: LIST
30935: LIST
30936: PUSH
30937: LD_INT 21
30939: PUSH
30940: LD_INT 1
30942: PUSH
30943: EMPTY
30944: LIST
30945: LIST
30946: PUSH
30947: LD_INT 3
30949: PUSH
30950: LD_INT 23
30952: PUSH
30953: LD_INT 0
30955: PUSH
30956: EMPTY
30957: LIST
30958: LIST
30959: PUSH
30960: EMPTY
30961: LIST
30962: LIST
30963: PUSH
30964: EMPTY
30965: LIST
30966: LIST
30967: LIST
30968: PPUSH
30969: CALL_OW 69
30973: ST_TO_ADDR
// if not tmp then
30974: LD_VAR 0 2
30978: NOT
30979: IFFALSE 30983
// exit ;
30981: GO 31032
// for i in tmp do
30983: LD_ADDR_VAR 0 1
30987: PUSH
30988: LD_VAR 0 2
30992: PUSH
30993: FOR_IN
30994: IFFALSE 31030
// begin if Crawls ( i ) then
30996: LD_VAR 0 1
31000: PPUSH
31001: CALL_OW 318
31005: IFFALSE 31016
// ComWalk ( i ) ;
31007: LD_VAR 0 1
31011: PPUSH
31012: CALL_OW 138
// SetClass ( i , 2 ) ;
31016: LD_VAR 0 1
31020: PPUSH
31021: LD_INT 2
31023: PPUSH
31024: CALL_OW 336
// end ;
31028: GO 30993
31030: POP
31031: POP
// end ;
31032: PPOPN 2
31034: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
31035: LD_EXP 65
31039: PUSH
31040: LD_EXP 118
31044: AND
31045: IFFALSE 31333
31047: GO 31049
31049: DISABLE
31050: LD_INT 0
31052: PPUSH
31053: PPUSH
31054: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
31055: LD_OWVAR 2
31059: PPUSH
31060: LD_INT 9
31062: PPUSH
31063: LD_INT 1
31065: PPUSH
31066: LD_INT 1
31068: PPUSH
31069: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
31073: LD_INT 9
31075: PPUSH
31076: LD_OWVAR 2
31080: PPUSH
31081: CALL_OW 343
// uc_side := 9 ;
31085: LD_ADDR_OWVAR 20
31089: PUSH
31090: LD_INT 9
31092: ST_TO_ADDR
// uc_nation := 2 ;
31093: LD_ADDR_OWVAR 21
31097: PUSH
31098: LD_INT 2
31100: ST_TO_ADDR
// hc_name := Dark Warrior ;
31101: LD_ADDR_OWVAR 26
31105: PUSH
31106: LD_STRING Dark Warrior
31108: ST_TO_ADDR
// hc_gallery :=  ;
31109: LD_ADDR_OWVAR 33
31113: PUSH
31114: LD_STRING 
31116: ST_TO_ADDR
// hc_noskilllimit := true ;
31117: LD_ADDR_OWVAR 76
31121: PUSH
31122: LD_INT 1
31124: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
31125: LD_ADDR_OWVAR 31
31129: PUSH
31130: LD_INT 30
31132: PUSH
31133: LD_INT 30
31135: PUSH
31136: LD_INT 30
31138: PUSH
31139: LD_INT 30
31141: PUSH
31142: EMPTY
31143: LIST
31144: LIST
31145: LIST
31146: LIST
31147: ST_TO_ADDR
// un := CreateHuman ;
31148: LD_ADDR_VAR 0 3
31152: PUSH
31153: CALL_OW 44
31157: ST_TO_ADDR
// hc_noskilllimit := false ;
31158: LD_ADDR_OWVAR 76
31162: PUSH
31163: LD_INT 0
31165: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
31166: LD_VAR 0 3
31170: PPUSH
31171: LD_INT 1
31173: PPUSH
31174: CALL_OW 51
// ToLua ( playRanger() ) ;
31178: LD_STRING playRanger()
31180: PPUSH
31181: CALL_OW 559
// p := 0 ;
31185: LD_ADDR_VAR 0 2
31189: PUSH
31190: LD_INT 0
31192: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31193: LD_INT 35
31195: PPUSH
31196: CALL_OW 67
// p := p + 1 ;
31200: LD_ADDR_VAR 0 2
31204: PUSH
31205: LD_VAR 0 2
31209: PUSH
31210: LD_INT 1
31212: PLUS
31213: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
31214: LD_VAR 0 3
31218: PPUSH
31219: CALL_OW 256
31223: PUSH
31224: LD_INT 1000
31226: LESS
31227: IFFALSE 31241
// SetLives ( un , 1000 ) ;
31229: LD_VAR 0 3
31233: PPUSH
31234: LD_INT 1000
31236: PPUSH
31237: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
31241: LD_VAR 0 3
31245: PPUSH
31246: LD_INT 81
31248: PUSH
31249: LD_OWVAR 2
31253: PUSH
31254: EMPTY
31255: LIST
31256: LIST
31257: PUSH
31258: LD_INT 91
31260: PUSH
31261: LD_VAR 0 3
31265: PUSH
31266: LD_INT 30
31268: PUSH
31269: EMPTY
31270: LIST
31271: LIST
31272: LIST
31273: PUSH
31274: EMPTY
31275: LIST
31276: LIST
31277: PPUSH
31278: CALL_OW 69
31282: PPUSH
31283: LD_VAR 0 3
31287: PPUSH
31288: CALL_OW 74
31292: PPUSH
31293: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
31297: LD_VAR 0 2
31301: PUSH
31302: LD_INT 80
31304: GREATER
31305: PUSH
31306: LD_VAR 0 3
31310: PPUSH
31311: CALL_OW 301
31315: OR
31316: IFFALSE 31193
// if un then
31318: LD_VAR 0 3
31322: IFFALSE 31333
// RemoveUnit ( un ) ;
31324: LD_VAR 0 3
31328: PPUSH
31329: CALL_OW 64
// end ;
31333: PPOPN 3
31335: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
31336: LD_EXP 119
31340: IFFALSE 31456
31342: GO 31344
31344: DISABLE
31345: LD_INT 0
31347: PPUSH
31348: PPUSH
31349: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
31350: LD_ADDR_VAR 0 2
31354: PUSH
31355: LD_INT 81
31357: PUSH
31358: LD_OWVAR 2
31362: PUSH
31363: EMPTY
31364: LIST
31365: LIST
31366: PUSH
31367: LD_INT 21
31369: PUSH
31370: LD_INT 1
31372: PUSH
31373: EMPTY
31374: LIST
31375: LIST
31376: PUSH
31377: EMPTY
31378: LIST
31379: LIST
31380: PPUSH
31381: CALL_OW 69
31385: ST_TO_ADDR
// ToLua ( playComputer() ) ;
31386: LD_STRING playComputer()
31388: PPUSH
31389: CALL_OW 559
// if not tmp then
31393: LD_VAR 0 2
31397: NOT
31398: IFFALSE 31402
// exit ;
31400: GO 31456
// for i in tmp do
31402: LD_ADDR_VAR 0 1
31406: PUSH
31407: LD_VAR 0 2
31411: PUSH
31412: FOR_IN
31413: IFFALSE 31454
// for j := 1 to 4 do
31415: LD_ADDR_VAR 0 3
31419: PUSH
31420: DOUBLE
31421: LD_INT 1
31423: DEC
31424: ST_TO_ADDR
31425: LD_INT 4
31427: PUSH
31428: FOR_TO
31429: IFFALSE 31450
// SetSkill ( i , j , 10 ) ;
31431: LD_VAR 0 1
31435: PPUSH
31436: LD_VAR 0 3
31440: PPUSH
31441: LD_INT 10
31443: PPUSH
31444: CALL_OW 237
31448: GO 31428
31450: POP
31451: POP
31452: GO 31412
31454: POP
31455: POP
// end ;
31456: PPOPN 3
31458: END
// every 0 0$1 trigger s30 do var i , tmp ;
31459: LD_EXP 120
31463: IFFALSE 31532
31465: GO 31467
31467: DISABLE
31468: LD_INT 0
31470: PPUSH
31471: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31472: LD_ADDR_VAR 0 2
31476: PUSH
31477: LD_INT 22
31479: PUSH
31480: LD_OWVAR 2
31484: PUSH
31485: EMPTY
31486: LIST
31487: LIST
31488: PPUSH
31489: CALL_OW 69
31493: ST_TO_ADDR
// if not tmp then
31494: LD_VAR 0 2
31498: NOT
31499: IFFALSE 31503
// exit ;
31501: GO 31532
// for i in tmp do
31503: LD_ADDR_VAR 0 1
31507: PUSH
31508: LD_VAR 0 2
31512: PUSH
31513: FOR_IN
31514: IFFALSE 31530
// SetLives ( i , 300 ) ;
31516: LD_VAR 0 1
31520: PPUSH
31521: LD_INT 300
31523: PPUSH
31524: CALL_OW 234
31528: GO 31513
31530: POP
31531: POP
// end ;
31532: PPOPN 2
31534: END
// every 0 0$1 trigger s60 do var i , tmp ;
31535: LD_EXP 121
31539: IFFALSE 31608
31541: GO 31543
31543: DISABLE
31544: LD_INT 0
31546: PPUSH
31547: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31548: LD_ADDR_VAR 0 2
31552: PUSH
31553: LD_INT 22
31555: PUSH
31556: LD_OWVAR 2
31560: PUSH
31561: EMPTY
31562: LIST
31563: LIST
31564: PPUSH
31565: CALL_OW 69
31569: ST_TO_ADDR
// if not tmp then
31570: LD_VAR 0 2
31574: NOT
31575: IFFALSE 31579
// exit ;
31577: GO 31608
// for i in tmp do
31579: LD_ADDR_VAR 0 1
31583: PUSH
31584: LD_VAR 0 2
31588: PUSH
31589: FOR_IN
31590: IFFALSE 31606
// SetLives ( i , 600 ) ;
31592: LD_VAR 0 1
31596: PPUSH
31597: LD_INT 600
31599: PPUSH
31600: CALL_OW 234
31604: GO 31589
31606: POP
31607: POP
// end ;
31608: PPOPN 2
31610: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
31611: LD_INT 0
31613: PPUSH
// case cmd of 301 :
31614: LD_VAR 0 1
31618: PUSH
31619: LD_INT 301
31621: DOUBLE
31622: EQUAL
31623: IFTRUE 31627
31625: GO 31659
31627: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
31628: LD_VAR 0 6
31632: PPUSH
31633: LD_VAR 0 7
31637: PPUSH
31638: LD_VAR 0 8
31642: PPUSH
31643: LD_VAR 0 4
31647: PPUSH
31648: LD_VAR 0 5
31652: PPUSH
31653: CALL 32860 0 5
31657: GO 31780
31659: LD_INT 302
31661: DOUBLE
31662: EQUAL
31663: IFTRUE 31667
31665: GO 31704
31667: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
31668: LD_VAR 0 6
31672: PPUSH
31673: LD_VAR 0 7
31677: PPUSH
31678: LD_VAR 0 8
31682: PPUSH
31683: LD_VAR 0 9
31687: PPUSH
31688: LD_VAR 0 4
31692: PPUSH
31693: LD_VAR 0 5
31697: PPUSH
31698: CALL 32951 0 6
31702: GO 31780
31704: LD_INT 303
31706: DOUBLE
31707: EQUAL
31708: IFTRUE 31712
31710: GO 31749
31712: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
31713: LD_VAR 0 6
31717: PPUSH
31718: LD_VAR 0 7
31722: PPUSH
31723: LD_VAR 0 8
31727: PPUSH
31728: LD_VAR 0 9
31732: PPUSH
31733: LD_VAR 0 4
31737: PPUSH
31738: LD_VAR 0 5
31742: PPUSH
31743: CALL 31785 0 6
31747: GO 31780
31749: LD_INT 304
31751: DOUBLE
31752: EQUAL
31753: IFTRUE 31757
31755: GO 31779
31757: POP
// hHackTeleport ( unit , x , y ) ; end ;
31758: LD_VAR 0 2
31762: PPUSH
31763: LD_VAR 0 4
31767: PPUSH
31768: LD_VAR 0 5
31772: PPUSH
31773: CALL 33544 0 3
31777: GO 31780
31779: POP
// end ;
31780: LD_VAR 0 12
31784: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
31785: LD_INT 0
31787: PPUSH
31788: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
31789: LD_VAR 0 1
31793: PUSH
31794: LD_INT 1
31796: LESS
31797: PUSH
31798: LD_VAR 0 1
31802: PUSH
31803: LD_INT 3
31805: GREATER
31806: OR
31807: PUSH
31808: LD_VAR 0 5
31812: PPUSH
31813: LD_VAR 0 6
31817: PPUSH
31818: CALL_OW 428
31822: OR
31823: IFFALSE 31827
// exit ;
31825: GO 32547
// uc_side := your_side ;
31827: LD_ADDR_OWVAR 20
31831: PUSH
31832: LD_OWVAR 2
31836: ST_TO_ADDR
// uc_nation := nation ;
31837: LD_ADDR_OWVAR 21
31841: PUSH
31842: LD_VAR 0 1
31846: ST_TO_ADDR
// bc_level = 1 ;
31847: LD_ADDR_OWVAR 43
31851: PUSH
31852: LD_INT 1
31854: ST_TO_ADDR
// case btype of 1 :
31855: LD_VAR 0 2
31859: PUSH
31860: LD_INT 1
31862: DOUBLE
31863: EQUAL
31864: IFTRUE 31868
31866: GO 31879
31868: POP
// bc_type := b_depot ; 2 :
31869: LD_ADDR_OWVAR 42
31873: PUSH
31874: LD_INT 0
31876: ST_TO_ADDR
31877: GO 32491
31879: LD_INT 2
31881: DOUBLE
31882: EQUAL
31883: IFTRUE 31887
31885: GO 31898
31887: POP
// bc_type := b_warehouse ; 3 :
31888: LD_ADDR_OWVAR 42
31892: PUSH
31893: LD_INT 1
31895: ST_TO_ADDR
31896: GO 32491
31898: LD_INT 3
31900: DOUBLE
31901: EQUAL
31902: IFTRUE 31906
31904: GO 31917
31906: POP
// bc_type := b_lab ; 4 .. 9 :
31907: LD_ADDR_OWVAR 42
31911: PUSH
31912: LD_INT 6
31914: ST_TO_ADDR
31915: GO 32491
31917: LD_INT 4
31919: DOUBLE
31920: GREATEREQUAL
31921: IFFALSE 31929
31923: LD_INT 9
31925: DOUBLE
31926: LESSEQUAL
31927: IFTRUE 31931
31929: GO 31983
31931: POP
// begin bc_type := b_lab_half ;
31932: LD_ADDR_OWVAR 42
31936: PUSH
31937: LD_INT 7
31939: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
31940: LD_ADDR_OWVAR 44
31944: PUSH
31945: LD_INT 10
31947: PUSH
31948: LD_INT 11
31950: PUSH
31951: LD_INT 12
31953: PUSH
31954: LD_INT 15
31956: PUSH
31957: LD_INT 14
31959: PUSH
31960: LD_INT 13
31962: PUSH
31963: EMPTY
31964: LIST
31965: LIST
31966: LIST
31967: LIST
31968: LIST
31969: LIST
31970: PUSH
31971: LD_VAR 0 2
31975: PUSH
31976: LD_INT 3
31978: MINUS
31979: ARRAY
31980: ST_TO_ADDR
// end ; 10 .. 13 :
31981: GO 32491
31983: LD_INT 10
31985: DOUBLE
31986: GREATEREQUAL
31987: IFFALSE 31995
31989: LD_INT 13
31991: DOUBLE
31992: LESSEQUAL
31993: IFTRUE 31997
31995: GO 32074
31997: POP
// begin bc_type := b_lab_full ;
31998: LD_ADDR_OWVAR 42
32002: PUSH
32003: LD_INT 8
32005: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
32006: LD_ADDR_OWVAR 44
32010: PUSH
32011: LD_INT 10
32013: PUSH
32014: LD_INT 12
32016: PUSH
32017: LD_INT 14
32019: PUSH
32020: LD_INT 13
32022: PUSH
32023: EMPTY
32024: LIST
32025: LIST
32026: LIST
32027: LIST
32028: PUSH
32029: LD_VAR 0 2
32033: PUSH
32034: LD_INT 9
32036: MINUS
32037: ARRAY
32038: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
32039: LD_ADDR_OWVAR 45
32043: PUSH
32044: LD_INT 11
32046: PUSH
32047: LD_INT 15
32049: PUSH
32050: LD_INT 12
32052: PUSH
32053: LD_INT 15
32055: PUSH
32056: EMPTY
32057: LIST
32058: LIST
32059: LIST
32060: LIST
32061: PUSH
32062: LD_VAR 0 2
32066: PUSH
32067: LD_INT 9
32069: MINUS
32070: ARRAY
32071: ST_TO_ADDR
// end ; 14 :
32072: GO 32491
32074: LD_INT 14
32076: DOUBLE
32077: EQUAL
32078: IFTRUE 32082
32080: GO 32093
32082: POP
// bc_type := b_workshop ; 15 :
32083: LD_ADDR_OWVAR 42
32087: PUSH
32088: LD_INT 2
32090: ST_TO_ADDR
32091: GO 32491
32093: LD_INT 15
32095: DOUBLE
32096: EQUAL
32097: IFTRUE 32101
32099: GO 32112
32101: POP
// bc_type := b_factory ; 16 :
32102: LD_ADDR_OWVAR 42
32106: PUSH
32107: LD_INT 3
32109: ST_TO_ADDR
32110: GO 32491
32112: LD_INT 16
32114: DOUBLE
32115: EQUAL
32116: IFTRUE 32120
32118: GO 32131
32120: POP
// bc_type := b_ext_gun ; 17 :
32121: LD_ADDR_OWVAR 42
32125: PUSH
32126: LD_INT 17
32128: ST_TO_ADDR
32129: GO 32491
32131: LD_INT 17
32133: DOUBLE
32134: EQUAL
32135: IFTRUE 32139
32137: GO 32167
32139: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
32140: LD_ADDR_OWVAR 42
32144: PUSH
32145: LD_INT 19
32147: PUSH
32148: LD_INT 23
32150: PUSH
32151: LD_INT 19
32153: PUSH
32154: EMPTY
32155: LIST
32156: LIST
32157: LIST
32158: PUSH
32159: LD_VAR 0 1
32163: ARRAY
32164: ST_TO_ADDR
32165: GO 32491
32167: LD_INT 18
32169: DOUBLE
32170: EQUAL
32171: IFTRUE 32175
32173: GO 32186
32175: POP
// bc_type := b_ext_radar ; 19 :
32176: LD_ADDR_OWVAR 42
32180: PUSH
32181: LD_INT 20
32183: ST_TO_ADDR
32184: GO 32491
32186: LD_INT 19
32188: DOUBLE
32189: EQUAL
32190: IFTRUE 32194
32192: GO 32205
32194: POP
// bc_type := b_ext_radio ; 20 :
32195: LD_ADDR_OWVAR 42
32199: PUSH
32200: LD_INT 22
32202: ST_TO_ADDR
32203: GO 32491
32205: LD_INT 20
32207: DOUBLE
32208: EQUAL
32209: IFTRUE 32213
32211: GO 32224
32213: POP
// bc_type := b_ext_siberium ; 21 :
32214: LD_ADDR_OWVAR 42
32218: PUSH
32219: LD_INT 21
32221: ST_TO_ADDR
32222: GO 32491
32224: LD_INT 21
32226: DOUBLE
32227: EQUAL
32228: IFTRUE 32232
32230: GO 32243
32232: POP
// bc_type := b_ext_computer ; 22 :
32233: LD_ADDR_OWVAR 42
32237: PUSH
32238: LD_INT 24
32240: ST_TO_ADDR
32241: GO 32491
32243: LD_INT 22
32245: DOUBLE
32246: EQUAL
32247: IFTRUE 32251
32249: GO 32262
32251: POP
// bc_type := b_ext_track ; 23 :
32252: LD_ADDR_OWVAR 42
32256: PUSH
32257: LD_INT 16
32259: ST_TO_ADDR
32260: GO 32491
32262: LD_INT 23
32264: DOUBLE
32265: EQUAL
32266: IFTRUE 32270
32268: GO 32281
32270: POP
// bc_type := b_ext_laser ; 24 :
32271: LD_ADDR_OWVAR 42
32275: PUSH
32276: LD_INT 25
32278: ST_TO_ADDR
32279: GO 32491
32281: LD_INT 24
32283: DOUBLE
32284: EQUAL
32285: IFTRUE 32289
32287: GO 32300
32289: POP
// bc_type := b_control_tower ; 25 :
32290: LD_ADDR_OWVAR 42
32294: PUSH
32295: LD_INT 36
32297: ST_TO_ADDR
32298: GO 32491
32300: LD_INT 25
32302: DOUBLE
32303: EQUAL
32304: IFTRUE 32308
32306: GO 32319
32308: POP
// bc_type := b_breastwork ; 26 :
32309: LD_ADDR_OWVAR 42
32313: PUSH
32314: LD_INT 31
32316: ST_TO_ADDR
32317: GO 32491
32319: LD_INT 26
32321: DOUBLE
32322: EQUAL
32323: IFTRUE 32327
32325: GO 32338
32327: POP
// bc_type := b_bunker ; 27 :
32328: LD_ADDR_OWVAR 42
32332: PUSH
32333: LD_INT 32
32335: ST_TO_ADDR
32336: GO 32491
32338: LD_INT 27
32340: DOUBLE
32341: EQUAL
32342: IFTRUE 32346
32344: GO 32357
32346: POP
// bc_type := b_turret ; 28 :
32347: LD_ADDR_OWVAR 42
32351: PUSH
32352: LD_INT 33
32354: ST_TO_ADDR
32355: GO 32491
32357: LD_INT 28
32359: DOUBLE
32360: EQUAL
32361: IFTRUE 32365
32363: GO 32376
32365: POP
// bc_type := b_armoury ; 29 :
32366: LD_ADDR_OWVAR 42
32370: PUSH
32371: LD_INT 4
32373: ST_TO_ADDR
32374: GO 32491
32376: LD_INT 29
32378: DOUBLE
32379: EQUAL
32380: IFTRUE 32384
32382: GO 32395
32384: POP
// bc_type := b_barracks ; 30 :
32385: LD_ADDR_OWVAR 42
32389: PUSH
32390: LD_INT 5
32392: ST_TO_ADDR
32393: GO 32491
32395: LD_INT 30
32397: DOUBLE
32398: EQUAL
32399: IFTRUE 32403
32401: GO 32414
32403: POP
// bc_type := b_solar_power ; 31 :
32404: LD_ADDR_OWVAR 42
32408: PUSH
32409: LD_INT 27
32411: ST_TO_ADDR
32412: GO 32491
32414: LD_INT 31
32416: DOUBLE
32417: EQUAL
32418: IFTRUE 32422
32420: GO 32433
32422: POP
// bc_type := b_oil_power ; 32 :
32423: LD_ADDR_OWVAR 42
32427: PUSH
32428: LD_INT 26
32430: ST_TO_ADDR
32431: GO 32491
32433: LD_INT 32
32435: DOUBLE
32436: EQUAL
32437: IFTRUE 32441
32439: GO 32452
32441: POP
// bc_type := b_siberite_power ; 33 :
32442: LD_ADDR_OWVAR 42
32446: PUSH
32447: LD_INT 28
32449: ST_TO_ADDR
32450: GO 32491
32452: LD_INT 33
32454: DOUBLE
32455: EQUAL
32456: IFTRUE 32460
32458: GO 32471
32460: POP
// bc_type := b_oil_mine ; 34 :
32461: LD_ADDR_OWVAR 42
32465: PUSH
32466: LD_INT 29
32468: ST_TO_ADDR
32469: GO 32491
32471: LD_INT 34
32473: DOUBLE
32474: EQUAL
32475: IFTRUE 32479
32477: GO 32490
32479: POP
// bc_type := b_siberite_mine ; end ;
32480: LD_ADDR_OWVAR 42
32484: PUSH
32485: LD_INT 30
32487: ST_TO_ADDR
32488: GO 32491
32490: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
32491: LD_ADDR_VAR 0 8
32495: PUSH
32496: LD_VAR 0 5
32500: PPUSH
32501: LD_VAR 0 6
32505: PPUSH
32506: LD_VAR 0 3
32510: PPUSH
32511: CALL_OW 47
32515: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
32516: LD_OWVAR 42
32520: PUSH
32521: LD_INT 32
32523: PUSH
32524: LD_INT 33
32526: PUSH
32527: EMPTY
32528: LIST
32529: LIST
32530: IN
32531: IFFALSE 32547
// PlaceWeaponTurret ( b , weapon ) ;
32533: LD_VAR 0 8
32537: PPUSH
32538: LD_VAR 0 4
32542: PPUSH
32543: CALL_OW 431
// end ;
32547: LD_VAR 0 7
32551: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
32552: LD_INT 0
32554: PPUSH
32555: PPUSH
32556: PPUSH
32557: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32558: LD_ADDR_VAR 0 4
32562: PUSH
32563: LD_INT 22
32565: PUSH
32566: LD_OWVAR 2
32570: PUSH
32571: EMPTY
32572: LIST
32573: LIST
32574: PUSH
32575: LD_INT 2
32577: PUSH
32578: LD_INT 30
32580: PUSH
32581: LD_INT 0
32583: PUSH
32584: EMPTY
32585: LIST
32586: LIST
32587: PUSH
32588: LD_INT 30
32590: PUSH
32591: LD_INT 1
32593: PUSH
32594: EMPTY
32595: LIST
32596: LIST
32597: PUSH
32598: EMPTY
32599: LIST
32600: LIST
32601: LIST
32602: PUSH
32603: EMPTY
32604: LIST
32605: LIST
32606: PPUSH
32607: CALL_OW 69
32611: ST_TO_ADDR
// if not tmp then
32612: LD_VAR 0 4
32616: NOT
32617: IFFALSE 32621
// exit ;
32619: GO 32680
// for i in tmp do
32621: LD_ADDR_VAR 0 2
32625: PUSH
32626: LD_VAR 0 4
32630: PUSH
32631: FOR_IN
32632: IFFALSE 32678
// for j = 1 to 3 do
32634: LD_ADDR_VAR 0 3
32638: PUSH
32639: DOUBLE
32640: LD_INT 1
32642: DEC
32643: ST_TO_ADDR
32644: LD_INT 3
32646: PUSH
32647: FOR_TO
32648: IFFALSE 32674
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
32650: LD_VAR 0 2
32654: PPUSH
32655: CALL_OW 274
32659: PPUSH
32660: LD_VAR 0 3
32664: PPUSH
32665: LD_INT 99999
32667: PPUSH
32668: CALL_OW 277
32672: GO 32647
32674: POP
32675: POP
32676: GO 32631
32678: POP
32679: POP
// end ;
32680: LD_VAR 0 1
32684: RET
// export function hHackSetLevel10 ; var i , j ; begin
32685: LD_INT 0
32687: PPUSH
32688: PPUSH
32689: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32690: LD_ADDR_VAR 0 2
32694: PUSH
32695: LD_INT 21
32697: PUSH
32698: LD_INT 1
32700: PUSH
32701: EMPTY
32702: LIST
32703: LIST
32704: PPUSH
32705: CALL_OW 69
32709: PUSH
32710: FOR_IN
32711: IFFALSE 32763
// if IsSelected ( i ) then
32713: LD_VAR 0 2
32717: PPUSH
32718: CALL_OW 306
32722: IFFALSE 32761
// begin for j := 1 to 4 do
32724: LD_ADDR_VAR 0 3
32728: PUSH
32729: DOUBLE
32730: LD_INT 1
32732: DEC
32733: ST_TO_ADDR
32734: LD_INT 4
32736: PUSH
32737: FOR_TO
32738: IFFALSE 32759
// SetSkill ( i , j , 10 ) ;
32740: LD_VAR 0 2
32744: PPUSH
32745: LD_VAR 0 3
32749: PPUSH
32750: LD_INT 10
32752: PPUSH
32753: CALL_OW 237
32757: GO 32737
32759: POP
32760: POP
// end ;
32761: GO 32710
32763: POP
32764: POP
// end ;
32765: LD_VAR 0 1
32769: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
32770: LD_INT 0
32772: PPUSH
32773: PPUSH
32774: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
32775: LD_ADDR_VAR 0 2
32779: PUSH
32780: LD_INT 22
32782: PUSH
32783: LD_OWVAR 2
32787: PUSH
32788: EMPTY
32789: LIST
32790: LIST
32791: PUSH
32792: LD_INT 21
32794: PUSH
32795: LD_INT 1
32797: PUSH
32798: EMPTY
32799: LIST
32800: LIST
32801: PUSH
32802: EMPTY
32803: LIST
32804: LIST
32805: PPUSH
32806: CALL_OW 69
32810: PUSH
32811: FOR_IN
32812: IFFALSE 32853
// begin for j := 1 to 4 do
32814: LD_ADDR_VAR 0 3
32818: PUSH
32819: DOUBLE
32820: LD_INT 1
32822: DEC
32823: ST_TO_ADDR
32824: LD_INT 4
32826: PUSH
32827: FOR_TO
32828: IFFALSE 32849
// SetSkill ( i , j , 10 ) ;
32830: LD_VAR 0 2
32834: PPUSH
32835: LD_VAR 0 3
32839: PPUSH
32840: LD_INT 10
32842: PPUSH
32843: CALL_OW 237
32847: GO 32827
32849: POP
32850: POP
// end ;
32851: GO 32811
32853: POP
32854: POP
// end ;
32855: LD_VAR 0 1
32859: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
32860: LD_INT 0
32862: PPUSH
// uc_side := your_side ;
32863: LD_ADDR_OWVAR 20
32867: PUSH
32868: LD_OWVAR 2
32872: ST_TO_ADDR
// uc_nation := nation ;
32873: LD_ADDR_OWVAR 21
32877: PUSH
32878: LD_VAR 0 1
32882: ST_TO_ADDR
// InitHc ;
32883: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
32887: LD_INT 0
32889: PPUSH
32890: LD_VAR 0 2
32894: PPUSH
32895: LD_VAR 0 3
32899: PPUSH
32900: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
32904: LD_VAR 0 4
32908: PPUSH
32909: LD_VAR 0 5
32913: PPUSH
32914: CALL_OW 428
32918: PUSH
32919: LD_INT 0
32921: EQUAL
32922: IFFALSE 32946
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
32924: CALL_OW 44
32928: PPUSH
32929: LD_VAR 0 4
32933: PPUSH
32934: LD_VAR 0 5
32938: PPUSH
32939: LD_INT 1
32941: PPUSH
32942: CALL_OW 48
// end ;
32946: LD_VAR 0 6
32950: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
32951: LD_INT 0
32953: PPUSH
32954: PPUSH
// uc_side := your_side ;
32955: LD_ADDR_OWVAR 20
32959: PUSH
32960: LD_OWVAR 2
32964: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
32965: LD_VAR 0 1
32969: PUSH
32970: LD_INT 1
32972: PUSH
32973: LD_INT 2
32975: PUSH
32976: LD_INT 3
32978: PUSH
32979: LD_INT 4
32981: PUSH
32982: LD_INT 5
32984: PUSH
32985: EMPTY
32986: LIST
32987: LIST
32988: LIST
32989: LIST
32990: LIST
32991: IN
32992: IFFALSE 33004
// uc_nation := nation_american else
32994: LD_ADDR_OWVAR 21
32998: PUSH
32999: LD_INT 1
33001: ST_TO_ADDR
33002: GO 33047
// if chassis in [ 11 , 12 , 13 , 14 ] then
33004: LD_VAR 0 1
33008: PUSH
33009: LD_INT 11
33011: PUSH
33012: LD_INT 12
33014: PUSH
33015: LD_INT 13
33017: PUSH
33018: LD_INT 14
33020: PUSH
33021: EMPTY
33022: LIST
33023: LIST
33024: LIST
33025: LIST
33026: IN
33027: IFFALSE 33039
// uc_nation := nation_arabian else
33029: LD_ADDR_OWVAR 21
33033: PUSH
33034: LD_INT 2
33036: ST_TO_ADDR
33037: GO 33047
// uc_nation := nation_russian ;
33039: LD_ADDR_OWVAR 21
33043: PUSH
33044: LD_INT 3
33046: ST_TO_ADDR
// vc_chassis := chassis ;
33047: LD_ADDR_OWVAR 37
33051: PUSH
33052: LD_VAR 0 1
33056: ST_TO_ADDR
// vc_engine := engine ;
33057: LD_ADDR_OWVAR 39
33061: PUSH
33062: LD_VAR 0 2
33066: ST_TO_ADDR
// vc_control := control ;
33067: LD_ADDR_OWVAR 38
33071: PUSH
33072: LD_VAR 0 3
33076: ST_TO_ADDR
// vc_weapon := weapon ;
33077: LD_ADDR_OWVAR 40
33081: PUSH
33082: LD_VAR 0 4
33086: ST_TO_ADDR
// un := CreateVehicle ;
33087: LD_ADDR_VAR 0 8
33091: PUSH
33092: CALL_OW 45
33096: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
33097: LD_VAR 0 8
33101: PPUSH
33102: LD_INT 0
33104: PPUSH
33105: LD_INT 5
33107: PPUSH
33108: CALL_OW 12
33112: PPUSH
33113: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
33117: LD_VAR 0 8
33121: PPUSH
33122: LD_VAR 0 5
33126: PPUSH
33127: LD_VAR 0 6
33131: PPUSH
33132: LD_INT 1
33134: PPUSH
33135: CALL_OW 48
// end ;
33139: LD_VAR 0 7
33143: RET
// export hInvincible ; every 1 do
33144: GO 33146
33146: DISABLE
// hInvincible := [ ] ;
33147: LD_ADDR_EXP 122
33151: PUSH
33152: EMPTY
33153: ST_TO_ADDR
33154: END
// every 10 do var i ;
33155: GO 33157
33157: DISABLE
33158: LD_INT 0
33160: PPUSH
// begin enable ;
33161: ENABLE
// if not hInvincible then
33162: LD_EXP 122
33166: NOT
33167: IFFALSE 33171
// exit ;
33169: GO 33215
// for i in hInvincible do
33171: LD_ADDR_VAR 0 1
33175: PUSH
33176: LD_EXP 122
33180: PUSH
33181: FOR_IN
33182: IFFALSE 33213
// if GetLives ( i ) < 1000 then
33184: LD_VAR 0 1
33188: PPUSH
33189: CALL_OW 256
33193: PUSH
33194: LD_INT 1000
33196: LESS
33197: IFFALSE 33211
// SetLives ( i , 1000 ) ;
33199: LD_VAR 0 1
33203: PPUSH
33204: LD_INT 1000
33206: PPUSH
33207: CALL_OW 234
33211: GO 33181
33213: POP
33214: POP
// end ;
33215: PPOPN 1
33217: END
// export function hHackInvincible ; var i ; begin
33218: LD_INT 0
33220: PPUSH
33221: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
33222: LD_ADDR_VAR 0 2
33226: PUSH
33227: LD_INT 2
33229: PUSH
33230: LD_INT 21
33232: PUSH
33233: LD_INT 1
33235: PUSH
33236: EMPTY
33237: LIST
33238: LIST
33239: PUSH
33240: LD_INT 21
33242: PUSH
33243: LD_INT 2
33245: PUSH
33246: EMPTY
33247: LIST
33248: LIST
33249: PUSH
33250: EMPTY
33251: LIST
33252: LIST
33253: LIST
33254: PPUSH
33255: CALL_OW 69
33259: PUSH
33260: FOR_IN
33261: IFFALSE 33322
// if IsSelected ( i ) then
33263: LD_VAR 0 2
33267: PPUSH
33268: CALL_OW 306
33272: IFFALSE 33320
// begin if i in hInvincible then
33274: LD_VAR 0 2
33278: PUSH
33279: LD_EXP 122
33283: IN
33284: IFFALSE 33304
// hInvincible := hInvincible diff i else
33286: LD_ADDR_EXP 122
33290: PUSH
33291: LD_EXP 122
33295: PUSH
33296: LD_VAR 0 2
33300: DIFF
33301: ST_TO_ADDR
33302: GO 33320
// hInvincible := hInvincible union i ;
33304: LD_ADDR_EXP 122
33308: PUSH
33309: LD_EXP 122
33313: PUSH
33314: LD_VAR 0 2
33318: UNION
33319: ST_TO_ADDR
// end ;
33320: GO 33260
33322: POP
33323: POP
// end ;
33324: LD_VAR 0 1
33328: RET
// export function hHackInvisible ; var i , j ; begin
33329: LD_INT 0
33331: PPUSH
33332: PPUSH
33333: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33334: LD_ADDR_VAR 0 2
33338: PUSH
33339: LD_INT 21
33341: PUSH
33342: LD_INT 1
33344: PUSH
33345: EMPTY
33346: LIST
33347: LIST
33348: PPUSH
33349: CALL_OW 69
33353: PUSH
33354: FOR_IN
33355: IFFALSE 33379
// if IsSelected ( i ) then
33357: LD_VAR 0 2
33361: PPUSH
33362: CALL_OW 306
33366: IFFALSE 33377
// ComForceInvisible ( i ) ;
33368: LD_VAR 0 2
33372: PPUSH
33373: CALL_OW 496
33377: GO 33354
33379: POP
33380: POP
// end ;
33381: LD_VAR 0 1
33385: RET
// export function hHackChangeYourSide ; begin
33386: LD_INT 0
33388: PPUSH
// if your_side = 8 then
33389: LD_OWVAR 2
33393: PUSH
33394: LD_INT 8
33396: EQUAL
33397: IFFALSE 33409
// your_side := 0 else
33399: LD_ADDR_OWVAR 2
33403: PUSH
33404: LD_INT 0
33406: ST_TO_ADDR
33407: GO 33423
// your_side := your_side + 1 ;
33409: LD_ADDR_OWVAR 2
33413: PUSH
33414: LD_OWVAR 2
33418: PUSH
33419: LD_INT 1
33421: PLUS
33422: ST_TO_ADDR
// end ;
33423: LD_VAR 0 1
33427: RET
// export function hHackChangeUnitSide ; var i , j ; begin
33428: LD_INT 0
33430: PPUSH
33431: PPUSH
33432: PPUSH
// for i in all_units do
33433: LD_ADDR_VAR 0 2
33437: PUSH
33438: LD_OWVAR 3
33442: PUSH
33443: FOR_IN
33444: IFFALSE 33522
// if IsSelected ( i ) then
33446: LD_VAR 0 2
33450: PPUSH
33451: CALL_OW 306
33455: IFFALSE 33520
// begin j := GetSide ( i ) ;
33457: LD_ADDR_VAR 0 3
33461: PUSH
33462: LD_VAR 0 2
33466: PPUSH
33467: CALL_OW 255
33471: ST_TO_ADDR
// if j = 8 then
33472: LD_VAR 0 3
33476: PUSH
33477: LD_INT 8
33479: EQUAL
33480: IFFALSE 33492
// j := 0 else
33482: LD_ADDR_VAR 0 3
33486: PUSH
33487: LD_INT 0
33489: ST_TO_ADDR
33490: GO 33506
// j := j + 1 ;
33492: LD_ADDR_VAR 0 3
33496: PUSH
33497: LD_VAR 0 3
33501: PUSH
33502: LD_INT 1
33504: PLUS
33505: ST_TO_ADDR
// SetSide ( i , j ) ;
33506: LD_VAR 0 2
33510: PPUSH
33511: LD_VAR 0 3
33515: PPUSH
33516: CALL_OW 235
// end ;
33520: GO 33443
33522: POP
33523: POP
// end ;
33524: LD_VAR 0 1
33528: RET
// export function hHackFog ; begin
33529: LD_INT 0
33531: PPUSH
// FogOff ( true ) ;
33532: LD_INT 1
33534: PPUSH
33535: CALL_OW 344
// end ;
33539: LD_VAR 0 1
33543: RET
// export function hHackTeleport ( unit , x , y ) ; begin
33544: LD_INT 0
33546: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
33547: LD_VAR 0 1
33551: PPUSH
33552: LD_VAR 0 2
33556: PPUSH
33557: LD_VAR 0 3
33561: PPUSH
33562: LD_INT 1
33564: PPUSH
33565: LD_INT 1
33567: PPUSH
33568: CALL_OW 483
// CenterOnXY ( x , y ) ;
33572: LD_VAR 0 2
33576: PPUSH
33577: LD_VAR 0 3
33581: PPUSH
33582: CALL_OW 84
// end ; end_of_file
33586: LD_VAR 0 4
33590: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
33591: LD_INT 0
33593: PPUSH
33594: PPUSH
33595: PPUSH
33596: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
33597: LD_VAR 0 1
33601: PPUSH
33602: CALL_OW 264
33606: PUSH
33607: LD_EXP 49
33611: EQUAL
33612: IFFALSE 33684
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
33614: LD_INT 68
33616: PPUSH
33617: LD_VAR 0 1
33621: PPUSH
33622: CALL_OW 255
33626: PPUSH
33627: CALL_OW 321
33631: PUSH
33632: LD_INT 2
33634: EQUAL
33635: IFFALSE 33647
// eff := 70 else
33637: LD_ADDR_VAR 0 4
33641: PUSH
33642: LD_INT 70
33644: ST_TO_ADDR
33645: GO 33655
// eff := 30 ;
33647: LD_ADDR_VAR 0 4
33651: PUSH
33652: LD_INT 30
33654: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
33655: LD_VAR 0 1
33659: PPUSH
33660: CALL_OW 250
33664: PPUSH
33665: LD_VAR 0 1
33669: PPUSH
33670: CALL_OW 251
33674: PPUSH
33675: LD_VAR 0 4
33679: PPUSH
33680: CALL_OW 495
// end ; end ;
33684: LD_VAR 0 2
33688: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
33689: LD_INT 0
33691: PPUSH
// end ;
33692: LD_VAR 0 4
33696: RET
// export function SOS_Command ( cmd ) ; begin
33697: LD_INT 0
33699: PPUSH
// end ;
33700: LD_VAR 0 2
33704: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
33705: LD_INT 0
33707: PPUSH
// end ;
33708: LD_VAR 0 6
33712: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
33713: LD_INT 0
33715: PPUSH
33716: PPUSH
// if not vehicle or not factory then
33717: LD_VAR 0 1
33721: NOT
33722: PUSH
33723: LD_VAR 0 2
33727: NOT
33728: OR
33729: IFFALSE 33733
// exit ;
33731: GO 33964
// if factoryWaypoints >= factory then
33733: LD_EXP 123
33737: PUSH
33738: LD_VAR 0 2
33742: GREATEREQUAL
33743: IFFALSE 33964
// if factoryWaypoints [ factory ] then
33745: LD_EXP 123
33749: PUSH
33750: LD_VAR 0 2
33754: ARRAY
33755: IFFALSE 33964
// begin if GetControl ( vehicle ) = control_manual then
33757: LD_VAR 0 1
33761: PPUSH
33762: CALL_OW 263
33766: PUSH
33767: LD_INT 1
33769: EQUAL
33770: IFFALSE 33851
// begin driver := IsDrivenBy ( vehicle ) ;
33772: LD_ADDR_VAR 0 4
33776: PUSH
33777: LD_VAR 0 1
33781: PPUSH
33782: CALL_OW 311
33786: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
33787: LD_VAR 0 4
33791: PPUSH
33792: LD_EXP 123
33796: PUSH
33797: LD_VAR 0 2
33801: ARRAY
33802: PUSH
33803: LD_INT 3
33805: ARRAY
33806: PPUSH
33807: LD_EXP 123
33811: PUSH
33812: LD_VAR 0 2
33816: ARRAY
33817: PUSH
33818: LD_INT 4
33820: ARRAY
33821: PPUSH
33822: CALL_OW 171
// AddComExitVehicle ( driver ) ;
33826: LD_VAR 0 4
33830: PPUSH
33831: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
33835: LD_VAR 0 4
33839: PPUSH
33840: LD_VAR 0 2
33844: PPUSH
33845: CALL_OW 180
// end else
33849: GO 33964
// if GetControl ( vehicle ) = control_remote then
33851: LD_VAR 0 1
33855: PPUSH
33856: CALL_OW 263
33860: PUSH
33861: LD_INT 2
33863: EQUAL
33864: IFFALSE 33925
// begin wait ( 0 0$2 ) ;
33866: LD_INT 70
33868: PPUSH
33869: CALL_OW 67
// if Connect ( vehicle ) then
33873: LD_VAR 0 1
33877: PPUSH
33878: CALL 46188 0 1
33882: IFFALSE 33923
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
33884: LD_VAR 0 1
33888: PPUSH
33889: LD_EXP 123
33893: PUSH
33894: LD_VAR 0 2
33898: ARRAY
33899: PUSH
33900: LD_INT 3
33902: ARRAY
33903: PPUSH
33904: LD_EXP 123
33908: PUSH
33909: LD_VAR 0 2
33913: ARRAY
33914: PUSH
33915: LD_INT 4
33917: ARRAY
33918: PPUSH
33919: CALL_OW 171
// end else
33923: GO 33964
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
33925: LD_VAR 0 1
33929: PPUSH
33930: LD_EXP 123
33934: PUSH
33935: LD_VAR 0 2
33939: ARRAY
33940: PUSH
33941: LD_INT 3
33943: ARRAY
33944: PPUSH
33945: LD_EXP 123
33949: PUSH
33950: LD_VAR 0 2
33954: ARRAY
33955: PUSH
33956: LD_INT 4
33958: ARRAY
33959: PPUSH
33960: CALL_OW 171
// end ; end ;
33964: LD_VAR 0 3
33968: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
33969: LD_INT 0
33971: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
33972: LD_VAR 0 1
33976: PUSH
33977: LD_INT 250
33979: EQUAL
33980: PUSH
33981: LD_VAR 0 2
33985: PPUSH
33986: CALL_OW 264
33990: PUSH
33991: LD_EXP 52
33995: EQUAL
33996: AND
33997: IFFALSE 34018
// MinerPlaceMine ( unit , x , y ) ;
33999: LD_VAR 0 2
34003: PPUSH
34004: LD_VAR 0 4
34008: PPUSH
34009: LD_VAR 0 5
34013: PPUSH
34014: CALL 36746 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
34018: LD_VAR 0 1
34022: PUSH
34023: LD_INT 251
34025: EQUAL
34026: PUSH
34027: LD_VAR 0 2
34031: PPUSH
34032: CALL_OW 264
34036: PUSH
34037: LD_EXP 52
34041: EQUAL
34042: AND
34043: IFFALSE 34064
// MinerDetonateMine ( unit , x , y ) ;
34045: LD_VAR 0 2
34049: PPUSH
34050: LD_VAR 0 4
34054: PPUSH
34055: LD_VAR 0 5
34059: PPUSH
34060: CALL 37023 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
34064: LD_VAR 0 1
34068: PUSH
34069: LD_INT 252
34071: EQUAL
34072: PUSH
34073: LD_VAR 0 2
34077: PPUSH
34078: CALL_OW 264
34082: PUSH
34083: LD_EXP 52
34087: EQUAL
34088: AND
34089: IFFALSE 34110
// MinerCreateMinefield ( unit , x , y ) ;
34091: LD_VAR 0 2
34095: PPUSH
34096: LD_VAR 0 4
34100: PPUSH
34101: LD_VAR 0 5
34105: PPUSH
34106: CALL 37440 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
34110: LD_VAR 0 1
34114: PUSH
34115: LD_INT 253
34117: EQUAL
34118: PUSH
34119: LD_VAR 0 2
34123: PPUSH
34124: CALL_OW 257
34128: PUSH
34129: LD_INT 5
34131: EQUAL
34132: AND
34133: IFFALSE 34154
// ComBinocular ( unit , x , y ) ;
34135: LD_VAR 0 2
34139: PPUSH
34140: LD_VAR 0 4
34144: PPUSH
34145: LD_VAR 0 5
34149: PPUSH
34150: CALL 37811 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
34154: LD_VAR 0 1
34158: PUSH
34159: LD_INT 254
34161: EQUAL
34162: PUSH
34163: LD_VAR 0 2
34167: PPUSH
34168: CALL_OW 264
34172: PUSH
34173: LD_EXP 47
34177: EQUAL
34178: AND
34179: PUSH
34180: LD_VAR 0 3
34184: PPUSH
34185: CALL_OW 263
34189: PUSH
34190: LD_INT 3
34192: EQUAL
34193: AND
34194: IFFALSE 34210
// HackDestroyVehicle ( unit , selectedUnit ) ;
34196: LD_VAR 0 2
34200: PPUSH
34201: LD_VAR 0 3
34205: PPUSH
34206: CALL 36106 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
34210: LD_VAR 0 1
34214: PUSH
34215: LD_INT 255
34217: EQUAL
34218: PUSH
34219: LD_VAR 0 2
34223: PPUSH
34224: CALL_OW 264
34228: PUSH
34229: LD_INT 14
34231: PUSH
34232: LD_INT 53
34234: PUSH
34235: EMPTY
34236: LIST
34237: LIST
34238: IN
34239: AND
34240: PUSH
34241: LD_VAR 0 4
34245: PPUSH
34246: LD_VAR 0 5
34250: PPUSH
34251: CALL_OW 488
34255: AND
34256: IFFALSE 34280
// CutTreeXYR ( unit , x , y , 12 ) ;
34258: LD_VAR 0 2
34262: PPUSH
34263: LD_VAR 0 4
34267: PPUSH
34268: LD_VAR 0 5
34272: PPUSH
34273: LD_INT 12
34275: PPUSH
34276: CALL 34672 0 4
// if cmd = 256 then
34280: LD_VAR 0 1
34284: PUSH
34285: LD_INT 256
34287: EQUAL
34288: IFFALSE 34309
// SetFactoryWaypoint ( unit , x , y ) ;
34290: LD_VAR 0 2
34294: PPUSH
34295: LD_VAR 0 4
34299: PPUSH
34300: LD_VAR 0 5
34304: PPUSH
34305: CALL 34314 0 3
// end ;
34309: LD_VAR 0 6
34313: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
34314: LD_INT 0
34316: PPUSH
34317: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
34318: LD_VAR 0 1
34322: NOT
34323: PUSH
34324: LD_VAR 0 2
34328: PPUSH
34329: LD_VAR 0 3
34333: PPUSH
34334: CALL_OW 488
34338: NOT
34339: OR
34340: PUSH
34341: LD_VAR 0 1
34345: PPUSH
34346: CALL_OW 266
34350: PUSH
34351: LD_INT 3
34353: NONEQUAL
34354: PUSH
34355: LD_VAR 0 1
34359: PPUSH
34360: CALL_OW 247
34364: PUSH
34365: LD_INT 1
34367: EQUAL
34368: NOT
34369: AND
34370: OR
34371: IFFALSE 34375
// exit ;
34373: GO 34524
// if GetType ( factory ) = unit_human then
34375: LD_VAR 0 1
34379: PPUSH
34380: CALL_OW 247
34384: PUSH
34385: LD_INT 1
34387: EQUAL
34388: IFFALSE 34405
// factory := IsInUnit ( factory ) ;
34390: LD_ADDR_VAR 0 1
34394: PUSH
34395: LD_VAR 0 1
34399: PPUSH
34400: CALL_OW 310
34404: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
34405: LD_VAR 0 1
34409: PPUSH
34410: CALL_OW 266
34414: PUSH
34415: LD_INT 3
34417: NONEQUAL
34418: IFFALSE 34422
// exit ;
34420: GO 34524
// if HexInfo ( x , y ) = factory then
34422: LD_VAR 0 2
34426: PPUSH
34427: LD_VAR 0 3
34431: PPUSH
34432: CALL_OW 428
34436: PUSH
34437: LD_VAR 0 1
34441: EQUAL
34442: IFFALSE 34469
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
34444: LD_ADDR_EXP 123
34448: PUSH
34449: LD_EXP 123
34453: PPUSH
34454: LD_VAR 0 1
34458: PPUSH
34459: LD_INT 0
34461: PPUSH
34462: CALL_OW 1
34466: ST_TO_ADDR
34467: GO 34520
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
34469: LD_ADDR_EXP 123
34473: PUSH
34474: LD_EXP 123
34478: PPUSH
34479: LD_VAR 0 1
34483: PPUSH
34484: LD_VAR 0 1
34488: PPUSH
34489: CALL_OW 255
34493: PUSH
34494: LD_VAR 0 1
34498: PUSH
34499: LD_VAR 0 2
34503: PUSH
34504: LD_VAR 0 3
34508: PUSH
34509: EMPTY
34510: LIST
34511: LIST
34512: LIST
34513: LIST
34514: PPUSH
34515: CALL_OW 1
34519: ST_TO_ADDR
// UpdateFactoryWaypoints ;
34520: CALL 34529 0 0
// end ;
34524: LD_VAR 0 4
34528: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
34529: LD_INT 0
34531: PPUSH
34532: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
34533: LD_STRING resetFactoryWaypoint();
34535: PPUSH
34536: CALL_OW 559
// if factoryWaypoints then
34540: LD_EXP 123
34544: IFFALSE 34667
// begin for i := 1 to factoryWaypoints do
34546: LD_ADDR_VAR 0 2
34550: PUSH
34551: DOUBLE
34552: LD_INT 1
34554: DEC
34555: ST_TO_ADDR
34556: LD_EXP 123
34560: PUSH
34561: FOR_TO
34562: IFFALSE 34665
// if factoryWaypoints [ i ] then
34564: LD_EXP 123
34568: PUSH
34569: LD_VAR 0 2
34573: ARRAY
34574: IFFALSE 34663
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
34576: LD_STRING setFactoryWaypointXY(
34578: PUSH
34579: LD_EXP 123
34583: PUSH
34584: LD_VAR 0 2
34588: ARRAY
34589: PUSH
34590: LD_INT 1
34592: ARRAY
34593: STR
34594: PUSH
34595: LD_STRING ,
34597: STR
34598: PUSH
34599: LD_EXP 123
34603: PUSH
34604: LD_VAR 0 2
34608: ARRAY
34609: PUSH
34610: LD_INT 2
34612: ARRAY
34613: STR
34614: PUSH
34615: LD_STRING ,
34617: STR
34618: PUSH
34619: LD_EXP 123
34623: PUSH
34624: LD_VAR 0 2
34628: ARRAY
34629: PUSH
34630: LD_INT 3
34632: ARRAY
34633: STR
34634: PUSH
34635: LD_STRING ,
34637: STR
34638: PUSH
34639: LD_EXP 123
34643: PUSH
34644: LD_VAR 0 2
34648: ARRAY
34649: PUSH
34650: LD_INT 4
34652: ARRAY
34653: STR
34654: PUSH
34655: LD_STRING )
34657: STR
34658: PPUSH
34659: CALL_OW 559
34663: GO 34561
34665: POP
34666: POP
// end ; end ;
34667: LD_VAR 0 1
34671: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
34672: LD_INT 0
34674: PPUSH
34675: PPUSH
34676: PPUSH
34677: PPUSH
34678: PPUSH
34679: PPUSH
34680: PPUSH
34681: PPUSH
34682: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
34683: LD_VAR 0 1
34687: NOT
34688: PUSH
34689: LD_VAR 0 2
34693: PPUSH
34694: LD_VAR 0 3
34698: PPUSH
34699: CALL_OW 488
34703: NOT
34704: OR
34705: PUSH
34706: LD_VAR 0 4
34710: NOT
34711: OR
34712: IFFALSE 34716
// exit ;
34714: GO 35056
// list := [ ] ;
34716: LD_ADDR_VAR 0 13
34720: PUSH
34721: EMPTY
34722: ST_TO_ADDR
// if x - r < 0 then
34723: LD_VAR 0 2
34727: PUSH
34728: LD_VAR 0 4
34732: MINUS
34733: PUSH
34734: LD_INT 0
34736: LESS
34737: IFFALSE 34749
// min_x := 0 else
34739: LD_ADDR_VAR 0 7
34743: PUSH
34744: LD_INT 0
34746: ST_TO_ADDR
34747: GO 34765
// min_x := x - r ;
34749: LD_ADDR_VAR 0 7
34753: PUSH
34754: LD_VAR 0 2
34758: PUSH
34759: LD_VAR 0 4
34763: MINUS
34764: ST_TO_ADDR
// if y - r < 0 then
34765: LD_VAR 0 3
34769: PUSH
34770: LD_VAR 0 4
34774: MINUS
34775: PUSH
34776: LD_INT 0
34778: LESS
34779: IFFALSE 34791
// min_y := 0 else
34781: LD_ADDR_VAR 0 8
34785: PUSH
34786: LD_INT 0
34788: ST_TO_ADDR
34789: GO 34807
// min_y := y - r ;
34791: LD_ADDR_VAR 0 8
34795: PUSH
34796: LD_VAR 0 3
34800: PUSH
34801: LD_VAR 0 4
34805: MINUS
34806: ST_TO_ADDR
// max_x := x + r ;
34807: LD_ADDR_VAR 0 9
34811: PUSH
34812: LD_VAR 0 2
34816: PUSH
34817: LD_VAR 0 4
34821: PLUS
34822: ST_TO_ADDR
// max_y := y + r ;
34823: LD_ADDR_VAR 0 10
34827: PUSH
34828: LD_VAR 0 3
34832: PUSH
34833: LD_VAR 0 4
34837: PLUS
34838: ST_TO_ADDR
// for _x = min_x to max_x do
34839: LD_ADDR_VAR 0 11
34843: PUSH
34844: DOUBLE
34845: LD_VAR 0 7
34849: DEC
34850: ST_TO_ADDR
34851: LD_VAR 0 9
34855: PUSH
34856: FOR_TO
34857: IFFALSE 34974
// for _y = min_y to max_y do
34859: LD_ADDR_VAR 0 12
34863: PUSH
34864: DOUBLE
34865: LD_VAR 0 8
34869: DEC
34870: ST_TO_ADDR
34871: LD_VAR 0 10
34875: PUSH
34876: FOR_TO
34877: IFFALSE 34970
// begin if not ValidHex ( _x , _y ) then
34879: LD_VAR 0 11
34883: PPUSH
34884: LD_VAR 0 12
34888: PPUSH
34889: CALL_OW 488
34893: NOT
34894: IFFALSE 34898
// continue ;
34896: GO 34876
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
34898: LD_VAR 0 11
34902: PPUSH
34903: LD_VAR 0 12
34907: PPUSH
34908: CALL_OW 351
34912: PUSH
34913: LD_VAR 0 11
34917: PPUSH
34918: LD_VAR 0 12
34922: PPUSH
34923: CALL_OW 554
34927: AND
34928: IFFALSE 34968
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
34930: LD_ADDR_VAR 0 13
34934: PUSH
34935: LD_VAR 0 13
34939: PPUSH
34940: LD_VAR 0 13
34944: PUSH
34945: LD_INT 1
34947: PLUS
34948: PPUSH
34949: LD_VAR 0 11
34953: PUSH
34954: LD_VAR 0 12
34958: PUSH
34959: EMPTY
34960: LIST
34961: LIST
34962: PPUSH
34963: CALL_OW 2
34967: ST_TO_ADDR
// end ;
34968: GO 34876
34970: POP
34971: POP
34972: GO 34856
34974: POP
34975: POP
// if not list then
34976: LD_VAR 0 13
34980: NOT
34981: IFFALSE 34985
// exit ;
34983: GO 35056
// for i in list do
34985: LD_ADDR_VAR 0 6
34989: PUSH
34990: LD_VAR 0 13
34994: PUSH
34995: FOR_IN
34996: IFFALSE 35054
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
34998: LD_VAR 0 1
35002: PPUSH
35003: LD_STRING M
35005: PUSH
35006: LD_VAR 0 6
35010: PUSH
35011: LD_INT 1
35013: ARRAY
35014: PUSH
35015: LD_VAR 0 6
35019: PUSH
35020: LD_INT 2
35022: ARRAY
35023: PUSH
35024: LD_INT 0
35026: PUSH
35027: LD_INT 0
35029: PUSH
35030: LD_INT 0
35032: PUSH
35033: LD_INT 0
35035: PUSH
35036: EMPTY
35037: LIST
35038: LIST
35039: LIST
35040: LIST
35041: LIST
35042: LIST
35043: LIST
35044: PUSH
35045: EMPTY
35046: LIST
35047: PPUSH
35048: CALL_OW 447
35052: GO 34995
35054: POP
35055: POP
// end ;
35056: LD_VAR 0 5
35060: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
35061: LD_EXP 124
35065: NOT
35066: IFFALSE 35116
35068: GO 35070
35070: DISABLE
// begin initHack := true ;
35071: LD_ADDR_EXP 124
35075: PUSH
35076: LD_INT 1
35078: ST_TO_ADDR
// hackTanks := [ ] ;
35079: LD_ADDR_EXP 125
35083: PUSH
35084: EMPTY
35085: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
35086: LD_ADDR_EXP 126
35090: PUSH
35091: EMPTY
35092: ST_TO_ADDR
// hackLimit := 3 ;
35093: LD_ADDR_EXP 127
35097: PUSH
35098: LD_INT 3
35100: ST_TO_ADDR
// hackDist := 12 ;
35101: LD_ADDR_EXP 128
35105: PUSH
35106: LD_INT 12
35108: ST_TO_ADDR
// hackCounter := [ ] ;
35109: LD_ADDR_EXP 129
35113: PUSH
35114: EMPTY
35115: ST_TO_ADDR
// end ;
35116: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
35117: LD_EXP 124
35121: PUSH
35122: LD_INT 34
35124: PUSH
35125: LD_EXP 47
35129: PUSH
35130: EMPTY
35131: LIST
35132: LIST
35133: PPUSH
35134: CALL_OW 69
35138: AND
35139: IFFALSE 35394
35141: GO 35143
35143: DISABLE
35144: LD_INT 0
35146: PPUSH
35147: PPUSH
// begin enable ;
35148: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
35149: LD_ADDR_VAR 0 1
35153: PUSH
35154: LD_INT 34
35156: PUSH
35157: LD_EXP 47
35161: PUSH
35162: EMPTY
35163: LIST
35164: LIST
35165: PPUSH
35166: CALL_OW 69
35170: PUSH
35171: FOR_IN
35172: IFFALSE 35392
// begin if not i in hackTanks then
35174: LD_VAR 0 1
35178: PUSH
35179: LD_EXP 125
35183: IN
35184: NOT
35185: IFFALSE 35268
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
35187: LD_ADDR_EXP 125
35191: PUSH
35192: LD_EXP 125
35196: PPUSH
35197: LD_EXP 125
35201: PUSH
35202: LD_INT 1
35204: PLUS
35205: PPUSH
35206: LD_VAR 0 1
35210: PPUSH
35211: CALL_OW 1
35215: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
35216: LD_ADDR_EXP 126
35220: PUSH
35221: LD_EXP 126
35225: PPUSH
35226: LD_EXP 126
35230: PUSH
35231: LD_INT 1
35233: PLUS
35234: PPUSH
35235: EMPTY
35236: PPUSH
35237: CALL_OW 1
35241: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
35242: LD_ADDR_EXP 129
35246: PUSH
35247: LD_EXP 129
35251: PPUSH
35252: LD_EXP 129
35256: PUSH
35257: LD_INT 1
35259: PLUS
35260: PPUSH
35261: EMPTY
35262: PPUSH
35263: CALL_OW 1
35267: ST_TO_ADDR
// end ; if not IsOk ( i ) then
35268: LD_VAR 0 1
35272: PPUSH
35273: CALL_OW 302
35277: NOT
35278: IFFALSE 35291
// begin HackUnlinkAll ( i ) ;
35280: LD_VAR 0 1
35284: PPUSH
35285: CALL 35397 0 1
// continue ;
35289: GO 35171
// end ; HackCheckCapturedStatus ( i ) ;
35291: LD_VAR 0 1
35295: PPUSH
35296: CALL 35840 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
35300: LD_ADDR_VAR 0 2
35304: PUSH
35305: LD_INT 81
35307: PUSH
35308: LD_VAR 0 1
35312: PPUSH
35313: CALL_OW 255
35317: PUSH
35318: EMPTY
35319: LIST
35320: LIST
35321: PUSH
35322: LD_INT 33
35324: PUSH
35325: LD_INT 3
35327: PUSH
35328: EMPTY
35329: LIST
35330: LIST
35331: PUSH
35332: LD_INT 91
35334: PUSH
35335: LD_VAR 0 1
35339: PUSH
35340: LD_EXP 128
35344: PUSH
35345: EMPTY
35346: LIST
35347: LIST
35348: LIST
35349: PUSH
35350: LD_INT 50
35352: PUSH
35353: EMPTY
35354: LIST
35355: PUSH
35356: EMPTY
35357: LIST
35358: LIST
35359: LIST
35360: LIST
35361: PPUSH
35362: CALL_OW 69
35366: ST_TO_ADDR
// if not tmp then
35367: LD_VAR 0 2
35371: NOT
35372: IFFALSE 35376
// continue ;
35374: GO 35171
// HackLink ( i , tmp ) ;
35376: LD_VAR 0 1
35380: PPUSH
35381: LD_VAR 0 2
35385: PPUSH
35386: CALL 35533 0 2
// end ;
35390: GO 35171
35392: POP
35393: POP
// end ;
35394: PPOPN 2
35396: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
35397: LD_INT 0
35399: PPUSH
35400: PPUSH
35401: PPUSH
// if not hack in hackTanks then
35402: LD_VAR 0 1
35406: PUSH
35407: LD_EXP 125
35411: IN
35412: NOT
35413: IFFALSE 35417
// exit ;
35415: GO 35528
// index := GetElementIndex ( hackTanks , hack ) ;
35417: LD_ADDR_VAR 0 4
35421: PUSH
35422: LD_EXP 125
35426: PPUSH
35427: LD_VAR 0 1
35431: PPUSH
35432: CALL 43002 0 2
35436: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
35437: LD_EXP 126
35441: PUSH
35442: LD_VAR 0 4
35446: ARRAY
35447: IFFALSE 35528
// begin for i in hackTanksCaptured [ index ] do
35449: LD_ADDR_VAR 0 3
35453: PUSH
35454: LD_EXP 126
35458: PUSH
35459: LD_VAR 0 4
35463: ARRAY
35464: PUSH
35465: FOR_IN
35466: IFFALSE 35492
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
35468: LD_VAR 0 3
35472: PUSH
35473: LD_INT 1
35475: ARRAY
35476: PPUSH
35477: LD_VAR 0 3
35481: PUSH
35482: LD_INT 2
35484: ARRAY
35485: PPUSH
35486: CALL_OW 235
35490: GO 35465
35492: POP
35493: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
35494: LD_ADDR_EXP 126
35498: PUSH
35499: LD_EXP 126
35503: PPUSH
35504: LD_VAR 0 4
35508: PPUSH
35509: EMPTY
35510: PPUSH
35511: CALL_OW 1
35515: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
35516: LD_VAR 0 1
35520: PPUSH
35521: LD_INT 0
35523: PPUSH
35524: CALL_OW 505
// end ; end ;
35528: LD_VAR 0 2
35532: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
35533: LD_INT 0
35535: PPUSH
35536: PPUSH
35537: PPUSH
// if not hack in hackTanks or not vehicles then
35538: LD_VAR 0 1
35542: PUSH
35543: LD_EXP 125
35547: IN
35548: NOT
35549: PUSH
35550: LD_VAR 0 2
35554: NOT
35555: OR
35556: IFFALSE 35560
// exit ;
35558: GO 35835
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
35560: LD_ADDR_VAR 0 2
35564: PUSH
35565: LD_VAR 0 1
35569: PPUSH
35570: LD_VAR 0 2
35574: PPUSH
35575: LD_INT 1
35577: PPUSH
35578: LD_INT 1
35580: PPUSH
35581: CALL 43652 0 4
35585: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
35586: LD_ADDR_VAR 0 5
35590: PUSH
35591: LD_EXP 125
35595: PPUSH
35596: LD_VAR 0 1
35600: PPUSH
35601: CALL 43002 0 2
35605: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
35606: LD_EXP 126
35610: PUSH
35611: LD_VAR 0 5
35615: ARRAY
35616: PUSH
35617: LD_EXP 127
35621: LESS
35622: IFFALSE 35811
// begin for i := 1 to vehicles do
35624: LD_ADDR_VAR 0 4
35628: PUSH
35629: DOUBLE
35630: LD_INT 1
35632: DEC
35633: ST_TO_ADDR
35634: LD_VAR 0 2
35638: PUSH
35639: FOR_TO
35640: IFFALSE 35809
// begin if hackTanksCaptured [ index ] = hackLimit then
35642: LD_EXP 126
35646: PUSH
35647: LD_VAR 0 5
35651: ARRAY
35652: PUSH
35653: LD_EXP 127
35657: EQUAL
35658: IFFALSE 35662
// break ;
35660: GO 35809
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
35662: LD_ADDR_EXP 129
35666: PUSH
35667: LD_EXP 129
35671: PPUSH
35672: LD_VAR 0 5
35676: PPUSH
35677: LD_EXP 129
35681: PUSH
35682: LD_VAR 0 5
35686: ARRAY
35687: PUSH
35688: LD_INT 1
35690: PLUS
35691: PPUSH
35692: CALL_OW 1
35696: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
35697: LD_ADDR_EXP 126
35701: PUSH
35702: LD_EXP 126
35706: PPUSH
35707: LD_VAR 0 5
35711: PUSH
35712: LD_EXP 126
35716: PUSH
35717: LD_VAR 0 5
35721: ARRAY
35722: PUSH
35723: LD_INT 1
35725: PLUS
35726: PUSH
35727: EMPTY
35728: LIST
35729: LIST
35730: PPUSH
35731: LD_VAR 0 2
35735: PUSH
35736: LD_VAR 0 4
35740: ARRAY
35741: PUSH
35742: LD_VAR 0 2
35746: PUSH
35747: LD_VAR 0 4
35751: ARRAY
35752: PPUSH
35753: CALL_OW 255
35757: PUSH
35758: EMPTY
35759: LIST
35760: LIST
35761: PPUSH
35762: CALL 43217 0 3
35766: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
35767: LD_VAR 0 2
35771: PUSH
35772: LD_VAR 0 4
35776: ARRAY
35777: PPUSH
35778: LD_VAR 0 1
35782: PPUSH
35783: CALL_OW 255
35787: PPUSH
35788: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
35792: LD_VAR 0 2
35796: PUSH
35797: LD_VAR 0 4
35801: ARRAY
35802: PPUSH
35803: CALL_OW 141
// end ;
35807: GO 35639
35809: POP
35810: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
35811: LD_VAR 0 1
35815: PPUSH
35816: LD_EXP 126
35820: PUSH
35821: LD_VAR 0 5
35825: ARRAY
35826: PUSH
35827: LD_INT 0
35829: PLUS
35830: PPUSH
35831: CALL_OW 505
// end ;
35835: LD_VAR 0 3
35839: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
35840: LD_INT 0
35842: PPUSH
35843: PPUSH
35844: PPUSH
35845: PPUSH
// if not hack in hackTanks then
35846: LD_VAR 0 1
35850: PUSH
35851: LD_EXP 125
35855: IN
35856: NOT
35857: IFFALSE 35861
// exit ;
35859: GO 36101
// index := GetElementIndex ( hackTanks , hack ) ;
35861: LD_ADDR_VAR 0 4
35865: PUSH
35866: LD_EXP 125
35870: PPUSH
35871: LD_VAR 0 1
35875: PPUSH
35876: CALL 43002 0 2
35880: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
35881: LD_ADDR_VAR 0 3
35885: PUSH
35886: DOUBLE
35887: LD_EXP 126
35891: PUSH
35892: LD_VAR 0 4
35896: ARRAY
35897: INC
35898: ST_TO_ADDR
35899: LD_INT 1
35901: PUSH
35902: FOR_DOWNTO
35903: IFFALSE 36075
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
35905: LD_ADDR_VAR 0 5
35909: PUSH
35910: LD_EXP 126
35914: PUSH
35915: LD_VAR 0 4
35919: ARRAY
35920: PUSH
35921: LD_VAR 0 3
35925: ARRAY
35926: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
35927: LD_VAR 0 5
35931: PUSH
35932: LD_INT 1
35934: ARRAY
35935: PPUSH
35936: CALL_OW 302
35940: NOT
35941: PUSH
35942: LD_VAR 0 5
35946: PUSH
35947: LD_INT 1
35949: ARRAY
35950: PPUSH
35951: CALL_OW 255
35955: PUSH
35956: LD_VAR 0 1
35960: PPUSH
35961: CALL_OW 255
35965: NONEQUAL
35966: OR
35967: IFFALSE 36073
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
35969: LD_VAR 0 5
35973: PUSH
35974: LD_INT 1
35976: ARRAY
35977: PPUSH
35978: CALL_OW 305
35982: PUSH
35983: LD_VAR 0 5
35987: PUSH
35988: LD_INT 1
35990: ARRAY
35991: PPUSH
35992: CALL_OW 255
35996: PUSH
35997: LD_VAR 0 1
36001: PPUSH
36002: CALL_OW 255
36006: EQUAL
36007: AND
36008: IFFALSE 36032
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
36010: LD_VAR 0 5
36014: PUSH
36015: LD_INT 1
36017: ARRAY
36018: PPUSH
36019: LD_VAR 0 5
36023: PUSH
36024: LD_INT 2
36026: ARRAY
36027: PPUSH
36028: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
36032: LD_ADDR_EXP 126
36036: PUSH
36037: LD_EXP 126
36041: PPUSH
36042: LD_VAR 0 4
36046: PPUSH
36047: LD_EXP 126
36051: PUSH
36052: LD_VAR 0 4
36056: ARRAY
36057: PPUSH
36058: LD_VAR 0 3
36062: PPUSH
36063: CALL_OW 3
36067: PPUSH
36068: CALL_OW 1
36072: ST_TO_ADDR
// end ; end ;
36073: GO 35902
36075: POP
36076: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
36077: LD_VAR 0 1
36081: PPUSH
36082: LD_EXP 126
36086: PUSH
36087: LD_VAR 0 4
36091: ARRAY
36092: PUSH
36093: LD_INT 0
36095: PLUS
36096: PPUSH
36097: CALL_OW 505
// end ;
36101: LD_VAR 0 2
36105: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
36106: LD_INT 0
36108: PPUSH
36109: PPUSH
36110: PPUSH
36111: PPUSH
// if not hack in hackTanks then
36112: LD_VAR 0 1
36116: PUSH
36117: LD_EXP 125
36121: IN
36122: NOT
36123: IFFALSE 36127
// exit ;
36125: GO 36212
// index := GetElementIndex ( hackTanks , hack ) ;
36127: LD_ADDR_VAR 0 5
36131: PUSH
36132: LD_EXP 125
36136: PPUSH
36137: LD_VAR 0 1
36141: PPUSH
36142: CALL 43002 0 2
36146: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
36147: LD_ADDR_VAR 0 4
36151: PUSH
36152: DOUBLE
36153: LD_INT 1
36155: DEC
36156: ST_TO_ADDR
36157: LD_EXP 126
36161: PUSH
36162: LD_VAR 0 5
36166: ARRAY
36167: PUSH
36168: FOR_TO
36169: IFFALSE 36210
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
36171: LD_EXP 126
36175: PUSH
36176: LD_VAR 0 5
36180: ARRAY
36181: PUSH
36182: LD_VAR 0 4
36186: ARRAY
36187: PUSH
36188: LD_INT 1
36190: ARRAY
36191: PUSH
36192: LD_VAR 0 2
36196: EQUAL
36197: IFFALSE 36208
// KillUnit ( vehicle ) ;
36199: LD_VAR 0 2
36203: PPUSH
36204: CALL_OW 66
36208: GO 36168
36210: POP
36211: POP
// end ;
36212: LD_VAR 0 3
36216: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
36217: LD_EXP 130
36221: NOT
36222: IFFALSE 36257
36224: GO 36226
36226: DISABLE
// begin initMiner := true ;
36227: LD_ADDR_EXP 130
36231: PUSH
36232: LD_INT 1
36234: ST_TO_ADDR
// minersList := [ ] ;
36235: LD_ADDR_EXP 131
36239: PUSH
36240: EMPTY
36241: ST_TO_ADDR
// minerMinesList := [ ] ;
36242: LD_ADDR_EXP 132
36246: PUSH
36247: EMPTY
36248: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
36249: LD_ADDR_EXP 133
36253: PUSH
36254: LD_INT 5
36256: ST_TO_ADDR
// end ;
36257: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
36258: LD_EXP 130
36262: PUSH
36263: LD_INT 34
36265: PUSH
36266: LD_EXP 52
36270: PUSH
36271: EMPTY
36272: LIST
36273: LIST
36274: PPUSH
36275: CALL_OW 69
36279: AND
36280: IFFALSE 36743
36282: GO 36284
36284: DISABLE
36285: LD_INT 0
36287: PPUSH
36288: PPUSH
36289: PPUSH
36290: PPUSH
// begin enable ;
36291: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
36292: LD_ADDR_VAR 0 1
36296: PUSH
36297: LD_INT 34
36299: PUSH
36300: LD_EXP 52
36304: PUSH
36305: EMPTY
36306: LIST
36307: LIST
36308: PPUSH
36309: CALL_OW 69
36313: PUSH
36314: FOR_IN
36315: IFFALSE 36387
// begin if not i in minersList then
36317: LD_VAR 0 1
36321: PUSH
36322: LD_EXP 131
36326: IN
36327: NOT
36328: IFFALSE 36385
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
36330: LD_ADDR_EXP 131
36334: PUSH
36335: LD_EXP 131
36339: PPUSH
36340: LD_EXP 131
36344: PUSH
36345: LD_INT 1
36347: PLUS
36348: PPUSH
36349: LD_VAR 0 1
36353: PPUSH
36354: CALL_OW 1
36358: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
36359: LD_ADDR_EXP 132
36363: PUSH
36364: LD_EXP 132
36368: PPUSH
36369: LD_EXP 132
36373: PUSH
36374: LD_INT 1
36376: PLUS
36377: PPUSH
36378: EMPTY
36379: PPUSH
36380: CALL_OW 1
36384: ST_TO_ADDR
// end end ;
36385: GO 36314
36387: POP
36388: POP
// for i := minerMinesList downto 1 do
36389: LD_ADDR_VAR 0 1
36393: PUSH
36394: DOUBLE
36395: LD_EXP 132
36399: INC
36400: ST_TO_ADDR
36401: LD_INT 1
36403: PUSH
36404: FOR_DOWNTO
36405: IFFALSE 36741
// begin if IsLive ( minersList [ i ] ) then
36407: LD_EXP 131
36411: PUSH
36412: LD_VAR 0 1
36416: ARRAY
36417: PPUSH
36418: CALL_OW 300
36422: IFFALSE 36450
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
36424: LD_EXP 131
36428: PUSH
36429: LD_VAR 0 1
36433: ARRAY
36434: PPUSH
36435: LD_EXP 132
36439: PUSH
36440: LD_VAR 0 1
36444: ARRAY
36445: PPUSH
36446: CALL_OW 505
// if not minerMinesList [ i ] then
36450: LD_EXP 132
36454: PUSH
36455: LD_VAR 0 1
36459: ARRAY
36460: NOT
36461: IFFALSE 36465
// continue ;
36463: GO 36404
// for j := minerMinesList [ i ] downto 1 do
36465: LD_ADDR_VAR 0 2
36469: PUSH
36470: DOUBLE
36471: LD_EXP 132
36475: PUSH
36476: LD_VAR 0 1
36480: ARRAY
36481: INC
36482: ST_TO_ADDR
36483: LD_INT 1
36485: PUSH
36486: FOR_DOWNTO
36487: IFFALSE 36737
// begin side := GetSide ( minersList [ i ] ) ;
36489: LD_ADDR_VAR 0 3
36493: PUSH
36494: LD_EXP 131
36498: PUSH
36499: LD_VAR 0 1
36503: ARRAY
36504: PPUSH
36505: CALL_OW 255
36509: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
36510: LD_ADDR_VAR 0 4
36514: PUSH
36515: LD_EXP 132
36519: PUSH
36520: LD_VAR 0 1
36524: ARRAY
36525: PUSH
36526: LD_VAR 0 2
36530: ARRAY
36531: PUSH
36532: LD_INT 1
36534: ARRAY
36535: PPUSH
36536: LD_EXP 132
36540: PUSH
36541: LD_VAR 0 1
36545: ARRAY
36546: PUSH
36547: LD_VAR 0 2
36551: ARRAY
36552: PUSH
36553: LD_INT 2
36555: ARRAY
36556: PPUSH
36557: CALL_OW 428
36561: ST_TO_ADDR
// if not tmp then
36562: LD_VAR 0 4
36566: NOT
36567: IFFALSE 36571
// continue ;
36569: GO 36486
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
36571: LD_VAR 0 4
36575: PUSH
36576: LD_INT 81
36578: PUSH
36579: LD_VAR 0 3
36583: PUSH
36584: EMPTY
36585: LIST
36586: LIST
36587: PPUSH
36588: CALL_OW 69
36592: IN
36593: PUSH
36594: LD_EXP 132
36598: PUSH
36599: LD_VAR 0 1
36603: ARRAY
36604: PUSH
36605: LD_VAR 0 2
36609: ARRAY
36610: PUSH
36611: LD_INT 1
36613: ARRAY
36614: PPUSH
36615: LD_EXP 132
36619: PUSH
36620: LD_VAR 0 1
36624: ARRAY
36625: PUSH
36626: LD_VAR 0 2
36630: ARRAY
36631: PUSH
36632: LD_INT 2
36634: ARRAY
36635: PPUSH
36636: CALL_OW 458
36640: AND
36641: IFFALSE 36735
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
36643: LD_EXP 132
36647: PUSH
36648: LD_VAR 0 1
36652: ARRAY
36653: PUSH
36654: LD_VAR 0 2
36658: ARRAY
36659: PUSH
36660: LD_INT 1
36662: ARRAY
36663: PPUSH
36664: LD_EXP 132
36668: PUSH
36669: LD_VAR 0 1
36673: ARRAY
36674: PUSH
36675: LD_VAR 0 2
36679: ARRAY
36680: PUSH
36681: LD_INT 2
36683: ARRAY
36684: PPUSH
36685: LD_VAR 0 3
36689: PPUSH
36690: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
36694: LD_ADDR_EXP 132
36698: PUSH
36699: LD_EXP 132
36703: PPUSH
36704: LD_VAR 0 1
36708: PPUSH
36709: LD_EXP 132
36713: PUSH
36714: LD_VAR 0 1
36718: ARRAY
36719: PPUSH
36720: LD_VAR 0 2
36724: PPUSH
36725: CALL_OW 3
36729: PPUSH
36730: CALL_OW 1
36734: ST_TO_ADDR
// end ; end ;
36735: GO 36486
36737: POP
36738: POP
// end ;
36739: GO 36404
36741: POP
36742: POP
// end ;
36743: PPOPN 4
36745: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
36746: LD_INT 0
36748: PPUSH
36749: PPUSH
// result := false ;
36750: LD_ADDR_VAR 0 4
36754: PUSH
36755: LD_INT 0
36757: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
36758: LD_VAR 0 1
36762: PPUSH
36763: CALL_OW 264
36767: PUSH
36768: LD_EXP 52
36772: EQUAL
36773: NOT
36774: IFFALSE 36778
// exit ;
36776: GO 37018
// index := GetElementIndex ( minersList , unit ) ;
36778: LD_ADDR_VAR 0 5
36782: PUSH
36783: LD_EXP 131
36787: PPUSH
36788: LD_VAR 0 1
36792: PPUSH
36793: CALL 43002 0 2
36797: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
36798: LD_EXP 132
36802: PUSH
36803: LD_VAR 0 5
36807: ARRAY
36808: PUSH
36809: LD_EXP 133
36813: GREATEREQUAL
36814: IFFALSE 36818
// exit ;
36816: GO 37018
// ComMoveXY ( unit , x , y ) ;
36818: LD_VAR 0 1
36822: PPUSH
36823: LD_VAR 0 2
36827: PPUSH
36828: LD_VAR 0 3
36832: PPUSH
36833: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
36837: LD_INT 35
36839: PPUSH
36840: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
36844: LD_VAR 0 1
36848: PPUSH
36849: LD_VAR 0 2
36853: PPUSH
36854: LD_VAR 0 3
36858: PPUSH
36859: CALL 73721 0 3
36863: NOT
36864: PUSH
36865: LD_VAR 0 1
36869: PPUSH
36870: CALL_OW 314
36874: AND
36875: IFFALSE 36879
// exit ;
36877: GO 37018
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
36879: LD_VAR 0 2
36883: PPUSH
36884: LD_VAR 0 3
36888: PPUSH
36889: CALL_OW 428
36893: PUSH
36894: LD_VAR 0 1
36898: EQUAL
36899: PUSH
36900: LD_VAR 0 1
36904: PPUSH
36905: CALL_OW 314
36909: NOT
36910: AND
36911: IFFALSE 36837
// PlaySoundXY ( x , y , PlantMine ) ;
36913: LD_VAR 0 2
36917: PPUSH
36918: LD_VAR 0 3
36922: PPUSH
36923: LD_STRING PlantMine
36925: PPUSH
36926: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
36930: LD_VAR 0 2
36934: PPUSH
36935: LD_VAR 0 3
36939: PPUSH
36940: LD_VAR 0 1
36944: PPUSH
36945: CALL_OW 255
36949: PPUSH
36950: LD_INT 0
36952: PPUSH
36953: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
36957: LD_ADDR_EXP 132
36961: PUSH
36962: LD_EXP 132
36966: PPUSH
36967: LD_VAR 0 5
36971: PUSH
36972: LD_EXP 132
36976: PUSH
36977: LD_VAR 0 5
36981: ARRAY
36982: PUSH
36983: LD_INT 1
36985: PLUS
36986: PUSH
36987: EMPTY
36988: LIST
36989: LIST
36990: PPUSH
36991: LD_VAR 0 2
36995: PUSH
36996: LD_VAR 0 3
37000: PUSH
37001: EMPTY
37002: LIST
37003: LIST
37004: PPUSH
37005: CALL 43217 0 3
37009: ST_TO_ADDR
// result := true ;
37010: LD_ADDR_VAR 0 4
37014: PUSH
37015: LD_INT 1
37017: ST_TO_ADDR
// end ;
37018: LD_VAR 0 4
37022: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
37023: LD_INT 0
37025: PPUSH
37026: PPUSH
37027: PPUSH
// if not unit in minersList then
37028: LD_VAR 0 1
37032: PUSH
37033: LD_EXP 131
37037: IN
37038: NOT
37039: IFFALSE 37043
// exit ;
37041: GO 37435
// index := GetElementIndex ( minersList , unit ) ;
37043: LD_ADDR_VAR 0 6
37047: PUSH
37048: LD_EXP 131
37052: PPUSH
37053: LD_VAR 0 1
37057: PPUSH
37058: CALL 43002 0 2
37062: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
37063: LD_ADDR_VAR 0 5
37067: PUSH
37068: DOUBLE
37069: LD_EXP 132
37073: PUSH
37074: LD_VAR 0 6
37078: ARRAY
37079: INC
37080: ST_TO_ADDR
37081: LD_INT 1
37083: PUSH
37084: FOR_DOWNTO
37085: IFFALSE 37246
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
37087: LD_EXP 132
37091: PUSH
37092: LD_VAR 0 6
37096: ARRAY
37097: PUSH
37098: LD_VAR 0 5
37102: ARRAY
37103: PUSH
37104: LD_INT 1
37106: ARRAY
37107: PUSH
37108: LD_VAR 0 2
37112: EQUAL
37113: PUSH
37114: LD_EXP 132
37118: PUSH
37119: LD_VAR 0 6
37123: ARRAY
37124: PUSH
37125: LD_VAR 0 5
37129: ARRAY
37130: PUSH
37131: LD_INT 2
37133: ARRAY
37134: PUSH
37135: LD_VAR 0 3
37139: EQUAL
37140: AND
37141: IFFALSE 37244
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
37143: LD_EXP 132
37147: PUSH
37148: LD_VAR 0 6
37152: ARRAY
37153: PUSH
37154: LD_VAR 0 5
37158: ARRAY
37159: PUSH
37160: LD_INT 1
37162: ARRAY
37163: PPUSH
37164: LD_EXP 132
37168: PUSH
37169: LD_VAR 0 6
37173: ARRAY
37174: PUSH
37175: LD_VAR 0 5
37179: ARRAY
37180: PUSH
37181: LD_INT 2
37183: ARRAY
37184: PPUSH
37185: LD_VAR 0 1
37189: PPUSH
37190: CALL_OW 255
37194: PPUSH
37195: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
37199: LD_ADDR_EXP 132
37203: PUSH
37204: LD_EXP 132
37208: PPUSH
37209: LD_VAR 0 6
37213: PPUSH
37214: LD_EXP 132
37218: PUSH
37219: LD_VAR 0 6
37223: ARRAY
37224: PPUSH
37225: LD_VAR 0 5
37229: PPUSH
37230: CALL_OW 3
37234: PPUSH
37235: CALL_OW 1
37239: ST_TO_ADDR
// exit ;
37240: POP
37241: POP
37242: GO 37435
// end ; end ;
37244: GO 37084
37246: POP
37247: POP
// for i := minerMinesList [ index ] downto 1 do
37248: LD_ADDR_VAR 0 5
37252: PUSH
37253: DOUBLE
37254: LD_EXP 132
37258: PUSH
37259: LD_VAR 0 6
37263: ARRAY
37264: INC
37265: ST_TO_ADDR
37266: LD_INT 1
37268: PUSH
37269: FOR_DOWNTO
37270: IFFALSE 37433
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
37272: LD_EXP 132
37276: PUSH
37277: LD_VAR 0 6
37281: ARRAY
37282: PUSH
37283: LD_VAR 0 5
37287: ARRAY
37288: PUSH
37289: LD_INT 1
37291: ARRAY
37292: PPUSH
37293: LD_EXP 132
37297: PUSH
37298: LD_VAR 0 6
37302: ARRAY
37303: PUSH
37304: LD_VAR 0 5
37308: ARRAY
37309: PUSH
37310: LD_INT 2
37312: ARRAY
37313: PPUSH
37314: LD_VAR 0 2
37318: PPUSH
37319: LD_VAR 0 3
37323: PPUSH
37324: CALL_OW 298
37328: PUSH
37329: LD_INT 6
37331: LESS
37332: IFFALSE 37431
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
37334: LD_EXP 132
37338: PUSH
37339: LD_VAR 0 6
37343: ARRAY
37344: PUSH
37345: LD_VAR 0 5
37349: ARRAY
37350: PUSH
37351: LD_INT 1
37353: ARRAY
37354: PPUSH
37355: LD_EXP 132
37359: PUSH
37360: LD_VAR 0 6
37364: ARRAY
37365: PUSH
37366: LD_VAR 0 5
37370: ARRAY
37371: PUSH
37372: LD_INT 2
37374: ARRAY
37375: PPUSH
37376: LD_VAR 0 1
37380: PPUSH
37381: CALL_OW 255
37385: PPUSH
37386: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
37390: LD_ADDR_EXP 132
37394: PUSH
37395: LD_EXP 132
37399: PPUSH
37400: LD_VAR 0 6
37404: PPUSH
37405: LD_EXP 132
37409: PUSH
37410: LD_VAR 0 6
37414: ARRAY
37415: PPUSH
37416: LD_VAR 0 5
37420: PPUSH
37421: CALL_OW 3
37425: PPUSH
37426: CALL_OW 1
37430: ST_TO_ADDR
// end ; end ;
37431: GO 37269
37433: POP
37434: POP
// end ;
37435: LD_VAR 0 4
37439: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
37440: LD_INT 0
37442: PPUSH
37443: PPUSH
37444: PPUSH
37445: PPUSH
37446: PPUSH
37447: PPUSH
37448: PPUSH
37449: PPUSH
37450: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
37451: LD_VAR 0 1
37455: PPUSH
37456: CALL_OW 264
37460: PUSH
37461: LD_EXP 52
37465: EQUAL
37466: NOT
37467: PUSH
37468: LD_VAR 0 1
37472: PUSH
37473: LD_EXP 131
37477: IN
37478: NOT
37479: OR
37480: IFFALSE 37484
// exit ;
37482: GO 37806
// index := GetElementIndex ( minersList , unit ) ;
37484: LD_ADDR_VAR 0 6
37488: PUSH
37489: LD_EXP 131
37493: PPUSH
37494: LD_VAR 0 1
37498: PPUSH
37499: CALL 43002 0 2
37503: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
37504: LD_ADDR_VAR 0 8
37508: PUSH
37509: LD_EXP 133
37513: PUSH
37514: LD_EXP 132
37518: PUSH
37519: LD_VAR 0 6
37523: ARRAY
37524: MINUS
37525: ST_TO_ADDR
// if not minesFreeAmount then
37526: LD_VAR 0 8
37530: NOT
37531: IFFALSE 37535
// exit ;
37533: GO 37806
// tmp := [ ] ;
37535: LD_ADDR_VAR 0 7
37539: PUSH
37540: EMPTY
37541: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
37542: LD_ADDR_VAR 0 5
37546: PUSH
37547: DOUBLE
37548: LD_INT 1
37550: DEC
37551: ST_TO_ADDR
37552: LD_VAR 0 8
37556: PUSH
37557: FOR_TO
37558: IFFALSE 37753
// begin _d := rand ( 0 , 5 ) ;
37560: LD_ADDR_VAR 0 11
37564: PUSH
37565: LD_INT 0
37567: PPUSH
37568: LD_INT 5
37570: PPUSH
37571: CALL_OW 12
37575: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
37576: LD_ADDR_VAR 0 12
37580: PUSH
37581: LD_INT 2
37583: PPUSH
37584: LD_INT 6
37586: PPUSH
37587: CALL_OW 12
37591: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
37592: LD_ADDR_VAR 0 9
37596: PUSH
37597: LD_VAR 0 2
37601: PPUSH
37602: LD_VAR 0 11
37606: PPUSH
37607: LD_VAR 0 12
37611: PPUSH
37612: CALL_OW 272
37616: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
37617: LD_ADDR_VAR 0 10
37621: PUSH
37622: LD_VAR 0 3
37626: PPUSH
37627: LD_VAR 0 11
37631: PPUSH
37632: LD_VAR 0 12
37636: PPUSH
37637: CALL_OW 273
37641: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
37642: LD_VAR 0 9
37646: PPUSH
37647: LD_VAR 0 10
37651: PPUSH
37652: CALL_OW 488
37656: PUSH
37657: LD_VAR 0 9
37661: PUSH
37662: LD_VAR 0 10
37666: PUSH
37667: EMPTY
37668: LIST
37669: LIST
37670: PUSH
37671: LD_VAR 0 7
37675: IN
37676: NOT
37677: AND
37678: PUSH
37679: LD_VAR 0 9
37683: PPUSH
37684: LD_VAR 0 10
37688: PPUSH
37689: CALL_OW 458
37693: NOT
37694: AND
37695: IFFALSE 37737
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
37697: LD_ADDR_VAR 0 7
37701: PUSH
37702: LD_VAR 0 7
37706: PPUSH
37707: LD_VAR 0 7
37711: PUSH
37712: LD_INT 1
37714: PLUS
37715: PPUSH
37716: LD_VAR 0 9
37720: PUSH
37721: LD_VAR 0 10
37725: PUSH
37726: EMPTY
37727: LIST
37728: LIST
37729: PPUSH
37730: CALL_OW 1
37734: ST_TO_ADDR
37735: GO 37751
// i := i - 1 ;
37737: LD_ADDR_VAR 0 5
37741: PUSH
37742: LD_VAR 0 5
37746: PUSH
37747: LD_INT 1
37749: MINUS
37750: ST_TO_ADDR
// end ;
37751: GO 37557
37753: POP
37754: POP
// for i in tmp do
37755: LD_ADDR_VAR 0 5
37759: PUSH
37760: LD_VAR 0 7
37764: PUSH
37765: FOR_IN
37766: IFFALSE 37804
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
37768: LD_VAR 0 1
37772: PPUSH
37773: LD_VAR 0 5
37777: PUSH
37778: LD_INT 1
37780: ARRAY
37781: PPUSH
37782: LD_VAR 0 5
37786: PUSH
37787: LD_INT 2
37789: ARRAY
37790: PPUSH
37791: CALL 36746 0 3
37795: NOT
37796: IFFALSE 37802
// exit ;
37798: POP
37799: POP
37800: GO 37806
37802: GO 37765
37804: POP
37805: POP
// end ;
37806: LD_VAR 0 4
37810: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
37811: LD_INT 0
37813: PPUSH
37814: PPUSH
37815: PPUSH
37816: PPUSH
37817: PPUSH
37818: PPUSH
37819: PPUSH
// if not GetClass ( unit ) = class_sniper then
37820: LD_VAR 0 1
37824: PPUSH
37825: CALL_OW 257
37829: PUSH
37830: LD_INT 5
37832: EQUAL
37833: NOT
37834: IFFALSE 37838
// exit ;
37836: GO 38226
// dist := 8 ;
37838: LD_ADDR_VAR 0 5
37842: PUSH
37843: LD_INT 8
37845: ST_TO_ADDR
// viewRange := 12 ;
37846: LD_ADDR_VAR 0 7
37850: PUSH
37851: LD_INT 12
37853: ST_TO_ADDR
// side := GetSide ( unit ) ;
37854: LD_ADDR_VAR 0 6
37858: PUSH
37859: LD_VAR 0 1
37863: PPUSH
37864: CALL_OW 255
37868: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
37869: LD_INT 61
37871: PPUSH
37872: LD_VAR 0 6
37876: PPUSH
37877: CALL_OW 321
37881: PUSH
37882: LD_INT 2
37884: EQUAL
37885: IFFALSE 37895
// viewRange := 16 ;
37887: LD_ADDR_VAR 0 7
37891: PUSH
37892: LD_INT 16
37894: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
37895: LD_VAR 0 1
37899: PPUSH
37900: LD_VAR 0 2
37904: PPUSH
37905: LD_VAR 0 3
37909: PPUSH
37910: CALL_OW 297
37914: PUSH
37915: LD_VAR 0 5
37919: GREATER
37920: IFFALSE 37999
// begin ComMoveXY ( unit , x , y ) ;
37922: LD_VAR 0 1
37926: PPUSH
37927: LD_VAR 0 2
37931: PPUSH
37932: LD_VAR 0 3
37936: PPUSH
37937: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
37941: LD_INT 35
37943: PPUSH
37944: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
37948: LD_VAR 0 1
37952: PPUSH
37953: LD_VAR 0 2
37957: PPUSH
37958: LD_VAR 0 3
37962: PPUSH
37963: CALL 73721 0 3
37967: NOT
37968: IFFALSE 37972
// exit ;
37970: GO 38226
// until GetDistUnitXY ( unit , x , y ) < dist ;
37972: LD_VAR 0 1
37976: PPUSH
37977: LD_VAR 0 2
37981: PPUSH
37982: LD_VAR 0 3
37986: PPUSH
37987: CALL_OW 297
37991: PUSH
37992: LD_VAR 0 5
37996: LESS
37997: IFFALSE 37941
// end ; ComTurnXY ( unit , x , y ) ;
37999: LD_VAR 0 1
38003: PPUSH
38004: LD_VAR 0 2
38008: PPUSH
38009: LD_VAR 0 3
38013: PPUSH
38014: CALL_OW 118
// wait ( 5 ) ;
38018: LD_INT 5
38020: PPUSH
38021: CALL_OW 67
// _d := GetDir ( unit ) ;
38025: LD_ADDR_VAR 0 10
38029: PUSH
38030: LD_VAR 0 1
38034: PPUSH
38035: CALL_OW 254
38039: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
38040: LD_ADDR_VAR 0 8
38044: PUSH
38045: LD_VAR 0 1
38049: PPUSH
38050: CALL_OW 250
38054: PPUSH
38055: LD_VAR 0 10
38059: PPUSH
38060: LD_VAR 0 5
38064: PPUSH
38065: CALL_OW 272
38069: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
38070: LD_ADDR_VAR 0 9
38074: PUSH
38075: LD_VAR 0 1
38079: PPUSH
38080: CALL_OW 251
38084: PPUSH
38085: LD_VAR 0 10
38089: PPUSH
38090: LD_VAR 0 5
38094: PPUSH
38095: CALL_OW 273
38099: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38100: LD_VAR 0 8
38104: PPUSH
38105: LD_VAR 0 9
38109: PPUSH
38110: CALL_OW 488
38114: NOT
38115: IFFALSE 38119
// exit ;
38117: GO 38226
// ComAnimCustom ( unit , 1 ) ;
38119: LD_VAR 0 1
38123: PPUSH
38124: LD_INT 1
38126: PPUSH
38127: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
38131: LD_VAR 0 8
38135: PPUSH
38136: LD_VAR 0 9
38140: PPUSH
38141: LD_VAR 0 6
38145: PPUSH
38146: LD_VAR 0 7
38150: PPUSH
38151: CALL_OW 330
// repeat wait ( 1 ) ;
38155: LD_INT 1
38157: PPUSH
38158: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
38162: LD_VAR 0 1
38166: PPUSH
38167: CALL_OW 316
38171: PUSH
38172: LD_VAR 0 1
38176: PPUSH
38177: CALL_OW 314
38181: OR
38182: PUSH
38183: LD_VAR 0 1
38187: PPUSH
38188: CALL_OW 302
38192: NOT
38193: OR
38194: PUSH
38195: LD_VAR 0 1
38199: PPUSH
38200: CALL_OW 301
38204: OR
38205: IFFALSE 38155
// RemoveSeeing ( _x , _y , side ) ;
38207: LD_VAR 0 8
38211: PPUSH
38212: LD_VAR 0 9
38216: PPUSH
38217: LD_VAR 0 6
38221: PPUSH
38222: CALL_OW 331
// end ; end_of_file
38226: LD_VAR 0 4
38230: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
38231: LD_INT 0
38233: PPUSH
38234: PPUSH
// if exist_mode then
38235: LD_VAR 0 2
38239: IFFALSE 38264
// unit := CreateCharacter ( prefix & ident ) else
38241: LD_ADDR_VAR 0 5
38245: PUSH
38246: LD_VAR 0 3
38250: PUSH
38251: LD_VAR 0 1
38255: STR
38256: PPUSH
38257: CALL_OW 34
38261: ST_TO_ADDR
38262: GO 38279
// unit := NewCharacter ( ident ) ;
38264: LD_ADDR_VAR 0 5
38268: PUSH
38269: LD_VAR 0 1
38273: PPUSH
38274: CALL_OW 25
38278: ST_TO_ADDR
// result := unit ;
38279: LD_ADDR_VAR 0 4
38283: PUSH
38284: LD_VAR 0 5
38288: ST_TO_ADDR
// end ;
38289: LD_VAR 0 4
38293: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
38294: LD_INT 0
38296: PPUSH
38297: PPUSH
// if not side or not nation then
38298: LD_VAR 0 1
38302: NOT
38303: PUSH
38304: LD_VAR 0 2
38308: NOT
38309: OR
38310: IFFALSE 38314
// exit ;
38312: GO 39082
// case nation of nation_american :
38314: LD_VAR 0 2
38318: PUSH
38319: LD_INT 1
38321: DOUBLE
38322: EQUAL
38323: IFTRUE 38327
38325: GO 38541
38327: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
38328: LD_ADDR_VAR 0 4
38332: PUSH
38333: LD_INT 35
38335: PUSH
38336: LD_INT 45
38338: PUSH
38339: LD_INT 46
38341: PUSH
38342: LD_INT 47
38344: PUSH
38345: LD_INT 82
38347: PUSH
38348: LD_INT 83
38350: PUSH
38351: LD_INT 84
38353: PUSH
38354: LD_INT 85
38356: PUSH
38357: LD_INT 86
38359: PUSH
38360: LD_INT 1
38362: PUSH
38363: LD_INT 2
38365: PUSH
38366: LD_INT 6
38368: PUSH
38369: LD_INT 15
38371: PUSH
38372: LD_INT 16
38374: PUSH
38375: LD_INT 7
38377: PUSH
38378: LD_INT 12
38380: PUSH
38381: LD_INT 13
38383: PUSH
38384: LD_INT 10
38386: PUSH
38387: LD_INT 14
38389: PUSH
38390: LD_INT 20
38392: PUSH
38393: LD_INT 21
38395: PUSH
38396: LD_INT 22
38398: PUSH
38399: LD_INT 25
38401: PUSH
38402: LD_INT 32
38404: PUSH
38405: LD_INT 27
38407: PUSH
38408: LD_INT 36
38410: PUSH
38411: LD_INT 69
38413: PUSH
38414: LD_INT 39
38416: PUSH
38417: LD_INT 34
38419: PUSH
38420: LD_INT 40
38422: PUSH
38423: LD_INT 48
38425: PUSH
38426: LD_INT 49
38428: PUSH
38429: LD_INT 50
38431: PUSH
38432: LD_INT 51
38434: PUSH
38435: LD_INT 52
38437: PUSH
38438: LD_INT 53
38440: PUSH
38441: LD_INT 54
38443: PUSH
38444: LD_INT 55
38446: PUSH
38447: LD_INT 56
38449: PUSH
38450: LD_INT 57
38452: PUSH
38453: LD_INT 58
38455: PUSH
38456: LD_INT 59
38458: PUSH
38459: LD_INT 60
38461: PUSH
38462: LD_INT 61
38464: PUSH
38465: LD_INT 62
38467: PUSH
38468: LD_INT 80
38470: PUSH
38471: LD_INT 82
38473: PUSH
38474: LD_INT 83
38476: PUSH
38477: LD_INT 84
38479: PUSH
38480: LD_INT 85
38482: PUSH
38483: LD_INT 86
38485: PUSH
38486: EMPTY
38487: LIST
38488: LIST
38489: LIST
38490: LIST
38491: LIST
38492: LIST
38493: LIST
38494: LIST
38495: LIST
38496: LIST
38497: LIST
38498: LIST
38499: LIST
38500: LIST
38501: LIST
38502: LIST
38503: LIST
38504: LIST
38505: LIST
38506: LIST
38507: LIST
38508: LIST
38509: LIST
38510: LIST
38511: LIST
38512: LIST
38513: LIST
38514: LIST
38515: LIST
38516: LIST
38517: LIST
38518: LIST
38519: LIST
38520: LIST
38521: LIST
38522: LIST
38523: LIST
38524: LIST
38525: LIST
38526: LIST
38527: LIST
38528: LIST
38529: LIST
38530: LIST
38531: LIST
38532: LIST
38533: LIST
38534: LIST
38535: LIST
38536: LIST
38537: LIST
38538: ST_TO_ADDR
38539: GO 39006
38541: LD_INT 2
38543: DOUBLE
38544: EQUAL
38545: IFTRUE 38549
38547: GO 38775
38549: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
38550: LD_ADDR_VAR 0 4
38554: PUSH
38555: LD_INT 35
38557: PUSH
38558: LD_INT 45
38560: PUSH
38561: LD_INT 46
38563: PUSH
38564: LD_INT 47
38566: PUSH
38567: LD_INT 82
38569: PUSH
38570: LD_INT 83
38572: PUSH
38573: LD_INT 84
38575: PUSH
38576: LD_INT 85
38578: PUSH
38579: LD_INT 87
38581: PUSH
38582: LD_INT 70
38584: PUSH
38585: LD_INT 1
38587: PUSH
38588: LD_INT 11
38590: PUSH
38591: LD_INT 3
38593: PUSH
38594: LD_INT 4
38596: PUSH
38597: LD_INT 5
38599: PUSH
38600: LD_INT 6
38602: PUSH
38603: LD_INT 15
38605: PUSH
38606: LD_INT 18
38608: PUSH
38609: LD_INT 7
38611: PUSH
38612: LD_INT 17
38614: PUSH
38615: LD_INT 8
38617: PUSH
38618: LD_INT 20
38620: PUSH
38621: LD_INT 21
38623: PUSH
38624: LD_INT 22
38626: PUSH
38627: LD_INT 72
38629: PUSH
38630: LD_INT 26
38632: PUSH
38633: LD_INT 69
38635: PUSH
38636: LD_INT 39
38638: PUSH
38639: LD_INT 40
38641: PUSH
38642: LD_INT 41
38644: PUSH
38645: LD_INT 42
38647: PUSH
38648: LD_INT 43
38650: PUSH
38651: LD_INT 48
38653: PUSH
38654: LD_INT 49
38656: PUSH
38657: LD_INT 50
38659: PUSH
38660: LD_INT 51
38662: PUSH
38663: LD_INT 52
38665: PUSH
38666: LD_INT 53
38668: PUSH
38669: LD_INT 54
38671: PUSH
38672: LD_INT 55
38674: PUSH
38675: LD_INT 56
38677: PUSH
38678: LD_INT 60
38680: PUSH
38681: LD_INT 61
38683: PUSH
38684: LD_INT 62
38686: PUSH
38687: LD_INT 66
38689: PUSH
38690: LD_INT 67
38692: PUSH
38693: LD_INT 68
38695: PUSH
38696: LD_INT 81
38698: PUSH
38699: LD_INT 82
38701: PUSH
38702: LD_INT 83
38704: PUSH
38705: LD_INT 84
38707: PUSH
38708: LD_INT 85
38710: PUSH
38711: LD_INT 87
38713: PUSH
38714: LD_INT 88
38716: PUSH
38717: EMPTY
38718: LIST
38719: LIST
38720: LIST
38721: LIST
38722: LIST
38723: LIST
38724: LIST
38725: LIST
38726: LIST
38727: LIST
38728: LIST
38729: LIST
38730: LIST
38731: LIST
38732: LIST
38733: LIST
38734: LIST
38735: LIST
38736: LIST
38737: LIST
38738: LIST
38739: LIST
38740: LIST
38741: LIST
38742: LIST
38743: LIST
38744: LIST
38745: LIST
38746: LIST
38747: LIST
38748: LIST
38749: LIST
38750: LIST
38751: LIST
38752: LIST
38753: LIST
38754: LIST
38755: LIST
38756: LIST
38757: LIST
38758: LIST
38759: LIST
38760: LIST
38761: LIST
38762: LIST
38763: LIST
38764: LIST
38765: LIST
38766: LIST
38767: LIST
38768: LIST
38769: LIST
38770: LIST
38771: LIST
38772: ST_TO_ADDR
38773: GO 39006
38775: LD_INT 3
38777: DOUBLE
38778: EQUAL
38779: IFTRUE 38783
38781: GO 39005
38783: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
38784: LD_ADDR_VAR 0 4
38788: PUSH
38789: LD_INT 46
38791: PUSH
38792: LD_INT 47
38794: PUSH
38795: LD_INT 1
38797: PUSH
38798: LD_INT 2
38800: PUSH
38801: LD_INT 82
38803: PUSH
38804: LD_INT 83
38806: PUSH
38807: LD_INT 84
38809: PUSH
38810: LD_INT 85
38812: PUSH
38813: LD_INT 86
38815: PUSH
38816: LD_INT 11
38818: PUSH
38819: LD_INT 9
38821: PUSH
38822: LD_INT 20
38824: PUSH
38825: LD_INT 19
38827: PUSH
38828: LD_INT 21
38830: PUSH
38831: LD_INT 24
38833: PUSH
38834: LD_INT 22
38836: PUSH
38837: LD_INT 25
38839: PUSH
38840: LD_INT 28
38842: PUSH
38843: LD_INT 29
38845: PUSH
38846: LD_INT 30
38848: PUSH
38849: LD_INT 31
38851: PUSH
38852: LD_INT 37
38854: PUSH
38855: LD_INT 38
38857: PUSH
38858: LD_INT 32
38860: PUSH
38861: LD_INT 27
38863: PUSH
38864: LD_INT 33
38866: PUSH
38867: LD_INT 69
38869: PUSH
38870: LD_INT 39
38872: PUSH
38873: LD_INT 34
38875: PUSH
38876: LD_INT 40
38878: PUSH
38879: LD_INT 71
38881: PUSH
38882: LD_INT 23
38884: PUSH
38885: LD_INT 44
38887: PUSH
38888: LD_INT 48
38890: PUSH
38891: LD_INT 49
38893: PUSH
38894: LD_INT 50
38896: PUSH
38897: LD_INT 51
38899: PUSH
38900: LD_INT 52
38902: PUSH
38903: LD_INT 53
38905: PUSH
38906: LD_INT 54
38908: PUSH
38909: LD_INT 55
38911: PUSH
38912: LD_INT 56
38914: PUSH
38915: LD_INT 57
38917: PUSH
38918: LD_INT 58
38920: PUSH
38921: LD_INT 59
38923: PUSH
38924: LD_INT 63
38926: PUSH
38927: LD_INT 64
38929: PUSH
38930: LD_INT 65
38932: PUSH
38933: LD_INT 82
38935: PUSH
38936: LD_INT 83
38938: PUSH
38939: LD_INT 84
38941: PUSH
38942: LD_INT 85
38944: PUSH
38945: LD_INT 86
38947: PUSH
38948: EMPTY
38949: LIST
38950: LIST
38951: LIST
38952: LIST
38953: LIST
38954: LIST
38955: LIST
38956: LIST
38957: LIST
38958: LIST
38959: LIST
38960: LIST
38961: LIST
38962: LIST
38963: LIST
38964: LIST
38965: LIST
38966: LIST
38967: LIST
38968: LIST
38969: LIST
38970: LIST
38971: LIST
38972: LIST
38973: LIST
38974: LIST
38975: LIST
38976: LIST
38977: LIST
38978: LIST
38979: LIST
38980: LIST
38981: LIST
38982: LIST
38983: LIST
38984: LIST
38985: LIST
38986: LIST
38987: LIST
38988: LIST
38989: LIST
38990: LIST
38991: LIST
38992: LIST
38993: LIST
38994: LIST
38995: LIST
38996: LIST
38997: LIST
38998: LIST
38999: LIST
39000: LIST
39001: LIST
39002: ST_TO_ADDR
39003: GO 39006
39005: POP
// if state > - 1 and state < 3 then
39006: LD_VAR 0 3
39010: PUSH
39011: LD_INT 1
39013: NEG
39014: GREATER
39015: PUSH
39016: LD_VAR 0 3
39020: PUSH
39021: LD_INT 3
39023: LESS
39024: AND
39025: IFFALSE 39082
// for i in result do
39027: LD_ADDR_VAR 0 5
39031: PUSH
39032: LD_VAR 0 4
39036: PUSH
39037: FOR_IN
39038: IFFALSE 39080
// if GetTech ( i , side ) <> state then
39040: LD_VAR 0 5
39044: PPUSH
39045: LD_VAR 0 1
39049: PPUSH
39050: CALL_OW 321
39054: PUSH
39055: LD_VAR 0 3
39059: NONEQUAL
39060: IFFALSE 39078
// result := result diff i ;
39062: LD_ADDR_VAR 0 4
39066: PUSH
39067: LD_VAR 0 4
39071: PUSH
39072: LD_VAR 0 5
39076: DIFF
39077: ST_TO_ADDR
39078: GO 39037
39080: POP
39081: POP
// end ;
39082: LD_VAR 0 4
39086: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
39087: LD_INT 0
39089: PPUSH
39090: PPUSH
39091: PPUSH
// result := true ;
39092: LD_ADDR_VAR 0 3
39096: PUSH
39097: LD_INT 1
39099: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
39100: LD_ADDR_VAR 0 5
39104: PUSH
39105: LD_VAR 0 2
39109: PPUSH
39110: CALL_OW 480
39114: ST_TO_ADDR
// if not tmp then
39115: LD_VAR 0 5
39119: NOT
39120: IFFALSE 39124
// exit ;
39122: GO 39173
// for i in tmp do
39124: LD_ADDR_VAR 0 4
39128: PUSH
39129: LD_VAR 0 5
39133: PUSH
39134: FOR_IN
39135: IFFALSE 39171
// if GetTech ( i , side ) <> state_researched then
39137: LD_VAR 0 4
39141: PPUSH
39142: LD_VAR 0 1
39146: PPUSH
39147: CALL_OW 321
39151: PUSH
39152: LD_INT 2
39154: NONEQUAL
39155: IFFALSE 39169
// begin result := false ;
39157: LD_ADDR_VAR 0 3
39161: PUSH
39162: LD_INT 0
39164: ST_TO_ADDR
// exit ;
39165: POP
39166: POP
39167: GO 39173
// end ;
39169: GO 39134
39171: POP
39172: POP
// end ;
39173: LD_VAR 0 3
39177: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
39178: LD_INT 0
39180: PPUSH
39181: PPUSH
39182: PPUSH
39183: PPUSH
39184: PPUSH
39185: PPUSH
39186: PPUSH
39187: PPUSH
39188: PPUSH
39189: PPUSH
39190: PPUSH
39191: PPUSH
39192: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
39193: LD_VAR 0 1
39197: NOT
39198: PUSH
39199: LD_VAR 0 1
39203: PPUSH
39204: CALL_OW 257
39208: PUSH
39209: LD_INT 9
39211: NONEQUAL
39212: OR
39213: IFFALSE 39217
// exit ;
39215: GO 39790
// side := GetSide ( unit ) ;
39217: LD_ADDR_VAR 0 9
39221: PUSH
39222: LD_VAR 0 1
39226: PPUSH
39227: CALL_OW 255
39231: ST_TO_ADDR
// tech_space := tech_spacanom ;
39232: LD_ADDR_VAR 0 12
39236: PUSH
39237: LD_INT 29
39239: ST_TO_ADDR
// tech_time := tech_taurad ;
39240: LD_ADDR_VAR 0 13
39244: PUSH
39245: LD_INT 28
39247: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
39248: LD_ADDR_VAR 0 11
39252: PUSH
39253: LD_VAR 0 1
39257: PPUSH
39258: CALL_OW 310
39262: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
39263: LD_VAR 0 11
39267: PPUSH
39268: CALL_OW 247
39272: PUSH
39273: LD_INT 2
39275: EQUAL
39276: IFFALSE 39280
// exit ;
39278: GO 39790
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
39280: LD_ADDR_VAR 0 8
39284: PUSH
39285: LD_INT 81
39287: PUSH
39288: LD_VAR 0 9
39292: PUSH
39293: EMPTY
39294: LIST
39295: LIST
39296: PUSH
39297: LD_INT 3
39299: PUSH
39300: LD_INT 21
39302: PUSH
39303: LD_INT 3
39305: PUSH
39306: EMPTY
39307: LIST
39308: LIST
39309: PUSH
39310: EMPTY
39311: LIST
39312: LIST
39313: PUSH
39314: EMPTY
39315: LIST
39316: LIST
39317: PPUSH
39318: CALL_OW 69
39322: ST_TO_ADDR
// if not tmp then
39323: LD_VAR 0 8
39327: NOT
39328: IFFALSE 39332
// exit ;
39330: GO 39790
// if in_unit then
39332: LD_VAR 0 11
39336: IFFALSE 39360
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
39338: LD_ADDR_VAR 0 10
39342: PUSH
39343: LD_VAR 0 8
39347: PPUSH
39348: LD_VAR 0 11
39352: PPUSH
39353: CALL_OW 74
39357: ST_TO_ADDR
39358: GO 39380
// enemy := NearestUnitToUnit ( tmp , unit ) ;
39360: LD_ADDR_VAR 0 10
39364: PUSH
39365: LD_VAR 0 8
39369: PPUSH
39370: LD_VAR 0 1
39374: PPUSH
39375: CALL_OW 74
39379: ST_TO_ADDR
// if not enemy then
39380: LD_VAR 0 10
39384: NOT
39385: IFFALSE 39389
// exit ;
39387: GO 39790
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
39389: LD_VAR 0 11
39393: PUSH
39394: LD_VAR 0 11
39398: PPUSH
39399: LD_VAR 0 10
39403: PPUSH
39404: CALL_OW 296
39408: PUSH
39409: LD_INT 13
39411: GREATER
39412: AND
39413: PUSH
39414: LD_VAR 0 1
39418: PPUSH
39419: LD_VAR 0 10
39423: PPUSH
39424: CALL_OW 296
39428: PUSH
39429: LD_INT 12
39431: GREATER
39432: OR
39433: IFFALSE 39437
// exit ;
39435: GO 39790
// missile := [ 1 ] ;
39437: LD_ADDR_VAR 0 14
39441: PUSH
39442: LD_INT 1
39444: PUSH
39445: EMPTY
39446: LIST
39447: ST_TO_ADDR
// if Researched ( side , tech_space ) then
39448: LD_VAR 0 9
39452: PPUSH
39453: LD_VAR 0 12
39457: PPUSH
39458: CALL_OW 325
39462: IFFALSE 39491
// missile := Replace ( missile , missile + 1 , 2 ) ;
39464: LD_ADDR_VAR 0 14
39468: PUSH
39469: LD_VAR 0 14
39473: PPUSH
39474: LD_VAR 0 14
39478: PUSH
39479: LD_INT 1
39481: PLUS
39482: PPUSH
39483: LD_INT 2
39485: PPUSH
39486: CALL_OW 1
39490: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
39491: LD_VAR 0 9
39495: PPUSH
39496: LD_VAR 0 13
39500: PPUSH
39501: CALL_OW 325
39505: PUSH
39506: LD_VAR 0 10
39510: PPUSH
39511: CALL_OW 255
39515: PPUSH
39516: LD_VAR 0 13
39520: PPUSH
39521: CALL_OW 325
39525: NOT
39526: AND
39527: IFFALSE 39556
// missile := Replace ( missile , missile + 1 , 3 ) ;
39529: LD_ADDR_VAR 0 14
39533: PUSH
39534: LD_VAR 0 14
39538: PPUSH
39539: LD_VAR 0 14
39543: PUSH
39544: LD_INT 1
39546: PLUS
39547: PPUSH
39548: LD_INT 3
39550: PPUSH
39551: CALL_OW 1
39555: ST_TO_ADDR
// if missile < 2 then
39556: LD_VAR 0 14
39560: PUSH
39561: LD_INT 2
39563: LESS
39564: IFFALSE 39568
// exit ;
39566: GO 39790
// x := GetX ( enemy ) ;
39568: LD_ADDR_VAR 0 4
39572: PUSH
39573: LD_VAR 0 10
39577: PPUSH
39578: CALL_OW 250
39582: ST_TO_ADDR
// y := GetY ( enemy ) ;
39583: LD_ADDR_VAR 0 5
39587: PUSH
39588: LD_VAR 0 10
39592: PPUSH
39593: CALL_OW 251
39597: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
39598: LD_ADDR_VAR 0 6
39602: PUSH
39603: LD_VAR 0 4
39607: PUSH
39608: LD_INT 1
39610: NEG
39611: PPUSH
39612: LD_INT 1
39614: PPUSH
39615: CALL_OW 12
39619: PLUS
39620: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
39621: LD_ADDR_VAR 0 7
39625: PUSH
39626: LD_VAR 0 5
39630: PUSH
39631: LD_INT 1
39633: NEG
39634: PPUSH
39635: LD_INT 1
39637: PPUSH
39638: CALL_OW 12
39642: PLUS
39643: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39644: LD_VAR 0 6
39648: PPUSH
39649: LD_VAR 0 7
39653: PPUSH
39654: CALL_OW 488
39658: NOT
39659: IFFALSE 39681
// begin _x := x ;
39661: LD_ADDR_VAR 0 6
39665: PUSH
39666: LD_VAR 0 4
39670: ST_TO_ADDR
// _y := y ;
39671: LD_ADDR_VAR 0 7
39675: PUSH
39676: LD_VAR 0 5
39680: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
39681: LD_ADDR_VAR 0 3
39685: PUSH
39686: LD_INT 1
39688: PPUSH
39689: LD_VAR 0 14
39693: PPUSH
39694: CALL_OW 12
39698: ST_TO_ADDR
// case i of 1 :
39699: LD_VAR 0 3
39703: PUSH
39704: LD_INT 1
39706: DOUBLE
39707: EQUAL
39708: IFTRUE 39712
39710: GO 39729
39712: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
39713: LD_VAR 0 1
39717: PPUSH
39718: LD_VAR 0 10
39722: PPUSH
39723: CALL_OW 115
39727: GO 39790
39729: LD_INT 2
39731: DOUBLE
39732: EQUAL
39733: IFTRUE 39737
39735: GO 39759
39737: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
39738: LD_VAR 0 1
39742: PPUSH
39743: LD_VAR 0 6
39747: PPUSH
39748: LD_VAR 0 7
39752: PPUSH
39753: CALL_OW 153
39757: GO 39790
39759: LD_INT 3
39761: DOUBLE
39762: EQUAL
39763: IFTRUE 39767
39765: GO 39789
39767: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
39768: LD_VAR 0 1
39772: PPUSH
39773: LD_VAR 0 6
39777: PPUSH
39778: LD_VAR 0 7
39782: PPUSH
39783: CALL_OW 154
39787: GO 39790
39789: POP
// end ;
39790: LD_VAR 0 2
39794: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
39795: LD_INT 0
39797: PPUSH
39798: PPUSH
39799: PPUSH
39800: PPUSH
39801: PPUSH
39802: PPUSH
// if not unit or not building then
39803: LD_VAR 0 1
39807: NOT
39808: PUSH
39809: LD_VAR 0 2
39813: NOT
39814: OR
39815: IFFALSE 39819
// exit ;
39817: GO 39977
// x := GetX ( building ) ;
39819: LD_ADDR_VAR 0 5
39823: PUSH
39824: LD_VAR 0 2
39828: PPUSH
39829: CALL_OW 250
39833: ST_TO_ADDR
// y := GetY ( building ) ;
39834: LD_ADDR_VAR 0 6
39838: PUSH
39839: LD_VAR 0 2
39843: PPUSH
39844: CALL_OW 251
39848: ST_TO_ADDR
// for i = 0 to 5 do
39849: LD_ADDR_VAR 0 4
39853: PUSH
39854: DOUBLE
39855: LD_INT 0
39857: DEC
39858: ST_TO_ADDR
39859: LD_INT 5
39861: PUSH
39862: FOR_TO
39863: IFFALSE 39975
// begin _x := ShiftX ( x , i , 3 ) ;
39865: LD_ADDR_VAR 0 7
39869: PUSH
39870: LD_VAR 0 5
39874: PPUSH
39875: LD_VAR 0 4
39879: PPUSH
39880: LD_INT 3
39882: PPUSH
39883: CALL_OW 272
39887: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
39888: LD_ADDR_VAR 0 8
39892: PUSH
39893: LD_VAR 0 6
39897: PPUSH
39898: LD_VAR 0 4
39902: PPUSH
39903: LD_INT 3
39905: PPUSH
39906: CALL_OW 273
39910: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39911: LD_VAR 0 7
39915: PPUSH
39916: LD_VAR 0 8
39920: PPUSH
39921: CALL_OW 488
39925: NOT
39926: IFFALSE 39930
// continue ;
39928: GO 39862
// if HexInfo ( _x , _y ) = 0 then
39930: LD_VAR 0 7
39934: PPUSH
39935: LD_VAR 0 8
39939: PPUSH
39940: CALL_OW 428
39944: PUSH
39945: LD_INT 0
39947: EQUAL
39948: IFFALSE 39973
// begin ComMoveXY ( unit , _x , _y ) ;
39950: LD_VAR 0 1
39954: PPUSH
39955: LD_VAR 0 7
39959: PPUSH
39960: LD_VAR 0 8
39964: PPUSH
39965: CALL_OW 111
// exit ;
39969: POP
39970: POP
39971: GO 39977
// end ; end ;
39973: GO 39862
39975: POP
39976: POP
// end ;
39977: LD_VAR 0 3
39981: RET
// export function ScanBase ( side , base_area ) ; begin
39982: LD_INT 0
39984: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
39985: LD_ADDR_VAR 0 3
39989: PUSH
39990: LD_VAR 0 2
39994: PPUSH
39995: LD_INT 81
39997: PUSH
39998: LD_VAR 0 1
40002: PUSH
40003: EMPTY
40004: LIST
40005: LIST
40006: PPUSH
40007: CALL_OW 70
40011: ST_TO_ADDR
// end ;
40012: LD_VAR 0 3
40016: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
40017: LD_INT 0
40019: PPUSH
40020: PPUSH
40021: PPUSH
40022: PPUSH
// result := false ;
40023: LD_ADDR_VAR 0 2
40027: PUSH
40028: LD_INT 0
40030: ST_TO_ADDR
// side := GetSide ( unit ) ;
40031: LD_ADDR_VAR 0 3
40035: PUSH
40036: LD_VAR 0 1
40040: PPUSH
40041: CALL_OW 255
40045: ST_TO_ADDR
// nat := GetNation ( unit ) ;
40046: LD_ADDR_VAR 0 4
40050: PUSH
40051: LD_VAR 0 1
40055: PPUSH
40056: CALL_OW 248
40060: ST_TO_ADDR
// case nat of 1 :
40061: LD_VAR 0 4
40065: PUSH
40066: LD_INT 1
40068: DOUBLE
40069: EQUAL
40070: IFTRUE 40074
40072: GO 40085
40074: POP
// tech := tech_lassight ; 2 :
40075: LD_ADDR_VAR 0 5
40079: PUSH
40080: LD_INT 12
40082: ST_TO_ADDR
40083: GO 40124
40085: LD_INT 2
40087: DOUBLE
40088: EQUAL
40089: IFTRUE 40093
40091: GO 40104
40093: POP
// tech := tech_mortar ; 3 :
40094: LD_ADDR_VAR 0 5
40098: PUSH
40099: LD_INT 41
40101: ST_TO_ADDR
40102: GO 40124
40104: LD_INT 3
40106: DOUBLE
40107: EQUAL
40108: IFTRUE 40112
40110: GO 40123
40112: POP
// tech := tech_bazooka ; end ;
40113: LD_ADDR_VAR 0 5
40117: PUSH
40118: LD_INT 44
40120: ST_TO_ADDR
40121: GO 40124
40123: POP
// if Researched ( side , tech ) then
40124: LD_VAR 0 3
40128: PPUSH
40129: LD_VAR 0 5
40133: PPUSH
40134: CALL_OW 325
40138: IFFALSE 40165
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
40140: LD_ADDR_VAR 0 2
40144: PUSH
40145: LD_INT 5
40147: PUSH
40148: LD_INT 8
40150: PUSH
40151: LD_INT 9
40153: PUSH
40154: EMPTY
40155: LIST
40156: LIST
40157: LIST
40158: PUSH
40159: LD_VAR 0 4
40163: ARRAY
40164: ST_TO_ADDR
// end ;
40165: LD_VAR 0 2
40169: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
40170: LD_INT 0
40172: PPUSH
40173: PPUSH
40174: PPUSH
// if not mines then
40175: LD_VAR 0 2
40179: NOT
40180: IFFALSE 40184
// exit ;
40182: GO 40328
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
40184: LD_ADDR_VAR 0 5
40188: PUSH
40189: LD_INT 81
40191: PUSH
40192: LD_VAR 0 1
40196: PUSH
40197: EMPTY
40198: LIST
40199: LIST
40200: PUSH
40201: LD_INT 3
40203: PUSH
40204: LD_INT 21
40206: PUSH
40207: LD_INT 3
40209: PUSH
40210: EMPTY
40211: LIST
40212: LIST
40213: PUSH
40214: EMPTY
40215: LIST
40216: LIST
40217: PUSH
40218: EMPTY
40219: LIST
40220: LIST
40221: PPUSH
40222: CALL_OW 69
40226: ST_TO_ADDR
// for i in mines do
40227: LD_ADDR_VAR 0 4
40231: PUSH
40232: LD_VAR 0 2
40236: PUSH
40237: FOR_IN
40238: IFFALSE 40326
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
40240: LD_VAR 0 4
40244: PUSH
40245: LD_INT 1
40247: ARRAY
40248: PPUSH
40249: LD_VAR 0 4
40253: PUSH
40254: LD_INT 2
40256: ARRAY
40257: PPUSH
40258: CALL_OW 458
40262: NOT
40263: IFFALSE 40267
// continue ;
40265: GO 40237
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
40267: LD_VAR 0 4
40271: PUSH
40272: LD_INT 1
40274: ARRAY
40275: PPUSH
40276: LD_VAR 0 4
40280: PUSH
40281: LD_INT 2
40283: ARRAY
40284: PPUSH
40285: CALL_OW 428
40289: PUSH
40290: LD_VAR 0 5
40294: IN
40295: IFFALSE 40324
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
40297: LD_VAR 0 4
40301: PUSH
40302: LD_INT 1
40304: ARRAY
40305: PPUSH
40306: LD_VAR 0 4
40310: PUSH
40311: LD_INT 2
40313: ARRAY
40314: PPUSH
40315: LD_VAR 0 1
40319: PPUSH
40320: CALL_OW 456
// end ;
40324: GO 40237
40326: POP
40327: POP
// end ;
40328: LD_VAR 0 3
40332: RET
// export function Count ( array ) ; var i ; begin
40333: LD_INT 0
40335: PPUSH
40336: PPUSH
// result := 0 ;
40337: LD_ADDR_VAR 0 2
40341: PUSH
40342: LD_INT 0
40344: ST_TO_ADDR
// for i in array do
40345: LD_ADDR_VAR 0 3
40349: PUSH
40350: LD_VAR 0 1
40354: PUSH
40355: FOR_IN
40356: IFFALSE 40380
// if i then
40358: LD_VAR 0 3
40362: IFFALSE 40378
// result := result + 1 ;
40364: LD_ADDR_VAR 0 2
40368: PUSH
40369: LD_VAR 0 2
40373: PUSH
40374: LD_INT 1
40376: PLUS
40377: ST_TO_ADDR
40378: GO 40355
40380: POP
40381: POP
// end ;
40382: LD_VAR 0 2
40386: RET
// export function IsEmpty ( building ) ; begin
40387: LD_INT 0
40389: PPUSH
// if not building then
40390: LD_VAR 0 1
40394: NOT
40395: IFFALSE 40399
// exit ;
40397: GO 40442
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
40399: LD_ADDR_VAR 0 2
40403: PUSH
40404: LD_VAR 0 1
40408: PUSH
40409: LD_INT 22
40411: PUSH
40412: LD_VAR 0 1
40416: PPUSH
40417: CALL_OW 255
40421: PUSH
40422: EMPTY
40423: LIST
40424: LIST
40425: PUSH
40426: LD_INT 58
40428: PUSH
40429: EMPTY
40430: LIST
40431: PUSH
40432: EMPTY
40433: LIST
40434: LIST
40435: PPUSH
40436: CALL_OW 69
40440: IN
40441: ST_TO_ADDR
// end ;
40442: LD_VAR 0 2
40446: RET
// export function IsNotFull ( building ) ; begin
40447: LD_INT 0
40449: PPUSH
// if not building then
40450: LD_VAR 0 1
40454: NOT
40455: IFFALSE 40459
// exit ;
40457: GO 40478
// result := UnitsInside ( building ) < 6 ;
40459: LD_ADDR_VAR 0 2
40463: PUSH
40464: LD_VAR 0 1
40468: PPUSH
40469: CALL_OW 313
40473: PUSH
40474: LD_INT 6
40476: LESS
40477: ST_TO_ADDR
// end ;
40478: LD_VAR 0 2
40482: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
40483: LD_INT 0
40485: PPUSH
40486: PPUSH
40487: PPUSH
40488: PPUSH
// tmp := [ ] ;
40489: LD_ADDR_VAR 0 3
40493: PUSH
40494: EMPTY
40495: ST_TO_ADDR
// list := [ ] ;
40496: LD_ADDR_VAR 0 5
40500: PUSH
40501: EMPTY
40502: ST_TO_ADDR
// for i = 16 to 25 do
40503: LD_ADDR_VAR 0 4
40507: PUSH
40508: DOUBLE
40509: LD_INT 16
40511: DEC
40512: ST_TO_ADDR
40513: LD_INT 25
40515: PUSH
40516: FOR_TO
40517: IFFALSE 40590
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
40519: LD_ADDR_VAR 0 3
40523: PUSH
40524: LD_VAR 0 3
40528: PUSH
40529: LD_INT 22
40531: PUSH
40532: LD_VAR 0 1
40536: PPUSH
40537: CALL_OW 255
40541: PUSH
40542: EMPTY
40543: LIST
40544: LIST
40545: PUSH
40546: LD_INT 91
40548: PUSH
40549: LD_VAR 0 1
40553: PUSH
40554: LD_INT 6
40556: PUSH
40557: EMPTY
40558: LIST
40559: LIST
40560: LIST
40561: PUSH
40562: LD_INT 30
40564: PUSH
40565: LD_VAR 0 4
40569: PUSH
40570: EMPTY
40571: LIST
40572: LIST
40573: PUSH
40574: EMPTY
40575: LIST
40576: LIST
40577: LIST
40578: PUSH
40579: EMPTY
40580: LIST
40581: PPUSH
40582: CALL_OW 69
40586: ADD
40587: ST_TO_ADDR
40588: GO 40516
40590: POP
40591: POP
// for i = 1 to tmp do
40592: LD_ADDR_VAR 0 4
40596: PUSH
40597: DOUBLE
40598: LD_INT 1
40600: DEC
40601: ST_TO_ADDR
40602: LD_VAR 0 3
40606: PUSH
40607: FOR_TO
40608: IFFALSE 40696
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
40610: LD_ADDR_VAR 0 5
40614: PUSH
40615: LD_VAR 0 5
40619: PUSH
40620: LD_VAR 0 3
40624: PUSH
40625: LD_VAR 0 4
40629: ARRAY
40630: PPUSH
40631: CALL_OW 266
40635: PUSH
40636: LD_VAR 0 3
40640: PUSH
40641: LD_VAR 0 4
40645: ARRAY
40646: PPUSH
40647: CALL_OW 250
40651: PUSH
40652: LD_VAR 0 3
40656: PUSH
40657: LD_VAR 0 4
40661: ARRAY
40662: PPUSH
40663: CALL_OW 251
40667: PUSH
40668: LD_VAR 0 3
40672: PUSH
40673: LD_VAR 0 4
40677: ARRAY
40678: PPUSH
40679: CALL_OW 254
40683: PUSH
40684: EMPTY
40685: LIST
40686: LIST
40687: LIST
40688: LIST
40689: PUSH
40690: EMPTY
40691: LIST
40692: ADD
40693: ST_TO_ADDR
40694: GO 40607
40696: POP
40697: POP
// result := list ;
40698: LD_ADDR_VAR 0 2
40702: PUSH
40703: LD_VAR 0 5
40707: ST_TO_ADDR
// end ;
40708: LD_VAR 0 2
40712: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
40713: LD_INT 0
40715: PPUSH
40716: PPUSH
40717: PPUSH
40718: PPUSH
40719: PPUSH
40720: PPUSH
40721: PPUSH
// if not factory then
40722: LD_VAR 0 1
40726: NOT
40727: IFFALSE 40731
// exit ;
40729: GO 41324
// if control = control_apeman then
40731: LD_VAR 0 4
40735: PUSH
40736: LD_INT 5
40738: EQUAL
40739: IFFALSE 40848
// begin tmp := UnitsInside ( factory ) ;
40741: LD_ADDR_VAR 0 8
40745: PUSH
40746: LD_VAR 0 1
40750: PPUSH
40751: CALL_OW 313
40755: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
40756: LD_VAR 0 8
40760: PPUSH
40761: LD_INT 25
40763: PUSH
40764: LD_INT 12
40766: PUSH
40767: EMPTY
40768: LIST
40769: LIST
40770: PPUSH
40771: CALL_OW 72
40775: NOT
40776: IFFALSE 40786
// control := control_manual ;
40778: LD_ADDR_VAR 0 4
40782: PUSH
40783: LD_INT 1
40785: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
40786: LD_ADDR_VAR 0 8
40790: PUSH
40791: LD_VAR 0 1
40795: PPUSH
40796: CALL 40483 0 1
40800: ST_TO_ADDR
// if tmp then
40801: LD_VAR 0 8
40805: IFFALSE 40848
// begin for i in tmp do
40807: LD_ADDR_VAR 0 7
40811: PUSH
40812: LD_VAR 0 8
40816: PUSH
40817: FOR_IN
40818: IFFALSE 40846
// if i [ 1 ] = b_ext_radio then
40820: LD_VAR 0 7
40824: PUSH
40825: LD_INT 1
40827: ARRAY
40828: PUSH
40829: LD_INT 22
40831: EQUAL
40832: IFFALSE 40844
// begin control := control_remote ;
40834: LD_ADDR_VAR 0 4
40838: PUSH
40839: LD_INT 2
40841: ST_TO_ADDR
// break ;
40842: GO 40846
// end ;
40844: GO 40817
40846: POP
40847: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
40848: LD_VAR 0 1
40852: PPUSH
40853: LD_VAR 0 2
40857: PPUSH
40858: LD_VAR 0 3
40862: PPUSH
40863: LD_VAR 0 4
40867: PPUSH
40868: LD_VAR 0 5
40872: PPUSH
40873: CALL_OW 448
40877: IFFALSE 40912
// begin result := [ chassis , engine , control , weapon ] ;
40879: LD_ADDR_VAR 0 6
40883: PUSH
40884: LD_VAR 0 2
40888: PUSH
40889: LD_VAR 0 3
40893: PUSH
40894: LD_VAR 0 4
40898: PUSH
40899: LD_VAR 0 5
40903: PUSH
40904: EMPTY
40905: LIST
40906: LIST
40907: LIST
40908: LIST
40909: ST_TO_ADDR
// exit ;
40910: GO 41324
// end ; _chassis := AvailableChassisList ( factory ) ;
40912: LD_ADDR_VAR 0 9
40916: PUSH
40917: LD_VAR 0 1
40921: PPUSH
40922: CALL_OW 475
40926: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
40927: LD_ADDR_VAR 0 11
40931: PUSH
40932: LD_VAR 0 1
40936: PPUSH
40937: CALL_OW 476
40941: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
40942: LD_ADDR_VAR 0 12
40946: PUSH
40947: LD_VAR 0 1
40951: PPUSH
40952: CALL_OW 477
40956: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
40957: LD_ADDR_VAR 0 10
40961: PUSH
40962: LD_VAR 0 1
40966: PPUSH
40967: CALL_OW 478
40971: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
40972: LD_VAR 0 9
40976: NOT
40977: PUSH
40978: LD_VAR 0 11
40982: NOT
40983: OR
40984: PUSH
40985: LD_VAR 0 12
40989: NOT
40990: OR
40991: PUSH
40992: LD_VAR 0 10
40996: NOT
40997: OR
40998: IFFALSE 41033
// begin result := [ chassis , engine , control , weapon ] ;
41000: LD_ADDR_VAR 0 6
41004: PUSH
41005: LD_VAR 0 2
41009: PUSH
41010: LD_VAR 0 3
41014: PUSH
41015: LD_VAR 0 4
41019: PUSH
41020: LD_VAR 0 5
41024: PUSH
41025: EMPTY
41026: LIST
41027: LIST
41028: LIST
41029: LIST
41030: ST_TO_ADDR
// exit ;
41031: GO 41324
// end ; if not chassis in _chassis then
41033: LD_VAR 0 2
41037: PUSH
41038: LD_VAR 0 9
41042: IN
41043: NOT
41044: IFFALSE 41070
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
41046: LD_ADDR_VAR 0 2
41050: PUSH
41051: LD_VAR 0 9
41055: PUSH
41056: LD_INT 1
41058: PPUSH
41059: LD_VAR 0 9
41063: PPUSH
41064: CALL_OW 12
41068: ARRAY
41069: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
41070: LD_VAR 0 2
41074: PPUSH
41075: LD_VAR 0 3
41079: PPUSH
41080: CALL 41329 0 2
41084: NOT
41085: IFFALSE 41144
// repeat engine := _engine [ 1 ] ;
41087: LD_ADDR_VAR 0 3
41091: PUSH
41092: LD_VAR 0 11
41096: PUSH
41097: LD_INT 1
41099: ARRAY
41100: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
41101: LD_ADDR_VAR 0 11
41105: PUSH
41106: LD_VAR 0 11
41110: PPUSH
41111: LD_INT 1
41113: PPUSH
41114: CALL_OW 3
41118: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
41119: LD_VAR 0 2
41123: PPUSH
41124: LD_VAR 0 3
41128: PPUSH
41129: CALL 41329 0 2
41133: PUSH
41134: LD_VAR 0 11
41138: PUSH
41139: EMPTY
41140: EQUAL
41141: OR
41142: IFFALSE 41087
// if not control in _control then
41144: LD_VAR 0 4
41148: PUSH
41149: LD_VAR 0 12
41153: IN
41154: NOT
41155: IFFALSE 41181
// control := _control [ rand ( 1 , _control ) ] ;
41157: LD_ADDR_VAR 0 4
41161: PUSH
41162: LD_VAR 0 12
41166: PUSH
41167: LD_INT 1
41169: PPUSH
41170: LD_VAR 0 12
41174: PPUSH
41175: CALL_OW 12
41179: ARRAY
41180: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
41181: LD_VAR 0 2
41185: PPUSH
41186: LD_VAR 0 5
41190: PPUSH
41191: CALL 41549 0 2
41195: NOT
41196: IFFALSE 41255
// repeat weapon := _weapon [ 1 ] ;
41198: LD_ADDR_VAR 0 5
41202: PUSH
41203: LD_VAR 0 10
41207: PUSH
41208: LD_INT 1
41210: ARRAY
41211: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
41212: LD_ADDR_VAR 0 10
41216: PUSH
41217: LD_VAR 0 10
41221: PPUSH
41222: LD_INT 1
41224: PPUSH
41225: CALL_OW 3
41229: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
41230: LD_VAR 0 2
41234: PPUSH
41235: LD_VAR 0 5
41239: PPUSH
41240: CALL 41549 0 2
41244: PUSH
41245: LD_VAR 0 10
41249: PUSH
41250: EMPTY
41251: EQUAL
41252: OR
41253: IFFALSE 41198
// result := [ ] ;
41255: LD_ADDR_VAR 0 6
41259: PUSH
41260: EMPTY
41261: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
41262: LD_VAR 0 1
41266: PPUSH
41267: LD_VAR 0 2
41271: PPUSH
41272: LD_VAR 0 3
41276: PPUSH
41277: LD_VAR 0 4
41281: PPUSH
41282: LD_VAR 0 5
41286: PPUSH
41287: CALL_OW 448
41291: IFFALSE 41324
// result := [ chassis , engine , control , weapon ] ;
41293: LD_ADDR_VAR 0 6
41297: PUSH
41298: LD_VAR 0 2
41302: PUSH
41303: LD_VAR 0 3
41307: PUSH
41308: LD_VAR 0 4
41312: PUSH
41313: LD_VAR 0 5
41317: PUSH
41318: EMPTY
41319: LIST
41320: LIST
41321: LIST
41322: LIST
41323: ST_TO_ADDR
// end ;
41324: LD_VAR 0 6
41328: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
41329: LD_INT 0
41331: PPUSH
// if not chassis or not engine then
41332: LD_VAR 0 1
41336: NOT
41337: PUSH
41338: LD_VAR 0 2
41342: NOT
41343: OR
41344: IFFALSE 41348
// exit ;
41346: GO 41544
// case engine of engine_solar :
41348: LD_VAR 0 2
41352: PUSH
41353: LD_INT 2
41355: DOUBLE
41356: EQUAL
41357: IFTRUE 41361
41359: GO 41399
41361: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
41362: LD_ADDR_VAR 0 3
41366: PUSH
41367: LD_INT 11
41369: PUSH
41370: LD_INT 12
41372: PUSH
41373: LD_INT 13
41375: PUSH
41376: LD_INT 14
41378: PUSH
41379: LD_INT 1
41381: PUSH
41382: LD_INT 2
41384: PUSH
41385: LD_INT 3
41387: PUSH
41388: EMPTY
41389: LIST
41390: LIST
41391: LIST
41392: LIST
41393: LIST
41394: LIST
41395: LIST
41396: ST_TO_ADDR
41397: GO 41528
41399: LD_INT 1
41401: DOUBLE
41402: EQUAL
41403: IFTRUE 41407
41405: GO 41469
41407: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
41408: LD_ADDR_VAR 0 3
41412: PUSH
41413: LD_INT 11
41415: PUSH
41416: LD_INT 12
41418: PUSH
41419: LD_INT 13
41421: PUSH
41422: LD_INT 14
41424: PUSH
41425: LD_INT 1
41427: PUSH
41428: LD_INT 2
41430: PUSH
41431: LD_INT 3
41433: PUSH
41434: LD_INT 4
41436: PUSH
41437: LD_INT 5
41439: PUSH
41440: LD_INT 21
41442: PUSH
41443: LD_INT 23
41445: PUSH
41446: LD_INT 22
41448: PUSH
41449: LD_INT 24
41451: PUSH
41452: EMPTY
41453: LIST
41454: LIST
41455: LIST
41456: LIST
41457: LIST
41458: LIST
41459: LIST
41460: LIST
41461: LIST
41462: LIST
41463: LIST
41464: LIST
41465: LIST
41466: ST_TO_ADDR
41467: GO 41528
41469: LD_INT 3
41471: DOUBLE
41472: EQUAL
41473: IFTRUE 41477
41475: GO 41527
41477: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
41478: LD_ADDR_VAR 0 3
41482: PUSH
41483: LD_INT 13
41485: PUSH
41486: LD_INT 14
41488: PUSH
41489: LD_INT 2
41491: PUSH
41492: LD_INT 3
41494: PUSH
41495: LD_INT 4
41497: PUSH
41498: LD_INT 5
41500: PUSH
41501: LD_INT 21
41503: PUSH
41504: LD_INT 22
41506: PUSH
41507: LD_INT 23
41509: PUSH
41510: LD_INT 24
41512: PUSH
41513: EMPTY
41514: LIST
41515: LIST
41516: LIST
41517: LIST
41518: LIST
41519: LIST
41520: LIST
41521: LIST
41522: LIST
41523: LIST
41524: ST_TO_ADDR
41525: GO 41528
41527: POP
// result := ( chassis in result ) ;
41528: LD_ADDR_VAR 0 3
41532: PUSH
41533: LD_VAR 0 1
41537: PUSH
41538: LD_VAR 0 3
41542: IN
41543: ST_TO_ADDR
// end ;
41544: LD_VAR 0 3
41548: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
41549: LD_INT 0
41551: PPUSH
// if not chassis or not weapon then
41552: LD_VAR 0 1
41556: NOT
41557: PUSH
41558: LD_VAR 0 2
41562: NOT
41563: OR
41564: IFFALSE 41568
// exit ;
41566: GO 42630
// case weapon of us_machine_gun :
41568: LD_VAR 0 2
41572: PUSH
41573: LD_INT 2
41575: DOUBLE
41576: EQUAL
41577: IFTRUE 41581
41579: GO 41611
41581: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
41582: LD_ADDR_VAR 0 3
41586: PUSH
41587: LD_INT 1
41589: PUSH
41590: LD_INT 2
41592: PUSH
41593: LD_INT 3
41595: PUSH
41596: LD_INT 4
41598: PUSH
41599: LD_INT 5
41601: PUSH
41602: EMPTY
41603: LIST
41604: LIST
41605: LIST
41606: LIST
41607: LIST
41608: ST_TO_ADDR
41609: GO 42614
41611: LD_INT 3
41613: DOUBLE
41614: EQUAL
41615: IFTRUE 41619
41617: GO 41649
41619: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
41620: LD_ADDR_VAR 0 3
41624: PUSH
41625: LD_INT 1
41627: PUSH
41628: LD_INT 2
41630: PUSH
41631: LD_INT 3
41633: PUSH
41634: LD_INT 4
41636: PUSH
41637: LD_INT 5
41639: PUSH
41640: EMPTY
41641: LIST
41642: LIST
41643: LIST
41644: LIST
41645: LIST
41646: ST_TO_ADDR
41647: GO 42614
41649: LD_INT 11
41651: DOUBLE
41652: EQUAL
41653: IFTRUE 41657
41655: GO 41687
41657: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
41658: LD_ADDR_VAR 0 3
41662: PUSH
41663: LD_INT 1
41665: PUSH
41666: LD_INT 2
41668: PUSH
41669: LD_INT 3
41671: PUSH
41672: LD_INT 4
41674: PUSH
41675: LD_INT 5
41677: PUSH
41678: EMPTY
41679: LIST
41680: LIST
41681: LIST
41682: LIST
41683: LIST
41684: ST_TO_ADDR
41685: GO 42614
41687: LD_INT 4
41689: DOUBLE
41690: EQUAL
41691: IFTRUE 41695
41693: GO 41721
41695: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
41696: LD_ADDR_VAR 0 3
41700: PUSH
41701: LD_INT 2
41703: PUSH
41704: LD_INT 3
41706: PUSH
41707: LD_INT 4
41709: PUSH
41710: LD_INT 5
41712: PUSH
41713: EMPTY
41714: LIST
41715: LIST
41716: LIST
41717: LIST
41718: ST_TO_ADDR
41719: GO 42614
41721: LD_INT 5
41723: DOUBLE
41724: EQUAL
41725: IFTRUE 41729
41727: GO 41755
41729: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
41730: LD_ADDR_VAR 0 3
41734: PUSH
41735: LD_INT 2
41737: PUSH
41738: LD_INT 3
41740: PUSH
41741: LD_INT 4
41743: PUSH
41744: LD_INT 5
41746: PUSH
41747: EMPTY
41748: LIST
41749: LIST
41750: LIST
41751: LIST
41752: ST_TO_ADDR
41753: GO 42614
41755: LD_INT 9
41757: DOUBLE
41758: EQUAL
41759: IFTRUE 41763
41761: GO 41789
41763: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
41764: LD_ADDR_VAR 0 3
41768: PUSH
41769: LD_INT 2
41771: PUSH
41772: LD_INT 3
41774: PUSH
41775: LD_INT 4
41777: PUSH
41778: LD_INT 5
41780: PUSH
41781: EMPTY
41782: LIST
41783: LIST
41784: LIST
41785: LIST
41786: ST_TO_ADDR
41787: GO 42614
41789: LD_INT 7
41791: DOUBLE
41792: EQUAL
41793: IFTRUE 41797
41795: GO 41823
41797: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
41798: LD_ADDR_VAR 0 3
41802: PUSH
41803: LD_INT 2
41805: PUSH
41806: LD_INT 3
41808: PUSH
41809: LD_INT 4
41811: PUSH
41812: LD_INT 5
41814: PUSH
41815: EMPTY
41816: LIST
41817: LIST
41818: LIST
41819: LIST
41820: ST_TO_ADDR
41821: GO 42614
41823: LD_INT 12
41825: DOUBLE
41826: EQUAL
41827: IFTRUE 41831
41829: GO 41857
41831: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
41832: LD_ADDR_VAR 0 3
41836: PUSH
41837: LD_INT 2
41839: PUSH
41840: LD_INT 3
41842: PUSH
41843: LD_INT 4
41845: PUSH
41846: LD_INT 5
41848: PUSH
41849: EMPTY
41850: LIST
41851: LIST
41852: LIST
41853: LIST
41854: ST_TO_ADDR
41855: GO 42614
41857: LD_INT 13
41859: DOUBLE
41860: EQUAL
41861: IFTRUE 41865
41863: GO 41891
41865: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
41866: LD_ADDR_VAR 0 3
41870: PUSH
41871: LD_INT 2
41873: PUSH
41874: LD_INT 3
41876: PUSH
41877: LD_INT 4
41879: PUSH
41880: LD_INT 5
41882: PUSH
41883: EMPTY
41884: LIST
41885: LIST
41886: LIST
41887: LIST
41888: ST_TO_ADDR
41889: GO 42614
41891: LD_INT 14
41893: DOUBLE
41894: EQUAL
41895: IFTRUE 41899
41897: GO 41917
41899: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
41900: LD_ADDR_VAR 0 3
41904: PUSH
41905: LD_INT 4
41907: PUSH
41908: LD_INT 5
41910: PUSH
41911: EMPTY
41912: LIST
41913: LIST
41914: ST_TO_ADDR
41915: GO 42614
41917: LD_INT 6
41919: DOUBLE
41920: EQUAL
41921: IFTRUE 41925
41923: GO 41943
41925: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
41926: LD_ADDR_VAR 0 3
41930: PUSH
41931: LD_INT 4
41933: PUSH
41934: LD_INT 5
41936: PUSH
41937: EMPTY
41938: LIST
41939: LIST
41940: ST_TO_ADDR
41941: GO 42614
41943: LD_INT 10
41945: DOUBLE
41946: EQUAL
41947: IFTRUE 41951
41949: GO 41969
41951: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
41952: LD_ADDR_VAR 0 3
41956: PUSH
41957: LD_INT 4
41959: PUSH
41960: LD_INT 5
41962: PUSH
41963: EMPTY
41964: LIST
41965: LIST
41966: ST_TO_ADDR
41967: GO 42614
41969: LD_INT 22
41971: DOUBLE
41972: EQUAL
41973: IFTRUE 41977
41975: GO 42003
41977: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
41978: LD_ADDR_VAR 0 3
41982: PUSH
41983: LD_INT 11
41985: PUSH
41986: LD_INT 12
41988: PUSH
41989: LD_INT 13
41991: PUSH
41992: LD_INT 14
41994: PUSH
41995: EMPTY
41996: LIST
41997: LIST
41998: LIST
41999: LIST
42000: ST_TO_ADDR
42001: GO 42614
42003: LD_INT 23
42005: DOUBLE
42006: EQUAL
42007: IFTRUE 42011
42009: GO 42037
42011: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
42012: LD_ADDR_VAR 0 3
42016: PUSH
42017: LD_INT 11
42019: PUSH
42020: LD_INT 12
42022: PUSH
42023: LD_INT 13
42025: PUSH
42026: LD_INT 14
42028: PUSH
42029: EMPTY
42030: LIST
42031: LIST
42032: LIST
42033: LIST
42034: ST_TO_ADDR
42035: GO 42614
42037: LD_INT 24
42039: DOUBLE
42040: EQUAL
42041: IFTRUE 42045
42043: GO 42071
42045: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
42046: LD_ADDR_VAR 0 3
42050: PUSH
42051: LD_INT 11
42053: PUSH
42054: LD_INT 12
42056: PUSH
42057: LD_INT 13
42059: PUSH
42060: LD_INT 14
42062: PUSH
42063: EMPTY
42064: LIST
42065: LIST
42066: LIST
42067: LIST
42068: ST_TO_ADDR
42069: GO 42614
42071: LD_INT 30
42073: DOUBLE
42074: EQUAL
42075: IFTRUE 42079
42077: GO 42105
42079: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
42080: LD_ADDR_VAR 0 3
42084: PUSH
42085: LD_INT 11
42087: PUSH
42088: LD_INT 12
42090: PUSH
42091: LD_INT 13
42093: PUSH
42094: LD_INT 14
42096: PUSH
42097: EMPTY
42098: LIST
42099: LIST
42100: LIST
42101: LIST
42102: ST_TO_ADDR
42103: GO 42614
42105: LD_INT 25
42107: DOUBLE
42108: EQUAL
42109: IFTRUE 42113
42111: GO 42131
42113: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
42114: LD_ADDR_VAR 0 3
42118: PUSH
42119: LD_INT 13
42121: PUSH
42122: LD_INT 14
42124: PUSH
42125: EMPTY
42126: LIST
42127: LIST
42128: ST_TO_ADDR
42129: GO 42614
42131: LD_INT 27
42133: DOUBLE
42134: EQUAL
42135: IFTRUE 42139
42137: GO 42157
42139: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
42140: LD_ADDR_VAR 0 3
42144: PUSH
42145: LD_INT 13
42147: PUSH
42148: LD_INT 14
42150: PUSH
42151: EMPTY
42152: LIST
42153: LIST
42154: ST_TO_ADDR
42155: GO 42614
42157: LD_EXP 50
42161: DOUBLE
42162: EQUAL
42163: IFTRUE 42167
42165: GO 42193
42167: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
42168: LD_ADDR_VAR 0 3
42172: PUSH
42173: LD_INT 11
42175: PUSH
42176: LD_INT 12
42178: PUSH
42179: LD_INT 13
42181: PUSH
42182: LD_INT 14
42184: PUSH
42185: EMPTY
42186: LIST
42187: LIST
42188: LIST
42189: LIST
42190: ST_TO_ADDR
42191: GO 42614
42193: LD_INT 28
42195: DOUBLE
42196: EQUAL
42197: IFTRUE 42201
42199: GO 42219
42201: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
42202: LD_ADDR_VAR 0 3
42206: PUSH
42207: LD_INT 13
42209: PUSH
42210: LD_INT 14
42212: PUSH
42213: EMPTY
42214: LIST
42215: LIST
42216: ST_TO_ADDR
42217: GO 42614
42219: LD_INT 29
42221: DOUBLE
42222: EQUAL
42223: IFTRUE 42227
42225: GO 42245
42227: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
42228: LD_ADDR_VAR 0 3
42232: PUSH
42233: LD_INT 13
42235: PUSH
42236: LD_INT 14
42238: PUSH
42239: EMPTY
42240: LIST
42241: LIST
42242: ST_TO_ADDR
42243: GO 42614
42245: LD_INT 31
42247: DOUBLE
42248: EQUAL
42249: IFTRUE 42253
42251: GO 42271
42253: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
42254: LD_ADDR_VAR 0 3
42258: PUSH
42259: LD_INT 13
42261: PUSH
42262: LD_INT 14
42264: PUSH
42265: EMPTY
42266: LIST
42267: LIST
42268: ST_TO_ADDR
42269: GO 42614
42271: LD_INT 26
42273: DOUBLE
42274: EQUAL
42275: IFTRUE 42279
42277: GO 42297
42279: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
42280: LD_ADDR_VAR 0 3
42284: PUSH
42285: LD_INT 13
42287: PUSH
42288: LD_INT 14
42290: PUSH
42291: EMPTY
42292: LIST
42293: LIST
42294: ST_TO_ADDR
42295: GO 42614
42297: LD_INT 42
42299: DOUBLE
42300: EQUAL
42301: IFTRUE 42305
42303: GO 42331
42305: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
42306: LD_ADDR_VAR 0 3
42310: PUSH
42311: LD_INT 21
42313: PUSH
42314: LD_INT 22
42316: PUSH
42317: LD_INT 23
42319: PUSH
42320: LD_INT 24
42322: PUSH
42323: EMPTY
42324: LIST
42325: LIST
42326: LIST
42327: LIST
42328: ST_TO_ADDR
42329: GO 42614
42331: LD_INT 43
42333: DOUBLE
42334: EQUAL
42335: IFTRUE 42339
42337: GO 42365
42339: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
42340: LD_ADDR_VAR 0 3
42344: PUSH
42345: LD_INT 21
42347: PUSH
42348: LD_INT 22
42350: PUSH
42351: LD_INT 23
42353: PUSH
42354: LD_INT 24
42356: PUSH
42357: EMPTY
42358: LIST
42359: LIST
42360: LIST
42361: LIST
42362: ST_TO_ADDR
42363: GO 42614
42365: LD_INT 44
42367: DOUBLE
42368: EQUAL
42369: IFTRUE 42373
42371: GO 42399
42373: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
42374: LD_ADDR_VAR 0 3
42378: PUSH
42379: LD_INT 21
42381: PUSH
42382: LD_INT 22
42384: PUSH
42385: LD_INT 23
42387: PUSH
42388: LD_INT 24
42390: PUSH
42391: EMPTY
42392: LIST
42393: LIST
42394: LIST
42395: LIST
42396: ST_TO_ADDR
42397: GO 42614
42399: LD_INT 45
42401: DOUBLE
42402: EQUAL
42403: IFTRUE 42407
42405: GO 42433
42407: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
42408: LD_ADDR_VAR 0 3
42412: PUSH
42413: LD_INT 21
42415: PUSH
42416: LD_INT 22
42418: PUSH
42419: LD_INT 23
42421: PUSH
42422: LD_INT 24
42424: PUSH
42425: EMPTY
42426: LIST
42427: LIST
42428: LIST
42429: LIST
42430: ST_TO_ADDR
42431: GO 42614
42433: LD_INT 49
42435: DOUBLE
42436: EQUAL
42437: IFTRUE 42441
42439: GO 42467
42441: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
42442: LD_ADDR_VAR 0 3
42446: PUSH
42447: LD_INT 21
42449: PUSH
42450: LD_INT 22
42452: PUSH
42453: LD_INT 23
42455: PUSH
42456: LD_INT 24
42458: PUSH
42459: EMPTY
42460: LIST
42461: LIST
42462: LIST
42463: LIST
42464: ST_TO_ADDR
42465: GO 42614
42467: LD_INT 51
42469: DOUBLE
42470: EQUAL
42471: IFTRUE 42475
42473: GO 42501
42475: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
42476: LD_ADDR_VAR 0 3
42480: PUSH
42481: LD_INT 21
42483: PUSH
42484: LD_INT 22
42486: PUSH
42487: LD_INT 23
42489: PUSH
42490: LD_INT 24
42492: PUSH
42493: EMPTY
42494: LIST
42495: LIST
42496: LIST
42497: LIST
42498: ST_TO_ADDR
42499: GO 42614
42501: LD_INT 52
42503: DOUBLE
42504: EQUAL
42505: IFTRUE 42509
42507: GO 42535
42509: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
42510: LD_ADDR_VAR 0 3
42514: PUSH
42515: LD_INT 21
42517: PUSH
42518: LD_INT 22
42520: PUSH
42521: LD_INT 23
42523: PUSH
42524: LD_INT 24
42526: PUSH
42527: EMPTY
42528: LIST
42529: LIST
42530: LIST
42531: LIST
42532: ST_TO_ADDR
42533: GO 42614
42535: LD_INT 53
42537: DOUBLE
42538: EQUAL
42539: IFTRUE 42543
42541: GO 42561
42543: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
42544: LD_ADDR_VAR 0 3
42548: PUSH
42549: LD_INT 23
42551: PUSH
42552: LD_INT 24
42554: PUSH
42555: EMPTY
42556: LIST
42557: LIST
42558: ST_TO_ADDR
42559: GO 42614
42561: LD_INT 46
42563: DOUBLE
42564: EQUAL
42565: IFTRUE 42569
42567: GO 42587
42569: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
42570: LD_ADDR_VAR 0 3
42574: PUSH
42575: LD_INT 23
42577: PUSH
42578: LD_INT 24
42580: PUSH
42581: EMPTY
42582: LIST
42583: LIST
42584: ST_TO_ADDR
42585: GO 42614
42587: LD_INT 47
42589: DOUBLE
42590: EQUAL
42591: IFTRUE 42595
42593: GO 42613
42595: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
42596: LD_ADDR_VAR 0 3
42600: PUSH
42601: LD_INT 23
42603: PUSH
42604: LD_INT 24
42606: PUSH
42607: EMPTY
42608: LIST
42609: LIST
42610: ST_TO_ADDR
42611: GO 42614
42613: POP
// result := ( chassis in result ) ;
42614: LD_ADDR_VAR 0 3
42618: PUSH
42619: LD_VAR 0 1
42623: PUSH
42624: LD_VAR 0 3
42628: IN
42629: ST_TO_ADDR
// end ;
42630: LD_VAR 0 3
42634: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
42635: LD_INT 0
42637: PPUSH
42638: PPUSH
42639: PPUSH
42640: PPUSH
42641: PPUSH
42642: PPUSH
42643: PPUSH
// result := array ;
42644: LD_ADDR_VAR 0 5
42648: PUSH
42649: LD_VAR 0 1
42653: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
42654: LD_VAR 0 1
42658: NOT
42659: PUSH
42660: LD_VAR 0 2
42664: NOT
42665: OR
42666: PUSH
42667: LD_VAR 0 3
42671: NOT
42672: OR
42673: PUSH
42674: LD_VAR 0 2
42678: PUSH
42679: LD_VAR 0 1
42683: GREATER
42684: OR
42685: PUSH
42686: LD_VAR 0 3
42690: PUSH
42691: LD_VAR 0 1
42695: GREATER
42696: OR
42697: IFFALSE 42701
// exit ;
42699: GO 42997
// if direction then
42701: LD_VAR 0 4
42705: IFFALSE 42769
// begin d := 1 ;
42707: LD_ADDR_VAR 0 9
42711: PUSH
42712: LD_INT 1
42714: ST_TO_ADDR
// if i_from > i_to then
42715: LD_VAR 0 2
42719: PUSH
42720: LD_VAR 0 3
42724: GREATER
42725: IFFALSE 42751
// length := ( array - i_from ) + i_to else
42727: LD_ADDR_VAR 0 11
42731: PUSH
42732: LD_VAR 0 1
42736: PUSH
42737: LD_VAR 0 2
42741: MINUS
42742: PUSH
42743: LD_VAR 0 3
42747: PLUS
42748: ST_TO_ADDR
42749: GO 42767
// length := i_to - i_from ;
42751: LD_ADDR_VAR 0 11
42755: PUSH
42756: LD_VAR 0 3
42760: PUSH
42761: LD_VAR 0 2
42765: MINUS
42766: ST_TO_ADDR
// end else
42767: GO 42830
// begin d := - 1 ;
42769: LD_ADDR_VAR 0 9
42773: PUSH
42774: LD_INT 1
42776: NEG
42777: ST_TO_ADDR
// if i_from > i_to then
42778: LD_VAR 0 2
42782: PUSH
42783: LD_VAR 0 3
42787: GREATER
42788: IFFALSE 42808
// length := i_from - i_to else
42790: LD_ADDR_VAR 0 11
42794: PUSH
42795: LD_VAR 0 2
42799: PUSH
42800: LD_VAR 0 3
42804: MINUS
42805: ST_TO_ADDR
42806: GO 42830
// length := ( array - i_to ) + i_from ;
42808: LD_ADDR_VAR 0 11
42812: PUSH
42813: LD_VAR 0 1
42817: PUSH
42818: LD_VAR 0 3
42822: MINUS
42823: PUSH
42824: LD_VAR 0 2
42828: PLUS
42829: ST_TO_ADDR
// end ; if not length then
42830: LD_VAR 0 11
42834: NOT
42835: IFFALSE 42839
// exit ;
42837: GO 42997
// tmp := array ;
42839: LD_ADDR_VAR 0 10
42843: PUSH
42844: LD_VAR 0 1
42848: ST_TO_ADDR
// for i = 1 to length do
42849: LD_ADDR_VAR 0 6
42853: PUSH
42854: DOUBLE
42855: LD_INT 1
42857: DEC
42858: ST_TO_ADDR
42859: LD_VAR 0 11
42863: PUSH
42864: FOR_TO
42865: IFFALSE 42985
// begin for j = 1 to array do
42867: LD_ADDR_VAR 0 7
42871: PUSH
42872: DOUBLE
42873: LD_INT 1
42875: DEC
42876: ST_TO_ADDR
42877: LD_VAR 0 1
42881: PUSH
42882: FOR_TO
42883: IFFALSE 42971
// begin k := j + d ;
42885: LD_ADDR_VAR 0 8
42889: PUSH
42890: LD_VAR 0 7
42894: PUSH
42895: LD_VAR 0 9
42899: PLUS
42900: ST_TO_ADDR
// if k > array then
42901: LD_VAR 0 8
42905: PUSH
42906: LD_VAR 0 1
42910: GREATER
42911: IFFALSE 42921
// k := 1 ;
42913: LD_ADDR_VAR 0 8
42917: PUSH
42918: LD_INT 1
42920: ST_TO_ADDR
// if not k then
42921: LD_VAR 0 8
42925: NOT
42926: IFFALSE 42938
// k := array ;
42928: LD_ADDR_VAR 0 8
42932: PUSH
42933: LD_VAR 0 1
42937: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
42938: LD_ADDR_VAR 0 10
42942: PUSH
42943: LD_VAR 0 10
42947: PPUSH
42948: LD_VAR 0 8
42952: PPUSH
42953: LD_VAR 0 1
42957: PUSH
42958: LD_VAR 0 7
42962: ARRAY
42963: PPUSH
42964: CALL_OW 1
42968: ST_TO_ADDR
// end ;
42969: GO 42882
42971: POP
42972: POP
// array := tmp ;
42973: LD_ADDR_VAR 0 1
42977: PUSH
42978: LD_VAR 0 10
42982: ST_TO_ADDR
// end ;
42983: GO 42864
42985: POP
42986: POP
// result := array ;
42987: LD_ADDR_VAR 0 5
42991: PUSH
42992: LD_VAR 0 1
42996: ST_TO_ADDR
// end ;
42997: LD_VAR 0 5
43001: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
43002: LD_INT 0
43004: PPUSH
43005: PPUSH
// result := 0 ;
43006: LD_ADDR_VAR 0 3
43010: PUSH
43011: LD_INT 0
43013: ST_TO_ADDR
// if not array or not value in array then
43014: LD_VAR 0 1
43018: NOT
43019: PUSH
43020: LD_VAR 0 2
43024: PUSH
43025: LD_VAR 0 1
43029: IN
43030: NOT
43031: OR
43032: IFFALSE 43036
// exit ;
43034: GO 43090
// for i = 1 to array do
43036: LD_ADDR_VAR 0 4
43040: PUSH
43041: DOUBLE
43042: LD_INT 1
43044: DEC
43045: ST_TO_ADDR
43046: LD_VAR 0 1
43050: PUSH
43051: FOR_TO
43052: IFFALSE 43088
// if value = array [ i ] then
43054: LD_VAR 0 2
43058: PUSH
43059: LD_VAR 0 1
43063: PUSH
43064: LD_VAR 0 4
43068: ARRAY
43069: EQUAL
43070: IFFALSE 43086
// begin result := i ;
43072: LD_ADDR_VAR 0 3
43076: PUSH
43077: LD_VAR 0 4
43081: ST_TO_ADDR
// exit ;
43082: POP
43083: POP
43084: GO 43090
// end ;
43086: GO 43051
43088: POP
43089: POP
// end ;
43090: LD_VAR 0 3
43094: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
43095: LD_INT 0
43097: PPUSH
// vc_chassis := chassis ;
43098: LD_ADDR_OWVAR 37
43102: PUSH
43103: LD_VAR 0 1
43107: ST_TO_ADDR
// vc_engine := engine ;
43108: LD_ADDR_OWVAR 39
43112: PUSH
43113: LD_VAR 0 2
43117: ST_TO_ADDR
// vc_control := control ;
43118: LD_ADDR_OWVAR 38
43122: PUSH
43123: LD_VAR 0 3
43127: ST_TO_ADDR
// vc_weapon := weapon ;
43128: LD_ADDR_OWVAR 40
43132: PUSH
43133: LD_VAR 0 4
43137: ST_TO_ADDR
// vc_fuel_battery := fuel ;
43138: LD_ADDR_OWVAR 41
43142: PUSH
43143: LD_VAR 0 5
43147: ST_TO_ADDR
// end ;
43148: LD_VAR 0 6
43152: RET
// export function WantPlant ( unit ) ; var task ; begin
43153: LD_INT 0
43155: PPUSH
43156: PPUSH
// result := false ;
43157: LD_ADDR_VAR 0 2
43161: PUSH
43162: LD_INT 0
43164: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
43165: LD_ADDR_VAR 0 3
43169: PUSH
43170: LD_VAR 0 1
43174: PPUSH
43175: CALL_OW 437
43179: ST_TO_ADDR
// if task then
43180: LD_VAR 0 3
43184: IFFALSE 43212
// if task [ 1 ] [ 1 ] = p then
43186: LD_VAR 0 3
43190: PUSH
43191: LD_INT 1
43193: ARRAY
43194: PUSH
43195: LD_INT 1
43197: ARRAY
43198: PUSH
43199: LD_STRING p
43201: EQUAL
43202: IFFALSE 43212
// result := true ;
43204: LD_ADDR_VAR 0 2
43208: PUSH
43209: LD_INT 1
43211: ST_TO_ADDR
// end ;
43212: LD_VAR 0 2
43216: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
43217: LD_INT 0
43219: PPUSH
43220: PPUSH
43221: PPUSH
43222: PPUSH
// if pos < 1 then
43223: LD_VAR 0 2
43227: PUSH
43228: LD_INT 1
43230: LESS
43231: IFFALSE 43235
// exit ;
43233: GO 43538
// if pos = 1 then
43235: LD_VAR 0 2
43239: PUSH
43240: LD_INT 1
43242: EQUAL
43243: IFFALSE 43276
// result := Replace ( arr , pos [ 1 ] , value ) else
43245: LD_ADDR_VAR 0 4
43249: PUSH
43250: LD_VAR 0 1
43254: PPUSH
43255: LD_VAR 0 2
43259: PUSH
43260: LD_INT 1
43262: ARRAY
43263: PPUSH
43264: LD_VAR 0 3
43268: PPUSH
43269: CALL_OW 1
43273: ST_TO_ADDR
43274: GO 43538
// begin tmp := arr ;
43276: LD_ADDR_VAR 0 6
43280: PUSH
43281: LD_VAR 0 1
43285: ST_TO_ADDR
// s_arr := [ tmp ] ;
43286: LD_ADDR_VAR 0 7
43290: PUSH
43291: LD_VAR 0 6
43295: PUSH
43296: EMPTY
43297: LIST
43298: ST_TO_ADDR
// for i = 1 to pos - 1 do
43299: LD_ADDR_VAR 0 5
43303: PUSH
43304: DOUBLE
43305: LD_INT 1
43307: DEC
43308: ST_TO_ADDR
43309: LD_VAR 0 2
43313: PUSH
43314: LD_INT 1
43316: MINUS
43317: PUSH
43318: FOR_TO
43319: IFFALSE 43364
// begin tmp := tmp [ pos [ i ] ] ;
43321: LD_ADDR_VAR 0 6
43325: PUSH
43326: LD_VAR 0 6
43330: PUSH
43331: LD_VAR 0 2
43335: PUSH
43336: LD_VAR 0 5
43340: ARRAY
43341: ARRAY
43342: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
43343: LD_ADDR_VAR 0 7
43347: PUSH
43348: LD_VAR 0 7
43352: PUSH
43353: LD_VAR 0 6
43357: PUSH
43358: EMPTY
43359: LIST
43360: ADD
43361: ST_TO_ADDR
// end ;
43362: GO 43318
43364: POP
43365: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
43366: LD_ADDR_VAR 0 6
43370: PUSH
43371: LD_VAR 0 6
43375: PPUSH
43376: LD_VAR 0 2
43380: PUSH
43381: LD_VAR 0 2
43385: ARRAY
43386: PPUSH
43387: LD_VAR 0 3
43391: PPUSH
43392: CALL_OW 1
43396: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
43397: LD_ADDR_VAR 0 7
43401: PUSH
43402: LD_VAR 0 7
43406: PPUSH
43407: LD_VAR 0 7
43411: PPUSH
43412: LD_VAR 0 6
43416: PPUSH
43417: CALL_OW 1
43421: ST_TO_ADDR
// for i = s_arr downto 2 do
43422: LD_ADDR_VAR 0 5
43426: PUSH
43427: DOUBLE
43428: LD_VAR 0 7
43432: INC
43433: ST_TO_ADDR
43434: LD_INT 2
43436: PUSH
43437: FOR_DOWNTO
43438: IFFALSE 43522
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
43440: LD_ADDR_VAR 0 6
43444: PUSH
43445: LD_VAR 0 7
43449: PUSH
43450: LD_VAR 0 5
43454: PUSH
43455: LD_INT 1
43457: MINUS
43458: ARRAY
43459: PPUSH
43460: LD_VAR 0 2
43464: PUSH
43465: LD_VAR 0 5
43469: PUSH
43470: LD_INT 1
43472: MINUS
43473: ARRAY
43474: PPUSH
43475: LD_VAR 0 7
43479: PUSH
43480: LD_VAR 0 5
43484: ARRAY
43485: PPUSH
43486: CALL_OW 1
43490: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
43491: LD_ADDR_VAR 0 7
43495: PUSH
43496: LD_VAR 0 7
43500: PPUSH
43501: LD_VAR 0 5
43505: PUSH
43506: LD_INT 1
43508: MINUS
43509: PPUSH
43510: LD_VAR 0 6
43514: PPUSH
43515: CALL_OW 1
43519: ST_TO_ADDR
// end ;
43520: GO 43437
43522: POP
43523: POP
// result := s_arr [ 1 ] ;
43524: LD_ADDR_VAR 0 4
43528: PUSH
43529: LD_VAR 0 7
43533: PUSH
43534: LD_INT 1
43536: ARRAY
43537: ST_TO_ADDR
// end ; end ;
43538: LD_VAR 0 4
43542: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
43543: LD_INT 0
43545: PPUSH
43546: PPUSH
// if not list then
43547: LD_VAR 0 1
43551: NOT
43552: IFFALSE 43556
// exit ;
43554: GO 43647
// i := list [ pos1 ] ;
43556: LD_ADDR_VAR 0 5
43560: PUSH
43561: LD_VAR 0 1
43565: PUSH
43566: LD_VAR 0 2
43570: ARRAY
43571: ST_TO_ADDR
// if not i then
43572: LD_VAR 0 5
43576: NOT
43577: IFFALSE 43581
// exit ;
43579: GO 43647
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
43581: LD_ADDR_VAR 0 1
43585: PUSH
43586: LD_VAR 0 1
43590: PPUSH
43591: LD_VAR 0 2
43595: PPUSH
43596: LD_VAR 0 1
43600: PUSH
43601: LD_VAR 0 3
43605: ARRAY
43606: PPUSH
43607: CALL_OW 1
43611: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
43612: LD_ADDR_VAR 0 1
43616: PUSH
43617: LD_VAR 0 1
43621: PPUSH
43622: LD_VAR 0 3
43626: PPUSH
43627: LD_VAR 0 5
43631: PPUSH
43632: CALL_OW 1
43636: ST_TO_ADDR
// result := list ;
43637: LD_ADDR_VAR 0 4
43641: PUSH
43642: LD_VAR 0 1
43646: ST_TO_ADDR
// end ;
43647: LD_VAR 0 4
43651: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
43652: LD_INT 0
43654: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
43655: LD_ADDR_VAR 0 5
43659: PUSH
43660: LD_VAR 0 1
43664: PPUSH
43665: CALL_OW 250
43669: PPUSH
43670: LD_VAR 0 1
43674: PPUSH
43675: CALL_OW 251
43679: PPUSH
43680: LD_VAR 0 2
43684: PPUSH
43685: LD_VAR 0 3
43689: PPUSH
43690: LD_VAR 0 4
43694: PPUSH
43695: CALL 43705 0 5
43699: ST_TO_ADDR
// end ;
43700: LD_VAR 0 5
43704: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
43705: LD_INT 0
43707: PPUSH
43708: PPUSH
43709: PPUSH
43710: PPUSH
// if not list then
43711: LD_VAR 0 3
43715: NOT
43716: IFFALSE 43720
// exit ;
43718: GO 44108
// result := [ ] ;
43720: LD_ADDR_VAR 0 6
43724: PUSH
43725: EMPTY
43726: ST_TO_ADDR
// for i in list do
43727: LD_ADDR_VAR 0 7
43731: PUSH
43732: LD_VAR 0 3
43736: PUSH
43737: FOR_IN
43738: IFFALSE 43940
// begin tmp := GetDistUnitXY ( i , x , y ) ;
43740: LD_ADDR_VAR 0 9
43744: PUSH
43745: LD_VAR 0 7
43749: PPUSH
43750: LD_VAR 0 1
43754: PPUSH
43755: LD_VAR 0 2
43759: PPUSH
43760: CALL_OW 297
43764: ST_TO_ADDR
// if not result then
43765: LD_VAR 0 6
43769: NOT
43770: IFFALSE 43796
// result := [ [ i , tmp ] ] else
43772: LD_ADDR_VAR 0 6
43776: PUSH
43777: LD_VAR 0 7
43781: PUSH
43782: LD_VAR 0 9
43786: PUSH
43787: EMPTY
43788: LIST
43789: LIST
43790: PUSH
43791: EMPTY
43792: LIST
43793: ST_TO_ADDR
43794: GO 43938
// begin if result [ result ] [ 2 ] < tmp then
43796: LD_VAR 0 6
43800: PUSH
43801: LD_VAR 0 6
43805: ARRAY
43806: PUSH
43807: LD_INT 2
43809: ARRAY
43810: PUSH
43811: LD_VAR 0 9
43815: LESS
43816: IFFALSE 43858
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
43818: LD_ADDR_VAR 0 6
43822: PUSH
43823: LD_VAR 0 6
43827: PPUSH
43828: LD_VAR 0 6
43832: PUSH
43833: LD_INT 1
43835: PLUS
43836: PPUSH
43837: LD_VAR 0 7
43841: PUSH
43842: LD_VAR 0 9
43846: PUSH
43847: EMPTY
43848: LIST
43849: LIST
43850: PPUSH
43851: CALL_OW 2
43855: ST_TO_ADDR
43856: GO 43938
// for j = 1 to result do
43858: LD_ADDR_VAR 0 8
43862: PUSH
43863: DOUBLE
43864: LD_INT 1
43866: DEC
43867: ST_TO_ADDR
43868: LD_VAR 0 6
43872: PUSH
43873: FOR_TO
43874: IFFALSE 43936
// begin if tmp < result [ j ] [ 2 ] then
43876: LD_VAR 0 9
43880: PUSH
43881: LD_VAR 0 6
43885: PUSH
43886: LD_VAR 0 8
43890: ARRAY
43891: PUSH
43892: LD_INT 2
43894: ARRAY
43895: LESS
43896: IFFALSE 43934
// begin result := Insert ( result , j , [ i , tmp ] ) ;
43898: LD_ADDR_VAR 0 6
43902: PUSH
43903: LD_VAR 0 6
43907: PPUSH
43908: LD_VAR 0 8
43912: PPUSH
43913: LD_VAR 0 7
43917: PUSH
43918: LD_VAR 0 9
43922: PUSH
43923: EMPTY
43924: LIST
43925: LIST
43926: PPUSH
43927: CALL_OW 2
43931: ST_TO_ADDR
// break ;
43932: GO 43936
// end ; end ;
43934: GO 43873
43936: POP
43937: POP
// end ; end ;
43938: GO 43737
43940: POP
43941: POP
// if result and not asc then
43942: LD_VAR 0 6
43946: PUSH
43947: LD_VAR 0 4
43951: NOT
43952: AND
43953: IFFALSE 44028
// begin tmp := result ;
43955: LD_ADDR_VAR 0 9
43959: PUSH
43960: LD_VAR 0 6
43964: ST_TO_ADDR
// for i = tmp downto 1 do
43965: LD_ADDR_VAR 0 7
43969: PUSH
43970: DOUBLE
43971: LD_VAR 0 9
43975: INC
43976: ST_TO_ADDR
43977: LD_INT 1
43979: PUSH
43980: FOR_DOWNTO
43981: IFFALSE 44026
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
43983: LD_ADDR_VAR 0 6
43987: PUSH
43988: LD_VAR 0 6
43992: PPUSH
43993: LD_VAR 0 9
43997: PUSH
43998: LD_VAR 0 7
44002: MINUS
44003: PUSH
44004: LD_INT 1
44006: PLUS
44007: PPUSH
44008: LD_VAR 0 9
44012: PUSH
44013: LD_VAR 0 7
44017: ARRAY
44018: PPUSH
44019: CALL_OW 1
44023: ST_TO_ADDR
44024: GO 43980
44026: POP
44027: POP
// end ; tmp := [ ] ;
44028: LD_ADDR_VAR 0 9
44032: PUSH
44033: EMPTY
44034: ST_TO_ADDR
// if mode then
44035: LD_VAR 0 5
44039: IFFALSE 44108
// begin for i = 1 to result do
44041: LD_ADDR_VAR 0 7
44045: PUSH
44046: DOUBLE
44047: LD_INT 1
44049: DEC
44050: ST_TO_ADDR
44051: LD_VAR 0 6
44055: PUSH
44056: FOR_TO
44057: IFFALSE 44096
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
44059: LD_ADDR_VAR 0 9
44063: PUSH
44064: LD_VAR 0 9
44068: PPUSH
44069: LD_VAR 0 7
44073: PPUSH
44074: LD_VAR 0 6
44078: PUSH
44079: LD_VAR 0 7
44083: ARRAY
44084: PUSH
44085: LD_INT 1
44087: ARRAY
44088: PPUSH
44089: CALL_OW 1
44093: ST_TO_ADDR
44094: GO 44056
44096: POP
44097: POP
// result := tmp ;
44098: LD_ADDR_VAR 0 6
44102: PUSH
44103: LD_VAR 0 9
44107: ST_TO_ADDR
// end ; end ;
44108: LD_VAR 0 6
44112: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
44113: LD_INT 0
44115: PPUSH
44116: PPUSH
44117: PPUSH
44118: PPUSH
44119: PPUSH
44120: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
44121: LD_ADDR_VAR 0 5
44125: PUSH
44126: LD_INT 0
44128: PUSH
44129: LD_INT 0
44131: PUSH
44132: LD_INT 0
44134: PUSH
44135: EMPTY
44136: PUSH
44137: EMPTY
44138: LIST
44139: LIST
44140: LIST
44141: LIST
44142: ST_TO_ADDR
// if not x or not y then
44143: LD_VAR 0 2
44147: NOT
44148: PUSH
44149: LD_VAR 0 3
44153: NOT
44154: OR
44155: IFFALSE 44159
// exit ;
44157: GO 45811
// if not range then
44159: LD_VAR 0 4
44163: NOT
44164: IFFALSE 44174
// range := 10 ;
44166: LD_ADDR_VAR 0 4
44170: PUSH
44171: LD_INT 10
44173: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
44174: LD_ADDR_VAR 0 8
44178: PUSH
44179: LD_INT 81
44181: PUSH
44182: LD_VAR 0 1
44186: PUSH
44187: EMPTY
44188: LIST
44189: LIST
44190: PUSH
44191: LD_INT 92
44193: PUSH
44194: LD_VAR 0 2
44198: PUSH
44199: LD_VAR 0 3
44203: PUSH
44204: LD_VAR 0 4
44208: PUSH
44209: EMPTY
44210: LIST
44211: LIST
44212: LIST
44213: LIST
44214: PUSH
44215: LD_INT 3
44217: PUSH
44218: LD_INT 21
44220: PUSH
44221: LD_INT 3
44223: PUSH
44224: EMPTY
44225: LIST
44226: LIST
44227: PUSH
44228: EMPTY
44229: LIST
44230: LIST
44231: PUSH
44232: EMPTY
44233: LIST
44234: LIST
44235: LIST
44236: PPUSH
44237: CALL_OW 69
44241: ST_TO_ADDR
// if not tmp then
44242: LD_VAR 0 8
44246: NOT
44247: IFFALSE 44251
// exit ;
44249: GO 45811
// for i in tmp do
44251: LD_ADDR_VAR 0 6
44255: PUSH
44256: LD_VAR 0 8
44260: PUSH
44261: FOR_IN
44262: IFFALSE 45786
// begin points := [ 0 , 0 , 0 ] ;
44264: LD_ADDR_VAR 0 9
44268: PUSH
44269: LD_INT 0
44271: PUSH
44272: LD_INT 0
44274: PUSH
44275: LD_INT 0
44277: PUSH
44278: EMPTY
44279: LIST
44280: LIST
44281: LIST
44282: ST_TO_ADDR
// bpoints := 1 ;
44283: LD_ADDR_VAR 0 10
44287: PUSH
44288: LD_INT 1
44290: ST_TO_ADDR
// case GetType ( i ) of unit_human :
44291: LD_VAR 0 6
44295: PPUSH
44296: CALL_OW 247
44300: PUSH
44301: LD_INT 1
44303: DOUBLE
44304: EQUAL
44305: IFTRUE 44309
44307: GO 44887
44309: POP
// begin if GetClass ( i ) = 1 then
44310: LD_VAR 0 6
44314: PPUSH
44315: CALL_OW 257
44319: PUSH
44320: LD_INT 1
44322: EQUAL
44323: IFFALSE 44344
// points := [ 10 , 5 , 3 ] ;
44325: LD_ADDR_VAR 0 9
44329: PUSH
44330: LD_INT 10
44332: PUSH
44333: LD_INT 5
44335: PUSH
44336: LD_INT 3
44338: PUSH
44339: EMPTY
44340: LIST
44341: LIST
44342: LIST
44343: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
44344: LD_VAR 0 6
44348: PPUSH
44349: CALL_OW 257
44353: PUSH
44354: LD_INT 2
44356: PUSH
44357: LD_INT 3
44359: PUSH
44360: LD_INT 4
44362: PUSH
44363: EMPTY
44364: LIST
44365: LIST
44366: LIST
44367: IN
44368: IFFALSE 44389
// points := [ 3 , 2 , 1 ] ;
44370: LD_ADDR_VAR 0 9
44374: PUSH
44375: LD_INT 3
44377: PUSH
44378: LD_INT 2
44380: PUSH
44381: LD_INT 1
44383: PUSH
44384: EMPTY
44385: LIST
44386: LIST
44387: LIST
44388: ST_TO_ADDR
// if GetClass ( i ) = 5 then
44389: LD_VAR 0 6
44393: PPUSH
44394: CALL_OW 257
44398: PUSH
44399: LD_INT 5
44401: EQUAL
44402: IFFALSE 44423
// points := [ 130 , 5 , 2 ] ;
44404: LD_ADDR_VAR 0 9
44408: PUSH
44409: LD_INT 130
44411: PUSH
44412: LD_INT 5
44414: PUSH
44415: LD_INT 2
44417: PUSH
44418: EMPTY
44419: LIST
44420: LIST
44421: LIST
44422: ST_TO_ADDR
// if GetClass ( i ) = 8 then
44423: LD_VAR 0 6
44427: PPUSH
44428: CALL_OW 257
44432: PUSH
44433: LD_INT 8
44435: EQUAL
44436: IFFALSE 44457
// points := [ 35 , 35 , 30 ] ;
44438: LD_ADDR_VAR 0 9
44442: PUSH
44443: LD_INT 35
44445: PUSH
44446: LD_INT 35
44448: PUSH
44449: LD_INT 30
44451: PUSH
44452: EMPTY
44453: LIST
44454: LIST
44455: LIST
44456: ST_TO_ADDR
// if GetClass ( i ) = 9 then
44457: LD_VAR 0 6
44461: PPUSH
44462: CALL_OW 257
44466: PUSH
44467: LD_INT 9
44469: EQUAL
44470: IFFALSE 44491
// points := [ 20 , 55 , 40 ] ;
44472: LD_ADDR_VAR 0 9
44476: PUSH
44477: LD_INT 20
44479: PUSH
44480: LD_INT 55
44482: PUSH
44483: LD_INT 40
44485: PUSH
44486: EMPTY
44487: LIST
44488: LIST
44489: LIST
44490: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
44491: LD_VAR 0 6
44495: PPUSH
44496: CALL_OW 257
44500: PUSH
44501: LD_INT 12
44503: PUSH
44504: LD_INT 16
44506: PUSH
44507: EMPTY
44508: LIST
44509: LIST
44510: IN
44511: IFFALSE 44532
// points := [ 5 , 3 , 2 ] ;
44513: LD_ADDR_VAR 0 9
44517: PUSH
44518: LD_INT 5
44520: PUSH
44521: LD_INT 3
44523: PUSH
44524: LD_INT 2
44526: PUSH
44527: EMPTY
44528: LIST
44529: LIST
44530: LIST
44531: ST_TO_ADDR
// if GetClass ( i ) = 17 then
44532: LD_VAR 0 6
44536: PPUSH
44537: CALL_OW 257
44541: PUSH
44542: LD_INT 17
44544: EQUAL
44545: IFFALSE 44566
// points := [ 100 , 50 , 75 ] ;
44547: LD_ADDR_VAR 0 9
44551: PUSH
44552: LD_INT 100
44554: PUSH
44555: LD_INT 50
44557: PUSH
44558: LD_INT 75
44560: PUSH
44561: EMPTY
44562: LIST
44563: LIST
44564: LIST
44565: ST_TO_ADDR
// if GetClass ( i ) = 15 then
44566: LD_VAR 0 6
44570: PPUSH
44571: CALL_OW 257
44575: PUSH
44576: LD_INT 15
44578: EQUAL
44579: IFFALSE 44600
// points := [ 10 , 5 , 3 ] ;
44581: LD_ADDR_VAR 0 9
44585: PUSH
44586: LD_INT 10
44588: PUSH
44589: LD_INT 5
44591: PUSH
44592: LD_INT 3
44594: PUSH
44595: EMPTY
44596: LIST
44597: LIST
44598: LIST
44599: ST_TO_ADDR
// if GetClass ( i ) = 14 then
44600: LD_VAR 0 6
44604: PPUSH
44605: CALL_OW 257
44609: PUSH
44610: LD_INT 14
44612: EQUAL
44613: IFFALSE 44634
// points := [ 10 , 0 , 0 ] ;
44615: LD_ADDR_VAR 0 9
44619: PUSH
44620: LD_INT 10
44622: PUSH
44623: LD_INT 0
44625: PUSH
44626: LD_INT 0
44628: PUSH
44629: EMPTY
44630: LIST
44631: LIST
44632: LIST
44633: ST_TO_ADDR
// if GetClass ( i ) = 11 then
44634: LD_VAR 0 6
44638: PPUSH
44639: CALL_OW 257
44643: PUSH
44644: LD_INT 11
44646: EQUAL
44647: IFFALSE 44668
// points := [ 30 , 10 , 5 ] ;
44649: LD_ADDR_VAR 0 9
44653: PUSH
44654: LD_INT 30
44656: PUSH
44657: LD_INT 10
44659: PUSH
44660: LD_INT 5
44662: PUSH
44663: EMPTY
44664: LIST
44665: LIST
44666: LIST
44667: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
44668: LD_VAR 0 1
44672: PPUSH
44673: LD_INT 5
44675: PPUSH
44676: CALL_OW 321
44680: PUSH
44681: LD_INT 2
44683: EQUAL
44684: IFFALSE 44701
// bpoints := bpoints * 1.8 ;
44686: LD_ADDR_VAR 0 10
44690: PUSH
44691: LD_VAR 0 10
44695: PUSH
44696: LD_REAL  1.80000000000000E+0000
44699: MUL
44700: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
44701: LD_VAR 0 6
44705: PPUSH
44706: CALL_OW 257
44710: PUSH
44711: LD_INT 1
44713: PUSH
44714: LD_INT 2
44716: PUSH
44717: LD_INT 3
44719: PUSH
44720: LD_INT 4
44722: PUSH
44723: EMPTY
44724: LIST
44725: LIST
44726: LIST
44727: LIST
44728: IN
44729: PUSH
44730: LD_VAR 0 1
44734: PPUSH
44735: LD_INT 51
44737: PPUSH
44738: CALL_OW 321
44742: PUSH
44743: LD_INT 2
44745: EQUAL
44746: AND
44747: IFFALSE 44764
// bpoints := bpoints * 1.2 ;
44749: LD_ADDR_VAR 0 10
44753: PUSH
44754: LD_VAR 0 10
44758: PUSH
44759: LD_REAL  1.20000000000000E+0000
44762: MUL
44763: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
44764: LD_VAR 0 6
44768: PPUSH
44769: CALL_OW 257
44773: PUSH
44774: LD_INT 5
44776: PUSH
44777: LD_INT 7
44779: PUSH
44780: LD_INT 9
44782: PUSH
44783: EMPTY
44784: LIST
44785: LIST
44786: LIST
44787: IN
44788: PUSH
44789: LD_VAR 0 1
44793: PPUSH
44794: LD_INT 52
44796: PPUSH
44797: CALL_OW 321
44801: PUSH
44802: LD_INT 2
44804: EQUAL
44805: AND
44806: IFFALSE 44823
// bpoints := bpoints * 1.5 ;
44808: LD_ADDR_VAR 0 10
44812: PUSH
44813: LD_VAR 0 10
44817: PUSH
44818: LD_REAL  1.50000000000000E+0000
44821: MUL
44822: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
44823: LD_VAR 0 1
44827: PPUSH
44828: LD_INT 66
44830: PPUSH
44831: CALL_OW 321
44835: PUSH
44836: LD_INT 2
44838: EQUAL
44839: IFFALSE 44856
// bpoints := bpoints * 1.1 ;
44841: LD_ADDR_VAR 0 10
44845: PUSH
44846: LD_VAR 0 10
44850: PUSH
44851: LD_REAL  1.10000000000000E+0000
44854: MUL
44855: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
44856: LD_ADDR_VAR 0 10
44860: PUSH
44861: LD_VAR 0 10
44865: PUSH
44866: LD_VAR 0 6
44870: PPUSH
44871: LD_INT 1
44873: PPUSH
44874: CALL_OW 259
44878: PUSH
44879: LD_REAL  1.15000000000000E+0000
44882: MUL
44883: MUL
44884: ST_TO_ADDR
// end ; unit_vehicle :
44885: GO 45715
44887: LD_INT 2
44889: DOUBLE
44890: EQUAL
44891: IFTRUE 44895
44893: GO 45703
44895: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
44896: LD_VAR 0 6
44900: PPUSH
44901: CALL_OW 264
44905: PUSH
44906: LD_INT 2
44908: PUSH
44909: LD_INT 42
44911: PUSH
44912: LD_INT 24
44914: PUSH
44915: EMPTY
44916: LIST
44917: LIST
44918: LIST
44919: IN
44920: IFFALSE 44941
// points := [ 25 , 5 , 3 ] ;
44922: LD_ADDR_VAR 0 9
44926: PUSH
44927: LD_INT 25
44929: PUSH
44930: LD_INT 5
44932: PUSH
44933: LD_INT 3
44935: PUSH
44936: EMPTY
44937: LIST
44938: LIST
44939: LIST
44940: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
44941: LD_VAR 0 6
44945: PPUSH
44946: CALL_OW 264
44950: PUSH
44951: LD_INT 4
44953: PUSH
44954: LD_INT 43
44956: PUSH
44957: LD_INT 25
44959: PUSH
44960: EMPTY
44961: LIST
44962: LIST
44963: LIST
44964: IN
44965: IFFALSE 44986
// points := [ 40 , 15 , 5 ] ;
44967: LD_ADDR_VAR 0 9
44971: PUSH
44972: LD_INT 40
44974: PUSH
44975: LD_INT 15
44977: PUSH
44978: LD_INT 5
44980: PUSH
44981: EMPTY
44982: LIST
44983: LIST
44984: LIST
44985: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
44986: LD_VAR 0 6
44990: PPUSH
44991: CALL_OW 264
44995: PUSH
44996: LD_INT 3
44998: PUSH
44999: LD_INT 23
45001: PUSH
45002: EMPTY
45003: LIST
45004: LIST
45005: IN
45006: IFFALSE 45027
// points := [ 7 , 25 , 8 ] ;
45008: LD_ADDR_VAR 0 9
45012: PUSH
45013: LD_INT 7
45015: PUSH
45016: LD_INT 25
45018: PUSH
45019: LD_INT 8
45021: PUSH
45022: EMPTY
45023: LIST
45024: LIST
45025: LIST
45026: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
45027: LD_VAR 0 6
45031: PPUSH
45032: CALL_OW 264
45036: PUSH
45037: LD_INT 5
45039: PUSH
45040: LD_INT 27
45042: PUSH
45043: LD_INT 44
45045: PUSH
45046: EMPTY
45047: LIST
45048: LIST
45049: LIST
45050: IN
45051: IFFALSE 45072
// points := [ 14 , 50 , 16 ] ;
45053: LD_ADDR_VAR 0 9
45057: PUSH
45058: LD_INT 14
45060: PUSH
45061: LD_INT 50
45063: PUSH
45064: LD_INT 16
45066: PUSH
45067: EMPTY
45068: LIST
45069: LIST
45070: LIST
45071: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
45072: LD_VAR 0 6
45076: PPUSH
45077: CALL_OW 264
45081: PUSH
45082: LD_INT 6
45084: PUSH
45085: LD_INT 46
45087: PUSH
45088: EMPTY
45089: LIST
45090: LIST
45091: IN
45092: IFFALSE 45113
// points := [ 32 , 120 , 70 ] ;
45094: LD_ADDR_VAR 0 9
45098: PUSH
45099: LD_INT 32
45101: PUSH
45102: LD_INT 120
45104: PUSH
45105: LD_INT 70
45107: PUSH
45108: EMPTY
45109: LIST
45110: LIST
45111: LIST
45112: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
45113: LD_VAR 0 6
45117: PPUSH
45118: CALL_OW 264
45122: PUSH
45123: LD_INT 7
45125: PUSH
45126: LD_INT 28
45128: PUSH
45129: LD_INT 45
45131: PUSH
45132: LD_EXP 50
45136: PUSH
45137: EMPTY
45138: LIST
45139: LIST
45140: LIST
45141: LIST
45142: IN
45143: IFFALSE 45164
// points := [ 35 , 20 , 45 ] ;
45145: LD_ADDR_VAR 0 9
45149: PUSH
45150: LD_INT 35
45152: PUSH
45153: LD_INT 20
45155: PUSH
45156: LD_INT 45
45158: PUSH
45159: EMPTY
45160: LIST
45161: LIST
45162: LIST
45163: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
45164: LD_VAR 0 6
45168: PPUSH
45169: CALL_OW 264
45173: PUSH
45174: LD_INT 47
45176: PUSH
45177: EMPTY
45178: LIST
45179: IN
45180: IFFALSE 45201
// points := [ 67 , 45 , 75 ] ;
45182: LD_ADDR_VAR 0 9
45186: PUSH
45187: LD_INT 67
45189: PUSH
45190: LD_INT 45
45192: PUSH
45193: LD_INT 75
45195: PUSH
45196: EMPTY
45197: LIST
45198: LIST
45199: LIST
45200: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
45201: LD_VAR 0 6
45205: PPUSH
45206: CALL_OW 264
45210: PUSH
45211: LD_INT 26
45213: PUSH
45214: EMPTY
45215: LIST
45216: IN
45217: IFFALSE 45238
// points := [ 120 , 30 , 80 ] ;
45219: LD_ADDR_VAR 0 9
45223: PUSH
45224: LD_INT 120
45226: PUSH
45227: LD_INT 30
45229: PUSH
45230: LD_INT 80
45232: PUSH
45233: EMPTY
45234: LIST
45235: LIST
45236: LIST
45237: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
45238: LD_VAR 0 6
45242: PPUSH
45243: CALL_OW 264
45247: PUSH
45248: LD_INT 22
45250: PUSH
45251: EMPTY
45252: LIST
45253: IN
45254: IFFALSE 45275
// points := [ 40 , 1 , 1 ] ;
45256: LD_ADDR_VAR 0 9
45260: PUSH
45261: LD_INT 40
45263: PUSH
45264: LD_INT 1
45266: PUSH
45267: LD_INT 1
45269: PUSH
45270: EMPTY
45271: LIST
45272: LIST
45273: LIST
45274: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
45275: LD_VAR 0 6
45279: PPUSH
45280: CALL_OW 264
45284: PUSH
45285: LD_INT 29
45287: PUSH
45288: EMPTY
45289: LIST
45290: IN
45291: IFFALSE 45312
// points := [ 70 , 200 , 400 ] ;
45293: LD_ADDR_VAR 0 9
45297: PUSH
45298: LD_INT 70
45300: PUSH
45301: LD_INT 200
45303: PUSH
45304: LD_INT 400
45306: PUSH
45307: EMPTY
45308: LIST
45309: LIST
45310: LIST
45311: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
45312: LD_VAR 0 6
45316: PPUSH
45317: CALL_OW 264
45321: PUSH
45322: LD_INT 14
45324: PUSH
45325: LD_INT 53
45327: PUSH
45328: EMPTY
45329: LIST
45330: LIST
45331: IN
45332: IFFALSE 45353
// points := [ 40 , 10 , 20 ] ;
45334: LD_ADDR_VAR 0 9
45338: PUSH
45339: LD_INT 40
45341: PUSH
45342: LD_INT 10
45344: PUSH
45345: LD_INT 20
45347: PUSH
45348: EMPTY
45349: LIST
45350: LIST
45351: LIST
45352: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
45353: LD_VAR 0 6
45357: PPUSH
45358: CALL_OW 264
45362: PUSH
45363: LD_INT 9
45365: PUSH
45366: EMPTY
45367: LIST
45368: IN
45369: IFFALSE 45390
// points := [ 5 , 70 , 20 ] ;
45371: LD_ADDR_VAR 0 9
45375: PUSH
45376: LD_INT 5
45378: PUSH
45379: LD_INT 70
45381: PUSH
45382: LD_INT 20
45384: PUSH
45385: EMPTY
45386: LIST
45387: LIST
45388: LIST
45389: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
45390: LD_VAR 0 6
45394: PPUSH
45395: CALL_OW 264
45399: PUSH
45400: LD_INT 10
45402: PUSH
45403: EMPTY
45404: LIST
45405: IN
45406: IFFALSE 45427
// points := [ 35 , 110 , 70 ] ;
45408: LD_ADDR_VAR 0 9
45412: PUSH
45413: LD_INT 35
45415: PUSH
45416: LD_INT 110
45418: PUSH
45419: LD_INT 70
45421: PUSH
45422: EMPTY
45423: LIST
45424: LIST
45425: LIST
45426: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
45427: LD_VAR 0 6
45431: PPUSH
45432: CALL_OW 265
45436: PUSH
45437: LD_INT 25
45439: EQUAL
45440: IFFALSE 45461
// points := [ 80 , 65 , 100 ] ;
45442: LD_ADDR_VAR 0 9
45446: PUSH
45447: LD_INT 80
45449: PUSH
45450: LD_INT 65
45452: PUSH
45453: LD_INT 100
45455: PUSH
45456: EMPTY
45457: LIST
45458: LIST
45459: LIST
45460: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
45461: LD_VAR 0 6
45465: PPUSH
45466: CALL_OW 263
45470: PUSH
45471: LD_INT 1
45473: EQUAL
45474: IFFALSE 45509
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
45476: LD_ADDR_VAR 0 10
45480: PUSH
45481: LD_VAR 0 10
45485: PUSH
45486: LD_VAR 0 6
45490: PPUSH
45491: CALL_OW 311
45495: PPUSH
45496: LD_INT 3
45498: PPUSH
45499: CALL_OW 259
45503: PUSH
45504: LD_INT 4
45506: MUL
45507: MUL
45508: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
45509: LD_VAR 0 6
45513: PPUSH
45514: CALL_OW 263
45518: PUSH
45519: LD_INT 2
45521: EQUAL
45522: IFFALSE 45573
// begin j := IsControledBy ( i ) ;
45524: LD_ADDR_VAR 0 7
45528: PUSH
45529: LD_VAR 0 6
45533: PPUSH
45534: CALL_OW 312
45538: ST_TO_ADDR
// if j then
45539: LD_VAR 0 7
45543: IFFALSE 45573
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
45545: LD_ADDR_VAR 0 10
45549: PUSH
45550: LD_VAR 0 10
45554: PUSH
45555: LD_VAR 0 7
45559: PPUSH
45560: LD_INT 3
45562: PPUSH
45563: CALL_OW 259
45567: PUSH
45568: LD_INT 3
45570: MUL
45571: MUL
45572: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
45573: LD_VAR 0 6
45577: PPUSH
45578: CALL_OW 264
45582: PUSH
45583: LD_INT 5
45585: PUSH
45586: LD_INT 6
45588: PUSH
45589: LD_INT 46
45591: PUSH
45592: LD_INT 44
45594: PUSH
45595: LD_INT 47
45597: PUSH
45598: LD_INT 45
45600: PUSH
45601: LD_INT 28
45603: PUSH
45604: LD_INT 7
45606: PUSH
45607: LD_INT 27
45609: PUSH
45610: LD_INT 29
45612: PUSH
45613: EMPTY
45614: LIST
45615: LIST
45616: LIST
45617: LIST
45618: LIST
45619: LIST
45620: LIST
45621: LIST
45622: LIST
45623: LIST
45624: IN
45625: PUSH
45626: LD_VAR 0 1
45630: PPUSH
45631: LD_INT 52
45633: PPUSH
45634: CALL_OW 321
45638: PUSH
45639: LD_INT 2
45641: EQUAL
45642: AND
45643: IFFALSE 45660
// bpoints := bpoints * 1.2 ;
45645: LD_ADDR_VAR 0 10
45649: PUSH
45650: LD_VAR 0 10
45654: PUSH
45655: LD_REAL  1.20000000000000E+0000
45658: MUL
45659: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
45660: LD_VAR 0 6
45664: PPUSH
45665: CALL_OW 264
45669: PUSH
45670: LD_INT 6
45672: PUSH
45673: LD_INT 46
45675: PUSH
45676: LD_INT 47
45678: PUSH
45679: EMPTY
45680: LIST
45681: LIST
45682: LIST
45683: IN
45684: IFFALSE 45701
// bpoints := bpoints * 1.2 ;
45686: LD_ADDR_VAR 0 10
45690: PUSH
45691: LD_VAR 0 10
45695: PUSH
45696: LD_REAL  1.20000000000000E+0000
45699: MUL
45700: ST_TO_ADDR
// end ; unit_building :
45701: GO 45715
45703: LD_INT 3
45705: DOUBLE
45706: EQUAL
45707: IFTRUE 45711
45709: GO 45714
45711: POP
// ; end ;
45712: GO 45715
45714: POP
// for j = 1 to 3 do
45715: LD_ADDR_VAR 0 7
45719: PUSH
45720: DOUBLE
45721: LD_INT 1
45723: DEC
45724: ST_TO_ADDR
45725: LD_INT 3
45727: PUSH
45728: FOR_TO
45729: IFFALSE 45782
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
45731: LD_ADDR_VAR 0 5
45735: PUSH
45736: LD_VAR 0 5
45740: PPUSH
45741: LD_VAR 0 7
45745: PPUSH
45746: LD_VAR 0 5
45750: PUSH
45751: LD_VAR 0 7
45755: ARRAY
45756: PUSH
45757: LD_VAR 0 9
45761: PUSH
45762: LD_VAR 0 7
45766: ARRAY
45767: PUSH
45768: LD_VAR 0 10
45772: MUL
45773: PLUS
45774: PPUSH
45775: CALL_OW 1
45779: ST_TO_ADDR
45780: GO 45728
45782: POP
45783: POP
// end ;
45784: GO 44261
45786: POP
45787: POP
// result := Replace ( result , 4 , tmp ) ;
45788: LD_ADDR_VAR 0 5
45792: PUSH
45793: LD_VAR 0 5
45797: PPUSH
45798: LD_INT 4
45800: PPUSH
45801: LD_VAR 0 8
45805: PPUSH
45806: CALL_OW 1
45810: ST_TO_ADDR
// end ;
45811: LD_VAR 0 5
45815: RET
// export function DangerAtRange ( unit , range ) ; begin
45816: LD_INT 0
45818: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
45819: LD_ADDR_VAR 0 3
45823: PUSH
45824: LD_VAR 0 1
45828: PPUSH
45829: CALL_OW 255
45833: PPUSH
45834: LD_VAR 0 1
45838: PPUSH
45839: CALL_OW 250
45843: PPUSH
45844: LD_VAR 0 1
45848: PPUSH
45849: CALL_OW 251
45853: PPUSH
45854: LD_VAR 0 2
45858: PPUSH
45859: CALL 44113 0 4
45863: ST_TO_ADDR
// end ;
45864: LD_VAR 0 3
45868: RET
// export function DangerInArea ( side , area ) ; begin
45869: LD_INT 0
45871: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
45872: LD_ADDR_VAR 0 3
45876: PUSH
45877: LD_VAR 0 2
45881: PPUSH
45882: LD_INT 81
45884: PUSH
45885: LD_VAR 0 1
45889: PUSH
45890: EMPTY
45891: LIST
45892: LIST
45893: PPUSH
45894: CALL_OW 70
45898: ST_TO_ADDR
// end ;
45899: LD_VAR 0 3
45903: RET
// export function IsExtension ( b ) ; begin
45904: LD_INT 0
45906: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
45907: LD_ADDR_VAR 0 2
45911: PUSH
45912: LD_VAR 0 1
45916: PUSH
45917: LD_INT 23
45919: PUSH
45920: LD_INT 20
45922: PUSH
45923: LD_INT 22
45925: PUSH
45926: LD_INT 17
45928: PUSH
45929: LD_INT 24
45931: PUSH
45932: LD_INT 21
45934: PUSH
45935: LD_INT 19
45937: PUSH
45938: LD_INT 16
45940: PUSH
45941: LD_INT 25
45943: PUSH
45944: LD_INT 18
45946: PUSH
45947: EMPTY
45948: LIST
45949: LIST
45950: LIST
45951: LIST
45952: LIST
45953: LIST
45954: LIST
45955: LIST
45956: LIST
45957: LIST
45958: IN
45959: ST_TO_ADDR
// end ;
45960: LD_VAR 0 2
45964: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
45965: LD_INT 0
45967: PPUSH
45968: PPUSH
45969: PPUSH
// result := [ ] ;
45970: LD_ADDR_VAR 0 4
45974: PUSH
45975: EMPTY
45976: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
45977: LD_ADDR_VAR 0 5
45981: PUSH
45982: LD_VAR 0 2
45986: PPUSH
45987: LD_INT 21
45989: PUSH
45990: LD_INT 3
45992: PUSH
45993: EMPTY
45994: LIST
45995: LIST
45996: PPUSH
45997: CALL_OW 70
46001: ST_TO_ADDR
// if not tmp then
46002: LD_VAR 0 5
46006: NOT
46007: IFFALSE 46011
// exit ;
46009: GO 46075
// if checkLink then
46011: LD_VAR 0 3
46015: IFFALSE 46065
// begin for i in tmp do
46017: LD_ADDR_VAR 0 6
46021: PUSH
46022: LD_VAR 0 5
46026: PUSH
46027: FOR_IN
46028: IFFALSE 46063
// if GetBase ( i ) <> base then
46030: LD_VAR 0 6
46034: PPUSH
46035: CALL_OW 274
46039: PUSH
46040: LD_VAR 0 1
46044: NONEQUAL
46045: IFFALSE 46061
// ComLinkToBase ( base , i ) ;
46047: LD_VAR 0 1
46051: PPUSH
46052: LD_VAR 0 6
46056: PPUSH
46057: CALL_OW 169
46061: GO 46027
46063: POP
46064: POP
// end ; result := tmp ;
46065: LD_ADDR_VAR 0 4
46069: PUSH
46070: LD_VAR 0 5
46074: ST_TO_ADDR
// end ;
46075: LD_VAR 0 4
46079: RET
// export function ComComplete ( units , b ) ; var i ; begin
46080: LD_INT 0
46082: PPUSH
46083: PPUSH
// if not units then
46084: LD_VAR 0 1
46088: NOT
46089: IFFALSE 46093
// exit ;
46091: GO 46183
// for i in units do
46093: LD_ADDR_VAR 0 4
46097: PUSH
46098: LD_VAR 0 1
46102: PUSH
46103: FOR_IN
46104: IFFALSE 46181
// if BuildingStatus ( b ) = bs_build then
46106: LD_VAR 0 2
46110: PPUSH
46111: CALL_OW 461
46115: PUSH
46116: LD_INT 1
46118: EQUAL
46119: IFFALSE 46179
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
46121: LD_VAR 0 4
46125: PPUSH
46126: LD_STRING h
46128: PUSH
46129: LD_VAR 0 2
46133: PPUSH
46134: CALL_OW 250
46138: PUSH
46139: LD_VAR 0 2
46143: PPUSH
46144: CALL_OW 251
46148: PUSH
46149: LD_VAR 0 2
46153: PUSH
46154: LD_INT 0
46156: PUSH
46157: LD_INT 0
46159: PUSH
46160: LD_INT 0
46162: PUSH
46163: EMPTY
46164: LIST
46165: LIST
46166: LIST
46167: LIST
46168: LIST
46169: LIST
46170: LIST
46171: PUSH
46172: EMPTY
46173: LIST
46174: PPUSH
46175: CALL_OW 446
46179: GO 46103
46181: POP
46182: POP
// end ;
46183: LD_VAR 0 3
46187: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
46188: LD_INT 0
46190: PPUSH
46191: PPUSH
46192: PPUSH
46193: PPUSH
46194: PPUSH
46195: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
46196: LD_VAR 0 1
46200: NOT
46201: PUSH
46202: LD_VAR 0 1
46206: PPUSH
46207: CALL_OW 263
46211: PUSH
46212: LD_INT 2
46214: NONEQUAL
46215: OR
46216: IFFALSE 46220
// exit ;
46218: GO 46536
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
46220: LD_ADDR_VAR 0 6
46224: PUSH
46225: LD_INT 22
46227: PUSH
46228: LD_VAR 0 1
46232: PPUSH
46233: CALL_OW 255
46237: PUSH
46238: EMPTY
46239: LIST
46240: LIST
46241: PUSH
46242: LD_INT 2
46244: PUSH
46245: LD_INT 30
46247: PUSH
46248: LD_INT 36
46250: PUSH
46251: EMPTY
46252: LIST
46253: LIST
46254: PUSH
46255: LD_INT 34
46257: PUSH
46258: LD_INT 31
46260: PUSH
46261: EMPTY
46262: LIST
46263: LIST
46264: PUSH
46265: EMPTY
46266: LIST
46267: LIST
46268: LIST
46269: PUSH
46270: EMPTY
46271: LIST
46272: LIST
46273: PPUSH
46274: CALL_OW 69
46278: ST_TO_ADDR
// if not tmp then
46279: LD_VAR 0 6
46283: NOT
46284: IFFALSE 46288
// exit ;
46286: GO 46536
// result := [ ] ;
46288: LD_ADDR_VAR 0 2
46292: PUSH
46293: EMPTY
46294: ST_TO_ADDR
// for i in tmp do
46295: LD_ADDR_VAR 0 3
46299: PUSH
46300: LD_VAR 0 6
46304: PUSH
46305: FOR_IN
46306: IFFALSE 46377
// begin t := UnitsInside ( i ) ;
46308: LD_ADDR_VAR 0 4
46312: PUSH
46313: LD_VAR 0 3
46317: PPUSH
46318: CALL_OW 313
46322: ST_TO_ADDR
// if t then
46323: LD_VAR 0 4
46327: IFFALSE 46375
// for j in t do
46329: LD_ADDR_VAR 0 7
46333: PUSH
46334: LD_VAR 0 4
46338: PUSH
46339: FOR_IN
46340: IFFALSE 46373
// result := Replace ( result , result + 1 , j ) ;
46342: LD_ADDR_VAR 0 2
46346: PUSH
46347: LD_VAR 0 2
46351: PPUSH
46352: LD_VAR 0 2
46356: PUSH
46357: LD_INT 1
46359: PLUS
46360: PPUSH
46361: LD_VAR 0 7
46365: PPUSH
46366: CALL_OW 1
46370: ST_TO_ADDR
46371: GO 46339
46373: POP
46374: POP
// end ;
46375: GO 46305
46377: POP
46378: POP
// if not result then
46379: LD_VAR 0 2
46383: NOT
46384: IFFALSE 46388
// exit ;
46386: GO 46536
// mech := result [ 1 ] ;
46388: LD_ADDR_VAR 0 5
46392: PUSH
46393: LD_VAR 0 2
46397: PUSH
46398: LD_INT 1
46400: ARRAY
46401: ST_TO_ADDR
// if result > 1 then
46402: LD_VAR 0 2
46406: PUSH
46407: LD_INT 1
46409: GREATER
46410: IFFALSE 46522
// begin for i = 2 to result do
46412: LD_ADDR_VAR 0 3
46416: PUSH
46417: DOUBLE
46418: LD_INT 2
46420: DEC
46421: ST_TO_ADDR
46422: LD_VAR 0 2
46426: PUSH
46427: FOR_TO
46428: IFFALSE 46520
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
46430: LD_ADDR_VAR 0 4
46434: PUSH
46435: LD_VAR 0 2
46439: PUSH
46440: LD_VAR 0 3
46444: ARRAY
46445: PPUSH
46446: LD_INT 3
46448: PPUSH
46449: CALL_OW 259
46453: PUSH
46454: LD_VAR 0 2
46458: PUSH
46459: LD_VAR 0 3
46463: ARRAY
46464: PPUSH
46465: CALL_OW 432
46469: MINUS
46470: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
46471: LD_VAR 0 4
46475: PUSH
46476: LD_VAR 0 5
46480: PPUSH
46481: LD_INT 3
46483: PPUSH
46484: CALL_OW 259
46488: PUSH
46489: LD_VAR 0 5
46493: PPUSH
46494: CALL_OW 432
46498: MINUS
46499: GREATEREQUAL
46500: IFFALSE 46518
// mech := result [ i ] ;
46502: LD_ADDR_VAR 0 5
46506: PUSH
46507: LD_VAR 0 2
46511: PUSH
46512: LD_VAR 0 3
46516: ARRAY
46517: ST_TO_ADDR
// end ;
46518: GO 46427
46520: POP
46521: POP
// end ; ComLinkTo ( vehicle , mech ) ;
46522: LD_VAR 0 1
46526: PPUSH
46527: LD_VAR 0 5
46531: PPUSH
46532: CALL_OW 135
// end ;
46536: LD_VAR 0 2
46540: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
46541: LD_INT 0
46543: PPUSH
46544: PPUSH
46545: PPUSH
46546: PPUSH
46547: PPUSH
46548: PPUSH
46549: PPUSH
46550: PPUSH
46551: PPUSH
46552: PPUSH
46553: PPUSH
46554: PPUSH
46555: PPUSH
// result := [ ] ;
46556: LD_ADDR_VAR 0 7
46560: PUSH
46561: EMPTY
46562: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
46563: LD_VAR 0 1
46567: PPUSH
46568: CALL_OW 266
46572: PUSH
46573: LD_INT 0
46575: PUSH
46576: LD_INT 1
46578: PUSH
46579: EMPTY
46580: LIST
46581: LIST
46582: IN
46583: NOT
46584: IFFALSE 46588
// exit ;
46586: GO 48222
// if name then
46588: LD_VAR 0 3
46592: IFFALSE 46608
// SetBName ( base_dep , name ) ;
46594: LD_VAR 0 1
46598: PPUSH
46599: LD_VAR 0 3
46603: PPUSH
46604: CALL_OW 500
// base := GetBase ( base_dep ) ;
46608: LD_ADDR_VAR 0 15
46612: PUSH
46613: LD_VAR 0 1
46617: PPUSH
46618: CALL_OW 274
46622: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
46623: LD_ADDR_VAR 0 16
46627: PUSH
46628: LD_VAR 0 1
46632: PPUSH
46633: CALL_OW 255
46637: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
46638: LD_ADDR_VAR 0 17
46642: PUSH
46643: LD_VAR 0 1
46647: PPUSH
46648: CALL_OW 248
46652: ST_TO_ADDR
// if sources then
46653: LD_VAR 0 5
46657: IFFALSE 46704
// for i = 1 to 3 do
46659: LD_ADDR_VAR 0 8
46663: PUSH
46664: DOUBLE
46665: LD_INT 1
46667: DEC
46668: ST_TO_ADDR
46669: LD_INT 3
46671: PUSH
46672: FOR_TO
46673: IFFALSE 46702
// AddResourceType ( base , i , sources [ i ] ) ;
46675: LD_VAR 0 15
46679: PPUSH
46680: LD_VAR 0 8
46684: PPUSH
46685: LD_VAR 0 5
46689: PUSH
46690: LD_VAR 0 8
46694: ARRAY
46695: PPUSH
46696: CALL_OW 276
46700: GO 46672
46702: POP
46703: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
46704: LD_ADDR_VAR 0 18
46708: PUSH
46709: LD_VAR 0 15
46713: PPUSH
46714: LD_VAR 0 2
46718: PPUSH
46719: LD_INT 1
46721: PPUSH
46722: CALL 45965 0 3
46726: ST_TO_ADDR
// InitHc ;
46727: CALL_OW 19
// InitUc ;
46731: CALL_OW 18
// uc_side := side ;
46735: LD_ADDR_OWVAR 20
46739: PUSH
46740: LD_VAR 0 16
46744: ST_TO_ADDR
// uc_nation := nation ;
46745: LD_ADDR_OWVAR 21
46749: PUSH
46750: LD_VAR 0 17
46754: ST_TO_ADDR
// if buildings then
46755: LD_VAR 0 18
46759: IFFALSE 48081
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
46761: LD_ADDR_VAR 0 19
46765: PUSH
46766: LD_VAR 0 18
46770: PPUSH
46771: LD_INT 2
46773: PUSH
46774: LD_INT 30
46776: PUSH
46777: LD_INT 29
46779: PUSH
46780: EMPTY
46781: LIST
46782: LIST
46783: PUSH
46784: LD_INT 30
46786: PUSH
46787: LD_INT 30
46789: PUSH
46790: EMPTY
46791: LIST
46792: LIST
46793: PUSH
46794: EMPTY
46795: LIST
46796: LIST
46797: LIST
46798: PPUSH
46799: CALL_OW 72
46803: ST_TO_ADDR
// if tmp then
46804: LD_VAR 0 19
46808: IFFALSE 46856
// for i in tmp do
46810: LD_ADDR_VAR 0 8
46814: PUSH
46815: LD_VAR 0 19
46819: PUSH
46820: FOR_IN
46821: IFFALSE 46854
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
46823: LD_VAR 0 8
46827: PPUSH
46828: CALL_OW 250
46832: PPUSH
46833: LD_VAR 0 8
46837: PPUSH
46838: CALL_OW 251
46842: PPUSH
46843: LD_VAR 0 16
46847: PPUSH
46848: CALL_OW 441
46852: GO 46820
46854: POP
46855: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
46856: LD_VAR 0 18
46860: PPUSH
46861: LD_INT 2
46863: PUSH
46864: LD_INT 30
46866: PUSH
46867: LD_INT 32
46869: PUSH
46870: EMPTY
46871: LIST
46872: LIST
46873: PUSH
46874: LD_INT 30
46876: PUSH
46877: LD_INT 33
46879: PUSH
46880: EMPTY
46881: LIST
46882: LIST
46883: PUSH
46884: EMPTY
46885: LIST
46886: LIST
46887: LIST
46888: PPUSH
46889: CALL_OW 72
46893: IFFALSE 46981
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
46895: LD_ADDR_VAR 0 8
46899: PUSH
46900: LD_VAR 0 18
46904: PPUSH
46905: LD_INT 2
46907: PUSH
46908: LD_INT 30
46910: PUSH
46911: LD_INT 32
46913: PUSH
46914: EMPTY
46915: LIST
46916: LIST
46917: PUSH
46918: LD_INT 30
46920: PUSH
46921: LD_INT 33
46923: PUSH
46924: EMPTY
46925: LIST
46926: LIST
46927: PUSH
46928: EMPTY
46929: LIST
46930: LIST
46931: LIST
46932: PPUSH
46933: CALL_OW 72
46937: PUSH
46938: FOR_IN
46939: IFFALSE 46979
// begin if not GetBWeapon ( i ) then
46941: LD_VAR 0 8
46945: PPUSH
46946: CALL_OW 269
46950: NOT
46951: IFFALSE 46977
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
46953: LD_VAR 0 8
46957: PPUSH
46958: LD_VAR 0 8
46962: PPUSH
46963: LD_VAR 0 2
46967: PPUSH
46968: CALL 48227 0 2
46972: PPUSH
46973: CALL_OW 431
// end ;
46977: GO 46938
46979: POP
46980: POP
// end ; for i = 1 to personel do
46981: LD_ADDR_VAR 0 8
46985: PUSH
46986: DOUBLE
46987: LD_INT 1
46989: DEC
46990: ST_TO_ADDR
46991: LD_VAR 0 6
46995: PUSH
46996: FOR_TO
46997: IFFALSE 48061
// begin if i > 4 then
46999: LD_VAR 0 8
47003: PUSH
47004: LD_INT 4
47006: GREATER
47007: IFFALSE 47011
// break ;
47009: GO 48061
// case i of 1 :
47011: LD_VAR 0 8
47015: PUSH
47016: LD_INT 1
47018: DOUBLE
47019: EQUAL
47020: IFTRUE 47024
47022: GO 47104
47024: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
47025: LD_ADDR_VAR 0 12
47029: PUSH
47030: LD_VAR 0 18
47034: PPUSH
47035: LD_INT 22
47037: PUSH
47038: LD_VAR 0 16
47042: PUSH
47043: EMPTY
47044: LIST
47045: LIST
47046: PUSH
47047: LD_INT 58
47049: PUSH
47050: EMPTY
47051: LIST
47052: PUSH
47053: LD_INT 2
47055: PUSH
47056: LD_INT 30
47058: PUSH
47059: LD_INT 32
47061: PUSH
47062: EMPTY
47063: LIST
47064: LIST
47065: PUSH
47066: LD_INT 30
47068: PUSH
47069: LD_INT 4
47071: PUSH
47072: EMPTY
47073: LIST
47074: LIST
47075: PUSH
47076: LD_INT 30
47078: PUSH
47079: LD_INT 5
47081: PUSH
47082: EMPTY
47083: LIST
47084: LIST
47085: PUSH
47086: EMPTY
47087: LIST
47088: LIST
47089: LIST
47090: LIST
47091: PUSH
47092: EMPTY
47093: LIST
47094: LIST
47095: LIST
47096: PPUSH
47097: CALL_OW 72
47101: ST_TO_ADDR
47102: GO 47326
47104: LD_INT 2
47106: DOUBLE
47107: EQUAL
47108: IFTRUE 47112
47110: GO 47174
47112: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
47113: LD_ADDR_VAR 0 12
47117: PUSH
47118: LD_VAR 0 18
47122: PPUSH
47123: LD_INT 22
47125: PUSH
47126: LD_VAR 0 16
47130: PUSH
47131: EMPTY
47132: LIST
47133: LIST
47134: PUSH
47135: LD_INT 2
47137: PUSH
47138: LD_INT 30
47140: PUSH
47141: LD_INT 0
47143: PUSH
47144: EMPTY
47145: LIST
47146: LIST
47147: PUSH
47148: LD_INT 30
47150: PUSH
47151: LD_INT 1
47153: PUSH
47154: EMPTY
47155: LIST
47156: LIST
47157: PUSH
47158: EMPTY
47159: LIST
47160: LIST
47161: LIST
47162: PUSH
47163: EMPTY
47164: LIST
47165: LIST
47166: PPUSH
47167: CALL_OW 72
47171: ST_TO_ADDR
47172: GO 47326
47174: LD_INT 3
47176: DOUBLE
47177: EQUAL
47178: IFTRUE 47182
47180: GO 47244
47182: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
47183: LD_ADDR_VAR 0 12
47187: PUSH
47188: LD_VAR 0 18
47192: PPUSH
47193: LD_INT 22
47195: PUSH
47196: LD_VAR 0 16
47200: PUSH
47201: EMPTY
47202: LIST
47203: LIST
47204: PUSH
47205: LD_INT 2
47207: PUSH
47208: LD_INT 30
47210: PUSH
47211: LD_INT 2
47213: PUSH
47214: EMPTY
47215: LIST
47216: LIST
47217: PUSH
47218: LD_INT 30
47220: PUSH
47221: LD_INT 3
47223: PUSH
47224: EMPTY
47225: LIST
47226: LIST
47227: PUSH
47228: EMPTY
47229: LIST
47230: LIST
47231: LIST
47232: PUSH
47233: EMPTY
47234: LIST
47235: LIST
47236: PPUSH
47237: CALL_OW 72
47241: ST_TO_ADDR
47242: GO 47326
47244: LD_INT 4
47246: DOUBLE
47247: EQUAL
47248: IFTRUE 47252
47250: GO 47325
47252: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
47253: LD_ADDR_VAR 0 12
47257: PUSH
47258: LD_VAR 0 18
47262: PPUSH
47263: LD_INT 22
47265: PUSH
47266: LD_VAR 0 16
47270: PUSH
47271: EMPTY
47272: LIST
47273: LIST
47274: PUSH
47275: LD_INT 2
47277: PUSH
47278: LD_INT 30
47280: PUSH
47281: LD_INT 6
47283: PUSH
47284: EMPTY
47285: LIST
47286: LIST
47287: PUSH
47288: LD_INT 30
47290: PUSH
47291: LD_INT 7
47293: PUSH
47294: EMPTY
47295: LIST
47296: LIST
47297: PUSH
47298: LD_INT 30
47300: PUSH
47301: LD_INT 8
47303: PUSH
47304: EMPTY
47305: LIST
47306: LIST
47307: PUSH
47308: EMPTY
47309: LIST
47310: LIST
47311: LIST
47312: LIST
47313: PUSH
47314: EMPTY
47315: LIST
47316: LIST
47317: PPUSH
47318: CALL_OW 72
47322: ST_TO_ADDR
47323: GO 47326
47325: POP
// if i = 1 then
47326: LD_VAR 0 8
47330: PUSH
47331: LD_INT 1
47333: EQUAL
47334: IFFALSE 47445
// begin tmp := [ ] ;
47336: LD_ADDR_VAR 0 19
47340: PUSH
47341: EMPTY
47342: ST_TO_ADDR
// for j in f do
47343: LD_ADDR_VAR 0 9
47347: PUSH
47348: LD_VAR 0 12
47352: PUSH
47353: FOR_IN
47354: IFFALSE 47427
// if GetBType ( j ) = b_bunker then
47356: LD_VAR 0 9
47360: PPUSH
47361: CALL_OW 266
47365: PUSH
47366: LD_INT 32
47368: EQUAL
47369: IFFALSE 47396
// tmp := Insert ( tmp , 1 , j ) else
47371: LD_ADDR_VAR 0 19
47375: PUSH
47376: LD_VAR 0 19
47380: PPUSH
47381: LD_INT 1
47383: PPUSH
47384: LD_VAR 0 9
47388: PPUSH
47389: CALL_OW 2
47393: ST_TO_ADDR
47394: GO 47425
// tmp := Insert ( tmp , tmp + 1 , j ) ;
47396: LD_ADDR_VAR 0 19
47400: PUSH
47401: LD_VAR 0 19
47405: PPUSH
47406: LD_VAR 0 19
47410: PUSH
47411: LD_INT 1
47413: PLUS
47414: PPUSH
47415: LD_VAR 0 9
47419: PPUSH
47420: CALL_OW 2
47424: ST_TO_ADDR
47425: GO 47353
47427: POP
47428: POP
// if tmp then
47429: LD_VAR 0 19
47433: IFFALSE 47445
// f := tmp ;
47435: LD_ADDR_VAR 0 12
47439: PUSH
47440: LD_VAR 0 19
47444: ST_TO_ADDR
// end ; x := personel [ i ] ;
47445: LD_ADDR_VAR 0 13
47449: PUSH
47450: LD_VAR 0 6
47454: PUSH
47455: LD_VAR 0 8
47459: ARRAY
47460: ST_TO_ADDR
// if x = - 1 then
47461: LD_VAR 0 13
47465: PUSH
47466: LD_INT 1
47468: NEG
47469: EQUAL
47470: IFFALSE 47679
// begin for j in f do
47472: LD_ADDR_VAR 0 9
47476: PUSH
47477: LD_VAR 0 12
47481: PUSH
47482: FOR_IN
47483: IFFALSE 47675
// repeat InitHc ;
47485: CALL_OW 19
// if GetBType ( j ) = b_barracks then
47489: LD_VAR 0 9
47493: PPUSH
47494: CALL_OW 266
47498: PUSH
47499: LD_INT 5
47501: EQUAL
47502: IFFALSE 47572
// begin if UnitsInside ( j ) < 3 then
47504: LD_VAR 0 9
47508: PPUSH
47509: CALL_OW 313
47513: PUSH
47514: LD_INT 3
47516: LESS
47517: IFFALSE 47553
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
47519: LD_INT 0
47521: PPUSH
47522: LD_INT 5
47524: PUSH
47525: LD_INT 8
47527: PUSH
47528: LD_INT 9
47530: PUSH
47531: EMPTY
47532: LIST
47533: LIST
47534: LIST
47535: PUSH
47536: LD_VAR 0 17
47540: ARRAY
47541: PPUSH
47542: LD_VAR 0 4
47546: PPUSH
47547: CALL_OW 380
47551: GO 47570
// PrepareHuman ( false , i , skill ) ;
47553: LD_INT 0
47555: PPUSH
47556: LD_VAR 0 8
47560: PPUSH
47561: LD_VAR 0 4
47565: PPUSH
47566: CALL_OW 380
// end else
47570: GO 47589
// PrepareHuman ( false , i , skill ) ;
47572: LD_INT 0
47574: PPUSH
47575: LD_VAR 0 8
47579: PPUSH
47580: LD_VAR 0 4
47584: PPUSH
47585: CALL_OW 380
// un := CreateHuman ;
47589: LD_ADDR_VAR 0 14
47593: PUSH
47594: CALL_OW 44
47598: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
47599: LD_ADDR_VAR 0 7
47603: PUSH
47604: LD_VAR 0 7
47608: PPUSH
47609: LD_INT 1
47611: PPUSH
47612: LD_VAR 0 14
47616: PPUSH
47617: CALL_OW 2
47621: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
47622: LD_VAR 0 14
47626: PPUSH
47627: LD_VAR 0 9
47631: PPUSH
47632: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
47636: LD_VAR 0 9
47640: PPUSH
47641: CALL_OW 313
47645: PUSH
47646: LD_INT 6
47648: EQUAL
47649: PUSH
47650: LD_VAR 0 9
47654: PPUSH
47655: CALL_OW 266
47659: PUSH
47660: LD_INT 32
47662: PUSH
47663: LD_INT 31
47665: PUSH
47666: EMPTY
47667: LIST
47668: LIST
47669: IN
47670: OR
47671: IFFALSE 47485
47673: GO 47482
47675: POP
47676: POP
// end else
47677: GO 48059
// for j = 1 to x do
47679: LD_ADDR_VAR 0 9
47683: PUSH
47684: DOUBLE
47685: LD_INT 1
47687: DEC
47688: ST_TO_ADDR
47689: LD_VAR 0 13
47693: PUSH
47694: FOR_TO
47695: IFFALSE 48057
// begin InitHc ;
47697: CALL_OW 19
// if not f then
47701: LD_VAR 0 12
47705: NOT
47706: IFFALSE 47795
// begin PrepareHuman ( false , i , skill ) ;
47708: LD_INT 0
47710: PPUSH
47711: LD_VAR 0 8
47715: PPUSH
47716: LD_VAR 0 4
47720: PPUSH
47721: CALL_OW 380
// un := CreateHuman ;
47725: LD_ADDR_VAR 0 14
47729: PUSH
47730: CALL_OW 44
47734: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
47735: LD_ADDR_VAR 0 7
47739: PUSH
47740: LD_VAR 0 7
47744: PPUSH
47745: LD_INT 1
47747: PPUSH
47748: LD_VAR 0 14
47752: PPUSH
47753: CALL_OW 2
47757: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
47758: LD_VAR 0 14
47762: PPUSH
47763: LD_VAR 0 1
47767: PPUSH
47768: CALL_OW 250
47772: PPUSH
47773: LD_VAR 0 1
47777: PPUSH
47778: CALL_OW 251
47782: PPUSH
47783: LD_INT 10
47785: PPUSH
47786: LD_INT 0
47788: PPUSH
47789: CALL_OW 50
// continue ;
47793: GO 47694
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
47795: LD_VAR 0 12
47799: PUSH
47800: LD_INT 1
47802: ARRAY
47803: PPUSH
47804: CALL_OW 313
47808: PUSH
47809: LD_VAR 0 12
47813: PUSH
47814: LD_INT 1
47816: ARRAY
47817: PPUSH
47818: CALL_OW 266
47822: PUSH
47823: LD_INT 32
47825: PUSH
47826: LD_INT 31
47828: PUSH
47829: EMPTY
47830: LIST
47831: LIST
47832: IN
47833: AND
47834: PUSH
47835: LD_VAR 0 12
47839: PUSH
47840: LD_INT 1
47842: ARRAY
47843: PPUSH
47844: CALL_OW 313
47848: PUSH
47849: LD_INT 6
47851: EQUAL
47852: OR
47853: IFFALSE 47873
// f := Delete ( f , 1 ) ;
47855: LD_ADDR_VAR 0 12
47859: PUSH
47860: LD_VAR 0 12
47864: PPUSH
47865: LD_INT 1
47867: PPUSH
47868: CALL_OW 3
47872: ST_TO_ADDR
// if not f then
47873: LD_VAR 0 12
47877: NOT
47878: IFFALSE 47896
// begin x := x + 2 ;
47880: LD_ADDR_VAR 0 13
47884: PUSH
47885: LD_VAR 0 13
47889: PUSH
47890: LD_INT 2
47892: PLUS
47893: ST_TO_ADDR
// continue ;
47894: GO 47694
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
47896: LD_VAR 0 12
47900: PUSH
47901: LD_INT 1
47903: ARRAY
47904: PPUSH
47905: CALL_OW 266
47909: PUSH
47910: LD_INT 5
47912: EQUAL
47913: IFFALSE 47987
// begin if UnitsInside ( f [ 1 ] ) < 3 then
47915: LD_VAR 0 12
47919: PUSH
47920: LD_INT 1
47922: ARRAY
47923: PPUSH
47924: CALL_OW 313
47928: PUSH
47929: LD_INT 3
47931: LESS
47932: IFFALSE 47968
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
47934: LD_INT 0
47936: PPUSH
47937: LD_INT 5
47939: PUSH
47940: LD_INT 8
47942: PUSH
47943: LD_INT 9
47945: PUSH
47946: EMPTY
47947: LIST
47948: LIST
47949: LIST
47950: PUSH
47951: LD_VAR 0 17
47955: ARRAY
47956: PPUSH
47957: LD_VAR 0 4
47961: PPUSH
47962: CALL_OW 380
47966: GO 47985
// PrepareHuman ( false , i , skill ) ;
47968: LD_INT 0
47970: PPUSH
47971: LD_VAR 0 8
47975: PPUSH
47976: LD_VAR 0 4
47980: PPUSH
47981: CALL_OW 380
// end else
47985: GO 48004
// PrepareHuman ( false , i , skill ) ;
47987: LD_INT 0
47989: PPUSH
47990: LD_VAR 0 8
47994: PPUSH
47995: LD_VAR 0 4
47999: PPUSH
48000: CALL_OW 380
// un := CreateHuman ;
48004: LD_ADDR_VAR 0 14
48008: PUSH
48009: CALL_OW 44
48013: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48014: LD_ADDR_VAR 0 7
48018: PUSH
48019: LD_VAR 0 7
48023: PPUSH
48024: LD_INT 1
48026: PPUSH
48027: LD_VAR 0 14
48031: PPUSH
48032: CALL_OW 2
48036: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
48037: LD_VAR 0 14
48041: PPUSH
48042: LD_VAR 0 12
48046: PUSH
48047: LD_INT 1
48049: ARRAY
48050: PPUSH
48051: CALL_OW 52
// end ;
48055: GO 47694
48057: POP
48058: POP
// end ;
48059: GO 46996
48061: POP
48062: POP
// result := result ^ buildings ;
48063: LD_ADDR_VAR 0 7
48067: PUSH
48068: LD_VAR 0 7
48072: PUSH
48073: LD_VAR 0 18
48077: ADD
48078: ST_TO_ADDR
// end else
48079: GO 48222
// begin for i = 1 to personel do
48081: LD_ADDR_VAR 0 8
48085: PUSH
48086: DOUBLE
48087: LD_INT 1
48089: DEC
48090: ST_TO_ADDR
48091: LD_VAR 0 6
48095: PUSH
48096: FOR_TO
48097: IFFALSE 48220
// begin if i > 4 then
48099: LD_VAR 0 8
48103: PUSH
48104: LD_INT 4
48106: GREATER
48107: IFFALSE 48111
// break ;
48109: GO 48220
// x := personel [ i ] ;
48111: LD_ADDR_VAR 0 13
48115: PUSH
48116: LD_VAR 0 6
48120: PUSH
48121: LD_VAR 0 8
48125: ARRAY
48126: ST_TO_ADDR
// if x = - 1 then
48127: LD_VAR 0 13
48131: PUSH
48132: LD_INT 1
48134: NEG
48135: EQUAL
48136: IFFALSE 48140
// continue ;
48138: GO 48096
// PrepareHuman ( false , i , skill ) ;
48140: LD_INT 0
48142: PPUSH
48143: LD_VAR 0 8
48147: PPUSH
48148: LD_VAR 0 4
48152: PPUSH
48153: CALL_OW 380
// un := CreateHuman ;
48157: LD_ADDR_VAR 0 14
48161: PUSH
48162: CALL_OW 44
48166: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
48167: LD_VAR 0 14
48171: PPUSH
48172: LD_VAR 0 1
48176: PPUSH
48177: CALL_OW 250
48181: PPUSH
48182: LD_VAR 0 1
48186: PPUSH
48187: CALL_OW 251
48191: PPUSH
48192: LD_INT 10
48194: PPUSH
48195: LD_INT 0
48197: PPUSH
48198: CALL_OW 50
// result := result ^ un ;
48202: LD_ADDR_VAR 0 7
48206: PUSH
48207: LD_VAR 0 7
48211: PUSH
48212: LD_VAR 0 14
48216: ADD
48217: ST_TO_ADDR
// end ;
48218: GO 48096
48220: POP
48221: POP
// end ; end ;
48222: LD_VAR 0 7
48226: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
48227: LD_INT 0
48229: PPUSH
48230: PPUSH
48231: PPUSH
48232: PPUSH
48233: PPUSH
48234: PPUSH
48235: PPUSH
48236: PPUSH
48237: PPUSH
48238: PPUSH
48239: PPUSH
48240: PPUSH
48241: PPUSH
48242: PPUSH
48243: PPUSH
48244: PPUSH
// result := false ;
48245: LD_ADDR_VAR 0 3
48249: PUSH
48250: LD_INT 0
48252: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
48253: LD_VAR 0 1
48257: NOT
48258: PUSH
48259: LD_VAR 0 1
48263: PPUSH
48264: CALL_OW 266
48268: PUSH
48269: LD_INT 32
48271: PUSH
48272: LD_INT 33
48274: PUSH
48275: EMPTY
48276: LIST
48277: LIST
48278: IN
48279: NOT
48280: OR
48281: IFFALSE 48285
// exit ;
48283: GO 49394
// nat := GetNation ( tower ) ;
48285: LD_ADDR_VAR 0 12
48289: PUSH
48290: LD_VAR 0 1
48294: PPUSH
48295: CALL_OW 248
48299: ST_TO_ADDR
// side := GetSide ( tower ) ;
48300: LD_ADDR_VAR 0 16
48304: PUSH
48305: LD_VAR 0 1
48309: PPUSH
48310: CALL_OW 255
48314: ST_TO_ADDR
// x := GetX ( tower ) ;
48315: LD_ADDR_VAR 0 10
48319: PUSH
48320: LD_VAR 0 1
48324: PPUSH
48325: CALL_OW 250
48329: ST_TO_ADDR
// y := GetY ( tower ) ;
48330: LD_ADDR_VAR 0 11
48334: PUSH
48335: LD_VAR 0 1
48339: PPUSH
48340: CALL_OW 251
48344: ST_TO_ADDR
// if not x or not y then
48345: LD_VAR 0 10
48349: NOT
48350: PUSH
48351: LD_VAR 0 11
48355: NOT
48356: OR
48357: IFFALSE 48361
// exit ;
48359: GO 49394
// weapon := 0 ;
48361: LD_ADDR_VAR 0 18
48365: PUSH
48366: LD_INT 0
48368: ST_TO_ADDR
// fac_list := [ ] ;
48369: LD_ADDR_VAR 0 17
48373: PUSH
48374: EMPTY
48375: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
48376: LD_ADDR_VAR 0 6
48380: PUSH
48381: LD_VAR 0 1
48385: PPUSH
48386: CALL_OW 274
48390: PPUSH
48391: LD_VAR 0 2
48395: PPUSH
48396: LD_INT 0
48398: PPUSH
48399: CALL 45965 0 3
48403: PPUSH
48404: LD_INT 30
48406: PUSH
48407: LD_INT 3
48409: PUSH
48410: EMPTY
48411: LIST
48412: LIST
48413: PPUSH
48414: CALL_OW 72
48418: ST_TO_ADDR
// if not factories then
48419: LD_VAR 0 6
48423: NOT
48424: IFFALSE 48428
// exit ;
48426: GO 49394
// for i in factories do
48428: LD_ADDR_VAR 0 8
48432: PUSH
48433: LD_VAR 0 6
48437: PUSH
48438: FOR_IN
48439: IFFALSE 48464
// fac_list := fac_list union AvailableWeaponList ( i ) ;
48441: LD_ADDR_VAR 0 17
48445: PUSH
48446: LD_VAR 0 17
48450: PUSH
48451: LD_VAR 0 8
48455: PPUSH
48456: CALL_OW 478
48460: UNION
48461: ST_TO_ADDR
48462: GO 48438
48464: POP
48465: POP
// if not fac_list then
48466: LD_VAR 0 17
48470: NOT
48471: IFFALSE 48475
// exit ;
48473: GO 49394
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
48475: LD_ADDR_VAR 0 5
48479: PUSH
48480: LD_INT 4
48482: PUSH
48483: LD_INT 5
48485: PUSH
48486: LD_INT 9
48488: PUSH
48489: LD_INT 10
48491: PUSH
48492: LD_INT 6
48494: PUSH
48495: LD_INT 7
48497: PUSH
48498: LD_INT 11
48500: PUSH
48501: EMPTY
48502: LIST
48503: LIST
48504: LIST
48505: LIST
48506: LIST
48507: LIST
48508: LIST
48509: PUSH
48510: LD_INT 27
48512: PUSH
48513: LD_INT 28
48515: PUSH
48516: LD_INT 26
48518: PUSH
48519: LD_INT 30
48521: PUSH
48522: EMPTY
48523: LIST
48524: LIST
48525: LIST
48526: LIST
48527: PUSH
48528: LD_INT 43
48530: PUSH
48531: LD_INT 44
48533: PUSH
48534: LD_INT 46
48536: PUSH
48537: LD_INT 45
48539: PUSH
48540: LD_INT 47
48542: PUSH
48543: LD_INT 49
48545: PUSH
48546: EMPTY
48547: LIST
48548: LIST
48549: LIST
48550: LIST
48551: LIST
48552: LIST
48553: PUSH
48554: EMPTY
48555: LIST
48556: LIST
48557: LIST
48558: PUSH
48559: LD_VAR 0 12
48563: ARRAY
48564: ST_TO_ADDR
// list := list isect fac_list ;
48565: LD_ADDR_VAR 0 5
48569: PUSH
48570: LD_VAR 0 5
48574: PUSH
48575: LD_VAR 0 17
48579: ISECT
48580: ST_TO_ADDR
// if not list then
48581: LD_VAR 0 5
48585: NOT
48586: IFFALSE 48590
// exit ;
48588: GO 49394
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
48590: LD_VAR 0 12
48594: PUSH
48595: LD_INT 3
48597: EQUAL
48598: PUSH
48599: LD_INT 49
48601: PUSH
48602: LD_VAR 0 5
48606: IN
48607: AND
48608: PUSH
48609: LD_INT 31
48611: PPUSH
48612: LD_VAR 0 16
48616: PPUSH
48617: CALL_OW 321
48621: PUSH
48622: LD_INT 2
48624: EQUAL
48625: AND
48626: IFFALSE 48686
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
48628: LD_INT 22
48630: PUSH
48631: LD_VAR 0 16
48635: PUSH
48636: EMPTY
48637: LIST
48638: LIST
48639: PUSH
48640: LD_INT 35
48642: PUSH
48643: LD_INT 49
48645: PUSH
48646: EMPTY
48647: LIST
48648: LIST
48649: PUSH
48650: LD_INT 91
48652: PUSH
48653: LD_VAR 0 1
48657: PUSH
48658: LD_INT 10
48660: PUSH
48661: EMPTY
48662: LIST
48663: LIST
48664: LIST
48665: PUSH
48666: EMPTY
48667: LIST
48668: LIST
48669: LIST
48670: PPUSH
48671: CALL_OW 69
48675: NOT
48676: IFFALSE 48686
// weapon := ru_time_lapser ;
48678: LD_ADDR_VAR 0 18
48682: PUSH
48683: LD_INT 49
48685: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
48686: LD_VAR 0 12
48690: PUSH
48691: LD_INT 1
48693: PUSH
48694: LD_INT 2
48696: PUSH
48697: EMPTY
48698: LIST
48699: LIST
48700: IN
48701: PUSH
48702: LD_INT 11
48704: PUSH
48705: LD_VAR 0 5
48709: IN
48710: PUSH
48711: LD_INT 30
48713: PUSH
48714: LD_VAR 0 5
48718: IN
48719: OR
48720: AND
48721: PUSH
48722: LD_INT 6
48724: PPUSH
48725: LD_VAR 0 16
48729: PPUSH
48730: CALL_OW 321
48734: PUSH
48735: LD_INT 2
48737: EQUAL
48738: AND
48739: IFFALSE 48904
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
48741: LD_INT 22
48743: PUSH
48744: LD_VAR 0 16
48748: PUSH
48749: EMPTY
48750: LIST
48751: LIST
48752: PUSH
48753: LD_INT 2
48755: PUSH
48756: LD_INT 35
48758: PUSH
48759: LD_INT 11
48761: PUSH
48762: EMPTY
48763: LIST
48764: LIST
48765: PUSH
48766: LD_INT 35
48768: PUSH
48769: LD_INT 30
48771: PUSH
48772: EMPTY
48773: LIST
48774: LIST
48775: PUSH
48776: EMPTY
48777: LIST
48778: LIST
48779: LIST
48780: PUSH
48781: LD_INT 91
48783: PUSH
48784: LD_VAR 0 1
48788: PUSH
48789: LD_INT 18
48791: PUSH
48792: EMPTY
48793: LIST
48794: LIST
48795: LIST
48796: PUSH
48797: EMPTY
48798: LIST
48799: LIST
48800: LIST
48801: PPUSH
48802: CALL_OW 69
48806: NOT
48807: PUSH
48808: LD_INT 22
48810: PUSH
48811: LD_VAR 0 16
48815: PUSH
48816: EMPTY
48817: LIST
48818: LIST
48819: PUSH
48820: LD_INT 2
48822: PUSH
48823: LD_INT 30
48825: PUSH
48826: LD_INT 32
48828: PUSH
48829: EMPTY
48830: LIST
48831: LIST
48832: PUSH
48833: LD_INT 30
48835: PUSH
48836: LD_INT 33
48838: PUSH
48839: EMPTY
48840: LIST
48841: LIST
48842: PUSH
48843: EMPTY
48844: LIST
48845: LIST
48846: LIST
48847: PUSH
48848: LD_INT 91
48850: PUSH
48851: LD_VAR 0 1
48855: PUSH
48856: LD_INT 12
48858: PUSH
48859: EMPTY
48860: LIST
48861: LIST
48862: LIST
48863: PUSH
48864: EMPTY
48865: LIST
48866: LIST
48867: LIST
48868: PUSH
48869: EMPTY
48870: LIST
48871: PPUSH
48872: CALL_OW 69
48876: PUSH
48877: LD_INT 2
48879: GREATER
48880: AND
48881: IFFALSE 48904
// weapon := [ us_radar , ar_radar ] [ nat ] ;
48883: LD_ADDR_VAR 0 18
48887: PUSH
48888: LD_INT 11
48890: PUSH
48891: LD_INT 30
48893: PUSH
48894: EMPTY
48895: LIST
48896: LIST
48897: PUSH
48898: LD_VAR 0 12
48902: ARRAY
48903: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
48904: LD_VAR 0 18
48908: NOT
48909: PUSH
48910: LD_INT 40
48912: PPUSH
48913: LD_VAR 0 16
48917: PPUSH
48918: CALL_OW 321
48922: PUSH
48923: LD_INT 2
48925: EQUAL
48926: AND
48927: PUSH
48928: LD_INT 7
48930: PUSH
48931: LD_VAR 0 5
48935: IN
48936: PUSH
48937: LD_INT 28
48939: PUSH
48940: LD_VAR 0 5
48944: IN
48945: OR
48946: PUSH
48947: LD_INT 45
48949: PUSH
48950: LD_VAR 0 5
48954: IN
48955: OR
48956: AND
48957: IFFALSE 49211
// begin hex := GetHexInfo ( x , y ) ;
48959: LD_ADDR_VAR 0 4
48963: PUSH
48964: LD_VAR 0 10
48968: PPUSH
48969: LD_VAR 0 11
48973: PPUSH
48974: CALL_OW 546
48978: ST_TO_ADDR
// if hex [ 1 ] then
48979: LD_VAR 0 4
48983: PUSH
48984: LD_INT 1
48986: ARRAY
48987: IFFALSE 48991
// exit ;
48989: GO 49394
// height := hex [ 2 ] ;
48991: LD_ADDR_VAR 0 15
48995: PUSH
48996: LD_VAR 0 4
49000: PUSH
49001: LD_INT 2
49003: ARRAY
49004: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
49005: LD_ADDR_VAR 0 14
49009: PUSH
49010: LD_INT 0
49012: PUSH
49013: LD_INT 2
49015: PUSH
49016: LD_INT 3
49018: PUSH
49019: LD_INT 5
49021: PUSH
49022: EMPTY
49023: LIST
49024: LIST
49025: LIST
49026: LIST
49027: ST_TO_ADDR
// for i in tmp do
49028: LD_ADDR_VAR 0 8
49032: PUSH
49033: LD_VAR 0 14
49037: PUSH
49038: FOR_IN
49039: IFFALSE 49209
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
49041: LD_ADDR_VAR 0 9
49045: PUSH
49046: LD_VAR 0 10
49050: PPUSH
49051: LD_VAR 0 8
49055: PPUSH
49056: LD_INT 5
49058: PPUSH
49059: CALL_OW 272
49063: PUSH
49064: LD_VAR 0 11
49068: PPUSH
49069: LD_VAR 0 8
49073: PPUSH
49074: LD_INT 5
49076: PPUSH
49077: CALL_OW 273
49081: PUSH
49082: EMPTY
49083: LIST
49084: LIST
49085: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
49086: LD_VAR 0 9
49090: PUSH
49091: LD_INT 1
49093: ARRAY
49094: PPUSH
49095: LD_VAR 0 9
49099: PUSH
49100: LD_INT 2
49102: ARRAY
49103: PPUSH
49104: CALL_OW 488
49108: IFFALSE 49207
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
49110: LD_ADDR_VAR 0 4
49114: PUSH
49115: LD_VAR 0 9
49119: PUSH
49120: LD_INT 1
49122: ARRAY
49123: PPUSH
49124: LD_VAR 0 9
49128: PUSH
49129: LD_INT 2
49131: ARRAY
49132: PPUSH
49133: CALL_OW 546
49137: ST_TO_ADDR
// if hex [ 1 ] then
49138: LD_VAR 0 4
49142: PUSH
49143: LD_INT 1
49145: ARRAY
49146: IFFALSE 49150
// continue ;
49148: GO 49038
// h := hex [ 2 ] ;
49150: LD_ADDR_VAR 0 13
49154: PUSH
49155: LD_VAR 0 4
49159: PUSH
49160: LD_INT 2
49162: ARRAY
49163: ST_TO_ADDR
// if h + 7 < height then
49164: LD_VAR 0 13
49168: PUSH
49169: LD_INT 7
49171: PLUS
49172: PUSH
49173: LD_VAR 0 15
49177: LESS
49178: IFFALSE 49207
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
49180: LD_ADDR_VAR 0 18
49184: PUSH
49185: LD_INT 7
49187: PUSH
49188: LD_INT 28
49190: PUSH
49191: LD_INT 45
49193: PUSH
49194: EMPTY
49195: LIST
49196: LIST
49197: LIST
49198: PUSH
49199: LD_VAR 0 12
49203: ARRAY
49204: ST_TO_ADDR
// break ;
49205: GO 49209
// end ; end ; end ;
49207: GO 49038
49209: POP
49210: POP
// end ; if not weapon then
49211: LD_VAR 0 18
49215: NOT
49216: IFFALSE 49276
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
49218: LD_ADDR_VAR 0 5
49222: PUSH
49223: LD_VAR 0 5
49227: PUSH
49228: LD_INT 11
49230: PUSH
49231: LD_INT 30
49233: PUSH
49234: LD_INT 49
49236: PUSH
49237: EMPTY
49238: LIST
49239: LIST
49240: LIST
49241: DIFF
49242: ST_TO_ADDR
// if not list then
49243: LD_VAR 0 5
49247: NOT
49248: IFFALSE 49252
// exit ;
49250: GO 49394
// weapon := list [ rand ( 1 , list ) ] ;
49252: LD_ADDR_VAR 0 18
49256: PUSH
49257: LD_VAR 0 5
49261: PUSH
49262: LD_INT 1
49264: PPUSH
49265: LD_VAR 0 5
49269: PPUSH
49270: CALL_OW 12
49274: ARRAY
49275: ST_TO_ADDR
// end ; if weapon then
49276: LD_VAR 0 18
49280: IFFALSE 49394
// begin tmp := CostOfWeapon ( weapon ) ;
49282: LD_ADDR_VAR 0 14
49286: PUSH
49287: LD_VAR 0 18
49291: PPUSH
49292: CALL_OW 451
49296: ST_TO_ADDR
// j := GetBase ( tower ) ;
49297: LD_ADDR_VAR 0 9
49301: PUSH
49302: LD_VAR 0 1
49306: PPUSH
49307: CALL_OW 274
49311: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
49312: LD_VAR 0 9
49316: PPUSH
49317: LD_INT 1
49319: PPUSH
49320: CALL_OW 275
49324: PUSH
49325: LD_VAR 0 14
49329: PUSH
49330: LD_INT 1
49332: ARRAY
49333: GREATEREQUAL
49334: PUSH
49335: LD_VAR 0 9
49339: PPUSH
49340: LD_INT 2
49342: PPUSH
49343: CALL_OW 275
49347: PUSH
49348: LD_VAR 0 14
49352: PUSH
49353: LD_INT 2
49355: ARRAY
49356: GREATEREQUAL
49357: AND
49358: PUSH
49359: LD_VAR 0 9
49363: PPUSH
49364: LD_INT 3
49366: PPUSH
49367: CALL_OW 275
49371: PUSH
49372: LD_VAR 0 14
49376: PUSH
49377: LD_INT 3
49379: ARRAY
49380: GREATEREQUAL
49381: AND
49382: IFFALSE 49394
// result := weapon ;
49384: LD_ADDR_VAR 0 3
49388: PUSH
49389: LD_VAR 0 18
49393: ST_TO_ADDR
// end ; end ;
49394: LD_VAR 0 3
49398: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
49399: LD_INT 0
49401: PPUSH
49402: PPUSH
// result := true ;
49403: LD_ADDR_VAR 0 3
49407: PUSH
49408: LD_INT 1
49410: ST_TO_ADDR
// if array1 = array2 then
49411: LD_VAR 0 1
49415: PUSH
49416: LD_VAR 0 2
49420: EQUAL
49421: IFFALSE 49481
// begin for i = 1 to array1 do
49423: LD_ADDR_VAR 0 4
49427: PUSH
49428: DOUBLE
49429: LD_INT 1
49431: DEC
49432: ST_TO_ADDR
49433: LD_VAR 0 1
49437: PUSH
49438: FOR_TO
49439: IFFALSE 49477
// if array1 [ i ] <> array2 [ i ] then
49441: LD_VAR 0 1
49445: PUSH
49446: LD_VAR 0 4
49450: ARRAY
49451: PUSH
49452: LD_VAR 0 2
49456: PUSH
49457: LD_VAR 0 4
49461: ARRAY
49462: NONEQUAL
49463: IFFALSE 49475
// begin result := false ;
49465: LD_ADDR_VAR 0 3
49469: PUSH
49470: LD_INT 0
49472: ST_TO_ADDR
// break ;
49473: GO 49477
// end ;
49475: GO 49438
49477: POP
49478: POP
// end else
49479: GO 49489
// result := false ;
49481: LD_ADDR_VAR 0 3
49485: PUSH
49486: LD_INT 0
49488: ST_TO_ADDR
// end ;
49489: LD_VAR 0 3
49493: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
49494: LD_INT 0
49496: PPUSH
49497: PPUSH
// if not array1 or not array2 then
49498: LD_VAR 0 1
49502: NOT
49503: PUSH
49504: LD_VAR 0 2
49508: NOT
49509: OR
49510: IFFALSE 49514
// exit ;
49512: GO 49578
// result := true ;
49514: LD_ADDR_VAR 0 3
49518: PUSH
49519: LD_INT 1
49521: ST_TO_ADDR
// for i = 1 to array1 do
49522: LD_ADDR_VAR 0 4
49526: PUSH
49527: DOUBLE
49528: LD_INT 1
49530: DEC
49531: ST_TO_ADDR
49532: LD_VAR 0 1
49536: PUSH
49537: FOR_TO
49538: IFFALSE 49576
// if array1 [ i ] <> array2 [ i ] then
49540: LD_VAR 0 1
49544: PUSH
49545: LD_VAR 0 4
49549: ARRAY
49550: PUSH
49551: LD_VAR 0 2
49555: PUSH
49556: LD_VAR 0 4
49560: ARRAY
49561: NONEQUAL
49562: IFFALSE 49574
// begin result := false ;
49564: LD_ADDR_VAR 0 3
49568: PUSH
49569: LD_INT 0
49571: ST_TO_ADDR
// break ;
49572: GO 49576
// end ;
49574: GO 49537
49576: POP
49577: POP
// end ;
49578: LD_VAR 0 3
49582: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
49583: LD_INT 0
49585: PPUSH
49586: PPUSH
49587: PPUSH
// pom := GetBase ( fac ) ;
49588: LD_ADDR_VAR 0 5
49592: PUSH
49593: LD_VAR 0 1
49597: PPUSH
49598: CALL_OW 274
49602: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
49603: LD_ADDR_VAR 0 4
49607: PUSH
49608: LD_VAR 0 2
49612: PUSH
49613: LD_INT 1
49615: ARRAY
49616: PPUSH
49617: LD_VAR 0 2
49621: PUSH
49622: LD_INT 2
49624: ARRAY
49625: PPUSH
49626: LD_VAR 0 2
49630: PUSH
49631: LD_INT 3
49633: ARRAY
49634: PPUSH
49635: LD_VAR 0 2
49639: PUSH
49640: LD_INT 4
49642: ARRAY
49643: PPUSH
49644: CALL_OW 449
49648: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
49649: LD_ADDR_VAR 0 3
49653: PUSH
49654: LD_VAR 0 5
49658: PPUSH
49659: LD_INT 1
49661: PPUSH
49662: CALL_OW 275
49666: PUSH
49667: LD_VAR 0 4
49671: PUSH
49672: LD_INT 1
49674: ARRAY
49675: GREATEREQUAL
49676: PUSH
49677: LD_VAR 0 5
49681: PPUSH
49682: LD_INT 2
49684: PPUSH
49685: CALL_OW 275
49689: PUSH
49690: LD_VAR 0 4
49694: PUSH
49695: LD_INT 2
49697: ARRAY
49698: GREATEREQUAL
49699: AND
49700: PUSH
49701: LD_VAR 0 5
49705: PPUSH
49706: LD_INT 3
49708: PPUSH
49709: CALL_OW 275
49713: PUSH
49714: LD_VAR 0 4
49718: PUSH
49719: LD_INT 3
49721: ARRAY
49722: GREATEREQUAL
49723: AND
49724: ST_TO_ADDR
// end ;
49725: LD_VAR 0 3
49729: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
49730: LD_INT 0
49732: PPUSH
49733: PPUSH
49734: PPUSH
49735: PPUSH
// pom := GetBase ( building ) ;
49736: LD_ADDR_VAR 0 3
49740: PUSH
49741: LD_VAR 0 1
49745: PPUSH
49746: CALL_OW 274
49750: ST_TO_ADDR
// if not pom then
49751: LD_VAR 0 3
49755: NOT
49756: IFFALSE 49760
// exit ;
49758: GO 49930
// btype := GetBType ( building ) ;
49760: LD_ADDR_VAR 0 5
49764: PUSH
49765: LD_VAR 0 1
49769: PPUSH
49770: CALL_OW 266
49774: ST_TO_ADDR
// if btype = b_armoury then
49775: LD_VAR 0 5
49779: PUSH
49780: LD_INT 4
49782: EQUAL
49783: IFFALSE 49793
// btype := b_barracks ;
49785: LD_ADDR_VAR 0 5
49789: PUSH
49790: LD_INT 5
49792: ST_TO_ADDR
// if btype = b_depot then
49793: LD_VAR 0 5
49797: PUSH
49798: LD_INT 0
49800: EQUAL
49801: IFFALSE 49811
// btype := b_warehouse ;
49803: LD_ADDR_VAR 0 5
49807: PUSH
49808: LD_INT 1
49810: ST_TO_ADDR
// if btype = b_workshop then
49811: LD_VAR 0 5
49815: PUSH
49816: LD_INT 2
49818: EQUAL
49819: IFFALSE 49829
// btype := b_factory ;
49821: LD_ADDR_VAR 0 5
49825: PUSH
49826: LD_INT 3
49828: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
49829: LD_ADDR_VAR 0 4
49833: PUSH
49834: LD_VAR 0 5
49838: PPUSH
49839: LD_VAR 0 1
49843: PPUSH
49844: CALL_OW 248
49848: PPUSH
49849: CALL_OW 450
49853: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
49854: LD_ADDR_VAR 0 2
49858: PUSH
49859: LD_VAR 0 3
49863: PPUSH
49864: LD_INT 1
49866: PPUSH
49867: CALL_OW 275
49871: PUSH
49872: LD_VAR 0 4
49876: PUSH
49877: LD_INT 1
49879: ARRAY
49880: GREATEREQUAL
49881: PUSH
49882: LD_VAR 0 3
49886: PPUSH
49887: LD_INT 2
49889: PPUSH
49890: CALL_OW 275
49894: PUSH
49895: LD_VAR 0 4
49899: PUSH
49900: LD_INT 2
49902: ARRAY
49903: GREATEREQUAL
49904: AND
49905: PUSH
49906: LD_VAR 0 3
49910: PPUSH
49911: LD_INT 3
49913: PPUSH
49914: CALL_OW 275
49918: PUSH
49919: LD_VAR 0 4
49923: PUSH
49924: LD_INT 3
49926: ARRAY
49927: GREATEREQUAL
49928: AND
49929: ST_TO_ADDR
// end ;
49930: LD_VAR 0 2
49934: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
49935: LD_INT 0
49937: PPUSH
49938: PPUSH
49939: PPUSH
// pom := GetBase ( building ) ;
49940: LD_ADDR_VAR 0 4
49944: PUSH
49945: LD_VAR 0 1
49949: PPUSH
49950: CALL_OW 274
49954: ST_TO_ADDR
// if not pom then
49955: LD_VAR 0 4
49959: NOT
49960: IFFALSE 49964
// exit ;
49962: GO 50065
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
49964: LD_ADDR_VAR 0 5
49968: PUSH
49969: LD_VAR 0 2
49973: PPUSH
49974: LD_VAR 0 1
49978: PPUSH
49979: CALL_OW 248
49983: PPUSH
49984: CALL_OW 450
49988: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
49989: LD_ADDR_VAR 0 3
49993: PUSH
49994: LD_VAR 0 4
49998: PPUSH
49999: LD_INT 1
50001: PPUSH
50002: CALL_OW 275
50006: PUSH
50007: LD_VAR 0 5
50011: PUSH
50012: LD_INT 1
50014: ARRAY
50015: GREATEREQUAL
50016: PUSH
50017: LD_VAR 0 4
50021: PPUSH
50022: LD_INT 2
50024: PPUSH
50025: CALL_OW 275
50029: PUSH
50030: LD_VAR 0 5
50034: PUSH
50035: LD_INT 2
50037: ARRAY
50038: GREATEREQUAL
50039: AND
50040: PUSH
50041: LD_VAR 0 4
50045: PPUSH
50046: LD_INT 3
50048: PPUSH
50049: CALL_OW 275
50053: PUSH
50054: LD_VAR 0 5
50058: PUSH
50059: LD_INT 3
50061: ARRAY
50062: GREATEREQUAL
50063: AND
50064: ST_TO_ADDR
// end ;
50065: LD_VAR 0 3
50069: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
50070: LD_INT 0
50072: PPUSH
50073: PPUSH
50074: PPUSH
50075: PPUSH
50076: PPUSH
50077: PPUSH
50078: PPUSH
50079: PPUSH
50080: PPUSH
50081: PPUSH
50082: PPUSH
// result := false ;
50083: LD_ADDR_VAR 0 8
50087: PUSH
50088: LD_INT 0
50090: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
50091: LD_VAR 0 5
50095: NOT
50096: PUSH
50097: LD_VAR 0 1
50101: NOT
50102: OR
50103: PUSH
50104: LD_VAR 0 2
50108: NOT
50109: OR
50110: PUSH
50111: LD_VAR 0 3
50115: NOT
50116: OR
50117: IFFALSE 50121
// exit ;
50119: GO 50935
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
50121: LD_ADDR_VAR 0 14
50125: PUSH
50126: LD_VAR 0 1
50130: PPUSH
50131: LD_VAR 0 2
50135: PPUSH
50136: LD_VAR 0 3
50140: PPUSH
50141: LD_VAR 0 4
50145: PPUSH
50146: LD_VAR 0 5
50150: PUSH
50151: LD_INT 1
50153: ARRAY
50154: PPUSH
50155: CALL_OW 248
50159: PPUSH
50160: LD_INT 0
50162: PPUSH
50163: CALL 52172 0 6
50167: ST_TO_ADDR
// if not hexes then
50168: LD_VAR 0 14
50172: NOT
50173: IFFALSE 50177
// exit ;
50175: GO 50935
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
50177: LD_ADDR_VAR 0 17
50181: PUSH
50182: LD_VAR 0 5
50186: PPUSH
50187: LD_INT 22
50189: PUSH
50190: LD_VAR 0 13
50194: PPUSH
50195: CALL_OW 255
50199: PUSH
50200: EMPTY
50201: LIST
50202: LIST
50203: PUSH
50204: LD_INT 2
50206: PUSH
50207: LD_INT 30
50209: PUSH
50210: LD_INT 0
50212: PUSH
50213: EMPTY
50214: LIST
50215: LIST
50216: PUSH
50217: LD_INT 30
50219: PUSH
50220: LD_INT 1
50222: PUSH
50223: EMPTY
50224: LIST
50225: LIST
50226: PUSH
50227: EMPTY
50228: LIST
50229: LIST
50230: LIST
50231: PUSH
50232: EMPTY
50233: LIST
50234: LIST
50235: PPUSH
50236: CALL_OW 72
50240: ST_TO_ADDR
// for i = 1 to hexes do
50241: LD_ADDR_VAR 0 9
50245: PUSH
50246: DOUBLE
50247: LD_INT 1
50249: DEC
50250: ST_TO_ADDR
50251: LD_VAR 0 14
50255: PUSH
50256: FOR_TO
50257: IFFALSE 50933
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
50259: LD_ADDR_VAR 0 13
50263: PUSH
50264: LD_VAR 0 14
50268: PUSH
50269: LD_VAR 0 9
50273: ARRAY
50274: PUSH
50275: LD_INT 1
50277: ARRAY
50278: PPUSH
50279: LD_VAR 0 14
50283: PUSH
50284: LD_VAR 0 9
50288: ARRAY
50289: PUSH
50290: LD_INT 2
50292: ARRAY
50293: PPUSH
50294: CALL_OW 428
50298: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
50299: LD_VAR 0 14
50303: PUSH
50304: LD_VAR 0 9
50308: ARRAY
50309: PUSH
50310: LD_INT 1
50312: ARRAY
50313: PPUSH
50314: LD_VAR 0 14
50318: PUSH
50319: LD_VAR 0 9
50323: ARRAY
50324: PUSH
50325: LD_INT 2
50327: ARRAY
50328: PPUSH
50329: CALL_OW 351
50333: PUSH
50334: LD_VAR 0 14
50338: PUSH
50339: LD_VAR 0 9
50343: ARRAY
50344: PUSH
50345: LD_INT 1
50347: ARRAY
50348: PPUSH
50349: LD_VAR 0 14
50353: PUSH
50354: LD_VAR 0 9
50358: ARRAY
50359: PUSH
50360: LD_INT 2
50362: ARRAY
50363: PPUSH
50364: CALL_OW 488
50368: NOT
50369: OR
50370: PUSH
50371: LD_VAR 0 13
50375: PPUSH
50376: CALL_OW 247
50380: PUSH
50381: LD_INT 3
50383: EQUAL
50384: OR
50385: IFFALSE 50391
// exit ;
50387: POP
50388: POP
50389: GO 50935
// if not tmp then
50391: LD_VAR 0 13
50395: NOT
50396: IFFALSE 50400
// continue ;
50398: GO 50256
// result := true ;
50400: LD_ADDR_VAR 0 8
50404: PUSH
50405: LD_INT 1
50407: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
50408: LD_VAR 0 6
50412: PUSH
50413: LD_VAR 0 13
50417: PPUSH
50418: CALL_OW 247
50422: PUSH
50423: LD_INT 2
50425: EQUAL
50426: AND
50427: PUSH
50428: LD_VAR 0 13
50432: PPUSH
50433: CALL_OW 263
50437: PUSH
50438: LD_INT 1
50440: EQUAL
50441: AND
50442: IFFALSE 50606
// begin if IsDrivenBy ( tmp ) then
50444: LD_VAR 0 13
50448: PPUSH
50449: CALL_OW 311
50453: IFFALSE 50457
// continue ;
50455: GO 50256
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
50457: LD_VAR 0 6
50461: PPUSH
50462: LD_INT 3
50464: PUSH
50465: LD_INT 60
50467: PUSH
50468: EMPTY
50469: LIST
50470: PUSH
50471: EMPTY
50472: LIST
50473: LIST
50474: PUSH
50475: LD_INT 3
50477: PUSH
50478: LD_INT 55
50480: PUSH
50481: EMPTY
50482: LIST
50483: PUSH
50484: EMPTY
50485: LIST
50486: LIST
50487: PUSH
50488: EMPTY
50489: LIST
50490: LIST
50491: PPUSH
50492: CALL_OW 72
50496: IFFALSE 50604
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
50498: LD_ADDR_VAR 0 18
50502: PUSH
50503: LD_VAR 0 6
50507: PPUSH
50508: LD_INT 3
50510: PUSH
50511: LD_INT 60
50513: PUSH
50514: EMPTY
50515: LIST
50516: PUSH
50517: EMPTY
50518: LIST
50519: LIST
50520: PUSH
50521: LD_INT 3
50523: PUSH
50524: LD_INT 55
50526: PUSH
50527: EMPTY
50528: LIST
50529: PUSH
50530: EMPTY
50531: LIST
50532: LIST
50533: PUSH
50534: EMPTY
50535: LIST
50536: LIST
50537: PPUSH
50538: CALL_OW 72
50542: PUSH
50543: LD_INT 1
50545: ARRAY
50546: ST_TO_ADDR
// if IsInUnit ( driver ) then
50547: LD_VAR 0 18
50551: PPUSH
50552: CALL_OW 310
50556: IFFALSE 50567
// ComExit ( driver ) ;
50558: LD_VAR 0 18
50562: PPUSH
50563: CALL 75300 0 1
// AddComEnterUnit ( driver , tmp ) ;
50567: LD_VAR 0 18
50571: PPUSH
50572: LD_VAR 0 13
50576: PPUSH
50577: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
50581: LD_VAR 0 18
50585: PPUSH
50586: LD_VAR 0 7
50590: PPUSH
50591: CALL_OW 173
// AddComExitVehicle ( driver ) ;
50595: LD_VAR 0 18
50599: PPUSH
50600: CALL_OW 181
// end ; continue ;
50604: GO 50256
// end ; if not cleaners or not tmp in cleaners then
50606: LD_VAR 0 6
50610: NOT
50611: PUSH
50612: LD_VAR 0 13
50616: PUSH
50617: LD_VAR 0 6
50621: IN
50622: NOT
50623: OR
50624: IFFALSE 50931
// begin if dep then
50626: LD_VAR 0 17
50630: IFFALSE 50766
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
50632: LD_ADDR_VAR 0 16
50636: PUSH
50637: LD_VAR 0 17
50641: PUSH
50642: LD_INT 1
50644: ARRAY
50645: PPUSH
50646: CALL_OW 250
50650: PPUSH
50651: LD_VAR 0 17
50655: PUSH
50656: LD_INT 1
50658: ARRAY
50659: PPUSH
50660: CALL_OW 254
50664: PPUSH
50665: LD_INT 5
50667: PPUSH
50668: CALL_OW 272
50672: PUSH
50673: LD_VAR 0 17
50677: PUSH
50678: LD_INT 1
50680: ARRAY
50681: PPUSH
50682: CALL_OW 251
50686: PPUSH
50687: LD_VAR 0 17
50691: PUSH
50692: LD_INT 1
50694: ARRAY
50695: PPUSH
50696: CALL_OW 254
50700: PPUSH
50701: LD_INT 5
50703: PPUSH
50704: CALL_OW 273
50708: PUSH
50709: EMPTY
50710: LIST
50711: LIST
50712: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
50713: LD_VAR 0 16
50717: PUSH
50718: LD_INT 1
50720: ARRAY
50721: PPUSH
50722: LD_VAR 0 16
50726: PUSH
50727: LD_INT 2
50729: ARRAY
50730: PPUSH
50731: CALL_OW 488
50735: IFFALSE 50766
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
50737: LD_VAR 0 13
50741: PPUSH
50742: LD_VAR 0 16
50746: PUSH
50747: LD_INT 1
50749: ARRAY
50750: PPUSH
50751: LD_VAR 0 16
50755: PUSH
50756: LD_INT 2
50758: ARRAY
50759: PPUSH
50760: CALL_OW 111
// continue ;
50764: GO 50256
// end ; end ; r := GetDir ( tmp ) ;
50766: LD_ADDR_VAR 0 15
50770: PUSH
50771: LD_VAR 0 13
50775: PPUSH
50776: CALL_OW 254
50780: ST_TO_ADDR
// if r = 5 then
50781: LD_VAR 0 15
50785: PUSH
50786: LD_INT 5
50788: EQUAL
50789: IFFALSE 50799
// r := 0 ;
50791: LD_ADDR_VAR 0 15
50795: PUSH
50796: LD_INT 0
50798: ST_TO_ADDR
// for j = r to 5 do
50799: LD_ADDR_VAR 0 10
50803: PUSH
50804: DOUBLE
50805: LD_VAR 0 15
50809: DEC
50810: ST_TO_ADDR
50811: LD_INT 5
50813: PUSH
50814: FOR_TO
50815: IFFALSE 50929
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
50817: LD_ADDR_VAR 0 11
50821: PUSH
50822: LD_VAR 0 13
50826: PPUSH
50827: CALL_OW 250
50831: PPUSH
50832: LD_VAR 0 10
50836: PPUSH
50837: LD_INT 2
50839: PPUSH
50840: CALL_OW 272
50844: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
50845: LD_ADDR_VAR 0 12
50849: PUSH
50850: LD_VAR 0 13
50854: PPUSH
50855: CALL_OW 251
50859: PPUSH
50860: LD_VAR 0 10
50864: PPUSH
50865: LD_INT 2
50867: PPUSH
50868: CALL_OW 273
50872: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
50873: LD_VAR 0 11
50877: PPUSH
50878: LD_VAR 0 12
50882: PPUSH
50883: CALL_OW 488
50887: PUSH
50888: LD_VAR 0 11
50892: PPUSH
50893: LD_VAR 0 12
50897: PPUSH
50898: CALL_OW 428
50902: NOT
50903: AND
50904: IFFALSE 50927
// begin ComMoveXY ( tmp , _x , _y ) ;
50906: LD_VAR 0 13
50910: PPUSH
50911: LD_VAR 0 11
50915: PPUSH
50916: LD_VAR 0 12
50920: PPUSH
50921: CALL_OW 111
// break ;
50925: GO 50929
// end ; end ;
50927: GO 50814
50929: POP
50930: POP
// end ; end ;
50931: GO 50256
50933: POP
50934: POP
// end ;
50935: LD_VAR 0 8
50939: RET
// export function BuildingTechInvented ( side , btype ) ; begin
50940: LD_INT 0
50942: PPUSH
// result := true ;
50943: LD_ADDR_VAR 0 3
50947: PUSH
50948: LD_INT 1
50950: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
50951: LD_VAR 0 2
50955: PUSH
50956: LD_INT 24
50958: DOUBLE
50959: EQUAL
50960: IFTRUE 50970
50962: LD_INT 33
50964: DOUBLE
50965: EQUAL
50966: IFTRUE 50970
50968: GO 50995
50970: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
50971: LD_ADDR_VAR 0 3
50975: PUSH
50976: LD_INT 32
50978: PPUSH
50979: LD_VAR 0 1
50983: PPUSH
50984: CALL_OW 321
50988: PUSH
50989: LD_INT 2
50991: EQUAL
50992: ST_TO_ADDR
50993: GO 51315
50995: LD_INT 20
50997: DOUBLE
50998: EQUAL
50999: IFTRUE 51003
51001: GO 51028
51003: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
51004: LD_ADDR_VAR 0 3
51008: PUSH
51009: LD_INT 6
51011: PPUSH
51012: LD_VAR 0 1
51016: PPUSH
51017: CALL_OW 321
51021: PUSH
51022: LD_INT 2
51024: EQUAL
51025: ST_TO_ADDR
51026: GO 51315
51028: LD_INT 22
51030: DOUBLE
51031: EQUAL
51032: IFTRUE 51042
51034: LD_INT 36
51036: DOUBLE
51037: EQUAL
51038: IFTRUE 51042
51040: GO 51067
51042: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
51043: LD_ADDR_VAR 0 3
51047: PUSH
51048: LD_INT 15
51050: PPUSH
51051: LD_VAR 0 1
51055: PPUSH
51056: CALL_OW 321
51060: PUSH
51061: LD_INT 2
51063: EQUAL
51064: ST_TO_ADDR
51065: GO 51315
51067: LD_INT 30
51069: DOUBLE
51070: EQUAL
51071: IFTRUE 51075
51073: GO 51100
51075: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
51076: LD_ADDR_VAR 0 3
51080: PUSH
51081: LD_INT 20
51083: PPUSH
51084: LD_VAR 0 1
51088: PPUSH
51089: CALL_OW 321
51093: PUSH
51094: LD_INT 2
51096: EQUAL
51097: ST_TO_ADDR
51098: GO 51315
51100: LD_INT 28
51102: DOUBLE
51103: EQUAL
51104: IFTRUE 51114
51106: LD_INT 21
51108: DOUBLE
51109: EQUAL
51110: IFTRUE 51114
51112: GO 51139
51114: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
51115: LD_ADDR_VAR 0 3
51119: PUSH
51120: LD_INT 21
51122: PPUSH
51123: LD_VAR 0 1
51127: PPUSH
51128: CALL_OW 321
51132: PUSH
51133: LD_INT 2
51135: EQUAL
51136: ST_TO_ADDR
51137: GO 51315
51139: LD_INT 16
51141: DOUBLE
51142: EQUAL
51143: IFTRUE 51147
51145: GO 51174
51147: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
51148: LD_ADDR_VAR 0 3
51152: PUSH
51153: LD_EXP 58
51157: PPUSH
51158: LD_VAR 0 1
51162: PPUSH
51163: CALL_OW 321
51167: PUSH
51168: LD_INT 2
51170: EQUAL
51171: ST_TO_ADDR
51172: GO 51315
51174: LD_INT 19
51176: DOUBLE
51177: EQUAL
51178: IFTRUE 51188
51180: LD_INT 23
51182: DOUBLE
51183: EQUAL
51184: IFTRUE 51188
51186: GO 51215
51188: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
51189: LD_ADDR_VAR 0 3
51193: PUSH
51194: LD_EXP 57
51198: PPUSH
51199: LD_VAR 0 1
51203: PPUSH
51204: CALL_OW 321
51208: PUSH
51209: LD_INT 2
51211: EQUAL
51212: ST_TO_ADDR
51213: GO 51315
51215: LD_INT 17
51217: DOUBLE
51218: EQUAL
51219: IFTRUE 51223
51221: GO 51248
51223: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
51224: LD_ADDR_VAR 0 3
51228: PUSH
51229: LD_INT 39
51231: PPUSH
51232: LD_VAR 0 1
51236: PPUSH
51237: CALL_OW 321
51241: PUSH
51242: LD_INT 2
51244: EQUAL
51245: ST_TO_ADDR
51246: GO 51315
51248: LD_INT 18
51250: DOUBLE
51251: EQUAL
51252: IFTRUE 51256
51254: GO 51281
51256: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
51257: LD_ADDR_VAR 0 3
51261: PUSH
51262: LD_INT 40
51264: PPUSH
51265: LD_VAR 0 1
51269: PPUSH
51270: CALL_OW 321
51274: PUSH
51275: LD_INT 2
51277: EQUAL
51278: ST_TO_ADDR
51279: GO 51315
51281: LD_INT 27
51283: DOUBLE
51284: EQUAL
51285: IFTRUE 51289
51287: GO 51314
51289: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
51290: LD_ADDR_VAR 0 3
51294: PUSH
51295: LD_INT 35
51297: PPUSH
51298: LD_VAR 0 1
51302: PPUSH
51303: CALL_OW 321
51307: PUSH
51308: LD_INT 2
51310: EQUAL
51311: ST_TO_ADDR
51312: GO 51315
51314: POP
// end ;
51315: LD_VAR 0 3
51319: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
51320: LD_INT 0
51322: PPUSH
51323: PPUSH
51324: PPUSH
51325: PPUSH
51326: PPUSH
51327: PPUSH
51328: PPUSH
51329: PPUSH
51330: PPUSH
51331: PPUSH
51332: PPUSH
// result := false ;
51333: LD_ADDR_VAR 0 6
51337: PUSH
51338: LD_INT 0
51340: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
51341: LD_VAR 0 1
51345: NOT
51346: PUSH
51347: LD_VAR 0 1
51351: PPUSH
51352: CALL_OW 266
51356: PUSH
51357: LD_INT 0
51359: PUSH
51360: LD_INT 1
51362: PUSH
51363: EMPTY
51364: LIST
51365: LIST
51366: IN
51367: NOT
51368: OR
51369: PUSH
51370: LD_VAR 0 2
51374: NOT
51375: OR
51376: PUSH
51377: LD_VAR 0 5
51381: PUSH
51382: LD_INT 0
51384: PUSH
51385: LD_INT 1
51387: PUSH
51388: LD_INT 2
51390: PUSH
51391: LD_INT 3
51393: PUSH
51394: LD_INT 4
51396: PUSH
51397: LD_INT 5
51399: PUSH
51400: EMPTY
51401: LIST
51402: LIST
51403: LIST
51404: LIST
51405: LIST
51406: LIST
51407: IN
51408: NOT
51409: OR
51410: PUSH
51411: LD_VAR 0 3
51415: PPUSH
51416: LD_VAR 0 4
51420: PPUSH
51421: CALL_OW 488
51425: NOT
51426: OR
51427: IFFALSE 51431
// exit ;
51429: GO 52167
// side := GetSide ( depot ) ;
51431: LD_ADDR_VAR 0 9
51435: PUSH
51436: LD_VAR 0 1
51440: PPUSH
51441: CALL_OW 255
51445: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
51446: LD_VAR 0 9
51450: PPUSH
51451: LD_VAR 0 2
51455: PPUSH
51456: CALL 50940 0 2
51460: NOT
51461: IFFALSE 51465
// exit ;
51463: GO 52167
// pom := GetBase ( depot ) ;
51465: LD_ADDR_VAR 0 10
51469: PUSH
51470: LD_VAR 0 1
51474: PPUSH
51475: CALL_OW 274
51479: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
51480: LD_ADDR_VAR 0 11
51484: PUSH
51485: LD_VAR 0 2
51489: PPUSH
51490: LD_VAR 0 1
51494: PPUSH
51495: CALL_OW 248
51499: PPUSH
51500: CALL_OW 450
51504: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
51505: LD_VAR 0 10
51509: PPUSH
51510: LD_INT 1
51512: PPUSH
51513: CALL_OW 275
51517: PUSH
51518: LD_VAR 0 11
51522: PUSH
51523: LD_INT 1
51525: ARRAY
51526: GREATEREQUAL
51527: PUSH
51528: LD_VAR 0 10
51532: PPUSH
51533: LD_INT 2
51535: PPUSH
51536: CALL_OW 275
51540: PUSH
51541: LD_VAR 0 11
51545: PUSH
51546: LD_INT 2
51548: ARRAY
51549: GREATEREQUAL
51550: AND
51551: PUSH
51552: LD_VAR 0 10
51556: PPUSH
51557: LD_INT 3
51559: PPUSH
51560: CALL_OW 275
51564: PUSH
51565: LD_VAR 0 11
51569: PUSH
51570: LD_INT 3
51572: ARRAY
51573: GREATEREQUAL
51574: AND
51575: NOT
51576: IFFALSE 51580
// exit ;
51578: GO 52167
// if GetBType ( depot ) = b_depot then
51580: LD_VAR 0 1
51584: PPUSH
51585: CALL_OW 266
51589: PUSH
51590: LD_INT 0
51592: EQUAL
51593: IFFALSE 51605
// dist := 28 else
51595: LD_ADDR_VAR 0 14
51599: PUSH
51600: LD_INT 28
51602: ST_TO_ADDR
51603: GO 51613
// dist := 36 ;
51605: LD_ADDR_VAR 0 14
51609: PUSH
51610: LD_INT 36
51612: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
51613: LD_VAR 0 1
51617: PPUSH
51618: LD_VAR 0 3
51622: PPUSH
51623: LD_VAR 0 4
51627: PPUSH
51628: CALL_OW 297
51632: PUSH
51633: LD_VAR 0 14
51637: GREATER
51638: IFFALSE 51642
// exit ;
51640: GO 52167
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
51642: LD_ADDR_VAR 0 12
51646: PUSH
51647: LD_VAR 0 2
51651: PPUSH
51652: LD_VAR 0 3
51656: PPUSH
51657: LD_VAR 0 4
51661: PPUSH
51662: LD_VAR 0 5
51666: PPUSH
51667: LD_VAR 0 1
51671: PPUSH
51672: CALL_OW 248
51676: PPUSH
51677: LD_INT 0
51679: PPUSH
51680: CALL 52172 0 6
51684: ST_TO_ADDR
// if not hexes then
51685: LD_VAR 0 12
51689: NOT
51690: IFFALSE 51694
// exit ;
51692: GO 52167
// hex := GetHexInfo ( x , y ) ;
51694: LD_ADDR_VAR 0 15
51698: PUSH
51699: LD_VAR 0 3
51703: PPUSH
51704: LD_VAR 0 4
51708: PPUSH
51709: CALL_OW 546
51713: ST_TO_ADDR
// if hex [ 1 ] then
51714: LD_VAR 0 15
51718: PUSH
51719: LD_INT 1
51721: ARRAY
51722: IFFALSE 51726
// exit ;
51724: GO 52167
// height := hex [ 2 ] ;
51726: LD_ADDR_VAR 0 13
51730: PUSH
51731: LD_VAR 0 15
51735: PUSH
51736: LD_INT 2
51738: ARRAY
51739: ST_TO_ADDR
// for i = 1 to hexes do
51740: LD_ADDR_VAR 0 7
51744: PUSH
51745: DOUBLE
51746: LD_INT 1
51748: DEC
51749: ST_TO_ADDR
51750: LD_VAR 0 12
51754: PUSH
51755: FOR_TO
51756: IFFALSE 52086
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
51758: LD_VAR 0 12
51762: PUSH
51763: LD_VAR 0 7
51767: ARRAY
51768: PUSH
51769: LD_INT 1
51771: ARRAY
51772: PPUSH
51773: LD_VAR 0 12
51777: PUSH
51778: LD_VAR 0 7
51782: ARRAY
51783: PUSH
51784: LD_INT 2
51786: ARRAY
51787: PPUSH
51788: CALL_OW 488
51792: NOT
51793: PUSH
51794: LD_VAR 0 12
51798: PUSH
51799: LD_VAR 0 7
51803: ARRAY
51804: PUSH
51805: LD_INT 1
51807: ARRAY
51808: PPUSH
51809: LD_VAR 0 12
51813: PUSH
51814: LD_VAR 0 7
51818: ARRAY
51819: PUSH
51820: LD_INT 2
51822: ARRAY
51823: PPUSH
51824: CALL_OW 428
51828: PUSH
51829: LD_INT 0
51831: GREATER
51832: OR
51833: PUSH
51834: LD_VAR 0 12
51838: PUSH
51839: LD_VAR 0 7
51843: ARRAY
51844: PUSH
51845: LD_INT 1
51847: ARRAY
51848: PPUSH
51849: LD_VAR 0 12
51853: PUSH
51854: LD_VAR 0 7
51858: ARRAY
51859: PUSH
51860: LD_INT 2
51862: ARRAY
51863: PPUSH
51864: CALL_OW 351
51868: OR
51869: IFFALSE 51875
// exit ;
51871: POP
51872: POP
51873: GO 52167
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
51875: LD_ADDR_VAR 0 8
51879: PUSH
51880: LD_VAR 0 12
51884: PUSH
51885: LD_VAR 0 7
51889: ARRAY
51890: PUSH
51891: LD_INT 1
51893: ARRAY
51894: PPUSH
51895: LD_VAR 0 12
51899: PUSH
51900: LD_VAR 0 7
51904: ARRAY
51905: PUSH
51906: LD_INT 2
51908: ARRAY
51909: PPUSH
51910: CALL_OW 546
51914: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
51915: LD_VAR 0 8
51919: PUSH
51920: LD_INT 1
51922: ARRAY
51923: PUSH
51924: LD_VAR 0 8
51928: PUSH
51929: LD_INT 2
51931: ARRAY
51932: PUSH
51933: LD_VAR 0 13
51937: PUSH
51938: LD_INT 2
51940: PLUS
51941: GREATER
51942: OR
51943: PUSH
51944: LD_VAR 0 8
51948: PUSH
51949: LD_INT 2
51951: ARRAY
51952: PUSH
51953: LD_VAR 0 13
51957: PUSH
51958: LD_INT 2
51960: MINUS
51961: LESS
51962: OR
51963: PUSH
51964: LD_VAR 0 8
51968: PUSH
51969: LD_INT 3
51971: ARRAY
51972: PUSH
51973: LD_INT 0
51975: PUSH
51976: LD_INT 8
51978: PUSH
51979: LD_INT 9
51981: PUSH
51982: LD_INT 10
51984: PUSH
51985: LD_INT 11
51987: PUSH
51988: LD_INT 12
51990: PUSH
51991: LD_INT 13
51993: PUSH
51994: LD_INT 16
51996: PUSH
51997: LD_INT 17
51999: PUSH
52000: LD_INT 18
52002: PUSH
52003: LD_INT 19
52005: PUSH
52006: LD_INT 20
52008: PUSH
52009: LD_INT 21
52011: PUSH
52012: EMPTY
52013: LIST
52014: LIST
52015: LIST
52016: LIST
52017: LIST
52018: LIST
52019: LIST
52020: LIST
52021: LIST
52022: LIST
52023: LIST
52024: LIST
52025: LIST
52026: IN
52027: NOT
52028: OR
52029: PUSH
52030: LD_VAR 0 8
52034: PUSH
52035: LD_INT 5
52037: ARRAY
52038: NOT
52039: OR
52040: PUSH
52041: LD_VAR 0 8
52045: PUSH
52046: LD_INT 6
52048: ARRAY
52049: PUSH
52050: LD_INT 1
52052: PUSH
52053: LD_INT 2
52055: PUSH
52056: LD_INT 7
52058: PUSH
52059: LD_INT 9
52061: PUSH
52062: LD_INT 10
52064: PUSH
52065: LD_INT 11
52067: PUSH
52068: EMPTY
52069: LIST
52070: LIST
52071: LIST
52072: LIST
52073: LIST
52074: LIST
52075: IN
52076: NOT
52077: OR
52078: IFFALSE 52084
// exit ;
52080: POP
52081: POP
52082: GO 52167
// end ;
52084: GO 51755
52086: POP
52087: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
52088: LD_VAR 0 9
52092: PPUSH
52093: LD_VAR 0 3
52097: PPUSH
52098: LD_VAR 0 4
52102: PPUSH
52103: LD_INT 20
52105: PPUSH
52106: CALL 44113 0 4
52110: PUSH
52111: LD_INT 4
52113: ARRAY
52114: IFFALSE 52118
// exit ;
52116: GO 52167
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
52118: LD_VAR 0 2
52122: PUSH
52123: LD_INT 29
52125: PUSH
52126: LD_INT 30
52128: PUSH
52129: EMPTY
52130: LIST
52131: LIST
52132: IN
52133: PUSH
52134: LD_VAR 0 3
52138: PPUSH
52139: LD_VAR 0 4
52143: PPUSH
52144: LD_VAR 0 9
52148: PPUSH
52149: CALL_OW 440
52153: NOT
52154: AND
52155: IFFALSE 52159
// exit ;
52157: GO 52167
// result := true ;
52159: LD_ADDR_VAR 0 6
52163: PUSH
52164: LD_INT 1
52166: ST_TO_ADDR
// end ;
52167: LD_VAR 0 6
52171: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
52172: LD_INT 0
52174: PPUSH
52175: PPUSH
52176: PPUSH
52177: PPUSH
52178: PPUSH
52179: PPUSH
52180: PPUSH
52181: PPUSH
52182: PPUSH
52183: PPUSH
52184: PPUSH
52185: PPUSH
52186: PPUSH
52187: PPUSH
52188: PPUSH
52189: PPUSH
52190: PPUSH
52191: PPUSH
52192: PPUSH
52193: PPUSH
52194: PPUSH
52195: PPUSH
52196: PPUSH
52197: PPUSH
52198: PPUSH
52199: PPUSH
52200: PPUSH
52201: PPUSH
52202: PPUSH
52203: PPUSH
52204: PPUSH
52205: PPUSH
52206: PPUSH
52207: PPUSH
52208: PPUSH
52209: PPUSH
52210: PPUSH
52211: PPUSH
52212: PPUSH
52213: PPUSH
52214: PPUSH
52215: PPUSH
52216: PPUSH
52217: PPUSH
52218: PPUSH
52219: PPUSH
52220: PPUSH
52221: PPUSH
52222: PPUSH
52223: PPUSH
52224: PPUSH
52225: PPUSH
52226: PPUSH
52227: PPUSH
52228: PPUSH
52229: PPUSH
52230: PPUSH
52231: PPUSH
// result = [ ] ;
52232: LD_ADDR_VAR 0 7
52236: PUSH
52237: EMPTY
52238: ST_TO_ADDR
// temp_list = [ ] ;
52239: LD_ADDR_VAR 0 9
52243: PUSH
52244: EMPTY
52245: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
52246: LD_VAR 0 4
52250: PUSH
52251: LD_INT 0
52253: PUSH
52254: LD_INT 1
52256: PUSH
52257: LD_INT 2
52259: PUSH
52260: LD_INT 3
52262: PUSH
52263: LD_INT 4
52265: PUSH
52266: LD_INT 5
52268: PUSH
52269: EMPTY
52270: LIST
52271: LIST
52272: LIST
52273: LIST
52274: LIST
52275: LIST
52276: IN
52277: NOT
52278: PUSH
52279: LD_VAR 0 1
52283: PUSH
52284: LD_INT 0
52286: PUSH
52287: LD_INT 1
52289: PUSH
52290: EMPTY
52291: LIST
52292: LIST
52293: IN
52294: PUSH
52295: LD_VAR 0 5
52299: PUSH
52300: LD_INT 1
52302: PUSH
52303: LD_INT 2
52305: PUSH
52306: LD_INT 3
52308: PUSH
52309: EMPTY
52310: LIST
52311: LIST
52312: LIST
52313: IN
52314: NOT
52315: AND
52316: OR
52317: IFFALSE 52321
// exit ;
52319: GO 70712
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
52321: LD_VAR 0 1
52325: PUSH
52326: LD_INT 6
52328: PUSH
52329: LD_INT 7
52331: PUSH
52332: LD_INT 8
52334: PUSH
52335: LD_INT 13
52337: PUSH
52338: LD_INT 12
52340: PUSH
52341: LD_INT 15
52343: PUSH
52344: LD_INT 11
52346: PUSH
52347: LD_INT 14
52349: PUSH
52350: LD_INT 10
52352: PUSH
52353: EMPTY
52354: LIST
52355: LIST
52356: LIST
52357: LIST
52358: LIST
52359: LIST
52360: LIST
52361: LIST
52362: LIST
52363: IN
52364: IFFALSE 52374
// btype = b_lab ;
52366: LD_ADDR_VAR 0 1
52370: PUSH
52371: LD_INT 6
52373: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
52374: LD_VAR 0 6
52378: PUSH
52379: LD_INT 0
52381: PUSH
52382: LD_INT 1
52384: PUSH
52385: LD_INT 2
52387: PUSH
52388: EMPTY
52389: LIST
52390: LIST
52391: LIST
52392: IN
52393: NOT
52394: PUSH
52395: LD_VAR 0 1
52399: PUSH
52400: LD_INT 0
52402: PUSH
52403: LD_INT 1
52405: PUSH
52406: LD_INT 2
52408: PUSH
52409: LD_INT 3
52411: PUSH
52412: LD_INT 6
52414: PUSH
52415: LD_INT 36
52417: PUSH
52418: LD_INT 4
52420: PUSH
52421: LD_INT 5
52423: PUSH
52424: LD_INT 31
52426: PUSH
52427: LD_INT 32
52429: PUSH
52430: LD_INT 33
52432: PUSH
52433: EMPTY
52434: LIST
52435: LIST
52436: LIST
52437: LIST
52438: LIST
52439: LIST
52440: LIST
52441: LIST
52442: LIST
52443: LIST
52444: LIST
52445: IN
52446: NOT
52447: PUSH
52448: LD_VAR 0 6
52452: PUSH
52453: LD_INT 1
52455: EQUAL
52456: AND
52457: OR
52458: PUSH
52459: LD_VAR 0 1
52463: PUSH
52464: LD_INT 2
52466: PUSH
52467: LD_INT 3
52469: PUSH
52470: EMPTY
52471: LIST
52472: LIST
52473: IN
52474: NOT
52475: PUSH
52476: LD_VAR 0 6
52480: PUSH
52481: LD_INT 2
52483: EQUAL
52484: AND
52485: OR
52486: IFFALSE 52496
// mode = 0 ;
52488: LD_ADDR_VAR 0 6
52492: PUSH
52493: LD_INT 0
52495: ST_TO_ADDR
// case mode of 0 :
52496: LD_VAR 0 6
52500: PUSH
52501: LD_INT 0
52503: DOUBLE
52504: EQUAL
52505: IFTRUE 52509
52507: GO 63962
52509: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52510: LD_ADDR_VAR 0 11
52514: PUSH
52515: LD_INT 0
52517: PUSH
52518: LD_INT 0
52520: PUSH
52521: EMPTY
52522: LIST
52523: LIST
52524: PUSH
52525: LD_INT 0
52527: PUSH
52528: LD_INT 1
52530: NEG
52531: PUSH
52532: EMPTY
52533: LIST
52534: LIST
52535: PUSH
52536: LD_INT 1
52538: PUSH
52539: LD_INT 0
52541: PUSH
52542: EMPTY
52543: LIST
52544: LIST
52545: PUSH
52546: LD_INT 1
52548: PUSH
52549: LD_INT 1
52551: PUSH
52552: EMPTY
52553: LIST
52554: LIST
52555: PUSH
52556: LD_INT 0
52558: PUSH
52559: LD_INT 1
52561: PUSH
52562: EMPTY
52563: LIST
52564: LIST
52565: PUSH
52566: LD_INT 1
52568: NEG
52569: PUSH
52570: LD_INT 0
52572: PUSH
52573: EMPTY
52574: LIST
52575: LIST
52576: PUSH
52577: LD_INT 1
52579: NEG
52580: PUSH
52581: LD_INT 1
52583: NEG
52584: PUSH
52585: EMPTY
52586: LIST
52587: LIST
52588: PUSH
52589: LD_INT 1
52591: NEG
52592: PUSH
52593: LD_INT 2
52595: NEG
52596: PUSH
52597: EMPTY
52598: LIST
52599: LIST
52600: PUSH
52601: LD_INT 0
52603: PUSH
52604: LD_INT 2
52606: NEG
52607: PUSH
52608: EMPTY
52609: LIST
52610: LIST
52611: PUSH
52612: LD_INT 1
52614: PUSH
52615: LD_INT 1
52617: NEG
52618: PUSH
52619: EMPTY
52620: LIST
52621: LIST
52622: PUSH
52623: LD_INT 1
52625: PUSH
52626: LD_INT 2
52628: PUSH
52629: EMPTY
52630: LIST
52631: LIST
52632: PUSH
52633: LD_INT 0
52635: PUSH
52636: LD_INT 2
52638: PUSH
52639: EMPTY
52640: LIST
52641: LIST
52642: PUSH
52643: LD_INT 1
52645: NEG
52646: PUSH
52647: LD_INT 1
52649: PUSH
52650: EMPTY
52651: LIST
52652: LIST
52653: PUSH
52654: LD_INT 1
52656: PUSH
52657: LD_INT 3
52659: PUSH
52660: EMPTY
52661: LIST
52662: LIST
52663: PUSH
52664: LD_INT 0
52666: PUSH
52667: LD_INT 3
52669: PUSH
52670: EMPTY
52671: LIST
52672: LIST
52673: PUSH
52674: LD_INT 1
52676: NEG
52677: PUSH
52678: LD_INT 2
52680: PUSH
52681: EMPTY
52682: LIST
52683: LIST
52684: PUSH
52685: EMPTY
52686: LIST
52687: LIST
52688: LIST
52689: LIST
52690: LIST
52691: LIST
52692: LIST
52693: LIST
52694: LIST
52695: LIST
52696: LIST
52697: LIST
52698: LIST
52699: LIST
52700: LIST
52701: LIST
52702: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52703: LD_ADDR_VAR 0 12
52707: PUSH
52708: LD_INT 0
52710: PUSH
52711: LD_INT 0
52713: PUSH
52714: EMPTY
52715: LIST
52716: LIST
52717: PUSH
52718: LD_INT 0
52720: PUSH
52721: LD_INT 1
52723: NEG
52724: PUSH
52725: EMPTY
52726: LIST
52727: LIST
52728: PUSH
52729: LD_INT 1
52731: PUSH
52732: LD_INT 0
52734: PUSH
52735: EMPTY
52736: LIST
52737: LIST
52738: PUSH
52739: LD_INT 1
52741: PUSH
52742: LD_INT 1
52744: PUSH
52745: EMPTY
52746: LIST
52747: LIST
52748: PUSH
52749: LD_INT 0
52751: PUSH
52752: LD_INT 1
52754: PUSH
52755: EMPTY
52756: LIST
52757: LIST
52758: PUSH
52759: LD_INT 1
52761: NEG
52762: PUSH
52763: LD_INT 0
52765: PUSH
52766: EMPTY
52767: LIST
52768: LIST
52769: PUSH
52770: LD_INT 1
52772: NEG
52773: PUSH
52774: LD_INT 1
52776: NEG
52777: PUSH
52778: EMPTY
52779: LIST
52780: LIST
52781: PUSH
52782: LD_INT 1
52784: PUSH
52785: LD_INT 1
52787: NEG
52788: PUSH
52789: EMPTY
52790: LIST
52791: LIST
52792: PUSH
52793: LD_INT 2
52795: PUSH
52796: LD_INT 0
52798: PUSH
52799: EMPTY
52800: LIST
52801: LIST
52802: PUSH
52803: LD_INT 2
52805: PUSH
52806: LD_INT 1
52808: PUSH
52809: EMPTY
52810: LIST
52811: LIST
52812: PUSH
52813: LD_INT 1
52815: NEG
52816: PUSH
52817: LD_INT 1
52819: PUSH
52820: EMPTY
52821: LIST
52822: LIST
52823: PUSH
52824: LD_INT 2
52826: NEG
52827: PUSH
52828: LD_INT 0
52830: PUSH
52831: EMPTY
52832: LIST
52833: LIST
52834: PUSH
52835: LD_INT 2
52837: NEG
52838: PUSH
52839: LD_INT 1
52841: NEG
52842: PUSH
52843: EMPTY
52844: LIST
52845: LIST
52846: PUSH
52847: LD_INT 2
52849: NEG
52850: PUSH
52851: LD_INT 1
52853: PUSH
52854: EMPTY
52855: LIST
52856: LIST
52857: PUSH
52858: LD_INT 3
52860: NEG
52861: PUSH
52862: LD_INT 0
52864: PUSH
52865: EMPTY
52866: LIST
52867: LIST
52868: PUSH
52869: LD_INT 3
52871: NEG
52872: PUSH
52873: LD_INT 1
52875: NEG
52876: PUSH
52877: EMPTY
52878: LIST
52879: LIST
52880: PUSH
52881: EMPTY
52882: LIST
52883: LIST
52884: LIST
52885: LIST
52886: LIST
52887: LIST
52888: LIST
52889: LIST
52890: LIST
52891: LIST
52892: LIST
52893: LIST
52894: LIST
52895: LIST
52896: LIST
52897: LIST
52898: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52899: LD_ADDR_VAR 0 13
52903: PUSH
52904: LD_INT 0
52906: PUSH
52907: LD_INT 0
52909: PUSH
52910: EMPTY
52911: LIST
52912: LIST
52913: PUSH
52914: LD_INT 0
52916: PUSH
52917: LD_INT 1
52919: NEG
52920: PUSH
52921: EMPTY
52922: LIST
52923: LIST
52924: PUSH
52925: LD_INT 1
52927: PUSH
52928: LD_INT 0
52930: PUSH
52931: EMPTY
52932: LIST
52933: LIST
52934: PUSH
52935: LD_INT 1
52937: PUSH
52938: LD_INT 1
52940: PUSH
52941: EMPTY
52942: LIST
52943: LIST
52944: PUSH
52945: LD_INT 0
52947: PUSH
52948: LD_INT 1
52950: PUSH
52951: EMPTY
52952: LIST
52953: LIST
52954: PUSH
52955: LD_INT 1
52957: NEG
52958: PUSH
52959: LD_INT 0
52961: PUSH
52962: EMPTY
52963: LIST
52964: LIST
52965: PUSH
52966: LD_INT 1
52968: NEG
52969: PUSH
52970: LD_INT 1
52972: NEG
52973: PUSH
52974: EMPTY
52975: LIST
52976: LIST
52977: PUSH
52978: LD_INT 1
52980: NEG
52981: PUSH
52982: LD_INT 2
52984: NEG
52985: PUSH
52986: EMPTY
52987: LIST
52988: LIST
52989: PUSH
52990: LD_INT 2
52992: PUSH
52993: LD_INT 1
52995: PUSH
52996: EMPTY
52997: LIST
52998: LIST
52999: PUSH
53000: LD_INT 2
53002: PUSH
53003: LD_INT 2
53005: PUSH
53006: EMPTY
53007: LIST
53008: LIST
53009: PUSH
53010: LD_INT 1
53012: PUSH
53013: LD_INT 2
53015: PUSH
53016: EMPTY
53017: LIST
53018: LIST
53019: PUSH
53020: LD_INT 2
53022: NEG
53023: PUSH
53024: LD_INT 1
53026: NEG
53027: PUSH
53028: EMPTY
53029: LIST
53030: LIST
53031: PUSH
53032: LD_INT 2
53034: NEG
53035: PUSH
53036: LD_INT 2
53038: NEG
53039: PUSH
53040: EMPTY
53041: LIST
53042: LIST
53043: PUSH
53044: LD_INT 2
53046: NEG
53047: PUSH
53048: LD_INT 3
53050: NEG
53051: PUSH
53052: EMPTY
53053: LIST
53054: LIST
53055: PUSH
53056: LD_INT 3
53058: NEG
53059: PUSH
53060: LD_INT 2
53062: NEG
53063: PUSH
53064: EMPTY
53065: LIST
53066: LIST
53067: PUSH
53068: LD_INT 3
53070: NEG
53071: PUSH
53072: LD_INT 3
53074: NEG
53075: PUSH
53076: EMPTY
53077: LIST
53078: LIST
53079: PUSH
53080: EMPTY
53081: LIST
53082: LIST
53083: LIST
53084: LIST
53085: LIST
53086: LIST
53087: LIST
53088: LIST
53089: LIST
53090: LIST
53091: LIST
53092: LIST
53093: LIST
53094: LIST
53095: LIST
53096: LIST
53097: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53098: LD_ADDR_VAR 0 14
53102: PUSH
53103: LD_INT 0
53105: PUSH
53106: LD_INT 0
53108: PUSH
53109: EMPTY
53110: LIST
53111: LIST
53112: PUSH
53113: LD_INT 0
53115: PUSH
53116: LD_INT 1
53118: NEG
53119: PUSH
53120: EMPTY
53121: LIST
53122: LIST
53123: PUSH
53124: LD_INT 1
53126: PUSH
53127: LD_INT 0
53129: PUSH
53130: EMPTY
53131: LIST
53132: LIST
53133: PUSH
53134: LD_INT 1
53136: PUSH
53137: LD_INT 1
53139: PUSH
53140: EMPTY
53141: LIST
53142: LIST
53143: PUSH
53144: LD_INT 0
53146: PUSH
53147: LD_INT 1
53149: PUSH
53150: EMPTY
53151: LIST
53152: LIST
53153: PUSH
53154: LD_INT 1
53156: NEG
53157: PUSH
53158: LD_INT 0
53160: PUSH
53161: EMPTY
53162: LIST
53163: LIST
53164: PUSH
53165: LD_INT 1
53167: NEG
53168: PUSH
53169: LD_INT 1
53171: NEG
53172: PUSH
53173: EMPTY
53174: LIST
53175: LIST
53176: PUSH
53177: LD_INT 1
53179: NEG
53180: PUSH
53181: LD_INT 2
53183: NEG
53184: PUSH
53185: EMPTY
53186: LIST
53187: LIST
53188: PUSH
53189: LD_INT 0
53191: PUSH
53192: LD_INT 2
53194: NEG
53195: PUSH
53196: EMPTY
53197: LIST
53198: LIST
53199: PUSH
53200: LD_INT 1
53202: PUSH
53203: LD_INT 1
53205: NEG
53206: PUSH
53207: EMPTY
53208: LIST
53209: LIST
53210: PUSH
53211: LD_INT 1
53213: PUSH
53214: LD_INT 2
53216: PUSH
53217: EMPTY
53218: LIST
53219: LIST
53220: PUSH
53221: LD_INT 0
53223: PUSH
53224: LD_INT 2
53226: PUSH
53227: EMPTY
53228: LIST
53229: LIST
53230: PUSH
53231: LD_INT 1
53233: NEG
53234: PUSH
53235: LD_INT 1
53237: PUSH
53238: EMPTY
53239: LIST
53240: LIST
53241: PUSH
53242: LD_INT 1
53244: NEG
53245: PUSH
53246: LD_INT 3
53248: NEG
53249: PUSH
53250: EMPTY
53251: LIST
53252: LIST
53253: PUSH
53254: LD_INT 0
53256: PUSH
53257: LD_INT 3
53259: NEG
53260: PUSH
53261: EMPTY
53262: LIST
53263: LIST
53264: PUSH
53265: LD_INT 1
53267: PUSH
53268: LD_INT 2
53270: NEG
53271: PUSH
53272: EMPTY
53273: LIST
53274: LIST
53275: PUSH
53276: EMPTY
53277: LIST
53278: LIST
53279: LIST
53280: LIST
53281: LIST
53282: LIST
53283: LIST
53284: LIST
53285: LIST
53286: LIST
53287: LIST
53288: LIST
53289: LIST
53290: LIST
53291: LIST
53292: LIST
53293: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53294: LD_ADDR_VAR 0 15
53298: PUSH
53299: LD_INT 0
53301: PUSH
53302: LD_INT 0
53304: PUSH
53305: EMPTY
53306: LIST
53307: LIST
53308: PUSH
53309: LD_INT 0
53311: PUSH
53312: LD_INT 1
53314: NEG
53315: PUSH
53316: EMPTY
53317: LIST
53318: LIST
53319: PUSH
53320: LD_INT 1
53322: PUSH
53323: LD_INT 0
53325: PUSH
53326: EMPTY
53327: LIST
53328: LIST
53329: PUSH
53330: LD_INT 1
53332: PUSH
53333: LD_INT 1
53335: PUSH
53336: EMPTY
53337: LIST
53338: LIST
53339: PUSH
53340: LD_INT 0
53342: PUSH
53343: LD_INT 1
53345: PUSH
53346: EMPTY
53347: LIST
53348: LIST
53349: PUSH
53350: LD_INT 1
53352: NEG
53353: PUSH
53354: LD_INT 0
53356: PUSH
53357: EMPTY
53358: LIST
53359: LIST
53360: PUSH
53361: LD_INT 1
53363: NEG
53364: PUSH
53365: LD_INT 1
53367: NEG
53368: PUSH
53369: EMPTY
53370: LIST
53371: LIST
53372: PUSH
53373: LD_INT 1
53375: PUSH
53376: LD_INT 1
53378: NEG
53379: PUSH
53380: EMPTY
53381: LIST
53382: LIST
53383: PUSH
53384: LD_INT 2
53386: PUSH
53387: LD_INT 0
53389: PUSH
53390: EMPTY
53391: LIST
53392: LIST
53393: PUSH
53394: LD_INT 2
53396: PUSH
53397: LD_INT 1
53399: PUSH
53400: EMPTY
53401: LIST
53402: LIST
53403: PUSH
53404: LD_INT 1
53406: NEG
53407: PUSH
53408: LD_INT 1
53410: PUSH
53411: EMPTY
53412: LIST
53413: LIST
53414: PUSH
53415: LD_INT 2
53417: NEG
53418: PUSH
53419: LD_INT 0
53421: PUSH
53422: EMPTY
53423: LIST
53424: LIST
53425: PUSH
53426: LD_INT 2
53428: NEG
53429: PUSH
53430: LD_INT 1
53432: NEG
53433: PUSH
53434: EMPTY
53435: LIST
53436: LIST
53437: PUSH
53438: LD_INT 2
53440: PUSH
53441: LD_INT 1
53443: NEG
53444: PUSH
53445: EMPTY
53446: LIST
53447: LIST
53448: PUSH
53449: LD_INT 3
53451: PUSH
53452: LD_INT 0
53454: PUSH
53455: EMPTY
53456: LIST
53457: LIST
53458: PUSH
53459: LD_INT 3
53461: PUSH
53462: LD_INT 1
53464: PUSH
53465: EMPTY
53466: LIST
53467: LIST
53468: PUSH
53469: EMPTY
53470: LIST
53471: LIST
53472: LIST
53473: LIST
53474: LIST
53475: LIST
53476: LIST
53477: LIST
53478: LIST
53479: LIST
53480: LIST
53481: LIST
53482: LIST
53483: LIST
53484: LIST
53485: LIST
53486: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53487: LD_ADDR_VAR 0 16
53491: PUSH
53492: LD_INT 0
53494: PUSH
53495: LD_INT 0
53497: PUSH
53498: EMPTY
53499: LIST
53500: LIST
53501: PUSH
53502: LD_INT 0
53504: PUSH
53505: LD_INT 1
53507: NEG
53508: PUSH
53509: EMPTY
53510: LIST
53511: LIST
53512: PUSH
53513: LD_INT 1
53515: PUSH
53516: LD_INT 0
53518: PUSH
53519: EMPTY
53520: LIST
53521: LIST
53522: PUSH
53523: LD_INT 1
53525: PUSH
53526: LD_INT 1
53528: PUSH
53529: EMPTY
53530: LIST
53531: LIST
53532: PUSH
53533: LD_INT 0
53535: PUSH
53536: LD_INT 1
53538: PUSH
53539: EMPTY
53540: LIST
53541: LIST
53542: PUSH
53543: LD_INT 1
53545: NEG
53546: PUSH
53547: LD_INT 0
53549: PUSH
53550: EMPTY
53551: LIST
53552: LIST
53553: PUSH
53554: LD_INT 1
53556: NEG
53557: PUSH
53558: LD_INT 1
53560: NEG
53561: PUSH
53562: EMPTY
53563: LIST
53564: LIST
53565: PUSH
53566: LD_INT 1
53568: NEG
53569: PUSH
53570: LD_INT 2
53572: NEG
53573: PUSH
53574: EMPTY
53575: LIST
53576: LIST
53577: PUSH
53578: LD_INT 2
53580: PUSH
53581: LD_INT 1
53583: PUSH
53584: EMPTY
53585: LIST
53586: LIST
53587: PUSH
53588: LD_INT 2
53590: PUSH
53591: LD_INT 2
53593: PUSH
53594: EMPTY
53595: LIST
53596: LIST
53597: PUSH
53598: LD_INT 1
53600: PUSH
53601: LD_INT 2
53603: PUSH
53604: EMPTY
53605: LIST
53606: LIST
53607: PUSH
53608: LD_INT 2
53610: NEG
53611: PUSH
53612: LD_INT 1
53614: NEG
53615: PUSH
53616: EMPTY
53617: LIST
53618: LIST
53619: PUSH
53620: LD_INT 2
53622: NEG
53623: PUSH
53624: LD_INT 2
53626: NEG
53627: PUSH
53628: EMPTY
53629: LIST
53630: LIST
53631: PUSH
53632: LD_INT 3
53634: PUSH
53635: LD_INT 2
53637: PUSH
53638: EMPTY
53639: LIST
53640: LIST
53641: PUSH
53642: LD_INT 3
53644: PUSH
53645: LD_INT 3
53647: PUSH
53648: EMPTY
53649: LIST
53650: LIST
53651: PUSH
53652: LD_INT 2
53654: PUSH
53655: LD_INT 3
53657: PUSH
53658: EMPTY
53659: LIST
53660: LIST
53661: PUSH
53662: EMPTY
53663: LIST
53664: LIST
53665: LIST
53666: LIST
53667: LIST
53668: LIST
53669: LIST
53670: LIST
53671: LIST
53672: LIST
53673: LIST
53674: LIST
53675: LIST
53676: LIST
53677: LIST
53678: LIST
53679: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53680: LD_ADDR_VAR 0 17
53684: PUSH
53685: LD_INT 0
53687: PUSH
53688: LD_INT 0
53690: PUSH
53691: EMPTY
53692: LIST
53693: LIST
53694: PUSH
53695: LD_INT 0
53697: PUSH
53698: LD_INT 1
53700: NEG
53701: PUSH
53702: EMPTY
53703: LIST
53704: LIST
53705: PUSH
53706: LD_INT 1
53708: PUSH
53709: LD_INT 0
53711: PUSH
53712: EMPTY
53713: LIST
53714: LIST
53715: PUSH
53716: LD_INT 1
53718: PUSH
53719: LD_INT 1
53721: PUSH
53722: EMPTY
53723: LIST
53724: LIST
53725: PUSH
53726: LD_INT 0
53728: PUSH
53729: LD_INT 1
53731: PUSH
53732: EMPTY
53733: LIST
53734: LIST
53735: PUSH
53736: LD_INT 1
53738: NEG
53739: PUSH
53740: LD_INT 0
53742: PUSH
53743: EMPTY
53744: LIST
53745: LIST
53746: PUSH
53747: LD_INT 1
53749: NEG
53750: PUSH
53751: LD_INT 1
53753: NEG
53754: PUSH
53755: EMPTY
53756: LIST
53757: LIST
53758: PUSH
53759: LD_INT 1
53761: NEG
53762: PUSH
53763: LD_INT 2
53765: NEG
53766: PUSH
53767: EMPTY
53768: LIST
53769: LIST
53770: PUSH
53771: LD_INT 0
53773: PUSH
53774: LD_INT 2
53776: NEG
53777: PUSH
53778: EMPTY
53779: LIST
53780: LIST
53781: PUSH
53782: LD_INT 1
53784: PUSH
53785: LD_INT 1
53787: NEG
53788: PUSH
53789: EMPTY
53790: LIST
53791: LIST
53792: PUSH
53793: LD_INT 2
53795: PUSH
53796: LD_INT 0
53798: PUSH
53799: EMPTY
53800: LIST
53801: LIST
53802: PUSH
53803: LD_INT 2
53805: PUSH
53806: LD_INT 1
53808: PUSH
53809: EMPTY
53810: LIST
53811: LIST
53812: PUSH
53813: LD_INT 2
53815: PUSH
53816: LD_INT 2
53818: PUSH
53819: EMPTY
53820: LIST
53821: LIST
53822: PUSH
53823: LD_INT 1
53825: PUSH
53826: LD_INT 2
53828: PUSH
53829: EMPTY
53830: LIST
53831: LIST
53832: PUSH
53833: LD_INT 0
53835: PUSH
53836: LD_INT 2
53838: PUSH
53839: EMPTY
53840: LIST
53841: LIST
53842: PUSH
53843: LD_INT 1
53845: NEG
53846: PUSH
53847: LD_INT 1
53849: PUSH
53850: EMPTY
53851: LIST
53852: LIST
53853: PUSH
53854: LD_INT 2
53856: NEG
53857: PUSH
53858: LD_INT 0
53860: PUSH
53861: EMPTY
53862: LIST
53863: LIST
53864: PUSH
53865: LD_INT 2
53867: NEG
53868: PUSH
53869: LD_INT 1
53871: NEG
53872: PUSH
53873: EMPTY
53874: LIST
53875: LIST
53876: PUSH
53877: LD_INT 2
53879: NEG
53880: PUSH
53881: LD_INT 2
53883: NEG
53884: PUSH
53885: EMPTY
53886: LIST
53887: LIST
53888: PUSH
53889: EMPTY
53890: LIST
53891: LIST
53892: LIST
53893: LIST
53894: LIST
53895: LIST
53896: LIST
53897: LIST
53898: LIST
53899: LIST
53900: LIST
53901: LIST
53902: LIST
53903: LIST
53904: LIST
53905: LIST
53906: LIST
53907: LIST
53908: LIST
53909: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53910: LD_ADDR_VAR 0 18
53914: PUSH
53915: LD_INT 0
53917: PUSH
53918: LD_INT 0
53920: PUSH
53921: EMPTY
53922: LIST
53923: LIST
53924: PUSH
53925: LD_INT 0
53927: PUSH
53928: LD_INT 1
53930: NEG
53931: PUSH
53932: EMPTY
53933: LIST
53934: LIST
53935: PUSH
53936: LD_INT 1
53938: PUSH
53939: LD_INT 0
53941: PUSH
53942: EMPTY
53943: LIST
53944: LIST
53945: PUSH
53946: LD_INT 1
53948: PUSH
53949: LD_INT 1
53951: PUSH
53952: EMPTY
53953: LIST
53954: LIST
53955: PUSH
53956: LD_INT 0
53958: PUSH
53959: LD_INT 1
53961: PUSH
53962: EMPTY
53963: LIST
53964: LIST
53965: PUSH
53966: LD_INT 1
53968: NEG
53969: PUSH
53970: LD_INT 0
53972: PUSH
53973: EMPTY
53974: LIST
53975: LIST
53976: PUSH
53977: LD_INT 1
53979: NEG
53980: PUSH
53981: LD_INT 1
53983: NEG
53984: PUSH
53985: EMPTY
53986: LIST
53987: LIST
53988: PUSH
53989: LD_INT 1
53991: NEG
53992: PUSH
53993: LD_INT 2
53995: NEG
53996: PUSH
53997: EMPTY
53998: LIST
53999: LIST
54000: PUSH
54001: LD_INT 0
54003: PUSH
54004: LD_INT 2
54006: NEG
54007: PUSH
54008: EMPTY
54009: LIST
54010: LIST
54011: PUSH
54012: LD_INT 1
54014: PUSH
54015: LD_INT 1
54017: NEG
54018: PUSH
54019: EMPTY
54020: LIST
54021: LIST
54022: PUSH
54023: LD_INT 2
54025: PUSH
54026: LD_INT 0
54028: PUSH
54029: EMPTY
54030: LIST
54031: LIST
54032: PUSH
54033: LD_INT 2
54035: PUSH
54036: LD_INT 1
54038: PUSH
54039: EMPTY
54040: LIST
54041: LIST
54042: PUSH
54043: LD_INT 2
54045: PUSH
54046: LD_INT 2
54048: PUSH
54049: EMPTY
54050: LIST
54051: LIST
54052: PUSH
54053: LD_INT 1
54055: PUSH
54056: LD_INT 2
54058: PUSH
54059: EMPTY
54060: LIST
54061: LIST
54062: PUSH
54063: LD_INT 0
54065: PUSH
54066: LD_INT 2
54068: PUSH
54069: EMPTY
54070: LIST
54071: LIST
54072: PUSH
54073: LD_INT 1
54075: NEG
54076: PUSH
54077: LD_INT 1
54079: PUSH
54080: EMPTY
54081: LIST
54082: LIST
54083: PUSH
54084: LD_INT 2
54086: NEG
54087: PUSH
54088: LD_INT 0
54090: PUSH
54091: EMPTY
54092: LIST
54093: LIST
54094: PUSH
54095: LD_INT 2
54097: NEG
54098: PUSH
54099: LD_INT 1
54101: NEG
54102: PUSH
54103: EMPTY
54104: LIST
54105: LIST
54106: PUSH
54107: LD_INT 2
54109: NEG
54110: PUSH
54111: LD_INT 2
54113: NEG
54114: PUSH
54115: EMPTY
54116: LIST
54117: LIST
54118: PUSH
54119: EMPTY
54120: LIST
54121: LIST
54122: LIST
54123: LIST
54124: LIST
54125: LIST
54126: LIST
54127: LIST
54128: LIST
54129: LIST
54130: LIST
54131: LIST
54132: LIST
54133: LIST
54134: LIST
54135: LIST
54136: LIST
54137: LIST
54138: LIST
54139: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54140: LD_ADDR_VAR 0 19
54144: PUSH
54145: LD_INT 0
54147: PUSH
54148: LD_INT 0
54150: PUSH
54151: EMPTY
54152: LIST
54153: LIST
54154: PUSH
54155: LD_INT 0
54157: PUSH
54158: LD_INT 1
54160: NEG
54161: PUSH
54162: EMPTY
54163: LIST
54164: LIST
54165: PUSH
54166: LD_INT 1
54168: PUSH
54169: LD_INT 0
54171: PUSH
54172: EMPTY
54173: LIST
54174: LIST
54175: PUSH
54176: LD_INT 1
54178: PUSH
54179: LD_INT 1
54181: PUSH
54182: EMPTY
54183: LIST
54184: LIST
54185: PUSH
54186: LD_INT 0
54188: PUSH
54189: LD_INT 1
54191: PUSH
54192: EMPTY
54193: LIST
54194: LIST
54195: PUSH
54196: LD_INT 1
54198: NEG
54199: PUSH
54200: LD_INT 0
54202: PUSH
54203: EMPTY
54204: LIST
54205: LIST
54206: PUSH
54207: LD_INT 1
54209: NEG
54210: PUSH
54211: LD_INT 1
54213: NEG
54214: PUSH
54215: EMPTY
54216: LIST
54217: LIST
54218: PUSH
54219: LD_INT 1
54221: NEG
54222: PUSH
54223: LD_INT 2
54225: NEG
54226: PUSH
54227: EMPTY
54228: LIST
54229: LIST
54230: PUSH
54231: LD_INT 0
54233: PUSH
54234: LD_INT 2
54236: NEG
54237: PUSH
54238: EMPTY
54239: LIST
54240: LIST
54241: PUSH
54242: LD_INT 1
54244: PUSH
54245: LD_INT 1
54247: NEG
54248: PUSH
54249: EMPTY
54250: LIST
54251: LIST
54252: PUSH
54253: LD_INT 2
54255: PUSH
54256: LD_INT 0
54258: PUSH
54259: EMPTY
54260: LIST
54261: LIST
54262: PUSH
54263: LD_INT 2
54265: PUSH
54266: LD_INT 1
54268: PUSH
54269: EMPTY
54270: LIST
54271: LIST
54272: PUSH
54273: LD_INT 2
54275: PUSH
54276: LD_INT 2
54278: PUSH
54279: EMPTY
54280: LIST
54281: LIST
54282: PUSH
54283: LD_INT 1
54285: PUSH
54286: LD_INT 2
54288: PUSH
54289: EMPTY
54290: LIST
54291: LIST
54292: PUSH
54293: LD_INT 0
54295: PUSH
54296: LD_INT 2
54298: PUSH
54299: EMPTY
54300: LIST
54301: LIST
54302: PUSH
54303: LD_INT 1
54305: NEG
54306: PUSH
54307: LD_INT 1
54309: PUSH
54310: EMPTY
54311: LIST
54312: LIST
54313: PUSH
54314: LD_INT 2
54316: NEG
54317: PUSH
54318: LD_INT 0
54320: PUSH
54321: EMPTY
54322: LIST
54323: LIST
54324: PUSH
54325: LD_INT 2
54327: NEG
54328: PUSH
54329: LD_INT 1
54331: NEG
54332: PUSH
54333: EMPTY
54334: LIST
54335: LIST
54336: PUSH
54337: LD_INT 2
54339: NEG
54340: PUSH
54341: LD_INT 2
54343: NEG
54344: PUSH
54345: EMPTY
54346: LIST
54347: LIST
54348: PUSH
54349: EMPTY
54350: LIST
54351: LIST
54352: LIST
54353: LIST
54354: LIST
54355: LIST
54356: LIST
54357: LIST
54358: LIST
54359: LIST
54360: LIST
54361: LIST
54362: LIST
54363: LIST
54364: LIST
54365: LIST
54366: LIST
54367: LIST
54368: LIST
54369: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54370: LD_ADDR_VAR 0 20
54374: PUSH
54375: LD_INT 0
54377: PUSH
54378: LD_INT 0
54380: PUSH
54381: EMPTY
54382: LIST
54383: LIST
54384: PUSH
54385: LD_INT 0
54387: PUSH
54388: LD_INT 1
54390: NEG
54391: PUSH
54392: EMPTY
54393: LIST
54394: LIST
54395: PUSH
54396: LD_INT 1
54398: PUSH
54399: LD_INT 0
54401: PUSH
54402: EMPTY
54403: LIST
54404: LIST
54405: PUSH
54406: LD_INT 1
54408: PUSH
54409: LD_INT 1
54411: PUSH
54412: EMPTY
54413: LIST
54414: LIST
54415: PUSH
54416: LD_INT 0
54418: PUSH
54419: LD_INT 1
54421: PUSH
54422: EMPTY
54423: LIST
54424: LIST
54425: PUSH
54426: LD_INT 1
54428: NEG
54429: PUSH
54430: LD_INT 0
54432: PUSH
54433: EMPTY
54434: LIST
54435: LIST
54436: PUSH
54437: LD_INT 1
54439: NEG
54440: PUSH
54441: LD_INT 1
54443: NEG
54444: PUSH
54445: EMPTY
54446: LIST
54447: LIST
54448: PUSH
54449: LD_INT 1
54451: NEG
54452: PUSH
54453: LD_INT 2
54455: NEG
54456: PUSH
54457: EMPTY
54458: LIST
54459: LIST
54460: PUSH
54461: LD_INT 0
54463: PUSH
54464: LD_INT 2
54466: NEG
54467: PUSH
54468: EMPTY
54469: LIST
54470: LIST
54471: PUSH
54472: LD_INT 1
54474: PUSH
54475: LD_INT 1
54477: NEG
54478: PUSH
54479: EMPTY
54480: LIST
54481: LIST
54482: PUSH
54483: LD_INT 2
54485: PUSH
54486: LD_INT 0
54488: PUSH
54489: EMPTY
54490: LIST
54491: LIST
54492: PUSH
54493: LD_INT 2
54495: PUSH
54496: LD_INT 1
54498: PUSH
54499: EMPTY
54500: LIST
54501: LIST
54502: PUSH
54503: LD_INT 2
54505: PUSH
54506: LD_INT 2
54508: PUSH
54509: EMPTY
54510: LIST
54511: LIST
54512: PUSH
54513: LD_INT 1
54515: PUSH
54516: LD_INT 2
54518: PUSH
54519: EMPTY
54520: LIST
54521: LIST
54522: PUSH
54523: LD_INT 0
54525: PUSH
54526: LD_INT 2
54528: PUSH
54529: EMPTY
54530: LIST
54531: LIST
54532: PUSH
54533: LD_INT 1
54535: NEG
54536: PUSH
54537: LD_INT 1
54539: PUSH
54540: EMPTY
54541: LIST
54542: LIST
54543: PUSH
54544: LD_INT 2
54546: NEG
54547: PUSH
54548: LD_INT 0
54550: PUSH
54551: EMPTY
54552: LIST
54553: LIST
54554: PUSH
54555: LD_INT 2
54557: NEG
54558: PUSH
54559: LD_INT 1
54561: NEG
54562: PUSH
54563: EMPTY
54564: LIST
54565: LIST
54566: PUSH
54567: LD_INT 2
54569: NEG
54570: PUSH
54571: LD_INT 2
54573: NEG
54574: PUSH
54575: EMPTY
54576: LIST
54577: LIST
54578: PUSH
54579: EMPTY
54580: LIST
54581: LIST
54582: LIST
54583: LIST
54584: LIST
54585: LIST
54586: LIST
54587: LIST
54588: LIST
54589: LIST
54590: LIST
54591: LIST
54592: LIST
54593: LIST
54594: LIST
54595: LIST
54596: LIST
54597: LIST
54598: LIST
54599: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54600: LD_ADDR_VAR 0 21
54604: PUSH
54605: LD_INT 0
54607: PUSH
54608: LD_INT 0
54610: PUSH
54611: EMPTY
54612: LIST
54613: LIST
54614: PUSH
54615: LD_INT 0
54617: PUSH
54618: LD_INT 1
54620: NEG
54621: PUSH
54622: EMPTY
54623: LIST
54624: LIST
54625: PUSH
54626: LD_INT 1
54628: PUSH
54629: LD_INT 0
54631: PUSH
54632: EMPTY
54633: LIST
54634: LIST
54635: PUSH
54636: LD_INT 1
54638: PUSH
54639: LD_INT 1
54641: PUSH
54642: EMPTY
54643: LIST
54644: LIST
54645: PUSH
54646: LD_INT 0
54648: PUSH
54649: LD_INT 1
54651: PUSH
54652: EMPTY
54653: LIST
54654: LIST
54655: PUSH
54656: LD_INT 1
54658: NEG
54659: PUSH
54660: LD_INT 0
54662: PUSH
54663: EMPTY
54664: LIST
54665: LIST
54666: PUSH
54667: LD_INT 1
54669: NEG
54670: PUSH
54671: LD_INT 1
54673: NEG
54674: PUSH
54675: EMPTY
54676: LIST
54677: LIST
54678: PUSH
54679: LD_INT 1
54681: NEG
54682: PUSH
54683: LD_INT 2
54685: NEG
54686: PUSH
54687: EMPTY
54688: LIST
54689: LIST
54690: PUSH
54691: LD_INT 0
54693: PUSH
54694: LD_INT 2
54696: NEG
54697: PUSH
54698: EMPTY
54699: LIST
54700: LIST
54701: PUSH
54702: LD_INT 1
54704: PUSH
54705: LD_INT 1
54707: NEG
54708: PUSH
54709: EMPTY
54710: LIST
54711: LIST
54712: PUSH
54713: LD_INT 2
54715: PUSH
54716: LD_INT 0
54718: PUSH
54719: EMPTY
54720: LIST
54721: LIST
54722: PUSH
54723: LD_INT 2
54725: PUSH
54726: LD_INT 1
54728: PUSH
54729: EMPTY
54730: LIST
54731: LIST
54732: PUSH
54733: LD_INT 2
54735: PUSH
54736: LD_INT 2
54738: PUSH
54739: EMPTY
54740: LIST
54741: LIST
54742: PUSH
54743: LD_INT 1
54745: PUSH
54746: LD_INT 2
54748: PUSH
54749: EMPTY
54750: LIST
54751: LIST
54752: PUSH
54753: LD_INT 0
54755: PUSH
54756: LD_INT 2
54758: PUSH
54759: EMPTY
54760: LIST
54761: LIST
54762: PUSH
54763: LD_INT 1
54765: NEG
54766: PUSH
54767: LD_INT 1
54769: PUSH
54770: EMPTY
54771: LIST
54772: LIST
54773: PUSH
54774: LD_INT 2
54776: NEG
54777: PUSH
54778: LD_INT 0
54780: PUSH
54781: EMPTY
54782: LIST
54783: LIST
54784: PUSH
54785: LD_INT 2
54787: NEG
54788: PUSH
54789: LD_INT 1
54791: NEG
54792: PUSH
54793: EMPTY
54794: LIST
54795: LIST
54796: PUSH
54797: LD_INT 2
54799: NEG
54800: PUSH
54801: LD_INT 2
54803: NEG
54804: PUSH
54805: EMPTY
54806: LIST
54807: LIST
54808: PUSH
54809: EMPTY
54810: LIST
54811: LIST
54812: LIST
54813: LIST
54814: LIST
54815: LIST
54816: LIST
54817: LIST
54818: LIST
54819: LIST
54820: LIST
54821: LIST
54822: LIST
54823: LIST
54824: LIST
54825: LIST
54826: LIST
54827: LIST
54828: LIST
54829: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54830: LD_ADDR_VAR 0 22
54834: PUSH
54835: LD_INT 0
54837: PUSH
54838: LD_INT 0
54840: PUSH
54841: EMPTY
54842: LIST
54843: LIST
54844: PUSH
54845: LD_INT 0
54847: PUSH
54848: LD_INT 1
54850: NEG
54851: PUSH
54852: EMPTY
54853: LIST
54854: LIST
54855: PUSH
54856: LD_INT 1
54858: PUSH
54859: LD_INT 0
54861: PUSH
54862: EMPTY
54863: LIST
54864: LIST
54865: PUSH
54866: LD_INT 1
54868: PUSH
54869: LD_INT 1
54871: PUSH
54872: EMPTY
54873: LIST
54874: LIST
54875: PUSH
54876: LD_INT 0
54878: PUSH
54879: LD_INT 1
54881: PUSH
54882: EMPTY
54883: LIST
54884: LIST
54885: PUSH
54886: LD_INT 1
54888: NEG
54889: PUSH
54890: LD_INT 0
54892: PUSH
54893: EMPTY
54894: LIST
54895: LIST
54896: PUSH
54897: LD_INT 1
54899: NEG
54900: PUSH
54901: LD_INT 1
54903: NEG
54904: PUSH
54905: EMPTY
54906: LIST
54907: LIST
54908: PUSH
54909: LD_INT 1
54911: NEG
54912: PUSH
54913: LD_INT 2
54915: NEG
54916: PUSH
54917: EMPTY
54918: LIST
54919: LIST
54920: PUSH
54921: LD_INT 0
54923: PUSH
54924: LD_INT 2
54926: NEG
54927: PUSH
54928: EMPTY
54929: LIST
54930: LIST
54931: PUSH
54932: LD_INT 1
54934: PUSH
54935: LD_INT 1
54937: NEG
54938: PUSH
54939: EMPTY
54940: LIST
54941: LIST
54942: PUSH
54943: LD_INT 2
54945: PUSH
54946: LD_INT 0
54948: PUSH
54949: EMPTY
54950: LIST
54951: LIST
54952: PUSH
54953: LD_INT 2
54955: PUSH
54956: LD_INT 1
54958: PUSH
54959: EMPTY
54960: LIST
54961: LIST
54962: PUSH
54963: LD_INT 2
54965: PUSH
54966: LD_INT 2
54968: PUSH
54969: EMPTY
54970: LIST
54971: LIST
54972: PUSH
54973: LD_INT 1
54975: PUSH
54976: LD_INT 2
54978: PUSH
54979: EMPTY
54980: LIST
54981: LIST
54982: PUSH
54983: LD_INT 0
54985: PUSH
54986: LD_INT 2
54988: PUSH
54989: EMPTY
54990: LIST
54991: LIST
54992: PUSH
54993: LD_INT 1
54995: NEG
54996: PUSH
54997: LD_INT 1
54999: PUSH
55000: EMPTY
55001: LIST
55002: LIST
55003: PUSH
55004: LD_INT 2
55006: NEG
55007: PUSH
55008: LD_INT 0
55010: PUSH
55011: EMPTY
55012: LIST
55013: LIST
55014: PUSH
55015: LD_INT 2
55017: NEG
55018: PUSH
55019: LD_INT 1
55021: NEG
55022: PUSH
55023: EMPTY
55024: LIST
55025: LIST
55026: PUSH
55027: LD_INT 2
55029: NEG
55030: PUSH
55031: LD_INT 2
55033: NEG
55034: PUSH
55035: EMPTY
55036: LIST
55037: LIST
55038: PUSH
55039: EMPTY
55040: LIST
55041: LIST
55042: LIST
55043: LIST
55044: LIST
55045: LIST
55046: LIST
55047: LIST
55048: LIST
55049: LIST
55050: LIST
55051: LIST
55052: LIST
55053: LIST
55054: LIST
55055: LIST
55056: LIST
55057: LIST
55058: LIST
55059: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
55060: LD_ADDR_VAR 0 23
55064: PUSH
55065: LD_INT 0
55067: PUSH
55068: LD_INT 0
55070: PUSH
55071: EMPTY
55072: LIST
55073: LIST
55074: PUSH
55075: LD_INT 0
55077: PUSH
55078: LD_INT 1
55080: NEG
55081: PUSH
55082: EMPTY
55083: LIST
55084: LIST
55085: PUSH
55086: LD_INT 1
55088: PUSH
55089: LD_INT 0
55091: PUSH
55092: EMPTY
55093: LIST
55094: LIST
55095: PUSH
55096: LD_INT 1
55098: PUSH
55099: LD_INT 1
55101: PUSH
55102: EMPTY
55103: LIST
55104: LIST
55105: PUSH
55106: LD_INT 0
55108: PUSH
55109: LD_INT 1
55111: PUSH
55112: EMPTY
55113: LIST
55114: LIST
55115: PUSH
55116: LD_INT 1
55118: NEG
55119: PUSH
55120: LD_INT 0
55122: PUSH
55123: EMPTY
55124: LIST
55125: LIST
55126: PUSH
55127: LD_INT 1
55129: NEG
55130: PUSH
55131: LD_INT 1
55133: NEG
55134: PUSH
55135: EMPTY
55136: LIST
55137: LIST
55138: PUSH
55139: LD_INT 1
55141: NEG
55142: PUSH
55143: LD_INT 2
55145: NEG
55146: PUSH
55147: EMPTY
55148: LIST
55149: LIST
55150: PUSH
55151: LD_INT 0
55153: PUSH
55154: LD_INT 2
55156: NEG
55157: PUSH
55158: EMPTY
55159: LIST
55160: LIST
55161: PUSH
55162: LD_INT 1
55164: PUSH
55165: LD_INT 1
55167: NEG
55168: PUSH
55169: EMPTY
55170: LIST
55171: LIST
55172: PUSH
55173: LD_INT 2
55175: PUSH
55176: LD_INT 0
55178: PUSH
55179: EMPTY
55180: LIST
55181: LIST
55182: PUSH
55183: LD_INT 2
55185: PUSH
55186: LD_INT 1
55188: PUSH
55189: EMPTY
55190: LIST
55191: LIST
55192: PUSH
55193: LD_INT 2
55195: PUSH
55196: LD_INT 2
55198: PUSH
55199: EMPTY
55200: LIST
55201: LIST
55202: PUSH
55203: LD_INT 1
55205: PUSH
55206: LD_INT 2
55208: PUSH
55209: EMPTY
55210: LIST
55211: LIST
55212: PUSH
55213: LD_INT 0
55215: PUSH
55216: LD_INT 2
55218: PUSH
55219: EMPTY
55220: LIST
55221: LIST
55222: PUSH
55223: LD_INT 1
55225: NEG
55226: PUSH
55227: LD_INT 1
55229: PUSH
55230: EMPTY
55231: LIST
55232: LIST
55233: PUSH
55234: LD_INT 2
55236: NEG
55237: PUSH
55238: LD_INT 0
55240: PUSH
55241: EMPTY
55242: LIST
55243: LIST
55244: PUSH
55245: LD_INT 2
55247: NEG
55248: PUSH
55249: LD_INT 1
55251: NEG
55252: PUSH
55253: EMPTY
55254: LIST
55255: LIST
55256: PUSH
55257: LD_INT 2
55259: NEG
55260: PUSH
55261: LD_INT 2
55263: NEG
55264: PUSH
55265: EMPTY
55266: LIST
55267: LIST
55268: PUSH
55269: LD_INT 2
55271: NEG
55272: PUSH
55273: LD_INT 3
55275: NEG
55276: PUSH
55277: EMPTY
55278: LIST
55279: LIST
55280: PUSH
55281: LD_INT 1
55283: NEG
55284: PUSH
55285: LD_INT 3
55287: NEG
55288: PUSH
55289: EMPTY
55290: LIST
55291: LIST
55292: PUSH
55293: LD_INT 1
55295: PUSH
55296: LD_INT 2
55298: NEG
55299: PUSH
55300: EMPTY
55301: LIST
55302: LIST
55303: PUSH
55304: LD_INT 2
55306: PUSH
55307: LD_INT 1
55309: NEG
55310: PUSH
55311: EMPTY
55312: LIST
55313: LIST
55314: PUSH
55315: EMPTY
55316: LIST
55317: LIST
55318: LIST
55319: LIST
55320: LIST
55321: LIST
55322: LIST
55323: LIST
55324: LIST
55325: LIST
55326: LIST
55327: LIST
55328: LIST
55329: LIST
55330: LIST
55331: LIST
55332: LIST
55333: LIST
55334: LIST
55335: LIST
55336: LIST
55337: LIST
55338: LIST
55339: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
55340: LD_ADDR_VAR 0 24
55344: PUSH
55345: LD_INT 0
55347: PUSH
55348: LD_INT 0
55350: PUSH
55351: EMPTY
55352: LIST
55353: LIST
55354: PUSH
55355: LD_INT 0
55357: PUSH
55358: LD_INT 1
55360: NEG
55361: PUSH
55362: EMPTY
55363: LIST
55364: LIST
55365: PUSH
55366: LD_INT 1
55368: PUSH
55369: LD_INT 0
55371: PUSH
55372: EMPTY
55373: LIST
55374: LIST
55375: PUSH
55376: LD_INT 1
55378: PUSH
55379: LD_INT 1
55381: PUSH
55382: EMPTY
55383: LIST
55384: LIST
55385: PUSH
55386: LD_INT 0
55388: PUSH
55389: LD_INT 1
55391: PUSH
55392: EMPTY
55393: LIST
55394: LIST
55395: PUSH
55396: LD_INT 1
55398: NEG
55399: PUSH
55400: LD_INT 0
55402: PUSH
55403: EMPTY
55404: LIST
55405: LIST
55406: PUSH
55407: LD_INT 1
55409: NEG
55410: PUSH
55411: LD_INT 1
55413: NEG
55414: PUSH
55415: EMPTY
55416: LIST
55417: LIST
55418: PUSH
55419: LD_INT 1
55421: NEG
55422: PUSH
55423: LD_INT 2
55425: NEG
55426: PUSH
55427: EMPTY
55428: LIST
55429: LIST
55430: PUSH
55431: LD_INT 0
55433: PUSH
55434: LD_INT 2
55436: NEG
55437: PUSH
55438: EMPTY
55439: LIST
55440: LIST
55441: PUSH
55442: LD_INT 1
55444: PUSH
55445: LD_INT 1
55447: NEG
55448: PUSH
55449: EMPTY
55450: LIST
55451: LIST
55452: PUSH
55453: LD_INT 2
55455: PUSH
55456: LD_INT 0
55458: PUSH
55459: EMPTY
55460: LIST
55461: LIST
55462: PUSH
55463: LD_INT 2
55465: PUSH
55466: LD_INT 1
55468: PUSH
55469: EMPTY
55470: LIST
55471: LIST
55472: PUSH
55473: LD_INT 2
55475: PUSH
55476: LD_INT 2
55478: PUSH
55479: EMPTY
55480: LIST
55481: LIST
55482: PUSH
55483: LD_INT 1
55485: PUSH
55486: LD_INT 2
55488: PUSH
55489: EMPTY
55490: LIST
55491: LIST
55492: PUSH
55493: LD_INT 0
55495: PUSH
55496: LD_INT 2
55498: PUSH
55499: EMPTY
55500: LIST
55501: LIST
55502: PUSH
55503: LD_INT 1
55505: NEG
55506: PUSH
55507: LD_INT 1
55509: PUSH
55510: EMPTY
55511: LIST
55512: LIST
55513: PUSH
55514: LD_INT 2
55516: NEG
55517: PUSH
55518: LD_INT 0
55520: PUSH
55521: EMPTY
55522: LIST
55523: LIST
55524: PUSH
55525: LD_INT 2
55527: NEG
55528: PUSH
55529: LD_INT 1
55531: NEG
55532: PUSH
55533: EMPTY
55534: LIST
55535: LIST
55536: PUSH
55537: LD_INT 2
55539: NEG
55540: PUSH
55541: LD_INT 2
55543: NEG
55544: PUSH
55545: EMPTY
55546: LIST
55547: LIST
55548: PUSH
55549: LD_INT 1
55551: PUSH
55552: LD_INT 2
55554: NEG
55555: PUSH
55556: EMPTY
55557: LIST
55558: LIST
55559: PUSH
55560: LD_INT 2
55562: PUSH
55563: LD_INT 1
55565: NEG
55566: PUSH
55567: EMPTY
55568: LIST
55569: LIST
55570: PUSH
55571: LD_INT 3
55573: PUSH
55574: LD_INT 1
55576: PUSH
55577: EMPTY
55578: LIST
55579: LIST
55580: PUSH
55581: LD_INT 3
55583: PUSH
55584: LD_INT 2
55586: PUSH
55587: EMPTY
55588: LIST
55589: LIST
55590: PUSH
55591: EMPTY
55592: LIST
55593: LIST
55594: LIST
55595: LIST
55596: LIST
55597: LIST
55598: LIST
55599: LIST
55600: LIST
55601: LIST
55602: LIST
55603: LIST
55604: LIST
55605: LIST
55606: LIST
55607: LIST
55608: LIST
55609: LIST
55610: LIST
55611: LIST
55612: LIST
55613: LIST
55614: LIST
55615: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
55616: LD_ADDR_VAR 0 25
55620: PUSH
55621: LD_INT 0
55623: PUSH
55624: LD_INT 0
55626: PUSH
55627: EMPTY
55628: LIST
55629: LIST
55630: PUSH
55631: LD_INT 0
55633: PUSH
55634: LD_INT 1
55636: NEG
55637: PUSH
55638: EMPTY
55639: LIST
55640: LIST
55641: PUSH
55642: LD_INT 1
55644: PUSH
55645: LD_INT 0
55647: PUSH
55648: EMPTY
55649: LIST
55650: LIST
55651: PUSH
55652: LD_INT 1
55654: PUSH
55655: LD_INT 1
55657: PUSH
55658: EMPTY
55659: LIST
55660: LIST
55661: PUSH
55662: LD_INT 0
55664: PUSH
55665: LD_INT 1
55667: PUSH
55668: EMPTY
55669: LIST
55670: LIST
55671: PUSH
55672: LD_INT 1
55674: NEG
55675: PUSH
55676: LD_INT 0
55678: PUSH
55679: EMPTY
55680: LIST
55681: LIST
55682: PUSH
55683: LD_INT 1
55685: NEG
55686: PUSH
55687: LD_INT 1
55689: NEG
55690: PUSH
55691: EMPTY
55692: LIST
55693: LIST
55694: PUSH
55695: LD_INT 1
55697: NEG
55698: PUSH
55699: LD_INT 2
55701: NEG
55702: PUSH
55703: EMPTY
55704: LIST
55705: LIST
55706: PUSH
55707: LD_INT 0
55709: PUSH
55710: LD_INT 2
55712: NEG
55713: PUSH
55714: EMPTY
55715: LIST
55716: LIST
55717: PUSH
55718: LD_INT 1
55720: PUSH
55721: LD_INT 1
55723: NEG
55724: PUSH
55725: EMPTY
55726: LIST
55727: LIST
55728: PUSH
55729: LD_INT 2
55731: PUSH
55732: LD_INT 0
55734: PUSH
55735: EMPTY
55736: LIST
55737: LIST
55738: PUSH
55739: LD_INT 2
55741: PUSH
55742: LD_INT 1
55744: PUSH
55745: EMPTY
55746: LIST
55747: LIST
55748: PUSH
55749: LD_INT 2
55751: PUSH
55752: LD_INT 2
55754: PUSH
55755: EMPTY
55756: LIST
55757: LIST
55758: PUSH
55759: LD_INT 1
55761: PUSH
55762: LD_INT 2
55764: PUSH
55765: EMPTY
55766: LIST
55767: LIST
55768: PUSH
55769: LD_INT 0
55771: PUSH
55772: LD_INT 2
55774: PUSH
55775: EMPTY
55776: LIST
55777: LIST
55778: PUSH
55779: LD_INT 1
55781: NEG
55782: PUSH
55783: LD_INT 1
55785: PUSH
55786: EMPTY
55787: LIST
55788: LIST
55789: PUSH
55790: LD_INT 2
55792: NEG
55793: PUSH
55794: LD_INT 0
55796: PUSH
55797: EMPTY
55798: LIST
55799: LIST
55800: PUSH
55801: LD_INT 2
55803: NEG
55804: PUSH
55805: LD_INT 1
55807: NEG
55808: PUSH
55809: EMPTY
55810: LIST
55811: LIST
55812: PUSH
55813: LD_INT 2
55815: NEG
55816: PUSH
55817: LD_INT 2
55819: NEG
55820: PUSH
55821: EMPTY
55822: LIST
55823: LIST
55824: PUSH
55825: LD_INT 3
55827: PUSH
55828: LD_INT 1
55830: PUSH
55831: EMPTY
55832: LIST
55833: LIST
55834: PUSH
55835: LD_INT 3
55837: PUSH
55838: LD_INT 2
55840: PUSH
55841: EMPTY
55842: LIST
55843: LIST
55844: PUSH
55845: LD_INT 2
55847: PUSH
55848: LD_INT 3
55850: PUSH
55851: EMPTY
55852: LIST
55853: LIST
55854: PUSH
55855: LD_INT 1
55857: PUSH
55858: LD_INT 3
55860: PUSH
55861: EMPTY
55862: LIST
55863: LIST
55864: PUSH
55865: EMPTY
55866: LIST
55867: LIST
55868: LIST
55869: LIST
55870: LIST
55871: LIST
55872: LIST
55873: LIST
55874: LIST
55875: LIST
55876: LIST
55877: LIST
55878: LIST
55879: LIST
55880: LIST
55881: LIST
55882: LIST
55883: LIST
55884: LIST
55885: LIST
55886: LIST
55887: LIST
55888: LIST
55889: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
55890: LD_ADDR_VAR 0 26
55894: PUSH
55895: LD_INT 0
55897: PUSH
55898: LD_INT 0
55900: PUSH
55901: EMPTY
55902: LIST
55903: LIST
55904: PUSH
55905: LD_INT 0
55907: PUSH
55908: LD_INT 1
55910: NEG
55911: PUSH
55912: EMPTY
55913: LIST
55914: LIST
55915: PUSH
55916: LD_INT 1
55918: PUSH
55919: LD_INT 0
55921: PUSH
55922: EMPTY
55923: LIST
55924: LIST
55925: PUSH
55926: LD_INT 1
55928: PUSH
55929: LD_INT 1
55931: PUSH
55932: EMPTY
55933: LIST
55934: LIST
55935: PUSH
55936: LD_INT 0
55938: PUSH
55939: LD_INT 1
55941: PUSH
55942: EMPTY
55943: LIST
55944: LIST
55945: PUSH
55946: LD_INT 1
55948: NEG
55949: PUSH
55950: LD_INT 0
55952: PUSH
55953: EMPTY
55954: LIST
55955: LIST
55956: PUSH
55957: LD_INT 1
55959: NEG
55960: PUSH
55961: LD_INT 1
55963: NEG
55964: PUSH
55965: EMPTY
55966: LIST
55967: LIST
55968: PUSH
55969: LD_INT 1
55971: NEG
55972: PUSH
55973: LD_INT 2
55975: NEG
55976: PUSH
55977: EMPTY
55978: LIST
55979: LIST
55980: PUSH
55981: LD_INT 0
55983: PUSH
55984: LD_INT 2
55986: NEG
55987: PUSH
55988: EMPTY
55989: LIST
55990: LIST
55991: PUSH
55992: LD_INT 1
55994: PUSH
55995: LD_INT 1
55997: NEG
55998: PUSH
55999: EMPTY
56000: LIST
56001: LIST
56002: PUSH
56003: LD_INT 2
56005: PUSH
56006: LD_INT 0
56008: PUSH
56009: EMPTY
56010: LIST
56011: LIST
56012: PUSH
56013: LD_INT 2
56015: PUSH
56016: LD_INT 1
56018: PUSH
56019: EMPTY
56020: LIST
56021: LIST
56022: PUSH
56023: LD_INT 2
56025: PUSH
56026: LD_INT 2
56028: PUSH
56029: EMPTY
56030: LIST
56031: LIST
56032: PUSH
56033: LD_INT 1
56035: PUSH
56036: LD_INT 2
56038: PUSH
56039: EMPTY
56040: LIST
56041: LIST
56042: PUSH
56043: LD_INT 0
56045: PUSH
56046: LD_INT 2
56048: PUSH
56049: EMPTY
56050: LIST
56051: LIST
56052: PUSH
56053: LD_INT 1
56055: NEG
56056: PUSH
56057: LD_INT 1
56059: PUSH
56060: EMPTY
56061: LIST
56062: LIST
56063: PUSH
56064: LD_INT 2
56066: NEG
56067: PUSH
56068: LD_INT 0
56070: PUSH
56071: EMPTY
56072: LIST
56073: LIST
56074: PUSH
56075: LD_INT 2
56077: NEG
56078: PUSH
56079: LD_INT 1
56081: NEG
56082: PUSH
56083: EMPTY
56084: LIST
56085: LIST
56086: PUSH
56087: LD_INT 2
56089: NEG
56090: PUSH
56091: LD_INT 2
56093: NEG
56094: PUSH
56095: EMPTY
56096: LIST
56097: LIST
56098: PUSH
56099: LD_INT 2
56101: PUSH
56102: LD_INT 3
56104: PUSH
56105: EMPTY
56106: LIST
56107: LIST
56108: PUSH
56109: LD_INT 1
56111: PUSH
56112: LD_INT 3
56114: PUSH
56115: EMPTY
56116: LIST
56117: LIST
56118: PUSH
56119: LD_INT 1
56121: NEG
56122: PUSH
56123: LD_INT 2
56125: PUSH
56126: EMPTY
56127: LIST
56128: LIST
56129: PUSH
56130: LD_INT 2
56132: NEG
56133: PUSH
56134: LD_INT 1
56136: PUSH
56137: EMPTY
56138: LIST
56139: LIST
56140: PUSH
56141: EMPTY
56142: LIST
56143: LIST
56144: LIST
56145: LIST
56146: LIST
56147: LIST
56148: LIST
56149: LIST
56150: LIST
56151: LIST
56152: LIST
56153: LIST
56154: LIST
56155: LIST
56156: LIST
56157: LIST
56158: LIST
56159: LIST
56160: LIST
56161: LIST
56162: LIST
56163: LIST
56164: LIST
56165: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56166: LD_ADDR_VAR 0 27
56170: PUSH
56171: LD_INT 0
56173: PUSH
56174: LD_INT 0
56176: PUSH
56177: EMPTY
56178: LIST
56179: LIST
56180: PUSH
56181: LD_INT 0
56183: PUSH
56184: LD_INT 1
56186: NEG
56187: PUSH
56188: EMPTY
56189: LIST
56190: LIST
56191: PUSH
56192: LD_INT 1
56194: PUSH
56195: LD_INT 0
56197: PUSH
56198: EMPTY
56199: LIST
56200: LIST
56201: PUSH
56202: LD_INT 1
56204: PUSH
56205: LD_INT 1
56207: PUSH
56208: EMPTY
56209: LIST
56210: LIST
56211: PUSH
56212: LD_INT 0
56214: PUSH
56215: LD_INT 1
56217: PUSH
56218: EMPTY
56219: LIST
56220: LIST
56221: PUSH
56222: LD_INT 1
56224: NEG
56225: PUSH
56226: LD_INT 0
56228: PUSH
56229: EMPTY
56230: LIST
56231: LIST
56232: PUSH
56233: LD_INT 1
56235: NEG
56236: PUSH
56237: LD_INT 1
56239: NEG
56240: PUSH
56241: EMPTY
56242: LIST
56243: LIST
56244: PUSH
56245: LD_INT 1
56247: NEG
56248: PUSH
56249: LD_INT 2
56251: NEG
56252: PUSH
56253: EMPTY
56254: LIST
56255: LIST
56256: PUSH
56257: LD_INT 0
56259: PUSH
56260: LD_INT 2
56262: NEG
56263: PUSH
56264: EMPTY
56265: LIST
56266: LIST
56267: PUSH
56268: LD_INT 1
56270: PUSH
56271: LD_INT 1
56273: NEG
56274: PUSH
56275: EMPTY
56276: LIST
56277: LIST
56278: PUSH
56279: LD_INT 2
56281: PUSH
56282: LD_INT 0
56284: PUSH
56285: EMPTY
56286: LIST
56287: LIST
56288: PUSH
56289: LD_INT 2
56291: PUSH
56292: LD_INT 1
56294: PUSH
56295: EMPTY
56296: LIST
56297: LIST
56298: PUSH
56299: LD_INT 2
56301: PUSH
56302: LD_INT 2
56304: PUSH
56305: EMPTY
56306: LIST
56307: LIST
56308: PUSH
56309: LD_INT 1
56311: PUSH
56312: LD_INT 2
56314: PUSH
56315: EMPTY
56316: LIST
56317: LIST
56318: PUSH
56319: LD_INT 0
56321: PUSH
56322: LD_INT 2
56324: PUSH
56325: EMPTY
56326: LIST
56327: LIST
56328: PUSH
56329: LD_INT 1
56331: NEG
56332: PUSH
56333: LD_INT 1
56335: PUSH
56336: EMPTY
56337: LIST
56338: LIST
56339: PUSH
56340: LD_INT 2
56342: NEG
56343: PUSH
56344: LD_INT 0
56346: PUSH
56347: EMPTY
56348: LIST
56349: LIST
56350: PUSH
56351: LD_INT 2
56353: NEG
56354: PUSH
56355: LD_INT 1
56357: NEG
56358: PUSH
56359: EMPTY
56360: LIST
56361: LIST
56362: PUSH
56363: LD_INT 2
56365: NEG
56366: PUSH
56367: LD_INT 2
56369: NEG
56370: PUSH
56371: EMPTY
56372: LIST
56373: LIST
56374: PUSH
56375: LD_INT 1
56377: NEG
56378: PUSH
56379: LD_INT 2
56381: PUSH
56382: EMPTY
56383: LIST
56384: LIST
56385: PUSH
56386: LD_INT 2
56388: NEG
56389: PUSH
56390: LD_INT 1
56392: PUSH
56393: EMPTY
56394: LIST
56395: LIST
56396: PUSH
56397: LD_INT 3
56399: NEG
56400: PUSH
56401: LD_INT 1
56403: NEG
56404: PUSH
56405: EMPTY
56406: LIST
56407: LIST
56408: PUSH
56409: LD_INT 3
56411: NEG
56412: PUSH
56413: LD_INT 2
56415: NEG
56416: PUSH
56417: EMPTY
56418: LIST
56419: LIST
56420: PUSH
56421: EMPTY
56422: LIST
56423: LIST
56424: LIST
56425: LIST
56426: LIST
56427: LIST
56428: LIST
56429: LIST
56430: LIST
56431: LIST
56432: LIST
56433: LIST
56434: LIST
56435: LIST
56436: LIST
56437: LIST
56438: LIST
56439: LIST
56440: LIST
56441: LIST
56442: LIST
56443: LIST
56444: LIST
56445: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56446: LD_ADDR_VAR 0 28
56450: PUSH
56451: LD_INT 0
56453: PUSH
56454: LD_INT 0
56456: PUSH
56457: EMPTY
56458: LIST
56459: LIST
56460: PUSH
56461: LD_INT 0
56463: PUSH
56464: LD_INT 1
56466: NEG
56467: PUSH
56468: EMPTY
56469: LIST
56470: LIST
56471: PUSH
56472: LD_INT 1
56474: PUSH
56475: LD_INT 0
56477: PUSH
56478: EMPTY
56479: LIST
56480: LIST
56481: PUSH
56482: LD_INT 1
56484: PUSH
56485: LD_INT 1
56487: PUSH
56488: EMPTY
56489: LIST
56490: LIST
56491: PUSH
56492: LD_INT 0
56494: PUSH
56495: LD_INT 1
56497: PUSH
56498: EMPTY
56499: LIST
56500: LIST
56501: PUSH
56502: LD_INT 1
56504: NEG
56505: PUSH
56506: LD_INT 0
56508: PUSH
56509: EMPTY
56510: LIST
56511: LIST
56512: PUSH
56513: LD_INT 1
56515: NEG
56516: PUSH
56517: LD_INT 1
56519: NEG
56520: PUSH
56521: EMPTY
56522: LIST
56523: LIST
56524: PUSH
56525: LD_INT 1
56527: NEG
56528: PUSH
56529: LD_INT 2
56531: NEG
56532: PUSH
56533: EMPTY
56534: LIST
56535: LIST
56536: PUSH
56537: LD_INT 0
56539: PUSH
56540: LD_INT 2
56542: NEG
56543: PUSH
56544: EMPTY
56545: LIST
56546: LIST
56547: PUSH
56548: LD_INT 1
56550: PUSH
56551: LD_INT 1
56553: NEG
56554: PUSH
56555: EMPTY
56556: LIST
56557: LIST
56558: PUSH
56559: LD_INT 2
56561: PUSH
56562: LD_INT 0
56564: PUSH
56565: EMPTY
56566: LIST
56567: LIST
56568: PUSH
56569: LD_INT 2
56571: PUSH
56572: LD_INT 1
56574: PUSH
56575: EMPTY
56576: LIST
56577: LIST
56578: PUSH
56579: LD_INT 2
56581: PUSH
56582: LD_INT 2
56584: PUSH
56585: EMPTY
56586: LIST
56587: LIST
56588: PUSH
56589: LD_INT 1
56591: PUSH
56592: LD_INT 2
56594: PUSH
56595: EMPTY
56596: LIST
56597: LIST
56598: PUSH
56599: LD_INT 0
56601: PUSH
56602: LD_INT 2
56604: PUSH
56605: EMPTY
56606: LIST
56607: LIST
56608: PUSH
56609: LD_INT 1
56611: NEG
56612: PUSH
56613: LD_INT 1
56615: PUSH
56616: EMPTY
56617: LIST
56618: LIST
56619: PUSH
56620: LD_INT 2
56622: NEG
56623: PUSH
56624: LD_INT 0
56626: PUSH
56627: EMPTY
56628: LIST
56629: LIST
56630: PUSH
56631: LD_INT 2
56633: NEG
56634: PUSH
56635: LD_INT 1
56637: NEG
56638: PUSH
56639: EMPTY
56640: LIST
56641: LIST
56642: PUSH
56643: LD_INT 2
56645: NEG
56646: PUSH
56647: LD_INT 2
56649: NEG
56650: PUSH
56651: EMPTY
56652: LIST
56653: LIST
56654: PUSH
56655: LD_INT 2
56657: NEG
56658: PUSH
56659: LD_INT 3
56661: NEG
56662: PUSH
56663: EMPTY
56664: LIST
56665: LIST
56666: PUSH
56667: LD_INT 1
56669: NEG
56670: PUSH
56671: LD_INT 3
56673: NEG
56674: PUSH
56675: EMPTY
56676: LIST
56677: LIST
56678: PUSH
56679: LD_INT 3
56681: NEG
56682: PUSH
56683: LD_INT 1
56685: NEG
56686: PUSH
56687: EMPTY
56688: LIST
56689: LIST
56690: PUSH
56691: LD_INT 3
56693: NEG
56694: PUSH
56695: LD_INT 2
56697: NEG
56698: PUSH
56699: EMPTY
56700: LIST
56701: LIST
56702: PUSH
56703: EMPTY
56704: LIST
56705: LIST
56706: LIST
56707: LIST
56708: LIST
56709: LIST
56710: LIST
56711: LIST
56712: LIST
56713: LIST
56714: LIST
56715: LIST
56716: LIST
56717: LIST
56718: LIST
56719: LIST
56720: LIST
56721: LIST
56722: LIST
56723: LIST
56724: LIST
56725: LIST
56726: LIST
56727: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
56728: LD_ADDR_VAR 0 29
56732: PUSH
56733: LD_INT 0
56735: PUSH
56736: LD_INT 0
56738: PUSH
56739: EMPTY
56740: LIST
56741: LIST
56742: PUSH
56743: LD_INT 0
56745: PUSH
56746: LD_INT 1
56748: NEG
56749: PUSH
56750: EMPTY
56751: LIST
56752: LIST
56753: PUSH
56754: LD_INT 1
56756: PUSH
56757: LD_INT 0
56759: PUSH
56760: EMPTY
56761: LIST
56762: LIST
56763: PUSH
56764: LD_INT 1
56766: PUSH
56767: LD_INT 1
56769: PUSH
56770: EMPTY
56771: LIST
56772: LIST
56773: PUSH
56774: LD_INT 0
56776: PUSH
56777: LD_INT 1
56779: PUSH
56780: EMPTY
56781: LIST
56782: LIST
56783: PUSH
56784: LD_INT 1
56786: NEG
56787: PUSH
56788: LD_INT 0
56790: PUSH
56791: EMPTY
56792: LIST
56793: LIST
56794: PUSH
56795: LD_INT 1
56797: NEG
56798: PUSH
56799: LD_INT 1
56801: NEG
56802: PUSH
56803: EMPTY
56804: LIST
56805: LIST
56806: PUSH
56807: LD_INT 1
56809: NEG
56810: PUSH
56811: LD_INT 2
56813: NEG
56814: PUSH
56815: EMPTY
56816: LIST
56817: LIST
56818: PUSH
56819: LD_INT 0
56821: PUSH
56822: LD_INT 2
56824: NEG
56825: PUSH
56826: EMPTY
56827: LIST
56828: LIST
56829: PUSH
56830: LD_INT 1
56832: PUSH
56833: LD_INT 1
56835: NEG
56836: PUSH
56837: EMPTY
56838: LIST
56839: LIST
56840: PUSH
56841: LD_INT 2
56843: PUSH
56844: LD_INT 0
56846: PUSH
56847: EMPTY
56848: LIST
56849: LIST
56850: PUSH
56851: LD_INT 2
56853: PUSH
56854: LD_INT 1
56856: PUSH
56857: EMPTY
56858: LIST
56859: LIST
56860: PUSH
56861: LD_INT 1
56863: PUSH
56864: LD_INT 2
56866: PUSH
56867: EMPTY
56868: LIST
56869: LIST
56870: PUSH
56871: LD_INT 0
56873: PUSH
56874: LD_INT 2
56876: PUSH
56877: EMPTY
56878: LIST
56879: LIST
56880: PUSH
56881: LD_INT 1
56883: NEG
56884: PUSH
56885: LD_INT 1
56887: PUSH
56888: EMPTY
56889: LIST
56890: LIST
56891: PUSH
56892: LD_INT 2
56894: NEG
56895: PUSH
56896: LD_INT 1
56898: NEG
56899: PUSH
56900: EMPTY
56901: LIST
56902: LIST
56903: PUSH
56904: LD_INT 2
56906: NEG
56907: PUSH
56908: LD_INT 2
56910: NEG
56911: PUSH
56912: EMPTY
56913: LIST
56914: LIST
56915: PUSH
56916: LD_INT 2
56918: NEG
56919: PUSH
56920: LD_INT 3
56922: NEG
56923: PUSH
56924: EMPTY
56925: LIST
56926: LIST
56927: PUSH
56928: LD_INT 2
56930: PUSH
56931: LD_INT 1
56933: NEG
56934: PUSH
56935: EMPTY
56936: LIST
56937: LIST
56938: PUSH
56939: LD_INT 3
56941: PUSH
56942: LD_INT 1
56944: PUSH
56945: EMPTY
56946: LIST
56947: LIST
56948: PUSH
56949: LD_INT 1
56951: PUSH
56952: LD_INT 3
56954: PUSH
56955: EMPTY
56956: LIST
56957: LIST
56958: PUSH
56959: LD_INT 1
56961: NEG
56962: PUSH
56963: LD_INT 2
56965: PUSH
56966: EMPTY
56967: LIST
56968: LIST
56969: PUSH
56970: LD_INT 3
56972: NEG
56973: PUSH
56974: LD_INT 2
56976: NEG
56977: PUSH
56978: EMPTY
56979: LIST
56980: LIST
56981: PUSH
56982: EMPTY
56983: LIST
56984: LIST
56985: LIST
56986: LIST
56987: LIST
56988: LIST
56989: LIST
56990: LIST
56991: LIST
56992: LIST
56993: LIST
56994: LIST
56995: LIST
56996: LIST
56997: LIST
56998: LIST
56999: LIST
57000: LIST
57001: LIST
57002: LIST
57003: LIST
57004: LIST
57005: LIST
57006: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57007: LD_ADDR_VAR 0 30
57011: PUSH
57012: LD_INT 0
57014: PUSH
57015: LD_INT 0
57017: PUSH
57018: EMPTY
57019: LIST
57020: LIST
57021: PUSH
57022: LD_INT 0
57024: PUSH
57025: LD_INT 1
57027: NEG
57028: PUSH
57029: EMPTY
57030: LIST
57031: LIST
57032: PUSH
57033: LD_INT 1
57035: PUSH
57036: LD_INT 0
57038: PUSH
57039: EMPTY
57040: LIST
57041: LIST
57042: PUSH
57043: LD_INT 1
57045: PUSH
57046: LD_INT 1
57048: PUSH
57049: EMPTY
57050: LIST
57051: LIST
57052: PUSH
57053: LD_INT 0
57055: PUSH
57056: LD_INT 1
57058: PUSH
57059: EMPTY
57060: LIST
57061: LIST
57062: PUSH
57063: LD_INT 1
57065: NEG
57066: PUSH
57067: LD_INT 0
57069: PUSH
57070: EMPTY
57071: LIST
57072: LIST
57073: PUSH
57074: LD_INT 1
57076: NEG
57077: PUSH
57078: LD_INT 1
57080: NEG
57081: PUSH
57082: EMPTY
57083: LIST
57084: LIST
57085: PUSH
57086: LD_INT 1
57088: NEG
57089: PUSH
57090: LD_INT 2
57092: NEG
57093: PUSH
57094: EMPTY
57095: LIST
57096: LIST
57097: PUSH
57098: LD_INT 0
57100: PUSH
57101: LD_INT 2
57103: NEG
57104: PUSH
57105: EMPTY
57106: LIST
57107: LIST
57108: PUSH
57109: LD_INT 1
57111: PUSH
57112: LD_INT 1
57114: NEG
57115: PUSH
57116: EMPTY
57117: LIST
57118: LIST
57119: PUSH
57120: LD_INT 2
57122: PUSH
57123: LD_INT 0
57125: PUSH
57126: EMPTY
57127: LIST
57128: LIST
57129: PUSH
57130: LD_INT 2
57132: PUSH
57133: LD_INT 1
57135: PUSH
57136: EMPTY
57137: LIST
57138: LIST
57139: PUSH
57140: LD_INT 2
57142: PUSH
57143: LD_INT 2
57145: PUSH
57146: EMPTY
57147: LIST
57148: LIST
57149: PUSH
57150: LD_INT 1
57152: PUSH
57153: LD_INT 2
57155: PUSH
57156: EMPTY
57157: LIST
57158: LIST
57159: PUSH
57160: LD_INT 1
57162: NEG
57163: PUSH
57164: LD_INT 1
57166: PUSH
57167: EMPTY
57168: LIST
57169: LIST
57170: PUSH
57171: LD_INT 2
57173: NEG
57174: PUSH
57175: LD_INT 0
57177: PUSH
57178: EMPTY
57179: LIST
57180: LIST
57181: PUSH
57182: LD_INT 2
57184: NEG
57185: PUSH
57186: LD_INT 1
57188: NEG
57189: PUSH
57190: EMPTY
57191: LIST
57192: LIST
57193: PUSH
57194: LD_INT 1
57196: NEG
57197: PUSH
57198: LD_INT 3
57200: NEG
57201: PUSH
57202: EMPTY
57203: LIST
57204: LIST
57205: PUSH
57206: LD_INT 1
57208: PUSH
57209: LD_INT 2
57211: NEG
57212: PUSH
57213: EMPTY
57214: LIST
57215: LIST
57216: PUSH
57217: LD_INT 3
57219: PUSH
57220: LD_INT 2
57222: PUSH
57223: EMPTY
57224: LIST
57225: LIST
57226: PUSH
57227: LD_INT 2
57229: PUSH
57230: LD_INT 3
57232: PUSH
57233: EMPTY
57234: LIST
57235: LIST
57236: PUSH
57237: LD_INT 2
57239: NEG
57240: PUSH
57241: LD_INT 1
57243: PUSH
57244: EMPTY
57245: LIST
57246: LIST
57247: PUSH
57248: LD_INT 3
57250: NEG
57251: PUSH
57252: LD_INT 1
57254: NEG
57255: PUSH
57256: EMPTY
57257: LIST
57258: LIST
57259: PUSH
57260: EMPTY
57261: LIST
57262: LIST
57263: LIST
57264: LIST
57265: LIST
57266: LIST
57267: LIST
57268: LIST
57269: LIST
57270: LIST
57271: LIST
57272: LIST
57273: LIST
57274: LIST
57275: LIST
57276: LIST
57277: LIST
57278: LIST
57279: LIST
57280: LIST
57281: LIST
57282: LIST
57283: LIST
57284: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57285: LD_ADDR_VAR 0 31
57289: PUSH
57290: LD_INT 0
57292: PUSH
57293: LD_INT 0
57295: PUSH
57296: EMPTY
57297: LIST
57298: LIST
57299: PUSH
57300: LD_INT 0
57302: PUSH
57303: LD_INT 1
57305: NEG
57306: PUSH
57307: EMPTY
57308: LIST
57309: LIST
57310: PUSH
57311: LD_INT 1
57313: PUSH
57314: LD_INT 0
57316: PUSH
57317: EMPTY
57318: LIST
57319: LIST
57320: PUSH
57321: LD_INT 1
57323: PUSH
57324: LD_INT 1
57326: PUSH
57327: EMPTY
57328: LIST
57329: LIST
57330: PUSH
57331: LD_INT 0
57333: PUSH
57334: LD_INT 1
57336: PUSH
57337: EMPTY
57338: LIST
57339: LIST
57340: PUSH
57341: LD_INT 1
57343: NEG
57344: PUSH
57345: LD_INT 0
57347: PUSH
57348: EMPTY
57349: LIST
57350: LIST
57351: PUSH
57352: LD_INT 1
57354: NEG
57355: PUSH
57356: LD_INT 1
57358: NEG
57359: PUSH
57360: EMPTY
57361: LIST
57362: LIST
57363: PUSH
57364: LD_INT 1
57366: NEG
57367: PUSH
57368: LD_INT 2
57370: NEG
57371: PUSH
57372: EMPTY
57373: LIST
57374: LIST
57375: PUSH
57376: LD_INT 1
57378: PUSH
57379: LD_INT 1
57381: NEG
57382: PUSH
57383: EMPTY
57384: LIST
57385: LIST
57386: PUSH
57387: LD_INT 2
57389: PUSH
57390: LD_INT 0
57392: PUSH
57393: EMPTY
57394: LIST
57395: LIST
57396: PUSH
57397: LD_INT 2
57399: PUSH
57400: LD_INT 1
57402: PUSH
57403: EMPTY
57404: LIST
57405: LIST
57406: PUSH
57407: LD_INT 2
57409: PUSH
57410: LD_INT 2
57412: PUSH
57413: EMPTY
57414: LIST
57415: LIST
57416: PUSH
57417: LD_INT 1
57419: PUSH
57420: LD_INT 2
57422: PUSH
57423: EMPTY
57424: LIST
57425: LIST
57426: PUSH
57427: LD_INT 0
57429: PUSH
57430: LD_INT 2
57432: PUSH
57433: EMPTY
57434: LIST
57435: LIST
57436: PUSH
57437: LD_INT 1
57439: NEG
57440: PUSH
57441: LD_INT 1
57443: PUSH
57444: EMPTY
57445: LIST
57446: LIST
57447: PUSH
57448: LD_INT 2
57450: NEG
57451: PUSH
57452: LD_INT 1
57454: NEG
57455: PUSH
57456: EMPTY
57457: LIST
57458: LIST
57459: PUSH
57460: LD_INT 2
57462: NEG
57463: PUSH
57464: LD_INT 2
57466: NEG
57467: PUSH
57468: EMPTY
57469: LIST
57470: LIST
57471: PUSH
57472: LD_INT 2
57474: NEG
57475: PUSH
57476: LD_INT 3
57478: NEG
57479: PUSH
57480: EMPTY
57481: LIST
57482: LIST
57483: PUSH
57484: LD_INT 2
57486: PUSH
57487: LD_INT 1
57489: NEG
57490: PUSH
57491: EMPTY
57492: LIST
57493: LIST
57494: PUSH
57495: LD_INT 3
57497: PUSH
57498: LD_INT 1
57500: PUSH
57501: EMPTY
57502: LIST
57503: LIST
57504: PUSH
57505: LD_INT 1
57507: PUSH
57508: LD_INT 3
57510: PUSH
57511: EMPTY
57512: LIST
57513: LIST
57514: PUSH
57515: LD_INT 1
57517: NEG
57518: PUSH
57519: LD_INT 2
57521: PUSH
57522: EMPTY
57523: LIST
57524: LIST
57525: PUSH
57526: LD_INT 3
57528: NEG
57529: PUSH
57530: LD_INT 2
57532: NEG
57533: PUSH
57534: EMPTY
57535: LIST
57536: LIST
57537: PUSH
57538: EMPTY
57539: LIST
57540: LIST
57541: LIST
57542: LIST
57543: LIST
57544: LIST
57545: LIST
57546: LIST
57547: LIST
57548: LIST
57549: LIST
57550: LIST
57551: LIST
57552: LIST
57553: LIST
57554: LIST
57555: LIST
57556: LIST
57557: LIST
57558: LIST
57559: LIST
57560: LIST
57561: LIST
57562: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57563: LD_ADDR_VAR 0 32
57567: PUSH
57568: LD_INT 0
57570: PUSH
57571: LD_INT 0
57573: PUSH
57574: EMPTY
57575: LIST
57576: LIST
57577: PUSH
57578: LD_INT 0
57580: PUSH
57581: LD_INT 1
57583: NEG
57584: PUSH
57585: EMPTY
57586: LIST
57587: LIST
57588: PUSH
57589: LD_INT 1
57591: PUSH
57592: LD_INT 0
57594: PUSH
57595: EMPTY
57596: LIST
57597: LIST
57598: PUSH
57599: LD_INT 1
57601: PUSH
57602: LD_INT 1
57604: PUSH
57605: EMPTY
57606: LIST
57607: LIST
57608: PUSH
57609: LD_INT 0
57611: PUSH
57612: LD_INT 1
57614: PUSH
57615: EMPTY
57616: LIST
57617: LIST
57618: PUSH
57619: LD_INT 1
57621: NEG
57622: PUSH
57623: LD_INT 0
57625: PUSH
57626: EMPTY
57627: LIST
57628: LIST
57629: PUSH
57630: LD_INT 1
57632: NEG
57633: PUSH
57634: LD_INT 1
57636: NEG
57637: PUSH
57638: EMPTY
57639: LIST
57640: LIST
57641: PUSH
57642: LD_INT 1
57644: NEG
57645: PUSH
57646: LD_INT 2
57648: NEG
57649: PUSH
57650: EMPTY
57651: LIST
57652: LIST
57653: PUSH
57654: LD_INT 0
57656: PUSH
57657: LD_INT 2
57659: NEG
57660: PUSH
57661: EMPTY
57662: LIST
57663: LIST
57664: PUSH
57665: LD_INT 1
57667: PUSH
57668: LD_INT 1
57670: NEG
57671: PUSH
57672: EMPTY
57673: LIST
57674: LIST
57675: PUSH
57676: LD_INT 2
57678: PUSH
57679: LD_INT 1
57681: PUSH
57682: EMPTY
57683: LIST
57684: LIST
57685: PUSH
57686: LD_INT 2
57688: PUSH
57689: LD_INT 2
57691: PUSH
57692: EMPTY
57693: LIST
57694: LIST
57695: PUSH
57696: LD_INT 1
57698: PUSH
57699: LD_INT 2
57701: PUSH
57702: EMPTY
57703: LIST
57704: LIST
57705: PUSH
57706: LD_INT 0
57708: PUSH
57709: LD_INT 2
57711: PUSH
57712: EMPTY
57713: LIST
57714: LIST
57715: PUSH
57716: LD_INT 1
57718: NEG
57719: PUSH
57720: LD_INT 1
57722: PUSH
57723: EMPTY
57724: LIST
57725: LIST
57726: PUSH
57727: LD_INT 2
57729: NEG
57730: PUSH
57731: LD_INT 0
57733: PUSH
57734: EMPTY
57735: LIST
57736: LIST
57737: PUSH
57738: LD_INT 2
57740: NEG
57741: PUSH
57742: LD_INT 1
57744: NEG
57745: PUSH
57746: EMPTY
57747: LIST
57748: LIST
57749: PUSH
57750: LD_INT 1
57752: NEG
57753: PUSH
57754: LD_INT 3
57756: NEG
57757: PUSH
57758: EMPTY
57759: LIST
57760: LIST
57761: PUSH
57762: LD_INT 1
57764: PUSH
57765: LD_INT 2
57767: NEG
57768: PUSH
57769: EMPTY
57770: LIST
57771: LIST
57772: PUSH
57773: LD_INT 3
57775: PUSH
57776: LD_INT 2
57778: PUSH
57779: EMPTY
57780: LIST
57781: LIST
57782: PUSH
57783: LD_INT 2
57785: PUSH
57786: LD_INT 3
57788: PUSH
57789: EMPTY
57790: LIST
57791: LIST
57792: PUSH
57793: LD_INT 2
57795: NEG
57796: PUSH
57797: LD_INT 1
57799: PUSH
57800: EMPTY
57801: LIST
57802: LIST
57803: PUSH
57804: LD_INT 3
57806: NEG
57807: PUSH
57808: LD_INT 1
57810: NEG
57811: PUSH
57812: EMPTY
57813: LIST
57814: LIST
57815: PUSH
57816: EMPTY
57817: LIST
57818: LIST
57819: LIST
57820: LIST
57821: LIST
57822: LIST
57823: LIST
57824: LIST
57825: LIST
57826: LIST
57827: LIST
57828: LIST
57829: LIST
57830: LIST
57831: LIST
57832: LIST
57833: LIST
57834: LIST
57835: LIST
57836: LIST
57837: LIST
57838: LIST
57839: LIST
57840: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57841: LD_ADDR_VAR 0 33
57845: PUSH
57846: LD_INT 0
57848: PUSH
57849: LD_INT 0
57851: PUSH
57852: EMPTY
57853: LIST
57854: LIST
57855: PUSH
57856: LD_INT 0
57858: PUSH
57859: LD_INT 1
57861: NEG
57862: PUSH
57863: EMPTY
57864: LIST
57865: LIST
57866: PUSH
57867: LD_INT 1
57869: PUSH
57870: LD_INT 0
57872: PUSH
57873: EMPTY
57874: LIST
57875: LIST
57876: PUSH
57877: LD_INT 1
57879: PUSH
57880: LD_INT 1
57882: PUSH
57883: EMPTY
57884: LIST
57885: LIST
57886: PUSH
57887: LD_INT 0
57889: PUSH
57890: LD_INT 1
57892: PUSH
57893: EMPTY
57894: LIST
57895: LIST
57896: PUSH
57897: LD_INT 1
57899: NEG
57900: PUSH
57901: LD_INT 0
57903: PUSH
57904: EMPTY
57905: LIST
57906: LIST
57907: PUSH
57908: LD_INT 1
57910: NEG
57911: PUSH
57912: LD_INT 1
57914: NEG
57915: PUSH
57916: EMPTY
57917: LIST
57918: LIST
57919: PUSH
57920: LD_INT 1
57922: NEG
57923: PUSH
57924: LD_INT 2
57926: NEG
57927: PUSH
57928: EMPTY
57929: LIST
57930: LIST
57931: PUSH
57932: LD_INT 1
57934: PUSH
57935: LD_INT 1
57937: NEG
57938: PUSH
57939: EMPTY
57940: LIST
57941: LIST
57942: PUSH
57943: LD_INT 2
57945: PUSH
57946: LD_INT 0
57948: PUSH
57949: EMPTY
57950: LIST
57951: LIST
57952: PUSH
57953: LD_INT 2
57955: PUSH
57956: LD_INT 1
57958: PUSH
57959: EMPTY
57960: LIST
57961: LIST
57962: PUSH
57963: LD_INT 1
57965: PUSH
57966: LD_INT 2
57968: PUSH
57969: EMPTY
57970: LIST
57971: LIST
57972: PUSH
57973: LD_INT 0
57975: PUSH
57976: LD_INT 2
57978: PUSH
57979: EMPTY
57980: LIST
57981: LIST
57982: PUSH
57983: LD_INT 1
57985: NEG
57986: PUSH
57987: LD_INT 1
57989: PUSH
57990: EMPTY
57991: LIST
57992: LIST
57993: PUSH
57994: LD_INT 2
57996: NEG
57997: PUSH
57998: LD_INT 0
58000: PUSH
58001: EMPTY
58002: LIST
58003: LIST
58004: PUSH
58005: LD_INT 2
58007: NEG
58008: PUSH
58009: LD_INT 1
58011: NEG
58012: PUSH
58013: EMPTY
58014: LIST
58015: LIST
58016: PUSH
58017: LD_INT 2
58019: NEG
58020: PUSH
58021: LD_INT 2
58023: NEG
58024: PUSH
58025: EMPTY
58026: LIST
58027: LIST
58028: PUSH
58029: LD_INT 2
58031: NEG
58032: PUSH
58033: LD_INT 3
58035: NEG
58036: PUSH
58037: EMPTY
58038: LIST
58039: LIST
58040: PUSH
58041: LD_INT 2
58043: PUSH
58044: LD_INT 1
58046: NEG
58047: PUSH
58048: EMPTY
58049: LIST
58050: LIST
58051: PUSH
58052: LD_INT 3
58054: PUSH
58055: LD_INT 1
58057: PUSH
58058: EMPTY
58059: LIST
58060: LIST
58061: PUSH
58062: LD_INT 1
58064: PUSH
58065: LD_INT 3
58067: PUSH
58068: EMPTY
58069: LIST
58070: LIST
58071: PUSH
58072: LD_INT 1
58074: NEG
58075: PUSH
58076: LD_INT 2
58078: PUSH
58079: EMPTY
58080: LIST
58081: LIST
58082: PUSH
58083: LD_INT 3
58085: NEG
58086: PUSH
58087: LD_INT 2
58089: NEG
58090: PUSH
58091: EMPTY
58092: LIST
58093: LIST
58094: PUSH
58095: EMPTY
58096: LIST
58097: LIST
58098: LIST
58099: LIST
58100: LIST
58101: LIST
58102: LIST
58103: LIST
58104: LIST
58105: LIST
58106: LIST
58107: LIST
58108: LIST
58109: LIST
58110: LIST
58111: LIST
58112: LIST
58113: LIST
58114: LIST
58115: LIST
58116: LIST
58117: LIST
58118: LIST
58119: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58120: LD_ADDR_VAR 0 34
58124: PUSH
58125: LD_INT 0
58127: PUSH
58128: LD_INT 0
58130: PUSH
58131: EMPTY
58132: LIST
58133: LIST
58134: PUSH
58135: LD_INT 0
58137: PUSH
58138: LD_INT 1
58140: NEG
58141: PUSH
58142: EMPTY
58143: LIST
58144: LIST
58145: PUSH
58146: LD_INT 1
58148: PUSH
58149: LD_INT 0
58151: PUSH
58152: EMPTY
58153: LIST
58154: LIST
58155: PUSH
58156: LD_INT 1
58158: PUSH
58159: LD_INT 1
58161: PUSH
58162: EMPTY
58163: LIST
58164: LIST
58165: PUSH
58166: LD_INT 0
58168: PUSH
58169: LD_INT 1
58171: PUSH
58172: EMPTY
58173: LIST
58174: LIST
58175: PUSH
58176: LD_INT 1
58178: NEG
58179: PUSH
58180: LD_INT 0
58182: PUSH
58183: EMPTY
58184: LIST
58185: LIST
58186: PUSH
58187: LD_INT 1
58189: NEG
58190: PUSH
58191: LD_INT 1
58193: NEG
58194: PUSH
58195: EMPTY
58196: LIST
58197: LIST
58198: PUSH
58199: LD_INT 1
58201: NEG
58202: PUSH
58203: LD_INT 2
58205: NEG
58206: PUSH
58207: EMPTY
58208: LIST
58209: LIST
58210: PUSH
58211: LD_INT 0
58213: PUSH
58214: LD_INT 2
58216: NEG
58217: PUSH
58218: EMPTY
58219: LIST
58220: LIST
58221: PUSH
58222: LD_INT 1
58224: PUSH
58225: LD_INT 1
58227: NEG
58228: PUSH
58229: EMPTY
58230: LIST
58231: LIST
58232: PUSH
58233: LD_INT 2
58235: PUSH
58236: LD_INT 1
58238: PUSH
58239: EMPTY
58240: LIST
58241: LIST
58242: PUSH
58243: LD_INT 2
58245: PUSH
58246: LD_INT 2
58248: PUSH
58249: EMPTY
58250: LIST
58251: LIST
58252: PUSH
58253: LD_INT 1
58255: PUSH
58256: LD_INT 2
58258: PUSH
58259: EMPTY
58260: LIST
58261: LIST
58262: PUSH
58263: LD_INT 1
58265: NEG
58266: PUSH
58267: LD_INT 1
58269: PUSH
58270: EMPTY
58271: LIST
58272: LIST
58273: PUSH
58274: LD_INT 2
58276: NEG
58277: PUSH
58278: LD_INT 0
58280: PUSH
58281: EMPTY
58282: LIST
58283: LIST
58284: PUSH
58285: LD_INT 2
58287: NEG
58288: PUSH
58289: LD_INT 1
58291: NEG
58292: PUSH
58293: EMPTY
58294: LIST
58295: LIST
58296: PUSH
58297: LD_INT 2
58299: NEG
58300: PUSH
58301: LD_INT 2
58303: NEG
58304: PUSH
58305: EMPTY
58306: LIST
58307: LIST
58308: PUSH
58309: LD_INT 1
58311: NEG
58312: PUSH
58313: LD_INT 3
58315: NEG
58316: PUSH
58317: EMPTY
58318: LIST
58319: LIST
58320: PUSH
58321: LD_INT 1
58323: PUSH
58324: LD_INT 2
58326: NEG
58327: PUSH
58328: EMPTY
58329: LIST
58330: LIST
58331: PUSH
58332: LD_INT 3
58334: PUSH
58335: LD_INT 2
58337: PUSH
58338: EMPTY
58339: LIST
58340: LIST
58341: PUSH
58342: LD_INT 2
58344: PUSH
58345: LD_INT 3
58347: PUSH
58348: EMPTY
58349: LIST
58350: LIST
58351: PUSH
58352: LD_INT 2
58354: NEG
58355: PUSH
58356: LD_INT 1
58358: PUSH
58359: EMPTY
58360: LIST
58361: LIST
58362: PUSH
58363: LD_INT 3
58365: NEG
58366: PUSH
58367: LD_INT 1
58369: NEG
58370: PUSH
58371: EMPTY
58372: LIST
58373: LIST
58374: PUSH
58375: EMPTY
58376: LIST
58377: LIST
58378: LIST
58379: LIST
58380: LIST
58381: LIST
58382: LIST
58383: LIST
58384: LIST
58385: LIST
58386: LIST
58387: LIST
58388: LIST
58389: LIST
58390: LIST
58391: LIST
58392: LIST
58393: LIST
58394: LIST
58395: LIST
58396: LIST
58397: LIST
58398: LIST
58399: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
58400: LD_ADDR_VAR 0 35
58404: PUSH
58405: LD_INT 0
58407: PUSH
58408: LD_INT 0
58410: PUSH
58411: EMPTY
58412: LIST
58413: LIST
58414: PUSH
58415: LD_INT 0
58417: PUSH
58418: LD_INT 1
58420: NEG
58421: PUSH
58422: EMPTY
58423: LIST
58424: LIST
58425: PUSH
58426: LD_INT 1
58428: PUSH
58429: LD_INT 0
58431: PUSH
58432: EMPTY
58433: LIST
58434: LIST
58435: PUSH
58436: LD_INT 1
58438: PUSH
58439: LD_INT 1
58441: PUSH
58442: EMPTY
58443: LIST
58444: LIST
58445: PUSH
58446: LD_INT 0
58448: PUSH
58449: LD_INT 1
58451: PUSH
58452: EMPTY
58453: LIST
58454: LIST
58455: PUSH
58456: LD_INT 1
58458: NEG
58459: PUSH
58460: LD_INT 0
58462: PUSH
58463: EMPTY
58464: LIST
58465: LIST
58466: PUSH
58467: LD_INT 1
58469: NEG
58470: PUSH
58471: LD_INT 1
58473: NEG
58474: PUSH
58475: EMPTY
58476: LIST
58477: LIST
58478: PUSH
58479: LD_INT 2
58481: PUSH
58482: LD_INT 1
58484: PUSH
58485: EMPTY
58486: LIST
58487: LIST
58488: PUSH
58489: LD_INT 2
58491: NEG
58492: PUSH
58493: LD_INT 1
58495: NEG
58496: PUSH
58497: EMPTY
58498: LIST
58499: LIST
58500: PUSH
58501: EMPTY
58502: LIST
58503: LIST
58504: LIST
58505: LIST
58506: LIST
58507: LIST
58508: LIST
58509: LIST
58510: LIST
58511: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
58512: LD_ADDR_VAR 0 36
58516: PUSH
58517: LD_INT 0
58519: PUSH
58520: LD_INT 0
58522: PUSH
58523: EMPTY
58524: LIST
58525: LIST
58526: PUSH
58527: LD_INT 0
58529: PUSH
58530: LD_INT 1
58532: NEG
58533: PUSH
58534: EMPTY
58535: LIST
58536: LIST
58537: PUSH
58538: LD_INT 1
58540: PUSH
58541: LD_INT 0
58543: PUSH
58544: EMPTY
58545: LIST
58546: LIST
58547: PUSH
58548: LD_INT 1
58550: PUSH
58551: LD_INT 1
58553: PUSH
58554: EMPTY
58555: LIST
58556: LIST
58557: PUSH
58558: LD_INT 0
58560: PUSH
58561: LD_INT 1
58563: PUSH
58564: EMPTY
58565: LIST
58566: LIST
58567: PUSH
58568: LD_INT 1
58570: NEG
58571: PUSH
58572: LD_INT 0
58574: PUSH
58575: EMPTY
58576: LIST
58577: LIST
58578: PUSH
58579: LD_INT 1
58581: NEG
58582: PUSH
58583: LD_INT 1
58585: NEG
58586: PUSH
58587: EMPTY
58588: LIST
58589: LIST
58590: PUSH
58591: LD_INT 1
58593: NEG
58594: PUSH
58595: LD_INT 2
58597: NEG
58598: PUSH
58599: EMPTY
58600: LIST
58601: LIST
58602: PUSH
58603: LD_INT 1
58605: PUSH
58606: LD_INT 2
58608: PUSH
58609: EMPTY
58610: LIST
58611: LIST
58612: PUSH
58613: EMPTY
58614: LIST
58615: LIST
58616: LIST
58617: LIST
58618: LIST
58619: LIST
58620: LIST
58621: LIST
58622: LIST
58623: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
58624: LD_ADDR_VAR 0 37
58628: PUSH
58629: LD_INT 0
58631: PUSH
58632: LD_INT 0
58634: PUSH
58635: EMPTY
58636: LIST
58637: LIST
58638: PUSH
58639: LD_INT 0
58641: PUSH
58642: LD_INT 1
58644: NEG
58645: PUSH
58646: EMPTY
58647: LIST
58648: LIST
58649: PUSH
58650: LD_INT 1
58652: PUSH
58653: LD_INT 0
58655: PUSH
58656: EMPTY
58657: LIST
58658: LIST
58659: PUSH
58660: LD_INT 1
58662: PUSH
58663: LD_INT 1
58665: PUSH
58666: EMPTY
58667: LIST
58668: LIST
58669: PUSH
58670: LD_INT 0
58672: PUSH
58673: LD_INT 1
58675: PUSH
58676: EMPTY
58677: LIST
58678: LIST
58679: PUSH
58680: LD_INT 1
58682: NEG
58683: PUSH
58684: LD_INT 0
58686: PUSH
58687: EMPTY
58688: LIST
58689: LIST
58690: PUSH
58691: LD_INT 1
58693: NEG
58694: PUSH
58695: LD_INT 1
58697: NEG
58698: PUSH
58699: EMPTY
58700: LIST
58701: LIST
58702: PUSH
58703: LD_INT 1
58705: PUSH
58706: LD_INT 1
58708: NEG
58709: PUSH
58710: EMPTY
58711: LIST
58712: LIST
58713: PUSH
58714: LD_INT 1
58716: NEG
58717: PUSH
58718: LD_INT 1
58720: PUSH
58721: EMPTY
58722: LIST
58723: LIST
58724: PUSH
58725: EMPTY
58726: LIST
58727: LIST
58728: LIST
58729: LIST
58730: LIST
58731: LIST
58732: LIST
58733: LIST
58734: LIST
58735: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
58736: LD_ADDR_VAR 0 38
58740: PUSH
58741: LD_INT 0
58743: PUSH
58744: LD_INT 0
58746: PUSH
58747: EMPTY
58748: LIST
58749: LIST
58750: PUSH
58751: LD_INT 0
58753: PUSH
58754: LD_INT 1
58756: NEG
58757: PUSH
58758: EMPTY
58759: LIST
58760: LIST
58761: PUSH
58762: LD_INT 1
58764: PUSH
58765: LD_INT 0
58767: PUSH
58768: EMPTY
58769: LIST
58770: LIST
58771: PUSH
58772: LD_INT 1
58774: PUSH
58775: LD_INT 1
58777: PUSH
58778: EMPTY
58779: LIST
58780: LIST
58781: PUSH
58782: LD_INT 0
58784: PUSH
58785: LD_INT 1
58787: PUSH
58788: EMPTY
58789: LIST
58790: LIST
58791: PUSH
58792: LD_INT 1
58794: NEG
58795: PUSH
58796: LD_INT 0
58798: PUSH
58799: EMPTY
58800: LIST
58801: LIST
58802: PUSH
58803: LD_INT 1
58805: NEG
58806: PUSH
58807: LD_INT 1
58809: NEG
58810: PUSH
58811: EMPTY
58812: LIST
58813: LIST
58814: PUSH
58815: LD_INT 2
58817: PUSH
58818: LD_INT 1
58820: PUSH
58821: EMPTY
58822: LIST
58823: LIST
58824: PUSH
58825: LD_INT 2
58827: NEG
58828: PUSH
58829: LD_INT 1
58831: NEG
58832: PUSH
58833: EMPTY
58834: LIST
58835: LIST
58836: PUSH
58837: EMPTY
58838: LIST
58839: LIST
58840: LIST
58841: LIST
58842: LIST
58843: LIST
58844: LIST
58845: LIST
58846: LIST
58847: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
58848: LD_ADDR_VAR 0 39
58852: PUSH
58853: LD_INT 0
58855: PUSH
58856: LD_INT 0
58858: PUSH
58859: EMPTY
58860: LIST
58861: LIST
58862: PUSH
58863: LD_INT 0
58865: PUSH
58866: LD_INT 1
58868: NEG
58869: PUSH
58870: EMPTY
58871: LIST
58872: LIST
58873: PUSH
58874: LD_INT 1
58876: PUSH
58877: LD_INT 0
58879: PUSH
58880: EMPTY
58881: LIST
58882: LIST
58883: PUSH
58884: LD_INT 1
58886: PUSH
58887: LD_INT 1
58889: PUSH
58890: EMPTY
58891: LIST
58892: LIST
58893: PUSH
58894: LD_INT 0
58896: PUSH
58897: LD_INT 1
58899: PUSH
58900: EMPTY
58901: LIST
58902: LIST
58903: PUSH
58904: LD_INT 1
58906: NEG
58907: PUSH
58908: LD_INT 0
58910: PUSH
58911: EMPTY
58912: LIST
58913: LIST
58914: PUSH
58915: LD_INT 1
58917: NEG
58918: PUSH
58919: LD_INT 1
58921: NEG
58922: PUSH
58923: EMPTY
58924: LIST
58925: LIST
58926: PUSH
58927: LD_INT 1
58929: NEG
58930: PUSH
58931: LD_INT 2
58933: NEG
58934: PUSH
58935: EMPTY
58936: LIST
58937: LIST
58938: PUSH
58939: LD_INT 1
58941: PUSH
58942: LD_INT 2
58944: PUSH
58945: EMPTY
58946: LIST
58947: LIST
58948: PUSH
58949: EMPTY
58950: LIST
58951: LIST
58952: LIST
58953: LIST
58954: LIST
58955: LIST
58956: LIST
58957: LIST
58958: LIST
58959: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
58960: LD_ADDR_VAR 0 40
58964: PUSH
58965: LD_INT 0
58967: PUSH
58968: LD_INT 0
58970: PUSH
58971: EMPTY
58972: LIST
58973: LIST
58974: PUSH
58975: LD_INT 0
58977: PUSH
58978: LD_INT 1
58980: NEG
58981: PUSH
58982: EMPTY
58983: LIST
58984: LIST
58985: PUSH
58986: LD_INT 1
58988: PUSH
58989: LD_INT 0
58991: PUSH
58992: EMPTY
58993: LIST
58994: LIST
58995: PUSH
58996: LD_INT 1
58998: PUSH
58999: LD_INT 1
59001: PUSH
59002: EMPTY
59003: LIST
59004: LIST
59005: PUSH
59006: LD_INT 0
59008: PUSH
59009: LD_INT 1
59011: PUSH
59012: EMPTY
59013: LIST
59014: LIST
59015: PUSH
59016: LD_INT 1
59018: NEG
59019: PUSH
59020: LD_INT 0
59022: PUSH
59023: EMPTY
59024: LIST
59025: LIST
59026: PUSH
59027: LD_INT 1
59029: NEG
59030: PUSH
59031: LD_INT 1
59033: NEG
59034: PUSH
59035: EMPTY
59036: LIST
59037: LIST
59038: PUSH
59039: LD_INT 1
59041: PUSH
59042: LD_INT 1
59044: NEG
59045: PUSH
59046: EMPTY
59047: LIST
59048: LIST
59049: PUSH
59050: LD_INT 1
59052: NEG
59053: PUSH
59054: LD_INT 1
59056: PUSH
59057: EMPTY
59058: LIST
59059: LIST
59060: PUSH
59061: EMPTY
59062: LIST
59063: LIST
59064: LIST
59065: LIST
59066: LIST
59067: LIST
59068: LIST
59069: LIST
59070: LIST
59071: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59072: LD_ADDR_VAR 0 41
59076: PUSH
59077: LD_INT 0
59079: PUSH
59080: LD_INT 0
59082: PUSH
59083: EMPTY
59084: LIST
59085: LIST
59086: PUSH
59087: LD_INT 0
59089: PUSH
59090: LD_INT 1
59092: NEG
59093: PUSH
59094: EMPTY
59095: LIST
59096: LIST
59097: PUSH
59098: LD_INT 1
59100: PUSH
59101: LD_INT 0
59103: PUSH
59104: EMPTY
59105: LIST
59106: LIST
59107: PUSH
59108: LD_INT 1
59110: PUSH
59111: LD_INT 1
59113: PUSH
59114: EMPTY
59115: LIST
59116: LIST
59117: PUSH
59118: LD_INT 0
59120: PUSH
59121: LD_INT 1
59123: PUSH
59124: EMPTY
59125: LIST
59126: LIST
59127: PUSH
59128: LD_INT 1
59130: NEG
59131: PUSH
59132: LD_INT 0
59134: PUSH
59135: EMPTY
59136: LIST
59137: LIST
59138: PUSH
59139: LD_INT 1
59141: NEG
59142: PUSH
59143: LD_INT 1
59145: NEG
59146: PUSH
59147: EMPTY
59148: LIST
59149: LIST
59150: PUSH
59151: LD_INT 1
59153: NEG
59154: PUSH
59155: LD_INT 2
59157: NEG
59158: PUSH
59159: EMPTY
59160: LIST
59161: LIST
59162: PUSH
59163: LD_INT 1
59165: PUSH
59166: LD_INT 1
59168: NEG
59169: PUSH
59170: EMPTY
59171: LIST
59172: LIST
59173: PUSH
59174: LD_INT 2
59176: PUSH
59177: LD_INT 0
59179: PUSH
59180: EMPTY
59181: LIST
59182: LIST
59183: PUSH
59184: LD_INT 2
59186: PUSH
59187: LD_INT 1
59189: PUSH
59190: EMPTY
59191: LIST
59192: LIST
59193: PUSH
59194: LD_INT 2
59196: PUSH
59197: LD_INT 2
59199: PUSH
59200: EMPTY
59201: LIST
59202: LIST
59203: PUSH
59204: LD_INT 1
59206: PUSH
59207: LD_INT 2
59209: PUSH
59210: EMPTY
59211: LIST
59212: LIST
59213: PUSH
59214: LD_INT 1
59216: NEG
59217: PUSH
59218: LD_INT 1
59220: PUSH
59221: EMPTY
59222: LIST
59223: LIST
59224: PUSH
59225: LD_INT 2
59227: NEG
59228: PUSH
59229: LD_INT 0
59231: PUSH
59232: EMPTY
59233: LIST
59234: LIST
59235: PUSH
59236: LD_INT 2
59238: NEG
59239: PUSH
59240: LD_INT 1
59242: NEG
59243: PUSH
59244: EMPTY
59245: LIST
59246: LIST
59247: PUSH
59248: LD_INT 2
59250: NEG
59251: PUSH
59252: LD_INT 2
59254: NEG
59255: PUSH
59256: EMPTY
59257: LIST
59258: LIST
59259: PUSH
59260: LD_INT 2
59262: NEG
59263: PUSH
59264: LD_INT 3
59266: NEG
59267: PUSH
59268: EMPTY
59269: LIST
59270: LIST
59271: PUSH
59272: LD_INT 2
59274: PUSH
59275: LD_INT 1
59277: NEG
59278: PUSH
59279: EMPTY
59280: LIST
59281: LIST
59282: PUSH
59283: LD_INT 3
59285: PUSH
59286: LD_INT 0
59288: PUSH
59289: EMPTY
59290: LIST
59291: LIST
59292: PUSH
59293: LD_INT 3
59295: PUSH
59296: LD_INT 1
59298: PUSH
59299: EMPTY
59300: LIST
59301: LIST
59302: PUSH
59303: LD_INT 3
59305: PUSH
59306: LD_INT 2
59308: PUSH
59309: EMPTY
59310: LIST
59311: LIST
59312: PUSH
59313: LD_INT 3
59315: PUSH
59316: LD_INT 3
59318: PUSH
59319: EMPTY
59320: LIST
59321: LIST
59322: PUSH
59323: LD_INT 2
59325: PUSH
59326: LD_INT 3
59328: PUSH
59329: EMPTY
59330: LIST
59331: LIST
59332: PUSH
59333: LD_INT 2
59335: NEG
59336: PUSH
59337: LD_INT 1
59339: PUSH
59340: EMPTY
59341: LIST
59342: LIST
59343: PUSH
59344: LD_INT 3
59346: NEG
59347: PUSH
59348: LD_INT 0
59350: PUSH
59351: EMPTY
59352: LIST
59353: LIST
59354: PUSH
59355: LD_INT 3
59357: NEG
59358: PUSH
59359: LD_INT 1
59361: NEG
59362: PUSH
59363: EMPTY
59364: LIST
59365: LIST
59366: PUSH
59367: LD_INT 3
59369: NEG
59370: PUSH
59371: LD_INT 2
59373: NEG
59374: PUSH
59375: EMPTY
59376: LIST
59377: LIST
59378: PUSH
59379: LD_INT 3
59381: NEG
59382: PUSH
59383: LD_INT 3
59385: NEG
59386: PUSH
59387: EMPTY
59388: LIST
59389: LIST
59390: PUSH
59391: EMPTY
59392: LIST
59393: LIST
59394: LIST
59395: LIST
59396: LIST
59397: LIST
59398: LIST
59399: LIST
59400: LIST
59401: LIST
59402: LIST
59403: LIST
59404: LIST
59405: LIST
59406: LIST
59407: LIST
59408: LIST
59409: LIST
59410: LIST
59411: LIST
59412: LIST
59413: LIST
59414: LIST
59415: LIST
59416: LIST
59417: LIST
59418: LIST
59419: LIST
59420: LIST
59421: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59422: LD_ADDR_VAR 0 42
59426: PUSH
59427: LD_INT 0
59429: PUSH
59430: LD_INT 0
59432: PUSH
59433: EMPTY
59434: LIST
59435: LIST
59436: PUSH
59437: LD_INT 0
59439: PUSH
59440: LD_INT 1
59442: NEG
59443: PUSH
59444: EMPTY
59445: LIST
59446: LIST
59447: PUSH
59448: LD_INT 1
59450: PUSH
59451: LD_INT 0
59453: PUSH
59454: EMPTY
59455: LIST
59456: LIST
59457: PUSH
59458: LD_INT 1
59460: PUSH
59461: LD_INT 1
59463: PUSH
59464: EMPTY
59465: LIST
59466: LIST
59467: PUSH
59468: LD_INT 0
59470: PUSH
59471: LD_INT 1
59473: PUSH
59474: EMPTY
59475: LIST
59476: LIST
59477: PUSH
59478: LD_INT 1
59480: NEG
59481: PUSH
59482: LD_INT 0
59484: PUSH
59485: EMPTY
59486: LIST
59487: LIST
59488: PUSH
59489: LD_INT 1
59491: NEG
59492: PUSH
59493: LD_INT 1
59495: NEG
59496: PUSH
59497: EMPTY
59498: LIST
59499: LIST
59500: PUSH
59501: LD_INT 1
59503: NEG
59504: PUSH
59505: LD_INT 2
59507: NEG
59508: PUSH
59509: EMPTY
59510: LIST
59511: LIST
59512: PUSH
59513: LD_INT 0
59515: PUSH
59516: LD_INT 2
59518: NEG
59519: PUSH
59520: EMPTY
59521: LIST
59522: LIST
59523: PUSH
59524: LD_INT 1
59526: PUSH
59527: LD_INT 1
59529: NEG
59530: PUSH
59531: EMPTY
59532: LIST
59533: LIST
59534: PUSH
59535: LD_INT 2
59537: PUSH
59538: LD_INT 1
59540: PUSH
59541: EMPTY
59542: LIST
59543: LIST
59544: PUSH
59545: LD_INT 2
59547: PUSH
59548: LD_INT 2
59550: PUSH
59551: EMPTY
59552: LIST
59553: LIST
59554: PUSH
59555: LD_INT 1
59557: PUSH
59558: LD_INT 2
59560: PUSH
59561: EMPTY
59562: LIST
59563: LIST
59564: PUSH
59565: LD_INT 0
59567: PUSH
59568: LD_INT 2
59570: PUSH
59571: EMPTY
59572: LIST
59573: LIST
59574: PUSH
59575: LD_INT 1
59577: NEG
59578: PUSH
59579: LD_INT 1
59581: PUSH
59582: EMPTY
59583: LIST
59584: LIST
59585: PUSH
59586: LD_INT 2
59588: NEG
59589: PUSH
59590: LD_INT 1
59592: NEG
59593: PUSH
59594: EMPTY
59595: LIST
59596: LIST
59597: PUSH
59598: LD_INT 2
59600: NEG
59601: PUSH
59602: LD_INT 2
59604: NEG
59605: PUSH
59606: EMPTY
59607: LIST
59608: LIST
59609: PUSH
59610: LD_INT 2
59612: NEG
59613: PUSH
59614: LD_INT 3
59616: NEG
59617: PUSH
59618: EMPTY
59619: LIST
59620: LIST
59621: PUSH
59622: LD_INT 1
59624: NEG
59625: PUSH
59626: LD_INT 3
59628: NEG
59629: PUSH
59630: EMPTY
59631: LIST
59632: LIST
59633: PUSH
59634: LD_INT 0
59636: PUSH
59637: LD_INT 3
59639: NEG
59640: PUSH
59641: EMPTY
59642: LIST
59643: LIST
59644: PUSH
59645: LD_INT 1
59647: PUSH
59648: LD_INT 2
59650: NEG
59651: PUSH
59652: EMPTY
59653: LIST
59654: LIST
59655: PUSH
59656: LD_INT 3
59658: PUSH
59659: LD_INT 2
59661: PUSH
59662: EMPTY
59663: LIST
59664: LIST
59665: PUSH
59666: LD_INT 3
59668: PUSH
59669: LD_INT 3
59671: PUSH
59672: EMPTY
59673: LIST
59674: LIST
59675: PUSH
59676: LD_INT 2
59678: PUSH
59679: LD_INT 3
59681: PUSH
59682: EMPTY
59683: LIST
59684: LIST
59685: PUSH
59686: LD_INT 1
59688: PUSH
59689: LD_INT 3
59691: PUSH
59692: EMPTY
59693: LIST
59694: LIST
59695: PUSH
59696: LD_INT 0
59698: PUSH
59699: LD_INT 3
59701: PUSH
59702: EMPTY
59703: LIST
59704: LIST
59705: PUSH
59706: LD_INT 1
59708: NEG
59709: PUSH
59710: LD_INT 2
59712: PUSH
59713: EMPTY
59714: LIST
59715: LIST
59716: PUSH
59717: LD_INT 3
59719: NEG
59720: PUSH
59721: LD_INT 2
59723: NEG
59724: PUSH
59725: EMPTY
59726: LIST
59727: LIST
59728: PUSH
59729: LD_INT 3
59731: NEG
59732: PUSH
59733: LD_INT 3
59735: NEG
59736: PUSH
59737: EMPTY
59738: LIST
59739: LIST
59740: PUSH
59741: EMPTY
59742: LIST
59743: LIST
59744: LIST
59745: LIST
59746: LIST
59747: LIST
59748: LIST
59749: LIST
59750: LIST
59751: LIST
59752: LIST
59753: LIST
59754: LIST
59755: LIST
59756: LIST
59757: LIST
59758: LIST
59759: LIST
59760: LIST
59761: LIST
59762: LIST
59763: LIST
59764: LIST
59765: LIST
59766: LIST
59767: LIST
59768: LIST
59769: LIST
59770: LIST
59771: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59772: LD_ADDR_VAR 0 43
59776: PUSH
59777: LD_INT 0
59779: PUSH
59780: LD_INT 0
59782: PUSH
59783: EMPTY
59784: LIST
59785: LIST
59786: PUSH
59787: LD_INT 0
59789: PUSH
59790: LD_INT 1
59792: NEG
59793: PUSH
59794: EMPTY
59795: LIST
59796: LIST
59797: PUSH
59798: LD_INT 1
59800: PUSH
59801: LD_INT 0
59803: PUSH
59804: EMPTY
59805: LIST
59806: LIST
59807: PUSH
59808: LD_INT 1
59810: PUSH
59811: LD_INT 1
59813: PUSH
59814: EMPTY
59815: LIST
59816: LIST
59817: PUSH
59818: LD_INT 0
59820: PUSH
59821: LD_INT 1
59823: PUSH
59824: EMPTY
59825: LIST
59826: LIST
59827: PUSH
59828: LD_INT 1
59830: NEG
59831: PUSH
59832: LD_INT 0
59834: PUSH
59835: EMPTY
59836: LIST
59837: LIST
59838: PUSH
59839: LD_INT 1
59841: NEG
59842: PUSH
59843: LD_INT 1
59845: NEG
59846: PUSH
59847: EMPTY
59848: LIST
59849: LIST
59850: PUSH
59851: LD_INT 1
59853: NEG
59854: PUSH
59855: LD_INT 2
59857: NEG
59858: PUSH
59859: EMPTY
59860: LIST
59861: LIST
59862: PUSH
59863: LD_INT 0
59865: PUSH
59866: LD_INT 2
59868: NEG
59869: PUSH
59870: EMPTY
59871: LIST
59872: LIST
59873: PUSH
59874: LD_INT 1
59876: PUSH
59877: LD_INT 1
59879: NEG
59880: PUSH
59881: EMPTY
59882: LIST
59883: LIST
59884: PUSH
59885: LD_INT 2
59887: PUSH
59888: LD_INT 0
59890: PUSH
59891: EMPTY
59892: LIST
59893: LIST
59894: PUSH
59895: LD_INT 2
59897: PUSH
59898: LD_INT 1
59900: PUSH
59901: EMPTY
59902: LIST
59903: LIST
59904: PUSH
59905: LD_INT 1
59907: PUSH
59908: LD_INT 2
59910: PUSH
59911: EMPTY
59912: LIST
59913: LIST
59914: PUSH
59915: LD_INT 0
59917: PUSH
59918: LD_INT 2
59920: PUSH
59921: EMPTY
59922: LIST
59923: LIST
59924: PUSH
59925: LD_INT 1
59927: NEG
59928: PUSH
59929: LD_INT 1
59931: PUSH
59932: EMPTY
59933: LIST
59934: LIST
59935: PUSH
59936: LD_INT 2
59938: NEG
59939: PUSH
59940: LD_INT 0
59942: PUSH
59943: EMPTY
59944: LIST
59945: LIST
59946: PUSH
59947: LD_INT 2
59949: NEG
59950: PUSH
59951: LD_INT 1
59953: NEG
59954: PUSH
59955: EMPTY
59956: LIST
59957: LIST
59958: PUSH
59959: LD_INT 1
59961: NEG
59962: PUSH
59963: LD_INT 3
59965: NEG
59966: PUSH
59967: EMPTY
59968: LIST
59969: LIST
59970: PUSH
59971: LD_INT 0
59973: PUSH
59974: LD_INT 3
59976: NEG
59977: PUSH
59978: EMPTY
59979: LIST
59980: LIST
59981: PUSH
59982: LD_INT 1
59984: PUSH
59985: LD_INT 2
59987: NEG
59988: PUSH
59989: EMPTY
59990: LIST
59991: LIST
59992: PUSH
59993: LD_INT 2
59995: PUSH
59996: LD_INT 1
59998: NEG
59999: PUSH
60000: EMPTY
60001: LIST
60002: LIST
60003: PUSH
60004: LD_INT 3
60006: PUSH
60007: LD_INT 0
60009: PUSH
60010: EMPTY
60011: LIST
60012: LIST
60013: PUSH
60014: LD_INT 3
60016: PUSH
60017: LD_INT 1
60019: PUSH
60020: EMPTY
60021: LIST
60022: LIST
60023: PUSH
60024: LD_INT 1
60026: PUSH
60027: LD_INT 3
60029: PUSH
60030: EMPTY
60031: LIST
60032: LIST
60033: PUSH
60034: LD_INT 0
60036: PUSH
60037: LD_INT 3
60039: PUSH
60040: EMPTY
60041: LIST
60042: LIST
60043: PUSH
60044: LD_INT 1
60046: NEG
60047: PUSH
60048: LD_INT 2
60050: PUSH
60051: EMPTY
60052: LIST
60053: LIST
60054: PUSH
60055: LD_INT 2
60057: NEG
60058: PUSH
60059: LD_INT 1
60061: PUSH
60062: EMPTY
60063: LIST
60064: LIST
60065: PUSH
60066: LD_INT 3
60068: NEG
60069: PUSH
60070: LD_INT 0
60072: PUSH
60073: EMPTY
60074: LIST
60075: LIST
60076: PUSH
60077: LD_INT 3
60079: NEG
60080: PUSH
60081: LD_INT 1
60083: NEG
60084: PUSH
60085: EMPTY
60086: LIST
60087: LIST
60088: PUSH
60089: EMPTY
60090: LIST
60091: LIST
60092: LIST
60093: LIST
60094: LIST
60095: LIST
60096: LIST
60097: LIST
60098: LIST
60099: LIST
60100: LIST
60101: LIST
60102: LIST
60103: LIST
60104: LIST
60105: LIST
60106: LIST
60107: LIST
60108: LIST
60109: LIST
60110: LIST
60111: LIST
60112: LIST
60113: LIST
60114: LIST
60115: LIST
60116: LIST
60117: LIST
60118: LIST
60119: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60120: LD_ADDR_VAR 0 44
60124: PUSH
60125: LD_INT 0
60127: PUSH
60128: LD_INT 0
60130: PUSH
60131: EMPTY
60132: LIST
60133: LIST
60134: PUSH
60135: LD_INT 0
60137: PUSH
60138: LD_INT 1
60140: NEG
60141: PUSH
60142: EMPTY
60143: LIST
60144: LIST
60145: PUSH
60146: LD_INT 1
60148: PUSH
60149: LD_INT 0
60151: PUSH
60152: EMPTY
60153: LIST
60154: LIST
60155: PUSH
60156: LD_INT 1
60158: PUSH
60159: LD_INT 1
60161: PUSH
60162: EMPTY
60163: LIST
60164: LIST
60165: PUSH
60166: LD_INT 0
60168: PUSH
60169: LD_INT 1
60171: PUSH
60172: EMPTY
60173: LIST
60174: LIST
60175: PUSH
60176: LD_INT 1
60178: NEG
60179: PUSH
60180: LD_INT 0
60182: PUSH
60183: EMPTY
60184: LIST
60185: LIST
60186: PUSH
60187: LD_INT 1
60189: NEG
60190: PUSH
60191: LD_INT 1
60193: NEG
60194: PUSH
60195: EMPTY
60196: LIST
60197: LIST
60198: PUSH
60199: LD_INT 1
60201: NEG
60202: PUSH
60203: LD_INT 2
60205: NEG
60206: PUSH
60207: EMPTY
60208: LIST
60209: LIST
60210: PUSH
60211: LD_INT 1
60213: PUSH
60214: LD_INT 1
60216: NEG
60217: PUSH
60218: EMPTY
60219: LIST
60220: LIST
60221: PUSH
60222: LD_INT 2
60224: PUSH
60225: LD_INT 0
60227: PUSH
60228: EMPTY
60229: LIST
60230: LIST
60231: PUSH
60232: LD_INT 2
60234: PUSH
60235: LD_INT 1
60237: PUSH
60238: EMPTY
60239: LIST
60240: LIST
60241: PUSH
60242: LD_INT 2
60244: PUSH
60245: LD_INT 2
60247: PUSH
60248: EMPTY
60249: LIST
60250: LIST
60251: PUSH
60252: LD_INT 1
60254: PUSH
60255: LD_INT 2
60257: PUSH
60258: EMPTY
60259: LIST
60260: LIST
60261: PUSH
60262: LD_INT 1
60264: NEG
60265: PUSH
60266: LD_INT 1
60268: PUSH
60269: EMPTY
60270: LIST
60271: LIST
60272: PUSH
60273: LD_INT 2
60275: NEG
60276: PUSH
60277: LD_INT 0
60279: PUSH
60280: EMPTY
60281: LIST
60282: LIST
60283: PUSH
60284: LD_INT 2
60286: NEG
60287: PUSH
60288: LD_INT 1
60290: NEG
60291: PUSH
60292: EMPTY
60293: LIST
60294: LIST
60295: PUSH
60296: LD_INT 2
60298: NEG
60299: PUSH
60300: LD_INT 2
60302: NEG
60303: PUSH
60304: EMPTY
60305: LIST
60306: LIST
60307: PUSH
60308: LD_INT 2
60310: NEG
60311: PUSH
60312: LD_INT 3
60314: NEG
60315: PUSH
60316: EMPTY
60317: LIST
60318: LIST
60319: PUSH
60320: LD_INT 2
60322: PUSH
60323: LD_INT 1
60325: NEG
60326: PUSH
60327: EMPTY
60328: LIST
60329: LIST
60330: PUSH
60331: LD_INT 3
60333: PUSH
60334: LD_INT 0
60336: PUSH
60337: EMPTY
60338: LIST
60339: LIST
60340: PUSH
60341: LD_INT 3
60343: PUSH
60344: LD_INT 1
60346: PUSH
60347: EMPTY
60348: LIST
60349: LIST
60350: PUSH
60351: LD_INT 3
60353: PUSH
60354: LD_INT 2
60356: PUSH
60357: EMPTY
60358: LIST
60359: LIST
60360: PUSH
60361: LD_INT 3
60363: PUSH
60364: LD_INT 3
60366: PUSH
60367: EMPTY
60368: LIST
60369: LIST
60370: PUSH
60371: LD_INT 2
60373: PUSH
60374: LD_INT 3
60376: PUSH
60377: EMPTY
60378: LIST
60379: LIST
60380: PUSH
60381: LD_INT 2
60383: NEG
60384: PUSH
60385: LD_INT 1
60387: PUSH
60388: EMPTY
60389: LIST
60390: LIST
60391: PUSH
60392: LD_INT 3
60394: NEG
60395: PUSH
60396: LD_INT 0
60398: PUSH
60399: EMPTY
60400: LIST
60401: LIST
60402: PUSH
60403: LD_INT 3
60405: NEG
60406: PUSH
60407: LD_INT 1
60409: NEG
60410: PUSH
60411: EMPTY
60412: LIST
60413: LIST
60414: PUSH
60415: LD_INT 3
60417: NEG
60418: PUSH
60419: LD_INT 2
60421: NEG
60422: PUSH
60423: EMPTY
60424: LIST
60425: LIST
60426: PUSH
60427: LD_INT 3
60429: NEG
60430: PUSH
60431: LD_INT 3
60433: NEG
60434: PUSH
60435: EMPTY
60436: LIST
60437: LIST
60438: PUSH
60439: EMPTY
60440: LIST
60441: LIST
60442: LIST
60443: LIST
60444: LIST
60445: LIST
60446: LIST
60447: LIST
60448: LIST
60449: LIST
60450: LIST
60451: LIST
60452: LIST
60453: LIST
60454: LIST
60455: LIST
60456: LIST
60457: LIST
60458: LIST
60459: LIST
60460: LIST
60461: LIST
60462: LIST
60463: LIST
60464: LIST
60465: LIST
60466: LIST
60467: LIST
60468: LIST
60469: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60470: LD_ADDR_VAR 0 45
60474: PUSH
60475: LD_INT 0
60477: PUSH
60478: LD_INT 0
60480: PUSH
60481: EMPTY
60482: LIST
60483: LIST
60484: PUSH
60485: LD_INT 0
60487: PUSH
60488: LD_INT 1
60490: NEG
60491: PUSH
60492: EMPTY
60493: LIST
60494: LIST
60495: PUSH
60496: LD_INT 1
60498: PUSH
60499: LD_INT 0
60501: PUSH
60502: EMPTY
60503: LIST
60504: LIST
60505: PUSH
60506: LD_INT 1
60508: PUSH
60509: LD_INT 1
60511: PUSH
60512: EMPTY
60513: LIST
60514: LIST
60515: PUSH
60516: LD_INT 0
60518: PUSH
60519: LD_INT 1
60521: PUSH
60522: EMPTY
60523: LIST
60524: LIST
60525: PUSH
60526: LD_INT 1
60528: NEG
60529: PUSH
60530: LD_INT 0
60532: PUSH
60533: EMPTY
60534: LIST
60535: LIST
60536: PUSH
60537: LD_INT 1
60539: NEG
60540: PUSH
60541: LD_INT 1
60543: NEG
60544: PUSH
60545: EMPTY
60546: LIST
60547: LIST
60548: PUSH
60549: LD_INT 1
60551: NEG
60552: PUSH
60553: LD_INT 2
60555: NEG
60556: PUSH
60557: EMPTY
60558: LIST
60559: LIST
60560: PUSH
60561: LD_INT 0
60563: PUSH
60564: LD_INT 2
60566: NEG
60567: PUSH
60568: EMPTY
60569: LIST
60570: LIST
60571: PUSH
60572: LD_INT 1
60574: PUSH
60575: LD_INT 1
60577: NEG
60578: PUSH
60579: EMPTY
60580: LIST
60581: LIST
60582: PUSH
60583: LD_INT 2
60585: PUSH
60586: LD_INT 1
60588: PUSH
60589: EMPTY
60590: LIST
60591: LIST
60592: PUSH
60593: LD_INT 2
60595: PUSH
60596: LD_INT 2
60598: PUSH
60599: EMPTY
60600: LIST
60601: LIST
60602: PUSH
60603: LD_INT 1
60605: PUSH
60606: LD_INT 2
60608: PUSH
60609: EMPTY
60610: LIST
60611: LIST
60612: PUSH
60613: LD_INT 0
60615: PUSH
60616: LD_INT 2
60618: PUSH
60619: EMPTY
60620: LIST
60621: LIST
60622: PUSH
60623: LD_INT 1
60625: NEG
60626: PUSH
60627: LD_INT 1
60629: PUSH
60630: EMPTY
60631: LIST
60632: LIST
60633: PUSH
60634: LD_INT 2
60636: NEG
60637: PUSH
60638: LD_INT 1
60640: NEG
60641: PUSH
60642: EMPTY
60643: LIST
60644: LIST
60645: PUSH
60646: LD_INT 2
60648: NEG
60649: PUSH
60650: LD_INT 2
60652: NEG
60653: PUSH
60654: EMPTY
60655: LIST
60656: LIST
60657: PUSH
60658: LD_INT 2
60660: NEG
60661: PUSH
60662: LD_INT 3
60664: NEG
60665: PUSH
60666: EMPTY
60667: LIST
60668: LIST
60669: PUSH
60670: LD_INT 1
60672: NEG
60673: PUSH
60674: LD_INT 3
60676: NEG
60677: PUSH
60678: EMPTY
60679: LIST
60680: LIST
60681: PUSH
60682: LD_INT 0
60684: PUSH
60685: LD_INT 3
60687: NEG
60688: PUSH
60689: EMPTY
60690: LIST
60691: LIST
60692: PUSH
60693: LD_INT 1
60695: PUSH
60696: LD_INT 2
60698: NEG
60699: PUSH
60700: EMPTY
60701: LIST
60702: LIST
60703: PUSH
60704: LD_INT 3
60706: PUSH
60707: LD_INT 2
60709: PUSH
60710: EMPTY
60711: LIST
60712: LIST
60713: PUSH
60714: LD_INT 3
60716: PUSH
60717: LD_INT 3
60719: PUSH
60720: EMPTY
60721: LIST
60722: LIST
60723: PUSH
60724: LD_INT 2
60726: PUSH
60727: LD_INT 3
60729: PUSH
60730: EMPTY
60731: LIST
60732: LIST
60733: PUSH
60734: LD_INT 1
60736: PUSH
60737: LD_INT 3
60739: PUSH
60740: EMPTY
60741: LIST
60742: LIST
60743: PUSH
60744: LD_INT 0
60746: PUSH
60747: LD_INT 3
60749: PUSH
60750: EMPTY
60751: LIST
60752: LIST
60753: PUSH
60754: LD_INT 1
60756: NEG
60757: PUSH
60758: LD_INT 2
60760: PUSH
60761: EMPTY
60762: LIST
60763: LIST
60764: PUSH
60765: LD_INT 3
60767: NEG
60768: PUSH
60769: LD_INT 2
60771: NEG
60772: PUSH
60773: EMPTY
60774: LIST
60775: LIST
60776: PUSH
60777: LD_INT 3
60779: NEG
60780: PUSH
60781: LD_INT 3
60783: NEG
60784: PUSH
60785: EMPTY
60786: LIST
60787: LIST
60788: PUSH
60789: EMPTY
60790: LIST
60791: LIST
60792: LIST
60793: LIST
60794: LIST
60795: LIST
60796: LIST
60797: LIST
60798: LIST
60799: LIST
60800: LIST
60801: LIST
60802: LIST
60803: LIST
60804: LIST
60805: LIST
60806: LIST
60807: LIST
60808: LIST
60809: LIST
60810: LIST
60811: LIST
60812: LIST
60813: LIST
60814: LIST
60815: LIST
60816: LIST
60817: LIST
60818: LIST
60819: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60820: LD_ADDR_VAR 0 46
60824: PUSH
60825: LD_INT 0
60827: PUSH
60828: LD_INT 0
60830: PUSH
60831: EMPTY
60832: LIST
60833: LIST
60834: PUSH
60835: LD_INT 0
60837: PUSH
60838: LD_INT 1
60840: NEG
60841: PUSH
60842: EMPTY
60843: LIST
60844: LIST
60845: PUSH
60846: LD_INT 1
60848: PUSH
60849: LD_INT 0
60851: PUSH
60852: EMPTY
60853: LIST
60854: LIST
60855: PUSH
60856: LD_INT 1
60858: PUSH
60859: LD_INT 1
60861: PUSH
60862: EMPTY
60863: LIST
60864: LIST
60865: PUSH
60866: LD_INT 0
60868: PUSH
60869: LD_INT 1
60871: PUSH
60872: EMPTY
60873: LIST
60874: LIST
60875: PUSH
60876: LD_INT 1
60878: NEG
60879: PUSH
60880: LD_INT 0
60882: PUSH
60883: EMPTY
60884: LIST
60885: LIST
60886: PUSH
60887: LD_INT 1
60889: NEG
60890: PUSH
60891: LD_INT 1
60893: NEG
60894: PUSH
60895: EMPTY
60896: LIST
60897: LIST
60898: PUSH
60899: LD_INT 1
60901: NEG
60902: PUSH
60903: LD_INT 2
60905: NEG
60906: PUSH
60907: EMPTY
60908: LIST
60909: LIST
60910: PUSH
60911: LD_INT 0
60913: PUSH
60914: LD_INT 2
60916: NEG
60917: PUSH
60918: EMPTY
60919: LIST
60920: LIST
60921: PUSH
60922: LD_INT 1
60924: PUSH
60925: LD_INT 1
60927: NEG
60928: PUSH
60929: EMPTY
60930: LIST
60931: LIST
60932: PUSH
60933: LD_INT 2
60935: PUSH
60936: LD_INT 0
60938: PUSH
60939: EMPTY
60940: LIST
60941: LIST
60942: PUSH
60943: LD_INT 2
60945: PUSH
60946: LD_INT 1
60948: PUSH
60949: EMPTY
60950: LIST
60951: LIST
60952: PUSH
60953: LD_INT 1
60955: PUSH
60956: LD_INT 2
60958: PUSH
60959: EMPTY
60960: LIST
60961: LIST
60962: PUSH
60963: LD_INT 0
60965: PUSH
60966: LD_INT 2
60968: PUSH
60969: EMPTY
60970: LIST
60971: LIST
60972: PUSH
60973: LD_INT 1
60975: NEG
60976: PUSH
60977: LD_INT 1
60979: PUSH
60980: EMPTY
60981: LIST
60982: LIST
60983: PUSH
60984: LD_INT 2
60986: NEG
60987: PUSH
60988: LD_INT 0
60990: PUSH
60991: EMPTY
60992: LIST
60993: LIST
60994: PUSH
60995: LD_INT 2
60997: NEG
60998: PUSH
60999: LD_INT 1
61001: NEG
61002: PUSH
61003: EMPTY
61004: LIST
61005: LIST
61006: PUSH
61007: LD_INT 1
61009: NEG
61010: PUSH
61011: LD_INT 3
61013: NEG
61014: PUSH
61015: EMPTY
61016: LIST
61017: LIST
61018: PUSH
61019: LD_INT 0
61021: PUSH
61022: LD_INT 3
61024: NEG
61025: PUSH
61026: EMPTY
61027: LIST
61028: LIST
61029: PUSH
61030: LD_INT 1
61032: PUSH
61033: LD_INT 2
61035: NEG
61036: PUSH
61037: EMPTY
61038: LIST
61039: LIST
61040: PUSH
61041: LD_INT 2
61043: PUSH
61044: LD_INT 1
61046: NEG
61047: PUSH
61048: EMPTY
61049: LIST
61050: LIST
61051: PUSH
61052: LD_INT 3
61054: PUSH
61055: LD_INT 0
61057: PUSH
61058: EMPTY
61059: LIST
61060: LIST
61061: PUSH
61062: LD_INT 3
61064: PUSH
61065: LD_INT 1
61067: PUSH
61068: EMPTY
61069: LIST
61070: LIST
61071: PUSH
61072: LD_INT 1
61074: PUSH
61075: LD_INT 3
61077: PUSH
61078: EMPTY
61079: LIST
61080: LIST
61081: PUSH
61082: LD_INT 0
61084: PUSH
61085: LD_INT 3
61087: PUSH
61088: EMPTY
61089: LIST
61090: LIST
61091: PUSH
61092: LD_INT 1
61094: NEG
61095: PUSH
61096: LD_INT 2
61098: PUSH
61099: EMPTY
61100: LIST
61101: LIST
61102: PUSH
61103: LD_INT 2
61105: NEG
61106: PUSH
61107: LD_INT 1
61109: PUSH
61110: EMPTY
61111: LIST
61112: LIST
61113: PUSH
61114: LD_INT 3
61116: NEG
61117: PUSH
61118: LD_INT 0
61120: PUSH
61121: EMPTY
61122: LIST
61123: LIST
61124: PUSH
61125: LD_INT 3
61127: NEG
61128: PUSH
61129: LD_INT 1
61131: NEG
61132: PUSH
61133: EMPTY
61134: LIST
61135: LIST
61136: PUSH
61137: EMPTY
61138: LIST
61139: LIST
61140: LIST
61141: LIST
61142: LIST
61143: LIST
61144: LIST
61145: LIST
61146: LIST
61147: LIST
61148: LIST
61149: LIST
61150: LIST
61151: LIST
61152: LIST
61153: LIST
61154: LIST
61155: LIST
61156: LIST
61157: LIST
61158: LIST
61159: LIST
61160: LIST
61161: LIST
61162: LIST
61163: LIST
61164: LIST
61165: LIST
61166: LIST
61167: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61168: LD_ADDR_VAR 0 47
61172: PUSH
61173: LD_INT 0
61175: PUSH
61176: LD_INT 0
61178: PUSH
61179: EMPTY
61180: LIST
61181: LIST
61182: PUSH
61183: LD_INT 0
61185: PUSH
61186: LD_INT 1
61188: NEG
61189: PUSH
61190: EMPTY
61191: LIST
61192: LIST
61193: PUSH
61194: LD_INT 1
61196: PUSH
61197: LD_INT 0
61199: PUSH
61200: EMPTY
61201: LIST
61202: LIST
61203: PUSH
61204: LD_INT 1
61206: PUSH
61207: LD_INT 1
61209: PUSH
61210: EMPTY
61211: LIST
61212: LIST
61213: PUSH
61214: LD_INT 0
61216: PUSH
61217: LD_INT 1
61219: PUSH
61220: EMPTY
61221: LIST
61222: LIST
61223: PUSH
61224: LD_INT 1
61226: NEG
61227: PUSH
61228: LD_INT 0
61230: PUSH
61231: EMPTY
61232: LIST
61233: LIST
61234: PUSH
61235: LD_INT 1
61237: NEG
61238: PUSH
61239: LD_INT 1
61241: NEG
61242: PUSH
61243: EMPTY
61244: LIST
61245: LIST
61246: PUSH
61247: LD_INT 1
61249: NEG
61250: PUSH
61251: LD_INT 2
61253: NEG
61254: PUSH
61255: EMPTY
61256: LIST
61257: LIST
61258: PUSH
61259: LD_INT 0
61261: PUSH
61262: LD_INT 2
61264: NEG
61265: PUSH
61266: EMPTY
61267: LIST
61268: LIST
61269: PUSH
61270: LD_INT 1
61272: PUSH
61273: LD_INT 1
61275: NEG
61276: PUSH
61277: EMPTY
61278: LIST
61279: LIST
61280: PUSH
61281: LD_INT 2
61283: NEG
61284: PUSH
61285: LD_INT 1
61287: NEG
61288: PUSH
61289: EMPTY
61290: LIST
61291: LIST
61292: PUSH
61293: LD_INT 2
61295: NEG
61296: PUSH
61297: LD_INT 2
61299: NEG
61300: PUSH
61301: EMPTY
61302: LIST
61303: LIST
61304: PUSH
61305: EMPTY
61306: LIST
61307: LIST
61308: LIST
61309: LIST
61310: LIST
61311: LIST
61312: LIST
61313: LIST
61314: LIST
61315: LIST
61316: LIST
61317: LIST
61318: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
61319: LD_ADDR_VAR 0 48
61323: PUSH
61324: LD_INT 0
61326: PUSH
61327: LD_INT 0
61329: PUSH
61330: EMPTY
61331: LIST
61332: LIST
61333: PUSH
61334: LD_INT 0
61336: PUSH
61337: LD_INT 1
61339: NEG
61340: PUSH
61341: EMPTY
61342: LIST
61343: LIST
61344: PUSH
61345: LD_INT 1
61347: PUSH
61348: LD_INT 0
61350: PUSH
61351: EMPTY
61352: LIST
61353: LIST
61354: PUSH
61355: LD_INT 1
61357: PUSH
61358: LD_INT 1
61360: PUSH
61361: EMPTY
61362: LIST
61363: LIST
61364: PUSH
61365: LD_INT 0
61367: PUSH
61368: LD_INT 1
61370: PUSH
61371: EMPTY
61372: LIST
61373: LIST
61374: PUSH
61375: LD_INT 1
61377: NEG
61378: PUSH
61379: LD_INT 0
61381: PUSH
61382: EMPTY
61383: LIST
61384: LIST
61385: PUSH
61386: LD_INT 1
61388: NEG
61389: PUSH
61390: LD_INT 1
61392: NEG
61393: PUSH
61394: EMPTY
61395: LIST
61396: LIST
61397: PUSH
61398: LD_INT 1
61400: NEG
61401: PUSH
61402: LD_INT 2
61404: NEG
61405: PUSH
61406: EMPTY
61407: LIST
61408: LIST
61409: PUSH
61410: LD_INT 0
61412: PUSH
61413: LD_INT 2
61415: NEG
61416: PUSH
61417: EMPTY
61418: LIST
61419: LIST
61420: PUSH
61421: LD_INT 1
61423: PUSH
61424: LD_INT 1
61426: NEG
61427: PUSH
61428: EMPTY
61429: LIST
61430: LIST
61431: PUSH
61432: LD_INT 2
61434: PUSH
61435: LD_INT 0
61437: PUSH
61438: EMPTY
61439: LIST
61440: LIST
61441: PUSH
61442: LD_INT 2
61444: PUSH
61445: LD_INT 1
61447: PUSH
61448: EMPTY
61449: LIST
61450: LIST
61451: PUSH
61452: EMPTY
61453: LIST
61454: LIST
61455: LIST
61456: LIST
61457: LIST
61458: LIST
61459: LIST
61460: LIST
61461: LIST
61462: LIST
61463: LIST
61464: LIST
61465: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
61466: LD_ADDR_VAR 0 49
61470: PUSH
61471: LD_INT 0
61473: PUSH
61474: LD_INT 0
61476: PUSH
61477: EMPTY
61478: LIST
61479: LIST
61480: PUSH
61481: LD_INT 0
61483: PUSH
61484: LD_INT 1
61486: NEG
61487: PUSH
61488: EMPTY
61489: LIST
61490: LIST
61491: PUSH
61492: LD_INT 1
61494: PUSH
61495: LD_INT 0
61497: PUSH
61498: EMPTY
61499: LIST
61500: LIST
61501: PUSH
61502: LD_INT 1
61504: PUSH
61505: LD_INT 1
61507: PUSH
61508: EMPTY
61509: LIST
61510: LIST
61511: PUSH
61512: LD_INT 0
61514: PUSH
61515: LD_INT 1
61517: PUSH
61518: EMPTY
61519: LIST
61520: LIST
61521: PUSH
61522: LD_INT 1
61524: NEG
61525: PUSH
61526: LD_INT 0
61528: PUSH
61529: EMPTY
61530: LIST
61531: LIST
61532: PUSH
61533: LD_INT 1
61535: NEG
61536: PUSH
61537: LD_INT 1
61539: NEG
61540: PUSH
61541: EMPTY
61542: LIST
61543: LIST
61544: PUSH
61545: LD_INT 1
61547: PUSH
61548: LD_INT 1
61550: NEG
61551: PUSH
61552: EMPTY
61553: LIST
61554: LIST
61555: PUSH
61556: LD_INT 2
61558: PUSH
61559: LD_INT 0
61561: PUSH
61562: EMPTY
61563: LIST
61564: LIST
61565: PUSH
61566: LD_INT 2
61568: PUSH
61569: LD_INT 1
61571: PUSH
61572: EMPTY
61573: LIST
61574: LIST
61575: PUSH
61576: LD_INT 2
61578: PUSH
61579: LD_INT 2
61581: PUSH
61582: EMPTY
61583: LIST
61584: LIST
61585: PUSH
61586: LD_INT 1
61588: PUSH
61589: LD_INT 2
61591: PUSH
61592: EMPTY
61593: LIST
61594: LIST
61595: PUSH
61596: EMPTY
61597: LIST
61598: LIST
61599: LIST
61600: LIST
61601: LIST
61602: LIST
61603: LIST
61604: LIST
61605: LIST
61606: LIST
61607: LIST
61608: LIST
61609: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
61610: LD_ADDR_VAR 0 50
61614: PUSH
61615: LD_INT 0
61617: PUSH
61618: LD_INT 0
61620: PUSH
61621: EMPTY
61622: LIST
61623: LIST
61624: PUSH
61625: LD_INT 0
61627: PUSH
61628: LD_INT 1
61630: NEG
61631: PUSH
61632: EMPTY
61633: LIST
61634: LIST
61635: PUSH
61636: LD_INT 1
61638: PUSH
61639: LD_INT 0
61641: PUSH
61642: EMPTY
61643: LIST
61644: LIST
61645: PUSH
61646: LD_INT 1
61648: PUSH
61649: LD_INT 1
61651: PUSH
61652: EMPTY
61653: LIST
61654: LIST
61655: PUSH
61656: LD_INT 0
61658: PUSH
61659: LD_INT 1
61661: PUSH
61662: EMPTY
61663: LIST
61664: LIST
61665: PUSH
61666: LD_INT 1
61668: NEG
61669: PUSH
61670: LD_INT 0
61672: PUSH
61673: EMPTY
61674: LIST
61675: LIST
61676: PUSH
61677: LD_INT 1
61679: NEG
61680: PUSH
61681: LD_INT 1
61683: NEG
61684: PUSH
61685: EMPTY
61686: LIST
61687: LIST
61688: PUSH
61689: LD_INT 2
61691: PUSH
61692: LD_INT 1
61694: PUSH
61695: EMPTY
61696: LIST
61697: LIST
61698: PUSH
61699: LD_INT 2
61701: PUSH
61702: LD_INT 2
61704: PUSH
61705: EMPTY
61706: LIST
61707: LIST
61708: PUSH
61709: LD_INT 1
61711: PUSH
61712: LD_INT 2
61714: PUSH
61715: EMPTY
61716: LIST
61717: LIST
61718: PUSH
61719: LD_INT 0
61721: PUSH
61722: LD_INT 2
61724: PUSH
61725: EMPTY
61726: LIST
61727: LIST
61728: PUSH
61729: LD_INT 1
61731: NEG
61732: PUSH
61733: LD_INT 1
61735: PUSH
61736: EMPTY
61737: LIST
61738: LIST
61739: PUSH
61740: EMPTY
61741: LIST
61742: LIST
61743: LIST
61744: LIST
61745: LIST
61746: LIST
61747: LIST
61748: LIST
61749: LIST
61750: LIST
61751: LIST
61752: LIST
61753: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
61754: LD_ADDR_VAR 0 51
61758: PUSH
61759: LD_INT 0
61761: PUSH
61762: LD_INT 0
61764: PUSH
61765: EMPTY
61766: LIST
61767: LIST
61768: PUSH
61769: LD_INT 0
61771: PUSH
61772: LD_INT 1
61774: NEG
61775: PUSH
61776: EMPTY
61777: LIST
61778: LIST
61779: PUSH
61780: LD_INT 1
61782: PUSH
61783: LD_INT 0
61785: PUSH
61786: EMPTY
61787: LIST
61788: LIST
61789: PUSH
61790: LD_INT 1
61792: PUSH
61793: LD_INT 1
61795: PUSH
61796: EMPTY
61797: LIST
61798: LIST
61799: PUSH
61800: LD_INT 0
61802: PUSH
61803: LD_INT 1
61805: PUSH
61806: EMPTY
61807: LIST
61808: LIST
61809: PUSH
61810: LD_INT 1
61812: NEG
61813: PUSH
61814: LD_INT 0
61816: PUSH
61817: EMPTY
61818: LIST
61819: LIST
61820: PUSH
61821: LD_INT 1
61823: NEG
61824: PUSH
61825: LD_INT 1
61827: NEG
61828: PUSH
61829: EMPTY
61830: LIST
61831: LIST
61832: PUSH
61833: LD_INT 1
61835: PUSH
61836: LD_INT 2
61838: PUSH
61839: EMPTY
61840: LIST
61841: LIST
61842: PUSH
61843: LD_INT 0
61845: PUSH
61846: LD_INT 2
61848: PUSH
61849: EMPTY
61850: LIST
61851: LIST
61852: PUSH
61853: LD_INT 1
61855: NEG
61856: PUSH
61857: LD_INT 1
61859: PUSH
61860: EMPTY
61861: LIST
61862: LIST
61863: PUSH
61864: LD_INT 2
61866: NEG
61867: PUSH
61868: LD_INT 0
61870: PUSH
61871: EMPTY
61872: LIST
61873: LIST
61874: PUSH
61875: LD_INT 2
61877: NEG
61878: PUSH
61879: LD_INT 1
61881: NEG
61882: PUSH
61883: EMPTY
61884: LIST
61885: LIST
61886: PUSH
61887: EMPTY
61888: LIST
61889: LIST
61890: LIST
61891: LIST
61892: LIST
61893: LIST
61894: LIST
61895: LIST
61896: LIST
61897: LIST
61898: LIST
61899: LIST
61900: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61901: LD_ADDR_VAR 0 52
61905: PUSH
61906: LD_INT 0
61908: PUSH
61909: LD_INT 0
61911: PUSH
61912: EMPTY
61913: LIST
61914: LIST
61915: PUSH
61916: LD_INT 0
61918: PUSH
61919: LD_INT 1
61921: NEG
61922: PUSH
61923: EMPTY
61924: LIST
61925: LIST
61926: PUSH
61927: LD_INT 1
61929: PUSH
61930: LD_INT 0
61932: PUSH
61933: EMPTY
61934: LIST
61935: LIST
61936: PUSH
61937: LD_INT 1
61939: PUSH
61940: LD_INT 1
61942: PUSH
61943: EMPTY
61944: LIST
61945: LIST
61946: PUSH
61947: LD_INT 0
61949: PUSH
61950: LD_INT 1
61952: PUSH
61953: EMPTY
61954: LIST
61955: LIST
61956: PUSH
61957: LD_INT 1
61959: NEG
61960: PUSH
61961: LD_INT 0
61963: PUSH
61964: EMPTY
61965: LIST
61966: LIST
61967: PUSH
61968: LD_INT 1
61970: NEG
61971: PUSH
61972: LD_INT 1
61974: NEG
61975: PUSH
61976: EMPTY
61977: LIST
61978: LIST
61979: PUSH
61980: LD_INT 1
61982: NEG
61983: PUSH
61984: LD_INT 2
61986: NEG
61987: PUSH
61988: EMPTY
61989: LIST
61990: LIST
61991: PUSH
61992: LD_INT 1
61994: NEG
61995: PUSH
61996: LD_INT 1
61998: PUSH
61999: EMPTY
62000: LIST
62001: LIST
62002: PUSH
62003: LD_INT 2
62005: NEG
62006: PUSH
62007: LD_INT 0
62009: PUSH
62010: EMPTY
62011: LIST
62012: LIST
62013: PUSH
62014: LD_INT 2
62016: NEG
62017: PUSH
62018: LD_INT 1
62020: NEG
62021: PUSH
62022: EMPTY
62023: LIST
62024: LIST
62025: PUSH
62026: LD_INT 2
62028: NEG
62029: PUSH
62030: LD_INT 2
62032: NEG
62033: PUSH
62034: EMPTY
62035: LIST
62036: LIST
62037: PUSH
62038: EMPTY
62039: LIST
62040: LIST
62041: LIST
62042: LIST
62043: LIST
62044: LIST
62045: LIST
62046: LIST
62047: LIST
62048: LIST
62049: LIST
62050: LIST
62051: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62052: LD_ADDR_VAR 0 53
62056: PUSH
62057: LD_INT 0
62059: PUSH
62060: LD_INT 0
62062: PUSH
62063: EMPTY
62064: LIST
62065: LIST
62066: PUSH
62067: LD_INT 0
62069: PUSH
62070: LD_INT 1
62072: NEG
62073: PUSH
62074: EMPTY
62075: LIST
62076: LIST
62077: PUSH
62078: LD_INT 1
62080: PUSH
62081: LD_INT 0
62083: PUSH
62084: EMPTY
62085: LIST
62086: LIST
62087: PUSH
62088: LD_INT 1
62090: PUSH
62091: LD_INT 1
62093: PUSH
62094: EMPTY
62095: LIST
62096: LIST
62097: PUSH
62098: LD_INT 0
62100: PUSH
62101: LD_INT 1
62103: PUSH
62104: EMPTY
62105: LIST
62106: LIST
62107: PUSH
62108: LD_INT 1
62110: NEG
62111: PUSH
62112: LD_INT 0
62114: PUSH
62115: EMPTY
62116: LIST
62117: LIST
62118: PUSH
62119: LD_INT 1
62121: NEG
62122: PUSH
62123: LD_INT 1
62125: NEG
62126: PUSH
62127: EMPTY
62128: LIST
62129: LIST
62130: PUSH
62131: LD_INT 1
62133: NEG
62134: PUSH
62135: LD_INT 2
62137: NEG
62138: PUSH
62139: EMPTY
62140: LIST
62141: LIST
62142: PUSH
62143: LD_INT 0
62145: PUSH
62146: LD_INT 2
62148: NEG
62149: PUSH
62150: EMPTY
62151: LIST
62152: LIST
62153: PUSH
62154: LD_INT 1
62156: PUSH
62157: LD_INT 1
62159: NEG
62160: PUSH
62161: EMPTY
62162: LIST
62163: LIST
62164: PUSH
62165: LD_INT 2
62167: PUSH
62168: LD_INT 0
62170: PUSH
62171: EMPTY
62172: LIST
62173: LIST
62174: PUSH
62175: LD_INT 2
62177: PUSH
62178: LD_INT 1
62180: PUSH
62181: EMPTY
62182: LIST
62183: LIST
62184: PUSH
62185: LD_INT 2
62187: PUSH
62188: LD_INT 2
62190: PUSH
62191: EMPTY
62192: LIST
62193: LIST
62194: PUSH
62195: LD_INT 1
62197: PUSH
62198: LD_INT 2
62200: PUSH
62201: EMPTY
62202: LIST
62203: LIST
62204: PUSH
62205: LD_INT 0
62207: PUSH
62208: LD_INT 2
62210: PUSH
62211: EMPTY
62212: LIST
62213: LIST
62214: PUSH
62215: LD_INT 1
62217: NEG
62218: PUSH
62219: LD_INT 1
62221: PUSH
62222: EMPTY
62223: LIST
62224: LIST
62225: PUSH
62226: LD_INT 2
62228: NEG
62229: PUSH
62230: LD_INT 0
62232: PUSH
62233: EMPTY
62234: LIST
62235: LIST
62236: PUSH
62237: LD_INT 2
62239: NEG
62240: PUSH
62241: LD_INT 1
62243: NEG
62244: PUSH
62245: EMPTY
62246: LIST
62247: LIST
62248: PUSH
62249: LD_INT 2
62251: NEG
62252: PUSH
62253: LD_INT 2
62255: NEG
62256: PUSH
62257: EMPTY
62258: LIST
62259: LIST
62260: PUSH
62261: EMPTY
62262: LIST
62263: LIST
62264: LIST
62265: LIST
62266: LIST
62267: LIST
62268: LIST
62269: LIST
62270: LIST
62271: LIST
62272: LIST
62273: LIST
62274: LIST
62275: LIST
62276: LIST
62277: LIST
62278: LIST
62279: LIST
62280: LIST
62281: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62282: LD_ADDR_VAR 0 54
62286: PUSH
62287: LD_INT 0
62289: PUSH
62290: LD_INT 0
62292: PUSH
62293: EMPTY
62294: LIST
62295: LIST
62296: PUSH
62297: LD_INT 0
62299: PUSH
62300: LD_INT 1
62302: NEG
62303: PUSH
62304: EMPTY
62305: LIST
62306: LIST
62307: PUSH
62308: LD_INT 1
62310: PUSH
62311: LD_INT 0
62313: PUSH
62314: EMPTY
62315: LIST
62316: LIST
62317: PUSH
62318: LD_INT 1
62320: PUSH
62321: LD_INT 1
62323: PUSH
62324: EMPTY
62325: LIST
62326: LIST
62327: PUSH
62328: LD_INT 0
62330: PUSH
62331: LD_INT 1
62333: PUSH
62334: EMPTY
62335: LIST
62336: LIST
62337: PUSH
62338: LD_INT 1
62340: NEG
62341: PUSH
62342: LD_INT 0
62344: PUSH
62345: EMPTY
62346: LIST
62347: LIST
62348: PUSH
62349: LD_INT 1
62351: NEG
62352: PUSH
62353: LD_INT 1
62355: NEG
62356: PUSH
62357: EMPTY
62358: LIST
62359: LIST
62360: PUSH
62361: LD_INT 1
62363: NEG
62364: PUSH
62365: LD_INT 2
62367: NEG
62368: PUSH
62369: EMPTY
62370: LIST
62371: LIST
62372: PUSH
62373: LD_INT 0
62375: PUSH
62376: LD_INT 2
62378: NEG
62379: PUSH
62380: EMPTY
62381: LIST
62382: LIST
62383: PUSH
62384: LD_INT 1
62386: PUSH
62387: LD_INT 1
62389: NEG
62390: PUSH
62391: EMPTY
62392: LIST
62393: LIST
62394: PUSH
62395: LD_INT 2
62397: PUSH
62398: LD_INT 0
62400: PUSH
62401: EMPTY
62402: LIST
62403: LIST
62404: PUSH
62405: LD_INT 2
62407: PUSH
62408: LD_INT 1
62410: PUSH
62411: EMPTY
62412: LIST
62413: LIST
62414: PUSH
62415: LD_INT 2
62417: PUSH
62418: LD_INT 2
62420: PUSH
62421: EMPTY
62422: LIST
62423: LIST
62424: PUSH
62425: LD_INT 1
62427: PUSH
62428: LD_INT 2
62430: PUSH
62431: EMPTY
62432: LIST
62433: LIST
62434: PUSH
62435: LD_INT 0
62437: PUSH
62438: LD_INT 2
62440: PUSH
62441: EMPTY
62442: LIST
62443: LIST
62444: PUSH
62445: LD_INT 1
62447: NEG
62448: PUSH
62449: LD_INT 1
62451: PUSH
62452: EMPTY
62453: LIST
62454: LIST
62455: PUSH
62456: LD_INT 2
62458: NEG
62459: PUSH
62460: LD_INT 0
62462: PUSH
62463: EMPTY
62464: LIST
62465: LIST
62466: PUSH
62467: LD_INT 2
62469: NEG
62470: PUSH
62471: LD_INT 1
62473: NEG
62474: PUSH
62475: EMPTY
62476: LIST
62477: LIST
62478: PUSH
62479: LD_INT 2
62481: NEG
62482: PUSH
62483: LD_INT 2
62485: NEG
62486: PUSH
62487: EMPTY
62488: LIST
62489: LIST
62490: PUSH
62491: EMPTY
62492: LIST
62493: LIST
62494: LIST
62495: LIST
62496: LIST
62497: LIST
62498: LIST
62499: LIST
62500: LIST
62501: LIST
62502: LIST
62503: LIST
62504: LIST
62505: LIST
62506: LIST
62507: LIST
62508: LIST
62509: LIST
62510: LIST
62511: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62512: LD_ADDR_VAR 0 55
62516: PUSH
62517: LD_INT 0
62519: PUSH
62520: LD_INT 0
62522: PUSH
62523: EMPTY
62524: LIST
62525: LIST
62526: PUSH
62527: LD_INT 0
62529: PUSH
62530: LD_INT 1
62532: NEG
62533: PUSH
62534: EMPTY
62535: LIST
62536: LIST
62537: PUSH
62538: LD_INT 1
62540: PUSH
62541: LD_INT 0
62543: PUSH
62544: EMPTY
62545: LIST
62546: LIST
62547: PUSH
62548: LD_INT 1
62550: PUSH
62551: LD_INT 1
62553: PUSH
62554: EMPTY
62555: LIST
62556: LIST
62557: PUSH
62558: LD_INT 0
62560: PUSH
62561: LD_INT 1
62563: PUSH
62564: EMPTY
62565: LIST
62566: LIST
62567: PUSH
62568: LD_INT 1
62570: NEG
62571: PUSH
62572: LD_INT 0
62574: PUSH
62575: EMPTY
62576: LIST
62577: LIST
62578: PUSH
62579: LD_INT 1
62581: NEG
62582: PUSH
62583: LD_INT 1
62585: NEG
62586: PUSH
62587: EMPTY
62588: LIST
62589: LIST
62590: PUSH
62591: LD_INT 1
62593: NEG
62594: PUSH
62595: LD_INT 2
62597: NEG
62598: PUSH
62599: EMPTY
62600: LIST
62601: LIST
62602: PUSH
62603: LD_INT 0
62605: PUSH
62606: LD_INT 2
62608: NEG
62609: PUSH
62610: EMPTY
62611: LIST
62612: LIST
62613: PUSH
62614: LD_INT 1
62616: PUSH
62617: LD_INT 1
62619: NEG
62620: PUSH
62621: EMPTY
62622: LIST
62623: LIST
62624: PUSH
62625: LD_INT 2
62627: PUSH
62628: LD_INT 0
62630: PUSH
62631: EMPTY
62632: LIST
62633: LIST
62634: PUSH
62635: LD_INT 2
62637: PUSH
62638: LD_INT 1
62640: PUSH
62641: EMPTY
62642: LIST
62643: LIST
62644: PUSH
62645: LD_INT 2
62647: PUSH
62648: LD_INT 2
62650: PUSH
62651: EMPTY
62652: LIST
62653: LIST
62654: PUSH
62655: LD_INT 1
62657: PUSH
62658: LD_INT 2
62660: PUSH
62661: EMPTY
62662: LIST
62663: LIST
62664: PUSH
62665: LD_INT 0
62667: PUSH
62668: LD_INT 2
62670: PUSH
62671: EMPTY
62672: LIST
62673: LIST
62674: PUSH
62675: LD_INT 1
62677: NEG
62678: PUSH
62679: LD_INT 1
62681: PUSH
62682: EMPTY
62683: LIST
62684: LIST
62685: PUSH
62686: LD_INT 2
62688: NEG
62689: PUSH
62690: LD_INT 0
62692: PUSH
62693: EMPTY
62694: LIST
62695: LIST
62696: PUSH
62697: LD_INT 2
62699: NEG
62700: PUSH
62701: LD_INT 1
62703: NEG
62704: PUSH
62705: EMPTY
62706: LIST
62707: LIST
62708: PUSH
62709: LD_INT 2
62711: NEG
62712: PUSH
62713: LD_INT 2
62715: NEG
62716: PUSH
62717: EMPTY
62718: LIST
62719: LIST
62720: PUSH
62721: EMPTY
62722: LIST
62723: LIST
62724: LIST
62725: LIST
62726: LIST
62727: LIST
62728: LIST
62729: LIST
62730: LIST
62731: LIST
62732: LIST
62733: LIST
62734: LIST
62735: LIST
62736: LIST
62737: LIST
62738: LIST
62739: LIST
62740: LIST
62741: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62742: LD_ADDR_VAR 0 56
62746: PUSH
62747: LD_INT 0
62749: PUSH
62750: LD_INT 0
62752: PUSH
62753: EMPTY
62754: LIST
62755: LIST
62756: PUSH
62757: LD_INT 0
62759: PUSH
62760: LD_INT 1
62762: NEG
62763: PUSH
62764: EMPTY
62765: LIST
62766: LIST
62767: PUSH
62768: LD_INT 1
62770: PUSH
62771: LD_INT 0
62773: PUSH
62774: EMPTY
62775: LIST
62776: LIST
62777: PUSH
62778: LD_INT 1
62780: PUSH
62781: LD_INT 1
62783: PUSH
62784: EMPTY
62785: LIST
62786: LIST
62787: PUSH
62788: LD_INT 0
62790: PUSH
62791: LD_INT 1
62793: PUSH
62794: EMPTY
62795: LIST
62796: LIST
62797: PUSH
62798: LD_INT 1
62800: NEG
62801: PUSH
62802: LD_INT 0
62804: PUSH
62805: EMPTY
62806: LIST
62807: LIST
62808: PUSH
62809: LD_INT 1
62811: NEG
62812: PUSH
62813: LD_INT 1
62815: NEG
62816: PUSH
62817: EMPTY
62818: LIST
62819: LIST
62820: PUSH
62821: LD_INT 1
62823: NEG
62824: PUSH
62825: LD_INT 2
62827: NEG
62828: PUSH
62829: EMPTY
62830: LIST
62831: LIST
62832: PUSH
62833: LD_INT 0
62835: PUSH
62836: LD_INT 2
62838: NEG
62839: PUSH
62840: EMPTY
62841: LIST
62842: LIST
62843: PUSH
62844: LD_INT 1
62846: PUSH
62847: LD_INT 1
62849: NEG
62850: PUSH
62851: EMPTY
62852: LIST
62853: LIST
62854: PUSH
62855: LD_INT 2
62857: PUSH
62858: LD_INT 0
62860: PUSH
62861: EMPTY
62862: LIST
62863: LIST
62864: PUSH
62865: LD_INT 2
62867: PUSH
62868: LD_INT 1
62870: PUSH
62871: EMPTY
62872: LIST
62873: LIST
62874: PUSH
62875: LD_INT 2
62877: PUSH
62878: LD_INT 2
62880: PUSH
62881: EMPTY
62882: LIST
62883: LIST
62884: PUSH
62885: LD_INT 1
62887: PUSH
62888: LD_INT 2
62890: PUSH
62891: EMPTY
62892: LIST
62893: LIST
62894: PUSH
62895: LD_INT 0
62897: PUSH
62898: LD_INT 2
62900: PUSH
62901: EMPTY
62902: LIST
62903: LIST
62904: PUSH
62905: LD_INT 1
62907: NEG
62908: PUSH
62909: LD_INT 1
62911: PUSH
62912: EMPTY
62913: LIST
62914: LIST
62915: PUSH
62916: LD_INT 2
62918: NEG
62919: PUSH
62920: LD_INT 0
62922: PUSH
62923: EMPTY
62924: LIST
62925: LIST
62926: PUSH
62927: LD_INT 2
62929: NEG
62930: PUSH
62931: LD_INT 1
62933: NEG
62934: PUSH
62935: EMPTY
62936: LIST
62937: LIST
62938: PUSH
62939: LD_INT 2
62941: NEG
62942: PUSH
62943: LD_INT 2
62945: NEG
62946: PUSH
62947: EMPTY
62948: LIST
62949: LIST
62950: PUSH
62951: EMPTY
62952: LIST
62953: LIST
62954: LIST
62955: LIST
62956: LIST
62957: LIST
62958: LIST
62959: LIST
62960: LIST
62961: LIST
62962: LIST
62963: LIST
62964: LIST
62965: LIST
62966: LIST
62967: LIST
62968: LIST
62969: LIST
62970: LIST
62971: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62972: LD_ADDR_VAR 0 57
62976: PUSH
62977: LD_INT 0
62979: PUSH
62980: LD_INT 0
62982: PUSH
62983: EMPTY
62984: LIST
62985: LIST
62986: PUSH
62987: LD_INT 0
62989: PUSH
62990: LD_INT 1
62992: NEG
62993: PUSH
62994: EMPTY
62995: LIST
62996: LIST
62997: PUSH
62998: LD_INT 1
63000: PUSH
63001: LD_INT 0
63003: PUSH
63004: EMPTY
63005: LIST
63006: LIST
63007: PUSH
63008: LD_INT 1
63010: PUSH
63011: LD_INT 1
63013: PUSH
63014: EMPTY
63015: LIST
63016: LIST
63017: PUSH
63018: LD_INT 0
63020: PUSH
63021: LD_INT 1
63023: PUSH
63024: EMPTY
63025: LIST
63026: LIST
63027: PUSH
63028: LD_INT 1
63030: NEG
63031: PUSH
63032: LD_INT 0
63034: PUSH
63035: EMPTY
63036: LIST
63037: LIST
63038: PUSH
63039: LD_INT 1
63041: NEG
63042: PUSH
63043: LD_INT 1
63045: NEG
63046: PUSH
63047: EMPTY
63048: LIST
63049: LIST
63050: PUSH
63051: LD_INT 1
63053: NEG
63054: PUSH
63055: LD_INT 2
63057: NEG
63058: PUSH
63059: EMPTY
63060: LIST
63061: LIST
63062: PUSH
63063: LD_INT 0
63065: PUSH
63066: LD_INT 2
63068: NEG
63069: PUSH
63070: EMPTY
63071: LIST
63072: LIST
63073: PUSH
63074: LD_INT 1
63076: PUSH
63077: LD_INT 1
63079: NEG
63080: PUSH
63081: EMPTY
63082: LIST
63083: LIST
63084: PUSH
63085: LD_INT 2
63087: PUSH
63088: LD_INT 0
63090: PUSH
63091: EMPTY
63092: LIST
63093: LIST
63094: PUSH
63095: LD_INT 2
63097: PUSH
63098: LD_INT 1
63100: PUSH
63101: EMPTY
63102: LIST
63103: LIST
63104: PUSH
63105: LD_INT 2
63107: PUSH
63108: LD_INT 2
63110: PUSH
63111: EMPTY
63112: LIST
63113: LIST
63114: PUSH
63115: LD_INT 1
63117: PUSH
63118: LD_INT 2
63120: PUSH
63121: EMPTY
63122: LIST
63123: LIST
63124: PUSH
63125: LD_INT 0
63127: PUSH
63128: LD_INT 2
63130: PUSH
63131: EMPTY
63132: LIST
63133: LIST
63134: PUSH
63135: LD_INT 1
63137: NEG
63138: PUSH
63139: LD_INT 1
63141: PUSH
63142: EMPTY
63143: LIST
63144: LIST
63145: PUSH
63146: LD_INT 2
63148: NEG
63149: PUSH
63150: LD_INT 0
63152: PUSH
63153: EMPTY
63154: LIST
63155: LIST
63156: PUSH
63157: LD_INT 2
63159: NEG
63160: PUSH
63161: LD_INT 1
63163: NEG
63164: PUSH
63165: EMPTY
63166: LIST
63167: LIST
63168: PUSH
63169: LD_INT 2
63171: NEG
63172: PUSH
63173: LD_INT 2
63175: NEG
63176: PUSH
63177: EMPTY
63178: LIST
63179: LIST
63180: PUSH
63181: EMPTY
63182: LIST
63183: LIST
63184: LIST
63185: LIST
63186: LIST
63187: LIST
63188: LIST
63189: LIST
63190: LIST
63191: LIST
63192: LIST
63193: LIST
63194: LIST
63195: LIST
63196: LIST
63197: LIST
63198: LIST
63199: LIST
63200: LIST
63201: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63202: LD_ADDR_VAR 0 58
63206: PUSH
63207: LD_INT 0
63209: PUSH
63210: LD_INT 0
63212: PUSH
63213: EMPTY
63214: LIST
63215: LIST
63216: PUSH
63217: LD_INT 0
63219: PUSH
63220: LD_INT 1
63222: NEG
63223: PUSH
63224: EMPTY
63225: LIST
63226: LIST
63227: PUSH
63228: LD_INT 1
63230: PUSH
63231: LD_INT 0
63233: PUSH
63234: EMPTY
63235: LIST
63236: LIST
63237: PUSH
63238: LD_INT 1
63240: PUSH
63241: LD_INT 1
63243: PUSH
63244: EMPTY
63245: LIST
63246: LIST
63247: PUSH
63248: LD_INT 0
63250: PUSH
63251: LD_INT 1
63253: PUSH
63254: EMPTY
63255: LIST
63256: LIST
63257: PUSH
63258: LD_INT 1
63260: NEG
63261: PUSH
63262: LD_INT 0
63264: PUSH
63265: EMPTY
63266: LIST
63267: LIST
63268: PUSH
63269: LD_INT 1
63271: NEG
63272: PUSH
63273: LD_INT 1
63275: NEG
63276: PUSH
63277: EMPTY
63278: LIST
63279: LIST
63280: PUSH
63281: LD_INT 1
63283: NEG
63284: PUSH
63285: LD_INT 2
63287: NEG
63288: PUSH
63289: EMPTY
63290: LIST
63291: LIST
63292: PUSH
63293: LD_INT 0
63295: PUSH
63296: LD_INT 2
63298: NEG
63299: PUSH
63300: EMPTY
63301: LIST
63302: LIST
63303: PUSH
63304: LD_INT 1
63306: PUSH
63307: LD_INT 1
63309: NEG
63310: PUSH
63311: EMPTY
63312: LIST
63313: LIST
63314: PUSH
63315: LD_INT 2
63317: PUSH
63318: LD_INT 0
63320: PUSH
63321: EMPTY
63322: LIST
63323: LIST
63324: PUSH
63325: LD_INT 2
63327: PUSH
63328: LD_INT 1
63330: PUSH
63331: EMPTY
63332: LIST
63333: LIST
63334: PUSH
63335: LD_INT 2
63337: PUSH
63338: LD_INT 2
63340: PUSH
63341: EMPTY
63342: LIST
63343: LIST
63344: PUSH
63345: LD_INT 1
63347: PUSH
63348: LD_INT 2
63350: PUSH
63351: EMPTY
63352: LIST
63353: LIST
63354: PUSH
63355: LD_INT 0
63357: PUSH
63358: LD_INT 2
63360: PUSH
63361: EMPTY
63362: LIST
63363: LIST
63364: PUSH
63365: LD_INT 1
63367: NEG
63368: PUSH
63369: LD_INT 1
63371: PUSH
63372: EMPTY
63373: LIST
63374: LIST
63375: PUSH
63376: LD_INT 2
63378: NEG
63379: PUSH
63380: LD_INT 0
63382: PUSH
63383: EMPTY
63384: LIST
63385: LIST
63386: PUSH
63387: LD_INT 2
63389: NEG
63390: PUSH
63391: LD_INT 1
63393: NEG
63394: PUSH
63395: EMPTY
63396: LIST
63397: LIST
63398: PUSH
63399: LD_INT 2
63401: NEG
63402: PUSH
63403: LD_INT 2
63405: NEG
63406: PUSH
63407: EMPTY
63408: LIST
63409: LIST
63410: PUSH
63411: EMPTY
63412: LIST
63413: LIST
63414: LIST
63415: LIST
63416: LIST
63417: LIST
63418: LIST
63419: LIST
63420: LIST
63421: LIST
63422: LIST
63423: LIST
63424: LIST
63425: LIST
63426: LIST
63427: LIST
63428: LIST
63429: LIST
63430: LIST
63431: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63432: LD_ADDR_VAR 0 59
63436: PUSH
63437: LD_INT 0
63439: PUSH
63440: LD_INT 0
63442: PUSH
63443: EMPTY
63444: LIST
63445: LIST
63446: PUSH
63447: LD_INT 0
63449: PUSH
63450: LD_INT 1
63452: NEG
63453: PUSH
63454: EMPTY
63455: LIST
63456: LIST
63457: PUSH
63458: LD_INT 1
63460: PUSH
63461: LD_INT 0
63463: PUSH
63464: EMPTY
63465: LIST
63466: LIST
63467: PUSH
63468: LD_INT 1
63470: PUSH
63471: LD_INT 1
63473: PUSH
63474: EMPTY
63475: LIST
63476: LIST
63477: PUSH
63478: LD_INT 0
63480: PUSH
63481: LD_INT 1
63483: PUSH
63484: EMPTY
63485: LIST
63486: LIST
63487: PUSH
63488: LD_INT 1
63490: NEG
63491: PUSH
63492: LD_INT 0
63494: PUSH
63495: EMPTY
63496: LIST
63497: LIST
63498: PUSH
63499: LD_INT 1
63501: NEG
63502: PUSH
63503: LD_INT 1
63505: NEG
63506: PUSH
63507: EMPTY
63508: LIST
63509: LIST
63510: PUSH
63511: EMPTY
63512: LIST
63513: LIST
63514: LIST
63515: LIST
63516: LIST
63517: LIST
63518: LIST
63519: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63520: LD_ADDR_VAR 0 60
63524: PUSH
63525: LD_INT 0
63527: PUSH
63528: LD_INT 0
63530: PUSH
63531: EMPTY
63532: LIST
63533: LIST
63534: PUSH
63535: LD_INT 0
63537: PUSH
63538: LD_INT 1
63540: NEG
63541: PUSH
63542: EMPTY
63543: LIST
63544: LIST
63545: PUSH
63546: LD_INT 1
63548: PUSH
63549: LD_INT 0
63551: PUSH
63552: EMPTY
63553: LIST
63554: LIST
63555: PUSH
63556: LD_INT 1
63558: PUSH
63559: LD_INT 1
63561: PUSH
63562: EMPTY
63563: LIST
63564: LIST
63565: PUSH
63566: LD_INT 0
63568: PUSH
63569: LD_INT 1
63571: PUSH
63572: EMPTY
63573: LIST
63574: LIST
63575: PUSH
63576: LD_INT 1
63578: NEG
63579: PUSH
63580: LD_INT 0
63582: PUSH
63583: EMPTY
63584: LIST
63585: LIST
63586: PUSH
63587: LD_INT 1
63589: NEG
63590: PUSH
63591: LD_INT 1
63593: NEG
63594: PUSH
63595: EMPTY
63596: LIST
63597: LIST
63598: PUSH
63599: EMPTY
63600: LIST
63601: LIST
63602: LIST
63603: LIST
63604: LIST
63605: LIST
63606: LIST
63607: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63608: LD_ADDR_VAR 0 61
63612: PUSH
63613: LD_INT 0
63615: PUSH
63616: LD_INT 0
63618: PUSH
63619: EMPTY
63620: LIST
63621: LIST
63622: PUSH
63623: LD_INT 0
63625: PUSH
63626: LD_INT 1
63628: NEG
63629: PUSH
63630: EMPTY
63631: LIST
63632: LIST
63633: PUSH
63634: LD_INT 1
63636: PUSH
63637: LD_INT 0
63639: PUSH
63640: EMPTY
63641: LIST
63642: LIST
63643: PUSH
63644: LD_INT 1
63646: PUSH
63647: LD_INT 1
63649: PUSH
63650: EMPTY
63651: LIST
63652: LIST
63653: PUSH
63654: LD_INT 0
63656: PUSH
63657: LD_INT 1
63659: PUSH
63660: EMPTY
63661: LIST
63662: LIST
63663: PUSH
63664: LD_INT 1
63666: NEG
63667: PUSH
63668: LD_INT 0
63670: PUSH
63671: EMPTY
63672: LIST
63673: LIST
63674: PUSH
63675: LD_INT 1
63677: NEG
63678: PUSH
63679: LD_INT 1
63681: NEG
63682: PUSH
63683: EMPTY
63684: LIST
63685: LIST
63686: PUSH
63687: EMPTY
63688: LIST
63689: LIST
63690: LIST
63691: LIST
63692: LIST
63693: LIST
63694: LIST
63695: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63696: LD_ADDR_VAR 0 62
63700: PUSH
63701: LD_INT 0
63703: PUSH
63704: LD_INT 0
63706: PUSH
63707: EMPTY
63708: LIST
63709: LIST
63710: PUSH
63711: LD_INT 0
63713: PUSH
63714: LD_INT 1
63716: NEG
63717: PUSH
63718: EMPTY
63719: LIST
63720: LIST
63721: PUSH
63722: LD_INT 1
63724: PUSH
63725: LD_INT 0
63727: PUSH
63728: EMPTY
63729: LIST
63730: LIST
63731: PUSH
63732: LD_INT 1
63734: PUSH
63735: LD_INT 1
63737: PUSH
63738: EMPTY
63739: LIST
63740: LIST
63741: PUSH
63742: LD_INT 0
63744: PUSH
63745: LD_INT 1
63747: PUSH
63748: EMPTY
63749: LIST
63750: LIST
63751: PUSH
63752: LD_INT 1
63754: NEG
63755: PUSH
63756: LD_INT 0
63758: PUSH
63759: EMPTY
63760: LIST
63761: LIST
63762: PUSH
63763: LD_INT 1
63765: NEG
63766: PUSH
63767: LD_INT 1
63769: NEG
63770: PUSH
63771: EMPTY
63772: LIST
63773: LIST
63774: PUSH
63775: EMPTY
63776: LIST
63777: LIST
63778: LIST
63779: LIST
63780: LIST
63781: LIST
63782: LIST
63783: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63784: LD_ADDR_VAR 0 63
63788: PUSH
63789: LD_INT 0
63791: PUSH
63792: LD_INT 0
63794: PUSH
63795: EMPTY
63796: LIST
63797: LIST
63798: PUSH
63799: LD_INT 0
63801: PUSH
63802: LD_INT 1
63804: NEG
63805: PUSH
63806: EMPTY
63807: LIST
63808: LIST
63809: PUSH
63810: LD_INT 1
63812: PUSH
63813: LD_INT 0
63815: PUSH
63816: EMPTY
63817: LIST
63818: LIST
63819: PUSH
63820: LD_INT 1
63822: PUSH
63823: LD_INT 1
63825: PUSH
63826: EMPTY
63827: LIST
63828: LIST
63829: PUSH
63830: LD_INT 0
63832: PUSH
63833: LD_INT 1
63835: PUSH
63836: EMPTY
63837: LIST
63838: LIST
63839: PUSH
63840: LD_INT 1
63842: NEG
63843: PUSH
63844: LD_INT 0
63846: PUSH
63847: EMPTY
63848: LIST
63849: LIST
63850: PUSH
63851: LD_INT 1
63853: NEG
63854: PUSH
63855: LD_INT 1
63857: NEG
63858: PUSH
63859: EMPTY
63860: LIST
63861: LIST
63862: PUSH
63863: EMPTY
63864: LIST
63865: LIST
63866: LIST
63867: LIST
63868: LIST
63869: LIST
63870: LIST
63871: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63872: LD_ADDR_VAR 0 64
63876: PUSH
63877: LD_INT 0
63879: PUSH
63880: LD_INT 0
63882: PUSH
63883: EMPTY
63884: LIST
63885: LIST
63886: PUSH
63887: LD_INT 0
63889: PUSH
63890: LD_INT 1
63892: NEG
63893: PUSH
63894: EMPTY
63895: LIST
63896: LIST
63897: PUSH
63898: LD_INT 1
63900: PUSH
63901: LD_INT 0
63903: PUSH
63904: EMPTY
63905: LIST
63906: LIST
63907: PUSH
63908: LD_INT 1
63910: PUSH
63911: LD_INT 1
63913: PUSH
63914: EMPTY
63915: LIST
63916: LIST
63917: PUSH
63918: LD_INT 0
63920: PUSH
63921: LD_INT 1
63923: PUSH
63924: EMPTY
63925: LIST
63926: LIST
63927: PUSH
63928: LD_INT 1
63930: NEG
63931: PUSH
63932: LD_INT 0
63934: PUSH
63935: EMPTY
63936: LIST
63937: LIST
63938: PUSH
63939: LD_INT 1
63941: NEG
63942: PUSH
63943: LD_INT 1
63945: NEG
63946: PUSH
63947: EMPTY
63948: LIST
63949: LIST
63950: PUSH
63951: EMPTY
63952: LIST
63953: LIST
63954: LIST
63955: LIST
63956: LIST
63957: LIST
63958: LIST
63959: ST_TO_ADDR
// end ; 1 :
63960: GO 69857
63962: LD_INT 1
63964: DOUBLE
63965: EQUAL
63966: IFTRUE 63970
63968: GO 66593
63970: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
63971: LD_ADDR_VAR 0 11
63975: PUSH
63976: LD_INT 1
63978: NEG
63979: PUSH
63980: LD_INT 3
63982: NEG
63983: PUSH
63984: EMPTY
63985: LIST
63986: LIST
63987: PUSH
63988: LD_INT 0
63990: PUSH
63991: LD_INT 3
63993: NEG
63994: PUSH
63995: EMPTY
63996: LIST
63997: LIST
63998: PUSH
63999: LD_INT 1
64001: PUSH
64002: LD_INT 2
64004: NEG
64005: PUSH
64006: EMPTY
64007: LIST
64008: LIST
64009: PUSH
64010: EMPTY
64011: LIST
64012: LIST
64013: LIST
64014: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64015: LD_ADDR_VAR 0 12
64019: PUSH
64020: LD_INT 2
64022: PUSH
64023: LD_INT 1
64025: NEG
64026: PUSH
64027: EMPTY
64028: LIST
64029: LIST
64030: PUSH
64031: LD_INT 3
64033: PUSH
64034: LD_INT 0
64036: PUSH
64037: EMPTY
64038: LIST
64039: LIST
64040: PUSH
64041: LD_INT 3
64043: PUSH
64044: LD_INT 1
64046: PUSH
64047: EMPTY
64048: LIST
64049: LIST
64050: PUSH
64051: EMPTY
64052: LIST
64053: LIST
64054: LIST
64055: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64056: LD_ADDR_VAR 0 13
64060: PUSH
64061: LD_INT 3
64063: PUSH
64064: LD_INT 2
64066: PUSH
64067: EMPTY
64068: LIST
64069: LIST
64070: PUSH
64071: LD_INT 3
64073: PUSH
64074: LD_INT 3
64076: PUSH
64077: EMPTY
64078: LIST
64079: LIST
64080: PUSH
64081: LD_INT 2
64083: PUSH
64084: LD_INT 3
64086: PUSH
64087: EMPTY
64088: LIST
64089: LIST
64090: PUSH
64091: EMPTY
64092: LIST
64093: LIST
64094: LIST
64095: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64096: LD_ADDR_VAR 0 14
64100: PUSH
64101: LD_INT 1
64103: PUSH
64104: LD_INT 3
64106: PUSH
64107: EMPTY
64108: LIST
64109: LIST
64110: PUSH
64111: LD_INT 0
64113: PUSH
64114: LD_INT 3
64116: PUSH
64117: EMPTY
64118: LIST
64119: LIST
64120: PUSH
64121: LD_INT 1
64123: NEG
64124: PUSH
64125: LD_INT 2
64127: PUSH
64128: EMPTY
64129: LIST
64130: LIST
64131: PUSH
64132: EMPTY
64133: LIST
64134: LIST
64135: LIST
64136: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64137: LD_ADDR_VAR 0 15
64141: PUSH
64142: LD_INT 2
64144: NEG
64145: PUSH
64146: LD_INT 1
64148: PUSH
64149: EMPTY
64150: LIST
64151: LIST
64152: PUSH
64153: LD_INT 3
64155: NEG
64156: PUSH
64157: LD_INT 0
64159: PUSH
64160: EMPTY
64161: LIST
64162: LIST
64163: PUSH
64164: LD_INT 3
64166: NEG
64167: PUSH
64168: LD_INT 1
64170: NEG
64171: PUSH
64172: EMPTY
64173: LIST
64174: LIST
64175: PUSH
64176: EMPTY
64177: LIST
64178: LIST
64179: LIST
64180: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64181: LD_ADDR_VAR 0 16
64185: PUSH
64186: LD_INT 2
64188: NEG
64189: PUSH
64190: LD_INT 3
64192: NEG
64193: PUSH
64194: EMPTY
64195: LIST
64196: LIST
64197: PUSH
64198: LD_INT 3
64200: NEG
64201: PUSH
64202: LD_INT 2
64204: NEG
64205: PUSH
64206: EMPTY
64207: LIST
64208: LIST
64209: PUSH
64210: LD_INT 3
64212: NEG
64213: PUSH
64214: LD_INT 3
64216: NEG
64217: PUSH
64218: EMPTY
64219: LIST
64220: LIST
64221: PUSH
64222: EMPTY
64223: LIST
64224: LIST
64225: LIST
64226: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64227: LD_ADDR_VAR 0 17
64231: PUSH
64232: LD_INT 1
64234: NEG
64235: PUSH
64236: LD_INT 3
64238: NEG
64239: PUSH
64240: EMPTY
64241: LIST
64242: LIST
64243: PUSH
64244: LD_INT 0
64246: PUSH
64247: LD_INT 3
64249: NEG
64250: PUSH
64251: EMPTY
64252: LIST
64253: LIST
64254: PUSH
64255: LD_INT 1
64257: PUSH
64258: LD_INT 2
64260: NEG
64261: PUSH
64262: EMPTY
64263: LIST
64264: LIST
64265: PUSH
64266: EMPTY
64267: LIST
64268: LIST
64269: LIST
64270: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64271: LD_ADDR_VAR 0 18
64275: PUSH
64276: LD_INT 2
64278: PUSH
64279: LD_INT 1
64281: NEG
64282: PUSH
64283: EMPTY
64284: LIST
64285: LIST
64286: PUSH
64287: LD_INT 3
64289: PUSH
64290: LD_INT 0
64292: PUSH
64293: EMPTY
64294: LIST
64295: LIST
64296: PUSH
64297: LD_INT 3
64299: PUSH
64300: LD_INT 1
64302: PUSH
64303: EMPTY
64304: LIST
64305: LIST
64306: PUSH
64307: EMPTY
64308: LIST
64309: LIST
64310: LIST
64311: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64312: LD_ADDR_VAR 0 19
64316: PUSH
64317: LD_INT 3
64319: PUSH
64320: LD_INT 2
64322: PUSH
64323: EMPTY
64324: LIST
64325: LIST
64326: PUSH
64327: LD_INT 3
64329: PUSH
64330: LD_INT 3
64332: PUSH
64333: EMPTY
64334: LIST
64335: LIST
64336: PUSH
64337: LD_INT 2
64339: PUSH
64340: LD_INT 3
64342: PUSH
64343: EMPTY
64344: LIST
64345: LIST
64346: PUSH
64347: EMPTY
64348: LIST
64349: LIST
64350: LIST
64351: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64352: LD_ADDR_VAR 0 20
64356: PUSH
64357: LD_INT 1
64359: PUSH
64360: LD_INT 3
64362: PUSH
64363: EMPTY
64364: LIST
64365: LIST
64366: PUSH
64367: LD_INT 0
64369: PUSH
64370: LD_INT 3
64372: PUSH
64373: EMPTY
64374: LIST
64375: LIST
64376: PUSH
64377: LD_INT 1
64379: NEG
64380: PUSH
64381: LD_INT 2
64383: PUSH
64384: EMPTY
64385: LIST
64386: LIST
64387: PUSH
64388: EMPTY
64389: LIST
64390: LIST
64391: LIST
64392: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64393: LD_ADDR_VAR 0 21
64397: PUSH
64398: LD_INT 2
64400: NEG
64401: PUSH
64402: LD_INT 1
64404: PUSH
64405: EMPTY
64406: LIST
64407: LIST
64408: PUSH
64409: LD_INT 3
64411: NEG
64412: PUSH
64413: LD_INT 0
64415: PUSH
64416: EMPTY
64417: LIST
64418: LIST
64419: PUSH
64420: LD_INT 3
64422: NEG
64423: PUSH
64424: LD_INT 1
64426: NEG
64427: PUSH
64428: EMPTY
64429: LIST
64430: LIST
64431: PUSH
64432: EMPTY
64433: LIST
64434: LIST
64435: LIST
64436: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64437: LD_ADDR_VAR 0 22
64441: PUSH
64442: LD_INT 2
64444: NEG
64445: PUSH
64446: LD_INT 3
64448: NEG
64449: PUSH
64450: EMPTY
64451: LIST
64452: LIST
64453: PUSH
64454: LD_INT 3
64456: NEG
64457: PUSH
64458: LD_INT 2
64460: NEG
64461: PUSH
64462: EMPTY
64463: LIST
64464: LIST
64465: PUSH
64466: LD_INT 3
64468: NEG
64469: PUSH
64470: LD_INT 3
64472: NEG
64473: PUSH
64474: EMPTY
64475: LIST
64476: LIST
64477: PUSH
64478: EMPTY
64479: LIST
64480: LIST
64481: LIST
64482: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
64483: LD_ADDR_VAR 0 23
64487: PUSH
64488: LD_INT 0
64490: PUSH
64491: LD_INT 3
64493: NEG
64494: PUSH
64495: EMPTY
64496: LIST
64497: LIST
64498: PUSH
64499: LD_INT 1
64501: NEG
64502: PUSH
64503: LD_INT 4
64505: NEG
64506: PUSH
64507: EMPTY
64508: LIST
64509: LIST
64510: PUSH
64511: LD_INT 1
64513: PUSH
64514: LD_INT 3
64516: NEG
64517: PUSH
64518: EMPTY
64519: LIST
64520: LIST
64521: PUSH
64522: EMPTY
64523: LIST
64524: LIST
64525: LIST
64526: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
64527: LD_ADDR_VAR 0 24
64531: PUSH
64532: LD_INT 3
64534: PUSH
64535: LD_INT 0
64537: PUSH
64538: EMPTY
64539: LIST
64540: LIST
64541: PUSH
64542: LD_INT 3
64544: PUSH
64545: LD_INT 1
64547: NEG
64548: PUSH
64549: EMPTY
64550: LIST
64551: LIST
64552: PUSH
64553: LD_INT 4
64555: PUSH
64556: LD_INT 1
64558: PUSH
64559: EMPTY
64560: LIST
64561: LIST
64562: PUSH
64563: EMPTY
64564: LIST
64565: LIST
64566: LIST
64567: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
64568: LD_ADDR_VAR 0 25
64572: PUSH
64573: LD_INT 3
64575: PUSH
64576: LD_INT 3
64578: PUSH
64579: EMPTY
64580: LIST
64581: LIST
64582: PUSH
64583: LD_INT 4
64585: PUSH
64586: LD_INT 3
64588: PUSH
64589: EMPTY
64590: LIST
64591: LIST
64592: PUSH
64593: LD_INT 3
64595: PUSH
64596: LD_INT 4
64598: PUSH
64599: EMPTY
64600: LIST
64601: LIST
64602: PUSH
64603: EMPTY
64604: LIST
64605: LIST
64606: LIST
64607: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
64608: LD_ADDR_VAR 0 26
64612: PUSH
64613: LD_INT 0
64615: PUSH
64616: LD_INT 3
64618: PUSH
64619: EMPTY
64620: LIST
64621: LIST
64622: PUSH
64623: LD_INT 1
64625: PUSH
64626: LD_INT 4
64628: PUSH
64629: EMPTY
64630: LIST
64631: LIST
64632: PUSH
64633: LD_INT 1
64635: NEG
64636: PUSH
64637: LD_INT 3
64639: PUSH
64640: EMPTY
64641: LIST
64642: LIST
64643: PUSH
64644: EMPTY
64645: LIST
64646: LIST
64647: LIST
64648: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
64649: LD_ADDR_VAR 0 27
64653: PUSH
64654: LD_INT 3
64656: NEG
64657: PUSH
64658: LD_INT 0
64660: PUSH
64661: EMPTY
64662: LIST
64663: LIST
64664: PUSH
64665: LD_INT 3
64667: NEG
64668: PUSH
64669: LD_INT 1
64671: PUSH
64672: EMPTY
64673: LIST
64674: LIST
64675: PUSH
64676: LD_INT 4
64678: NEG
64679: PUSH
64680: LD_INT 1
64682: NEG
64683: PUSH
64684: EMPTY
64685: LIST
64686: LIST
64687: PUSH
64688: EMPTY
64689: LIST
64690: LIST
64691: LIST
64692: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
64693: LD_ADDR_VAR 0 28
64697: PUSH
64698: LD_INT 3
64700: NEG
64701: PUSH
64702: LD_INT 3
64704: NEG
64705: PUSH
64706: EMPTY
64707: LIST
64708: LIST
64709: PUSH
64710: LD_INT 3
64712: NEG
64713: PUSH
64714: LD_INT 4
64716: NEG
64717: PUSH
64718: EMPTY
64719: LIST
64720: LIST
64721: PUSH
64722: LD_INT 4
64724: NEG
64725: PUSH
64726: LD_INT 3
64728: NEG
64729: PUSH
64730: EMPTY
64731: LIST
64732: LIST
64733: PUSH
64734: EMPTY
64735: LIST
64736: LIST
64737: LIST
64738: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
64739: LD_ADDR_VAR 0 29
64743: PUSH
64744: LD_INT 1
64746: NEG
64747: PUSH
64748: LD_INT 3
64750: NEG
64751: PUSH
64752: EMPTY
64753: LIST
64754: LIST
64755: PUSH
64756: LD_INT 0
64758: PUSH
64759: LD_INT 3
64761: NEG
64762: PUSH
64763: EMPTY
64764: LIST
64765: LIST
64766: PUSH
64767: LD_INT 1
64769: PUSH
64770: LD_INT 2
64772: NEG
64773: PUSH
64774: EMPTY
64775: LIST
64776: LIST
64777: PUSH
64778: LD_INT 1
64780: NEG
64781: PUSH
64782: LD_INT 4
64784: NEG
64785: PUSH
64786: EMPTY
64787: LIST
64788: LIST
64789: PUSH
64790: LD_INT 0
64792: PUSH
64793: LD_INT 4
64795: NEG
64796: PUSH
64797: EMPTY
64798: LIST
64799: LIST
64800: PUSH
64801: LD_INT 1
64803: PUSH
64804: LD_INT 3
64806: NEG
64807: PUSH
64808: EMPTY
64809: LIST
64810: LIST
64811: PUSH
64812: LD_INT 1
64814: NEG
64815: PUSH
64816: LD_INT 5
64818: NEG
64819: PUSH
64820: EMPTY
64821: LIST
64822: LIST
64823: PUSH
64824: LD_INT 0
64826: PUSH
64827: LD_INT 5
64829: NEG
64830: PUSH
64831: EMPTY
64832: LIST
64833: LIST
64834: PUSH
64835: LD_INT 1
64837: PUSH
64838: LD_INT 4
64840: NEG
64841: PUSH
64842: EMPTY
64843: LIST
64844: LIST
64845: PUSH
64846: LD_INT 1
64848: NEG
64849: PUSH
64850: LD_INT 6
64852: NEG
64853: PUSH
64854: EMPTY
64855: LIST
64856: LIST
64857: PUSH
64858: LD_INT 0
64860: PUSH
64861: LD_INT 6
64863: NEG
64864: PUSH
64865: EMPTY
64866: LIST
64867: LIST
64868: PUSH
64869: LD_INT 1
64871: PUSH
64872: LD_INT 5
64874: NEG
64875: PUSH
64876: EMPTY
64877: LIST
64878: LIST
64879: PUSH
64880: EMPTY
64881: LIST
64882: LIST
64883: LIST
64884: LIST
64885: LIST
64886: LIST
64887: LIST
64888: LIST
64889: LIST
64890: LIST
64891: LIST
64892: LIST
64893: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
64894: LD_ADDR_VAR 0 30
64898: PUSH
64899: LD_INT 2
64901: PUSH
64902: LD_INT 1
64904: NEG
64905: PUSH
64906: EMPTY
64907: LIST
64908: LIST
64909: PUSH
64910: LD_INT 3
64912: PUSH
64913: LD_INT 0
64915: PUSH
64916: EMPTY
64917: LIST
64918: LIST
64919: PUSH
64920: LD_INT 3
64922: PUSH
64923: LD_INT 1
64925: PUSH
64926: EMPTY
64927: LIST
64928: LIST
64929: PUSH
64930: LD_INT 3
64932: PUSH
64933: LD_INT 1
64935: NEG
64936: PUSH
64937: EMPTY
64938: LIST
64939: LIST
64940: PUSH
64941: LD_INT 4
64943: PUSH
64944: LD_INT 0
64946: PUSH
64947: EMPTY
64948: LIST
64949: LIST
64950: PUSH
64951: LD_INT 4
64953: PUSH
64954: LD_INT 1
64956: PUSH
64957: EMPTY
64958: LIST
64959: LIST
64960: PUSH
64961: LD_INT 4
64963: PUSH
64964: LD_INT 1
64966: NEG
64967: PUSH
64968: EMPTY
64969: LIST
64970: LIST
64971: PUSH
64972: LD_INT 5
64974: PUSH
64975: LD_INT 0
64977: PUSH
64978: EMPTY
64979: LIST
64980: LIST
64981: PUSH
64982: LD_INT 5
64984: PUSH
64985: LD_INT 1
64987: PUSH
64988: EMPTY
64989: LIST
64990: LIST
64991: PUSH
64992: LD_INT 5
64994: PUSH
64995: LD_INT 1
64997: NEG
64998: PUSH
64999: EMPTY
65000: LIST
65001: LIST
65002: PUSH
65003: LD_INT 6
65005: PUSH
65006: LD_INT 0
65008: PUSH
65009: EMPTY
65010: LIST
65011: LIST
65012: PUSH
65013: LD_INT 6
65015: PUSH
65016: LD_INT 1
65018: PUSH
65019: EMPTY
65020: LIST
65021: LIST
65022: PUSH
65023: EMPTY
65024: LIST
65025: LIST
65026: LIST
65027: LIST
65028: LIST
65029: LIST
65030: LIST
65031: LIST
65032: LIST
65033: LIST
65034: LIST
65035: LIST
65036: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
65037: LD_ADDR_VAR 0 31
65041: PUSH
65042: LD_INT 3
65044: PUSH
65045: LD_INT 2
65047: PUSH
65048: EMPTY
65049: LIST
65050: LIST
65051: PUSH
65052: LD_INT 3
65054: PUSH
65055: LD_INT 3
65057: PUSH
65058: EMPTY
65059: LIST
65060: LIST
65061: PUSH
65062: LD_INT 2
65064: PUSH
65065: LD_INT 3
65067: PUSH
65068: EMPTY
65069: LIST
65070: LIST
65071: PUSH
65072: LD_INT 4
65074: PUSH
65075: LD_INT 3
65077: PUSH
65078: EMPTY
65079: LIST
65080: LIST
65081: PUSH
65082: LD_INT 4
65084: PUSH
65085: LD_INT 4
65087: PUSH
65088: EMPTY
65089: LIST
65090: LIST
65091: PUSH
65092: LD_INT 3
65094: PUSH
65095: LD_INT 4
65097: PUSH
65098: EMPTY
65099: LIST
65100: LIST
65101: PUSH
65102: LD_INT 5
65104: PUSH
65105: LD_INT 4
65107: PUSH
65108: EMPTY
65109: LIST
65110: LIST
65111: PUSH
65112: LD_INT 5
65114: PUSH
65115: LD_INT 5
65117: PUSH
65118: EMPTY
65119: LIST
65120: LIST
65121: PUSH
65122: LD_INT 4
65124: PUSH
65125: LD_INT 5
65127: PUSH
65128: EMPTY
65129: LIST
65130: LIST
65131: PUSH
65132: LD_INT 6
65134: PUSH
65135: LD_INT 5
65137: PUSH
65138: EMPTY
65139: LIST
65140: LIST
65141: PUSH
65142: LD_INT 6
65144: PUSH
65145: LD_INT 6
65147: PUSH
65148: EMPTY
65149: LIST
65150: LIST
65151: PUSH
65152: LD_INT 5
65154: PUSH
65155: LD_INT 6
65157: PUSH
65158: EMPTY
65159: LIST
65160: LIST
65161: PUSH
65162: EMPTY
65163: LIST
65164: LIST
65165: LIST
65166: LIST
65167: LIST
65168: LIST
65169: LIST
65170: LIST
65171: LIST
65172: LIST
65173: LIST
65174: LIST
65175: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
65176: LD_ADDR_VAR 0 32
65180: PUSH
65181: LD_INT 1
65183: PUSH
65184: LD_INT 3
65186: PUSH
65187: EMPTY
65188: LIST
65189: LIST
65190: PUSH
65191: LD_INT 0
65193: PUSH
65194: LD_INT 3
65196: PUSH
65197: EMPTY
65198: LIST
65199: LIST
65200: PUSH
65201: LD_INT 1
65203: NEG
65204: PUSH
65205: LD_INT 2
65207: PUSH
65208: EMPTY
65209: LIST
65210: LIST
65211: PUSH
65212: LD_INT 1
65214: PUSH
65215: LD_INT 4
65217: PUSH
65218: EMPTY
65219: LIST
65220: LIST
65221: PUSH
65222: LD_INT 0
65224: PUSH
65225: LD_INT 4
65227: PUSH
65228: EMPTY
65229: LIST
65230: LIST
65231: PUSH
65232: LD_INT 1
65234: NEG
65235: PUSH
65236: LD_INT 3
65238: PUSH
65239: EMPTY
65240: LIST
65241: LIST
65242: PUSH
65243: LD_INT 1
65245: PUSH
65246: LD_INT 5
65248: PUSH
65249: EMPTY
65250: LIST
65251: LIST
65252: PUSH
65253: LD_INT 0
65255: PUSH
65256: LD_INT 5
65258: PUSH
65259: EMPTY
65260: LIST
65261: LIST
65262: PUSH
65263: LD_INT 1
65265: NEG
65266: PUSH
65267: LD_INT 4
65269: PUSH
65270: EMPTY
65271: LIST
65272: LIST
65273: PUSH
65274: LD_INT 1
65276: PUSH
65277: LD_INT 6
65279: PUSH
65280: EMPTY
65281: LIST
65282: LIST
65283: PUSH
65284: LD_INT 0
65286: PUSH
65287: LD_INT 6
65289: PUSH
65290: EMPTY
65291: LIST
65292: LIST
65293: PUSH
65294: LD_INT 1
65296: NEG
65297: PUSH
65298: LD_INT 5
65300: PUSH
65301: EMPTY
65302: LIST
65303: LIST
65304: PUSH
65305: EMPTY
65306: LIST
65307: LIST
65308: LIST
65309: LIST
65310: LIST
65311: LIST
65312: LIST
65313: LIST
65314: LIST
65315: LIST
65316: LIST
65317: LIST
65318: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
65319: LD_ADDR_VAR 0 33
65323: PUSH
65324: LD_INT 2
65326: NEG
65327: PUSH
65328: LD_INT 1
65330: PUSH
65331: EMPTY
65332: LIST
65333: LIST
65334: PUSH
65335: LD_INT 3
65337: NEG
65338: PUSH
65339: LD_INT 0
65341: PUSH
65342: EMPTY
65343: LIST
65344: LIST
65345: PUSH
65346: LD_INT 3
65348: NEG
65349: PUSH
65350: LD_INT 1
65352: NEG
65353: PUSH
65354: EMPTY
65355: LIST
65356: LIST
65357: PUSH
65358: LD_INT 3
65360: NEG
65361: PUSH
65362: LD_INT 1
65364: PUSH
65365: EMPTY
65366: LIST
65367: LIST
65368: PUSH
65369: LD_INT 4
65371: NEG
65372: PUSH
65373: LD_INT 0
65375: PUSH
65376: EMPTY
65377: LIST
65378: LIST
65379: PUSH
65380: LD_INT 4
65382: NEG
65383: PUSH
65384: LD_INT 1
65386: NEG
65387: PUSH
65388: EMPTY
65389: LIST
65390: LIST
65391: PUSH
65392: LD_INT 4
65394: NEG
65395: PUSH
65396: LD_INT 1
65398: PUSH
65399: EMPTY
65400: LIST
65401: LIST
65402: PUSH
65403: LD_INT 5
65405: NEG
65406: PUSH
65407: LD_INT 0
65409: PUSH
65410: EMPTY
65411: LIST
65412: LIST
65413: PUSH
65414: LD_INT 5
65416: NEG
65417: PUSH
65418: LD_INT 1
65420: NEG
65421: PUSH
65422: EMPTY
65423: LIST
65424: LIST
65425: PUSH
65426: LD_INT 5
65428: NEG
65429: PUSH
65430: LD_INT 1
65432: PUSH
65433: EMPTY
65434: LIST
65435: LIST
65436: PUSH
65437: LD_INT 6
65439: NEG
65440: PUSH
65441: LD_INT 0
65443: PUSH
65444: EMPTY
65445: LIST
65446: LIST
65447: PUSH
65448: LD_INT 6
65450: NEG
65451: PUSH
65452: LD_INT 1
65454: NEG
65455: PUSH
65456: EMPTY
65457: LIST
65458: LIST
65459: PUSH
65460: EMPTY
65461: LIST
65462: LIST
65463: LIST
65464: LIST
65465: LIST
65466: LIST
65467: LIST
65468: LIST
65469: LIST
65470: LIST
65471: LIST
65472: LIST
65473: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
65474: LD_ADDR_VAR 0 34
65478: PUSH
65479: LD_INT 2
65481: NEG
65482: PUSH
65483: LD_INT 3
65485: NEG
65486: PUSH
65487: EMPTY
65488: LIST
65489: LIST
65490: PUSH
65491: LD_INT 3
65493: NEG
65494: PUSH
65495: LD_INT 2
65497: NEG
65498: PUSH
65499: EMPTY
65500: LIST
65501: LIST
65502: PUSH
65503: LD_INT 3
65505: NEG
65506: PUSH
65507: LD_INT 3
65509: NEG
65510: PUSH
65511: EMPTY
65512: LIST
65513: LIST
65514: PUSH
65515: LD_INT 3
65517: NEG
65518: PUSH
65519: LD_INT 4
65521: NEG
65522: PUSH
65523: EMPTY
65524: LIST
65525: LIST
65526: PUSH
65527: LD_INT 4
65529: NEG
65530: PUSH
65531: LD_INT 3
65533: NEG
65534: PUSH
65535: EMPTY
65536: LIST
65537: LIST
65538: PUSH
65539: LD_INT 4
65541: NEG
65542: PUSH
65543: LD_INT 4
65545: NEG
65546: PUSH
65547: EMPTY
65548: LIST
65549: LIST
65550: PUSH
65551: LD_INT 4
65553: NEG
65554: PUSH
65555: LD_INT 5
65557: NEG
65558: PUSH
65559: EMPTY
65560: LIST
65561: LIST
65562: PUSH
65563: LD_INT 5
65565: NEG
65566: PUSH
65567: LD_INT 4
65569: NEG
65570: PUSH
65571: EMPTY
65572: LIST
65573: LIST
65574: PUSH
65575: LD_INT 5
65577: NEG
65578: PUSH
65579: LD_INT 5
65581: NEG
65582: PUSH
65583: EMPTY
65584: LIST
65585: LIST
65586: PUSH
65587: LD_INT 5
65589: NEG
65590: PUSH
65591: LD_INT 6
65593: NEG
65594: PUSH
65595: EMPTY
65596: LIST
65597: LIST
65598: PUSH
65599: LD_INT 6
65601: NEG
65602: PUSH
65603: LD_INT 5
65605: NEG
65606: PUSH
65607: EMPTY
65608: LIST
65609: LIST
65610: PUSH
65611: LD_INT 6
65613: NEG
65614: PUSH
65615: LD_INT 6
65617: NEG
65618: PUSH
65619: EMPTY
65620: LIST
65621: LIST
65622: PUSH
65623: EMPTY
65624: LIST
65625: LIST
65626: LIST
65627: LIST
65628: LIST
65629: LIST
65630: LIST
65631: LIST
65632: LIST
65633: LIST
65634: LIST
65635: LIST
65636: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
65637: LD_ADDR_VAR 0 41
65641: PUSH
65642: LD_INT 0
65644: PUSH
65645: LD_INT 2
65647: NEG
65648: PUSH
65649: EMPTY
65650: LIST
65651: LIST
65652: PUSH
65653: LD_INT 1
65655: NEG
65656: PUSH
65657: LD_INT 3
65659: NEG
65660: PUSH
65661: EMPTY
65662: LIST
65663: LIST
65664: PUSH
65665: LD_INT 1
65667: PUSH
65668: LD_INT 2
65670: NEG
65671: PUSH
65672: EMPTY
65673: LIST
65674: LIST
65675: PUSH
65676: EMPTY
65677: LIST
65678: LIST
65679: LIST
65680: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
65681: LD_ADDR_VAR 0 42
65685: PUSH
65686: LD_INT 2
65688: PUSH
65689: LD_INT 0
65691: PUSH
65692: EMPTY
65693: LIST
65694: LIST
65695: PUSH
65696: LD_INT 2
65698: PUSH
65699: LD_INT 1
65701: NEG
65702: PUSH
65703: EMPTY
65704: LIST
65705: LIST
65706: PUSH
65707: LD_INT 3
65709: PUSH
65710: LD_INT 1
65712: PUSH
65713: EMPTY
65714: LIST
65715: LIST
65716: PUSH
65717: EMPTY
65718: LIST
65719: LIST
65720: LIST
65721: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
65722: LD_ADDR_VAR 0 43
65726: PUSH
65727: LD_INT 2
65729: PUSH
65730: LD_INT 2
65732: PUSH
65733: EMPTY
65734: LIST
65735: LIST
65736: PUSH
65737: LD_INT 3
65739: PUSH
65740: LD_INT 2
65742: PUSH
65743: EMPTY
65744: LIST
65745: LIST
65746: PUSH
65747: LD_INT 2
65749: PUSH
65750: LD_INT 3
65752: PUSH
65753: EMPTY
65754: LIST
65755: LIST
65756: PUSH
65757: EMPTY
65758: LIST
65759: LIST
65760: LIST
65761: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
65762: LD_ADDR_VAR 0 44
65766: PUSH
65767: LD_INT 0
65769: PUSH
65770: LD_INT 2
65772: PUSH
65773: EMPTY
65774: LIST
65775: LIST
65776: PUSH
65777: LD_INT 1
65779: PUSH
65780: LD_INT 3
65782: PUSH
65783: EMPTY
65784: LIST
65785: LIST
65786: PUSH
65787: LD_INT 1
65789: NEG
65790: PUSH
65791: LD_INT 2
65793: PUSH
65794: EMPTY
65795: LIST
65796: LIST
65797: PUSH
65798: EMPTY
65799: LIST
65800: LIST
65801: LIST
65802: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
65803: LD_ADDR_VAR 0 45
65807: PUSH
65808: LD_INT 2
65810: NEG
65811: PUSH
65812: LD_INT 0
65814: PUSH
65815: EMPTY
65816: LIST
65817: LIST
65818: PUSH
65819: LD_INT 2
65821: NEG
65822: PUSH
65823: LD_INT 1
65825: PUSH
65826: EMPTY
65827: LIST
65828: LIST
65829: PUSH
65830: LD_INT 3
65832: NEG
65833: PUSH
65834: LD_INT 1
65836: NEG
65837: PUSH
65838: EMPTY
65839: LIST
65840: LIST
65841: PUSH
65842: EMPTY
65843: LIST
65844: LIST
65845: LIST
65846: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
65847: LD_ADDR_VAR 0 46
65851: PUSH
65852: LD_INT 2
65854: NEG
65855: PUSH
65856: LD_INT 2
65858: NEG
65859: PUSH
65860: EMPTY
65861: LIST
65862: LIST
65863: PUSH
65864: LD_INT 2
65866: NEG
65867: PUSH
65868: LD_INT 3
65870: NEG
65871: PUSH
65872: EMPTY
65873: LIST
65874: LIST
65875: PUSH
65876: LD_INT 3
65878: NEG
65879: PUSH
65880: LD_INT 2
65882: NEG
65883: PUSH
65884: EMPTY
65885: LIST
65886: LIST
65887: PUSH
65888: EMPTY
65889: LIST
65890: LIST
65891: LIST
65892: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
65893: LD_ADDR_VAR 0 47
65897: PUSH
65898: LD_INT 2
65900: NEG
65901: PUSH
65902: LD_INT 3
65904: NEG
65905: PUSH
65906: EMPTY
65907: LIST
65908: LIST
65909: PUSH
65910: LD_INT 1
65912: NEG
65913: PUSH
65914: LD_INT 3
65916: NEG
65917: PUSH
65918: EMPTY
65919: LIST
65920: LIST
65921: PUSH
65922: EMPTY
65923: LIST
65924: LIST
65925: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
65926: LD_ADDR_VAR 0 48
65930: PUSH
65931: LD_INT 1
65933: PUSH
65934: LD_INT 2
65936: NEG
65937: PUSH
65938: EMPTY
65939: LIST
65940: LIST
65941: PUSH
65942: LD_INT 2
65944: PUSH
65945: LD_INT 1
65947: NEG
65948: PUSH
65949: EMPTY
65950: LIST
65951: LIST
65952: PUSH
65953: EMPTY
65954: LIST
65955: LIST
65956: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
65957: LD_ADDR_VAR 0 49
65961: PUSH
65962: LD_INT 3
65964: PUSH
65965: LD_INT 1
65967: PUSH
65968: EMPTY
65969: LIST
65970: LIST
65971: PUSH
65972: LD_INT 3
65974: PUSH
65975: LD_INT 2
65977: PUSH
65978: EMPTY
65979: LIST
65980: LIST
65981: PUSH
65982: EMPTY
65983: LIST
65984: LIST
65985: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
65986: LD_ADDR_VAR 0 50
65990: PUSH
65991: LD_INT 2
65993: PUSH
65994: LD_INT 3
65996: PUSH
65997: EMPTY
65998: LIST
65999: LIST
66000: PUSH
66001: LD_INT 1
66003: PUSH
66004: LD_INT 3
66006: PUSH
66007: EMPTY
66008: LIST
66009: LIST
66010: PUSH
66011: EMPTY
66012: LIST
66013: LIST
66014: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
66015: LD_ADDR_VAR 0 51
66019: PUSH
66020: LD_INT 1
66022: NEG
66023: PUSH
66024: LD_INT 2
66026: PUSH
66027: EMPTY
66028: LIST
66029: LIST
66030: PUSH
66031: LD_INT 2
66033: NEG
66034: PUSH
66035: LD_INT 1
66037: PUSH
66038: EMPTY
66039: LIST
66040: LIST
66041: PUSH
66042: EMPTY
66043: LIST
66044: LIST
66045: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
66046: LD_ADDR_VAR 0 52
66050: PUSH
66051: LD_INT 3
66053: NEG
66054: PUSH
66055: LD_INT 1
66057: NEG
66058: PUSH
66059: EMPTY
66060: LIST
66061: LIST
66062: PUSH
66063: LD_INT 3
66065: NEG
66066: PUSH
66067: LD_INT 2
66069: NEG
66070: PUSH
66071: EMPTY
66072: LIST
66073: LIST
66074: PUSH
66075: EMPTY
66076: LIST
66077: LIST
66078: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
66079: LD_ADDR_VAR 0 53
66083: PUSH
66084: LD_INT 1
66086: NEG
66087: PUSH
66088: LD_INT 3
66090: NEG
66091: PUSH
66092: EMPTY
66093: LIST
66094: LIST
66095: PUSH
66096: LD_INT 0
66098: PUSH
66099: LD_INT 3
66101: NEG
66102: PUSH
66103: EMPTY
66104: LIST
66105: LIST
66106: PUSH
66107: LD_INT 1
66109: PUSH
66110: LD_INT 2
66112: NEG
66113: PUSH
66114: EMPTY
66115: LIST
66116: LIST
66117: PUSH
66118: EMPTY
66119: LIST
66120: LIST
66121: LIST
66122: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
66123: LD_ADDR_VAR 0 54
66127: PUSH
66128: LD_INT 2
66130: PUSH
66131: LD_INT 1
66133: NEG
66134: PUSH
66135: EMPTY
66136: LIST
66137: LIST
66138: PUSH
66139: LD_INT 3
66141: PUSH
66142: LD_INT 0
66144: PUSH
66145: EMPTY
66146: LIST
66147: LIST
66148: PUSH
66149: LD_INT 3
66151: PUSH
66152: LD_INT 1
66154: PUSH
66155: EMPTY
66156: LIST
66157: LIST
66158: PUSH
66159: EMPTY
66160: LIST
66161: LIST
66162: LIST
66163: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
66164: LD_ADDR_VAR 0 55
66168: PUSH
66169: LD_INT 3
66171: PUSH
66172: LD_INT 2
66174: PUSH
66175: EMPTY
66176: LIST
66177: LIST
66178: PUSH
66179: LD_INT 3
66181: PUSH
66182: LD_INT 3
66184: PUSH
66185: EMPTY
66186: LIST
66187: LIST
66188: PUSH
66189: LD_INT 2
66191: PUSH
66192: LD_INT 3
66194: PUSH
66195: EMPTY
66196: LIST
66197: LIST
66198: PUSH
66199: EMPTY
66200: LIST
66201: LIST
66202: LIST
66203: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
66204: LD_ADDR_VAR 0 56
66208: PUSH
66209: LD_INT 1
66211: PUSH
66212: LD_INT 3
66214: PUSH
66215: EMPTY
66216: LIST
66217: LIST
66218: PUSH
66219: LD_INT 0
66221: PUSH
66222: LD_INT 3
66224: PUSH
66225: EMPTY
66226: LIST
66227: LIST
66228: PUSH
66229: LD_INT 1
66231: NEG
66232: PUSH
66233: LD_INT 2
66235: PUSH
66236: EMPTY
66237: LIST
66238: LIST
66239: PUSH
66240: EMPTY
66241: LIST
66242: LIST
66243: LIST
66244: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66245: LD_ADDR_VAR 0 57
66249: PUSH
66250: LD_INT 2
66252: NEG
66253: PUSH
66254: LD_INT 1
66256: PUSH
66257: EMPTY
66258: LIST
66259: LIST
66260: PUSH
66261: LD_INT 3
66263: NEG
66264: PUSH
66265: LD_INT 0
66267: PUSH
66268: EMPTY
66269: LIST
66270: LIST
66271: PUSH
66272: LD_INT 3
66274: NEG
66275: PUSH
66276: LD_INT 1
66278: NEG
66279: PUSH
66280: EMPTY
66281: LIST
66282: LIST
66283: PUSH
66284: EMPTY
66285: LIST
66286: LIST
66287: LIST
66288: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66289: LD_ADDR_VAR 0 58
66293: PUSH
66294: LD_INT 2
66296: NEG
66297: PUSH
66298: LD_INT 3
66300: NEG
66301: PUSH
66302: EMPTY
66303: LIST
66304: LIST
66305: PUSH
66306: LD_INT 3
66308: NEG
66309: PUSH
66310: LD_INT 2
66312: NEG
66313: PUSH
66314: EMPTY
66315: LIST
66316: LIST
66317: PUSH
66318: LD_INT 3
66320: NEG
66321: PUSH
66322: LD_INT 3
66324: NEG
66325: PUSH
66326: EMPTY
66327: LIST
66328: LIST
66329: PUSH
66330: EMPTY
66331: LIST
66332: LIST
66333: LIST
66334: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
66335: LD_ADDR_VAR 0 59
66339: PUSH
66340: LD_INT 1
66342: NEG
66343: PUSH
66344: LD_INT 2
66346: NEG
66347: PUSH
66348: EMPTY
66349: LIST
66350: LIST
66351: PUSH
66352: LD_INT 0
66354: PUSH
66355: LD_INT 2
66357: NEG
66358: PUSH
66359: EMPTY
66360: LIST
66361: LIST
66362: PUSH
66363: LD_INT 1
66365: PUSH
66366: LD_INT 1
66368: NEG
66369: PUSH
66370: EMPTY
66371: LIST
66372: LIST
66373: PUSH
66374: EMPTY
66375: LIST
66376: LIST
66377: LIST
66378: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
66379: LD_ADDR_VAR 0 60
66383: PUSH
66384: LD_INT 1
66386: PUSH
66387: LD_INT 1
66389: NEG
66390: PUSH
66391: EMPTY
66392: LIST
66393: LIST
66394: PUSH
66395: LD_INT 2
66397: PUSH
66398: LD_INT 0
66400: PUSH
66401: EMPTY
66402: LIST
66403: LIST
66404: PUSH
66405: LD_INT 2
66407: PUSH
66408: LD_INT 1
66410: PUSH
66411: EMPTY
66412: LIST
66413: LIST
66414: PUSH
66415: EMPTY
66416: LIST
66417: LIST
66418: LIST
66419: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
66420: LD_ADDR_VAR 0 61
66424: PUSH
66425: LD_INT 2
66427: PUSH
66428: LD_INT 1
66430: PUSH
66431: EMPTY
66432: LIST
66433: LIST
66434: PUSH
66435: LD_INT 2
66437: PUSH
66438: LD_INT 2
66440: PUSH
66441: EMPTY
66442: LIST
66443: LIST
66444: PUSH
66445: LD_INT 1
66447: PUSH
66448: LD_INT 2
66450: PUSH
66451: EMPTY
66452: LIST
66453: LIST
66454: PUSH
66455: EMPTY
66456: LIST
66457: LIST
66458: LIST
66459: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
66460: LD_ADDR_VAR 0 62
66464: PUSH
66465: LD_INT 1
66467: PUSH
66468: LD_INT 2
66470: PUSH
66471: EMPTY
66472: LIST
66473: LIST
66474: PUSH
66475: LD_INT 0
66477: PUSH
66478: LD_INT 2
66480: PUSH
66481: EMPTY
66482: LIST
66483: LIST
66484: PUSH
66485: LD_INT 1
66487: NEG
66488: PUSH
66489: LD_INT 1
66491: PUSH
66492: EMPTY
66493: LIST
66494: LIST
66495: PUSH
66496: EMPTY
66497: LIST
66498: LIST
66499: LIST
66500: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
66501: LD_ADDR_VAR 0 63
66505: PUSH
66506: LD_INT 1
66508: NEG
66509: PUSH
66510: LD_INT 1
66512: PUSH
66513: EMPTY
66514: LIST
66515: LIST
66516: PUSH
66517: LD_INT 2
66519: NEG
66520: PUSH
66521: LD_INT 0
66523: PUSH
66524: EMPTY
66525: LIST
66526: LIST
66527: PUSH
66528: LD_INT 2
66530: NEG
66531: PUSH
66532: LD_INT 1
66534: NEG
66535: PUSH
66536: EMPTY
66537: LIST
66538: LIST
66539: PUSH
66540: EMPTY
66541: LIST
66542: LIST
66543: LIST
66544: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66545: LD_ADDR_VAR 0 64
66549: PUSH
66550: LD_INT 1
66552: NEG
66553: PUSH
66554: LD_INT 2
66556: NEG
66557: PUSH
66558: EMPTY
66559: LIST
66560: LIST
66561: PUSH
66562: LD_INT 2
66564: NEG
66565: PUSH
66566: LD_INT 1
66568: NEG
66569: PUSH
66570: EMPTY
66571: LIST
66572: LIST
66573: PUSH
66574: LD_INT 2
66576: NEG
66577: PUSH
66578: LD_INT 2
66580: NEG
66581: PUSH
66582: EMPTY
66583: LIST
66584: LIST
66585: PUSH
66586: EMPTY
66587: LIST
66588: LIST
66589: LIST
66590: ST_TO_ADDR
// end ; 2 :
66591: GO 69857
66593: LD_INT 2
66595: DOUBLE
66596: EQUAL
66597: IFTRUE 66601
66599: GO 69856
66601: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
66602: LD_ADDR_VAR 0 29
66606: PUSH
66607: LD_INT 4
66609: PUSH
66610: LD_INT 0
66612: PUSH
66613: EMPTY
66614: LIST
66615: LIST
66616: PUSH
66617: LD_INT 4
66619: PUSH
66620: LD_INT 1
66622: NEG
66623: PUSH
66624: EMPTY
66625: LIST
66626: LIST
66627: PUSH
66628: LD_INT 5
66630: PUSH
66631: LD_INT 0
66633: PUSH
66634: EMPTY
66635: LIST
66636: LIST
66637: PUSH
66638: LD_INT 5
66640: PUSH
66641: LD_INT 1
66643: PUSH
66644: EMPTY
66645: LIST
66646: LIST
66647: PUSH
66648: LD_INT 4
66650: PUSH
66651: LD_INT 1
66653: PUSH
66654: EMPTY
66655: LIST
66656: LIST
66657: PUSH
66658: LD_INT 3
66660: PUSH
66661: LD_INT 0
66663: PUSH
66664: EMPTY
66665: LIST
66666: LIST
66667: PUSH
66668: LD_INT 3
66670: PUSH
66671: LD_INT 1
66673: NEG
66674: PUSH
66675: EMPTY
66676: LIST
66677: LIST
66678: PUSH
66679: LD_INT 3
66681: PUSH
66682: LD_INT 2
66684: NEG
66685: PUSH
66686: EMPTY
66687: LIST
66688: LIST
66689: PUSH
66690: LD_INT 5
66692: PUSH
66693: LD_INT 2
66695: PUSH
66696: EMPTY
66697: LIST
66698: LIST
66699: PUSH
66700: LD_INT 3
66702: PUSH
66703: LD_INT 3
66705: PUSH
66706: EMPTY
66707: LIST
66708: LIST
66709: PUSH
66710: LD_INT 3
66712: PUSH
66713: LD_INT 2
66715: PUSH
66716: EMPTY
66717: LIST
66718: LIST
66719: PUSH
66720: LD_INT 4
66722: PUSH
66723: LD_INT 3
66725: PUSH
66726: EMPTY
66727: LIST
66728: LIST
66729: PUSH
66730: LD_INT 4
66732: PUSH
66733: LD_INT 4
66735: PUSH
66736: EMPTY
66737: LIST
66738: LIST
66739: PUSH
66740: LD_INT 3
66742: PUSH
66743: LD_INT 4
66745: PUSH
66746: EMPTY
66747: LIST
66748: LIST
66749: PUSH
66750: LD_INT 2
66752: PUSH
66753: LD_INT 3
66755: PUSH
66756: EMPTY
66757: LIST
66758: LIST
66759: PUSH
66760: LD_INT 2
66762: PUSH
66763: LD_INT 2
66765: PUSH
66766: EMPTY
66767: LIST
66768: LIST
66769: PUSH
66770: LD_INT 4
66772: PUSH
66773: LD_INT 2
66775: PUSH
66776: EMPTY
66777: LIST
66778: LIST
66779: PUSH
66780: LD_INT 2
66782: PUSH
66783: LD_INT 4
66785: PUSH
66786: EMPTY
66787: LIST
66788: LIST
66789: PUSH
66790: LD_INT 0
66792: PUSH
66793: LD_INT 4
66795: PUSH
66796: EMPTY
66797: LIST
66798: LIST
66799: PUSH
66800: LD_INT 0
66802: PUSH
66803: LD_INT 3
66805: PUSH
66806: EMPTY
66807: LIST
66808: LIST
66809: PUSH
66810: LD_INT 1
66812: PUSH
66813: LD_INT 4
66815: PUSH
66816: EMPTY
66817: LIST
66818: LIST
66819: PUSH
66820: LD_INT 1
66822: PUSH
66823: LD_INT 5
66825: PUSH
66826: EMPTY
66827: LIST
66828: LIST
66829: PUSH
66830: LD_INT 0
66832: PUSH
66833: LD_INT 5
66835: PUSH
66836: EMPTY
66837: LIST
66838: LIST
66839: PUSH
66840: LD_INT 1
66842: NEG
66843: PUSH
66844: LD_INT 4
66846: PUSH
66847: EMPTY
66848: LIST
66849: LIST
66850: PUSH
66851: LD_INT 1
66853: NEG
66854: PUSH
66855: LD_INT 3
66857: PUSH
66858: EMPTY
66859: LIST
66860: LIST
66861: PUSH
66862: LD_INT 2
66864: PUSH
66865: LD_INT 5
66867: PUSH
66868: EMPTY
66869: LIST
66870: LIST
66871: PUSH
66872: LD_INT 2
66874: NEG
66875: PUSH
66876: LD_INT 3
66878: PUSH
66879: EMPTY
66880: LIST
66881: LIST
66882: PUSH
66883: LD_INT 3
66885: NEG
66886: PUSH
66887: LD_INT 0
66889: PUSH
66890: EMPTY
66891: LIST
66892: LIST
66893: PUSH
66894: LD_INT 3
66896: NEG
66897: PUSH
66898: LD_INT 1
66900: NEG
66901: PUSH
66902: EMPTY
66903: LIST
66904: LIST
66905: PUSH
66906: LD_INT 2
66908: NEG
66909: PUSH
66910: LD_INT 0
66912: PUSH
66913: EMPTY
66914: LIST
66915: LIST
66916: PUSH
66917: LD_INT 2
66919: NEG
66920: PUSH
66921: LD_INT 1
66923: PUSH
66924: EMPTY
66925: LIST
66926: LIST
66927: PUSH
66928: LD_INT 3
66930: NEG
66931: PUSH
66932: LD_INT 1
66934: PUSH
66935: EMPTY
66936: LIST
66937: LIST
66938: PUSH
66939: LD_INT 4
66941: NEG
66942: PUSH
66943: LD_INT 0
66945: PUSH
66946: EMPTY
66947: LIST
66948: LIST
66949: PUSH
66950: LD_INT 4
66952: NEG
66953: PUSH
66954: LD_INT 1
66956: NEG
66957: PUSH
66958: EMPTY
66959: LIST
66960: LIST
66961: PUSH
66962: LD_INT 4
66964: NEG
66965: PUSH
66966: LD_INT 2
66968: NEG
66969: PUSH
66970: EMPTY
66971: LIST
66972: LIST
66973: PUSH
66974: LD_INT 2
66976: NEG
66977: PUSH
66978: LD_INT 2
66980: PUSH
66981: EMPTY
66982: LIST
66983: LIST
66984: PUSH
66985: LD_INT 4
66987: NEG
66988: PUSH
66989: LD_INT 4
66991: NEG
66992: PUSH
66993: EMPTY
66994: LIST
66995: LIST
66996: PUSH
66997: LD_INT 4
66999: NEG
67000: PUSH
67001: LD_INT 5
67003: NEG
67004: PUSH
67005: EMPTY
67006: LIST
67007: LIST
67008: PUSH
67009: LD_INT 3
67011: NEG
67012: PUSH
67013: LD_INT 4
67015: NEG
67016: PUSH
67017: EMPTY
67018: LIST
67019: LIST
67020: PUSH
67021: LD_INT 3
67023: NEG
67024: PUSH
67025: LD_INT 3
67027: NEG
67028: PUSH
67029: EMPTY
67030: LIST
67031: LIST
67032: PUSH
67033: LD_INT 4
67035: NEG
67036: PUSH
67037: LD_INT 3
67039: NEG
67040: PUSH
67041: EMPTY
67042: LIST
67043: LIST
67044: PUSH
67045: LD_INT 5
67047: NEG
67048: PUSH
67049: LD_INT 4
67051: NEG
67052: PUSH
67053: EMPTY
67054: LIST
67055: LIST
67056: PUSH
67057: LD_INT 5
67059: NEG
67060: PUSH
67061: LD_INT 5
67063: NEG
67064: PUSH
67065: EMPTY
67066: LIST
67067: LIST
67068: PUSH
67069: LD_INT 3
67071: NEG
67072: PUSH
67073: LD_INT 5
67075: NEG
67076: PUSH
67077: EMPTY
67078: LIST
67079: LIST
67080: PUSH
67081: LD_INT 5
67083: NEG
67084: PUSH
67085: LD_INT 3
67087: NEG
67088: PUSH
67089: EMPTY
67090: LIST
67091: LIST
67092: PUSH
67093: EMPTY
67094: LIST
67095: LIST
67096: LIST
67097: LIST
67098: LIST
67099: LIST
67100: LIST
67101: LIST
67102: LIST
67103: LIST
67104: LIST
67105: LIST
67106: LIST
67107: LIST
67108: LIST
67109: LIST
67110: LIST
67111: LIST
67112: LIST
67113: LIST
67114: LIST
67115: LIST
67116: LIST
67117: LIST
67118: LIST
67119: LIST
67120: LIST
67121: LIST
67122: LIST
67123: LIST
67124: LIST
67125: LIST
67126: LIST
67127: LIST
67128: LIST
67129: LIST
67130: LIST
67131: LIST
67132: LIST
67133: LIST
67134: LIST
67135: LIST
67136: LIST
67137: LIST
67138: LIST
67139: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
67140: LD_ADDR_VAR 0 30
67144: PUSH
67145: LD_INT 4
67147: PUSH
67148: LD_INT 4
67150: PUSH
67151: EMPTY
67152: LIST
67153: LIST
67154: PUSH
67155: LD_INT 4
67157: PUSH
67158: LD_INT 3
67160: PUSH
67161: EMPTY
67162: LIST
67163: LIST
67164: PUSH
67165: LD_INT 5
67167: PUSH
67168: LD_INT 4
67170: PUSH
67171: EMPTY
67172: LIST
67173: LIST
67174: PUSH
67175: LD_INT 5
67177: PUSH
67178: LD_INT 5
67180: PUSH
67181: EMPTY
67182: LIST
67183: LIST
67184: PUSH
67185: LD_INT 4
67187: PUSH
67188: LD_INT 5
67190: PUSH
67191: EMPTY
67192: LIST
67193: LIST
67194: PUSH
67195: LD_INT 3
67197: PUSH
67198: LD_INT 4
67200: PUSH
67201: EMPTY
67202: LIST
67203: LIST
67204: PUSH
67205: LD_INT 3
67207: PUSH
67208: LD_INT 3
67210: PUSH
67211: EMPTY
67212: LIST
67213: LIST
67214: PUSH
67215: LD_INT 5
67217: PUSH
67218: LD_INT 3
67220: PUSH
67221: EMPTY
67222: LIST
67223: LIST
67224: PUSH
67225: LD_INT 3
67227: PUSH
67228: LD_INT 5
67230: PUSH
67231: EMPTY
67232: LIST
67233: LIST
67234: PUSH
67235: LD_INT 0
67237: PUSH
67238: LD_INT 3
67240: PUSH
67241: EMPTY
67242: LIST
67243: LIST
67244: PUSH
67245: LD_INT 0
67247: PUSH
67248: LD_INT 2
67250: PUSH
67251: EMPTY
67252: LIST
67253: LIST
67254: PUSH
67255: LD_INT 1
67257: PUSH
67258: LD_INT 3
67260: PUSH
67261: EMPTY
67262: LIST
67263: LIST
67264: PUSH
67265: LD_INT 1
67267: PUSH
67268: LD_INT 4
67270: PUSH
67271: EMPTY
67272: LIST
67273: LIST
67274: PUSH
67275: LD_INT 0
67277: PUSH
67278: LD_INT 4
67280: PUSH
67281: EMPTY
67282: LIST
67283: LIST
67284: PUSH
67285: LD_INT 1
67287: NEG
67288: PUSH
67289: LD_INT 3
67291: PUSH
67292: EMPTY
67293: LIST
67294: LIST
67295: PUSH
67296: LD_INT 1
67298: NEG
67299: PUSH
67300: LD_INT 2
67302: PUSH
67303: EMPTY
67304: LIST
67305: LIST
67306: PUSH
67307: LD_INT 2
67309: PUSH
67310: LD_INT 4
67312: PUSH
67313: EMPTY
67314: LIST
67315: LIST
67316: PUSH
67317: LD_INT 2
67319: NEG
67320: PUSH
67321: LD_INT 2
67323: PUSH
67324: EMPTY
67325: LIST
67326: LIST
67327: PUSH
67328: LD_INT 4
67330: NEG
67331: PUSH
67332: LD_INT 0
67334: PUSH
67335: EMPTY
67336: LIST
67337: LIST
67338: PUSH
67339: LD_INT 4
67341: NEG
67342: PUSH
67343: LD_INT 1
67345: NEG
67346: PUSH
67347: EMPTY
67348: LIST
67349: LIST
67350: PUSH
67351: LD_INT 3
67353: NEG
67354: PUSH
67355: LD_INT 0
67357: PUSH
67358: EMPTY
67359: LIST
67360: LIST
67361: PUSH
67362: LD_INT 3
67364: NEG
67365: PUSH
67366: LD_INT 1
67368: PUSH
67369: EMPTY
67370: LIST
67371: LIST
67372: PUSH
67373: LD_INT 4
67375: NEG
67376: PUSH
67377: LD_INT 1
67379: PUSH
67380: EMPTY
67381: LIST
67382: LIST
67383: PUSH
67384: LD_INT 5
67386: NEG
67387: PUSH
67388: LD_INT 0
67390: PUSH
67391: EMPTY
67392: LIST
67393: LIST
67394: PUSH
67395: LD_INT 5
67397: NEG
67398: PUSH
67399: LD_INT 1
67401: NEG
67402: PUSH
67403: EMPTY
67404: LIST
67405: LIST
67406: PUSH
67407: LD_INT 5
67409: NEG
67410: PUSH
67411: LD_INT 2
67413: NEG
67414: PUSH
67415: EMPTY
67416: LIST
67417: LIST
67418: PUSH
67419: LD_INT 3
67421: NEG
67422: PUSH
67423: LD_INT 2
67425: PUSH
67426: EMPTY
67427: LIST
67428: LIST
67429: PUSH
67430: LD_INT 3
67432: NEG
67433: PUSH
67434: LD_INT 3
67436: NEG
67437: PUSH
67438: EMPTY
67439: LIST
67440: LIST
67441: PUSH
67442: LD_INT 3
67444: NEG
67445: PUSH
67446: LD_INT 4
67448: NEG
67449: PUSH
67450: EMPTY
67451: LIST
67452: LIST
67453: PUSH
67454: LD_INT 2
67456: NEG
67457: PUSH
67458: LD_INT 3
67460: NEG
67461: PUSH
67462: EMPTY
67463: LIST
67464: LIST
67465: PUSH
67466: LD_INT 2
67468: NEG
67469: PUSH
67470: LD_INT 2
67472: NEG
67473: PUSH
67474: EMPTY
67475: LIST
67476: LIST
67477: PUSH
67478: LD_INT 3
67480: NEG
67481: PUSH
67482: LD_INT 2
67484: NEG
67485: PUSH
67486: EMPTY
67487: LIST
67488: LIST
67489: PUSH
67490: LD_INT 4
67492: NEG
67493: PUSH
67494: LD_INT 3
67496: NEG
67497: PUSH
67498: EMPTY
67499: LIST
67500: LIST
67501: PUSH
67502: LD_INT 4
67504: NEG
67505: PUSH
67506: LD_INT 4
67508: NEG
67509: PUSH
67510: EMPTY
67511: LIST
67512: LIST
67513: PUSH
67514: LD_INT 2
67516: NEG
67517: PUSH
67518: LD_INT 4
67520: NEG
67521: PUSH
67522: EMPTY
67523: LIST
67524: LIST
67525: PUSH
67526: LD_INT 4
67528: NEG
67529: PUSH
67530: LD_INT 2
67532: NEG
67533: PUSH
67534: EMPTY
67535: LIST
67536: LIST
67537: PUSH
67538: LD_INT 0
67540: PUSH
67541: LD_INT 4
67543: NEG
67544: PUSH
67545: EMPTY
67546: LIST
67547: LIST
67548: PUSH
67549: LD_INT 0
67551: PUSH
67552: LD_INT 5
67554: NEG
67555: PUSH
67556: EMPTY
67557: LIST
67558: LIST
67559: PUSH
67560: LD_INT 1
67562: PUSH
67563: LD_INT 4
67565: NEG
67566: PUSH
67567: EMPTY
67568: LIST
67569: LIST
67570: PUSH
67571: LD_INT 1
67573: PUSH
67574: LD_INT 3
67576: NEG
67577: PUSH
67578: EMPTY
67579: LIST
67580: LIST
67581: PUSH
67582: LD_INT 0
67584: PUSH
67585: LD_INT 3
67587: NEG
67588: PUSH
67589: EMPTY
67590: LIST
67591: LIST
67592: PUSH
67593: LD_INT 1
67595: NEG
67596: PUSH
67597: LD_INT 4
67599: NEG
67600: PUSH
67601: EMPTY
67602: LIST
67603: LIST
67604: PUSH
67605: LD_INT 1
67607: NEG
67608: PUSH
67609: LD_INT 5
67611: NEG
67612: PUSH
67613: EMPTY
67614: LIST
67615: LIST
67616: PUSH
67617: LD_INT 2
67619: PUSH
67620: LD_INT 3
67622: NEG
67623: PUSH
67624: EMPTY
67625: LIST
67626: LIST
67627: PUSH
67628: LD_INT 2
67630: NEG
67631: PUSH
67632: LD_INT 5
67634: NEG
67635: PUSH
67636: EMPTY
67637: LIST
67638: LIST
67639: PUSH
67640: EMPTY
67641: LIST
67642: LIST
67643: LIST
67644: LIST
67645: LIST
67646: LIST
67647: LIST
67648: LIST
67649: LIST
67650: LIST
67651: LIST
67652: LIST
67653: LIST
67654: LIST
67655: LIST
67656: LIST
67657: LIST
67658: LIST
67659: LIST
67660: LIST
67661: LIST
67662: LIST
67663: LIST
67664: LIST
67665: LIST
67666: LIST
67667: LIST
67668: LIST
67669: LIST
67670: LIST
67671: LIST
67672: LIST
67673: LIST
67674: LIST
67675: LIST
67676: LIST
67677: LIST
67678: LIST
67679: LIST
67680: LIST
67681: LIST
67682: LIST
67683: LIST
67684: LIST
67685: LIST
67686: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
67687: LD_ADDR_VAR 0 31
67691: PUSH
67692: LD_INT 0
67694: PUSH
67695: LD_INT 4
67697: PUSH
67698: EMPTY
67699: LIST
67700: LIST
67701: PUSH
67702: LD_INT 0
67704: PUSH
67705: LD_INT 3
67707: PUSH
67708: EMPTY
67709: LIST
67710: LIST
67711: PUSH
67712: LD_INT 1
67714: PUSH
67715: LD_INT 4
67717: PUSH
67718: EMPTY
67719: LIST
67720: LIST
67721: PUSH
67722: LD_INT 1
67724: PUSH
67725: LD_INT 5
67727: PUSH
67728: EMPTY
67729: LIST
67730: LIST
67731: PUSH
67732: LD_INT 0
67734: PUSH
67735: LD_INT 5
67737: PUSH
67738: EMPTY
67739: LIST
67740: LIST
67741: PUSH
67742: LD_INT 1
67744: NEG
67745: PUSH
67746: LD_INT 4
67748: PUSH
67749: EMPTY
67750: LIST
67751: LIST
67752: PUSH
67753: LD_INT 1
67755: NEG
67756: PUSH
67757: LD_INT 3
67759: PUSH
67760: EMPTY
67761: LIST
67762: LIST
67763: PUSH
67764: LD_INT 2
67766: PUSH
67767: LD_INT 5
67769: PUSH
67770: EMPTY
67771: LIST
67772: LIST
67773: PUSH
67774: LD_INT 2
67776: NEG
67777: PUSH
67778: LD_INT 3
67780: PUSH
67781: EMPTY
67782: LIST
67783: LIST
67784: PUSH
67785: LD_INT 3
67787: NEG
67788: PUSH
67789: LD_INT 0
67791: PUSH
67792: EMPTY
67793: LIST
67794: LIST
67795: PUSH
67796: LD_INT 3
67798: NEG
67799: PUSH
67800: LD_INT 1
67802: NEG
67803: PUSH
67804: EMPTY
67805: LIST
67806: LIST
67807: PUSH
67808: LD_INT 2
67810: NEG
67811: PUSH
67812: LD_INT 0
67814: PUSH
67815: EMPTY
67816: LIST
67817: LIST
67818: PUSH
67819: LD_INT 2
67821: NEG
67822: PUSH
67823: LD_INT 1
67825: PUSH
67826: EMPTY
67827: LIST
67828: LIST
67829: PUSH
67830: LD_INT 3
67832: NEG
67833: PUSH
67834: LD_INT 1
67836: PUSH
67837: EMPTY
67838: LIST
67839: LIST
67840: PUSH
67841: LD_INT 4
67843: NEG
67844: PUSH
67845: LD_INT 0
67847: PUSH
67848: EMPTY
67849: LIST
67850: LIST
67851: PUSH
67852: LD_INT 4
67854: NEG
67855: PUSH
67856: LD_INT 1
67858: NEG
67859: PUSH
67860: EMPTY
67861: LIST
67862: LIST
67863: PUSH
67864: LD_INT 4
67866: NEG
67867: PUSH
67868: LD_INT 2
67870: NEG
67871: PUSH
67872: EMPTY
67873: LIST
67874: LIST
67875: PUSH
67876: LD_INT 2
67878: NEG
67879: PUSH
67880: LD_INT 2
67882: PUSH
67883: EMPTY
67884: LIST
67885: LIST
67886: PUSH
67887: LD_INT 4
67889: NEG
67890: PUSH
67891: LD_INT 4
67893: NEG
67894: PUSH
67895: EMPTY
67896: LIST
67897: LIST
67898: PUSH
67899: LD_INT 4
67901: NEG
67902: PUSH
67903: LD_INT 5
67905: NEG
67906: PUSH
67907: EMPTY
67908: LIST
67909: LIST
67910: PUSH
67911: LD_INT 3
67913: NEG
67914: PUSH
67915: LD_INT 4
67917: NEG
67918: PUSH
67919: EMPTY
67920: LIST
67921: LIST
67922: PUSH
67923: LD_INT 3
67925: NEG
67926: PUSH
67927: LD_INT 3
67929: NEG
67930: PUSH
67931: EMPTY
67932: LIST
67933: LIST
67934: PUSH
67935: LD_INT 4
67937: NEG
67938: PUSH
67939: LD_INT 3
67941: NEG
67942: PUSH
67943: EMPTY
67944: LIST
67945: LIST
67946: PUSH
67947: LD_INT 5
67949: NEG
67950: PUSH
67951: LD_INT 4
67953: NEG
67954: PUSH
67955: EMPTY
67956: LIST
67957: LIST
67958: PUSH
67959: LD_INT 5
67961: NEG
67962: PUSH
67963: LD_INT 5
67965: NEG
67966: PUSH
67967: EMPTY
67968: LIST
67969: LIST
67970: PUSH
67971: LD_INT 3
67973: NEG
67974: PUSH
67975: LD_INT 5
67977: NEG
67978: PUSH
67979: EMPTY
67980: LIST
67981: LIST
67982: PUSH
67983: LD_INT 5
67985: NEG
67986: PUSH
67987: LD_INT 3
67989: NEG
67990: PUSH
67991: EMPTY
67992: LIST
67993: LIST
67994: PUSH
67995: LD_INT 0
67997: PUSH
67998: LD_INT 3
68000: NEG
68001: PUSH
68002: EMPTY
68003: LIST
68004: LIST
68005: PUSH
68006: LD_INT 0
68008: PUSH
68009: LD_INT 4
68011: NEG
68012: PUSH
68013: EMPTY
68014: LIST
68015: LIST
68016: PUSH
68017: LD_INT 1
68019: PUSH
68020: LD_INT 3
68022: NEG
68023: PUSH
68024: EMPTY
68025: LIST
68026: LIST
68027: PUSH
68028: LD_INT 1
68030: PUSH
68031: LD_INT 2
68033: NEG
68034: PUSH
68035: EMPTY
68036: LIST
68037: LIST
68038: PUSH
68039: LD_INT 0
68041: PUSH
68042: LD_INT 2
68044: NEG
68045: PUSH
68046: EMPTY
68047: LIST
68048: LIST
68049: PUSH
68050: LD_INT 1
68052: NEG
68053: PUSH
68054: LD_INT 3
68056: NEG
68057: PUSH
68058: EMPTY
68059: LIST
68060: LIST
68061: PUSH
68062: LD_INT 1
68064: NEG
68065: PUSH
68066: LD_INT 4
68068: NEG
68069: PUSH
68070: EMPTY
68071: LIST
68072: LIST
68073: PUSH
68074: LD_INT 2
68076: PUSH
68077: LD_INT 2
68079: NEG
68080: PUSH
68081: EMPTY
68082: LIST
68083: LIST
68084: PUSH
68085: LD_INT 2
68087: NEG
68088: PUSH
68089: LD_INT 4
68091: NEG
68092: PUSH
68093: EMPTY
68094: LIST
68095: LIST
68096: PUSH
68097: LD_INT 4
68099: PUSH
68100: LD_INT 0
68102: PUSH
68103: EMPTY
68104: LIST
68105: LIST
68106: PUSH
68107: LD_INT 4
68109: PUSH
68110: LD_INT 1
68112: NEG
68113: PUSH
68114: EMPTY
68115: LIST
68116: LIST
68117: PUSH
68118: LD_INT 5
68120: PUSH
68121: LD_INT 0
68123: PUSH
68124: EMPTY
68125: LIST
68126: LIST
68127: PUSH
68128: LD_INT 5
68130: PUSH
68131: LD_INT 1
68133: PUSH
68134: EMPTY
68135: LIST
68136: LIST
68137: PUSH
68138: LD_INT 4
68140: PUSH
68141: LD_INT 1
68143: PUSH
68144: EMPTY
68145: LIST
68146: LIST
68147: PUSH
68148: LD_INT 3
68150: PUSH
68151: LD_INT 0
68153: PUSH
68154: EMPTY
68155: LIST
68156: LIST
68157: PUSH
68158: LD_INT 3
68160: PUSH
68161: LD_INT 1
68163: NEG
68164: PUSH
68165: EMPTY
68166: LIST
68167: LIST
68168: PUSH
68169: LD_INT 3
68171: PUSH
68172: LD_INT 2
68174: NEG
68175: PUSH
68176: EMPTY
68177: LIST
68178: LIST
68179: PUSH
68180: LD_INT 5
68182: PUSH
68183: LD_INT 2
68185: PUSH
68186: EMPTY
68187: LIST
68188: LIST
68189: PUSH
68190: EMPTY
68191: LIST
68192: LIST
68193: LIST
68194: LIST
68195: LIST
68196: LIST
68197: LIST
68198: LIST
68199: LIST
68200: LIST
68201: LIST
68202: LIST
68203: LIST
68204: LIST
68205: LIST
68206: LIST
68207: LIST
68208: LIST
68209: LIST
68210: LIST
68211: LIST
68212: LIST
68213: LIST
68214: LIST
68215: LIST
68216: LIST
68217: LIST
68218: LIST
68219: LIST
68220: LIST
68221: LIST
68222: LIST
68223: LIST
68224: LIST
68225: LIST
68226: LIST
68227: LIST
68228: LIST
68229: LIST
68230: LIST
68231: LIST
68232: LIST
68233: LIST
68234: LIST
68235: LIST
68236: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
68237: LD_ADDR_VAR 0 32
68241: PUSH
68242: LD_INT 4
68244: NEG
68245: PUSH
68246: LD_INT 0
68248: PUSH
68249: EMPTY
68250: LIST
68251: LIST
68252: PUSH
68253: LD_INT 4
68255: NEG
68256: PUSH
68257: LD_INT 1
68259: NEG
68260: PUSH
68261: EMPTY
68262: LIST
68263: LIST
68264: PUSH
68265: LD_INT 3
68267: NEG
68268: PUSH
68269: LD_INT 0
68271: PUSH
68272: EMPTY
68273: LIST
68274: LIST
68275: PUSH
68276: LD_INT 3
68278: NEG
68279: PUSH
68280: LD_INT 1
68282: PUSH
68283: EMPTY
68284: LIST
68285: LIST
68286: PUSH
68287: LD_INT 4
68289: NEG
68290: PUSH
68291: LD_INT 1
68293: PUSH
68294: EMPTY
68295: LIST
68296: LIST
68297: PUSH
68298: LD_INT 5
68300: NEG
68301: PUSH
68302: LD_INT 0
68304: PUSH
68305: EMPTY
68306: LIST
68307: LIST
68308: PUSH
68309: LD_INT 5
68311: NEG
68312: PUSH
68313: LD_INT 1
68315: NEG
68316: PUSH
68317: EMPTY
68318: LIST
68319: LIST
68320: PUSH
68321: LD_INT 5
68323: NEG
68324: PUSH
68325: LD_INT 2
68327: NEG
68328: PUSH
68329: EMPTY
68330: LIST
68331: LIST
68332: PUSH
68333: LD_INT 3
68335: NEG
68336: PUSH
68337: LD_INT 2
68339: PUSH
68340: EMPTY
68341: LIST
68342: LIST
68343: PUSH
68344: LD_INT 3
68346: NEG
68347: PUSH
68348: LD_INT 3
68350: NEG
68351: PUSH
68352: EMPTY
68353: LIST
68354: LIST
68355: PUSH
68356: LD_INT 3
68358: NEG
68359: PUSH
68360: LD_INT 4
68362: NEG
68363: PUSH
68364: EMPTY
68365: LIST
68366: LIST
68367: PUSH
68368: LD_INT 2
68370: NEG
68371: PUSH
68372: LD_INT 3
68374: NEG
68375: PUSH
68376: EMPTY
68377: LIST
68378: LIST
68379: PUSH
68380: LD_INT 2
68382: NEG
68383: PUSH
68384: LD_INT 2
68386: NEG
68387: PUSH
68388: EMPTY
68389: LIST
68390: LIST
68391: PUSH
68392: LD_INT 3
68394: NEG
68395: PUSH
68396: LD_INT 2
68398: NEG
68399: PUSH
68400: EMPTY
68401: LIST
68402: LIST
68403: PUSH
68404: LD_INT 4
68406: NEG
68407: PUSH
68408: LD_INT 3
68410: NEG
68411: PUSH
68412: EMPTY
68413: LIST
68414: LIST
68415: PUSH
68416: LD_INT 4
68418: NEG
68419: PUSH
68420: LD_INT 4
68422: NEG
68423: PUSH
68424: EMPTY
68425: LIST
68426: LIST
68427: PUSH
68428: LD_INT 2
68430: NEG
68431: PUSH
68432: LD_INT 4
68434: NEG
68435: PUSH
68436: EMPTY
68437: LIST
68438: LIST
68439: PUSH
68440: LD_INT 4
68442: NEG
68443: PUSH
68444: LD_INT 2
68446: NEG
68447: PUSH
68448: EMPTY
68449: LIST
68450: LIST
68451: PUSH
68452: LD_INT 0
68454: PUSH
68455: LD_INT 4
68457: NEG
68458: PUSH
68459: EMPTY
68460: LIST
68461: LIST
68462: PUSH
68463: LD_INT 0
68465: PUSH
68466: LD_INT 5
68468: NEG
68469: PUSH
68470: EMPTY
68471: LIST
68472: LIST
68473: PUSH
68474: LD_INT 1
68476: PUSH
68477: LD_INT 4
68479: NEG
68480: PUSH
68481: EMPTY
68482: LIST
68483: LIST
68484: PUSH
68485: LD_INT 1
68487: PUSH
68488: LD_INT 3
68490: NEG
68491: PUSH
68492: EMPTY
68493: LIST
68494: LIST
68495: PUSH
68496: LD_INT 0
68498: PUSH
68499: LD_INT 3
68501: NEG
68502: PUSH
68503: EMPTY
68504: LIST
68505: LIST
68506: PUSH
68507: LD_INT 1
68509: NEG
68510: PUSH
68511: LD_INT 4
68513: NEG
68514: PUSH
68515: EMPTY
68516: LIST
68517: LIST
68518: PUSH
68519: LD_INT 1
68521: NEG
68522: PUSH
68523: LD_INT 5
68525: NEG
68526: PUSH
68527: EMPTY
68528: LIST
68529: LIST
68530: PUSH
68531: LD_INT 2
68533: PUSH
68534: LD_INT 3
68536: NEG
68537: PUSH
68538: EMPTY
68539: LIST
68540: LIST
68541: PUSH
68542: LD_INT 2
68544: NEG
68545: PUSH
68546: LD_INT 5
68548: NEG
68549: PUSH
68550: EMPTY
68551: LIST
68552: LIST
68553: PUSH
68554: LD_INT 3
68556: PUSH
68557: LD_INT 0
68559: PUSH
68560: EMPTY
68561: LIST
68562: LIST
68563: PUSH
68564: LD_INT 3
68566: PUSH
68567: LD_INT 1
68569: NEG
68570: PUSH
68571: EMPTY
68572: LIST
68573: LIST
68574: PUSH
68575: LD_INT 4
68577: PUSH
68578: LD_INT 0
68580: PUSH
68581: EMPTY
68582: LIST
68583: LIST
68584: PUSH
68585: LD_INT 4
68587: PUSH
68588: LD_INT 1
68590: PUSH
68591: EMPTY
68592: LIST
68593: LIST
68594: PUSH
68595: LD_INT 3
68597: PUSH
68598: LD_INT 1
68600: PUSH
68601: EMPTY
68602: LIST
68603: LIST
68604: PUSH
68605: LD_INT 2
68607: PUSH
68608: LD_INT 0
68610: PUSH
68611: EMPTY
68612: LIST
68613: LIST
68614: PUSH
68615: LD_INT 2
68617: PUSH
68618: LD_INT 1
68620: NEG
68621: PUSH
68622: EMPTY
68623: LIST
68624: LIST
68625: PUSH
68626: LD_INT 2
68628: PUSH
68629: LD_INT 2
68631: NEG
68632: PUSH
68633: EMPTY
68634: LIST
68635: LIST
68636: PUSH
68637: LD_INT 4
68639: PUSH
68640: LD_INT 2
68642: PUSH
68643: EMPTY
68644: LIST
68645: LIST
68646: PUSH
68647: LD_INT 4
68649: PUSH
68650: LD_INT 4
68652: PUSH
68653: EMPTY
68654: LIST
68655: LIST
68656: PUSH
68657: LD_INT 4
68659: PUSH
68660: LD_INT 3
68662: PUSH
68663: EMPTY
68664: LIST
68665: LIST
68666: PUSH
68667: LD_INT 5
68669: PUSH
68670: LD_INT 4
68672: PUSH
68673: EMPTY
68674: LIST
68675: LIST
68676: PUSH
68677: LD_INT 5
68679: PUSH
68680: LD_INT 5
68682: PUSH
68683: EMPTY
68684: LIST
68685: LIST
68686: PUSH
68687: LD_INT 4
68689: PUSH
68690: LD_INT 5
68692: PUSH
68693: EMPTY
68694: LIST
68695: LIST
68696: PUSH
68697: LD_INT 3
68699: PUSH
68700: LD_INT 4
68702: PUSH
68703: EMPTY
68704: LIST
68705: LIST
68706: PUSH
68707: LD_INT 3
68709: PUSH
68710: LD_INT 3
68712: PUSH
68713: EMPTY
68714: LIST
68715: LIST
68716: PUSH
68717: LD_INT 5
68719: PUSH
68720: LD_INT 3
68722: PUSH
68723: EMPTY
68724: LIST
68725: LIST
68726: PUSH
68727: LD_INT 3
68729: PUSH
68730: LD_INT 5
68732: PUSH
68733: EMPTY
68734: LIST
68735: LIST
68736: PUSH
68737: EMPTY
68738: LIST
68739: LIST
68740: LIST
68741: LIST
68742: LIST
68743: LIST
68744: LIST
68745: LIST
68746: LIST
68747: LIST
68748: LIST
68749: LIST
68750: LIST
68751: LIST
68752: LIST
68753: LIST
68754: LIST
68755: LIST
68756: LIST
68757: LIST
68758: LIST
68759: LIST
68760: LIST
68761: LIST
68762: LIST
68763: LIST
68764: LIST
68765: LIST
68766: LIST
68767: LIST
68768: LIST
68769: LIST
68770: LIST
68771: LIST
68772: LIST
68773: LIST
68774: LIST
68775: LIST
68776: LIST
68777: LIST
68778: LIST
68779: LIST
68780: LIST
68781: LIST
68782: LIST
68783: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
68784: LD_ADDR_VAR 0 33
68788: PUSH
68789: LD_INT 4
68791: NEG
68792: PUSH
68793: LD_INT 4
68795: NEG
68796: PUSH
68797: EMPTY
68798: LIST
68799: LIST
68800: PUSH
68801: LD_INT 4
68803: NEG
68804: PUSH
68805: LD_INT 5
68807: NEG
68808: PUSH
68809: EMPTY
68810: LIST
68811: LIST
68812: PUSH
68813: LD_INT 3
68815: NEG
68816: PUSH
68817: LD_INT 4
68819: NEG
68820: PUSH
68821: EMPTY
68822: LIST
68823: LIST
68824: PUSH
68825: LD_INT 3
68827: NEG
68828: PUSH
68829: LD_INT 3
68831: NEG
68832: PUSH
68833: EMPTY
68834: LIST
68835: LIST
68836: PUSH
68837: LD_INT 4
68839: NEG
68840: PUSH
68841: LD_INT 3
68843: NEG
68844: PUSH
68845: EMPTY
68846: LIST
68847: LIST
68848: PUSH
68849: LD_INT 5
68851: NEG
68852: PUSH
68853: LD_INT 4
68855: NEG
68856: PUSH
68857: EMPTY
68858: LIST
68859: LIST
68860: PUSH
68861: LD_INT 5
68863: NEG
68864: PUSH
68865: LD_INT 5
68867: NEG
68868: PUSH
68869: EMPTY
68870: LIST
68871: LIST
68872: PUSH
68873: LD_INT 3
68875: NEG
68876: PUSH
68877: LD_INT 5
68879: NEG
68880: PUSH
68881: EMPTY
68882: LIST
68883: LIST
68884: PUSH
68885: LD_INT 5
68887: NEG
68888: PUSH
68889: LD_INT 3
68891: NEG
68892: PUSH
68893: EMPTY
68894: LIST
68895: LIST
68896: PUSH
68897: LD_INT 0
68899: PUSH
68900: LD_INT 3
68902: NEG
68903: PUSH
68904: EMPTY
68905: LIST
68906: LIST
68907: PUSH
68908: LD_INT 0
68910: PUSH
68911: LD_INT 4
68913: NEG
68914: PUSH
68915: EMPTY
68916: LIST
68917: LIST
68918: PUSH
68919: LD_INT 1
68921: PUSH
68922: LD_INT 3
68924: NEG
68925: PUSH
68926: EMPTY
68927: LIST
68928: LIST
68929: PUSH
68930: LD_INT 1
68932: PUSH
68933: LD_INT 2
68935: NEG
68936: PUSH
68937: EMPTY
68938: LIST
68939: LIST
68940: PUSH
68941: LD_INT 0
68943: PUSH
68944: LD_INT 2
68946: NEG
68947: PUSH
68948: EMPTY
68949: LIST
68950: LIST
68951: PUSH
68952: LD_INT 1
68954: NEG
68955: PUSH
68956: LD_INT 3
68958: NEG
68959: PUSH
68960: EMPTY
68961: LIST
68962: LIST
68963: PUSH
68964: LD_INT 1
68966: NEG
68967: PUSH
68968: LD_INT 4
68970: NEG
68971: PUSH
68972: EMPTY
68973: LIST
68974: LIST
68975: PUSH
68976: LD_INT 2
68978: PUSH
68979: LD_INT 2
68981: NEG
68982: PUSH
68983: EMPTY
68984: LIST
68985: LIST
68986: PUSH
68987: LD_INT 2
68989: NEG
68990: PUSH
68991: LD_INT 4
68993: NEG
68994: PUSH
68995: EMPTY
68996: LIST
68997: LIST
68998: PUSH
68999: LD_INT 4
69001: PUSH
69002: LD_INT 0
69004: PUSH
69005: EMPTY
69006: LIST
69007: LIST
69008: PUSH
69009: LD_INT 4
69011: PUSH
69012: LD_INT 1
69014: NEG
69015: PUSH
69016: EMPTY
69017: LIST
69018: LIST
69019: PUSH
69020: LD_INT 5
69022: PUSH
69023: LD_INT 0
69025: PUSH
69026: EMPTY
69027: LIST
69028: LIST
69029: PUSH
69030: LD_INT 5
69032: PUSH
69033: LD_INT 1
69035: PUSH
69036: EMPTY
69037: LIST
69038: LIST
69039: PUSH
69040: LD_INT 4
69042: PUSH
69043: LD_INT 1
69045: PUSH
69046: EMPTY
69047: LIST
69048: LIST
69049: PUSH
69050: LD_INT 3
69052: PUSH
69053: LD_INT 0
69055: PUSH
69056: EMPTY
69057: LIST
69058: LIST
69059: PUSH
69060: LD_INT 3
69062: PUSH
69063: LD_INT 1
69065: NEG
69066: PUSH
69067: EMPTY
69068: LIST
69069: LIST
69070: PUSH
69071: LD_INT 3
69073: PUSH
69074: LD_INT 2
69076: NEG
69077: PUSH
69078: EMPTY
69079: LIST
69080: LIST
69081: PUSH
69082: LD_INT 5
69084: PUSH
69085: LD_INT 2
69087: PUSH
69088: EMPTY
69089: LIST
69090: LIST
69091: PUSH
69092: LD_INT 3
69094: PUSH
69095: LD_INT 3
69097: PUSH
69098: EMPTY
69099: LIST
69100: LIST
69101: PUSH
69102: LD_INT 3
69104: PUSH
69105: LD_INT 2
69107: PUSH
69108: EMPTY
69109: LIST
69110: LIST
69111: PUSH
69112: LD_INT 4
69114: PUSH
69115: LD_INT 3
69117: PUSH
69118: EMPTY
69119: LIST
69120: LIST
69121: PUSH
69122: LD_INT 4
69124: PUSH
69125: LD_INT 4
69127: PUSH
69128: EMPTY
69129: LIST
69130: LIST
69131: PUSH
69132: LD_INT 3
69134: PUSH
69135: LD_INT 4
69137: PUSH
69138: EMPTY
69139: LIST
69140: LIST
69141: PUSH
69142: LD_INT 2
69144: PUSH
69145: LD_INT 3
69147: PUSH
69148: EMPTY
69149: LIST
69150: LIST
69151: PUSH
69152: LD_INT 2
69154: PUSH
69155: LD_INT 2
69157: PUSH
69158: EMPTY
69159: LIST
69160: LIST
69161: PUSH
69162: LD_INT 4
69164: PUSH
69165: LD_INT 2
69167: PUSH
69168: EMPTY
69169: LIST
69170: LIST
69171: PUSH
69172: LD_INT 2
69174: PUSH
69175: LD_INT 4
69177: PUSH
69178: EMPTY
69179: LIST
69180: LIST
69181: PUSH
69182: LD_INT 0
69184: PUSH
69185: LD_INT 4
69187: PUSH
69188: EMPTY
69189: LIST
69190: LIST
69191: PUSH
69192: LD_INT 0
69194: PUSH
69195: LD_INT 3
69197: PUSH
69198: EMPTY
69199: LIST
69200: LIST
69201: PUSH
69202: LD_INT 1
69204: PUSH
69205: LD_INT 4
69207: PUSH
69208: EMPTY
69209: LIST
69210: LIST
69211: PUSH
69212: LD_INT 1
69214: PUSH
69215: LD_INT 5
69217: PUSH
69218: EMPTY
69219: LIST
69220: LIST
69221: PUSH
69222: LD_INT 0
69224: PUSH
69225: LD_INT 5
69227: PUSH
69228: EMPTY
69229: LIST
69230: LIST
69231: PUSH
69232: LD_INT 1
69234: NEG
69235: PUSH
69236: LD_INT 4
69238: PUSH
69239: EMPTY
69240: LIST
69241: LIST
69242: PUSH
69243: LD_INT 1
69245: NEG
69246: PUSH
69247: LD_INT 3
69249: PUSH
69250: EMPTY
69251: LIST
69252: LIST
69253: PUSH
69254: LD_INT 2
69256: PUSH
69257: LD_INT 5
69259: PUSH
69260: EMPTY
69261: LIST
69262: LIST
69263: PUSH
69264: LD_INT 2
69266: NEG
69267: PUSH
69268: LD_INT 3
69270: PUSH
69271: EMPTY
69272: LIST
69273: LIST
69274: PUSH
69275: EMPTY
69276: LIST
69277: LIST
69278: LIST
69279: LIST
69280: LIST
69281: LIST
69282: LIST
69283: LIST
69284: LIST
69285: LIST
69286: LIST
69287: LIST
69288: LIST
69289: LIST
69290: LIST
69291: LIST
69292: LIST
69293: LIST
69294: LIST
69295: LIST
69296: LIST
69297: LIST
69298: LIST
69299: LIST
69300: LIST
69301: LIST
69302: LIST
69303: LIST
69304: LIST
69305: LIST
69306: LIST
69307: LIST
69308: LIST
69309: LIST
69310: LIST
69311: LIST
69312: LIST
69313: LIST
69314: LIST
69315: LIST
69316: LIST
69317: LIST
69318: LIST
69319: LIST
69320: LIST
69321: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
69322: LD_ADDR_VAR 0 34
69326: PUSH
69327: LD_INT 0
69329: PUSH
69330: LD_INT 4
69332: NEG
69333: PUSH
69334: EMPTY
69335: LIST
69336: LIST
69337: PUSH
69338: LD_INT 0
69340: PUSH
69341: LD_INT 5
69343: NEG
69344: PUSH
69345: EMPTY
69346: LIST
69347: LIST
69348: PUSH
69349: LD_INT 1
69351: PUSH
69352: LD_INT 4
69354: NEG
69355: PUSH
69356: EMPTY
69357: LIST
69358: LIST
69359: PUSH
69360: LD_INT 1
69362: PUSH
69363: LD_INT 3
69365: NEG
69366: PUSH
69367: EMPTY
69368: LIST
69369: LIST
69370: PUSH
69371: LD_INT 0
69373: PUSH
69374: LD_INT 3
69376: NEG
69377: PUSH
69378: EMPTY
69379: LIST
69380: LIST
69381: PUSH
69382: LD_INT 1
69384: NEG
69385: PUSH
69386: LD_INT 4
69388: NEG
69389: PUSH
69390: EMPTY
69391: LIST
69392: LIST
69393: PUSH
69394: LD_INT 1
69396: NEG
69397: PUSH
69398: LD_INT 5
69400: NEG
69401: PUSH
69402: EMPTY
69403: LIST
69404: LIST
69405: PUSH
69406: LD_INT 2
69408: PUSH
69409: LD_INT 3
69411: NEG
69412: PUSH
69413: EMPTY
69414: LIST
69415: LIST
69416: PUSH
69417: LD_INT 2
69419: NEG
69420: PUSH
69421: LD_INT 5
69423: NEG
69424: PUSH
69425: EMPTY
69426: LIST
69427: LIST
69428: PUSH
69429: LD_INT 3
69431: PUSH
69432: LD_INT 0
69434: PUSH
69435: EMPTY
69436: LIST
69437: LIST
69438: PUSH
69439: LD_INT 3
69441: PUSH
69442: LD_INT 1
69444: NEG
69445: PUSH
69446: EMPTY
69447: LIST
69448: LIST
69449: PUSH
69450: LD_INT 4
69452: PUSH
69453: LD_INT 0
69455: PUSH
69456: EMPTY
69457: LIST
69458: LIST
69459: PUSH
69460: LD_INT 4
69462: PUSH
69463: LD_INT 1
69465: PUSH
69466: EMPTY
69467: LIST
69468: LIST
69469: PUSH
69470: LD_INT 3
69472: PUSH
69473: LD_INT 1
69475: PUSH
69476: EMPTY
69477: LIST
69478: LIST
69479: PUSH
69480: LD_INT 2
69482: PUSH
69483: LD_INT 0
69485: PUSH
69486: EMPTY
69487: LIST
69488: LIST
69489: PUSH
69490: LD_INT 2
69492: PUSH
69493: LD_INT 1
69495: NEG
69496: PUSH
69497: EMPTY
69498: LIST
69499: LIST
69500: PUSH
69501: LD_INT 2
69503: PUSH
69504: LD_INT 2
69506: NEG
69507: PUSH
69508: EMPTY
69509: LIST
69510: LIST
69511: PUSH
69512: LD_INT 4
69514: PUSH
69515: LD_INT 2
69517: PUSH
69518: EMPTY
69519: LIST
69520: LIST
69521: PUSH
69522: LD_INT 4
69524: PUSH
69525: LD_INT 4
69527: PUSH
69528: EMPTY
69529: LIST
69530: LIST
69531: PUSH
69532: LD_INT 4
69534: PUSH
69535: LD_INT 3
69537: PUSH
69538: EMPTY
69539: LIST
69540: LIST
69541: PUSH
69542: LD_INT 5
69544: PUSH
69545: LD_INT 4
69547: PUSH
69548: EMPTY
69549: LIST
69550: LIST
69551: PUSH
69552: LD_INT 5
69554: PUSH
69555: LD_INT 5
69557: PUSH
69558: EMPTY
69559: LIST
69560: LIST
69561: PUSH
69562: LD_INT 4
69564: PUSH
69565: LD_INT 5
69567: PUSH
69568: EMPTY
69569: LIST
69570: LIST
69571: PUSH
69572: LD_INT 3
69574: PUSH
69575: LD_INT 4
69577: PUSH
69578: EMPTY
69579: LIST
69580: LIST
69581: PUSH
69582: LD_INT 3
69584: PUSH
69585: LD_INT 3
69587: PUSH
69588: EMPTY
69589: LIST
69590: LIST
69591: PUSH
69592: LD_INT 5
69594: PUSH
69595: LD_INT 3
69597: PUSH
69598: EMPTY
69599: LIST
69600: LIST
69601: PUSH
69602: LD_INT 3
69604: PUSH
69605: LD_INT 5
69607: PUSH
69608: EMPTY
69609: LIST
69610: LIST
69611: PUSH
69612: LD_INT 0
69614: PUSH
69615: LD_INT 3
69617: PUSH
69618: EMPTY
69619: LIST
69620: LIST
69621: PUSH
69622: LD_INT 0
69624: PUSH
69625: LD_INT 2
69627: PUSH
69628: EMPTY
69629: LIST
69630: LIST
69631: PUSH
69632: LD_INT 1
69634: PUSH
69635: LD_INT 3
69637: PUSH
69638: EMPTY
69639: LIST
69640: LIST
69641: PUSH
69642: LD_INT 1
69644: PUSH
69645: LD_INT 4
69647: PUSH
69648: EMPTY
69649: LIST
69650: LIST
69651: PUSH
69652: LD_INT 0
69654: PUSH
69655: LD_INT 4
69657: PUSH
69658: EMPTY
69659: LIST
69660: LIST
69661: PUSH
69662: LD_INT 1
69664: NEG
69665: PUSH
69666: LD_INT 3
69668: PUSH
69669: EMPTY
69670: LIST
69671: LIST
69672: PUSH
69673: LD_INT 1
69675: NEG
69676: PUSH
69677: LD_INT 2
69679: PUSH
69680: EMPTY
69681: LIST
69682: LIST
69683: PUSH
69684: LD_INT 2
69686: PUSH
69687: LD_INT 4
69689: PUSH
69690: EMPTY
69691: LIST
69692: LIST
69693: PUSH
69694: LD_INT 2
69696: NEG
69697: PUSH
69698: LD_INT 2
69700: PUSH
69701: EMPTY
69702: LIST
69703: LIST
69704: PUSH
69705: LD_INT 4
69707: NEG
69708: PUSH
69709: LD_INT 0
69711: PUSH
69712: EMPTY
69713: LIST
69714: LIST
69715: PUSH
69716: LD_INT 4
69718: NEG
69719: PUSH
69720: LD_INT 1
69722: NEG
69723: PUSH
69724: EMPTY
69725: LIST
69726: LIST
69727: PUSH
69728: LD_INT 3
69730: NEG
69731: PUSH
69732: LD_INT 0
69734: PUSH
69735: EMPTY
69736: LIST
69737: LIST
69738: PUSH
69739: LD_INT 3
69741: NEG
69742: PUSH
69743: LD_INT 1
69745: PUSH
69746: EMPTY
69747: LIST
69748: LIST
69749: PUSH
69750: LD_INT 4
69752: NEG
69753: PUSH
69754: LD_INT 1
69756: PUSH
69757: EMPTY
69758: LIST
69759: LIST
69760: PUSH
69761: LD_INT 5
69763: NEG
69764: PUSH
69765: LD_INT 0
69767: PUSH
69768: EMPTY
69769: LIST
69770: LIST
69771: PUSH
69772: LD_INT 5
69774: NEG
69775: PUSH
69776: LD_INT 1
69778: NEG
69779: PUSH
69780: EMPTY
69781: LIST
69782: LIST
69783: PUSH
69784: LD_INT 5
69786: NEG
69787: PUSH
69788: LD_INT 2
69790: NEG
69791: PUSH
69792: EMPTY
69793: LIST
69794: LIST
69795: PUSH
69796: LD_INT 3
69798: NEG
69799: PUSH
69800: LD_INT 2
69802: PUSH
69803: EMPTY
69804: LIST
69805: LIST
69806: PUSH
69807: EMPTY
69808: LIST
69809: LIST
69810: LIST
69811: LIST
69812: LIST
69813: LIST
69814: LIST
69815: LIST
69816: LIST
69817: LIST
69818: LIST
69819: LIST
69820: LIST
69821: LIST
69822: LIST
69823: LIST
69824: LIST
69825: LIST
69826: LIST
69827: LIST
69828: LIST
69829: LIST
69830: LIST
69831: LIST
69832: LIST
69833: LIST
69834: LIST
69835: LIST
69836: LIST
69837: LIST
69838: LIST
69839: LIST
69840: LIST
69841: LIST
69842: LIST
69843: LIST
69844: LIST
69845: LIST
69846: LIST
69847: LIST
69848: LIST
69849: LIST
69850: LIST
69851: LIST
69852: LIST
69853: ST_TO_ADDR
// end ; end ;
69854: GO 69857
69856: POP
// case btype of b_depot , b_warehouse :
69857: LD_VAR 0 1
69861: PUSH
69862: LD_INT 0
69864: DOUBLE
69865: EQUAL
69866: IFTRUE 69876
69868: LD_INT 1
69870: DOUBLE
69871: EQUAL
69872: IFTRUE 69876
69874: GO 70077
69876: POP
// case nation of nation_american :
69877: LD_VAR 0 5
69881: PUSH
69882: LD_INT 1
69884: DOUBLE
69885: EQUAL
69886: IFTRUE 69890
69888: GO 69946
69890: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
69891: LD_ADDR_VAR 0 9
69895: PUSH
69896: LD_VAR 0 11
69900: PUSH
69901: LD_VAR 0 12
69905: PUSH
69906: LD_VAR 0 13
69910: PUSH
69911: LD_VAR 0 14
69915: PUSH
69916: LD_VAR 0 15
69920: PUSH
69921: LD_VAR 0 16
69925: PUSH
69926: EMPTY
69927: LIST
69928: LIST
69929: LIST
69930: LIST
69931: LIST
69932: LIST
69933: PUSH
69934: LD_VAR 0 4
69938: PUSH
69939: LD_INT 1
69941: PLUS
69942: ARRAY
69943: ST_TO_ADDR
69944: GO 70075
69946: LD_INT 2
69948: DOUBLE
69949: EQUAL
69950: IFTRUE 69954
69952: GO 70010
69954: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
69955: LD_ADDR_VAR 0 9
69959: PUSH
69960: LD_VAR 0 17
69964: PUSH
69965: LD_VAR 0 18
69969: PUSH
69970: LD_VAR 0 19
69974: PUSH
69975: LD_VAR 0 20
69979: PUSH
69980: LD_VAR 0 21
69984: PUSH
69985: LD_VAR 0 22
69989: PUSH
69990: EMPTY
69991: LIST
69992: LIST
69993: LIST
69994: LIST
69995: LIST
69996: LIST
69997: PUSH
69998: LD_VAR 0 4
70002: PUSH
70003: LD_INT 1
70005: PLUS
70006: ARRAY
70007: ST_TO_ADDR
70008: GO 70075
70010: LD_INT 3
70012: DOUBLE
70013: EQUAL
70014: IFTRUE 70018
70016: GO 70074
70018: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
70019: LD_ADDR_VAR 0 9
70023: PUSH
70024: LD_VAR 0 23
70028: PUSH
70029: LD_VAR 0 24
70033: PUSH
70034: LD_VAR 0 25
70038: PUSH
70039: LD_VAR 0 26
70043: PUSH
70044: LD_VAR 0 27
70048: PUSH
70049: LD_VAR 0 28
70053: PUSH
70054: EMPTY
70055: LIST
70056: LIST
70057: LIST
70058: LIST
70059: LIST
70060: LIST
70061: PUSH
70062: LD_VAR 0 4
70066: PUSH
70067: LD_INT 1
70069: PLUS
70070: ARRAY
70071: ST_TO_ADDR
70072: GO 70075
70074: POP
70075: GO 70630
70077: LD_INT 2
70079: DOUBLE
70080: EQUAL
70081: IFTRUE 70091
70083: LD_INT 3
70085: DOUBLE
70086: EQUAL
70087: IFTRUE 70091
70089: GO 70147
70091: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
70092: LD_ADDR_VAR 0 9
70096: PUSH
70097: LD_VAR 0 29
70101: PUSH
70102: LD_VAR 0 30
70106: PUSH
70107: LD_VAR 0 31
70111: PUSH
70112: LD_VAR 0 32
70116: PUSH
70117: LD_VAR 0 33
70121: PUSH
70122: LD_VAR 0 34
70126: PUSH
70127: EMPTY
70128: LIST
70129: LIST
70130: LIST
70131: LIST
70132: LIST
70133: LIST
70134: PUSH
70135: LD_VAR 0 4
70139: PUSH
70140: LD_INT 1
70142: PLUS
70143: ARRAY
70144: ST_TO_ADDR
70145: GO 70630
70147: LD_INT 16
70149: DOUBLE
70150: EQUAL
70151: IFTRUE 70209
70153: LD_INT 17
70155: DOUBLE
70156: EQUAL
70157: IFTRUE 70209
70159: LD_INT 18
70161: DOUBLE
70162: EQUAL
70163: IFTRUE 70209
70165: LD_INT 19
70167: DOUBLE
70168: EQUAL
70169: IFTRUE 70209
70171: LD_INT 22
70173: DOUBLE
70174: EQUAL
70175: IFTRUE 70209
70177: LD_INT 20
70179: DOUBLE
70180: EQUAL
70181: IFTRUE 70209
70183: LD_INT 21
70185: DOUBLE
70186: EQUAL
70187: IFTRUE 70209
70189: LD_INT 23
70191: DOUBLE
70192: EQUAL
70193: IFTRUE 70209
70195: LD_INT 24
70197: DOUBLE
70198: EQUAL
70199: IFTRUE 70209
70201: LD_INT 25
70203: DOUBLE
70204: EQUAL
70205: IFTRUE 70209
70207: GO 70265
70209: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
70210: LD_ADDR_VAR 0 9
70214: PUSH
70215: LD_VAR 0 35
70219: PUSH
70220: LD_VAR 0 36
70224: PUSH
70225: LD_VAR 0 37
70229: PUSH
70230: LD_VAR 0 38
70234: PUSH
70235: LD_VAR 0 39
70239: PUSH
70240: LD_VAR 0 40
70244: PUSH
70245: EMPTY
70246: LIST
70247: LIST
70248: LIST
70249: LIST
70250: LIST
70251: LIST
70252: PUSH
70253: LD_VAR 0 4
70257: PUSH
70258: LD_INT 1
70260: PLUS
70261: ARRAY
70262: ST_TO_ADDR
70263: GO 70630
70265: LD_INT 6
70267: DOUBLE
70268: EQUAL
70269: IFTRUE 70321
70271: LD_INT 7
70273: DOUBLE
70274: EQUAL
70275: IFTRUE 70321
70277: LD_INT 8
70279: DOUBLE
70280: EQUAL
70281: IFTRUE 70321
70283: LD_INT 13
70285: DOUBLE
70286: EQUAL
70287: IFTRUE 70321
70289: LD_INT 12
70291: DOUBLE
70292: EQUAL
70293: IFTRUE 70321
70295: LD_INT 15
70297: DOUBLE
70298: EQUAL
70299: IFTRUE 70321
70301: LD_INT 11
70303: DOUBLE
70304: EQUAL
70305: IFTRUE 70321
70307: LD_INT 14
70309: DOUBLE
70310: EQUAL
70311: IFTRUE 70321
70313: LD_INT 10
70315: DOUBLE
70316: EQUAL
70317: IFTRUE 70321
70319: GO 70377
70321: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
70322: LD_ADDR_VAR 0 9
70326: PUSH
70327: LD_VAR 0 41
70331: PUSH
70332: LD_VAR 0 42
70336: PUSH
70337: LD_VAR 0 43
70341: PUSH
70342: LD_VAR 0 44
70346: PUSH
70347: LD_VAR 0 45
70351: PUSH
70352: LD_VAR 0 46
70356: PUSH
70357: EMPTY
70358: LIST
70359: LIST
70360: LIST
70361: LIST
70362: LIST
70363: LIST
70364: PUSH
70365: LD_VAR 0 4
70369: PUSH
70370: LD_INT 1
70372: PLUS
70373: ARRAY
70374: ST_TO_ADDR
70375: GO 70630
70377: LD_INT 36
70379: DOUBLE
70380: EQUAL
70381: IFTRUE 70385
70383: GO 70441
70385: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
70386: LD_ADDR_VAR 0 9
70390: PUSH
70391: LD_VAR 0 47
70395: PUSH
70396: LD_VAR 0 48
70400: PUSH
70401: LD_VAR 0 49
70405: PUSH
70406: LD_VAR 0 50
70410: PUSH
70411: LD_VAR 0 51
70415: PUSH
70416: LD_VAR 0 52
70420: PUSH
70421: EMPTY
70422: LIST
70423: LIST
70424: LIST
70425: LIST
70426: LIST
70427: LIST
70428: PUSH
70429: LD_VAR 0 4
70433: PUSH
70434: LD_INT 1
70436: PLUS
70437: ARRAY
70438: ST_TO_ADDR
70439: GO 70630
70441: LD_INT 4
70443: DOUBLE
70444: EQUAL
70445: IFTRUE 70467
70447: LD_INT 5
70449: DOUBLE
70450: EQUAL
70451: IFTRUE 70467
70453: LD_INT 34
70455: DOUBLE
70456: EQUAL
70457: IFTRUE 70467
70459: LD_INT 37
70461: DOUBLE
70462: EQUAL
70463: IFTRUE 70467
70465: GO 70523
70467: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
70468: LD_ADDR_VAR 0 9
70472: PUSH
70473: LD_VAR 0 53
70477: PUSH
70478: LD_VAR 0 54
70482: PUSH
70483: LD_VAR 0 55
70487: PUSH
70488: LD_VAR 0 56
70492: PUSH
70493: LD_VAR 0 57
70497: PUSH
70498: LD_VAR 0 58
70502: PUSH
70503: EMPTY
70504: LIST
70505: LIST
70506: LIST
70507: LIST
70508: LIST
70509: LIST
70510: PUSH
70511: LD_VAR 0 4
70515: PUSH
70516: LD_INT 1
70518: PLUS
70519: ARRAY
70520: ST_TO_ADDR
70521: GO 70630
70523: LD_INT 31
70525: DOUBLE
70526: EQUAL
70527: IFTRUE 70573
70529: LD_INT 32
70531: DOUBLE
70532: EQUAL
70533: IFTRUE 70573
70535: LD_INT 33
70537: DOUBLE
70538: EQUAL
70539: IFTRUE 70573
70541: LD_INT 27
70543: DOUBLE
70544: EQUAL
70545: IFTRUE 70573
70547: LD_INT 26
70549: DOUBLE
70550: EQUAL
70551: IFTRUE 70573
70553: LD_INT 28
70555: DOUBLE
70556: EQUAL
70557: IFTRUE 70573
70559: LD_INT 29
70561: DOUBLE
70562: EQUAL
70563: IFTRUE 70573
70565: LD_INT 30
70567: DOUBLE
70568: EQUAL
70569: IFTRUE 70573
70571: GO 70629
70573: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
70574: LD_ADDR_VAR 0 9
70578: PUSH
70579: LD_VAR 0 59
70583: PUSH
70584: LD_VAR 0 60
70588: PUSH
70589: LD_VAR 0 61
70593: PUSH
70594: LD_VAR 0 62
70598: PUSH
70599: LD_VAR 0 63
70603: PUSH
70604: LD_VAR 0 64
70608: PUSH
70609: EMPTY
70610: LIST
70611: LIST
70612: LIST
70613: LIST
70614: LIST
70615: LIST
70616: PUSH
70617: LD_VAR 0 4
70621: PUSH
70622: LD_INT 1
70624: PLUS
70625: ARRAY
70626: ST_TO_ADDR
70627: GO 70630
70629: POP
// temp_list2 = [ ] ;
70630: LD_ADDR_VAR 0 10
70634: PUSH
70635: EMPTY
70636: ST_TO_ADDR
// for i in temp_list do
70637: LD_ADDR_VAR 0 8
70641: PUSH
70642: LD_VAR 0 9
70646: PUSH
70647: FOR_IN
70648: IFFALSE 70700
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
70650: LD_ADDR_VAR 0 10
70654: PUSH
70655: LD_VAR 0 10
70659: PUSH
70660: LD_VAR 0 8
70664: PUSH
70665: LD_INT 1
70667: ARRAY
70668: PUSH
70669: LD_VAR 0 2
70673: PLUS
70674: PUSH
70675: LD_VAR 0 8
70679: PUSH
70680: LD_INT 2
70682: ARRAY
70683: PUSH
70684: LD_VAR 0 3
70688: PLUS
70689: PUSH
70690: EMPTY
70691: LIST
70692: LIST
70693: PUSH
70694: EMPTY
70695: LIST
70696: ADD
70697: ST_TO_ADDR
70698: GO 70647
70700: POP
70701: POP
// result = temp_list2 ;
70702: LD_ADDR_VAR 0 7
70706: PUSH
70707: LD_VAR 0 10
70711: ST_TO_ADDR
// end ;
70712: LD_VAR 0 7
70716: RET
// export function EnemyInRange ( unit , dist ) ; begin
70717: LD_INT 0
70719: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
70720: LD_ADDR_VAR 0 3
70724: PUSH
70725: LD_VAR 0 1
70729: PPUSH
70730: CALL_OW 255
70734: PPUSH
70735: LD_VAR 0 1
70739: PPUSH
70740: CALL_OW 250
70744: PPUSH
70745: LD_VAR 0 1
70749: PPUSH
70750: CALL_OW 251
70754: PPUSH
70755: LD_VAR 0 2
70759: PPUSH
70760: CALL 44113 0 4
70764: PUSH
70765: LD_INT 4
70767: ARRAY
70768: ST_TO_ADDR
// end ;
70769: LD_VAR 0 3
70773: RET
// export function PlayerSeeMe ( unit ) ; begin
70774: LD_INT 0
70776: PPUSH
// result := See ( your_side , unit ) ;
70777: LD_ADDR_VAR 0 2
70781: PUSH
70782: LD_OWVAR 2
70786: PPUSH
70787: LD_VAR 0 1
70791: PPUSH
70792: CALL_OW 292
70796: ST_TO_ADDR
// end ;
70797: LD_VAR 0 2
70801: RET
// export function ReverseDir ( unit ) ; begin
70802: LD_INT 0
70804: PPUSH
// if not unit then
70805: LD_VAR 0 1
70809: NOT
70810: IFFALSE 70814
// exit ;
70812: GO 70837
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
70814: LD_ADDR_VAR 0 2
70818: PUSH
70819: LD_VAR 0 1
70823: PPUSH
70824: CALL_OW 254
70828: PUSH
70829: LD_INT 3
70831: PLUS
70832: PUSH
70833: LD_INT 6
70835: MOD
70836: ST_TO_ADDR
// end ;
70837: LD_VAR 0 2
70841: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
70842: LD_INT 0
70844: PPUSH
70845: PPUSH
70846: PPUSH
70847: PPUSH
70848: PPUSH
// if not hexes then
70849: LD_VAR 0 2
70853: NOT
70854: IFFALSE 70858
// exit ;
70856: GO 71006
// dist := 9999 ;
70858: LD_ADDR_VAR 0 5
70862: PUSH
70863: LD_INT 9999
70865: ST_TO_ADDR
// for i = 1 to hexes do
70866: LD_ADDR_VAR 0 4
70870: PUSH
70871: DOUBLE
70872: LD_INT 1
70874: DEC
70875: ST_TO_ADDR
70876: LD_VAR 0 2
70880: PUSH
70881: FOR_TO
70882: IFFALSE 70994
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
70884: LD_VAR 0 1
70888: PPUSH
70889: LD_VAR 0 2
70893: PUSH
70894: LD_VAR 0 4
70898: ARRAY
70899: PUSH
70900: LD_INT 1
70902: ARRAY
70903: PPUSH
70904: LD_VAR 0 2
70908: PUSH
70909: LD_VAR 0 4
70913: ARRAY
70914: PUSH
70915: LD_INT 2
70917: ARRAY
70918: PPUSH
70919: CALL_OW 297
70923: PUSH
70924: LD_VAR 0 5
70928: LESS
70929: IFFALSE 70992
// begin hex := hexes [ i ] ;
70931: LD_ADDR_VAR 0 7
70935: PUSH
70936: LD_VAR 0 2
70940: PUSH
70941: LD_VAR 0 4
70945: ARRAY
70946: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
70947: LD_ADDR_VAR 0 5
70951: PUSH
70952: LD_VAR 0 1
70956: PPUSH
70957: LD_VAR 0 2
70961: PUSH
70962: LD_VAR 0 4
70966: ARRAY
70967: PUSH
70968: LD_INT 1
70970: ARRAY
70971: PPUSH
70972: LD_VAR 0 2
70976: PUSH
70977: LD_VAR 0 4
70981: ARRAY
70982: PUSH
70983: LD_INT 2
70985: ARRAY
70986: PPUSH
70987: CALL_OW 297
70991: ST_TO_ADDR
// end ; end ;
70992: GO 70881
70994: POP
70995: POP
// result := hex ;
70996: LD_ADDR_VAR 0 3
71000: PUSH
71001: LD_VAR 0 7
71005: ST_TO_ADDR
// end ;
71006: LD_VAR 0 3
71010: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
71011: LD_INT 0
71013: PPUSH
71014: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
71015: LD_VAR 0 1
71019: NOT
71020: PUSH
71021: LD_VAR 0 1
71025: PUSH
71026: LD_INT 21
71028: PUSH
71029: LD_INT 2
71031: PUSH
71032: EMPTY
71033: LIST
71034: LIST
71035: PUSH
71036: LD_INT 23
71038: PUSH
71039: LD_INT 2
71041: PUSH
71042: EMPTY
71043: LIST
71044: LIST
71045: PUSH
71046: EMPTY
71047: LIST
71048: LIST
71049: PPUSH
71050: CALL_OW 69
71054: IN
71055: NOT
71056: OR
71057: IFFALSE 71061
// exit ;
71059: GO 71108
// for i = 1 to 3 do
71061: LD_ADDR_VAR 0 3
71065: PUSH
71066: DOUBLE
71067: LD_INT 1
71069: DEC
71070: ST_TO_ADDR
71071: LD_INT 3
71073: PUSH
71074: FOR_TO
71075: IFFALSE 71106
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
71077: LD_VAR 0 1
71081: PPUSH
71082: CALL_OW 250
71086: PPUSH
71087: LD_VAR 0 1
71091: PPUSH
71092: CALL_OW 251
71096: PPUSH
71097: LD_INT 1
71099: PPUSH
71100: CALL_OW 453
71104: GO 71074
71106: POP
71107: POP
// end ;
71108: LD_VAR 0 2
71112: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
71113: LD_INT 0
71115: PPUSH
71116: PPUSH
71117: PPUSH
71118: PPUSH
71119: PPUSH
71120: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
71121: LD_VAR 0 1
71125: NOT
71126: PUSH
71127: LD_VAR 0 2
71131: NOT
71132: OR
71133: PUSH
71134: LD_VAR 0 1
71138: PPUSH
71139: CALL_OW 314
71143: OR
71144: IFFALSE 71148
// exit ;
71146: GO 71589
// x := GetX ( enemy_unit ) ;
71148: LD_ADDR_VAR 0 7
71152: PUSH
71153: LD_VAR 0 2
71157: PPUSH
71158: CALL_OW 250
71162: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
71163: LD_ADDR_VAR 0 8
71167: PUSH
71168: LD_VAR 0 2
71172: PPUSH
71173: CALL_OW 251
71177: ST_TO_ADDR
// if not x or not y then
71178: LD_VAR 0 7
71182: NOT
71183: PUSH
71184: LD_VAR 0 8
71188: NOT
71189: OR
71190: IFFALSE 71194
// exit ;
71192: GO 71589
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
71194: LD_ADDR_VAR 0 6
71198: PUSH
71199: LD_VAR 0 7
71203: PPUSH
71204: LD_INT 0
71206: PPUSH
71207: LD_INT 4
71209: PPUSH
71210: CALL_OW 272
71214: PUSH
71215: LD_VAR 0 8
71219: PPUSH
71220: LD_INT 0
71222: PPUSH
71223: LD_INT 4
71225: PPUSH
71226: CALL_OW 273
71230: PUSH
71231: EMPTY
71232: LIST
71233: LIST
71234: PUSH
71235: LD_VAR 0 7
71239: PPUSH
71240: LD_INT 1
71242: PPUSH
71243: LD_INT 4
71245: PPUSH
71246: CALL_OW 272
71250: PUSH
71251: LD_VAR 0 8
71255: PPUSH
71256: LD_INT 1
71258: PPUSH
71259: LD_INT 4
71261: PPUSH
71262: CALL_OW 273
71266: PUSH
71267: EMPTY
71268: LIST
71269: LIST
71270: PUSH
71271: LD_VAR 0 7
71275: PPUSH
71276: LD_INT 2
71278: PPUSH
71279: LD_INT 4
71281: PPUSH
71282: CALL_OW 272
71286: PUSH
71287: LD_VAR 0 8
71291: PPUSH
71292: LD_INT 2
71294: PPUSH
71295: LD_INT 4
71297: PPUSH
71298: CALL_OW 273
71302: PUSH
71303: EMPTY
71304: LIST
71305: LIST
71306: PUSH
71307: LD_VAR 0 7
71311: PPUSH
71312: LD_INT 3
71314: PPUSH
71315: LD_INT 4
71317: PPUSH
71318: CALL_OW 272
71322: PUSH
71323: LD_VAR 0 8
71327: PPUSH
71328: LD_INT 3
71330: PPUSH
71331: LD_INT 4
71333: PPUSH
71334: CALL_OW 273
71338: PUSH
71339: EMPTY
71340: LIST
71341: LIST
71342: PUSH
71343: LD_VAR 0 7
71347: PPUSH
71348: LD_INT 4
71350: PPUSH
71351: LD_INT 4
71353: PPUSH
71354: CALL_OW 272
71358: PUSH
71359: LD_VAR 0 8
71363: PPUSH
71364: LD_INT 4
71366: PPUSH
71367: LD_INT 4
71369: PPUSH
71370: CALL_OW 273
71374: PUSH
71375: EMPTY
71376: LIST
71377: LIST
71378: PUSH
71379: LD_VAR 0 7
71383: PPUSH
71384: LD_INT 5
71386: PPUSH
71387: LD_INT 4
71389: PPUSH
71390: CALL_OW 272
71394: PUSH
71395: LD_VAR 0 8
71399: PPUSH
71400: LD_INT 5
71402: PPUSH
71403: LD_INT 4
71405: PPUSH
71406: CALL_OW 273
71410: PUSH
71411: EMPTY
71412: LIST
71413: LIST
71414: PUSH
71415: EMPTY
71416: LIST
71417: LIST
71418: LIST
71419: LIST
71420: LIST
71421: LIST
71422: ST_TO_ADDR
// for i = tmp downto 1 do
71423: LD_ADDR_VAR 0 4
71427: PUSH
71428: DOUBLE
71429: LD_VAR 0 6
71433: INC
71434: ST_TO_ADDR
71435: LD_INT 1
71437: PUSH
71438: FOR_DOWNTO
71439: IFFALSE 71540
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
71441: LD_VAR 0 6
71445: PUSH
71446: LD_VAR 0 4
71450: ARRAY
71451: PUSH
71452: LD_INT 1
71454: ARRAY
71455: PPUSH
71456: LD_VAR 0 6
71460: PUSH
71461: LD_VAR 0 4
71465: ARRAY
71466: PUSH
71467: LD_INT 2
71469: ARRAY
71470: PPUSH
71471: CALL_OW 488
71475: NOT
71476: PUSH
71477: LD_VAR 0 6
71481: PUSH
71482: LD_VAR 0 4
71486: ARRAY
71487: PUSH
71488: LD_INT 1
71490: ARRAY
71491: PPUSH
71492: LD_VAR 0 6
71496: PUSH
71497: LD_VAR 0 4
71501: ARRAY
71502: PUSH
71503: LD_INT 2
71505: ARRAY
71506: PPUSH
71507: CALL_OW 428
71511: PUSH
71512: LD_INT 0
71514: NONEQUAL
71515: OR
71516: IFFALSE 71538
// tmp := Delete ( tmp , i ) ;
71518: LD_ADDR_VAR 0 6
71522: PUSH
71523: LD_VAR 0 6
71527: PPUSH
71528: LD_VAR 0 4
71532: PPUSH
71533: CALL_OW 3
71537: ST_TO_ADDR
71538: GO 71438
71540: POP
71541: POP
// j := GetClosestHex ( unit , tmp ) ;
71542: LD_ADDR_VAR 0 5
71546: PUSH
71547: LD_VAR 0 1
71551: PPUSH
71552: LD_VAR 0 6
71556: PPUSH
71557: CALL 70842 0 2
71561: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
71562: LD_VAR 0 1
71566: PPUSH
71567: LD_VAR 0 5
71571: PUSH
71572: LD_INT 1
71574: ARRAY
71575: PPUSH
71576: LD_VAR 0 5
71580: PUSH
71581: LD_INT 2
71583: ARRAY
71584: PPUSH
71585: CALL_OW 111
// end ;
71589: LD_VAR 0 3
71593: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
71594: LD_INT 0
71596: PPUSH
71597: PPUSH
71598: PPUSH
// uc_side = 0 ;
71599: LD_ADDR_OWVAR 20
71603: PUSH
71604: LD_INT 0
71606: ST_TO_ADDR
// uc_nation = 0 ;
71607: LD_ADDR_OWVAR 21
71611: PUSH
71612: LD_INT 0
71614: ST_TO_ADDR
// InitHc_All ( ) ;
71615: CALL_OW 584
// InitVc ;
71619: CALL_OW 20
// if mastodonts then
71623: LD_VAR 0 6
71627: IFFALSE 71694
// for i = 1 to mastodonts do
71629: LD_ADDR_VAR 0 11
71633: PUSH
71634: DOUBLE
71635: LD_INT 1
71637: DEC
71638: ST_TO_ADDR
71639: LD_VAR 0 6
71643: PUSH
71644: FOR_TO
71645: IFFALSE 71692
// begin vc_chassis := 31 ;
71647: LD_ADDR_OWVAR 37
71651: PUSH
71652: LD_INT 31
71654: ST_TO_ADDR
// vc_control := control_rider ;
71655: LD_ADDR_OWVAR 38
71659: PUSH
71660: LD_INT 4
71662: ST_TO_ADDR
// animal := CreateVehicle ;
71663: LD_ADDR_VAR 0 12
71667: PUSH
71668: CALL_OW 45
71672: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71673: LD_VAR 0 12
71677: PPUSH
71678: LD_VAR 0 8
71682: PPUSH
71683: LD_INT 0
71685: PPUSH
71686: CALL 73829 0 3
// end ;
71690: GO 71644
71692: POP
71693: POP
// if horses then
71694: LD_VAR 0 5
71698: IFFALSE 71765
// for i = 1 to horses do
71700: LD_ADDR_VAR 0 11
71704: PUSH
71705: DOUBLE
71706: LD_INT 1
71708: DEC
71709: ST_TO_ADDR
71710: LD_VAR 0 5
71714: PUSH
71715: FOR_TO
71716: IFFALSE 71763
// begin hc_class := 21 ;
71718: LD_ADDR_OWVAR 28
71722: PUSH
71723: LD_INT 21
71725: ST_TO_ADDR
// hc_gallery :=  ;
71726: LD_ADDR_OWVAR 33
71730: PUSH
71731: LD_STRING 
71733: ST_TO_ADDR
// animal := CreateHuman ;
71734: LD_ADDR_VAR 0 12
71738: PUSH
71739: CALL_OW 44
71743: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71744: LD_VAR 0 12
71748: PPUSH
71749: LD_VAR 0 8
71753: PPUSH
71754: LD_INT 0
71756: PPUSH
71757: CALL 73829 0 3
// end ;
71761: GO 71715
71763: POP
71764: POP
// if birds then
71765: LD_VAR 0 1
71769: IFFALSE 71836
// for i = 1 to birds do
71771: LD_ADDR_VAR 0 11
71775: PUSH
71776: DOUBLE
71777: LD_INT 1
71779: DEC
71780: ST_TO_ADDR
71781: LD_VAR 0 1
71785: PUSH
71786: FOR_TO
71787: IFFALSE 71834
// begin hc_class = 18 ;
71789: LD_ADDR_OWVAR 28
71793: PUSH
71794: LD_INT 18
71796: ST_TO_ADDR
// hc_gallery =  ;
71797: LD_ADDR_OWVAR 33
71801: PUSH
71802: LD_STRING 
71804: ST_TO_ADDR
// animal := CreateHuman ;
71805: LD_ADDR_VAR 0 12
71809: PUSH
71810: CALL_OW 44
71814: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71815: LD_VAR 0 12
71819: PPUSH
71820: LD_VAR 0 8
71824: PPUSH
71825: LD_INT 0
71827: PPUSH
71828: CALL 73829 0 3
// end ;
71832: GO 71786
71834: POP
71835: POP
// if tigers then
71836: LD_VAR 0 2
71840: IFFALSE 71924
// for i = 1 to tigers do
71842: LD_ADDR_VAR 0 11
71846: PUSH
71847: DOUBLE
71848: LD_INT 1
71850: DEC
71851: ST_TO_ADDR
71852: LD_VAR 0 2
71856: PUSH
71857: FOR_TO
71858: IFFALSE 71922
// begin hc_class = class_tiger ;
71860: LD_ADDR_OWVAR 28
71864: PUSH
71865: LD_INT 14
71867: ST_TO_ADDR
// hc_gallery =  ;
71868: LD_ADDR_OWVAR 33
71872: PUSH
71873: LD_STRING 
71875: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
71876: LD_ADDR_OWVAR 35
71880: PUSH
71881: LD_INT 7
71883: NEG
71884: PPUSH
71885: LD_INT 7
71887: PPUSH
71888: CALL_OW 12
71892: ST_TO_ADDR
// animal := CreateHuman ;
71893: LD_ADDR_VAR 0 12
71897: PUSH
71898: CALL_OW 44
71902: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71903: LD_VAR 0 12
71907: PPUSH
71908: LD_VAR 0 8
71912: PPUSH
71913: LD_INT 0
71915: PPUSH
71916: CALL 73829 0 3
// end ;
71920: GO 71857
71922: POP
71923: POP
// if apemans then
71924: LD_VAR 0 3
71928: IFFALSE 72051
// for i = 1 to apemans do
71930: LD_ADDR_VAR 0 11
71934: PUSH
71935: DOUBLE
71936: LD_INT 1
71938: DEC
71939: ST_TO_ADDR
71940: LD_VAR 0 3
71944: PUSH
71945: FOR_TO
71946: IFFALSE 72049
// begin hc_class = class_apeman ;
71948: LD_ADDR_OWVAR 28
71952: PUSH
71953: LD_INT 12
71955: ST_TO_ADDR
// hc_gallery =  ;
71956: LD_ADDR_OWVAR 33
71960: PUSH
71961: LD_STRING 
71963: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
71964: LD_ADDR_OWVAR 35
71968: PUSH
71969: LD_INT 2
71971: NEG
71972: PPUSH
71973: LD_INT 2
71975: PPUSH
71976: CALL_OW 12
71980: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
71981: LD_ADDR_OWVAR 31
71985: PUSH
71986: LD_INT 1
71988: PPUSH
71989: LD_INT 3
71991: PPUSH
71992: CALL_OW 12
71996: PUSH
71997: LD_INT 1
71999: PPUSH
72000: LD_INT 3
72002: PPUSH
72003: CALL_OW 12
72007: PUSH
72008: LD_INT 0
72010: PUSH
72011: LD_INT 0
72013: PUSH
72014: EMPTY
72015: LIST
72016: LIST
72017: LIST
72018: LIST
72019: ST_TO_ADDR
// animal := CreateHuman ;
72020: LD_ADDR_VAR 0 12
72024: PUSH
72025: CALL_OW 44
72029: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72030: LD_VAR 0 12
72034: PPUSH
72035: LD_VAR 0 8
72039: PPUSH
72040: LD_INT 0
72042: PPUSH
72043: CALL 73829 0 3
// end ;
72047: GO 71945
72049: POP
72050: POP
// if enchidnas then
72051: LD_VAR 0 4
72055: IFFALSE 72122
// for i = 1 to enchidnas do
72057: LD_ADDR_VAR 0 11
72061: PUSH
72062: DOUBLE
72063: LD_INT 1
72065: DEC
72066: ST_TO_ADDR
72067: LD_VAR 0 4
72071: PUSH
72072: FOR_TO
72073: IFFALSE 72120
// begin hc_class = 13 ;
72075: LD_ADDR_OWVAR 28
72079: PUSH
72080: LD_INT 13
72082: ST_TO_ADDR
// hc_gallery =  ;
72083: LD_ADDR_OWVAR 33
72087: PUSH
72088: LD_STRING 
72090: ST_TO_ADDR
// animal := CreateHuman ;
72091: LD_ADDR_VAR 0 12
72095: PUSH
72096: CALL_OW 44
72100: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72101: LD_VAR 0 12
72105: PPUSH
72106: LD_VAR 0 8
72110: PPUSH
72111: LD_INT 0
72113: PPUSH
72114: CALL 73829 0 3
// end ;
72118: GO 72072
72120: POP
72121: POP
// if fishes then
72122: LD_VAR 0 7
72126: IFFALSE 72193
// for i = 1 to fishes do
72128: LD_ADDR_VAR 0 11
72132: PUSH
72133: DOUBLE
72134: LD_INT 1
72136: DEC
72137: ST_TO_ADDR
72138: LD_VAR 0 7
72142: PUSH
72143: FOR_TO
72144: IFFALSE 72191
// begin hc_class = 20 ;
72146: LD_ADDR_OWVAR 28
72150: PUSH
72151: LD_INT 20
72153: ST_TO_ADDR
// hc_gallery =  ;
72154: LD_ADDR_OWVAR 33
72158: PUSH
72159: LD_STRING 
72161: ST_TO_ADDR
// animal := CreateHuman ;
72162: LD_ADDR_VAR 0 12
72166: PUSH
72167: CALL_OW 44
72171: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
72172: LD_VAR 0 12
72176: PPUSH
72177: LD_VAR 0 9
72181: PPUSH
72182: LD_INT 0
72184: PPUSH
72185: CALL 73829 0 3
// end ;
72189: GO 72143
72191: POP
72192: POP
// end ;
72193: LD_VAR 0 10
72197: RET
// export function WantHeal ( sci , unit ) ; begin
72198: LD_INT 0
72200: PPUSH
// if GetTaskList ( sci ) > 0 then
72201: LD_VAR 0 1
72205: PPUSH
72206: CALL_OW 437
72210: PUSH
72211: LD_INT 0
72213: GREATER
72214: IFFALSE 72284
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
72216: LD_VAR 0 1
72220: PPUSH
72221: CALL_OW 437
72225: PUSH
72226: LD_INT 1
72228: ARRAY
72229: PUSH
72230: LD_INT 1
72232: ARRAY
72233: PUSH
72234: LD_STRING l
72236: EQUAL
72237: PUSH
72238: LD_VAR 0 1
72242: PPUSH
72243: CALL_OW 437
72247: PUSH
72248: LD_INT 1
72250: ARRAY
72251: PUSH
72252: LD_INT 4
72254: ARRAY
72255: PUSH
72256: LD_VAR 0 2
72260: EQUAL
72261: AND
72262: IFFALSE 72274
// result := true else
72264: LD_ADDR_VAR 0 3
72268: PUSH
72269: LD_INT 1
72271: ST_TO_ADDR
72272: GO 72282
// result := false ;
72274: LD_ADDR_VAR 0 3
72278: PUSH
72279: LD_INT 0
72281: ST_TO_ADDR
// end else
72282: GO 72292
// result := false ;
72284: LD_ADDR_VAR 0 3
72288: PUSH
72289: LD_INT 0
72291: ST_TO_ADDR
// end ;
72292: LD_VAR 0 3
72296: RET
// export function HealTarget ( sci ) ; begin
72297: LD_INT 0
72299: PPUSH
// if not sci then
72300: LD_VAR 0 1
72304: NOT
72305: IFFALSE 72309
// exit ;
72307: GO 72374
// result := 0 ;
72309: LD_ADDR_VAR 0 2
72313: PUSH
72314: LD_INT 0
72316: ST_TO_ADDR
// if GetTaskList ( sci ) then
72317: LD_VAR 0 1
72321: PPUSH
72322: CALL_OW 437
72326: IFFALSE 72374
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
72328: LD_VAR 0 1
72332: PPUSH
72333: CALL_OW 437
72337: PUSH
72338: LD_INT 1
72340: ARRAY
72341: PUSH
72342: LD_INT 1
72344: ARRAY
72345: PUSH
72346: LD_STRING l
72348: EQUAL
72349: IFFALSE 72374
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
72351: LD_ADDR_VAR 0 2
72355: PUSH
72356: LD_VAR 0 1
72360: PPUSH
72361: CALL_OW 437
72365: PUSH
72366: LD_INT 1
72368: ARRAY
72369: PUSH
72370: LD_INT 4
72372: ARRAY
72373: ST_TO_ADDR
// end ;
72374: LD_VAR 0 2
72378: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
72379: LD_INT 0
72381: PPUSH
72382: PPUSH
72383: PPUSH
72384: PPUSH
// if not base_units then
72385: LD_VAR 0 1
72389: NOT
72390: IFFALSE 72394
// exit ;
72392: GO 72481
// result := false ;
72394: LD_ADDR_VAR 0 2
72398: PUSH
72399: LD_INT 0
72401: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
72402: LD_ADDR_VAR 0 5
72406: PUSH
72407: LD_VAR 0 1
72411: PPUSH
72412: LD_INT 21
72414: PUSH
72415: LD_INT 3
72417: PUSH
72418: EMPTY
72419: LIST
72420: LIST
72421: PPUSH
72422: CALL_OW 72
72426: ST_TO_ADDR
// if not tmp then
72427: LD_VAR 0 5
72431: NOT
72432: IFFALSE 72436
// exit ;
72434: GO 72481
// for i in tmp do
72436: LD_ADDR_VAR 0 3
72440: PUSH
72441: LD_VAR 0 5
72445: PUSH
72446: FOR_IN
72447: IFFALSE 72479
// begin result := EnemyInRange ( i , 22 ) ;
72449: LD_ADDR_VAR 0 2
72453: PUSH
72454: LD_VAR 0 3
72458: PPUSH
72459: LD_INT 22
72461: PPUSH
72462: CALL 70717 0 2
72466: ST_TO_ADDR
// if result then
72467: LD_VAR 0 2
72471: IFFALSE 72477
// exit ;
72473: POP
72474: POP
72475: GO 72481
// end ;
72477: GO 72446
72479: POP
72480: POP
// end ;
72481: LD_VAR 0 2
72485: RET
// export function FilterByTag ( units , tag ) ; begin
72486: LD_INT 0
72488: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
72489: LD_ADDR_VAR 0 3
72493: PUSH
72494: LD_VAR 0 1
72498: PPUSH
72499: LD_INT 120
72501: PUSH
72502: LD_VAR 0 2
72506: PUSH
72507: EMPTY
72508: LIST
72509: LIST
72510: PPUSH
72511: CALL_OW 72
72515: ST_TO_ADDR
// end ;
72516: LD_VAR 0 3
72520: RET
// export function IsDriver ( un ) ; begin
72521: LD_INT 0
72523: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
72524: LD_ADDR_VAR 0 2
72528: PUSH
72529: LD_VAR 0 1
72533: PUSH
72534: LD_INT 55
72536: PUSH
72537: EMPTY
72538: LIST
72539: PPUSH
72540: CALL_OW 69
72544: IN
72545: ST_TO_ADDR
// end ;
72546: LD_VAR 0 2
72550: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
72551: LD_INT 0
72553: PPUSH
72554: PPUSH
// list := [ ] ;
72555: LD_ADDR_VAR 0 5
72559: PUSH
72560: EMPTY
72561: ST_TO_ADDR
// case d of 0 :
72562: LD_VAR 0 3
72566: PUSH
72567: LD_INT 0
72569: DOUBLE
72570: EQUAL
72571: IFTRUE 72575
72573: GO 72708
72575: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
72576: LD_ADDR_VAR 0 5
72580: PUSH
72581: LD_VAR 0 1
72585: PUSH
72586: LD_INT 4
72588: MINUS
72589: PUSH
72590: LD_VAR 0 2
72594: PUSH
72595: LD_INT 4
72597: MINUS
72598: PUSH
72599: LD_INT 2
72601: PUSH
72602: EMPTY
72603: LIST
72604: LIST
72605: LIST
72606: PUSH
72607: LD_VAR 0 1
72611: PUSH
72612: LD_INT 3
72614: MINUS
72615: PUSH
72616: LD_VAR 0 2
72620: PUSH
72621: LD_INT 1
72623: PUSH
72624: EMPTY
72625: LIST
72626: LIST
72627: LIST
72628: PUSH
72629: LD_VAR 0 1
72633: PUSH
72634: LD_INT 4
72636: PLUS
72637: PUSH
72638: LD_VAR 0 2
72642: PUSH
72643: LD_INT 4
72645: PUSH
72646: EMPTY
72647: LIST
72648: LIST
72649: LIST
72650: PUSH
72651: LD_VAR 0 1
72655: PUSH
72656: LD_INT 3
72658: PLUS
72659: PUSH
72660: LD_VAR 0 2
72664: PUSH
72665: LD_INT 3
72667: PLUS
72668: PUSH
72669: LD_INT 5
72671: PUSH
72672: EMPTY
72673: LIST
72674: LIST
72675: LIST
72676: PUSH
72677: LD_VAR 0 1
72681: PUSH
72682: LD_VAR 0 2
72686: PUSH
72687: LD_INT 4
72689: PLUS
72690: PUSH
72691: LD_INT 0
72693: PUSH
72694: EMPTY
72695: LIST
72696: LIST
72697: LIST
72698: PUSH
72699: EMPTY
72700: LIST
72701: LIST
72702: LIST
72703: LIST
72704: LIST
72705: ST_TO_ADDR
// end ; 1 :
72706: GO 73406
72708: LD_INT 1
72710: DOUBLE
72711: EQUAL
72712: IFTRUE 72716
72714: GO 72849
72716: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
72717: LD_ADDR_VAR 0 5
72721: PUSH
72722: LD_VAR 0 1
72726: PUSH
72727: LD_VAR 0 2
72731: PUSH
72732: LD_INT 4
72734: MINUS
72735: PUSH
72736: LD_INT 3
72738: PUSH
72739: EMPTY
72740: LIST
72741: LIST
72742: LIST
72743: PUSH
72744: LD_VAR 0 1
72748: PUSH
72749: LD_INT 3
72751: MINUS
72752: PUSH
72753: LD_VAR 0 2
72757: PUSH
72758: LD_INT 3
72760: MINUS
72761: PUSH
72762: LD_INT 2
72764: PUSH
72765: EMPTY
72766: LIST
72767: LIST
72768: LIST
72769: PUSH
72770: LD_VAR 0 1
72774: PUSH
72775: LD_INT 4
72777: MINUS
72778: PUSH
72779: LD_VAR 0 2
72783: PUSH
72784: LD_INT 1
72786: PUSH
72787: EMPTY
72788: LIST
72789: LIST
72790: LIST
72791: PUSH
72792: LD_VAR 0 1
72796: PUSH
72797: LD_VAR 0 2
72801: PUSH
72802: LD_INT 3
72804: PLUS
72805: PUSH
72806: LD_INT 0
72808: PUSH
72809: EMPTY
72810: LIST
72811: LIST
72812: LIST
72813: PUSH
72814: LD_VAR 0 1
72818: PUSH
72819: LD_INT 4
72821: PLUS
72822: PUSH
72823: LD_VAR 0 2
72827: PUSH
72828: LD_INT 4
72830: PLUS
72831: PUSH
72832: LD_INT 5
72834: PUSH
72835: EMPTY
72836: LIST
72837: LIST
72838: LIST
72839: PUSH
72840: EMPTY
72841: LIST
72842: LIST
72843: LIST
72844: LIST
72845: LIST
72846: ST_TO_ADDR
// end ; 2 :
72847: GO 73406
72849: LD_INT 2
72851: DOUBLE
72852: EQUAL
72853: IFTRUE 72857
72855: GO 72986
72857: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
72858: LD_ADDR_VAR 0 5
72862: PUSH
72863: LD_VAR 0 1
72867: PUSH
72868: LD_VAR 0 2
72872: PUSH
72873: LD_INT 3
72875: MINUS
72876: PUSH
72877: LD_INT 3
72879: PUSH
72880: EMPTY
72881: LIST
72882: LIST
72883: LIST
72884: PUSH
72885: LD_VAR 0 1
72889: PUSH
72890: LD_INT 4
72892: PLUS
72893: PUSH
72894: LD_VAR 0 2
72898: PUSH
72899: LD_INT 4
72901: PUSH
72902: EMPTY
72903: LIST
72904: LIST
72905: LIST
72906: PUSH
72907: LD_VAR 0 1
72911: PUSH
72912: LD_VAR 0 2
72916: PUSH
72917: LD_INT 4
72919: PLUS
72920: PUSH
72921: LD_INT 0
72923: PUSH
72924: EMPTY
72925: LIST
72926: LIST
72927: LIST
72928: PUSH
72929: LD_VAR 0 1
72933: PUSH
72934: LD_INT 3
72936: MINUS
72937: PUSH
72938: LD_VAR 0 2
72942: PUSH
72943: LD_INT 1
72945: PUSH
72946: EMPTY
72947: LIST
72948: LIST
72949: LIST
72950: PUSH
72951: LD_VAR 0 1
72955: PUSH
72956: LD_INT 4
72958: MINUS
72959: PUSH
72960: LD_VAR 0 2
72964: PUSH
72965: LD_INT 4
72967: MINUS
72968: PUSH
72969: LD_INT 2
72971: PUSH
72972: EMPTY
72973: LIST
72974: LIST
72975: LIST
72976: PUSH
72977: EMPTY
72978: LIST
72979: LIST
72980: LIST
72981: LIST
72982: LIST
72983: ST_TO_ADDR
// end ; 3 :
72984: GO 73406
72986: LD_INT 3
72988: DOUBLE
72989: EQUAL
72990: IFTRUE 72994
72992: GO 73127
72994: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
72995: LD_ADDR_VAR 0 5
72999: PUSH
73000: LD_VAR 0 1
73004: PUSH
73005: LD_INT 3
73007: PLUS
73008: PUSH
73009: LD_VAR 0 2
73013: PUSH
73014: LD_INT 4
73016: PUSH
73017: EMPTY
73018: LIST
73019: LIST
73020: LIST
73021: PUSH
73022: LD_VAR 0 1
73026: PUSH
73027: LD_INT 4
73029: PLUS
73030: PUSH
73031: LD_VAR 0 2
73035: PUSH
73036: LD_INT 4
73038: PLUS
73039: PUSH
73040: LD_INT 5
73042: PUSH
73043: EMPTY
73044: LIST
73045: LIST
73046: LIST
73047: PUSH
73048: LD_VAR 0 1
73052: PUSH
73053: LD_INT 4
73055: MINUS
73056: PUSH
73057: LD_VAR 0 2
73061: PUSH
73062: LD_INT 1
73064: PUSH
73065: EMPTY
73066: LIST
73067: LIST
73068: LIST
73069: PUSH
73070: LD_VAR 0 1
73074: PUSH
73075: LD_VAR 0 2
73079: PUSH
73080: LD_INT 4
73082: MINUS
73083: PUSH
73084: LD_INT 3
73086: PUSH
73087: EMPTY
73088: LIST
73089: LIST
73090: LIST
73091: PUSH
73092: LD_VAR 0 1
73096: PUSH
73097: LD_INT 3
73099: MINUS
73100: PUSH
73101: LD_VAR 0 2
73105: PUSH
73106: LD_INT 3
73108: MINUS
73109: PUSH
73110: LD_INT 2
73112: PUSH
73113: EMPTY
73114: LIST
73115: LIST
73116: LIST
73117: PUSH
73118: EMPTY
73119: LIST
73120: LIST
73121: LIST
73122: LIST
73123: LIST
73124: ST_TO_ADDR
// end ; 4 :
73125: GO 73406
73127: LD_INT 4
73129: DOUBLE
73130: EQUAL
73131: IFTRUE 73135
73133: GO 73268
73135: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
73136: LD_ADDR_VAR 0 5
73140: PUSH
73141: LD_VAR 0 1
73145: PUSH
73146: LD_VAR 0 2
73150: PUSH
73151: LD_INT 4
73153: PLUS
73154: PUSH
73155: LD_INT 0
73157: PUSH
73158: EMPTY
73159: LIST
73160: LIST
73161: LIST
73162: PUSH
73163: LD_VAR 0 1
73167: PUSH
73168: LD_INT 3
73170: PLUS
73171: PUSH
73172: LD_VAR 0 2
73176: PUSH
73177: LD_INT 3
73179: PLUS
73180: PUSH
73181: LD_INT 5
73183: PUSH
73184: EMPTY
73185: LIST
73186: LIST
73187: LIST
73188: PUSH
73189: LD_VAR 0 1
73193: PUSH
73194: LD_INT 4
73196: PLUS
73197: PUSH
73198: LD_VAR 0 2
73202: PUSH
73203: LD_INT 4
73205: PUSH
73206: EMPTY
73207: LIST
73208: LIST
73209: LIST
73210: PUSH
73211: LD_VAR 0 1
73215: PUSH
73216: LD_VAR 0 2
73220: PUSH
73221: LD_INT 3
73223: MINUS
73224: PUSH
73225: LD_INT 3
73227: PUSH
73228: EMPTY
73229: LIST
73230: LIST
73231: LIST
73232: PUSH
73233: LD_VAR 0 1
73237: PUSH
73238: LD_INT 4
73240: MINUS
73241: PUSH
73242: LD_VAR 0 2
73246: PUSH
73247: LD_INT 4
73249: MINUS
73250: PUSH
73251: LD_INT 2
73253: PUSH
73254: EMPTY
73255: LIST
73256: LIST
73257: LIST
73258: PUSH
73259: EMPTY
73260: LIST
73261: LIST
73262: LIST
73263: LIST
73264: LIST
73265: ST_TO_ADDR
// end ; 5 :
73266: GO 73406
73268: LD_INT 5
73270: DOUBLE
73271: EQUAL
73272: IFTRUE 73276
73274: GO 73405
73276: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
73277: LD_ADDR_VAR 0 5
73281: PUSH
73282: LD_VAR 0 1
73286: PUSH
73287: LD_INT 4
73289: MINUS
73290: PUSH
73291: LD_VAR 0 2
73295: PUSH
73296: LD_INT 1
73298: PUSH
73299: EMPTY
73300: LIST
73301: LIST
73302: LIST
73303: PUSH
73304: LD_VAR 0 1
73308: PUSH
73309: LD_VAR 0 2
73313: PUSH
73314: LD_INT 4
73316: MINUS
73317: PUSH
73318: LD_INT 3
73320: PUSH
73321: EMPTY
73322: LIST
73323: LIST
73324: LIST
73325: PUSH
73326: LD_VAR 0 1
73330: PUSH
73331: LD_INT 4
73333: PLUS
73334: PUSH
73335: LD_VAR 0 2
73339: PUSH
73340: LD_INT 4
73342: PLUS
73343: PUSH
73344: LD_INT 5
73346: PUSH
73347: EMPTY
73348: LIST
73349: LIST
73350: LIST
73351: PUSH
73352: LD_VAR 0 1
73356: PUSH
73357: LD_INT 3
73359: PLUS
73360: PUSH
73361: LD_VAR 0 2
73365: PUSH
73366: LD_INT 4
73368: PUSH
73369: EMPTY
73370: LIST
73371: LIST
73372: LIST
73373: PUSH
73374: LD_VAR 0 1
73378: PUSH
73379: LD_VAR 0 2
73383: PUSH
73384: LD_INT 3
73386: PLUS
73387: PUSH
73388: LD_INT 0
73390: PUSH
73391: EMPTY
73392: LIST
73393: LIST
73394: LIST
73395: PUSH
73396: EMPTY
73397: LIST
73398: LIST
73399: LIST
73400: LIST
73401: LIST
73402: ST_TO_ADDR
// end ; end ;
73403: GO 73406
73405: POP
// result := list ;
73406: LD_ADDR_VAR 0 4
73410: PUSH
73411: LD_VAR 0 5
73415: ST_TO_ADDR
// end ;
73416: LD_VAR 0 4
73420: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
73421: LD_INT 0
73423: PPUSH
73424: PPUSH
73425: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
73426: LD_VAR 0 1
73430: NOT
73431: PUSH
73432: LD_VAR 0 2
73436: PUSH
73437: LD_INT 1
73439: PUSH
73440: LD_INT 2
73442: PUSH
73443: LD_INT 3
73445: PUSH
73446: LD_INT 4
73448: PUSH
73449: EMPTY
73450: LIST
73451: LIST
73452: LIST
73453: LIST
73454: IN
73455: NOT
73456: OR
73457: IFFALSE 73461
// exit ;
73459: GO 73553
// tmp := [ ] ;
73461: LD_ADDR_VAR 0 5
73465: PUSH
73466: EMPTY
73467: ST_TO_ADDR
// for i in units do
73468: LD_ADDR_VAR 0 4
73472: PUSH
73473: LD_VAR 0 1
73477: PUSH
73478: FOR_IN
73479: IFFALSE 73522
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
73481: LD_ADDR_VAR 0 5
73485: PUSH
73486: LD_VAR 0 5
73490: PPUSH
73491: LD_VAR 0 5
73495: PUSH
73496: LD_INT 1
73498: PLUS
73499: PPUSH
73500: LD_VAR 0 4
73504: PPUSH
73505: LD_VAR 0 2
73509: PPUSH
73510: CALL_OW 259
73514: PPUSH
73515: CALL_OW 2
73519: ST_TO_ADDR
73520: GO 73478
73522: POP
73523: POP
// if not tmp then
73524: LD_VAR 0 5
73528: NOT
73529: IFFALSE 73533
// exit ;
73531: GO 73553
// result := SortListByListDesc ( units , tmp ) ;
73533: LD_ADDR_VAR 0 3
73537: PUSH
73538: LD_VAR 0 1
73542: PPUSH
73543: LD_VAR 0 5
73547: PPUSH
73548: CALL_OW 77
73552: ST_TO_ADDR
// end ;
73553: LD_VAR 0 3
73557: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
73558: LD_INT 0
73560: PPUSH
73561: PPUSH
73562: PPUSH
// result := false ;
73563: LD_ADDR_VAR 0 3
73567: PUSH
73568: LD_INT 0
73570: ST_TO_ADDR
// x := GetX ( building ) ;
73571: LD_ADDR_VAR 0 4
73575: PUSH
73576: LD_VAR 0 2
73580: PPUSH
73581: CALL_OW 250
73585: ST_TO_ADDR
// y := GetY ( building ) ;
73586: LD_ADDR_VAR 0 5
73590: PUSH
73591: LD_VAR 0 2
73595: PPUSH
73596: CALL_OW 251
73600: ST_TO_ADDR
// if not building or not x or not y then
73601: LD_VAR 0 2
73605: NOT
73606: PUSH
73607: LD_VAR 0 4
73611: NOT
73612: OR
73613: PUSH
73614: LD_VAR 0 5
73618: NOT
73619: OR
73620: IFFALSE 73624
// exit ;
73622: GO 73716
// if GetTaskList ( unit ) then
73624: LD_VAR 0 1
73628: PPUSH
73629: CALL_OW 437
73633: IFFALSE 73716
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
73635: LD_STRING e
73637: PUSH
73638: LD_VAR 0 1
73642: PPUSH
73643: CALL_OW 437
73647: PUSH
73648: LD_INT 1
73650: ARRAY
73651: PUSH
73652: LD_INT 1
73654: ARRAY
73655: EQUAL
73656: PUSH
73657: LD_VAR 0 4
73661: PUSH
73662: LD_VAR 0 1
73666: PPUSH
73667: CALL_OW 437
73671: PUSH
73672: LD_INT 1
73674: ARRAY
73675: PUSH
73676: LD_INT 2
73678: ARRAY
73679: EQUAL
73680: AND
73681: PUSH
73682: LD_VAR 0 5
73686: PUSH
73687: LD_VAR 0 1
73691: PPUSH
73692: CALL_OW 437
73696: PUSH
73697: LD_INT 1
73699: ARRAY
73700: PUSH
73701: LD_INT 3
73703: ARRAY
73704: EQUAL
73705: AND
73706: IFFALSE 73716
// result := true end ;
73708: LD_ADDR_VAR 0 3
73712: PUSH
73713: LD_INT 1
73715: ST_TO_ADDR
// end ;
73716: LD_VAR 0 3
73720: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
73721: LD_INT 0
73723: PPUSH
// result := false ;
73724: LD_ADDR_VAR 0 4
73728: PUSH
73729: LD_INT 0
73731: ST_TO_ADDR
// if GetTaskList ( unit ) then
73732: LD_VAR 0 1
73736: PPUSH
73737: CALL_OW 437
73741: IFFALSE 73824
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
73743: LD_STRING M
73745: PUSH
73746: LD_VAR 0 1
73750: PPUSH
73751: CALL_OW 437
73755: PUSH
73756: LD_INT 1
73758: ARRAY
73759: PUSH
73760: LD_INT 1
73762: ARRAY
73763: EQUAL
73764: PUSH
73765: LD_VAR 0 2
73769: PUSH
73770: LD_VAR 0 1
73774: PPUSH
73775: CALL_OW 437
73779: PUSH
73780: LD_INT 1
73782: ARRAY
73783: PUSH
73784: LD_INT 2
73786: ARRAY
73787: EQUAL
73788: AND
73789: PUSH
73790: LD_VAR 0 3
73794: PUSH
73795: LD_VAR 0 1
73799: PPUSH
73800: CALL_OW 437
73804: PUSH
73805: LD_INT 1
73807: ARRAY
73808: PUSH
73809: LD_INT 3
73811: ARRAY
73812: EQUAL
73813: AND
73814: IFFALSE 73824
// result := true ;
73816: LD_ADDR_VAR 0 4
73820: PUSH
73821: LD_INT 1
73823: ST_TO_ADDR
// end ; end ;
73824: LD_VAR 0 4
73828: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
73829: LD_INT 0
73831: PPUSH
73832: PPUSH
73833: PPUSH
73834: PPUSH
// if not unit or not area then
73835: LD_VAR 0 1
73839: NOT
73840: PUSH
73841: LD_VAR 0 2
73845: NOT
73846: OR
73847: IFFALSE 73851
// exit ;
73849: GO 74015
// tmp := AreaToList ( area , i ) ;
73851: LD_ADDR_VAR 0 6
73855: PUSH
73856: LD_VAR 0 2
73860: PPUSH
73861: LD_VAR 0 5
73865: PPUSH
73866: CALL_OW 517
73870: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
73871: LD_ADDR_VAR 0 5
73875: PUSH
73876: DOUBLE
73877: LD_INT 1
73879: DEC
73880: ST_TO_ADDR
73881: LD_VAR 0 6
73885: PUSH
73886: LD_INT 1
73888: ARRAY
73889: PUSH
73890: FOR_TO
73891: IFFALSE 74013
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
73893: LD_ADDR_VAR 0 7
73897: PUSH
73898: LD_VAR 0 6
73902: PUSH
73903: LD_INT 1
73905: ARRAY
73906: PUSH
73907: LD_VAR 0 5
73911: ARRAY
73912: PUSH
73913: LD_VAR 0 6
73917: PUSH
73918: LD_INT 2
73920: ARRAY
73921: PUSH
73922: LD_VAR 0 5
73926: ARRAY
73927: PUSH
73928: EMPTY
73929: LIST
73930: LIST
73931: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
73932: LD_VAR 0 7
73936: PUSH
73937: LD_INT 1
73939: ARRAY
73940: PPUSH
73941: LD_VAR 0 7
73945: PUSH
73946: LD_INT 2
73948: ARRAY
73949: PPUSH
73950: CALL_OW 428
73954: PUSH
73955: LD_INT 0
73957: EQUAL
73958: IFFALSE 74011
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
73960: LD_VAR 0 1
73964: PPUSH
73965: LD_VAR 0 7
73969: PUSH
73970: LD_INT 1
73972: ARRAY
73973: PPUSH
73974: LD_VAR 0 7
73978: PUSH
73979: LD_INT 2
73981: ARRAY
73982: PPUSH
73983: LD_VAR 0 3
73987: PPUSH
73988: CALL_OW 48
// result := IsPlaced ( unit ) ;
73992: LD_ADDR_VAR 0 4
73996: PUSH
73997: LD_VAR 0 1
74001: PPUSH
74002: CALL_OW 305
74006: ST_TO_ADDR
// exit ;
74007: POP
74008: POP
74009: GO 74015
// end ; end ;
74011: GO 73890
74013: POP
74014: POP
// end ;
74015: LD_VAR 0 4
74019: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
74020: LD_INT 0
74022: PPUSH
74023: PPUSH
74024: PPUSH
// if not side or side > 8 then
74025: LD_VAR 0 1
74029: NOT
74030: PUSH
74031: LD_VAR 0 1
74035: PUSH
74036: LD_INT 8
74038: GREATER
74039: OR
74040: IFFALSE 74044
// exit ;
74042: GO 74231
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
74044: LD_ADDR_VAR 0 4
74048: PUSH
74049: LD_INT 22
74051: PUSH
74052: LD_VAR 0 1
74056: PUSH
74057: EMPTY
74058: LIST
74059: LIST
74060: PUSH
74061: LD_INT 21
74063: PUSH
74064: LD_INT 3
74066: PUSH
74067: EMPTY
74068: LIST
74069: LIST
74070: PUSH
74071: EMPTY
74072: LIST
74073: LIST
74074: PPUSH
74075: CALL_OW 69
74079: ST_TO_ADDR
// if not tmp then
74080: LD_VAR 0 4
74084: NOT
74085: IFFALSE 74089
// exit ;
74087: GO 74231
// enable_addtolog := true ;
74089: LD_ADDR_OWVAR 81
74093: PUSH
74094: LD_INT 1
74096: ST_TO_ADDR
// AddToLog ( [ ) ;
74097: LD_STRING [
74099: PPUSH
74100: CALL_OW 561
// for i in tmp do
74104: LD_ADDR_VAR 0 3
74108: PUSH
74109: LD_VAR 0 4
74113: PUSH
74114: FOR_IN
74115: IFFALSE 74222
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
74117: LD_STRING [
74119: PUSH
74120: LD_VAR 0 3
74124: PPUSH
74125: CALL_OW 266
74129: STR
74130: PUSH
74131: LD_STRING , 
74133: STR
74134: PUSH
74135: LD_VAR 0 3
74139: PPUSH
74140: CALL_OW 250
74144: STR
74145: PUSH
74146: LD_STRING , 
74148: STR
74149: PUSH
74150: LD_VAR 0 3
74154: PPUSH
74155: CALL_OW 251
74159: STR
74160: PUSH
74161: LD_STRING , 
74163: STR
74164: PUSH
74165: LD_VAR 0 3
74169: PPUSH
74170: CALL_OW 254
74174: STR
74175: PUSH
74176: LD_STRING , 
74178: STR
74179: PUSH
74180: LD_VAR 0 3
74184: PPUSH
74185: LD_INT 1
74187: PPUSH
74188: CALL_OW 268
74192: STR
74193: PUSH
74194: LD_STRING , 
74196: STR
74197: PUSH
74198: LD_VAR 0 3
74202: PPUSH
74203: LD_INT 2
74205: PPUSH
74206: CALL_OW 268
74210: STR
74211: PUSH
74212: LD_STRING ],
74214: STR
74215: PPUSH
74216: CALL_OW 561
// end ;
74220: GO 74114
74222: POP
74223: POP
// AddToLog ( ]; ) ;
74224: LD_STRING ];
74226: PPUSH
74227: CALL_OW 561
// end ;
74231: LD_VAR 0 2
74235: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
74236: LD_INT 0
74238: PPUSH
74239: PPUSH
74240: PPUSH
74241: PPUSH
74242: PPUSH
// if not area or not rate or not max then
74243: LD_VAR 0 1
74247: NOT
74248: PUSH
74249: LD_VAR 0 2
74253: NOT
74254: OR
74255: PUSH
74256: LD_VAR 0 4
74260: NOT
74261: OR
74262: IFFALSE 74266
// exit ;
74264: GO 74455
// while 1 do
74266: LD_INT 1
74268: IFFALSE 74455
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
74270: LD_ADDR_VAR 0 9
74274: PUSH
74275: LD_VAR 0 1
74279: PPUSH
74280: LD_INT 1
74282: PPUSH
74283: CALL_OW 287
74287: PUSH
74288: LD_INT 10
74290: MUL
74291: ST_TO_ADDR
// r := rate / 10 ;
74292: LD_ADDR_VAR 0 7
74296: PUSH
74297: LD_VAR 0 2
74301: PUSH
74302: LD_INT 10
74304: DIVREAL
74305: ST_TO_ADDR
// time := 1 1$00 ;
74306: LD_ADDR_VAR 0 8
74310: PUSH
74311: LD_INT 2100
74313: ST_TO_ADDR
// if amount < min then
74314: LD_VAR 0 9
74318: PUSH
74319: LD_VAR 0 3
74323: LESS
74324: IFFALSE 74342
// r := r * 2 else
74326: LD_ADDR_VAR 0 7
74330: PUSH
74331: LD_VAR 0 7
74335: PUSH
74336: LD_INT 2
74338: MUL
74339: ST_TO_ADDR
74340: GO 74368
// if amount > max then
74342: LD_VAR 0 9
74346: PUSH
74347: LD_VAR 0 4
74351: GREATER
74352: IFFALSE 74368
// r := r / 2 ;
74354: LD_ADDR_VAR 0 7
74358: PUSH
74359: LD_VAR 0 7
74363: PUSH
74364: LD_INT 2
74366: DIVREAL
74367: ST_TO_ADDR
// time := time / r ;
74368: LD_ADDR_VAR 0 8
74372: PUSH
74373: LD_VAR 0 8
74377: PUSH
74378: LD_VAR 0 7
74382: DIVREAL
74383: ST_TO_ADDR
// if time < 0 then
74384: LD_VAR 0 8
74388: PUSH
74389: LD_INT 0
74391: LESS
74392: IFFALSE 74409
// time := time * - 1 ;
74394: LD_ADDR_VAR 0 8
74398: PUSH
74399: LD_VAR 0 8
74403: PUSH
74404: LD_INT 1
74406: NEG
74407: MUL
74408: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
74409: LD_VAR 0 8
74413: PUSH
74414: LD_INT 35
74416: PPUSH
74417: LD_INT 875
74419: PPUSH
74420: CALL_OW 12
74424: PLUS
74425: PPUSH
74426: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
74430: LD_INT 1
74432: PPUSH
74433: LD_INT 5
74435: PPUSH
74436: CALL_OW 12
74440: PPUSH
74441: LD_VAR 0 1
74445: PPUSH
74446: LD_INT 1
74448: PPUSH
74449: CALL_OW 55
// end ;
74453: GO 74266
// end ;
74455: LD_VAR 0 5
74459: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
74460: LD_INT 0
74462: PPUSH
74463: PPUSH
74464: PPUSH
74465: PPUSH
74466: PPUSH
74467: PPUSH
74468: PPUSH
74469: PPUSH
// if not turrets or not factories then
74470: LD_VAR 0 1
74474: NOT
74475: PUSH
74476: LD_VAR 0 2
74480: NOT
74481: OR
74482: IFFALSE 74486
// exit ;
74484: GO 74793
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
74486: LD_ADDR_VAR 0 10
74490: PUSH
74491: LD_INT 5
74493: PUSH
74494: LD_INT 6
74496: PUSH
74497: EMPTY
74498: LIST
74499: LIST
74500: PUSH
74501: LD_INT 2
74503: PUSH
74504: LD_INT 4
74506: PUSH
74507: EMPTY
74508: LIST
74509: LIST
74510: PUSH
74511: LD_INT 3
74513: PUSH
74514: LD_INT 5
74516: PUSH
74517: EMPTY
74518: LIST
74519: LIST
74520: PUSH
74521: EMPTY
74522: LIST
74523: LIST
74524: LIST
74525: PUSH
74526: LD_INT 24
74528: PUSH
74529: LD_INT 25
74531: PUSH
74532: EMPTY
74533: LIST
74534: LIST
74535: PUSH
74536: LD_INT 23
74538: PUSH
74539: LD_INT 27
74541: PUSH
74542: EMPTY
74543: LIST
74544: LIST
74545: PUSH
74546: EMPTY
74547: LIST
74548: LIST
74549: PUSH
74550: LD_INT 42
74552: PUSH
74553: LD_INT 43
74555: PUSH
74556: EMPTY
74557: LIST
74558: LIST
74559: PUSH
74560: LD_INT 44
74562: PUSH
74563: LD_INT 46
74565: PUSH
74566: EMPTY
74567: LIST
74568: LIST
74569: PUSH
74570: LD_INT 45
74572: PUSH
74573: LD_INT 47
74575: PUSH
74576: EMPTY
74577: LIST
74578: LIST
74579: PUSH
74580: EMPTY
74581: LIST
74582: LIST
74583: LIST
74584: PUSH
74585: EMPTY
74586: LIST
74587: LIST
74588: LIST
74589: ST_TO_ADDR
// result := [ ] ;
74590: LD_ADDR_VAR 0 3
74594: PUSH
74595: EMPTY
74596: ST_TO_ADDR
// for i in turrets do
74597: LD_ADDR_VAR 0 4
74601: PUSH
74602: LD_VAR 0 1
74606: PUSH
74607: FOR_IN
74608: IFFALSE 74791
// begin nat := GetNation ( i ) ;
74610: LD_ADDR_VAR 0 7
74614: PUSH
74615: LD_VAR 0 4
74619: PPUSH
74620: CALL_OW 248
74624: ST_TO_ADDR
// weapon := 0 ;
74625: LD_ADDR_VAR 0 8
74629: PUSH
74630: LD_INT 0
74632: ST_TO_ADDR
// if not nat then
74633: LD_VAR 0 7
74637: NOT
74638: IFFALSE 74642
// continue ;
74640: GO 74607
// for j in list [ nat ] do
74642: LD_ADDR_VAR 0 5
74646: PUSH
74647: LD_VAR 0 10
74651: PUSH
74652: LD_VAR 0 7
74656: ARRAY
74657: PUSH
74658: FOR_IN
74659: IFFALSE 74700
// if GetBWeapon ( i ) = j [ 1 ] then
74661: LD_VAR 0 4
74665: PPUSH
74666: CALL_OW 269
74670: PUSH
74671: LD_VAR 0 5
74675: PUSH
74676: LD_INT 1
74678: ARRAY
74679: EQUAL
74680: IFFALSE 74698
// begin weapon := j [ 2 ] ;
74682: LD_ADDR_VAR 0 8
74686: PUSH
74687: LD_VAR 0 5
74691: PUSH
74692: LD_INT 2
74694: ARRAY
74695: ST_TO_ADDR
// break ;
74696: GO 74700
// end ;
74698: GO 74658
74700: POP
74701: POP
// if not weapon then
74702: LD_VAR 0 8
74706: NOT
74707: IFFALSE 74711
// continue ;
74709: GO 74607
// for k in factories do
74711: LD_ADDR_VAR 0 6
74715: PUSH
74716: LD_VAR 0 2
74720: PUSH
74721: FOR_IN
74722: IFFALSE 74787
// begin weapons := AvailableWeaponList ( k ) ;
74724: LD_ADDR_VAR 0 9
74728: PUSH
74729: LD_VAR 0 6
74733: PPUSH
74734: CALL_OW 478
74738: ST_TO_ADDR
// if not weapons then
74739: LD_VAR 0 9
74743: NOT
74744: IFFALSE 74748
// continue ;
74746: GO 74721
// if weapon in weapons then
74748: LD_VAR 0 8
74752: PUSH
74753: LD_VAR 0 9
74757: IN
74758: IFFALSE 74785
// begin result := [ i , weapon ] ;
74760: LD_ADDR_VAR 0 3
74764: PUSH
74765: LD_VAR 0 4
74769: PUSH
74770: LD_VAR 0 8
74774: PUSH
74775: EMPTY
74776: LIST
74777: LIST
74778: ST_TO_ADDR
// exit ;
74779: POP
74780: POP
74781: POP
74782: POP
74783: GO 74793
// end ; end ;
74785: GO 74721
74787: POP
74788: POP
// end ;
74789: GO 74607
74791: POP
74792: POP
// end ;
74793: LD_VAR 0 3
74797: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
74798: LD_INT 0
74800: PPUSH
// if not side or side > 8 then
74801: LD_VAR 0 3
74805: NOT
74806: PUSH
74807: LD_VAR 0 3
74811: PUSH
74812: LD_INT 8
74814: GREATER
74815: OR
74816: IFFALSE 74820
// exit ;
74818: GO 74879
// if not range then
74820: LD_VAR 0 4
74824: NOT
74825: IFFALSE 74836
// range := - 12 ;
74827: LD_ADDR_VAR 0 4
74831: PUSH
74832: LD_INT 12
74834: NEG
74835: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
74836: LD_VAR 0 1
74840: PPUSH
74841: LD_VAR 0 2
74845: PPUSH
74846: LD_VAR 0 3
74850: PPUSH
74851: LD_VAR 0 4
74855: PPUSH
74856: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
74860: LD_VAR 0 1
74864: PPUSH
74865: LD_VAR 0 2
74869: PPUSH
74870: LD_VAR 0 3
74874: PPUSH
74875: CALL_OW 331
// end ;
74879: LD_VAR 0 5
74883: RET
// export function Video ( mode ) ; begin
74884: LD_INT 0
74886: PPUSH
// ingame_video = mode ;
74887: LD_ADDR_OWVAR 52
74891: PUSH
74892: LD_VAR 0 1
74896: ST_TO_ADDR
// interface_hidden = mode ;
74897: LD_ADDR_OWVAR 54
74901: PUSH
74902: LD_VAR 0 1
74906: ST_TO_ADDR
// end ;
74907: LD_VAR 0 2
74911: RET
// export function Join ( array , element ) ; begin
74912: LD_INT 0
74914: PPUSH
// result := Replace ( array , array + 1 , element ) ;
74915: LD_ADDR_VAR 0 3
74919: PUSH
74920: LD_VAR 0 1
74924: PPUSH
74925: LD_VAR 0 1
74929: PUSH
74930: LD_INT 1
74932: PLUS
74933: PPUSH
74934: LD_VAR 0 2
74938: PPUSH
74939: CALL_OW 1
74943: ST_TO_ADDR
// end ;
74944: LD_VAR 0 3
74948: RET
// export function JoinUnion ( array , element ) ; begin
74949: LD_INT 0
74951: PPUSH
// result := array union element ;
74952: LD_ADDR_VAR 0 3
74956: PUSH
74957: LD_VAR 0 1
74961: PUSH
74962: LD_VAR 0 2
74966: UNION
74967: ST_TO_ADDR
// end ;
74968: LD_VAR 0 3
74972: RET
// export function GetBehemoths ( side ) ; begin
74973: LD_INT 0
74975: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
74976: LD_ADDR_VAR 0 2
74980: PUSH
74981: LD_INT 22
74983: PUSH
74984: LD_VAR 0 1
74988: PUSH
74989: EMPTY
74990: LIST
74991: LIST
74992: PUSH
74993: LD_INT 31
74995: PUSH
74996: LD_INT 25
74998: PUSH
74999: EMPTY
75000: LIST
75001: LIST
75002: PUSH
75003: EMPTY
75004: LIST
75005: LIST
75006: PPUSH
75007: CALL_OW 69
75011: ST_TO_ADDR
// end ;
75012: LD_VAR 0 2
75016: RET
// export function Shuffle ( array ) ; var i , index ; begin
75017: LD_INT 0
75019: PPUSH
75020: PPUSH
75021: PPUSH
// result := [ ] ;
75022: LD_ADDR_VAR 0 2
75026: PUSH
75027: EMPTY
75028: ST_TO_ADDR
// if not array then
75029: LD_VAR 0 1
75033: NOT
75034: IFFALSE 75038
// exit ;
75036: GO 75137
// Randomize ;
75038: CALL_OW 10
// for i = array downto 1 do
75042: LD_ADDR_VAR 0 3
75046: PUSH
75047: DOUBLE
75048: LD_VAR 0 1
75052: INC
75053: ST_TO_ADDR
75054: LD_INT 1
75056: PUSH
75057: FOR_DOWNTO
75058: IFFALSE 75135
// begin index := rand ( 1 , array ) ;
75060: LD_ADDR_VAR 0 4
75064: PUSH
75065: LD_INT 1
75067: PPUSH
75068: LD_VAR 0 1
75072: PPUSH
75073: CALL_OW 12
75077: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
75078: LD_ADDR_VAR 0 2
75082: PUSH
75083: LD_VAR 0 2
75087: PPUSH
75088: LD_VAR 0 2
75092: PUSH
75093: LD_INT 1
75095: PLUS
75096: PPUSH
75097: LD_VAR 0 1
75101: PUSH
75102: LD_VAR 0 4
75106: ARRAY
75107: PPUSH
75108: CALL_OW 2
75112: ST_TO_ADDR
// array := Delete ( array , index ) ;
75113: LD_ADDR_VAR 0 1
75117: PUSH
75118: LD_VAR 0 1
75122: PPUSH
75123: LD_VAR 0 4
75127: PPUSH
75128: CALL_OW 3
75132: ST_TO_ADDR
// end ;
75133: GO 75057
75135: POP
75136: POP
// end ;
75137: LD_VAR 0 2
75141: RET
// export function GetBaseMaterials ( base ) ; begin
75142: LD_INT 0
75144: PPUSH
// result := [ 0 , 0 , 0 ] ;
75145: LD_ADDR_VAR 0 2
75149: PUSH
75150: LD_INT 0
75152: PUSH
75153: LD_INT 0
75155: PUSH
75156: LD_INT 0
75158: PUSH
75159: EMPTY
75160: LIST
75161: LIST
75162: LIST
75163: ST_TO_ADDR
// if not base then
75164: LD_VAR 0 1
75168: NOT
75169: IFFALSE 75173
// exit ;
75171: GO 75222
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
75173: LD_ADDR_VAR 0 2
75177: PUSH
75178: LD_VAR 0 1
75182: PPUSH
75183: LD_INT 1
75185: PPUSH
75186: CALL_OW 275
75190: PUSH
75191: LD_VAR 0 1
75195: PPUSH
75196: LD_INT 2
75198: PPUSH
75199: CALL_OW 275
75203: PUSH
75204: LD_VAR 0 1
75208: PPUSH
75209: LD_INT 3
75211: PPUSH
75212: CALL_OW 275
75216: PUSH
75217: EMPTY
75218: LIST
75219: LIST
75220: LIST
75221: ST_TO_ADDR
// end ;
75222: LD_VAR 0 2
75226: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
75227: LD_INT 0
75229: PPUSH
75230: PPUSH
// result := array ;
75231: LD_ADDR_VAR 0 3
75235: PUSH
75236: LD_VAR 0 1
75240: ST_TO_ADDR
// if size > 0 then
75241: LD_VAR 0 2
75245: PUSH
75246: LD_INT 0
75248: GREATER
75249: IFFALSE 75295
// for i := array downto size do
75251: LD_ADDR_VAR 0 4
75255: PUSH
75256: DOUBLE
75257: LD_VAR 0 1
75261: INC
75262: ST_TO_ADDR
75263: LD_VAR 0 2
75267: PUSH
75268: FOR_DOWNTO
75269: IFFALSE 75293
// result := Delete ( result , result ) ;
75271: LD_ADDR_VAR 0 3
75275: PUSH
75276: LD_VAR 0 3
75280: PPUSH
75281: LD_VAR 0 3
75285: PPUSH
75286: CALL_OW 3
75290: ST_TO_ADDR
75291: GO 75268
75293: POP
75294: POP
// end ;
75295: LD_VAR 0 3
75299: RET
// export function ComExit ( unit ) ; var tmp ; begin
75300: LD_INT 0
75302: PPUSH
75303: PPUSH
// if not IsInUnit ( unit ) then
75304: LD_VAR 0 1
75308: PPUSH
75309: CALL_OW 310
75313: NOT
75314: IFFALSE 75318
// exit ;
75316: GO 75378
// tmp := IsInUnit ( unit ) ;
75318: LD_ADDR_VAR 0 3
75322: PUSH
75323: LD_VAR 0 1
75327: PPUSH
75328: CALL_OW 310
75332: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
75333: LD_VAR 0 3
75337: PPUSH
75338: CALL_OW 247
75342: PUSH
75343: LD_INT 2
75345: EQUAL
75346: IFFALSE 75359
// ComExitVehicle ( unit ) else
75348: LD_VAR 0 1
75352: PPUSH
75353: CALL_OW 121
75357: GO 75368
// ComExitBuilding ( unit ) ;
75359: LD_VAR 0 1
75363: PPUSH
75364: CALL_OW 122
// result := tmp ;
75368: LD_ADDR_VAR 0 2
75372: PUSH
75373: LD_VAR 0 3
75377: ST_TO_ADDR
// end ;
75378: LD_VAR 0 2
75382: RET
// export function ComExitAll ( units ) ; var i ; begin
75383: LD_INT 0
75385: PPUSH
75386: PPUSH
// if not units then
75387: LD_VAR 0 1
75391: NOT
75392: IFFALSE 75396
// exit ;
75394: GO 75422
// for i in units do
75396: LD_ADDR_VAR 0 3
75400: PUSH
75401: LD_VAR 0 1
75405: PUSH
75406: FOR_IN
75407: IFFALSE 75420
// ComExit ( i ) ;
75409: LD_VAR 0 3
75413: PPUSH
75414: CALL 75300 0 1
75418: GO 75406
75420: POP
75421: POP
// end ;
75422: LD_VAR 0 2
75426: RET
// export function ResetHc ; begin
75427: LD_INT 0
75429: PPUSH
// InitHc ;
75430: CALL_OW 19
// hc_importance := 0 ;
75434: LD_ADDR_OWVAR 32
75438: PUSH
75439: LD_INT 0
75441: ST_TO_ADDR
// end ;
75442: LD_VAR 0 1
75446: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
75447: LD_INT 0
75449: PPUSH
75450: PPUSH
75451: PPUSH
// _x := ( x1 + x2 ) div 2 ;
75452: LD_ADDR_VAR 0 6
75456: PUSH
75457: LD_VAR 0 1
75461: PUSH
75462: LD_VAR 0 3
75466: PLUS
75467: PUSH
75468: LD_INT 2
75470: DIV
75471: ST_TO_ADDR
// if _x < 0 then
75472: LD_VAR 0 6
75476: PUSH
75477: LD_INT 0
75479: LESS
75480: IFFALSE 75497
// _x := _x * - 1 ;
75482: LD_ADDR_VAR 0 6
75486: PUSH
75487: LD_VAR 0 6
75491: PUSH
75492: LD_INT 1
75494: NEG
75495: MUL
75496: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
75497: LD_ADDR_VAR 0 7
75501: PUSH
75502: LD_VAR 0 2
75506: PUSH
75507: LD_VAR 0 4
75511: PLUS
75512: PUSH
75513: LD_INT 2
75515: DIV
75516: ST_TO_ADDR
// if _y < 0 then
75517: LD_VAR 0 7
75521: PUSH
75522: LD_INT 0
75524: LESS
75525: IFFALSE 75542
// _y := _y * - 1 ;
75527: LD_ADDR_VAR 0 7
75531: PUSH
75532: LD_VAR 0 7
75536: PUSH
75537: LD_INT 1
75539: NEG
75540: MUL
75541: ST_TO_ADDR
// result := [ _x , _y ] ;
75542: LD_ADDR_VAR 0 5
75546: PUSH
75547: LD_VAR 0 6
75551: PUSH
75552: LD_VAR 0 7
75556: PUSH
75557: EMPTY
75558: LIST
75559: LIST
75560: ST_TO_ADDR
// end ;
75561: LD_VAR 0 5
75565: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
75566: LD_INT 0
75568: PPUSH
75569: PPUSH
75570: PPUSH
75571: PPUSH
// task := GetTaskList ( unit ) ;
75572: LD_ADDR_VAR 0 7
75576: PUSH
75577: LD_VAR 0 1
75581: PPUSH
75582: CALL_OW 437
75586: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
75587: LD_VAR 0 7
75591: NOT
75592: PUSH
75593: LD_VAR 0 1
75597: PPUSH
75598: LD_VAR 0 2
75602: PPUSH
75603: CALL_OW 308
75607: NOT
75608: AND
75609: IFFALSE 75613
// exit ;
75611: GO 75731
// if IsInArea ( unit , area ) then
75613: LD_VAR 0 1
75617: PPUSH
75618: LD_VAR 0 2
75622: PPUSH
75623: CALL_OW 308
75627: IFFALSE 75645
// begin ComMoveToArea ( unit , goAway ) ;
75629: LD_VAR 0 1
75633: PPUSH
75634: LD_VAR 0 3
75638: PPUSH
75639: CALL_OW 113
// exit ;
75643: GO 75731
// end ; if task [ 1 ] [ 1 ] <> M then
75645: LD_VAR 0 7
75649: PUSH
75650: LD_INT 1
75652: ARRAY
75653: PUSH
75654: LD_INT 1
75656: ARRAY
75657: PUSH
75658: LD_STRING M
75660: NONEQUAL
75661: IFFALSE 75665
// exit ;
75663: GO 75731
// x := task [ 1 ] [ 2 ] ;
75665: LD_ADDR_VAR 0 5
75669: PUSH
75670: LD_VAR 0 7
75674: PUSH
75675: LD_INT 1
75677: ARRAY
75678: PUSH
75679: LD_INT 2
75681: ARRAY
75682: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
75683: LD_ADDR_VAR 0 6
75687: PUSH
75688: LD_VAR 0 7
75692: PUSH
75693: LD_INT 1
75695: ARRAY
75696: PUSH
75697: LD_INT 3
75699: ARRAY
75700: ST_TO_ADDR
// if InArea ( x , y , area ) then
75701: LD_VAR 0 5
75705: PPUSH
75706: LD_VAR 0 6
75710: PPUSH
75711: LD_VAR 0 2
75715: PPUSH
75716: CALL_OW 309
75720: IFFALSE 75731
// ComStop ( unit ) ;
75722: LD_VAR 0 1
75726: PPUSH
75727: CALL_OW 141
// end ;
75731: LD_VAR 0 4
75735: RET
// export function Abs ( value ) ; begin
75736: LD_INT 0
75738: PPUSH
// result := value ;
75739: LD_ADDR_VAR 0 2
75743: PUSH
75744: LD_VAR 0 1
75748: ST_TO_ADDR
// if value < 0 then
75749: LD_VAR 0 1
75753: PUSH
75754: LD_INT 0
75756: LESS
75757: IFFALSE 75774
// result := value * - 1 ;
75759: LD_ADDR_VAR 0 2
75763: PUSH
75764: LD_VAR 0 1
75768: PUSH
75769: LD_INT 1
75771: NEG
75772: MUL
75773: ST_TO_ADDR
// end ;
75774: LD_VAR 0 2
75778: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
75779: LD_INT 0
75781: PPUSH
75782: PPUSH
75783: PPUSH
75784: PPUSH
75785: PPUSH
75786: PPUSH
75787: PPUSH
75788: PPUSH
// if not unit or not building then
75789: LD_VAR 0 1
75793: NOT
75794: PUSH
75795: LD_VAR 0 2
75799: NOT
75800: OR
75801: IFFALSE 75805
// exit ;
75803: GO 76031
// x := GetX ( building ) ;
75805: LD_ADDR_VAR 0 4
75809: PUSH
75810: LD_VAR 0 2
75814: PPUSH
75815: CALL_OW 250
75819: ST_TO_ADDR
// y := GetY ( building ) ;
75820: LD_ADDR_VAR 0 6
75824: PUSH
75825: LD_VAR 0 2
75829: PPUSH
75830: CALL_OW 251
75834: ST_TO_ADDR
// d := GetDir ( building ) ;
75835: LD_ADDR_VAR 0 8
75839: PUSH
75840: LD_VAR 0 2
75844: PPUSH
75845: CALL_OW 254
75849: ST_TO_ADDR
// r := 4 ;
75850: LD_ADDR_VAR 0 9
75854: PUSH
75855: LD_INT 4
75857: ST_TO_ADDR
// for i := 1 to 5 do
75858: LD_ADDR_VAR 0 10
75862: PUSH
75863: DOUBLE
75864: LD_INT 1
75866: DEC
75867: ST_TO_ADDR
75868: LD_INT 5
75870: PUSH
75871: FOR_TO
75872: IFFALSE 76029
// begin _x := ShiftX ( x , d , r + i ) ;
75874: LD_ADDR_VAR 0 5
75878: PUSH
75879: LD_VAR 0 4
75883: PPUSH
75884: LD_VAR 0 8
75888: PPUSH
75889: LD_VAR 0 9
75893: PUSH
75894: LD_VAR 0 10
75898: PLUS
75899: PPUSH
75900: CALL_OW 272
75904: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
75905: LD_ADDR_VAR 0 7
75909: PUSH
75910: LD_VAR 0 6
75914: PPUSH
75915: LD_VAR 0 8
75919: PPUSH
75920: LD_VAR 0 9
75924: PUSH
75925: LD_VAR 0 10
75929: PLUS
75930: PPUSH
75931: CALL_OW 273
75935: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
75936: LD_VAR 0 5
75940: PPUSH
75941: LD_VAR 0 7
75945: PPUSH
75946: CALL_OW 488
75950: PUSH
75951: LD_VAR 0 5
75955: PPUSH
75956: LD_VAR 0 7
75960: PPUSH
75961: CALL_OW 428
75965: PPUSH
75966: CALL_OW 247
75970: PUSH
75971: LD_INT 3
75973: PUSH
75974: LD_INT 2
75976: PUSH
75977: EMPTY
75978: LIST
75979: LIST
75980: IN
75981: NOT
75982: AND
75983: IFFALSE 76027
// begin ComMoveXY ( unit , _x , _y ) ;
75985: LD_VAR 0 1
75989: PPUSH
75990: LD_VAR 0 5
75994: PPUSH
75995: LD_VAR 0 7
75999: PPUSH
76000: CALL_OW 111
// result := [ _x , _y ] ;
76004: LD_ADDR_VAR 0 3
76008: PUSH
76009: LD_VAR 0 5
76013: PUSH
76014: LD_VAR 0 7
76018: PUSH
76019: EMPTY
76020: LIST
76021: LIST
76022: ST_TO_ADDR
// exit ;
76023: POP
76024: POP
76025: GO 76031
// end ; end ;
76027: GO 75871
76029: POP
76030: POP
// end ;
76031: LD_VAR 0 3
76035: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
76036: LD_INT 0
76038: PPUSH
76039: PPUSH
76040: PPUSH
// result := 0 ;
76041: LD_ADDR_VAR 0 3
76045: PUSH
76046: LD_INT 0
76048: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
76049: LD_VAR 0 1
76053: PUSH
76054: LD_INT 0
76056: LESS
76057: PUSH
76058: LD_VAR 0 1
76062: PUSH
76063: LD_INT 8
76065: GREATER
76066: OR
76067: PUSH
76068: LD_VAR 0 2
76072: PUSH
76073: LD_INT 0
76075: LESS
76076: OR
76077: PUSH
76078: LD_VAR 0 2
76082: PUSH
76083: LD_INT 8
76085: GREATER
76086: OR
76087: IFFALSE 76091
// exit ;
76089: GO 76166
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
76091: LD_ADDR_VAR 0 4
76095: PUSH
76096: LD_INT 22
76098: PUSH
76099: LD_VAR 0 2
76103: PUSH
76104: EMPTY
76105: LIST
76106: LIST
76107: PPUSH
76108: CALL_OW 69
76112: PUSH
76113: FOR_IN
76114: IFFALSE 76164
// begin un := UnitShoot ( i ) ;
76116: LD_ADDR_VAR 0 5
76120: PUSH
76121: LD_VAR 0 4
76125: PPUSH
76126: CALL_OW 504
76130: ST_TO_ADDR
// if GetSide ( un ) = side1 then
76131: LD_VAR 0 5
76135: PPUSH
76136: CALL_OW 255
76140: PUSH
76141: LD_VAR 0 1
76145: EQUAL
76146: IFFALSE 76162
// begin result := un ;
76148: LD_ADDR_VAR 0 3
76152: PUSH
76153: LD_VAR 0 5
76157: ST_TO_ADDR
// exit ;
76158: POP
76159: POP
76160: GO 76166
// end ; end ;
76162: GO 76113
76164: POP
76165: POP
// end ;
76166: LD_VAR 0 3
76170: RET
// export function GetCargoBay ( units ) ; begin
76171: LD_INT 0
76173: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
76174: LD_ADDR_VAR 0 2
76178: PUSH
76179: LD_VAR 0 1
76183: PPUSH
76184: LD_INT 2
76186: PUSH
76187: LD_INT 34
76189: PUSH
76190: LD_INT 12
76192: PUSH
76193: EMPTY
76194: LIST
76195: LIST
76196: PUSH
76197: LD_INT 34
76199: PUSH
76200: LD_INT 51
76202: PUSH
76203: EMPTY
76204: LIST
76205: LIST
76206: PUSH
76207: LD_INT 34
76209: PUSH
76210: LD_INT 32
76212: PUSH
76213: EMPTY
76214: LIST
76215: LIST
76216: PUSH
76217: LD_INT 34
76219: PUSH
76220: LD_EXP 46
76224: PUSH
76225: EMPTY
76226: LIST
76227: LIST
76228: PUSH
76229: EMPTY
76230: LIST
76231: LIST
76232: LIST
76233: LIST
76234: LIST
76235: PPUSH
76236: CALL_OW 72
76240: ST_TO_ADDR
// end ;
76241: LD_VAR 0 2
76245: RET
// export function Negate ( value ) ; begin
76246: LD_INT 0
76248: PPUSH
// result := not value ;
76249: LD_ADDR_VAR 0 2
76253: PUSH
76254: LD_VAR 0 1
76258: NOT
76259: ST_TO_ADDR
// end ;
76260: LD_VAR 0 2
76264: RET
// export function Inc ( value ) ; begin
76265: LD_INT 0
76267: PPUSH
// result := value + 1 ;
76268: LD_ADDR_VAR 0 2
76272: PUSH
76273: LD_VAR 0 1
76277: PUSH
76278: LD_INT 1
76280: PLUS
76281: ST_TO_ADDR
// end ;
76282: LD_VAR 0 2
76286: RET
// export function Dec ( value ) ; begin
76287: LD_INT 0
76289: PPUSH
// result := value - 1 ;
76290: LD_ADDR_VAR 0 2
76294: PUSH
76295: LD_VAR 0 1
76299: PUSH
76300: LD_INT 1
76302: MINUS
76303: ST_TO_ADDR
// end ;
76304: LD_VAR 0 2
76308: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
76309: LD_INT 0
76311: PPUSH
76312: PPUSH
76313: PPUSH
76314: PPUSH
76315: PPUSH
76316: PPUSH
76317: PPUSH
76318: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
76319: LD_VAR 0 1
76323: PPUSH
76324: LD_VAR 0 2
76328: PPUSH
76329: CALL_OW 488
76333: NOT
76334: PUSH
76335: LD_VAR 0 3
76339: PPUSH
76340: LD_VAR 0 4
76344: PPUSH
76345: CALL_OW 488
76349: NOT
76350: OR
76351: IFFALSE 76364
// begin result := - 1 ;
76353: LD_ADDR_VAR 0 5
76357: PUSH
76358: LD_INT 1
76360: NEG
76361: ST_TO_ADDR
// exit ;
76362: GO 76599
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
76364: LD_ADDR_VAR 0 12
76368: PUSH
76369: LD_VAR 0 1
76373: PPUSH
76374: LD_VAR 0 2
76378: PPUSH
76379: LD_VAR 0 3
76383: PPUSH
76384: LD_VAR 0 4
76388: PPUSH
76389: CALL 75447 0 4
76393: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
76394: LD_ADDR_VAR 0 11
76398: PUSH
76399: LD_VAR 0 1
76403: PPUSH
76404: LD_VAR 0 2
76408: PPUSH
76409: LD_VAR 0 12
76413: PUSH
76414: LD_INT 1
76416: ARRAY
76417: PPUSH
76418: LD_VAR 0 12
76422: PUSH
76423: LD_INT 2
76425: ARRAY
76426: PPUSH
76427: CALL_OW 298
76431: ST_TO_ADDR
// distance := 9999 ;
76432: LD_ADDR_VAR 0 10
76436: PUSH
76437: LD_INT 9999
76439: ST_TO_ADDR
// for i := 0 to 5 do
76440: LD_ADDR_VAR 0 6
76444: PUSH
76445: DOUBLE
76446: LD_INT 0
76448: DEC
76449: ST_TO_ADDR
76450: LD_INT 5
76452: PUSH
76453: FOR_TO
76454: IFFALSE 76597
// begin _x := ShiftX ( x1 , i , centerDist ) ;
76456: LD_ADDR_VAR 0 7
76460: PUSH
76461: LD_VAR 0 1
76465: PPUSH
76466: LD_VAR 0 6
76470: PPUSH
76471: LD_VAR 0 11
76475: PPUSH
76476: CALL_OW 272
76480: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
76481: LD_ADDR_VAR 0 8
76485: PUSH
76486: LD_VAR 0 2
76490: PPUSH
76491: LD_VAR 0 6
76495: PPUSH
76496: LD_VAR 0 11
76500: PPUSH
76501: CALL_OW 273
76505: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
76506: LD_VAR 0 7
76510: PPUSH
76511: LD_VAR 0 8
76515: PPUSH
76516: CALL_OW 488
76520: NOT
76521: IFFALSE 76525
// continue ;
76523: GO 76453
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
76525: LD_ADDR_VAR 0 9
76529: PUSH
76530: LD_VAR 0 12
76534: PUSH
76535: LD_INT 1
76537: ARRAY
76538: PPUSH
76539: LD_VAR 0 12
76543: PUSH
76544: LD_INT 2
76546: ARRAY
76547: PPUSH
76548: LD_VAR 0 7
76552: PPUSH
76553: LD_VAR 0 8
76557: PPUSH
76558: CALL_OW 298
76562: ST_TO_ADDR
// if tmp < distance then
76563: LD_VAR 0 9
76567: PUSH
76568: LD_VAR 0 10
76572: LESS
76573: IFFALSE 76595
// begin result := i ;
76575: LD_ADDR_VAR 0 5
76579: PUSH
76580: LD_VAR 0 6
76584: ST_TO_ADDR
// distance := tmp ;
76585: LD_ADDR_VAR 0 10
76589: PUSH
76590: LD_VAR 0 9
76594: ST_TO_ADDR
// end ; end ;
76595: GO 76453
76597: POP
76598: POP
// end ;
76599: LD_VAR 0 5
76603: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
76604: LD_INT 0
76606: PPUSH
76607: PPUSH
// if not driver or not IsInUnit ( driver ) then
76608: LD_VAR 0 1
76612: NOT
76613: PUSH
76614: LD_VAR 0 1
76618: PPUSH
76619: CALL_OW 310
76623: NOT
76624: OR
76625: IFFALSE 76629
// exit ;
76627: GO 76719
// vehicle := IsInUnit ( driver ) ;
76629: LD_ADDR_VAR 0 3
76633: PUSH
76634: LD_VAR 0 1
76638: PPUSH
76639: CALL_OW 310
76643: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
76644: LD_VAR 0 1
76648: PPUSH
76649: LD_STRING \
76651: PUSH
76652: LD_INT 0
76654: PUSH
76655: LD_INT 0
76657: PUSH
76658: LD_INT 0
76660: PUSH
76661: LD_INT 0
76663: PUSH
76664: LD_INT 0
76666: PUSH
76667: LD_INT 0
76669: PUSH
76670: EMPTY
76671: LIST
76672: LIST
76673: LIST
76674: LIST
76675: LIST
76676: LIST
76677: LIST
76678: PUSH
76679: LD_STRING E
76681: PUSH
76682: LD_INT 0
76684: PUSH
76685: LD_INT 0
76687: PUSH
76688: LD_VAR 0 3
76692: PUSH
76693: LD_INT 0
76695: PUSH
76696: LD_INT 0
76698: PUSH
76699: LD_INT 0
76701: PUSH
76702: EMPTY
76703: LIST
76704: LIST
76705: LIST
76706: LIST
76707: LIST
76708: LIST
76709: LIST
76710: PUSH
76711: EMPTY
76712: LIST
76713: LIST
76714: PPUSH
76715: CALL_OW 446
// end ;
76719: LD_VAR 0 2
76723: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
76724: LD_INT 0
76726: PPUSH
76727: PPUSH
// if not driver or not IsInUnit ( driver ) then
76728: LD_VAR 0 1
76732: NOT
76733: PUSH
76734: LD_VAR 0 1
76738: PPUSH
76739: CALL_OW 310
76743: NOT
76744: OR
76745: IFFALSE 76749
// exit ;
76747: GO 76839
// vehicle := IsInUnit ( driver ) ;
76749: LD_ADDR_VAR 0 3
76753: PUSH
76754: LD_VAR 0 1
76758: PPUSH
76759: CALL_OW 310
76763: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
76764: LD_VAR 0 1
76768: PPUSH
76769: LD_STRING \
76771: PUSH
76772: LD_INT 0
76774: PUSH
76775: LD_INT 0
76777: PUSH
76778: LD_INT 0
76780: PUSH
76781: LD_INT 0
76783: PUSH
76784: LD_INT 0
76786: PUSH
76787: LD_INT 0
76789: PUSH
76790: EMPTY
76791: LIST
76792: LIST
76793: LIST
76794: LIST
76795: LIST
76796: LIST
76797: LIST
76798: PUSH
76799: LD_STRING E
76801: PUSH
76802: LD_INT 0
76804: PUSH
76805: LD_INT 0
76807: PUSH
76808: LD_VAR 0 3
76812: PUSH
76813: LD_INT 0
76815: PUSH
76816: LD_INT 0
76818: PUSH
76819: LD_INT 0
76821: PUSH
76822: EMPTY
76823: LIST
76824: LIST
76825: LIST
76826: LIST
76827: LIST
76828: LIST
76829: LIST
76830: PUSH
76831: EMPTY
76832: LIST
76833: LIST
76834: PPUSH
76835: CALL_OW 447
// end ;
76839: LD_VAR 0 2
76843: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
76844: LD_INT 0
76846: PPUSH
76847: PPUSH
76848: PPUSH
// tmp := [ ] ;
76849: LD_ADDR_VAR 0 5
76853: PUSH
76854: EMPTY
76855: ST_TO_ADDR
// for i in units do
76856: LD_ADDR_VAR 0 4
76860: PUSH
76861: LD_VAR 0 1
76865: PUSH
76866: FOR_IN
76867: IFFALSE 76905
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
76869: LD_ADDR_VAR 0 5
76873: PUSH
76874: LD_VAR 0 5
76878: PPUSH
76879: LD_VAR 0 5
76883: PUSH
76884: LD_INT 1
76886: PLUS
76887: PPUSH
76888: LD_VAR 0 4
76892: PPUSH
76893: CALL_OW 256
76897: PPUSH
76898: CALL_OW 2
76902: ST_TO_ADDR
76903: GO 76866
76905: POP
76906: POP
// if not tmp then
76907: LD_VAR 0 5
76911: NOT
76912: IFFALSE 76916
// exit ;
76914: GO 76964
// if asc then
76916: LD_VAR 0 2
76920: IFFALSE 76944
// result := SortListByListAsc ( units , tmp ) else
76922: LD_ADDR_VAR 0 3
76926: PUSH
76927: LD_VAR 0 1
76931: PPUSH
76932: LD_VAR 0 5
76936: PPUSH
76937: CALL_OW 76
76941: ST_TO_ADDR
76942: GO 76964
// result := SortListByListDesc ( units , tmp ) ;
76944: LD_ADDR_VAR 0 3
76948: PUSH
76949: LD_VAR 0 1
76953: PPUSH
76954: LD_VAR 0 5
76958: PPUSH
76959: CALL_OW 77
76963: ST_TO_ADDR
// end ;
76964: LD_VAR 0 3
76968: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
76969: LD_INT 0
76971: PPUSH
76972: PPUSH
// task := GetTaskList ( mech ) ;
76973: LD_ADDR_VAR 0 4
76977: PUSH
76978: LD_VAR 0 1
76982: PPUSH
76983: CALL_OW 437
76987: ST_TO_ADDR
// if not task then
76988: LD_VAR 0 4
76992: NOT
76993: IFFALSE 76997
// exit ;
76995: GO 77039
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
76997: LD_ADDR_VAR 0 3
77001: PUSH
77002: LD_VAR 0 4
77006: PUSH
77007: LD_INT 1
77009: ARRAY
77010: PUSH
77011: LD_INT 1
77013: ARRAY
77014: PUSH
77015: LD_STRING r
77017: EQUAL
77018: PUSH
77019: LD_VAR 0 4
77023: PUSH
77024: LD_INT 1
77026: ARRAY
77027: PUSH
77028: LD_INT 4
77030: ARRAY
77031: PUSH
77032: LD_VAR 0 2
77036: EQUAL
77037: AND
77038: ST_TO_ADDR
// end ;
77039: LD_VAR 0 3
77043: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
77044: LD_INT 0
77046: PPUSH
// SetDir ( unit , d ) ;
77047: LD_VAR 0 1
77051: PPUSH
77052: LD_VAR 0 4
77056: PPUSH
77057: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
77061: LD_VAR 0 1
77065: PPUSH
77066: LD_VAR 0 2
77070: PPUSH
77071: LD_VAR 0 3
77075: PPUSH
77076: LD_VAR 0 5
77080: PPUSH
77081: CALL_OW 48
// end ;
77085: LD_VAR 0 6
77089: RET
// export function ToNaturalNumber ( number ) ; begin
77090: LD_INT 0
77092: PPUSH
// result := number div 1 ;
77093: LD_ADDR_VAR 0 2
77097: PUSH
77098: LD_VAR 0 1
77102: PUSH
77103: LD_INT 1
77105: DIV
77106: ST_TO_ADDR
// if number < 0 then
77107: LD_VAR 0 1
77111: PUSH
77112: LD_INT 0
77114: LESS
77115: IFFALSE 77125
// result := 0 ;
77117: LD_ADDR_VAR 0 2
77121: PUSH
77122: LD_INT 0
77124: ST_TO_ADDR
// end ;
77125: LD_VAR 0 2
77129: RET
// export function SortByClass ( units , class ) ; var un ; begin
77130: LD_INT 0
77132: PPUSH
77133: PPUSH
// if not units or not class then
77134: LD_VAR 0 1
77138: NOT
77139: PUSH
77140: LD_VAR 0 2
77144: NOT
77145: OR
77146: IFFALSE 77150
// exit ;
77148: GO 77245
// result := [ ] ;
77150: LD_ADDR_VAR 0 3
77154: PUSH
77155: EMPTY
77156: ST_TO_ADDR
// for un in units do
77157: LD_ADDR_VAR 0 4
77161: PUSH
77162: LD_VAR 0 1
77166: PUSH
77167: FOR_IN
77168: IFFALSE 77243
// if GetClass ( un ) = class then
77170: LD_VAR 0 4
77174: PPUSH
77175: CALL_OW 257
77179: PUSH
77180: LD_VAR 0 2
77184: EQUAL
77185: IFFALSE 77212
// result := Insert ( result , 1 , un ) else
77187: LD_ADDR_VAR 0 3
77191: PUSH
77192: LD_VAR 0 3
77196: PPUSH
77197: LD_INT 1
77199: PPUSH
77200: LD_VAR 0 4
77204: PPUSH
77205: CALL_OW 2
77209: ST_TO_ADDR
77210: GO 77241
// result := Replace ( result , result + 1 , un ) ;
77212: LD_ADDR_VAR 0 3
77216: PUSH
77217: LD_VAR 0 3
77221: PPUSH
77222: LD_VAR 0 3
77226: PUSH
77227: LD_INT 1
77229: PLUS
77230: PPUSH
77231: LD_VAR 0 4
77235: PPUSH
77236: CALL_OW 1
77240: ST_TO_ADDR
77241: GO 77167
77243: POP
77244: POP
// end ;
77245: LD_VAR 0 3
77249: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
77250: LD_INT 0
77252: PPUSH
77253: PPUSH
77254: PPUSH
77255: PPUSH
77256: PPUSH
77257: PPUSH
77258: PPUSH
// result := [ ] ;
77259: LD_ADDR_VAR 0 4
77263: PUSH
77264: EMPTY
77265: ST_TO_ADDR
// if x - r < 0 then
77266: LD_VAR 0 1
77270: PUSH
77271: LD_VAR 0 3
77275: MINUS
77276: PUSH
77277: LD_INT 0
77279: LESS
77280: IFFALSE 77292
// min_x := 0 else
77282: LD_ADDR_VAR 0 8
77286: PUSH
77287: LD_INT 0
77289: ST_TO_ADDR
77290: GO 77308
// min_x := x - r ;
77292: LD_ADDR_VAR 0 8
77296: PUSH
77297: LD_VAR 0 1
77301: PUSH
77302: LD_VAR 0 3
77306: MINUS
77307: ST_TO_ADDR
// if y - r < 0 then
77308: LD_VAR 0 2
77312: PUSH
77313: LD_VAR 0 3
77317: MINUS
77318: PUSH
77319: LD_INT 0
77321: LESS
77322: IFFALSE 77334
// min_y := 0 else
77324: LD_ADDR_VAR 0 7
77328: PUSH
77329: LD_INT 0
77331: ST_TO_ADDR
77332: GO 77350
// min_y := y - r ;
77334: LD_ADDR_VAR 0 7
77338: PUSH
77339: LD_VAR 0 2
77343: PUSH
77344: LD_VAR 0 3
77348: MINUS
77349: ST_TO_ADDR
// max_x := x + r ;
77350: LD_ADDR_VAR 0 9
77354: PUSH
77355: LD_VAR 0 1
77359: PUSH
77360: LD_VAR 0 3
77364: PLUS
77365: ST_TO_ADDR
// max_y := y + r ;
77366: LD_ADDR_VAR 0 10
77370: PUSH
77371: LD_VAR 0 2
77375: PUSH
77376: LD_VAR 0 3
77380: PLUS
77381: ST_TO_ADDR
// for _x = min_x to max_x do
77382: LD_ADDR_VAR 0 5
77386: PUSH
77387: DOUBLE
77388: LD_VAR 0 8
77392: DEC
77393: ST_TO_ADDR
77394: LD_VAR 0 9
77398: PUSH
77399: FOR_TO
77400: IFFALSE 77501
// for _y = min_y to max_y do
77402: LD_ADDR_VAR 0 6
77406: PUSH
77407: DOUBLE
77408: LD_VAR 0 7
77412: DEC
77413: ST_TO_ADDR
77414: LD_VAR 0 10
77418: PUSH
77419: FOR_TO
77420: IFFALSE 77497
// begin if not ValidHex ( _x , _y ) then
77422: LD_VAR 0 5
77426: PPUSH
77427: LD_VAR 0 6
77431: PPUSH
77432: CALL_OW 488
77436: NOT
77437: IFFALSE 77441
// continue ;
77439: GO 77419
// if GetResourceTypeXY ( _x , _y ) then
77441: LD_VAR 0 5
77445: PPUSH
77446: LD_VAR 0 6
77450: PPUSH
77451: CALL_OW 283
77455: IFFALSE 77495
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
77457: LD_ADDR_VAR 0 4
77461: PUSH
77462: LD_VAR 0 4
77466: PPUSH
77467: LD_VAR 0 4
77471: PUSH
77472: LD_INT 1
77474: PLUS
77475: PPUSH
77476: LD_VAR 0 5
77480: PUSH
77481: LD_VAR 0 6
77485: PUSH
77486: EMPTY
77487: LIST
77488: LIST
77489: PPUSH
77490: CALL_OW 1
77494: ST_TO_ADDR
// end ;
77495: GO 77419
77497: POP
77498: POP
77499: GO 77399
77501: POP
77502: POP
// end ;
77503: LD_VAR 0 4
77507: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
77508: LD_INT 0
77510: PPUSH
77511: PPUSH
77512: PPUSH
77513: PPUSH
77514: PPUSH
77515: PPUSH
77516: PPUSH
77517: PPUSH
// if not units then
77518: LD_VAR 0 1
77522: NOT
77523: IFFALSE 77527
// exit ;
77525: GO 77952
// result := UnitFilter ( units , [ f_ok ] ) ;
77527: LD_ADDR_VAR 0 3
77531: PUSH
77532: LD_VAR 0 1
77536: PPUSH
77537: LD_INT 50
77539: PUSH
77540: EMPTY
77541: LIST
77542: PPUSH
77543: CALL_OW 72
77547: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
77548: LD_ADDR_VAR 0 8
77552: PUSH
77553: LD_VAR 0 1
77557: PUSH
77558: LD_INT 1
77560: ARRAY
77561: PPUSH
77562: CALL_OW 255
77566: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
77567: LD_ADDR_VAR 0 10
77571: PUSH
77572: LD_INT 29
77574: PUSH
77575: LD_EXP 49
77579: PUSH
77580: EMPTY
77581: LIST
77582: LIST
77583: ST_TO_ADDR
// if not result then
77584: LD_VAR 0 3
77588: NOT
77589: IFFALSE 77593
// exit ;
77591: GO 77952
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
77593: LD_ADDR_VAR 0 5
77597: PUSH
77598: LD_INT 81
77600: PUSH
77601: LD_VAR 0 8
77605: PUSH
77606: EMPTY
77607: LIST
77608: LIST
77609: PPUSH
77610: CALL_OW 69
77614: ST_TO_ADDR
// for i in result do
77615: LD_ADDR_VAR 0 4
77619: PUSH
77620: LD_VAR 0 3
77624: PUSH
77625: FOR_IN
77626: IFFALSE 77950
// begin tag := GetTag ( i ) + 1 ;
77628: LD_ADDR_VAR 0 9
77632: PUSH
77633: LD_VAR 0 4
77637: PPUSH
77638: CALL_OW 110
77642: PUSH
77643: LD_INT 1
77645: PLUS
77646: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
77647: LD_ADDR_VAR 0 7
77651: PUSH
77652: LD_VAR 0 4
77656: PPUSH
77657: CALL_OW 250
77661: PPUSH
77662: LD_VAR 0 4
77666: PPUSH
77667: CALL_OW 251
77671: PPUSH
77672: LD_INT 6
77674: PPUSH
77675: CALL 77250 0 3
77679: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
77680: LD_VAR 0 7
77684: PUSH
77685: LD_VAR 0 4
77689: PPUSH
77690: CALL_OW 264
77694: PUSH
77695: LD_VAR 0 10
77699: IN
77700: NOT
77701: AND
77702: IFFALSE 77741
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
77704: LD_VAR 0 4
77708: PPUSH
77709: LD_VAR 0 7
77713: PUSH
77714: LD_INT 1
77716: ARRAY
77717: PUSH
77718: LD_INT 1
77720: ARRAY
77721: PPUSH
77722: LD_VAR 0 7
77726: PUSH
77727: LD_INT 1
77729: ARRAY
77730: PUSH
77731: LD_INT 2
77733: ARRAY
77734: PPUSH
77735: CALL_OW 116
77739: GO 77948
// if path > tag then
77741: LD_VAR 0 2
77745: PUSH
77746: LD_VAR 0 9
77750: GREATER
77751: IFFALSE 77918
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
77753: LD_ADDR_VAR 0 6
77757: PUSH
77758: LD_VAR 0 5
77762: PPUSH
77763: LD_INT 91
77765: PUSH
77766: LD_VAR 0 4
77770: PUSH
77771: LD_INT 12
77773: PUSH
77774: EMPTY
77775: LIST
77776: LIST
77777: LIST
77778: PPUSH
77779: CALL_OW 72
77783: ST_TO_ADDR
// if nearEnemy then
77784: LD_VAR 0 6
77788: IFFALSE 77816
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
77790: LD_VAR 0 4
77794: PPUSH
77795: LD_VAR 0 6
77799: PPUSH
77800: LD_VAR 0 4
77804: PPUSH
77805: CALL_OW 74
77809: PPUSH
77810: CALL_OW 115
77814: GO 77916
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
77816: LD_VAR 0 4
77820: PPUSH
77821: LD_VAR 0 2
77825: PUSH
77826: LD_VAR 0 9
77830: ARRAY
77831: PUSH
77832: LD_INT 1
77834: ARRAY
77835: PPUSH
77836: LD_VAR 0 2
77840: PUSH
77841: LD_VAR 0 9
77845: ARRAY
77846: PUSH
77847: LD_INT 2
77849: ARRAY
77850: PPUSH
77851: CALL_OW 297
77855: PUSH
77856: LD_INT 6
77858: GREATER
77859: IFFALSE 77902
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
77861: LD_VAR 0 4
77865: PPUSH
77866: LD_VAR 0 2
77870: PUSH
77871: LD_VAR 0 9
77875: ARRAY
77876: PUSH
77877: LD_INT 1
77879: ARRAY
77880: PPUSH
77881: LD_VAR 0 2
77885: PUSH
77886: LD_VAR 0 9
77890: ARRAY
77891: PUSH
77892: LD_INT 2
77894: ARRAY
77895: PPUSH
77896: CALL_OW 114
77900: GO 77916
// SetTag ( i , tag ) ;
77902: LD_VAR 0 4
77906: PPUSH
77907: LD_VAR 0 9
77911: PPUSH
77912: CALL_OW 109
// end else
77916: GO 77948
// if enemy then
77918: LD_VAR 0 5
77922: IFFALSE 77948
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
77924: LD_VAR 0 4
77928: PPUSH
77929: LD_VAR 0 5
77933: PPUSH
77934: LD_VAR 0 4
77938: PPUSH
77939: CALL_OW 74
77943: PPUSH
77944: CALL_OW 115
// end ;
77948: GO 77625
77950: POP
77951: POP
// end ;
77952: LD_VAR 0 3
77956: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
77957: LD_INT 0
77959: PPUSH
77960: PPUSH
77961: PPUSH
// if not unit or IsInUnit ( unit ) then
77962: LD_VAR 0 1
77966: NOT
77967: PUSH
77968: LD_VAR 0 1
77972: PPUSH
77973: CALL_OW 310
77977: OR
77978: IFFALSE 77982
// exit ;
77980: GO 78073
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
77982: LD_ADDR_VAR 0 4
77986: PUSH
77987: LD_VAR 0 1
77991: PPUSH
77992: CALL_OW 250
77996: PPUSH
77997: LD_VAR 0 2
78001: PPUSH
78002: LD_INT 1
78004: PPUSH
78005: CALL_OW 272
78009: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
78010: LD_ADDR_VAR 0 5
78014: PUSH
78015: LD_VAR 0 1
78019: PPUSH
78020: CALL_OW 251
78024: PPUSH
78025: LD_VAR 0 2
78029: PPUSH
78030: LD_INT 1
78032: PPUSH
78033: CALL_OW 273
78037: ST_TO_ADDR
// if ValidHex ( x , y ) then
78038: LD_VAR 0 4
78042: PPUSH
78043: LD_VAR 0 5
78047: PPUSH
78048: CALL_OW 488
78052: IFFALSE 78073
// ComTurnXY ( unit , x , y ) ;
78054: LD_VAR 0 1
78058: PPUSH
78059: LD_VAR 0 4
78063: PPUSH
78064: LD_VAR 0 5
78068: PPUSH
78069: CALL_OW 118
// end ;
78073: LD_VAR 0 3
78077: RET
// export function SeeUnits ( side , units ) ; var i ; begin
78078: LD_INT 0
78080: PPUSH
78081: PPUSH
// result := false ;
78082: LD_ADDR_VAR 0 3
78086: PUSH
78087: LD_INT 0
78089: ST_TO_ADDR
// if not units then
78090: LD_VAR 0 2
78094: NOT
78095: IFFALSE 78099
// exit ;
78097: GO 78144
// for i in units do
78099: LD_ADDR_VAR 0 4
78103: PUSH
78104: LD_VAR 0 2
78108: PUSH
78109: FOR_IN
78110: IFFALSE 78142
// if See ( side , i ) then
78112: LD_VAR 0 1
78116: PPUSH
78117: LD_VAR 0 4
78121: PPUSH
78122: CALL_OW 292
78126: IFFALSE 78140
// begin result := true ;
78128: LD_ADDR_VAR 0 3
78132: PUSH
78133: LD_INT 1
78135: ST_TO_ADDR
// exit ;
78136: POP
78137: POP
78138: GO 78144
// end ;
78140: GO 78109
78142: POP
78143: POP
// end ;
78144: LD_VAR 0 3
78148: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
78149: LD_INT 0
78151: PPUSH
78152: PPUSH
78153: PPUSH
78154: PPUSH
// if not unit or not points then
78155: LD_VAR 0 1
78159: NOT
78160: PUSH
78161: LD_VAR 0 2
78165: NOT
78166: OR
78167: IFFALSE 78171
// exit ;
78169: GO 78261
// dist := 99999 ;
78171: LD_ADDR_VAR 0 5
78175: PUSH
78176: LD_INT 99999
78178: ST_TO_ADDR
// for i in points do
78179: LD_ADDR_VAR 0 4
78183: PUSH
78184: LD_VAR 0 2
78188: PUSH
78189: FOR_IN
78190: IFFALSE 78259
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
78192: LD_ADDR_VAR 0 6
78196: PUSH
78197: LD_VAR 0 1
78201: PPUSH
78202: LD_VAR 0 4
78206: PUSH
78207: LD_INT 1
78209: ARRAY
78210: PPUSH
78211: LD_VAR 0 4
78215: PUSH
78216: LD_INT 2
78218: ARRAY
78219: PPUSH
78220: CALL_OW 297
78224: ST_TO_ADDR
// if tmpDist < dist then
78225: LD_VAR 0 6
78229: PUSH
78230: LD_VAR 0 5
78234: LESS
78235: IFFALSE 78257
// begin result := i ;
78237: LD_ADDR_VAR 0 3
78241: PUSH
78242: LD_VAR 0 4
78246: ST_TO_ADDR
// dist := tmpDist ;
78247: LD_ADDR_VAR 0 5
78251: PUSH
78252: LD_VAR 0 6
78256: ST_TO_ADDR
// end ; end ;
78257: GO 78189
78259: POP
78260: POP
// end ;
78261: LD_VAR 0 3
78265: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
78266: LD_INT 0
78268: PPUSH
// uc_side := side ;
78269: LD_ADDR_OWVAR 20
78273: PUSH
78274: LD_VAR 0 1
78278: ST_TO_ADDR
// uc_nation := 3 ;
78279: LD_ADDR_OWVAR 21
78283: PUSH
78284: LD_INT 3
78286: ST_TO_ADDR
// vc_chassis := 25 ;
78287: LD_ADDR_OWVAR 37
78291: PUSH
78292: LD_INT 25
78294: ST_TO_ADDR
// vc_engine := engine_siberite ;
78295: LD_ADDR_OWVAR 39
78299: PUSH
78300: LD_INT 3
78302: ST_TO_ADDR
// vc_control := control_computer ;
78303: LD_ADDR_OWVAR 38
78307: PUSH
78308: LD_INT 3
78310: ST_TO_ADDR
// vc_weapon := 59 ;
78311: LD_ADDR_OWVAR 40
78315: PUSH
78316: LD_INT 59
78318: ST_TO_ADDR
// result := CreateVehicle ;
78319: LD_ADDR_VAR 0 5
78323: PUSH
78324: CALL_OW 45
78328: ST_TO_ADDR
// SetDir ( result , d ) ;
78329: LD_VAR 0 5
78333: PPUSH
78334: LD_VAR 0 4
78338: PPUSH
78339: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
78343: LD_VAR 0 5
78347: PPUSH
78348: LD_VAR 0 2
78352: PPUSH
78353: LD_VAR 0 3
78357: PPUSH
78358: LD_INT 0
78360: PPUSH
78361: CALL_OW 48
// end ;
78365: LD_VAR 0 5
78369: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
78370: LD_INT 0
78372: PPUSH
78373: PPUSH
78374: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
78375: LD_ADDR_VAR 0 2
78379: PUSH
78380: LD_INT 0
78382: PUSH
78383: LD_INT 0
78385: PUSH
78386: LD_INT 0
78388: PUSH
78389: LD_INT 0
78391: PUSH
78392: EMPTY
78393: LIST
78394: LIST
78395: LIST
78396: LIST
78397: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
78398: LD_VAR 0 1
78402: NOT
78403: PUSH
78404: LD_VAR 0 1
78408: PPUSH
78409: CALL_OW 264
78413: PUSH
78414: LD_INT 12
78416: PUSH
78417: LD_INT 51
78419: PUSH
78420: LD_INT 32
78422: PUSH
78423: LD_EXP 46
78427: PUSH
78428: EMPTY
78429: LIST
78430: LIST
78431: LIST
78432: LIST
78433: IN
78434: NOT
78435: OR
78436: IFFALSE 78440
// exit ;
78438: GO 78538
// for i := 1 to 3 do
78440: LD_ADDR_VAR 0 3
78444: PUSH
78445: DOUBLE
78446: LD_INT 1
78448: DEC
78449: ST_TO_ADDR
78450: LD_INT 3
78452: PUSH
78453: FOR_TO
78454: IFFALSE 78536
// begin tmp := GetCargo ( cargo , i ) ;
78456: LD_ADDR_VAR 0 4
78460: PUSH
78461: LD_VAR 0 1
78465: PPUSH
78466: LD_VAR 0 3
78470: PPUSH
78471: CALL_OW 289
78475: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
78476: LD_ADDR_VAR 0 2
78480: PUSH
78481: LD_VAR 0 2
78485: PPUSH
78486: LD_VAR 0 3
78490: PPUSH
78491: LD_VAR 0 4
78495: PPUSH
78496: CALL_OW 1
78500: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
78501: LD_ADDR_VAR 0 2
78505: PUSH
78506: LD_VAR 0 2
78510: PPUSH
78511: LD_INT 4
78513: PPUSH
78514: LD_VAR 0 2
78518: PUSH
78519: LD_INT 4
78521: ARRAY
78522: PUSH
78523: LD_VAR 0 4
78527: PLUS
78528: PPUSH
78529: CALL_OW 1
78533: ST_TO_ADDR
// end ;
78534: GO 78453
78536: POP
78537: POP
// end ; end_of_file
78538: LD_VAR 0 2
78542: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
78543: LD_VAR 0 1
78547: PUSH
78548: LD_INT 200
78550: DOUBLE
78551: GREATEREQUAL
78552: IFFALSE 78560
78554: LD_INT 299
78556: DOUBLE
78557: LESSEQUAL
78558: IFTRUE 78562
78560: GO 78594
78562: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
78563: LD_VAR 0 1
78567: PPUSH
78568: LD_VAR 0 2
78572: PPUSH
78573: LD_VAR 0 3
78577: PPUSH
78578: LD_VAR 0 4
78582: PPUSH
78583: LD_VAR 0 5
78587: PPUSH
78588: CALL 33969 0 5
78592: GO 78671
78594: LD_INT 300
78596: DOUBLE
78597: GREATEREQUAL
78598: IFFALSE 78606
78600: LD_INT 399
78602: DOUBLE
78603: LESSEQUAL
78604: IFTRUE 78608
78606: GO 78670
78608: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
78609: LD_VAR 0 1
78613: PPUSH
78614: LD_VAR 0 2
78618: PPUSH
78619: LD_VAR 0 3
78623: PPUSH
78624: LD_VAR 0 4
78628: PPUSH
78629: LD_VAR 0 5
78633: PPUSH
78634: LD_VAR 0 6
78638: PPUSH
78639: LD_VAR 0 7
78643: PPUSH
78644: LD_VAR 0 8
78648: PPUSH
78649: LD_VAR 0 9
78653: PPUSH
78654: LD_VAR 0 10
78658: PPUSH
78659: LD_VAR 0 11
78663: PPUSH
78664: CALL 31611 0 11
78668: GO 78671
78670: POP
// end ;
78671: PPOPN 11
78673: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
78674: LD_VAR 0 1
78678: PPUSH
78679: LD_VAR 0 2
78683: PPUSH
78684: LD_VAR 0 3
78688: PPUSH
78689: LD_VAR 0 4
78693: PPUSH
78694: LD_VAR 0 5
78698: PPUSH
78699: CALL 33705 0 5
// end ; end_of_file
78703: PPOPN 5
78705: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
78706: LD_VAR 0 1
78710: PPUSH
78711: LD_VAR 0 2
78715: PPUSH
78716: LD_VAR 0 3
78720: PPUSH
78721: LD_VAR 0 4
78725: PPUSH
78726: LD_VAR 0 5
78730: PPUSH
78731: LD_VAR 0 6
78735: PPUSH
78736: CALL 19304 0 6
// end ;
78740: PPOPN 6
78742: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
78743: CALL 19279 0 0
// end ;
78747: PPOPN 1
78749: END
