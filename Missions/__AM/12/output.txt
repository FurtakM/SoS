// export JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ; export others11 ; export amCargo1 , amCargo2 ; export amCargo3 , amCargo4 , amCargo5 ; export amCargo6 , amCargo7 ; export Powell ; export Davidov ; export Kurt ; export KurtVeh ; export kurtStatus ; export secondPass ; export vehicleTeleported , tpCounter ; export warWithLegion ; export fakeInfo ; export askSiberite ; export teleportExplored ; export RuScientists , sciCounter ; export RuSolMinLevel , RuSolMaxLevel ; export ruDestroyedBuildings ; export russianTanks , russianTimeLapsers ; export ruAI ; export ruEscape ; export attackTactic ; export arabianMines ; export cratesSpawned ; export mission_prefix ; export eventVar1 ; export debugMode ; export westPathUsed , laserCounterDestroy , rocketBuilded ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// SetBName ( rueastdepot , ryutin ) ;
  15: LD_INT 4
  17: PPUSH
  18: LD_STRING ryutin
  20: PPUSH
  21: CALL_OW 500
// SetBName ( ruwestdepot , yegorov ) ;
  25: LD_INT 6
  27: PPUSH
  28: LD_STRING yegorov
  30: PPUSH
  31: CALL_OW 500
// RuScientists = [ ] ;
  35: LD_ADDR_EXP 34
  39: PUSH
  40: EMPTY
  41: ST_TO_ADDR
// sciCounter = 0 ;
  42: LD_ADDR_EXP 35
  46: PUSH
  47: LD_INT 0
  49: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
  50: LD_ADDR_EXP 38
  54: PUSH
  55: EMPTY
  56: ST_TO_ADDR
// russianTanks = [ ] ;
  57: LD_ADDR_EXP 39
  61: PUSH
  62: EMPTY
  63: ST_TO_ADDR
// russianTimeLapsers = [ ] ;
  64: LD_ADDR_EXP 40
  68: PUSH
  69: EMPTY
  70: ST_TO_ADDR
// arabianMines = [ ] ;
  71: LD_ADDR_EXP 44
  75: PUSH
  76: EMPTY
  77: ST_TO_ADDR
// kurtStatus = LoadVariable ( 06_KurtStatus_1 , 0 ) ;
  78: LD_ADDR_EXP 26
  82: PUSH
  83: LD_STRING 06_KurtStatus_1
  85: PPUSH
  86: LD_INT 0
  88: PPUSH
  89: CALL_OW 30
  93: ST_TO_ADDR
// secondPass = 0 ;
  94: LD_ADDR_EXP 27
  98: PUSH
  99: LD_INT 0
 101: ST_TO_ADDR
// teleportExplored = 0 ;
 102: LD_ADDR_EXP 33
 106: PUSH
 107: LD_INT 0
 109: ST_TO_ADDR
// attackTactic = 0 ;
 110: LD_ADDR_EXP 43
 114: PUSH
 115: LD_INT 0
 117: ST_TO_ADDR
// tpCounter = 0 ;
 118: LD_ADDR_EXP 29
 122: PUSH
 123: LD_INT 0
 125: ST_TO_ADDR
// askSiberite = 0 ;
 126: LD_ADDR_EXP 32
 130: PUSH
 131: LD_INT 0
 133: ST_TO_ADDR
// warWithLegion = 0 ;
 134: LD_ADDR_EXP 30
 138: PUSH
 139: LD_INT 0
 141: ST_TO_ADDR
// fakeInfo = 0 ;
 142: LD_ADDR_EXP 31
 146: PUSH
 147: LD_INT 0
 149: ST_TO_ADDR
// cratesSpawned = 0 ;
 150: LD_ADDR_EXP 45
 154: PUSH
 155: LD_INT 0
 157: ST_TO_ADDR
// ruAI = 0 ;
 158: LD_ADDR_EXP 41
 162: PUSH
 163: LD_INT 0
 165: ST_TO_ADDR
// ruEscape = 0 ;
 166: LD_ADDR_EXP 42
 170: PUSH
 171: LD_INT 0
 173: ST_TO_ADDR
// eventVar1 = 0 ;
 174: LD_ADDR_EXP 47
 178: PUSH
 179: LD_INT 0
 181: ST_TO_ADDR
// mission_prefix = 12_ ;
 182: LD_ADDR_EXP 46
 186: PUSH
 187: LD_STRING 12_
 189: ST_TO_ADDR
// debugMode = 0 ;
 190: LD_ADDR_EXP 48
 194: PUSH
 195: LD_INT 0
 197: ST_TO_ADDR
// westPathUsed := false ;
 198: LD_ADDR_EXP 49
 202: PUSH
 203: LD_INT 0
 205: ST_TO_ADDR
// laserCounterDestroy := 0 ;
 206: LD_ADDR_EXP 50
 210: PUSH
 211: LD_INT 0
 213: ST_TO_ADDR
// rocketBuilded := false ;
 214: LD_ADDR_EXP 51
 218: PUSH
 219: LD_INT 0
 221: ST_TO_ADDR
// CreateNature ;
 222: CALL 15411 0 0
// PrepareDifficulty ;
 226: CALL 12514 0 0
// PrepareVehicles ;
 230: CALL 1765 0 0
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 234: LD_INT 4
 236: PPUSH
 237: LD_INT 0
 239: PPUSH
 240: LD_INT 1
 242: PPUSH
 243: LD_INT 0
 245: PPUSH
 246: CALL 1339 0 4
// PrepareAmericanHeroes ;
 250: CALL 640 0 0
// PrepareRussianCommander ;
 254: CALL 3153 0 0
// PrepareWestBase ;
 258: CALL 3668 0 0
// PrepareEastBase ;
 262: CALL 3228 0 0
// PrepareOtherRussians ;
 266: CALL 3780 0 0
// end ;
 270: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 271: LD_EXP 48
 275: PUSH
 276: LD_INT 1
 278: EQUAL
 279: IFFALSE 585
 281: GO 283
 283: DISABLE
 284: LD_INT 0
 286: PPUSH
// begin enable ;
 287: ENABLE
// fogoff ( true ) ;
 288: LD_INT 1
 290: PPUSH
 291: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 295: LD_ADDR_VAR 0 1
 299: PUSH
 300: LD_INT 22
 302: PUSH
 303: LD_INT 1
 305: PUSH
 306: EMPTY
 307: LIST
 308: LIST
 309: PUSH
 310: LD_INT 21
 312: PUSH
 313: LD_INT 1
 315: PUSH
 316: EMPTY
 317: LIST
 318: LIST
 319: PUSH
 320: EMPTY
 321: LIST
 322: LIST
 323: PPUSH
 324: CALL_OW 69
 328: PUSH
 329: FOR_IN
 330: IFFALSE 346
// SetLives ( i , 1000 ) ;
 332: LD_VAR 0 1
 336: PPUSH
 337: LD_INT 1000
 339: PPUSH
 340: CALL_OW 234
 344: GO 329
 346: POP
 347: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 348: LD_ADDR_VAR 0 1
 352: PUSH
 353: LD_INT 22
 355: PUSH
 356: LD_INT 1
 358: PUSH
 359: EMPTY
 360: LIST
 361: LIST
 362: PUSH
 363: LD_INT 2
 365: PUSH
 366: LD_INT 30
 368: PUSH
 369: LD_INT 0
 371: PUSH
 372: EMPTY
 373: LIST
 374: LIST
 375: PUSH
 376: LD_INT 30
 378: PUSH
 379: LD_INT 1
 381: PUSH
 382: EMPTY
 383: LIST
 384: LIST
 385: PUSH
 386: EMPTY
 387: LIST
 388: LIST
 389: LIST
 390: PUSH
 391: EMPTY
 392: LIST
 393: LIST
 394: PPUSH
 395: CALL_OW 69
 399: PUSH
 400: FOR_IN
 401: IFFALSE 425
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 403: LD_VAR 0 1
 407: PPUSH
 408: CALL_OW 274
 412: PPUSH
 413: LD_INT 1
 415: PPUSH
 416: LD_INT 9999
 418: PPUSH
 419: CALL_OW 277
 423: GO 400
 425: POP
 426: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 427: LD_ADDR_VAR 0 1
 431: PUSH
 432: LD_INT 22
 434: PUSH
 435: LD_INT 1
 437: PUSH
 438: EMPTY
 439: LIST
 440: LIST
 441: PUSH
 442: LD_INT 2
 444: PUSH
 445: LD_INT 30
 447: PUSH
 448: LD_INT 0
 450: PUSH
 451: EMPTY
 452: LIST
 453: LIST
 454: PUSH
 455: LD_INT 30
 457: PUSH
 458: LD_INT 1
 460: PUSH
 461: EMPTY
 462: LIST
 463: LIST
 464: PUSH
 465: EMPTY
 466: LIST
 467: LIST
 468: LIST
 469: PUSH
 470: EMPTY
 471: LIST
 472: LIST
 473: PPUSH
 474: CALL_OW 69
 478: PUSH
 479: FOR_IN
 480: IFFALSE 504
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 482: LD_VAR 0 1
 486: PPUSH
 487: CALL_OW 274
 491: PPUSH
 492: LD_INT 2
 494: PPUSH
 495: LD_INT 9999
 497: PPUSH
 498: CALL_OW 277
 502: GO 479
 504: POP
 505: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 506: LD_ADDR_VAR 0 1
 510: PUSH
 511: LD_INT 22
 513: PUSH
 514: LD_INT 1
 516: PUSH
 517: EMPTY
 518: LIST
 519: LIST
 520: PUSH
 521: LD_INT 2
 523: PUSH
 524: LD_INT 30
 526: PUSH
 527: LD_INT 0
 529: PUSH
 530: EMPTY
 531: LIST
 532: LIST
 533: PUSH
 534: LD_INT 30
 536: PUSH
 537: LD_INT 1
 539: PUSH
 540: EMPTY
 541: LIST
 542: LIST
 543: PUSH
 544: EMPTY
 545: LIST
 546: LIST
 547: LIST
 548: PUSH
 549: EMPTY
 550: LIST
 551: LIST
 552: PPUSH
 553: CALL_OW 69
 557: PUSH
 558: FOR_IN
 559: IFFALSE 583
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 561: LD_VAR 0 1
 565: PPUSH
 566: CALL_OW 274
 570: PPUSH
 571: LD_INT 3
 573: PPUSH
 574: LD_INT 9999
 576: PPUSH
 577: CALL_OW 277
 581: GO 558
 583: POP
 584: POP
// end ;
 585: PPOPN 1
 587: END
// every 0 0$1 trigger FilterUnitsInArea ( westPathArea , [ f_side , 1 ] ) do
 588: LD_INT 25
 590: PPUSH
 591: LD_INT 22
 593: PUSH
 594: LD_INT 1
 596: PUSH
 597: EMPTY
 598: LIST
 599: LIST
 600: PPUSH
 601: CALL_OW 70
 605: IFFALSE 618
 607: GO 609
 609: DISABLE
// westPathUsed := true ;
 610: LD_ADDR_EXP 49
 614: PUSH
 615: LD_INT 1
 617: ST_TO_ADDR
 618: END
// every 0 0$1 trigger laserCounterDestroy >= 3 do
 619: LD_EXP 50
 623: PUSH
 624: LD_INT 3
 626: GREATEREQUAL
 627: IFFALSE 639
 629: GO 631
 631: DISABLE
// SetAchievement ( ACH_LASER ) ; end_of_file
 632: LD_STRING ACH_LASER
 634: PPUSH
 635: CALL_OW 543
 639: END
// export function PrepareAmericanHeroes ; var tmp , i ; begin
 640: LD_INT 0
 642: PPUSH
 643: PPUSH
 644: PPUSH
// uc_side = 1 ;
 645: LD_ADDR_OWVAR 20
 649: PUSH
 650: LD_INT 1
 652: ST_TO_ADDR
// others11 = CreateCharacterSet ( 11c_others ) union CreateCharacterSet ( 11_others ) ;
 653: LD_ADDR_EXP 14
 657: PUSH
 658: LD_STRING 11c_others
 660: PPUSH
 661: CALL_OW 31
 665: PUSH
 666: LD_STRING 11_others
 668: PPUSH
 669: CALL_OW 31
 673: UNION
 674: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true , 11_ ) ;
 675: LD_ADDR_EXP 1
 679: PUSH
 680: LD_STRING JMM
 682: PPUSH
 683: LD_INT 1
 685: PPUSH
 686: LD_STRING 11_
 688: PPUSH
 689: CALL 36872 0 3
 693: ST_TO_ADDR
// SetClass ( JMM , 1 ) ;
 694: LD_EXP 1
 698: PPUSH
 699: LD_INT 1
 701: PPUSH
 702: CALL_OW 336
// PlaceHumanInUnit ( JMM , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
 706: LD_EXP 1
 710: PPUSH
 711: LD_INT 22
 713: PUSH
 714: LD_INT 1
 716: PUSH
 717: EMPTY
 718: LIST
 719: LIST
 720: PUSH
 721: LD_INT 21
 723: PUSH
 724: LD_INT 2
 726: PUSH
 727: EMPTY
 728: LIST
 729: LIST
 730: PUSH
 731: LD_INT 58
 733: PUSH
 734: EMPTY
 735: LIST
 736: PUSH
 737: EMPTY
 738: LIST
 739: LIST
 740: LIST
 741: PPUSH
 742: CALL_OW 69
 746: PUSH
 747: LD_INT 1
 749: ARRAY
 750: PPUSH
 751: CALL_OW 52
// if TestCharacters ( 11_Lisa ) = true then
 755: LD_STRING 11_Lisa
 757: PPUSH
 758: CALL_OW 28
 762: PUSH
 763: LD_INT 1
 765: EQUAL
 766: IFFALSE 816
// begin Lisa = PrepareUnit ( Lisa , true , 11_ ) ;
 768: LD_ADDR_EXP 2
 772: PUSH
 773: LD_STRING Lisa
 775: PPUSH
 776: LD_INT 1
 778: PPUSH
 779: LD_STRING 11_
 781: PPUSH
 782: CALL 36872 0 3
 786: ST_TO_ADDR
// SetClass ( Lisa , 1 ) ;
 787: LD_EXP 2
 791: PPUSH
 792: LD_INT 1
 794: PPUSH
 795: CALL_OW 336
// PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 799: LD_EXP 2
 803: PPUSH
 804: LD_INT 4
 806: PPUSH
 807: LD_INT 0
 809: PPUSH
 810: CALL_OW 49
// end else
 814: GO 832
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 816: LD_INT 4
 818: PPUSH
 819: LD_INT 0
 821: PPUSH
 822: LD_INT 1
 824: PPUSH
 825: LD_INT 0
 827: PPUSH
 828: CALL 1339 0 4
// end ; if TestCharacters ( 11_Donaldson ) = true then
 832: LD_STRING 11_Donaldson
 834: PPUSH
 835: CALL_OW 28
 839: PUSH
 840: LD_INT 1
 842: EQUAL
 843: IFFALSE 893
// begin Donaldson = PrepareUnit ( Donaldson , true , 11_ ) ;
 845: LD_ADDR_EXP 3
 849: PUSH
 850: LD_STRING Donaldson
 852: PPUSH
 853: LD_INT 1
 855: PPUSH
 856: LD_STRING 11_
 858: PPUSH
 859: CALL 36872 0 3
 863: ST_TO_ADDR
// SetClass ( Donaldson , 1 ) ;
 864: LD_EXP 3
 868: PPUSH
 869: LD_INT 1
 871: PPUSH
 872: CALL_OW 336
// PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
 876: LD_EXP 3
 880: PPUSH
 881: LD_INT 4
 883: PPUSH
 884: LD_INT 0
 886: PPUSH
 887: CALL_OW 49
// end else
 891: GO 909
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 893: LD_INT 4
 895: PPUSH
 896: LD_INT 0
 898: PPUSH
 899: LD_INT 1
 901: PPUSH
 902: LD_INT 0
 904: PPUSH
 905: CALL 1339 0 4
// end ; if TestCharacters ( 11_Cyrus ) = true then
 909: LD_STRING 11_Cyrus
 911: PPUSH
 912: CALL_OW 28
 916: PUSH
 917: LD_INT 1
 919: EQUAL
 920: IFFALSE 970
// begin Cyrus = PrepareUnit ( Cyrus , true , 11_ ) ;
 922: LD_ADDR_EXP 5
 926: PUSH
 927: LD_STRING Cyrus
 929: PPUSH
 930: LD_INT 1
 932: PPUSH
 933: LD_STRING 11_
 935: PPUSH
 936: CALL 36872 0 3
 940: ST_TO_ADDR
// SetClass ( Cyrus , 1 ) ;
 941: LD_EXP 5
 945: PPUSH
 946: LD_INT 1
 948: PPUSH
 949: CALL_OW 336
// PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
 953: LD_EXP 5
 957: PPUSH
 958: LD_INT 4
 960: PPUSH
 961: LD_INT 0
 963: PPUSH
 964: CALL_OW 49
// end else
 968: GO 986
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 970: LD_INT 4
 972: PPUSH
 973: LD_INT 0
 975: PPUSH
 976: LD_INT 1
 978: PPUSH
 979: LD_INT 0
 981: PPUSH
 982: CALL 1339 0 4
// end ; if TestCharacters ( 11_Denis ) = true then
 986: LD_STRING 11_Denis
 988: PPUSH
 989: CALL_OW 28
 993: PUSH
 994: LD_INT 1
 996: EQUAL
 997: IFFALSE 1047
// begin Denis = PrepareUnit ( Denis , true , 11_ ) ;
 999: LD_ADDR_EXP 6
1003: PUSH
1004: LD_STRING Denis
1006: PPUSH
1007: LD_INT 1
1009: PPUSH
1010: LD_STRING 11_
1012: PPUSH
1013: CALL 36872 0 3
1017: ST_TO_ADDR
// SetClass ( Denis , 4 ) ;
1018: LD_EXP 6
1022: PPUSH
1023: LD_INT 4
1025: PPUSH
1026: CALL_OW 336
// PlaceUnitArea ( Denis , PlayerSpawn , false ) ;
1030: LD_EXP 6
1034: PPUSH
1035: LD_INT 4
1037: PPUSH
1038: LD_INT 0
1040: PPUSH
1041: CALL_OW 49
// end else
1045: GO 1063
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1047: LD_INT 4
1049: PPUSH
1050: LD_INT 0
1052: PPUSH
1053: LD_INT 1
1055: PPUSH
1056: LD_INT 0
1058: PPUSH
1059: CALL 1339 0 4
// end ; if TestCharacters ( 11_Frank ) = true then
1063: LD_STRING 11_Frank
1065: PPUSH
1066: CALL_OW 28
1070: PUSH
1071: LD_INT 1
1073: EQUAL
1074: IFFALSE 1124
// begin Frank = PrepareUnit ( Frank , true , 11_ ) ;
1076: LD_ADDR_EXP 12
1080: PUSH
1081: LD_STRING Frank
1083: PPUSH
1084: LD_INT 1
1086: PPUSH
1087: LD_STRING 11_
1089: PPUSH
1090: CALL 36872 0 3
1094: ST_TO_ADDR
// SetClass ( Frank , 1 ) ;
1095: LD_EXP 12
1099: PPUSH
1100: LD_INT 1
1102: PPUSH
1103: CALL_OW 336
// PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
1107: LD_EXP 12
1111: PPUSH
1112: LD_INT 4
1114: PPUSH
1115: LD_INT 0
1117: PPUSH
1118: CALL_OW 49
// end else
1122: GO 1140
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1124: LD_INT 4
1126: PPUSH
1127: LD_INT 0
1129: PPUSH
1130: LD_INT 1
1132: PPUSH
1133: LD_INT 0
1135: PPUSH
1136: CALL 1339 0 4
// end ; if TestCharacters ( 11_Cornell ) = true then
1140: LD_STRING 11_Cornell
1142: PPUSH
1143: CALL_OW 28
1147: PUSH
1148: LD_INT 1
1150: EQUAL
1151: IFFALSE 1201
// begin Cornel = PrepareUnit ( Cornell , true , 11_ ) ;
1153: LD_ADDR_EXP 10
1157: PUSH
1158: LD_STRING Cornell
1160: PPUSH
1161: LD_INT 1
1163: PPUSH
1164: LD_STRING 11_
1166: PPUSH
1167: CALL 36872 0 3
1171: ST_TO_ADDR
// SetClass ( Cornel , 1 ) ;
1172: LD_EXP 10
1176: PPUSH
1177: LD_INT 1
1179: PPUSH
1180: CALL_OW 336
// PlaceUnitArea ( Cornel , PlayerSpawn , false ) ;
1184: LD_EXP 10
1188: PPUSH
1189: LD_INT 4
1191: PPUSH
1192: LD_INT 0
1194: PPUSH
1195: CALL_OW 49
// end else
1199: GO 1217
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1201: LD_INT 4
1203: PPUSH
1204: LD_INT 0
1206: PPUSH
1207: LD_INT 1
1209: PPUSH
1210: LD_INT 0
1212: PPUSH
1213: CALL 1339 0 4
// end ; tmp := UnitFilter ( others11 , [ f_sex , 1 ] ) ;
1217: LD_ADDR_VAR 0 2
1221: PUSH
1222: LD_EXP 14
1226: PPUSH
1227: LD_INT 26
1229: PUSH
1230: LD_INT 1
1232: PUSH
1233: EMPTY
1234: LIST
1235: LIST
1236: PPUSH
1237: CALL_OW 72
1241: ST_TO_ADDR
// if not tmp then
1242: LD_VAR 0 2
1246: NOT
1247: IFFALSE 1276
// begin PrepareSoldier ( sex_male , 8 ) ;
1249: LD_INT 1
1251: PPUSH
1252: LD_INT 8
1254: PPUSH
1255: CALL_OW 381
// PlaceUnitArea ( CreateHuman , PlayerSpawn , false ) ;
1259: CALL_OW 44
1263: PPUSH
1264: LD_INT 4
1266: PPUSH
1267: LD_INT 0
1269: PPUSH
1270: CALL_OW 49
// end else
1274: GO 1315
// begin PlaceUnitArea ( tmp [ 1 ] , PlayerSpawn , false ) ;
1276: LD_VAR 0 2
1280: PUSH
1281: LD_INT 1
1283: ARRAY
1284: PPUSH
1285: LD_INT 4
1287: PPUSH
1288: LD_INT 0
1290: PPUSH
1291: CALL_OW 49
// others11 := others11 diff tmp [ 1 ] ;
1295: LD_ADDR_EXP 14
1299: PUSH
1300: LD_EXP 14
1304: PUSH
1305: LD_VAR 0 2
1309: PUSH
1310: LD_INT 1
1312: ARRAY
1313: DIFF
1314: ST_TO_ADDR
// end ; Powell = PrepareUnit ( Powell , false ,  ) ;
1315: LD_ADDR_EXP 22
1319: PUSH
1320: LD_STRING Powell
1322: PPUSH
1323: LD_INT 0
1325: PPUSH
1326: LD_STRING 
1328: PPUSH
1329: CALL 36872 0 3
1333: ST_TO_ADDR
// end ;
1334: LD_VAR 0 1
1338: RET
// export function PrepareAmericansRandom ( area , veh , spawnMode , mech ) ; var i , un , tmp , mecha ; begin
1339: LD_INT 0
1341: PPUSH
1342: PPUSH
1343: PPUSH
1344: PPUSH
1345: PPUSH
// if mech = 1 then
1346: LD_VAR 0 4
1350: PUSH
1351: LD_INT 1
1353: EQUAL
1354: IFFALSE 1591
// begin if others11 > 0 then
1356: LD_EXP 14
1360: PUSH
1361: LD_INT 0
1363: GREATER
1364: IFFALSE 1531
// begin for i := 1 to others11 - 1 do
1366: LD_ADDR_VAR 0 6
1370: PUSH
1371: DOUBLE
1372: LD_INT 1
1374: DEC
1375: ST_TO_ADDR
1376: LD_EXP 14
1380: PUSH
1381: LD_INT 1
1383: MINUS
1384: PUSH
1385: FOR_TO
1386: IFFALSE 1468
// begin if GetSkill ( others11 [ i ] , 3 ) < GetSkill ( others11 [ i + 1 ] , 3 ) then
1388: LD_EXP 14
1392: PUSH
1393: LD_VAR 0 6
1397: ARRAY
1398: PPUSH
1399: LD_INT 3
1401: PPUSH
1402: CALL_OW 259
1406: PUSH
1407: LD_EXP 14
1411: PUSH
1412: LD_VAR 0 6
1416: PUSH
1417: LD_INT 1
1419: PLUS
1420: ARRAY
1421: PPUSH
1422: LD_INT 3
1424: PPUSH
1425: CALL_OW 259
1429: LESS
1430: IFFALSE 1466
// begin mecha = others11 [ i + 1 ] ;
1432: LD_ADDR_VAR 0 9
1436: PUSH
1437: LD_EXP 14
1441: PUSH
1442: LD_VAR 0 6
1446: PUSH
1447: LD_INT 1
1449: PLUS
1450: ARRAY
1451: ST_TO_ADDR
// SetClass ( mecha , 3 ) ;
1452: LD_VAR 0 9
1456: PPUSH
1457: LD_INT 3
1459: PPUSH
1460: CALL_OW 336
// break ;
1464: GO 1468
// end ; end ;
1466: GO 1385
1468: POP
1469: POP
// if spawnMode = 1 then
1470: LD_VAR 0 3
1474: PUSH
1475: LD_INT 1
1477: EQUAL
1478: IFFALSE 1499
// PlaceUnitArea ( mecha , area , false ) else
1480: LD_VAR 0 9
1484: PPUSH
1485: LD_VAR 0 1
1489: PPUSH
1490: LD_INT 0
1492: PPUSH
1493: CALL_OW 49
1497: GO 1513
// PlaceHumanInUnit ( mecha , veh ) ;
1499: LD_VAR 0 9
1503: PPUSH
1504: LD_VAR 0 2
1508: PPUSH
1509: CALL_OW 52
// others11 = others11 diff mecha ;
1513: LD_ADDR_EXP 14
1517: PUSH
1518: LD_EXP 14
1522: PUSH
1523: LD_VAR 0 9
1527: DIFF
1528: ST_TO_ADDR
// end else
1529: GO 1589
// begin hc_name =  ;
1531: LD_ADDR_OWVAR 26
1535: PUSH
1536: LD_STRING 
1538: ST_TO_ADDR
// hc_gallery =  ;
1539: LD_ADDR_OWVAR 33
1543: PUSH
1544: LD_STRING 
1546: ST_TO_ADDR
// PrepareMechanic ( false , rand ( 7 , 9 ) ) ;
1547: LD_INT 0
1549: PPUSH
1550: LD_INT 7
1552: PPUSH
1553: LD_INT 9
1555: PPUSH
1556: CALL_OW 12
1560: PPUSH
1561: CALL_OW 383
// un = CreateHuman ;
1565: LD_ADDR_VAR 0 7
1569: PUSH
1570: CALL_OW 44
1574: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1575: LD_VAR 0 7
1579: PPUSH
1580: LD_VAR 0 2
1584: PPUSH
1585: CALL_OW 52
// end ; end else
1589: GO 1760
// begin if others11 > 0 then
1591: LD_EXP 14
1595: PUSH
1596: LD_INT 0
1598: GREATER
1599: IFFALSE 1672
// begin if spawnMode = 1 then
1601: LD_VAR 0 3
1605: PUSH
1606: LD_INT 1
1608: EQUAL
1609: IFFALSE 1634
// PlaceUnitArea ( others11 [ 1 ] , area , false ) else
1611: LD_EXP 14
1615: PUSH
1616: LD_INT 1
1618: ARRAY
1619: PPUSH
1620: LD_VAR 0 1
1624: PPUSH
1625: LD_INT 0
1627: PPUSH
1628: CALL_OW 49
1632: GO 1652
// PlaceHumanInUnit ( others11 [ 1 ] , veh ) ;
1634: LD_EXP 14
1638: PUSH
1639: LD_INT 1
1641: ARRAY
1642: PPUSH
1643: LD_VAR 0 2
1647: PPUSH
1648: CALL_OW 52
// others11 = Delete ( others11 , 1 ) ;
1652: LD_ADDR_EXP 14
1656: PUSH
1657: LD_EXP 14
1661: PPUSH
1662: LD_INT 1
1664: PPUSH
1665: CALL_OW 3
1669: ST_TO_ADDR
// end else
1670: GO 1760
// begin hc_name =  ;
1672: LD_ADDR_OWVAR 26
1676: PUSH
1677: LD_STRING 
1679: ST_TO_ADDR
// hc_gallery =  ;
1680: LD_ADDR_OWVAR 33
1684: PUSH
1685: LD_STRING 
1687: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] , rand ( 7 , 9 ) ) ;
1688: LD_INT 0
1690: PPUSH
1691: LD_INT 1
1693: PUSH
1694: LD_INT 2
1696: PUSH
1697: LD_INT 3
1699: PUSH
1700: LD_INT 4
1702: PUSH
1703: EMPTY
1704: LIST
1705: LIST
1706: LIST
1707: LIST
1708: PUSH
1709: LD_INT 1
1711: PPUSH
1712: LD_INT 4
1714: PPUSH
1715: CALL_OW 12
1719: ARRAY
1720: PPUSH
1721: LD_INT 7
1723: PPUSH
1724: LD_INT 9
1726: PPUSH
1727: CALL_OW 12
1731: PPUSH
1732: CALL_OW 380
// un = CreateHuman ;
1736: LD_ADDR_VAR 0 7
1740: PUSH
1741: CALL_OW 44
1745: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1746: LD_VAR 0 7
1750: PPUSH
1751: LD_VAR 0 2
1755: PPUSH
1756: CALL_OW 52
// end ; end ; end ;
1760: LD_VAR 0 5
1764: RET
// export function PrepareVehicles ; var veh ; begin
1765: LD_INT 0
1767: PPUSH
1768: PPUSH
// uc_side = 1 ;
1769: LD_ADDR_OWVAR 20
1773: PUSH
1774: LD_INT 1
1776: ST_TO_ADDR
// uc_nation = 1 ;
1777: LD_ADDR_OWVAR 21
1781: PUSH
1782: LD_INT 1
1784: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
1785: LD_ADDR_OWVAR 37
1789: PUSH
1790: LD_INT 3
1792: ST_TO_ADDR
// vc_engine = 3 ;
1793: LD_ADDR_OWVAR 39
1797: PUSH
1798: LD_INT 3
1800: ST_TO_ADDR
// vc_control = 3 ;
1801: LD_ADDR_OWVAR 38
1805: PUSH
1806: LD_INT 3
1808: ST_TO_ADDR
// vc_weapon = us_gatling_gun ;
1809: LD_ADDR_OWVAR 40
1813: PUSH
1814: LD_INT 4
1816: ST_TO_ADDR
// veh = CreateVehicle ;
1817: LD_ADDR_VAR 0 2
1821: PUSH
1822: CALL_OW 45
1826: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1827: LD_VAR 0 2
1831: PPUSH
1832: LD_INT 4
1834: PPUSH
1835: LD_INT 0
1837: PPUSH
1838: CALL_OW 49
// vc_weapon = us_double_gun ;
1842: LD_ADDR_OWVAR 40
1846: PUSH
1847: LD_INT 5
1849: ST_TO_ADDR
// vc_control = 1 ;
1850: LD_ADDR_OWVAR 38
1854: PUSH
1855: LD_INT 1
1857: ST_TO_ADDR
// veh = CreateVehicle ;
1858: LD_ADDR_VAR 0 2
1862: PUSH
1863: CALL_OW 45
1867: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1868: LD_VAR 0 2
1872: PPUSH
1873: LD_INT 4
1875: PPUSH
1876: LD_INT 0
1878: PPUSH
1879: CALL_OW 49
// vc_weapon = us_light_gun ;
1883: LD_ADDR_OWVAR 40
1887: PUSH
1888: LD_INT 3
1890: ST_TO_ADDR
// vc_control = 3 ;
1891: LD_ADDR_OWVAR 38
1895: PUSH
1896: LD_INT 3
1898: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
1899: LD_ADDR_OWVAR 37
1903: PUSH
1904: LD_INT 2
1906: ST_TO_ADDR
// veh = CreateVehicle ;
1907: LD_ADDR_VAR 0 2
1911: PUSH
1912: CALL_OW 45
1916: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1917: LD_VAR 0 2
1921: PPUSH
1922: LD_INT 4
1924: PPUSH
1925: LD_INT 0
1927: PPUSH
1928: CALL_OW 49
// vc_weapon = us_gatling_gun ;
1932: LD_ADDR_OWVAR 40
1936: PUSH
1937: LD_INT 4
1939: ST_TO_ADDR
// veh = CreateVehicle ;
1940: LD_ADDR_VAR 0 2
1944: PUSH
1945: CALL_OW 45
1949: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1950: LD_VAR 0 2
1954: PPUSH
1955: LD_INT 4
1957: PPUSH
1958: LD_INT 0
1960: PPUSH
1961: CALL_OW 49
// end ;
1965: LD_VAR 0 1
1969: RET
// export function PowellSupport1 ; var veh , un ; begin
1970: LD_INT 0
1972: PPUSH
1973: PPUSH
1974: PPUSH
// uc_side = 1 ;
1975: LD_ADDR_OWVAR 20
1979: PUSH
1980: LD_INT 1
1982: ST_TO_ADDR
// uc_nation = 1 ;
1983: LD_ADDR_OWVAR 21
1987: PUSH
1988: LD_INT 1
1990: ST_TO_ADDR
// if TestCharacters ( 11_Brown ) = true then
1991: LD_STRING 11_Brown
1993: PPUSH
1994: CALL_OW 28
1998: PUSH
1999: LD_INT 1
2001: EQUAL
2002: IFFALSE 2052
// begin Brown = PrepareUnit ( Brown , true , 11_ ) ;
2004: LD_ADDR_EXP 7
2008: PUSH
2009: LD_STRING Brown
2011: PPUSH
2012: LD_INT 1
2014: PPUSH
2015: LD_STRING 11_
2017: PPUSH
2018: CALL 36872 0 3
2022: ST_TO_ADDR
// SetClass ( Brown , 2 ) ;
2023: LD_EXP 7
2027: PPUSH
2028: LD_INT 2
2030: PPUSH
2031: CALL_OW 336
// PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
2035: LD_EXP 7
2039: PPUSH
2040: LD_INT 4
2042: PPUSH
2043: LD_INT 0
2045: PPUSH
2046: CALL_OW 49
// end else
2050: GO 2068
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2052: LD_INT 4
2054: PPUSH
2055: LD_INT 0
2057: PPUSH
2058: LD_INT 1
2060: PPUSH
2061: LD_INT 0
2063: PPUSH
2064: CALL 1339 0 4
// end ; if TestCharacters ( 11_Gary ) = true then
2068: LD_STRING 11_Gary
2070: PPUSH
2071: CALL_OW 28
2075: PUSH
2076: LD_INT 1
2078: EQUAL
2079: IFFALSE 2129
// begin Gary = PrepareUnit ( Gary , true , 11_ ) ;
2081: LD_ADDR_EXP 11
2085: PUSH
2086: LD_STRING Gary
2088: PPUSH
2089: LD_INT 1
2091: PPUSH
2092: LD_STRING 11_
2094: PPUSH
2095: CALL 36872 0 3
2099: ST_TO_ADDR
// SetClass ( Gary , 2 ) ;
2100: LD_EXP 11
2104: PPUSH
2105: LD_INT 2
2107: PPUSH
2108: CALL_OW 336
// PlaceUnitArea ( Gary , PlayerSpawn , false ) ;
2112: LD_EXP 11
2116: PPUSH
2117: LD_INT 4
2119: PPUSH
2120: LD_INT 0
2122: PPUSH
2123: CALL_OW 49
// end else
2127: GO 2145
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2129: LD_INT 4
2131: PPUSH
2132: LD_INT 0
2134: PPUSH
2135: LD_INT 1
2137: PPUSH
2138: LD_INT 0
2140: PPUSH
2141: CALL 1339 0 4
// end ; vc_chassis = us_medium_tracked ;
2145: LD_ADDR_OWVAR 37
2149: PUSH
2150: LD_INT 3
2152: ST_TO_ADDR
// vc_engine = 3 ;
2153: LD_ADDR_OWVAR 39
2157: PUSH
2158: LD_INT 3
2160: ST_TO_ADDR
// vc_control = 1 ;
2161: LD_ADDR_OWVAR 38
2165: PUSH
2166: LD_INT 1
2168: ST_TO_ADDR
// vc_weapon = us_crane ;
2169: LD_ADDR_OWVAR 40
2173: PUSH
2174: LD_INT 13
2176: ST_TO_ADDR
// veh = CreateVehicle ;
2177: LD_ADDR_VAR 0 2
2181: PUSH
2182: CALL_OW 45
2186: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2187: LD_VAR 0 2
2191: PPUSH
2192: LD_INT 4
2194: PPUSH
2195: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2199: LD_VAR 0 2
2203: PPUSH
2204: LD_INT 4
2206: PPUSH
2207: LD_INT 0
2209: PPUSH
2210: CALL_OW 49
// PrepareAmericansRandom ( PlayerSpawn , veh , 2 , 1 ) ;
2214: LD_INT 4
2216: PPUSH
2217: LD_VAR 0 2
2221: PPUSH
2222: LD_INT 2
2224: PPUSH
2225: LD_INT 1
2227: PPUSH
2228: CALL 1339 0 4
// vc_weapon = 9 ;
2232: LD_ADDR_OWVAR 40
2236: PUSH
2237: LD_INT 9
2239: ST_TO_ADDR
// veh = CreateVehicle ;
2240: LD_ADDR_VAR 0 2
2244: PUSH
2245: CALL_OW 45
2249: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2250: LD_VAR 0 2
2254: PPUSH
2255: LD_INT 4
2257: PPUSH
2258: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2262: LD_VAR 0 2
2266: PPUSH
2267: LD_INT 4
2269: PPUSH
2270: LD_INT 0
2272: PPUSH
2273: CALL_OW 49
// PrepareAmericansRandom ( PlayerSpawn , veh , 2 , 1 ) ;
2277: LD_INT 4
2279: PPUSH
2280: LD_VAR 0 2
2284: PPUSH
2285: LD_INT 2
2287: PPUSH
2288: LD_INT 1
2290: PPUSH
2291: CALL 1339 0 4
// vc_control = 3 ;
2295: LD_ADDR_OWVAR 38
2299: PUSH
2300: LD_INT 3
2302: ST_TO_ADDR
// vc_weapon = us_cargo_bay ;
2303: LD_ADDR_OWVAR 40
2307: PUSH
2308: LD_INT 12
2310: ST_TO_ADDR
// amCargo1 = CreateVehicle ;
2311: LD_ADDR_EXP 15
2315: PUSH
2316: CALL_OW 45
2320: ST_TO_ADDR
// amCargo2 = CreateVehicle ;
2321: LD_ADDR_EXP 16
2325: PUSH
2326: CALL_OW 45
2330: ST_TO_ADDR
// SetDir ( amCargo1 , 4 ) ;
2331: LD_EXP 15
2335: PPUSH
2336: LD_INT 4
2338: PPUSH
2339: CALL_OW 233
// SetDir ( amCargo2 , 4 ) ;
2343: LD_EXP 16
2347: PPUSH
2348: LD_INT 4
2350: PPUSH
2351: CALL_OW 233
// PlaceUnitArea ( amCargo1 , PlayerSpawn , false ) ;
2355: LD_EXP 15
2359: PPUSH
2360: LD_INT 4
2362: PPUSH
2363: LD_INT 0
2365: PPUSH
2366: CALL_OW 49
// PlaceUnitArea ( amCargo2 , PlayerSpawn , false ) ;
2370: LD_EXP 16
2374: PPUSH
2375: LD_INT 4
2377: PPUSH
2378: LD_INT 0
2380: PPUSH
2381: CALL_OW 49
// AddCargo ( amCargo1 , 3 , 100 ) ;
2385: LD_EXP 15
2389: PPUSH
2390: LD_INT 3
2392: PPUSH
2393: LD_INT 100
2395: PPUSH
2396: CALL_OW 291
// AddCargo ( amCargo2 , 1 , 80 ) ;
2400: LD_EXP 16
2404: PPUSH
2405: LD_INT 1
2407: PPUSH
2408: LD_INT 80
2410: PPUSH
2411: CALL_OW 291
// AddCargo ( amCargo2 , 3 , 20 ) ;
2415: LD_EXP 16
2419: PPUSH
2420: LD_INT 3
2422: PPUSH
2423: LD_INT 20
2425: PPUSH
2426: CALL_OW 291
// end ;
2430: LD_VAR 0 1
2434: RET
// export function PowellSupport2 ; var veh , un ; begin
2435: LD_INT 0
2437: PPUSH
2438: PPUSH
2439: PPUSH
// uc_side = 1 ;
2440: LD_ADDR_OWVAR 20
2444: PUSH
2445: LD_INT 1
2447: ST_TO_ADDR
// uc_nation = 1 ;
2448: LD_ADDR_OWVAR 21
2452: PUSH
2453: LD_INT 1
2455: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
2456: LD_ADDR_OWVAR 37
2460: PUSH
2461: LD_INT 2
2463: ST_TO_ADDR
// vc_engine = 3 ;
2464: LD_ADDR_OWVAR 39
2468: PUSH
2469: LD_INT 3
2471: ST_TO_ADDR
// vc_control = 3 ;
2472: LD_ADDR_OWVAR 38
2476: PUSH
2477: LD_INT 3
2479: ST_TO_ADDR
// vc_weapon = us_light_gun ;
2480: LD_ADDR_OWVAR 40
2484: PUSH
2485: LD_INT 3
2487: ST_TO_ADDR
// veh = CreateVehicle ;
2488: LD_ADDR_VAR 0 2
2492: PUSH
2493: CALL_OW 45
2497: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2498: LD_VAR 0 2
2502: PPUSH
2503: LD_INT 4
2505: PPUSH
2506: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2510: LD_VAR 0 2
2514: PPUSH
2515: LD_INT 4
2517: PPUSH
2518: LD_INT 0
2520: PPUSH
2521: CALL_OW 49
// vc_control = 1 ;
2525: LD_ADDR_OWVAR 38
2529: PUSH
2530: LD_INT 1
2532: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
2533: LD_ADDR_OWVAR 37
2537: PUSH
2538: LD_INT 2
2540: ST_TO_ADDR
// vc_weapon = us_double_gun ;
2541: LD_ADDR_OWVAR 40
2545: PUSH
2546: LD_INT 5
2548: ST_TO_ADDR
// veh = CreateVehicle ;
2549: LD_ADDR_VAR 0 2
2553: PUSH
2554: CALL_OW 45
2558: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2559: LD_VAR 0 2
2563: PPUSH
2564: LD_INT 4
2566: PPUSH
2567: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2571: LD_VAR 0 2
2575: PPUSH
2576: LD_INT 4
2578: PPUSH
2579: LD_INT 0
2581: PPUSH
2582: CALL_OW 49
// if TestCharacters ( 11_Bobby ) = true then
2586: LD_STRING 11_Bobby
2588: PPUSH
2589: CALL_OW 28
2593: PUSH
2594: LD_INT 1
2596: EQUAL
2597: IFFALSE 2646
// begin Bobby = PrepareUnit ( Bobby , true , 11_ ) ;
2599: LD_ADDR_EXP 4
2603: PUSH
2604: LD_STRING Bobby
2606: PPUSH
2607: LD_INT 1
2609: PPUSH
2610: LD_STRING 11_
2612: PPUSH
2613: CALL 36872 0 3
2617: ST_TO_ADDR
// SetClass ( Bobby , 3 ) ;
2618: LD_EXP 4
2622: PPUSH
2623: LD_INT 3
2625: PPUSH
2626: CALL_OW 336
// PlaceHumanInUnit ( Bobby , veh ) ;
2630: LD_EXP 4
2634: PPUSH
2635: LD_VAR 0 2
2639: PPUSH
2640: CALL_OW 52
// end else
2644: GO 2664
// begin PrepareAmericansRandom ( 0 , veh , 2 , 0 ) ;
2646: LD_INT 0
2648: PPUSH
2649: LD_VAR 0 2
2653: PPUSH
2654: LD_INT 2
2656: PPUSH
2657: LD_INT 0
2659: PPUSH
2660: CALL 1339 0 4
// end ; if TestCharacters ( 11_Houten ) = true then
2664: LD_STRING 11_Houten
2666: PPUSH
2667: CALL_OW 28
2671: PUSH
2672: LD_INT 1
2674: EQUAL
2675: IFFALSE 2725
// begin Houten = PrepareUnit ( Houten , true , 11_ ) ;
2677: LD_ADDR_EXP 9
2681: PUSH
2682: LD_STRING Houten
2684: PPUSH
2685: LD_INT 1
2687: PPUSH
2688: LD_STRING 11_
2690: PPUSH
2691: CALL 36872 0 3
2695: ST_TO_ADDR
// SetClass ( Houten , 1 ) ;
2696: LD_EXP 9
2700: PPUSH
2701: LD_INT 1
2703: PPUSH
2704: CALL_OW 336
// PlaceUnitArea ( Houten , PlayerSpawn , false ) ;
2708: LD_EXP 9
2712: PPUSH
2713: LD_INT 4
2715: PPUSH
2716: LD_INT 0
2718: PPUSH
2719: CALL_OW 49
// end else
2723: GO 2741
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2725: LD_INT 4
2727: PPUSH
2728: LD_INT 0
2730: PPUSH
2731: LD_INT 1
2733: PPUSH
2734: LD_INT 0
2736: PPUSH
2737: CALL 1339 0 4
// end ; vc_control = 3 ;
2741: LD_ADDR_OWVAR 38
2745: PUSH
2746: LD_INT 3
2748: ST_TO_ADDR
// vc_weapon = us_cargo_bay ;
2749: LD_ADDR_OWVAR 40
2753: PUSH
2754: LD_INT 12
2756: ST_TO_ADDR
// amCargo3 = CreateVehicle ;
2757: LD_ADDR_EXP 17
2761: PUSH
2762: CALL_OW 45
2766: ST_TO_ADDR
// SetDir ( amCargo3 , 4 ) ;
2767: LD_EXP 17
2771: PPUSH
2772: LD_INT 4
2774: PPUSH
2775: CALL_OW 233
// amCargo4 = CreateVehicle ;
2779: LD_ADDR_EXP 18
2783: PUSH
2784: CALL_OW 45
2788: ST_TO_ADDR
// SetDir ( amCargo4 , 4 ) ;
2789: LD_EXP 18
2793: PPUSH
2794: LD_INT 4
2796: PPUSH
2797: CALL_OW 233
// amCargo5 = CreateVehicle ;
2801: LD_ADDR_EXP 19
2805: PUSH
2806: CALL_OW 45
2810: ST_TO_ADDR
// SetDir ( amCargo5 , 4 ) ;
2811: LD_EXP 19
2815: PPUSH
2816: LD_INT 4
2818: PPUSH
2819: CALL_OW 233
// PlaceUnitArea ( amCargo3 , PlayerSpawn , false ) ;
2823: LD_EXP 17
2827: PPUSH
2828: LD_INT 4
2830: PPUSH
2831: LD_INT 0
2833: PPUSH
2834: CALL_OW 49
// PlaceUnitArea ( amCargo4 , PlayerSpawn , false ) ;
2838: LD_EXP 18
2842: PPUSH
2843: LD_INT 4
2845: PPUSH
2846: LD_INT 0
2848: PPUSH
2849: CALL_OW 49
// PlaceUnitArea ( amCargo5 , PlayerSpawn , false ) ;
2853: LD_EXP 19
2857: PPUSH
2858: LD_INT 4
2860: PPUSH
2861: LD_INT 0
2863: PPUSH
2864: CALL_OW 49
// if kurtStatus > 0 then
2868: LD_EXP 26
2872: PUSH
2873: LD_INT 0
2875: GREATER
2876: IFFALSE 2925
// begin AddCargo ( amCargo3 , 1 , 100 ) ;
2878: LD_EXP 17
2882: PPUSH
2883: LD_INT 1
2885: PPUSH
2886: LD_INT 100
2888: PPUSH
2889: CALL_OW 291
// AddCargo ( amCargo4 , 1 , 100 ) ;
2893: LD_EXP 18
2897: PPUSH
2898: LD_INT 1
2900: PPUSH
2901: LD_INT 100
2903: PPUSH
2904: CALL_OW 291
// AddCargo ( amCargo5 , 3 , 80 ) ;
2908: LD_EXP 19
2912: PPUSH
2913: LD_INT 3
2915: PPUSH
2916: LD_INT 80
2918: PPUSH
2919: CALL_OW 291
// end else
2923: GO 2970
// begin AddCargo ( amCargo3 , 1 , 100 ) ;
2925: LD_EXP 17
2929: PPUSH
2930: LD_INT 1
2932: PPUSH
2933: LD_INT 100
2935: PPUSH
2936: CALL_OW 291
// AddCargo ( amCargo4 , 3 , 60 ) ;
2940: LD_EXP 18
2944: PPUSH
2945: LD_INT 3
2947: PPUSH
2948: LD_INT 60
2950: PPUSH
2951: CALL_OW 291
// AddCargo ( amCargo5 , 3 , 100 ) ;
2955: LD_EXP 19
2959: PPUSH
2960: LD_INT 3
2962: PPUSH
2963: LD_INT 100
2965: PPUSH
2966: CALL_OW 291
// end ; end ;
2970: LD_VAR 0 1
2974: RET
// export function PowellSupport3 ; var veh , un ; begin
2975: LD_INT 0
2977: PPUSH
2978: PPUSH
2979: PPUSH
// uc_side = 1 ;
2980: LD_ADDR_OWVAR 20
2984: PUSH
2985: LD_INT 1
2987: ST_TO_ADDR
// uc_nation = 1 ;
2988: LD_ADDR_OWVAR 21
2992: PUSH
2993: LD_INT 1
2995: ST_TO_ADDR
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2996: LD_INT 4
2998: PPUSH
2999: LD_INT 0
3001: PPUSH
3002: LD_INT 1
3004: PPUSH
3005: LD_INT 0
3007: PPUSH
3008: CALL 1339 0 4
// vc_chassis = us_medium_wheeled ;
3012: LD_ADDR_OWVAR 37
3016: PUSH
3017: LD_INT 2
3019: ST_TO_ADDR
// vc_engine = 3 ;
3020: LD_ADDR_OWVAR 39
3024: PUSH
3025: LD_INT 3
3027: ST_TO_ADDR
// vc_control = 3 ;
3028: LD_ADDR_OWVAR 38
3032: PUSH
3033: LD_INT 3
3035: ST_TO_ADDR
// vc_weapon = us_cargo_bay ;
3036: LD_ADDR_OWVAR 40
3040: PUSH
3041: LD_INT 12
3043: ST_TO_ADDR
// amCargo6 = CreateVehicle ;
3044: LD_ADDR_EXP 20
3048: PUSH
3049: CALL_OW 45
3053: ST_TO_ADDR
// amCargo7 = CreateVehicle ;
3054: LD_ADDR_EXP 21
3058: PUSH
3059: CALL_OW 45
3063: ST_TO_ADDR
// SetDir ( amCargo6 , 4 ) ;
3064: LD_EXP 20
3068: PPUSH
3069: LD_INT 4
3071: PPUSH
3072: CALL_OW 233
// SetDir ( amCargo7 , 4 ) ;
3076: LD_EXP 21
3080: PPUSH
3081: LD_INT 4
3083: PPUSH
3084: CALL_OW 233
// PlaceUnitArea ( amCargo6 , PlayerSpawn , false ) ;
3088: LD_EXP 20
3092: PPUSH
3093: LD_INT 4
3095: PPUSH
3096: LD_INT 0
3098: PPUSH
3099: CALL_OW 49
// PlaceUnitArea ( amCargo7 , PlayerSpawn , false ) ;
3103: LD_EXP 21
3107: PPUSH
3108: LD_INT 4
3110: PPUSH
3111: LD_INT 0
3113: PPUSH
3114: CALL_OW 49
// AddCargo ( amCargo6 , 1 , 100 ) ;
3118: LD_EXP 20
3122: PPUSH
3123: LD_INT 1
3125: PPUSH
3126: LD_INT 100
3128: PPUSH
3129: CALL_OW 291
// AddCargo ( amCargo7 , 1 , 100 ) ;
3133: LD_EXP 21
3137: PPUSH
3138: LD_INT 1
3140: PPUSH
3141: LD_INT 100
3143: PPUSH
3144: CALL_OW 291
// end ; end_of_file
3148: LD_VAR 0 1
3152: RET
// export function PrepareRussianCommander ; begin
3153: LD_INT 0
3155: PPUSH
// uc_side = 3 ;
3156: LD_ADDR_OWVAR 20
3160: PUSH
3161: LD_INT 3
3163: ST_TO_ADDR
// Davidov = PrepareUnit ( Davidov , false ,  ) ;
3164: LD_ADDR_EXP 23
3168: PUSH
3169: LD_STRING Davidov
3171: PPUSH
3172: LD_INT 0
3174: PPUSH
3175: LD_STRING 
3177: PPUSH
3178: CALL 36872 0 3
3182: ST_TO_ADDR
// PlaceHumanInUnit ( Davidov , ruheadlab ) ;
3183: LD_EXP 23
3187: PPUSH
3188: LD_INT 3
3190: PPUSH
3191: CALL_OW 52
// RuScientists = RuScientists ^ Davidov ;
3195: LD_ADDR_EXP 34
3199: PUSH
3200: LD_EXP 34
3204: PUSH
3205: LD_EXP 23
3209: ADD
3210: ST_TO_ADDR
// SetClass ( RuScientists , 4 ) ;
3211: LD_EXP 34
3215: PPUSH
3216: LD_INT 4
3218: PPUSH
3219: CALL_OW 336
// end ;
3223: LD_VAR 0 1
3227: RET
// export function PrepareEastBase ; var i , un ; begin
3228: LD_INT 0
3230: PPUSH
3231: PPUSH
3232: PPUSH
// RespawnInside ( 3 , 3 , rubar2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 1 , 3 ) ;
3233: LD_INT 3
3235: PPUSH
3236: LD_INT 3
3238: PPUSH
3239: LD_INT 121
3241: PPUSH
3242: LD_EXP 36
3246: PPUSH
3247: LD_EXP 37
3251: PPUSH
3252: CALL_OW 12
3256: PPUSH
3257: LD_INT 1
3259: PPUSH
3260: LD_INT 3
3262: PPUSH
3263: CALL 12945 0 6
// RespawnInside ( 3 , 3 , rubar2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 9 , 3 ) ;
3267: LD_INT 3
3269: PPUSH
3270: LD_INT 3
3272: PPUSH
3273: LD_INT 121
3275: PPUSH
3276: LD_EXP 36
3280: PPUSH
3281: LD_EXP 37
3285: PPUSH
3286: CALL_OW 12
3290: PPUSH
3291: LD_INT 9
3293: PPUSH
3294: LD_INT 3
3296: PPUSH
3297: CALL 12945 0 6
// RespawnInside ( 3 , 3 , rueastdepot , rand ( RuSolMinlevel , RuSolMaxLevel ) , 2 , 6 ) ;
3301: LD_INT 3
3303: PPUSH
3304: LD_INT 3
3306: PPUSH
3307: LD_INT 4
3309: PPUSH
3310: LD_EXP 36
3314: PPUSH
3315: LD_EXP 37
3319: PPUSH
3320: CALL_OW 12
3324: PPUSH
3325: LD_INT 2
3327: PPUSH
3328: LD_INT 6
3330: PPUSH
3331: CALL 12945 0 6
// RespawnInside ( 3 , 3 , rufab2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 3 , 6 ) ;
3335: LD_INT 3
3337: PPUSH
3338: LD_INT 3
3340: PPUSH
3341: LD_INT 112
3343: PPUSH
3344: LD_EXP 36
3348: PPUSH
3349: LD_EXP 37
3353: PPUSH
3354: CALL_OW 12
3358: PPUSH
3359: LD_INT 3
3361: PPUSH
3362: LD_INT 6
3364: PPUSH
3365: CALL 12945 0 6
// RespawnInside ( 3 , 3 , rulab2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3369: LD_INT 3
3371: PPUSH
3372: LD_INT 3
3374: PPUSH
3375: LD_INT 47
3377: PPUSH
3378: LD_EXP 36
3382: PPUSH
3383: LD_EXP 37
3387: PPUSH
3388: CALL_OW 12
3392: PPUSH
3393: LD_INT 4
3395: PPUSH
3396: LD_INT 6
3398: PPUSH
3399: CALL 12945 0 6
// RespawnInside ( 3 , 3 , rulab3 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3403: LD_INT 3
3405: PPUSH
3406: LD_INT 3
3408: PPUSH
3409: LD_INT 129
3411: PPUSH
3412: LD_EXP 36
3416: PPUSH
3417: LD_EXP 37
3421: PPUSH
3422: CALL_OW 12
3426: PPUSH
3427: LD_INT 4
3429: PPUSH
3430: LD_INT 6
3432: PPUSH
3433: CALL 12945 0 6
// RespawnInside ( 3 , 3 , rulab4 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3437: LD_INT 3
3439: PPUSH
3440: LD_INT 3
3442: PPUSH
3443: LD_INT 135
3445: PPUSH
3446: LD_EXP 36
3450: PPUSH
3451: LD_EXP 37
3455: PPUSH
3456: CALL_OW 12
3460: PPUSH
3461: LD_INT 4
3463: PPUSH
3464: LD_INT 6
3466: PPUSH
3467: CALL 12945 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
3471: LD_ADDR_VAR 0 2
3475: PUSH
3476: LD_INT 22
3478: PUSH
3479: LD_INT 3
3481: PUSH
3482: EMPTY
3483: LIST
3484: LIST
3485: PUSH
3486: LD_INT 30
3488: PUSH
3489: LD_INT 32
3491: PUSH
3492: EMPTY
3493: LIST
3494: LIST
3495: PUSH
3496: EMPTY
3497: LIST
3498: LIST
3499: PPUSH
3500: CALL_OW 69
3504: PUSH
3505: FOR_IN
3506: IFFALSE 3546
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinlevel , RuSolMaxLevel ) , 1 , 1 ) ;
3508: LD_INT 3
3510: PPUSH
3511: LD_INT 3
3513: PPUSH
3514: LD_VAR 0 2
3518: PPUSH
3519: LD_EXP 36
3523: PPUSH
3524: LD_EXP 37
3528: PPUSH
3529: CALL_OW 12
3533: PPUSH
3534: LD_INT 1
3536: PPUSH
3537: LD_INT 1
3539: PPUSH
3540: CALL 12945 0 6
3544: GO 3505
3546: POP
3547: POP
// for i = 1 to 5 do
3548: LD_ADDR_VAR 0 2
3552: PUSH
3553: DOUBLE
3554: LD_INT 1
3556: DEC
3557: ST_TO_ADDR
3558: LD_INT 5
3560: PUSH
3561: FOR_TO
3562: IFFALSE 3661
// begin uc_side = 3 ;
3564: LD_ADDR_OWVAR 20
3568: PUSH
3569: LD_INT 3
3571: ST_TO_ADDR
// uc_nation = 3 ;
3572: LD_ADDR_OWVAR 21
3576: PUSH
3577: LD_INT 3
3579: ST_TO_ADDR
// hc_gallery =  ;
3580: LD_ADDR_OWVAR 33
3584: PUSH
3585: LD_STRING 
3587: ST_TO_ADDR
// hc_name =  ;
3588: LD_ADDR_OWVAR 26
3592: PUSH
3593: LD_STRING 
3595: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3596: LD_INT 0
3598: PPUSH
3599: LD_INT 4
3601: PPUSH
3602: LD_EXP 36
3606: PPUSH
3607: LD_EXP 37
3611: PPUSH
3612: CALL_OW 12
3616: PPUSH
3617: CALL_OW 380
// un = CreateHuman ;
3621: LD_ADDR_VAR 0 3
3625: PUSH
3626: CALL_OW 44
3630: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruheadlab ) ;
3631: LD_VAR 0 3
3635: PPUSH
3636: LD_INT 3
3638: PPUSH
3639: CALL_OW 52
// RuScientists = RuScientists ^ un ;
3643: LD_ADDR_EXP 34
3647: PUSH
3648: LD_EXP 34
3652: PUSH
3653: LD_VAR 0 3
3657: ADD
3658: ST_TO_ADDR
// end ;
3659: GO 3561
3661: POP
3662: POP
// end ;
3663: LD_VAR 0 1
3667: RET
// export function PrepareWestBase ; var i , un ; begin
3668: LD_INT 0
3670: PPUSH
3671: PPUSH
3672: PPUSH
// RespawnInside ( 3 , 3 , ruwestdepot , rand ( RuSolMinlevel , RuSolMaxLevel ) , 2 , 3 ) ;
3673: LD_INT 3
3675: PPUSH
3676: LD_INT 3
3678: PPUSH
3679: LD_INT 6
3681: PPUSH
3682: LD_EXP 36
3686: PPUSH
3687: LD_EXP 37
3691: PPUSH
3692: CALL_OW 12
3696: PPUSH
3697: LD_INT 2
3699: PPUSH
3700: LD_INT 3
3702: PPUSH
3703: CALL 12945 0 6
// RespawnInside ( 3 , 3 , rulab1 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 3 ) ;
3707: LD_INT 3
3709: PPUSH
3710: LD_INT 3
3712: PPUSH
3713: LD_INT 91
3715: PPUSH
3716: LD_EXP 36
3720: PPUSH
3721: LD_EXP 37
3725: PPUSH
3726: CALL_OW 12
3730: PPUSH
3731: LD_INT 4
3733: PPUSH
3734: LD_INT 3
3736: PPUSH
3737: CALL 12945 0 6
// RespawnInside ( 3 , 3 , ru_fact , rand ( RuSolMinlevel , RuSolMaxLevel ) , 3 , 6 ) ;
3741: LD_INT 3
3743: PPUSH
3744: LD_INT 3
3746: PPUSH
3747: LD_INT 21
3749: PPUSH
3750: LD_EXP 36
3754: PPUSH
3755: LD_EXP 37
3759: PPUSH
3760: CALL_OW 12
3764: PPUSH
3765: LD_INT 3
3767: PPUSH
3768: LD_INT 6
3770: PPUSH
3771: CALL 12945 0 6
// end ;
3775: LD_VAR 0 1
3779: RET
// export function PrepareOtherRussians ; var i , un , veh ; begin
3780: LD_INT 0
3782: PPUSH
3783: PPUSH
3784: PPUSH
3785: PPUSH
// uc_side = 3 ;
3786: LD_ADDR_OWVAR 20
3790: PUSH
3791: LD_INT 3
3793: ST_TO_ADDR
// uc_nation = 3 ;
3794: LD_ADDR_OWVAR 21
3798: PUSH
3799: LD_INT 3
3801: ST_TO_ADDR
// for i = 1 to 5 do
3802: LD_ADDR_VAR 0 2
3806: PUSH
3807: DOUBLE
3808: LD_INT 1
3810: DEC
3811: ST_TO_ADDR
3812: LD_INT 5
3814: PUSH
3815: FOR_TO
3816: IFFALSE 3886
// begin hc_gallery =  ;
3818: LD_ADDR_OWVAR 33
3822: PUSH
3823: LD_STRING 
3825: ST_TO_ADDR
// hc_name =  ;
3826: LD_ADDR_OWVAR 26
3830: PUSH
3831: LD_STRING 
3833: ST_TO_ADDR
// PrepareHuman ( false , 9 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3834: LD_INT 0
3836: PPUSH
3837: LD_INT 9
3839: PPUSH
3840: LD_EXP 36
3844: PPUSH
3845: LD_EXP 37
3849: PPUSH
3850: CALL_OW 12
3854: PPUSH
3855: CALL_OW 380
// un = CreateHuman ;
3859: LD_ADDR_VAR 0 3
3863: PUSH
3864: CALL_OW 44
3868: ST_TO_ADDR
// PlaceUnitArea ( un , RussianBazookersSpawn , false ) ;
3869: LD_VAR 0 3
3873: PPUSH
3874: LD_INT 8
3876: PPUSH
3877: LD_INT 0
3879: PPUSH
3880: CALL_OW 49
// end ;
3884: GO 3815
3886: POP
3887: POP
// for i = 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
3888: LD_ADDR_VAR 0 2
3892: PUSH
3893: DOUBLE
3894: LD_INT 1
3896: DEC
3897: ST_TO_ADDR
3898: LD_INT 2
3900: PUSH
3901: LD_INT 3
3903: PUSH
3904: LD_INT 4
3906: PUSH
3907: EMPTY
3908: LIST
3909: LIST
3910: LIST
3911: PUSH
3912: LD_OWVAR 67
3916: ARRAY
3917: PUSH
3918: FOR_TO
3919: IFFALSE 3989
// begin hc_gallery =  ;
3921: LD_ADDR_OWVAR 33
3925: PUSH
3926: LD_STRING 
3928: ST_TO_ADDR
// hc_name =  ;
3929: LD_ADDR_OWVAR 26
3933: PUSH
3934: LD_STRING 
3936: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3937: LD_INT 0
3939: PPUSH
3940: LD_INT 4
3942: PPUSH
3943: LD_EXP 36
3947: PPUSH
3948: LD_EXP 37
3952: PPUSH
3953: CALL_OW 12
3957: PPUSH
3958: CALL_OW 380
// un = CreateHuman ;
3962: LD_ADDR_VAR 0 3
3966: PUSH
3967: CALL_OW 44
3971: ST_TO_ADDR
// PlaceUnitArea ( un , RussianBazookersSpawn , false ) ;
3972: LD_VAR 0 3
3976: PPUSH
3977: LD_INT 8
3979: PPUSH
3980: LD_INT 0
3982: PPUSH
3983: CALL_OW 49
// end ;
3987: GO 3918
3989: POP
3990: POP
// for i := 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
3991: LD_ADDR_VAR 0 2
3995: PUSH
3996: DOUBLE
3997: LD_INT 1
3999: DEC
4000: ST_TO_ADDR
4001: LD_INT 3
4003: PUSH
4004: LD_INT 4
4006: PUSH
4007: LD_INT 5
4009: PUSH
4010: EMPTY
4011: LIST
4012: LIST
4013: LIST
4014: PUSH
4015: LD_OWVAR 67
4019: ARRAY
4020: PUSH
4021: FOR_TO
4022: IFFALSE 4218
// begin vc_engine = 3 ;
4024: LD_ADDR_OWVAR 39
4028: PUSH
4029: LD_INT 3
4031: ST_TO_ADDR
// vc_control = 1 ;
4032: LD_ADDR_OWVAR 38
4036: PUSH
4037: LD_INT 1
4039: ST_TO_ADDR
// vc_weapon = [ 42 , 43 , 44 , 45 , 46 ] [ Rand ( 1 , 5 ) ] ;
4040: LD_ADDR_OWVAR 40
4044: PUSH
4045: LD_INT 42
4047: PUSH
4048: LD_INT 43
4050: PUSH
4051: LD_INT 44
4053: PUSH
4054: LD_INT 45
4056: PUSH
4057: LD_INT 46
4059: PUSH
4060: EMPTY
4061: LIST
4062: LIST
4063: LIST
4064: LIST
4065: LIST
4066: PUSH
4067: LD_INT 1
4069: PPUSH
4070: LD_INT 5
4072: PPUSH
4073: CALL_OW 12
4077: ARRAY
4078: ST_TO_ADDR
// if vc_weapon = ru_heavy_gun then
4079: LD_OWVAR 40
4083: PUSH
4084: LD_INT 46
4086: EQUAL
4087: IFFALSE 4099
// vc_chassis = ru_heavy_tracked else
4089: LD_ADDR_OWVAR 37
4093: PUSH
4094: LD_INT 24
4096: ST_TO_ADDR
4097: GO 4126
// vc_chassis = [ ru_medium_tracked , ru_medium_wheeled ] [ Rand ( 1 , 2 ) ] ;
4099: LD_ADDR_OWVAR 37
4103: PUSH
4104: LD_INT 22
4106: PUSH
4107: LD_INT 21
4109: PUSH
4110: EMPTY
4111: LIST
4112: LIST
4113: PUSH
4114: LD_INT 1
4116: PPUSH
4117: LD_INT 2
4119: PPUSH
4120: CALL_OW 12
4124: ARRAY
4125: ST_TO_ADDR
// veh = CreateVehicle ;
4126: LD_ADDR_VAR 0 4
4130: PUSH
4131: CALL_OW 45
4135: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4136: LD_VAR 0 4
4140: PPUSH
4141: LD_INT 3
4143: PPUSH
4144: CALL_OW 233
// PlaceUnitArea ( veh , RussianTanksWestHill , false ) ;
4148: LD_VAR 0 4
4152: PPUSH
4153: LD_INT 5
4155: PPUSH
4156: LD_INT 0
4158: PPUSH
4159: CALL_OW 49
// hc_gallery =  ;
4163: LD_ADDR_OWVAR 33
4167: PUSH
4168: LD_STRING 
4170: ST_TO_ADDR
// hc_name =  ;
4171: LD_ADDR_OWVAR 26
4175: PUSH
4176: LD_STRING 
4178: ST_TO_ADDR
// PrepareHuman ( false , 3 , 10 ) ;
4179: LD_INT 0
4181: PPUSH
4182: LD_INT 3
4184: PPUSH
4185: LD_INT 10
4187: PPUSH
4188: CALL_OW 380
// un = CreateHuman ;
4192: LD_ADDR_VAR 0 3
4196: PUSH
4197: CALL_OW 44
4201: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4202: LD_VAR 0 3
4206: PPUSH
4207: LD_VAR 0 4
4211: PPUSH
4212: CALL_OW 52
// end ;
4216: GO 4021
4218: POP
4219: POP
// for i := 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
4220: LD_ADDR_VAR 0 2
4224: PUSH
4225: DOUBLE
4226: LD_INT 1
4228: DEC
4229: ST_TO_ADDR
4230: LD_INT 3
4232: PUSH
4233: LD_INT 4
4235: PUSH
4236: LD_INT 5
4238: PUSH
4239: EMPTY
4240: LIST
4241: LIST
4242: LIST
4243: PUSH
4244: LD_OWVAR 67
4248: ARRAY
4249: PUSH
4250: FOR_TO
4251: IFFALSE 4398
// begin vc_engine = 3 ;
4253: LD_ADDR_OWVAR 39
4257: PUSH
4258: LD_INT 3
4260: ST_TO_ADDR
// vc_control = 3 ;
4261: LD_ADDR_OWVAR 38
4265: PUSH
4266: LD_INT 3
4268: ST_TO_ADDR
// vc_weapon = [ 42 , 43 , 44 , 45 , 46 , 49 ] [ Rand ( 1 , 5 ) ] ;
4269: LD_ADDR_OWVAR 40
4273: PUSH
4274: LD_INT 42
4276: PUSH
4277: LD_INT 43
4279: PUSH
4280: LD_INT 44
4282: PUSH
4283: LD_INT 45
4285: PUSH
4286: LD_INT 46
4288: PUSH
4289: LD_INT 49
4291: PUSH
4292: EMPTY
4293: LIST
4294: LIST
4295: LIST
4296: LIST
4297: LIST
4298: LIST
4299: PUSH
4300: LD_INT 1
4302: PPUSH
4303: LD_INT 5
4305: PPUSH
4306: CALL_OW 12
4310: ARRAY
4311: ST_TO_ADDR
// if vc_weapon = ru_heavy_gun then
4312: LD_OWVAR 40
4316: PUSH
4317: LD_INT 46
4319: EQUAL
4320: IFFALSE 4332
// vc_chassis = ru_heavy_tracked else
4322: LD_ADDR_OWVAR 37
4326: PUSH
4327: LD_INT 24
4329: ST_TO_ADDR
4330: GO 4359
// vc_chassis = [ ru_medium_tracked , ru_medium_wheeled ] [ Rand ( 1 , 2 ) ] ;
4332: LD_ADDR_OWVAR 37
4336: PUSH
4337: LD_INT 22
4339: PUSH
4340: LD_INT 21
4342: PUSH
4343: EMPTY
4344: LIST
4345: LIST
4346: PUSH
4347: LD_INT 1
4349: PPUSH
4350: LD_INT 2
4352: PPUSH
4353: CALL_OW 12
4357: ARRAY
4358: ST_TO_ADDR
// veh = CreateVehicle ;
4359: LD_ADDR_VAR 0 4
4363: PUSH
4364: CALL_OW 45
4368: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4369: LD_VAR 0 4
4373: PPUSH
4374: LD_INT 3
4376: PPUSH
4377: CALL_OW 233
// PlaceUnitArea ( veh , RussianTanksEastHill , false ) ;
4381: LD_VAR 0 4
4385: PPUSH
4386: LD_INT 6
4388: PPUSH
4389: LD_INT 0
4391: PPUSH
4392: CALL_OW 49
// end ;
4396: GO 4250
4398: POP
4399: POP
// end ; end_of_file
4400: LD_VAR 0 1
4404: RET
// export function PrepareKurt ; begin
4405: LD_INT 0
4407: PPUSH
// uc_side = 8 ;
4408: LD_ADDR_OWVAR 20
4412: PUSH
4413: LD_INT 8
4415: ST_TO_ADDR
// uc_nation = 2 ;
4416: LD_ADDR_OWVAR 21
4420: PUSH
4421: LD_INT 2
4423: ST_TO_ADDR
// vc_chassis = ar_medium_trike ;
4424: LD_ADDR_OWVAR 37
4428: PUSH
4429: LD_INT 13
4431: ST_TO_ADDR
// vc_engine = 1 ;
4432: LD_ADDR_OWVAR 39
4436: PUSH
4437: LD_INT 1
4439: ST_TO_ADDR
// vc_control = 1 ;
4440: LD_ADDR_OWVAR 38
4444: PUSH
4445: LD_INT 1
4447: ST_TO_ADDR
// vc_weapon = 24 ;
4448: LD_ADDR_OWVAR 40
4452: PUSH
4453: LD_INT 24
4455: ST_TO_ADDR
// KurtVeh = CreateVehicle ;
4456: LD_ADDR_EXP 25
4460: PUSH
4461: CALL_OW 45
4465: ST_TO_ADDR
// if kurtStatus > 0 then
4466: LD_EXP 26
4470: PUSH
4471: LD_INT 0
4473: GREATER
4474: IFFALSE 4526
// begin Kurt = PrepareUnit ( Kurt , false ,  ) ;
4476: LD_ADDR_EXP 24
4480: PUSH
4481: LD_STRING Kurt
4483: PPUSH
4484: LD_INT 0
4486: PPUSH
4487: LD_STRING 
4489: PPUSH
4490: CALL 36872 0 3
4494: ST_TO_ADDR
// PlaceUnitArea ( KurtVeh , PlayerSpawn , false ) ;
4495: LD_EXP 25
4499: PPUSH
4500: LD_INT 4
4502: PPUSH
4503: LD_INT 0
4505: PPUSH
4506: CALL_OW 49
// PlaceHumanInUnit ( Kurt , KurtVeh ) ;
4510: LD_EXP 24
4514: PPUSH
4515: LD_EXP 25
4519: PPUSH
4520: CALL_OW 52
// end else
4524: GO 4603
// begin hc_name =  ;
4526: LD_ADDR_OWVAR 26
4530: PUSH
4531: LD_STRING 
4533: ST_TO_ADDR
// hc_gallery =  ;
4534: LD_ADDR_OWVAR 33
4538: PUSH
4539: LD_STRING 
4541: ST_TO_ADDR
// PrepareSoldier ( sex_male , 10 ) ;
4542: LD_INT 1
4544: PPUSH
4545: LD_INT 10
4547: PPUSH
4548: CALL_OW 381
// Kurt = CreateHuman ;
4552: LD_ADDR_EXP 24
4556: PUSH
4557: CALL_OW 44
4561: ST_TO_ADDR
// PlaceUnitArea ( KurtVeh , PlayerSpawn , false ) ;
4562: LD_EXP 25
4566: PPUSH
4567: LD_INT 4
4569: PPUSH
4570: LD_INT 0
4572: PPUSH
4573: CALL_OW 49
// PlaceHumanInUnit ( Kurt , KurtVeh ) ;
4577: LD_EXP 24
4581: PPUSH
4582: LD_EXP 25
4586: PPUSH
4587: CALL_OW 52
// SaveCharacters ( Kurt , AltKurt ) ;
4591: LD_EXP 24
4595: PPUSH
4596: LD_STRING AltKurt
4598: PPUSH
4599: CALL_OW 38
// end ; end ;
4603: LD_VAR 0 1
4607: RET
// export function PrepareLegionForPlayer ; var i , un , veh ; begin
4608: LD_INT 0
4610: PPUSH
4611: PPUSH
4612: PPUSH
4613: PPUSH
// for i = 1 to 3 do
4614: LD_ADDR_VAR 0 2
4618: PUSH
4619: DOUBLE
4620: LD_INT 1
4622: DEC
4623: ST_TO_ADDR
4624: LD_INT 3
4626: PUSH
4627: FOR_TO
4628: IFFALSE 4749
// begin uc_side = 1 ;
4630: LD_ADDR_OWVAR 20
4634: PUSH
4635: LD_INT 1
4637: ST_TO_ADDR
// uc_nation = 2 ;
4638: LD_ADDR_OWVAR 21
4642: PUSH
4643: LD_INT 2
4645: ST_TO_ADDR
// hc_gallery =  ;
4646: LD_ADDR_OWVAR 33
4650: PUSH
4651: LD_STRING 
4653: ST_TO_ADDR
// hc_name =  ;
4654: LD_ADDR_OWVAR 26
4658: PUSH
4659: LD_STRING 
4661: ST_TO_ADDR
// if kurtStatus = 0 or kurtStatus = 2 then
4662: LD_EXP 26
4666: PUSH
4667: LD_INT 0
4669: EQUAL
4670: PUSH
4671: LD_EXP 26
4675: PUSH
4676: LD_INT 2
4678: EQUAL
4679: OR
4680: IFFALSE 4697
// PrepareHuman ( false , 1 , 6 ) else
4682: LD_INT 0
4684: PPUSH
4685: LD_INT 1
4687: PPUSH
4688: LD_INT 6
4690: PPUSH
4691: CALL_OW 380
4695: GO 4710
// PrepareHuman ( false , 1 , 8 ) ;
4697: LD_INT 0
4699: PPUSH
4700: LD_INT 1
4702: PPUSH
4703: LD_INT 8
4705: PPUSH
4706: CALL_OW 380
// un = CreateHuman ;
4710: LD_ADDR_VAR 0 3
4714: PUSH
4715: CALL_OW 44
4719: ST_TO_ADDR
// SetDir ( un , 4 ) ;
4720: LD_VAR 0 3
4724: PPUSH
4725: LD_INT 4
4727: PPUSH
4728: CALL_OW 233
// PlaceUnitArea ( un , PlayerSpawn , false ) ;
4732: LD_VAR 0 3
4736: PPUSH
4737: LD_INT 4
4739: PPUSH
4740: LD_INT 0
4742: PPUSH
4743: CALL_OW 49
// end ;
4747: GO 4627
4749: POP
4750: POP
// vc_chassis = 14 ;
4751: LD_ADDR_OWVAR 37
4755: PUSH
4756: LD_INT 14
4758: ST_TO_ADDR
// vc_engine = 3 ;
4759: LD_ADDR_OWVAR 39
4763: PUSH
4764: LD_INT 3
4766: ST_TO_ADDR
// vc_control = 1 ;
4767: LD_ADDR_OWVAR 38
4771: PUSH
4772: LD_INT 1
4774: ST_TO_ADDR
// vc_weapon = [ 27 , 26 , 28 ] [ Rand ( 1 , 3 ) ] ;
4775: LD_ADDR_OWVAR 40
4779: PUSH
4780: LD_INT 27
4782: PUSH
4783: LD_INT 26
4785: PUSH
4786: LD_INT 28
4788: PUSH
4789: EMPTY
4790: LIST
4791: LIST
4792: LIST
4793: PUSH
4794: LD_INT 1
4796: PPUSH
4797: LD_INT 3
4799: PPUSH
4800: CALL_OW 12
4804: ARRAY
4805: ST_TO_ADDR
// veh = CreateVehicle ;
4806: LD_ADDR_VAR 0 4
4810: PUSH
4811: CALL_OW 45
4815: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
4816: LD_VAR 0 4
4820: PPUSH
4821: LD_INT 4
4823: PPUSH
4824: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
4828: LD_VAR 0 4
4832: PPUSH
4833: LD_INT 4
4835: PPUSH
4836: LD_INT 0
4838: PPUSH
4839: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
4843: LD_EXP 26
4847: PUSH
4848: LD_INT 0
4850: EQUAL
4851: PUSH
4852: LD_EXP 26
4856: PUSH
4857: LD_INT 2
4859: EQUAL
4860: OR
4861: IFFALSE 4878
// PrepareHuman ( false , 3 , 6 ) else
4863: LD_INT 0
4865: PPUSH
4866: LD_INT 3
4868: PPUSH
4869: LD_INT 6
4871: PPUSH
4872: CALL_OW 380
4876: GO 4891
// PrepareHuman ( false , 3 , 8 ) ;
4878: LD_INT 0
4880: PPUSH
4881: LD_INT 3
4883: PPUSH
4884: LD_INT 8
4886: PPUSH
4887: CALL_OW 380
// un = CreateHuman ;
4891: LD_ADDR_VAR 0 3
4895: PUSH
4896: CALL_OW 44
4900: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4901: LD_VAR 0 3
4905: PPUSH
4906: LD_VAR 0 4
4910: PPUSH
4911: CALL_OW 52
// vc_chassis = 14 ;
4915: LD_ADDR_OWVAR 37
4919: PUSH
4920: LD_INT 14
4922: ST_TO_ADDR
// vc_engine = 3 ;
4923: LD_ADDR_OWVAR 39
4927: PUSH
4928: LD_INT 3
4930: ST_TO_ADDR
// vc_control = 1 ;
4931: LD_ADDR_OWVAR 38
4935: PUSH
4936: LD_INT 1
4938: ST_TO_ADDR
// vc_weapon = [ 27 , 26 , 28 ] [ Rand ( 1 , 3 ) ] ;
4939: LD_ADDR_OWVAR 40
4943: PUSH
4944: LD_INT 27
4946: PUSH
4947: LD_INT 26
4949: PUSH
4950: LD_INT 28
4952: PUSH
4953: EMPTY
4954: LIST
4955: LIST
4956: LIST
4957: PUSH
4958: LD_INT 1
4960: PPUSH
4961: LD_INT 3
4963: PPUSH
4964: CALL_OW 12
4968: ARRAY
4969: ST_TO_ADDR
// veh = CreateVehicle ;
4970: LD_ADDR_VAR 0 4
4974: PUSH
4975: CALL_OW 45
4979: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
4980: LD_VAR 0 4
4984: PPUSH
4985: LD_INT 4
4987: PPUSH
4988: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
4992: LD_VAR 0 4
4996: PPUSH
4997: LD_INT 4
4999: PPUSH
5000: LD_INT 0
5002: PPUSH
5003: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
5007: LD_EXP 26
5011: PUSH
5012: LD_INT 0
5014: EQUAL
5015: PUSH
5016: LD_EXP 26
5020: PUSH
5021: LD_INT 2
5023: EQUAL
5024: OR
5025: IFFALSE 5042
// PrepareHuman ( false , 4 , 6 ) else
5027: LD_INT 0
5029: PPUSH
5030: LD_INT 4
5032: PPUSH
5033: LD_INT 6
5035: PPUSH
5036: CALL_OW 380
5040: GO 5055
// PrepareHuman ( false , 4 , 8 ) ;
5042: LD_INT 0
5044: PPUSH
5045: LD_INT 4
5047: PPUSH
5048: LD_INT 8
5050: PPUSH
5051: CALL_OW 380
// un = CreateHuman ;
5055: LD_ADDR_VAR 0 3
5059: PUSH
5060: CALL_OW 44
5064: ST_TO_ADDR
// SetDir ( un , 4 ) ;
5065: LD_VAR 0 3
5069: PPUSH
5070: LD_INT 4
5072: PPUSH
5073: CALL_OW 233
// PlaceHumanInUnit ( un , veh ) ;
5077: LD_VAR 0 3
5081: PPUSH
5082: LD_VAR 0 4
5086: PPUSH
5087: CALL_OW 52
// vc_chassis = 14 ;
5091: LD_ADDR_OWVAR 37
5095: PUSH
5096: LD_INT 14
5098: ST_TO_ADDR
// vc_engine = 3 ;
5099: LD_ADDR_OWVAR 39
5103: PUSH
5104: LD_INT 3
5106: ST_TO_ADDR
// vc_control = 1 ;
5107: LD_ADDR_OWVAR 38
5111: PUSH
5112: LD_INT 1
5114: ST_TO_ADDR
// vc_weapon = [ 27 , 26 , 28 ] [ Rand ( 1 , 3 ) ] ;
5115: LD_ADDR_OWVAR 40
5119: PUSH
5120: LD_INT 27
5122: PUSH
5123: LD_INT 26
5125: PUSH
5126: LD_INT 28
5128: PUSH
5129: EMPTY
5130: LIST
5131: LIST
5132: LIST
5133: PUSH
5134: LD_INT 1
5136: PPUSH
5137: LD_INT 3
5139: PPUSH
5140: CALL_OW 12
5144: ARRAY
5145: ST_TO_ADDR
// veh = CreateVehicle ;
5146: LD_ADDR_VAR 0 4
5150: PUSH
5151: CALL_OW 45
5155: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5156: LD_VAR 0 4
5160: PPUSH
5161: LD_INT 4
5163: PPUSH
5164: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
5168: LD_VAR 0 4
5172: PPUSH
5173: LD_INT 4
5175: PPUSH
5176: LD_INT 0
5178: PPUSH
5179: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
5183: LD_EXP 26
5187: PUSH
5188: LD_INT 0
5190: EQUAL
5191: PUSH
5192: LD_EXP 26
5196: PUSH
5197: LD_INT 2
5199: EQUAL
5200: OR
5201: IFFALSE 5218
// PrepareHuman ( false , 2 , 4 ) else
5203: LD_INT 0
5205: PPUSH
5206: LD_INT 2
5208: PPUSH
5209: LD_INT 4
5211: PPUSH
5212: CALL_OW 380
5216: GO 5231
// PrepareHuman ( false , 2 , 8 ) ;
5218: LD_INT 0
5220: PPUSH
5221: LD_INT 2
5223: PPUSH
5224: LD_INT 8
5226: PPUSH
5227: CALL_OW 380
// un = CreateHuman ;
5231: LD_ADDR_VAR 0 3
5235: PUSH
5236: CALL_OW 44
5240: ST_TO_ADDR
// SetDir ( un , 4 ) ;
5241: LD_VAR 0 3
5245: PPUSH
5246: LD_INT 4
5248: PPUSH
5249: CALL_OW 233
// PlaceHumanInUnit ( un , veh ) ;
5253: LD_VAR 0 3
5257: PPUSH
5258: LD_VAR 0 4
5262: PPUSH
5263: CALL_OW 52
// end ;
5267: LD_VAR 0 1
5271: RET
// export function PrepareAttackLegion ; var i , un ; begin
5272: LD_INT 0
5274: PPUSH
5275: PPUSH
5276: PPUSH
// for i = 1 to 4 do
5277: LD_ADDR_VAR 0 2
5281: PUSH
5282: DOUBLE
5283: LD_INT 1
5285: DEC
5286: ST_TO_ADDR
5287: LD_INT 4
5289: PUSH
5290: FOR_TO
5291: IFFALSE 5401
// begin uc_side = 8 ;
5293: LD_ADDR_OWVAR 20
5297: PUSH
5298: LD_INT 8
5300: ST_TO_ADDR
// uc_nation = 2 ;
5301: LD_ADDR_OWVAR 21
5305: PUSH
5306: LD_INT 2
5308: ST_TO_ADDR
// hc_gallery =  ;
5309: LD_ADDR_OWVAR 33
5313: PUSH
5314: LD_STRING 
5316: ST_TO_ADDR
// hc_name =  ;
5317: LD_ADDR_OWVAR 26
5321: PUSH
5322: LD_STRING 
5324: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 8 ] [ Rand ( 1 , 2 ) ] , Rand ( 6 , 8 ) ) ;
5325: LD_INT 0
5327: PPUSH
5328: LD_INT 1
5330: PUSH
5331: LD_INT 8
5333: PUSH
5334: EMPTY
5335: LIST
5336: LIST
5337: PUSH
5338: LD_INT 1
5340: PPUSH
5341: LD_INT 2
5343: PPUSH
5344: CALL_OW 12
5348: ARRAY
5349: PPUSH
5350: LD_INT 6
5352: PPUSH
5353: LD_INT 8
5355: PPUSH
5356: CALL_OW 12
5360: PPUSH
5361: CALL_OW 380
// un = CreateHuman ;
5365: LD_ADDR_VAR 0 3
5369: PUSH
5370: CALL_OW 44
5374: ST_TO_ADDR
// PlaceUnitArea ( un , LegionEnemySpawn , false ) ;
5375: LD_VAR 0 3
5379: PPUSH
5380: LD_INT 19
5382: PPUSH
5383: LD_INT 0
5385: PPUSH
5386: CALL_OW 49
// ComCrawl ( un ) ;
5390: LD_VAR 0 3
5394: PPUSH
5395: CALL_OW 137
// end ;
5399: GO 5290
5401: POP
5402: POP
// SetAttitude ( 1 , 8 , att_enemy , true ) ;
5403: LD_INT 1
5405: PPUSH
5406: LD_INT 8
5408: PPUSH
5409: LD_INT 2
5411: PPUSH
5412: LD_INT 1
5414: PPUSH
5415: CALL_OW 80
// PlaceMines ( MineField , 3 ) ;
5419: LD_INT 20
5421: PPUSH
5422: LD_INT 3
5424: PPUSH
5425: CALL 14923 0 2
// end ; end_of_file
5429: LD_VAR 0 1
5433: RET
// every 1 do var i ;
5434: GO 5436
5436: DISABLE
5437: LD_INT 0
5439: PPUSH
// begin TeleportExit ( ruteleprt , 122 , 145 ) ;
5440: LD_INT 10
5442: PPUSH
5443: LD_INT 122
5445: PPUSH
5446: LD_INT 145
5448: PPUSH
5449: CALL_OW 243
// TeleportExit ( rutp , 84 , 61 ) ;
5453: LD_INT 137
5455: PPUSH
5456: LD_INT 84
5458: PPUSH
5459: LD_INT 61
5461: PPUSH
5462: CALL_OW 243
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5466: LD_EXP 1
5470: PPUSH
5471: CALL_OW 310
5475: PPUSH
5476: CALL_OW 87
// InGameOn ;
5480: CALL_OW 8
// ComMoveXY ( FilterAllUnits ( [ f_side , 1 ] ) , 130 , 103 ) ;
5484: LD_INT 22
5486: PUSH
5487: LD_INT 1
5489: PUSH
5490: EMPTY
5491: LIST
5492: LIST
5493: PPUSH
5494: CALL_OW 69
5498: PPUSH
5499: LD_INT 130
5501: PPUSH
5502: LD_INT 103
5504: PPUSH
5505: CALL_OW 111
// AddComMoveXY ( i , 114 , 102 ) ;
5509: LD_VAR 0 1
5513: PPUSH
5514: LD_INT 114
5516: PPUSH
5517: LD_INT 102
5519: PPUSH
5520: CALL_OW 171
// Say ( JMM , D1-JMM-1 ) ;
5524: LD_EXP 1
5528: PPUSH
5529: LD_STRING D1-JMM-1
5531: PPUSH
5532: CALL_OW 88
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5536: LD_EXP 1
5540: PPUSH
5541: CALL_OW 310
5545: PPUSH
5546: CALL_OW 87
// if IsOk ( Donaldson ) then
5550: LD_EXP 3
5554: PPUSH
5555: CALL_OW 302
5559: IFFALSE 5639
// begin Say ( Donaldson , D1-Don-1 ) ;
5561: LD_EXP 3
5565: PPUSH
5566: LD_STRING D1-Don-1
5568: PPUSH
5569: CALL_OW 88
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5573: LD_EXP 1
5577: PPUSH
5578: CALL_OW 310
5582: PPUSH
5583: CALL_OW 87
// Say ( JMM , D1-JMM-2 ) ;
5587: LD_EXP 1
5591: PPUSH
5592: LD_STRING D1-JMM-2
5594: PPUSH
5595: CALL_OW 88
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5599: LD_EXP 1
5603: PPUSH
5604: CALL_OW 310
5608: PPUSH
5609: CALL_OW 87
// Say ( Donaldson , D1-Don-2 ) ;
5613: LD_EXP 3
5617: PPUSH
5618: LD_STRING D1-Don-2
5620: PPUSH
5621: CALL_OW 88
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5625: LD_EXP 1
5629: PPUSH
5630: CALL_OW 310
5634: PPUSH
5635: CALL_OW 87
// end ; AddComMoveXY ( FilterAllUnits ( [ f_side , 1 ] ) , 110 , 101 ) ;
5639: LD_INT 22
5641: PUSH
5642: LD_INT 1
5644: PUSH
5645: EMPTY
5646: LIST
5647: LIST
5648: PPUSH
5649: CALL_OW 69
5653: PPUSH
5654: LD_INT 110
5656: PPUSH
5657: LD_INT 101
5659: PPUSH
5660: CALL_OW 171
// wait ( 0 0$1 ) ;
5664: LD_INT 35
5666: PPUSH
5667: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5671: LD_EXP 1
5675: PPUSH
5676: CALL_OW 310
5680: PPUSH
5681: CALL_OW 87
// wait ( 0 0$1 ) ;
5685: LD_INT 35
5687: PPUSH
5688: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5692: LD_EXP 1
5696: PPUSH
5697: CALL_OW 310
5701: PPUSH
5702: CALL_OW 87
// wait ( 0 0$1 ) ;
5706: LD_INT 35
5708: PPUSH
5709: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5713: LD_EXP 1
5717: PPUSH
5718: CALL_OW 310
5722: PPUSH
5723: CALL_OW 87
// wait ( 0 0$1 ) ;
5727: LD_INT 35
5729: PPUSH
5730: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5734: LD_EXP 1
5738: PPUSH
5739: CALL_OW 310
5743: PPUSH
5744: CALL_OW 87
// end ;
5748: PPOPN 1
5750: END
// every 0 0$1 trigger SeeXY ( 1 , 102 , 94 ) do var i ;
5751: LD_INT 1
5753: PPUSH
5754: LD_INT 102
5756: PPUSH
5757: LD_INT 94
5759: PPUSH
5760: CALL_OW 293
5764: IFFALSE 5955
5766: GO 5768
5768: DISABLE
5769: LD_INT 0
5771: PPUSH
// begin CenterOnXY ( 102 , 94 ) ;
5772: LD_INT 102
5774: PPUSH
5775: LD_INT 94
5777: PPUSH
5778: CALL_OW 84
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D1-Sol1-2 ,  ) ;
5782: LD_INT 22
5784: PUSH
5785: LD_INT 1
5787: PUSH
5788: EMPTY
5789: LIST
5790: LIST
5791: PUSH
5792: LD_INT 26
5794: PUSH
5795: LD_INT 1
5797: PUSH
5798: EMPTY
5799: LIST
5800: LIST
5801: PUSH
5802: LD_INT 2
5804: PUSH
5805: LD_INT 25
5807: PUSH
5808: LD_INT 1
5810: PUSH
5811: EMPTY
5812: LIST
5813: LIST
5814: PUSH
5815: LD_INT 25
5817: PUSH
5818: LD_INT 2
5820: PUSH
5821: EMPTY
5822: LIST
5823: LIST
5824: PUSH
5825: LD_INT 25
5827: PUSH
5828: LD_INT 3
5830: PUSH
5831: EMPTY
5832: LIST
5833: LIST
5834: PUSH
5835: LD_INT 25
5837: PUSH
5838: LD_INT 4
5840: PUSH
5841: EMPTY
5842: LIST
5843: LIST
5844: PUSH
5845: LD_INT 25
5847: PUSH
5848: LD_INT 5
5850: PUSH
5851: EMPTY
5852: LIST
5853: LIST
5854: PUSH
5855: LD_INT 25
5857: PUSH
5858: LD_INT 8
5860: PUSH
5861: EMPTY
5862: LIST
5863: LIST
5864: PUSH
5865: EMPTY
5866: LIST
5867: LIST
5868: LIST
5869: LIST
5870: LIST
5871: LIST
5872: LIST
5873: PUSH
5874: EMPTY
5875: LIST
5876: LIST
5877: LIST
5878: PPUSH
5879: CALL_OW 69
5883: PPUSH
5884: LD_STRING D1-Sol1-2
5886: PPUSH
5887: LD_STRING 
5889: PPUSH
5890: CALL 12328 0 3
// Say ( JMM , D1-JMM-3 ) ;
5894: LD_EXP 1
5898: PPUSH
5899: LD_STRING D1-JMM-3
5901: PPUSH
5902: CALL_OW 88
// ChangeMissionObjectives ( M1 ) ;
5906: LD_STRING M1
5908: PPUSH
5909: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
5913: LD_ADDR_VAR 0 1
5917: PUSH
5918: LD_INT 22
5920: PUSH
5921: LD_INT 1
5923: PUSH
5924: EMPTY
5925: LIST
5926: LIST
5927: PPUSH
5928: CALL_OW 69
5932: PUSH
5933: FOR_IN
5934: IFFALSE 5953
// ComMoveXY ( i , 95 , 84 ) ;
5936: LD_VAR 0 1
5940: PPUSH
5941: LD_INT 95
5943: PPUSH
5944: LD_INT 84
5946: PPUSH
5947: CALL_OW 111
5951: GO 5933
5953: POP
5954: POP
// end ;
5955: PPOPN 1
5957: END
// every 0 0$1 do var i , bazook_list , your_units , dec ;
5958: GO 5960
5960: DISABLE
5961: LD_INT 0
5963: PPUSH
5964: PPUSH
5965: PPUSH
5966: PPUSH
// begin bazook_list = FilterUnitsInArea ( RussianBazookersSpawn , [ [ f_side , 3 ] , [ f_class , 9 ] ] ) ;
5967: LD_ADDR_VAR 0 2
5971: PUSH
5972: LD_INT 8
5974: PPUSH
5975: LD_INT 22
5977: PUSH
5978: LD_INT 3
5980: PUSH
5981: EMPTY
5982: LIST
5983: LIST
5984: PUSH
5985: LD_INT 25
5987: PUSH
5988: LD_INT 9
5990: PUSH
5991: EMPTY
5992: LIST
5993: LIST
5994: PUSH
5995: EMPTY
5996: LIST
5997: LIST
5998: PPUSH
5999: CALL_OW 70
6003: ST_TO_ADDR
// your_units = FilterAllUnits ( [ [ f_side , 1 ] ] ) ;
6004: LD_ADDR_VAR 0 3
6008: PUSH
6009: LD_INT 22
6011: PUSH
6012: LD_INT 1
6014: PUSH
6015: EMPTY
6016: LIST
6017: LIST
6018: PUSH
6019: EMPTY
6020: LIST
6021: PPUSH
6022: CALL_OW 69
6026: ST_TO_ADDR
// enable ;
6027: ENABLE
// for i in your_units do
6028: LD_ADDR_VAR 0 1
6032: PUSH
6033: LD_VAR 0 3
6037: PUSH
6038: FOR_IN
6039: IFFALSE 6705
// begin if See ( 3 , i ) then
6041: LD_INT 3
6043: PPUSH
6044: LD_VAR 0 1
6048: PPUSH
6049: CALL_OW 292
6053: IFFALSE 6703
// begin disable ;
6055: DISABLE
// ComTimeShift ( bazook_list , 96 , 85 ) ;
6056: LD_VAR 0 2
6060: PPUSH
6061: LD_INT 96
6063: PPUSH
6064: LD_INT 85
6066: PPUSH
6067: CALL_OW 154
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
6071: LD_VAR 0 2
6075: PPUSH
6076: LD_INT 96
6078: PPUSH
6079: LD_INT 85
6081: PPUSH
6082: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
6086: LD_VAR 0 2
6090: PPUSH
6091: LD_INT 96
6093: PPUSH
6094: LD_INT 85
6096: PPUSH
6097: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
6101: LD_VAR 0 2
6105: PPUSH
6106: LD_INT 96
6108: PPUSH
6109: LD_INT 85
6111: PPUSH
6112: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
6116: LD_VAR 0 2
6120: PPUSH
6121: LD_INT 96
6123: PPUSH
6124: LD_INT 85
6126: PPUSH
6127: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
6131: LD_VAR 0 2
6135: PPUSH
6136: LD_INT 96
6138: PPUSH
6139: LD_INT 85
6141: PPUSH
6142: CALL_OW 214
// wait ( 0 0$2 ) ;
6146: LD_INT 70
6148: PPUSH
6149: CALL_OW 67
// Say ( JMM , D1a-JMM-1 ) ;
6153: LD_EXP 1
6157: PPUSH
6158: LD_STRING D1a-JMM-1
6160: PPUSH
6161: CALL_OW 88
// Say ( Donaldson , D1a-Don-1 ) ;
6165: LD_EXP 3
6169: PPUSH
6170: LD_STRING D1a-Don-1
6172: PPUSH
6173: CALL_OW 88
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
6177: LD_ADDR_VAR 0 1
6181: PUSH
6182: LD_INT 22
6184: PUSH
6185: LD_INT 1
6187: PUSH
6188: EMPTY
6189: LIST
6190: LIST
6191: PPUSH
6192: CALL_OW 69
6196: PUSH
6197: FOR_IN
6198: IFFALSE 6217
// ComMoveXY ( i , 109 , 102 ) ;
6200: LD_VAR 0 1
6204: PPUSH
6205: LD_INT 109
6207: PPUSH
6208: LD_INT 102
6210: PPUSH
6211: CALL_OW 111
6215: GO 6197
6217: POP
6218: POP
// Say ( JMM , D1a-JMM-2 ) ;
6219: LD_EXP 1
6223: PPUSH
6224: LD_STRING D1a-JMM-2
6226: PPUSH
6227: CALL_OW 88
// wait ( 0 0$10 ) ;
6231: LD_INT 350
6233: PPUSH
6234: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
6238: LD_EXP 1
6242: PPUSH
6243: CALL_OW 310
6247: PPUSH
6248: CALL_OW 87
// Say ( Donaldson , D1b-Don-1 ) ;
6252: LD_EXP 3
6256: PPUSH
6257: LD_STRING D1b-Don-1
6259: PPUSH
6260: CALL_OW 88
// if IsOk ( Donaldson ) then
6264: LD_EXP 3
6268: PPUSH
6269: CALL_OW 302
6273: IFFALSE 6287
// Say ( JMM , D1b-JMM-1 ) ;
6275: LD_EXP 1
6279: PPUSH
6280: LD_STRING D1b-JMM-1
6282: PPUSH
6283: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D1b-Sol1-1 ,  ) ;
6287: LD_INT 22
6289: PUSH
6290: LD_INT 1
6292: PUSH
6293: EMPTY
6294: LIST
6295: LIST
6296: PUSH
6297: LD_INT 26
6299: PUSH
6300: LD_INT 1
6302: PUSH
6303: EMPTY
6304: LIST
6305: LIST
6306: PUSH
6307: LD_INT 2
6309: PUSH
6310: LD_INT 25
6312: PUSH
6313: LD_INT 1
6315: PUSH
6316: EMPTY
6317: LIST
6318: LIST
6319: PUSH
6320: LD_INT 25
6322: PUSH
6323: LD_INT 2
6325: PUSH
6326: EMPTY
6327: LIST
6328: LIST
6329: PUSH
6330: LD_INT 25
6332: PUSH
6333: LD_INT 3
6335: PUSH
6336: EMPTY
6337: LIST
6338: LIST
6339: PUSH
6340: LD_INT 25
6342: PUSH
6343: LD_INT 4
6345: PUSH
6346: EMPTY
6347: LIST
6348: LIST
6349: PUSH
6350: LD_INT 25
6352: PUSH
6353: LD_INT 5
6355: PUSH
6356: EMPTY
6357: LIST
6358: LIST
6359: PUSH
6360: LD_INT 25
6362: PUSH
6363: LD_INT 8
6365: PUSH
6366: EMPTY
6367: LIST
6368: LIST
6369: PUSH
6370: EMPTY
6371: LIST
6372: LIST
6373: LIST
6374: LIST
6375: LIST
6376: LIST
6377: LIST
6378: PUSH
6379: EMPTY
6380: LIST
6381: LIST
6382: LIST
6383: PPUSH
6384: CALL_OW 69
6388: PPUSH
6389: LD_STRING D1b-Sol1-1
6391: PPUSH
6392: LD_STRING 
6394: PPUSH
6395: CALL 12328 0 3
// Say ( Donaldson , D1b-Don-2 ) ;
6399: LD_EXP 3
6403: PPUSH
6404: LD_STRING D1b-Don-2
6406: PPUSH
6407: CALL_OW 88
// Say ( JMM , D1b-JMM-2 ) ;
6411: LD_EXP 1
6415: PPUSH
6416: LD_STRING D1b-JMM-2
6418: PPUSH
6419: CALL_OW 88
// dec = ShowQuery1 ;
6423: LD_ADDR_VAR 0 4
6427: PUSH
6428: CALL 12797 0 0
6432: ST_TO_ADDR
// if dec = 1 then
6433: LD_VAR 0 4
6437: PUSH
6438: LD_INT 1
6440: EQUAL
6441: IFFALSE 6547
// begin Say ( JMM , D2-JMM-1 ) ;
6443: LD_EXP 1
6447: PPUSH
6448: LD_STRING D2-JMM-1
6450: PPUSH
6451: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
6455: LD_EXP 22
6459: PPUSH
6460: LD_STRING D2-Pow-1
6462: PPUSH
6463: CALL_OW 94
// Say ( JMM , D2a-JMM-1 ) ;
6467: LD_EXP 1
6471: PPUSH
6472: LD_STRING D2a-JMM-1
6474: PPUSH
6475: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-1 ) ;
6479: LD_EXP 22
6483: PPUSH
6484: LD_STRING D2a-Pow-1
6486: PPUSH
6487: CALL_OW 94
// Say ( JMM , D2a-JMM-2 ) ;
6491: LD_EXP 1
6495: PPUSH
6496: LD_STRING D2a-JMM-2
6498: PPUSH
6499: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
6503: LD_EXP 22
6507: PPUSH
6508: LD_STRING D2a-Pow-2
6510: PPUSH
6511: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
6515: LD_EXP 1
6519: PPUSH
6520: LD_STRING D2a-JMM-3
6522: PPUSH
6523: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
6527: LD_EXP 22
6531: PPUSH
6532: LD_STRING D2a-Pow-3
6534: PPUSH
6535: CALL_OW 94
// secondPass = 2 ;
6539: LD_ADDR_EXP 27
6543: PUSH
6544: LD_INT 2
6546: ST_TO_ADDR
// end ; if dec = 2 then
6547: LD_VAR 0 4
6551: PUSH
6552: LD_INT 2
6554: EQUAL
6555: IFFALSE 6649
// begin Say ( JMM , D2-JMM-1 ) ;
6557: LD_EXP 1
6561: PPUSH
6562: LD_STRING D2-JMM-1
6564: PPUSH
6565: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
6569: LD_EXP 22
6573: PPUSH
6574: LD_STRING D2-Pow-1
6576: PPUSH
6577: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
6581: LD_EXP 1
6585: PPUSH
6586: LD_STRING D2b-JMM-1
6588: PPUSH
6589: CALL_OW 88
// SayRadio ( Powell , D2b-Pow-1 ) ;
6593: LD_EXP 22
6597: PPUSH
6598: LD_STRING D2b-Pow-1
6600: PPUSH
6601: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
6605: LD_EXP 1
6609: PPUSH
6610: LD_STRING D2c-JMM-1
6612: PPUSH
6613: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
6617: LD_EXP 22
6621: PPUSH
6622: LD_STRING D2c-Pow-1
6624: PPUSH
6625: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
6629: LD_EXP 1
6633: PPUSH
6634: LD_STRING D2c-JMM-2
6636: PPUSH
6637: CALL_OW 88
// secondPass = 2 ;
6641: LD_ADDR_EXP 27
6645: PUSH
6646: LD_INT 2
6648: ST_TO_ADDR
// end ; if dec = 3 then
6649: LD_VAR 0 4
6653: PUSH
6654: LD_INT 3
6656: EQUAL
6657: IFFALSE 6667
// secondPass = 1 ;
6659: LD_ADDR_EXP 27
6663: PUSH
6664: LD_INT 1
6666: ST_TO_ADDR
// InGameOff ;
6667: CALL_OW 9
// ruAI = 1 ;
6671: LD_ADDR_EXP 41
6675: PUSH
6676: LD_INT 1
6678: ST_TO_ADDR
// SetAttitude ( 1 , 3 , att_enemy , true ) ;
6679: LD_INT 1
6681: PPUSH
6682: LD_INT 3
6684: PPUSH
6685: LD_INT 2
6687: PPUSH
6688: LD_INT 1
6690: PPUSH
6691: CALL_OW 80
// SaveForQuickRestart ;
6695: CALL_OW 22
// exit ;
6699: POP
6700: POP
6701: GO 6707
// end ; end ;
6703: GO 6038
6705: POP
6706: POP
// end ;
6707: PPOPN 4
6709: END
// every 1 1$0 trigger secondPass = 2 do
6710: LD_EXP 27
6714: PUSH
6715: LD_INT 2
6717: EQUAL
6718: IFFALSE 6938
6720: GO 6722
6722: DISABLE
// begin PowellSupport1 ;
6723: CALL 1970 0 0
// DialogueOn ;
6727: CALL_OW 6
// Say ( JMM , DC1-JMM-1 ) ;
6731: LD_EXP 1
6735: PPUSH
6736: LD_STRING DC1-JMM-1
6738: PPUSH
6739: CALL_OW 88
// SayRadio ( Powell , DC1-Pow-1 ) ;
6743: LD_EXP 22
6747: PPUSH
6748: LD_STRING DC1-Pow-1
6750: PPUSH
6751: CALL_OW 94
// DialogueOff ;
6755: CALL_OW 7
// wait ( 3 3$0 ) ;
6759: LD_INT 6300
6761: PPUSH
6762: CALL_OW 67
// PowellSupport2 ;
6766: CALL 2435 0 0
// DialogueOn ;
6770: CALL_OW 6
// Say ( JMM , DC2-JMM-1 ) ;
6774: LD_EXP 1
6778: PPUSH
6779: LD_STRING DC2-JMM-1
6781: PPUSH
6782: CALL_OW 88
// SayRadio ( Powell , DC2-Pow-1 ) ;
6786: LD_EXP 22
6790: PPUSH
6791: LD_STRING DC2-Pow-1
6793: PPUSH
6794: CALL_OW 94
// DialogueOff ;
6798: CALL_OW 7
// wait ( 3 3$00 ) ;
6802: LD_INT 6300
6804: PPUSH
6805: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
6809: LD_INT 35
6811: PPUSH
6812: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) and not FilterUnitsInArea ( OutsideArea1 , [ f_side , 3 ] ) ;
6816: LD_INT 22
6818: PUSH
6819: LD_INT 1
6821: PUSH
6822: EMPTY
6823: LIST
6824: LIST
6825: PUSH
6826: LD_INT 2
6828: PUSH
6829: LD_INT 30
6831: PUSH
6832: LD_INT 0
6834: PUSH
6835: EMPTY
6836: LIST
6837: LIST
6838: PUSH
6839: LD_INT 30
6841: PUSH
6842: LD_INT 1
6844: PUSH
6845: EMPTY
6846: LIST
6847: LIST
6848: PUSH
6849: EMPTY
6850: LIST
6851: LIST
6852: LIST
6853: PUSH
6854: EMPTY
6855: LIST
6856: LIST
6857: PPUSH
6858: CALL_OW 69
6862: PUSH
6863: LD_INT 11
6865: PPUSH
6866: LD_INT 22
6868: PUSH
6869: LD_INT 3
6871: PUSH
6872: EMPTY
6873: LIST
6874: LIST
6875: PPUSH
6876: CALL_OW 70
6880: NOT
6881: AND
6882: IFFALSE 6809
// wait ( 0 0$10 ) ;
6884: LD_INT 350
6886: PPUSH
6887: CALL_OW 67
// Legion ;
6891: CALL 6939 0 0
// wait ( 6 6$0 ) ;
6895: LD_INT 12600
6897: PPUSH
6898: CALL_OW 67
// PowellSupport3 ;
6902: CALL 2975 0 0
// DialogueOn ;
6906: CALL_OW 6
// SayRadio ( Powell , DC3-Pow-1 ) ;
6910: LD_EXP 22
6914: PPUSH
6915: LD_STRING DC3-Pow-1
6917: PPUSH
6918: CALL_OW 94
// Say ( JMM , DC3-JMM-1 ) ;
6922: LD_EXP 1
6926: PPUSH
6927: LD_STRING DC3-JMM-1
6929: PPUSH
6930: CALL_OW 88
// DialogueOff ;
6934: CALL_OW 7
// end ;
6938: END
// export function Legion ; var i , dec1 , dec2 , tmp , tmp2 , tmp3 , crates , oil , siberite , cr , sb , payForNeutral , payForHelp , query1 , query2 ; begin
6939: LD_INT 0
6941: PPUSH
6942: PPUSH
6943: PPUSH
6944: PPUSH
6945: PPUSH
6946: PPUSH
6947: PPUSH
6948: PPUSH
6949: PPUSH
6950: PPUSH
6951: PPUSH
6952: PPUSH
6953: PPUSH
6954: PPUSH
6955: PPUSH
6956: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
6957: LD_ADDR_VAR 0 5
6961: PUSH
6962: LD_INT 22
6964: PUSH
6965: LD_INT 1
6967: PUSH
6968: EMPTY
6969: LIST
6970: LIST
6971: PUSH
6972: LD_INT 21
6974: PUSH
6975: LD_INT 3
6977: PUSH
6978: EMPTY
6979: LIST
6980: LIST
6981: PUSH
6982: LD_INT 2
6984: PUSH
6985: LD_INT 30
6987: PUSH
6988: LD_INT 0
6990: PUSH
6991: EMPTY
6992: LIST
6993: LIST
6994: PUSH
6995: LD_INT 30
6997: PUSH
6998: LD_INT 1
7000: PUSH
7001: EMPTY
7002: LIST
7003: LIST
7004: PUSH
7005: EMPTY
7006: LIST
7007: LIST
7008: LIST
7009: PUSH
7010: EMPTY
7011: LIST
7012: LIST
7013: LIST
7014: PPUSH
7015: CALL_OW 69
7019: ST_TO_ADDR
// crates := 0 ;
7020: LD_ADDR_VAR 0 8
7024: PUSH
7025: LD_INT 0
7027: ST_TO_ADDR
// oil := 0 ;
7028: LD_ADDR_VAR 0 9
7032: PUSH
7033: LD_INT 0
7035: ST_TO_ADDR
// siberite := 0 ;
7036: LD_ADDR_VAR 0 10
7040: PUSH
7041: LD_INT 0
7043: ST_TO_ADDR
// payForNeutral := false ;
7044: LD_ADDR_VAR 0 13
7048: PUSH
7049: LD_INT 0
7051: ST_TO_ADDR
// payForHelp := false ;
7052: LD_ADDR_VAR 0 14
7056: PUSH
7057: LD_INT 0
7059: ST_TO_ADDR
// for i in tmp do
7060: LD_ADDR_VAR 0 2
7064: PUSH
7065: LD_VAR 0 5
7069: PUSH
7070: FOR_IN
7071: IFFALSE 7162
// begin crates := crates + GetResourceType ( GetBase ( i ) , 1 ) ;
7073: LD_ADDR_VAR 0 8
7077: PUSH
7078: LD_VAR 0 8
7082: PUSH
7083: LD_VAR 0 2
7087: PPUSH
7088: CALL_OW 274
7092: PPUSH
7093: LD_INT 1
7095: PPUSH
7096: CALL_OW 275
7100: PLUS
7101: ST_TO_ADDR
// oil := oil + GetResourceType ( GetBase ( i ) , 2 ) ;
7102: LD_ADDR_VAR 0 9
7106: PUSH
7107: LD_VAR 0 9
7111: PUSH
7112: LD_VAR 0 2
7116: PPUSH
7117: CALL_OW 274
7121: PPUSH
7122: LD_INT 2
7124: PPUSH
7125: CALL_OW 275
7129: PLUS
7130: ST_TO_ADDR
// siberite := siberite + GetResourceType ( GetBase ( i ) , 3 ) ;
7131: LD_ADDR_VAR 0 10
7135: PUSH
7136: LD_VAR 0 10
7140: PUSH
7141: LD_VAR 0 2
7145: PPUSH
7146: CALL_OW 274
7150: PPUSH
7151: LD_INT 3
7153: PPUSH
7154: CALL_OW 275
7158: PLUS
7159: ST_TO_ADDR
// end ;
7160: GO 7070
7162: POP
7163: POP
// PrepareKurt ;
7164: CALL 4405 0 0
// if not Kurt then
7168: LD_EXP 24
7172: NOT
7173: IFFALSE 7177
// exit ;
7175: GO 9309
// ComMoveXY ( KurtVeh , 144 , 111 ) ;
7177: LD_EXP 25
7181: PPUSH
7182: LD_INT 144
7184: PPUSH
7185: LD_INT 111
7187: PPUSH
7188: CALL_OW 111
// wait ( 0 0$2 ) ;
7192: LD_INT 70
7194: PPUSH
7195: CALL_OW 67
// PlaceSeeing ( 167 , 121 , 1 , - 10 ) ;
7199: LD_INT 167
7201: PPUSH
7202: LD_INT 121
7204: PPUSH
7205: LD_INT 1
7207: PPUSH
7208: LD_INT 10
7210: NEG
7211: PPUSH
7212: CALL_OW 330
// ComExitVehicle ( Kurt ) ;
7216: LD_EXP 24
7220: PPUSH
7221: CALL_OW 121
// CenterNowOnUnits ( Kurt ) ;
7225: LD_EXP 24
7229: PPUSH
7230: CALL_OW 87
// wait ( 0 0$1 ) ;
7234: LD_INT 35
7236: PPUSH
7237: CALL_OW 67
// DialogueOn ;
7241: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D3-Sol1-1 ,  ) ;
7245: LD_INT 22
7247: PUSH
7248: LD_INT 1
7250: PUSH
7251: EMPTY
7252: LIST
7253: LIST
7254: PUSH
7255: LD_INT 26
7257: PUSH
7258: LD_INT 1
7260: PUSH
7261: EMPTY
7262: LIST
7263: LIST
7264: PUSH
7265: LD_INT 2
7267: PUSH
7268: LD_INT 25
7270: PUSH
7271: LD_INT 1
7273: PUSH
7274: EMPTY
7275: LIST
7276: LIST
7277: PUSH
7278: LD_INT 25
7280: PUSH
7281: LD_INT 2
7283: PUSH
7284: EMPTY
7285: LIST
7286: LIST
7287: PUSH
7288: LD_INT 25
7290: PUSH
7291: LD_INT 3
7293: PUSH
7294: EMPTY
7295: LIST
7296: LIST
7297: PUSH
7298: LD_INT 25
7300: PUSH
7301: LD_INT 4
7303: PUSH
7304: EMPTY
7305: LIST
7306: LIST
7307: PUSH
7308: LD_INT 25
7310: PUSH
7311: LD_INT 5
7313: PUSH
7314: EMPTY
7315: LIST
7316: LIST
7317: PUSH
7318: LD_INT 25
7320: PUSH
7321: LD_INT 8
7323: PUSH
7324: EMPTY
7325: LIST
7326: LIST
7327: PUSH
7328: EMPTY
7329: LIST
7330: LIST
7331: LIST
7332: LIST
7333: LIST
7334: LIST
7335: LIST
7336: PUSH
7337: EMPTY
7338: LIST
7339: LIST
7340: LIST
7341: PPUSH
7342: CALL_OW 69
7346: PPUSH
7347: LD_STRING D3-Sol1-1
7349: PPUSH
7350: LD_STRING 
7352: PPUSH
7353: CALL 12328 0 3
// if KurtStatus then
7357: LD_EXP 26
7361: IFFALSE 7461
// begin Say ( Kurt , D3-Kurt-1 ) ;
7363: LD_EXP 24
7367: PPUSH
7368: LD_STRING D3-Kurt-1
7370: PPUSH
7371: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
7375: LD_EXP 1
7379: PPUSH
7380: LD_STRING D3-JMM-1
7382: PPUSH
7383: CALL_OW 88
// Say ( Kurt , D3-Kurt-2 ) ;
7387: LD_EXP 24
7391: PPUSH
7392: LD_STRING D3-Kurt-2
7394: PPUSH
7395: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
7399: LD_EXP 1
7403: PPUSH
7404: LD_STRING D3-JMM-2
7406: PPUSH
7407: CALL_OW 88
// Say ( Kurt , D3-Kurt-4 ) ;
7411: LD_EXP 24
7415: PPUSH
7416: LD_STRING D3-Kurt-4
7418: PPUSH
7419: CALL_OW 88
// Say ( JMM , D3-JMM-4 ) ;
7423: LD_EXP 1
7427: PPUSH
7428: LD_STRING D3-JMM-4
7430: PPUSH
7431: CALL_OW 88
// Say ( Kurt , D3-Kurt-5 ) ;
7435: LD_EXP 24
7439: PPUSH
7440: LD_STRING D3-Kurt-5
7442: PPUSH
7443: CALL_OW 88
// Say ( Kurt , D3-Kurt-5a ) ;
7447: LD_EXP 24
7451: PPUSH
7452: LD_STRING D3-Kurt-5a
7454: PPUSH
7455: CALL_OW 88
// end else
7459: GO 7557
// begin Say ( Kurt , D3-Kurt-1 ) ;
7461: LD_EXP 24
7465: PPUSH
7466: LD_STRING D3-Kurt-1
7468: PPUSH
7469: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
7473: LD_EXP 1
7477: PPUSH
7478: LD_STRING D3-JMM-1
7480: PPUSH
7481: CALL_OW 88
// Say ( Kurt , D3-Kurt-3 ) ;
7485: LD_EXP 24
7489: PPUSH
7490: LD_STRING D3-Kurt-3
7492: PPUSH
7493: CALL_OW 88
// Say ( JMM , D3-JMM-3 ) ;
7497: LD_EXP 1
7501: PPUSH
7502: LD_STRING D3-JMM-3
7504: PPUSH
7505: CALL_OW 88
// Say ( Kurt , D3-Kurt-4 ) ;
7509: LD_EXP 24
7513: PPUSH
7514: LD_STRING D3-Kurt-4
7516: PPUSH
7517: CALL_OW 88
// Say ( JMM , D3-JMM-4 ) ;
7521: LD_EXP 1
7525: PPUSH
7526: LD_STRING D3-JMM-4
7528: PPUSH
7529: CALL_OW 88
// Say ( Kurt , D3-Kurt-5 ) ;
7533: LD_EXP 24
7537: PPUSH
7538: LD_STRING D3-Kurt-5
7540: PPUSH
7541: CALL_OW 88
// Say ( Kurt , D3-Kurt-5b ) ;
7545: LD_EXP 24
7549: PPUSH
7550: LD_STRING D3-Kurt-5b
7552: PPUSH
7553: CALL_OW 88
// end ; if crates >= [ 120 , 60 ] [ KurtStatus + 1 ] and siberite >= [ 120 , 60 ] [ KurtStatus + 1 ] then
7557: LD_VAR 0 8
7561: PUSH
7562: LD_INT 120
7564: PUSH
7565: LD_INT 60
7567: PUSH
7568: EMPTY
7569: LIST
7570: LIST
7571: PUSH
7572: LD_EXP 26
7576: PUSH
7577: LD_INT 1
7579: PLUS
7580: ARRAY
7581: GREATEREQUAL
7582: PUSH
7583: LD_VAR 0 10
7587: PUSH
7588: LD_INT 120
7590: PUSH
7591: LD_INT 60
7593: PUSH
7594: EMPTY
7595: LIST
7596: LIST
7597: PUSH
7598: LD_EXP 26
7602: PUSH
7603: LD_INT 1
7605: PLUS
7606: ARRAY
7607: GREATEREQUAL
7608: AND
7609: IFFALSE 7661
// dec1 = SelectiveQuery ( [ Q2 , Q2K ] [ KurtStatus + 1 ] , [ 1 , 2 , 3 , 4 ] ) else
7611: LD_ADDR_VAR 0 3
7615: PUSH
7616: LD_STRING Q2
7618: PUSH
7619: LD_STRING Q2K
7621: PUSH
7622: EMPTY
7623: LIST
7624: LIST
7625: PUSH
7626: LD_EXP 26
7630: PUSH
7631: LD_INT 1
7633: PLUS
7634: ARRAY
7635: PPUSH
7636: LD_INT 1
7638: PUSH
7639: LD_INT 2
7641: PUSH
7642: LD_INT 3
7644: PUSH
7645: LD_INT 4
7647: PUSH
7648: EMPTY
7649: LIST
7650: LIST
7651: LIST
7652: LIST
7653: PPUSH
7654: CALL_OW 98
7658: ST_TO_ADDR
7659: GO 7705
// dec1 = SelectiveQuery ( [ Q2 , Q2K ] [ KurtStatus + 1 ] , [ 1 , 3 , 4 ] ) ;
7661: LD_ADDR_VAR 0 3
7665: PUSH
7666: LD_STRING Q2
7668: PUSH
7669: LD_STRING Q2K
7671: PUSH
7672: EMPTY
7673: LIST
7674: LIST
7675: PUSH
7676: LD_EXP 26
7680: PUSH
7681: LD_INT 1
7683: PLUS
7684: ARRAY
7685: PPUSH
7686: LD_INT 1
7688: PUSH
7689: LD_INT 3
7691: PUSH
7692: LD_INT 4
7694: PUSH
7695: EMPTY
7696: LIST
7697: LIST
7698: LIST
7699: PPUSH
7700: CALL_OW 98
7704: ST_TO_ADDR
// if dec1 = 1 then
7705: LD_VAR 0 3
7709: PUSH
7710: LD_INT 1
7712: EQUAL
7713: IFFALSE 7747
// begin Say ( JMM , D3Ka-JMM-1 ) ;
7715: LD_EXP 1
7719: PPUSH
7720: LD_STRING D3Ka-JMM-1
7722: PPUSH
7723: CALL_OW 88
// Say ( Kurt , D3Ka-Kurt-1 ) ;
7727: LD_EXP 24
7731: PPUSH
7732: LD_STRING D3Ka-Kurt-1
7734: PPUSH
7735: CALL_OW 88
// warWithLegion = 1 ;
7739: LD_ADDR_EXP 30
7743: PUSH
7744: LD_INT 1
7746: ST_TO_ADDR
// end ; if dec1 = 2 then
7747: LD_VAR 0 3
7751: PUSH
7752: LD_INT 2
7754: EQUAL
7755: IFFALSE 7839
// begin Say ( JMM , D3Kb-JMM-1 ) ;
7757: LD_EXP 1
7761: PPUSH
7762: LD_STRING D3Kb-JMM-1
7764: PPUSH
7765: CALL_OW 88
// Say ( Kurt , D3Kb-Kurt-1 ) ;
7769: LD_EXP 24
7773: PPUSH
7774: LD_STRING D3Kb-Kurt-1
7776: PPUSH
7777: CALL_OW 88
// cr := [ 120 , 60 ] [ KurtStatus + 1 ] ;
7781: LD_ADDR_VAR 0 11
7785: PUSH
7786: LD_INT 120
7788: PUSH
7789: LD_INT 60
7791: PUSH
7792: EMPTY
7793: LIST
7794: LIST
7795: PUSH
7796: LD_EXP 26
7800: PUSH
7801: LD_INT 1
7803: PLUS
7804: ARRAY
7805: ST_TO_ADDR
// sb := [ 120 , 60 ] [ KurtStatus + 1 ] ;
7806: LD_ADDR_VAR 0 12
7810: PUSH
7811: LD_INT 120
7813: PUSH
7814: LD_INT 60
7816: PUSH
7817: EMPTY
7818: LIST
7819: LIST
7820: PUSH
7821: LD_EXP 26
7825: PUSH
7826: LD_INT 1
7828: PLUS
7829: ARRAY
7830: ST_TO_ADDR
// payForNeutral := true ;
7831: LD_ADDR_VAR 0 13
7835: PUSH
7836: LD_INT 1
7838: ST_TO_ADDR
// end ; if dec1 = 3 then
7839: LD_VAR 0 3
7843: PUSH
7844: LD_INT 3
7846: EQUAL
7847: IFFALSE 8082
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
7849: LD_EXP 1
7853: PPUSH
7854: LD_STRING D3Kc1-JMM-1
7856: PPUSH
7857: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-1 ) ;
7861: LD_EXP 24
7865: PPUSH
7866: LD_STRING D3Kc1-Kurt-1
7868: PPUSH
7869: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
7873: LD_EXP 1
7877: PPUSH
7878: LD_STRING D3Kc1-JMM-2
7880: PPUSH
7881: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-2 ) ;
7885: LD_EXP 24
7889: PPUSH
7890: LD_STRING D3Kc1-Kurt-2
7892: PPUSH
7893: CALL_OW 88
// askSiberite = 1 ;
7897: LD_ADDR_EXP 32
7901: PUSH
7902: LD_INT 1
7904: ST_TO_ADDR
// dec2 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
7905: LD_ADDR_VAR 0 4
7909: PUSH
7910: LD_STRING Q2b
7912: PPUSH
7913: LD_INT 1
7915: PUSH
7916: LD_INT 2
7918: PUSH
7919: LD_INT 3
7921: PUSH
7922: EMPTY
7923: LIST
7924: LIST
7925: LIST
7926: PPUSH
7927: CALL_OW 98
7931: ST_TO_ADDR
// if dec2 = 1 then
7932: LD_VAR 0 4
7936: PUSH
7937: LD_INT 1
7939: EQUAL
7940: IFFALSE 7974
// begin Say ( JMM , D4a-JMM-1 ) ;
7942: LD_EXP 1
7946: PPUSH
7947: LD_STRING D4a-JMM-1
7949: PPUSH
7950: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
7954: LD_EXP 24
7958: PPUSH
7959: LD_STRING D4b-Kurt-1
7961: PPUSH
7962: CALL_OW 88
// warWithLegion = 1 ;
7966: LD_ADDR_EXP 30
7970: PUSH
7971: LD_INT 1
7973: ST_TO_ADDR
// end ; if dec2 = 2 then
7974: LD_VAR 0 4
7978: PUSH
7979: LD_INT 2
7981: EQUAL
7982: IFFALSE 8016
// begin Say ( JMM , D4b-JMM-1 ) ;
7984: LD_EXP 1
7988: PPUSH
7989: LD_STRING D4b-JMM-1
7991: PPUSH
7992: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
7996: LD_EXP 24
8000: PPUSH
8001: LD_STRING D4b-Kurt-1
8003: PPUSH
8004: CALL_OW 88
// warWithLegion = 1 ;
8008: LD_ADDR_EXP 30
8012: PUSH
8013: LD_INT 1
8015: ST_TO_ADDR
// end ; if dec2 = 3 then
8016: LD_VAR 0 4
8020: PUSH
8021: LD_INT 3
8023: EQUAL
8024: IFFALSE 8082
// begin Say ( JMM , D4c-JMM-1 ) ;
8026: LD_EXP 1
8030: PPUSH
8031: LD_STRING D4c-JMM-1
8033: PPUSH
8034: CALL_OW 88
// Say ( Kurt , D4c-Kurt-1 ) ;
8038: LD_EXP 24
8042: PPUSH
8043: LD_STRING D4c-Kurt-1
8045: PPUSH
8046: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
8050: LD_EXP 1
8054: PPUSH
8055: LD_STRING D4c-JMM-2
8057: PPUSH
8058: CALL_OW 88
// Say ( Kurt , D4c-Kurt-2 ) ;
8062: LD_EXP 24
8066: PPUSH
8067: LD_STRING D4c-Kurt-2
8069: PPUSH
8070: CALL_OW 88
// fakeInfo = 1 ;
8074: LD_ADDR_EXP 31
8078: PUSH
8079: LD_INT 1
8081: ST_TO_ADDR
// end ; end ; if dec1 = 4 then
8082: LD_VAR 0 3
8086: PUSH
8087: LD_INT 4
8089: EQUAL
8090: IFFALSE 9165
// begin Say ( JMM , D3Kd-JMM-1 ) ;
8092: LD_EXP 1
8096: PPUSH
8097: LD_STRING D3Kd-JMM-1
8099: PPUSH
8100: CALL_OW 88
// if crates >= [ 200 , 120 ] [ KurtStatus + 1 ] and siberite >= [ 200 , 120 ] [ KurtStatus + 1 ] then
8104: LD_VAR 0 8
8108: PUSH
8109: LD_INT 200
8111: PUSH
8112: LD_INT 120
8114: PUSH
8115: EMPTY
8116: LIST
8117: LIST
8118: PUSH
8119: LD_EXP 26
8123: PUSH
8124: LD_INT 1
8126: PLUS
8127: ARRAY
8128: GREATEREQUAL
8129: PUSH
8130: LD_VAR 0 10
8134: PUSH
8135: LD_INT 200
8137: PUSH
8138: LD_INT 120
8140: PUSH
8141: EMPTY
8142: LIST
8143: LIST
8144: PUSH
8145: LD_EXP 26
8149: PUSH
8150: LD_INT 1
8152: PLUS
8153: ARRAY
8154: GREATEREQUAL
8155: AND
8156: IFFALSE 8208
// dec2 = SelectiveQuery ( [ Q2a , Q2aK ] [ KurtStatus + 1 ] , [ 1 , 2 , 3 , 4 ] ) else
8158: LD_ADDR_VAR 0 4
8162: PUSH
8163: LD_STRING Q2a
8165: PUSH
8166: LD_STRING Q2aK
8168: PUSH
8169: EMPTY
8170: LIST
8171: LIST
8172: PUSH
8173: LD_EXP 26
8177: PUSH
8178: LD_INT 1
8180: PLUS
8181: ARRAY
8182: PPUSH
8183: LD_INT 1
8185: PUSH
8186: LD_INT 2
8188: PUSH
8189: LD_INT 3
8191: PUSH
8192: LD_INT 4
8194: PUSH
8195: EMPTY
8196: LIST
8197: LIST
8198: LIST
8199: LIST
8200: PPUSH
8201: CALL_OW 98
8205: ST_TO_ADDR
8206: GO 8385
// if crates >= [ 120 , 60 ] [ KurtStatus + 1 ] and siberite >= [ 120 , 60 ] [ KurtStatus + 1 ] then
8208: LD_VAR 0 8
8212: PUSH
8213: LD_INT 120
8215: PUSH
8216: LD_INT 60
8218: PUSH
8219: EMPTY
8220: LIST
8221: LIST
8222: PUSH
8223: LD_EXP 26
8227: PUSH
8228: LD_INT 1
8230: PLUS
8231: ARRAY
8232: GREATEREQUAL
8233: PUSH
8234: LD_VAR 0 10
8238: PUSH
8239: LD_INT 120
8241: PUSH
8242: LD_INT 60
8244: PUSH
8245: EMPTY
8246: LIST
8247: LIST
8248: PUSH
8249: LD_EXP 26
8253: PUSH
8254: LD_INT 1
8256: PLUS
8257: ARRAY
8258: GREATEREQUAL
8259: AND
8260: IFFALSE 8308
// dec2 = SelectiveQuery ( [ Q2a , Q2aK ] [ KurtStatus + 1 ] , [ 1 , 2 , 4 ] ) else
8262: LD_ADDR_VAR 0 4
8266: PUSH
8267: LD_STRING Q2a
8269: PUSH
8270: LD_STRING Q2aK
8272: PUSH
8273: EMPTY
8274: LIST
8275: LIST
8276: PUSH
8277: LD_EXP 26
8281: PUSH
8282: LD_INT 1
8284: PLUS
8285: ARRAY
8286: PPUSH
8287: LD_INT 1
8289: PUSH
8290: LD_INT 2
8292: PUSH
8293: LD_INT 4
8295: PUSH
8296: EMPTY
8297: LIST
8298: LIST
8299: LIST
8300: PPUSH
8301: CALL_OW 98
8305: ST_TO_ADDR
8306: GO 8385
// begin case Query ( [ Q2d , Q2dK ] [ KurtStatus + 1 ] ) of 1 :
8308: LD_STRING Q2d
8310: PUSH
8311: LD_STRING Q2dK
8313: PUSH
8314: EMPTY
8315: LIST
8316: LIST
8317: PUSH
8318: LD_EXP 26
8322: PUSH
8323: LD_INT 1
8325: PLUS
8326: ARRAY
8327: PPUSH
8328: CALL_OW 97
8332: PUSH
8333: LD_INT 1
8335: DOUBLE
8336: EQUAL
8337: IFTRUE 8341
8339: GO 8344
8341: POP
// ; end ;
8342: GO 8345
8344: POP
// dec2 := 0 ;
8345: LD_ADDR_VAR 0 4
8349: PUSH
8350: LD_INT 0
8352: ST_TO_ADDR
// Say ( JMM , D3Kc1-JMM-1 ) ;
8353: LD_EXP 1
8357: PPUSH
8358: LD_STRING D3Kc1-JMM-1
8360: PPUSH
8361: CALL_OW 88
// Say ( Kurt , D3Kc2-Kurt-1 ) ;
8365: LD_EXP 24
8369: PPUSH
8370: LD_STRING D3Kc2-Kurt-1
8372: PPUSH
8373: CALL_OW 88
// warWithLegion := 1 ;
8377: LD_ADDR_EXP 30
8381: PUSH
8382: LD_INT 1
8384: ST_TO_ADDR
// end ; if dec2 = 1 then
8385: LD_VAR 0 4
8389: PUSH
8390: LD_INT 1
8392: EQUAL
8393: IFFALSE 8427
// begin Say ( JMM , D5Ka-JMM-1 ) ;
8395: LD_EXP 1
8399: PPUSH
8400: LD_STRING D5Ka-JMM-1
8402: PPUSH
8403: CALL_OW 88
// Say ( Kurt , D5Ka-Kurt-1 ) ;
8407: LD_EXP 24
8411: PPUSH
8412: LD_STRING D5Ka-Kurt-1
8414: PPUSH
8415: CALL_OW 88
// warWithLegion = 1 ;
8419: LD_ADDR_EXP 30
8423: PUSH
8424: LD_INT 1
8426: ST_TO_ADDR
// end ; if dec2 = 2 then
8427: LD_VAR 0 4
8431: PUSH
8432: LD_INT 2
8434: EQUAL
8435: IFFALSE 8519
// begin Say ( JMM , D3Kb-JMM-1 ) ;
8437: LD_EXP 1
8441: PPUSH
8442: LD_STRING D3Kb-JMM-1
8444: PPUSH
8445: CALL_OW 88
// Say ( Kurt , D3Kb-Kurt-1 ) ;
8449: LD_EXP 24
8453: PPUSH
8454: LD_STRING D3Kb-Kurt-1
8456: PPUSH
8457: CALL_OW 88
// cr := [ 120 , 60 ] [ KurtStatus + 1 ] ;
8461: LD_ADDR_VAR 0 11
8465: PUSH
8466: LD_INT 120
8468: PUSH
8469: LD_INT 60
8471: PUSH
8472: EMPTY
8473: LIST
8474: LIST
8475: PUSH
8476: LD_EXP 26
8480: PUSH
8481: LD_INT 1
8483: PLUS
8484: ARRAY
8485: ST_TO_ADDR
// sb := [ 120 , 60 ] [ KurtStatus + 1 ] ;
8486: LD_ADDR_VAR 0 12
8490: PUSH
8491: LD_INT 120
8493: PUSH
8494: LD_INT 60
8496: PUSH
8497: EMPTY
8498: LIST
8499: LIST
8500: PUSH
8501: LD_EXP 26
8505: PUSH
8506: LD_INT 1
8508: PLUS
8509: ARRAY
8510: ST_TO_ADDR
// payForNeutral := true ;
8511: LD_ADDR_VAR 0 13
8515: PUSH
8516: LD_INT 1
8518: ST_TO_ADDR
// end ; if dec2 = 3 then
8519: LD_VAR 0 4
8523: PUSH
8524: LD_INT 3
8526: EQUAL
8527: IFFALSE 8611
// begin Say ( JMM , D3Ke-JMM-1 ) ;
8529: LD_EXP 1
8533: PPUSH
8534: LD_STRING D3Ke-JMM-1
8536: PPUSH
8537: CALL_OW 88
// Say ( Kurt , D3Ke-Kurt-1 ) ;
8541: LD_EXP 24
8545: PPUSH
8546: LD_STRING D3Ke-Kurt-1
8548: PPUSH
8549: CALL_OW 88
// cr := [ 200 , 120 ] [ KurtStatus + 1 ] ;
8553: LD_ADDR_VAR 0 11
8557: PUSH
8558: LD_INT 200
8560: PUSH
8561: LD_INT 120
8563: PUSH
8564: EMPTY
8565: LIST
8566: LIST
8567: PUSH
8568: LD_EXP 26
8572: PUSH
8573: LD_INT 1
8575: PLUS
8576: ARRAY
8577: ST_TO_ADDR
// sb := [ 200 , 120 ] [ KurtStatus + 1 ] ;
8578: LD_ADDR_VAR 0 12
8582: PUSH
8583: LD_INT 200
8585: PUSH
8586: LD_INT 120
8588: PUSH
8589: EMPTY
8590: LIST
8591: LIST
8592: PUSH
8593: LD_EXP 26
8597: PUSH
8598: LD_INT 1
8600: PLUS
8601: ARRAY
8602: ST_TO_ADDR
// payForHelp := true ;
8603: LD_ADDR_VAR 0 14
8607: PUSH
8608: LD_INT 1
8610: ST_TO_ADDR
// end ; if dec2 = 4 then
8611: LD_VAR 0 4
8615: PUSH
8616: LD_INT 4
8618: EQUAL
8619: IFFALSE 8854
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
8621: LD_EXP 1
8625: PPUSH
8626: LD_STRING D3Kc1-JMM-1
8628: PPUSH
8629: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-1 ) ;
8633: LD_EXP 24
8637: PPUSH
8638: LD_STRING D3Kc1-Kurt-1
8640: PPUSH
8641: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
8645: LD_EXP 1
8649: PPUSH
8650: LD_STRING D3Kc1-JMM-2
8652: PPUSH
8653: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-2 ) ;
8657: LD_EXP 24
8661: PPUSH
8662: LD_STRING D3Kc1-Kurt-2
8664: PPUSH
8665: CALL_OW 88
// askSiberite = 1 ;
8669: LD_ADDR_EXP 32
8673: PUSH
8674: LD_INT 1
8676: ST_TO_ADDR
// dec2 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
8677: LD_ADDR_VAR 0 4
8681: PUSH
8682: LD_STRING Q2b
8684: PPUSH
8685: LD_INT 1
8687: PUSH
8688: LD_INT 2
8690: PUSH
8691: LD_INT 3
8693: PUSH
8694: EMPTY
8695: LIST
8696: LIST
8697: LIST
8698: PPUSH
8699: CALL_OW 98
8703: ST_TO_ADDR
// if dec2 = 1 then
8704: LD_VAR 0 4
8708: PUSH
8709: LD_INT 1
8711: EQUAL
8712: IFFALSE 8746
// begin Say ( JMM , D4a-JMM-1 ) ;
8714: LD_EXP 1
8718: PPUSH
8719: LD_STRING D4a-JMM-1
8721: PPUSH
8722: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
8726: LD_EXP 24
8730: PPUSH
8731: LD_STRING D4b-Kurt-1
8733: PPUSH
8734: CALL_OW 88
// warWithLegion = 1 ;
8738: LD_ADDR_EXP 30
8742: PUSH
8743: LD_INT 1
8745: ST_TO_ADDR
// end ; if dec2 = 2 then
8746: LD_VAR 0 4
8750: PUSH
8751: LD_INT 2
8753: EQUAL
8754: IFFALSE 8788
// begin Say ( JMM , D4b-JMM-1 ) ;
8756: LD_EXP 1
8760: PPUSH
8761: LD_STRING D4b-JMM-1
8763: PPUSH
8764: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
8768: LD_EXP 24
8772: PPUSH
8773: LD_STRING D4b-Kurt-1
8775: PPUSH
8776: CALL_OW 88
// warWithLegion = 1 ;
8780: LD_ADDR_EXP 30
8784: PUSH
8785: LD_INT 1
8787: ST_TO_ADDR
// end ; if dec2 = 3 then
8788: LD_VAR 0 4
8792: PUSH
8793: LD_INT 3
8795: EQUAL
8796: IFFALSE 8854
// begin Say ( JMM , D4c-JMM-1 ) ;
8798: LD_EXP 1
8802: PPUSH
8803: LD_STRING D4c-JMM-1
8805: PPUSH
8806: CALL_OW 88
// Say ( Kurt , D4c-Kurt-1 ) ;
8810: LD_EXP 24
8814: PPUSH
8815: LD_STRING D4c-Kurt-1
8817: PPUSH
8818: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
8822: LD_EXP 1
8826: PPUSH
8827: LD_STRING D4c-JMM-2
8829: PPUSH
8830: CALL_OW 88
// Say ( Kurt , D4c-Kurt-2 ) ;
8834: LD_EXP 24
8838: PPUSH
8839: LD_STRING D4c-Kurt-2
8841: PPUSH
8842: CALL_OW 88
// fakeInfo = 1 ;
8846: LD_ADDR_EXP 31
8850: PUSH
8851: LD_INT 1
8853: ST_TO_ADDR
// end ; end ; if payForNeutral or payForHelp then
8854: LD_VAR 0 13
8858: PUSH
8859: LD_VAR 0 14
8863: OR
8864: IFFALSE 9165
// begin for i in tmp do
8866: LD_ADDR_VAR 0 2
8870: PUSH
8871: LD_VAR 0 5
8875: PUSH
8876: FOR_IN
8877: IFFALSE 9163
// begin tmp2 := GetResourceType ( GetBase ( i ) , 1 ) ;
8879: LD_ADDR_VAR 0 6
8883: PUSH
8884: LD_VAR 0 2
8888: PPUSH
8889: CALL_OW 274
8893: PPUSH
8894: LD_INT 1
8896: PPUSH
8897: CALL_OW 275
8901: ST_TO_ADDR
// tmp3 := GetResourceType ( GetBase ( i ) , 3 ) ;
8902: LD_ADDR_VAR 0 7
8906: PUSH
8907: LD_VAR 0 2
8911: PPUSH
8912: CALL_OW 274
8916: PPUSH
8917: LD_INT 3
8919: PPUSH
8920: CALL_OW 275
8924: ST_TO_ADDR
// if cr then
8925: LD_VAR 0 11
8929: IFFALSE 9043
// begin if tmp2 and tmp2 < cr then
8931: LD_VAR 0 6
8935: PUSH
8936: LD_VAR 0 6
8940: PUSH
8941: LD_VAR 0 11
8945: LESS
8946: AND
8947: IFFALSE 8995
// begin SetResourceType ( GetBase ( i ) , 1 , cr - tmp2 ) ;
8949: LD_VAR 0 2
8953: PPUSH
8954: CALL_OW 274
8958: PPUSH
8959: LD_INT 1
8961: PPUSH
8962: LD_VAR 0 11
8966: PUSH
8967: LD_VAR 0 6
8971: MINUS
8972: PPUSH
8973: CALL_OW 277
// cr := cr - tmp2 ;
8977: LD_ADDR_VAR 0 11
8981: PUSH
8982: LD_VAR 0 11
8986: PUSH
8987: LD_VAR 0 6
8991: MINUS
8992: ST_TO_ADDR
// end else
8993: GO 9043
// if tmp2 > cr then
8995: LD_VAR 0 6
8999: PUSH
9000: LD_VAR 0 11
9004: GREATER
9005: IFFALSE 9043
// begin SetResourceType ( GetBase ( i ) , 1 , tmp2 - cr ) ;
9007: LD_VAR 0 2
9011: PPUSH
9012: CALL_OW 274
9016: PPUSH
9017: LD_INT 1
9019: PPUSH
9020: LD_VAR 0 6
9024: PUSH
9025: LD_VAR 0 11
9029: MINUS
9030: PPUSH
9031: CALL_OW 277
// cr := 0 ;
9035: LD_ADDR_VAR 0 11
9039: PUSH
9040: LD_INT 0
9042: ST_TO_ADDR
// end ; end ; if sb then
9043: LD_VAR 0 12
9047: IFFALSE 9161
// begin if tmp3 and tmp3 < sb then
9049: LD_VAR 0 7
9053: PUSH
9054: LD_VAR 0 7
9058: PUSH
9059: LD_VAR 0 12
9063: LESS
9064: AND
9065: IFFALSE 9113
// begin SetResourceType ( GetBase ( i ) , 3 , sb - tmp3 ) ;
9067: LD_VAR 0 2
9071: PPUSH
9072: CALL_OW 274
9076: PPUSH
9077: LD_INT 3
9079: PPUSH
9080: LD_VAR 0 12
9084: PUSH
9085: LD_VAR 0 7
9089: MINUS
9090: PPUSH
9091: CALL_OW 277
// sb := sb - tmp3 ;
9095: LD_ADDR_VAR 0 12
9099: PUSH
9100: LD_VAR 0 12
9104: PUSH
9105: LD_VAR 0 7
9109: MINUS
9110: ST_TO_ADDR
// end else
9111: GO 9161
// if tmp3 > sb then
9113: LD_VAR 0 7
9117: PUSH
9118: LD_VAR 0 12
9122: GREATER
9123: IFFALSE 9161
// begin SetResourceType ( GetBase ( i ) , 3 , tmp3 - sb ) ;
9125: LD_VAR 0 2
9129: PPUSH
9130: CALL_OW 274
9134: PPUSH
9135: LD_INT 3
9137: PPUSH
9138: LD_VAR 0 7
9142: PUSH
9143: LD_VAR 0 12
9147: MINUS
9148: PPUSH
9149: CALL_OW 277
// sb := 0 ;
9153: LD_ADDR_VAR 0 12
9157: PUSH
9158: LD_INT 0
9160: ST_TO_ADDR
// end ; end ; end ;
9161: GO 8876
9163: POP
9164: POP
// end ; end ; DialogueOff ;
9165: CALL_OW 7
// RemoveSeeing ( 167 , 121 , 1 ) ;
9169: LD_INT 167
9171: PPUSH
9172: LD_INT 121
9174: PPUSH
9175: LD_INT 1
9177: PPUSH
9178: CALL_OW 331
// ComEnterUnit ( Kurt , KurtVeh ) ;
9182: LD_EXP 24
9186: PPUSH
9187: LD_EXP 25
9191: PPUSH
9192: CALL_OW 120
// wait ( 0 0$1 ) ;
9196: LD_INT 35
9198: PPUSH
9199: CALL_OW 67
// ComMoveToArea ( KurtVeh , PlayerSpawn ) ;
9203: LD_EXP 25
9207: PPUSH
9208: LD_INT 4
9210: PPUSH
9211: CALL_OW 113
// wait ( 0 0$3 ) ;
9215: LD_INT 105
9217: PPUSH
9218: CALL_OW 67
// RemoveUnit ( Kurt ) ;
9222: LD_EXP 24
9226: PPUSH
9227: CALL_OW 64
// RemoveUnit ( KurtVeh ) ;
9231: LD_EXP 25
9235: PPUSH
9236: CALL_OW 64
// wait ( 0 0$3 ) ;
9240: LD_INT 105
9242: PPUSH
9243: CALL_OW 67
// if payForHelp then
9247: LD_VAR 0 14
9251: IFFALSE 9309
// begin HiddenCamera ( 36 , 57 , 1 ) ;
9253: LD_INT 36
9255: PPUSH
9256: LD_INT 57
9258: PPUSH
9259: LD_INT 1
9261: PPUSH
9262: CALL_OW 244
// HiddenCamera ( 51 , 63 , 1 ) ;
9266: LD_INT 51
9268: PPUSH
9269: LD_INT 63
9271: PPUSH
9272: LD_INT 1
9274: PPUSH
9275: CALL_OW 244
// HiddenCamera ( 93 , 65 , 1 ) ;
9279: LD_INT 93
9281: PPUSH
9282: LD_INT 65
9284: PPUSH
9285: LD_INT 1
9287: PPUSH
9288: CALL_OW 244
// HiddenCamera ( 42 , 12 , 1 ) ;
9292: LD_INT 42
9294: PPUSH
9295: LD_INT 12
9297: PPUSH
9298: LD_INT 1
9300: PPUSH
9301: CALL_OW 244
// PrepareLegionForPlayer ;
9305: CALL 4608 0 0
// end ; end ;
9309: LD_VAR 0 1
9313: RET
// every 0 0$10 trigger warWithLegion = 1 do
9314: LD_EXP 30
9318: PUSH
9319: LD_INT 1
9321: EQUAL
9322: IFFALSE 9331
9324: GO 9326
9326: DISABLE
// PrepareAttackLegion ;
9327: CALL 5272 0 0
9331: END
// every 0 0$1 trigger IsPlaced ( amCargo1 ) and not GetCargo ( amCargo1 , 1 ) and not GetCargo ( amCargo1 , 2 ) and not GetCargo ( amCargo1 , 3 ) do
9332: LD_EXP 15
9336: PPUSH
9337: CALL_OW 305
9341: PUSH
9342: LD_EXP 15
9346: PPUSH
9347: LD_INT 1
9349: PPUSH
9350: CALL_OW 289
9354: NOT
9355: AND
9356: PUSH
9357: LD_EXP 15
9361: PPUSH
9362: LD_INT 2
9364: PPUSH
9365: CALL_OW 289
9369: NOT
9370: AND
9371: PUSH
9372: LD_EXP 15
9376: PPUSH
9377: LD_INT 3
9379: PPUSH
9380: CALL_OW 289
9384: NOT
9385: AND
9386: IFFALSE 9403
9388: GO 9390
9390: DISABLE
// SetSide ( amCargo1 , 4 ) ;
9391: LD_EXP 15
9395: PPUSH
9396: LD_INT 4
9398: PPUSH
9399: CALL_OW 235
9403: END
// every 0 0$1 trigger IsPlaced ( amCargo2 ) and not GetCargo ( amCargo2 , 1 ) and not GetCargo ( amCargo2 , 2 ) and not GetCargo ( amCargo2 , 3 ) do
9404: LD_EXP 16
9408: PPUSH
9409: CALL_OW 305
9413: PUSH
9414: LD_EXP 16
9418: PPUSH
9419: LD_INT 1
9421: PPUSH
9422: CALL_OW 289
9426: NOT
9427: AND
9428: PUSH
9429: LD_EXP 16
9433: PPUSH
9434: LD_INT 2
9436: PPUSH
9437: CALL_OW 289
9441: NOT
9442: AND
9443: PUSH
9444: LD_EXP 16
9448: PPUSH
9449: LD_INT 3
9451: PPUSH
9452: CALL_OW 289
9456: NOT
9457: AND
9458: IFFALSE 9475
9460: GO 9462
9462: DISABLE
// SetSide ( amCargo2 , 4 ) ;
9463: LD_EXP 16
9467: PPUSH
9468: LD_INT 4
9470: PPUSH
9471: CALL_OW 235
9475: END
// every 0 0$1 trigger IsPlaced ( amCargo3 ) and not GetCargo ( amCargo3 , 1 ) and not GetCargo ( amCargo3 , 2 ) and not GetCargo ( amCargo3 , 3 ) do
9476: LD_EXP 17
9480: PPUSH
9481: CALL_OW 305
9485: PUSH
9486: LD_EXP 17
9490: PPUSH
9491: LD_INT 1
9493: PPUSH
9494: CALL_OW 289
9498: NOT
9499: AND
9500: PUSH
9501: LD_EXP 17
9505: PPUSH
9506: LD_INT 2
9508: PPUSH
9509: CALL_OW 289
9513: NOT
9514: AND
9515: PUSH
9516: LD_EXP 17
9520: PPUSH
9521: LD_INT 3
9523: PPUSH
9524: CALL_OW 289
9528: NOT
9529: AND
9530: IFFALSE 9547
9532: GO 9534
9534: DISABLE
// SetSide ( amCargo3 , 4 ) ;
9535: LD_EXP 17
9539: PPUSH
9540: LD_INT 4
9542: PPUSH
9543: CALL_OW 235
9547: END
// every 0 0$1 trigger IsPlaced ( amCargo4 ) and not GetCargo ( amCargo4 , 1 ) and not GetCargo ( amCargo4 , 2 ) and not GetCargo ( amCargo4 , 3 ) do
9548: LD_EXP 18
9552: PPUSH
9553: CALL_OW 305
9557: PUSH
9558: LD_EXP 18
9562: PPUSH
9563: LD_INT 1
9565: PPUSH
9566: CALL_OW 289
9570: NOT
9571: AND
9572: PUSH
9573: LD_EXP 18
9577: PPUSH
9578: LD_INT 2
9580: PPUSH
9581: CALL_OW 289
9585: NOT
9586: AND
9587: PUSH
9588: LD_EXP 18
9592: PPUSH
9593: LD_INT 3
9595: PPUSH
9596: CALL_OW 289
9600: NOT
9601: AND
9602: IFFALSE 9619
9604: GO 9606
9606: DISABLE
// SetSide ( amCargo4 , 4 ) ;
9607: LD_EXP 18
9611: PPUSH
9612: LD_INT 4
9614: PPUSH
9615: CALL_OW 235
9619: END
// every 0 0$1 trigger IsPlaced ( amCargo5 ) and not GetCargo ( amCargo5 , 1 ) and not GetCargo ( amCargo5 , 2 ) and not GetCargo ( amCargo5 , 3 ) and not GetCargo ( amCargo5 , 2 ) do
9620: LD_EXP 19
9624: PPUSH
9625: CALL_OW 305
9629: PUSH
9630: LD_EXP 19
9634: PPUSH
9635: LD_INT 1
9637: PPUSH
9638: CALL_OW 289
9642: NOT
9643: AND
9644: PUSH
9645: LD_EXP 19
9649: PPUSH
9650: LD_INT 2
9652: PPUSH
9653: CALL_OW 289
9657: NOT
9658: AND
9659: PUSH
9660: LD_EXP 19
9664: PPUSH
9665: LD_INT 3
9667: PPUSH
9668: CALL_OW 289
9672: NOT
9673: AND
9674: PUSH
9675: LD_EXP 19
9679: PPUSH
9680: LD_INT 2
9682: PPUSH
9683: CALL_OW 289
9687: NOT
9688: AND
9689: IFFALSE 9706
9691: GO 9693
9693: DISABLE
// SetSide ( amCargo5 , 4 ) ;
9694: LD_EXP 19
9698: PPUSH
9699: LD_INT 4
9701: PPUSH
9702: CALL_OW 235
9706: END
// every 0 0$1 trigger IsPlaced ( amCargo6 ) and not GetCargo ( amCargo6 , 1 ) and not GetCargo ( amCargo6 , 2 ) and not GetCargo ( amCargo6 , 3 ) do
9707: LD_EXP 20
9711: PPUSH
9712: CALL_OW 305
9716: PUSH
9717: LD_EXP 20
9721: PPUSH
9722: LD_INT 1
9724: PPUSH
9725: CALL_OW 289
9729: NOT
9730: AND
9731: PUSH
9732: LD_EXP 20
9736: PPUSH
9737: LD_INT 2
9739: PPUSH
9740: CALL_OW 289
9744: NOT
9745: AND
9746: PUSH
9747: LD_EXP 20
9751: PPUSH
9752: LD_INT 3
9754: PPUSH
9755: CALL_OW 289
9759: NOT
9760: AND
9761: IFFALSE 9778
9763: GO 9765
9765: DISABLE
// SetSide ( amCargo6 , 4 ) ;
9766: LD_EXP 20
9770: PPUSH
9771: LD_INT 4
9773: PPUSH
9774: CALL_OW 235
9778: END
// every 0 0$1 trigger IsPlaced ( amCargo7 ) and not GetCargo ( amCargo7 , 1 ) and not GetCargo ( amCargo7 , 2 ) and not GetCargo ( amCargo7 , 3 ) do
9779: LD_EXP 21
9783: PPUSH
9784: CALL_OW 305
9788: PUSH
9789: LD_EXP 21
9793: PPUSH
9794: LD_INT 1
9796: PPUSH
9797: CALL_OW 289
9801: NOT
9802: AND
9803: PUSH
9804: LD_EXP 21
9808: PPUSH
9809: LD_INT 2
9811: PPUSH
9812: CALL_OW 289
9816: NOT
9817: AND
9818: PUSH
9819: LD_EXP 21
9823: PPUSH
9824: LD_INT 3
9826: PPUSH
9827: CALL_OW 289
9831: NOT
9832: AND
9833: IFFALSE 9850
9835: GO 9837
9837: DISABLE
// SetSide ( amCargo7 , 4 ) ;
9838: LD_EXP 21
9842: PPUSH
9843: LD_INT 4
9845: PPUSH
9846: CALL_OW 235
9850: END
// every 0 0$1 do var i ;
9851: GO 9853
9853: DISABLE
9854: LD_INT 0
9856: PPUSH
// begin enable ;
9857: ENABLE
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
9858: LD_ADDR_VAR 0 1
9862: PUSH
9863: LD_INT 22
9865: PUSH
9866: LD_INT 4
9868: PUSH
9869: EMPTY
9870: LIST
9871: LIST
9872: PPUSH
9873: CALL_OW 69
9877: PUSH
9878: FOR_IN
9879: IFFALSE 9918
// begin ComMoveToArea ( i , PlayerSpawn ) ;
9881: LD_VAR 0 1
9885: PPUSH
9886: LD_INT 4
9888: PPUSH
9889: CALL_OW 113
// if IsInArea ( i , PlayerSpawn ) then
9893: LD_VAR 0 1
9897: PPUSH
9898: LD_INT 4
9900: PPUSH
9901: CALL_OW 308
9905: IFFALSE 9916
// RemoveUnit ( i ) ;
9907: LD_VAR 0 1
9911: PPUSH
9912: CALL_OW 64
// end ;
9916: GO 9878
9918: POP
9919: POP
// end ;
9920: PPOPN 1
9922: END
// every 0 0$1 trigger secondPass = 1 do var i , enemyVehs , dec ;
9923: LD_EXP 27
9927: PUSH
9928: LD_INT 1
9930: EQUAL
9931: IFFALSE 10370
9933: GO 9935
9935: DISABLE
9936: LD_INT 0
9938: PPUSH
9939: PPUSH
9940: PPUSH
// begin enable ;
9941: ENABLE
// enemyVehs = FilterUnitsInArea ( HillArea1 , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ;
9942: LD_ADDR_VAR 0 2
9946: PUSH
9947: LD_INT 12
9949: PPUSH
9950: LD_INT 22
9952: PUSH
9953: LD_INT 3
9955: PUSH
9956: EMPTY
9957: LIST
9958: LIST
9959: PUSH
9960: LD_INT 21
9962: PUSH
9963: LD_INT 2
9965: PUSH
9966: EMPTY
9967: LIST
9968: LIST
9969: PUSH
9970: EMPTY
9971: LIST
9972: LIST
9973: PPUSH
9974: CALL_OW 70
9978: ST_TO_ADDR
// for i in enemyVehs do
9979: LD_ADDR_VAR 0 1
9983: PUSH
9984: LD_VAR 0 2
9988: PUSH
9989: FOR_IN
9990: IFFALSE 10368
// begin if See ( 1 , i ) then
9992: LD_INT 1
9994: PPUSH
9995: LD_VAR 0 1
9999: PPUSH
10000: CALL_OW 292
10004: IFFALSE 10366
// begin disable ;
10006: DISABLE
// DialogueOn ;
10007: CALL_OW 6
// CenterNowOnUnits ( i ) ;
10011: LD_VAR 0 1
10015: PPUSH
10016: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1-Sol1-1 , DT1-FSol1-1 ) ;
10020: LD_INT 22
10022: PUSH
10023: LD_INT 1
10025: PUSH
10026: EMPTY
10027: LIST
10028: LIST
10029: PUSH
10030: LD_INT 26
10032: PUSH
10033: LD_INT 1
10035: PUSH
10036: EMPTY
10037: LIST
10038: LIST
10039: PUSH
10040: LD_INT 2
10042: PUSH
10043: LD_INT 25
10045: PUSH
10046: LD_INT 1
10048: PUSH
10049: EMPTY
10050: LIST
10051: LIST
10052: PUSH
10053: LD_INT 25
10055: PUSH
10056: LD_INT 2
10058: PUSH
10059: EMPTY
10060: LIST
10061: LIST
10062: PUSH
10063: LD_INT 25
10065: PUSH
10066: LD_INT 3
10068: PUSH
10069: EMPTY
10070: LIST
10071: LIST
10072: PUSH
10073: LD_INT 25
10075: PUSH
10076: LD_INT 4
10078: PUSH
10079: EMPTY
10080: LIST
10081: LIST
10082: PUSH
10083: LD_INT 25
10085: PUSH
10086: LD_INT 5
10088: PUSH
10089: EMPTY
10090: LIST
10091: LIST
10092: PUSH
10093: LD_INT 25
10095: PUSH
10096: LD_INT 8
10098: PUSH
10099: EMPTY
10100: LIST
10101: LIST
10102: PUSH
10103: EMPTY
10104: LIST
10105: LIST
10106: LIST
10107: LIST
10108: LIST
10109: LIST
10110: LIST
10111: PUSH
10112: EMPTY
10113: LIST
10114: LIST
10115: LIST
10116: PPUSH
10117: CALL_OW 69
10121: PPUSH
10122: LD_STRING DT1-Sol1-1
10124: PPUSH
10125: LD_STRING DT1-FSol1-1
10127: PPUSH
10128: CALL 12328 0 3
// dec = ShowQuery2 ;
10132: LD_ADDR_VAR 0 3
10136: PUSH
10137: CALL 12871 0 0
10141: ST_TO_ADDR
// if dec = 1 then
10142: LD_VAR 0 3
10146: PUSH
10147: LD_INT 1
10149: EQUAL
10150: IFFALSE 10256
// begin Say ( JMM , D2-JMM-1 ) ;
10152: LD_EXP 1
10156: PPUSH
10157: LD_STRING D2-JMM-1
10159: PPUSH
10160: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
10164: LD_EXP 22
10168: PPUSH
10169: LD_STRING D2-Pow-1
10171: PPUSH
10172: CALL_OW 94
// Say ( JMM , D2a-JMM-1 ) ;
10176: LD_EXP 1
10180: PPUSH
10181: LD_STRING D2a-JMM-1
10183: PPUSH
10184: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-1 ) ;
10188: LD_EXP 22
10192: PPUSH
10193: LD_STRING D2a-Pow-1
10195: PPUSH
10196: CALL_OW 94
// Say ( JMM , D2a-JMM-2 ) ;
10200: LD_EXP 1
10204: PPUSH
10205: LD_STRING D2a-JMM-2
10207: PPUSH
10208: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
10212: LD_EXP 22
10216: PPUSH
10217: LD_STRING D2a-Pow-2
10219: PPUSH
10220: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
10224: LD_EXP 1
10228: PPUSH
10229: LD_STRING D2a-JMM-3
10231: PPUSH
10232: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
10236: LD_EXP 22
10240: PPUSH
10241: LD_STRING D2a-Pow-3
10243: PPUSH
10244: CALL_OW 94
// secondPass = 2 ;
10248: LD_ADDR_EXP 27
10252: PUSH
10253: LD_INT 2
10255: ST_TO_ADDR
// end ; if dec = 2 then
10256: LD_VAR 0 3
10260: PUSH
10261: LD_INT 2
10263: EQUAL
10264: IFFALSE 10358
// begin Say ( JMM , D2-JMM-1 ) ;
10266: LD_EXP 1
10270: PPUSH
10271: LD_STRING D2-JMM-1
10273: PPUSH
10274: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
10278: LD_EXP 22
10282: PPUSH
10283: LD_STRING D2-Pow-1
10285: PPUSH
10286: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
10290: LD_EXP 1
10294: PPUSH
10295: LD_STRING D2b-JMM-1
10297: PPUSH
10298: CALL_OW 88
// SayRadio ( Powell , D2b-Pow-1 ) ;
10302: LD_EXP 22
10306: PPUSH
10307: LD_STRING D2b-Pow-1
10309: PPUSH
10310: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
10314: LD_EXP 1
10318: PPUSH
10319: LD_STRING D2c-JMM-1
10321: PPUSH
10322: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
10326: LD_EXP 22
10330: PPUSH
10331: LD_STRING D2c-Pow-1
10333: PPUSH
10334: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
10338: LD_EXP 1
10342: PPUSH
10343: LD_STRING D2c-JMM-2
10345: PPUSH
10346: CALL_OW 88
// secondPass = 2 ;
10350: LD_ADDR_EXP 27
10354: PUSH
10355: LD_INT 2
10357: ST_TO_ADDR
// end ; DialogueOff ;
10358: CALL_OW 7
// exit ;
10362: POP
10363: POP
10364: GO 10370
// end ; end ;
10366: GO 9989
10368: POP
10369: POP
// end ;
10370: PPOPN 3
10372: END
// every 0 0$1 trigger vehicleTeleported = 1 and FilterUnitsInArea ( OutsideArea1 , [ f_side , 3 ] ) do var vehicles ;
10373: LD_EXP 28
10377: PUSH
10378: LD_INT 1
10380: EQUAL
10381: PUSH
10382: LD_INT 11
10384: PPUSH
10385: LD_INT 22
10387: PUSH
10388: LD_INT 3
10390: PUSH
10391: EMPTY
10392: LIST
10393: LIST
10394: PPUSH
10395: CALL_OW 70
10399: AND
10400: IFFALSE 10628
10402: GO 10404
10404: DISABLE
10405: LD_INT 0
10407: PPUSH
// begin vehicles := FilterUnitsInArea ( OutsideArea1 , [ f_side , 3 ] ) ;
10408: LD_ADDR_VAR 0 1
10412: PUSH
10413: LD_INT 11
10415: PPUSH
10416: LD_INT 22
10418: PUSH
10419: LD_INT 3
10421: PUSH
10422: EMPTY
10423: LIST
10424: LIST
10425: PPUSH
10426: CALL_OW 70
10430: ST_TO_ADDR
// if not vehicles then
10431: LD_VAR 0 1
10435: NOT
10436: IFFALSE 10440
// exit ;
10438: GO 10628
// repeat wait ( 0 0$1 ) ;
10440: LD_INT 35
10442: PPUSH
10443: CALL_OW 67
// until UnitFilter ( vehicles , [ f_see , 1 ] ) ;
10447: LD_VAR 0 1
10451: PPUSH
10452: LD_INT 101
10454: PUSH
10455: LD_INT 1
10457: PUSH
10458: EMPTY
10459: LIST
10460: LIST
10461: PPUSH
10462: CALL_OW 72
10466: IFFALSE 10440
// CenterNowOnUnits ( UnitFilter ( vehicles , [ f_see , 1 ] ) [ 1 ] ) ;
10468: LD_VAR 0 1
10472: PPUSH
10473: LD_INT 101
10475: PUSH
10476: LD_INT 1
10478: PUSH
10479: EMPTY
10480: LIST
10481: LIST
10482: PPUSH
10483: CALL_OW 72
10487: PUSH
10488: LD_INT 1
10490: ARRAY
10491: PPUSH
10492: CALL_OW 87
// DialogueOn ;
10496: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1-Sol1-1 , DT1-FSol1-1 ) ;
10500: LD_INT 22
10502: PUSH
10503: LD_INT 1
10505: PUSH
10506: EMPTY
10507: LIST
10508: LIST
10509: PUSH
10510: LD_INT 26
10512: PUSH
10513: LD_INT 1
10515: PUSH
10516: EMPTY
10517: LIST
10518: LIST
10519: PUSH
10520: LD_INT 2
10522: PUSH
10523: LD_INT 25
10525: PUSH
10526: LD_INT 1
10528: PUSH
10529: EMPTY
10530: LIST
10531: LIST
10532: PUSH
10533: LD_INT 25
10535: PUSH
10536: LD_INT 2
10538: PUSH
10539: EMPTY
10540: LIST
10541: LIST
10542: PUSH
10543: LD_INT 25
10545: PUSH
10546: LD_INT 3
10548: PUSH
10549: EMPTY
10550: LIST
10551: LIST
10552: PUSH
10553: LD_INT 25
10555: PUSH
10556: LD_INT 4
10558: PUSH
10559: EMPTY
10560: LIST
10561: LIST
10562: PUSH
10563: LD_INT 25
10565: PUSH
10566: LD_INT 5
10568: PUSH
10569: EMPTY
10570: LIST
10571: LIST
10572: PUSH
10573: LD_INT 25
10575: PUSH
10576: LD_INT 8
10578: PUSH
10579: EMPTY
10580: LIST
10581: LIST
10582: PUSH
10583: EMPTY
10584: LIST
10585: LIST
10586: LIST
10587: LIST
10588: LIST
10589: LIST
10590: LIST
10591: PUSH
10592: EMPTY
10593: LIST
10594: LIST
10595: LIST
10596: PPUSH
10597: CALL_OW 69
10601: PPUSH
10602: LD_STRING DT1-Sol1-1
10604: PPUSH
10605: LD_STRING DT1-FSol1-1
10607: PPUSH
10608: CALL 12328 0 3
// Say ( JMM , DT1-JMM-1 ) ;
10612: LD_EXP 1
10616: PPUSH
10617: LD_STRING DT1-JMM-1
10619: PPUSH
10620: CALL_OW 88
// DialogueOff ;
10624: CALL_OW 7
// end ;
10628: PPOPN 1
10630: END
// every 0 0$10 trigger vehicleTeleported = 1 and FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) = 0 and tpCounter do
10631: LD_EXP 28
10635: PUSH
10636: LD_INT 1
10638: EQUAL
10639: PUSH
10640: LD_INT 11
10642: PPUSH
10643: LD_INT 22
10645: PUSH
10646: LD_INT 3
10648: PUSH
10649: EMPTY
10650: LIST
10651: LIST
10652: PUSH
10653: LD_INT 50
10655: PUSH
10656: EMPTY
10657: LIST
10658: PUSH
10659: LD_INT 2
10661: PUSH
10662: LD_INT 21
10664: PUSH
10665: LD_INT 2
10667: PUSH
10668: EMPTY
10669: LIST
10670: LIST
10671: PUSH
10672: LD_INT 21
10674: PUSH
10675: LD_INT 1
10677: PUSH
10678: EMPTY
10679: LIST
10680: LIST
10681: PUSH
10682: EMPTY
10683: LIST
10684: LIST
10685: LIST
10686: PUSH
10687: EMPTY
10688: LIST
10689: LIST
10690: LIST
10691: PPUSH
10692: CALL_OW 70
10696: PUSH
10697: LD_INT 0
10699: EQUAL
10700: AND
10701: PUSH
10702: LD_EXP 29
10706: AND
10707: IFFALSE 10864
10709: GO 10711
10711: DISABLE
// begin vehicleTeleported = 2 ;
10712: LD_ADDR_EXP 28
10716: PUSH
10717: LD_INT 2
10719: ST_TO_ADDR
// DialogueOn ;
10720: CALL_OW 6
// Say ( JMM , DT1a-JMM-1 ) ;
10724: LD_EXP 1
10728: PPUSH
10729: LD_STRING DT1a-JMM-1
10731: PPUSH
10732: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1a-Sol1-1 , DT1a-FSol1-1 ) ;
10736: LD_INT 22
10738: PUSH
10739: LD_INT 1
10741: PUSH
10742: EMPTY
10743: LIST
10744: LIST
10745: PUSH
10746: LD_INT 26
10748: PUSH
10749: LD_INT 1
10751: PUSH
10752: EMPTY
10753: LIST
10754: LIST
10755: PUSH
10756: LD_INT 2
10758: PUSH
10759: LD_INT 25
10761: PUSH
10762: LD_INT 1
10764: PUSH
10765: EMPTY
10766: LIST
10767: LIST
10768: PUSH
10769: LD_INT 25
10771: PUSH
10772: LD_INT 2
10774: PUSH
10775: EMPTY
10776: LIST
10777: LIST
10778: PUSH
10779: LD_INT 25
10781: PUSH
10782: LD_INT 3
10784: PUSH
10785: EMPTY
10786: LIST
10787: LIST
10788: PUSH
10789: LD_INT 25
10791: PUSH
10792: LD_INT 4
10794: PUSH
10795: EMPTY
10796: LIST
10797: LIST
10798: PUSH
10799: LD_INT 25
10801: PUSH
10802: LD_INT 5
10804: PUSH
10805: EMPTY
10806: LIST
10807: LIST
10808: PUSH
10809: LD_INT 25
10811: PUSH
10812: LD_INT 8
10814: PUSH
10815: EMPTY
10816: LIST
10817: LIST
10818: PUSH
10819: EMPTY
10820: LIST
10821: LIST
10822: LIST
10823: LIST
10824: LIST
10825: LIST
10826: LIST
10827: PUSH
10828: EMPTY
10829: LIST
10830: LIST
10831: LIST
10832: PPUSH
10833: CALL_OW 69
10837: PPUSH
10838: LD_STRING DT1a-Sol1-1
10840: PPUSH
10841: LD_STRING DT1a-FSol1-1
10843: PPUSH
10844: CALL 12328 0 3
// Say ( JMM , DT1a-JMM-2 ) ;
10848: LD_EXP 1
10852: PPUSH
10853: LD_STRING DT1a-JMM-2
10855: PPUSH
10856: CALL_OW 88
// DialogueOff ;
10860: CALL_OW 7
// end ;
10864: END
// every 0 0$2 trigger vehicleTeleported = 3 and FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_see , 1 ] ] ) do var i , vehicles , speaker ;
10865: LD_EXP 28
10869: PUSH
10870: LD_INT 3
10872: EQUAL
10873: PUSH
10874: LD_INT 11
10876: PPUSH
10877: LD_INT 22
10879: PUSH
10880: LD_INT 3
10882: PUSH
10883: EMPTY
10884: LIST
10885: LIST
10886: PUSH
10887: LD_INT 101
10889: PUSH
10890: LD_INT 1
10892: PUSH
10893: EMPTY
10894: LIST
10895: LIST
10896: PUSH
10897: EMPTY
10898: LIST
10899: LIST
10900: PPUSH
10901: CALL_OW 70
10905: AND
10906: IFFALSE 11180
10908: GO 10910
10910: DISABLE
10911: LD_INT 0
10913: PPUSH
10914: PPUSH
10915: PPUSH
// begin wait ( 0 0$0.3 ) ;
10916: LD_INT 10
10918: PPUSH
10919: CALL_OW 67
// DialogueOn ;
10923: CALL_OW 6
// speaker := DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT2-Sol1-1 , DT2-FSol1-1 ) ;
10927: LD_ADDR_VAR 0 3
10931: PUSH
10932: LD_INT 22
10934: PUSH
10935: LD_INT 1
10937: PUSH
10938: EMPTY
10939: LIST
10940: LIST
10941: PUSH
10942: LD_INT 26
10944: PUSH
10945: LD_INT 1
10947: PUSH
10948: EMPTY
10949: LIST
10950: LIST
10951: PUSH
10952: LD_INT 2
10954: PUSH
10955: LD_INT 25
10957: PUSH
10958: LD_INT 1
10960: PUSH
10961: EMPTY
10962: LIST
10963: LIST
10964: PUSH
10965: LD_INT 25
10967: PUSH
10968: LD_INT 2
10970: PUSH
10971: EMPTY
10972: LIST
10973: LIST
10974: PUSH
10975: LD_INT 25
10977: PUSH
10978: LD_INT 3
10980: PUSH
10981: EMPTY
10982: LIST
10983: LIST
10984: PUSH
10985: LD_INT 25
10987: PUSH
10988: LD_INT 4
10990: PUSH
10991: EMPTY
10992: LIST
10993: LIST
10994: PUSH
10995: LD_INT 25
10997: PUSH
10998: LD_INT 5
11000: PUSH
11001: EMPTY
11002: LIST
11003: LIST
11004: PUSH
11005: LD_INT 25
11007: PUSH
11008: LD_INT 8
11010: PUSH
11011: EMPTY
11012: LIST
11013: LIST
11014: PUSH
11015: EMPTY
11016: LIST
11017: LIST
11018: LIST
11019: LIST
11020: LIST
11021: LIST
11022: LIST
11023: PUSH
11024: EMPTY
11025: LIST
11026: LIST
11027: LIST
11028: PPUSH
11029: CALL_OW 69
11033: PPUSH
11034: LD_STRING DT2-Sol1-1
11036: PPUSH
11037: LD_STRING DT2-FSol1-1
11039: PPUSH
11040: CALL 12328 0 3
11044: ST_TO_ADDR
// DialogueOff ;
11045: CALL_OW 7
// repeat wait ( 0 0$1 ) ;
11049: LD_INT 35
11051: PPUSH
11052: CALL_OW 67
// until not FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_ok ] ] ) ;
11056: LD_INT 11
11058: PPUSH
11059: LD_INT 22
11061: PUSH
11062: LD_INT 3
11064: PUSH
11065: EMPTY
11066: LIST
11067: LIST
11068: PUSH
11069: LD_INT 50
11071: PUSH
11072: EMPTY
11073: LIST
11074: PUSH
11075: EMPTY
11076: LIST
11077: LIST
11078: PPUSH
11079: CALL_OW 70
11083: NOT
11084: IFFALSE 11049
// wait ( 0 0$2 ) ;
11086: LD_INT 70
11088: PPUSH
11089: CALL_OW 67
// vehicleTeleported = 4 ;
11093: LD_ADDR_EXP 28
11097: PUSH
11098: LD_INT 4
11100: ST_TO_ADDR
// DialogueOn ;
11101: CALL_OW 6
// Say ( JMM , DT2a-JMM-1 ) ;
11105: LD_EXP 1
11109: PPUSH
11110: LD_STRING DT2a-JMM-1
11112: PPUSH
11113: CALL_OW 88
// if speaker then
11117: LD_VAR 0 3
11121: IFFALSE 11164
// if GetSex ( speaker ) = 1 then
11123: LD_VAR 0 3
11127: PPUSH
11128: CALL_OW 258
11132: PUSH
11133: LD_INT 1
11135: EQUAL
11136: IFFALSE 11152
// Say ( speaker , DT2a-Sol1-1 ) else
11138: LD_VAR 0 3
11142: PPUSH
11143: LD_STRING DT2a-Sol1-1
11145: PPUSH
11146: CALL_OW 88
11150: GO 11164
// Say ( speaker , DT2a-FSol1-1 ) ;
11152: LD_VAR 0 3
11156: PPUSH
11157: LD_STRING DT2a-FSol1-1
11159: PPUSH
11160: CALL_OW 88
// Say ( Donaldson , DT2a-Don-1 ) ;
11164: LD_EXP 3
11168: PPUSH
11169: LD_STRING DT2a-Don-1
11171: PPUSH
11172: CALL_OW 88
// DialogueOff ;
11176: CALL_OW 7
// end ;
11180: PPOPN 3
11182: END
// every 0 0$1 trigger SeeXY ( 1 , 45 , 74 ) do
11183: LD_INT 1
11185: PPUSH
11186: LD_INT 45
11188: PPUSH
11189: LD_INT 74
11191: PPUSH
11192: CALL_OW 293
11196: IFFALSE 11360
11198: GO 11200
11200: DISABLE
// begin DialogueOn ;
11201: CALL_OW 6
// CenterOnXY ( 36 , 55 ) ;
11205: LD_INT 36
11207: PPUSH
11208: LD_INT 55
11210: PPUSH
11211: CALL_OW 84
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D5-Sol1-1 , D5-FSol1- ) ;
11215: LD_INT 22
11217: PUSH
11218: LD_INT 1
11220: PUSH
11221: EMPTY
11222: LIST
11223: LIST
11224: PUSH
11225: LD_INT 26
11227: PUSH
11228: LD_INT 1
11230: PUSH
11231: EMPTY
11232: LIST
11233: LIST
11234: PUSH
11235: LD_INT 2
11237: PUSH
11238: LD_INT 25
11240: PUSH
11241: LD_INT 1
11243: PUSH
11244: EMPTY
11245: LIST
11246: LIST
11247: PUSH
11248: LD_INT 25
11250: PUSH
11251: LD_INT 2
11253: PUSH
11254: EMPTY
11255: LIST
11256: LIST
11257: PUSH
11258: LD_INT 25
11260: PUSH
11261: LD_INT 3
11263: PUSH
11264: EMPTY
11265: LIST
11266: LIST
11267: PUSH
11268: LD_INT 25
11270: PUSH
11271: LD_INT 4
11273: PUSH
11274: EMPTY
11275: LIST
11276: LIST
11277: PUSH
11278: LD_INT 25
11280: PUSH
11281: LD_INT 5
11283: PUSH
11284: EMPTY
11285: LIST
11286: LIST
11287: PUSH
11288: LD_INT 25
11290: PUSH
11291: LD_INT 8
11293: PUSH
11294: EMPTY
11295: LIST
11296: LIST
11297: PUSH
11298: EMPTY
11299: LIST
11300: LIST
11301: LIST
11302: LIST
11303: LIST
11304: LIST
11305: LIST
11306: PUSH
11307: EMPTY
11308: LIST
11309: LIST
11310: LIST
11311: PPUSH
11312: CALL_OW 69
11316: PPUSH
11317: LD_STRING D5-Sol1-1
11319: PPUSH
11320: LD_STRING D5-FSol1-
11322: PPUSH
11323: CALL 12328 0 3
// if warWithLegion and IsOk ( Donaldson ) then
11327: LD_EXP 30
11331: PUSH
11332: LD_EXP 3
11336: PPUSH
11337: CALL_OW 302
11341: AND
11342: IFFALSE 11356
// Say ( Donaldson , D5-Don-1 ) ;
11344: LD_EXP 3
11348: PPUSH
11349: LD_STRING D5-Don-1
11351: PPUSH
11352: CALL_OW 88
// DialogueOff ;
11356: CALL_OW 7
// end ;
11360: END
// every 0 0$1 trigger See ( 1 , ruteleprt ) or See ( 1 , rutp ) do
11361: LD_INT 1
11363: PPUSH
11364: LD_INT 10
11366: PPUSH
11367: CALL_OW 292
11371: PUSH
11372: LD_INT 1
11374: PPUSH
11375: LD_INT 137
11377: PPUSH
11378: CALL_OW 292
11382: OR
11383: IFFALSE 11527
11385: GO 11387
11387: DISABLE
// begin DialogueOn ;
11388: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT3-Sol1-1 , DT3-FSol1-1 ) ;
11392: LD_INT 22
11394: PUSH
11395: LD_INT 1
11397: PUSH
11398: EMPTY
11399: LIST
11400: LIST
11401: PUSH
11402: LD_INT 26
11404: PUSH
11405: LD_INT 1
11407: PUSH
11408: EMPTY
11409: LIST
11410: LIST
11411: PUSH
11412: LD_INT 2
11414: PUSH
11415: LD_INT 25
11417: PUSH
11418: LD_INT 1
11420: PUSH
11421: EMPTY
11422: LIST
11423: LIST
11424: PUSH
11425: LD_INT 25
11427: PUSH
11428: LD_INT 2
11430: PUSH
11431: EMPTY
11432: LIST
11433: LIST
11434: PUSH
11435: LD_INT 25
11437: PUSH
11438: LD_INT 3
11440: PUSH
11441: EMPTY
11442: LIST
11443: LIST
11444: PUSH
11445: LD_INT 25
11447: PUSH
11448: LD_INT 4
11450: PUSH
11451: EMPTY
11452: LIST
11453: LIST
11454: PUSH
11455: LD_INT 25
11457: PUSH
11458: LD_INT 5
11460: PUSH
11461: EMPTY
11462: LIST
11463: LIST
11464: PUSH
11465: LD_INT 25
11467: PUSH
11468: LD_INT 8
11470: PUSH
11471: EMPTY
11472: LIST
11473: LIST
11474: PUSH
11475: EMPTY
11476: LIST
11477: LIST
11478: LIST
11479: LIST
11480: LIST
11481: LIST
11482: LIST
11483: PUSH
11484: EMPTY
11485: LIST
11486: LIST
11487: LIST
11488: PPUSH
11489: CALL_OW 69
11493: PPUSH
11494: LD_STRING DT3-Sol1-1
11496: PPUSH
11497: LD_STRING DT3-FSol1-1
11499: PPUSH
11500: CALL 12328 0 3
// Say ( JMM , DT3-JMM-1 ) ;
11504: LD_EXP 1
11508: PPUSH
11509: LD_STRING DT3-JMM-1
11511: PPUSH
11512: CALL_OW 88
// DialogueOff ;
11516: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
11520: LD_STRING M2
11522: PPUSH
11523: CALL_OW 337
// end ;
11527: END
// every 0 0$1 trigger ruEscape = 0 do var i ;
11528: LD_EXP 42
11532: PUSH
11533: LD_INT 0
11535: EQUAL
11536: IFFALSE 11619
11538: GO 11540
11540: DISABLE
11541: LD_INT 0
11543: PPUSH
// begin enable ;
11544: ENABLE
// for i in FilterUnitsInArea ( RuEastBase , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) do
11545: LD_ADDR_VAR 0 1
11549: PUSH
11550: LD_INT 10
11552: PPUSH
11553: LD_INT 22
11555: PUSH
11556: LD_INT 3
11558: PUSH
11559: EMPTY
11560: LIST
11561: LIST
11562: PUSH
11563: LD_INT 21
11565: PUSH
11566: LD_INT 2
11568: PUSH
11569: EMPTY
11570: LIST
11571: LIST
11572: PUSH
11573: LD_INT 58
11575: PUSH
11576: EMPTY
11577: LIST
11578: PUSH
11579: EMPTY
11580: LIST
11581: LIST
11582: LIST
11583: PPUSH
11584: CALL_OW 70
11588: PUSH
11589: FOR_IN
11590: IFFALSE 11617
// if GetLives ( i ) < 1000 then
11592: LD_VAR 0 1
11596: PPUSH
11597: CALL_OW 256
11601: PUSH
11602: LD_INT 1000
11604: LESS
11605: IFFALSE 11615
// ruEscape = 1 ;
11607: LD_ADDR_EXP 42
11611: PUSH
11612: LD_INT 1
11614: ST_TO_ADDR
11615: GO 11589
11617: POP
11618: POP
// end ;
11619: PPOPN 1
11621: END
// every 0 0$1 trigger IsDying ( ruheadlab ) or IsDying ( rueastdepot ) or FilterUnitsInArea ( EscapeTriggerArea , [ f_side , 1 ] ) > 0 or ruEscape = 1 do var i , j , vehs ;
11622: LD_INT 3
11624: PPUSH
11625: CALL_OW 303
11629: PUSH
11630: LD_INT 4
11632: PPUSH
11633: CALL_OW 303
11637: OR
11638: PUSH
11639: LD_INT 22
11641: PPUSH
11642: LD_INT 22
11644: PUSH
11645: LD_INT 1
11647: PUSH
11648: EMPTY
11649: LIST
11650: LIST
11651: PPUSH
11652: CALL_OW 70
11656: PUSH
11657: LD_INT 0
11659: GREATER
11660: OR
11661: PUSH
11662: LD_EXP 42
11666: PUSH
11667: LD_INT 1
11669: EQUAL
11670: OR
11671: IFFALSE 11902
11673: GO 11675
11675: DISABLE
11676: LD_INT 0
11678: PPUSH
11679: PPUSH
11680: PPUSH
// begin ruAI = 0 ;
11681: LD_ADDR_EXP 41
11685: PUSH
11686: LD_INT 0
11688: ST_TO_ADDR
// vehs = FilterUnitsInArea ( RuEastBase , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
11689: LD_ADDR_VAR 0 3
11693: PUSH
11694: LD_INT 10
11696: PPUSH
11697: LD_INT 22
11699: PUSH
11700: LD_INT 3
11702: PUSH
11703: EMPTY
11704: LIST
11705: LIST
11706: PUSH
11707: LD_INT 21
11709: PUSH
11710: LD_INT 2
11712: PUSH
11713: EMPTY
11714: LIST
11715: LIST
11716: PUSH
11717: LD_INT 58
11719: PUSH
11720: EMPTY
11721: LIST
11722: PUSH
11723: EMPTY
11724: LIST
11725: LIST
11726: LIST
11727: PPUSH
11728: CALL_OW 70
11732: ST_TO_ADDR
// ComExitBuilding ( RuScientists ) ;
11733: LD_EXP 34
11737: PPUSH
11738: CALL_OW 122
// wait ( 0 0$1 ) ;
11742: LD_INT 35
11744: PPUSH
11745: CALL_OW 67
// DialogueOn ;
11749: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
11753: LD_EXP 1
11757: PPUSH
11758: LD_STRING D6-JMM-1
11760: PPUSH
11761: CALL_OW 88
// DialogueOff ;
11765: CALL_OW 7
// if vehs > 0 then
11769: LD_VAR 0 3
11773: PUSH
11774: LD_INT 0
11776: GREATER
11777: IFFALSE 11847
// for i := 1 to RuScientists do
11779: LD_ADDR_VAR 0 1
11783: PUSH
11784: DOUBLE
11785: LD_INT 1
11787: DEC
11788: ST_TO_ADDR
11789: LD_EXP 34
11793: PUSH
11794: FOR_TO
11795: IFFALSE 11843
// ComEnterUnit ( UnitFilter ( RuScientists [ i ] , [ f_not , [ f_hastask ] ] ) , vehs [ i ] ) else
11797: LD_EXP 34
11801: PUSH
11802: LD_VAR 0 1
11806: ARRAY
11807: PPUSH
11808: LD_INT 3
11810: PUSH
11811: LD_INT 60
11813: PUSH
11814: EMPTY
11815: LIST
11816: PUSH
11817: EMPTY
11818: LIST
11819: LIST
11820: PPUSH
11821: CALL_OW 72
11825: PPUSH
11826: LD_VAR 0 3
11830: PUSH
11831: LD_VAR 0 1
11835: ARRAY
11836: PPUSH
11837: CALL_OW 120
11841: GO 11794
11843: POP
11844: POP
11845: GO 11902
// ComMoveToArea ( UnitFilter ( RuScientists [ i ] , [ f_not , [ f_hastask ] ] ) , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) ;
11847: LD_EXP 34
11851: PUSH
11852: LD_VAR 0 1
11856: ARRAY
11857: PPUSH
11858: LD_INT 3
11860: PUSH
11861: LD_INT 60
11863: PUSH
11864: EMPTY
11865: LIST
11866: PUSH
11867: EMPTY
11868: LIST
11869: LIST
11870: PPUSH
11871: CALL_OW 72
11875: PPUSH
11876: LD_INT 13
11878: PUSH
11879: LD_INT 14
11881: PUSH
11882: EMPTY
11883: LIST
11884: LIST
11885: PUSH
11886: LD_INT 1
11888: PPUSH
11889: LD_INT 2
11891: PPUSH
11892: CALL_OW 12
11896: ARRAY
11897: PPUSH
11898: CALL_OW 113
// end ;
11902: PPOPN 3
11904: END
// every 0 0$0.3 trigger ruAI = 0 do var i , unit , veh , tmp ;
11905: LD_EXP 41
11909: PUSH
11910: LD_INT 0
11912: EQUAL
11913: IFFALSE 12285
11915: GO 11917
11917: DISABLE
11918: LD_INT 0
11920: PPUSH
11921: PPUSH
11922: PPUSH
11923: PPUSH
// begin enable ;
11924: ENABLE
// if UnitFilter ( RuScientists , [ f_or , [ f_inarea , EscapeArea1 ] , [ f_inarea , EscapeArea2 ] ] ) or FilterAllUnits ( [ [ f_control , control_manual ] , [ f_nation , 3 ] , [ f_or , [ f_inarea , EscapeArea1 ] , [ f_inarea , EscapeArea2 ] ] ] ) then
11925: LD_EXP 34
11929: PPUSH
11930: LD_INT 2
11932: PUSH
11933: LD_INT 95
11935: PUSH
11936: LD_INT 13
11938: PUSH
11939: EMPTY
11940: LIST
11941: LIST
11942: PUSH
11943: LD_INT 95
11945: PUSH
11946: LD_INT 14
11948: PUSH
11949: EMPTY
11950: LIST
11951: LIST
11952: PUSH
11953: EMPTY
11954: LIST
11955: LIST
11956: LIST
11957: PPUSH
11958: CALL_OW 72
11962: PUSH
11963: LD_INT 33
11965: PUSH
11966: LD_INT 1
11968: PUSH
11969: EMPTY
11970: LIST
11971: LIST
11972: PUSH
11973: LD_INT 23
11975: PUSH
11976: LD_INT 3
11978: PUSH
11979: EMPTY
11980: LIST
11981: LIST
11982: PUSH
11983: LD_INT 2
11985: PUSH
11986: LD_INT 95
11988: PUSH
11989: LD_INT 13
11991: PUSH
11992: EMPTY
11993: LIST
11994: LIST
11995: PUSH
11996: LD_INT 95
11998: PUSH
11999: LD_INT 14
12001: PUSH
12002: EMPTY
12003: LIST
12004: LIST
12005: PUSH
12006: EMPTY
12007: LIST
12008: LIST
12009: LIST
12010: PUSH
12011: EMPTY
12012: LIST
12013: LIST
12014: LIST
12015: PPUSH
12016: CALL_OW 69
12020: OR
12021: IFFALSE 12210
// begin unit := UnitFilter ( RuScientists , [ f_or , [ f_inarea , EscapeArea1 ] , [ f_inarea , EscapeArea2 ] ] ) [ 1 ] ;
12023: LD_ADDR_VAR 0 2
12027: PUSH
12028: LD_EXP 34
12032: PPUSH
12033: LD_INT 2
12035: PUSH
12036: LD_INT 95
12038: PUSH
12039: LD_INT 13
12041: PUSH
12042: EMPTY
12043: LIST
12044: LIST
12045: PUSH
12046: LD_INT 95
12048: PUSH
12049: LD_INT 14
12051: PUSH
12052: EMPTY
12053: LIST
12054: LIST
12055: PUSH
12056: EMPTY
12057: LIST
12058: LIST
12059: LIST
12060: PPUSH
12061: CALL_OW 72
12065: PUSH
12066: LD_INT 1
12068: ARRAY
12069: ST_TO_ADDR
// if not unit then
12070: LD_VAR 0 2
12074: NOT
12075: IFFALSE 12210
// begin tmp := FilterAllUnits ( [ [ f_or , [ f_inarea , EscapeArea1 ] , [ f_inarea , EscapeArea2 ] ] , [ f_control , control_manual ] , [ f_nation , 3 ] ] ) ;
12077: LD_ADDR_VAR 0 4
12081: PUSH
12082: LD_INT 2
12084: PUSH
12085: LD_INT 95
12087: PUSH
12088: LD_INT 13
12090: PUSH
12091: EMPTY
12092: LIST
12093: LIST
12094: PUSH
12095: LD_INT 95
12097: PUSH
12098: LD_INT 14
12100: PUSH
12101: EMPTY
12102: LIST
12103: LIST
12104: PUSH
12105: EMPTY
12106: LIST
12107: LIST
12108: LIST
12109: PUSH
12110: LD_INT 33
12112: PUSH
12113: LD_INT 1
12115: PUSH
12116: EMPTY
12117: LIST
12118: LIST
12119: PUSH
12120: LD_INT 23
12122: PUSH
12123: LD_INT 3
12125: PUSH
12126: EMPTY
12127: LIST
12128: LIST
12129: PUSH
12130: EMPTY
12131: LIST
12132: LIST
12133: LIST
12134: PPUSH
12135: CALL_OW 69
12139: ST_TO_ADDR
// if not tmp then
12140: LD_VAR 0 4
12144: NOT
12145: IFFALSE 12149
// exit ;
12147: GO 12285
// for i in tmp do
12149: LD_ADDR_VAR 0 1
12153: PUSH
12154: LD_VAR 0 4
12158: PUSH
12159: FOR_IN
12160: IFFALSE 12208
// if IsDrivenBy ( i ) in RuScientists then
12162: LD_VAR 0 1
12166: PPUSH
12167: CALL_OW 311
12171: PUSH
12172: LD_EXP 34
12176: IN
12177: IFFALSE 12206
// begin unit := IsDrivenBy ( i ) ;
12179: LD_ADDR_VAR 0 2
12183: PUSH
12184: LD_VAR 0 1
12188: PPUSH
12189: CALL_OW 311
12193: ST_TO_ADDR
// veh := i ;
12194: LD_ADDR_VAR 0 3
12198: PUSH
12199: LD_VAR 0 1
12203: ST_TO_ADDR
// break ;
12204: GO 12208
// end ;
12206: GO 12159
12208: POP
12209: POP
// end ; end ; if not unit then
12210: LD_VAR 0 2
12214: NOT
12215: IFFALSE 12219
// exit ;
12217: GO 12285
// RuScientists = RuScientists diff unit ;
12219: LD_ADDR_EXP 34
12223: PUSH
12224: LD_EXP 34
12228: PUSH
12229: LD_VAR 0 2
12233: DIFF
12234: ST_TO_ADDR
// RemoveUnit ( unit ) ;
12235: LD_VAR 0 2
12239: PPUSH
12240: CALL_OW 64
// if veh then
12244: LD_VAR 0 3
12248: IFFALSE 12285
// begin if GetWeapon ( veh ) = 49 then
12250: LD_VAR 0 3
12254: PPUSH
12255: CALL_OW 264
12259: PUSH
12260: LD_INT 49
12262: EQUAL
12263: IFFALSE 12276
// KillUnit ( veh ) else
12265: LD_VAR 0 3
12269: PPUSH
12270: CALL_OW 66
12274: GO 12285
// RemoveUnit ( veh ) ;
12276: LD_VAR 0 3
12280: PPUSH
12281: CALL_OW 64
// end ; end ; end_of_file
12285: PPOPN 4
12287: END
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
12288: LD_INT 0
12290: PPUSH
12291: PPUSH
// for i in charactersList do
12292: LD_ADDR_VAR 0 4
12296: PUSH
12297: LD_VAR 0 1
12301: PUSH
12302: FOR_IN
12303: IFFALSE 12321
// SaveCharacters ( i , ident ) ;
12305: LD_VAR 0 4
12309: PPUSH
12310: LD_VAR 0 2
12314: PPUSH
12315: CALL_OW 38
12319: GO 12302
12321: POP
12322: POP
// end ;
12323: LD_VAR 0 3
12327: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
12328: LD_INT 0
12330: PPUSH
12331: PPUSH
12332: PPUSH
// characters := characters diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Denis , Gladstone , Cornel , Powell ] ;
12333: LD_ADDR_VAR 0 1
12337: PUSH
12338: LD_VAR 0 1
12342: PUSH
12343: LD_EXP 1
12347: PUSH
12348: LD_EXP 7
12352: PUSH
12353: LD_EXP 3
12357: PUSH
12358: LD_EXP 4
12362: PUSH
12363: LD_EXP 5
12367: PUSH
12368: LD_EXP 2
12372: PUSH
12373: LD_EXP 12
12377: PUSH
12378: LD_EXP 13
12382: PUSH
12383: LD_EXP 9
12387: PUSH
12388: LD_EXP 11
12392: PUSH
12393: LD_EXP 6
12397: PUSH
12398: LD_EXP 8
12402: PUSH
12403: LD_EXP 10
12407: PUSH
12408: LD_EXP 22
12412: PUSH
12413: EMPTY
12414: LIST
12415: LIST
12416: LIST
12417: LIST
12418: LIST
12419: LIST
12420: LIST
12421: LIST
12422: LIST
12423: LIST
12424: LIST
12425: LIST
12426: LIST
12427: LIST
12428: DIFF
12429: ST_TO_ADDR
// speaker := characters [ rand ( 1 , characters ) ] ;
12430: LD_ADDR_VAR 0 6
12434: PUSH
12435: LD_VAR 0 1
12439: PUSH
12440: LD_INT 1
12442: PPUSH
12443: LD_VAR 0 1
12447: PPUSH
12448: CALL_OW 12
12452: ARRAY
12453: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
12454: LD_VAR 0 6
12458: PPUSH
12459: CALL_OW 258
12463: PUSH
12464: LD_INT 1
12466: EQUAL
12467: IFFALSE 12485
// Say ( speaker , dialogMID ) else
12469: LD_VAR 0 6
12473: PPUSH
12474: LD_VAR 0 2
12478: PPUSH
12479: CALL_OW 88
12483: GO 12499
// Say ( speaker , dialogFID ) ;
12485: LD_VAR 0 6
12489: PPUSH
12490: LD_VAR 0 3
12494: PPUSH
12495: CALL_OW 88
// result := speaker ;
12499: LD_ADDR_VAR 0 4
12503: PUSH
12504: LD_VAR 0 6
12508: ST_TO_ADDR
// end ;
12509: LD_VAR 0 4
12513: RET
// export function PrepareDifficulty ; var tmp ; begin
12514: LD_INT 0
12516: PPUSH
12517: PPUSH
// if Difficulty = 1 then
12518: LD_OWVAR 67
12522: PUSH
12523: LD_INT 1
12525: EQUAL
12526: IFFALSE 12544
// begin RuSolMinLevel = 8 ;
12528: LD_ADDR_EXP 36
12532: PUSH
12533: LD_INT 8
12535: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
12536: LD_ADDR_EXP 37
12540: PUSH
12541: LD_INT 10
12543: ST_TO_ADDR
// end ; if Difficulty = 2 then
12544: LD_OWVAR 67
12548: PUSH
12549: LD_INT 2
12551: EQUAL
12552: IFFALSE 12646
// begin RuSolMinLevel = 9 ;
12554: LD_ADDR_EXP 36
12558: PUSH
12559: LD_INT 9
12561: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
12562: LD_ADDR_EXP 37
12566: PUSH
12567: LD_INT 10
12569: ST_TO_ADDR
// uc_nation = 3 ;
12570: LD_ADDR_OWVAR 21
12574: PUSH
12575: LD_INT 3
12577: ST_TO_ADDR
// uc_side = 3 ;
12578: LD_ADDR_OWVAR 20
12582: PUSH
12583: LD_INT 3
12585: ST_TO_ADDR
// bc_level = 10 ;
12586: LD_ADDR_OWVAR 43
12590: PUSH
12591: LD_INT 10
12593: ST_TO_ADDR
// bc_type = b_turret ;
12594: LD_ADDR_OWVAR 42
12598: PUSH
12599: LD_INT 33
12601: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 86 , 34 , 2 ) ;
12602: LD_ADDR_VAR 0 2
12606: PUSH
12607: LD_INT 86
12609: PPUSH
12610: LD_INT 34
12612: PPUSH
12613: LD_INT 2
12615: PPUSH
12616: CALL_OW 47
12620: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
12621: LD_VAR 0 2
12625: PPUSH
12626: LD_INT 49
12628: PPUSH
12629: CALL_OW 431
// SetTech ( 64 , 3 , state_enabled ) ;
12633: LD_INT 64
12635: PPUSH
12636: LD_INT 3
12638: PPUSH
12639: LD_INT 1
12641: PPUSH
12642: CALL_OW 322
// end ; if Difficulty = 3 then
12646: LD_OWVAR 67
12650: PUSH
12651: LD_INT 3
12653: EQUAL
12654: IFFALSE 12792
// begin RuSolMinLevel = 10 ;
12656: LD_ADDR_EXP 36
12660: PUSH
12661: LD_INT 10
12663: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
12664: LD_ADDR_EXP 37
12668: PUSH
12669: LD_INT 10
12671: ST_TO_ADDR
// uc_nation = 3 ;
12672: LD_ADDR_OWVAR 21
12676: PUSH
12677: LD_INT 3
12679: ST_TO_ADDR
// uc_side = 3 ;
12680: LD_ADDR_OWVAR 20
12684: PUSH
12685: LD_INT 3
12687: ST_TO_ADDR
// bc_level = 10 ;
12688: LD_ADDR_OWVAR 43
12692: PUSH
12693: LD_INT 10
12695: ST_TO_ADDR
// bc_type = b_turret ;
12696: LD_ADDR_OWVAR 42
12700: PUSH
12701: LD_INT 33
12703: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 86 , 34 , 2 ) ;
12704: LD_ADDR_VAR 0 2
12708: PUSH
12709: LD_INT 86
12711: PPUSH
12712: LD_INT 34
12714: PPUSH
12715: LD_INT 2
12717: PPUSH
12718: CALL_OW 47
12722: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
12723: LD_VAR 0 2
12727: PPUSH
12728: LD_INT 49
12730: PPUSH
12731: CALL_OW 431
// tmp = CreateAndPlaceBuildingXYD ( 93 , 31 , 2 ) ;
12735: LD_ADDR_VAR 0 2
12739: PUSH
12740: LD_INT 93
12742: PPUSH
12743: LD_INT 31
12745: PPUSH
12746: LD_INT 2
12748: PPUSH
12749: CALL_OW 47
12753: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
12754: LD_VAR 0 2
12758: PPUSH
12759: LD_INT 49
12761: PPUSH
12762: CALL_OW 431
// SetTech ( 64 , 3 , state_enabled ) ;
12766: LD_INT 64
12768: PPUSH
12769: LD_INT 3
12771: PPUSH
12772: LD_INT 1
12774: PPUSH
12775: CALL_OW 322
// SetTech ( 65 , 3 , state_enabled ) ;
12779: LD_INT 65
12781: PPUSH
12782: LD_INT 3
12784: PPUSH
12785: LD_INT 1
12787: PPUSH
12788: CALL_OW 322
// end ; end ;
12792: LD_VAR 0 1
12796: RET
// export function ShowQuery1 ; begin
12797: LD_INT 0
12799: PPUSH
// case query ( Q1 ) of 1 :
12800: LD_STRING Q1
12802: PPUSH
12803: CALL_OW 97
12807: PUSH
12808: LD_INT 1
12810: DOUBLE
12811: EQUAL
12812: IFTRUE 12816
12814: GO 12827
12816: POP
// result = 1 ; 2 :
12817: LD_ADDR_VAR 0 1
12821: PUSH
12822: LD_INT 1
12824: ST_TO_ADDR
12825: GO 12866
12827: LD_INT 2
12829: DOUBLE
12830: EQUAL
12831: IFTRUE 12835
12833: GO 12846
12835: POP
// result = 2 ; 3 :
12836: LD_ADDR_VAR 0 1
12840: PUSH
12841: LD_INT 2
12843: ST_TO_ADDR
12844: GO 12866
12846: LD_INT 3
12848: DOUBLE
12849: EQUAL
12850: IFTRUE 12854
12852: GO 12865
12854: POP
// result = 3 ; end ;
12855: LD_ADDR_VAR 0 1
12859: PUSH
12860: LD_INT 3
12862: ST_TO_ADDR
12863: GO 12866
12865: POP
// end ;
12866: LD_VAR 0 1
12870: RET
// export function ShowQuery2 ; begin
12871: LD_INT 0
12873: PPUSH
// case query ( Q1a ) of 1 :
12874: LD_STRING Q1a
12876: PPUSH
12877: CALL_OW 97
12881: PUSH
12882: LD_INT 1
12884: DOUBLE
12885: EQUAL
12886: IFTRUE 12890
12888: GO 12901
12890: POP
// result = 1 ; 2 :
12891: LD_ADDR_VAR 0 1
12895: PUSH
12896: LD_INT 1
12898: ST_TO_ADDR
12899: GO 12940
12901: LD_INT 2
12903: DOUBLE
12904: EQUAL
12905: IFTRUE 12909
12907: GO 12920
12909: POP
// result = 2 ; 3 :
12910: LD_ADDR_VAR 0 1
12914: PUSH
12915: LD_INT 2
12917: ST_TO_ADDR
12918: GO 12940
12920: LD_INT 3
12922: DOUBLE
12923: EQUAL
12924: IFTRUE 12928
12926: GO 12939
12928: POP
// result = 3 ; end ;
12929: LD_ADDR_VAR 0 1
12933: PUSH
12934: LD_INT 3
12936: ST_TO_ADDR
12937: GO 12940
12939: POP
// end ;
12940: LD_VAR 0 1
12944: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un , tmp ; begin
12945: LD_INT 0
12947: PPUSH
12948: PPUSH
12949: PPUSH
12950: PPUSH
12951: PPUSH
// for i = 1 to count do
12952: LD_ADDR_VAR 0 8
12956: PUSH
12957: DOUBLE
12958: LD_INT 1
12960: DEC
12961: ST_TO_ADDR
12962: LD_VAR 0 6
12966: PUSH
12967: FOR_TO
12968: IFFALSE 13049
// begin uc_side = side ;
12970: LD_ADDR_OWVAR 20
12974: PUSH
12975: LD_VAR 0 1
12979: ST_TO_ADDR
// uc_nation = nation ;
12980: LD_ADDR_OWVAR 21
12984: PUSH
12985: LD_VAR 0 2
12989: ST_TO_ADDR
// hc_gallery =  ;
12990: LD_ADDR_OWVAR 33
12994: PUSH
12995: LD_STRING 
12997: ST_TO_ADDR
// hc_name =  ;
12998: LD_ADDR_OWVAR 26
13002: PUSH
13003: LD_STRING 
13005: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
13006: LD_INT 0
13008: PPUSH
13009: LD_VAR 0 5
13013: PPUSH
13014: LD_VAR 0 4
13018: PPUSH
13019: CALL_OW 380
// un = CreateHuman ;
13023: LD_ADDR_VAR 0 10
13027: PUSH
13028: CALL_OW 44
13032: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
13033: LD_VAR 0 10
13037: PPUSH
13038: LD_VAR 0 3
13042: PPUSH
13043: CALL_OW 52
// end ;
13047: GO 12967
13049: POP
13050: POP
// end ;
13051: LD_VAR 0 7
13055: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list ; begin
13056: LD_INT 0
13058: PPUSH
13059: PPUSH
13060: PPUSH
13061: PPUSH
13062: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
13063: LD_ADDR_VAR 0 8
13067: PUSH
13068: LD_INT 48
13070: PUSH
13071: LD_INT 49
13073: PUSH
13074: LD_INT 50
13076: PUSH
13077: LD_INT 20
13079: PUSH
13080: LD_INT 1
13082: PUSH
13083: LD_INT 51
13085: PUSH
13086: LD_INT 52
13088: PUSH
13089: LD_INT 69
13091: PUSH
13092: LD_INT 39
13094: PUSH
13095: LD_INT 34
13097: PUSH
13098: LD_INT 40
13100: PUSH
13101: LD_INT 53
13103: PUSH
13104: LD_INT 71
13106: PUSH
13107: LD_INT 57
13109: PUSH
13110: LD_INT 58
13112: PUSH
13113: LD_INT 44
13115: PUSH
13116: LD_INT 32
13118: PUSH
13119: LD_INT 27
13121: PUSH
13122: LD_INT 23
13124: PUSH
13125: LD_INT 33
13127: PUSH
13128: LD_INT 59
13130: PUSH
13131: LD_INT 54
13133: PUSH
13134: LD_INT 55
13136: PUSH
13137: LD_INT 56
13139: PUSH
13140: LD_INT 63
13142: PUSH
13143: LD_INT 64
13145: PUSH
13146: LD_INT 65
13148: PUSH
13149: LD_INT 30
13151: PUSH
13152: LD_INT 31
13154: PUSH
13155: LD_INT 21
13157: PUSH
13158: LD_INT 22
13160: PUSH
13161: LD_INT 25
13163: PUSH
13164: EMPTY
13165: LIST
13166: LIST
13167: LIST
13168: LIST
13169: LIST
13170: LIST
13171: LIST
13172: LIST
13173: LIST
13174: LIST
13175: LIST
13176: LIST
13177: LIST
13178: LIST
13179: LIST
13180: LIST
13181: LIST
13182: LIST
13183: LIST
13184: LIST
13185: LIST
13186: LIST
13187: LIST
13188: LIST
13189: LIST
13190: LIST
13191: LIST
13192: LIST
13193: LIST
13194: LIST
13195: LIST
13196: LIST
13197: ST_TO_ADDR
// for i = 1 to ru_tech_list do
13198: LD_ADDR_VAR 0 5
13202: PUSH
13203: DOUBLE
13204: LD_INT 1
13206: DEC
13207: ST_TO_ADDR
13208: LD_VAR 0 8
13212: PUSH
13213: FOR_TO
13214: IFFALSE 13290
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
13216: LD_VAR 0 8
13220: PUSH
13221: LD_VAR 0 5
13225: ARRAY
13226: PPUSH
13227: LD_VAR 0 1
13231: PPUSH
13232: CALL_OW 321
13236: PUSH
13237: LD_INT 1
13239: EQUAL
13240: PUSH
13241: LD_VAR 0 8
13245: PUSH
13246: LD_VAR 0 5
13250: ARRAY
13251: PPUSH
13252: LD_VAR 0 3
13256: PPUSH
13257: CALL_OW 482
13261: PUSH
13262: LD_INT 1
13264: EQUAL
13265: AND
13266: IFFALSE 13288
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
13268: LD_VAR 0 2
13272: PPUSH
13273: LD_VAR 0 8
13277: PUSH
13278: LD_VAR 0 5
13282: ARRAY
13283: PPUSH
13284: CALL_OW 184
13288: GO 13213
13290: POP
13291: POP
// end ;
13292: LD_VAR 0 4
13296: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
13297: LD_INT 0
13299: PPUSH
13300: PPUSH
13301: PPUSH
13302: PPUSH
13303: PPUSH
13304: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
13305: LD_ADDR_VAR 0 8
13309: PUSH
13310: LD_VAR 0 2
13314: PPUSH
13315: CALL_OW 313
13319: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
13320: LD_ADDR_VAR 0 9
13324: PUSH
13325: LD_VAR 0 3
13329: PPUSH
13330: LD_INT 22
13332: PUSH
13333: LD_VAR 0 1
13337: PUSH
13338: EMPTY
13339: LIST
13340: LIST
13341: PUSH
13342: LD_INT 25
13344: PUSH
13345: LD_INT 2
13347: PUSH
13348: EMPTY
13349: LIST
13350: LIST
13351: PUSH
13352: LD_INT 24
13354: PUSH
13355: LD_INT 750
13357: PUSH
13358: EMPTY
13359: LIST
13360: LIST
13361: PUSH
13362: LD_INT 3
13364: PUSH
13365: LD_INT 54
13367: PUSH
13368: EMPTY
13369: LIST
13370: PUSH
13371: EMPTY
13372: LIST
13373: LIST
13374: PUSH
13375: EMPTY
13376: LIST
13377: LIST
13378: LIST
13379: LIST
13380: PPUSH
13381: CALL_OW 70
13385: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
13386: LD_ADDR_VAR 0 6
13390: PUSH
13391: LD_VAR 0 3
13395: PPUSH
13396: LD_INT 22
13398: PUSH
13399: LD_VAR 0 1
13403: PUSH
13404: EMPTY
13405: LIST
13406: LIST
13407: PUSH
13408: LD_INT 21
13410: PUSH
13411: LD_INT 3
13413: PUSH
13414: EMPTY
13415: LIST
13416: LIST
13417: PUSH
13418: LD_INT 3
13420: PUSH
13421: LD_INT 24
13423: PUSH
13424: LD_INT 1000
13426: PUSH
13427: EMPTY
13428: LIST
13429: LIST
13430: PUSH
13431: EMPTY
13432: LIST
13433: LIST
13434: PUSH
13435: EMPTY
13436: LIST
13437: LIST
13438: LIST
13439: PUSH
13440: EMPTY
13441: LIST
13442: PPUSH
13443: CALL_OW 70
13447: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
13448: LD_VAR 0 6
13452: NOT
13453: PUSH
13454: LD_INT 22
13456: PUSH
13457: LD_VAR 0 1
13461: PUSH
13462: EMPTY
13463: LIST
13464: LIST
13465: PUSH
13466: LD_INT 25
13468: PUSH
13469: LD_INT 2
13471: PUSH
13472: EMPTY
13473: LIST
13474: LIST
13475: PUSH
13476: LD_INT 24
13478: PUSH
13479: LD_INT 250
13481: PUSH
13482: EMPTY
13483: LIST
13484: LIST
13485: PUSH
13486: EMPTY
13487: LIST
13488: LIST
13489: LIST
13490: PPUSH
13491: CALL_OW 69
13495: NOT
13496: AND
13497: IFFALSE 13501
// exit ;
13499: GO 13683
// if buildings_list > 0 and engineerOkInside then
13501: LD_VAR 0 6
13505: PUSH
13506: LD_INT 0
13508: GREATER
13509: PUSH
13510: LD_VAR 0 8
13514: AND
13515: IFFALSE 13526
// ComExitBuilding ( engineerOkInside ) ;
13517: LD_VAR 0 8
13521: PPUSH
13522: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
13526: LD_VAR 0 6
13530: PUSH
13531: LD_INT 0
13533: GREATER
13534: PUSH
13535: LD_VAR 0 9
13539: PUSH
13540: LD_INT 0
13542: GREATER
13543: AND
13544: IFFALSE 13564
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
13546: LD_VAR 0 9
13550: PPUSH
13551: LD_VAR 0 6
13555: PUSH
13556: LD_INT 1
13558: ARRAY
13559: PPUSH
13560: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
13564: LD_VAR 0 6
13568: PUSH
13569: LD_INT 0
13571: EQUAL
13572: PUSH
13573: LD_VAR 0 4
13577: PUSH
13578: LD_INT 0
13580: EQUAL
13581: AND
13582: PUSH
13583: LD_VAR 0 9
13587: PUSH
13588: LD_INT 0
13590: GREATER
13591: AND
13592: IFFALSE 13608
// ComEnterUnit ( engineerOkOutside , building ) ;
13594: LD_VAR 0 9
13598: PPUSH
13599: LD_VAR 0 2
13603: PPUSH
13604: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
13608: LD_VAR 0 9
13612: PUSH
13613: LD_INT 0
13615: GREATER
13616: PUSH
13617: LD_VAR 0 6
13621: PUSH
13622: LD_INT 0
13624: EQUAL
13625: AND
13626: PUSH
13627: LD_VAR 0 4
13631: PUSH
13632: LD_INT 0
13634: GREATER
13635: AND
13636: IFFALSE 13683
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
13638: LD_VAR 0 9
13642: PPUSH
13643: LD_VAR 0 4
13647: PUSH
13648: LD_INT 1
13650: ARRAY
13651: PPUSH
13652: LD_VAR 0 4
13656: PUSH
13657: LD_INT 2
13659: ARRAY
13660: PPUSH
13661: LD_VAR 0 4
13665: PUSH
13666: LD_INT 3
13668: ARRAY
13669: PPUSH
13670: LD_VAR 0 4
13674: PUSH
13675: LD_INT 4
13677: ARRAY
13678: PPUSH
13679: CALL_OW 145
// end ;
13683: LD_VAR 0 5
13687: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
13688: LD_INT 0
13690: PPUSH
13691: PPUSH
13692: PPUSH
13693: PPUSH
13694: PPUSH
13695: PPUSH
13696: PPUSH
13697: PPUSH
13698: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 251 ] ] ) diff [ RuScientists ] ;
13699: LD_ADDR_VAR 0 6
13703: PUSH
13704: LD_INT 22
13706: PUSH
13707: LD_VAR 0 1
13711: PUSH
13712: EMPTY
13713: LIST
13714: LIST
13715: PUSH
13716: LD_INT 25
13718: PUSH
13719: LD_INT 4
13721: PUSH
13722: EMPTY
13723: LIST
13724: LIST
13725: PUSH
13726: LD_INT 24
13728: PUSH
13729: LD_INT 251
13731: PUSH
13732: EMPTY
13733: LIST
13734: LIST
13735: PUSH
13736: EMPTY
13737: LIST
13738: LIST
13739: LIST
13740: PPUSH
13741: CALL_OW 69
13745: PUSH
13746: LD_EXP 34
13750: PUSH
13751: EMPTY
13752: LIST
13753: DIFF
13754: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 4 ] , [ f_ok ] ] ) diff [ RuScientists ] ;
13755: LD_ADDR_VAR 0 7
13759: PUSH
13760: LD_VAR 0 3
13764: PPUSH
13765: LD_INT 22
13767: PUSH
13768: LD_VAR 0 1
13772: PUSH
13773: EMPTY
13774: LIST
13775: LIST
13776: PUSH
13777: LD_INT 25
13779: PUSH
13780: LD_INT 4
13782: PUSH
13783: EMPTY
13784: LIST
13785: LIST
13786: PUSH
13787: LD_INT 50
13789: PUSH
13790: EMPTY
13791: LIST
13792: PUSH
13793: EMPTY
13794: LIST
13795: LIST
13796: LIST
13797: PPUSH
13798: CALL_OW 70
13802: PUSH
13803: LD_EXP 34
13807: PUSH
13808: EMPTY
13809: LIST
13810: DIFF
13811: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
13812: LD_ADDR_VAR 0 10
13816: PUSH
13817: LD_VAR 0 3
13821: PPUSH
13822: LD_INT 22
13824: PUSH
13825: LD_VAR 0 1
13829: PUSH
13830: EMPTY
13831: LIST
13832: LIST
13833: PUSH
13834: LD_INT 21
13836: PUSH
13837: LD_INT 1
13839: PUSH
13840: EMPTY
13841: LIST
13842: LIST
13843: PUSH
13844: LD_INT 3
13846: PUSH
13847: LD_INT 24
13849: PUSH
13850: LD_INT 750
13852: PUSH
13853: EMPTY
13854: LIST
13855: LIST
13856: PUSH
13857: EMPTY
13858: LIST
13859: LIST
13860: PUSH
13861: EMPTY
13862: LIST
13863: LIST
13864: LIST
13865: PPUSH
13866: CALL_OW 70
13870: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
13871: LD_ADDR_VAR 0 11
13875: PUSH
13876: LD_VAR 0 2
13880: PPUSH
13881: LD_INT 22
13883: PUSH
13884: LD_VAR 0 1
13888: PUSH
13889: EMPTY
13890: LIST
13891: LIST
13892: PUSH
13893: LD_INT 21
13895: PUSH
13896: LD_INT 1
13898: PUSH
13899: EMPTY
13900: LIST
13901: LIST
13902: PUSH
13903: LD_INT 3
13905: PUSH
13906: LD_INT 24
13908: PUSH
13909: LD_INT 1000
13911: PUSH
13912: EMPTY
13913: LIST
13914: LIST
13915: PUSH
13916: EMPTY
13917: LIST
13918: LIST
13919: PUSH
13920: EMPTY
13921: LIST
13922: LIST
13923: LIST
13924: PPUSH
13925: CALL_OW 70
13929: ST_TO_ADDR
// if damageUnits > 0 and sci_list > 0 then
13930: LD_VAR 0 10
13934: PUSH
13935: LD_INT 0
13937: GREATER
13938: PUSH
13939: LD_VAR 0 6
13943: PUSH
13944: LD_INT 0
13946: GREATER
13947: AND
13948: IFFALSE 13964
// ComMoveToArea ( damageUnits , healArea ) ;
13950: LD_VAR 0 10
13954: PPUSH
13955: LD_VAR 0 2
13959: PPUSH
13960: CALL_OW 113
// if unitsToHeal > 0 and sci_listOutside > 0 then
13964: LD_VAR 0 11
13968: PUSH
13969: LD_INT 0
13971: GREATER
13972: PUSH
13973: LD_VAR 0 7
13977: PUSH
13978: LD_INT 0
13980: GREATER
13981: AND
13982: IFFALSE 14002
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
13984: LD_VAR 0 7
13988: PPUSH
13989: LD_VAR 0 11
13993: PUSH
13994: LD_INT 1
13996: ARRAY
13997: PPUSH
13998: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
14002: LD_VAR 0 10
14006: PUSH
14007: LD_INT 0
14009: EQUAL
14010: PUSH
14011: LD_VAR 0 11
14015: PUSH
14016: LD_INT 0
14018: EQUAL
14019: AND
14020: PUSH
14021: LD_VAR 0 7
14025: PUSH
14026: LD_INT 0
14028: GREATER
14029: AND
14030: IFFALSE 14135
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
14032: LD_ADDR_VAR 0 12
14036: PUSH
14037: LD_INT 22
14039: PUSH
14040: LD_VAR 0 1
14044: PUSH
14045: EMPTY
14046: LIST
14047: LIST
14048: PUSH
14049: LD_INT 21
14051: PUSH
14052: LD_INT 3
14054: PUSH
14055: EMPTY
14056: LIST
14057: LIST
14058: PUSH
14059: LD_INT 30
14061: PUSH
14062: LD_INT 8
14064: PUSH
14065: EMPTY
14066: LIST
14067: LIST
14068: PUSH
14069: EMPTY
14070: LIST
14071: LIST
14072: LIST
14073: PPUSH
14074: CALL_OW 69
14078: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
14079: LD_ADDR_VAR 0 13
14083: PUSH
14084: LD_INT 1
14086: PPUSH
14087: LD_VAR 0 12
14091: PPUSH
14092: CALL_OW 12
14096: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
14097: LD_VAR 0 7
14101: PPUSH
14102: LD_INT 3
14104: PUSH
14105: LD_INT 60
14107: PUSH
14108: EMPTY
14109: LIST
14110: PUSH
14111: EMPTY
14112: LIST
14113: LIST
14114: PPUSH
14115: CALL_OW 72
14119: PPUSH
14120: LD_VAR 0 12
14124: PUSH
14125: LD_VAR 0 13
14129: ARRAY
14130: PPUSH
14131: CALL_OW 120
// end ; if FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 3 ] , [ f_lives , 751 ] ] ) > 0 and IsOk ( ru_fact ) and GetSide ( ru_fact ) = 3 then
14135: LD_VAR 0 3
14139: PPUSH
14140: LD_INT 22
14142: PUSH
14143: LD_VAR 0 1
14147: PUSH
14148: EMPTY
14149: LIST
14150: LIST
14151: PUSH
14152: LD_INT 25
14154: PUSH
14155: LD_INT 3
14157: PUSH
14158: EMPTY
14159: LIST
14160: LIST
14161: PUSH
14162: LD_INT 24
14164: PUSH
14165: LD_INT 751
14167: PUSH
14168: EMPTY
14169: LIST
14170: LIST
14171: PUSH
14172: EMPTY
14173: LIST
14174: LIST
14175: LIST
14176: PPUSH
14177: CALL_OW 70
14181: PUSH
14182: LD_INT 0
14184: GREATER
14185: PUSH
14186: LD_INT 21
14188: PPUSH
14189: CALL_OW 302
14193: AND
14194: PUSH
14195: LD_INT 21
14197: PPUSH
14198: CALL_OW 255
14202: PUSH
14203: LD_INT 3
14205: EQUAL
14206: AND
14207: IFFALSE 14263
// ComEnterUnit ( FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 3 ] , [ f_lives , 751 ] ] ) , ru_fact ) ;
14209: LD_VAR 0 3
14213: PPUSH
14214: LD_INT 22
14216: PUSH
14217: LD_VAR 0 1
14221: PUSH
14222: EMPTY
14223: LIST
14224: LIST
14225: PUSH
14226: LD_INT 25
14228: PUSH
14229: LD_INT 3
14231: PUSH
14232: EMPTY
14233: LIST
14234: LIST
14235: PUSH
14236: LD_INT 24
14238: PUSH
14239: LD_INT 751
14241: PUSH
14242: EMPTY
14243: LIST
14244: LIST
14245: PUSH
14246: EMPTY
14247: LIST
14248: LIST
14249: LIST
14250: PPUSH
14251: CALL_OW 70
14255: PPUSH
14256: LD_INT 21
14258: PPUSH
14259: CALL_OW 120
// end ;
14263: LD_VAR 0 5
14267: RET
// export function CraneRepairBuild ( side , baseArea ) ; var i , mechTmp , vehicleTmp , crane_list , buildings_list ; begin
14268: LD_INT 0
14270: PPUSH
14271: PPUSH
14272: PPUSH
14273: PPUSH
14274: PPUSH
14275: PPUSH
// crane_list = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
14276: LD_ADDR_VAR 0 7
14280: PUSH
14281: LD_VAR 0 2
14285: PPUSH
14286: LD_INT 22
14288: PUSH
14289: LD_VAR 0 1
14293: PUSH
14294: EMPTY
14295: LIST
14296: LIST
14297: PUSH
14298: LD_INT 21
14300: PUSH
14301: LD_INT 2
14303: PUSH
14304: EMPTY
14305: LIST
14306: LIST
14307: PUSH
14308: LD_INT 34
14310: PUSH
14311: LD_INT 52
14313: PUSH
14314: EMPTY
14315: LIST
14316: LIST
14317: PUSH
14318: EMPTY
14319: LIST
14320: LIST
14321: LIST
14322: PPUSH
14323: CALL_OW 70
14327: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( baseArea , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
14328: LD_ADDR_VAR 0 8
14332: PUSH
14333: LD_VAR 0 2
14337: PPUSH
14338: LD_INT 22
14340: PUSH
14341: LD_VAR 0 1
14345: PUSH
14346: EMPTY
14347: LIST
14348: LIST
14349: PUSH
14350: LD_INT 21
14352: PUSH
14353: LD_INT 3
14355: PUSH
14356: EMPTY
14357: LIST
14358: LIST
14359: PUSH
14360: LD_INT 3
14362: PUSH
14363: LD_INT 24
14365: PUSH
14366: LD_INT 1000
14368: PUSH
14369: EMPTY
14370: LIST
14371: LIST
14372: PUSH
14373: EMPTY
14374: LIST
14375: LIST
14376: PUSH
14377: EMPTY
14378: LIST
14379: LIST
14380: LIST
14381: PUSH
14382: EMPTY
14383: LIST
14384: PPUSH
14385: CALL_OW 70
14389: ST_TO_ADDR
// if buildings_list > 0 and UnitFilter ( crane_list , [ f_lives , 750 ] ) > 0 then
14390: LD_VAR 0 8
14394: PUSH
14395: LD_INT 0
14397: GREATER
14398: PUSH
14399: LD_VAR 0 7
14403: PPUSH
14404: LD_INT 24
14406: PUSH
14407: LD_INT 750
14409: PUSH
14410: EMPTY
14411: LIST
14412: LIST
14413: PPUSH
14414: CALL_OW 72
14418: PUSH
14419: LD_INT 0
14421: GREATER
14422: AND
14423: IFFALSE 14443
// ComRepairBuilding ( crane_list , buildings_list [ 1 ] ) ;
14425: LD_VAR 0 7
14429: PPUSH
14430: LD_VAR 0 8
14434: PUSH
14435: LD_INT 1
14437: ARRAY
14438: PPUSH
14439: CALL_OW 130
// end ;
14443: LD_VAR 0 3
14447: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
14448: LD_INT 0
14450: PPUSH
14451: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) diff FilterUnitsInArea ( RussianOutsideVehs , [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
14452: LD_INT 22
14454: PUSH
14455: LD_VAR 0 1
14459: PUSH
14460: EMPTY
14461: LIST
14462: LIST
14463: PUSH
14464: LD_INT 21
14466: PUSH
14467: LD_INT 2
14469: PUSH
14470: EMPTY
14471: LIST
14472: LIST
14473: PUSH
14474: EMPTY
14475: LIST
14476: LIST
14477: PPUSH
14478: CALL_OW 69
14482: PUSH
14483: LD_INT 18
14485: PPUSH
14486: LD_INT 22
14488: PUSH
14489: LD_VAR 0 1
14493: PUSH
14494: EMPTY
14495: LIST
14496: LIST
14497: PUSH
14498: LD_INT 21
14500: PUSH
14501: LD_INT 2
14503: PUSH
14504: EMPTY
14505: LIST
14506: LIST
14507: PUSH
14508: EMPTY
14509: LIST
14510: LIST
14511: PPUSH
14512: CALL_OW 70
14516: PUSH
14517: LD_VAR 0 3
14521: LESSEQUAL
14522: DIFF
14523: IFFALSE 14590
// for i = 1 to vehCount do
14525: LD_ADDR_VAR 0 9
14529: PUSH
14530: DOUBLE
14531: LD_INT 1
14533: DEC
14534: ST_TO_ADDR
14535: LD_VAR 0 3
14539: PUSH
14540: FOR_TO
14541: IFFALSE 14588
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
14543: LD_VAR 0 2
14547: PPUSH
14548: LD_VAR 0 7
14552: PPUSH
14553: LD_VAR 0 5
14557: PPUSH
14558: LD_VAR 0 6
14562: PPUSH
14563: LD_VAR 0 4
14567: PUSH
14568: LD_INT 1
14570: PPUSH
14571: LD_VAR 0 4
14575: PPUSH
14576: CALL_OW 12
14580: ARRAY
14581: PPUSH
14582: CALL_OW 185
14586: GO 14540
14588: POP
14589: POP
// end ;
14590: LD_VAR 0 8
14594: RET
// export function IntBazooka ( side ) ; var ta , c , i , list , filter ; begin
14595: LD_INT 0
14597: PPUSH
14598: PPUSH
14599: PPUSH
14600: PPUSH
14601: PPUSH
14602: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
14603: LD_ADDR_VAR 0 6
14607: PUSH
14608: LD_INT 22
14610: PUSH
14611: LD_VAR 0 1
14615: PUSH
14616: EMPTY
14617: LIST
14618: LIST
14619: PUSH
14620: LD_INT 25
14622: PUSH
14623: LD_INT 9
14625: PUSH
14626: EMPTY
14627: LIST
14628: LIST
14629: PUSH
14630: EMPTY
14631: LIST
14632: LIST
14633: PPUSH
14634: CALL_OW 69
14638: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
14639: LD_ADDR_VAR 0 7
14643: PUSH
14644: LD_INT 81
14646: PUSH
14647: LD_VAR 0 1
14651: PUSH
14652: EMPTY
14653: LIST
14654: LIST
14655: PUSH
14656: LD_INT 3
14658: PUSH
14659: LD_INT 21
14661: PUSH
14662: LD_INT 3
14664: PUSH
14665: EMPTY
14666: LIST
14667: LIST
14668: PUSH
14669: EMPTY
14670: LIST
14671: LIST
14672: PUSH
14673: EMPTY
14674: LIST
14675: LIST
14676: PPUSH
14677: CALL_OW 69
14681: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
14682: LD_ADDR_VAR 0 4
14686: PUSH
14687: LD_INT 1
14689: PPUSH
14690: LD_INT 3
14692: PPUSH
14693: CALL_OW 12
14697: ST_TO_ADDR
// for i = 1 to list do
14698: LD_ADDR_VAR 0 5
14702: PUSH
14703: DOUBLE
14704: LD_INT 1
14706: DEC
14707: ST_TO_ADDR
14708: LD_VAR 0 6
14712: PUSH
14713: FOR_TO
14714: IFFALSE 14916
// for ta in filter do
14716: LD_ADDR_VAR 0 3
14720: PUSH
14721: LD_VAR 0 7
14725: PUSH
14726: FOR_IN
14727: IFFALSE 14912
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
14729: LD_VAR 0 6
14733: PUSH
14734: LD_VAR 0 5
14738: ARRAY
14739: PPUSH
14740: LD_VAR 0 3
14744: PPUSH
14745: CALL_OW 296
14749: PUSH
14750: LD_INT 15
14752: LESSEQUAL
14753: IFFALSE 14910
// begin case c of 1 :
14755: LD_VAR 0 4
14759: PUSH
14760: LD_INT 1
14762: DOUBLE
14763: EQUAL
14764: IFTRUE 14768
14766: GO 14806
14768: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
14769: LD_VAR 0 6
14773: PUSH
14774: LD_VAR 0 5
14778: ARRAY
14779: PPUSH
14780: LD_VAR 0 3
14784: PPUSH
14785: CALL_OW 250
14789: PPUSH
14790: LD_VAR 0 3
14794: PPUSH
14795: CALL_OW 251
14799: PPUSH
14800: CALL_OW 154
14804: GO 14910
14806: LD_INT 2
14808: DOUBLE
14809: EQUAL
14810: IFTRUE 14814
14812: GO 14878
14814: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
14815: LD_VAR 0 6
14819: PUSH
14820: LD_VAR 0 5
14824: ARRAY
14825: PPUSH
14826: LD_VAR 0 3
14830: PPUSH
14831: CALL_OW 250
14835: PUSH
14836: LD_INT 1
14838: NEG
14839: PPUSH
14840: LD_INT 1
14842: PPUSH
14843: CALL_OW 12
14847: PLUS
14848: PPUSH
14849: LD_VAR 0 3
14853: PPUSH
14854: CALL_OW 251
14858: PUSH
14859: LD_INT 1
14861: NEG
14862: PPUSH
14863: LD_INT 1
14865: PPUSH
14866: CALL_OW 12
14870: PLUS
14871: PPUSH
14872: CALL_OW 153
14876: GO 14910
14878: LD_INT 3
14880: DOUBLE
14881: EQUAL
14882: IFTRUE 14886
14884: GO 14909
14886: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
14887: LD_VAR 0 6
14891: PUSH
14892: LD_VAR 0 5
14896: ARRAY
14897: PPUSH
14898: LD_VAR 0 3
14902: PPUSH
14903: CALL_OW 115
14907: GO 14910
14909: POP
// end ; end ;
14910: GO 14726
14912: POP
14913: POP
14914: GO 14713
14916: POP
14917: POP
// end ;
14918: LD_VAR 0 2
14922: RET
// export function PlaceMines ( area , n ) ; var i , r , x ; begin
14923: LD_INT 0
14925: PPUSH
14926: PPUSH
14927: PPUSH
14928: PPUSH
// r := 100 ;
14929: LD_ADDR_VAR 0 5
14933: PUSH
14934: LD_INT 100
14936: ST_TO_ADDR
// x := 0 ;
14937: LD_ADDR_VAR 0 6
14941: PUSH
14942: LD_INT 0
14944: ST_TO_ADDR
// while ( x < n ) do
14945: LD_VAR 0 6
14949: PUSH
14950: LD_VAR 0 2
14954: LESS
14955: IFFALSE 15242
// for i = 1 to AreaToList ( area , 0 ) [ 1 ] do
14957: LD_ADDR_VAR 0 4
14961: PUSH
14962: DOUBLE
14963: LD_INT 1
14965: DEC
14966: ST_TO_ADDR
14967: LD_VAR 0 1
14971: PPUSH
14972: LD_INT 0
14974: PPUSH
14975: CALL_OW 517
14979: PUSH
14980: LD_INT 1
14982: ARRAY
14983: PUSH
14984: FOR_TO
14985: IFFALSE 15238
// begin if r > 50 then
14987: LD_VAR 0 5
14991: PUSH
14992: LD_INT 50
14994: GREATER
14995: IFFALSE 15214
// begin if not MineAtPos ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ) then
14997: LD_VAR 0 1
15001: PPUSH
15002: LD_INT 0
15004: PPUSH
15005: CALL_OW 517
15009: PUSH
15010: LD_INT 1
15012: ARRAY
15013: PUSH
15014: LD_VAR 0 4
15018: ARRAY
15019: PPUSH
15020: LD_VAR 0 1
15024: PPUSH
15025: LD_INT 0
15027: PPUSH
15028: CALL_OW 517
15032: PUSH
15033: LD_INT 2
15035: ARRAY
15036: PUSH
15037: LD_VAR 0 4
15041: ARRAY
15042: PPUSH
15043: CALL_OW 458
15047: NOT
15048: IFFALSE 15198
// begin PlaceMine ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] , 8 , 0 ) ;
15050: LD_VAR 0 1
15054: PPUSH
15055: LD_INT 0
15057: PPUSH
15058: CALL_OW 517
15062: PUSH
15063: LD_INT 1
15065: ARRAY
15066: PUSH
15067: LD_VAR 0 4
15071: ARRAY
15072: PPUSH
15073: LD_VAR 0 1
15077: PPUSH
15078: LD_INT 0
15080: PPUSH
15081: CALL_OW 517
15085: PUSH
15086: LD_INT 2
15088: ARRAY
15089: PUSH
15090: LD_VAR 0 4
15094: ARRAY
15095: PPUSH
15096: LD_INT 8
15098: PPUSH
15099: LD_INT 0
15101: PPUSH
15102: CALL_OW 454
// arabianMines := Insert ( arabianMines , 1 , [ AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ] ) ;
15106: LD_ADDR_EXP 44
15110: PUSH
15111: LD_EXP 44
15115: PPUSH
15116: LD_INT 1
15118: PPUSH
15119: LD_VAR 0 1
15123: PPUSH
15124: LD_INT 0
15126: PPUSH
15127: CALL_OW 517
15131: PUSH
15132: LD_INT 1
15134: ARRAY
15135: PUSH
15136: LD_VAR 0 4
15140: ARRAY
15141: PUSH
15142: LD_VAR 0 1
15146: PPUSH
15147: LD_INT 0
15149: PPUSH
15150: CALL_OW 517
15154: PUSH
15155: LD_INT 2
15157: ARRAY
15158: PUSH
15159: LD_VAR 0 4
15163: ARRAY
15164: PUSH
15165: EMPTY
15166: LIST
15167: LIST
15168: PPUSH
15169: CALL_OW 2
15173: ST_TO_ADDR
// r := 0 ;
15174: LD_ADDR_VAR 0 5
15178: PUSH
15179: LD_INT 0
15181: ST_TO_ADDR
// x := x + 1 ;
15182: LD_ADDR_VAR 0 6
15186: PUSH
15187: LD_VAR 0 6
15191: PUSH
15192: LD_INT 1
15194: PLUS
15195: ST_TO_ADDR
// end else
15196: GO 15212
// r := r + 35 ;
15198: LD_ADDR_VAR 0 5
15202: PUSH
15203: LD_VAR 0 5
15207: PUSH
15208: LD_INT 35
15210: PLUS
15211: ST_TO_ADDR
// end else
15212: GO 15236
// r := r + rand ( 10 , 25 ) ;
15214: LD_ADDR_VAR 0 5
15218: PUSH
15219: LD_VAR 0 5
15223: PUSH
15224: LD_INT 10
15226: PPUSH
15227: LD_INT 25
15229: PPUSH
15230: CALL_OW 12
15234: PLUS
15235: ST_TO_ADDR
// end ;
15236: GO 14984
15238: POP
15239: POP
15240: GO 14945
// end ;
15242: LD_VAR 0 3
15246: RET
// export function DefendDepot ( side , build ) ; var i , j , tmpTab ; begin
15247: LD_INT 0
15249: PPUSH
15250: PPUSH
15251: PPUSH
15252: PPUSH
// tmpTab = [ ] ;
15253: LD_ADDR_VAR 0 6
15257: PUSH
15258: EMPTY
15259: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) > 0 then
15260: LD_INT 22
15262: PUSH
15263: LD_VAR 0 1
15267: PUSH
15268: EMPTY
15269: LIST
15270: LIST
15271: PUSH
15272: LD_INT 30
15274: PUSH
15275: LD_INT 32
15277: PUSH
15278: EMPTY
15279: LIST
15280: LIST
15281: PUSH
15282: EMPTY
15283: LIST
15284: LIST
15285: PPUSH
15286: CALL_OW 69
15290: PUSH
15291: LD_INT 0
15293: GREATER
15294: IFFALSE 15377
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
15296: LD_ADDR_VAR 0 4
15300: PUSH
15301: LD_INT 22
15303: PUSH
15304: LD_VAR 0 1
15308: PUSH
15309: EMPTY
15310: LIST
15311: LIST
15312: PUSH
15313: LD_INT 30
15315: PUSH
15316: LD_INT 32
15318: PUSH
15319: EMPTY
15320: LIST
15321: LIST
15322: PUSH
15323: EMPTY
15324: LIST
15325: LIST
15326: PPUSH
15327: CALL_OW 69
15331: PUSH
15332: FOR_IN
15333: IFFALSE 15375
// begin for j in UnitsInside ( i ) do
15335: LD_ADDR_VAR 0 5
15339: PUSH
15340: LD_VAR 0 4
15344: PPUSH
15345: CALL_OW 313
15349: PUSH
15350: FOR_IN
15351: IFFALSE 15371
// tmpTab = tmpTab ^ j ;
15353: LD_ADDR_VAR 0 6
15357: PUSH
15358: LD_VAR 0 6
15362: PUSH
15363: LD_VAR 0 5
15367: ADD
15368: ST_TO_ADDR
15369: GO 15350
15371: POP
15372: POP
// end ;
15373: GO 15332
15375: POP
15376: POP
// end ; ComAgressiveMove ( tmpTab , GetX ( build ) , GetY ( build ) ) ;
15377: LD_VAR 0 6
15381: PPUSH
15382: LD_VAR 0 2
15386: PPUSH
15387: CALL_OW 250
15391: PPUSH
15392: LD_VAR 0 2
15396: PPUSH
15397: CALL_OW 251
15401: PPUSH
15402: CALL_OW 114
// end ;
15406: LD_VAR 0 3
15410: RET
// export function CreateNature ; var i , un ; begin
15411: LD_INT 0
15413: PPUSH
15414: PPUSH
15415: PPUSH
// uc_side := 0 ;
15416: LD_ADDR_OWVAR 20
15420: PUSH
15421: LD_INT 0
15423: ST_TO_ADDR
// uc_nation := 0 ;
15424: LD_ADDR_OWVAR 21
15428: PUSH
15429: LD_INT 0
15431: ST_TO_ADDR
// InitHc ;
15432: CALL_OW 19
// hc_class := class_fish ;
15436: LD_ADDR_OWVAR 28
15440: PUSH
15441: LD_INT 20
15443: ST_TO_ADDR
// for i = 1 to 6 do
15444: LD_ADDR_VAR 0 2
15448: PUSH
15449: DOUBLE
15450: LD_INT 1
15452: DEC
15453: ST_TO_ADDR
15454: LD_INT 6
15456: PUSH
15457: FOR_TO
15458: IFFALSE 15477
// PlaceUnitArea ( CreateHuman , waterArea , false ) ;
15460: CALL_OW 44
15464: PPUSH
15465: LD_INT 23
15467: PPUSH
15468: LD_INT 0
15470: PPUSH
15471: CALL_OW 49
15475: GO 15457
15477: POP
15478: POP
// for i = 1 to Difficulty + 2 do
15479: LD_ADDR_VAR 0 2
15483: PUSH
15484: DOUBLE
15485: LD_INT 1
15487: DEC
15488: ST_TO_ADDR
15489: LD_OWVAR 67
15493: PUSH
15494: LD_INT 2
15496: PLUS
15497: PUSH
15498: FOR_TO
15499: IFFALSE 15608
// begin hc_sex = sex_male ;
15501: LD_ADDR_OWVAR 27
15505: PUSH
15506: LD_INT 1
15508: ST_TO_ADDR
// uc_side = 0 ;
15509: LD_ADDR_OWVAR 20
15513: PUSH
15514: LD_INT 0
15516: ST_TO_ADDR
// uc_nation = nation_nature ;
15517: LD_ADDR_OWVAR 21
15521: PUSH
15522: LD_INT 0
15524: ST_TO_ADDR
// hc_class = class_tiger ;
15525: LD_ADDR_OWVAR 28
15529: PUSH
15530: LD_INT 14
15532: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
15533: LD_ADDR_OWVAR 31
15537: PUSH
15538: LD_EXP 37
15542: PUSH
15543: LD_INT 0
15545: PUSH
15546: LD_INT 0
15548: PUSH
15549: LD_INT 0
15551: PUSH
15552: EMPTY
15553: LIST
15554: LIST
15555: LIST
15556: LIST
15557: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
15558: LD_ADDR_OWVAR 35
15562: PUSH
15563: LD_INT 5
15565: NEG
15566: PPUSH
15567: LD_INT 5
15569: PPUSH
15570: CALL_OW 12
15574: PUSH
15575: LD_OWVAR 67
15579: MUL
15580: ST_TO_ADDR
// un = CreateHuman ;
15581: LD_ADDR_VAR 0 3
15585: PUSH
15586: CALL_OW 44
15590: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
15591: LD_VAR 0 3
15595: PPUSH
15596: LD_INT 24
15598: PPUSH
15599: LD_INT 0
15601: PPUSH
15602: CALL_OW 49
// end ;
15606: GO 15498
15608: POP
15609: POP
// for i = 1 to rand ( 3 , 4 ) do
15610: LD_ADDR_VAR 0 2
15614: PUSH
15615: DOUBLE
15616: LD_INT 1
15618: DEC
15619: ST_TO_ADDR
15620: LD_INT 3
15622: PPUSH
15623: LD_INT 4
15625: PPUSH
15626: CALL_OW 12
15630: PUSH
15631: FOR_TO
15632: IFFALSE 15724
// begin hc_sex = sex_male ;
15634: LD_ADDR_OWVAR 27
15638: PUSH
15639: LD_INT 1
15641: ST_TO_ADDR
// uc_side = 0 ;
15642: LD_ADDR_OWVAR 20
15646: PUSH
15647: LD_INT 0
15649: ST_TO_ADDR
// uc_nation = nation_nature ;
15650: LD_ADDR_OWVAR 21
15654: PUSH
15655: LD_INT 0
15657: ST_TO_ADDR
// hc_class = 18 ;
15658: LD_ADDR_OWVAR 28
15662: PUSH
15663: LD_INT 18
15665: ST_TO_ADDR
// hc_skills = [ 0 , 0 , 0 , 0 ] ;
15666: LD_ADDR_OWVAR 31
15670: PUSH
15671: LD_INT 0
15673: PUSH
15674: LD_INT 0
15676: PUSH
15677: LD_INT 0
15679: PUSH
15680: LD_INT 0
15682: PUSH
15683: EMPTY
15684: LIST
15685: LIST
15686: LIST
15687: LIST
15688: ST_TO_ADDR
// hc_agressivity = 0 ;
15689: LD_ADDR_OWVAR 35
15693: PUSH
15694: LD_INT 0
15696: ST_TO_ADDR
// un = CreateHuman ;
15697: LD_ADDR_VAR 0 3
15701: PUSH
15702: CALL_OW 44
15706: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
15707: LD_VAR 0 3
15711: PPUSH
15712: LD_INT 24
15714: PPUSH
15715: LD_INT 0
15717: PPUSH
15718: CALL_OW 49
// end ;
15722: GO 15631
15724: POP
15725: POP
// for i = 1 to rand ( 1 , 3 ) do
15726: LD_ADDR_VAR 0 2
15730: PUSH
15731: DOUBLE
15732: LD_INT 1
15734: DEC
15735: ST_TO_ADDR
15736: LD_INT 1
15738: PPUSH
15739: LD_INT 3
15741: PPUSH
15742: CALL_OW 12
15746: PUSH
15747: FOR_TO
15748: IFFALSE 15896
// begin hc_sex = sex_male ;
15750: LD_ADDR_OWVAR 27
15754: PUSH
15755: LD_INT 1
15757: ST_TO_ADDR
// uc_side = 0 ;
15758: LD_ADDR_OWVAR 20
15762: PUSH
15763: LD_INT 0
15765: ST_TO_ADDR
// uc_nation = nation_nature ;
15766: LD_ADDR_OWVAR 21
15770: PUSH
15771: LD_INT 0
15773: ST_TO_ADDR
// hc_class = class_apeman ;
15774: LD_ADDR_OWVAR 28
15778: PUSH
15779: LD_INT 12
15781: ST_TO_ADDR
// hc_skills = [ rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) ] ;
15782: LD_ADDR_OWVAR 31
15786: PUSH
15787: LD_EXP 36
15791: PPUSH
15792: LD_EXP 37
15796: PPUSH
15797: CALL_OW 12
15801: PUSH
15802: LD_EXP 36
15806: PPUSH
15807: LD_EXP 37
15811: PPUSH
15812: CALL_OW 12
15816: PUSH
15817: LD_EXP 36
15821: PPUSH
15822: LD_EXP 37
15826: PPUSH
15827: CALL_OW 12
15831: PUSH
15832: LD_EXP 36
15836: PPUSH
15837: LD_EXP 37
15841: PPUSH
15842: CALL_OW 12
15846: PUSH
15847: EMPTY
15848: LIST
15849: LIST
15850: LIST
15851: LIST
15852: ST_TO_ADDR
// hc_agressivity = rand ( 1 , 20 ) ;
15853: LD_ADDR_OWVAR 35
15857: PUSH
15858: LD_INT 1
15860: PPUSH
15861: LD_INT 20
15863: PPUSH
15864: CALL_OW 12
15868: ST_TO_ADDR
// un = CreateHuman ;
15869: LD_ADDR_VAR 0 3
15873: PUSH
15874: CALL_OW 44
15878: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
15879: LD_VAR 0 3
15883: PPUSH
15884: LD_INT 24
15886: PPUSH
15887: LD_INT 0
15889: PPUSH
15890: CALL_OW 49
// end ;
15894: GO 15747
15896: POP
15897: POP
// end ; end_of_file
15898: LD_VAR 0 1
15902: RET
// on UnitDestroyed ( unit ) do var i ;
15903: LD_INT 0
15905: PPUSH
// begin if unit in russianTanks then
15906: LD_VAR 0 1
15910: PUSH
15911: LD_EXP 39
15915: IN
15916: IFFALSE 15934
// russianTanks := russianTanks diff unit ;
15918: LD_ADDR_EXP 39
15922: PUSH
15923: LD_EXP 39
15927: PUSH
15928: LD_VAR 0 1
15932: DIFF
15933: ST_TO_ADDR
// if unit in russianTimeLapsers then
15934: LD_VAR 0 1
15938: PUSH
15939: LD_EXP 40
15943: IN
15944: IFFALSE 15962
// russianTimeLapsers := russianTimeLapsers diff unit ;
15946: LD_ADDR_EXP 40
15950: PUSH
15951: LD_EXP 40
15955: PUSH
15956: LD_VAR 0 1
15960: DIFF
15961: ST_TO_ADDR
// if unit in RuScientists then
15962: LD_VAR 0 1
15966: PUSH
15967: LD_EXP 34
15971: IN
15972: IFFALSE 16004
// begin RuScientists = RuScientists diff unit ;
15974: LD_ADDR_EXP 34
15978: PUSH
15979: LD_EXP 34
15983: PUSH
15984: LD_VAR 0 1
15988: DIFF
15989: ST_TO_ADDR
// sciCounter = sciCounter + 1 ;
15990: LD_ADDR_EXP 35
15994: PUSH
15995: LD_EXP 35
15999: PUSH
16000: LD_INT 1
16002: PLUS
16003: ST_TO_ADDR
// end ; end ;
16004: PPOPN 2
16006: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if GetWeapon ( killerUnit ) = us_laser then
16007: LD_VAR 0 3
16011: PPUSH
16012: CALL_OW 264
16016: PUSH
16017: LD_INT 9
16019: EQUAL
16020: IFFALSE 16036
// laserCounterDestroy := laserCounterDestroy + 1 ;
16022: LD_ADDR_EXP 50
16026: PUSH
16027: LD_EXP 50
16031: PUSH
16032: LD_INT 1
16034: PLUS
16035: ST_TO_ADDR
// end ;
16036: PPOPN 3
16038: END
// on UnitTeleported ( building , human ) do begin if building = ruteleprt and GetSide ( human ) = 1 and eventVar1 = 0 then
16039: LD_VAR 0 1
16043: PUSH
16044: LD_INT 10
16046: EQUAL
16047: PUSH
16048: LD_VAR 0 2
16052: PPUSH
16053: CALL_OW 255
16057: PUSH
16058: LD_INT 1
16060: EQUAL
16061: AND
16062: PUSH
16063: LD_EXP 47
16067: PUSH
16068: LD_INT 0
16070: EQUAL
16071: AND
16072: IFFALSE 16184
// begin eventVar1 = 1 ;
16074: LD_ADDR_EXP 47
16078: PUSH
16079: LD_INT 1
16081: ST_TO_ADDR
// teleportExplored = 1 ;
16082: LD_ADDR_EXP 33
16086: PUSH
16087: LD_INT 1
16089: ST_TO_ADDR
// ChangeMissionObjectives ( M2a ) ;
16090: LD_STRING M2a
16092: PPUSH
16093: CALL_OW 337
// wait ( 0 0$2 ) ;
16097: LD_INT 70
16099: PPUSH
16100: CALL_OW 67
// DialogueOn ;
16104: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , DT3a-Sol1-1 , DT3a-FSol1-1 ) ;
16108: LD_INT 22
16110: PUSH
16111: LD_INT 1
16113: PUSH
16114: EMPTY
16115: LIST
16116: LIST
16117: PUSH
16118: LD_INT 21
16120: PUSH
16121: LD_INT 1
16123: PUSH
16124: EMPTY
16125: LIST
16126: LIST
16127: PUSH
16128: EMPTY
16129: LIST
16130: LIST
16131: PPUSH
16132: CALL_OW 69
16136: PPUSH
16137: LD_STRING DT3a-Sol1-1
16139: PPUSH
16140: LD_STRING DT3a-FSol1-1
16142: PPUSH
16143: CALL 12328 0 3
// Say ( JMM , DT3a-JMM-1 ) ;
16147: LD_EXP 1
16151: PPUSH
16152: LD_STRING DT3a-JMM-1
16154: PPUSH
16155: CALL_OW 88
// CenterNowOnUnits ( human ) ;
16159: LD_VAR 0 2
16163: PPUSH
16164: CALL_OW 87
// Say ( JMM , DT3a-JMM-1a ) ;
16168: LD_EXP 1
16172: PPUSH
16173: LD_STRING DT3a-JMM-1a
16175: PPUSH
16176: CALL_OW 88
// DialogueOff ;
16180: CALL_OW 7
// end ; if building = ruteleprt and GetType ( human ) = unit_vehicle and GetSide ( human ) = 3 and vehicleTeleported = 0 then
16184: LD_VAR 0 1
16188: PUSH
16189: LD_INT 10
16191: EQUAL
16192: PUSH
16193: LD_VAR 0 2
16197: PPUSH
16198: CALL_OW 247
16202: PUSH
16203: LD_INT 2
16205: EQUAL
16206: AND
16207: PUSH
16208: LD_VAR 0 2
16212: PPUSH
16213: CALL_OW 255
16217: PUSH
16218: LD_INT 3
16220: EQUAL
16221: AND
16222: PUSH
16223: LD_EXP 28
16227: PUSH
16228: LD_INT 0
16230: EQUAL
16231: AND
16232: IFFALSE 16249
// begin wait ( 0 0$3 ) ;
16234: LD_INT 105
16236: PPUSH
16237: CALL_OW 67
// vehicleTeleported = 1 ;
16241: LD_ADDR_EXP 28
16245: PUSH
16246: LD_INT 1
16248: ST_TO_ADDR
// end ; if building = ruteleprt and GetType ( human ) = unit_vehicle and GetSide ( human ) = 3 and vehicleTeleported = 2 then
16249: LD_VAR 0 1
16253: PUSH
16254: LD_INT 10
16256: EQUAL
16257: PUSH
16258: LD_VAR 0 2
16262: PPUSH
16263: CALL_OW 247
16267: PUSH
16268: LD_INT 2
16270: EQUAL
16271: AND
16272: PUSH
16273: LD_VAR 0 2
16277: PPUSH
16278: CALL_OW 255
16282: PUSH
16283: LD_INT 3
16285: EQUAL
16286: AND
16287: PUSH
16288: LD_EXP 28
16292: PUSH
16293: LD_INT 2
16295: EQUAL
16296: AND
16297: IFFALSE 16314
// begin wait ( 0 0$3 ) ;
16299: LD_INT 105
16301: PPUSH
16302: CALL_OW 67
// vehicleTeleported = 3 ;
16306: LD_ADDR_EXP 28
16310: PUSH
16311: LD_INT 3
16313: ST_TO_ADDR
// end ; if building = ruteleprt and GetType ( human ) = unit_vehicle and GetSide ( human ) = 3 then
16314: LD_VAR 0 1
16318: PUSH
16319: LD_INT 10
16321: EQUAL
16322: PUSH
16323: LD_VAR 0 2
16327: PPUSH
16328: CALL_OW 247
16332: PUSH
16333: LD_INT 2
16335: EQUAL
16336: AND
16337: PUSH
16338: LD_VAR 0 2
16342: PPUSH
16343: CALL_OW 255
16347: PUSH
16348: LD_INT 3
16350: EQUAL
16351: AND
16352: IFFALSE 16368
// tpCounter = tpCounter + 1 ;
16354: LD_ADDR_EXP 29
16358: PUSH
16359: LD_EXP 29
16363: PUSH
16364: LD_INT 1
16366: PLUS
16367: ST_TO_ADDR
// end ;
16368: PPOPN 2
16370: END
// on VehicleConstructed ( vehicle , factory ) do begin if GetWeapon ( vehicle ) = us_rocket_launcher then
16371: LD_VAR 0 1
16375: PPUSH
16376: CALL_OW 264
16380: PUSH
16381: LD_INT 7
16383: EQUAL
16384: IFFALSE 16394
// rocketBuilded := true ;
16386: LD_ADDR_EXP 51
16390: PUSH
16391: LD_INT 1
16393: ST_TO_ADDR
// if factory = ru_fact or factory = rufab2 then
16394: LD_VAR 0 2
16398: PUSH
16399: LD_INT 21
16401: EQUAL
16402: PUSH
16403: LD_VAR 0 2
16407: PUSH
16408: LD_INT 112
16410: EQUAL
16411: OR
16412: IFFALSE 16533
// if GetSide ( vehicle ) = 3 then
16414: LD_VAR 0 1
16418: PPUSH
16419: CALL_OW 255
16423: PUSH
16424: LD_INT 3
16426: EQUAL
16427: IFFALSE 16533
// begin if GetWeapon ( vehicle ) = 46 or GetWeapon ( vehicle ) = 45 or GetWeapon ( vehicle ) = 44 then
16429: LD_VAR 0 1
16433: PPUSH
16434: CALL_OW 264
16438: PUSH
16439: LD_INT 46
16441: EQUAL
16442: PUSH
16443: LD_VAR 0 1
16447: PPUSH
16448: CALL_OW 264
16452: PUSH
16453: LD_INT 45
16455: EQUAL
16456: OR
16457: PUSH
16458: LD_VAR 0 1
16462: PPUSH
16463: CALL_OW 264
16467: PUSH
16468: LD_INT 44
16470: EQUAL
16471: OR
16472: IFFALSE 16490
// begin russianTanks = russianTanks ^ vehicle ;
16474: LD_ADDR_EXP 39
16478: PUSH
16479: LD_EXP 39
16483: PUSH
16484: LD_VAR 0 1
16488: ADD
16489: ST_TO_ADDR
// end ; if GetWeapon ( vehicle ) = 49 then
16490: LD_VAR 0 1
16494: PPUSH
16495: CALL_OW 264
16499: PUSH
16500: LD_INT 49
16502: EQUAL
16503: IFFALSE 16533
// begin russianTimeLapsers = russianTimeLapsers ^ vehicle ;
16505: LD_ADDR_EXP 40
16509: PUSH
16510: LD_EXP 40
16514: PUSH
16515: LD_VAR 0 1
16519: ADD
16520: ST_TO_ADDR
// ComEnterUnit ( vehicle , rutp ) ;
16521: LD_VAR 0 1
16525: PPUSH
16526: LD_INT 137
16528: PPUSH
16529: CALL_OW 120
// end ; end ; end ;
16533: PPOPN 2
16535: END
// on LeaveVehicle ( vehicle , human ) do var i ;
16536: LD_INT 0
16538: PPUSH
// begin if GetSide ( human ) = 3 and GetClass ( human ) = 3 and GetSide ( ru_fact ) = 3 and IsOk ( ru_fact ) then
16539: LD_VAR 0 2
16543: PPUSH
16544: CALL_OW 255
16548: PUSH
16549: LD_INT 3
16551: EQUAL
16552: PUSH
16553: LD_VAR 0 2
16557: PPUSH
16558: CALL_OW 257
16562: PUSH
16563: LD_INT 3
16565: EQUAL
16566: AND
16567: PUSH
16568: LD_INT 21
16570: PPUSH
16571: CALL_OW 255
16575: PUSH
16576: LD_INT 3
16578: EQUAL
16579: AND
16580: PUSH
16581: LD_INT 21
16583: PPUSH
16584: CALL_OW 302
16588: AND
16589: IFFALSE 16603
// ComEnterUnit ( human , ru_fact ) ;
16591: LD_VAR 0 2
16595: PPUSH
16596: LD_INT 21
16598: PPUSH
16599: CALL_OW 120
// if GetClass ( human ) = 4 and GetSide ( human ) = 3 and ruAI = 0 then
16603: LD_VAR 0 2
16607: PPUSH
16608: CALL_OW 257
16612: PUSH
16613: LD_INT 4
16615: EQUAL
16616: PUSH
16617: LD_VAR 0 2
16621: PPUSH
16622: CALL_OW 255
16626: PUSH
16627: LD_INT 3
16629: EQUAL
16630: AND
16631: PUSH
16632: LD_EXP 41
16636: PUSH
16637: LD_INT 0
16639: EQUAL
16640: AND
16641: IFFALSE 16703
// for i in RuScientists do
16643: LD_ADDR_VAR 0 3
16647: PUSH
16648: LD_EXP 34
16652: PUSH
16653: FOR_IN
16654: IFFALSE 16701
// if i = human then
16656: LD_VAR 0 3
16660: PUSH
16661: LD_VAR 0 2
16665: EQUAL
16666: IFFALSE 16699
// ComMoveToArea ( i , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) ;
16668: LD_VAR 0 3
16672: PPUSH
16673: LD_INT 13
16675: PUSH
16676: LD_INT 14
16678: PUSH
16679: EMPTY
16680: LIST
16681: LIST
16682: PUSH
16683: LD_INT 1
16685: PPUSH
16686: LD_INT 2
16688: PPUSH
16689: CALL_OW 12
16693: ARRAY
16694: PPUSH
16695: CALL_OW 113
16699: GO 16653
16701: POP
16702: POP
// end ;
16703: PPOPN 3
16705: END
// on EnterVehicle ( vehicle , human ) do var i , rnd ;
16706: LD_INT 0
16708: PPUSH
16709: PPUSH
// begin if GetSide ( human ) = 3 and GetClass ( human ) = 4 then
16710: LD_VAR 0 2
16714: PPUSH
16715: CALL_OW 255
16719: PUSH
16720: LD_INT 3
16722: EQUAL
16723: PUSH
16724: LD_VAR 0 2
16728: PPUSH
16729: CALL_OW 257
16733: PUSH
16734: LD_INT 4
16736: EQUAL
16737: AND
16738: IFFALSE 16880
// for i in RuScientists do
16740: LD_ADDR_VAR 0 3
16744: PUSH
16745: LD_EXP 34
16749: PUSH
16750: FOR_IN
16751: IFFALSE 16878
// if i = human then
16753: LD_VAR 0 3
16757: PUSH
16758: LD_VAR 0 2
16762: EQUAL
16763: IFFALSE 16876
// if IsOk ( rutp ) then
16765: LD_INT 137
16767: PPUSH
16768: CALL_OW 302
16772: IFFALSE 16845
// begin rnd = rand ( 1 , 2 ) ;
16774: LD_ADDR_VAR 0 4
16778: PUSH
16779: LD_INT 1
16781: PPUSH
16782: LD_INT 2
16784: PPUSH
16785: CALL_OW 12
16789: ST_TO_ADDR
// if rnd = 1 then
16790: LD_VAR 0 4
16794: PUSH
16795: LD_INT 1
16797: EQUAL
16798: IFFALSE 16812
// ComEnterUnit ( vehicle , rutp ) ;
16800: LD_VAR 0 1
16804: PPUSH
16805: LD_INT 137
16807: PPUSH
16808: CALL_OW 120
// AddComMoveToArea ( vehicle , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) ;
16812: LD_VAR 0 1
16816: PPUSH
16817: LD_INT 13
16819: PUSH
16820: LD_INT 14
16822: PUSH
16823: EMPTY
16824: LIST
16825: LIST
16826: PUSH
16827: LD_INT 1
16829: PPUSH
16830: LD_INT 2
16832: PPUSH
16833: CALL_OW 12
16837: ARRAY
16838: PPUSH
16839: CALL_OW 173
// end else
16843: GO 16876
// begin ComMoveToArea ( vehicle , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) ;
16845: LD_VAR 0 1
16849: PPUSH
16850: LD_INT 13
16852: PUSH
16853: LD_INT 14
16855: PUSH
16856: EMPTY
16857: LIST
16858: LIST
16859: PUSH
16860: LD_INT 1
16862: PPUSH
16863: LD_INT 2
16865: PPUSH
16866: CALL_OW 12
16870: ARRAY
16871: PPUSH
16872: CALL_OW 113
// end ;
16876: GO 16750
16878: POP
16879: POP
// end ;
16880: PPOPN 4
16882: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
16883: LD_VAR 0 1
16887: PPUSH
16888: CALL 32963 0 1
// end ; end_of_file
16892: PPOPN 1
16894: END
// every 0 0$1 trigger ruAI = 1 do
16895: LD_EXP 41
16899: PUSH
16900: LD_INT 1
16902: EQUAL
16903: IFFALSE 17015
16905: GO 16907
16907: DISABLE
// begin enable ;
16908: ENABLE
// RepairAndRebuildBase ( 3 , ruwestdepot , RuWestBase , ruDestroyedBuildings ) ;
16909: LD_INT 3
16911: PPUSH
16912: LD_INT 6
16914: PPUSH
16915: LD_INT 9
16917: PPUSH
16918: LD_EXP 38
16922: PPUSH
16923: CALL 13297 0 4
// RepairAndRebuildBase ( 3 , rueastdepot , RuEastBase , ruDestroyedBuildings ) ;
16927: LD_INT 3
16929: PPUSH
16930: LD_INT 4
16932: PPUSH
16933: LD_INT 10
16935: PPUSH
16936: LD_EXP 38
16940: PPUSH
16941: CALL 13297 0 4
// CraneRepairBuild ( 3 , RuWestBase ) ;
16945: LD_INT 3
16947: PPUSH
16948: LD_INT 9
16950: PPUSH
16951: CALL 14268 0 2
// CraneRepairBuild ( 3 , RuEastBase ) ;
16955: LD_INT 3
16957: PPUSH
16958: LD_INT 10
16960: PPUSH
16961: CALL 14268 0 2
// HealUnitInBase ( 3 , RuWestHealArea , RuWestBase , rulab1 ) ;
16965: LD_INT 3
16967: PPUSH
16968: LD_INT 16
16970: PPUSH
16971: LD_INT 9
16973: PPUSH
16974: LD_INT 91
16976: PPUSH
16977: CALL 13688 0 4
// HealUnitInBase ( 3 , RuEastHealArea , RuEastBase , [ rulab2 , rulab3 , rulab4 ] ) ;
16981: LD_INT 3
16983: PPUSH
16984: LD_INT 17
16986: PPUSH
16987: LD_INT 10
16989: PPUSH
16990: LD_INT 47
16992: PUSH
16993: LD_INT 129
16995: PUSH
16996: LD_INT 135
16998: PUSH
16999: EMPTY
17000: LIST
17001: LIST
17002: LIST
17003: PPUSH
17004: CALL 13688 0 4
// IntBazooka ( 3 ) ;
17008: LD_INT 3
17010: PPUSH
17011: CALL 14595 0 1
// end ;
17015: END
// every 0 0$30 trigger russianTanks >= [ 3 , 4 , 4 ] [ Difficulty ] do var j , tmp , target1 , target2 ;
17016: LD_EXP 39
17020: PUSH
17021: LD_INT 3
17023: PUSH
17024: LD_INT 4
17026: PUSH
17027: LD_INT 4
17029: PUSH
17030: EMPTY
17031: LIST
17032: LIST
17033: LIST
17034: PUSH
17035: LD_OWVAR 67
17039: ARRAY
17040: GREATEREQUAL
17041: IFFALSE 17513
17043: GO 17045
17045: DISABLE
17046: LD_INT 0
17048: PPUSH
17049: PPUSH
17050: PPUSH
17051: PPUSH
// begin enable ;
17052: ENABLE
// tmp := russianTanks union russianTimeLapsers ;
17053: LD_ADDR_VAR 0 2
17057: PUSH
17058: LD_EXP 39
17062: PUSH
17063: LD_EXP 40
17067: UNION
17068: ST_TO_ADDR
// russianTanks := russianTanks diff tmp ;
17069: LD_ADDR_EXP 39
17073: PUSH
17074: LD_EXP 39
17078: PUSH
17079: LD_VAR 0 2
17083: DIFF
17084: ST_TO_ADDR
// russianTimeLapsers := russianTimeLapsers diff tmp ;
17085: LD_ADDR_EXP 40
17089: PUSH
17090: LD_EXP 40
17094: PUSH
17095: LD_VAR 0 2
17099: DIFF
17100: ST_TO_ADDR
// if IsOk ( ruteleprt ) then
17101: LD_INT 10
17103: PPUSH
17104: CALL_OW 302
17108: IFFALSE 17191
// begin for j in tmp do
17110: LD_ADDR_VAR 0 1
17114: PUSH
17115: LD_VAR 0 2
17119: PUSH
17120: FOR_IN
17121: IFFALSE 17164
// if attackTactic < 2 then
17123: LD_EXP 43
17127: PUSH
17128: LD_INT 2
17130: LESS
17131: IFFALSE 17147
// ComEnterUnit ( j , ruteleprt ) else
17133: LD_VAR 0 1
17137: PPUSH
17138: LD_INT 10
17140: PPUSH
17141: CALL_OW 120
17145: GO 17162
// ComMoveXY ( j , 88 , 69 ) ;
17147: LD_VAR 0 1
17151: PPUSH
17152: LD_INT 88
17154: PPUSH
17155: LD_INT 69
17157: PPUSH
17158: CALL_OW 111
17162: GO 17120
17164: POP
17165: POP
// repeat wait ( 0 0$1 ) ;
17166: LD_INT 35
17168: PPUSH
17169: CALL_OW 67
// until not UnitFilter ( tmp , [ f_hastask ] ) ;
17173: LD_VAR 0 2
17177: PPUSH
17178: LD_INT 60
17180: PUSH
17181: EMPTY
17182: LIST
17183: PPUSH
17184: CALL_OW 72
17188: NOT
17189: IFFALSE 17166
// end ; repeat wait ( 0 0$1 ) ;
17191: LD_INT 35
17193: PPUSH
17194: CALL_OW 67
// for j in tmp do
17198: LD_ADDR_VAR 0 1
17202: PUSH
17203: LD_VAR 0 2
17207: PUSH
17208: FOR_IN
17209: IFFALSE 17504
// begin if IsDead ( j ) then
17211: LD_VAR 0 1
17215: PPUSH
17216: CALL_OW 301
17220: IFFALSE 17238
// tmp := tmp diff j ;
17222: LD_ADDR_VAR 0 2
17226: PUSH
17227: LD_VAR 0 2
17231: PUSH
17232: LD_VAR 0 1
17236: DIFF
17237: ST_TO_ADDR
// target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , j ) ;
17238: LD_ADDR_VAR 0 3
17242: PUSH
17243: LD_INT 81
17245: PUSH
17246: LD_INT 3
17248: PUSH
17249: EMPTY
17250: LIST
17251: LIST
17252: PPUSH
17253: CALL_OW 69
17257: PPUSH
17258: LD_VAR 0 1
17262: PPUSH
17263: CALL_OW 74
17267: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , 3 ] , [ f_type , unit_human ] ] ] ) , j ) ;
17268: LD_ADDR_VAR 0 4
17272: PUSH
17273: LD_INT 81
17275: PUSH
17276: LD_INT 3
17278: PUSH
17279: EMPTY
17280: LIST
17281: LIST
17282: PUSH
17283: LD_INT 21
17285: PUSH
17286: LD_INT 1
17288: PUSH
17289: EMPTY
17290: LIST
17291: LIST
17292: PUSH
17293: EMPTY
17294: LIST
17295: LIST
17296: PUSH
17297: EMPTY
17298: LIST
17299: PPUSH
17300: CALL_OW 69
17304: PPUSH
17305: LD_VAR 0 1
17309: PPUSH
17310: CALL_OW 74
17314: ST_TO_ADDR
// if GetWeapon ( j ) = ru_time_lapser then
17315: LD_VAR 0 1
17319: PPUSH
17320: CALL_OW 264
17324: PUSH
17325: LD_INT 49
17327: EQUAL
17328: IFFALSE 17436
// begin if UnitFilter ( tmp , [ f_not , [ f_weapon , ru_time_lapser ] ] ) > 1 then
17330: LD_VAR 0 2
17334: PPUSH
17335: LD_INT 3
17337: PUSH
17338: LD_INT 34
17340: PUSH
17341: LD_INT 49
17343: PUSH
17344: EMPTY
17345: LIST
17346: LIST
17347: PUSH
17348: EMPTY
17349: LIST
17350: LIST
17351: PPUSH
17352: CALL_OW 72
17356: PUSH
17357: LD_INT 1
17359: GREATER
17360: IFFALSE 17410
// ComMoveUnit ( j , NearestUnitToUnit ( UnitFilter ( tmp , [ f_not , [ f_weapon , ru_time_lapser ] ] ) , j ) ) else
17362: LD_VAR 0 1
17366: PPUSH
17367: LD_VAR 0 2
17371: PPUSH
17372: LD_INT 3
17374: PUSH
17375: LD_INT 34
17377: PUSH
17378: LD_INT 49
17380: PUSH
17381: EMPTY
17382: LIST
17383: LIST
17384: PUSH
17385: EMPTY
17386: LIST
17387: LIST
17388: PPUSH
17389: CALL_OW 72
17393: PPUSH
17394: LD_VAR 0 1
17398: PPUSH
17399: CALL_OW 74
17403: PPUSH
17404: CALL_OW 112
17408: GO 17434
// ComMoveUnit ( j , NearestUnitToUnit ( target1 , j ) ) ;
17410: LD_VAR 0 1
17414: PPUSH
17415: LD_VAR 0 3
17419: PPUSH
17420: LD_VAR 0 1
17424: PPUSH
17425: CALL_OW 74
17429: PPUSH
17430: CALL_OW 112
// end else
17434: GO 17502
// begin if GetDistUnits ( j , target2 ) < GetDistUnits ( j , target1 ) + 2 then
17436: LD_VAR 0 1
17440: PPUSH
17441: LD_VAR 0 4
17445: PPUSH
17446: CALL_OW 296
17450: PUSH
17451: LD_VAR 0 1
17455: PPUSH
17456: LD_VAR 0 3
17460: PPUSH
17461: CALL_OW 296
17465: PUSH
17466: LD_INT 2
17468: PLUS
17469: LESS
17470: IFFALSE 17488
// ComAttackUnit ( j , target2 ) else
17472: LD_VAR 0 1
17476: PPUSH
17477: LD_VAR 0 4
17481: PPUSH
17482: CALL_OW 115
17486: GO 17502
// ComAttackUnit ( j , target1 ) ;
17488: LD_VAR 0 1
17492: PPUSH
17493: LD_VAR 0 3
17497: PPUSH
17498: CALL_OW 115
// end ; end ;
17502: GO 17208
17504: POP
17505: POP
// until not tmp ;
17506: LD_VAR 0 2
17510: NOT
17511: IFFALSE 17191
// end ;
17513: PPOPN 4
17515: END
// every 0 0$1 trigger IsDying ( rueastdepot ) do
17516: LD_INT 4
17518: PPUSH
17519: CALL_OW 303
17523: IFFALSE 17538
17525: GO 17527
17527: DISABLE
// DefendDepot ( 3 , rueastdepot ) ;
17528: LD_INT 3
17530: PPUSH
17531: LD_INT 4
17533: PPUSH
17534: CALL 15247 0 2
17538: END
// every 0 0$1 do
17539: GO 17541
17541: DISABLE
// begin ResAllTechs ( 3 , rulab1 , 3 ) ;
17542: LD_INT 3
17544: PPUSH
17545: LD_INT 91
17547: PPUSH
17548: LD_INT 3
17550: PPUSH
17551: CALL 13056 0 3
// ResAllTechs ( 3 , rulab2 , 3 ) ;
17555: LD_INT 3
17557: PPUSH
17558: LD_INT 47
17560: PPUSH
17561: LD_INT 3
17563: PPUSH
17564: CALL 13056 0 3
// ResAllTechs ( 3 , rulab3 , 3 ) ;
17568: LD_INT 3
17570: PPUSH
17571: LD_INT 129
17573: PPUSH
17574: LD_INT 3
17576: PPUSH
17577: CALL 13056 0 3
// ResAllTechs ( 3 , ruheadlab , 3 ) ;
17581: LD_INT 3
17583: PPUSH
17584: LD_INT 3
17586: PPUSH
17587: LD_INT 3
17589: PPUSH
17590: CALL 13056 0 3
// end ;
17594: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
17595: LD_INT 22
17597: PUSH
17598: LD_INT 1
17600: PUSH
17601: EMPTY
17602: LIST
17603: LIST
17604: PUSH
17605: LD_INT 21
17607: PUSH
17608: LD_INT 3
17610: PUSH
17611: EMPTY
17612: LIST
17613: LIST
17614: PUSH
17615: EMPTY
17616: LIST
17617: LIST
17618: PPUSH
17619: CALL_OW 69
17623: IFFALSE 17688
17625: GO 17627
17627: DISABLE
// begin wait ( 0 0$40 ) ;
17628: LD_INT 1400
17630: PPUSH
17631: CALL_OW 67
// BuildingVehicle ( 3 , ru_fact , [ 3 , 4 , 4 ] [ Difficulty ] , [ 46 , 45 , 44 ] , 3 , 3 , 24 ) ;
17635: LD_INT 3
17637: PPUSH
17638: LD_INT 21
17640: PPUSH
17641: LD_INT 3
17643: PUSH
17644: LD_INT 4
17646: PUSH
17647: LD_INT 4
17649: PUSH
17650: EMPTY
17651: LIST
17652: LIST
17653: LIST
17654: PUSH
17655: LD_OWVAR 67
17659: ARRAY
17660: PPUSH
17661: LD_INT 46
17663: PUSH
17664: LD_INT 45
17666: PUSH
17667: LD_INT 44
17669: PUSH
17670: EMPTY
17671: LIST
17672: LIST
17673: LIST
17674: PPUSH
17675: LD_INT 3
17677: PPUSH
17678: LD_INT 3
17680: PPUSH
17681: LD_INT 24
17683: PPUSH
17684: CALL 14448 0 7
// end ;
17688: END
// every 6 6$0 + 2 2$00 trigger secondPass = 2 and GetSide ( ru_fact ) = 3 and GetSide ( rufab2 ) = 3 and IsOk ( ru_fact ) and IsOk ( rufab2 ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_not , [ f_empty ] ] ] ) diff FilterUnitsInArea ( RussianOutsideVehs , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) = 0 do
17689: LD_EXP 27
17693: PUSH
17694: LD_INT 2
17696: EQUAL
17697: PUSH
17698: LD_INT 21
17700: PPUSH
17701: CALL_OW 255
17705: PUSH
17706: LD_INT 3
17708: EQUAL
17709: AND
17710: PUSH
17711: LD_INT 112
17713: PPUSH
17714: CALL_OW 255
17718: PUSH
17719: LD_INT 3
17721: EQUAL
17722: AND
17723: PUSH
17724: LD_INT 21
17726: PPUSH
17727: CALL_OW 302
17731: AND
17732: PUSH
17733: LD_INT 112
17735: PPUSH
17736: CALL_OW 302
17740: AND
17741: PUSH
17742: LD_INT 22
17744: PUSH
17745: LD_INT 3
17747: PUSH
17748: EMPTY
17749: LIST
17750: LIST
17751: PUSH
17752: LD_INT 21
17754: PUSH
17755: LD_INT 2
17757: PUSH
17758: EMPTY
17759: LIST
17760: LIST
17761: PUSH
17762: LD_INT 50
17764: PUSH
17765: EMPTY
17766: LIST
17767: PUSH
17768: LD_INT 3
17770: PUSH
17771: LD_INT 58
17773: PUSH
17774: EMPTY
17775: LIST
17776: PUSH
17777: EMPTY
17778: LIST
17779: LIST
17780: PUSH
17781: EMPTY
17782: LIST
17783: LIST
17784: LIST
17785: LIST
17786: PPUSH
17787: CALL_OW 69
17791: PUSH
17792: LD_INT 18
17794: PPUSH
17795: LD_INT 22
17797: PUSH
17798: LD_INT 3
17800: PUSH
17801: EMPTY
17802: LIST
17803: LIST
17804: PUSH
17805: LD_INT 21
17807: PUSH
17808: LD_INT 2
17810: PUSH
17811: EMPTY
17812: LIST
17813: LIST
17814: PUSH
17815: EMPTY
17816: LIST
17817: LIST
17818: PPUSH
17819: CALL_OW 70
17823: PUSH
17824: LD_INT 0
17826: EQUAL
17827: DIFF
17828: AND
17829: IFFALSE 17947
17831: GO 17833
17833: DISABLE
// begin enable ;
17834: ENABLE
// BuildingVehicle ( 3 , ru_fact , [ 3 , 4 , 4 ] [ Difficulty ] , [ 46 , 45 , 44 ] , 3 , 3 , 24 ) ;
17835: LD_INT 3
17837: PPUSH
17838: LD_INT 21
17840: PPUSH
17841: LD_INT 3
17843: PUSH
17844: LD_INT 4
17846: PUSH
17847: LD_INT 4
17849: PUSH
17850: EMPTY
17851: LIST
17852: LIST
17853: LIST
17854: PUSH
17855: LD_OWVAR 67
17859: ARRAY
17860: PPUSH
17861: LD_INT 46
17863: PUSH
17864: LD_INT 45
17866: PUSH
17867: LD_INT 44
17869: PUSH
17870: EMPTY
17871: LIST
17872: LIST
17873: LIST
17874: PPUSH
17875: LD_INT 3
17877: PPUSH
17878: LD_INT 3
17880: PPUSH
17881: LD_INT 24
17883: PPUSH
17884: CALL 14448 0 7
// if russianTimeLapsers = 0 then
17888: LD_EXP 40
17892: PUSH
17893: LD_INT 0
17895: EQUAL
17896: IFFALSE 17947
// BuildingVehicle ( 3 , rufab2 , [ 1 , 2 , 2 ] [ Difficulty ] , [ 49 , 49 ] , 3 , 3 , 24 ) ;
17898: LD_INT 3
17900: PPUSH
17901: LD_INT 112
17903: PPUSH
17904: LD_INT 1
17906: PUSH
17907: LD_INT 2
17909: PUSH
17910: LD_INT 2
17912: PUSH
17913: EMPTY
17914: LIST
17915: LIST
17916: LIST
17917: PUSH
17918: LD_OWVAR 67
17922: ARRAY
17923: PPUSH
17924: LD_INT 49
17926: PUSH
17927: LD_INT 49
17929: PUSH
17930: EMPTY
17931: LIST
17932: LIST
17933: PPUSH
17934: LD_INT 3
17936: PPUSH
17937: LD_INT 3
17939: PPUSH
17940: LD_INT 24
17942: PPUSH
17943: CALL 14448 0 7
// end ;
17947: END
// every 0 0$1 trigger arabianMines do var i ;
17948: LD_EXP 44
17952: IFFALSE 18073
17954: GO 17956
17956: DISABLE
17957: LD_INT 0
17959: PPUSH
// begin enable ;
17960: ENABLE
// for i in arabianMines do
17961: LD_ADDR_VAR 0 1
17965: PUSH
17966: LD_EXP 44
17970: PUSH
17971: FOR_IN
17972: IFFALSE 18071
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , i [ 1 ] , i [ 2 ] , 3 ] ] ) then
17974: LD_INT 22
17976: PUSH
17977: LD_INT 1
17979: PUSH
17980: EMPTY
17981: LIST
17982: LIST
17983: PUSH
17984: LD_INT 92
17986: PUSH
17987: LD_VAR 0 1
17991: PUSH
17992: LD_INT 1
17994: ARRAY
17995: PUSH
17996: LD_VAR 0 1
18000: PUSH
18001: LD_INT 2
18003: ARRAY
18004: PUSH
18005: LD_INT 3
18007: PUSH
18008: EMPTY
18009: LIST
18010: LIST
18011: LIST
18012: LIST
18013: PUSH
18014: EMPTY
18015: LIST
18016: LIST
18017: PPUSH
18018: CALL_OW 69
18022: IFFALSE 18069
// begin LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , 5 ) ;
18024: LD_VAR 0 1
18028: PUSH
18029: LD_INT 1
18031: ARRAY
18032: PPUSH
18033: LD_VAR 0 1
18037: PUSH
18038: LD_INT 2
18040: ARRAY
18041: PPUSH
18042: LD_INT 5
18044: PPUSH
18045: CALL_OW 456
// arabianMines := Delete ( arabianMines , i ) ;
18049: LD_ADDR_EXP 44
18053: PUSH
18054: LD_EXP 44
18058: PPUSH
18059: LD_VAR 0 1
18063: PPUSH
18064: CALL_OW 3
18068: ST_TO_ADDR
// end ; end ;
18069: GO 17971
18071: POP
18072: POP
// end ;
18073: PPOPN 1
18075: END
// every 0 0$1 trigger vehicleTeleported = 4 and tpCounter = [ 6 , 8 , 8 ] [ Difficulty ] do
18076: LD_EXP 28
18080: PUSH
18081: LD_INT 4
18083: EQUAL
18084: PUSH
18085: LD_EXP 29
18089: PUSH
18090: LD_INT 6
18092: PUSH
18093: LD_INT 8
18095: PUSH
18096: LD_INT 8
18098: PUSH
18099: EMPTY
18100: LIST
18101: LIST
18102: LIST
18103: PUSH
18104: LD_OWVAR 67
18108: ARRAY
18109: EQUAL
18110: AND
18111: IFFALSE 18129
18113: GO 18115
18115: DISABLE
// TeleportExit ( ruteleprt , 47 , 82 ) ;
18116: LD_INT 10
18118: PPUSH
18119: LD_INT 47
18121: PPUSH
18122: LD_INT 82
18124: PPUSH
18125: CALL_OW 243
18129: END
// every 2 2$0 trigger vehicleTeleported = 4 do
18130: LD_EXP 28
18134: PUSH
18135: LD_INT 4
18137: EQUAL
18138: IFFALSE 18160
18140: GO 18142
18142: DISABLE
// begin enable ;
18143: ENABLE
// attackTactic = rand ( 1 , 2 ) ;
18144: LD_ADDR_EXP 43
18148: PUSH
18149: LD_INT 1
18151: PPUSH
18152: LD_INT 2
18154: PPUSH
18155: CALL_OW 12
18159: ST_TO_ADDR
// end ; end_of_file
18160: END
// every 0 0$1 trigger IsDead ( ruheadlab ) do
18161: LD_INT 3
18163: PPUSH
18164: CALL_OW 301
18168: IFFALSE 18357
18170: GO 18172
18172: DISABLE
// begin if sciCounter = 0 then
18173: LD_EXP 35
18177: PUSH
18178: LD_INT 0
18180: EQUAL
18181: IFFALSE 18209
// begin Say ( JMM , D7a-JMM-1 ) ;
18183: LD_EXP 1
18187: PPUSH
18188: LD_STRING D7a-JMM-1
18190: PPUSH
18191: CALL_OW 88
// SayRadio ( Powell , D7a-Pow-1 ) ;
18195: LD_EXP 22
18199: PPUSH
18200: LD_STRING D7a-Pow-1
18202: PPUSH
18203: CALL_OW 94
// end else
18207: GO 18353
// if sciCounter < 6 then
18209: LD_EXP 35
18213: PUSH
18214: LD_INT 6
18216: LESS
18217: IFFALSE 18245
// begin Say ( JMM , D7b-JMM-1 ) ;
18219: LD_EXP 1
18223: PPUSH
18224: LD_STRING D7b-JMM-1
18226: PPUSH
18227: CALL_OW 88
// SayRadio ( Powell , D7b-Pow-1 ) ;
18231: LD_EXP 22
18235: PPUSH
18236: LD_STRING D7b-Pow-1
18238: PPUSH
18239: CALL_OW 94
// end else
18243: GO 18353
// begin Say ( JMM , D7c-JMM-1 ) ;
18245: LD_EXP 1
18249: PPUSH
18250: LD_STRING D7c-JMM-1
18252: PPUSH
18253: CALL_OW 88
// SayRadio ( Powell , D7c-Pow-1 ) ;
18257: LD_EXP 22
18261: PPUSH
18262: LD_STRING D7c-Pow-1
18264: PPUSH
18265: CALL_OW 94
// Say ( JMM , D7d-JMM-1 ) ;
18269: LD_EXP 1
18273: PPUSH
18274: LD_STRING D7d-JMM-1
18276: PPUSH
18277: CALL_OW 88
// SayRadio ( Powell , D7d-Pow-1 ) ;
18281: LD_EXP 22
18285: PPUSH
18286: LD_STRING D7d-Pow-1
18288: PPUSH
18289: CALL_OW 94
// Say ( JMM , D7d-JMM-2 ) ;
18293: LD_EXP 1
18297: PPUSH
18298: LD_STRING D7d-JMM-2
18300: PPUSH
18301: CALL_OW 88
// if askSiberite = 1 then
18305: LD_EXP 32
18309: PUSH
18310: LD_INT 1
18312: EQUAL
18313: IFFALSE 18329
// Say ( JMM , D7d-JMM-2a ) else
18315: LD_EXP 1
18319: PPUSH
18320: LD_STRING D7d-JMM-2a
18322: PPUSH
18323: CALL_OW 88
18327: GO 18341
// SayRadio ( Powell , D7d-Pow-2 ) ;
18329: LD_EXP 22
18333: PPUSH
18334: LD_STRING D7d-Pow-2
18336: PPUSH
18337: CALL_OW 94
// SayRadio ( Powell , D7d-Pow-2a ) ;
18341: LD_EXP 22
18345: PPUSH
18346: LD_STRING D7d-Pow-2a
18348: PPUSH
18349: CALL_OW 94
// end ; FinishMission ;
18353: CALL 18358 0 0
// end ;
18357: END
// export function FinishMission ; var m1 , m2 , m3 ; begin
18358: LD_INT 0
18360: PPUSH
18361: PPUSH
18362: PPUSH
18363: PPUSH
// m1 := false ;
18364: LD_ADDR_VAR 0 2
18368: PUSH
18369: LD_INT 0
18371: ST_TO_ADDR
// m2 := false ;
18372: LD_ADDR_VAR 0 3
18376: PUSH
18377: LD_INT 0
18379: ST_TO_ADDR
// m3 := false ;
18380: LD_ADDR_VAR 0 4
18384: PUSH
18385: LD_INT 0
18387: ST_TO_ADDR
// if not westPathUsed then
18388: LD_EXP 49
18392: NOT
18393: IFFALSE 18402
// SetAchievement ( ACH_PATH ) ;
18395: LD_STRING ACH_PATH
18397: PPUSH
18398: CALL_OW 543
// if not rocketBuilded then
18402: LD_EXP 51
18406: NOT
18407: IFFALSE 18423
// begin wait ( 3 ) ;
18409: LD_INT 3
18411: PPUSH
18412: CALL_OW 67
// SetAchievement ( ACH_ROCKET ) ;
18416: LD_STRING ACH_ROCKET
18418: PPUSH
18419: CALL_OW 543
// end ; if tick <= 40 40$00 then
18423: LD_OWVAR 1
18427: PUSH
18428: LD_INT 84000
18430: LESSEQUAL
18431: IFFALSE 18447
// begin wait ( 3 ) ;
18433: LD_INT 3
18435: PPUSH
18436: CALL_OW 67
// SetAchievement ( ACH_ASPEED_12 ) ;
18440: LD_STRING ACH_ASPEED_12
18442: PPUSH
18443: CALL_OW 543
// end ; if teleportExplored = 1 then
18447: LD_EXP 33
18451: PUSH
18452: LD_INT 1
18454: EQUAL
18455: IFFALSE 18477
// begin m1 := true ;
18457: LD_ADDR_VAR 0 2
18461: PUSH
18462: LD_INT 1
18464: ST_TO_ADDR
// AddMedal ( Teleport , 1 ) ;
18465: LD_STRING Teleport
18467: PPUSH
18468: LD_INT 1
18470: PPUSH
18471: CALL_OW 101
// end else
18475: GO 18488
// AddMedal ( Teleport , - 1 ) ;
18477: LD_STRING Teleport
18479: PPUSH
18480: LD_INT 1
18482: NEG
18483: PPUSH
18484: CALL_OW 101
// if sciCounter > 2 then
18488: LD_EXP 35
18492: PUSH
18493: LD_INT 2
18495: GREATER
18496: IFFALSE 18518
// begin m2 := true ;
18498: LD_ADDR_VAR 0 3
18502: PUSH
18503: LD_INT 1
18505: ST_TO_ADDR
// AddMedal ( Materials , 1 ) ;
18506: LD_STRING Materials
18508: PPUSH
18509: LD_INT 1
18511: PPUSH
18512: CALL_OW 101
// end else
18516: GO 18529
// AddMedal ( Materials , - 1 ) ;
18518: LD_STRING Materials
18520: PPUSH
18521: LD_INT 1
18523: NEG
18524: PPUSH
18525: CALL_OW 101
// if sciCounter >= 6 then
18529: LD_EXP 35
18533: PUSH
18534: LD_INT 6
18536: GREATEREQUAL
18537: IFFALSE 18569
// begin m3 := true ;
18539: LD_ADDR_VAR 0 4
18543: PUSH
18544: LD_INT 1
18546: ST_TO_ADDR
// AddMedal ( Scientists , 1 ) ;
18547: LD_STRING Scientists
18549: PPUSH
18550: LD_INT 1
18552: PPUSH
18553: CALL_OW 101
// SaveVariable ( 1 , 12_SciDed_1 ) ;
18557: LD_INT 1
18559: PPUSH
18560: LD_STRING 12_SciDed_1
18562: PPUSH
18563: CALL_OW 39
// end else
18567: GO 18590
// begin AddMedal ( Scientists , - 1 ) ;
18569: LD_STRING Scientists
18571: PPUSH
18572: LD_INT 1
18574: NEG
18575: PPUSH
18576: CALL_OW 101
// SaveVariable ( 0 , 12_SciDed_1 ) ;
18580: LD_INT 0
18582: PPUSH
18583: LD_STRING 12_SciDed_1
18585: PPUSH
18586: CALL_OW 39
// end ; SaveVariable ( fakeInfo , 12_MainDepositFake_1 ) ;
18590: LD_EXP 31
18594: PPUSH
18595: LD_STRING 12_MainDepositFake_1
18597: PPUSH
18598: CALL_OW 39
// if m1 and m2 and m3 and Difficulty = 3 then
18602: LD_VAR 0 2
18606: PUSH
18607: LD_VAR 0 3
18611: AND
18612: PUSH
18613: LD_VAR 0 4
18617: AND
18618: PUSH
18619: LD_OWVAR 67
18623: PUSH
18624: LD_INT 3
18626: EQUAL
18627: AND
18628: IFFALSE 18640
// SetAchievementEX ( ACH_AMER , 12 ) ;
18630: LD_STRING ACH_AMER
18632: PPUSH
18633: LD_INT 12
18635: PPUSH
18636: CALL_OW 564
// GiveMedals ( MAIN ) ;
18640: LD_STRING MAIN
18642: PPUSH
18643: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
18647: LD_INT 22
18649: PUSH
18650: LD_INT 1
18652: PUSH
18653: EMPTY
18654: LIST
18655: LIST
18656: PUSH
18657: LD_INT 21
18659: PUSH
18660: LD_INT 1
18662: PUSH
18663: EMPTY
18664: LIST
18665: LIST
18666: PUSH
18667: LD_INT 2
18669: PUSH
18670: LD_INT 25
18672: PUSH
18673: LD_INT 1
18675: PUSH
18676: EMPTY
18677: LIST
18678: LIST
18679: PUSH
18680: LD_INT 25
18682: PUSH
18683: LD_INT 2
18685: PUSH
18686: EMPTY
18687: LIST
18688: LIST
18689: PUSH
18690: LD_INT 25
18692: PUSH
18693: LD_INT 3
18695: PUSH
18696: EMPTY
18697: LIST
18698: LIST
18699: PUSH
18700: LD_INT 25
18702: PUSH
18703: LD_INT 4
18705: PUSH
18706: EMPTY
18707: LIST
18708: LIST
18709: PUSH
18710: LD_INT 25
18712: PUSH
18713: LD_INT 5
18715: PUSH
18716: EMPTY
18717: LIST
18718: LIST
18719: PUSH
18720: LD_INT 25
18722: PUSH
18723: LD_INT 8
18725: PUSH
18726: EMPTY
18727: LIST
18728: LIST
18729: PUSH
18730: EMPTY
18731: LIST
18732: LIST
18733: LIST
18734: LIST
18735: LIST
18736: LIST
18737: LIST
18738: PUSH
18739: EMPTY
18740: LIST
18741: LIST
18742: LIST
18743: PPUSH
18744: CALL_OW 69
18748: PPUSH
18749: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
18753: LD_EXP 1
18757: PPUSH
18758: LD_EXP 46
18762: PUSH
18763: LD_STRING JMM
18765: STR
18766: PPUSH
18767: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
18771: LD_EXP 7
18775: PPUSH
18776: LD_EXP 46
18780: PUSH
18781: LD_STRING Brown
18783: STR
18784: PPUSH
18785: CALL 12288 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
18789: LD_EXP 3
18793: PPUSH
18794: LD_EXP 46
18798: PUSH
18799: LD_STRING Donaldson
18801: STR
18802: PPUSH
18803: CALL 12288 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
18807: LD_EXP 4
18811: PPUSH
18812: LD_EXP 46
18816: PUSH
18817: LD_STRING Bobby
18819: STR
18820: PPUSH
18821: CALL 12288 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
18825: LD_EXP 5
18829: PPUSH
18830: LD_EXP 46
18834: PUSH
18835: LD_STRING Cyrus
18837: STR
18838: PPUSH
18839: CALL 12288 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
18843: LD_EXP 2
18847: PPUSH
18848: LD_EXP 46
18852: PUSH
18853: LD_STRING Lisa
18855: STR
18856: PPUSH
18857: CALL 12288 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
18861: LD_EXP 12
18865: PPUSH
18866: LD_EXP 46
18870: PUSH
18871: LD_STRING Frank
18873: STR
18874: PPUSH
18875: CALL 12288 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
18879: LD_EXP 13
18883: PPUSH
18884: LD_EXP 46
18888: PUSH
18889: LD_STRING Kikuchi
18891: STR
18892: PPUSH
18893: CALL 12288 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
18897: LD_EXP 9
18901: PPUSH
18902: LD_EXP 46
18906: PUSH
18907: LD_STRING Houten
18909: STR
18910: PPUSH
18911: CALL 12288 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
18915: LD_EXP 11
18919: PPUSH
18920: LD_EXP 46
18924: PUSH
18925: LD_STRING Gary
18927: STR
18928: PPUSH
18929: CALL 12288 0 2
// EnchancedSaveCharacters ( Cornel , mission_prefix & Cornell ) ;
18933: LD_EXP 10
18937: PPUSH
18938: LD_EXP 46
18942: PUSH
18943: LD_STRING Cornell
18945: STR
18946: PPUSH
18947: CALL 12288 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
18951: LD_EXP 6
18955: PPUSH
18956: LD_EXP 46
18960: PUSH
18961: LD_STRING Denis
18963: STR
18964: PPUSH
18965: CALL 12288 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
18969: LD_EXP 8
18973: PPUSH
18974: LD_EXP 46
18978: PUSH
18979: LD_STRING Gladstone
18981: STR
18982: PPUSH
18983: CALL 12288 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Houten , Gary , Cornel ] , 12_other_survivors ) ;
18987: LD_INT 22
18989: PUSH
18990: LD_INT 1
18992: PUSH
18993: EMPTY
18994: LIST
18995: LIST
18996: PUSH
18997: LD_INT 23
18999: PUSH
19000: LD_INT 1
19002: PUSH
19003: EMPTY
19004: LIST
19005: LIST
19006: PUSH
19007: LD_INT 21
19009: PUSH
19010: LD_INT 1
19012: PUSH
19013: EMPTY
19014: LIST
19015: LIST
19016: PUSH
19017: LD_INT 2
19019: PUSH
19020: LD_INT 25
19022: PUSH
19023: LD_INT 1
19025: PUSH
19026: EMPTY
19027: LIST
19028: LIST
19029: PUSH
19030: LD_INT 25
19032: PUSH
19033: LD_INT 2
19035: PUSH
19036: EMPTY
19037: LIST
19038: LIST
19039: PUSH
19040: LD_INT 25
19042: PUSH
19043: LD_INT 3
19045: PUSH
19046: EMPTY
19047: LIST
19048: LIST
19049: PUSH
19050: LD_INT 25
19052: PUSH
19053: LD_INT 4
19055: PUSH
19056: EMPTY
19057: LIST
19058: LIST
19059: PUSH
19060: LD_INT 25
19062: PUSH
19063: LD_INT 5
19065: PUSH
19066: EMPTY
19067: LIST
19068: LIST
19069: PUSH
19070: LD_INT 25
19072: PUSH
19073: LD_INT 8
19075: PUSH
19076: EMPTY
19077: LIST
19078: LIST
19079: PUSH
19080: EMPTY
19081: LIST
19082: LIST
19083: LIST
19084: LIST
19085: LIST
19086: LIST
19087: LIST
19088: PUSH
19089: EMPTY
19090: LIST
19091: LIST
19092: LIST
19093: LIST
19094: PPUSH
19095: CALL_OW 69
19099: PUSH
19100: LD_EXP 1
19104: PUSH
19105: LD_EXP 7
19109: PUSH
19110: LD_EXP 3
19114: PUSH
19115: LD_EXP 4
19119: PUSH
19120: LD_EXP 5
19124: PUSH
19125: LD_EXP 2
19129: PUSH
19130: LD_EXP 12
19134: PUSH
19135: LD_EXP 8
19139: PUSH
19140: LD_EXP 13
19144: PUSH
19145: LD_EXP 6
19149: PUSH
19150: LD_EXP 9
19154: PUSH
19155: LD_EXP 11
19159: PUSH
19160: LD_EXP 10
19164: PUSH
19165: EMPTY
19166: LIST
19167: LIST
19168: LIST
19169: LIST
19170: LIST
19171: LIST
19172: LIST
19173: LIST
19174: LIST
19175: LIST
19176: LIST
19177: LIST
19178: LIST
19179: DIFF
19180: PPUSH
19181: LD_STRING 12_other_survivors
19183: PPUSH
19184: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , 12_kurt_squad ) ;
19188: LD_INT 22
19190: PUSH
19191: LD_INT 1
19193: PUSH
19194: EMPTY
19195: LIST
19196: LIST
19197: PUSH
19198: LD_INT 23
19200: PUSH
19201: LD_INT 2
19203: PUSH
19204: EMPTY
19205: LIST
19206: LIST
19207: PUSH
19208: LD_INT 21
19210: PUSH
19211: LD_INT 1
19213: PUSH
19214: EMPTY
19215: LIST
19216: LIST
19217: PUSH
19218: LD_INT 2
19220: PUSH
19221: LD_INT 25
19223: PUSH
19224: LD_INT 1
19226: PUSH
19227: EMPTY
19228: LIST
19229: LIST
19230: PUSH
19231: LD_INT 25
19233: PUSH
19234: LD_INT 2
19236: PUSH
19237: EMPTY
19238: LIST
19239: LIST
19240: PUSH
19241: LD_INT 25
19243: PUSH
19244: LD_INT 3
19246: PUSH
19247: EMPTY
19248: LIST
19249: LIST
19250: PUSH
19251: LD_INT 25
19253: PUSH
19254: LD_INT 4
19256: PUSH
19257: EMPTY
19258: LIST
19259: LIST
19260: PUSH
19261: LD_INT 25
19263: PUSH
19264: LD_INT 5
19266: PUSH
19267: EMPTY
19268: LIST
19269: LIST
19270: PUSH
19271: LD_INT 25
19273: PUSH
19274: LD_INT 8
19276: PUSH
19277: EMPTY
19278: LIST
19279: LIST
19280: PUSH
19281: EMPTY
19282: LIST
19283: LIST
19284: LIST
19285: LIST
19286: LIST
19287: LIST
19288: LIST
19289: PUSH
19290: EMPTY
19291: LIST
19292: LIST
19293: LIST
19294: LIST
19295: PPUSH
19296: CALL_OW 69
19300: PPUSH
19301: LD_STRING 12_kurt_squad
19303: PPUSH
19304: CALL_OW 38
// SaveCharacters ( others11 , 12_others ) ;
19308: LD_EXP 14
19312: PPUSH
19313: LD_STRING 12_others
19315: PPUSH
19316: CALL_OW 38
// YouWin ;
19320: CALL_OW 103
// end ; end_of_file
19324: LD_VAR 0 1
19328: RET
// every 0 0$1 trigger IsDead ( JMM ) do
19329: LD_EXP 1
19333: PPUSH
19334: CALL_OW 301
19338: IFFALSE 19350
19340: GO 19342
19342: DISABLE
// YouLost ( JMM ) ; end_of_file
19343: LD_STRING JMM
19345: PPUSH
19346: CALL_OW 104
19350: END
// every 0 0$01 do
19351: GO 19353
19353: DISABLE
// begin repeat wait ( 0 0$30 ) ;
19354: LD_INT 1050
19356: PPUSH
19357: CALL_OW 67
// if cratesSpawned < 6 then
19361: LD_EXP 45
19365: PUSH
19366: LD_INT 6
19368: LESS
19369: IFFALSE 19406
// begin CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
19371: LD_INT 3
19373: PPUSH
19374: LD_INT 5
19376: PPUSH
19377: CALL_OW 12
19381: PPUSH
19382: LD_INT 21
19384: PPUSH
19385: LD_INT 1
19387: PPUSH
19388: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
19392: LD_ADDR_EXP 45
19396: PUSH
19397: LD_EXP 45
19401: PUSH
19402: LD_INT 1
19404: PLUS
19405: ST_TO_ADDR
// end ; if cratesSpawned >= 6 and cratesSpawned < 12 then
19406: LD_EXP 45
19410: PUSH
19411: LD_INT 6
19413: GREATEREQUAL
19414: PUSH
19415: LD_EXP 45
19419: PUSH
19420: LD_INT 12
19422: LESS
19423: AND
19424: IFFALSE 19468
// begin wait ( 0 0$50 ) ;
19426: LD_INT 1750
19428: PPUSH
19429: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
19433: LD_INT 3
19435: PPUSH
19436: LD_INT 5
19438: PPUSH
19439: CALL_OW 12
19443: PPUSH
19444: LD_INT 21
19446: PPUSH
19447: LD_INT 1
19449: PPUSH
19450: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
19454: LD_ADDR_EXP 45
19458: PUSH
19459: LD_EXP 45
19463: PUSH
19464: LD_INT 1
19466: PLUS
19467: ST_TO_ADDR
// end ; if cratesSpawned >= 12 then
19468: LD_EXP 45
19472: PUSH
19473: LD_INT 12
19475: GREATEREQUAL
19476: IFFALSE 19520
// begin wait ( 1 1$40 ) ;
19478: LD_INT 3500
19480: PPUSH
19481: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
19485: LD_INT 3
19487: PPUSH
19488: LD_INT 5
19490: PPUSH
19491: CALL_OW 12
19495: PPUSH
19496: LD_INT 21
19498: PPUSH
19499: LD_INT 1
19501: PPUSH
19502: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
19506: LD_ADDR_EXP 45
19510: PUSH
19511: LD_EXP 45
19515: PUSH
19516: LD_INT 1
19518: PLUS
19519: ST_TO_ADDR
// end ; until false ;
19520: LD_INT 0
19522: IFFALSE 19354
// end ; end_of_file
19524: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
19525: LD_INT 0
19527: PPUSH
// ar_miner := 81 ;
19528: LD_ADDR_EXP 59
19532: PUSH
19533: LD_INT 81
19535: ST_TO_ADDR
// ar_crane := 88 ;
19536: LD_ADDR_EXP 58
19540: PUSH
19541: LD_INT 88
19543: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
19544: LD_ADDR_EXP 53
19548: PUSH
19549: LD_INT 89
19551: ST_TO_ADDR
// us_hack := 99 ;
19552: LD_ADDR_EXP 54
19556: PUSH
19557: LD_INT 99
19559: ST_TO_ADDR
// us_artillery := 97 ;
19560: LD_ADDR_EXP 55
19564: PUSH
19565: LD_INT 97
19567: ST_TO_ADDR
// ar_bio_bomb := 91 ;
19568: LD_ADDR_EXP 56
19572: PUSH
19573: LD_INT 91
19575: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
19576: LD_ADDR_EXP 57
19580: PUSH
19581: LD_INT 92
19583: ST_TO_ADDR
// ru_radar := 98 ;
19584: LD_ADDR_EXP 52
19588: PUSH
19589: LD_INT 98
19591: ST_TO_ADDR
// tech_Artillery := 80 ;
19592: LD_ADDR_EXP 60
19596: PUSH
19597: LD_INT 80
19599: ST_TO_ADDR
// tech_RadMat := 81 ;
19600: LD_ADDR_EXP 61
19604: PUSH
19605: LD_INT 81
19607: ST_TO_ADDR
// tech_BasicTools := 82 ;
19608: LD_ADDR_EXP 62
19612: PUSH
19613: LD_INT 82
19615: ST_TO_ADDR
// tech_Cargo := 83 ;
19616: LD_ADDR_EXP 63
19620: PUSH
19621: LD_INT 83
19623: ST_TO_ADDR
// tech_Track := 84 ;
19624: LD_ADDR_EXP 64
19628: PUSH
19629: LD_INT 84
19631: ST_TO_ADDR
// tech_Crane := 85 ;
19632: LD_ADDR_EXP 65
19636: PUSH
19637: LD_INT 85
19639: ST_TO_ADDR
// tech_Bulldozer := 86 ;
19640: LD_ADDR_EXP 66
19644: PUSH
19645: LD_INT 86
19647: ST_TO_ADDR
// tech_Hovercraft := 87 ;
19648: LD_ADDR_EXP 67
19652: PUSH
19653: LD_INT 87
19655: ST_TO_ADDR
// class_mastodont := 31 ;
19656: LD_ADDR_EXP 68
19660: PUSH
19661: LD_INT 31
19663: ST_TO_ADDR
// class_horse := 21 ;
19664: LD_ADDR_EXP 69
19668: PUSH
19669: LD_INT 21
19671: ST_TO_ADDR
// end ;
19672: LD_VAR 0 1
19676: RET
// every 1 do
19677: GO 19679
19679: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
19680: CALL 19525 0 0
19684: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19685: LD_INT 0
19687: PPUSH
// if p2 = 100 then
19688: LD_VAR 0 2
19692: PUSH
19693: LD_INT 100
19695: EQUAL
19696: IFFALSE 20645
// begin if not StreamModeActive then
19698: LD_EXP 70
19702: NOT
19703: IFFALSE 19713
// StreamModeActive := true ;
19705: LD_ADDR_EXP 70
19709: PUSH
19710: LD_INT 1
19712: ST_TO_ADDR
// if p3 = 0 then
19713: LD_VAR 0 3
19717: PUSH
19718: LD_INT 0
19720: EQUAL
19721: IFFALSE 19727
// InitStreamMode ;
19723: CALL 20805 0 0
// if p3 = 1 then
19727: LD_VAR 0 3
19731: PUSH
19732: LD_INT 1
19734: EQUAL
19735: IFFALSE 19745
// sRocket := true ;
19737: LD_ADDR_EXP 75
19741: PUSH
19742: LD_INT 1
19744: ST_TO_ADDR
// if p3 = 2 then
19745: LD_VAR 0 3
19749: PUSH
19750: LD_INT 2
19752: EQUAL
19753: IFFALSE 19763
// sSpeed := true ;
19755: LD_ADDR_EXP 74
19759: PUSH
19760: LD_INT 1
19762: ST_TO_ADDR
// if p3 = 3 then
19763: LD_VAR 0 3
19767: PUSH
19768: LD_INT 3
19770: EQUAL
19771: IFFALSE 19781
// sEngine := true ;
19773: LD_ADDR_EXP 76
19777: PUSH
19778: LD_INT 1
19780: ST_TO_ADDR
// if p3 = 4 then
19781: LD_VAR 0 3
19785: PUSH
19786: LD_INT 4
19788: EQUAL
19789: IFFALSE 19799
// sSpec := true ;
19791: LD_ADDR_EXP 73
19795: PUSH
19796: LD_INT 1
19798: ST_TO_ADDR
// if p3 = 5 then
19799: LD_VAR 0 3
19803: PUSH
19804: LD_INT 5
19806: EQUAL
19807: IFFALSE 19817
// sLevel := true ;
19809: LD_ADDR_EXP 77
19813: PUSH
19814: LD_INT 1
19816: ST_TO_ADDR
// if p3 = 6 then
19817: LD_VAR 0 3
19821: PUSH
19822: LD_INT 6
19824: EQUAL
19825: IFFALSE 19835
// sArmoury := true ;
19827: LD_ADDR_EXP 78
19831: PUSH
19832: LD_INT 1
19834: ST_TO_ADDR
// if p3 = 7 then
19835: LD_VAR 0 3
19839: PUSH
19840: LD_INT 7
19842: EQUAL
19843: IFFALSE 19853
// sRadar := true ;
19845: LD_ADDR_EXP 79
19849: PUSH
19850: LD_INT 1
19852: ST_TO_ADDR
// if p3 = 8 then
19853: LD_VAR 0 3
19857: PUSH
19858: LD_INT 8
19860: EQUAL
19861: IFFALSE 19871
// sBunker := true ;
19863: LD_ADDR_EXP 80
19867: PUSH
19868: LD_INT 1
19870: ST_TO_ADDR
// if p3 = 9 then
19871: LD_VAR 0 3
19875: PUSH
19876: LD_INT 9
19878: EQUAL
19879: IFFALSE 19889
// sHack := true ;
19881: LD_ADDR_EXP 81
19885: PUSH
19886: LD_INT 1
19888: ST_TO_ADDR
// if p3 = 10 then
19889: LD_VAR 0 3
19893: PUSH
19894: LD_INT 10
19896: EQUAL
19897: IFFALSE 19907
// sFire := true ;
19899: LD_ADDR_EXP 82
19903: PUSH
19904: LD_INT 1
19906: ST_TO_ADDR
// if p3 = 11 then
19907: LD_VAR 0 3
19911: PUSH
19912: LD_INT 11
19914: EQUAL
19915: IFFALSE 19925
// sRefresh := true ;
19917: LD_ADDR_EXP 83
19921: PUSH
19922: LD_INT 1
19924: ST_TO_ADDR
// if p3 = 12 then
19925: LD_VAR 0 3
19929: PUSH
19930: LD_INT 12
19932: EQUAL
19933: IFFALSE 19943
// sExp := true ;
19935: LD_ADDR_EXP 84
19939: PUSH
19940: LD_INT 1
19942: ST_TO_ADDR
// if p3 = 13 then
19943: LD_VAR 0 3
19947: PUSH
19948: LD_INT 13
19950: EQUAL
19951: IFFALSE 19961
// sDepot := true ;
19953: LD_ADDR_EXP 85
19957: PUSH
19958: LD_INT 1
19960: ST_TO_ADDR
// if p3 = 14 then
19961: LD_VAR 0 3
19965: PUSH
19966: LD_INT 14
19968: EQUAL
19969: IFFALSE 19979
// sFlag := true ;
19971: LD_ADDR_EXP 86
19975: PUSH
19976: LD_INT 1
19978: ST_TO_ADDR
// if p3 = 15 then
19979: LD_VAR 0 3
19983: PUSH
19984: LD_INT 15
19986: EQUAL
19987: IFFALSE 19997
// sKamikadze := true ;
19989: LD_ADDR_EXP 94
19993: PUSH
19994: LD_INT 1
19996: ST_TO_ADDR
// if p3 = 16 then
19997: LD_VAR 0 3
20001: PUSH
20002: LD_INT 16
20004: EQUAL
20005: IFFALSE 20015
// sTroll := true ;
20007: LD_ADDR_EXP 95
20011: PUSH
20012: LD_INT 1
20014: ST_TO_ADDR
// if p3 = 17 then
20015: LD_VAR 0 3
20019: PUSH
20020: LD_INT 17
20022: EQUAL
20023: IFFALSE 20033
// sSlow := true ;
20025: LD_ADDR_EXP 96
20029: PUSH
20030: LD_INT 1
20032: ST_TO_ADDR
// if p3 = 18 then
20033: LD_VAR 0 3
20037: PUSH
20038: LD_INT 18
20040: EQUAL
20041: IFFALSE 20051
// sLack := true ;
20043: LD_ADDR_EXP 97
20047: PUSH
20048: LD_INT 1
20050: ST_TO_ADDR
// if p3 = 19 then
20051: LD_VAR 0 3
20055: PUSH
20056: LD_INT 19
20058: EQUAL
20059: IFFALSE 20069
// sTank := true ;
20061: LD_ADDR_EXP 99
20065: PUSH
20066: LD_INT 1
20068: ST_TO_ADDR
// if p3 = 20 then
20069: LD_VAR 0 3
20073: PUSH
20074: LD_INT 20
20076: EQUAL
20077: IFFALSE 20087
// sRemote := true ;
20079: LD_ADDR_EXP 100
20083: PUSH
20084: LD_INT 1
20086: ST_TO_ADDR
// if p3 = 21 then
20087: LD_VAR 0 3
20091: PUSH
20092: LD_INT 21
20094: EQUAL
20095: IFFALSE 20105
// sPowell := true ;
20097: LD_ADDR_EXP 101
20101: PUSH
20102: LD_INT 1
20104: ST_TO_ADDR
// if p3 = 22 then
20105: LD_VAR 0 3
20109: PUSH
20110: LD_INT 22
20112: EQUAL
20113: IFFALSE 20123
// sTeleport := true ;
20115: LD_ADDR_EXP 104
20119: PUSH
20120: LD_INT 1
20122: ST_TO_ADDR
// if p3 = 23 then
20123: LD_VAR 0 3
20127: PUSH
20128: LD_INT 23
20130: EQUAL
20131: IFFALSE 20141
// sOilTower := true ;
20133: LD_ADDR_EXP 106
20137: PUSH
20138: LD_INT 1
20140: ST_TO_ADDR
// if p3 = 24 then
20141: LD_VAR 0 3
20145: PUSH
20146: LD_INT 24
20148: EQUAL
20149: IFFALSE 20159
// sShovel := true ;
20151: LD_ADDR_EXP 107
20155: PUSH
20156: LD_INT 1
20158: ST_TO_ADDR
// if p3 = 25 then
20159: LD_VAR 0 3
20163: PUSH
20164: LD_INT 25
20166: EQUAL
20167: IFFALSE 20177
// sSheik := true ;
20169: LD_ADDR_EXP 108
20173: PUSH
20174: LD_INT 1
20176: ST_TO_ADDR
// if p3 = 26 then
20177: LD_VAR 0 3
20181: PUSH
20182: LD_INT 26
20184: EQUAL
20185: IFFALSE 20195
// sEarthquake := true ;
20187: LD_ADDR_EXP 110
20191: PUSH
20192: LD_INT 1
20194: ST_TO_ADDR
// if p3 = 27 then
20195: LD_VAR 0 3
20199: PUSH
20200: LD_INT 27
20202: EQUAL
20203: IFFALSE 20213
// sAI := true ;
20205: LD_ADDR_EXP 111
20209: PUSH
20210: LD_INT 1
20212: ST_TO_ADDR
// if p3 = 28 then
20213: LD_VAR 0 3
20217: PUSH
20218: LD_INT 28
20220: EQUAL
20221: IFFALSE 20231
// sCargo := true ;
20223: LD_ADDR_EXP 114
20227: PUSH
20228: LD_INT 1
20230: ST_TO_ADDR
// if p3 = 29 then
20231: LD_VAR 0 3
20235: PUSH
20236: LD_INT 29
20238: EQUAL
20239: IFFALSE 20249
// sDLaser := true ;
20241: LD_ADDR_EXP 115
20245: PUSH
20246: LD_INT 1
20248: ST_TO_ADDR
// if p3 = 30 then
20249: LD_VAR 0 3
20253: PUSH
20254: LD_INT 30
20256: EQUAL
20257: IFFALSE 20267
// sExchange := true ;
20259: LD_ADDR_EXP 116
20263: PUSH
20264: LD_INT 1
20266: ST_TO_ADDR
// if p3 = 31 then
20267: LD_VAR 0 3
20271: PUSH
20272: LD_INT 31
20274: EQUAL
20275: IFFALSE 20285
// sFac := true ;
20277: LD_ADDR_EXP 117
20281: PUSH
20282: LD_INT 1
20284: ST_TO_ADDR
// if p3 = 32 then
20285: LD_VAR 0 3
20289: PUSH
20290: LD_INT 32
20292: EQUAL
20293: IFFALSE 20303
// sPower := true ;
20295: LD_ADDR_EXP 118
20299: PUSH
20300: LD_INT 1
20302: ST_TO_ADDR
// if p3 = 33 then
20303: LD_VAR 0 3
20307: PUSH
20308: LD_INT 33
20310: EQUAL
20311: IFFALSE 20321
// sRandom := true ;
20313: LD_ADDR_EXP 119
20317: PUSH
20318: LD_INT 1
20320: ST_TO_ADDR
// if p3 = 34 then
20321: LD_VAR 0 3
20325: PUSH
20326: LD_INT 34
20328: EQUAL
20329: IFFALSE 20339
// sShield := true ;
20331: LD_ADDR_EXP 120
20335: PUSH
20336: LD_INT 1
20338: ST_TO_ADDR
// if p3 = 35 then
20339: LD_VAR 0 3
20343: PUSH
20344: LD_INT 35
20346: EQUAL
20347: IFFALSE 20357
// sTime := true ;
20349: LD_ADDR_EXP 121
20353: PUSH
20354: LD_INT 1
20356: ST_TO_ADDR
// if p3 = 36 then
20357: LD_VAR 0 3
20361: PUSH
20362: LD_INT 36
20364: EQUAL
20365: IFFALSE 20375
// sTools := true ;
20367: LD_ADDR_EXP 122
20371: PUSH
20372: LD_INT 1
20374: ST_TO_ADDR
// if p3 = 101 then
20375: LD_VAR 0 3
20379: PUSH
20380: LD_INT 101
20382: EQUAL
20383: IFFALSE 20393
// sSold := true ;
20385: LD_ADDR_EXP 87
20389: PUSH
20390: LD_INT 1
20392: ST_TO_ADDR
// if p3 = 102 then
20393: LD_VAR 0 3
20397: PUSH
20398: LD_INT 102
20400: EQUAL
20401: IFFALSE 20411
// sDiff := true ;
20403: LD_ADDR_EXP 88
20407: PUSH
20408: LD_INT 1
20410: ST_TO_ADDR
// if p3 = 103 then
20411: LD_VAR 0 3
20415: PUSH
20416: LD_INT 103
20418: EQUAL
20419: IFFALSE 20429
// sFog := true ;
20421: LD_ADDR_EXP 91
20425: PUSH
20426: LD_INT 1
20428: ST_TO_ADDR
// if p3 = 104 then
20429: LD_VAR 0 3
20433: PUSH
20434: LD_INT 104
20436: EQUAL
20437: IFFALSE 20447
// sReset := true ;
20439: LD_ADDR_EXP 92
20443: PUSH
20444: LD_INT 1
20446: ST_TO_ADDR
// if p3 = 105 then
20447: LD_VAR 0 3
20451: PUSH
20452: LD_INT 105
20454: EQUAL
20455: IFFALSE 20465
// sSun := true ;
20457: LD_ADDR_EXP 93
20461: PUSH
20462: LD_INT 1
20464: ST_TO_ADDR
// if p3 = 106 then
20465: LD_VAR 0 3
20469: PUSH
20470: LD_INT 106
20472: EQUAL
20473: IFFALSE 20483
// sTiger := true ;
20475: LD_ADDR_EXP 89
20479: PUSH
20480: LD_INT 1
20482: ST_TO_ADDR
// if p3 = 107 then
20483: LD_VAR 0 3
20487: PUSH
20488: LD_INT 107
20490: EQUAL
20491: IFFALSE 20501
// sBomb := true ;
20493: LD_ADDR_EXP 90
20497: PUSH
20498: LD_INT 1
20500: ST_TO_ADDR
// if p3 = 108 then
20501: LD_VAR 0 3
20505: PUSH
20506: LD_INT 108
20508: EQUAL
20509: IFFALSE 20519
// sWound := true ;
20511: LD_ADDR_EXP 98
20515: PUSH
20516: LD_INT 1
20518: ST_TO_ADDR
// if p3 = 109 then
20519: LD_VAR 0 3
20523: PUSH
20524: LD_INT 109
20526: EQUAL
20527: IFFALSE 20537
// sBetray := true ;
20529: LD_ADDR_EXP 102
20533: PUSH
20534: LD_INT 1
20536: ST_TO_ADDR
// if p3 = 110 then
20537: LD_VAR 0 3
20541: PUSH
20542: LD_INT 110
20544: EQUAL
20545: IFFALSE 20555
// sContamin := true ;
20547: LD_ADDR_EXP 103
20551: PUSH
20552: LD_INT 1
20554: ST_TO_ADDR
// if p3 = 111 then
20555: LD_VAR 0 3
20559: PUSH
20560: LD_INT 111
20562: EQUAL
20563: IFFALSE 20573
// sOil := true ;
20565: LD_ADDR_EXP 105
20569: PUSH
20570: LD_INT 1
20572: ST_TO_ADDR
// if p3 = 112 then
20573: LD_VAR 0 3
20577: PUSH
20578: LD_INT 112
20580: EQUAL
20581: IFFALSE 20591
// sStu := true ;
20583: LD_ADDR_EXP 109
20587: PUSH
20588: LD_INT 1
20590: ST_TO_ADDR
// if p3 = 113 then
20591: LD_VAR 0 3
20595: PUSH
20596: LD_INT 113
20598: EQUAL
20599: IFFALSE 20609
// sBazooka := true ;
20601: LD_ADDR_EXP 112
20605: PUSH
20606: LD_INT 1
20608: ST_TO_ADDR
// if p3 = 114 then
20609: LD_VAR 0 3
20613: PUSH
20614: LD_INT 114
20616: EQUAL
20617: IFFALSE 20627
// sMortar := true ;
20619: LD_ADDR_EXP 113
20623: PUSH
20624: LD_INT 1
20626: ST_TO_ADDR
// if p3 = 115 then
20627: LD_VAR 0 3
20631: PUSH
20632: LD_INT 115
20634: EQUAL
20635: IFFALSE 20645
// sRanger := true ;
20637: LD_ADDR_EXP 123
20641: PUSH
20642: LD_INT 1
20644: ST_TO_ADDR
// end ; if p2 = 101 then
20645: LD_VAR 0 2
20649: PUSH
20650: LD_INT 101
20652: EQUAL
20653: IFFALSE 20781
// begin case p3 of 1 :
20655: LD_VAR 0 3
20659: PUSH
20660: LD_INT 1
20662: DOUBLE
20663: EQUAL
20664: IFTRUE 20668
20666: GO 20675
20668: POP
// hHackUnlimitedResources ; 2 :
20669: CALL 31818 0 0
20673: GO 20781
20675: LD_INT 2
20677: DOUBLE
20678: EQUAL
20679: IFTRUE 20683
20681: GO 20690
20683: POP
// hHackSetLevel10 ; 3 :
20684: CALL 31951 0 0
20688: GO 20781
20690: LD_INT 3
20692: DOUBLE
20693: EQUAL
20694: IFTRUE 20698
20696: GO 20705
20698: POP
// hHackSetLevel10YourUnits ; 4 :
20699: CALL 32036 0 0
20703: GO 20781
20705: LD_INT 4
20707: DOUBLE
20708: EQUAL
20709: IFTRUE 20713
20711: GO 20720
20713: POP
// hHackInvincible ; 5 :
20714: CALL 32484 0 0
20718: GO 20781
20720: LD_INT 5
20722: DOUBLE
20723: EQUAL
20724: IFTRUE 20728
20726: GO 20735
20728: POP
// hHackInvisible ; 6 :
20729: CALL 32595 0 0
20733: GO 20781
20735: LD_INT 6
20737: DOUBLE
20738: EQUAL
20739: IFTRUE 20743
20741: GO 20750
20743: POP
// hHackChangeYourSide ; 7 :
20744: CALL 32652 0 0
20748: GO 20781
20750: LD_INT 7
20752: DOUBLE
20753: EQUAL
20754: IFTRUE 20758
20756: GO 20765
20758: POP
// hHackChangeUnitSide ; 8 :
20759: CALL 32694 0 0
20763: GO 20781
20765: LD_INT 8
20767: DOUBLE
20768: EQUAL
20769: IFTRUE 20773
20771: GO 20780
20773: POP
// hHackFog ; end ;
20774: CALL 32795 0 0
20778: GO 20781
20780: POP
// end ; end ;
20781: LD_VAR 0 7
20785: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
20786: GO 20788
20788: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
20789: LD_STRING initStreamRollete();
20791: PPUSH
20792: CALL_OW 559
// InitStreamMode ;
20796: CALL 20805 0 0
// DefineStreamItems ( ) ;
20800: CALL 21245 0 0
// end ;
20804: END
// function InitStreamMode ; begin
20805: LD_INT 0
20807: PPUSH
// streamModeActive := false ;
20808: LD_ADDR_EXP 70
20812: PUSH
20813: LD_INT 0
20815: ST_TO_ADDR
// normalCounter := 36 ;
20816: LD_ADDR_EXP 71
20820: PUSH
20821: LD_INT 36
20823: ST_TO_ADDR
// hardcoreCounter := 16 ;
20824: LD_ADDR_EXP 72
20828: PUSH
20829: LD_INT 16
20831: ST_TO_ADDR
// sRocket := false ;
20832: LD_ADDR_EXP 75
20836: PUSH
20837: LD_INT 0
20839: ST_TO_ADDR
// sSpeed := false ;
20840: LD_ADDR_EXP 74
20844: PUSH
20845: LD_INT 0
20847: ST_TO_ADDR
// sEngine := false ;
20848: LD_ADDR_EXP 76
20852: PUSH
20853: LD_INT 0
20855: ST_TO_ADDR
// sSpec := false ;
20856: LD_ADDR_EXP 73
20860: PUSH
20861: LD_INT 0
20863: ST_TO_ADDR
// sLevel := false ;
20864: LD_ADDR_EXP 77
20868: PUSH
20869: LD_INT 0
20871: ST_TO_ADDR
// sArmoury := false ;
20872: LD_ADDR_EXP 78
20876: PUSH
20877: LD_INT 0
20879: ST_TO_ADDR
// sRadar := false ;
20880: LD_ADDR_EXP 79
20884: PUSH
20885: LD_INT 0
20887: ST_TO_ADDR
// sBunker := false ;
20888: LD_ADDR_EXP 80
20892: PUSH
20893: LD_INT 0
20895: ST_TO_ADDR
// sHack := false ;
20896: LD_ADDR_EXP 81
20900: PUSH
20901: LD_INT 0
20903: ST_TO_ADDR
// sFire := false ;
20904: LD_ADDR_EXP 82
20908: PUSH
20909: LD_INT 0
20911: ST_TO_ADDR
// sRefresh := false ;
20912: LD_ADDR_EXP 83
20916: PUSH
20917: LD_INT 0
20919: ST_TO_ADDR
// sExp := false ;
20920: LD_ADDR_EXP 84
20924: PUSH
20925: LD_INT 0
20927: ST_TO_ADDR
// sDepot := false ;
20928: LD_ADDR_EXP 85
20932: PUSH
20933: LD_INT 0
20935: ST_TO_ADDR
// sFlag := false ;
20936: LD_ADDR_EXP 86
20940: PUSH
20941: LD_INT 0
20943: ST_TO_ADDR
// sKamikadze := false ;
20944: LD_ADDR_EXP 94
20948: PUSH
20949: LD_INT 0
20951: ST_TO_ADDR
// sTroll := false ;
20952: LD_ADDR_EXP 95
20956: PUSH
20957: LD_INT 0
20959: ST_TO_ADDR
// sSlow := false ;
20960: LD_ADDR_EXP 96
20964: PUSH
20965: LD_INT 0
20967: ST_TO_ADDR
// sLack := false ;
20968: LD_ADDR_EXP 97
20972: PUSH
20973: LD_INT 0
20975: ST_TO_ADDR
// sTank := false ;
20976: LD_ADDR_EXP 99
20980: PUSH
20981: LD_INT 0
20983: ST_TO_ADDR
// sRemote := false ;
20984: LD_ADDR_EXP 100
20988: PUSH
20989: LD_INT 0
20991: ST_TO_ADDR
// sPowell := false ;
20992: LD_ADDR_EXP 101
20996: PUSH
20997: LD_INT 0
20999: ST_TO_ADDR
// sTeleport := false ;
21000: LD_ADDR_EXP 104
21004: PUSH
21005: LD_INT 0
21007: ST_TO_ADDR
// sOilTower := false ;
21008: LD_ADDR_EXP 106
21012: PUSH
21013: LD_INT 0
21015: ST_TO_ADDR
// sShovel := false ;
21016: LD_ADDR_EXP 107
21020: PUSH
21021: LD_INT 0
21023: ST_TO_ADDR
// sSheik := false ;
21024: LD_ADDR_EXP 108
21028: PUSH
21029: LD_INT 0
21031: ST_TO_ADDR
// sEarthquake := false ;
21032: LD_ADDR_EXP 110
21036: PUSH
21037: LD_INT 0
21039: ST_TO_ADDR
// sAI := false ;
21040: LD_ADDR_EXP 111
21044: PUSH
21045: LD_INT 0
21047: ST_TO_ADDR
// sCargo := false ;
21048: LD_ADDR_EXP 114
21052: PUSH
21053: LD_INT 0
21055: ST_TO_ADDR
// sDLaser := false ;
21056: LD_ADDR_EXP 115
21060: PUSH
21061: LD_INT 0
21063: ST_TO_ADDR
// sExchange := false ;
21064: LD_ADDR_EXP 116
21068: PUSH
21069: LD_INT 0
21071: ST_TO_ADDR
// sFac := false ;
21072: LD_ADDR_EXP 117
21076: PUSH
21077: LD_INT 0
21079: ST_TO_ADDR
// sPower := false ;
21080: LD_ADDR_EXP 118
21084: PUSH
21085: LD_INT 0
21087: ST_TO_ADDR
// sRandom := false ;
21088: LD_ADDR_EXP 119
21092: PUSH
21093: LD_INT 0
21095: ST_TO_ADDR
// sShield := false ;
21096: LD_ADDR_EXP 120
21100: PUSH
21101: LD_INT 0
21103: ST_TO_ADDR
// sTime := false ;
21104: LD_ADDR_EXP 121
21108: PUSH
21109: LD_INT 0
21111: ST_TO_ADDR
// sTools := false ;
21112: LD_ADDR_EXP 122
21116: PUSH
21117: LD_INT 0
21119: ST_TO_ADDR
// sSold := false ;
21120: LD_ADDR_EXP 87
21124: PUSH
21125: LD_INT 0
21127: ST_TO_ADDR
// sDiff := false ;
21128: LD_ADDR_EXP 88
21132: PUSH
21133: LD_INT 0
21135: ST_TO_ADDR
// sFog := false ;
21136: LD_ADDR_EXP 91
21140: PUSH
21141: LD_INT 0
21143: ST_TO_ADDR
// sReset := false ;
21144: LD_ADDR_EXP 92
21148: PUSH
21149: LD_INT 0
21151: ST_TO_ADDR
// sSun := false ;
21152: LD_ADDR_EXP 93
21156: PUSH
21157: LD_INT 0
21159: ST_TO_ADDR
// sTiger := false ;
21160: LD_ADDR_EXP 89
21164: PUSH
21165: LD_INT 0
21167: ST_TO_ADDR
// sBomb := false ;
21168: LD_ADDR_EXP 90
21172: PUSH
21173: LD_INT 0
21175: ST_TO_ADDR
// sWound := false ;
21176: LD_ADDR_EXP 98
21180: PUSH
21181: LD_INT 0
21183: ST_TO_ADDR
// sBetray := false ;
21184: LD_ADDR_EXP 102
21188: PUSH
21189: LD_INT 0
21191: ST_TO_ADDR
// sContamin := false ;
21192: LD_ADDR_EXP 103
21196: PUSH
21197: LD_INT 0
21199: ST_TO_ADDR
// sOil := false ;
21200: LD_ADDR_EXP 105
21204: PUSH
21205: LD_INT 0
21207: ST_TO_ADDR
// sStu := false ;
21208: LD_ADDR_EXP 109
21212: PUSH
21213: LD_INT 0
21215: ST_TO_ADDR
// sBazooka := false ;
21216: LD_ADDR_EXP 112
21220: PUSH
21221: LD_INT 0
21223: ST_TO_ADDR
// sMortar := false ;
21224: LD_ADDR_EXP 113
21228: PUSH
21229: LD_INT 0
21231: ST_TO_ADDR
// sRanger := false ;
21232: LD_ADDR_EXP 123
21236: PUSH
21237: LD_INT 0
21239: ST_TO_ADDR
// end ;
21240: LD_VAR 0 1
21244: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
21245: LD_INT 0
21247: PPUSH
21248: PPUSH
21249: PPUSH
21250: PPUSH
21251: PPUSH
// result := [ ] ;
21252: LD_ADDR_VAR 0 1
21256: PUSH
21257: EMPTY
21258: ST_TO_ADDR
// if campaign_id = 1 then
21259: LD_OWVAR 69
21263: PUSH
21264: LD_INT 1
21266: EQUAL
21267: IFFALSE 24205
// begin case mission_number of 1 :
21269: LD_OWVAR 70
21273: PUSH
21274: LD_INT 1
21276: DOUBLE
21277: EQUAL
21278: IFTRUE 21282
21280: GO 21346
21282: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
21283: LD_ADDR_VAR 0 1
21287: PUSH
21288: LD_INT 2
21290: PUSH
21291: LD_INT 4
21293: PUSH
21294: LD_INT 11
21296: PUSH
21297: LD_INT 12
21299: PUSH
21300: LD_INT 15
21302: PUSH
21303: LD_INT 16
21305: PUSH
21306: LD_INT 22
21308: PUSH
21309: LD_INT 23
21311: PUSH
21312: LD_INT 26
21314: PUSH
21315: EMPTY
21316: LIST
21317: LIST
21318: LIST
21319: LIST
21320: LIST
21321: LIST
21322: LIST
21323: LIST
21324: LIST
21325: PUSH
21326: LD_INT 101
21328: PUSH
21329: LD_INT 102
21331: PUSH
21332: LD_INT 106
21334: PUSH
21335: EMPTY
21336: LIST
21337: LIST
21338: LIST
21339: PUSH
21340: EMPTY
21341: LIST
21342: LIST
21343: ST_TO_ADDR
21344: GO 24203
21346: LD_INT 2
21348: DOUBLE
21349: EQUAL
21350: IFTRUE 21354
21352: GO 21426
21354: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
21355: LD_ADDR_VAR 0 1
21359: PUSH
21360: LD_INT 2
21362: PUSH
21363: LD_INT 4
21365: PUSH
21366: LD_INT 11
21368: PUSH
21369: LD_INT 12
21371: PUSH
21372: LD_INT 15
21374: PUSH
21375: LD_INT 16
21377: PUSH
21378: LD_INT 22
21380: PUSH
21381: LD_INT 23
21383: PUSH
21384: LD_INT 26
21386: PUSH
21387: EMPTY
21388: LIST
21389: LIST
21390: LIST
21391: LIST
21392: LIST
21393: LIST
21394: LIST
21395: LIST
21396: LIST
21397: PUSH
21398: LD_INT 101
21400: PUSH
21401: LD_INT 102
21403: PUSH
21404: LD_INT 105
21406: PUSH
21407: LD_INT 106
21409: PUSH
21410: LD_INT 108
21412: PUSH
21413: EMPTY
21414: LIST
21415: LIST
21416: LIST
21417: LIST
21418: LIST
21419: PUSH
21420: EMPTY
21421: LIST
21422: LIST
21423: ST_TO_ADDR
21424: GO 24203
21426: LD_INT 3
21428: DOUBLE
21429: EQUAL
21430: IFTRUE 21434
21432: GO 21510
21434: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
21435: LD_ADDR_VAR 0 1
21439: PUSH
21440: LD_INT 2
21442: PUSH
21443: LD_INT 4
21445: PUSH
21446: LD_INT 5
21448: PUSH
21449: LD_INT 11
21451: PUSH
21452: LD_INT 12
21454: PUSH
21455: LD_INT 15
21457: PUSH
21458: LD_INT 16
21460: PUSH
21461: LD_INT 22
21463: PUSH
21464: LD_INT 26
21466: PUSH
21467: LD_INT 36
21469: PUSH
21470: EMPTY
21471: LIST
21472: LIST
21473: LIST
21474: LIST
21475: LIST
21476: LIST
21477: LIST
21478: LIST
21479: LIST
21480: LIST
21481: PUSH
21482: LD_INT 101
21484: PUSH
21485: LD_INT 102
21487: PUSH
21488: LD_INT 105
21490: PUSH
21491: LD_INT 106
21493: PUSH
21494: LD_INT 108
21496: PUSH
21497: EMPTY
21498: LIST
21499: LIST
21500: LIST
21501: LIST
21502: LIST
21503: PUSH
21504: EMPTY
21505: LIST
21506: LIST
21507: ST_TO_ADDR
21508: GO 24203
21510: LD_INT 4
21512: DOUBLE
21513: EQUAL
21514: IFTRUE 21518
21516: GO 21602
21518: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
21519: LD_ADDR_VAR 0 1
21523: PUSH
21524: LD_INT 2
21526: PUSH
21527: LD_INT 4
21529: PUSH
21530: LD_INT 5
21532: PUSH
21533: LD_INT 8
21535: PUSH
21536: LD_INT 11
21538: PUSH
21539: LD_INT 12
21541: PUSH
21542: LD_INT 15
21544: PUSH
21545: LD_INT 16
21547: PUSH
21548: LD_INT 22
21550: PUSH
21551: LD_INT 23
21553: PUSH
21554: LD_INT 26
21556: PUSH
21557: LD_INT 36
21559: PUSH
21560: EMPTY
21561: LIST
21562: LIST
21563: LIST
21564: LIST
21565: LIST
21566: LIST
21567: LIST
21568: LIST
21569: LIST
21570: LIST
21571: LIST
21572: LIST
21573: PUSH
21574: LD_INT 101
21576: PUSH
21577: LD_INT 102
21579: PUSH
21580: LD_INT 105
21582: PUSH
21583: LD_INT 106
21585: PUSH
21586: LD_INT 108
21588: PUSH
21589: EMPTY
21590: LIST
21591: LIST
21592: LIST
21593: LIST
21594: LIST
21595: PUSH
21596: EMPTY
21597: LIST
21598: LIST
21599: ST_TO_ADDR
21600: GO 24203
21602: LD_INT 5
21604: DOUBLE
21605: EQUAL
21606: IFTRUE 21610
21608: GO 21710
21610: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
21611: LD_ADDR_VAR 0 1
21615: PUSH
21616: LD_INT 2
21618: PUSH
21619: LD_INT 4
21621: PUSH
21622: LD_INT 5
21624: PUSH
21625: LD_INT 6
21627: PUSH
21628: LD_INT 8
21630: PUSH
21631: LD_INT 11
21633: PUSH
21634: LD_INT 12
21636: PUSH
21637: LD_INT 15
21639: PUSH
21640: LD_INT 16
21642: PUSH
21643: LD_INT 22
21645: PUSH
21646: LD_INT 23
21648: PUSH
21649: LD_INT 25
21651: PUSH
21652: LD_INT 26
21654: PUSH
21655: LD_INT 36
21657: PUSH
21658: EMPTY
21659: LIST
21660: LIST
21661: LIST
21662: LIST
21663: LIST
21664: LIST
21665: LIST
21666: LIST
21667: LIST
21668: LIST
21669: LIST
21670: LIST
21671: LIST
21672: LIST
21673: PUSH
21674: LD_INT 101
21676: PUSH
21677: LD_INT 102
21679: PUSH
21680: LD_INT 105
21682: PUSH
21683: LD_INT 106
21685: PUSH
21686: LD_INT 108
21688: PUSH
21689: LD_INT 109
21691: PUSH
21692: LD_INT 112
21694: PUSH
21695: EMPTY
21696: LIST
21697: LIST
21698: LIST
21699: LIST
21700: LIST
21701: LIST
21702: LIST
21703: PUSH
21704: EMPTY
21705: LIST
21706: LIST
21707: ST_TO_ADDR
21708: GO 24203
21710: LD_INT 6
21712: DOUBLE
21713: EQUAL
21714: IFTRUE 21718
21716: GO 21838
21718: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
21719: LD_ADDR_VAR 0 1
21723: PUSH
21724: LD_INT 2
21726: PUSH
21727: LD_INT 4
21729: PUSH
21730: LD_INT 5
21732: PUSH
21733: LD_INT 6
21735: PUSH
21736: LD_INT 8
21738: PUSH
21739: LD_INT 11
21741: PUSH
21742: LD_INT 12
21744: PUSH
21745: LD_INT 15
21747: PUSH
21748: LD_INT 16
21750: PUSH
21751: LD_INT 20
21753: PUSH
21754: LD_INT 21
21756: PUSH
21757: LD_INT 22
21759: PUSH
21760: LD_INT 23
21762: PUSH
21763: LD_INT 25
21765: PUSH
21766: LD_INT 26
21768: PUSH
21769: LD_INT 30
21771: PUSH
21772: LD_INT 31
21774: PUSH
21775: LD_INT 32
21777: PUSH
21778: LD_INT 36
21780: PUSH
21781: EMPTY
21782: LIST
21783: LIST
21784: LIST
21785: LIST
21786: LIST
21787: LIST
21788: LIST
21789: LIST
21790: LIST
21791: LIST
21792: LIST
21793: LIST
21794: LIST
21795: LIST
21796: LIST
21797: LIST
21798: LIST
21799: LIST
21800: LIST
21801: PUSH
21802: LD_INT 101
21804: PUSH
21805: LD_INT 102
21807: PUSH
21808: LD_INT 105
21810: PUSH
21811: LD_INT 106
21813: PUSH
21814: LD_INT 108
21816: PUSH
21817: LD_INT 109
21819: PUSH
21820: LD_INT 112
21822: PUSH
21823: EMPTY
21824: LIST
21825: LIST
21826: LIST
21827: LIST
21828: LIST
21829: LIST
21830: LIST
21831: PUSH
21832: EMPTY
21833: LIST
21834: LIST
21835: ST_TO_ADDR
21836: GO 24203
21838: LD_INT 7
21840: DOUBLE
21841: EQUAL
21842: IFTRUE 21846
21844: GO 21946
21846: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
21847: LD_ADDR_VAR 0 1
21851: PUSH
21852: LD_INT 2
21854: PUSH
21855: LD_INT 4
21857: PUSH
21858: LD_INT 5
21860: PUSH
21861: LD_INT 7
21863: PUSH
21864: LD_INT 11
21866: PUSH
21867: LD_INT 12
21869: PUSH
21870: LD_INT 15
21872: PUSH
21873: LD_INT 16
21875: PUSH
21876: LD_INT 20
21878: PUSH
21879: LD_INT 21
21881: PUSH
21882: LD_INT 22
21884: PUSH
21885: LD_INT 23
21887: PUSH
21888: LD_INT 25
21890: PUSH
21891: LD_INT 26
21893: PUSH
21894: EMPTY
21895: LIST
21896: LIST
21897: LIST
21898: LIST
21899: LIST
21900: LIST
21901: LIST
21902: LIST
21903: LIST
21904: LIST
21905: LIST
21906: LIST
21907: LIST
21908: LIST
21909: PUSH
21910: LD_INT 101
21912: PUSH
21913: LD_INT 102
21915: PUSH
21916: LD_INT 103
21918: PUSH
21919: LD_INT 105
21921: PUSH
21922: LD_INT 106
21924: PUSH
21925: LD_INT 108
21927: PUSH
21928: LD_INT 112
21930: PUSH
21931: EMPTY
21932: LIST
21933: LIST
21934: LIST
21935: LIST
21936: LIST
21937: LIST
21938: LIST
21939: PUSH
21940: EMPTY
21941: LIST
21942: LIST
21943: ST_TO_ADDR
21944: GO 24203
21946: LD_INT 8
21948: DOUBLE
21949: EQUAL
21950: IFTRUE 21954
21952: GO 22082
21954: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
21955: LD_ADDR_VAR 0 1
21959: PUSH
21960: LD_INT 2
21962: PUSH
21963: LD_INT 4
21965: PUSH
21966: LD_INT 5
21968: PUSH
21969: LD_INT 6
21971: PUSH
21972: LD_INT 7
21974: PUSH
21975: LD_INT 8
21977: PUSH
21978: LD_INT 11
21980: PUSH
21981: LD_INT 12
21983: PUSH
21984: LD_INT 15
21986: PUSH
21987: LD_INT 16
21989: PUSH
21990: LD_INT 20
21992: PUSH
21993: LD_INT 21
21995: PUSH
21996: LD_INT 22
21998: PUSH
21999: LD_INT 23
22001: PUSH
22002: LD_INT 25
22004: PUSH
22005: LD_INT 26
22007: PUSH
22008: LD_INT 30
22010: PUSH
22011: LD_INT 31
22013: PUSH
22014: LD_INT 32
22016: PUSH
22017: LD_INT 36
22019: PUSH
22020: EMPTY
22021: LIST
22022: LIST
22023: LIST
22024: LIST
22025: LIST
22026: LIST
22027: LIST
22028: LIST
22029: LIST
22030: LIST
22031: LIST
22032: LIST
22033: LIST
22034: LIST
22035: LIST
22036: LIST
22037: LIST
22038: LIST
22039: LIST
22040: LIST
22041: PUSH
22042: LD_INT 101
22044: PUSH
22045: LD_INT 102
22047: PUSH
22048: LD_INT 103
22050: PUSH
22051: LD_INT 105
22053: PUSH
22054: LD_INT 106
22056: PUSH
22057: LD_INT 108
22059: PUSH
22060: LD_INT 109
22062: PUSH
22063: LD_INT 112
22065: PUSH
22066: EMPTY
22067: LIST
22068: LIST
22069: LIST
22070: LIST
22071: LIST
22072: LIST
22073: LIST
22074: LIST
22075: PUSH
22076: EMPTY
22077: LIST
22078: LIST
22079: ST_TO_ADDR
22080: GO 24203
22082: LD_INT 9
22084: DOUBLE
22085: EQUAL
22086: IFTRUE 22090
22088: GO 22226
22090: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
22091: LD_ADDR_VAR 0 1
22095: PUSH
22096: LD_INT 2
22098: PUSH
22099: LD_INT 4
22101: PUSH
22102: LD_INT 5
22104: PUSH
22105: LD_INT 6
22107: PUSH
22108: LD_INT 7
22110: PUSH
22111: LD_INT 8
22113: PUSH
22114: LD_INT 11
22116: PUSH
22117: LD_INT 12
22119: PUSH
22120: LD_INT 15
22122: PUSH
22123: LD_INT 16
22125: PUSH
22126: LD_INT 20
22128: PUSH
22129: LD_INT 21
22131: PUSH
22132: LD_INT 22
22134: PUSH
22135: LD_INT 23
22137: PUSH
22138: LD_INT 25
22140: PUSH
22141: LD_INT 26
22143: PUSH
22144: LD_INT 28
22146: PUSH
22147: LD_INT 30
22149: PUSH
22150: LD_INT 31
22152: PUSH
22153: LD_INT 32
22155: PUSH
22156: LD_INT 36
22158: PUSH
22159: EMPTY
22160: LIST
22161: LIST
22162: LIST
22163: LIST
22164: LIST
22165: LIST
22166: LIST
22167: LIST
22168: LIST
22169: LIST
22170: LIST
22171: LIST
22172: LIST
22173: LIST
22174: LIST
22175: LIST
22176: LIST
22177: LIST
22178: LIST
22179: LIST
22180: LIST
22181: PUSH
22182: LD_INT 101
22184: PUSH
22185: LD_INT 102
22187: PUSH
22188: LD_INT 103
22190: PUSH
22191: LD_INT 105
22193: PUSH
22194: LD_INT 106
22196: PUSH
22197: LD_INT 108
22199: PUSH
22200: LD_INT 109
22202: PUSH
22203: LD_INT 112
22205: PUSH
22206: LD_INT 114
22208: PUSH
22209: EMPTY
22210: LIST
22211: LIST
22212: LIST
22213: LIST
22214: LIST
22215: LIST
22216: LIST
22217: LIST
22218: LIST
22219: PUSH
22220: EMPTY
22221: LIST
22222: LIST
22223: ST_TO_ADDR
22224: GO 24203
22226: LD_INT 10
22228: DOUBLE
22229: EQUAL
22230: IFTRUE 22234
22232: GO 22418
22234: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
22235: LD_ADDR_VAR 0 1
22239: PUSH
22240: LD_INT 2
22242: PUSH
22243: LD_INT 4
22245: PUSH
22246: LD_INT 5
22248: PUSH
22249: LD_INT 6
22251: PUSH
22252: LD_INT 7
22254: PUSH
22255: LD_INT 8
22257: PUSH
22258: LD_INT 9
22260: PUSH
22261: LD_INT 10
22263: PUSH
22264: LD_INT 11
22266: PUSH
22267: LD_INT 12
22269: PUSH
22270: LD_INT 13
22272: PUSH
22273: LD_INT 14
22275: PUSH
22276: LD_INT 15
22278: PUSH
22279: LD_INT 16
22281: PUSH
22282: LD_INT 17
22284: PUSH
22285: LD_INT 18
22287: PUSH
22288: LD_INT 19
22290: PUSH
22291: LD_INT 20
22293: PUSH
22294: LD_INT 21
22296: PUSH
22297: LD_INT 22
22299: PUSH
22300: LD_INT 23
22302: PUSH
22303: LD_INT 24
22305: PUSH
22306: LD_INT 25
22308: PUSH
22309: LD_INT 26
22311: PUSH
22312: LD_INT 28
22314: PUSH
22315: LD_INT 30
22317: PUSH
22318: LD_INT 31
22320: PUSH
22321: LD_INT 32
22323: PUSH
22324: LD_INT 36
22326: PUSH
22327: EMPTY
22328: LIST
22329: LIST
22330: LIST
22331: LIST
22332: LIST
22333: LIST
22334: LIST
22335: LIST
22336: LIST
22337: LIST
22338: LIST
22339: LIST
22340: LIST
22341: LIST
22342: LIST
22343: LIST
22344: LIST
22345: LIST
22346: LIST
22347: LIST
22348: LIST
22349: LIST
22350: LIST
22351: LIST
22352: LIST
22353: LIST
22354: LIST
22355: LIST
22356: LIST
22357: PUSH
22358: LD_INT 101
22360: PUSH
22361: LD_INT 102
22363: PUSH
22364: LD_INT 103
22366: PUSH
22367: LD_INT 104
22369: PUSH
22370: LD_INT 105
22372: PUSH
22373: LD_INT 106
22375: PUSH
22376: LD_INT 107
22378: PUSH
22379: LD_INT 108
22381: PUSH
22382: LD_INT 109
22384: PUSH
22385: LD_INT 110
22387: PUSH
22388: LD_INT 111
22390: PUSH
22391: LD_INT 112
22393: PUSH
22394: LD_INT 114
22396: PUSH
22397: EMPTY
22398: LIST
22399: LIST
22400: LIST
22401: LIST
22402: LIST
22403: LIST
22404: LIST
22405: LIST
22406: LIST
22407: LIST
22408: LIST
22409: LIST
22410: LIST
22411: PUSH
22412: EMPTY
22413: LIST
22414: LIST
22415: ST_TO_ADDR
22416: GO 24203
22418: LD_INT 11
22420: DOUBLE
22421: EQUAL
22422: IFTRUE 22426
22424: GO 22618
22426: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
22427: LD_ADDR_VAR 0 1
22431: PUSH
22432: LD_INT 2
22434: PUSH
22435: LD_INT 3
22437: PUSH
22438: LD_INT 4
22440: PUSH
22441: LD_INT 5
22443: PUSH
22444: LD_INT 6
22446: PUSH
22447: LD_INT 7
22449: PUSH
22450: LD_INT 8
22452: PUSH
22453: LD_INT 9
22455: PUSH
22456: LD_INT 10
22458: PUSH
22459: LD_INT 11
22461: PUSH
22462: LD_INT 12
22464: PUSH
22465: LD_INT 13
22467: PUSH
22468: LD_INT 14
22470: PUSH
22471: LD_INT 15
22473: PUSH
22474: LD_INT 16
22476: PUSH
22477: LD_INT 17
22479: PUSH
22480: LD_INT 18
22482: PUSH
22483: LD_INT 19
22485: PUSH
22486: LD_INT 20
22488: PUSH
22489: LD_INT 21
22491: PUSH
22492: LD_INT 22
22494: PUSH
22495: LD_INT 23
22497: PUSH
22498: LD_INT 24
22500: PUSH
22501: LD_INT 25
22503: PUSH
22504: LD_INT 26
22506: PUSH
22507: LD_INT 28
22509: PUSH
22510: LD_INT 30
22512: PUSH
22513: LD_INT 31
22515: PUSH
22516: LD_INT 32
22518: PUSH
22519: LD_INT 34
22521: PUSH
22522: LD_INT 36
22524: PUSH
22525: EMPTY
22526: LIST
22527: LIST
22528: LIST
22529: LIST
22530: LIST
22531: LIST
22532: LIST
22533: LIST
22534: LIST
22535: LIST
22536: LIST
22537: LIST
22538: LIST
22539: LIST
22540: LIST
22541: LIST
22542: LIST
22543: LIST
22544: LIST
22545: LIST
22546: LIST
22547: LIST
22548: LIST
22549: LIST
22550: LIST
22551: LIST
22552: LIST
22553: LIST
22554: LIST
22555: LIST
22556: LIST
22557: PUSH
22558: LD_INT 101
22560: PUSH
22561: LD_INT 102
22563: PUSH
22564: LD_INT 103
22566: PUSH
22567: LD_INT 104
22569: PUSH
22570: LD_INT 105
22572: PUSH
22573: LD_INT 106
22575: PUSH
22576: LD_INT 107
22578: PUSH
22579: LD_INT 108
22581: PUSH
22582: LD_INT 109
22584: PUSH
22585: LD_INT 110
22587: PUSH
22588: LD_INT 111
22590: PUSH
22591: LD_INT 112
22593: PUSH
22594: LD_INT 114
22596: PUSH
22597: EMPTY
22598: LIST
22599: LIST
22600: LIST
22601: LIST
22602: LIST
22603: LIST
22604: LIST
22605: LIST
22606: LIST
22607: LIST
22608: LIST
22609: LIST
22610: LIST
22611: PUSH
22612: EMPTY
22613: LIST
22614: LIST
22615: ST_TO_ADDR
22616: GO 24203
22618: LD_INT 12
22620: DOUBLE
22621: EQUAL
22622: IFTRUE 22626
22624: GO 22834
22626: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
22627: LD_ADDR_VAR 0 1
22631: PUSH
22632: LD_INT 1
22634: PUSH
22635: LD_INT 2
22637: PUSH
22638: LD_INT 3
22640: PUSH
22641: LD_INT 4
22643: PUSH
22644: LD_INT 5
22646: PUSH
22647: LD_INT 6
22649: PUSH
22650: LD_INT 7
22652: PUSH
22653: LD_INT 8
22655: PUSH
22656: LD_INT 9
22658: PUSH
22659: LD_INT 10
22661: PUSH
22662: LD_INT 11
22664: PUSH
22665: LD_INT 12
22667: PUSH
22668: LD_INT 13
22670: PUSH
22671: LD_INT 14
22673: PUSH
22674: LD_INT 15
22676: PUSH
22677: LD_INT 16
22679: PUSH
22680: LD_INT 17
22682: PUSH
22683: LD_INT 18
22685: PUSH
22686: LD_INT 19
22688: PUSH
22689: LD_INT 20
22691: PUSH
22692: LD_INT 21
22694: PUSH
22695: LD_INT 22
22697: PUSH
22698: LD_INT 23
22700: PUSH
22701: LD_INT 24
22703: PUSH
22704: LD_INT 25
22706: PUSH
22707: LD_INT 26
22709: PUSH
22710: LD_INT 27
22712: PUSH
22713: LD_INT 28
22715: PUSH
22716: LD_INT 30
22718: PUSH
22719: LD_INT 31
22721: PUSH
22722: LD_INT 32
22724: PUSH
22725: LD_INT 33
22727: PUSH
22728: LD_INT 34
22730: PUSH
22731: LD_INT 36
22733: PUSH
22734: EMPTY
22735: LIST
22736: LIST
22737: LIST
22738: LIST
22739: LIST
22740: LIST
22741: LIST
22742: LIST
22743: LIST
22744: LIST
22745: LIST
22746: LIST
22747: LIST
22748: LIST
22749: LIST
22750: LIST
22751: LIST
22752: LIST
22753: LIST
22754: LIST
22755: LIST
22756: LIST
22757: LIST
22758: LIST
22759: LIST
22760: LIST
22761: LIST
22762: LIST
22763: LIST
22764: LIST
22765: LIST
22766: LIST
22767: LIST
22768: LIST
22769: PUSH
22770: LD_INT 101
22772: PUSH
22773: LD_INT 102
22775: PUSH
22776: LD_INT 103
22778: PUSH
22779: LD_INT 104
22781: PUSH
22782: LD_INT 105
22784: PUSH
22785: LD_INT 106
22787: PUSH
22788: LD_INT 107
22790: PUSH
22791: LD_INT 108
22793: PUSH
22794: LD_INT 109
22796: PUSH
22797: LD_INT 110
22799: PUSH
22800: LD_INT 111
22802: PUSH
22803: LD_INT 112
22805: PUSH
22806: LD_INT 113
22808: PUSH
22809: LD_INT 114
22811: PUSH
22812: EMPTY
22813: LIST
22814: LIST
22815: LIST
22816: LIST
22817: LIST
22818: LIST
22819: LIST
22820: LIST
22821: LIST
22822: LIST
22823: LIST
22824: LIST
22825: LIST
22826: LIST
22827: PUSH
22828: EMPTY
22829: LIST
22830: LIST
22831: ST_TO_ADDR
22832: GO 24203
22834: LD_INT 13
22836: DOUBLE
22837: EQUAL
22838: IFTRUE 22842
22840: GO 23038
22842: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
22843: LD_ADDR_VAR 0 1
22847: PUSH
22848: LD_INT 1
22850: PUSH
22851: LD_INT 2
22853: PUSH
22854: LD_INT 3
22856: PUSH
22857: LD_INT 4
22859: PUSH
22860: LD_INT 5
22862: PUSH
22863: LD_INT 8
22865: PUSH
22866: LD_INT 9
22868: PUSH
22869: LD_INT 10
22871: PUSH
22872: LD_INT 11
22874: PUSH
22875: LD_INT 12
22877: PUSH
22878: LD_INT 14
22880: PUSH
22881: LD_INT 15
22883: PUSH
22884: LD_INT 16
22886: PUSH
22887: LD_INT 17
22889: PUSH
22890: LD_INT 18
22892: PUSH
22893: LD_INT 19
22895: PUSH
22896: LD_INT 20
22898: PUSH
22899: LD_INT 21
22901: PUSH
22902: LD_INT 22
22904: PUSH
22905: LD_INT 23
22907: PUSH
22908: LD_INT 24
22910: PUSH
22911: LD_INT 25
22913: PUSH
22914: LD_INT 26
22916: PUSH
22917: LD_INT 27
22919: PUSH
22920: LD_INT 28
22922: PUSH
22923: LD_INT 30
22925: PUSH
22926: LD_INT 31
22928: PUSH
22929: LD_INT 32
22931: PUSH
22932: LD_INT 33
22934: PUSH
22935: LD_INT 34
22937: PUSH
22938: LD_INT 36
22940: PUSH
22941: EMPTY
22942: LIST
22943: LIST
22944: LIST
22945: LIST
22946: LIST
22947: LIST
22948: LIST
22949: LIST
22950: LIST
22951: LIST
22952: LIST
22953: LIST
22954: LIST
22955: LIST
22956: LIST
22957: LIST
22958: LIST
22959: LIST
22960: LIST
22961: LIST
22962: LIST
22963: LIST
22964: LIST
22965: LIST
22966: LIST
22967: LIST
22968: LIST
22969: LIST
22970: LIST
22971: LIST
22972: LIST
22973: PUSH
22974: LD_INT 101
22976: PUSH
22977: LD_INT 102
22979: PUSH
22980: LD_INT 103
22982: PUSH
22983: LD_INT 104
22985: PUSH
22986: LD_INT 105
22988: PUSH
22989: LD_INT 106
22991: PUSH
22992: LD_INT 107
22994: PUSH
22995: LD_INT 108
22997: PUSH
22998: LD_INT 109
23000: PUSH
23001: LD_INT 110
23003: PUSH
23004: LD_INT 111
23006: PUSH
23007: LD_INT 112
23009: PUSH
23010: LD_INT 113
23012: PUSH
23013: LD_INT 114
23015: PUSH
23016: EMPTY
23017: LIST
23018: LIST
23019: LIST
23020: LIST
23021: LIST
23022: LIST
23023: LIST
23024: LIST
23025: LIST
23026: LIST
23027: LIST
23028: LIST
23029: LIST
23030: LIST
23031: PUSH
23032: EMPTY
23033: LIST
23034: LIST
23035: ST_TO_ADDR
23036: GO 24203
23038: LD_INT 14
23040: DOUBLE
23041: EQUAL
23042: IFTRUE 23046
23044: GO 23258
23046: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
23047: LD_ADDR_VAR 0 1
23051: PUSH
23052: LD_INT 1
23054: PUSH
23055: LD_INT 2
23057: PUSH
23058: LD_INT 3
23060: PUSH
23061: LD_INT 4
23063: PUSH
23064: LD_INT 5
23066: PUSH
23067: LD_INT 6
23069: PUSH
23070: LD_INT 7
23072: PUSH
23073: LD_INT 8
23075: PUSH
23076: LD_INT 9
23078: PUSH
23079: LD_INT 10
23081: PUSH
23082: LD_INT 11
23084: PUSH
23085: LD_INT 12
23087: PUSH
23088: LD_INT 13
23090: PUSH
23091: LD_INT 14
23093: PUSH
23094: LD_INT 15
23096: PUSH
23097: LD_INT 16
23099: PUSH
23100: LD_INT 17
23102: PUSH
23103: LD_INT 18
23105: PUSH
23106: LD_INT 19
23108: PUSH
23109: LD_INT 20
23111: PUSH
23112: LD_INT 21
23114: PUSH
23115: LD_INT 22
23117: PUSH
23118: LD_INT 23
23120: PUSH
23121: LD_INT 24
23123: PUSH
23124: LD_INT 25
23126: PUSH
23127: LD_INT 26
23129: PUSH
23130: LD_INT 27
23132: PUSH
23133: LD_INT 28
23135: PUSH
23136: LD_INT 29
23138: PUSH
23139: LD_INT 30
23141: PUSH
23142: LD_INT 31
23144: PUSH
23145: LD_INT 32
23147: PUSH
23148: LD_INT 33
23150: PUSH
23151: LD_INT 34
23153: PUSH
23154: LD_INT 36
23156: PUSH
23157: EMPTY
23158: LIST
23159: LIST
23160: LIST
23161: LIST
23162: LIST
23163: LIST
23164: LIST
23165: LIST
23166: LIST
23167: LIST
23168: LIST
23169: LIST
23170: LIST
23171: LIST
23172: LIST
23173: LIST
23174: LIST
23175: LIST
23176: LIST
23177: LIST
23178: LIST
23179: LIST
23180: LIST
23181: LIST
23182: LIST
23183: LIST
23184: LIST
23185: LIST
23186: LIST
23187: LIST
23188: LIST
23189: LIST
23190: LIST
23191: LIST
23192: LIST
23193: PUSH
23194: LD_INT 101
23196: PUSH
23197: LD_INT 102
23199: PUSH
23200: LD_INT 103
23202: PUSH
23203: LD_INT 104
23205: PUSH
23206: LD_INT 105
23208: PUSH
23209: LD_INT 106
23211: PUSH
23212: LD_INT 107
23214: PUSH
23215: LD_INT 108
23217: PUSH
23218: LD_INT 109
23220: PUSH
23221: LD_INT 110
23223: PUSH
23224: LD_INT 111
23226: PUSH
23227: LD_INT 112
23229: PUSH
23230: LD_INT 113
23232: PUSH
23233: LD_INT 114
23235: PUSH
23236: EMPTY
23237: LIST
23238: LIST
23239: LIST
23240: LIST
23241: LIST
23242: LIST
23243: LIST
23244: LIST
23245: LIST
23246: LIST
23247: LIST
23248: LIST
23249: LIST
23250: LIST
23251: PUSH
23252: EMPTY
23253: LIST
23254: LIST
23255: ST_TO_ADDR
23256: GO 24203
23258: LD_INT 15
23260: DOUBLE
23261: EQUAL
23262: IFTRUE 23266
23264: GO 23478
23266: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
23267: LD_ADDR_VAR 0 1
23271: PUSH
23272: LD_INT 1
23274: PUSH
23275: LD_INT 2
23277: PUSH
23278: LD_INT 3
23280: PUSH
23281: LD_INT 4
23283: PUSH
23284: LD_INT 5
23286: PUSH
23287: LD_INT 6
23289: PUSH
23290: LD_INT 7
23292: PUSH
23293: LD_INT 8
23295: PUSH
23296: LD_INT 9
23298: PUSH
23299: LD_INT 10
23301: PUSH
23302: LD_INT 11
23304: PUSH
23305: LD_INT 12
23307: PUSH
23308: LD_INT 13
23310: PUSH
23311: LD_INT 14
23313: PUSH
23314: LD_INT 15
23316: PUSH
23317: LD_INT 16
23319: PUSH
23320: LD_INT 17
23322: PUSH
23323: LD_INT 18
23325: PUSH
23326: LD_INT 19
23328: PUSH
23329: LD_INT 20
23331: PUSH
23332: LD_INT 21
23334: PUSH
23335: LD_INT 22
23337: PUSH
23338: LD_INT 23
23340: PUSH
23341: LD_INT 24
23343: PUSH
23344: LD_INT 25
23346: PUSH
23347: LD_INT 26
23349: PUSH
23350: LD_INT 27
23352: PUSH
23353: LD_INT 28
23355: PUSH
23356: LD_INT 29
23358: PUSH
23359: LD_INT 30
23361: PUSH
23362: LD_INT 31
23364: PUSH
23365: LD_INT 32
23367: PUSH
23368: LD_INT 33
23370: PUSH
23371: LD_INT 34
23373: PUSH
23374: LD_INT 36
23376: PUSH
23377: EMPTY
23378: LIST
23379: LIST
23380: LIST
23381: LIST
23382: LIST
23383: LIST
23384: LIST
23385: LIST
23386: LIST
23387: LIST
23388: LIST
23389: LIST
23390: LIST
23391: LIST
23392: LIST
23393: LIST
23394: LIST
23395: LIST
23396: LIST
23397: LIST
23398: LIST
23399: LIST
23400: LIST
23401: LIST
23402: LIST
23403: LIST
23404: LIST
23405: LIST
23406: LIST
23407: LIST
23408: LIST
23409: LIST
23410: LIST
23411: LIST
23412: LIST
23413: PUSH
23414: LD_INT 101
23416: PUSH
23417: LD_INT 102
23419: PUSH
23420: LD_INT 103
23422: PUSH
23423: LD_INT 104
23425: PUSH
23426: LD_INT 105
23428: PUSH
23429: LD_INT 106
23431: PUSH
23432: LD_INT 107
23434: PUSH
23435: LD_INT 108
23437: PUSH
23438: LD_INT 109
23440: PUSH
23441: LD_INT 110
23443: PUSH
23444: LD_INT 111
23446: PUSH
23447: LD_INT 112
23449: PUSH
23450: LD_INT 113
23452: PUSH
23453: LD_INT 114
23455: PUSH
23456: EMPTY
23457: LIST
23458: LIST
23459: LIST
23460: LIST
23461: LIST
23462: LIST
23463: LIST
23464: LIST
23465: LIST
23466: LIST
23467: LIST
23468: LIST
23469: LIST
23470: LIST
23471: PUSH
23472: EMPTY
23473: LIST
23474: LIST
23475: ST_TO_ADDR
23476: GO 24203
23478: LD_INT 16
23480: DOUBLE
23481: EQUAL
23482: IFTRUE 23486
23484: GO 23610
23486: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
23487: LD_ADDR_VAR 0 1
23491: PUSH
23492: LD_INT 2
23494: PUSH
23495: LD_INT 4
23497: PUSH
23498: LD_INT 5
23500: PUSH
23501: LD_INT 7
23503: PUSH
23504: LD_INT 11
23506: PUSH
23507: LD_INT 12
23509: PUSH
23510: LD_INT 15
23512: PUSH
23513: LD_INT 16
23515: PUSH
23516: LD_INT 20
23518: PUSH
23519: LD_INT 21
23521: PUSH
23522: LD_INT 22
23524: PUSH
23525: LD_INT 23
23527: PUSH
23528: LD_INT 25
23530: PUSH
23531: LD_INT 26
23533: PUSH
23534: LD_INT 30
23536: PUSH
23537: LD_INT 31
23539: PUSH
23540: LD_INT 32
23542: PUSH
23543: LD_INT 33
23545: PUSH
23546: LD_INT 34
23548: PUSH
23549: EMPTY
23550: LIST
23551: LIST
23552: LIST
23553: LIST
23554: LIST
23555: LIST
23556: LIST
23557: LIST
23558: LIST
23559: LIST
23560: LIST
23561: LIST
23562: LIST
23563: LIST
23564: LIST
23565: LIST
23566: LIST
23567: LIST
23568: LIST
23569: PUSH
23570: LD_INT 101
23572: PUSH
23573: LD_INT 102
23575: PUSH
23576: LD_INT 103
23578: PUSH
23579: LD_INT 106
23581: PUSH
23582: LD_INT 108
23584: PUSH
23585: LD_INT 112
23587: PUSH
23588: LD_INT 113
23590: PUSH
23591: LD_INT 114
23593: PUSH
23594: EMPTY
23595: LIST
23596: LIST
23597: LIST
23598: LIST
23599: LIST
23600: LIST
23601: LIST
23602: LIST
23603: PUSH
23604: EMPTY
23605: LIST
23606: LIST
23607: ST_TO_ADDR
23608: GO 24203
23610: LD_INT 17
23612: DOUBLE
23613: EQUAL
23614: IFTRUE 23618
23616: GO 23830
23618: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
23619: LD_ADDR_VAR 0 1
23623: PUSH
23624: LD_INT 1
23626: PUSH
23627: LD_INT 2
23629: PUSH
23630: LD_INT 3
23632: PUSH
23633: LD_INT 4
23635: PUSH
23636: LD_INT 5
23638: PUSH
23639: LD_INT 6
23641: PUSH
23642: LD_INT 7
23644: PUSH
23645: LD_INT 8
23647: PUSH
23648: LD_INT 9
23650: PUSH
23651: LD_INT 10
23653: PUSH
23654: LD_INT 11
23656: PUSH
23657: LD_INT 12
23659: PUSH
23660: LD_INT 13
23662: PUSH
23663: LD_INT 14
23665: PUSH
23666: LD_INT 15
23668: PUSH
23669: LD_INT 16
23671: PUSH
23672: LD_INT 17
23674: PUSH
23675: LD_INT 18
23677: PUSH
23678: LD_INT 19
23680: PUSH
23681: LD_INT 20
23683: PUSH
23684: LD_INT 21
23686: PUSH
23687: LD_INT 22
23689: PUSH
23690: LD_INT 23
23692: PUSH
23693: LD_INT 24
23695: PUSH
23696: LD_INT 25
23698: PUSH
23699: LD_INT 26
23701: PUSH
23702: LD_INT 27
23704: PUSH
23705: LD_INT 28
23707: PUSH
23708: LD_INT 29
23710: PUSH
23711: LD_INT 30
23713: PUSH
23714: LD_INT 31
23716: PUSH
23717: LD_INT 32
23719: PUSH
23720: LD_INT 33
23722: PUSH
23723: LD_INT 34
23725: PUSH
23726: LD_INT 36
23728: PUSH
23729: EMPTY
23730: LIST
23731: LIST
23732: LIST
23733: LIST
23734: LIST
23735: LIST
23736: LIST
23737: LIST
23738: LIST
23739: LIST
23740: LIST
23741: LIST
23742: LIST
23743: LIST
23744: LIST
23745: LIST
23746: LIST
23747: LIST
23748: LIST
23749: LIST
23750: LIST
23751: LIST
23752: LIST
23753: LIST
23754: LIST
23755: LIST
23756: LIST
23757: LIST
23758: LIST
23759: LIST
23760: LIST
23761: LIST
23762: LIST
23763: LIST
23764: LIST
23765: PUSH
23766: LD_INT 101
23768: PUSH
23769: LD_INT 102
23771: PUSH
23772: LD_INT 103
23774: PUSH
23775: LD_INT 104
23777: PUSH
23778: LD_INT 105
23780: PUSH
23781: LD_INT 106
23783: PUSH
23784: LD_INT 107
23786: PUSH
23787: LD_INT 108
23789: PUSH
23790: LD_INT 109
23792: PUSH
23793: LD_INT 110
23795: PUSH
23796: LD_INT 111
23798: PUSH
23799: LD_INT 112
23801: PUSH
23802: LD_INT 113
23804: PUSH
23805: LD_INT 114
23807: PUSH
23808: EMPTY
23809: LIST
23810: LIST
23811: LIST
23812: LIST
23813: LIST
23814: LIST
23815: LIST
23816: LIST
23817: LIST
23818: LIST
23819: LIST
23820: LIST
23821: LIST
23822: LIST
23823: PUSH
23824: EMPTY
23825: LIST
23826: LIST
23827: ST_TO_ADDR
23828: GO 24203
23830: LD_INT 18
23832: DOUBLE
23833: EQUAL
23834: IFTRUE 23838
23836: GO 23974
23838: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
23839: LD_ADDR_VAR 0 1
23843: PUSH
23844: LD_INT 2
23846: PUSH
23847: LD_INT 4
23849: PUSH
23850: LD_INT 5
23852: PUSH
23853: LD_INT 7
23855: PUSH
23856: LD_INT 11
23858: PUSH
23859: LD_INT 12
23861: PUSH
23862: LD_INT 15
23864: PUSH
23865: LD_INT 16
23867: PUSH
23868: LD_INT 20
23870: PUSH
23871: LD_INT 21
23873: PUSH
23874: LD_INT 22
23876: PUSH
23877: LD_INT 23
23879: PUSH
23880: LD_INT 25
23882: PUSH
23883: LD_INT 26
23885: PUSH
23886: LD_INT 30
23888: PUSH
23889: LD_INT 31
23891: PUSH
23892: LD_INT 32
23894: PUSH
23895: LD_INT 33
23897: PUSH
23898: LD_INT 34
23900: PUSH
23901: LD_INT 35
23903: PUSH
23904: LD_INT 36
23906: PUSH
23907: EMPTY
23908: LIST
23909: LIST
23910: LIST
23911: LIST
23912: LIST
23913: LIST
23914: LIST
23915: LIST
23916: LIST
23917: LIST
23918: LIST
23919: LIST
23920: LIST
23921: LIST
23922: LIST
23923: LIST
23924: LIST
23925: LIST
23926: LIST
23927: LIST
23928: LIST
23929: PUSH
23930: LD_INT 101
23932: PUSH
23933: LD_INT 102
23935: PUSH
23936: LD_INT 103
23938: PUSH
23939: LD_INT 106
23941: PUSH
23942: LD_INT 108
23944: PUSH
23945: LD_INT 112
23947: PUSH
23948: LD_INT 113
23950: PUSH
23951: LD_INT 114
23953: PUSH
23954: LD_INT 115
23956: PUSH
23957: EMPTY
23958: LIST
23959: LIST
23960: LIST
23961: LIST
23962: LIST
23963: LIST
23964: LIST
23965: LIST
23966: LIST
23967: PUSH
23968: EMPTY
23969: LIST
23970: LIST
23971: ST_TO_ADDR
23972: GO 24203
23974: LD_INT 19
23976: DOUBLE
23977: EQUAL
23978: IFTRUE 23982
23980: GO 24202
23982: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
23983: LD_ADDR_VAR 0 1
23987: PUSH
23988: LD_INT 1
23990: PUSH
23991: LD_INT 2
23993: PUSH
23994: LD_INT 3
23996: PUSH
23997: LD_INT 4
23999: PUSH
24000: LD_INT 5
24002: PUSH
24003: LD_INT 6
24005: PUSH
24006: LD_INT 7
24008: PUSH
24009: LD_INT 8
24011: PUSH
24012: LD_INT 9
24014: PUSH
24015: LD_INT 10
24017: PUSH
24018: LD_INT 11
24020: PUSH
24021: LD_INT 12
24023: PUSH
24024: LD_INT 13
24026: PUSH
24027: LD_INT 14
24029: PUSH
24030: LD_INT 15
24032: PUSH
24033: LD_INT 16
24035: PUSH
24036: LD_INT 17
24038: PUSH
24039: LD_INT 18
24041: PUSH
24042: LD_INT 19
24044: PUSH
24045: LD_INT 20
24047: PUSH
24048: LD_INT 21
24050: PUSH
24051: LD_INT 22
24053: PUSH
24054: LD_INT 23
24056: PUSH
24057: LD_INT 24
24059: PUSH
24060: LD_INT 25
24062: PUSH
24063: LD_INT 26
24065: PUSH
24066: LD_INT 27
24068: PUSH
24069: LD_INT 28
24071: PUSH
24072: LD_INT 29
24074: PUSH
24075: LD_INT 30
24077: PUSH
24078: LD_INT 31
24080: PUSH
24081: LD_INT 32
24083: PUSH
24084: LD_INT 33
24086: PUSH
24087: LD_INT 34
24089: PUSH
24090: LD_INT 35
24092: PUSH
24093: LD_INT 36
24095: PUSH
24096: EMPTY
24097: LIST
24098: LIST
24099: LIST
24100: LIST
24101: LIST
24102: LIST
24103: LIST
24104: LIST
24105: LIST
24106: LIST
24107: LIST
24108: LIST
24109: LIST
24110: LIST
24111: LIST
24112: LIST
24113: LIST
24114: LIST
24115: LIST
24116: LIST
24117: LIST
24118: LIST
24119: LIST
24120: LIST
24121: LIST
24122: LIST
24123: LIST
24124: LIST
24125: LIST
24126: LIST
24127: LIST
24128: LIST
24129: LIST
24130: LIST
24131: LIST
24132: LIST
24133: PUSH
24134: LD_INT 101
24136: PUSH
24137: LD_INT 102
24139: PUSH
24140: LD_INT 103
24142: PUSH
24143: LD_INT 104
24145: PUSH
24146: LD_INT 105
24148: PUSH
24149: LD_INT 106
24151: PUSH
24152: LD_INT 107
24154: PUSH
24155: LD_INT 108
24157: PUSH
24158: LD_INT 109
24160: PUSH
24161: LD_INT 110
24163: PUSH
24164: LD_INT 111
24166: PUSH
24167: LD_INT 112
24169: PUSH
24170: LD_INT 113
24172: PUSH
24173: LD_INT 114
24175: PUSH
24176: LD_INT 115
24178: PUSH
24179: EMPTY
24180: LIST
24181: LIST
24182: LIST
24183: LIST
24184: LIST
24185: LIST
24186: LIST
24187: LIST
24188: LIST
24189: LIST
24190: LIST
24191: LIST
24192: LIST
24193: LIST
24194: LIST
24195: PUSH
24196: EMPTY
24197: LIST
24198: LIST
24199: ST_TO_ADDR
24200: GO 24203
24202: POP
// end else
24203: GO 24422
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
24205: LD_ADDR_VAR 0 1
24209: PUSH
24210: LD_INT 1
24212: PUSH
24213: LD_INT 2
24215: PUSH
24216: LD_INT 3
24218: PUSH
24219: LD_INT 4
24221: PUSH
24222: LD_INT 5
24224: PUSH
24225: LD_INT 6
24227: PUSH
24228: LD_INT 7
24230: PUSH
24231: LD_INT 8
24233: PUSH
24234: LD_INT 9
24236: PUSH
24237: LD_INT 10
24239: PUSH
24240: LD_INT 11
24242: PUSH
24243: LD_INT 12
24245: PUSH
24246: LD_INT 13
24248: PUSH
24249: LD_INT 14
24251: PUSH
24252: LD_INT 15
24254: PUSH
24255: LD_INT 16
24257: PUSH
24258: LD_INT 17
24260: PUSH
24261: LD_INT 18
24263: PUSH
24264: LD_INT 19
24266: PUSH
24267: LD_INT 20
24269: PUSH
24270: LD_INT 21
24272: PUSH
24273: LD_INT 22
24275: PUSH
24276: LD_INT 23
24278: PUSH
24279: LD_INT 24
24281: PUSH
24282: LD_INT 25
24284: PUSH
24285: LD_INT 26
24287: PUSH
24288: LD_INT 27
24290: PUSH
24291: LD_INT 28
24293: PUSH
24294: LD_INT 29
24296: PUSH
24297: LD_INT 30
24299: PUSH
24300: LD_INT 31
24302: PUSH
24303: LD_INT 32
24305: PUSH
24306: LD_INT 33
24308: PUSH
24309: LD_INT 34
24311: PUSH
24312: LD_INT 35
24314: PUSH
24315: LD_INT 36
24317: PUSH
24318: EMPTY
24319: LIST
24320: LIST
24321: LIST
24322: LIST
24323: LIST
24324: LIST
24325: LIST
24326: LIST
24327: LIST
24328: LIST
24329: LIST
24330: LIST
24331: LIST
24332: LIST
24333: LIST
24334: LIST
24335: LIST
24336: LIST
24337: LIST
24338: LIST
24339: LIST
24340: LIST
24341: LIST
24342: LIST
24343: LIST
24344: LIST
24345: LIST
24346: LIST
24347: LIST
24348: LIST
24349: LIST
24350: LIST
24351: LIST
24352: LIST
24353: LIST
24354: LIST
24355: PUSH
24356: LD_INT 101
24358: PUSH
24359: LD_INT 102
24361: PUSH
24362: LD_INT 103
24364: PUSH
24365: LD_INT 104
24367: PUSH
24368: LD_INT 105
24370: PUSH
24371: LD_INT 106
24373: PUSH
24374: LD_INT 107
24376: PUSH
24377: LD_INT 108
24379: PUSH
24380: LD_INT 109
24382: PUSH
24383: LD_INT 110
24385: PUSH
24386: LD_INT 111
24388: PUSH
24389: LD_INT 112
24391: PUSH
24392: LD_INT 113
24394: PUSH
24395: LD_INT 114
24397: PUSH
24398: LD_INT 115
24400: PUSH
24401: EMPTY
24402: LIST
24403: LIST
24404: LIST
24405: LIST
24406: LIST
24407: LIST
24408: LIST
24409: LIST
24410: LIST
24411: LIST
24412: LIST
24413: LIST
24414: LIST
24415: LIST
24416: LIST
24417: PUSH
24418: EMPTY
24419: LIST
24420: LIST
24421: ST_TO_ADDR
// if result then
24422: LD_VAR 0 1
24426: IFFALSE 24715
// begin normal :=  ;
24428: LD_ADDR_VAR 0 3
24432: PUSH
24433: LD_STRING 
24435: ST_TO_ADDR
// hardcore :=  ;
24436: LD_ADDR_VAR 0 4
24440: PUSH
24441: LD_STRING 
24443: ST_TO_ADDR
// for i = 1 to normalCounter do
24444: LD_ADDR_VAR 0 5
24448: PUSH
24449: DOUBLE
24450: LD_INT 1
24452: DEC
24453: ST_TO_ADDR
24454: LD_EXP 71
24458: PUSH
24459: FOR_TO
24460: IFFALSE 24561
// begin tmp := 0 ;
24462: LD_ADDR_VAR 0 2
24466: PUSH
24467: LD_STRING 0
24469: ST_TO_ADDR
// if result [ 1 ] then
24470: LD_VAR 0 1
24474: PUSH
24475: LD_INT 1
24477: ARRAY
24478: IFFALSE 24543
// if result [ 1 ] [ 1 ] = i then
24480: LD_VAR 0 1
24484: PUSH
24485: LD_INT 1
24487: ARRAY
24488: PUSH
24489: LD_INT 1
24491: ARRAY
24492: PUSH
24493: LD_VAR 0 5
24497: EQUAL
24498: IFFALSE 24543
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
24500: LD_ADDR_VAR 0 1
24504: PUSH
24505: LD_VAR 0 1
24509: PPUSH
24510: LD_INT 1
24512: PPUSH
24513: LD_VAR 0 1
24517: PUSH
24518: LD_INT 1
24520: ARRAY
24521: PPUSH
24522: LD_INT 1
24524: PPUSH
24525: CALL_OW 3
24529: PPUSH
24530: CALL_OW 1
24534: ST_TO_ADDR
// tmp := 1 ;
24535: LD_ADDR_VAR 0 2
24539: PUSH
24540: LD_STRING 1
24542: ST_TO_ADDR
// end ; normal := normal & tmp ;
24543: LD_ADDR_VAR 0 3
24547: PUSH
24548: LD_VAR 0 3
24552: PUSH
24553: LD_VAR 0 2
24557: STR
24558: ST_TO_ADDR
// end ;
24559: GO 24459
24561: POP
24562: POP
// for i = 1 to hardcoreCounter do
24563: LD_ADDR_VAR 0 5
24567: PUSH
24568: DOUBLE
24569: LD_INT 1
24571: DEC
24572: ST_TO_ADDR
24573: LD_EXP 72
24577: PUSH
24578: FOR_TO
24579: IFFALSE 24684
// begin tmp := 0 ;
24581: LD_ADDR_VAR 0 2
24585: PUSH
24586: LD_STRING 0
24588: ST_TO_ADDR
// if result [ 2 ] then
24589: LD_VAR 0 1
24593: PUSH
24594: LD_INT 2
24596: ARRAY
24597: IFFALSE 24666
// if result [ 2 ] [ 1 ] = 100 + i then
24599: LD_VAR 0 1
24603: PUSH
24604: LD_INT 2
24606: ARRAY
24607: PUSH
24608: LD_INT 1
24610: ARRAY
24611: PUSH
24612: LD_INT 100
24614: PUSH
24615: LD_VAR 0 5
24619: PLUS
24620: EQUAL
24621: IFFALSE 24666
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
24623: LD_ADDR_VAR 0 1
24627: PUSH
24628: LD_VAR 0 1
24632: PPUSH
24633: LD_INT 2
24635: PPUSH
24636: LD_VAR 0 1
24640: PUSH
24641: LD_INT 2
24643: ARRAY
24644: PPUSH
24645: LD_INT 1
24647: PPUSH
24648: CALL_OW 3
24652: PPUSH
24653: CALL_OW 1
24657: ST_TO_ADDR
// tmp := 1 ;
24658: LD_ADDR_VAR 0 2
24662: PUSH
24663: LD_STRING 1
24665: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
24666: LD_ADDR_VAR 0 4
24670: PUSH
24671: LD_VAR 0 4
24675: PUSH
24676: LD_VAR 0 2
24680: STR
24681: ST_TO_ADDR
// end ;
24682: GO 24578
24684: POP
24685: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
24686: LD_STRING getStreamItemsFromMission("
24688: PUSH
24689: LD_VAR 0 3
24693: STR
24694: PUSH
24695: LD_STRING ","
24697: STR
24698: PUSH
24699: LD_VAR 0 4
24703: STR
24704: PUSH
24705: LD_STRING ")
24707: STR
24708: PPUSH
24709: CALL_OW 559
// end else
24713: GO 24722
// ToLua ( getStreamItemsFromMission("","") ) ;
24715: LD_STRING getStreamItemsFromMission("","")
24717: PPUSH
24718: CALL_OW 559
// end ;
24722: LD_VAR 0 1
24726: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
24727: LD_EXP 70
24731: PUSH
24732: LD_EXP 75
24736: AND
24737: IFFALSE 24861
24739: GO 24741
24741: DISABLE
24742: LD_INT 0
24744: PPUSH
24745: PPUSH
// begin enable ;
24746: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
24747: LD_ADDR_VAR 0 2
24751: PUSH
24752: LD_INT 22
24754: PUSH
24755: LD_OWVAR 2
24759: PUSH
24760: EMPTY
24761: LIST
24762: LIST
24763: PUSH
24764: LD_INT 2
24766: PUSH
24767: LD_INT 34
24769: PUSH
24770: LD_INT 7
24772: PUSH
24773: EMPTY
24774: LIST
24775: LIST
24776: PUSH
24777: LD_INT 34
24779: PUSH
24780: LD_INT 45
24782: PUSH
24783: EMPTY
24784: LIST
24785: LIST
24786: PUSH
24787: LD_INT 34
24789: PUSH
24790: LD_INT 28
24792: PUSH
24793: EMPTY
24794: LIST
24795: LIST
24796: PUSH
24797: LD_INT 34
24799: PUSH
24800: LD_INT 47
24802: PUSH
24803: EMPTY
24804: LIST
24805: LIST
24806: PUSH
24807: EMPTY
24808: LIST
24809: LIST
24810: LIST
24811: LIST
24812: LIST
24813: PUSH
24814: EMPTY
24815: LIST
24816: LIST
24817: PPUSH
24818: CALL_OW 69
24822: ST_TO_ADDR
// if not tmp then
24823: LD_VAR 0 2
24827: NOT
24828: IFFALSE 24832
// exit ;
24830: GO 24861
// for i in tmp do
24832: LD_ADDR_VAR 0 1
24836: PUSH
24837: LD_VAR 0 2
24841: PUSH
24842: FOR_IN
24843: IFFALSE 24859
// begin SetLives ( i , 0 ) ;
24845: LD_VAR 0 1
24849: PPUSH
24850: LD_INT 0
24852: PPUSH
24853: CALL_OW 234
// end ;
24857: GO 24842
24859: POP
24860: POP
// end ;
24861: PPOPN 2
24863: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
24864: LD_EXP 70
24868: PUSH
24869: LD_EXP 76
24873: AND
24874: IFFALSE 24958
24876: GO 24878
24878: DISABLE
24879: LD_INT 0
24881: PPUSH
24882: PPUSH
// begin enable ;
24883: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
24884: LD_ADDR_VAR 0 2
24888: PUSH
24889: LD_INT 22
24891: PUSH
24892: LD_OWVAR 2
24896: PUSH
24897: EMPTY
24898: LIST
24899: LIST
24900: PUSH
24901: LD_INT 32
24903: PUSH
24904: LD_INT 3
24906: PUSH
24907: EMPTY
24908: LIST
24909: LIST
24910: PUSH
24911: EMPTY
24912: LIST
24913: LIST
24914: PPUSH
24915: CALL_OW 69
24919: ST_TO_ADDR
// if not tmp then
24920: LD_VAR 0 2
24924: NOT
24925: IFFALSE 24929
// exit ;
24927: GO 24958
// for i in tmp do
24929: LD_ADDR_VAR 0 1
24933: PUSH
24934: LD_VAR 0 2
24938: PUSH
24939: FOR_IN
24940: IFFALSE 24956
// begin SetLives ( i , 0 ) ;
24942: LD_VAR 0 1
24946: PPUSH
24947: LD_INT 0
24949: PPUSH
24950: CALL_OW 234
// end ;
24954: GO 24939
24956: POP
24957: POP
// end ;
24958: PPOPN 2
24960: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
24961: LD_EXP 70
24965: PUSH
24966: LD_EXP 73
24970: AND
24971: IFFALSE 25064
24973: GO 24975
24975: DISABLE
24976: LD_INT 0
24978: PPUSH
// begin enable ;
24979: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
24980: LD_ADDR_VAR 0 1
24984: PUSH
24985: LD_INT 22
24987: PUSH
24988: LD_OWVAR 2
24992: PUSH
24993: EMPTY
24994: LIST
24995: LIST
24996: PUSH
24997: LD_INT 2
24999: PUSH
25000: LD_INT 25
25002: PUSH
25003: LD_INT 5
25005: PUSH
25006: EMPTY
25007: LIST
25008: LIST
25009: PUSH
25010: LD_INT 25
25012: PUSH
25013: LD_INT 9
25015: PUSH
25016: EMPTY
25017: LIST
25018: LIST
25019: PUSH
25020: LD_INT 25
25022: PUSH
25023: LD_INT 8
25025: PUSH
25026: EMPTY
25027: LIST
25028: LIST
25029: PUSH
25030: EMPTY
25031: LIST
25032: LIST
25033: LIST
25034: LIST
25035: PUSH
25036: EMPTY
25037: LIST
25038: LIST
25039: PPUSH
25040: CALL_OW 69
25044: PUSH
25045: FOR_IN
25046: IFFALSE 25062
// begin SetClass ( i , 1 ) ;
25048: LD_VAR 0 1
25052: PPUSH
25053: LD_INT 1
25055: PPUSH
25056: CALL_OW 336
// end ;
25060: GO 25045
25062: POP
25063: POP
// end ;
25064: PPOPN 1
25066: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
25067: LD_EXP 70
25071: PUSH
25072: LD_EXP 74
25076: AND
25077: PUSH
25078: LD_OWVAR 65
25082: PUSH
25083: LD_INT 7
25085: LESS
25086: AND
25087: IFFALSE 25101
25089: GO 25091
25091: DISABLE
// begin enable ;
25092: ENABLE
// game_speed := 7 ;
25093: LD_ADDR_OWVAR 65
25097: PUSH
25098: LD_INT 7
25100: ST_TO_ADDR
// end ;
25101: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
25102: LD_EXP 70
25106: PUSH
25107: LD_EXP 77
25111: AND
25112: IFFALSE 25314
25114: GO 25116
25116: DISABLE
25117: LD_INT 0
25119: PPUSH
25120: PPUSH
25121: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
25122: LD_ADDR_VAR 0 3
25126: PUSH
25127: LD_INT 81
25129: PUSH
25130: LD_OWVAR 2
25134: PUSH
25135: EMPTY
25136: LIST
25137: LIST
25138: PUSH
25139: LD_INT 21
25141: PUSH
25142: LD_INT 1
25144: PUSH
25145: EMPTY
25146: LIST
25147: LIST
25148: PUSH
25149: EMPTY
25150: LIST
25151: LIST
25152: PPUSH
25153: CALL_OW 69
25157: ST_TO_ADDR
// if not tmp then
25158: LD_VAR 0 3
25162: NOT
25163: IFFALSE 25167
// exit ;
25165: GO 25314
// if tmp > 5 then
25167: LD_VAR 0 3
25171: PUSH
25172: LD_INT 5
25174: GREATER
25175: IFFALSE 25187
// k := 5 else
25177: LD_ADDR_VAR 0 2
25181: PUSH
25182: LD_INT 5
25184: ST_TO_ADDR
25185: GO 25197
// k := tmp ;
25187: LD_ADDR_VAR 0 2
25191: PUSH
25192: LD_VAR 0 3
25196: ST_TO_ADDR
// for i := 1 to k do
25197: LD_ADDR_VAR 0 1
25201: PUSH
25202: DOUBLE
25203: LD_INT 1
25205: DEC
25206: ST_TO_ADDR
25207: LD_VAR 0 2
25211: PUSH
25212: FOR_TO
25213: IFFALSE 25312
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
25215: LD_VAR 0 3
25219: PUSH
25220: LD_VAR 0 1
25224: ARRAY
25225: PPUSH
25226: LD_VAR 0 1
25230: PUSH
25231: LD_INT 4
25233: MOD
25234: PUSH
25235: LD_INT 1
25237: PLUS
25238: PPUSH
25239: CALL_OW 259
25243: PUSH
25244: LD_INT 10
25246: LESS
25247: IFFALSE 25310
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
25249: LD_VAR 0 3
25253: PUSH
25254: LD_VAR 0 1
25258: ARRAY
25259: PPUSH
25260: LD_VAR 0 1
25264: PUSH
25265: LD_INT 4
25267: MOD
25268: PUSH
25269: LD_INT 1
25271: PLUS
25272: PPUSH
25273: LD_VAR 0 3
25277: PUSH
25278: LD_VAR 0 1
25282: ARRAY
25283: PPUSH
25284: LD_VAR 0 1
25288: PUSH
25289: LD_INT 4
25291: MOD
25292: PUSH
25293: LD_INT 1
25295: PLUS
25296: PPUSH
25297: CALL_OW 259
25301: PUSH
25302: LD_INT 1
25304: PLUS
25305: PPUSH
25306: CALL_OW 237
25310: GO 25212
25312: POP
25313: POP
// end ;
25314: PPOPN 3
25316: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
25317: LD_EXP 70
25321: PUSH
25322: LD_EXP 78
25326: AND
25327: IFFALSE 25347
25329: GO 25331
25331: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
25332: LD_INT 4
25334: PPUSH
25335: LD_OWVAR 2
25339: PPUSH
25340: LD_INT 0
25342: PPUSH
25343: CALL_OW 324
25347: END
// every 0 0$1 trigger StreamModeActive and sShovel do
25348: LD_EXP 70
25352: PUSH
25353: LD_EXP 107
25357: AND
25358: IFFALSE 25378
25360: GO 25362
25362: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
25363: LD_INT 19
25365: PPUSH
25366: LD_OWVAR 2
25370: PPUSH
25371: LD_INT 0
25373: PPUSH
25374: CALL_OW 324
25378: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
25379: LD_EXP 70
25383: PUSH
25384: LD_EXP 79
25388: AND
25389: IFFALSE 25491
25391: GO 25393
25393: DISABLE
25394: LD_INT 0
25396: PPUSH
25397: PPUSH
// begin enable ;
25398: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
25399: LD_ADDR_VAR 0 2
25403: PUSH
25404: LD_INT 22
25406: PUSH
25407: LD_OWVAR 2
25411: PUSH
25412: EMPTY
25413: LIST
25414: LIST
25415: PUSH
25416: LD_INT 2
25418: PUSH
25419: LD_INT 34
25421: PUSH
25422: LD_INT 11
25424: PUSH
25425: EMPTY
25426: LIST
25427: LIST
25428: PUSH
25429: LD_INT 34
25431: PUSH
25432: LD_INT 30
25434: PUSH
25435: EMPTY
25436: LIST
25437: LIST
25438: PUSH
25439: EMPTY
25440: LIST
25441: LIST
25442: LIST
25443: PUSH
25444: EMPTY
25445: LIST
25446: LIST
25447: PPUSH
25448: CALL_OW 69
25452: ST_TO_ADDR
// if not tmp then
25453: LD_VAR 0 2
25457: NOT
25458: IFFALSE 25462
// exit ;
25460: GO 25491
// for i in tmp do
25462: LD_ADDR_VAR 0 1
25466: PUSH
25467: LD_VAR 0 2
25471: PUSH
25472: FOR_IN
25473: IFFALSE 25489
// begin SetLives ( i , 0 ) ;
25475: LD_VAR 0 1
25479: PPUSH
25480: LD_INT 0
25482: PPUSH
25483: CALL_OW 234
// end ;
25487: GO 25472
25489: POP
25490: POP
// end ;
25491: PPOPN 2
25493: END
// every 0 0$1 trigger StreamModeActive and sBunker do
25494: LD_EXP 70
25498: PUSH
25499: LD_EXP 80
25503: AND
25504: IFFALSE 25524
25506: GO 25508
25508: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
25509: LD_INT 32
25511: PPUSH
25512: LD_OWVAR 2
25516: PPUSH
25517: LD_INT 0
25519: PPUSH
25520: CALL_OW 324
25524: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
25525: LD_EXP 70
25529: PUSH
25530: LD_EXP 81
25534: AND
25535: IFFALSE 25716
25537: GO 25539
25539: DISABLE
25540: LD_INT 0
25542: PPUSH
25543: PPUSH
25544: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
25545: LD_ADDR_VAR 0 2
25549: PUSH
25550: LD_INT 22
25552: PUSH
25553: LD_OWVAR 2
25557: PUSH
25558: EMPTY
25559: LIST
25560: LIST
25561: PUSH
25562: LD_INT 33
25564: PUSH
25565: LD_INT 3
25567: PUSH
25568: EMPTY
25569: LIST
25570: LIST
25571: PUSH
25572: EMPTY
25573: LIST
25574: LIST
25575: PPUSH
25576: CALL_OW 69
25580: ST_TO_ADDR
// if not tmp then
25581: LD_VAR 0 2
25585: NOT
25586: IFFALSE 25590
// exit ;
25588: GO 25716
// side := 0 ;
25590: LD_ADDR_VAR 0 3
25594: PUSH
25595: LD_INT 0
25597: ST_TO_ADDR
// for i := 1 to 8 do
25598: LD_ADDR_VAR 0 1
25602: PUSH
25603: DOUBLE
25604: LD_INT 1
25606: DEC
25607: ST_TO_ADDR
25608: LD_INT 8
25610: PUSH
25611: FOR_TO
25612: IFFALSE 25660
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
25614: LD_OWVAR 2
25618: PUSH
25619: LD_VAR 0 1
25623: NONEQUAL
25624: PUSH
25625: LD_OWVAR 2
25629: PPUSH
25630: LD_VAR 0 1
25634: PPUSH
25635: CALL_OW 81
25639: PUSH
25640: LD_INT 2
25642: EQUAL
25643: AND
25644: IFFALSE 25658
// begin side := i ;
25646: LD_ADDR_VAR 0 3
25650: PUSH
25651: LD_VAR 0 1
25655: ST_TO_ADDR
// break ;
25656: GO 25660
// end ;
25658: GO 25611
25660: POP
25661: POP
// if not side then
25662: LD_VAR 0 3
25666: NOT
25667: IFFALSE 25671
// exit ;
25669: GO 25716
// for i := 1 to tmp do
25671: LD_ADDR_VAR 0 1
25675: PUSH
25676: DOUBLE
25677: LD_INT 1
25679: DEC
25680: ST_TO_ADDR
25681: LD_VAR 0 2
25685: PUSH
25686: FOR_TO
25687: IFFALSE 25714
// if Prob ( 60 ) then
25689: LD_INT 60
25691: PPUSH
25692: CALL_OW 13
25696: IFFALSE 25712
// SetSide ( i , side ) ;
25698: LD_VAR 0 1
25702: PPUSH
25703: LD_VAR 0 3
25707: PPUSH
25708: CALL_OW 235
25712: GO 25686
25714: POP
25715: POP
// end ;
25716: PPOPN 3
25718: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
25719: LD_EXP 70
25723: PUSH
25724: LD_EXP 83
25728: AND
25729: IFFALSE 25848
25731: GO 25733
25733: DISABLE
25734: LD_INT 0
25736: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
25737: LD_ADDR_VAR 0 1
25741: PUSH
25742: LD_INT 22
25744: PUSH
25745: LD_OWVAR 2
25749: PUSH
25750: EMPTY
25751: LIST
25752: LIST
25753: PUSH
25754: LD_INT 21
25756: PUSH
25757: LD_INT 1
25759: PUSH
25760: EMPTY
25761: LIST
25762: LIST
25763: PUSH
25764: LD_INT 3
25766: PUSH
25767: LD_INT 23
25769: PUSH
25770: LD_INT 0
25772: PUSH
25773: EMPTY
25774: LIST
25775: LIST
25776: PUSH
25777: EMPTY
25778: LIST
25779: LIST
25780: PUSH
25781: EMPTY
25782: LIST
25783: LIST
25784: LIST
25785: PPUSH
25786: CALL_OW 69
25790: PUSH
25791: FOR_IN
25792: IFFALSE 25846
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
25794: LD_VAR 0 1
25798: PPUSH
25799: CALL_OW 257
25803: PUSH
25804: LD_INT 1
25806: PUSH
25807: LD_INT 2
25809: PUSH
25810: LD_INT 3
25812: PUSH
25813: LD_INT 4
25815: PUSH
25816: EMPTY
25817: LIST
25818: LIST
25819: LIST
25820: LIST
25821: IN
25822: IFFALSE 25844
// SetClass ( un , rand ( 1 , 4 ) ) ;
25824: LD_VAR 0 1
25828: PPUSH
25829: LD_INT 1
25831: PPUSH
25832: LD_INT 4
25834: PPUSH
25835: CALL_OW 12
25839: PPUSH
25840: CALL_OW 336
25844: GO 25791
25846: POP
25847: POP
// end ;
25848: PPOPN 1
25850: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
25851: LD_EXP 70
25855: PUSH
25856: LD_EXP 82
25860: AND
25861: IFFALSE 25940
25863: GO 25865
25865: DISABLE
25866: LD_INT 0
25868: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25869: LD_ADDR_VAR 0 1
25873: PUSH
25874: LD_INT 22
25876: PUSH
25877: LD_OWVAR 2
25881: PUSH
25882: EMPTY
25883: LIST
25884: LIST
25885: PUSH
25886: LD_INT 21
25888: PUSH
25889: LD_INT 3
25891: PUSH
25892: EMPTY
25893: LIST
25894: LIST
25895: PUSH
25896: EMPTY
25897: LIST
25898: LIST
25899: PPUSH
25900: CALL_OW 69
25904: ST_TO_ADDR
// if not tmp then
25905: LD_VAR 0 1
25909: NOT
25910: IFFALSE 25914
// exit ;
25912: GO 25940
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
25914: LD_VAR 0 1
25918: PUSH
25919: LD_INT 1
25921: PPUSH
25922: LD_VAR 0 1
25926: PPUSH
25927: CALL_OW 12
25931: ARRAY
25932: PPUSH
25933: LD_INT 100
25935: PPUSH
25936: CALL_OW 234
// end ;
25940: PPOPN 1
25942: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
25943: LD_EXP 70
25947: PUSH
25948: LD_EXP 84
25952: AND
25953: IFFALSE 26051
25955: GO 25957
25957: DISABLE
25958: LD_INT 0
25960: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
25961: LD_ADDR_VAR 0 1
25965: PUSH
25966: LD_INT 22
25968: PUSH
25969: LD_OWVAR 2
25973: PUSH
25974: EMPTY
25975: LIST
25976: LIST
25977: PUSH
25978: LD_INT 21
25980: PUSH
25981: LD_INT 1
25983: PUSH
25984: EMPTY
25985: LIST
25986: LIST
25987: PUSH
25988: EMPTY
25989: LIST
25990: LIST
25991: PPUSH
25992: CALL_OW 69
25996: ST_TO_ADDR
// if not tmp then
25997: LD_VAR 0 1
26001: NOT
26002: IFFALSE 26006
// exit ;
26004: GO 26051
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
26006: LD_VAR 0 1
26010: PUSH
26011: LD_INT 1
26013: PPUSH
26014: LD_VAR 0 1
26018: PPUSH
26019: CALL_OW 12
26023: ARRAY
26024: PPUSH
26025: LD_INT 1
26027: PPUSH
26028: LD_INT 4
26030: PPUSH
26031: CALL_OW 12
26035: PPUSH
26036: LD_INT 3000
26038: PPUSH
26039: LD_INT 9000
26041: PPUSH
26042: CALL_OW 12
26046: PPUSH
26047: CALL_OW 492
// end ;
26051: PPOPN 1
26053: END
// every 0 0$1 trigger StreamModeActive and sDepot do
26054: LD_EXP 70
26058: PUSH
26059: LD_EXP 85
26063: AND
26064: IFFALSE 26084
26066: GO 26068
26068: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
26069: LD_INT 1
26071: PPUSH
26072: LD_OWVAR 2
26076: PPUSH
26077: LD_INT 0
26079: PPUSH
26080: CALL_OW 324
26084: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
26085: LD_EXP 70
26089: PUSH
26090: LD_EXP 86
26094: AND
26095: IFFALSE 26178
26097: GO 26099
26099: DISABLE
26100: LD_INT 0
26102: PPUSH
26103: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26104: LD_ADDR_VAR 0 2
26108: PUSH
26109: LD_INT 22
26111: PUSH
26112: LD_OWVAR 2
26116: PUSH
26117: EMPTY
26118: LIST
26119: LIST
26120: PUSH
26121: LD_INT 21
26123: PUSH
26124: LD_INT 3
26126: PUSH
26127: EMPTY
26128: LIST
26129: LIST
26130: PUSH
26131: EMPTY
26132: LIST
26133: LIST
26134: PPUSH
26135: CALL_OW 69
26139: ST_TO_ADDR
// if not tmp then
26140: LD_VAR 0 2
26144: NOT
26145: IFFALSE 26149
// exit ;
26147: GO 26178
// for i in tmp do
26149: LD_ADDR_VAR 0 1
26153: PUSH
26154: LD_VAR 0 2
26158: PUSH
26159: FOR_IN
26160: IFFALSE 26176
// SetBLevel ( i , 10 ) ;
26162: LD_VAR 0 1
26166: PPUSH
26167: LD_INT 10
26169: PPUSH
26170: CALL_OW 241
26174: GO 26159
26176: POP
26177: POP
// end ;
26178: PPOPN 2
26180: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
26181: LD_EXP 70
26185: PUSH
26186: LD_EXP 87
26190: AND
26191: IFFALSE 26302
26193: GO 26195
26195: DISABLE
26196: LD_INT 0
26198: PPUSH
26199: PPUSH
26200: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26201: LD_ADDR_VAR 0 3
26205: PUSH
26206: LD_INT 22
26208: PUSH
26209: LD_OWVAR 2
26213: PUSH
26214: EMPTY
26215: LIST
26216: LIST
26217: PUSH
26218: LD_INT 25
26220: PUSH
26221: LD_INT 1
26223: PUSH
26224: EMPTY
26225: LIST
26226: LIST
26227: PUSH
26228: EMPTY
26229: LIST
26230: LIST
26231: PPUSH
26232: CALL_OW 69
26236: ST_TO_ADDR
// if not tmp then
26237: LD_VAR 0 3
26241: NOT
26242: IFFALSE 26246
// exit ;
26244: GO 26302
// un := tmp [ rand ( 1 , tmp ) ] ;
26246: LD_ADDR_VAR 0 2
26250: PUSH
26251: LD_VAR 0 3
26255: PUSH
26256: LD_INT 1
26258: PPUSH
26259: LD_VAR 0 3
26263: PPUSH
26264: CALL_OW 12
26268: ARRAY
26269: ST_TO_ADDR
// if Crawls ( un ) then
26270: LD_VAR 0 2
26274: PPUSH
26275: CALL_OW 318
26279: IFFALSE 26290
// ComWalk ( un ) ;
26281: LD_VAR 0 2
26285: PPUSH
26286: CALL_OW 138
// SetClass ( un , class_sniper ) ;
26290: LD_VAR 0 2
26294: PPUSH
26295: LD_INT 5
26297: PPUSH
26298: CALL_OW 336
// end ;
26302: PPOPN 3
26304: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
26305: LD_EXP 70
26309: PUSH
26310: LD_EXP 88
26314: AND
26315: PUSH
26316: LD_OWVAR 67
26320: PUSH
26321: LD_INT 3
26323: LESS
26324: AND
26325: IFFALSE 26344
26327: GO 26329
26329: DISABLE
// Difficulty := Difficulty + 1 ;
26330: LD_ADDR_OWVAR 67
26334: PUSH
26335: LD_OWVAR 67
26339: PUSH
26340: LD_INT 1
26342: PLUS
26343: ST_TO_ADDR
26344: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
26345: LD_EXP 70
26349: PUSH
26350: LD_EXP 89
26354: AND
26355: IFFALSE 26458
26357: GO 26359
26359: DISABLE
26360: LD_INT 0
26362: PPUSH
// begin for i := 1 to 5 do
26363: LD_ADDR_VAR 0 1
26367: PUSH
26368: DOUBLE
26369: LD_INT 1
26371: DEC
26372: ST_TO_ADDR
26373: LD_INT 5
26375: PUSH
26376: FOR_TO
26377: IFFALSE 26456
// begin uc_nation := nation_nature ;
26379: LD_ADDR_OWVAR 21
26383: PUSH
26384: LD_INT 0
26386: ST_TO_ADDR
// uc_side := 0 ;
26387: LD_ADDR_OWVAR 20
26391: PUSH
26392: LD_INT 0
26394: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26395: LD_ADDR_OWVAR 29
26399: PUSH
26400: LD_INT 12
26402: PUSH
26403: LD_INT 12
26405: PUSH
26406: EMPTY
26407: LIST
26408: LIST
26409: ST_TO_ADDR
// hc_agressivity := 20 ;
26410: LD_ADDR_OWVAR 35
26414: PUSH
26415: LD_INT 20
26417: ST_TO_ADDR
// hc_class := class_tiger ;
26418: LD_ADDR_OWVAR 28
26422: PUSH
26423: LD_INT 14
26425: ST_TO_ADDR
// hc_gallery :=  ;
26426: LD_ADDR_OWVAR 33
26430: PUSH
26431: LD_STRING 
26433: ST_TO_ADDR
// hc_name :=  ;
26434: LD_ADDR_OWVAR 26
26438: PUSH
26439: LD_STRING 
26441: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
26442: CALL_OW 44
26446: PPUSH
26447: LD_INT 0
26449: PPUSH
26450: CALL_OW 51
// end ;
26454: GO 26376
26456: POP
26457: POP
// end ;
26458: PPOPN 1
26460: END
// every 0 0$1 trigger StreamModeActive and sBomb do
26461: LD_EXP 70
26465: PUSH
26466: LD_EXP 90
26470: AND
26471: IFFALSE 26480
26473: GO 26475
26475: DISABLE
// StreamSibBomb ;
26476: CALL 26481 0 0
26480: END
// export function StreamSibBomb ; var i , x , y ; begin
26481: LD_INT 0
26483: PPUSH
26484: PPUSH
26485: PPUSH
26486: PPUSH
// result := false ;
26487: LD_ADDR_VAR 0 1
26491: PUSH
26492: LD_INT 0
26494: ST_TO_ADDR
// for i := 1 to 16 do
26495: LD_ADDR_VAR 0 2
26499: PUSH
26500: DOUBLE
26501: LD_INT 1
26503: DEC
26504: ST_TO_ADDR
26505: LD_INT 16
26507: PUSH
26508: FOR_TO
26509: IFFALSE 26708
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26511: LD_ADDR_VAR 0 3
26515: PUSH
26516: LD_INT 10
26518: PUSH
26519: LD_INT 20
26521: PUSH
26522: LD_INT 30
26524: PUSH
26525: LD_INT 40
26527: PUSH
26528: LD_INT 50
26530: PUSH
26531: LD_INT 60
26533: PUSH
26534: LD_INT 70
26536: PUSH
26537: LD_INT 80
26539: PUSH
26540: LD_INT 90
26542: PUSH
26543: LD_INT 100
26545: PUSH
26546: LD_INT 110
26548: PUSH
26549: LD_INT 120
26551: PUSH
26552: LD_INT 130
26554: PUSH
26555: LD_INT 140
26557: PUSH
26558: LD_INT 150
26560: PUSH
26561: EMPTY
26562: LIST
26563: LIST
26564: LIST
26565: LIST
26566: LIST
26567: LIST
26568: LIST
26569: LIST
26570: LIST
26571: LIST
26572: LIST
26573: LIST
26574: LIST
26575: LIST
26576: LIST
26577: PUSH
26578: LD_INT 1
26580: PPUSH
26581: LD_INT 15
26583: PPUSH
26584: CALL_OW 12
26588: ARRAY
26589: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26590: LD_ADDR_VAR 0 4
26594: PUSH
26595: LD_INT 10
26597: PUSH
26598: LD_INT 20
26600: PUSH
26601: LD_INT 30
26603: PUSH
26604: LD_INT 40
26606: PUSH
26607: LD_INT 50
26609: PUSH
26610: LD_INT 60
26612: PUSH
26613: LD_INT 70
26615: PUSH
26616: LD_INT 80
26618: PUSH
26619: LD_INT 90
26621: PUSH
26622: LD_INT 100
26624: PUSH
26625: LD_INT 110
26627: PUSH
26628: LD_INT 120
26630: PUSH
26631: LD_INT 130
26633: PUSH
26634: LD_INT 140
26636: PUSH
26637: LD_INT 150
26639: PUSH
26640: EMPTY
26641: LIST
26642: LIST
26643: LIST
26644: LIST
26645: LIST
26646: LIST
26647: LIST
26648: LIST
26649: LIST
26650: LIST
26651: LIST
26652: LIST
26653: LIST
26654: LIST
26655: LIST
26656: PUSH
26657: LD_INT 1
26659: PPUSH
26660: LD_INT 15
26662: PPUSH
26663: CALL_OW 12
26667: ARRAY
26668: ST_TO_ADDR
// if ValidHex ( x , y ) then
26669: LD_VAR 0 3
26673: PPUSH
26674: LD_VAR 0 4
26678: PPUSH
26679: CALL_OW 488
26683: IFFALSE 26706
// begin result := [ x , y ] ;
26685: LD_ADDR_VAR 0 1
26689: PUSH
26690: LD_VAR 0 3
26694: PUSH
26695: LD_VAR 0 4
26699: PUSH
26700: EMPTY
26701: LIST
26702: LIST
26703: ST_TO_ADDR
// break ;
26704: GO 26708
// end ; end ;
26706: GO 26508
26708: POP
26709: POP
// if result then
26710: LD_VAR 0 1
26714: IFFALSE 26774
// begin ToLua ( playSibBomb() ) ;
26716: LD_STRING playSibBomb()
26718: PPUSH
26719: CALL_OW 559
// wait ( 0 0$14 ) ;
26723: LD_INT 490
26725: PPUSH
26726: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
26730: LD_VAR 0 1
26734: PUSH
26735: LD_INT 1
26737: ARRAY
26738: PPUSH
26739: LD_VAR 0 1
26743: PUSH
26744: LD_INT 2
26746: ARRAY
26747: PPUSH
26748: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
26752: LD_VAR 0 1
26756: PUSH
26757: LD_INT 1
26759: ARRAY
26760: PPUSH
26761: LD_VAR 0 1
26765: PUSH
26766: LD_INT 2
26768: ARRAY
26769: PPUSH
26770: CALL_OW 429
// end ; end ;
26774: LD_VAR 0 1
26778: RET
// every 0 0$1 trigger StreamModeActive and sReset do
26779: LD_EXP 70
26783: PUSH
26784: LD_EXP 92
26788: AND
26789: IFFALSE 26801
26791: GO 26793
26793: DISABLE
// YouLost (  ) ;
26794: LD_STRING 
26796: PPUSH
26797: CALL_OW 104
26801: END
// every 0 0$1 trigger StreamModeActive and sFog do
26802: LD_EXP 70
26806: PUSH
26807: LD_EXP 91
26811: AND
26812: IFFALSE 26826
26814: GO 26816
26816: DISABLE
// FogOff ( your_side ) ;
26817: LD_OWVAR 2
26821: PPUSH
26822: CALL_OW 344
26826: END
// every 0 0$1 trigger StreamModeActive and sSun do
26827: LD_EXP 70
26831: PUSH
26832: LD_EXP 93
26836: AND
26837: IFFALSE 26865
26839: GO 26841
26841: DISABLE
// begin solar_recharge_percent := 0 ;
26842: LD_ADDR_OWVAR 79
26846: PUSH
26847: LD_INT 0
26849: ST_TO_ADDR
// wait ( 5 5$00 ) ;
26850: LD_INT 10500
26852: PPUSH
26853: CALL_OW 67
// solar_recharge_percent := 100 ;
26857: LD_ADDR_OWVAR 79
26861: PUSH
26862: LD_INT 100
26864: ST_TO_ADDR
// end ;
26865: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
26866: LD_EXP 70
26870: PUSH
26871: LD_EXP 94
26875: AND
26876: IFFALSE 27115
26878: GO 26880
26880: DISABLE
26881: LD_INT 0
26883: PPUSH
26884: PPUSH
26885: PPUSH
// begin tmp := [ ] ;
26886: LD_ADDR_VAR 0 3
26890: PUSH
26891: EMPTY
26892: ST_TO_ADDR
// for i := 1 to 6 do
26893: LD_ADDR_VAR 0 1
26897: PUSH
26898: DOUBLE
26899: LD_INT 1
26901: DEC
26902: ST_TO_ADDR
26903: LD_INT 6
26905: PUSH
26906: FOR_TO
26907: IFFALSE 27012
// begin uc_nation := nation_nature ;
26909: LD_ADDR_OWVAR 21
26913: PUSH
26914: LD_INT 0
26916: ST_TO_ADDR
// uc_side := 0 ;
26917: LD_ADDR_OWVAR 20
26921: PUSH
26922: LD_INT 0
26924: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26925: LD_ADDR_OWVAR 29
26929: PUSH
26930: LD_INT 12
26932: PUSH
26933: LD_INT 12
26935: PUSH
26936: EMPTY
26937: LIST
26938: LIST
26939: ST_TO_ADDR
// hc_agressivity := 20 ;
26940: LD_ADDR_OWVAR 35
26944: PUSH
26945: LD_INT 20
26947: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
26948: LD_ADDR_OWVAR 28
26952: PUSH
26953: LD_INT 17
26955: ST_TO_ADDR
// hc_gallery :=  ;
26956: LD_ADDR_OWVAR 33
26960: PUSH
26961: LD_STRING 
26963: ST_TO_ADDR
// hc_name :=  ;
26964: LD_ADDR_OWVAR 26
26968: PUSH
26969: LD_STRING 
26971: ST_TO_ADDR
// un := CreateHuman ;
26972: LD_ADDR_VAR 0 2
26976: PUSH
26977: CALL_OW 44
26981: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
26982: LD_VAR 0 2
26986: PPUSH
26987: LD_INT 1
26989: PPUSH
26990: CALL_OW 51
// tmp := tmp ^ un ;
26994: LD_ADDR_VAR 0 3
26998: PUSH
26999: LD_VAR 0 3
27003: PUSH
27004: LD_VAR 0 2
27008: ADD
27009: ST_TO_ADDR
// end ;
27010: GO 26906
27012: POP
27013: POP
// repeat wait ( 0 0$1 ) ;
27014: LD_INT 35
27016: PPUSH
27017: CALL_OW 67
// for un in tmp do
27021: LD_ADDR_VAR 0 2
27025: PUSH
27026: LD_VAR 0 3
27030: PUSH
27031: FOR_IN
27032: IFFALSE 27106
// begin if IsDead ( un ) then
27034: LD_VAR 0 2
27038: PPUSH
27039: CALL_OW 301
27043: IFFALSE 27063
// begin tmp := tmp diff un ;
27045: LD_ADDR_VAR 0 3
27049: PUSH
27050: LD_VAR 0 3
27054: PUSH
27055: LD_VAR 0 2
27059: DIFF
27060: ST_TO_ADDR
// continue ;
27061: GO 27031
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
27063: LD_VAR 0 2
27067: PPUSH
27068: LD_INT 3
27070: PUSH
27071: LD_INT 22
27073: PUSH
27074: LD_INT 0
27076: PUSH
27077: EMPTY
27078: LIST
27079: LIST
27080: PUSH
27081: EMPTY
27082: LIST
27083: LIST
27084: PPUSH
27085: CALL_OW 69
27089: PPUSH
27090: LD_VAR 0 2
27094: PPUSH
27095: CALL_OW 74
27099: PPUSH
27100: CALL_OW 115
// end ;
27104: GO 27031
27106: POP
27107: POP
// until not tmp ;
27108: LD_VAR 0 3
27112: NOT
27113: IFFALSE 27014
// end ;
27115: PPOPN 3
27117: END
// every 0 0$1 trigger StreamModeActive and sTroll do
27118: LD_EXP 70
27122: PUSH
27123: LD_EXP 95
27127: AND
27128: IFFALSE 27182
27130: GO 27132
27132: DISABLE
// begin ToLua ( displayTroll(); ) ;
27133: LD_STRING displayTroll();
27135: PPUSH
27136: CALL_OW 559
// wait ( 3 3$00 ) ;
27140: LD_INT 6300
27142: PPUSH
27143: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27147: LD_STRING hideTroll();
27149: PPUSH
27150: CALL_OW 559
// wait ( 1 1$00 ) ;
27154: LD_INT 2100
27156: PPUSH
27157: CALL_OW 67
// ToLua ( displayTroll(); ) ;
27161: LD_STRING displayTroll();
27163: PPUSH
27164: CALL_OW 559
// wait ( 1 1$00 ) ;
27168: LD_INT 2100
27170: PPUSH
27171: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27175: LD_STRING hideTroll();
27177: PPUSH
27178: CALL_OW 559
// end ;
27182: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
27183: LD_EXP 70
27187: PUSH
27188: LD_EXP 96
27192: AND
27193: IFFALSE 27256
27195: GO 27197
27197: DISABLE
27198: LD_INT 0
27200: PPUSH
// begin p := 0 ;
27201: LD_ADDR_VAR 0 1
27205: PUSH
27206: LD_INT 0
27208: ST_TO_ADDR
// repeat game_speed := 1 ;
27209: LD_ADDR_OWVAR 65
27213: PUSH
27214: LD_INT 1
27216: ST_TO_ADDR
// wait ( 0 0$1 ) ;
27217: LD_INT 35
27219: PPUSH
27220: CALL_OW 67
// p := p + 1 ;
27224: LD_ADDR_VAR 0 1
27228: PUSH
27229: LD_VAR 0 1
27233: PUSH
27234: LD_INT 1
27236: PLUS
27237: ST_TO_ADDR
// until p >= 60 ;
27238: LD_VAR 0 1
27242: PUSH
27243: LD_INT 60
27245: GREATEREQUAL
27246: IFFALSE 27209
// game_speed := 4 ;
27248: LD_ADDR_OWVAR 65
27252: PUSH
27253: LD_INT 4
27255: ST_TO_ADDR
// end ;
27256: PPOPN 1
27258: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
27259: LD_EXP 70
27263: PUSH
27264: LD_EXP 97
27268: AND
27269: IFFALSE 27415
27271: GO 27273
27273: DISABLE
27274: LD_INT 0
27276: PPUSH
27277: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27278: LD_ADDR_VAR 0 1
27282: PUSH
27283: LD_INT 22
27285: PUSH
27286: LD_OWVAR 2
27290: PUSH
27291: EMPTY
27292: LIST
27293: LIST
27294: PUSH
27295: LD_INT 2
27297: PUSH
27298: LD_INT 30
27300: PUSH
27301: LD_INT 0
27303: PUSH
27304: EMPTY
27305: LIST
27306: LIST
27307: PUSH
27308: LD_INT 30
27310: PUSH
27311: LD_INT 1
27313: PUSH
27314: EMPTY
27315: LIST
27316: LIST
27317: PUSH
27318: EMPTY
27319: LIST
27320: LIST
27321: LIST
27322: PUSH
27323: EMPTY
27324: LIST
27325: LIST
27326: PPUSH
27327: CALL_OW 69
27331: ST_TO_ADDR
// if not depot then
27332: LD_VAR 0 1
27336: NOT
27337: IFFALSE 27341
// exit ;
27339: GO 27415
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
27341: LD_ADDR_VAR 0 2
27345: PUSH
27346: LD_VAR 0 1
27350: PUSH
27351: LD_INT 1
27353: PPUSH
27354: LD_VAR 0 1
27358: PPUSH
27359: CALL_OW 12
27363: ARRAY
27364: PPUSH
27365: CALL_OW 274
27369: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
27370: LD_VAR 0 2
27374: PPUSH
27375: LD_INT 1
27377: PPUSH
27378: LD_INT 0
27380: PPUSH
27381: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
27385: LD_VAR 0 2
27389: PPUSH
27390: LD_INT 2
27392: PPUSH
27393: LD_INT 0
27395: PPUSH
27396: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
27400: LD_VAR 0 2
27404: PPUSH
27405: LD_INT 3
27407: PPUSH
27408: LD_INT 0
27410: PPUSH
27411: CALL_OW 277
// end ;
27415: PPOPN 2
27417: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
27418: LD_EXP 70
27422: PUSH
27423: LD_EXP 98
27427: AND
27428: IFFALSE 27525
27430: GO 27432
27432: DISABLE
27433: LD_INT 0
27435: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27436: LD_ADDR_VAR 0 1
27440: PUSH
27441: LD_INT 22
27443: PUSH
27444: LD_OWVAR 2
27448: PUSH
27449: EMPTY
27450: LIST
27451: LIST
27452: PUSH
27453: LD_INT 21
27455: PUSH
27456: LD_INT 1
27458: PUSH
27459: EMPTY
27460: LIST
27461: LIST
27462: PUSH
27463: LD_INT 3
27465: PUSH
27466: LD_INT 23
27468: PUSH
27469: LD_INT 0
27471: PUSH
27472: EMPTY
27473: LIST
27474: LIST
27475: PUSH
27476: EMPTY
27477: LIST
27478: LIST
27479: PUSH
27480: EMPTY
27481: LIST
27482: LIST
27483: LIST
27484: PPUSH
27485: CALL_OW 69
27489: ST_TO_ADDR
// if not tmp then
27490: LD_VAR 0 1
27494: NOT
27495: IFFALSE 27499
// exit ;
27497: GO 27525
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
27499: LD_VAR 0 1
27503: PUSH
27504: LD_INT 1
27506: PPUSH
27507: LD_VAR 0 1
27511: PPUSH
27512: CALL_OW 12
27516: ARRAY
27517: PPUSH
27518: LD_INT 200
27520: PPUSH
27521: CALL_OW 234
// end ;
27525: PPOPN 1
27527: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
27528: LD_EXP 70
27532: PUSH
27533: LD_EXP 99
27537: AND
27538: IFFALSE 27617
27540: GO 27542
27542: DISABLE
27543: LD_INT 0
27545: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
27546: LD_ADDR_VAR 0 1
27550: PUSH
27551: LD_INT 22
27553: PUSH
27554: LD_OWVAR 2
27558: PUSH
27559: EMPTY
27560: LIST
27561: LIST
27562: PUSH
27563: LD_INT 21
27565: PUSH
27566: LD_INT 2
27568: PUSH
27569: EMPTY
27570: LIST
27571: LIST
27572: PUSH
27573: EMPTY
27574: LIST
27575: LIST
27576: PPUSH
27577: CALL_OW 69
27581: ST_TO_ADDR
// if not tmp then
27582: LD_VAR 0 1
27586: NOT
27587: IFFALSE 27591
// exit ;
27589: GO 27617
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
27591: LD_VAR 0 1
27595: PUSH
27596: LD_INT 1
27598: PPUSH
27599: LD_VAR 0 1
27603: PPUSH
27604: CALL_OW 12
27608: ARRAY
27609: PPUSH
27610: LD_INT 60
27612: PPUSH
27613: CALL_OW 234
// end ;
27617: PPOPN 1
27619: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
27620: LD_EXP 70
27624: PUSH
27625: LD_EXP 100
27629: AND
27630: IFFALSE 27729
27632: GO 27634
27634: DISABLE
27635: LD_INT 0
27637: PPUSH
27638: PPUSH
// begin enable ;
27639: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
27640: LD_ADDR_VAR 0 1
27644: PUSH
27645: LD_INT 22
27647: PUSH
27648: LD_OWVAR 2
27652: PUSH
27653: EMPTY
27654: LIST
27655: LIST
27656: PUSH
27657: LD_INT 61
27659: PUSH
27660: EMPTY
27661: LIST
27662: PUSH
27663: LD_INT 33
27665: PUSH
27666: LD_INT 2
27668: PUSH
27669: EMPTY
27670: LIST
27671: LIST
27672: PUSH
27673: EMPTY
27674: LIST
27675: LIST
27676: LIST
27677: PPUSH
27678: CALL_OW 69
27682: ST_TO_ADDR
// if not tmp then
27683: LD_VAR 0 1
27687: NOT
27688: IFFALSE 27692
// exit ;
27690: GO 27729
// for i in tmp do
27692: LD_ADDR_VAR 0 2
27696: PUSH
27697: LD_VAR 0 1
27701: PUSH
27702: FOR_IN
27703: IFFALSE 27727
// if IsControledBy ( i ) then
27705: LD_VAR 0 2
27709: PPUSH
27710: CALL_OW 312
27714: IFFALSE 27725
// ComUnlink ( i ) ;
27716: LD_VAR 0 2
27720: PPUSH
27721: CALL_OW 136
27725: GO 27702
27727: POP
27728: POP
// end ;
27729: PPOPN 2
27731: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
27732: LD_EXP 70
27736: PUSH
27737: LD_EXP 101
27741: AND
27742: IFFALSE 27882
27744: GO 27746
27746: DISABLE
27747: LD_INT 0
27749: PPUSH
27750: PPUSH
// begin ToLua ( displayPowell(); ) ;
27751: LD_STRING displayPowell();
27753: PPUSH
27754: CALL_OW 559
// uc_side := 0 ;
27758: LD_ADDR_OWVAR 20
27762: PUSH
27763: LD_INT 0
27765: ST_TO_ADDR
// uc_nation := 2 ;
27766: LD_ADDR_OWVAR 21
27770: PUSH
27771: LD_INT 2
27773: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
27774: LD_ADDR_OWVAR 37
27778: PUSH
27779: LD_INT 14
27781: ST_TO_ADDR
// vc_engine := engine_siberite ;
27782: LD_ADDR_OWVAR 39
27786: PUSH
27787: LD_INT 3
27789: ST_TO_ADDR
// vc_control := control_apeman ;
27790: LD_ADDR_OWVAR 38
27794: PUSH
27795: LD_INT 5
27797: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
27798: LD_ADDR_OWVAR 40
27802: PUSH
27803: LD_INT 29
27805: ST_TO_ADDR
// un := CreateVehicle ;
27806: LD_ADDR_VAR 0 2
27810: PUSH
27811: CALL_OW 45
27815: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27816: LD_VAR 0 2
27820: PPUSH
27821: LD_INT 1
27823: PPUSH
27824: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
27828: LD_INT 35
27830: PPUSH
27831: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
27835: LD_VAR 0 2
27839: PPUSH
27840: LD_INT 22
27842: PUSH
27843: LD_OWVAR 2
27847: PUSH
27848: EMPTY
27849: LIST
27850: LIST
27851: PPUSH
27852: CALL_OW 69
27856: PPUSH
27857: LD_VAR 0 2
27861: PPUSH
27862: CALL_OW 74
27866: PPUSH
27867: CALL_OW 115
// until IsDead ( un ) ;
27871: LD_VAR 0 2
27875: PPUSH
27876: CALL_OW 301
27880: IFFALSE 27828
// end ;
27882: PPOPN 2
27884: END
// every 0 0$1 trigger StreamModeActive and sStu do
27885: LD_EXP 70
27889: PUSH
27890: LD_EXP 109
27894: AND
27895: IFFALSE 27911
27897: GO 27899
27899: DISABLE
// begin ToLua ( displayStucuk(); ) ;
27900: LD_STRING displayStucuk();
27902: PPUSH
27903: CALL_OW 559
// ResetFog ;
27907: CALL_OW 335
// end ;
27911: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
27912: LD_EXP 70
27916: PUSH
27917: LD_EXP 102
27921: AND
27922: IFFALSE 28063
27924: GO 27926
27926: DISABLE
27927: LD_INT 0
27929: PPUSH
27930: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27931: LD_ADDR_VAR 0 2
27935: PUSH
27936: LD_INT 22
27938: PUSH
27939: LD_OWVAR 2
27943: PUSH
27944: EMPTY
27945: LIST
27946: LIST
27947: PUSH
27948: LD_INT 21
27950: PUSH
27951: LD_INT 1
27953: PUSH
27954: EMPTY
27955: LIST
27956: LIST
27957: PUSH
27958: EMPTY
27959: LIST
27960: LIST
27961: PPUSH
27962: CALL_OW 69
27966: ST_TO_ADDR
// if not tmp then
27967: LD_VAR 0 2
27971: NOT
27972: IFFALSE 27976
// exit ;
27974: GO 28063
// un := tmp [ rand ( 1 , tmp ) ] ;
27976: LD_ADDR_VAR 0 1
27980: PUSH
27981: LD_VAR 0 2
27985: PUSH
27986: LD_INT 1
27988: PPUSH
27989: LD_VAR 0 2
27993: PPUSH
27994: CALL_OW 12
27998: ARRAY
27999: ST_TO_ADDR
// SetSide ( un , 0 ) ;
28000: LD_VAR 0 1
28004: PPUSH
28005: LD_INT 0
28007: PPUSH
28008: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
28012: LD_VAR 0 1
28016: PPUSH
28017: LD_OWVAR 3
28021: PUSH
28022: LD_VAR 0 1
28026: DIFF
28027: PPUSH
28028: LD_VAR 0 1
28032: PPUSH
28033: CALL_OW 74
28037: PPUSH
28038: CALL_OW 115
// wait ( 0 0$20 ) ;
28042: LD_INT 700
28044: PPUSH
28045: CALL_OW 67
// SetSide ( un , your_side ) ;
28049: LD_VAR 0 1
28053: PPUSH
28054: LD_OWVAR 2
28058: PPUSH
28059: CALL_OW 235
// end ;
28063: PPOPN 2
28065: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
28066: LD_EXP 70
28070: PUSH
28071: LD_EXP 103
28075: AND
28076: IFFALSE 28182
28078: GO 28080
28080: DISABLE
28081: LD_INT 0
28083: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28084: LD_ADDR_VAR 0 1
28088: PUSH
28089: LD_INT 22
28091: PUSH
28092: LD_OWVAR 2
28096: PUSH
28097: EMPTY
28098: LIST
28099: LIST
28100: PUSH
28101: LD_INT 2
28103: PUSH
28104: LD_INT 30
28106: PUSH
28107: LD_INT 0
28109: PUSH
28110: EMPTY
28111: LIST
28112: LIST
28113: PUSH
28114: LD_INT 30
28116: PUSH
28117: LD_INT 1
28119: PUSH
28120: EMPTY
28121: LIST
28122: LIST
28123: PUSH
28124: EMPTY
28125: LIST
28126: LIST
28127: LIST
28128: PUSH
28129: EMPTY
28130: LIST
28131: LIST
28132: PPUSH
28133: CALL_OW 69
28137: ST_TO_ADDR
// if not depot then
28138: LD_VAR 0 1
28142: NOT
28143: IFFALSE 28147
// exit ;
28145: GO 28182
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
28147: LD_VAR 0 1
28151: PUSH
28152: LD_INT 1
28154: ARRAY
28155: PPUSH
28156: CALL_OW 250
28160: PPUSH
28161: LD_VAR 0 1
28165: PUSH
28166: LD_INT 1
28168: ARRAY
28169: PPUSH
28170: CALL_OW 251
28174: PPUSH
28175: LD_INT 70
28177: PPUSH
28178: CALL_OW 495
// end ;
28182: PPOPN 1
28184: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
28185: LD_EXP 70
28189: PUSH
28190: LD_EXP 104
28194: AND
28195: IFFALSE 28406
28197: GO 28199
28199: DISABLE
28200: LD_INT 0
28202: PPUSH
28203: PPUSH
28204: PPUSH
28205: PPUSH
28206: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28207: LD_ADDR_VAR 0 5
28211: PUSH
28212: LD_INT 22
28214: PUSH
28215: LD_OWVAR 2
28219: PUSH
28220: EMPTY
28221: LIST
28222: LIST
28223: PUSH
28224: LD_INT 21
28226: PUSH
28227: LD_INT 1
28229: PUSH
28230: EMPTY
28231: LIST
28232: LIST
28233: PUSH
28234: EMPTY
28235: LIST
28236: LIST
28237: PPUSH
28238: CALL_OW 69
28242: ST_TO_ADDR
// if not tmp then
28243: LD_VAR 0 5
28247: NOT
28248: IFFALSE 28252
// exit ;
28250: GO 28406
// for i in tmp do
28252: LD_ADDR_VAR 0 1
28256: PUSH
28257: LD_VAR 0 5
28261: PUSH
28262: FOR_IN
28263: IFFALSE 28404
// begin d := rand ( 0 , 5 ) ;
28265: LD_ADDR_VAR 0 4
28269: PUSH
28270: LD_INT 0
28272: PPUSH
28273: LD_INT 5
28275: PPUSH
28276: CALL_OW 12
28280: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
28281: LD_ADDR_VAR 0 2
28285: PUSH
28286: LD_VAR 0 1
28290: PPUSH
28291: CALL_OW 250
28295: PPUSH
28296: LD_VAR 0 4
28300: PPUSH
28301: LD_INT 3
28303: PPUSH
28304: LD_INT 12
28306: PPUSH
28307: CALL_OW 12
28311: PPUSH
28312: CALL_OW 272
28316: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
28317: LD_ADDR_VAR 0 3
28321: PUSH
28322: LD_VAR 0 1
28326: PPUSH
28327: CALL_OW 251
28331: PPUSH
28332: LD_VAR 0 4
28336: PPUSH
28337: LD_INT 3
28339: PPUSH
28340: LD_INT 12
28342: PPUSH
28343: CALL_OW 12
28347: PPUSH
28348: CALL_OW 273
28352: ST_TO_ADDR
// if ValidHex ( x , y ) then
28353: LD_VAR 0 2
28357: PPUSH
28358: LD_VAR 0 3
28362: PPUSH
28363: CALL_OW 488
28367: IFFALSE 28402
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
28369: LD_VAR 0 1
28373: PPUSH
28374: LD_VAR 0 2
28378: PPUSH
28379: LD_VAR 0 3
28383: PPUSH
28384: LD_INT 3
28386: PPUSH
28387: LD_INT 6
28389: PPUSH
28390: CALL_OW 12
28394: PPUSH
28395: LD_INT 1
28397: PPUSH
28398: CALL_OW 483
// end ;
28402: GO 28262
28404: POP
28405: POP
// end ;
28406: PPOPN 5
28408: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
28409: LD_EXP 70
28413: PUSH
28414: LD_EXP 105
28418: AND
28419: IFFALSE 28513
28421: GO 28423
28423: DISABLE
28424: LD_INT 0
28426: PPUSH
28427: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
28428: LD_ADDR_VAR 0 2
28432: PUSH
28433: LD_INT 22
28435: PUSH
28436: LD_OWVAR 2
28440: PUSH
28441: EMPTY
28442: LIST
28443: LIST
28444: PUSH
28445: LD_INT 32
28447: PUSH
28448: LD_INT 1
28450: PUSH
28451: EMPTY
28452: LIST
28453: LIST
28454: PUSH
28455: LD_INT 21
28457: PUSH
28458: LD_INT 2
28460: PUSH
28461: EMPTY
28462: LIST
28463: LIST
28464: PUSH
28465: EMPTY
28466: LIST
28467: LIST
28468: LIST
28469: PPUSH
28470: CALL_OW 69
28474: ST_TO_ADDR
// if not tmp then
28475: LD_VAR 0 2
28479: NOT
28480: IFFALSE 28484
// exit ;
28482: GO 28513
// for i in tmp do
28484: LD_ADDR_VAR 0 1
28488: PUSH
28489: LD_VAR 0 2
28493: PUSH
28494: FOR_IN
28495: IFFALSE 28511
// SetFuel ( i , 0 ) ;
28497: LD_VAR 0 1
28501: PPUSH
28502: LD_INT 0
28504: PPUSH
28505: CALL_OW 240
28509: GO 28494
28511: POP
28512: POP
// end ;
28513: PPOPN 2
28515: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
28516: LD_EXP 70
28520: PUSH
28521: LD_EXP 106
28525: AND
28526: IFFALSE 28592
28528: GO 28530
28530: DISABLE
28531: LD_INT 0
28533: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
28534: LD_ADDR_VAR 0 1
28538: PUSH
28539: LD_INT 22
28541: PUSH
28542: LD_OWVAR 2
28546: PUSH
28547: EMPTY
28548: LIST
28549: LIST
28550: PUSH
28551: LD_INT 30
28553: PUSH
28554: LD_INT 29
28556: PUSH
28557: EMPTY
28558: LIST
28559: LIST
28560: PUSH
28561: EMPTY
28562: LIST
28563: LIST
28564: PPUSH
28565: CALL_OW 69
28569: ST_TO_ADDR
// if not tmp then
28570: LD_VAR 0 1
28574: NOT
28575: IFFALSE 28579
// exit ;
28577: GO 28592
// DestroyUnit ( tmp [ 1 ] ) ;
28579: LD_VAR 0 1
28583: PUSH
28584: LD_INT 1
28586: ARRAY
28587: PPUSH
28588: CALL_OW 65
// end ;
28592: PPOPN 1
28594: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
28595: LD_EXP 70
28599: PUSH
28600: LD_EXP 108
28604: AND
28605: IFFALSE 28734
28607: GO 28609
28609: DISABLE
28610: LD_INT 0
28612: PPUSH
// begin uc_side := 0 ;
28613: LD_ADDR_OWVAR 20
28617: PUSH
28618: LD_INT 0
28620: ST_TO_ADDR
// uc_nation := nation_arabian ;
28621: LD_ADDR_OWVAR 21
28625: PUSH
28626: LD_INT 2
28628: ST_TO_ADDR
// hc_gallery :=  ;
28629: LD_ADDR_OWVAR 33
28633: PUSH
28634: LD_STRING 
28636: ST_TO_ADDR
// hc_name :=  ;
28637: LD_ADDR_OWVAR 26
28641: PUSH
28642: LD_STRING 
28644: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
28645: LD_INT 1
28647: PPUSH
28648: LD_INT 11
28650: PPUSH
28651: LD_INT 10
28653: PPUSH
28654: CALL_OW 380
// un := CreateHuman ;
28658: LD_ADDR_VAR 0 1
28662: PUSH
28663: CALL_OW 44
28667: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28668: LD_VAR 0 1
28672: PPUSH
28673: LD_INT 1
28675: PPUSH
28676: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28680: LD_INT 35
28682: PPUSH
28683: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28687: LD_VAR 0 1
28691: PPUSH
28692: LD_INT 22
28694: PUSH
28695: LD_OWVAR 2
28699: PUSH
28700: EMPTY
28701: LIST
28702: LIST
28703: PPUSH
28704: CALL_OW 69
28708: PPUSH
28709: LD_VAR 0 1
28713: PPUSH
28714: CALL_OW 74
28718: PPUSH
28719: CALL_OW 115
// until IsDead ( un ) ;
28723: LD_VAR 0 1
28727: PPUSH
28728: CALL_OW 301
28732: IFFALSE 28680
// end ;
28734: PPOPN 1
28736: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
28737: LD_EXP 70
28741: PUSH
28742: LD_EXP 110
28746: AND
28747: IFFALSE 28759
28749: GO 28751
28751: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
28752: LD_STRING earthquake(getX(game), 0, 32)
28754: PPUSH
28755: CALL_OW 559
28759: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
28760: LD_EXP 70
28764: PUSH
28765: LD_EXP 111
28769: AND
28770: IFFALSE 28861
28772: GO 28774
28774: DISABLE
28775: LD_INT 0
28777: PPUSH
// begin enable ;
28778: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
28779: LD_ADDR_VAR 0 1
28783: PUSH
28784: LD_INT 22
28786: PUSH
28787: LD_OWVAR 2
28791: PUSH
28792: EMPTY
28793: LIST
28794: LIST
28795: PUSH
28796: LD_INT 21
28798: PUSH
28799: LD_INT 2
28801: PUSH
28802: EMPTY
28803: LIST
28804: LIST
28805: PUSH
28806: LD_INT 33
28808: PUSH
28809: LD_INT 3
28811: PUSH
28812: EMPTY
28813: LIST
28814: LIST
28815: PUSH
28816: EMPTY
28817: LIST
28818: LIST
28819: LIST
28820: PPUSH
28821: CALL_OW 69
28825: ST_TO_ADDR
// if not tmp then
28826: LD_VAR 0 1
28830: NOT
28831: IFFALSE 28835
// exit ;
28833: GO 28861
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
28835: LD_VAR 0 1
28839: PUSH
28840: LD_INT 1
28842: PPUSH
28843: LD_VAR 0 1
28847: PPUSH
28848: CALL_OW 12
28852: ARRAY
28853: PPUSH
28854: LD_INT 1
28856: PPUSH
28857: CALL_OW 234
// end ;
28861: PPOPN 1
28863: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
28864: LD_EXP 70
28868: PUSH
28869: LD_EXP 112
28873: AND
28874: IFFALSE 29015
28876: GO 28878
28878: DISABLE
28879: LD_INT 0
28881: PPUSH
28882: PPUSH
28883: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28884: LD_ADDR_VAR 0 3
28888: PUSH
28889: LD_INT 22
28891: PUSH
28892: LD_OWVAR 2
28896: PUSH
28897: EMPTY
28898: LIST
28899: LIST
28900: PUSH
28901: LD_INT 25
28903: PUSH
28904: LD_INT 1
28906: PUSH
28907: EMPTY
28908: LIST
28909: LIST
28910: PUSH
28911: EMPTY
28912: LIST
28913: LIST
28914: PPUSH
28915: CALL_OW 69
28919: ST_TO_ADDR
// if not tmp then
28920: LD_VAR 0 3
28924: NOT
28925: IFFALSE 28929
// exit ;
28927: GO 29015
// un := tmp [ rand ( 1 , tmp ) ] ;
28929: LD_ADDR_VAR 0 2
28933: PUSH
28934: LD_VAR 0 3
28938: PUSH
28939: LD_INT 1
28941: PPUSH
28942: LD_VAR 0 3
28946: PPUSH
28947: CALL_OW 12
28951: ARRAY
28952: ST_TO_ADDR
// if Crawls ( un ) then
28953: LD_VAR 0 2
28957: PPUSH
28958: CALL_OW 318
28962: IFFALSE 28973
// ComWalk ( un ) ;
28964: LD_VAR 0 2
28968: PPUSH
28969: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
28973: LD_VAR 0 2
28977: PPUSH
28978: LD_INT 9
28980: PPUSH
28981: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
28985: LD_INT 28
28987: PPUSH
28988: LD_OWVAR 2
28992: PPUSH
28993: LD_INT 2
28995: PPUSH
28996: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
29000: LD_INT 29
29002: PPUSH
29003: LD_OWVAR 2
29007: PPUSH
29008: LD_INT 2
29010: PPUSH
29011: CALL_OW 322
// end ;
29015: PPOPN 3
29017: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
29018: LD_EXP 70
29022: PUSH
29023: LD_EXP 113
29027: AND
29028: IFFALSE 29139
29030: GO 29032
29032: DISABLE
29033: LD_INT 0
29035: PPUSH
29036: PPUSH
29037: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29038: LD_ADDR_VAR 0 3
29042: PUSH
29043: LD_INT 22
29045: PUSH
29046: LD_OWVAR 2
29050: PUSH
29051: EMPTY
29052: LIST
29053: LIST
29054: PUSH
29055: LD_INT 25
29057: PUSH
29058: LD_INT 1
29060: PUSH
29061: EMPTY
29062: LIST
29063: LIST
29064: PUSH
29065: EMPTY
29066: LIST
29067: LIST
29068: PPUSH
29069: CALL_OW 69
29073: ST_TO_ADDR
// if not tmp then
29074: LD_VAR 0 3
29078: NOT
29079: IFFALSE 29083
// exit ;
29081: GO 29139
// un := tmp [ rand ( 1 , tmp ) ] ;
29083: LD_ADDR_VAR 0 2
29087: PUSH
29088: LD_VAR 0 3
29092: PUSH
29093: LD_INT 1
29095: PPUSH
29096: LD_VAR 0 3
29100: PPUSH
29101: CALL_OW 12
29105: ARRAY
29106: ST_TO_ADDR
// if Crawls ( un ) then
29107: LD_VAR 0 2
29111: PPUSH
29112: CALL_OW 318
29116: IFFALSE 29127
// ComWalk ( un ) ;
29118: LD_VAR 0 2
29122: PPUSH
29123: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29127: LD_VAR 0 2
29131: PPUSH
29132: LD_INT 8
29134: PPUSH
29135: CALL_OW 336
// end ;
29139: PPOPN 3
29141: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
29142: LD_EXP 70
29146: PUSH
29147: LD_EXP 114
29151: AND
29152: IFFALSE 29296
29154: GO 29156
29156: DISABLE
29157: LD_INT 0
29159: PPUSH
29160: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
29161: LD_ADDR_VAR 0 2
29165: PUSH
29166: LD_INT 22
29168: PUSH
29169: LD_OWVAR 2
29173: PUSH
29174: EMPTY
29175: LIST
29176: LIST
29177: PUSH
29178: LD_INT 21
29180: PUSH
29181: LD_INT 2
29183: PUSH
29184: EMPTY
29185: LIST
29186: LIST
29187: PUSH
29188: LD_INT 2
29190: PUSH
29191: LD_INT 34
29193: PUSH
29194: LD_INT 12
29196: PUSH
29197: EMPTY
29198: LIST
29199: LIST
29200: PUSH
29201: LD_INT 34
29203: PUSH
29204: LD_INT 51
29206: PUSH
29207: EMPTY
29208: LIST
29209: LIST
29210: PUSH
29211: LD_INT 34
29213: PUSH
29214: LD_INT 32
29216: PUSH
29217: EMPTY
29218: LIST
29219: LIST
29220: PUSH
29221: EMPTY
29222: LIST
29223: LIST
29224: LIST
29225: LIST
29226: PUSH
29227: EMPTY
29228: LIST
29229: LIST
29230: LIST
29231: PPUSH
29232: CALL_OW 69
29236: ST_TO_ADDR
// if not tmp then
29237: LD_VAR 0 2
29241: NOT
29242: IFFALSE 29246
// exit ;
29244: GO 29296
// for i in tmp do
29246: LD_ADDR_VAR 0 1
29250: PUSH
29251: LD_VAR 0 2
29255: PUSH
29256: FOR_IN
29257: IFFALSE 29294
// if GetCargo ( i , mat_artifact ) = 0 then
29259: LD_VAR 0 1
29263: PPUSH
29264: LD_INT 4
29266: PPUSH
29267: CALL_OW 289
29271: PUSH
29272: LD_INT 0
29274: EQUAL
29275: IFFALSE 29292
// SetCargo ( i , mat_siberit , 100 ) ;
29277: LD_VAR 0 1
29281: PPUSH
29282: LD_INT 3
29284: PPUSH
29285: LD_INT 100
29287: PPUSH
29288: CALL_OW 290
29292: GO 29256
29294: POP
29295: POP
// end ;
29296: PPOPN 2
29298: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
29299: LD_EXP 70
29303: PUSH
29304: LD_EXP 115
29308: AND
29309: IFFALSE 29492
29311: GO 29313
29313: DISABLE
29314: LD_INT 0
29316: PPUSH
29317: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29318: LD_ADDR_VAR 0 2
29322: PUSH
29323: LD_INT 22
29325: PUSH
29326: LD_OWVAR 2
29330: PUSH
29331: EMPTY
29332: LIST
29333: LIST
29334: PPUSH
29335: CALL_OW 69
29339: ST_TO_ADDR
// if not tmp then
29340: LD_VAR 0 2
29344: NOT
29345: IFFALSE 29349
// exit ;
29347: GO 29492
// for i := 1 to 2 do
29349: LD_ADDR_VAR 0 1
29353: PUSH
29354: DOUBLE
29355: LD_INT 1
29357: DEC
29358: ST_TO_ADDR
29359: LD_INT 2
29361: PUSH
29362: FOR_TO
29363: IFFALSE 29490
// begin uc_side := your_side ;
29365: LD_ADDR_OWVAR 20
29369: PUSH
29370: LD_OWVAR 2
29374: ST_TO_ADDR
// uc_nation := nation_american ;
29375: LD_ADDR_OWVAR 21
29379: PUSH
29380: LD_INT 1
29382: ST_TO_ADDR
// vc_chassis := us_morphling ;
29383: LD_ADDR_OWVAR 37
29387: PUSH
29388: LD_INT 5
29390: ST_TO_ADDR
// vc_engine := engine_siberite ;
29391: LD_ADDR_OWVAR 39
29395: PUSH
29396: LD_INT 3
29398: ST_TO_ADDR
// vc_control := control_computer ;
29399: LD_ADDR_OWVAR 38
29403: PUSH
29404: LD_INT 3
29406: ST_TO_ADDR
// vc_weapon := us_double_laser ;
29407: LD_ADDR_OWVAR 40
29411: PUSH
29412: LD_INT 10
29414: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
29415: LD_VAR 0 2
29419: PUSH
29420: LD_INT 1
29422: ARRAY
29423: PPUSH
29424: CALL_OW 310
29428: NOT
29429: IFFALSE 29476
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
29431: CALL_OW 45
29435: PPUSH
29436: LD_VAR 0 2
29440: PUSH
29441: LD_INT 1
29443: ARRAY
29444: PPUSH
29445: CALL_OW 250
29449: PPUSH
29450: LD_VAR 0 2
29454: PUSH
29455: LD_INT 1
29457: ARRAY
29458: PPUSH
29459: CALL_OW 251
29463: PPUSH
29464: LD_INT 12
29466: PPUSH
29467: LD_INT 1
29469: PPUSH
29470: CALL_OW 50
29474: GO 29488
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
29476: CALL_OW 45
29480: PPUSH
29481: LD_INT 1
29483: PPUSH
29484: CALL_OW 51
// end ;
29488: GO 29362
29490: POP
29491: POP
// end ;
29492: PPOPN 2
29494: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
29495: LD_EXP 70
29499: PUSH
29500: LD_EXP 116
29504: AND
29505: IFFALSE 29727
29507: GO 29509
29509: DISABLE
29510: LD_INT 0
29512: PPUSH
29513: PPUSH
29514: PPUSH
29515: PPUSH
29516: PPUSH
29517: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29518: LD_ADDR_VAR 0 6
29522: PUSH
29523: LD_INT 22
29525: PUSH
29526: LD_OWVAR 2
29530: PUSH
29531: EMPTY
29532: LIST
29533: LIST
29534: PUSH
29535: LD_INT 21
29537: PUSH
29538: LD_INT 1
29540: PUSH
29541: EMPTY
29542: LIST
29543: LIST
29544: PUSH
29545: LD_INT 3
29547: PUSH
29548: LD_INT 23
29550: PUSH
29551: LD_INT 0
29553: PUSH
29554: EMPTY
29555: LIST
29556: LIST
29557: PUSH
29558: EMPTY
29559: LIST
29560: LIST
29561: PUSH
29562: EMPTY
29563: LIST
29564: LIST
29565: LIST
29566: PPUSH
29567: CALL_OW 69
29571: ST_TO_ADDR
// if not tmp then
29572: LD_VAR 0 6
29576: NOT
29577: IFFALSE 29581
// exit ;
29579: GO 29727
// s1 := rand ( 1 , 4 ) ;
29581: LD_ADDR_VAR 0 2
29585: PUSH
29586: LD_INT 1
29588: PPUSH
29589: LD_INT 4
29591: PPUSH
29592: CALL_OW 12
29596: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
29597: LD_ADDR_VAR 0 4
29601: PUSH
29602: LD_VAR 0 6
29606: PUSH
29607: LD_INT 1
29609: ARRAY
29610: PPUSH
29611: LD_VAR 0 2
29615: PPUSH
29616: CALL_OW 259
29620: ST_TO_ADDR
// if s1 = 1 then
29621: LD_VAR 0 2
29625: PUSH
29626: LD_INT 1
29628: EQUAL
29629: IFFALSE 29649
// s2 := rand ( 2 , 4 ) else
29631: LD_ADDR_VAR 0 3
29635: PUSH
29636: LD_INT 2
29638: PPUSH
29639: LD_INT 4
29641: PPUSH
29642: CALL_OW 12
29646: ST_TO_ADDR
29647: GO 29657
// s2 := 1 ;
29649: LD_ADDR_VAR 0 3
29653: PUSH
29654: LD_INT 1
29656: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
29657: LD_ADDR_VAR 0 5
29661: PUSH
29662: LD_VAR 0 6
29666: PUSH
29667: LD_INT 1
29669: ARRAY
29670: PPUSH
29671: LD_VAR 0 3
29675: PPUSH
29676: CALL_OW 259
29680: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
29681: LD_VAR 0 6
29685: PUSH
29686: LD_INT 1
29688: ARRAY
29689: PPUSH
29690: LD_VAR 0 2
29694: PPUSH
29695: LD_VAR 0 5
29699: PPUSH
29700: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
29704: LD_VAR 0 6
29708: PUSH
29709: LD_INT 1
29711: ARRAY
29712: PPUSH
29713: LD_VAR 0 3
29717: PPUSH
29718: LD_VAR 0 4
29722: PPUSH
29723: CALL_OW 237
// end ;
29727: PPOPN 6
29729: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
29730: LD_EXP 70
29734: PUSH
29735: LD_EXP 117
29739: AND
29740: IFFALSE 29819
29742: GO 29744
29744: DISABLE
29745: LD_INT 0
29747: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
29748: LD_ADDR_VAR 0 1
29752: PUSH
29753: LD_INT 22
29755: PUSH
29756: LD_OWVAR 2
29760: PUSH
29761: EMPTY
29762: LIST
29763: LIST
29764: PUSH
29765: LD_INT 30
29767: PUSH
29768: LD_INT 3
29770: PUSH
29771: EMPTY
29772: LIST
29773: LIST
29774: PUSH
29775: EMPTY
29776: LIST
29777: LIST
29778: PPUSH
29779: CALL_OW 69
29783: ST_TO_ADDR
// if not tmp then
29784: LD_VAR 0 1
29788: NOT
29789: IFFALSE 29793
// exit ;
29791: GO 29819
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29793: LD_VAR 0 1
29797: PUSH
29798: LD_INT 1
29800: PPUSH
29801: LD_VAR 0 1
29805: PPUSH
29806: CALL_OW 12
29810: ARRAY
29811: PPUSH
29812: LD_INT 1
29814: PPUSH
29815: CALL_OW 234
// end ;
29819: PPOPN 1
29821: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
29822: LD_EXP 70
29826: PUSH
29827: LD_EXP 118
29831: AND
29832: IFFALSE 29944
29834: GO 29836
29836: DISABLE
29837: LD_INT 0
29839: PPUSH
29840: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
29841: LD_ADDR_VAR 0 2
29845: PUSH
29846: LD_INT 22
29848: PUSH
29849: LD_OWVAR 2
29853: PUSH
29854: EMPTY
29855: LIST
29856: LIST
29857: PUSH
29858: LD_INT 2
29860: PUSH
29861: LD_INT 30
29863: PUSH
29864: LD_INT 27
29866: PUSH
29867: EMPTY
29868: LIST
29869: LIST
29870: PUSH
29871: LD_INT 30
29873: PUSH
29874: LD_INT 26
29876: PUSH
29877: EMPTY
29878: LIST
29879: LIST
29880: PUSH
29881: LD_INT 30
29883: PUSH
29884: LD_INT 28
29886: PUSH
29887: EMPTY
29888: LIST
29889: LIST
29890: PUSH
29891: EMPTY
29892: LIST
29893: LIST
29894: LIST
29895: LIST
29896: PUSH
29897: EMPTY
29898: LIST
29899: LIST
29900: PPUSH
29901: CALL_OW 69
29905: ST_TO_ADDR
// if not tmp then
29906: LD_VAR 0 2
29910: NOT
29911: IFFALSE 29915
// exit ;
29913: GO 29944
// for i in tmp do
29915: LD_ADDR_VAR 0 1
29919: PUSH
29920: LD_VAR 0 2
29924: PUSH
29925: FOR_IN
29926: IFFALSE 29942
// SetLives ( i , 1 ) ;
29928: LD_VAR 0 1
29932: PPUSH
29933: LD_INT 1
29935: PPUSH
29936: CALL_OW 234
29940: GO 29925
29942: POP
29943: POP
// end ;
29944: PPOPN 2
29946: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
29947: LD_EXP 70
29951: PUSH
29952: LD_EXP 119
29956: AND
29957: IFFALSE 30231
29959: GO 29961
29961: DISABLE
29962: LD_INT 0
29964: PPUSH
29965: PPUSH
29966: PPUSH
// begin i := rand ( 1 , 7 ) ;
29967: LD_ADDR_VAR 0 1
29971: PUSH
29972: LD_INT 1
29974: PPUSH
29975: LD_INT 7
29977: PPUSH
29978: CALL_OW 12
29982: ST_TO_ADDR
// case i of 1 :
29983: LD_VAR 0 1
29987: PUSH
29988: LD_INT 1
29990: DOUBLE
29991: EQUAL
29992: IFTRUE 29996
29994: GO 30006
29996: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
29997: LD_STRING earthquake(getX(game), 0, 32)
29999: PPUSH
30000: CALL_OW 559
30004: GO 30231
30006: LD_INT 2
30008: DOUBLE
30009: EQUAL
30010: IFTRUE 30014
30012: GO 30028
30014: POP
// begin ToLua ( displayStucuk(); ) ;
30015: LD_STRING displayStucuk();
30017: PPUSH
30018: CALL_OW 559
// ResetFog ;
30022: CALL_OW 335
// end ; 3 :
30026: GO 30231
30028: LD_INT 3
30030: DOUBLE
30031: EQUAL
30032: IFTRUE 30036
30034: GO 30140
30036: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30037: LD_ADDR_VAR 0 2
30041: PUSH
30042: LD_INT 22
30044: PUSH
30045: LD_OWVAR 2
30049: PUSH
30050: EMPTY
30051: LIST
30052: LIST
30053: PUSH
30054: LD_INT 25
30056: PUSH
30057: LD_INT 1
30059: PUSH
30060: EMPTY
30061: LIST
30062: LIST
30063: PUSH
30064: EMPTY
30065: LIST
30066: LIST
30067: PPUSH
30068: CALL_OW 69
30072: ST_TO_ADDR
// if not tmp then
30073: LD_VAR 0 2
30077: NOT
30078: IFFALSE 30082
// exit ;
30080: GO 30231
// un := tmp [ rand ( 1 , tmp ) ] ;
30082: LD_ADDR_VAR 0 3
30086: PUSH
30087: LD_VAR 0 2
30091: PUSH
30092: LD_INT 1
30094: PPUSH
30095: LD_VAR 0 2
30099: PPUSH
30100: CALL_OW 12
30104: ARRAY
30105: ST_TO_ADDR
// if Crawls ( un ) then
30106: LD_VAR 0 3
30110: PPUSH
30111: CALL_OW 318
30115: IFFALSE 30126
// ComWalk ( un ) ;
30117: LD_VAR 0 3
30121: PPUSH
30122: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30126: LD_VAR 0 3
30130: PPUSH
30131: LD_INT 8
30133: PPUSH
30134: CALL_OW 336
// end ; 4 :
30138: GO 30231
30140: LD_INT 4
30142: DOUBLE
30143: EQUAL
30144: IFTRUE 30148
30146: GO 30209
30148: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
30149: LD_ADDR_VAR 0 2
30153: PUSH
30154: LD_INT 22
30156: PUSH
30157: LD_OWVAR 2
30161: PUSH
30162: EMPTY
30163: LIST
30164: LIST
30165: PUSH
30166: LD_INT 30
30168: PUSH
30169: LD_INT 29
30171: PUSH
30172: EMPTY
30173: LIST
30174: LIST
30175: PUSH
30176: EMPTY
30177: LIST
30178: LIST
30179: PPUSH
30180: CALL_OW 69
30184: ST_TO_ADDR
// if not tmp then
30185: LD_VAR 0 2
30189: NOT
30190: IFFALSE 30194
// exit ;
30192: GO 30231
// DestroyUnit ( tmp [ 1 ] ) ;
30194: LD_VAR 0 2
30198: PUSH
30199: LD_INT 1
30201: ARRAY
30202: PPUSH
30203: CALL_OW 65
// end ; 5 .. 7 :
30207: GO 30231
30209: LD_INT 5
30211: DOUBLE
30212: GREATEREQUAL
30213: IFFALSE 30221
30215: LD_INT 7
30217: DOUBLE
30218: LESSEQUAL
30219: IFTRUE 30223
30221: GO 30230
30223: POP
// StreamSibBomb ; end ;
30224: CALL 26481 0 0
30228: GO 30231
30230: POP
// end ;
30231: PPOPN 3
30233: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
30234: LD_EXP 70
30238: PUSH
30239: LD_EXP 120
30243: AND
30244: IFFALSE 30400
30246: GO 30248
30248: DISABLE
30249: LD_INT 0
30251: PPUSH
30252: PPUSH
30253: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
30254: LD_ADDR_VAR 0 2
30258: PUSH
30259: LD_INT 81
30261: PUSH
30262: LD_OWVAR 2
30266: PUSH
30267: EMPTY
30268: LIST
30269: LIST
30270: PUSH
30271: LD_INT 2
30273: PUSH
30274: LD_INT 21
30276: PUSH
30277: LD_INT 1
30279: PUSH
30280: EMPTY
30281: LIST
30282: LIST
30283: PUSH
30284: LD_INT 21
30286: PUSH
30287: LD_INT 2
30289: PUSH
30290: EMPTY
30291: LIST
30292: LIST
30293: PUSH
30294: EMPTY
30295: LIST
30296: LIST
30297: LIST
30298: PUSH
30299: EMPTY
30300: LIST
30301: LIST
30302: PPUSH
30303: CALL_OW 69
30307: ST_TO_ADDR
// if not tmp then
30308: LD_VAR 0 2
30312: NOT
30313: IFFALSE 30317
// exit ;
30315: GO 30400
// p := 0 ;
30317: LD_ADDR_VAR 0 3
30321: PUSH
30322: LD_INT 0
30324: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30325: LD_INT 35
30327: PPUSH
30328: CALL_OW 67
// p := p + 1 ;
30332: LD_ADDR_VAR 0 3
30336: PUSH
30337: LD_VAR 0 3
30341: PUSH
30342: LD_INT 1
30344: PLUS
30345: ST_TO_ADDR
// for i in tmp do
30346: LD_ADDR_VAR 0 1
30350: PUSH
30351: LD_VAR 0 2
30355: PUSH
30356: FOR_IN
30357: IFFALSE 30388
// if GetLives ( i ) < 1000 then
30359: LD_VAR 0 1
30363: PPUSH
30364: CALL_OW 256
30368: PUSH
30369: LD_INT 1000
30371: LESS
30372: IFFALSE 30386
// SetLives ( i , 1000 ) ;
30374: LD_VAR 0 1
30378: PPUSH
30379: LD_INT 1000
30381: PPUSH
30382: CALL_OW 234
30386: GO 30356
30388: POP
30389: POP
// until p > 20 ;
30390: LD_VAR 0 3
30394: PUSH
30395: LD_INT 20
30397: GREATER
30398: IFFALSE 30325
// end ;
30400: PPOPN 3
30402: END
// every 0 0$1 trigger StreamModeActive and sTime do
30403: LD_EXP 70
30407: PUSH
30408: LD_EXP 121
30412: AND
30413: IFFALSE 30448
30415: GO 30417
30417: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
30418: LD_INT 28
30420: PPUSH
30421: LD_OWVAR 2
30425: PPUSH
30426: LD_INT 2
30428: PPUSH
30429: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
30433: LD_INT 30
30435: PPUSH
30436: LD_OWVAR 2
30440: PPUSH
30441: LD_INT 2
30443: PPUSH
30444: CALL_OW 322
// end ;
30448: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
30449: LD_EXP 70
30453: PUSH
30454: LD_EXP 122
30458: AND
30459: IFFALSE 30580
30461: GO 30463
30463: DISABLE
30464: LD_INT 0
30466: PPUSH
30467: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30468: LD_ADDR_VAR 0 2
30472: PUSH
30473: LD_INT 22
30475: PUSH
30476: LD_OWVAR 2
30480: PUSH
30481: EMPTY
30482: LIST
30483: LIST
30484: PUSH
30485: LD_INT 21
30487: PUSH
30488: LD_INT 1
30490: PUSH
30491: EMPTY
30492: LIST
30493: LIST
30494: PUSH
30495: LD_INT 3
30497: PUSH
30498: LD_INT 23
30500: PUSH
30501: LD_INT 0
30503: PUSH
30504: EMPTY
30505: LIST
30506: LIST
30507: PUSH
30508: EMPTY
30509: LIST
30510: LIST
30511: PUSH
30512: EMPTY
30513: LIST
30514: LIST
30515: LIST
30516: PPUSH
30517: CALL_OW 69
30521: ST_TO_ADDR
// if not tmp then
30522: LD_VAR 0 2
30526: NOT
30527: IFFALSE 30531
// exit ;
30529: GO 30580
// for i in tmp do
30531: LD_ADDR_VAR 0 1
30535: PUSH
30536: LD_VAR 0 2
30540: PUSH
30541: FOR_IN
30542: IFFALSE 30578
// begin if Crawls ( i ) then
30544: LD_VAR 0 1
30548: PPUSH
30549: CALL_OW 318
30553: IFFALSE 30564
// ComWalk ( i ) ;
30555: LD_VAR 0 1
30559: PPUSH
30560: CALL_OW 138
// SetClass ( i , 2 ) ;
30564: LD_VAR 0 1
30568: PPUSH
30569: LD_INT 2
30571: PPUSH
30572: CALL_OW 336
// end ;
30576: GO 30541
30578: POP
30579: POP
// end ;
30580: PPOPN 2
30582: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
30583: LD_EXP 70
30587: PUSH
30588: LD_EXP 123
30592: AND
30593: IFFALSE 30874
30595: GO 30597
30597: DISABLE
30598: LD_INT 0
30600: PPUSH
30601: PPUSH
30602: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
30603: LD_OWVAR 2
30607: PPUSH
30608: LD_INT 9
30610: PPUSH
30611: LD_INT 1
30613: PPUSH
30614: LD_INT 1
30616: PPUSH
30617: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
30621: LD_INT 9
30623: PPUSH
30624: LD_OWVAR 2
30628: PPUSH
30629: CALL_OW 343
// uc_side := 9 ;
30633: LD_ADDR_OWVAR 20
30637: PUSH
30638: LD_INT 9
30640: ST_TO_ADDR
// uc_nation := 2 ;
30641: LD_ADDR_OWVAR 21
30645: PUSH
30646: LD_INT 2
30648: ST_TO_ADDR
// hc_name := Dark Warrior ;
30649: LD_ADDR_OWVAR 26
30653: PUSH
30654: LD_STRING Dark Warrior
30656: ST_TO_ADDR
// hc_gallery :=  ;
30657: LD_ADDR_OWVAR 33
30661: PUSH
30662: LD_STRING 
30664: ST_TO_ADDR
// hc_noskilllimit := true ;
30665: LD_ADDR_OWVAR 76
30669: PUSH
30670: LD_INT 1
30672: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
30673: LD_ADDR_OWVAR 31
30677: PUSH
30678: LD_INT 30
30680: PUSH
30681: LD_INT 30
30683: PUSH
30684: LD_INT 30
30686: PUSH
30687: LD_INT 30
30689: PUSH
30690: EMPTY
30691: LIST
30692: LIST
30693: LIST
30694: LIST
30695: ST_TO_ADDR
// un := CreateHuman ;
30696: LD_ADDR_VAR 0 3
30700: PUSH
30701: CALL_OW 44
30705: ST_TO_ADDR
// hc_noskilllimit := false ;
30706: LD_ADDR_OWVAR 76
30710: PUSH
30711: LD_INT 0
30713: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30714: LD_VAR 0 3
30718: PPUSH
30719: LD_INT 1
30721: PPUSH
30722: CALL_OW 51
// p := 0 ;
30726: LD_ADDR_VAR 0 2
30730: PUSH
30731: LD_INT 0
30733: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30734: LD_INT 35
30736: PPUSH
30737: CALL_OW 67
// p := p + 1 ;
30741: LD_ADDR_VAR 0 2
30745: PUSH
30746: LD_VAR 0 2
30750: PUSH
30751: LD_INT 1
30753: PLUS
30754: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
30755: LD_VAR 0 3
30759: PPUSH
30760: CALL_OW 256
30764: PUSH
30765: LD_INT 1000
30767: LESS
30768: IFFALSE 30782
// SetLives ( un , 1000 ) ;
30770: LD_VAR 0 3
30774: PPUSH
30775: LD_INT 1000
30777: PPUSH
30778: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
30782: LD_VAR 0 3
30786: PPUSH
30787: LD_INT 81
30789: PUSH
30790: LD_OWVAR 2
30794: PUSH
30795: EMPTY
30796: LIST
30797: LIST
30798: PUSH
30799: LD_INT 91
30801: PUSH
30802: LD_VAR 0 3
30806: PUSH
30807: LD_INT 30
30809: PUSH
30810: EMPTY
30811: LIST
30812: LIST
30813: LIST
30814: PUSH
30815: EMPTY
30816: LIST
30817: LIST
30818: PPUSH
30819: CALL_OW 69
30823: PPUSH
30824: LD_VAR 0 3
30828: PPUSH
30829: CALL_OW 74
30833: PPUSH
30834: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
30838: LD_VAR 0 2
30842: PUSH
30843: LD_INT 60
30845: GREATER
30846: PUSH
30847: LD_VAR 0 3
30851: PPUSH
30852: CALL_OW 301
30856: OR
30857: IFFALSE 30734
// if un then
30859: LD_VAR 0 3
30863: IFFALSE 30874
// RemoveUnit ( un ) ;
30865: LD_VAR 0 3
30869: PPUSH
30870: CALL_OW 64
// end ;
30874: PPOPN 3
30876: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
30877: LD_INT 0
30879: PPUSH
// case cmd of 301 :
30880: LD_VAR 0 1
30884: PUSH
30885: LD_INT 301
30887: DOUBLE
30888: EQUAL
30889: IFTRUE 30893
30891: GO 30925
30893: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
30894: LD_VAR 0 6
30898: PPUSH
30899: LD_VAR 0 7
30903: PPUSH
30904: LD_VAR 0 8
30908: PPUSH
30909: LD_VAR 0 4
30913: PPUSH
30914: LD_VAR 0 5
30918: PPUSH
30919: CALL 32126 0 5
30923: GO 31046
30925: LD_INT 302
30927: DOUBLE
30928: EQUAL
30929: IFTRUE 30933
30931: GO 30970
30933: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
30934: LD_VAR 0 6
30938: PPUSH
30939: LD_VAR 0 7
30943: PPUSH
30944: LD_VAR 0 8
30948: PPUSH
30949: LD_VAR 0 9
30953: PPUSH
30954: LD_VAR 0 4
30958: PPUSH
30959: LD_VAR 0 5
30963: PPUSH
30964: CALL 32217 0 6
30968: GO 31046
30970: LD_INT 303
30972: DOUBLE
30973: EQUAL
30974: IFTRUE 30978
30976: GO 31015
30978: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
30979: LD_VAR 0 6
30983: PPUSH
30984: LD_VAR 0 7
30988: PPUSH
30989: LD_VAR 0 8
30993: PPUSH
30994: LD_VAR 0 9
30998: PPUSH
30999: LD_VAR 0 4
31003: PPUSH
31004: LD_VAR 0 5
31008: PPUSH
31009: CALL 31051 0 6
31013: GO 31046
31015: LD_INT 304
31017: DOUBLE
31018: EQUAL
31019: IFTRUE 31023
31021: GO 31045
31023: POP
// hHackTeleport ( unit , x , y ) ; end ;
31024: LD_VAR 0 2
31028: PPUSH
31029: LD_VAR 0 4
31033: PPUSH
31034: LD_VAR 0 5
31038: PPUSH
31039: CALL 32810 0 3
31043: GO 31046
31045: POP
// end ;
31046: LD_VAR 0 12
31050: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
31051: LD_INT 0
31053: PPUSH
31054: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
31055: LD_VAR 0 1
31059: PUSH
31060: LD_INT 1
31062: LESS
31063: PUSH
31064: LD_VAR 0 1
31068: PUSH
31069: LD_INT 3
31071: GREATER
31072: OR
31073: PUSH
31074: LD_VAR 0 5
31078: PPUSH
31079: LD_VAR 0 6
31083: PPUSH
31084: CALL_OW 428
31088: OR
31089: IFFALSE 31093
// exit ;
31091: GO 31813
// uc_side := your_side ;
31093: LD_ADDR_OWVAR 20
31097: PUSH
31098: LD_OWVAR 2
31102: ST_TO_ADDR
// uc_nation := nation ;
31103: LD_ADDR_OWVAR 21
31107: PUSH
31108: LD_VAR 0 1
31112: ST_TO_ADDR
// bc_level = 1 ;
31113: LD_ADDR_OWVAR 43
31117: PUSH
31118: LD_INT 1
31120: ST_TO_ADDR
// case btype of 1 :
31121: LD_VAR 0 2
31125: PUSH
31126: LD_INT 1
31128: DOUBLE
31129: EQUAL
31130: IFTRUE 31134
31132: GO 31145
31134: POP
// bc_type := b_depot ; 2 :
31135: LD_ADDR_OWVAR 42
31139: PUSH
31140: LD_INT 0
31142: ST_TO_ADDR
31143: GO 31757
31145: LD_INT 2
31147: DOUBLE
31148: EQUAL
31149: IFTRUE 31153
31151: GO 31164
31153: POP
// bc_type := b_warehouse ; 3 :
31154: LD_ADDR_OWVAR 42
31158: PUSH
31159: LD_INT 1
31161: ST_TO_ADDR
31162: GO 31757
31164: LD_INT 3
31166: DOUBLE
31167: EQUAL
31168: IFTRUE 31172
31170: GO 31183
31172: POP
// bc_type := b_lab ; 4 .. 9 :
31173: LD_ADDR_OWVAR 42
31177: PUSH
31178: LD_INT 6
31180: ST_TO_ADDR
31181: GO 31757
31183: LD_INT 4
31185: DOUBLE
31186: GREATEREQUAL
31187: IFFALSE 31195
31189: LD_INT 9
31191: DOUBLE
31192: LESSEQUAL
31193: IFTRUE 31197
31195: GO 31249
31197: POP
// begin bc_type := b_lab_half ;
31198: LD_ADDR_OWVAR 42
31202: PUSH
31203: LD_INT 7
31205: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
31206: LD_ADDR_OWVAR 44
31210: PUSH
31211: LD_INT 10
31213: PUSH
31214: LD_INT 11
31216: PUSH
31217: LD_INT 12
31219: PUSH
31220: LD_INT 15
31222: PUSH
31223: LD_INT 14
31225: PUSH
31226: LD_INT 13
31228: PUSH
31229: EMPTY
31230: LIST
31231: LIST
31232: LIST
31233: LIST
31234: LIST
31235: LIST
31236: PUSH
31237: LD_VAR 0 2
31241: PUSH
31242: LD_INT 3
31244: MINUS
31245: ARRAY
31246: ST_TO_ADDR
// end ; 10 .. 13 :
31247: GO 31757
31249: LD_INT 10
31251: DOUBLE
31252: GREATEREQUAL
31253: IFFALSE 31261
31255: LD_INT 13
31257: DOUBLE
31258: LESSEQUAL
31259: IFTRUE 31263
31261: GO 31340
31263: POP
// begin bc_type := b_lab_full ;
31264: LD_ADDR_OWVAR 42
31268: PUSH
31269: LD_INT 8
31271: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
31272: LD_ADDR_OWVAR 44
31276: PUSH
31277: LD_INT 10
31279: PUSH
31280: LD_INT 12
31282: PUSH
31283: LD_INT 14
31285: PUSH
31286: LD_INT 13
31288: PUSH
31289: EMPTY
31290: LIST
31291: LIST
31292: LIST
31293: LIST
31294: PUSH
31295: LD_VAR 0 2
31299: PUSH
31300: LD_INT 9
31302: MINUS
31303: ARRAY
31304: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
31305: LD_ADDR_OWVAR 45
31309: PUSH
31310: LD_INT 11
31312: PUSH
31313: LD_INT 15
31315: PUSH
31316: LD_INT 12
31318: PUSH
31319: LD_INT 15
31321: PUSH
31322: EMPTY
31323: LIST
31324: LIST
31325: LIST
31326: LIST
31327: PUSH
31328: LD_VAR 0 2
31332: PUSH
31333: LD_INT 9
31335: MINUS
31336: ARRAY
31337: ST_TO_ADDR
// end ; 14 :
31338: GO 31757
31340: LD_INT 14
31342: DOUBLE
31343: EQUAL
31344: IFTRUE 31348
31346: GO 31359
31348: POP
// bc_type := b_workshop ; 15 :
31349: LD_ADDR_OWVAR 42
31353: PUSH
31354: LD_INT 2
31356: ST_TO_ADDR
31357: GO 31757
31359: LD_INT 15
31361: DOUBLE
31362: EQUAL
31363: IFTRUE 31367
31365: GO 31378
31367: POP
// bc_type := b_factory ; 16 :
31368: LD_ADDR_OWVAR 42
31372: PUSH
31373: LD_INT 3
31375: ST_TO_ADDR
31376: GO 31757
31378: LD_INT 16
31380: DOUBLE
31381: EQUAL
31382: IFTRUE 31386
31384: GO 31397
31386: POP
// bc_type := b_ext_gun ; 17 :
31387: LD_ADDR_OWVAR 42
31391: PUSH
31392: LD_INT 17
31394: ST_TO_ADDR
31395: GO 31757
31397: LD_INT 17
31399: DOUBLE
31400: EQUAL
31401: IFTRUE 31405
31403: GO 31433
31405: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
31406: LD_ADDR_OWVAR 42
31410: PUSH
31411: LD_INT 19
31413: PUSH
31414: LD_INT 23
31416: PUSH
31417: LD_INT 19
31419: PUSH
31420: EMPTY
31421: LIST
31422: LIST
31423: LIST
31424: PUSH
31425: LD_VAR 0 1
31429: ARRAY
31430: ST_TO_ADDR
31431: GO 31757
31433: LD_INT 18
31435: DOUBLE
31436: EQUAL
31437: IFTRUE 31441
31439: GO 31452
31441: POP
// bc_type := b_ext_radar ; 19 :
31442: LD_ADDR_OWVAR 42
31446: PUSH
31447: LD_INT 20
31449: ST_TO_ADDR
31450: GO 31757
31452: LD_INT 19
31454: DOUBLE
31455: EQUAL
31456: IFTRUE 31460
31458: GO 31471
31460: POP
// bc_type := b_ext_radio ; 20 :
31461: LD_ADDR_OWVAR 42
31465: PUSH
31466: LD_INT 22
31468: ST_TO_ADDR
31469: GO 31757
31471: LD_INT 20
31473: DOUBLE
31474: EQUAL
31475: IFTRUE 31479
31477: GO 31490
31479: POP
// bc_type := b_ext_siberium ; 21 :
31480: LD_ADDR_OWVAR 42
31484: PUSH
31485: LD_INT 21
31487: ST_TO_ADDR
31488: GO 31757
31490: LD_INT 21
31492: DOUBLE
31493: EQUAL
31494: IFTRUE 31498
31496: GO 31509
31498: POP
// bc_type := b_ext_computer ; 22 :
31499: LD_ADDR_OWVAR 42
31503: PUSH
31504: LD_INT 24
31506: ST_TO_ADDR
31507: GO 31757
31509: LD_INT 22
31511: DOUBLE
31512: EQUAL
31513: IFTRUE 31517
31515: GO 31528
31517: POP
// bc_type := b_ext_track ; 23 :
31518: LD_ADDR_OWVAR 42
31522: PUSH
31523: LD_INT 16
31525: ST_TO_ADDR
31526: GO 31757
31528: LD_INT 23
31530: DOUBLE
31531: EQUAL
31532: IFTRUE 31536
31534: GO 31547
31536: POP
// bc_type := b_ext_laser ; 24 :
31537: LD_ADDR_OWVAR 42
31541: PUSH
31542: LD_INT 25
31544: ST_TO_ADDR
31545: GO 31757
31547: LD_INT 24
31549: DOUBLE
31550: EQUAL
31551: IFTRUE 31555
31553: GO 31566
31555: POP
// bc_type := b_control_tower ; 25 :
31556: LD_ADDR_OWVAR 42
31560: PUSH
31561: LD_INT 36
31563: ST_TO_ADDR
31564: GO 31757
31566: LD_INT 25
31568: DOUBLE
31569: EQUAL
31570: IFTRUE 31574
31572: GO 31585
31574: POP
// bc_type := b_breastwork ; 26 :
31575: LD_ADDR_OWVAR 42
31579: PUSH
31580: LD_INT 31
31582: ST_TO_ADDR
31583: GO 31757
31585: LD_INT 26
31587: DOUBLE
31588: EQUAL
31589: IFTRUE 31593
31591: GO 31604
31593: POP
// bc_type := b_bunker ; 27 :
31594: LD_ADDR_OWVAR 42
31598: PUSH
31599: LD_INT 32
31601: ST_TO_ADDR
31602: GO 31757
31604: LD_INT 27
31606: DOUBLE
31607: EQUAL
31608: IFTRUE 31612
31610: GO 31623
31612: POP
// bc_type := b_turret ; 28 :
31613: LD_ADDR_OWVAR 42
31617: PUSH
31618: LD_INT 33
31620: ST_TO_ADDR
31621: GO 31757
31623: LD_INT 28
31625: DOUBLE
31626: EQUAL
31627: IFTRUE 31631
31629: GO 31642
31631: POP
// bc_type := b_armoury ; 29 :
31632: LD_ADDR_OWVAR 42
31636: PUSH
31637: LD_INT 4
31639: ST_TO_ADDR
31640: GO 31757
31642: LD_INT 29
31644: DOUBLE
31645: EQUAL
31646: IFTRUE 31650
31648: GO 31661
31650: POP
// bc_type := b_barracks ; 30 :
31651: LD_ADDR_OWVAR 42
31655: PUSH
31656: LD_INT 5
31658: ST_TO_ADDR
31659: GO 31757
31661: LD_INT 30
31663: DOUBLE
31664: EQUAL
31665: IFTRUE 31669
31667: GO 31680
31669: POP
// bc_type := b_solar_power ; 31 :
31670: LD_ADDR_OWVAR 42
31674: PUSH
31675: LD_INT 27
31677: ST_TO_ADDR
31678: GO 31757
31680: LD_INT 31
31682: DOUBLE
31683: EQUAL
31684: IFTRUE 31688
31686: GO 31699
31688: POP
// bc_type := b_oil_power ; 32 :
31689: LD_ADDR_OWVAR 42
31693: PUSH
31694: LD_INT 26
31696: ST_TO_ADDR
31697: GO 31757
31699: LD_INT 32
31701: DOUBLE
31702: EQUAL
31703: IFTRUE 31707
31705: GO 31718
31707: POP
// bc_type := b_siberite_power ; 33 :
31708: LD_ADDR_OWVAR 42
31712: PUSH
31713: LD_INT 28
31715: ST_TO_ADDR
31716: GO 31757
31718: LD_INT 33
31720: DOUBLE
31721: EQUAL
31722: IFTRUE 31726
31724: GO 31737
31726: POP
// bc_type := b_oil_mine ; 34 :
31727: LD_ADDR_OWVAR 42
31731: PUSH
31732: LD_INT 29
31734: ST_TO_ADDR
31735: GO 31757
31737: LD_INT 34
31739: DOUBLE
31740: EQUAL
31741: IFTRUE 31745
31743: GO 31756
31745: POP
// bc_type := b_siberite_mine ; end ;
31746: LD_ADDR_OWVAR 42
31750: PUSH
31751: LD_INT 30
31753: ST_TO_ADDR
31754: GO 31757
31756: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
31757: LD_ADDR_VAR 0 8
31761: PUSH
31762: LD_VAR 0 5
31766: PPUSH
31767: LD_VAR 0 6
31771: PPUSH
31772: LD_VAR 0 3
31776: PPUSH
31777: CALL_OW 47
31781: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
31782: LD_OWVAR 42
31786: PUSH
31787: LD_INT 32
31789: PUSH
31790: LD_INT 33
31792: PUSH
31793: EMPTY
31794: LIST
31795: LIST
31796: IN
31797: IFFALSE 31813
// PlaceWeaponTurret ( b , weapon ) ;
31799: LD_VAR 0 8
31803: PPUSH
31804: LD_VAR 0 4
31808: PPUSH
31809: CALL_OW 431
// end ;
31813: LD_VAR 0 7
31817: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
31818: LD_INT 0
31820: PPUSH
31821: PPUSH
31822: PPUSH
31823: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
31824: LD_ADDR_VAR 0 4
31828: PUSH
31829: LD_INT 22
31831: PUSH
31832: LD_OWVAR 2
31836: PUSH
31837: EMPTY
31838: LIST
31839: LIST
31840: PUSH
31841: LD_INT 2
31843: PUSH
31844: LD_INT 30
31846: PUSH
31847: LD_INT 0
31849: PUSH
31850: EMPTY
31851: LIST
31852: LIST
31853: PUSH
31854: LD_INT 30
31856: PUSH
31857: LD_INT 1
31859: PUSH
31860: EMPTY
31861: LIST
31862: LIST
31863: PUSH
31864: EMPTY
31865: LIST
31866: LIST
31867: LIST
31868: PUSH
31869: EMPTY
31870: LIST
31871: LIST
31872: PPUSH
31873: CALL_OW 69
31877: ST_TO_ADDR
// if not tmp then
31878: LD_VAR 0 4
31882: NOT
31883: IFFALSE 31887
// exit ;
31885: GO 31946
// for i in tmp do
31887: LD_ADDR_VAR 0 2
31891: PUSH
31892: LD_VAR 0 4
31896: PUSH
31897: FOR_IN
31898: IFFALSE 31944
// for j = 1 to 3 do
31900: LD_ADDR_VAR 0 3
31904: PUSH
31905: DOUBLE
31906: LD_INT 1
31908: DEC
31909: ST_TO_ADDR
31910: LD_INT 3
31912: PUSH
31913: FOR_TO
31914: IFFALSE 31940
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
31916: LD_VAR 0 2
31920: PPUSH
31921: CALL_OW 274
31925: PPUSH
31926: LD_VAR 0 3
31930: PPUSH
31931: LD_INT 99999
31933: PPUSH
31934: CALL_OW 277
31938: GO 31913
31940: POP
31941: POP
31942: GO 31897
31944: POP
31945: POP
// end ;
31946: LD_VAR 0 1
31950: RET
// export function hHackSetLevel10 ; var i , j ; begin
31951: LD_INT 0
31953: PPUSH
31954: PPUSH
31955: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
31956: LD_ADDR_VAR 0 2
31960: PUSH
31961: LD_INT 21
31963: PUSH
31964: LD_INT 1
31966: PUSH
31967: EMPTY
31968: LIST
31969: LIST
31970: PPUSH
31971: CALL_OW 69
31975: PUSH
31976: FOR_IN
31977: IFFALSE 32029
// if IsSelected ( i ) then
31979: LD_VAR 0 2
31983: PPUSH
31984: CALL_OW 306
31988: IFFALSE 32027
// begin for j := 1 to 4 do
31990: LD_ADDR_VAR 0 3
31994: PUSH
31995: DOUBLE
31996: LD_INT 1
31998: DEC
31999: ST_TO_ADDR
32000: LD_INT 4
32002: PUSH
32003: FOR_TO
32004: IFFALSE 32025
// SetSkill ( i , j , 10 ) ;
32006: LD_VAR 0 2
32010: PPUSH
32011: LD_VAR 0 3
32015: PPUSH
32016: LD_INT 10
32018: PPUSH
32019: CALL_OW 237
32023: GO 32003
32025: POP
32026: POP
// end ;
32027: GO 31976
32029: POP
32030: POP
// end ;
32031: LD_VAR 0 1
32035: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
32036: LD_INT 0
32038: PPUSH
32039: PPUSH
32040: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
32041: LD_ADDR_VAR 0 2
32045: PUSH
32046: LD_INT 22
32048: PUSH
32049: LD_OWVAR 2
32053: PUSH
32054: EMPTY
32055: LIST
32056: LIST
32057: PUSH
32058: LD_INT 21
32060: PUSH
32061: LD_INT 1
32063: PUSH
32064: EMPTY
32065: LIST
32066: LIST
32067: PUSH
32068: EMPTY
32069: LIST
32070: LIST
32071: PPUSH
32072: CALL_OW 69
32076: PUSH
32077: FOR_IN
32078: IFFALSE 32119
// begin for j := 1 to 4 do
32080: LD_ADDR_VAR 0 3
32084: PUSH
32085: DOUBLE
32086: LD_INT 1
32088: DEC
32089: ST_TO_ADDR
32090: LD_INT 4
32092: PUSH
32093: FOR_TO
32094: IFFALSE 32115
// SetSkill ( i , j , 10 ) ;
32096: LD_VAR 0 2
32100: PPUSH
32101: LD_VAR 0 3
32105: PPUSH
32106: LD_INT 10
32108: PPUSH
32109: CALL_OW 237
32113: GO 32093
32115: POP
32116: POP
// end ;
32117: GO 32077
32119: POP
32120: POP
// end ;
32121: LD_VAR 0 1
32125: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
32126: LD_INT 0
32128: PPUSH
// uc_side := your_side ;
32129: LD_ADDR_OWVAR 20
32133: PUSH
32134: LD_OWVAR 2
32138: ST_TO_ADDR
// uc_nation := nation ;
32139: LD_ADDR_OWVAR 21
32143: PUSH
32144: LD_VAR 0 1
32148: ST_TO_ADDR
// InitHc ;
32149: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
32153: LD_INT 0
32155: PPUSH
32156: LD_VAR 0 2
32160: PPUSH
32161: LD_VAR 0 3
32165: PPUSH
32166: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
32170: LD_VAR 0 4
32174: PPUSH
32175: LD_VAR 0 5
32179: PPUSH
32180: CALL_OW 428
32184: PUSH
32185: LD_INT 0
32187: EQUAL
32188: IFFALSE 32212
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
32190: CALL_OW 44
32194: PPUSH
32195: LD_VAR 0 4
32199: PPUSH
32200: LD_VAR 0 5
32204: PPUSH
32205: LD_INT 1
32207: PPUSH
32208: CALL_OW 48
// end ;
32212: LD_VAR 0 6
32216: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
32217: LD_INT 0
32219: PPUSH
32220: PPUSH
// uc_side := your_side ;
32221: LD_ADDR_OWVAR 20
32225: PUSH
32226: LD_OWVAR 2
32230: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
32231: LD_VAR 0 1
32235: PUSH
32236: LD_INT 1
32238: PUSH
32239: LD_INT 2
32241: PUSH
32242: LD_INT 3
32244: PUSH
32245: LD_INT 4
32247: PUSH
32248: LD_INT 5
32250: PUSH
32251: EMPTY
32252: LIST
32253: LIST
32254: LIST
32255: LIST
32256: LIST
32257: IN
32258: IFFALSE 32270
// uc_nation := nation_american else
32260: LD_ADDR_OWVAR 21
32264: PUSH
32265: LD_INT 1
32267: ST_TO_ADDR
32268: GO 32313
// if chassis in [ 11 , 12 , 13 , 14 ] then
32270: LD_VAR 0 1
32274: PUSH
32275: LD_INT 11
32277: PUSH
32278: LD_INT 12
32280: PUSH
32281: LD_INT 13
32283: PUSH
32284: LD_INT 14
32286: PUSH
32287: EMPTY
32288: LIST
32289: LIST
32290: LIST
32291: LIST
32292: IN
32293: IFFALSE 32305
// uc_nation := nation_arabian else
32295: LD_ADDR_OWVAR 21
32299: PUSH
32300: LD_INT 2
32302: ST_TO_ADDR
32303: GO 32313
// uc_nation := nation_russian ;
32305: LD_ADDR_OWVAR 21
32309: PUSH
32310: LD_INT 3
32312: ST_TO_ADDR
// vc_chassis := chassis ;
32313: LD_ADDR_OWVAR 37
32317: PUSH
32318: LD_VAR 0 1
32322: ST_TO_ADDR
// vc_engine := engine ;
32323: LD_ADDR_OWVAR 39
32327: PUSH
32328: LD_VAR 0 2
32332: ST_TO_ADDR
// vc_control := control ;
32333: LD_ADDR_OWVAR 38
32337: PUSH
32338: LD_VAR 0 3
32342: ST_TO_ADDR
// vc_weapon := weapon ;
32343: LD_ADDR_OWVAR 40
32347: PUSH
32348: LD_VAR 0 4
32352: ST_TO_ADDR
// un := CreateVehicle ;
32353: LD_ADDR_VAR 0 8
32357: PUSH
32358: CALL_OW 45
32362: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
32363: LD_VAR 0 8
32367: PPUSH
32368: LD_INT 0
32370: PPUSH
32371: LD_INT 5
32373: PPUSH
32374: CALL_OW 12
32378: PPUSH
32379: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
32383: LD_VAR 0 8
32387: PPUSH
32388: LD_VAR 0 5
32392: PPUSH
32393: LD_VAR 0 6
32397: PPUSH
32398: LD_INT 1
32400: PPUSH
32401: CALL_OW 48
// end ;
32405: LD_VAR 0 7
32409: RET
// export hInvincible ; every 1 do
32410: GO 32412
32412: DISABLE
// hInvincible := [ ] ;
32413: LD_ADDR_EXP 124
32417: PUSH
32418: EMPTY
32419: ST_TO_ADDR
32420: END
// every 10 do var i ;
32421: GO 32423
32423: DISABLE
32424: LD_INT 0
32426: PPUSH
// begin enable ;
32427: ENABLE
// if not hInvincible then
32428: LD_EXP 124
32432: NOT
32433: IFFALSE 32437
// exit ;
32435: GO 32481
// for i in hInvincible do
32437: LD_ADDR_VAR 0 1
32441: PUSH
32442: LD_EXP 124
32446: PUSH
32447: FOR_IN
32448: IFFALSE 32479
// if GetLives ( i ) < 1000 then
32450: LD_VAR 0 1
32454: PPUSH
32455: CALL_OW 256
32459: PUSH
32460: LD_INT 1000
32462: LESS
32463: IFFALSE 32477
// SetLives ( i , 1000 ) ;
32465: LD_VAR 0 1
32469: PPUSH
32470: LD_INT 1000
32472: PPUSH
32473: CALL_OW 234
32477: GO 32447
32479: POP
32480: POP
// end ;
32481: PPOPN 1
32483: END
// export function hHackInvincible ; var i ; begin
32484: LD_INT 0
32486: PPUSH
32487: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
32488: LD_ADDR_VAR 0 2
32492: PUSH
32493: LD_INT 2
32495: PUSH
32496: LD_INT 21
32498: PUSH
32499: LD_INT 1
32501: PUSH
32502: EMPTY
32503: LIST
32504: LIST
32505: PUSH
32506: LD_INT 21
32508: PUSH
32509: LD_INT 2
32511: PUSH
32512: EMPTY
32513: LIST
32514: LIST
32515: PUSH
32516: EMPTY
32517: LIST
32518: LIST
32519: LIST
32520: PPUSH
32521: CALL_OW 69
32525: PUSH
32526: FOR_IN
32527: IFFALSE 32588
// if IsSelected ( i ) then
32529: LD_VAR 0 2
32533: PPUSH
32534: CALL_OW 306
32538: IFFALSE 32586
// begin if i in hInvincible then
32540: LD_VAR 0 2
32544: PUSH
32545: LD_EXP 124
32549: IN
32550: IFFALSE 32570
// hInvincible := hInvincible diff i else
32552: LD_ADDR_EXP 124
32556: PUSH
32557: LD_EXP 124
32561: PUSH
32562: LD_VAR 0 2
32566: DIFF
32567: ST_TO_ADDR
32568: GO 32586
// hInvincible := hInvincible union i ;
32570: LD_ADDR_EXP 124
32574: PUSH
32575: LD_EXP 124
32579: PUSH
32580: LD_VAR 0 2
32584: UNION
32585: ST_TO_ADDR
// end ;
32586: GO 32526
32588: POP
32589: POP
// end ;
32590: LD_VAR 0 1
32594: RET
// export function hHackInvisible ; var i , j ; begin
32595: LD_INT 0
32597: PPUSH
32598: PPUSH
32599: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32600: LD_ADDR_VAR 0 2
32604: PUSH
32605: LD_INT 21
32607: PUSH
32608: LD_INT 1
32610: PUSH
32611: EMPTY
32612: LIST
32613: LIST
32614: PPUSH
32615: CALL_OW 69
32619: PUSH
32620: FOR_IN
32621: IFFALSE 32645
// if IsSelected ( i ) then
32623: LD_VAR 0 2
32627: PPUSH
32628: CALL_OW 306
32632: IFFALSE 32643
// ComForceInvisible ( i ) ;
32634: LD_VAR 0 2
32638: PPUSH
32639: CALL_OW 496
32643: GO 32620
32645: POP
32646: POP
// end ;
32647: LD_VAR 0 1
32651: RET
// export function hHackChangeYourSide ; begin
32652: LD_INT 0
32654: PPUSH
// if your_side = 8 then
32655: LD_OWVAR 2
32659: PUSH
32660: LD_INT 8
32662: EQUAL
32663: IFFALSE 32675
// your_side := 0 else
32665: LD_ADDR_OWVAR 2
32669: PUSH
32670: LD_INT 0
32672: ST_TO_ADDR
32673: GO 32689
// your_side := your_side + 1 ;
32675: LD_ADDR_OWVAR 2
32679: PUSH
32680: LD_OWVAR 2
32684: PUSH
32685: LD_INT 1
32687: PLUS
32688: ST_TO_ADDR
// end ;
32689: LD_VAR 0 1
32693: RET
// export function hHackChangeUnitSide ; var i , j ; begin
32694: LD_INT 0
32696: PPUSH
32697: PPUSH
32698: PPUSH
// for i in all_units do
32699: LD_ADDR_VAR 0 2
32703: PUSH
32704: LD_OWVAR 3
32708: PUSH
32709: FOR_IN
32710: IFFALSE 32788
// if IsSelected ( i ) then
32712: LD_VAR 0 2
32716: PPUSH
32717: CALL_OW 306
32721: IFFALSE 32786
// begin j := GetSide ( i ) ;
32723: LD_ADDR_VAR 0 3
32727: PUSH
32728: LD_VAR 0 2
32732: PPUSH
32733: CALL_OW 255
32737: ST_TO_ADDR
// if j = 8 then
32738: LD_VAR 0 3
32742: PUSH
32743: LD_INT 8
32745: EQUAL
32746: IFFALSE 32758
// j := 0 else
32748: LD_ADDR_VAR 0 3
32752: PUSH
32753: LD_INT 0
32755: ST_TO_ADDR
32756: GO 32772
// j := j + 1 ;
32758: LD_ADDR_VAR 0 3
32762: PUSH
32763: LD_VAR 0 3
32767: PUSH
32768: LD_INT 1
32770: PLUS
32771: ST_TO_ADDR
// SetSide ( i , j ) ;
32772: LD_VAR 0 2
32776: PPUSH
32777: LD_VAR 0 3
32781: PPUSH
32782: CALL_OW 235
// end ;
32786: GO 32709
32788: POP
32789: POP
// end ;
32790: LD_VAR 0 1
32794: RET
// export function hHackFog ; begin
32795: LD_INT 0
32797: PPUSH
// FogOff ( true ) ;
32798: LD_INT 1
32800: PPUSH
32801: CALL_OW 344
// end ;
32805: LD_VAR 0 1
32809: RET
// export function hHackTeleport ( unit , x , y ) ; begin
32810: LD_INT 0
32812: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
32813: LD_VAR 0 1
32817: PPUSH
32818: LD_VAR 0 2
32822: PPUSH
32823: LD_VAR 0 3
32827: PPUSH
32828: LD_INT 1
32830: PPUSH
32831: LD_INT 1
32833: PPUSH
32834: CALL_OW 483
// CenterOnXY ( x , y ) ;
32838: LD_VAR 0 2
32842: PPUSH
32843: LD_VAR 0 3
32847: PPUSH
32848: CALL_OW 84
// end ; end_of_file
32852: LD_VAR 0 4
32856: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
32857: LD_INT 0
32859: PPUSH
32860: PPUSH
32861: PPUSH
32862: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
32863: LD_VAR 0 1
32867: PPUSH
32868: CALL_OW 264
32872: PUSH
32873: LD_EXP 56
32877: EQUAL
32878: IFFALSE 32950
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
32880: LD_INT 68
32882: PPUSH
32883: LD_VAR 0 1
32887: PPUSH
32888: CALL_OW 255
32892: PPUSH
32893: CALL_OW 321
32897: PUSH
32898: LD_INT 2
32900: EQUAL
32901: IFFALSE 32913
// eff := 70 else
32903: LD_ADDR_VAR 0 4
32907: PUSH
32908: LD_INT 70
32910: ST_TO_ADDR
32911: GO 32921
// eff := 30 ;
32913: LD_ADDR_VAR 0 4
32917: PUSH
32918: LD_INT 30
32920: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
32921: LD_VAR 0 1
32925: PPUSH
32926: CALL_OW 250
32930: PPUSH
32931: LD_VAR 0 1
32935: PPUSH
32936: CALL_OW 251
32940: PPUSH
32941: LD_VAR 0 4
32945: PPUSH
32946: CALL_OW 495
// end ; end ;
32950: LD_VAR 0 2
32954: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
32955: LD_INT 0
32957: PPUSH
// end ;
32958: LD_VAR 0 4
32962: RET
// export function SOS_Command ( cmd ) ; begin
32963: LD_INT 0
32965: PPUSH
// end ;
32966: LD_VAR 0 2
32970: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
32971: LD_INT 0
32973: PPUSH
// if cmd = 121 then
32974: LD_VAR 0 1
32978: PUSH
32979: LD_INT 121
32981: EQUAL
32982: IFFALSE 32984
// end ;
32984: LD_VAR 0 6
32988: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
32989: LD_INT 0
32991: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
32992: LD_VAR 0 1
32996: PUSH
32997: LD_INT 250
32999: EQUAL
33000: PUSH
33001: LD_VAR 0 2
33005: PPUSH
33006: CALL_OW 264
33010: PUSH
33011: LD_EXP 59
33015: EQUAL
33016: AND
33017: IFFALSE 33038
// MinerPlaceMine ( unit , x , y ) ;
33019: LD_VAR 0 2
33023: PPUSH
33024: LD_VAR 0 4
33028: PPUSH
33029: LD_VAR 0 5
33033: PPUSH
33034: CALL 35387 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
33038: LD_VAR 0 1
33042: PUSH
33043: LD_INT 251
33045: EQUAL
33046: PUSH
33047: LD_VAR 0 2
33051: PPUSH
33052: CALL_OW 264
33056: PUSH
33057: LD_EXP 59
33061: EQUAL
33062: AND
33063: IFFALSE 33084
// MinerDetonateMine ( unit , x , y ) ;
33065: LD_VAR 0 2
33069: PPUSH
33070: LD_VAR 0 4
33074: PPUSH
33075: LD_VAR 0 5
33079: PPUSH
33080: CALL 35664 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
33084: LD_VAR 0 1
33088: PUSH
33089: LD_INT 252
33091: EQUAL
33092: PUSH
33093: LD_VAR 0 2
33097: PPUSH
33098: CALL_OW 264
33102: PUSH
33103: LD_EXP 59
33107: EQUAL
33108: AND
33109: IFFALSE 33130
// MinerCreateMinefield ( unit , x , y ) ;
33111: LD_VAR 0 2
33115: PPUSH
33116: LD_VAR 0 4
33120: PPUSH
33121: LD_VAR 0 5
33125: PPUSH
33126: CALL 36081 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
33130: LD_VAR 0 1
33134: PUSH
33135: LD_INT 253
33137: EQUAL
33138: PUSH
33139: LD_VAR 0 2
33143: PPUSH
33144: CALL_OW 257
33148: PUSH
33149: LD_INT 5
33151: EQUAL
33152: AND
33153: IFFALSE 33174
// ComBinocular ( unit , x , y ) ;
33155: LD_VAR 0 2
33159: PPUSH
33160: LD_VAR 0 4
33164: PPUSH
33165: LD_VAR 0 5
33169: PPUSH
33170: CALL 36452 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
33174: LD_VAR 0 1
33178: PUSH
33179: LD_INT 254
33181: EQUAL
33182: PUSH
33183: LD_VAR 0 2
33187: PPUSH
33188: CALL_OW 264
33192: PUSH
33193: LD_EXP 54
33197: EQUAL
33198: AND
33199: PUSH
33200: LD_VAR 0 3
33204: PPUSH
33205: CALL_OW 263
33209: PUSH
33210: LD_INT 3
33212: EQUAL
33213: AND
33214: IFFALSE 33230
// HackDestroyVehicle ( unit , selectedUnit ) ;
33216: LD_VAR 0 2
33220: PPUSH
33221: LD_VAR 0 3
33225: PPUSH
33226: CALL 34747 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
33230: LD_VAR 0 1
33234: PUSH
33235: LD_INT 255
33237: EQUAL
33238: PUSH
33239: LD_VAR 0 2
33243: PPUSH
33244: CALL_OW 264
33248: PUSH
33249: LD_INT 14
33251: PUSH
33252: LD_INT 53
33254: PUSH
33255: EMPTY
33256: LIST
33257: LIST
33258: IN
33259: AND
33260: PUSH
33261: LD_VAR 0 4
33265: PPUSH
33266: LD_VAR 0 5
33270: PPUSH
33271: CALL_OW 488
33275: AND
33276: IFFALSE 33300
// CutTreeXYR ( unit , x , y , 12 ) ;
33278: LD_VAR 0 2
33282: PPUSH
33283: LD_VAR 0 4
33287: PPUSH
33288: LD_VAR 0 5
33292: PPUSH
33293: LD_INT 12
33295: PPUSH
33296: CALL 33313 0 4
// end ;
33300: LD_VAR 0 6
33304: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
33305: LD_INT 0
33307: PPUSH
// end ;
33308: LD_VAR 0 4
33312: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
33313: LD_INT 0
33315: PPUSH
33316: PPUSH
33317: PPUSH
33318: PPUSH
33319: PPUSH
33320: PPUSH
33321: PPUSH
33322: PPUSH
33323: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
33324: LD_VAR 0 1
33328: NOT
33329: PUSH
33330: LD_VAR 0 2
33334: PPUSH
33335: LD_VAR 0 3
33339: PPUSH
33340: CALL_OW 488
33344: NOT
33345: OR
33346: PUSH
33347: LD_VAR 0 4
33351: NOT
33352: OR
33353: IFFALSE 33357
// exit ;
33355: GO 33697
// list := [ ] ;
33357: LD_ADDR_VAR 0 13
33361: PUSH
33362: EMPTY
33363: ST_TO_ADDR
// if x - r < 0 then
33364: LD_VAR 0 2
33368: PUSH
33369: LD_VAR 0 4
33373: MINUS
33374: PUSH
33375: LD_INT 0
33377: LESS
33378: IFFALSE 33390
// min_x := 0 else
33380: LD_ADDR_VAR 0 7
33384: PUSH
33385: LD_INT 0
33387: ST_TO_ADDR
33388: GO 33406
// min_x := x - r ;
33390: LD_ADDR_VAR 0 7
33394: PUSH
33395: LD_VAR 0 2
33399: PUSH
33400: LD_VAR 0 4
33404: MINUS
33405: ST_TO_ADDR
// if y - r < 0 then
33406: LD_VAR 0 3
33410: PUSH
33411: LD_VAR 0 4
33415: MINUS
33416: PUSH
33417: LD_INT 0
33419: LESS
33420: IFFALSE 33432
// min_y := 0 else
33422: LD_ADDR_VAR 0 8
33426: PUSH
33427: LD_INT 0
33429: ST_TO_ADDR
33430: GO 33448
// min_y := y - r ;
33432: LD_ADDR_VAR 0 8
33436: PUSH
33437: LD_VAR 0 3
33441: PUSH
33442: LD_VAR 0 4
33446: MINUS
33447: ST_TO_ADDR
// max_x := x + r ;
33448: LD_ADDR_VAR 0 9
33452: PUSH
33453: LD_VAR 0 2
33457: PUSH
33458: LD_VAR 0 4
33462: PLUS
33463: ST_TO_ADDR
// max_y := y + r ;
33464: LD_ADDR_VAR 0 10
33468: PUSH
33469: LD_VAR 0 3
33473: PUSH
33474: LD_VAR 0 4
33478: PLUS
33479: ST_TO_ADDR
// for _x = min_x to max_x do
33480: LD_ADDR_VAR 0 11
33484: PUSH
33485: DOUBLE
33486: LD_VAR 0 7
33490: DEC
33491: ST_TO_ADDR
33492: LD_VAR 0 9
33496: PUSH
33497: FOR_TO
33498: IFFALSE 33615
// for _y = min_y to max_y do
33500: LD_ADDR_VAR 0 12
33504: PUSH
33505: DOUBLE
33506: LD_VAR 0 8
33510: DEC
33511: ST_TO_ADDR
33512: LD_VAR 0 10
33516: PUSH
33517: FOR_TO
33518: IFFALSE 33611
// begin if not ValidHex ( _x , _y ) then
33520: LD_VAR 0 11
33524: PPUSH
33525: LD_VAR 0 12
33529: PPUSH
33530: CALL_OW 488
33534: NOT
33535: IFFALSE 33539
// continue ;
33537: GO 33517
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
33539: LD_VAR 0 11
33543: PPUSH
33544: LD_VAR 0 12
33548: PPUSH
33549: CALL_OW 351
33553: PUSH
33554: LD_VAR 0 11
33558: PPUSH
33559: LD_VAR 0 12
33563: PPUSH
33564: CALL_OW 554
33568: AND
33569: IFFALSE 33609
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
33571: LD_ADDR_VAR 0 13
33575: PUSH
33576: LD_VAR 0 13
33580: PPUSH
33581: LD_VAR 0 13
33585: PUSH
33586: LD_INT 1
33588: PLUS
33589: PPUSH
33590: LD_VAR 0 11
33594: PUSH
33595: LD_VAR 0 12
33599: PUSH
33600: EMPTY
33601: LIST
33602: LIST
33603: PPUSH
33604: CALL_OW 2
33608: ST_TO_ADDR
// end ;
33609: GO 33517
33611: POP
33612: POP
33613: GO 33497
33615: POP
33616: POP
// if not list then
33617: LD_VAR 0 13
33621: NOT
33622: IFFALSE 33626
// exit ;
33624: GO 33697
// for i in list do
33626: LD_ADDR_VAR 0 6
33630: PUSH
33631: LD_VAR 0 13
33635: PUSH
33636: FOR_IN
33637: IFFALSE 33695
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
33639: LD_VAR 0 1
33643: PPUSH
33644: LD_STRING M
33646: PUSH
33647: LD_VAR 0 6
33651: PUSH
33652: LD_INT 1
33654: ARRAY
33655: PUSH
33656: LD_VAR 0 6
33660: PUSH
33661: LD_INT 2
33663: ARRAY
33664: PUSH
33665: LD_INT 0
33667: PUSH
33668: LD_INT 0
33670: PUSH
33671: LD_INT 0
33673: PUSH
33674: LD_INT 0
33676: PUSH
33677: EMPTY
33678: LIST
33679: LIST
33680: LIST
33681: LIST
33682: LIST
33683: LIST
33684: LIST
33685: PUSH
33686: EMPTY
33687: LIST
33688: PPUSH
33689: CALL_OW 447
33693: GO 33636
33695: POP
33696: POP
// end ;
33697: LD_VAR 0 5
33701: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
33702: LD_EXP 127
33706: NOT
33707: IFFALSE 33757
33709: GO 33711
33711: DISABLE
// begin initHack := true ;
33712: LD_ADDR_EXP 127
33716: PUSH
33717: LD_INT 1
33719: ST_TO_ADDR
// hackTanks := [ ] ;
33720: LD_ADDR_EXP 128
33724: PUSH
33725: EMPTY
33726: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
33727: LD_ADDR_EXP 129
33731: PUSH
33732: EMPTY
33733: ST_TO_ADDR
// hackLimit := 3 ;
33734: LD_ADDR_EXP 130
33738: PUSH
33739: LD_INT 3
33741: ST_TO_ADDR
// hackDist := 12 ;
33742: LD_ADDR_EXP 131
33746: PUSH
33747: LD_INT 12
33749: ST_TO_ADDR
// hackCounter := [ ] ;
33750: LD_ADDR_EXP 132
33754: PUSH
33755: EMPTY
33756: ST_TO_ADDR
// end ;
33757: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
33758: LD_EXP 127
33762: PUSH
33763: LD_INT 34
33765: PUSH
33766: LD_EXP 54
33770: PUSH
33771: EMPTY
33772: LIST
33773: LIST
33774: PPUSH
33775: CALL_OW 69
33779: AND
33780: IFFALSE 34035
33782: GO 33784
33784: DISABLE
33785: LD_INT 0
33787: PPUSH
33788: PPUSH
// begin enable ;
33789: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
33790: LD_ADDR_VAR 0 1
33794: PUSH
33795: LD_INT 34
33797: PUSH
33798: LD_EXP 54
33802: PUSH
33803: EMPTY
33804: LIST
33805: LIST
33806: PPUSH
33807: CALL_OW 69
33811: PUSH
33812: FOR_IN
33813: IFFALSE 34033
// begin if not i in hackTanks then
33815: LD_VAR 0 1
33819: PUSH
33820: LD_EXP 128
33824: IN
33825: NOT
33826: IFFALSE 33909
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
33828: LD_ADDR_EXP 128
33832: PUSH
33833: LD_EXP 128
33837: PPUSH
33838: LD_EXP 128
33842: PUSH
33843: LD_INT 1
33845: PLUS
33846: PPUSH
33847: LD_VAR 0 1
33851: PPUSH
33852: CALL_OW 1
33856: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
33857: LD_ADDR_EXP 129
33861: PUSH
33862: LD_EXP 129
33866: PPUSH
33867: LD_EXP 129
33871: PUSH
33872: LD_INT 1
33874: PLUS
33875: PPUSH
33876: EMPTY
33877: PPUSH
33878: CALL_OW 1
33882: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
33883: LD_ADDR_EXP 132
33887: PUSH
33888: LD_EXP 132
33892: PPUSH
33893: LD_EXP 132
33897: PUSH
33898: LD_INT 1
33900: PLUS
33901: PPUSH
33902: EMPTY
33903: PPUSH
33904: CALL_OW 1
33908: ST_TO_ADDR
// end ; if not IsOk ( i ) then
33909: LD_VAR 0 1
33913: PPUSH
33914: CALL_OW 302
33918: NOT
33919: IFFALSE 33932
// begin HackUnlinkAll ( i ) ;
33921: LD_VAR 0 1
33925: PPUSH
33926: CALL 34038 0 1
// continue ;
33930: GO 33812
// end ; HackCheckCapturedStatus ( i ) ;
33932: LD_VAR 0 1
33936: PPUSH
33937: CALL 34481 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
33941: LD_ADDR_VAR 0 2
33945: PUSH
33946: LD_INT 81
33948: PUSH
33949: LD_VAR 0 1
33953: PPUSH
33954: CALL_OW 255
33958: PUSH
33959: EMPTY
33960: LIST
33961: LIST
33962: PUSH
33963: LD_INT 33
33965: PUSH
33966: LD_INT 3
33968: PUSH
33969: EMPTY
33970: LIST
33971: LIST
33972: PUSH
33973: LD_INT 91
33975: PUSH
33976: LD_VAR 0 1
33980: PUSH
33981: LD_EXP 131
33985: PUSH
33986: EMPTY
33987: LIST
33988: LIST
33989: LIST
33990: PUSH
33991: LD_INT 50
33993: PUSH
33994: EMPTY
33995: LIST
33996: PUSH
33997: EMPTY
33998: LIST
33999: LIST
34000: LIST
34001: LIST
34002: PPUSH
34003: CALL_OW 69
34007: ST_TO_ADDR
// if not tmp then
34008: LD_VAR 0 2
34012: NOT
34013: IFFALSE 34017
// continue ;
34015: GO 33812
// HackLink ( i , tmp ) ;
34017: LD_VAR 0 1
34021: PPUSH
34022: LD_VAR 0 2
34026: PPUSH
34027: CALL 34174 0 2
// end ;
34031: GO 33812
34033: POP
34034: POP
// end ;
34035: PPOPN 2
34037: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
34038: LD_INT 0
34040: PPUSH
34041: PPUSH
34042: PPUSH
// if not hack in hackTanks then
34043: LD_VAR 0 1
34047: PUSH
34048: LD_EXP 128
34052: IN
34053: NOT
34054: IFFALSE 34058
// exit ;
34056: GO 34169
// index := GetElementIndex ( hackTanks , hack ) ;
34058: LD_ADDR_VAR 0 4
34062: PUSH
34063: LD_EXP 128
34067: PPUSH
34068: LD_VAR 0 1
34072: PPUSH
34073: CALL 41603 0 2
34077: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
34078: LD_EXP 129
34082: PUSH
34083: LD_VAR 0 4
34087: ARRAY
34088: IFFALSE 34169
// begin for i in hackTanksCaptured [ index ] do
34090: LD_ADDR_VAR 0 3
34094: PUSH
34095: LD_EXP 129
34099: PUSH
34100: LD_VAR 0 4
34104: ARRAY
34105: PUSH
34106: FOR_IN
34107: IFFALSE 34133
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
34109: LD_VAR 0 3
34113: PUSH
34114: LD_INT 1
34116: ARRAY
34117: PPUSH
34118: LD_VAR 0 3
34122: PUSH
34123: LD_INT 2
34125: ARRAY
34126: PPUSH
34127: CALL_OW 235
34131: GO 34106
34133: POP
34134: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
34135: LD_ADDR_EXP 129
34139: PUSH
34140: LD_EXP 129
34144: PPUSH
34145: LD_VAR 0 4
34149: PPUSH
34150: EMPTY
34151: PPUSH
34152: CALL_OW 1
34156: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
34157: LD_VAR 0 1
34161: PPUSH
34162: LD_INT 0
34164: PPUSH
34165: CALL_OW 505
// end ; end ;
34169: LD_VAR 0 2
34173: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
34174: LD_INT 0
34176: PPUSH
34177: PPUSH
34178: PPUSH
// if not hack in hackTanks or not vehicles then
34179: LD_VAR 0 1
34183: PUSH
34184: LD_EXP 128
34188: IN
34189: NOT
34190: PUSH
34191: LD_VAR 0 2
34195: NOT
34196: OR
34197: IFFALSE 34201
// exit ;
34199: GO 34476
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
34201: LD_ADDR_VAR 0 2
34205: PUSH
34206: LD_VAR 0 1
34210: PPUSH
34211: LD_VAR 0 2
34215: PPUSH
34216: LD_INT 1
34218: PPUSH
34219: LD_INT 1
34221: PPUSH
34222: CALL 42253 0 4
34226: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
34227: LD_ADDR_VAR 0 5
34231: PUSH
34232: LD_EXP 128
34236: PPUSH
34237: LD_VAR 0 1
34241: PPUSH
34242: CALL 41603 0 2
34246: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
34247: LD_EXP 129
34251: PUSH
34252: LD_VAR 0 5
34256: ARRAY
34257: PUSH
34258: LD_EXP 130
34262: LESS
34263: IFFALSE 34452
// begin for i := 1 to vehicles do
34265: LD_ADDR_VAR 0 4
34269: PUSH
34270: DOUBLE
34271: LD_INT 1
34273: DEC
34274: ST_TO_ADDR
34275: LD_VAR 0 2
34279: PUSH
34280: FOR_TO
34281: IFFALSE 34450
// begin if hackTanksCaptured [ index ] = hackLimit then
34283: LD_EXP 129
34287: PUSH
34288: LD_VAR 0 5
34292: ARRAY
34293: PUSH
34294: LD_EXP 130
34298: EQUAL
34299: IFFALSE 34303
// break ;
34301: GO 34450
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
34303: LD_ADDR_EXP 132
34307: PUSH
34308: LD_EXP 132
34312: PPUSH
34313: LD_VAR 0 5
34317: PPUSH
34318: LD_EXP 132
34322: PUSH
34323: LD_VAR 0 5
34327: ARRAY
34328: PUSH
34329: LD_INT 1
34331: PLUS
34332: PPUSH
34333: CALL_OW 1
34337: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
34338: LD_ADDR_EXP 129
34342: PUSH
34343: LD_EXP 129
34347: PPUSH
34348: LD_VAR 0 5
34352: PUSH
34353: LD_EXP 129
34357: PUSH
34358: LD_VAR 0 5
34362: ARRAY
34363: PUSH
34364: LD_INT 1
34366: PLUS
34367: PUSH
34368: EMPTY
34369: LIST
34370: LIST
34371: PPUSH
34372: LD_VAR 0 2
34376: PUSH
34377: LD_VAR 0 4
34381: ARRAY
34382: PUSH
34383: LD_VAR 0 2
34387: PUSH
34388: LD_VAR 0 4
34392: ARRAY
34393: PPUSH
34394: CALL_OW 255
34398: PUSH
34399: EMPTY
34400: LIST
34401: LIST
34402: PPUSH
34403: CALL 41818 0 3
34407: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
34408: LD_VAR 0 2
34412: PUSH
34413: LD_VAR 0 4
34417: ARRAY
34418: PPUSH
34419: LD_VAR 0 1
34423: PPUSH
34424: CALL_OW 255
34428: PPUSH
34429: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
34433: LD_VAR 0 2
34437: PUSH
34438: LD_VAR 0 4
34442: ARRAY
34443: PPUSH
34444: CALL_OW 141
// end ;
34448: GO 34280
34450: POP
34451: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
34452: LD_VAR 0 1
34456: PPUSH
34457: LD_EXP 129
34461: PUSH
34462: LD_VAR 0 5
34466: ARRAY
34467: PUSH
34468: LD_INT 0
34470: PLUS
34471: PPUSH
34472: CALL_OW 505
// end ;
34476: LD_VAR 0 3
34480: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
34481: LD_INT 0
34483: PPUSH
34484: PPUSH
34485: PPUSH
34486: PPUSH
// if not hack in hackTanks then
34487: LD_VAR 0 1
34491: PUSH
34492: LD_EXP 128
34496: IN
34497: NOT
34498: IFFALSE 34502
// exit ;
34500: GO 34742
// index := GetElementIndex ( hackTanks , hack ) ;
34502: LD_ADDR_VAR 0 4
34506: PUSH
34507: LD_EXP 128
34511: PPUSH
34512: LD_VAR 0 1
34516: PPUSH
34517: CALL 41603 0 2
34521: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
34522: LD_ADDR_VAR 0 3
34526: PUSH
34527: DOUBLE
34528: LD_EXP 129
34532: PUSH
34533: LD_VAR 0 4
34537: ARRAY
34538: INC
34539: ST_TO_ADDR
34540: LD_INT 1
34542: PUSH
34543: FOR_DOWNTO
34544: IFFALSE 34716
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
34546: LD_ADDR_VAR 0 5
34550: PUSH
34551: LD_EXP 129
34555: PUSH
34556: LD_VAR 0 4
34560: ARRAY
34561: PUSH
34562: LD_VAR 0 3
34566: ARRAY
34567: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
34568: LD_VAR 0 5
34572: PUSH
34573: LD_INT 1
34575: ARRAY
34576: PPUSH
34577: CALL_OW 302
34581: NOT
34582: PUSH
34583: LD_VAR 0 5
34587: PUSH
34588: LD_INT 1
34590: ARRAY
34591: PPUSH
34592: CALL_OW 255
34596: PUSH
34597: LD_VAR 0 1
34601: PPUSH
34602: CALL_OW 255
34606: NONEQUAL
34607: OR
34608: IFFALSE 34714
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
34610: LD_VAR 0 5
34614: PUSH
34615: LD_INT 1
34617: ARRAY
34618: PPUSH
34619: CALL_OW 305
34623: PUSH
34624: LD_VAR 0 5
34628: PUSH
34629: LD_INT 1
34631: ARRAY
34632: PPUSH
34633: CALL_OW 255
34637: PUSH
34638: LD_VAR 0 1
34642: PPUSH
34643: CALL_OW 255
34647: EQUAL
34648: AND
34649: IFFALSE 34673
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
34651: LD_VAR 0 5
34655: PUSH
34656: LD_INT 1
34658: ARRAY
34659: PPUSH
34660: LD_VAR 0 5
34664: PUSH
34665: LD_INT 2
34667: ARRAY
34668: PPUSH
34669: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
34673: LD_ADDR_EXP 129
34677: PUSH
34678: LD_EXP 129
34682: PPUSH
34683: LD_VAR 0 4
34687: PPUSH
34688: LD_EXP 129
34692: PUSH
34693: LD_VAR 0 4
34697: ARRAY
34698: PPUSH
34699: LD_VAR 0 3
34703: PPUSH
34704: CALL_OW 3
34708: PPUSH
34709: CALL_OW 1
34713: ST_TO_ADDR
// end ; end ;
34714: GO 34543
34716: POP
34717: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
34718: LD_VAR 0 1
34722: PPUSH
34723: LD_EXP 129
34727: PUSH
34728: LD_VAR 0 4
34732: ARRAY
34733: PUSH
34734: LD_INT 0
34736: PLUS
34737: PPUSH
34738: CALL_OW 505
// end ;
34742: LD_VAR 0 2
34746: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
34747: LD_INT 0
34749: PPUSH
34750: PPUSH
34751: PPUSH
34752: PPUSH
// if not hack in hackTanks then
34753: LD_VAR 0 1
34757: PUSH
34758: LD_EXP 128
34762: IN
34763: NOT
34764: IFFALSE 34768
// exit ;
34766: GO 34853
// index := GetElementIndex ( hackTanks , hack ) ;
34768: LD_ADDR_VAR 0 5
34772: PUSH
34773: LD_EXP 128
34777: PPUSH
34778: LD_VAR 0 1
34782: PPUSH
34783: CALL 41603 0 2
34787: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
34788: LD_ADDR_VAR 0 4
34792: PUSH
34793: DOUBLE
34794: LD_INT 1
34796: DEC
34797: ST_TO_ADDR
34798: LD_EXP 129
34802: PUSH
34803: LD_VAR 0 5
34807: ARRAY
34808: PUSH
34809: FOR_TO
34810: IFFALSE 34851
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
34812: LD_EXP 129
34816: PUSH
34817: LD_VAR 0 5
34821: ARRAY
34822: PUSH
34823: LD_VAR 0 4
34827: ARRAY
34828: PUSH
34829: LD_INT 1
34831: ARRAY
34832: PUSH
34833: LD_VAR 0 2
34837: EQUAL
34838: IFFALSE 34849
// KillUnit ( vehicle ) ;
34840: LD_VAR 0 2
34844: PPUSH
34845: CALL_OW 66
34849: GO 34809
34851: POP
34852: POP
// end ;
34853: LD_VAR 0 3
34857: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
34858: LD_EXP 133
34862: NOT
34863: IFFALSE 34898
34865: GO 34867
34867: DISABLE
// begin initMiner := true ;
34868: LD_ADDR_EXP 133
34872: PUSH
34873: LD_INT 1
34875: ST_TO_ADDR
// minersList := [ ] ;
34876: LD_ADDR_EXP 134
34880: PUSH
34881: EMPTY
34882: ST_TO_ADDR
// minerMinesList := [ ] ;
34883: LD_ADDR_EXP 135
34887: PUSH
34888: EMPTY
34889: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
34890: LD_ADDR_EXP 136
34894: PUSH
34895: LD_INT 5
34897: ST_TO_ADDR
// end ;
34898: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
34899: LD_EXP 133
34903: PUSH
34904: LD_INT 34
34906: PUSH
34907: LD_EXP 59
34911: PUSH
34912: EMPTY
34913: LIST
34914: LIST
34915: PPUSH
34916: CALL_OW 69
34920: AND
34921: IFFALSE 35384
34923: GO 34925
34925: DISABLE
34926: LD_INT 0
34928: PPUSH
34929: PPUSH
34930: PPUSH
34931: PPUSH
// begin enable ;
34932: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
34933: LD_ADDR_VAR 0 1
34937: PUSH
34938: LD_INT 34
34940: PUSH
34941: LD_EXP 59
34945: PUSH
34946: EMPTY
34947: LIST
34948: LIST
34949: PPUSH
34950: CALL_OW 69
34954: PUSH
34955: FOR_IN
34956: IFFALSE 35028
// begin if not i in minersList then
34958: LD_VAR 0 1
34962: PUSH
34963: LD_EXP 134
34967: IN
34968: NOT
34969: IFFALSE 35026
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
34971: LD_ADDR_EXP 134
34975: PUSH
34976: LD_EXP 134
34980: PPUSH
34981: LD_EXP 134
34985: PUSH
34986: LD_INT 1
34988: PLUS
34989: PPUSH
34990: LD_VAR 0 1
34994: PPUSH
34995: CALL_OW 1
34999: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
35000: LD_ADDR_EXP 135
35004: PUSH
35005: LD_EXP 135
35009: PPUSH
35010: LD_EXP 135
35014: PUSH
35015: LD_INT 1
35017: PLUS
35018: PPUSH
35019: EMPTY
35020: PPUSH
35021: CALL_OW 1
35025: ST_TO_ADDR
// end end ;
35026: GO 34955
35028: POP
35029: POP
// for i := minerMinesList downto 1 do
35030: LD_ADDR_VAR 0 1
35034: PUSH
35035: DOUBLE
35036: LD_EXP 135
35040: INC
35041: ST_TO_ADDR
35042: LD_INT 1
35044: PUSH
35045: FOR_DOWNTO
35046: IFFALSE 35382
// begin if IsLive ( minersList [ i ] ) then
35048: LD_EXP 134
35052: PUSH
35053: LD_VAR 0 1
35057: ARRAY
35058: PPUSH
35059: CALL_OW 300
35063: IFFALSE 35091
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
35065: LD_EXP 134
35069: PUSH
35070: LD_VAR 0 1
35074: ARRAY
35075: PPUSH
35076: LD_EXP 135
35080: PUSH
35081: LD_VAR 0 1
35085: ARRAY
35086: PPUSH
35087: CALL_OW 505
// if not minerMinesList [ i ] then
35091: LD_EXP 135
35095: PUSH
35096: LD_VAR 0 1
35100: ARRAY
35101: NOT
35102: IFFALSE 35106
// continue ;
35104: GO 35045
// for j := minerMinesList [ i ] downto 1 do
35106: LD_ADDR_VAR 0 2
35110: PUSH
35111: DOUBLE
35112: LD_EXP 135
35116: PUSH
35117: LD_VAR 0 1
35121: ARRAY
35122: INC
35123: ST_TO_ADDR
35124: LD_INT 1
35126: PUSH
35127: FOR_DOWNTO
35128: IFFALSE 35378
// begin side := GetSide ( minersList [ i ] ) ;
35130: LD_ADDR_VAR 0 3
35134: PUSH
35135: LD_EXP 134
35139: PUSH
35140: LD_VAR 0 1
35144: ARRAY
35145: PPUSH
35146: CALL_OW 255
35150: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
35151: LD_ADDR_VAR 0 4
35155: PUSH
35156: LD_EXP 135
35160: PUSH
35161: LD_VAR 0 1
35165: ARRAY
35166: PUSH
35167: LD_VAR 0 2
35171: ARRAY
35172: PUSH
35173: LD_INT 1
35175: ARRAY
35176: PPUSH
35177: LD_EXP 135
35181: PUSH
35182: LD_VAR 0 1
35186: ARRAY
35187: PUSH
35188: LD_VAR 0 2
35192: ARRAY
35193: PUSH
35194: LD_INT 2
35196: ARRAY
35197: PPUSH
35198: CALL_OW 428
35202: ST_TO_ADDR
// if not tmp then
35203: LD_VAR 0 4
35207: NOT
35208: IFFALSE 35212
// continue ;
35210: GO 35127
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
35212: LD_VAR 0 4
35216: PUSH
35217: LD_INT 81
35219: PUSH
35220: LD_VAR 0 3
35224: PUSH
35225: EMPTY
35226: LIST
35227: LIST
35228: PPUSH
35229: CALL_OW 69
35233: IN
35234: PUSH
35235: LD_EXP 135
35239: PUSH
35240: LD_VAR 0 1
35244: ARRAY
35245: PUSH
35246: LD_VAR 0 2
35250: ARRAY
35251: PUSH
35252: LD_INT 1
35254: ARRAY
35255: PPUSH
35256: LD_EXP 135
35260: PUSH
35261: LD_VAR 0 1
35265: ARRAY
35266: PUSH
35267: LD_VAR 0 2
35271: ARRAY
35272: PUSH
35273: LD_INT 2
35275: ARRAY
35276: PPUSH
35277: CALL_OW 458
35281: AND
35282: IFFALSE 35376
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
35284: LD_EXP 135
35288: PUSH
35289: LD_VAR 0 1
35293: ARRAY
35294: PUSH
35295: LD_VAR 0 2
35299: ARRAY
35300: PUSH
35301: LD_INT 1
35303: ARRAY
35304: PPUSH
35305: LD_EXP 135
35309: PUSH
35310: LD_VAR 0 1
35314: ARRAY
35315: PUSH
35316: LD_VAR 0 2
35320: ARRAY
35321: PUSH
35322: LD_INT 2
35324: ARRAY
35325: PPUSH
35326: LD_VAR 0 3
35330: PPUSH
35331: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
35335: LD_ADDR_EXP 135
35339: PUSH
35340: LD_EXP 135
35344: PPUSH
35345: LD_VAR 0 1
35349: PPUSH
35350: LD_EXP 135
35354: PUSH
35355: LD_VAR 0 1
35359: ARRAY
35360: PPUSH
35361: LD_VAR 0 2
35365: PPUSH
35366: CALL_OW 3
35370: PPUSH
35371: CALL_OW 1
35375: ST_TO_ADDR
// end ; end ;
35376: GO 35127
35378: POP
35379: POP
// end ;
35380: GO 35045
35382: POP
35383: POP
// end ;
35384: PPOPN 4
35386: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
35387: LD_INT 0
35389: PPUSH
35390: PPUSH
// result := false ;
35391: LD_ADDR_VAR 0 4
35395: PUSH
35396: LD_INT 0
35398: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
35399: LD_VAR 0 1
35403: PPUSH
35404: CALL_OW 264
35408: PUSH
35409: LD_EXP 59
35413: EQUAL
35414: NOT
35415: IFFALSE 35419
// exit ;
35417: GO 35659
// index := GetElementIndex ( minersList , unit ) ;
35419: LD_ADDR_VAR 0 5
35423: PUSH
35424: LD_EXP 134
35428: PPUSH
35429: LD_VAR 0 1
35433: PPUSH
35434: CALL 41603 0 2
35438: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
35439: LD_EXP 135
35443: PUSH
35444: LD_VAR 0 5
35448: ARRAY
35449: PUSH
35450: LD_EXP 136
35454: GREATEREQUAL
35455: IFFALSE 35459
// exit ;
35457: GO 35659
// ComMoveXY ( unit , x , y ) ;
35459: LD_VAR 0 1
35463: PPUSH
35464: LD_VAR 0 2
35468: PPUSH
35469: LD_VAR 0 3
35473: PPUSH
35474: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
35478: LD_INT 35
35480: PPUSH
35481: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
35485: LD_VAR 0 1
35489: PPUSH
35490: LD_VAR 0 2
35494: PPUSH
35495: LD_VAR 0 3
35499: PPUSH
35500: CALL 72000 0 3
35504: NOT
35505: PUSH
35506: LD_VAR 0 1
35510: PPUSH
35511: CALL_OW 314
35515: AND
35516: IFFALSE 35520
// exit ;
35518: GO 35659
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
35520: LD_VAR 0 2
35524: PPUSH
35525: LD_VAR 0 3
35529: PPUSH
35530: CALL_OW 428
35534: PUSH
35535: LD_VAR 0 1
35539: EQUAL
35540: PUSH
35541: LD_VAR 0 1
35545: PPUSH
35546: CALL_OW 314
35550: NOT
35551: AND
35552: IFFALSE 35478
// PlaySoundXY ( x , y , PlantMine ) ;
35554: LD_VAR 0 2
35558: PPUSH
35559: LD_VAR 0 3
35563: PPUSH
35564: LD_STRING PlantMine
35566: PPUSH
35567: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
35571: LD_VAR 0 2
35575: PPUSH
35576: LD_VAR 0 3
35580: PPUSH
35581: LD_VAR 0 1
35585: PPUSH
35586: CALL_OW 255
35590: PPUSH
35591: LD_INT 0
35593: PPUSH
35594: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
35598: LD_ADDR_EXP 135
35602: PUSH
35603: LD_EXP 135
35607: PPUSH
35608: LD_VAR 0 5
35612: PUSH
35613: LD_EXP 135
35617: PUSH
35618: LD_VAR 0 5
35622: ARRAY
35623: PUSH
35624: LD_INT 1
35626: PLUS
35627: PUSH
35628: EMPTY
35629: LIST
35630: LIST
35631: PPUSH
35632: LD_VAR 0 2
35636: PUSH
35637: LD_VAR 0 3
35641: PUSH
35642: EMPTY
35643: LIST
35644: LIST
35645: PPUSH
35646: CALL 41818 0 3
35650: ST_TO_ADDR
// result := true ;
35651: LD_ADDR_VAR 0 4
35655: PUSH
35656: LD_INT 1
35658: ST_TO_ADDR
// end ;
35659: LD_VAR 0 4
35663: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
35664: LD_INT 0
35666: PPUSH
35667: PPUSH
35668: PPUSH
// if not unit in minersList then
35669: LD_VAR 0 1
35673: PUSH
35674: LD_EXP 134
35678: IN
35679: NOT
35680: IFFALSE 35684
// exit ;
35682: GO 36076
// index := GetElementIndex ( minersList , unit ) ;
35684: LD_ADDR_VAR 0 6
35688: PUSH
35689: LD_EXP 134
35693: PPUSH
35694: LD_VAR 0 1
35698: PPUSH
35699: CALL 41603 0 2
35703: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
35704: LD_ADDR_VAR 0 5
35708: PUSH
35709: DOUBLE
35710: LD_EXP 135
35714: PUSH
35715: LD_VAR 0 6
35719: ARRAY
35720: INC
35721: ST_TO_ADDR
35722: LD_INT 1
35724: PUSH
35725: FOR_DOWNTO
35726: IFFALSE 35887
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
35728: LD_EXP 135
35732: PUSH
35733: LD_VAR 0 6
35737: ARRAY
35738: PUSH
35739: LD_VAR 0 5
35743: ARRAY
35744: PUSH
35745: LD_INT 1
35747: ARRAY
35748: PUSH
35749: LD_VAR 0 2
35753: EQUAL
35754: PUSH
35755: LD_EXP 135
35759: PUSH
35760: LD_VAR 0 6
35764: ARRAY
35765: PUSH
35766: LD_VAR 0 5
35770: ARRAY
35771: PUSH
35772: LD_INT 2
35774: ARRAY
35775: PUSH
35776: LD_VAR 0 3
35780: EQUAL
35781: AND
35782: IFFALSE 35885
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
35784: LD_EXP 135
35788: PUSH
35789: LD_VAR 0 6
35793: ARRAY
35794: PUSH
35795: LD_VAR 0 5
35799: ARRAY
35800: PUSH
35801: LD_INT 1
35803: ARRAY
35804: PPUSH
35805: LD_EXP 135
35809: PUSH
35810: LD_VAR 0 6
35814: ARRAY
35815: PUSH
35816: LD_VAR 0 5
35820: ARRAY
35821: PUSH
35822: LD_INT 2
35824: ARRAY
35825: PPUSH
35826: LD_VAR 0 1
35830: PPUSH
35831: CALL_OW 255
35835: PPUSH
35836: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
35840: LD_ADDR_EXP 135
35844: PUSH
35845: LD_EXP 135
35849: PPUSH
35850: LD_VAR 0 6
35854: PPUSH
35855: LD_EXP 135
35859: PUSH
35860: LD_VAR 0 6
35864: ARRAY
35865: PPUSH
35866: LD_VAR 0 5
35870: PPUSH
35871: CALL_OW 3
35875: PPUSH
35876: CALL_OW 1
35880: ST_TO_ADDR
// exit ;
35881: POP
35882: POP
35883: GO 36076
// end ; end ;
35885: GO 35725
35887: POP
35888: POP
// for i := minerMinesList [ index ] downto 1 do
35889: LD_ADDR_VAR 0 5
35893: PUSH
35894: DOUBLE
35895: LD_EXP 135
35899: PUSH
35900: LD_VAR 0 6
35904: ARRAY
35905: INC
35906: ST_TO_ADDR
35907: LD_INT 1
35909: PUSH
35910: FOR_DOWNTO
35911: IFFALSE 36074
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
35913: LD_EXP 135
35917: PUSH
35918: LD_VAR 0 6
35922: ARRAY
35923: PUSH
35924: LD_VAR 0 5
35928: ARRAY
35929: PUSH
35930: LD_INT 1
35932: ARRAY
35933: PPUSH
35934: LD_EXP 135
35938: PUSH
35939: LD_VAR 0 6
35943: ARRAY
35944: PUSH
35945: LD_VAR 0 5
35949: ARRAY
35950: PUSH
35951: LD_INT 2
35953: ARRAY
35954: PPUSH
35955: LD_VAR 0 2
35959: PPUSH
35960: LD_VAR 0 3
35964: PPUSH
35965: CALL_OW 298
35969: PUSH
35970: LD_INT 6
35972: LESS
35973: IFFALSE 36072
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
35975: LD_EXP 135
35979: PUSH
35980: LD_VAR 0 6
35984: ARRAY
35985: PUSH
35986: LD_VAR 0 5
35990: ARRAY
35991: PUSH
35992: LD_INT 1
35994: ARRAY
35995: PPUSH
35996: LD_EXP 135
36000: PUSH
36001: LD_VAR 0 6
36005: ARRAY
36006: PUSH
36007: LD_VAR 0 5
36011: ARRAY
36012: PUSH
36013: LD_INT 2
36015: ARRAY
36016: PPUSH
36017: LD_VAR 0 1
36021: PPUSH
36022: CALL_OW 255
36026: PPUSH
36027: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
36031: LD_ADDR_EXP 135
36035: PUSH
36036: LD_EXP 135
36040: PPUSH
36041: LD_VAR 0 6
36045: PPUSH
36046: LD_EXP 135
36050: PUSH
36051: LD_VAR 0 6
36055: ARRAY
36056: PPUSH
36057: LD_VAR 0 5
36061: PPUSH
36062: CALL_OW 3
36066: PPUSH
36067: CALL_OW 1
36071: ST_TO_ADDR
// end ; end ;
36072: GO 35910
36074: POP
36075: POP
// end ;
36076: LD_VAR 0 4
36080: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
36081: LD_INT 0
36083: PPUSH
36084: PPUSH
36085: PPUSH
36086: PPUSH
36087: PPUSH
36088: PPUSH
36089: PPUSH
36090: PPUSH
36091: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
36092: LD_VAR 0 1
36096: PPUSH
36097: CALL_OW 264
36101: PUSH
36102: LD_EXP 59
36106: EQUAL
36107: NOT
36108: PUSH
36109: LD_VAR 0 1
36113: PUSH
36114: LD_EXP 134
36118: IN
36119: NOT
36120: OR
36121: IFFALSE 36125
// exit ;
36123: GO 36447
// index := GetElementIndex ( minersList , unit ) ;
36125: LD_ADDR_VAR 0 6
36129: PUSH
36130: LD_EXP 134
36134: PPUSH
36135: LD_VAR 0 1
36139: PPUSH
36140: CALL 41603 0 2
36144: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
36145: LD_ADDR_VAR 0 8
36149: PUSH
36150: LD_EXP 136
36154: PUSH
36155: LD_EXP 135
36159: PUSH
36160: LD_VAR 0 6
36164: ARRAY
36165: MINUS
36166: ST_TO_ADDR
// if not minesFreeAmount then
36167: LD_VAR 0 8
36171: NOT
36172: IFFALSE 36176
// exit ;
36174: GO 36447
// tmp := [ ] ;
36176: LD_ADDR_VAR 0 7
36180: PUSH
36181: EMPTY
36182: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
36183: LD_ADDR_VAR 0 5
36187: PUSH
36188: DOUBLE
36189: LD_INT 1
36191: DEC
36192: ST_TO_ADDR
36193: LD_VAR 0 8
36197: PUSH
36198: FOR_TO
36199: IFFALSE 36394
// begin _d := rand ( 0 , 5 ) ;
36201: LD_ADDR_VAR 0 11
36205: PUSH
36206: LD_INT 0
36208: PPUSH
36209: LD_INT 5
36211: PPUSH
36212: CALL_OW 12
36216: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
36217: LD_ADDR_VAR 0 12
36221: PUSH
36222: LD_INT 2
36224: PPUSH
36225: LD_INT 6
36227: PPUSH
36228: CALL_OW 12
36232: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
36233: LD_ADDR_VAR 0 9
36237: PUSH
36238: LD_VAR 0 2
36242: PPUSH
36243: LD_VAR 0 11
36247: PPUSH
36248: LD_VAR 0 12
36252: PPUSH
36253: CALL_OW 272
36257: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
36258: LD_ADDR_VAR 0 10
36262: PUSH
36263: LD_VAR 0 3
36267: PPUSH
36268: LD_VAR 0 11
36272: PPUSH
36273: LD_VAR 0 12
36277: PPUSH
36278: CALL_OW 273
36282: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
36283: LD_VAR 0 9
36287: PPUSH
36288: LD_VAR 0 10
36292: PPUSH
36293: CALL_OW 488
36297: PUSH
36298: LD_VAR 0 9
36302: PUSH
36303: LD_VAR 0 10
36307: PUSH
36308: EMPTY
36309: LIST
36310: LIST
36311: PUSH
36312: LD_VAR 0 7
36316: IN
36317: NOT
36318: AND
36319: PUSH
36320: LD_VAR 0 9
36324: PPUSH
36325: LD_VAR 0 10
36329: PPUSH
36330: CALL_OW 458
36334: NOT
36335: AND
36336: IFFALSE 36378
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
36338: LD_ADDR_VAR 0 7
36342: PUSH
36343: LD_VAR 0 7
36347: PPUSH
36348: LD_VAR 0 7
36352: PUSH
36353: LD_INT 1
36355: PLUS
36356: PPUSH
36357: LD_VAR 0 9
36361: PUSH
36362: LD_VAR 0 10
36366: PUSH
36367: EMPTY
36368: LIST
36369: LIST
36370: PPUSH
36371: CALL_OW 1
36375: ST_TO_ADDR
36376: GO 36392
// i := i - 1 ;
36378: LD_ADDR_VAR 0 5
36382: PUSH
36383: LD_VAR 0 5
36387: PUSH
36388: LD_INT 1
36390: MINUS
36391: ST_TO_ADDR
// end ;
36392: GO 36198
36394: POP
36395: POP
// for i in tmp do
36396: LD_ADDR_VAR 0 5
36400: PUSH
36401: LD_VAR 0 7
36405: PUSH
36406: FOR_IN
36407: IFFALSE 36445
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
36409: LD_VAR 0 1
36413: PPUSH
36414: LD_VAR 0 5
36418: PUSH
36419: LD_INT 1
36421: ARRAY
36422: PPUSH
36423: LD_VAR 0 5
36427: PUSH
36428: LD_INT 2
36430: ARRAY
36431: PPUSH
36432: CALL 35387 0 3
36436: NOT
36437: IFFALSE 36443
// exit ;
36439: POP
36440: POP
36441: GO 36447
36443: GO 36406
36445: POP
36446: POP
// end ;
36447: LD_VAR 0 4
36451: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
36452: LD_INT 0
36454: PPUSH
36455: PPUSH
36456: PPUSH
36457: PPUSH
36458: PPUSH
36459: PPUSH
36460: PPUSH
// if not GetClass ( unit ) = class_sniper then
36461: LD_VAR 0 1
36465: PPUSH
36466: CALL_OW 257
36470: PUSH
36471: LD_INT 5
36473: EQUAL
36474: NOT
36475: IFFALSE 36479
// exit ;
36477: GO 36867
// dist := 8 ;
36479: LD_ADDR_VAR 0 5
36483: PUSH
36484: LD_INT 8
36486: ST_TO_ADDR
// viewRange := 12 ;
36487: LD_ADDR_VAR 0 7
36491: PUSH
36492: LD_INT 12
36494: ST_TO_ADDR
// side := GetSide ( unit ) ;
36495: LD_ADDR_VAR 0 6
36499: PUSH
36500: LD_VAR 0 1
36504: PPUSH
36505: CALL_OW 255
36509: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
36510: LD_INT 61
36512: PPUSH
36513: LD_VAR 0 6
36517: PPUSH
36518: CALL_OW 321
36522: PUSH
36523: LD_INT 2
36525: EQUAL
36526: IFFALSE 36536
// viewRange := 16 ;
36528: LD_ADDR_VAR 0 7
36532: PUSH
36533: LD_INT 16
36535: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
36536: LD_VAR 0 1
36540: PPUSH
36541: LD_VAR 0 2
36545: PPUSH
36546: LD_VAR 0 3
36550: PPUSH
36551: CALL_OW 297
36555: PUSH
36556: LD_VAR 0 5
36560: GREATER
36561: IFFALSE 36640
// begin ComMoveXY ( unit , x , y ) ;
36563: LD_VAR 0 1
36567: PPUSH
36568: LD_VAR 0 2
36572: PPUSH
36573: LD_VAR 0 3
36577: PPUSH
36578: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
36582: LD_INT 35
36584: PPUSH
36585: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
36589: LD_VAR 0 1
36593: PPUSH
36594: LD_VAR 0 2
36598: PPUSH
36599: LD_VAR 0 3
36603: PPUSH
36604: CALL 72000 0 3
36608: NOT
36609: IFFALSE 36613
// exit ;
36611: GO 36867
// until GetDistUnitXY ( unit , x , y ) < dist ;
36613: LD_VAR 0 1
36617: PPUSH
36618: LD_VAR 0 2
36622: PPUSH
36623: LD_VAR 0 3
36627: PPUSH
36628: CALL_OW 297
36632: PUSH
36633: LD_VAR 0 5
36637: LESS
36638: IFFALSE 36582
// end ; ComTurnXY ( unit , x , y ) ;
36640: LD_VAR 0 1
36644: PPUSH
36645: LD_VAR 0 2
36649: PPUSH
36650: LD_VAR 0 3
36654: PPUSH
36655: CALL_OW 118
// wait ( 5 ) ;
36659: LD_INT 5
36661: PPUSH
36662: CALL_OW 67
// _d := GetDir ( unit ) ;
36666: LD_ADDR_VAR 0 10
36670: PUSH
36671: LD_VAR 0 1
36675: PPUSH
36676: CALL_OW 254
36680: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
36681: LD_ADDR_VAR 0 8
36685: PUSH
36686: LD_VAR 0 1
36690: PPUSH
36691: CALL_OW 250
36695: PPUSH
36696: LD_VAR 0 10
36700: PPUSH
36701: LD_VAR 0 5
36705: PPUSH
36706: CALL_OW 272
36710: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
36711: LD_ADDR_VAR 0 9
36715: PUSH
36716: LD_VAR 0 1
36720: PPUSH
36721: CALL_OW 251
36725: PPUSH
36726: LD_VAR 0 10
36730: PPUSH
36731: LD_VAR 0 5
36735: PPUSH
36736: CALL_OW 273
36740: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
36741: LD_VAR 0 8
36745: PPUSH
36746: LD_VAR 0 9
36750: PPUSH
36751: CALL_OW 488
36755: NOT
36756: IFFALSE 36760
// exit ;
36758: GO 36867
// ComAnimCustom ( unit , 1 ) ;
36760: LD_VAR 0 1
36764: PPUSH
36765: LD_INT 1
36767: PPUSH
36768: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
36772: LD_VAR 0 8
36776: PPUSH
36777: LD_VAR 0 9
36781: PPUSH
36782: LD_VAR 0 6
36786: PPUSH
36787: LD_VAR 0 7
36791: PPUSH
36792: CALL_OW 330
// repeat wait ( 1 ) ;
36796: LD_INT 1
36798: PPUSH
36799: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
36803: LD_VAR 0 1
36807: PPUSH
36808: CALL_OW 316
36812: PUSH
36813: LD_VAR 0 1
36817: PPUSH
36818: CALL_OW 314
36822: OR
36823: PUSH
36824: LD_VAR 0 1
36828: PPUSH
36829: CALL_OW 302
36833: NOT
36834: OR
36835: PUSH
36836: LD_VAR 0 1
36840: PPUSH
36841: CALL_OW 301
36845: OR
36846: IFFALSE 36796
// RemoveSeeing ( _x , _y , side ) ;
36848: LD_VAR 0 8
36852: PPUSH
36853: LD_VAR 0 9
36857: PPUSH
36858: LD_VAR 0 6
36862: PPUSH
36863: CALL_OW 331
// end ; end_of_file
36867: LD_VAR 0 4
36871: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
36872: LD_INT 0
36874: PPUSH
36875: PPUSH
// if exist_mode then
36876: LD_VAR 0 2
36880: IFFALSE 36905
// unit := CreateCharacter ( prefix & ident ) else
36882: LD_ADDR_VAR 0 5
36886: PUSH
36887: LD_VAR 0 3
36891: PUSH
36892: LD_VAR 0 1
36896: STR
36897: PPUSH
36898: CALL_OW 34
36902: ST_TO_ADDR
36903: GO 36920
// unit := NewCharacter ( ident ) ;
36905: LD_ADDR_VAR 0 5
36909: PUSH
36910: LD_VAR 0 1
36914: PPUSH
36915: CALL_OW 25
36919: ST_TO_ADDR
// result := unit ;
36920: LD_ADDR_VAR 0 4
36924: PUSH
36925: LD_VAR 0 5
36929: ST_TO_ADDR
// end ;
36930: LD_VAR 0 4
36934: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
36935: LD_INT 0
36937: PPUSH
36938: PPUSH
// if not side or not nation then
36939: LD_VAR 0 1
36943: NOT
36944: PUSH
36945: LD_VAR 0 2
36949: NOT
36950: OR
36951: IFFALSE 36955
// exit ;
36953: GO 37719
// case nation of nation_american :
36955: LD_VAR 0 2
36959: PUSH
36960: LD_INT 1
36962: DOUBLE
36963: EQUAL
36964: IFTRUE 36968
36966: GO 37182
36968: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
36969: LD_ADDR_VAR 0 4
36973: PUSH
36974: LD_INT 35
36976: PUSH
36977: LD_INT 45
36979: PUSH
36980: LD_INT 46
36982: PUSH
36983: LD_INT 47
36985: PUSH
36986: LD_INT 82
36988: PUSH
36989: LD_INT 83
36991: PUSH
36992: LD_INT 84
36994: PUSH
36995: LD_INT 85
36997: PUSH
36998: LD_INT 86
37000: PUSH
37001: LD_INT 1
37003: PUSH
37004: LD_INT 2
37006: PUSH
37007: LD_INT 6
37009: PUSH
37010: LD_INT 15
37012: PUSH
37013: LD_INT 16
37015: PUSH
37016: LD_INT 7
37018: PUSH
37019: LD_INT 12
37021: PUSH
37022: LD_INT 13
37024: PUSH
37025: LD_INT 10
37027: PUSH
37028: LD_INT 14
37030: PUSH
37031: LD_INT 20
37033: PUSH
37034: LD_INT 21
37036: PUSH
37037: LD_INT 22
37039: PUSH
37040: LD_INT 25
37042: PUSH
37043: LD_INT 32
37045: PUSH
37046: LD_INT 27
37048: PUSH
37049: LD_INT 36
37051: PUSH
37052: LD_INT 69
37054: PUSH
37055: LD_INT 39
37057: PUSH
37058: LD_INT 34
37060: PUSH
37061: LD_INT 40
37063: PUSH
37064: LD_INT 48
37066: PUSH
37067: LD_INT 49
37069: PUSH
37070: LD_INT 50
37072: PUSH
37073: LD_INT 51
37075: PUSH
37076: LD_INT 52
37078: PUSH
37079: LD_INT 53
37081: PUSH
37082: LD_INT 54
37084: PUSH
37085: LD_INT 55
37087: PUSH
37088: LD_INT 56
37090: PUSH
37091: LD_INT 57
37093: PUSH
37094: LD_INT 58
37096: PUSH
37097: LD_INT 59
37099: PUSH
37100: LD_INT 60
37102: PUSH
37103: LD_INT 61
37105: PUSH
37106: LD_INT 62
37108: PUSH
37109: LD_INT 80
37111: PUSH
37112: LD_INT 82
37114: PUSH
37115: LD_INT 83
37117: PUSH
37118: LD_INT 84
37120: PUSH
37121: LD_INT 85
37123: PUSH
37124: LD_INT 86
37126: PUSH
37127: EMPTY
37128: LIST
37129: LIST
37130: LIST
37131: LIST
37132: LIST
37133: LIST
37134: LIST
37135: LIST
37136: LIST
37137: LIST
37138: LIST
37139: LIST
37140: LIST
37141: LIST
37142: LIST
37143: LIST
37144: LIST
37145: LIST
37146: LIST
37147: LIST
37148: LIST
37149: LIST
37150: LIST
37151: LIST
37152: LIST
37153: LIST
37154: LIST
37155: LIST
37156: LIST
37157: LIST
37158: LIST
37159: LIST
37160: LIST
37161: LIST
37162: LIST
37163: LIST
37164: LIST
37165: LIST
37166: LIST
37167: LIST
37168: LIST
37169: LIST
37170: LIST
37171: LIST
37172: LIST
37173: LIST
37174: LIST
37175: LIST
37176: LIST
37177: LIST
37178: LIST
37179: ST_TO_ADDR
37180: GO 37643
37182: LD_INT 2
37184: DOUBLE
37185: EQUAL
37186: IFTRUE 37190
37188: GO 37412
37190: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
37191: LD_ADDR_VAR 0 4
37195: PUSH
37196: LD_INT 35
37198: PUSH
37199: LD_INT 45
37201: PUSH
37202: LD_INT 46
37204: PUSH
37205: LD_INT 47
37207: PUSH
37208: LD_INT 82
37210: PUSH
37211: LD_INT 83
37213: PUSH
37214: LD_INT 84
37216: PUSH
37217: LD_INT 85
37219: PUSH
37220: LD_INT 87
37222: PUSH
37223: LD_INT 70
37225: PUSH
37226: LD_INT 1
37228: PUSH
37229: LD_INT 11
37231: PUSH
37232: LD_INT 3
37234: PUSH
37235: LD_INT 4
37237: PUSH
37238: LD_INT 5
37240: PUSH
37241: LD_INT 6
37243: PUSH
37244: LD_INT 15
37246: PUSH
37247: LD_INT 18
37249: PUSH
37250: LD_INT 7
37252: PUSH
37253: LD_INT 17
37255: PUSH
37256: LD_INT 8
37258: PUSH
37259: LD_INT 20
37261: PUSH
37262: LD_INT 21
37264: PUSH
37265: LD_INT 22
37267: PUSH
37268: LD_INT 72
37270: PUSH
37271: LD_INT 26
37273: PUSH
37274: LD_INT 69
37276: PUSH
37277: LD_INT 39
37279: PUSH
37280: LD_INT 40
37282: PUSH
37283: LD_INT 41
37285: PUSH
37286: LD_INT 42
37288: PUSH
37289: LD_INT 43
37291: PUSH
37292: LD_INT 48
37294: PUSH
37295: LD_INT 49
37297: PUSH
37298: LD_INT 50
37300: PUSH
37301: LD_INT 51
37303: PUSH
37304: LD_INT 52
37306: PUSH
37307: LD_INT 53
37309: PUSH
37310: LD_INT 54
37312: PUSH
37313: LD_INT 55
37315: PUSH
37316: LD_INT 56
37318: PUSH
37319: LD_INT 60
37321: PUSH
37322: LD_INT 61
37324: PUSH
37325: LD_INT 62
37327: PUSH
37328: LD_INT 66
37330: PUSH
37331: LD_INT 67
37333: PUSH
37334: LD_INT 68
37336: PUSH
37337: LD_INT 81
37339: PUSH
37340: LD_INT 82
37342: PUSH
37343: LD_INT 83
37345: PUSH
37346: LD_INT 84
37348: PUSH
37349: LD_INT 85
37351: PUSH
37352: LD_INT 87
37354: PUSH
37355: EMPTY
37356: LIST
37357: LIST
37358: LIST
37359: LIST
37360: LIST
37361: LIST
37362: LIST
37363: LIST
37364: LIST
37365: LIST
37366: LIST
37367: LIST
37368: LIST
37369: LIST
37370: LIST
37371: LIST
37372: LIST
37373: LIST
37374: LIST
37375: LIST
37376: LIST
37377: LIST
37378: LIST
37379: LIST
37380: LIST
37381: LIST
37382: LIST
37383: LIST
37384: LIST
37385: LIST
37386: LIST
37387: LIST
37388: LIST
37389: LIST
37390: LIST
37391: LIST
37392: LIST
37393: LIST
37394: LIST
37395: LIST
37396: LIST
37397: LIST
37398: LIST
37399: LIST
37400: LIST
37401: LIST
37402: LIST
37403: LIST
37404: LIST
37405: LIST
37406: LIST
37407: LIST
37408: LIST
37409: ST_TO_ADDR
37410: GO 37643
37412: LD_INT 3
37414: DOUBLE
37415: EQUAL
37416: IFTRUE 37420
37418: GO 37642
37420: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
37421: LD_ADDR_VAR 0 4
37425: PUSH
37426: LD_INT 46
37428: PUSH
37429: LD_INT 47
37431: PUSH
37432: LD_INT 1
37434: PUSH
37435: LD_INT 2
37437: PUSH
37438: LD_INT 82
37440: PUSH
37441: LD_INT 83
37443: PUSH
37444: LD_INT 84
37446: PUSH
37447: LD_INT 85
37449: PUSH
37450: LD_INT 86
37452: PUSH
37453: LD_INT 11
37455: PUSH
37456: LD_INT 9
37458: PUSH
37459: LD_INT 20
37461: PUSH
37462: LD_INT 19
37464: PUSH
37465: LD_INT 21
37467: PUSH
37468: LD_INT 24
37470: PUSH
37471: LD_INT 22
37473: PUSH
37474: LD_INT 25
37476: PUSH
37477: LD_INT 28
37479: PUSH
37480: LD_INT 29
37482: PUSH
37483: LD_INT 30
37485: PUSH
37486: LD_INT 31
37488: PUSH
37489: LD_INT 37
37491: PUSH
37492: LD_INT 38
37494: PUSH
37495: LD_INT 32
37497: PUSH
37498: LD_INT 27
37500: PUSH
37501: LD_INT 33
37503: PUSH
37504: LD_INT 69
37506: PUSH
37507: LD_INT 39
37509: PUSH
37510: LD_INT 34
37512: PUSH
37513: LD_INT 40
37515: PUSH
37516: LD_INT 71
37518: PUSH
37519: LD_INT 23
37521: PUSH
37522: LD_INT 44
37524: PUSH
37525: LD_INT 48
37527: PUSH
37528: LD_INT 49
37530: PUSH
37531: LD_INT 50
37533: PUSH
37534: LD_INT 51
37536: PUSH
37537: LD_INT 52
37539: PUSH
37540: LD_INT 53
37542: PUSH
37543: LD_INT 54
37545: PUSH
37546: LD_INT 55
37548: PUSH
37549: LD_INT 56
37551: PUSH
37552: LD_INT 57
37554: PUSH
37555: LD_INT 58
37557: PUSH
37558: LD_INT 59
37560: PUSH
37561: LD_INT 63
37563: PUSH
37564: LD_INT 64
37566: PUSH
37567: LD_INT 65
37569: PUSH
37570: LD_INT 82
37572: PUSH
37573: LD_INT 83
37575: PUSH
37576: LD_INT 84
37578: PUSH
37579: LD_INT 85
37581: PUSH
37582: LD_INT 86
37584: PUSH
37585: EMPTY
37586: LIST
37587: LIST
37588: LIST
37589: LIST
37590: LIST
37591: LIST
37592: LIST
37593: LIST
37594: LIST
37595: LIST
37596: LIST
37597: LIST
37598: LIST
37599: LIST
37600: LIST
37601: LIST
37602: LIST
37603: LIST
37604: LIST
37605: LIST
37606: LIST
37607: LIST
37608: LIST
37609: LIST
37610: LIST
37611: LIST
37612: LIST
37613: LIST
37614: LIST
37615: LIST
37616: LIST
37617: LIST
37618: LIST
37619: LIST
37620: LIST
37621: LIST
37622: LIST
37623: LIST
37624: LIST
37625: LIST
37626: LIST
37627: LIST
37628: LIST
37629: LIST
37630: LIST
37631: LIST
37632: LIST
37633: LIST
37634: LIST
37635: LIST
37636: LIST
37637: LIST
37638: LIST
37639: ST_TO_ADDR
37640: GO 37643
37642: POP
// if state > - 1 and state < 3 then
37643: LD_VAR 0 3
37647: PUSH
37648: LD_INT 1
37650: NEG
37651: GREATER
37652: PUSH
37653: LD_VAR 0 3
37657: PUSH
37658: LD_INT 3
37660: LESS
37661: AND
37662: IFFALSE 37719
// for i in result do
37664: LD_ADDR_VAR 0 5
37668: PUSH
37669: LD_VAR 0 4
37673: PUSH
37674: FOR_IN
37675: IFFALSE 37717
// if GetTech ( i , side ) <> state then
37677: LD_VAR 0 5
37681: PPUSH
37682: LD_VAR 0 1
37686: PPUSH
37687: CALL_OW 321
37691: PUSH
37692: LD_VAR 0 3
37696: NONEQUAL
37697: IFFALSE 37715
// result := result diff i ;
37699: LD_ADDR_VAR 0 4
37703: PUSH
37704: LD_VAR 0 4
37708: PUSH
37709: LD_VAR 0 5
37713: DIFF
37714: ST_TO_ADDR
37715: GO 37674
37717: POP
37718: POP
// end ;
37719: LD_VAR 0 4
37723: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
37724: LD_INT 0
37726: PPUSH
37727: PPUSH
37728: PPUSH
// result := true ;
37729: LD_ADDR_VAR 0 3
37733: PUSH
37734: LD_INT 1
37736: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
37737: LD_ADDR_VAR 0 5
37741: PUSH
37742: LD_VAR 0 2
37746: PPUSH
37747: CALL_OW 480
37751: ST_TO_ADDR
// if not tmp then
37752: LD_VAR 0 5
37756: NOT
37757: IFFALSE 37761
// exit ;
37759: GO 37810
// for i in tmp do
37761: LD_ADDR_VAR 0 4
37765: PUSH
37766: LD_VAR 0 5
37770: PUSH
37771: FOR_IN
37772: IFFALSE 37808
// if GetTech ( i , side ) <> state_researched then
37774: LD_VAR 0 4
37778: PPUSH
37779: LD_VAR 0 1
37783: PPUSH
37784: CALL_OW 321
37788: PUSH
37789: LD_INT 2
37791: NONEQUAL
37792: IFFALSE 37806
// begin result := false ;
37794: LD_ADDR_VAR 0 3
37798: PUSH
37799: LD_INT 0
37801: ST_TO_ADDR
// exit ;
37802: POP
37803: POP
37804: GO 37810
// end ;
37806: GO 37771
37808: POP
37809: POP
// end ;
37810: LD_VAR 0 3
37814: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
37815: LD_INT 0
37817: PPUSH
37818: PPUSH
37819: PPUSH
37820: PPUSH
37821: PPUSH
37822: PPUSH
37823: PPUSH
37824: PPUSH
37825: PPUSH
37826: PPUSH
37827: PPUSH
37828: PPUSH
37829: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
37830: LD_VAR 0 1
37834: NOT
37835: PUSH
37836: LD_VAR 0 1
37840: PPUSH
37841: CALL_OW 257
37845: PUSH
37846: LD_INT 9
37848: NONEQUAL
37849: OR
37850: IFFALSE 37854
// exit ;
37852: GO 38427
// side := GetSide ( unit ) ;
37854: LD_ADDR_VAR 0 9
37858: PUSH
37859: LD_VAR 0 1
37863: PPUSH
37864: CALL_OW 255
37868: ST_TO_ADDR
// tech_space := tech_spacanom ;
37869: LD_ADDR_VAR 0 12
37873: PUSH
37874: LD_INT 29
37876: ST_TO_ADDR
// tech_time := tech_taurad ;
37877: LD_ADDR_VAR 0 13
37881: PUSH
37882: LD_INT 28
37884: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
37885: LD_ADDR_VAR 0 11
37889: PUSH
37890: LD_VAR 0 1
37894: PPUSH
37895: CALL_OW 310
37899: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
37900: LD_VAR 0 11
37904: PPUSH
37905: CALL_OW 247
37909: PUSH
37910: LD_INT 2
37912: EQUAL
37913: IFFALSE 37917
// exit ;
37915: GO 38427
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37917: LD_ADDR_VAR 0 8
37921: PUSH
37922: LD_INT 81
37924: PUSH
37925: LD_VAR 0 9
37929: PUSH
37930: EMPTY
37931: LIST
37932: LIST
37933: PUSH
37934: LD_INT 3
37936: PUSH
37937: LD_INT 21
37939: PUSH
37940: LD_INT 3
37942: PUSH
37943: EMPTY
37944: LIST
37945: LIST
37946: PUSH
37947: EMPTY
37948: LIST
37949: LIST
37950: PUSH
37951: EMPTY
37952: LIST
37953: LIST
37954: PPUSH
37955: CALL_OW 69
37959: ST_TO_ADDR
// if not tmp then
37960: LD_VAR 0 8
37964: NOT
37965: IFFALSE 37969
// exit ;
37967: GO 38427
// if in_unit then
37969: LD_VAR 0 11
37973: IFFALSE 37997
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
37975: LD_ADDR_VAR 0 10
37979: PUSH
37980: LD_VAR 0 8
37984: PPUSH
37985: LD_VAR 0 11
37989: PPUSH
37990: CALL_OW 74
37994: ST_TO_ADDR
37995: GO 38017
// enemy := NearestUnitToUnit ( tmp , unit ) ;
37997: LD_ADDR_VAR 0 10
38001: PUSH
38002: LD_VAR 0 8
38006: PPUSH
38007: LD_VAR 0 1
38011: PPUSH
38012: CALL_OW 74
38016: ST_TO_ADDR
// if not enemy then
38017: LD_VAR 0 10
38021: NOT
38022: IFFALSE 38026
// exit ;
38024: GO 38427
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
38026: LD_VAR 0 11
38030: PUSH
38031: LD_VAR 0 11
38035: PPUSH
38036: LD_VAR 0 10
38040: PPUSH
38041: CALL_OW 296
38045: PUSH
38046: LD_INT 13
38048: GREATER
38049: AND
38050: PUSH
38051: LD_VAR 0 1
38055: PPUSH
38056: LD_VAR 0 10
38060: PPUSH
38061: CALL_OW 296
38065: PUSH
38066: LD_INT 12
38068: GREATER
38069: OR
38070: IFFALSE 38074
// exit ;
38072: GO 38427
// missile := [ 1 ] ;
38074: LD_ADDR_VAR 0 14
38078: PUSH
38079: LD_INT 1
38081: PUSH
38082: EMPTY
38083: LIST
38084: ST_TO_ADDR
// if Researched ( side , tech_space ) then
38085: LD_VAR 0 9
38089: PPUSH
38090: LD_VAR 0 12
38094: PPUSH
38095: CALL_OW 325
38099: IFFALSE 38128
// missile := Insert ( missile , missile + 1 , 2 ) ;
38101: LD_ADDR_VAR 0 14
38105: PUSH
38106: LD_VAR 0 14
38110: PPUSH
38111: LD_VAR 0 14
38115: PUSH
38116: LD_INT 1
38118: PLUS
38119: PPUSH
38120: LD_INT 2
38122: PPUSH
38123: CALL_OW 2
38127: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
38128: LD_VAR 0 9
38132: PPUSH
38133: LD_VAR 0 13
38137: PPUSH
38138: CALL_OW 325
38142: PUSH
38143: LD_VAR 0 10
38147: PPUSH
38148: CALL_OW 255
38152: PPUSH
38153: LD_VAR 0 13
38157: PPUSH
38158: CALL_OW 325
38162: NOT
38163: AND
38164: IFFALSE 38193
// missile := Insert ( missile , missile + 1 , 3 ) ;
38166: LD_ADDR_VAR 0 14
38170: PUSH
38171: LD_VAR 0 14
38175: PPUSH
38176: LD_VAR 0 14
38180: PUSH
38181: LD_INT 1
38183: PLUS
38184: PPUSH
38185: LD_INT 3
38187: PPUSH
38188: CALL_OW 2
38192: ST_TO_ADDR
// if missile < 2 then
38193: LD_VAR 0 14
38197: PUSH
38198: LD_INT 2
38200: LESS
38201: IFFALSE 38205
// exit ;
38203: GO 38427
// x := GetX ( enemy ) ;
38205: LD_ADDR_VAR 0 4
38209: PUSH
38210: LD_VAR 0 10
38214: PPUSH
38215: CALL_OW 250
38219: ST_TO_ADDR
// y := GetY ( enemy ) ;
38220: LD_ADDR_VAR 0 5
38224: PUSH
38225: LD_VAR 0 10
38229: PPUSH
38230: CALL_OW 251
38234: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
38235: LD_ADDR_VAR 0 6
38239: PUSH
38240: LD_VAR 0 4
38244: PUSH
38245: LD_INT 1
38247: NEG
38248: PPUSH
38249: LD_INT 1
38251: PPUSH
38252: CALL_OW 12
38256: PLUS
38257: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
38258: LD_ADDR_VAR 0 7
38262: PUSH
38263: LD_VAR 0 5
38267: PUSH
38268: LD_INT 1
38270: NEG
38271: PPUSH
38272: LD_INT 1
38274: PPUSH
38275: CALL_OW 12
38279: PLUS
38280: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38281: LD_VAR 0 6
38285: PPUSH
38286: LD_VAR 0 7
38290: PPUSH
38291: CALL_OW 488
38295: NOT
38296: IFFALSE 38318
// begin _x := x ;
38298: LD_ADDR_VAR 0 6
38302: PUSH
38303: LD_VAR 0 4
38307: ST_TO_ADDR
// _y := y ;
38308: LD_ADDR_VAR 0 7
38312: PUSH
38313: LD_VAR 0 5
38317: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
38318: LD_ADDR_VAR 0 3
38322: PUSH
38323: LD_INT 1
38325: PPUSH
38326: LD_VAR 0 14
38330: PPUSH
38331: CALL_OW 12
38335: ST_TO_ADDR
// case i of 1 :
38336: LD_VAR 0 3
38340: PUSH
38341: LD_INT 1
38343: DOUBLE
38344: EQUAL
38345: IFTRUE 38349
38347: GO 38366
38349: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
38350: LD_VAR 0 1
38354: PPUSH
38355: LD_VAR 0 10
38359: PPUSH
38360: CALL_OW 115
38364: GO 38427
38366: LD_INT 2
38368: DOUBLE
38369: EQUAL
38370: IFTRUE 38374
38372: GO 38396
38374: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
38375: LD_VAR 0 1
38379: PPUSH
38380: LD_VAR 0 6
38384: PPUSH
38385: LD_VAR 0 7
38389: PPUSH
38390: CALL_OW 153
38394: GO 38427
38396: LD_INT 3
38398: DOUBLE
38399: EQUAL
38400: IFTRUE 38404
38402: GO 38426
38404: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
38405: LD_VAR 0 1
38409: PPUSH
38410: LD_VAR 0 6
38414: PPUSH
38415: LD_VAR 0 7
38419: PPUSH
38420: CALL_OW 154
38424: GO 38427
38426: POP
// end ;
38427: LD_VAR 0 2
38431: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
38432: LD_INT 0
38434: PPUSH
38435: PPUSH
38436: PPUSH
38437: PPUSH
38438: PPUSH
38439: PPUSH
// if not unit or not building then
38440: LD_VAR 0 1
38444: NOT
38445: PUSH
38446: LD_VAR 0 2
38450: NOT
38451: OR
38452: IFFALSE 38456
// exit ;
38454: GO 38614
// x := GetX ( building ) ;
38456: LD_ADDR_VAR 0 5
38460: PUSH
38461: LD_VAR 0 2
38465: PPUSH
38466: CALL_OW 250
38470: ST_TO_ADDR
// y := GetY ( building ) ;
38471: LD_ADDR_VAR 0 6
38475: PUSH
38476: LD_VAR 0 2
38480: PPUSH
38481: CALL_OW 251
38485: ST_TO_ADDR
// for i = 0 to 5 do
38486: LD_ADDR_VAR 0 4
38490: PUSH
38491: DOUBLE
38492: LD_INT 0
38494: DEC
38495: ST_TO_ADDR
38496: LD_INT 5
38498: PUSH
38499: FOR_TO
38500: IFFALSE 38612
// begin _x := ShiftX ( x , i , 3 ) ;
38502: LD_ADDR_VAR 0 7
38506: PUSH
38507: LD_VAR 0 5
38511: PPUSH
38512: LD_VAR 0 4
38516: PPUSH
38517: LD_INT 3
38519: PPUSH
38520: CALL_OW 272
38524: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
38525: LD_ADDR_VAR 0 8
38529: PUSH
38530: LD_VAR 0 6
38534: PPUSH
38535: LD_VAR 0 4
38539: PPUSH
38540: LD_INT 3
38542: PPUSH
38543: CALL_OW 273
38547: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38548: LD_VAR 0 7
38552: PPUSH
38553: LD_VAR 0 8
38557: PPUSH
38558: CALL_OW 488
38562: NOT
38563: IFFALSE 38567
// continue ;
38565: GO 38499
// if HexInfo ( _x , _y ) = 0 then
38567: LD_VAR 0 7
38571: PPUSH
38572: LD_VAR 0 8
38576: PPUSH
38577: CALL_OW 428
38581: PUSH
38582: LD_INT 0
38584: EQUAL
38585: IFFALSE 38610
// begin ComMoveXY ( unit , _x , _y ) ;
38587: LD_VAR 0 1
38591: PPUSH
38592: LD_VAR 0 7
38596: PPUSH
38597: LD_VAR 0 8
38601: PPUSH
38602: CALL_OW 111
// exit ;
38606: POP
38607: POP
38608: GO 38614
// end ; end ;
38610: GO 38499
38612: POP
38613: POP
// end ;
38614: LD_VAR 0 3
38618: RET
// export function ScanBase ( side , base_area ) ; begin
38619: LD_INT 0
38621: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
38622: LD_ADDR_VAR 0 3
38626: PUSH
38627: LD_VAR 0 2
38631: PPUSH
38632: LD_INT 81
38634: PUSH
38635: LD_VAR 0 1
38639: PUSH
38640: EMPTY
38641: LIST
38642: LIST
38643: PPUSH
38644: CALL_OW 70
38648: ST_TO_ADDR
// end ;
38649: LD_VAR 0 3
38653: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
38654: LD_INT 0
38656: PPUSH
38657: PPUSH
38658: PPUSH
38659: PPUSH
// result := false ;
38660: LD_ADDR_VAR 0 2
38664: PUSH
38665: LD_INT 0
38667: ST_TO_ADDR
// side := GetSide ( unit ) ;
38668: LD_ADDR_VAR 0 3
38672: PUSH
38673: LD_VAR 0 1
38677: PPUSH
38678: CALL_OW 255
38682: ST_TO_ADDR
// nat := GetNation ( unit ) ;
38683: LD_ADDR_VAR 0 4
38687: PUSH
38688: LD_VAR 0 1
38692: PPUSH
38693: CALL_OW 248
38697: ST_TO_ADDR
// case nat of 1 :
38698: LD_VAR 0 4
38702: PUSH
38703: LD_INT 1
38705: DOUBLE
38706: EQUAL
38707: IFTRUE 38711
38709: GO 38722
38711: POP
// tech := tech_lassight ; 2 :
38712: LD_ADDR_VAR 0 5
38716: PUSH
38717: LD_INT 12
38719: ST_TO_ADDR
38720: GO 38761
38722: LD_INT 2
38724: DOUBLE
38725: EQUAL
38726: IFTRUE 38730
38728: GO 38741
38730: POP
// tech := tech_mortar ; 3 :
38731: LD_ADDR_VAR 0 5
38735: PUSH
38736: LD_INT 41
38738: ST_TO_ADDR
38739: GO 38761
38741: LD_INT 3
38743: DOUBLE
38744: EQUAL
38745: IFTRUE 38749
38747: GO 38760
38749: POP
// tech := tech_bazooka ; end ;
38750: LD_ADDR_VAR 0 5
38754: PUSH
38755: LD_INT 44
38757: ST_TO_ADDR
38758: GO 38761
38760: POP
// if Researched ( side , tech ) then
38761: LD_VAR 0 3
38765: PPUSH
38766: LD_VAR 0 5
38770: PPUSH
38771: CALL_OW 325
38775: IFFALSE 38802
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
38777: LD_ADDR_VAR 0 2
38781: PUSH
38782: LD_INT 5
38784: PUSH
38785: LD_INT 8
38787: PUSH
38788: LD_INT 9
38790: PUSH
38791: EMPTY
38792: LIST
38793: LIST
38794: LIST
38795: PUSH
38796: LD_VAR 0 4
38800: ARRAY
38801: ST_TO_ADDR
// end ;
38802: LD_VAR 0 2
38806: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
38807: LD_INT 0
38809: PPUSH
38810: PPUSH
38811: PPUSH
// if not mines then
38812: LD_VAR 0 2
38816: NOT
38817: IFFALSE 38821
// exit ;
38819: GO 38965
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38821: LD_ADDR_VAR 0 5
38825: PUSH
38826: LD_INT 81
38828: PUSH
38829: LD_VAR 0 1
38833: PUSH
38834: EMPTY
38835: LIST
38836: LIST
38837: PUSH
38838: LD_INT 3
38840: PUSH
38841: LD_INT 21
38843: PUSH
38844: LD_INT 3
38846: PUSH
38847: EMPTY
38848: LIST
38849: LIST
38850: PUSH
38851: EMPTY
38852: LIST
38853: LIST
38854: PUSH
38855: EMPTY
38856: LIST
38857: LIST
38858: PPUSH
38859: CALL_OW 69
38863: ST_TO_ADDR
// for i in mines do
38864: LD_ADDR_VAR 0 4
38868: PUSH
38869: LD_VAR 0 2
38873: PUSH
38874: FOR_IN
38875: IFFALSE 38963
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
38877: LD_VAR 0 4
38881: PUSH
38882: LD_INT 1
38884: ARRAY
38885: PPUSH
38886: LD_VAR 0 4
38890: PUSH
38891: LD_INT 2
38893: ARRAY
38894: PPUSH
38895: CALL_OW 458
38899: NOT
38900: IFFALSE 38904
// continue ;
38902: GO 38874
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
38904: LD_VAR 0 4
38908: PUSH
38909: LD_INT 1
38911: ARRAY
38912: PPUSH
38913: LD_VAR 0 4
38917: PUSH
38918: LD_INT 2
38920: ARRAY
38921: PPUSH
38922: CALL_OW 428
38926: PUSH
38927: LD_VAR 0 5
38931: IN
38932: IFFALSE 38961
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
38934: LD_VAR 0 4
38938: PUSH
38939: LD_INT 1
38941: ARRAY
38942: PPUSH
38943: LD_VAR 0 4
38947: PUSH
38948: LD_INT 2
38950: ARRAY
38951: PPUSH
38952: LD_VAR 0 1
38956: PPUSH
38957: CALL_OW 456
// end ;
38961: GO 38874
38963: POP
38964: POP
// end ;
38965: LD_VAR 0 3
38969: RET
// export function Count ( array ) ; var i ; begin
38970: LD_INT 0
38972: PPUSH
38973: PPUSH
// result := 0 ;
38974: LD_ADDR_VAR 0 2
38978: PUSH
38979: LD_INT 0
38981: ST_TO_ADDR
// for i in array do
38982: LD_ADDR_VAR 0 3
38986: PUSH
38987: LD_VAR 0 1
38991: PUSH
38992: FOR_IN
38993: IFFALSE 39017
// if i then
38995: LD_VAR 0 3
38999: IFFALSE 39015
// result := result + 1 ;
39001: LD_ADDR_VAR 0 2
39005: PUSH
39006: LD_VAR 0 2
39010: PUSH
39011: LD_INT 1
39013: PLUS
39014: ST_TO_ADDR
39015: GO 38992
39017: POP
39018: POP
// end ;
39019: LD_VAR 0 2
39023: RET
// export function IsEmpty ( building ) ; begin
39024: LD_INT 0
39026: PPUSH
// if not building then
39027: LD_VAR 0 1
39031: NOT
39032: IFFALSE 39036
// exit ;
39034: GO 39079
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
39036: LD_ADDR_VAR 0 2
39040: PUSH
39041: LD_VAR 0 1
39045: PUSH
39046: LD_INT 22
39048: PUSH
39049: LD_VAR 0 1
39053: PPUSH
39054: CALL_OW 255
39058: PUSH
39059: EMPTY
39060: LIST
39061: LIST
39062: PUSH
39063: LD_INT 58
39065: PUSH
39066: EMPTY
39067: LIST
39068: PUSH
39069: EMPTY
39070: LIST
39071: LIST
39072: PPUSH
39073: CALL_OW 69
39077: IN
39078: ST_TO_ADDR
// end ;
39079: LD_VAR 0 2
39083: RET
// export function IsNotFull ( building ) ; begin
39084: LD_INT 0
39086: PPUSH
// if not building then
39087: LD_VAR 0 1
39091: NOT
39092: IFFALSE 39096
// exit ;
39094: GO 39115
// result := UnitsInside ( building ) < 6 ;
39096: LD_ADDR_VAR 0 2
39100: PUSH
39101: LD_VAR 0 1
39105: PPUSH
39106: CALL_OW 313
39110: PUSH
39111: LD_INT 6
39113: LESS
39114: ST_TO_ADDR
// end ;
39115: LD_VAR 0 2
39119: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
39120: LD_INT 0
39122: PPUSH
39123: PPUSH
39124: PPUSH
39125: PPUSH
// tmp := [ ] ;
39126: LD_ADDR_VAR 0 3
39130: PUSH
39131: EMPTY
39132: ST_TO_ADDR
// list := [ ] ;
39133: LD_ADDR_VAR 0 5
39137: PUSH
39138: EMPTY
39139: ST_TO_ADDR
// for i = 16 to 25 do
39140: LD_ADDR_VAR 0 4
39144: PUSH
39145: DOUBLE
39146: LD_INT 16
39148: DEC
39149: ST_TO_ADDR
39150: LD_INT 25
39152: PUSH
39153: FOR_TO
39154: IFFALSE 39227
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
39156: LD_ADDR_VAR 0 3
39160: PUSH
39161: LD_VAR 0 3
39165: PUSH
39166: LD_INT 22
39168: PUSH
39169: LD_VAR 0 1
39173: PPUSH
39174: CALL_OW 255
39178: PUSH
39179: EMPTY
39180: LIST
39181: LIST
39182: PUSH
39183: LD_INT 91
39185: PUSH
39186: LD_VAR 0 1
39190: PUSH
39191: LD_INT 6
39193: PUSH
39194: EMPTY
39195: LIST
39196: LIST
39197: LIST
39198: PUSH
39199: LD_INT 30
39201: PUSH
39202: LD_VAR 0 4
39206: PUSH
39207: EMPTY
39208: LIST
39209: LIST
39210: PUSH
39211: EMPTY
39212: LIST
39213: LIST
39214: LIST
39215: PUSH
39216: EMPTY
39217: LIST
39218: PPUSH
39219: CALL_OW 69
39223: ADD
39224: ST_TO_ADDR
39225: GO 39153
39227: POP
39228: POP
// for i = 1 to tmp do
39229: LD_ADDR_VAR 0 4
39233: PUSH
39234: DOUBLE
39235: LD_INT 1
39237: DEC
39238: ST_TO_ADDR
39239: LD_VAR 0 3
39243: PUSH
39244: FOR_TO
39245: IFFALSE 39333
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
39247: LD_ADDR_VAR 0 5
39251: PUSH
39252: LD_VAR 0 5
39256: PUSH
39257: LD_VAR 0 3
39261: PUSH
39262: LD_VAR 0 4
39266: ARRAY
39267: PPUSH
39268: CALL_OW 266
39272: PUSH
39273: LD_VAR 0 3
39277: PUSH
39278: LD_VAR 0 4
39282: ARRAY
39283: PPUSH
39284: CALL_OW 250
39288: PUSH
39289: LD_VAR 0 3
39293: PUSH
39294: LD_VAR 0 4
39298: ARRAY
39299: PPUSH
39300: CALL_OW 251
39304: PUSH
39305: LD_VAR 0 3
39309: PUSH
39310: LD_VAR 0 4
39314: ARRAY
39315: PPUSH
39316: CALL_OW 254
39320: PUSH
39321: EMPTY
39322: LIST
39323: LIST
39324: LIST
39325: LIST
39326: PUSH
39327: EMPTY
39328: LIST
39329: ADD
39330: ST_TO_ADDR
39331: GO 39244
39333: POP
39334: POP
// result := list ;
39335: LD_ADDR_VAR 0 2
39339: PUSH
39340: LD_VAR 0 5
39344: ST_TO_ADDR
// end ;
39345: LD_VAR 0 2
39349: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
39350: LD_INT 0
39352: PPUSH
39353: PPUSH
39354: PPUSH
39355: PPUSH
39356: PPUSH
39357: PPUSH
39358: PPUSH
// if not factory then
39359: LD_VAR 0 1
39363: NOT
39364: IFFALSE 39368
// exit ;
39366: GO 39961
// if control = control_apeman then
39368: LD_VAR 0 4
39372: PUSH
39373: LD_INT 5
39375: EQUAL
39376: IFFALSE 39485
// begin tmp := UnitsInside ( factory ) ;
39378: LD_ADDR_VAR 0 8
39382: PUSH
39383: LD_VAR 0 1
39387: PPUSH
39388: CALL_OW 313
39392: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
39393: LD_VAR 0 8
39397: PPUSH
39398: LD_INT 25
39400: PUSH
39401: LD_INT 12
39403: PUSH
39404: EMPTY
39405: LIST
39406: LIST
39407: PPUSH
39408: CALL_OW 72
39412: NOT
39413: IFFALSE 39423
// control := control_manual ;
39415: LD_ADDR_VAR 0 4
39419: PUSH
39420: LD_INT 1
39422: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
39423: LD_ADDR_VAR 0 8
39427: PUSH
39428: LD_VAR 0 1
39432: PPUSH
39433: CALL 39120 0 1
39437: ST_TO_ADDR
// if tmp then
39438: LD_VAR 0 8
39442: IFFALSE 39485
// begin for i in tmp do
39444: LD_ADDR_VAR 0 7
39448: PUSH
39449: LD_VAR 0 8
39453: PUSH
39454: FOR_IN
39455: IFFALSE 39483
// if i [ 1 ] = b_ext_radio then
39457: LD_VAR 0 7
39461: PUSH
39462: LD_INT 1
39464: ARRAY
39465: PUSH
39466: LD_INT 22
39468: EQUAL
39469: IFFALSE 39481
// begin control := control_remote ;
39471: LD_ADDR_VAR 0 4
39475: PUSH
39476: LD_INT 2
39478: ST_TO_ADDR
// break ;
39479: GO 39483
// end ;
39481: GO 39454
39483: POP
39484: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
39485: LD_VAR 0 1
39489: PPUSH
39490: LD_VAR 0 2
39494: PPUSH
39495: LD_VAR 0 3
39499: PPUSH
39500: LD_VAR 0 4
39504: PPUSH
39505: LD_VAR 0 5
39509: PPUSH
39510: CALL_OW 448
39514: IFFALSE 39549
// begin result := [ chassis , engine , control , weapon ] ;
39516: LD_ADDR_VAR 0 6
39520: PUSH
39521: LD_VAR 0 2
39525: PUSH
39526: LD_VAR 0 3
39530: PUSH
39531: LD_VAR 0 4
39535: PUSH
39536: LD_VAR 0 5
39540: PUSH
39541: EMPTY
39542: LIST
39543: LIST
39544: LIST
39545: LIST
39546: ST_TO_ADDR
// exit ;
39547: GO 39961
// end ; _chassis := AvailableChassisList ( factory ) ;
39549: LD_ADDR_VAR 0 9
39553: PUSH
39554: LD_VAR 0 1
39558: PPUSH
39559: CALL_OW 475
39563: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
39564: LD_ADDR_VAR 0 11
39568: PUSH
39569: LD_VAR 0 1
39573: PPUSH
39574: CALL_OW 476
39578: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
39579: LD_ADDR_VAR 0 12
39583: PUSH
39584: LD_VAR 0 1
39588: PPUSH
39589: CALL_OW 477
39593: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
39594: LD_ADDR_VAR 0 10
39598: PUSH
39599: LD_VAR 0 1
39603: PPUSH
39604: CALL_OW 478
39608: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
39609: LD_VAR 0 9
39613: NOT
39614: PUSH
39615: LD_VAR 0 11
39619: NOT
39620: OR
39621: PUSH
39622: LD_VAR 0 12
39626: NOT
39627: OR
39628: PUSH
39629: LD_VAR 0 10
39633: NOT
39634: OR
39635: IFFALSE 39670
// begin result := [ chassis , engine , control , weapon ] ;
39637: LD_ADDR_VAR 0 6
39641: PUSH
39642: LD_VAR 0 2
39646: PUSH
39647: LD_VAR 0 3
39651: PUSH
39652: LD_VAR 0 4
39656: PUSH
39657: LD_VAR 0 5
39661: PUSH
39662: EMPTY
39663: LIST
39664: LIST
39665: LIST
39666: LIST
39667: ST_TO_ADDR
// exit ;
39668: GO 39961
// end ; if not chassis in _chassis then
39670: LD_VAR 0 2
39674: PUSH
39675: LD_VAR 0 9
39679: IN
39680: NOT
39681: IFFALSE 39707
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
39683: LD_ADDR_VAR 0 2
39687: PUSH
39688: LD_VAR 0 9
39692: PUSH
39693: LD_INT 1
39695: PPUSH
39696: LD_VAR 0 9
39700: PPUSH
39701: CALL_OW 12
39705: ARRAY
39706: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
39707: LD_VAR 0 2
39711: PPUSH
39712: LD_VAR 0 3
39716: PPUSH
39717: CALL 39966 0 2
39721: NOT
39722: IFFALSE 39781
// repeat engine := _engine [ 1 ] ;
39724: LD_ADDR_VAR 0 3
39728: PUSH
39729: LD_VAR 0 11
39733: PUSH
39734: LD_INT 1
39736: ARRAY
39737: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
39738: LD_ADDR_VAR 0 11
39742: PUSH
39743: LD_VAR 0 11
39747: PPUSH
39748: LD_INT 1
39750: PPUSH
39751: CALL_OW 3
39755: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
39756: LD_VAR 0 2
39760: PPUSH
39761: LD_VAR 0 3
39765: PPUSH
39766: CALL 39966 0 2
39770: PUSH
39771: LD_VAR 0 11
39775: PUSH
39776: EMPTY
39777: EQUAL
39778: OR
39779: IFFALSE 39724
// if not control in _control then
39781: LD_VAR 0 4
39785: PUSH
39786: LD_VAR 0 12
39790: IN
39791: NOT
39792: IFFALSE 39818
// control := _control [ rand ( 1 , _control ) ] ;
39794: LD_ADDR_VAR 0 4
39798: PUSH
39799: LD_VAR 0 12
39803: PUSH
39804: LD_INT 1
39806: PPUSH
39807: LD_VAR 0 12
39811: PPUSH
39812: CALL_OW 12
39816: ARRAY
39817: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
39818: LD_VAR 0 2
39822: PPUSH
39823: LD_VAR 0 5
39827: PPUSH
39828: CALL 40186 0 2
39832: NOT
39833: IFFALSE 39892
// repeat weapon := _weapon [ 1 ] ;
39835: LD_ADDR_VAR 0 5
39839: PUSH
39840: LD_VAR 0 10
39844: PUSH
39845: LD_INT 1
39847: ARRAY
39848: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
39849: LD_ADDR_VAR 0 10
39853: PUSH
39854: LD_VAR 0 10
39858: PPUSH
39859: LD_INT 1
39861: PPUSH
39862: CALL_OW 3
39866: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
39867: LD_VAR 0 2
39871: PPUSH
39872: LD_VAR 0 5
39876: PPUSH
39877: CALL 40186 0 2
39881: PUSH
39882: LD_VAR 0 10
39886: PUSH
39887: EMPTY
39888: EQUAL
39889: OR
39890: IFFALSE 39835
// result := [ ] ;
39892: LD_ADDR_VAR 0 6
39896: PUSH
39897: EMPTY
39898: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
39899: LD_VAR 0 1
39903: PPUSH
39904: LD_VAR 0 2
39908: PPUSH
39909: LD_VAR 0 3
39913: PPUSH
39914: LD_VAR 0 4
39918: PPUSH
39919: LD_VAR 0 5
39923: PPUSH
39924: CALL_OW 448
39928: IFFALSE 39961
// result := [ chassis , engine , control , weapon ] ;
39930: LD_ADDR_VAR 0 6
39934: PUSH
39935: LD_VAR 0 2
39939: PUSH
39940: LD_VAR 0 3
39944: PUSH
39945: LD_VAR 0 4
39949: PUSH
39950: LD_VAR 0 5
39954: PUSH
39955: EMPTY
39956: LIST
39957: LIST
39958: LIST
39959: LIST
39960: ST_TO_ADDR
// end ;
39961: LD_VAR 0 6
39965: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
39966: LD_INT 0
39968: PPUSH
// if not chassis or not engine then
39969: LD_VAR 0 1
39973: NOT
39974: PUSH
39975: LD_VAR 0 2
39979: NOT
39980: OR
39981: IFFALSE 39985
// exit ;
39983: GO 40181
// case engine of engine_solar :
39985: LD_VAR 0 2
39989: PUSH
39990: LD_INT 2
39992: DOUBLE
39993: EQUAL
39994: IFTRUE 39998
39996: GO 40036
39998: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
39999: LD_ADDR_VAR 0 3
40003: PUSH
40004: LD_INT 11
40006: PUSH
40007: LD_INT 12
40009: PUSH
40010: LD_INT 13
40012: PUSH
40013: LD_INT 14
40015: PUSH
40016: LD_INT 1
40018: PUSH
40019: LD_INT 2
40021: PUSH
40022: LD_INT 3
40024: PUSH
40025: EMPTY
40026: LIST
40027: LIST
40028: LIST
40029: LIST
40030: LIST
40031: LIST
40032: LIST
40033: ST_TO_ADDR
40034: GO 40165
40036: LD_INT 1
40038: DOUBLE
40039: EQUAL
40040: IFTRUE 40044
40042: GO 40106
40044: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
40045: LD_ADDR_VAR 0 3
40049: PUSH
40050: LD_INT 11
40052: PUSH
40053: LD_INT 12
40055: PUSH
40056: LD_INT 13
40058: PUSH
40059: LD_INT 14
40061: PUSH
40062: LD_INT 1
40064: PUSH
40065: LD_INT 2
40067: PUSH
40068: LD_INT 3
40070: PUSH
40071: LD_INT 4
40073: PUSH
40074: LD_INT 5
40076: PUSH
40077: LD_INT 21
40079: PUSH
40080: LD_INT 23
40082: PUSH
40083: LD_INT 22
40085: PUSH
40086: LD_INT 24
40088: PUSH
40089: EMPTY
40090: LIST
40091: LIST
40092: LIST
40093: LIST
40094: LIST
40095: LIST
40096: LIST
40097: LIST
40098: LIST
40099: LIST
40100: LIST
40101: LIST
40102: LIST
40103: ST_TO_ADDR
40104: GO 40165
40106: LD_INT 3
40108: DOUBLE
40109: EQUAL
40110: IFTRUE 40114
40112: GO 40164
40114: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
40115: LD_ADDR_VAR 0 3
40119: PUSH
40120: LD_INT 13
40122: PUSH
40123: LD_INT 14
40125: PUSH
40126: LD_INT 2
40128: PUSH
40129: LD_INT 3
40131: PUSH
40132: LD_INT 4
40134: PUSH
40135: LD_INT 5
40137: PUSH
40138: LD_INT 21
40140: PUSH
40141: LD_INT 22
40143: PUSH
40144: LD_INT 23
40146: PUSH
40147: LD_INT 24
40149: PUSH
40150: EMPTY
40151: LIST
40152: LIST
40153: LIST
40154: LIST
40155: LIST
40156: LIST
40157: LIST
40158: LIST
40159: LIST
40160: LIST
40161: ST_TO_ADDR
40162: GO 40165
40164: POP
// result := ( chassis in result ) ;
40165: LD_ADDR_VAR 0 3
40169: PUSH
40170: LD_VAR 0 1
40174: PUSH
40175: LD_VAR 0 3
40179: IN
40180: ST_TO_ADDR
// end ;
40181: LD_VAR 0 3
40185: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
40186: LD_INT 0
40188: PPUSH
// if not chassis or not weapon then
40189: LD_VAR 0 1
40193: NOT
40194: PUSH
40195: LD_VAR 0 2
40199: NOT
40200: OR
40201: IFFALSE 40205
// exit ;
40203: GO 41231
// case weapon of us_machine_gun :
40205: LD_VAR 0 2
40209: PUSH
40210: LD_INT 2
40212: DOUBLE
40213: EQUAL
40214: IFTRUE 40218
40216: GO 40248
40218: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
40219: LD_ADDR_VAR 0 3
40223: PUSH
40224: LD_INT 1
40226: PUSH
40227: LD_INT 2
40229: PUSH
40230: LD_INT 3
40232: PUSH
40233: LD_INT 4
40235: PUSH
40236: LD_INT 5
40238: PUSH
40239: EMPTY
40240: LIST
40241: LIST
40242: LIST
40243: LIST
40244: LIST
40245: ST_TO_ADDR
40246: GO 41215
40248: LD_INT 3
40250: DOUBLE
40251: EQUAL
40252: IFTRUE 40256
40254: GO 40286
40256: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
40257: LD_ADDR_VAR 0 3
40261: PUSH
40262: LD_INT 1
40264: PUSH
40265: LD_INT 2
40267: PUSH
40268: LD_INT 3
40270: PUSH
40271: LD_INT 4
40273: PUSH
40274: LD_INT 5
40276: PUSH
40277: EMPTY
40278: LIST
40279: LIST
40280: LIST
40281: LIST
40282: LIST
40283: ST_TO_ADDR
40284: GO 41215
40286: LD_INT 11
40288: DOUBLE
40289: EQUAL
40290: IFTRUE 40294
40292: GO 40324
40294: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
40295: LD_ADDR_VAR 0 3
40299: PUSH
40300: LD_INT 1
40302: PUSH
40303: LD_INT 2
40305: PUSH
40306: LD_INT 3
40308: PUSH
40309: LD_INT 4
40311: PUSH
40312: LD_INT 5
40314: PUSH
40315: EMPTY
40316: LIST
40317: LIST
40318: LIST
40319: LIST
40320: LIST
40321: ST_TO_ADDR
40322: GO 41215
40324: LD_INT 4
40326: DOUBLE
40327: EQUAL
40328: IFTRUE 40332
40330: GO 40358
40332: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
40333: LD_ADDR_VAR 0 3
40337: PUSH
40338: LD_INT 2
40340: PUSH
40341: LD_INT 3
40343: PUSH
40344: LD_INT 4
40346: PUSH
40347: LD_INT 5
40349: PUSH
40350: EMPTY
40351: LIST
40352: LIST
40353: LIST
40354: LIST
40355: ST_TO_ADDR
40356: GO 41215
40358: LD_INT 5
40360: DOUBLE
40361: EQUAL
40362: IFTRUE 40366
40364: GO 40392
40366: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
40367: LD_ADDR_VAR 0 3
40371: PUSH
40372: LD_INT 2
40374: PUSH
40375: LD_INT 3
40377: PUSH
40378: LD_INT 4
40380: PUSH
40381: LD_INT 5
40383: PUSH
40384: EMPTY
40385: LIST
40386: LIST
40387: LIST
40388: LIST
40389: ST_TO_ADDR
40390: GO 41215
40392: LD_INT 9
40394: DOUBLE
40395: EQUAL
40396: IFTRUE 40400
40398: GO 40426
40400: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
40401: LD_ADDR_VAR 0 3
40405: PUSH
40406: LD_INT 2
40408: PUSH
40409: LD_INT 3
40411: PUSH
40412: LD_INT 4
40414: PUSH
40415: LD_INT 5
40417: PUSH
40418: EMPTY
40419: LIST
40420: LIST
40421: LIST
40422: LIST
40423: ST_TO_ADDR
40424: GO 41215
40426: LD_INT 7
40428: DOUBLE
40429: EQUAL
40430: IFTRUE 40434
40432: GO 40460
40434: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
40435: LD_ADDR_VAR 0 3
40439: PUSH
40440: LD_INT 2
40442: PUSH
40443: LD_INT 3
40445: PUSH
40446: LD_INT 4
40448: PUSH
40449: LD_INT 5
40451: PUSH
40452: EMPTY
40453: LIST
40454: LIST
40455: LIST
40456: LIST
40457: ST_TO_ADDR
40458: GO 41215
40460: LD_INT 12
40462: DOUBLE
40463: EQUAL
40464: IFTRUE 40468
40466: GO 40494
40468: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
40469: LD_ADDR_VAR 0 3
40473: PUSH
40474: LD_INT 2
40476: PUSH
40477: LD_INT 3
40479: PUSH
40480: LD_INT 4
40482: PUSH
40483: LD_INT 5
40485: PUSH
40486: EMPTY
40487: LIST
40488: LIST
40489: LIST
40490: LIST
40491: ST_TO_ADDR
40492: GO 41215
40494: LD_INT 13
40496: DOUBLE
40497: EQUAL
40498: IFTRUE 40502
40500: GO 40528
40502: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
40503: LD_ADDR_VAR 0 3
40507: PUSH
40508: LD_INT 2
40510: PUSH
40511: LD_INT 3
40513: PUSH
40514: LD_INT 4
40516: PUSH
40517: LD_INT 5
40519: PUSH
40520: EMPTY
40521: LIST
40522: LIST
40523: LIST
40524: LIST
40525: ST_TO_ADDR
40526: GO 41215
40528: LD_INT 14
40530: DOUBLE
40531: EQUAL
40532: IFTRUE 40536
40534: GO 40554
40536: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
40537: LD_ADDR_VAR 0 3
40541: PUSH
40542: LD_INT 4
40544: PUSH
40545: LD_INT 5
40547: PUSH
40548: EMPTY
40549: LIST
40550: LIST
40551: ST_TO_ADDR
40552: GO 41215
40554: LD_INT 6
40556: DOUBLE
40557: EQUAL
40558: IFTRUE 40562
40560: GO 40580
40562: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
40563: LD_ADDR_VAR 0 3
40567: PUSH
40568: LD_INT 4
40570: PUSH
40571: LD_INT 5
40573: PUSH
40574: EMPTY
40575: LIST
40576: LIST
40577: ST_TO_ADDR
40578: GO 41215
40580: LD_INT 10
40582: DOUBLE
40583: EQUAL
40584: IFTRUE 40588
40586: GO 40606
40588: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
40589: LD_ADDR_VAR 0 3
40593: PUSH
40594: LD_INT 4
40596: PUSH
40597: LD_INT 5
40599: PUSH
40600: EMPTY
40601: LIST
40602: LIST
40603: ST_TO_ADDR
40604: GO 41215
40606: LD_INT 22
40608: DOUBLE
40609: EQUAL
40610: IFTRUE 40614
40612: GO 40640
40614: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
40615: LD_ADDR_VAR 0 3
40619: PUSH
40620: LD_INT 11
40622: PUSH
40623: LD_INT 12
40625: PUSH
40626: LD_INT 13
40628: PUSH
40629: LD_INT 14
40631: PUSH
40632: EMPTY
40633: LIST
40634: LIST
40635: LIST
40636: LIST
40637: ST_TO_ADDR
40638: GO 41215
40640: LD_INT 23
40642: DOUBLE
40643: EQUAL
40644: IFTRUE 40648
40646: GO 40674
40648: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
40649: LD_ADDR_VAR 0 3
40653: PUSH
40654: LD_INT 11
40656: PUSH
40657: LD_INT 12
40659: PUSH
40660: LD_INT 13
40662: PUSH
40663: LD_INT 14
40665: PUSH
40666: EMPTY
40667: LIST
40668: LIST
40669: LIST
40670: LIST
40671: ST_TO_ADDR
40672: GO 41215
40674: LD_INT 24
40676: DOUBLE
40677: EQUAL
40678: IFTRUE 40682
40680: GO 40708
40682: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
40683: LD_ADDR_VAR 0 3
40687: PUSH
40688: LD_INT 11
40690: PUSH
40691: LD_INT 12
40693: PUSH
40694: LD_INT 13
40696: PUSH
40697: LD_INT 14
40699: PUSH
40700: EMPTY
40701: LIST
40702: LIST
40703: LIST
40704: LIST
40705: ST_TO_ADDR
40706: GO 41215
40708: LD_INT 30
40710: DOUBLE
40711: EQUAL
40712: IFTRUE 40716
40714: GO 40742
40716: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
40717: LD_ADDR_VAR 0 3
40721: PUSH
40722: LD_INT 11
40724: PUSH
40725: LD_INT 12
40727: PUSH
40728: LD_INT 13
40730: PUSH
40731: LD_INT 14
40733: PUSH
40734: EMPTY
40735: LIST
40736: LIST
40737: LIST
40738: LIST
40739: ST_TO_ADDR
40740: GO 41215
40742: LD_INT 25
40744: DOUBLE
40745: EQUAL
40746: IFTRUE 40750
40748: GO 40768
40750: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
40751: LD_ADDR_VAR 0 3
40755: PUSH
40756: LD_INT 13
40758: PUSH
40759: LD_INT 14
40761: PUSH
40762: EMPTY
40763: LIST
40764: LIST
40765: ST_TO_ADDR
40766: GO 41215
40768: LD_INT 27
40770: DOUBLE
40771: EQUAL
40772: IFTRUE 40776
40774: GO 40794
40776: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
40777: LD_ADDR_VAR 0 3
40781: PUSH
40782: LD_INT 13
40784: PUSH
40785: LD_INT 14
40787: PUSH
40788: EMPTY
40789: LIST
40790: LIST
40791: ST_TO_ADDR
40792: GO 41215
40794: LD_INT 28
40796: DOUBLE
40797: EQUAL
40798: IFTRUE 40802
40800: GO 40820
40802: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
40803: LD_ADDR_VAR 0 3
40807: PUSH
40808: LD_INT 13
40810: PUSH
40811: LD_INT 14
40813: PUSH
40814: EMPTY
40815: LIST
40816: LIST
40817: ST_TO_ADDR
40818: GO 41215
40820: LD_INT 29
40822: DOUBLE
40823: EQUAL
40824: IFTRUE 40828
40826: GO 40846
40828: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
40829: LD_ADDR_VAR 0 3
40833: PUSH
40834: LD_INT 13
40836: PUSH
40837: LD_INT 14
40839: PUSH
40840: EMPTY
40841: LIST
40842: LIST
40843: ST_TO_ADDR
40844: GO 41215
40846: LD_INT 31
40848: DOUBLE
40849: EQUAL
40850: IFTRUE 40854
40852: GO 40872
40854: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
40855: LD_ADDR_VAR 0 3
40859: PUSH
40860: LD_INT 13
40862: PUSH
40863: LD_INT 14
40865: PUSH
40866: EMPTY
40867: LIST
40868: LIST
40869: ST_TO_ADDR
40870: GO 41215
40872: LD_INT 26
40874: DOUBLE
40875: EQUAL
40876: IFTRUE 40880
40878: GO 40898
40880: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
40881: LD_ADDR_VAR 0 3
40885: PUSH
40886: LD_INT 13
40888: PUSH
40889: LD_INT 14
40891: PUSH
40892: EMPTY
40893: LIST
40894: LIST
40895: ST_TO_ADDR
40896: GO 41215
40898: LD_INT 42
40900: DOUBLE
40901: EQUAL
40902: IFTRUE 40906
40904: GO 40932
40906: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
40907: LD_ADDR_VAR 0 3
40911: PUSH
40912: LD_INT 21
40914: PUSH
40915: LD_INT 22
40917: PUSH
40918: LD_INT 23
40920: PUSH
40921: LD_INT 24
40923: PUSH
40924: EMPTY
40925: LIST
40926: LIST
40927: LIST
40928: LIST
40929: ST_TO_ADDR
40930: GO 41215
40932: LD_INT 43
40934: DOUBLE
40935: EQUAL
40936: IFTRUE 40940
40938: GO 40966
40940: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
40941: LD_ADDR_VAR 0 3
40945: PUSH
40946: LD_INT 21
40948: PUSH
40949: LD_INT 22
40951: PUSH
40952: LD_INT 23
40954: PUSH
40955: LD_INT 24
40957: PUSH
40958: EMPTY
40959: LIST
40960: LIST
40961: LIST
40962: LIST
40963: ST_TO_ADDR
40964: GO 41215
40966: LD_INT 44
40968: DOUBLE
40969: EQUAL
40970: IFTRUE 40974
40972: GO 41000
40974: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
40975: LD_ADDR_VAR 0 3
40979: PUSH
40980: LD_INT 21
40982: PUSH
40983: LD_INT 22
40985: PUSH
40986: LD_INT 23
40988: PUSH
40989: LD_INT 24
40991: PUSH
40992: EMPTY
40993: LIST
40994: LIST
40995: LIST
40996: LIST
40997: ST_TO_ADDR
40998: GO 41215
41000: LD_INT 45
41002: DOUBLE
41003: EQUAL
41004: IFTRUE 41008
41006: GO 41034
41008: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
41009: LD_ADDR_VAR 0 3
41013: PUSH
41014: LD_INT 21
41016: PUSH
41017: LD_INT 22
41019: PUSH
41020: LD_INT 23
41022: PUSH
41023: LD_INT 24
41025: PUSH
41026: EMPTY
41027: LIST
41028: LIST
41029: LIST
41030: LIST
41031: ST_TO_ADDR
41032: GO 41215
41034: LD_INT 49
41036: DOUBLE
41037: EQUAL
41038: IFTRUE 41042
41040: GO 41068
41042: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
41043: LD_ADDR_VAR 0 3
41047: PUSH
41048: LD_INT 21
41050: PUSH
41051: LD_INT 22
41053: PUSH
41054: LD_INT 23
41056: PUSH
41057: LD_INT 24
41059: PUSH
41060: EMPTY
41061: LIST
41062: LIST
41063: LIST
41064: LIST
41065: ST_TO_ADDR
41066: GO 41215
41068: LD_INT 51
41070: DOUBLE
41071: EQUAL
41072: IFTRUE 41076
41074: GO 41102
41076: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
41077: LD_ADDR_VAR 0 3
41081: PUSH
41082: LD_INT 21
41084: PUSH
41085: LD_INT 22
41087: PUSH
41088: LD_INT 23
41090: PUSH
41091: LD_INT 24
41093: PUSH
41094: EMPTY
41095: LIST
41096: LIST
41097: LIST
41098: LIST
41099: ST_TO_ADDR
41100: GO 41215
41102: LD_INT 52
41104: DOUBLE
41105: EQUAL
41106: IFTRUE 41110
41108: GO 41136
41110: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
41111: LD_ADDR_VAR 0 3
41115: PUSH
41116: LD_INT 21
41118: PUSH
41119: LD_INT 22
41121: PUSH
41122: LD_INT 23
41124: PUSH
41125: LD_INT 24
41127: PUSH
41128: EMPTY
41129: LIST
41130: LIST
41131: LIST
41132: LIST
41133: ST_TO_ADDR
41134: GO 41215
41136: LD_INT 53
41138: DOUBLE
41139: EQUAL
41140: IFTRUE 41144
41142: GO 41162
41144: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
41145: LD_ADDR_VAR 0 3
41149: PUSH
41150: LD_INT 23
41152: PUSH
41153: LD_INT 24
41155: PUSH
41156: EMPTY
41157: LIST
41158: LIST
41159: ST_TO_ADDR
41160: GO 41215
41162: LD_INT 46
41164: DOUBLE
41165: EQUAL
41166: IFTRUE 41170
41168: GO 41188
41170: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
41171: LD_ADDR_VAR 0 3
41175: PUSH
41176: LD_INT 23
41178: PUSH
41179: LD_INT 24
41181: PUSH
41182: EMPTY
41183: LIST
41184: LIST
41185: ST_TO_ADDR
41186: GO 41215
41188: LD_INT 47
41190: DOUBLE
41191: EQUAL
41192: IFTRUE 41196
41194: GO 41214
41196: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
41197: LD_ADDR_VAR 0 3
41201: PUSH
41202: LD_INT 23
41204: PUSH
41205: LD_INT 24
41207: PUSH
41208: EMPTY
41209: LIST
41210: LIST
41211: ST_TO_ADDR
41212: GO 41215
41214: POP
// result := ( chassis in result ) ;
41215: LD_ADDR_VAR 0 3
41219: PUSH
41220: LD_VAR 0 1
41224: PUSH
41225: LD_VAR 0 3
41229: IN
41230: ST_TO_ADDR
// end ;
41231: LD_VAR 0 3
41235: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
41236: LD_INT 0
41238: PPUSH
41239: PPUSH
41240: PPUSH
41241: PPUSH
41242: PPUSH
41243: PPUSH
41244: PPUSH
// result := array ;
41245: LD_ADDR_VAR 0 5
41249: PUSH
41250: LD_VAR 0 1
41254: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
41255: LD_VAR 0 1
41259: NOT
41260: PUSH
41261: LD_VAR 0 2
41265: NOT
41266: OR
41267: PUSH
41268: LD_VAR 0 3
41272: NOT
41273: OR
41274: PUSH
41275: LD_VAR 0 2
41279: PUSH
41280: LD_VAR 0 1
41284: GREATER
41285: OR
41286: PUSH
41287: LD_VAR 0 3
41291: PUSH
41292: LD_VAR 0 1
41296: GREATER
41297: OR
41298: IFFALSE 41302
// exit ;
41300: GO 41598
// if direction then
41302: LD_VAR 0 4
41306: IFFALSE 41370
// begin d := 1 ;
41308: LD_ADDR_VAR 0 9
41312: PUSH
41313: LD_INT 1
41315: ST_TO_ADDR
// if i_from > i_to then
41316: LD_VAR 0 2
41320: PUSH
41321: LD_VAR 0 3
41325: GREATER
41326: IFFALSE 41352
// length := ( array - i_from ) + i_to else
41328: LD_ADDR_VAR 0 11
41332: PUSH
41333: LD_VAR 0 1
41337: PUSH
41338: LD_VAR 0 2
41342: MINUS
41343: PUSH
41344: LD_VAR 0 3
41348: PLUS
41349: ST_TO_ADDR
41350: GO 41368
// length := i_to - i_from ;
41352: LD_ADDR_VAR 0 11
41356: PUSH
41357: LD_VAR 0 3
41361: PUSH
41362: LD_VAR 0 2
41366: MINUS
41367: ST_TO_ADDR
// end else
41368: GO 41431
// begin d := - 1 ;
41370: LD_ADDR_VAR 0 9
41374: PUSH
41375: LD_INT 1
41377: NEG
41378: ST_TO_ADDR
// if i_from > i_to then
41379: LD_VAR 0 2
41383: PUSH
41384: LD_VAR 0 3
41388: GREATER
41389: IFFALSE 41409
// length := i_from - i_to else
41391: LD_ADDR_VAR 0 11
41395: PUSH
41396: LD_VAR 0 2
41400: PUSH
41401: LD_VAR 0 3
41405: MINUS
41406: ST_TO_ADDR
41407: GO 41431
// length := ( array - i_to ) + i_from ;
41409: LD_ADDR_VAR 0 11
41413: PUSH
41414: LD_VAR 0 1
41418: PUSH
41419: LD_VAR 0 3
41423: MINUS
41424: PUSH
41425: LD_VAR 0 2
41429: PLUS
41430: ST_TO_ADDR
// end ; if not length then
41431: LD_VAR 0 11
41435: NOT
41436: IFFALSE 41440
// exit ;
41438: GO 41598
// tmp := array ;
41440: LD_ADDR_VAR 0 10
41444: PUSH
41445: LD_VAR 0 1
41449: ST_TO_ADDR
// for i = 1 to length do
41450: LD_ADDR_VAR 0 6
41454: PUSH
41455: DOUBLE
41456: LD_INT 1
41458: DEC
41459: ST_TO_ADDR
41460: LD_VAR 0 11
41464: PUSH
41465: FOR_TO
41466: IFFALSE 41586
// begin for j = 1 to array do
41468: LD_ADDR_VAR 0 7
41472: PUSH
41473: DOUBLE
41474: LD_INT 1
41476: DEC
41477: ST_TO_ADDR
41478: LD_VAR 0 1
41482: PUSH
41483: FOR_TO
41484: IFFALSE 41572
// begin k := j + d ;
41486: LD_ADDR_VAR 0 8
41490: PUSH
41491: LD_VAR 0 7
41495: PUSH
41496: LD_VAR 0 9
41500: PLUS
41501: ST_TO_ADDR
// if k > array then
41502: LD_VAR 0 8
41506: PUSH
41507: LD_VAR 0 1
41511: GREATER
41512: IFFALSE 41522
// k := 1 ;
41514: LD_ADDR_VAR 0 8
41518: PUSH
41519: LD_INT 1
41521: ST_TO_ADDR
// if not k then
41522: LD_VAR 0 8
41526: NOT
41527: IFFALSE 41539
// k := array ;
41529: LD_ADDR_VAR 0 8
41533: PUSH
41534: LD_VAR 0 1
41538: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
41539: LD_ADDR_VAR 0 10
41543: PUSH
41544: LD_VAR 0 10
41548: PPUSH
41549: LD_VAR 0 8
41553: PPUSH
41554: LD_VAR 0 1
41558: PUSH
41559: LD_VAR 0 7
41563: ARRAY
41564: PPUSH
41565: CALL_OW 1
41569: ST_TO_ADDR
// end ;
41570: GO 41483
41572: POP
41573: POP
// array := tmp ;
41574: LD_ADDR_VAR 0 1
41578: PUSH
41579: LD_VAR 0 10
41583: ST_TO_ADDR
// end ;
41584: GO 41465
41586: POP
41587: POP
// result := array ;
41588: LD_ADDR_VAR 0 5
41592: PUSH
41593: LD_VAR 0 1
41597: ST_TO_ADDR
// end ;
41598: LD_VAR 0 5
41602: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
41603: LD_INT 0
41605: PPUSH
41606: PPUSH
// result := 0 ;
41607: LD_ADDR_VAR 0 3
41611: PUSH
41612: LD_INT 0
41614: ST_TO_ADDR
// if not array or not value in array then
41615: LD_VAR 0 1
41619: NOT
41620: PUSH
41621: LD_VAR 0 2
41625: PUSH
41626: LD_VAR 0 1
41630: IN
41631: NOT
41632: OR
41633: IFFALSE 41637
// exit ;
41635: GO 41691
// for i = 1 to array do
41637: LD_ADDR_VAR 0 4
41641: PUSH
41642: DOUBLE
41643: LD_INT 1
41645: DEC
41646: ST_TO_ADDR
41647: LD_VAR 0 1
41651: PUSH
41652: FOR_TO
41653: IFFALSE 41689
// if value = array [ i ] then
41655: LD_VAR 0 2
41659: PUSH
41660: LD_VAR 0 1
41664: PUSH
41665: LD_VAR 0 4
41669: ARRAY
41670: EQUAL
41671: IFFALSE 41687
// begin result := i ;
41673: LD_ADDR_VAR 0 3
41677: PUSH
41678: LD_VAR 0 4
41682: ST_TO_ADDR
// exit ;
41683: POP
41684: POP
41685: GO 41691
// end ;
41687: GO 41652
41689: POP
41690: POP
// end ;
41691: LD_VAR 0 3
41695: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
41696: LD_INT 0
41698: PPUSH
// vc_chassis := chassis ;
41699: LD_ADDR_OWVAR 37
41703: PUSH
41704: LD_VAR 0 1
41708: ST_TO_ADDR
// vc_engine := engine ;
41709: LD_ADDR_OWVAR 39
41713: PUSH
41714: LD_VAR 0 2
41718: ST_TO_ADDR
// vc_control := control ;
41719: LD_ADDR_OWVAR 38
41723: PUSH
41724: LD_VAR 0 3
41728: ST_TO_ADDR
// vc_weapon := weapon ;
41729: LD_ADDR_OWVAR 40
41733: PUSH
41734: LD_VAR 0 4
41738: ST_TO_ADDR
// vc_fuel_battery := fuel ;
41739: LD_ADDR_OWVAR 41
41743: PUSH
41744: LD_VAR 0 5
41748: ST_TO_ADDR
// end ;
41749: LD_VAR 0 6
41753: RET
// export function WantPlant ( unit ) ; var task ; begin
41754: LD_INT 0
41756: PPUSH
41757: PPUSH
// result := false ;
41758: LD_ADDR_VAR 0 2
41762: PUSH
41763: LD_INT 0
41765: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
41766: LD_ADDR_VAR 0 3
41770: PUSH
41771: LD_VAR 0 1
41775: PPUSH
41776: CALL_OW 437
41780: ST_TO_ADDR
// if task then
41781: LD_VAR 0 3
41785: IFFALSE 41813
// if task [ 1 ] [ 1 ] = p then
41787: LD_VAR 0 3
41791: PUSH
41792: LD_INT 1
41794: ARRAY
41795: PUSH
41796: LD_INT 1
41798: ARRAY
41799: PUSH
41800: LD_STRING p
41802: EQUAL
41803: IFFALSE 41813
// result := true ;
41805: LD_ADDR_VAR 0 2
41809: PUSH
41810: LD_INT 1
41812: ST_TO_ADDR
// end ;
41813: LD_VAR 0 2
41817: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
41818: LD_INT 0
41820: PPUSH
41821: PPUSH
41822: PPUSH
41823: PPUSH
// if pos < 1 then
41824: LD_VAR 0 2
41828: PUSH
41829: LD_INT 1
41831: LESS
41832: IFFALSE 41836
// exit ;
41834: GO 42139
// if pos = 1 then
41836: LD_VAR 0 2
41840: PUSH
41841: LD_INT 1
41843: EQUAL
41844: IFFALSE 41877
// result := Replace ( arr , pos [ 1 ] , value ) else
41846: LD_ADDR_VAR 0 4
41850: PUSH
41851: LD_VAR 0 1
41855: PPUSH
41856: LD_VAR 0 2
41860: PUSH
41861: LD_INT 1
41863: ARRAY
41864: PPUSH
41865: LD_VAR 0 3
41869: PPUSH
41870: CALL_OW 1
41874: ST_TO_ADDR
41875: GO 42139
// begin tmp := arr ;
41877: LD_ADDR_VAR 0 6
41881: PUSH
41882: LD_VAR 0 1
41886: ST_TO_ADDR
// s_arr := [ tmp ] ;
41887: LD_ADDR_VAR 0 7
41891: PUSH
41892: LD_VAR 0 6
41896: PUSH
41897: EMPTY
41898: LIST
41899: ST_TO_ADDR
// for i = 1 to pos - 1 do
41900: LD_ADDR_VAR 0 5
41904: PUSH
41905: DOUBLE
41906: LD_INT 1
41908: DEC
41909: ST_TO_ADDR
41910: LD_VAR 0 2
41914: PUSH
41915: LD_INT 1
41917: MINUS
41918: PUSH
41919: FOR_TO
41920: IFFALSE 41965
// begin tmp := tmp [ pos [ i ] ] ;
41922: LD_ADDR_VAR 0 6
41926: PUSH
41927: LD_VAR 0 6
41931: PUSH
41932: LD_VAR 0 2
41936: PUSH
41937: LD_VAR 0 5
41941: ARRAY
41942: ARRAY
41943: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
41944: LD_ADDR_VAR 0 7
41948: PUSH
41949: LD_VAR 0 7
41953: PUSH
41954: LD_VAR 0 6
41958: PUSH
41959: EMPTY
41960: LIST
41961: ADD
41962: ST_TO_ADDR
// end ;
41963: GO 41919
41965: POP
41966: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
41967: LD_ADDR_VAR 0 6
41971: PUSH
41972: LD_VAR 0 6
41976: PPUSH
41977: LD_VAR 0 2
41981: PUSH
41982: LD_VAR 0 2
41986: ARRAY
41987: PPUSH
41988: LD_VAR 0 3
41992: PPUSH
41993: CALL_OW 1
41997: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
41998: LD_ADDR_VAR 0 7
42002: PUSH
42003: LD_VAR 0 7
42007: PPUSH
42008: LD_VAR 0 7
42012: PPUSH
42013: LD_VAR 0 6
42017: PPUSH
42018: CALL_OW 1
42022: ST_TO_ADDR
// for i = s_arr downto 2 do
42023: LD_ADDR_VAR 0 5
42027: PUSH
42028: DOUBLE
42029: LD_VAR 0 7
42033: INC
42034: ST_TO_ADDR
42035: LD_INT 2
42037: PUSH
42038: FOR_DOWNTO
42039: IFFALSE 42123
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
42041: LD_ADDR_VAR 0 6
42045: PUSH
42046: LD_VAR 0 7
42050: PUSH
42051: LD_VAR 0 5
42055: PUSH
42056: LD_INT 1
42058: MINUS
42059: ARRAY
42060: PPUSH
42061: LD_VAR 0 2
42065: PUSH
42066: LD_VAR 0 5
42070: PUSH
42071: LD_INT 1
42073: MINUS
42074: ARRAY
42075: PPUSH
42076: LD_VAR 0 7
42080: PUSH
42081: LD_VAR 0 5
42085: ARRAY
42086: PPUSH
42087: CALL_OW 1
42091: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
42092: LD_ADDR_VAR 0 7
42096: PUSH
42097: LD_VAR 0 7
42101: PPUSH
42102: LD_VAR 0 5
42106: PUSH
42107: LD_INT 1
42109: MINUS
42110: PPUSH
42111: LD_VAR 0 6
42115: PPUSH
42116: CALL_OW 1
42120: ST_TO_ADDR
// end ;
42121: GO 42038
42123: POP
42124: POP
// result := s_arr [ 1 ] ;
42125: LD_ADDR_VAR 0 4
42129: PUSH
42130: LD_VAR 0 7
42134: PUSH
42135: LD_INT 1
42137: ARRAY
42138: ST_TO_ADDR
// end ; end ;
42139: LD_VAR 0 4
42143: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
42144: LD_INT 0
42146: PPUSH
42147: PPUSH
// if not list then
42148: LD_VAR 0 1
42152: NOT
42153: IFFALSE 42157
// exit ;
42155: GO 42248
// i := list [ pos1 ] ;
42157: LD_ADDR_VAR 0 5
42161: PUSH
42162: LD_VAR 0 1
42166: PUSH
42167: LD_VAR 0 2
42171: ARRAY
42172: ST_TO_ADDR
// if not i then
42173: LD_VAR 0 5
42177: NOT
42178: IFFALSE 42182
// exit ;
42180: GO 42248
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
42182: LD_ADDR_VAR 0 1
42186: PUSH
42187: LD_VAR 0 1
42191: PPUSH
42192: LD_VAR 0 2
42196: PPUSH
42197: LD_VAR 0 1
42201: PUSH
42202: LD_VAR 0 3
42206: ARRAY
42207: PPUSH
42208: CALL_OW 1
42212: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
42213: LD_ADDR_VAR 0 1
42217: PUSH
42218: LD_VAR 0 1
42222: PPUSH
42223: LD_VAR 0 3
42227: PPUSH
42228: LD_VAR 0 5
42232: PPUSH
42233: CALL_OW 1
42237: ST_TO_ADDR
// result := list ;
42238: LD_ADDR_VAR 0 4
42242: PUSH
42243: LD_VAR 0 1
42247: ST_TO_ADDR
// end ;
42248: LD_VAR 0 4
42252: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
42253: LD_INT 0
42255: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
42256: LD_ADDR_VAR 0 5
42260: PUSH
42261: LD_VAR 0 1
42265: PPUSH
42266: CALL_OW 250
42270: PPUSH
42271: LD_VAR 0 1
42275: PPUSH
42276: CALL_OW 251
42280: PPUSH
42281: LD_VAR 0 2
42285: PPUSH
42286: LD_VAR 0 3
42290: PPUSH
42291: LD_VAR 0 4
42295: PPUSH
42296: CALL 42306 0 5
42300: ST_TO_ADDR
// end ;
42301: LD_VAR 0 5
42305: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
42306: LD_INT 0
42308: PPUSH
42309: PPUSH
42310: PPUSH
42311: PPUSH
// if not list then
42312: LD_VAR 0 3
42316: NOT
42317: IFFALSE 42321
// exit ;
42319: GO 42709
// result := [ ] ;
42321: LD_ADDR_VAR 0 6
42325: PUSH
42326: EMPTY
42327: ST_TO_ADDR
// for i in list do
42328: LD_ADDR_VAR 0 7
42332: PUSH
42333: LD_VAR 0 3
42337: PUSH
42338: FOR_IN
42339: IFFALSE 42541
// begin tmp := GetDistUnitXY ( i , x , y ) ;
42341: LD_ADDR_VAR 0 9
42345: PUSH
42346: LD_VAR 0 7
42350: PPUSH
42351: LD_VAR 0 1
42355: PPUSH
42356: LD_VAR 0 2
42360: PPUSH
42361: CALL_OW 297
42365: ST_TO_ADDR
// if not result then
42366: LD_VAR 0 6
42370: NOT
42371: IFFALSE 42397
// result := [ [ i , tmp ] ] else
42373: LD_ADDR_VAR 0 6
42377: PUSH
42378: LD_VAR 0 7
42382: PUSH
42383: LD_VAR 0 9
42387: PUSH
42388: EMPTY
42389: LIST
42390: LIST
42391: PUSH
42392: EMPTY
42393: LIST
42394: ST_TO_ADDR
42395: GO 42539
// begin if result [ result ] [ 2 ] < tmp then
42397: LD_VAR 0 6
42401: PUSH
42402: LD_VAR 0 6
42406: ARRAY
42407: PUSH
42408: LD_INT 2
42410: ARRAY
42411: PUSH
42412: LD_VAR 0 9
42416: LESS
42417: IFFALSE 42459
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
42419: LD_ADDR_VAR 0 6
42423: PUSH
42424: LD_VAR 0 6
42428: PPUSH
42429: LD_VAR 0 6
42433: PUSH
42434: LD_INT 1
42436: PLUS
42437: PPUSH
42438: LD_VAR 0 7
42442: PUSH
42443: LD_VAR 0 9
42447: PUSH
42448: EMPTY
42449: LIST
42450: LIST
42451: PPUSH
42452: CALL_OW 2
42456: ST_TO_ADDR
42457: GO 42539
// for j = 1 to result do
42459: LD_ADDR_VAR 0 8
42463: PUSH
42464: DOUBLE
42465: LD_INT 1
42467: DEC
42468: ST_TO_ADDR
42469: LD_VAR 0 6
42473: PUSH
42474: FOR_TO
42475: IFFALSE 42537
// begin if tmp < result [ j ] [ 2 ] then
42477: LD_VAR 0 9
42481: PUSH
42482: LD_VAR 0 6
42486: PUSH
42487: LD_VAR 0 8
42491: ARRAY
42492: PUSH
42493: LD_INT 2
42495: ARRAY
42496: LESS
42497: IFFALSE 42535
// begin result := Insert ( result , j , [ i , tmp ] ) ;
42499: LD_ADDR_VAR 0 6
42503: PUSH
42504: LD_VAR 0 6
42508: PPUSH
42509: LD_VAR 0 8
42513: PPUSH
42514: LD_VAR 0 7
42518: PUSH
42519: LD_VAR 0 9
42523: PUSH
42524: EMPTY
42525: LIST
42526: LIST
42527: PPUSH
42528: CALL_OW 2
42532: ST_TO_ADDR
// break ;
42533: GO 42537
// end ; end ;
42535: GO 42474
42537: POP
42538: POP
// end ; end ;
42539: GO 42338
42541: POP
42542: POP
// if result and not asc then
42543: LD_VAR 0 6
42547: PUSH
42548: LD_VAR 0 4
42552: NOT
42553: AND
42554: IFFALSE 42629
// begin tmp := result ;
42556: LD_ADDR_VAR 0 9
42560: PUSH
42561: LD_VAR 0 6
42565: ST_TO_ADDR
// for i = tmp downto 1 do
42566: LD_ADDR_VAR 0 7
42570: PUSH
42571: DOUBLE
42572: LD_VAR 0 9
42576: INC
42577: ST_TO_ADDR
42578: LD_INT 1
42580: PUSH
42581: FOR_DOWNTO
42582: IFFALSE 42627
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
42584: LD_ADDR_VAR 0 6
42588: PUSH
42589: LD_VAR 0 6
42593: PPUSH
42594: LD_VAR 0 9
42598: PUSH
42599: LD_VAR 0 7
42603: MINUS
42604: PUSH
42605: LD_INT 1
42607: PLUS
42608: PPUSH
42609: LD_VAR 0 9
42613: PUSH
42614: LD_VAR 0 7
42618: ARRAY
42619: PPUSH
42620: CALL_OW 1
42624: ST_TO_ADDR
42625: GO 42581
42627: POP
42628: POP
// end ; tmp := [ ] ;
42629: LD_ADDR_VAR 0 9
42633: PUSH
42634: EMPTY
42635: ST_TO_ADDR
// if mode then
42636: LD_VAR 0 5
42640: IFFALSE 42709
// begin for i = 1 to result do
42642: LD_ADDR_VAR 0 7
42646: PUSH
42647: DOUBLE
42648: LD_INT 1
42650: DEC
42651: ST_TO_ADDR
42652: LD_VAR 0 6
42656: PUSH
42657: FOR_TO
42658: IFFALSE 42697
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
42660: LD_ADDR_VAR 0 9
42664: PUSH
42665: LD_VAR 0 9
42669: PPUSH
42670: LD_VAR 0 7
42674: PPUSH
42675: LD_VAR 0 6
42679: PUSH
42680: LD_VAR 0 7
42684: ARRAY
42685: PUSH
42686: LD_INT 1
42688: ARRAY
42689: PPUSH
42690: CALL_OW 1
42694: ST_TO_ADDR
42695: GO 42657
42697: POP
42698: POP
// result := tmp ;
42699: LD_ADDR_VAR 0 6
42703: PUSH
42704: LD_VAR 0 9
42708: ST_TO_ADDR
// end ; end ;
42709: LD_VAR 0 6
42713: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
42714: LD_INT 0
42716: PPUSH
42717: PPUSH
42718: PPUSH
42719: PPUSH
42720: PPUSH
42721: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
42722: LD_ADDR_VAR 0 5
42726: PUSH
42727: LD_INT 0
42729: PUSH
42730: LD_INT 0
42732: PUSH
42733: LD_INT 0
42735: PUSH
42736: EMPTY
42737: PUSH
42738: EMPTY
42739: LIST
42740: LIST
42741: LIST
42742: LIST
42743: ST_TO_ADDR
// if not x or not y then
42744: LD_VAR 0 2
42748: NOT
42749: PUSH
42750: LD_VAR 0 3
42754: NOT
42755: OR
42756: IFFALSE 42760
// exit ;
42758: GO 44406
// if not range then
42760: LD_VAR 0 4
42764: NOT
42765: IFFALSE 42775
// range := 10 ;
42767: LD_ADDR_VAR 0 4
42771: PUSH
42772: LD_INT 10
42774: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
42775: LD_ADDR_VAR 0 8
42779: PUSH
42780: LD_INT 81
42782: PUSH
42783: LD_VAR 0 1
42787: PUSH
42788: EMPTY
42789: LIST
42790: LIST
42791: PUSH
42792: LD_INT 92
42794: PUSH
42795: LD_VAR 0 2
42799: PUSH
42800: LD_VAR 0 3
42804: PUSH
42805: LD_VAR 0 4
42809: PUSH
42810: EMPTY
42811: LIST
42812: LIST
42813: LIST
42814: LIST
42815: PUSH
42816: LD_INT 3
42818: PUSH
42819: LD_INT 21
42821: PUSH
42822: LD_INT 3
42824: PUSH
42825: EMPTY
42826: LIST
42827: LIST
42828: PUSH
42829: EMPTY
42830: LIST
42831: LIST
42832: PUSH
42833: EMPTY
42834: LIST
42835: LIST
42836: LIST
42837: PPUSH
42838: CALL_OW 69
42842: ST_TO_ADDR
// if not tmp then
42843: LD_VAR 0 8
42847: NOT
42848: IFFALSE 42852
// exit ;
42850: GO 44406
// for i in tmp do
42852: LD_ADDR_VAR 0 6
42856: PUSH
42857: LD_VAR 0 8
42861: PUSH
42862: FOR_IN
42863: IFFALSE 44381
// begin points := [ 0 , 0 , 0 ] ;
42865: LD_ADDR_VAR 0 9
42869: PUSH
42870: LD_INT 0
42872: PUSH
42873: LD_INT 0
42875: PUSH
42876: LD_INT 0
42878: PUSH
42879: EMPTY
42880: LIST
42881: LIST
42882: LIST
42883: ST_TO_ADDR
// bpoints := 1 ;
42884: LD_ADDR_VAR 0 10
42888: PUSH
42889: LD_INT 1
42891: ST_TO_ADDR
// case GetType ( i ) of unit_human :
42892: LD_VAR 0 6
42896: PPUSH
42897: CALL_OW 247
42901: PUSH
42902: LD_INT 1
42904: DOUBLE
42905: EQUAL
42906: IFTRUE 42910
42908: GO 43488
42910: POP
// begin if GetClass ( i ) = 1 then
42911: LD_VAR 0 6
42915: PPUSH
42916: CALL_OW 257
42920: PUSH
42921: LD_INT 1
42923: EQUAL
42924: IFFALSE 42945
// points := [ 10 , 5 , 3 ] ;
42926: LD_ADDR_VAR 0 9
42930: PUSH
42931: LD_INT 10
42933: PUSH
42934: LD_INT 5
42936: PUSH
42937: LD_INT 3
42939: PUSH
42940: EMPTY
42941: LIST
42942: LIST
42943: LIST
42944: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
42945: LD_VAR 0 6
42949: PPUSH
42950: CALL_OW 257
42954: PUSH
42955: LD_INT 2
42957: PUSH
42958: LD_INT 3
42960: PUSH
42961: LD_INT 4
42963: PUSH
42964: EMPTY
42965: LIST
42966: LIST
42967: LIST
42968: IN
42969: IFFALSE 42990
// points := [ 3 , 2 , 1 ] ;
42971: LD_ADDR_VAR 0 9
42975: PUSH
42976: LD_INT 3
42978: PUSH
42979: LD_INT 2
42981: PUSH
42982: LD_INT 1
42984: PUSH
42985: EMPTY
42986: LIST
42987: LIST
42988: LIST
42989: ST_TO_ADDR
// if GetClass ( i ) = 5 then
42990: LD_VAR 0 6
42994: PPUSH
42995: CALL_OW 257
42999: PUSH
43000: LD_INT 5
43002: EQUAL
43003: IFFALSE 43024
// points := [ 130 , 5 , 2 ] ;
43005: LD_ADDR_VAR 0 9
43009: PUSH
43010: LD_INT 130
43012: PUSH
43013: LD_INT 5
43015: PUSH
43016: LD_INT 2
43018: PUSH
43019: EMPTY
43020: LIST
43021: LIST
43022: LIST
43023: ST_TO_ADDR
// if GetClass ( i ) = 8 then
43024: LD_VAR 0 6
43028: PPUSH
43029: CALL_OW 257
43033: PUSH
43034: LD_INT 8
43036: EQUAL
43037: IFFALSE 43058
// points := [ 35 , 35 , 30 ] ;
43039: LD_ADDR_VAR 0 9
43043: PUSH
43044: LD_INT 35
43046: PUSH
43047: LD_INT 35
43049: PUSH
43050: LD_INT 30
43052: PUSH
43053: EMPTY
43054: LIST
43055: LIST
43056: LIST
43057: ST_TO_ADDR
// if GetClass ( i ) = 9 then
43058: LD_VAR 0 6
43062: PPUSH
43063: CALL_OW 257
43067: PUSH
43068: LD_INT 9
43070: EQUAL
43071: IFFALSE 43092
// points := [ 20 , 55 , 40 ] ;
43073: LD_ADDR_VAR 0 9
43077: PUSH
43078: LD_INT 20
43080: PUSH
43081: LD_INT 55
43083: PUSH
43084: LD_INT 40
43086: PUSH
43087: EMPTY
43088: LIST
43089: LIST
43090: LIST
43091: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
43092: LD_VAR 0 6
43096: PPUSH
43097: CALL_OW 257
43101: PUSH
43102: LD_INT 12
43104: PUSH
43105: LD_INT 16
43107: PUSH
43108: EMPTY
43109: LIST
43110: LIST
43111: IN
43112: IFFALSE 43133
// points := [ 5 , 3 , 2 ] ;
43114: LD_ADDR_VAR 0 9
43118: PUSH
43119: LD_INT 5
43121: PUSH
43122: LD_INT 3
43124: PUSH
43125: LD_INT 2
43127: PUSH
43128: EMPTY
43129: LIST
43130: LIST
43131: LIST
43132: ST_TO_ADDR
// if GetClass ( i ) = 17 then
43133: LD_VAR 0 6
43137: PPUSH
43138: CALL_OW 257
43142: PUSH
43143: LD_INT 17
43145: EQUAL
43146: IFFALSE 43167
// points := [ 100 , 50 , 75 ] ;
43148: LD_ADDR_VAR 0 9
43152: PUSH
43153: LD_INT 100
43155: PUSH
43156: LD_INT 50
43158: PUSH
43159: LD_INT 75
43161: PUSH
43162: EMPTY
43163: LIST
43164: LIST
43165: LIST
43166: ST_TO_ADDR
// if GetClass ( i ) = 15 then
43167: LD_VAR 0 6
43171: PPUSH
43172: CALL_OW 257
43176: PUSH
43177: LD_INT 15
43179: EQUAL
43180: IFFALSE 43201
// points := [ 10 , 5 , 3 ] ;
43182: LD_ADDR_VAR 0 9
43186: PUSH
43187: LD_INT 10
43189: PUSH
43190: LD_INT 5
43192: PUSH
43193: LD_INT 3
43195: PUSH
43196: EMPTY
43197: LIST
43198: LIST
43199: LIST
43200: ST_TO_ADDR
// if GetClass ( i ) = 14 then
43201: LD_VAR 0 6
43205: PPUSH
43206: CALL_OW 257
43210: PUSH
43211: LD_INT 14
43213: EQUAL
43214: IFFALSE 43235
// points := [ 10 , 0 , 0 ] ;
43216: LD_ADDR_VAR 0 9
43220: PUSH
43221: LD_INT 10
43223: PUSH
43224: LD_INT 0
43226: PUSH
43227: LD_INT 0
43229: PUSH
43230: EMPTY
43231: LIST
43232: LIST
43233: LIST
43234: ST_TO_ADDR
// if GetClass ( i ) = 11 then
43235: LD_VAR 0 6
43239: PPUSH
43240: CALL_OW 257
43244: PUSH
43245: LD_INT 11
43247: EQUAL
43248: IFFALSE 43269
// points := [ 30 , 10 , 5 ] ;
43250: LD_ADDR_VAR 0 9
43254: PUSH
43255: LD_INT 30
43257: PUSH
43258: LD_INT 10
43260: PUSH
43261: LD_INT 5
43263: PUSH
43264: EMPTY
43265: LIST
43266: LIST
43267: LIST
43268: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
43269: LD_VAR 0 1
43273: PPUSH
43274: LD_INT 5
43276: PPUSH
43277: CALL_OW 321
43281: PUSH
43282: LD_INT 2
43284: EQUAL
43285: IFFALSE 43302
// bpoints := bpoints * 1.8 ;
43287: LD_ADDR_VAR 0 10
43291: PUSH
43292: LD_VAR 0 10
43296: PUSH
43297: LD_REAL  1.80000000000000E+0000
43300: MUL
43301: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
43302: LD_VAR 0 6
43306: PPUSH
43307: CALL_OW 257
43311: PUSH
43312: LD_INT 1
43314: PUSH
43315: LD_INT 2
43317: PUSH
43318: LD_INT 3
43320: PUSH
43321: LD_INT 4
43323: PUSH
43324: EMPTY
43325: LIST
43326: LIST
43327: LIST
43328: LIST
43329: IN
43330: PUSH
43331: LD_VAR 0 1
43335: PPUSH
43336: LD_INT 51
43338: PPUSH
43339: CALL_OW 321
43343: PUSH
43344: LD_INT 2
43346: EQUAL
43347: AND
43348: IFFALSE 43365
// bpoints := bpoints * 1.2 ;
43350: LD_ADDR_VAR 0 10
43354: PUSH
43355: LD_VAR 0 10
43359: PUSH
43360: LD_REAL  1.20000000000000E+0000
43363: MUL
43364: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
43365: LD_VAR 0 6
43369: PPUSH
43370: CALL_OW 257
43374: PUSH
43375: LD_INT 5
43377: PUSH
43378: LD_INT 7
43380: PUSH
43381: LD_INT 9
43383: PUSH
43384: EMPTY
43385: LIST
43386: LIST
43387: LIST
43388: IN
43389: PUSH
43390: LD_VAR 0 1
43394: PPUSH
43395: LD_INT 52
43397: PPUSH
43398: CALL_OW 321
43402: PUSH
43403: LD_INT 2
43405: EQUAL
43406: AND
43407: IFFALSE 43424
// bpoints := bpoints * 1.5 ;
43409: LD_ADDR_VAR 0 10
43413: PUSH
43414: LD_VAR 0 10
43418: PUSH
43419: LD_REAL  1.50000000000000E+0000
43422: MUL
43423: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
43424: LD_VAR 0 1
43428: PPUSH
43429: LD_INT 66
43431: PPUSH
43432: CALL_OW 321
43436: PUSH
43437: LD_INT 2
43439: EQUAL
43440: IFFALSE 43457
// bpoints := bpoints * 1.1 ;
43442: LD_ADDR_VAR 0 10
43446: PUSH
43447: LD_VAR 0 10
43451: PUSH
43452: LD_REAL  1.10000000000000E+0000
43455: MUL
43456: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
43457: LD_ADDR_VAR 0 10
43461: PUSH
43462: LD_VAR 0 10
43466: PUSH
43467: LD_VAR 0 6
43471: PPUSH
43472: LD_INT 1
43474: PPUSH
43475: CALL_OW 259
43479: PUSH
43480: LD_REAL  1.15000000000000E+0000
43483: MUL
43484: MUL
43485: ST_TO_ADDR
// end ; unit_vehicle :
43486: GO 44310
43488: LD_INT 2
43490: DOUBLE
43491: EQUAL
43492: IFTRUE 43496
43494: GO 44298
43496: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
43497: LD_VAR 0 6
43501: PPUSH
43502: CALL_OW 264
43506: PUSH
43507: LD_INT 2
43509: PUSH
43510: LD_INT 42
43512: PUSH
43513: LD_INT 24
43515: PUSH
43516: EMPTY
43517: LIST
43518: LIST
43519: LIST
43520: IN
43521: IFFALSE 43542
// points := [ 25 , 5 , 3 ] ;
43523: LD_ADDR_VAR 0 9
43527: PUSH
43528: LD_INT 25
43530: PUSH
43531: LD_INT 5
43533: PUSH
43534: LD_INT 3
43536: PUSH
43537: EMPTY
43538: LIST
43539: LIST
43540: LIST
43541: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
43542: LD_VAR 0 6
43546: PPUSH
43547: CALL_OW 264
43551: PUSH
43552: LD_INT 4
43554: PUSH
43555: LD_INT 43
43557: PUSH
43558: LD_INT 25
43560: PUSH
43561: EMPTY
43562: LIST
43563: LIST
43564: LIST
43565: IN
43566: IFFALSE 43587
// points := [ 40 , 15 , 5 ] ;
43568: LD_ADDR_VAR 0 9
43572: PUSH
43573: LD_INT 40
43575: PUSH
43576: LD_INT 15
43578: PUSH
43579: LD_INT 5
43581: PUSH
43582: EMPTY
43583: LIST
43584: LIST
43585: LIST
43586: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
43587: LD_VAR 0 6
43591: PPUSH
43592: CALL_OW 264
43596: PUSH
43597: LD_INT 3
43599: PUSH
43600: LD_INT 23
43602: PUSH
43603: EMPTY
43604: LIST
43605: LIST
43606: IN
43607: IFFALSE 43628
// points := [ 7 , 25 , 8 ] ;
43609: LD_ADDR_VAR 0 9
43613: PUSH
43614: LD_INT 7
43616: PUSH
43617: LD_INT 25
43619: PUSH
43620: LD_INT 8
43622: PUSH
43623: EMPTY
43624: LIST
43625: LIST
43626: LIST
43627: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
43628: LD_VAR 0 6
43632: PPUSH
43633: CALL_OW 264
43637: PUSH
43638: LD_INT 5
43640: PUSH
43641: LD_INT 27
43643: PUSH
43644: LD_INT 44
43646: PUSH
43647: EMPTY
43648: LIST
43649: LIST
43650: LIST
43651: IN
43652: IFFALSE 43673
// points := [ 14 , 50 , 16 ] ;
43654: LD_ADDR_VAR 0 9
43658: PUSH
43659: LD_INT 14
43661: PUSH
43662: LD_INT 50
43664: PUSH
43665: LD_INT 16
43667: PUSH
43668: EMPTY
43669: LIST
43670: LIST
43671: LIST
43672: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
43673: LD_VAR 0 6
43677: PPUSH
43678: CALL_OW 264
43682: PUSH
43683: LD_INT 6
43685: PUSH
43686: LD_INT 46
43688: PUSH
43689: EMPTY
43690: LIST
43691: LIST
43692: IN
43693: IFFALSE 43714
// points := [ 32 , 120 , 70 ] ;
43695: LD_ADDR_VAR 0 9
43699: PUSH
43700: LD_INT 32
43702: PUSH
43703: LD_INT 120
43705: PUSH
43706: LD_INT 70
43708: PUSH
43709: EMPTY
43710: LIST
43711: LIST
43712: LIST
43713: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
43714: LD_VAR 0 6
43718: PPUSH
43719: CALL_OW 264
43723: PUSH
43724: LD_INT 7
43726: PUSH
43727: LD_INT 28
43729: PUSH
43730: LD_INT 45
43732: PUSH
43733: EMPTY
43734: LIST
43735: LIST
43736: LIST
43737: IN
43738: IFFALSE 43759
// points := [ 35 , 20 , 45 ] ;
43740: LD_ADDR_VAR 0 9
43744: PUSH
43745: LD_INT 35
43747: PUSH
43748: LD_INT 20
43750: PUSH
43751: LD_INT 45
43753: PUSH
43754: EMPTY
43755: LIST
43756: LIST
43757: LIST
43758: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
43759: LD_VAR 0 6
43763: PPUSH
43764: CALL_OW 264
43768: PUSH
43769: LD_INT 47
43771: PUSH
43772: EMPTY
43773: LIST
43774: IN
43775: IFFALSE 43796
// points := [ 67 , 45 , 75 ] ;
43777: LD_ADDR_VAR 0 9
43781: PUSH
43782: LD_INT 67
43784: PUSH
43785: LD_INT 45
43787: PUSH
43788: LD_INT 75
43790: PUSH
43791: EMPTY
43792: LIST
43793: LIST
43794: LIST
43795: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
43796: LD_VAR 0 6
43800: PPUSH
43801: CALL_OW 264
43805: PUSH
43806: LD_INT 26
43808: PUSH
43809: EMPTY
43810: LIST
43811: IN
43812: IFFALSE 43833
// points := [ 120 , 30 , 80 ] ;
43814: LD_ADDR_VAR 0 9
43818: PUSH
43819: LD_INT 120
43821: PUSH
43822: LD_INT 30
43824: PUSH
43825: LD_INT 80
43827: PUSH
43828: EMPTY
43829: LIST
43830: LIST
43831: LIST
43832: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
43833: LD_VAR 0 6
43837: PPUSH
43838: CALL_OW 264
43842: PUSH
43843: LD_INT 22
43845: PUSH
43846: EMPTY
43847: LIST
43848: IN
43849: IFFALSE 43870
// points := [ 40 , 1 , 1 ] ;
43851: LD_ADDR_VAR 0 9
43855: PUSH
43856: LD_INT 40
43858: PUSH
43859: LD_INT 1
43861: PUSH
43862: LD_INT 1
43864: PUSH
43865: EMPTY
43866: LIST
43867: LIST
43868: LIST
43869: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
43870: LD_VAR 0 6
43874: PPUSH
43875: CALL_OW 264
43879: PUSH
43880: LD_INT 29
43882: PUSH
43883: EMPTY
43884: LIST
43885: IN
43886: IFFALSE 43907
// points := [ 70 , 200 , 400 ] ;
43888: LD_ADDR_VAR 0 9
43892: PUSH
43893: LD_INT 70
43895: PUSH
43896: LD_INT 200
43898: PUSH
43899: LD_INT 400
43901: PUSH
43902: EMPTY
43903: LIST
43904: LIST
43905: LIST
43906: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
43907: LD_VAR 0 6
43911: PPUSH
43912: CALL_OW 264
43916: PUSH
43917: LD_INT 14
43919: PUSH
43920: LD_INT 53
43922: PUSH
43923: EMPTY
43924: LIST
43925: LIST
43926: IN
43927: IFFALSE 43948
// points := [ 40 , 10 , 20 ] ;
43929: LD_ADDR_VAR 0 9
43933: PUSH
43934: LD_INT 40
43936: PUSH
43937: LD_INT 10
43939: PUSH
43940: LD_INT 20
43942: PUSH
43943: EMPTY
43944: LIST
43945: LIST
43946: LIST
43947: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
43948: LD_VAR 0 6
43952: PPUSH
43953: CALL_OW 264
43957: PUSH
43958: LD_INT 9
43960: PUSH
43961: EMPTY
43962: LIST
43963: IN
43964: IFFALSE 43985
// points := [ 5 , 70 , 20 ] ;
43966: LD_ADDR_VAR 0 9
43970: PUSH
43971: LD_INT 5
43973: PUSH
43974: LD_INT 70
43976: PUSH
43977: LD_INT 20
43979: PUSH
43980: EMPTY
43981: LIST
43982: LIST
43983: LIST
43984: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
43985: LD_VAR 0 6
43989: PPUSH
43990: CALL_OW 264
43994: PUSH
43995: LD_INT 10
43997: PUSH
43998: EMPTY
43999: LIST
44000: IN
44001: IFFALSE 44022
// points := [ 35 , 110 , 70 ] ;
44003: LD_ADDR_VAR 0 9
44007: PUSH
44008: LD_INT 35
44010: PUSH
44011: LD_INT 110
44013: PUSH
44014: LD_INT 70
44016: PUSH
44017: EMPTY
44018: LIST
44019: LIST
44020: LIST
44021: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
44022: LD_VAR 0 6
44026: PPUSH
44027: CALL_OW 265
44031: PUSH
44032: LD_INT 25
44034: EQUAL
44035: IFFALSE 44056
// points := [ 80 , 65 , 100 ] ;
44037: LD_ADDR_VAR 0 9
44041: PUSH
44042: LD_INT 80
44044: PUSH
44045: LD_INT 65
44047: PUSH
44048: LD_INT 100
44050: PUSH
44051: EMPTY
44052: LIST
44053: LIST
44054: LIST
44055: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
44056: LD_VAR 0 6
44060: PPUSH
44061: CALL_OW 263
44065: PUSH
44066: LD_INT 1
44068: EQUAL
44069: IFFALSE 44104
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
44071: LD_ADDR_VAR 0 10
44075: PUSH
44076: LD_VAR 0 10
44080: PUSH
44081: LD_VAR 0 6
44085: PPUSH
44086: CALL_OW 311
44090: PPUSH
44091: LD_INT 3
44093: PPUSH
44094: CALL_OW 259
44098: PUSH
44099: LD_INT 4
44101: MUL
44102: MUL
44103: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
44104: LD_VAR 0 6
44108: PPUSH
44109: CALL_OW 263
44113: PUSH
44114: LD_INT 2
44116: EQUAL
44117: IFFALSE 44168
// begin j := IsControledBy ( i ) ;
44119: LD_ADDR_VAR 0 7
44123: PUSH
44124: LD_VAR 0 6
44128: PPUSH
44129: CALL_OW 312
44133: ST_TO_ADDR
// if j then
44134: LD_VAR 0 7
44138: IFFALSE 44168
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
44140: LD_ADDR_VAR 0 10
44144: PUSH
44145: LD_VAR 0 10
44149: PUSH
44150: LD_VAR 0 7
44154: PPUSH
44155: LD_INT 3
44157: PPUSH
44158: CALL_OW 259
44162: PUSH
44163: LD_INT 3
44165: MUL
44166: MUL
44167: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
44168: LD_VAR 0 6
44172: PPUSH
44173: CALL_OW 264
44177: PUSH
44178: LD_INT 5
44180: PUSH
44181: LD_INT 6
44183: PUSH
44184: LD_INT 46
44186: PUSH
44187: LD_INT 44
44189: PUSH
44190: LD_INT 47
44192: PUSH
44193: LD_INT 45
44195: PUSH
44196: LD_INT 28
44198: PUSH
44199: LD_INT 7
44201: PUSH
44202: LD_INT 27
44204: PUSH
44205: LD_INT 29
44207: PUSH
44208: EMPTY
44209: LIST
44210: LIST
44211: LIST
44212: LIST
44213: LIST
44214: LIST
44215: LIST
44216: LIST
44217: LIST
44218: LIST
44219: IN
44220: PUSH
44221: LD_VAR 0 1
44225: PPUSH
44226: LD_INT 52
44228: PPUSH
44229: CALL_OW 321
44233: PUSH
44234: LD_INT 2
44236: EQUAL
44237: AND
44238: IFFALSE 44255
// bpoints := bpoints * 1.2 ;
44240: LD_ADDR_VAR 0 10
44244: PUSH
44245: LD_VAR 0 10
44249: PUSH
44250: LD_REAL  1.20000000000000E+0000
44253: MUL
44254: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
44255: LD_VAR 0 6
44259: PPUSH
44260: CALL_OW 264
44264: PUSH
44265: LD_INT 6
44267: PUSH
44268: LD_INT 46
44270: PUSH
44271: LD_INT 47
44273: PUSH
44274: EMPTY
44275: LIST
44276: LIST
44277: LIST
44278: IN
44279: IFFALSE 44296
// bpoints := bpoints * 1.2 ;
44281: LD_ADDR_VAR 0 10
44285: PUSH
44286: LD_VAR 0 10
44290: PUSH
44291: LD_REAL  1.20000000000000E+0000
44294: MUL
44295: ST_TO_ADDR
// end ; unit_building :
44296: GO 44310
44298: LD_INT 3
44300: DOUBLE
44301: EQUAL
44302: IFTRUE 44306
44304: GO 44309
44306: POP
// ; end ;
44307: GO 44310
44309: POP
// for j = 1 to 3 do
44310: LD_ADDR_VAR 0 7
44314: PUSH
44315: DOUBLE
44316: LD_INT 1
44318: DEC
44319: ST_TO_ADDR
44320: LD_INT 3
44322: PUSH
44323: FOR_TO
44324: IFFALSE 44377
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
44326: LD_ADDR_VAR 0 5
44330: PUSH
44331: LD_VAR 0 5
44335: PPUSH
44336: LD_VAR 0 7
44340: PPUSH
44341: LD_VAR 0 5
44345: PUSH
44346: LD_VAR 0 7
44350: ARRAY
44351: PUSH
44352: LD_VAR 0 9
44356: PUSH
44357: LD_VAR 0 7
44361: ARRAY
44362: PUSH
44363: LD_VAR 0 10
44367: MUL
44368: PLUS
44369: PPUSH
44370: CALL_OW 1
44374: ST_TO_ADDR
44375: GO 44323
44377: POP
44378: POP
// end ;
44379: GO 42862
44381: POP
44382: POP
// result := Replace ( result , 4 , tmp ) ;
44383: LD_ADDR_VAR 0 5
44387: PUSH
44388: LD_VAR 0 5
44392: PPUSH
44393: LD_INT 4
44395: PPUSH
44396: LD_VAR 0 8
44400: PPUSH
44401: CALL_OW 1
44405: ST_TO_ADDR
// end ;
44406: LD_VAR 0 5
44410: RET
// export function DangerAtRange ( unit , range ) ; begin
44411: LD_INT 0
44413: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
44414: LD_ADDR_VAR 0 3
44418: PUSH
44419: LD_VAR 0 1
44423: PPUSH
44424: CALL_OW 255
44428: PPUSH
44429: LD_VAR 0 1
44433: PPUSH
44434: CALL_OW 250
44438: PPUSH
44439: LD_VAR 0 1
44443: PPUSH
44444: CALL_OW 251
44448: PPUSH
44449: LD_VAR 0 2
44453: PPUSH
44454: CALL 42714 0 4
44458: ST_TO_ADDR
// end ;
44459: LD_VAR 0 3
44463: RET
// export function DangerInArea ( side , area ) ; begin
44464: LD_INT 0
44466: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
44467: LD_ADDR_VAR 0 3
44471: PUSH
44472: LD_VAR 0 2
44476: PPUSH
44477: LD_INT 81
44479: PUSH
44480: LD_VAR 0 1
44484: PUSH
44485: EMPTY
44486: LIST
44487: LIST
44488: PPUSH
44489: CALL_OW 70
44493: ST_TO_ADDR
// end ;
44494: LD_VAR 0 3
44498: RET
// export function IsExtension ( b ) ; begin
44499: LD_INT 0
44501: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
44502: LD_ADDR_VAR 0 2
44506: PUSH
44507: LD_VAR 0 1
44511: PUSH
44512: LD_INT 23
44514: PUSH
44515: LD_INT 20
44517: PUSH
44518: LD_INT 22
44520: PUSH
44521: LD_INT 17
44523: PUSH
44524: LD_INT 24
44526: PUSH
44527: LD_INT 21
44529: PUSH
44530: LD_INT 19
44532: PUSH
44533: LD_INT 16
44535: PUSH
44536: LD_INT 25
44538: PUSH
44539: LD_INT 18
44541: PUSH
44542: EMPTY
44543: LIST
44544: LIST
44545: LIST
44546: LIST
44547: LIST
44548: LIST
44549: LIST
44550: LIST
44551: LIST
44552: LIST
44553: IN
44554: ST_TO_ADDR
// end ;
44555: LD_VAR 0 2
44559: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
44560: LD_INT 0
44562: PPUSH
44563: PPUSH
44564: PPUSH
// result := [ ] ;
44565: LD_ADDR_VAR 0 4
44569: PUSH
44570: EMPTY
44571: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
44572: LD_ADDR_VAR 0 5
44576: PUSH
44577: LD_VAR 0 2
44581: PPUSH
44582: LD_INT 21
44584: PUSH
44585: LD_INT 3
44587: PUSH
44588: EMPTY
44589: LIST
44590: LIST
44591: PPUSH
44592: CALL_OW 70
44596: ST_TO_ADDR
// if not tmp then
44597: LD_VAR 0 5
44601: NOT
44602: IFFALSE 44606
// exit ;
44604: GO 44670
// if checkLink then
44606: LD_VAR 0 3
44610: IFFALSE 44660
// begin for i in tmp do
44612: LD_ADDR_VAR 0 6
44616: PUSH
44617: LD_VAR 0 5
44621: PUSH
44622: FOR_IN
44623: IFFALSE 44658
// if GetBase ( i ) <> base then
44625: LD_VAR 0 6
44629: PPUSH
44630: CALL_OW 274
44634: PUSH
44635: LD_VAR 0 1
44639: NONEQUAL
44640: IFFALSE 44656
// ComLinkToBase ( base , i ) ;
44642: LD_VAR 0 1
44646: PPUSH
44647: LD_VAR 0 6
44651: PPUSH
44652: CALL_OW 169
44656: GO 44622
44658: POP
44659: POP
// end ; result := tmp ;
44660: LD_ADDR_VAR 0 4
44664: PUSH
44665: LD_VAR 0 5
44669: ST_TO_ADDR
// end ;
44670: LD_VAR 0 4
44674: RET
// export function ComComplete ( units , b ) ; var i ; begin
44675: LD_INT 0
44677: PPUSH
44678: PPUSH
// if not units then
44679: LD_VAR 0 1
44683: NOT
44684: IFFALSE 44688
// exit ;
44686: GO 44778
// for i in units do
44688: LD_ADDR_VAR 0 4
44692: PUSH
44693: LD_VAR 0 1
44697: PUSH
44698: FOR_IN
44699: IFFALSE 44776
// if BuildingStatus ( b ) = bs_build then
44701: LD_VAR 0 2
44705: PPUSH
44706: CALL_OW 461
44710: PUSH
44711: LD_INT 1
44713: EQUAL
44714: IFFALSE 44774
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
44716: LD_VAR 0 4
44720: PPUSH
44721: LD_STRING h
44723: PUSH
44724: LD_VAR 0 2
44728: PPUSH
44729: CALL_OW 250
44733: PUSH
44734: LD_VAR 0 2
44738: PPUSH
44739: CALL_OW 251
44743: PUSH
44744: LD_VAR 0 2
44748: PUSH
44749: LD_INT 0
44751: PUSH
44752: LD_INT 0
44754: PUSH
44755: LD_INT 0
44757: PUSH
44758: EMPTY
44759: LIST
44760: LIST
44761: LIST
44762: LIST
44763: LIST
44764: LIST
44765: LIST
44766: PUSH
44767: EMPTY
44768: LIST
44769: PPUSH
44770: CALL_OW 446
44774: GO 44698
44776: POP
44777: POP
// end ;
44778: LD_VAR 0 3
44782: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
44783: LD_INT 0
44785: PPUSH
44786: PPUSH
44787: PPUSH
44788: PPUSH
44789: PPUSH
44790: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
44791: LD_VAR 0 1
44795: NOT
44796: PUSH
44797: LD_VAR 0 1
44801: PPUSH
44802: CALL_OW 263
44806: PUSH
44807: LD_INT 2
44809: EQUAL
44810: NOT
44811: OR
44812: IFFALSE 44816
// exit ;
44814: GO 45132
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
44816: LD_ADDR_VAR 0 6
44820: PUSH
44821: LD_INT 22
44823: PUSH
44824: LD_VAR 0 1
44828: PPUSH
44829: CALL_OW 255
44833: PUSH
44834: EMPTY
44835: LIST
44836: LIST
44837: PUSH
44838: LD_INT 2
44840: PUSH
44841: LD_INT 30
44843: PUSH
44844: LD_INT 36
44846: PUSH
44847: EMPTY
44848: LIST
44849: LIST
44850: PUSH
44851: LD_INT 34
44853: PUSH
44854: LD_INT 31
44856: PUSH
44857: EMPTY
44858: LIST
44859: LIST
44860: PUSH
44861: EMPTY
44862: LIST
44863: LIST
44864: LIST
44865: PUSH
44866: EMPTY
44867: LIST
44868: LIST
44869: PPUSH
44870: CALL_OW 69
44874: ST_TO_ADDR
// if not tmp then
44875: LD_VAR 0 6
44879: NOT
44880: IFFALSE 44884
// exit ;
44882: GO 45132
// result := [ ] ;
44884: LD_ADDR_VAR 0 2
44888: PUSH
44889: EMPTY
44890: ST_TO_ADDR
// for i in tmp do
44891: LD_ADDR_VAR 0 3
44895: PUSH
44896: LD_VAR 0 6
44900: PUSH
44901: FOR_IN
44902: IFFALSE 44973
// begin t := UnitsInside ( i ) ;
44904: LD_ADDR_VAR 0 4
44908: PUSH
44909: LD_VAR 0 3
44913: PPUSH
44914: CALL_OW 313
44918: ST_TO_ADDR
// if t then
44919: LD_VAR 0 4
44923: IFFALSE 44971
// for j in t do
44925: LD_ADDR_VAR 0 7
44929: PUSH
44930: LD_VAR 0 4
44934: PUSH
44935: FOR_IN
44936: IFFALSE 44969
// result := Insert ( result , result + 1 , j ) ;
44938: LD_ADDR_VAR 0 2
44942: PUSH
44943: LD_VAR 0 2
44947: PPUSH
44948: LD_VAR 0 2
44952: PUSH
44953: LD_INT 1
44955: PLUS
44956: PPUSH
44957: LD_VAR 0 7
44961: PPUSH
44962: CALL_OW 2
44966: ST_TO_ADDR
44967: GO 44935
44969: POP
44970: POP
// end ;
44971: GO 44901
44973: POP
44974: POP
// if not result then
44975: LD_VAR 0 2
44979: NOT
44980: IFFALSE 44984
// exit ;
44982: GO 45132
// mech := result [ 1 ] ;
44984: LD_ADDR_VAR 0 5
44988: PUSH
44989: LD_VAR 0 2
44993: PUSH
44994: LD_INT 1
44996: ARRAY
44997: ST_TO_ADDR
// if result > 1 then
44998: LD_VAR 0 2
45002: PUSH
45003: LD_INT 1
45005: GREATER
45006: IFFALSE 45118
// for i = 2 to result do
45008: LD_ADDR_VAR 0 3
45012: PUSH
45013: DOUBLE
45014: LD_INT 2
45016: DEC
45017: ST_TO_ADDR
45018: LD_VAR 0 2
45022: PUSH
45023: FOR_TO
45024: IFFALSE 45116
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
45026: LD_ADDR_VAR 0 4
45030: PUSH
45031: LD_VAR 0 2
45035: PUSH
45036: LD_VAR 0 3
45040: ARRAY
45041: PPUSH
45042: LD_INT 3
45044: PPUSH
45045: CALL_OW 259
45049: PUSH
45050: LD_VAR 0 2
45054: PUSH
45055: LD_VAR 0 3
45059: ARRAY
45060: PPUSH
45061: CALL_OW 432
45065: MINUS
45066: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
45067: LD_VAR 0 4
45071: PUSH
45072: LD_VAR 0 5
45076: PPUSH
45077: LD_INT 3
45079: PPUSH
45080: CALL_OW 259
45084: PUSH
45085: LD_VAR 0 5
45089: PPUSH
45090: CALL_OW 432
45094: MINUS
45095: GREATEREQUAL
45096: IFFALSE 45114
// mech := result [ i ] ;
45098: LD_ADDR_VAR 0 5
45102: PUSH
45103: LD_VAR 0 2
45107: PUSH
45108: LD_VAR 0 3
45112: ARRAY
45113: ST_TO_ADDR
// end ;
45114: GO 45023
45116: POP
45117: POP
// ComLinkTo ( vehicle , mech ) ;
45118: LD_VAR 0 1
45122: PPUSH
45123: LD_VAR 0 5
45127: PPUSH
45128: CALL_OW 135
// end ;
45132: LD_VAR 0 2
45136: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
45137: LD_INT 0
45139: PPUSH
45140: PPUSH
45141: PPUSH
45142: PPUSH
45143: PPUSH
45144: PPUSH
45145: PPUSH
45146: PPUSH
45147: PPUSH
45148: PPUSH
45149: PPUSH
45150: PPUSH
45151: PPUSH
// result := [ ] ;
45152: LD_ADDR_VAR 0 7
45156: PUSH
45157: EMPTY
45158: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
45159: LD_VAR 0 1
45163: PPUSH
45164: CALL_OW 266
45168: PUSH
45169: LD_INT 0
45171: PUSH
45172: LD_INT 1
45174: PUSH
45175: EMPTY
45176: LIST
45177: LIST
45178: IN
45179: NOT
45180: IFFALSE 45184
// exit ;
45182: GO 46818
// if name then
45184: LD_VAR 0 3
45188: IFFALSE 45204
// SetBName ( base_dep , name ) ;
45190: LD_VAR 0 1
45194: PPUSH
45195: LD_VAR 0 3
45199: PPUSH
45200: CALL_OW 500
// base := GetBase ( base_dep ) ;
45204: LD_ADDR_VAR 0 15
45208: PUSH
45209: LD_VAR 0 1
45213: PPUSH
45214: CALL_OW 274
45218: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
45219: LD_ADDR_VAR 0 16
45223: PUSH
45224: LD_VAR 0 1
45228: PPUSH
45229: CALL_OW 255
45233: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
45234: LD_ADDR_VAR 0 17
45238: PUSH
45239: LD_VAR 0 1
45243: PPUSH
45244: CALL_OW 248
45248: ST_TO_ADDR
// if sources then
45249: LD_VAR 0 5
45253: IFFALSE 45300
// for i = 1 to 3 do
45255: LD_ADDR_VAR 0 8
45259: PUSH
45260: DOUBLE
45261: LD_INT 1
45263: DEC
45264: ST_TO_ADDR
45265: LD_INT 3
45267: PUSH
45268: FOR_TO
45269: IFFALSE 45298
// AddResourceType ( base , i , sources [ i ] ) ;
45271: LD_VAR 0 15
45275: PPUSH
45276: LD_VAR 0 8
45280: PPUSH
45281: LD_VAR 0 5
45285: PUSH
45286: LD_VAR 0 8
45290: ARRAY
45291: PPUSH
45292: CALL_OW 276
45296: GO 45268
45298: POP
45299: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
45300: LD_ADDR_VAR 0 18
45304: PUSH
45305: LD_VAR 0 15
45309: PPUSH
45310: LD_VAR 0 2
45314: PPUSH
45315: LD_INT 1
45317: PPUSH
45318: CALL 44560 0 3
45322: ST_TO_ADDR
// InitHc ;
45323: CALL_OW 19
// InitUc ;
45327: CALL_OW 18
// uc_side := side ;
45331: LD_ADDR_OWVAR 20
45335: PUSH
45336: LD_VAR 0 16
45340: ST_TO_ADDR
// uc_nation := nation ;
45341: LD_ADDR_OWVAR 21
45345: PUSH
45346: LD_VAR 0 17
45350: ST_TO_ADDR
// if buildings then
45351: LD_VAR 0 18
45355: IFFALSE 46677
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
45357: LD_ADDR_VAR 0 19
45361: PUSH
45362: LD_VAR 0 18
45366: PPUSH
45367: LD_INT 2
45369: PUSH
45370: LD_INT 30
45372: PUSH
45373: LD_INT 29
45375: PUSH
45376: EMPTY
45377: LIST
45378: LIST
45379: PUSH
45380: LD_INT 30
45382: PUSH
45383: LD_INT 30
45385: PUSH
45386: EMPTY
45387: LIST
45388: LIST
45389: PUSH
45390: EMPTY
45391: LIST
45392: LIST
45393: LIST
45394: PPUSH
45395: CALL_OW 72
45399: ST_TO_ADDR
// if tmp then
45400: LD_VAR 0 19
45404: IFFALSE 45452
// for i in tmp do
45406: LD_ADDR_VAR 0 8
45410: PUSH
45411: LD_VAR 0 19
45415: PUSH
45416: FOR_IN
45417: IFFALSE 45450
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
45419: LD_VAR 0 8
45423: PPUSH
45424: CALL_OW 250
45428: PPUSH
45429: LD_VAR 0 8
45433: PPUSH
45434: CALL_OW 251
45438: PPUSH
45439: LD_VAR 0 16
45443: PPUSH
45444: CALL_OW 441
45448: GO 45416
45450: POP
45451: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
45452: LD_VAR 0 18
45456: PPUSH
45457: LD_INT 2
45459: PUSH
45460: LD_INT 30
45462: PUSH
45463: LD_INT 32
45465: PUSH
45466: EMPTY
45467: LIST
45468: LIST
45469: PUSH
45470: LD_INT 30
45472: PUSH
45473: LD_INT 33
45475: PUSH
45476: EMPTY
45477: LIST
45478: LIST
45479: PUSH
45480: EMPTY
45481: LIST
45482: LIST
45483: LIST
45484: PPUSH
45485: CALL_OW 72
45489: IFFALSE 45577
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
45491: LD_ADDR_VAR 0 8
45495: PUSH
45496: LD_VAR 0 18
45500: PPUSH
45501: LD_INT 2
45503: PUSH
45504: LD_INT 30
45506: PUSH
45507: LD_INT 32
45509: PUSH
45510: EMPTY
45511: LIST
45512: LIST
45513: PUSH
45514: LD_INT 30
45516: PUSH
45517: LD_INT 33
45519: PUSH
45520: EMPTY
45521: LIST
45522: LIST
45523: PUSH
45524: EMPTY
45525: LIST
45526: LIST
45527: LIST
45528: PPUSH
45529: CALL_OW 72
45533: PUSH
45534: FOR_IN
45535: IFFALSE 45575
// begin if not GetBWeapon ( i ) then
45537: LD_VAR 0 8
45541: PPUSH
45542: CALL_OW 269
45546: NOT
45547: IFFALSE 45573
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
45549: LD_VAR 0 8
45553: PPUSH
45554: LD_VAR 0 8
45558: PPUSH
45559: LD_VAR 0 2
45563: PPUSH
45564: CALL 46823 0 2
45568: PPUSH
45569: CALL_OW 431
// end ;
45573: GO 45534
45575: POP
45576: POP
// end ; for i = 1 to personel do
45577: LD_ADDR_VAR 0 8
45581: PUSH
45582: DOUBLE
45583: LD_INT 1
45585: DEC
45586: ST_TO_ADDR
45587: LD_VAR 0 6
45591: PUSH
45592: FOR_TO
45593: IFFALSE 46657
// begin if i > 4 then
45595: LD_VAR 0 8
45599: PUSH
45600: LD_INT 4
45602: GREATER
45603: IFFALSE 45607
// break ;
45605: GO 46657
// case i of 1 :
45607: LD_VAR 0 8
45611: PUSH
45612: LD_INT 1
45614: DOUBLE
45615: EQUAL
45616: IFTRUE 45620
45618: GO 45700
45620: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
45621: LD_ADDR_VAR 0 12
45625: PUSH
45626: LD_VAR 0 18
45630: PPUSH
45631: LD_INT 22
45633: PUSH
45634: LD_VAR 0 16
45638: PUSH
45639: EMPTY
45640: LIST
45641: LIST
45642: PUSH
45643: LD_INT 58
45645: PUSH
45646: EMPTY
45647: LIST
45648: PUSH
45649: LD_INT 2
45651: PUSH
45652: LD_INT 30
45654: PUSH
45655: LD_INT 32
45657: PUSH
45658: EMPTY
45659: LIST
45660: LIST
45661: PUSH
45662: LD_INT 30
45664: PUSH
45665: LD_INT 4
45667: PUSH
45668: EMPTY
45669: LIST
45670: LIST
45671: PUSH
45672: LD_INT 30
45674: PUSH
45675: LD_INT 5
45677: PUSH
45678: EMPTY
45679: LIST
45680: LIST
45681: PUSH
45682: EMPTY
45683: LIST
45684: LIST
45685: LIST
45686: LIST
45687: PUSH
45688: EMPTY
45689: LIST
45690: LIST
45691: LIST
45692: PPUSH
45693: CALL_OW 72
45697: ST_TO_ADDR
45698: GO 45922
45700: LD_INT 2
45702: DOUBLE
45703: EQUAL
45704: IFTRUE 45708
45706: GO 45770
45708: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
45709: LD_ADDR_VAR 0 12
45713: PUSH
45714: LD_VAR 0 18
45718: PPUSH
45719: LD_INT 22
45721: PUSH
45722: LD_VAR 0 16
45726: PUSH
45727: EMPTY
45728: LIST
45729: LIST
45730: PUSH
45731: LD_INT 2
45733: PUSH
45734: LD_INT 30
45736: PUSH
45737: LD_INT 0
45739: PUSH
45740: EMPTY
45741: LIST
45742: LIST
45743: PUSH
45744: LD_INT 30
45746: PUSH
45747: LD_INT 1
45749: PUSH
45750: EMPTY
45751: LIST
45752: LIST
45753: PUSH
45754: EMPTY
45755: LIST
45756: LIST
45757: LIST
45758: PUSH
45759: EMPTY
45760: LIST
45761: LIST
45762: PPUSH
45763: CALL_OW 72
45767: ST_TO_ADDR
45768: GO 45922
45770: LD_INT 3
45772: DOUBLE
45773: EQUAL
45774: IFTRUE 45778
45776: GO 45840
45778: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
45779: LD_ADDR_VAR 0 12
45783: PUSH
45784: LD_VAR 0 18
45788: PPUSH
45789: LD_INT 22
45791: PUSH
45792: LD_VAR 0 16
45796: PUSH
45797: EMPTY
45798: LIST
45799: LIST
45800: PUSH
45801: LD_INT 2
45803: PUSH
45804: LD_INT 30
45806: PUSH
45807: LD_INT 2
45809: PUSH
45810: EMPTY
45811: LIST
45812: LIST
45813: PUSH
45814: LD_INT 30
45816: PUSH
45817: LD_INT 3
45819: PUSH
45820: EMPTY
45821: LIST
45822: LIST
45823: PUSH
45824: EMPTY
45825: LIST
45826: LIST
45827: LIST
45828: PUSH
45829: EMPTY
45830: LIST
45831: LIST
45832: PPUSH
45833: CALL_OW 72
45837: ST_TO_ADDR
45838: GO 45922
45840: LD_INT 4
45842: DOUBLE
45843: EQUAL
45844: IFTRUE 45848
45846: GO 45921
45848: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
45849: LD_ADDR_VAR 0 12
45853: PUSH
45854: LD_VAR 0 18
45858: PPUSH
45859: LD_INT 22
45861: PUSH
45862: LD_VAR 0 16
45866: PUSH
45867: EMPTY
45868: LIST
45869: LIST
45870: PUSH
45871: LD_INT 2
45873: PUSH
45874: LD_INT 30
45876: PUSH
45877: LD_INT 6
45879: PUSH
45880: EMPTY
45881: LIST
45882: LIST
45883: PUSH
45884: LD_INT 30
45886: PUSH
45887: LD_INT 7
45889: PUSH
45890: EMPTY
45891: LIST
45892: LIST
45893: PUSH
45894: LD_INT 30
45896: PUSH
45897: LD_INT 8
45899: PUSH
45900: EMPTY
45901: LIST
45902: LIST
45903: PUSH
45904: EMPTY
45905: LIST
45906: LIST
45907: LIST
45908: LIST
45909: PUSH
45910: EMPTY
45911: LIST
45912: LIST
45913: PPUSH
45914: CALL_OW 72
45918: ST_TO_ADDR
45919: GO 45922
45921: POP
// if i = 1 then
45922: LD_VAR 0 8
45926: PUSH
45927: LD_INT 1
45929: EQUAL
45930: IFFALSE 46041
// begin tmp := [ ] ;
45932: LD_ADDR_VAR 0 19
45936: PUSH
45937: EMPTY
45938: ST_TO_ADDR
// for j in f do
45939: LD_ADDR_VAR 0 9
45943: PUSH
45944: LD_VAR 0 12
45948: PUSH
45949: FOR_IN
45950: IFFALSE 46023
// if GetBType ( j ) = b_bunker then
45952: LD_VAR 0 9
45956: PPUSH
45957: CALL_OW 266
45961: PUSH
45962: LD_INT 32
45964: EQUAL
45965: IFFALSE 45992
// tmp := Insert ( tmp , 1 , j ) else
45967: LD_ADDR_VAR 0 19
45971: PUSH
45972: LD_VAR 0 19
45976: PPUSH
45977: LD_INT 1
45979: PPUSH
45980: LD_VAR 0 9
45984: PPUSH
45985: CALL_OW 2
45989: ST_TO_ADDR
45990: GO 46021
// tmp := Insert ( tmp , tmp + 1 , j ) ;
45992: LD_ADDR_VAR 0 19
45996: PUSH
45997: LD_VAR 0 19
46001: PPUSH
46002: LD_VAR 0 19
46006: PUSH
46007: LD_INT 1
46009: PLUS
46010: PPUSH
46011: LD_VAR 0 9
46015: PPUSH
46016: CALL_OW 2
46020: ST_TO_ADDR
46021: GO 45949
46023: POP
46024: POP
// if tmp then
46025: LD_VAR 0 19
46029: IFFALSE 46041
// f := tmp ;
46031: LD_ADDR_VAR 0 12
46035: PUSH
46036: LD_VAR 0 19
46040: ST_TO_ADDR
// end ; x := personel [ i ] ;
46041: LD_ADDR_VAR 0 13
46045: PUSH
46046: LD_VAR 0 6
46050: PUSH
46051: LD_VAR 0 8
46055: ARRAY
46056: ST_TO_ADDR
// if x = - 1 then
46057: LD_VAR 0 13
46061: PUSH
46062: LD_INT 1
46064: NEG
46065: EQUAL
46066: IFFALSE 46275
// begin for j in f do
46068: LD_ADDR_VAR 0 9
46072: PUSH
46073: LD_VAR 0 12
46077: PUSH
46078: FOR_IN
46079: IFFALSE 46271
// repeat InitHc ;
46081: CALL_OW 19
// if GetBType ( j ) = b_barracks then
46085: LD_VAR 0 9
46089: PPUSH
46090: CALL_OW 266
46094: PUSH
46095: LD_INT 5
46097: EQUAL
46098: IFFALSE 46168
// begin if UnitsInside ( j ) < 3 then
46100: LD_VAR 0 9
46104: PPUSH
46105: CALL_OW 313
46109: PUSH
46110: LD_INT 3
46112: LESS
46113: IFFALSE 46149
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
46115: LD_INT 0
46117: PPUSH
46118: LD_INT 5
46120: PUSH
46121: LD_INT 8
46123: PUSH
46124: LD_INT 9
46126: PUSH
46127: EMPTY
46128: LIST
46129: LIST
46130: LIST
46131: PUSH
46132: LD_VAR 0 17
46136: ARRAY
46137: PPUSH
46138: LD_VAR 0 4
46142: PPUSH
46143: CALL_OW 380
46147: GO 46166
// PrepareHuman ( false , i , skill ) ;
46149: LD_INT 0
46151: PPUSH
46152: LD_VAR 0 8
46156: PPUSH
46157: LD_VAR 0 4
46161: PPUSH
46162: CALL_OW 380
// end else
46166: GO 46185
// PrepareHuman ( false , i , skill ) ;
46168: LD_INT 0
46170: PPUSH
46171: LD_VAR 0 8
46175: PPUSH
46176: LD_VAR 0 4
46180: PPUSH
46181: CALL_OW 380
// un := CreateHuman ;
46185: LD_ADDR_VAR 0 14
46189: PUSH
46190: CALL_OW 44
46194: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46195: LD_ADDR_VAR 0 7
46199: PUSH
46200: LD_VAR 0 7
46204: PPUSH
46205: LD_INT 1
46207: PPUSH
46208: LD_VAR 0 14
46212: PPUSH
46213: CALL_OW 2
46217: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
46218: LD_VAR 0 14
46222: PPUSH
46223: LD_VAR 0 9
46227: PPUSH
46228: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
46232: LD_VAR 0 9
46236: PPUSH
46237: CALL_OW 313
46241: PUSH
46242: LD_INT 6
46244: EQUAL
46245: PUSH
46246: LD_VAR 0 9
46250: PPUSH
46251: CALL_OW 266
46255: PUSH
46256: LD_INT 32
46258: PUSH
46259: LD_INT 31
46261: PUSH
46262: EMPTY
46263: LIST
46264: LIST
46265: IN
46266: OR
46267: IFFALSE 46081
46269: GO 46078
46271: POP
46272: POP
// end else
46273: GO 46655
// for j = 1 to x do
46275: LD_ADDR_VAR 0 9
46279: PUSH
46280: DOUBLE
46281: LD_INT 1
46283: DEC
46284: ST_TO_ADDR
46285: LD_VAR 0 13
46289: PUSH
46290: FOR_TO
46291: IFFALSE 46653
// begin InitHc ;
46293: CALL_OW 19
// if not f then
46297: LD_VAR 0 12
46301: NOT
46302: IFFALSE 46391
// begin PrepareHuman ( false , i , skill ) ;
46304: LD_INT 0
46306: PPUSH
46307: LD_VAR 0 8
46311: PPUSH
46312: LD_VAR 0 4
46316: PPUSH
46317: CALL_OW 380
// un := CreateHuman ;
46321: LD_ADDR_VAR 0 14
46325: PUSH
46326: CALL_OW 44
46330: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46331: LD_ADDR_VAR 0 7
46335: PUSH
46336: LD_VAR 0 7
46340: PPUSH
46341: LD_INT 1
46343: PPUSH
46344: LD_VAR 0 14
46348: PPUSH
46349: CALL_OW 2
46353: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
46354: LD_VAR 0 14
46358: PPUSH
46359: LD_VAR 0 1
46363: PPUSH
46364: CALL_OW 250
46368: PPUSH
46369: LD_VAR 0 1
46373: PPUSH
46374: CALL_OW 251
46378: PPUSH
46379: LD_INT 10
46381: PPUSH
46382: LD_INT 0
46384: PPUSH
46385: CALL_OW 50
// continue ;
46389: GO 46290
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
46391: LD_VAR 0 12
46395: PUSH
46396: LD_INT 1
46398: ARRAY
46399: PPUSH
46400: CALL_OW 313
46404: PUSH
46405: LD_VAR 0 12
46409: PUSH
46410: LD_INT 1
46412: ARRAY
46413: PPUSH
46414: CALL_OW 266
46418: PUSH
46419: LD_INT 32
46421: PUSH
46422: LD_INT 31
46424: PUSH
46425: EMPTY
46426: LIST
46427: LIST
46428: IN
46429: AND
46430: PUSH
46431: LD_VAR 0 12
46435: PUSH
46436: LD_INT 1
46438: ARRAY
46439: PPUSH
46440: CALL_OW 313
46444: PUSH
46445: LD_INT 6
46447: EQUAL
46448: OR
46449: IFFALSE 46469
// f := Delete ( f , 1 ) ;
46451: LD_ADDR_VAR 0 12
46455: PUSH
46456: LD_VAR 0 12
46460: PPUSH
46461: LD_INT 1
46463: PPUSH
46464: CALL_OW 3
46468: ST_TO_ADDR
// if not f then
46469: LD_VAR 0 12
46473: NOT
46474: IFFALSE 46492
// begin x := x + 2 ;
46476: LD_ADDR_VAR 0 13
46480: PUSH
46481: LD_VAR 0 13
46485: PUSH
46486: LD_INT 2
46488: PLUS
46489: ST_TO_ADDR
// continue ;
46490: GO 46290
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
46492: LD_VAR 0 12
46496: PUSH
46497: LD_INT 1
46499: ARRAY
46500: PPUSH
46501: CALL_OW 266
46505: PUSH
46506: LD_INT 5
46508: EQUAL
46509: IFFALSE 46583
// begin if UnitsInside ( f [ 1 ] ) < 3 then
46511: LD_VAR 0 12
46515: PUSH
46516: LD_INT 1
46518: ARRAY
46519: PPUSH
46520: CALL_OW 313
46524: PUSH
46525: LD_INT 3
46527: LESS
46528: IFFALSE 46564
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
46530: LD_INT 0
46532: PPUSH
46533: LD_INT 5
46535: PUSH
46536: LD_INT 8
46538: PUSH
46539: LD_INT 9
46541: PUSH
46542: EMPTY
46543: LIST
46544: LIST
46545: LIST
46546: PUSH
46547: LD_VAR 0 17
46551: ARRAY
46552: PPUSH
46553: LD_VAR 0 4
46557: PPUSH
46558: CALL_OW 380
46562: GO 46581
// PrepareHuman ( false , i , skill ) ;
46564: LD_INT 0
46566: PPUSH
46567: LD_VAR 0 8
46571: PPUSH
46572: LD_VAR 0 4
46576: PPUSH
46577: CALL_OW 380
// end else
46581: GO 46600
// PrepareHuman ( false , i , skill ) ;
46583: LD_INT 0
46585: PPUSH
46586: LD_VAR 0 8
46590: PPUSH
46591: LD_VAR 0 4
46595: PPUSH
46596: CALL_OW 380
// un := CreateHuman ;
46600: LD_ADDR_VAR 0 14
46604: PUSH
46605: CALL_OW 44
46609: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46610: LD_ADDR_VAR 0 7
46614: PUSH
46615: LD_VAR 0 7
46619: PPUSH
46620: LD_INT 1
46622: PPUSH
46623: LD_VAR 0 14
46627: PPUSH
46628: CALL_OW 2
46632: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
46633: LD_VAR 0 14
46637: PPUSH
46638: LD_VAR 0 12
46642: PUSH
46643: LD_INT 1
46645: ARRAY
46646: PPUSH
46647: CALL_OW 52
// end ;
46651: GO 46290
46653: POP
46654: POP
// end ;
46655: GO 45592
46657: POP
46658: POP
// result := result ^ buildings ;
46659: LD_ADDR_VAR 0 7
46663: PUSH
46664: LD_VAR 0 7
46668: PUSH
46669: LD_VAR 0 18
46673: ADD
46674: ST_TO_ADDR
// end else
46675: GO 46818
// begin for i = 1 to personel do
46677: LD_ADDR_VAR 0 8
46681: PUSH
46682: DOUBLE
46683: LD_INT 1
46685: DEC
46686: ST_TO_ADDR
46687: LD_VAR 0 6
46691: PUSH
46692: FOR_TO
46693: IFFALSE 46816
// begin if i > 4 then
46695: LD_VAR 0 8
46699: PUSH
46700: LD_INT 4
46702: GREATER
46703: IFFALSE 46707
// break ;
46705: GO 46816
// x := personel [ i ] ;
46707: LD_ADDR_VAR 0 13
46711: PUSH
46712: LD_VAR 0 6
46716: PUSH
46717: LD_VAR 0 8
46721: ARRAY
46722: ST_TO_ADDR
// if x = - 1 then
46723: LD_VAR 0 13
46727: PUSH
46728: LD_INT 1
46730: NEG
46731: EQUAL
46732: IFFALSE 46736
// continue ;
46734: GO 46692
// PrepareHuman ( false , i , skill ) ;
46736: LD_INT 0
46738: PPUSH
46739: LD_VAR 0 8
46743: PPUSH
46744: LD_VAR 0 4
46748: PPUSH
46749: CALL_OW 380
// un := CreateHuman ;
46753: LD_ADDR_VAR 0 14
46757: PUSH
46758: CALL_OW 44
46762: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
46763: LD_VAR 0 14
46767: PPUSH
46768: LD_VAR 0 1
46772: PPUSH
46773: CALL_OW 250
46777: PPUSH
46778: LD_VAR 0 1
46782: PPUSH
46783: CALL_OW 251
46787: PPUSH
46788: LD_INT 10
46790: PPUSH
46791: LD_INT 0
46793: PPUSH
46794: CALL_OW 50
// result := result ^ un ;
46798: LD_ADDR_VAR 0 7
46802: PUSH
46803: LD_VAR 0 7
46807: PUSH
46808: LD_VAR 0 14
46812: ADD
46813: ST_TO_ADDR
// end ;
46814: GO 46692
46816: POP
46817: POP
// end ; end ;
46818: LD_VAR 0 7
46822: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
46823: LD_INT 0
46825: PPUSH
46826: PPUSH
46827: PPUSH
46828: PPUSH
46829: PPUSH
46830: PPUSH
46831: PPUSH
46832: PPUSH
46833: PPUSH
46834: PPUSH
46835: PPUSH
46836: PPUSH
46837: PPUSH
46838: PPUSH
46839: PPUSH
46840: PPUSH
// result := false ;
46841: LD_ADDR_VAR 0 3
46845: PUSH
46846: LD_INT 0
46848: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
46849: LD_VAR 0 1
46853: NOT
46854: PUSH
46855: LD_VAR 0 1
46859: PPUSH
46860: CALL_OW 266
46864: PUSH
46865: LD_INT 32
46867: PUSH
46868: LD_INT 33
46870: PUSH
46871: EMPTY
46872: LIST
46873: LIST
46874: IN
46875: NOT
46876: OR
46877: IFFALSE 46881
// exit ;
46879: GO 48020
// nat := GetNation ( tower ) ;
46881: LD_ADDR_VAR 0 12
46885: PUSH
46886: LD_VAR 0 1
46890: PPUSH
46891: CALL_OW 248
46895: ST_TO_ADDR
// side := GetSide ( tower ) ;
46896: LD_ADDR_VAR 0 16
46900: PUSH
46901: LD_VAR 0 1
46905: PPUSH
46906: CALL_OW 255
46910: ST_TO_ADDR
// x := GetX ( tower ) ;
46911: LD_ADDR_VAR 0 10
46915: PUSH
46916: LD_VAR 0 1
46920: PPUSH
46921: CALL_OW 250
46925: ST_TO_ADDR
// y := GetY ( tower ) ;
46926: LD_ADDR_VAR 0 11
46930: PUSH
46931: LD_VAR 0 1
46935: PPUSH
46936: CALL_OW 251
46940: ST_TO_ADDR
// if not x or not y then
46941: LD_VAR 0 10
46945: NOT
46946: PUSH
46947: LD_VAR 0 11
46951: NOT
46952: OR
46953: IFFALSE 46957
// exit ;
46955: GO 48020
// weapon := 0 ;
46957: LD_ADDR_VAR 0 18
46961: PUSH
46962: LD_INT 0
46964: ST_TO_ADDR
// fac_list := [ ] ;
46965: LD_ADDR_VAR 0 17
46969: PUSH
46970: EMPTY
46971: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
46972: LD_ADDR_VAR 0 6
46976: PUSH
46977: LD_VAR 0 1
46981: PPUSH
46982: CALL_OW 274
46986: PPUSH
46987: LD_VAR 0 2
46991: PPUSH
46992: LD_INT 0
46994: PPUSH
46995: CALL 44560 0 3
46999: PPUSH
47000: LD_INT 30
47002: PUSH
47003: LD_INT 3
47005: PUSH
47006: EMPTY
47007: LIST
47008: LIST
47009: PPUSH
47010: CALL_OW 72
47014: ST_TO_ADDR
// if not factories then
47015: LD_VAR 0 6
47019: NOT
47020: IFFALSE 47024
// exit ;
47022: GO 48020
// for i in factories do
47024: LD_ADDR_VAR 0 8
47028: PUSH
47029: LD_VAR 0 6
47033: PUSH
47034: FOR_IN
47035: IFFALSE 47060
// fac_list := fac_list union AvailableWeaponList ( i ) ;
47037: LD_ADDR_VAR 0 17
47041: PUSH
47042: LD_VAR 0 17
47046: PUSH
47047: LD_VAR 0 8
47051: PPUSH
47052: CALL_OW 478
47056: UNION
47057: ST_TO_ADDR
47058: GO 47034
47060: POP
47061: POP
// if not fac_list then
47062: LD_VAR 0 17
47066: NOT
47067: IFFALSE 47071
// exit ;
47069: GO 48020
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
47071: LD_ADDR_VAR 0 5
47075: PUSH
47076: LD_INT 4
47078: PUSH
47079: LD_INT 5
47081: PUSH
47082: LD_INT 9
47084: PUSH
47085: LD_INT 10
47087: PUSH
47088: LD_INT 6
47090: PUSH
47091: LD_INT 7
47093: PUSH
47094: LD_INT 11
47096: PUSH
47097: EMPTY
47098: LIST
47099: LIST
47100: LIST
47101: LIST
47102: LIST
47103: LIST
47104: LIST
47105: PUSH
47106: LD_INT 27
47108: PUSH
47109: LD_INT 28
47111: PUSH
47112: LD_INT 26
47114: PUSH
47115: LD_INT 30
47117: PUSH
47118: EMPTY
47119: LIST
47120: LIST
47121: LIST
47122: LIST
47123: PUSH
47124: LD_INT 43
47126: PUSH
47127: LD_INT 44
47129: PUSH
47130: LD_INT 46
47132: PUSH
47133: LD_INT 45
47135: PUSH
47136: LD_INT 47
47138: PUSH
47139: LD_INT 49
47141: PUSH
47142: EMPTY
47143: LIST
47144: LIST
47145: LIST
47146: LIST
47147: LIST
47148: LIST
47149: PUSH
47150: EMPTY
47151: LIST
47152: LIST
47153: LIST
47154: PUSH
47155: LD_VAR 0 12
47159: ARRAY
47160: ST_TO_ADDR
// for i in list do
47161: LD_ADDR_VAR 0 8
47165: PUSH
47166: LD_VAR 0 5
47170: PUSH
47171: FOR_IN
47172: IFFALSE 47205
// if not i in fac_list then
47174: LD_VAR 0 8
47178: PUSH
47179: LD_VAR 0 17
47183: IN
47184: NOT
47185: IFFALSE 47203
// list := list diff i ;
47187: LD_ADDR_VAR 0 5
47191: PUSH
47192: LD_VAR 0 5
47196: PUSH
47197: LD_VAR 0 8
47201: DIFF
47202: ST_TO_ADDR
47203: GO 47171
47205: POP
47206: POP
// if not list then
47207: LD_VAR 0 5
47211: NOT
47212: IFFALSE 47216
// exit ;
47214: GO 48020
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
47216: LD_VAR 0 12
47220: PUSH
47221: LD_INT 3
47223: EQUAL
47224: PUSH
47225: LD_INT 49
47227: PUSH
47228: LD_VAR 0 5
47232: IN
47233: AND
47234: PUSH
47235: LD_INT 31
47237: PPUSH
47238: LD_VAR 0 16
47242: PPUSH
47243: CALL_OW 321
47247: PUSH
47248: LD_INT 2
47250: EQUAL
47251: AND
47252: IFFALSE 47312
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
47254: LD_INT 22
47256: PUSH
47257: LD_VAR 0 16
47261: PUSH
47262: EMPTY
47263: LIST
47264: LIST
47265: PUSH
47266: LD_INT 35
47268: PUSH
47269: LD_INT 49
47271: PUSH
47272: EMPTY
47273: LIST
47274: LIST
47275: PUSH
47276: LD_INT 91
47278: PUSH
47279: LD_VAR 0 1
47283: PUSH
47284: LD_INT 10
47286: PUSH
47287: EMPTY
47288: LIST
47289: LIST
47290: LIST
47291: PUSH
47292: EMPTY
47293: LIST
47294: LIST
47295: LIST
47296: PPUSH
47297: CALL_OW 69
47301: NOT
47302: IFFALSE 47312
// weapon := ru_time_lapser ;
47304: LD_ADDR_VAR 0 18
47308: PUSH
47309: LD_INT 49
47311: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
47312: LD_VAR 0 12
47316: PUSH
47317: LD_INT 1
47319: PUSH
47320: LD_INT 2
47322: PUSH
47323: EMPTY
47324: LIST
47325: LIST
47326: IN
47327: PUSH
47328: LD_INT 11
47330: PUSH
47331: LD_VAR 0 5
47335: IN
47336: PUSH
47337: LD_INT 30
47339: PUSH
47340: LD_VAR 0 5
47344: IN
47345: OR
47346: AND
47347: PUSH
47348: LD_INT 6
47350: PPUSH
47351: LD_VAR 0 16
47355: PPUSH
47356: CALL_OW 321
47360: PUSH
47361: LD_INT 2
47363: EQUAL
47364: AND
47365: IFFALSE 47530
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
47367: LD_INT 22
47369: PUSH
47370: LD_VAR 0 16
47374: PUSH
47375: EMPTY
47376: LIST
47377: LIST
47378: PUSH
47379: LD_INT 2
47381: PUSH
47382: LD_INT 35
47384: PUSH
47385: LD_INT 11
47387: PUSH
47388: EMPTY
47389: LIST
47390: LIST
47391: PUSH
47392: LD_INT 35
47394: PUSH
47395: LD_INT 30
47397: PUSH
47398: EMPTY
47399: LIST
47400: LIST
47401: PUSH
47402: EMPTY
47403: LIST
47404: LIST
47405: LIST
47406: PUSH
47407: LD_INT 91
47409: PUSH
47410: LD_VAR 0 1
47414: PUSH
47415: LD_INT 18
47417: PUSH
47418: EMPTY
47419: LIST
47420: LIST
47421: LIST
47422: PUSH
47423: EMPTY
47424: LIST
47425: LIST
47426: LIST
47427: PPUSH
47428: CALL_OW 69
47432: NOT
47433: PUSH
47434: LD_INT 22
47436: PUSH
47437: LD_VAR 0 16
47441: PUSH
47442: EMPTY
47443: LIST
47444: LIST
47445: PUSH
47446: LD_INT 2
47448: PUSH
47449: LD_INT 30
47451: PUSH
47452: LD_INT 32
47454: PUSH
47455: EMPTY
47456: LIST
47457: LIST
47458: PUSH
47459: LD_INT 30
47461: PUSH
47462: LD_INT 33
47464: PUSH
47465: EMPTY
47466: LIST
47467: LIST
47468: PUSH
47469: EMPTY
47470: LIST
47471: LIST
47472: LIST
47473: PUSH
47474: LD_INT 91
47476: PUSH
47477: LD_VAR 0 1
47481: PUSH
47482: LD_INT 12
47484: PUSH
47485: EMPTY
47486: LIST
47487: LIST
47488: LIST
47489: PUSH
47490: EMPTY
47491: LIST
47492: LIST
47493: LIST
47494: PUSH
47495: EMPTY
47496: LIST
47497: PPUSH
47498: CALL_OW 69
47502: PUSH
47503: LD_INT 2
47505: GREATER
47506: AND
47507: IFFALSE 47530
// weapon := [ us_radar , ar_radar ] [ nat ] ;
47509: LD_ADDR_VAR 0 18
47513: PUSH
47514: LD_INT 11
47516: PUSH
47517: LD_INT 30
47519: PUSH
47520: EMPTY
47521: LIST
47522: LIST
47523: PUSH
47524: LD_VAR 0 12
47528: ARRAY
47529: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
47530: LD_VAR 0 18
47534: NOT
47535: PUSH
47536: LD_INT 40
47538: PPUSH
47539: LD_VAR 0 16
47543: PPUSH
47544: CALL_OW 321
47548: PUSH
47549: LD_INT 2
47551: EQUAL
47552: AND
47553: PUSH
47554: LD_INT 7
47556: PUSH
47557: LD_VAR 0 5
47561: IN
47562: PUSH
47563: LD_INT 28
47565: PUSH
47566: LD_VAR 0 5
47570: IN
47571: OR
47572: PUSH
47573: LD_INT 45
47575: PUSH
47576: LD_VAR 0 5
47580: IN
47581: OR
47582: AND
47583: IFFALSE 47837
// begin hex := GetHexInfo ( x , y ) ;
47585: LD_ADDR_VAR 0 4
47589: PUSH
47590: LD_VAR 0 10
47594: PPUSH
47595: LD_VAR 0 11
47599: PPUSH
47600: CALL_OW 546
47604: ST_TO_ADDR
// if hex [ 1 ] then
47605: LD_VAR 0 4
47609: PUSH
47610: LD_INT 1
47612: ARRAY
47613: IFFALSE 47617
// exit ;
47615: GO 48020
// height := hex [ 2 ] ;
47617: LD_ADDR_VAR 0 15
47621: PUSH
47622: LD_VAR 0 4
47626: PUSH
47627: LD_INT 2
47629: ARRAY
47630: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
47631: LD_ADDR_VAR 0 14
47635: PUSH
47636: LD_INT 0
47638: PUSH
47639: LD_INT 2
47641: PUSH
47642: LD_INT 3
47644: PUSH
47645: LD_INT 5
47647: PUSH
47648: EMPTY
47649: LIST
47650: LIST
47651: LIST
47652: LIST
47653: ST_TO_ADDR
// for i in tmp do
47654: LD_ADDR_VAR 0 8
47658: PUSH
47659: LD_VAR 0 14
47663: PUSH
47664: FOR_IN
47665: IFFALSE 47835
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
47667: LD_ADDR_VAR 0 9
47671: PUSH
47672: LD_VAR 0 10
47676: PPUSH
47677: LD_VAR 0 8
47681: PPUSH
47682: LD_INT 5
47684: PPUSH
47685: CALL_OW 272
47689: PUSH
47690: LD_VAR 0 11
47694: PPUSH
47695: LD_VAR 0 8
47699: PPUSH
47700: LD_INT 5
47702: PPUSH
47703: CALL_OW 273
47707: PUSH
47708: EMPTY
47709: LIST
47710: LIST
47711: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
47712: LD_VAR 0 9
47716: PUSH
47717: LD_INT 1
47719: ARRAY
47720: PPUSH
47721: LD_VAR 0 9
47725: PUSH
47726: LD_INT 2
47728: ARRAY
47729: PPUSH
47730: CALL_OW 488
47734: IFFALSE 47833
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
47736: LD_ADDR_VAR 0 4
47740: PUSH
47741: LD_VAR 0 9
47745: PUSH
47746: LD_INT 1
47748: ARRAY
47749: PPUSH
47750: LD_VAR 0 9
47754: PUSH
47755: LD_INT 2
47757: ARRAY
47758: PPUSH
47759: CALL_OW 546
47763: ST_TO_ADDR
// if hex [ 1 ] then
47764: LD_VAR 0 4
47768: PUSH
47769: LD_INT 1
47771: ARRAY
47772: IFFALSE 47776
// continue ;
47774: GO 47664
// h := hex [ 2 ] ;
47776: LD_ADDR_VAR 0 13
47780: PUSH
47781: LD_VAR 0 4
47785: PUSH
47786: LD_INT 2
47788: ARRAY
47789: ST_TO_ADDR
// if h + 7 < height then
47790: LD_VAR 0 13
47794: PUSH
47795: LD_INT 7
47797: PLUS
47798: PUSH
47799: LD_VAR 0 15
47803: LESS
47804: IFFALSE 47833
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
47806: LD_ADDR_VAR 0 18
47810: PUSH
47811: LD_INT 7
47813: PUSH
47814: LD_INT 28
47816: PUSH
47817: LD_INT 45
47819: PUSH
47820: EMPTY
47821: LIST
47822: LIST
47823: LIST
47824: PUSH
47825: LD_VAR 0 12
47829: ARRAY
47830: ST_TO_ADDR
// break ;
47831: GO 47835
// end ; end ; end ;
47833: GO 47664
47835: POP
47836: POP
// end ; if not weapon then
47837: LD_VAR 0 18
47841: NOT
47842: IFFALSE 47902
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
47844: LD_ADDR_VAR 0 5
47848: PUSH
47849: LD_VAR 0 5
47853: PUSH
47854: LD_INT 11
47856: PUSH
47857: LD_INT 30
47859: PUSH
47860: LD_INT 49
47862: PUSH
47863: EMPTY
47864: LIST
47865: LIST
47866: LIST
47867: DIFF
47868: ST_TO_ADDR
// if not list then
47869: LD_VAR 0 5
47873: NOT
47874: IFFALSE 47878
// exit ;
47876: GO 48020
// weapon := list [ rand ( 1 , list ) ] ;
47878: LD_ADDR_VAR 0 18
47882: PUSH
47883: LD_VAR 0 5
47887: PUSH
47888: LD_INT 1
47890: PPUSH
47891: LD_VAR 0 5
47895: PPUSH
47896: CALL_OW 12
47900: ARRAY
47901: ST_TO_ADDR
// end ; if weapon then
47902: LD_VAR 0 18
47906: IFFALSE 48020
// begin tmp := CostOfWeapon ( weapon ) ;
47908: LD_ADDR_VAR 0 14
47912: PUSH
47913: LD_VAR 0 18
47917: PPUSH
47918: CALL_OW 451
47922: ST_TO_ADDR
// j := GetBase ( tower ) ;
47923: LD_ADDR_VAR 0 9
47927: PUSH
47928: LD_VAR 0 1
47932: PPUSH
47933: CALL_OW 274
47937: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
47938: LD_VAR 0 9
47942: PPUSH
47943: LD_INT 1
47945: PPUSH
47946: CALL_OW 275
47950: PUSH
47951: LD_VAR 0 14
47955: PUSH
47956: LD_INT 1
47958: ARRAY
47959: GREATEREQUAL
47960: PUSH
47961: LD_VAR 0 9
47965: PPUSH
47966: LD_INT 2
47968: PPUSH
47969: CALL_OW 275
47973: PUSH
47974: LD_VAR 0 14
47978: PUSH
47979: LD_INT 2
47981: ARRAY
47982: GREATEREQUAL
47983: AND
47984: PUSH
47985: LD_VAR 0 9
47989: PPUSH
47990: LD_INT 3
47992: PPUSH
47993: CALL_OW 275
47997: PUSH
47998: LD_VAR 0 14
48002: PUSH
48003: LD_INT 3
48005: ARRAY
48006: GREATEREQUAL
48007: AND
48008: IFFALSE 48020
// result := weapon ;
48010: LD_ADDR_VAR 0 3
48014: PUSH
48015: LD_VAR 0 18
48019: ST_TO_ADDR
// end ; end ;
48020: LD_VAR 0 3
48024: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
48025: LD_INT 0
48027: PPUSH
48028: PPUSH
// result := true ;
48029: LD_ADDR_VAR 0 3
48033: PUSH
48034: LD_INT 1
48036: ST_TO_ADDR
// if array1 = array2 then
48037: LD_VAR 0 1
48041: PUSH
48042: LD_VAR 0 2
48046: EQUAL
48047: IFFALSE 48107
// begin for i = 1 to array1 do
48049: LD_ADDR_VAR 0 4
48053: PUSH
48054: DOUBLE
48055: LD_INT 1
48057: DEC
48058: ST_TO_ADDR
48059: LD_VAR 0 1
48063: PUSH
48064: FOR_TO
48065: IFFALSE 48103
// if array1 [ i ] <> array2 [ i ] then
48067: LD_VAR 0 1
48071: PUSH
48072: LD_VAR 0 4
48076: ARRAY
48077: PUSH
48078: LD_VAR 0 2
48082: PUSH
48083: LD_VAR 0 4
48087: ARRAY
48088: NONEQUAL
48089: IFFALSE 48101
// begin result := false ;
48091: LD_ADDR_VAR 0 3
48095: PUSH
48096: LD_INT 0
48098: ST_TO_ADDR
// break ;
48099: GO 48103
// end ;
48101: GO 48064
48103: POP
48104: POP
// end else
48105: GO 48115
// result := false ;
48107: LD_ADDR_VAR 0 3
48111: PUSH
48112: LD_INT 0
48114: ST_TO_ADDR
// end ;
48115: LD_VAR 0 3
48119: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
48120: LD_INT 0
48122: PPUSH
48123: PPUSH
// if not array1 or not array2 then
48124: LD_VAR 0 1
48128: NOT
48129: PUSH
48130: LD_VAR 0 2
48134: NOT
48135: OR
48136: IFFALSE 48140
// exit ;
48138: GO 48204
// result := true ;
48140: LD_ADDR_VAR 0 3
48144: PUSH
48145: LD_INT 1
48147: ST_TO_ADDR
// for i = 1 to array1 do
48148: LD_ADDR_VAR 0 4
48152: PUSH
48153: DOUBLE
48154: LD_INT 1
48156: DEC
48157: ST_TO_ADDR
48158: LD_VAR 0 1
48162: PUSH
48163: FOR_TO
48164: IFFALSE 48202
// if array1 [ i ] <> array2 [ i ] then
48166: LD_VAR 0 1
48170: PUSH
48171: LD_VAR 0 4
48175: ARRAY
48176: PUSH
48177: LD_VAR 0 2
48181: PUSH
48182: LD_VAR 0 4
48186: ARRAY
48187: NONEQUAL
48188: IFFALSE 48200
// begin result := false ;
48190: LD_ADDR_VAR 0 3
48194: PUSH
48195: LD_INT 0
48197: ST_TO_ADDR
// break ;
48198: GO 48202
// end ;
48200: GO 48163
48202: POP
48203: POP
// end ;
48204: LD_VAR 0 3
48208: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
48209: LD_INT 0
48211: PPUSH
48212: PPUSH
48213: PPUSH
// pom := GetBase ( fac ) ;
48214: LD_ADDR_VAR 0 5
48218: PUSH
48219: LD_VAR 0 1
48223: PPUSH
48224: CALL_OW 274
48228: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
48229: LD_ADDR_VAR 0 4
48233: PUSH
48234: LD_VAR 0 2
48238: PUSH
48239: LD_INT 1
48241: ARRAY
48242: PPUSH
48243: LD_VAR 0 2
48247: PUSH
48248: LD_INT 2
48250: ARRAY
48251: PPUSH
48252: LD_VAR 0 2
48256: PUSH
48257: LD_INT 3
48259: ARRAY
48260: PPUSH
48261: LD_VAR 0 2
48265: PUSH
48266: LD_INT 4
48268: ARRAY
48269: PPUSH
48270: CALL_OW 449
48274: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
48275: LD_ADDR_VAR 0 3
48279: PUSH
48280: LD_VAR 0 5
48284: PPUSH
48285: LD_INT 1
48287: PPUSH
48288: CALL_OW 275
48292: PUSH
48293: LD_VAR 0 4
48297: PUSH
48298: LD_INT 1
48300: ARRAY
48301: GREATEREQUAL
48302: PUSH
48303: LD_VAR 0 5
48307: PPUSH
48308: LD_INT 2
48310: PPUSH
48311: CALL_OW 275
48315: PUSH
48316: LD_VAR 0 4
48320: PUSH
48321: LD_INT 2
48323: ARRAY
48324: GREATEREQUAL
48325: AND
48326: PUSH
48327: LD_VAR 0 5
48331: PPUSH
48332: LD_INT 3
48334: PPUSH
48335: CALL_OW 275
48339: PUSH
48340: LD_VAR 0 4
48344: PUSH
48345: LD_INT 3
48347: ARRAY
48348: GREATEREQUAL
48349: AND
48350: ST_TO_ADDR
// end ;
48351: LD_VAR 0 3
48355: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
48356: LD_INT 0
48358: PPUSH
48359: PPUSH
48360: PPUSH
48361: PPUSH
// pom := GetBase ( building ) ;
48362: LD_ADDR_VAR 0 3
48366: PUSH
48367: LD_VAR 0 1
48371: PPUSH
48372: CALL_OW 274
48376: ST_TO_ADDR
// if not pom then
48377: LD_VAR 0 3
48381: NOT
48382: IFFALSE 48386
// exit ;
48384: GO 48556
// btype := GetBType ( building ) ;
48386: LD_ADDR_VAR 0 5
48390: PUSH
48391: LD_VAR 0 1
48395: PPUSH
48396: CALL_OW 266
48400: ST_TO_ADDR
// if btype = b_armoury then
48401: LD_VAR 0 5
48405: PUSH
48406: LD_INT 4
48408: EQUAL
48409: IFFALSE 48419
// btype := b_barracks ;
48411: LD_ADDR_VAR 0 5
48415: PUSH
48416: LD_INT 5
48418: ST_TO_ADDR
// if btype = b_depot then
48419: LD_VAR 0 5
48423: PUSH
48424: LD_INT 0
48426: EQUAL
48427: IFFALSE 48437
// btype := b_warehouse ;
48429: LD_ADDR_VAR 0 5
48433: PUSH
48434: LD_INT 1
48436: ST_TO_ADDR
// if btype = b_workshop then
48437: LD_VAR 0 5
48441: PUSH
48442: LD_INT 2
48444: EQUAL
48445: IFFALSE 48455
// btype := b_factory ;
48447: LD_ADDR_VAR 0 5
48451: PUSH
48452: LD_INT 3
48454: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
48455: LD_ADDR_VAR 0 4
48459: PUSH
48460: LD_VAR 0 5
48464: PPUSH
48465: LD_VAR 0 1
48469: PPUSH
48470: CALL_OW 248
48474: PPUSH
48475: CALL_OW 450
48479: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
48480: LD_ADDR_VAR 0 2
48484: PUSH
48485: LD_VAR 0 3
48489: PPUSH
48490: LD_INT 1
48492: PPUSH
48493: CALL_OW 275
48497: PUSH
48498: LD_VAR 0 4
48502: PUSH
48503: LD_INT 1
48505: ARRAY
48506: GREATEREQUAL
48507: PUSH
48508: LD_VAR 0 3
48512: PPUSH
48513: LD_INT 2
48515: PPUSH
48516: CALL_OW 275
48520: PUSH
48521: LD_VAR 0 4
48525: PUSH
48526: LD_INT 2
48528: ARRAY
48529: GREATEREQUAL
48530: AND
48531: PUSH
48532: LD_VAR 0 3
48536: PPUSH
48537: LD_INT 3
48539: PPUSH
48540: CALL_OW 275
48544: PUSH
48545: LD_VAR 0 4
48549: PUSH
48550: LD_INT 3
48552: ARRAY
48553: GREATEREQUAL
48554: AND
48555: ST_TO_ADDR
// end ;
48556: LD_VAR 0 2
48560: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
48561: LD_INT 0
48563: PPUSH
48564: PPUSH
48565: PPUSH
// pom := GetBase ( building ) ;
48566: LD_ADDR_VAR 0 4
48570: PUSH
48571: LD_VAR 0 1
48575: PPUSH
48576: CALL_OW 274
48580: ST_TO_ADDR
// if not pom then
48581: LD_VAR 0 4
48585: NOT
48586: IFFALSE 48590
// exit ;
48588: GO 48691
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
48590: LD_ADDR_VAR 0 5
48594: PUSH
48595: LD_VAR 0 2
48599: PPUSH
48600: LD_VAR 0 1
48604: PPUSH
48605: CALL_OW 248
48609: PPUSH
48610: CALL_OW 450
48614: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
48615: LD_ADDR_VAR 0 3
48619: PUSH
48620: LD_VAR 0 4
48624: PPUSH
48625: LD_INT 1
48627: PPUSH
48628: CALL_OW 275
48632: PUSH
48633: LD_VAR 0 5
48637: PUSH
48638: LD_INT 1
48640: ARRAY
48641: GREATEREQUAL
48642: PUSH
48643: LD_VAR 0 4
48647: PPUSH
48648: LD_INT 2
48650: PPUSH
48651: CALL_OW 275
48655: PUSH
48656: LD_VAR 0 5
48660: PUSH
48661: LD_INT 2
48663: ARRAY
48664: GREATEREQUAL
48665: AND
48666: PUSH
48667: LD_VAR 0 4
48671: PPUSH
48672: LD_INT 3
48674: PPUSH
48675: CALL_OW 275
48679: PUSH
48680: LD_VAR 0 5
48684: PUSH
48685: LD_INT 3
48687: ARRAY
48688: GREATEREQUAL
48689: AND
48690: ST_TO_ADDR
// end ;
48691: LD_VAR 0 3
48695: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
48696: LD_INT 0
48698: PPUSH
48699: PPUSH
48700: PPUSH
48701: PPUSH
48702: PPUSH
48703: PPUSH
48704: PPUSH
48705: PPUSH
48706: PPUSH
48707: PPUSH
48708: PPUSH
// result := false ;
48709: LD_ADDR_VAR 0 8
48713: PUSH
48714: LD_INT 0
48716: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
48717: LD_VAR 0 5
48721: NOT
48722: PUSH
48723: LD_VAR 0 1
48727: NOT
48728: OR
48729: PUSH
48730: LD_VAR 0 2
48734: NOT
48735: OR
48736: PUSH
48737: LD_VAR 0 3
48741: NOT
48742: OR
48743: IFFALSE 48747
// exit ;
48745: GO 49561
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
48747: LD_ADDR_VAR 0 14
48751: PUSH
48752: LD_VAR 0 1
48756: PPUSH
48757: LD_VAR 0 2
48761: PPUSH
48762: LD_VAR 0 3
48766: PPUSH
48767: LD_VAR 0 4
48771: PPUSH
48772: LD_VAR 0 5
48776: PUSH
48777: LD_INT 1
48779: ARRAY
48780: PPUSH
48781: CALL_OW 248
48785: PPUSH
48786: LD_INT 0
48788: PPUSH
48789: CALL 50398 0 6
48793: ST_TO_ADDR
// if not hexes then
48794: LD_VAR 0 14
48798: NOT
48799: IFFALSE 48803
// exit ;
48801: GO 49561
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
48803: LD_ADDR_VAR 0 17
48807: PUSH
48808: LD_VAR 0 5
48812: PPUSH
48813: LD_INT 22
48815: PUSH
48816: LD_VAR 0 13
48820: PPUSH
48821: CALL_OW 255
48825: PUSH
48826: EMPTY
48827: LIST
48828: LIST
48829: PUSH
48830: LD_INT 2
48832: PUSH
48833: LD_INT 30
48835: PUSH
48836: LD_INT 0
48838: PUSH
48839: EMPTY
48840: LIST
48841: LIST
48842: PUSH
48843: LD_INT 30
48845: PUSH
48846: LD_INT 1
48848: PUSH
48849: EMPTY
48850: LIST
48851: LIST
48852: PUSH
48853: EMPTY
48854: LIST
48855: LIST
48856: LIST
48857: PUSH
48858: EMPTY
48859: LIST
48860: LIST
48861: PPUSH
48862: CALL_OW 72
48866: ST_TO_ADDR
// for i = 1 to hexes do
48867: LD_ADDR_VAR 0 9
48871: PUSH
48872: DOUBLE
48873: LD_INT 1
48875: DEC
48876: ST_TO_ADDR
48877: LD_VAR 0 14
48881: PUSH
48882: FOR_TO
48883: IFFALSE 49559
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
48885: LD_ADDR_VAR 0 13
48889: PUSH
48890: LD_VAR 0 14
48894: PUSH
48895: LD_VAR 0 9
48899: ARRAY
48900: PUSH
48901: LD_INT 1
48903: ARRAY
48904: PPUSH
48905: LD_VAR 0 14
48909: PUSH
48910: LD_VAR 0 9
48914: ARRAY
48915: PUSH
48916: LD_INT 2
48918: ARRAY
48919: PPUSH
48920: CALL_OW 428
48924: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
48925: LD_VAR 0 14
48929: PUSH
48930: LD_VAR 0 9
48934: ARRAY
48935: PUSH
48936: LD_INT 1
48938: ARRAY
48939: PPUSH
48940: LD_VAR 0 14
48944: PUSH
48945: LD_VAR 0 9
48949: ARRAY
48950: PUSH
48951: LD_INT 2
48953: ARRAY
48954: PPUSH
48955: CALL_OW 351
48959: PUSH
48960: LD_VAR 0 14
48964: PUSH
48965: LD_VAR 0 9
48969: ARRAY
48970: PUSH
48971: LD_INT 1
48973: ARRAY
48974: PPUSH
48975: LD_VAR 0 14
48979: PUSH
48980: LD_VAR 0 9
48984: ARRAY
48985: PUSH
48986: LD_INT 2
48988: ARRAY
48989: PPUSH
48990: CALL_OW 488
48994: NOT
48995: OR
48996: PUSH
48997: LD_VAR 0 13
49001: PPUSH
49002: CALL_OW 247
49006: PUSH
49007: LD_INT 3
49009: EQUAL
49010: OR
49011: IFFALSE 49017
// exit ;
49013: POP
49014: POP
49015: GO 49561
// if not tmp then
49017: LD_VAR 0 13
49021: NOT
49022: IFFALSE 49026
// continue ;
49024: GO 48882
// result := true ;
49026: LD_ADDR_VAR 0 8
49030: PUSH
49031: LD_INT 1
49033: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
49034: LD_VAR 0 6
49038: PUSH
49039: LD_VAR 0 13
49043: PPUSH
49044: CALL_OW 247
49048: PUSH
49049: LD_INT 2
49051: EQUAL
49052: AND
49053: PUSH
49054: LD_VAR 0 13
49058: PPUSH
49059: CALL_OW 263
49063: PUSH
49064: LD_INT 1
49066: EQUAL
49067: AND
49068: IFFALSE 49232
// begin if IsDrivenBy ( tmp ) then
49070: LD_VAR 0 13
49074: PPUSH
49075: CALL_OW 311
49079: IFFALSE 49083
// continue ;
49081: GO 48882
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
49083: LD_VAR 0 6
49087: PPUSH
49088: LD_INT 3
49090: PUSH
49091: LD_INT 60
49093: PUSH
49094: EMPTY
49095: LIST
49096: PUSH
49097: EMPTY
49098: LIST
49099: LIST
49100: PUSH
49101: LD_INT 3
49103: PUSH
49104: LD_INT 55
49106: PUSH
49107: EMPTY
49108: LIST
49109: PUSH
49110: EMPTY
49111: LIST
49112: LIST
49113: PUSH
49114: EMPTY
49115: LIST
49116: LIST
49117: PPUSH
49118: CALL_OW 72
49122: IFFALSE 49230
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
49124: LD_ADDR_VAR 0 18
49128: PUSH
49129: LD_VAR 0 6
49133: PPUSH
49134: LD_INT 3
49136: PUSH
49137: LD_INT 60
49139: PUSH
49140: EMPTY
49141: LIST
49142: PUSH
49143: EMPTY
49144: LIST
49145: LIST
49146: PUSH
49147: LD_INT 3
49149: PUSH
49150: LD_INT 55
49152: PUSH
49153: EMPTY
49154: LIST
49155: PUSH
49156: EMPTY
49157: LIST
49158: LIST
49159: PUSH
49160: EMPTY
49161: LIST
49162: LIST
49163: PPUSH
49164: CALL_OW 72
49168: PUSH
49169: LD_INT 1
49171: ARRAY
49172: ST_TO_ADDR
// if IsInUnit ( driver ) then
49173: LD_VAR 0 18
49177: PPUSH
49178: CALL_OW 310
49182: IFFALSE 49193
// ComExit ( driver ) ;
49184: LD_VAR 0 18
49188: PPUSH
49189: CALL 73582 0 1
// AddComEnterUnit ( driver , tmp ) ;
49193: LD_VAR 0 18
49197: PPUSH
49198: LD_VAR 0 13
49202: PPUSH
49203: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
49207: LD_VAR 0 18
49211: PPUSH
49212: LD_VAR 0 7
49216: PPUSH
49217: CALL_OW 173
// AddComExitVehicle ( driver ) ;
49221: LD_VAR 0 18
49225: PPUSH
49226: CALL_OW 181
// end ; continue ;
49230: GO 48882
// end ; if not cleaners or not tmp in cleaners then
49232: LD_VAR 0 6
49236: NOT
49237: PUSH
49238: LD_VAR 0 13
49242: PUSH
49243: LD_VAR 0 6
49247: IN
49248: NOT
49249: OR
49250: IFFALSE 49557
// begin if dep then
49252: LD_VAR 0 17
49256: IFFALSE 49392
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
49258: LD_ADDR_VAR 0 16
49262: PUSH
49263: LD_VAR 0 17
49267: PUSH
49268: LD_INT 1
49270: ARRAY
49271: PPUSH
49272: CALL_OW 250
49276: PPUSH
49277: LD_VAR 0 17
49281: PUSH
49282: LD_INT 1
49284: ARRAY
49285: PPUSH
49286: CALL_OW 254
49290: PPUSH
49291: LD_INT 5
49293: PPUSH
49294: CALL_OW 272
49298: PUSH
49299: LD_VAR 0 17
49303: PUSH
49304: LD_INT 1
49306: ARRAY
49307: PPUSH
49308: CALL_OW 251
49312: PPUSH
49313: LD_VAR 0 17
49317: PUSH
49318: LD_INT 1
49320: ARRAY
49321: PPUSH
49322: CALL_OW 254
49326: PPUSH
49327: LD_INT 5
49329: PPUSH
49330: CALL_OW 273
49334: PUSH
49335: EMPTY
49336: LIST
49337: LIST
49338: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
49339: LD_VAR 0 16
49343: PUSH
49344: LD_INT 1
49346: ARRAY
49347: PPUSH
49348: LD_VAR 0 16
49352: PUSH
49353: LD_INT 2
49355: ARRAY
49356: PPUSH
49357: CALL_OW 488
49361: IFFALSE 49392
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
49363: LD_VAR 0 13
49367: PPUSH
49368: LD_VAR 0 16
49372: PUSH
49373: LD_INT 1
49375: ARRAY
49376: PPUSH
49377: LD_VAR 0 16
49381: PUSH
49382: LD_INT 2
49384: ARRAY
49385: PPUSH
49386: CALL_OW 111
// continue ;
49390: GO 48882
// end ; end ; r := GetDir ( tmp ) ;
49392: LD_ADDR_VAR 0 15
49396: PUSH
49397: LD_VAR 0 13
49401: PPUSH
49402: CALL_OW 254
49406: ST_TO_ADDR
// if r = 5 then
49407: LD_VAR 0 15
49411: PUSH
49412: LD_INT 5
49414: EQUAL
49415: IFFALSE 49425
// r := 0 ;
49417: LD_ADDR_VAR 0 15
49421: PUSH
49422: LD_INT 0
49424: ST_TO_ADDR
// for j = r to 5 do
49425: LD_ADDR_VAR 0 10
49429: PUSH
49430: DOUBLE
49431: LD_VAR 0 15
49435: DEC
49436: ST_TO_ADDR
49437: LD_INT 5
49439: PUSH
49440: FOR_TO
49441: IFFALSE 49555
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
49443: LD_ADDR_VAR 0 11
49447: PUSH
49448: LD_VAR 0 13
49452: PPUSH
49453: CALL_OW 250
49457: PPUSH
49458: LD_VAR 0 10
49462: PPUSH
49463: LD_INT 2
49465: PPUSH
49466: CALL_OW 272
49470: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
49471: LD_ADDR_VAR 0 12
49475: PUSH
49476: LD_VAR 0 13
49480: PPUSH
49481: CALL_OW 251
49485: PPUSH
49486: LD_VAR 0 10
49490: PPUSH
49491: LD_INT 2
49493: PPUSH
49494: CALL_OW 273
49498: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
49499: LD_VAR 0 11
49503: PPUSH
49504: LD_VAR 0 12
49508: PPUSH
49509: CALL_OW 488
49513: PUSH
49514: LD_VAR 0 11
49518: PPUSH
49519: LD_VAR 0 12
49523: PPUSH
49524: CALL_OW 428
49528: NOT
49529: AND
49530: IFFALSE 49553
// begin ComMoveXY ( tmp , _x , _y ) ;
49532: LD_VAR 0 13
49536: PPUSH
49537: LD_VAR 0 11
49541: PPUSH
49542: LD_VAR 0 12
49546: PPUSH
49547: CALL_OW 111
// break ;
49551: GO 49555
// end ; end ;
49553: GO 49440
49555: POP
49556: POP
// end ; end ;
49557: GO 48882
49559: POP
49560: POP
// end ;
49561: LD_VAR 0 8
49565: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
49566: LD_INT 0
49568: PPUSH
49569: PPUSH
49570: PPUSH
49571: PPUSH
49572: PPUSH
49573: PPUSH
49574: PPUSH
49575: PPUSH
49576: PPUSH
49577: PPUSH
// result := false ;
49578: LD_ADDR_VAR 0 6
49582: PUSH
49583: LD_INT 0
49585: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
49586: LD_VAR 0 1
49590: NOT
49591: PUSH
49592: LD_VAR 0 1
49596: PPUSH
49597: CALL_OW 266
49601: PUSH
49602: LD_INT 0
49604: PUSH
49605: LD_INT 1
49607: PUSH
49608: EMPTY
49609: LIST
49610: LIST
49611: IN
49612: NOT
49613: OR
49614: PUSH
49615: LD_VAR 0 2
49619: NOT
49620: OR
49621: PUSH
49622: LD_VAR 0 5
49626: PUSH
49627: LD_INT 0
49629: PUSH
49630: LD_INT 1
49632: PUSH
49633: LD_INT 2
49635: PUSH
49636: LD_INT 3
49638: PUSH
49639: LD_INT 4
49641: PUSH
49642: LD_INT 5
49644: PUSH
49645: EMPTY
49646: LIST
49647: LIST
49648: LIST
49649: LIST
49650: LIST
49651: LIST
49652: IN
49653: NOT
49654: OR
49655: PUSH
49656: LD_VAR 0 3
49660: PPUSH
49661: LD_VAR 0 4
49665: PPUSH
49666: CALL_OW 488
49670: NOT
49671: OR
49672: IFFALSE 49676
// exit ;
49674: GO 50393
// pom := GetBase ( depot ) ;
49676: LD_ADDR_VAR 0 10
49680: PUSH
49681: LD_VAR 0 1
49685: PPUSH
49686: CALL_OW 274
49690: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
49691: LD_ADDR_VAR 0 11
49695: PUSH
49696: LD_VAR 0 2
49700: PPUSH
49701: LD_VAR 0 1
49705: PPUSH
49706: CALL_OW 248
49710: PPUSH
49711: CALL_OW 450
49715: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
49716: LD_VAR 0 10
49720: PPUSH
49721: LD_INT 1
49723: PPUSH
49724: CALL_OW 275
49728: PUSH
49729: LD_VAR 0 11
49733: PUSH
49734: LD_INT 1
49736: ARRAY
49737: GREATEREQUAL
49738: PUSH
49739: LD_VAR 0 10
49743: PPUSH
49744: LD_INT 2
49746: PPUSH
49747: CALL_OW 275
49751: PUSH
49752: LD_VAR 0 11
49756: PUSH
49757: LD_INT 2
49759: ARRAY
49760: GREATEREQUAL
49761: AND
49762: PUSH
49763: LD_VAR 0 10
49767: PPUSH
49768: LD_INT 3
49770: PPUSH
49771: CALL_OW 275
49775: PUSH
49776: LD_VAR 0 11
49780: PUSH
49781: LD_INT 3
49783: ARRAY
49784: GREATEREQUAL
49785: AND
49786: NOT
49787: IFFALSE 49791
// exit ;
49789: GO 50393
// if GetBType ( depot ) = b_depot then
49791: LD_VAR 0 1
49795: PPUSH
49796: CALL_OW 266
49800: PUSH
49801: LD_INT 0
49803: EQUAL
49804: IFFALSE 49816
// dist := 28 else
49806: LD_ADDR_VAR 0 14
49810: PUSH
49811: LD_INT 28
49813: ST_TO_ADDR
49814: GO 49824
// dist := 36 ;
49816: LD_ADDR_VAR 0 14
49820: PUSH
49821: LD_INT 36
49823: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
49824: LD_VAR 0 1
49828: PPUSH
49829: LD_VAR 0 3
49833: PPUSH
49834: LD_VAR 0 4
49838: PPUSH
49839: CALL_OW 297
49843: PUSH
49844: LD_VAR 0 14
49848: GREATER
49849: IFFALSE 49853
// exit ;
49851: GO 50393
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
49853: LD_ADDR_VAR 0 12
49857: PUSH
49858: LD_VAR 0 2
49862: PPUSH
49863: LD_VAR 0 3
49867: PPUSH
49868: LD_VAR 0 4
49872: PPUSH
49873: LD_VAR 0 5
49877: PPUSH
49878: LD_VAR 0 1
49882: PPUSH
49883: CALL_OW 248
49887: PPUSH
49888: LD_INT 0
49890: PPUSH
49891: CALL 50398 0 6
49895: ST_TO_ADDR
// if not hexes then
49896: LD_VAR 0 12
49900: NOT
49901: IFFALSE 49905
// exit ;
49903: GO 50393
// hex := GetHexInfo ( x , y ) ;
49905: LD_ADDR_VAR 0 15
49909: PUSH
49910: LD_VAR 0 3
49914: PPUSH
49915: LD_VAR 0 4
49919: PPUSH
49920: CALL_OW 546
49924: ST_TO_ADDR
// if hex [ 1 ] then
49925: LD_VAR 0 15
49929: PUSH
49930: LD_INT 1
49932: ARRAY
49933: IFFALSE 49937
// exit ;
49935: GO 50393
// height := hex [ 2 ] ;
49937: LD_ADDR_VAR 0 13
49941: PUSH
49942: LD_VAR 0 15
49946: PUSH
49947: LD_INT 2
49949: ARRAY
49950: ST_TO_ADDR
// for i = 1 to hexes do
49951: LD_ADDR_VAR 0 7
49955: PUSH
49956: DOUBLE
49957: LD_INT 1
49959: DEC
49960: ST_TO_ADDR
49961: LD_VAR 0 12
49965: PUSH
49966: FOR_TO
49967: IFFALSE 50297
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
49969: LD_VAR 0 12
49973: PUSH
49974: LD_VAR 0 7
49978: ARRAY
49979: PUSH
49980: LD_INT 1
49982: ARRAY
49983: PPUSH
49984: LD_VAR 0 12
49988: PUSH
49989: LD_VAR 0 7
49993: ARRAY
49994: PUSH
49995: LD_INT 2
49997: ARRAY
49998: PPUSH
49999: CALL_OW 488
50003: NOT
50004: PUSH
50005: LD_VAR 0 12
50009: PUSH
50010: LD_VAR 0 7
50014: ARRAY
50015: PUSH
50016: LD_INT 1
50018: ARRAY
50019: PPUSH
50020: LD_VAR 0 12
50024: PUSH
50025: LD_VAR 0 7
50029: ARRAY
50030: PUSH
50031: LD_INT 2
50033: ARRAY
50034: PPUSH
50035: CALL_OW 428
50039: PUSH
50040: LD_INT 0
50042: GREATER
50043: OR
50044: PUSH
50045: LD_VAR 0 12
50049: PUSH
50050: LD_VAR 0 7
50054: ARRAY
50055: PUSH
50056: LD_INT 1
50058: ARRAY
50059: PPUSH
50060: LD_VAR 0 12
50064: PUSH
50065: LD_VAR 0 7
50069: ARRAY
50070: PUSH
50071: LD_INT 2
50073: ARRAY
50074: PPUSH
50075: CALL_OW 351
50079: OR
50080: IFFALSE 50086
// exit ;
50082: POP
50083: POP
50084: GO 50393
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
50086: LD_ADDR_VAR 0 8
50090: PUSH
50091: LD_VAR 0 12
50095: PUSH
50096: LD_VAR 0 7
50100: ARRAY
50101: PUSH
50102: LD_INT 1
50104: ARRAY
50105: PPUSH
50106: LD_VAR 0 12
50110: PUSH
50111: LD_VAR 0 7
50115: ARRAY
50116: PUSH
50117: LD_INT 2
50119: ARRAY
50120: PPUSH
50121: CALL_OW 546
50125: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
50126: LD_VAR 0 8
50130: PUSH
50131: LD_INT 1
50133: ARRAY
50134: PUSH
50135: LD_VAR 0 8
50139: PUSH
50140: LD_INT 2
50142: ARRAY
50143: PUSH
50144: LD_VAR 0 13
50148: PUSH
50149: LD_INT 2
50151: PLUS
50152: GREATER
50153: OR
50154: PUSH
50155: LD_VAR 0 8
50159: PUSH
50160: LD_INT 2
50162: ARRAY
50163: PUSH
50164: LD_VAR 0 13
50168: PUSH
50169: LD_INT 2
50171: MINUS
50172: LESS
50173: OR
50174: PUSH
50175: LD_VAR 0 8
50179: PUSH
50180: LD_INT 3
50182: ARRAY
50183: PUSH
50184: LD_INT 0
50186: PUSH
50187: LD_INT 8
50189: PUSH
50190: LD_INT 9
50192: PUSH
50193: LD_INT 10
50195: PUSH
50196: LD_INT 11
50198: PUSH
50199: LD_INT 12
50201: PUSH
50202: LD_INT 13
50204: PUSH
50205: LD_INT 16
50207: PUSH
50208: LD_INT 17
50210: PUSH
50211: LD_INT 18
50213: PUSH
50214: LD_INT 19
50216: PUSH
50217: LD_INT 20
50219: PUSH
50220: LD_INT 21
50222: PUSH
50223: EMPTY
50224: LIST
50225: LIST
50226: LIST
50227: LIST
50228: LIST
50229: LIST
50230: LIST
50231: LIST
50232: LIST
50233: LIST
50234: LIST
50235: LIST
50236: LIST
50237: IN
50238: NOT
50239: OR
50240: PUSH
50241: LD_VAR 0 8
50245: PUSH
50246: LD_INT 5
50248: ARRAY
50249: NOT
50250: OR
50251: PUSH
50252: LD_VAR 0 8
50256: PUSH
50257: LD_INT 6
50259: ARRAY
50260: PUSH
50261: LD_INT 1
50263: PUSH
50264: LD_INT 2
50266: PUSH
50267: LD_INT 7
50269: PUSH
50270: LD_INT 9
50272: PUSH
50273: LD_INT 10
50275: PUSH
50276: LD_INT 11
50278: PUSH
50279: EMPTY
50280: LIST
50281: LIST
50282: LIST
50283: LIST
50284: LIST
50285: LIST
50286: IN
50287: NOT
50288: OR
50289: IFFALSE 50295
// exit ;
50291: POP
50292: POP
50293: GO 50393
// end ;
50295: GO 49966
50297: POP
50298: POP
// side := GetSide ( depot ) ;
50299: LD_ADDR_VAR 0 9
50303: PUSH
50304: LD_VAR 0 1
50308: PPUSH
50309: CALL_OW 255
50313: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
50314: LD_VAR 0 9
50318: PPUSH
50319: LD_VAR 0 3
50323: PPUSH
50324: LD_VAR 0 4
50328: PPUSH
50329: LD_INT 20
50331: PPUSH
50332: CALL 42714 0 4
50336: PUSH
50337: LD_INT 4
50339: ARRAY
50340: IFFALSE 50344
// exit ;
50342: GO 50393
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
50344: LD_VAR 0 2
50348: PUSH
50349: LD_INT 29
50351: PUSH
50352: LD_INT 30
50354: PUSH
50355: EMPTY
50356: LIST
50357: LIST
50358: IN
50359: PUSH
50360: LD_VAR 0 3
50364: PPUSH
50365: LD_VAR 0 4
50369: PPUSH
50370: LD_VAR 0 9
50374: PPUSH
50375: CALL_OW 440
50379: NOT
50380: AND
50381: IFFALSE 50385
// exit ;
50383: GO 50393
// result := true ;
50385: LD_ADDR_VAR 0 6
50389: PUSH
50390: LD_INT 1
50392: ST_TO_ADDR
// end ;
50393: LD_VAR 0 6
50397: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
50398: LD_INT 0
50400: PPUSH
50401: PPUSH
50402: PPUSH
50403: PPUSH
50404: PPUSH
50405: PPUSH
50406: PPUSH
50407: PPUSH
50408: PPUSH
50409: PPUSH
50410: PPUSH
50411: PPUSH
50412: PPUSH
50413: PPUSH
50414: PPUSH
50415: PPUSH
50416: PPUSH
50417: PPUSH
50418: PPUSH
50419: PPUSH
50420: PPUSH
50421: PPUSH
50422: PPUSH
50423: PPUSH
50424: PPUSH
50425: PPUSH
50426: PPUSH
50427: PPUSH
50428: PPUSH
50429: PPUSH
50430: PPUSH
50431: PPUSH
50432: PPUSH
50433: PPUSH
50434: PPUSH
50435: PPUSH
50436: PPUSH
50437: PPUSH
50438: PPUSH
50439: PPUSH
50440: PPUSH
50441: PPUSH
50442: PPUSH
50443: PPUSH
50444: PPUSH
50445: PPUSH
50446: PPUSH
50447: PPUSH
50448: PPUSH
50449: PPUSH
50450: PPUSH
50451: PPUSH
50452: PPUSH
50453: PPUSH
50454: PPUSH
50455: PPUSH
50456: PPUSH
50457: PPUSH
// result = [ ] ;
50458: LD_ADDR_VAR 0 7
50462: PUSH
50463: EMPTY
50464: ST_TO_ADDR
// temp_list = [ ] ;
50465: LD_ADDR_VAR 0 9
50469: PUSH
50470: EMPTY
50471: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
50472: LD_VAR 0 4
50476: PUSH
50477: LD_INT 0
50479: PUSH
50480: LD_INT 1
50482: PUSH
50483: LD_INT 2
50485: PUSH
50486: LD_INT 3
50488: PUSH
50489: LD_INT 4
50491: PUSH
50492: LD_INT 5
50494: PUSH
50495: EMPTY
50496: LIST
50497: LIST
50498: LIST
50499: LIST
50500: LIST
50501: LIST
50502: IN
50503: NOT
50504: PUSH
50505: LD_VAR 0 1
50509: PUSH
50510: LD_INT 0
50512: PUSH
50513: LD_INT 1
50515: PUSH
50516: EMPTY
50517: LIST
50518: LIST
50519: IN
50520: PUSH
50521: LD_VAR 0 5
50525: PUSH
50526: LD_INT 1
50528: PUSH
50529: LD_INT 2
50531: PUSH
50532: LD_INT 3
50534: PUSH
50535: EMPTY
50536: LIST
50537: LIST
50538: LIST
50539: IN
50540: NOT
50541: AND
50542: OR
50543: IFFALSE 50547
// exit ;
50545: GO 68938
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
50547: LD_VAR 0 1
50551: PUSH
50552: LD_INT 6
50554: PUSH
50555: LD_INT 7
50557: PUSH
50558: LD_INT 8
50560: PUSH
50561: LD_INT 13
50563: PUSH
50564: LD_INT 12
50566: PUSH
50567: LD_INT 15
50569: PUSH
50570: LD_INT 11
50572: PUSH
50573: LD_INT 14
50575: PUSH
50576: LD_INT 10
50578: PUSH
50579: EMPTY
50580: LIST
50581: LIST
50582: LIST
50583: LIST
50584: LIST
50585: LIST
50586: LIST
50587: LIST
50588: LIST
50589: IN
50590: IFFALSE 50600
// btype = b_lab ;
50592: LD_ADDR_VAR 0 1
50596: PUSH
50597: LD_INT 6
50599: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
50600: LD_VAR 0 6
50604: PUSH
50605: LD_INT 0
50607: PUSH
50608: LD_INT 1
50610: PUSH
50611: LD_INT 2
50613: PUSH
50614: EMPTY
50615: LIST
50616: LIST
50617: LIST
50618: IN
50619: NOT
50620: PUSH
50621: LD_VAR 0 1
50625: PUSH
50626: LD_INT 0
50628: PUSH
50629: LD_INT 1
50631: PUSH
50632: LD_INT 2
50634: PUSH
50635: LD_INT 3
50637: PUSH
50638: LD_INT 6
50640: PUSH
50641: LD_INT 36
50643: PUSH
50644: LD_INT 4
50646: PUSH
50647: LD_INT 5
50649: PUSH
50650: LD_INT 31
50652: PUSH
50653: LD_INT 32
50655: PUSH
50656: LD_INT 33
50658: PUSH
50659: EMPTY
50660: LIST
50661: LIST
50662: LIST
50663: LIST
50664: LIST
50665: LIST
50666: LIST
50667: LIST
50668: LIST
50669: LIST
50670: LIST
50671: IN
50672: NOT
50673: PUSH
50674: LD_VAR 0 6
50678: PUSH
50679: LD_INT 1
50681: EQUAL
50682: AND
50683: OR
50684: PUSH
50685: LD_VAR 0 1
50689: PUSH
50690: LD_INT 2
50692: PUSH
50693: LD_INT 3
50695: PUSH
50696: EMPTY
50697: LIST
50698: LIST
50699: IN
50700: NOT
50701: PUSH
50702: LD_VAR 0 6
50706: PUSH
50707: LD_INT 2
50709: EQUAL
50710: AND
50711: OR
50712: IFFALSE 50722
// mode = 0 ;
50714: LD_ADDR_VAR 0 6
50718: PUSH
50719: LD_INT 0
50721: ST_TO_ADDR
// case mode of 0 :
50722: LD_VAR 0 6
50726: PUSH
50727: LD_INT 0
50729: DOUBLE
50730: EQUAL
50731: IFTRUE 50735
50733: GO 62188
50735: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50736: LD_ADDR_VAR 0 11
50740: PUSH
50741: LD_INT 0
50743: PUSH
50744: LD_INT 0
50746: PUSH
50747: EMPTY
50748: LIST
50749: LIST
50750: PUSH
50751: LD_INT 0
50753: PUSH
50754: LD_INT 1
50756: NEG
50757: PUSH
50758: EMPTY
50759: LIST
50760: LIST
50761: PUSH
50762: LD_INT 1
50764: PUSH
50765: LD_INT 0
50767: PUSH
50768: EMPTY
50769: LIST
50770: LIST
50771: PUSH
50772: LD_INT 1
50774: PUSH
50775: LD_INT 1
50777: PUSH
50778: EMPTY
50779: LIST
50780: LIST
50781: PUSH
50782: LD_INT 0
50784: PUSH
50785: LD_INT 1
50787: PUSH
50788: EMPTY
50789: LIST
50790: LIST
50791: PUSH
50792: LD_INT 1
50794: NEG
50795: PUSH
50796: LD_INT 0
50798: PUSH
50799: EMPTY
50800: LIST
50801: LIST
50802: PUSH
50803: LD_INT 1
50805: NEG
50806: PUSH
50807: LD_INT 1
50809: NEG
50810: PUSH
50811: EMPTY
50812: LIST
50813: LIST
50814: PUSH
50815: LD_INT 1
50817: NEG
50818: PUSH
50819: LD_INT 2
50821: NEG
50822: PUSH
50823: EMPTY
50824: LIST
50825: LIST
50826: PUSH
50827: LD_INT 0
50829: PUSH
50830: LD_INT 2
50832: NEG
50833: PUSH
50834: EMPTY
50835: LIST
50836: LIST
50837: PUSH
50838: LD_INT 1
50840: PUSH
50841: LD_INT 1
50843: NEG
50844: PUSH
50845: EMPTY
50846: LIST
50847: LIST
50848: PUSH
50849: LD_INT 1
50851: PUSH
50852: LD_INT 2
50854: PUSH
50855: EMPTY
50856: LIST
50857: LIST
50858: PUSH
50859: LD_INT 0
50861: PUSH
50862: LD_INT 2
50864: PUSH
50865: EMPTY
50866: LIST
50867: LIST
50868: PUSH
50869: LD_INT 1
50871: NEG
50872: PUSH
50873: LD_INT 1
50875: PUSH
50876: EMPTY
50877: LIST
50878: LIST
50879: PUSH
50880: LD_INT 1
50882: PUSH
50883: LD_INT 3
50885: PUSH
50886: EMPTY
50887: LIST
50888: LIST
50889: PUSH
50890: LD_INT 0
50892: PUSH
50893: LD_INT 3
50895: PUSH
50896: EMPTY
50897: LIST
50898: LIST
50899: PUSH
50900: LD_INT 1
50902: NEG
50903: PUSH
50904: LD_INT 2
50906: PUSH
50907: EMPTY
50908: LIST
50909: LIST
50910: PUSH
50911: EMPTY
50912: LIST
50913: LIST
50914: LIST
50915: LIST
50916: LIST
50917: LIST
50918: LIST
50919: LIST
50920: LIST
50921: LIST
50922: LIST
50923: LIST
50924: LIST
50925: LIST
50926: LIST
50927: LIST
50928: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50929: LD_ADDR_VAR 0 12
50933: PUSH
50934: LD_INT 0
50936: PUSH
50937: LD_INT 0
50939: PUSH
50940: EMPTY
50941: LIST
50942: LIST
50943: PUSH
50944: LD_INT 0
50946: PUSH
50947: LD_INT 1
50949: NEG
50950: PUSH
50951: EMPTY
50952: LIST
50953: LIST
50954: PUSH
50955: LD_INT 1
50957: PUSH
50958: LD_INT 0
50960: PUSH
50961: EMPTY
50962: LIST
50963: LIST
50964: PUSH
50965: LD_INT 1
50967: PUSH
50968: LD_INT 1
50970: PUSH
50971: EMPTY
50972: LIST
50973: LIST
50974: PUSH
50975: LD_INT 0
50977: PUSH
50978: LD_INT 1
50980: PUSH
50981: EMPTY
50982: LIST
50983: LIST
50984: PUSH
50985: LD_INT 1
50987: NEG
50988: PUSH
50989: LD_INT 0
50991: PUSH
50992: EMPTY
50993: LIST
50994: LIST
50995: PUSH
50996: LD_INT 1
50998: NEG
50999: PUSH
51000: LD_INT 1
51002: NEG
51003: PUSH
51004: EMPTY
51005: LIST
51006: LIST
51007: PUSH
51008: LD_INT 1
51010: PUSH
51011: LD_INT 1
51013: NEG
51014: PUSH
51015: EMPTY
51016: LIST
51017: LIST
51018: PUSH
51019: LD_INT 2
51021: PUSH
51022: LD_INT 0
51024: PUSH
51025: EMPTY
51026: LIST
51027: LIST
51028: PUSH
51029: LD_INT 2
51031: PUSH
51032: LD_INT 1
51034: PUSH
51035: EMPTY
51036: LIST
51037: LIST
51038: PUSH
51039: LD_INT 1
51041: NEG
51042: PUSH
51043: LD_INT 1
51045: PUSH
51046: EMPTY
51047: LIST
51048: LIST
51049: PUSH
51050: LD_INT 2
51052: NEG
51053: PUSH
51054: LD_INT 0
51056: PUSH
51057: EMPTY
51058: LIST
51059: LIST
51060: PUSH
51061: LD_INT 2
51063: NEG
51064: PUSH
51065: LD_INT 1
51067: NEG
51068: PUSH
51069: EMPTY
51070: LIST
51071: LIST
51072: PUSH
51073: LD_INT 2
51075: NEG
51076: PUSH
51077: LD_INT 1
51079: PUSH
51080: EMPTY
51081: LIST
51082: LIST
51083: PUSH
51084: LD_INT 3
51086: NEG
51087: PUSH
51088: LD_INT 0
51090: PUSH
51091: EMPTY
51092: LIST
51093: LIST
51094: PUSH
51095: LD_INT 3
51097: NEG
51098: PUSH
51099: LD_INT 1
51101: NEG
51102: PUSH
51103: EMPTY
51104: LIST
51105: LIST
51106: PUSH
51107: EMPTY
51108: LIST
51109: LIST
51110: LIST
51111: LIST
51112: LIST
51113: LIST
51114: LIST
51115: LIST
51116: LIST
51117: LIST
51118: LIST
51119: LIST
51120: LIST
51121: LIST
51122: LIST
51123: LIST
51124: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51125: LD_ADDR_VAR 0 13
51129: PUSH
51130: LD_INT 0
51132: PUSH
51133: LD_INT 0
51135: PUSH
51136: EMPTY
51137: LIST
51138: LIST
51139: PUSH
51140: LD_INT 0
51142: PUSH
51143: LD_INT 1
51145: NEG
51146: PUSH
51147: EMPTY
51148: LIST
51149: LIST
51150: PUSH
51151: LD_INT 1
51153: PUSH
51154: LD_INT 0
51156: PUSH
51157: EMPTY
51158: LIST
51159: LIST
51160: PUSH
51161: LD_INT 1
51163: PUSH
51164: LD_INT 1
51166: PUSH
51167: EMPTY
51168: LIST
51169: LIST
51170: PUSH
51171: LD_INT 0
51173: PUSH
51174: LD_INT 1
51176: PUSH
51177: EMPTY
51178: LIST
51179: LIST
51180: PUSH
51181: LD_INT 1
51183: NEG
51184: PUSH
51185: LD_INT 0
51187: PUSH
51188: EMPTY
51189: LIST
51190: LIST
51191: PUSH
51192: LD_INT 1
51194: NEG
51195: PUSH
51196: LD_INT 1
51198: NEG
51199: PUSH
51200: EMPTY
51201: LIST
51202: LIST
51203: PUSH
51204: LD_INT 1
51206: NEG
51207: PUSH
51208: LD_INT 2
51210: NEG
51211: PUSH
51212: EMPTY
51213: LIST
51214: LIST
51215: PUSH
51216: LD_INT 2
51218: PUSH
51219: LD_INT 1
51221: PUSH
51222: EMPTY
51223: LIST
51224: LIST
51225: PUSH
51226: LD_INT 2
51228: PUSH
51229: LD_INT 2
51231: PUSH
51232: EMPTY
51233: LIST
51234: LIST
51235: PUSH
51236: LD_INT 1
51238: PUSH
51239: LD_INT 2
51241: PUSH
51242: EMPTY
51243: LIST
51244: LIST
51245: PUSH
51246: LD_INT 2
51248: NEG
51249: PUSH
51250: LD_INT 1
51252: NEG
51253: PUSH
51254: EMPTY
51255: LIST
51256: LIST
51257: PUSH
51258: LD_INT 2
51260: NEG
51261: PUSH
51262: LD_INT 2
51264: NEG
51265: PUSH
51266: EMPTY
51267: LIST
51268: LIST
51269: PUSH
51270: LD_INT 2
51272: NEG
51273: PUSH
51274: LD_INT 3
51276: NEG
51277: PUSH
51278: EMPTY
51279: LIST
51280: LIST
51281: PUSH
51282: LD_INT 3
51284: NEG
51285: PUSH
51286: LD_INT 2
51288: NEG
51289: PUSH
51290: EMPTY
51291: LIST
51292: LIST
51293: PUSH
51294: LD_INT 3
51296: NEG
51297: PUSH
51298: LD_INT 3
51300: NEG
51301: PUSH
51302: EMPTY
51303: LIST
51304: LIST
51305: PUSH
51306: EMPTY
51307: LIST
51308: LIST
51309: LIST
51310: LIST
51311: LIST
51312: LIST
51313: LIST
51314: LIST
51315: LIST
51316: LIST
51317: LIST
51318: LIST
51319: LIST
51320: LIST
51321: LIST
51322: LIST
51323: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51324: LD_ADDR_VAR 0 14
51328: PUSH
51329: LD_INT 0
51331: PUSH
51332: LD_INT 0
51334: PUSH
51335: EMPTY
51336: LIST
51337: LIST
51338: PUSH
51339: LD_INT 0
51341: PUSH
51342: LD_INT 1
51344: NEG
51345: PUSH
51346: EMPTY
51347: LIST
51348: LIST
51349: PUSH
51350: LD_INT 1
51352: PUSH
51353: LD_INT 0
51355: PUSH
51356: EMPTY
51357: LIST
51358: LIST
51359: PUSH
51360: LD_INT 1
51362: PUSH
51363: LD_INT 1
51365: PUSH
51366: EMPTY
51367: LIST
51368: LIST
51369: PUSH
51370: LD_INT 0
51372: PUSH
51373: LD_INT 1
51375: PUSH
51376: EMPTY
51377: LIST
51378: LIST
51379: PUSH
51380: LD_INT 1
51382: NEG
51383: PUSH
51384: LD_INT 0
51386: PUSH
51387: EMPTY
51388: LIST
51389: LIST
51390: PUSH
51391: LD_INT 1
51393: NEG
51394: PUSH
51395: LD_INT 1
51397: NEG
51398: PUSH
51399: EMPTY
51400: LIST
51401: LIST
51402: PUSH
51403: LD_INT 1
51405: NEG
51406: PUSH
51407: LD_INT 2
51409: NEG
51410: PUSH
51411: EMPTY
51412: LIST
51413: LIST
51414: PUSH
51415: LD_INT 0
51417: PUSH
51418: LD_INT 2
51420: NEG
51421: PUSH
51422: EMPTY
51423: LIST
51424: LIST
51425: PUSH
51426: LD_INT 1
51428: PUSH
51429: LD_INT 1
51431: NEG
51432: PUSH
51433: EMPTY
51434: LIST
51435: LIST
51436: PUSH
51437: LD_INT 1
51439: PUSH
51440: LD_INT 2
51442: PUSH
51443: EMPTY
51444: LIST
51445: LIST
51446: PUSH
51447: LD_INT 0
51449: PUSH
51450: LD_INT 2
51452: PUSH
51453: EMPTY
51454: LIST
51455: LIST
51456: PUSH
51457: LD_INT 1
51459: NEG
51460: PUSH
51461: LD_INT 1
51463: PUSH
51464: EMPTY
51465: LIST
51466: LIST
51467: PUSH
51468: LD_INT 1
51470: NEG
51471: PUSH
51472: LD_INT 3
51474: NEG
51475: PUSH
51476: EMPTY
51477: LIST
51478: LIST
51479: PUSH
51480: LD_INT 0
51482: PUSH
51483: LD_INT 3
51485: NEG
51486: PUSH
51487: EMPTY
51488: LIST
51489: LIST
51490: PUSH
51491: LD_INT 1
51493: PUSH
51494: LD_INT 2
51496: NEG
51497: PUSH
51498: EMPTY
51499: LIST
51500: LIST
51501: PUSH
51502: EMPTY
51503: LIST
51504: LIST
51505: LIST
51506: LIST
51507: LIST
51508: LIST
51509: LIST
51510: LIST
51511: LIST
51512: LIST
51513: LIST
51514: LIST
51515: LIST
51516: LIST
51517: LIST
51518: LIST
51519: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51520: LD_ADDR_VAR 0 15
51524: PUSH
51525: LD_INT 0
51527: PUSH
51528: LD_INT 0
51530: PUSH
51531: EMPTY
51532: LIST
51533: LIST
51534: PUSH
51535: LD_INT 0
51537: PUSH
51538: LD_INT 1
51540: NEG
51541: PUSH
51542: EMPTY
51543: LIST
51544: LIST
51545: PUSH
51546: LD_INT 1
51548: PUSH
51549: LD_INT 0
51551: PUSH
51552: EMPTY
51553: LIST
51554: LIST
51555: PUSH
51556: LD_INT 1
51558: PUSH
51559: LD_INT 1
51561: PUSH
51562: EMPTY
51563: LIST
51564: LIST
51565: PUSH
51566: LD_INT 0
51568: PUSH
51569: LD_INT 1
51571: PUSH
51572: EMPTY
51573: LIST
51574: LIST
51575: PUSH
51576: LD_INT 1
51578: NEG
51579: PUSH
51580: LD_INT 0
51582: PUSH
51583: EMPTY
51584: LIST
51585: LIST
51586: PUSH
51587: LD_INT 1
51589: NEG
51590: PUSH
51591: LD_INT 1
51593: NEG
51594: PUSH
51595: EMPTY
51596: LIST
51597: LIST
51598: PUSH
51599: LD_INT 1
51601: PUSH
51602: LD_INT 1
51604: NEG
51605: PUSH
51606: EMPTY
51607: LIST
51608: LIST
51609: PUSH
51610: LD_INT 2
51612: PUSH
51613: LD_INT 0
51615: PUSH
51616: EMPTY
51617: LIST
51618: LIST
51619: PUSH
51620: LD_INT 2
51622: PUSH
51623: LD_INT 1
51625: PUSH
51626: EMPTY
51627: LIST
51628: LIST
51629: PUSH
51630: LD_INT 1
51632: NEG
51633: PUSH
51634: LD_INT 1
51636: PUSH
51637: EMPTY
51638: LIST
51639: LIST
51640: PUSH
51641: LD_INT 2
51643: NEG
51644: PUSH
51645: LD_INT 0
51647: PUSH
51648: EMPTY
51649: LIST
51650: LIST
51651: PUSH
51652: LD_INT 2
51654: NEG
51655: PUSH
51656: LD_INT 1
51658: NEG
51659: PUSH
51660: EMPTY
51661: LIST
51662: LIST
51663: PUSH
51664: LD_INT 2
51666: PUSH
51667: LD_INT 1
51669: NEG
51670: PUSH
51671: EMPTY
51672: LIST
51673: LIST
51674: PUSH
51675: LD_INT 3
51677: PUSH
51678: LD_INT 0
51680: PUSH
51681: EMPTY
51682: LIST
51683: LIST
51684: PUSH
51685: LD_INT 3
51687: PUSH
51688: LD_INT 1
51690: PUSH
51691: EMPTY
51692: LIST
51693: LIST
51694: PUSH
51695: EMPTY
51696: LIST
51697: LIST
51698: LIST
51699: LIST
51700: LIST
51701: LIST
51702: LIST
51703: LIST
51704: LIST
51705: LIST
51706: LIST
51707: LIST
51708: LIST
51709: LIST
51710: LIST
51711: LIST
51712: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51713: LD_ADDR_VAR 0 16
51717: PUSH
51718: LD_INT 0
51720: PUSH
51721: LD_INT 0
51723: PUSH
51724: EMPTY
51725: LIST
51726: LIST
51727: PUSH
51728: LD_INT 0
51730: PUSH
51731: LD_INT 1
51733: NEG
51734: PUSH
51735: EMPTY
51736: LIST
51737: LIST
51738: PUSH
51739: LD_INT 1
51741: PUSH
51742: LD_INT 0
51744: PUSH
51745: EMPTY
51746: LIST
51747: LIST
51748: PUSH
51749: LD_INT 1
51751: PUSH
51752: LD_INT 1
51754: PUSH
51755: EMPTY
51756: LIST
51757: LIST
51758: PUSH
51759: LD_INT 0
51761: PUSH
51762: LD_INT 1
51764: PUSH
51765: EMPTY
51766: LIST
51767: LIST
51768: PUSH
51769: LD_INT 1
51771: NEG
51772: PUSH
51773: LD_INT 0
51775: PUSH
51776: EMPTY
51777: LIST
51778: LIST
51779: PUSH
51780: LD_INT 1
51782: NEG
51783: PUSH
51784: LD_INT 1
51786: NEG
51787: PUSH
51788: EMPTY
51789: LIST
51790: LIST
51791: PUSH
51792: LD_INT 1
51794: NEG
51795: PUSH
51796: LD_INT 2
51798: NEG
51799: PUSH
51800: EMPTY
51801: LIST
51802: LIST
51803: PUSH
51804: LD_INT 2
51806: PUSH
51807: LD_INT 1
51809: PUSH
51810: EMPTY
51811: LIST
51812: LIST
51813: PUSH
51814: LD_INT 2
51816: PUSH
51817: LD_INT 2
51819: PUSH
51820: EMPTY
51821: LIST
51822: LIST
51823: PUSH
51824: LD_INT 1
51826: PUSH
51827: LD_INT 2
51829: PUSH
51830: EMPTY
51831: LIST
51832: LIST
51833: PUSH
51834: LD_INT 2
51836: NEG
51837: PUSH
51838: LD_INT 1
51840: NEG
51841: PUSH
51842: EMPTY
51843: LIST
51844: LIST
51845: PUSH
51846: LD_INT 2
51848: NEG
51849: PUSH
51850: LD_INT 2
51852: NEG
51853: PUSH
51854: EMPTY
51855: LIST
51856: LIST
51857: PUSH
51858: LD_INT 3
51860: PUSH
51861: LD_INT 2
51863: PUSH
51864: EMPTY
51865: LIST
51866: LIST
51867: PUSH
51868: LD_INT 3
51870: PUSH
51871: LD_INT 3
51873: PUSH
51874: EMPTY
51875: LIST
51876: LIST
51877: PUSH
51878: LD_INT 2
51880: PUSH
51881: LD_INT 3
51883: PUSH
51884: EMPTY
51885: LIST
51886: LIST
51887: PUSH
51888: EMPTY
51889: LIST
51890: LIST
51891: LIST
51892: LIST
51893: LIST
51894: LIST
51895: LIST
51896: LIST
51897: LIST
51898: LIST
51899: LIST
51900: LIST
51901: LIST
51902: LIST
51903: LIST
51904: LIST
51905: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51906: LD_ADDR_VAR 0 17
51910: PUSH
51911: LD_INT 0
51913: PUSH
51914: LD_INT 0
51916: PUSH
51917: EMPTY
51918: LIST
51919: LIST
51920: PUSH
51921: LD_INT 0
51923: PUSH
51924: LD_INT 1
51926: NEG
51927: PUSH
51928: EMPTY
51929: LIST
51930: LIST
51931: PUSH
51932: LD_INT 1
51934: PUSH
51935: LD_INT 0
51937: PUSH
51938: EMPTY
51939: LIST
51940: LIST
51941: PUSH
51942: LD_INT 1
51944: PUSH
51945: LD_INT 1
51947: PUSH
51948: EMPTY
51949: LIST
51950: LIST
51951: PUSH
51952: LD_INT 0
51954: PUSH
51955: LD_INT 1
51957: PUSH
51958: EMPTY
51959: LIST
51960: LIST
51961: PUSH
51962: LD_INT 1
51964: NEG
51965: PUSH
51966: LD_INT 0
51968: PUSH
51969: EMPTY
51970: LIST
51971: LIST
51972: PUSH
51973: LD_INT 1
51975: NEG
51976: PUSH
51977: LD_INT 1
51979: NEG
51980: PUSH
51981: EMPTY
51982: LIST
51983: LIST
51984: PUSH
51985: LD_INT 1
51987: NEG
51988: PUSH
51989: LD_INT 2
51991: NEG
51992: PUSH
51993: EMPTY
51994: LIST
51995: LIST
51996: PUSH
51997: LD_INT 0
51999: PUSH
52000: LD_INT 2
52002: NEG
52003: PUSH
52004: EMPTY
52005: LIST
52006: LIST
52007: PUSH
52008: LD_INT 1
52010: PUSH
52011: LD_INT 1
52013: NEG
52014: PUSH
52015: EMPTY
52016: LIST
52017: LIST
52018: PUSH
52019: LD_INT 2
52021: PUSH
52022: LD_INT 0
52024: PUSH
52025: EMPTY
52026: LIST
52027: LIST
52028: PUSH
52029: LD_INT 2
52031: PUSH
52032: LD_INT 1
52034: PUSH
52035: EMPTY
52036: LIST
52037: LIST
52038: PUSH
52039: LD_INT 2
52041: PUSH
52042: LD_INT 2
52044: PUSH
52045: EMPTY
52046: LIST
52047: LIST
52048: PUSH
52049: LD_INT 1
52051: PUSH
52052: LD_INT 2
52054: PUSH
52055: EMPTY
52056: LIST
52057: LIST
52058: PUSH
52059: LD_INT 0
52061: PUSH
52062: LD_INT 2
52064: PUSH
52065: EMPTY
52066: LIST
52067: LIST
52068: PUSH
52069: LD_INT 1
52071: NEG
52072: PUSH
52073: LD_INT 1
52075: PUSH
52076: EMPTY
52077: LIST
52078: LIST
52079: PUSH
52080: LD_INT 2
52082: NEG
52083: PUSH
52084: LD_INT 0
52086: PUSH
52087: EMPTY
52088: LIST
52089: LIST
52090: PUSH
52091: LD_INT 2
52093: NEG
52094: PUSH
52095: LD_INT 1
52097: NEG
52098: PUSH
52099: EMPTY
52100: LIST
52101: LIST
52102: PUSH
52103: LD_INT 2
52105: NEG
52106: PUSH
52107: LD_INT 2
52109: NEG
52110: PUSH
52111: EMPTY
52112: LIST
52113: LIST
52114: PUSH
52115: EMPTY
52116: LIST
52117: LIST
52118: LIST
52119: LIST
52120: LIST
52121: LIST
52122: LIST
52123: LIST
52124: LIST
52125: LIST
52126: LIST
52127: LIST
52128: LIST
52129: LIST
52130: LIST
52131: LIST
52132: LIST
52133: LIST
52134: LIST
52135: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52136: LD_ADDR_VAR 0 18
52140: PUSH
52141: LD_INT 0
52143: PUSH
52144: LD_INT 0
52146: PUSH
52147: EMPTY
52148: LIST
52149: LIST
52150: PUSH
52151: LD_INT 0
52153: PUSH
52154: LD_INT 1
52156: NEG
52157: PUSH
52158: EMPTY
52159: LIST
52160: LIST
52161: PUSH
52162: LD_INT 1
52164: PUSH
52165: LD_INT 0
52167: PUSH
52168: EMPTY
52169: LIST
52170: LIST
52171: PUSH
52172: LD_INT 1
52174: PUSH
52175: LD_INT 1
52177: PUSH
52178: EMPTY
52179: LIST
52180: LIST
52181: PUSH
52182: LD_INT 0
52184: PUSH
52185: LD_INT 1
52187: PUSH
52188: EMPTY
52189: LIST
52190: LIST
52191: PUSH
52192: LD_INT 1
52194: NEG
52195: PUSH
52196: LD_INT 0
52198: PUSH
52199: EMPTY
52200: LIST
52201: LIST
52202: PUSH
52203: LD_INT 1
52205: NEG
52206: PUSH
52207: LD_INT 1
52209: NEG
52210: PUSH
52211: EMPTY
52212: LIST
52213: LIST
52214: PUSH
52215: LD_INT 1
52217: NEG
52218: PUSH
52219: LD_INT 2
52221: NEG
52222: PUSH
52223: EMPTY
52224: LIST
52225: LIST
52226: PUSH
52227: LD_INT 0
52229: PUSH
52230: LD_INT 2
52232: NEG
52233: PUSH
52234: EMPTY
52235: LIST
52236: LIST
52237: PUSH
52238: LD_INT 1
52240: PUSH
52241: LD_INT 1
52243: NEG
52244: PUSH
52245: EMPTY
52246: LIST
52247: LIST
52248: PUSH
52249: LD_INT 2
52251: PUSH
52252: LD_INT 0
52254: PUSH
52255: EMPTY
52256: LIST
52257: LIST
52258: PUSH
52259: LD_INT 2
52261: PUSH
52262: LD_INT 1
52264: PUSH
52265: EMPTY
52266: LIST
52267: LIST
52268: PUSH
52269: LD_INT 2
52271: PUSH
52272: LD_INT 2
52274: PUSH
52275: EMPTY
52276: LIST
52277: LIST
52278: PUSH
52279: LD_INT 1
52281: PUSH
52282: LD_INT 2
52284: PUSH
52285: EMPTY
52286: LIST
52287: LIST
52288: PUSH
52289: LD_INT 0
52291: PUSH
52292: LD_INT 2
52294: PUSH
52295: EMPTY
52296: LIST
52297: LIST
52298: PUSH
52299: LD_INT 1
52301: NEG
52302: PUSH
52303: LD_INT 1
52305: PUSH
52306: EMPTY
52307: LIST
52308: LIST
52309: PUSH
52310: LD_INT 2
52312: NEG
52313: PUSH
52314: LD_INT 0
52316: PUSH
52317: EMPTY
52318: LIST
52319: LIST
52320: PUSH
52321: LD_INT 2
52323: NEG
52324: PUSH
52325: LD_INT 1
52327: NEG
52328: PUSH
52329: EMPTY
52330: LIST
52331: LIST
52332: PUSH
52333: LD_INT 2
52335: NEG
52336: PUSH
52337: LD_INT 2
52339: NEG
52340: PUSH
52341: EMPTY
52342: LIST
52343: LIST
52344: PUSH
52345: EMPTY
52346: LIST
52347: LIST
52348: LIST
52349: LIST
52350: LIST
52351: LIST
52352: LIST
52353: LIST
52354: LIST
52355: LIST
52356: LIST
52357: LIST
52358: LIST
52359: LIST
52360: LIST
52361: LIST
52362: LIST
52363: LIST
52364: LIST
52365: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52366: LD_ADDR_VAR 0 19
52370: PUSH
52371: LD_INT 0
52373: PUSH
52374: LD_INT 0
52376: PUSH
52377: EMPTY
52378: LIST
52379: LIST
52380: PUSH
52381: LD_INT 0
52383: PUSH
52384: LD_INT 1
52386: NEG
52387: PUSH
52388: EMPTY
52389: LIST
52390: LIST
52391: PUSH
52392: LD_INT 1
52394: PUSH
52395: LD_INT 0
52397: PUSH
52398: EMPTY
52399: LIST
52400: LIST
52401: PUSH
52402: LD_INT 1
52404: PUSH
52405: LD_INT 1
52407: PUSH
52408: EMPTY
52409: LIST
52410: LIST
52411: PUSH
52412: LD_INT 0
52414: PUSH
52415: LD_INT 1
52417: PUSH
52418: EMPTY
52419: LIST
52420: LIST
52421: PUSH
52422: LD_INT 1
52424: NEG
52425: PUSH
52426: LD_INT 0
52428: PUSH
52429: EMPTY
52430: LIST
52431: LIST
52432: PUSH
52433: LD_INT 1
52435: NEG
52436: PUSH
52437: LD_INT 1
52439: NEG
52440: PUSH
52441: EMPTY
52442: LIST
52443: LIST
52444: PUSH
52445: LD_INT 1
52447: NEG
52448: PUSH
52449: LD_INT 2
52451: NEG
52452: PUSH
52453: EMPTY
52454: LIST
52455: LIST
52456: PUSH
52457: LD_INT 0
52459: PUSH
52460: LD_INT 2
52462: NEG
52463: PUSH
52464: EMPTY
52465: LIST
52466: LIST
52467: PUSH
52468: LD_INT 1
52470: PUSH
52471: LD_INT 1
52473: NEG
52474: PUSH
52475: EMPTY
52476: LIST
52477: LIST
52478: PUSH
52479: LD_INT 2
52481: PUSH
52482: LD_INT 0
52484: PUSH
52485: EMPTY
52486: LIST
52487: LIST
52488: PUSH
52489: LD_INT 2
52491: PUSH
52492: LD_INT 1
52494: PUSH
52495: EMPTY
52496: LIST
52497: LIST
52498: PUSH
52499: LD_INT 2
52501: PUSH
52502: LD_INT 2
52504: PUSH
52505: EMPTY
52506: LIST
52507: LIST
52508: PUSH
52509: LD_INT 1
52511: PUSH
52512: LD_INT 2
52514: PUSH
52515: EMPTY
52516: LIST
52517: LIST
52518: PUSH
52519: LD_INT 0
52521: PUSH
52522: LD_INT 2
52524: PUSH
52525: EMPTY
52526: LIST
52527: LIST
52528: PUSH
52529: LD_INT 1
52531: NEG
52532: PUSH
52533: LD_INT 1
52535: PUSH
52536: EMPTY
52537: LIST
52538: LIST
52539: PUSH
52540: LD_INT 2
52542: NEG
52543: PUSH
52544: LD_INT 0
52546: PUSH
52547: EMPTY
52548: LIST
52549: LIST
52550: PUSH
52551: LD_INT 2
52553: NEG
52554: PUSH
52555: LD_INT 1
52557: NEG
52558: PUSH
52559: EMPTY
52560: LIST
52561: LIST
52562: PUSH
52563: LD_INT 2
52565: NEG
52566: PUSH
52567: LD_INT 2
52569: NEG
52570: PUSH
52571: EMPTY
52572: LIST
52573: LIST
52574: PUSH
52575: EMPTY
52576: LIST
52577: LIST
52578: LIST
52579: LIST
52580: LIST
52581: LIST
52582: LIST
52583: LIST
52584: LIST
52585: LIST
52586: LIST
52587: LIST
52588: LIST
52589: LIST
52590: LIST
52591: LIST
52592: LIST
52593: LIST
52594: LIST
52595: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52596: LD_ADDR_VAR 0 20
52600: PUSH
52601: LD_INT 0
52603: PUSH
52604: LD_INT 0
52606: PUSH
52607: EMPTY
52608: LIST
52609: LIST
52610: PUSH
52611: LD_INT 0
52613: PUSH
52614: LD_INT 1
52616: NEG
52617: PUSH
52618: EMPTY
52619: LIST
52620: LIST
52621: PUSH
52622: LD_INT 1
52624: PUSH
52625: LD_INT 0
52627: PUSH
52628: EMPTY
52629: LIST
52630: LIST
52631: PUSH
52632: LD_INT 1
52634: PUSH
52635: LD_INT 1
52637: PUSH
52638: EMPTY
52639: LIST
52640: LIST
52641: PUSH
52642: LD_INT 0
52644: PUSH
52645: LD_INT 1
52647: PUSH
52648: EMPTY
52649: LIST
52650: LIST
52651: PUSH
52652: LD_INT 1
52654: NEG
52655: PUSH
52656: LD_INT 0
52658: PUSH
52659: EMPTY
52660: LIST
52661: LIST
52662: PUSH
52663: LD_INT 1
52665: NEG
52666: PUSH
52667: LD_INT 1
52669: NEG
52670: PUSH
52671: EMPTY
52672: LIST
52673: LIST
52674: PUSH
52675: LD_INT 1
52677: NEG
52678: PUSH
52679: LD_INT 2
52681: NEG
52682: PUSH
52683: EMPTY
52684: LIST
52685: LIST
52686: PUSH
52687: LD_INT 0
52689: PUSH
52690: LD_INT 2
52692: NEG
52693: PUSH
52694: EMPTY
52695: LIST
52696: LIST
52697: PUSH
52698: LD_INT 1
52700: PUSH
52701: LD_INT 1
52703: NEG
52704: PUSH
52705: EMPTY
52706: LIST
52707: LIST
52708: PUSH
52709: LD_INT 2
52711: PUSH
52712: LD_INT 0
52714: PUSH
52715: EMPTY
52716: LIST
52717: LIST
52718: PUSH
52719: LD_INT 2
52721: PUSH
52722: LD_INT 1
52724: PUSH
52725: EMPTY
52726: LIST
52727: LIST
52728: PUSH
52729: LD_INT 2
52731: PUSH
52732: LD_INT 2
52734: PUSH
52735: EMPTY
52736: LIST
52737: LIST
52738: PUSH
52739: LD_INT 1
52741: PUSH
52742: LD_INT 2
52744: PUSH
52745: EMPTY
52746: LIST
52747: LIST
52748: PUSH
52749: LD_INT 0
52751: PUSH
52752: LD_INT 2
52754: PUSH
52755: EMPTY
52756: LIST
52757: LIST
52758: PUSH
52759: LD_INT 1
52761: NEG
52762: PUSH
52763: LD_INT 1
52765: PUSH
52766: EMPTY
52767: LIST
52768: LIST
52769: PUSH
52770: LD_INT 2
52772: NEG
52773: PUSH
52774: LD_INT 0
52776: PUSH
52777: EMPTY
52778: LIST
52779: LIST
52780: PUSH
52781: LD_INT 2
52783: NEG
52784: PUSH
52785: LD_INT 1
52787: NEG
52788: PUSH
52789: EMPTY
52790: LIST
52791: LIST
52792: PUSH
52793: LD_INT 2
52795: NEG
52796: PUSH
52797: LD_INT 2
52799: NEG
52800: PUSH
52801: EMPTY
52802: LIST
52803: LIST
52804: PUSH
52805: EMPTY
52806: LIST
52807: LIST
52808: LIST
52809: LIST
52810: LIST
52811: LIST
52812: LIST
52813: LIST
52814: LIST
52815: LIST
52816: LIST
52817: LIST
52818: LIST
52819: LIST
52820: LIST
52821: LIST
52822: LIST
52823: LIST
52824: LIST
52825: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52826: LD_ADDR_VAR 0 21
52830: PUSH
52831: LD_INT 0
52833: PUSH
52834: LD_INT 0
52836: PUSH
52837: EMPTY
52838: LIST
52839: LIST
52840: PUSH
52841: LD_INT 0
52843: PUSH
52844: LD_INT 1
52846: NEG
52847: PUSH
52848: EMPTY
52849: LIST
52850: LIST
52851: PUSH
52852: LD_INT 1
52854: PUSH
52855: LD_INT 0
52857: PUSH
52858: EMPTY
52859: LIST
52860: LIST
52861: PUSH
52862: LD_INT 1
52864: PUSH
52865: LD_INT 1
52867: PUSH
52868: EMPTY
52869: LIST
52870: LIST
52871: PUSH
52872: LD_INT 0
52874: PUSH
52875: LD_INT 1
52877: PUSH
52878: EMPTY
52879: LIST
52880: LIST
52881: PUSH
52882: LD_INT 1
52884: NEG
52885: PUSH
52886: LD_INT 0
52888: PUSH
52889: EMPTY
52890: LIST
52891: LIST
52892: PUSH
52893: LD_INT 1
52895: NEG
52896: PUSH
52897: LD_INT 1
52899: NEG
52900: PUSH
52901: EMPTY
52902: LIST
52903: LIST
52904: PUSH
52905: LD_INT 1
52907: NEG
52908: PUSH
52909: LD_INT 2
52911: NEG
52912: PUSH
52913: EMPTY
52914: LIST
52915: LIST
52916: PUSH
52917: LD_INT 0
52919: PUSH
52920: LD_INT 2
52922: NEG
52923: PUSH
52924: EMPTY
52925: LIST
52926: LIST
52927: PUSH
52928: LD_INT 1
52930: PUSH
52931: LD_INT 1
52933: NEG
52934: PUSH
52935: EMPTY
52936: LIST
52937: LIST
52938: PUSH
52939: LD_INT 2
52941: PUSH
52942: LD_INT 0
52944: PUSH
52945: EMPTY
52946: LIST
52947: LIST
52948: PUSH
52949: LD_INT 2
52951: PUSH
52952: LD_INT 1
52954: PUSH
52955: EMPTY
52956: LIST
52957: LIST
52958: PUSH
52959: LD_INT 2
52961: PUSH
52962: LD_INT 2
52964: PUSH
52965: EMPTY
52966: LIST
52967: LIST
52968: PUSH
52969: LD_INT 1
52971: PUSH
52972: LD_INT 2
52974: PUSH
52975: EMPTY
52976: LIST
52977: LIST
52978: PUSH
52979: LD_INT 0
52981: PUSH
52982: LD_INT 2
52984: PUSH
52985: EMPTY
52986: LIST
52987: LIST
52988: PUSH
52989: LD_INT 1
52991: NEG
52992: PUSH
52993: LD_INT 1
52995: PUSH
52996: EMPTY
52997: LIST
52998: LIST
52999: PUSH
53000: LD_INT 2
53002: NEG
53003: PUSH
53004: LD_INT 0
53006: PUSH
53007: EMPTY
53008: LIST
53009: LIST
53010: PUSH
53011: LD_INT 2
53013: NEG
53014: PUSH
53015: LD_INT 1
53017: NEG
53018: PUSH
53019: EMPTY
53020: LIST
53021: LIST
53022: PUSH
53023: LD_INT 2
53025: NEG
53026: PUSH
53027: LD_INT 2
53029: NEG
53030: PUSH
53031: EMPTY
53032: LIST
53033: LIST
53034: PUSH
53035: EMPTY
53036: LIST
53037: LIST
53038: LIST
53039: LIST
53040: LIST
53041: LIST
53042: LIST
53043: LIST
53044: LIST
53045: LIST
53046: LIST
53047: LIST
53048: LIST
53049: LIST
53050: LIST
53051: LIST
53052: LIST
53053: LIST
53054: LIST
53055: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53056: LD_ADDR_VAR 0 22
53060: PUSH
53061: LD_INT 0
53063: PUSH
53064: LD_INT 0
53066: PUSH
53067: EMPTY
53068: LIST
53069: LIST
53070: PUSH
53071: LD_INT 0
53073: PUSH
53074: LD_INT 1
53076: NEG
53077: PUSH
53078: EMPTY
53079: LIST
53080: LIST
53081: PUSH
53082: LD_INT 1
53084: PUSH
53085: LD_INT 0
53087: PUSH
53088: EMPTY
53089: LIST
53090: LIST
53091: PUSH
53092: LD_INT 1
53094: PUSH
53095: LD_INT 1
53097: PUSH
53098: EMPTY
53099: LIST
53100: LIST
53101: PUSH
53102: LD_INT 0
53104: PUSH
53105: LD_INT 1
53107: PUSH
53108: EMPTY
53109: LIST
53110: LIST
53111: PUSH
53112: LD_INT 1
53114: NEG
53115: PUSH
53116: LD_INT 0
53118: PUSH
53119: EMPTY
53120: LIST
53121: LIST
53122: PUSH
53123: LD_INT 1
53125: NEG
53126: PUSH
53127: LD_INT 1
53129: NEG
53130: PUSH
53131: EMPTY
53132: LIST
53133: LIST
53134: PUSH
53135: LD_INT 1
53137: NEG
53138: PUSH
53139: LD_INT 2
53141: NEG
53142: PUSH
53143: EMPTY
53144: LIST
53145: LIST
53146: PUSH
53147: LD_INT 0
53149: PUSH
53150: LD_INT 2
53152: NEG
53153: PUSH
53154: EMPTY
53155: LIST
53156: LIST
53157: PUSH
53158: LD_INT 1
53160: PUSH
53161: LD_INT 1
53163: NEG
53164: PUSH
53165: EMPTY
53166: LIST
53167: LIST
53168: PUSH
53169: LD_INT 2
53171: PUSH
53172: LD_INT 0
53174: PUSH
53175: EMPTY
53176: LIST
53177: LIST
53178: PUSH
53179: LD_INT 2
53181: PUSH
53182: LD_INT 1
53184: PUSH
53185: EMPTY
53186: LIST
53187: LIST
53188: PUSH
53189: LD_INT 2
53191: PUSH
53192: LD_INT 2
53194: PUSH
53195: EMPTY
53196: LIST
53197: LIST
53198: PUSH
53199: LD_INT 1
53201: PUSH
53202: LD_INT 2
53204: PUSH
53205: EMPTY
53206: LIST
53207: LIST
53208: PUSH
53209: LD_INT 0
53211: PUSH
53212: LD_INT 2
53214: PUSH
53215: EMPTY
53216: LIST
53217: LIST
53218: PUSH
53219: LD_INT 1
53221: NEG
53222: PUSH
53223: LD_INT 1
53225: PUSH
53226: EMPTY
53227: LIST
53228: LIST
53229: PUSH
53230: LD_INT 2
53232: NEG
53233: PUSH
53234: LD_INT 0
53236: PUSH
53237: EMPTY
53238: LIST
53239: LIST
53240: PUSH
53241: LD_INT 2
53243: NEG
53244: PUSH
53245: LD_INT 1
53247: NEG
53248: PUSH
53249: EMPTY
53250: LIST
53251: LIST
53252: PUSH
53253: LD_INT 2
53255: NEG
53256: PUSH
53257: LD_INT 2
53259: NEG
53260: PUSH
53261: EMPTY
53262: LIST
53263: LIST
53264: PUSH
53265: EMPTY
53266: LIST
53267: LIST
53268: LIST
53269: LIST
53270: LIST
53271: LIST
53272: LIST
53273: LIST
53274: LIST
53275: LIST
53276: LIST
53277: LIST
53278: LIST
53279: LIST
53280: LIST
53281: LIST
53282: LIST
53283: LIST
53284: LIST
53285: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
53286: LD_ADDR_VAR 0 23
53290: PUSH
53291: LD_INT 0
53293: PUSH
53294: LD_INT 0
53296: PUSH
53297: EMPTY
53298: LIST
53299: LIST
53300: PUSH
53301: LD_INT 0
53303: PUSH
53304: LD_INT 1
53306: NEG
53307: PUSH
53308: EMPTY
53309: LIST
53310: LIST
53311: PUSH
53312: LD_INT 1
53314: PUSH
53315: LD_INT 0
53317: PUSH
53318: EMPTY
53319: LIST
53320: LIST
53321: PUSH
53322: LD_INT 1
53324: PUSH
53325: LD_INT 1
53327: PUSH
53328: EMPTY
53329: LIST
53330: LIST
53331: PUSH
53332: LD_INT 0
53334: PUSH
53335: LD_INT 1
53337: PUSH
53338: EMPTY
53339: LIST
53340: LIST
53341: PUSH
53342: LD_INT 1
53344: NEG
53345: PUSH
53346: LD_INT 0
53348: PUSH
53349: EMPTY
53350: LIST
53351: LIST
53352: PUSH
53353: LD_INT 1
53355: NEG
53356: PUSH
53357: LD_INT 1
53359: NEG
53360: PUSH
53361: EMPTY
53362: LIST
53363: LIST
53364: PUSH
53365: LD_INT 1
53367: NEG
53368: PUSH
53369: LD_INT 2
53371: NEG
53372: PUSH
53373: EMPTY
53374: LIST
53375: LIST
53376: PUSH
53377: LD_INT 0
53379: PUSH
53380: LD_INT 2
53382: NEG
53383: PUSH
53384: EMPTY
53385: LIST
53386: LIST
53387: PUSH
53388: LD_INT 1
53390: PUSH
53391: LD_INT 1
53393: NEG
53394: PUSH
53395: EMPTY
53396: LIST
53397: LIST
53398: PUSH
53399: LD_INT 2
53401: PUSH
53402: LD_INT 0
53404: PUSH
53405: EMPTY
53406: LIST
53407: LIST
53408: PUSH
53409: LD_INT 2
53411: PUSH
53412: LD_INT 1
53414: PUSH
53415: EMPTY
53416: LIST
53417: LIST
53418: PUSH
53419: LD_INT 2
53421: PUSH
53422: LD_INT 2
53424: PUSH
53425: EMPTY
53426: LIST
53427: LIST
53428: PUSH
53429: LD_INT 1
53431: PUSH
53432: LD_INT 2
53434: PUSH
53435: EMPTY
53436: LIST
53437: LIST
53438: PUSH
53439: LD_INT 0
53441: PUSH
53442: LD_INT 2
53444: PUSH
53445: EMPTY
53446: LIST
53447: LIST
53448: PUSH
53449: LD_INT 1
53451: NEG
53452: PUSH
53453: LD_INT 1
53455: PUSH
53456: EMPTY
53457: LIST
53458: LIST
53459: PUSH
53460: LD_INT 2
53462: NEG
53463: PUSH
53464: LD_INT 0
53466: PUSH
53467: EMPTY
53468: LIST
53469: LIST
53470: PUSH
53471: LD_INT 2
53473: NEG
53474: PUSH
53475: LD_INT 1
53477: NEG
53478: PUSH
53479: EMPTY
53480: LIST
53481: LIST
53482: PUSH
53483: LD_INT 2
53485: NEG
53486: PUSH
53487: LD_INT 2
53489: NEG
53490: PUSH
53491: EMPTY
53492: LIST
53493: LIST
53494: PUSH
53495: LD_INT 2
53497: NEG
53498: PUSH
53499: LD_INT 3
53501: NEG
53502: PUSH
53503: EMPTY
53504: LIST
53505: LIST
53506: PUSH
53507: LD_INT 1
53509: NEG
53510: PUSH
53511: LD_INT 3
53513: NEG
53514: PUSH
53515: EMPTY
53516: LIST
53517: LIST
53518: PUSH
53519: LD_INT 1
53521: PUSH
53522: LD_INT 2
53524: NEG
53525: PUSH
53526: EMPTY
53527: LIST
53528: LIST
53529: PUSH
53530: LD_INT 2
53532: PUSH
53533: LD_INT 1
53535: NEG
53536: PUSH
53537: EMPTY
53538: LIST
53539: LIST
53540: PUSH
53541: EMPTY
53542: LIST
53543: LIST
53544: LIST
53545: LIST
53546: LIST
53547: LIST
53548: LIST
53549: LIST
53550: LIST
53551: LIST
53552: LIST
53553: LIST
53554: LIST
53555: LIST
53556: LIST
53557: LIST
53558: LIST
53559: LIST
53560: LIST
53561: LIST
53562: LIST
53563: LIST
53564: LIST
53565: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
53566: LD_ADDR_VAR 0 24
53570: PUSH
53571: LD_INT 0
53573: PUSH
53574: LD_INT 0
53576: PUSH
53577: EMPTY
53578: LIST
53579: LIST
53580: PUSH
53581: LD_INT 0
53583: PUSH
53584: LD_INT 1
53586: NEG
53587: PUSH
53588: EMPTY
53589: LIST
53590: LIST
53591: PUSH
53592: LD_INT 1
53594: PUSH
53595: LD_INT 0
53597: PUSH
53598: EMPTY
53599: LIST
53600: LIST
53601: PUSH
53602: LD_INT 1
53604: PUSH
53605: LD_INT 1
53607: PUSH
53608: EMPTY
53609: LIST
53610: LIST
53611: PUSH
53612: LD_INT 0
53614: PUSH
53615: LD_INT 1
53617: PUSH
53618: EMPTY
53619: LIST
53620: LIST
53621: PUSH
53622: LD_INT 1
53624: NEG
53625: PUSH
53626: LD_INT 0
53628: PUSH
53629: EMPTY
53630: LIST
53631: LIST
53632: PUSH
53633: LD_INT 1
53635: NEG
53636: PUSH
53637: LD_INT 1
53639: NEG
53640: PUSH
53641: EMPTY
53642: LIST
53643: LIST
53644: PUSH
53645: LD_INT 1
53647: NEG
53648: PUSH
53649: LD_INT 2
53651: NEG
53652: PUSH
53653: EMPTY
53654: LIST
53655: LIST
53656: PUSH
53657: LD_INT 0
53659: PUSH
53660: LD_INT 2
53662: NEG
53663: PUSH
53664: EMPTY
53665: LIST
53666: LIST
53667: PUSH
53668: LD_INT 1
53670: PUSH
53671: LD_INT 1
53673: NEG
53674: PUSH
53675: EMPTY
53676: LIST
53677: LIST
53678: PUSH
53679: LD_INT 2
53681: PUSH
53682: LD_INT 0
53684: PUSH
53685: EMPTY
53686: LIST
53687: LIST
53688: PUSH
53689: LD_INT 2
53691: PUSH
53692: LD_INT 1
53694: PUSH
53695: EMPTY
53696: LIST
53697: LIST
53698: PUSH
53699: LD_INT 2
53701: PUSH
53702: LD_INT 2
53704: PUSH
53705: EMPTY
53706: LIST
53707: LIST
53708: PUSH
53709: LD_INT 1
53711: PUSH
53712: LD_INT 2
53714: PUSH
53715: EMPTY
53716: LIST
53717: LIST
53718: PUSH
53719: LD_INT 0
53721: PUSH
53722: LD_INT 2
53724: PUSH
53725: EMPTY
53726: LIST
53727: LIST
53728: PUSH
53729: LD_INT 1
53731: NEG
53732: PUSH
53733: LD_INT 1
53735: PUSH
53736: EMPTY
53737: LIST
53738: LIST
53739: PUSH
53740: LD_INT 2
53742: NEG
53743: PUSH
53744: LD_INT 0
53746: PUSH
53747: EMPTY
53748: LIST
53749: LIST
53750: PUSH
53751: LD_INT 2
53753: NEG
53754: PUSH
53755: LD_INT 1
53757: NEG
53758: PUSH
53759: EMPTY
53760: LIST
53761: LIST
53762: PUSH
53763: LD_INT 2
53765: NEG
53766: PUSH
53767: LD_INT 2
53769: NEG
53770: PUSH
53771: EMPTY
53772: LIST
53773: LIST
53774: PUSH
53775: LD_INT 1
53777: PUSH
53778: LD_INT 2
53780: NEG
53781: PUSH
53782: EMPTY
53783: LIST
53784: LIST
53785: PUSH
53786: LD_INT 2
53788: PUSH
53789: LD_INT 1
53791: NEG
53792: PUSH
53793: EMPTY
53794: LIST
53795: LIST
53796: PUSH
53797: LD_INT 3
53799: PUSH
53800: LD_INT 1
53802: PUSH
53803: EMPTY
53804: LIST
53805: LIST
53806: PUSH
53807: LD_INT 3
53809: PUSH
53810: LD_INT 2
53812: PUSH
53813: EMPTY
53814: LIST
53815: LIST
53816: PUSH
53817: EMPTY
53818: LIST
53819: LIST
53820: LIST
53821: LIST
53822: LIST
53823: LIST
53824: LIST
53825: LIST
53826: LIST
53827: LIST
53828: LIST
53829: LIST
53830: LIST
53831: LIST
53832: LIST
53833: LIST
53834: LIST
53835: LIST
53836: LIST
53837: LIST
53838: LIST
53839: LIST
53840: LIST
53841: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
53842: LD_ADDR_VAR 0 25
53846: PUSH
53847: LD_INT 0
53849: PUSH
53850: LD_INT 0
53852: PUSH
53853: EMPTY
53854: LIST
53855: LIST
53856: PUSH
53857: LD_INT 0
53859: PUSH
53860: LD_INT 1
53862: NEG
53863: PUSH
53864: EMPTY
53865: LIST
53866: LIST
53867: PUSH
53868: LD_INT 1
53870: PUSH
53871: LD_INT 0
53873: PUSH
53874: EMPTY
53875: LIST
53876: LIST
53877: PUSH
53878: LD_INT 1
53880: PUSH
53881: LD_INT 1
53883: PUSH
53884: EMPTY
53885: LIST
53886: LIST
53887: PUSH
53888: LD_INT 0
53890: PUSH
53891: LD_INT 1
53893: PUSH
53894: EMPTY
53895: LIST
53896: LIST
53897: PUSH
53898: LD_INT 1
53900: NEG
53901: PUSH
53902: LD_INT 0
53904: PUSH
53905: EMPTY
53906: LIST
53907: LIST
53908: PUSH
53909: LD_INT 1
53911: NEG
53912: PUSH
53913: LD_INT 1
53915: NEG
53916: PUSH
53917: EMPTY
53918: LIST
53919: LIST
53920: PUSH
53921: LD_INT 1
53923: NEG
53924: PUSH
53925: LD_INT 2
53927: NEG
53928: PUSH
53929: EMPTY
53930: LIST
53931: LIST
53932: PUSH
53933: LD_INT 0
53935: PUSH
53936: LD_INT 2
53938: NEG
53939: PUSH
53940: EMPTY
53941: LIST
53942: LIST
53943: PUSH
53944: LD_INT 1
53946: PUSH
53947: LD_INT 1
53949: NEG
53950: PUSH
53951: EMPTY
53952: LIST
53953: LIST
53954: PUSH
53955: LD_INT 2
53957: PUSH
53958: LD_INT 0
53960: PUSH
53961: EMPTY
53962: LIST
53963: LIST
53964: PUSH
53965: LD_INT 2
53967: PUSH
53968: LD_INT 1
53970: PUSH
53971: EMPTY
53972: LIST
53973: LIST
53974: PUSH
53975: LD_INT 2
53977: PUSH
53978: LD_INT 2
53980: PUSH
53981: EMPTY
53982: LIST
53983: LIST
53984: PUSH
53985: LD_INT 1
53987: PUSH
53988: LD_INT 2
53990: PUSH
53991: EMPTY
53992: LIST
53993: LIST
53994: PUSH
53995: LD_INT 0
53997: PUSH
53998: LD_INT 2
54000: PUSH
54001: EMPTY
54002: LIST
54003: LIST
54004: PUSH
54005: LD_INT 1
54007: NEG
54008: PUSH
54009: LD_INT 1
54011: PUSH
54012: EMPTY
54013: LIST
54014: LIST
54015: PUSH
54016: LD_INT 2
54018: NEG
54019: PUSH
54020: LD_INT 0
54022: PUSH
54023: EMPTY
54024: LIST
54025: LIST
54026: PUSH
54027: LD_INT 2
54029: NEG
54030: PUSH
54031: LD_INT 1
54033: NEG
54034: PUSH
54035: EMPTY
54036: LIST
54037: LIST
54038: PUSH
54039: LD_INT 2
54041: NEG
54042: PUSH
54043: LD_INT 2
54045: NEG
54046: PUSH
54047: EMPTY
54048: LIST
54049: LIST
54050: PUSH
54051: LD_INT 3
54053: PUSH
54054: LD_INT 1
54056: PUSH
54057: EMPTY
54058: LIST
54059: LIST
54060: PUSH
54061: LD_INT 3
54063: PUSH
54064: LD_INT 2
54066: PUSH
54067: EMPTY
54068: LIST
54069: LIST
54070: PUSH
54071: LD_INT 2
54073: PUSH
54074: LD_INT 3
54076: PUSH
54077: EMPTY
54078: LIST
54079: LIST
54080: PUSH
54081: LD_INT 1
54083: PUSH
54084: LD_INT 3
54086: PUSH
54087: EMPTY
54088: LIST
54089: LIST
54090: PUSH
54091: EMPTY
54092: LIST
54093: LIST
54094: LIST
54095: LIST
54096: LIST
54097: LIST
54098: LIST
54099: LIST
54100: LIST
54101: LIST
54102: LIST
54103: LIST
54104: LIST
54105: LIST
54106: LIST
54107: LIST
54108: LIST
54109: LIST
54110: LIST
54111: LIST
54112: LIST
54113: LIST
54114: LIST
54115: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
54116: LD_ADDR_VAR 0 26
54120: PUSH
54121: LD_INT 0
54123: PUSH
54124: LD_INT 0
54126: PUSH
54127: EMPTY
54128: LIST
54129: LIST
54130: PUSH
54131: LD_INT 0
54133: PUSH
54134: LD_INT 1
54136: NEG
54137: PUSH
54138: EMPTY
54139: LIST
54140: LIST
54141: PUSH
54142: LD_INT 1
54144: PUSH
54145: LD_INT 0
54147: PUSH
54148: EMPTY
54149: LIST
54150: LIST
54151: PUSH
54152: LD_INT 1
54154: PUSH
54155: LD_INT 1
54157: PUSH
54158: EMPTY
54159: LIST
54160: LIST
54161: PUSH
54162: LD_INT 0
54164: PUSH
54165: LD_INT 1
54167: PUSH
54168: EMPTY
54169: LIST
54170: LIST
54171: PUSH
54172: LD_INT 1
54174: NEG
54175: PUSH
54176: LD_INT 0
54178: PUSH
54179: EMPTY
54180: LIST
54181: LIST
54182: PUSH
54183: LD_INT 1
54185: NEG
54186: PUSH
54187: LD_INT 1
54189: NEG
54190: PUSH
54191: EMPTY
54192: LIST
54193: LIST
54194: PUSH
54195: LD_INT 1
54197: NEG
54198: PUSH
54199: LD_INT 2
54201: NEG
54202: PUSH
54203: EMPTY
54204: LIST
54205: LIST
54206: PUSH
54207: LD_INT 0
54209: PUSH
54210: LD_INT 2
54212: NEG
54213: PUSH
54214: EMPTY
54215: LIST
54216: LIST
54217: PUSH
54218: LD_INT 1
54220: PUSH
54221: LD_INT 1
54223: NEG
54224: PUSH
54225: EMPTY
54226: LIST
54227: LIST
54228: PUSH
54229: LD_INT 2
54231: PUSH
54232: LD_INT 0
54234: PUSH
54235: EMPTY
54236: LIST
54237: LIST
54238: PUSH
54239: LD_INT 2
54241: PUSH
54242: LD_INT 1
54244: PUSH
54245: EMPTY
54246: LIST
54247: LIST
54248: PUSH
54249: LD_INT 2
54251: PUSH
54252: LD_INT 2
54254: PUSH
54255: EMPTY
54256: LIST
54257: LIST
54258: PUSH
54259: LD_INT 1
54261: PUSH
54262: LD_INT 2
54264: PUSH
54265: EMPTY
54266: LIST
54267: LIST
54268: PUSH
54269: LD_INT 0
54271: PUSH
54272: LD_INT 2
54274: PUSH
54275: EMPTY
54276: LIST
54277: LIST
54278: PUSH
54279: LD_INT 1
54281: NEG
54282: PUSH
54283: LD_INT 1
54285: PUSH
54286: EMPTY
54287: LIST
54288: LIST
54289: PUSH
54290: LD_INT 2
54292: NEG
54293: PUSH
54294: LD_INT 0
54296: PUSH
54297: EMPTY
54298: LIST
54299: LIST
54300: PUSH
54301: LD_INT 2
54303: NEG
54304: PUSH
54305: LD_INT 1
54307: NEG
54308: PUSH
54309: EMPTY
54310: LIST
54311: LIST
54312: PUSH
54313: LD_INT 2
54315: NEG
54316: PUSH
54317: LD_INT 2
54319: NEG
54320: PUSH
54321: EMPTY
54322: LIST
54323: LIST
54324: PUSH
54325: LD_INT 2
54327: PUSH
54328: LD_INT 3
54330: PUSH
54331: EMPTY
54332: LIST
54333: LIST
54334: PUSH
54335: LD_INT 1
54337: PUSH
54338: LD_INT 3
54340: PUSH
54341: EMPTY
54342: LIST
54343: LIST
54344: PUSH
54345: LD_INT 1
54347: NEG
54348: PUSH
54349: LD_INT 2
54351: PUSH
54352: EMPTY
54353: LIST
54354: LIST
54355: PUSH
54356: LD_INT 2
54358: NEG
54359: PUSH
54360: LD_INT 1
54362: PUSH
54363: EMPTY
54364: LIST
54365: LIST
54366: PUSH
54367: EMPTY
54368: LIST
54369: LIST
54370: LIST
54371: LIST
54372: LIST
54373: LIST
54374: LIST
54375: LIST
54376: LIST
54377: LIST
54378: LIST
54379: LIST
54380: LIST
54381: LIST
54382: LIST
54383: LIST
54384: LIST
54385: LIST
54386: LIST
54387: LIST
54388: LIST
54389: LIST
54390: LIST
54391: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54392: LD_ADDR_VAR 0 27
54396: PUSH
54397: LD_INT 0
54399: PUSH
54400: LD_INT 0
54402: PUSH
54403: EMPTY
54404: LIST
54405: LIST
54406: PUSH
54407: LD_INT 0
54409: PUSH
54410: LD_INT 1
54412: NEG
54413: PUSH
54414: EMPTY
54415: LIST
54416: LIST
54417: PUSH
54418: LD_INT 1
54420: PUSH
54421: LD_INT 0
54423: PUSH
54424: EMPTY
54425: LIST
54426: LIST
54427: PUSH
54428: LD_INT 1
54430: PUSH
54431: LD_INT 1
54433: PUSH
54434: EMPTY
54435: LIST
54436: LIST
54437: PUSH
54438: LD_INT 0
54440: PUSH
54441: LD_INT 1
54443: PUSH
54444: EMPTY
54445: LIST
54446: LIST
54447: PUSH
54448: LD_INT 1
54450: NEG
54451: PUSH
54452: LD_INT 0
54454: PUSH
54455: EMPTY
54456: LIST
54457: LIST
54458: PUSH
54459: LD_INT 1
54461: NEG
54462: PUSH
54463: LD_INT 1
54465: NEG
54466: PUSH
54467: EMPTY
54468: LIST
54469: LIST
54470: PUSH
54471: LD_INT 1
54473: NEG
54474: PUSH
54475: LD_INT 2
54477: NEG
54478: PUSH
54479: EMPTY
54480: LIST
54481: LIST
54482: PUSH
54483: LD_INT 0
54485: PUSH
54486: LD_INT 2
54488: NEG
54489: PUSH
54490: EMPTY
54491: LIST
54492: LIST
54493: PUSH
54494: LD_INT 1
54496: PUSH
54497: LD_INT 1
54499: NEG
54500: PUSH
54501: EMPTY
54502: LIST
54503: LIST
54504: PUSH
54505: LD_INT 2
54507: PUSH
54508: LD_INT 0
54510: PUSH
54511: EMPTY
54512: LIST
54513: LIST
54514: PUSH
54515: LD_INT 2
54517: PUSH
54518: LD_INT 1
54520: PUSH
54521: EMPTY
54522: LIST
54523: LIST
54524: PUSH
54525: LD_INT 2
54527: PUSH
54528: LD_INT 2
54530: PUSH
54531: EMPTY
54532: LIST
54533: LIST
54534: PUSH
54535: LD_INT 1
54537: PUSH
54538: LD_INT 2
54540: PUSH
54541: EMPTY
54542: LIST
54543: LIST
54544: PUSH
54545: LD_INT 0
54547: PUSH
54548: LD_INT 2
54550: PUSH
54551: EMPTY
54552: LIST
54553: LIST
54554: PUSH
54555: LD_INT 1
54557: NEG
54558: PUSH
54559: LD_INT 1
54561: PUSH
54562: EMPTY
54563: LIST
54564: LIST
54565: PUSH
54566: LD_INT 2
54568: NEG
54569: PUSH
54570: LD_INT 0
54572: PUSH
54573: EMPTY
54574: LIST
54575: LIST
54576: PUSH
54577: LD_INT 2
54579: NEG
54580: PUSH
54581: LD_INT 1
54583: NEG
54584: PUSH
54585: EMPTY
54586: LIST
54587: LIST
54588: PUSH
54589: LD_INT 2
54591: NEG
54592: PUSH
54593: LD_INT 2
54595: NEG
54596: PUSH
54597: EMPTY
54598: LIST
54599: LIST
54600: PUSH
54601: LD_INT 1
54603: NEG
54604: PUSH
54605: LD_INT 2
54607: PUSH
54608: EMPTY
54609: LIST
54610: LIST
54611: PUSH
54612: LD_INT 2
54614: NEG
54615: PUSH
54616: LD_INT 1
54618: PUSH
54619: EMPTY
54620: LIST
54621: LIST
54622: PUSH
54623: LD_INT 3
54625: NEG
54626: PUSH
54627: LD_INT 1
54629: NEG
54630: PUSH
54631: EMPTY
54632: LIST
54633: LIST
54634: PUSH
54635: LD_INT 3
54637: NEG
54638: PUSH
54639: LD_INT 2
54641: NEG
54642: PUSH
54643: EMPTY
54644: LIST
54645: LIST
54646: PUSH
54647: EMPTY
54648: LIST
54649: LIST
54650: LIST
54651: LIST
54652: LIST
54653: LIST
54654: LIST
54655: LIST
54656: LIST
54657: LIST
54658: LIST
54659: LIST
54660: LIST
54661: LIST
54662: LIST
54663: LIST
54664: LIST
54665: LIST
54666: LIST
54667: LIST
54668: LIST
54669: LIST
54670: LIST
54671: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54672: LD_ADDR_VAR 0 28
54676: PUSH
54677: LD_INT 0
54679: PUSH
54680: LD_INT 0
54682: PUSH
54683: EMPTY
54684: LIST
54685: LIST
54686: PUSH
54687: LD_INT 0
54689: PUSH
54690: LD_INT 1
54692: NEG
54693: PUSH
54694: EMPTY
54695: LIST
54696: LIST
54697: PUSH
54698: LD_INT 1
54700: PUSH
54701: LD_INT 0
54703: PUSH
54704: EMPTY
54705: LIST
54706: LIST
54707: PUSH
54708: LD_INT 1
54710: PUSH
54711: LD_INT 1
54713: PUSH
54714: EMPTY
54715: LIST
54716: LIST
54717: PUSH
54718: LD_INT 0
54720: PUSH
54721: LD_INT 1
54723: PUSH
54724: EMPTY
54725: LIST
54726: LIST
54727: PUSH
54728: LD_INT 1
54730: NEG
54731: PUSH
54732: LD_INT 0
54734: PUSH
54735: EMPTY
54736: LIST
54737: LIST
54738: PUSH
54739: LD_INT 1
54741: NEG
54742: PUSH
54743: LD_INT 1
54745: NEG
54746: PUSH
54747: EMPTY
54748: LIST
54749: LIST
54750: PUSH
54751: LD_INT 1
54753: NEG
54754: PUSH
54755: LD_INT 2
54757: NEG
54758: PUSH
54759: EMPTY
54760: LIST
54761: LIST
54762: PUSH
54763: LD_INT 0
54765: PUSH
54766: LD_INT 2
54768: NEG
54769: PUSH
54770: EMPTY
54771: LIST
54772: LIST
54773: PUSH
54774: LD_INT 1
54776: PUSH
54777: LD_INT 1
54779: NEG
54780: PUSH
54781: EMPTY
54782: LIST
54783: LIST
54784: PUSH
54785: LD_INT 2
54787: PUSH
54788: LD_INT 0
54790: PUSH
54791: EMPTY
54792: LIST
54793: LIST
54794: PUSH
54795: LD_INT 2
54797: PUSH
54798: LD_INT 1
54800: PUSH
54801: EMPTY
54802: LIST
54803: LIST
54804: PUSH
54805: LD_INT 2
54807: PUSH
54808: LD_INT 2
54810: PUSH
54811: EMPTY
54812: LIST
54813: LIST
54814: PUSH
54815: LD_INT 1
54817: PUSH
54818: LD_INT 2
54820: PUSH
54821: EMPTY
54822: LIST
54823: LIST
54824: PUSH
54825: LD_INT 0
54827: PUSH
54828: LD_INT 2
54830: PUSH
54831: EMPTY
54832: LIST
54833: LIST
54834: PUSH
54835: LD_INT 1
54837: NEG
54838: PUSH
54839: LD_INT 1
54841: PUSH
54842: EMPTY
54843: LIST
54844: LIST
54845: PUSH
54846: LD_INT 2
54848: NEG
54849: PUSH
54850: LD_INT 0
54852: PUSH
54853: EMPTY
54854: LIST
54855: LIST
54856: PUSH
54857: LD_INT 2
54859: NEG
54860: PUSH
54861: LD_INT 1
54863: NEG
54864: PUSH
54865: EMPTY
54866: LIST
54867: LIST
54868: PUSH
54869: LD_INT 2
54871: NEG
54872: PUSH
54873: LD_INT 2
54875: NEG
54876: PUSH
54877: EMPTY
54878: LIST
54879: LIST
54880: PUSH
54881: LD_INT 2
54883: NEG
54884: PUSH
54885: LD_INT 3
54887: NEG
54888: PUSH
54889: EMPTY
54890: LIST
54891: LIST
54892: PUSH
54893: LD_INT 1
54895: NEG
54896: PUSH
54897: LD_INT 3
54899: NEG
54900: PUSH
54901: EMPTY
54902: LIST
54903: LIST
54904: PUSH
54905: LD_INT 3
54907: NEG
54908: PUSH
54909: LD_INT 1
54911: NEG
54912: PUSH
54913: EMPTY
54914: LIST
54915: LIST
54916: PUSH
54917: LD_INT 3
54919: NEG
54920: PUSH
54921: LD_INT 2
54923: NEG
54924: PUSH
54925: EMPTY
54926: LIST
54927: LIST
54928: PUSH
54929: EMPTY
54930: LIST
54931: LIST
54932: LIST
54933: LIST
54934: LIST
54935: LIST
54936: LIST
54937: LIST
54938: LIST
54939: LIST
54940: LIST
54941: LIST
54942: LIST
54943: LIST
54944: LIST
54945: LIST
54946: LIST
54947: LIST
54948: LIST
54949: LIST
54950: LIST
54951: LIST
54952: LIST
54953: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
54954: LD_ADDR_VAR 0 29
54958: PUSH
54959: LD_INT 0
54961: PUSH
54962: LD_INT 0
54964: PUSH
54965: EMPTY
54966: LIST
54967: LIST
54968: PUSH
54969: LD_INT 0
54971: PUSH
54972: LD_INT 1
54974: NEG
54975: PUSH
54976: EMPTY
54977: LIST
54978: LIST
54979: PUSH
54980: LD_INT 1
54982: PUSH
54983: LD_INT 0
54985: PUSH
54986: EMPTY
54987: LIST
54988: LIST
54989: PUSH
54990: LD_INT 1
54992: PUSH
54993: LD_INT 1
54995: PUSH
54996: EMPTY
54997: LIST
54998: LIST
54999: PUSH
55000: LD_INT 0
55002: PUSH
55003: LD_INT 1
55005: PUSH
55006: EMPTY
55007: LIST
55008: LIST
55009: PUSH
55010: LD_INT 1
55012: NEG
55013: PUSH
55014: LD_INT 0
55016: PUSH
55017: EMPTY
55018: LIST
55019: LIST
55020: PUSH
55021: LD_INT 1
55023: NEG
55024: PUSH
55025: LD_INT 1
55027: NEG
55028: PUSH
55029: EMPTY
55030: LIST
55031: LIST
55032: PUSH
55033: LD_INT 1
55035: NEG
55036: PUSH
55037: LD_INT 2
55039: NEG
55040: PUSH
55041: EMPTY
55042: LIST
55043: LIST
55044: PUSH
55045: LD_INT 0
55047: PUSH
55048: LD_INT 2
55050: NEG
55051: PUSH
55052: EMPTY
55053: LIST
55054: LIST
55055: PUSH
55056: LD_INT 1
55058: PUSH
55059: LD_INT 1
55061: NEG
55062: PUSH
55063: EMPTY
55064: LIST
55065: LIST
55066: PUSH
55067: LD_INT 2
55069: PUSH
55070: LD_INT 0
55072: PUSH
55073: EMPTY
55074: LIST
55075: LIST
55076: PUSH
55077: LD_INT 2
55079: PUSH
55080: LD_INT 1
55082: PUSH
55083: EMPTY
55084: LIST
55085: LIST
55086: PUSH
55087: LD_INT 1
55089: PUSH
55090: LD_INT 2
55092: PUSH
55093: EMPTY
55094: LIST
55095: LIST
55096: PUSH
55097: LD_INT 0
55099: PUSH
55100: LD_INT 2
55102: PUSH
55103: EMPTY
55104: LIST
55105: LIST
55106: PUSH
55107: LD_INT 1
55109: NEG
55110: PUSH
55111: LD_INT 1
55113: PUSH
55114: EMPTY
55115: LIST
55116: LIST
55117: PUSH
55118: LD_INT 2
55120: NEG
55121: PUSH
55122: LD_INT 1
55124: NEG
55125: PUSH
55126: EMPTY
55127: LIST
55128: LIST
55129: PUSH
55130: LD_INT 2
55132: NEG
55133: PUSH
55134: LD_INT 2
55136: NEG
55137: PUSH
55138: EMPTY
55139: LIST
55140: LIST
55141: PUSH
55142: LD_INT 2
55144: NEG
55145: PUSH
55146: LD_INT 3
55148: NEG
55149: PUSH
55150: EMPTY
55151: LIST
55152: LIST
55153: PUSH
55154: LD_INT 2
55156: PUSH
55157: LD_INT 1
55159: NEG
55160: PUSH
55161: EMPTY
55162: LIST
55163: LIST
55164: PUSH
55165: LD_INT 3
55167: PUSH
55168: LD_INT 1
55170: PUSH
55171: EMPTY
55172: LIST
55173: LIST
55174: PUSH
55175: LD_INT 1
55177: PUSH
55178: LD_INT 3
55180: PUSH
55181: EMPTY
55182: LIST
55183: LIST
55184: PUSH
55185: LD_INT 1
55187: NEG
55188: PUSH
55189: LD_INT 2
55191: PUSH
55192: EMPTY
55193: LIST
55194: LIST
55195: PUSH
55196: LD_INT 3
55198: NEG
55199: PUSH
55200: LD_INT 2
55202: NEG
55203: PUSH
55204: EMPTY
55205: LIST
55206: LIST
55207: PUSH
55208: EMPTY
55209: LIST
55210: LIST
55211: LIST
55212: LIST
55213: LIST
55214: LIST
55215: LIST
55216: LIST
55217: LIST
55218: LIST
55219: LIST
55220: LIST
55221: LIST
55222: LIST
55223: LIST
55224: LIST
55225: LIST
55226: LIST
55227: LIST
55228: LIST
55229: LIST
55230: LIST
55231: LIST
55232: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55233: LD_ADDR_VAR 0 30
55237: PUSH
55238: LD_INT 0
55240: PUSH
55241: LD_INT 0
55243: PUSH
55244: EMPTY
55245: LIST
55246: LIST
55247: PUSH
55248: LD_INT 0
55250: PUSH
55251: LD_INT 1
55253: NEG
55254: PUSH
55255: EMPTY
55256: LIST
55257: LIST
55258: PUSH
55259: LD_INT 1
55261: PUSH
55262: LD_INT 0
55264: PUSH
55265: EMPTY
55266: LIST
55267: LIST
55268: PUSH
55269: LD_INT 1
55271: PUSH
55272: LD_INT 1
55274: PUSH
55275: EMPTY
55276: LIST
55277: LIST
55278: PUSH
55279: LD_INT 0
55281: PUSH
55282: LD_INT 1
55284: PUSH
55285: EMPTY
55286: LIST
55287: LIST
55288: PUSH
55289: LD_INT 1
55291: NEG
55292: PUSH
55293: LD_INT 0
55295: PUSH
55296: EMPTY
55297: LIST
55298: LIST
55299: PUSH
55300: LD_INT 1
55302: NEG
55303: PUSH
55304: LD_INT 1
55306: NEG
55307: PUSH
55308: EMPTY
55309: LIST
55310: LIST
55311: PUSH
55312: LD_INT 1
55314: NEG
55315: PUSH
55316: LD_INT 2
55318: NEG
55319: PUSH
55320: EMPTY
55321: LIST
55322: LIST
55323: PUSH
55324: LD_INT 0
55326: PUSH
55327: LD_INT 2
55329: NEG
55330: PUSH
55331: EMPTY
55332: LIST
55333: LIST
55334: PUSH
55335: LD_INT 1
55337: PUSH
55338: LD_INT 1
55340: NEG
55341: PUSH
55342: EMPTY
55343: LIST
55344: LIST
55345: PUSH
55346: LD_INT 2
55348: PUSH
55349: LD_INT 0
55351: PUSH
55352: EMPTY
55353: LIST
55354: LIST
55355: PUSH
55356: LD_INT 2
55358: PUSH
55359: LD_INT 1
55361: PUSH
55362: EMPTY
55363: LIST
55364: LIST
55365: PUSH
55366: LD_INT 2
55368: PUSH
55369: LD_INT 2
55371: PUSH
55372: EMPTY
55373: LIST
55374: LIST
55375: PUSH
55376: LD_INT 1
55378: PUSH
55379: LD_INT 2
55381: PUSH
55382: EMPTY
55383: LIST
55384: LIST
55385: PUSH
55386: LD_INT 1
55388: NEG
55389: PUSH
55390: LD_INT 1
55392: PUSH
55393: EMPTY
55394: LIST
55395: LIST
55396: PUSH
55397: LD_INT 2
55399: NEG
55400: PUSH
55401: LD_INT 0
55403: PUSH
55404: EMPTY
55405: LIST
55406: LIST
55407: PUSH
55408: LD_INT 2
55410: NEG
55411: PUSH
55412: LD_INT 1
55414: NEG
55415: PUSH
55416: EMPTY
55417: LIST
55418: LIST
55419: PUSH
55420: LD_INT 1
55422: NEG
55423: PUSH
55424: LD_INT 3
55426: NEG
55427: PUSH
55428: EMPTY
55429: LIST
55430: LIST
55431: PUSH
55432: LD_INT 1
55434: PUSH
55435: LD_INT 2
55437: NEG
55438: PUSH
55439: EMPTY
55440: LIST
55441: LIST
55442: PUSH
55443: LD_INT 3
55445: PUSH
55446: LD_INT 2
55448: PUSH
55449: EMPTY
55450: LIST
55451: LIST
55452: PUSH
55453: LD_INT 2
55455: PUSH
55456: LD_INT 3
55458: PUSH
55459: EMPTY
55460: LIST
55461: LIST
55462: PUSH
55463: LD_INT 2
55465: NEG
55466: PUSH
55467: LD_INT 1
55469: PUSH
55470: EMPTY
55471: LIST
55472: LIST
55473: PUSH
55474: LD_INT 3
55476: NEG
55477: PUSH
55478: LD_INT 1
55480: NEG
55481: PUSH
55482: EMPTY
55483: LIST
55484: LIST
55485: PUSH
55486: EMPTY
55487: LIST
55488: LIST
55489: LIST
55490: LIST
55491: LIST
55492: LIST
55493: LIST
55494: LIST
55495: LIST
55496: LIST
55497: LIST
55498: LIST
55499: LIST
55500: LIST
55501: LIST
55502: LIST
55503: LIST
55504: LIST
55505: LIST
55506: LIST
55507: LIST
55508: LIST
55509: LIST
55510: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
55511: LD_ADDR_VAR 0 31
55515: PUSH
55516: LD_INT 0
55518: PUSH
55519: LD_INT 0
55521: PUSH
55522: EMPTY
55523: LIST
55524: LIST
55525: PUSH
55526: LD_INT 0
55528: PUSH
55529: LD_INT 1
55531: NEG
55532: PUSH
55533: EMPTY
55534: LIST
55535: LIST
55536: PUSH
55537: LD_INT 1
55539: PUSH
55540: LD_INT 0
55542: PUSH
55543: EMPTY
55544: LIST
55545: LIST
55546: PUSH
55547: LD_INT 1
55549: PUSH
55550: LD_INT 1
55552: PUSH
55553: EMPTY
55554: LIST
55555: LIST
55556: PUSH
55557: LD_INT 0
55559: PUSH
55560: LD_INT 1
55562: PUSH
55563: EMPTY
55564: LIST
55565: LIST
55566: PUSH
55567: LD_INT 1
55569: NEG
55570: PUSH
55571: LD_INT 0
55573: PUSH
55574: EMPTY
55575: LIST
55576: LIST
55577: PUSH
55578: LD_INT 1
55580: NEG
55581: PUSH
55582: LD_INT 1
55584: NEG
55585: PUSH
55586: EMPTY
55587: LIST
55588: LIST
55589: PUSH
55590: LD_INT 1
55592: NEG
55593: PUSH
55594: LD_INT 2
55596: NEG
55597: PUSH
55598: EMPTY
55599: LIST
55600: LIST
55601: PUSH
55602: LD_INT 1
55604: PUSH
55605: LD_INT 1
55607: NEG
55608: PUSH
55609: EMPTY
55610: LIST
55611: LIST
55612: PUSH
55613: LD_INT 2
55615: PUSH
55616: LD_INT 0
55618: PUSH
55619: EMPTY
55620: LIST
55621: LIST
55622: PUSH
55623: LD_INT 2
55625: PUSH
55626: LD_INT 1
55628: PUSH
55629: EMPTY
55630: LIST
55631: LIST
55632: PUSH
55633: LD_INT 2
55635: PUSH
55636: LD_INT 2
55638: PUSH
55639: EMPTY
55640: LIST
55641: LIST
55642: PUSH
55643: LD_INT 1
55645: PUSH
55646: LD_INT 2
55648: PUSH
55649: EMPTY
55650: LIST
55651: LIST
55652: PUSH
55653: LD_INT 0
55655: PUSH
55656: LD_INT 2
55658: PUSH
55659: EMPTY
55660: LIST
55661: LIST
55662: PUSH
55663: LD_INT 1
55665: NEG
55666: PUSH
55667: LD_INT 1
55669: PUSH
55670: EMPTY
55671: LIST
55672: LIST
55673: PUSH
55674: LD_INT 2
55676: NEG
55677: PUSH
55678: LD_INT 1
55680: NEG
55681: PUSH
55682: EMPTY
55683: LIST
55684: LIST
55685: PUSH
55686: LD_INT 2
55688: NEG
55689: PUSH
55690: LD_INT 2
55692: NEG
55693: PUSH
55694: EMPTY
55695: LIST
55696: LIST
55697: PUSH
55698: LD_INT 2
55700: NEG
55701: PUSH
55702: LD_INT 3
55704: NEG
55705: PUSH
55706: EMPTY
55707: LIST
55708: LIST
55709: PUSH
55710: LD_INT 2
55712: PUSH
55713: LD_INT 1
55715: NEG
55716: PUSH
55717: EMPTY
55718: LIST
55719: LIST
55720: PUSH
55721: LD_INT 3
55723: PUSH
55724: LD_INT 1
55726: PUSH
55727: EMPTY
55728: LIST
55729: LIST
55730: PUSH
55731: LD_INT 1
55733: PUSH
55734: LD_INT 3
55736: PUSH
55737: EMPTY
55738: LIST
55739: LIST
55740: PUSH
55741: LD_INT 1
55743: NEG
55744: PUSH
55745: LD_INT 2
55747: PUSH
55748: EMPTY
55749: LIST
55750: LIST
55751: PUSH
55752: LD_INT 3
55754: NEG
55755: PUSH
55756: LD_INT 2
55758: NEG
55759: PUSH
55760: EMPTY
55761: LIST
55762: LIST
55763: PUSH
55764: EMPTY
55765: LIST
55766: LIST
55767: LIST
55768: LIST
55769: LIST
55770: LIST
55771: LIST
55772: LIST
55773: LIST
55774: LIST
55775: LIST
55776: LIST
55777: LIST
55778: LIST
55779: LIST
55780: LIST
55781: LIST
55782: LIST
55783: LIST
55784: LIST
55785: LIST
55786: LIST
55787: LIST
55788: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55789: LD_ADDR_VAR 0 32
55793: PUSH
55794: LD_INT 0
55796: PUSH
55797: LD_INT 0
55799: PUSH
55800: EMPTY
55801: LIST
55802: LIST
55803: PUSH
55804: LD_INT 0
55806: PUSH
55807: LD_INT 1
55809: NEG
55810: PUSH
55811: EMPTY
55812: LIST
55813: LIST
55814: PUSH
55815: LD_INT 1
55817: PUSH
55818: LD_INT 0
55820: PUSH
55821: EMPTY
55822: LIST
55823: LIST
55824: PUSH
55825: LD_INT 1
55827: PUSH
55828: LD_INT 1
55830: PUSH
55831: EMPTY
55832: LIST
55833: LIST
55834: PUSH
55835: LD_INT 0
55837: PUSH
55838: LD_INT 1
55840: PUSH
55841: EMPTY
55842: LIST
55843: LIST
55844: PUSH
55845: LD_INT 1
55847: NEG
55848: PUSH
55849: LD_INT 0
55851: PUSH
55852: EMPTY
55853: LIST
55854: LIST
55855: PUSH
55856: LD_INT 1
55858: NEG
55859: PUSH
55860: LD_INT 1
55862: NEG
55863: PUSH
55864: EMPTY
55865: LIST
55866: LIST
55867: PUSH
55868: LD_INT 1
55870: NEG
55871: PUSH
55872: LD_INT 2
55874: NEG
55875: PUSH
55876: EMPTY
55877: LIST
55878: LIST
55879: PUSH
55880: LD_INT 0
55882: PUSH
55883: LD_INT 2
55885: NEG
55886: PUSH
55887: EMPTY
55888: LIST
55889: LIST
55890: PUSH
55891: LD_INT 1
55893: PUSH
55894: LD_INT 1
55896: NEG
55897: PUSH
55898: EMPTY
55899: LIST
55900: LIST
55901: PUSH
55902: LD_INT 2
55904: PUSH
55905: LD_INT 1
55907: PUSH
55908: EMPTY
55909: LIST
55910: LIST
55911: PUSH
55912: LD_INT 2
55914: PUSH
55915: LD_INT 2
55917: PUSH
55918: EMPTY
55919: LIST
55920: LIST
55921: PUSH
55922: LD_INT 1
55924: PUSH
55925: LD_INT 2
55927: PUSH
55928: EMPTY
55929: LIST
55930: LIST
55931: PUSH
55932: LD_INT 0
55934: PUSH
55935: LD_INT 2
55937: PUSH
55938: EMPTY
55939: LIST
55940: LIST
55941: PUSH
55942: LD_INT 1
55944: NEG
55945: PUSH
55946: LD_INT 1
55948: PUSH
55949: EMPTY
55950: LIST
55951: LIST
55952: PUSH
55953: LD_INT 2
55955: NEG
55956: PUSH
55957: LD_INT 0
55959: PUSH
55960: EMPTY
55961: LIST
55962: LIST
55963: PUSH
55964: LD_INT 2
55966: NEG
55967: PUSH
55968: LD_INT 1
55970: NEG
55971: PUSH
55972: EMPTY
55973: LIST
55974: LIST
55975: PUSH
55976: LD_INT 1
55978: NEG
55979: PUSH
55980: LD_INT 3
55982: NEG
55983: PUSH
55984: EMPTY
55985: LIST
55986: LIST
55987: PUSH
55988: LD_INT 1
55990: PUSH
55991: LD_INT 2
55993: NEG
55994: PUSH
55995: EMPTY
55996: LIST
55997: LIST
55998: PUSH
55999: LD_INT 3
56001: PUSH
56002: LD_INT 2
56004: PUSH
56005: EMPTY
56006: LIST
56007: LIST
56008: PUSH
56009: LD_INT 2
56011: PUSH
56012: LD_INT 3
56014: PUSH
56015: EMPTY
56016: LIST
56017: LIST
56018: PUSH
56019: LD_INT 2
56021: NEG
56022: PUSH
56023: LD_INT 1
56025: PUSH
56026: EMPTY
56027: LIST
56028: LIST
56029: PUSH
56030: LD_INT 3
56032: NEG
56033: PUSH
56034: LD_INT 1
56036: NEG
56037: PUSH
56038: EMPTY
56039: LIST
56040: LIST
56041: PUSH
56042: EMPTY
56043: LIST
56044: LIST
56045: LIST
56046: LIST
56047: LIST
56048: LIST
56049: LIST
56050: LIST
56051: LIST
56052: LIST
56053: LIST
56054: LIST
56055: LIST
56056: LIST
56057: LIST
56058: LIST
56059: LIST
56060: LIST
56061: LIST
56062: LIST
56063: LIST
56064: LIST
56065: LIST
56066: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
56067: LD_ADDR_VAR 0 33
56071: PUSH
56072: LD_INT 0
56074: PUSH
56075: LD_INT 0
56077: PUSH
56078: EMPTY
56079: LIST
56080: LIST
56081: PUSH
56082: LD_INT 0
56084: PUSH
56085: LD_INT 1
56087: NEG
56088: PUSH
56089: EMPTY
56090: LIST
56091: LIST
56092: PUSH
56093: LD_INT 1
56095: PUSH
56096: LD_INT 0
56098: PUSH
56099: EMPTY
56100: LIST
56101: LIST
56102: PUSH
56103: LD_INT 1
56105: PUSH
56106: LD_INT 1
56108: PUSH
56109: EMPTY
56110: LIST
56111: LIST
56112: PUSH
56113: LD_INT 0
56115: PUSH
56116: LD_INT 1
56118: PUSH
56119: EMPTY
56120: LIST
56121: LIST
56122: PUSH
56123: LD_INT 1
56125: NEG
56126: PUSH
56127: LD_INT 0
56129: PUSH
56130: EMPTY
56131: LIST
56132: LIST
56133: PUSH
56134: LD_INT 1
56136: NEG
56137: PUSH
56138: LD_INT 1
56140: NEG
56141: PUSH
56142: EMPTY
56143: LIST
56144: LIST
56145: PUSH
56146: LD_INT 1
56148: NEG
56149: PUSH
56150: LD_INT 2
56152: NEG
56153: PUSH
56154: EMPTY
56155: LIST
56156: LIST
56157: PUSH
56158: LD_INT 1
56160: PUSH
56161: LD_INT 1
56163: NEG
56164: PUSH
56165: EMPTY
56166: LIST
56167: LIST
56168: PUSH
56169: LD_INT 2
56171: PUSH
56172: LD_INT 0
56174: PUSH
56175: EMPTY
56176: LIST
56177: LIST
56178: PUSH
56179: LD_INT 2
56181: PUSH
56182: LD_INT 1
56184: PUSH
56185: EMPTY
56186: LIST
56187: LIST
56188: PUSH
56189: LD_INT 1
56191: PUSH
56192: LD_INT 2
56194: PUSH
56195: EMPTY
56196: LIST
56197: LIST
56198: PUSH
56199: LD_INT 0
56201: PUSH
56202: LD_INT 2
56204: PUSH
56205: EMPTY
56206: LIST
56207: LIST
56208: PUSH
56209: LD_INT 1
56211: NEG
56212: PUSH
56213: LD_INT 1
56215: PUSH
56216: EMPTY
56217: LIST
56218: LIST
56219: PUSH
56220: LD_INT 2
56222: NEG
56223: PUSH
56224: LD_INT 0
56226: PUSH
56227: EMPTY
56228: LIST
56229: LIST
56230: PUSH
56231: LD_INT 2
56233: NEG
56234: PUSH
56235: LD_INT 1
56237: NEG
56238: PUSH
56239: EMPTY
56240: LIST
56241: LIST
56242: PUSH
56243: LD_INT 2
56245: NEG
56246: PUSH
56247: LD_INT 2
56249: NEG
56250: PUSH
56251: EMPTY
56252: LIST
56253: LIST
56254: PUSH
56255: LD_INT 2
56257: NEG
56258: PUSH
56259: LD_INT 3
56261: NEG
56262: PUSH
56263: EMPTY
56264: LIST
56265: LIST
56266: PUSH
56267: LD_INT 2
56269: PUSH
56270: LD_INT 1
56272: NEG
56273: PUSH
56274: EMPTY
56275: LIST
56276: LIST
56277: PUSH
56278: LD_INT 3
56280: PUSH
56281: LD_INT 1
56283: PUSH
56284: EMPTY
56285: LIST
56286: LIST
56287: PUSH
56288: LD_INT 1
56290: PUSH
56291: LD_INT 3
56293: PUSH
56294: EMPTY
56295: LIST
56296: LIST
56297: PUSH
56298: LD_INT 1
56300: NEG
56301: PUSH
56302: LD_INT 2
56304: PUSH
56305: EMPTY
56306: LIST
56307: LIST
56308: PUSH
56309: LD_INT 3
56311: NEG
56312: PUSH
56313: LD_INT 2
56315: NEG
56316: PUSH
56317: EMPTY
56318: LIST
56319: LIST
56320: PUSH
56321: EMPTY
56322: LIST
56323: LIST
56324: LIST
56325: LIST
56326: LIST
56327: LIST
56328: LIST
56329: LIST
56330: LIST
56331: LIST
56332: LIST
56333: LIST
56334: LIST
56335: LIST
56336: LIST
56337: LIST
56338: LIST
56339: LIST
56340: LIST
56341: LIST
56342: LIST
56343: LIST
56344: LIST
56345: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56346: LD_ADDR_VAR 0 34
56350: PUSH
56351: LD_INT 0
56353: PUSH
56354: LD_INT 0
56356: PUSH
56357: EMPTY
56358: LIST
56359: LIST
56360: PUSH
56361: LD_INT 0
56363: PUSH
56364: LD_INT 1
56366: NEG
56367: PUSH
56368: EMPTY
56369: LIST
56370: LIST
56371: PUSH
56372: LD_INT 1
56374: PUSH
56375: LD_INT 0
56377: PUSH
56378: EMPTY
56379: LIST
56380: LIST
56381: PUSH
56382: LD_INT 1
56384: PUSH
56385: LD_INT 1
56387: PUSH
56388: EMPTY
56389: LIST
56390: LIST
56391: PUSH
56392: LD_INT 0
56394: PUSH
56395: LD_INT 1
56397: PUSH
56398: EMPTY
56399: LIST
56400: LIST
56401: PUSH
56402: LD_INT 1
56404: NEG
56405: PUSH
56406: LD_INT 0
56408: PUSH
56409: EMPTY
56410: LIST
56411: LIST
56412: PUSH
56413: LD_INT 1
56415: NEG
56416: PUSH
56417: LD_INT 1
56419: NEG
56420: PUSH
56421: EMPTY
56422: LIST
56423: LIST
56424: PUSH
56425: LD_INT 1
56427: NEG
56428: PUSH
56429: LD_INT 2
56431: NEG
56432: PUSH
56433: EMPTY
56434: LIST
56435: LIST
56436: PUSH
56437: LD_INT 0
56439: PUSH
56440: LD_INT 2
56442: NEG
56443: PUSH
56444: EMPTY
56445: LIST
56446: LIST
56447: PUSH
56448: LD_INT 1
56450: PUSH
56451: LD_INT 1
56453: NEG
56454: PUSH
56455: EMPTY
56456: LIST
56457: LIST
56458: PUSH
56459: LD_INT 2
56461: PUSH
56462: LD_INT 1
56464: PUSH
56465: EMPTY
56466: LIST
56467: LIST
56468: PUSH
56469: LD_INT 2
56471: PUSH
56472: LD_INT 2
56474: PUSH
56475: EMPTY
56476: LIST
56477: LIST
56478: PUSH
56479: LD_INT 1
56481: PUSH
56482: LD_INT 2
56484: PUSH
56485: EMPTY
56486: LIST
56487: LIST
56488: PUSH
56489: LD_INT 1
56491: NEG
56492: PUSH
56493: LD_INT 1
56495: PUSH
56496: EMPTY
56497: LIST
56498: LIST
56499: PUSH
56500: LD_INT 2
56502: NEG
56503: PUSH
56504: LD_INT 0
56506: PUSH
56507: EMPTY
56508: LIST
56509: LIST
56510: PUSH
56511: LD_INT 2
56513: NEG
56514: PUSH
56515: LD_INT 1
56517: NEG
56518: PUSH
56519: EMPTY
56520: LIST
56521: LIST
56522: PUSH
56523: LD_INT 2
56525: NEG
56526: PUSH
56527: LD_INT 2
56529: NEG
56530: PUSH
56531: EMPTY
56532: LIST
56533: LIST
56534: PUSH
56535: LD_INT 1
56537: NEG
56538: PUSH
56539: LD_INT 3
56541: NEG
56542: PUSH
56543: EMPTY
56544: LIST
56545: LIST
56546: PUSH
56547: LD_INT 1
56549: PUSH
56550: LD_INT 2
56552: NEG
56553: PUSH
56554: EMPTY
56555: LIST
56556: LIST
56557: PUSH
56558: LD_INT 3
56560: PUSH
56561: LD_INT 2
56563: PUSH
56564: EMPTY
56565: LIST
56566: LIST
56567: PUSH
56568: LD_INT 2
56570: PUSH
56571: LD_INT 3
56573: PUSH
56574: EMPTY
56575: LIST
56576: LIST
56577: PUSH
56578: LD_INT 2
56580: NEG
56581: PUSH
56582: LD_INT 1
56584: PUSH
56585: EMPTY
56586: LIST
56587: LIST
56588: PUSH
56589: LD_INT 3
56591: NEG
56592: PUSH
56593: LD_INT 1
56595: NEG
56596: PUSH
56597: EMPTY
56598: LIST
56599: LIST
56600: PUSH
56601: EMPTY
56602: LIST
56603: LIST
56604: LIST
56605: LIST
56606: LIST
56607: LIST
56608: LIST
56609: LIST
56610: LIST
56611: LIST
56612: LIST
56613: LIST
56614: LIST
56615: LIST
56616: LIST
56617: LIST
56618: LIST
56619: LIST
56620: LIST
56621: LIST
56622: LIST
56623: LIST
56624: LIST
56625: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
56626: LD_ADDR_VAR 0 35
56630: PUSH
56631: LD_INT 0
56633: PUSH
56634: LD_INT 0
56636: PUSH
56637: EMPTY
56638: LIST
56639: LIST
56640: PUSH
56641: LD_INT 0
56643: PUSH
56644: LD_INT 1
56646: NEG
56647: PUSH
56648: EMPTY
56649: LIST
56650: LIST
56651: PUSH
56652: LD_INT 1
56654: PUSH
56655: LD_INT 0
56657: PUSH
56658: EMPTY
56659: LIST
56660: LIST
56661: PUSH
56662: LD_INT 1
56664: PUSH
56665: LD_INT 1
56667: PUSH
56668: EMPTY
56669: LIST
56670: LIST
56671: PUSH
56672: LD_INT 0
56674: PUSH
56675: LD_INT 1
56677: PUSH
56678: EMPTY
56679: LIST
56680: LIST
56681: PUSH
56682: LD_INT 1
56684: NEG
56685: PUSH
56686: LD_INT 0
56688: PUSH
56689: EMPTY
56690: LIST
56691: LIST
56692: PUSH
56693: LD_INT 1
56695: NEG
56696: PUSH
56697: LD_INT 1
56699: NEG
56700: PUSH
56701: EMPTY
56702: LIST
56703: LIST
56704: PUSH
56705: LD_INT 2
56707: PUSH
56708: LD_INT 1
56710: PUSH
56711: EMPTY
56712: LIST
56713: LIST
56714: PUSH
56715: LD_INT 2
56717: NEG
56718: PUSH
56719: LD_INT 1
56721: NEG
56722: PUSH
56723: EMPTY
56724: LIST
56725: LIST
56726: PUSH
56727: EMPTY
56728: LIST
56729: LIST
56730: LIST
56731: LIST
56732: LIST
56733: LIST
56734: LIST
56735: LIST
56736: LIST
56737: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
56738: LD_ADDR_VAR 0 36
56742: PUSH
56743: LD_INT 0
56745: PUSH
56746: LD_INT 0
56748: PUSH
56749: EMPTY
56750: LIST
56751: LIST
56752: PUSH
56753: LD_INT 0
56755: PUSH
56756: LD_INT 1
56758: NEG
56759: PUSH
56760: EMPTY
56761: LIST
56762: LIST
56763: PUSH
56764: LD_INT 1
56766: PUSH
56767: LD_INT 0
56769: PUSH
56770: EMPTY
56771: LIST
56772: LIST
56773: PUSH
56774: LD_INT 1
56776: PUSH
56777: LD_INT 1
56779: PUSH
56780: EMPTY
56781: LIST
56782: LIST
56783: PUSH
56784: LD_INT 0
56786: PUSH
56787: LD_INT 1
56789: PUSH
56790: EMPTY
56791: LIST
56792: LIST
56793: PUSH
56794: LD_INT 1
56796: NEG
56797: PUSH
56798: LD_INT 0
56800: PUSH
56801: EMPTY
56802: LIST
56803: LIST
56804: PUSH
56805: LD_INT 1
56807: NEG
56808: PUSH
56809: LD_INT 1
56811: NEG
56812: PUSH
56813: EMPTY
56814: LIST
56815: LIST
56816: PUSH
56817: LD_INT 1
56819: NEG
56820: PUSH
56821: LD_INT 2
56823: NEG
56824: PUSH
56825: EMPTY
56826: LIST
56827: LIST
56828: PUSH
56829: LD_INT 1
56831: PUSH
56832: LD_INT 2
56834: PUSH
56835: EMPTY
56836: LIST
56837: LIST
56838: PUSH
56839: EMPTY
56840: LIST
56841: LIST
56842: LIST
56843: LIST
56844: LIST
56845: LIST
56846: LIST
56847: LIST
56848: LIST
56849: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
56850: LD_ADDR_VAR 0 37
56854: PUSH
56855: LD_INT 0
56857: PUSH
56858: LD_INT 0
56860: PUSH
56861: EMPTY
56862: LIST
56863: LIST
56864: PUSH
56865: LD_INT 0
56867: PUSH
56868: LD_INT 1
56870: NEG
56871: PUSH
56872: EMPTY
56873: LIST
56874: LIST
56875: PUSH
56876: LD_INT 1
56878: PUSH
56879: LD_INT 0
56881: PUSH
56882: EMPTY
56883: LIST
56884: LIST
56885: PUSH
56886: LD_INT 1
56888: PUSH
56889: LD_INT 1
56891: PUSH
56892: EMPTY
56893: LIST
56894: LIST
56895: PUSH
56896: LD_INT 0
56898: PUSH
56899: LD_INT 1
56901: PUSH
56902: EMPTY
56903: LIST
56904: LIST
56905: PUSH
56906: LD_INT 1
56908: NEG
56909: PUSH
56910: LD_INT 0
56912: PUSH
56913: EMPTY
56914: LIST
56915: LIST
56916: PUSH
56917: LD_INT 1
56919: NEG
56920: PUSH
56921: LD_INT 1
56923: NEG
56924: PUSH
56925: EMPTY
56926: LIST
56927: LIST
56928: PUSH
56929: LD_INT 1
56931: PUSH
56932: LD_INT 1
56934: NEG
56935: PUSH
56936: EMPTY
56937: LIST
56938: LIST
56939: PUSH
56940: LD_INT 1
56942: NEG
56943: PUSH
56944: LD_INT 1
56946: PUSH
56947: EMPTY
56948: LIST
56949: LIST
56950: PUSH
56951: EMPTY
56952: LIST
56953: LIST
56954: LIST
56955: LIST
56956: LIST
56957: LIST
56958: LIST
56959: LIST
56960: LIST
56961: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
56962: LD_ADDR_VAR 0 38
56966: PUSH
56967: LD_INT 0
56969: PUSH
56970: LD_INT 0
56972: PUSH
56973: EMPTY
56974: LIST
56975: LIST
56976: PUSH
56977: LD_INT 0
56979: PUSH
56980: LD_INT 1
56982: NEG
56983: PUSH
56984: EMPTY
56985: LIST
56986: LIST
56987: PUSH
56988: LD_INT 1
56990: PUSH
56991: LD_INT 0
56993: PUSH
56994: EMPTY
56995: LIST
56996: LIST
56997: PUSH
56998: LD_INT 1
57000: PUSH
57001: LD_INT 1
57003: PUSH
57004: EMPTY
57005: LIST
57006: LIST
57007: PUSH
57008: LD_INT 0
57010: PUSH
57011: LD_INT 1
57013: PUSH
57014: EMPTY
57015: LIST
57016: LIST
57017: PUSH
57018: LD_INT 1
57020: NEG
57021: PUSH
57022: LD_INT 0
57024: PUSH
57025: EMPTY
57026: LIST
57027: LIST
57028: PUSH
57029: LD_INT 1
57031: NEG
57032: PUSH
57033: LD_INT 1
57035: NEG
57036: PUSH
57037: EMPTY
57038: LIST
57039: LIST
57040: PUSH
57041: LD_INT 2
57043: PUSH
57044: LD_INT 1
57046: PUSH
57047: EMPTY
57048: LIST
57049: LIST
57050: PUSH
57051: LD_INT 2
57053: NEG
57054: PUSH
57055: LD_INT 1
57057: NEG
57058: PUSH
57059: EMPTY
57060: LIST
57061: LIST
57062: PUSH
57063: EMPTY
57064: LIST
57065: LIST
57066: LIST
57067: LIST
57068: LIST
57069: LIST
57070: LIST
57071: LIST
57072: LIST
57073: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
57074: LD_ADDR_VAR 0 39
57078: PUSH
57079: LD_INT 0
57081: PUSH
57082: LD_INT 0
57084: PUSH
57085: EMPTY
57086: LIST
57087: LIST
57088: PUSH
57089: LD_INT 0
57091: PUSH
57092: LD_INT 1
57094: NEG
57095: PUSH
57096: EMPTY
57097: LIST
57098: LIST
57099: PUSH
57100: LD_INT 1
57102: PUSH
57103: LD_INT 0
57105: PUSH
57106: EMPTY
57107: LIST
57108: LIST
57109: PUSH
57110: LD_INT 1
57112: PUSH
57113: LD_INT 1
57115: PUSH
57116: EMPTY
57117: LIST
57118: LIST
57119: PUSH
57120: LD_INT 0
57122: PUSH
57123: LD_INT 1
57125: PUSH
57126: EMPTY
57127: LIST
57128: LIST
57129: PUSH
57130: LD_INT 1
57132: NEG
57133: PUSH
57134: LD_INT 0
57136: PUSH
57137: EMPTY
57138: LIST
57139: LIST
57140: PUSH
57141: LD_INT 1
57143: NEG
57144: PUSH
57145: LD_INT 1
57147: NEG
57148: PUSH
57149: EMPTY
57150: LIST
57151: LIST
57152: PUSH
57153: LD_INT 1
57155: NEG
57156: PUSH
57157: LD_INT 2
57159: NEG
57160: PUSH
57161: EMPTY
57162: LIST
57163: LIST
57164: PUSH
57165: LD_INT 1
57167: PUSH
57168: LD_INT 2
57170: PUSH
57171: EMPTY
57172: LIST
57173: LIST
57174: PUSH
57175: EMPTY
57176: LIST
57177: LIST
57178: LIST
57179: LIST
57180: LIST
57181: LIST
57182: LIST
57183: LIST
57184: LIST
57185: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
57186: LD_ADDR_VAR 0 40
57190: PUSH
57191: LD_INT 0
57193: PUSH
57194: LD_INT 0
57196: PUSH
57197: EMPTY
57198: LIST
57199: LIST
57200: PUSH
57201: LD_INT 0
57203: PUSH
57204: LD_INT 1
57206: NEG
57207: PUSH
57208: EMPTY
57209: LIST
57210: LIST
57211: PUSH
57212: LD_INT 1
57214: PUSH
57215: LD_INT 0
57217: PUSH
57218: EMPTY
57219: LIST
57220: LIST
57221: PUSH
57222: LD_INT 1
57224: PUSH
57225: LD_INT 1
57227: PUSH
57228: EMPTY
57229: LIST
57230: LIST
57231: PUSH
57232: LD_INT 0
57234: PUSH
57235: LD_INT 1
57237: PUSH
57238: EMPTY
57239: LIST
57240: LIST
57241: PUSH
57242: LD_INT 1
57244: NEG
57245: PUSH
57246: LD_INT 0
57248: PUSH
57249: EMPTY
57250: LIST
57251: LIST
57252: PUSH
57253: LD_INT 1
57255: NEG
57256: PUSH
57257: LD_INT 1
57259: NEG
57260: PUSH
57261: EMPTY
57262: LIST
57263: LIST
57264: PUSH
57265: LD_INT 1
57267: PUSH
57268: LD_INT 1
57270: NEG
57271: PUSH
57272: EMPTY
57273: LIST
57274: LIST
57275: PUSH
57276: LD_INT 1
57278: NEG
57279: PUSH
57280: LD_INT 1
57282: PUSH
57283: EMPTY
57284: LIST
57285: LIST
57286: PUSH
57287: EMPTY
57288: LIST
57289: LIST
57290: LIST
57291: LIST
57292: LIST
57293: LIST
57294: LIST
57295: LIST
57296: LIST
57297: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57298: LD_ADDR_VAR 0 41
57302: PUSH
57303: LD_INT 0
57305: PUSH
57306: LD_INT 0
57308: PUSH
57309: EMPTY
57310: LIST
57311: LIST
57312: PUSH
57313: LD_INT 0
57315: PUSH
57316: LD_INT 1
57318: NEG
57319: PUSH
57320: EMPTY
57321: LIST
57322: LIST
57323: PUSH
57324: LD_INT 1
57326: PUSH
57327: LD_INT 0
57329: PUSH
57330: EMPTY
57331: LIST
57332: LIST
57333: PUSH
57334: LD_INT 1
57336: PUSH
57337: LD_INT 1
57339: PUSH
57340: EMPTY
57341: LIST
57342: LIST
57343: PUSH
57344: LD_INT 0
57346: PUSH
57347: LD_INT 1
57349: PUSH
57350: EMPTY
57351: LIST
57352: LIST
57353: PUSH
57354: LD_INT 1
57356: NEG
57357: PUSH
57358: LD_INT 0
57360: PUSH
57361: EMPTY
57362: LIST
57363: LIST
57364: PUSH
57365: LD_INT 1
57367: NEG
57368: PUSH
57369: LD_INT 1
57371: NEG
57372: PUSH
57373: EMPTY
57374: LIST
57375: LIST
57376: PUSH
57377: LD_INT 1
57379: NEG
57380: PUSH
57381: LD_INT 2
57383: NEG
57384: PUSH
57385: EMPTY
57386: LIST
57387: LIST
57388: PUSH
57389: LD_INT 1
57391: PUSH
57392: LD_INT 1
57394: NEG
57395: PUSH
57396: EMPTY
57397: LIST
57398: LIST
57399: PUSH
57400: LD_INT 2
57402: PUSH
57403: LD_INT 0
57405: PUSH
57406: EMPTY
57407: LIST
57408: LIST
57409: PUSH
57410: LD_INT 2
57412: PUSH
57413: LD_INT 1
57415: PUSH
57416: EMPTY
57417: LIST
57418: LIST
57419: PUSH
57420: LD_INT 2
57422: PUSH
57423: LD_INT 2
57425: PUSH
57426: EMPTY
57427: LIST
57428: LIST
57429: PUSH
57430: LD_INT 1
57432: PUSH
57433: LD_INT 2
57435: PUSH
57436: EMPTY
57437: LIST
57438: LIST
57439: PUSH
57440: LD_INT 1
57442: NEG
57443: PUSH
57444: LD_INT 1
57446: PUSH
57447: EMPTY
57448: LIST
57449: LIST
57450: PUSH
57451: LD_INT 2
57453: NEG
57454: PUSH
57455: LD_INT 0
57457: PUSH
57458: EMPTY
57459: LIST
57460: LIST
57461: PUSH
57462: LD_INT 2
57464: NEG
57465: PUSH
57466: LD_INT 1
57468: NEG
57469: PUSH
57470: EMPTY
57471: LIST
57472: LIST
57473: PUSH
57474: LD_INT 2
57476: NEG
57477: PUSH
57478: LD_INT 2
57480: NEG
57481: PUSH
57482: EMPTY
57483: LIST
57484: LIST
57485: PUSH
57486: LD_INT 2
57488: NEG
57489: PUSH
57490: LD_INT 3
57492: NEG
57493: PUSH
57494: EMPTY
57495: LIST
57496: LIST
57497: PUSH
57498: LD_INT 2
57500: PUSH
57501: LD_INT 1
57503: NEG
57504: PUSH
57505: EMPTY
57506: LIST
57507: LIST
57508: PUSH
57509: LD_INT 3
57511: PUSH
57512: LD_INT 0
57514: PUSH
57515: EMPTY
57516: LIST
57517: LIST
57518: PUSH
57519: LD_INT 3
57521: PUSH
57522: LD_INT 1
57524: PUSH
57525: EMPTY
57526: LIST
57527: LIST
57528: PUSH
57529: LD_INT 3
57531: PUSH
57532: LD_INT 2
57534: PUSH
57535: EMPTY
57536: LIST
57537: LIST
57538: PUSH
57539: LD_INT 3
57541: PUSH
57542: LD_INT 3
57544: PUSH
57545: EMPTY
57546: LIST
57547: LIST
57548: PUSH
57549: LD_INT 2
57551: PUSH
57552: LD_INT 3
57554: PUSH
57555: EMPTY
57556: LIST
57557: LIST
57558: PUSH
57559: LD_INT 2
57561: NEG
57562: PUSH
57563: LD_INT 1
57565: PUSH
57566: EMPTY
57567: LIST
57568: LIST
57569: PUSH
57570: LD_INT 3
57572: NEG
57573: PUSH
57574: LD_INT 0
57576: PUSH
57577: EMPTY
57578: LIST
57579: LIST
57580: PUSH
57581: LD_INT 3
57583: NEG
57584: PUSH
57585: LD_INT 1
57587: NEG
57588: PUSH
57589: EMPTY
57590: LIST
57591: LIST
57592: PUSH
57593: LD_INT 3
57595: NEG
57596: PUSH
57597: LD_INT 2
57599: NEG
57600: PUSH
57601: EMPTY
57602: LIST
57603: LIST
57604: PUSH
57605: LD_INT 3
57607: NEG
57608: PUSH
57609: LD_INT 3
57611: NEG
57612: PUSH
57613: EMPTY
57614: LIST
57615: LIST
57616: PUSH
57617: EMPTY
57618: LIST
57619: LIST
57620: LIST
57621: LIST
57622: LIST
57623: LIST
57624: LIST
57625: LIST
57626: LIST
57627: LIST
57628: LIST
57629: LIST
57630: LIST
57631: LIST
57632: LIST
57633: LIST
57634: LIST
57635: LIST
57636: LIST
57637: LIST
57638: LIST
57639: LIST
57640: LIST
57641: LIST
57642: LIST
57643: LIST
57644: LIST
57645: LIST
57646: LIST
57647: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57648: LD_ADDR_VAR 0 42
57652: PUSH
57653: LD_INT 0
57655: PUSH
57656: LD_INT 0
57658: PUSH
57659: EMPTY
57660: LIST
57661: LIST
57662: PUSH
57663: LD_INT 0
57665: PUSH
57666: LD_INT 1
57668: NEG
57669: PUSH
57670: EMPTY
57671: LIST
57672: LIST
57673: PUSH
57674: LD_INT 1
57676: PUSH
57677: LD_INT 0
57679: PUSH
57680: EMPTY
57681: LIST
57682: LIST
57683: PUSH
57684: LD_INT 1
57686: PUSH
57687: LD_INT 1
57689: PUSH
57690: EMPTY
57691: LIST
57692: LIST
57693: PUSH
57694: LD_INT 0
57696: PUSH
57697: LD_INT 1
57699: PUSH
57700: EMPTY
57701: LIST
57702: LIST
57703: PUSH
57704: LD_INT 1
57706: NEG
57707: PUSH
57708: LD_INT 0
57710: PUSH
57711: EMPTY
57712: LIST
57713: LIST
57714: PUSH
57715: LD_INT 1
57717: NEG
57718: PUSH
57719: LD_INT 1
57721: NEG
57722: PUSH
57723: EMPTY
57724: LIST
57725: LIST
57726: PUSH
57727: LD_INT 1
57729: NEG
57730: PUSH
57731: LD_INT 2
57733: NEG
57734: PUSH
57735: EMPTY
57736: LIST
57737: LIST
57738: PUSH
57739: LD_INT 0
57741: PUSH
57742: LD_INT 2
57744: NEG
57745: PUSH
57746: EMPTY
57747: LIST
57748: LIST
57749: PUSH
57750: LD_INT 1
57752: PUSH
57753: LD_INT 1
57755: NEG
57756: PUSH
57757: EMPTY
57758: LIST
57759: LIST
57760: PUSH
57761: LD_INT 2
57763: PUSH
57764: LD_INT 1
57766: PUSH
57767: EMPTY
57768: LIST
57769: LIST
57770: PUSH
57771: LD_INT 2
57773: PUSH
57774: LD_INT 2
57776: PUSH
57777: EMPTY
57778: LIST
57779: LIST
57780: PUSH
57781: LD_INT 1
57783: PUSH
57784: LD_INT 2
57786: PUSH
57787: EMPTY
57788: LIST
57789: LIST
57790: PUSH
57791: LD_INT 0
57793: PUSH
57794: LD_INT 2
57796: PUSH
57797: EMPTY
57798: LIST
57799: LIST
57800: PUSH
57801: LD_INT 1
57803: NEG
57804: PUSH
57805: LD_INT 1
57807: PUSH
57808: EMPTY
57809: LIST
57810: LIST
57811: PUSH
57812: LD_INT 2
57814: NEG
57815: PUSH
57816: LD_INT 1
57818: NEG
57819: PUSH
57820: EMPTY
57821: LIST
57822: LIST
57823: PUSH
57824: LD_INT 2
57826: NEG
57827: PUSH
57828: LD_INT 2
57830: NEG
57831: PUSH
57832: EMPTY
57833: LIST
57834: LIST
57835: PUSH
57836: LD_INT 2
57838: NEG
57839: PUSH
57840: LD_INT 3
57842: NEG
57843: PUSH
57844: EMPTY
57845: LIST
57846: LIST
57847: PUSH
57848: LD_INT 1
57850: NEG
57851: PUSH
57852: LD_INT 3
57854: NEG
57855: PUSH
57856: EMPTY
57857: LIST
57858: LIST
57859: PUSH
57860: LD_INT 0
57862: PUSH
57863: LD_INT 3
57865: NEG
57866: PUSH
57867: EMPTY
57868: LIST
57869: LIST
57870: PUSH
57871: LD_INT 1
57873: PUSH
57874: LD_INT 2
57876: NEG
57877: PUSH
57878: EMPTY
57879: LIST
57880: LIST
57881: PUSH
57882: LD_INT 3
57884: PUSH
57885: LD_INT 2
57887: PUSH
57888: EMPTY
57889: LIST
57890: LIST
57891: PUSH
57892: LD_INT 3
57894: PUSH
57895: LD_INT 3
57897: PUSH
57898: EMPTY
57899: LIST
57900: LIST
57901: PUSH
57902: LD_INT 2
57904: PUSH
57905: LD_INT 3
57907: PUSH
57908: EMPTY
57909: LIST
57910: LIST
57911: PUSH
57912: LD_INT 1
57914: PUSH
57915: LD_INT 3
57917: PUSH
57918: EMPTY
57919: LIST
57920: LIST
57921: PUSH
57922: LD_INT 0
57924: PUSH
57925: LD_INT 3
57927: PUSH
57928: EMPTY
57929: LIST
57930: LIST
57931: PUSH
57932: LD_INT 1
57934: NEG
57935: PUSH
57936: LD_INT 2
57938: PUSH
57939: EMPTY
57940: LIST
57941: LIST
57942: PUSH
57943: LD_INT 3
57945: NEG
57946: PUSH
57947: LD_INT 2
57949: NEG
57950: PUSH
57951: EMPTY
57952: LIST
57953: LIST
57954: PUSH
57955: LD_INT 3
57957: NEG
57958: PUSH
57959: LD_INT 3
57961: NEG
57962: PUSH
57963: EMPTY
57964: LIST
57965: LIST
57966: PUSH
57967: EMPTY
57968: LIST
57969: LIST
57970: LIST
57971: LIST
57972: LIST
57973: LIST
57974: LIST
57975: LIST
57976: LIST
57977: LIST
57978: LIST
57979: LIST
57980: LIST
57981: LIST
57982: LIST
57983: LIST
57984: LIST
57985: LIST
57986: LIST
57987: LIST
57988: LIST
57989: LIST
57990: LIST
57991: LIST
57992: LIST
57993: LIST
57994: LIST
57995: LIST
57996: LIST
57997: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57998: LD_ADDR_VAR 0 43
58002: PUSH
58003: LD_INT 0
58005: PUSH
58006: LD_INT 0
58008: PUSH
58009: EMPTY
58010: LIST
58011: LIST
58012: PUSH
58013: LD_INT 0
58015: PUSH
58016: LD_INT 1
58018: NEG
58019: PUSH
58020: EMPTY
58021: LIST
58022: LIST
58023: PUSH
58024: LD_INT 1
58026: PUSH
58027: LD_INT 0
58029: PUSH
58030: EMPTY
58031: LIST
58032: LIST
58033: PUSH
58034: LD_INT 1
58036: PUSH
58037: LD_INT 1
58039: PUSH
58040: EMPTY
58041: LIST
58042: LIST
58043: PUSH
58044: LD_INT 0
58046: PUSH
58047: LD_INT 1
58049: PUSH
58050: EMPTY
58051: LIST
58052: LIST
58053: PUSH
58054: LD_INT 1
58056: NEG
58057: PUSH
58058: LD_INT 0
58060: PUSH
58061: EMPTY
58062: LIST
58063: LIST
58064: PUSH
58065: LD_INT 1
58067: NEG
58068: PUSH
58069: LD_INT 1
58071: NEG
58072: PUSH
58073: EMPTY
58074: LIST
58075: LIST
58076: PUSH
58077: LD_INT 1
58079: NEG
58080: PUSH
58081: LD_INT 2
58083: NEG
58084: PUSH
58085: EMPTY
58086: LIST
58087: LIST
58088: PUSH
58089: LD_INT 0
58091: PUSH
58092: LD_INT 2
58094: NEG
58095: PUSH
58096: EMPTY
58097: LIST
58098: LIST
58099: PUSH
58100: LD_INT 1
58102: PUSH
58103: LD_INT 1
58105: NEG
58106: PUSH
58107: EMPTY
58108: LIST
58109: LIST
58110: PUSH
58111: LD_INT 2
58113: PUSH
58114: LD_INT 0
58116: PUSH
58117: EMPTY
58118: LIST
58119: LIST
58120: PUSH
58121: LD_INT 2
58123: PUSH
58124: LD_INT 1
58126: PUSH
58127: EMPTY
58128: LIST
58129: LIST
58130: PUSH
58131: LD_INT 1
58133: PUSH
58134: LD_INT 2
58136: PUSH
58137: EMPTY
58138: LIST
58139: LIST
58140: PUSH
58141: LD_INT 0
58143: PUSH
58144: LD_INT 2
58146: PUSH
58147: EMPTY
58148: LIST
58149: LIST
58150: PUSH
58151: LD_INT 1
58153: NEG
58154: PUSH
58155: LD_INT 1
58157: PUSH
58158: EMPTY
58159: LIST
58160: LIST
58161: PUSH
58162: LD_INT 2
58164: NEG
58165: PUSH
58166: LD_INT 0
58168: PUSH
58169: EMPTY
58170: LIST
58171: LIST
58172: PUSH
58173: LD_INT 2
58175: NEG
58176: PUSH
58177: LD_INT 1
58179: NEG
58180: PUSH
58181: EMPTY
58182: LIST
58183: LIST
58184: PUSH
58185: LD_INT 1
58187: NEG
58188: PUSH
58189: LD_INT 3
58191: NEG
58192: PUSH
58193: EMPTY
58194: LIST
58195: LIST
58196: PUSH
58197: LD_INT 0
58199: PUSH
58200: LD_INT 3
58202: NEG
58203: PUSH
58204: EMPTY
58205: LIST
58206: LIST
58207: PUSH
58208: LD_INT 1
58210: PUSH
58211: LD_INT 2
58213: NEG
58214: PUSH
58215: EMPTY
58216: LIST
58217: LIST
58218: PUSH
58219: LD_INT 2
58221: PUSH
58222: LD_INT 1
58224: NEG
58225: PUSH
58226: EMPTY
58227: LIST
58228: LIST
58229: PUSH
58230: LD_INT 3
58232: PUSH
58233: LD_INT 0
58235: PUSH
58236: EMPTY
58237: LIST
58238: LIST
58239: PUSH
58240: LD_INT 3
58242: PUSH
58243: LD_INT 1
58245: PUSH
58246: EMPTY
58247: LIST
58248: LIST
58249: PUSH
58250: LD_INT 1
58252: PUSH
58253: LD_INT 3
58255: PUSH
58256: EMPTY
58257: LIST
58258: LIST
58259: PUSH
58260: LD_INT 0
58262: PUSH
58263: LD_INT 3
58265: PUSH
58266: EMPTY
58267: LIST
58268: LIST
58269: PUSH
58270: LD_INT 1
58272: NEG
58273: PUSH
58274: LD_INT 2
58276: PUSH
58277: EMPTY
58278: LIST
58279: LIST
58280: PUSH
58281: LD_INT 2
58283: NEG
58284: PUSH
58285: LD_INT 1
58287: PUSH
58288: EMPTY
58289: LIST
58290: LIST
58291: PUSH
58292: LD_INT 3
58294: NEG
58295: PUSH
58296: LD_INT 0
58298: PUSH
58299: EMPTY
58300: LIST
58301: LIST
58302: PUSH
58303: LD_INT 3
58305: NEG
58306: PUSH
58307: LD_INT 1
58309: NEG
58310: PUSH
58311: EMPTY
58312: LIST
58313: LIST
58314: PUSH
58315: EMPTY
58316: LIST
58317: LIST
58318: LIST
58319: LIST
58320: LIST
58321: LIST
58322: LIST
58323: LIST
58324: LIST
58325: LIST
58326: LIST
58327: LIST
58328: LIST
58329: LIST
58330: LIST
58331: LIST
58332: LIST
58333: LIST
58334: LIST
58335: LIST
58336: LIST
58337: LIST
58338: LIST
58339: LIST
58340: LIST
58341: LIST
58342: LIST
58343: LIST
58344: LIST
58345: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58346: LD_ADDR_VAR 0 44
58350: PUSH
58351: LD_INT 0
58353: PUSH
58354: LD_INT 0
58356: PUSH
58357: EMPTY
58358: LIST
58359: LIST
58360: PUSH
58361: LD_INT 0
58363: PUSH
58364: LD_INT 1
58366: NEG
58367: PUSH
58368: EMPTY
58369: LIST
58370: LIST
58371: PUSH
58372: LD_INT 1
58374: PUSH
58375: LD_INT 0
58377: PUSH
58378: EMPTY
58379: LIST
58380: LIST
58381: PUSH
58382: LD_INT 1
58384: PUSH
58385: LD_INT 1
58387: PUSH
58388: EMPTY
58389: LIST
58390: LIST
58391: PUSH
58392: LD_INT 0
58394: PUSH
58395: LD_INT 1
58397: PUSH
58398: EMPTY
58399: LIST
58400: LIST
58401: PUSH
58402: LD_INT 1
58404: NEG
58405: PUSH
58406: LD_INT 0
58408: PUSH
58409: EMPTY
58410: LIST
58411: LIST
58412: PUSH
58413: LD_INT 1
58415: NEG
58416: PUSH
58417: LD_INT 1
58419: NEG
58420: PUSH
58421: EMPTY
58422: LIST
58423: LIST
58424: PUSH
58425: LD_INT 1
58427: NEG
58428: PUSH
58429: LD_INT 2
58431: NEG
58432: PUSH
58433: EMPTY
58434: LIST
58435: LIST
58436: PUSH
58437: LD_INT 1
58439: PUSH
58440: LD_INT 1
58442: NEG
58443: PUSH
58444: EMPTY
58445: LIST
58446: LIST
58447: PUSH
58448: LD_INT 2
58450: PUSH
58451: LD_INT 0
58453: PUSH
58454: EMPTY
58455: LIST
58456: LIST
58457: PUSH
58458: LD_INT 2
58460: PUSH
58461: LD_INT 1
58463: PUSH
58464: EMPTY
58465: LIST
58466: LIST
58467: PUSH
58468: LD_INT 2
58470: PUSH
58471: LD_INT 2
58473: PUSH
58474: EMPTY
58475: LIST
58476: LIST
58477: PUSH
58478: LD_INT 1
58480: PUSH
58481: LD_INT 2
58483: PUSH
58484: EMPTY
58485: LIST
58486: LIST
58487: PUSH
58488: LD_INT 1
58490: NEG
58491: PUSH
58492: LD_INT 1
58494: PUSH
58495: EMPTY
58496: LIST
58497: LIST
58498: PUSH
58499: LD_INT 2
58501: NEG
58502: PUSH
58503: LD_INT 0
58505: PUSH
58506: EMPTY
58507: LIST
58508: LIST
58509: PUSH
58510: LD_INT 2
58512: NEG
58513: PUSH
58514: LD_INT 1
58516: NEG
58517: PUSH
58518: EMPTY
58519: LIST
58520: LIST
58521: PUSH
58522: LD_INT 2
58524: NEG
58525: PUSH
58526: LD_INT 2
58528: NEG
58529: PUSH
58530: EMPTY
58531: LIST
58532: LIST
58533: PUSH
58534: LD_INT 2
58536: NEG
58537: PUSH
58538: LD_INT 3
58540: NEG
58541: PUSH
58542: EMPTY
58543: LIST
58544: LIST
58545: PUSH
58546: LD_INT 2
58548: PUSH
58549: LD_INT 1
58551: NEG
58552: PUSH
58553: EMPTY
58554: LIST
58555: LIST
58556: PUSH
58557: LD_INT 3
58559: PUSH
58560: LD_INT 0
58562: PUSH
58563: EMPTY
58564: LIST
58565: LIST
58566: PUSH
58567: LD_INT 3
58569: PUSH
58570: LD_INT 1
58572: PUSH
58573: EMPTY
58574: LIST
58575: LIST
58576: PUSH
58577: LD_INT 3
58579: PUSH
58580: LD_INT 2
58582: PUSH
58583: EMPTY
58584: LIST
58585: LIST
58586: PUSH
58587: LD_INT 3
58589: PUSH
58590: LD_INT 3
58592: PUSH
58593: EMPTY
58594: LIST
58595: LIST
58596: PUSH
58597: LD_INT 2
58599: PUSH
58600: LD_INT 3
58602: PUSH
58603: EMPTY
58604: LIST
58605: LIST
58606: PUSH
58607: LD_INT 2
58609: NEG
58610: PUSH
58611: LD_INT 1
58613: PUSH
58614: EMPTY
58615: LIST
58616: LIST
58617: PUSH
58618: LD_INT 3
58620: NEG
58621: PUSH
58622: LD_INT 0
58624: PUSH
58625: EMPTY
58626: LIST
58627: LIST
58628: PUSH
58629: LD_INT 3
58631: NEG
58632: PUSH
58633: LD_INT 1
58635: NEG
58636: PUSH
58637: EMPTY
58638: LIST
58639: LIST
58640: PUSH
58641: LD_INT 3
58643: NEG
58644: PUSH
58645: LD_INT 2
58647: NEG
58648: PUSH
58649: EMPTY
58650: LIST
58651: LIST
58652: PUSH
58653: LD_INT 3
58655: NEG
58656: PUSH
58657: LD_INT 3
58659: NEG
58660: PUSH
58661: EMPTY
58662: LIST
58663: LIST
58664: PUSH
58665: EMPTY
58666: LIST
58667: LIST
58668: LIST
58669: LIST
58670: LIST
58671: LIST
58672: LIST
58673: LIST
58674: LIST
58675: LIST
58676: LIST
58677: LIST
58678: LIST
58679: LIST
58680: LIST
58681: LIST
58682: LIST
58683: LIST
58684: LIST
58685: LIST
58686: LIST
58687: LIST
58688: LIST
58689: LIST
58690: LIST
58691: LIST
58692: LIST
58693: LIST
58694: LIST
58695: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58696: LD_ADDR_VAR 0 45
58700: PUSH
58701: LD_INT 0
58703: PUSH
58704: LD_INT 0
58706: PUSH
58707: EMPTY
58708: LIST
58709: LIST
58710: PUSH
58711: LD_INT 0
58713: PUSH
58714: LD_INT 1
58716: NEG
58717: PUSH
58718: EMPTY
58719: LIST
58720: LIST
58721: PUSH
58722: LD_INT 1
58724: PUSH
58725: LD_INT 0
58727: PUSH
58728: EMPTY
58729: LIST
58730: LIST
58731: PUSH
58732: LD_INT 1
58734: PUSH
58735: LD_INT 1
58737: PUSH
58738: EMPTY
58739: LIST
58740: LIST
58741: PUSH
58742: LD_INT 0
58744: PUSH
58745: LD_INT 1
58747: PUSH
58748: EMPTY
58749: LIST
58750: LIST
58751: PUSH
58752: LD_INT 1
58754: NEG
58755: PUSH
58756: LD_INT 0
58758: PUSH
58759: EMPTY
58760: LIST
58761: LIST
58762: PUSH
58763: LD_INT 1
58765: NEG
58766: PUSH
58767: LD_INT 1
58769: NEG
58770: PUSH
58771: EMPTY
58772: LIST
58773: LIST
58774: PUSH
58775: LD_INT 1
58777: NEG
58778: PUSH
58779: LD_INT 2
58781: NEG
58782: PUSH
58783: EMPTY
58784: LIST
58785: LIST
58786: PUSH
58787: LD_INT 0
58789: PUSH
58790: LD_INT 2
58792: NEG
58793: PUSH
58794: EMPTY
58795: LIST
58796: LIST
58797: PUSH
58798: LD_INT 1
58800: PUSH
58801: LD_INT 1
58803: NEG
58804: PUSH
58805: EMPTY
58806: LIST
58807: LIST
58808: PUSH
58809: LD_INT 2
58811: PUSH
58812: LD_INT 1
58814: PUSH
58815: EMPTY
58816: LIST
58817: LIST
58818: PUSH
58819: LD_INT 2
58821: PUSH
58822: LD_INT 2
58824: PUSH
58825: EMPTY
58826: LIST
58827: LIST
58828: PUSH
58829: LD_INT 1
58831: PUSH
58832: LD_INT 2
58834: PUSH
58835: EMPTY
58836: LIST
58837: LIST
58838: PUSH
58839: LD_INT 0
58841: PUSH
58842: LD_INT 2
58844: PUSH
58845: EMPTY
58846: LIST
58847: LIST
58848: PUSH
58849: LD_INT 1
58851: NEG
58852: PUSH
58853: LD_INT 1
58855: PUSH
58856: EMPTY
58857: LIST
58858: LIST
58859: PUSH
58860: LD_INT 2
58862: NEG
58863: PUSH
58864: LD_INT 1
58866: NEG
58867: PUSH
58868: EMPTY
58869: LIST
58870: LIST
58871: PUSH
58872: LD_INT 2
58874: NEG
58875: PUSH
58876: LD_INT 2
58878: NEG
58879: PUSH
58880: EMPTY
58881: LIST
58882: LIST
58883: PUSH
58884: LD_INT 2
58886: NEG
58887: PUSH
58888: LD_INT 3
58890: NEG
58891: PUSH
58892: EMPTY
58893: LIST
58894: LIST
58895: PUSH
58896: LD_INT 1
58898: NEG
58899: PUSH
58900: LD_INT 3
58902: NEG
58903: PUSH
58904: EMPTY
58905: LIST
58906: LIST
58907: PUSH
58908: LD_INT 0
58910: PUSH
58911: LD_INT 3
58913: NEG
58914: PUSH
58915: EMPTY
58916: LIST
58917: LIST
58918: PUSH
58919: LD_INT 1
58921: PUSH
58922: LD_INT 2
58924: NEG
58925: PUSH
58926: EMPTY
58927: LIST
58928: LIST
58929: PUSH
58930: LD_INT 3
58932: PUSH
58933: LD_INT 2
58935: PUSH
58936: EMPTY
58937: LIST
58938: LIST
58939: PUSH
58940: LD_INT 3
58942: PUSH
58943: LD_INT 3
58945: PUSH
58946: EMPTY
58947: LIST
58948: LIST
58949: PUSH
58950: LD_INT 2
58952: PUSH
58953: LD_INT 3
58955: PUSH
58956: EMPTY
58957: LIST
58958: LIST
58959: PUSH
58960: LD_INT 1
58962: PUSH
58963: LD_INT 3
58965: PUSH
58966: EMPTY
58967: LIST
58968: LIST
58969: PUSH
58970: LD_INT 0
58972: PUSH
58973: LD_INT 3
58975: PUSH
58976: EMPTY
58977: LIST
58978: LIST
58979: PUSH
58980: LD_INT 1
58982: NEG
58983: PUSH
58984: LD_INT 2
58986: PUSH
58987: EMPTY
58988: LIST
58989: LIST
58990: PUSH
58991: LD_INT 3
58993: NEG
58994: PUSH
58995: LD_INT 2
58997: NEG
58998: PUSH
58999: EMPTY
59000: LIST
59001: LIST
59002: PUSH
59003: LD_INT 3
59005: NEG
59006: PUSH
59007: LD_INT 3
59009: NEG
59010: PUSH
59011: EMPTY
59012: LIST
59013: LIST
59014: PUSH
59015: EMPTY
59016: LIST
59017: LIST
59018: LIST
59019: LIST
59020: LIST
59021: LIST
59022: LIST
59023: LIST
59024: LIST
59025: LIST
59026: LIST
59027: LIST
59028: LIST
59029: LIST
59030: LIST
59031: LIST
59032: LIST
59033: LIST
59034: LIST
59035: LIST
59036: LIST
59037: LIST
59038: LIST
59039: LIST
59040: LIST
59041: LIST
59042: LIST
59043: LIST
59044: LIST
59045: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59046: LD_ADDR_VAR 0 46
59050: PUSH
59051: LD_INT 0
59053: PUSH
59054: LD_INT 0
59056: PUSH
59057: EMPTY
59058: LIST
59059: LIST
59060: PUSH
59061: LD_INT 0
59063: PUSH
59064: LD_INT 1
59066: NEG
59067: PUSH
59068: EMPTY
59069: LIST
59070: LIST
59071: PUSH
59072: LD_INT 1
59074: PUSH
59075: LD_INT 0
59077: PUSH
59078: EMPTY
59079: LIST
59080: LIST
59081: PUSH
59082: LD_INT 1
59084: PUSH
59085: LD_INT 1
59087: PUSH
59088: EMPTY
59089: LIST
59090: LIST
59091: PUSH
59092: LD_INT 0
59094: PUSH
59095: LD_INT 1
59097: PUSH
59098: EMPTY
59099: LIST
59100: LIST
59101: PUSH
59102: LD_INT 1
59104: NEG
59105: PUSH
59106: LD_INT 0
59108: PUSH
59109: EMPTY
59110: LIST
59111: LIST
59112: PUSH
59113: LD_INT 1
59115: NEG
59116: PUSH
59117: LD_INT 1
59119: NEG
59120: PUSH
59121: EMPTY
59122: LIST
59123: LIST
59124: PUSH
59125: LD_INT 1
59127: NEG
59128: PUSH
59129: LD_INT 2
59131: NEG
59132: PUSH
59133: EMPTY
59134: LIST
59135: LIST
59136: PUSH
59137: LD_INT 0
59139: PUSH
59140: LD_INT 2
59142: NEG
59143: PUSH
59144: EMPTY
59145: LIST
59146: LIST
59147: PUSH
59148: LD_INT 1
59150: PUSH
59151: LD_INT 1
59153: NEG
59154: PUSH
59155: EMPTY
59156: LIST
59157: LIST
59158: PUSH
59159: LD_INT 2
59161: PUSH
59162: LD_INT 0
59164: PUSH
59165: EMPTY
59166: LIST
59167: LIST
59168: PUSH
59169: LD_INT 2
59171: PUSH
59172: LD_INT 1
59174: PUSH
59175: EMPTY
59176: LIST
59177: LIST
59178: PUSH
59179: LD_INT 1
59181: PUSH
59182: LD_INT 2
59184: PUSH
59185: EMPTY
59186: LIST
59187: LIST
59188: PUSH
59189: LD_INT 0
59191: PUSH
59192: LD_INT 2
59194: PUSH
59195: EMPTY
59196: LIST
59197: LIST
59198: PUSH
59199: LD_INT 1
59201: NEG
59202: PUSH
59203: LD_INT 1
59205: PUSH
59206: EMPTY
59207: LIST
59208: LIST
59209: PUSH
59210: LD_INT 2
59212: NEG
59213: PUSH
59214: LD_INT 0
59216: PUSH
59217: EMPTY
59218: LIST
59219: LIST
59220: PUSH
59221: LD_INT 2
59223: NEG
59224: PUSH
59225: LD_INT 1
59227: NEG
59228: PUSH
59229: EMPTY
59230: LIST
59231: LIST
59232: PUSH
59233: LD_INT 1
59235: NEG
59236: PUSH
59237: LD_INT 3
59239: NEG
59240: PUSH
59241: EMPTY
59242: LIST
59243: LIST
59244: PUSH
59245: LD_INT 0
59247: PUSH
59248: LD_INT 3
59250: NEG
59251: PUSH
59252: EMPTY
59253: LIST
59254: LIST
59255: PUSH
59256: LD_INT 1
59258: PUSH
59259: LD_INT 2
59261: NEG
59262: PUSH
59263: EMPTY
59264: LIST
59265: LIST
59266: PUSH
59267: LD_INT 2
59269: PUSH
59270: LD_INT 1
59272: NEG
59273: PUSH
59274: EMPTY
59275: LIST
59276: LIST
59277: PUSH
59278: LD_INT 3
59280: PUSH
59281: LD_INT 0
59283: PUSH
59284: EMPTY
59285: LIST
59286: LIST
59287: PUSH
59288: LD_INT 3
59290: PUSH
59291: LD_INT 1
59293: PUSH
59294: EMPTY
59295: LIST
59296: LIST
59297: PUSH
59298: LD_INT 1
59300: PUSH
59301: LD_INT 3
59303: PUSH
59304: EMPTY
59305: LIST
59306: LIST
59307: PUSH
59308: LD_INT 0
59310: PUSH
59311: LD_INT 3
59313: PUSH
59314: EMPTY
59315: LIST
59316: LIST
59317: PUSH
59318: LD_INT 1
59320: NEG
59321: PUSH
59322: LD_INT 2
59324: PUSH
59325: EMPTY
59326: LIST
59327: LIST
59328: PUSH
59329: LD_INT 2
59331: NEG
59332: PUSH
59333: LD_INT 1
59335: PUSH
59336: EMPTY
59337: LIST
59338: LIST
59339: PUSH
59340: LD_INT 3
59342: NEG
59343: PUSH
59344: LD_INT 0
59346: PUSH
59347: EMPTY
59348: LIST
59349: LIST
59350: PUSH
59351: LD_INT 3
59353: NEG
59354: PUSH
59355: LD_INT 1
59357: NEG
59358: PUSH
59359: EMPTY
59360: LIST
59361: LIST
59362: PUSH
59363: EMPTY
59364: LIST
59365: LIST
59366: LIST
59367: LIST
59368: LIST
59369: LIST
59370: LIST
59371: LIST
59372: LIST
59373: LIST
59374: LIST
59375: LIST
59376: LIST
59377: LIST
59378: LIST
59379: LIST
59380: LIST
59381: LIST
59382: LIST
59383: LIST
59384: LIST
59385: LIST
59386: LIST
59387: LIST
59388: LIST
59389: LIST
59390: LIST
59391: LIST
59392: LIST
59393: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59394: LD_ADDR_VAR 0 47
59398: PUSH
59399: LD_INT 0
59401: PUSH
59402: LD_INT 0
59404: PUSH
59405: EMPTY
59406: LIST
59407: LIST
59408: PUSH
59409: LD_INT 0
59411: PUSH
59412: LD_INT 1
59414: NEG
59415: PUSH
59416: EMPTY
59417: LIST
59418: LIST
59419: PUSH
59420: LD_INT 1
59422: PUSH
59423: LD_INT 0
59425: PUSH
59426: EMPTY
59427: LIST
59428: LIST
59429: PUSH
59430: LD_INT 1
59432: PUSH
59433: LD_INT 1
59435: PUSH
59436: EMPTY
59437: LIST
59438: LIST
59439: PUSH
59440: LD_INT 0
59442: PUSH
59443: LD_INT 1
59445: PUSH
59446: EMPTY
59447: LIST
59448: LIST
59449: PUSH
59450: LD_INT 1
59452: NEG
59453: PUSH
59454: LD_INT 0
59456: PUSH
59457: EMPTY
59458: LIST
59459: LIST
59460: PUSH
59461: LD_INT 1
59463: NEG
59464: PUSH
59465: LD_INT 1
59467: NEG
59468: PUSH
59469: EMPTY
59470: LIST
59471: LIST
59472: PUSH
59473: LD_INT 1
59475: NEG
59476: PUSH
59477: LD_INT 2
59479: NEG
59480: PUSH
59481: EMPTY
59482: LIST
59483: LIST
59484: PUSH
59485: LD_INT 0
59487: PUSH
59488: LD_INT 2
59490: NEG
59491: PUSH
59492: EMPTY
59493: LIST
59494: LIST
59495: PUSH
59496: LD_INT 1
59498: PUSH
59499: LD_INT 1
59501: NEG
59502: PUSH
59503: EMPTY
59504: LIST
59505: LIST
59506: PUSH
59507: LD_INT 2
59509: NEG
59510: PUSH
59511: LD_INT 1
59513: NEG
59514: PUSH
59515: EMPTY
59516: LIST
59517: LIST
59518: PUSH
59519: LD_INT 2
59521: NEG
59522: PUSH
59523: LD_INT 2
59525: NEG
59526: PUSH
59527: EMPTY
59528: LIST
59529: LIST
59530: PUSH
59531: EMPTY
59532: LIST
59533: LIST
59534: LIST
59535: LIST
59536: LIST
59537: LIST
59538: LIST
59539: LIST
59540: LIST
59541: LIST
59542: LIST
59543: LIST
59544: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
59545: LD_ADDR_VAR 0 48
59549: PUSH
59550: LD_INT 0
59552: PUSH
59553: LD_INT 0
59555: PUSH
59556: EMPTY
59557: LIST
59558: LIST
59559: PUSH
59560: LD_INT 0
59562: PUSH
59563: LD_INT 1
59565: NEG
59566: PUSH
59567: EMPTY
59568: LIST
59569: LIST
59570: PUSH
59571: LD_INT 1
59573: PUSH
59574: LD_INT 0
59576: PUSH
59577: EMPTY
59578: LIST
59579: LIST
59580: PUSH
59581: LD_INT 1
59583: PUSH
59584: LD_INT 1
59586: PUSH
59587: EMPTY
59588: LIST
59589: LIST
59590: PUSH
59591: LD_INT 0
59593: PUSH
59594: LD_INT 1
59596: PUSH
59597: EMPTY
59598: LIST
59599: LIST
59600: PUSH
59601: LD_INT 1
59603: NEG
59604: PUSH
59605: LD_INT 0
59607: PUSH
59608: EMPTY
59609: LIST
59610: LIST
59611: PUSH
59612: LD_INT 1
59614: NEG
59615: PUSH
59616: LD_INT 1
59618: NEG
59619: PUSH
59620: EMPTY
59621: LIST
59622: LIST
59623: PUSH
59624: LD_INT 1
59626: NEG
59627: PUSH
59628: LD_INT 2
59630: NEG
59631: PUSH
59632: EMPTY
59633: LIST
59634: LIST
59635: PUSH
59636: LD_INT 0
59638: PUSH
59639: LD_INT 2
59641: NEG
59642: PUSH
59643: EMPTY
59644: LIST
59645: LIST
59646: PUSH
59647: LD_INT 1
59649: PUSH
59650: LD_INT 1
59652: NEG
59653: PUSH
59654: EMPTY
59655: LIST
59656: LIST
59657: PUSH
59658: LD_INT 2
59660: PUSH
59661: LD_INT 0
59663: PUSH
59664: EMPTY
59665: LIST
59666: LIST
59667: PUSH
59668: LD_INT 2
59670: PUSH
59671: LD_INT 1
59673: PUSH
59674: EMPTY
59675: LIST
59676: LIST
59677: PUSH
59678: EMPTY
59679: LIST
59680: LIST
59681: LIST
59682: LIST
59683: LIST
59684: LIST
59685: LIST
59686: LIST
59687: LIST
59688: LIST
59689: LIST
59690: LIST
59691: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
59692: LD_ADDR_VAR 0 49
59696: PUSH
59697: LD_INT 0
59699: PUSH
59700: LD_INT 0
59702: PUSH
59703: EMPTY
59704: LIST
59705: LIST
59706: PUSH
59707: LD_INT 0
59709: PUSH
59710: LD_INT 1
59712: NEG
59713: PUSH
59714: EMPTY
59715: LIST
59716: LIST
59717: PUSH
59718: LD_INT 1
59720: PUSH
59721: LD_INT 0
59723: PUSH
59724: EMPTY
59725: LIST
59726: LIST
59727: PUSH
59728: LD_INT 1
59730: PUSH
59731: LD_INT 1
59733: PUSH
59734: EMPTY
59735: LIST
59736: LIST
59737: PUSH
59738: LD_INT 0
59740: PUSH
59741: LD_INT 1
59743: PUSH
59744: EMPTY
59745: LIST
59746: LIST
59747: PUSH
59748: LD_INT 1
59750: NEG
59751: PUSH
59752: LD_INT 0
59754: PUSH
59755: EMPTY
59756: LIST
59757: LIST
59758: PUSH
59759: LD_INT 1
59761: NEG
59762: PUSH
59763: LD_INT 1
59765: NEG
59766: PUSH
59767: EMPTY
59768: LIST
59769: LIST
59770: PUSH
59771: LD_INT 1
59773: PUSH
59774: LD_INT 1
59776: NEG
59777: PUSH
59778: EMPTY
59779: LIST
59780: LIST
59781: PUSH
59782: LD_INT 2
59784: PUSH
59785: LD_INT 0
59787: PUSH
59788: EMPTY
59789: LIST
59790: LIST
59791: PUSH
59792: LD_INT 2
59794: PUSH
59795: LD_INT 1
59797: PUSH
59798: EMPTY
59799: LIST
59800: LIST
59801: PUSH
59802: LD_INT 2
59804: PUSH
59805: LD_INT 2
59807: PUSH
59808: EMPTY
59809: LIST
59810: LIST
59811: PUSH
59812: LD_INT 1
59814: PUSH
59815: LD_INT 2
59817: PUSH
59818: EMPTY
59819: LIST
59820: LIST
59821: PUSH
59822: EMPTY
59823: LIST
59824: LIST
59825: LIST
59826: LIST
59827: LIST
59828: LIST
59829: LIST
59830: LIST
59831: LIST
59832: LIST
59833: LIST
59834: LIST
59835: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
59836: LD_ADDR_VAR 0 50
59840: PUSH
59841: LD_INT 0
59843: PUSH
59844: LD_INT 0
59846: PUSH
59847: EMPTY
59848: LIST
59849: LIST
59850: PUSH
59851: LD_INT 0
59853: PUSH
59854: LD_INT 1
59856: NEG
59857: PUSH
59858: EMPTY
59859: LIST
59860: LIST
59861: PUSH
59862: LD_INT 1
59864: PUSH
59865: LD_INT 0
59867: PUSH
59868: EMPTY
59869: LIST
59870: LIST
59871: PUSH
59872: LD_INT 1
59874: PUSH
59875: LD_INT 1
59877: PUSH
59878: EMPTY
59879: LIST
59880: LIST
59881: PUSH
59882: LD_INT 0
59884: PUSH
59885: LD_INT 1
59887: PUSH
59888: EMPTY
59889: LIST
59890: LIST
59891: PUSH
59892: LD_INT 1
59894: NEG
59895: PUSH
59896: LD_INT 0
59898: PUSH
59899: EMPTY
59900: LIST
59901: LIST
59902: PUSH
59903: LD_INT 1
59905: NEG
59906: PUSH
59907: LD_INT 1
59909: NEG
59910: PUSH
59911: EMPTY
59912: LIST
59913: LIST
59914: PUSH
59915: LD_INT 2
59917: PUSH
59918: LD_INT 1
59920: PUSH
59921: EMPTY
59922: LIST
59923: LIST
59924: PUSH
59925: LD_INT 2
59927: PUSH
59928: LD_INT 2
59930: PUSH
59931: EMPTY
59932: LIST
59933: LIST
59934: PUSH
59935: LD_INT 1
59937: PUSH
59938: LD_INT 2
59940: PUSH
59941: EMPTY
59942: LIST
59943: LIST
59944: PUSH
59945: LD_INT 0
59947: PUSH
59948: LD_INT 2
59950: PUSH
59951: EMPTY
59952: LIST
59953: LIST
59954: PUSH
59955: LD_INT 1
59957: NEG
59958: PUSH
59959: LD_INT 1
59961: PUSH
59962: EMPTY
59963: LIST
59964: LIST
59965: PUSH
59966: EMPTY
59967: LIST
59968: LIST
59969: LIST
59970: LIST
59971: LIST
59972: LIST
59973: LIST
59974: LIST
59975: LIST
59976: LIST
59977: LIST
59978: LIST
59979: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
59980: LD_ADDR_VAR 0 51
59984: PUSH
59985: LD_INT 0
59987: PUSH
59988: LD_INT 0
59990: PUSH
59991: EMPTY
59992: LIST
59993: LIST
59994: PUSH
59995: LD_INT 0
59997: PUSH
59998: LD_INT 1
60000: NEG
60001: PUSH
60002: EMPTY
60003: LIST
60004: LIST
60005: PUSH
60006: LD_INT 1
60008: PUSH
60009: LD_INT 0
60011: PUSH
60012: EMPTY
60013: LIST
60014: LIST
60015: PUSH
60016: LD_INT 1
60018: PUSH
60019: LD_INT 1
60021: PUSH
60022: EMPTY
60023: LIST
60024: LIST
60025: PUSH
60026: LD_INT 0
60028: PUSH
60029: LD_INT 1
60031: PUSH
60032: EMPTY
60033: LIST
60034: LIST
60035: PUSH
60036: LD_INT 1
60038: NEG
60039: PUSH
60040: LD_INT 0
60042: PUSH
60043: EMPTY
60044: LIST
60045: LIST
60046: PUSH
60047: LD_INT 1
60049: NEG
60050: PUSH
60051: LD_INT 1
60053: NEG
60054: PUSH
60055: EMPTY
60056: LIST
60057: LIST
60058: PUSH
60059: LD_INT 1
60061: PUSH
60062: LD_INT 2
60064: PUSH
60065: EMPTY
60066: LIST
60067: LIST
60068: PUSH
60069: LD_INT 0
60071: PUSH
60072: LD_INT 2
60074: PUSH
60075: EMPTY
60076: LIST
60077: LIST
60078: PUSH
60079: LD_INT 1
60081: NEG
60082: PUSH
60083: LD_INT 1
60085: PUSH
60086: EMPTY
60087: LIST
60088: LIST
60089: PUSH
60090: LD_INT 2
60092: NEG
60093: PUSH
60094: LD_INT 0
60096: PUSH
60097: EMPTY
60098: LIST
60099: LIST
60100: PUSH
60101: LD_INT 2
60103: NEG
60104: PUSH
60105: LD_INT 1
60107: NEG
60108: PUSH
60109: EMPTY
60110: LIST
60111: LIST
60112: PUSH
60113: EMPTY
60114: LIST
60115: LIST
60116: LIST
60117: LIST
60118: LIST
60119: LIST
60120: LIST
60121: LIST
60122: LIST
60123: LIST
60124: LIST
60125: LIST
60126: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60127: LD_ADDR_VAR 0 52
60131: PUSH
60132: LD_INT 0
60134: PUSH
60135: LD_INT 0
60137: PUSH
60138: EMPTY
60139: LIST
60140: LIST
60141: PUSH
60142: LD_INT 0
60144: PUSH
60145: LD_INT 1
60147: NEG
60148: PUSH
60149: EMPTY
60150: LIST
60151: LIST
60152: PUSH
60153: LD_INT 1
60155: PUSH
60156: LD_INT 0
60158: PUSH
60159: EMPTY
60160: LIST
60161: LIST
60162: PUSH
60163: LD_INT 1
60165: PUSH
60166: LD_INT 1
60168: PUSH
60169: EMPTY
60170: LIST
60171: LIST
60172: PUSH
60173: LD_INT 0
60175: PUSH
60176: LD_INT 1
60178: PUSH
60179: EMPTY
60180: LIST
60181: LIST
60182: PUSH
60183: LD_INT 1
60185: NEG
60186: PUSH
60187: LD_INT 0
60189: PUSH
60190: EMPTY
60191: LIST
60192: LIST
60193: PUSH
60194: LD_INT 1
60196: NEG
60197: PUSH
60198: LD_INT 1
60200: NEG
60201: PUSH
60202: EMPTY
60203: LIST
60204: LIST
60205: PUSH
60206: LD_INT 1
60208: NEG
60209: PUSH
60210: LD_INT 2
60212: NEG
60213: PUSH
60214: EMPTY
60215: LIST
60216: LIST
60217: PUSH
60218: LD_INT 1
60220: NEG
60221: PUSH
60222: LD_INT 1
60224: PUSH
60225: EMPTY
60226: LIST
60227: LIST
60228: PUSH
60229: LD_INT 2
60231: NEG
60232: PUSH
60233: LD_INT 0
60235: PUSH
60236: EMPTY
60237: LIST
60238: LIST
60239: PUSH
60240: LD_INT 2
60242: NEG
60243: PUSH
60244: LD_INT 1
60246: NEG
60247: PUSH
60248: EMPTY
60249: LIST
60250: LIST
60251: PUSH
60252: LD_INT 2
60254: NEG
60255: PUSH
60256: LD_INT 2
60258: NEG
60259: PUSH
60260: EMPTY
60261: LIST
60262: LIST
60263: PUSH
60264: EMPTY
60265: LIST
60266: LIST
60267: LIST
60268: LIST
60269: LIST
60270: LIST
60271: LIST
60272: LIST
60273: LIST
60274: LIST
60275: LIST
60276: LIST
60277: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60278: LD_ADDR_VAR 0 53
60282: PUSH
60283: LD_INT 0
60285: PUSH
60286: LD_INT 0
60288: PUSH
60289: EMPTY
60290: LIST
60291: LIST
60292: PUSH
60293: LD_INT 0
60295: PUSH
60296: LD_INT 1
60298: NEG
60299: PUSH
60300: EMPTY
60301: LIST
60302: LIST
60303: PUSH
60304: LD_INT 1
60306: PUSH
60307: LD_INT 0
60309: PUSH
60310: EMPTY
60311: LIST
60312: LIST
60313: PUSH
60314: LD_INT 1
60316: PUSH
60317: LD_INT 1
60319: PUSH
60320: EMPTY
60321: LIST
60322: LIST
60323: PUSH
60324: LD_INT 0
60326: PUSH
60327: LD_INT 1
60329: PUSH
60330: EMPTY
60331: LIST
60332: LIST
60333: PUSH
60334: LD_INT 1
60336: NEG
60337: PUSH
60338: LD_INT 0
60340: PUSH
60341: EMPTY
60342: LIST
60343: LIST
60344: PUSH
60345: LD_INT 1
60347: NEG
60348: PUSH
60349: LD_INT 1
60351: NEG
60352: PUSH
60353: EMPTY
60354: LIST
60355: LIST
60356: PUSH
60357: LD_INT 1
60359: NEG
60360: PUSH
60361: LD_INT 2
60363: NEG
60364: PUSH
60365: EMPTY
60366: LIST
60367: LIST
60368: PUSH
60369: LD_INT 0
60371: PUSH
60372: LD_INT 2
60374: NEG
60375: PUSH
60376: EMPTY
60377: LIST
60378: LIST
60379: PUSH
60380: LD_INT 1
60382: PUSH
60383: LD_INT 1
60385: NEG
60386: PUSH
60387: EMPTY
60388: LIST
60389: LIST
60390: PUSH
60391: LD_INT 2
60393: PUSH
60394: LD_INT 0
60396: PUSH
60397: EMPTY
60398: LIST
60399: LIST
60400: PUSH
60401: LD_INT 2
60403: PUSH
60404: LD_INT 1
60406: PUSH
60407: EMPTY
60408: LIST
60409: LIST
60410: PUSH
60411: LD_INT 2
60413: PUSH
60414: LD_INT 2
60416: PUSH
60417: EMPTY
60418: LIST
60419: LIST
60420: PUSH
60421: LD_INT 1
60423: PUSH
60424: LD_INT 2
60426: PUSH
60427: EMPTY
60428: LIST
60429: LIST
60430: PUSH
60431: LD_INT 0
60433: PUSH
60434: LD_INT 2
60436: PUSH
60437: EMPTY
60438: LIST
60439: LIST
60440: PUSH
60441: LD_INT 1
60443: NEG
60444: PUSH
60445: LD_INT 1
60447: PUSH
60448: EMPTY
60449: LIST
60450: LIST
60451: PUSH
60452: LD_INT 2
60454: NEG
60455: PUSH
60456: LD_INT 0
60458: PUSH
60459: EMPTY
60460: LIST
60461: LIST
60462: PUSH
60463: LD_INT 2
60465: NEG
60466: PUSH
60467: LD_INT 1
60469: NEG
60470: PUSH
60471: EMPTY
60472: LIST
60473: LIST
60474: PUSH
60475: LD_INT 2
60477: NEG
60478: PUSH
60479: LD_INT 2
60481: NEG
60482: PUSH
60483: EMPTY
60484: LIST
60485: LIST
60486: PUSH
60487: EMPTY
60488: LIST
60489: LIST
60490: LIST
60491: LIST
60492: LIST
60493: LIST
60494: LIST
60495: LIST
60496: LIST
60497: LIST
60498: LIST
60499: LIST
60500: LIST
60501: LIST
60502: LIST
60503: LIST
60504: LIST
60505: LIST
60506: LIST
60507: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60508: LD_ADDR_VAR 0 54
60512: PUSH
60513: LD_INT 0
60515: PUSH
60516: LD_INT 0
60518: PUSH
60519: EMPTY
60520: LIST
60521: LIST
60522: PUSH
60523: LD_INT 0
60525: PUSH
60526: LD_INT 1
60528: NEG
60529: PUSH
60530: EMPTY
60531: LIST
60532: LIST
60533: PUSH
60534: LD_INT 1
60536: PUSH
60537: LD_INT 0
60539: PUSH
60540: EMPTY
60541: LIST
60542: LIST
60543: PUSH
60544: LD_INT 1
60546: PUSH
60547: LD_INT 1
60549: PUSH
60550: EMPTY
60551: LIST
60552: LIST
60553: PUSH
60554: LD_INT 0
60556: PUSH
60557: LD_INT 1
60559: PUSH
60560: EMPTY
60561: LIST
60562: LIST
60563: PUSH
60564: LD_INT 1
60566: NEG
60567: PUSH
60568: LD_INT 0
60570: PUSH
60571: EMPTY
60572: LIST
60573: LIST
60574: PUSH
60575: LD_INT 1
60577: NEG
60578: PUSH
60579: LD_INT 1
60581: NEG
60582: PUSH
60583: EMPTY
60584: LIST
60585: LIST
60586: PUSH
60587: LD_INT 1
60589: NEG
60590: PUSH
60591: LD_INT 2
60593: NEG
60594: PUSH
60595: EMPTY
60596: LIST
60597: LIST
60598: PUSH
60599: LD_INT 0
60601: PUSH
60602: LD_INT 2
60604: NEG
60605: PUSH
60606: EMPTY
60607: LIST
60608: LIST
60609: PUSH
60610: LD_INT 1
60612: PUSH
60613: LD_INT 1
60615: NEG
60616: PUSH
60617: EMPTY
60618: LIST
60619: LIST
60620: PUSH
60621: LD_INT 2
60623: PUSH
60624: LD_INT 0
60626: PUSH
60627: EMPTY
60628: LIST
60629: LIST
60630: PUSH
60631: LD_INT 2
60633: PUSH
60634: LD_INT 1
60636: PUSH
60637: EMPTY
60638: LIST
60639: LIST
60640: PUSH
60641: LD_INT 2
60643: PUSH
60644: LD_INT 2
60646: PUSH
60647: EMPTY
60648: LIST
60649: LIST
60650: PUSH
60651: LD_INT 1
60653: PUSH
60654: LD_INT 2
60656: PUSH
60657: EMPTY
60658: LIST
60659: LIST
60660: PUSH
60661: LD_INT 0
60663: PUSH
60664: LD_INT 2
60666: PUSH
60667: EMPTY
60668: LIST
60669: LIST
60670: PUSH
60671: LD_INT 1
60673: NEG
60674: PUSH
60675: LD_INT 1
60677: PUSH
60678: EMPTY
60679: LIST
60680: LIST
60681: PUSH
60682: LD_INT 2
60684: NEG
60685: PUSH
60686: LD_INT 0
60688: PUSH
60689: EMPTY
60690: LIST
60691: LIST
60692: PUSH
60693: LD_INT 2
60695: NEG
60696: PUSH
60697: LD_INT 1
60699: NEG
60700: PUSH
60701: EMPTY
60702: LIST
60703: LIST
60704: PUSH
60705: LD_INT 2
60707: NEG
60708: PUSH
60709: LD_INT 2
60711: NEG
60712: PUSH
60713: EMPTY
60714: LIST
60715: LIST
60716: PUSH
60717: EMPTY
60718: LIST
60719: LIST
60720: LIST
60721: LIST
60722: LIST
60723: LIST
60724: LIST
60725: LIST
60726: LIST
60727: LIST
60728: LIST
60729: LIST
60730: LIST
60731: LIST
60732: LIST
60733: LIST
60734: LIST
60735: LIST
60736: LIST
60737: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60738: LD_ADDR_VAR 0 55
60742: PUSH
60743: LD_INT 0
60745: PUSH
60746: LD_INT 0
60748: PUSH
60749: EMPTY
60750: LIST
60751: LIST
60752: PUSH
60753: LD_INT 0
60755: PUSH
60756: LD_INT 1
60758: NEG
60759: PUSH
60760: EMPTY
60761: LIST
60762: LIST
60763: PUSH
60764: LD_INT 1
60766: PUSH
60767: LD_INT 0
60769: PUSH
60770: EMPTY
60771: LIST
60772: LIST
60773: PUSH
60774: LD_INT 1
60776: PUSH
60777: LD_INT 1
60779: PUSH
60780: EMPTY
60781: LIST
60782: LIST
60783: PUSH
60784: LD_INT 0
60786: PUSH
60787: LD_INT 1
60789: PUSH
60790: EMPTY
60791: LIST
60792: LIST
60793: PUSH
60794: LD_INT 1
60796: NEG
60797: PUSH
60798: LD_INT 0
60800: PUSH
60801: EMPTY
60802: LIST
60803: LIST
60804: PUSH
60805: LD_INT 1
60807: NEG
60808: PUSH
60809: LD_INT 1
60811: NEG
60812: PUSH
60813: EMPTY
60814: LIST
60815: LIST
60816: PUSH
60817: LD_INT 1
60819: NEG
60820: PUSH
60821: LD_INT 2
60823: NEG
60824: PUSH
60825: EMPTY
60826: LIST
60827: LIST
60828: PUSH
60829: LD_INT 0
60831: PUSH
60832: LD_INT 2
60834: NEG
60835: PUSH
60836: EMPTY
60837: LIST
60838: LIST
60839: PUSH
60840: LD_INT 1
60842: PUSH
60843: LD_INT 1
60845: NEG
60846: PUSH
60847: EMPTY
60848: LIST
60849: LIST
60850: PUSH
60851: LD_INT 2
60853: PUSH
60854: LD_INT 0
60856: PUSH
60857: EMPTY
60858: LIST
60859: LIST
60860: PUSH
60861: LD_INT 2
60863: PUSH
60864: LD_INT 1
60866: PUSH
60867: EMPTY
60868: LIST
60869: LIST
60870: PUSH
60871: LD_INT 2
60873: PUSH
60874: LD_INT 2
60876: PUSH
60877: EMPTY
60878: LIST
60879: LIST
60880: PUSH
60881: LD_INT 1
60883: PUSH
60884: LD_INT 2
60886: PUSH
60887: EMPTY
60888: LIST
60889: LIST
60890: PUSH
60891: LD_INT 0
60893: PUSH
60894: LD_INT 2
60896: PUSH
60897: EMPTY
60898: LIST
60899: LIST
60900: PUSH
60901: LD_INT 1
60903: NEG
60904: PUSH
60905: LD_INT 1
60907: PUSH
60908: EMPTY
60909: LIST
60910: LIST
60911: PUSH
60912: LD_INT 2
60914: NEG
60915: PUSH
60916: LD_INT 0
60918: PUSH
60919: EMPTY
60920: LIST
60921: LIST
60922: PUSH
60923: LD_INT 2
60925: NEG
60926: PUSH
60927: LD_INT 1
60929: NEG
60930: PUSH
60931: EMPTY
60932: LIST
60933: LIST
60934: PUSH
60935: LD_INT 2
60937: NEG
60938: PUSH
60939: LD_INT 2
60941: NEG
60942: PUSH
60943: EMPTY
60944: LIST
60945: LIST
60946: PUSH
60947: EMPTY
60948: LIST
60949: LIST
60950: LIST
60951: LIST
60952: LIST
60953: LIST
60954: LIST
60955: LIST
60956: LIST
60957: LIST
60958: LIST
60959: LIST
60960: LIST
60961: LIST
60962: LIST
60963: LIST
60964: LIST
60965: LIST
60966: LIST
60967: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60968: LD_ADDR_VAR 0 56
60972: PUSH
60973: LD_INT 0
60975: PUSH
60976: LD_INT 0
60978: PUSH
60979: EMPTY
60980: LIST
60981: LIST
60982: PUSH
60983: LD_INT 0
60985: PUSH
60986: LD_INT 1
60988: NEG
60989: PUSH
60990: EMPTY
60991: LIST
60992: LIST
60993: PUSH
60994: LD_INT 1
60996: PUSH
60997: LD_INT 0
60999: PUSH
61000: EMPTY
61001: LIST
61002: LIST
61003: PUSH
61004: LD_INT 1
61006: PUSH
61007: LD_INT 1
61009: PUSH
61010: EMPTY
61011: LIST
61012: LIST
61013: PUSH
61014: LD_INT 0
61016: PUSH
61017: LD_INT 1
61019: PUSH
61020: EMPTY
61021: LIST
61022: LIST
61023: PUSH
61024: LD_INT 1
61026: NEG
61027: PUSH
61028: LD_INT 0
61030: PUSH
61031: EMPTY
61032: LIST
61033: LIST
61034: PUSH
61035: LD_INT 1
61037: NEG
61038: PUSH
61039: LD_INT 1
61041: NEG
61042: PUSH
61043: EMPTY
61044: LIST
61045: LIST
61046: PUSH
61047: LD_INT 1
61049: NEG
61050: PUSH
61051: LD_INT 2
61053: NEG
61054: PUSH
61055: EMPTY
61056: LIST
61057: LIST
61058: PUSH
61059: LD_INT 0
61061: PUSH
61062: LD_INT 2
61064: NEG
61065: PUSH
61066: EMPTY
61067: LIST
61068: LIST
61069: PUSH
61070: LD_INT 1
61072: PUSH
61073: LD_INT 1
61075: NEG
61076: PUSH
61077: EMPTY
61078: LIST
61079: LIST
61080: PUSH
61081: LD_INT 2
61083: PUSH
61084: LD_INT 0
61086: PUSH
61087: EMPTY
61088: LIST
61089: LIST
61090: PUSH
61091: LD_INT 2
61093: PUSH
61094: LD_INT 1
61096: PUSH
61097: EMPTY
61098: LIST
61099: LIST
61100: PUSH
61101: LD_INT 2
61103: PUSH
61104: LD_INT 2
61106: PUSH
61107: EMPTY
61108: LIST
61109: LIST
61110: PUSH
61111: LD_INT 1
61113: PUSH
61114: LD_INT 2
61116: PUSH
61117: EMPTY
61118: LIST
61119: LIST
61120: PUSH
61121: LD_INT 0
61123: PUSH
61124: LD_INT 2
61126: PUSH
61127: EMPTY
61128: LIST
61129: LIST
61130: PUSH
61131: LD_INT 1
61133: NEG
61134: PUSH
61135: LD_INT 1
61137: PUSH
61138: EMPTY
61139: LIST
61140: LIST
61141: PUSH
61142: LD_INT 2
61144: NEG
61145: PUSH
61146: LD_INT 0
61148: PUSH
61149: EMPTY
61150: LIST
61151: LIST
61152: PUSH
61153: LD_INT 2
61155: NEG
61156: PUSH
61157: LD_INT 1
61159: NEG
61160: PUSH
61161: EMPTY
61162: LIST
61163: LIST
61164: PUSH
61165: LD_INT 2
61167: NEG
61168: PUSH
61169: LD_INT 2
61171: NEG
61172: PUSH
61173: EMPTY
61174: LIST
61175: LIST
61176: PUSH
61177: EMPTY
61178: LIST
61179: LIST
61180: LIST
61181: LIST
61182: LIST
61183: LIST
61184: LIST
61185: LIST
61186: LIST
61187: LIST
61188: LIST
61189: LIST
61190: LIST
61191: LIST
61192: LIST
61193: LIST
61194: LIST
61195: LIST
61196: LIST
61197: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61198: LD_ADDR_VAR 0 57
61202: PUSH
61203: LD_INT 0
61205: PUSH
61206: LD_INT 0
61208: PUSH
61209: EMPTY
61210: LIST
61211: LIST
61212: PUSH
61213: LD_INT 0
61215: PUSH
61216: LD_INT 1
61218: NEG
61219: PUSH
61220: EMPTY
61221: LIST
61222: LIST
61223: PUSH
61224: LD_INT 1
61226: PUSH
61227: LD_INT 0
61229: PUSH
61230: EMPTY
61231: LIST
61232: LIST
61233: PUSH
61234: LD_INT 1
61236: PUSH
61237: LD_INT 1
61239: PUSH
61240: EMPTY
61241: LIST
61242: LIST
61243: PUSH
61244: LD_INT 0
61246: PUSH
61247: LD_INT 1
61249: PUSH
61250: EMPTY
61251: LIST
61252: LIST
61253: PUSH
61254: LD_INT 1
61256: NEG
61257: PUSH
61258: LD_INT 0
61260: PUSH
61261: EMPTY
61262: LIST
61263: LIST
61264: PUSH
61265: LD_INT 1
61267: NEG
61268: PUSH
61269: LD_INT 1
61271: NEG
61272: PUSH
61273: EMPTY
61274: LIST
61275: LIST
61276: PUSH
61277: LD_INT 1
61279: NEG
61280: PUSH
61281: LD_INT 2
61283: NEG
61284: PUSH
61285: EMPTY
61286: LIST
61287: LIST
61288: PUSH
61289: LD_INT 0
61291: PUSH
61292: LD_INT 2
61294: NEG
61295: PUSH
61296: EMPTY
61297: LIST
61298: LIST
61299: PUSH
61300: LD_INT 1
61302: PUSH
61303: LD_INT 1
61305: NEG
61306: PUSH
61307: EMPTY
61308: LIST
61309: LIST
61310: PUSH
61311: LD_INT 2
61313: PUSH
61314: LD_INT 0
61316: PUSH
61317: EMPTY
61318: LIST
61319: LIST
61320: PUSH
61321: LD_INT 2
61323: PUSH
61324: LD_INT 1
61326: PUSH
61327: EMPTY
61328: LIST
61329: LIST
61330: PUSH
61331: LD_INT 2
61333: PUSH
61334: LD_INT 2
61336: PUSH
61337: EMPTY
61338: LIST
61339: LIST
61340: PUSH
61341: LD_INT 1
61343: PUSH
61344: LD_INT 2
61346: PUSH
61347: EMPTY
61348: LIST
61349: LIST
61350: PUSH
61351: LD_INT 0
61353: PUSH
61354: LD_INT 2
61356: PUSH
61357: EMPTY
61358: LIST
61359: LIST
61360: PUSH
61361: LD_INT 1
61363: NEG
61364: PUSH
61365: LD_INT 1
61367: PUSH
61368: EMPTY
61369: LIST
61370: LIST
61371: PUSH
61372: LD_INT 2
61374: NEG
61375: PUSH
61376: LD_INT 0
61378: PUSH
61379: EMPTY
61380: LIST
61381: LIST
61382: PUSH
61383: LD_INT 2
61385: NEG
61386: PUSH
61387: LD_INT 1
61389: NEG
61390: PUSH
61391: EMPTY
61392: LIST
61393: LIST
61394: PUSH
61395: LD_INT 2
61397: NEG
61398: PUSH
61399: LD_INT 2
61401: NEG
61402: PUSH
61403: EMPTY
61404: LIST
61405: LIST
61406: PUSH
61407: EMPTY
61408: LIST
61409: LIST
61410: LIST
61411: LIST
61412: LIST
61413: LIST
61414: LIST
61415: LIST
61416: LIST
61417: LIST
61418: LIST
61419: LIST
61420: LIST
61421: LIST
61422: LIST
61423: LIST
61424: LIST
61425: LIST
61426: LIST
61427: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61428: LD_ADDR_VAR 0 58
61432: PUSH
61433: LD_INT 0
61435: PUSH
61436: LD_INT 0
61438: PUSH
61439: EMPTY
61440: LIST
61441: LIST
61442: PUSH
61443: LD_INT 0
61445: PUSH
61446: LD_INT 1
61448: NEG
61449: PUSH
61450: EMPTY
61451: LIST
61452: LIST
61453: PUSH
61454: LD_INT 1
61456: PUSH
61457: LD_INT 0
61459: PUSH
61460: EMPTY
61461: LIST
61462: LIST
61463: PUSH
61464: LD_INT 1
61466: PUSH
61467: LD_INT 1
61469: PUSH
61470: EMPTY
61471: LIST
61472: LIST
61473: PUSH
61474: LD_INT 0
61476: PUSH
61477: LD_INT 1
61479: PUSH
61480: EMPTY
61481: LIST
61482: LIST
61483: PUSH
61484: LD_INT 1
61486: NEG
61487: PUSH
61488: LD_INT 0
61490: PUSH
61491: EMPTY
61492: LIST
61493: LIST
61494: PUSH
61495: LD_INT 1
61497: NEG
61498: PUSH
61499: LD_INT 1
61501: NEG
61502: PUSH
61503: EMPTY
61504: LIST
61505: LIST
61506: PUSH
61507: LD_INT 1
61509: NEG
61510: PUSH
61511: LD_INT 2
61513: NEG
61514: PUSH
61515: EMPTY
61516: LIST
61517: LIST
61518: PUSH
61519: LD_INT 0
61521: PUSH
61522: LD_INT 2
61524: NEG
61525: PUSH
61526: EMPTY
61527: LIST
61528: LIST
61529: PUSH
61530: LD_INT 1
61532: PUSH
61533: LD_INT 1
61535: NEG
61536: PUSH
61537: EMPTY
61538: LIST
61539: LIST
61540: PUSH
61541: LD_INT 2
61543: PUSH
61544: LD_INT 0
61546: PUSH
61547: EMPTY
61548: LIST
61549: LIST
61550: PUSH
61551: LD_INT 2
61553: PUSH
61554: LD_INT 1
61556: PUSH
61557: EMPTY
61558: LIST
61559: LIST
61560: PUSH
61561: LD_INT 2
61563: PUSH
61564: LD_INT 2
61566: PUSH
61567: EMPTY
61568: LIST
61569: LIST
61570: PUSH
61571: LD_INT 1
61573: PUSH
61574: LD_INT 2
61576: PUSH
61577: EMPTY
61578: LIST
61579: LIST
61580: PUSH
61581: LD_INT 0
61583: PUSH
61584: LD_INT 2
61586: PUSH
61587: EMPTY
61588: LIST
61589: LIST
61590: PUSH
61591: LD_INT 1
61593: NEG
61594: PUSH
61595: LD_INT 1
61597: PUSH
61598: EMPTY
61599: LIST
61600: LIST
61601: PUSH
61602: LD_INT 2
61604: NEG
61605: PUSH
61606: LD_INT 0
61608: PUSH
61609: EMPTY
61610: LIST
61611: LIST
61612: PUSH
61613: LD_INT 2
61615: NEG
61616: PUSH
61617: LD_INT 1
61619: NEG
61620: PUSH
61621: EMPTY
61622: LIST
61623: LIST
61624: PUSH
61625: LD_INT 2
61627: NEG
61628: PUSH
61629: LD_INT 2
61631: NEG
61632: PUSH
61633: EMPTY
61634: LIST
61635: LIST
61636: PUSH
61637: EMPTY
61638: LIST
61639: LIST
61640: LIST
61641: LIST
61642: LIST
61643: LIST
61644: LIST
61645: LIST
61646: LIST
61647: LIST
61648: LIST
61649: LIST
61650: LIST
61651: LIST
61652: LIST
61653: LIST
61654: LIST
61655: LIST
61656: LIST
61657: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61658: LD_ADDR_VAR 0 59
61662: PUSH
61663: LD_INT 0
61665: PUSH
61666: LD_INT 0
61668: PUSH
61669: EMPTY
61670: LIST
61671: LIST
61672: PUSH
61673: LD_INT 0
61675: PUSH
61676: LD_INT 1
61678: NEG
61679: PUSH
61680: EMPTY
61681: LIST
61682: LIST
61683: PUSH
61684: LD_INT 1
61686: PUSH
61687: LD_INT 0
61689: PUSH
61690: EMPTY
61691: LIST
61692: LIST
61693: PUSH
61694: LD_INT 1
61696: PUSH
61697: LD_INT 1
61699: PUSH
61700: EMPTY
61701: LIST
61702: LIST
61703: PUSH
61704: LD_INT 0
61706: PUSH
61707: LD_INT 1
61709: PUSH
61710: EMPTY
61711: LIST
61712: LIST
61713: PUSH
61714: LD_INT 1
61716: NEG
61717: PUSH
61718: LD_INT 0
61720: PUSH
61721: EMPTY
61722: LIST
61723: LIST
61724: PUSH
61725: LD_INT 1
61727: NEG
61728: PUSH
61729: LD_INT 1
61731: NEG
61732: PUSH
61733: EMPTY
61734: LIST
61735: LIST
61736: PUSH
61737: EMPTY
61738: LIST
61739: LIST
61740: LIST
61741: LIST
61742: LIST
61743: LIST
61744: LIST
61745: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61746: LD_ADDR_VAR 0 60
61750: PUSH
61751: LD_INT 0
61753: PUSH
61754: LD_INT 0
61756: PUSH
61757: EMPTY
61758: LIST
61759: LIST
61760: PUSH
61761: LD_INT 0
61763: PUSH
61764: LD_INT 1
61766: NEG
61767: PUSH
61768: EMPTY
61769: LIST
61770: LIST
61771: PUSH
61772: LD_INT 1
61774: PUSH
61775: LD_INT 0
61777: PUSH
61778: EMPTY
61779: LIST
61780: LIST
61781: PUSH
61782: LD_INT 1
61784: PUSH
61785: LD_INT 1
61787: PUSH
61788: EMPTY
61789: LIST
61790: LIST
61791: PUSH
61792: LD_INT 0
61794: PUSH
61795: LD_INT 1
61797: PUSH
61798: EMPTY
61799: LIST
61800: LIST
61801: PUSH
61802: LD_INT 1
61804: NEG
61805: PUSH
61806: LD_INT 0
61808: PUSH
61809: EMPTY
61810: LIST
61811: LIST
61812: PUSH
61813: LD_INT 1
61815: NEG
61816: PUSH
61817: LD_INT 1
61819: NEG
61820: PUSH
61821: EMPTY
61822: LIST
61823: LIST
61824: PUSH
61825: EMPTY
61826: LIST
61827: LIST
61828: LIST
61829: LIST
61830: LIST
61831: LIST
61832: LIST
61833: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61834: LD_ADDR_VAR 0 61
61838: PUSH
61839: LD_INT 0
61841: PUSH
61842: LD_INT 0
61844: PUSH
61845: EMPTY
61846: LIST
61847: LIST
61848: PUSH
61849: LD_INT 0
61851: PUSH
61852: LD_INT 1
61854: NEG
61855: PUSH
61856: EMPTY
61857: LIST
61858: LIST
61859: PUSH
61860: LD_INT 1
61862: PUSH
61863: LD_INT 0
61865: PUSH
61866: EMPTY
61867: LIST
61868: LIST
61869: PUSH
61870: LD_INT 1
61872: PUSH
61873: LD_INT 1
61875: PUSH
61876: EMPTY
61877: LIST
61878: LIST
61879: PUSH
61880: LD_INT 0
61882: PUSH
61883: LD_INT 1
61885: PUSH
61886: EMPTY
61887: LIST
61888: LIST
61889: PUSH
61890: LD_INT 1
61892: NEG
61893: PUSH
61894: LD_INT 0
61896: PUSH
61897: EMPTY
61898: LIST
61899: LIST
61900: PUSH
61901: LD_INT 1
61903: NEG
61904: PUSH
61905: LD_INT 1
61907: NEG
61908: PUSH
61909: EMPTY
61910: LIST
61911: LIST
61912: PUSH
61913: EMPTY
61914: LIST
61915: LIST
61916: LIST
61917: LIST
61918: LIST
61919: LIST
61920: LIST
61921: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61922: LD_ADDR_VAR 0 62
61926: PUSH
61927: LD_INT 0
61929: PUSH
61930: LD_INT 0
61932: PUSH
61933: EMPTY
61934: LIST
61935: LIST
61936: PUSH
61937: LD_INT 0
61939: PUSH
61940: LD_INT 1
61942: NEG
61943: PUSH
61944: EMPTY
61945: LIST
61946: LIST
61947: PUSH
61948: LD_INT 1
61950: PUSH
61951: LD_INT 0
61953: PUSH
61954: EMPTY
61955: LIST
61956: LIST
61957: PUSH
61958: LD_INT 1
61960: PUSH
61961: LD_INT 1
61963: PUSH
61964: EMPTY
61965: LIST
61966: LIST
61967: PUSH
61968: LD_INT 0
61970: PUSH
61971: LD_INT 1
61973: PUSH
61974: EMPTY
61975: LIST
61976: LIST
61977: PUSH
61978: LD_INT 1
61980: NEG
61981: PUSH
61982: LD_INT 0
61984: PUSH
61985: EMPTY
61986: LIST
61987: LIST
61988: PUSH
61989: LD_INT 1
61991: NEG
61992: PUSH
61993: LD_INT 1
61995: NEG
61996: PUSH
61997: EMPTY
61998: LIST
61999: LIST
62000: PUSH
62001: EMPTY
62002: LIST
62003: LIST
62004: LIST
62005: LIST
62006: LIST
62007: LIST
62008: LIST
62009: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62010: LD_ADDR_VAR 0 63
62014: PUSH
62015: LD_INT 0
62017: PUSH
62018: LD_INT 0
62020: PUSH
62021: EMPTY
62022: LIST
62023: LIST
62024: PUSH
62025: LD_INT 0
62027: PUSH
62028: LD_INT 1
62030: NEG
62031: PUSH
62032: EMPTY
62033: LIST
62034: LIST
62035: PUSH
62036: LD_INT 1
62038: PUSH
62039: LD_INT 0
62041: PUSH
62042: EMPTY
62043: LIST
62044: LIST
62045: PUSH
62046: LD_INT 1
62048: PUSH
62049: LD_INT 1
62051: PUSH
62052: EMPTY
62053: LIST
62054: LIST
62055: PUSH
62056: LD_INT 0
62058: PUSH
62059: LD_INT 1
62061: PUSH
62062: EMPTY
62063: LIST
62064: LIST
62065: PUSH
62066: LD_INT 1
62068: NEG
62069: PUSH
62070: LD_INT 0
62072: PUSH
62073: EMPTY
62074: LIST
62075: LIST
62076: PUSH
62077: LD_INT 1
62079: NEG
62080: PUSH
62081: LD_INT 1
62083: NEG
62084: PUSH
62085: EMPTY
62086: LIST
62087: LIST
62088: PUSH
62089: EMPTY
62090: LIST
62091: LIST
62092: LIST
62093: LIST
62094: LIST
62095: LIST
62096: LIST
62097: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62098: LD_ADDR_VAR 0 64
62102: PUSH
62103: LD_INT 0
62105: PUSH
62106: LD_INT 0
62108: PUSH
62109: EMPTY
62110: LIST
62111: LIST
62112: PUSH
62113: LD_INT 0
62115: PUSH
62116: LD_INT 1
62118: NEG
62119: PUSH
62120: EMPTY
62121: LIST
62122: LIST
62123: PUSH
62124: LD_INT 1
62126: PUSH
62127: LD_INT 0
62129: PUSH
62130: EMPTY
62131: LIST
62132: LIST
62133: PUSH
62134: LD_INT 1
62136: PUSH
62137: LD_INT 1
62139: PUSH
62140: EMPTY
62141: LIST
62142: LIST
62143: PUSH
62144: LD_INT 0
62146: PUSH
62147: LD_INT 1
62149: PUSH
62150: EMPTY
62151: LIST
62152: LIST
62153: PUSH
62154: LD_INT 1
62156: NEG
62157: PUSH
62158: LD_INT 0
62160: PUSH
62161: EMPTY
62162: LIST
62163: LIST
62164: PUSH
62165: LD_INT 1
62167: NEG
62168: PUSH
62169: LD_INT 1
62171: NEG
62172: PUSH
62173: EMPTY
62174: LIST
62175: LIST
62176: PUSH
62177: EMPTY
62178: LIST
62179: LIST
62180: LIST
62181: LIST
62182: LIST
62183: LIST
62184: LIST
62185: ST_TO_ADDR
// end ; 1 :
62186: GO 68083
62188: LD_INT 1
62190: DOUBLE
62191: EQUAL
62192: IFTRUE 62196
62194: GO 64819
62196: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
62197: LD_ADDR_VAR 0 11
62201: PUSH
62202: LD_INT 1
62204: NEG
62205: PUSH
62206: LD_INT 3
62208: NEG
62209: PUSH
62210: EMPTY
62211: LIST
62212: LIST
62213: PUSH
62214: LD_INT 0
62216: PUSH
62217: LD_INT 3
62219: NEG
62220: PUSH
62221: EMPTY
62222: LIST
62223: LIST
62224: PUSH
62225: LD_INT 1
62227: PUSH
62228: LD_INT 2
62230: NEG
62231: PUSH
62232: EMPTY
62233: LIST
62234: LIST
62235: PUSH
62236: EMPTY
62237: LIST
62238: LIST
62239: LIST
62240: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
62241: LD_ADDR_VAR 0 12
62245: PUSH
62246: LD_INT 2
62248: PUSH
62249: LD_INT 1
62251: NEG
62252: PUSH
62253: EMPTY
62254: LIST
62255: LIST
62256: PUSH
62257: LD_INT 3
62259: PUSH
62260: LD_INT 0
62262: PUSH
62263: EMPTY
62264: LIST
62265: LIST
62266: PUSH
62267: LD_INT 3
62269: PUSH
62270: LD_INT 1
62272: PUSH
62273: EMPTY
62274: LIST
62275: LIST
62276: PUSH
62277: EMPTY
62278: LIST
62279: LIST
62280: LIST
62281: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
62282: LD_ADDR_VAR 0 13
62286: PUSH
62287: LD_INT 3
62289: PUSH
62290: LD_INT 2
62292: PUSH
62293: EMPTY
62294: LIST
62295: LIST
62296: PUSH
62297: LD_INT 3
62299: PUSH
62300: LD_INT 3
62302: PUSH
62303: EMPTY
62304: LIST
62305: LIST
62306: PUSH
62307: LD_INT 2
62309: PUSH
62310: LD_INT 3
62312: PUSH
62313: EMPTY
62314: LIST
62315: LIST
62316: PUSH
62317: EMPTY
62318: LIST
62319: LIST
62320: LIST
62321: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
62322: LD_ADDR_VAR 0 14
62326: PUSH
62327: LD_INT 1
62329: PUSH
62330: LD_INT 3
62332: PUSH
62333: EMPTY
62334: LIST
62335: LIST
62336: PUSH
62337: LD_INT 0
62339: PUSH
62340: LD_INT 3
62342: PUSH
62343: EMPTY
62344: LIST
62345: LIST
62346: PUSH
62347: LD_INT 1
62349: NEG
62350: PUSH
62351: LD_INT 2
62353: PUSH
62354: EMPTY
62355: LIST
62356: LIST
62357: PUSH
62358: EMPTY
62359: LIST
62360: LIST
62361: LIST
62362: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62363: LD_ADDR_VAR 0 15
62367: PUSH
62368: LD_INT 2
62370: NEG
62371: PUSH
62372: LD_INT 1
62374: PUSH
62375: EMPTY
62376: LIST
62377: LIST
62378: PUSH
62379: LD_INT 3
62381: NEG
62382: PUSH
62383: LD_INT 0
62385: PUSH
62386: EMPTY
62387: LIST
62388: LIST
62389: PUSH
62390: LD_INT 3
62392: NEG
62393: PUSH
62394: LD_INT 1
62396: NEG
62397: PUSH
62398: EMPTY
62399: LIST
62400: LIST
62401: PUSH
62402: EMPTY
62403: LIST
62404: LIST
62405: LIST
62406: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62407: LD_ADDR_VAR 0 16
62411: PUSH
62412: LD_INT 2
62414: NEG
62415: PUSH
62416: LD_INT 3
62418: NEG
62419: PUSH
62420: EMPTY
62421: LIST
62422: LIST
62423: PUSH
62424: LD_INT 3
62426: NEG
62427: PUSH
62428: LD_INT 2
62430: NEG
62431: PUSH
62432: EMPTY
62433: LIST
62434: LIST
62435: PUSH
62436: LD_INT 3
62438: NEG
62439: PUSH
62440: LD_INT 3
62442: NEG
62443: PUSH
62444: EMPTY
62445: LIST
62446: LIST
62447: PUSH
62448: EMPTY
62449: LIST
62450: LIST
62451: LIST
62452: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
62453: LD_ADDR_VAR 0 17
62457: PUSH
62458: LD_INT 1
62460: NEG
62461: PUSH
62462: LD_INT 3
62464: NEG
62465: PUSH
62466: EMPTY
62467: LIST
62468: LIST
62469: PUSH
62470: LD_INT 0
62472: PUSH
62473: LD_INT 3
62475: NEG
62476: PUSH
62477: EMPTY
62478: LIST
62479: LIST
62480: PUSH
62481: LD_INT 1
62483: PUSH
62484: LD_INT 2
62486: NEG
62487: PUSH
62488: EMPTY
62489: LIST
62490: LIST
62491: PUSH
62492: EMPTY
62493: LIST
62494: LIST
62495: LIST
62496: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
62497: LD_ADDR_VAR 0 18
62501: PUSH
62502: LD_INT 2
62504: PUSH
62505: LD_INT 1
62507: NEG
62508: PUSH
62509: EMPTY
62510: LIST
62511: LIST
62512: PUSH
62513: LD_INT 3
62515: PUSH
62516: LD_INT 0
62518: PUSH
62519: EMPTY
62520: LIST
62521: LIST
62522: PUSH
62523: LD_INT 3
62525: PUSH
62526: LD_INT 1
62528: PUSH
62529: EMPTY
62530: LIST
62531: LIST
62532: PUSH
62533: EMPTY
62534: LIST
62535: LIST
62536: LIST
62537: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
62538: LD_ADDR_VAR 0 19
62542: PUSH
62543: LD_INT 3
62545: PUSH
62546: LD_INT 2
62548: PUSH
62549: EMPTY
62550: LIST
62551: LIST
62552: PUSH
62553: LD_INT 3
62555: PUSH
62556: LD_INT 3
62558: PUSH
62559: EMPTY
62560: LIST
62561: LIST
62562: PUSH
62563: LD_INT 2
62565: PUSH
62566: LD_INT 3
62568: PUSH
62569: EMPTY
62570: LIST
62571: LIST
62572: PUSH
62573: EMPTY
62574: LIST
62575: LIST
62576: LIST
62577: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
62578: LD_ADDR_VAR 0 20
62582: PUSH
62583: LD_INT 1
62585: PUSH
62586: LD_INT 3
62588: PUSH
62589: EMPTY
62590: LIST
62591: LIST
62592: PUSH
62593: LD_INT 0
62595: PUSH
62596: LD_INT 3
62598: PUSH
62599: EMPTY
62600: LIST
62601: LIST
62602: PUSH
62603: LD_INT 1
62605: NEG
62606: PUSH
62607: LD_INT 2
62609: PUSH
62610: EMPTY
62611: LIST
62612: LIST
62613: PUSH
62614: EMPTY
62615: LIST
62616: LIST
62617: LIST
62618: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62619: LD_ADDR_VAR 0 21
62623: PUSH
62624: LD_INT 2
62626: NEG
62627: PUSH
62628: LD_INT 1
62630: PUSH
62631: EMPTY
62632: LIST
62633: LIST
62634: PUSH
62635: LD_INT 3
62637: NEG
62638: PUSH
62639: LD_INT 0
62641: PUSH
62642: EMPTY
62643: LIST
62644: LIST
62645: PUSH
62646: LD_INT 3
62648: NEG
62649: PUSH
62650: LD_INT 1
62652: NEG
62653: PUSH
62654: EMPTY
62655: LIST
62656: LIST
62657: PUSH
62658: EMPTY
62659: LIST
62660: LIST
62661: LIST
62662: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62663: LD_ADDR_VAR 0 22
62667: PUSH
62668: LD_INT 2
62670: NEG
62671: PUSH
62672: LD_INT 3
62674: NEG
62675: PUSH
62676: EMPTY
62677: LIST
62678: LIST
62679: PUSH
62680: LD_INT 3
62682: NEG
62683: PUSH
62684: LD_INT 2
62686: NEG
62687: PUSH
62688: EMPTY
62689: LIST
62690: LIST
62691: PUSH
62692: LD_INT 3
62694: NEG
62695: PUSH
62696: LD_INT 3
62698: NEG
62699: PUSH
62700: EMPTY
62701: LIST
62702: LIST
62703: PUSH
62704: EMPTY
62705: LIST
62706: LIST
62707: LIST
62708: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
62709: LD_ADDR_VAR 0 23
62713: PUSH
62714: LD_INT 0
62716: PUSH
62717: LD_INT 3
62719: NEG
62720: PUSH
62721: EMPTY
62722: LIST
62723: LIST
62724: PUSH
62725: LD_INT 1
62727: NEG
62728: PUSH
62729: LD_INT 4
62731: NEG
62732: PUSH
62733: EMPTY
62734: LIST
62735: LIST
62736: PUSH
62737: LD_INT 1
62739: PUSH
62740: LD_INT 3
62742: NEG
62743: PUSH
62744: EMPTY
62745: LIST
62746: LIST
62747: PUSH
62748: EMPTY
62749: LIST
62750: LIST
62751: LIST
62752: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
62753: LD_ADDR_VAR 0 24
62757: PUSH
62758: LD_INT 3
62760: PUSH
62761: LD_INT 0
62763: PUSH
62764: EMPTY
62765: LIST
62766: LIST
62767: PUSH
62768: LD_INT 3
62770: PUSH
62771: LD_INT 1
62773: NEG
62774: PUSH
62775: EMPTY
62776: LIST
62777: LIST
62778: PUSH
62779: LD_INT 4
62781: PUSH
62782: LD_INT 1
62784: PUSH
62785: EMPTY
62786: LIST
62787: LIST
62788: PUSH
62789: EMPTY
62790: LIST
62791: LIST
62792: LIST
62793: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
62794: LD_ADDR_VAR 0 25
62798: PUSH
62799: LD_INT 3
62801: PUSH
62802: LD_INT 3
62804: PUSH
62805: EMPTY
62806: LIST
62807: LIST
62808: PUSH
62809: LD_INT 4
62811: PUSH
62812: LD_INT 3
62814: PUSH
62815: EMPTY
62816: LIST
62817: LIST
62818: PUSH
62819: LD_INT 3
62821: PUSH
62822: LD_INT 4
62824: PUSH
62825: EMPTY
62826: LIST
62827: LIST
62828: PUSH
62829: EMPTY
62830: LIST
62831: LIST
62832: LIST
62833: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
62834: LD_ADDR_VAR 0 26
62838: PUSH
62839: LD_INT 0
62841: PUSH
62842: LD_INT 3
62844: PUSH
62845: EMPTY
62846: LIST
62847: LIST
62848: PUSH
62849: LD_INT 1
62851: PUSH
62852: LD_INT 4
62854: PUSH
62855: EMPTY
62856: LIST
62857: LIST
62858: PUSH
62859: LD_INT 1
62861: NEG
62862: PUSH
62863: LD_INT 3
62865: PUSH
62866: EMPTY
62867: LIST
62868: LIST
62869: PUSH
62870: EMPTY
62871: LIST
62872: LIST
62873: LIST
62874: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
62875: LD_ADDR_VAR 0 27
62879: PUSH
62880: LD_INT 3
62882: NEG
62883: PUSH
62884: LD_INT 0
62886: PUSH
62887: EMPTY
62888: LIST
62889: LIST
62890: PUSH
62891: LD_INT 3
62893: NEG
62894: PUSH
62895: LD_INT 1
62897: PUSH
62898: EMPTY
62899: LIST
62900: LIST
62901: PUSH
62902: LD_INT 4
62904: NEG
62905: PUSH
62906: LD_INT 1
62908: NEG
62909: PUSH
62910: EMPTY
62911: LIST
62912: LIST
62913: PUSH
62914: EMPTY
62915: LIST
62916: LIST
62917: LIST
62918: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
62919: LD_ADDR_VAR 0 28
62923: PUSH
62924: LD_INT 3
62926: NEG
62927: PUSH
62928: LD_INT 3
62930: NEG
62931: PUSH
62932: EMPTY
62933: LIST
62934: LIST
62935: PUSH
62936: LD_INT 3
62938: NEG
62939: PUSH
62940: LD_INT 4
62942: NEG
62943: PUSH
62944: EMPTY
62945: LIST
62946: LIST
62947: PUSH
62948: LD_INT 4
62950: NEG
62951: PUSH
62952: LD_INT 3
62954: NEG
62955: PUSH
62956: EMPTY
62957: LIST
62958: LIST
62959: PUSH
62960: EMPTY
62961: LIST
62962: LIST
62963: LIST
62964: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
62965: LD_ADDR_VAR 0 29
62969: PUSH
62970: LD_INT 1
62972: NEG
62973: PUSH
62974: LD_INT 3
62976: NEG
62977: PUSH
62978: EMPTY
62979: LIST
62980: LIST
62981: PUSH
62982: LD_INT 0
62984: PUSH
62985: LD_INT 3
62987: NEG
62988: PUSH
62989: EMPTY
62990: LIST
62991: LIST
62992: PUSH
62993: LD_INT 1
62995: PUSH
62996: LD_INT 2
62998: NEG
62999: PUSH
63000: EMPTY
63001: LIST
63002: LIST
63003: PUSH
63004: LD_INT 1
63006: NEG
63007: PUSH
63008: LD_INT 4
63010: NEG
63011: PUSH
63012: EMPTY
63013: LIST
63014: LIST
63015: PUSH
63016: LD_INT 0
63018: PUSH
63019: LD_INT 4
63021: NEG
63022: PUSH
63023: EMPTY
63024: LIST
63025: LIST
63026: PUSH
63027: LD_INT 1
63029: PUSH
63030: LD_INT 3
63032: NEG
63033: PUSH
63034: EMPTY
63035: LIST
63036: LIST
63037: PUSH
63038: LD_INT 1
63040: NEG
63041: PUSH
63042: LD_INT 5
63044: NEG
63045: PUSH
63046: EMPTY
63047: LIST
63048: LIST
63049: PUSH
63050: LD_INT 0
63052: PUSH
63053: LD_INT 5
63055: NEG
63056: PUSH
63057: EMPTY
63058: LIST
63059: LIST
63060: PUSH
63061: LD_INT 1
63063: PUSH
63064: LD_INT 4
63066: NEG
63067: PUSH
63068: EMPTY
63069: LIST
63070: LIST
63071: PUSH
63072: LD_INT 1
63074: NEG
63075: PUSH
63076: LD_INT 6
63078: NEG
63079: PUSH
63080: EMPTY
63081: LIST
63082: LIST
63083: PUSH
63084: LD_INT 0
63086: PUSH
63087: LD_INT 6
63089: NEG
63090: PUSH
63091: EMPTY
63092: LIST
63093: LIST
63094: PUSH
63095: LD_INT 1
63097: PUSH
63098: LD_INT 5
63100: NEG
63101: PUSH
63102: EMPTY
63103: LIST
63104: LIST
63105: PUSH
63106: EMPTY
63107: LIST
63108: LIST
63109: LIST
63110: LIST
63111: LIST
63112: LIST
63113: LIST
63114: LIST
63115: LIST
63116: LIST
63117: LIST
63118: LIST
63119: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
63120: LD_ADDR_VAR 0 30
63124: PUSH
63125: LD_INT 2
63127: PUSH
63128: LD_INT 1
63130: NEG
63131: PUSH
63132: EMPTY
63133: LIST
63134: LIST
63135: PUSH
63136: LD_INT 3
63138: PUSH
63139: LD_INT 0
63141: PUSH
63142: EMPTY
63143: LIST
63144: LIST
63145: PUSH
63146: LD_INT 3
63148: PUSH
63149: LD_INT 1
63151: PUSH
63152: EMPTY
63153: LIST
63154: LIST
63155: PUSH
63156: LD_INT 3
63158: PUSH
63159: LD_INT 1
63161: NEG
63162: PUSH
63163: EMPTY
63164: LIST
63165: LIST
63166: PUSH
63167: LD_INT 4
63169: PUSH
63170: LD_INT 0
63172: PUSH
63173: EMPTY
63174: LIST
63175: LIST
63176: PUSH
63177: LD_INT 4
63179: PUSH
63180: LD_INT 1
63182: PUSH
63183: EMPTY
63184: LIST
63185: LIST
63186: PUSH
63187: LD_INT 4
63189: PUSH
63190: LD_INT 1
63192: NEG
63193: PUSH
63194: EMPTY
63195: LIST
63196: LIST
63197: PUSH
63198: LD_INT 5
63200: PUSH
63201: LD_INT 0
63203: PUSH
63204: EMPTY
63205: LIST
63206: LIST
63207: PUSH
63208: LD_INT 5
63210: PUSH
63211: LD_INT 1
63213: PUSH
63214: EMPTY
63215: LIST
63216: LIST
63217: PUSH
63218: LD_INT 5
63220: PUSH
63221: LD_INT 1
63223: NEG
63224: PUSH
63225: EMPTY
63226: LIST
63227: LIST
63228: PUSH
63229: LD_INT 6
63231: PUSH
63232: LD_INT 0
63234: PUSH
63235: EMPTY
63236: LIST
63237: LIST
63238: PUSH
63239: LD_INT 6
63241: PUSH
63242: LD_INT 1
63244: PUSH
63245: EMPTY
63246: LIST
63247: LIST
63248: PUSH
63249: EMPTY
63250: LIST
63251: LIST
63252: LIST
63253: LIST
63254: LIST
63255: LIST
63256: LIST
63257: LIST
63258: LIST
63259: LIST
63260: LIST
63261: LIST
63262: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
63263: LD_ADDR_VAR 0 31
63267: PUSH
63268: LD_INT 3
63270: PUSH
63271: LD_INT 2
63273: PUSH
63274: EMPTY
63275: LIST
63276: LIST
63277: PUSH
63278: LD_INT 3
63280: PUSH
63281: LD_INT 3
63283: PUSH
63284: EMPTY
63285: LIST
63286: LIST
63287: PUSH
63288: LD_INT 2
63290: PUSH
63291: LD_INT 3
63293: PUSH
63294: EMPTY
63295: LIST
63296: LIST
63297: PUSH
63298: LD_INT 4
63300: PUSH
63301: LD_INT 3
63303: PUSH
63304: EMPTY
63305: LIST
63306: LIST
63307: PUSH
63308: LD_INT 4
63310: PUSH
63311: LD_INT 4
63313: PUSH
63314: EMPTY
63315: LIST
63316: LIST
63317: PUSH
63318: LD_INT 3
63320: PUSH
63321: LD_INT 4
63323: PUSH
63324: EMPTY
63325: LIST
63326: LIST
63327: PUSH
63328: LD_INT 5
63330: PUSH
63331: LD_INT 4
63333: PUSH
63334: EMPTY
63335: LIST
63336: LIST
63337: PUSH
63338: LD_INT 5
63340: PUSH
63341: LD_INT 5
63343: PUSH
63344: EMPTY
63345: LIST
63346: LIST
63347: PUSH
63348: LD_INT 4
63350: PUSH
63351: LD_INT 5
63353: PUSH
63354: EMPTY
63355: LIST
63356: LIST
63357: PUSH
63358: LD_INT 6
63360: PUSH
63361: LD_INT 5
63363: PUSH
63364: EMPTY
63365: LIST
63366: LIST
63367: PUSH
63368: LD_INT 6
63370: PUSH
63371: LD_INT 6
63373: PUSH
63374: EMPTY
63375: LIST
63376: LIST
63377: PUSH
63378: LD_INT 5
63380: PUSH
63381: LD_INT 6
63383: PUSH
63384: EMPTY
63385: LIST
63386: LIST
63387: PUSH
63388: EMPTY
63389: LIST
63390: LIST
63391: LIST
63392: LIST
63393: LIST
63394: LIST
63395: LIST
63396: LIST
63397: LIST
63398: LIST
63399: LIST
63400: LIST
63401: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
63402: LD_ADDR_VAR 0 32
63406: PUSH
63407: LD_INT 1
63409: PUSH
63410: LD_INT 3
63412: PUSH
63413: EMPTY
63414: LIST
63415: LIST
63416: PUSH
63417: LD_INT 0
63419: PUSH
63420: LD_INT 3
63422: PUSH
63423: EMPTY
63424: LIST
63425: LIST
63426: PUSH
63427: LD_INT 1
63429: NEG
63430: PUSH
63431: LD_INT 2
63433: PUSH
63434: EMPTY
63435: LIST
63436: LIST
63437: PUSH
63438: LD_INT 1
63440: PUSH
63441: LD_INT 4
63443: PUSH
63444: EMPTY
63445: LIST
63446: LIST
63447: PUSH
63448: LD_INT 0
63450: PUSH
63451: LD_INT 4
63453: PUSH
63454: EMPTY
63455: LIST
63456: LIST
63457: PUSH
63458: LD_INT 1
63460: NEG
63461: PUSH
63462: LD_INT 3
63464: PUSH
63465: EMPTY
63466: LIST
63467: LIST
63468: PUSH
63469: LD_INT 1
63471: PUSH
63472: LD_INT 5
63474: PUSH
63475: EMPTY
63476: LIST
63477: LIST
63478: PUSH
63479: LD_INT 0
63481: PUSH
63482: LD_INT 5
63484: PUSH
63485: EMPTY
63486: LIST
63487: LIST
63488: PUSH
63489: LD_INT 1
63491: NEG
63492: PUSH
63493: LD_INT 4
63495: PUSH
63496: EMPTY
63497: LIST
63498: LIST
63499: PUSH
63500: LD_INT 1
63502: PUSH
63503: LD_INT 6
63505: PUSH
63506: EMPTY
63507: LIST
63508: LIST
63509: PUSH
63510: LD_INT 0
63512: PUSH
63513: LD_INT 6
63515: PUSH
63516: EMPTY
63517: LIST
63518: LIST
63519: PUSH
63520: LD_INT 1
63522: NEG
63523: PUSH
63524: LD_INT 5
63526: PUSH
63527: EMPTY
63528: LIST
63529: LIST
63530: PUSH
63531: EMPTY
63532: LIST
63533: LIST
63534: LIST
63535: LIST
63536: LIST
63537: LIST
63538: LIST
63539: LIST
63540: LIST
63541: LIST
63542: LIST
63543: LIST
63544: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
63545: LD_ADDR_VAR 0 33
63549: PUSH
63550: LD_INT 2
63552: NEG
63553: PUSH
63554: LD_INT 1
63556: PUSH
63557: EMPTY
63558: LIST
63559: LIST
63560: PUSH
63561: LD_INT 3
63563: NEG
63564: PUSH
63565: LD_INT 0
63567: PUSH
63568: EMPTY
63569: LIST
63570: LIST
63571: PUSH
63572: LD_INT 3
63574: NEG
63575: PUSH
63576: LD_INT 1
63578: NEG
63579: PUSH
63580: EMPTY
63581: LIST
63582: LIST
63583: PUSH
63584: LD_INT 3
63586: NEG
63587: PUSH
63588: LD_INT 1
63590: PUSH
63591: EMPTY
63592: LIST
63593: LIST
63594: PUSH
63595: LD_INT 4
63597: NEG
63598: PUSH
63599: LD_INT 0
63601: PUSH
63602: EMPTY
63603: LIST
63604: LIST
63605: PUSH
63606: LD_INT 4
63608: NEG
63609: PUSH
63610: LD_INT 1
63612: NEG
63613: PUSH
63614: EMPTY
63615: LIST
63616: LIST
63617: PUSH
63618: LD_INT 4
63620: NEG
63621: PUSH
63622: LD_INT 1
63624: PUSH
63625: EMPTY
63626: LIST
63627: LIST
63628: PUSH
63629: LD_INT 5
63631: NEG
63632: PUSH
63633: LD_INT 0
63635: PUSH
63636: EMPTY
63637: LIST
63638: LIST
63639: PUSH
63640: LD_INT 5
63642: NEG
63643: PUSH
63644: LD_INT 1
63646: NEG
63647: PUSH
63648: EMPTY
63649: LIST
63650: LIST
63651: PUSH
63652: LD_INT 5
63654: NEG
63655: PUSH
63656: LD_INT 1
63658: PUSH
63659: EMPTY
63660: LIST
63661: LIST
63662: PUSH
63663: LD_INT 6
63665: NEG
63666: PUSH
63667: LD_INT 0
63669: PUSH
63670: EMPTY
63671: LIST
63672: LIST
63673: PUSH
63674: LD_INT 6
63676: NEG
63677: PUSH
63678: LD_INT 1
63680: NEG
63681: PUSH
63682: EMPTY
63683: LIST
63684: LIST
63685: PUSH
63686: EMPTY
63687: LIST
63688: LIST
63689: LIST
63690: LIST
63691: LIST
63692: LIST
63693: LIST
63694: LIST
63695: LIST
63696: LIST
63697: LIST
63698: LIST
63699: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
63700: LD_ADDR_VAR 0 34
63704: PUSH
63705: LD_INT 2
63707: NEG
63708: PUSH
63709: LD_INT 3
63711: NEG
63712: PUSH
63713: EMPTY
63714: LIST
63715: LIST
63716: PUSH
63717: LD_INT 3
63719: NEG
63720: PUSH
63721: LD_INT 2
63723: NEG
63724: PUSH
63725: EMPTY
63726: LIST
63727: LIST
63728: PUSH
63729: LD_INT 3
63731: NEG
63732: PUSH
63733: LD_INT 3
63735: NEG
63736: PUSH
63737: EMPTY
63738: LIST
63739: LIST
63740: PUSH
63741: LD_INT 3
63743: NEG
63744: PUSH
63745: LD_INT 4
63747: NEG
63748: PUSH
63749: EMPTY
63750: LIST
63751: LIST
63752: PUSH
63753: LD_INT 4
63755: NEG
63756: PUSH
63757: LD_INT 3
63759: NEG
63760: PUSH
63761: EMPTY
63762: LIST
63763: LIST
63764: PUSH
63765: LD_INT 4
63767: NEG
63768: PUSH
63769: LD_INT 4
63771: NEG
63772: PUSH
63773: EMPTY
63774: LIST
63775: LIST
63776: PUSH
63777: LD_INT 4
63779: NEG
63780: PUSH
63781: LD_INT 5
63783: NEG
63784: PUSH
63785: EMPTY
63786: LIST
63787: LIST
63788: PUSH
63789: LD_INT 5
63791: NEG
63792: PUSH
63793: LD_INT 4
63795: NEG
63796: PUSH
63797: EMPTY
63798: LIST
63799: LIST
63800: PUSH
63801: LD_INT 5
63803: NEG
63804: PUSH
63805: LD_INT 5
63807: NEG
63808: PUSH
63809: EMPTY
63810: LIST
63811: LIST
63812: PUSH
63813: LD_INT 5
63815: NEG
63816: PUSH
63817: LD_INT 6
63819: NEG
63820: PUSH
63821: EMPTY
63822: LIST
63823: LIST
63824: PUSH
63825: LD_INT 6
63827: NEG
63828: PUSH
63829: LD_INT 5
63831: NEG
63832: PUSH
63833: EMPTY
63834: LIST
63835: LIST
63836: PUSH
63837: LD_INT 6
63839: NEG
63840: PUSH
63841: LD_INT 6
63843: NEG
63844: PUSH
63845: EMPTY
63846: LIST
63847: LIST
63848: PUSH
63849: EMPTY
63850: LIST
63851: LIST
63852: LIST
63853: LIST
63854: LIST
63855: LIST
63856: LIST
63857: LIST
63858: LIST
63859: LIST
63860: LIST
63861: LIST
63862: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
63863: LD_ADDR_VAR 0 41
63867: PUSH
63868: LD_INT 0
63870: PUSH
63871: LD_INT 2
63873: NEG
63874: PUSH
63875: EMPTY
63876: LIST
63877: LIST
63878: PUSH
63879: LD_INT 1
63881: NEG
63882: PUSH
63883: LD_INT 3
63885: NEG
63886: PUSH
63887: EMPTY
63888: LIST
63889: LIST
63890: PUSH
63891: LD_INT 1
63893: PUSH
63894: LD_INT 2
63896: NEG
63897: PUSH
63898: EMPTY
63899: LIST
63900: LIST
63901: PUSH
63902: EMPTY
63903: LIST
63904: LIST
63905: LIST
63906: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
63907: LD_ADDR_VAR 0 42
63911: PUSH
63912: LD_INT 2
63914: PUSH
63915: LD_INT 0
63917: PUSH
63918: EMPTY
63919: LIST
63920: LIST
63921: PUSH
63922: LD_INT 2
63924: PUSH
63925: LD_INT 1
63927: NEG
63928: PUSH
63929: EMPTY
63930: LIST
63931: LIST
63932: PUSH
63933: LD_INT 3
63935: PUSH
63936: LD_INT 1
63938: PUSH
63939: EMPTY
63940: LIST
63941: LIST
63942: PUSH
63943: EMPTY
63944: LIST
63945: LIST
63946: LIST
63947: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
63948: LD_ADDR_VAR 0 43
63952: PUSH
63953: LD_INT 2
63955: PUSH
63956: LD_INT 2
63958: PUSH
63959: EMPTY
63960: LIST
63961: LIST
63962: PUSH
63963: LD_INT 3
63965: PUSH
63966: LD_INT 2
63968: PUSH
63969: EMPTY
63970: LIST
63971: LIST
63972: PUSH
63973: LD_INT 2
63975: PUSH
63976: LD_INT 3
63978: PUSH
63979: EMPTY
63980: LIST
63981: LIST
63982: PUSH
63983: EMPTY
63984: LIST
63985: LIST
63986: LIST
63987: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
63988: LD_ADDR_VAR 0 44
63992: PUSH
63993: LD_INT 0
63995: PUSH
63996: LD_INT 2
63998: PUSH
63999: EMPTY
64000: LIST
64001: LIST
64002: PUSH
64003: LD_INT 1
64005: PUSH
64006: LD_INT 3
64008: PUSH
64009: EMPTY
64010: LIST
64011: LIST
64012: PUSH
64013: LD_INT 1
64015: NEG
64016: PUSH
64017: LD_INT 2
64019: PUSH
64020: EMPTY
64021: LIST
64022: LIST
64023: PUSH
64024: EMPTY
64025: LIST
64026: LIST
64027: LIST
64028: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
64029: LD_ADDR_VAR 0 45
64033: PUSH
64034: LD_INT 2
64036: NEG
64037: PUSH
64038: LD_INT 0
64040: PUSH
64041: EMPTY
64042: LIST
64043: LIST
64044: PUSH
64045: LD_INT 2
64047: NEG
64048: PUSH
64049: LD_INT 1
64051: PUSH
64052: EMPTY
64053: LIST
64054: LIST
64055: PUSH
64056: LD_INT 3
64058: NEG
64059: PUSH
64060: LD_INT 1
64062: NEG
64063: PUSH
64064: EMPTY
64065: LIST
64066: LIST
64067: PUSH
64068: EMPTY
64069: LIST
64070: LIST
64071: LIST
64072: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
64073: LD_ADDR_VAR 0 46
64077: PUSH
64078: LD_INT 2
64080: NEG
64081: PUSH
64082: LD_INT 2
64084: NEG
64085: PUSH
64086: EMPTY
64087: LIST
64088: LIST
64089: PUSH
64090: LD_INT 2
64092: NEG
64093: PUSH
64094: LD_INT 3
64096: NEG
64097: PUSH
64098: EMPTY
64099: LIST
64100: LIST
64101: PUSH
64102: LD_INT 3
64104: NEG
64105: PUSH
64106: LD_INT 2
64108: NEG
64109: PUSH
64110: EMPTY
64111: LIST
64112: LIST
64113: PUSH
64114: EMPTY
64115: LIST
64116: LIST
64117: LIST
64118: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
64119: LD_ADDR_VAR 0 47
64123: PUSH
64124: LD_INT 2
64126: NEG
64127: PUSH
64128: LD_INT 3
64130: NEG
64131: PUSH
64132: EMPTY
64133: LIST
64134: LIST
64135: PUSH
64136: LD_INT 1
64138: NEG
64139: PUSH
64140: LD_INT 3
64142: NEG
64143: PUSH
64144: EMPTY
64145: LIST
64146: LIST
64147: PUSH
64148: EMPTY
64149: LIST
64150: LIST
64151: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
64152: LD_ADDR_VAR 0 48
64156: PUSH
64157: LD_INT 1
64159: PUSH
64160: LD_INT 2
64162: NEG
64163: PUSH
64164: EMPTY
64165: LIST
64166: LIST
64167: PUSH
64168: LD_INT 2
64170: PUSH
64171: LD_INT 1
64173: NEG
64174: PUSH
64175: EMPTY
64176: LIST
64177: LIST
64178: PUSH
64179: EMPTY
64180: LIST
64181: LIST
64182: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
64183: LD_ADDR_VAR 0 49
64187: PUSH
64188: LD_INT 3
64190: PUSH
64191: LD_INT 1
64193: PUSH
64194: EMPTY
64195: LIST
64196: LIST
64197: PUSH
64198: LD_INT 3
64200: PUSH
64201: LD_INT 2
64203: PUSH
64204: EMPTY
64205: LIST
64206: LIST
64207: PUSH
64208: EMPTY
64209: LIST
64210: LIST
64211: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
64212: LD_ADDR_VAR 0 50
64216: PUSH
64217: LD_INT 2
64219: PUSH
64220: LD_INT 3
64222: PUSH
64223: EMPTY
64224: LIST
64225: LIST
64226: PUSH
64227: LD_INT 1
64229: PUSH
64230: LD_INT 3
64232: PUSH
64233: EMPTY
64234: LIST
64235: LIST
64236: PUSH
64237: EMPTY
64238: LIST
64239: LIST
64240: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
64241: LD_ADDR_VAR 0 51
64245: PUSH
64246: LD_INT 1
64248: NEG
64249: PUSH
64250: LD_INT 2
64252: PUSH
64253: EMPTY
64254: LIST
64255: LIST
64256: PUSH
64257: LD_INT 2
64259: NEG
64260: PUSH
64261: LD_INT 1
64263: PUSH
64264: EMPTY
64265: LIST
64266: LIST
64267: PUSH
64268: EMPTY
64269: LIST
64270: LIST
64271: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
64272: LD_ADDR_VAR 0 52
64276: PUSH
64277: LD_INT 3
64279: NEG
64280: PUSH
64281: LD_INT 1
64283: NEG
64284: PUSH
64285: EMPTY
64286: LIST
64287: LIST
64288: PUSH
64289: LD_INT 3
64291: NEG
64292: PUSH
64293: LD_INT 2
64295: NEG
64296: PUSH
64297: EMPTY
64298: LIST
64299: LIST
64300: PUSH
64301: EMPTY
64302: LIST
64303: LIST
64304: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64305: LD_ADDR_VAR 0 53
64309: PUSH
64310: LD_INT 1
64312: NEG
64313: PUSH
64314: LD_INT 3
64316: NEG
64317: PUSH
64318: EMPTY
64319: LIST
64320: LIST
64321: PUSH
64322: LD_INT 0
64324: PUSH
64325: LD_INT 3
64327: NEG
64328: PUSH
64329: EMPTY
64330: LIST
64331: LIST
64332: PUSH
64333: LD_INT 1
64335: PUSH
64336: LD_INT 2
64338: NEG
64339: PUSH
64340: EMPTY
64341: LIST
64342: LIST
64343: PUSH
64344: EMPTY
64345: LIST
64346: LIST
64347: LIST
64348: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64349: LD_ADDR_VAR 0 54
64353: PUSH
64354: LD_INT 2
64356: PUSH
64357: LD_INT 1
64359: NEG
64360: PUSH
64361: EMPTY
64362: LIST
64363: LIST
64364: PUSH
64365: LD_INT 3
64367: PUSH
64368: LD_INT 0
64370: PUSH
64371: EMPTY
64372: LIST
64373: LIST
64374: PUSH
64375: LD_INT 3
64377: PUSH
64378: LD_INT 1
64380: PUSH
64381: EMPTY
64382: LIST
64383: LIST
64384: PUSH
64385: EMPTY
64386: LIST
64387: LIST
64388: LIST
64389: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64390: LD_ADDR_VAR 0 55
64394: PUSH
64395: LD_INT 3
64397: PUSH
64398: LD_INT 2
64400: PUSH
64401: EMPTY
64402: LIST
64403: LIST
64404: PUSH
64405: LD_INT 3
64407: PUSH
64408: LD_INT 3
64410: PUSH
64411: EMPTY
64412: LIST
64413: LIST
64414: PUSH
64415: LD_INT 2
64417: PUSH
64418: LD_INT 3
64420: PUSH
64421: EMPTY
64422: LIST
64423: LIST
64424: PUSH
64425: EMPTY
64426: LIST
64427: LIST
64428: LIST
64429: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64430: LD_ADDR_VAR 0 56
64434: PUSH
64435: LD_INT 1
64437: PUSH
64438: LD_INT 3
64440: PUSH
64441: EMPTY
64442: LIST
64443: LIST
64444: PUSH
64445: LD_INT 0
64447: PUSH
64448: LD_INT 3
64450: PUSH
64451: EMPTY
64452: LIST
64453: LIST
64454: PUSH
64455: LD_INT 1
64457: NEG
64458: PUSH
64459: LD_INT 2
64461: PUSH
64462: EMPTY
64463: LIST
64464: LIST
64465: PUSH
64466: EMPTY
64467: LIST
64468: LIST
64469: LIST
64470: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64471: LD_ADDR_VAR 0 57
64475: PUSH
64476: LD_INT 2
64478: NEG
64479: PUSH
64480: LD_INT 1
64482: PUSH
64483: EMPTY
64484: LIST
64485: LIST
64486: PUSH
64487: LD_INT 3
64489: NEG
64490: PUSH
64491: LD_INT 0
64493: PUSH
64494: EMPTY
64495: LIST
64496: LIST
64497: PUSH
64498: LD_INT 3
64500: NEG
64501: PUSH
64502: LD_INT 1
64504: NEG
64505: PUSH
64506: EMPTY
64507: LIST
64508: LIST
64509: PUSH
64510: EMPTY
64511: LIST
64512: LIST
64513: LIST
64514: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64515: LD_ADDR_VAR 0 58
64519: PUSH
64520: LD_INT 2
64522: NEG
64523: PUSH
64524: LD_INT 3
64526: NEG
64527: PUSH
64528: EMPTY
64529: LIST
64530: LIST
64531: PUSH
64532: LD_INT 3
64534: NEG
64535: PUSH
64536: LD_INT 2
64538: NEG
64539: PUSH
64540: EMPTY
64541: LIST
64542: LIST
64543: PUSH
64544: LD_INT 3
64546: NEG
64547: PUSH
64548: LD_INT 3
64550: NEG
64551: PUSH
64552: EMPTY
64553: LIST
64554: LIST
64555: PUSH
64556: EMPTY
64557: LIST
64558: LIST
64559: LIST
64560: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
64561: LD_ADDR_VAR 0 59
64565: PUSH
64566: LD_INT 1
64568: NEG
64569: PUSH
64570: LD_INT 2
64572: NEG
64573: PUSH
64574: EMPTY
64575: LIST
64576: LIST
64577: PUSH
64578: LD_INT 0
64580: PUSH
64581: LD_INT 2
64583: NEG
64584: PUSH
64585: EMPTY
64586: LIST
64587: LIST
64588: PUSH
64589: LD_INT 1
64591: PUSH
64592: LD_INT 1
64594: NEG
64595: PUSH
64596: EMPTY
64597: LIST
64598: LIST
64599: PUSH
64600: EMPTY
64601: LIST
64602: LIST
64603: LIST
64604: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
64605: LD_ADDR_VAR 0 60
64609: PUSH
64610: LD_INT 1
64612: PUSH
64613: LD_INT 1
64615: NEG
64616: PUSH
64617: EMPTY
64618: LIST
64619: LIST
64620: PUSH
64621: LD_INT 2
64623: PUSH
64624: LD_INT 0
64626: PUSH
64627: EMPTY
64628: LIST
64629: LIST
64630: PUSH
64631: LD_INT 2
64633: PUSH
64634: LD_INT 1
64636: PUSH
64637: EMPTY
64638: LIST
64639: LIST
64640: PUSH
64641: EMPTY
64642: LIST
64643: LIST
64644: LIST
64645: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
64646: LD_ADDR_VAR 0 61
64650: PUSH
64651: LD_INT 2
64653: PUSH
64654: LD_INT 1
64656: PUSH
64657: EMPTY
64658: LIST
64659: LIST
64660: PUSH
64661: LD_INT 2
64663: PUSH
64664: LD_INT 2
64666: PUSH
64667: EMPTY
64668: LIST
64669: LIST
64670: PUSH
64671: LD_INT 1
64673: PUSH
64674: LD_INT 2
64676: PUSH
64677: EMPTY
64678: LIST
64679: LIST
64680: PUSH
64681: EMPTY
64682: LIST
64683: LIST
64684: LIST
64685: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
64686: LD_ADDR_VAR 0 62
64690: PUSH
64691: LD_INT 1
64693: PUSH
64694: LD_INT 2
64696: PUSH
64697: EMPTY
64698: LIST
64699: LIST
64700: PUSH
64701: LD_INT 0
64703: PUSH
64704: LD_INT 2
64706: PUSH
64707: EMPTY
64708: LIST
64709: LIST
64710: PUSH
64711: LD_INT 1
64713: NEG
64714: PUSH
64715: LD_INT 1
64717: PUSH
64718: EMPTY
64719: LIST
64720: LIST
64721: PUSH
64722: EMPTY
64723: LIST
64724: LIST
64725: LIST
64726: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
64727: LD_ADDR_VAR 0 63
64731: PUSH
64732: LD_INT 1
64734: NEG
64735: PUSH
64736: LD_INT 1
64738: PUSH
64739: EMPTY
64740: LIST
64741: LIST
64742: PUSH
64743: LD_INT 2
64745: NEG
64746: PUSH
64747: LD_INT 0
64749: PUSH
64750: EMPTY
64751: LIST
64752: LIST
64753: PUSH
64754: LD_INT 2
64756: NEG
64757: PUSH
64758: LD_INT 1
64760: NEG
64761: PUSH
64762: EMPTY
64763: LIST
64764: LIST
64765: PUSH
64766: EMPTY
64767: LIST
64768: LIST
64769: LIST
64770: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64771: LD_ADDR_VAR 0 64
64775: PUSH
64776: LD_INT 1
64778: NEG
64779: PUSH
64780: LD_INT 2
64782: NEG
64783: PUSH
64784: EMPTY
64785: LIST
64786: LIST
64787: PUSH
64788: LD_INT 2
64790: NEG
64791: PUSH
64792: LD_INT 1
64794: NEG
64795: PUSH
64796: EMPTY
64797: LIST
64798: LIST
64799: PUSH
64800: LD_INT 2
64802: NEG
64803: PUSH
64804: LD_INT 2
64806: NEG
64807: PUSH
64808: EMPTY
64809: LIST
64810: LIST
64811: PUSH
64812: EMPTY
64813: LIST
64814: LIST
64815: LIST
64816: ST_TO_ADDR
// end ; 2 :
64817: GO 68083
64819: LD_INT 2
64821: DOUBLE
64822: EQUAL
64823: IFTRUE 64827
64825: GO 68082
64827: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
64828: LD_ADDR_VAR 0 29
64832: PUSH
64833: LD_INT 4
64835: PUSH
64836: LD_INT 0
64838: PUSH
64839: EMPTY
64840: LIST
64841: LIST
64842: PUSH
64843: LD_INT 4
64845: PUSH
64846: LD_INT 1
64848: NEG
64849: PUSH
64850: EMPTY
64851: LIST
64852: LIST
64853: PUSH
64854: LD_INT 5
64856: PUSH
64857: LD_INT 0
64859: PUSH
64860: EMPTY
64861: LIST
64862: LIST
64863: PUSH
64864: LD_INT 5
64866: PUSH
64867: LD_INT 1
64869: PUSH
64870: EMPTY
64871: LIST
64872: LIST
64873: PUSH
64874: LD_INT 4
64876: PUSH
64877: LD_INT 1
64879: PUSH
64880: EMPTY
64881: LIST
64882: LIST
64883: PUSH
64884: LD_INT 3
64886: PUSH
64887: LD_INT 0
64889: PUSH
64890: EMPTY
64891: LIST
64892: LIST
64893: PUSH
64894: LD_INT 3
64896: PUSH
64897: LD_INT 1
64899: NEG
64900: PUSH
64901: EMPTY
64902: LIST
64903: LIST
64904: PUSH
64905: LD_INT 3
64907: PUSH
64908: LD_INT 2
64910: NEG
64911: PUSH
64912: EMPTY
64913: LIST
64914: LIST
64915: PUSH
64916: LD_INT 5
64918: PUSH
64919: LD_INT 2
64921: PUSH
64922: EMPTY
64923: LIST
64924: LIST
64925: PUSH
64926: LD_INT 3
64928: PUSH
64929: LD_INT 3
64931: PUSH
64932: EMPTY
64933: LIST
64934: LIST
64935: PUSH
64936: LD_INT 3
64938: PUSH
64939: LD_INT 2
64941: PUSH
64942: EMPTY
64943: LIST
64944: LIST
64945: PUSH
64946: LD_INT 4
64948: PUSH
64949: LD_INT 3
64951: PUSH
64952: EMPTY
64953: LIST
64954: LIST
64955: PUSH
64956: LD_INT 4
64958: PUSH
64959: LD_INT 4
64961: PUSH
64962: EMPTY
64963: LIST
64964: LIST
64965: PUSH
64966: LD_INT 3
64968: PUSH
64969: LD_INT 4
64971: PUSH
64972: EMPTY
64973: LIST
64974: LIST
64975: PUSH
64976: LD_INT 2
64978: PUSH
64979: LD_INT 3
64981: PUSH
64982: EMPTY
64983: LIST
64984: LIST
64985: PUSH
64986: LD_INT 2
64988: PUSH
64989: LD_INT 2
64991: PUSH
64992: EMPTY
64993: LIST
64994: LIST
64995: PUSH
64996: LD_INT 4
64998: PUSH
64999: LD_INT 2
65001: PUSH
65002: EMPTY
65003: LIST
65004: LIST
65005: PUSH
65006: LD_INT 2
65008: PUSH
65009: LD_INT 4
65011: PUSH
65012: EMPTY
65013: LIST
65014: LIST
65015: PUSH
65016: LD_INT 0
65018: PUSH
65019: LD_INT 4
65021: PUSH
65022: EMPTY
65023: LIST
65024: LIST
65025: PUSH
65026: LD_INT 0
65028: PUSH
65029: LD_INT 3
65031: PUSH
65032: EMPTY
65033: LIST
65034: LIST
65035: PUSH
65036: LD_INT 1
65038: PUSH
65039: LD_INT 4
65041: PUSH
65042: EMPTY
65043: LIST
65044: LIST
65045: PUSH
65046: LD_INT 1
65048: PUSH
65049: LD_INT 5
65051: PUSH
65052: EMPTY
65053: LIST
65054: LIST
65055: PUSH
65056: LD_INT 0
65058: PUSH
65059: LD_INT 5
65061: PUSH
65062: EMPTY
65063: LIST
65064: LIST
65065: PUSH
65066: LD_INT 1
65068: NEG
65069: PUSH
65070: LD_INT 4
65072: PUSH
65073: EMPTY
65074: LIST
65075: LIST
65076: PUSH
65077: LD_INT 1
65079: NEG
65080: PUSH
65081: LD_INT 3
65083: PUSH
65084: EMPTY
65085: LIST
65086: LIST
65087: PUSH
65088: LD_INT 2
65090: PUSH
65091: LD_INT 5
65093: PUSH
65094: EMPTY
65095: LIST
65096: LIST
65097: PUSH
65098: LD_INT 2
65100: NEG
65101: PUSH
65102: LD_INT 3
65104: PUSH
65105: EMPTY
65106: LIST
65107: LIST
65108: PUSH
65109: LD_INT 3
65111: NEG
65112: PUSH
65113: LD_INT 0
65115: PUSH
65116: EMPTY
65117: LIST
65118: LIST
65119: PUSH
65120: LD_INT 3
65122: NEG
65123: PUSH
65124: LD_INT 1
65126: NEG
65127: PUSH
65128: EMPTY
65129: LIST
65130: LIST
65131: PUSH
65132: LD_INT 2
65134: NEG
65135: PUSH
65136: LD_INT 0
65138: PUSH
65139: EMPTY
65140: LIST
65141: LIST
65142: PUSH
65143: LD_INT 2
65145: NEG
65146: PUSH
65147: LD_INT 1
65149: PUSH
65150: EMPTY
65151: LIST
65152: LIST
65153: PUSH
65154: LD_INT 3
65156: NEG
65157: PUSH
65158: LD_INT 1
65160: PUSH
65161: EMPTY
65162: LIST
65163: LIST
65164: PUSH
65165: LD_INT 4
65167: NEG
65168: PUSH
65169: LD_INT 0
65171: PUSH
65172: EMPTY
65173: LIST
65174: LIST
65175: PUSH
65176: LD_INT 4
65178: NEG
65179: PUSH
65180: LD_INT 1
65182: NEG
65183: PUSH
65184: EMPTY
65185: LIST
65186: LIST
65187: PUSH
65188: LD_INT 4
65190: NEG
65191: PUSH
65192: LD_INT 2
65194: NEG
65195: PUSH
65196: EMPTY
65197: LIST
65198: LIST
65199: PUSH
65200: LD_INT 2
65202: NEG
65203: PUSH
65204: LD_INT 2
65206: PUSH
65207: EMPTY
65208: LIST
65209: LIST
65210: PUSH
65211: LD_INT 4
65213: NEG
65214: PUSH
65215: LD_INT 4
65217: NEG
65218: PUSH
65219: EMPTY
65220: LIST
65221: LIST
65222: PUSH
65223: LD_INT 4
65225: NEG
65226: PUSH
65227: LD_INT 5
65229: NEG
65230: PUSH
65231: EMPTY
65232: LIST
65233: LIST
65234: PUSH
65235: LD_INT 3
65237: NEG
65238: PUSH
65239: LD_INT 4
65241: NEG
65242: PUSH
65243: EMPTY
65244: LIST
65245: LIST
65246: PUSH
65247: LD_INT 3
65249: NEG
65250: PUSH
65251: LD_INT 3
65253: NEG
65254: PUSH
65255: EMPTY
65256: LIST
65257: LIST
65258: PUSH
65259: LD_INT 4
65261: NEG
65262: PUSH
65263: LD_INT 3
65265: NEG
65266: PUSH
65267: EMPTY
65268: LIST
65269: LIST
65270: PUSH
65271: LD_INT 5
65273: NEG
65274: PUSH
65275: LD_INT 4
65277: NEG
65278: PUSH
65279: EMPTY
65280: LIST
65281: LIST
65282: PUSH
65283: LD_INT 5
65285: NEG
65286: PUSH
65287: LD_INT 5
65289: NEG
65290: PUSH
65291: EMPTY
65292: LIST
65293: LIST
65294: PUSH
65295: LD_INT 3
65297: NEG
65298: PUSH
65299: LD_INT 5
65301: NEG
65302: PUSH
65303: EMPTY
65304: LIST
65305: LIST
65306: PUSH
65307: LD_INT 5
65309: NEG
65310: PUSH
65311: LD_INT 3
65313: NEG
65314: PUSH
65315: EMPTY
65316: LIST
65317: LIST
65318: PUSH
65319: EMPTY
65320: LIST
65321: LIST
65322: LIST
65323: LIST
65324: LIST
65325: LIST
65326: LIST
65327: LIST
65328: LIST
65329: LIST
65330: LIST
65331: LIST
65332: LIST
65333: LIST
65334: LIST
65335: LIST
65336: LIST
65337: LIST
65338: LIST
65339: LIST
65340: LIST
65341: LIST
65342: LIST
65343: LIST
65344: LIST
65345: LIST
65346: LIST
65347: LIST
65348: LIST
65349: LIST
65350: LIST
65351: LIST
65352: LIST
65353: LIST
65354: LIST
65355: LIST
65356: LIST
65357: LIST
65358: LIST
65359: LIST
65360: LIST
65361: LIST
65362: LIST
65363: LIST
65364: LIST
65365: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
65366: LD_ADDR_VAR 0 30
65370: PUSH
65371: LD_INT 4
65373: PUSH
65374: LD_INT 4
65376: PUSH
65377: EMPTY
65378: LIST
65379: LIST
65380: PUSH
65381: LD_INT 4
65383: PUSH
65384: LD_INT 3
65386: PUSH
65387: EMPTY
65388: LIST
65389: LIST
65390: PUSH
65391: LD_INT 5
65393: PUSH
65394: LD_INT 4
65396: PUSH
65397: EMPTY
65398: LIST
65399: LIST
65400: PUSH
65401: LD_INT 5
65403: PUSH
65404: LD_INT 5
65406: PUSH
65407: EMPTY
65408: LIST
65409: LIST
65410: PUSH
65411: LD_INT 4
65413: PUSH
65414: LD_INT 5
65416: PUSH
65417: EMPTY
65418: LIST
65419: LIST
65420: PUSH
65421: LD_INT 3
65423: PUSH
65424: LD_INT 4
65426: PUSH
65427: EMPTY
65428: LIST
65429: LIST
65430: PUSH
65431: LD_INT 3
65433: PUSH
65434: LD_INT 3
65436: PUSH
65437: EMPTY
65438: LIST
65439: LIST
65440: PUSH
65441: LD_INT 5
65443: PUSH
65444: LD_INT 3
65446: PUSH
65447: EMPTY
65448: LIST
65449: LIST
65450: PUSH
65451: LD_INT 3
65453: PUSH
65454: LD_INT 5
65456: PUSH
65457: EMPTY
65458: LIST
65459: LIST
65460: PUSH
65461: LD_INT 0
65463: PUSH
65464: LD_INT 3
65466: PUSH
65467: EMPTY
65468: LIST
65469: LIST
65470: PUSH
65471: LD_INT 0
65473: PUSH
65474: LD_INT 2
65476: PUSH
65477: EMPTY
65478: LIST
65479: LIST
65480: PUSH
65481: LD_INT 1
65483: PUSH
65484: LD_INT 3
65486: PUSH
65487: EMPTY
65488: LIST
65489: LIST
65490: PUSH
65491: LD_INT 1
65493: PUSH
65494: LD_INT 4
65496: PUSH
65497: EMPTY
65498: LIST
65499: LIST
65500: PUSH
65501: LD_INT 0
65503: PUSH
65504: LD_INT 4
65506: PUSH
65507: EMPTY
65508: LIST
65509: LIST
65510: PUSH
65511: LD_INT 1
65513: NEG
65514: PUSH
65515: LD_INT 3
65517: PUSH
65518: EMPTY
65519: LIST
65520: LIST
65521: PUSH
65522: LD_INT 1
65524: NEG
65525: PUSH
65526: LD_INT 2
65528: PUSH
65529: EMPTY
65530: LIST
65531: LIST
65532: PUSH
65533: LD_INT 2
65535: PUSH
65536: LD_INT 4
65538: PUSH
65539: EMPTY
65540: LIST
65541: LIST
65542: PUSH
65543: LD_INT 2
65545: NEG
65546: PUSH
65547: LD_INT 2
65549: PUSH
65550: EMPTY
65551: LIST
65552: LIST
65553: PUSH
65554: LD_INT 4
65556: NEG
65557: PUSH
65558: LD_INT 0
65560: PUSH
65561: EMPTY
65562: LIST
65563: LIST
65564: PUSH
65565: LD_INT 4
65567: NEG
65568: PUSH
65569: LD_INT 1
65571: NEG
65572: PUSH
65573: EMPTY
65574: LIST
65575: LIST
65576: PUSH
65577: LD_INT 3
65579: NEG
65580: PUSH
65581: LD_INT 0
65583: PUSH
65584: EMPTY
65585: LIST
65586: LIST
65587: PUSH
65588: LD_INT 3
65590: NEG
65591: PUSH
65592: LD_INT 1
65594: PUSH
65595: EMPTY
65596: LIST
65597: LIST
65598: PUSH
65599: LD_INT 4
65601: NEG
65602: PUSH
65603: LD_INT 1
65605: PUSH
65606: EMPTY
65607: LIST
65608: LIST
65609: PUSH
65610: LD_INT 5
65612: NEG
65613: PUSH
65614: LD_INT 0
65616: PUSH
65617: EMPTY
65618: LIST
65619: LIST
65620: PUSH
65621: LD_INT 5
65623: NEG
65624: PUSH
65625: LD_INT 1
65627: NEG
65628: PUSH
65629: EMPTY
65630: LIST
65631: LIST
65632: PUSH
65633: LD_INT 5
65635: NEG
65636: PUSH
65637: LD_INT 2
65639: NEG
65640: PUSH
65641: EMPTY
65642: LIST
65643: LIST
65644: PUSH
65645: LD_INT 3
65647: NEG
65648: PUSH
65649: LD_INT 2
65651: PUSH
65652: EMPTY
65653: LIST
65654: LIST
65655: PUSH
65656: LD_INT 3
65658: NEG
65659: PUSH
65660: LD_INT 3
65662: NEG
65663: PUSH
65664: EMPTY
65665: LIST
65666: LIST
65667: PUSH
65668: LD_INT 3
65670: NEG
65671: PUSH
65672: LD_INT 4
65674: NEG
65675: PUSH
65676: EMPTY
65677: LIST
65678: LIST
65679: PUSH
65680: LD_INT 2
65682: NEG
65683: PUSH
65684: LD_INT 3
65686: NEG
65687: PUSH
65688: EMPTY
65689: LIST
65690: LIST
65691: PUSH
65692: LD_INT 2
65694: NEG
65695: PUSH
65696: LD_INT 2
65698: NEG
65699: PUSH
65700: EMPTY
65701: LIST
65702: LIST
65703: PUSH
65704: LD_INT 3
65706: NEG
65707: PUSH
65708: LD_INT 2
65710: NEG
65711: PUSH
65712: EMPTY
65713: LIST
65714: LIST
65715: PUSH
65716: LD_INT 4
65718: NEG
65719: PUSH
65720: LD_INT 3
65722: NEG
65723: PUSH
65724: EMPTY
65725: LIST
65726: LIST
65727: PUSH
65728: LD_INT 4
65730: NEG
65731: PUSH
65732: LD_INT 4
65734: NEG
65735: PUSH
65736: EMPTY
65737: LIST
65738: LIST
65739: PUSH
65740: LD_INT 2
65742: NEG
65743: PUSH
65744: LD_INT 4
65746: NEG
65747: PUSH
65748: EMPTY
65749: LIST
65750: LIST
65751: PUSH
65752: LD_INT 4
65754: NEG
65755: PUSH
65756: LD_INT 2
65758: NEG
65759: PUSH
65760: EMPTY
65761: LIST
65762: LIST
65763: PUSH
65764: LD_INT 0
65766: PUSH
65767: LD_INT 4
65769: NEG
65770: PUSH
65771: EMPTY
65772: LIST
65773: LIST
65774: PUSH
65775: LD_INT 0
65777: PUSH
65778: LD_INT 5
65780: NEG
65781: PUSH
65782: EMPTY
65783: LIST
65784: LIST
65785: PUSH
65786: LD_INT 1
65788: PUSH
65789: LD_INT 4
65791: NEG
65792: PUSH
65793: EMPTY
65794: LIST
65795: LIST
65796: PUSH
65797: LD_INT 1
65799: PUSH
65800: LD_INT 3
65802: NEG
65803: PUSH
65804: EMPTY
65805: LIST
65806: LIST
65807: PUSH
65808: LD_INT 0
65810: PUSH
65811: LD_INT 3
65813: NEG
65814: PUSH
65815: EMPTY
65816: LIST
65817: LIST
65818: PUSH
65819: LD_INT 1
65821: NEG
65822: PUSH
65823: LD_INT 4
65825: NEG
65826: PUSH
65827: EMPTY
65828: LIST
65829: LIST
65830: PUSH
65831: LD_INT 1
65833: NEG
65834: PUSH
65835: LD_INT 5
65837: NEG
65838: PUSH
65839: EMPTY
65840: LIST
65841: LIST
65842: PUSH
65843: LD_INT 2
65845: PUSH
65846: LD_INT 3
65848: NEG
65849: PUSH
65850: EMPTY
65851: LIST
65852: LIST
65853: PUSH
65854: LD_INT 2
65856: NEG
65857: PUSH
65858: LD_INT 5
65860: NEG
65861: PUSH
65862: EMPTY
65863: LIST
65864: LIST
65865: PUSH
65866: EMPTY
65867: LIST
65868: LIST
65869: LIST
65870: LIST
65871: LIST
65872: LIST
65873: LIST
65874: LIST
65875: LIST
65876: LIST
65877: LIST
65878: LIST
65879: LIST
65880: LIST
65881: LIST
65882: LIST
65883: LIST
65884: LIST
65885: LIST
65886: LIST
65887: LIST
65888: LIST
65889: LIST
65890: LIST
65891: LIST
65892: LIST
65893: LIST
65894: LIST
65895: LIST
65896: LIST
65897: LIST
65898: LIST
65899: LIST
65900: LIST
65901: LIST
65902: LIST
65903: LIST
65904: LIST
65905: LIST
65906: LIST
65907: LIST
65908: LIST
65909: LIST
65910: LIST
65911: LIST
65912: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
65913: LD_ADDR_VAR 0 31
65917: PUSH
65918: LD_INT 0
65920: PUSH
65921: LD_INT 4
65923: PUSH
65924: EMPTY
65925: LIST
65926: LIST
65927: PUSH
65928: LD_INT 0
65930: PUSH
65931: LD_INT 3
65933: PUSH
65934: EMPTY
65935: LIST
65936: LIST
65937: PUSH
65938: LD_INT 1
65940: PUSH
65941: LD_INT 4
65943: PUSH
65944: EMPTY
65945: LIST
65946: LIST
65947: PUSH
65948: LD_INT 1
65950: PUSH
65951: LD_INT 5
65953: PUSH
65954: EMPTY
65955: LIST
65956: LIST
65957: PUSH
65958: LD_INT 0
65960: PUSH
65961: LD_INT 5
65963: PUSH
65964: EMPTY
65965: LIST
65966: LIST
65967: PUSH
65968: LD_INT 1
65970: NEG
65971: PUSH
65972: LD_INT 4
65974: PUSH
65975: EMPTY
65976: LIST
65977: LIST
65978: PUSH
65979: LD_INT 1
65981: NEG
65982: PUSH
65983: LD_INT 3
65985: PUSH
65986: EMPTY
65987: LIST
65988: LIST
65989: PUSH
65990: LD_INT 2
65992: PUSH
65993: LD_INT 5
65995: PUSH
65996: EMPTY
65997: LIST
65998: LIST
65999: PUSH
66000: LD_INT 2
66002: NEG
66003: PUSH
66004: LD_INT 3
66006: PUSH
66007: EMPTY
66008: LIST
66009: LIST
66010: PUSH
66011: LD_INT 3
66013: NEG
66014: PUSH
66015: LD_INT 0
66017: PUSH
66018: EMPTY
66019: LIST
66020: LIST
66021: PUSH
66022: LD_INT 3
66024: NEG
66025: PUSH
66026: LD_INT 1
66028: NEG
66029: PUSH
66030: EMPTY
66031: LIST
66032: LIST
66033: PUSH
66034: LD_INT 2
66036: NEG
66037: PUSH
66038: LD_INT 0
66040: PUSH
66041: EMPTY
66042: LIST
66043: LIST
66044: PUSH
66045: LD_INT 2
66047: NEG
66048: PUSH
66049: LD_INT 1
66051: PUSH
66052: EMPTY
66053: LIST
66054: LIST
66055: PUSH
66056: LD_INT 3
66058: NEG
66059: PUSH
66060: LD_INT 1
66062: PUSH
66063: EMPTY
66064: LIST
66065: LIST
66066: PUSH
66067: LD_INT 4
66069: NEG
66070: PUSH
66071: LD_INT 0
66073: PUSH
66074: EMPTY
66075: LIST
66076: LIST
66077: PUSH
66078: LD_INT 4
66080: NEG
66081: PUSH
66082: LD_INT 1
66084: NEG
66085: PUSH
66086: EMPTY
66087: LIST
66088: LIST
66089: PUSH
66090: LD_INT 4
66092: NEG
66093: PUSH
66094: LD_INT 2
66096: NEG
66097: PUSH
66098: EMPTY
66099: LIST
66100: LIST
66101: PUSH
66102: LD_INT 2
66104: NEG
66105: PUSH
66106: LD_INT 2
66108: PUSH
66109: EMPTY
66110: LIST
66111: LIST
66112: PUSH
66113: LD_INT 4
66115: NEG
66116: PUSH
66117: LD_INT 4
66119: NEG
66120: PUSH
66121: EMPTY
66122: LIST
66123: LIST
66124: PUSH
66125: LD_INT 4
66127: NEG
66128: PUSH
66129: LD_INT 5
66131: NEG
66132: PUSH
66133: EMPTY
66134: LIST
66135: LIST
66136: PUSH
66137: LD_INT 3
66139: NEG
66140: PUSH
66141: LD_INT 4
66143: NEG
66144: PUSH
66145: EMPTY
66146: LIST
66147: LIST
66148: PUSH
66149: LD_INT 3
66151: NEG
66152: PUSH
66153: LD_INT 3
66155: NEG
66156: PUSH
66157: EMPTY
66158: LIST
66159: LIST
66160: PUSH
66161: LD_INT 4
66163: NEG
66164: PUSH
66165: LD_INT 3
66167: NEG
66168: PUSH
66169: EMPTY
66170: LIST
66171: LIST
66172: PUSH
66173: LD_INT 5
66175: NEG
66176: PUSH
66177: LD_INT 4
66179: NEG
66180: PUSH
66181: EMPTY
66182: LIST
66183: LIST
66184: PUSH
66185: LD_INT 5
66187: NEG
66188: PUSH
66189: LD_INT 5
66191: NEG
66192: PUSH
66193: EMPTY
66194: LIST
66195: LIST
66196: PUSH
66197: LD_INT 3
66199: NEG
66200: PUSH
66201: LD_INT 5
66203: NEG
66204: PUSH
66205: EMPTY
66206: LIST
66207: LIST
66208: PUSH
66209: LD_INT 5
66211: NEG
66212: PUSH
66213: LD_INT 3
66215: NEG
66216: PUSH
66217: EMPTY
66218: LIST
66219: LIST
66220: PUSH
66221: LD_INT 0
66223: PUSH
66224: LD_INT 3
66226: NEG
66227: PUSH
66228: EMPTY
66229: LIST
66230: LIST
66231: PUSH
66232: LD_INT 0
66234: PUSH
66235: LD_INT 4
66237: NEG
66238: PUSH
66239: EMPTY
66240: LIST
66241: LIST
66242: PUSH
66243: LD_INT 1
66245: PUSH
66246: LD_INT 3
66248: NEG
66249: PUSH
66250: EMPTY
66251: LIST
66252: LIST
66253: PUSH
66254: LD_INT 1
66256: PUSH
66257: LD_INT 2
66259: NEG
66260: PUSH
66261: EMPTY
66262: LIST
66263: LIST
66264: PUSH
66265: LD_INT 0
66267: PUSH
66268: LD_INT 2
66270: NEG
66271: PUSH
66272: EMPTY
66273: LIST
66274: LIST
66275: PUSH
66276: LD_INT 1
66278: NEG
66279: PUSH
66280: LD_INT 3
66282: NEG
66283: PUSH
66284: EMPTY
66285: LIST
66286: LIST
66287: PUSH
66288: LD_INT 1
66290: NEG
66291: PUSH
66292: LD_INT 4
66294: NEG
66295: PUSH
66296: EMPTY
66297: LIST
66298: LIST
66299: PUSH
66300: LD_INT 2
66302: PUSH
66303: LD_INT 2
66305: NEG
66306: PUSH
66307: EMPTY
66308: LIST
66309: LIST
66310: PUSH
66311: LD_INT 2
66313: NEG
66314: PUSH
66315: LD_INT 4
66317: NEG
66318: PUSH
66319: EMPTY
66320: LIST
66321: LIST
66322: PUSH
66323: LD_INT 4
66325: PUSH
66326: LD_INT 0
66328: PUSH
66329: EMPTY
66330: LIST
66331: LIST
66332: PUSH
66333: LD_INT 4
66335: PUSH
66336: LD_INT 1
66338: NEG
66339: PUSH
66340: EMPTY
66341: LIST
66342: LIST
66343: PUSH
66344: LD_INT 5
66346: PUSH
66347: LD_INT 0
66349: PUSH
66350: EMPTY
66351: LIST
66352: LIST
66353: PUSH
66354: LD_INT 5
66356: PUSH
66357: LD_INT 1
66359: PUSH
66360: EMPTY
66361: LIST
66362: LIST
66363: PUSH
66364: LD_INT 4
66366: PUSH
66367: LD_INT 1
66369: PUSH
66370: EMPTY
66371: LIST
66372: LIST
66373: PUSH
66374: LD_INT 3
66376: PUSH
66377: LD_INT 0
66379: PUSH
66380: EMPTY
66381: LIST
66382: LIST
66383: PUSH
66384: LD_INT 3
66386: PUSH
66387: LD_INT 1
66389: NEG
66390: PUSH
66391: EMPTY
66392: LIST
66393: LIST
66394: PUSH
66395: LD_INT 3
66397: PUSH
66398: LD_INT 2
66400: NEG
66401: PUSH
66402: EMPTY
66403: LIST
66404: LIST
66405: PUSH
66406: LD_INT 5
66408: PUSH
66409: LD_INT 2
66411: PUSH
66412: EMPTY
66413: LIST
66414: LIST
66415: PUSH
66416: EMPTY
66417: LIST
66418: LIST
66419: LIST
66420: LIST
66421: LIST
66422: LIST
66423: LIST
66424: LIST
66425: LIST
66426: LIST
66427: LIST
66428: LIST
66429: LIST
66430: LIST
66431: LIST
66432: LIST
66433: LIST
66434: LIST
66435: LIST
66436: LIST
66437: LIST
66438: LIST
66439: LIST
66440: LIST
66441: LIST
66442: LIST
66443: LIST
66444: LIST
66445: LIST
66446: LIST
66447: LIST
66448: LIST
66449: LIST
66450: LIST
66451: LIST
66452: LIST
66453: LIST
66454: LIST
66455: LIST
66456: LIST
66457: LIST
66458: LIST
66459: LIST
66460: LIST
66461: LIST
66462: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
66463: LD_ADDR_VAR 0 32
66467: PUSH
66468: LD_INT 4
66470: NEG
66471: PUSH
66472: LD_INT 0
66474: PUSH
66475: EMPTY
66476: LIST
66477: LIST
66478: PUSH
66479: LD_INT 4
66481: NEG
66482: PUSH
66483: LD_INT 1
66485: NEG
66486: PUSH
66487: EMPTY
66488: LIST
66489: LIST
66490: PUSH
66491: LD_INT 3
66493: NEG
66494: PUSH
66495: LD_INT 0
66497: PUSH
66498: EMPTY
66499: LIST
66500: LIST
66501: PUSH
66502: LD_INT 3
66504: NEG
66505: PUSH
66506: LD_INT 1
66508: PUSH
66509: EMPTY
66510: LIST
66511: LIST
66512: PUSH
66513: LD_INT 4
66515: NEG
66516: PUSH
66517: LD_INT 1
66519: PUSH
66520: EMPTY
66521: LIST
66522: LIST
66523: PUSH
66524: LD_INT 5
66526: NEG
66527: PUSH
66528: LD_INT 0
66530: PUSH
66531: EMPTY
66532: LIST
66533: LIST
66534: PUSH
66535: LD_INT 5
66537: NEG
66538: PUSH
66539: LD_INT 1
66541: NEG
66542: PUSH
66543: EMPTY
66544: LIST
66545: LIST
66546: PUSH
66547: LD_INT 5
66549: NEG
66550: PUSH
66551: LD_INT 2
66553: NEG
66554: PUSH
66555: EMPTY
66556: LIST
66557: LIST
66558: PUSH
66559: LD_INT 3
66561: NEG
66562: PUSH
66563: LD_INT 2
66565: PUSH
66566: EMPTY
66567: LIST
66568: LIST
66569: PUSH
66570: LD_INT 3
66572: NEG
66573: PUSH
66574: LD_INT 3
66576: NEG
66577: PUSH
66578: EMPTY
66579: LIST
66580: LIST
66581: PUSH
66582: LD_INT 3
66584: NEG
66585: PUSH
66586: LD_INT 4
66588: NEG
66589: PUSH
66590: EMPTY
66591: LIST
66592: LIST
66593: PUSH
66594: LD_INT 2
66596: NEG
66597: PUSH
66598: LD_INT 3
66600: NEG
66601: PUSH
66602: EMPTY
66603: LIST
66604: LIST
66605: PUSH
66606: LD_INT 2
66608: NEG
66609: PUSH
66610: LD_INT 2
66612: NEG
66613: PUSH
66614: EMPTY
66615: LIST
66616: LIST
66617: PUSH
66618: LD_INT 3
66620: NEG
66621: PUSH
66622: LD_INT 2
66624: NEG
66625: PUSH
66626: EMPTY
66627: LIST
66628: LIST
66629: PUSH
66630: LD_INT 4
66632: NEG
66633: PUSH
66634: LD_INT 3
66636: NEG
66637: PUSH
66638: EMPTY
66639: LIST
66640: LIST
66641: PUSH
66642: LD_INT 4
66644: NEG
66645: PUSH
66646: LD_INT 4
66648: NEG
66649: PUSH
66650: EMPTY
66651: LIST
66652: LIST
66653: PUSH
66654: LD_INT 2
66656: NEG
66657: PUSH
66658: LD_INT 4
66660: NEG
66661: PUSH
66662: EMPTY
66663: LIST
66664: LIST
66665: PUSH
66666: LD_INT 4
66668: NEG
66669: PUSH
66670: LD_INT 2
66672: NEG
66673: PUSH
66674: EMPTY
66675: LIST
66676: LIST
66677: PUSH
66678: LD_INT 0
66680: PUSH
66681: LD_INT 4
66683: NEG
66684: PUSH
66685: EMPTY
66686: LIST
66687: LIST
66688: PUSH
66689: LD_INT 0
66691: PUSH
66692: LD_INT 5
66694: NEG
66695: PUSH
66696: EMPTY
66697: LIST
66698: LIST
66699: PUSH
66700: LD_INT 1
66702: PUSH
66703: LD_INT 4
66705: NEG
66706: PUSH
66707: EMPTY
66708: LIST
66709: LIST
66710: PUSH
66711: LD_INT 1
66713: PUSH
66714: LD_INT 3
66716: NEG
66717: PUSH
66718: EMPTY
66719: LIST
66720: LIST
66721: PUSH
66722: LD_INT 0
66724: PUSH
66725: LD_INT 3
66727: NEG
66728: PUSH
66729: EMPTY
66730: LIST
66731: LIST
66732: PUSH
66733: LD_INT 1
66735: NEG
66736: PUSH
66737: LD_INT 4
66739: NEG
66740: PUSH
66741: EMPTY
66742: LIST
66743: LIST
66744: PUSH
66745: LD_INT 1
66747: NEG
66748: PUSH
66749: LD_INT 5
66751: NEG
66752: PUSH
66753: EMPTY
66754: LIST
66755: LIST
66756: PUSH
66757: LD_INT 2
66759: PUSH
66760: LD_INT 3
66762: NEG
66763: PUSH
66764: EMPTY
66765: LIST
66766: LIST
66767: PUSH
66768: LD_INT 2
66770: NEG
66771: PUSH
66772: LD_INT 5
66774: NEG
66775: PUSH
66776: EMPTY
66777: LIST
66778: LIST
66779: PUSH
66780: LD_INT 3
66782: PUSH
66783: LD_INT 0
66785: PUSH
66786: EMPTY
66787: LIST
66788: LIST
66789: PUSH
66790: LD_INT 3
66792: PUSH
66793: LD_INT 1
66795: NEG
66796: PUSH
66797: EMPTY
66798: LIST
66799: LIST
66800: PUSH
66801: LD_INT 4
66803: PUSH
66804: LD_INT 0
66806: PUSH
66807: EMPTY
66808: LIST
66809: LIST
66810: PUSH
66811: LD_INT 4
66813: PUSH
66814: LD_INT 1
66816: PUSH
66817: EMPTY
66818: LIST
66819: LIST
66820: PUSH
66821: LD_INT 3
66823: PUSH
66824: LD_INT 1
66826: PUSH
66827: EMPTY
66828: LIST
66829: LIST
66830: PUSH
66831: LD_INT 2
66833: PUSH
66834: LD_INT 0
66836: PUSH
66837: EMPTY
66838: LIST
66839: LIST
66840: PUSH
66841: LD_INT 2
66843: PUSH
66844: LD_INT 1
66846: NEG
66847: PUSH
66848: EMPTY
66849: LIST
66850: LIST
66851: PUSH
66852: LD_INT 2
66854: PUSH
66855: LD_INT 2
66857: NEG
66858: PUSH
66859: EMPTY
66860: LIST
66861: LIST
66862: PUSH
66863: LD_INT 4
66865: PUSH
66866: LD_INT 2
66868: PUSH
66869: EMPTY
66870: LIST
66871: LIST
66872: PUSH
66873: LD_INT 4
66875: PUSH
66876: LD_INT 4
66878: PUSH
66879: EMPTY
66880: LIST
66881: LIST
66882: PUSH
66883: LD_INT 4
66885: PUSH
66886: LD_INT 3
66888: PUSH
66889: EMPTY
66890: LIST
66891: LIST
66892: PUSH
66893: LD_INT 5
66895: PUSH
66896: LD_INT 4
66898: PUSH
66899: EMPTY
66900: LIST
66901: LIST
66902: PUSH
66903: LD_INT 5
66905: PUSH
66906: LD_INT 5
66908: PUSH
66909: EMPTY
66910: LIST
66911: LIST
66912: PUSH
66913: LD_INT 4
66915: PUSH
66916: LD_INT 5
66918: PUSH
66919: EMPTY
66920: LIST
66921: LIST
66922: PUSH
66923: LD_INT 3
66925: PUSH
66926: LD_INT 4
66928: PUSH
66929: EMPTY
66930: LIST
66931: LIST
66932: PUSH
66933: LD_INT 3
66935: PUSH
66936: LD_INT 3
66938: PUSH
66939: EMPTY
66940: LIST
66941: LIST
66942: PUSH
66943: LD_INT 5
66945: PUSH
66946: LD_INT 3
66948: PUSH
66949: EMPTY
66950: LIST
66951: LIST
66952: PUSH
66953: LD_INT 3
66955: PUSH
66956: LD_INT 5
66958: PUSH
66959: EMPTY
66960: LIST
66961: LIST
66962: PUSH
66963: EMPTY
66964: LIST
66965: LIST
66966: LIST
66967: LIST
66968: LIST
66969: LIST
66970: LIST
66971: LIST
66972: LIST
66973: LIST
66974: LIST
66975: LIST
66976: LIST
66977: LIST
66978: LIST
66979: LIST
66980: LIST
66981: LIST
66982: LIST
66983: LIST
66984: LIST
66985: LIST
66986: LIST
66987: LIST
66988: LIST
66989: LIST
66990: LIST
66991: LIST
66992: LIST
66993: LIST
66994: LIST
66995: LIST
66996: LIST
66997: LIST
66998: LIST
66999: LIST
67000: LIST
67001: LIST
67002: LIST
67003: LIST
67004: LIST
67005: LIST
67006: LIST
67007: LIST
67008: LIST
67009: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
67010: LD_ADDR_VAR 0 33
67014: PUSH
67015: LD_INT 4
67017: NEG
67018: PUSH
67019: LD_INT 4
67021: NEG
67022: PUSH
67023: EMPTY
67024: LIST
67025: LIST
67026: PUSH
67027: LD_INT 4
67029: NEG
67030: PUSH
67031: LD_INT 5
67033: NEG
67034: PUSH
67035: EMPTY
67036: LIST
67037: LIST
67038: PUSH
67039: LD_INT 3
67041: NEG
67042: PUSH
67043: LD_INT 4
67045: NEG
67046: PUSH
67047: EMPTY
67048: LIST
67049: LIST
67050: PUSH
67051: LD_INT 3
67053: NEG
67054: PUSH
67055: LD_INT 3
67057: NEG
67058: PUSH
67059: EMPTY
67060: LIST
67061: LIST
67062: PUSH
67063: LD_INT 4
67065: NEG
67066: PUSH
67067: LD_INT 3
67069: NEG
67070: PUSH
67071: EMPTY
67072: LIST
67073: LIST
67074: PUSH
67075: LD_INT 5
67077: NEG
67078: PUSH
67079: LD_INT 4
67081: NEG
67082: PUSH
67083: EMPTY
67084: LIST
67085: LIST
67086: PUSH
67087: LD_INT 5
67089: NEG
67090: PUSH
67091: LD_INT 5
67093: NEG
67094: PUSH
67095: EMPTY
67096: LIST
67097: LIST
67098: PUSH
67099: LD_INT 3
67101: NEG
67102: PUSH
67103: LD_INT 5
67105: NEG
67106: PUSH
67107: EMPTY
67108: LIST
67109: LIST
67110: PUSH
67111: LD_INT 5
67113: NEG
67114: PUSH
67115: LD_INT 3
67117: NEG
67118: PUSH
67119: EMPTY
67120: LIST
67121: LIST
67122: PUSH
67123: LD_INT 0
67125: PUSH
67126: LD_INT 3
67128: NEG
67129: PUSH
67130: EMPTY
67131: LIST
67132: LIST
67133: PUSH
67134: LD_INT 0
67136: PUSH
67137: LD_INT 4
67139: NEG
67140: PUSH
67141: EMPTY
67142: LIST
67143: LIST
67144: PUSH
67145: LD_INT 1
67147: PUSH
67148: LD_INT 3
67150: NEG
67151: PUSH
67152: EMPTY
67153: LIST
67154: LIST
67155: PUSH
67156: LD_INT 1
67158: PUSH
67159: LD_INT 2
67161: NEG
67162: PUSH
67163: EMPTY
67164: LIST
67165: LIST
67166: PUSH
67167: LD_INT 0
67169: PUSH
67170: LD_INT 2
67172: NEG
67173: PUSH
67174: EMPTY
67175: LIST
67176: LIST
67177: PUSH
67178: LD_INT 1
67180: NEG
67181: PUSH
67182: LD_INT 3
67184: NEG
67185: PUSH
67186: EMPTY
67187: LIST
67188: LIST
67189: PUSH
67190: LD_INT 1
67192: NEG
67193: PUSH
67194: LD_INT 4
67196: NEG
67197: PUSH
67198: EMPTY
67199: LIST
67200: LIST
67201: PUSH
67202: LD_INT 2
67204: PUSH
67205: LD_INT 2
67207: NEG
67208: PUSH
67209: EMPTY
67210: LIST
67211: LIST
67212: PUSH
67213: LD_INT 2
67215: NEG
67216: PUSH
67217: LD_INT 4
67219: NEG
67220: PUSH
67221: EMPTY
67222: LIST
67223: LIST
67224: PUSH
67225: LD_INT 4
67227: PUSH
67228: LD_INT 0
67230: PUSH
67231: EMPTY
67232: LIST
67233: LIST
67234: PUSH
67235: LD_INT 4
67237: PUSH
67238: LD_INT 1
67240: NEG
67241: PUSH
67242: EMPTY
67243: LIST
67244: LIST
67245: PUSH
67246: LD_INT 5
67248: PUSH
67249: LD_INT 0
67251: PUSH
67252: EMPTY
67253: LIST
67254: LIST
67255: PUSH
67256: LD_INT 5
67258: PUSH
67259: LD_INT 1
67261: PUSH
67262: EMPTY
67263: LIST
67264: LIST
67265: PUSH
67266: LD_INT 4
67268: PUSH
67269: LD_INT 1
67271: PUSH
67272: EMPTY
67273: LIST
67274: LIST
67275: PUSH
67276: LD_INT 3
67278: PUSH
67279: LD_INT 0
67281: PUSH
67282: EMPTY
67283: LIST
67284: LIST
67285: PUSH
67286: LD_INT 3
67288: PUSH
67289: LD_INT 1
67291: NEG
67292: PUSH
67293: EMPTY
67294: LIST
67295: LIST
67296: PUSH
67297: LD_INT 3
67299: PUSH
67300: LD_INT 2
67302: NEG
67303: PUSH
67304: EMPTY
67305: LIST
67306: LIST
67307: PUSH
67308: LD_INT 5
67310: PUSH
67311: LD_INT 2
67313: PUSH
67314: EMPTY
67315: LIST
67316: LIST
67317: PUSH
67318: LD_INT 3
67320: PUSH
67321: LD_INT 3
67323: PUSH
67324: EMPTY
67325: LIST
67326: LIST
67327: PUSH
67328: LD_INT 3
67330: PUSH
67331: LD_INT 2
67333: PUSH
67334: EMPTY
67335: LIST
67336: LIST
67337: PUSH
67338: LD_INT 4
67340: PUSH
67341: LD_INT 3
67343: PUSH
67344: EMPTY
67345: LIST
67346: LIST
67347: PUSH
67348: LD_INT 4
67350: PUSH
67351: LD_INT 4
67353: PUSH
67354: EMPTY
67355: LIST
67356: LIST
67357: PUSH
67358: LD_INT 3
67360: PUSH
67361: LD_INT 4
67363: PUSH
67364: EMPTY
67365: LIST
67366: LIST
67367: PUSH
67368: LD_INT 2
67370: PUSH
67371: LD_INT 3
67373: PUSH
67374: EMPTY
67375: LIST
67376: LIST
67377: PUSH
67378: LD_INT 2
67380: PUSH
67381: LD_INT 2
67383: PUSH
67384: EMPTY
67385: LIST
67386: LIST
67387: PUSH
67388: LD_INT 4
67390: PUSH
67391: LD_INT 2
67393: PUSH
67394: EMPTY
67395: LIST
67396: LIST
67397: PUSH
67398: LD_INT 2
67400: PUSH
67401: LD_INT 4
67403: PUSH
67404: EMPTY
67405: LIST
67406: LIST
67407: PUSH
67408: LD_INT 0
67410: PUSH
67411: LD_INT 4
67413: PUSH
67414: EMPTY
67415: LIST
67416: LIST
67417: PUSH
67418: LD_INT 0
67420: PUSH
67421: LD_INT 3
67423: PUSH
67424: EMPTY
67425: LIST
67426: LIST
67427: PUSH
67428: LD_INT 1
67430: PUSH
67431: LD_INT 4
67433: PUSH
67434: EMPTY
67435: LIST
67436: LIST
67437: PUSH
67438: LD_INT 1
67440: PUSH
67441: LD_INT 5
67443: PUSH
67444: EMPTY
67445: LIST
67446: LIST
67447: PUSH
67448: LD_INT 0
67450: PUSH
67451: LD_INT 5
67453: PUSH
67454: EMPTY
67455: LIST
67456: LIST
67457: PUSH
67458: LD_INT 1
67460: NEG
67461: PUSH
67462: LD_INT 4
67464: PUSH
67465: EMPTY
67466: LIST
67467: LIST
67468: PUSH
67469: LD_INT 1
67471: NEG
67472: PUSH
67473: LD_INT 3
67475: PUSH
67476: EMPTY
67477: LIST
67478: LIST
67479: PUSH
67480: LD_INT 2
67482: PUSH
67483: LD_INT 5
67485: PUSH
67486: EMPTY
67487: LIST
67488: LIST
67489: PUSH
67490: LD_INT 2
67492: NEG
67493: PUSH
67494: LD_INT 3
67496: PUSH
67497: EMPTY
67498: LIST
67499: LIST
67500: PUSH
67501: EMPTY
67502: LIST
67503: LIST
67504: LIST
67505: LIST
67506: LIST
67507: LIST
67508: LIST
67509: LIST
67510: LIST
67511: LIST
67512: LIST
67513: LIST
67514: LIST
67515: LIST
67516: LIST
67517: LIST
67518: LIST
67519: LIST
67520: LIST
67521: LIST
67522: LIST
67523: LIST
67524: LIST
67525: LIST
67526: LIST
67527: LIST
67528: LIST
67529: LIST
67530: LIST
67531: LIST
67532: LIST
67533: LIST
67534: LIST
67535: LIST
67536: LIST
67537: LIST
67538: LIST
67539: LIST
67540: LIST
67541: LIST
67542: LIST
67543: LIST
67544: LIST
67545: LIST
67546: LIST
67547: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
67548: LD_ADDR_VAR 0 34
67552: PUSH
67553: LD_INT 0
67555: PUSH
67556: LD_INT 4
67558: NEG
67559: PUSH
67560: EMPTY
67561: LIST
67562: LIST
67563: PUSH
67564: LD_INT 0
67566: PUSH
67567: LD_INT 5
67569: NEG
67570: PUSH
67571: EMPTY
67572: LIST
67573: LIST
67574: PUSH
67575: LD_INT 1
67577: PUSH
67578: LD_INT 4
67580: NEG
67581: PUSH
67582: EMPTY
67583: LIST
67584: LIST
67585: PUSH
67586: LD_INT 1
67588: PUSH
67589: LD_INT 3
67591: NEG
67592: PUSH
67593: EMPTY
67594: LIST
67595: LIST
67596: PUSH
67597: LD_INT 0
67599: PUSH
67600: LD_INT 3
67602: NEG
67603: PUSH
67604: EMPTY
67605: LIST
67606: LIST
67607: PUSH
67608: LD_INT 1
67610: NEG
67611: PUSH
67612: LD_INT 4
67614: NEG
67615: PUSH
67616: EMPTY
67617: LIST
67618: LIST
67619: PUSH
67620: LD_INT 1
67622: NEG
67623: PUSH
67624: LD_INT 5
67626: NEG
67627: PUSH
67628: EMPTY
67629: LIST
67630: LIST
67631: PUSH
67632: LD_INT 2
67634: PUSH
67635: LD_INT 3
67637: NEG
67638: PUSH
67639: EMPTY
67640: LIST
67641: LIST
67642: PUSH
67643: LD_INT 2
67645: NEG
67646: PUSH
67647: LD_INT 5
67649: NEG
67650: PUSH
67651: EMPTY
67652: LIST
67653: LIST
67654: PUSH
67655: LD_INT 3
67657: PUSH
67658: LD_INT 0
67660: PUSH
67661: EMPTY
67662: LIST
67663: LIST
67664: PUSH
67665: LD_INT 3
67667: PUSH
67668: LD_INT 1
67670: NEG
67671: PUSH
67672: EMPTY
67673: LIST
67674: LIST
67675: PUSH
67676: LD_INT 4
67678: PUSH
67679: LD_INT 0
67681: PUSH
67682: EMPTY
67683: LIST
67684: LIST
67685: PUSH
67686: LD_INT 4
67688: PUSH
67689: LD_INT 1
67691: PUSH
67692: EMPTY
67693: LIST
67694: LIST
67695: PUSH
67696: LD_INT 3
67698: PUSH
67699: LD_INT 1
67701: PUSH
67702: EMPTY
67703: LIST
67704: LIST
67705: PUSH
67706: LD_INT 2
67708: PUSH
67709: LD_INT 0
67711: PUSH
67712: EMPTY
67713: LIST
67714: LIST
67715: PUSH
67716: LD_INT 2
67718: PUSH
67719: LD_INT 1
67721: NEG
67722: PUSH
67723: EMPTY
67724: LIST
67725: LIST
67726: PUSH
67727: LD_INT 2
67729: PUSH
67730: LD_INT 2
67732: NEG
67733: PUSH
67734: EMPTY
67735: LIST
67736: LIST
67737: PUSH
67738: LD_INT 4
67740: PUSH
67741: LD_INT 2
67743: PUSH
67744: EMPTY
67745: LIST
67746: LIST
67747: PUSH
67748: LD_INT 4
67750: PUSH
67751: LD_INT 4
67753: PUSH
67754: EMPTY
67755: LIST
67756: LIST
67757: PUSH
67758: LD_INT 4
67760: PUSH
67761: LD_INT 3
67763: PUSH
67764: EMPTY
67765: LIST
67766: LIST
67767: PUSH
67768: LD_INT 5
67770: PUSH
67771: LD_INT 4
67773: PUSH
67774: EMPTY
67775: LIST
67776: LIST
67777: PUSH
67778: LD_INT 5
67780: PUSH
67781: LD_INT 5
67783: PUSH
67784: EMPTY
67785: LIST
67786: LIST
67787: PUSH
67788: LD_INT 4
67790: PUSH
67791: LD_INT 5
67793: PUSH
67794: EMPTY
67795: LIST
67796: LIST
67797: PUSH
67798: LD_INT 3
67800: PUSH
67801: LD_INT 4
67803: PUSH
67804: EMPTY
67805: LIST
67806: LIST
67807: PUSH
67808: LD_INT 3
67810: PUSH
67811: LD_INT 3
67813: PUSH
67814: EMPTY
67815: LIST
67816: LIST
67817: PUSH
67818: LD_INT 5
67820: PUSH
67821: LD_INT 3
67823: PUSH
67824: EMPTY
67825: LIST
67826: LIST
67827: PUSH
67828: LD_INT 3
67830: PUSH
67831: LD_INT 5
67833: PUSH
67834: EMPTY
67835: LIST
67836: LIST
67837: PUSH
67838: LD_INT 0
67840: PUSH
67841: LD_INT 3
67843: PUSH
67844: EMPTY
67845: LIST
67846: LIST
67847: PUSH
67848: LD_INT 0
67850: PUSH
67851: LD_INT 2
67853: PUSH
67854: EMPTY
67855: LIST
67856: LIST
67857: PUSH
67858: LD_INT 1
67860: PUSH
67861: LD_INT 3
67863: PUSH
67864: EMPTY
67865: LIST
67866: LIST
67867: PUSH
67868: LD_INT 1
67870: PUSH
67871: LD_INT 4
67873: PUSH
67874: EMPTY
67875: LIST
67876: LIST
67877: PUSH
67878: LD_INT 0
67880: PUSH
67881: LD_INT 4
67883: PUSH
67884: EMPTY
67885: LIST
67886: LIST
67887: PUSH
67888: LD_INT 1
67890: NEG
67891: PUSH
67892: LD_INT 3
67894: PUSH
67895: EMPTY
67896: LIST
67897: LIST
67898: PUSH
67899: LD_INT 1
67901: NEG
67902: PUSH
67903: LD_INT 2
67905: PUSH
67906: EMPTY
67907: LIST
67908: LIST
67909: PUSH
67910: LD_INT 2
67912: PUSH
67913: LD_INT 4
67915: PUSH
67916: EMPTY
67917: LIST
67918: LIST
67919: PUSH
67920: LD_INT 2
67922: NEG
67923: PUSH
67924: LD_INT 2
67926: PUSH
67927: EMPTY
67928: LIST
67929: LIST
67930: PUSH
67931: LD_INT 4
67933: NEG
67934: PUSH
67935: LD_INT 0
67937: PUSH
67938: EMPTY
67939: LIST
67940: LIST
67941: PUSH
67942: LD_INT 4
67944: NEG
67945: PUSH
67946: LD_INT 1
67948: NEG
67949: PUSH
67950: EMPTY
67951: LIST
67952: LIST
67953: PUSH
67954: LD_INT 3
67956: NEG
67957: PUSH
67958: LD_INT 0
67960: PUSH
67961: EMPTY
67962: LIST
67963: LIST
67964: PUSH
67965: LD_INT 3
67967: NEG
67968: PUSH
67969: LD_INT 1
67971: PUSH
67972: EMPTY
67973: LIST
67974: LIST
67975: PUSH
67976: LD_INT 4
67978: NEG
67979: PUSH
67980: LD_INT 1
67982: PUSH
67983: EMPTY
67984: LIST
67985: LIST
67986: PUSH
67987: LD_INT 5
67989: NEG
67990: PUSH
67991: LD_INT 0
67993: PUSH
67994: EMPTY
67995: LIST
67996: LIST
67997: PUSH
67998: LD_INT 5
68000: NEG
68001: PUSH
68002: LD_INT 1
68004: NEG
68005: PUSH
68006: EMPTY
68007: LIST
68008: LIST
68009: PUSH
68010: LD_INT 5
68012: NEG
68013: PUSH
68014: LD_INT 2
68016: NEG
68017: PUSH
68018: EMPTY
68019: LIST
68020: LIST
68021: PUSH
68022: LD_INT 3
68024: NEG
68025: PUSH
68026: LD_INT 2
68028: PUSH
68029: EMPTY
68030: LIST
68031: LIST
68032: PUSH
68033: EMPTY
68034: LIST
68035: LIST
68036: LIST
68037: LIST
68038: LIST
68039: LIST
68040: LIST
68041: LIST
68042: LIST
68043: LIST
68044: LIST
68045: LIST
68046: LIST
68047: LIST
68048: LIST
68049: LIST
68050: LIST
68051: LIST
68052: LIST
68053: LIST
68054: LIST
68055: LIST
68056: LIST
68057: LIST
68058: LIST
68059: LIST
68060: LIST
68061: LIST
68062: LIST
68063: LIST
68064: LIST
68065: LIST
68066: LIST
68067: LIST
68068: LIST
68069: LIST
68070: LIST
68071: LIST
68072: LIST
68073: LIST
68074: LIST
68075: LIST
68076: LIST
68077: LIST
68078: LIST
68079: ST_TO_ADDR
// end ; end ;
68080: GO 68083
68082: POP
// case btype of b_depot , b_warehouse :
68083: LD_VAR 0 1
68087: PUSH
68088: LD_INT 0
68090: DOUBLE
68091: EQUAL
68092: IFTRUE 68102
68094: LD_INT 1
68096: DOUBLE
68097: EQUAL
68098: IFTRUE 68102
68100: GO 68303
68102: POP
// case nation of nation_american :
68103: LD_VAR 0 5
68107: PUSH
68108: LD_INT 1
68110: DOUBLE
68111: EQUAL
68112: IFTRUE 68116
68114: GO 68172
68116: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
68117: LD_ADDR_VAR 0 9
68121: PUSH
68122: LD_VAR 0 11
68126: PUSH
68127: LD_VAR 0 12
68131: PUSH
68132: LD_VAR 0 13
68136: PUSH
68137: LD_VAR 0 14
68141: PUSH
68142: LD_VAR 0 15
68146: PUSH
68147: LD_VAR 0 16
68151: PUSH
68152: EMPTY
68153: LIST
68154: LIST
68155: LIST
68156: LIST
68157: LIST
68158: LIST
68159: PUSH
68160: LD_VAR 0 4
68164: PUSH
68165: LD_INT 1
68167: PLUS
68168: ARRAY
68169: ST_TO_ADDR
68170: GO 68301
68172: LD_INT 2
68174: DOUBLE
68175: EQUAL
68176: IFTRUE 68180
68178: GO 68236
68180: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
68181: LD_ADDR_VAR 0 9
68185: PUSH
68186: LD_VAR 0 17
68190: PUSH
68191: LD_VAR 0 18
68195: PUSH
68196: LD_VAR 0 19
68200: PUSH
68201: LD_VAR 0 20
68205: PUSH
68206: LD_VAR 0 21
68210: PUSH
68211: LD_VAR 0 22
68215: PUSH
68216: EMPTY
68217: LIST
68218: LIST
68219: LIST
68220: LIST
68221: LIST
68222: LIST
68223: PUSH
68224: LD_VAR 0 4
68228: PUSH
68229: LD_INT 1
68231: PLUS
68232: ARRAY
68233: ST_TO_ADDR
68234: GO 68301
68236: LD_INT 3
68238: DOUBLE
68239: EQUAL
68240: IFTRUE 68244
68242: GO 68300
68244: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
68245: LD_ADDR_VAR 0 9
68249: PUSH
68250: LD_VAR 0 23
68254: PUSH
68255: LD_VAR 0 24
68259: PUSH
68260: LD_VAR 0 25
68264: PUSH
68265: LD_VAR 0 26
68269: PUSH
68270: LD_VAR 0 27
68274: PUSH
68275: LD_VAR 0 28
68279: PUSH
68280: EMPTY
68281: LIST
68282: LIST
68283: LIST
68284: LIST
68285: LIST
68286: LIST
68287: PUSH
68288: LD_VAR 0 4
68292: PUSH
68293: LD_INT 1
68295: PLUS
68296: ARRAY
68297: ST_TO_ADDR
68298: GO 68301
68300: POP
68301: GO 68856
68303: LD_INT 2
68305: DOUBLE
68306: EQUAL
68307: IFTRUE 68317
68309: LD_INT 3
68311: DOUBLE
68312: EQUAL
68313: IFTRUE 68317
68315: GO 68373
68317: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
68318: LD_ADDR_VAR 0 9
68322: PUSH
68323: LD_VAR 0 29
68327: PUSH
68328: LD_VAR 0 30
68332: PUSH
68333: LD_VAR 0 31
68337: PUSH
68338: LD_VAR 0 32
68342: PUSH
68343: LD_VAR 0 33
68347: PUSH
68348: LD_VAR 0 34
68352: PUSH
68353: EMPTY
68354: LIST
68355: LIST
68356: LIST
68357: LIST
68358: LIST
68359: LIST
68360: PUSH
68361: LD_VAR 0 4
68365: PUSH
68366: LD_INT 1
68368: PLUS
68369: ARRAY
68370: ST_TO_ADDR
68371: GO 68856
68373: LD_INT 16
68375: DOUBLE
68376: EQUAL
68377: IFTRUE 68435
68379: LD_INT 17
68381: DOUBLE
68382: EQUAL
68383: IFTRUE 68435
68385: LD_INT 18
68387: DOUBLE
68388: EQUAL
68389: IFTRUE 68435
68391: LD_INT 19
68393: DOUBLE
68394: EQUAL
68395: IFTRUE 68435
68397: LD_INT 22
68399: DOUBLE
68400: EQUAL
68401: IFTRUE 68435
68403: LD_INT 20
68405: DOUBLE
68406: EQUAL
68407: IFTRUE 68435
68409: LD_INT 21
68411: DOUBLE
68412: EQUAL
68413: IFTRUE 68435
68415: LD_INT 23
68417: DOUBLE
68418: EQUAL
68419: IFTRUE 68435
68421: LD_INT 24
68423: DOUBLE
68424: EQUAL
68425: IFTRUE 68435
68427: LD_INT 25
68429: DOUBLE
68430: EQUAL
68431: IFTRUE 68435
68433: GO 68491
68435: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
68436: LD_ADDR_VAR 0 9
68440: PUSH
68441: LD_VAR 0 35
68445: PUSH
68446: LD_VAR 0 36
68450: PUSH
68451: LD_VAR 0 37
68455: PUSH
68456: LD_VAR 0 38
68460: PUSH
68461: LD_VAR 0 39
68465: PUSH
68466: LD_VAR 0 40
68470: PUSH
68471: EMPTY
68472: LIST
68473: LIST
68474: LIST
68475: LIST
68476: LIST
68477: LIST
68478: PUSH
68479: LD_VAR 0 4
68483: PUSH
68484: LD_INT 1
68486: PLUS
68487: ARRAY
68488: ST_TO_ADDR
68489: GO 68856
68491: LD_INT 6
68493: DOUBLE
68494: EQUAL
68495: IFTRUE 68547
68497: LD_INT 7
68499: DOUBLE
68500: EQUAL
68501: IFTRUE 68547
68503: LD_INT 8
68505: DOUBLE
68506: EQUAL
68507: IFTRUE 68547
68509: LD_INT 13
68511: DOUBLE
68512: EQUAL
68513: IFTRUE 68547
68515: LD_INT 12
68517: DOUBLE
68518: EQUAL
68519: IFTRUE 68547
68521: LD_INT 15
68523: DOUBLE
68524: EQUAL
68525: IFTRUE 68547
68527: LD_INT 11
68529: DOUBLE
68530: EQUAL
68531: IFTRUE 68547
68533: LD_INT 14
68535: DOUBLE
68536: EQUAL
68537: IFTRUE 68547
68539: LD_INT 10
68541: DOUBLE
68542: EQUAL
68543: IFTRUE 68547
68545: GO 68603
68547: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
68548: LD_ADDR_VAR 0 9
68552: PUSH
68553: LD_VAR 0 41
68557: PUSH
68558: LD_VAR 0 42
68562: PUSH
68563: LD_VAR 0 43
68567: PUSH
68568: LD_VAR 0 44
68572: PUSH
68573: LD_VAR 0 45
68577: PUSH
68578: LD_VAR 0 46
68582: PUSH
68583: EMPTY
68584: LIST
68585: LIST
68586: LIST
68587: LIST
68588: LIST
68589: LIST
68590: PUSH
68591: LD_VAR 0 4
68595: PUSH
68596: LD_INT 1
68598: PLUS
68599: ARRAY
68600: ST_TO_ADDR
68601: GO 68856
68603: LD_INT 36
68605: DOUBLE
68606: EQUAL
68607: IFTRUE 68611
68609: GO 68667
68611: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
68612: LD_ADDR_VAR 0 9
68616: PUSH
68617: LD_VAR 0 47
68621: PUSH
68622: LD_VAR 0 48
68626: PUSH
68627: LD_VAR 0 49
68631: PUSH
68632: LD_VAR 0 50
68636: PUSH
68637: LD_VAR 0 51
68641: PUSH
68642: LD_VAR 0 52
68646: PUSH
68647: EMPTY
68648: LIST
68649: LIST
68650: LIST
68651: LIST
68652: LIST
68653: LIST
68654: PUSH
68655: LD_VAR 0 4
68659: PUSH
68660: LD_INT 1
68662: PLUS
68663: ARRAY
68664: ST_TO_ADDR
68665: GO 68856
68667: LD_INT 4
68669: DOUBLE
68670: EQUAL
68671: IFTRUE 68693
68673: LD_INT 5
68675: DOUBLE
68676: EQUAL
68677: IFTRUE 68693
68679: LD_INT 34
68681: DOUBLE
68682: EQUAL
68683: IFTRUE 68693
68685: LD_INT 37
68687: DOUBLE
68688: EQUAL
68689: IFTRUE 68693
68691: GO 68749
68693: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
68694: LD_ADDR_VAR 0 9
68698: PUSH
68699: LD_VAR 0 53
68703: PUSH
68704: LD_VAR 0 54
68708: PUSH
68709: LD_VAR 0 55
68713: PUSH
68714: LD_VAR 0 56
68718: PUSH
68719: LD_VAR 0 57
68723: PUSH
68724: LD_VAR 0 58
68728: PUSH
68729: EMPTY
68730: LIST
68731: LIST
68732: LIST
68733: LIST
68734: LIST
68735: LIST
68736: PUSH
68737: LD_VAR 0 4
68741: PUSH
68742: LD_INT 1
68744: PLUS
68745: ARRAY
68746: ST_TO_ADDR
68747: GO 68856
68749: LD_INT 31
68751: DOUBLE
68752: EQUAL
68753: IFTRUE 68799
68755: LD_INT 32
68757: DOUBLE
68758: EQUAL
68759: IFTRUE 68799
68761: LD_INT 33
68763: DOUBLE
68764: EQUAL
68765: IFTRUE 68799
68767: LD_INT 27
68769: DOUBLE
68770: EQUAL
68771: IFTRUE 68799
68773: LD_INT 26
68775: DOUBLE
68776: EQUAL
68777: IFTRUE 68799
68779: LD_INT 28
68781: DOUBLE
68782: EQUAL
68783: IFTRUE 68799
68785: LD_INT 29
68787: DOUBLE
68788: EQUAL
68789: IFTRUE 68799
68791: LD_INT 30
68793: DOUBLE
68794: EQUAL
68795: IFTRUE 68799
68797: GO 68855
68799: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
68800: LD_ADDR_VAR 0 9
68804: PUSH
68805: LD_VAR 0 59
68809: PUSH
68810: LD_VAR 0 60
68814: PUSH
68815: LD_VAR 0 61
68819: PUSH
68820: LD_VAR 0 62
68824: PUSH
68825: LD_VAR 0 63
68829: PUSH
68830: LD_VAR 0 64
68834: PUSH
68835: EMPTY
68836: LIST
68837: LIST
68838: LIST
68839: LIST
68840: LIST
68841: LIST
68842: PUSH
68843: LD_VAR 0 4
68847: PUSH
68848: LD_INT 1
68850: PLUS
68851: ARRAY
68852: ST_TO_ADDR
68853: GO 68856
68855: POP
// temp_list2 = [ ] ;
68856: LD_ADDR_VAR 0 10
68860: PUSH
68861: EMPTY
68862: ST_TO_ADDR
// for i in temp_list do
68863: LD_ADDR_VAR 0 8
68867: PUSH
68868: LD_VAR 0 9
68872: PUSH
68873: FOR_IN
68874: IFFALSE 68926
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
68876: LD_ADDR_VAR 0 10
68880: PUSH
68881: LD_VAR 0 10
68885: PUSH
68886: LD_VAR 0 8
68890: PUSH
68891: LD_INT 1
68893: ARRAY
68894: PUSH
68895: LD_VAR 0 2
68899: PLUS
68900: PUSH
68901: LD_VAR 0 8
68905: PUSH
68906: LD_INT 2
68908: ARRAY
68909: PUSH
68910: LD_VAR 0 3
68914: PLUS
68915: PUSH
68916: EMPTY
68917: LIST
68918: LIST
68919: PUSH
68920: EMPTY
68921: LIST
68922: ADD
68923: ST_TO_ADDR
68924: GO 68873
68926: POP
68927: POP
// result = temp_list2 ;
68928: LD_ADDR_VAR 0 7
68932: PUSH
68933: LD_VAR 0 10
68937: ST_TO_ADDR
// end ;
68938: LD_VAR 0 7
68942: RET
// export function EnemyInRange ( unit , dist ) ; begin
68943: LD_INT 0
68945: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
68946: LD_ADDR_VAR 0 3
68950: PUSH
68951: LD_VAR 0 1
68955: PPUSH
68956: CALL_OW 255
68960: PPUSH
68961: LD_VAR 0 1
68965: PPUSH
68966: CALL_OW 250
68970: PPUSH
68971: LD_VAR 0 1
68975: PPUSH
68976: CALL_OW 251
68980: PPUSH
68981: LD_VAR 0 2
68985: PPUSH
68986: CALL 42714 0 4
68990: PUSH
68991: LD_INT 4
68993: ARRAY
68994: ST_TO_ADDR
// end ;
68995: LD_VAR 0 3
68999: RET
// export function PlayerSeeMe ( unit ) ; begin
69000: LD_INT 0
69002: PPUSH
// result := See ( your_side , unit ) ;
69003: LD_ADDR_VAR 0 2
69007: PUSH
69008: LD_OWVAR 2
69012: PPUSH
69013: LD_VAR 0 1
69017: PPUSH
69018: CALL_OW 292
69022: ST_TO_ADDR
// end ;
69023: LD_VAR 0 2
69027: RET
// export function ReverseDir ( unit ) ; begin
69028: LD_INT 0
69030: PPUSH
// if not unit then
69031: LD_VAR 0 1
69035: NOT
69036: IFFALSE 69040
// exit ;
69038: GO 69063
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
69040: LD_ADDR_VAR 0 2
69044: PUSH
69045: LD_VAR 0 1
69049: PPUSH
69050: CALL_OW 254
69054: PUSH
69055: LD_INT 3
69057: PLUS
69058: PUSH
69059: LD_INT 6
69061: MOD
69062: ST_TO_ADDR
// end ;
69063: LD_VAR 0 2
69067: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
69068: LD_INT 0
69070: PPUSH
69071: PPUSH
69072: PPUSH
69073: PPUSH
69074: PPUSH
// if not hexes then
69075: LD_VAR 0 2
69079: NOT
69080: IFFALSE 69084
// exit ;
69082: GO 69232
// dist := 9999 ;
69084: LD_ADDR_VAR 0 5
69088: PUSH
69089: LD_INT 9999
69091: ST_TO_ADDR
// for i = 1 to hexes do
69092: LD_ADDR_VAR 0 4
69096: PUSH
69097: DOUBLE
69098: LD_INT 1
69100: DEC
69101: ST_TO_ADDR
69102: LD_VAR 0 2
69106: PUSH
69107: FOR_TO
69108: IFFALSE 69220
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
69110: LD_VAR 0 1
69114: PPUSH
69115: LD_VAR 0 2
69119: PUSH
69120: LD_VAR 0 4
69124: ARRAY
69125: PUSH
69126: LD_INT 1
69128: ARRAY
69129: PPUSH
69130: LD_VAR 0 2
69134: PUSH
69135: LD_VAR 0 4
69139: ARRAY
69140: PUSH
69141: LD_INT 2
69143: ARRAY
69144: PPUSH
69145: CALL_OW 297
69149: PUSH
69150: LD_VAR 0 5
69154: LESS
69155: IFFALSE 69218
// begin hex := hexes [ i ] ;
69157: LD_ADDR_VAR 0 7
69161: PUSH
69162: LD_VAR 0 2
69166: PUSH
69167: LD_VAR 0 4
69171: ARRAY
69172: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
69173: LD_ADDR_VAR 0 5
69177: PUSH
69178: LD_VAR 0 1
69182: PPUSH
69183: LD_VAR 0 2
69187: PUSH
69188: LD_VAR 0 4
69192: ARRAY
69193: PUSH
69194: LD_INT 1
69196: ARRAY
69197: PPUSH
69198: LD_VAR 0 2
69202: PUSH
69203: LD_VAR 0 4
69207: ARRAY
69208: PUSH
69209: LD_INT 2
69211: ARRAY
69212: PPUSH
69213: CALL_OW 297
69217: ST_TO_ADDR
// end ; end ;
69218: GO 69107
69220: POP
69221: POP
// result := hex ;
69222: LD_ADDR_VAR 0 3
69226: PUSH
69227: LD_VAR 0 7
69231: ST_TO_ADDR
// end ;
69232: LD_VAR 0 3
69236: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
69237: LD_INT 0
69239: PPUSH
69240: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
69241: LD_VAR 0 1
69245: NOT
69246: PUSH
69247: LD_VAR 0 1
69251: PUSH
69252: LD_INT 21
69254: PUSH
69255: LD_INT 2
69257: PUSH
69258: EMPTY
69259: LIST
69260: LIST
69261: PUSH
69262: LD_INT 23
69264: PUSH
69265: LD_INT 2
69267: PUSH
69268: EMPTY
69269: LIST
69270: LIST
69271: PUSH
69272: EMPTY
69273: LIST
69274: LIST
69275: PPUSH
69276: CALL_OW 69
69280: IN
69281: NOT
69282: OR
69283: IFFALSE 69287
// exit ;
69285: GO 69334
// for i = 1 to 3 do
69287: LD_ADDR_VAR 0 3
69291: PUSH
69292: DOUBLE
69293: LD_INT 1
69295: DEC
69296: ST_TO_ADDR
69297: LD_INT 3
69299: PUSH
69300: FOR_TO
69301: IFFALSE 69332
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
69303: LD_VAR 0 1
69307: PPUSH
69308: CALL_OW 250
69312: PPUSH
69313: LD_VAR 0 1
69317: PPUSH
69318: CALL_OW 251
69322: PPUSH
69323: LD_INT 1
69325: PPUSH
69326: CALL_OW 453
69330: GO 69300
69332: POP
69333: POP
// end ;
69334: LD_VAR 0 2
69338: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
69339: LD_INT 0
69341: PPUSH
69342: PPUSH
69343: PPUSH
69344: PPUSH
69345: PPUSH
69346: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
69347: LD_VAR 0 1
69351: NOT
69352: PUSH
69353: LD_VAR 0 2
69357: NOT
69358: OR
69359: PUSH
69360: LD_VAR 0 1
69364: PPUSH
69365: CALL_OW 314
69369: OR
69370: IFFALSE 69374
// exit ;
69372: GO 69815
// x := GetX ( enemy_unit ) ;
69374: LD_ADDR_VAR 0 7
69378: PUSH
69379: LD_VAR 0 2
69383: PPUSH
69384: CALL_OW 250
69388: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
69389: LD_ADDR_VAR 0 8
69393: PUSH
69394: LD_VAR 0 2
69398: PPUSH
69399: CALL_OW 251
69403: ST_TO_ADDR
// if not x or not y then
69404: LD_VAR 0 7
69408: NOT
69409: PUSH
69410: LD_VAR 0 8
69414: NOT
69415: OR
69416: IFFALSE 69420
// exit ;
69418: GO 69815
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
69420: LD_ADDR_VAR 0 6
69424: PUSH
69425: LD_VAR 0 7
69429: PPUSH
69430: LD_INT 0
69432: PPUSH
69433: LD_INT 4
69435: PPUSH
69436: CALL_OW 272
69440: PUSH
69441: LD_VAR 0 8
69445: PPUSH
69446: LD_INT 0
69448: PPUSH
69449: LD_INT 4
69451: PPUSH
69452: CALL_OW 273
69456: PUSH
69457: EMPTY
69458: LIST
69459: LIST
69460: PUSH
69461: LD_VAR 0 7
69465: PPUSH
69466: LD_INT 1
69468: PPUSH
69469: LD_INT 4
69471: PPUSH
69472: CALL_OW 272
69476: PUSH
69477: LD_VAR 0 8
69481: PPUSH
69482: LD_INT 1
69484: PPUSH
69485: LD_INT 4
69487: PPUSH
69488: CALL_OW 273
69492: PUSH
69493: EMPTY
69494: LIST
69495: LIST
69496: PUSH
69497: LD_VAR 0 7
69501: PPUSH
69502: LD_INT 2
69504: PPUSH
69505: LD_INT 4
69507: PPUSH
69508: CALL_OW 272
69512: PUSH
69513: LD_VAR 0 8
69517: PPUSH
69518: LD_INT 2
69520: PPUSH
69521: LD_INT 4
69523: PPUSH
69524: CALL_OW 273
69528: PUSH
69529: EMPTY
69530: LIST
69531: LIST
69532: PUSH
69533: LD_VAR 0 7
69537: PPUSH
69538: LD_INT 3
69540: PPUSH
69541: LD_INT 4
69543: PPUSH
69544: CALL_OW 272
69548: PUSH
69549: LD_VAR 0 8
69553: PPUSH
69554: LD_INT 3
69556: PPUSH
69557: LD_INT 4
69559: PPUSH
69560: CALL_OW 273
69564: PUSH
69565: EMPTY
69566: LIST
69567: LIST
69568: PUSH
69569: LD_VAR 0 7
69573: PPUSH
69574: LD_INT 4
69576: PPUSH
69577: LD_INT 4
69579: PPUSH
69580: CALL_OW 272
69584: PUSH
69585: LD_VAR 0 8
69589: PPUSH
69590: LD_INT 4
69592: PPUSH
69593: LD_INT 4
69595: PPUSH
69596: CALL_OW 273
69600: PUSH
69601: EMPTY
69602: LIST
69603: LIST
69604: PUSH
69605: LD_VAR 0 7
69609: PPUSH
69610: LD_INT 5
69612: PPUSH
69613: LD_INT 4
69615: PPUSH
69616: CALL_OW 272
69620: PUSH
69621: LD_VAR 0 8
69625: PPUSH
69626: LD_INT 5
69628: PPUSH
69629: LD_INT 4
69631: PPUSH
69632: CALL_OW 273
69636: PUSH
69637: EMPTY
69638: LIST
69639: LIST
69640: PUSH
69641: EMPTY
69642: LIST
69643: LIST
69644: LIST
69645: LIST
69646: LIST
69647: LIST
69648: ST_TO_ADDR
// for i = tmp downto 1 do
69649: LD_ADDR_VAR 0 4
69653: PUSH
69654: DOUBLE
69655: LD_VAR 0 6
69659: INC
69660: ST_TO_ADDR
69661: LD_INT 1
69663: PUSH
69664: FOR_DOWNTO
69665: IFFALSE 69766
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
69667: LD_VAR 0 6
69671: PUSH
69672: LD_VAR 0 4
69676: ARRAY
69677: PUSH
69678: LD_INT 1
69680: ARRAY
69681: PPUSH
69682: LD_VAR 0 6
69686: PUSH
69687: LD_VAR 0 4
69691: ARRAY
69692: PUSH
69693: LD_INT 2
69695: ARRAY
69696: PPUSH
69697: CALL_OW 488
69701: NOT
69702: PUSH
69703: LD_VAR 0 6
69707: PUSH
69708: LD_VAR 0 4
69712: ARRAY
69713: PUSH
69714: LD_INT 1
69716: ARRAY
69717: PPUSH
69718: LD_VAR 0 6
69722: PUSH
69723: LD_VAR 0 4
69727: ARRAY
69728: PUSH
69729: LD_INT 2
69731: ARRAY
69732: PPUSH
69733: CALL_OW 428
69737: PUSH
69738: LD_INT 0
69740: NONEQUAL
69741: OR
69742: IFFALSE 69764
// tmp := Delete ( tmp , i ) ;
69744: LD_ADDR_VAR 0 6
69748: PUSH
69749: LD_VAR 0 6
69753: PPUSH
69754: LD_VAR 0 4
69758: PPUSH
69759: CALL_OW 3
69763: ST_TO_ADDR
69764: GO 69664
69766: POP
69767: POP
// j := GetClosestHex ( unit , tmp ) ;
69768: LD_ADDR_VAR 0 5
69772: PUSH
69773: LD_VAR 0 1
69777: PPUSH
69778: LD_VAR 0 6
69782: PPUSH
69783: CALL 69068 0 2
69787: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
69788: LD_VAR 0 1
69792: PPUSH
69793: LD_VAR 0 5
69797: PUSH
69798: LD_INT 1
69800: ARRAY
69801: PPUSH
69802: LD_VAR 0 5
69806: PUSH
69807: LD_INT 2
69809: ARRAY
69810: PPUSH
69811: CALL_OW 111
// end ;
69815: LD_VAR 0 3
69819: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
69820: LD_INT 0
69822: PPUSH
69823: PPUSH
69824: PPUSH
// uc_side = 0 ;
69825: LD_ADDR_OWVAR 20
69829: PUSH
69830: LD_INT 0
69832: ST_TO_ADDR
// uc_nation = 0 ;
69833: LD_ADDR_OWVAR 21
69837: PUSH
69838: LD_INT 0
69840: ST_TO_ADDR
// InitHc_All ( ) ;
69841: CALL_OW 584
// InitVc ;
69845: CALL_OW 20
// if mastodonts then
69849: LD_VAR 0 6
69853: IFFALSE 69920
// for i = 1 to mastodonts do
69855: LD_ADDR_VAR 0 11
69859: PUSH
69860: DOUBLE
69861: LD_INT 1
69863: DEC
69864: ST_TO_ADDR
69865: LD_VAR 0 6
69869: PUSH
69870: FOR_TO
69871: IFFALSE 69918
// begin vc_chassis := 31 ;
69873: LD_ADDR_OWVAR 37
69877: PUSH
69878: LD_INT 31
69880: ST_TO_ADDR
// vc_control := control_rider ;
69881: LD_ADDR_OWVAR 38
69885: PUSH
69886: LD_INT 4
69888: ST_TO_ADDR
// animal := CreateVehicle ;
69889: LD_ADDR_VAR 0 12
69893: PUSH
69894: CALL_OW 45
69898: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69899: LD_VAR 0 12
69903: PPUSH
69904: LD_VAR 0 8
69908: PPUSH
69909: LD_INT 0
69911: PPUSH
69912: CALL 72108 0 3
// end ;
69916: GO 69870
69918: POP
69919: POP
// if horses then
69920: LD_VAR 0 5
69924: IFFALSE 69991
// for i = 1 to horses do
69926: LD_ADDR_VAR 0 11
69930: PUSH
69931: DOUBLE
69932: LD_INT 1
69934: DEC
69935: ST_TO_ADDR
69936: LD_VAR 0 5
69940: PUSH
69941: FOR_TO
69942: IFFALSE 69989
// begin hc_class := 21 ;
69944: LD_ADDR_OWVAR 28
69948: PUSH
69949: LD_INT 21
69951: ST_TO_ADDR
// hc_gallery :=  ;
69952: LD_ADDR_OWVAR 33
69956: PUSH
69957: LD_STRING 
69959: ST_TO_ADDR
// animal := CreateHuman ;
69960: LD_ADDR_VAR 0 12
69964: PUSH
69965: CALL_OW 44
69969: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69970: LD_VAR 0 12
69974: PPUSH
69975: LD_VAR 0 8
69979: PPUSH
69980: LD_INT 0
69982: PPUSH
69983: CALL 72108 0 3
// end ;
69987: GO 69941
69989: POP
69990: POP
// if birds then
69991: LD_VAR 0 1
69995: IFFALSE 70062
// for i = 1 to birds do
69997: LD_ADDR_VAR 0 11
70001: PUSH
70002: DOUBLE
70003: LD_INT 1
70005: DEC
70006: ST_TO_ADDR
70007: LD_VAR 0 1
70011: PUSH
70012: FOR_TO
70013: IFFALSE 70060
// begin hc_class = 18 ;
70015: LD_ADDR_OWVAR 28
70019: PUSH
70020: LD_INT 18
70022: ST_TO_ADDR
// hc_gallery =  ;
70023: LD_ADDR_OWVAR 33
70027: PUSH
70028: LD_STRING 
70030: ST_TO_ADDR
// animal := CreateHuman ;
70031: LD_ADDR_VAR 0 12
70035: PUSH
70036: CALL_OW 44
70040: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70041: LD_VAR 0 12
70045: PPUSH
70046: LD_VAR 0 8
70050: PPUSH
70051: LD_INT 0
70053: PPUSH
70054: CALL 72108 0 3
// end ;
70058: GO 70012
70060: POP
70061: POP
// if tigers then
70062: LD_VAR 0 2
70066: IFFALSE 70150
// for i = 1 to tigers do
70068: LD_ADDR_VAR 0 11
70072: PUSH
70073: DOUBLE
70074: LD_INT 1
70076: DEC
70077: ST_TO_ADDR
70078: LD_VAR 0 2
70082: PUSH
70083: FOR_TO
70084: IFFALSE 70148
// begin hc_class = class_tiger ;
70086: LD_ADDR_OWVAR 28
70090: PUSH
70091: LD_INT 14
70093: ST_TO_ADDR
// hc_gallery =  ;
70094: LD_ADDR_OWVAR 33
70098: PUSH
70099: LD_STRING 
70101: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
70102: LD_ADDR_OWVAR 35
70106: PUSH
70107: LD_INT 7
70109: NEG
70110: PPUSH
70111: LD_INT 7
70113: PPUSH
70114: CALL_OW 12
70118: ST_TO_ADDR
// animal := CreateHuman ;
70119: LD_ADDR_VAR 0 12
70123: PUSH
70124: CALL_OW 44
70128: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70129: LD_VAR 0 12
70133: PPUSH
70134: LD_VAR 0 8
70138: PPUSH
70139: LD_INT 0
70141: PPUSH
70142: CALL 72108 0 3
// end ;
70146: GO 70083
70148: POP
70149: POP
// if apemans then
70150: LD_VAR 0 3
70154: IFFALSE 70277
// for i = 1 to apemans do
70156: LD_ADDR_VAR 0 11
70160: PUSH
70161: DOUBLE
70162: LD_INT 1
70164: DEC
70165: ST_TO_ADDR
70166: LD_VAR 0 3
70170: PUSH
70171: FOR_TO
70172: IFFALSE 70275
// begin hc_class = class_apeman ;
70174: LD_ADDR_OWVAR 28
70178: PUSH
70179: LD_INT 12
70181: ST_TO_ADDR
// hc_gallery =  ;
70182: LD_ADDR_OWVAR 33
70186: PUSH
70187: LD_STRING 
70189: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
70190: LD_ADDR_OWVAR 35
70194: PUSH
70195: LD_INT 5
70197: NEG
70198: PPUSH
70199: LD_INT 5
70201: PPUSH
70202: CALL_OW 12
70206: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
70207: LD_ADDR_OWVAR 31
70211: PUSH
70212: LD_INT 1
70214: PPUSH
70215: LD_INT 3
70217: PPUSH
70218: CALL_OW 12
70222: PUSH
70223: LD_INT 1
70225: PPUSH
70226: LD_INT 3
70228: PPUSH
70229: CALL_OW 12
70233: PUSH
70234: LD_INT 0
70236: PUSH
70237: LD_INT 0
70239: PUSH
70240: EMPTY
70241: LIST
70242: LIST
70243: LIST
70244: LIST
70245: ST_TO_ADDR
// animal := CreateHuman ;
70246: LD_ADDR_VAR 0 12
70250: PUSH
70251: CALL_OW 44
70255: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70256: LD_VAR 0 12
70260: PPUSH
70261: LD_VAR 0 8
70265: PPUSH
70266: LD_INT 0
70268: PPUSH
70269: CALL 72108 0 3
// end ;
70273: GO 70171
70275: POP
70276: POP
// if enchidnas then
70277: LD_VAR 0 4
70281: IFFALSE 70348
// for i = 1 to enchidnas do
70283: LD_ADDR_VAR 0 11
70287: PUSH
70288: DOUBLE
70289: LD_INT 1
70291: DEC
70292: ST_TO_ADDR
70293: LD_VAR 0 4
70297: PUSH
70298: FOR_TO
70299: IFFALSE 70346
// begin hc_class = 13 ;
70301: LD_ADDR_OWVAR 28
70305: PUSH
70306: LD_INT 13
70308: ST_TO_ADDR
// hc_gallery =  ;
70309: LD_ADDR_OWVAR 33
70313: PUSH
70314: LD_STRING 
70316: ST_TO_ADDR
// animal := CreateHuman ;
70317: LD_ADDR_VAR 0 12
70321: PUSH
70322: CALL_OW 44
70326: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70327: LD_VAR 0 12
70331: PPUSH
70332: LD_VAR 0 8
70336: PPUSH
70337: LD_INT 0
70339: PPUSH
70340: CALL 72108 0 3
// end ;
70344: GO 70298
70346: POP
70347: POP
// if fishes then
70348: LD_VAR 0 7
70352: IFFALSE 70419
// for i = 1 to fishes do
70354: LD_ADDR_VAR 0 11
70358: PUSH
70359: DOUBLE
70360: LD_INT 1
70362: DEC
70363: ST_TO_ADDR
70364: LD_VAR 0 7
70368: PUSH
70369: FOR_TO
70370: IFFALSE 70417
// begin hc_class = 20 ;
70372: LD_ADDR_OWVAR 28
70376: PUSH
70377: LD_INT 20
70379: ST_TO_ADDR
// hc_gallery =  ;
70380: LD_ADDR_OWVAR 33
70384: PUSH
70385: LD_STRING 
70387: ST_TO_ADDR
// animal := CreateHuman ;
70388: LD_ADDR_VAR 0 12
70392: PUSH
70393: CALL_OW 44
70397: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
70398: LD_VAR 0 12
70402: PPUSH
70403: LD_VAR 0 9
70407: PPUSH
70408: LD_INT 0
70410: PPUSH
70411: CALL 72108 0 3
// end ;
70415: GO 70369
70417: POP
70418: POP
// end ;
70419: LD_VAR 0 10
70423: RET
// export function WantHeal ( sci , unit ) ; begin
70424: LD_INT 0
70426: PPUSH
// if GetTaskList ( sci ) > 0 then
70427: LD_VAR 0 1
70431: PPUSH
70432: CALL_OW 437
70436: PUSH
70437: LD_INT 0
70439: GREATER
70440: IFFALSE 70510
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
70442: LD_VAR 0 1
70446: PPUSH
70447: CALL_OW 437
70451: PUSH
70452: LD_INT 1
70454: ARRAY
70455: PUSH
70456: LD_INT 1
70458: ARRAY
70459: PUSH
70460: LD_STRING l
70462: EQUAL
70463: PUSH
70464: LD_VAR 0 1
70468: PPUSH
70469: CALL_OW 437
70473: PUSH
70474: LD_INT 1
70476: ARRAY
70477: PUSH
70478: LD_INT 4
70480: ARRAY
70481: PUSH
70482: LD_VAR 0 2
70486: EQUAL
70487: AND
70488: IFFALSE 70500
// result := true else
70490: LD_ADDR_VAR 0 3
70494: PUSH
70495: LD_INT 1
70497: ST_TO_ADDR
70498: GO 70508
// result := false ;
70500: LD_ADDR_VAR 0 3
70504: PUSH
70505: LD_INT 0
70507: ST_TO_ADDR
// end else
70508: GO 70518
// result := false ;
70510: LD_ADDR_VAR 0 3
70514: PUSH
70515: LD_INT 0
70517: ST_TO_ADDR
// end ;
70518: LD_VAR 0 3
70522: RET
// export function HealTarget ( sci ) ; begin
70523: LD_INT 0
70525: PPUSH
// if not sci then
70526: LD_VAR 0 1
70530: NOT
70531: IFFALSE 70535
// exit ;
70533: GO 70600
// result := 0 ;
70535: LD_ADDR_VAR 0 2
70539: PUSH
70540: LD_INT 0
70542: ST_TO_ADDR
// if GetTaskList ( sci ) then
70543: LD_VAR 0 1
70547: PPUSH
70548: CALL_OW 437
70552: IFFALSE 70600
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
70554: LD_VAR 0 1
70558: PPUSH
70559: CALL_OW 437
70563: PUSH
70564: LD_INT 1
70566: ARRAY
70567: PUSH
70568: LD_INT 1
70570: ARRAY
70571: PUSH
70572: LD_STRING l
70574: EQUAL
70575: IFFALSE 70600
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
70577: LD_ADDR_VAR 0 2
70581: PUSH
70582: LD_VAR 0 1
70586: PPUSH
70587: CALL_OW 437
70591: PUSH
70592: LD_INT 1
70594: ARRAY
70595: PUSH
70596: LD_INT 4
70598: ARRAY
70599: ST_TO_ADDR
// end ;
70600: LD_VAR 0 2
70604: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
70605: LD_INT 0
70607: PPUSH
70608: PPUSH
70609: PPUSH
70610: PPUSH
// if not base_units then
70611: LD_VAR 0 1
70615: NOT
70616: IFFALSE 70620
// exit ;
70618: GO 70707
// result := false ;
70620: LD_ADDR_VAR 0 2
70624: PUSH
70625: LD_INT 0
70627: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
70628: LD_ADDR_VAR 0 5
70632: PUSH
70633: LD_VAR 0 1
70637: PPUSH
70638: LD_INT 21
70640: PUSH
70641: LD_INT 3
70643: PUSH
70644: EMPTY
70645: LIST
70646: LIST
70647: PPUSH
70648: CALL_OW 72
70652: ST_TO_ADDR
// if not tmp then
70653: LD_VAR 0 5
70657: NOT
70658: IFFALSE 70662
// exit ;
70660: GO 70707
// for i in tmp do
70662: LD_ADDR_VAR 0 3
70666: PUSH
70667: LD_VAR 0 5
70671: PUSH
70672: FOR_IN
70673: IFFALSE 70705
// begin result := EnemyInRange ( i , 22 ) ;
70675: LD_ADDR_VAR 0 2
70679: PUSH
70680: LD_VAR 0 3
70684: PPUSH
70685: LD_INT 22
70687: PPUSH
70688: CALL 68943 0 2
70692: ST_TO_ADDR
// if result then
70693: LD_VAR 0 2
70697: IFFALSE 70703
// exit ;
70699: POP
70700: POP
70701: GO 70707
// end ;
70703: GO 70672
70705: POP
70706: POP
// end ;
70707: LD_VAR 0 2
70711: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
70712: LD_INT 0
70714: PPUSH
70715: PPUSH
// if not units then
70716: LD_VAR 0 1
70720: NOT
70721: IFFALSE 70725
// exit ;
70723: GO 70795
// result := [ ] ;
70725: LD_ADDR_VAR 0 3
70729: PUSH
70730: EMPTY
70731: ST_TO_ADDR
// for i in units do
70732: LD_ADDR_VAR 0 4
70736: PUSH
70737: LD_VAR 0 1
70741: PUSH
70742: FOR_IN
70743: IFFALSE 70793
// if GetTag ( i ) = tag then
70745: LD_VAR 0 4
70749: PPUSH
70750: CALL_OW 110
70754: PUSH
70755: LD_VAR 0 2
70759: EQUAL
70760: IFFALSE 70791
// result := Insert ( result , result + 1 , i ) ;
70762: LD_ADDR_VAR 0 3
70766: PUSH
70767: LD_VAR 0 3
70771: PPUSH
70772: LD_VAR 0 3
70776: PUSH
70777: LD_INT 1
70779: PLUS
70780: PPUSH
70781: LD_VAR 0 4
70785: PPUSH
70786: CALL_OW 2
70790: ST_TO_ADDR
70791: GO 70742
70793: POP
70794: POP
// end ;
70795: LD_VAR 0 3
70799: RET
// export function IsDriver ( un ) ; begin
70800: LD_INT 0
70802: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
70803: LD_ADDR_VAR 0 2
70807: PUSH
70808: LD_VAR 0 1
70812: PUSH
70813: LD_INT 55
70815: PUSH
70816: EMPTY
70817: LIST
70818: PPUSH
70819: CALL_OW 69
70823: IN
70824: ST_TO_ADDR
// end ;
70825: LD_VAR 0 2
70829: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
70830: LD_INT 0
70832: PPUSH
70833: PPUSH
// list := [ ] ;
70834: LD_ADDR_VAR 0 5
70838: PUSH
70839: EMPTY
70840: ST_TO_ADDR
// case d of 0 :
70841: LD_VAR 0 3
70845: PUSH
70846: LD_INT 0
70848: DOUBLE
70849: EQUAL
70850: IFTRUE 70854
70852: GO 70987
70854: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
70855: LD_ADDR_VAR 0 5
70859: PUSH
70860: LD_VAR 0 1
70864: PUSH
70865: LD_INT 4
70867: MINUS
70868: PUSH
70869: LD_VAR 0 2
70873: PUSH
70874: LD_INT 4
70876: MINUS
70877: PUSH
70878: LD_INT 2
70880: PUSH
70881: EMPTY
70882: LIST
70883: LIST
70884: LIST
70885: PUSH
70886: LD_VAR 0 1
70890: PUSH
70891: LD_INT 3
70893: MINUS
70894: PUSH
70895: LD_VAR 0 2
70899: PUSH
70900: LD_INT 1
70902: PUSH
70903: EMPTY
70904: LIST
70905: LIST
70906: LIST
70907: PUSH
70908: LD_VAR 0 1
70912: PUSH
70913: LD_INT 4
70915: PLUS
70916: PUSH
70917: LD_VAR 0 2
70921: PUSH
70922: LD_INT 4
70924: PUSH
70925: EMPTY
70926: LIST
70927: LIST
70928: LIST
70929: PUSH
70930: LD_VAR 0 1
70934: PUSH
70935: LD_INT 3
70937: PLUS
70938: PUSH
70939: LD_VAR 0 2
70943: PUSH
70944: LD_INT 3
70946: PLUS
70947: PUSH
70948: LD_INT 5
70950: PUSH
70951: EMPTY
70952: LIST
70953: LIST
70954: LIST
70955: PUSH
70956: LD_VAR 0 1
70960: PUSH
70961: LD_VAR 0 2
70965: PUSH
70966: LD_INT 4
70968: PLUS
70969: PUSH
70970: LD_INT 0
70972: PUSH
70973: EMPTY
70974: LIST
70975: LIST
70976: LIST
70977: PUSH
70978: EMPTY
70979: LIST
70980: LIST
70981: LIST
70982: LIST
70983: LIST
70984: ST_TO_ADDR
// end ; 1 :
70985: GO 71685
70987: LD_INT 1
70989: DOUBLE
70990: EQUAL
70991: IFTRUE 70995
70993: GO 71128
70995: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
70996: LD_ADDR_VAR 0 5
71000: PUSH
71001: LD_VAR 0 1
71005: PUSH
71006: LD_VAR 0 2
71010: PUSH
71011: LD_INT 4
71013: MINUS
71014: PUSH
71015: LD_INT 3
71017: PUSH
71018: EMPTY
71019: LIST
71020: LIST
71021: LIST
71022: PUSH
71023: LD_VAR 0 1
71027: PUSH
71028: LD_INT 3
71030: MINUS
71031: PUSH
71032: LD_VAR 0 2
71036: PUSH
71037: LD_INT 3
71039: MINUS
71040: PUSH
71041: LD_INT 2
71043: PUSH
71044: EMPTY
71045: LIST
71046: LIST
71047: LIST
71048: PUSH
71049: LD_VAR 0 1
71053: PUSH
71054: LD_INT 4
71056: MINUS
71057: PUSH
71058: LD_VAR 0 2
71062: PUSH
71063: LD_INT 1
71065: PUSH
71066: EMPTY
71067: LIST
71068: LIST
71069: LIST
71070: PUSH
71071: LD_VAR 0 1
71075: PUSH
71076: LD_VAR 0 2
71080: PUSH
71081: LD_INT 3
71083: PLUS
71084: PUSH
71085: LD_INT 0
71087: PUSH
71088: EMPTY
71089: LIST
71090: LIST
71091: LIST
71092: PUSH
71093: LD_VAR 0 1
71097: PUSH
71098: LD_INT 4
71100: PLUS
71101: PUSH
71102: LD_VAR 0 2
71106: PUSH
71107: LD_INT 4
71109: PLUS
71110: PUSH
71111: LD_INT 5
71113: PUSH
71114: EMPTY
71115: LIST
71116: LIST
71117: LIST
71118: PUSH
71119: EMPTY
71120: LIST
71121: LIST
71122: LIST
71123: LIST
71124: LIST
71125: ST_TO_ADDR
// end ; 2 :
71126: GO 71685
71128: LD_INT 2
71130: DOUBLE
71131: EQUAL
71132: IFTRUE 71136
71134: GO 71265
71136: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
71137: LD_ADDR_VAR 0 5
71141: PUSH
71142: LD_VAR 0 1
71146: PUSH
71147: LD_VAR 0 2
71151: PUSH
71152: LD_INT 3
71154: MINUS
71155: PUSH
71156: LD_INT 3
71158: PUSH
71159: EMPTY
71160: LIST
71161: LIST
71162: LIST
71163: PUSH
71164: LD_VAR 0 1
71168: PUSH
71169: LD_INT 4
71171: PLUS
71172: PUSH
71173: LD_VAR 0 2
71177: PUSH
71178: LD_INT 4
71180: PUSH
71181: EMPTY
71182: LIST
71183: LIST
71184: LIST
71185: PUSH
71186: LD_VAR 0 1
71190: PUSH
71191: LD_VAR 0 2
71195: PUSH
71196: LD_INT 4
71198: PLUS
71199: PUSH
71200: LD_INT 0
71202: PUSH
71203: EMPTY
71204: LIST
71205: LIST
71206: LIST
71207: PUSH
71208: LD_VAR 0 1
71212: PUSH
71213: LD_INT 3
71215: MINUS
71216: PUSH
71217: LD_VAR 0 2
71221: PUSH
71222: LD_INT 1
71224: PUSH
71225: EMPTY
71226: LIST
71227: LIST
71228: LIST
71229: PUSH
71230: LD_VAR 0 1
71234: PUSH
71235: LD_INT 4
71237: MINUS
71238: PUSH
71239: LD_VAR 0 2
71243: PUSH
71244: LD_INT 4
71246: MINUS
71247: PUSH
71248: LD_INT 2
71250: PUSH
71251: EMPTY
71252: LIST
71253: LIST
71254: LIST
71255: PUSH
71256: EMPTY
71257: LIST
71258: LIST
71259: LIST
71260: LIST
71261: LIST
71262: ST_TO_ADDR
// end ; 3 :
71263: GO 71685
71265: LD_INT 3
71267: DOUBLE
71268: EQUAL
71269: IFTRUE 71273
71271: GO 71406
71273: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
71274: LD_ADDR_VAR 0 5
71278: PUSH
71279: LD_VAR 0 1
71283: PUSH
71284: LD_INT 3
71286: PLUS
71287: PUSH
71288: LD_VAR 0 2
71292: PUSH
71293: LD_INT 4
71295: PUSH
71296: EMPTY
71297: LIST
71298: LIST
71299: LIST
71300: PUSH
71301: LD_VAR 0 1
71305: PUSH
71306: LD_INT 4
71308: PLUS
71309: PUSH
71310: LD_VAR 0 2
71314: PUSH
71315: LD_INT 4
71317: PLUS
71318: PUSH
71319: LD_INT 5
71321: PUSH
71322: EMPTY
71323: LIST
71324: LIST
71325: LIST
71326: PUSH
71327: LD_VAR 0 1
71331: PUSH
71332: LD_INT 4
71334: MINUS
71335: PUSH
71336: LD_VAR 0 2
71340: PUSH
71341: LD_INT 1
71343: PUSH
71344: EMPTY
71345: LIST
71346: LIST
71347: LIST
71348: PUSH
71349: LD_VAR 0 1
71353: PUSH
71354: LD_VAR 0 2
71358: PUSH
71359: LD_INT 4
71361: MINUS
71362: PUSH
71363: LD_INT 3
71365: PUSH
71366: EMPTY
71367: LIST
71368: LIST
71369: LIST
71370: PUSH
71371: LD_VAR 0 1
71375: PUSH
71376: LD_INT 3
71378: MINUS
71379: PUSH
71380: LD_VAR 0 2
71384: PUSH
71385: LD_INT 3
71387: MINUS
71388: PUSH
71389: LD_INT 2
71391: PUSH
71392: EMPTY
71393: LIST
71394: LIST
71395: LIST
71396: PUSH
71397: EMPTY
71398: LIST
71399: LIST
71400: LIST
71401: LIST
71402: LIST
71403: ST_TO_ADDR
// end ; 4 :
71404: GO 71685
71406: LD_INT 4
71408: DOUBLE
71409: EQUAL
71410: IFTRUE 71414
71412: GO 71547
71414: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
71415: LD_ADDR_VAR 0 5
71419: PUSH
71420: LD_VAR 0 1
71424: PUSH
71425: LD_VAR 0 2
71429: PUSH
71430: LD_INT 4
71432: PLUS
71433: PUSH
71434: LD_INT 0
71436: PUSH
71437: EMPTY
71438: LIST
71439: LIST
71440: LIST
71441: PUSH
71442: LD_VAR 0 1
71446: PUSH
71447: LD_INT 3
71449: PLUS
71450: PUSH
71451: LD_VAR 0 2
71455: PUSH
71456: LD_INT 3
71458: PLUS
71459: PUSH
71460: LD_INT 5
71462: PUSH
71463: EMPTY
71464: LIST
71465: LIST
71466: LIST
71467: PUSH
71468: LD_VAR 0 1
71472: PUSH
71473: LD_INT 4
71475: PLUS
71476: PUSH
71477: LD_VAR 0 2
71481: PUSH
71482: LD_INT 4
71484: PUSH
71485: EMPTY
71486: LIST
71487: LIST
71488: LIST
71489: PUSH
71490: LD_VAR 0 1
71494: PUSH
71495: LD_VAR 0 2
71499: PUSH
71500: LD_INT 3
71502: MINUS
71503: PUSH
71504: LD_INT 3
71506: PUSH
71507: EMPTY
71508: LIST
71509: LIST
71510: LIST
71511: PUSH
71512: LD_VAR 0 1
71516: PUSH
71517: LD_INT 4
71519: MINUS
71520: PUSH
71521: LD_VAR 0 2
71525: PUSH
71526: LD_INT 4
71528: MINUS
71529: PUSH
71530: LD_INT 2
71532: PUSH
71533: EMPTY
71534: LIST
71535: LIST
71536: LIST
71537: PUSH
71538: EMPTY
71539: LIST
71540: LIST
71541: LIST
71542: LIST
71543: LIST
71544: ST_TO_ADDR
// end ; 5 :
71545: GO 71685
71547: LD_INT 5
71549: DOUBLE
71550: EQUAL
71551: IFTRUE 71555
71553: GO 71684
71555: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
71556: LD_ADDR_VAR 0 5
71560: PUSH
71561: LD_VAR 0 1
71565: PUSH
71566: LD_INT 4
71568: MINUS
71569: PUSH
71570: LD_VAR 0 2
71574: PUSH
71575: LD_INT 1
71577: PUSH
71578: EMPTY
71579: LIST
71580: LIST
71581: LIST
71582: PUSH
71583: LD_VAR 0 1
71587: PUSH
71588: LD_VAR 0 2
71592: PUSH
71593: LD_INT 4
71595: MINUS
71596: PUSH
71597: LD_INT 3
71599: PUSH
71600: EMPTY
71601: LIST
71602: LIST
71603: LIST
71604: PUSH
71605: LD_VAR 0 1
71609: PUSH
71610: LD_INT 4
71612: PLUS
71613: PUSH
71614: LD_VAR 0 2
71618: PUSH
71619: LD_INT 4
71621: PLUS
71622: PUSH
71623: LD_INT 5
71625: PUSH
71626: EMPTY
71627: LIST
71628: LIST
71629: LIST
71630: PUSH
71631: LD_VAR 0 1
71635: PUSH
71636: LD_INT 3
71638: PLUS
71639: PUSH
71640: LD_VAR 0 2
71644: PUSH
71645: LD_INT 4
71647: PUSH
71648: EMPTY
71649: LIST
71650: LIST
71651: LIST
71652: PUSH
71653: LD_VAR 0 1
71657: PUSH
71658: LD_VAR 0 2
71662: PUSH
71663: LD_INT 3
71665: PLUS
71666: PUSH
71667: LD_INT 0
71669: PUSH
71670: EMPTY
71671: LIST
71672: LIST
71673: LIST
71674: PUSH
71675: EMPTY
71676: LIST
71677: LIST
71678: LIST
71679: LIST
71680: LIST
71681: ST_TO_ADDR
// end ; end ;
71682: GO 71685
71684: POP
// result := list ;
71685: LD_ADDR_VAR 0 4
71689: PUSH
71690: LD_VAR 0 5
71694: ST_TO_ADDR
// end ;
71695: LD_VAR 0 4
71699: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
71700: LD_INT 0
71702: PPUSH
71703: PPUSH
71704: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
71705: LD_VAR 0 1
71709: NOT
71710: PUSH
71711: LD_VAR 0 2
71715: PUSH
71716: LD_INT 1
71718: PUSH
71719: LD_INT 2
71721: PUSH
71722: LD_INT 3
71724: PUSH
71725: LD_INT 4
71727: PUSH
71728: EMPTY
71729: LIST
71730: LIST
71731: LIST
71732: LIST
71733: IN
71734: NOT
71735: OR
71736: IFFALSE 71740
// exit ;
71738: GO 71832
// tmp := [ ] ;
71740: LD_ADDR_VAR 0 5
71744: PUSH
71745: EMPTY
71746: ST_TO_ADDR
// for i in units do
71747: LD_ADDR_VAR 0 4
71751: PUSH
71752: LD_VAR 0 1
71756: PUSH
71757: FOR_IN
71758: IFFALSE 71801
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
71760: LD_ADDR_VAR 0 5
71764: PUSH
71765: LD_VAR 0 5
71769: PPUSH
71770: LD_VAR 0 5
71774: PUSH
71775: LD_INT 1
71777: PLUS
71778: PPUSH
71779: LD_VAR 0 4
71783: PPUSH
71784: LD_VAR 0 2
71788: PPUSH
71789: CALL_OW 259
71793: PPUSH
71794: CALL_OW 2
71798: ST_TO_ADDR
71799: GO 71757
71801: POP
71802: POP
// if not tmp then
71803: LD_VAR 0 5
71807: NOT
71808: IFFALSE 71812
// exit ;
71810: GO 71832
// result := SortListByListDesc ( units , tmp ) ;
71812: LD_ADDR_VAR 0 3
71816: PUSH
71817: LD_VAR 0 1
71821: PPUSH
71822: LD_VAR 0 5
71826: PPUSH
71827: CALL_OW 77
71831: ST_TO_ADDR
// end ;
71832: LD_VAR 0 3
71836: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
71837: LD_INT 0
71839: PPUSH
71840: PPUSH
71841: PPUSH
// result := false ;
71842: LD_ADDR_VAR 0 3
71846: PUSH
71847: LD_INT 0
71849: ST_TO_ADDR
// x := GetX ( building ) ;
71850: LD_ADDR_VAR 0 4
71854: PUSH
71855: LD_VAR 0 2
71859: PPUSH
71860: CALL_OW 250
71864: ST_TO_ADDR
// y := GetY ( building ) ;
71865: LD_ADDR_VAR 0 5
71869: PUSH
71870: LD_VAR 0 2
71874: PPUSH
71875: CALL_OW 251
71879: ST_TO_ADDR
// if not building or not x or not y then
71880: LD_VAR 0 2
71884: NOT
71885: PUSH
71886: LD_VAR 0 4
71890: NOT
71891: OR
71892: PUSH
71893: LD_VAR 0 5
71897: NOT
71898: OR
71899: IFFALSE 71903
// exit ;
71901: GO 71995
// if GetTaskList ( unit ) then
71903: LD_VAR 0 1
71907: PPUSH
71908: CALL_OW 437
71912: IFFALSE 71995
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
71914: LD_STRING e
71916: PUSH
71917: LD_VAR 0 1
71921: PPUSH
71922: CALL_OW 437
71926: PUSH
71927: LD_INT 1
71929: ARRAY
71930: PUSH
71931: LD_INT 1
71933: ARRAY
71934: EQUAL
71935: PUSH
71936: LD_VAR 0 4
71940: PUSH
71941: LD_VAR 0 1
71945: PPUSH
71946: CALL_OW 437
71950: PUSH
71951: LD_INT 1
71953: ARRAY
71954: PUSH
71955: LD_INT 2
71957: ARRAY
71958: EQUAL
71959: AND
71960: PUSH
71961: LD_VAR 0 5
71965: PUSH
71966: LD_VAR 0 1
71970: PPUSH
71971: CALL_OW 437
71975: PUSH
71976: LD_INT 1
71978: ARRAY
71979: PUSH
71980: LD_INT 3
71982: ARRAY
71983: EQUAL
71984: AND
71985: IFFALSE 71995
// result := true end ;
71987: LD_ADDR_VAR 0 3
71991: PUSH
71992: LD_INT 1
71994: ST_TO_ADDR
// end ;
71995: LD_VAR 0 3
71999: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
72000: LD_INT 0
72002: PPUSH
// result := false ;
72003: LD_ADDR_VAR 0 4
72007: PUSH
72008: LD_INT 0
72010: ST_TO_ADDR
// if GetTaskList ( unit ) then
72011: LD_VAR 0 1
72015: PPUSH
72016: CALL_OW 437
72020: IFFALSE 72103
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
72022: LD_STRING M
72024: PUSH
72025: LD_VAR 0 1
72029: PPUSH
72030: CALL_OW 437
72034: PUSH
72035: LD_INT 1
72037: ARRAY
72038: PUSH
72039: LD_INT 1
72041: ARRAY
72042: EQUAL
72043: PUSH
72044: LD_VAR 0 2
72048: PUSH
72049: LD_VAR 0 1
72053: PPUSH
72054: CALL_OW 437
72058: PUSH
72059: LD_INT 1
72061: ARRAY
72062: PUSH
72063: LD_INT 2
72065: ARRAY
72066: EQUAL
72067: AND
72068: PUSH
72069: LD_VAR 0 3
72073: PUSH
72074: LD_VAR 0 1
72078: PPUSH
72079: CALL_OW 437
72083: PUSH
72084: LD_INT 1
72086: ARRAY
72087: PUSH
72088: LD_INT 3
72090: ARRAY
72091: EQUAL
72092: AND
72093: IFFALSE 72103
// result := true ;
72095: LD_ADDR_VAR 0 4
72099: PUSH
72100: LD_INT 1
72102: ST_TO_ADDR
// end ; end ;
72103: LD_VAR 0 4
72107: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
72108: LD_INT 0
72110: PPUSH
72111: PPUSH
72112: PPUSH
72113: PPUSH
// if not unit or not area then
72114: LD_VAR 0 1
72118: NOT
72119: PUSH
72120: LD_VAR 0 2
72124: NOT
72125: OR
72126: IFFALSE 72130
// exit ;
72128: GO 72294
// tmp := AreaToList ( area , i ) ;
72130: LD_ADDR_VAR 0 6
72134: PUSH
72135: LD_VAR 0 2
72139: PPUSH
72140: LD_VAR 0 5
72144: PPUSH
72145: CALL_OW 517
72149: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
72150: LD_ADDR_VAR 0 5
72154: PUSH
72155: DOUBLE
72156: LD_INT 1
72158: DEC
72159: ST_TO_ADDR
72160: LD_VAR 0 6
72164: PUSH
72165: LD_INT 1
72167: ARRAY
72168: PUSH
72169: FOR_TO
72170: IFFALSE 72292
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
72172: LD_ADDR_VAR 0 7
72176: PUSH
72177: LD_VAR 0 6
72181: PUSH
72182: LD_INT 1
72184: ARRAY
72185: PUSH
72186: LD_VAR 0 5
72190: ARRAY
72191: PUSH
72192: LD_VAR 0 6
72196: PUSH
72197: LD_INT 2
72199: ARRAY
72200: PUSH
72201: LD_VAR 0 5
72205: ARRAY
72206: PUSH
72207: EMPTY
72208: LIST
72209: LIST
72210: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
72211: LD_VAR 0 7
72215: PUSH
72216: LD_INT 1
72218: ARRAY
72219: PPUSH
72220: LD_VAR 0 7
72224: PUSH
72225: LD_INT 2
72227: ARRAY
72228: PPUSH
72229: CALL_OW 428
72233: PUSH
72234: LD_INT 0
72236: EQUAL
72237: IFFALSE 72290
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
72239: LD_VAR 0 1
72243: PPUSH
72244: LD_VAR 0 7
72248: PUSH
72249: LD_INT 1
72251: ARRAY
72252: PPUSH
72253: LD_VAR 0 7
72257: PUSH
72258: LD_INT 2
72260: ARRAY
72261: PPUSH
72262: LD_VAR 0 3
72266: PPUSH
72267: CALL_OW 48
// result := IsPlaced ( unit ) ;
72271: LD_ADDR_VAR 0 4
72275: PUSH
72276: LD_VAR 0 1
72280: PPUSH
72281: CALL_OW 305
72285: ST_TO_ADDR
// exit ;
72286: POP
72287: POP
72288: GO 72294
// end ; end ;
72290: GO 72169
72292: POP
72293: POP
// end ;
72294: LD_VAR 0 4
72298: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
72299: LD_INT 0
72301: PPUSH
72302: PPUSH
72303: PPUSH
// if not side or side > 8 then
72304: LD_VAR 0 1
72308: NOT
72309: PUSH
72310: LD_VAR 0 1
72314: PUSH
72315: LD_INT 8
72317: GREATER
72318: OR
72319: IFFALSE 72323
// exit ;
72321: GO 72510
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
72323: LD_ADDR_VAR 0 4
72327: PUSH
72328: LD_INT 22
72330: PUSH
72331: LD_VAR 0 1
72335: PUSH
72336: EMPTY
72337: LIST
72338: LIST
72339: PUSH
72340: LD_INT 21
72342: PUSH
72343: LD_INT 3
72345: PUSH
72346: EMPTY
72347: LIST
72348: LIST
72349: PUSH
72350: EMPTY
72351: LIST
72352: LIST
72353: PPUSH
72354: CALL_OW 69
72358: ST_TO_ADDR
// if not tmp then
72359: LD_VAR 0 4
72363: NOT
72364: IFFALSE 72368
// exit ;
72366: GO 72510
// enable_addtolog := true ;
72368: LD_ADDR_OWVAR 81
72372: PUSH
72373: LD_INT 1
72375: ST_TO_ADDR
// AddToLog ( [ ) ;
72376: LD_STRING [
72378: PPUSH
72379: CALL_OW 561
// for i in tmp do
72383: LD_ADDR_VAR 0 3
72387: PUSH
72388: LD_VAR 0 4
72392: PUSH
72393: FOR_IN
72394: IFFALSE 72501
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
72396: LD_STRING [
72398: PUSH
72399: LD_VAR 0 3
72403: PPUSH
72404: CALL_OW 266
72408: STR
72409: PUSH
72410: LD_STRING , 
72412: STR
72413: PUSH
72414: LD_VAR 0 3
72418: PPUSH
72419: CALL_OW 250
72423: STR
72424: PUSH
72425: LD_STRING , 
72427: STR
72428: PUSH
72429: LD_VAR 0 3
72433: PPUSH
72434: CALL_OW 251
72438: STR
72439: PUSH
72440: LD_STRING , 
72442: STR
72443: PUSH
72444: LD_VAR 0 3
72448: PPUSH
72449: CALL_OW 254
72453: STR
72454: PUSH
72455: LD_STRING , 
72457: STR
72458: PUSH
72459: LD_VAR 0 3
72463: PPUSH
72464: LD_INT 1
72466: PPUSH
72467: CALL_OW 268
72471: STR
72472: PUSH
72473: LD_STRING , 
72475: STR
72476: PUSH
72477: LD_VAR 0 3
72481: PPUSH
72482: LD_INT 2
72484: PPUSH
72485: CALL_OW 268
72489: STR
72490: PUSH
72491: LD_STRING ],
72493: STR
72494: PPUSH
72495: CALL_OW 561
// end ;
72499: GO 72393
72501: POP
72502: POP
// AddToLog ( ]; ) ;
72503: LD_STRING ];
72505: PPUSH
72506: CALL_OW 561
// end ;
72510: LD_VAR 0 2
72514: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
72515: LD_INT 0
72517: PPUSH
72518: PPUSH
72519: PPUSH
72520: PPUSH
72521: PPUSH
// if not area or not rate or not max then
72522: LD_VAR 0 1
72526: NOT
72527: PUSH
72528: LD_VAR 0 2
72532: NOT
72533: OR
72534: PUSH
72535: LD_VAR 0 4
72539: NOT
72540: OR
72541: IFFALSE 72545
// exit ;
72543: GO 72737
// while 1 do
72545: LD_INT 1
72547: IFFALSE 72737
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
72549: LD_ADDR_VAR 0 9
72553: PUSH
72554: LD_VAR 0 1
72558: PPUSH
72559: LD_INT 1
72561: PPUSH
72562: CALL_OW 287
72566: PUSH
72567: LD_INT 10
72569: MUL
72570: ST_TO_ADDR
// r := rate / 10 ;
72571: LD_ADDR_VAR 0 7
72575: PUSH
72576: LD_VAR 0 2
72580: PUSH
72581: LD_INT 10
72583: DIVREAL
72584: ST_TO_ADDR
// time := 1 1$00 ;
72585: LD_ADDR_VAR 0 8
72589: PUSH
72590: LD_INT 2100
72592: ST_TO_ADDR
// if amount < min then
72593: LD_VAR 0 9
72597: PUSH
72598: LD_VAR 0 3
72602: LESS
72603: IFFALSE 72621
// r := r * 2 else
72605: LD_ADDR_VAR 0 7
72609: PUSH
72610: LD_VAR 0 7
72614: PUSH
72615: LD_INT 2
72617: MUL
72618: ST_TO_ADDR
72619: GO 72647
// if amount > max then
72621: LD_VAR 0 9
72625: PUSH
72626: LD_VAR 0 4
72630: GREATER
72631: IFFALSE 72647
// r := r / 2 ;
72633: LD_ADDR_VAR 0 7
72637: PUSH
72638: LD_VAR 0 7
72642: PUSH
72643: LD_INT 2
72645: DIVREAL
72646: ST_TO_ADDR
// time := time / r ;
72647: LD_ADDR_VAR 0 8
72651: PUSH
72652: LD_VAR 0 8
72656: PUSH
72657: LD_VAR 0 7
72661: DIVREAL
72662: ST_TO_ADDR
// if time < 0 then
72663: LD_VAR 0 8
72667: PUSH
72668: LD_INT 0
72670: LESS
72671: IFFALSE 72688
// time := time * - 1 ;
72673: LD_ADDR_VAR 0 8
72677: PUSH
72678: LD_VAR 0 8
72682: PUSH
72683: LD_INT 1
72685: NEG
72686: MUL
72687: ST_TO_ADDR
// wait ( time ) ;
72688: LD_VAR 0 8
72692: PPUSH
72693: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
72697: LD_INT 35
72699: PPUSH
72700: LD_INT 875
72702: PPUSH
72703: CALL_OW 12
72707: PPUSH
72708: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
72712: LD_INT 1
72714: PPUSH
72715: LD_INT 5
72717: PPUSH
72718: CALL_OW 12
72722: PPUSH
72723: LD_VAR 0 1
72727: PPUSH
72728: LD_INT 1
72730: PPUSH
72731: CALL_OW 55
// end ;
72735: GO 72545
// end ;
72737: LD_VAR 0 5
72741: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
72742: LD_INT 0
72744: PPUSH
72745: PPUSH
72746: PPUSH
72747: PPUSH
72748: PPUSH
72749: PPUSH
72750: PPUSH
72751: PPUSH
// if not turrets or not factories then
72752: LD_VAR 0 1
72756: NOT
72757: PUSH
72758: LD_VAR 0 2
72762: NOT
72763: OR
72764: IFFALSE 72768
// exit ;
72766: GO 73075
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
72768: LD_ADDR_VAR 0 10
72772: PUSH
72773: LD_INT 5
72775: PUSH
72776: LD_INT 6
72778: PUSH
72779: EMPTY
72780: LIST
72781: LIST
72782: PUSH
72783: LD_INT 2
72785: PUSH
72786: LD_INT 4
72788: PUSH
72789: EMPTY
72790: LIST
72791: LIST
72792: PUSH
72793: LD_INT 3
72795: PUSH
72796: LD_INT 5
72798: PUSH
72799: EMPTY
72800: LIST
72801: LIST
72802: PUSH
72803: EMPTY
72804: LIST
72805: LIST
72806: LIST
72807: PUSH
72808: LD_INT 24
72810: PUSH
72811: LD_INT 25
72813: PUSH
72814: EMPTY
72815: LIST
72816: LIST
72817: PUSH
72818: LD_INT 23
72820: PUSH
72821: LD_INT 27
72823: PUSH
72824: EMPTY
72825: LIST
72826: LIST
72827: PUSH
72828: EMPTY
72829: LIST
72830: LIST
72831: PUSH
72832: LD_INT 42
72834: PUSH
72835: LD_INT 43
72837: PUSH
72838: EMPTY
72839: LIST
72840: LIST
72841: PUSH
72842: LD_INT 44
72844: PUSH
72845: LD_INT 46
72847: PUSH
72848: EMPTY
72849: LIST
72850: LIST
72851: PUSH
72852: LD_INT 45
72854: PUSH
72855: LD_INT 47
72857: PUSH
72858: EMPTY
72859: LIST
72860: LIST
72861: PUSH
72862: EMPTY
72863: LIST
72864: LIST
72865: LIST
72866: PUSH
72867: EMPTY
72868: LIST
72869: LIST
72870: LIST
72871: ST_TO_ADDR
// result := [ ] ;
72872: LD_ADDR_VAR 0 3
72876: PUSH
72877: EMPTY
72878: ST_TO_ADDR
// for i in turrets do
72879: LD_ADDR_VAR 0 4
72883: PUSH
72884: LD_VAR 0 1
72888: PUSH
72889: FOR_IN
72890: IFFALSE 73073
// begin nat := GetNation ( i ) ;
72892: LD_ADDR_VAR 0 7
72896: PUSH
72897: LD_VAR 0 4
72901: PPUSH
72902: CALL_OW 248
72906: ST_TO_ADDR
// weapon := 0 ;
72907: LD_ADDR_VAR 0 8
72911: PUSH
72912: LD_INT 0
72914: ST_TO_ADDR
// if not nat then
72915: LD_VAR 0 7
72919: NOT
72920: IFFALSE 72924
// continue ;
72922: GO 72889
// for j in list [ nat ] do
72924: LD_ADDR_VAR 0 5
72928: PUSH
72929: LD_VAR 0 10
72933: PUSH
72934: LD_VAR 0 7
72938: ARRAY
72939: PUSH
72940: FOR_IN
72941: IFFALSE 72982
// if GetBWeapon ( i ) = j [ 1 ] then
72943: LD_VAR 0 4
72947: PPUSH
72948: CALL_OW 269
72952: PUSH
72953: LD_VAR 0 5
72957: PUSH
72958: LD_INT 1
72960: ARRAY
72961: EQUAL
72962: IFFALSE 72980
// begin weapon := j [ 2 ] ;
72964: LD_ADDR_VAR 0 8
72968: PUSH
72969: LD_VAR 0 5
72973: PUSH
72974: LD_INT 2
72976: ARRAY
72977: ST_TO_ADDR
// break ;
72978: GO 72982
// end ;
72980: GO 72940
72982: POP
72983: POP
// if not weapon then
72984: LD_VAR 0 8
72988: NOT
72989: IFFALSE 72993
// continue ;
72991: GO 72889
// for k in factories do
72993: LD_ADDR_VAR 0 6
72997: PUSH
72998: LD_VAR 0 2
73002: PUSH
73003: FOR_IN
73004: IFFALSE 73069
// begin weapons := AvailableWeaponList ( k ) ;
73006: LD_ADDR_VAR 0 9
73010: PUSH
73011: LD_VAR 0 6
73015: PPUSH
73016: CALL_OW 478
73020: ST_TO_ADDR
// if not weapons then
73021: LD_VAR 0 9
73025: NOT
73026: IFFALSE 73030
// continue ;
73028: GO 73003
// if weapon in weapons then
73030: LD_VAR 0 8
73034: PUSH
73035: LD_VAR 0 9
73039: IN
73040: IFFALSE 73067
// begin result := [ i , weapon ] ;
73042: LD_ADDR_VAR 0 3
73046: PUSH
73047: LD_VAR 0 4
73051: PUSH
73052: LD_VAR 0 8
73056: PUSH
73057: EMPTY
73058: LIST
73059: LIST
73060: ST_TO_ADDR
// exit ;
73061: POP
73062: POP
73063: POP
73064: POP
73065: GO 73075
// end ; end ;
73067: GO 73003
73069: POP
73070: POP
// end ;
73071: GO 72889
73073: POP
73074: POP
// end ;
73075: LD_VAR 0 3
73079: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
73080: LD_INT 0
73082: PPUSH
// if not side or side > 8 then
73083: LD_VAR 0 3
73087: NOT
73088: PUSH
73089: LD_VAR 0 3
73093: PUSH
73094: LD_INT 8
73096: GREATER
73097: OR
73098: IFFALSE 73102
// exit ;
73100: GO 73161
// if not range then
73102: LD_VAR 0 4
73106: NOT
73107: IFFALSE 73118
// range := - 12 ;
73109: LD_ADDR_VAR 0 4
73113: PUSH
73114: LD_INT 12
73116: NEG
73117: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
73118: LD_VAR 0 1
73122: PPUSH
73123: LD_VAR 0 2
73127: PPUSH
73128: LD_VAR 0 3
73132: PPUSH
73133: LD_VAR 0 4
73137: PPUSH
73138: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
73142: LD_VAR 0 1
73146: PPUSH
73147: LD_VAR 0 2
73151: PPUSH
73152: LD_VAR 0 3
73156: PPUSH
73157: CALL_OW 331
// end ;
73161: LD_VAR 0 5
73165: RET
// export function Video ( mode ) ; begin
73166: LD_INT 0
73168: PPUSH
// ingame_video = mode ;
73169: LD_ADDR_OWVAR 52
73173: PUSH
73174: LD_VAR 0 1
73178: ST_TO_ADDR
// interface_hidden = mode ;
73179: LD_ADDR_OWVAR 54
73183: PUSH
73184: LD_VAR 0 1
73188: ST_TO_ADDR
// end ;
73189: LD_VAR 0 2
73193: RET
// export function Join ( array , element ) ; begin
73194: LD_INT 0
73196: PPUSH
// result := Replace ( array , array + 1 , element ) ;
73197: LD_ADDR_VAR 0 3
73201: PUSH
73202: LD_VAR 0 1
73206: PPUSH
73207: LD_VAR 0 1
73211: PUSH
73212: LD_INT 1
73214: PLUS
73215: PPUSH
73216: LD_VAR 0 2
73220: PPUSH
73221: CALL_OW 1
73225: ST_TO_ADDR
// end ;
73226: LD_VAR 0 3
73230: RET
// export function JoinUnion ( array , element ) ; begin
73231: LD_INT 0
73233: PPUSH
// result := array union element ;
73234: LD_ADDR_VAR 0 3
73238: PUSH
73239: LD_VAR 0 1
73243: PUSH
73244: LD_VAR 0 2
73248: UNION
73249: ST_TO_ADDR
// end ;
73250: LD_VAR 0 3
73254: RET
// export function GetBehemoths ( side ) ; begin
73255: LD_INT 0
73257: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
73258: LD_ADDR_VAR 0 2
73262: PUSH
73263: LD_INT 22
73265: PUSH
73266: LD_VAR 0 1
73270: PUSH
73271: EMPTY
73272: LIST
73273: LIST
73274: PUSH
73275: LD_INT 31
73277: PUSH
73278: LD_INT 25
73280: PUSH
73281: EMPTY
73282: LIST
73283: LIST
73284: PUSH
73285: EMPTY
73286: LIST
73287: LIST
73288: PPUSH
73289: CALL_OW 69
73293: ST_TO_ADDR
// end ;
73294: LD_VAR 0 2
73298: RET
// export function Shuffle ( array ) ; var i , index ; begin
73299: LD_INT 0
73301: PPUSH
73302: PPUSH
73303: PPUSH
// result := [ ] ;
73304: LD_ADDR_VAR 0 2
73308: PUSH
73309: EMPTY
73310: ST_TO_ADDR
// if not array then
73311: LD_VAR 0 1
73315: NOT
73316: IFFALSE 73320
// exit ;
73318: GO 73419
// Randomize ;
73320: CALL_OW 10
// for i = array downto 1 do
73324: LD_ADDR_VAR 0 3
73328: PUSH
73329: DOUBLE
73330: LD_VAR 0 1
73334: INC
73335: ST_TO_ADDR
73336: LD_INT 1
73338: PUSH
73339: FOR_DOWNTO
73340: IFFALSE 73417
// begin index := rand ( 1 , array ) ;
73342: LD_ADDR_VAR 0 4
73346: PUSH
73347: LD_INT 1
73349: PPUSH
73350: LD_VAR 0 1
73354: PPUSH
73355: CALL_OW 12
73359: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
73360: LD_ADDR_VAR 0 2
73364: PUSH
73365: LD_VAR 0 2
73369: PPUSH
73370: LD_VAR 0 2
73374: PUSH
73375: LD_INT 1
73377: PLUS
73378: PPUSH
73379: LD_VAR 0 1
73383: PUSH
73384: LD_VAR 0 4
73388: ARRAY
73389: PPUSH
73390: CALL_OW 2
73394: ST_TO_ADDR
// array := Delete ( array , index ) ;
73395: LD_ADDR_VAR 0 1
73399: PUSH
73400: LD_VAR 0 1
73404: PPUSH
73405: LD_VAR 0 4
73409: PPUSH
73410: CALL_OW 3
73414: ST_TO_ADDR
// end ;
73415: GO 73339
73417: POP
73418: POP
// end ;
73419: LD_VAR 0 2
73423: RET
// export function GetBaseMaterials ( base ) ; begin
73424: LD_INT 0
73426: PPUSH
// result := [ 0 , 0 , 0 ] ;
73427: LD_ADDR_VAR 0 2
73431: PUSH
73432: LD_INT 0
73434: PUSH
73435: LD_INT 0
73437: PUSH
73438: LD_INT 0
73440: PUSH
73441: EMPTY
73442: LIST
73443: LIST
73444: LIST
73445: ST_TO_ADDR
// if not base then
73446: LD_VAR 0 1
73450: NOT
73451: IFFALSE 73455
// exit ;
73453: GO 73504
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
73455: LD_ADDR_VAR 0 2
73459: PUSH
73460: LD_VAR 0 1
73464: PPUSH
73465: LD_INT 1
73467: PPUSH
73468: CALL_OW 275
73472: PUSH
73473: LD_VAR 0 1
73477: PPUSH
73478: LD_INT 2
73480: PPUSH
73481: CALL_OW 275
73485: PUSH
73486: LD_VAR 0 1
73490: PPUSH
73491: LD_INT 3
73493: PPUSH
73494: CALL_OW 275
73498: PUSH
73499: EMPTY
73500: LIST
73501: LIST
73502: LIST
73503: ST_TO_ADDR
// end ;
73504: LD_VAR 0 2
73508: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
73509: LD_INT 0
73511: PPUSH
73512: PPUSH
// result := array ;
73513: LD_ADDR_VAR 0 3
73517: PUSH
73518: LD_VAR 0 1
73522: ST_TO_ADDR
// if size > 0 then
73523: LD_VAR 0 2
73527: PUSH
73528: LD_INT 0
73530: GREATER
73531: IFFALSE 73577
// for i := array downto size do
73533: LD_ADDR_VAR 0 4
73537: PUSH
73538: DOUBLE
73539: LD_VAR 0 1
73543: INC
73544: ST_TO_ADDR
73545: LD_VAR 0 2
73549: PUSH
73550: FOR_DOWNTO
73551: IFFALSE 73575
// result := Delete ( result , result ) ;
73553: LD_ADDR_VAR 0 3
73557: PUSH
73558: LD_VAR 0 3
73562: PPUSH
73563: LD_VAR 0 3
73567: PPUSH
73568: CALL_OW 3
73572: ST_TO_ADDR
73573: GO 73550
73575: POP
73576: POP
// end ;
73577: LD_VAR 0 3
73581: RET
// export function ComExit ( unit ) ; var tmp ; begin
73582: LD_INT 0
73584: PPUSH
73585: PPUSH
// if not IsInUnit ( unit ) then
73586: LD_VAR 0 1
73590: PPUSH
73591: CALL_OW 310
73595: NOT
73596: IFFALSE 73600
// exit ;
73598: GO 73660
// tmp := IsInUnit ( unit ) ;
73600: LD_ADDR_VAR 0 3
73604: PUSH
73605: LD_VAR 0 1
73609: PPUSH
73610: CALL_OW 310
73614: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
73615: LD_VAR 0 3
73619: PPUSH
73620: CALL_OW 247
73624: PUSH
73625: LD_INT 2
73627: EQUAL
73628: IFFALSE 73641
// ComExitVehicle ( unit ) else
73630: LD_VAR 0 1
73634: PPUSH
73635: CALL_OW 121
73639: GO 73650
// ComExitBuilding ( unit ) ;
73641: LD_VAR 0 1
73645: PPUSH
73646: CALL_OW 122
// result := tmp ;
73650: LD_ADDR_VAR 0 2
73654: PUSH
73655: LD_VAR 0 3
73659: ST_TO_ADDR
// end ;
73660: LD_VAR 0 2
73664: RET
// export function ComExitAll ( units ) ; var i ; begin
73665: LD_INT 0
73667: PPUSH
73668: PPUSH
// if not units then
73669: LD_VAR 0 1
73673: NOT
73674: IFFALSE 73678
// exit ;
73676: GO 73704
// for i in units do
73678: LD_ADDR_VAR 0 3
73682: PUSH
73683: LD_VAR 0 1
73687: PUSH
73688: FOR_IN
73689: IFFALSE 73702
// ComExit ( i ) ;
73691: LD_VAR 0 3
73695: PPUSH
73696: CALL 73582 0 1
73700: GO 73688
73702: POP
73703: POP
// end ;
73704: LD_VAR 0 2
73708: RET
// export function ResetHc ; begin
73709: LD_INT 0
73711: PPUSH
// InitHc ;
73712: CALL_OW 19
// hc_importance := 0 ;
73716: LD_ADDR_OWVAR 32
73720: PUSH
73721: LD_INT 0
73723: ST_TO_ADDR
// end ;
73724: LD_VAR 0 1
73728: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
73729: LD_INT 0
73731: PPUSH
73732: PPUSH
73733: PPUSH
// _x := ( x1 + x2 ) div 2 ;
73734: LD_ADDR_VAR 0 6
73738: PUSH
73739: LD_VAR 0 1
73743: PUSH
73744: LD_VAR 0 3
73748: PLUS
73749: PUSH
73750: LD_INT 2
73752: DIV
73753: ST_TO_ADDR
// if _x < 0 then
73754: LD_VAR 0 6
73758: PUSH
73759: LD_INT 0
73761: LESS
73762: IFFALSE 73779
// _x := _x * - 1 ;
73764: LD_ADDR_VAR 0 6
73768: PUSH
73769: LD_VAR 0 6
73773: PUSH
73774: LD_INT 1
73776: NEG
73777: MUL
73778: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
73779: LD_ADDR_VAR 0 7
73783: PUSH
73784: LD_VAR 0 2
73788: PUSH
73789: LD_VAR 0 4
73793: PLUS
73794: PUSH
73795: LD_INT 2
73797: DIV
73798: ST_TO_ADDR
// if _y < 0 then
73799: LD_VAR 0 7
73803: PUSH
73804: LD_INT 0
73806: LESS
73807: IFFALSE 73824
// _y := _y * - 1 ;
73809: LD_ADDR_VAR 0 7
73813: PUSH
73814: LD_VAR 0 7
73818: PUSH
73819: LD_INT 1
73821: NEG
73822: MUL
73823: ST_TO_ADDR
// result := [ _x , _y ] ;
73824: LD_ADDR_VAR 0 5
73828: PUSH
73829: LD_VAR 0 6
73833: PUSH
73834: LD_VAR 0 7
73838: PUSH
73839: EMPTY
73840: LIST
73841: LIST
73842: ST_TO_ADDR
// end ;
73843: LD_VAR 0 5
73847: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
73848: LD_INT 0
73850: PPUSH
73851: PPUSH
73852: PPUSH
73853: PPUSH
// task := GetTaskList ( unit ) ;
73854: LD_ADDR_VAR 0 7
73858: PUSH
73859: LD_VAR 0 1
73863: PPUSH
73864: CALL_OW 437
73868: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
73869: LD_VAR 0 7
73873: NOT
73874: PUSH
73875: LD_VAR 0 1
73879: PPUSH
73880: LD_VAR 0 2
73884: PPUSH
73885: CALL_OW 308
73889: NOT
73890: AND
73891: IFFALSE 73895
// exit ;
73893: GO 74013
// if IsInArea ( unit , area ) then
73895: LD_VAR 0 1
73899: PPUSH
73900: LD_VAR 0 2
73904: PPUSH
73905: CALL_OW 308
73909: IFFALSE 73927
// begin ComMoveToArea ( unit , goAway ) ;
73911: LD_VAR 0 1
73915: PPUSH
73916: LD_VAR 0 3
73920: PPUSH
73921: CALL_OW 113
// exit ;
73925: GO 74013
// end ; if task [ 1 ] [ 1 ] <> M then
73927: LD_VAR 0 7
73931: PUSH
73932: LD_INT 1
73934: ARRAY
73935: PUSH
73936: LD_INT 1
73938: ARRAY
73939: PUSH
73940: LD_STRING M
73942: NONEQUAL
73943: IFFALSE 73947
// exit ;
73945: GO 74013
// x := task [ 1 ] [ 2 ] ;
73947: LD_ADDR_VAR 0 5
73951: PUSH
73952: LD_VAR 0 7
73956: PUSH
73957: LD_INT 1
73959: ARRAY
73960: PUSH
73961: LD_INT 2
73963: ARRAY
73964: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
73965: LD_ADDR_VAR 0 6
73969: PUSH
73970: LD_VAR 0 7
73974: PUSH
73975: LD_INT 1
73977: ARRAY
73978: PUSH
73979: LD_INT 3
73981: ARRAY
73982: ST_TO_ADDR
// if InArea ( x , y , area ) then
73983: LD_VAR 0 5
73987: PPUSH
73988: LD_VAR 0 6
73992: PPUSH
73993: LD_VAR 0 2
73997: PPUSH
73998: CALL_OW 309
74002: IFFALSE 74013
// ComStop ( unit ) ;
74004: LD_VAR 0 1
74008: PPUSH
74009: CALL_OW 141
// end ;
74013: LD_VAR 0 4
74017: RET
// export function Abs ( value ) ; begin
74018: LD_INT 0
74020: PPUSH
// result := value ;
74021: LD_ADDR_VAR 0 2
74025: PUSH
74026: LD_VAR 0 1
74030: ST_TO_ADDR
// if value < 0 then
74031: LD_VAR 0 1
74035: PUSH
74036: LD_INT 0
74038: LESS
74039: IFFALSE 74056
// result := value * - 1 ;
74041: LD_ADDR_VAR 0 2
74045: PUSH
74046: LD_VAR 0 1
74050: PUSH
74051: LD_INT 1
74053: NEG
74054: MUL
74055: ST_TO_ADDR
// end ;
74056: LD_VAR 0 2
74060: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
74061: LD_INT 0
74063: PPUSH
74064: PPUSH
74065: PPUSH
74066: PPUSH
74067: PPUSH
74068: PPUSH
74069: PPUSH
74070: PPUSH
// if not unit or not building then
74071: LD_VAR 0 1
74075: NOT
74076: PUSH
74077: LD_VAR 0 2
74081: NOT
74082: OR
74083: IFFALSE 74087
// exit ;
74085: GO 74313
// x := GetX ( building ) ;
74087: LD_ADDR_VAR 0 4
74091: PUSH
74092: LD_VAR 0 2
74096: PPUSH
74097: CALL_OW 250
74101: ST_TO_ADDR
// y := GetY ( building ) ;
74102: LD_ADDR_VAR 0 6
74106: PUSH
74107: LD_VAR 0 2
74111: PPUSH
74112: CALL_OW 251
74116: ST_TO_ADDR
// d := GetDir ( building ) ;
74117: LD_ADDR_VAR 0 8
74121: PUSH
74122: LD_VAR 0 2
74126: PPUSH
74127: CALL_OW 254
74131: ST_TO_ADDR
// r := 4 ;
74132: LD_ADDR_VAR 0 9
74136: PUSH
74137: LD_INT 4
74139: ST_TO_ADDR
// for i := 1 to 5 do
74140: LD_ADDR_VAR 0 10
74144: PUSH
74145: DOUBLE
74146: LD_INT 1
74148: DEC
74149: ST_TO_ADDR
74150: LD_INT 5
74152: PUSH
74153: FOR_TO
74154: IFFALSE 74311
// begin _x := ShiftX ( x , d , r + i ) ;
74156: LD_ADDR_VAR 0 5
74160: PUSH
74161: LD_VAR 0 4
74165: PPUSH
74166: LD_VAR 0 8
74170: PPUSH
74171: LD_VAR 0 9
74175: PUSH
74176: LD_VAR 0 10
74180: PLUS
74181: PPUSH
74182: CALL_OW 272
74186: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
74187: LD_ADDR_VAR 0 7
74191: PUSH
74192: LD_VAR 0 6
74196: PPUSH
74197: LD_VAR 0 8
74201: PPUSH
74202: LD_VAR 0 9
74206: PUSH
74207: LD_VAR 0 10
74211: PLUS
74212: PPUSH
74213: CALL_OW 273
74217: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
74218: LD_VAR 0 5
74222: PPUSH
74223: LD_VAR 0 7
74227: PPUSH
74228: CALL_OW 488
74232: PUSH
74233: LD_VAR 0 5
74237: PPUSH
74238: LD_VAR 0 7
74242: PPUSH
74243: CALL_OW 428
74247: PPUSH
74248: CALL_OW 247
74252: PUSH
74253: LD_INT 3
74255: PUSH
74256: LD_INT 2
74258: PUSH
74259: EMPTY
74260: LIST
74261: LIST
74262: IN
74263: NOT
74264: AND
74265: IFFALSE 74309
// begin ComMoveXY ( unit , _x , _y ) ;
74267: LD_VAR 0 1
74271: PPUSH
74272: LD_VAR 0 5
74276: PPUSH
74277: LD_VAR 0 7
74281: PPUSH
74282: CALL_OW 111
// result := [ _x , _y ] ;
74286: LD_ADDR_VAR 0 3
74290: PUSH
74291: LD_VAR 0 5
74295: PUSH
74296: LD_VAR 0 7
74300: PUSH
74301: EMPTY
74302: LIST
74303: LIST
74304: ST_TO_ADDR
// exit ;
74305: POP
74306: POP
74307: GO 74313
// end ; end ;
74309: GO 74153
74311: POP
74312: POP
// end ;
74313: LD_VAR 0 3
74317: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
74318: LD_INT 0
74320: PPUSH
74321: PPUSH
74322: PPUSH
// result := 0 ;
74323: LD_ADDR_VAR 0 3
74327: PUSH
74328: LD_INT 0
74330: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
74331: LD_VAR 0 1
74335: PUSH
74336: LD_INT 0
74338: LESS
74339: PUSH
74340: LD_VAR 0 1
74344: PUSH
74345: LD_INT 8
74347: GREATER
74348: OR
74349: PUSH
74350: LD_VAR 0 2
74354: PUSH
74355: LD_INT 0
74357: LESS
74358: OR
74359: PUSH
74360: LD_VAR 0 2
74364: PUSH
74365: LD_INT 8
74367: GREATER
74368: OR
74369: IFFALSE 74373
// exit ;
74371: GO 74448
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
74373: LD_ADDR_VAR 0 4
74377: PUSH
74378: LD_INT 22
74380: PUSH
74381: LD_VAR 0 2
74385: PUSH
74386: EMPTY
74387: LIST
74388: LIST
74389: PPUSH
74390: CALL_OW 69
74394: PUSH
74395: FOR_IN
74396: IFFALSE 74446
// begin un := UnitShoot ( i ) ;
74398: LD_ADDR_VAR 0 5
74402: PUSH
74403: LD_VAR 0 4
74407: PPUSH
74408: CALL_OW 504
74412: ST_TO_ADDR
// if GetSide ( un ) = side1 then
74413: LD_VAR 0 5
74417: PPUSH
74418: CALL_OW 255
74422: PUSH
74423: LD_VAR 0 1
74427: EQUAL
74428: IFFALSE 74444
// begin result := un ;
74430: LD_ADDR_VAR 0 3
74434: PUSH
74435: LD_VAR 0 5
74439: ST_TO_ADDR
// exit ;
74440: POP
74441: POP
74442: GO 74448
// end ; end ;
74444: GO 74395
74446: POP
74447: POP
// end ;
74448: LD_VAR 0 3
74452: RET
// export function GetCargoBay ( units ) ; begin
74453: LD_INT 0
74455: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
74456: LD_ADDR_VAR 0 2
74460: PUSH
74461: LD_VAR 0 1
74465: PPUSH
74466: LD_INT 2
74468: PUSH
74469: LD_INT 34
74471: PUSH
74472: LD_INT 12
74474: PUSH
74475: EMPTY
74476: LIST
74477: LIST
74478: PUSH
74479: LD_INT 34
74481: PUSH
74482: LD_INT 51
74484: PUSH
74485: EMPTY
74486: LIST
74487: LIST
74488: PUSH
74489: LD_INT 34
74491: PUSH
74492: LD_INT 32
74494: PUSH
74495: EMPTY
74496: LIST
74497: LIST
74498: PUSH
74499: LD_INT 34
74501: PUSH
74502: LD_EXP 53
74506: PUSH
74507: EMPTY
74508: LIST
74509: LIST
74510: PUSH
74511: EMPTY
74512: LIST
74513: LIST
74514: LIST
74515: LIST
74516: LIST
74517: PPUSH
74518: CALL_OW 72
74522: ST_TO_ADDR
// end ; end_of_file
74523: LD_VAR 0 2
74527: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
74528: LD_VAR 0 1
74532: PUSH
74533: LD_INT 200
74535: DOUBLE
74536: GREATEREQUAL
74537: IFFALSE 74545
74539: LD_INT 299
74541: DOUBLE
74542: LESSEQUAL
74543: IFTRUE 74547
74545: GO 74579
74547: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
74548: LD_VAR 0 1
74552: PPUSH
74553: LD_VAR 0 2
74557: PPUSH
74558: LD_VAR 0 3
74562: PPUSH
74563: LD_VAR 0 4
74567: PPUSH
74568: LD_VAR 0 5
74572: PPUSH
74573: CALL 32989 0 5
74577: GO 74656
74579: LD_INT 300
74581: DOUBLE
74582: GREATEREQUAL
74583: IFFALSE 74591
74585: LD_INT 399
74587: DOUBLE
74588: LESSEQUAL
74589: IFTRUE 74593
74591: GO 74655
74593: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
74594: LD_VAR 0 1
74598: PPUSH
74599: LD_VAR 0 2
74603: PPUSH
74604: LD_VAR 0 3
74608: PPUSH
74609: LD_VAR 0 4
74613: PPUSH
74614: LD_VAR 0 5
74618: PPUSH
74619: LD_VAR 0 6
74623: PPUSH
74624: LD_VAR 0 7
74628: PPUSH
74629: LD_VAR 0 8
74633: PPUSH
74634: LD_VAR 0 9
74638: PPUSH
74639: LD_VAR 0 10
74643: PPUSH
74644: LD_VAR 0 11
74648: PPUSH
74649: CALL 30877 0 11
74653: GO 74656
74655: POP
// end ;
74656: PPOPN 11
74658: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
74659: LD_VAR 0 1
74663: PPUSH
74664: LD_VAR 0 2
74668: PPUSH
74669: LD_VAR 0 3
74673: PPUSH
74674: LD_VAR 0 4
74678: PPUSH
74679: LD_VAR 0 5
74683: PPUSH
74684: CALL 32971 0 5
// end ; end_of_file
74688: PPOPN 5
74690: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
74691: LD_VAR 0 1
74695: PPUSH
74696: LD_VAR 0 2
74700: PPUSH
74701: LD_VAR 0 3
74705: PPUSH
74706: LD_VAR 0 4
74710: PPUSH
74711: LD_VAR 0 5
74715: PPUSH
74716: LD_VAR 0 6
74720: PPUSH
74721: CALL 19685 0 6
// end ;
74725: PPOPN 6
74727: END
