// export JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ; export others11 ; export amCargo1 , amCargo2 ; export amCargo3 , amCargo4 , amCargo5 ; export amCargo6 , amCargo7 ; export Powell ; export Davidov ; export Kurt ; export KurtVeh ; export kurtStatus ; export secondPass ; export vehicleTeleported , tpCounter ; export warWithLegion ; export fakeInfo ; export askSiberite ; export teleportExplored ; export RuScientists , sciCounter ; export RuSolMinLevel , RuSolMaxLevel ; export ruDestroyedBuildings ; export russianTanks , russianTimeLapsers ; export ruAI ; export ruEscape ; export attackTactic ; export arabianMines ; export cratesSpawned ; export mission_prefix ; export eventVar1 ; export debugMode ; export westPathUsed , laserCounterDestroy , rocketBuilded ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// SetBName ( rueastdepot , ryutin ) ;
  15: LD_INT 4
  17: PPUSH
  18: LD_STRING ryutin
  20: PPUSH
  21: CALL_OW 500
// SetBName ( ruwestdepot , yegorov ) ;
  25: LD_INT 6
  27: PPUSH
  28: LD_STRING yegorov
  30: PPUSH
  31: CALL_OW 500
// RuScientists = [ ] ;
  35: LD_ADDR_EXP 34
  39: PUSH
  40: EMPTY
  41: ST_TO_ADDR
// sciCounter = 0 ;
  42: LD_ADDR_EXP 35
  46: PUSH
  47: LD_INT 0
  49: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
  50: LD_ADDR_EXP 38
  54: PUSH
  55: EMPTY
  56: ST_TO_ADDR
// russianTanks = [ ] ;
  57: LD_ADDR_EXP 39
  61: PUSH
  62: EMPTY
  63: ST_TO_ADDR
// russianTimeLapsers = [ ] ;
  64: LD_ADDR_EXP 40
  68: PUSH
  69: EMPTY
  70: ST_TO_ADDR
// arabianMines = [ ] ;
  71: LD_ADDR_EXP 44
  75: PUSH
  76: EMPTY
  77: ST_TO_ADDR
// kurtStatus = LoadVariable ( 06_KurtStatus_1 , 0 ) ;
  78: LD_ADDR_EXP 26
  82: PUSH
  83: LD_STRING 06_KurtStatus_1
  85: PPUSH
  86: LD_INT 0
  88: PPUSH
  89: CALL_OW 30
  93: ST_TO_ADDR
// secondPass = 0 ;
  94: LD_ADDR_EXP 27
  98: PUSH
  99: LD_INT 0
 101: ST_TO_ADDR
// teleportExplored = 0 ;
 102: LD_ADDR_EXP 33
 106: PUSH
 107: LD_INT 0
 109: ST_TO_ADDR
// attackTactic = 0 ;
 110: LD_ADDR_EXP 43
 114: PUSH
 115: LD_INT 0
 117: ST_TO_ADDR
// tpCounter = 0 ;
 118: LD_ADDR_EXP 29
 122: PUSH
 123: LD_INT 0
 125: ST_TO_ADDR
// askSiberite = 0 ;
 126: LD_ADDR_EXP 32
 130: PUSH
 131: LD_INT 0
 133: ST_TO_ADDR
// warWithLegion = 0 ;
 134: LD_ADDR_EXP 30
 138: PUSH
 139: LD_INT 0
 141: ST_TO_ADDR
// fakeInfo = 0 ;
 142: LD_ADDR_EXP 31
 146: PUSH
 147: LD_INT 0
 149: ST_TO_ADDR
// cratesSpawned = 0 ;
 150: LD_ADDR_EXP 45
 154: PUSH
 155: LD_INT 0
 157: ST_TO_ADDR
// ruAI = 0 ;
 158: LD_ADDR_EXP 41
 162: PUSH
 163: LD_INT 0
 165: ST_TO_ADDR
// ruEscape = 0 ;
 166: LD_ADDR_EXP 42
 170: PUSH
 171: LD_INT 0
 173: ST_TO_ADDR
// eventVar1 = 0 ;
 174: LD_ADDR_EXP 47
 178: PUSH
 179: LD_INT 0
 181: ST_TO_ADDR
// mission_prefix = 12_ ;
 182: LD_ADDR_EXP 46
 186: PUSH
 187: LD_STRING 12_
 189: ST_TO_ADDR
// debugMode = 0 ;
 190: LD_ADDR_EXP 48
 194: PUSH
 195: LD_INT 0
 197: ST_TO_ADDR
// westPathUsed := false ;
 198: LD_ADDR_EXP 49
 202: PUSH
 203: LD_INT 0
 205: ST_TO_ADDR
// laserCounterDestroy := 0 ;
 206: LD_ADDR_EXP 50
 210: PUSH
 211: LD_INT 0
 213: ST_TO_ADDR
// rocketBuilded := false ;
 214: LD_ADDR_EXP 51
 218: PUSH
 219: LD_INT 0
 221: ST_TO_ADDR
// PrepareNature ;
 222: CALL 15918 0 0
// PrepareDifficulty ;
 226: CALL 12437 0 0
// PrepareVehicles ;
 230: CALL 1741 0 0
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 234: LD_INT 4
 236: PPUSH
 237: LD_INT 0
 239: PPUSH
 240: LD_INT 1
 242: PPUSH
 243: LD_INT 0
 245: PPUSH
 246: CALL 1315 0 4
// PrepareAmericanHeroes ;
 250: CALL 640 0 0
// PrepareRussianCommander ;
 254: CALL 3117 0 0
// PrepareWestBase ;
 258: CALL 3629 0 0
// PrepareEastBase ;
 262: CALL 3189 0 0
// PrepareOtherRussians ;
 266: CALL 3741 0 0
// end ;
 270: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 271: LD_EXP 48
 275: PUSH
 276: LD_INT 1
 278: EQUAL
 279: IFFALSE 585
 281: GO 283
 283: DISABLE
 284: LD_INT 0
 286: PPUSH
// begin enable ;
 287: ENABLE
// fogoff ( true ) ;
 288: LD_INT 1
 290: PPUSH
 291: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 295: LD_ADDR_VAR 0 1
 299: PUSH
 300: LD_INT 22
 302: PUSH
 303: LD_INT 1
 305: PUSH
 306: EMPTY
 307: LIST
 308: LIST
 309: PUSH
 310: LD_INT 21
 312: PUSH
 313: LD_INT 1
 315: PUSH
 316: EMPTY
 317: LIST
 318: LIST
 319: PUSH
 320: EMPTY
 321: LIST
 322: LIST
 323: PPUSH
 324: CALL_OW 69
 328: PUSH
 329: FOR_IN
 330: IFFALSE 346
// SetLives ( i , 1000 ) ;
 332: LD_VAR 0 1
 336: PPUSH
 337: LD_INT 1000
 339: PPUSH
 340: CALL_OW 234
 344: GO 329
 346: POP
 347: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 348: LD_ADDR_VAR 0 1
 352: PUSH
 353: LD_INT 22
 355: PUSH
 356: LD_INT 1
 358: PUSH
 359: EMPTY
 360: LIST
 361: LIST
 362: PUSH
 363: LD_INT 2
 365: PUSH
 366: LD_INT 30
 368: PUSH
 369: LD_INT 0
 371: PUSH
 372: EMPTY
 373: LIST
 374: LIST
 375: PUSH
 376: LD_INT 30
 378: PUSH
 379: LD_INT 1
 381: PUSH
 382: EMPTY
 383: LIST
 384: LIST
 385: PUSH
 386: EMPTY
 387: LIST
 388: LIST
 389: LIST
 390: PUSH
 391: EMPTY
 392: LIST
 393: LIST
 394: PPUSH
 395: CALL_OW 69
 399: PUSH
 400: FOR_IN
 401: IFFALSE 425
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 403: LD_VAR 0 1
 407: PPUSH
 408: CALL_OW 274
 412: PPUSH
 413: LD_INT 1
 415: PPUSH
 416: LD_INT 9999
 418: PPUSH
 419: CALL_OW 277
 423: GO 400
 425: POP
 426: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 427: LD_ADDR_VAR 0 1
 431: PUSH
 432: LD_INT 22
 434: PUSH
 435: LD_INT 1
 437: PUSH
 438: EMPTY
 439: LIST
 440: LIST
 441: PUSH
 442: LD_INT 2
 444: PUSH
 445: LD_INT 30
 447: PUSH
 448: LD_INT 0
 450: PUSH
 451: EMPTY
 452: LIST
 453: LIST
 454: PUSH
 455: LD_INT 30
 457: PUSH
 458: LD_INT 1
 460: PUSH
 461: EMPTY
 462: LIST
 463: LIST
 464: PUSH
 465: EMPTY
 466: LIST
 467: LIST
 468: LIST
 469: PUSH
 470: EMPTY
 471: LIST
 472: LIST
 473: PPUSH
 474: CALL_OW 69
 478: PUSH
 479: FOR_IN
 480: IFFALSE 504
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 482: LD_VAR 0 1
 486: PPUSH
 487: CALL_OW 274
 491: PPUSH
 492: LD_INT 2
 494: PPUSH
 495: LD_INT 9999
 497: PPUSH
 498: CALL_OW 277
 502: GO 479
 504: POP
 505: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 506: LD_ADDR_VAR 0 1
 510: PUSH
 511: LD_INT 22
 513: PUSH
 514: LD_INT 1
 516: PUSH
 517: EMPTY
 518: LIST
 519: LIST
 520: PUSH
 521: LD_INT 2
 523: PUSH
 524: LD_INT 30
 526: PUSH
 527: LD_INT 0
 529: PUSH
 530: EMPTY
 531: LIST
 532: LIST
 533: PUSH
 534: LD_INT 30
 536: PUSH
 537: LD_INT 1
 539: PUSH
 540: EMPTY
 541: LIST
 542: LIST
 543: PUSH
 544: EMPTY
 545: LIST
 546: LIST
 547: LIST
 548: PUSH
 549: EMPTY
 550: LIST
 551: LIST
 552: PPUSH
 553: CALL_OW 69
 557: PUSH
 558: FOR_IN
 559: IFFALSE 583
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 561: LD_VAR 0 1
 565: PPUSH
 566: CALL_OW 274
 570: PPUSH
 571: LD_INT 3
 573: PPUSH
 574: LD_INT 9999
 576: PPUSH
 577: CALL_OW 277
 581: GO 558
 583: POP
 584: POP
// end ;
 585: PPOPN 1
 587: END
// every 0 0$1 trigger FilterUnitsInArea ( westPathArea , [ f_side , 1 ] ) do
 588: LD_INT 25
 590: PPUSH
 591: LD_INT 22
 593: PUSH
 594: LD_INT 1
 596: PUSH
 597: EMPTY
 598: LIST
 599: LIST
 600: PPUSH
 601: CALL_OW 70
 605: IFFALSE 618
 607: GO 609
 609: DISABLE
// westPathUsed := true ;
 610: LD_ADDR_EXP 49
 614: PUSH
 615: LD_INT 1
 617: ST_TO_ADDR
 618: END
// every 0 0$1 trigger laserCounterDestroy >= 3 do
 619: LD_EXP 50
 623: PUSH
 624: LD_INT 3
 626: GREATEREQUAL
 627: IFFALSE 639
 629: GO 631
 631: DISABLE
// SetAchievement ( ACH_LASER ) ; end_of_file
 632: LD_STRING ACH_LASER
 634: PPUSH
 635: CALL_OW 543
 639: END
// export function PrepareAmericanHeroes ; var tmp , i ; begin
 640: LD_INT 0
 642: PPUSH
 643: PPUSH
 644: PPUSH
// uc_side = 1 ;
 645: LD_ADDR_OWVAR 20
 649: PUSH
 650: LD_INT 1
 652: ST_TO_ADDR
// others11 = CreateCharacterSet ( 11c_others ) union CreateCharacterSet ( 11_others ) ;
 653: LD_ADDR_EXP 14
 657: PUSH
 658: LD_STRING 11c_others
 660: PPUSH
 661: CALL_OW 31
 665: PUSH
 666: LD_STRING 11_others
 668: PPUSH
 669: CALL_OW 31
 673: UNION
 674: ST_TO_ADDR
// JMM = PrepareUnit ( 11_JMM , true ) ;
 675: LD_ADDR_EXP 1
 679: PUSH
 680: LD_STRING 11_JMM
 682: PPUSH
 683: LD_INT 1
 685: PPUSH
 686: CALL 12154 0 2
 690: ST_TO_ADDR
// SetClass ( JMM , 1 ) ;
 691: LD_EXP 1
 695: PPUSH
 696: LD_INT 1
 698: PPUSH
 699: CALL_OW 336
// PlaceHumanInUnit ( JMM , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
 703: LD_EXP 1
 707: PPUSH
 708: LD_INT 22
 710: PUSH
 711: LD_INT 1
 713: PUSH
 714: EMPTY
 715: LIST
 716: LIST
 717: PUSH
 718: LD_INT 21
 720: PUSH
 721: LD_INT 2
 723: PUSH
 724: EMPTY
 725: LIST
 726: LIST
 727: PUSH
 728: LD_INT 58
 730: PUSH
 731: EMPTY
 732: LIST
 733: PUSH
 734: EMPTY
 735: LIST
 736: LIST
 737: LIST
 738: PPUSH
 739: CALL_OW 69
 743: PUSH
 744: LD_INT 1
 746: ARRAY
 747: PPUSH
 748: CALL_OW 52
// if TestCharacters ( 11_Lisa ) = true then
 752: LD_STRING 11_Lisa
 754: PPUSH
 755: CALL_OW 28
 759: PUSH
 760: LD_INT 1
 762: EQUAL
 763: IFFALSE 810
// begin Lisa = PrepareUnit ( 11_Lisa , true ) ;
 765: LD_ADDR_EXP 2
 769: PUSH
 770: LD_STRING 11_Lisa
 772: PPUSH
 773: LD_INT 1
 775: PPUSH
 776: CALL 12154 0 2
 780: ST_TO_ADDR
// SetClass ( Lisa , 1 ) ;
 781: LD_EXP 2
 785: PPUSH
 786: LD_INT 1
 788: PPUSH
 789: CALL_OW 336
// PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 793: LD_EXP 2
 797: PPUSH
 798: LD_INT 4
 800: PPUSH
 801: LD_INT 0
 803: PPUSH
 804: CALL_OW 49
// end else
 808: GO 826
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 810: LD_INT 4
 812: PPUSH
 813: LD_INT 0
 815: PPUSH
 816: LD_INT 1
 818: PPUSH
 819: LD_INT 0
 821: PPUSH
 822: CALL 1315 0 4
// end ; if TestCharacters ( 11_Donaldson ) = true then
 826: LD_STRING 11_Donaldson
 828: PPUSH
 829: CALL_OW 28
 833: PUSH
 834: LD_INT 1
 836: EQUAL
 837: IFFALSE 884
// begin Donaldson = PrepareUnit ( 11_Donaldson , true ) ;
 839: LD_ADDR_EXP 3
 843: PUSH
 844: LD_STRING 11_Donaldson
 846: PPUSH
 847: LD_INT 1
 849: PPUSH
 850: CALL 12154 0 2
 854: ST_TO_ADDR
// SetClass ( Donaldson , 1 ) ;
 855: LD_EXP 3
 859: PPUSH
 860: LD_INT 1
 862: PPUSH
 863: CALL_OW 336
// PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
 867: LD_EXP 3
 871: PPUSH
 872: LD_INT 4
 874: PPUSH
 875: LD_INT 0
 877: PPUSH
 878: CALL_OW 49
// end else
 882: GO 900
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 884: LD_INT 4
 886: PPUSH
 887: LD_INT 0
 889: PPUSH
 890: LD_INT 1
 892: PPUSH
 893: LD_INT 0
 895: PPUSH
 896: CALL 1315 0 4
// end ; if TestCharacters ( 11_Cyrus ) = true then
 900: LD_STRING 11_Cyrus
 902: PPUSH
 903: CALL_OW 28
 907: PUSH
 908: LD_INT 1
 910: EQUAL
 911: IFFALSE 958
// begin Cyrus = PrepareUnit ( 11_Cyrus , true ) ;
 913: LD_ADDR_EXP 5
 917: PUSH
 918: LD_STRING 11_Cyrus
 920: PPUSH
 921: LD_INT 1
 923: PPUSH
 924: CALL 12154 0 2
 928: ST_TO_ADDR
// SetClass ( Cyrus , 1 ) ;
 929: LD_EXP 5
 933: PPUSH
 934: LD_INT 1
 936: PPUSH
 937: CALL_OW 336
// PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
 941: LD_EXP 5
 945: PPUSH
 946: LD_INT 4
 948: PPUSH
 949: LD_INT 0
 951: PPUSH
 952: CALL_OW 49
// end else
 956: GO 974
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 958: LD_INT 4
 960: PPUSH
 961: LD_INT 0
 963: PPUSH
 964: LD_INT 1
 966: PPUSH
 967: LD_INT 0
 969: PPUSH
 970: CALL 1315 0 4
// end ; if TestCharacters ( 11_Denis ) = true then
 974: LD_STRING 11_Denis
 976: PPUSH
 977: CALL_OW 28
 981: PUSH
 982: LD_INT 1
 984: EQUAL
 985: IFFALSE 1032
// begin Denis = PrepareUnit ( 11_Denis , true ) ;
 987: LD_ADDR_EXP 6
 991: PUSH
 992: LD_STRING 11_Denis
 994: PPUSH
 995: LD_INT 1
 997: PPUSH
 998: CALL 12154 0 2
1002: ST_TO_ADDR
// SetClass ( Denis , 4 ) ;
1003: LD_EXP 6
1007: PPUSH
1008: LD_INT 4
1010: PPUSH
1011: CALL_OW 336
// PlaceUnitArea ( Denis , PlayerSpawn , false ) ;
1015: LD_EXP 6
1019: PPUSH
1020: LD_INT 4
1022: PPUSH
1023: LD_INT 0
1025: PPUSH
1026: CALL_OW 49
// end else
1030: GO 1048
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1032: LD_INT 4
1034: PPUSH
1035: LD_INT 0
1037: PPUSH
1038: LD_INT 1
1040: PPUSH
1041: LD_INT 0
1043: PPUSH
1044: CALL 1315 0 4
// end ; if TestCharacters ( 11_Frank ) = true then
1048: LD_STRING 11_Frank
1050: PPUSH
1051: CALL_OW 28
1055: PUSH
1056: LD_INT 1
1058: EQUAL
1059: IFFALSE 1106
// begin Frank = PrepareUnit ( 11_Frank , true ) ;
1061: LD_ADDR_EXP 12
1065: PUSH
1066: LD_STRING 11_Frank
1068: PPUSH
1069: LD_INT 1
1071: PPUSH
1072: CALL 12154 0 2
1076: ST_TO_ADDR
// SetClass ( Frank , 1 ) ;
1077: LD_EXP 12
1081: PPUSH
1082: LD_INT 1
1084: PPUSH
1085: CALL_OW 336
// PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
1089: LD_EXP 12
1093: PPUSH
1094: LD_INT 4
1096: PPUSH
1097: LD_INT 0
1099: PPUSH
1100: CALL_OW 49
// end else
1104: GO 1122
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1106: LD_INT 4
1108: PPUSH
1109: LD_INT 0
1111: PPUSH
1112: LD_INT 1
1114: PPUSH
1115: LD_INT 0
1117: PPUSH
1118: CALL 1315 0 4
// end ; if TestCharacters ( 11_Cornell ) = true then
1122: LD_STRING 11_Cornell
1124: PPUSH
1125: CALL_OW 28
1129: PUSH
1130: LD_INT 1
1132: EQUAL
1133: IFFALSE 1180
// begin Cornel = PrepareUnit ( 11_Cornell , true ) ;
1135: LD_ADDR_EXP 10
1139: PUSH
1140: LD_STRING 11_Cornell
1142: PPUSH
1143: LD_INT 1
1145: PPUSH
1146: CALL 12154 0 2
1150: ST_TO_ADDR
// SetClass ( Cornel , 1 ) ;
1151: LD_EXP 10
1155: PPUSH
1156: LD_INT 1
1158: PPUSH
1159: CALL_OW 336
// PlaceUnitArea ( Cornel , PlayerSpawn , false ) ;
1163: LD_EXP 10
1167: PPUSH
1168: LD_INT 4
1170: PPUSH
1171: LD_INT 0
1173: PPUSH
1174: CALL_OW 49
// end else
1178: GO 1196
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1180: LD_INT 4
1182: PPUSH
1183: LD_INT 0
1185: PPUSH
1186: LD_INT 1
1188: PPUSH
1189: LD_INT 0
1191: PPUSH
1192: CALL 1315 0 4
// end ; tmp := UnitFilter ( others11 , [ f_sex , 1 ] ) ;
1196: LD_ADDR_VAR 0 2
1200: PUSH
1201: LD_EXP 14
1205: PPUSH
1206: LD_INT 26
1208: PUSH
1209: LD_INT 1
1211: PUSH
1212: EMPTY
1213: LIST
1214: LIST
1215: PPUSH
1216: CALL_OW 72
1220: ST_TO_ADDR
// if not tmp then
1221: LD_VAR 0 2
1225: NOT
1226: IFFALSE 1255
// begin PrepareSoldier ( sex_male , 8 ) ;
1228: LD_INT 1
1230: PPUSH
1231: LD_INT 8
1233: PPUSH
1234: CALL_OW 381
// PlaceUnitArea ( CreateHuman , PlayerSpawn , false ) ;
1238: CALL_OW 44
1242: PPUSH
1243: LD_INT 4
1245: PPUSH
1246: LD_INT 0
1248: PPUSH
1249: CALL_OW 49
// end else
1253: GO 1294
// begin PlaceUnitArea ( tmp [ 1 ] , PlayerSpawn , false ) ;
1255: LD_VAR 0 2
1259: PUSH
1260: LD_INT 1
1262: ARRAY
1263: PPUSH
1264: LD_INT 4
1266: PPUSH
1267: LD_INT 0
1269: PPUSH
1270: CALL_OW 49
// others11 := others11 diff tmp [ 1 ] ;
1274: LD_ADDR_EXP 14
1278: PUSH
1279: LD_EXP 14
1283: PUSH
1284: LD_VAR 0 2
1288: PUSH
1289: LD_INT 1
1291: ARRAY
1292: DIFF
1293: ST_TO_ADDR
// end ; Powell = PrepareUnit ( Powell , false ) ;
1294: LD_ADDR_EXP 22
1298: PUSH
1299: LD_STRING Powell
1301: PPUSH
1302: LD_INT 0
1304: PPUSH
1305: CALL 12154 0 2
1309: ST_TO_ADDR
// end ;
1310: LD_VAR 0 1
1314: RET
// export function PrepareAmericansRandom ( area , veh , spawnMode , mech ) ; var i , un , tmp , mecha ; begin
1315: LD_INT 0
1317: PPUSH
1318: PPUSH
1319: PPUSH
1320: PPUSH
1321: PPUSH
// if mech = 1 then
1322: LD_VAR 0 4
1326: PUSH
1327: LD_INT 1
1329: EQUAL
1330: IFFALSE 1567
// begin if others11 > 0 then
1332: LD_EXP 14
1336: PUSH
1337: LD_INT 0
1339: GREATER
1340: IFFALSE 1507
// begin for i := 1 to others11 - 1 do
1342: LD_ADDR_VAR 0 6
1346: PUSH
1347: DOUBLE
1348: LD_INT 1
1350: DEC
1351: ST_TO_ADDR
1352: LD_EXP 14
1356: PUSH
1357: LD_INT 1
1359: MINUS
1360: PUSH
1361: FOR_TO
1362: IFFALSE 1444
// begin if GetSkill ( others11 [ i ] , 3 ) < GetSkill ( others11 [ i + 1 ] , 3 ) then
1364: LD_EXP 14
1368: PUSH
1369: LD_VAR 0 6
1373: ARRAY
1374: PPUSH
1375: LD_INT 3
1377: PPUSH
1378: CALL_OW 259
1382: PUSH
1383: LD_EXP 14
1387: PUSH
1388: LD_VAR 0 6
1392: PUSH
1393: LD_INT 1
1395: PLUS
1396: ARRAY
1397: PPUSH
1398: LD_INT 3
1400: PPUSH
1401: CALL_OW 259
1405: LESS
1406: IFFALSE 1442
// begin mecha = others11 [ i + 1 ] ;
1408: LD_ADDR_VAR 0 9
1412: PUSH
1413: LD_EXP 14
1417: PUSH
1418: LD_VAR 0 6
1422: PUSH
1423: LD_INT 1
1425: PLUS
1426: ARRAY
1427: ST_TO_ADDR
// SetClass ( mecha , 3 ) ;
1428: LD_VAR 0 9
1432: PPUSH
1433: LD_INT 3
1435: PPUSH
1436: CALL_OW 336
// break ;
1440: GO 1444
// end ; end ;
1442: GO 1361
1444: POP
1445: POP
// if spawnMode = 1 then
1446: LD_VAR 0 3
1450: PUSH
1451: LD_INT 1
1453: EQUAL
1454: IFFALSE 1475
// PlaceUnitArea ( mecha , area , false ) else
1456: LD_VAR 0 9
1460: PPUSH
1461: LD_VAR 0 1
1465: PPUSH
1466: LD_INT 0
1468: PPUSH
1469: CALL_OW 49
1473: GO 1489
// PlaceHumanInUnit ( mecha , veh ) ;
1475: LD_VAR 0 9
1479: PPUSH
1480: LD_VAR 0 2
1484: PPUSH
1485: CALL_OW 52
// others11 = others11 diff mecha ;
1489: LD_ADDR_EXP 14
1493: PUSH
1494: LD_EXP 14
1498: PUSH
1499: LD_VAR 0 9
1503: DIFF
1504: ST_TO_ADDR
// end else
1505: GO 1565
// begin hc_name =  ;
1507: LD_ADDR_OWVAR 26
1511: PUSH
1512: LD_STRING 
1514: ST_TO_ADDR
// hc_gallery =  ;
1515: LD_ADDR_OWVAR 33
1519: PUSH
1520: LD_STRING 
1522: ST_TO_ADDR
// PrepareMechanic ( false , rand ( 7 , 9 ) ) ;
1523: LD_INT 0
1525: PPUSH
1526: LD_INT 7
1528: PPUSH
1529: LD_INT 9
1531: PPUSH
1532: CALL_OW 12
1536: PPUSH
1537: CALL_OW 383
// un = CreateHuman ;
1541: LD_ADDR_VAR 0 7
1545: PUSH
1546: CALL_OW 44
1550: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1551: LD_VAR 0 7
1555: PPUSH
1556: LD_VAR 0 2
1560: PPUSH
1561: CALL_OW 52
// end ; end else
1565: GO 1736
// begin if others11 > 0 then
1567: LD_EXP 14
1571: PUSH
1572: LD_INT 0
1574: GREATER
1575: IFFALSE 1648
// begin if spawnMode = 1 then
1577: LD_VAR 0 3
1581: PUSH
1582: LD_INT 1
1584: EQUAL
1585: IFFALSE 1610
// PlaceUnitArea ( others11 [ 1 ] , area , false ) else
1587: LD_EXP 14
1591: PUSH
1592: LD_INT 1
1594: ARRAY
1595: PPUSH
1596: LD_VAR 0 1
1600: PPUSH
1601: LD_INT 0
1603: PPUSH
1604: CALL_OW 49
1608: GO 1628
// PlaceHumanInUnit ( others11 [ 1 ] , veh ) ;
1610: LD_EXP 14
1614: PUSH
1615: LD_INT 1
1617: ARRAY
1618: PPUSH
1619: LD_VAR 0 2
1623: PPUSH
1624: CALL_OW 52
// others11 = Delete ( others11 , 1 ) ;
1628: LD_ADDR_EXP 14
1632: PUSH
1633: LD_EXP 14
1637: PPUSH
1638: LD_INT 1
1640: PPUSH
1641: CALL_OW 3
1645: ST_TO_ADDR
// end else
1646: GO 1736
// begin hc_name =  ;
1648: LD_ADDR_OWVAR 26
1652: PUSH
1653: LD_STRING 
1655: ST_TO_ADDR
// hc_gallery =  ;
1656: LD_ADDR_OWVAR 33
1660: PUSH
1661: LD_STRING 
1663: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] , rand ( 7 , 9 ) ) ;
1664: LD_INT 0
1666: PPUSH
1667: LD_INT 1
1669: PUSH
1670: LD_INT 2
1672: PUSH
1673: LD_INT 3
1675: PUSH
1676: LD_INT 4
1678: PUSH
1679: EMPTY
1680: LIST
1681: LIST
1682: LIST
1683: LIST
1684: PUSH
1685: LD_INT 1
1687: PPUSH
1688: LD_INT 4
1690: PPUSH
1691: CALL_OW 12
1695: ARRAY
1696: PPUSH
1697: LD_INT 7
1699: PPUSH
1700: LD_INT 9
1702: PPUSH
1703: CALL_OW 12
1707: PPUSH
1708: CALL_OW 380
// un = CreateHuman ;
1712: LD_ADDR_VAR 0 7
1716: PUSH
1717: CALL_OW 44
1721: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1722: LD_VAR 0 7
1726: PPUSH
1727: LD_VAR 0 2
1731: PPUSH
1732: CALL_OW 52
// end ; end ; end ;
1736: LD_VAR 0 5
1740: RET
// export function PrepareVehicles ; var veh ; begin
1741: LD_INT 0
1743: PPUSH
1744: PPUSH
// uc_side = 1 ;
1745: LD_ADDR_OWVAR 20
1749: PUSH
1750: LD_INT 1
1752: ST_TO_ADDR
// uc_nation = 1 ;
1753: LD_ADDR_OWVAR 21
1757: PUSH
1758: LD_INT 1
1760: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
1761: LD_ADDR_OWVAR 37
1765: PUSH
1766: LD_INT 3
1768: ST_TO_ADDR
// vc_engine = 3 ;
1769: LD_ADDR_OWVAR 39
1773: PUSH
1774: LD_INT 3
1776: ST_TO_ADDR
// vc_control = 3 ;
1777: LD_ADDR_OWVAR 38
1781: PUSH
1782: LD_INT 3
1784: ST_TO_ADDR
// vc_weapon = us_gatling_gun ;
1785: LD_ADDR_OWVAR 40
1789: PUSH
1790: LD_INT 4
1792: ST_TO_ADDR
// veh = CreateVehicle ;
1793: LD_ADDR_VAR 0 2
1797: PUSH
1798: CALL_OW 45
1802: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1803: LD_VAR 0 2
1807: PPUSH
1808: LD_INT 4
1810: PPUSH
1811: LD_INT 0
1813: PPUSH
1814: CALL_OW 49
// vc_weapon = us_double_gun ;
1818: LD_ADDR_OWVAR 40
1822: PUSH
1823: LD_INT 5
1825: ST_TO_ADDR
// vc_control = 1 ;
1826: LD_ADDR_OWVAR 38
1830: PUSH
1831: LD_INT 1
1833: ST_TO_ADDR
// veh = CreateVehicle ;
1834: LD_ADDR_VAR 0 2
1838: PUSH
1839: CALL_OW 45
1843: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1844: LD_VAR 0 2
1848: PPUSH
1849: LD_INT 4
1851: PPUSH
1852: LD_INT 0
1854: PPUSH
1855: CALL_OW 49
// vc_weapon = us_light_gun ;
1859: LD_ADDR_OWVAR 40
1863: PUSH
1864: LD_INT 3
1866: ST_TO_ADDR
// vc_control = 3 ;
1867: LD_ADDR_OWVAR 38
1871: PUSH
1872: LD_INT 3
1874: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
1875: LD_ADDR_OWVAR 37
1879: PUSH
1880: LD_INT 2
1882: ST_TO_ADDR
// veh = CreateVehicle ;
1883: LD_ADDR_VAR 0 2
1887: PUSH
1888: CALL_OW 45
1892: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1893: LD_VAR 0 2
1897: PPUSH
1898: LD_INT 4
1900: PPUSH
1901: LD_INT 0
1903: PPUSH
1904: CALL_OW 49
// vc_weapon = us_gatling_gun ;
1908: LD_ADDR_OWVAR 40
1912: PUSH
1913: LD_INT 4
1915: ST_TO_ADDR
// veh = CreateVehicle ;
1916: LD_ADDR_VAR 0 2
1920: PUSH
1921: CALL_OW 45
1925: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1926: LD_VAR 0 2
1930: PPUSH
1931: LD_INT 4
1933: PPUSH
1934: LD_INT 0
1936: PPUSH
1937: CALL_OW 49
// end ;
1941: LD_VAR 0 1
1945: RET
// export function PowellSupport1 ; var veh , un ; begin
1946: LD_INT 0
1948: PPUSH
1949: PPUSH
1950: PPUSH
// uc_side = 1 ;
1951: LD_ADDR_OWVAR 20
1955: PUSH
1956: LD_INT 1
1958: ST_TO_ADDR
// uc_nation = 1 ;
1959: LD_ADDR_OWVAR 21
1963: PUSH
1964: LD_INT 1
1966: ST_TO_ADDR
// if TestCharacters ( 11_Brown ) = true then
1967: LD_STRING 11_Brown
1969: PPUSH
1970: CALL_OW 28
1974: PUSH
1975: LD_INT 1
1977: EQUAL
1978: IFFALSE 2025
// begin Brown = PrepareUnit ( 11_Brown , true ) ;
1980: LD_ADDR_EXP 7
1984: PUSH
1985: LD_STRING 11_Brown
1987: PPUSH
1988: LD_INT 1
1990: PPUSH
1991: CALL 12154 0 2
1995: ST_TO_ADDR
// SetClass ( Brown , 2 ) ;
1996: LD_EXP 7
2000: PPUSH
2001: LD_INT 2
2003: PPUSH
2004: CALL_OW 336
// PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
2008: LD_EXP 7
2012: PPUSH
2013: LD_INT 4
2015: PPUSH
2016: LD_INT 0
2018: PPUSH
2019: CALL_OW 49
// end else
2023: GO 2041
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2025: LD_INT 4
2027: PPUSH
2028: LD_INT 0
2030: PPUSH
2031: LD_INT 1
2033: PPUSH
2034: LD_INT 0
2036: PPUSH
2037: CALL 1315 0 4
// end ; if TestCharacters ( 11_Gary ) = true then
2041: LD_STRING 11_Gary
2043: PPUSH
2044: CALL_OW 28
2048: PUSH
2049: LD_INT 1
2051: EQUAL
2052: IFFALSE 2099
// begin Gary = PrepareUnit ( 11_Gary , true ) ;
2054: LD_ADDR_EXP 11
2058: PUSH
2059: LD_STRING 11_Gary
2061: PPUSH
2062: LD_INT 1
2064: PPUSH
2065: CALL 12154 0 2
2069: ST_TO_ADDR
// SetClass ( Gary , 2 ) ;
2070: LD_EXP 11
2074: PPUSH
2075: LD_INT 2
2077: PPUSH
2078: CALL_OW 336
// PlaceUnitArea ( Gary , PlayerSpawn , false ) ;
2082: LD_EXP 11
2086: PPUSH
2087: LD_INT 4
2089: PPUSH
2090: LD_INT 0
2092: PPUSH
2093: CALL_OW 49
// end else
2097: GO 2115
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2099: LD_INT 4
2101: PPUSH
2102: LD_INT 0
2104: PPUSH
2105: LD_INT 1
2107: PPUSH
2108: LD_INT 0
2110: PPUSH
2111: CALL 1315 0 4
// end ; vc_chassis = us_medium_tracked ;
2115: LD_ADDR_OWVAR 37
2119: PUSH
2120: LD_INT 3
2122: ST_TO_ADDR
// vc_engine = 3 ;
2123: LD_ADDR_OWVAR 39
2127: PUSH
2128: LD_INT 3
2130: ST_TO_ADDR
// vc_control = 1 ;
2131: LD_ADDR_OWVAR 38
2135: PUSH
2136: LD_INT 1
2138: ST_TO_ADDR
// vc_weapon = us_crane ;
2139: LD_ADDR_OWVAR 40
2143: PUSH
2144: LD_INT 13
2146: ST_TO_ADDR
// veh = CreateVehicle ;
2147: LD_ADDR_VAR 0 2
2151: PUSH
2152: CALL_OW 45
2156: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2157: LD_VAR 0 2
2161: PPUSH
2162: LD_INT 4
2164: PPUSH
2165: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2169: LD_VAR 0 2
2173: PPUSH
2174: LD_INT 4
2176: PPUSH
2177: LD_INT 0
2179: PPUSH
2180: CALL_OW 49
// PrepareAmericansRandom ( PlayerSpawn , veh , 2 , 1 ) ;
2184: LD_INT 4
2186: PPUSH
2187: LD_VAR 0 2
2191: PPUSH
2192: LD_INT 2
2194: PPUSH
2195: LD_INT 1
2197: PPUSH
2198: CALL 1315 0 4
// vc_weapon = 9 ;
2202: LD_ADDR_OWVAR 40
2206: PUSH
2207: LD_INT 9
2209: ST_TO_ADDR
// veh = CreateVehicle ;
2210: LD_ADDR_VAR 0 2
2214: PUSH
2215: CALL_OW 45
2219: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2220: LD_VAR 0 2
2224: PPUSH
2225: LD_INT 4
2227: PPUSH
2228: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2232: LD_VAR 0 2
2236: PPUSH
2237: LD_INT 4
2239: PPUSH
2240: LD_INT 0
2242: PPUSH
2243: CALL_OW 49
// PrepareAmericansRandom ( PlayerSpawn , veh , 2 , 1 ) ;
2247: LD_INT 4
2249: PPUSH
2250: LD_VAR 0 2
2254: PPUSH
2255: LD_INT 2
2257: PPUSH
2258: LD_INT 1
2260: PPUSH
2261: CALL 1315 0 4
// vc_control = 3 ;
2265: LD_ADDR_OWVAR 38
2269: PUSH
2270: LD_INT 3
2272: ST_TO_ADDR
// vc_weapon = us_cargo_bay ;
2273: LD_ADDR_OWVAR 40
2277: PUSH
2278: LD_INT 12
2280: ST_TO_ADDR
// amCargo1 = CreateVehicle ;
2281: LD_ADDR_EXP 15
2285: PUSH
2286: CALL_OW 45
2290: ST_TO_ADDR
// amCargo2 = CreateVehicle ;
2291: LD_ADDR_EXP 16
2295: PUSH
2296: CALL_OW 45
2300: ST_TO_ADDR
// SetDir ( amCargo1 , 4 ) ;
2301: LD_EXP 15
2305: PPUSH
2306: LD_INT 4
2308: PPUSH
2309: CALL_OW 233
// SetDir ( amCargo2 , 4 ) ;
2313: LD_EXP 16
2317: PPUSH
2318: LD_INT 4
2320: PPUSH
2321: CALL_OW 233
// PlaceUnitArea ( amCargo1 , PlayerSpawn , false ) ;
2325: LD_EXP 15
2329: PPUSH
2330: LD_INT 4
2332: PPUSH
2333: LD_INT 0
2335: PPUSH
2336: CALL_OW 49
// PlaceUnitArea ( amCargo2 , PlayerSpawn , false ) ;
2340: LD_EXP 16
2344: PPUSH
2345: LD_INT 4
2347: PPUSH
2348: LD_INT 0
2350: PPUSH
2351: CALL_OW 49
// AddCargo ( amCargo1 , 3 , 100 ) ;
2355: LD_EXP 15
2359: PPUSH
2360: LD_INT 3
2362: PPUSH
2363: LD_INT 100
2365: PPUSH
2366: CALL_OW 291
// AddCargo ( amCargo2 , 1 , 80 ) ;
2370: LD_EXP 16
2374: PPUSH
2375: LD_INT 1
2377: PPUSH
2378: LD_INT 80
2380: PPUSH
2381: CALL_OW 291
// AddCargo ( amCargo2 , 3 , 20 ) ;
2385: LD_EXP 16
2389: PPUSH
2390: LD_INT 3
2392: PPUSH
2393: LD_INT 20
2395: PPUSH
2396: CALL_OW 291
// end ;
2400: LD_VAR 0 1
2404: RET
// export function PowellSupport2 ; var veh , un ; begin
2405: LD_INT 0
2407: PPUSH
2408: PPUSH
2409: PPUSH
// uc_side = 1 ;
2410: LD_ADDR_OWVAR 20
2414: PUSH
2415: LD_INT 1
2417: ST_TO_ADDR
// uc_nation = 1 ;
2418: LD_ADDR_OWVAR 21
2422: PUSH
2423: LD_INT 1
2425: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
2426: LD_ADDR_OWVAR 37
2430: PUSH
2431: LD_INT 2
2433: ST_TO_ADDR
// vc_engine = 3 ;
2434: LD_ADDR_OWVAR 39
2438: PUSH
2439: LD_INT 3
2441: ST_TO_ADDR
// vc_control = 3 ;
2442: LD_ADDR_OWVAR 38
2446: PUSH
2447: LD_INT 3
2449: ST_TO_ADDR
// vc_weapon = us_light_gun ;
2450: LD_ADDR_OWVAR 40
2454: PUSH
2455: LD_INT 3
2457: ST_TO_ADDR
// veh = CreateVehicle ;
2458: LD_ADDR_VAR 0 2
2462: PUSH
2463: CALL_OW 45
2467: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2468: LD_VAR 0 2
2472: PPUSH
2473: LD_INT 4
2475: PPUSH
2476: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2480: LD_VAR 0 2
2484: PPUSH
2485: LD_INT 4
2487: PPUSH
2488: LD_INT 0
2490: PPUSH
2491: CALL_OW 49
// vc_control = 1 ;
2495: LD_ADDR_OWVAR 38
2499: PUSH
2500: LD_INT 1
2502: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
2503: LD_ADDR_OWVAR 37
2507: PUSH
2508: LD_INT 2
2510: ST_TO_ADDR
// vc_weapon = us_double_gun ;
2511: LD_ADDR_OWVAR 40
2515: PUSH
2516: LD_INT 5
2518: ST_TO_ADDR
// veh = CreateVehicle ;
2519: LD_ADDR_VAR 0 2
2523: PUSH
2524: CALL_OW 45
2528: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2529: LD_VAR 0 2
2533: PPUSH
2534: LD_INT 4
2536: PPUSH
2537: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2541: LD_VAR 0 2
2545: PPUSH
2546: LD_INT 4
2548: PPUSH
2549: LD_INT 0
2551: PPUSH
2552: CALL_OW 49
// if TestCharacters ( 11_Bobby ) = true then
2556: LD_STRING 11_Bobby
2558: PPUSH
2559: CALL_OW 28
2563: PUSH
2564: LD_INT 1
2566: EQUAL
2567: IFFALSE 2613
// begin Bobby = PrepareUnit ( 11_Bobby , true ) ;
2569: LD_ADDR_EXP 4
2573: PUSH
2574: LD_STRING 11_Bobby
2576: PPUSH
2577: LD_INT 1
2579: PPUSH
2580: CALL 12154 0 2
2584: ST_TO_ADDR
// SetClass ( Bobby , 3 ) ;
2585: LD_EXP 4
2589: PPUSH
2590: LD_INT 3
2592: PPUSH
2593: CALL_OW 336
// PlaceHumanInUnit ( Bobby , veh ) ;
2597: LD_EXP 4
2601: PPUSH
2602: LD_VAR 0 2
2606: PPUSH
2607: CALL_OW 52
// end else
2611: GO 2631
// begin PrepareAmericansRandom ( 0 , veh , 2 , 0 ) ;
2613: LD_INT 0
2615: PPUSH
2616: LD_VAR 0 2
2620: PPUSH
2621: LD_INT 2
2623: PPUSH
2624: LD_INT 0
2626: PPUSH
2627: CALL 1315 0 4
// end ; if TestCharacters ( 11_Houten ) = true then
2631: LD_STRING 11_Houten
2633: PPUSH
2634: CALL_OW 28
2638: PUSH
2639: LD_INT 1
2641: EQUAL
2642: IFFALSE 2689
// begin Houten = PrepareUnit ( 11_Houten , true ) ;
2644: LD_ADDR_EXP 9
2648: PUSH
2649: LD_STRING 11_Houten
2651: PPUSH
2652: LD_INT 1
2654: PPUSH
2655: CALL 12154 0 2
2659: ST_TO_ADDR
// SetClass ( Houten , 1 ) ;
2660: LD_EXP 9
2664: PPUSH
2665: LD_INT 1
2667: PPUSH
2668: CALL_OW 336
// PlaceUnitArea ( Houten , PlayerSpawn , false ) ;
2672: LD_EXP 9
2676: PPUSH
2677: LD_INT 4
2679: PPUSH
2680: LD_INT 0
2682: PPUSH
2683: CALL_OW 49
// end else
2687: GO 2705
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2689: LD_INT 4
2691: PPUSH
2692: LD_INT 0
2694: PPUSH
2695: LD_INT 1
2697: PPUSH
2698: LD_INT 0
2700: PPUSH
2701: CALL 1315 0 4
// end ; vc_control = 3 ;
2705: LD_ADDR_OWVAR 38
2709: PUSH
2710: LD_INT 3
2712: ST_TO_ADDR
// vc_weapon = us_cargo_bay ;
2713: LD_ADDR_OWVAR 40
2717: PUSH
2718: LD_INT 12
2720: ST_TO_ADDR
// amCargo3 = CreateVehicle ;
2721: LD_ADDR_EXP 17
2725: PUSH
2726: CALL_OW 45
2730: ST_TO_ADDR
// SetDir ( amCargo3 , 4 ) ;
2731: LD_EXP 17
2735: PPUSH
2736: LD_INT 4
2738: PPUSH
2739: CALL_OW 233
// amCargo4 = CreateVehicle ;
2743: LD_ADDR_EXP 18
2747: PUSH
2748: CALL_OW 45
2752: ST_TO_ADDR
// SetDir ( amCargo4 , 4 ) ;
2753: LD_EXP 18
2757: PPUSH
2758: LD_INT 4
2760: PPUSH
2761: CALL_OW 233
// amCargo5 = CreateVehicle ;
2765: LD_ADDR_EXP 19
2769: PUSH
2770: CALL_OW 45
2774: ST_TO_ADDR
// SetDir ( amCargo5 , 4 ) ;
2775: LD_EXP 19
2779: PPUSH
2780: LD_INT 4
2782: PPUSH
2783: CALL_OW 233
// PlaceUnitArea ( amCargo3 , PlayerSpawn , false ) ;
2787: LD_EXP 17
2791: PPUSH
2792: LD_INT 4
2794: PPUSH
2795: LD_INT 0
2797: PPUSH
2798: CALL_OW 49
// PlaceUnitArea ( amCargo4 , PlayerSpawn , false ) ;
2802: LD_EXP 18
2806: PPUSH
2807: LD_INT 4
2809: PPUSH
2810: LD_INT 0
2812: PPUSH
2813: CALL_OW 49
// PlaceUnitArea ( amCargo5 , PlayerSpawn , false ) ;
2817: LD_EXP 19
2821: PPUSH
2822: LD_INT 4
2824: PPUSH
2825: LD_INT 0
2827: PPUSH
2828: CALL_OW 49
// if kurtStatus > 0 then
2832: LD_EXP 26
2836: PUSH
2837: LD_INT 0
2839: GREATER
2840: IFFALSE 2889
// begin AddCargo ( amCargo3 , 1 , 100 ) ;
2842: LD_EXP 17
2846: PPUSH
2847: LD_INT 1
2849: PPUSH
2850: LD_INT 100
2852: PPUSH
2853: CALL_OW 291
// AddCargo ( amCargo4 , 1 , 100 ) ;
2857: LD_EXP 18
2861: PPUSH
2862: LD_INT 1
2864: PPUSH
2865: LD_INT 100
2867: PPUSH
2868: CALL_OW 291
// AddCargo ( amCargo5 , 3 , 80 ) ;
2872: LD_EXP 19
2876: PPUSH
2877: LD_INT 3
2879: PPUSH
2880: LD_INT 80
2882: PPUSH
2883: CALL_OW 291
// end else
2887: GO 2934
// begin AddCargo ( amCargo3 , 1 , 100 ) ;
2889: LD_EXP 17
2893: PPUSH
2894: LD_INT 1
2896: PPUSH
2897: LD_INT 100
2899: PPUSH
2900: CALL_OW 291
// AddCargo ( amCargo4 , 3 , 60 ) ;
2904: LD_EXP 18
2908: PPUSH
2909: LD_INT 3
2911: PPUSH
2912: LD_INT 60
2914: PPUSH
2915: CALL_OW 291
// AddCargo ( amCargo5 , 3 , 100 ) ;
2919: LD_EXP 19
2923: PPUSH
2924: LD_INT 3
2926: PPUSH
2927: LD_INT 100
2929: PPUSH
2930: CALL_OW 291
// end ; end ;
2934: LD_VAR 0 1
2938: RET
// export function PowellSupport3 ; var veh , un ; begin
2939: LD_INT 0
2941: PPUSH
2942: PPUSH
2943: PPUSH
// uc_side = 1 ;
2944: LD_ADDR_OWVAR 20
2948: PUSH
2949: LD_INT 1
2951: ST_TO_ADDR
// uc_nation = 1 ;
2952: LD_ADDR_OWVAR 21
2956: PUSH
2957: LD_INT 1
2959: ST_TO_ADDR
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2960: LD_INT 4
2962: PPUSH
2963: LD_INT 0
2965: PPUSH
2966: LD_INT 1
2968: PPUSH
2969: LD_INT 0
2971: PPUSH
2972: CALL 1315 0 4
// vc_chassis = us_medium_wheeled ;
2976: LD_ADDR_OWVAR 37
2980: PUSH
2981: LD_INT 2
2983: ST_TO_ADDR
// vc_engine = 3 ;
2984: LD_ADDR_OWVAR 39
2988: PUSH
2989: LD_INT 3
2991: ST_TO_ADDR
// vc_control = 3 ;
2992: LD_ADDR_OWVAR 38
2996: PUSH
2997: LD_INT 3
2999: ST_TO_ADDR
// vc_weapon = us_cargo_bay ;
3000: LD_ADDR_OWVAR 40
3004: PUSH
3005: LD_INT 12
3007: ST_TO_ADDR
// amCargo6 = CreateVehicle ;
3008: LD_ADDR_EXP 20
3012: PUSH
3013: CALL_OW 45
3017: ST_TO_ADDR
// amCargo7 = CreateVehicle ;
3018: LD_ADDR_EXP 21
3022: PUSH
3023: CALL_OW 45
3027: ST_TO_ADDR
// SetDir ( amCargo6 , 4 ) ;
3028: LD_EXP 20
3032: PPUSH
3033: LD_INT 4
3035: PPUSH
3036: CALL_OW 233
// SetDir ( amCargo7 , 4 ) ;
3040: LD_EXP 21
3044: PPUSH
3045: LD_INT 4
3047: PPUSH
3048: CALL_OW 233
// PlaceUnitArea ( amCargo6 , PlayerSpawn , false ) ;
3052: LD_EXP 20
3056: PPUSH
3057: LD_INT 4
3059: PPUSH
3060: LD_INT 0
3062: PPUSH
3063: CALL_OW 49
// PlaceUnitArea ( amCargo7 , PlayerSpawn , false ) ;
3067: LD_EXP 21
3071: PPUSH
3072: LD_INT 4
3074: PPUSH
3075: LD_INT 0
3077: PPUSH
3078: CALL_OW 49
// AddCargo ( amCargo6 , 1 , 100 ) ;
3082: LD_EXP 20
3086: PPUSH
3087: LD_INT 1
3089: PPUSH
3090: LD_INT 100
3092: PPUSH
3093: CALL_OW 291
// AddCargo ( amCargo7 , 1 , 100 ) ;
3097: LD_EXP 21
3101: PPUSH
3102: LD_INT 1
3104: PPUSH
3105: LD_INT 100
3107: PPUSH
3108: CALL_OW 291
// end ; end_of_file
3112: LD_VAR 0 1
3116: RET
// export function PrepareRussianCommander ; begin
3117: LD_INT 0
3119: PPUSH
// uc_side = 3 ;
3120: LD_ADDR_OWVAR 20
3124: PUSH
3125: LD_INT 3
3127: ST_TO_ADDR
// Davidov = PrepareUnit ( Davidov , false ) ;
3128: LD_ADDR_EXP 23
3132: PUSH
3133: LD_STRING Davidov
3135: PPUSH
3136: LD_INT 0
3138: PPUSH
3139: CALL 12154 0 2
3143: ST_TO_ADDR
// PlaceHumanInUnit ( Davidov , ruheadlab ) ;
3144: LD_EXP 23
3148: PPUSH
3149: LD_INT 3
3151: PPUSH
3152: CALL_OW 52
// RuScientists = RuScientists ^ Davidov ;
3156: LD_ADDR_EXP 34
3160: PUSH
3161: LD_EXP 34
3165: PUSH
3166: LD_EXP 23
3170: ADD
3171: ST_TO_ADDR
// SetClass ( RuScientists , 4 ) ;
3172: LD_EXP 34
3176: PPUSH
3177: LD_INT 4
3179: PPUSH
3180: CALL_OW 336
// end ;
3184: LD_VAR 0 1
3188: RET
// export function PrepareEastBase ; var i , un ; begin
3189: LD_INT 0
3191: PPUSH
3192: PPUSH
3193: PPUSH
// RespawnInside ( 3 , 3 , rubar2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 1 , 3 ) ;
3194: LD_INT 3
3196: PPUSH
3197: LD_INT 3
3199: PPUSH
3200: LD_INT 121
3202: PPUSH
3203: LD_EXP 36
3207: PPUSH
3208: LD_EXP 37
3212: PPUSH
3213: CALL_OW 12
3217: PPUSH
3218: LD_INT 1
3220: PPUSH
3221: LD_INT 3
3223: PPUSH
3224: CALL 12868 0 6
// RespawnInside ( 3 , 3 , rubar2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 9 , 3 ) ;
3228: LD_INT 3
3230: PPUSH
3231: LD_INT 3
3233: PPUSH
3234: LD_INT 121
3236: PPUSH
3237: LD_EXP 36
3241: PPUSH
3242: LD_EXP 37
3246: PPUSH
3247: CALL_OW 12
3251: PPUSH
3252: LD_INT 9
3254: PPUSH
3255: LD_INT 3
3257: PPUSH
3258: CALL 12868 0 6
// RespawnInside ( 3 , 3 , rueastdepot , rand ( RuSolMinlevel , RuSolMaxLevel ) , 2 , 6 ) ;
3262: LD_INT 3
3264: PPUSH
3265: LD_INT 3
3267: PPUSH
3268: LD_INT 4
3270: PPUSH
3271: LD_EXP 36
3275: PPUSH
3276: LD_EXP 37
3280: PPUSH
3281: CALL_OW 12
3285: PPUSH
3286: LD_INT 2
3288: PPUSH
3289: LD_INT 6
3291: PPUSH
3292: CALL 12868 0 6
// RespawnInside ( 3 , 3 , rufab2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 3 , 6 ) ;
3296: LD_INT 3
3298: PPUSH
3299: LD_INT 3
3301: PPUSH
3302: LD_INT 112
3304: PPUSH
3305: LD_EXP 36
3309: PPUSH
3310: LD_EXP 37
3314: PPUSH
3315: CALL_OW 12
3319: PPUSH
3320: LD_INT 3
3322: PPUSH
3323: LD_INT 6
3325: PPUSH
3326: CALL 12868 0 6
// RespawnInside ( 3 , 3 , rulab2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3330: LD_INT 3
3332: PPUSH
3333: LD_INT 3
3335: PPUSH
3336: LD_INT 47
3338: PPUSH
3339: LD_EXP 36
3343: PPUSH
3344: LD_EXP 37
3348: PPUSH
3349: CALL_OW 12
3353: PPUSH
3354: LD_INT 4
3356: PPUSH
3357: LD_INT 6
3359: PPUSH
3360: CALL 12868 0 6
// RespawnInside ( 3 , 3 , rulab3 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3364: LD_INT 3
3366: PPUSH
3367: LD_INT 3
3369: PPUSH
3370: LD_INT 129
3372: PPUSH
3373: LD_EXP 36
3377: PPUSH
3378: LD_EXP 37
3382: PPUSH
3383: CALL_OW 12
3387: PPUSH
3388: LD_INT 4
3390: PPUSH
3391: LD_INT 6
3393: PPUSH
3394: CALL 12868 0 6
// RespawnInside ( 3 , 3 , rulab4 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3398: LD_INT 3
3400: PPUSH
3401: LD_INT 3
3403: PPUSH
3404: LD_INT 135
3406: PPUSH
3407: LD_EXP 36
3411: PPUSH
3412: LD_EXP 37
3416: PPUSH
3417: CALL_OW 12
3421: PPUSH
3422: LD_INT 4
3424: PPUSH
3425: LD_INT 6
3427: PPUSH
3428: CALL 12868 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
3432: LD_ADDR_VAR 0 2
3436: PUSH
3437: LD_INT 22
3439: PUSH
3440: LD_INT 3
3442: PUSH
3443: EMPTY
3444: LIST
3445: LIST
3446: PUSH
3447: LD_INT 30
3449: PUSH
3450: LD_INT 32
3452: PUSH
3453: EMPTY
3454: LIST
3455: LIST
3456: PUSH
3457: EMPTY
3458: LIST
3459: LIST
3460: PPUSH
3461: CALL_OW 69
3465: PUSH
3466: FOR_IN
3467: IFFALSE 3507
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinlevel , RuSolMaxLevel ) , 1 , 1 ) ;
3469: LD_INT 3
3471: PPUSH
3472: LD_INT 3
3474: PPUSH
3475: LD_VAR 0 2
3479: PPUSH
3480: LD_EXP 36
3484: PPUSH
3485: LD_EXP 37
3489: PPUSH
3490: CALL_OW 12
3494: PPUSH
3495: LD_INT 1
3497: PPUSH
3498: LD_INT 1
3500: PPUSH
3501: CALL 12868 0 6
3505: GO 3466
3507: POP
3508: POP
// for i = 1 to 5 do
3509: LD_ADDR_VAR 0 2
3513: PUSH
3514: DOUBLE
3515: LD_INT 1
3517: DEC
3518: ST_TO_ADDR
3519: LD_INT 5
3521: PUSH
3522: FOR_TO
3523: IFFALSE 3622
// begin uc_side = 3 ;
3525: LD_ADDR_OWVAR 20
3529: PUSH
3530: LD_INT 3
3532: ST_TO_ADDR
// uc_nation = 3 ;
3533: LD_ADDR_OWVAR 21
3537: PUSH
3538: LD_INT 3
3540: ST_TO_ADDR
// hc_gallery =  ;
3541: LD_ADDR_OWVAR 33
3545: PUSH
3546: LD_STRING 
3548: ST_TO_ADDR
// hc_name =  ;
3549: LD_ADDR_OWVAR 26
3553: PUSH
3554: LD_STRING 
3556: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3557: LD_INT 0
3559: PPUSH
3560: LD_INT 4
3562: PPUSH
3563: LD_EXP 36
3567: PPUSH
3568: LD_EXP 37
3572: PPUSH
3573: CALL_OW 12
3577: PPUSH
3578: CALL_OW 380
// un = CreateHuman ;
3582: LD_ADDR_VAR 0 3
3586: PUSH
3587: CALL_OW 44
3591: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruheadlab ) ;
3592: LD_VAR 0 3
3596: PPUSH
3597: LD_INT 3
3599: PPUSH
3600: CALL_OW 52
// RuScientists = RuScientists ^ un ;
3604: LD_ADDR_EXP 34
3608: PUSH
3609: LD_EXP 34
3613: PUSH
3614: LD_VAR 0 3
3618: ADD
3619: ST_TO_ADDR
// end ;
3620: GO 3522
3622: POP
3623: POP
// end ;
3624: LD_VAR 0 1
3628: RET
// export function PrepareWestBase ; var i , un ; begin
3629: LD_INT 0
3631: PPUSH
3632: PPUSH
3633: PPUSH
// RespawnInside ( 3 , 3 , ruwestdepot , rand ( RuSolMinlevel , RuSolMaxLevel ) , 2 , 3 ) ;
3634: LD_INT 3
3636: PPUSH
3637: LD_INT 3
3639: PPUSH
3640: LD_INT 6
3642: PPUSH
3643: LD_EXP 36
3647: PPUSH
3648: LD_EXP 37
3652: PPUSH
3653: CALL_OW 12
3657: PPUSH
3658: LD_INT 2
3660: PPUSH
3661: LD_INT 3
3663: PPUSH
3664: CALL 12868 0 6
// RespawnInside ( 3 , 3 , rulab1 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 3 ) ;
3668: LD_INT 3
3670: PPUSH
3671: LD_INT 3
3673: PPUSH
3674: LD_INT 91
3676: PPUSH
3677: LD_EXP 36
3681: PPUSH
3682: LD_EXP 37
3686: PPUSH
3687: CALL_OW 12
3691: PPUSH
3692: LD_INT 4
3694: PPUSH
3695: LD_INT 3
3697: PPUSH
3698: CALL 12868 0 6
// RespawnInside ( 3 , 3 , ru_fact , rand ( RuSolMinlevel , RuSolMaxLevel ) , 3 , 6 ) ;
3702: LD_INT 3
3704: PPUSH
3705: LD_INT 3
3707: PPUSH
3708: LD_INT 21
3710: PPUSH
3711: LD_EXP 36
3715: PPUSH
3716: LD_EXP 37
3720: PPUSH
3721: CALL_OW 12
3725: PPUSH
3726: LD_INT 3
3728: PPUSH
3729: LD_INT 6
3731: PPUSH
3732: CALL 12868 0 6
// end ;
3736: LD_VAR 0 1
3740: RET
// export function PrepareOtherRussians ; var i , un , veh ; begin
3741: LD_INT 0
3743: PPUSH
3744: PPUSH
3745: PPUSH
3746: PPUSH
// uc_side = 3 ;
3747: LD_ADDR_OWVAR 20
3751: PUSH
3752: LD_INT 3
3754: ST_TO_ADDR
// uc_nation = 3 ;
3755: LD_ADDR_OWVAR 21
3759: PUSH
3760: LD_INT 3
3762: ST_TO_ADDR
// for i = 1 to 5 do
3763: LD_ADDR_VAR 0 2
3767: PUSH
3768: DOUBLE
3769: LD_INT 1
3771: DEC
3772: ST_TO_ADDR
3773: LD_INT 5
3775: PUSH
3776: FOR_TO
3777: IFFALSE 3847
// begin hc_gallery =  ;
3779: LD_ADDR_OWVAR 33
3783: PUSH
3784: LD_STRING 
3786: ST_TO_ADDR
// hc_name =  ;
3787: LD_ADDR_OWVAR 26
3791: PUSH
3792: LD_STRING 
3794: ST_TO_ADDR
// PrepareHuman ( false , 9 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3795: LD_INT 0
3797: PPUSH
3798: LD_INT 9
3800: PPUSH
3801: LD_EXP 36
3805: PPUSH
3806: LD_EXP 37
3810: PPUSH
3811: CALL_OW 12
3815: PPUSH
3816: CALL_OW 380
// un = CreateHuman ;
3820: LD_ADDR_VAR 0 3
3824: PUSH
3825: CALL_OW 44
3829: ST_TO_ADDR
// PlaceUnitArea ( un , RussianBazookersSpawn , false ) ;
3830: LD_VAR 0 3
3834: PPUSH
3835: LD_INT 8
3837: PPUSH
3838: LD_INT 0
3840: PPUSH
3841: CALL_OW 49
// end ;
3845: GO 3776
3847: POP
3848: POP
// for i = 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
3849: LD_ADDR_VAR 0 2
3853: PUSH
3854: DOUBLE
3855: LD_INT 1
3857: DEC
3858: ST_TO_ADDR
3859: LD_INT 2
3861: PUSH
3862: LD_INT 3
3864: PUSH
3865: LD_INT 4
3867: PUSH
3868: EMPTY
3869: LIST
3870: LIST
3871: LIST
3872: PUSH
3873: LD_OWVAR 67
3877: ARRAY
3878: PUSH
3879: FOR_TO
3880: IFFALSE 3950
// begin hc_gallery =  ;
3882: LD_ADDR_OWVAR 33
3886: PUSH
3887: LD_STRING 
3889: ST_TO_ADDR
// hc_name =  ;
3890: LD_ADDR_OWVAR 26
3894: PUSH
3895: LD_STRING 
3897: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3898: LD_INT 0
3900: PPUSH
3901: LD_INT 4
3903: PPUSH
3904: LD_EXP 36
3908: PPUSH
3909: LD_EXP 37
3913: PPUSH
3914: CALL_OW 12
3918: PPUSH
3919: CALL_OW 380
// un = CreateHuman ;
3923: LD_ADDR_VAR 0 3
3927: PUSH
3928: CALL_OW 44
3932: ST_TO_ADDR
// PlaceUnitArea ( un , RussianBazookersSpawn , false ) ;
3933: LD_VAR 0 3
3937: PPUSH
3938: LD_INT 8
3940: PPUSH
3941: LD_INT 0
3943: PPUSH
3944: CALL_OW 49
// end ;
3948: GO 3879
3950: POP
3951: POP
// for i := 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
3952: LD_ADDR_VAR 0 2
3956: PUSH
3957: DOUBLE
3958: LD_INT 1
3960: DEC
3961: ST_TO_ADDR
3962: LD_INT 3
3964: PUSH
3965: LD_INT 4
3967: PUSH
3968: LD_INT 5
3970: PUSH
3971: EMPTY
3972: LIST
3973: LIST
3974: LIST
3975: PUSH
3976: LD_OWVAR 67
3980: ARRAY
3981: PUSH
3982: FOR_TO
3983: IFFALSE 4179
// begin vc_engine = 3 ;
3985: LD_ADDR_OWVAR 39
3989: PUSH
3990: LD_INT 3
3992: ST_TO_ADDR
// vc_control = 1 ;
3993: LD_ADDR_OWVAR 38
3997: PUSH
3998: LD_INT 1
4000: ST_TO_ADDR
// vc_weapon = [ 42 , 43 , 44 , 45 , 46 ] [ Rand ( 1 , 5 ) ] ;
4001: LD_ADDR_OWVAR 40
4005: PUSH
4006: LD_INT 42
4008: PUSH
4009: LD_INT 43
4011: PUSH
4012: LD_INT 44
4014: PUSH
4015: LD_INT 45
4017: PUSH
4018: LD_INT 46
4020: PUSH
4021: EMPTY
4022: LIST
4023: LIST
4024: LIST
4025: LIST
4026: LIST
4027: PUSH
4028: LD_INT 1
4030: PPUSH
4031: LD_INT 5
4033: PPUSH
4034: CALL_OW 12
4038: ARRAY
4039: ST_TO_ADDR
// if vc_weapon = ru_heavy_gun then
4040: LD_OWVAR 40
4044: PUSH
4045: LD_INT 46
4047: EQUAL
4048: IFFALSE 4060
// vc_chassis = ru_heavy_tracked else
4050: LD_ADDR_OWVAR 37
4054: PUSH
4055: LD_INT 24
4057: ST_TO_ADDR
4058: GO 4087
// vc_chassis = [ ru_medium_tracked , ru_medium_wheeled ] [ Rand ( 1 , 2 ) ] ;
4060: LD_ADDR_OWVAR 37
4064: PUSH
4065: LD_INT 22
4067: PUSH
4068: LD_INT 21
4070: PUSH
4071: EMPTY
4072: LIST
4073: LIST
4074: PUSH
4075: LD_INT 1
4077: PPUSH
4078: LD_INT 2
4080: PPUSH
4081: CALL_OW 12
4085: ARRAY
4086: ST_TO_ADDR
// veh = CreateVehicle ;
4087: LD_ADDR_VAR 0 4
4091: PUSH
4092: CALL_OW 45
4096: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4097: LD_VAR 0 4
4101: PPUSH
4102: LD_INT 3
4104: PPUSH
4105: CALL_OW 233
// PlaceUnitArea ( veh , RussianTanksWestHill , false ) ;
4109: LD_VAR 0 4
4113: PPUSH
4114: LD_INT 5
4116: PPUSH
4117: LD_INT 0
4119: PPUSH
4120: CALL_OW 49
// hc_gallery =  ;
4124: LD_ADDR_OWVAR 33
4128: PUSH
4129: LD_STRING 
4131: ST_TO_ADDR
// hc_name =  ;
4132: LD_ADDR_OWVAR 26
4136: PUSH
4137: LD_STRING 
4139: ST_TO_ADDR
// PrepareHuman ( false , 3 , 10 ) ;
4140: LD_INT 0
4142: PPUSH
4143: LD_INT 3
4145: PPUSH
4146: LD_INT 10
4148: PPUSH
4149: CALL_OW 380
// un = CreateHuman ;
4153: LD_ADDR_VAR 0 3
4157: PUSH
4158: CALL_OW 44
4162: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4163: LD_VAR 0 3
4167: PPUSH
4168: LD_VAR 0 4
4172: PPUSH
4173: CALL_OW 52
// end ;
4177: GO 3982
4179: POP
4180: POP
// for i := 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
4181: LD_ADDR_VAR 0 2
4185: PUSH
4186: DOUBLE
4187: LD_INT 1
4189: DEC
4190: ST_TO_ADDR
4191: LD_INT 3
4193: PUSH
4194: LD_INT 4
4196: PUSH
4197: LD_INT 5
4199: PUSH
4200: EMPTY
4201: LIST
4202: LIST
4203: LIST
4204: PUSH
4205: LD_OWVAR 67
4209: ARRAY
4210: PUSH
4211: FOR_TO
4212: IFFALSE 4359
// begin vc_engine = 3 ;
4214: LD_ADDR_OWVAR 39
4218: PUSH
4219: LD_INT 3
4221: ST_TO_ADDR
// vc_control = 3 ;
4222: LD_ADDR_OWVAR 38
4226: PUSH
4227: LD_INT 3
4229: ST_TO_ADDR
// vc_weapon = [ 42 , 43 , 44 , 45 , 46 , 49 ] [ Rand ( 1 , 5 ) ] ;
4230: LD_ADDR_OWVAR 40
4234: PUSH
4235: LD_INT 42
4237: PUSH
4238: LD_INT 43
4240: PUSH
4241: LD_INT 44
4243: PUSH
4244: LD_INT 45
4246: PUSH
4247: LD_INT 46
4249: PUSH
4250: LD_INT 49
4252: PUSH
4253: EMPTY
4254: LIST
4255: LIST
4256: LIST
4257: LIST
4258: LIST
4259: LIST
4260: PUSH
4261: LD_INT 1
4263: PPUSH
4264: LD_INT 5
4266: PPUSH
4267: CALL_OW 12
4271: ARRAY
4272: ST_TO_ADDR
// if vc_weapon = ru_heavy_gun then
4273: LD_OWVAR 40
4277: PUSH
4278: LD_INT 46
4280: EQUAL
4281: IFFALSE 4293
// vc_chassis = ru_heavy_tracked else
4283: LD_ADDR_OWVAR 37
4287: PUSH
4288: LD_INT 24
4290: ST_TO_ADDR
4291: GO 4320
// vc_chassis = [ ru_medium_tracked , ru_medium_wheeled ] [ Rand ( 1 , 2 ) ] ;
4293: LD_ADDR_OWVAR 37
4297: PUSH
4298: LD_INT 22
4300: PUSH
4301: LD_INT 21
4303: PUSH
4304: EMPTY
4305: LIST
4306: LIST
4307: PUSH
4308: LD_INT 1
4310: PPUSH
4311: LD_INT 2
4313: PPUSH
4314: CALL_OW 12
4318: ARRAY
4319: ST_TO_ADDR
// veh = CreateVehicle ;
4320: LD_ADDR_VAR 0 4
4324: PUSH
4325: CALL_OW 45
4329: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4330: LD_VAR 0 4
4334: PPUSH
4335: LD_INT 3
4337: PPUSH
4338: CALL_OW 233
// PlaceUnitArea ( veh , RussianTanksEastHill , false ) ;
4342: LD_VAR 0 4
4346: PPUSH
4347: LD_INT 6
4349: PPUSH
4350: LD_INT 0
4352: PPUSH
4353: CALL_OW 49
// end ;
4357: GO 4211
4359: POP
4360: POP
// end ; end_of_file
4361: LD_VAR 0 1
4365: RET
// export function PrepareKurt ; begin
4366: LD_INT 0
4368: PPUSH
// uc_side = 8 ;
4369: LD_ADDR_OWVAR 20
4373: PUSH
4374: LD_INT 8
4376: ST_TO_ADDR
// uc_nation = 2 ;
4377: LD_ADDR_OWVAR 21
4381: PUSH
4382: LD_INT 2
4384: ST_TO_ADDR
// vc_chassis = ar_medium_trike ;
4385: LD_ADDR_OWVAR 37
4389: PUSH
4390: LD_INT 13
4392: ST_TO_ADDR
// vc_engine = 1 ;
4393: LD_ADDR_OWVAR 39
4397: PUSH
4398: LD_INT 1
4400: ST_TO_ADDR
// vc_control = 1 ;
4401: LD_ADDR_OWVAR 38
4405: PUSH
4406: LD_INT 1
4408: ST_TO_ADDR
// vc_weapon = 24 ;
4409: LD_ADDR_OWVAR 40
4413: PUSH
4414: LD_INT 24
4416: ST_TO_ADDR
// KurtVeh = CreateVehicle ;
4417: LD_ADDR_EXP 25
4421: PUSH
4422: CALL_OW 45
4426: ST_TO_ADDR
// if kurtStatus > 0 then
4427: LD_EXP 26
4431: PUSH
4432: LD_INT 0
4434: GREATER
4435: IFFALSE 4484
// begin Kurt = PrepareUnit ( Kurt , false ) ;
4437: LD_ADDR_EXP 24
4441: PUSH
4442: LD_STRING Kurt
4444: PPUSH
4445: LD_INT 0
4447: PPUSH
4448: CALL 12154 0 2
4452: ST_TO_ADDR
// PlaceUnitArea ( KurtVeh , PlayerSpawn , false ) ;
4453: LD_EXP 25
4457: PPUSH
4458: LD_INT 4
4460: PPUSH
4461: LD_INT 0
4463: PPUSH
4464: CALL_OW 49
// PlaceHumanInUnit ( Kurt , KurtVeh ) ;
4468: LD_EXP 24
4472: PPUSH
4473: LD_EXP 25
4477: PPUSH
4478: CALL_OW 52
// end else
4482: GO 4561
// begin hc_name =  ;
4484: LD_ADDR_OWVAR 26
4488: PUSH
4489: LD_STRING 
4491: ST_TO_ADDR
// hc_gallery =  ;
4492: LD_ADDR_OWVAR 33
4496: PUSH
4497: LD_STRING 
4499: ST_TO_ADDR
// PrepareSoldier ( sex_male , 10 ) ;
4500: LD_INT 1
4502: PPUSH
4503: LD_INT 10
4505: PPUSH
4506: CALL_OW 381
// Kurt = CreateHuman ;
4510: LD_ADDR_EXP 24
4514: PUSH
4515: CALL_OW 44
4519: ST_TO_ADDR
// PlaceUnitArea ( KurtVeh , PlayerSpawn , false ) ;
4520: LD_EXP 25
4524: PPUSH
4525: LD_INT 4
4527: PPUSH
4528: LD_INT 0
4530: PPUSH
4531: CALL_OW 49
// PlaceHumanInUnit ( Kurt , KurtVeh ) ;
4535: LD_EXP 24
4539: PPUSH
4540: LD_EXP 25
4544: PPUSH
4545: CALL_OW 52
// SaveCharacters ( Kurt , AltKurt ) ;
4549: LD_EXP 24
4553: PPUSH
4554: LD_STRING AltKurt
4556: PPUSH
4557: CALL_OW 38
// end ; end ;
4561: LD_VAR 0 1
4565: RET
// export function PrepareLegionForPlayer ; var i , un , veh ; begin
4566: LD_INT 0
4568: PPUSH
4569: PPUSH
4570: PPUSH
4571: PPUSH
// for i = 1 to 3 do
4572: LD_ADDR_VAR 0 2
4576: PUSH
4577: DOUBLE
4578: LD_INT 1
4580: DEC
4581: ST_TO_ADDR
4582: LD_INT 3
4584: PUSH
4585: FOR_TO
4586: IFFALSE 4707
// begin uc_side = 1 ;
4588: LD_ADDR_OWVAR 20
4592: PUSH
4593: LD_INT 1
4595: ST_TO_ADDR
// uc_nation = 2 ;
4596: LD_ADDR_OWVAR 21
4600: PUSH
4601: LD_INT 2
4603: ST_TO_ADDR
// hc_gallery =  ;
4604: LD_ADDR_OWVAR 33
4608: PUSH
4609: LD_STRING 
4611: ST_TO_ADDR
// hc_name =  ;
4612: LD_ADDR_OWVAR 26
4616: PUSH
4617: LD_STRING 
4619: ST_TO_ADDR
// if kurtStatus = 0 or kurtStatus = 2 then
4620: LD_EXP 26
4624: PUSH
4625: LD_INT 0
4627: EQUAL
4628: PUSH
4629: LD_EXP 26
4633: PUSH
4634: LD_INT 2
4636: EQUAL
4637: OR
4638: IFFALSE 4655
// PrepareHuman ( false , 1 , 6 ) else
4640: LD_INT 0
4642: PPUSH
4643: LD_INT 1
4645: PPUSH
4646: LD_INT 6
4648: PPUSH
4649: CALL_OW 380
4653: GO 4668
// PrepareHuman ( false , 1 , 8 ) ;
4655: LD_INT 0
4657: PPUSH
4658: LD_INT 1
4660: PPUSH
4661: LD_INT 8
4663: PPUSH
4664: CALL_OW 380
// un = CreateHuman ;
4668: LD_ADDR_VAR 0 3
4672: PUSH
4673: CALL_OW 44
4677: ST_TO_ADDR
// SetDir ( un , 4 ) ;
4678: LD_VAR 0 3
4682: PPUSH
4683: LD_INT 4
4685: PPUSH
4686: CALL_OW 233
// PlaceUnitArea ( un , PlayerSpawn , false ) ;
4690: LD_VAR 0 3
4694: PPUSH
4695: LD_INT 4
4697: PPUSH
4698: LD_INT 0
4700: PPUSH
4701: CALL_OW 49
// end ;
4705: GO 4585
4707: POP
4708: POP
// vc_chassis = 14 ;
4709: LD_ADDR_OWVAR 37
4713: PUSH
4714: LD_INT 14
4716: ST_TO_ADDR
// vc_engine = 3 ;
4717: LD_ADDR_OWVAR 39
4721: PUSH
4722: LD_INT 3
4724: ST_TO_ADDR
// vc_control = 1 ;
4725: LD_ADDR_OWVAR 38
4729: PUSH
4730: LD_INT 1
4732: ST_TO_ADDR
// vc_weapon = [ 27 , 26 , 28 ] [ Rand ( 1 , 3 ) ] ;
4733: LD_ADDR_OWVAR 40
4737: PUSH
4738: LD_INT 27
4740: PUSH
4741: LD_INT 26
4743: PUSH
4744: LD_INT 28
4746: PUSH
4747: EMPTY
4748: LIST
4749: LIST
4750: LIST
4751: PUSH
4752: LD_INT 1
4754: PPUSH
4755: LD_INT 3
4757: PPUSH
4758: CALL_OW 12
4762: ARRAY
4763: ST_TO_ADDR
// veh = CreateVehicle ;
4764: LD_ADDR_VAR 0 4
4768: PUSH
4769: CALL_OW 45
4773: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
4774: LD_VAR 0 4
4778: PPUSH
4779: LD_INT 4
4781: PPUSH
4782: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
4786: LD_VAR 0 4
4790: PPUSH
4791: LD_INT 4
4793: PPUSH
4794: LD_INT 0
4796: PPUSH
4797: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
4801: LD_EXP 26
4805: PUSH
4806: LD_INT 0
4808: EQUAL
4809: PUSH
4810: LD_EXP 26
4814: PUSH
4815: LD_INT 2
4817: EQUAL
4818: OR
4819: IFFALSE 4836
// PrepareHuman ( false , 3 , 6 ) else
4821: LD_INT 0
4823: PPUSH
4824: LD_INT 3
4826: PPUSH
4827: LD_INT 6
4829: PPUSH
4830: CALL_OW 380
4834: GO 4849
// PrepareHuman ( false , 3 , 8 ) ;
4836: LD_INT 0
4838: PPUSH
4839: LD_INT 3
4841: PPUSH
4842: LD_INT 8
4844: PPUSH
4845: CALL_OW 380
// un = CreateHuman ;
4849: LD_ADDR_VAR 0 3
4853: PUSH
4854: CALL_OW 44
4858: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4859: LD_VAR 0 3
4863: PPUSH
4864: LD_VAR 0 4
4868: PPUSH
4869: CALL_OW 52
// vc_chassis = 14 ;
4873: LD_ADDR_OWVAR 37
4877: PUSH
4878: LD_INT 14
4880: ST_TO_ADDR
// vc_engine = 3 ;
4881: LD_ADDR_OWVAR 39
4885: PUSH
4886: LD_INT 3
4888: ST_TO_ADDR
// vc_control = 1 ;
4889: LD_ADDR_OWVAR 38
4893: PUSH
4894: LD_INT 1
4896: ST_TO_ADDR
// vc_weapon = [ 27 , 26 , 28 ] [ Rand ( 1 , 3 ) ] ;
4897: LD_ADDR_OWVAR 40
4901: PUSH
4902: LD_INT 27
4904: PUSH
4905: LD_INT 26
4907: PUSH
4908: LD_INT 28
4910: PUSH
4911: EMPTY
4912: LIST
4913: LIST
4914: LIST
4915: PUSH
4916: LD_INT 1
4918: PPUSH
4919: LD_INT 3
4921: PPUSH
4922: CALL_OW 12
4926: ARRAY
4927: ST_TO_ADDR
// veh = CreateVehicle ;
4928: LD_ADDR_VAR 0 4
4932: PUSH
4933: CALL_OW 45
4937: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
4938: LD_VAR 0 4
4942: PPUSH
4943: LD_INT 4
4945: PPUSH
4946: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
4950: LD_VAR 0 4
4954: PPUSH
4955: LD_INT 4
4957: PPUSH
4958: LD_INT 0
4960: PPUSH
4961: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
4965: LD_EXP 26
4969: PUSH
4970: LD_INT 0
4972: EQUAL
4973: PUSH
4974: LD_EXP 26
4978: PUSH
4979: LD_INT 2
4981: EQUAL
4982: OR
4983: IFFALSE 5000
// PrepareHuman ( false , 4 , 6 ) else
4985: LD_INT 0
4987: PPUSH
4988: LD_INT 4
4990: PPUSH
4991: LD_INT 6
4993: PPUSH
4994: CALL_OW 380
4998: GO 5013
// PrepareHuman ( false , 4 , 8 ) ;
5000: LD_INT 0
5002: PPUSH
5003: LD_INT 4
5005: PPUSH
5006: LD_INT 8
5008: PPUSH
5009: CALL_OW 380
// un = CreateHuman ;
5013: LD_ADDR_VAR 0 3
5017: PUSH
5018: CALL_OW 44
5022: ST_TO_ADDR
// SetDir ( un , 4 ) ;
5023: LD_VAR 0 3
5027: PPUSH
5028: LD_INT 4
5030: PPUSH
5031: CALL_OW 233
// PlaceHumanInUnit ( un , veh ) ;
5035: LD_VAR 0 3
5039: PPUSH
5040: LD_VAR 0 4
5044: PPUSH
5045: CALL_OW 52
// vc_chassis = 14 ;
5049: LD_ADDR_OWVAR 37
5053: PUSH
5054: LD_INT 14
5056: ST_TO_ADDR
// vc_engine = 3 ;
5057: LD_ADDR_OWVAR 39
5061: PUSH
5062: LD_INT 3
5064: ST_TO_ADDR
// vc_control = 1 ;
5065: LD_ADDR_OWVAR 38
5069: PUSH
5070: LD_INT 1
5072: ST_TO_ADDR
// vc_weapon = [ 27 , 26 , 28 ] [ Rand ( 1 , 3 ) ] ;
5073: LD_ADDR_OWVAR 40
5077: PUSH
5078: LD_INT 27
5080: PUSH
5081: LD_INT 26
5083: PUSH
5084: LD_INT 28
5086: PUSH
5087: EMPTY
5088: LIST
5089: LIST
5090: LIST
5091: PUSH
5092: LD_INT 1
5094: PPUSH
5095: LD_INT 3
5097: PPUSH
5098: CALL_OW 12
5102: ARRAY
5103: ST_TO_ADDR
// veh = CreateVehicle ;
5104: LD_ADDR_VAR 0 4
5108: PUSH
5109: CALL_OW 45
5113: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5114: LD_VAR 0 4
5118: PPUSH
5119: LD_INT 4
5121: PPUSH
5122: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
5126: LD_VAR 0 4
5130: PPUSH
5131: LD_INT 4
5133: PPUSH
5134: LD_INT 0
5136: PPUSH
5137: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
5141: LD_EXP 26
5145: PUSH
5146: LD_INT 0
5148: EQUAL
5149: PUSH
5150: LD_EXP 26
5154: PUSH
5155: LD_INT 2
5157: EQUAL
5158: OR
5159: IFFALSE 5176
// PrepareHuman ( false , 2 , 4 ) else
5161: LD_INT 0
5163: PPUSH
5164: LD_INT 2
5166: PPUSH
5167: LD_INT 4
5169: PPUSH
5170: CALL_OW 380
5174: GO 5189
// PrepareHuman ( false , 2 , 8 ) ;
5176: LD_INT 0
5178: PPUSH
5179: LD_INT 2
5181: PPUSH
5182: LD_INT 8
5184: PPUSH
5185: CALL_OW 380
// un = CreateHuman ;
5189: LD_ADDR_VAR 0 3
5193: PUSH
5194: CALL_OW 44
5198: ST_TO_ADDR
// SetDir ( un , 4 ) ;
5199: LD_VAR 0 3
5203: PPUSH
5204: LD_INT 4
5206: PPUSH
5207: CALL_OW 233
// PlaceHumanInUnit ( un , veh ) ;
5211: LD_VAR 0 3
5215: PPUSH
5216: LD_VAR 0 4
5220: PPUSH
5221: CALL_OW 52
// end ;
5225: LD_VAR 0 1
5229: RET
// export function PrepareAttackLegion ; var i , un ; begin
5230: LD_INT 0
5232: PPUSH
5233: PPUSH
5234: PPUSH
// for i = 1 to 4 do
5235: LD_ADDR_VAR 0 2
5239: PUSH
5240: DOUBLE
5241: LD_INT 1
5243: DEC
5244: ST_TO_ADDR
5245: LD_INT 4
5247: PUSH
5248: FOR_TO
5249: IFFALSE 5359
// begin uc_side = 8 ;
5251: LD_ADDR_OWVAR 20
5255: PUSH
5256: LD_INT 8
5258: ST_TO_ADDR
// uc_nation = 2 ;
5259: LD_ADDR_OWVAR 21
5263: PUSH
5264: LD_INT 2
5266: ST_TO_ADDR
// hc_gallery =  ;
5267: LD_ADDR_OWVAR 33
5271: PUSH
5272: LD_STRING 
5274: ST_TO_ADDR
// hc_name =  ;
5275: LD_ADDR_OWVAR 26
5279: PUSH
5280: LD_STRING 
5282: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 8 ] [ Rand ( 1 , 2 ) ] , Rand ( 6 , 8 ) ) ;
5283: LD_INT 0
5285: PPUSH
5286: LD_INT 1
5288: PUSH
5289: LD_INT 8
5291: PUSH
5292: EMPTY
5293: LIST
5294: LIST
5295: PUSH
5296: LD_INT 1
5298: PPUSH
5299: LD_INT 2
5301: PPUSH
5302: CALL_OW 12
5306: ARRAY
5307: PPUSH
5308: LD_INT 6
5310: PPUSH
5311: LD_INT 8
5313: PPUSH
5314: CALL_OW 12
5318: PPUSH
5319: CALL_OW 380
// un = CreateHuman ;
5323: LD_ADDR_VAR 0 3
5327: PUSH
5328: CALL_OW 44
5332: ST_TO_ADDR
// PlaceUnitArea ( un , LegionEnemySpawn , false ) ;
5333: LD_VAR 0 3
5337: PPUSH
5338: LD_INT 19
5340: PPUSH
5341: LD_INT 0
5343: PPUSH
5344: CALL_OW 49
// ComCrawl ( un ) ;
5348: LD_VAR 0 3
5352: PPUSH
5353: CALL_OW 137
// end ;
5357: GO 5248
5359: POP
5360: POP
// SetAttitude ( 1 , 8 , att_enemy , true ) ;
5361: LD_INT 1
5363: PPUSH
5364: LD_INT 8
5366: PPUSH
5367: LD_INT 2
5369: PPUSH
5370: LD_INT 1
5372: PPUSH
5373: CALL_OW 80
// PlaceMines ( MineField , 3 ) ;
5377: LD_INT 20
5379: PPUSH
5380: LD_INT 3
5382: PPUSH
5383: CALL 15430 0 2
// end ; end_of_file
5387: LD_VAR 0 1
5391: RET
// every 1 do var i ;
5392: GO 5394
5394: DISABLE
5395: LD_INT 0
5397: PPUSH
// begin TeleportExit ( ruteleprt , 122 , 145 ) ;
5398: LD_INT 10
5400: PPUSH
5401: LD_INT 122
5403: PPUSH
5404: LD_INT 145
5406: PPUSH
5407: CALL_OW 243
// TeleportExit ( rutp , 84 , 61 ) ;
5411: LD_INT 137
5413: PPUSH
5414: LD_INT 84
5416: PPUSH
5417: LD_INT 61
5419: PPUSH
5420: CALL_OW 243
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5424: LD_EXP 1
5428: PPUSH
5429: CALL_OW 310
5433: PPUSH
5434: CALL_OW 87
// InGameOn ;
5438: CALL_OW 8
// ComMoveXY ( FilterAllUnits ( [ f_side , 1 ] ) , 130 , 103 ) ;
5442: LD_INT 22
5444: PUSH
5445: LD_INT 1
5447: PUSH
5448: EMPTY
5449: LIST
5450: LIST
5451: PPUSH
5452: CALL_OW 69
5456: PPUSH
5457: LD_INT 130
5459: PPUSH
5460: LD_INT 103
5462: PPUSH
5463: CALL_OW 111
// AddComMoveXY ( i , 114 , 102 ) ;
5467: LD_VAR 0 1
5471: PPUSH
5472: LD_INT 114
5474: PPUSH
5475: LD_INT 102
5477: PPUSH
5478: CALL_OW 171
// Say ( JMM , D1-JMM-1 ) ;
5482: LD_EXP 1
5486: PPUSH
5487: LD_STRING D1-JMM-1
5489: PPUSH
5490: CALL_OW 88
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5494: LD_EXP 1
5498: PPUSH
5499: CALL_OW 310
5503: PPUSH
5504: CALL_OW 87
// if IsOk ( Donaldson ) then
5508: LD_EXP 3
5512: PPUSH
5513: CALL_OW 302
5517: IFFALSE 5597
// begin Say ( Donaldson , D1-Don-1 ) ;
5519: LD_EXP 3
5523: PPUSH
5524: LD_STRING D1-Don-1
5526: PPUSH
5527: CALL_OW 88
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5531: LD_EXP 1
5535: PPUSH
5536: CALL_OW 310
5540: PPUSH
5541: CALL_OW 87
// Say ( JMM , D1-JMM-2 ) ;
5545: LD_EXP 1
5549: PPUSH
5550: LD_STRING D1-JMM-2
5552: PPUSH
5553: CALL_OW 88
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5557: LD_EXP 1
5561: PPUSH
5562: CALL_OW 310
5566: PPUSH
5567: CALL_OW 87
// Say ( Donaldson , D1-Don-2 ) ;
5571: LD_EXP 3
5575: PPUSH
5576: LD_STRING D1-Don-2
5578: PPUSH
5579: CALL_OW 88
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5583: LD_EXP 1
5587: PPUSH
5588: CALL_OW 310
5592: PPUSH
5593: CALL_OW 87
// end ; AddComMoveXY ( FilterAllUnits ( [ f_side , 1 ] ) , 110 , 101 ) ;
5597: LD_INT 22
5599: PUSH
5600: LD_INT 1
5602: PUSH
5603: EMPTY
5604: LIST
5605: LIST
5606: PPUSH
5607: CALL_OW 69
5611: PPUSH
5612: LD_INT 110
5614: PPUSH
5615: LD_INT 101
5617: PPUSH
5618: CALL_OW 171
// wait ( 0 0$1 ) ;
5622: LD_INT 35
5624: PPUSH
5625: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5629: LD_EXP 1
5633: PPUSH
5634: CALL_OW 310
5638: PPUSH
5639: CALL_OW 87
// wait ( 0 0$1 ) ;
5643: LD_INT 35
5645: PPUSH
5646: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5650: LD_EXP 1
5654: PPUSH
5655: CALL_OW 310
5659: PPUSH
5660: CALL_OW 87
// wait ( 0 0$1 ) ;
5664: LD_INT 35
5666: PPUSH
5667: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5671: LD_EXP 1
5675: PPUSH
5676: CALL_OW 310
5680: PPUSH
5681: CALL_OW 87
// wait ( 0 0$1 ) ;
5685: LD_INT 35
5687: PPUSH
5688: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5692: LD_EXP 1
5696: PPUSH
5697: CALL_OW 310
5701: PPUSH
5702: CALL_OW 87
// end ;
5706: PPOPN 1
5708: END
// every 0 0$1 trigger SeeXY ( 1 , 102 , 94 ) do var i ;
5709: LD_INT 1
5711: PPUSH
5712: LD_INT 102
5714: PPUSH
5715: LD_INT 94
5717: PPUSH
5718: CALL_OW 293
5722: IFFALSE 5913
5724: GO 5726
5726: DISABLE
5727: LD_INT 0
5729: PPUSH
// begin CenterOnXY ( 102 , 94 ) ;
5730: LD_INT 102
5732: PPUSH
5733: LD_INT 94
5735: PPUSH
5736: CALL_OW 84
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D1-Sol1-2 ,  ) ;
5740: LD_INT 22
5742: PUSH
5743: LD_INT 1
5745: PUSH
5746: EMPTY
5747: LIST
5748: LIST
5749: PUSH
5750: LD_INT 26
5752: PUSH
5753: LD_INT 1
5755: PUSH
5756: EMPTY
5757: LIST
5758: LIST
5759: PUSH
5760: LD_INT 2
5762: PUSH
5763: LD_INT 25
5765: PUSH
5766: LD_INT 1
5768: PUSH
5769: EMPTY
5770: LIST
5771: LIST
5772: PUSH
5773: LD_INT 25
5775: PUSH
5776: LD_INT 2
5778: PUSH
5779: EMPTY
5780: LIST
5781: LIST
5782: PUSH
5783: LD_INT 25
5785: PUSH
5786: LD_INT 3
5788: PUSH
5789: EMPTY
5790: LIST
5791: LIST
5792: PUSH
5793: LD_INT 25
5795: PUSH
5796: LD_INT 4
5798: PUSH
5799: EMPTY
5800: LIST
5801: LIST
5802: PUSH
5803: LD_INT 25
5805: PUSH
5806: LD_INT 5
5808: PUSH
5809: EMPTY
5810: LIST
5811: LIST
5812: PUSH
5813: LD_INT 25
5815: PUSH
5816: LD_INT 8
5818: PUSH
5819: EMPTY
5820: LIST
5821: LIST
5822: PUSH
5823: EMPTY
5824: LIST
5825: LIST
5826: LIST
5827: LIST
5828: LIST
5829: LIST
5830: LIST
5831: PUSH
5832: EMPTY
5833: LIST
5834: LIST
5835: LIST
5836: PPUSH
5837: CALL_OW 69
5841: PPUSH
5842: LD_STRING D1-Sol1-2
5844: PPUSH
5845: LD_STRING 
5847: PPUSH
5848: CALL 12251 0 3
// Say ( JMM , D1-JMM-3 ) ;
5852: LD_EXP 1
5856: PPUSH
5857: LD_STRING D1-JMM-3
5859: PPUSH
5860: CALL_OW 88
// ChangeMissionObjectives ( M1 ) ;
5864: LD_STRING M1
5866: PPUSH
5867: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
5871: LD_ADDR_VAR 0 1
5875: PUSH
5876: LD_INT 22
5878: PUSH
5879: LD_INT 1
5881: PUSH
5882: EMPTY
5883: LIST
5884: LIST
5885: PPUSH
5886: CALL_OW 69
5890: PUSH
5891: FOR_IN
5892: IFFALSE 5911
// ComMoveXY ( i , 95 , 84 ) ;
5894: LD_VAR 0 1
5898: PPUSH
5899: LD_INT 95
5901: PPUSH
5902: LD_INT 84
5904: PPUSH
5905: CALL_OW 111
5909: GO 5891
5911: POP
5912: POP
// end ;
5913: PPOPN 1
5915: END
// every 0 0$1 do var i , bazook_list , your_units , dec ;
5916: GO 5918
5918: DISABLE
5919: LD_INT 0
5921: PPUSH
5922: PPUSH
5923: PPUSH
5924: PPUSH
// begin bazook_list = FilterUnitsInArea ( RussianBazookersSpawn , [ [ f_side , 3 ] , [ f_class , 9 ] ] ) ;
5925: LD_ADDR_VAR 0 2
5929: PUSH
5930: LD_INT 8
5932: PPUSH
5933: LD_INT 22
5935: PUSH
5936: LD_INT 3
5938: PUSH
5939: EMPTY
5940: LIST
5941: LIST
5942: PUSH
5943: LD_INT 25
5945: PUSH
5946: LD_INT 9
5948: PUSH
5949: EMPTY
5950: LIST
5951: LIST
5952: PUSH
5953: EMPTY
5954: LIST
5955: LIST
5956: PPUSH
5957: CALL_OW 70
5961: ST_TO_ADDR
// your_units = FilterAllUnits ( [ [ f_side , 1 ] ] ) ;
5962: LD_ADDR_VAR 0 3
5966: PUSH
5967: LD_INT 22
5969: PUSH
5970: LD_INT 1
5972: PUSH
5973: EMPTY
5974: LIST
5975: LIST
5976: PUSH
5977: EMPTY
5978: LIST
5979: PPUSH
5980: CALL_OW 69
5984: ST_TO_ADDR
// enable ;
5985: ENABLE
// for i in your_units do
5986: LD_ADDR_VAR 0 1
5990: PUSH
5991: LD_VAR 0 3
5995: PUSH
5996: FOR_IN
5997: IFFALSE 6663
// begin if See ( 3 , i ) then
5999: LD_INT 3
6001: PPUSH
6002: LD_VAR 0 1
6006: PPUSH
6007: CALL_OW 292
6011: IFFALSE 6661
// begin disable ;
6013: DISABLE
// ComTimeShift ( bazook_list , 96 , 85 ) ;
6014: LD_VAR 0 2
6018: PPUSH
6019: LD_INT 96
6021: PPUSH
6022: LD_INT 85
6024: PPUSH
6025: CALL_OW 154
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
6029: LD_VAR 0 2
6033: PPUSH
6034: LD_INT 96
6036: PPUSH
6037: LD_INT 85
6039: PPUSH
6040: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
6044: LD_VAR 0 2
6048: PPUSH
6049: LD_INT 96
6051: PPUSH
6052: LD_INT 85
6054: PPUSH
6055: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
6059: LD_VAR 0 2
6063: PPUSH
6064: LD_INT 96
6066: PPUSH
6067: LD_INT 85
6069: PPUSH
6070: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
6074: LD_VAR 0 2
6078: PPUSH
6079: LD_INT 96
6081: PPUSH
6082: LD_INT 85
6084: PPUSH
6085: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
6089: LD_VAR 0 2
6093: PPUSH
6094: LD_INT 96
6096: PPUSH
6097: LD_INT 85
6099: PPUSH
6100: CALL_OW 214
// wait ( 0 0$2 ) ;
6104: LD_INT 70
6106: PPUSH
6107: CALL_OW 67
// Say ( JMM , D1a-JMM-1 ) ;
6111: LD_EXP 1
6115: PPUSH
6116: LD_STRING D1a-JMM-1
6118: PPUSH
6119: CALL_OW 88
// Say ( Donaldson , D1a-Don-1 ) ;
6123: LD_EXP 3
6127: PPUSH
6128: LD_STRING D1a-Don-1
6130: PPUSH
6131: CALL_OW 88
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
6135: LD_ADDR_VAR 0 1
6139: PUSH
6140: LD_INT 22
6142: PUSH
6143: LD_INT 1
6145: PUSH
6146: EMPTY
6147: LIST
6148: LIST
6149: PPUSH
6150: CALL_OW 69
6154: PUSH
6155: FOR_IN
6156: IFFALSE 6175
// ComMoveXY ( i , 109 , 102 ) ;
6158: LD_VAR 0 1
6162: PPUSH
6163: LD_INT 109
6165: PPUSH
6166: LD_INT 102
6168: PPUSH
6169: CALL_OW 111
6173: GO 6155
6175: POP
6176: POP
// Say ( JMM , D1a-JMM-2 ) ;
6177: LD_EXP 1
6181: PPUSH
6182: LD_STRING D1a-JMM-2
6184: PPUSH
6185: CALL_OW 88
// wait ( 0 0$10 ) ;
6189: LD_INT 350
6191: PPUSH
6192: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
6196: LD_EXP 1
6200: PPUSH
6201: CALL_OW 310
6205: PPUSH
6206: CALL_OW 87
// Say ( Donaldson , D1b-Don-1 ) ;
6210: LD_EXP 3
6214: PPUSH
6215: LD_STRING D1b-Don-1
6217: PPUSH
6218: CALL_OW 88
// if IsOk ( Donaldson ) then
6222: LD_EXP 3
6226: PPUSH
6227: CALL_OW 302
6231: IFFALSE 6245
// Say ( JMM , D1b-JMM-1 ) ;
6233: LD_EXP 1
6237: PPUSH
6238: LD_STRING D1b-JMM-1
6240: PPUSH
6241: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D1b-Sol1-1 ,  ) ;
6245: LD_INT 22
6247: PUSH
6248: LD_INT 1
6250: PUSH
6251: EMPTY
6252: LIST
6253: LIST
6254: PUSH
6255: LD_INT 26
6257: PUSH
6258: LD_INT 1
6260: PUSH
6261: EMPTY
6262: LIST
6263: LIST
6264: PUSH
6265: LD_INT 2
6267: PUSH
6268: LD_INT 25
6270: PUSH
6271: LD_INT 1
6273: PUSH
6274: EMPTY
6275: LIST
6276: LIST
6277: PUSH
6278: LD_INT 25
6280: PUSH
6281: LD_INT 2
6283: PUSH
6284: EMPTY
6285: LIST
6286: LIST
6287: PUSH
6288: LD_INT 25
6290: PUSH
6291: LD_INT 3
6293: PUSH
6294: EMPTY
6295: LIST
6296: LIST
6297: PUSH
6298: LD_INT 25
6300: PUSH
6301: LD_INT 4
6303: PUSH
6304: EMPTY
6305: LIST
6306: LIST
6307: PUSH
6308: LD_INT 25
6310: PUSH
6311: LD_INT 5
6313: PUSH
6314: EMPTY
6315: LIST
6316: LIST
6317: PUSH
6318: LD_INT 25
6320: PUSH
6321: LD_INT 8
6323: PUSH
6324: EMPTY
6325: LIST
6326: LIST
6327: PUSH
6328: EMPTY
6329: LIST
6330: LIST
6331: LIST
6332: LIST
6333: LIST
6334: LIST
6335: LIST
6336: PUSH
6337: EMPTY
6338: LIST
6339: LIST
6340: LIST
6341: PPUSH
6342: CALL_OW 69
6346: PPUSH
6347: LD_STRING D1b-Sol1-1
6349: PPUSH
6350: LD_STRING 
6352: PPUSH
6353: CALL 12251 0 3
// Say ( Donaldson , D1b-Don-2 ) ;
6357: LD_EXP 3
6361: PPUSH
6362: LD_STRING D1b-Don-2
6364: PPUSH
6365: CALL_OW 88
// Say ( JMM , D1b-JMM-2 ) ;
6369: LD_EXP 1
6373: PPUSH
6374: LD_STRING D1b-JMM-2
6376: PPUSH
6377: CALL_OW 88
// dec = ShowQuery1 ;
6381: LD_ADDR_VAR 0 4
6385: PUSH
6386: CALL 12720 0 0
6390: ST_TO_ADDR
// if dec = 1 then
6391: LD_VAR 0 4
6395: PUSH
6396: LD_INT 1
6398: EQUAL
6399: IFFALSE 6505
// begin Say ( JMM , D2-JMM-1 ) ;
6401: LD_EXP 1
6405: PPUSH
6406: LD_STRING D2-JMM-1
6408: PPUSH
6409: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
6413: LD_EXP 22
6417: PPUSH
6418: LD_STRING D2-Pow-1
6420: PPUSH
6421: CALL_OW 94
// Say ( JMM , D2a-JMM-1 ) ;
6425: LD_EXP 1
6429: PPUSH
6430: LD_STRING D2a-JMM-1
6432: PPUSH
6433: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-1 ) ;
6437: LD_EXP 22
6441: PPUSH
6442: LD_STRING D2a-Pow-1
6444: PPUSH
6445: CALL_OW 94
// Say ( JMM , D2a-JMM-2 ) ;
6449: LD_EXP 1
6453: PPUSH
6454: LD_STRING D2a-JMM-2
6456: PPUSH
6457: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
6461: LD_EXP 22
6465: PPUSH
6466: LD_STRING D2a-Pow-2
6468: PPUSH
6469: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
6473: LD_EXP 1
6477: PPUSH
6478: LD_STRING D2a-JMM-3
6480: PPUSH
6481: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
6485: LD_EXP 22
6489: PPUSH
6490: LD_STRING D2a-Pow-3
6492: PPUSH
6493: CALL_OW 94
// secondPass = 2 ;
6497: LD_ADDR_EXP 27
6501: PUSH
6502: LD_INT 2
6504: ST_TO_ADDR
// end ; if dec = 2 then
6505: LD_VAR 0 4
6509: PUSH
6510: LD_INT 2
6512: EQUAL
6513: IFFALSE 6607
// begin Say ( JMM , D2-JMM-1 ) ;
6515: LD_EXP 1
6519: PPUSH
6520: LD_STRING D2-JMM-1
6522: PPUSH
6523: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
6527: LD_EXP 22
6531: PPUSH
6532: LD_STRING D2-Pow-1
6534: PPUSH
6535: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
6539: LD_EXP 1
6543: PPUSH
6544: LD_STRING D2b-JMM-1
6546: PPUSH
6547: CALL_OW 88
// SayRadio ( Powell , D2b-Pow-1 ) ;
6551: LD_EXP 22
6555: PPUSH
6556: LD_STRING D2b-Pow-1
6558: PPUSH
6559: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
6563: LD_EXP 1
6567: PPUSH
6568: LD_STRING D2c-JMM-1
6570: PPUSH
6571: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
6575: LD_EXP 22
6579: PPUSH
6580: LD_STRING D2c-Pow-1
6582: PPUSH
6583: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
6587: LD_EXP 1
6591: PPUSH
6592: LD_STRING D2c-JMM-2
6594: PPUSH
6595: CALL_OW 88
// secondPass = 2 ;
6599: LD_ADDR_EXP 27
6603: PUSH
6604: LD_INT 2
6606: ST_TO_ADDR
// end ; if dec = 3 then
6607: LD_VAR 0 4
6611: PUSH
6612: LD_INT 3
6614: EQUAL
6615: IFFALSE 6625
// secondPass = 1 ;
6617: LD_ADDR_EXP 27
6621: PUSH
6622: LD_INT 1
6624: ST_TO_ADDR
// InGameOff ;
6625: CALL_OW 9
// ruAI = 1 ;
6629: LD_ADDR_EXP 41
6633: PUSH
6634: LD_INT 1
6636: ST_TO_ADDR
// SetAttitude ( 1 , 3 , att_enemy , true ) ;
6637: LD_INT 1
6639: PPUSH
6640: LD_INT 3
6642: PPUSH
6643: LD_INT 2
6645: PPUSH
6646: LD_INT 1
6648: PPUSH
6649: CALL_OW 80
// SaveForQuickRestart ;
6653: CALL_OW 22
// exit ;
6657: POP
6658: POP
6659: GO 6665
// end ; end ;
6661: GO 5996
6663: POP
6664: POP
// end ;
6665: PPOPN 4
6667: END
// every 1 1$0 trigger secondPass = 2 do
6668: LD_EXP 27
6672: PUSH
6673: LD_INT 2
6675: EQUAL
6676: IFFALSE 6896
6678: GO 6680
6680: DISABLE
// begin PowellSupport1 ;
6681: CALL 1946 0 0
// DialogueOn ;
6685: CALL_OW 6
// Say ( JMM , DC1-JMM-1 ) ;
6689: LD_EXP 1
6693: PPUSH
6694: LD_STRING DC1-JMM-1
6696: PPUSH
6697: CALL_OW 88
// SayRadio ( Powell , DC1-Pow-1 ) ;
6701: LD_EXP 22
6705: PPUSH
6706: LD_STRING DC1-Pow-1
6708: PPUSH
6709: CALL_OW 94
// DialogueOff ;
6713: CALL_OW 7
// wait ( 3 3$0 ) ;
6717: LD_INT 6300
6719: PPUSH
6720: CALL_OW 67
// PowellSupport2 ;
6724: CALL 2405 0 0
// DialogueOn ;
6728: CALL_OW 6
// Say ( JMM , DC2-JMM-1 ) ;
6732: LD_EXP 1
6736: PPUSH
6737: LD_STRING DC2-JMM-1
6739: PPUSH
6740: CALL_OW 88
// SayRadio ( Powell , DC2-Pow-1 ) ;
6744: LD_EXP 22
6748: PPUSH
6749: LD_STRING DC2-Pow-1
6751: PPUSH
6752: CALL_OW 94
// DialogueOff ;
6756: CALL_OW 7
// wait ( 3 3$00 ) ;
6760: LD_INT 6300
6762: PPUSH
6763: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
6767: LD_INT 35
6769: PPUSH
6770: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) and not FilterUnitsInArea ( OutsideArea1 , [ f_side , 3 ] ) ;
6774: LD_INT 22
6776: PUSH
6777: LD_INT 1
6779: PUSH
6780: EMPTY
6781: LIST
6782: LIST
6783: PUSH
6784: LD_INT 2
6786: PUSH
6787: LD_INT 30
6789: PUSH
6790: LD_INT 0
6792: PUSH
6793: EMPTY
6794: LIST
6795: LIST
6796: PUSH
6797: LD_INT 30
6799: PUSH
6800: LD_INT 1
6802: PUSH
6803: EMPTY
6804: LIST
6805: LIST
6806: PUSH
6807: EMPTY
6808: LIST
6809: LIST
6810: LIST
6811: PUSH
6812: EMPTY
6813: LIST
6814: LIST
6815: PPUSH
6816: CALL_OW 69
6820: PUSH
6821: LD_INT 11
6823: PPUSH
6824: LD_INT 22
6826: PUSH
6827: LD_INT 3
6829: PUSH
6830: EMPTY
6831: LIST
6832: LIST
6833: PPUSH
6834: CALL_OW 70
6838: NOT
6839: AND
6840: IFFALSE 6767
// wait ( 0 0$10 ) ;
6842: LD_INT 350
6844: PPUSH
6845: CALL_OW 67
// Legion ;
6849: CALL 6897 0 0
// wait ( 6 6$0 ) ;
6853: LD_INT 12600
6855: PPUSH
6856: CALL_OW 67
// PowellSupport3 ;
6860: CALL 2939 0 0
// DialogueOn ;
6864: CALL_OW 6
// SayRadio ( Powell , DC3-Pow-1 ) ;
6868: LD_EXP 22
6872: PPUSH
6873: LD_STRING DC3-Pow-1
6875: PPUSH
6876: CALL_OW 94
// Say ( JMM , DC3-JMM-1 ) ;
6880: LD_EXP 1
6884: PPUSH
6885: LD_STRING DC3-JMM-1
6887: PPUSH
6888: CALL_OW 88
// DialogueOff ;
6892: CALL_OW 7
// end ;
6896: END
// export function Legion ; var i , dec1 , dec2 , tmp , tmp2 , tmp3 , crates , oil , siberite , cr , sb , payForNeutral , payForHelp , query1 , query2 ; begin
6897: LD_INT 0
6899: PPUSH
6900: PPUSH
6901: PPUSH
6902: PPUSH
6903: PPUSH
6904: PPUSH
6905: PPUSH
6906: PPUSH
6907: PPUSH
6908: PPUSH
6909: PPUSH
6910: PPUSH
6911: PPUSH
6912: PPUSH
6913: PPUSH
6914: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
6915: LD_ADDR_VAR 0 5
6919: PUSH
6920: LD_INT 22
6922: PUSH
6923: LD_INT 1
6925: PUSH
6926: EMPTY
6927: LIST
6928: LIST
6929: PUSH
6930: LD_INT 21
6932: PUSH
6933: LD_INT 3
6935: PUSH
6936: EMPTY
6937: LIST
6938: LIST
6939: PUSH
6940: LD_INT 2
6942: PUSH
6943: LD_INT 30
6945: PUSH
6946: LD_INT 0
6948: PUSH
6949: EMPTY
6950: LIST
6951: LIST
6952: PUSH
6953: LD_INT 30
6955: PUSH
6956: LD_INT 1
6958: PUSH
6959: EMPTY
6960: LIST
6961: LIST
6962: PUSH
6963: EMPTY
6964: LIST
6965: LIST
6966: LIST
6967: PUSH
6968: EMPTY
6969: LIST
6970: LIST
6971: LIST
6972: PPUSH
6973: CALL_OW 69
6977: ST_TO_ADDR
// crates := 0 ;
6978: LD_ADDR_VAR 0 8
6982: PUSH
6983: LD_INT 0
6985: ST_TO_ADDR
// oil := 0 ;
6986: LD_ADDR_VAR 0 9
6990: PUSH
6991: LD_INT 0
6993: ST_TO_ADDR
// siberite := 0 ;
6994: LD_ADDR_VAR 0 10
6998: PUSH
6999: LD_INT 0
7001: ST_TO_ADDR
// payForNeutral := false ;
7002: LD_ADDR_VAR 0 13
7006: PUSH
7007: LD_INT 0
7009: ST_TO_ADDR
// payForHelp := false ;
7010: LD_ADDR_VAR 0 14
7014: PUSH
7015: LD_INT 0
7017: ST_TO_ADDR
// for i in tmp do
7018: LD_ADDR_VAR 0 2
7022: PUSH
7023: LD_VAR 0 5
7027: PUSH
7028: FOR_IN
7029: IFFALSE 7120
// begin crates := crates + GetResourceType ( GetBase ( i ) , 1 ) ;
7031: LD_ADDR_VAR 0 8
7035: PUSH
7036: LD_VAR 0 8
7040: PUSH
7041: LD_VAR 0 2
7045: PPUSH
7046: CALL_OW 274
7050: PPUSH
7051: LD_INT 1
7053: PPUSH
7054: CALL_OW 275
7058: PLUS
7059: ST_TO_ADDR
// oil := oil + GetResourceType ( GetBase ( i ) , 2 ) ;
7060: LD_ADDR_VAR 0 9
7064: PUSH
7065: LD_VAR 0 9
7069: PUSH
7070: LD_VAR 0 2
7074: PPUSH
7075: CALL_OW 274
7079: PPUSH
7080: LD_INT 2
7082: PPUSH
7083: CALL_OW 275
7087: PLUS
7088: ST_TO_ADDR
// siberite := siberite + GetResourceType ( GetBase ( i ) , 3 ) ;
7089: LD_ADDR_VAR 0 10
7093: PUSH
7094: LD_VAR 0 10
7098: PUSH
7099: LD_VAR 0 2
7103: PPUSH
7104: CALL_OW 274
7108: PPUSH
7109: LD_INT 3
7111: PPUSH
7112: CALL_OW 275
7116: PLUS
7117: ST_TO_ADDR
// end ;
7118: GO 7028
7120: POP
7121: POP
// PrepareKurt ;
7122: CALL 4366 0 0
// if not Kurt then
7126: LD_EXP 24
7130: NOT
7131: IFFALSE 7135
// exit ;
7133: GO 9178
// ComMoveXY ( KurtVeh , 144 , 111 ) ;
7135: LD_EXP 25
7139: PPUSH
7140: LD_INT 144
7142: PPUSH
7143: LD_INT 111
7145: PPUSH
7146: CALL_OW 111
// wait ( 0 0$2 ) ;
7150: LD_INT 70
7152: PPUSH
7153: CALL_OW 67
// PlaceSeeing ( 167 , 121 , 1 , - 10 ) ;
7157: LD_INT 167
7159: PPUSH
7160: LD_INT 121
7162: PPUSH
7163: LD_INT 1
7165: PPUSH
7166: LD_INT 10
7168: NEG
7169: PPUSH
7170: CALL_OW 330
// ComExitVehicle ( Kurt ) ;
7174: LD_EXP 24
7178: PPUSH
7179: CALL_OW 121
// CenterNowOnUnits ( Kurt ) ;
7183: LD_EXP 24
7187: PPUSH
7188: CALL_OW 87
// wait ( 0 0$1 ) ;
7192: LD_INT 35
7194: PPUSH
7195: CALL_OW 67
// DialogueOn ;
7199: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D3-Sol1-1 ,  ) ;
7203: LD_INT 22
7205: PUSH
7206: LD_INT 1
7208: PUSH
7209: EMPTY
7210: LIST
7211: LIST
7212: PUSH
7213: LD_INT 26
7215: PUSH
7216: LD_INT 1
7218: PUSH
7219: EMPTY
7220: LIST
7221: LIST
7222: PUSH
7223: LD_INT 2
7225: PUSH
7226: LD_INT 25
7228: PUSH
7229: LD_INT 1
7231: PUSH
7232: EMPTY
7233: LIST
7234: LIST
7235: PUSH
7236: LD_INT 25
7238: PUSH
7239: LD_INT 2
7241: PUSH
7242: EMPTY
7243: LIST
7244: LIST
7245: PUSH
7246: LD_INT 25
7248: PUSH
7249: LD_INT 3
7251: PUSH
7252: EMPTY
7253: LIST
7254: LIST
7255: PUSH
7256: LD_INT 25
7258: PUSH
7259: LD_INT 4
7261: PUSH
7262: EMPTY
7263: LIST
7264: LIST
7265: PUSH
7266: LD_INT 25
7268: PUSH
7269: LD_INT 5
7271: PUSH
7272: EMPTY
7273: LIST
7274: LIST
7275: PUSH
7276: LD_INT 25
7278: PUSH
7279: LD_INT 8
7281: PUSH
7282: EMPTY
7283: LIST
7284: LIST
7285: PUSH
7286: EMPTY
7287: LIST
7288: LIST
7289: LIST
7290: LIST
7291: LIST
7292: LIST
7293: LIST
7294: PUSH
7295: EMPTY
7296: LIST
7297: LIST
7298: LIST
7299: PPUSH
7300: CALL_OW 69
7304: PPUSH
7305: LD_STRING D3-Sol1-1
7307: PPUSH
7308: LD_STRING 
7310: PPUSH
7311: CALL 12251 0 3
// if KurtStatus then
7315: LD_EXP 26
7319: IFFALSE 7419
// begin Say ( Kurt , D3-Kurt-1 ) ;
7321: LD_EXP 24
7325: PPUSH
7326: LD_STRING D3-Kurt-1
7328: PPUSH
7329: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
7333: LD_EXP 1
7337: PPUSH
7338: LD_STRING D3-JMM-1
7340: PPUSH
7341: CALL_OW 88
// Say ( Kurt , D3-Kurt-2 ) ;
7345: LD_EXP 24
7349: PPUSH
7350: LD_STRING D3-Kurt-2
7352: PPUSH
7353: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
7357: LD_EXP 1
7361: PPUSH
7362: LD_STRING D3-JMM-2
7364: PPUSH
7365: CALL_OW 88
// Say ( Kurt , D3-Kurt-4 ) ;
7369: LD_EXP 24
7373: PPUSH
7374: LD_STRING D3-Kurt-4
7376: PPUSH
7377: CALL_OW 88
// Say ( JMM , D3-JMM-4 ) ;
7381: LD_EXP 1
7385: PPUSH
7386: LD_STRING D3-JMM-4
7388: PPUSH
7389: CALL_OW 88
// Say ( Kurt , D3-Kurt-5 ) ;
7393: LD_EXP 24
7397: PPUSH
7398: LD_STRING D3-Kurt-5
7400: PPUSH
7401: CALL_OW 88
// Say ( Kurt , D3-Kurt-5a ) ;
7405: LD_EXP 24
7409: PPUSH
7410: LD_STRING D3-Kurt-5a
7412: PPUSH
7413: CALL_OW 88
// end else
7417: GO 7515
// begin Say ( Kurt , D3-Kurt-1 ) ;
7419: LD_EXP 24
7423: PPUSH
7424: LD_STRING D3-Kurt-1
7426: PPUSH
7427: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
7431: LD_EXP 1
7435: PPUSH
7436: LD_STRING D3-JMM-1
7438: PPUSH
7439: CALL_OW 88
// Say ( Kurt , D3-Kurt-3 ) ;
7443: LD_EXP 24
7447: PPUSH
7448: LD_STRING D3-Kurt-3
7450: PPUSH
7451: CALL_OW 88
// Say ( JMM , D3-JMM-3 ) ;
7455: LD_EXP 1
7459: PPUSH
7460: LD_STRING D3-JMM-3
7462: PPUSH
7463: CALL_OW 88
// Say ( Kurt , D3-Kurt-4 ) ;
7467: LD_EXP 24
7471: PPUSH
7472: LD_STRING D3-Kurt-4
7474: PPUSH
7475: CALL_OW 88
// Say ( JMM , D3-JMM-4 ) ;
7479: LD_EXP 1
7483: PPUSH
7484: LD_STRING D3-JMM-4
7486: PPUSH
7487: CALL_OW 88
// Say ( Kurt , D3-Kurt-5 ) ;
7491: LD_EXP 24
7495: PPUSH
7496: LD_STRING D3-Kurt-5
7498: PPUSH
7499: CALL_OW 88
// Say ( Kurt , D3-Kurt-5b ) ;
7503: LD_EXP 24
7507: PPUSH
7508: LD_STRING D3-Kurt-5b
7510: PPUSH
7511: CALL_OW 88
// end ; if crates >= [ 120 , 60 ] [ KurtStatus + 1 ] and siberite >= [ 120 , 60 ] [ KurtStatus + 1 ] then
7515: LD_VAR 0 8
7519: PUSH
7520: LD_INT 120
7522: PUSH
7523: LD_INT 60
7525: PUSH
7526: EMPTY
7527: LIST
7528: LIST
7529: PUSH
7530: LD_EXP 26
7534: PUSH
7535: LD_INT 1
7537: PLUS
7538: ARRAY
7539: GREATEREQUAL
7540: PUSH
7541: LD_VAR 0 10
7545: PUSH
7546: LD_INT 120
7548: PUSH
7549: LD_INT 60
7551: PUSH
7552: EMPTY
7553: LIST
7554: LIST
7555: PUSH
7556: LD_EXP 26
7560: PUSH
7561: LD_INT 1
7563: PLUS
7564: ARRAY
7565: GREATEREQUAL
7566: AND
7567: IFFALSE 7619
// dec1 = SelectiveQuery ( [ Q2 , Q2K ] [ KurtStatus + 1 ] , [ 1 , 2 , 3 , 4 ] ) else
7569: LD_ADDR_VAR 0 3
7573: PUSH
7574: LD_STRING Q2
7576: PUSH
7577: LD_STRING Q2K
7579: PUSH
7580: EMPTY
7581: LIST
7582: LIST
7583: PUSH
7584: LD_EXP 26
7588: PUSH
7589: LD_INT 1
7591: PLUS
7592: ARRAY
7593: PPUSH
7594: LD_INT 1
7596: PUSH
7597: LD_INT 2
7599: PUSH
7600: LD_INT 3
7602: PUSH
7603: LD_INT 4
7605: PUSH
7606: EMPTY
7607: LIST
7608: LIST
7609: LIST
7610: LIST
7611: PPUSH
7612: CALL_OW 98
7616: ST_TO_ADDR
7617: GO 7663
// dec1 = SelectiveQuery ( [ Q2 , Q2K ] [ KurtStatus + 1 ] , [ 1 , 3 , 4 ] ) ;
7619: LD_ADDR_VAR 0 3
7623: PUSH
7624: LD_STRING Q2
7626: PUSH
7627: LD_STRING Q2K
7629: PUSH
7630: EMPTY
7631: LIST
7632: LIST
7633: PUSH
7634: LD_EXP 26
7638: PUSH
7639: LD_INT 1
7641: PLUS
7642: ARRAY
7643: PPUSH
7644: LD_INT 1
7646: PUSH
7647: LD_INT 3
7649: PUSH
7650: LD_INT 4
7652: PUSH
7653: EMPTY
7654: LIST
7655: LIST
7656: LIST
7657: PPUSH
7658: CALL_OW 98
7662: ST_TO_ADDR
// if dec1 = 1 then
7663: LD_VAR 0 3
7667: PUSH
7668: LD_INT 1
7670: EQUAL
7671: IFFALSE 7705
// begin Say ( JMM , D3Ka-JMM-1 ) ;
7673: LD_EXP 1
7677: PPUSH
7678: LD_STRING D3Ka-JMM-1
7680: PPUSH
7681: CALL_OW 88
// Say ( Kurt , D3Ka-Kurt-1 ) ;
7685: LD_EXP 24
7689: PPUSH
7690: LD_STRING D3Ka-Kurt-1
7692: PPUSH
7693: CALL_OW 88
// warWithLegion = 1 ;
7697: LD_ADDR_EXP 30
7701: PUSH
7702: LD_INT 1
7704: ST_TO_ADDR
// end ; if dec1 = 2 then
7705: LD_VAR 0 3
7709: PUSH
7710: LD_INT 2
7712: EQUAL
7713: IFFALSE 7797
// begin Say ( JMM , D3Kb-JMM-1 ) ;
7715: LD_EXP 1
7719: PPUSH
7720: LD_STRING D3Kb-JMM-1
7722: PPUSH
7723: CALL_OW 88
// Say ( Kurt , D3Kb-Kurt-1 ) ;
7727: LD_EXP 24
7731: PPUSH
7732: LD_STRING D3Kb-Kurt-1
7734: PPUSH
7735: CALL_OW 88
// cr := [ 120 , 60 ] [ KurtStatus + 1 ] ;
7739: LD_ADDR_VAR 0 11
7743: PUSH
7744: LD_INT 120
7746: PUSH
7747: LD_INT 60
7749: PUSH
7750: EMPTY
7751: LIST
7752: LIST
7753: PUSH
7754: LD_EXP 26
7758: PUSH
7759: LD_INT 1
7761: PLUS
7762: ARRAY
7763: ST_TO_ADDR
// sb := [ 120 , 60 ] [ KurtStatus + 1 ] ;
7764: LD_ADDR_VAR 0 12
7768: PUSH
7769: LD_INT 120
7771: PUSH
7772: LD_INT 60
7774: PUSH
7775: EMPTY
7776: LIST
7777: LIST
7778: PUSH
7779: LD_EXP 26
7783: PUSH
7784: LD_INT 1
7786: PLUS
7787: ARRAY
7788: ST_TO_ADDR
// payForNeutral := true ;
7789: LD_ADDR_VAR 0 13
7793: PUSH
7794: LD_INT 1
7796: ST_TO_ADDR
// end ; if dec1 = 3 then
7797: LD_VAR 0 3
7801: PUSH
7802: LD_INT 3
7804: EQUAL
7805: IFFALSE 8040
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
7807: LD_EXP 1
7811: PPUSH
7812: LD_STRING D3Kc1-JMM-1
7814: PPUSH
7815: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-1 ) ;
7819: LD_EXP 24
7823: PPUSH
7824: LD_STRING D3Kc1-Kurt-1
7826: PPUSH
7827: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
7831: LD_EXP 1
7835: PPUSH
7836: LD_STRING D3Kc1-JMM-2
7838: PPUSH
7839: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-2 ) ;
7843: LD_EXP 24
7847: PPUSH
7848: LD_STRING D3Kc1-Kurt-2
7850: PPUSH
7851: CALL_OW 88
// askSiberite = 1 ;
7855: LD_ADDR_EXP 32
7859: PUSH
7860: LD_INT 1
7862: ST_TO_ADDR
// dec2 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
7863: LD_ADDR_VAR 0 4
7867: PUSH
7868: LD_STRING Q2b
7870: PPUSH
7871: LD_INT 1
7873: PUSH
7874: LD_INT 2
7876: PUSH
7877: LD_INT 3
7879: PUSH
7880: EMPTY
7881: LIST
7882: LIST
7883: LIST
7884: PPUSH
7885: CALL_OW 98
7889: ST_TO_ADDR
// if dec2 = 1 then
7890: LD_VAR 0 4
7894: PUSH
7895: LD_INT 1
7897: EQUAL
7898: IFFALSE 7932
// begin Say ( JMM , D4a-JMM-1 ) ;
7900: LD_EXP 1
7904: PPUSH
7905: LD_STRING D4a-JMM-1
7907: PPUSH
7908: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
7912: LD_EXP 24
7916: PPUSH
7917: LD_STRING D4b-Kurt-1
7919: PPUSH
7920: CALL_OW 88
// warWithLegion = 1 ;
7924: LD_ADDR_EXP 30
7928: PUSH
7929: LD_INT 1
7931: ST_TO_ADDR
// end ; if dec2 = 2 then
7932: LD_VAR 0 4
7936: PUSH
7937: LD_INT 2
7939: EQUAL
7940: IFFALSE 7974
// begin Say ( JMM , D4b-JMM-1 ) ;
7942: LD_EXP 1
7946: PPUSH
7947: LD_STRING D4b-JMM-1
7949: PPUSH
7950: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
7954: LD_EXP 24
7958: PPUSH
7959: LD_STRING D4b-Kurt-1
7961: PPUSH
7962: CALL_OW 88
// warWithLegion = 1 ;
7966: LD_ADDR_EXP 30
7970: PUSH
7971: LD_INT 1
7973: ST_TO_ADDR
// end ; if dec2 = 3 then
7974: LD_VAR 0 4
7978: PUSH
7979: LD_INT 3
7981: EQUAL
7982: IFFALSE 8040
// begin Say ( JMM , D4c-JMM-1 ) ;
7984: LD_EXP 1
7988: PPUSH
7989: LD_STRING D4c-JMM-1
7991: PPUSH
7992: CALL_OW 88
// Say ( Kurt , D4c-Kurt-1 ) ;
7996: LD_EXP 24
8000: PPUSH
8001: LD_STRING D4c-Kurt-1
8003: PPUSH
8004: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
8008: LD_EXP 1
8012: PPUSH
8013: LD_STRING D4c-JMM-2
8015: PPUSH
8016: CALL_OW 88
// Say ( Kurt , D4c-Kurt-2 ) ;
8020: LD_EXP 24
8024: PPUSH
8025: LD_STRING D4c-Kurt-2
8027: PPUSH
8028: CALL_OW 88
// fakeInfo = 1 ;
8032: LD_ADDR_EXP 31
8036: PUSH
8037: LD_INT 1
8039: ST_TO_ADDR
// end ; end ; if dec1 = 4 then
8040: LD_VAR 0 3
8044: PUSH
8045: LD_INT 4
8047: EQUAL
8048: IFFALSE 9086
// begin Say ( JMM , D3Kd-JMM-1 ) ;
8050: LD_EXP 1
8054: PPUSH
8055: LD_STRING D3Kd-JMM-1
8057: PPUSH
8058: CALL_OW 88
// if crates >= [ 200 , 120 ] [ KurtStatus + 1 ] and siberite >= [ 200 , 120 ] [ KurtStatus + 1 ] then
8062: LD_VAR 0 8
8066: PUSH
8067: LD_INT 200
8069: PUSH
8070: LD_INT 120
8072: PUSH
8073: EMPTY
8074: LIST
8075: LIST
8076: PUSH
8077: LD_EXP 26
8081: PUSH
8082: LD_INT 1
8084: PLUS
8085: ARRAY
8086: GREATEREQUAL
8087: PUSH
8088: LD_VAR 0 10
8092: PUSH
8093: LD_INT 200
8095: PUSH
8096: LD_INT 120
8098: PUSH
8099: EMPTY
8100: LIST
8101: LIST
8102: PUSH
8103: LD_EXP 26
8107: PUSH
8108: LD_INT 1
8110: PLUS
8111: ARRAY
8112: GREATEREQUAL
8113: AND
8114: IFFALSE 8166
// dec2 = SelectiveQuery ( [ Q2a , Q2aK ] [ KurtStatus + 1 ] , [ 1 , 2 , 3 , 4 ] ) else
8116: LD_ADDR_VAR 0 4
8120: PUSH
8121: LD_STRING Q2a
8123: PUSH
8124: LD_STRING Q2aK
8126: PUSH
8127: EMPTY
8128: LIST
8129: LIST
8130: PUSH
8131: LD_EXP 26
8135: PUSH
8136: LD_INT 1
8138: PLUS
8139: ARRAY
8140: PPUSH
8141: LD_INT 1
8143: PUSH
8144: LD_INT 2
8146: PUSH
8147: LD_INT 3
8149: PUSH
8150: LD_INT 4
8152: PUSH
8153: EMPTY
8154: LIST
8155: LIST
8156: LIST
8157: LIST
8158: PPUSH
8159: CALL_OW 98
8163: ST_TO_ADDR
8164: GO 8306
// if crates >= [ 120 , 60 ] [ KurtStatus + 1 ] and siberite >= [ 120 , 60 ] [ KurtStatus + 1 ] then
8166: LD_VAR 0 8
8170: PUSH
8171: LD_INT 120
8173: PUSH
8174: LD_INT 60
8176: PUSH
8177: EMPTY
8178: LIST
8179: LIST
8180: PUSH
8181: LD_EXP 26
8185: PUSH
8186: LD_INT 1
8188: PLUS
8189: ARRAY
8190: GREATEREQUAL
8191: PUSH
8192: LD_VAR 0 10
8196: PUSH
8197: LD_INT 120
8199: PUSH
8200: LD_INT 60
8202: PUSH
8203: EMPTY
8204: LIST
8205: LIST
8206: PUSH
8207: LD_EXP 26
8211: PUSH
8212: LD_INT 1
8214: PLUS
8215: ARRAY
8216: GREATEREQUAL
8217: AND
8218: IFFALSE 8266
// dec2 = SelectiveQuery ( [ Q2a , Q2aK ] [ KurtStatus + 1 ] , [ 1 , 2 , 4 ] ) else
8220: LD_ADDR_VAR 0 4
8224: PUSH
8225: LD_STRING Q2a
8227: PUSH
8228: LD_STRING Q2aK
8230: PUSH
8231: EMPTY
8232: LIST
8233: LIST
8234: PUSH
8235: LD_EXP 26
8239: PUSH
8240: LD_INT 1
8242: PLUS
8243: ARRAY
8244: PPUSH
8245: LD_INT 1
8247: PUSH
8248: LD_INT 2
8250: PUSH
8251: LD_INT 4
8253: PUSH
8254: EMPTY
8255: LIST
8256: LIST
8257: LIST
8258: PPUSH
8259: CALL_OW 98
8263: ST_TO_ADDR
8264: GO 8306
// begin dec2 := 0 ;
8266: LD_ADDR_VAR 0 4
8270: PUSH
8271: LD_INT 0
8273: ST_TO_ADDR
// Say ( JMM , D3Kc1-JMM-1 ) ;
8274: LD_EXP 1
8278: PPUSH
8279: LD_STRING D3Kc1-JMM-1
8281: PPUSH
8282: CALL_OW 88
// Say ( Kurt , D3Kc2-Kurt-1 ) ;
8286: LD_EXP 24
8290: PPUSH
8291: LD_STRING D3Kc2-Kurt-1
8293: PPUSH
8294: CALL_OW 88
// warWithLegion := 1 ;
8298: LD_ADDR_EXP 30
8302: PUSH
8303: LD_INT 1
8305: ST_TO_ADDR
// end ; if dec2 = 1 then
8306: LD_VAR 0 4
8310: PUSH
8311: LD_INT 1
8313: EQUAL
8314: IFFALSE 8348
// begin Say ( JMM , D5Ka-JMM-1 ) ;
8316: LD_EXP 1
8320: PPUSH
8321: LD_STRING D5Ka-JMM-1
8323: PPUSH
8324: CALL_OW 88
// Say ( Kurt , D5Ka-Kurt-1 ) ;
8328: LD_EXP 24
8332: PPUSH
8333: LD_STRING D5Ka-Kurt-1
8335: PPUSH
8336: CALL_OW 88
// warWithLegion = 1 ;
8340: LD_ADDR_EXP 30
8344: PUSH
8345: LD_INT 1
8347: ST_TO_ADDR
// end ; if dec2 = 2 then
8348: LD_VAR 0 4
8352: PUSH
8353: LD_INT 2
8355: EQUAL
8356: IFFALSE 8440
// begin Say ( JMM , D3Kb-JMM-1 ) ;
8358: LD_EXP 1
8362: PPUSH
8363: LD_STRING D3Kb-JMM-1
8365: PPUSH
8366: CALL_OW 88
// Say ( Kurt , D3Kb-Kurt-1 ) ;
8370: LD_EXP 24
8374: PPUSH
8375: LD_STRING D3Kb-Kurt-1
8377: PPUSH
8378: CALL_OW 88
// cr := [ 120 , 60 ] [ KurtStatus + 1 ] ;
8382: LD_ADDR_VAR 0 11
8386: PUSH
8387: LD_INT 120
8389: PUSH
8390: LD_INT 60
8392: PUSH
8393: EMPTY
8394: LIST
8395: LIST
8396: PUSH
8397: LD_EXP 26
8401: PUSH
8402: LD_INT 1
8404: PLUS
8405: ARRAY
8406: ST_TO_ADDR
// sb := [ 120 , 60 ] [ KurtStatus + 1 ] ;
8407: LD_ADDR_VAR 0 12
8411: PUSH
8412: LD_INT 120
8414: PUSH
8415: LD_INT 60
8417: PUSH
8418: EMPTY
8419: LIST
8420: LIST
8421: PUSH
8422: LD_EXP 26
8426: PUSH
8427: LD_INT 1
8429: PLUS
8430: ARRAY
8431: ST_TO_ADDR
// payForNeutral := true ;
8432: LD_ADDR_VAR 0 13
8436: PUSH
8437: LD_INT 1
8439: ST_TO_ADDR
// end ; if dec2 = 3 then
8440: LD_VAR 0 4
8444: PUSH
8445: LD_INT 3
8447: EQUAL
8448: IFFALSE 8532
// begin Say ( JMM , D3Ke-JMM-1 ) ;
8450: LD_EXP 1
8454: PPUSH
8455: LD_STRING D3Ke-JMM-1
8457: PPUSH
8458: CALL_OW 88
// Say ( Kurt , D3Ke-Kurt-1 ) ;
8462: LD_EXP 24
8466: PPUSH
8467: LD_STRING D3Ke-Kurt-1
8469: PPUSH
8470: CALL_OW 88
// cr := [ 200 , 120 ] [ KurtStatus + 1 ] ;
8474: LD_ADDR_VAR 0 11
8478: PUSH
8479: LD_INT 200
8481: PUSH
8482: LD_INT 120
8484: PUSH
8485: EMPTY
8486: LIST
8487: LIST
8488: PUSH
8489: LD_EXP 26
8493: PUSH
8494: LD_INT 1
8496: PLUS
8497: ARRAY
8498: ST_TO_ADDR
// sb := [ 200 , 120 ] [ KurtStatus + 1 ] ;
8499: LD_ADDR_VAR 0 12
8503: PUSH
8504: LD_INT 200
8506: PUSH
8507: LD_INT 120
8509: PUSH
8510: EMPTY
8511: LIST
8512: LIST
8513: PUSH
8514: LD_EXP 26
8518: PUSH
8519: LD_INT 1
8521: PLUS
8522: ARRAY
8523: ST_TO_ADDR
// payForHelp := true ;
8524: LD_ADDR_VAR 0 14
8528: PUSH
8529: LD_INT 1
8531: ST_TO_ADDR
// end ; if dec2 = 4 then
8532: LD_VAR 0 4
8536: PUSH
8537: LD_INT 4
8539: EQUAL
8540: IFFALSE 8775
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
8542: LD_EXP 1
8546: PPUSH
8547: LD_STRING D3Kc1-JMM-1
8549: PPUSH
8550: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-1 ) ;
8554: LD_EXP 24
8558: PPUSH
8559: LD_STRING D3Kc1-Kurt-1
8561: PPUSH
8562: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
8566: LD_EXP 1
8570: PPUSH
8571: LD_STRING D3Kc1-JMM-2
8573: PPUSH
8574: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-2 ) ;
8578: LD_EXP 24
8582: PPUSH
8583: LD_STRING D3Kc1-Kurt-2
8585: PPUSH
8586: CALL_OW 88
// askSiberite = 1 ;
8590: LD_ADDR_EXP 32
8594: PUSH
8595: LD_INT 1
8597: ST_TO_ADDR
// dec2 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
8598: LD_ADDR_VAR 0 4
8602: PUSH
8603: LD_STRING Q2b
8605: PPUSH
8606: LD_INT 1
8608: PUSH
8609: LD_INT 2
8611: PUSH
8612: LD_INT 3
8614: PUSH
8615: EMPTY
8616: LIST
8617: LIST
8618: LIST
8619: PPUSH
8620: CALL_OW 98
8624: ST_TO_ADDR
// if dec2 = 1 then
8625: LD_VAR 0 4
8629: PUSH
8630: LD_INT 1
8632: EQUAL
8633: IFFALSE 8667
// begin Say ( JMM , D4a-JMM-1 ) ;
8635: LD_EXP 1
8639: PPUSH
8640: LD_STRING D4a-JMM-1
8642: PPUSH
8643: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
8647: LD_EXP 24
8651: PPUSH
8652: LD_STRING D4b-Kurt-1
8654: PPUSH
8655: CALL_OW 88
// warWithLegion = 1 ;
8659: LD_ADDR_EXP 30
8663: PUSH
8664: LD_INT 1
8666: ST_TO_ADDR
// end ; if dec2 = 2 then
8667: LD_VAR 0 4
8671: PUSH
8672: LD_INT 2
8674: EQUAL
8675: IFFALSE 8709
// begin Say ( JMM , D4b-JMM-1 ) ;
8677: LD_EXP 1
8681: PPUSH
8682: LD_STRING D4b-JMM-1
8684: PPUSH
8685: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
8689: LD_EXP 24
8693: PPUSH
8694: LD_STRING D4b-Kurt-1
8696: PPUSH
8697: CALL_OW 88
// warWithLegion = 1 ;
8701: LD_ADDR_EXP 30
8705: PUSH
8706: LD_INT 1
8708: ST_TO_ADDR
// end ; if dec2 = 3 then
8709: LD_VAR 0 4
8713: PUSH
8714: LD_INT 3
8716: EQUAL
8717: IFFALSE 8775
// begin Say ( JMM , D4c-JMM-1 ) ;
8719: LD_EXP 1
8723: PPUSH
8724: LD_STRING D4c-JMM-1
8726: PPUSH
8727: CALL_OW 88
// Say ( Kurt , D4c-Kurt-1 ) ;
8731: LD_EXP 24
8735: PPUSH
8736: LD_STRING D4c-Kurt-1
8738: PPUSH
8739: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
8743: LD_EXP 1
8747: PPUSH
8748: LD_STRING D4c-JMM-2
8750: PPUSH
8751: CALL_OW 88
// Say ( Kurt , D4c-Kurt-2 ) ;
8755: LD_EXP 24
8759: PPUSH
8760: LD_STRING D4c-Kurt-2
8762: PPUSH
8763: CALL_OW 88
// fakeInfo = 1 ;
8767: LD_ADDR_EXP 31
8771: PUSH
8772: LD_INT 1
8774: ST_TO_ADDR
// end ; end ; if payForNeutral or payForHelp then
8775: LD_VAR 0 13
8779: PUSH
8780: LD_VAR 0 14
8784: OR
8785: IFFALSE 9086
// begin for i in tmp do
8787: LD_ADDR_VAR 0 2
8791: PUSH
8792: LD_VAR 0 5
8796: PUSH
8797: FOR_IN
8798: IFFALSE 9084
// begin tmp2 := GetResourceType ( GetBase ( i ) , 1 ) ;
8800: LD_ADDR_VAR 0 6
8804: PUSH
8805: LD_VAR 0 2
8809: PPUSH
8810: CALL_OW 274
8814: PPUSH
8815: LD_INT 1
8817: PPUSH
8818: CALL_OW 275
8822: ST_TO_ADDR
// tmp3 := GetResourceType ( GetBase ( i ) , 3 ) ;
8823: LD_ADDR_VAR 0 7
8827: PUSH
8828: LD_VAR 0 2
8832: PPUSH
8833: CALL_OW 274
8837: PPUSH
8838: LD_INT 3
8840: PPUSH
8841: CALL_OW 275
8845: ST_TO_ADDR
// if cr then
8846: LD_VAR 0 11
8850: IFFALSE 8964
// begin if tmp2 and tmp2 < cr then
8852: LD_VAR 0 6
8856: PUSH
8857: LD_VAR 0 6
8861: PUSH
8862: LD_VAR 0 11
8866: LESS
8867: AND
8868: IFFALSE 8916
// begin SetResourceType ( GetBase ( i ) , 1 , cr - tmp2 ) ;
8870: LD_VAR 0 2
8874: PPUSH
8875: CALL_OW 274
8879: PPUSH
8880: LD_INT 1
8882: PPUSH
8883: LD_VAR 0 11
8887: PUSH
8888: LD_VAR 0 6
8892: MINUS
8893: PPUSH
8894: CALL_OW 277
// cr := cr - tmp2 ;
8898: LD_ADDR_VAR 0 11
8902: PUSH
8903: LD_VAR 0 11
8907: PUSH
8908: LD_VAR 0 6
8912: MINUS
8913: ST_TO_ADDR
// end else
8914: GO 8964
// if tmp2 > cr then
8916: LD_VAR 0 6
8920: PUSH
8921: LD_VAR 0 11
8925: GREATER
8926: IFFALSE 8964
// begin SetResourceType ( GetBase ( i ) , 1 , tmp2 - cr ) ;
8928: LD_VAR 0 2
8932: PPUSH
8933: CALL_OW 274
8937: PPUSH
8938: LD_INT 1
8940: PPUSH
8941: LD_VAR 0 6
8945: PUSH
8946: LD_VAR 0 11
8950: MINUS
8951: PPUSH
8952: CALL_OW 277
// cr := 0 ;
8956: LD_ADDR_VAR 0 11
8960: PUSH
8961: LD_INT 0
8963: ST_TO_ADDR
// end ; end ; if sb then
8964: LD_VAR 0 12
8968: IFFALSE 9082
// begin if tmp3 and tmp3 < sb then
8970: LD_VAR 0 7
8974: PUSH
8975: LD_VAR 0 7
8979: PUSH
8980: LD_VAR 0 12
8984: LESS
8985: AND
8986: IFFALSE 9034
// begin SetResourceType ( GetBase ( i ) , 3 , sb - tmp3 ) ;
8988: LD_VAR 0 2
8992: PPUSH
8993: CALL_OW 274
8997: PPUSH
8998: LD_INT 3
9000: PPUSH
9001: LD_VAR 0 12
9005: PUSH
9006: LD_VAR 0 7
9010: MINUS
9011: PPUSH
9012: CALL_OW 277
// sb := sb - tmp3 ;
9016: LD_ADDR_VAR 0 12
9020: PUSH
9021: LD_VAR 0 12
9025: PUSH
9026: LD_VAR 0 7
9030: MINUS
9031: ST_TO_ADDR
// end else
9032: GO 9082
// if tmp3 > sb then
9034: LD_VAR 0 7
9038: PUSH
9039: LD_VAR 0 12
9043: GREATER
9044: IFFALSE 9082
// begin SetResourceType ( GetBase ( i ) , 3 , tmp3 - sb ) ;
9046: LD_VAR 0 2
9050: PPUSH
9051: CALL_OW 274
9055: PPUSH
9056: LD_INT 3
9058: PPUSH
9059: LD_VAR 0 7
9063: PUSH
9064: LD_VAR 0 12
9068: MINUS
9069: PPUSH
9070: CALL_OW 277
// sb := 0 ;
9074: LD_ADDR_VAR 0 12
9078: PUSH
9079: LD_INT 0
9081: ST_TO_ADDR
// end ; end ; end ;
9082: GO 8797
9084: POP
9085: POP
// end ; end ; DialogueOff ;
9086: CALL_OW 7
// RemoveSeeing ( 167 , 121 , 1 ) ;
9090: LD_INT 167
9092: PPUSH
9093: LD_INT 121
9095: PPUSH
9096: LD_INT 1
9098: PPUSH
9099: CALL_OW 331
// ComEnterUnit ( Kurt , KurtVeh ) ;
9103: LD_EXP 24
9107: PPUSH
9108: LD_EXP 25
9112: PPUSH
9113: CALL_OW 120
// wait ( 0 0$1 ) ;
9117: LD_INT 35
9119: PPUSH
9120: CALL_OW 67
// ComMoveToArea ( KurtVeh , PlayerSpawn ) ;
9124: LD_EXP 25
9128: PPUSH
9129: LD_INT 4
9131: PPUSH
9132: CALL_OW 113
// wait ( 0 0$3 ) ;
9136: LD_INT 105
9138: PPUSH
9139: CALL_OW 67
// RemoveUnit ( Kurt ) ;
9143: LD_EXP 24
9147: PPUSH
9148: CALL_OW 64
// RemoveUnit ( KurtVeh ) ;
9152: LD_EXP 25
9156: PPUSH
9157: CALL_OW 64
// wait ( 0 0$3 ) ;
9161: LD_INT 105
9163: PPUSH
9164: CALL_OW 67
// if payForHelp then
9168: LD_VAR 0 14
9172: IFFALSE 9178
// PrepareLegionForPlayer ;
9174: CALL 4566 0 0
// end ;
9178: LD_VAR 0 1
9182: RET
// every 0 0$10 trigger warWithLegion = 1 do
9183: LD_EXP 30
9187: PUSH
9188: LD_INT 1
9190: EQUAL
9191: IFFALSE 9200
9193: GO 9195
9195: DISABLE
// PrepareAttackLegion ;
9196: CALL 5230 0 0
9200: END
// every 0 0$1 trigger IsPlaced ( amCargo1 ) and not GetCargo ( amCargo1 , 1 ) and not GetCargo ( amCargo1 , 2 ) and not GetCargo ( amCargo1 , 3 ) do
9201: LD_EXP 15
9205: PPUSH
9206: CALL_OW 305
9210: PUSH
9211: LD_EXP 15
9215: PPUSH
9216: LD_INT 1
9218: PPUSH
9219: CALL_OW 289
9223: NOT
9224: AND
9225: PUSH
9226: LD_EXP 15
9230: PPUSH
9231: LD_INT 2
9233: PPUSH
9234: CALL_OW 289
9238: NOT
9239: AND
9240: PUSH
9241: LD_EXP 15
9245: PPUSH
9246: LD_INT 3
9248: PPUSH
9249: CALL_OW 289
9253: NOT
9254: AND
9255: IFFALSE 9272
9257: GO 9259
9259: DISABLE
// SetSide ( amCargo1 , 4 ) ;
9260: LD_EXP 15
9264: PPUSH
9265: LD_INT 4
9267: PPUSH
9268: CALL_OW 235
9272: END
// every 0 0$1 trigger IsPlaced ( amCargo2 ) and not GetCargo ( amCargo2 , 1 ) and not GetCargo ( amCargo2 , 2 ) and not GetCargo ( amCargo2 , 3 ) do
9273: LD_EXP 16
9277: PPUSH
9278: CALL_OW 305
9282: PUSH
9283: LD_EXP 16
9287: PPUSH
9288: LD_INT 1
9290: PPUSH
9291: CALL_OW 289
9295: NOT
9296: AND
9297: PUSH
9298: LD_EXP 16
9302: PPUSH
9303: LD_INT 2
9305: PPUSH
9306: CALL_OW 289
9310: NOT
9311: AND
9312: PUSH
9313: LD_EXP 16
9317: PPUSH
9318: LD_INT 3
9320: PPUSH
9321: CALL_OW 289
9325: NOT
9326: AND
9327: IFFALSE 9344
9329: GO 9331
9331: DISABLE
// SetSide ( amCargo2 , 4 ) ;
9332: LD_EXP 16
9336: PPUSH
9337: LD_INT 4
9339: PPUSH
9340: CALL_OW 235
9344: END
// every 0 0$1 trigger IsPlaced ( amCargo3 ) and not GetCargo ( amCargo3 , 1 ) and not GetCargo ( amCargo3 , 2 ) and not GetCargo ( amCargo3 , 3 ) do
9345: LD_EXP 17
9349: PPUSH
9350: CALL_OW 305
9354: PUSH
9355: LD_EXP 17
9359: PPUSH
9360: LD_INT 1
9362: PPUSH
9363: CALL_OW 289
9367: NOT
9368: AND
9369: PUSH
9370: LD_EXP 17
9374: PPUSH
9375: LD_INT 2
9377: PPUSH
9378: CALL_OW 289
9382: NOT
9383: AND
9384: PUSH
9385: LD_EXP 17
9389: PPUSH
9390: LD_INT 3
9392: PPUSH
9393: CALL_OW 289
9397: NOT
9398: AND
9399: IFFALSE 9416
9401: GO 9403
9403: DISABLE
// SetSide ( amCargo3 , 4 ) ;
9404: LD_EXP 17
9408: PPUSH
9409: LD_INT 4
9411: PPUSH
9412: CALL_OW 235
9416: END
// every 0 0$1 trigger IsPlaced ( amCargo4 ) and not GetCargo ( amCargo4 , 1 ) and not GetCargo ( amCargo4 , 2 ) and not GetCargo ( amCargo4 , 3 ) do
9417: LD_EXP 18
9421: PPUSH
9422: CALL_OW 305
9426: PUSH
9427: LD_EXP 18
9431: PPUSH
9432: LD_INT 1
9434: PPUSH
9435: CALL_OW 289
9439: NOT
9440: AND
9441: PUSH
9442: LD_EXP 18
9446: PPUSH
9447: LD_INT 2
9449: PPUSH
9450: CALL_OW 289
9454: NOT
9455: AND
9456: PUSH
9457: LD_EXP 18
9461: PPUSH
9462: LD_INT 3
9464: PPUSH
9465: CALL_OW 289
9469: NOT
9470: AND
9471: IFFALSE 9488
9473: GO 9475
9475: DISABLE
// SetSide ( amCargo4 , 4 ) ;
9476: LD_EXP 18
9480: PPUSH
9481: LD_INT 4
9483: PPUSH
9484: CALL_OW 235
9488: END
// every 0 0$1 trigger IsPlaced ( amCargo5 ) and not GetCargo ( amCargo5 , 1 ) and not GetCargo ( amCargo5 , 2 ) and not GetCargo ( amCargo5 , 3 ) and not GetCargo ( amCargo5 , 2 ) do
9489: LD_EXP 19
9493: PPUSH
9494: CALL_OW 305
9498: PUSH
9499: LD_EXP 19
9503: PPUSH
9504: LD_INT 1
9506: PPUSH
9507: CALL_OW 289
9511: NOT
9512: AND
9513: PUSH
9514: LD_EXP 19
9518: PPUSH
9519: LD_INT 2
9521: PPUSH
9522: CALL_OW 289
9526: NOT
9527: AND
9528: PUSH
9529: LD_EXP 19
9533: PPUSH
9534: LD_INT 3
9536: PPUSH
9537: CALL_OW 289
9541: NOT
9542: AND
9543: PUSH
9544: LD_EXP 19
9548: PPUSH
9549: LD_INT 2
9551: PPUSH
9552: CALL_OW 289
9556: NOT
9557: AND
9558: IFFALSE 9575
9560: GO 9562
9562: DISABLE
// SetSide ( amCargo5 , 4 ) ;
9563: LD_EXP 19
9567: PPUSH
9568: LD_INT 4
9570: PPUSH
9571: CALL_OW 235
9575: END
// every 0 0$1 trigger IsPlaced ( amCargo6 ) and not GetCargo ( amCargo6 , 1 ) and not GetCargo ( amCargo6 , 2 ) and not GetCargo ( amCargo6 , 3 ) do
9576: LD_EXP 20
9580: PPUSH
9581: CALL_OW 305
9585: PUSH
9586: LD_EXP 20
9590: PPUSH
9591: LD_INT 1
9593: PPUSH
9594: CALL_OW 289
9598: NOT
9599: AND
9600: PUSH
9601: LD_EXP 20
9605: PPUSH
9606: LD_INT 2
9608: PPUSH
9609: CALL_OW 289
9613: NOT
9614: AND
9615: PUSH
9616: LD_EXP 20
9620: PPUSH
9621: LD_INT 3
9623: PPUSH
9624: CALL_OW 289
9628: NOT
9629: AND
9630: IFFALSE 9647
9632: GO 9634
9634: DISABLE
// SetSide ( amCargo6 , 4 ) ;
9635: LD_EXP 20
9639: PPUSH
9640: LD_INT 4
9642: PPUSH
9643: CALL_OW 235
9647: END
// every 0 0$1 trigger IsPlaced ( amCargo7 ) and not GetCargo ( amCargo7 , 1 ) and not GetCargo ( amCargo7 , 2 ) and not GetCargo ( amCargo7 , 3 ) do
9648: LD_EXP 21
9652: PPUSH
9653: CALL_OW 305
9657: PUSH
9658: LD_EXP 21
9662: PPUSH
9663: LD_INT 1
9665: PPUSH
9666: CALL_OW 289
9670: NOT
9671: AND
9672: PUSH
9673: LD_EXP 21
9677: PPUSH
9678: LD_INT 2
9680: PPUSH
9681: CALL_OW 289
9685: NOT
9686: AND
9687: PUSH
9688: LD_EXP 21
9692: PPUSH
9693: LD_INT 3
9695: PPUSH
9696: CALL_OW 289
9700: NOT
9701: AND
9702: IFFALSE 9719
9704: GO 9706
9706: DISABLE
// SetSide ( amCargo7 , 4 ) ;
9707: LD_EXP 21
9711: PPUSH
9712: LD_INT 4
9714: PPUSH
9715: CALL_OW 235
9719: END
// every 0 0$1 do var i ;
9720: GO 9722
9722: DISABLE
9723: LD_INT 0
9725: PPUSH
// begin enable ;
9726: ENABLE
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
9727: LD_ADDR_VAR 0 1
9731: PUSH
9732: LD_INT 22
9734: PUSH
9735: LD_INT 4
9737: PUSH
9738: EMPTY
9739: LIST
9740: LIST
9741: PPUSH
9742: CALL_OW 69
9746: PUSH
9747: FOR_IN
9748: IFFALSE 9787
// begin ComMoveToArea ( i , PlayerSpawn ) ;
9750: LD_VAR 0 1
9754: PPUSH
9755: LD_INT 4
9757: PPUSH
9758: CALL_OW 113
// if IsInArea ( i , PlayerSpawn ) then
9762: LD_VAR 0 1
9766: PPUSH
9767: LD_INT 4
9769: PPUSH
9770: CALL_OW 308
9774: IFFALSE 9785
// RemoveUnit ( i ) ;
9776: LD_VAR 0 1
9780: PPUSH
9781: CALL_OW 64
// end ;
9785: GO 9747
9787: POP
9788: POP
// end ;
9789: PPOPN 1
9791: END
// every 0 0$1 trigger secondPass = 1 do var i , enemyVehs , dec ;
9792: LD_EXP 27
9796: PUSH
9797: LD_INT 1
9799: EQUAL
9800: IFFALSE 10239
9802: GO 9804
9804: DISABLE
9805: LD_INT 0
9807: PPUSH
9808: PPUSH
9809: PPUSH
// begin enable ;
9810: ENABLE
// enemyVehs = FilterUnitsInArea ( HillArea1 , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ;
9811: LD_ADDR_VAR 0 2
9815: PUSH
9816: LD_INT 12
9818: PPUSH
9819: LD_INT 22
9821: PUSH
9822: LD_INT 3
9824: PUSH
9825: EMPTY
9826: LIST
9827: LIST
9828: PUSH
9829: LD_INT 21
9831: PUSH
9832: LD_INT 2
9834: PUSH
9835: EMPTY
9836: LIST
9837: LIST
9838: PUSH
9839: EMPTY
9840: LIST
9841: LIST
9842: PPUSH
9843: CALL_OW 70
9847: ST_TO_ADDR
// for i in enemyVehs do
9848: LD_ADDR_VAR 0 1
9852: PUSH
9853: LD_VAR 0 2
9857: PUSH
9858: FOR_IN
9859: IFFALSE 10237
// begin if See ( 1 , i ) then
9861: LD_INT 1
9863: PPUSH
9864: LD_VAR 0 1
9868: PPUSH
9869: CALL_OW 292
9873: IFFALSE 10235
// begin disable ;
9875: DISABLE
// DialogueOn ;
9876: CALL_OW 6
// CenterNowOnUnits ( i ) ;
9880: LD_VAR 0 1
9884: PPUSH
9885: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1-Sol1-1 , DT1-FSol1-1 ) ;
9889: LD_INT 22
9891: PUSH
9892: LD_INT 1
9894: PUSH
9895: EMPTY
9896: LIST
9897: LIST
9898: PUSH
9899: LD_INT 26
9901: PUSH
9902: LD_INT 1
9904: PUSH
9905: EMPTY
9906: LIST
9907: LIST
9908: PUSH
9909: LD_INT 2
9911: PUSH
9912: LD_INT 25
9914: PUSH
9915: LD_INT 1
9917: PUSH
9918: EMPTY
9919: LIST
9920: LIST
9921: PUSH
9922: LD_INT 25
9924: PUSH
9925: LD_INT 2
9927: PUSH
9928: EMPTY
9929: LIST
9930: LIST
9931: PUSH
9932: LD_INT 25
9934: PUSH
9935: LD_INT 3
9937: PUSH
9938: EMPTY
9939: LIST
9940: LIST
9941: PUSH
9942: LD_INT 25
9944: PUSH
9945: LD_INT 4
9947: PUSH
9948: EMPTY
9949: LIST
9950: LIST
9951: PUSH
9952: LD_INT 25
9954: PUSH
9955: LD_INT 5
9957: PUSH
9958: EMPTY
9959: LIST
9960: LIST
9961: PUSH
9962: LD_INT 25
9964: PUSH
9965: LD_INT 8
9967: PUSH
9968: EMPTY
9969: LIST
9970: LIST
9971: PUSH
9972: EMPTY
9973: LIST
9974: LIST
9975: LIST
9976: LIST
9977: LIST
9978: LIST
9979: LIST
9980: PUSH
9981: EMPTY
9982: LIST
9983: LIST
9984: LIST
9985: PPUSH
9986: CALL_OW 69
9990: PPUSH
9991: LD_STRING DT1-Sol1-1
9993: PPUSH
9994: LD_STRING DT1-FSol1-1
9996: PPUSH
9997: CALL 12251 0 3
// dec = ShowQuery2 ;
10001: LD_ADDR_VAR 0 3
10005: PUSH
10006: CALL 12794 0 0
10010: ST_TO_ADDR
// if dec = 1 then
10011: LD_VAR 0 3
10015: PUSH
10016: LD_INT 1
10018: EQUAL
10019: IFFALSE 10125
// begin Say ( JMM , D2-JMM-1 ) ;
10021: LD_EXP 1
10025: PPUSH
10026: LD_STRING D2-JMM-1
10028: PPUSH
10029: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
10033: LD_EXP 22
10037: PPUSH
10038: LD_STRING D2-Pow-1
10040: PPUSH
10041: CALL_OW 94
// Say ( JMM , D2a-JMM-1 ) ;
10045: LD_EXP 1
10049: PPUSH
10050: LD_STRING D2a-JMM-1
10052: PPUSH
10053: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-1 ) ;
10057: LD_EXP 22
10061: PPUSH
10062: LD_STRING D2a-Pow-1
10064: PPUSH
10065: CALL_OW 94
// Say ( JMM , D2a-JMM-2 ) ;
10069: LD_EXP 1
10073: PPUSH
10074: LD_STRING D2a-JMM-2
10076: PPUSH
10077: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
10081: LD_EXP 22
10085: PPUSH
10086: LD_STRING D2a-Pow-2
10088: PPUSH
10089: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
10093: LD_EXP 1
10097: PPUSH
10098: LD_STRING D2a-JMM-3
10100: PPUSH
10101: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
10105: LD_EXP 22
10109: PPUSH
10110: LD_STRING D2a-Pow-3
10112: PPUSH
10113: CALL_OW 94
// secondPass = 2 ;
10117: LD_ADDR_EXP 27
10121: PUSH
10122: LD_INT 2
10124: ST_TO_ADDR
// end ; if dec = 2 then
10125: LD_VAR 0 3
10129: PUSH
10130: LD_INT 2
10132: EQUAL
10133: IFFALSE 10227
// begin Say ( JMM , D2-JMM-1 ) ;
10135: LD_EXP 1
10139: PPUSH
10140: LD_STRING D2-JMM-1
10142: PPUSH
10143: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
10147: LD_EXP 22
10151: PPUSH
10152: LD_STRING D2-Pow-1
10154: PPUSH
10155: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
10159: LD_EXP 1
10163: PPUSH
10164: LD_STRING D2b-JMM-1
10166: PPUSH
10167: CALL_OW 88
// SayRadio ( Powell , D2b-Pow-1 ) ;
10171: LD_EXP 22
10175: PPUSH
10176: LD_STRING D2b-Pow-1
10178: PPUSH
10179: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
10183: LD_EXP 1
10187: PPUSH
10188: LD_STRING D2c-JMM-1
10190: PPUSH
10191: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
10195: LD_EXP 22
10199: PPUSH
10200: LD_STRING D2c-Pow-1
10202: PPUSH
10203: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
10207: LD_EXP 1
10211: PPUSH
10212: LD_STRING D2c-JMM-2
10214: PPUSH
10215: CALL_OW 88
// secondPass = 2 ;
10219: LD_ADDR_EXP 27
10223: PUSH
10224: LD_INT 2
10226: ST_TO_ADDR
// end ; DialogueOff ;
10227: CALL_OW 7
// exit ;
10231: POP
10232: POP
10233: GO 10239
// end ; end ;
10235: GO 9858
10237: POP
10238: POP
// end ;
10239: PPOPN 3
10241: END
// every 0 0$1 trigger vehicleTeleported = 1 do var i , vehicles ;
10242: LD_EXP 28
10246: PUSH
10247: LD_INT 1
10249: EQUAL
10250: IFFALSE 10483
10252: GO 10254
10254: DISABLE
10255: LD_INT 0
10257: PPUSH
10258: PPUSH
// begin vehicles = FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_lives , 250 ] ] ) ;
10259: LD_ADDR_VAR 0 2
10263: PUSH
10264: LD_INT 11
10266: PPUSH
10267: LD_INT 22
10269: PUSH
10270: LD_INT 3
10272: PUSH
10273: EMPTY
10274: LIST
10275: LIST
10276: PUSH
10277: LD_INT 24
10279: PUSH
10280: LD_INT 250
10282: PUSH
10283: EMPTY
10284: LIST
10285: LIST
10286: PUSH
10287: EMPTY
10288: LIST
10289: LIST
10290: PPUSH
10291: CALL_OW 70
10295: ST_TO_ADDR
// enable ;
10296: ENABLE
// for i in vehicles do
10297: LD_ADDR_VAR 0 1
10301: PUSH
10302: LD_VAR 0 2
10306: PUSH
10307: FOR_IN
10308: IFFALSE 10481
// begin if See ( 1 , i ) and vehicleTeleported = 1 and tpCounter <= 4 then
10310: LD_INT 1
10312: PPUSH
10313: LD_VAR 0 1
10317: PPUSH
10318: CALL_OW 292
10322: PUSH
10323: LD_EXP 28
10327: PUSH
10328: LD_INT 1
10330: EQUAL
10331: AND
10332: PUSH
10333: LD_EXP 29
10337: PUSH
10338: LD_INT 4
10340: LESSEQUAL
10341: AND
10342: IFFALSE 10479
// begin disable ;
10344: DISABLE
// DialogueOn ;
10345: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1-Sol1-1 , DT1-FSol1-1 ) ;
10349: LD_INT 22
10351: PUSH
10352: LD_INT 1
10354: PUSH
10355: EMPTY
10356: LIST
10357: LIST
10358: PUSH
10359: LD_INT 26
10361: PUSH
10362: LD_INT 1
10364: PUSH
10365: EMPTY
10366: LIST
10367: LIST
10368: PUSH
10369: LD_INT 2
10371: PUSH
10372: LD_INT 25
10374: PUSH
10375: LD_INT 1
10377: PUSH
10378: EMPTY
10379: LIST
10380: LIST
10381: PUSH
10382: LD_INT 25
10384: PUSH
10385: LD_INT 2
10387: PUSH
10388: EMPTY
10389: LIST
10390: LIST
10391: PUSH
10392: LD_INT 25
10394: PUSH
10395: LD_INT 3
10397: PUSH
10398: EMPTY
10399: LIST
10400: LIST
10401: PUSH
10402: LD_INT 25
10404: PUSH
10405: LD_INT 4
10407: PUSH
10408: EMPTY
10409: LIST
10410: LIST
10411: PUSH
10412: LD_INT 25
10414: PUSH
10415: LD_INT 5
10417: PUSH
10418: EMPTY
10419: LIST
10420: LIST
10421: PUSH
10422: LD_INT 25
10424: PUSH
10425: LD_INT 8
10427: PUSH
10428: EMPTY
10429: LIST
10430: LIST
10431: PUSH
10432: EMPTY
10433: LIST
10434: LIST
10435: LIST
10436: LIST
10437: LIST
10438: LIST
10439: LIST
10440: PUSH
10441: EMPTY
10442: LIST
10443: LIST
10444: LIST
10445: PPUSH
10446: CALL_OW 69
10450: PPUSH
10451: LD_STRING DT1-Sol1-1
10453: PPUSH
10454: LD_STRING DT1-FSol1-1
10456: PPUSH
10457: CALL 12251 0 3
// Say ( JMM , DT1-JMM-1 ) ;
10461: LD_EXP 1
10465: PPUSH
10466: LD_STRING DT1-JMM-1
10468: PPUSH
10469: CALL_OW 88
// DialogueOff ;
10473: CALL_OW 7
// break ;
10477: GO 10481
// end ; end ;
10479: GO 10307
10481: POP
10482: POP
// end ;
10483: PPOPN 2
10485: END
// every 0 0$10 trigger vehicleTeleported = 1 and FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_lives , 251 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) = 0 and tpCounter do
10486: LD_EXP 28
10490: PUSH
10491: LD_INT 1
10493: EQUAL
10494: PUSH
10495: LD_INT 11
10497: PPUSH
10498: LD_INT 22
10500: PUSH
10501: LD_INT 3
10503: PUSH
10504: EMPTY
10505: LIST
10506: LIST
10507: PUSH
10508: LD_INT 24
10510: PUSH
10511: LD_INT 251
10513: PUSH
10514: EMPTY
10515: LIST
10516: LIST
10517: PUSH
10518: LD_INT 2
10520: PUSH
10521: LD_INT 21
10523: PUSH
10524: LD_INT 2
10526: PUSH
10527: EMPTY
10528: LIST
10529: LIST
10530: PUSH
10531: LD_INT 21
10533: PUSH
10534: LD_INT 1
10536: PUSH
10537: EMPTY
10538: LIST
10539: LIST
10540: PUSH
10541: EMPTY
10542: LIST
10543: LIST
10544: LIST
10545: PUSH
10546: EMPTY
10547: LIST
10548: LIST
10549: LIST
10550: PPUSH
10551: CALL_OW 70
10555: PUSH
10556: LD_INT 0
10558: EQUAL
10559: AND
10560: PUSH
10561: LD_EXP 29
10565: AND
10566: IFFALSE 10723
10568: GO 10570
10570: DISABLE
// begin vehicleTeleported = 2 ;
10571: LD_ADDR_EXP 28
10575: PUSH
10576: LD_INT 2
10578: ST_TO_ADDR
// DialogueOn ;
10579: CALL_OW 6
// Say ( JMM , DT1a-JMM-1 ) ;
10583: LD_EXP 1
10587: PPUSH
10588: LD_STRING DT1a-JMM-1
10590: PPUSH
10591: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1a-Sol1-1 , DT1a-FSol1-1 ) ;
10595: LD_INT 22
10597: PUSH
10598: LD_INT 1
10600: PUSH
10601: EMPTY
10602: LIST
10603: LIST
10604: PUSH
10605: LD_INT 26
10607: PUSH
10608: LD_INT 1
10610: PUSH
10611: EMPTY
10612: LIST
10613: LIST
10614: PUSH
10615: LD_INT 2
10617: PUSH
10618: LD_INT 25
10620: PUSH
10621: LD_INT 1
10623: PUSH
10624: EMPTY
10625: LIST
10626: LIST
10627: PUSH
10628: LD_INT 25
10630: PUSH
10631: LD_INT 2
10633: PUSH
10634: EMPTY
10635: LIST
10636: LIST
10637: PUSH
10638: LD_INT 25
10640: PUSH
10641: LD_INT 3
10643: PUSH
10644: EMPTY
10645: LIST
10646: LIST
10647: PUSH
10648: LD_INT 25
10650: PUSH
10651: LD_INT 4
10653: PUSH
10654: EMPTY
10655: LIST
10656: LIST
10657: PUSH
10658: LD_INT 25
10660: PUSH
10661: LD_INT 5
10663: PUSH
10664: EMPTY
10665: LIST
10666: LIST
10667: PUSH
10668: LD_INT 25
10670: PUSH
10671: LD_INT 8
10673: PUSH
10674: EMPTY
10675: LIST
10676: LIST
10677: PUSH
10678: EMPTY
10679: LIST
10680: LIST
10681: LIST
10682: LIST
10683: LIST
10684: LIST
10685: LIST
10686: PUSH
10687: EMPTY
10688: LIST
10689: LIST
10690: LIST
10691: PPUSH
10692: CALL_OW 69
10696: PPUSH
10697: LD_STRING DT1a-Sol1-1
10699: PPUSH
10700: LD_STRING DT1a-FSol1-1
10702: PPUSH
10703: CALL 12251 0 3
// Say ( JMM , DT1a-JMM-2 ) ;
10707: LD_EXP 1
10711: PPUSH
10712: LD_STRING DT1a-JMM-2
10714: PPUSH
10715: CALL_OW 88
// DialogueOff ;
10719: CALL_OW 7
// end ;
10723: END
// every 0 0$2 trigger vehicleTeleported = 3 and FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_see , 1 ] ] ) do var i , vehicles , speaker ;
10724: LD_EXP 28
10728: PUSH
10729: LD_INT 3
10731: EQUAL
10732: PUSH
10733: LD_INT 11
10735: PPUSH
10736: LD_INT 22
10738: PUSH
10739: LD_INT 3
10741: PUSH
10742: EMPTY
10743: LIST
10744: LIST
10745: PUSH
10746: LD_INT 101
10748: PUSH
10749: LD_INT 1
10751: PUSH
10752: EMPTY
10753: LIST
10754: LIST
10755: PUSH
10756: EMPTY
10757: LIST
10758: LIST
10759: PPUSH
10760: CALL_OW 70
10764: AND
10765: IFFALSE 11046
10767: GO 10769
10769: DISABLE
10770: LD_INT 0
10772: PPUSH
10773: PPUSH
10774: PPUSH
// begin wait ( 0 0$0.3 ) ;
10775: LD_INT 10
10777: PPUSH
10778: CALL_OW 67
// DialogueOn ;
10782: CALL_OW 6
// speaker := DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT2-Sol1-1 , DT2-FSol1-1 ) ;
10786: LD_ADDR_VAR 0 3
10790: PUSH
10791: LD_INT 22
10793: PUSH
10794: LD_INT 1
10796: PUSH
10797: EMPTY
10798: LIST
10799: LIST
10800: PUSH
10801: LD_INT 26
10803: PUSH
10804: LD_INT 1
10806: PUSH
10807: EMPTY
10808: LIST
10809: LIST
10810: PUSH
10811: LD_INT 2
10813: PUSH
10814: LD_INT 25
10816: PUSH
10817: LD_INT 1
10819: PUSH
10820: EMPTY
10821: LIST
10822: LIST
10823: PUSH
10824: LD_INT 25
10826: PUSH
10827: LD_INT 2
10829: PUSH
10830: EMPTY
10831: LIST
10832: LIST
10833: PUSH
10834: LD_INT 25
10836: PUSH
10837: LD_INT 3
10839: PUSH
10840: EMPTY
10841: LIST
10842: LIST
10843: PUSH
10844: LD_INT 25
10846: PUSH
10847: LD_INT 4
10849: PUSH
10850: EMPTY
10851: LIST
10852: LIST
10853: PUSH
10854: LD_INT 25
10856: PUSH
10857: LD_INT 5
10859: PUSH
10860: EMPTY
10861: LIST
10862: LIST
10863: PUSH
10864: LD_INT 25
10866: PUSH
10867: LD_INT 8
10869: PUSH
10870: EMPTY
10871: LIST
10872: LIST
10873: PUSH
10874: EMPTY
10875: LIST
10876: LIST
10877: LIST
10878: LIST
10879: LIST
10880: LIST
10881: LIST
10882: PUSH
10883: EMPTY
10884: LIST
10885: LIST
10886: LIST
10887: PPUSH
10888: CALL_OW 69
10892: PPUSH
10893: LD_STRING DT2-Sol1-1
10895: PPUSH
10896: LD_STRING DT2-FSol1-1
10898: PPUSH
10899: CALL 12251 0 3
10903: ST_TO_ADDR
// DialogueOff ;
10904: CALL_OW 7
// repeat wait ( 0 0$1 ) ;
10908: LD_INT 35
10910: PPUSH
10911: CALL_OW 67
// until FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_lives , 250 ] ] ) = 0 ;
10915: LD_INT 11
10917: PPUSH
10918: LD_INT 22
10920: PUSH
10921: LD_INT 3
10923: PUSH
10924: EMPTY
10925: LIST
10926: LIST
10927: PUSH
10928: LD_INT 24
10930: PUSH
10931: LD_INT 250
10933: PUSH
10934: EMPTY
10935: LIST
10936: LIST
10937: PUSH
10938: EMPTY
10939: LIST
10940: LIST
10941: PPUSH
10942: CALL_OW 70
10946: PUSH
10947: LD_INT 0
10949: EQUAL
10950: IFFALSE 10908
// wait ( 0 0$2 ) ;
10952: LD_INT 70
10954: PPUSH
10955: CALL_OW 67
// vehicleTeleported = 4 ;
10959: LD_ADDR_EXP 28
10963: PUSH
10964: LD_INT 4
10966: ST_TO_ADDR
// DialogueOn ;
10967: CALL_OW 6
// Say ( JMM , DT2a-JMM-1 ) ;
10971: LD_EXP 1
10975: PPUSH
10976: LD_STRING DT2a-JMM-1
10978: PPUSH
10979: CALL_OW 88
// if speaker then
10983: LD_VAR 0 3
10987: IFFALSE 11030
// if GetSex ( speaker ) = 1 then
10989: LD_VAR 0 3
10993: PPUSH
10994: CALL_OW 258
10998: PUSH
10999: LD_INT 1
11001: EQUAL
11002: IFFALSE 11018
// Say ( speaker , DT2a-Sol1-1 ) else
11004: LD_VAR 0 3
11008: PPUSH
11009: LD_STRING DT2a-Sol1-1
11011: PPUSH
11012: CALL_OW 88
11016: GO 11030
// Say ( speaker , DT2a-FSol1-1 ) ;
11018: LD_VAR 0 3
11022: PPUSH
11023: LD_STRING DT2a-FSol1-1
11025: PPUSH
11026: CALL_OW 88
// Say ( Donaldson , DT2a-Don-1 ) ;
11030: LD_EXP 3
11034: PPUSH
11035: LD_STRING DT2a-Don-1
11037: PPUSH
11038: CALL_OW 88
// DialogueOff ;
11042: CALL_OW 7
// end ;
11046: PPOPN 3
11048: END
// every 0 0$1 trigger SeeXY ( 1 , 45 , 74 ) do
11049: LD_INT 1
11051: PPUSH
11052: LD_INT 45
11054: PPUSH
11055: LD_INT 74
11057: PPUSH
11058: CALL_OW 293
11062: IFFALSE 11226
11064: GO 11066
11066: DISABLE
// begin DialogueOn ;
11067: CALL_OW 6
// CenterOnXY ( 36 , 55 ) ;
11071: LD_INT 36
11073: PPUSH
11074: LD_INT 55
11076: PPUSH
11077: CALL_OW 84
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D5-Sol1-1 , D5-FSol1- ) ;
11081: LD_INT 22
11083: PUSH
11084: LD_INT 1
11086: PUSH
11087: EMPTY
11088: LIST
11089: LIST
11090: PUSH
11091: LD_INT 26
11093: PUSH
11094: LD_INT 1
11096: PUSH
11097: EMPTY
11098: LIST
11099: LIST
11100: PUSH
11101: LD_INT 2
11103: PUSH
11104: LD_INT 25
11106: PUSH
11107: LD_INT 1
11109: PUSH
11110: EMPTY
11111: LIST
11112: LIST
11113: PUSH
11114: LD_INT 25
11116: PUSH
11117: LD_INT 2
11119: PUSH
11120: EMPTY
11121: LIST
11122: LIST
11123: PUSH
11124: LD_INT 25
11126: PUSH
11127: LD_INT 3
11129: PUSH
11130: EMPTY
11131: LIST
11132: LIST
11133: PUSH
11134: LD_INT 25
11136: PUSH
11137: LD_INT 4
11139: PUSH
11140: EMPTY
11141: LIST
11142: LIST
11143: PUSH
11144: LD_INT 25
11146: PUSH
11147: LD_INT 5
11149: PUSH
11150: EMPTY
11151: LIST
11152: LIST
11153: PUSH
11154: LD_INT 25
11156: PUSH
11157: LD_INT 8
11159: PUSH
11160: EMPTY
11161: LIST
11162: LIST
11163: PUSH
11164: EMPTY
11165: LIST
11166: LIST
11167: LIST
11168: LIST
11169: LIST
11170: LIST
11171: LIST
11172: PUSH
11173: EMPTY
11174: LIST
11175: LIST
11176: LIST
11177: PPUSH
11178: CALL_OW 69
11182: PPUSH
11183: LD_STRING D5-Sol1-1
11185: PPUSH
11186: LD_STRING D5-FSol1-
11188: PPUSH
11189: CALL 12251 0 3
// if warWithLegion and IsOk ( Donaldson ) then
11193: LD_EXP 30
11197: PUSH
11198: LD_EXP 3
11202: PPUSH
11203: CALL_OW 302
11207: AND
11208: IFFALSE 11222
// Say ( Donaldson , D5-Don-1 ) ;
11210: LD_EXP 3
11214: PPUSH
11215: LD_STRING D5-Don-1
11217: PPUSH
11218: CALL_OW 88
// DialogueOff ;
11222: CALL_OW 7
// end ;
11226: END
// every 0 0$1 trigger See ( 1 , ruteleprt ) or See ( 1 , rutp ) do
11227: LD_INT 1
11229: PPUSH
11230: LD_INT 10
11232: PPUSH
11233: CALL_OW 292
11237: PUSH
11238: LD_INT 1
11240: PPUSH
11241: LD_INT 137
11243: PPUSH
11244: CALL_OW 292
11248: OR
11249: IFFALSE 11393
11251: GO 11253
11253: DISABLE
// begin DialogueOn ;
11254: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT3-Sol1-1 , DT3-FSol1-1 ) ;
11258: LD_INT 22
11260: PUSH
11261: LD_INT 1
11263: PUSH
11264: EMPTY
11265: LIST
11266: LIST
11267: PUSH
11268: LD_INT 26
11270: PUSH
11271: LD_INT 1
11273: PUSH
11274: EMPTY
11275: LIST
11276: LIST
11277: PUSH
11278: LD_INT 2
11280: PUSH
11281: LD_INT 25
11283: PUSH
11284: LD_INT 1
11286: PUSH
11287: EMPTY
11288: LIST
11289: LIST
11290: PUSH
11291: LD_INT 25
11293: PUSH
11294: LD_INT 2
11296: PUSH
11297: EMPTY
11298: LIST
11299: LIST
11300: PUSH
11301: LD_INT 25
11303: PUSH
11304: LD_INT 3
11306: PUSH
11307: EMPTY
11308: LIST
11309: LIST
11310: PUSH
11311: LD_INT 25
11313: PUSH
11314: LD_INT 4
11316: PUSH
11317: EMPTY
11318: LIST
11319: LIST
11320: PUSH
11321: LD_INT 25
11323: PUSH
11324: LD_INT 5
11326: PUSH
11327: EMPTY
11328: LIST
11329: LIST
11330: PUSH
11331: LD_INT 25
11333: PUSH
11334: LD_INT 8
11336: PUSH
11337: EMPTY
11338: LIST
11339: LIST
11340: PUSH
11341: EMPTY
11342: LIST
11343: LIST
11344: LIST
11345: LIST
11346: LIST
11347: LIST
11348: LIST
11349: PUSH
11350: EMPTY
11351: LIST
11352: LIST
11353: LIST
11354: PPUSH
11355: CALL_OW 69
11359: PPUSH
11360: LD_STRING DT3-Sol1-1
11362: PPUSH
11363: LD_STRING DT3-FSol1-1
11365: PPUSH
11366: CALL 12251 0 3
// Say ( JMM , DT3-JMM-1 ) ;
11370: LD_EXP 1
11374: PPUSH
11375: LD_STRING DT3-JMM-1
11377: PPUSH
11378: CALL_OW 88
// DialogueOff ;
11382: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
11386: LD_STRING M2
11388: PPUSH
11389: CALL_OW 337
// end ;
11393: END
// every 0 0$1 trigger ruEscape = 0 do var i ;
11394: LD_EXP 42
11398: PUSH
11399: LD_INT 0
11401: EQUAL
11402: IFFALSE 11485
11404: GO 11406
11406: DISABLE
11407: LD_INT 0
11409: PPUSH
// begin enable ;
11410: ENABLE
// for i in FilterUnitsInArea ( RuEastBase , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) do
11411: LD_ADDR_VAR 0 1
11415: PUSH
11416: LD_INT 10
11418: PPUSH
11419: LD_INT 22
11421: PUSH
11422: LD_INT 3
11424: PUSH
11425: EMPTY
11426: LIST
11427: LIST
11428: PUSH
11429: LD_INT 21
11431: PUSH
11432: LD_INT 2
11434: PUSH
11435: EMPTY
11436: LIST
11437: LIST
11438: PUSH
11439: LD_INT 58
11441: PUSH
11442: EMPTY
11443: LIST
11444: PUSH
11445: EMPTY
11446: LIST
11447: LIST
11448: LIST
11449: PPUSH
11450: CALL_OW 70
11454: PUSH
11455: FOR_IN
11456: IFFALSE 11483
// if GetLives ( i ) < 1000 then
11458: LD_VAR 0 1
11462: PPUSH
11463: CALL_OW 256
11467: PUSH
11468: LD_INT 1000
11470: LESS
11471: IFFALSE 11481
// ruEscape = 1 ;
11473: LD_ADDR_EXP 42
11477: PUSH
11478: LD_INT 1
11480: ST_TO_ADDR
11481: GO 11455
11483: POP
11484: POP
// end ;
11485: PPOPN 1
11487: END
// every 0 0$1 trigger IsDying ( ruheadlab ) or IsDying ( rueastdepot ) or FilterUnitsInArea ( EscapeTriggerArea , [ f_side , 1 ] ) > 0 or ruEscape = 1 do var i , j , vehs ;
11488: LD_INT 3
11490: PPUSH
11491: CALL_OW 303
11495: PUSH
11496: LD_INT 4
11498: PPUSH
11499: CALL_OW 303
11503: OR
11504: PUSH
11505: LD_INT 22
11507: PPUSH
11508: LD_INT 22
11510: PUSH
11511: LD_INT 1
11513: PUSH
11514: EMPTY
11515: LIST
11516: LIST
11517: PPUSH
11518: CALL_OW 70
11522: PUSH
11523: LD_INT 0
11525: GREATER
11526: OR
11527: PUSH
11528: LD_EXP 42
11532: PUSH
11533: LD_INT 1
11535: EQUAL
11536: OR
11537: IFFALSE 11768
11539: GO 11541
11541: DISABLE
11542: LD_INT 0
11544: PPUSH
11545: PPUSH
11546: PPUSH
// begin ruAI = 0 ;
11547: LD_ADDR_EXP 41
11551: PUSH
11552: LD_INT 0
11554: ST_TO_ADDR
// vehs = FilterUnitsInArea ( RuEastBase , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
11555: LD_ADDR_VAR 0 3
11559: PUSH
11560: LD_INT 10
11562: PPUSH
11563: LD_INT 22
11565: PUSH
11566: LD_INT 3
11568: PUSH
11569: EMPTY
11570: LIST
11571: LIST
11572: PUSH
11573: LD_INT 21
11575: PUSH
11576: LD_INT 2
11578: PUSH
11579: EMPTY
11580: LIST
11581: LIST
11582: PUSH
11583: LD_INT 58
11585: PUSH
11586: EMPTY
11587: LIST
11588: PUSH
11589: EMPTY
11590: LIST
11591: LIST
11592: LIST
11593: PPUSH
11594: CALL_OW 70
11598: ST_TO_ADDR
// ComExitBuilding ( RuScientists ) ;
11599: LD_EXP 34
11603: PPUSH
11604: CALL_OW 122
// wait ( 0 0$1 ) ;
11608: LD_INT 35
11610: PPUSH
11611: CALL_OW 67
// DialogueOn ;
11615: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
11619: LD_EXP 1
11623: PPUSH
11624: LD_STRING D6-JMM-1
11626: PPUSH
11627: CALL_OW 88
// DialogueOff ;
11631: CALL_OW 7
// if vehs > 0 then
11635: LD_VAR 0 3
11639: PUSH
11640: LD_INT 0
11642: GREATER
11643: IFFALSE 11713
// for i := 1 to RuScientists do
11645: LD_ADDR_VAR 0 1
11649: PUSH
11650: DOUBLE
11651: LD_INT 1
11653: DEC
11654: ST_TO_ADDR
11655: LD_EXP 34
11659: PUSH
11660: FOR_TO
11661: IFFALSE 11709
// ComEnterUnit ( UnitFilter ( RuScientists [ i ] , [ f_not , [ f_hastask ] ] ) , vehs [ i ] ) else
11663: LD_EXP 34
11667: PUSH
11668: LD_VAR 0 1
11672: ARRAY
11673: PPUSH
11674: LD_INT 3
11676: PUSH
11677: LD_INT 60
11679: PUSH
11680: EMPTY
11681: LIST
11682: PUSH
11683: EMPTY
11684: LIST
11685: LIST
11686: PPUSH
11687: CALL_OW 72
11691: PPUSH
11692: LD_VAR 0 3
11696: PUSH
11697: LD_VAR 0 1
11701: ARRAY
11702: PPUSH
11703: CALL_OW 120
11707: GO 11660
11709: POP
11710: POP
11711: GO 11768
// ComMoveToArea ( UnitFilter ( RuScientists [ i ] , [ f_not , [ f_hastask ] ] ) , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) ;
11713: LD_EXP 34
11717: PUSH
11718: LD_VAR 0 1
11722: ARRAY
11723: PPUSH
11724: LD_INT 3
11726: PUSH
11727: LD_INT 60
11729: PUSH
11730: EMPTY
11731: LIST
11732: PUSH
11733: EMPTY
11734: LIST
11735: LIST
11736: PPUSH
11737: CALL_OW 72
11741: PPUSH
11742: LD_INT 13
11744: PUSH
11745: LD_INT 14
11747: PUSH
11748: EMPTY
11749: LIST
11750: LIST
11751: PUSH
11752: LD_INT 1
11754: PPUSH
11755: LD_INT 2
11757: PPUSH
11758: CALL_OW 12
11762: ARRAY
11763: PPUSH
11764: CALL_OW 113
// end ;
11768: PPOPN 3
11770: END
// every 0 0$0.3 trigger ruAI = 0 do var i , unit , veh , tmp ;
11771: LD_EXP 41
11775: PUSH
11776: LD_INT 0
11778: EQUAL
11779: IFFALSE 12151
11781: GO 11783
11783: DISABLE
11784: LD_INT 0
11786: PPUSH
11787: PPUSH
11788: PPUSH
11789: PPUSH
// begin enable ;
11790: ENABLE
// if UnitFilter ( RuScientists , [ f_or , [ f_inarea , EscapeArea1 ] , [ f_inarea , EscapeArea2 ] ] ) or FilterAllUnits ( [ [ f_control , control_manual ] , [ f_nation , 3 ] , [ f_or , [ f_inarea , EscapeArea1 ] , [ f_inarea , EscapeArea2 ] ] ] ) then
11791: LD_EXP 34
11795: PPUSH
11796: LD_INT 2
11798: PUSH
11799: LD_INT 95
11801: PUSH
11802: LD_INT 13
11804: PUSH
11805: EMPTY
11806: LIST
11807: LIST
11808: PUSH
11809: LD_INT 95
11811: PUSH
11812: LD_INT 14
11814: PUSH
11815: EMPTY
11816: LIST
11817: LIST
11818: PUSH
11819: EMPTY
11820: LIST
11821: LIST
11822: LIST
11823: PPUSH
11824: CALL_OW 72
11828: PUSH
11829: LD_INT 33
11831: PUSH
11832: LD_INT 1
11834: PUSH
11835: EMPTY
11836: LIST
11837: LIST
11838: PUSH
11839: LD_INT 23
11841: PUSH
11842: LD_INT 3
11844: PUSH
11845: EMPTY
11846: LIST
11847: LIST
11848: PUSH
11849: LD_INT 2
11851: PUSH
11852: LD_INT 95
11854: PUSH
11855: LD_INT 13
11857: PUSH
11858: EMPTY
11859: LIST
11860: LIST
11861: PUSH
11862: LD_INT 95
11864: PUSH
11865: LD_INT 14
11867: PUSH
11868: EMPTY
11869: LIST
11870: LIST
11871: PUSH
11872: EMPTY
11873: LIST
11874: LIST
11875: LIST
11876: PUSH
11877: EMPTY
11878: LIST
11879: LIST
11880: LIST
11881: PPUSH
11882: CALL_OW 69
11886: OR
11887: IFFALSE 12076
// begin unit := UnitFilter ( RuScientists , [ f_or , [ f_inarea , EscapeArea1 ] , [ f_inarea , EscapeArea2 ] ] ) [ 1 ] ;
11889: LD_ADDR_VAR 0 2
11893: PUSH
11894: LD_EXP 34
11898: PPUSH
11899: LD_INT 2
11901: PUSH
11902: LD_INT 95
11904: PUSH
11905: LD_INT 13
11907: PUSH
11908: EMPTY
11909: LIST
11910: LIST
11911: PUSH
11912: LD_INT 95
11914: PUSH
11915: LD_INT 14
11917: PUSH
11918: EMPTY
11919: LIST
11920: LIST
11921: PUSH
11922: EMPTY
11923: LIST
11924: LIST
11925: LIST
11926: PPUSH
11927: CALL_OW 72
11931: PUSH
11932: LD_INT 1
11934: ARRAY
11935: ST_TO_ADDR
// if not unit then
11936: LD_VAR 0 2
11940: NOT
11941: IFFALSE 12076
// begin tmp := FilterAllUnits ( [ [ f_or , [ f_inarea , EscapeArea1 ] , [ f_inarea , EscapeArea2 ] ] , [ f_control , control_manual ] , [ f_nation , 3 ] ] ) ;
11943: LD_ADDR_VAR 0 4
11947: PUSH
11948: LD_INT 2
11950: PUSH
11951: LD_INT 95
11953: PUSH
11954: LD_INT 13
11956: PUSH
11957: EMPTY
11958: LIST
11959: LIST
11960: PUSH
11961: LD_INT 95
11963: PUSH
11964: LD_INT 14
11966: PUSH
11967: EMPTY
11968: LIST
11969: LIST
11970: PUSH
11971: EMPTY
11972: LIST
11973: LIST
11974: LIST
11975: PUSH
11976: LD_INT 33
11978: PUSH
11979: LD_INT 1
11981: PUSH
11982: EMPTY
11983: LIST
11984: LIST
11985: PUSH
11986: LD_INT 23
11988: PUSH
11989: LD_INT 3
11991: PUSH
11992: EMPTY
11993: LIST
11994: LIST
11995: PUSH
11996: EMPTY
11997: LIST
11998: LIST
11999: LIST
12000: PPUSH
12001: CALL_OW 69
12005: ST_TO_ADDR
// if not tmp then
12006: LD_VAR 0 4
12010: NOT
12011: IFFALSE 12015
// exit ;
12013: GO 12151
// for i in tmp do
12015: LD_ADDR_VAR 0 1
12019: PUSH
12020: LD_VAR 0 4
12024: PUSH
12025: FOR_IN
12026: IFFALSE 12074
// if IsDrivenBy ( i ) in RuScientists then
12028: LD_VAR 0 1
12032: PPUSH
12033: CALL_OW 311
12037: PUSH
12038: LD_EXP 34
12042: IN
12043: IFFALSE 12072
// begin unit := IsDrivenBy ( i ) ;
12045: LD_ADDR_VAR 0 2
12049: PUSH
12050: LD_VAR 0 1
12054: PPUSH
12055: CALL_OW 311
12059: ST_TO_ADDR
// veh := i ;
12060: LD_ADDR_VAR 0 3
12064: PUSH
12065: LD_VAR 0 1
12069: ST_TO_ADDR
// break ;
12070: GO 12074
// end ;
12072: GO 12025
12074: POP
12075: POP
// end ; end ; if not unit then
12076: LD_VAR 0 2
12080: NOT
12081: IFFALSE 12085
// exit ;
12083: GO 12151
// RuScientists = RuScientists diff unit ;
12085: LD_ADDR_EXP 34
12089: PUSH
12090: LD_EXP 34
12094: PUSH
12095: LD_VAR 0 2
12099: DIFF
12100: ST_TO_ADDR
// RemoveUnit ( unit ) ;
12101: LD_VAR 0 2
12105: PPUSH
12106: CALL_OW 64
// if veh then
12110: LD_VAR 0 3
12114: IFFALSE 12151
// begin if GetWeapon ( veh ) = 49 then
12116: LD_VAR 0 3
12120: PPUSH
12121: CALL_OW 264
12125: PUSH
12126: LD_INT 49
12128: EQUAL
12129: IFFALSE 12142
// KillUnit ( veh ) else
12131: LD_VAR 0 3
12135: PPUSH
12136: CALL_OW 66
12140: GO 12151
// RemoveUnit ( veh ) ;
12142: LD_VAR 0 3
12146: PPUSH
12147: CALL_OW 64
// end ; end ; end_of_file
12151: PPOPN 4
12153: END
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
12154: LD_INT 0
12156: PPUSH
12157: PPUSH
// if exist_mode then
12158: LD_VAR 0 2
12162: IFFALSE 12181
// unit := CreateCharacter ( ident ) else
12164: LD_ADDR_VAR 0 4
12168: PUSH
12169: LD_VAR 0 1
12173: PPUSH
12174: CALL_OW 34
12178: ST_TO_ADDR
12179: GO 12196
// unit := NewCharacter ( ident ) ;
12181: LD_ADDR_VAR 0 4
12185: PUSH
12186: LD_VAR 0 1
12190: PPUSH
12191: CALL_OW 25
12195: ST_TO_ADDR
// result := unit ;
12196: LD_ADDR_VAR 0 3
12200: PUSH
12201: LD_VAR 0 4
12205: ST_TO_ADDR
// end ;
12206: LD_VAR 0 3
12210: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
12211: LD_INT 0
12213: PPUSH
12214: PPUSH
// for i in charactersList do
12215: LD_ADDR_VAR 0 4
12219: PUSH
12220: LD_VAR 0 1
12224: PUSH
12225: FOR_IN
12226: IFFALSE 12244
// SaveCharacters ( i , ident ) ;
12228: LD_VAR 0 4
12232: PPUSH
12233: LD_VAR 0 2
12237: PPUSH
12238: CALL_OW 38
12242: GO 12225
12244: POP
12245: POP
// end ;
12246: LD_VAR 0 3
12250: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
12251: LD_INT 0
12253: PPUSH
12254: PPUSH
12255: PPUSH
// characters := characters diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Denis , Gladstone , Cornel , Powell ] ;
12256: LD_ADDR_VAR 0 1
12260: PUSH
12261: LD_VAR 0 1
12265: PUSH
12266: LD_EXP 1
12270: PUSH
12271: LD_EXP 7
12275: PUSH
12276: LD_EXP 3
12280: PUSH
12281: LD_EXP 4
12285: PUSH
12286: LD_EXP 5
12290: PUSH
12291: LD_EXP 2
12295: PUSH
12296: LD_EXP 12
12300: PUSH
12301: LD_EXP 13
12305: PUSH
12306: LD_EXP 9
12310: PUSH
12311: LD_EXP 11
12315: PUSH
12316: LD_EXP 6
12320: PUSH
12321: LD_EXP 8
12325: PUSH
12326: LD_EXP 10
12330: PUSH
12331: LD_EXP 22
12335: PUSH
12336: EMPTY
12337: LIST
12338: LIST
12339: LIST
12340: LIST
12341: LIST
12342: LIST
12343: LIST
12344: LIST
12345: LIST
12346: LIST
12347: LIST
12348: LIST
12349: LIST
12350: LIST
12351: DIFF
12352: ST_TO_ADDR
// speaker := characters [ rand ( 1 , characters ) ] ;
12353: LD_ADDR_VAR 0 6
12357: PUSH
12358: LD_VAR 0 1
12362: PUSH
12363: LD_INT 1
12365: PPUSH
12366: LD_VAR 0 1
12370: PPUSH
12371: CALL_OW 12
12375: ARRAY
12376: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
12377: LD_VAR 0 6
12381: PPUSH
12382: CALL_OW 258
12386: PUSH
12387: LD_INT 1
12389: EQUAL
12390: IFFALSE 12408
// Say ( speaker , dialogMID ) else
12392: LD_VAR 0 6
12396: PPUSH
12397: LD_VAR 0 2
12401: PPUSH
12402: CALL_OW 88
12406: GO 12422
// Say ( speaker , dialogFID ) ;
12408: LD_VAR 0 6
12412: PPUSH
12413: LD_VAR 0 3
12417: PPUSH
12418: CALL_OW 88
// result := speaker ;
12422: LD_ADDR_VAR 0 4
12426: PUSH
12427: LD_VAR 0 6
12431: ST_TO_ADDR
// end ;
12432: LD_VAR 0 4
12436: RET
// export function PrepareDifficulty ; var tmp ; begin
12437: LD_INT 0
12439: PPUSH
12440: PPUSH
// if Difficulty = 1 then
12441: LD_OWVAR 67
12445: PUSH
12446: LD_INT 1
12448: EQUAL
12449: IFFALSE 12467
// begin RuSolMinLevel = 8 ;
12451: LD_ADDR_EXP 36
12455: PUSH
12456: LD_INT 8
12458: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
12459: LD_ADDR_EXP 37
12463: PUSH
12464: LD_INT 10
12466: ST_TO_ADDR
// end ; if Difficulty = 2 then
12467: LD_OWVAR 67
12471: PUSH
12472: LD_INT 2
12474: EQUAL
12475: IFFALSE 12569
// begin RuSolMinLevel = 9 ;
12477: LD_ADDR_EXP 36
12481: PUSH
12482: LD_INT 9
12484: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
12485: LD_ADDR_EXP 37
12489: PUSH
12490: LD_INT 10
12492: ST_TO_ADDR
// uc_nation = 3 ;
12493: LD_ADDR_OWVAR 21
12497: PUSH
12498: LD_INT 3
12500: ST_TO_ADDR
// uc_side = 3 ;
12501: LD_ADDR_OWVAR 20
12505: PUSH
12506: LD_INT 3
12508: ST_TO_ADDR
// bc_level = 10 ;
12509: LD_ADDR_OWVAR 43
12513: PUSH
12514: LD_INT 10
12516: ST_TO_ADDR
// bc_type = b_turret ;
12517: LD_ADDR_OWVAR 42
12521: PUSH
12522: LD_INT 33
12524: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 86 , 34 , 2 ) ;
12525: LD_ADDR_VAR 0 2
12529: PUSH
12530: LD_INT 86
12532: PPUSH
12533: LD_INT 34
12535: PPUSH
12536: LD_INT 2
12538: PPUSH
12539: CALL_OW 47
12543: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
12544: LD_VAR 0 2
12548: PPUSH
12549: LD_INT 49
12551: PPUSH
12552: CALL_OW 431
// SetTech ( 64 , 3 , state_enabled ) ;
12556: LD_INT 64
12558: PPUSH
12559: LD_INT 3
12561: PPUSH
12562: LD_INT 1
12564: PPUSH
12565: CALL_OW 322
// end ; if Difficulty = 3 then
12569: LD_OWVAR 67
12573: PUSH
12574: LD_INT 3
12576: EQUAL
12577: IFFALSE 12715
// begin RuSolMinLevel = 10 ;
12579: LD_ADDR_EXP 36
12583: PUSH
12584: LD_INT 10
12586: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
12587: LD_ADDR_EXP 37
12591: PUSH
12592: LD_INT 10
12594: ST_TO_ADDR
// uc_nation = 3 ;
12595: LD_ADDR_OWVAR 21
12599: PUSH
12600: LD_INT 3
12602: ST_TO_ADDR
// uc_side = 3 ;
12603: LD_ADDR_OWVAR 20
12607: PUSH
12608: LD_INT 3
12610: ST_TO_ADDR
// bc_level = 10 ;
12611: LD_ADDR_OWVAR 43
12615: PUSH
12616: LD_INT 10
12618: ST_TO_ADDR
// bc_type = b_turret ;
12619: LD_ADDR_OWVAR 42
12623: PUSH
12624: LD_INT 33
12626: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 86 , 34 , 2 ) ;
12627: LD_ADDR_VAR 0 2
12631: PUSH
12632: LD_INT 86
12634: PPUSH
12635: LD_INT 34
12637: PPUSH
12638: LD_INT 2
12640: PPUSH
12641: CALL_OW 47
12645: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
12646: LD_VAR 0 2
12650: PPUSH
12651: LD_INT 49
12653: PPUSH
12654: CALL_OW 431
// tmp = CreateAndPlaceBuildingXYD ( 93 , 31 , 2 ) ;
12658: LD_ADDR_VAR 0 2
12662: PUSH
12663: LD_INT 93
12665: PPUSH
12666: LD_INT 31
12668: PPUSH
12669: LD_INT 2
12671: PPUSH
12672: CALL_OW 47
12676: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
12677: LD_VAR 0 2
12681: PPUSH
12682: LD_INT 49
12684: PPUSH
12685: CALL_OW 431
// SetTech ( 64 , 3 , state_enabled ) ;
12689: LD_INT 64
12691: PPUSH
12692: LD_INT 3
12694: PPUSH
12695: LD_INT 1
12697: PPUSH
12698: CALL_OW 322
// SetTech ( 65 , 3 , state_enabled ) ;
12702: LD_INT 65
12704: PPUSH
12705: LD_INT 3
12707: PPUSH
12708: LD_INT 1
12710: PPUSH
12711: CALL_OW 322
// end ; end ;
12715: LD_VAR 0 1
12719: RET
// export function ShowQuery1 ; begin
12720: LD_INT 0
12722: PPUSH
// case query ( Q1 ) of 1 :
12723: LD_STRING Q1
12725: PPUSH
12726: CALL_OW 97
12730: PUSH
12731: LD_INT 1
12733: DOUBLE
12734: EQUAL
12735: IFTRUE 12739
12737: GO 12750
12739: POP
// result = 1 ; 2 :
12740: LD_ADDR_VAR 0 1
12744: PUSH
12745: LD_INT 1
12747: ST_TO_ADDR
12748: GO 12789
12750: LD_INT 2
12752: DOUBLE
12753: EQUAL
12754: IFTRUE 12758
12756: GO 12769
12758: POP
// result = 2 ; 3 :
12759: LD_ADDR_VAR 0 1
12763: PUSH
12764: LD_INT 2
12766: ST_TO_ADDR
12767: GO 12789
12769: LD_INT 3
12771: DOUBLE
12772: EQUAL
12773: IFTRUE 12777
12775: GO 12788
12777: POP
// result = 3 ; end ;
12778: LD_ADDR_VAR 0 1
12782: PUSH
12783: LD_INT 3
12785: ST_TO_ADDR
12786: GO 12789
12788: POP
// end ;
12789: LD_VAR 0 1
12793: RET
// export function ShowQuery2 ; begin
12794: LD_INT 0
12796: PPUSH
// case query ( Q1a ) of 1 :
12797: LD_STRING Q1a
12799: PPUSH
12800: CALL_OW 97
12804: PUSH
12805: LD_INT 1
12807: DOUBLE
12808: EQUAL
12809: IFTRUE 12813
12811: GO 12824
12813: POP
// result = 1 ; 2 :
12814: LD_ADDR_VAR 0 1
12818: PUSH
12819: LD_INT 1
12821: ST_TO_ADDR
12822: GO 12863
12824: LD_INT 2
12826: DOUBLE
12827: EQUAL
12828: IFTRUE 12832
12830: GO 12843
12832: POP
// result = 2 ; 3 :
12833: LD_ADDR_VAR 0 1
12837: PUSH
12838: LD_INT 2
12840: ST_TO_ADDR
12841: GO 12863
12843: LD_INT 3
12845: DOUBLE
12846: EQUAL
12847: IFTRUE 12851
12849: GO 12862
12851: POP
// result = 3 ; end ;
12852: LD_ADDR_VAR 0 1
12856: PUSH
12857: LD_INT 3
12859: ST_TO_ADDR
12860: GO 12863
12862: POP
// end ;
12863: LD_VAR 0 1
12867: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un , tmp ; begin
12868: LD_INT 0
12870: PPUSH
12871: PPUSH
12872: PPUSH
12873: PPUSH
12874: PPUSH
// for i = 1 to count do
12875: LD_ADDR_VAR 0 8
12879: PUSH
12880: DOUBLE
12881: LD_INT 1
12883: DEC
12884: ST_TO_ADDR
12885: LD_VAR 0 6
12889: PUSH
12890: FOR_TO
12891: IFFALSE 12972
// begin uc_side = side ;
12893: LD_ADDR_OWVAR 20
12897: PUSH
12898: LD_VAR 0 1
12902: ST_TO_ADDR
// uc_nation = nation ;
12903: LD_ADDR_OWVAR 21
12907: PUSH
12908: LD_VAR 0 2
12912: ST_TO_ADDR
// hc_gallery =  ;
12913: LD_ADDR_OWVAR 33
12917: PUSH
12918: LD_STRING 
12920: ST_TO_ADDR
// hc_name =  ;
12921: LD_ADDR_OWVAR 26
12925: PUSH
12926: LD_STRING 
12928: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
12929: LD_INT 0
12931: PPUSH
12932: LD_VAR 0 5
12936: PPUSH
12937: LD_VAR 0 4
12941: PPUSH
12942: CALL_OW 380
// un = CreateHuman ;
12946: LD_ADDR_VAR 0 10
12950: PUSH
12951: CALL_OW 44
12955: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
12956: LD_VAR 0 10
12960: PPUSH
12961: LD_VAR 0 3
12965: PPUSH
12966: CALL_OW 52
// end ;
12970: GO 12890
12972: POP
12973: POP
// end ;
12974: LD_VAR 0 7
12978: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list ; begin
12979: LD_INT 0
12981: PPUSH
12982: PPUSH
12983: PPUSH
12984: PPUSH
12985: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
12986: LD_ADDR_VAR 0 8
12990: PUSH
12991: LD_INT 48
12993: PUSH
12994: LD_INT 49
12996: PUSH
12997: LD_INT 50
12999: PUSH
13000: LD_INT 20
13002: PUSH
13003: LD_INT 1
13005: PUSH
13006: LD_INT 51
13008: PUSH
13009: LD_INT 52
13011: PUSH
13012: LD_INT 69
13014: PUSH
13015: LD_INT 39
13017: PUSH
13018: LD_INT 34
13020: PUSH
13021: LD_INT 40
13023: PUSH
13024: LD_INT 53
13026: PUSH
13027: LD_INT 71
13029: PUSH
13030: LD_INT 57
13032: PUSH
13033: LD_INT 58
13035: PUSH
13036: LD_INT 44
13038: PUSH
13039: LD_INT 32
13041: PUSH
13042: LD_INT 27
13044: PUSH
13045: LD_INT 23
13047: PUSH
13048: LD_INT 33
13050: PUSH
13051: LD_INT 59
13053: PUSH
13054: LD_INT 54
13056: PUSH
13057: LD_INT 55
13059: PUSH
13060: LD_INT 56
13062: PUSH
13063: LD_INT 63
13065: PUSH
13066: LD_INT 64
13068: PUSH
13069: LD_INT 65
13071: PUSH
13072: LD_INT 30
13074: PUSH
13075: LD_INT 31
13077: PUSH
13078: LD_INT 21
13080: PUSH
13081: LD_INT 22
13083: PUSH
13084: LD_INT 25
13086: PUSH
13087: EMPTY
13088: LIST
13089: LIST
13090: LIST
13091: LIST
13092: LIST
13093: LIST
13094: LIST
13095: LIST
13096: LIST
13097: LIST
13098: LIST
13099: LIST
13100: LIST
13101: LIST
13102: LIST
13103: LIST
13104: LIST
13105: LIST
13106: LIST
13107: LIST
13108: LIST
13109: LIST
13110: LIST
13111: LIST
13112: LIST
13113: LIST
13114: LIST
13115: LIST
13116: LIST
13117: LIST
13118: LIST
13119: LIST
13120: ST_TO_ADDR
// for i = 1 to ru_tech_list do
13121: LD_ADDR_VAR 0 5
13125: PUSH
13126: DOUBLE
13127: LD_INT 1
13129: DEC
13130: ST_TO_ADDR
13131: LD_VAR 0 8
13135: PUSH
13136: FOR_TO
13137: IFFALSE 13213
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
13139: LD_VAR 0 8
13143: PUSH
13144: LD_VAR 0 5
13148: ARRAY
13149: PPUSH
13150: LD_VAR 0 1
13154: PPUSH
13155: CALL_OW 321
13159: PUSH
13160: LD_INT 1
13162: EQUAL
13163: PUSH
13164: LD_VAR 0 8
13168: PUSH
13169: LD_VAR 0 5
13173: ARRAY
13174: PPUSH
13175: LD_VAR 0 3
13179: PPUSH
13180: CALL_OW 482
13184: PUSH
13185: LD_INT 1
13187: EQUAL
13188: AND
13189: IFFALSE 13211
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
13191: LD_VAR 0 2
13195: PPUSH
13196: LD_VAR 0 8
13200: PUSH
13201: LD_VAR 0 5
13205: ARRAY
13206: PPUSH
13207: CALL_OW 184
13211: GO 13136
13213: POP
13214: POP
// end ;
13215: LD_VAR 0 4
13219: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
13220: LD_INT 0
13222: PPUSH
13223: PPUSH
13224: PPUSH
13225: PPUSH
13226: PPUSH
13227: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
13228: LD_ADDR_VAR 0 8
13232: PUSH
13233: LD_VAR 0 2
13237: PPUSH
13238: CALL_OW 313
13242: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
13243: LD_ADDR_VAR 0 9
13247: PUSH
13248: LD_VAR 0 3
13252: PPUSH
13253: LD_INT 22
13255: PUSH
13256: LD_VAR 0 1
13260: PUSH
13261: EMPTY
13262: LIST
13263: LIST
13264: PUSH
13265: LD_INT 25
13267: PUSH
13268: LD_INT 2
13270: PUSH
13271: EMPTY
13272: LIST
13273: LIST
13274: PUSH
13275: LD_INT 24
13277: PUSH
13278: LD_INT 750
13280: PUSH
13281: EMPTY
13282: LIST
13283: LIST
13284: PUSH
13285: LD_INT 3
13287: PUSH
13288: LD_INT 54
13290: PUSH
13291: EMPTY
13292: LIST
13293: PUSH
13294: EMPTY
13295: LIST
13296: LIST
13297: PUSH
13298: EMPTY
13299: LIST
13300: LIST
13301: LIST
13302: LIST
13303: PPUSH
13304: CALL_OW 70
13308: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
13309: LD_ADDR_VAR 0 6
13313: PUSH
13314: LD_VAR 0 3
13318: PPUSH
13319: LD_INT 22
13321: PUSH
13322: LD_VAR 0 1
13326: PUSH
13327: EMPTY
13328: LIST
13329: LIST
13330: PUSH
13331: LD_INT 21
13333: PUSH
13334: LD_INT 3
13336: PUSH
13337: EMPTY
13338: LIST
13339: LIST
13340: PUSH
13341: LD_INT 3
13343: PUSH
13344: LD_INT 24
13346: PUSH
13347: LD_INT 1000
13349: PUSH
13350: EMPTY
13351: LIST
13352: LIST
13353: PUSH
13354: EMPTY
13355: LIST
13356: LIST
13357: PUSH
13358: EMPTY
13359: LIST
13360: LIST
13361: LIST
13362: PUSH
13363: EMPTY
13364: LIST
13365: PPUSH
13366: CALL_OW 70
13370: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
13371: LD_VAR 0 6
13375: NOT
13376: PUSH
13377: LD_INT 22
13379: PUSH
13380: LD_VAR 0 1
13384: PUSH
13385: EMPTY
13386: LIST
13387: LIST
13388: PUSH
13389: LD_INT 25
13391: PUSH
13392: LD_INT 2
13394: PUSH
13395: EMPTY
13396: LIST
13397: LIST
13398: PUSH
13399: LD_INT 24
13401: PUSH
13402: LD_INT 250
13404: PUSH
13405: EMPTY
13406: LIST
13407: LIST
13408: PUSH
13409: EMPTY
13410: LIST
13411: LIST
13412: LIST
13413: PPUSH
13414: CALL_OW 69
13418: NOT
13419: AND
13420: IFFALSE 13424
// exit ;
13422: GO 13606
// if buildings_list > 0 and engineerOkInside then
13424: LD_VAR 0 6
13428: PUSH
13429: LD_INT 0
13431: GREATER
13432: PUSH
13433: LD_VAR 0 8
13437: AND
13438: IFFALSE 13449
// ComExitBuilding ( engineerOkInside ) ;
13440: LD_VAR 0 8
13444: PPUSH
13445: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
13449: LD_VAR 0 6
13453: PUSH
13454: LD_INT 0
13456: GREATER
13457: PUSH
13458: LD_VAR 0 9
13462: PUSH
13463: LD_INT 0
13465: GREATER
13466: AND
13467: IFFALSE 13487
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
13469: LD_VAR 0 9
13473: PPUSH
13474: LD_VAR 0 6
13478: PUSH
13479: LD_INT 1
13481: ARRAY
13482: PPUSH
13483: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
13487: LD_VAR 0 6
13491: PUSH
13492: LD_INT 0
13494: EQUAL
13495: PUSH
13496: LD_VAR 0 4
13500: PUSH
13501: LD_INT 0
13503: EQUAL
13504: AND
13505: PUSH
13506: LD_VAR 0 9
13510: PUSH
13511: LD_INT 0
13513: GREATER
13514: AND
13515: IFFALSE 13531
// ComEnterUnit ( engineerOkOutside , building ) ;
13517: LD_VAR 0 9
13521: PPUSH
13522: LD_VAR 0 2
13526: PPUSH
13527: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
13531: LD_VAR 0 9
13535: PUSH
13536: LD_INT 0
13538: GREATER
13539: PUSH
13540: LD_VAR 0 6
13544: PUSH
13545: LD_INT 0
13547: EQUAL
13548: AND
13549: PUSH
13550: LD_VAR 0 4
13554: PUSH
13555: LD_INT 0
13557: GREATER
13558: AND
13559: IFFALSE 13606
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
13561: LD_VAR 0 9
13565: PPUSH
13566: LD_VAR 0 4
13570: PUSH
13571: LD_INT 1
13573: ARRAY
13574: PPUSH
13575: LD_VAR 0 4
13579: PUSH
13580: LD_INT 2
13582: ARRAY
13583: PPUSH
13584: LD_VAR 0 4
13588: PUSH
13589: LD_INT 3
13591: ARRAY
13592: PPUSH
13593: LD_VAR 0 4
13597: PUSH
13598: LD_INT 4
13600: ARRAY
13601: PPUSH
13602: CALL_OW 145
// end ;
13606: LD_VAR 0 5
13610: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
13611: LD_INT 0
13613: PPUSH
13614: PPUSH
13615: PPUSH
13616: PPUSH
13617: PPUSH
13618: PPUSH
13619: PPUSH
13620: PPUSH
13621: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 251 ] ] ) diff [ RuScientists ] ;
13622: LD_ADDR_VAR 0 6
13626: PUSH
13627: LD_INT 22
13629: PUSH
13630: LD_VAR 0 1
13634: PUSH
13635: EMPTY
13636: LIST
13637: LIST
13638: PUSH
13639: LD_INT 25
13641: PUSH
13642: LD_INT 4
13644: PUSH
13645: EMPTY
13646: LIST
13647: LIST
13648: PUSH
13649: LD_INT 24
13651: PUSH
13652: LD_INT 251
13654: PUSH
13655: EMPTY
13656: LIST
13657: LIST
13658: PUSH
13659: EMPTY
13660: LIST
13661: LIST
13662: LIST
13663: PPUSH
13664: CALL_OW 69
13668: PUSH
13669: LD_EXP 34
13673: PUSH
13674: EMPTY
13675: LIST
13676: DIFF
13677: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 4 ] , [ f_ok ] ] ) diff [ RuScientists ] ;
13678: LD_ADDR_VAR 0 7
13682: PUSH
13683: LD_VAR 0 3
13687: PPUSH
13688: LD_INT 22
13690: PUSH
13691: LD_VAR 0 1
13695: PUSH
13696: EMPTY
13697: LIST
13698: LIST
13699: PUSH
13700: LD_INT 25
13702: PUSH
13703: LD_INT 4
13705: PUSH
13706: EMPTY
13707: LIST
13708: LIST
13709: PUSH
13710: LD_INT 50
13712: PUSH
13713: EMPTY
13714: LIST
13715: PUSH
13716: EMPTY
13717: LIST
13718: LIST
13719: LIST
13720: PPUSH
13721: CALL_OW 70
13725: PUSH
13726: LD_EXP 34
13730: PUSH
13731: EMPTY
13732: LIST
13733: DIFF
13734: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
13735: LD_ADDR_VAR 0 10
13739: PUSH
13740: LD_VAR 0 3
13744: PPUSH
13745: LD_INT 22
13747: PUSH
13748: LD_VAR 0 1
13752: PUSH
13753: EMPTY
13754: LIST
13755: LIST
13756: PUSH
13757: LD_INT 21
13759: PUSH
13760: LD_INT 1
13762: PUSH
13763: EMPTY
13764: LIST
13765: LIST
13766: PUSH
13767: LD_INT 3
13769: PUSH
13770: LD_INT 24
13772: PUSH
13773: LD_INT 750
13775: PUSH
13776: EMPTY
13777: LIST
13778: LIST
13779: PUSH
13780: EMPTY
13781: LIST
13782: LIST
13783: PUSH
13784: EMPTY
13785: LIST
13786: LIST
13787: LIST
13788: PPUSH
13789: CALL_OW 70
13793: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
13794: LD_ADDR_VAR 0 11
13798: PUSH
13799: LD_VAR 0 2
13803: PPUSH
13804: LD_INT 22
13806: PUSH
13807: LD_VAR 0 1
13811: PUSH
13812: EMPTY
13813: LIST
13814: LIST
13815: PUSH
13816: LD_INT 21
13818: PUSH
13819: LD_INT 1
13821: PUSH
13822: EMPTY
13823: LIST
13824: LIST
13825: PUSH
13826: LD_INT 3
13828: PUSH
13829: LD_INT 24
13831: PUSH
13832: LD_INT 1000
13834: PUSH
13835: EMPTY
13836: LIST
13837: LIST
13838: PUSH
13839: EMPTY
13840: LIST
13841: LIST
13842: PUSH
13843: EMPTY
13844: LIST
13845: LIST
13846: LIST
13847: PPUSH
13848: CALL_OW 70
13852: ST_TO_ADDR
// if damageUnits > 0 and sci_list > 0 then
13853: LD_VAR 0 10
13857: PUSH
13858: LD_INT 0
13860: GREATER
13861: PUSH
13862: LD_VAR 0 6
13866: PUSH
13867: LD_INT 0
13869: GREATER
13870: AND
13871: IFFALSE 13887
// ComMoveToArea ( damageUnits , healArea ) ;
13873: LD_VAR 0 10
13877: PPUSH
13878: LD_VAR 0 2
13882: PPUSH
13883: CALL_OW 113
// if unitsToHeal > 0 and sci_listOutside > 0 then
13887: LD_VAR 0 11
13891: PUSH
13892: LD_INT 0
13894: GREATER
13895: PUSH
13896: LD_VAR 0 7
13900: PUSH
13901: LD_INT 0
13903: GREATER
13904: AND
13905: IFFALSE 13925
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
13907: LD_VAR 0 7
13911: PPUSH
13912: LD_VAR 0 11
13916: PUSH
13917: LD_INT 1
13919: ARRAY
13920: PPUSH
13921: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
13925: LD_VAR 0 10
13929: PUSH
13930: LD_INT 0
13932: EQUAL
13933: PUSH
13934: LD_VAR 0 11
13938: PUSH
13939: LD_INT 0
13941: EQUAL
13942: AND
13943: PUSH
13944: LD_VAR 0 7
13948: PUSH
13949: LD_INT 0
13951: GREATER
13952: AND
13953: IFFALSE 14058
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
13955: LD_ADDR_VAR 0 12
13959: PUSH
13960: LD_INT 22
13962: PUSH
13963: LD_VAR 0 1
13967: PUSH
13968: EMPTY
13969: LIST
13970: LIST
13971: PUSH
13972: LD_INT 21
13974: PUSH
13975: LD_INT 3
13977: PUSH
13978: EMPTY
13979: LIST
13980: LIST
13981: PUSH
13982: LD_INT 30
13984: PUSH
13985: LD_INT 8
13987: PUSH
13988: EMPTY
13989: LIST
13990: LIST
13991: PUSH
13992: EMPTY
13993: LIST
13994: LIST
13995: LIST
13996: PPUSH
13997: CALL_OW 69
14001: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
14002: LD_ADDR_VAR 0 13
14006: PUSH
14007: LD_INT 1
14009: PPUSH
14010: LD_VAR 0 12
14014: PPUSH
14015: CALL_OW 12
14019: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
14020: LD_VAR 0 7
14024: PPUSH
14025: LD_INT 3
14027: PUSH
14028: LD_INT 60
14030: PUSH
14031: EMPTY
14032: LIST
14033: PUSH
14034: EMPTY
14035: LIST
14036: LIST
14037: PPUSH
14038: CALL_OW 72
14042: PPUSH
14043: LD_VAR 0 12
14047: PUSH
14048: LD_VAR 0 13
14052: ARRAY
14053: PPUSH
14054: CALL_OW 120
// end ; if FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 3 ] , [ f_lives , 751 ] ] ) > 0 and IsOk ( ru_fact ) and GetSide ( ru_fact ) = 3 then
14058: LD_VAR 0 3
14062: PPUSH
14063: LD_INT 22
14065: PUSH
14066: LD_VAR 0 1
14070: PUSH
14071: EMPTY
14072: LIST
14073: LIST
14074: PUSH
14075: LD_INT 25
14077: PUSH
14078: LD_INT 3
14080: PUSH
14081: EMPTY
14082: LIST
14083: LIST
14084: PUSH
14085: LD_INT 24
14087: PUSH
14088: LD_INT 751
14090: PUSH
14091: EMPTY
14092: LIST
14093: LIST
14094: PUSH
14095: EMPTY
14096: LIST
14097: LIST
14098: LIST
14099: PPUSH
14100: CALL_OW 70
14104: PUSH
14105: LD_INT 0
14107: GREATER
14108: PUSH
14109: LD_INT 21
14111: PPUSH
14112: CALL_OW 302
14116: AND
14117: PUSH
14118: LD_INT 21
14120: PPUSH
14121: CALL_OW 255
14125: PUSH
14126: LD_INT 3
14128: EQUAL
14129: AND
14130: IFFALSE 14186
// ComEnterUnit ( FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 3 ] , [ f_lives , 751 ] ] ) , ru_fact ) ;
14132: LD_VAR 0 3
14136: PPUSH
14137: LD_INT 22
14139: PUSH
14140: LD_VAR 0 1
14144: PUSH
14145: EMPTY
14146: LIST
14147: LIST
14148: PUSH
14149: LD_INT 25
14151: PUSH
14152: LD_INT 3
14154: PUSH
14155: EMPTY
14156: LIST
14157: LIST
14158: PUSH
14159: LD_INT 24
14161: PUSH
14162: LD_INT 751
14164: PUSH
14165: EMPTY
14166: LIST
14167: LIST
14168: PUSH
14169: EMPTY
14170: LIST
14171: LIST
14172: LIST
14173: PPUSH
14174: CALL_OW 70
14178: PPUSH
14179: LD_INT 21
14181: PPUSH
14182: CALL_OW 120
// end ;
14186: LD_VAR 0 5
14190: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
14191: LD_INT 0
14193: PPUSH
14194: PPUSH
14195: PPUSH
14196: PPUSH
14197: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] , [ f_btype , 4 ] , [ f_btype , 5 ] ] ] ) ;
14198: LD_ADDR_VAR 0 6
14202: PUSH
14203: LD_INT 22
14205: PUSH
14206: LD_VAR 0 1
14210: PUSH
14211: EMPTY
14212: LIST
14213: LIST
14214: PUSH
14215: LD_INT 2
14217: PUSH
14218: LD_INT 30
14220: PUSH
14221: LD_INT 31
14223: PUSH
14224: EMPTY
14225: LIST
14226: LIST
14227: PUSH
14228: LD_INT 30
14230: PUSH
14231: LD_INT 32
14233: PUSH
14234: EMPTY
14235: LIST
14236: LIST
14237: PUSH
14238: LD_INT 30
14240: PUSH
14241: LD_INT 33
14243: PUSH
14244: EMPTY
14245: LIST
14246: LIST
14247: PUSH
14248: LD_INT 30
14250: PUSH
14251: LD_INT 4
14253: PUSH
14254: EMPTY
14255: LIST
14256: LIST
14257: PUSH
14258: LD_INT 30
14260: PUSH
14261: LD_INT 5
14263: PUSH
14264: EMPTY
14265: LIST
14266: LIST
14267: PUSH
14268: EMPTY
14269: LIST
14270: LIST
14271: LIST
14272: LIST
14273: LIST
14274: LIST
14275: PUSH
14276: EMPTY
14277: LIST
14278: LIST
14279: PPUSH
14280: CALL_OW 69
14284: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
14285: LD_ADDR_VAR 0 7
14289: PUSH
14290: LD_INT 22
14292: PUSH
14293: LD_VAR 0 2
14297: PUSH
14298: EMPTY
14299: LIST
14300: LIST
14301: PUSH
14302: LD_INT 21
14304: PUSH
14305: LD_INT 3
14307: PUSH
14308: EMPTY
14309: LIST
14310: LIST
14311: PUSH
14312: LD_INT 58
14314: PUSH
14315: EMPTY
14316: LIST
14317: PUSH
14318: EMPTY
14319: LIST
14320: LIST
14321: LIST
14322: PPUSH
14323: CALL_OW 69
14327: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
14328: LD_VAR 0 6
14332: PUSH
14333: LD_INT 0
14335: GREATER
14336: PUSH
14337: LD_VAR 0 7
14341: PUSH
14342: LD_INT 0
14344: GREATER
14345: AND
14346: IFFALSE 14416
// begin for i in turretsList do
14348: LD_ADDR_VAR 0 4
14352: PUSH
14353: LD_VAR 0 6
14357: PUSH
14358: FOR_IN
14359: IFFALSE 14414
// begin for j in enemyBuildings do
14361: LD_ADDR_VAR 0 5
14365: PUSH
14366: LD_VAR 0 7
14370: PUSH
14371: FOR_IN
14372: IFFALSE 14410
// begin if GetDistUnits ( i , j ) < 20 then
14374: LD_VAR 0 4
14378: PPUSH
14379: LD_VAR 0 5
14383: PPUSH
14384: CALL_OW 296
14388: PUSH
14389: LD_INT 20
14391: LESS
14392: IFFALSE 14408
// begin ComAttackUnit ( i , j ) ;
14394: LD_VAR 0 4
14398: PPUSH
14399: LD_VAR 0 5
14403: PPUSH
14404: CALL_OW 115
// end ; end ;
14408: GO 14371
14410: POP
14411: POP
// end ;
14412: GO 14358
14414: POP
14415: POP
// end ; end ;
14416: LD_VAR 0 3
14420: RET
// export function CraneRepairBuild ( side , baseArea ) ; var i , mechTmp , vehicleTmp , crane_list , buildings_list ; begin
14421: LD_INT 0
14423: PPUSH
14424: PPUSH
14425: PPUSH
14426: PPUSH
14427: PPUSH
14428: PPUSH
// crane_list = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
14429: LD_ADDR_VAR 0 7
14433: PUSH
14434: LD_VAR 0 2
14438: PPUSH
14439: LD_INT 22
14441: PUSH
14442: LD_VAR 0 1
14446: PUSH
14447: EMPTY
14448: LIST
14449: LIST
14450: PUSH
14451: LD_INT 21
14453: PUSH
14454: LD_INT 2
14456: PUSH
14457: EMPTY
14458: LIST
14459: LIST
14460: PUSH
14461: LD_INT 34
14463: PUSH
14464: LD_INT 52
14466: PUSH
14467: EMPTY
14468: LIST
14469: LIST
14470: PUSH
14471: EMPTY
14472: LIST
14473: LIST
14474: LIST
14475: PPUSH
14476: CALL_OW 70
14480: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( baseArea , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
14481: LD_ADDR_VAR 0 8
14485: PUSH
14486: LD_VAR 0 2
14490: PPUSH
14491: LD_INT 22
14493: PUSH
14494: LD_VAR 0 1
14498: PUSH
14499: EMPTY
14500: LIST
14501: LIST
14502: PUSH
14503: LD_INT 21
14505: PUSH
14506: LD_INT 3
14508: PUSH
14509: EMPTY
14510: LIST
14511: LIST
14512: PUSH
14513: LD_INT 3
14515: PUSH
14516: LD_INT 24
14518: PUSH
14519: LD_INT 1000
14521: PUSH
14522: EMPTY
14523: LIST
14524: LIST
14525: PUSH
14526: EMPTY
14527: LIST
14528: LIST
14529: PUSH
14530: EMPTY
14531: LIST
14532: LIST
14533: LIST
14534: PUSH
14535: EMPTY
14536: LIST
14537: PPUSH
14538: CALL_OW 70
14542: ST_TO_ADDR
// if buildings_list > 0 and UnitFilter ( crane_list , [ f_lives , 750 ] ) > 0 then
14543: LD_VAR 0 8
14547: PUSH
14548: LD_INT 0
14550: GREATER
14551: PUSH
14552: LD_VAR 0 7
14556: PPUSH
14557: LD_INT 24
14559: PUSH
14560: LD_INT 750
14562: PUSH
14563: EMPTY
14564: LIST
14565: LIST
14566: PPUSH
14567: CALL_OW 72
14571: PUSH
14572: LD_INT 0
14574: GREATER
14575: AND
14576: IFFALSE 14596
// ComRepairBuilding ( crane_list , buildings_list [ 1 ] ) ;
14578: LD_VAR 0 7
14582: PPUSH
14583: LD_VAR 0 8
14587: PUSH
14588: LD_INT 1
14590: ARRAY
14591: PPUSH
14592: CALL_OW 130
// end ;
14596: LD_VAR 0 3
14600: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
14601: LD_INT 0
14603: PPUSH
14604: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) diff FilterUnitsInArea ( RussianOutsideVehs , [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
14605: LD_INT 22
14607: PUSH
14608: LD_VAR 0 1
14612: PUSH
14613: EMPTY
14614: LIST
14615: LIST
14616: PUSH
14617: LD_INT 21
14619: PUSH
14620: LD_INT 2
14622: PUSH
14623: EMPTY
14624: LIST
14625: LIST
14626: PUSH
14627: EMPTY
14628: LIST
14629: LIST
14630: PPUSH
14631: CALL_OW 69
14635: PUSH
14636: LD_INT 18
14638: PPUSH
14639: LD_INT 22
14641: PUSH
14642: LD_VAR 0 1
14646: PUSH
14647: EMPTY
14648: LIST
14649: LIST
14650: PUSH
14651: LD_INT 21
14653: PUSH
14654: LD_INT 2
14656: PUSH
14657: EMPTY
14658: LIST
14659: LIST
14660: PUSH
14661: EMPTY
14662: LIST
14663: LIST
14664: PPUSH
14665: CALL_OW 70
14669: PUSH
14670: LD_VAR 0 3
14674: LESSEQUAL
14675: DIFF
14676: IFFALSE 14743
// for i = 1 to vehCount do
14678: LD_ADDR_VAR 0 9
14682: PUSH
14683: DOUBLE
14684: LD_INT 1
14686: DEC
14687: ST_TO_ADDR
14688: LD_VAR 0 3
14692: PUSH
14693: FOR_TO
14694: IFFALSE 14741
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
14696: LD_VAR 0 2
14700: PPUSH
14701: LD_VAR 0 7
14705: PPUSH
14706: LD_VAR 0 5
14710: PPUSH
14711: LD_VAR 0 6
14715: PPUSH
14716: LD_VAR 0 4
14720: PUSH
14721: LD_INT 1
14723: PPUSH
14724: LD_VAR 0 4
14728: PPUSH
14729: CALL_OW 12
14733: ARRAY
14734: PPUSH
14735: CALL_OW 185
14739: GO 14693
14741: POP
14742: POP
// end ;
14743: LD_VAR 0 8
14747: RET
// export function AttackVehicles ( side ) ; var i , j , vehiclesOK , target1 , target2 ; begin
14748: LD_INT 0
14750: PPUSH
14751: PPUSH
14752: PPUSH
14753: PPUSH
14754: PPUSH
14755: PPUSH
// if russianTanks >= [ 3 , 4 , 4 ] [ Difficulty ] and russianTimeLapsers >= [ 1 , 2 , 2 ] [ Difficulty ] then
14756: LD_EXP 39
14760: PUSH
14761: LD_INT 3
14763: PUSH
14764: LD_INT 4
14766: PUSH
14767: LD_INT 4
14769: PUSH
14770: EMPTY
14771: LIST
14772: LIST
14773: LIST
14774: PUSH
14775: LD_OWVAR 67
14779: ARRAY
14780: GREATEREQUAL
14781: PUSH
14782: LD_EXP 40
14786: PUSH
14787: LD_INT 1
14789: PUSH
14790: LD_INT 2
14792: PUSH
14793: LD_INT 2
14795: PUSH
14796: EMPTY
14797: LIST
14798: LIST
14799: LIST
14800: PUSH
14801: LD_OWVAR 67
14805: ARRAY
14806: GREATEREQUAL
14807: AND
14808: IFFALSE 15097
// begin repeat wait ( 0 0$3 ) ;
14810: LD_INT 105
14812: PPUSH
14813: CALL_OW 67
// for j in russianTanks do
14817: LD_ADDR_VAR 0 4
14821: PUSH
14822: LD_EXP 39
14826: PUSH
14827: FOR_IN
14828: IFFALSE 15085
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
14830: LD_ADDR_VAR 0 6
14834: PUSH
14835: LD_INT 81
14837: PUSH
14838: LD_VAR 0 1
14842: PUSH
14843: EMPTY
14844: LIST
14845: LIST
14846: PUSH
14847: LD_INT 101
14849: PUSH
14850: LD_INT 1
14852: PUSH
14853: EMPTY
14854: LIST
14855: LIST
14856: PUSH
14857: EMPTY
14858: LIST
14859: LIST
14860: PPUSH
14861: CALL_OW 69
14865: PPUSH
14866: LD_VAR 0 4
14870: PPUSH
14871: CALL_OW 74
14875: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
14876: LD_ADDR_VAR 0 7
14880: PUSH
14881: LD_INT 81
14883: PUSH
14884: LD_VAR 0 1
14888: PUSH
14889: EMPTY
14890: LIST
14891: LIST
14892: PUSH
14893: LD_INT 101
14895: PUSH
14896: LD_INT 1
14898: PUSH
14899: EMPTY
14900: LIST
14901: LIST
14902: PUSH
14903: LD_INT 2
14905: PUSH
14906: LD_INT 59
14908: PUSH
14909: EMPTY
14910: LIST
14911: PUSH
14912: LD_INT 21
14914: PUSH
14915: LD_INT 1
14917: PUSH
14918: EMPTY
14919: LIST
14920: LIST
14921: PUSH
14922: LD_INT 21
14924: PUSH
14925: LD_INT 2
14927: PUSH
14928: EMPTY
14929: LIST
14930: LIST
14931: PUSH
14932: EMPTY
14933: LIST
14934: LIST
14935: LIST
14936: LIST
14937: PUSH
14938: EMPTY
14939: LIST
14940: LIST
14941: LIST
14942: PUSH
14943: EMPTY
14944: LIST
14945: PPUSH
14946: CALL_OW 69
14950: PPUSH
14951: LD_VAR 0 4
14955: PPUSH
14956: CALL_OW 74
14960: ST_TO_ADDR
// if UnitFilter ( russianTimeLapsers , [ f_not , [ f_hastask ] ] ) then
14961: LD_EXP 40
14965: PPUSH
14966: LD_INT 3
14968: PUSH
14969: LD_INT 60
14971: PUSH
14972: EMPTY
14973: LIST
14974: PUSH
14975: EMPTY
14976: LIST
14977: LIST
14978: PPUSH
14979: CALL_OW 72
14983: IFFALSE 15017
// ComMoveUnit ( UnitFilter ( russianTimeLapsers , [ f_not , [ f_hastask ] ] ) , j ) ;
14985: LD_EXP 40
14989: PPUSH
14990: LD_INT 3
14992: PUSH
14993: LD_INT 60
14995: PUSH
14996: EMPTY
14997: LIST
14998: PUSH
14999: EMPTY
15000: LIST
15001: LIST
15002: PPUSH
15003: CALL_OW 72
15007: PPUSH
15008: LD_VAR 0 4
15012: PPUSH
15013: CALL_OW 112
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
15017: LD_VAR 0 4
15021: PPUSH
15022: LD_VAR 0 6
15026: PPUSH
15027: CALL_OW 296
15031: PUSH
15032: LD_INT 8
15034: PLUS
15035: PUSH
15036: LD_VAR 0 4
15040: PPUSH
15041: LD_VAR 0 7
15045: PPUSH
15046: CALL_OW 296
15050: LESS
15051: IFFALSE 15069
// ComAttackUnit ( j , target1 ) else
15053: LD_VAR 0 4
15057: PPUSH
15058: LD_VAR 0 6
15062: PPUSH
15063: CALL_OW 115
15067: GO 15083
// ComAttackUnit ( j , target2 ) ;
15069: LD_VAR 0 4
15073: PPUSH
15074: LD_VAR 0 7
15078: PPUSH
15079: CALL_OW 115
// end ;
15083: GO 14827
15085: POP
15086: POP
// until russianTanks = 0 ;
15087: LD_EXP 39
15091: PUSH
15092: LD_INT 0
15094: EQUAL
15095: IFFALSE 14810
// end ; end ;
15097: LD_VAR 0 2
15101: RET
// export function IntBazooka ( side ) ; var ta , c , i , list , filter ; begin
15102: LD_INT 0
15104: PPUSH
15105: PPUSH
15106: PPUSH
15107: PPUSH
15108: PPUSH
15109: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
15110: LD_ADDR_VAR 0 6
15114: PUSH
15115: LD_INT 22
15117: PUSH
15118: LD_VAR 0 1
15122: PUSH
15123: EMPTY
15124: LIST
15125: LIST
15126: PUSH
15127: LD_INT 25
15129: PUSH
15130: LD_INT 9
15132: PUSH
15133: EMPTY
15134: LIST
15135: LIST
15136: PUSH
15137: EMPTY
15138: LIST
15139: LIST
15140: PPUSH
15141: CALL_OW 69
15145: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
15146: LD_ADDR_VAR 0 7
15150: PUSH
15151: LD_INT 81
15153: PUSH
15154: LD_VAR 0 1
15158: PUSH
15159: EMPTY
15160: LIST
15161: LIST
15162: PUSH
15163: LD_INT 3
15165: PUSH
15166: LD_INT 21
15168: PUSH
15169: LD_INT 3
15171: PUSH
15172: EMPTY
15173: LIST
15174: LIST
15175: PUSH
15176: EMPTY
15177: LIST
15178: LIST
15179: PUSH
15180: EMPTY
15181: LIST
15182: LIST
15183: PPUSH
15184: CALL_OW 69
15188: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
15189: LD_ADDR_VAR 0 4
15193: PUSH
15194: LD_INT 1
15196: PPUSH
15197: LD_INT 3
15199: PPUSH
15200: CALL_OW 12
15204: ST_TO_ADDR
// for i = 1 to list do
15205: LD_ADDR_VAR 0 5
15209: PUSH
15210: DOUBLE
15211: LD_INT 1
15213: DEC
15214: ST_TO_ADDR
15215: LD_VAR 0 6
15219: PUSH
15220: FOR_TO
15221: IFFALSE 15423
// for ta in filter do
15223: LD_ADDR_VAR 0 3
15227: PUSH
15228: LD_VAR 0 7
15232: PUSH
15233: FOR_IN
15234: IFFALSE 15419
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
15236: LD_VAR 0 6
15240: PUSH
15241: LD_VAR 0 5
15245: ARRAY
15246: PPUSH
15247: LD_VAR 0 3
15251: PPUSH
15252: CALL_OW 296
15256: PUSH
15257: LD_INT 15
15259: LESSEQUAL
15260: IFFALSE 15417
// begin case c of 1 :
15262: LD_VAR 0 4
15266: PUSH
15267: LD_INT 1
15269: DOUBLE
15270: EQUAL
15271: IFTRUE 15275
15273: GO 15313
15275: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
15276: LD_VAR 0 6
15280: PUSH
15281: LD_VAR 0 5
15285: ARRAY
15286: PPUSH
15287: LD_VAR 0 3
15291: PPUSH
15292: CALL_OW 250
15296: PPUSH
15297: LD_VAR 0 3
15301: PPUSH
15302: CALL_OW 251
15306: PPUSH
15307: CALL_OW 154
15311: GO 15417
15313: LD_INT 2
15315: DOUBLE
15316: EQUAL
15317: IFTRUE 15321
15319: GO 15385
15321: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
15322: LD_VAR 0 6
15326: PUSH
15327: LD_VAR 0 5
15331: ARRAY
15332: PPUSH
15333: LD_VAR 0 3
15337: PPUSH
15338: CALL_OW 250
15342: PUSH
15343: LD_INT 1
15345: NEG
15346: PPUSH
15347: LD_INT 1
15349: PPUSH
15350: CALL_OW 12
15354: PLUS
15355: PPUSH
15356: LD_VAR 0 3
15360: PPUSH
15361: CALL_OW 251
15365: PUSH
15366: LD_INT 1
15368: NEG
15369: PPUSH
15370: LD_INT 1
15372: PPUSH
15373: CALL_OW 12
15377: PLUS
15378: PPUSH
15379: CALL_OW 153
15383: GO 15417
15385: LD_INT 3
15387: DOUBLE
15388: EQUAL
15389: IFTRUE 15393
15391: GO 15416
15393: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
15394: LD_VAR 0 6
15398: PUSH
15399: LD_VAR 0 5
15403: ARRAY
15404: PPUSH
15405: LD_VAR 0 3
15409: PPUSH
15410: CALL_OW 115
15414: GO 15417
15416: POP
// end ; end ;
15417: GO 15233
15419: POP
15420: POP
15421: GO 15220
15423: POP
15424: POP
// end ;
15425: LD_VAR 0 2
15429: RET
// export function PlaceMines ( area , n ) ; var i , r , x ; begin
15430: LD_INT 0
15432: PPUSH
15433: PPUSH
15434: PPUSH
15435: PPUSH
// r := 100 ;
15436: LD_ADDR_VAR 0 5
15440: PUSH
15441: LD_INT 100
15443: ST_TO_ADDR
// x := 0 ;
15444: LD_ADDR_VAR 0 6
15448: PUSH
15449: LD_INT 0
15451: ST_TO_ADDR
// while ( x < n ) do
15452: LD_VAR 0 6
15456: PUSH
15457: LD_VAR 0 2
15461: LESS
15462: IFFALSE 15749
// for i = 1 to AreaToList ( area , 0 ) [ 1 ] do
15464: LD_ADDR_VAR 0 4
15468: PUSH
15469: DOUBLE
15470: LD_INT 1
15472: DEC
15473: ST_TO_ADDR
15474: LD_VAR 0 1
15478: PPUSH
15479: LD_INT 0
15481: PPUSH
15482: CALL_OW 517
15486: PUSH
15487: LD_INT 1
15489: ARRAY
15490: PUSH
15491: FOR_TO
15492: IFFALSE 15745
// begin if r > 50 then
15494: LD_VAR 0 5
15498: PUSH
15499: LD_INT 50
15501: GREATER
15502: IFFALSE 15721
// begin if not MineAtPos ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ) then
15504: LD_VAR 0 1
15508: PPUSH
15509: LD_INT 0
15511: PPUSH
15512: CALL_OW 517
15516: PUSH
15517: LD_INT 1
15519: ARRAY
15520: PUSH
15521: LD_VAR 0 4
15525: ARRAY
15526: PPUSH
15527: LD_VAR 0 1
15531: PPUSH
15532: LD_INT 0
15534: PPUSH
15535: CALL_OW 517
15539: PUSH
15540: LD_INT 2
15542: ARRAY
15543: PUSH
15544: LD_VAR 0 4
15548: ARRAY
15549: PPUSH
15550: CALL_OW 458
15554: NOT
15555: IFFALSE 15705
// begin PlaceMine ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] , 8 , 0 ) ;
15557: LD_VAR 0 1
15561: PPUSH
15562: LD_INT 0
15564: PPUSH
15565: CALL_OW 517
15569: PUSH
15570: LD_INT 1
15572: ARRAY
15573: PUSH
15574: LD_VAR 0 4
15578: ARRAY
15579: PPUSH
15580: LD_VAR 0 1
15584: PPUSH
15585: LD_INT 0
15587: PPUSH
15588: CALL_OW 517
15592: PUSH
15593: LD_INT 2
15595: ARRAY
15596: PUSH
15597: LD_VAR 0 4
15601: ARRAY
15602: PPUSH
15603: LD_INT 8
15605: PPUSH
15606: LD_INT 0
15608: PPUSH
15609: CALL_OW 454
// arabianMines := Insert ( arabianMines , 1 , [ AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ] ) ;
15613: LD_ADDR_EXP 44
15617: PUSH
15618: LD_EXP 44
15622: PPUSH
15623: LD_INT 1
15625: PPUSH
15626: LD_VAR 0 1
15630: PPUSH
15631: LD_INT 0
15633: PPUSH
15634: CALL_OW 517
15638: PUSH
15639: LD_INT 1
15641: ARRAY
15642: PUSH
15643: LD_VAR 0 4
15647: ARRAY
15648: PUSH
15649: LD_VAR 0 1
15653: PPUSH
15654: LD_INT 0
15656: PPUSH
15657: CALL_OW 517
15661: PUSH
15662: LD_INT 2
15664: ARRAY
15665: PUSH
15666: LD_VAR 0 4
15670: ARRAY
15671: PUSH
15672: EMPTY
15673: LIST
15674: LIST
15675: PPUSH
15676: CALL_OW 2
15680: ST_TO_ADDR
// r := 0 ;
15681: LD_ADDR_VAR 0 5
15685: PUSH
15686: LD_INT 0
15688: ST_TO_ADDR
// x := x + 1 ;
15689: LD_ADDR_VAR 0 6
15693: PUSH
15694: LD_VAR 0 6
15698: PUSH
15699: LD_INT 1
15701: PLUS
15702: ST_TO_ADDR
// end else
15703: GO 15719
// r := r + 35 ;
15705: LD_ADDR_VAR 0 5
15709: PUSH
15710: LD_VAR 0 5
15714: PUSH
15715: LD_INT 35
15717: PLUS
15718: ST_TO_ADDR
// end else
15719: GO 15743
// r := r + rand ( 10 , 25 ) ;
15721: LD_ADDR_VAR 0 5
15725: PUSH
15726: LD_VAR 0 5
15730: PUSH
15731: LD_INT 10
15733: PPUSH
15734: LD_INT 25
15736: PPUSH
15737: CALL_OW 12
15741: PLUS
15742: ST_TO_ADDR
// end ;
15743: GO 15491
15745: POP
15746: POP
15747: GO 15452
// end ;
15749: LD_VAR 0 3
15753: RET
// export function DefendDepot ( side , build ) ; var i , j , tmpTab ; begin
15754: LD_INT 0
15756: PPUSH
15757: PPUSH
15758: PPUSH
15759: PPUSH
// tmpTab = [ ] ;
15760: LD_ADDR_VAR 0 6
15764: PUSH
15765: EMPTY
15766: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) > 0 then
15767: LD_INT 22
15769: PUSH
15770: LD_VAR 0 1
15774: PUSH
15775: EMPTY
15776: LIST
15777: LIST
15778: PUSH
15779: LD_INT 30
15781: PUSH
15782: LD_INT 32
15784: PUSH
15785: EMPTY
15786: LIST
15787: LIST
15788: PUSH
15789: EMPTY
15790: LIST
15791: LIST
15792: PPUSH
15793: CALL_OW 69
15797: PUSH
15798: LD_INT 0
15800: GREATER
15801: IFFALSE 15884
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
15803: LD_ADDR_VAR 0 4
15807: PUSH
15808: LD_INT 22
15810: PUSH
15811: LD_VAR 0 1
15815: PUSH
15816: EMPTY
15817: LIST
15818: LIST
15819: PUSH
15820: LD_INT 30
15822: PUSH
15823: LD_INT 32
15825: PUSH
15826: EMPTY
15827: LIST
15828: LIST
15829: PUSH
15830: EMPTY
15831: LIST
15832: LIST
15833: PPUSH
15834: CALL_OW 69
15838: PUSH
15839: FOR_IN
15840: IFFALSE 15882
// begin for j in UnitsInside ( i ) do
15842: LD_ADDR_VAR 0 5
15846: PUSH
15847: LD_VAR 0 4
15851: PPUSH
15852: CALL_OW 313
15856: PUSH
15857: FOR_IN
15858: IFFALSE 15878
// tmpTab = tmpTab ^ j ;
15860: LD_ADDR_VAR 0 6
15864: PUSH
15865: LD_VAR 0 6
15869: PUSH
15870: LD_VAR 0 5
15874: ADD
15875: ST_TO_ADDR
15876: GO 15857
15878: POP
15879: POP
// end ;
15880: GO 15839
15882: POP
15883: POP
// end ; ComAgressiveMove ( tmpTab , GetX ( build ) , GetY ( build ) ) ;
15884: LD_VAR 0 6
15888: PPUSH
15889: LD_VAR 0 2
15893: PPUSH
15894: CALL_OW 250
15898: PPUSH
15899: LD_VAR 0 2
15903: PPUSH
15904: CALL_OW 251
15908: PPUSH
15909: CALL_OW 114
// end ;
15913: LD_VAR 0 3
15917: RET
// export function PrepareNature ; var i , un ; begin
15918: LD_INT 0
15920: PPUSH
15921: PPUSH
15922: PPUSH
// uc_side := 0 ;
15923: LD_ADDR_OWVAR 20
15927: PUSH
15928: LD_INT 0
15930: ST_TO_ADDR
// uc_nation := 0 ;
15931: LD_ADDR_OWVAR 21
15935: PUSH
15936: LD_INT 0
15938: ST_TO_ADDR
// InitHc ;
15939: CALL_OW 19
// hc_class := class_fish ;
15943: LD_ADDR_OWVAR 28
15947: PUSH
15948: LD_INT 20
15950: ST_TO_ADDR
// for i = 1 to 6 do
15951: LD_ADDR_VAR 0 2
15955: PUSH
15956: DOUBLE
15957: LD_INT 1
15959: DEC
15960: ST_TO_ADDR
15961: LD_INT 6
15963: PUSH
15964: FOR_TO
15965: IFFALSE 15984
// PlaceUnitArea ( CreateHuman , waterArea , false ) ;
15967: CALL_OW 44
15971: PPUSH
15972: LD_INT 23
15974: PPUSH
15975: LD_INT 0
15977: PPUSH
15978: CALL_OW 49
15982: GO 15964
15984: POP
15985: POP
// for i = 1 to Difficulty + 2 do
15986: LD_ADDR_VAR 0 2
15990: PUSH
15991: DOUBLE
15992: LD_INT 1
15994: DEC
15995: ST_TO_ADDR
15996: LD_OWVAR 67
16000: PUSH
16001: LD_INT 2
16003: PLUS
16004: PUSH
16005: FOR_TO
16006: IFFALSE 16115
// begin hc_sex = sex_male ;
16008: LD_ADDR_OWVAR 27
16012: PUSH
16013: LD_INT 1
16015: ST_TO_ADDR
// uc_side = 0 ;
16016: LD_ADDR_OWVAR 20
16020: PUSH
16021: LD_INT 0
16023: ST_TO_ADDR
// uc_nation = nation_nature ;
16024: LD_ADDR_OWVAR 21
16028: PUSH
16029: LD_INT 0
16031: ST_TO_ADDR
// hc_class = class_tiger ;
16032: LD_ADDR_OWVAR 28
16036: PUSH
16037: LD_INT 14
16039: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
16040: LD_ADDR_OWVAR 31
16044: PUSH
16045: LD_EXP 37
16049: PUSH
16050: LD_INT 0
16052: PUSH
16053: LD_INT 0
16055: PUSH
16056: LD_INT 0
16058: PUSH
16059: EMPTY
16060: LIST
16061: LIST
16062: LIST
16063: LIST
16064: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
16065: LD_ADDR_OWVAR 35
16069: PUSH
16070: LD_INT 5
16072: NEG
16073: PPUSH
16074: LD_INT 5
16076: PPUSH
16077: CALL_OW 12
16081: PUSH
16082: LD_OWVAR 67
16086: MUL
16087: ST_TO_ADDR
// un = CreateHuman ;
16088: LD_ADDR_VAR 0 3
16092: PUSH
16093: CALL_OW 44
16097: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
16098: LD_VAR 0 3
16102: PPUSH
16103: LD_INT 24
16105: PPUSH
16106: LD_INT 0
16108: PPUSH
16109: CALL_OW 49
// end ;
16113: GO 16005
16115: POP
16116: POP
// for i = 1 to rand ( 3 , 4 ) do
16117: LD_ADDR_VAR 0 2
16121: PUSH
16122: DOUBLE
16123: LD_INT 1
16125: DEC
16126: ST_TO_ADDR
16127: LD_INT 3
16129: PPUSH
16130: LD_INT 4
16132: PPUSH
16133: CALL_OW 12
16137: PUSH
16138: FOR_TO
16139: IFFALSE 16231
// begin hc_sex = sex_male ;
16141: LD_ADDR_OWVAR 27
16145: PUSH
16146: LD_INT 1
16148: ST_TO_ADDR
// uc_side = 0 ;
16149: LD_ADDR_OWVAR 20
16153: PUSH
16154: LD_INT 0
16156: ST_TO_ADDR
// uc_nation = nation_nature ;
16157: LD_ADDR_OWVAR 21
16161: PUSH
16162: LD_INT 0
16164: ST_TO_ADDR
// hc_class = 18 ;
16165: LD_ADDR_OWVAR 28
16169: PUSH
16170: LD_INT 18
16172: ST_TO_ADDR
// hc_skills = [ 0 , 0 , 0 , 0 ] ;
16173: LD_ADDR_OWVAR 31
16177: PUSH
16178: LD_INT 0
16180: PUSH
16181: LD_INT 0
16183: PUSH
16184: LD_INT 0
16186: PUSH
16187: LD_INT 0
16189: PUSH
16190: EMPTY
16191: LIST
16192: LIST
16193: LIST
16194: LIST
16195: ST_TO_ADDR
// hc_agressivity = 0 ;
16196: LD_ADDR_OWVAR 35
16200: PUSH
16201: LD_INT 0
16203: ST_TO_ADDR
// un = CreateHuman ;
16204: LD_ADDR_VAR 0 3
16208: PUSH
16209: CALL_OW 44
16213: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
16214: LD_VAR 0 3
16218: PPUSH
16219: LD_INT 24
16221: PPUSH
16222: LD_INT 0
16224: PPUSH
16225: CALL_OW 49
// end ;
16229: GO 16138
16231: POP
16232: POP
// for i = 1 to rand ( 1 , 3 ) do
16233: LD_ADDR_VAR 0 2
16237: PUSH
16238: DOUBLE
16239: LD_INT 1
16241: DEC
16242: ST_TO_ADDR
16243: LD_INT 1
16245: PPUSH
16246: LD_INT 3
16248: PPUSH
16249: CALL_OW 12
16253: PUSH
16254: FOR_TO
16255: IFFALSE 16403
// begin hc_sex = sex_male ;
16257: LD_ADDR_OWVAR 27
16261: PUSH
16262: LD_INT 1
16264: ST_TO_ADDR
// uc_side = 0 ;
16265: LD_ADDR_OWVAR 20
16269: PUSH
16270: LD_INT 0
16272: ST_TO_ADDR
// uc_nation = nation_nature ;
16273: LD_ADDR_OWVAR 21
16277: PUSH
16278: LD_INT 0
16280: ST_TO_ADDR
// hc_class = class_apeman ;
16281: LD_ADDR_OWVAR 28
16285: PUSH
16286: LD_INT 12
16288: ST_TO_ADDR
// hc_skills = [ rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) ] ;
16289: LD_ADDR_OWVAR 31
16293: PUSH
16294: LD_EXP 36
16298: PPUSH
16299: LD_EXP 37
16303: PPUSH
16304: CALL_OW 12
16308: PUSH
16309: LD_EXP 36
16313: PPUSH
16314: LD_EXP 37
16318: PPUSH
16319: CALL_OW 12
16323: PUSH
16324: LD_EXP 36
16328: PPUSH
16329: LD_EXP 37
16333: PPUSH
16334: CALL_OW 12
16338: PUSH
16339: LD_EXP 36
16343: PPUSH
16344: LD_EXP 37
16348: PPUSH
16349: CALL_OW 12
16353: PUSH
16354: EMPTY
16355: LIST
16356: LIST
16357: LIST
16358: LIST
16359: ST_TO_ADDR
// hc_agressivity = rand ( 1 , 20 ) ;
16360: LD_ADDR_OWVAR 35
16364: PUSH
16365: LD_INT 1
16367: PPUSH
16368: LD_INT 20
16370: PPUSH
16371: CALL_OW 12
16375: ST_TO_ADDR
// un = CreateHuman ;
16376: LD_ADDR_VAR 0 3
16380: PUSH
16381: CALL_OW 44
16385: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
16386: LD_VAR 0 3
16390: PPUSH
16391: LD_INT 24
16393: PPUSH
16394: LD_INT 0
16396: PPUSH
16397: CALL_OW 49
// end ;
16401: GO 16254
16403: POP
16404: POP
// end ; end_of_file
16405: LD_VAR 0 1
16409: RET
// on UnitDestroyed ( unit ) do var i ;
16410: LD_INT 0
16412: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_human then
16413: LD_VAR 0 1
16417: PPUSH
16418: CALL_OW 255
16422: PUSH
16423: LD_INT 3
16425: EQUAL
16426: PUSH
16427: LD_VAR 0 1
16431: PPUSH
16432: CALL_OW 247
16436: PUSH
16437: LD_INT 1
16439: EQUAL
16440: AND
16441: IFFALSE 16505
// begin for i in RuScientists do
16443: LD_ADDR_VAR 0 2
16447: PUSH
16448: LD_EXP 34
16452: PUSH
16453: FOR_IN
16454: IFFALSE 16503
// if i = unit then
16456: LD_VAR 0 2
16460: PUSH
16461: LD_VAR 0 1
16465: EQUAL
16466: IFFALSE 16501
// begin RuScientists = RuScientists diff [ unit ] ;
16468: LD_ADDR_EXP 34
16472: PUSH
16473: LD_EXP 34
16477: PUSH
16478: LD_VAR 0 1
16482: PUSH
16483: EMPTY
16484: LIST
16485: DIFF
16486: ST_TO_ADDR
// sciCounter = sciCounter + 1 ;
16487: LD_ADDR_EXP 35
16491: PUSH
16492: LD_EXP 35
16496: PUSH
16497: LD_INT 1
16499: PLUS
16500: ST_TO_ADDR
// end ;
16501: GO 16453
16503: POP
16504: POP
// end ; end ;
16505: PPOPN 2
16507: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if GetWeapon ( killerUnit ) = us_laser then
16508: LD_VAR 0 3
16512: PPUSH
16513: CALL_OW 264
16517: PUSH
16518: LD_INT 9
16520: EQUAL
16521: IFFALSE 16537
// laserCounterDestroy := laserCounterDestroy + 1 ;
16523: LD_ADDR_EXP 50
16527: PUSH
16528: LD_EXP 50
16532: PUSH
16533: LD_INT 1
16535: PLUS
16536: ST_TO_ADDR
// end ;
16537: PPOPN 3
16539: END
// on UnitTeleported ( building , human ) do begin if building = ruteleprt and GetSide ( human ) = 1 and eventVar1 = 0 then
16540: LD_VAR 0 1
16544: PUSH
16545: LD_INT 10
16547: EQUAL
16548: PUSH
16549: LD_VAR 0 2
16553: PPUSH
16554: CALL_OW 255
16558: PUSH
16559: LD_INT 1
16561: EQUAL
16562: AND
16563: PUSH
16564: LD_EXP 47
16568: PUSH
16569: LD_INT 0
16571: EQUAL
16572: AND
16573: IFFALSE 16685
// begin eventVar1 = 1 ;
16575: LD_ADDR_EXP 47
16579: PUSH
16580: LD_INT 1
16582: ST_TO_ADDR
// teleportExplored = 1 ;
16583: LD_ADDR_EXP 33
16587: PUSH
16588: LD_INT 1
16590: ST_TO_ADDR
// ChangeMissionObjectives ( M2a ) ;
16591: LD_STRING M2a
16593: PPUSH
16594: CALL_OW 337
// wait ( 0 0$2 ) ;
16598: LD_INT 70
16600: PPUSH
16601: CALL_OW 67
// DialogueOn ;
16605: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , DT3a-Sol1-1 , DT3a-FSol1-1 ) ;
16609: LD_INT 22
16611: PUSH
16612: LD_INT 1
16614: PUSH
16615: EMPTY
16616: LIST
16617: LIST
16618: PUSH
16619: LD_INT 21
16621: PUSH
16622: LD_INT 1
16624: PUSH
16625: EMPTY
16626: LIST
16627: LIST
16628: PUSH
16629: EMPTY
16630: LIST
16631: LIST
16632: PPUSH
16633: CALL_OW 69
16637: PPUSH
16638: LD_STRING DT3a-Sol1-1
16640: PPUSH
16641: LD_STRING DT3a-FSol1-1
16643: PPUSH
16644: CALL 12251 0 3
// Say ( JMM , DT3a-JMM-1 ) ;
16648: LD_EXP 1
16652: PPUSH
16653: LD_STRING DT3a-JMM-1
16655: PPUSH
16656: CALL_OW 88
// CenterNowOnUnits ( human ) ;
16660: LD_VAR 0 2
16664: PPUSH
16665: CALL_OW 87
// Say ( JMM , DT3a-JMM-1a ) ;
16669: LD_EXP 1
16673: PPUSH
16674: LD_STRING DT3a-JMM-1a
16676: PPUSH
16677: CALL_OW 88
// DialogueOff ;
16681: CALL_OW 7
// end ; if building = ruteleprt and GetType ( human ) = unit_vehicle and GetSide ( human ) = 3 and vehicleTeleported = 0 then
16685: LD_VAR 0 1
16689: PUSH
16690: LD_INT 10
16692: EQUAL
16693: PUSH
16694: LD_VAR 0 2
16698: PPUSH
16699: CALL_OW 247
16703: PUSH
16704: LD_INT 2
16706: EQUAL
16707: AND
16708: PUSH
16709: LD_VAR 0 2
16713: PPUSH
16714: CALL_OW 255
16718: PUSH
16719: LD_INT 3
16721: EQUAL
16722: AND
16723: PUSH
16724: LD_EXP 28
16728: PUSH
16729: LD_INT 0
16731: EQUAL
16732: AND
16733: IFFALSE 16750
// begin wait ( 0 0$3 ) ;
16735: LD_INT 105
16737: PPUSH
16738: CALL_OW 67
// vehicleTeleported = 1 ;
16742: LD_ADDR_EXP 28
16746: PUSH
16747: LD_INT 1
16749: ST_TO_ADDR
// end ; if building = ruteleprt and GetType ( human ) = unit_vehicle and GetSide ( human ) = 3 and vehicleTeleported = 2 then
16750: LD_VAR 0 1
16754: PUSH
16755: LD_INT 10
16757: EQUAL
16758: PUSH
16759: LD_VAR 0 2
16763: PPUSH
16764: CALL_OW 247
16768: PUSH
16769: LD_INT 2
16771: EQUAL
16772: AND
16773: PUSH
16774: LD_VAR 0 2
16778: PPUSH
16779: CALL_OW 255
16783: PUSH
16784: LD_INT 3
16786: EQUAL
16787: AND
16788: PUSH
16789: LD_EXP 28
16793: PUSH
16794: LD_INT 2
16796: EQUAL
16797: AND
16798: IFFALSE 16815
// begin wait ( 0 0$3 ) ;
16800: LD_INT 105
16802: PPUSH
16803: CALL_OW 67
// vehicleTeleported = 3 ;
16807: LD_ADDR_EXP 28
16811: PUSH
16812: LD_INT 3
16814: ST_TO_ADDR
// end ; if building = ruteleprt and GetType ( human ) = unit_vehicle and GetSide ( human ) = 3 then
16815: LD_VAR 0 1
16819: PUSH
16820: LD_INT 10
16822: EQUAL
16823: PUSH
16824: LD_VAR 0 2
16828: PPUSH
16829: CALL_OW 247
16833: PUSH
16834: LD_INT 2
16836: EQUAL
16837: AND
16838: PUSH
16839: LD_VAR 0 2
16843: PPUSH
16844: CALL_OW 255
16848: PUSH
16849: LD_INT 3
16851: EQUAL
16852: AND
16853: IFFALSE 16869
// tpCounter = tpCounter + 1 ;
16855: LD_ADDR_EXP 29
16859: PUSH
16860: LD_EXP 29
16864: PUSH
16865: LD_INT 1
16867: PLUS
16868: ST_TO_ADDR
// end ;
16869: PPOPN 2
16871: END
// on VehicleConstructed ( vehicle , factory ) do begin if GetWeapon ( vehicle ) = us_rocket_launcher then
16872: LD_VAR 0 1
16876: PPUSH
16877: CALL_OW 264
16881: PUSH
16882: LD_INT 7
16884: EQUAL
16885: IFFALSE 16895
// rocketBuilded := true ;
16887: LD_ADDR_EXP 51
16891: PUSH
16892: LD_INT 1
16894: ST_TO_ADDR
// if factory = ru_fact or factory = rufab2 then
16895: LD_VAR 0 2
16899: PUSH
16900: LD_INT 21
16902: EQUAL
16903: PUSH
16904: LD_VAR 0 2
16908: PUSH
16909: LD_INT 112
16911: EQUAL
16912: OR
16913: IFFALSE 17091
// if GetSide ( vehicle ) = 3 then
16915: LD_VAR 0 1
16919: PPUSH
16920: CALL_OW 255
16924: PUSH
16925: LD_INT 3
16927: EQUAL
16928: IFFALSE 17091
// begin if GetWeapon ( vehicle ) = 46 or GetWeapon ( vehicle ) = 45 or GetWeapon ( vehicle ) = 44 then
16930: LD_VAR 0 1
16934: PPUSH
16935: CALL_OW 264
16939: PUSH
16940: LD_INT 46
16942: EQUAL
16943: PUSH
16944: LD_VAR 0 1
16948: PPUSH
16949: CALL_OW 264
16953: PUSH
16954: LD_INT 45
16956: EQUAL
16957: OR
16958: PUSH
16959: LD_VAR 0 1
16963: PPUSH
16964: CALL_OW 264
16968: PUSH
16969: LD_INT 44
16971: EQUAL
16972: OR
16973: IFFALSE 17048
// begin russianTanks = russianTanks ^ vehicle ;
16975: LD_ADDR_EXP 39
16979: PUSH
16980: LD_EXP 39
16984: PUSH
16985: LD_VAR 0 1
16989: ADD
16990: ST_TO_ADDR
// if attackTactic = 1 or attackTactic = 0 then
16991: LD_EXP 43
16995: PUSH
16996: LD_INT 1
16998: EQUAL
16999: PUSH
17000: LD_EXP 43
17004: PUSH
17005: LD_INT 0
17007: EQUAL
17008: OR
17009: IFFALSE 17023
// ComEnterUnit ( vehicle , ruteleprt ) ;
17011: LD_VAR 0 1
17015: PPUSH
17016: LD_INT 10
17018: PPUSH
17019: CALL_OW 120
// if attackTactic = 2 then
17023: LD_EXP 43
17027: PUSH
17028: LD_INT 2
17030: EQUAL
17031: IFFALSE 17048
// ComMoveXY ( vehicle , 88 , 69 ) ;
17033: LD_VAR 0 1
17037: PPUSH
17038: LD_INT 88
17040: PPUSH
17041: LD_INT 69
17043: PPUSH
17044: CALL_OW 111
// end ; if GetWeapon ( vehicle ) = 49 then
17048: LD_VAR 0 1
17052: PPUSH
17053: CALL_OW 264
17057: PUSH
17058: LD_INT 49
17060: EQUAL
17061: IFFALSE 17091
// begin russianTimeLapsers = russianTimeLapsers ^ vehicle ;
17063: LD_ADDR_EXP 40
17067: PUSH
17068: LD_EXP 40
17072: PUSH
17073: LD_VAR 0 1
17077: ADD
17078: ST_TO_ADDR
// ComEnterUnit ( vehicle , rutp ) ;
17079: LD_VAR 0 1
17083: PPUSH
17084: LD_INT 137
17086: PPUSH
17087: CALL_OW 120
// end ; end ; end ;
17091: PPOPN 2
17093: END
// on UnitGoesToRed ( unit ) do var i ;
17094: LD_INT 0
17096: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle then
17097: LD_VAR 0 1
17101: PPUSH
17102: CALL_OW 255
17106: PUSH
17107: LD_INT 3
17109: EQUAL
17110: PUSH
17111: LD_VAR 0 1
17115: PPUSH
17116: CALL_OW 247
17120: PUSH
17121: LD_INT 2
17123: EQUAL
17124: AND
17125: IFFALSE 17243
// begin if russianTanks > 0 then
17127: LD_EXP 39
17131: PUSH
17132: LD_INT 0
17134: GREATER
17135: IFFALSE 17185
// for i in russianTanks do
17137: LD_ADDR_VAR 0 2
17141: PUSH
17142: LD_EXP 39
17146: PUSH
17147: FOR_IN
17148: IFFALSE 17183
// if i = unit then
17150: LD_VAR 0 2
17154: PUSH
17155: LD_VAR 0 1
17159: EQUAL
17160: IFFALSE 17181
// russianTanks = russianTanks diff [ unit ] ;
17162: LD_ADDR_EXP 39
17166: PUSH
17167: LD_EXP 39
17171: PUSH
17172: LD_VAR 0 1
17176: PUSH
17177: EMPTY
17178: LIST
17179: DIFF
17180: ST_TO_ADDR
17181: GO 17147
17183: POP
17184: POP
// if russianTimeLapsers > 0 then
17185: LD_EXP 40
17189: PUSH
17190: LD_INT 0
17192: GREATER
17193: IFFALSE 17243
// for i in russianTimeLapsers do
17195: LD_ADDR_VAR 0 2
17199: PUSH
17200: LD_EXP 40
17204: PUSH
17205: FOR_IN
17206: IFFALSE 17241
// if i = unit then
17208: LD_VAR 0 2
17212: PUSH
17213: LD_VAR 0 1
17217: EQUAL
17218: IFFALSE 17239
// russianTimeLapsers = russianTimeLapsers diff [ unit ] ;
17220: LD_ADDR_EXP 40
17224: PUSH
17225: LD_EXP 40
17229: PUSH
17230: LD_VAR 0 1
17234: PUSH
17235: EMPTY
17236: LIST
17237: DIFF
17238: ST_TO_ADDR
17239: GO 17205
17241: POP
17242: POP
// end ; end ;
17243: PPOPN 2
17245: END
// on LeaveVehicle ( vehicle , human ) do var i ;
17246: LD_INT 0
17248: PPUSH
// begin if GetSide ( human ) = 3 and GetClass ( human ) = 3 and GetSide ( ru_fact ) = 3 and IsOk ( ru_fact ) then
17249: LD_VAR 0 2
17253: PPUSH
17254: CALL_OW 255
17258: PUSH
17259: LD_INT 3
17261: EQUAL
17262: PUSH
17263: LD_VAR 0 2
17267: PPUSH
17268: CALL_OW 257
17272: PUSH
17273: LD_INT 3
17275: EQUAL
17276: AND
17277: PUSH
17278: LD_INT 21
17280: PPUSH
17281: CALL_OW 255
17285: PUSH
17286: LD_INT 3
17288: EQUAL
17289: AND
17290: PUSH
17291: LD_INT 21
17293: PPUSH
17294: CALL_OW 302
17298: AND
17299: IFFALSE 17313
// ComEnterUnit ( human , ru_fact ) ;
17301: LD_VAR 0 2
17305: PPUSH
17306: LD_INT 21
17308: PPUSH
17309: CALL_OW 120
// if GetClass ( human ) = 4 and GetSide ( human ) = 3 and ruAI = 0 then
17313: LD_VAR 0 2
17317: PPUSH
17318: CALL_OW 257
17322: PUSH
17323: LD_INT 4
17325: EQUAL
17326: PUSH
17327: LD_VAR 0 2
17331: PPUSH
17332: CALL_OW 255
17336: PUSH
17337: LD_INT 3
17339: EQUAL
17340: AND
17341: PUSH
17342: LD_EXP 41
17346: PUSH
17347: LD_INT 0
17349: EQUAL
17350: AND
17351: IFFALSE 17413
// for i in RuScientists do
17353: LD_ADDR_VAR 0 3
17357: PUSH
17358: LD_EXP 34
17362: PUSH
17363: FOR_IN
17364: IFFALSE 17411
// if i = human then
17366: LD_VAR 0 3
17370: PUSH
17371: LD_VAR 0 2
17375: EQUAL
17376: IFFALSE 17409
// ComMoveToArea ( i , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) ;
17378: LD_VAR 0 3
17382: PPUSH
17383: LD_INT 13
17385: PUSH
17386: LD_INT 14
17388: PUSH
17389: EMPTY
17390: LIST
17391: LIST
17392: PUSH
17393: LD_INT 1
17395: PPUSH
17396: LD_INT 2
17398: PPUSH
17399: CALL_OW 12
17403: ARRAY
17404: PPUSH
17405: CALL_OW 113
17409: GO 17363
17411: POP
17412: POP
// end ;
17413: PPOPN 3
17415: END
// on EnterVehicle ( vehicle , human ) do var i , rnd ;
17416: LD_INT 0
17418: PPUSH
17419: PPUSH
// begin if GetSide ( human ) = 3 and GetClass ( human ) = 4 then
17420: LD_VAR 0 2
17424: PPUSH
17425: CALL_OW 255
17429: PUSH
17430: LD_INT 3
17432: EQUAL
17433: PUSH
17434: LD_VAR 0 2
17438: PPUSH
17439: CALL_OW 257
17443: PUSH
17444: LD_INT 4
17446: EQUAL
17447: AND
17448: IFFALSE 17590
// for i in RuScientists do
17450: LD_ADDR_VAR 0 3
17454: PUSH
17455: LD_EXP 34
17459: PUSH
17460: FOR_IN
17461: IFFALSE 17588
// if i = human then
17463: LD_VAR 0 3
17467: PUSH
17468: LD_VAR 0 2
17472: EQUAL
17473: IFFALSE 17586
// if IsOk ( rutp ) then
17475: LD_INT 137
17477: PPUSH
17478: CALL_OW 302
17482: IFFALSE 17555
// begin rnd = rand ( 1 , 2 ) ;
17484: LD_ADDR_VAR 0 4
17488: PUSH
17489: LD_INT 1
17491: PPUSH
17492: LD_INT 2
17494: PPUSH
17495: CALL_OW 12
17499: ST_TO_ADDR
// if rnd = 1 then
17500: LD_VAR 0 4
17504: PUSH
17505: LD_INT 1
17507: EQUAL
17508: IFFALSE 17522
// ComEnterUnit ( vehicle , rutp ) ;
17510: LD_VAR 0 1
17514: PPUSH
17515: LD_INT 137
17517: PPUSH
17518: CALL_OW 120
// AddComMoveToArea ( vehicle , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) ;
17522: LD_VAR 0 1
17526: PPUSH
17527: LD_INT 13
17529: PUSH
17530: LD_INT 14
17532: PUSH
17533: EMPTY
17534: LIST
17535: LIST
17536: PUSH
17537: LD_INT 1
17539: PPUSH
17540: LD_INT 2
17542: PPUSH
17543: CALL_OW 12
17547: ARRAY
17548: PPUSH
17549: CALL_OW 173
// end else
17553: GO 17586
// begin ComMoveToArea ( vehicle , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) ;
17555: LD_VAR 0 1
17559: PPUSH
17560: LD_INT 13
17562: PUSH
17563: LD_INT 14
17565: PUSH
17566: EMPTY
17567: LIST
17568: LIST
17569: PUSH
17570: LD_INT 1
17572: PPUSH
17573: LD_INT 2
17575: PPUSH
17576: CALL_OW 12
17580: ARRAY
17581: PPUSH
17582: CALL_OW 113
// end ;
17586: GO 17460
17588: POP
17589: POP
// end ;
17590: PPOPN 4
17592: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
17593: LD_VAR 0 1
17597: PPUSH
17598: CALL 19825 0 1
// end ; end_of_file
17602: PPOPN 1
17604: END
// every 0 0$1 trigger ruAI = 1 do
17605: LD_EXP 41
17609: PUSH
17610: LD_INT 1
17612: EQUAL
17613: IFFALSE 17742
17615: GO 17617
17617: DISABLE
// begin enable ;
17618: ENABLE
// RepairAndRebuildBase ( 3 , ruwestdepot , RuWestBase , ruDestroyedBuildings ) ;
17619: LD_INT 3
17621: PPUSH
17622: LD_INT 6
17624: PPUSH
17625: LD_INT 9
17627: PPUSH
17628: LD_EXP 38
17632: PPUSH
17633: CALL 13220 0 4
// RepairAndRebuildBase ( 3 , rueastdepot , RuEastBase , ruDestroyedBuildings ) ;
17637: LD_INT 3
17639: PPUSH
17640: LD_INT 4
17642: PPUSH
17643: LD_INT 10
17645: PPUSH
17646: LD_EXP 38
17650: PPUSH
17651: CALL 13220 0 4
// CraneRepairBuild ( 3 , RuWestBase ) ;
17655: LD_INT 3
17657: PPUSH
17658: LD_INT 9
17660: PPUSH
17661: CALL 14421 0 2
// CraneRepairBuild ( 3 , RuEastBase ) ;
17665: LD_INT 3
17667: PPUSH
17668: LD_INT 10
17670: PPUSH
17671: CALL 14421 0 2
// HealUnitInBase ( 3 , RuWestHealArea , RuWestBase , rulab1 ) ;
17675: LD_INT 3
17677: PPUSH
17678: LD_INT 16
17680: PPUSH
17681: LD_INT 9
17683: PPUSH
17684: LD_INT 91
17686: PPUSH
17687: CALL 13611 0 4
// HealUnitInBase ( 3 , RuEastHealArea , RuEastBase , [ rulab2 , rulab3 , rulab4 ] ) ;
17691: LD_INT 3
17693: PPUSH
17694: LD_INT 17
17696: PPUSH
17697: LD_INT 10
17699: PPUSH
17700: LD_INT 47
17702: PUSH
17703: LD_INT 129
17705: PUSH
17706: LD_INT 135
17708: PUSH
17709: EMPTY
17710: LIST
17711: LIST
17712: LIST
17713: PPUSH
17714: CALL 13611 0 4
// AttackVehicles ( 3 ) ;
17718: LD_INT 3
17720: PPUSH
17721: CALL 14748 0 1
// IntBazooka ( 3 ) ;
17725: LD_INT 3
17727: PPUSH
17728: CALL 15102 0 1
// AttackNearBuildings ( 3 , 1 ) ;
17732: LD_INT 3
17734: PPUSH
17735: LD_INT 1
17737: PPUSH
17738: CALL 14191 0 2
// end ;
17742: END
// every 0 0$1 trigger IsDying ( rueastdepot ) do
17743: LD_INT 4
17745: PPUSH
17746: CALL_OW 303
17750: IFFALSE 17765
17752: GO 17754
17754: DISABLE
// DefendDepot ( 3 , rueastdepot ) ;
17755: LD_INT 3
17757: PPUSH
17758: LD_INT 4
17760: PPUSH
17761: CALL 15754 0 2
17765: END
// every 0 0$1 do
17766: GO 17768
17768: DISABLE
// begin ResAllTechs ( 3 , rulab1 , 3 ) ;
17769: LD_INT 3
17771: PPUSH
17772: LD_INT 91
17774: PPUSH
17775: LD_INT 3
17777: PPUSH
17778: CALL 12979 0 3
// ResAllTechs ( 3 , rulab2 , 3 ) ;
17782: LD_INT 3
17784: PPUSH
17785: LD_INT 47
17787: PPUSH
17788: LD_INT 3
17790: PPUSH
17791: CALL 12979 0 3
// ResAllTechs ( 3 , rulab3 , 3 ) ;
17795: LD_INT 3
17797: PPUSH
17798: LD_INT 129
17800: PPUSH
17801: LD_INT 3
17803: PPUSH
17804: CALL 12979 0 3
// ResAllTechs ( 3 , ruheadlab , 3 ) ;
17808: LD_INT 3
17810: PPUSH
17811: LD_INT 3
17813: PPUSH
17814: LD_INT 3
17816: PPUSH
17817: CALL 12979 0 3
// end ;
17821: END
// every 5 5$0 trigger secondPass = 2 and GetSide ( ru_fact ) = 3 and GetSide ( rufab2 ) = 3 and IsOk ( ru_fact ) and IsOk ( rufab2 ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_not , [ f_empty ] ] ] ) diff FilterUnitsInArea ( RussianOutsideVehs , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) = 0 do
17822: LD_EXP 27
17826: PUSH
17827: LD_INT 2
17829: EQUAL
17830: PUSH
17831: LD_INT 21
17833: PPUSH
17834: CALL_OW 255
17838: PUSH
17839: LD_INT 3
17841: EQUAL
17842: AND
17843: PUSH
17844: LD_INT 112
17846: PPUSH
17847: CALL_OW 255
17851: PUSH
17852: LD_INT 3
17854: EQUAL
17855: AND
17856: PUSH
17857: LD_INT 21
17859: PPUSH
17860: CALL_OW 302
17864: AND
17865: PUSH
17866: LD_INT 112
17868: PPUSH
17869: CALL_OW 302
17873: AND
17874: PUSH
17875: LD_INT 22
17877: PUSH
17878: LD_INT 3
17880: PUSH
17881: EMPTY
17882: LIST
17883: LIST
17884: PUSH
17885: LD_INT 21
17887: PUSH
17888: LD_INT 2
17890: PUSH
17891: EMPTY
17892: LIST
17893: LIST
17894: PUSH
17895: LD_INT 50
17897: PUSH
17898: EMPTY
17899: LIST
17900: PUSH
17901: LD_INT 3
17903: PUSH
17904: LD_INT 58
17906: PUSH
17907: EMPTY
17908: LIST
17909: PUSH
17910: EMPTY
17911: LIST
17912: LIST
17913: PUSH
17914: EMPTY
17915: LIST
17916: LIST
17917: LIST
17918: LIST
17919: PPUSH
17920: CALL_OW 69
17924: PUSH
17925: LD_INT 18
17927: PPUSH
17928: LD_INT 22
17930: PUSH
17931: LD_INT 3
17933: PUSH
17934: EMPTY
17935: LIST
17936: LIST
17937: PUSH
17938: LD_INT 21
17940: PUSH
17941: LD_INT 2
17943: PUSH
17944: EMPTY
17945: LIST
17946: LIST
17947: PUSH
17948: EMPTY
17949: LIST
17950: LIST
17951: PPUSH
17952: CALL_OW 70
17956: PUSH
17957: LD_INT 0
17959: EQUAL
17960: DIFF
17961: AND
17962: IFFALSE 18080
17964: GO 17966
17966: DISABLE
// begin enable ;
17967: ENABLE
// BuildingVehicle ( 3 , ru_fact , [ 3 , 4 , 4 ] [ Difficulty ] , [ 46 , 45 , 44 ] , 3 , 3 , 24 ) ;
17968: LD_INT 3
17970: PPUSH
17971: LD_INT 21
17973: PPUSH
17974: LD_INT 3
17976: PUSH
17977: LD_INT 4
17979: PUSH
17980: LD_INT 4
17982: PUSH
17983: EMPTY
17984: LIST
17985: LIST
17986: LIST
17987: PUSH
17988: LD_OWVAR 67
17992: ARRAY
17993: PPUSH
17994: LD_INT 46
17996: PUSH
17997: LD_INT 45
17999: PUSH
18000: LD_INT 44
18002: PUSH
18003: EMPTY
18004: LIST
18005: LIST
18006: LIST
18007: PPUSH
18008: LD_INT 3
18010: PPUSH
18011: LD_INT 3
18013: PPUSH
18014: LD_INT 24
18016: PPUSH
18017: CALL 14601 0 7
// if russianTimeLapsers = 0 then
18021: LD_EXP 40
18025: PUSH
18026: LD_INT 0
18028: EQUAL
18029: IFFALSE 18080
// BuildingVehicle ( 3 , rufab2 , [ 1 , 2 , 2 ] [ Difficulty ] , [ 49 , 49 ] , 3 , 3 , 24 ) ;
18031: LD_INT 3
18033: PPUSH
18034: LD_INT 112
18036: PPUSH
18037: LD_INT 1
18039: PUSH
18040: LD_INT 2
18042: PUSH
18043: LD_INT 2
18045: PUSH
18046: EMPTY
18047: LIST
18048: LIST
18049: LIST
18050: PUSH
18051: LD_OWVAR 67
18055: ARRAY
18056: PPUSH
18057: LD_INT 49
18059: PUSH
18060: LD_INT 49
18062: PUSH
18063: EMPTY
18064: LIST
18065: LIST
18066: PPUSH
18067: LD_INT 3
18069: PPUSH
18070: LD_INT 3
18072: PPUSH
18073: LD_INT 24
18075: PPUSH
18076: CALL 14601 0 7
// end ;
18080: END
// every 0 0$1 trigger arabianMines do var i ;
18081: LD_EXP 44
18085: IFFALSE 18206
18087: GO 18089
18089: DISABLE
18090: LD_INT 0
18092: PPUSH
// begin enable ;
18093: ENABLE
// for i in arabianMines do
18094: LD_ADDR_VAR 0 1
18098: PUSH
18099: LD_EXP 44
18103: PUSH
18104: FOR_IN
18105: IFFALSE 18204
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , i [ 1 ] , i [ 2 ] , 3 ] ] ) then
18107: LD_INT 22
18109: PUSH
18110: LD_INT 1
18112: PUSH
18113: EMPTY
18114: LIST
18115: LIST
18116: PUSH
18117: LD_INT 92
18119: PUSH
18120: LD_VAR 0 1
18124: PUSH
18125: LD_INT 1
18127: ARRAY
18128: PUSH
18129: LD_VAR 0 1
18133: PUSH
18134: LD_INT 2
18136: ARRAY
18137: PUSH
18138: LD_INT 3
18140: PUSH
18141: EMPTY
18142: LIST
18143: LIST
18144: LIST
18145: LIST
18146: PUSH
18147: EMPTY
18148: LIST
18149: LIST
18150: PPUSH
18151: CALL_OW 69
18155: IFFALSE 18202
// begin LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , 5 ) ;
18157: LD_VAR 0 1
18161: PUSH
18162: LD_INT 1
18164: ARRAY
18165: PPUSH
18166: LD_VAR 0 1
18170: PUSH
18171: LD_INT 2
18173: ARRAY
18174: PPUSH
18175: LD_INT 5
18177: PPUSH
18178: CALL_OW 456
// arabianMines := Delete ( arabianMines , i ) ;
18182: LD_ADDR_EXP 44
18186: PUSH
18187: LD_EXP 44
18191: PPUSH
18192: LD_VAR 0 1
18196: PPUSH
18197: CALL_OW 3
18201: ST_TO_ADDR
// end ; end ;
18202: GO 18104
18204: POP
18205: POP
// end ;
18206: PPOPN 1
18208: END
// every 0 0$1 trigger vehicleTeleported = 4 and tpCounter = [ 6 , 8 , 8 ] [ Difficulty ] do
18209: LD_EXP 28
18213: PUSH
18214: LD_INT 4
18216: EQUAL
18217: PUSH
18218: LD_EXP 29
18222: PUSH
18223: LD_INT 6
18225: PUSH
18226: LD_INT 8
18228: PUSH
18229: LD_INT 8
18231: PUSH
18232: EMPTY
18233: LIST
18234: LIST
18235: LIST
18236: PUSH
18237: LD_OWVAR 67
18241: ARRAY
18242: EQUAL
18243: AND
18244: IFFALSE 18262
18246: GO 18248
18248: DISABLE
// TeleportExit ( ruteleprt , 47 , 82 ) ;
18249: LD_INT 10
18251: PPUSH
18252: LD_INT 47
18254: PPUSH
18255: LD_INT 82
18257: PPUSH
18258: CALL_OW 243
18262: END
// every 2 2$0 trigger vehicleTeleported = 4 do
18263: LD_EXP 28
18267: PUSH
18268: LD_INT 4
18270: EQUAL
18271: IFFALSE 18293
18273: GO 18275
18275: DISABLE
// begin enable ;
18276: ENABLE
// attackTactic = rand ( 1 , 2 ) ;
18277: LD_ADDR_EXP 43
18281: PUSH
18282: LD_INT 1
18284: PPUSH
18285: LD_INT 2
18287: PPUSH
18288: CALL_OW 12
18292: ST_TO_ADDR
// end ; end_of_file
18293: END
// every 0 0$1 trigger RuScientists = [ ] and IsDead ( ruheadlab ) do
18294: LD_EXP 34
18298: PUSH
18299: EMPTY
18300: EQUAL
18301: PUSH
18302: LD_INT 3
18304: PPUSH
18305: CALL_OW 301
18309: AND
18310: IFFALSE 18515
18312: GO 18314
18314: DISABLE
// begin if sciCounter = 0 then
18315: LD_EXP 35
18319: PUSH
18320: LD_INT 0
18322: EQUAL
18323: IFFALSE 18349
// begin Say ( JMM , D7a-JMM-1 ) ;
18325: LD_EXP 1
18329: PPUSH
18330: LD_STRING D7a-JMM-1
18332: PPUSH
18333: CALL_OW 88
// SayRadio ( Powell , D7a-Pow-1 ) ;
18337: LD_EXP 22
18341: PPUSH
18342: LD_STRING D7a-Pow-1
18344: PPUSH
18345: CALL_OW 94
// end ; if sciCounter > 0 and sciCounter < 6 then
18349: LD_EXP 35
18353: PUSH
18354: LD_INT 0
18356: GREATER
18357: PUSH
18358: LD_EXP 35
18362: PUSH
18363: LD_INT 6
18365: LESS
18366: AND
18367: IFFALSE 18393
// begin Say ( JMM , D7b-JMM-1 ) ;
18369: LD_EXP 1
18373: PPUSH
18374: LD_STRING D7b-JMM-1
18376: PPUSH
18377: CALL_OW 88
// SayRadio ( Powell , D7b-Pow-1 ) ;
18381: LD_EXP 22
18385: PPUSH
18386: LD_STRING D7b-Pow-1
18388: PPUSH
18389: CALL_OW 94
// end ; if sciCounter = 6 then
18393: LD_EXP 35
18397: PUSH
18398: LD_INT 6
18400: EQUAL
18401: IFFALSE 18511
// begin Say ( JMM , D7c-JMM-1 ) ;
18403: LD_EXP 1
18407: PPUSH
18408: LD_STRING D7c-JMM-1
18410: PPUSH
18411: CALL_OW 88
// SayRadio ( Powell , D7c-Pow-1 ) ;
18415: LD_EXP 22
18419: PPUSH
18420: LD_STRING D7c-Pow-1
18422: PPUSH
18423: CALL_OW 94
// Say ( JMM , D7d-JMM-1 ) ;
18427: LD_EXP 1
18431: PPUSH
18432: LD_STRING D7d-JMM-1
18434: PPUSH
18435: CALL_OW 88
// SayRadio ( Powell , D7d-Pow-1 ) ;
18439: LD_EXP 22
18443: PPUSH
18444: LD_STRING D7d-Pow-1
18446: PPUSH
18447: CALL_OW 94
// Say ( JMM , D7d-JMM-2 ) ;
18451: LD_EXP 1
18455: PPUSH
18456: LD_STRING D7d-JMM-2
18458: PPUSH
18459: CALL_OW 88
// if askSiberite = 1 then
18463: LD_EXP 32
18467: PUSH
18468: LD_INT 1
18470: EQUAL
18471: IFFALSE 18487
// begin Say ( JMM , D7d-JMM-2a ) ;
18473: LD_EXP 1
18477: PPUSH
18478: LD_STRING D7d-JMM-2a
18480: PPUSH
18481: CALL_OW 88
// end else
18485: GO 18499
// begin SayRadio ( Powell , D7d-Pow-2 ) ;
18487: LD_EXP 22
18491: PPUSH
18492: LD_STRING D7d-Pow-2
18494: PPUSH
18495: CALL_OW 94
// end ; SayRadio ( Powell , D7d-Pow-2a ) ;
18499: LD_EXP 22
18503: PPUSH
18504: LD_STRING D7d-Pow-2a
18506: PPUSH
18507: CALL_OW 94
// end ; FinishMission ;
18511: CALL 18516 0 0
// end ;
18515: END
// export function FinishMission ; var m1 , m2 , m3 ; begin
18516: LD_INT 0
18518: PPUSH
18519: PPUSH
18520: PPUSH
18521: PPUSH
// m1 := false ;
18522: LD_ADDR_VAR 0 2
18526: PUSH
18527: LD_INT 0
18529: ST_TO_ADDR
// m2 := false ;
18530: LD_ADDR_VAR 0 3
18534: PUSH
18535: LD_INT 0
18537: ST_TO_ADDR
// m3 := false ;
18538: LD_ADDR_VAR 0 4
18542: PUSH
18543: LD_INT 0
18545: ST_TO_ADDR
// if not westPathUsed then
18546: LD_EXP 49
18550: NOT
18551: IFFALSE 18560
// SetAchievement ( ACH_PATH ) ;
18553: LD_STRING ACH_PATH
18555: PPUSH
18556: CALL_OW 543
// if not rocketBuilded then
18560: LD_EXP 51
18564: NOT
18565: IFFALSE 18581
// begin wait ( 3 ) ;
18567: LD_INT 3
18569: PPUSH
18570: CALL_OW 67
// SetAchievement ( ACH_ROCKET ) ;
18574: LD_STRING ACH_ROCKET
18576: PPUSH
18577: CALL_OW 543
// end ; if tick <= 40 40$00 then
18581: LD_OWVAR 1
18585: PUSH
18586: LD_INT 84000
18588: LESSEQUAL
18589: IFFALSE 18605
// begin wait ( 3 ) ;
18591: LD_INT 3
18593: PPUSH
18594: CALL_OW 67
// SetAchievement ( ACH_ASPEED_12 ) ;
18598: LD_STRING ACH_ASPEED_12
18600: PPUSH
18601: CALL_OW 543
// end ; if teleportExplored = 1 then
18605: LD_EXP 33
18609: PUSH
18610: LD_INT 1
18612: EQUAL
18613: IFFALSE 18635
// begin m1 := true ;
18615: LD_ADDR_VAR 0 2
18619: PUSH
18620: LD_INT 1
18622: ST_TO_ADDR
// AddMedal ( Teleport , 1 ) ;
18623: LD_STRING Teleport
18625: PPUSH
18626: LD_INT 1
18628: PPUSH
18629: CALL_OW 101
// end else
18633: GO 18646
// AddMedal ( Teleport , - 1 ) ;
18635: LD_STRING Teleport
18637: PPUSH
18638: LD_INT 1
18640: NEG
18641: PPUSH
18642: CALL_OW 101
// if sciCounter > 2 then
18646: LD_EXP 35
18650: PUSH
18651: LD_INT 2
18653: GREATER
18654: IFFALSE 18676
// begin m2 := true ;
18656: LD_ADDR_VAR 0 3
18660: PUSH
18661: LD_INT 1
18663: ST_TO_ADDR
// AddMedal ( Materials , 1 ) ;
18664: LD_STRING Materials
18666: PPUSH
18667: LD_INT 1
18669: PPUSH
18670: CALL_OW 101
// end else
18674: GO 18687
// AddMedal ( Materials , - 1 ) ;
18676: LD_STRING Materials
18678: PPUSH
18679: LD_INT 1
18681: NEG
18682: PPUSH
18683: CALL_OW 101
// if sciCounter = 6 then
18687: LD_EXP 35
18691: PUSH
18692: LD_INT 6
18694: EQUAL
18695: IFFALSE 18727
// begin m3 := true ;
18697: LD_ADDR_VAR 0 4
18701: PUSH
18702: LD_INT 1
18704: ST_TO_ADDR
// AddMedal ( Scientists , 1 ) ;
18705: LD_STRING Scientists
18707: PPUSH
18708: LD_INT 1
18710: PPUSH
18711: CALL_OW 101
// SaveVariable ( 1 , 12_SciDed_1 ) ;
18715: LD_INT 1
18717: PPUSH
18718: LD_STRING 12_SciDed_1
18720: PPUSH
18721: CALL_OW 39
// end else
18725: GO 18748
// begin AddMedal ( Scientists , - 1 ) ;
18727: LD_STRING Scientists
18729: PPUSH
18730: LD_INT 1
18732: NEG
18733: PPUSH
18734: CALL_OW 101
// SaveVariable ( 0 , 12_SciDed_1 ) ;
18738: LD_INT 0
18740: PPUSH
18741: LD_STRING 12_SciDed_1
18743: PPUSH
18744: CALL_OW 39
// end ; SaveVariable ( fakeInfo , 12_MainDepositFake_1 ) ;
18748: LD_EXP 31
18752: PPUSH
18753: LD_STRING 12_MainDepositFake_1
18755: PPUSH
18756: CALL_OW 39
// if m1 and m2 and m3 and Difficulty = 3 then
18760: LD_VAR 0 2
18764: PUSH
18765: LD_VAR 0 3
18769: AND
18770: PUSH
18771: LD_VAR 0 4
18775: AND
18776: PUSH
18777: LD_OWVAR 67
18781: PUSH
18782: LD_INT 3
18784: EQUAL
18785: AND
18786: IFFALSE 18798
// SetAchievementEX ( ACH_AMER , 12 ) ;
18788: LD_STRING ACH_AMER
18790: PPUSH
18791: LD_INT 12
18793: PPUSH
18794: CALL_OW 564
// GiveMedals ( MAIN ) ;
18798: LD_STRING MAIN
18800: PPUSH
18801: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
18805: LD_INT 22
18807: PUSH
18808: LD_INT 1
18810: PUSH
18811: EMPTY
18812: LIST
18813: LIST
18814: PUSH
18815: LD_INT 21
18817: PUSH
18818: LD_INT 1
18820: PUSH
18821: EMPTY
18822: LIST
18823: LIST
18824: PUSH
18825: LD_INT 2
18827: PUSH
18828: LD_INT 25
18830: PUSH
18831: LD_INT 1
18833: PUSH
18834: EMPTY
18835: LIST
18836: LIST
18837: PUSH
18838: LD_INT 25
18840: PUSH
18841: LD_INT 2
18843: PUSH
18844: EMPTY
18845: LIST
18846: LIST
18847: PUSH
18848: LD_INT 25
18850: PUSH
18851: LD_INT 3
18853: PUSH
18854: EMPTY
18855: LIST
18856: LIST
18857: PUSH
18858: LD_INT 25
18860: PUSH
18861: LD_INT 4
18863: PUSH
18864: EMPTY
18865: LIST
18866: LIST
18867: PUSH
18868: LD_INT 25
18870: PUSH
18871: LD_INT 5
18873: PUSH
18874: EMPTY
18875: LIST
18876: LIST
18877: PUSH
18878: LD_INT 25
18880: PUSH
18881: LD_INT 8
18883: PUSH
18884: EMPTY
18885: LIST
18886: LIST
18887: PUSH
18888: EMPTY
18889: LIST
18890: LIST
18891: LIST
18892: LIST
18893: LIST
18894: LIST
18895: LIST
18896: PUSH
18897: EMPTY
18898: LIST
18899: LIST
18900: LIST
18901: PPUSH
18902: CALL_OW 69
18906: PPUSH
18907: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
18911: LD_EXP 1
18915: PPUSH
18916: LD_EXP 46
18920: PUSH
18921: LD_STRING JMM
18923: STR
18924: PPUSH
18925: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
18929: LD_EXP 7
18933: PPUSH
18934: LD_EXP 46
18938: PUSH
18939: LD_STRING Brown
18941: STR
18942: PPUSH
18943: CALL 12211 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
18947: LD_EXP 3
18951: PPUSH
18952: LD_EXP 46
18956: PUSH
18957: LD_STRING Donaldson
18959: STR
18960: PPUSH
18961: CALL 12211 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
18965: LD_EXP 4
18969: PPUSH
18970: LD_EXP 46
18974: PUSH
18975: LD_STRING Bobby
18977: STR
18978: PPUSH
18979: CALL 12211 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
18983: LD_EXP 5
18987: PPUSH
18988: LD_EXP 46
18992: PUSH
18993: LD_STRING Cyrus
18995: STR
18996: PPUSH
18997: CALL 12211 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
19001: LD_EXP 2
19005: PPUSH
19006: LD_EXP 46
19010: PUSH
19011: LD_STRING Lisa
19013: STR
19014: PPUSH
19015: CALL 12211 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
19019: LD_EXP 12
19023: PPUSH
19024: LD_EXP 46
19028: PUSH
19029: LD_STRING Frank
19031: STR
19032: PPUSH
19033: CALL 12211 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
19037: LD_EXP 13
19041: PPUSH
19042: LD_EXP 46
19046: PUSH
19047: LD_STRING Kikuchi
19049: STR
19050: PPUSH
19051: CALL 12211 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
19055: LD_EXP 9
19059: PPUSH
19060: LD_EXP 46
19064: PUSH
19065: LD_STRING Houten
19067: STR
19068: PPUSH
19069: CALL 12211 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
19073: LD_EXP 11
19077: PPUSH
19078: LD_EXP 46
19082: PUSH
19083: LD_STRING Gary
19085: STR
19086: PPUSH
19087: CALL 12211 0 2
// EnchancedSaveCharacters ( Cornel , mission_prefix & Cornell ) ;
19091: LD_EXP 10
19095: PPUSH
19096: LD_EXP 46
19100: PUSH
19101: LD_STRING Cornell
19103: STR
19104: PPUSH
19105: CALL 12211 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
19109: LD_EXP 6
19113: PPUSH
19114: LD_EXP 46
19118: PUSH
19119: LD_STRING Denis
19121: STR
19122: PPUSH
19123: CALL 12211 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
19127: LD_EXP 8
19131: PPUSH
19132: LD_EXP 46
19136: PUSH
19137: LD_STRING Gladstone
19139: STR
19140: PPUSH
19141: CALL 12211 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Houten , Gary , Cornel ] , 12_other_survivors ) ;
19145: LD_INT 22
19147: PUSH
19148: LD_INT 1
19150: PUSH
19151: EMPTY
19152: LIST
19153: LIST
19154: PUSH
19155: LD_INT 23
19157: PUSH
19158: LD_INT 1
19160: PUSH
19161: EMPTY
19162: LIST
19163: LIST
19164: PUSH
19165: LD_INT 21
19167: PUSH
19168: LD_INT 1
19170: PUSH
19171: EMPTY
19172: LIST
19173: LIST
19174: PUSH
19175: LD_INT 2
19177: PUSH
19178: LD_INT 25
19180: PUSH
19181: LD_INT 1
19183: PUSH
19184: EMPTY
19185: LIST
19186: LIST
19187: PUSH
19188: LD_INT 25
19190: PUSH
19191: LD_INT 2
19193: PUSH
19194: EMPTY
19195: LIST
19196: LIST
19197: PUSH
19198: LD_INT 25
19200: PUSH
19201: LD_INT 3
19203: PUSH
19204: EMPTY
19205: LIST
19206: LIST
19207: PUSH
19208: LD_INT 25
19210: PUSH
19211: LD_INT 4
19213: PUSH
19214: EMPTY
19215: LIST
19216: LIST
19217: PUSH
19218: LD_INT 25
19220: PUSH
19221: LD_INT 5
19223: PUSH
19224: EMPTY
19225: LIST
19226: LIST
19227: PUSH
19228: LD_INT 25
19230: PUSH
19231: LD_INT 8
19233: PUSH
19234: EMPTY
19235: LIST
19236: LIST
19237: PUSH
19238: EMPTY
19239: LIST
19240: LIST
19241: LIST
19242: LIST
19243: LIST
19244: LIST
19245: LIST
19246: PUSH
19247: EMPTY
19248: LIST
19249: LIST
19250: LIST
19251: LIST
19252: PPUSH
19253: CALL_OW 69
19257: PUSH
19258: LD_EXP 1
19262: PUSH
19263: LD_EXP 7
19267: PUSH
19268: LD_EXP 3
19272: PUSH
19273: LD_EXP 4
19277: PUSH
19278: LD_EXP 5
19282: PUSH
19283: LD_EXP 2
19287: PUSH
19288: LD_EXP 12
19292: PUSH
19293: LD_EXP 8
19297: PUSH
19298: LD_EXP 13
19302: PUSH
19303: LD_EXP 6
19307: PUSH
19308: LD_EXP 9
19312: PUSH
19313: LD_EXP 11
19317: PUSH
19318: LD_EXP 10
19322: PUSH
19323: EMPTY
19324: LIST
19325: LIST
19326: LIST
19327: LIST
19328: LIST
19329: LIST
19330: LIST
19331: LIST
19332: LIST
19333: LIST
19334: LIST
19335: LIST
19336: LIST
19337: DIFF
19338: PPUSH
19339: LD_STRING 12_other_survivors
19341: PPUSH
19342: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , 12_kurt_squad ) ;
19346: LD_INT 22
19348: PUSH
19349: LD_INT 1
19351: PUSH
19352: EMPTY
19353: LIST
19354: LIST
19355: PUSH
19356: LD_INT 23
19358: PUSH
19359: LD_INT 2
19361: PUSH
19362: EMPTY
19363: LIST
19364: LIST
19365: PUSH
19366: LD_INT 21
19368: PUSH
19369: LD_INT 1
19371: PUSH
19372: EMPTY
19373: LIST
19374: LIST
19375: PUSH
19376: LD_INT 2
19378: PUSH
19379: LD_INT 25
19381: PUSH
19382: LD_INT 1
19384: PUSH
19385: EMPTY
19386: LIST
19387: LIST
19388: PUSH
19389: LD_INT 25
19391: PUSH
19392: LD_INT 2
19394: PUSH
19395: EMPTY
19396: LIST
19397: LIST
19398: PUSH
19399: LD_INT 25
19401: PUSH
19402: LD_INT 3
19404: PUSH
19405: EMPTY
19406: LIST
19407: LIST
19408: PUSH
19409: LD_INT 25
19411: PUSH
19412: LD_INT 4
19414: PUSH
19415: EMPTY
19416: LIST
19417: LIST
19418: PUSH
19419: LD_INT 25
19421: PUSH
19422: LD_INT 5
19424: PUSH
19425: EMPTY
19426: LIST
19427: LIST
19428: PUSH
19429: LD_INT 25
19431: PUSH
19432: LD_INT 8
19434: PUSH
19435: EMPTY
19436: LIST
19437: LIST
19438: PUSH
19439: EMPTY
19440: LIST
19441: LIST
19442: LIST
19443: LIST
19444: LIST
19445: LIST
19446: LIST
19447: PUSH
19448: EMPTY
19449: LIST
19450: LIST
19451: LIST
19452: LIST
19453: PPUSH
19454: CALL_OW 69
19458: PPUSH
19459: LD_STRING 12_kurt_squad
19461: PPUSH
19462: CALL_OW 38
// SaveCharacters ( others11 , 12_others ) ;
19466: LD_EXP 14
19470: PPUSH
19471: LD_STRING 12_others
19473: PPUSH
19474: CALL_OW 38
// YouWin ;
19478: CALL_OW 103
// end ; end_of_file
19482: LD_VAR 0 1
19486: RET
// every 0 0$1 trigger IsDead ( JMM ) do
19487: LD_EXP 1
19491: PPUSH
19492: CALL_OW 301
19496: IFFALSE 19508
19498: GO 19500
19500: DISABLE
// YouLost ( JMM ) ; end_of_file
19501: LD_STRING JMM
19503: PPUSH
19504: CALL_OW 104
19508: END
// every 0 0$01 do
19509: GO 19511
19511: DISABLE
// begin repeat wait ( 0 0$30 ) ;
19512: LD_INT 1050
19514: PPUSH
19515: CALL_OW 67
// if cratesSpawned < 6 then
19519: LD_EXP 45
19523: PUSH
19524: LD_INT 6
19526: LESS
19527: IFFALSE 19564
// begin CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
19529: LD_INT 3
19531: PPUSH
19532: LD_INT 5
19534: PPUSH
19535: CALL_OW 12
19539: PPUSH
19540: LD_INT 21
19542: PPUSH
19543: LD_INT 1
19545: PPUSH
19546: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
19550: LD_ADDR_EXP 45
19554: PUSH
19555: LD_EXP 45
19559: PUSH
19560: LD_INT 1
19562: PLUS
19563: ST_TO_ADDR
// end ; if cratesSpawned >= 6 and cratesSpawned < 12 then
19564: LD_EXP 45
19568: PUSH
19569: LD_INT 6
19571: GREATEREQUAL
19572: PUSH
19573: LD_EXP 45
19577: PUSH
19578: LD_INT 12
19580: LESS
19581: AND
19582: IFFALSE 19626
// begin wait ( 0 0$50 ) ;
19584: LD_INT 1750
19586: PPUSH
19587: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
19591: LD_INT 3
19593: PPUSH
19594: LD_INT 5
19596: PPUSH
19597: CALL_OW 12
19601: PPUSH
19602: LD_INT 21
19604: PPUSH
19605: LD_INT 1
19607: PPUSH
19608: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
19612: LD_ADDR_EXP 45
19616: PUSH
19617: LD_EXP 45
19621: PUSH
19622: LD_INT 1
19624: PLUS
19625: ST_TO_ADDR
// end ; if cratesSpawned >= 12 then
19626: LD_EXP 45
19630: PUSH
19631: LD_INT 12
19633: GREATEREQUAL
19634: IFFALSE 19678
// begin wait ( 1 1$40 ) ;
19636: LD_INT 3500
19638: PPUSH
19639: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
19643: LD_INT 3
19645: PPUSH
19646: LD_INT 5
19648: PPUSH
19649: CALL_OW 12
19653: PPUSH
19654: LD_INT 21
19656: PPUSH
19657: LD_INT 1
19659: PPUSH
19660: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
19664: LD_ADDR_EXP 45
19668: PUSH
19669: LD_EXP 45
19673: PUSH
19674: LD_INT 1
19676: PLUS
19677: ST_TO_ADDR
// end ; until false ;
19678: LD_INT 0
19680: IFFALSE 19512
// end ; end_of_file
19682: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; every 1 do
19683: GO 19685
19685: DISABLE
// begin ru_radar := 98 ;
19686: LD_ADDR_EXP 52
19690: PUSH
19691: LD_INT 98
19693: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
19694: LD_ADDR_EXP 53
19698: PUSH
19699: LD_INT 89
19701: ST_TO_ADDR
// us_hack := 99 ;
19702: LD_ADDR_EXP 54
19706: PUSH
19707: LD_INT 99
19709: ST_TO_ADDR
// us_artillery := 97 ;
19710: LD_ADDR_EXP 55
19714: PUSH
19715: LD_INT 97
19717: ST_TO_ADDR
// ar_bio_bomb := 91 ;
19718: LD_ADDR_EXP 56
19722: PUSH
19723: LD_INT 91
19725: ST_TO_ADDR
// end ; end_of_file end_of_file end_of_file
19726: END
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; var i , eff , side ; begin
19727: LD_INT 0
19729: PPUSH
19730: PPUSH
19731: PPUSH
19732: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
19733: LD_VAR 0 1
19737: PPUSH
19738: CALL_OW 264
19742: PUSH
19743: LD_EXP 56
19747: EQUAL
19748: IFFALSE 19820
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
19750: LD_INT 68
19752: PPUSH
19753: LD_VAR 0 1
19757: PPUSH
19758: CALL_OW 255
19762: PPUSH
19763: CALL_OW 321
19767: PUSH
19768: LD_INT 2
19770: EQUAL
19771: IFFALSE 19783
// eff := 70 else
19773: LD_ADDR_VAR 0 6
19777: PUSH
19778: LD_INT 70
19780: ST_TO_ADDR
19781: GO 19791
// eff := 30 ;
19783: LD_ADDR_VAR 0 6
19787: PUSH
19788: LD_INT 30
19790: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
19791: LD_VAR 0 1
19795: PPUSH
19796: CALL_OW 250
19800: PPUSH
19801: LD_VAR 0 1
19805: PPUSH
19806: CALL_OW 251
19810: PPUSH
19811: LD_VAR 0 6
19815: PPUSH
19816: CALL_OW 495
// end ; end ;
19820: LD_VAR 0 4
19824: RET
// export function SOS_Command ( cmd ) ; var i , j , tmp , taskList , _taskList ; begin
19825: LD_INT 0
19827: PPUSH
19828: PPUSH
19829: PPUSH
19830: PPUSH
19831: PPUSH
19832: PPUSH
// if cmd = 124 then
19833: LD_VAR 0 1
19837: PUSH
19838: LD_INT 124
19840: EQUAL
19841: IFFALSE 20047
// begin tmp := FilterAllUnits ( [ f_or , [ f_weapon , ru_bulldozer ] , [ f_weapon , us_bulldozer ] ] ) ;
19843: LD_ADDR_VAR 0 5
19847: PUSH
19848: LD_INT 2
19850: PUSH
19851: LD_INT 34
19853: PUSH
19854: LD_INT 53
19856: PUSH
19857: EMPTY
19858: LIST
19859: LIST
19860: PUSH
19861: LD_INT 34
19863: PUSH
19864: LD_INT 14
19866: PUSH
19867: EMPTY
19868: LIST
19869: LIST
19870: PUSH
19871: EMPTY
19872: LIST
19873: LIST
19874: LIST
19875: PPUSH
19876: CALL_OW 69
19880: ST_TO_ADDR
// if not tmp then
19881: LD_VAR 0 5
19885: NOT
19886: IFFALSE 19890
// exit ;
19888: GO 20047
// for i in tmp do
19890: LD_ADDR_VAR 0 3
19894: PUSH
19895: LD_VAR 0 5
19899: PUSH
19900: FOR_IN
19901: IFFALSE 20045
// begin taskList := GetTaskList ( i ) ;
19903: LD_ADDR_VAR 0 6
19907: PUSH
19908: LD_VAR 0 3
19912: PPUSH
19913: CALL_OW 437
19917: ST_TO_ADDR
// if not taskList then
19918: LD_VAR 0 6
19922: NOT
19923: IFFALSE 19927
// continue ;
19925: GO 19900
// for j = 1 to taskList do
19927: LD_ADDR_VAR 0 4
19931: PUSH
19932: DOUBLE
19933: LD_INT 1
19935: DEC
19936: ST_TO_ADDR
19937: LD_VAR 0 6
19941: PUSH
19942: FOR_TO
19943: IFFALSE 20041
// if taskList [ j ] [ 1 ] = | then
19945: LD_VAR 0 6
19949: PUSH
19950: LD_VAR 0 4
19954: ARRAY
19955: PUSH
19956: LD_INT 1
19958: ARRAY
19959: PUSH
19960: LD_STRING |
19962: EQUAL
19963: IFFALSE 20039
// begin _taskList := Delete ( taskList , 1 ) ;
19965: LD_ADDR_VAR 0 7
19969: PUSH
19970: LD_VAR 0 6
19974: PPUSH
19975: LD_INT 1
19977: PPUSH
19978: CALL_OW 3
19982: ST_TO_ADDR
// SetTaskList ( i , _taskList ) ;
19983: LD_VAR 0 3
19987: PPUSH
19988: LD_VAR 0 7
19992: PPUSH
19993: CALL_OW 446
// CutTreeXYR ( i , taskList [ j ] [ 2 ] , taskList [ j ] [ 3 ] , 8 ) ;
19997: LD_VAR 0 3
20001: PPUSH
20002: LD_VAR 0 6
20006: PUSH
20007: LD_VAR 0 4
20011: ARRAY
20012: PUSH
20013: LD_INT 2
20015: ARRAY
20016: PPUSH
20017: LD_VAR 0 6
20021: PUSH
20022: LD_VAR 0 4
20026: ARRAY
20027: PUSH
20028: LD_INT 3
20030: ARRAY
20031: PPUSH
20032: LD_INT 8
20034: PPUSH
20035: CALL 20052 0 4
// end ;
20039: GO 19942
20041: POP
20042: POP
// end ;
20043: GO 19900
20045: POP
20046: POP
// end ; end ;
20047: LD_VAR 0 2
20051: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
20052: LD_INT 0
20054: PPUSH
20055: PPUSH
20056: PPUSH
20057: PPUSH
20058: PPUSH
20059: PPUSH
20060: PPUSH
20061: PPUSH
20062: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
20063: LD_VAR 0 1
20067: NOT
20068: PUSH
20069: LD_VAR 0 2
20073: PPUSH
20074: LD_VAR 0 3
20078: PPUSH
20079: CALL_OW 488
20083: NOT
20084: OR
20085: PUSH
20086: LD_VAR 0 4
20090: NOT
20091: OR
20092: IFFALSE 20096
// exit ;
20094: GO 20436
// list := [ ] ;
20096: LD_ADDR_VAR 0 13
20100: PUSH
20101: EMPTY
20102: ST_TO_ADDR
// if x - r < 0 then
20103: LD_VAR 0 2
20107: PUSH
20108: LD_VAR 0 4
20112: MINUS
20113: PUSH
20114: LD_INT 0
20116: LESS
20117: IFFALSE 20129
// min_x := 0 else
20119: LD_ADDR_VAR 0 7
20123: PUSH
20124: LD_INT 0
20126: ST_TO_ADDR
20127: GO 20145
// min_x := x - r ;
20129: LD_ADDR_VAR 0 7
20133: PUSH
20134: LD_VAR 0 2
20138: PUSH
20139: LD_VAR 0 4
20143: MINUS
20144: ST_TO_ADDR
// if y - r < 0 then
20145: LD_VAR 0 3
20149: PUSH
20150: LD_VAR 0 4
20154: MINUS
20155: PUSH
20156: LD_INT 0
20158: LESS
20159: IFFALSE 20171
// min_y := 0 else
20161: LD_ADDR_VAR 0 8
20165: PUSH
20166: LD_INT 0
20168: ST_TO_ADDR
20169: GO 20187
// min_y := y - r ;
20171: LD_ADDR_VAR 0 8
20175: PUSH
20176: LD_VAR 0 3
20180: PUSH
20181: LD_VAR 0 4
20185: MINUS
20186: ST_TO_ADDR
// max_x := x + r ;
20187: LD_ADDR_VAR 0 9
20191: PUSH
20192: LD_VAR 0 2
20196: PUSH
20197: LD_VAR 0 4
20201: PLUS
20202: ST_TO_ADDR
// max_y := y + r ;
20203: LD_ADDR_VAR 0 10
20207: PUSH
20208: LD_VAR 0 3
20212: PUSH
20213: LD_VAR 0 4
20217: PLUS
20218: ST_TO_ADDR
// for _x = min_x to max_x do
20219: LD_ADDR_VAR 0 11
20223: PUSH
20224: DOUBLE
20225: LD_VAR 0 7
20229: DEC
20230: ST_TO_ADDR
20231: LD_VAR 0 9
20235: PUSH
20236: FOR_TO
20237: IFFALSE 20354
// for _y = min_y to max_y do
20239: LD_ADDR_VAR 0 12
20243: PUSH
20244: DOUBLE
20245: LD_VAR 0 8
20249: DEC
20250: ST_TO_ADDR
20251: LD_VAR 0 10
20255: PUSH
20256: FOR_TO
20257: IFFALSE 20350
// begin if not ValidHex ( _x , _y ) then
20259: LD_VAR 0 11
20263: PPUSH
20264: LD_VAR 0 12
20268: PPUSH
20269: CALL_OW 488
20273: NOT
20274: IFFALSE 20278
// continue ;
20276: GO 20256
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
20278: LD_VAR 0 11
20282: PPUSH
20283: LD_VAR 0 12
20287: PPUSH
20288: CALL_OW 351
20292: PUSH
20293: LD_VAR 0 11
20297: PPUSH
20298: LD_VAR 0 12
20302: PPUSH
20303: CALL_OW 554
20307: AND
20308: IFFALSE 20348
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
20310: LD_ADDR_VAR 0 13
20314: PUSH
20315: LD_VAR 0 13
20319: PPUSH
20320: LD_VAR 0 13
20324: PUSH
20325: LD_INT 1
20327: PLUS
20328: PPUSH
20329: LD_VAR 0 11
20333: PUSH
20334: LD_VAR 0 12
20338: PUSH
20339: EMPTY
20340: LIST
20341: LIST
20342: PPUSH
20343: CALL_OW 2
20347: ST_TO_ADDR
// end ;
20348: GO 20256
20350: POP
20351: POP
20352: GO 20236
20354: POP
20355: POP
// if not list then
20356: LD_VAR 0 13
20360: NOT
20361: IFFALSE 20365
// exit ;
20363: GO 20436
// for i in list do
20365: LD_ADDR_VAR 0 6
20369: PUSH
20370: LD_VAR 0 13
20374: PUSH
20375: FOR_IN
20376: IFFALSE 20434
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
20378: LD_VAR 0 1
20382: PPUSH
20383: LD_STRING M
20385: PUSH
20386: LD_VAR 0 6
20390: PUSH
20391: LD_INT 1
20393: ARRAY
20394: PUSH
20395: LD_VAR 0 6
20399: PUSH
20400: LD_INT 2
20402: ARRAY
20403: PUSH
20404: LD_INT 0
20406: PUSH
20407: LD_INT 0
20409: PUSH
20410: LD_INT 0
20412: PUSH
20413: LD_INT 0
20415: PUSH
20416: EMPTY
20417: LIST
20418: LIST
20419: LIST
20420: LIST
20421: LIST
20422: LIST
20423: LIST
20424: PUSH
20425: EMPTY
20426: LIST
20427: PPUSH
20428: CALL_OW 447
20432: GO 20375
20434: POP
20435: POP
// end ;
20436: LD_VAR 0 5
20440: RET
